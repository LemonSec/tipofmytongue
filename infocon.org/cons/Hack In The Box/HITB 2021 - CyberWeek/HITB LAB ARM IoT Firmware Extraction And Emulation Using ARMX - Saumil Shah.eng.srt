1
00:00:08,960 --> 00:00:10,880
thank you ladies and gentlemen for

2
00:00:10,880 --> 00:00:12,320
joining me

3
00:00:12,320 --> 00:00:14,920
at hack in the box abu dhabi

4
00:00:14,920 --> 00:00:16,079
i uh

5
00:00:16,079 --> 00:00:18,960
i'm really glad to be back here after uh

6
00:00:18,960 --> 00:00:20,800
after two years

7
00:00:20,800 --> 00:00:22,320
this uh

8
00:00:22,320 --> 00:00:24,240
i was thinking back about

9
00:00:24,240 --> 00:00:26,400
the last time i was at abu dhabi

10
00:00:26,400 --> 00:00:28,240
i released rmx

11
00:00:28,240 --> 00:00:31,199
and that time rmax was my

12
00:00:31,199 --> 00:00:33,760
firmware emulation framework i made it a

13
00:00:33,760 --> 00:00:35,600
special point to release it at cyber

14
00:00:35,600 --> 00:00:37,520
week we made a nice inauguration and i

15
00:00:37,520 --> 00:00:39,120
put it up on github

16
00:00:39,120 --> 00:00:41,040
this time i'm back

17
00:00:41,040 --> 00:00:43,760
with uh with a little more

18
00:00:43,760 --> 00:00:45,920
i'm definitely going to talk about rmex

19
00:00:45,920 --> 00:00:48,160
and the uh

20
00:00:48,160 --> 00:00:49,840
the things we can do with our mix is a

21
00:00:49,840 --> 00:00:51,920
nice little practical demo

22
00:00:51,920 --> 00:00:54,320
about firmware emulation and extraction

23
00:00:54,320 --> 00:00:55,840
which we will do

24
00:00:55,840 --> 00:00:56,719
but

25
00:00:56,719 --> 00:01:00,320
i also wanted to introduce

26
00:01:00,320 --> 00:01:03,760
a massive and a major update

27
00:01:03,760 --> 00:01:05,438
to our mix

28
00:01:05,438 --> 00:01:07,759
which

29
00:01:10,479 --> 00:01:13,520
which is called emux

30
00:01:13,520 --> 00:01:15,119
so folks

31
00:01:15,119 --> 00:01:17,840
emox is

32
00:01:17,840 --> 00:01:20,640
the new rmx

33
00:01:20,640 --> 00:01:22,880
why did i do that

34
00:01:22,880 --> 00:01:25,680
because now rmx

35
00:01:25,680 --> 00:01:29,920
no longer just emulates rmiot devices

36
00:01:29,920 --> 00:01:32,159
rmx

37
00:01:32,159 --> 00:01:35,759
along with arm i added mips support so i

38
00:01:35,759 --> 00:01:38,720
can't call it rmx i can't call it mipsex

39
00:01:38,720 --> 00:01:41,040
well zoltan is calling his framework as

40
00:01:41,040 --> 00:01:42,560
mix mipsex

41
00:01:42,560 --> 00:01:45,200
so we decided to call it emux because

42
00:01:45,200 --> 00:01:47,280
now it's a more generic

43
00:01:47,280 --> 00:01:50,799
framework for emulating several things

44
00:01:50,799 --> 00:01:52,479
it's also available as a docker

45
00:01:52,479 --> 00:01:54,560
container i will talk a little bit about

46
00:01:54,560 --> 00:01:57,680
emacs um in a bit

47
00:01:57,680 --> 00:01:59,439
for an introduction my name is samir

48
00:01:59,439 --> 00:02:00,479
shah

49
00:02:00,479 --> 00:02:02,000
i've been

50
00:02:02,000 --> 00:02:04,320
as i say educating entertaining

51
00:02:04,320 --> 00:02:06,560
entertaining and exasperating audiences

52
00:02:06,560 --> 00:02:07,280
for

53
00:02:07,280 --> 00:02:10,000
since 1999 i've been around for a long

54
00:02:10,000 --> 00:02:12,080
time

55
00:02:12,080 --> 00:02:13,440
this was actually a picture at one of

56
00:02:13,440 --> 00:02:17,680
the hacking the boxes at kuala lumpur

57
00:02:17,680 --> 00:02:19,360
so um

58
00:02:19,360 --> 00:02:22,080
talked about rmax which is now emox all

59
00:02:22,080 --> 00:02:24,000
the documentation has been updated you

60
00:02:24,000 --> 00:02:27,080
could find it on

61
00:02:27,080 --> 00:02:28,720
emacs.exploitlab.net

62
00:02:28,720 --> 00:02:31,120
the git repo has been updated the docker

63
00:02:31,120 --> 00:02:33,040
image has been updated

64
00:02:33,040 --> 00:02:34,080
and

65
00:02:34,080 --> 00:02:36,879
you now as a bonus get

66
00:02:36,879 --> 00:02:40,720
full mips capabilities

67
00:02:41,519 --> 00:02:43,440
what we're going to do in this exercise

68
00:02:43,440 --> 00:02:44,160
is

69
00:02:44,160 --> 00:02:46,160
in this workshop is we'll take an ip

70
00:02:46,160 --> 00:02:47,680
camera

71
00:02:47,680 --> 00:02:50,959
the trivision nc218

72
00:02:50,959 --> 00:02:52,000
we will

73
00:02:52,000 --> 00:02:55,519
extract the firmware from the iep camera

74
00:02:55,519 --> 00:02:57,440
we're going to use hardware

75
00:02:57,440 --> 00:02:59,280
to extract the firmware

76
00:02:59,280 --> 00:03:01,040
i will show you the kind of hardware

77
00:03:01,040 --> 00:03:03,519
support i've got in a little bit

78
00:03:03,519 --> 00:03:05,760
once we've extracted the firmware

79
00:03:05,760 --> 00:03:08,080
we will then proceed to

80
00:03:08,080 --> 00:03:10,080
emulate it in emux

81
00:03:10,080 --> 00:03:13,760
and get a working emulated version of

82
00:03:13,760 --> 00:03:16,560
the ip camera going

83
00:03:16,560 --> 00:03:18,080
um

84
00:03:18,080 --> 00:03:20,640
this lab is

85
00:03:20,640 --> 00:03:23,519
originally intended to be a hands-on lab

86
00:03:23,519 --> 00:03:24,400
i

87
00:03:24,400 --> 00:03:27,040
thought about it i do not think the

88
00:03:27,040 --> 00:03:29,440
current layout and the social distancing

89
00:03:29,440 --> 00:03:31,440
and the arrangements

90
00:03:31,440 --> 00:03:34,319
support so much of hands-on

91
00:03:34,319 --> 00:03:37,120
interaction however if you wish to play

92
00:03:37,120 --> 00:03:39,120
with these things just let me know we'll

93
00:03:39,120 --> 00:03:40,640
figure out how

94
00:03:40,640 --> 00:03:42,319
we can

95
00:03:42,319 --> 00:03:44,480
play with it i'll give you some hints

96
00:03:44,480 --> 00:03:46,080
there's some documentation you can

97
00:03:46,080 --> 00:03:47,680
probably just grab the docker image

98
00:03:47,680 --> 00:03:48,720
yourself

99
00:03:48,720 --> 00:03:49,920
and do it

100
00:03:49,920 --> 00:03:52,720
and i would

101
00:03:53,200 --> 00:03:57,519
i'll share some images with you later on

102
00:03:57,519 --> 00:03:59,439
in the get repository for you to try and

103
00:03:59,439 --> 00:04:01,840
play

104
00:04:01,840 --> 00:04:02,959
now

105
00:04:02,959 --> 00:04:05,120
just a little bit of introduction to iot

106
00:04:05,120 --> 00:04:07,920
devices right

107
00:04:07,920 --> 00:04:10,319
what are iot devices

108
00:04:10,319 --> 00:04:11,519
how do they work

109
00:04:11,519 --> 00:04:12,879
and what are some of the fundamental

110
00:04:12,879 --> 00:04:15,120
differences in

111
00:04:15,120 --> 00:04:17,199
in iot devices

112
00:04:17,199 --> 00:04:19,199
from desktop computers

113
00:04:19,199 --> 00:04:21,199
and we will explore these differences

114
00:04:21,199 --> 00:04:24,479
from the point of view of

115
00:04:24,479 --> 00:04:26,240
emulating them

116
00:04:26,240 --> 00:04:29,199
if we want to emulate a desktop it's

117
00:04:29,199 --> 00:04:31,040
really easy right all you do is just

118
00:04:31,040 --> 00:04:33,840
spin up vmware virtualbox pop in an

119
00:04:33,840 --> 00:04:36,080
image and boom off it goes

120
00:04:36,080 --> 00:04:37,919
but you can't just like say i'm going to

121
00:04:37,919 --> 00:04:40,080
take firmware drop it into qemu and it

122
00:04:40,080 --> 00:04:42,080
does it does its thing it it's not that

123
00:04:42,080 --> 00:04:46,160
easy there is a plethora of complexities

124
00:04:46,160 --> 00:04:50,240
in qemu and the way iot devices are and

125
00:04:50,240 --> 00:04:52,000
we really have to go deep down into

126
00:04:52,000 --> 00:04:53,840
understanding the architecture of iot

127
00:04:53,840 --> 00:04:56,800
devices and how they boot up to get an

128
00:04:56,800 --> 00:05:00,639
idea of how these can be emulated

129
00:05:00,639 --> 00:05:02,639
so couple of things i'm going to first

130
00:05:02,639 --> 00:05:04,639
talk about the architecture of iot

131
00:05:04,639 --> 00:05:06,320
devices for a few minutes

132
00:05:06,320 --> 00:05:08,560
we'll talk about the boot up sequence of

133
00:05:08,560 --> 00:05:11,919
iot devices then we'll proceed to do the

134
00:05:11,919 --> 00:05:14,479
firmware emulation

135
00:05:14,479 --> 00:05:16,479
sorry the firmware extraction

136
00:05:16,479 --> 00:05:18,320
using hardware

137
00:05:18,320 --> 00:05:20,800
i will

138
00:05:20,960 --> 00:05:22,400
here's the hardware

139
00:05:22,400 --> 00:05:24,720
i'll give you a closer look using the

140
00:05:24,720 --> 00:05:26,560
laptop camera in just a little bit so

141
00:05:26,560 --> 00:05:28,320
you can see what's going on

142
00:05:28,320 --> 00:05:30,880
and uh

143
00:05:30,880 --> 00:05:33,039
once we get the once we get the firmware

144
00:05:33,039 --> 00:05:35,039
the next phase will be

145
00:05:35,039 --> 00:05:37,199
breaking that firmware up and emulating

146
00:05:37,199 --> 00:05:40,479
it in emux at the end of this workshop

147
00:05:40,479 --> 00:05:42,560
demo session we should be able to get

148
00:05:42,560 --> 00:05:43,840
our hands

149
00:05:43,840 --> 00:05:46,960
on a fully emulated copy of

150
00:05:46,960 --> 00:05:48,880
the trivision ip camera

151
00:05:48,880 --> 00:05:51,280
which works just as well enough

152
00:05:51,280 --> 00:05:52,960
as the real thing

153
00:05:52,960 --> 00:05:55,120
i use this in my training

154
00:05:55,120 --> 00:05:58,560
for fuzzing debugging and doing exploit

155
00:05:58,560 --> 00:06:00,240
development

156
00:06:00,240 --> 00:06:02,000
you know it is much better to do exploit

157
00:06:02,000 --> 00:06:03,919
development and testing on a virtual

158
00:06:03,919 --> 00:06:06,000
image than on the real image you have

159
00:06:06,000 --> 00:06:08,560
the ability to you know put tools in

160
00:06:08,560 --> 00:06:10,560
pull tools out

161
00:06:10,560 --> 00:06:13,039
snapshot it reset it

162
00:06:13,039 --> 00:06:15,120
it's pretty hard to do all that stuff on

163
00:06:15,120 --> 00:06:18,960
this on this little little device

164
00:06:18,960 --> 00:06:20,560
so that's a little preview of what's

165
00:06:20,560 --> 00:06:23,199
coming up next

166
00:06:23,199 --> 00:06:24,000
so

167
00:06:24,000 --> 00:06:28,880
quick intro to the iot boot up process

168
00:06:31,280 --> 00:06:32,400
there's

169
00:06:32,400 --> 00:06:36,160
no spinning disc on an iot device

170
00:06:36,160 --> 00:06:38,240
there's no block storage

171
00:06:38,240 --> 00:06:40,319
there's no ssd

172
00:06:40,319 --> 00:06:42,960
what you have is the cpu the system on

173
00:06:42,960 --> 00:06:43,840
chip

174
00:06:43,840 --> 00:06:44,880
and

175
00:06:44,880 --> 00:06:48,319
nand flash or nor flash as your memory

176
00:06:48,319 --> 00:06:51,440
so essentially it's cpu

177
00:06:51,440 --> 00:06:54,479
the ram that is built into the cpu in

178
00:06:54,479 --> 00:06:55,680
the soc

179
00:06:55,680 --> 00:06:57,919
an external nand flash which is

180
00:06:57,919 --> 00:07:01,039
implemented as serial spi flash

181
00:07:01,039 --> 00:07:02,880
and then you have your usual peripherals

182
00:07:02,880 --> 00:07:06,560
it's like lan interface when the wi-fi

183
00:07:06,560 --> 00:07:08,080
in the case of the ip camera your the

184
00:07:08,080 --> 00:07:10,960
frame buffer and the works

185
00:07:10,960 --> 00:07:13,759
when you power on an iot device

186
00:07:13,759 --> 00:07:15,599
the cpu kicks in

187
00:07:15,599 --> 00:07:16,400
it

188
00:07:16,400 --> 00:07:18,560
fetches its program to you know look for

189
00:07:18,560 --> 00:07:21,199
the boot loader at a particular

190
00:07:21,199 --> 00:07:24,160
location in the

191
00:07:24,720 --> 00:07:28,319
in the in the flash memory

192
00:07:28,319 --> 00:07:31,039
all this purple stuff happens in flash

193
00:07:31,039 --> 00:07:32,479
memory

194
00:07:32,479 --> 00:07:34,400
now the bootloader will in turn find the

195
00:07:34,400 --> 00:07:35,919
kernel

196
00:07:35,919 --> 00:07:38,639
the kernel will search for the flash

197
00:07:38,639 --> 00:07:39,919
partitions

198
00:07:39,919 --> 00:07:42,319
and find the

199
00:07:42,319 --> 00:07:45,120
file system

200
00:07:45,120 --> 00:07:46,960
after

201
00:07:46,960 --> 00:07:48,720
the kernel finds the file system

202
00:07:48,720 --> 00:07:52,000
everything happens in ram disk

203
00:07:52,000 --> 00:07:53,919
so flash

204
00:07:53,919 --> 00:07:56,080
i mean you and i are used to flash being

205
00:07:56,080 --> 00:07:57,599
read writeable

206
00:07:57,599 --> 00:08:01,199
but truth is flash is not writable

207
00:08:01,199 --> 00:08:04,800
flash is readable and erasable

208
00:08:04,800 --> 00:08:07,360
so if you think of flash memory

209
00:08:07,360 --> 00:08:10,800
flash has multiple blocks

210
00:08:11,599 --> 00:08:14,479
you have more blocks

211
00:08:14,479 --> 00:08:16,240
available on the flash chip than you

212
00:08:16,240 --> 00:08:19,199
actually need so if you take like

213
00:08:19,199 --> 00:08:22,400
a 64 megabyte uh

214
00:08:22,400 --> 00:08:23,680
flash chip

215
00:08:23,680 --> 00:08:26,400
chances you'll have like double the

216
00:08:26,400 --> 00:08:28,879
number of blocks on it

217
00:08:28,879 --> 00:08:31,280
the more you write to it the old blocks

218
00:08:31,280 --> 00:08:33,120
will just get killed

219
00:08:33,120 --> 00:08:36,159
and new blocks will get consumed

220
00:08:36,159 --> 00:08:38,240
a time will come when you cannot write

221
00:08:38,240 --> 00:08:40,080
to the flash memory anymore it is

222
00:08:40,080 --> 00:08:42,640
completely worked

223
00:08:42,640 --> 00:08:45,839
at that time it becomes a cd-rom so

224
00:08:45,839 --> 00:08:47,760
all the stuff over here right the kernel

225
00:08:47,760 --> 00:08:49,680
the bootloader compressed file system

226
00:08:49,680 --> 00:08:51,760
everything is pretty much read-only for

227
00:08:51,760 --> 00:08:52,800
us

228
00:08:52,800 --> 00:08:54,560
when the

229
00:08:54,560 --> 00:08:56,640
kernel finds the file system it will

230
00:08:56,640 --> 00:08:58,320
uncompress it

231
00:08:58,320 --> 00:08:59,760
in

232
00:08:59,760 --> 00:09:00,640
ram

233
00:09:00,640 --> 00:09:02,880
so you get a ram disk which is like

234
00:09:02,880 --> 00:09:06,800
your ext2 or ext3 it has the ram disk

235
00:09:06,800 --> 00:09:08,240
will have blocks and inodes and

236
00:09:08,240 --> 00:09:10,320
directory trees and whatnot

237
00:09:10,320 --> 00:09:12,320
and then the kernel will pass the

238
00:09:12,320 --> 00:09:14,480
control to the user link so init will be

239
00:09:14,480 --> 00:09:16,880
called in it we'll call the init scripts

240
00:09:16,880 --> 00:09:18,800
init scripts will then

241
00:09:18,800 --> 00:09:21,279
read the configuration

242
00:09:21,279 --> 00:09:22,880
the configuration is also in an

243
00:09:22,880 --> 00:09:25,440
interesting way the configuration is not

244
00:09:25,440 --> 00:09:27,120
saved as files

245
00:09:27,120 --> 00:09:28,720
because

246
00:09:28,720 --> 00:09:30,160
guess what if you were to write files

247
00:09:30,160 --> 00:09:31,760
you have to update the file system file

248
00:09:31,760 --> 00:09:33,519
system cannot be updated because it is

249
00:09:33,519 --> 00:09:35,120
compressed it's on

250
00:09:35,120 --> 00:09:36,560
flash memory

251
00:09:36,560 --> 00:09:38,320
so the way

252
00:09:38,320 --> 00:09:40,800
changes are persisted

253
00:09:40,800 --> 00:09:42,640
configuration changes are persisted is

254
00:09:42,640 --> 00:09:44,399
there persisted in a special area called

255
00:09:44,399 --> 00:09:45,680
nvram

256
00:09:45,680 --> 00:09:47,519
now the nvram is

257
00:09:47,519 --> 00:09:51,760
erasable for erasable and flashable

258
00:09:51,760 --> 00:09:54,959
a bit better than regular flash memory

259
00:09:54,959 --> 00:09:57,120
so the init scripts are then programmed

260
00:09:57,120 --> 00:09:59,440
to pull off all the configuration

261
00:09:59,440 --> 00:10:02,000
parameters from nvram that's when you

262
00:10:02,000 --> 00:10:03,839
like boot a wi-fi router it takes a long

263
00:10:03,839 --> 00:10:05,200
time to boot because keeps on blinking

264
00:10:05,200 --> 00:10:07,279
blinking blinking what's happening is

265
00:10:07,279 --> 00:10:09,279
all the config parameters are being read

266
00:10:09,279 --> 00:10:11,120
from nvram

267
00:10:11,120 --> 00:10:12,079
and

268
00:10:12,079 --> 00:10:15,120
they are being created as config files

269
00:10:15,120 --> 00:10:18,240
in the ram disk on the fly so all your

270
00:10:18,240 --> 00:10:20,720
networking config all your wi-fi config

271
00:10:20,720 --> 00:10:23,839
all your http config your passwords

272
00:10:23,839 --> 00:10:25,920
uh whatever it is that you're doing

273
00:10:25,920 --> 00:10:27,519
default urls

274
00:10:27,519 --> 00:10:29,600
they're all built up on the fly by

275
00:10:29,600 --> 00:10:33,200
reading details from nvram

276
00:10:33,200 --> 00:10:35,519
once these config files are built up

277
00:10:35,519 --> 00:10:37,360
then the init scripts will kick off

278
00:10:37,360 --> 00:10:39,600
services which will be typically user

279
00:10:39,600 --> 00:10:41,120
land services

280
00:10:41,120 --> 00:10:43,360
and the user land services will do your

281
00:10:43,360 --> 00:10:46,880
usual system thing so network dhcp

282
00:10:46,880 --> 00:10:50,800
dns usb samba file sharing

283
00:10:50,800 --> 00:10:52,560
cups printing whatever it's programmed

284
00:10:52,560 --> 00:10:53,440
with

285
00:10:53,440 --> 00:10:54,480
and then you have the custom

286
00:10:54,480 --> 00:10:58,320
applications on top of the

287
00:10:58,320 --> 00:11:00,399
on top of the user script so this is how

288
00:11:00,399 --> 00:11:03,839
basically an iot device boots up

289
00:11:03,839 --> 00:11:05,839
what does this mean for us

290
00:11:05,839 --> 00:11:07,920
if we want to emulate it

291
00:11:07,920 --> 00:11:10,640
we have to faithfully recreate all these

292
00:11:10,640 --> 00:11:12,160
steps

293
00:11:12,160 --> 00:11:16,240
using qemu now you can do it once

294
00:11:16,240 --> 00:11:17,360
what happens when you move to a

295
00:11:17,360 --> 00:11:19,200
different iot device you have to do the

296
00:11:19,200 --> 00:11:21,519
whole song and dance and magic chanting

297
00:11:21,519 --> 00:11:22,560
once again

298
00:11:22,560 --> 00:11:24,320
so it gets to be a little painful and

299
00:11:24,320 --> 00:11:27,120
that's why i as a researcher started

300
00:11:27,120 --> 00:11:29,440
creating shell scripts to automate this

301
00:11:29,440 --> 00:11:31,519
process and then the shell scripts need

302
00:11:31,519 --> 00:11:33,120
more shell scripts to automate the shell

303
00:11:33,120 --> 00:11:35,600
scripts and so on and so forth and you

304
00:11:35,600 --> 00:11:37,519
need debugging tools and you throw that

305
00:11:37,519 --> 00:11:39,600
in you then end up saying i don't want

306
00:11:39,600 --> 00:11:40,880
to use a default kernel i'm going to

307
00:11:40,880 --> 00:11:43,120
recompile my own kernel so you create

308
00:11:43,120 --> 00:11:45,440
kernel compilation scripts and

309
00:11:45,440 --> 00:11:48,079
pretty soon a framework is born and that

310
00:11:48,079 --> 00:11:50,880
was the genesis of rmx

311
00:11:50,880 --> 00:11:53,680
and now emux

312
00:11:54,720 --> 00:11:57,200
so yeah once you have the

313
00:11:57,200 --> 00:12:00,240
applications ready the device is

314
00:12:00,240 --> 00:12:04,240
good to go it's it's usable

315
00:12:05,440 --> 00:12:07,120
we're going to now focus on two phases

316
00:12:07,120 --> 00:12:08,639
we're going to focus on extracting the

317
00:12:08,639 --> 00:12:10,639
firmware

318
00:12:10,639 --> 00:12:12,320
and then the second phases we're going

319
00:12:12,320 --> 00:12:16,160
to focus on emulating the firmware

320
00:12:16,160 --> 00:12:19,200
the three ways to extract firmware

321
00:12:19,200 --> 00:12:21,680
one is by a simple mechanism

322
00:12:21,680 --> 00:12:22,959
from a

323
00:12:22,959 --> 00:12:25,680
bin file or an ftp server or a website

324
00:12:25,680 --> 00:12:27,600
or a cd-rom just like download the

325
00:12:27,600 --> 00:12:29,680
firmware and apply it

326
00:12:29,680 --> 00:12:31,600
this is cool i mean you can get the

327
00:12:31,600 --> 00:12:34,399
firmware but you will not get

328
00:12:34,399 --> 00:12:37,200
the running configuration values it will

329
00:12:37,200 --> 00:12:38,880
be like empty blank

330
00:12:38,880 --> 00:12:39,600
in

331
00:12:39,600 --> 00:12:41,680
default initialization

332
00:12:41,680 --> 00:12:44,000
the second and more most popular way is

333
00:12:44,000 --> 00:12:46,800
to find basically the serial console so

334
00:12:46,800 --> 00:12:48,800
you open up the iot device you find the

335
00:12:48,800 --> 00:12:50,160
uart

336
00:12:50,160 --> 00:12:52,000
voltage ground transmit receive there's

337
00:12:52,000 --> 00:12:54,560
like hundreds of youtube videos

338
00:12:54,560 --> 00:12:56,720
showing you how to do that connect it to

339
00:12:56,720 --> 00:12:59,519
a serial port get a shell and then

340
00:12:59,519 --> 00:13:01,200
extract all the

341
00:13:01,200 --> 00:13:03,440
partitions using dd out of the shell

342
00:13:03,440 --> 00:13:05,279
we're not going to do that either

343
00:13:05,279 --> 00:13:07,279
what we're going to do is we're going to

344
00:13:07,279 --> 00:13:10,480
do step number three that is extract it

345
00:13:10,480 --> 00:13:13,839
directly from the flash memory

346
00:13:13,839 --> 00:13:16,160
i feel that is the

347
00:13:16,160 --> 00:13:21,160
what shall we say the most uh

348
00:13:21,519 --> 00:13:23,600
close to reality

349
00:13:23,600 --> 00:13:25,839
image that you'll get

350
00:13:25,839 --> 00:13:27,519
from the chip like literally just

351
00:13:27,519 --> 00:13:29,600
pulling the bites off the chip itself

352
00:13:29,600 --> 00:13:32,000
it's a purest image and then we'll work

353
00:13:32,000 --> 00:13:36,480
on figuring out how to emulate it

354
00:13:36,639 --> 00:13:38,720
so yeah website

355
00:13:38,720 --> 00:13:41,040
this is the serial console now you can

356
00:13:41,040 --> 00:13:43,519
see over here that i have

357
00:13:43,519 --> 00:13:47,040
found the serial port on the ip camera

358
00:13:47,040 --> 00:13:48,399
connected these

359
00:13:48,399 --> 00:13:50,880
leads they all go to the serial adapter

360
00:13:50,880 --> 00:13:53,360
on my pc you get a serial console over

361
00:13:53,360 --> 00:13:56,399
here and then you uh

362
00:13:56,399 --> 00:13:58,399
then you can get a shell and you can do

363
00:13:58,399 --> 00:14:02,760
the dd's and and whatnot

364
00:14:03,199 --> 00:14:04,720
this is how you take it directly from

365
00:14:04,720 --> 00:14:07,279
the chip i have

366
00:14:07,279 --> 00:14:07,470
a

367
00:14:07,470 --> 00:14:09,199
[Music]

368
00:14:09,199 --> 00:14:10,959
flash programmer this one's called the

369
00:14:10,959 --> 00:14:12,560
a640

370
00:14:12,560 --> 00:14:14,399
it has a chip clip

371
00:14:14,399 --> 00:14:16,560
so you can literally take the clip and

372
00:14:16,560 --> 00:14:19,199
put it on top of the flash

373
00:14:19,199 --> 00:14:21,360
and then the software will suck

374
00:14:21,360 --> 00:14:24,000
everything off it it sounds simple but

375
00:14:24,000 --> 00:14:27,120
in in reality it's not that simple

376
00:14:27,120 --> 00:14:29,199
there are some reasons why

377
00:14:29,199 --> 00:14:31,120
you may not entirely succeed with this

378
00:14:31,120 --> 00:14:32,240
technique

379
00:14:32,240 --> 00:14:34,160
i mean this technique was successful

380
00:14:34,160 --> 00:14:36,399
i did i was not able to bring the whole

381
00:14:36,399 --> 00:14:38,320
ip camera over here

382
00:14:38,320 --> 00:14:40,079
and i didn't bring this one instead i

383
00:14:40,079 --> 00:14:41,839
brought something i brought something

384
00:14:41,839 --> 00:14:42,959
different

385
00:14:42,959 --> 00:14:44,320
so i'm going to show you what we're

386
00:14:44,320 --> 00:14:46,560
going to use for

387
00:14:46,560 --> 00:14:49,519
firmware extraction

388
00:14:49,519 --> 00:14:52,079
first a little bit introduction into

389
00:14:52,079 --> 00:14:54,959
serial flash memory

390
00:14:54,959 --> 00:14:59,239
let me also open up

391
00:15:02,560 --> 00:15:05,800
one minute

392
00:15:13,360 --> 00:15:15,839
i'll use the poor man's video camera

393
00:15:15,839 --> 00:15:18,560
called facetime

394
00:15:21,839 --> 00:15:23,279
there

395
00:15:23,279 --> 00:15:25,040
so let me show you what the flash memory

396
00:15:25,040 --> 00:15:27,839
looks like

397
00:15:29,279 --> 00:15:33,199
a bunch of flash memory chips in here

398
00:15:33,199 --> 00:15:35,040
so what i did

399
00:15:35,040 --> 00:15:35,920
is

400
00:15:35,920 --> 00:15:37,519
i

401
00:15:37,519 --> 00:15:41,279
actually used the soldering gun

402
00:15:41,279 --> 00:15:43,680
hot air gun sorry

403
00:15:43,680 --> 00:15:46,079
lifted the flash chip off

404
00:15:46,079 --> 00:15:48,240
the ip camera

405
00:15:48,240 --> 00:15:50,079
extracted the firmware

406
00:15:50,079 --> 00:15:52,240
and then for test purposes

407
00:15:52,240 --> 00:15:53,040
i

408
00:15:53,040 --> 00:15:54,480
cloned

409
00:15:54,480 --> 00:15:56,320
the firmware into different flash chips

410
00:15:56,320 --> 00:15:59,440
so this is one example of a flash chip

411
00:15:59,440 --> 00:16:00,959
you can see over here

412
00:16:00,959 --> 00:16:02,240
this is uh

413
00:16:02,240 --> 00:16:05,279
this is a spi flash chip it is an eight

414
00:16:05,279 --> 00:16:07,360
pin package it is also mounted on a

415
00:16:07,360 --> 00:16:09,920
breakout board and all these header pins

416
00:16:09,920 --> 00:16:12,160
make it easy to connect to

417
00:16:12,160 --> 00:16:14,720
any extracting device otherwise you have

418
00:16:14,720 --> 00:16:16,800
to like have a clip which goes on top of

419
00:16:16,800 --> 00:16:17,600
the

420
00:16:17,600 --> 00:16:20,560
of the legs it gets a little messy

421
00:16:20,560 --> 00:16:22,959
so for lab purposes it makes it easier i

422
00:16:22,959 --> 00:16:25,519
have like several clones of firmware

423
00:16:25,519 --> 00:16:26,560
in uh

424
00:16:26,560 --> 00:16:28,480
in here like this is all my

425
00:16:28,480 --> 00:16:31,519
all the iot devices various chips all

426
00:16:31,519 --> 00:16:33,040
cloned

427
00:16:33,040 --> 00:16:37,839
and one of them is plugged in over here

428
00:16:38,480 --> 00:16:42,079
i believe i stupidly dropped one of them

429
00:16:42,079 --> 00:16:44,239
so

430
00:16:44,399 --> 00:16:46,079
we'll find it in a bit yes there's no

431
00:16:46,079 --> 00:16:48,480
hurry no no no not a problem at all we

432
00:16:48,480 --> 00:16:49,680
can take

433
00:16:49,680 --> 00:16:52,959
we can take our time doing this

434
00:16:52,959 --> 00:16:54,079
um

435
00:16:54,079 --> 00:16:55,600
yes

436
00:16:55,600 --> 00:16:57,839
what am i going to use for the

437
00:16:57,839 --> 00:17:00,160
firmware extraction let me show you

438
00:17:00,160 --> 00:17:03,120
so i don't have the a640 but i have a

439
00:17:03,120 --> 00:17:05,839
very very fantastic tool and this is

440
00:17:05,839 --> 00:17:07,760
developed by a good friend and a

441
00:17:07,760 --> 00:17:09,919
luminary in

442
00:17:09,919 --> 00:17:11,839
in hardware hacking joe

443
00:17:11,839 --> 00:17:13,359
joe fitzpatrick

444
00:17:13,359 --> 00:17:14,480
so

445
00:17:14,480 --> 00:17:15,839
this is

446
00:17:15,839 --> 00:17:17,119
this is a

447
00:17:17,119 --> 00:17:19,280
board called the tigard

448
00:17:19,280 --> 00:17:22,480
the tiger is like a swiss army knife

449
00:17:22,480 --> 00:17:24,720
for

450
00:17:25,119 --> 00:17:27,439
anything jtag anything spi flash

451
00:17:27,439 --> 00:17:30,160
anything i square c anything serial port

452
00:17:30,160 --> 00:17:32,000
he's got the various interfaces over

453
00:17:32,000 --> 00:17:33,919
here with different header pins they're

454
00:17:33,919 --> 00:17:36,320
beautifully labeled it also comes with a

455
00:17:36,320 --> 00:17:39,840
nice table of connections like you can

456
00:17:39,840 --> 00:17:41,760
create a it has got the cheat sheet

457
00:17:41,760 --> 00:17:43,679
behind it he's thought of everything

458
00:17:43,679 --> 00:17:44,880
like

459
00:17:44,880 --> 00:17:47,200
how you design a circuit board for

460
00:17:47,200 --> 00:17:48,480
testing

461
00:17:48,480 --> 00:17:50,960
he's got the best leads available

462
00:17:50,960 --> 00:17:53,600
and you can see this tiger is plugged

463
00:17:53,600 --> 00:17:56,480
into my ipcam

464
00:17:56,480 --> 00:17:58,640
breakout board flash chip

465
00:17:58,640 --> 00:18:00,480
i will show you how the wiring is done

466
00:18:00,480 --> 00:18:03,200
in just a little bit

467
00:18:03,200 --> 00:18:05,120
so we're going to use this and we're

468
00:18:05,120 --> 00:18:07,760
going to then extract the firmware using

469
00:18:07,760 --> 00:18:09,679
a

470
00:18:09,679 --> 00:18:12,720
very easily publicly available

471
00:18:12,720 --> 00:18:15,600
program called flash rom

472
00:18:15,600 --> 00:18:17,919
flash forms pretty standard it comes

473
00:18:17,919 --> 00:18:20,400
with mostly every linux distribution or

474
00:18:20,400 --> 00:18:21,679
you can like

475
00:18:21,679 --> 00:18:22,960
download it

476
00:18:22,960 --> 00:18:25,280
configure make make install it

477
00:18:25,280 --> 00:18:27,120
it's easy it's easy to get

478
00:18:27,120 --> 00:18:29,200
and not just a tiger but there's a lot

479
00:18:29,200 --> 00:18:31,360
of

480
00:18:31,520 --> 00:18:33,679
a lot of devices that

481
00:18:33,679 --> 00:18:35,840
a lot of hardware devices that support

482
00:18:35,840 --> 00:18:37,520
flash from so flash forms able to read

483
00:18:37,520 --> 00:18:40,480
from several things even a raspberry pi

484
00:18:40,480 --> 00:18:42,400
although i highly recommend the tiger

485
00:18:42,400 --> 00:18:43,760
for two reasons

486
00:18:43,760 --> 00:18:44,960
number one

487
00:18:44,960 --> 00:18:47,200
it's a very very efficient design device

488
00:18:47,200 --> 00:18:49,360
if you want to do this often enough

489
00:18:49,360 --> 00:18:51,120
invest some money it's not very costly

490
00:18:51,120 --> 00:18:54,000
it's like 80 bucks or something

491
00:18:54,000 --> 00:18:55,760
invest the money into getting a good

492
00:18:55,760 --> 00:18:58,400
device you will not go wrong with it and

493
00:18:58,400 --> 00:18:59,520
second

494
00:18:59,520 --> 00:19:01,840
uh it's open source hardware

495
00:19:01,840 --> 00:19:03,760
it's developed by a friend in the cyber

496
00:19:03,760 --> 00:19:05,280
security community

497
00:19:05,280 --> 00:19:07,360
and you should just like

498
00:19:07,360 --> 00:19:09,200
support such projects it's it's really

499
00:19:09,200 --> 00:19:12,720
cool to do so help the underdog right

500
00:19:12,720 --> 00:19:15,039
so um with that being said and done let

501
00:19:15,039 --> 00:19:16,559
me give you a walk

502
00:19:16,559 --> 00:19:17,679
through

503
00:19:17,679 --> 00:19:19,679
flash memory

504
00:19:19,679 --> 00:19:22,080
this one's an eight pin package you have

505
00:19:22,080 --> 00:19:24,480
chip selected as pin one

506
00:19:24,480 --> 00:19:26,720
now chip select is a

507
00:19:26,720 --> 00:19:28,799
is a weird pin

508
00:19:28,799 --> 00:19:29,600
right

509
00:19:29,600 --> 00:19:32,320
if chip select is pulled low

510
00:19:32,320 --> 00:19:35,280
that means that whoever the cpu has full

511
00:19:35,280 --> 00:19:38,000
control of the flash ship and it will

512
00:19:38,000 --> 00:19:39,200
not

513
00:19:39,200 --> 00:19:41,919
it's not it's not

514
00:19:41,919 --> 00:19:43,919
available

515
00:19:43,919 --> 00:19:46,880
for any other use but for the cpu's own

516
00:19:46,880 --> 00:19:48,880
use

517
00:19:48,880 --> 00:19:51,200
now several times i've noticed when i

518
00:19:51,200 --> 00:19:54,559
try to extract flash from the

519
00:19:54,559 --> 00:19:57,039
hardware like say ip camera has a flash

520
00:19:57,039 --> 00:19:59,360
chip on it then you connect all the pins

521
00:19:59,360 --> 00:20:02,159
and you try to extract the firmware

522
00:20:02,159 --> 00:20:04,720
you have to supply the voltage to it

523
00:20:04,720 --> 00:20:06,960
when you supply the voltage the flash

524
00:20:06,960 --> 00:20:09,840
the voltage track also leads to the cpu

525
00:20:09,840 --> 00:20:12,960
the cpu gets activated and then it holds

526
00:20:12,960 --> 00:20:14,640
the flash chip and doesn't let you read

527
00:20:14,640 --> 00:20:15,600
it

528
00:20:15,600 --> 00:20:18,080
so one way is you have to like either

529
00:20:18,080 --> 00:20:20,640
short the cpu by finding out the voltage

530
00:20:20,640 --> 00:20:22,559
to the ground and not let the cpu get

531
00:20:22,559 --> 00:20:23,760
activated

532
00:20:23,760 --> 00:20:24,640
or

533
00:20:24,640 --> 00:20:26,480
the easiest way is to literally just

534
00:20:26,480 --> 00:20:28,799
melt the solder lift it

535
00:20:28,799 --> 00:20:31,280
read it and then melt it again and place

536
00:20:31,280 --> 00:20:33,039
it back

537
00:20:33,039 --> 00:20:35,200
easier said than done i have bricked

538
00:20:35,200 --> 00:20:37,520
three routers by trying to place it back

539
00:20:37,520 --> 00:20:39,919
i've burned the board i've burned the

540
00:20:39,919 --> 00:20:40,799
chip

541
00:20:40,799 --> 00:20:43,120
so there are people who know how to do

542
00:20:43,120 --> 00:20:45,200
it really smoothly they've got steady

543
00:20:45,200 --> 00:20:46,640
fingers

544
00:20:46,640 --> 00:20:48,400
calm hands

545
00:20:48,400 --> 00:20:52,080
and uh you know very precise touch

546
00:20:52,080 --> 00:20:54,960
i have none of these three qualities so

547
00:20:54,960 --> 00:20:57,520
i screw it up and that's why i create

548
00:20:57,520 --> 00:20:59,760
clones once you get it off create a

549
00:20:59,760 --> 00:21:00,640
clone

550
00:21:00,640 --> 00:21:05,200
and then we will make it easy to read

551
00:21:05,200 --> 00:21:07,360
okay

552
00:21:07,360 --> 00:21:09,919
now serial flash is

553
00:21:09,919 --> 00:21:12,400
pretty much like uh

554
00:21:12,400 --> 00:21:14,400
there's only two ios to the serial flash

555
00:21:14,400 --> 00:21:17,039
memory there's data out pin number two

556
00:21:17,039 --> 00:21:18,640
labeled do

557
00:21:18,640 --> 00:21:21,520
pin number five is data in di

558
00:21:21,520 --> 00:21:23,600
and then there is a clock so the clock

559
00:21:23,600 --> 00:21:25,360
keeps on giving the signal data out and

560
00:21:25,360 --> 00:21:28,840
data in is where you read and write the

561
00:21:28,840 --> 00:21:31,919
memory now there's an spi protocol that

562
00:21:31,919 --> 00:21:34,159
is implemented in flash rom and on these

563
00:21:34,159 --> 00:21:35,679
boards and everything and these chips

564
00:21:35,679 --> 00:21:38,159
follow it too

565
00:21:38,159 --> 00:21:39,760
and this is how we made the connections

566
00:21:39,760 --> 00:21:43,280
with the tiger and the spi flash

567
00:21:43,280 --> 00:21:44,480
so

568
00:21:44,480 --> 00:21:47,120
one of the breakout pins on the tiger is

569
00:21:47,120 --> 00:21:49,360
literally one is to one mapping with the

570
00:21:49,360 --> 00:21:50,799
spi flash

571
00:21:50,799 --> 00:21:53,120
i mean joe fitz has

572
00:21:53,120 --> 00:21:55,760
so beautifully created the pins exactly

573
00:21:55,760 --> 00:21:57,440
in such a way that they just literally

574
00:21:57,440 --> 00:21:58,400
map

575
00:21:58,400 --> 00:22:00,480
directly to the 8 pin layout you don't

576
00:22:00,480 --> 00:22:02,480
have to figure out which wire goes where

577
00:22:02,480 --> 00:22:04,080
even if you do there's a cheat sheet on

578
00:22:04,080 --> 00:22:05,120
the back

579
00:22:05,120 --> 00:22:08,559
so i have wired six pins on the tiger to

580
00:22:08,559 --> 00:22:11,520
six pins on the

581
00:22:11,520 --> 00:22:14,640
on the breakout flash chip the only two

582
00:22:14,640 --> 00:22:16,960
pins that have not wired are

583
00:22:16,960 --> 00:22:19,520
the uh

584
00:22:20,000 --> 00:22:21,919
the chip select

585
00:22:21,919 --> 00:22:24,159
and the

586
00:22:24,159 --> 00:22:27,919
uh no the chip select is wired the

587
00:22:27,919 --> 00:22:30,960
wp i forgot what it is something protect

588
00:22:30,960 --> 00:22:32,320
it's not right protect but something

589
00:22:32,320 --> 00:22:34,240
protect um

590
00:22:34,240 --> 00:22:36,320
it'll come to me if it does and they

591
00:22:36,320 --> 00:22:38,640
hold the hole pin these are the two pins

592
00:22:38,640 --> 00:22:41,679
that are not not connected the other six

593
00:22:41,679 --> 00:22:43,919
are

594
00:22:44,320 --> 00:22:46,559
and now um so this is what i did you

595
00:22:46,559 --> 00:22:48,400
know in a nutshell this is the

596
00:22:48,400 --> 00:22:51,039
spi flash on the ip camera i lifted it

597
00:22:51,039 --> 00:22:52,559
off the ip camera

598
00:22:52,559 --> 00:22:54,720
i cloned the contents into this chip

599
00:22:54,720 --> 00:22:56,480
basically it's the same that one's a

600
00:22:56,480 --> 00:22:58,640
win-bound this one's a win-bond i tried

601
00:22:58,640 --> 00:23:00,720
to match the chips the same created a

602
00:23:00,720 --> 00:23:03,679
copy and now we'll work of this of this

603
00:23:03,679 --> 00:23:06,080
copy

604
00:23:06,080 --> 00:23:08,880
so a little bit of demo time

605
00:23:08,880 --> 00:23:11,120
now

606
00:23:17,360 --> 00:23:19,600
okay

607
00:23:19,919 --> 00:23:23,320
you uh

608
00:23:30,720 --> 00:23:33,520
this is readable now

609
00:23:33,520 --> 00:23:36,520
excellent

610
00:23:42,400 --> 00:23:45,039
so you're going to use

611
00:23:45,120 --> 00:23:47,120
first

612
00:23:47,120 --> 00:23:48,640
let me check

613
00:23:48,640 --> 00:23:51,840
if the tiger is detected

614
00:23:53,279 --> 00:23:55,520
so when you check the d message you

615
00:23:55,520 --> 00:23:57,039
plugged it in i plugged it in just

616
00:23:57,039 --> 00:23:59,120
before i began the talk so

617
00:23:59,120 --> 00:24:01,919
yeah the tiger is detected it it shows

618
00:24:01,919 --> 00:24:04,720
you that it has these ftdi

619
00:24:04,720 --> 00:24:06,000
usb

620
00:24:06,000 --> 00:24:09,679
tty usb 0 and tty usb 1 interfaces

621
00:24:09,679 --> 00:24:10,960
ready to go

622
00:24:10,960 --> 00:24:13,440
so now we can use a

623
00:24:13,440 --> 00:24:14,640
slash rom

624
00:24:14,640 --> 00:24:18,240
to pull the

625
00:24:18,240 --> 00:24:19,840
to pull the image

626
00:24:19,840 --> 00:24:21,440
i mean it's it's all going to sound

627
00:24:21,440 --> 00:24:23,039
dramatic but it's not going to look

628
00:24:23,039 --> 00:24:26,760
dramatic at all

629
00:24:34,960 --> 00:24:38,400
let's make a directory hitb

630
00:24:38,400 --> 00:24:40,880
nothing in here

631
00:24:40,880 --> 00:24:43,120
now

632
00:24:43,440 --> 00:24:45,679
we'll

633
00:24:45,679 --> 00:24:49,440
supplied the flash rom command

634
00:24:52,720 --> 00:24:53,679
and

635
00:24:53,679 --> 00:24:55,600
what you see over here is the flash rom

636
00:24:55,600 --> 00:24:57,200
command will

637
00:24:57,200 --> 00:25:00,480
accept the port that you're reading from

638
00:25:00,480 --> 00:25:02,400
that is the ft

639
00:25:02,400 --> 00:25:04,720
223 to spi interface

640
00:25:04,720 --> 00:25:06,960
and then you have to choose which port

641
00:25:06,960 --> 00:25:09,760
now this divisor is an interesting value

642
00:25:09,760 --> 00:25:12,400
it tells flash rom

643
00:25:12,400 --> 00:25:16,000
by what factor to divide the clock speed

644
00:25:16,000 --> 00:25:17,919
and sometimes slower is better because

645
00:25:17,919 --> 00:25:20,159
it will get you a more accurate read now

646
00:25:20,159 --> 00:25:22,080
with trial and error i found that four

647
00:25:22,080 --> 00:25:23,120
and eight

648
00:25:23,120 --> 00:25:25,360
work quite well

649
00:25:25,360 --> 00:25:26,640
and then i'm going to read everything in

650
00:25:26,640 --> 00:25:28,960
this file called

651
00:25:28,960 --> 00:25:32,799
ipcam flash.bin

652
00:25:32,960 --> 00:25:35,120
so it said yeah it's found the windborn

653
00:25:35,120 --> 00:25:36,400
flash chip

654
00:25:36,400 --> 00:25:39,400
w25q64

655
00:25:39,919 --> 00:25:40,640
so

656
00:25:40,640 --> 00:25:44,720
w25 is like wind bonds uh

657
00:25:44,720 --> 00:25:46,799
spi flash

658
00:25:46,799 --> 00:25:49,840
package type 25 which is eight pins

659
00:25:49,840 --> 00:25:52,880
q64 means it is a

660
00:25:52,880 --> 00:25:54,480
64

661
00:25:54,480 --> 00:25:58,480
mega bit which is an 8 megabyte flash

662
00:25:58,480 --> 00:25:59,440
chip

663
00:25:59,440 --> 00:26:01,440
and it successfully

664
00:26:01,440 --> 00:26:04,960
read the memory

665
00:26:04,960 --> 00:26:06,240
now if you

666
00:26:06,240 --> 00:26:08,960
do a file list it's exactly red

667
00:26:08,960 --> 00:26:12,480
eight megabytes of flash memory in this

668
00:26:12,480 --> 00:26:13,919
file

669
00:26:13,919 --> 00:26:16,320
i've memorized these md5 sums by heart

670
00:26:16,320 --> 00:26:18,480
so if it starts with like six eight six

671
00:26:18,480 --> 00:26:20,880
something it's correct let's just make

672
00:26:20,880 --> 00:26:24,760
sure it read it accurately

673
00:26:27,600 --> 00:26:29,360
well no it didn't

674
00:26:29,360 --> 00:26:30,960
okay

675
00:26:30,960 --> 00:26:33,520
i fortunately have a

676
00:26:33,520 --> 00:26:37,000
backup copy

677
00:26:38,320 --> 00:26:39,600
see i'm going to try and read it again

678
00:26:39,600 --> 00:26:41,360
because this was

679
00:26:41,360 --> 00:26:43,760
what it's supposed to be

680
00:26:43,760 --> 00:26:46,000
and this is so 688 is what we need i'm

681
00:26:46,000 --> 00:26:49,720
going to try and read it again

682
00:27:02,960 --> 00:27:05,679
now we got it right so it it happens you

683
00:27:05,679 --> 00:27:07,600
know you you must test

684
00:27:07,600 --> 00:27:09,120
sometimes if you're doing the firmware

685
00:27:09,120 --> 00:27:11,039
extraction for the first time you want

686
00:27:11,039 --> 00:27:12,799
to do it three times with different

687
00:27:12,799 --> 00:27:15,520
divisors and then pick the best two out

688
00:27:15,520 --> 00:27:16,960
of three if you get all three of them

689
00:27:16,960 --> 00:27:18,880
very different slow down you know

690
00:27:18,880 --> 00:27:20,720
increase the divisor to

691
00:27:20,720 --> 00:27:22,240
to a greater number

692
00:27:22,240 --> 00:27:23,679
so

693
00:27:23,679 --> 00:27:26,080
you you slow down the clock you

694
00:27:26,080 --> 00:27:28,559
do this until you get accurate reads

695
00:27:28,559 --> 00:27:30,080
otherwise you don't know you don't have

696
00:27:30,080 --> 00:27:31,520
a source of truth

697
00:27:31,520 --> 00:27:32,840
so

698
00:27:32,840 --> 00:27:35,679
um yeah this this is what will happen in

699
00:27:35,679 --> 00:27:36,799
production

700
00:27:36,799 --> 00:27:38,720
this can bite you all right now we have

701
00:27:38,720 --> 00:27:40,320
a clean copy we're going to take this

702
00:27:40,320 --> 00:27:42,799
clean copy and we are going to now

703
00:27:42,799 --> 00:27:45,200
do firmware extraction

704
00:27:45,200 --> 00:27:48,440
with it

705
00:27:48,640 --> 00:27:50,960
okay

706
00:27:53,279 --> 00:27:54,080
so

707
00:27:54,080 --> 00:27:57,440
we will now switch over to emux

708
00:27:57,440 --> 00:28:01,399
and emux is pretty awesome

709
00:28:03,679 --> 00:28:05,200
this whole thing is available as a

710
00:28:05,200 --> 00:28:06,720
docker image

711
00:28:06,720 --> 00:28:09,440
um what i'm going to do first is i'll

712
00:28:09,440 --> 00:28:11,679
just uh

713
00:28:11,679 --> 00:28:14,240
i'll just perform the extraction

714
00:28:14,240 --> 00:28:16,720
once we have a clean uh i have performed

715
00:28:16,720 --> 00:28:18,720
the extraction i'm sorry i'll import it

716
00:28:18,720 --> 00:28:20,159
into emox

717
00:28:20,159 --> 00:28:23,120
and we will analyze the firmware

718
00:28:23,120 --> 00:28:24,720
and we'll

719
00:28:24,720 --> 00:28:27,360
divide it into the original flash

720
00:28:27,360 --> 00:28:30,399
partitions that it is put that that

721
00:28:30,399 --> 00:28:32,240
would put onto the chip

722
00:28:32,240 --> 00:28:33,760
once we do that i'll give you a tour of

723
00:28:33,760 --> 00:28:36,080
emux and then we'll figure out how to

724
00:28:36,080 --> 00:28:37,679
emulate it

725
00:28:37,679 --> 00:28:40,399
and move forward

726
00:28:40,799 --> 00:28:43,919
all this is available on the emacs

727
00:28:43,919 --> 00:28:47,200
website in part of documentation so

728
00:28:47,200 --> 00:28:49,840
the steps on emulating case studies on

729
00:28:49,840 --> 00:28:53,279
emulating devices it's all published i'm

730
00:28:53,279 --> 00:28:55,120
just going to repeat the same things

731
00:28:55,120 --> 00:28:57,600
over here

732
00:28:57,600 --> 00:29:00,399
let me go to the workspace

733
00:29:00,399 --> 00:29:05,360
i have the old ipcam flash i'm going to

734
00:29:05,440 --> 00:29:08,080
remove it

735
00:29:09,440 --> 00:29:13,159
and let me

736
00:29:17,200 --> 00:29:20,320
let me scp this from the machine that i

737
00:29:20,320 --> 00:29:23,960
extracted it from

738
00:29:27,840 --> 00:29:29,360
i've been doing workshops and

739
00:29:29,360 --> 00:29:32,000
presentations for 20 years now

740
00:29:32,000 --> 00:29:33,600
there's uh

741
00:29:33,600 --> 00:29:35,440
a train of thought

742
00:29:35,440 --> 00:29:37,360
is that you should have backup videos of

743
00:29:37,360 --> 00:29:39,520
everything because if the demo fails and

744
00:29:39,520 --> 00:29:41,440
you just play the video

745
00:29:41,440 --> 00:29:44,000
i am one of those stubborn idiots who

746
00:29:44,000 --> 00:29:46,480
will insist on doing it live

747
00:29:46,480 --> 00:29:48,240
and if things fail

748
00:29:48,240 --> 00:29:50,640
fix it on stage because if it can't work

749
00:29:50,640 --> 00:29:52,799
on stage it can never work at all

750
00:29:52,799 --> 00:29:54,720
so we're going to do this

751
00:29:54,720 --> 00:29:56,080
once again

752
00:29:56,080 --> 00:29:58,559
i never have backup videos for two

753
00:29:58,559 --> 00:30:00,640
reasons because i'm always testing

754
00:30:00,640 --> 00:30:02,559
new changes to the last minute

755
00:30:02,559 --> 00:30:04,480
and then i'm too lazy and too sleepy to

756
00:30:04,480 --> 00:30:06,720
make a backup video so we're going to do

757
00:30:06,720 --> 00:30:11,039
this for the very first time

758
00:30:12,159 --> 00:30:17,600
i had stored it in the hw directory hitb

759
00:30:17,600 --> 00:30:20,600
star.bin

760
00:30:24,640 --> 00:30:27,039
there we are the flash memories copied

761
00:30:27,039 --> 00:30:29,520
in this workspace directory

762
00:30:29,520 --> 00:30:31,840
we now have the workspace to play with

763
00:30:31,840 --> 00:30:33,200
now this workspace directory is

764
00:30:33,200 --> 00:30:34,799
interesting because it is going to get

765
00:30:34,799 --> 00:30:36,960
mounted into uh

766
00:30:36,960 --> 00:30:39,200
into the docker image it gets it gets

767
00:30:39,200 --> 00:30:40,559
mapped into the docker image and

768
00:30:40,559 --> 00:30:42,320
everything we do now

769
00:30:42,320 --> 00:30:43,360
we will

770
00:30:43,360 --> 00:30:45,120
do in the

771
00:30:45,120 --> 00:30:46,720
docker image

772
00:30:46,720 --> 00:30:49,039
loan

773
00:30:49,360 --> 00:30:51,840
um

774
00:30:53,120 --> 00:30:55,678
one moment

775
00:31:01,760 --> 00:31:04,080
running emers is as simple as building

776
00:31:04,080 --> 00:31:06,399
the docker image and then

777
00:31:06,399 --> 00:31:09,039
invoking

778
00:31:09,039 --> 00:31:12,000
run emux docker

779
00:31:13,440 --> 00:31:15,279
so it does some port forwarding and then

780
00:31:15,279 --> 00:31:17,679
when you see this emux prompt

781
00:31:17,679 --> 00:31:22,000
you get to see you're at the emux prompt

782
00:31:22,000 --> 00:31:23,279
you're ready to

783
00:31:23,279 --> 00:31:26,000
you can type in launcher

784
00:31:26,000 --> 00:31:27,279
and it will

785
00:31:27,279 --> 00:31:29,760
give you a menu of all the emulated

786
00:31:29,760 --> 00:31:33,039
devices that already exist

787
00:31:33,039 --> 00:31:35,600
i've got 13 devices emulated so far the

788
00:31:35,600 --> 00:31:37,600
latest ones being these

789
00:31:37,600 --> 00:31:39,919
two damn vulnerable mips routers there's

790
00:31:39,919 --> 00:31:42,000
a little endian and a big endian

791
00:31:42,000 --> 00:31:43,039
a

792
00:31:43,039 --> 00:31:46,080
very interesting ctf challenge with mips

793
00:31:46,080 --> 00:31:48,640
is going to be published on the

794
00:31:48,640 --> 00:31:50,399
4th of december

795
00:31:50,399 --> 00:31:51,919
along with the

796
00:31:51,919 --> 00:31:55,039
phone ctf that excel april is running in

797
00:31:55,039 --> 00:31:56,159
france

798
00:31:56,159 --> 00:31:59,279
so she i've built a mips ctf for her

799
00:31:59,279 --> 00:32:01,919
which will also get released into emux

800
00:32:01,919 --> 00:32:03,760
on the 4th of december it's a very very

801
00:32:03,760 --> 00:32:05,039
interesting exercise on memory

802
00:32:05,039 --> 00:32:07,519
corruption if you wish to play with mips

803
00:32:07,519 --> 00:32:09,360
i suggest you get your

804
00:32:09,360 --> 00:32:11,679
hands dirty and your feet wet

805
00:32:11,679 --> 00:32:13,440
with that ctf

806
00:32:13,440 --> 00:32:16,320
look for it on this on this one

807
00:32:16,320 --> 00:32:17,360
okay

808
00:32:17,360 --> 00:32:18,640
but we're not going to do the launcher

809
00:32:18,640 --> 00:32:20,480
now because we're interested in creating

810
00:32:20,480 --> 00:32:22,720
our own device and then adding it to

811
00:32:22,720 --> 00:32:24,480
this menu list and that's what we'll

812
00:32:24,480 --> 00:32:26,880
walk you through

813
00:32:26,880 --> 00:32:28,399
so we're going to go first to the

814
00:32:28,399 --> 00:32:31,039
workspace

815
00:32:32,480 --> 00:32:36,559
and here we have that ip cam flash dot

816
00:32:36,559 --> 00:32:37,600
bin

817
00:32:37,600 --> 00:32:40,080
we extracted this file from tiger we

818
00:32:40,080 --> 00:32:41,519
dropped it in here

819
00:32:41,519 --> 00:32:44,000
now the easiest thing to do is bin lock

820
00:32:44,000 --> 00:32:44,960
it

821
00:32:44,960 --> 00:32:47,760
bin walk will usually give you a very

822
00:32:47,760 --> 00:32:49,760
quick overview of where the boundaries

823
00:32:49,760 --> 00:32:50,640
lie

824
00:32:50,640 --> 00:32:53,279
so it will separate this eight megabytes

825
00:32:53,279 --> 00:32:54,640
of flash

826
00:32:54,640 --> 00:32:57,919
into the bootloader into the kernel

827
00:32:57,919 --> 00:33:01,600
into the root file system and any other

828
00:33:01,600 --> 00:33:03,760
partitions that may exist

829
00:33:03,760 --> 00:33:06,240
on here

830
00:33:06,480 --> 00:33:07,760
um

831
00:33:07,760 --> 00:33:11,399
yeah so

832
00:33:11,679 --> 00:33:14,640
then become root

833
00:33:14,720 --> 00:33:17,440
i'm going to go to the camp directory

834
00:33:17,440 --> 00:33:21,120
first we will do bin walk

835
00:33:22,799 --> 00:33:24,720
and simply

836
00:33:24,720 --> 00:33:26,559
analyze the file

837
00:33:26,559 --> 00:33:29,918
without extracting it

838
00:33:30,640 --> 00:33:33,519
so i run bin walk

839
00:33:33,760 --> 00:33:35,360
folks is this readable at the back if

840
00:33:35,360 --> 00:33:36,480
you're reviewing just give me a thumbs

841
00:33:36,480 --> 00:33:40,240
up oh it's good brilliant

842
00:33:41,840 --> 00:33:44,080
so here we are been walk saying that you

843
00:33:44,080 --> 00:33:46,960
have a linux kernel

844
00:33:46,960 --> 00:33:49,039
linux arm kernel in there

845
00:33:49,039 --> 00:33:50,799
you have

846
00:33:50,799 --> 00:33:52,480
some gzip data

847
00:33:52,480 --> 00:33:54,880
this is your root file system it's cram

848
00:33:54,880 --> 00:33:56,080
fs

849
00:33:56,080 --> 00:33:58,480
and then there's a posix star archive

850
00:33:58,480 --> 00:34:01,120
so we'll we'll separate all these things

851
00:34:01,120 --> 00:34:02,559
and then we'll uh

852
00:34:02,559 --> 00:34:04,159
we'll use bin walk to separate all these

853
00:34:04,159 --> 00:34:05,360
things

854
00:34:05,360 --> 00:34:10,319
so we're now going to run bin walk again

855
00:34:13,839 --> 00:34:15,760
we have to give some more commands like

856
00:34:15,760 --> 00:34:16,560
run

857
00:34:16,560 --> 00:34:18,560
as

858
00:34:18,560 --> 00:34:20,480
equals root

859
00:34:20,480 --> 00:34:21,918
hyphen one

860
00:34:21,918 --> 00:34:24,320
which means don't clobber sim links

861
00:34:24,320 --> 00:34:26,879
and perform a binary

862
00:34:26,879 --> 00:34:30,399
recursive extraction on home r0

863
00:34:30,399 --> 00:34:32,159
workspace

864
00:34:32,159 --> 00:34:34,719
ipcam flash8m dot

865
00:34:34,719 --> 00:34:36,959
bin

866
00:34:41,839 --> 00:34:43,119
no errors

867
00:34:43,119 --> 00:34:44,879
it showed you the same thing so this

868
00:34:44,879 --> 00:34:46,879
means it's good

869
00:34:46,879 --> 00:34:49,440
and which if everything goes well

870
00:34:49,440 --> 00:34:51,918
we should see exactly this file this

871
00:34:51,918 --> 00:34:55,440
underscore ipcam flash8m.bin.extracted

872
00:34:55,440 --> 00:34:56,639
in here

873
00:34:56,639 --> 00:35:00,160
and within this file

874
00:35:00,480 --> 00:35:02,960
you should see

875
00:35:02,960 --> 00:35:04,640
several components

876
00:35:04,640 --> 00:35:06,720
so what bin walk does is it first

877
00:35:06,720 --> 00:35:08,640
processes this list

878
00:35:08,640 --> 00:35:10,960
right it just separates these blocks so

879
00:35:10,960 --> 00:35:12,480
it separates the kernel separates the

880
00:35:12,480 --> 00:35:15,040
gzip data separates the cram fs and the

881
00:35:15,040 --> 00:35:17,760
tara archive and the file names it gives

882
00:35:17,760 --> 00:35:20,400
are based on the offsets from the

883
00:35:20,400 --> 00:35:22,480
beginning in hexadecimal

884
00:35:22,480 --> 00:35:25,520
so if you see this file like 173 to 4c

885
00:35:25,520 --> 00:35:26,960
dot cram fs

886
00:35:26,960 --> 00:35:28,880
it refers to

887
00:35:28,880 --> 00:35:31,760
this block over here

888
00:35:31,760 --> 00:35:34,079
and using magic numbers and error

889
00:35:34,079 --> 00:35:36,480
headers bin walk is able to identify

890
00:35:36,480 --> 00:35:37,520
what

891
00:35:37,520 --> 00:35:39,440
type of block it is so it then tags it

892
00:35:39,440 --> 00:35:41,440
automatically as oh this is cram fs this

893
00:35:41,440 --> 00:35:43,680
is squash fs it's a kernel this is

894
00:35:43,680 --> 00:35:45,040
something else

895
00:35:45,040 --> 00:35:47,680
if it can identify it will for example

896
00:35:47,680 --> 00:35:49,599
in the kernel it could not so just left

897
00:35:49,599 --> 00:35:51,440
it without an extension

898
00:35:51,440 --> 00:35:54,240
and then it has a tar archive

899
00:35:54,240 --> 00:35:55,920
the 7f

900
00:35:55,920 --> 00:35:58,480
triple 008 is a tar archive

901
00:35:58,480 --> 00:36:02,079
and the tara archive also got extracted

902
00:36:02,079 --> 00:36:04,160
with these files sys.conf and

903
00:36:04,160 --> 00:36:07,160
umconfig.com

904
00:36:07,200 --> 00:36:09,760
the cram fs in turn got extracted as

905
00:36:09,760 --> 00:36:12,880
cram fs dot ram fs root

906
00:36:12,880 --> 00:36:16,720
now if we navigate into kram fs root

907
00:36:16,720 --> 00:36:18,960
here is the entire root file system of

908
00:36:18,960 --> 00:36:21,280
the ip camera

909
00:36:21,280 --> 00:36:24,320
so now more or less phase one is done

910
00:36:24,320 --> 00:36:26,880
we got the root file system

911
00:36:26,880 --> 00:36:29,119
from the ip camera

912
00:36:29,119 --> 00:36:30,560
separated into

913
00:36:30,560 --> 00:36:32,960
individual folders and directories and

914
00:36:32,960 --> 00:36:34,560
files

915
00:36:34,560 --> 00:36:38,240
think of this like the mounted ram disk

916
00:36:38,240 --> 00:36:41,200
it is the uncompressed file system

917
00:36:41,200 --> 00:36:42,480
as if

918
00:36:42,480 --> 00:36:44,800
it is present in the ram disk

919
00:36:44,800 --> 00:36:48,079
now we are going to take qemu

920
00:36:48,079 --> 00:36:48,960
boot

921
00:36:48,960 --> 00:36:50,640
a kernel

922
00:36:50,640 --> 00:36:53,040
a kernel that matches

923
00:36:53,040 --> 00:36:55,520
the kernel that is present on the ip

924
00:36:55,520 --> 00:36:59,680
camera we'll find out what kernel it is

925
00:36:59,680 --> 00:37:02,480
unfortunately we will not be able to use

926
00:37:02,480 --> 00:37:04,560
the same kernel

927
00:37:04,560 --> 00:37:06,320
because the hardware of the ip camera is

928
00:37:06,320 --> 00:37:08,480
different than the emulated hardware

929
00:37:08,480 --> 00:37:10,240
that qmu provides

930
00:37:10,240 --> 00:37:12,000
now you can boot off it but there'll be

931
00:37:12,000 --> 00:37:13,599
no display nothing and sometimes it

932
00:37:13,599 --> 00:37:16,160
might just hang if it does not find the

933
00:37:16,160 --> 00:37:17,680
right peripheral

934
00:37:17,680 --> 00:37:19,920
so what we do in qam

935
00:37:19,920 --> 00:37:20,640
in

936
00:37:20,640 --> 00:37:22,800
in emox is we

937
00:37:22,800 --> 00:37:25,200
recompile a kernel that matches this

938
00:37:25,200 --> 00:37:28,560
kernel now some of the drivers um

939
00:37:28,560 --> 00:37:30,800
may or may not load so there's there's a

940
00:37:30,800 --> 00:37:32,720
little bit of limitation over there it

941
00:37:32,720 --> 00:37:34,960
does not do hundred percent emulation

942
00:37:34,960 --> 00:37:38,079
but we try to get as close to it as

943
00:37:38,079 --> 00:37:39,680
possible

944
00:37:39,680 --> 00:37:41,040
okay

945
00:37:41,040 --> 00:37:43,119
um

946
00:37:43,119 --> 00:37:46,400
so root fs done

947
00:37:46,560 --> 00:37:47,920
let's first of all fingerprint the

948
00:37:47,920 --> 00:37:50,800
kernel shall we

949
00:37:50,800 --> 00:37:51,340
um

950
00:37:51,340 --> 00:37:53,200
[Music]

951
00:37:53,200 --> 00:37:55,920
what we'll do is we'll just like

952
00:37:55,920 --> 00:37:59,200
this seems to be the the kernel block

953
00:37:59,200 --> 00:38:03,399
let's run the strings on it

954
00:38:07,599 --> 00:38:09,680
if this looks like the kernel

955
00:38:09,680 --> 00:38:11,440
you can actually see that this is the

956
00:38:11,440 --> 00:38:14,320
kernel console boot up line

957
00:38:14,320 --> 00:38:17,320
uh

958
00:38:20,240 --> 00:38:21,599
here it is

959
00:38:21,599 --> 00:38:24,000
this is

960
00:38:24,000 --> 00:38:28,280
linux kernel version 2.6.28

961
00:38:28,800 --> 00:38:32,280
which was compiled

962
00:38:32,400 --> 00:38:34,800
in 2016.

963
00:38:34,800 --> 00:38:36,160
okay

964
00:38:36,160 --> 00:38:38,240
this is an anachronism

965
00:38:38,240 --> 00:38:41,040
2016 we already had

966
00:38:41,040 --> 00:38:42,960
new kernels

967
00:38:42,960 --> 00:38:44,720
why do we still use

968
00:38:44,720 --> 00:38:48,480
ancient kernel 2.6.28

969
00:38:48,480 --> 00:38:52,800
kernel 2.6 as it turns out is the ie6

970
00:38:52,800 --> 00:38:55,599
of iot devices it will never go away

971
00:38:55,599 --> 00:38:57,119
and the reason is the chipset

972
00:38:57,119 --> 00:38:59,520
manufacturers choose to provide drivers

973
00:38:59,520 --> 00:39:01,119
in binary form

974
00:39:01,119 --> 00:39:03,280
and the binary drivers are compiled for

975
00:39:03,280 --> 00:39:06,480
kernel 2.6 because somebody just got the

976
00:39:06,480 --> 00:39:09,599
old broadcom tool chain compiled it

977
00:39:09,599 --> 00:39:11,280
done

978
00:39:11,280 --> 00:39:13,040
they will never these drivers does not

979
00:39:13,040 --> 00:39:14,640
work with new kernels because the

980
00:39:14,640 --> 00:39:16,400
symbols will mismatch

981
00:39:16,400 --> 00:39:18,320
nobody from the vendor side will bother

982
00:39:18,320 --> 00:39:19,760
to update it because there's no money in

983
00:39:19,760 --> 00:39:21,599
it for them to update it like what the

984
00:39:21,599 --> 00:39:23,040
hell is the new kernel going to do give

985
00:39:23,040 --> 00:39:26,079
you a sharper ipcam image oh if it works

986
00:39:26,079 --> 00:39:27,200
it works

987
00:39:27,200 --> 00:39:28,480
we'll ship it

988
00:39:28,480 --> 00:39:32,320
there's no impetus in iot secure in iot

989
00:39:32,320 --> 00:39:33,920
devices

990
00:39:33,920 --> 00:39:34,800
to

991
00:39:34,800 --> 00:39:36,720
go to the latest and greatest there's no

992
00:39:36,720 --> 00:39:40,480
concept of latest updates in iot land

993
00:39:40,480 --> 00:39:42,079
and that's why we have these old kernels

994
00:39:42,079 --> 00:39:44,640
floating around

995
00:39:45,920 --> 00:39:48,320
you'll see this behavior more often than

996
00:39:48,320 --> 00:39:51,119
not actually

997
00:39:53,119 --> 00:39:54,480
so what we're going to do is we're going

998
00:39:54,480 --> 00:39:56,240
to compile our own version of kernel

999
00:39:56,240 --> 00:39:58,800
2.6.28

1000
00:39:58,800 --> 00:40:00,400
with the

1001
00:40:00,400 --> 00:40:03,599
arm v5

1002
00:40:03,599 --> 00:40:05,280
instruction set

1003
00:40:05,280 --> 00:40:07,520
and then we will use that

1004
00:40:07,520 --> 00:40:11,839
to emulate it inside qemu

1005
00:40:15,200 --> 00:40:18,200
okay

1006
00:40:24,400 --> 00:40:26,720
for those of you compile linux kernels

1007
00:40:26,720 --> 00:40:29,440
it is a very time consuming process

1008
00:40:29,440 --> 00:40:31,200
but i mean essentially it's nothing but

1009
00:40:31,200 --> 00:40:33,359
just going through the make menu config

1010
00:40:33,359 --> 00:40:35,760
selecting the options and then using a

1011
00:40:35,760 --> 00:40:38,880
cross compiler to generate

1012
00:40:38,880 --> 00:40:39,920
a

1013
00:40:39,920 --> 00:40:41,760
cross compiled

1014
00:40:41,760 --> 00:40:44,880
arm kernel

1015
00:40:45,040 --> 00:40:46,800
fortunately we're going to use one that

1016
00:40:46,800 --> 00:40:49,920
we have along with emux

1017
00:40:49,920 --> 00:40:53,040
i also supply several

1018
00:40:53,040 --> 00:40:56,079
template kernels

1019
00:40:58,400 --> 00:41:01,280
so in the emux template directory

1020
00:41:01,280 --> 00:41:04,319
you'll find kernel

1021
00:41:04,319 --> 00:41:05,359
and

1022
00:41:05,359 --> 00:41:07,680
i've got a few kernels compiled

1023
00:41:07,680 --> 00:41:10,960
there's the zed image 2628 which is

1024
00:41:10,960 --> 00:41:13,760
matching the iep camera there's 2629

1025
00:41:13,760 --> 00:41:16,079
2631 39

1026
00:41:16,079 --> 00:41:20,640
363 16 57 and these are the new

1027
00:41:20,640 --> 00:41:23,680
mips kernels that we are also now using

1028
00:41:23,680 --> 00:41:25,760
so basically once you compile a kernel

1029
00:41:25,760 --> 00:41:27,200
you can throw it into the into the

1030
00:41:27,200 --> 00:41:29,200
kernel directory in uh

1031
00:41:29,200 --> 00:41:32,880
in emux and then use it for any of the

1032
00:41:32,880 --> 00:41:35,839
emulation

1033
00:41:42,960 --> 00:41:44,160
let's talk a little bit about the

1034
00:41:44,160 --> 00:41:47,799
emulation now

1035
00:41:49,680 --> 00:41:51,200
you know i'm finding it a little weird

1036
00:41:51,200 --> 00:41:53,760
to present back on stage again for about

1037
00:41:53,760 --> 00:41:54,880
two years

1038
00:41:54,880 --> 00:41:57,520
i was presenting on zoom and my desktop

1039
00:41:57,520 --> 00:42:00,160
is laid out in you know zoom region this

1040
00:42:00,160 --> 00:42:02,400
zoom region that and then you screen

1041
00:42:02,400 --> 00:42:04,560
share this you screen share that and i'm

1042
00:42:04,560 --> 00:42:06,560
like wow we're getting used to stage and

1043
00:42:06,560 --> 00:42:08,400
monitors again like i have to keep

1044
00:42:08,400 --> 00:42:09,760
turning this way in that way but you

1045
00:42:09,760 --> 00:42:11,680
know what this is this is fun this is

1046
00:42:11,680 --> 00:42:13,119
the way to do it

1047
00:42:13,119 --> 00:42:14,800
zoom's nice

1048
00:42:14,800 --> 00:42:17,839
this is nicer

1049
00:42:18,560 --> 00:42:20,480
okay so when it comes to emulating the

1050
00:42:20,480 --> 00:42:22,079
ip camera

1051
00:42:22,079 --> 00:42:24,640
instead of the cpu we've got qemu

1052
00:42:24,640 --> 00:42:27,520
we're going to use emulated nvram

1053
00:42:27,520 --> 00:42:30,319
the kernel will compile and use our own

1054
00:42:30,319 --> 00:42:31,520
kernel

1055
00:42:31,520 --> 00:42:33,119
and the

1056
00:42:33,119 --> 00:42:34,800
file system instead of using the

1057
00:42:34,800 --> 00:42:36,560
compressed file system will straight

1058
00:42:36,560 --> 00:42:37,839
away use

1059
00:42:37,839 --> 00:42:39,599
the uncompressed file system which we

1060
00:42:39,599 --> 00:42:40,800
got from

1061
00:42:40,800 --> 00:42:42,240
bin walk

1062
00:42:42,240 --> 00:42:44,400
now to compile kernels the best thing to

1063
00:42:44,400 --> 00:42:46,400
use is build root

1064
00:42:46,400 --> 00:42:48,400
build root has a beautiful set of cross

1065
00:42:48,400 --> 00:42:50,400
cut cross

1066
00:42:50,400 --> 00:42:52,160
cross compiling tools

1067
00:42:52,160 --> 00:42:54,720
build root is a little difficult to

1068
00:42:54,720 --> 00:42:57,599
understand at first it takes some time

1069
00:42:57,599 --> 00:43:00,000
but the folks who've created build root

1070
00:43:00,000 --> 00:43:02,560
bootlen they've published everything for

1071
00:43:02,560 --> 00:43:06,480
free tutorials trainings pdfs videos

1072
00:43:06,480 --> 00:43:08,079
um it's

1073
00:43:08,079 --> 00:43:10,400
they're a generous bunch of people i've

1074
00:43:10,400 --> 00:43:12,319
actually personally taken a class from

1075
00:43:12,319 --> 00:43:15,200
michael opdenaker and he's been a most

1076
00:43:15,200 --> 00:43:17,359
wonderful guy he like shows you the

1077
00:43:17,359 --> 00:43:20,079
insides of build root and uh

1078
00:43:20,079 --> 00:43:22,720
and booting up and creating your own iot

1079
00:43:22,720 --> 00:43:24,880
device it's a wonderful training that he

1080
00:43:24,880 --> 00:43:26,720
does it's all online

1081
00:43:26,720 --> 00:43:28,640
so all we essentially need is the kernel

1082
00:43:28,640 --> 00:43:30,640
and the uncompressed file system we drop

1083
00:43:30,640 --> 00:43:33,680
this into emacs and then everything else

1084
00:43:33,680 --> 00:43:36,960
will happen we also may need to fix some

1085
00:43:36,960 --> 00:43:38,640
config files

1086
00:43:38,640 --> 00:43:41,920
uh to match the qamu environment stuff

1087
00:43:41,920 --> 00:43:44,079
like iep address because we pulled us

1088
00:43:44,079 --> 00:43:46,319
off a running ip camera it will have its

1089
00:43:46,319 --> 00:43:48,720
own ip addresses and emox

1090
00:43:48,720 --> 00:43:51,839
needs its different ip addresses to make

1091
00:43:51,839 --> 00:43:55,119
things work

1092
00:43:55,119 --> 00:43:57,119
okay

1093
00:43:57,119 --> 00:43:59,839
so what we have in that firmware image

1094
00:43:59,839 --> 00:44:02,240
is this we have the kernel which we got

1095
00:44:02,240 --> 00:44:03,839
we're going to compile a matching kernel

1096
00:44:03,839 --> 00:44:05,839
we already have it in the templates

1097
00:44:05,839 --> 00:44:08,079
we have the cram fs compressed file

1098
00:44:08,079 --> 00:44:10,960
system which we extracted using bin walk

1099
00:44:10,960 --> 00:44:13,359
and cram fsck and we have the tar

1100
00:44:13,359 --> 00:44:15,440
archive which actually has these config

1101
00:44:15,440 --> 00:44:18,599
files cisco syst.config

1102
00:44:18,599 --> 00:44:20,640
umconfig.txt this is basically the

1103
00:44:20,640 --> 00:44:22,800
layout of the eight megabytes of

1104
00:44:22,800 --> 00:44:26,000
flash that we extracted

1105
00:44:26,319 --> 00:44:29,119
now comes the whole process of how to

1106
00:44:29,119 --> 00:44:30,720
emulate this

1107
00:44:30,720 --> 00:44:32,720
extracted firmware

1108
00:44:32,720 --> 00:44:33,599
so

1109
00:44:33,599 --> 00:44:34,880
i'm not going to bore you with the

1110
00:44:34,880 --> 00:44:37,119
details of

1111
00:44:37,119 --> 00:44:38,800
how the emux docker container is

1112
00:44:38,800 --> 00:44:41,920
organized i did a talk on inside rmx and

1113
00:44:41,920 --> 00:44:44,480
inside emacs a little while ago it's

1114
00:44:44,480 --> 00:44:47,040
available on youtube and the slides are

1115
00:44:47,040 --> 00:44:49,440
also available on the website

1116
00:44:49,440 --> 00:44:51,359
highly encourage you to follow that talk

1117
00:44:51,359 --> 00:44:53,119
to get an idea of

1118
00:44:53,119 --> 00:44:55,440
what lies inside

1119
00:44:55,440 --> 00:44:58,400
at a very high level you have qmu you

1120
00:44:58,400 --> 00:45:00,800
have an nfs file system which gets

1121
00:45:00,800 --> 00:45:01,760
shared

1122
00:45:01,760 --> 00:45:04,560
from the host within qemu you have a

1123
00:45:04,560 --> 00:45:06,800
docker volume which hosts the nfs file

1124
00:45:06,800 --> 00:45:09,119
system you have a workspace directory

1125
00:45:09,119 --> 00:45:11,119
which gets bind mounted between the host

1126
00:45:11,119 --> 00:45:13,599
and the docker container and you have

1127
00:45:13,599 --> 00:45:16,160
you have port forwarding to forward from

1128
00:45:16,160 --> 00:45:18,640
the host to ports

1129
00:45:18,640 --> 00:45:21,839
inside qemu

1130
00:45:23,040 --> 00:45:25,040
this diagram gives you a little bit of a

1131
00:45:25,040 --> 00:45:27,359
directory layout of how

1132
00:45:27,359 --> 00:45:29,760
emux is organized where all the scripts

1133
00:45:29,760 --> 00:45:30,720
are

1134
00:45:30,720 --> 00:45:33,040
so you have a devices database you have

1135
00:45:33,040 --> 00:45:35,119
qamu options

1136
00:45:35,119 --> 00:45:37,680
you have all the qemu scripts and

1137
00:45:37,680 --> 00:45:39,680
binaries inside

1138
00:45:39,680 --> 00:45:41,839
the run directory you have a debug log

1139
00:45:41,839 --> 00:45:43,040
directory

1140
00:45:43,040 --> 00:45:45,119
you have a host fs directory which is

1141
00:45:45,119 --> 00:45:47,040
like the initial file system to boot

1142
00:45:47,040 --> 00:45:48,079
with

1143
00:45:48,079 --> 00:45:49,599
and then you have

1144
00:45:49,599 --> 00:45:51,599
all these boxes in blue that you're

1145
00:45:51,599 --> 00:45:54,000
seeing the my ip cam and

1146
00:45:54,000 --> 00:45:56,880
dv dv arm dv mips

1147
00:45:56,880 --> 00:45:59,760
these are all emulated devices and then

1148
00:45:59,760 --> 00:46:02,480
there's a template which contains

1149
00:46:02,480 --> 00:46:04,319
well basically a template for emulating

1150
00:46:04,319 --> 00:46:05,760
your new device

1151
00:46:05,760 --> 00:46:07,440
so we're going to create a copy of the

1152
00:46:07,440 --> 00:46:08,720
template we're going to fill in the

1153
00:46:08,720 --> 00:46:11,599
configuration we're going to drop the

1154
00:46:11,599 --> 00:46:12,720
essentially we're going to drop the

1155
00:46:12,720 --> 00:46:14,319
kernel in we're going to drop the

1156
00:46:14,319 --> 00:46:16,240
compressed root fs in

1157
00:46:16,240 --> 00:46:17,760
and

1158
00:46:17,760 --> 00:46:20,480
we'll boot it

1159
00:46:21,520 --> 00:46:24,000
the documentation also discusses seven

1160
00:46:24,000 --> 00:46:27,040
easy steps to emulate your own device

1161
00:46:27,040 --> 00:46:29,280
so one is make a new device from the

1162
00:46:29,280 --> 00:46:30,880
template

1163
00:46:30,880 --> 00:46:33,440
then you

1164
00:46:33,680 --> 00:46:35,280
compile a kernel

1165
00:46:35,280 --> 00:46:38,319
prepare the compressed root fs

1166
00:46:38,319 --> 00:46:41,520
create nv ram if needed

1167
00:46:41,520 --> 00:46:43,359
if there are any flash partitions to be

1168
00:46:43,359 --> 00:46:46,800
emulated drop the flash binary

1169
00:46:46,800 --> 00:46:49,200
any library hooks to be thrown in edit

1170
00:46:49,200 --> 00:46:50,880
the library hooks

1171
00:46:50,880 --> 00:46:53,359
and finally you create a config file and

1172
00:46:53,359 --> 00:46:56,400
you add an entry into the devices

1173
00:46:56,400 --> 00:46:58,960
database

1174
00:46:59,359 --> 00:47:00,640
so

1175
00:47:00,640 --> 00:47:03,520
here from now on it's all

1176
00:47:03,520 --> 00:47:04,640
it's all

1177
00:47:04,640 --> 00:47:06,400
demos

1178
00:47:06,400 --> 00:47:10,040
give me just a moment

1179
00:47:13,280 --> 00:47:15,440
we'll come back to the slides in a

1180
00:47:15,440 --> 00:47:18,400
little bit

1181
00:47:21,839 --> 00:47:24,960
just going to take a pause for a moment

1182
00:47:24,960 --> 00:47:27,920
breathe a little bit have some water

1183
00:47:27,920 --> 00:47:32,920
you continue in exactly one minute

1184
00:48:00,559 --> 00:48:03,839
yeah i don't know where it is

1185
00:48:04,000 --> 00:48:07,839
it's not fallen down right

1186
00:48:09,119 --> 00:48:11,520
yeah yeah

1187
00:48:16,400 --> 00:48:19,800
i found it

1188
00:48:20,160 --> 00:48:21,119
got it

1189
00:48:21,119 --> 00:48:24,359
all good

1190
00:48:45,040 --> 00:48:48,440
just one moment

1191
00:49:02,640 --> 00:49:04,480
meanwhile if you're also interested in

1192
00:49:04,480 --> 00:49:07,440
more iot devices stuff right

1193
00:49:07,440 --> 00:49:09,599
my friend and fellow countryman asim is

1194
00:49:09,599 --> 00:49:11,359
presenting over there

1195
00:49:11,359 --> 00:49:13,040
it's kind of uh

1196
00:49:13,040 --> 00:49:14,960
it's kind of unfortunate that our talks

1197
00:49:14,960 --> 00:49:17,040
had to be in parallel because i would

1198
00:49:17,040 --> 00:49:18,880
have really liked to see stuff and i'm

1199
00:49:18,880 --> 00:49:20,720
sure he would have liked to see mine but

1200
00:49:20,720 --> 00:49:23,359
definitely catch the recording of

1201
00:49:23,359 --> 00:49:25,200
his hardware stuff that he's built

1202
00:49:25,200 --> 00:49:28,079
explore it's uh it's pretty good i mean

1203
00:49:28,079 --> 00:49:30,559
i i would someday love to get a good

1204
00:49:30,559 --> 00:49:32,480
first hand demo of it

1205
00:49:32,480 --> 00:49:33,280
but

1206
00:49:33,280 --> 00:49:35,920
i've heard nothing but good things about

1207
00:49:35,920 --> 00:49:39,559
about his work

1208
00:49:50,000 --> 00:49:53,000
seven

1209
00:50:04,880 --> 00:50:07,880
okay

1210
00:50:27,040 --> 00:50:30,319
right so i'm going to now

1211
00:50:39,280 --> 00:50:40,559
we'll now start on the process of

1212
00:50:40,559 --> 00:50:42,880
emulation

1213
00:50:42,880 --> 00:50:44,720
so first

1214
00:50:44,720 --> 00:50:47,280
we'll make a new directory

1215
00:50:47,280 --> 00:50:49,680
we'll copy the

1216
00:50:49,680 --> 00:50:50,960
template

1217
00:50:50,960 --> 00:50:53,359
into

1218
00:50:53,520 --> 00:50:57,040
directory called myipcam

1219
00:50:59,359 --> 00:51:02,319
i'm going to go to myipcam

1220
00:51:02,319 --> 00:51:03,680
and in here

1221
00:51:03,680 --> 00:51:06,079
all i need to do is place edit the

1222
00:51:06,079 --> 00:51:07,520
config file

1223
00:51:07,520 --> 00:51:10,240
the kernel is already placed in there

1224
00:51:10,240 --> 00:51:11,680
and

1225
00:51:11,680 --> 00:51:15,280
populate the root file system

1226
00:51:15,280 --> 00:51:16,880
now the root file system we already

1227
00:51:16,880 --> 00:51:19,440
extracted so all i have to do is move it

1228
00:51:19,440 --> 00:51:22,720
from the temp directory

1229
00:51:22,720 --> 00:51:26,079
extracted cram fs root

1230
00:51:26,079 --> 00:51:28,319
and

1231
00:51:29,359 --> 00:51:32,000
the root file system is already over

1232
00:51:32,000 --> 00:51:34,720
here in cram fs root

1233
00:51:34,720 --> 00:51:37,119
we don't need mtd parts

1234
00:51:37,119 --> 00:51:39,040
we don't need nvram so i'm just going to

1235
00:51:39,040 --> 00:51:41,680
remove those

1236
00:51:43,839 --> 00:51:46,160
and

1237
00:51:46,800 --> 00:51:50,119
we also

1238
00:51:50,559 --> 00:51:52,880
um

1239
00:51:53,040 --> 00:51:55,359
we also don't need the pre-load

1240
00:51:55,359 --> 00:51:58,400
directory in this case

1241
00:52:00,079 --> 00:52:02,800
so it's simple enough configuration

1242
00:52:02,800 --> 00:52:06,240
ram fs root and the kernel

1243
00:52:06,240 --> 00:52:10,000
we will edit the config file

1244
00:52:10,319 --> 00:52:14,240
and here i have to give the device id

1245
00:52:15,760 --> 00:52:17,520
there is no nvram so i'm going to remove

1246
00:52:17,520 --> 00:52:19,680
that

1247
00:52:19,680 --> 00:52:21,280
comment that line out

1248
00:52:21,280 --> 00:52:23,599
the root fs is called

1249
00:52:23,599 --> 00:52:26,559
cram fs root

1250
00:52:26,559 --> 00:52:29,839
i'm going to leave aslr off for now

1251
00:52:29,839 --> 00:52:32,880
and in the init commands i'm simply just

1252
00:52:32,880 --> 00:52:35,200
going to do bin sh

1253
00:52:35,200 --> 00:52:39,359
first we'll see if this works or not

1254
00:52:41,839 --> 00:52:45,400
now um

1255
00:52:47,599 --> 00:52:50,319
let's create a corresponding entry of my

1256
00:52:50,319 --> 00:52:51,359
ipcam

1257
00:52:51,359 --> 00:52:55,520
in the overall devices database

1258
00:52:55,760 --> 00:53:00,440
before i do that i'm just going to shown

1259
00:53:11,520 --> 00:53:14,319
i'm going to set the permissions to the

1260
00:53:14,319 --> 00:53:18,960
r0 user so there's no problem in there

1261
00:53:18,960 --> 00:53:21,359
and

1262
00:53:25,280 --> 00:53:28,640
we go to devices extra

1263
00:53:28,640 --> 00:53:30,559
so here this is a list of all the

1264
00:53:30,559 --> 00:53:32,160
devices

1265
00:53:32,160 --> 00:53:35,200
that are emulated

1266
00:53:35,920 --> 00:53:38,480
i'm going to

1267
00:53:39,599 --> 00:53:44,160
actually have this thing pretty much set

1268
00:53:50,960 --> 00:53:54,400
i'm going to add this line over here

1269
00:53:55,520 --> 00:53:57,680
and i'll explain you what it is

1270
00:53:57,680 --> 00:53:59,839
so here's the line that i've added it is

1271
00:53:59,839 --> 00:54:02,800
the device id is my ip cam

1272
00:54:02,800 --> 00:54:05,920
then which qemu binary you want to use

1273
00:54:05,920 --> 00:54:06,800
so i've

1274
00:54:06,800 --> 00:54:08,079
already got

1275
00:54:08,079 --> 00:54:12,800
compiled binaries for qamu 6.0 and 6.1

1276
00:54:12,800 --> 00:54:16,559
we can use either let's use qmu arm 6.1

1277
00:54:16,559 --> 00:54:18,480
if you're doing a mips version you can

1278
00:54:18,480 --> 00:54:19,760
use a

1279
00:54:19,760 --> 00:54:23,760
qamu system r mips or mip cell if it is

1280
00:54:23,760 --> 00:54:25,359
a little indian mimps

1281
00:54:25,359 --> 00:54:27,359
mips typically have two flair flavors

1282
00:54:27,359 --> 00:54:29,680
big indian and little indian arm also

1283
00:54:29,680 --> 00:54:31,200
has begun in a little indian but have

1284
00:54:31,200 --> 00:54:33,359
not really seen a big indian armed

1285
00:54:33,359 --> 00:54:35,040
device in

1286
00:54:35,040 --> 00:54:37,200
years to come

1287
00:54:37,200 --> 00:54:39,599
then this is the board that you'll use

1288
00:54:39,599 --> 00:54:42,160
for arm v5 the different boards for arm

1289
00:54:42,160 --> 00:54:45,520
v6 and mv7

1290
00:54:46,079 --> 00:54:49,359
the kernel the z-image 2.6.28

1291
00:54:49,359 --> 00:54:50,400
and then

1292
00:54:50,400 --> 00:54:51,599
this is the

1293
00:54:51,599 --> 00:54:53,240
device name

1294
00:54:53,240 --> 00:54:55,440
ring02021ip cam we're going to call it

1295
00:54:55,440 --> 00:54:56,839
uh

1296
00:54:56,839 --> 00:55:00,960
hitb2021ip welcome christopharo

1297
00:55:00,960 --> 00:55:04,160
um the device database is saved

1298
00:55:04,160 --> 00:55:07,359
and let's see if this uh

1299
00:55:07,359 --> 00:55:10,240
this damn thing works right like i said

1300
00:55:10,240 --> 00:55:11,760
it's all done live

1301
00:55:11,760 --> 00:55:14,319
there's no pre-recorded demo

1302
00:55:14,319 --> 00:55:16,799
if it works it works if it doesn't

1303
00:55:16,799 --> 00:55:19,200
it won't

1304
00:55:19,680 --> 00:55:21,839
okay

1305
00:55:22,640 --> 00:55:24,960
now

1306
00:55:26,960 --> 00:55:29,920
let's do a launcher

1307
00:55:32,319 --> 00:55:34,400
so sure enough you get a new entry added

1308
00:55:34,400 --> 00:55:36,160
at the bottom

1309
00:55:36,160 --> 00:55:40,720
it says hitb2 2021 ipcam

1310
00:55:42,400 --> 00:55:45,359
let's launch it

1311
00:55:46,079 --> 00:55:48,480
the kernel does kick off

1312
00:55:48,480 --> 00:55:51,520
and you do have a

1313
00:55:51,520 --> 00:55:54,240
booted version of just the kernel this

1314
00:55:54,240 --> 00:55:57,119
is not the ip cam working mind you this

1315
00:55:57,119 --> 00:56:00,079
is just the kernel that is booted up

1316
00:56:00,079 --> 00:56:00,839
and

1317
00:56:00,839 --> 00:56:03,920
uh what we will now do

1318
00:56:03,920 --> 00:56:05,520
is boot up

1319
00:56:05,520 --> 00:56:07,920
the user space component

1320
00:56:07,920 --> 00:56:09,200
of

1321
00:56:09,200 --> 00:56:11,760
the ip camera right now there's no user

1322
00:56:11,760 --> 00:56:15,079
space component

1323
00:56:17,680 --> 00:56:20,079
but we'll plug the user space component

1324
00:56:20,079 --> 00:56:23,359
in just a little bit

1325
00:56:26,079 --> 00:56:27,839
so once the kernel is booted up we

1326
00:56:27,839 --> 00:56:30,559
pretty much don't need that panel at all

1327
00:56:30,559 --> 00:56:32,880
we will now attach

1328
00:56:32,880 --> 00:56:35,119
to uh

1329
00:56:35,119 --> 00:56:36,960
we'll get a docker shell

1330
00:56:36,960 --> 00:56:38,799
and then

1331
00:56:38,799 --> 00:56:40,960
use the command user space

1332
00:56:40,960 --> 00:56:42,880
all these are emux commands which are

1333
00:56:42,880 --> 00:56:45,440
documented in the emux

1334
00:56:45,440 --> 00:56:48,319
documentation

1335
00:56:49,920 --> 00:56:51,040
now here

1336
00:56:51,040 --> 00:56:52,640
you get three options you can either

1337
00:56:52,640 --> 00:56:54,960
drop into the host fs which is the

1338
00:56:54,960 --> 00:56:57,200
minimal file system or we're going to

1339
00:56:57,200 --> 00:57:01,919
start the hitb 2021 ipcam

1340
00:57:03,119 --> 00:57:06,559
we are not starting any system services

1341
00:57:06,559 --> 00:57:09,599
so we'll just uh

1342
00:57:10,079 --> 00:57:12,480
we'll just get bin sh

1343
00:57:12,480 --> 00:57:15,440
this is the busy box shell

1344
00:57:15,440 --> 00:57:16,720
of

1345
00:57:16,720 --> 00:57:20,319
the root file system of the ip camera

1346
00:57:20,319 --> 00:57:22,480
if i do a file listing in here

1347
00:57:22,480 --> 00:57:24,000
i'm going to see

1348
00:57:24,000 --> 00:57:26,960
only the necessary files

1349
00:57:26,960 --> 00:57:28,400
that are

1350
00:57:28,400 --> 00:57:30,079
present in the root file system i'm not

1351
00:57:30,079 --> 00:57:31,680
going to see anything else this is

1352
00:57:31,680 --> 00:57:32,960
basically all the stuff that we

1353
00:57:32,960 --> 00:57:35,119
extracted and it's now

1354
00:57:35,119 --> 00:57:37,920
living in here

1355
00:57:37,920 --> 00:57:39,599
how do we go ahead from this point

1356
00:57:39,599 --> 00:57:42,240
onwards right we want to now kick off

1357
00:57:42,240 --> 00:57:43,359
all the

1358
00:57:43,359 --> 00:57:45,920
services

1359
00:57:45,920 --> 00:57:48,160
so

1360
00:57:49,040 --> 00:57:53,240
what we do is we

1361
00:57:54,559 --> 00:57:57,599
need to find out

1362
00:58:02,640 --> 00:58:05,920
we need to find out what the

1363
00:58:05,920 --> 00:58:08,640
init scripts do

1364
00:58:08,640 --> 00:58:10,559
the best way to do is to look into etc

1365
00:58:10,559 --> 00:58:13,119
init tab

1366
00:58:16,480 --> 00:58:18,240
so etc init tab

1367
00:58:18,240 --> 00:58:19,760
you can see that

1368
00:58:19,760 --> 00:58:24,119
the initialization is done by etc init.d

1369
00:58:24,119 --> 00:58:26,079
rc.sysinit

1370
00:58:26,079 --> 00:58:30,280
and then there is etc init.drc3

1371
00:58:34,720 --> 00:58:36,640
now there are a few fixes that i'll need

1372
00:58:36,640 --> 00:58:40,880
to do basically this is uh

1373
00:58:40,880 --> 00:58:42,799
the first time you start it things will

1374
00:58:42,799 --> 00:58:44,559
start going wrong because it's not

1375
00:58:44,559 --> 00:58:46,640
finding the video devices

1376
00:58:46,640 --> 00:58:48,559
and then you to fake the video device or

1377
00:58:48,559 --> 00:58:50,720
you can simply delete this video device

1378
00:58:50,720 --> 00:58:53,040
file how do i know all this because of

1379
00:58:53,040 --> 00:58:55,359
just you know weeks of trial and error

1380
00:58:55,359 --> 00:58:56,960
when you do this for the very first time

1381
00:58:56,960 --> 00:58:59,119
you should be prepared to invest about a

1382
00:58:59,119 --> 00:59:01,440
week in figuring out the boot up

1383
00:59:01,440 --> 00:59:04,400
sequence and what devices are used

1384
00:59:04,400 --> 00:59:06,240
you might have to do some s tray stuff

1385
00:59:06,240 --> 00:59:07,680
to see what

1386
00:59:07,680 --> 00:59:09,440
block devices or special devices are

1387
00:59:09,440 --> 00:59:10,960
being opened

1388
00:59:10,960 --> 00:59:12,480
once you do all that stuff you'll come

1389
00:59:12,480 --> 00:59:14,480
to know what goes on behind the scenes

1390
00:59:14,480 --> 00:59:16,240
and then you have to

1391
00:59:16,240 --> 00:59:17,839
you basically have to fake it till you

1392
00:59:17,839 --> 00:59:19,440
make it until you get something like

1393
00:59:19,440 --> 00:59:20,160
this

1394
00:59:20,160 --> 00:59:21,520
going on

1395
00:59:21,520 --> 00:59:23,680
so i'm going to try this first and then

1396
00:59:23,680 --> 00:59:25,680
we'll just skip to the final step

1397
00:59:25,680 --> 00:59:26,960
because otherwise it's just we don't

1398
00:59:26,960 --> 00:59:28,640
have a week to spend over here as much

1399
00:59:28,640 --> 00:59:31,760
as i would have loved to do it with you

1400
00:59:31,760 --> 00:59:34,640
so first let's just try etcnit.drc cis

1401
00:59:34,640 --> 00:59:36,960
in it

1402
00:59:39,760 --> 00:59:41,680
it'll load things

1403
00:59:41,680 --> 00:59:43,359
and then you'll get an error like you'll

1404
00:59:43,359 --> 00:59:45,119
get an error like

1405
00:59:45,119 --> 00:59:49,760
lib modules abs 628.ko it did not load

1406
00:59:49,760 --> 00:59:51,440
and it

1407
00:59:51,440 --> 00:59:54,400
it kind of failed

1408
00:59:54,799 --> 00:59:57,280
so what i do is i go to the dev

1409
00:59:57,280 --> 00:59:59,119
directory

1410
00:59:59,119 --> 01:00:02,880
remove the abs 628 file

1411
01:00:02,880 --> 01:00:05,680
i create a blank file

1412
01:00:05,680 --> 01:00:08,559
abs-628

1413
01:00:08,559 --> 01:00:11,200
which is a fake video device

1414
01:00:11,200 --> 01:00:14,439
and now

1415
01:00:14,640 --> 01:00:18,640
i'll run the atc system it

1416
01:00:20,880 --> 01:00:22,559
see now it went a little further than

1417
01:00:22,559 --> 01:00:26,319
this it uh it tried to

1418
01:00:26,319 --> 01:00:27,119
do

1419
01:00:27,119 --> 01:00:29,119
it it basically did not stop over here

1420
01:00:29,119 --> 01:00:31,040
it went further

1421
01:00:31,040 --> 01:00:35,200
now we will try etc init dot d

1422
01:00:35,200 --> 01:00:40,319
rc space three this was the second item

1423
01:00:40,960 --> 01:00:43,119
this was the second item in the

1424
01:00:43,119 --> 01:00:45,040
etc init tab

1425
01:00:45,040 --> 01:00:48,160
so we'll invoke this by hand

1426
01:00:48,160 --> 01:00:51,200
now what's going to happen

1427
01:00:53,760 --> 01:00:54,880
is

1428
01:00:54,880 --> 01:01:00,319
it'll start loading up all these uh

1429
01:01:00,319 --> 01:01:02,000
essentially it starts loading up all

1430
01:01:02,000 --> 01:01:03,920
these uh

1431
01:01:03,920 --> 01:01:05,200
services

1432
01:01:05,200 --> 01:01:07,359
it's starting the task manager and

1433
01:01:07,359 --> 01:01:11,240
started the web server

1434
01:01:11,359 --> 01:01:12,799
it's trying to

1435
01:01:12,799 --> 01:01:15,440
essentially

1436
01:01:15,680 --> 01:01:18,960
bring dhcp up

1437
01:01:23,520 --> 01:01:25,920
but there's a there's a mechanism in in

1438
01:01:25,920 --> 01:01:27,200
emux

1439
01:01:27,200 --> 01:01:28,559
to

1440
01:01:28,559 --> 01:01:31,280
force the ethernet interface to 190 to

1441
01:01:31,280 --> 01:01:37,240
168 100.2 which is a default interface

1442
01:01:38,400 --> 01:01:40,000
yeah

1443
01:01:40,000 --> 01:01:41,520
so right now it seems everything is

1444
01:01:41,520 --> 01:01:43,760
running

1445
01:01:43,760 --> 01:01:46,559
if i check the processes ps

1446
01:01:46,559 --> 01:01:48,720
the web server is running

1447
01:01:48,720 --> 01:01:50,799
now for the final test right let's see

1448
01:01:50,799 --> 01:01:56,079
if the ip cameras interface goes on

1449
01:02:04,720 --> 01:02:06,799
i'm going to browse to

1450
01:02:06,799 --> 01:02:09,520
localhost 20080

1451
01:02:09,520 --> 01:02:11,920
which essentially happens to be port

1452
01:02:11,920 --> 01:02:14,160
forwarding to

1453
01:02:14,160 --> 01:02:18,680
the docker image on port 80.

1454
01:02:20,400 --> 01:02:22,880
and you have a virtual ip camera booted

1455
01:02:22,880 --> 01:02:23,680
up

1456
01:02:23,680 --> 01:02:25,520
even though there is no ip camera over

1457
01:02:25,520 --> 01:02:26,960
here

1458
01:02:26,960 --> 01:02:29,920
you can enter it

1459
01:02:33,200 --> 01:02:35,280
there's no video stream because well

1460
01:02:35,280 --> 01:02:37,119
there is no video device

1461
01:02:37,119 --> 01:02:40,720
but if you look at like the settings

1462
01:02:40,720 --> 01:02:43,839
and you can play around with the network

1463
01:02:43,839 --> 01:02:46,880
and go to tcp settings so at this point

1464
01:02:46,880 --> 01:02:49,280
this device is ready to go you can

1465
01:02:49,280 --> 01:02:51,200
communicate to it

1466
01:02:51,200 --> 01:02:52,319
using

1467
01:02:52,319 --> 01:02:55,680
tcp ip you can now attach gdb to it you

1468
01:02:55,680 --> 01:02:58,240
can debug it you can fuzz it you can now

1469
01:02:58,240 --> 01:03:00,319
run exploits on it

1470
01:03:00,319 --> 01:03:02,319
all that stuff and i'll show off a

1471
01:03:02,319 --> 01:03:04,079
little bit of emux

1472
01:03:04,079 --> 01:03:06,640
um and the emux capabilities

1473
01:03:06,640 --> 01:03:08,559
and then we'll uh then we'll wrap up our

1474
01:03:08,559 --> 01:03:10,880
session

1475
01:03:12,319 --> 01:03:15,119
when you get this thing

1476
01:03:15,119 --> 01:03:16,960
booted up for the very first time right

1477
01:03:16,960 --> 01:03:18,319
when when the

1478
01:03:18,319 --> 01:03:20,240
thing finally works

1479
01:03:20,240 --> 01:03:22,319
it's uh it's a matter of it's a moment

1480
01:03:22,319 --> 01:03:24,559
of joy like you you feel super happy

1481
01:03:24,559 --> 01:03:28,319
like it really worked because

1482
01:03:28,319 --> 01:03:30,160
five days before this you'll be banging

1483
01:03:30,160 --> 01:03:31,920
your head against the wall like it it

1484
01:03:31,920 --> 01:03:34,000
goes so far then it fails

1485
01:03:34,000 --> 01:03:36,160
then you go further and fail

1486
01:03:36,160 --> 01:03:39,119
every night you sleep and you wake up

1487
01:03:39,119 --> 01:03:40,559
you'll then think of doing something

1488
01:03:40,559 --> 01:03:42,240
different you'll go further

1489
01:03:42,240 --> 01:03:43,920
every shower you take you'll get a

1490
01:03:43,920 --> 01:03:46,240
different idea it'll go further until

1491
01:03:46,240 --> 01:03:48,880
one point the damn thing will just work

1492
01:03:48,880 --> 01:03:50,640
and at that point you just go out and

1493
01:03:50,640 --> 01:03:53,760
say i am the master of the universe just

1494
01:03:53,760 --> 01:03:56,480
like he-man then you put the sword back

1495
01:03:56,480 --> 01:04:00,480
and go start breaking these things

1496
01:04:02,640 --> 01:04:05,119
now all this stuff i basically did by

1497
01:04:05,119 --> 01:04:06,480
hand right i

1498
01:04:06,480 --> 01:04:08,559
invoke the commands by hand because i

1499
01:04:08,559 --> 01:04:10,960
know how to make it work what you then

1500
01:04:10,960 --> 01:04:12,960
do is you automate the whole thing like

1501
01:04:12,960 --> 01:04:14,960
you you can create the init commands

1502
01:04:14,960 --> 01:04:16,960
what i did by hand you can put in the

1503
01:04:16,960 --> 01:04:19,760
config file so automatically it boots up

1504
01:04:19,760 --> 01:04:22,720
i'll show you the automated version that

1505
01:04:22,720 --> 01:04:24,319
is present

1506
01:04:24,319 --> 01:04:26,400
in just a second so you're going to put

1507
01:04:26,400 --> 01:04:29,280
this away for now

1508
01:04:33,280 --> 01:04:37,599
and i am going to attach

1509
01:04:38,319 --> 01:04:42,160
another emux docker shell

1510
01:04:42,160 --> 01:04:44,480
i mean even from the emox docker shell

1511
01:04:44,480 --> 01:04:46,880
it's like you could do a lot of stuff

1512
01:04:46,880 --> 01:04:50,559
you can do emux ps which will remotely

1513
01:04:50,559 --> 01:04:52,400
dump the processes that are running

1514
01:04:52,400 --> 01:04:55,680
there you can do like emux

1515
01:04:55,680 --> 01:04:57,280
if you want to get the process memory

1516
01:04:57,280 --> 01:05:00,000
maps of the web server you can do like

1517
01:05:00,000 --> 01:05:02,000
emux

1518
01:05:02,000 --> 01:05:04,079
maps webs

1519
01:05:04,079 --> 01:05:06,319
it will give you the process memory maps

1520
01:05:06,319 --> 01:05:08,480
of the pages of the virtual memory of

1521
01:05:08,480 --> 01:05:10,400
the process so there's several little

1522
01:05:10,400 --> 01:05:12,079
wrapper scripts that i've written to

1523
01:05:12,079 --> 01:05:12,960
make

1524
01:05:12,960 --> 01:05:14,000
testing

1525
01:05:14,000 --> 01:05:18,720
debugging tracing all that fairly easy

1526
01:05:18,720 --> 01:05:20,640
what i'm going to do now is i'm going to

1527
01:05:20,640 --> 01:05:23,760
emax halt this

1528
01:05:23,760 --> 01:05:26,400
sort is like the shutdown it will

1529
01:05:26,400 --> 01:05:28,319
you know bring the system down it will

1530
01:05:28,319 --> 01:05:30,480
shut the kernel

1531
01:05:30,480 --> 01:05:33,520
and uh i'll show you what we do what we

1532
01:05:33,520 --> 01:05:35,440
do to automate this whole

1533
01:05:35,440 --> 01:05:37,520
boot up process

1534
01:05:37,520 --> 01:05:39,839
okay

1535
01:05:43,440 --> 01:05:46,440
okay

1536
01:05:51,359 --> 01:05:54,880
so in here is actual

1537
01:05:54,880 --> 01:05:58,240
implementation of the ip camera if you

1538
01:05:58,240 --> 01:06:00,799
pull down the default docker image of

1539
01:06:00,799 --> 01:06:02,079
emox

1540
01:06:02,079 --> 01:06:03,680
the ip camera firmware is also

1541
01:06:03,680 --> 01:06:06,480
distributed as part of the the default

1542
01:06:06,480 --> 01:06:08,160
distribution so you'll be able to play

1543
01:06:08,160 --> 01:06:10,720
with it by yourself

1544
01:06:10,720 --> 01:06:11,839
and

1545
01:06:11,839 --> 01:06:13,280
all the config is stored in this

1546
01:06:13,280 --> 01:06:14,920
directory called tri

1547
01:06:14,920 --> 01:06:18,319
227wf let's look in that same directory

1548
01:06:18,319 --> 01:06:20,880
it's the same as the myipcan except all

1549
01:06:20,880 --> 01:06:25,240
that automation stuff is in there

1550
01:06:40,000 --> 01:06:41,839
then we

1551
01:06:41,839 --> 01:06:43,839
get the config file

1552
01:06:43,839 --> 01:06:46,480
so here is the automated init command so

1553
01:06:46,480 --> 01:06:49,520
first you remove the dev abs 628 you

1554
01:06:49,520 --> 01:06:52,720
touch a new dev abs 6 to 8 then init rc

1555
01:06:52,720 --> 01:06:57,440
dot sys in it init rc.3 bin sh

1556
01:06:57,440 --> 01:06:58,880
and with this

1557
01:06:58,880 --> 01:07:00,960
it would be good to go

1558
01:07:00,960 --> 01:07:04,520
if i do a launcher

1559
01:07:18,799 --> 01:07:21,038
okay

1560
01:07:23,359 --> 01:07:26,480
so let me first launch this

1561
01:07:26,480 --> 01:07:29,839
try vision ip camera

1562
01:07:36,319 --> 01:07:40,480
and we're going to go emax docker shell

1563
01:07:40,720 --> 01:07:43,839
user space

1564
01:07:46,400 --> 01:07:50,000
and start the ip camera

1565
01:07:51,839 --> 01:07:54,319
now all those automated init commands

1566
01:07:54,319 --> 01:07:57,200
will kick in and it will kick off all

1567
01:07:57,200 --> 01:08:00,078
the processes

1568
01:08:07,839 --> 01:08:11,200
and now we're even ready to go

1569
01:08:11,200 --> 01:08:15,279
let me do a couple of cool little demos

1570
01:08:21,679 --> 01:08:23,439
so folks basically this is my production

1571
01:08:23,439 --> 01:08:26,000
testing machine right this is what i do

1572
01:08:26,000 --> 01:08:27,839
iot r d with

1573
01:08:27,839 --> 01:08:31,198
so anything new i need i

1574
01:08:31,198 --> 01:08:33,198
build it into emacs and then i publish

1575
01:08:33,198 --> 01:08:35,679
the changes on github i publish these

1576
01:08:35,679 --> 01:08:39,319
rather frequently

1577
01:08:40,719 --> 01:08:43,040
okay

1578
01:08:46,880 --> 01:08:48,960
let's uh we'll do a mini we'll do a

1579
01:08:48,960 --> 01:08:53,000
little exploit as well

1580
01:09:02,560 --> 01:09:04,319
i'll show a nice little stack overflow

1581
01:09:04,319 --> 01:09:08,319
on here which is which is quite fun

1582
01:09:08,560 --> 01:09:10,479
first let's make sure that

1583
01:09:10,479 --> 01:09:12,399
the

1584
01:09:12,399 --> 01:09:17,158
web server interface is working yeah

1585
01:09:35,439 --> 01:09:38,640
there is a web server interface

1586
01:09:38,640 --> 01:09:41,040
enter

1587
01:09:42,640 --> 01:09:43,920
settings so

1588
01:09:43,920 --> 01:09:47,799
yeah this is all good to go

1589
01:09:54,000 --> 01:09:55,840
yeah all this stuff is working so now

1590
01:09:55,840 --> 01:10:00,280
we're ready to exploit it

1591
01:10:05,760 --> 01:10:07,840
i'm going to do an rmx

1592
01:10:07,840 --> 01:10:10,640
sorry emacs

1593
01:10:11,840 --> 01:10:13,360
gdb

1594
01:10:13,360 --> 01:10:16,080
so emux gdb is a nice little wrapper it

1595
01:10:16,080 --> 01:10:17,679
attaches

1596
01:10:17,679 --> 01:10:20,480
a remote gdb server to any process

1597
01:10:20,480 --> 01:10:22,960
that's running we just call it we just

1598
01:10:22,960 --> 01:10:24,400
name the process

1599
01:10:24,400 --> 01:10:26,080
we know the process called webs for the

1600
01:10:26,080 --> 01:10:28,800
web server

1601
01:10:29,440 --> 01:10:31,360
we attach gdb

1602
01:10:31,360 --> 01:10:34,080
so to spin up a remote gdb server

1603
01:10:34,080 --> 01:10:37,760
attach it and then invoke gdb multi-arc

1604
01:10:37,760 --> 01:10:39,199
to

1605
01:10:39,199 --> 01:10:41,440
basically

1606
01:10:41,440 --> 01:10:43,280
get control of gdb

1607
01:10:43,280 --> 01:10:46,239
on on our side

1608
01:10:46,239 --> 01:10:47,760
we can now run

1609
01:10:47,760 --> 01:10:50,960
even gef commands like vm map it shows

1610
01:10:50,960 --> 01:10:54,800
you the virtual virtual memory

1611
01:10:57,600 --> 01:10:59,040
so this is the process that's running

1612
01:10:59,040 --> 01:11:02,000
user bin webs

1613
01:11:03,840 --> 01:11:08,120
and let me run the exploit

1614
01:11:19,600 --> 01:11:22,159
so exploit is basically a very long url

1615
01:11:22,159 --> 01:11:24,560
with number of a's

1616
01:11:24,560 --> 01:11:26,880
i'm going to pipe it to

1617
01:11:26,880 --> 01:11:29,600
netcat localhost

1618
01:11:29,600 --> 01:11:33,440
oh i need to continue this guy

1619
01:11:35,840 --> 01:11:39,120
to the forwarded port 80 i pipe it

1620
01:11:39,120 --> 01:11:41,679
and

1621
01:11:41,679 --> 01:11:42,960
the moment you do it you get a

1622
01:11:42,960 --> 01:11:45,120
segmentation fault in here

1623
01:11:45,120 --> 01:11:47,760
you get control of the program counter

1624
01:11:47,760 --> 01:11:50,400
as 4141 4140

1625
01:11:50,400 --> 01:11:52,719
the stack memory is corrupted so from

1626
01:11:52,719 --> 01:11:55,280
this point onwards you have you cannot

1627
01:11:55,280 --> 01:11:57,120
go and build your exploit you can like

1628
01:11:57,120 --> 01:11:59,760
launch webs again so this becomes your

1629
01:11:59,760 --> 01:12:01,520
testing grounds for

1630
01:12:01,520 --> 01:12:03,199
creating the exploit

1631
01:12:03,199 --> 01:12:05,120
the beauty is

1632
01:12:05,120 --> 01:12:08,640
the memory layout the kernel all the

1633
01:12:08,640 --> 01:12:12,239
settings are exactly the same

1634
01:12:12,239 --> 01:12:14,880
as the real ip camera so if you got an

1635
01:12:14,880 --> 01:12:18,000
exploit working on emux emulated ip

1636
01:12:18,000 --> 01:12:20,960
camera it will work as is

1637
01:12:20,960 --> 01:12:23,199
without modifying a single offset or a

1638
01:12:23,199 --> 01:12:26,080
single size parameter it will work as is

1639
01:12:26,080 --> 01:12:28,239
on a production ip camera i have tested

1640
01:12:28,239 --> 01:12:31,280
it with three of these ip cameras and it

1641
01:12:31,280 --> 01:12:35,280
works super super reliably

1642
01:12:35,280 --> 01:12:36,880
so that was

1643
01:12:36,880 --> 01:12:38,880
well i think i succeeded in my demo i'm

1644
01:12:38,880 --> 01:12:41,040
pretty glad i did because

1645
01:12:41,040 --> 01:12:43,600
i confess i was a shade nervous if it

1646
01:12:43,600 --> 01:12:45,840
blew up on the stage then it looked like

1647
01:12:45,840 --> 01:12:48,320
a fool but it didn't so the demo gods

1648
01:12:48,320 --> 01:12:51,840
took care of me

1649
01:12:53,360 --> 01:12:56,080
so let me wrap this up

1650
01:12:56,080 --> 01:12:57,760
all the goods that you want

1651
01:12:57,760 --> 01:13:01,679
are available on my github repo

1652
01:13:01,920 --> 01:13:04,560
my github user is the real sawmill

1653
01:13:04,560 --> 01:13:06,480
my twitter handle is the real sawmill my

1654
01:13:06,480 --> 01:13:08,719
facebook handle is the real sawmill

1655
01:13:08,719 --> 01:13:11,280
my linkedin handle is not the real so it

1656
01:13:11,280 --> 01:13:13,280
is somewhere

1657
01:13:13,280 --> 01:13:15,120
but you can grab this

1658
01:13:15,120 --> 01:13:17,120
from my github repo

1659
01:13:17,120 --> 01:13:19,920
follow my twitter id for announcements i

1660
01:13:19,920 --> 01:13:22,000
don't do political posts

1661
01:13:22,000 --> 01:13:25,520
i don't do anything but cyber security i

1662
01:13:25,520 --> 01:13:27,600
don't engage in debates

1663
01:13:27,600 --> 01:13:29,440
basically my twitter account is used

1664
01:13:29,440 --> 01:13:31,360
simply for announcements

1665
01:13:31,360 --> 01:13:33,199
so

1666
01:13:33,199 --> 01:13:35,360
low frequency low noise if you want to

1667
01:13:35,360 --> 01:13:38,159
catch the latest follow me

1668
01:13:38,159 --> 01:13:40,400
and

1669
01:13:40,400 --> 01:13:42,880
i thank you for your time and your

1670
01:13:42,880 --> 01:13:45,040
attention and your patience

1671
01:13:45,040 --> 01:13:48,000
i'm at your disposal for any questions

1672
01:13:48,000 --> 01:13:49,360
that you may have

1673
01:13:49,360 --> 01:13:51,040
and i don't know how the q a works but

1674
01:13:51,040 --> 01:13:52,320
i'll let

1675
01:13:52,320 --> 01:13:56,400
my dear friend jako moderate this

1676
01:13:56,400 --> 01:13:59,440
yes i already uh looked it up in the app

1677
01:13:59,440 --> 01:14:02,400
there's no uh open questions right now

1678
01:14:02,400 --> 01:14:04,640
okay uh in the app so i'm gonna see if

1679
01:14:04,640 --> 01:14:07,440
there are any questions in the room

1680
01:14:07,440 --> 01:14:08,960
yep

1681
01:14:08,960 --> 01:14:11,440
you have to speak up really loud

1682
01:14:11,440 --> 01:14:15,440
because he doesn't have the earpiece

1683
01:14:15,440 --> 01:14:17,199
okay he speaks so loud that he can hear

1684
01:14:17,199 --> 01:14:18,159
it

1685
01:14:18,159 --> 01:14:20,960
here no he doesn't ah okay

1686
01:14:20,960 --> 01:14:24,400
so i didn't check the rifle yet uh

1687
01:14:24,400 --> 01:14:26,080
i'm so sorry if you don't mind just

1688
01:14:26,080 --> 01:14:27,440
coming up here and asking that'll be

1689
01:14:27,440 --> 01:14:29,679
awesome right i didn't check the rapper

1690
01:14:29,679 --> 01:14:32,400
yet but i saw that you have quite some

1691
01:14:32,400 --> 01:14:34,880
routers already configured with e-moocs

1692
01:14:34,880 --> 01:14:37,120
like the now knight

1693
01:14:37,120 --> 01:14:40,080
or the archer c9 i guess

1694
01:14:40,080 --> 01:14:42,960
are they already on the repo available

1695
01:14:42,960 --> 01:14:45,360
for good question so not all the not all

1696
01:14:45,360 --> 01:14:47,120
the devices are available in the repo

1697
01:14:47,120 --> 01:14:48,880
only a few of them are

1698
01:14:48,880 --> 01:14:51,440
some of them i use for the training some

1699
01:14:51,440 --> 01:14:54,320
of them they it gets into a gray area

1700
01:14:54,320 --> 01:14:56,159
where these vendors will create problems

1701
01:14:56,159 --> 01:14:58,080
for me if i release it yeah but there's

1702
01:14:58,080 --> 01:15:00,800
nothing stopping you from getting your

1703
01:15:00,800 --> 01:15:02,800
own firmware image

1704
01:15:02,800 --> 01:15:04,880
and putting it on there if you see what

1705
01:15:04,880 --> 01:15:07,120
i mean yeah yeah so okay perfect thank

1706
01:15:07,120 --> 01:15:08,960
you you're welcome

1707
01:15:08,960 --> 01:15:10,480
it's kind of odd because i'm seeing

1708
01:15:10,480 --> 01:15:12,560
myself talk to barry on that big screen

1709
01:15:12,560 --> 01:15:14,960
over there like sorry i got distracted

1710
01:15:14,960 --> 01:15:16,719
for a moment like what the hell is going

1711
01:15:16,719 --> 01:15:18,800
on any more questions from the room

1712
01:15:18,800 --> 01:15:20,400
how can i be in two places at the same

1713
01:15:20,400 --> 01:15:22,400
time

1714
01:15:22,400 --> 01:15:24,480
so uh

1715
01:15:24,480 --> 01:15:26,080
somehow i want to thank you for your

1716
01:15:26,080 --> 01:15:29,480
brilliant talk

