1
00:00:06,960 --> 00:00:09,840
uh all right a quick background about me

2
00:00:09,840 --> 00:00:10,880
i think

3
00:00:10,880 --> 00:00:13,120
as already mentioned i run a couple of

4
00:00:13,120 --> 00:00:14,880
security conferences

5
00:00:14,880 --> 00:00:16,400
uh i uh

6
00:00:16,400 --> 00:00:18,640
i'm i'm an author of few of the open

7
00:00:18,640 --> 00:00:21,840
source uh uh software out there uh i'm

8
00:00:21,840 --> 00:00:24,400
gonna talk about the the exploity uh

9
00:00:24,400 --> 00:00:26,080
framework which is one of the latest

10
00:00:26,080 --> 00:00:28,800
ones that i've worked on and

11
00:00:28,800 --> 00:00:31,119
uh yeah and i'm i'm a trainer and

12
00:00:31,119 --> 00:00:32,719
speaker at uh

13
00:00:32,719 --> 00:00:35,680
various cyber security conferences

14
00:00:35,680 --> 00:00:38,239
so um uh

15
00:00:38,239 --> 00:00:41,760
let's run through uh a kind of a story

16
00:00:41,760 --> 00:00:44,960
uh on cyber security in general from the

17
00:00:44,960 --> 00:00:47,440
90s uh late 90s to

18
00:00:47,440 --> 00:00:49,200
uh uh

19
00:00:49,200 --> 00:00:51,120
to the last decade

20
00:00:51,120 --> 00:00:52,559
and uh

21
00:00:52,559 --> 00:00:54,079
what basically i'm going to be talking

22
00:00:54,079 --> 00:00:56,559
about is the the the difference in terms

23
00:00:56,559 --> 00:00:58,480
of how complex

24
00:00:58,480 --> 00:01:00,399
the the infrastructure and the

25
00:01:00,399 --> 00:01:02,719
technology was and as time progressed

26
00:01:02,719 --> 00:01:04,479
you know what are the things that

27
00:01:04,479 --> 00:01:05,680
came to be

28
00:01:05,680 --> 00:01:09,439
and where do we stand in terms of uh

29
00:01:09,439 --> 00:01:12,560
cyber security as a whole uh

30
00:01:12,560 --> 00:01:13,760
mostly from

31
00:01:13,760 --> 00:01:17,360
an enterprise uh perspective

32
00:01:17,360 --> 00:01:20,240
so let's start with the late uh 20th

33
00:01:20,240 --> 00:01:22,400
century there was a young and dynamic

34
00:01:22,400 --> 00:01:24,640
cyber security professional who was

35
00:01:24,640 --> 00:01:26,400
tasked with the

36
00:01:26,400 --> 00:01:29,520
uh keeping uh his enterprise or

37
00:01:29,520 --> 00:01:32,240
employers infrastructure safe

38
00:01:32,240 --> 00:01:34,320
you know in the 90s the the

39
00:01:34,320 --> 00:01:36,560
infrastructure or it infrastructure as

40
00:01:36,560 --> 00:01:38,400
you would call it would typically mean

41
00:01:38,400 --> 00:01:39,920
something like

42
00:01:39,920 --> 00:01:42,079
this where you have servers

43
00:01:42,079 --> 00:01:43,920
you have networking equipment you have

44
00:01:43,920 --> 00:01:45,600
firewalls and then you have client

45
00:01:45,600 --> 00:01:48,559
machines and

46
00:01:48,720 --> 00:01:51,520
and and pretty much pretty much that

47
00:01:51,520 --> 00:01:52,720
and

48
00:01:52,720 --> 00:01:54,880
you know bad guys and researchers at the

49
00:01:54,880 --> 00:01:56,960
same time were coming up with

50
00:01:56,960 --> 00:01:59,200
a lot of security vulnerabilities

51
00:01:59,200 --> 00:02:00,640
specifically around

52
00:02:00,640 --> 00:02:03,759
native uh applications servers uh as

53
00:02:03,759 --> 00:02:05,439
well as uh

54
00:02:05,439 --> 00:02:07,680
web applications

55
00:02:07,680 --> 00:02:10,878
so this guy he had his fair share of

56
00:02:10,878 --> 00:02:13,520
nightmares but as time progressed as we

57
00:02:13,520 --> 00:02:14,879
approached the

58
00:02:14,879 --> 00:02:18,000
the the 21st century we were in terms of

59
00:02:18,000 --> 00:02:18,830
you know

60
00:02:18,830 --> 00:02:20,879
[Music]

61
00:02:20,879 --> 00:02:24,720
we we had knowledge of uh uh software

62
00:02:24,720 --> 00:02:25,840
security

63
00:02:25,840 --> 00:02:28,239
most specifically around uh you know

64
00:02:28,239 --> 00:02:30,239
application security web application

65
00:02:30,239 --> 00:02:32,640
security native application security

66
00:02:32,640 --> 00:02:34,080
there was plethora of information

67
00:02:34,080 --> 00:02:37,040
available on the internet about you know

68
00:02:37,040 --> 00:02:38,000
uh

69
00:02:38,000 --> 00:02:39,760
how do you go about securing writing

70
00:02:39,760 --> 00:02:42,879
secure code for web applications for in

71
00:02:42,879 --> 00:02:44,959
native applications and so on and so

72
00:02:44,959 --> 00:02:47,440
forth so we felt uh

73
00:02:47,440 --> 00:02:50,400
pretty secured at that time

74
00:02:50,400 --> 00:02:54,239
fast forward a bit to the 21st century

75
00:02:54,239 --> 00:02:56,400
the same guy well not so young

76
00:02:56,400 --> 00:02:59,680
was again tasked with

77
00:02:59,680 --> 00:03:00,959
securing

78
00:03:00,959 --> 00:03:02,840
his employers

79
00:03:02,840 --> 00:03:04,400
infrastructure

80
00:03:04,400 --> 00:03:08,080
which typically uh meant obviously

81
00:03:08,080 --> 00:03:10,000
we still have the typical it

82
00:03:10,000 --> 00:03:12,159
infrastructure which includes

83
00:03:12,159 --> 00:03:15,840
servers you know networking equipment

84
00:03:15,840 --> 00:03:16,959
client

85
00:03:16,959 --> 00:03:19,840
machines desktops laptops

86
00:03:19,840 --> 00:03:21,120
and but as

87
00:03:21,120 --> 00:03:22,959
uh time progressed

88
00:03:22,959 --> 00:03:24,879
people started getting these interesting

89
00:03:24,879 --> 00:03:27,440
devices with them to office

90
00:03:27,440 --> 00:03:29,440
and they were these were pretty powerful

91
00:03:29,440 --> 00:03:31,760
and pretty smart

92
00:03:31,760 --> 00:03:33,680
that you know that gave

93
00:03:33,680 --> 00:03:36,480
some nightmares to our friend here and

94
00:03:36,480 --> 00:03:39,040
then the industry came up with byod

95
00:03:39,040 --> 00:03:42,080
policies and this and that and by this

96
00:03:42,080 --> 00:03:43,920
time you know these handheld devices

97
00:03:43,920 --> 00:03:45,840
were

98
00:03:45,840 --> 00:03:48,480
pretty powerful and as powerful as

99
00:03:48,480 --> 00:03:50,799
a desktop or a

100
00:03:50,799 --> 00:03:53,200
laptop

101
00:03:53,680 --> 00:03:56,480
again as time progressed

102
00:03:56,480 --> 00:04:00,560
this thing called cloud came and

103
00:04:00,560 --> 00:04:03,840
we had cloud providers like aws google

104
00:04:03,840 --> 00:04:06,239
and they started enterprises started

105
00:04:06,239 --> 00:04:08,239
thinking instead of managing everything

106
00:04:08,239 --> 00:04:10,159
in our infrastructure

107
00:04:10,159 --> 00:04:12,879
why don't we push some of the

108
00:04:12,879 --> 00:04:15,360
the data as well as processing over the

109
00:04:15,360 --> 00:04:17,120
internet to the cloud that would save us

110
00:04:17,120 --> 00:04:19,279
you know a lot of work in terms of

111
00:04:19,279 --> 00:04:21,440
managing the infrastructure and more

112
00:04:21,440 --> 00:04:24,000
importantly securing the infrastructure

113
00:04:24,000 --> 00:04:25,919
so as time progressed

114
00:04:25,919 --> 00:04:29,680
a lot of data went to the cloud

115
00:04:29,680 --> 00:04:30,960
uh but

116
00:04:30,960 --> 00:04:33,120
i mean it was good for the enterprise

117
00:04:33,120 --> 00:04:34,479
but it was not

118
00:04:34,479 --> 00:04:36,479
too good for our friend here because

119
00:04:36,479 --> 00:04:39,120
then people started using cloud for

120
00:04:39,120 --> 00:04:41,120
uh within the enterprise for a lot of

121
00:04:41,120 --> 00:04:43,360
different things you know and that gave

122
00:04:43,360 --> 00:04:44,560
birth to

123
00:04:44,560 --> 00:04:47,120
shadow i.t as we see it you know now

124
00:04:47,120 --> 00:04:49,120
if you ask an enterprise what is your

125
00:04:49,120 --> 00:04:51,520
footprint over the internet

126
00:04:51,520 --> 00:04:52,560
that is

127
00:04:52,560 --> 00:04:54,800
in itself one of the

128
00:04:54,800 --> 00:04:56,960
service streams in cyber security to

129
00:04:56,960 --> 00:04:59,840
identify what is the footprint

130
00:04:59,840 --> 00:05:01,280
across

131
00:05:01,280 --> 00:05:02,880
the internet for

132
00:05:02,880 --> 00:05:04,400
a specific

133
00:05:04,400 --> 00:05:06,560
enterprise

134
00:05:06,560 --> 00:05:08,560
but then

135
00:05:08,560 --> 00:05:12,160
more specifically in this uh the last

136
00:05:12,160 --> 00:05:14,160
decade

137
00:05:14,160 --> 00:05:16,080
uh

138
00:05:16,080 --> 00:05:17,120
lot of

139
00:05:17,120 --> 00:05:20,479
innovation happened in terms of

140
00:05:20,479 --> 00:05:22,800
hardware so the hardware became

141
00:05:22,800 --> 00:05:26,080
accessible more specifically after

142
00:05:26,080 --> 00:05:27,840
the uh

143
00:05:27,840 --> 00:05:29,840
after the mobile smartphones you know

144
00:05:29,840 --> 00:05:31,280
became mainstream

145
00:05:31,280 --> 00:05:32,240
uh

146
00:05:32,240 --> 00:05:34,400
people started creating cheap hardware

147
00:05:34,400 --> 00:05:37,039
so so what happened was a lot of people

148
00:05:37,039 --> 00:05:40,880
could prototype on these hardware and

149
00:05:40,880 --> 00:05:43,039
create solutions which we had never seen

150
00:05:43,039 --> 00:05:44,720
before you know think about smart

151
00:05:44,720 --> 00:05:46,479
toothbrush

152
00:05:46,479 --> 00:05:47,840
i don't see a use case for smart

153
00:05:47,840 --> 00:05:49,280
toothbrush but

154
00:05:49,280 --> 00:05:50,080
it is

155
00:05:50,080 --> 00:05:52,800
inevitable and people are going to use

156
00:05:52,800 --> 00:05:55,520
everything today is just going to be

157
00:05:55,520 --> 00:05:57,039
smart

158
00:05:57,039 --> 00:05:58,880
so when you talk about

159
00:05:58,880 --> 00:06:00,000
even

160
00:06:00,000 --> 00:06:02,639
enterprise security it's no more about

161
00:06:02,639 --> 00:06:05,120
you know looking at server security

162
00:06:05,120 --> 00:06:08,240
looking at networking equipment or

163
00:06:08,240 --> 00:06:10,880
router security we've gone much beyond

164
00:06:10,880 --> 00:06:13,280
that everything is connected

165
00:06:13,280 --> 00:06:15,360
i mean you can do an exercise when you

166
00:06:15,360 --> 00:06:18,319
go back or go about your day just look

167
00:06:18,319 --> 00:06:20,160
at things which are automated around you

168
00:06:20,160 --> 00:06:22,240
even in your home and i'm sure you'll be

169
00:06:22,240 --> 00:06:24,479
surprised to look at the the amount of

170
00:06:24,479 --> 00:06:26,240
automation and the amount of devices

171
00:06:26,240 --> 00:06:27,840
that you have

172
00:06:27,840 --> 00:06:30,000
around you and this is

173
00:06:30,000 --> 00:06:32,639
not going to stop

174
00:06:32,639 --> 00:06:35,039
everything is automated fine they

175
00:06:35,039 --> 00:06:36,639
eventually you know

176
00:06:36,639 --> 00:06:39,199
these machines are going to get inside

177
00:06:39,199 --> 00:06:40,880
humans as well

178
00:06:40,880 --> 00:06:42,240
so

179
00:06:42,240 --> 00:06:44,240
the challenge here

180
00:06:44,240 --> 00:06:47,919
is really about a identifying

181
00:06:47,919 --> 00:06:52,800
these devices which are in an enterprise

182
00:06:52,800 --> 00:06:54,960
and be looking at vulnerabilities on

183
00:06:54,960 --> 00:06:57,599
these devices so if you compare

184
00:06:57,599 --> 00:06:59,840
devices which are used

185
00:06:59,840 --> 00:07:02,160
in for critical operations more

186
00:07:02,160 --> 00:07:04,319
specifically around

187
00:07:04,319 --> 00:07:05,520
medical

188
00:07:05,520 --> 00:07:08,240
critical infrastructure automotive or

189
00:07:08,240 --> 00:07:12,319
transportation as a whole aviation

190
00:07:12,319 --> 00:07:14,800
it's no more about you know

191
00:07:14,800 --> 00:07:16,639
doing these james bond

192
00:07:16,639 --> 00:07:19,039
style hacks and you know getting

193
00:07:19,039 --> 00:07:21,680
persistent access to a desktop

194
00:07:21,680 --> 00:07:24,080
exploiting a native application

195
00:07:24,080 --> 00:07:26,880
with these devices placed in critical

196
00:07:26,880 --> 00:07:29,680
areas doing critical operation all

197
00:07:29,680 --> 00:07:31,759
someone needs is you know

198
00:07:31,759 --> 00:07:33,360
uh uh

199
00:07:33,360 --> 00:07:35,360
a vulnerability which can cause

200
00:07:35,360 --> 00:07:39,360
malfunction on the device so that can

201
00:07:40,319 --> 00:07:42,560
just plainly let's say denial of service

202
00:07:42,560 --> 00:07:45,840
that's enough to cause damage and this

203
00:07:45,840 --> 00:07:48,000
damage you know is is

204
00:07:48,000 --> 00:07:49,039
uh

205
00:07:49,039 --> 00:07:51,680
way more worse than uh the damage that

206
00:07:51,680 --> 00:07:54,879
can be caused on by somebody hacking

207
00:07:54,879 --> 00:07:57,360
through your browser into your laptop

208
00:07:57,360 --> 00:07:59,520
and stealing data right we're talking

209
00:07:59,520 --> 00:08:00,479
about

210
00:08:00,479 --> 00:08:02,319
physical damage here

211
00:08:02,319 --> 00:08:04,720
lost to life as well as

212
00:08:04,720 --> 00:08:07,280
property

213
00:08:07,919 --> 00:08:10,639
so yeah so uh he started having

214
00:08:10,639 --> 00:08:14,000
nightmares again the only uh

215
00:08:14,000 --> 00:08:15,680
thing that changed was the the

216
00:08:15,680 --> 00:08:19,599
nightmares also upgraded themselves

217
00:08:19,599 --> 00:08:23,520
so as far as the the uh the new

218
00:08:23,520 --> 00:08:27,520
technology is concerned iot

219
00:08:27,520 --> 00:08:28,560
ai

220
00:08:28,560 --> 00:08:29,919
hardware

221
00:08:29,919 --> 00:08:31,759
we are not there yet

222
00:08:31,759 --> 00:08:34,479
there are no

223
00:08:35,440 --> 00:08:36,958
specific

224
00:08:36,958 --> 00:08:39,200
guidelines or standards there are

225
00:08:39,200 --> 00:08:41,599
standards which are coming up but there

226
00:08:41,599 --> 00:08:42,479
are

227
00:08:42,479 --> 00:08:45,040
there are no tried and tested standards

228
00:08:45,040 --> 00:08:47,760
as of now which can guide

229
00:08:47,760 --> 00:08:50,560
hardware manufacturers across various

230
00:08:50,560 --> 00:08:52,959
verticals specifically from cyber

231
00:08:52,959 --> 00:08:55,200
security perspective there are standards

232
00:08:55,200 --> 00:08:57,680
available which talk about functional

233
00:08:57,680 --> 00:08:58,720
safety

234
00:08:58,720 --> 00:09:00,080
for medical

235
00:09:00,080 --> 00:09:03,600
for automotive but there are no

236
00:09:03,600 --> 00:09:06,000
mature standards which talk specifically

237
00:09:06,000 --> 00:09:06,959
about

238
00:09:06,959 --> 00:09:08,959
cyber security so i think it's going to

239
00:09:08,959 --> 00:09:11,120
probably take at least

240
00:09:11,120 --> 00:09:14,480
five years or a decade

241
00:09:14,480 --> 00:09:15,760
that these

242
00:09:15,760 --> 00:09:17,279
these standards will

243
00:09:17,279 --> 00:09:19,760
mature

244
00:09:21,279 --> 00:09:24,560
and so let's look at what the the the

245
00:09:24,560 --> 00:09:26,320
challenge is so when when we

246
00:09:26,320 --> 00:09:28,240
specifically talk about internet of

247
00:09:28,240 --> 00:09:29,600
things

248
00:09:29,600 --> 00:09:32,880
it is not uh a single line of technology

249
00:09:32,880 --> 00:09:35,120
or not a single technology that you can

250
00:09:35,120 --> 00:09:38,320
secure against because

251
00:09:39,440 --> 00:09:42,320
if you look at iot as a whole it is a

252
00:09:42,320 --> 00:09:44,320
mix of various

253
00:09:44,320 --> 00:09:46,560
technologies we have

254
00:09:46,560 --> 00:09:48,160
the hardware

255
00:09:48,160 --> 00:09:49,360
we have

256
00:09:49,360 --> 00:09:51,760
rf communication

257
00:09:51,760 --> 00:09:52,880
we have

258
00:09:52,880 --> 00:09:55,360
ai we have cloud

259
00:09:55,360 --> 00:09:57,600
we have mobile applications so all of

260
00:09:57,600 --> 00:09:59,680
these combined so if you want to create

261
00:09:59,680 --> 00:10:01,440
an iot product today

262
00:10:01,440 --> 00:10:04,079
you probably need to implement all of

263
00:10:04,079 --> 00:10:05,519
these things

264
00:10:05,519 --> 00:10:07,360
implementing is still

265
00:10:07,360 --> 00:10:08,399
not

266
00:10:08,399 --> 00:10:10,560
as difficult because

267
00:10:10,560 --> 00:10:13,040
you typically will take hardware from

268
00:10:13,040 --> 00:10:15,200
you know a hardware manufacturer

269
00:10:15,200 --> 00:10:17,600
there are companies who will design uh

270
00:10:17,600 --> 00:10:20,959
the the hardware for you and your job is

271
00:10:20,959 --> 00:10:22,079
to

272
00:10:22,079 --> 00:10:24,240
just put your firmware on the device

273
00:10:24,240 --> 00:10:27,360
which is your business logic

274
00:10:27,360 --> 00:10:30,480
there are frameworks available there

275
00:10:30,480 --> 00:10:32,720
where you can deploy your

276
00:10:32,720 --> 00:10:34,800
application on the cloud quickly

277
00:10:34,800 --> 00:10:36,959
um you can create your mobile

278
00:10:36,959 --> 00:10:38,560
application which can communicate to the

279
00:10:38,560 --> 00:10:41,040
cloud and the device so all of that is

280
00:10:41,040 --> 00:10:43,519
not challenging the the problem is the

281
00:10:43,519 --> 00:10:46,480
attack surface is really huge

282
00:10:46,480 --> 00:10:50,000
and when you are going to pen test or do

283
00:10:50,000 --> 00:10:52,800
risk assessment or security assessment

284
00:10:52,800 --> 00:10:55,680
for uh even a single product let's take

285
00:10:55,680 --> 00:10:58,000
a very simple example

286
00:10:58,000 --> 00:11:00,640
uh your fitness watch smart toothbrush

287
00:11:00,640 --> 00:11:03,200
whatever it has hardware it has firmware

288
00:11:03,200 --> 00:11:06,079
it has uh bluetooth communication it has

289
00:11:06,079 --> 00:11:08,959
a mobile application it also has uh

290
00:11:08,959 --> 00:11:11,680
cloud application and cloud analytics

291
00:11:11,680 --> 00:11:14,800
how do you secure this i mean i

292
00:11:14,800 --> 00:11:17,519
i have never found a single person who

293
00:11:17,519 --> 00:11:18,880
can

294
00:11:18,880 --> 00:11:20,480
effectively

295
00:11:20,480 --> 00:11:23,279
do a security assessment for one product

296
00:11:23,279 --> 00:11:25,600
because you know you will you will have

297
00:11:25,600 --> 00:11:27,760
experts for cloud who do not know

298
00:11:27,760 --> 00:11:29,839
anything about firmware you will have

299
00:11:29,839 --> 00:11:32,480
experts for hardware who have no clue

300
00:11:32,480 --> 00:11:33,279
about

301
00:11:33,279 --> 00:11:37,040
cloud and mobile application

302
00:11:37,040 --> 00:11:37,760
the

303
00:11:37,760 --> 00:11:40,000
the second issue is supply chain now all

304
00:11:40,000 --> 00:11:42,399
of these things are through third party

305
00:11:42,399 --> 00:11:45,200
there's no uh vendor as such that can

306
00:11:45,200 --> 00:11:47,440
create a product from grounds up you

307
00:11:47,440 --> 00:11:49,600
know

308
00:11:50,079 --> 00:11:52,480
simple example automotive right you get

309
00:11:52,480 --> 00:11:54,000
parts from everywhere you assemble the

310
00:11:54,000 --> 00:11:56,160
parts you create the design or there'd

311
00:11:56,160 --> 00:11:58,320
be any product for that matter

312
00:11:58,320 --> 00:12:00,800
so there is there is a supply chain when

313
00:12:00,800 --> 00:12:01,839
you are

314
00:12:01,839 --> 00:12:04,160
when you are creating a product on your

315
00:12:04,160 --> 00:12:05,600
own

316
00:12:05,600 --> 00:12:07,440
uh

317
00:12:07,440 --> 00:12:08,560
what is the

318
00:12:08,560 --> 00:12:11,680
what are the security repercussions of

319
00:12:11,680 --> 00:12:14,160
the the the third party components that

320
00:12:14,160 --> 00:12:15,760
you are putting

321
00:12:15,760 --> 00:12:17,680
it's just a contract between you and

322
00:12:17,680 --> 00:12:20,000
third party vendor

323
00:12:20,000 --> 00:12:22,000
at most what you can do is

324
00:12:22,000 --> 00:12:25,360
uh force them to get uh risk assessment

325
00:12:25,360 --> 00:12:27,600
and security assessment done which

326
00:12:27,600 --> 00:12:29,760
uh which is not at least enforceable by

327
00:12:29,760 --> 00:12:32,320
law so yeah so if you want to

328
00:12:32,320 --> 00:12:35,040
do rapid prototyping you want to reach

329
00:12:35,040 --> 00:12:38,079
the market fast you will uh you know

330
00:12:38,079 --> 00:12:40,480
bypass some of the steps in your

331
00:12:40,480 --> 00:12:44,399
software development life cycle

332
00:12:46,240 --> 00:12:48,800
then is regulation and and compliance as

333
00:12:48,800 --> 00:12:50,800
of now

334
00:12:50,800 --> 00:12:54,000
there are not many regulations and the

335
00:12:54,000 --> 00:12:55,760
regulations are coming up for example

336
00:12:55,760 --> 00:12:58,560
you have the california iot

337
00:12:58,560 --> 00:13:01,440
uh security act you have

338
00:13:01,440 --> 00:13:04,639
etsy that has come up with

339
00:13:04,639 --> 00:13:08,000
a standard for uh consumer iot

340
00:13:08,000 --> 00:13:10,639
you have i think i forgot the the number

341
00:13:10,639 --> 00:13:12,639
but there is a standard coming up for

342
00:13:12,639 --> 00:13:14,959
automotive as well and there are a

343
00:13:14,959 --> 00:13:19,519
couple of iso standards uh 27400 27402

344
00:13:19,519 --> 00:13:20,880
for

345
00:13:20,880 --> 00:13:22,959
iot security and privacy but they're

346
00:13:22,959 --> 00:13:25,360
still under the works

347
00:13:25,360 --> 00:13:26,079
but

348
00:13:26,079 --> 00:13:28,079
as soon as they come they're going to

349
00:13:28,079 --> 00:13:32,160
you know drive at least manufacturers to

350
00:13:32,160 --> 00:13:36,079
get themselves uh verified against these

351
00:13:36,079 --> 00:13:39,040
compliance standards

352
00:13:39,040 --> 00:13:40,399
and then there are obviously you know

353
00:13:40,399 --> 00:13:42,639
standard threats and uh risks like

354
00:13:42,639 --> 00:13:45,120
weaponized malware we've we are already

355
00:13:45,120 --> 00:13:48,480
seeing a lot of malware specific to iot

356
00:13:48,480 --> 00:13:51,120
i wouldn't call it an iot iot malware

357
00:13:51,120 --> 00:13:53,199
because they are pretty standard malware

358
00:13:53,199 --> 00:13:54,639
targeting

359
00:13:54,639 --> 00:13:57,040
standard devices like routers

360
00:13:57,040 --> 00:13:59,199
and and cameras we haven't seen

361
00:13:59,199 --> 00:14:02,720
sophisticated malware as of now which

362
00:14:02,720 --> 00:14:04,240
which attacks

363
00:14:04,240 --> 00:14:05,760
embedded

364
00:14:05,760 --> 00:14:11,519
os or bare-bone firmware yet but i mean

365
00:14:11,920 --> 00:14:14,320
again that is inevitable as more devices

366
00:14:14,320 --> 00:14:16,639
will come people will find more ways to

367
00:14:16,639 --> 00:14:18,639
exploit these

368
00:14:18,639 --> 00:14:20,639
devices

369
00:14:20,639 --> 00:14:21,760
and

370
00:14:21,760 --> 00:14:25,279
on one of the challenges in these

371
00:14:25,279 --> 00:14:27,519
this

372
00:14:27,680 --> 00:14:30,160
in the iot technology is that if the

373
00:14:30,160 --> 00:14:32,079
vulnerability is in the software you can

374
00:14:32,079 --> 00:14:34,240
patch it but if the vulnerability is in

375
00:14:34,240 --> 00:14:37,040
the hardware then there is absolutely

376
00:14:37,040 --> 00:14:40,000
practically no way of patching that so

377
00:14:40,000 --> 00:14:41,920
what what the vendor needs to do is do a

378
00:14:41,920 --> 00:14:45,040
product recall which itself is is

379
00:14:45,040 --> 00:14:47,360
a huge cost to

380
00:14:47,360 --> 00:14:49,360
the vendor so if you are a startup or

381
00:14:49,360 --> 00:14:51,760
even a funded startup and you have to do

382
00:14:51,760 --> 00:14:53,680
a product recall of millions of products

383
00:14:53,680 --> 00:14:58,000
deployed across the world i think uh

384
00:14:58,000 --> 00:14:59,120
you will be

385
00:14:59,120 --> 00:15:00,720
you'll be pretty much shutting down your

386
00:15:00,720 --> 00:15:03,600
shop the next day

387
00:15:05,199 --> 00:15:06,560
all right so

388
00:15:06,560 --> 00:15:10,880
we also learned the hard way uh as in

389
00:15:10,880 --> 00:15:13,839
we started looking at iot security uh

390
00:15:13,839 --> 00:15:16,800
somewhere around the early uh uh

391
00:15:16,800 --> 00:15:18,079
last decade

392
00:15:18,079 --> 00:15:19,839
and you know we got really interested

393
00:15:19,839 --> 00:15:22,079
with all these gadgets and we started

394
00:15:22,079 --> 00:15:25,120
researching on uh embedded security iot

395
00:15:25,120 --> 00:15:27,040
security

396
00:15:27,040 --> 00:15:28,720
and we've been doing software security

397
00:15:28,720 --> 00:15:30,639
for a long time for our customers so we

398
00:15:30,639 --> 00:15:32,560
thought like hey we are like a bunch of

399
00:15:32,560 --> 00:15:33,920
hackers we can

400
00:15:33,920 --> 00:15:36,240
uh you know we can hack anything just

401
00:15:36,240 --> 00:15:37,680
throw that

402
00:15:37,680 --> 00:15:38,839
at

403
00:15:38,839 --> 00:15:41,600
us the only only only difference is

404
00:15:41,600 --> 00:15:43,680
there the the target is changing right

405
00:15:43,680 --> 00:15:46,639
the approach on how you go about looking

406
00:15:46,639 --> 00:15:48,240
at

407
00:15:48,240 --> 00:15:49,759
doing threat modeling and looking at

408
00:15:49,759 --> 00:15:51,600
ways to bypass

409
00:15:51,600 --> 00:15:53,680
certain security measures

410
00:15:53,680 --> 00:15:54,800
more or less

411
00:15:54,800 --> 00:15:57,519
remains the same

412
00:15:57,519 --> 00:16:00,079
i mean that that's true to an uh

413
00:16:00,079 --> 00:16:00,800
uh

414
00:16:00,800 --> 00:16:02,880
uh

415
00:16:02,880 --> 00:16:05,519
to some extent and you know we were like

416
00:16:05,519 --> 00:16:08,079
just throw it throw anything at us and

417
00:16:08,079 --> 00:16:10,560
we're going to beat the crap out of it

418
00:16:10,560 --> 00:16:12,800
but turns out when we got

419
00:16:12,800 --> 00:16:13,759
into

420
00:16:13,759 --> 00:16:16,000
iot pen testing when we started doing

421
00:16:16,000 --> 00:16:18,720
pen testing for customers from one

422
00:16:18,720 --> 00:16:20,720
product to another

423
00:16:20,720 --> 00:16:22,959
this is what happened effectively

424
00:16:22,959 --> 00:16:26,000
for every product for every

425
00:16:26,000 --> 00:16:27,600
component of

426
00:16:27,600 --> 00:16:30,480
the product there is a separate tool

427
00:16:30,480 --> 00:16:32,639
hardware as well as

428
00:16:32,639 --> 00:16:36,480
software that you need to use and the

429
00:16:36,480 --> 00:16:39,199
interesting aspect is that there are no

430
00:16:39,199 --> 00:16:41,040
standardized commercial solutions that

431
00:16:41,040 --> 00:16:42,639
can help you with

432
00:16:42,639 --> 00:16:43,839
this

433
00:16:43,839 --> 00:16:46,880
coming back to even our

434
00:16:46,880 --> 00:16:48,800
example of a small

435
00:16:48,800 --> 00:16:50,880
smart toothbrush or

436
00:16:50,880 --> 00:16:53,440
fitness band you still need something

437
00:16:53,440 --> 00:16:55,759
where you can effectively analyze

438
00:16:55,759 --> 00:16:58,079
ble communication you need something

439
00:16:58,079 --> 00:17:00,079
where you can access the

440
00:17:00,079 --> 00:17:01,600
the hardware

441
00:17:01,600 --> 00:17:02,560
and then

442
00:17:02,560 --> 00:17:04,400
if it's using any other if the mobile

443
00:17:04,400 --> 00:17:07,039
application is using any other new iot

444
00:17:07,039 --> 00:17:09,439
protocols you would need something uh

445
00:17:09,439 --> 00:17:12,640
else so what we did was and and then

446
00:17:12,640 --> 00:17:14,480
when we when you move from one product

447
00:17:14,480 --> 00:17:17,039
to another so you were doing ble here

448
00:17:17,039 --> 00:17:19,520
the next product that you see has zigbee

449
00:17:19,520 --> 00:17:21,439
the next product that you move has

450
00:17:21,439 --> 00:17:24,160
z-wave has wireless heart has something

451
00:17:24,160 --> 00:17:26,319
else the hardware is different obviously

452
00:17:26,319 --> 00:17:28,000
the chipset will be different

453
00:17:28,000 --> 00:17:28,960
uh

454
00:17:28,960 --> 00:17:30,960
it will be implementing some industrial

455
00:17:30,960 --> 00:17:32,720
iot protocols something will be

456
00:17:32,720 --> 00:17:35,120
implementing medical protocols something

457
00:17:35,120 --> 00:17:37,520
will be implementing standard

458
00:17:37,520 --> 00:17:40,160
iot protocols and

459
00:17:40,160 --> 00:17:41,840
the problem is then you look at open

460
00:17:41,840 --> 00:17:43,360
source

461
00:17:43,360 --> 00:17:45,600
there are hobbyist

462
00:17:45,600 --> 00:17:47,679
open source software projects as well as

463
00:17:47,679 --> 00:17:51,039
hardware projects available

464
00:17:51,039 --> 00:17:52,400
but when you

465
00:17:52,400 --> 00:17:54,880
get into a security assessment what

466
00:17:54,880 --> 00:17:56,240
happens is you

467
00:17:56,240 --> 00:17:58,720
end up basically

468
00:17:58,720 --> 00:18:02,080
working on these uh open source

469
00:18:02,080 --> 00:18:03,760
tools

470
00:18:03,760 --> 00:18:05,760
and at times we were really frustrated

471
00:18:05,760 --> 00:18:08,320
that we started everything uh from

472
00:18:08,320 --> 00:18:11,760
scratch or we ended up changing a lot of

473
00:18:11,760 --> 00:18:13,760
things in the open source hardware

474
00:18:13,760 --> 00:18:16,720
creating small small

475
00:18:16,720 --> 00:18:19,520
hardware tools for specific

476
00:18:19,520 --> 00:18:22,080
jobs and

477
00:18:22,960 --> 00:18:25,760
yeah so we were spending a lot of time

478
00:18:25,760 --> 00:18:26,640
to

479
00:18:26,640 --> 00:18:30,080
learn how to use a specific technology

480
00:18:30,080 --> 00:18:32,240
to learn a specific tool which we are

481
00:18:32,240 --> 00:18:33,919
not sure whether we are going to use in

482
00:18:33,919 --> 00:18:36,480
the next security assessment

483
00:18:36,480 --> 00:18:38,880
or not

484
00:18:39,280 --> 00:18:41,679
again open source tools we ended up

485
00:18:41,679 --> 00:18:45,280
fixing a lot of bugs in those tools

486
00:18:45,280 --> 00:18:47,200
customizing them to our requirement or

487
00:18:47,200 --> 00:18:49,919
completely scraping them and

488
00:18:49,919 --> 00:18:51,760
writing our own

489
00:18:51,760 --> 00:18:54,160
scripts

490
00:18:55,520 --> 00:18:57,200
so

491
00:18:57,200 --> 00:19:00,960
and we did there this for a few uh a few

492
00:19:00,960 --> 00:19:02,799
projects and then we realized that you

493
00:19:02,799 --> 00:19:04,720
know this is not the way in which you

494
00:19:04,720 --> 00:19:06,080
can do a

495
00:19:06,080 --> 00:19:07,280
structured

496
00:19:07,280 --> 00:19:08,080
uh

497
00:19:08,080 --> 00:19:10,400
process-based security assessment you

498
00:19:10,400 --> 00:19:11,200
need

499
00:19:11,200 --> 00:19:13,440
some automation so that

500
00:19:13,440 --> 00:19:16,160
the researchers can focus more time on

501
00:19:16,160 --> 00:19:18,480
actual analysis rather than you know

502
00:19:18,480 --> 00:19:21,200
fixing uh issues and making things work

503
00:19:21,200 --> 00:19:22,960
like you will be

504
00:19:22,960 --> 00:19:25,120
let's say you have a security assessment

505
00:19:25,120 --> 00:19:26,960
of two weeks out of those two weeks one

506
00:19:26,960 --> 00:19:28,720
and a half weeks you're only trying to

507
00:19:28,720 --> 00:19:30,880
figure out how do i how do i uh

508
00:19:30,880 --> 00:19:33,120
communicate with

509
00:19:33,120 --> 00:19:36,480
this mobile phone over 5g and plus there

510
00:19:36,480 --> 00:19:38,080
are

511
00:19:38,080 --> 00:19:40,320
you know some

512
00:19:40,320 --> 00:19:42,799
new iot protocols which are being used

513
00:19:42,799 --> 00:19:45,039
within the device so it just just

514
00:19:45,039 --> 00:19:48,559
doesn't make sense it's not scalable

515
00:19:48,559 --> 00:19:51,120
so basically what we're looking at is to

516
00:19:51,120 --> 00:19:53,840
see if there is

517
00:19:53,919 --> 00:19:55,760
a swiss army knife

518
00:19:55,760 --> 00:19:58,240
that is available or is it possible to

519
00:19:58,240 --> 00:20:00,960
create a swiss army knife for

520
00:20:00,960 --> 00:20:01,919
iot

521
00:20:01,919 --> 00:20:04,080
security assessment

522
00:20:04,080 --> 00:20:05,760
we still not there

523
00:20:05,760 --> 00:20:07,440
but

524
00:20:07,440 --> 00:20:11,200
we looked at a lot of things and every

525
00:20:11,200 --> 00:20:14,720
every tool has their own

526
00:20:14,720 --> 00:20:17,120
set of

527
00:20:18,159 --> 00:20:21,600
use cases so and you know combining all

528
00:20:21,600 --> 00:20:22,559
of them

529
00:20:22,559 --> 00:20:23,760
you know

530
00:20:23,760 --> 00:20:25,919
would be more of a hacky job

531
00:20:25,919 --> 00:20:28,000
where you have a web front end and then

532
00:20:28,000 --> 00:20:30,000
you're running all these tools to do

533
00:20:30,000 --> 00:20:31,760
different things which have different

534
00:20:31,760 --> 00:20:34,000
output just doesn't make any sense so

535
00:20:34,000 --> 00:20:37,280
then we started working on uh

536
00:20:37,280 --> 00:20:39,280
the exploitative framework with the same

537
00:20:39,280 --> 00:20:41,840
idea that you know it should have wide

538
00:20:41,840 --> 00:20:44,159
coverage in terms of

539
00:20:44,159 --> 00:20:47,280
different protocols that are used in

540
00:20:47,280 --> 00:20:48,559
different

541
00:20:48,559 --> 00:20:50,640
industries or verticals

542
00:20:50,640 --> 00:20:53,039
and all of this should be

543
00:20:53,039 --> 00:20:54,559
through a single

544
00:20:54,559 --> 00:20:57,360
interface whether it is a

545
00:20:57,360 --> 00:20:59,600
radio communication whether it is

546
00:20:59,600 --> 00:21:01,679
communicating with the hardware or

547
00:21:01,679 --> 00:21:03,760
whether it is communicating over the

548
00:21:03,760 --> 00:21:06,880
network with a device or

549
00:21:06,880 --> 00:21:08,960
the cloud

550
00:21:08,960 --> 00:21:12,240
so so yeah so that's an open source uh

551
00:21:12,240 --> 00:21:13,679
framework it's

552
00:21:13,679 --> 00:21:14,840
available

553
00:21:14,840 --> 00:21:17,280
on uh jit lab

554
00:21:17,280 --> 00:21:19,360
this is also available as a python

555
00:21:19,360 --> 00:21:22,640
package uh just works on python 3. if

556
00:21:22,640 --> 00:21:24,559
you need to install it you can you know

557
00:21:24,559 --> 00:21:26,159
just directly

558
00:21:26,159 --> 00:21:29,360
run pip3 install exploity and it will

559
00:21:29,360 --> 00:21:31,360
install

560
00:21:31,360 --> 00:21:33,120
the framework for you

561
00:21:33,120 --> 00:21:34,720
if you want the latest version then you

562
00:21:34,720 --> 00:21:35,440
can

563
00:21:35,440 --> 00:21:38,000
clone the jitlab library and start

564
00:21:38,000 --> 00:21:39,840
working on it if we have time we'll

565
00:21:39,840 --> 00:21:42,320
probably look at i'll show you some

566
00:21:42,320 --> 00:21:45,039
screenshots and maybe the

567
00:21:45,039 --> 00:21:47,919
the tool working

568
00:21:48,400 --> 00:21:50,480
so

569
00:21:50,480 --> 00:21:52,559
how does it look from

570
00:21:52,559 --> 00:21:54,640
from a high level overview it's pretty

571
00:21:54,640 --> 00:21:57,039
simple it's not a complex framework as

572
00:21:57,039 --> 00:21:59,600
of now because there's not much

573
00:21:59,600 --> 00:22:01,760
complex functionality

574
00:22:01,760 --> 00:22:04,320
in the framework as of now

575
00:22:04,320 --> 00:22:06,960
so you have the framework also comes

576
00:22:06,960 --> 00:22:08,640
with a command line

577
00:22:08,640 --> 00:22:11,120
tool which you can use for you know

578
00:22:11,120 --> 00:22:13,919
running the plugins from

579
00:22:13,919 --> 00:22:15,440
the command line

580
00:22:15,440 --> 00:22:17,120
basically it has

581
00:22:17,120 --> 00:22:19,440
two major parts which is the interfaces

582
00:22:19,440 --> 00:22:21,039
and the protocols

583
00:22:21,039 --> 00:22:23,200
in the protocols you will find

584
00:22:23,200 --> 00:22:26,000
standard protocol implementations for

585
00:22:26,000 --> 00:22:29,280
for some of the iot protocols like mqtt

586
00:22:29,280 --> 00:22:31,120
cope

587
00:22:31,120 --> 00:22:33,600
bla and for some of the

588
00:22:33,600 --> 00:22:35,360
protocols we are piggybacking on

589
00:22:35,360 --> 00:22:36,480
existing

590
00:22:36,480 --> 00:22:39,360
python packages

591
00:22:39,360 --> 00:22:42,080
which we're going to change over time as

592
00:22:42,080 --> 00:22:45,919
new new versions of the protocol come in

593
00:22:45,919 --> 00:22:49,600
and then there is a test

594
00:22:49,600 --> 00:22:52,159
group so basically if you were to create

595
00:22:52,159 --> 00:22:54,880
your own plugin all you need to do is

596
00:22:54,880 --> 00:22:58,240
just inherit from the test class and

597
00:22:58,240 --> 00:23:00,240
use the interface which you want to use

598
00:23:00,240 --> 00:23:01,840
so when i say interface this will

599
00:23:01,840 --> 00:23:03,919
typically be okay

600
00:23:03,919 --> 00:23:05,440
i want to use

601
00:23:05,440 --> 00:23:08,400
serial com or uart interface

602
00:23:08,400 --> 00:23:09,919
obviously you will need a hardware

603
00:23:09,919 --> 00:23:12,159
device to do that but the software

604
00:23:12,159 --> 00:23:15,679
capabilities are already there and

605
00:23:15,679 --> 00:23:16,960
in

606
00:23:16,960 --> 00:23:18,720
specifically for uart for example there

607
00:23:18,720 --> 00:23:20,640
are a lot of tools available cheap tools

608
00:23:20,640 --> 00:23:22,480
available

609
00:23:22,480 --> 00:23:25,600
they're called usb to ttl we have some

610
00:23:25,600 --> 00:23:27,200
tools on our

611
00:23:27,200 --> 00:23:30,080
website that you can use

612
00:23:30,080 --> 00:23:31,120
to

613
00:23:31,120 --> 00:23:34,320
do specific analysis of the uart

614
00:23:34,320 --> 00:23:37,039
communication to the

615
00:23:37,039 --> 00:23:38,880
the device and if there is anything

616
00:23:38,880 --> 00:23:40,960
specific or

617
00:23:40,960 --> 00:23:43,120
in the device that you are testing you

618
00:23:43,120 --> 00:23:45,440
can customize uh

619
00:23:45,440 --> 00:23:48,159
a plugin and basically add your business

620
00:23:48,159 --> 00:23:51,840
logic based on what the communication uh

621
00:23:51,840 --> 00:23:54,400
high level communication is over uh the

622
00:23:54,400 --> 00:23:55,679
the serial

623
00:23:55,679 --> 00:23:57,919
port

624
00:24:00,720 --> 00:24:05,200
all right so how does a plugin look like

625
00:24:05,200 --> 00:24:07,120
a plug-in basically has

626
00:24:07,120 --> 00:24:09,039
three parts as you can see and again

627
00:24:09,039 --> 00:24:12,400
this is very very simple uh the most of

628
00:24:12,400 --> 00:24:14,159
the work you will be doing in the the

629
00:24:14,159 --> 00:24:16,159
last part which is the business logic

630
00:24:16,159 --> 00:24:17,200
obviously

631
00:24:17,200 --> 00:24:19,520
because that is going to be specific to

632
00:24:19,520 --> 00:24:20,400
your

633
00:24:20,400 --> 00:24:23,840
use case so you have you know uh what is

634
00:24:23,840 --> 00:24:25,919
the

635
00:24:25,919 --> 00:24:27,679
the plugin about

636
00:24:27,679 --> 00:24:29,840
so basically that's all english

637
00:24:29,840 --> 00:24:32,240
you have what are the requirements for

638
00:24:32,240 --> 00:24:34,400
the plugin from the user

639
00:24:34,400 --> 00:24:35,919
which are basically

640
00:24:35,919 --> 00:24:40,080
arguments you define the arguments

641
00:24:40,080 --> 00:24:43,279
and the the kind of data that you want

642
00:24:43,279 --> 00:24:44,840
and then is

643
00:24:44,840 --> 00:24:47,120
uh obviously your

644
00:24:47,120 --> 00:24:49,440
business logic on what specifically you

645
00:24:49,440 --> 00:24:51,120
want to do

646
00:24:51,120 --> 00:24:52,799
for a plug-in

647
00:24:52,799 --> 00:24:56,400
so let's say it's a plug-in to

648
00:24:56,400 --> 00:24:58,080
connect to a ble

649
00:24:58,080 --> 00:25:01,120
device and you know send some data over

650
00:25:01,120 --> 00:25:02,640
so you will use

651
00:25:02,640 --> 00:25:06,480
uh ble protocol import ble protocol here

652
00:25:06,480 --> 00:25:08,000
and then define

653
00:25:08,000 --> 00:25:09,520
what kind of communication you want to

654
00:25:09,520 --> 00:25:12,159
do over ble so for example in ble

655
00:25:12,159 --> 00:25:15,919
typically you have something called as

656
00:25:15,919 --> 00:25:17,679
characteristics

657
00:25:17,679 --> 00:25:20,400
basically they are

658
00:25:20,400 --> 00:25:21,679
think of them as

659
00:25:21,679 --> 00:25:24,799
information exchange for ble devices

660
00:25:24,799 --> 00:25:26,880
so you define a characteristic

661
00:25:26,880 --> 00:25:27,919
and

662
00:25:27,919 --> 00:25:30,960
the device can either you can either

663
00:25:30,960 --> 00:25:32,880
write a characteristic value to the

664
00:25:32,880 --> 00:25:35,840
device or read a characteristic value

665
00:25:35,840 --> 00:25:36,880
from

666
00:25:36,880 --> 00:25:39,360
the device or both for a specific

667
00:25:39,360 --> 00:25:40,720
characteristics

668
00:25:40,720 --> 00:25:44,080
that is typically how a ble device

669
00:25:44,080 --> 00:25:47,200
in short communicates so anything that

670
00:25:47,200 --> 00:25:49,200
your device is sending you over mobile

671
00:25:49,200 --> 00:25:51,520
application it's the same thing

672
00:25:51,520 --> 00:25:53,200
anything that your mobile application is

673
00:25:53,200 --> 00:25:57,120
sending to the device is using the same

674
00:25:57,120 --> 00:25:59,918
terminology

675
00:26:02,080 --> 00:26:03,679
so these are

676
00:26:03,679 --> 00:26:05,840
some of the plugins that are already

677
00:26:05,840 --> 00:26:07,760
available in the

678
00:26:07,760 --> 00:26:10,559
framework for example as i mentioned ble

679
00:26:10,559 --> 00:26:12,799
we have a ble scanner

680
00:26:12,799 --> 00:26:14,400
we have read write and fuzz

681
00:26:14,400 --> 00:26:17,360
characteristic values these are the uh

682
00:26:17,360 --> 00:26:19,600
since characteristics are the only way

683
00:26:19,600 --> 00:26:20,880
you would communicate with the bla

684
00:26:20,880 --> 00:26:23,600
device we came up with a nice

685
00:26:23,600 --> 00:26:26,080
misuse case of first testing these

686
00:26:26,080 --> 00:26:28,240
characteristic values so typically you

687
00:26:28,240 --> 00:26:29,279
would

688
00:26:29,279 --> 00:26:30,240
read

689
00:26:30,240 --> 00:26:33,600
a value or write a value to the device

690
00:26:33,600 --> 00:26:35,679
to see if the behavior changes on the

691
00:26:35,679 --> 00:26:37,760
device and whether you can read some

692
00:26:37,760 --> 00:26:40,320
sensitive information from

693
00:26:40,320 --> 00:26:42,159
the device

694
00:26:42,159 --> 00:26:45,039
but interestingly it turns out that

695
00:26:45,039 --> 00:26:47,120
you can also first test those

696
00:26:47,120 --> 00:26:49,039
characteristic values

697
00:26:49,039 --> 00:26:52,720
a it is the values are not part of the

698
00:26:52,720 --> 00:26:56,720
ble protocol or the ble stack the values

699
00:26:56,720 --> 00:26:59,440
are or or the character the the values

700
00:26:59,440 --> 00:27:01,039
are defined by

701
00:27:01,039 --> 00:27:03,840
the uh uh by the manufacturer or

702
00:27:03,840 --> 00:27:06,240
manufacturer of the product or the the

703
00:27:06,240 --> 00:27:07,840
product vendor

704
00:27:07,840 --> 00:27:10,880
and these values will be interpreted by

705
00:27:10,880 --> 00:27:13,440
the application that is running on

706
00:27:13,440 --> 00:27:16,159
in the firmware uh for a specific use

707
00:27:16,159 --> 00:27:18,080
case so

708
00:27:18,080 --> 00:27:20,720
in a fitness watch uh

709
00:27:20,720 --> 00:27:23,440
the developers of let's say if it's uh

710
00:27:23,440 --> 00:27:25,120
xiaomi uh

711
00:27:25,120 --> 00:27:26,399
fitness watch

712
00:27:26,399 --> 00:27:29,039
uh people the developers sitting in

713
00:27:29,039 --> 00:27:30,640
jiomi will decide okay this is the

714
00:27:30,640 --> 00:27:33,360
format that we are going to use

715
00:27:33,360 --> 00:27:35,279
for communication for time so if you

716
00:27:35,279 --> 00:27:36,880
want to set the time from mobile

717
00:27:36,880 --> 00:27:38,480
application

718
00:27:38,480 --> 00:27:40,320
this is the format that

719
00:27:40,320 --> 00:27:41,840
will be sent to the device and the

720
00:27:41,840 --> 00:27:44,480
firmware developers will then pass that

721
00:27:44,480 --> 00:27:46,240
and use that to set the time on the

722
00:27:46,240 --> 00:27:48,720
device and that is where the uh the

723
00:27:48,720 --> 00:27:52,480
problem uh starts right because it's uh

724
00:27:52,480 --> 00:27:54,559
uh it's not part of the protocol it's

725
00:27:54,559 --> 00:27:58,080
implementation specific and uh so

726
00:27:58,080 --> 00:28:00,720
interestingly if you uh start fuzzing

727
00:28:00,720 --> 00:28:03,440
these characteristics you will see

728
00:28:03,440 --> 00:28:06,159
interesting results so we've tried it on

729
00:28:06,159 --> 00:28:09,039
a bunch of ble devices and

730
00:28:09,039 --> 00:28:11,440
you know sometimes we'll find the reboot

731
00:28:11,440 --> 00:28:13,279
sometimes we'll get

732
00:28:13,279 --> 00:28:15,120
memory corruption

733
00:28:15,120 --> 00:28:17,360
crash crashing the device stopping the

734
00:28:17,360 --> 00:28:20,320
device sometimes we'll get

735
00:28:20,320 --> 00:28:22,640
the device turning into firmware upgrade

736
00:28:22,640 --> 00:28:24,159
mode

737
00:28:24,159 --> 00:28:25,600
and and

738
00:28:25,600 --> 00:28:26,799
a lot of

739
00:28:26,799 --> 00:28:29,600
different interesting results

740
00:28:29,600 --> 00:28:32,720
then we have mqtt mqtt is a very famous

741
00:28:32,720 --> 00:28:34,960
protocol i think if we have time we will

742
00:28:34,960 --> 00:28:38,240
uh i'll talk about a bit on uh mqtt

743
00:28:38,240 --> 00:28:42,720
protocol as well and we can use those

744
00:28:42,720 --> 00:28:44,399
that knowledge in the

745
00:28:44,399 --> 00:28:46,640
uh the plugins mqtt plugins that we are

746
00:28:46,640 --> 00:28:49,120
going to uh use so you have the

747
00:28:49,120 --> 00:28:51,840
capability to publish subscribe and do

748
00:28:51,840 --> 00:28:54,159
brute force uh authentication cracking

749
00:28:54,159 --> 00:28:58,000
on uh mqdtt service uh if the mqtt

750
00:28:58,000 --> 00:29:00,799
service is on aws then you can also

751
00:29:00,799 --> 00:29:02,320
interact with

752
00:29:02,320 --> 00:29:04,879
aws

753
00:29:05,279 --> 00:29:08,640
service mqtt service or mqtt broker as

754
00:29:08,640 --> 00:29:12,399
it is called in mqtt technology

755
00:29:12,399 --> 00:29:15,600
then you have modbus for plc's you can

756
00:29:15,600 --> 00:29:17,600
communicate with the plc's write

757
00:29:17,600 --> 00:29:20,240
register values read register values and

758
00:29:20,240 --> 00:29:21,600
so on

759
00:29:21,600 --> 00:29:23,600
on the plc's

760
00:29:23,600 --> 00:29:27,120
for can if you are if you have if you

761
00:29:27,120 --> 00:29:29,360
are connected to a can bus

762
00:29:29,360 --> 00:29:30,960
you can

763
00:29:30,960 --> 00:29:33,600
read can bus you can write to canvas you

764
00:29:33,600 --> 00:29:38,000
can also fuzz values on canvas

765
00:29:38,399 --> 00:29:41,520
dicom is a medical protocol specifically

766
00:29:41,520 --> 00:29:42,799
used in

767
00:29:42,799 --> 00:29:44,880
all of the hospitals

768
00:29:44,880 --> 00:29:46,080
this is

769
00:29:46,080 --> 00:29:48,320
typically a way in which your

770
00:29:48,320 --> 00:29:50,720
mri machines or x-ray machines or

771
00:29:50,720 --> 00:29:53,360
whatever will send data to a central

772
00:29:53,360 --> 00:29:56,399
server for a specific patient so it has

773
00:29:56,399 --> 00:29:59,440
uh you know it has the image information

774
00:29:59,440 --> 00:30:01,520
uh the patient information and so on and

775
00:30:01,520 --> 00:30:04,240
so forth so we have some basic

776
00:30:04,240 --> 00:30:06,080
plugins to you know

777
00:30:06,080 --> 00:30:10,720
communicate with the dycom server

778
00:30:11,039 --> 00:30:13,919
then we have cope cope is another

779
00:30:13,919 --> 00:30:16,480
interesting protocols which which is

780
00:30:16,480 --> 00:30:17,520
used in

781
00:30:17,520 --> 00:30:20,480
some of the iot products

782
00:30:20,480 --> 00:30:23,679
and this typically works on udp

783
00:30:23,679 --> 00:30:25,039
but

784
00:30:25,039 --> 00:30:26,240
pretty much

785
00:30:26,240 --> 00:30:28,000
a strip down you can think of it as a

786
00:30:28,000 --> 00:30:31,600
stripped down version of http where

787
00:30:31,600 --> 00:30:34,799
http is text based this is more on

788
00:30:34,799 --> 00:30:37,279
you know using the same logic but binary

789
00:30:37,279 --> 00:30:39,520
based

790
00:30:39,840 --> 00:30:44,080
for network discovery we have mdns upnp

791
00:30:44,080 --> 00:30:47,600
and plugins for cope uh ble and zigbee

792
00:30:47,600 --> 00:30:50,399
where we can you know discover uh

793
00:30:50,399 --> 00:30:51,679
devices

794
00:30:51,679 --> 00:30:54,080
uh on these different uh protocols

795
00:30:54,080 --> 00:30:56,159
they're specifically different plugins

796
00:30:56,159 --> 00:30:58,799
i'll show you the plugins in the uh in

797
00:30:58,799 --> 00:30:59,600
the

798
00:30:59,600 --> 00:31:01,679
uh

799
00:31:01,679 --> 00:31:04,640
in the framework here then we have

800
00:31:04,640 --> 00:31:07,760
zigbee plugins which enables

801
00:31:07,760 --> 00:31:10,640
us to sniff replay and scan zigbee

802
00:31:10,640 --> 00:31:12,559
networks now

803
00:31:12,559 --> 00:31:14,480
again the thing here is that this is a

804
00:31:14,480 --> 00:31:16,080
software

805
00:31:16,080 --> 00:31:18,480
this part is open source right now it is

806
00:31:18,480 --> 00:31:23,919
using our uh zigbee uh device uh

807
00:31:23,919 --> 00:31:27,519
by the time we were writing uh uh the

808
00:31:27,519 --> 00:31:29,519
uh the framework there was

809
00:31:29,519 --> 00:31:30,880
there was a

810
00:31:30,880 --> 00:31:34,000
well-known open source

811
00:31:34,000 --> 00:31:35,440
zigbee

812
00:31:35,440 --> 00:31:36,960
assessment tool

813
00:31:36,960 --> 00:31:39,279
uh called killer b which had hardware

814
00:31:39,279 --> 00:31:42,640
and software the only challenge was that

815
00:31:42,640 --> 00:31:44,840
it was in python 2 and

816
00:31:44,840 --> 00:31:48,240
our platform our framework is in python

817
00:31:48,240 --> 00:31:49,919
3 so we

818
00:31:49,919 --> 00:31:51,519
kept waiting for

819
00:31:51,519 --> 00:31:52,799
the authors to

820
00:31:52,799 --> 00:31:53,919
uh you know

821
00:31:53,919 --> 00:31:55,919
upgrade it to python 3 well that took a

822
00:31:55,919 --> 00:31:58,080
lot of time so what we did was we

823
00:31:58,080 --> 00:31:59,200
created

824
00:31:59,200 --> 00:32:00,399
a zigbee

825
00:32:00,399 --> 00:32:04,000
module of our own and

826
00:32:04,320 --> 00:32:07,279
you can use that to do the

827
00:32:07,279 --> 00:32:09,120
zigbee operations here but

828
00:32:09,120 --> 00:32:11,360
the idea is that

829
00:32:11,360 --> 00:32:13,200
given any well-known

830
00:32:13,200 --> 00:32:16,720
open source or famous hardware tool

831
00:32:16,720 --> 00:32:18,320
which is used in

832
00:32:18,320 --> 00:32:21,039
iot security assessment our aim is to be

833
00:32:21,039 --> 00:32:24,320
able to create plugins to be

834
00:32:24,320 --> 00:32:25,279
for

835
00:32:25,279 --> 00:32:28,799
for researchers to use it through the

836
00:32:28,799 --> 00:32:30,000
platform

837
00:32:30,000 --> 00:32:33,200
there are two important aspects to uh to

838
00:32:33,200 --> 00:32:36,320
it from uh from a researcher perspective

839
00:32:36,320 --> 00:32:39,120
it becomes very easy for you to you know

840
00:32:39,120 --> 00:32:40,000
just

841
00:32:40,000 --> 00:32:43,039
buy whatever tools you want and then you

842
00:32:43,039 --> 00:32:44,080
know

843
00:32:44,080 --> 00:32:46,480
forget about how

844
00:32:46,480 --> 00:32:48,960
you're going to use uh the software for

845
00:32:48,960 --> 00:32:49,760
that

846
00:32:49,760 --> 00:32:52,240
tool because otherwise you'll end up

847
00:32:52,240 --> 00:32:54,720
having a lot of different tools

848
00:32:54,720 --> 00:32:57,360
just uh go to exploit the framework

849
00:32:57,360 --> 00:32:59,919
connect the uh the device and run the

850
00:32:59,919 --> 00:33:02,799
plugins for that specific hardware um

851
00:33:02,799 --> 00:33:06,080
that is the the aim that we uh or that

852
00:33:06,080 --> 00:33:06,720
is

853
00:33:06,720 --> 00:33:10,240
uh something that we aim to do

854
00:33:10,240 --> 00:33:12,159
same is the case with the debug port

855
00:33:12,159 --> 00:33:13,360
scanner

856
00:33:13,360 --> 00:33:16,240
as of now it works with one of our tools

857
00:33:16,240 --> 00:33:17,760
but again

858
00:33:17,760 --> 00:33:19,840
there's no limitation in terms of adding

859
00:33:19,840 --> 00:33:22,240
new debug port scanners

860
00:33:22,240 --> 00:33:25,440
implementation in the framework

861
00:33:25,440 --> 00:33:28,960
uh on the serial as i mentioned if the

862
00:33:28,960 --> 00:33:32,799
device has a uart port open then you can

863
00:33:32,799 --> 00:33:34,799
brute force the uh

864
00:33:34,799 --> 00:33:36,159
the communication

865
00:33:36,159 --> 00:33:38,320
uh you can even first test the

866
00:33:38,320 --> 00:33:40,880
communication typically what happens is

867
00:33:40,880 --> 00:33:44,399
apart from uh you know standard uh linux

868
00:33:44,399 --> 00:33:46,320
uh embedded devices

869
00:33:46,320 --> 00:33:48,159
uh some of you know you you would

870
00:33:48,159 --> 00:33:49,519
usually see

871
00:33:49,519 --> 00:33:50,559
uh

872
00:33:50,559 --> 00:33:52,880
a default shell

873
00:33:52,880 --> 00:33:55,679
when you access the uart port on the

874
00:33:55,679 --> 00:33:56,880
device

875
00:33:56,880 --> 00:33:59,279
uh there are devices which will run

876
00:33:59,279 --> 00:34:01,440
non-linux os

877
00:34:01,440 --> 00:34:05,120
with customized consoles and even linux

878
00:34:05,120 --> 00:34:07,679
os with customized consoles so when you

879
00:34:07,679 --> 00:34:10,399
try and hook into the uart port on the

880
00:34:10,399 --> 00:34:13,280
pcb you will be uh

881
00:34:13,280 --> 00:34:14,639
you will be interfacing with a

882
00:34:14,639 --> 00:34:16,719
customized console and again the

883
00:34:16,719 --> 00:34:18,320
interesting thing with the customized

884
00:34:18,320 --> 00:34:22,079
console is that they're not

885
00:34:22,079 --> 00:34:24,960
security tested as much as you know

886
00:34:24,960 --> 00:34:28,320
open source tools and that's where

887
00:34:28,320 --> 00:34:30,560
you know you can find a lot of memory

888
00:34:30,560 --> 00:34:32,639
corruption issues in the

889
00:34:32,639 --> 00:34:35,440
custom consoles so this is again coming

890
00:34:35,440 --> 00:34:37,760
from our experience we've when you try

891
00:34:37,760 --> 00:34:39,760
and brute force you find hidden commands

892
00:34:39,760 --> 00:34:42,079
in these devices which escalate your

893
00:34:42,079 --> 00:34:44,480
privileges or you can cause memory

894
00:34:44,480 --> 00:34:46,239
corruptions by just

895
00:34:46,239 --> 00:34:48,079
fuzzing the

896
00:34:48,079 --> 00:34:49,918
custom console based on you know what

897
00:34:49,918 --> 00:34:54,000
kind of cli it is giving you

898
00:34:54,320 --> 00:34:55,520
then for

899
00:34:55,520 --> 00:34:58,240
if you have flash chips on the hardware

900
00:34:58,240 --> 00:35:00,720
uh if you have i2c

901
00:35:00,720 --> 00:35:02,640
eprom chips on the hardware

902
00:35:02,640 --> 00:35:04,720
given a specific connector which is

903
00:35:04,720 --> 00:35:07,839
again cheaply available

904
00:35:08,960 --> 00:35:10,000
you can

905
00:35:10,000 --> 00:35:12,560
you can read and write or extract data

906
00:35:12,560 --> 00:35:13,680
from the

907
00:35:13,680 --> 00:35:18,000
spi and i2c chips as of now this these

908
00:35:18,000 --> 00:35:18,960
two

909
00:35:18,960 --> 00:35:20,240
uh

910
00:35:20,240 --> 00:35:22,400
the

911
00:35:22,400 --> 00:35:26,160
the spi and i2c are dependent on

912
00:35:26,160 --> 00:35:27,920
a third-party

913
00:35:27,920 --> 00:35:31,520
chip called ftdi and that is

914
00:35:31,520 --> 00:35:34,560
cheaply available everywhere

915
00:35:34,560 --> 00:35:36,960
not very expensive you can buy any

916
00:35:36,960 --> 00:35:40,079
converter that has ftdi

917
00:35:40,079 --> 00:35:41,119
and it's

918
00:35:41,119 --> 00:35:42,880
pretty famous

919
00:35:42,880 --> 00:35:44,480
and you can just connect

920
00:35:44,480 --> 00:35:48,720
uh the the the ftdi connector with the

921
00:35:48,720 --> 00:35:52,240
device and hook it uh on the usb and

922
00:35:52,240 --> 00:35:54,320
you're good to go

923
00:35:54,320 --> 00:35:56,560
now we we've also we also make a

924
00:35:56,560 --> 00:36:00,000
connector based on ftdi chip

925
00:36:00,000 --> 00:36:02,240
on our website but otherwise there are a

926
00:36:02,240 --> 00:36:05,439
lot of different uh

927
00:36:05,920 --> 00:36:08,079
connectors available

928
00:36:08,079 --> 00:36:08,960
then

929
00:36:08,960 --> 00:36:11,599
so exploits we haven't put much exploits

930
00:36:11,599 --> 00:36:12,720
in this

931
00:36:12,720 --> 00:36:13,599
uh

932
00:36:13,599 --> 00:36:16,640
again a we don't we don't have too much

933
00:36:16,640 --> 00:36:18,480
uh time and manpower

934
00:36:18,480 --> 00:36:19,280
uh

935
00:36:19,280 --> 00:36:23,200
b uh you know the the the idea is more

936
00:36:23,200 --> 00:36:24,240
to

937
00:36:24,240 --> 00:36:26,240
be an enabler rather than you know

938
00:36:26,240 --> 00:36:28,240
creating some quick solution and there

939
00:36:28,240 --> 00:36:30,560
are a lot of exploits that we can put a

940
00:36:30,560 --> 00:36:32,720
lot of known vulnerabilities and

941
00:36:32,720 --> 00:36:34,800
publicly available exploits which we can

942
00:36:34,800 --> 00:36:37,599
add into it but then it'll again become

943
00:36:37,599 --> 00:36:39,280
you know click exploit click exploit

944
00:36:39,280 --> 00:36:41,520
which is what we want to avoid rather

945
00:36:41,520 --> 00:36:44,079
than what we want to do to

946
00:36:44,079 --> 00:36:46,720
be is an enabler where you have the

947
00:36:46,720 --> 00:36:49,440
target you know the interfaces

948
00:36:49,440 --> 00:36:51,760
and what you want to do is to be able to

949
00:36:51,760 --> 00:36:54,480
customize this to create your own

950
00:36:54,480 --> 00:36:57,040
plugins for specific

951
00:36:57,040 --> 00:36:59,520
usage

952
00:37:00,640 --> 00:37:03,119
yeah so this is how it looks like

953
00:37:03,119 --> 00:37:05,680
yeah once you install it you get a

954
00:37:05,680 --> 00:37:07,040
command line

955
00:37:07,040 --> 00:37:10,240
tool called exploity

956
00:37:10,240 --> 00:37:11,760
there are only basically two commands

957
00:37:11,760 --> 00:37:13,680
that you can run list

958
00:37:13,680 --> 00:37:15,040
and run

959
00:37:15,040 --> 00:37:16,880
list will tell you

960
00:37:16,880 --> 00:37:19,040
will list down all the

961
00:37:19,040 --> 00:37:21,599
the plugins that are available

962
00:37:21,599 --> 00:37:23,200
on uh

963
00:37:23,200 --> 00:37:24,800
in a specific

964
00:37:24,800 --> 00:37:26,000
version

965
00:37:26,000 --> 00:37:26,800
and

966
00:37:26,800 --> 00:37:29,599
uh sorry

967
00:37:29,760 --> 00:37:31,280
and run

968
00:37:31,280 --> 00:37:34,079
uh basically when you want to execute a

969
00:37:34,079 --> 00:37:38,000
specific plugin you can uh use this

970
00:37:38,000 --> 00:37:39,520
the run command

971
00:37:39,520 --> 00:37:41,440
so there is this command line version

972
00:37:41,440 --> 00:37:42,240
which

973
00:37:42,240 --> 00:37:45,359
you know researchers can use and then

974
00:37:45,359 --> 00:37:48,480
sorry the cli version and then there is

975
00:37:48,480 --> 00:37:51,040
a command line direct version where you

976
00:37:51,040 --> 00:37:53,520
can pass the plugin names as an argument

977
00:37:53,520 --> 00:37:54,240
to

978
00:37:54,240 --> 00:37:56,880
the exploity which is quite handy in

979
00:37:56,880 --> 00:37:59,359
terms of if you are doing it

980
00:37:59,359 --> 00:38:01,920
professionally within your organization

981
00:38:01,920 --> 00:38:05,760
to add this to your ci cd or smoke test

982
00:38:05,760 --> 00:38:06,480
or

983
00:38:06,480 --> 00:38:09,119
a regression test you can quickly

984
00:38:09,119 --> 00:38:10,320
script

985
00:38:10,320 --> 00:38:13,520
the tests and parse their

986
00:38:13,520 --> 00:38:14,800
their

987
00:38:14,800 --> 00:38:16,240
results

988
00:38:16,240 --> 00:38:19,839
and then decide pass fail

989
00:38:20,800 --> 00:38:21,920
all right

990
00:38:21,920 --> 00:38:23,599
all right a little bit of shameless

991
00:38:23,599 --> 00:38:26,079
marketing here so based on that based on

992
00:38:26,079 --> 00:38:28,000
the the framework we are also creating a

993
00:38:28,000 --> 00:38:29,440
commercial version

994
00:38:29,440 --> 00:38:32,960
we are right now in beta for this so if

995
00:38:32,960 --> 00:38:35,119
uh any one of you are interested i'll i

996
00:38:35,119 --> 00:38:37,920
can give you free access to the platform

997
00:38:37,920 --> 00:38:39,520
this is a cloud plus

998
00:38:39,520 --> 00:38:42,880
device based uh platform which utilizes

999
00:38:42,880 --> 00:38:45,359
a lot of proprietary code plus ah

1000
00:38:45,359 --> 00:38:49,040
exploiting framework as well

1001
00:38:49,599 --> 00:38:52,240
all right so before this

1002
00:38:52,240 --> 00:38:56,919
i will quickly show you the

1003
00:39:02,720 --> 00:39:06,040
the platform

1004
00:39:14,000 --> 00:39:17,359
right some of the things here uh

1005
00:39:17,359 --> 00:39:18,720
the source code as i mentioned is

1006
00:39:18,720 --> 00:39:20,000
available on

1007
00:39:20,000 --> 00:39:22,640
jit lab it's given in the presentation

1008
00:39:22,640 --> 00:39:24,800
the slide as well

1009
00:39:24,800 --> 00:39:26,880
uh the

1010
00:39:26,880 --> 00:39:29,440
the documentation is available at read

1011
00:39:29,440 --> 00:39:31,599
the docs dot io

1012
00:39:31,599 --> 00:39:35,040
i'll just open that as well

1013
00:39:38,160 --> 00:39:41,119
so it's exploited dot read the docs dot

1014
00:39:41,119 --> 00:39:43,839
io

1015
00:39:44,640 --> 00:39:46,880
so this tells you about you know a lot

1016
00:39:46,880 --> 00:39:49,760
of other different things like how the

1017
00:39:49,760 --> 00:39:52,240
implementation the apis

1018
00:39:52,240 --> 00:39:54,640
how do you install and it's pretty

1019
00:39:54,640 --> 00:39:57,520
simple only thing is during installation

1020
00:39:57,520 --> 00:39:59,680
you just need to have

1021
00:39:59,680 --> 00:40:02,879
some prerequisites

1022
00:40:02,960 --> 00:40:05,520
on your machine before installing it and

1023
00:40:05,520 --> 00:40:08,480
those are also given based on the os

1024
00:40:08,480 --> 00:40:10,240
so if you're using ubuntu you can just

1025
00:40:10,240 --> 00:40:12,720
copy and install the dependencies

1026
00:40:12,720 --> 00:40:13,760
they're just

1027
00:40:13,760 --> 00:40:15,920
typically two or three dependencies lib

1028
00:40:15,920 --> 00:40:17,200
usb

1029
00:40:17,200 --> 00:40:20,160
lib glib 2 python python setup tools and

1030
00:40:20,160 --> 00:40:22,480
stuff

1031
00:40:22,880 --> 00:40:26,160
and once you have that

1032
00:40:30,800 --> 00:40:32,400
yeah then you can go ahead if you're

1033
00:40:32,400 --> 00:40:34,400
doing it for development perspective

1034
00:40:34,400 --> 00:40:36,319
i've copied these

1035
00:40:36,319 --> 00:40:37,599
commands here

1036
00:40:37,599 --> 00:40:38,880
you can clone

1037
00:40:38,880 --> 00:40:40,720
just clone the

1038
00:40:40,720 --> 00:40:41,760
uh

1039
00:40:41,760 --> 00:40:45,440
clone the library go into the directory

1040
00:40:45,440 --> 00:40:46,319
and

1041
00:40:46,319 --> 00:40:48,640
yeah just run python

1042
00:40:48,640 --> 00:40:50,880
virtual environment and

1043
00:40:50,880 --> 00:40:52,960
source bin activate

1044
00:40:52,960 --> 00:40:55,760
and then you can go ahead and

1045
00:40:55,760 --> 00:40:59,119
test the uh the framework and then if

1046
00:40:59,119 --> 00:41:01,359
you any changes that you make you can

1047
00:41:01,359 --> 00:41:04,160
just keep reinstalling uh the framework

1048
00:41:04,160 --> 00:41:07,520
within your development environment

1049
00:41:07,520 --> 00:41:09,680
otherwise if you're using it

1050
00:41:09,680 --> 00:41:12,880
not developing on it then you can just

1051
00:41:12,880 --> 00:41:14,880
install the dependencies

1052
00:41:14,880 --> 00:41:17,599
and then just go ahead and do pip3

1053
00:41:17,599 --> 00:41:18,839
install

1054
00:41:18,839 --> 00:41:21,040
exploity uh

1055
00:41:21,040 --> 00:41:23,680
that's it yeah

1056
00:41:27,599 --> 00:41:29,760
all right so for example here i'm

1057
00:41:29,760 --> 00:41:31,839
already in the

1058
00:41:31,839 --> 00:41:32,800
in the

1059
00:41:32,800 --> 00:41:35,839
development environment

1060
00:41:42,319 --> 00:41:46,000
so let's say you want to run a specific

1061
00:41:46,000 --> 00:41:48,480
plugin so you will now you're

1062
00:41:48,480 --> 00:41:50,240
charged with assessing a product and

1063
00:41:50,240 --> 00:41:52,240
suddenly you see okay this this thing

1064
00:41:52,240 --> 00:41:55,040
uses mqtt so you go about quickly

1065
00:41:55,040 --> 00:41:56,240
reading okay

1066
00:41:56,240 --> 00:41:59,200
what is mqtt how does it communicate

1067
00:41:59,200 --> 00:42:02,720
and then you identify okay

1068
00:42:02,960 --> 00:42:05,760
in mqtt there is

1069
00:42:05,760 --> 00:42:07,920
there is a service in the middle and the

1070
00:42:07,920 --> 00:42:11,119
way you communicate is you publish and

1071
00:42:11,119 --> 00:42:13,520
you publish application messages and you

1072
00:42:13,520 --> 00:42:16,480
subscribe to something called as topics

1073
00:42:16,480 --> 00:42:18,240
and that's the way you communicate and

1074
00:42:18,240 --> 00:42:19,200
and

1075
00:42:19,200 --> 00:42:21,359
and now you want to go ahead and see

1076
00:42:21,359 --> 00:42:23,119
okay what are the topics that are

1077
00:42:23,119 --> 00:42:25,920
available for subscribing or what is the

1078
00:42:25,920 --> 00:42:28,160
backend information that you can get

1079
00:42:28,160 --> 00:42:30,319
which you can now quickly go ahead and

1080
00:42:30,319 --> 00:42:32,000
run

1081
00:42:32,000 --> 00:42:33,920
the mqtt plugins

1082
00:42:33,920 --> 00:42:35,680
so let's say

1083
00:42:35,680 --> 00:42:38,640
you want to see what

1084
00:42:39,359 --> 00:42:42,640
a subscribe plugin does so just run a

1085
00:42:42,640 --> 00:42:46,480
hyphen help it will give you obviously

1086
00:42:46,480 --> 00:42:47,920
this is what is defined within the

1087
00:42:47,920 --> 00:42:51,520
plugin like what does the plugin do

1088
00:42:51,520 --> 00:42:53,359
what does the plugin

1089
00:42:53,359 --> 00:42:57,279
require so in this case

1090
00:42:57,599 --> 00:42:59,520
let's say we are going to subscribe so

1091
00:42:59,520 --> 00:43:02,960
let's uh subscribe to

1092
00:43:02,960 --> 00:43:04,000
uh

1093
00:43:04,000 --> 00:43:05,680
there is a specific uh

1094
00:43:05,680 --> 00:43:08,319
wild card hash which is used as a

1095
00:43:08,319 --> 00:43:10,960
wildcard for topics to subscribe i'll

1096
00:43:10,960 --> 00:43:13,520
i'll talk about mqtt uh

1097
00:43:13,520 --> 00:43:15,680
after this but i'll just give you an

1098
00:43:15,680 --> 00:43:17,440
idea

1099
00:43:17,440 --> 00:43:18,880
so

1100
00:43:18,880 --> 00:43:21,359
what we need to do is we need to

1101
00:43:21,359 --> 00:43:23,359
you know specify the host

1102
00:43:23,359 --> 00:43:26,598
there is

1103
00:43:27,200 --> 00:43:29,520
there is a test server that runs that

1104
00:43:29,520 --> 00:43:31,680
mosquito run so mosquito is one of the

1105
00:43:31,680 --> 00:43:32,960
very famous

1106
00:43:32,960 --> 00:43:35,839
mqtt brokers or service

1107
00:43:35,839 --> 00:43:38,480
open source service that is available

1108
00:43:38,480 --> 00:43:41,119
and they run a test server for

1109
00:43:41,119 --> 00:43:43,520
developers to you know use that service

1110
00:43:43,520 --> 00:43:44,640
to

1111
00:43:44,640 --> 00:43:46,880
test their own

1112
00:43:46,880 --> 00:43:49,440
end points

1113
00:43:52,319 --> 00:43:55,839
so let's say i just want to

1114
00:43:55,839 --> 00:43:58,800
subscribe to a wildcard

1115
00:43:58,800 --> 00:44:02,160
and yeah that's about it i think timeout

1116
00:44:02,160 --> 00:44:03,440
default is

1117
00:44:03,440 --> 00:44:05,920
five so let's keep it five

1118
00:44:05,920 --> 00:44:09,200
and let's see if this

1119
00:44:09,200 --> 00:44:13,680
oh let's keep it for only three seconds

1120
00:44:14,720 --> 00:44:17,520
hope it works

1121
00:44:18,480 --> 00:44:21,560
all right

1122
00:44:24,400 --> 00:44:26,720
what

1123
00:44:28,240 --> 00:44:30,160
yeah

1124
00:44:30,160 --> 00:44:32,480
all right

1125
00:44:32,560 --> 00:44:34,960
so yeah

1126
00:44:35,119 --> 00:44:37,200
i'll give you a brief idea about mqtt

1127
00:44:37,200 --> 00:44:39,920
protocol if yeah

1128
00:44:39,920 --> 00:44:41,680
i'm sure not uh

1129
00:44:41,680 --> 00:44:43,680
you're not with your laptop so hands-on

1130
00:44:43,680 --> 00:44:45,359
would not be possible so instead what

1131
00:44:45,359 --> 00:44:46,640
i'll do is

1132
00:44:46,640 --> 00:44:48,880
let's talk about the mqtt protocol and

1133
00:44:48,880 --> 00:44:51,200
then you maybe

1134
00:44:51,200 --> 00:44:54,919
will get a better idea

1135
00:45:05,040 --> 00:45:06,160
all right

1136
00:45:06,160 --> 00:45:08,079
all right so we'll quickly cover uh

1137
00:45:08,079 --> 00:45:09,920
we'll quickly try to cover these things

1138
00:45:09,920 --> 00:45:11,920
i won't go into much detail but just

1139
00:45:11,920 --> 00:45:14,000
give you an idea of you know what we're

1140
00:45:14,000 --> 00:45:15,280
dealing with

1141
00:45:15,280 --> 00:45:19,920
mqtt has become one of the very famous

1142
00:45:19,920 --> 00:45:22,240
iot protocols which is used in consumer

1143
00:45:22,240 --> 00:45:24,160
electronics as well as

1144
00:45:24,160 --> 00:45:26,560
now getting into industrial

1145
00:45:26,560 --> 00:45:29,359
iot as well

1146
00:45:29,520 --> 00:45:31,520
so yeah so this is short for message

1147
00:45:31,520 --> 00:45:33,280
queueing telemetry

1148
00:45:33,280 --> 00:45:34,960
transport it's a very lightweight

1149
00:45:34,960 --> 00:45:37,680
messaging protocol the way you would

1150
00:45:37,680 --> 00:45:40,160
communicate over mqtt is

1151
00:45:40,160 --> 00:45:42,720
you publish

1152
00:45:42,720 --> 00:45:45,440
data application data

1153
00:45:45,440 --> 00:45:48,240
which is you're sending the data out and

1154
00:45:48,240 --> 00:45:50,560
you subscribe to something called as

1155
00:45:50,560 --> 00:45:53,920
topics so you publish on a topic and you

1156
00:45:53,920 --> 00:45:55,760
subscribe

1157
00:45:55,760 --> 00:45:59,040
a specific topic or multiple

1158
00:45:59,040 --> 00:46:01,119
topics and when somebody publishes on

1159
00:46:01,119 --> 00:46:04,160
that topic all the subscribers get the

1160
00:46:04,160 --> 00:46:06,240
data

1161
00:46:06,240 --> 00:46:09,680
from the uh from the service or the

1162
00:46:09,680 --> 00:46:11,200
broker we'll we'll

1163
00:46:11,200 --> 00:46:13,680
we'll see how that works

1164
00:46:13,680 --> 00:46:16,720
this is an iso standard as well so yeah

1165
00:46:16,720 --> 00:46:18,960
so you can read the uh

1166
00:46:18,960 --> 00:46:21,119
the the standard uh

1167
00:46:21,119 --> 00:46:24,160
specification itself very simple not not

1168
00:46:24,160 --> 00:46:27,200
not a complex uh protocol

1169
00:46:27,200 --> 00:46:29,280
so as i mentioned there are topics and

1170
00:46:29,280 --> 00:46:30,480
topic uh

1171
00:46:30,480 --> 00:46:32,880
filters so this is how a typical topic

1172
00:46:32,880 --> 00:46:35,200
looks like like a directory uh structure

1173
00:46:35,200 --> 00:46:37,280
without uh starting

1174
00:46:37,280 --> 00:46:39,200
uh slash here

1175
00:46:39,200 --> 00:46:43,040
uh and this is application dependent the

1176
00:46:43,040 --> 00:46:45,200
the manufacturers will define what kind

1177
00:46:45,200 --> 00:46:47,119
of topics they'll be using

1178
00:46:47,119 --> 00:46:50,560
if they're using aws then aws defines

1179
00:46:50,560 --> 00:46:53,440
some topics and then you can create your

1180
00:46:53,440 --> 00:46:55,119
own topics as well and define the

1181
00:46:55,119 --> 00:46:56,720
meanings

1182
00:46:56,720 --> 00:46:58,800
for them

1183
00:46:58,800 --> 00:47:01,599
and each of these sorry

1184
00:47:01,599 --> 00:47:04,240
each of this

1185
00:47:06,079 --> 00:47:09,440
each of this is called a topic level

1186
00:47:09,440 --> 00:47:12,000
separated by a topic level uh

1187
00:47:12,000 --> 00:47:14,319
separator so there are two wild cards

1188
00:47:14,319 --> 00:47:16,800
one is a multi-level wired card and one

1189
00:47:16,800 --> 00:47:19,440
is single wild card multi-level wild

1190
00:47:19,440 --> 00:47:21,359
card means wherever you put this wild

1191
00:47:21,359 --> 00:47:24,160
card it means any topic at this level

1192
00:47:24,160 --> 00:47:26,400
and any of the child levels as well so

1193
00:47:26,400 --> 00:47:30,319
if you have for example a multi-level

1194
00:47:30,319 --> 00:47:33,680
wildcard here it means pi to slash

1195
00:47:33,680 --> 00:47:37,359
office slash a slash b c and anything

1196
00:47:37,359 --> 00:47:40,960
inside those all of them are applicable

1197
00:47:40,960 --> 00:47:43,200
and

1198
00:47:43,760 --> 00:47:46,640
single level wildcard is the the sign is

1199
00:47:46,640 --> 00:47:49,119
plus and it means only

1200
00:47:49,119 --> 00:47:50,480
specific to

1201
00:47:50,480 --> 00:47:51,520
that

1202
00:47:51,520 --> 00:47:53,280
topic level so if you specify a plus

1203
00:47:53,280 --> 00:47:56,319
here it means all the topics

1204
00:47:56,319 --> 00:47:59,520
uh that have uh you know prior to

1205
00:47:59,520 --> 00:48:01,440
followed by anything followed by

1206
00:48:01,440 --> 00:48:04,480
boardroom and temperature

1207
00:48:05,280 --> 00:48:07,599
yeah

1208
00:48:07,599 --> 00:48:08,400
and

1209
00:48:08,400 --> 00:48:11,200
the standard itself defines that any

1210
00:48:11,200 --> 00:48:12,880
topic that starts with a dollar

1211
00:48:12,880 --> 00:48:14,880
character should not be used by

1212
00:48:14,880 --> 00:48:17,440
applications because it has it is to be

1213
00:48:17,440 --> 00:48:20,640
used by uh the back end or the service

1214
00:48:20,640 --> 00:48:23,119
for control apis or whatever

1215
00:48:23,119 --> 00:48:25,520
and this becomes a handy start point for

1216
00:48:25,520 --> 00:48:26,960
you to do

1217
00:48:26,960 --> 00:48:29,359
uh assessment of anything that is using

1218
00:48:29,359 --> 00:48:32,400
mqtt protocol

1219
00:48:32,880 --> 00:48:35,520
all right so so this is how a typical

1220
00:48:35,520 --> 00:48:38,960
mqtt system looks like you have a broker

1221
00:48:38,960 --> 00:48:41,760
in the middle and the job of the broker

1222
00:48:41,760 --> 00:48:44,240
is to do nothing but pass messages from

1223
00:48:44,240 --> 00:48:47,760
one place to the other and this broker

1224
00:48:47,760 --> 00:48:49,839
typically if you're looking at aws for

1225
00:48:49,839 --> 00:48:53,680
example or gcp or azure example

1226
00:48:53,680 --> 00:48:56,000
your broker will be sitting on the cloud

1227
00:48:56,000 --> 00:48:58,960
and all these clients are either

1228
00:48:58,960 --> 00:49:03,839
end devices or mobile applications

1229
00:49:04,640 --> 00:49:06,960
so yeah devices can subscribe devices

1230
00:49:06,960 --> 00:49:08,480
can publish

1231
00:49:08,480 --> 00:49:12,480
uh let's say three devices subscribe to

1232
00:49:12,480 --> 00:49:16,960
a topic a a slash b and a slash

1233
00:49:16,960 --> 00:49:19,920
hash which is a multi-level wildcard

1234
00:49:19,920 --> 00:49:22,640
and let's say this particular client

1235
00:49:22,640 --> 00:49:24,880
publishes on a slash b

1236
00:49:24,880 --> 00:49:26,800
now out of these

1237
00:49:26,800 --> 00:49:29,119
uh only the right to

1238
00:49:29,119 --> 00:49:33,599
uh nodes will get the message because

1239
00:49:33,599 --> 00:49:35,599
the one on the left hand side is

1240
00:49:35,599 --> 00:49:37,760
subscribed to

1241
00:49:37,760 --> 00:49:40,000
is subscribed to

1242
00:49:40,000 --> 00:49:41,520
a topic

1243
00:49:41,520 --> 00:49:43,760
a which that which is a single level uh

1244
00:49:43,760 --> 00:49:45,119
topic itself

1245
00:49:45,119 --> 00:49:47,760
whereas the message is published on

1246
00:49:47,760 --> 00:49:50,960
a slash b which means these two

1247
00:49:50,960 --> 00:49:53,359
will get these two nodes will get that

1248
00:49:53,359 --> 00:49:56,880
message so that's how uh typically your

1249
00:49:56,880 --> 00:49:58,480
communication over

1250
00:49:58,480 --> 00:50:01,839
mqtt happens

1251
00:50:01,839 --> 00:50:05,440
and yeah so then mqtt defines uh

1252
00:50:05,440 --> 00:50:08,160
16 control packets in the latest version

1253
00:50:08,160 --> 00:50:10,160
which is version 5

1254
00:50:10,160 --> 00:50:11,280
and

1255
00:50:11,280 --> 00:50:13,839
again the format of the protocol again

1256
00:50:13,839 --> 00:50:15,520
i'll not go into deep but it is very

1257
00:50:15,520 --> 00:50:17,839
simple you have a fixed header you have

1258
00:50:17,839 --> 00:50:21,680
a variable header and you have a payload

1259
00:50:21,680 --> 00:50:23,520
and this will be

1260
00:50:23,520 --> 00:50:25,920
this is basically an this hole is an

1261
00:50:25,920 --> 00:50:28,160
application payload which works on top

1262
00:50:28,160 --> 00:50:31,279
of tcp

1263
00:50:31,520 --> 00:50:33,520
so yeah your fixed header will define

1264
00:50:33,520 --> 00:50:36,720
what kind of uh message is this

1265
00:50:36,720 --> 00:50:37,920
or type

1266
00:50:37,920 --> 00:50:39,200
if you will

1267
00:50:39,200 --> 00:50:41,280
and so the type defines the different

1268
00:50:41,280 --> 00:50:42,800
kind of

1269
00:50:42,800 --> 00:50:44,640
messages or control packets whether it

1270
00:50:44,640 --> 00:50:46,800
is a connect message from the node

1271
00:50:46,800 --> 00:50:48,480
whether it is an acknowledgement from

1272
00:50:48,480 --> 00:50:50,880
the broker or the node

1273
00:50:50,880 --> 00:50:53,440
whether it is a published message

1274
00:50:53,440 --> 00:50:55,839
publish acknowledge message subscribe

1275
00:50:55,839 --> 00:50:58,720
message unsubscribe message and so on

1276
00:50:58,720 --> 00:51:00,880
and so forth

1277
00:51:00,880 --> 00:51:02,880
so variable header is typically as the

1278
00:51:02,880 --> 00:51:05,359
name suggests variable in length

1279
00:51:05,359 --> 00:51:07,520
but used for

1280
00:51:07,520 --> 00:51:09,839
things like packet identifiers where you

1281
00:51:09,839 --> 00:51:11,920
want to identify

1282
00:51:11,920 --> 00:51:14,400
request and response so i send a publish

1283
00:51:14,400 --> 00:51:16,640
message i get an acknowledgement with

1284
00:51:16,640 --> 00:51:19,040
the same

1285
00:51:19,359 --> 00:51:20,880
identifier

1286
00:51:20,880 --> 00:51:22,480
and so on

1287
00:51:22,480 --> 00:51:24,319
and then finally you have

1288
00:51:24,319 --> 00:51:26,960
payload which is application dependent

1289
00:51:26,960 --> 00:51:29,760
which is where the application

1290
00:51:29,760 --> 00:51:33,520
data goes in publish for example

1291
00:51:33,520 --> 00:51:36,480
yeah and then there is return code think

1292
00:51:36,480 --> 00:51:39,119
of return code like http response codes

1293
00:51:39,119 --> 00:51:40,480
which tell you whether there was a

1294
00:51:40,480 --> 00:51:41,920
success or

1295
00:51:41,920 --> 00:51:44,400
an error

1296
00:51:44,559 --> 00:51:45,359
yeah

1297
00:51:45,359 --> 00:51:48,000
so again connect is the so the first

1298
00:51:48,000 --> 00:51:50,559
thing that you would do is once your tcp

1299
00:51:50,559 --> 00:51:53,680
connection is established with the

1300
00:51:53,680 --> 00:51:56,480
with the broker or the service you would

1301
00:51:56,480 --> 00:51:58,400
go ahead and do

1302
00:51:58,400 --> 00:52:01,119
an application connect or an mqtt

1303
00:52:01,119 --> 00:52:02,079
connect

1304
00:52:02,079 --> 00:52:04,000
in this you would specify the version of

1305
00:52:04,000 --> 00:52:06,079
the protocol

1306
00:52:06,079 --> 00:52:08,720
and whether you want to authenticate

1307
00:52:08,720 --> 00:52:10,559
and this is what

1308
00:52:10,559 --> 00:52:13,040
we use to brute force the authentication

1309
00:52:13,040 --> 00:52:14,960
for mqtt

1310
00:52:14,960 --> 00:52:17,960
service

1311
00:52:18,720 --> 00:52:20,800
publish again is the same you specify

1312
00:52:20,800 --> 00:52:23,440
what topic you want to publish on and

1313
00:52:23,440 --> 00:52:25,359
what is the application message that you

1314
00:52:25,359 --> 00:52:26,640
want to publish

1315
00:52:26,640 --> 00:52:29,200
in the payload

1316
00:52:29,200 --> 00:52:31,280
subscribe is when you want to subscribe

1317
00:52:31,280 --> 00:52:32,800
to

1318
00:52:32,800 --> 00:52:35,119
a single topic or a list of topics or a

1319
00:52:35,119 --> 00:52:37,760
list of topic filters

1320
00:52:37,760 --> 00:52:41,119
so within the payload you would define

1321
00:52:41,119 --> 00:52:43,200
a topic filter and its subscription

1322
00:52:43,200 --> 00:52:46,559
options and this is a multiple uh tuple

1323
00:52:46,559 --> 00:52:49,520
so multiple uh topic filters and

1324
00:52:49,520 --> 00:52:52,160
subscription options

1325
00:52:52,160 --> 00:52:54,400
and then up unsubscribe

1326
00:52:54,400 --> 00:52:56,559
now some of the standard security issues

1327
00:52:56,559 --> 00:52:59,119
with mqtt protocol is a

1328
00:52:59,119 --> 00:53:01,920
uh you know

1329
00:53:02,160 --> 00:53:03,760
it gives a lot of information when

1330
00:53:03,760 --> 00:53:05,839
you're doing reconnaissance on the

1331
00:53:05,839 --> 00:53:09,359
service unless it is protected and

1332
00:53:09,359 --> 00:53:11,359
again these these protocols are new

1333
00:53:11,359 --> 00:53:14,160
protocols so

1334
00:53:14,240 --> 00:53:16,880
none of the or most of the

1335
00:53:16,880 --> 00:53:18,720
the the brokers or services which are

1336
00:53:18,720 --> 00:53:21,599
non-standard or your own implementation

1337
00:53:21,599 --> 00:53:23,920
typically will be open to reconnaissance

1338
00:53:23,920 --> 00:53:26,800
where you can find more information

1339
00:53:26,800 --> 00:53:28,800
password cracking because it's part of

1340
00:53:28,800 --> 00:53:32,079
the connection even if you implement uh

1341
00:53:32,079 --> 00:53:33,359
authentication

1342
00:53:33,359 --> 00:53:35,839
uh people can still brute force uh the

1343
00:53:35,839 --> 00:53:37,520
authentication then there's no stopping

1344
00:53:37,520 --> 00:53:38,319
that

1345
00:53:38,319 --> 00:53:39,119
and

1346
00:53:39,119 --> 00:53:41,280
one of the uh yeah i'll come to that

1347
00:53:41,280 --> 00:53:43,040
interesting factor later

1348
00:53:43,040 --> 00:53:46,720
corrupting the cis data so a

1349
00:53:46,720 --> 00:53:49,040
typically you would find dollar sys data

1350
00:53:49,040 --> 00:53:50,960
available to any node that is connecting

1351
00:53:50,960 --> 00:53:54,000
to the service and then some

1352
00:53:54,000 --> 00:53:56,000
services will also allow you to write

1353
00:53:56,000 --> 00:53:56,880
data

1354
00:53:56,880 --> 00:53:59,760
and the this is important back-end data

1355
00:53:59,760 --> 00:54:02,160
not application specific data which

1356
00:54:02,160 --> 00:54:04,640
means you are messing with the broker

1357
00:54:04,640 --> 00:54:07,359
backend itself

1358
00:54:07,359 --> 00:54:09,520
in injecting malicious telemetry data

1359
00:54:09,520 --> 00:54:11,359
this is pretty interesting from the

1360
00:54:11,359 --> 00:54:13,119
perspective that we have tried it with

1361
00:54:13,119 --> 00:54:15,359
different multiple protocols

1362
00:54:15,359 --> 00:54:17,280
this has nothing to do with the protocol

1363
00:54:17,280 --> 00:54:20,079
specifically but what happens is that

1364
00:54:20,079 --> 00:54:22,319
the data that goes telemetry data that

1365
00:54:22,319 --> 00:54:24,480
goes from the device to mobile

1366
00:54:24,480 --> 00:54:26,800
application or to the cloud is

1367
00:54:26,800 --> 00:54:28,880
ultimately converted into

1368
00:54:28,880 --> 00:54:30,319
some other form

1369
00:54:30,319 --> 00:54:33,040
where it will be used by either the

1370
00:54:33,040 --> 00:54:35,920
mobile application or a web application

1371
00:54:35,920 --> 00:54:38,319
which means even though let's say you're

1372
00:54:38,319 --> 00:54:40,880
using mqtt the data that you are passing

1373
00:54:40,880 --> 00:54:42,559
could effectively

1374
00:54:42,559 --> 00:54:44,240
exploit

1375
00:54:44,240 --> 00:54:47,839
a web application let's say you could uh

1376
00:54:47,839 --> 00:54:50,079
if the data is being

1377
00:54:50,079 --> 00:54:51,440
put into

1378
00:54:51,440 --> 00:54:52,640
a

1379
00:54:52,640 --> 00:54:54,640
standard sql database

1380
00:54:54,640 --> 00:54:56,880
and the application is processing it you

1381
00:54:56,880 --> 00:54:59,839
could pretty much as a malicious

1382
00:54:59,839 --> 00:55:03,040
node connect to the service and instead

1383
00:55:03,040 --> 00:55:05,200
of putting in correct data put in sql

1384
00:55:05,200 --> 00:55:08,079
injection data right there's no stopping

1385
00:55:08,079 --> 00:55:09,920
if the application reflects that data

1386
00:55:09,920 --> 00:55:12,319
back to the users you can pretty much

1387
00:55:12,319 --> 00:55:16,000
inject an xss uh payload right so it

1388
00:55:16,000 --> 00:55:17,760
there is nothing specific to impurity

1389
00:55:17,760 --> 00:55:19,520
here but your what you're trying to do

1390
00:55:19,520 --> 00:55:23,920
is uh you're moving into a different uh

1391
00:55:23,920 --> 00:55:26,799
protocol domain and try and exploit that

1392
00:55:26,799 --> 00:55:28,160
same same is the case with cross

1393
00:55:28,160 --> 00:55:30,640
protocol attacks

1394
00:55:30,640 --> 00:55:31,520
then is

1395
00:55:31,520 --> 00:55:34,160
denial of service there is one specific

1396
00:55:34,160 --> 00:55:35,760
uh

1397
00:55:35,760 --> 00:55:38,720
dos technique that we found in

1398
00:55:38,720 --> 00:55:42,640
almost all implementations of mqtt

1399
00:55:42,640 --> 00:55:45,040
the problem is that

1400
00:55:45,040 --> 00:55:46,799
there are two things when you connect to

1401
00:55:46,799 --> 00:55:49,520
an mqtt service one is the

1402
00:55:49,520 --> 00:55:52,400
authentication which the implementations

1403
00:55:52,400 --> 00:55:54,000
may or may not do

1404
00:55:54,000 --> 00:55:56,480
and one is client id

1405
00:55:56,480 --> 00:55:58,480
so there are

1406
00:55:58,480 --> 00:56:00,000
there is a slight

1407
00:56:00,000 --> 00:56:01,760
confusion in terms of how do you

1408
00:56:01,760 --> 00:56:04,960
identify a client

1409
00:56:05,359 --> 00:56:07,760
ideally if you're doing authentication

1410
00:56:07,760 --> 00:56:09,920
you should rely on username as the

1411
00:56:09,920 --> 00:56:12,720
identity for uh the device

1412
00:56:12,720 --> 00:56:13,520
but

1413
00:56:13,520 --> 00:56:14,880
most of the

1414
00:56:14,880 --> 00:56:17,040
or some of the implementations that we

1415
00:56:17,040 --> 00:56:18,240
have seen is

1416
00:56:18,240 --> 00:56:20,480
client id is used as an authentication

1417
00:56:20,480 --> 00:56:23,119
to a authenticate the node as well as

1418
00:56:23,119 --> 00:56:25,920
identify the node

1419
00:56:25,920 --> 00:56:27,200
which is wrong

1420
00:56:27,200 --> 00:56:28,400
so basically if there's no

1421
00:56:28,400 --> 00:56:30,240
authentication anybody can come and say

1422
00:56:30,240 --> 00:56:32,640
hey i am client foo

1423
00:56:32,640 --> 00:56:35,359
client id for connect to me

1424
00:56:35,359 --> 00:56:37,119
and while we were trying this we figured

1425
00:56:37,119 --> 00:56:39,359
that

1426
00:56:40,400 --> 00:56:42,000
the protocol itself

1427
00:56:42,000 --> 00:56:44,319
has this weakness where the

1428
00:56:44,319 --> 00:56:46,000
implementations even though they are

1429
00:56:46,000 --> 00:56:48,400
adding to the protocol what happens is

1430
00:56:48,400 --> 00:56:51,599
if there is a client id connected uh

1431
00:56:51,599 --> 00:56:55,119
let's say the client id is hitb

1432
00:56:55,119 --> 00:56:56,880
and doing some work and then there is a

1433
00:56:56,880 --> 00:56:59,520
new client that comes up connects with

1434
00:56:59,520 --> 00:57:02,319
the client id hitb

1435
00:57:02,319 --> 00:57:05,119
what happens is the the service looks at

1436
00:57:05,119 --> 00:57:08,400
are there any clients with the name hitb

1437
00:57:08,400 --> 00:57:11,040
connected to me and if they if they are

1438
00:57:11,040 --> 00:57:13,040
it disconnects the old client so

1439
00:57:13,040 --> 00:57:14,480
basically

1440
00:57:14,480 --> 00:57:17,280
if you know the client ids or you know

1441
00:57:17,280 --> 00:57:19,280
the algorithm to generate the client ids

1442
00:57:19,280 --> 00:57:21,599
because it's not a secret right if you

1443
00:57:21,599 --> 00:57:23,839
if you know what implementation the

1444
00:57:23,839 --> 00:57:24,839
nodes are

1445
00:57:24,839 --> 00:57:27,440
using you can pretty much figure out how

1446
00:57:27,440 --> 00:57:29,920
to generate client ids and what you can

1447
00:57:29,920 --> 00:57:33,119
do is if you have an mqtt ecosystem you

1448
00:57:33,119 --> 00:57:34,880
can just start brute forcing with a

1449
00:57:34,880 --> 00:57:40,200
specific with these client ids

1450
00:57:41,760 --> 00:57:44,400
all right so i don't think we'll be able

1451
00:57:44,400 --> 00:57:46,720
to do hands-on

1452
00:57:46,720 --> 00:57:47,599
since

1453
00:57:47,599 --> 00:57:50,160
it needs a laptop but what i what we can

1454
00:57:50,160 --> 00:57:52,559
what you can do is go to

1455
00:57:52,559 --> 00:57:56,880
uh exploity dot read the docs dot io

1456
00:57:56,880 --> 00:57:59,280
the documentation is available there

1457
00:57:59,280 --> 00:58:01,680
we have a youtube

1458
00:58:01,680 --> 00:58:03,280
channel

1459
00:58:03,280 --> 00:58:06,480
in that youtube channel we have

1460
00:58:06,480 --> 00:58:08,640
some videos explaining how do you go

1461
00:58:08,640 --> 00:58:10,640
about installing it how do you go about

1462
00:58:10,640 --> 00:58:14,240
using it and then uh protocol specific

1463
00:58:14,240 --> 00:58:17,599
uh plugins which can be uh which can be

1464
00:58:17,599 --> 00:58:19,920
used

1465
00:58:21,040 --> 00:58:23,839
and we have uh you can also go on our

1466
00:58:23,839 --> 00:58:25,400
website

1467
00:58:25,400 --> 00:58:28,160
exploity.io there's a bit of information

1468
00:58:28,160 --> 00:58:30,720
about the open source bit of information

1469
00:58:30,720 --> 00:58:33,040
about uh

1470
00:58:33,040 --> 00:58:35,359
so we have an online store

1471
00:58:35,359 --> 00:58:37,359
if you're interested in iot security we

1472
00:58:37,359 --> 00:58:38,880
sell some stuff

1473
00:58:38,880 --> 00:58:39,839
there

1474
00:58:39,839 --> 00:58:42,400
and if you're interested in contributing

1475
00:58:42,400 --> 00:58:46,079
to uh the the the open source framework

1476
00:58:46,079 --> 00:58:48,720
you can send me an email i'll i'll just

1477
00:58:48,720 --> 00:58:51,839
show you my email as well

1478
00:58:54,559 --> 00:58:56,880
all right let me just quickly give you a

1479
00:58:56,880 --> 00:58:59,520
demo for

1480
00:59:01,119 --> 00:59:05,839
for the banner grabbing on mqtt so that

1481
00:59:06,559 --> 00:59:08,480
you have an idea of what i'm talking

1482
00:59:08,480 --> 00:59:10,720
about i wanted to do the hands-on on how

1483
00:59:10,720 --> 00:59:13,440
do you go about creating

1484
00:59:13,440 --> 00:59:16,640
your own plugin but

1485
00:59:16,640 --> 00:59:19,200
i'll show you there is a sample uh

1486
00:59:19,200 --> 00:59:21,040
sample plug-in available within the

1487
00:59:21,040 --> 00:59:22,960
framework which you can open and look at

1488
00:59:22,960 --> 00:59:24,000
the code

1489
00:59:24,000 --> 00:59:26,319
on how it is implemented and then change

1490
00:59:26,319 --> 00:59:27,839
it according to your

1491
00:59:27,839 --> 00:59:32,078
needs but let's quickly first do this

1492
00:59:34,240 --> 00:59:35,119
so

1493
00:59:35,119 --> 00:59:37,920
if you're using uh or if

1494
00:59:37,920 --> 00:59:40,799
the sir if any service or product is

1495
00:59:40,799 --> 00:59:42,720
using mosquito

1496
00:59:42,720 --> 00:59:44,640
or typically anything that adheres to

1497
00:59:44,640 --> 00:59:48,558
mosquito dollar systopics

1498
00:59:51,040 --> 00:59:53,119
this might be exposed which means it

1499
00:59:53,119 --> 00:59:55,040
will tell you the

1500
00:59:55,040 --> 00:59:57,839
so now i subscribe to a specific topic

1501
00:59:57,839 --> 00:59:58,720
which is

1502
00:59:58,720 --> 01:00:00,559
broker back-end topic

1503
01:00:00,559 --> 01:00:02,079
and version

1504
01:00:02,079 --> 01:00:04,079
which will always give me

1505
01:00:04,079 --> 01:00:04,799
the

1506
01:00:04,799 --> 01:00:06,559
the software name

1507
01:00:06,559 --> 01:00:08,480
and the version of the software

1508
01:00:08,480 --> 01:00:11,200
which you're using

1509
01:00:13,599 --> 01:00:15,839
all right

1510
01:00:16,799 --> 01:00:19,759
so about the

1511
01:00:20,480 --> 01:00:23,040
the framework once you

1512
01:00:23,040 --> 01:00:24,559
do a jet clone

1513
01:00:24,559 --> 01:00:27,599
you'll get a exploity directory

1514
01:00:27,599 --> 01:00:29,520
just go inside

1515
01:00:29,520 --> 01:00:33,040
another exploit directory

1516
01:00:33,520 --> 01:00:36,000
and then you have the core

1517
01:00:36,000 --> 01:00:37,440
directory which has the core

1518
01:00:37,440 --> 01:00:38,880
implementations

1519
01:00:38,880 --> 01:00:40,880
you have the plugins directory which has

1520
01:00:40,880 --> 01:00:42,480
all the plugins so if you want to look

1521
01:00:42,480 --> 01:00:45,440
at the how one specific plugin is

1522
01:00:45,440 --> 01:00:47,599
implemented you can go in that and look

1523
01:00:47,599 --> 01:00:50,000
at the code

1524
01:00:50,000 --> 01:00:52,640
and all the plugins are just arranged in

1525
01:00:52,640 --> 01:00:54,319
terms of their

1526
01:00:54,319 --> 01:00:56,960
respective technology or protocols there

1527
01:00:56,960 --> 01:00:59,839
is one called sample.py which is we've

1528
01:00:59,839 --> 01:01:02,799
just kept it as a sample which does not

1529
01:01:02,799 --> 01:01:03,920
do much

1530
01:01:03,920 --> 01:01:06,319
but you can look at the

1531
01:01:06,319 --> 01:01:07,920
the code

1532
01:01:07,920 --> 01:01:10,799
and pretty much see the format for

1533
01:01:10,799 --> 01:01:13,680
how you would go about defining your own

1534
01:01:13,680 --> 01:01:15,680
plugin

1535
01:01:15,680 --> 01:01:18,400
so pre and post functions are not needed

1536
01:01:18,400 --> 01:01:21,280
you can eliminate them

1537
01:01:21,280 --> 01:01:23,599
execute is what is your

1538
01:01:23,599 --> 01:01:25,920
business logic and then

1539
01:01:25,920 --> 01:01:27,520
for

1540
01:01:27,520 --> 01:01:29,839
logging anything on the

1541
01:01:29,839 --> 01:01:32,160
on the framework you can use output

1542
01:01:32,160 --> 01:01:35,440
handlers or t-log

1543
01:01:35,440 --> 01:01:36,960
functions

1544
01:01:36,960 --> 01:01:40,079
where you can print on the

1545
01:01:40,079 --> 01:01:43,760
print on the terminal as well as log

1546
01:01:43,760 --> 01:01:45,359
data in json

1547
01:01:45,359 --> 01:01:47,839
format

1548
01:01:47,920 --> 01:01:50,079
so then you can go ahead and change and

1549
01:01:50,079 --> 01:01:53,119
add it to your

1550
01:01:54,640 --> 01:01:57,680
so i'll just change this to show you the

1551
01:01:57,680 --> 01:01:59,200
name

1552
01:01:59,200 --> 01:02:02,079
let's say i'll call it sample new

1553
01:02:02,079 --> 01:02:05,880
sample new summary

1554
01:02:06,240 --> 01:02:07,119
and

1555
01:02:07,119 --> 01:02:09,440
here

1556
01:02:09,440 --> 01:02:11,440
what i'll do is i'll go back and i'll

1557
01:02:11,440 --> 01:02:13,119
install

1558
01:02:13,119 --> 01:02:16,000
this back again

1559
01:02:16,240 --> 01:02:20,319
and then i'll run exploity

1560
01:02:20,319 --> 01:02:22,720
list

1561
01:02:22,799 --> 01:02:27,359
and the sample is part of cope

1562
01:02:30,799 --> 01:02:33,440
this one so you can quickly prototype

1563
01:02:33,440 --> 01:02:34,559
your own

1564
01:02:34,559 --> 01:02:37,680
plugins just go ahead edit the code

1565
01:02:37,680 --> 01:02:39,359
reinstall in your development

1566
01:02:39,359 --> 01:02:41,039
environment and

1567
01:02:41,039 --> 01:02:42,559
test what the

1568
01:02:42,559 --> 01:02:45,760
what the plugin does

1569
01:02:47,359 --> 01:02:50,880
all right let me go to

1570
01:02:52,640 --> 01:02:55,039
oops

1571
01:02:55,039 --> 01:02:57,760
so yes this is the website

1572
01:02:57,760 --> 01:03:00,760
sorry

1573
01:03:12,079 --> 01:03:14,559
all right yeah so we are running black

1574
01:03:14,559 --> 01:03:18,240
friday sale as of now just fyi

1575
01:03:18,240 --> 01:03:21,200
you have the uh the online store

1576
01:03:21,200 --> 01:03:23,440
uh we don't have the product the

1577
01:03:23,440 --> 01:03:25,440
platform details in here

1578
01:03:25,440 --> 01:03:30,119
if you want to go to

1579
01:03:35,920 --> 01:03:37,760
yeah this is where the platform is

1580
01:03:37,760 --> 01:03:39,359
deployed if you're interested in looking

1581
01:03:39,359 --> 01:03:40,880
at it from a

1582
01:03:40,880 --> 01:03:43,440
professional perspective i can give you

1583
01:03:43,440 --> 01:03:45,520
access to the platform

1584
01:03:45,520 --> 01:03:48,000
basically allows you to run automated

1585
01:03:48,000 --> 01:03:49,440
firmware scans

1586
01:03:49,440 --> 01:03:51,920
automated debug port scans

1587
01:03:51,920 --> 01:03:54,640
uh you can pretty much do zigbee you

1588
01:03:54,640 --> 01:03:55,520
know

1589
01:03:55,520 --> 01:03:58,720
sniffing everything is then

1590
01:03:58,720 --> 01:04:00,559
managed on the cloud so

1591
01:04:00,559 --> 01:04:02,079
basically this is

1592
01:04:02,079 --> 01:04:03,039
uh

1593
01:04:03,039 --> 01:04:05,280
the the idea behind this is to create a

1594
01:04:05,280 --> 01:04:07,760
platform for security compliance testing

1595
01:04:07,760 --> 01:04:09,839
for iot products as well as

1596
01:04:09,839 --> 01:04:11,920
vulnerability management so you're not

1597
01:04:11,920 --> 01:04:14,640
only getting compliance uh

1598
01:04:14,640 --> 01:04:17,440
in the platform but you can also

1599
01:04:17,440 --> 01:04:19,920
do a full-blown vulnerability management

1600
01:04:19,920 --> 01:04:21,200
for your

1601
01:04:21,200 --> 01:04:22,160
products

1602
01:04:22,160 --> 01:04:24,839
for your or your customer

1603
01:04:24,839 --> 01:04:27,440
products and if you if you are

1604
01:04:27,440 --> 01:04:28,880
interested or if your company is

1605
01:04:28,880 --> 01:04:30,960
interested in this you can send me an

1606
01:04:30,960 --> 01:04:32,480
email on

1607
01:04:32,480 --> 01:04:33,359
these

1608
01:04:33,359 --> 01:04:35,440
email ids

1609
01:04:35,440 --> 01:04:36,319
and

1610
01:04:36,319 --> 01:04:39,039
any of these email ids and i'll be happy

1611
01:04:39,039 --> 01:04:41,039
to give you

1612
01:04:41,039 --> 01:04:44,440
beta access

