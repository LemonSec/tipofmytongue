1
00:00:05,920 --> 00:00:08,400
hello everyone my name is martin dorinal

2
00:00:08,400 --> 00:00:10,240
i'm a security researcher at the ramses

3
00:00:10,240 --> 00:00:12,320
labs and today i'm going to present a

4
00:00:12,320 --> 00:00:14,480
new set of techniques that can be used

5
00:00:14,480 --> 00:00:16,480
to obtain control of the response queue

6
00:00:16,480 --> 00:00:19,119
in a persistent connection by exploiting

7
00:00:19,119 --> 00:00:23,039
http the synchronization vulnerabilities

8
00:00:23,039 --> 00:00:24,720
so the agenda for today

9
00:00:24,720 --> 00:00:27,199
first i'm going to start introducing the

10
00:00:27,199 --> 00:00:30,400
concept of request smuggling and what is

11
00:00:30,400 --> 00:00:32,479
httpd synchronization and even though i

12
00:00:32,479 --> 00:00:34,000
expect that most of you already know

13
00:00:34,000 --> 00:00:36,239
what atp smart

14
00:00:36,239 --> 00:00:37,520
request marketing is and the

15
00:00:37,520 --> 00:00:39,600
synchronization i'm still going to make

16
00:00:39,600 --> 00:00:41,680
a quick recap and i'm also going to talk

17
00:00:41,680 --> 00:00:43,680
about the synchronization variants in

18
00:00:43,680 --> 00:00:45,760
particular one that was found and

19
00:00:45,760 --> 00:00:48,640
reported to many vendors that will be

20
00:00:48,640 --> 00:00:51,920
used in following demos and examples

21
00:00:51,920 --> 00:00:53,199
then i'm going to start talking about

22
00:00:53,199 --> 00:00:55,600
response modeling and how to the

23
00:00:55,600 --> 00:00:57,600
synchronized responses and the response

24
00:00:57,600 --> 00:01:00,160
queue and how to also

25
00:01:00,160 --> 00:01:02,160
obtain response concatenation to create

26
00:01:02,160 --> 00:01:04,720
new payloads and to cause what i call

27
00:01:04,720 --> 00:01:07,040
response scripting which will allow me

28
00:01:07,040 --> 00:01:08,720
to exploit the

29
00:01:08,720 --> 00:01:11,760
the browser of the victims and also to

30
00:01:11,760 --> 00:01:14,320
cause arbitrary proximate poisoning

31
00:01:14,320 --> 00:01:16,640
which will allow me to also persist the

32
00:01:16,640 --> 00:01:19,840
attacks which in the past was impossible

33
00:01:19,840 --> 00:01:23,600
and finally i will present some demos in

34
00:01:23,600 --> 00:01:25,840
in some labs and also in one of the most

35
00:01:25,840 --> 00:01:29,520
or the most used erp in the world

36
00:01:29,600 --> 00:01:33,759
so what is request smuggling

37
00:01:35,280 --> 00:01:37,360
the idea behind request magazine is to

38
00:01:37,360 --> 00:01:38,880
exploit http synchronization

39
00:01:38,880 --> 00:01:42,000
vulnerabilities and this kind of monavie

40
00:01:42,000 --> 00:01:42,960
was

41
00:01:42,960 --> 00:01:45,520
introduced or discovered in 2005 by

42
00:01:45,520 --> 00:01:49,439
watchfire and reborn in 2019 by james

43
00:01:49,439 --> 00:01:51,920
kettle who presented a set of

44
00:01:51,920 --> 00:01:54,159
methodologies that could be used to

45
00:01:54,159 --> 00:01:56,880
exploit in a much more reliable way this

46
00:01:56,880 --> 00:01:58,240
kind of attack this kind of

47
00:01:58,240 --> 00:01:59,840
vulnerabilities

48
00:01:59,840 --> 00:02:00,560
so

49
00:02:00,560 --> 00:02:02,560
the idea behind again discussing the

50
00:02:02,560 --> 00:02:04,560
synchronization is to abuse the

51
00:02:04,560 --> 00:02:07,439
discrepancies or the differences that

52
00:02:07,439 --> 00:02:09,919
a power surge in the front end and the

53
00:02:09,919 --> 00:02:11,440
back-end server has

54
00:02:11,440 --> 00:02:13,520
and in particular this these differences

55
00:02:13,520 --> 00:02:15,920
are related to the way that the parsers

56
00:02:15,920 --> 00:02:18,560
can find the or can calculate the length

57
00:02:18,560 --> 00:02:21,520
of the http message and the body of the

58
00:02:21,520 --> 00:02:22,879
of the request

59
00:02:22,879 --> 00:02:23,599
so

60
00:02:23,599 --> 00:02:25,360
if i'm able to

61
00:02:25,360 --> 00:02:27,520
cause this difference or cause these

62
00:02:27,520 --> 00:02:30,000
discrepancies then i will be able to

63
00:02:30,000 --> 00:02:32,720
split a single message that will be

64
00:02:32,720 --> 00:02:35,040
forward by the proxy into the back end

65
00:02:35,040 --> 00:02:36,480
and the back-end will consider this as

66
00:02:36,480 --> 00:02:40,080
two different parts and will allow me to

67
00:02:40,080 --> 00:02:40,879
cause

68
00:02:40,879 --> 00:02:42,800
affect the the victim's

69
00:02:42,800 --> 00:02:46,239
request and to place a prefix that will

70
00:02:46,239 --> 00:02:48,480
maybe execute something in the backend

71
00:02:48,480 --> 00:02:50,640
or cause some execution also in the

72
00:02:50,640 --> 00:02:52,239
browser

73
00:02:52,239 --> 00:02:54,400
so a simple example let's consider we

74
00:02:54,400 --> 00:02:56,959
have a proxy and a backend server the

75
00:02:56,959 --> 00:02:58,400
proxy will only

76
00:02:58,400 --> 00:03:00,720
take into take into consideration the

77
00:03:00,720 --> 00:03:02,480
the first content length if i send

78
00:03:02,480 --> 00:03:04,720
multiple content length headers and the

79
00:03:04,720 --> 00:03:06,080
backend will only take into

80
00:03:06,080 --> 00:03:08,000
consideration the last content length

81
00:03:08,000 --> 00:03:10,159
this is something rather common in many

82
00:03:10,159 --> 00:03:12,400
email servers and in many proxies

83
00:03:12,400 --> 00:03:14,400
because they have to choose

84
00:03:14,400 --> 00:03:16,480
in some cases they will not allow this

85
00:03:16,480 --> 00:03:18,319
but in many cases they will choose one

86
00:03:18,319 --> 00:03:20,159
of the content lengths and will use it

87
00:03:20,159 --> 00:03:21,840
to calculate the length

88
00:03:21,840 --> 00:03:24,640
so in this example i send the the

89
00:03:24,640 --> 00:03:26,560
following payload containing two content

90
00:03:26,560 --> 00:03:28,640
lengths the first one

91
00:03:28,640 --> 00:03:30,720
it will be used by the proxy so the

92
00:03:30,720 --> 00:03:32,879
proxy will forward the entire message to

93
00:03:32,879 --> 00:03:34,640
the back end considering that it's only

94
00:03:34,640 --> 00:03:35,519
a

95
00:03:35,519 --> 00:03:38,560
one single message

96
00:03:38,560 --> 00:03:40,959
but when this when this payload reaches

97
00:03:40,959 --> 00:03:43,120
the back end it will be split in two

98
00:03:43,120 --> 00:03:45,040
because the content length the second

99
00:03:45,040 --> 00:03:46,720
container length will be used so it will

100
00:03:46,720 --> 00:03:49,200
consider that only five bytes are in the

101
00:03:49,200 --> 00:03:50,560
in the body

102
00:03:50,560 --> 00:03:53,280
so only the first five a's will be used

103
00:03:53,280 --> 00:03:54,799
as part of the body

104
00:03:54,799 --> 00:03:57,360
and then the rest of the of the body

105
00:03:57,360 --> 00:04:00,640
will be used as an entire new http

106
00:04:00,640 --> 00:04:02,640
request which in this case will be a

107
00:04:02,640 --> 00:04:05,280
prefix because it's not completed

108
00:04:05,280 --> 00:04:07,760
so when uh when a new request reaches

109
00:04:07,760 --> 00:04:09,760
the proxy which in this case could be a

110
00:04:09,760 --> 00:04:11,840
victims request it will be also

111
00:04:11,840 --> 00:04:14,400
forwarded to the back end which will be

112
00:04:14,400 --> 00:04:17,199
concatenated with the previous um

113
00:04:17,199 --> 00:04:19,519
the previous prefix that i injected and

114
00:04:19,519 --> 00:04:20,720
therefore

115
00:04:20,720 --> 00:04:23,199
where will be executed instead of get to

116
00:04:23,199 --> 00:04:27,520
my my account that the victim issued

117
00:04:27,520 --> 00:04:29,280
the the backend will think that the

118
00:04:29,280 --> 00:04:31,280
request is i get to delete my account

119
00:04:31,280 --> 00:04:33,199
and in this case we can see that it will

120
00:04:33,199 --> 00:04:35,759
use the cookies and the session id

121
00:04:35,759 --> 00:04:38,160
and so probably the account of the big

122
00:04:38,160 --> 00:04:40,080
thing will be deleted

123
00:04:40,080 --> 00:04:41,440
but also the

124
00:04:41,440 --> 00:04:43,040
also the

125
00:04:43,040 --> 00:04:45,040
the response of this request will be

126
00:04:45,040 --> 00:04:47,759
sent back to the victim so if the if the

127
00:04:47,759 --> 00:04:49,360
response contains any malicious payload

128
00:04:49,360 --> 00:04:51,040
such as a javascript this will be

129
00:04:51,040 --> 00:04:54,800
executed in the victim's browser

130
00:04:55,040 --> 00:04:57,600
so we will see many of these diagrams

131
00:04:57,600 --> 00:04:59,440
because it's easier to explain many

132
00:04:59,440 --> 00:05:01,199
concepts

133
00:05:01,199 --> 00:05:03,600
and the idea again is the attacker will

134
00:05:03,600 --> 00:05:06,639
send a single a single request

135
00:05:06,639 --> 00:05:08,880
that will be forwarded entirely by the

136
00:05:08,880 --> 00:05:10,720
proxy the proxy will think that there's

137
00:05:10,720 --> 00:05:12,560
only one request

138
00:05:12,560 --> 00:05:14,800
the backend then will be splitting this

139
00:05:14,800 --> 00:05:16,560
request into

140
00:05:16,560 --> 00:05:18,400
it will create a response for the first

141
00:05:18,400 --> 00:05:20,479
part and it will be sent back to the

142
00:05:20,479 --> 00:05:22,000
attacker

143
00:05:22,000 --> 00:05:24,080
but then when when the victim or the

144
00:05:24,080 --> 00:05:26,080
client sends a new request

145
00:05:26,080 --> 00:05:27,840
this will be forwarded again by the

146
00:05:27,840 --> 00:05:29,680
proxy

147
00:05:29,680 --> 00:05:32,000
and the back-end will concatenate it

148
00:05:32,000 --> 00:05:35,039
with the previous injected prefix

149
00:05:35,039 --> 00:05:37,199
it will create a response

150
00:05:37,199 --> 00:05:39,120
and the response will again be sent back

151
00:05:39,120 --> 00:05:42,000
by to the client

152
00:05:42,960 --> 00:05:46,720
so that's the main idea of http request

153
00:05:46,720 --> 00:05:48,800
modeling or the synchronization we will

154
00:05:48,800 --> 00:05:51,199
see later how to exploit this or how to

155
00:05:51,199 --> 00:05:53,120
exploit using request smuggling

156
00:05:53,120 --> 00:05:54,080
but

157
00:05:54,080 --> 00:05:56,000
as i said we can use

158
00:05:56,000 --> 00:05:58,000
two for example two content lengths but

159
00:05:58,000 --> 00:05:59,759
also there are many ways of creating

160
00:05:59,759 --> 00:06:01,680
this synchronization

161
00:06:01,680 --> 00:06:04,080
one of the most interesting

162
00:06:04,080 --> 00:06:05,759
variants that are called

163
00:06:05,759 --> 00:06:08,240
that i found and i was able to report

164
00:06:08,240 --> 00:06:11,440
this new variant to many vendors was to

165
00:06:11,440 --> 00:06:12,319
use

166
00:06:12,319 --> 00:06:14,160
some new connections some new connection

167
00:06:14,160 --> 00:06:16,639
headers that will allow me to exploit

168
00:06:16,639 --> 00:06:19,199
this this kind of vulnerabilities

169
00:06:19,199 --> 00:06:21,759
so the idea is in many in many previous

170
00:06:21,759 --> 00:06:24,880
examples we were using uh an issue or we

171
00:06:24,880 --> 00:06:26,880
are exploiting an issue that exists

172
00:06:26,880 --> 00:06:29,199
because of the implementation of the rfc

173
00:06:29,199 --> 00:06:31,199
or of the parser but there is also

174
00:06:31,199 --> 00:06:33,440
another way of exploiting this and it's

175
00:06:33,440 --> 00:06:34,400
to

176
00:06:34,400 --> 00:06:36,960
use the rfc and to use some concept that

177
00:06:36,960 --> 00:06:39,600
when the when the http rfc was written

178
00:06:39,600 --> 00:06:42,240
they were not considered

179
00:06:42,240 --> 00:06:43,919
and to understand this we first need to

180
00:06:43,919 --> 00:06:46,319
understand what is a end-to-end and a

181
00:06:46,319 --> 00:06:48,960
whole by-hop header so an entrance here

182
00:06:48,960 --> 00:06:50,960
is one is those headers that are

183
00:06:50,960 --> 00:06:53,280
intended to go from the client to the

184
00:06:53,280 --> 00:06:55,520
back end and forwarded by any proxy in

185
00:06:55,520 --> 00:06:57,360
the middle

186
00:06:57,360 --> 00:06:59,360
the other way is the hope i hope header

187
00:06:59,360 --> 00:07:01,599
which is not intended to be forwarded by

188
00:07:01,599 --> 00:07:04,160
all the all the process and instead

189
00:07:04,160 --> 00:07:06,000
when the proxy receives a hope i hope

190
00:07:06,000 --> 00:07:08,160
header it should process it and delete

191
00:07:08,160 --> 00:07:10,160
it and then forward the request without

192
00:07:10,160 --> 00:07:12,880
this header okay so

193
00:07:12,880 --> 00:07:15,520
we can declare this using the connection

194
00:07:15,520 --> 00:07:16,560
header

195
00:07:16,560 --> 00:07:17,919
most of you already know the connection

196
00:07:17,919 --> 00:07:19,680
here and it's used to

197
00:07:19,680 --> 00:07:21,280
establish direct directives such as

198
00:07:21,280 --> 00:07:23,360
close or keep alive to say how the

199
00:07:23,360 --> 00:07:24,720
connection should be should be

200
00:07:24,720 --> 00:07:25,759
established

201
00:07:25,759 --> 00:07:26,639
but

202
00:07:26,639 --> 00:07:29,039
it's a more general purpose a kind of

203
00:07:29,039 --> 00:07:30,960
header because we can use it to

204
00:07:30,960 --> 00:07:33,360
establish to set any other custom custom

205
00:07:33,360 --> 00:07:36,160
value and then this value will be

206
00:07:36,160 --> 00:07:37,840
searched in the headers and delete it

207
00:07:37,840 --> 00:07:41,840
when when the request is forwarded

208
00:07:41,919 --> 00:07:45,280
so as an example if we send a

209
00:07:45,280 --> 00:07:47,599
a request saying we have the connection

210
00:07:47,599 --> 00:07:50,639
keep alive and the option value then we

211
00:07:50,639 --> 00:07:53,120
can set a keep a live header to say how

212
00:07:53,120 --> 00:07:55,280
many how many time or how many requests

213
00:07:55,280 --> 00:07:56,560
should be

214
00:07:56,560 --> 00:07:58,479
should be used in the same persistent

215
00:07:58,479 --> 00:08:01,120
connection but also we can set an option

216
00:08:01,120 --> 00:08:03,120
header which is the value we set in the

217
00:08:03,120 --> 00:08:04,240
connection

218
00:08:04,240 --> 00:08:05,680
and

219
00:08:05,680 --> 00:08:07,919
what will cause this is that the proxy

220
00:08:07,919 --> 00:08:10,400
before forwarding this request

221
00:08:10,400 --> 00:08:12,560
we delete the option header

222
00:08:12,560 --> 00:08:14,720
and we'll delete the keep a live header

223
00:08:14,720 --> 00:08:17,360
as well as of course the connection

224
00:08:17,360 --> 00:08:18,080
so

225
00:08:18,080 --> 00:08:20,479
it's not interesting as us using with a

226
00:08:20,479 --> 00:08:23,120
keep alive or a close but what if we

227
00:08:23,120 --> 00:08:25,759
instead of setting uh a keep a live or a

228
00:08:25,759 --> 00:08:28,080
value that is expected we set some value

229
00:08:28,080 --> 00:08:29,759
that is expected to be an end-to-end

230
00:08:29,759 --> 00:08:32,320
header for example the content length

231
00:08:32,320 --> 00:08:35,279
so if i send this request to a proxy the

232
00:08:35,279 --> 00:08:36,958
proxy will think that the content length

233
00:08:36,958 --> 00:08:38,559
is 13 bytes

234
00:08:38,559 --> 00:08:40,399
it will forward the entire request but

235
00:08:40,399 --> 00:08:42,479
before it does it will remove the

236
00:08:42,479 --> 00:08:44,480
content length header

237
00:08:44,480 --> 00:08:45,839
and the connection header because it

238
00:08:45,839 --> 00:08:48,240
thinks it's a hobbyhole header

239
00:08:48,240 --> 00:08:50,399
so when this reaches the backend the

240
00:08:50,399 --> 00:08:52,800
smuggled data will be will be considered

241
00:08:52,800 --> 00:08:54,080
to be another request because the

242
00:08:54,080 --> 00:08:55,600
content length is not there anymore so

243
00:08:55,600 --> 00:08:59,040
it will consider it to be zero

244
00:08:59,440 --> 00:09:01,040
this vulnerability was reported to

245
00:09:01,040 --> 00:09:01,920
google

246
00:09:01,920 --> 00:09:03,680
and to many other vendors and in this

247
00:09:03,680 --> 00:09:06,000
case google was vulnerable in all their

248
00:09:06,000 --> 00:09:09,040
domains and i was able to prove that we

249
00:09:09,040 --> 00:09:11,920
could hijack any any user account or any

250
00:09:11,920 --> 00:09:12,880
session

251
00:09:12,880 --> 00:09:17,360
a cookie using this kind of attacks

252
00:09:18,560 --> 00:09:21,120
okay so how we can exploit this kind of

253
00:09:21,120 --> 00:09:24,080
vulnerabilities we said we can modify

254
00:09:24,080 --> 00:09:26,560
the request of a victim so that it cause

255
00:09:26,560 --> 00:09:28,959
some different effect for the using the

256
00:09:28,959 --> 00:09:31,279
cookies but there are also other kind of

257
00:09:31,279 --> 00:09:32,240
attacks

258
00:09:32,240 --> 00:09:34,000
like for example bypass a front-end

259
00:09:34,000 --> 00:09:34,959
control

260
00:09:34,959 --> 00:09:37,519
this is we can bypass some authorization

261
00:09:37,519 --> 00:09:39,920
controls in the proxies because we can

262
00:09:39,920 --> 00:09:43,360
hide some we can hit some request fro

263
00:09:43,360 --> 00:09:45,120
from the control because it will not

264
00:09:45,120 --> 00:09:46,720
consider the

265
00:09:46,720 --> 00:09:48,480
the smuggler request to be another

266
00:09:48,480 --> 00:09:50,480
request so it will not

267
00:09:50,480 --> 00:09:53,040
uh it would not verify that for example

268
00:09:53,040 --> 00:09:54,880
if we could if we try to access to our

269
00:09:54,880 --> 00:09:57,200
url that it should be forbidden

270
00:09:57,200 --> 00:09:58,399
this won't be

271
00:09:58,399 --> 00:10:01,360
verified by the proxy

272
00:10:01,360 --> 00:10:02,800
also we can upgrade existing

273
00:10:02,800 --> 00:10:05,120
vulnerabilities such as xss open

274
00:10:05,120 --> 00:10:06,640
redirects another kind of

275
00:10:06,640 --> 00:10:09,519
vulnerabilities that require for user

276
00:10:09,519 --> 00:10:10,640
interaction

277
00:10:10,640 --> 00:10:13,920
and that is because we can hide our our

278
00:10:13,920 --> 00:10:16,720
injection our xss in the in the

279
00:10:16,720 --> 00:10:18,880
smackdown request and this will cause

280
00:10:18,880 --> 00:10:21,519
that the response is the response for

281
00:10:21,519 --> 00:10:23,760
the victim is modified and then the

282
00:10:23,760 --> 00:10:25,920
browser gets exploited using this kind

283
00:10:25,920 --> 00:10:28,240
of attacks

284
00:10:28,240 --> 00:10:30,959
we can also hijack request a victim's

285
00:10:30,959 --> 00:10:33,440
request where if we are able to store

286
00:10:33,440 --> 00:10:35,839
the the request using some kind of

287
00:10:35,839 --> 00:10:38,240
storing and retrieving features such as

288
00:10:38,240 --> 00:10:39,920
an email we could use

289
00:10:39,920 --> 00:10:43,040
um the prefix to be a request to one

290
00:10:43,040 --> 00:10:45,760
place that we can later retrieve the

291
00:10:45,760 --> 00:10:47,920
information

292
00:10:47,920 --> 00:10:50,240
and we can also cause some other kind of

293
00:10:50,240 --> 00:10:52,399
attacks such as uh server-side request

294
00:10:52,399 --> 00:10:54,720
forgery for if there is an internal

295
00:10:54,720 --> 00:10:57,200
rejection supported or other kind of

296
00:10:57,200 --> 00:10:59,600
more interesting attacks but are much

297
00:10:59,600 --> 00:11:01,839
more complex

298
00:11:01,839 --> 00:11:03,760
so this is all

299
00:11:03,760 --> 00:11:06,320
uh request magazine and why do we need

300
00:11:06,320 --> 00:11:08,800
more research about it it's it seems

301
00:11:08,800 --> 00:11:10,640
like we can exploit everything just with

302
00:11:10,640 --> 00:11:12,320
this

303
00:11:12,320 --> 00:11:14,640
but the truth is that there are some

304
00:11:14,640 --> 00:11:17,200
issues with the with the way that james

305
00:11:17,200 --> 00:11:19,040
kettle presented to exploit these

306
00:11:19,040 --> 00:11:20,480
vulnerabilities and there were presented

307
00:11:20,480 --> 00:11:22,640
in the past and this is

308
00:11:22,640 --> 00:11:24,880
bypass front-end controls means that we

309
00:11:24,880 --> 00:11:26,959
only can bypass controls that are in the

310
00:11:26,959 --> 00:11:29,040
proxy not in the back end and that's

311
00:11:29,040 --> 00:11:32,000
rather uncommon in many applications

312
00:11:32,000 --> 00:11:33,120
we can also upgrade the existing

313
00:11:33,120 --> 00:11:36,079
vulnerabilities yes but there are we

314
00:11:36,079 --> 00:11:38,480
need for we need to have extra bubbling

315
00:11:38,480 --> 00:11:40,560
this before so if we look for an

316
00:11:40,560 --> 00:11:43,200
application and we find a http

317
00:11:43,200 --> 00:11:44,560
synchronization but we don't have any

318
00:11:44,560 --> 00:11:48,160
other vulnerability then this won't work

319
00:11:48,160 --> 00:11:51,200
we can also hijack requests yes but only

320
00:11:51,200 --> 00:11:54,320
if the data if we can store data and we

321
00:11:54,320 --> 00:11:56,399
can then retrieve this data and this

322
00:11:56,399 --> 00:11:57,600
feature is not

323
00:11:57,600 --> 00:12:00,320
so much so common in many applications

324
00:12:00,320 --> 00:12:02,800
and also in many in many cases we will

325
00:12:02,800 --> 00:12:04,800
need to be authenticated

326
00:12:04,800 --> 00:12:07,680
and again we need many preconditions and

327
00:12:07,680 --> 00:12:10,480
it's not so reliable the attack so the

328
00:12:10,480 --> 00:12:12,560
attack complexity is quite high

329
00:12:12,560 --> 00:12:14,720
and finally it's not persistent we need

330
00:12:14,720 --> 00:12:18,240
to keep attacking the system to to get

331
00:12:18,240 --> 00:12:19,360
the

332
00:12:19,360 --> 00:12:21,279
to exploit victims and to get their

333
00:12:21,279 --> 00:12:23,839
responses so to get there to get the

334
00:12:23,839 --> 00:12:26,079
requests

335
00:12:26,079 --> 00:12:26,880
so

336
00:12:26,880 --> 00:12:28,959
i started looking for other kind of

337
00:12:28,959 --> 00:12:31,440
attack vectors and then i start thinking

338
00:12:31,440 --> 00:12:33,839
well if i'm able to smuggle a request in

339
00:12:33,839 --> 00:12:36,399
the risk in the request queue then i am

340
00:12:36,399 --> 00:12:38,480
able to smuggle a message in the

341
00:12:38,480 --> 00:12:41,040
response queue

342
00:12:41,040 --> 00:12:43,440
and the answer was yes

343
00:12:43,440 --> 00:12:45,680
but to do so instead of injecting a

344
00:12:45,680 --> 00:12:48,560
prefix i will have to inject a comp an

345
00:12:48,560 --> 00:12:50,959
entire request that is completed by by

346
00:12:50,959 --> 00:12:53,120
itself okay it won't need another

347
00:12:53,120 --> 00:12:55,680
request from a victim or from

348
00:12:55,680 --> 00:12:57,920
the attacker again

349
00:12:57,920 --> 00:13:01,200
so in this case as i said i will use the

350
00:13:01,200 --> 00:13:04,160
same kind of ideas but i won't inject

351
00:13:04,160 --> 00:13:06,000
the prefix i will inject our entire

352
00:13:06,000 --> 00:13:08,320
request which is completed

353
00:13:08,320 --> 00:13:10,800
and in this case

354
00:13:10,800 --> 00:13:12,639
we can see that if i send this to

355
00:13:12,639 --> 00:13:15,360
request or this smart request then this

356
00:13:15,360 --> 00:13:17,279
will cause that the

357
00:13:17,279 --> 00:13:20,399
that the backend recreate two responses

358
00:13:20,399 --> 00:13:23,120
okay so one request was issued by the

359
00:13:23,120 --> 00:13:26,320
attacker and two responses were created

360
00:13:26,320 --> 00:13:28,399
and what's interesting about this

361
00:13:28,399 --> 00:13:29,200
well

362
00:13:29,200 --> 00:13:30,800
if then

363
00:13:30,800 --> 00:13:33,120
a victim issues a new request the proxy

364
00:13:33,120 --> 00:13:34,880
will also forward it but it will think

365
00:13:34,880 --> 00:13:36,880
that there are two only two requests

366
00:13:36,880 --> 00:13:37,920
issued

367
00:13:37,920 --> 00:13:38,720
so

368
00:13:38,720 --> 00:13:40,160
the first response

369
00:13:40,160 --> 00:13:41,600
will be sent back to sorry the first

370
00:13:41,600 --> 00:13:43,040
response will be sent back to the

371
00:13:43,040 --> 00:13:44,079
attacker

372
00:13:44,079 --> 00:13:46,320
the second response will be sent back to

373
00:13:46,320 --> 00:13:47,519
the victim

374
00:13:47,519 --> 00:13:49,839
and if the attacker sends a new request

375
00:13:49,839 --> 00:13:52,000
he will receive the response that was

376
00:13:52,000 --> 00:13:54,720
intended to go to the victim so that way

377
00:13:54,720 --> 00:13:57,199
i'm able to hijack different responses

378
00:13:57,199 --> 00:13:59,040
that are not intended for me but for

379
00:13:59,040 --> 00:14:00,959
other victims these responses in this

380
00:14:00,959 --> 00:14:03,120
case if i if i hijack a response to a

381
00:14:03,120 --> 00:14:05,519
login i will probably hijack the cookies

382
00:14:05,519 --> 00:14:07,120
of the session cookies that will allow

383
00:14:07,120 --> 00:14:09,600
me to obtain control of the victims

384
00:14:09,600 --> 00:14:11,760
accounts

385
00:14:11,760 --> 00:14:14,240
again using this diagram

386
00:14:14,240 --> 00:14:15,839
we see that the attacker and the client

387
00:14:15,839 --> 00:14:18,800
sends both requests

388
00:14:18,800 --> 00:14:20,160
the proxy thinks that there are two

389
00:14:20,160 --> 00:14:22,560
requests only so it will issue them to

390
00:14:22,560 --> 00:14:24,800
it will forward them to the back end

391
00:14:24,800 --> 00:14:26,480
but the back end will split them and

392
00:14:26,480 --> 00:14:29,120
create three different responses

393
00:14:29,120 --> 00:14:31,440
so when these three responses go back to

394
00:14:31,440 --> 00:14:34,240
the proxy the proxy will send the first

395
00:14:34,240 --> 00:14:35,920
one to the attacker

396
00:14:35,920 --> 00:14:37,760
the second one which was injected by the

397
00:14:37,760 --> 00:14:40,720
attacker it will be sent to the client

398
00:14:40,720 --> 00:14:42,160
and then when the attacker sends a new

399
00:14:42,160 --> 00:14:45,040
request he will obtain as i said the

400
00:14:45,040 --> 00:14:48,480
victim's response

401
00:14:49,519 --> 00:14:51,680
but if we try this attack

402
00:14:51,680 --> 00:14:54,000
we will see that it fails and this is

403
00:14:54,000 --> 00:14:56,160
because the connection keeps get close

404
00:14:56,160 --> 00:14:59,040
keeps closing it and

405
00:14:59,040 --> 00:15:01,600
we can understand why if we consider how

406
00:15:01,600 --> 00:15:03,199
pipelining works

407
00:15:03,199 --> 00:15:05,600
so when a proxy receives these two

408
00:15:05,600 --> 00:15:07,360
requests

409
00:15:07,360 --> 00:15:09,440
it will set it will send the first one

410
00:15:09,440 --> 00:15:10,839
through one

411
00:15:10,839 --> 00:15:13,279
connection but instead of sending the

412
00:15:13,279 --> 00:15:15,040
clients or the victim's request if it

413
00:15:15,040 --> 00:15:16,720
was received at the same time through

414
00:15:16,720 --> 00:15:18,720
the same connection

415
00:15:18,720 --> 00:15:20,800
it will establish a new connection

416
00:15:20,800 --> 00:15:23,600
and therefore the the pro the message

417
00:15:23,600 --> 00:15:25,199
will be sent through this connection and

418
00:15:25,199 --> 00:15:27,839
it won't be affected by the attackers by

419
00:15:27,839 --> 00:15:29,440
the attacker's request

420
00:15:29,440 --> 00:15:30,240
so

421
00:15:30,240 --> 00:15:31,759
again the three responses will be

422
00:15:31,759 --> 00:15:33,360
created

423
00:15:33,360 --> 00:15:36,160
but in this case the client is as i said

424
00:15:36,160 --> 00:15:38,480
is not affected so we cannot get the

425
00:15:38,480 --> 00:15:41,199
client's response in order to modify the

426
00:15:41,199 --> 00:15:44,560
client the client's request

427
00:15:45,120 --> 00:15:47,519
what's more when the proxy receives an

428
00:15:47,519 --> 00:15:49,839
extra an extra response

429
00:15:49,839 --> 00:15:51,519
it will it will think that this is a

430
00:15:51,519 --> 00:15:53,600
connection error because he only issued

431
00:15:53,600 --> 00:15:55,440
one request so

432
00:15:55,440 --> 00:15:57,360
for each request the proxy issues it

433
00:15:57,360 --> 00:15:59,680
should receive one response not two

434
00:15:59,680 --> 00:16:01,279
so this will cause that the connection

435
00:16:01,279 --> 00:16:02,560
gets closed

436
00:16:02,560 --> 00:16:04,639
and the attacker's

437
00:16:04,639 --> 00:16:07,519
injection gets lost

438
00:16:07,519 --> 00:16:10,320
so how can we solve this problem so the

439
00:16:10,320 --> 00:16:12,079
real issue here is that the condition is

440
00:16:12,079 --> 00:16:14,959
being closed because if not a following

441
00:16:14,959 --> 00:16:17,519
client's request will also be

442
00:16:17,519 --> 00:16:19,120
be forwarded through the same connection

443
00:16:19,120 --> 00:16:21,680
and it will work

444
00:16:21,680 --> 00:16:22,959
so the idea is

445
00:16:22,959 --> 00:16:25,199
the attacker will send a request

446
00:16:25,199 --> 00:16:27,519
that will be splitted in the back end

447
00:16:27,519 --> 00:16:29,680
but in this case the second rig the

448
00:16:29,680 --> 00:16:31,759
second request will take some time we

449
00:16:31,759 --> 00:16:34,000
will call it a sleeping request now this

450
00:16:34,000 --> 00:16:36,000
time doesn't need to be a long time he

451
00:16:36,000 --> 00:16:38,399
just need to allow the attacker to

452
00:16:38,399 --> 00:16:41,120
receive his response

453
00:16:41,120 --> 00:16:44,000
and the proxy to receive a new a new

454
00:16:44,000 --> 00:16:46,639
request from a client or from a victim

455
00:16:46,639 --> 00:16:49,360
which will be again issued to the or

456
00:16:49,360 --> 00:16:51,839
forward to the back end

457
00:16:51,839 --> 00:16:54,079
and now the response that was injected

458
00:16:54,079 --> 00:16:56,079
can be forwarded back to the back for

459
00:16:56,079 --> 00:16:57,199
the proxy

460
00:16:57,199 --> 00:16:59,279
this will cause that decline received

461
00:16:59,279 --> 00:17:00,079
this

462
00:17:00,079 --> 00:17:02,800
this injected response

463
00:17:02,800 --> 00:17:04,480
and when the attacker sends his new

464
00:17:04,480 --> 00:17:07,199
request he will in this case receive the

465
00:17:07,199 --> 00:17:08,319
victim's

466
00:17:08,319 --> 00:17:10,799
response

467
00:17:11,919 --> 00:17:13,199
if we use

468
00:17:13,199 --> 00:17:15,919
another kind of injection which is what

469
00:17:15,919 --> 00:17:19,119
i said a sleepy request we see that this

470
00:17:19,119 --> 00:17:21,199
attack gets successful we are able to

471
00:17:21,199 --> 00:17:24,000
hijack a lot of responses

472
00:17:24,000 --> 00:17:27,359
and so we have fulfilled to the the we

473
00:17:27,359 --> 00:17:28,160
have

474
00:17:28,160 --> 00:17:30,400
bypassed this issue and we are able to

475
00:17:30,400 --> 00:17:33,039
hijack responses

476
00:17:33,039 --> 00:17:35,679
so this is not quite interesting it was

477
00:17:35,679 --> 00:17:39,039
not known but it's still hard to exploit

478
00:17:39,039 --> 00:17:39,840
so

479
00:17:39,840 --> 00:17:42,559
what i wanted is another way to actually

480
00:17:42,559 --> 00:17:44,400
create new payloads because i still have

481
00:17:44,400 --> 00:17:46,480
the same issues i will i am able to

482
00:17:46,480 --> 00:17:48,000
hijack responses but i have the same

483
00:17:48,000 --> 00:17:50,559
issues as not being able to create a

484
00:17:50,559 --> 00:17:53,039
attacks with with like xss if i don't

485
00:17:53,039 --> 00:17:55,520
have an xss

486
00:17:55,520 --> 00:17:56,559
so now

487
00:17:56,559 --> 00:17:59,039
if i can smuggle one request one entire

488
00:17:59,039 --> 00:18:01,520
request inside my my carrying my

489
00:18:01,520 --> 00:18:03,679
carrying message i can also smuggle two

490
00:18:03,679 --> 00:18:05,039
requests

491
00:18:05,039 --> 00:18:07,200
so in this case i will show how to use

492
00:18:07,200 --> 00:18:09,360
the same the same ideas or the same

493
00:18:09,360 --> 00:18:14,160
attack to hijack a request from a victim

494
00:18:14,160 --> 00:18:16,559
and this is without any storage

495
00:18:16,559 --> 00:18:18,480
feature or without having to retrieve

496
00:18:18,480 --> 00:18:19,760
any data

497
00:18:19,760 --> 00:18:22,799
so the idea is we will use a reflection

498
00:18:22,799 --> 00:18:24,960
and then add a synchronization to obtain

499
00:18:24,960 --> 00:18:27,440
the victim's response

500
00:18:27,440 --> 00:18:29,440
in this example we send one request

501
00:18:29,440 --> 00:18:31,919
sorry we send one request that will be

502
00:18:31,919 --> 00:18:34,559
forwarded by the proxy

503
00:18:34,559 --> 00:18:36,640
the proxy the sorry the backend will

504
00:18:36,640 --> 00:18:38,320
receive this and split them into three

505
00:18:38,320 --> 00:18:41,039
different requests

506
00:18:41,039 --> 00:18:42,640
the first request will create a response

507
00:18:42,640 --> 00:18:44,799
that will go back to the attacker

508
00:18:44,799 --> 00:18:47,200
and now the proxy will be able to

509
00:18:47,200 --> 00:18:49,440
receive another another request from for

510
00:18:49,440 --> 00:18:51,600
example a victim and we'll forward it

511
00:18:51,600 --> 00:18:54,000
back to the to the back end

512
00:18:54,000 --> 00:18:55,440
when the back-end receives this it will

513
00:18:55,440 --> 00:18:57,600
concatenate it with a with the last

514
00:18:57,600 --> 00:18:59,120
request

515
00:18:59,120 --> 00:19:01,760
and now the sleepy request

516
00:19:01,760 --> 00:19:03,919
create a response this will go back to

517
00:19:03,919 --> 00:19:05,919
the big team as we already saw

518
00:19:05,919 --> 00:19:09,120
but now the the extra the extra request

519
00:19:09,120 --> 00:19:11,440
that was injected in the backend

520
00:19:11,440 --> 00:19:13,039
will use the

521
00:19:13,039 --> 00:19:14,720
the request that was issued by the

522
00:19:14,720 --> 00:19:17,039
attacker sorry by the victim

523
00:19:17,039 --> 00:19:19,280
to to reflect it and to reflect the

524
00:19:19,280 --> 00:19:20,240
content

525
00:19:20,240 --> 00:19:22,640
if you see i use a content length a big

526
00:19:22,640 --> 00:19:25,440
content length here and that is to allow

527
00:19:25,440 --> 00:19:27,840
the attacker to send extra data that

528
00:19:27,840 --> 00:19:30,320
will be also considered concatenated and

529
00:19:30,320 --> 00:19:32,960
to avoid that the the back end creates

530
00:19:32,960 --> 00:19:34,640
the response before the new data is

531
00:19:34,640 --> 00:19:37,600
arrived is retrieved

532
00:19:37,600 --> 00:19:40,559
so what this will create is a new

533
00:19:40,559 --> 00:19:42,720
response containing the

534
00:19:42,720 --> 00:19:45,120
the request of the victim

535
00:19:45,120 --> 00:19:47,600
but as i'm able to synchronize this the

536
00:19:47,600 --> 00:19:52,360
attacker will then receive this response

537
00:19:52,960 --> 00:19:56,000
so again not so much interesting i want

538
00:19:56,000 --> 00:19:58,080
to do something more i want to create

539
00:19:58,080 --> 00:19:59,280
new payloads

540
00:19:59,280 --> 00:20:00,799
so this is when

541
00:20:00,799 --> 00:20:02,720
i started looking for concatenation and

542
00:20:02,720 --> 00:20:03,919
to

543
00:20:03,919 --> 00:20:06,640
desynchronize something else so until

544
00:20:06,640 --> 00:20:09,280
now we are able to desynchronize the

545
00:20:09,280 --> 00:20:11,600
the request queue okay by using

546
00:20:11,600 --> 00:20:13,600
different content lengths or by using a

547
00:20:13,600 --> 00:20:15,919
transfer encoding but

548
00:20:15,919 --> 00:20:17,840
is it possible to desynchronize the

549
00:20:17,840 --> 00:20:19,280
response queue

550
00:20:19,280 --> 00:20:21,039
i know that i cannot control the content

551
00:20:21,039 --> 00:20:23,679
length because well the content length

552
00:20:23,679 --> 00:20:25,360
is created by the backend so it's

553
00:20:25,360 --> 00:20:27,280
impossible for me to actually

554
00:20:27,280 --> 00:20:29,600
modify the content so that this gets the

555
00:20:29,600 --> 00:20:30,720
synchronized

556
00:20:30,720 --> 00:20:31,600
but

557
00:20:31,600 --> 00:20:33,440
are there any kind of

558
00:20:33,440 --> 00:20:36,400
request or maybe responses that

559
00:20:36,400 --> 00:20:38,880
use a different way of

560
00:20:38,880 --> 00:20:41,600
of calculating the length

561
00:20:41,600 --> 00:20:42,320
and

562
00:20:42,320 --> 00:20:43,440
this is

563
00:20:43,440 --> 00:20:45,600
this is true for head responses

564
00:20:45,600 --> 00:20:48,320
so on for health requests so if i issue

565
00:20:48,320 --> 00:20:51,440
a head request the proxy will know that

566
00:20:51,440 --> 00:20:53,840
the the response should only should not

567
00:20:53,840 --> 00:20:56,400
contain anybody

568
00:20:56,400 --> 00:21:00,240
but the rfc allows the the both the rig

569
00:21:00,240 --> 00:21:03,039
the back end and the proxy to establish

570
00:21:03,039 --> 00:21:05,679
a content length that will not be used

571
00:21:05,679 --> 00:21:09,120
so for example this is a get request to

572
00:21:09,120 --> 00:21:11,679
google to uh not found to any any place

573
00:21:11,679 --> 00:21:14,720
in google and if we set a get to

574
00:21:14,720 --> 00:21:17,120
let's say aaa we will see that we

575
00:21:17,120 --> 00:21:19,039
receive a response with a content length

576
00:21:19,039 --> 00:21:23,320
of 100 157

577
00:21:23,679 --> 00:21:24,400
but

578
00:21:24,400 --> 00:21:26,720
if we issue the same request with a head

579
00:21:26,720 --> 00:21:30,080
we are head um

580
00:21:30,080 --> 00:21:32,640
sorry ahead request

581
00:21:32,640 --> 00:21:34,480
we will be able to receive the same

582
00:21:34,480 --> 00:21:37,200
response only the headers but the

583
00:21:37,200 --> 00:21:39,760
content length is still used

584
00:21:39,760 --> 00:21:40,480
so

585
00:21:40,480 --> 00:21:42,799
the idea is the proxy knows that he

586
00:21:42,799 --> 00:21:45,919
should a hit request so it won't

587
00:21:45,919 --> 00:21:47,840
consider the content length and this is

588
00:21:47,840 --> 00:21:49,919
there is no problem using this

589
00:21:49,919 --> 00:21:52,080
but what if we are able to

590
00:21:52,080 --> 00:21:53,679
cause that the proxy phase to match

591
00:21:53,679 --> 00:21:56,640
responses and requests so are we able to

592
00:21:56,640 --> 00:21:58,480
cause that the proxy believe that it

593
00:21:58,480 --> 00:22:00,960
issued a a get request when he actually

594
00:22:00,960 --> 00:22:03,360
issued a head request

595
00:22:03,360 --> 00:22:05,760
and the answer is yes we are and we are

596
00:22:05,760 --> 00:22:07,360
because we are using this the

597
00:22:07,360 --> 00:22:09,600
synchronization attack

598
00:22:09,600 --> 00:22:10,400
so

599
00:22:10,400 --> 00:22:14,080
if i send a get a get request containing

600
00:22:14,080 --> 00:22:16,480
two smart requests

601
00:22:16,480 --> 00:22:18,720
the first one using a head and the

602
00:22:18,720 --> 00:22:21,760
second one using a gate

603
00:22:23,760 --> 00:22:26,159
this will cause that the back end split

604
00:22:26,159 --> 00:22:28,720
them into three now the proxy remember

605
00:22:28,720 --> 00:22:30,960
the proxy only sees one request so it

606
00:22:30,960 --> 00:22:33,840
thinks that it issue a a get request to

607
00:22:33,840 --> 00:22:35,600
the back end

608
00:22:35,600 --> 00:22:36,480
so

609
00:22:36,480 --> 00:22:38,240
the backend will respond the first one

610
00:22:38,240 --> 00:22:39,520
and this will be sent back to the

611
00:22:39,520 --> 00:22:40,559
attacker

612
00:22:40,559 --> 00:22:42,320
but when another

613
00:22:42,320 --> 00:22:45,200
another request reaches the the proxy it

614
00:22:45,200 --> 00:22:47,200
will forward it and in this case it's a

615
00:22:47,200 --> 00:22:49,919
get request so again the the proxy

616
00:22:49,919 --> 00:22:53,679
thinks that he had issued a get request

617
00:22:53,679 --> 00:22:54,559
when

618
00:22:54,559 --> 00:22:56,320
the back end will respond to a head

619
00:22:56,320 --> 00:22:57,360
request

620
00:22:57,360 --> 00:22:59,919
so when the proxy receives this request

621
00:22:59,919 --> 00:23:01,440
it will consider the content length to

622
00:23:01,440 --> 00:23:02,960
be valid

623
00:23:02,960 --> 00:23:04,960
and it will wait for 50 bytes extra for

624
00:23:04,960 --> 00:23:06,799
frequently

625
00:23:06,799 --> 00:23:09,919
so when the next response is generated

626
00:23:09,919 --> 00:23:11,919
and is obtained by the proxy it will use

627
00:23:11,919 --> 00:23:14,400
the first 15 bytes

628
00:23:14,400 --> 00:23:17,280
as the body of the of the first

629
00:23:17,280 --> 00:23:18,880
response

630
00:23:18,880 --> 00:23:21,200
and this will be sent back to the victim

631
00:23:21,200 --> 00:23:24,400
for his get request now the extra bytes

632
00:23:24,400 --> 00:23:26,159
will be used as another response which

633
00:23:26,159 --> 00:23:27,840
in this case is a notable response

634
00:23:27,840 --> 00:23:29,440
because it's not using

635
00:23:29,440 --> 00:23:30,799
the http

636
00:23:30,799 --> 00:23:32,480
beginning bytes

637
00:23:32,480 --> 00:23:33,919
so this will be discarded and the

638
00:23:33,919 --> 00:23:36,240
connection will be closed

639
00:23:36,240 --> 00:23:38,400
again let's see this in a

640
00:23:38,400 --> 00:23:40,799
in an example

641
00:23:40,799 --> 00:23:43,120
we have an attacker who sends his get

642
00:23:43,120 --> 00:23:45,600
request containing his two smart

643
00:23:45,600 --> 00:23:50,159
requests the red one remember is a head

644
00:23:50,159 --> 00:23:52,320
this will be issued or sent back to the

645
00:23:52,320 --> 00:23:53,600
backend

646
00:23:53,600 --> 00:23:55,520
the backend will then create three

647
00:23:55,520 --> 00:23:58,320
responses the first one will go back to

648
00:23:58,320 --> 00:24:00,400
the attacker

649
00:24:00,400 --> 00:24:02,000
there's no problem here

650
00:24:02,000 --> 00:24:03,919
now when the client sends his get

651
00:24:03,919 --> 00:24:05,520
request

652
00:24:05,520 --> 00:24:07,679
the proxy will forward this and think

653
00:24:07,679 --> 00:24:09,679
that there is a get request in the

654
00:24:09,679 --> 00:24:12,640
in the request and response queue

655
00:24:12,640 --> 00:24:15,360
so when the response is reached back the

656
00:24:15,360 --> 00:24:17,039
proxy

657
00:24:17,039 --> 00:24:18,720
the first the first one saying that the

658
00:24:18,720 --> 00:24:21,279
content length is different from zero

659
00:24:21,279 --> 00:24:23,840
will use the next part of the of the

660
00:24:23,840 --> 00:24:25,600
response as the body

661
00:24:25,600 --> 00:24:27,440
and therefore this will be forwarded

662
00:24:27,440 --> 00:24:30,320
back to the victim

663
00:24:31,200 --> 00:24:34,240
now as i said the

664
00:24:34,240 --> 00:24:36,080
the extra bytes will cause that the

665
00:24:36,080 --> 00:24:37,840
proxy cost close the connection but we

666
00:24:37,840 --> 00:24:40,000
don't care about this because we already

667
00:24:40,000 --> 00:24:41,840
achieved that the client received this

668
00:24:41,840 --> 00:24:45,559
new kind of payload

669
00:24:46,080 --> 00:24:46,880
now

670
00:24:46,880 --> 00:24:49,919
what can we do with this well we can set

671
00:24:49,919 --> 00:24:52,720
we can build new payloads using heaters

672
00:24:52,720 --> 00:24:53,840
and bodies

673
00:24:53,840 --> 00:24:56,320
so the heaters will be set using the

674
00:24:56,320 --> 00:24:57,840
head request

675
00:24:57,840 --> 00:25:01,279
and the body will be set using the

676
00:25:01,279 --> 00:25:03,520
the next request the sorry the next

677
00:25:03,520 --> 00:25:06,080
response which in this case will also

678
00:25:06,080 --> 00:25:08,640
use the the headers of this response as

679
00:25:08,640 --> 00:25:10,000
part of the body

680
00:25:10,000 --> 00:25:12,799
so we can modify the content type for

681
00:25:12,799 --> 00:25:15,919
example by saying if we have a response

682
00:25:15,919 --> 00:25:17,679
that contains

683
00:25:17,679 --> 00:25:19,039
a reflection or something that we can

684
00:25:19,039 --> 00:25:22,480
use as an attack but it's a plane type

685
00:25:22,480 --> 00:25:24,960
then we can modify this by setting a new

686
00:25:24,960 --> 00:25:27,360
a new header to this response which sets

687
00:25:27,360 --> 00:25:28,400
the

688
00:25:28,400 --> 00:25:31,039
the content type to be text html for

689
00:25:31,039 --> 00:25:32,080
example

690
00:25:32,080 --> 00:25:34,480
and also we can use headers as body so

691
00:25:34,480 --> 00:25:36,320
if we have a reflection in the headers

692
00:25:36,320 --> 00:25:38,000
such as an xss

693
00:25:38,000 --> 00:25:40,080
then which wouldn't be abundant in other

694
00:25:40,080 --> 00:25:42,960
case then in this case we are able to

695
00:25:42,960 --> 00:25:45,520
use it as a as a script

696
00:25:45,520 --> 00:25:46,640
so again

697
00:25:46,640 --> 00:25:48,799
if we are able to set to use a head

698
00:25:48,799 --> 00:25:49,919
request

699
00:25:49,919 --> 00:25:50,720
that

700
00:25:50,720 --> 00:25:53,279
generates a content type text html and a

701
00:25:53,279 --> 00:25:56,159
content length of 100 and then we

702
00:25:56,159 --> 00:25:58,880
generate another response that

703
00:25:58,880 --> 00:26:01,760
using for example in the location uh

704
00:26:01,760 --> 00:26:04,159
a reflection which is a script which is

705
00:26:04,159 --> 00:26:06,960
a javascript this will be used as an

706
00:26:06,960 --> 00:26:09,360
actual javascript instead of headers

707
00:26:09,360 --> 00:26:11,919
and we will be able to exploit the

708
00:26:11,919 --> 00:26:15,200
victim browser using this attack

709
00:26:15,200 --> 00:26:16,559
so

710
00:26:16,559 --> 00:26:18,960
i will show a demo using this

711
00:26:18,960 --> 00:26:20,880
and the idea is we are going to have a

712
00:26:20,880 --> 00:26:24,559
varnish proxy an engine an ng x right

713
00:26:24,559 --> 00:26:26,960
back in

714
00:26:30,320 --> 00:26:31,679
okay

715
00:26:31,679 --> 00:26:33,919
so

716
00:26:34,320 --> 00:26:36,400
yeah so here

717
00:26:36,400 --> 00:26:39,400
um

718
00:26:40,559 --> 00:26:42,240
so i created this

719
00:26:42,240 --> 00:26:44,640
small

720
00:26:45,919 --> 00:26:47,120
example

721
00:26:47,120 --> 00:26:49,520
we have

722
00:26:49,840 --> 00:26:52,400
this page this hello smuggler page we

723
00:26:52,400 --> 00:26:55,520
also have a redirect a

724
00:26:55,520 --> 00:26:59,440
url which is if we send anything

725
00:26:59,600 --> 00:27:02,320
this can fail

726
00:27:03,840 --> 00:27:06,720
it will also send back to the home

727
00:27:06,720 --> 00:27:10,240
so let's see this in board

728
00:27:10,480 --> 00:27:13,120
so again i have my get hello world to

729
00:27:13,120 --> 00:27:15,279
hello smuggler it's just a static

730
00:27:15,279 --> 00:27:16,720
response

731
00:27:16,720 --> 00:27:20,600
nothing interesting here

732
00:27:22,720 --> 00:27:24,399
i got my

733
00:27:24,399 --> 00:27:27,120
get with with which will generate a

734
00:27:27,120 --> 00:27:30,640
array direction but here if i use

735
00:27:30,640 --> 00:27:32,799
for example

736
00:27:32,799 --> 00:27:35,039
some one thing that is pretty common

737
00:27:35,039 --> 00:27:38,640
i can reflect data here

738
00:27:38,720 --> 00:27:40,559
what excesses should be

739
00:27:40,559 --> 00:27:43,200
i can reflect data here so

740
00:27:43,200 --> 00:27:47,880
i could set for example a script

741
00:27:59,679 --> 00:28:01,440
and this will cause

742
00:28:01,440 --> 00:28:02,960
that the

743
00:28:02,960 --> 00:28:06,000
that the application returns a a

744
00:28:06,000 --> 00:28:09,120
redirect with the location uh

745
00:28:09,120 --> 00:28:11,120
reflecting what what i injected with

746
00:28:11,120 --> 00:28:12,720
jesus creep now this is not a

747
00:28:12,720 --> 00:28:14,399
vulnerability by itself because i cannot

748
00:28:14,399 --> 00:28:18,000
do anything with this but remember

749
00:28:18,000 --> 00:28:20,799
we have the get hello smuggler

750
00:28:20,799 --> 00:28:22,640
which

751
00:28:22,640 --> 00:28:24,559
can be converted into a head response to

752
00:28:24,559 --> 00:28:26,880
a head request

753
00:28:26,880 --> 00:28:29,520
and as in many cases the content the

754
00:28:29,520 --> 00:28:31,679
content length will indicate that there

755
00:28:31,679 --> 00:28:34,480
is there should be body but any proxy in

756
00:28:34,480 --> 00:28:36,399
the middle will say okay this is a head

757
00:28:36,399 --> 00:28:41,120
request so i'm not expecting anybody

758
00:28:41,919 --> 00:28:43,440
but then

759
00:28:43,440 --> 00:28:45,039
if we send this request this is the

760
00:28:45,039 --> 00:28:47,600
carrying request this is the head that

761
00:28:47,600 --> 00:28:50,559
will produce what i what i said this

762
00:28:50,559 --> 00:28:52,159
will produce that our response

763
00:28:52,159 --> 00:28:53,600
containing a content length different

764
00:28:53,600 --> 00:28:55,679
from zero to be set

765
00:28:55,679 --> 00:28:56,480
and

766
00:28:56,480 --> 00:28:59,279
then this will be concatenated

767
00:28:59,279 --> 00:29:01,440
so i can send this request

768
00:29:01,440 --> 00:29:05,120
and the next request i i send

769
00:29:05,200 --> 00:29:08,399
will contain instead of what is expected

770
00:29:08,399 --> 00:29:10,480
will contain

771
00:29:10,480 --> 00:29:11,360
the

772
00:29:11,360 --> 00:29:13,679
the payload it will also contain part of

773
00:29:13,679 --> 00:29:15,600
the rig of the response of the of the

774
00:29:15,600 --> 00:29:17,520
victim

775
00:29:17,520 --> 00:29:19,679
and it contains the head with the head

776
00:29:19,679 --> 00:29:22,320
response which indicates that it should

777
00:29:22,320 --> 00:29:25,600
use the first 383 bytes as part of the

778
00:29:25,600 --> 00:29:26,960
body

779
00:29:26,960 --> 00:29:29,120
so

780
00:29:29,120 --> 00:29:30,240
i can

781
00:29:30,240 --> 00:29:31,679
sorry

782
00:29:31,679 --> 00:29:33,360
i can use this

783
00:29:33,360 --> 00:29:34,799
to

784
00:29:34,799 --> 00:29:37,520
keep modifying the the responses here

785
00:29:37,520 --> 00:29:39,600
i'm not throwing the attack

786
00:29:39,600 --> 00:29:42,159
but if i go in burp and use the troop

787
00:29:42,159 --> 00:29:43,840
intruder

788
00:29:43,840 --> 00:29:46,799
which i already said

789
00:29:47,840 --> 00:29:50,640
okay here i will keep sending the attack

790
00:29:50,640 --> 00:29:51,919
i i

791
00:29:51,919 --> 00:29:54,799
set a timeslip so that my own attacks

792
00:29:54,799 --> 00:29:55,840
don't

793
00:29:55,840 --> 00:29:57,679
affect the attacker so the attacker

794
00:29:57,679 --> 00:29:59,919
doesn't want to receive the the

795
00:29:59,919 --> 00:30:02,880
malicious responses

796
00:30:04,159 --> 00:30:07,520
so if i start throwing the attack

797
00:30:07,520 --> 00:30:10,799
next time i go here and i said

798
00:30:10,799 --> 00:30:12,320
hello smuggler

799
00:30:12,320 --> 00:30:14,720
i get the crosstalk scripting

800
00:30:14,720 --> 00:30:15,919
okay

801
00:30:15,919 --> 00:30:19,440
this will work for anybo any url

802
00:30:19,440 --> 00:30:21,440
or should work for anywhere likes i hope

803
00:30:21,440 --> 00:30:22,720
yeah

804
00:30:22,720 --> 00:30:24,559
and we can see that we will keep

805
00:30:24,559 --> 00:30:26,720
receiving this kind of responses these

806
00:30:26,720 --> 00:30:28,159
payloads

807
00:30:28,159 --> 00:30:29,840
until

808
00:30:29,840 --> 00:30:31,440
i stop the attack

809
00:30:31,440 --> 00:30:34,399
so this is not a persistent attack

810
00:30:34,399 --> 00:30:36,240
if i then send the request when the

811
00:30:36,240 --> 00:30:37,360
attack is

812
00:30:37,360 --> 00:30:38,480
stopped

813
00:30:38,480 --> 00:30:42,000
i will receive what i expected

814
00:30:44,320 --> 00:30:45,840
okay

815
00:30:45,840 --> 00:30:49,879
i'm having some issues here

816
00:30:51,360 --> 00:30:54,520
the internet

817
00:31:04,799 --> 00:31:06,960
okay

818
00:31:06,960 --> 00:31:09,200
eh

819
00:31:10,640 --> 00:31:12,480
sounds some issues

820
00:31:12,480 --> 00:31:14,720
okay so as i said this is not a

821
00:31:14,720 --> 00:31:17,600
persistent attack i'm able to modify the

822
00:31:17,600 --> 00:31:19,919
responses but only if i keep sending

823
00:31:19,919 --> 00:31:21,679
these attacks

824
00:31:21,679 --> 00:31:24,799
so is there any way to actually

825
00:31:24,799 --> 00:31:26,640
send one request and

826
00:31:26,640 --> 00:31:28,640
modify the responses for all the victims

827
00:31:28,640 --> 00:31:30,320
in the future

828
00:31:30,320 --> 00:31:32,960
and this is possible by using the cachet

829
00:31:32,960 --> 00:31:35,200
control header so remember

830
00:31:35,200 --> 00:31:37,679
what i'm doing here is to build a new

831
00:31:37,679 --> 00:31:40,960
payload by using headers and body i can

832
00:31:40,960 --> 00:31:43,919
choose any any response or any headers

833
00:31:43,919 --> 00:31:46,960
response and then i can set any body i

834
00:31:46,960 --> 00:31:48,880
want with other responses

835
00:31:48,880 --> 00:31:49,840
so

836
00:31:49,840 --> 00:31:51,440
instead of looking for some some

837
00:31:51,440 --> 00:31:53,200
response that contains a content length

838
00:31:53,200 --> 00:31:55,600
and a content type html i will also look

839
00:31:55,600 --> 00:31:57,440
for a response that contains a cache

840
00:31:57,440 --> 00:31:59,760
control header this will cause that the

841
00:31:59,760 --> 00:32:02,240
proxy believe that the the response

842
00:32:02,240 --> 00:32:04,559
should be stored in the cache for the

843
00:32:04,559 --> 00:32:06,320
request that

844
00:32:06,320 --> 00:32:08,480
the last request that

845
00:32:08,480 --> 00:32:11,200
was issued by the proxy

846
00:32:11,200 --> 00:32:12,320
so again

847
00:32:12,320 --> 00:32:14,399
if i send this kind of attack

848
00:32:14,399 --> 00:32:16,559
where i'm doing exactly the same thing

849
00:32:16,559 --> 00:32:18,240
but in this case

850
00:32:18,240 --> 00:32:19,840
okay the attacker will receive his

851
00:32:19,840 --> 00:32:22,159
response and in this case

852
00:32:22,159 --> 00:32:23,919
the risk the first response or the

853
00:32:23,919 --> 00:32:25,919
heater response will also contain

854
00:32:25,919 --> 00:32:27,519
akashic control

855
00:32:27,519 --> 00:32:28,559
so

856
00:32:28,559 --> 00:32:29,760
when the

857
00:32:29,760 --> 00:32:31,840
when the next request is

858
00:32:31,840 --> 00:32:34,960
forwarded by to the backend

859
00:32:34,960 --> 00:32:36,240
this will again

860
00:32:36,240 --> 00:32:38,320
produce the the payload

861
00:32:38,320 --> 00:32:40,000
but this case in this case will be

862
00:32:40,000 --> 00:32:42,480
stored in the last request

863
00:32:42,480 --> 00:32:45,519
so this is to redirect so the next time

864
00:32:45,519 --> 00:32:48,080
a victim issue a request to a request to

865
00:32:48,080 --> 00:32:49,440
redirect

866
00:32:49,440 --> 00:32:54,159
he will receive the same store payload

867
00:32:54,960 --> 00:32:56,799
okay so

868
00:32:56,799 --> 00:32:58,480
and again the same

869
00:32:58,480 --> 00:33:00,159
diagram

870
00:33:00,159 --> 00:33:02,000
an attacker in this case the attacker

871
00:33:02,000 --> 00:33:04,640
will send two two concatenated requests

872
00:33:04,640 --> 00:33:07,200
or two pipeline requests that the proxy

873
00:33:07,200 --> 00:33:09,360
will recognize as two different ones and

874
00:33:09,360 --> 00:33:11,679
that's that this is because we want to

875
00:33:11,679 --> 00:33:13,039
set the

876
00:33:13,039 --> 00:33:14,240
the

877
00:33:14,240 --> 00:33:16,960
the target url that will be poisoned

878
00:33:16,960 --> 00:33:17,760
uh

879
00:33:17,760 --> 00:33:19,440
for for the one that the attacker choose

880
00:33:19,440 --> 00:33:21,440
not the victims one

881
00:33:21,440 --> 00:33:24,080
so now the back end receives these three

882
00:33:24,080 --> 00:33:26,240
these two requests

883
00:33:26,240 --> 00:33:28,480
it will split them into four the first

884
00:33:28,480 --> 00:33:30,640
three that were smuggled and the the

885
00:33:30,640 --> 00:33:33,919
last one that will be used as the target

886
00:33:33,919 --> 00:33:36,320
this will create four responses

887
00:33:36,320 --> 00:33:38,640
that will be sent back to the proxy

888
00:33:38,640 --> 00:33:40,080
the first response

889
00:33:40,080 --> 00:33:42,320
will be sent again to the attacker

890
00:33:42,320 --> 00:33:44,240
now the second response which contains

891
00:33:44,240 --> 00:33:47,200
the payload will be sent to the to the

892
00:33:47,200 --> 00:33:48,799
next request which is a get request

893
00:33:48,799 --> 00:33:50,240
again to the attack from from the

894
00:33:50,240 --> 00:33:53,440
attacker but in this case

895
00:33:53,440 --> 00:33:56,240
the request will the the proxy will see

896
00:33:56,240 --> 00:33:58,000
that the response contain the cache

897
00:33:58,000 --> 00:34:00,799
control header so it will store this in

898
00:34:00,799 --> 00:34:03,440
the in the cache

899
00:34:03,440 --> 00:34:05,760
and then for the rest of the of the

900
00:34:05,760 --> 00:34:07,360
message it will be discarded because

901
00:34:07,360 --> 00:34:08,719
it's not a valid

902
00:34:08,719 --> 00:34:10,159
http message

903
00:34:10,159 --> 00:34:12,800
or http response now when the client

904
00:34:12,800 --> 00:34:15,679
sends a new request containing the same

905
00:34:15,679 --> 00:34:16,800
url

906
00:34:16,800 --> 00:34:18,399
the proxy instead of forwarding this to

907
00:34:18,399 --> 00:34:20,560
the backend we look in this in its cache

908
00:34:20,560 --> 00:34:22,000
in its cache

909
00:34:22,000 --> 00:34:22,800
and

910
00:34:22,800 --> 00:34:24,159
it will look for the response that it

911
00:34:24,159 --> 00:34:25,760
was stored so

912
00:34:25,760 --> 00:34:28,320
the the client will receive this payload

913
00:34:28,320 --> 00:34:29,520
anytime the

914
00:34:29,520 --> 00:34:32,000
the request is issued

915
00:34:32,000 --> 00:34:34,560
so we are able to poison the webcast of

916
00:34:34,560 --> 00:34:37,040
any proxy and we are able to poison the

917
00:34:37,040 --> 00:34:39,918
webcast of any of any url that we get

918
00:34:39,918 --> 00:34:42,159
regularly choose

919
00:34:42,159 --> 00:34:44,719
and also the as i said the response can

920
00:34:44,719 --> 00:34:48,159
contain any payload we want

921
00:34:48,159 --> 00:34:50,239
so again

922
00:34:50,239 --> 00:34:52,560
i have a demo

923
00:34:52,560 --> 00:34:56,000
i will use the same system

924
00:34:56,800 --> 00:34:59,200
but in this case instead of sending many

925
00:34:59,200 --> 00:35:03,839
requests i will see i will only send one

926
00:35:04,640 --> 00:35:05,520
so

927
00:35:05,520 --> 00:35:08,320
i also set a new

928
00:35:08,320 --> 00:35:11,119
a new endpoint which is this a cachable

929
00:35:11,119 --> 00:35:12,800
endpoint

930
00:35:12,800 --> 00:35:15,359
if we see this in board

931
00:35:15,359 --> 00:35:17,520
we see that we have almost the same the

932
00:35:17,520 --> 00:35:19,280
same response that are in the hellos

933
00:35:19,280 --> 00:35:21,599
model

934
00:35:22,400 --> 00:35:23,680
but

935
00:35:23,680 --> 00:35:25,359
in this case we have the cache control

936
00:35:25,359 --> 00:35:27,920
header okay so the cache control header

937
00:35:27,920 --> 00:35:30,560
will cause that as i said the proxy

938
00:35:30,560 --> 00:35:32,480
thinks that it should store this in the

939
00:35:32,480 --> 00:35:33,760
web cache

940
00:35:33,760 --> 00:35:36,079
okay we see if we send this

941
00:35:36,079 --> 00:35:39,760
we will be storing this

942
00:35:39,839 --> 00:35:41,440
so

943
00:35:41,440 --> 00:35:44,000
now if i send the same the same kind of

944
00:35:44,000 --> 00:35:45,839
attack but instead of using the hello

945
00:35:45,839 --> 00:35:49,440
smuggler i use the cachable the cachable

946
00:35:49,440 --> 00:35:51,359
head request

947
00:35:51,359 --> 00:35:53,359
this will cause that the response gets

948
00:35:53,359 --> 00:35:55,359
stored

949
00:35:55,359 --> 00:35:57,760
let me check this and

950
00:35:57,760 --> 00:36:00,000
if you see i'm actually sending this

951
00:36:00,000 --> 00:36:03,599
request is not a smuggle okay so the

952
00:36:03,599 --> 00:36:06,000
the two smart requests are this

953
00:36:06,000 --> 00:36:08,800
we have 138 bytes which is the content

954
00:36:08,800 --> 00:36:09,680
length

955
00:36:09,680 --> 00:36:11,359
and the last one will be used as a

956
00:36:11,359 --> 00:36:12,720
pipeline request

957
00:36:12,720 --> 00:36:15,200
so i can set any url i want

958
00:36:15,200 --> 00:36:17,280
let's say i said

959
00:36:17,280 --> 00:36:18,400
this url

960
00:36:18,400 --> 00:36:20,000
this will poison

961
00:36:20,000 --> 00:36:22,640
the the index that's called the starting

962
00:36:22,640 --> 00:36:24,880
point url

963
00:36:24,880 --> 00:36:28,320
so now if i go here

964
00:36:29,760 --> 00:36:31,920
i will receive the

965
00:36:31,920 --> 00:36:36,240
the payload anytime i send a request

966
00:36:36,400 --> 00:36:39,040
i can also poison any other url and i

967
00:36:39,040 --> 00:36:41,280
can even poison urls that does not exist

968
00:36:41,280 --> 00:36:44,000
that should give me a 404 so for example

969
00:36:44,000 --> 00:36:45,359
let's say i said

970
00:36:45,359 --> 00:36:46,560
af

971
00:36:46,560 --> 00:36:48,880
acsd

972
00:36:48,880 --> 00:36:50,400
then

973
00:36:50,400 --> 00:36:52,839
when i make a request to

974
00:36:52,839 --> 00:36:54,400
asd

975
00:36:54,400 --> 00:36:56,720
again

976
00:36:58,960 --> 00:37:03,079
i will receive again the payload

977
00:37:09,200 --> 00:37:11,839
okay so finally i want to show that this

978
00:37:11,839 --> 00:37:14,240
is possible in real systems so i

979
00:37:14,240 --> 00:37:17,040
establish a small lab but you might say

980
00:37:17,040 --> 00:37:17,839
okay

981
00:37:17,839 --> 00:37:20,079
you are doing some tricks and this is

982
00:37:20,079 --> 00:37:22,160
not possible to do it in real in real

983
00:37:22,160 --> 00:37:25,599
cases i was able to do it in google but

984
00:37:25,599 --> 00:37:27,359
i'm not able to show it

985
00:37:27,359 --> 00:37:30,079
but i am able to show sap because i do

986
00:37:30,079 --> 00:37:33,920
have a as an old version of sap

987
00:37:33,920 --> 00:37:37,359
so the 188 in sap was kind of different

988
00:37:37,359 --> 00:37:38,560
it was that

989
00:37:38,560 --> 00:37:41,119
when first the sap have two two

990
00:37:41,119 --> 00:37:42,880
important components which is the web

991
00:37:42,880 --> 00:37:44,880
dispatcher the web dispatcher is a load

992
00:37:44,880 --> 00:37:46,960
balancer or a webcaster proxy can be

993
00:37:46,960 --> 00:37:48,160
used also

994
00:37:48,160 --> 00:37:50,720
and the thing is when i send a request

995
00:37:50,720 --> 00:37:52,800
to the web cache to the web dispatcher

996
00:37:52,800 --> 00:37:55,040
containing a transfer encoding and the

997
00:37:55,040 --> 00:37:57,359
transfer encoding is not just chunk is

998
00:37:57,359 --> 00:38:00,480
an invalid transfer encoding the

999
00:38:00,480 --> 00:38:02,400
the web dispatcher will convert this to

1000
00:38:02,400 --> 00:38:03,839
a chunk

1001
00:38:03,839 --> 00:38:05,680
to a chunk message to a professional

1002
00:38:05,680 --> 00:38:08,880
coding chunk but this is not true or it

1003
00:38:08,880 --> 00:38:10,640
will not convert it it will not forward

1004
00:38:10,640 --> 00:38:12,640
it like this but it will consider that

1005
00:38:12,640 --> 00:38:14,960
the transfer encoding is chunked

1006
00:38:14,960 --> 00:38:17,280
but the back end which is a

1007
00:38:17,280 --> 00:38:18,720
an sap

1008
00:38:18,720 --> 00:38:21,119
for s4hana

1009
00:38:21,119 --> 00:38:22,480
which is the new

1010
00:38:22,480 --> 00:38:25,119
flagship erp solution of sap and it's an

1011
00:38:25,119 --> 00:38:28,240
http server this also works for other

1012
00:38:28,240 --> 00:38:30,079
sap http

1013
00:38:30,079 --> 00:38:33,280
server versions uh in this case the

1014
00:38:33,280 --> 00:38:35,280
transfer encoding will not be converted

1015
00:38:35,280 --> 00:38:36,880
to chunk but instead it will be

1016
00:38:36,880 --> 00:38:38,880
considered to be identity which is the

1017
00:38:38,880 --> 00:38:41,040
same as saying hey let's go let's only

1018
00:38:41,040 --> 00:38:43,520
use the content length

1019
00:38:43,520 --> 00:38:45,040
so

1020
00:38:45,040 --> 00:38:48,079
i can build a new a new payload using as

1021
00:38:48,079 --> 00:38:49,119
i said

1022
00:38:49,119 --> 00:38:51,359
response block which is the headers in

1023
00:38:51,359 --> 00:38:53,359
this case i will use the hit to reset

1024
00:38:53,359 --> 00:38:54,560
password

1025
00:38:54,560 --> 00:38:56,640
which will return me a response

1026
00:38:56,640 --> 00:38:59,599
containing the content type text html

1027
00:38:59,599 --> 00:39:01,680
a content length which is different from

1028
00:39:01,680 --> 00:39:02,560
zero

1029
00:39:02,560 --> 00:39:04,800
and a cache control header which says

1030
00:39:04,800 --> 00:39:06,640
that the response should be stored for a

1031
00:39:06,640 --> 00:39:08,879
week

1032
00:39:10,320 --> 00:39:13,599
and then at the body i will use a

1033
00:39:13,599 --> 00:39:17,040
similar example that i use in in my in

1034
00:39:17,040 --> 00:39:19,920
my own lab which is a gate

1035
00:39:19,920 --> 00:39:22,960
containing the the parameter x sub

1036
00:39:22,960 --> 00:39:26,079
origin location that will also create a

1037
00:39:26,079 --> 00:39:28,720
response containing the

1038
00:39:28,720 --> 00:39:30,720
the payload that i can that i can

1039
00:39:30,720 --> 00:39:33,040
provide which is a reflective parameter

1040
00:39:33,040 --> 00:39:34,960
and will be will be reflected actually

1041
00:39:34,960 --> 00:39:35,680
in the

1042
00:39:35,680 --> 00:39:37,520
in the headers so this is not a

1043
00:39:37,520 --> 00:39:39,359
vulnerability by itself but i will

1044
00:39:39,359 --> 00:39:41,599
become i will turn it to abnormality by

1045
00:39:41,599 --> 00:39:45,119
combining this with the heaters

1046
00:39:45,119 --> 00:39:47,760
so again i send a carrier a carrier

1047
00:39:47,760 --> 00:39:50,480
request which is the the attacker's

1048
00:39:50,480 --> 00:39:53,520
request that will be sent to him

1049
00:39:53,520 --> 00:39:55,520
and i also i will send the transfer

1050
00:39:55,520 --> 00:39:56,400
encoding

1051
00:39:56,400 --> 00:39:58,560
using the the attack that i just

1052
00:39:58,560 --> 00:40:00,000
described

1053
00:40:00,000 --> 00:40:02,480
this will cause that the

1054
00:40:02,480 --> 00:40:05,200
the proxy forwards the first part

1055
00:40:05,200 --> 00:40:07,760
to the to the back end as an entire

1056
00:40:07,760 --> 00:40:10,560
request and then the next the next

1057
00:40:10,560 --> 00:40:12,319
request which is the pipeline request

1058
00:40:12,319 --> 00:40:14,720
will also be forwarded

1059
00:40:14,720 --> 00:40:17,440
but that's a different request

1060
00:40:17,440 --> 00:40:19,359
when the back-end received this request

1061
00:40:19,359 --> 00:40:21,520
it will split them into four

1062
00:40:21,520 --> 00:40:23,359
the first one the first response will be

1063
00:40:23,359 --> 00:40:25,599
sent to the big to the attacker

1064
00:40:25,599 --> 00:40:27,920
the second response will contain the

1065
00:40:27,920 --> 00:40:30,079
content length different from 0 and it

1066
00:40:30,079 --> 00:40:32,480
will not be recognized as a hit response

1067
00:40:32,480 --> 00:40:35,440
because it matched the get

1068
00:40:35,440 --> 00:40:37,599
and it will match the gate to the target

1069
00:40:37,599 --> 00:40:39,920
url so this is going to modify the

1070
00:40:39,920 --> 00:40:42,720
target url in the cache

1071
00:40:42,720 --> 00:40:43,839
the body

1072
00:40:43,839 --> 00:40:46,400
is generated using these get requests

1073
00:40:46,400 --> 00:40:49,280
that produce an xss

1074
00:40:49,280 --> 00:40:52,319
and finally the last response is the one

1075
00:40:52,319 --> 00:40:54,079
to the target url which in this case

1076
00:40:54,079 --> 00:40:56,880
will be discarded

1077
00:40:56,880 --> 00:40:59,920
now as i said this this response the

1078
00:40:59,920 --> 00:41:01,280
first response is going to be back to

1079
00:41:01,280 --> 00:41:03,760
the attacker and the second response is

1080
00:41:03,760 --> 00:41:05,520
going to be storing the cache for the

1081
00:41:05,520 --> 00:41:08,240
target url

1082
00:41:12,400 --> 00:41:14,319
so we will see a

1083
00:41:14,319 --> 00:41:17,720
video demo

1084
00:41:20,160 --> 00:41:22,480
again

1085
00:41:22,560 --> 00:41:25,119
we can see that if we go to sap we have

1086
00:41:25,119 --> 00:41:27,440
everything as expected

1087
00:41:27,440 --> 00:41:29,680
we can send this head request to

1088
00:41:29,680 --> 00:41:33,240
a recent password

1089
00:41:34,240 --> 00:41:35,920
which will generate this response

1090
00:41:35,920 --> 00:41:37,520
containing a content length a content

1091
00:41:37,520 --> 00:41:39,359
type which is html

1092
00:41:39,359 --> 00:41:41,119
a content length which is different from

1093
00:41:41,119 --> 00:41:43,760
zero which is something that the rfc

1094
00:41:43,760 --> 00:41:45,359
allows

1095
00:41:45,359 --> 00:41:48,000
and a cache control saying that the

1096
00:41:48,000 --> 00:41:49,920
response should be stored for a week in

1097
00:41:49,920 --> 00:41:52,400
the cache

1098
00:41:53,839 --> 00:41:56,079
then i will also show how the how to

1099
00:41:56,079 --> 00:41:57,680
generate the payload

1100
00:41:57,680 --> 00:42:01,280
the payload is again stored in the in

1101
00:42:01,280 --> 00:42:03,839
the headers of the response which is not

1102
00:42:03,839 --> 00:42:06,640
a vulnerability

1103
00:42:07,280 --> 00:42:09,599
in this case i'm using

1104
00:42:09,599 --> 00:42:13,760
an alert to cache xss

1105
00:42:14,800 --> 00:42:17,119
and the content length or the length of

1106
00:42:17,119 --> 00:42:19,839
the of the body of this entire response

1107
00:42:19,839 --> 00:42:22,640
corresponds to the same length of the

1108
00:42:22,640 --> 00:42:24,319
of the content length that was in the

1109
00:42:24,319 --> 00:42:27,040
head response

1110
00:42:28,800 --> 00:42:31,520
now again i use the attack using the

1111
00:42:31,520 --> 00:42:34,480
invalid transfer encoding

1112
00:42:34,480 --> 00:42:36,000
i use the content length to be five

1113
00:42:36,000 --> 00:42:37,680
bytes so that the first only the first

1114
00:42:37,680 --> 00:42:40,720
five bytes are used as part of the first

1115
00:42:40,720 --> 00:42:42,720
request

1116
00:42:42,720 --> 00:42:44,319
next the head

1117
00:42:44,319 --> 00:42:48,400
request will create the the headers

1118
00:42:49,200 --> 00:42:51,599
the payload will be created with the red

1119
00:42:51,599 --> 00:42:52,800
with the

1120
00:42:52,800 --> 00:42:57,160
get to the redirect response

1121
00:42:59,119 --> 00:43:02,480
and finally the target url

1122
00:43:02,480 --> 00:43:06,000
will be the one that will be poison

1123
00:43:10,079 --> 00:43:11,920
okay this is the first request that will

1124
00:43:11,920 --> 00:43:13,359
be forwarded the second request that

1125
00:43:13,359 --> 00:43:15,920
will be forwarded by the proxy

1126
00:43:15,920 --> 00:43:18,240
and now when i send this request the

1127
00:43:18,240 --> 00:43:20,640
proxy or the web dispatcher will modify

1128
00:43:20,640 --> 00:43:23,280
the cache for this same page

1129
00:43:23,280 --> 00:43:26,480
for this url so when i say it again i

1130
00:43:26,480 --> 00:43:27,440
get

1131
00:43:27,440 --> 00:43:29,599
the payload

1132
00:43:29,599 --> 00:43:32,800
this way i can modify the response for

1133
00:43:32,800 --> 00:43:34,960
any victim and i don't need to keep

1134
00:43:34,960 --> 00:43:36,640
sending the attack i only need to send

1135
00:43:36,640 --> 00:43:39,920
one one request that will modify the the

1136
00:43:39,920 --> 00:43:42,160
responses for a week

1137
00:43:42,160 --> 00:43:46,000
i can do the same with the login page

1138
00:43:46,000 --> 00:43:47,920
remember i can't set any kind of payload

1139
00:43:47,920 --> 00:43:49,440
i could also set

1140
00:43:49,440 --> 00:43:51,760
something different such as a a fake

1141
00:43:51,760 --> 00:43:54,319
login so that the victim sent me sends

1142
00:43:54,319 --> 00:43:57,119
him sends me his

1143
00:43:57,119 --> 00:43:59,920
his credentials

1144
00:44:04,079 --> 00:44:06,960
in this case i will inject a javascript

1145
00:44:06,960 --> 00:44:09,200
amazing javascript in the in the login

1146
00:44:09,200 --> 00:44:10,960
page

1147
00:44:10,960 --> 00:44:12,560
okay

1148
00:44:12,560 --> 00:44:14,400
and again now if i

1149
00:44:14,400 --> 00:44:17,680
if i request the login page

1150
00:44:19,440 --> 00:44:21,520
i will receive the

1151
00:44:21,520 --> 00:44:24,560
the payload which executes this alert

1152
00:44:24,560 --> 00:44:26,880
message

1153
00:44:32,960 --> 00:44:35,960
okay

1154
00:44:42,880 --> 00:44:45,119
i have time to show this

1155
00:44:45,119 --> 00:44:46,960
okay

1156
00:44:46,960 --> 00:44:50,400
so to solve this sub releases released

1157
00:44:50,400 --> 00:44:53,440
two security nodes and it

1158
00:44:53,440 --> 00:44:56,640
marked this as a cbe 2021

1159
00:44:56,640 --> 00:44:59,440
or this number

1160
00:45:00,079 --> 00:45:01,359
so

1161
00:45:01,359 --> 00:45:03,040
i'm also able to

1162
00:45:03,040 --> 00:45:04,720
do something else with their with the

1163
00:45:04,720 --> 00:45:06,960
rest of the of the response that was

1164
00:45:06,960 --> 00:45:09,280
being discarded remember that when i was

1165
00:45:09,280 --> 00:45:11,839
using the only the first part of the of

1166
00:45:11,839 --> 00:45:14,560
the second request as as the body i had

1167
00:45:14,560 --> 00:45:16,800
some extra bytes that will be discarded

1168
00:45:16,800 --> 00:45:18,960
but what if instead of using this byte

1169
00:45:18,960 --> 00:45:21,440
to to close the connection i use them to

1170
00:45:21,440 --> 00:45:24,400
create a new a new response

1171
00:45:24,400 --> 00:45:26,160
so again

1172
00:45:26,160 --> 00:45:28,800
let's say that i send this request to

1173
00:45:28,800 --> 00:45:32,400
the to the backend server which will

1174
00:45:32,400 --> 00:45:34,319
it's it will be for white as one but

1175
00:45:34,319 --> 00:45:36,480
will be split into

1176
00:45:36,480 --> 00:45:39,200
into three different requests by the

1177
00:45:39,200 --> 00:45:41,200
by the backend

1178
00:45:41,200 --> 00:45:42,800
the first response will be sent back to

1179
00:45:42,800 --> 00:45:44,480
the attacker

1180
00:45:44,480 --> 00:45:47,200
the second response will be used as

1181
00:45:47,200 --> 00:45:49,040
headers

1182
00:45:49,040 --> 00:45:51,760
and now this response let's say i'm able

1183
00:45:51,760 --> 00:45:54,640
to inject this in the or to reflect this

1184
00:45:54,640 --> 00:45:56,880
in the response this response will be

1185
00:45:56,880 --> 00:45:59,599
used as part of the body so the first

1186
00:45:59,599 --> 00:46:01,359
100 bytes will be used as part of the

1187
00:46:01,359 --> 00:46:04,400
body of this hit request

1188
00:46:04,400 --> 00:46:06,480
this will be forwarded back to the

1189
00:46:06,480 --> 00:46:08,720
to the attacker

1190
00:46:08,720 --> 00:46:11,760
but now the extra the extra bytes which

1191
00:46:11,760 --> 00:46:14,079
were reflecting the the parameter that

1192
00:46:14,079 --> 00:46:15,440
the attacker sent

1193
00:46:15,440 --> 00:46:17,599
will create a new response in the past

1194
00:46:17,599 --> 00:46:19,359
we would have a response that wasn't

1195
00:46:19,359 --> 00:46:21,599
invalid so this would create a closed

1196
00:46:21,599 --> 00:46:24,000
connection but in this case

1197
00:46:24,000 --> 00:46:26,880
this response is a valid is a valid

1198
00:46:26,880 --> 00:46:29,599
response or valid http message so it

1199
00:46:29,599 --> 00:46:31,520
will be also delivered back to the to

1200
00:46:31,520 --> 00:46:33,280
the victim or to the attacker and this

1201
00:46:33,280 --> 00:46:35,920
will allow me to actually create any any

1202
00:46:35,920 --> 00:46:39,040
kind of response not not using blocks

1203
00:46:39,040 --> 00:46:41,839
like before but to actually write

1204
00:46:41,839 --> 00:46:44,640
anything i want so this in this case i

1205
00:46:44,640 --> 00:46:46,560
will use a response that contains a

1206
00:46:46,560 --> 00:46:48,480
cache control a content length and an

1207
00:46:48,480 --> 00:46:51,040
arbitrary body response

1208
00:46:51,040 --> 00:46:52,560
and this will be sent

1209
00:46:52,560 --> 00:46:55,440
to the example and will be stored in the

1210
00:46:55,440 --> 00:46:58,880
cache for the example url

1211
00:46:59,839 --> 00:47:04,000
okay so some final conclusions

1212
00:47:04,319 --> 00:47:07,119
the idea of response snaggling is that

1213
00:47:07,119 --> 00:47:08,720
we don't need to rely on any extra

1214
00:47:08,720 --> 00:47:11,520
vulnerability and this is true for all

1215
00:47:11,520 --> 00:47:12,800
systems that we

1216
00:47:12,800 --> 00:47:15,280
i had looped

1217
00:47:15,280 --> 00:47:16,319
because i'm not looking for

1218
00:47:16,319 --> 00:47:18,079
vulnerabilities i'm looking for things

1219
00:47:18,079 --> 00:47:20,240
that are not considered to be invalid

1220
00:47:20,240 --> 00:47:23,200
are and i rely on the rfc i use for

1221
00:47:23,200 --> 00:47:25,599
example the content length to be to be

1222
00:47:25,599 --> 00:47:26,880
something different

1223
00:47:26,880 --> 00:47:30,880
and that is valid by the rfc

1224
00:47:31,760 --> 00:47:32,720
also

1225
00:47:32,720 --> 00:47:35,200
in this case i will analyze the

1226
00:47:35,200 --> 00:47:37,280
how how the scoring should be for this

1227
00:47:37,280 --> 00:47:39,520
kind of vulnerabilities and

1228
00:47:39,520 --> 00:47:41,359
if i'm able this response mapping will

1229
00:47:41,359 --> 00:47:43,520
be able to i will be able to perform

1230
00:47:43,520 --> 00:47:46,400
response modeling anytime i have an http

1231
00:47:46,400 --> 00:47:48,240
synchronization vulnerability okay so i

1232
00:47:48,240 --> 00:47:49,920
don't need as i said any extra

1233
00:47:49,920 --> 00:47:53,200
preconditions and using respawn and rico

1234
00:47:53,200 --> 00:47:56,319
smuggling i am able to hijack

1235
00:47:56,319 --> 00:47:58,559
two hijacked messages so the

1236
00:47:58,559 --> 00:48:00,000
confidentiality is completely

1237
00:48:00,000 --> 00:48:02,160
compromised

1238
00:48:02,160 --> 00:48:04,960
i'm also able to poison the red cache or

1239
00:48:04,960 --> 00:48:07,040
to inject nested

1240
00:48:07,040 --> 00:48:09,200
responses that are invalid so i'm able

1241
00:48:09,200 --> 00:48:10,800
to compromise the ability the

1242
00:48:10,800 --> 00:48:13,119
availability by setting for example

1243
00:48:13,119 --> 00:48:17,760
responses that says 404

1244
00:48:18,160 --> 00:48:20,160
i'm also able to compromise the

1245
00:48:20,160 --> 00:48:22,640
integrity because i'm able to modify

1246
00:48:22,640 --> 00:48:24,720
persistently modify the the responses

1247
00:48:24,720 --> 00:48:27,599
that a server or a proxy will

1248
00:48:27,599 --> 00:48:30,079
will give to clients

1249
00:48:30,079 --> 00:48:31,520
and as i said

1250
00:48:31,520 --> 00:48:33,599
using the cache technique i'm able to

1251
00:48:33,599 --> 00:48:36,160
persist this attack and to compromise

1252
00:48:36,160 --> 00:48:38,319
any any client that will use this

1253
00:48:38,319 --> 00:48:40,640
application

1254
00:48:40,640 --> 00:48:42,480
and finally of course the

1255
00:48:42,480 --> 00:48:44,240
to hijack different requests and

1256
00:48:44,240 --> 00:48:45,280
responses

1257
00:48:45,280 --> 00:48:47,839
using the sleepy sleeping request

1258
00:48:47,839 --> 00:48:50,720
technique i'm able to increase the

1259
00:48:50,720 --> 00:48:53,040
the reliability not only for response

1260
00:48:53,040 --> 00:48:56,480
marketing but also for request smuggling

1261
00:48:56,480 --> 00:48:57,440
so

1262
00:48:57,440 --> 00:48:59,280
in the future this this kind of

1263
00:48:59,280 --> 00:49:00,800
vulnerabilities should be considered as

1264
00:49:00,800 --> 00:49:03,040
critical and not

1265
00:49:03,040 --> 00:49:05,920
as medium as many back bounty programs

1266
00:49:05,920 --> 00:49:08,000
would say they are or as many other

1267
00:49:08,000 --> 00:49:11,520
vendors would consider to be

1268
00:49:12,880 --> 00:49:16,359
okay questions

1269
00:49:33,839 --> 00:49:36,240
um first of all thank you for that it

1270
00:49:36,240 --> 00:49:38,880
was really really interesting

1271
00:49:38,880 --> 00:49:41,520
can you hear me

1272
00:49:42,960 --> 00:49:45,200
it was really really interesting and uh

1273
00:49:45,200 --> 00:49:46,800
thank you for that

1274
00:49:46,800 --> 00:49:48,720
i just want to ask uh a couple of

1275
00:49:48,720 --> 00:49:50,480
questions so

1276
00:49:50,480 --> 00:49:53,599
uh when you send the ad request it it

1277
00:49:53,599 --> 00:49:54,720
has to be

1278
00:49:54,720 --> 00:49:56,880
when you send the ad request yeah it has

1279
00:49:56,880 --> 00:49:59,920
to be the response has to be 200 okay or

1280
00:49:59,920 --> 00:50:01,119
it can be no different it can be

1281
00:50:01,119 --> 00:50:02,240
anything

1282
00:50:02,240 --> 00:50:03,440
the only important thing is that the

1283
00:50:03,440 --> 00:50:05,040
connection is not being closed so for

1284
00:50:05,040 --> 00:50:07,920
example if the response is a 404 in some

1285
00:50:07,920 --> 00:50:10,160
cases that will close the connection but

1286
00:50:10,160 --> 00:50:13,040
in most cases no that's not true only

1287
00:50:13,040 --> 00:50:15,520
for for example in sap it would close

1288
00:50:15,520 --> 00:50:17,119
the connection

1289
00:50:17,119 --> 00:50:20,079
for example uh like a phone and one or

1290
00:50:20,079 --> 00:50:22,000
you can you can set anything you want

1291
00:50:22,000 --> 00:50:24,720
and this will work and it will even be

1292
00:50:24,720 --> 00:50:26,960
exploitable because the browsers will

1293
00:50:26,960 --> 00:50:29,359
will just check that it's a 401 but it

1294
00:50:29,359 --> 00:50:31,520
will still display the

1295
00:50:31,520 --> 00:50:34,079
all the payload and so the browser will

1296
00:50:34,079 --> 00:50:35,839
execute the javascript

1297
00:50:35,839 --> 00:50:39,040
cool um yeah and

1298
00:50:39,040 --> 00:50:41,839
did you try this attack with uh web

1299
00:50:41,839 --> 00:50:43,760
application firewall on the on the on

1300
00:50:43,760 --> 00:50:44,640
the web

1301
00:50:44,640 --> 00:50:46,640
method does it make a change it doesn't

1302
00:50:46,640 --> 00:50:49,839
matter because it actually helps me

1303
00:50:49,839 --> 00:50:51,599
there are some

1304
00:50:51,599 --> 00:50:53,839
i tested with one firewall actually and

1305
00:50:53,839 --> 00:50:56,559
it helps because firewalls are still hp

1306
00:50:56,559 --> 00:50:58,720
proxies and they follow the same rules

1307
00:50:58,720 --> 00:51:01,119
and they don't verify this because they

1308
00:51:01,119 --> 00:51:02,960
are they cannot look for energies that

1309
00:51:02,960 --> 00:51:04,800
are not gonna raise this because even

1310
00:51:04,800 --> 00:51:06,400
yeah but sometimes they see the string

1311
00:51:06,400 --> 00:51:08,559
like like you did script a little script

1312
00:51:08,559 --> 00:51:11,119
within the body or and and they block it

1313
00:51:11,119 --> 00:51:13,920
even with to see the start of script or

1314
00:51:13,920 --> 00:51:16,160
scrap it's a standard escape of them yes

1315
00:51:16,160 --> 00:51:17,920
but in many cases

1316
00:51:17,920 --> 00:51:20,960
so the examples i showed was using

1317
00:51:20,960 --> 00:51:23,280
the attack in the healers but you can

1318
00:51:23,280 --> 00:51:25,760
also use this in the plane in plain text

1319
00:51:25,760 --> 00:51:28,240
so many many responses that said plain

1320
00:51:28,240 --> 00:51:30,079
text as the content type

1321
00:51:30,079 --> 00:51:32,240
you can you can use this to

1322
00:51:32,240 --> 00:51:34,319
to create new payloads that will change

1323
00:51:34,319 --> 00:51:36,800
the the content type and the firewalls

1324
00:51:36,800 --> 00:51:38,559
won't verify this because they think

1325
00:51:38,559 --> 00:51:40,880
that this is safe i mean there are many

1326
00:51:40,880 --> 00:51:42,400
ways of bypassing firewalls because

1327
00:51:42,400 --> 00:51:44,480
there are safe ways or they would think

1328
00:51:44,480 --> 00:51:46,240
this is safe when this is not safe

1329
00:51:46,240 --> 00:51:47,760
actually

1330
00:51:47,760 --> 00:51:50,720
i can also bypass the firewalls

1331
00:51:50,720 --> 00:51:52,480
by smuggling

1332
00:51:52,480 --> 00:51:55,920
twice the the request oh nice so that

1333
00:51:55,920 --> 00:51:57,599
the firewall will not recognize this

1334
00:51:57,599 --> 00:51:59,440
because it will it will not see a

1335
00:51:59,440 --> 00:52:02,480
request actually yeah yeah so and the

1336
00:52:02,480 --> 00:52:04,319
last last question is

1337
00:52:04,319 --> 00:52:07,119
did you find it on different uh besides

1338
00:52:07,119 --> 00:52:09,040
like google as you said and the sap and

1339
00:52:09,040 --> 00:52:10,880
varnish did you find it on

1340
00:52:10,880 --> 00:52:11,839
other

1341
00:52:11,839 --> 00:52:14,400
yes you can say yeah

1342
00:52:14,400 --> 00:52:16,640
some of them are still

1343
00:52:16,640 --> 00:52:19,359
working on it because they first

1344
00:52:19,359 --> 00:52:21,440
so the problem here and why i said this

1345
00:52:21,440 --> 00:52:23,440
conclusion is because many of the

1346
00:52:23,440 --> 00:52:25,680
vendors would say okay http the

1347
00:52:25,680 --> 00:52:28,480
synchronization is not a big deal for us

1348
00:52:28,480 --> 00:52:30,720
so i had to prove them that

1349
00:52:30,720 --> 00:52:33,040
with just one request because even when

1350
00:52:33,040 --> 00:52:34,240
i said okay

1351
00:52:34,240 --> 00:52:36,960
here one request will modify your your

1352
00:52:36,960 --> 00:52:38,480
your entire application and they will

1353
00:52:38,480 --> 00:52:40,559
say no it's impossible so

1354
00:52:40,559 --> 00:52:43,599
you have to prove it and sometimes in in

1355
00:52:43,599 --> 00:52:45,359
web applications that are

1356
00:52:45,359 --> 00:52:48,079
public it's hard to prove it without

1357
00:52:48,079 --> 00:52:50,319
modifying and having some issues yeah

1358
00:52:50,319 --> 00:52:52,160
okay thank you very much thank you thank

1359
00:52:52,160 --> 00:52:54,319
you

1360
00:52:54,400 --> 00:52:59,079
and there was another question

1361
00:53:06,559 --> 00:53:08,880
hello

1362
00:53:08,880 --> 00:53:11,520
okay thank you for presentation um i

1363
00:53:11,520 --> 00:53:13,920
have only one question uh what was in a

1364
00:53:13,920 --> 00:53:18,079
skip it slide and why you skip it

1365
00:53:21,839 --> 00:53:25,240
you hear me

1366
00:53:26,110 --> 00:53:29,219
[Applause]

1367
00:53:38,800 --> 00:53:41,200
okay thank you for presentation again so

1368
00:53:41,200 --> 00:53:43,440
i have only one question about uh what

1369
00:53:43,440 --> 00:53:45,920
was in skipped slide and why you skip it

1370
00:53:45,920 --> 00:53:47,280
no i thought that

1371
00:53:47,280 --> 00:53:50,319
i wouldn't get with the time so the skip

1372
00:53:50,319 --> 00:53:54,160
the skipper try was the the arbitrary

1373
00:53:54,160 --> 00:53:56,960
diabetes injection which allows me to

1374
00:53:56,960 --> 00:53:59,760
create new kind of responses actually to

1375
00:53:59,760 --> 00:54:02,160
write the response in the entire

1376
00:54:02,160 --> 00:54:06,240
by by using the last part that is

1377
00:54:06,240 --> 00:54:08,640
so remember when i use a head

1378
00:54:08,640 --> 00:54:10,960
a response it will take the first x

1379
00:54:10,960 --> 00:54:12,160
bytes

1380
00:54:12,160 --> 00:54:14,079
that is set in the content length okay

1381
00:54:14,079 --> 00:54:16,559
of the next response but then

1382
00:54:16,559 --> 00:54:18,960
the extra bytes that are not used as the

1383
00:54:18,960 --> 00:54:19,839
body

1384
00:54:19,839 --> 00:54:22,000
are in many cases discarded but if i'm

1385
00:54:22,000 --> 00:54:24,240
able to reflect something there so for

1386
00:54:24,240 --> 00:54:26,960
example a a response which would say

1387
00:54:26,960 --> 00:54:28,160
http

1388
00:54:28,160 --> 00:54:31,359
1.1 anything else 200 let's say i'm able

1389
00:54:31,359 --> 00:54:33,920
to write a new response and use this to

1390
00:54:33,920 --> 00:54:35,599
actually

1391
00:54:35,599 --> 00:54:37,280
create responses

1392
00:54:37,280 --> 00:54:39,520
by scratch not using

1393
00:54:39,520 --> 00:54:41,440
not using blocks but

1394
00:54:41,440 --> 00:54:44,160
by writing it by myself so this would

1395
00:54:44,160 --> 00:54:46,559
allow me to create even better payloads

1396
00:54:46,559 --> 00:54:48,240
and even when

1397
00:54:48,240 --> 00:54:51,440
i have i was able to prove this in one

1398
00:54:51,440 --> 00:54:53,280
vendor

1399
00:54:53,280 --> 00:54:55,920
and this was pros this allowed me to

1400
00:54:55,920 --> 00:54:58,480
create a payload that

1401
00:54:58,480 --> 00:55:01,119
that contained a javascript and in any

1402
00:55:01,119 --> 00:55:02,720
other way it was impossible because they

1403
00:55:02,720 --> 00:55:05,920
had like almost nothing almost nothing

1404
00:55:05,920 --> 00:55:08,160
reflected almost no way of you of

1405
00:55:08,160 --> 00:55:10,240
creating a new payload but this way i

1406
00:55:10,240 --> 00:55:12,319
was able to create a payload from

1407
00:55:12,319 --> 00:55:14,559
scratch and inject it in the in the

1408
00:55:14,559 --> 00:55:16,000
cashier

1409
00:55:16,000 --> 00:55:18,559
okay thank

1410
00:55:18,839 --> 00:55:21,040
you i think we're running out of time

1411
00:55:21,040 --> 00:55:23,040
there so thank you very much martin for

1412
00:55:23,040 --> 00:55:26,759
your talk thank you

