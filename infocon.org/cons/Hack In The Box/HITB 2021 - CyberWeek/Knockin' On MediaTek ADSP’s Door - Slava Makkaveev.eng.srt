1
00:00:05,920 --> 00:00:08,320
hello everyone thank you for attending

2
00:00:08,320 --> 00:00:11,200
the talk uh i'm flower i'm security

3
00:00:11,200 --> 00:00:13,599
researcher at checkpoint uh

4
00:00:13,599 --> 00:00:15,839
for the past five years

5
00:00:15,839 --> 00:00:17,520
and reverse engineering and

6
00:00:17,520 --> 00:00:20,720
vulnerability research is my daily work

7
00:00:20,720 --> 00:00:23,119
two years ago i did a research on

8
00:00:23,119 --> 00:00:26,240
qualcomm dsp processors and

9
00:00:26,240 --> 00:00:26,880
i

10
00:00:26,880 --> 00:00:28,880
i have discovered several interesting

11
00:00:28,880 --> 00:00:31,840
security issues and in those days

12
00:00:31,840 --> 00:00:35,760
qualcomm was a leading chip manufacturer

13
00:00:35,760 --> 00:00:37,440
of mobile devices

14
00:00:37,440 --> 00:00:39,840
but the world is changing very quickly

15
00:00:39,840 --> 00:00:41,520
and now

16
00:00:41,520 --> 00:00:44,000
it's time to switch to the new leader

17
00:00:44,000 --> 00:00:46,079
it's mediatek

18
00:00:46,079 --> 00:00:47,520
so it was interesting for me to

19
00:00:47,520 --> 00:00:49,680
understand what mediatek proprietary

20
00:00:49,680 --> 00:00:51,840
software is and

21
00:00:51,840 --> 00:00:52,719
how

22
00:00:52,719 --> 00:00:55,280
system-on-chip components interact with

23
00:00:55,280 --> 00:00:56,879
each other

24
00:00:56,879 --> 00:00:58,879
in this study i will introduce the

25
00:00:58,879 --> 00:01:01,760
mediatek audio dsp and for the first

26
00:01:01,760 --> 00:01:03,920
time as a target for security research

27
00:01:03,920 --> 00:01:04,879
and

28
00:01:04,879 --> 00:01:06,640
i'll show you a few zero-day

29
00:01:06,640 --> 00:01:08,560
vulnerabilities and they could be used

30
00:01:08,560 --> 00:01:11,520
to attack audio dsp from

31
00:01:11,520 --> 00:01:14,080
application processor running android

32
00:01:14,080 --> 00:01:17,280
and linux kernel

33
00:01:18,400 --> 00:01:20,479
taiwan's mediatek

34
00:01:20,479 --> 00:01:22,159
has been the global

35
00:01:22,159 --> 00:01:24,000
chip manufacturer

36
00:01:24,000 --> 00:01:25,520
starting from

37
00:01:25,520 --> 00:01:29,520
the theory quarter of 2020

38
00:01:29,520 --> 00:01:33,200
and as you can see on this on this slide

39
00:01:33,200 --> 00:01:35,680
mediatek stocks embedded in

40
00:01:35,680 --> 00:01:39,040
approximately 37 percent of all

41
00:01:39,040 --> 00:01:42,560
smartphone and iot devices in the world

42
00:01:42,560 --> 00:01:44,799
including high-end

43
00:01:44,799 --> 00:01:48,799
phones from xiaomi realme vivo oppo that

44
00:01:48,799 --> 00:01:50,399
are highly

45
00:01:50,399 --> 00:01:52,840
popular in asia

46
00:01:52,840 --> 00:01:55,439
and moreover according to the latest

47
00:01:55,439 --> 00:01:59,119
statistics uh 43 percent of all

48
00:01:59,119 --> 00:02:01,680
smartphones sold in the second quarter

49
00:02:01,680 --> 00:02:03,079
of

50
00:02:03,079 --> 00:02:07,360
2021 uh based on a media texas

51
00:02:07,360 --> 00:02:11,280
so if you want to target asian users

52
00:02:11,280 --> 00:02:14,239
pay attention to the

53
00:02:14,239 --> 00:02:17,760
media tax software

54
00:02:18,160 --> 00:02:20,160
i like this question and i will ask it

55
00:02:20,160 --> 00:02:22,959
again and you know how many processors

56
00:02:22,959 --> 00:02:24,720
are on your mobile phone

57
00:02:24,720 --> 00:02:27,680
uh you might be surprised uh for example

58
00:02:27,680 --> 00:02:31,040
the mediatek demand city 1000 soak

59
00:02:31,040 --> 00:02:33,840
which is a high end but not the latest

60
00:02:33,840 --> 00:02:34,720
so

61
00:02:34,720 --> 00:02:36,239
um

62
00:02:36,239 --> 00:02:37,280
contains

63
00:02:37,280 --> 00:02:42,000
eight cpu cores nine gpu cores uh five

64
00:02:42,000 --> 00:02:43,920
uh five

65
00:02:43,920 --> 00:02:47,120
cores uh image signal processor and a

66
00:02:47,120 --> 00:02:49,920
built-in 5g modem processor and has

67
00:02:49,920 --> 00:02:52,800
several digital signal processors

68
00:02:52,800 --> 00:02:55,200
namely this is a

69
00:02:55,200 --> 00:02:56,640
special

70
00:02:56,640 --> 00:02:58,319
artificial intelligence processing

71
00:02:58,319 --> 00:02:59,680
unique apu

72
00:02:59,680 --> 00:03:00,640
and

73
00:03:00,640 --> 00:03:02,640
the audio dsp

74
00:03:02,640 --> 00:03:05,519
that i used to improve media performance

75
00:03:05,519 --> 00:03:08,560
and reduce cpu usage

76
00:03:08,560 --> 00:03:10,319
as you can see

77
00:03:10,319 --> 00:03:14,560
the stock is a complex thing right and

78
00:03:14,560 --> 00:03:16,720
most of the processors are managed by

79
00:03:16,720 --> 00:03:19,280
their own operating system and this is

80
00:03:19,280 --> 00:03:22,000
not android as many people think

81
00:03:22,000 --> 00:03:25,120
and today we're going to talk about a

82
00:03:25,120 --> 00:03:29,920
mediatek proprietary audio dsp

83
00:03:29,920 --> 00:03:33,839
and its operating system actually

84
00:03:35,120 --> 00:03:37,280
the major goal of the research was to

85
00:03:37,280 --> 00:03:39,040
find a way to attack

86
00:03:39,040 --> 00:03:42,000
audio dsp from android

87
00:03:42,000 --> 00:03:42,959
and

88
00:03:42,959 --> 00:03:44,400
it would be right to start such

89
00:03:44,400 --> 00:03:47,760
investigation by understanding how

90
00:03:47,760 --> 00:03:49,680
android communicates with the

91
00:03:49,680 --> 00:03:52,080
application processor

92
00:03:52,080 --> 00:03:54,239
and

93
00:03:54,319 --> 00:03:56,400
and obviously there must be a linux

94
00:03:56,400 --> 00:03:58,319
kernel driver

95
00:03:58,319 --> 00:04:00,480
which ways for requests from the android

96
00:04:00,480 --> 00:04:02,400
user space and then

97
00:04:02,400 --> 00:04:05,040
using some kind of interprocessor

98
00:04:05,040 --> 00:04:06,400
communication

99
00:04:06,400 --> 00:04:10,480
forwards this request to the

100
00:04:10,720 --> 00:04:14,080
audio dcp site for processing

101
00:04:14,080 --> 00:04:17,199
in this research i i used a xiaomi redmi

102
00:04:17,199 --> 00:04:20,798
note 9 a 5g smartphone based on a

103
00:04:20,798 --> 00:04:25,280
mediatek demand city 800 sock

104
00:04:25,280 --> 00:04:27,120
and

105
00:04:27,120 --> 00:04:29,520
as a test device uh so

106
00:04:29,520 --> 00:04:31,680
there are only a few major related

107
00:04:31,680 --> 00:04:33,919
drivers on my test device and

108
00:04:33,919 --> 00:04:35,120
it was not

109
00:04:35,120 --> 00:04:37,919
it was not really difficult to find uh

110
00:04:37,919 --> 00:04:39,919
the driver responsible for communication

111
00:04:39,919 --> 00:04:42,320
with the audio dsp actually it has a

112
00:04:42,320 --> 00:04:44,960
clear name audio ep

113
00:04:44,960 --> 00:04:46,320
and

114
00:04:46,320 --> 00:04:48,560
and a simple search for the driver name

115
00:04:48,560 --> 00:04:51,040
in the vendor partition

116
00:04:51,040 --> 00:04:53,520
allowed me to find the mediatek api

117
00:04:53,520 --> 00:04:54,639
library

118
00:04:54,639 --> 00:04:56,240
and

119
00:04:56,240 --> 00:05:00,320
audio point primary point mtso

120
00:05:00,720 --> 00:05:04,880
this library exports a singleton

121
00:05:04,880 --> 00:05:06,160
which

122
00:05:06,160 --> 00:05:09,120
could be used to send ep messages into

123
00:05:09,120 --> 00:05:11,520
processor interrupt messages from

124
00:05:11,520 --> 00:05:14,639
android to audio dsp

125
00:05:14,639 --> 00:05:17,680
i use this library mediatek api library

126
00:05:17,680 --> 00:05:20,479
to explore the flow between

127
00:05:20,479 --> 00:05:23,199
android user space

128
00:05:23,199 --> 00:05:26,240
android user space and uh

129
00:05:26,240 --> 00:05:26,960
and

130
00:05:26,960 --> 00:05:29,600
i'll do this yeah

131
00:05:29,600 --> 00:05:32,080
uh in my test pc code

132
00:05:32,080 --> 00:05:35,520
i i have dealt with the out the driver

133
00:05:35,520 --> 00:05:37,600
eye octals directly and without

134
00:05:37,600 --> 00:05:39,759
additional wrapping and on the slide you

135
00:05:39,759 --> 00:05:43,120
can see that i opted that uh

136
00:05:43,120 --> 00:05:45,680
most interesting for this study

137
00:05:45,680 --> 00:05:45,890
and

138
00:05:45,890 --> 00:05:48,479
[Music]

139
00:05:48,479 --> 00:05:51,039
for example there are three different

140
00:05:51,039 --> 00:05:53,199
eye octaves for sending ep messages to

141
00:05:53,199 --> 00:05:55,440
the audio dsp from android

142
00:05:55,440 --> 00:05:57,440
and the different slides

143
00:05:57,440 --> 00:05:59,120
in the way

144
00:05:59,120 --> 00:06:01,840
the message payload is transmitted

145
00:06:01,840 --> 00:06:04,880
the possible options are to transmit

146
00:06:04,880 --> 00:06:07,600
payload as part of the message or

147
00:06:07,600 --> 00:06:10,720
to transmit upload through

148
00:06:10,720 --> 00:06:13,600
a memory sharing between cpu and audio

149
00:06:13,600 --> 00:06:14,800
dsp

150
00:06:14,800 --> 00:06:17,039
or is possible to not transmit the

151
00:06:17,039 --> 00:06:18,960
payload at all yeah

152
00:06:18,960 --> 00:06:23,318
uh the audi epi review

153
00:06:24,400 --> 00:06:27,280
could be used to request the driver uh

154
00:06:27,280 --> 00:06:30,080
to locate a region and a dedicated

155
00:06:30,080 --> 00:06:34,000
shared direct access memory uh intended

156
00:06:34,000 --> 00:06:36,319
for communication between cpu and the

157
00:06:36,319 --> 00:06:37,440
dsp

158
00:06:37,440 --> 00:06:39,759
actually two regions uh

159
00:06:39,759 --> 00:06:42,400
allocated per request uh one is for

160
00:06:42,400 --> 00:06:44,960
transmitting data from up from cpu to

161
00:06:44,960 --> 00:06:47,120
dsp and the second

162
00:06:47,120 --> 00:06:49,440
in the opposite direction

163
00:06:49,440 --> 00:06:50,400
and

164
00:06:50,400 --> 00:06:53,680
as i have mentioned and the driver uses

165
00:06:53,680 --> 00:06:56,720
this uh shared memory shared region and

166
00:06:56,720 --> 00:06:59,360
to transmit the payload when calling

167
00:06:59,360 --> 00:07:02,319
audio episode drum i iota and to get

168
00:07:02,319 --> 00:07:06,240
results back from the audio dsp

169
00:07:07,440 --> 00:07:08,319
uh

170
00:07:08,319 --> 00:07:10,240
okay the ep message

171
00:07:10,240 --> 00:07:13,360
which we can to try to transmit

172
00:07:13,360 --> 00:07:16,319
has a following structure and as i will

173
00:07:16,319 --> 00:07:17,599
show you later

174
00:07:17,599 --> 00:07:19,680
on the dsp side

175
00:07:19,680 --> 00:07:21,440
there are several

176
00:07:21,440 --> 00:07:25,280
independent ep message handlers uh call

177
00:07:25,280 --> 00:07:28,319
it task scenes and each task scene has

178
00:07:28,319 --> 00:07:31,680
its own unique area of responsibility

179
00:07:31,680 --> 00:07:34,400
for example a phone call task

180
00:07:34,400 --> 00:07:37,440
controls speech enhancement

181
00:07:37,440 --> 00:07:40,080
so in the ep message we have to indicate

182
00:07:40,080 --> 00:07:44,879
what the task scene is related for and

183
00:07:44,879 --> 00:07:47,199
and also the message id

184
00:07:47,199 --> 00:07:48,000
which

185
00:07:48,000 --> 00:07:50,960
identifies the action that we are asking

186
00:07:50,960 --> 00:07:52,080
to do

187
00:07:52,080 --> 00:07:54,639
in addition we can to provide the data

188
00:07:54,639 --> 00:07:56,720
some data for from processing and for

189
00:07:56,720 --> 00:07:59,759
this field property

190
00:07:59,759 --> 00:08:01,599
for this purpose

191
00:08:01,599 --> 00:08:03,120
there are three fields

192
00:08:03,120 --> 00:08:05,680
the program one and param two double

193
00:08:05,680 --> 00:08:08,240
walls and the payload array

194
00:08:08,240 --> 00:08:10,400
and the payload

195
00:08:10,400 --> 00:08:13,759
can be either a a data blob uh

196
00:08:13,759 --> 00:08:16,800
associated with a message id or a

197
00:08:16,800 --> 00:08:20,720
an object indicated to the shared

198
00:08:20,720 --> 00:08:23,440
data yeah

199
00:08:23,440 --> 00:08:25,120
okay uh

200
00:08:25,120 --> 00:08:27,199
several what's about charity memory uh

201
00:08:27,199 --> 00:08:30,479
okay the audi ep reg dma i opted uh

202
00:08:30,479 --> 00:08:32,479
responsible for locating sharing memory

203
00:08:32,479 --> 00:08:34,159
expects to receive an object of the

204
00:08:34,159 --> 00:08:36,399
following structure as argument

205
00:08:36,399 --> 00:08:37,679
and

206
00:08:37,679 --> 00:08:39,120
we

207
00:08:39,120 --> 00:08:42,000
here we can control the size of the

208
00:08:42,000 --> 00:08:45,519
allocated region uh through the a2d size

209
00:08:45,519 --> 00:08:47,279
and d2a size

210
00:08:47,279 --> 00:08:49,760
fields for this study it means that we

211
00:08:49,760 --> 00:08:51,120
can

212
00:08:51,120 --> 00:08:53,200
send transmit

213
00:08:53,200 --> 00:08:55,760
the message will load as large as we

214
00:08:55,760 --> 00:08:57,920
want

215
00:08:57,920 --> 00:09:00,240
okay

216
00:09:01,600 --> 00:09:04,000
on machiavelli device the android kernel

217
00:09:04,000 --> 00:09:06,240
lock has kindly provided us with

218
00:09:06,240 --> 00:09:08,480
information about the

219
00:09:08,480 --> 00:09:10,959
global dedicated direct success memory

220
00:09:10,959 --> 00:09:11,839
uh

221
00:09:11,839 --> 00:09:13,519
international communication with the

222
00:09:13,519 --> 00:09:16,640
audio dsp and we have the business we

223
00:09:16,640 --> 00:09:18,000
know the base

224
00:09:18,000 --> 00:09:19,440
address and the

225
00:09:19,440 --> 00:09:20,320
um

226
00:09:20,320 --> 00:09:22,320
and the size of this memory and it's

227
00:09:22,320 --> 00:09:24,000
really strange to look such a

228
00:09:24,000 --> 00:09:25,760
information i think

229
00:09:25,760 --> 00:09:28,640
and moreover when we're allocating a

230
00:09:28,640 --> 00:09:30,240
third

231
00:09:30,240 --> 00:09:32,720
region in this dma

232
00:09:32,720 --> 00:09:35,120
the offset of the shared of the new

233
00:09:35,120 --> 00:09:37,839
shared region in the dma is also logged

234
00:09:37,839 --> 00:09:39,839
and for example in this lock snippet you

235
00:09:39,839 --> 00:09:44,160
can see that for the task scene 18 i i

236
00:09:44,160 --> 00:09:45,760
i've asked

237
00:09:45,760 --> 00:09:48,320
to allocate 20 kilobytes of memory for

238
00:09:48,320 --> 00:09:51,200
a2d buffer and 19 kilobytes for the d2a

239
00:09:51,200 --> 00:09:56,080
buffer and off offsets uh also here yeah

240
00:09:56,080 --> 00:09:57,760
and now

241
00:09:57,760 --> 00:10:01,120
i will say a difficult thing uh so the

242
00:10:01,120 --> 00:10:04,720
physical address of the ferret region

243
00:10:04,720 --> 00:10:08,000
calculated as a base address of the dma

244
00:10:08,000 --> 00:10:11,279
memory and plus offset of the this

245
00:10:11,279 --> 00:10:13,440
shared region in the dma

246
00:10:13,440 --> 00:10:15,440
is persistent on the device

247
00:10:15,440 --> 00:10:17,519
it means that if we're rebooting the

248
00:10:17,519 --> 00:10:19,360
mobile phone uh

249
00:10:19,360 --> 00:10:21,279
if after rebooting the mobile phone we

250
00:10:21,279 --> 00:10:23,440
asked to allocate this the same shared

251
00:10:23,440 --> 00:10:25,120
region we will get the same physical

252
00:10:25,120 --> 00:10:26,079
address

253
00:10:26,079 --> 00:10:27,120
uh

254
00:10:27,120 --> 00:10:30,399
so it's it's very good and i will use it

255
00:10:30,399 --> 00:10:33,040
in one of the vulnerabilities i i'll

256
00:10:33,040 --> 00:10:35,519
show you

257
00:10:35,760 --> 00:10:37,920
to clarify let's take a look at the

258
00:10:37,920 --> 00:10:40,720
following code that i have used to send

259
00:10:40,720 --> 00:10:42,959
ep messages from

260
00:10:42,959 --> 00:10:45,440
android to audio dsp

261
00:10:45,440 --> 00:10:48,079
and this code uh first

262
00:10:48,079 --> 00:10:50,720
we allocate a dma rec

263
00:10:50,720 --> 00:10:53,040
object and fill in the fields indicating

264
00:10:53,040 --> 00:10:56,000
that we need four kilobytes of memory uh

265
00:10:56,000 --> 00:10:59,120
for transfer for message payload and

266
00:10:59,120 --> 00:11:02,880
then uh we call uh audi ep resume i octo

267
00:11:02,880 --> 00:11:05,760
to create the charity region okay

268
00:11:05,760 --> 00:11:09,040
next uh we create a

269
00:11:09,040 --> 00:11:12,320
audio ep message and uh and put in their

270
00:11:12,320 --> 00:11:16,000
place param1 param2 task scene and

271
00:11:16,000 --> 00:11:18,720
message id and the payload data

272
00:11:18,720 --> 00:11:21,519
received as arguments of this function

273
00:11:21,519 --> 00:11:24,399
and finally we call the audi epcent drum

274
00:11:24,399 --> 00:11:26,959
i octal to send the message and to

275
00:11:26,959 --> 00:11:29,120
transmit the pillows through the shared

276
00:11:29,120 --> 00:11:31,600
region yeah

277
00:11:31,600 --> 00:11:34,959
great so now we know how to send an ep

278
00:11:34,959 --> 00:11:38,160
message from android uh user space to

279
00:11:38,160 --> 00:11:39,920
the audio dsp

280
00:11:39,920 --> 00:11:42,320
the next step of the research is to find

281
00:11:42,320 --> 00:11:45,040
uh is to research what is actually a

282
00:11:45,040 --> 00:11:47,920
task scene and and the ep message

283
00:11:47,920 --> 00:11:51,279
handlers in the audio dsp fimber

284
00:11:51,279 --> 00:11:53,600
and

285
00:11:54,800 --> 00:11:57,920
okay uh audio dsp is present in the

286
00:11:57,920 --> 00:12:01,519
xiaomi factory update by a separate uh

287
00:12:01,519 --> 00:12:04,720
audio dsp image file uh

288
00:12:04,720 --> 00:12:07,360
another way to get this image is to dump

289
00:12:07,360 --> 00:12:09,040
the audio display partition from a

290
00:12:09,040 --> 00:12:10,399
rooted device

291
00:12:10,399 --> 00:12:11,920
and

292
00:12:11,920 --> 00:12:13,680
this image file

293
00:12:13,680 --> 00:12:16,079
has a proprietary structure but it could

294
00:12:16,079 --> 00:12:18,959
be easily reconstructed and on my test

295
00:12:18,959 --> 00:12:21,519
device this image contains

296
00:12:21,519 --> 00:12:23,600
nine partitions and the third one and

297
00:12:23,600 --> 00:12:26,240
there of two partitions are certificates

298
00:12:26,240 --> 00:12:29,440
in your format

299
00:12:29,440 --> 00:12:30,800
that used to

300
00:12:30,800 --> 00:12:33,440
verify integrity of the hi-fi

301
00:12:33,440 --> 00:12:35,040
three partitions

302
00:12:35,040 --> 00:12:37,040
and each partition has a header that

303
00:12:37,040 --> 00:12:39,519
stores size and name of the partition

304
00:12:39,519 --> 00:12:41,200
and

305
00:12:41,200 --> 00:12:42,399
and

306
00:12:42,399 --> 00:12:44,959
header starts with the magic which could

307
00:12:44,959 --> 00:12:47,279
be used to quickly locate a partition in

308
00:12:47,279 --> 00:12:50,079
the image and for example on the slide

309
00:12:50,079 --> 00:12:53,200
you can see as that the

310
00:12:53,200 --> 00:12:55,120
the header and the

311
00:12:55,120 --> 00:12:57,200
data size of the

312
00:12:57,200 --> 00:13:01,920
hi-fi 380 ram partition uh are 200 and 8

313
00:13:01,920 --> 00:13:03,920
000 bytes

314
00:13:03,920 --> 00:13:05,279
respectively

315
00:13:05,279 --> 00:13:08,639
and so i just want to

316
00:13:08,639 --> 00:13:10,160
to say that

317
00:13:10,160 --> 00:13:12,320
we have all the information that we need

318
00:13:12,320 --> 00:13:15,040
to cut how do these p content from the

319
00:13:15,040 --> 00:13:17,680
image yeah

320
00:13:17,680 --> 00:13:18,639
okay

321
00:13:18,639 --> 00:13:22,000
the iram and sram partitions

322
00:13:22,000 --> 00:13:24,079
are code and data of the customized free

323
00:13:24,079 --> 00:13:27,200
rtos free real-time operating system and

324
00:13:27,200 --> 00:13:30,560
the dram is a dynamic memory and in the

325
00:13:30,560 --> 00:13:32,240
initial state

326
00:13:32,240 --> 00:13:33,040
it's

327
00:13:33,040 --> 00:13:34,560
almost empty

328
00:13:34,560 --> 00:13:35,360
uh

329
00:13:35,360 --> 00:13:37,279
let's take a closer look at the sram

330
00:13:37,279 --> 00:13:39,360
partition and the partition

331
00:13:39,360 --> 00:13:42,399
starts with 400 0 bytes and it means

332
00:13:42,399 --> 00:13:45,440
that there is no file format here and we

333
00:13:45,440 --> 00:13:47,600
are dealing with the raw data

334
00:13:47,600 --> 00:13:49,839
and

335
00:13:50,160 --> 00:13:51,279
next

336
00:13:51,279 --> 00:13:52,399
about

337
00:13:52,399 --> 00:13:55,360
four kilobytes uh appear to be pointers

338
00:13:55,360 --> 00:13:59,120
to to their memory mostly located after

339
00:13:59,120 --> 00:14:01,760
five six zero zero zero zero address and

340
00:14:01,760 --> 00:14:05,440
next starting from the 3b f 8 address in

341
00:14:05,440 --> 00:14:09,519
the then silica extensor bytecode

342
00:14:10,639 --> 00:14:13,199
now let's talk about tendon silica

343
00:14:13,199 --> 00:14:14,800
extension

344
00:14:14,800 --> 00:14:17,120
imagine you want to create your own

345
00:14:17,120 --> 00:14:19,120
highly specialized

346
00:14:19,120 --> 00:14:20,320
processor

347
00:14:20,320 --> 00:14:23,920
how to make it super ultra fast uh okay

348
00:14:23,920 --> 00:14:26,079
the general approach is to improve

349
00:14:26,079 --> 00:14:28,160
performance uh

350
00:14:28,160 --> 00:14:30,560
through the high clock rate

351
00:14:30,560 --> 00:14:34,399
but there is another way is to add adopt

352
00:14:34,399 --> 00:14:37,199
a hardware for the algorithms running on

353
00:14:37,199 --> 00:14:38,000
it

354
00:14:38,000 --> 00:14:38,959
and

355
00:14:38,959 --> 00:14:41,199
the media attack

356
00:14:41,199 --> 00:14:45,519
has chosen this second way

357
00:14:45,519 --> 00:14:48,720
the tensilic extensor platform allows a

358
00:14:48,720 --> 00:14:51,279
chip manufacturer to extend

359
00:14:51,279 --> 00:14:53,839
based extensor extraction sent with a

360
00:14:53,839 --> 00:14:56,800
custom instructions to

361
00:14:56,800 --> 00:14:57,680
to

362
00:14:57,680 --> 00:14:58,880
optimize

363
00:14:58,880 --> 00:15:00,800
particular algorithms

364
00:15:00,800 --> 00:15:03,040
and

365
00:15:05,199 --> 00:15:08,880
a resource and the mediatek developer

366
00:15:08,880 --> 00:15:12,320
can can add their comments uh

367
00:15:12,320 --> 00:15:14,800
to uh

368
00:15:14,880 --> 00:15:16,720
comments to perform operation on

369
00:15:16,720 --> 00:15:19,360
multiple data or to encode several

370
00:15:19,360 --> 00:15:23,519
operations into one uh long op code or

371
00:15:23,519 --> 00:15:27,760
to combine civil operations in in

372
00:15:27,760 --> 00:15:30,079
in another operation etc

373
00:15:30,079 --> 00:15:31,279
in short

374
00:15:31,279 --> 00:15:33,759
media attack has been using

375
00:15:33,759 --> 00:15:34,720
the

376
00:15:34,720 --> 00:15:36,320
stand dart

377
00:15:36,320 --> 00:15:37,199
and

378
00:15:37,199 --> 00:15:39,060
temp audit and

379
00:15:39,060 --> 00:15:40,639
[Music]

380
00:15:40,639 --> 00:15:42,880
a standard audio display template

381
00:15:42,880 --> 00:15:44,160
prepared

382
00:15:44,160 --> 00:15:46,959
by 10 silica for

383
00:15:46,959 --> 00:15:49,839
for audi dsp processors

384
00:15:49,839 --> 00:15:51,440
and

385
00:15:51,440 --> 00:15:54,880
and the detection yeah so we need to

386
00:15:54,880 --> 00:15:57,759
find a way to disassemble extensor court

387
00:15:57,759 --> 00:16:00,399
and if you also try to write a script as

388
00:16:00,399 --> 00:16:02,079
it would

389
00:16:02,079 --> 00:16:04,480
would try to find beginning of the

390
00:16:04,480 --> 00:16:06,240
functions and

391
00:16:06,240 --> 00:16:08,160
in the extensor court and try to

392
00:16:08,160 --> 00:16:09,440
disassemble

393
00:16:09,440 --> 00:16:11,839
theoretically it's possible because most

394
00:16:11,839 --> 00:16:14,320
of the functions in the instance

395
00:16:14,320 --> 00:16:16,560
of extensor

396
00:16:16,560 --> 00:16:17,839
begins

397
00:16:17,839 --> 00:16:19,360
with

398
00:16:19,360 --> 00:16:21,519
with the entry op code

399
00:16:21,519 --> 00:16:23,440
that allocates the stack

400
00:16:23,440 --> 00:16:25,519
and but this solution doesn't work

401
00:16:25,519 --> 00:16:27,759
because there are too many uh custom

402
00:16:27,759 --> 00:16:30,880
instructions that ida is not aware of

403
00:16:30,880 --> 00:16:32,240
and

404
00:16:32,240 --> 00:16:34,959
i just got stuck on unknown op quotes

405
00:16:34,959 --> 00:16:36,480
and all

406
00:16:36,480 --> 00:16:39,519
that i have got are snippets like that

407
00:16:39,519 --> 00:16:42,240
like the phone

408
00:16:43,759 --> 00:16:45,839
eventually i find a good solution is to

409
00:16:45,839 --> 00:16:46,720
use

410
00:16:46,720 --> 00:16:50,240
is to use the extensor sdk to help ida

411
00:16:50,240 --> 00:16:51,440
and

412
00:16:51,440 --> 00:16:53,519
high-five this software development tool

413
00:16:53,519 --> 00:16:54,399
chain

414
00:16:54,399 --> 00:16:57,279
could be freely downloaded from the

415
00:16:57,279 --> 00:16:59,920
tensilica tools website and the xt

416
00:16:59,920 --> 00:17:02,480
devtools is a part of the installation

417
00:17:02,480 --> 00:17:03,759
packet

418
00:17:03,759 --> 00:17:05,839
i use the xt

419
00:17:05,839 --> 00:17:07,679
object dump

420
00:17:07,679 --> 00:17:09,439
tool and

421
00:17:09,439 --> 00:17:12,400
to dump hi-fi 3 partitions of the audio

422
00:17:12,400 --> 00:17:13,679
dsp and

423
00:17:13,679 --> 00:17:16,959
on the slide you can see the way i

424
00:17:16,959 --> 00:17:19,839
i have dumped the sram partition

425
00:17:19,839 --> 00:17:20,640
and

426
00:17:20,640 --> 00:17:22,799
the object dump

427
00:17:22,799 --> 00:17:27,039
contains disassembly extensor cord and

428
00:17:27,039 --> 00:17:29,120
the tool knows

429
00:17:29,120 --> 00:17:33,520
instructions where either got stuck yeah

430
00:17:33,520 --> 00:17:35,760
okay

431
00:17:38,000 --> 00:17:39,520
okay

432
00:17:39,520 --> 00:17:40,880
so but

433
00:17:40,880 --> 00:17:43,200
but the the

434
00:17:43,200 --> 00:17:45,120
the object dump

435
00:17:45,120 --> 00:17:47,760
contains many errors actually and it

436
00:17:47,760 --> 00:17:51,120
could it cannot be used as a main

437
00:17:51,120 --> 00:17:53,919
resource for the research and but

438
00:17:53,919 --> 00:17:57,679
but again it can help either to

439
00:17:57,679 --> 00:17:58,400
to

440
00:17:58,400 --> 00:17:59,520
parse

441
00:17:59,520 --> 00:18:00,799
disassemble

442
00:18:00,799 --> 00:18:04,480
the hi-fi partitions much better and the

443
00:18:04,480 --> 00:18:06,000
simplest solution

444
00:18:06,000 --> 00:18:07,440
is to

445
00:18:07,440 --> 00:18:09,280
use

446
00:18:09,280 --> 00:18:12,160
object dump to add

447
00:18:12,160 --> 00:18:14,320
disassembly it

448
00:18:14,320 --> 00:18:17,520
code uh as a comment for all uh

449
00:18:17,520 --> 00:18:20,799
unrecognized instructions yeah uh so uh

450
00:18:20,799 --> 00:18:23,679
on this slide you can see uh what

451
00:18:23,679 --> 00:18:25,919
the disassembled code and the id

452
00:18:25,919 --> 00:18:28,720
navigation bar looks like after applying

453
00:18:28,720 --> 00:18:31,120
the dump and so

454
00:18:31,120 --> 00:18:33,280
almost called chunks

455
00:18:33,280 --> 00:18:35,520
were recognized yeah

456
00:18:35,520 --> 00:18:39,679
also you should be noted as

457
00:18:41,760 --> 00:18:44,320
that the firmware functions and contains

458
00:18:44,320 --> 00:18:46,480
a code

459
00:18:46,480 --> 00:18:49,760
to dump logging to lock uh debugging

460
00:18:49,760 --> 00:18:52,240
information and and

461
00:18:52,240 --> 00:18:53,600
the lock message

462
00:18:53,600 --> 00:18:57,120
it contains among other things and the

463
00:18:57,120 --> 00:18:59,520
name of the current function and means

464
00:18:59,520 --> 00:19:02,799
that mediatek

465
00:19:03,600 --> 00:19:05,320
has gave us

466
00:19:05,320 --> 00:19:07,760
self-described function names and the

467
00:19:07,760 --> 00:19:09,760
ability to search for function name in

468
00:19:09,760 --> 00:19:10,960
the

469
00:19:10,960 --> 00:19:13,919
extensive url

470
00:19:14,720 --> 00:19:16,559
so okay

471
00:19:16,559 --> 00:19:20,000
for now we we know how to send messages

472
00:19:20,000 --> 00:19:23,600
from android or dsp and we know we we

473
00:19:23,600 --> 00:19:26,559
have a way to research the audio dsp

474
00:19:26,559 --> 00:19:28,960
fimber and so now let's take a look at

475
00:19:28,960 --> 00:19:30,799
the content of the film

476
00:19:30,799 --> 00:19:31,840
finger

477
00:19:31,840 --> 00:19:33,520
actually a

478
00:19:33,520 --> 00:19:35,600
mediatek

479
00:19:35,600 --> 00:19:39,760
mediatek audio dsp operating system is

480
00:19:39,760 --> 00:19:43,120
an adopted version of the freert os

481
00:19:43,120 --> 00:19:45,919
mediatek has used a third party kernel

482
00:19:45,919 --> 00:19:49,200
and implemented a

483
00:19:49,200 --> 00:19:52,320
messaging and audio media logic on top

484
00:19:52,320 --> 00:19:54,720
of it here

485
00:19:54,799 --> 00:19:55,919
so a

486
00:19:55,919 --> 00:19:58,880
dsp operating system

487
00:19:58,880 --> 00:20:01,360
creates a number of uh

488
00:20:01,360 --> 00:20:03,200
of audio tasks

489
00:20:03,200 --> 00:20:05,760
at startup and associate them with the

490
00:20:05,760 --> 00:20:07,440
same ids

491
00:20:07,440 --> 00:20:10,240
and the create all audio task function

492
00:20:10,240 --> 00:20:12,799
is a factory where we can find all the

493
00:20:12,799 --> 00:20:15,360
task scenes and

494
00:20:15,360 --> 00:20:16,880
tasks in ids

495
00:20:16,880 --> 00:20:19,200
and also and

496
00:20:19,200 --> 00:20:21,360
on this slide i've listed

497
00:20:21,360 --> 00:20:24,720
the audio tasks running on the test

498
00:20:24,720 --> 00:20:28,159
xiaomi device and i've highlighted the

499
00:20:28,159 --> 00:20:32,320
tasks that i have found vulnerably

500
00:20:33,520 --> 00:20:37,679
okay um the audi ep driver uh linux

501
00:20:37,679 --> 00:20:40,240
driver uh does not communicate with the

502
00:20:40,240 --> 00:20:41,600
audio dsp

503
00:20:41,600 --> 00:20:44,240
processor directly instead it forwards

504
00:20:44,240 --> 00:20:46,480
all the ep messages from the android

505
00:20:46,480 --> 00:20:48,640
user space to the system control

506
00:20:48,640 --> 00:20:51,440
processor adding this messages to the

507
00:20:51,440 --> 00:20:53,919
scp system control processor queue

508
00:20:53,919 --> 00:20:55,679
and uh

509
00:20:55,679 --> 00:20:58,799
audio dsp operating system registers

510
00:20:58,799 --> 00:21:02,400
sap message dispatcher to get

511
00:21:02,400 --> 00:21:04,080
these messages

512
00:21:04,080 --> 00:21:06,159
and each

513
00:21:06,159 --> 00:21:09,039
audio task is presented in the

514
00:21:09,039 --> 00:21:12,000
audio dcp operating system by a task

515
00:21:12,000 --> 00:21:15,120
object and this object amongst other

516
00:21:15,120 --> 00:21:17,280
things contains a pointer to the receive

517
00:21:17,280 --> 00:21:19,919
message function and the sap message

518
00:21:19,919 --> 00:21:22,080
dispatcher and calls these functions

519
00:21:22,080 --> 00:21:23,200
when a new

520
00:21:23,200 --> 00:21:25,039
ep message arrived

521
00:21:25,039 --> 00:21:26,320
and

522
00:21:26,320 --> 00:21:27,760
and actually

523
00:21:27,760 --> 00:21:31,039
the receive message functions that what

524
00:21:31,039 --> 00:21:32,960
we are looking for

525
00:21:32,960 --> 00:21:34,240
because

526
00:21:34,240 --> 00:21:35,679
this is where

527
00:21:35,679 --> 00:21:37,120
audio tasks

528
00:21:37,120 --> 00:21:38,880
begin to handle

529
00:21:38,880 --> 00:21:42,080
audi ep messages and

530
00:21:42,080 --> 00:21:44,559
and the ep message is passed as a second

531
00:21:44,559 --> 00:21:47,200
argument to the receive message function

532
00:21:47,200 --> 00:21:48,240
yeah

533
00:21:48,240 --> 00:21:50,880
so after quick look at the

534
00:21:50,880 --> 00:21:53,200
extensor code and the out this perfumer

535
00:21:53,200 --> 00:21:56,960
i i think that most of the

536
00:21:56,960 --> 00:22:00,080
audio tasks except phone call of load

537
00:22:00,080 --> 00:22:03,679
controller and demon audio tasks uh

538
00:22:03,679 --> 00:22:07,039
use the same uh entice common receive

539
00:22:07,039 --> 00:22:09,760
function and there are only five listed

540
00:22:09,760 --> 00:22:12,480
on the slide functions uh that that

541
00:22:12,480 --> 00:22:16,000
parse our dp message and this is where i

542
00:22:16,000 --> 00:22:18,480
look it for the vulnerabilities

543
00:22:18,480 --> 00:22:21,120
and i reviewed manually

544
00:22:21,120 --> 00:22:24,080
these files functions and

545
00:22:24,080 --> 00:22:26,799
and i discovered a few vulnerabilities

546
00:22:26,799 --> 00:22:29,520
that could be exploited to attack from

547
00:22:29,520 --> 00:22:33,679
android the audio dsp processor

548
00:22:33,679 --> 00:22:35,280
i will show you some details about

549
00:22:35,280 --> 00:22:38,159
vulnerabilities uh for example this

550
00:22:38,159 --> 00:22:40,960
vulnerability okay

551
00:22:40,960 --> 00:22:45,600
is related to all common tasks and

552
00:22:45,600 --> 00:22:48,000
when when handling a message

553
00:22:48,000 --> 00:22:50,640
with id6 and task common tasks function

554
00:22:50,640 --> 00:22:54,400
copies as a message payload to a to g

555
00:22:54,400 --> 00:22:55,200
share

556
00:22:55,200 --> 00:22:58,799
field of a task common object and

557
00:22:58,799 --> 00:23:00,400
the param one

558
00:23:00,400 --> 00:23:01,840
that we control

559
00:23:01,840 --> 00:23:02,720
is

560
00:23:02,720 --> 00:23:06,559
is used as a number of bytes to copy

561
00:23:06,960 --> 00:23:09,520
the check is that the program one is is

562
00:23:09,520 --> 00:23:11,679
not greater than the size of the a to d

563
00:23:11,679 --> 00:23:14,000
share field is emitted and it's enhanced

564
00:23:14,000 --> 00:23:16,720
weak the message payload overflows the

565
00:23:16,720 --> 00:23:19,600
hip after the a to d shear field uh when

566
00:23:19,600 --> 00:23:22,400
the size of the plot is greater than 20

567
00:23:22,400 --> 00:23:23,919
bytes yeah

568
00:23:23,919 --> 00:23:26,000
on the slide also you can see the

569
00:23:26,000 --> 00:23:28,320
vulnerable code

570
00:23:28,320 --> 00:23:30,559
from the audio dsp finger

571
00:23:30,559 --> 00:23:34,400
and and this call of the send epdma

572
00:23:34,400 --> 00:23:37,760
function uh that i ha i have showed uh

573
00:23:37,760 --> 00:23:40,320
before uh okay

574
00:23:40,320 --> 00:23:42,880
from the and from android overflows the

575
00:23:42,880 --> 00:23:45,600
audio display memory and and causes a

576
00:23:45,600 --> 00:23:47,360
crash and

577
00:23:47,360 --> 00:23:50,960
here i asked to to copy 600 bytes

578
00:23:50,960 --> 00:23:53,520
and we don't have a crash dump but

579
00:23:53,520 --> 00:23:56,559
android kernel lock provides uh contains

580
00:23:56,559 --> 00:23:57,840
is uh

581
00:23:57,840 --> 00:23:59,919
the crush address actually yeah

582
00:23:59,919 --> 00:24:02,320
it's not

583
00:24:02,320 --> 00:24:04,240
this is the second right vulnerability

584
00:24:04,240 --> 00:24:05,760
and

585
00:24:05,760 --> 00:24:08,000
so the task

586
00:24:08,000 --> 00:24:10,400
audio demon task loop function

587
00:24:10,400 --> 00:24:12,799
function upon receive of the message

588
00:24:12,799 --> 00:24:15,120
with 87

589
00:24:15,120 --> 00:24:16,080
calls the

590
00:24:16,080 --> 00:24:18,960
initial core functions which again

591
00:24:18,960 --> 00:24:23,360
copies the message payload to a

592
00:24:23,679 --> 00:24:26,400
heap located message buffer and

593
00:24:26,400 --> 00:24:28,159
using the param one as the number of

594
00:24:28,159 --> 00:24:30,880
bytes to copy and this functions

595
00:24:30,880 --> 00:24:32,799
this function contains the check that

596
00:24:32,799 --> 00:24:35,919
the param1 is less than e0

597
00:24:35,919 --> 00:24:36,880
but

598
00:24:36,880 --> 00:24:39,279
but the size of the destination buffer

599
00:24:39,279 --> 00:24:40,080
is

600
00:24:40,080 --> 00:24:41,760
20 bytes

601
00:24:41,760 --> 00:24:44,400
and this means that we can freely

602
00:24:44,400 --> 00:24:46,640
overflow c0 bytes

603
00:24:46,640 --> 00:24:48,240
in the hip and

604
00:24:48,240 --> 00:24:49,679
to

605
00:24:49,679 --> 00:24:52,000
to page as a

606
00:24:52,000 --> 00:24:53,600
audio disp

607
00:24:53,600 --> 00:24:55,600
heap memory it's enough to

608
00:24:55,600 --> 00:24:56,880
to send

609
00:24:56,880 --> 00:24:59,279
the relevant

610
00:24:59,279 --> 00:25:02,880
ep message to the demon audio tasks and

611
00:25:02,880 --> 00:25:04,640
transmit the message payload as a part

612
00:25:04,640 --> 00:25:08,000
of the message that's all

613
00:25:08,000 --> 00:25:09,840
okay

614
00:25:09,840 --> 00:25:11,600
this is the third

615
00:25:11,600 --> 00:25:14,320
right vulnerability okay and when

616
00:25:14,320 --> 00:25:17,559
processing ms a message id with

617
00:25:17,559 --> 00:25:19,120
203

618
00:25:19,120 --> 00:25:22,080
and the task common task loop functions

619
00:25:22,080 --> 00:25:25,200
and so it calls a get audio

620
00:25:25,200 --> 00:25:27,840
from message function to extract an

621
00:25:27,840 --> 00:25:30,000
audio buffer from a physical memory

622
00:25:30,000 --> 00:25:31,840
physical memory

623
00:25:31,840 --> 00:25:33,919
addressed by the param2

624
00:25:33,919 --> 00:25:35,919
and then this buffer is passed as

625
00:25:35,919 --> 00:25:38,960
argument to audi dsp hardware open up

626
00:25:38,960 --> 00:25:40,320
function and

627
00:25:40,320 --> 00:25:43,600
this function copies this audio buffer

628
00:25:43,600 --> 00:25:45,520
to a static array

629
00:25:45,520 --> 00:25:49,200
and the fields the field in the uh

630
00:25:49,200 --> 00:25:53,039
the offset 54 is used in the array in

631
00:25:53,039 --> 00:25:55,440
the index of the array and

632
00:25:55,440 --> 00:25:57,279
they check

633
00:25:57,279 --> 00:25:59,520
there is no check for the index overflow

634
00:25:59,520 --> 00:26:02,000
this means that if we can control audio

635
00:26:02,000 --> 00:26:04,880
buffer in the physical memory uh we we

636
00:26:04,880 --> 00:26:07,440
can provide a arbitrary index and

637
00:26:07,440 --> 00:26:08,640
overwrite

638
00:26:08,640 --> 00:26:10,559
the memory in the

639
00:26:10,559 --> 00:26:12,559
data segment and

640
00:26:12,559 --> 00:26:14,799
discontrol it values yeah

641
00:26:14,799 --> 00:26:16,400
and

642
00:26:16,400 --> 00:26:18,880
to open this audio buffer actually it's

643
00:26:18,880 --> 00:26:22,000
enough to send an ep message and

644
00:26:22,000 --> 00:26:24,080
and transmit a message payload through

645
00:26:24,080 --> 00:26:26,960
the shared memory and and indicate the

646
00:26:26,960 --> 00:26:29,919
param and point the param one to the

647
00:26:29,919 --> 00:26:32,000
physical address of the shared memory

648
00:26:32,000 --> 00:26:34,480
and yes we know this physical address

649
00:26:34,480 --> 00:26:35,840
and uh

650
00:26:35,840 --> 00:26:36,640
as

651
00:26:36,640 --> 00:26:38,799
i have mentioned this physical address

652
00:26:38,799 --> 00:26:41,120
is permanent on device and we know this

653
00:26:41,120 --> 00:26:44,559
address from from the kernel log great

654
00:26:44,559 --> 00:26:47,200
so we control the buffer and the code

655
00:26:47,200 --> 00:26:50,159
represented below this slide

656
00:26:50,159 --> 00:26:51,120
just

657
00:26:51,120 --> 00:26:55,918
creates my mobile test device here

658
00:26:56,640 --> 00:26:57,440
okay

659
00:26:57,440 --> 00:26:59,679
what we have um so

660
00:26:59,679 --> 00:27:03,120
we compromised other dcp firmware so we

661
00:27:03,120 --> 00:27:06,959
know how to send an ep message from

662
00:27:07,679 --> 00:27:09,919
from android and and

663
00:27:09,919 --> 00:27:13,919
overflow memory in the audio dsp but

664
00:27:13,919 --> 00:27:15,840
to finish

665
00:27:15,840 --> 00:27:18,480
the flow to this end-to-end flow we need

666
00:27:18,480 --> 00:27:21,120
to find a way to attack uh

667
00:27:21,120 --> 00:27:24,000
our android hull android hardware

668
00:27:24,000 --> 00:27:25,919
hardware abstraction level from an

669
00:27:25,919 --> 00:27:27,760
unprivileged application

670
00:27:27,760 --> 00:27:30,480
and uh we know how to

671
00:27:30,480 --> 00:27:32,720
uh how to trigger vulnerabilities in

672
00:27:32,720 --> 00:27:35,120
audio dsp using

673
00:27:35,120 --> 00:27:37,679
the audio ep driver eye octal but

674
00:27:37,679 --> 00:27:40,799
unfortunately android application

675
00:27:40,799 --> 00:27:43,039
and previous android application

676
00:27:43,039 --> 00:27:44,720
has no permission to communicate with

677
00:27:44,720 --> 00:27:48,720
this driver because it's linux uh allows

678
00:27:48,720 --> 00:27:51,600
access to the audio ep device object

679
00:27:51,600 --> 00:27:53,200
only from

680
00:27:53,200 --> 00:27:56,960
factory meta test and mtk audio contexts

681
00:27:56,960 --> 00:27:58,000
only

682
00:27:58,000 --> 00:28:00,799
and so we need to find a way to exploit

683
00:28:00,799 --> 00:28:03,279
android hull and to

684
00:28:03,279 --> 00:28:05,520
be able to send to

685
00:28:05,520 --> 00:28:08,080
to call out the ep driver yeah

686
00:28:08,080 --> 00:28:10,000
and

687
00:28:10,000 --> 00:28:12,960
while looking for the way for a way to

688
00:28:12,960 --> 00:28:14,640
attack

689
00:28:14,640 --> 00:28:16,880
mediatek hull

690
00:28:16,880 --> 00:28:19,440
i have found several dangerous audio

691
00:28:19,440 --> 00:28:22,559
settings implemented by mediatek uh

692
00:28:22,559 --> 00:28:24,399
for debugging purposes

693
00:28:24,399 --> 00:28:25,520
and

694
00:28:25,520 --> 00:28:27,120
an unprevious android application can

695
00:28:27,120 --> 00:28:29,440
abuse these settings to attack and

696
00:28:29,440 --> 00:28:30,960
android hull

697
00:28:30,960 --> 00:28:32,559
and

698
00:28:32,559 --> 00:28:35,200
android documentation states that the

699
00:28:35,200 --> 00:28:37,840
audio manager provides access to volume

700
00:28:37,840 --> 00:28:38,559
and

701
00:28:38,559 --> 00:28:41,279
ring remote control and an application

702
00:28:41,279 --> 00:28:44,080
can bind and can buy bind

703
00:28:44,080 --> 00:28:47,200
the audio service service and then

704
00:28:47,200 --> 00:28:48,480
call

705
00:28:48,480 --> 00:28:50,799
set parameter method of the audio

706
00:28:50,799 --> 00:28:53,840
manager to configure the hardware yeah

707
00:28:53,840 --> 00:28:54,559
and

708
00:28:54,559 --> 00:28:56,240
achieve manufacturer

709
00:28:56,240 --> 00:28:57,120
can

710
00:28:57,120 --> 00:28:58,799
can add

711
00:28:58,799 --> 00:29:01,679
its its own audio settings parameters

712
00:29:01,679 --> 00:29:03,919
and uh and

713
00:29:03,919 --> 00:29:05,520
and keep track

714
00:29:05,520 --> 00:29:07,600
of their changes

715
00:29:07,600 --> 00:29:09,520
as mediatek

716
00:29:09,520 --> 00:29:12,480
has added the proprietary parameters to

717
00:29:12,480 --> 00:29:16,640
configure hull oris libraries and

718
00:29:16,640 --> 00:29:19,440
the mediatek api library audio point

719
00:29:19,440 --> 00:29:21,919
primary point in nteso

720
00:29:21,919 --> 00:29:27,480
parses these audio parameters and

721
00:29:32,640 --> 00:29:35,679
do the action actually yeah

722
00:29:35,679 --> 00:29:36,720
um

723
00:29:36,720 --> 00:29:39,440
so for for example uh for example in a

724
00:29:39,440 --> 00:29:42,240
previous android application and can uh

725
00:29:42,240 --> 00:29:45,520
can switch on enable uh

726
00:29:45,520 --> 00:29:47,279
the logging of speech processing

727
00:29:47,279 --> 00:29:50,480
information uh just by sending this and

728
00:29:50,480 --> 00:29:53,840
presented on the slide uh parameter

729
00:29:53,840 --> 00:29:55,600
the parameter string

730
00:29:55,600 --> 00:29:58,159
consis can contains uh

731
00:29:58,159 --> 00:30:00,000
information about target source

732
00:30:00,000 --> 00:30:01,520
subsystem

733
00:30:01,520 --> 00:30:04,480
it can be od sp or hal uh also it

734
00:30:04,480 --> 00:30:06,720
contains ortho scenario and common keys

735
00:30:06,720 --> 00:30:10,399
and that identify the affected library

736
00:30:10,399 --> 00:30:13,440
and uh and common name and and its

737
00:30:13,440 --> 00:30:16,320
argument actually uh all over the

738
00:30:16,320 --> 00:30:18,640
scenario on common keys we can find in

739
00:30:18,640 --> 00:30:21,760
in the origins config xml file

740
00:30:21,760 --> 00:30:24,000
located on the device

741
00:30:24,000 --> 00:30:25,440
and

742
00:30:25,440 --> 00:30:29,760
on this slides i've combined

743
00:30:30,799 --> 00:30:31,919
all

744
00:30:31,919 --> 00:30:35,120
all the all the accepted parameters

745
00:30:35,120 --> 00:30:37,760
and the most interesting part is a

746
00:30:37,760 --> 00:30:40,880
common name and on my tester device i i

747
00:30:40,880 --> 00:30:43,919
found nine possible comments and all

748
00:30:43,919 --> 00:30:46,080
these comments are interesting for us in

749
00:30:46,080 --> 00:30:49,120
terms of information leak

750
00:30:49,120 --> 00:30:52,159
but i want to pay attention only on one

751
00:30:52,159 --> 00:30:54,720
parameter the program file the comment

752
00:30:54,720 --> 00:30:57,600
okay the program file command uh

753
00:30:57,600 --> 00:31:00,159
uh allows an employee to privilege

754
00:31:00,159 --> 00:31:03,200
android application to to indicate where

755
00:31:03,200 --> 00:31:05,919
is located configuration file for a

756
00:31:05,919 --> 00:31:10,480
particular orisas library yeah and and

757
00:31:10,480 --> 00:31:11,600
actually

758
00:31:11,600 --> 00:31:13,760
it should be noted that

759
00:31:13,760 --> 00:31:16,159
android vendors and chip manufacturers

760
00:31:16,159 --> 00:31:19,840
and don't care about a check property

761
00:31:19,840 --> 00:31:21,120
properly

762
00:31:21,120 --> 00:31:23,360
the configuration files because

763
00:31:23,360 --> 00:31:24,640
[Music]

764
00:31:24,640 --> 00:31:26,559
they

765
00:31:26,559 --> 00:31:28,320
them are not

766
00:31:28,320 --> 00:31:31,360
available for unprivileged users but in

767
00:31:31,360 --> 00:31:32,559
our case

768
00:31:32,559 --> 00:31:33,440
we

769
00:31:33,440 --> 00:31:36,640
we control configuration files and

770
00:31:36,640 --> 00:31:39,279
mediatek how configuration

771
00:31:39,279 --> 00:31:40,799
becomes an

772
00:31:40,799 --> 00:31:43,120
attack vector and

773
00:31:43,120 --> 00:31:46,960
an attacker can provide and a malformat

774
00:31:46,960 --> 00:31:50,919
a configuration file to crush

775
00:31:50,919 --> 00:31:54,559
a particular orisas libraries

776
00:31:54,559 --> 00:31:56,080
which could lead to local privileged

777
00:31:56,080 --> 00:31:57,519
escalation

778
00:31:57,519 --> 00:31:59,039
actually

779
00:31:59,039 --> 00:32:01,760
this is all that i i have the right to

780
00:32:01,760 --> 00:32:03,679
share with you about this vulnerability

781
00:32:03,679 --> 00:32:07,840
uh i prepared a simple example of uh

782
00:32:07,840 --> 00:32:11,919
of abusing the api to attack one of the

783
00:32:11,919 --> 00:32:14,720
overseas libraries but i i can share

784
00:32:14,720 --> 00:32:18,320
today for ethical reasons so

785
00:32:18,480 --> 00:32:19,600
so

786
00:32:19,600 --> 00:32:21,120
what do you have okay

787
00:32:21,120 --> 00:32:24,480
to summarize uh to summarize uh

788
00:32:24,480 --> 00:32:27,519
we have looked at the mediatek audio dsp

789
00:32:27,519 --> 00:32:28,720
as an

790
00:32:28,720 --> 00:32:31,200
attack target and

791
00:32:31,200 --> 00:32:33,679
we show that in an unprivileged android

792
00:32:33,679 --> 00:32:36,880
application and can attack the

793
00:32:36,880 --> 00:32:39,279
mediatek hull and

794
00:32:39,279 --> 00:32:41,200
thus been able to send

795
00:32:41,200 --> 00:32:45,279
messages to the audio dsp and a crafted

796
00:32:45,279 --> 00:32:46,960
audio dsp message

797
00:32:46,960 --> 00:32:48,080
could be used

798
00:32:48,080 --> 00:32:49,440
[Music]

799
00:32:49,440 --> 00:32:52,880
to to execute and and hide malicious

800
00:32:52,880 --> 00:32:56,559
code in the audio dsp finger and since

801
00:32:56,559 --> 00:32:59,519
the audio dsp

802
00:32:59,919 --> 00:33:03,039
has access to the audio flow and an

803
00:33:03,039 --> 00:33:05,039
attack on the audio display processor it

804
00:33:05,039 --> 00:33:07,360
could be used to if drop

805
00:33:07,360 --> 00:33:11,200
on the user and since that a dcp

806
00:33:11,200 --> 00:33:13,200
operating system

807
00:33:13,200 --> 00:33:15,519
works directly with the physical memory

808
00:33:15,519 --> 00:33:18,080
it it will be fine to continue this

809
00:33:18,080 --> 00:33:20,399
research and and try to search a way to

810
00:33:20,399 --> 00:33:21,600
attack

811
00:33:21,600 --> 00:33:26,559
android kernel from under the audio dsp

812
00:33:27,200 --> 00:33:28,799
yes

813
00:33:28,799 --> 00:33:29,840
so

814
00:33:29,840 --> 00:33:33,120
mediatek has decided to remove

815
00:33:33,120 --> 00:33:35,679
the tormeo's ability to use the param

816
00:33:35,679 --> 00:33:38,720
file it can come we configuration

817
00:33:38,720 --> 00:33:41,519
through the audio manager in the release

818
00:33:41,519 --> 00:33:43,600
build of the android this vulnerability

819
00:33:43,600 --> 00:33:44,960
was fixed

820
00:33:44,960 --> 00:33:47,519
and will be published in the

821
00:33:47,519 --> 00:33:50,159
in the mediatek security bulletin

822
00:33:50,159 --> 00:33:53,679
built in uh next month and uh all the

823
00:33:53,679 --> 00:33:55,679
presented

824
00:33:55,679 --> 00:33:58,159
audio this fever vulnerability also

825
00:33:58,159 --> 00:33:59,200
fixed

826
00:33:59,200 --> 00:34:02,720
were fixed a month ago

827
00:34:03,120 --> 00:34:04,960
actually that's it and thank you for

828
00:34:04,960 --> 00:34:07,200
your attention and you can find many

829
00:34:07,200 --> 00:34:09,199
hardware related

830
00:34:09,199 --> 00:34:11,839
security resource researchers on

831
00:34:11,839 --> 00:34:14,320
our checkpoint research blog yeah thank

832
00:34:14,320 --> 00:34:17,320
you

833
00:34:21,040 --> 00:34:22,879
if you have any question

834
00:34:22,879 --> 00:34:25,359
questions

835
00:34:27,359 --> 00:34:28,560
i think

836
00:34:28,560 --> 00:34:31,280
thank you very much

837
00:34:31,280 --> 00:34:33,359
thank you very much

838
00:34:33,359 --> 00:34:35,918
this concludes the talk for today the

839
00:34:35,918 --> 00:34:38,639
ctf price announces are

840
00:34:38,639 --> 00:34:40,960
in half an hour if anybody has any

841
00:34:40,960 --> 00:34:44,000
questions now is the time

842
00:34:47,440 --> 00:34:48,480
no

843
00:34:48,480 --> 00:34:50,800
sorry

844
00:34:58,240 --> 00:35:01,350
[Music]

845
00:35:01,520 --> 00:35:04,000
are you able to hear me yeah okay so you

846
00:35:04,000 --> 00:35:06,400
said that you were able to uh compromise

847
00:35:06,400 --> 00:35:09,040
the dsp firmware i was you able to

848
00:35:09,040 --> 00:35:10,800
bypass the

849
00:35:10,800 --> 00:35:14,960
integrity checks uh in the dsp firmware

850
00:35:15,359 --> 00:35:17,119
in integrity no i don't know the

851
00:35:17,119 --> 00:35:19,760
integrity shares yes you're right i i i

852
00:35:19,760 --> 00:35:22,400
mentioned in the talk that there are

853
00:35:22,400 --> 00:35:25,760
certificates uh in the image

854
00:35:25,760 --> 00:35:27,520
in the image

855
00:35:27,520 --> 00:35:29,839
of all the this p but this

856
00:35:29,839 --> 00:35:30,560
if

857
00:35:30,560 --> 00:35:31,680
but

858
00:35:31,680 --> 00:35:33,760
this integrity checks uh

859
00:35:33,760 --> 00:35:36,400
means that i can't and

860
00:35:36,400 --> 00:35:37,839
nobody can

861
00:35:37,839 --> 00:35:39,040
to

862
00:35:39,040 --> 00:35:40,160
do

863
00:35:40,160 --> 00:35:42,079
to change the

864
00:35:42,079 --> 00:35:45,119
high five partitions uh

865
00:35:45,119 --> 00:35:46,000
to

866
00:35:46,000 --> 00:35:48,400
to break the

867
00:35:48,400 --> 00:35:49,200
the

868
00:35:49,200 --> 00:35:50,160
the

869
00:35:50,160 --> 00:35:51,920
good loading change

870
00:35:51,920 --> 00:35:53,440
in the

871
00:35:53,440 --> 00:35:55,119
process but

872
00:35:55,119 --> 00:35:56,800
it doesn't mean that

873
00:35:56,800 --> 00:35:59,119
somebody from android applications can

874
00:35:59,119 --> 00:36:01,839
send a message yeah so

875
00:36:01,839 --> 00:36:05,680
we are not fixing uh the firmware itself

876
00:36:05,680 --> 00:36:08,880
we just try uh try to patch using this

877
00:36:08,880 --> 00:36:11,760
vulnerability the hip memory that is

878
00:36:11,760 --> 00:36:14,400
dynamic memory actually and

879
00:36:14,400 --> 00:36:16,160
and through this uh

880
00:36:16,160 --> 00:36:18,640
again a local privileges actually so

881
00:36:18,640 --> 00:36:20,880
it's a certificate it's not really

882
00:36:20,880 --> 00:36:24,800
related to this okay thank you very much

883
00:36:24,800 --> 00:36:26,960
for

884
00:36:27,200 --> 00:36:28,880
are there any further questions in the

885
00:36:28,880 --> 00:36:31,280
audience

886
00:36:32,320 --> 00:36:34,720
no further questions so thank you

887
00:36:34,720 --> 00:36:36,320
thank you all very much thank you very

888
00:36:36,320 --> 00:36:39,800
much to our speaker

