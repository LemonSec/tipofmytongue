1
00:00:17,990 --> 00:00:23,360
hi everyone thanks for coming to our
talk

2
00:00:23,360 --> 00:00:28,790
now we are going to talk about new
methods for exploiting or injections

3
00:00:28,790 --> 00:00:32,180
vulnerabilities in and java applications

4
00:00:32,180 --> 00:00:37,040
let me try and introduce myself my name
is Mikhail

5
00:00:37,040 --> 00:00:40,760
I'm a security researcher and back
hunter from Russia

6
00:00:40,760 --> 00:00:46,280
currently I work for ingram micro our
cloud as application security engineer

7
00:00:46,280 --> 00:00:52,970
my daily duties to perform our
penetration testing of software service

8
00:00:52,970 --> 00:00:56,330
automation software we develop at ingram
micro cloud

9
00:00:57,650 --> 00:01:02,390
my name is Sergey I work focus personal
up as head of security operations center

10
00:01:02,390 --> 00:01:08,510
and research is not connected to my work
is Robert Bobby and I with my hope is

11
00:01:08,510 --> 00:01:09,470
music

12
00:01:09,470 --> 00:01:15,350
I present a treater and have a personal
blog where I discuss my thoughts about

13
00:01:15,350 --> 00:01:19,520
information security and human
psychology psychology and all that stuff

14
00:01:19,520 --> 00:01:26,149
that directly or indirectly corrected to
IT security but unfortunately all this

15
00:01:26,149 --> 00:01:29,149
stuff in Russia but thanks google it's
not a problem now

16
00:01:30,439 --> 00:01:37,729
ok here you can see a engines of how to
get consists of four main parts

17
00:01:38,450 --> 00:01:44,749
it has entered an election part will
should shortly talk about our or enemies

18
00:01:44,749 --> 00:01:52,429
the next spot is about orem injection
vulnerabilities basics as a majority of

19
00:01:52,429 --> 00:01:58,579
slides are devoted to exploitation
techniques we are covered in a different

20
00:01:58,579 --> 00:02:05,089
order and libraries and and kind the
last part of our talk we will summarize

21
00:02:05,090 --> 00:02:10,910
our techniques and presents them with
the form of tables for your convenience

22
00:02:11,720 --> 00:02:16,280
I want to say that last year on their
own rights conference in Russia we

23
00:02:16,280 --> 00:02:22,370
already presented some exploitation
techniques for a hibernate or M our

24
00:02:22,370 --> 00:02:23,030
library

25
00:02:23,030 --> 00:02:31,280
and I in this talk we will present new
methods for new techniques for

26
00:02:31,280 --> 00:02:38,930
exploiting or injections in hibernate
and also will cover as a forum libraries

27
00:02:38,930 --> 00:02:41,180
Houston shower

28
00:02:41,180 --> 00:02:50,630
let's talk about forum in a general orem
stands for object-relational mapping

29
00:02:51,290 --> 00:02:55,820
it's a program in a technique for can
load for converting data between

30
00:02:55,820 --> 00:03:03,650
relational databases and an
object-oriented programming languages on

31
00:03:03,650 --> 00:03:11,480
this picture you can see RM r is the
question box in the middle between a

32
00:03:11,480 --> 00:03:19,730
database management system and java
application RM r communicates with a

33
00:03:19,730 --> 00:03:25,609
database management system are vicious
data from tables and are all

34
00:03:25,610 --> 00:03:34,760
automatically converts of these data
into java objects here on the slide you

35
00:03:34,760 --> 00:03:40,640
can see it some of the advantages for
using our am in your job application of

36
00:03:40,640 --> 00:03:42,649
course you can use a plane

37
00:03:42,650 --> 00:03:46,430
jdbc and implement every scene by
yourself

38
00:03:46,430 --> 00:03:52,070
on application site and in some cases it
makes sense when you need specific

39
00:03:52,070 --> 00:03:59,030
functionality or our performance is very
critical to your application but for the

40
00:03:59,030 --> 00:04:05,660
majority of cases in using orem our
library in your application gives more

41
00:04:05,660 --> 00:04:09,890
benefits them in implementing everything
from scratch

42
00:04:11,330 --> 00:04:16,880
are Y plane GBC ok

43
00:04:16,880 --> 00:04:23,030
what is GP GP stands for java
persistence api it

44
00:04:23,030 --> 00:04:30,890
standardized api which is exposed by
orem our library

45
00:04:31,460 --> 00:04:36,590
so our job application communicates with
RM through this API

46
00:04:37,160 --> 00:04:44,540
there are three main versions of GP and
most orem library support GP 2.0

47
00:04:47,150 --> 00:04:55,880
there are a lot of orem libraries in job
on the slide you can see our for

48
00:04:55,880 --> 00:05:02,540
libraries that are used mostly in
practice and in brackets you can see due

49
00:05:02,540 --> 00:05:07,070
to the application services that are
shipped with the particular orem library

50
00:05:08,360 --> 00:05:15,080
so in our research we focused on this
for libraries but I'm pretty confident

51
00:05:15,080 --> 00:05:22,130
is it based on techniques we have
discovered you can find similar

52
00:05:22,130 --> 00:05:30,980
exploitation techniques for other orem
libraries orem our libraries utilize a

53
00:05:30,980 --> 00:05:37,580
special acquire language with which is
called Java persistence query language

54
00:05:37,580 --> 00:05:50,240
it is used for for mapping data between
a database tables and java objects and

55
00:05:50,240 --> 00:05:55,970
for historical reasons cabinet or amuses
different language which is called

56
00:05:55,970 --> 00:06:03,530
cabinet query language and H grill is su
percent for GPL

57
00:06:04,500 --> 00:06:09,960
and since GPA 2.0

58
00:06:09,960 --> 00:06:13,680
are there is a criteria API

59
00:06:15,240 --> 00:06:23,400
this is a set of interfaces and classes
to construct query our programmatically

60
00:06:23,400 --> 00:06:30,900
so in your job application you can you
have two alternatives

61
00:06:31,710 --> 00:06:38,700
you can use a string gpo queries or you
can construct where is programmatically

62
00:06:38,700 --> 00:06:47,219
why our criteria API and great your
queries are checked at compile time so

63
00:06:47,220 --> 00:06:56,520
it is so the code becomes more safer
because developer

64
00:06:57,270 --> 00:07:02,159
it's harder for the developer to
introduce a security bak

65
00:07:03,510 --> 00:07:09,900
I want to explain briefly what or
injection vulnerabilities and the world

66
00:07:09,900 --> 00:07:12,900
limitations i exist for its exploitation

67
00:07:14,310 --> 00:07:20,640
we can also name or injections GPL
injections or each kill injections when

68
00:07:20,640 --> 00:07:31,020
we talk about 7-8 order and we can see
that or injections are similar to a

69
00:07:31,020 --> 00:07:36,810
classic SQL injections in how their
looks like in the source code of the

70
00:07:36,810 --> 00:07:46,770
application here on the slide you can
see an example of functions that is

71
00:07:46,770 --> 00:07:53,669
vulnerable to orem injection so GPL
queries constructed by string

72
00:07:53,669 --> 00:07:57,990
concatenation there is a static part and
it

73
00:07:58,550 --> 00:08:05,390
I concatenates with the name of
parameters it is controlled hour from

74
00:08:05,390 --> 00:08:12,560
outside of the function then the square
is used to get data from database and

75
00:08:12,560 --> 00:08:16,550
construct a list of java object of class
post

76
00:08:17,630 --> 00:08:25,250
I want to emphasize that SQL injection
and a GPL injection are similar in how

77
00:08:25,250 --> 00:08:29,690
they're introduced in the source code
but from exploitation perspectives they

78
00:08:29,690 --> 00:08:36,080
are completely different here on the
slide you can see a SQL injection

79
00:08:36,080 --> 00:08:44,300
scenario attacker can inject customer
skill statements through injection

80
00:08:44,300 --> 00:08:49,250
vulnerability in a job application and
updating data from database

81
00:08:49,760 --> 00:08:56,300
so in this scenario he can communicate
with database directly through injection

82
00:08:56,300 --> 00:09:02,000
for or injection a scenario there is

83
00:09:02,000 --> 00:09:07,340
orem library in the middle between java
application and database management

84
00:09:07,340 --> 00:09:08,300
system

85
00:09:08,300 --> 00:09:16,670
I take a can inject GP kill or hkl
queries and to obtain our java objects

86
00:09:16,670 --> 00:09:24,319
from orem library in this scenario here
cannot communicate with database

87
00:09:24,320 --> 00:09:29,270
management system are directly and all
around with the main obstacle of those

88
00:09:29,270 --> 00:09:37,400
attacker he has to buy this unequipped
tackle are likely full frustration

89
00:09:37,400 --> 00:09:45,829
trying to exploit or rejection and there
are three main reasons for that and GPL

90
00:09:45,830 --> 00:09:47,850
or h kill

91
00:09:47,850 --> 00:09:53,550
you have weird unlimited syntax

92
00:09:53,550 --> 00:10:03,089
so not all SQL statements will work for
example a GPL doesn't support unions and

93
00:10:03,089 --> 00:10:11,910
database so far from typical query you
can't access arbitrary tables you can

94
00:10:11,910 --> 00:10:21,029
access tables in databases that are
mapped directly to entity our classes if

95
00:10:21,029 --> 00:10:26,790
you will try to access table that is not
mapped you'll get exception from orem

96
00:10:26,790 --> 00:10:33,930
and the certain reason is that your
favorite tools for a scholar direction

97
00:10:33,930 --> 00:10:36,930
exploitation will not work with or
rejection

98
00:10:39,480 --> 00:10:48,839
ok in java developers might argues it
and practice nobody writes gpo queries

99
00:10:48,839 --> 00:10:56,040
by using a string concatenation and
vulnerability is more artificial and

100
00:10:56,040 --> 00:11:01,290
theoretical and practical but i want you
are but I want to convince you that it

101
00:11:01,290 --> 00:11:02,219
isn't true

102
00:11:02,220 --> 00:11:08,040
so here you can see the short list of
vulnerabilities for the last year

103
00:11:08,040 --> 00:11:18,630
I'm aware of our first example is H cool
injection I have found by myself now

104
00:11:18,630 --> 00:11:27,750
internally when I performed security
assessment of our products next example

105
00:11:27,750 --> 00:11:35,310
is HP rejection in a open Brower erp
system and the third example is a bitch

106
00:11:35,310 --> 00:11:45,119
: injection in our no also desk software
for studying or objections we developed

107
00:11:45,120 --> 00:11:48,930
a long horrible job application which is
available on github

108
00:11:49,560 --> 00:11:52,709
you can download and play with it

109
00:11:55,240 --> 00:12:01,510
before in discussing exploitation
techniques i want to show how in general

110
00:12:02,020 --> 00:12:09,970
orem library works there are three main
steps or phrases on the first step

111
00:12:09,970 --> 00:12:19,000
orem library parts parses GP or h kill
query and builds a GPL or a squirrel

112
00:12:19,000 --> 00:12:22,779
abstract syntax three then on the next
step

113
00:12:22,779 --> 00:12:33,730
it translates typical st into a scale HD
and finally now it builds a school query

114
00:12:33,730 --> 00:12:35,770
from school aced you

115
00:12:35,770 --> 00:12:39,880
now i want to give the term to my
colleague

116
00:12:39,880 --> 00:12:43,959
I said gay who he will start to talk
about exploitation techniques

117
00:12:45,820 --> 00:12:54,100
ok let's start with a click link or ram
chips link is the modern persistence

118
00:12:54,100 --> 00:12:59,500
framework that is understood ship of
eclipse foundation

119
00:13:00,760 --> 00:13:07,630
it is designed for use in Joe
environment including java platform

120
00:13:07,630 --> 00:13:10,630
standard edition job platform enterprise
edition

121
00:13:12,320 --> 00:13:15,860
sorry

122
00:13:15,860 --> 00:13:25,490
diving into the communication we have
found that these are M has a magic

123
00:13:25,490 --> 00:13:34,820
function and just know how cold cold
cold function this function that worth

124
00:13:34,820 --> 00:13:40,040
noting that is function exists because
of reported bark developers complained

125
00:13:40,040 --> 00:13:46,699
that we need a functionality true are
called arbitrary database function and

126
00:13:46,700 --> 00:13:54,800
now this function is present and the the
thing is that it is it works rather see

127
00:13:54,800 --> 00:14:01,430
Lee it takes first its argument as
function name database function name and

128
00:14:01,430 --> 00:14:07,880
all other arguments put in into round
brackets to form a database function

129
00:14:07,880 --> 00:14:13,970
call on flat you can see how it works
and exploitation is rather silly

130
00:14:13,970 --> 00:14:19,400
are these techniques works for any
database management system and this is

131
00:14:19,400 --> 00:14:26,449
example for both gray squirrel and green
asterisk shows custom injection . and

132
00:14:26,450 --> 00:14:37,190
now let's see a small video how
exploitation looks like okay we have our

133
00:14:37,190 --> 00:14:42,260
wonderful application school playground
returns JSON when working correctly

134
00:14:42,830 --> 00:14:47,120
ok let's put our our magic function into
URL and see what will happen

135
00:14:52,590 --> 00:14:58,950
ok its internal server error or let's
see what expression cause this year oh

136
00:14:58,950 --> 00:15:06,900
you see it seems to be a function called
because we have opened and closed around

137
00:15:06,900 --> 00:15:09,540
brackets after this expression

138
00:15:09,540 --> 00:15:15,150
let's get somethin to URL to form a well
it is a base function call

139
00:15:15,150 --> 00:15:19,680
let the length and of course the best
well its argument to length

140
00:15:20,190 --> 00:15:29,400
it's 3 a and Blanco free a is free so
now it works working well and you can

141
00:15:29,400 --> 00:15:37,410
form our true and force expression to
exploit our planned sequel injection

142
00:15:39,420 --> 00:15:48,360
oh ok that's all we have to copy this
and put into our squirrel mob specified

143
00:15:48,360 --> 00:15:52,800
database management system to connect
with blind and before that means

144
00:15:52,800 --> 00:16:00,359
retrieve banner need to specify custom
injection . it's very the same place

145
00:16:00,360 --> 00:16:10,560
where we changed 12 true to form a
true-and-false output or actually that's

146
00:16:10,560 --> 00:16:12,400
it

147
00:16:12,400 --> 00:16:15,400
knowledge you should receive Bennett

148
00:16:16,180 --> 00:16:23,439
this is not the first time I see this
video so I'm sure where they will come

149
00:16:25,660 --> 00:16:31,240
so ice cream upset that it it was found

150
00:16:31,240 --> 00:16:37,690
asterisk and it public parameters
vulnerable and we can see man

151
00:16:37,690 --> 00:16:42,880
so what happened we have honorable
application and object model database

152
00:16:42,880 --> 00:16:44,770
but because of vulnerability

153
00:16:44,770 --> 00:16:55,660
we have access to the database band arm
but bernie is not interested in and

154
00:16:55,660 --> 00:17:06,670
let's try to retrieve something more
convenient for example let's try to

155
00:17:06,670 --> 00:17:10,150
marry databases and see what will happen

156
00:17:10,150 --> 00:17:21,190
actually it works so it's informations
kima PG catalog public the most

157
00:17:21,190 --> 00:17:26,110
interesting for us is public because all
of this and default progress tape

158
00:17:26,109 --> 00:17:27,310
databases

159
00:17:27,310 --> 00:17:30,310
let's marry tables from database public

160
00:17:33,010 --> 00:17:36,490
again the same questions astrix yes

161
00:17:36,490 --> 00:17:39,850
ah so we have posted users tables

162
00:17:42,070 --> 00:17:47,889
let's dump user stable because it seems
to be interesting people

163
00:17:48,700 --> 00:17:53,270
specified

164
00:17:53,270 --> 00:17:56,629
capital T flag users table and flag down

165
00:17:58,640 --> 00:18:05,180
ok

166
00:18:16,000 --> 00:18:27,670
all right you already seen this but
believe me this box

167
00:18:32,500 --> 00:18:41,800
ok let's continue the second our patient
is toppling quorum and it's very simple

168
00:18:41,800 --> 00:18:47,889
to eclipse link and it has a function
with another name but the same

169
00:18:47,890 --> 00:18:53,020
functionality and hear that here you can
see x abstract from documentation that

170
00:18:53,020 --> 00:18:56,379
explain why we have a square function

171
00:18:57,280 --> 00:19:05,830
I actually and documentation for this
function is very useful if you want to

172
00:19:05,830 --> 00:19:09,220
figure out how to explore this very
vulnerable to just look into the

173
00:19:09,220 --> 00:19:12,220
documentation and vulnerable example
writing implementation

174
00:19:13,000 --> 00:19:21,760
so this is an example of true are this
example false and exploitation is

175
00:19:21,760 --> 00:19:26,740
completely the same this technique works
for every database management system for

176
00:19:26,740 --> 00:19:30,760
any different system because it's so
boring picture

177
00:19:32,230 --> 00:19:41,080
ok open GPA open should be a is open
source implementation of to be

178
00:19:41,080 --> 00:19:44,080
distributed under a perpetual license

179
00:19:46,010 --> 00:19:55,190
and this around found powerful abilities
with quote the first one we called wrong

180
00:19:55,190 --> 00:19:59,360
single quotes processing and we called
our method in the same way

181
00:20:00,200 --> 00:20:06,440
the problem here is that this RM
substitute all sequences of two single

182
00:20:06,440 --> 00:20:11,030
quotes by one single quote and this
strange behavior

183
00:20:11,030 --> 00:20:16,700
I can allow to hide select statement
within strip documentation looks like

184
00:20:16,700 --> 00:20:29,360
you can see this this line and we have a
string is a single quotes that correctly

185
00:20:29,360 --> 00:20:35,959
skate but because of this functionality
is wrong single course procession all

186
00:20:35,960 --> 00:20:41,990
sequences of two single quotes will be
substituted by one single quote and the

187
00:20:41,990 --> 00:20:46,190
meaning of this expression you will
never be changed completely on wed you

188
00:20:46,190 --> 00:20:50,960
can see how to form true expression and
force expression for planned sequel

189
00:20:50,960 --> 00:20:59,360
injection potential looks like this and
this technique works for every database

190
00:20:59,360 --> 00:21:06,409
management system and on slide example
is for dresses are another interesting

191
00:21:06,410 --> 00:21:09,779
feature about apache or one

192
00:21:09,779 --> 00:21:19,440
GPA is it was vulnerability that we
called quote indifference the problem

193
00:21:19,440 --> 00:21:30,029
here that it allows to limit our strings
are with a different kind of courts for

194
00:21:30,029 --> 00:21:37,139
example are you see on slide stream that
starts with a double quotes and every

195
00:21:37,139 --> 00:21:41,488
single course and this is correcting
definition and of course that case can

196
00:21:41,489 --> 00:21:52,139
be explored exploded and explored looks
like this or MCs in this line string and

197
00:21:52,139 --> 00:21:59,459
in double quotes with single quotes
inside it but because of this feature of

198
00:21:59,460 --> 00:22:06,929
course indifference database management
system finally gets completion a and a

199
00:22:06,929 --> 00:22:09,839
and select statement

200
00:22:09,839 --> 00:22:18,620
compared to use a eight so the meaning
of these expression changed completely

201
00:22:18,620 --> 00:22:26,570
the rotation looks like this and again
this technique works for every database

202
00:22:26,570 --> 00:22:31,909
management system and here example for
possible squirrel green asterisk is

203
00:22:31,910 --> 00:22:34,910
custom injection . for escort mom

204
00:22:36,470 --> 00:22:43,010
hi belated cabinet is the most
interesting or M this because we didn't

205
00:22:43,010 --> 00:22:50,570
manage to find universal gravitation
technical but I'm forward five different

206
00:22:50,570 --> 00:22:54,530
techniques for our different databases

207
00:22:54,530 --> 00:22:57,590
there's always management systems

208
00:22:57,590 --> 00:23:06,350
ok we need the first technique single
course keeping the technique works for

209
00:23:06,350 --> 00:23:15,199
my skill database management system only
it talks because my school and hibernate

210
00:23:15,200 --> 00:23:21,920
process of course keeping differently so
we can see that in my scale to skip

211
00:23:21,920 --> 00:23:28,100
single quote you must use / a similar
before the single called but in

212
00:23:28,100 --> 00:23:29,480
hibernate

213
00:23:29,480 --> 00:23:32,540
you must double single quote to escape
it

214
00:23:32,540 --> 00:23:43,040
we can use / simple ways to subsequent
single quotes characters to bypass a

215
00:23:43,040 --> 00:23:48,020
hibernate and reject arbitrary SQL query

216
00:23:48,020 --> 00:23:59,929
so you can see is it a hibernate will
treat / with two single quotes as a

217
00:23:59,929 --> 00:24:09,410
slash with escape single court but my
skill will treat this as escaped quote

218
00:24:09,410 --> 00:24:17,240
and single quotes that terminate the
string and I was a part of the strings

219
00:24:17,240 --> 00:24:23,809
that comes after / with two single
quotes is treated as additional

220
00:24:23,809 --> 00:24:26,809
condition by my skill

221
00:24:28,370 --> 00:24:35,570
if we inject following expression into
vulnerable our parameter we will get the

222
00:24:35,570 --> 00:24:41,780
following each girl query which is a
process by hibernate and hibernate a

223
00:24:41,780 --> 00:24:45,139
process injected expression as string

224
00:24:45,770 --> 00:24:55,970
what when why I skill gets a SQL query
or why GDC after school query was

225
00:24:55,970 --> 00:25:04,760
processed it will obtain a mutated SQL
query with additional now select a

226
00:25:04,760 --> 00:25:10,280
sub-query to exploit a skill injection

227
00:25:10,280 --> 00:25:14,870
when my skill database management system
is used to you can use the following

228
00:25:14,870 --> 00:25:17,870
scale map command line

229
00:25:18,980 --> 00:25:23,630
we called it

230
00:25:24,530 --> 00:25:31,940
door quarters dreams method was
presented for us by Padre Square + H -

231
00:25:31,940 --> 00:25:38,630
it's worth noting that these two
database management systems allows

232
00:25:38,630 --> 00:25:47,090
dollar quoted strings constants so on
slide you can see streamed or a a quote

233
00:25:47,090 --> 00:25:52,340
BB door it's a correct string definition
for these

234
00:25:53,059 --> 00:26:00,799
very databases on the other hand are
hibernating or and allows identify is

235
00:26:00,799 --> 00:26:07,519
starting his door and here you can see
fragment from a hybrid grandma

236
00:26:07,519 --> 00:26:17,899
specification conversion all these facts
together we can make a clock

237
00:26:18,409 --> 00:26:21,620
suppose this string

238
00:26:22,129 --> 00:26:28,789
I each girl understands as completion
reuses identify a dollar dollar is

239
00:26:28,789 --> 00:26:35,929
string that started with double dollar
but a square understands the same line

240
00:26:35,929 --> 00:26:36,830
differently

241
00:26:36,830 --> 00:26:44,299
it understands our string quartet with
double dollar science compared to concat

242
00:26:44,299 --> 00:26:54,740
function and exploitation of this idea
looks like this again this techniques

243
00:26:54,740 --> 00:27:02,659
works only for both gray squirrel or h2
who allows the basic allows a double

244
00:27:02,659 --> 00:27:10,159
door quoted strings and green asterisk
as usual our custom injection .

245
00:27:12,780 --> 00:27:19,950
the third method we named named it magic
functions method and it works against

246
00:27:19,950 --> 00:27:26,040
the database management systems that
have magic magic functions that we can

247
00:27:26,040 --> 00:27:35,399
use in SQL expression and there are this
magic functions evaluates SQL query from

248
00:27:35,400 --> 00:27:41,880
string parameter passed to this magic
function and there are magic functions

249
00:27:41,880 --> 00:27:48,420
for post grad school and oracle and the
reason why this technique works is

250
00:27:48,420 --> 00:27:54,930
because happen it'll allow us to specify
arbitrary function names in h girl

251
00:27:54,930 --> 00:28:03,600
expressions oppose gray scale has a nice
built-in function query to xml it

252
00:28:03,600 --> 00:28:07,889
evaluates SQL query from string
parameter and returns

253
00:28:08,520 --> 00:28:18,030
xml object that XML object represents a
query execution results but we cannot

254
00:28:18,030 --> 00:28:24,960
use square root xml directly in HK will
query that is why we need to surround it

255
00:28:24,960 --> 00:28:30,630
with express and very upper function or
call calls

256
00:28:30,630 --> 00:28:36,870
additionally so if we use following
expression shown on the bottom of the

257
00:28:36,870 --> 00:28:46,080
slide in h kill query weekend in for was
a SQL query much yellow returns 0 or

258
00:28:46,080 --> 00:28:47,070
morals

259
00:28:47,070 --> 00:28:56,159
so we if we inject into vulnerable
parameter following expression you can

260
00:28:56,160 --> 00:29:05,370
see is it opposed great skill will get
SQL query with a query to excel function

261
00:29:05,370 --> 00:29:08,370
call

262
00:29:09,120 --> 00:29:14,699
you can exploit army our HTML injection

263
00:29:15,240 --> 00:29:20,610
I when I was gray scale and is used by
using the following

264
00:29:20,610 --> 00:29:28,199
ah school mop command line in my youtube
channel you can find the video about how

265
00:29:28,200 --> 00:29:36,630
this exploitation method works for
oracle there is get xml magic functions

266
00:29:36,630 --> 00:29:49,920
if you inject following expression into
into hkl always and real to charge and

267
00:29:49,920 --> 00:29:55,890
get xml functions you can influenza
select queries that is marked yellow

268
00:29:55,890 --> 00:30:04,290
return 0 or morals to exploit each kill
injection with oracle database

269
00:30:04,290 --> 00:30:12,450
management system you can use fall in
our command line next method his name a

270
00:30:12,450 --> 00:30:13,740
unique old

271
00:30:13,740 --> 00:30:21,360
I turns out that some database
management systems allows to our use

272
00:30:21,360 --> 00:30:29,879
unicode the limiters like this in your
code similar 000 as a token delimiters

273
00:30:29,880 --> 00:30:39,030
in SQL query so we found that microsoft
SQL server and h2 databases allows allow

274
00:30:39,030 --> 00:30:47,280
our unique old delimiters so in a school
server of this to queries are works the

275
00:30:47,280 --> 00:30:51,059
same in the first query you can see is
it

276
00:30:51,059 --> 00:31:02,370
we use a unique old limiter with Scott .
000 there are many unicode symbols in LA

277
00:31:02,880 --> 00:31:08,100
that works for Microsoft the school so
as Stoke in the limiters about for

278
00:31:08,100 --> 00:31:10,740
exploitation of these two works

279
00:31:10,740 --> 00:31:16,710
this two symbols work this is a no
brakes place and I do graphic space

280
00:31:16,710 --> 00:31:22,650
let's see why it does this method works
on the slide you can

281
00:31:22,650 --> 00:31:28,740
see the snippet from each girl grandma
and rule that is marked read on the

282
00:31:28,740 --> 00:31:39,120
slide tells us that and hibernate allows
I to use unicode symbols in identifies

283
00:31:39,120 --> 00:31:47,010
so if we inject fall in construction
interval honorable a parameter we will

284
00:31:47,010 --> 00:31:58,230
get the following a SQL query and the %
c 2 percent a zero is a URL encoded and

285
00:31:58,230 --> 00:32:07,980
you to utf-8 encoded no break space
unique code symbol here is a bottle of

286
00:32:07,980 --> 00:32:16,830
hqla steam here is HQ st falls apart of
skill

287
00:32:16,830 --> 00:32:20,399
accor is it contains our unique old same
old

288
00:32:20,400 --> 00:32:27,930
see most of this part is Mark teal or on
the bottom of the slide we can see in SD

289
00:32:27,930 --> 00:32:38,730
on not who is a land our function called
then are not with nested function call

290
00:32:38,730 --> 00:32:47,400
which has a name that consists of one
unicode seemed always got . 000 and this

291
00:32:47,400 --> 00:32:48,870
nested function here

292
00:32:48,870 --> 00:32:56,610
his argument I identify and not in this
identify we hide

293
00:32:56,610 --> 00:33:04,590
SQL query by using our unique all
delimiters that is how we bypass

294
00:33:04,590 --> 00:33:15,300
hibernate with Microsoft the school so
unfortunately we cannot use skill mop to

295
00:33:15,300 --> 00:33:16,440
exploit

296
00:33:16,440 --> 00:33:21,360
now all I SQL injection are using this
method

297
00:33:21,360 --> 00:33:28,740
so first time we wrote a simple perl
script for exploitation but it has one

298
00:33:28,740 --> 00:33:32,250
drawback it works against our test
application

299
00:33:32,250 --> 00:33:35,910
so if you want to use it you must

300
00:33:35,910 --> 00:33:43,620
unit r it is available on get help and
you can watch the video how talks

301
00:33:44,880 --> 00:33:48,300
what we did not give up and decided to
tune

302
00:33:48,300 --> 00:33:56,220
I skill mop are we wrote cabin eat the
py temple script and modified queries

303
00:33:56,220 --> 00:34:06,180
not xml file you can find these two
files on github to extract something

304
00:34:06,180 --> 00:34:11,760
from a database using a unique old
method we use squares that are similar

305
00:34:11,760 --> 00:34:20,820
to the squares so here we extract first
eight rolls of column

306
00:34:20,820 --> 00:34:27,720
our bus w from table users and these
squares have special form because we

307
00:34:27,719 --> 00:34:32,339
must convince a habber needs that we're
performing a function call

308
00:34:32,880 --> 00:34:37,980
inside this function called we before
mr. function call with some arguments

309
00:34:37,980 --> 00:34:46,199
that is why or we cannot use equal or
not equal operators we use like and not

310
00:34:46,199 --> 00:34:56,129
like instead let's see how to exploit
each girl injection with unicode method

311
00:34:56,130 --> 00:34:58,200
and a scale map

312
00:34:58,200 --> 00:35:06,600
first you need to copy carbonado p way
and queries . xml files and place them

313
00:35:06,600 --> 00:35:12,270
into a school map home directory then
you need to find injection

314
00:35:12,790 --> 00:35:20,590
using the first command lion and finally
you exploit or a skill injection using a

315
00:35:20,590 --> 00:35:24,400
second come on lion and let's see the
video

316
00:35:24,400 --> 00:35:30,190
how it works ok as usual I show video
competition looks like

317
00:35:35,490 --> 00:35:38,490
she's nothing ok this is our water
application

318
00:35:40,140 --> 00:35:48,660
let's try our long you'll be seein you
call and here is a true changing where

319
00:35:48,660 --> 00:35:51,660
condition we can get false

320
00:35:52,980 --> 00:35:57,210
ok that's it we need to copy this Apple

321
00:35:57,210 --> 00:36:03,060
first of all you need to copy happened .
py into a temp folder in his court mom

322
00:36:03,060 --> 00:36:03,960
home

323
00:36:03,960 --> 00:36:10,470
sort of Russian windows I mean it's
slightly different queries so we wrote

324
00:36:10,470 --> 00:36:16,709
our queries . xml and you need to put it
into xml folder but will come into to

325
00:36:16,710 --> 00:36:18,360
preserve the original one

326
00:36:18,360 --> 00:36:21,360
this is Miss copy

327
00:36:23,490 --> 00:36:30,000
so we are prepared now off your step

328
00:36:30,000 --> 00:36:33,600
let a schoolmarm to find an injection
this is the command

329
00:36:48,040 --> 00:36:54,550
ok all the second step we need to
specify our temper script

330
00:36:54,550 --> 00:37:03,790
you see flag tampa tribune net right
near the these bullet is and you can see

331
00:37:03,790 --> 00:37:08,110
bena as usual but better as usual is not
interesting

332
00:37:08,110 --> 00:37:12,910
let's try to numerate data with a
database horse's name

333
00:37:13,450 --> 00:37:19,210
it's LA but the hpc s coil express slot
with Russia name by the way it's my

334
00:37:19,210 --> 00:37:30,940
father-in-law computer are now we
already enumerated in databases and its

335
00:37:30,940 --> 00:37:39,010
master time to be a model is dbh cool I
the most interesting for us is H cool I

336
00:37:39,010 --> 00:37:43,510
because all others are default database
for sequel server

337
00:37:44,950 --> 00:37:48,790
ok let's elaborate tables from which
call a database

338
00:37:48,790 --> 00:37:57,040
it's bossed users are as usual the most
interesting for as these table users let

339
00:37:57,040 --> 00:38:07,029
simmer eight columns from user stable
and unstable has the username column and

340
00:38:07,030 --> 00:38:10,030
press ward

341
00:38:12,170 --> 00:38:18,170
unfortunately our method allows to jump
our data from table only field by field

342
00:38:18,170 --> 00:38:26,000
but my mind this is better than to use
custom perl script because a square map

343
00:38:26,000 --> 00:38:33,710
usage gives us the flexibility to
specify a row noon of that we want to

344
00:38:33,710 --> 00:38:34,280
dump

345
00:38:34,280 --> 00:38:40,549
we need to set environment variable for
our temple script set on 21

346
00:38:40,549 --> 00:38:54,349
this and again we specify table name old
name database technique is blind

347
00:38:54,920 --> 00:39:00,230
oh where we okay

348
00:39:07,680 --> 00:39:08,430
ok

349
00:39:08,430 --> 00:39:17,759
and ok username is admin to get password
you need to set a capital C flag -

350
00:39:17,760 --> 00:39:23,010
passport and you get something very
interesting

351
00:39:25,770 --> 00:39:35,340
okay to get another string are trying to
get another or from database

352
00:39:35,340 --> 00:39:40,410
you need to flash session before so this
is a comment that flash session

353
00:39:48,290 --> 00:39:53,930
and after that you need to set
environment were able to to to dump

354
00:39:53,930 --> 00:39:59,960
another roll again if I user name

355
00:40:03,460 --> 00:40:12,460
gee Joe and capital C passport dumps

356
00:40:12,460 --> 00:40:15,460
passport

357
00:40:31,310 --> 00:40:42,650
ok that's it actually we can go to our
database management system and find the

358
00:40:42,650 --> 00:40:49,760
slot see school I database that has
these are stable and

359
00:40:50,730 --> 00:40:56,130
it was dros exactly the same day time

360
00:40:57,390 --> 00:41:00,420
ok

361
00:41:02,609 --> 00:41:09,840
the last method we want to present this
cult and Joe Constance method this

362
00:41:09,840 --> 00:41:18,270
method works for the most database
management systems except my skill but

363
00:41:18,270 --> 00:41:25,650
it heavily depends on classes that are
on the class pass of the application we

364
00:41:25,650 --> 00:41:33,780
are taking the reason why this method
works is because cabinet results are

365
00:41:33,780 --> 00:41:44,820
results are fields of our public static
classes are through . delimited

366
00:41:44,820 --> 00:41:54,000
identifier so we can specify for example
Java that long . character . sighs in

367
00:41:54,000 --> 00:41:57,720
our age girl query and however need to
will replace it

368
00:41:58,260 --> 00:42:08,550
- 16 if we are reference in our public
static fields of type string

369
00:42:08,550 --> 00:42:16,290
Archer a hibernate will additionally
surrounds them always to our single

370
00:42:16,290 --> 00:42:23,070
quotes are so Java . long that character
. meanwhile you will be replaced with

371
00:42:23,070 --> 00:42:33,780
just two single quotes so to use this
method we need glasses on our class pass

372
00:42:33,780 --> 00:42:41,700
that have a public static fields of type
Charles strings that have a single court

373
00:42:41,700 --> 00:42:44,439
so

374
00:42:44,440 --> 00:42:54,819
now for example a public static field of
type string that contains one single

375
00:42:54,819 --> 00:43:02,109
quote a suitable part of each kill
queries that ends with a single quote is

376
00:43:02,109 --> 00:43:08,529
also suitable for exploitation or char
char fields are also suitable in the

377
00:43:08,530 --> 00:43:15,250
slide you can see five different
representations of single quote for

378
00:43:15,250 --> 00:43:19,119
chart type all you

379
00:43:19,119 --> 00:43:25,420
you can use interface class with static
field so the public is not mandatory

380
00:43:25,420 --> 00:43:32,980
because in interface class all fields by
default are a public

381
00:43:32,980 --> 00:43:43,390
we searched through and java libraries
to find suitable field for exploitation

382
00:43:43,390 --> 00:43:48,160
and we found two very popular libraries

383
00:43:48,160 --> 00:43:52,089
this is they are ICU for g and blocked
back

384
00:43:52,089 --> 00:44:00,640
this libraries have glasses with public
static fields as a suitable for

385
00:44:00,640 --> 00:44:06,308
exploitation with name single quote and
single culture and

386
00:44:06,309 --> 00:44:16,089
as I said this is to a very popular
libraries and it will probably likely

387
00:44:16,089 --> 00:44:23,078
that the will encounter in as a class
plus class pass of the application you

388
00:44:23,079 --> 00:44:32,589
are taking now let's see how this method
works in I details so we inject

389
00:44:32,589 --> 00:44:39,339
following expression into vulnerable
parameter in this expression we multiply

390
00:44:39,339 --> 00:44:47,170
java constancy underscore underscore 1r2
result of a function called his name x

391
00:44:47,170 --> 00:44:55,269
and this function has a string parameter
so on the bottom of the slide the other

392
00:44:55,269 --> 00:44:59,258
is a h kill queries that is processed by
Hal Berney

393
00:44:59,259 --> 00:45:10,630
here you can see H kill SD for the part
of each girl queries that is marked

394
00:45:10,630 --> 00:45:22,900
yellow on the bottom on the slide and
contains Joe constant here we can see a

395
00:45:22,900 --> 00:45:33,339
joke constant are not in the st mark's
green and also we see on a string or not

396
00:45:33,339 --> 00:45:48,910
that is marked read after cabinet parses
hpl query it builds HQ st and then

397
00:45:48,910 --> 00:45:56,678
translate this HD into SQL SG here we
can see a SQL st for the skill

398
00:45:56,679 --> 00:46:00,339
eh girl query so we can see that notes

399
00:46:01,179 --> 00:46:07,689
Joe constant note and string not not are
a translated to unchanged air into a

400
00:46:07,689 --> 00:46:16,029
school st and we see that Joe constant
is not yet resolved and on the final

401
00:46:16,029 --> 00:46:16,960
step

402
00:46:16,960 --> 00:46:28,570
hkl translates SQL st into a skill query
and on that step in and Joe constant is

403
00:46:28,570 --> 00:46:34,510
replaced with three single calls and we
seize it

404
00:46:35,230 --> 00:46:44,470
SQL sub queries that was concealed
inside string parameter of function X is

405
00:46:44,470 --> 00:46:56,500
exposed and just a quick check when we
add wear clothes that is always true

406
00:46:56,500 --> 00:47:02,800
r to the skill sub-query we hide inside
a string parameter function X

407
00:47:02,800 --> 00:47:10,300
application returns one road to us but
when we change this close to always

408
00:47:10,300 --> 00:47:13,599
false it returns nothing

409
00:47:13,599 --> 00:47:21,550
this means that our technique worked to
exploit each kill injection with Joe

410
00:47:21,550 --> 00:47:26,020
constant Smith method you can use
following the school mark command line

411
00:47:26,020 --> 00:47:35,140
and quick we do creator with John
Boston's so please forgive us i know we

412
00:47:35,140 --> 00:47:42,098
all hungry but just this is with db2
example

413
00:47:42,640 --> 00:47:46,420
so we're very good database

414
00:47:46,990 --> 00:47:50,410
so again our application

415
00:47:50,410 --> 00:47:58,540
this is our long URL is a job a constant
so again this is true

416
00:47:58,540 --> 00:48:08,500
changing we can get false copied this
again true corporation square mop

417
00:48:09,450 --> 00:48:20,339
database here is to be true technique is
blind and here it is our custom

418
00:48:20,339 --> 00:48:23,430
injection .

419
00:48:23,430 --> 00:48:27,690
actually that's all we get better

420
00:48:35,850 --> 00:48:43,259
my name is not interesting let's dump
databases are needs to be true

421
00:48:43,260 --> 00:48:50,970
there's a lot of the places because its
default date the base installation a lot

422
00:48:50,970 --> 00:48:56,399
of examples and all the other
interesting materials but the most

423
00:48:56,400 --> 00:48:59,640
interesting for us is to be 2 into 1

424
00:48:59,640 --> 00:49:12,569
so which is our database let's retrieve
tables from these data base and as usual

425
00:49:12,570 --> 00:49:20,910
to be true has a lot of tables but it's
really interesting to see how is climb

426
00:49:20,910 --> 00:49:29,549
up works in multi-threaded more sexually
it's so broken

427
00:49:34,490 --> 00:49:38,750
can I hope somehow

428
00:49:41,900 --> 00:49:44,900
Oh

429
00:49:52,000 --> 00:50:04,750
pro-ject a lot of tables it's exactly
the b2 example tables post this outpost

430
00:50:04,750 --> 00:50:15,430
to do that is month to our application
and this is users that we're going to

431
00:50:15,430 --> 00:50:19,089
dump in our final command

432
00:50:21,280 --> 00:50:25,150
ok t users dump

433
00:50:27,710 --> 00:50:32,750
anderson who will be good I know

434
00:50:34,220 --> 00:50:38,480
name

435
00:50:41,090 --> 00:50:44,090
it's called name a sport

436
00:50:53,640 --> 00:50:56,640
that mean

437
00:50:57,550 --> 00:51:05,860
virtuelle so thankful password actually
space for patient

438
00:51:16,570 --> 00:51:24,940
the second row the alien who doesn't
know his name

439
00:51:24,940 --> 00:51:27,940
just ask me

440
00:51:29,920 --> 00:51:33,250
ok extra day

441
00:51:33,250 --> 00:51:38,290
that's almost it just a second

442
00:51:43,170 --> 00:51:45,280
ok

443
00:51:45,280 --> 00:51:49,540
and some final verdict from Michael

444
00:51:50,080 --> 00:51:56,049
yes and here is the final part of our
presentation where we will summarize our

445
00:51:56,050 --> 00:52:02,230
techniques for its rotation when you
have found or injection before

446
00:52:02,230 --> 00:52:05,620
exploiting it you would probably want to
know what

447
00:52:05,620 --> 00:52:11,200
orem library you are targeting so we can
use the following table

448
00:52:11,800 --> 00:52:17,500
you just paste payloads different pills
into vulnerable our perimeter and see

449
00:52:17,500 --> 00:52:19,930
what up a load

450
00:52:19,930 --> 00:52:30,970
returns a valid response from
application and here this is actually a

451
00:52:30,970 --> 00:52:36,970
final slide because we gather together
all method we preserved represented in

452
00:52:36,970 --> 00:52:44,890
our presentation and this table shows
each method works on each or M database

453
00:52:44,890 --> 00:52:45,970
combination

454
00:52:45,970 --> 00:52:53,439
I hope this table will be useful for you
because it contains all roads we have

455
00:52:53,440 --> 00:53:01,450
just said and we call power findings
will be useful for your future work and

456
00:53:01,450 --> 00:53:04,540
if you have any questions we will try to
answer

457
00:53:05,560 --> 00:53:09,100
thank you for coming to our mission

458
00:53:11,410 --> 00:53:17,290
so we have worked that time for two
questions and then actually started and

459
00:53:17,290 --> 00:53:18,820
we go to answer two questions

460
00:53:18,820 --> 00:53:24,400
so oh it's it's interesting how you how
you figure out that you have on

461
00:53:24,400 --> 00:53:29,350
aureum injection compared to an SQL
injection how old and how you to take

462
00:53:29,350 --> 00:53:32,350
them like once a day

463
00:53:33,850 --> 00:53:42,400
the majority of job applications now use
lorem libraries so it is incorporated

464
00:53:42,400 --> 00:53:47,530
into g2e application so so if you can
see that you are facing

465
00:53:48,310 --> 00:53:54,160
for example jabe also white why you know
that this application will probably use

466
00:53:54,160 --> 00:53:59,859
or and library all that how you know
that you have an order an injection like

467
00:53:59,860 --> 00:54:03,430
you detect been detected in the
beginning

468
00:54:03,430 --> 00:54:06,589
are you detect it is just

469
00:54:06,589 --> 00:54:09,859
I skill injection

470
00:54:09,859 --> 00:54:16,249
so our boolean stop you just like yes it
could be error based but it works

471
00:54:16,249 --> 00:54:24,078
exploitation message was the same so it
will be faster than our error based

472
00:54:24,079 --> 00:54:27,319
technique will morph rosters and blind
technique

473
00:54:29,809 --> 00:54:35,359
oh you can use the following table just
waste this and to figure out how much

474
00:54:35,359 --> 00:54:36,410
are amused

475
00:54:36,410 --> 00:54:42,950
yes and if it is a school injection that
you will always get invalid response

476
00:54:42,950 --> 00:54:50,359
from application because save my life

477
00:54:50,900 --> 00:54:54,200
yes yes yes

478
00:54:54,200 --> 00:55:01,098
one more one last question in the
audience know guys that I invite you all

479
00:55:01,099 --> 00:55:02,960
to attend lunch downstairs

480
00:55:02,960 --> 00:55:05,989
thank you

