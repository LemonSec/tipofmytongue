1
00:00:14,670 --> 00:00:21,480
ok guys so so sorry for the delay in the
end to cable didn't fit in correctly so

2
00:00:21,480 --> 00:00:25,860
it seems to be the problem and doing
live demos and now like my set-up time

3
00:00:25,860 --> 00:00:29,910
was this completely destroyed so i
probably need like shot set-up time in

4
00:00:29,910 --> 00:00:33,449
the middle of my talk when I'm doing the
first demo but hopefully then everything

5
00:00:33,449 --> 00:00:34,260
works out

6
00:00:34,260 --> 00:00:39,360
so welcome to my talk attacking
next-generation firewalls baking pan

7
00:00:39,360 --> 00:00:43,440
ways before i start with the actual
content of my presentation have a short

8
00:00:43,440 --> 00:00:46,019
introduction slide about me

9
00:00:46,019 --> 00:00:50,040
as already said I'm a security
researcher working for you and w

10
00:00:50,040 --> 00:00:54,360
research and i'm mostly concentrating on
the areas of application and

11
00:00:54,360 --> 00:00:58,350
virtualization security and recent
research concentrated on two different

12
00:00:58,350 --> 00:01:03,629
topics hypervisors on the one hand side
so this is mainly extent hypervisor in

13
00:01:03,629 --> 00:01:09,030
the last year's and security appliances
on the other side so last year at 44

14
00:01:09,030 --> 00:01:12,750
Conrad published some research about the
fire availability so we'll abilities in

15
00:01:12,750 --> 00:01:17,850
the fire I member protection system
which got a bit of media attention and

16
00:01:17,850 --> 00:01:21,689
now i'm going to talk about the palo
alto next-generation firewall

17
00:01:21,689 --> 00:01:28,500
you can also find me on twitter using
this the nickname on the slide so today

18
00:01:28,500 --> 00:01:32,280
I want to talk about Paulo I to
next-generation firewall and the

19
00:01:32,280 --> 00:01:37,109
subtitle of my talk waking panel is
talking about pan us which is the

20
00:01:37,109 --> 00:01:41,788
software stack that once on odd polity
devices so basically it's the

21
00:01:41,789 --> 00:01:46,920
combination of operating system and
proprietary software stack the device i

22
00:01:46,920 --> 00:01:51,509
have standing in front of them use the
power to PA 500 which is basically the

23
00:01:51,509 --> 00:01:55,649
smallest and cheapest device you can buy
from from them but it's running the same

24
00:01:55,649 --> 00:01:57,840
software stack us all the bigger devices

25
00:01:57,840 --> 00:02:02,850
so even though - select only piece of
hardware i analyzed other

26
00:02:02,850 --> 00:02:07,469
vulnerabilities i will present effect or
the large enterprises devices as well

27
00:02:07,469 --> 00:02:14,340
and I'm concentrating on a text against
the device itself so not too much about

28
00:02:14,340 --> 00:02:15,580
bypassing

29
00:02:15,580 --> 00:02:21,250
anti virus detection and stuff like this
so what kind of features does to Paula

30
00:02:21,250 --> 00:02:24,850
fire was a part of why it's a
next-generation firewall basically in

31
00:02:24,850 --> 00:02:29,049
this case next-generation firewall only
means it's a firewall with more features

32
00:02:29,050 --> 00:02:33,640
in the case of the parlor I two devices
more features our stuff like the

33
00:02:33,640 --> 00:02:37,510
management interfaces so you have like a
really good-looking feature for

34
00:02:37,510 --> 00:02:41,320
management that interface you can use in
your browser you can use to contribute

35
00:02:41,320 --> 00:02:45,910
device you have classic shell access
which gives you in restricted common

36
00:02:45,910 --> 00:02:51,549
line interface similar to most Cisco
devices you have a lot of features

37
00:02:51,550 --> 00:02:55,480
around signature matching so they have
an intrusion prevention system they can

38
00:02:55,480 --> 00:02:57,070
do exploit detection

39
00:02:57,070 --> 00:03:02,109
they even have white fire lab analysis
which is basically a dynamic execution

40
00:03:02,110 --> 00:03:08,290
of member and analyzing it which is
executed completely in in the cloud and

41
00:03:08,290 --> 00:03:12,459
they have a PI D which gives you the
possibility to filter based on the

42
00:03:12,459 --> 00:03:18,250
application itself so you can filter
HTTP traffic or you can filter access to

43
00:03:18,250 --> 00:03:22,900
Facebook for example they have a very
interesting feature called user ID which

44
00:03:22,900 --> 00:03:29,019
allows you to do fire more filtering
based on active user ID user sessions so

45
00:03:29,019 --> 00:03:33,730
you can search for or you can filter
based on on your active user sessions

46
00:03:33,730 --> 00:03:38,109
inside an Active Directory environment
for example we look into user ID and

47
00:03:38,110 --> 00:03:44,019
depth later in the presentation and I
have and VPN functionality called global

48
00:03:44,019 --> 00:03:49,570
protect which is basically combination
of different kind of VPN solutions and

49
00:03:49,570 --> 00:03:56,109
with added features for mobile devices
so of course I didn't look at all of

50
00:03:56,110 --> 00:04:01,840
these features are mostly concentrated
or this presentation mostly concentrates

51
00:04:01,840 --> 00:04:04,450
on the management interfaces on the one
hand side

52
00:04:04,450 --> 00:04:08,950
user ID as well as global protect so we
look at the management interfaces what

53
00:04:08,950 --> 00:04:13,630
kind of attack surface they give us we
look at the user ID feature and we look

54
00:04:13,630 --> 00:04:17,918
at global protect and of course the
management interfaces are kind of an

55
00:04:17,918 --> 00:04:18,820
easy target

56
00:04:18,820 --> 00:04:22,270
they are not that interesting in the
real world environment because normally

57
00:04:22,270 --> 00:04:26,229
you shouldn't be able to talk to the
management interfaces in language

58
00:04:26,760 --> 00:04:30,780
hard environment so even if you find
back & management interface

59
00:04:30,780 --> 00:04:35,190
normal attack and an untrusted area of
the network should probably not be able

60
00:04:35,190 --> 00:04:40,560
to talk to these interfaces user ID is
more interesting because normally you

61
00:04:40,560 --> 00:04:44,460
have like untrusted office networks
where the user ID functionality is

62
00:04:44,460 --> 00:04:50,280
accessible to an attacker and of course
a global protect DPN if you use the

63
00:04:50,280 --> 00:04:54,090
remote VPN it will be accessible
completely from the internet

64
00:04:54,090 --> 00:04:58,710
so this makes it a really interesting
attacks her face and that fast

65
00:04:58,710 --> 00:05:04,320
so the agenda of this talk basically is
we are breaking in

66
00:05:04,320 --> 00:05:09,810
so as for all these devices normal you
don't get like food system shell or full

67
00:05:09,810 --> 00:05:13,260
picture directly on the device if you if
you buy it or if you use it as an

68
00:05:13,260 --> 00:05:14,340
administrator

69
00:05:14,340 --> 00:05:20,250
so the first step is to be performing a
jail break after the rise so we assume

70
00:05:20,250 --> 00:05:23,850
they are normal administrator of the
device but we want to get full access to

71
00:05:23,850 --> 00:05:28,410
the operating system and then we were
talking about panel is architecture so

72
00:05:28,410 --> 00:05:31,800
when we have full operating system
access we can look at the actual art

73
00:05:31,800 --> 00:05:32,940
architecture

74
00:05:32,940 --> 00:05:37,020
what software or hardware specs running
on the device and then we walks with the

75
00:05:37,020 --> 00:05:41,159
attack surface at just mentioned so we
look at the management interface to user

76
00:05:41,160 --> 00:05:46,530
ID feature and global protect feature at
the end and then the final end of the

77
00:05:46,530 --> 00:05:48,719
presentation i have a short conclusion

78
00:05:48,720 --> 00:05:55,560
so let's talk about breaking in the
ideas you have an administrative

79
00:05:55,560 --> 00:06:00,180
interface so you have a common line
interface / ssh you can see like

80
00:06:00,180 --> 00:06:03,690
functionality offered by that on the
left hand side and you have to say map

81
00:06:03,690 --> 00:06:08,580
interface but these interfaces are kind
of restricted so you don't get full

82
00:06:08,580 --> 00:06:12,659
access to the operating system and of
course we need there to find more juicy

83
00:06:12,660 --> 00:06:16,560
box in in the different components like
to clear we protect it yet

84
00:06:16,560 --> 00:06:21,000
and so the first availability i
discovered is kind of easy

85
00:06:21,960 --> 00:06:26,130
you look at the comment line interface
and the command line interface is a

86
00:06:26,130 --> 00:06:30,180
really restricted interface that can be
used for for configuration and

87
00:06:30,180 --> 00:06:32,370
troubleshooting

88
00:06:32,370 --> 00:06:37,139
but it mostly works as by using small
common line wraps or call

89
00:06:37,139 --> 00:06:42,810
wrappers around standard Linux utilities
so basically if you call this test SCP

90
00:06:42,810 --> 00:06:44,460
server connection command

91
00:06:44,460 --> 00:06:49,498
what happens on the underlying operating
system is that the normal SCP looks

92
00:06:49,499 --> 00:06:54,930
utilities card and arguments you pass in
the end apartheid Rochelle interface

93
00:06:54,930 --> 00:06:58,259
will be passed down trees stp comment

94
00:06:59,009 --> 00:07:02,819
in most cases they correctly escape
everything you can probably think about

95
00:07:02,819 --> 00:07:07,409
like you can't use back takes or pipe or
something to inject black arbitrary

96
00:07:07,409 --> 00:07:13,080
commands but in the case of this test is
seeking server connection command

97
00:07:13,080 --> 00:07:20,068
they basically for God to escape the
host name parameter correctly

98
00:07:20,069 --> 00:07:27,599
so what we do here is we inject an
option to ssh or to SCP so we use this

99
00:07:27,599 --> 00:07:34,589
- OH option command line parameter where
we can define a proxy comment and when

100
00:07:34,589 --> 00:07:38,969
we do an executable the this test
estimates have a connection command

101
00:07:38,969 --> 00:07:43,889
what really will happen is that we move
our shelves so the shell off the ear and

102
00:07:43,889 --> 00:07:49,349
w user from this restricted common line
interface to the bin bash user so this

103
00:07:49,349 --> 00:07:55,889
allows us for this gives us the
possibility to to later on just lock

104
00:07:55,889 --> 00:08:00,839
login using ssh again and just John
bride into a food future children so

105
00:08:00,839 --> 00:08:02,279
this is kind of a nice

106
00:08:02,279 --> 00:08:10,620
availability far when we have to we have
a normal bash shell running that we can

107
00:08:10,620 --> 00:08:15,990
start looking into the operating system
or into the device itself and so the

108
00:08:15,990 --> 00:08:18,990
basic architecture is quite simple in
this case it's a Linux system

109
00:08:19,649 --> 00:08:25,560
it's running on the map 64 processor the
browsers actually the kvm cocktail glass

110
00:08:25,560 --> 00:08:29,669
processor which will become much more
interesting when we go into binary

111
00:08:29,669 --> 00:08:30,870
exploitation

112
00:08:30,870 --> 00:08:36,299
into in the global protect chapter and
like the device i looked at actually

113
00:08:36,299 --> 00:08:40,799
runs the panel is 6 . something version
which is kind of old

114
00:08:41,340 --> 00:08:48,690
so this one is actually still using a
2.6 color version and there is palo alto

115
00:08:48,690 --> 00:08:52,230
also offices as a bottle of lines which
is interesting because of course the

116
00:08:52,230 --> 00:08:56,880
virtually blind doesn't run on mips it's
running on x64 so the whole software

117
00:08:56,880 --> 00:09:00,990
sector hold on where's architecture is
kind has kind of support for multiple

118
00:09:00,990 --> 00:09:07,350
different architectures and if you look
at how they do like the basic firewall

119
00:09:07,350 --> 00:09:11,940
stuff so like the basic filtering
nothing and what you can imagine it's

120
00:09:11,940 --> 00:09:15,090
all implemented on top of standard Linux
capabilities

121
00:09:15,090 --> 00:09:19,260
so after standard Linux network stick
which is from a security perspective is

122
00:09:19,260 --> 00:09:24,150
actually kind of good idea because the
linux Tagus will battle hardened so it

123
00:09:24,150 --> 00:09:27,870
doesn't have any tribute box so you
won't find anything -

124
00:09:27,870 --> 00:09:32,790
- how but in there of course they offer
a lot of features that can't be found in

125
00:09:32,790 --> 00:09:38,939
a normal unix system and everything all
these features are implemented as

126
00:09:38,940 --> 00:09:43,740
proprietary linux user space processes
that are just running under operating

127
00:09:43,740 --> 00:09:44,790
system

128
00:09:44,790 --> 00:09:50,640
so really simplified visualization how
does how does actually looks like

129
00:09:50,640 --> 00:09:56,069
so the system has has a standard Linux
kernel running on the bottom and you

130
00:09:56,070 --> 00:10:02,700
have a normal new user space back as
well as for example to openssh process

131
00:10:02,700 --> 00:10:06,840
that's responsible for the common line
web interface but done in parallel to

132
00:10:06,840 --> 00:10:13,260
that you have to palo I to software
stack and there are like four cost

133
00:10:13,260 --> 00:10:15,090
service you use tools

134
00:10:15,090 --> 00:10:21,240
Damon's you used as a call for the
communication of the other components

135
00:10:21,240 --> 00:10:24,810
for example you have this off demon
which is authentication demons

136
00:10:24,810 --> 00:10:29,489
responsible for all the also can
education in the whole system be it a

137
00:10:29,490 --> 00:10:34,980
log in to the management interface or
login to like the common line interface

138
00:10:34,980 --> 00:10:40,050
or even lock into the VPN and you have
to grip the demon for example which has

139
00:10:40,050 --> 00:10:44,310
support for hardware security more news
so if your device has part for harvest

140
00:10:44,310 --> 00:10:48,989
security modules you can like outsource
all encrypted traffic operations to the

141
00:10:48,990 --> 00:10:54,180
hardware and then you have like master d
which is a process watchdog more or less

142
00:10:54,180 --> 00:11:01,020
and 60 which is responsible for the
internal IP see communication and and

143
00:11:01,020 --> 00:11:05,160
then the actual functionality is
implemented using these services on the

144
00:11:05,160 --> 00:11:13,350
top and a dozen is as a process for the
user ID service you have groceries for

145
00:11:13,350 --> 00:11:18,450
the global protect and captive Pato
engine and and a lot more

146
00:11:19,170 --> 00:11:23,430
what's already really interesting on
what you can see is one core component

147
00:11:23,430 --> 00:11:29,370
of this architecture is an adapter of
our college at bats we and PHP

148
00:11:29,370 --> 00:11:34,529
interpreter and we will see throughout
the presentation that this is kind of a

149
00:11:34,529 --> 00:11:39,600
security critical decision or office as
many possibilities for exploitation

150
00:11:40,380 --> 00:11:46,950
so all these all back interfaces on this
device are implemented on top of the

151
00:11:46,950 --> 00:11:52,650
steps server and it looks like
originally this the whole functionality

152
00:11:52,650 --> 00:11:57,420
was implemented as normal PHP scripts
but probably in for performance reasons

153
00:11:57,420 --> 00:12:02,699
they moved from writing normal PHP code
to writing all the functionality as

154
00:12:02,700 --> 00:12:10,260
native PHP extensions and then on you
have really small PHP repa script that

155
00:12:10,260 --> 00:12:12,540
call introduce extensions

156
00:12:12,540 --> 00:12:17,430
it's kind of an interesting design
decision because you have like move 64

157
00:12:17,430 --> 00:12:22,859
running PHP native extensions and it's
very interesting for us because this

158
00:12:22,860 --> 00:12:27,839
means that you have a lot of native code
you can talk to over this web interfaces

159
00:12:27,839 --> 00:12:31,500
so you're not talking to another
scripting language or something

160
00:12:31,500 --> 00:12:35,850
you talking to native code so you can
look at forged typical memory corruption

161
00:12:35,850 --> 00:12:41,970
box like buffer overflows and stuff and
now you might ask yeah but that

162
00:12:41,970 --> 00:12:46,170
interfaces how many web interfaces does
this box half what does this implement

163
00:12:46,170 --> 00:12:49,680
any interesting features as web
interface and yeah that's the case

164
00:12:49,680 --> 00:12:54,000
mainly of course the management that
interface is implemented on top of this

165
00:12:54,000 --> 00:12:57,310
but also to hold global protect so

166
00:12:57,310 --> 00:13:03,609
the VPN stag is implemented on top of
this this this layer so this means we

167
00:13:03,610 --> 00:13:07,480
have an ssl VPN you can reach over the
internet which is implemented as a

168
00:13:07,480 --> 00:13:13,450
native PHP extension so this is like
looking really interesting for an attack

169
00:13:13,450 --> 00:13:19,630
up and they have two captive Pato which
is part of the user ID feature which is

170
00:13:19,630 --> 00:13:21,400
also implemented on top of it

171
00:13:21,400 --> 00:13:26,949
so we're looking at a text surface i
already mentioned that we have to

172
00:13:26,950 --> 00:13:31,029
management interfaces hopefully on
isolated interfaces

173
00:13:31,029 --> 00:13:35,650
we have to content tab user ID features
which might be reachable from untrusted

174
00:13:35,650 --> 00:13:39,430
networks segments and then we have to
close will protect which in many cases

175
00:13:39,430 --> 00:13:45,670
is reachable from the internet so we
just walked through that from from top

176
00:13:45,670 --> 00:13:46,630
to bottom

177
00:13:46,630 --> 00:13:53,980
so let's look at the management benefits
and also they have a Pew I for manual

178
00:13:53,980 --> 00:13:59,230
management and also in rest api which is
kind of cool because you can use it for

179
00:13:59,230 --> 00:14:03,790
like automatic automated management of
all the devices in your environment and

180
00:14:03,790 --> 00:14:10,689
its implemented on top of this network
stack orders eps we last PHP stack and

181
00:14:10,690 --> 00:14:14,740
the management web interface itself so
the user interface has a really large

182
00:14:14,740 --> 00:14:19,540
attacks her face but most of it is
hidden behind or protected by the

183
00:14:19,540 --> 00:14:23,770
initial authentication so as normal
attacker even if you have access to like

184
00:14:23,770 --> 00:14:24,910
this interface

185
00:14:24,910 --> 00:14:28,990
you can't do too much with Wi because
you don't have like administrative

186
00:14:28,990 --> 00:14:30,430
access to the device

187
00:14:30,430 --> 00:14:34,870
however there's some kind of
functionality that you can trigger an

188
00:14:34,870 --> 00:14:40,870
authenticated and one of them is like
the initials parts of the rest api so

189
00:14:40,870 --> 00:14:46,750
basically you just sent and redress an
HTTP request to the device

190
00:14:46,750 --> 00:14:52,930
unlike the SF part and request the / AP
I URL and then you are reaching all the

191
00:14:52,930 --> 00:14:58,000
code that's responsible for the rest api
and if you send a post requests to this

192
00:14:58,000 --> 00:14:58,750
URL

193
00:14:58,750 --> 00:15:02,670
you will find out that this triggers and
native function

194
00:15:02,670 --> 00:15:09,420
it's called a p a p IW get filter
function this happens before any

195
00:15:09,420 --> 00:15:10,800
authentication happens

196
00:15:10,800 --> 00:15:14,520
so this is an eccentric ated and the
interesting thing if you look at this

197
00:15:14,520 --> 00:15:21,210
code if the request so the HTTP request
you sent over that contains the string

198
00:15:21,210 --> 00:15:28,710
client equals W get then they use curl
so the cur comment line from utility to

199
00:15:28,710 --> 00:15:33,540
to invoke an authentication check
against an internal web service own and

200
00:15:33,540 --> 00:15:39,420
service that's only reachable over the
local host interface and the fun part

201
00:15:39,420 --> 00:15:45,060
about bad as this disc our Comment uses
some user-supplied input parameter so

202
00:15:45,060 --> 00:15:50,069
they're basically generate like a
dynamic our invocation to car talking to

203
00:15:50,070 --> 00:15:56,100
this local service so you can use this
to influence the comment a bit

204
00:15:56,910 --> 00:16:02,969
Adam was remain parameters they use are
the Kiwi tres per meter so the it's just

205
00:16:02,970 --> 00:16:06,090
get or post per meter possible

206
00:16:06,090 --> 00:16:11,370
HTTP authentication had us if you sent
down and to remote IP and what's

207
00:16:11,370 --> 00:16:16,470
interesting about the remote IP is that
they not only look at the IP coming out

208
00:16:16,470 --> 00:16:18,870
of to tcp/ip stack so like you

209
00:16:18,870 --> 00:16:25,050
your normal IP client connection instead
they also use the X real IP header the

210
00:16:25,050 --> 00:16:29,880
HTTP header if that's available in the
request and as you can imagine that's

211
00:16:29,880 --> 00:16:34,980
cool because the X real IP or header is
completely controlled by an attacker

212
00:16:34,980 --> 00:16:39,270
so you can more or less put arbitrary
values in this remote IP feet

213
00:16:39,810 --> 00:16:46,170
now it's not completely easy because
they use sk sk h l arc to escape all the

214
00:16:46,170 --> 00:16:51,540
values you pass to it before they
actually put it in the command line and

215
00:16:51,540 --> 00:16:57,209
and as k a k Michelle are crooks like
designed puts a single world before and

216
00:16:57,210 --> 00:17:00,660
after the value escapes everything else
that could lead to problems

217
00:17:01,290 --> 00:17:06,480
so don't have like a direct command
injection however if you look at the

218
00:17:06,480 --> 00:17:10,860
code so this is like completely upside
of code representation that doesn't have

219
00:17:10,859 --> 00:17:14,069
to do anything with original source code
but it's like the same functionality

220
00:17:15,689 --> 00:17:20,819
how does function actually escapes the
stuff you can see you have if you have

221
00:17:20,819 --> 00:17:26,009
to keep our meter in the US where they
execute escape shell arc with the

222
00:17:26,009 --> 00:17:31,230
destination the maximum length of the
escape value and to keep power meter

223
00:17:31,230 --> 00:17:36,210
if that doesn't work day about the
connection they do the same for the

224
00:17:36,210 --> 00:17:41,519
basic out header is caping if that
doesn't work so if as Cape shell our

225
00:17:41,519 --> 00:17:44,789
returns a value smaller than zero they
bought the connection

226
00:17:44,789 --> 00:17:53,610
now interestingly they also escaped as
HTTP is real IP header in this line but

227
00:17:53,610 --> 00:17:58,199
i never checked for the return value so
as you can see you have this if

228
00:17:58,200 --> 00:18:01,889
condition if to escape shell our
function fails we bought the connection

229
00:18:01,889 --> 00:18:07,289
but I forget this check from after
return value when is caping the real IP

230
00:18:07,289 --> 00:18:12,330
header so how can we exploit this

231
00:18:13,019 --> 00:18:17,279
and the interesting part if you go back
and look at the second power meter it's

232
00:18:17,279 --> 00:18:22,230
like the size of this destination buffer
where they want to copy the value in and

233
00:18:22,230 --> 00:18:28,019
the function will fail if the input
value is so large that the output buffer

234
00:18:28,019 --> 00:18:34,139
is not big enough to contain the cone
escape value and what happens is they

235
00:18:34,139 --> 00:18:39,840
still start to write as K value into
this output buffer so they start with a

236
00:18:39,840 --> 00:18:44,490
single road then your content comes but
they don't have enough space for the

237
00:18:44,490 --> 00:18:49,320
final single code and instead to
function faiths but because this failure

238
00:18:49,320 --> 00:18:55,168
isn't correct you checked by the code
you have like an off by one in throating

239
00:18:55,169 --> 00:19:00,179
which allows you really simple command
injection so basically just send like a

240
00:19:00,179 --> 00:19:06,629
really long x real IP header where you
and then you can just do something like

241
00:19:06,629 --> 00:19:11,279
this as key parameter because the civic
roads are off by one you'd get direct

242
00:19:11,279 --> 00:19:12,779
command injection

243
00:19:12,779 --> 00:19:18,090
so now i want to do the demo I have to
set up for like two minutes so bear with

244
00:19:18,090 --> 00:19:19,649
me for that

245
00:19:19,649 --> 00:19:20,229
and

246
00:19:20,230 --> 00:19:23,230
at least I hope to work

247
00:20:08,980 --> 00:20:11,980
okay let's see so

248
00:20:16,990 --> 00:20:21,580
so it basically just opens like a we r
us connection to my system so i just

249
00:20:21,580 --> 00:20:27,669
opened like a listener and that cared
one plot 1 tunes from for and on the

250
00:20:27,670 --> 00:20:32,200
left hand side I just started my exploit
its going against so this is like a

251
00:20:32,200 --> 00:20:36,520
lifetime also its but complex but this
one is like the box i'm currently

252
00:20:36,520 --> 00:20:43,330
attacking and 1.1 IP address is 212
internal management interface so every

253
00:20:43,330 --> 00:20:48,340
time you see the 1.1 it's the internal
interface later on we will attack - 2.1

254
00:20:48,340 --> 00:20:55,750
which is like an external interface so
if I just enter my exploit you can see I

255
00:20:55,750 --> 00:21:00,370
got a reverse connection from the
interface and if I look I'm having

256
00:21:00,370 --> 00:21:04,090
nobody show running on this

257
00:21:04,090 --> 00:21:10,809
palo alto appliance so it's a policy of
500 running lips 64 operating system so

258
00:21:10,809 --> 00:21:13,899
you might want this is still nobody
command injection so it's not that

259
00:21:13,900 --> 00:21:17,500
critical but at the end of show you we
have a local privilege escalation as

260
00:21:17,500 --> 00:21:24,429
well so we get a richer out of that and
so if you look at the actual request so

261
00:21:24,429 --> 00:21:29,020
it's not terrible complex exploit you
just sound like this policy request the

262
00:21:29,020 --> 00:21:34,179
key parameter contains like - well and
coded a common injection and our X real

263
00:21:34,179 --> 00:21:40,420
IP header is just like a over long
string of eight and then it's completely

264
00:21:40,420 --> 00:21:44,590
irrelevant and what kind of data you put
in there so there's an interesting first

265
00:21:44,590 --> 00:21:45,459
was hard

266
00:21:45,460 --> 00:21:49,929
it means we have an authenticated common
execution against management web

267
00:21:49,929 --> 00:21:54,610
interface it's hundred percent stable
but of course it's in a hot environment

268
00:21:54,610 --> 00:21:58,719
you won't be able to reach the
management interface so it's not liked

269
00:21:59,470 --> 00:22:07,270
game over already so let's look at user
ID user ID is the cost selling point of

270
00:22:07,270 --> 00:22:11,590
two old polish devices because it's a
really cool feature you want to have as

271
00:22:11,590 --> 00:22:15,909
a network administrator basically allows
you to implement your firewall policies

272
00:22:15,910 --> 00:22:19,360
not on kind of IP ranges or IP addresses

273
00:22:19,360 --> 00:22:23,889
instead you can implement and based on
user cuts so you can define a rule like

274
00:22:23,890 --> 00:22:25,270
yeah

275
00:22:25,270 --> 00:22:31,090
you's a pop that's my cooperation can
connect to my domain controller on the

276
00:22:31,090 --> 00:22:37,120
rdp part but user Ellis isn't allowed to
connect to anything and then the printer

277
00:22:37,120 --> 00:22:39,459
or like the web interface or something

278
00:22:39,460 --> 00:22:45,070
of course this is cool because if it
works correctly it works for every like

279
00:22:45,070 --> 00:22:50,439
environment so you can it will work even
if Bob is using some kind of wife is

280
00:22:50,440 --> 00:22:53,680
sitting in the office or if he's
connecting over his remote VPN

281
00:22:54,310 --> 00:22:57,970
so you don't have to work with any IP
ranges anymore

282
00:22:58,960 --> 00:23:04,630
now how is this actually implemented so
to make this work to fire one it's an

283
00:23:04,630 --> 00:23:10,660
active mapping between IP addresses and
active user comes and Apollo devices

284
00:23:10,660 --> 00:23:15,100
support this mapping and five main
weights so you have some monitoring for

285
00:23:15,100 --> 00:23:18,490
agent list or with an agent you have a
captive partner

286
00:23:19,270 --> 00:23:23,020
we have client probing and it's a future
that's also embedded in the global

287
00:23:23,020 --> 00:23:33,010
protect DPN so we quickly walks role of
those so seven monitoring the ideas you

288
00:23:33,010 --> 00:23:33,310
have

289
00:23:33,310 --> 00:23:38,440
agent listen monitoring where you just
create dedicated user for accessing the

290
00:23:38,440 --> 00:23:41,440
domain controller so we're talking about
an Active Directory environment

291
00:23:42,070 --> 00:23:46,810
so in this case it would be in dedicated
user that can log on into the domain

292
00:23:46,810 --> 00:23:47,679
controller

293
00:23:47,680 --> 00:23:51,130
it doesn't have to be a domain
administrator so it can work with like

294
00:23:51,130 --> 00:23:56,170
service operator permissions which is
still quite height and but it doesn't

295
00:23:56,170 --> 00:24:01,330
have to be an administrator and then you
started potentials of this user on your

296
00:24:01,330 --> 00:24:06,790
part i - appliance and the fire board
uses this user account to connect to the

297
00:24:06,790 --> 00:24:10,870
domain controller and read event looks
and basically it's just looking for

298
00:24:10,870 --> 00:24:14,979
successful logins and then it can map
like an IP address of the successful

299
00:24:14,980 --> 00:24:20,140
login to the currently active domain
user you can also implement this for

300
00:24:20,140 --> 00:24:23,950
exchange server so instead of using your
domain controller you use like your main

301
00:24:23,950 --> 00:24:29,380
login and this is kind of simple but of
course has problem that it starts your

302
00:24:29,380 --> 00:24:32,440
credentials on the device so if someone
pops your device

303
00:24:32,440 --> 00:24:35,850
he will have credentials to a kind of
privileged user

304
00:24:35,850 --> 00:24:39,689
under the domain controller which of
course can be a problem

305
00:24:41,039 --> 00:24:47,549
so the next step how you could implement
this or about politics apart is the

306
00:24:47,549 --> 00:24:52,500
so-called user ID agent and the idea is
if you have hundreds of policy blind

307
00:24:52,500 --> 00:24:57,150
since you want every you don't want that
every appliance directly connects to the

308
00:24:57,150 --> 00:25:01,650
domain controller instead you have a
dedicated agent the appliance connects

309
00:25:01,650 --> 00:25:07,770
to the agent and the agent connects to
the domain controller now the

310
00:25:07,770 --> 00:25:11,879
credentials are starting this user ID
agent which is just a normal windows

311
00:25:11,880 --> 00:25:18,059
process so you can install that on every
box or any box in your environment and

312
00:25:18,059 --> 00:25:23,610
to accept connections so that the
firewall or the appliance can connect to

313
00:25:23,610 --> 00:25:29,820
the agent the agent opens up the tcp
part type 007 and waits for connections

314
00:25:29,820 --> 00:25:35,908
and I'm so we didn't disclose something
in this functionality so the only thing

315
00:25:35,909 --> 00:25:39,390
i want to say about dads you should
figure this part

316
00:25:39,390 --> 00:25:43,620
so you should configure it in a way that
only the part I to appliances can

317
00:25:43,620 --> 00:25:47,158
connect to the user ID agent otherwise
of course you have quite an interesting

318
00:25:47,159 --> 00:25:51,419
attack surface if every device in your
network and connect directly to the

319
00:25:51,419 --> 00:25:52,080
agent

320
00:25:52,080 --> 00:25:58,500
um the the hard way you can implement
this user ID feature is the so-called

321
00:25:58,500 --> 00:26:00,090
captive parter

322
00:26:00,090 --> 00:26:04,408
and this isn't additional an alternative
to serve a monitoring and the idea is

323
00:26:04,409 --> 00:26:10,830
you just that the blinds looks for
connection to part 18 or 22 port 443 if

324
00:26:10,830 --> 00:26:14,490
ssl interceptions enabled and if they
see such a connection

325
00:26:15,120 --> 00:26:20,520
they just pop up this captive partner
web page and for some manual login

326
00:26:20,520 --> 00:26:24,720
so if your users just trying to access
some kind of internal episode you can

327
00:26:24,720 --> 00:26:27,780
you pop up this lock-in feud and then
you have to perform

328
00:26:28,440 --> 00:26:32,970
normal authentication to your domain
again this is quite interesting because

329
00:26:32,970 --> 00:26:38,100
it's also using this app web sweet stuff
last PHP extensions so it's an

330
00:26:38,100 --> 00:26:42,590
interesting text surface now but one
after the

331
00:26:42,590 --> 00:26:47,120
cool features or at least I think
they're kind of interesting

332
00:26:47,120 --> 00:26:51,949
r is climb Probie so did the problem
with this event log approach so that you

333
00:26:51,950 --> 00:26:55,460
connect to the server and ask for the
event logs might be the day when locks

334
00:26:55,460 --> 00:27:01,100
are quite old so they're not like always
an actual or current mapping between

335
00:27:01,100 --> 00:27:07,610
like the eyepiece and to clients and
they have kind of a high impact on the

336
00:27:07,610 --> 00:27:12,110
server resources because you have like a
lot of reading of the UN looks and the

337
00:27:12,110 --> 00:27:17,360
captive portal is a nice approach but it
only works if you have HTTP traffic and

338
00:27:17,360 --> 00:27:21,740
you have like a manual person doing the
excessive so if it's like some kind of

339
00:27:21,740 --> 00:27:25,940
automated server connections then you
can't use to kept apart

340
00:27:25,940 --> 00:27:32,179
so what climbed robing does errs you
just asked a client

341
00:27:32,179 --> 00:27:38,090
hey what user is locked in so I didn't
say that's a good idea because as you

342
00:27:38,090 --> 00:27:43,189
can imagine declined if the client is
entrusted he can tell you any user ID he

343
00:27:43,190 --> 00:27:43,970
want

344
00:27:43,970 --> 00:27:48,710
and interestingly this is enabled by
default so it's not like this is the

345
00:27:48,710 --> 00:27:54,559
future you have to enable by default
every policy device that has user ID

346
00:27:54,559 --> 00:27:58,760
active on this interface will perform
client roving against your client if you

347
00:27:58,760 --> 00:28:03,379
try to connect to any IP and the
implement or just a part of this

348
00:28:03,380 --> 00:28:06,980
implementation of our net buyers and or
BMI

349
00:28:06,980 --> 00:28:12,350
so you can get a netbios connection or
BMI connection from their blinds or from

350
00:28:12,350 --> 00:28:17,240
the user agent so distance both
supported and when i started researching

351
00:28:17,240 --> 00:28:18,799
this future

352
00:28:18,799 --> 00:28:23,570
I found a really interesting blog post
by HD more from rapid seven

353
00:28:23,570 --> 00:28:29,299
we're basically did like an Internet
wide scan for their projects ona and

354
00:28:29,299 --> 00:28:30,950
then I realized strange

355
00:28:30,950 --> 00:28:36,649
there are a lot of people doing
connections to our scanning server and

356
00:28:36,649 --> 00:28:41,779
SMB connections so they see like so if
you if you have family with some being

357
00:28:41,779 --> 00:28:45,470
anyway you see password hashes if
someone connects to you

358
00:28:45,470 --> 00:28:51,590
so they're dead tried to find out why
this is happening and basically this was

359
00:28:51,590 --> 00:28:54,820
a Miss configuration after user ID
feature on a lot of fire

360
00:28:54,820 --> 00:29:00,549
words so if you activate user ID feature
on external interfaces of your firewall

361
00:29:00,549 --> 00:29:06,490
your firewall will start connecting to
host on the internet and try to do

362
00:29:06,490 --> 00:29:11,409
client probing to find out if they have
a valid account in your network is of

363
00:29:11,409 --> 00:29:14,470
course a terrible idea because it leaks
like this

364
00:29:14,470 --> 00:29:19,539
this user account they use for client
program and it's not a classic security

365
00:29:19,539 --> 00:29:23,049
vulnerability of topology device because
it's like a Miss configuration of the

366
00:29:23,049 --> 00:29:27,940
administrators but as it turns out it
seems to be happen quite a lot

367
00:29:27,940 --> 00:29:34,750
so this is Miss configuration but as I
mentioned the whole klein problem

368
00:29:34,750 --> 00:29:39,820
mechanism is kind of suspicious because
you can easily bypass it and send like

369
00:29:39,820 --> 00:29:41,320
arbitrary values

370
00:29:41,320 --> 00:29:46,029
I had to set up for this so to
demonstrate it is i have a child proof

371
00:29:46,029 --> 00:29:49,509
of concept you need an active two main
controller and stuff for this to work so

372
00:29:49,509 --> 00:29:58,899
i have a video of this but the idea is
dead trigger in the trigger connection

373
00:29:58,899 --> 00:30:03,250
attempt and unless to decline probing
mechanism coming back to me and you

374
00:30:03,250 --> 00:30:08,320
should see that I'm able to to inject an
arbitrary username in this in this user

375
00:30:08,320 --> 00:30:16,000
ID database and of course if they do
like security cutie critical rendering

376
00:30:16,000 --> 00:30:18,500
based on

377
00:30:18,500 --> 00:30:24,020
based on this user ID well you stand you
have like an interesting attack work

378
00:30:24,020 --> 00:30:28,370
so how it works is on the top left hand
I'm locked in into the admin panel of

379
00:30:28,370 --> 00:30:32,600
topology advice and I will just show you
the currently active user mappings for

380
00:30:32,600 --> 00:30:37,250
my IP because I'm a normal attacker you
should not see any user ID mappings here

381
00:30:37,250 --> 00:30:42,200
if they exploit works for the tag works
then you will see user ID mapping with

382
00:30:42,200 --> 00:30:47,360
the value of my choice on the right hand
side dislike to script dad's doing the

383
00:30:47,360 --> 00:30:53,389
actual exploitation and its really
easily implemented using cost securities

384
00:30:53,390 --> 00:30:54,920
impacted library

385
00:30:54,920 --> 00:30:59,690
so this just sounds like the third
expected rebuy for this client probing

386
00:30:59,690 --> 00:31:02,360
weakness and on the bottom left

387
00:31:02,360 --> 00:31:07,250
I just trigger a connection to an
arbitrary our IP address and port at the

388
00:31:07,250 --> 00:31:12,680
fireboard to trigger this disconnection
attempt and after i triggered the

389
00:31:12,680 --> 00:31:17,330
connection attempt I'm just searching
for IP user mappings and you can see

390
00:31:17,330 --> 00:31:22,100
there are no IP user mappings for my IP
so this is the attacker IP but if you

391
00:31:22,100 --> 00:31:23,810
just wait long enough

392
00:31:23,810 --> 00:31:29,960
the netbios climb growing will trigger
will connect to my own box and I'm able

393
00:31:29,960 --> 00:31:32,810
to inject an arbitrary user open mapping

394
00:31:32,810 --> 00:31:37,970
I'm it's also quite interesting because
you're not limited to like replying i

395
00:31:37,970 --> 00:31:45,260
can see here I'm like locked on or oh
now i have a valid user ID mapping for

396
00:31:45,260 --> 00:31:48,260
the user Felix at the domain fishboat
cop

397
00:31:48,260 --> 00:31:52,580
of course it could like use arbitrary
domains arbitrary user names for this

398
00:31:52,580 --> 00:31:53,419
attack

399
00:31:53,420 --> 00:31:58,130
you're not even limited to only replying
with a single value so if you know like

400
00:31:58,130 --> 00:32:01,670
the user account of all the domain
administrators in the target company

401
00:32:02,300 --> 00:32:06,980
you just return like a list of all of
them and then try to connect to the

402
00:32:06,980 --> 00:32:08,570
domain controller or something

403
00:32:08,570 --> 00:32:13,790
and if they do use a based filtering you
will probably just be able to connect to

404
00:32:13,790 --> 00:32:16,790
really juicy target

405
00:32:20,909 --> 00:32:27,629
so the final idea of the final part
where you can use user idea how you can

406
00:32:27,629 --> 00:32:30,869
implement user ideas with the club will
protect mechanism i mentioned Kuo will

407
00:32:30,869 --> 00:32:32,728
protect a couple of times before

408
00:32:32,729 --> 00:32:39,989
it's the VPN solution and it has has
extra support for mobile devices you

409
00:32:39,989 --> 00:32:44,279
have like desktop Cline's and mobile
apps for every popular platform so in

410
00:32:44,279 --> 00:32:47,249
the end it's just part of I'll just be
in functionality

411
00:32:47,249 --> 00:32:50,669
interestingly after I gave this
presentation or after we did this

412
00:32:50,669 --> 00:32:55,679
research some people came to me and also
mentioned that global protectors often

413
00:32:55,679 --> 00:33:00,450
heavily used internally so they don't
use it as like an external VPN

414
00:33:00,450 --> 00:33:05,460
instead I use it internally to to offer
dis client ID feature because if you

415
00:33:05,460 --> 00:33:10,559
lock em to Khloe will protect you also
have created this decline user IP

416
00:33:10,559 --> 00:33:14,729
mapping without doing client probing or
server monitoring something like this

417
00:33:14,729 --> 00:33:22,019
now the cool part about global protect
from a security researcher perspective

418
00:33:22,019 --> 00:33:27,179
is that the whole ssl VPN functionality
as well as all the configuration AP is

419
00:33:27,179 --> 00:33:31,830
that do like a client and narration and
they can download your climb packages

420
00:33:31,830 --> 00:33:35,879
and stuff like this is all implemented
on top of this web interfaces app

421
00:33:35,879 --> 00:33:41,158
website we blast PHP interface and of
course isn't really interesting attack

422
00:33:41,159 --> 00:33:45,599
surface because this case it's normally
reachable from the internet and some of

423
00:33:45,599 --> 00:33:48,658
the functionality we want to trigger
does not require any kind of

424
00:33:48,659 --> 00:33:52,859
authentication is so what kind of
vulnerabilities can you find in this

425
00:33:52,859 --> 00:33:59,340
interface so the first thing is it's not
like a hardcore critical to find back or

426
00:33:59,340 --> 00:34:03,178
hard-to-find back because basically you
just lock in

427
00:34:03,179 --> 00:34:08,490
so you try to login into this ssl VPN
and you just send like a really really

428
00:34:08,489 --> 00:34:09,779
long password

429
00:34:09,779 --> 00:34:14,730
like around 60,000 characters should be
fine and you will notice that the

430
00:34:14,730 --> 00:34:20,819
server's crashed so the VPN just dies
and the reason for this is that they use

431
00:34:20,819 --> 00:34:26,819
an escape string for xml so a function
directly on this password to pass into

432
00:34:26,819 --> 00:34:31,409
there and this allocates memory but it
doesn't allocate memory on the heap it

433
00:34:31,409 --> 00:34:32,429
uses a locker

434
00:34:32,429 --> 00:34:37,050
to allocate the space on the stack on my
small groups device just exercise is

435
00:34:37,050 --> 00:34:38,099
quite limited

436
00:34:38,099 --> 00:34:42,720
so you basically just have like a
classic step over on dude excess include

437
00:34:42,719 --> 00:34:47,819
memory and box press depending on what
kind of architecture and if you do this

438
00:34:47,819 --> 00:34:52,199
on x64 it might be even explode with
someone other than I love service but i

439
00:34:52,199 --> 00:34:56,250
have a different back which is much more
interesting to exploit so we just skip

440
00:34:56,250 --> 00:35:02,280
over that and and categorized as it as
denial-of-service the next interesting

441
00:35:02,280 --> 00:35:07,680
feature of global protect is that I have
cookies that are encrypted and ideas you

442
00:35:07,680 --> 00:35:13,200
can have multiple Global protect parts
and if you like to failover or load

443
00:35:13,200 --> 00:35:17,220
balancing and go to a different part of
then the club will protect cookies

444
00:35:17,220 --> 00:35:18,569
should still work

445
00:35:18,569 --> 00:35:24,720
and the problem with business that they
use a device master key as an encryption

446
00:35:24,720 --> 00:35:27,959
key so they do like symmetric encryption
after cookies

447
00:35:27,960 --> 00:35:33,270
add the device master key by default is
this completely random looking string by

448
00:35:33,270 --> 00:35:39,839
accident includes the vendor name and
and interestingly so you can change this

449
00:35:39,839 --> 00:35:41,040
master key

450
00:35:41,040 --> 00:35:44,940
but it's not enforced during
installation and actually not documented

451
00:35:44,940 --> 00:35:47,010
that they use it for the cookies

452
00:35:47,010 --> 00:35:52,079
so if you look at the documentation what
the master key should do is encrypt your

453
00:35:52,079 --> 00:35:56,490
local configuration on your device and
if you're a normal administrator you

454
00:35:56,490 --> 00:36:00,509
probably don't bother with bad because I
mean local configuration on the device

455
00:36:00,510 --> 00:36:04,440
doesn't sound too important a the
documentation does not mention that this

456
00:36:04,440 --> 00:36:09,480
is actually encrypting your cookies and
of course if you can't decrypt and

457
00:36:09,480 --> 00:36:13,109
encrypt arbitrary cookies you have
really interesting attacks

458
00:36:13,109 --> 00:36:17,819
we actually didn't implement the food
proof of concept for bypassing VPN

459
00:36:17,819 --> 00:36:22,230
authentication because for that you
would have needs like multiple devices

460
00:36:22,230 --> 00:36:27,930
so they are in this in this failover
mode on this load balancing mode so i

461
00:36:27,930 --> 00:36:31,919
can't like demonstrate the PN
authentication bypass but in my opinion

462
00:36:31,920 --> 00:36:38,579
this is like the case and interestingly
it's not a security vulnerability so the

463
00:36:38,579 --> 00:36:42,240
politics doesn't seem to think it's a
critical security vulnerability

464
00:36:42,770 --> 00:36:48,560
the recommendation has changed the
device master key to be fair if you look

465
00:36:48,560 --> 00:36:50,720
which actually hardening guide

466
00:36:50,720 --> 00:36:54,560
they mentioned you should change it they
don't tell you the reasons but if you

467
00:36:54,560 --> 00:36:58,970
use this definitely changed device
master key because as far as i know this

468
00:36:58,970 --> 00:37:02,299
isn't changed in the last versions

469
00:37:02,300 --> 00:37:06,560
now these are kind of interesting and
fun box but like to end goal of this

470
00:37:06,560 --> 00:37:12,170
whole global protect stuff is that we
want to get honest educated and a second

471
00:37:12,170 --> 00:37:18,860
centac ated remote compromise after
device and and again most of the codes

472
00:37:18,860 --> 00:37:23,630
you can trigger is hidden behind login
function so if you don't have like any

473
00:37:23,630 --> 00:37:24,950
VPN login

474
00:37:24,950 --> 00:37:30,290
you don't have a lot of texture face to
play with but there is a really

475
00:37:30,290 --> 00:37:31,520
interesting function

476
00:37:31,520 --> 00:37:37,100
it's called escape string for xml and
they use this function to escape the

477
00:37:37,100 --> 00:37:42,230
user name before then standing in the
SIPC message so basically the whole IPC

478
00:37:42,230 --> 00:37:48,320
mission mechanism of politics part is it
works by xml encoded messages and if you

479
00:37:48,320 --> 00:37:51,440
have like any xml data encoded
characters in your username they have to

480
00:37:51,440 --> 00:37:56,810
be encoded or escaped before they are
pushed into this IPC message

481
00:37:56,810 --> 00:38:03,049
now the function itself does not perform
any length check so just escaped the

482
00:38:03,050 --> 00:38:07,460
user name when you put it in the
destination of this is a stack allocated

483
00:38:07,460 --> 00:38:13,040
bath of size two thousand thousand 24
bytes and which sounds like a terrible

484
00:38:13,040 --> 00:38:17,810
overflow it's not that easy because
before this function is called they

485
00:38:17,810 --> 00:38:24,259
execute a function which is called ssl
VPN feud filter check user and this make

486
00:38:24,260 --> 00:38:30,230
sure the user name is kind of ballot and
x divided checks that you use a name

487
00:38:30,230 --> 00:38:33,950
good length of two user name is
something under 250 characters or

488
00:38:33,950 --> 00:38:34,580
something

489
00:38:34,580 --> 00:38:38,990
so normal you are not able to to
overflow to escape string for it's a

490
00:38:38,990 --> 00:38:39,950
malfunction

491
00:38:39,950 --> 00:38:43,460
because to check function will protect
against that

492
00:38:43,460 --> 00:38:49,160
however if you look at the actual
control flow of this user check function

493
00:38:49,160 --> 00:38:52,910
you will see some interesting behavior

494
00:38:52,910 --> 00:38:54,649
so the idea is normally you

495
00:38:54,650 --> 00:38:59,390
have like a username using them can look
something user at copper domain so it

496
00:38:59,390 --> 00:39:03,830
can be split into two parts and for
every part to execute the bottom code

497
00:39:03,830 --> 00:39:09,620
they did you check if this string
contains any ascii character so any

498
00:39:09,620 --> 00:39:15,109
relatives characters if that's the case
and they jumped to a length check so

499
00:39:15,110 --> 00:39:16,190
this is the length chef

500
00:39:16,190 --> 00:39:20,630
we want to bypass if the length is over
250 bikes or something

501
00:39:20,630 --> 00:39:26,180
it's an invalid username and after that
they do a regular expression looking for

502
00:39:26,180 --> 00:39:27,799
certain special characters

503
00:39:27,800 --> 00:39:32,750
you also confuse so you only used to use
iphone Mary characters in your in your

504
00:39:32,750 --> 00:39:33,380
username

505
00:39:33,380 --> 00:39:37,880
if this red X check fails we jump into
invalid as well and then we have a

506
00:39:37,880 --> 00:39:38,660
problem

507
00:39:38,660 --> 00:39:44,779
now interesting use of course is this
way we have this function is valid utf-8

508
00:39:44,780 --> 00:39:49,370
which has kind of strange naming because
they are looking for as string that

509
00:39:49,370 --> 00:39:55,040
contains only valid utf-8 characters
that are not asking characters so

510
00:39:55,040 --> 00:39:59,029
basically they are looking for strengths
that are completely movie byte strings

511
00:39:59,030 --> 00:40:04,970
and if that's the case so if this
function returns true then the length

512
00:40:04,970 --> 00:40:06,560
check and UX check

513
00:40:06,560 --> 00:40:12,529
ask it which is interesting because it
turns out dead

514
00:40:12,530 --> 00:40:17,330
you can trigger this if you just lock
into your SLB p.m. if you use the name

515
00:40:17,330 --> 00:40:24,410
containing a lot of space so the pace
with bots on top and if you do this the

516
00:40:24,410 --> 00:40:29,480
box crashed again but in this case it's
really a stack-based buffer overflow so

517
00:40:29,480 --> 00:40:33,590
the question is if we mowed code
execution is as possible

518
00:40:33,590 --> 00:40:37,940
finally enough this attack is actually
easier for German heck us because they

519
00:40:37,940 --> 00:40:41,870
have two key already under keyboard so
they don't need to have any special

520
00:40:41,870 --> 00:40:44,480
equipment to to exploited

521
00:40:44,480 --> 00:40:50,660
so now I like this like the final main
part of the presentation how we get from

522
00:40:50,660 --> 00:40:56,120
this a box that we have two full remote
code execution against this device the

523
00:40:56,120 --> 00:41:00,500
idea at all right first it looks kind of
easy we have a destination buffer which

524
00:41:00,500 --> 00:41:06,050
is a fixed size stepfather to binary is
X is compiled without any state can

525
00:41:06,050 --> 00:41:09,260
please don't use that cookies so we can
just overflow

526
00:41:09,890 --> 00:41:15,470
we have an executable that isn't
position independent so the app web suis

527
00:41:15,470 --> 00:41:20,569
Webster of a binary itself has fixed
address is so it's not fully eyes de la

528
00:41:20,570 --> 00:41:26,000
only the libraries to heap and steak use
our cell problem with this binary is

529
00:41:26,000 --> 00:41:30,290
that it's extremely small so just
contains like a couple of functions

530
00:41:30,290 --> 00:41:34,940
because everything else is handed in
shared libraries that have full of lies

531
00:41:34,940 --> 00:41:35,960
a lot in a bird

532
00:41:35,960 --> 00:41:39,500
what makes us how about quite
interesting to explore it is the

533
00:41:39,500 --> 00:41:40,520
architecture

534
00:41:40,520 --> 00:41:46,430
it's the first time I ever played around
with her lips 64 system which have kind

535
00:41:46,430 --> 00:41:49,819
of an interesting properties regard to
this exploitation

536
00:41:49,820 --> 00:41:55,040
so first of all it's a big Indian system
so that means like the most significant

537
00:41:55,040 --> 00:41:59,570
bites are at the lowest address in
memory which means we can't do partial

538
00:41:59,570 --> 00:42:04,430
overworked so on x86 if it's a little
endian system we can override the least

539
00:42:04,430 --> 00:42:07,790
significant bites and do our salar by
passes that way

540
00:42:07,790 --> 00:42:13,580
that's not possible and made 64 normally
stuff like this is needed on web systems

541
00:42:13,580 --> 00:42:16,970
because normally you just do like a heap
spray and jump into your shellcode

542
00:42:16,970 --> 00:42:22,069
because normal group systems are most
loop systems i've played with don't

543
00:42:22,070 --> 00:42:27,260
support something like data execution
prevention or the NX bit so normal maps

544
00:42:27,260 --> 00:42:29,600
processors don't have to speech teacher

545
00:42:29,600 --> 00:42:36,259
however this cave you octagon process of
this part I to box supports that feature

546
00:42:36,260 --> 00:42:41,540
on my lips it's called execute inhibit
and it just means the heap is not

547
00:42:41,540 --> 00:42:47,779
executable so we can't store like direct
gel coat on the heap which means later

548
00:42:47,780 --> 00:42:53,780
on we actually have to perform rob a
full cup chain on a map 64 system which

549
00:42:53,780 --> 00:42:55,550
turns out to be quite a hazard

550
00:42:55,550 --> 00:43:01,640
now it is 64-bit part of this
architecture is also kind of strange

551
00:43:01,640 --> 00:43:06,980
so if you look at the process itself it
uses like all the pointers and address

552
00:43:06,980 --> 00:43:13,520
space itself are still 32 bit but if you
look at the registers you do registers

553
00:43:13,520 --> 00:43:18,160
are double the size so now you have a
witch heart address register that

554
00:43:18,160 --> 00:43:23,109
64 bits white this combination is kind
of strange

555
00:43:23,109 --> 00:43:27,880
I'm honestly not too sure why that's the
case but as it turns out this makes code

556
00:43:27,880 --> 00:43:32,950
execution lot harder so exploiting this
we have number of problems

557
00:43:33,640 --> 00:43:37,118
the first problem is that our user name
does not

558
00:43:37,119 --> 00:43:41,380
it's not allowed to contain any asking
characters so every character in our

559
00:43:41,380 --> 00:43:46,089
username has to be some kind of movie by
duty of our age encoding which makes

560
00:43:46,089 --> 00:43:49,538
every attack after that more or less
impossible

561
00:43:49,539 --> 00:43:54,970
luckily we can buy pastors by splitting
our username into a user and the main

562
00:43:54,970 --> 00:44:02,410
part to use a part is this utf-8 string
of arbitrary length and our domain part

563
00:44:02,410 --> 00:44:08,109
is an alphanumeric ask you string that
shorter than 250 bites

564
00:44:08,109 --> 00:44:12,069
so we still don't control with this this
domain part completely we can't use any

565
00:44:12,069 --> 00:44:17,740
special characters but we at least we
can use all the iphone America asking

566
00:44:17,740 --> 00:44:20,890
range which is enough as we will see
later on

567
00:44:20,890 --> 00:44:25,750
normal you know stack based buffer
overflow you would just over to return

568
00:44:25,750 --> 00:44:29,079
to us as it turns out this is not
possible

569
00:44:29,079 --> 00:44:35,140
50s bug because to return address
registers 64 bit long and because are

570
00:44:35,140 --> 00:44:39,879
developed addresses in this process are
in district 2 bit address space

571
00:44:39,880 --> 00:44:44,140
you always have to override up a half of
to return to us with zeros

572
00:44:44,140 --> 00:44:49,390
we can't override this with zeros
because 0 is not a valid alphanumeric

573
00:44:49,390 --> 00:44:53,859
character and the context nor the upper
half because these registers are what

574
00:44:53,859 --> 00:44:58,240
the system is big endian so this means
it's impossible to override this return

575
00:44:58,240 --> 00:44:58,808
trip

576
00:44:58,809 --> 00:45:06,130
luckily we have something that we can
override and this is a pointer to a PHP

577
00:45:06,130 --> 00:45:07,119
context

578
00:45:07,119 --> 00:45:12,339
so the PHP context is like a global data
structure or main data structure used by

579
00:45:12,339 --> 00:45:19,089
the PHP interpreter and this is start on
the stack and available function and and

580
00:45:19,089 --> 00:45:25,328
it's used the function returns when PHP
body white is caught this context

581
00:45:25,329 --> 00:45:30,460
contains pointers to pointers to
function . us so we have like double in

582
00:45:30,460 --> 00:45:31,340
direction we

583
00:45:31,340 --> 00:45:36,320
- to bypass and but we can / why dad
with an arbitrary value

584
00:45:37,490 --> 00:45:41,810
the problem with this is that we can't
simply . this context . to any address

585
00:45:41,810 --> 00:45:42,860
we know

586
00:45:42,860 --> 00:45:45,980
instead it needs to be an iphone
American twist

587
00:45:45,980 --> 00:45:51,920
so the only solution to too actually .
the context . into a value we control is

588
00:45:51,920 --> 00:45:57,200
performing your hips play so we can
allocate a noun a dress that's - America

589
00:45:57,200 --> 00:46:04,879
and then . in that location and so the
hips bear works by starring up to 1 so

590
00:46:04,880 --> 00:46:09,380
that whips we has an interesting feature
so this is the HTTP server and has an

591
00:46:09,380 --> 00:46:11,840
interesting feature you can use for your
space

592
00:46:11,840 --> 00:46:15,920
you just start up to 1 megabyte of
arbitrary content in the socket

593
00:46:15,920 --> 00:46:21,590
connection and until you sound like this
double new line that normally would

594
00:46:21,590 --> 00:46:25,820
close like the head us the web server
doesn't do anything with this content so

595
00:46:25,820 --> 00:46:30,830
just start on the heap and nothing else
happens and the idea how to exploit this

596
00:46:30,830 --> 00:46:36,740
we just opened up many connections sent
payload keep the connections alive

597
00:46:36,740 --> 00:46:42,709
so it doesn't like free the heat memory
and do this like a lot of times and as

598
00:46:42,710 --> 00:46:48,140
it turns out this works in a way that we
reliably allocate our payload at the

599
00:46:48,140 --> 00:46:55,160
following address so and turns out this
is actually a valid asking iphone

600
00:46:55,160 --> 00:47:00,830
numeric string when we convert it so
what do we store inside the seeps where

601
00:47:00,830 --> 00:47:02,990
we can store arbitrary values inside
there

602
00:47:02,990 --> 00:47:08,390
so I'm on the left hand side this is to
disassembly for the PHP body right

603
00:47:08,390 --> 00:47:16,190
function and basically what happens is
it loads a function pointer from the

604
00:47:16,190 --> 00:47:21,740
address that start into a to register
day to register contains the value of

605
00:47:21,740 --> 00:47:27,919
the location of our hips / then it loads
of value from the ACE we register this

606
00:47:27,920 --> 00:47:32,780
just points like in the next offset of
our hips pray then we control it would

607
00:47:32,780 --> 00:47:38,180
be one register which again points into
the next location of our hips bear and

608
00:47:38,180 --> 00:47:42,440
then we see here's a here's the dynamic
jump so this is like to find a function

609
00:47:42,440 --> 00:47:43,520
. into T

610
00:47:43,520 --> 00:47:49,460
nine register and we put the address of
our Rob gadget into the night

611
00:47:49,460 --> 00:47:55,040
t9 register to get final code execution
and then we can jump interruption

612
00:47:55,040 --> 00:48:02,600
now the problem for full code execution
is our hips praise not executable so we

613
00:48:02,600 --> 00:48:08,870
need to rob train drops chains on mips64
kind of terrible because mips wants to

614
00:48:08,870 --> 00:48:12,740
have a light instructions so every
instruction needs to be aligned 24 bit

615
00:48:12,740 --> 00:48:18,290
area and so you don't see any in
accidental get so no money on x86 to

616
00:48:18,290 --> 00:48:22,009
just jump into the middle of an
instruction and you can be arbitrary

617
00:48:22,010 --> 00:48:28,430
options with that at and it gets more
early because the only object that had a

618
00:48:28,430 --> 00:48:33,259
constant stress is this ad website web
server which only contains ten functions

619
00:48:33,260 --> 00:48:36,920
so most of them are simply rapper
functions that directly call in to the

620
00:48:36,920 --> 00:48:40,160
shared library and all of them are
randomized again

621
00:48:40,160 --> 00:48:44,750
so we didn't find a complete Rob chain
to get arbitrary code execution just by

622
00:48:44,750 --> 00:48:49,760
using a rope chain but we just covered
the rope chain that gives us the

623
00:48:49,760 --> 00:48:57,410
possibility to create arbitrary fights
and so the idea is because we have

624
00:48:57,410 --> 00:49:03,230
control over there is one register and
as for register we can load so this is

625
00:49:03,230 --> 00:49:10,370
our first captured and we can load a new
value into the t9 register and we can

626
00:49:10,370 --> 00:49:16,700
also load and completely control value
of our choice into a one register and a

627
00:49:16,700 --> 00:49:22,490
one register is the second argument to
the m8 start blogging function so we

628
00:49:22,490 --> 00:49:26,959
start address of the ma start logging
function in our t9 register

629
00:49:26,960 --> 00:49:31,670
jump to it and control the second
argument and the function just creates a

630
00:49:31,670 --> 00:49:36,470
file and to pass start in the second
argument now to get a code execution of

631
00:49:36,470 --> 00:49:41,720
this you need another back in this case
we exploited a box that also contains a

632
00:49:41,720 --> 00:49:46,399
local privilege escalation because it's
a cron job that just watches for certain

633
00:49:46,400 --> 00:49:51,320
directory and compress files that
discuss in there

634
00:49:51,320 --> 00:49:54,710
it's implemented as a best group that
contains a nice command injection

635
00:49:55,370 --> 00:49:56,520
so we have

636
00:49:56,520 --> 00:50:00,600
we create an arbitrary fire wait for the
cron job to execute and then we get a

637
00:50:00,600 --> 00:50:02,069
root out of it

638
00:50:02,070 --> 00:50:13,320
I'm already over time to to my late
start so i probably just yeah I just

639
00:50:13,320 --> 00:50:19,530
showed the video off to explore
otherwise and nobody of you gets to get

640
00:50:19,530 --> 00:50:20,940
any coffee

641
00:50:20,940 --> 00:50:28,500
so again i'm having a rebirth connection
show opened on the right hand side and

642
00:50:28,500 --> 00:50:29,940
on the left hand side

643
00:50:29,940 --> 00:50:37,380
I'm starting my exploit what happens at
first it's basically just that we send

644
00:50:37,380 --> 00:50:37,800
them

645
00:50:37,800 --> 00:50:41,490
so this is to keep spray we are opening
a lot of connections sending data to the

646
00:50:41,490 --> 00:50:47,850
web server to start our heat or our data
at rest of our choice we open a lot of

647
00:50:47,850 --> 00:50:51,750
connections to make sure this is kind of
reliable so it's not a hundred percent

648
00:50:51,750 --> 00:50:55,860
reliable it's like fifty percent
reliable which is not too terrible

649
00:50:55,860 --> 00:51:01,230
because and the web server will just
restart again so you have infinite rise

650
00:51:01,230 --> 00:51:06,120
basically but of course and crash the
VPN which might not be a good idea and

651
00:51:06,120 --> 00:51:12,359
and it worked fresh because after all
chains X and executed the web server

652
00:51:12,360 --> 00:51:17,940
just crashed but then we only have to
wait until the cron job triggers in this

653
00:51:17,940 --> 00:51:21,930
case i'm waiting for like a minute to to
wait for the reverse connection so when

654
00:51:21,930 --> 00:51:25,890
are cronjob triggers it will execute the
command injection and we will get a

655
00:51:25,890 --> 00:51:28,890
connection back to our net

656
00:51:29,730 --> 00:51:33,900
normally when i do in life and get kind
of exciting if to exploit works because

657
00:51:33,900 --> 00:51:37,080
this is the movie you can probably
imagine that it worked

658
00:51:37,080 --> 00:51:41,940
yeah you can see over the right hand
side we get in the connection again and

659
00:51:41,940 --> 00:51:46,170
if you use like the you name a we see we
on the part I to devise and in this case

660
00:51:46,170 --> 00:51:49,170
it's a full remote route compromise

661
00:51:49,170 --> 00:51:53,100
so this is like the worst back you can
happen

662
00:51:53,100 --> 00:51:56,100
half in such functionality

663
00:51:57,240 --> 00:52:00,240
thanks

664
00:52:02,550 --> 00:52:06,660
so this actually it with the with the
interesting or the technical content of

665
00:52:06,660 --> 00:52:09,899
the presentation i have some
recommendations so if you actually use a

666
00:52:09,900 --> 00:52:12,300
part of the device what can you do about
it

667
00:52:12,300 --> 00:52:15,810
so all of these box where we parted to
the vendor that patch did so on that

668
00:52:15,810 --> 00:52:18,119
kind of side you're pretty safe

669
00:52:18,119 --> 00:52:22,260
however we still have some
recommendations to make these devices

670
00:52:22,260 --> 00:52:24,300
more secure in your moment

671
00:52:24,300 --> 00:52:28,260
and of course isolated management
interfaces they are very complex very

672
00:52:28,260 --> 00:52:33,720
hard to secure completely if you use
user ID don't use it for security

673
00:52:33,720 --> 00:52:34,980
critical filtering

674
00:52:34,980 --> 00:52:38,700
so you should not protect your
management interface using user ID

675
00:52:38,700 --> 00:52:43,589
because if you can have availability and
use ID like to climb dropping stuff you

676
00:52:43,590 --> 00:52:46,770
can again access management interface
and owned box

677
00:52:46,770 --> 00:52:51,869
so in my opinion it's ok for doing like
business-related filtering so having

678
00:52:51,869 --> 00:52:56,369
different departments that shouldn't
access certain services but don't use

679
00:52:56,369 --> 00:53:00,540
like you're hardcore technical
administrative filtering and implement

680
00:53:00,540 --> 00:53:02,070
that using user ID

681
00:53:02,070 --> 00:53:06,480
you should definitely disabled klein
probing isolate to use ideation

682
00:53:06,480 --> 00:53:11,100
so you deep lines can connect it change
the master password otherwise everyone

683
00:53:11,100 --> 00:53:17,910
can decrypt your cookies and of course
keep the system updated in summary if

684
00:53:17,910 --> 00:53:21,089
you have more features in your device
you have a bigger tech surface which

685
00:53:21,090 --> 00:53:24,359
means more vulnerabilities this will
happen for every vendor that implements

686
00:53:24,359 --> 00:53:25,830
such functionality

687
00:53:25,830 --> 00:53:30,810
it's just more code more code will have
more box and handling and responds by

688
00:53:30,810 --> 00:53:32,549
paula was very professional

689
00:53:32,550 --> 00:53:37,260
so we are really happy with them and we
also sing even though the

690
00:53:37,260 --> 00:53:41,970
vulnerabilities are not that create the
response and how to handle - so

691
00:53:41,970 --> 00:53:46,560
disclosure process shows the right
mindset and therefore we are quite

692
00:53:46,560 --> 00:53:51,900
positive about the future ProQuest with
these devices like from my personal

693
00:53:51,900 --> 00:53:56,310
perspective i find the device itself
quite cool as i said before if you have

694
00:53:56,310 --> 00:53:59,520
more features and you use them you will
have more tech surface

695
00:53:59,520 --> 00:54:04,080
so that's it from my sight thanks for
your attention and I'm not sure if you

696
00:54:04,080 --> 00:54:06,288
have time for questions but

697
00:54:06,289 --> 00:54:09,079
if not feel free to just come to me
after

