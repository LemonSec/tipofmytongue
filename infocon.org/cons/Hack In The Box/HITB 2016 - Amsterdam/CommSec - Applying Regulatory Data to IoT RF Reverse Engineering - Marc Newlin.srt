1
00:00:15,870 --> 00:00:17,750
thank you and

2
00:00:17,750 --> 00:00:22,190
so my name is McMullin and i'm going to
talk today about the processes that I

3
00:00:22,190 --> 00:00:25,790
use when I reverse engineer wireless
protocols and devices

4
00:00:26,869 --> 00:00:33,170
I'm now on the security research team at
bastille networks that involves doing

5
00:00:33,170 --> 00:00:38,900
protocol decoders reverse engineering
unknown protocols and implementing

6
00:00:38,900 --> 00:00:42,440
software-defined radio decoders for them
as well as doing vulnerability research

7
00:00:42,440 --> 00:00:47,449
I've taken kind of an unusual path to
get into the security space so i'll

8
00:00:47,449 --> 00:00:50,629
provide a little bit of background back
in 2011

9
00:00:51,290 --> 00:00:55,940
I competed in the DARPA shredder
challenge which was a competition to

10
00:00:55,940 --> 00:01:00,019
figure out how to reassemble shredded
documents and until that time that was

11
00:01:00,020 --> 00:01:05,509
the most complicated difficult project I
worked on but I discovered that i'm kind

12
00:01:05,509 --> 00:01:08,119
of a fiend for these really hard
problems

13
00:01:08,119 --> 00:01:12,560
so a couple years later sharp announced
the spectrum challenge which is a

14
00:01:12,560 --> 00:01:16,130
software-defined radio hacking
competition and I didn't know anything

15
00:01:16,130 --> 00:01:20,630
about SDR at the time but I signed up
after my positive experience with the

16
00:01:20,630 --> 00:01:21,649
shredder challenge

17
00:01:21,649 --> 00:01:26,420
I ended up doing well i'm bad and
through that competition i thought my

18
00:01:26,420 --> 00:01:31,159
way to best deal where I am now and then
about 9 months ago I joined our

19
00:01:31,159 --> 00:01:33,320
vulnerability research team

20
00:01:33,320 --> 00:01:37,610
my first project on that team doing a
threat research turned into a mouse

21
00:01:37,610 --> 00:01:41,869
track which is a collection of keystroke
injection vulnerabilities I found and

22
00:01:41,869 --> 00:01:46,970
non bluetooth wireless mice and so the
context which I approach this is kind of

23
00:01:46,970 --> 00:01:51,530
coming in from a relative outsider to
the security space and figuring out you

24
00:01:51,530 --> 00:01:56,659
know how most efficiently can i tackle
these problems so we're going to start

25
00:01:56,659 --> 00:01:59,450
with a bit of a primer on radio stuff

26
00:01:59,450 --> 00:02:03,350
this is from you know my contacts as
somebody without the fundamental

27
00:02:03,350 --> 00:02:08,209
education in that space then i'm going
to discuss how we can use open source

28
00:02:08,209 --> 00:02:12,620
intelligence to increase the speed of
the reverse engineering process that

29
00:02:12,620 --> 00:02:16,790
will be you know what information can we
get to take work away that we otherwise

30
00:02:16,790 --> 00:02:22,310
would have to do and I'm going to walk
through the process of reverse

31
00:02:22,310 --> 00:02:27,950
engineering the specific radio shack 2.4
gigahertz wireless mouse and then

32
00:02:27,950 --> 00:02:31,079
finally I'll do a demo of a mouse track
attack which was

33
00:02:31,080 --> 00:02:34,080
the result of these methodologies

34
00:02:35,520 --> 00:02:41,850
so let's talk about radios so on high
level we have hardware and software

35
00:02:41,850 --> 00:02:46,410
defined radio shows the hardware to find
videos that would be your your Wi-Fi

36
00:02:46,410 --> 00:02:47,820
dongle is you are you know

37
00:02:47,820 --> 00:02:52,320
bluetooth on goals your wireless mouse
on goal the cellular modem in your phone

38
00:02:52,320 --> 00:02:56,250
and it's going to be anything that's a
purpose-built to do one thing really

39
00:02:56,250 --> 00:03:01,170
really well but the problem with
hardware to find radio is you can't do a

40
00:03:01,170 --> 00:03:04,019
lot of research things with it because
it's you know does one thing really

41
00:03:04,020 --> 00:03:07,260
really well but if you don't know what
that thing is that you need to do

42
00:03:07,800 --> 00:03:12,900
it's not going to be very useful so
software-defined radio allows you to

43
00:03:12,900 --> 00:03:14,880
have a high degree of reconfigure
ability

44
00:03:14,880 --> 00:03:18,690
so you might have a wide range of
frequencies you can tune to vary in

45
00:03:18,690 --> 00:03:22,770
bandwidth but the drawback is that it
doesn't know how to do any one thing

46
00:03:23,340 --> 00:03:27,570
so the SDR will just send this raw radio
data to your computer

47
00:03:27,570 --> 00:03:32,519
I'm or to an fpga and then you have to
implement the functionality that makes

48
00:03:32,520 --> 00:03:37,470
it a you know Wi-Fi radio or a bluetooth
radio or whatever but very useful tool

49
00:03:37,470 --> 00:03:40,380
for doing this kind of reverse
engineering because you can reconfigure

50
00:03:40,380 --> 00:03:44,070
it on the fly as you're figuring out
what it is that you're looking at

51
00:03:44,070 --> 00:03:53,010
so modulation is kind of a fundamental
concept of how you modify radio carrier

52
00:03:53,010 --> 00:03:55,049
wave to encode your data

53
00:03:55,050 --> 00:03:59,700
so on this picture here it can't see it
very well somewhat blurry but this is a

54
00:03:59,700 --> 00:04:07,679
FSK modulated signal from the hotel room
and it goes left to indicate a bit 0 and

55
00:04:07,680 --> 00:04:12,239
it goes right to indicate a bit 1 and
this is a very simple type of modulation

56
00:04:12,239 --> 00:04:16,079
but it's very common in these low-power
wireless devices because it's a

57
00:04:16,079 --> 00:04:19,349
low-complexity receiver to implement and
therefore you don't need a lot of

58
00:04:19,350 --> 00:04:23,310
processing power and you don't need a
lot of battery to implement the receiver

59
00:04:23,310 --> 00:04:27,930
another common low-power protocol or
modulation scheme is oh ok which is

60
00:04:27,930 --> 00:04:32,040
on-off keying this is also very
straightforward when the transmitter is

61
00:04:32,040 --> 00:04:32,820
on

62
00:04:32,820 --> 00:04:37,200
it's a bit one transmitters off a bit 0
also common in these low power devices

63
00:04:37,200 --> 00:04:42,210
because it's low complexity and then you
have some other modulation schemes down

64
00:04:42,210 --> 00:04:43,320
there you have

65
00:04:43,320 --> 00:04:49,830
Graham an ofdm which are used in 802 11
as is DSS you have frequency-hopping

66
00:04:49,830 --> 00:04:54,060
spread spectrum which is used in
bluetooth but the the gist of this is

67
00:04:54,060 --> 00:04:57,570
that you don't need to really understand
the fundamentals of how these modulation

68
00:04:57,570 --> 00:05:02,820
schemes work because a new radio you can
simply drag and drop blocks which have

69
00:05:02,820 --> 00:05:06,659
all that detracted away and as long as
you know what modulation scheme you need

70
00:05:06,660 --> 00:05:13,440
you can turn the radio waves into bits
so that is the concept of symbols and

71
00:05:13,440 --> 00:05:14,850
samples and sampling

72
00:05:14,850 --> 00:05:21,390
so a a symbol is you know one duration
and time that represents one or more

73
00:05:21,390 --> 00:05:26,969
bits so for frequency 15 and on-off
keying each symbol is one bit because

74
00:05:26,970 --> 00:05:30,990
you're either on or off or you're over
here to the right or to the left and

75
00:05:30,990 --> 00:05:35,250
frequency but with the higher-order
modulations you can have you know two

76
00:05:35,250 --> 00:05:39,270
three four five bits per symbol but
typically these low power devices have

77
00:05:39,270 --> 00:05:43,740
modulation schemes with one bit per
symbol because again it requires you

78
00:05:43,740 --> 00:05:46,740
know a poor quality receiver and easier
to implement

79
00:05:48,630 --> 00:05:54,210
another thing to remember is that you
need to sample at twice your symbol rate

80
00:05:54,210 --> 00:06:00,150
so if you have a frequency shift keying
modulated signal and each bit is going

81
00:06:00,150 --> 00:06:05,159
to be one simple and because of math
which I don't understand you need to

82
00:06:05,160 --> 00:06:06,360
sample it twice that

83
00:06:06,360 --> 00:06:11,340
so you have a 1 megabit per second
frequency shift keying signal

84
00:06:11,340 --> 00:06:16,590
you need to sample at to make a samples
per second and just knowing that you

85
00:06:16,590 --> 00:06:20,549
need a sample at two samples per symbol
is sufficient to use your radio to

86
00:06:20,550 --> 00:06:25,770
demodulate this data and we have
frequencies and frequency hopping

87
00:06:26,640 --> 00:06:30,390
you know you can see in this context is
just a specific channel device operates

88
00:06:30,390 --> 00:06:34,860
on a device might use you know one or
more channels it might hop between these

89
00:06:34,860 --> 00:06:39,000
channels bluetooth for example will have
deterministic frequency hopping between

90
00:06:39,000 --> 00:06:45,150
79 channels you'll have something called
frequency agility where a transceiver

91
00:06:45,150 --> 00:06:49,049
will select the channel that has at
least interference but a lot of devices

92
00:06:49,050 --> 00:06:52,050
we'll just camp on one channel and stay
there

93
00:06:52,889 --> 00:06:56,849
then you have travel coding this is
adding redundancy to the data you

94
00:06:56,849 --> 00:07:01,830
transmit and this can be either you know
adding additional bits adding parity

95
00:07:01,830 --> 00:07:07,919
bits you have a RQ where the receiver if
it gets a packet out of order

96
00:07:07,919 --> 00:07:11,998
it will ask the transmitter to send it
again and these are just mechanisms to

97
00:07:11,999 --> 00:07:16,680
make sure that the data gets across one
thing to note from a reverse engineering

98
00:07:16,680 --> 00:07:20,939
standpoint the channel coding that if
you're using you know a convolutional

99
00:07:20,939 --> 00:07:25,289
code for example the bits transmitted
over the air will not look like the bits

100
00:07:25,289 --> 00:07:29,938
that you're actually transmitting not
like the original payload and so if

101
00:07:29,939 --> 00:07:33,840
you're looking for the original payload
and this demodulated data you may not

102
00:07:33,840 --> 00:07:39,448
see what you're expecting it channel
coding is used so now we'll talk about

103
00:07:39,449 --> 00:07:45,990
the process that i go through to reverse
engineer protocol and we have maps of

104
00:07:45,990 --> 00:07:50,669
this is where where everything started
with mouse track i was looking at a

105
00:07:50,669 --> 00:07:54,628
large number of devices in a relatively
short period of time and so is

106
00:07:54,629 --> 00:07:59,400
approximately 50 keyboards and mice for
different families of transceivers and

107
00:07:59,400 --> 00:08:04,469
around 20 different protocols and and
payload format papers because it was

108
00:08:04,469 --> 00:08:09,719
such a wide range of types of devices it
necessitated being very efficient about

109
00:08:09,719 --> 00:08:13,949
going to the process in order to not
waste time and so as a result of going

110
00:08:13,949 --> 00:08:15,599
through all these devices

111
00:08:15,599 --> 00:08:21,029
I've developed a fairly efficient way to
do this so there are a number of things

112
00:08:21,029 --> 00:08:23,909
that were trying to get out when we
first enter your device

113
00:08:23,909 --> 00:08:27,330
I like to think that there's both the
business and personal case

114
00:08:27,330 --> 00:08:31,529
so from the business case you know we
want to see can you identify this device

115
00:08:32,490 --> 00:08:36,599
what type of device is it is it you know
big to be a normal behavior or aberrant

116
00:08:36,599 --> 00:08:39,240
behavior if there's an attack happening

117
00:08:39,240 --> 00:08:42,990
can we recognize that then for the
personal case it's just very satisfying

118
00:08:42,990 --> 00:08:46,470
to be able to reverse-engineer these
things and like it's no one you want to

119
00:08:46,470 --> 00:08:49,649
crack it and you understand how
everything comes together it's it's

120
00:08:49,649 --> 00:08:53,459
sprayed and so there's the kind of a
combination of personal and business

121
00:08:53,459 --> 00:08:56,760
personal and business motivations that
go into this

122
00:08:56,760 --> 00:09:02,760
so then we have kind of three cases of
devices that we want to reverse engineer

123
00:09:02,760 --> 00:09:04,500
the top

124
00:09:04,500 --> 00:09:05,850
you know fully standardized

125
00:09:05,850 --> 00:09:08,670
that's not really doing any reverse
engineering because everything is

126
00:09:08,670 --> 00:09:12,750
defined so the physical layer so the
modulation the frequency is a channel

127
00:09:12,750 --> 00:09:18,089
hopping all that exists in aspect that
you can go read not to say that certain

128
00:09:18,089 --> 00:09:22,560
devices will not implemented correctly
but the idea there is that everything

129
00:09:22,560 --> 00:09:25,739
you need to know is available for you
already

130
00:09:25,740 --> 00:09:30,630
now we have partially proprietary this
would be cases where you have you know

131
00:09:30,630 --> 00:09:34,560
maybe a transceiver which is documented
so you might know what the physical

132
00:09:34,560 --> 00:09:37,050
layer is so that the channels and
modulation

133
00:09:37,050 --> 00:09:40,469
but you may not know what payloads are
being transmitted and then you have

134
00:09:40,470 --> 00:09:43,980
fully proprietary devices where you know
nothing about it

135
00:09:43,980 --> 00:09:47,819
so you don't know what transceiver uses
you don't know what protocol uses and

136
00:09:47,819 --> 00:09:51,870
you have to figure all of that out and
the case with this radio shack mouse

137
00:09:51,870 --> 00:09:56,850
it's fully proprietary and that there
was no information available not no

138
00:09:56,850 --> 00:10:00,209
documented information available about
this to start with

139
00:10:00,209 --> 00:10:03,420
so with this mouse

140
00:10:04,410 --> 00:10:07,920
we really need to do some open source
intelligence gathering and find out what

141
00:10:07,920 --> 00:10:11,040
information is available there to speed
up the process because it was starting

142
00:10:11,040 --> 00:10:11,699
blind

143
00:10:11,699 --> 00:10:21,329
it's a pain in the ass so we have the
five stages here we're going to start by

144
00:10:21,329 --> 00:10:23,310
doing open source intelligence

145
00:10:23,310 --> 00:10:26,518
this is going to be using the internet
to find out what we can about this

146
00:10:26,519 --> 00:10:29,250
device and how it operates

147
00:10:29,250 --> 00:10:32,759
we're then going to verify with the
spectrum analyzer that the information

148
00:10:32,759 --> 00:10:36,959
we got on the open source intelligence
is correct this is going to be you know

149
00:10:36,959 --> 00:10:39,959
visually looking at it and saying hey
this is everything up

150
00:10:39,959 --> 00:10:43,920
you know make sure we're on the right
track so we don't waste more time then

151
00:10:43,920 --> 00:10:48,870
arch the bites want to point out our is
what we internally call you know radio

152
00:10:48,870 --> 00:10:53,699
wave source kind of a universal word but
in this context arts debates means

153
00:10:53,699 --> 00:10:57,569
taking the radio waves emitted by this
device in this case you know mouse click

154
00:10:57,569 --> 00:11:01,860
movement data and turning it into bites
on disk that we can then parse and

155
00:11:01,860 --> 00:11:03,930
operate on

156
00:11:03,930 --> 00:11:08,099
once we have those bites on disk we then
need to figure out what the format is at

157
00:11:08,100 --> 00:11:12,209
the packets that were sent over the air
and then we need to figure out what

158
00:11:12,209 --> 00:11:16,199
payloads are in those packets and what
is the protocol and behavior of the

159
00:11:16,199 --> 00:11:17,769
device

160
00:11:17,769 --> 00:11:22,389
so first we'll look at the open source
intelligence process

161
00:11:22,389 --> 00:11:27,699
there are few good resources for this
the FCC in the United States has a

162
00:11:27,699 --> 00:11:33,819
wealth of information and there are also
in a product specifications you can get

163
00:11:33,819 --> 00:11:35,229
for certain transceivers

164
00:11:35,230 --> 00:11:39,279
so you might have a case where a
particular device uses a transceiver how

165
00:11:39,279 --> 00:11:40,899
they use it is proprietary

166
00:11:40,899 --> 00:11:44,199
but the underlying physical layer
communication of the transceiver is

167
00:11:44,199 --> 00:11:47,410
documented and so in that case it's
useful to find that spec sheet figure

168
00:11:47,410 --> 00:11:51,249
out what configurations they might be
using you can save time then bye

169
00:11:51,249 --> 00:11:55,089
you know narrowing down what you're
looking for and then the google is

170
00:11:55,089 --> 00:11:56,410
fantastic it's I mean

171
00:11:56,410 --> 00:12:00,999
enough said so if everything goes
perfectly

172
00:12:01,779 --> 00:12:05,559
we really can learn all the information
we need to know about how this device

173
00:12:05,559 --> 00:12:06,969
operates

174
00:12:06,970 --> 00:12:10,929
that might be all the physical layer
properties and also might be the packet

175
00:12:10,929 --> 00:12:13,809
formats and protocols behavior depending
on the device

176
00:12:13,809 --> 00:12:17,559
but you know at the bare minimum we're
hoping to find at least you know what

177
00:12:17,559 --> 00:12:18,939
frequencies to operate

178
00:12:18,939 --> 00:12:23,379
what modulation doesn't use and what
channel which does use so we can turn

179
00:12:23,379 --> 00:12:25,389
those radio waves in two bites

180
00:12:25,389 --> 00:12:30,160
so in order to sell the device in the US

181
00:12:30,160 --> 00:12:34,059
you have to go through the SEC
certification process so it starts when

182
00:12:34,059 --> 00:12:38,649
you make your device you then send it
off to an accredited test lab the test

183
00:12:38,649 --> 00:12:42,699
lab will operate your device in an
environment and it will basically see

184
00:12:42,699 --> 00:12:47,679
what the RF behavior is that might be
things like you know what channels that

185
00:12:47,679 --> 00:12:51,730
run on what's the duty cycle what power
is transmitted and then the test lab

186
00:12:51,730 --> 00:12:56,379
generates a test report that then gets
sent to a telecommunication

187
00:12:56,379 --> 00:12:59,860
certification body which says you know
did this test lab do everything

188
00:12:59,860 --> 00:13:00,699
correctly

189
00:13:00,699 --> 00:13:05,169
did they follow the procedures and so
forth that then gets sent to the FCC if

190
00:13:05,169 --> 00:13:10,600
everything passes they get an FCC ID and
all these documents get posted online at

191
00:13:10,600 --> 00:13:14,589
the FCC website makes available and we
can use those as a great source of

192
00:13:14,589 --> 00:13:19,029
information that one thing to note is
that many devices will have one

193
00:13:19,029 --> 00:13:23,619
certification for all of the regulatory
bodies so have an FCC ID

194
00:13:24,129 --> 00:13:29,230
you know in icy idms ipid and so forth
and so for devices sold outside of the

195
00:13:29,230 --> 00:13:31,030
US you can usually use

196
00:13:31,030 --> 00:13:38,410
FCC if it's gone through the same test
procedure so FCC exhibits are what they

197
00:13:38,410 --> 00:13:43,390
call the documents that are posted when
a device is certified and you have a

198
00:13:43,390 --> 00:13:46,930
number of different types of documents
and you can get them by looking at the

199
00:13:46,930 --> 00:13:51,459
FCC ID on the device plug it in at the
URL and they get a list like this

200
00:13:51,460 --> 00:13:53,800
usually a bunch of PDF documents

201
00:13:53,800 --> 00:14:00,490
so there are a handful of exhibit types
that are relevant to the reverse

202
00:14:00,490 --> 00:14:04,030
engineering process a test reports are
the absolute best

203
00:14:04,840 --> 00:14:10,060
this is where the art emissions are
evaluated part of the difficulties that

204
00:14:10,060 --> 00:14:16,150
you have a wide variety of formats of
test report so you have you know 2500

205
00:14:16,150 --> 00:14:21,579
test labs each one has different formats
and varying degrees of information and

206
00:14:21,580 --> 00:14:24,790
there's no guarantee that any test
report will have any specific

207
00:14:24,790 --> 00:14:29,050
information that you want but it's
usually a pretty useful source internal

208
00:14:29,050 --> 00:14:30,790
photos is fantastic

209
00:14:30,790 --> 00:14:34,060
you know they open up the device take
photos of it so you can look there and

210
00:14:34,060 --> 00:14:38,530
look for no specific model numbers on
the RFI seas and that sort of thing

211
00:14:38,530 --> 00:14:42,730
user manuals are interesting because you
have you know a lot of them are our

212
00:14:42,730 --> 00:14:46,660
consumer facing nothing terribly useful
but some of them will have you know deep

213
00:14:46,660 --> 00:14:50,740
technical information for whatever
reason schematics

214
00:14:50,740 --> 00:14:56,320
usually these are kept confidential so
when you submit a device to the FCC you

215
00:14:56,320 --> 00:15:00,040
can request that certain exhibits be
kept confidential either temporarily or

216
00:15:00,040 --> 00:15:07,329
definitely some labs and pcbs well for
whatever reason leave their schematics

217
00:15:07,330 --> 00:15:11,950
open in that case you can often get rfic
information and so forth and then

218
00:15:11,950 --> 00:15:16,690
operational descriptions again usually
confidential but usually have some good

219
00:15:16,690 --> 00:15:21,820
deep technical information so the test
reports

220
00:15:21,820 --> 00:15:25,960
this is looking at you know that CCS
certain regulations for how a device can

221
00:15:25,960 --> 00:15:30,940
operate this is evaluating for your
transmit power bandwidth frequencies and

222
00:15:30,940 --> 00:15:36,130
duty cycle but often contains modulation
types frequency of information and its

223
00:15:36,130 --> 00:15:39,130
interests and it varies between the labs

224
00:15:41,310 --> 00:15:44,699
so this is an example of the test report
from Barrow veritas

225
00:15:44,700 --> 00:15:48,690
they're probably the largest test lab
and they are nice because they have a

226
00:15:48,690 --> 00:15:50,430
good amount of structured data

227
00:15:50,430 --> 00:15:54,270
so in this case is from a logitech mouse
and we can see here you know that it

228
00:15:54,270 --> 00:15:59,490
uses gfs k modulation but operates in
this frequency range tells us how many

229
00:15:59,490 --> 00:16:00,300
channels

230
00:16:00,300 --> 00:16:03,240
elsewhere the report tells us the
specific channels that are operates at

231
00:16:03,240 --> 00:16:07,920
this is kind of the the best case
scenario for what you can get from test

232
00:16:07,920 --> 00:16:12,060
report enforce the most will have less
information in this and also there's

233
00:16:12,060 --> 00:16:15,810
that gives us there the transfer rates
we know that it's a to make a bit data

234
00:16:15,810 --> 00:16:22,529
rate this is from the test report from
this radio shack mouse here it's do

235
00:16:22,529 --> 00:16:26,580
clearly not as structured of data but we
can see you know

236
00:16:26,580 --> 00:16:29,850
here we see Stephanie six channels 1
makers channel spacing

237
00:16:29,850 --> 00:16:35,130
we don't yet know what the modulation
scheme is this is from the intertek test

238
00:16:35,130 --> 00:16:40,890
lab and now the dongle in this case was
certified separately by neutron

239
00:16:40,890 --> 00:16:45,180
engineering this case it's probably you
know some other ome the product and

240
00:16:45,180 --> 00:16:48,479
whatnot but in this case we have more
structured data

241
00:16:48,480 --> 00:16:51,660
unfortunately this is different
information than we saw in the mouse

242
00:16:51,660 --> 00:16:55,770
so here we see thirty four channels
first the 67 from the mouse but we see

243
00:16:55,770 --> 00:17:01,439
that mystery FSK modulation we can see
the data rate of one megabit and and

244
00:17:01,440 --> 00:17:05,130
it's at you know these discrepancies
between test lab reports for the same

245
00:17:05,130 --> 00:17:08,250
products can be kind of frustrating but
just have to kind of filter through that

246
00:17:08,250 --> 00:17:14,220
and and get a consensus for the
available data so with internal photos

247
00:17:14,220 --> 00:17:17,730
this is kind of a frustrating thing you
know some labs will have you know high

248
00:17:17,730 --> 00:17:21,390
resolution photos and better than the
pdfs but a lot of them will have you

249
00:17:21,390 --> 00:17:23,970
know propped or low resolution photos

250
00:17:23,970 --> 00:17:28,140
sometimes I'll take a you know a
permanent marker and draw over the

251
00:17:28,140 --> 00:17:31,890
markings on the r fic to make it
difficult to find out what's in there so

252
00:17:31,890 --> 00:17:34,950
it's it's hit or miss but sometimes you
can get useful information

253
00:17:34,950 --> 00:17:41,760
so this is the internal photo of a
Microsoft dongle in this case I can't

254
00:17:41,760 --> 00:17:45,990
make it out there in the image on the
projector but it has the markings where

255
00:17:45,990 --> 00:17:50,220
you can see what specific transceiver it
has this kind of the best case where you

256
00:17:50,220 --> 00:17:53,370
have you can make out the transceiver
and it's something that's what

257
00:17:53,370 --> 00:17:54,559
documented we can just

258
00:17:54,559 --> 00:17:58,039
go and get the spec sheet and then
implement exactly what the spectrum

259
00:17:58,039 --> 00:18:02,658
defines this is the internal photo from
this mouse

260
00:18:03,169 --> 00:18:07,100
unfortunately there's no useful
information the RFI see is under little

261
00:18:07,100 --> 00:18:14,029
epoxy mount there and so really we can't
get anything from this this is the

262
00:18:14,029 --> 00:18:16,970
internal photo from the dongle again

263
00:18:16,970 --> 00:18:21,259
no no useful data I mean this is typical
but you know sometimes you can actually

264
00:18:21,259 --> 00:18:27,740
get out the arts I rfic model
information from that the schematics

265
00:18:27,740 --> 00:18:31,279
this is really really hit or miss most
vendors will not make these available

266
00:18:31,279 --> 00:18:37,309
but in some cases they are and so in
this case for the radio shack mouse we

267
00:18:37,309 --> 00:18:42,110
can actually see the specific model of
the rfic unfortunate in this case it's

268
00:18:42,110 --> 00:18:46,039
kind of a Western own manufacturer
called Mozart semiconductor who makes

269
00:18:46,039 --> 00:18:46,759
this

270
00:18:46,759 --> 00:18:50,419
they don't have any publicly available
documentation but it's still something

271
00:18:50,419 --> 00:18:51,919
we can google for later

272
00:18:51,919 --> 00:19:01,369
and most of the the big name companies
will not make this data available so

273
00:19:01,369 --> 00:19:03,830
operational descriptions and user
manuals again

274
00:19:03,830 --> 00:19:07,668
you're really hit or miss so the
operational descriptions will say you

275
00:19:07,669 --> 00:19:10,639
know this is on high level how this
device operates

276
00:19:10,639 --> 00:19:13,699
sometimes it will include transfer
information physical layer operating

277
00:19:13,700 --> 00:19:16,879
characteristics but you know that as far
as I can tell there isn't any good

278
00:19:16,879 --> 00:19:21,199
structure for what this data has to be
and user manual same thing I mean

279
00:19:21,200 --> 00:19:25,309
oftentimes its customer facing how to
use this often times it has good

280
00:19:25,309 --> 00:19:26,418
technical depth

281
00:19:26,419 --> 00:19:33,919
this is the operational description from
the radio shack mouse

282
00:19:33,919 --> 00:19:37,519
now here we have somewhere data so it
says on their 2.4 gigahertz bluetooth

283
00:19:37,519 --> 00:19:41,570
module and it's likely not bluetooth
doesn't mention that anywhere else

284
00:19:41,570 --> 00:19:45,350
again the case we have this deal while
be very in data between the different

285
00:19:45,350 --> 00:19:49,759
available sources but it does say that
FSK which lines up with what we saw

286
00:19:49,759 --> 00:19:50,749
elsewhere

287
00:19:50,749 --> 00:19:54,499
it does tell us we have 67 channels
which lines up with what we saw in the

288
00:19:54,499 --> 00:20:00,200
test report for the mouse and it also
mentions the same ma 4302 rfic

289
00:20:00,710 --> 00:20:04,730
unfortunately no more detail on rfic but
it lines up with all you see in

290
00:20:04,730 --> 00:20:07,049
schematic

291
00:20:07,049 --> 00:20:10,139
this is from the dongle user manual

292
00:20:10,830 --> 00:20:13,470
this is kind of an interesting case
where you have physical layer

293
00:20:13,470 --> 00:20:15,149
information in the user manual

294
00:20:15,149 --> 00:20:21,570
so this tells us again gfs krf I see one
megabit data rate we see this channel

295
00:20:21,570 --> 00:20:22,769
range

296
00:20:22,769 --> 00:20:26,519
apparently you can only use it and human
house it's unclear what that is intended

297
00:20:26,519 --> 00:20:27,269
to mean

298
00:20:27,269 --> 00:20:35,580
and so now I googled around a bit for
this rfic googling for the RFI see

299
00:20:35,580 --> 00:20:40,109
itself yielded nothing useful but
searching for you know mouse plus you

300
00:20:40,109 --> 00:20:46,168
know ma 430 to produce this product
which is this company sweex appears to

301
00:20:46,169 --> 00:20:48,299
be a mouse with the same transceiver in
it

302
00:20:48,299 --> 00:20:50,940
so here we can get a little bit more
data we can confirm that it's you know

303
00:20:50,940 --> 00:20:54,749
FSK modulation in this case it says its
frequency hopping and we don't really

304
00:20:54,749 --> 00:20:58,139
know if that's the case or not but it's
an additional information that we can

305
00:20:58,139 --> 00:21:03,238
use to confirm what we've received from
other sources often times these type of

306
00:21:03,239 --> 00:21:08,399
devices you'll have a purpose-built rfic
so this one seems to be made for my sins

307
00:21:08,399 --> 00:21:11,820
so searching around for that you might
get some additional information

308
00:21:11,820 --> 00:21:18,779
so now that we've gone through these
sources we have a fairly good idea of

309
00:21:18,779 --> 00:21:22,440
what the physical layer radio
characteristics are for this device

310
00:21:22,440 --> 00:21:27,359
so here we can say with confidence that
his gfs k modulation we can say with

311
00:21:27,359 --> 00:21:29,369
confidence that this frequency range

312
00:21:29,369 --> 00:21:33,029
we know that it has some number of
channels that will you still need to

313
00:21:33,029 --> 00:21:39,239
figure out we know that it's a 1 megabit
data rate and it has said bluetooth and

314
00:21:39,239 --> 00:21:42,869
frequency hopping but that's likely not
the case but will confirm that

315
00:21:42,869 --> 00:21:50,158
so now that we have this information we
can have the device generate some

316
00:21:50,159 --> 00:21:52,980
traffic in this case you know moving it
around or clicking the mouse button or

317
00:21:52,980 --> 00:21:56,519
whatever and look at that with a
spectrum analyzer using a software

318
00:21:56,519 --> 00:22:00,720
defined radio and with this we can
confirm whether or not the information

319
00:22:00,720 --> 00:22:02,759
that we have so far is accurate

320
00:22:02,759 --> 00:22:08,429
so there are number tools that are
useful for this kind of scenario and you

321
00:22:08,429 --> 00:22:10,710
generally want a software-defined radio

322
00:22:10,710 --> 00:22:15,659
that's hard to do without our testing
closure or Faraday cage is very very

323
00:22:15,659 --> 00:22:19,370
nice for you know multiple reasons you
can you

324
00:22:19,370 --> 00:22:22,699
get rid of any noise in the environment
and if you're buzzing and whatnot you

325
00:22:22,700 --> 00:22:29,540
can keep that contained a new radio is a
great software suite for abstract away

326
00:22:29,540 --> 00:22:34,430
all of the signal processing and radio
site of this and so that allows you to

327
00:22:34,430 --> 00:22:39,350
not have any you know deep background in
this but still be productive and Angie

328
00:22:39,350 --> 00:22:42,860
are false for is a spectrum
visualization tool that you use with new

329
00:22:42,860 --> 00:22:47,899
radio a bob line is another spectacles
visualization tool with new radio and

330
00:22:47,900 --> 00:22:49,550
then you need the device you're going to
look at

331
00:22:49,550 --> 00:22:56,990
so for software-defined radios and i
like to use the u.s. rpb to tens is what

332
00:22:56,990 --> 00:22:58,010
we have at work there

333
00:22:58,010 --> 00:23:01,820
no great device there are a lot of
different options for SDR is that are

334
00:23:01,820 --> 00:23:05,689
fairly cost-effective you can get
depending on what you're looking at you

335
00:23:05,690 --> 00:23:09,559
can even get away with these little RTLS
dr down goals that are really cheap

336
00:23:10,070 --> 00:23:13,850
they don't work in a 2.4 gigahertz range
but I'm very accessible for a lot of

337
00:23:13,850 --> 00:23:21,230
projects and again with SD are we can
configure it to be you know whatever

338
00:23:21,230 --> 00:23:24,350
physical layer we want so in this case
we can tune it to the specific

339
00:23:24,350 --> 00:23:30,530
frequencies that the mouse is likely to
use and no define using new radio how

340
00:23:30,530 --> 00:23:37,160
we're going to modulate the data so the
radio is a combination of C C++

341
00:23:37,160 --> 00:23:43,400
libraries as well as Python code and it
has no modules or blocks they call them

342
00:23:43,400 --> 00:23:47,210
for domoj elated all the different
modulation types doing you know error

343
00:23:47,210 --> 00:23:49,190
correction time in recovery

344
00:23:49,190 --> 00:23:54,140
there are new radio stacks for doing a
bluetooth and Wi-Fi and no - 15 for and

345
00:23:54,140 --> 00:23:54,950
all sorts of things

346
00:23:54,950 --> 00:24:01,910
I'm really great ecosystem around there
and that a really nice thing is that you

347
00:24:01,910 --> 00:24:05,929
can you mock up a prototype very very
fast without much forethought

348
00:24:08,960 --> 00:24:14,149
this is new radio companion this is the
user interface that sits on top of new

349
00:24:14,149 --> 00:24:18,649
radio and this allows you to drag and
drop these blocks which do different

350
00:24:18,649 --> 00:24:23,840
things and so you can have a block which
does your FSK demodulation i'm a block

351
00:24:23,840 --> 00:24:26,840
which connects to your software defined
radio and so forth and so it allows you

352
00:24:26,840 --> 00:24:31,039
to not really have to understand what's
going on under the hood but you can

353
00:24:31,039 --> 00:24:33,230
still get done exactly what you need to
get done

354
00:24:33,230 --> 00:24:40,940
this is a screenshot of gr for this is
the spectrum visualization tool

355
00:24:40,940 --> 00:24:47,240
so here we are looking at frequency on
the x-axis and time on the y-axis and

356
00:24:47,240 --> 00:24:50,240
services a snapshot of some LTE traffic

357
00:24:51,049 --> 00:24:55,070
this is nice because you can tune your
radio to a certain frequency and very

358
00:24:55,070 --> 00:24:57,918
quickly determine exactly what's
happening so you can say hey is there

359
00:24:57,919 --> 00:24:59,690
something there is there not

360
00:24:59,690 --> 00:25:02,690
it's kind of you know good for doing
these sanity checks

361
00:25:03,350 --> 00:25:09,379
this is Bob line so bottom line is an
independent tool and then there's the gr

362
00:25:09,380 --> 00:25:14,870
- ba zi new radio block or module rather
which allows you to wire up a new radio

363
00:25:14,870 --> 00:25:20,449
- Bob line a bob line is nice because
you can pause the spectrum as it's going

364
00:25:20,450 --> 00:25:25,279
down in real time and expand it so this
is the case of some FSK modulated data

365
00:25:25,279 --> 00:25:30,110
and you can even see that it's going to
left for a bit 0 right for a bit one and

366
00:25:30,110 --> 00:25:34,908
you can almost visually make out what
data is actually being transmitted

367
00:25:34,909 --> 00:25:41,270
this is an example our test enclosure
this is what we use at work

368
00:25:41,960 --> 00:25:44,750
these things are are really really
fantastic because you can put your

369
00:25:44,750 --> 00:25:47,000
devices in there you know

370
00:25:47,000 --> 00:25:51,620
SMA cable out to your software defined
radio USB out to your computer and so

371
00:25:51,620 --> 00:25:54,110
you can interact with your SD r and your
device

372
00:25:54,110 --> 00:25:57,439
the same way as you went out in the open
but you're protected from everything in

373
00:25:57,440 --> 00:26:01,460
the environment and for determining
exactly what our devices doing this is

374
00:26:01,460 --> 00:26:05,299
very valuable because you can know for
certain that you're not looking at

375
00:26:05,299 --> 00:26:08,299
traffic coming from something else in
the world

376
00:26:11,059 --> 00:26:17,059
and so this is a very very simple flow
graph which has our input from the

377
00:26:17,059 --> 00:26:22,220
software-defined radio there you have an
output to gr foss for and this is all

378
00:26:22,220 --> 00:26:27,110
you need to get up a spectrum this
visualization tool and visually verify

379
00:26:27,110 --> 00:26:31,248
that the information we got from the FCC
documentation appears to be accurate

380
00:26:31,789 --> 00:26:37,549
so this case were camped at 24 20
megahertz looking at 40 megahertz band

381
00:26:37,549 --> 00:26:42,740
with because we think that there are 34
or sixty seven channels but we don't

382
00:26:42,740 --> 00:26:46,970
know is it helping or not you know where
does align the spectrum we want to look

383
00:26:46,970 --> 00:26:50,419
at as much as we can so we can you
quickly see what's going on

384
00:26:50,419 --> 00:26:57,350
this is the set up inside the test
inclusion on the left that USB goes out

385
00:26:57,350 --> 00:27:00,139
to the computer on the right that
antenna connects out to a

386
00:27:00,139 --> 00:27:04,279
software-defined radio and then it has
gloves conveniently so you can operate

387
00:27:04,279 --> 00:27:07,399
the device and interact with it just
like you would on the desk

388
00:27:10,730 --> 00:27:17,629
this is the gr foss for plot from just
the dongle alone in the Faraday cage and

389
00:27:17,629 --> 00:27:21,709
the idea is that the dongle is going to
transmit to the mouse either acts or

390
00:27:21,710 --> 00:27:25,460
sink packets or whatever and the mouse
is also going to transmit to the dongle

391
00:27:25,970 --> 00:27:29,779
so in order to be able to determine what
is coming for the dongle we first start

392
00:27:29,779 --> 00:27:33,470
with that and we can see that it's
transmitting these packets at regular

393
00:27:33,470 --> 00:27:37,220
intervals and that is camped at 2414
megahertz

394
00:27:37,220 --> 00:27:42,230
because it's transmitting at regular
intervals we can infer that it might be

395
00:27:42,230 --> 00:27:44,539
you know timing synchronization
information

396
00:27:44,539 --> 00:27:48,110
the way a lot of these devices work the
dongle will decide what channel is going

397
00:27:48,110 --> 00:27:53,119
to be on it will transmit this data than
the mouse will search around fine with

398
00:27:53,119 --> 00:27:56,149
the dongle is and then camp there so it
looks like that's what's happening here

399
00:27:58,909 --> 00:28:05,360
now we have the mouse and the dongle in
the cage that zoomed-in view over there

400
00:28:05,360 --> 00:28:10,850
this is a 3 packet grouping when i'm
moving the mouse around so the

401
00:28:10,850 --> 00:28:15,110
assumption is that the first packet is
that dongle sink packet the second

402
00:28:15,110 --> 00:28:19,610
packet is likely the mouse data and then
it's reasonable to assume that a third

403
00:28:19,610 --> 00:28:21,949
packet is a dongle acting back to the
mouth

404
00:28:21,950 --> 00:28:25,250
so even though we're just looking at
this visually we can start to make some

405
00:28:25,250 --> 00:28:28,760
assumptions about what the protocol
behavior is for these devices

406
00:28:32,029 --> 00:28:36,830
so now we can say with some confidence
that we know you know that the

407
00:28:36,830 --> 00:28:38,029
modulation

408
00:28:38,029 --> 00:28:43,220
we know that is camped at 2414 megahertz
so now we can record some data and turn

409
00:28:43,220 --> 00:28:49,340
that into bites using the new radio this
is another you know simple flow graph

410
00:28:49,880 --> 00:28:54,649
we're using a to make it hurt sample
rate because we're a 1 megabit data rate

411
00:28:54,649 --> 00:28:56,389
and we need two samples for simple

412
00:28:56,389 --> 00:29:02,330
so we're starting with the usrp input
for demodulating the data were the

413
00:29:02,330 --> 00:29:07,760
output of the modulator is one bit per
bite so either a 1 or 0 8 bit unsigned

414
00:29:07,760 --> 00:29:12,440
integer so we're packing that into bite
so that we have eight bits per byte and

415
00:29:12,440 --> 00:29:16,639
then we're writing that to a file so we
can run this it will you know capture

416
00:29:16,639 --> 00:29:21,379
the RF data coming out of the mouse and
the dongle and the result is that we

417
00:29:21,380 --> 00:29:26,120
have bites in a file on disk that you
know ideally represent what this device

418
00:29:26,120 --> 00:29:32,779
is transmitted and so again you know we
want repeated sequences

419
00:29:33,409 --> 00:29:37,250
I'm a packet so if we're looking for
something it's easier to find something

420
00:29:37,250 --> 00:29:39,559
if it happens over and over and over it

421
00:29:39,559 --> 00:29:44,090
so you know the dongle by itself it's
sending the synchronization packets and

422
00:29:44,090 --> 00:29:49,250
so we can just put it in there and it go
for the mouse in this case I put my hand

423
00:29:49,250 --> 00:29:52,850
in the club and just SAT there and click
the left button over and over again

424
00:29:53,539 --> 00:29:56,960
so we could have the same packet
repeating in the output results

425
00:29:56,960 --> 00:30:02,600
so now that we have these bites on disk

426
00:30:02,600 --> 00:30:06,320
we need to investigate them and trying
to figure out what packet format is

427
00:30:06,320 --> 00:30:07,549
being transmitted

428
00:30:07,549 --> 00:30:11,960
because we know we can infer anyway that
the bites we have some of them at least

429
00:30:11,960 --> 00:30:16,429
have come from the mouse and fungal we
have no idea what the format is so we

430
00:30:16,429 --> 00:30:20,299
need to you know use you know common
tools to get that data

431
00:30:20,809 --> 00:30:26,389
so there are a number of components of a
typical our packet you'll have a

432
00:30:26,389 --> 00:30:31,309
preamble at the start and this is used
for clock synchronization and timing

433
00:30:31,309 --> 00:30:32,330
synchronization

434
00:30:32,330 --> 00:30:35,429
so you have a oscillator in the dongle
oscillator

435
00:30:35,430 --> 00:30:38,760
mouse they're not going to be
synchronized because they're low quality

436
00:30:38,760 --> 00:30:44,010
and so the receiver needs something to
lock on to you so you'll have an

437
00:30:44,010 --> 00:30:47,670
alternating sequence of ones and zeros
for example and then the receiver can

438
00:30:47,670 --> 00:30:52,320
look at that time its clock to match the
transmitter and makes it easier to

439
00:30:52,320 --> 00:30:53,909
correctly to code the data

440
00:30:53,910 --> 00:30:59,010
well then often have a sink filled or
start a frame delimiter this just says

441
00:30:59,010 --> 00:31:00,810
hey the packet is starting here

442
00:31:00,810 --> 00:31:05,310
sometimes the same field is the address
sometimes you'll have a cig field which

443
00:31:05,310 --> 00:31:10,500
is static for a type of device and then
you'll have an address after that you

444
00:31:10,500 --> 00:31:13,470
might have a header which indicates you
know what type of frame it is what the

445
00:31:13,470 --> 00:31:17,100
frame length is and so forth and they
don't have to pay loads of the actual

446
00:31:17,100 --> 00:31:21,480
data being transmitted that might be
just the raw payload or it might be the

447
00:31:21,480 --> 00:31:25,710
payload that has been encoded some
channel coding and redundancy and that's

448
00:31:25,710 --> 00:31:29,970
you know Peter missed if you don't know
what the protocol is you'll frequently

449
00:31:29,970 --> 00:31:33,210
have a check them at the end you know so
you can know the correct date it was

450
00:31:33,210 --> 00:31:37,050
received and then you also might have a
post animal with the post down below

451
00:31:37,050 --> 00:31:40,590
this is for additional time and
frequency correction

452
00:31:40,590 --> 00:31:43,980
so you can compare the preamble of the
post and once you've changed

453
00:31:43,980 --> 00:31:50,490
I'm in further clock state of the
transmitter so I'm a big fan of abusing

454
00:31:50,490 --> 00:31:54,300
these just regular linux command line
tools because you know you can just

455
00:31:54,300 --> 00:32:00,270
really quickly get to the data so I you
know I start by using XD to turn the

456
00:32:00,270 --> 00:32:06,840
light output from new radio into a long
text string and then we can wrap that

457
00:32:06,840 --> 00:32:11,490
and do these normal things like we were
on the text file and it's a really makes

458
00:32:11,490 --> 00:32:12,990
it easy to operate now

459
00:32:12,990 --> 00:32:16,590
one problem is we're operating at these
bite boundaries so we've we've taken

460
00:32:16,590 --> 00:32:20,669
these bit outputs and we packed it in
two bites but the start of a packet

461
00:32:20,670 --> 00:32:24,810
might fall you know at one of these bit
offset so it might start three bits into

462
00:32:24,810 --> 00:32:25,500
a bite

463
00:32:25,500 --> 00:32:29,820
because of that we're not going to see
every single packet but the assumption

464
00:32:29,820 --> 00:32:33,689
is at least some of the packets will
fall at a bite boundary and then we can

465
00:32:33,690 --> 00:32:34,740
decode it

466
00:32:34,740 --> 00:32:42,030
so preamble is often going to be a tone
which would show up as you know

467
00:32:42,030 --> 00:32:46,520
00 or FX bites and also might be
alternating ones and zeros

468
00:32:46,520 --> 00:32:52,610
which shows up as a a or 55 x characters
and so we start by simply grabbing for

469
00:32:52,610 --> 00:32:57,169
repeated sequences of those characters
and seeing what shows up in a repeated

470
00:32:57,170 --> 00:33:02,990
manner and in this case we have that for
F followed by 12 days which shows up

471
00:33:02,990 --> 00:33:07,460
so the longest repeated sequence that
shows up quite a few times and so we can

472
00:33:07,460 --> 00:33:11,870
make an assumption that that is likely
going to be the preamble that the dongle

473
00:33:11,870 --> 00:33:13,610
is setting out with the sink packets

474
00:33:13,610 --> 00:33:18,979
we don't know that for sure but it's you
know probably a safe assumption so now

475
00:33:18,980 --> 00:33:24,560
we want to find you know what sequence
of bytes follow this preamble and so we

476
00:33:24,560 --> 00:33:27,500
can just use grep again and we start
with the preamble

477
00:33:27,500 --> 00:33:33,020
in this case we're looking for 4s
followed by either 12 days or 12 fives

478
00:33:33,020 --> 00:33:36,980
actually you have you know FF and 12
days and you shifted by one bit you get

479
00:33:36,980 --> 00:33:42,950
4 s followed by 12 fives and so we want
to cover all bases and then we want to

480
00:33:42,950 --> 00:33:45,860
look for the longest sequence which
follows this preamble

481
00:33:45,860 --> 00:33:50,510
so in the grip string up there there's a
16 at the end and that is the number of

482
00:33:50,510 --> 00:33:54,770
characters following this preamble that
started you know a given number and so

483
00:33:54,770 --> 00:33:59,180
in this case i started with one and work
my way up and tell at 17 characters

484
00:33:59,180 --> 00:34:01,670
there was no longer repeated sequences

485
00:34:01,670 --> 00:34:06,920
so you can assume that that 16 is
probably the falling of the packet

486
00:34:12,380 --> 00:34:15,380
and now

487
00:34:15,380 --> 00:34:18,950
these were the strongest thing packets
so we want to do a sanity check and make

488
00:34:18,949 --> 00:34:21,710
sure that it looks like they're
following the behavior we saw in the

489
00:34:21,710 --> 00:34:26,960
spectrogram so in this case we screw up
again and we have the be flagged

490
00:34:26,960 --> 00:34:32,300
pasadena grab to give us the offset in
the file where these packets occur in

491
00:34:32,300 --> 00:34:36,530
this case we can see that show up in
multiples of two thousand offset more or

492
00:34:36,530 --> 00:34:37,490
less

493
00:34:37,489 --> 00:34:40,909
so we have your kind of even spacing and
so this is probably a safe assumption

494
00:34:40,909 --> 00:34:44,449
that these are the sink packets that we
saw on the spectrum analyzer

495
00:34:46,040 --> 00:34:51,920
so now we can start looking at the
capture of the mouse + hangul in the

496
00:34:51,920 --> 00:34:57,380
Faraday cage now because we made this
assumption that this byte sequence is a

497
00:34:57,380 --> 00:34:59,270
packet transmitted by the dongle

498
00:34:59,270 --> 00:35:04,490
we can just use said and remove that
from the output of the mouse plus dog

499
00:35:05,000 --> 00:35:07,820
the idea they're being that if we have
you know whatever is left over was

500
00:35:07,820 --> 00:35:10,820
transmitted by the mouse and probably
not the dongle

501
00:35:12,140 --> 00:35:15,620
so we run said isolate the mouse packets
and then we go through the same

502
00:35:15,620 --> 00:35:20,420
procedure looking for the preamble for
the mouse packet in this case we have a

503
00:35:20,420 --> 00:35:21,980
potentially different preamble

504
00:35:21,980 --> 00:35:27,380
we don't have the same 4s followed by 12
days or fives and it's it's not

505
00:35:27,380 --> 00:35:29,930
immediately clear which one of these
might be the preamble

506
00:35:29,930 --> 00:35:33,589
so we go to the same process of looking
for repeated sequences following these

507
00:35:33,590 --> 00:35:38,060
and just go down the list and try each
one of them takes a bit of time but

508
00:35:38,060 --> 00:35:46,670
necessary in this . so in this case what
works the best was 4 a's followed by a

509
00:35:46,670 --> 00:35:51,230
number of bytes and however we don't
have just one packet that shows up

510
00:35:51,230 --> 00:35:55,160
repeated a bunch of times we have this
list here and we see we have the one

511
00:35:55,160 --> 00:35:59,480
character which varies so this is likely
going to be a sequence number

512
00:35:59,480 --> 00:36:03,410
everything else is the same in the
packet up to that point we have that

513
00:36:03,410 --> 00:36:07,399
vary in there and then we have these two
bites at the end which vary so that

514
00:36:07,400 --> 00:36:11,600
tells us that it's possible that this is
a sequence number that when that changes

515
00:36:11,600 --> 00:36:15,980
that were modifying a checksum at the
end so that you know when we can infer

516
00:36:15,980 --> 00:36:20,000
then that we're probably going to look
for a 16-bit crc at the end of the

517
00:36:20,000 --> 00:36:22,860
packet

518
00:36:22,860 --> 00:36:26,550
and now we can do the same standard a
check the ellipsis in the grip there is

519
00:36:26,550 --> 00:36:30,810
just a grip string for all of the
packets that we think we found from the

520
00:36:30,810 --> 00:36:34,860
mouse in this case we see you know more
or less similar even spacing

521
00:36:35,370 --> 00:36:38,670
they're spaced out further apart because
i was no manually clicking the mouse to

522
00:36:38,670 --> 00:36:41,670
generate this instead of doing the
automated process from the dongle

523
00:36:41,670 --> 00:36:46,050
but it looks like it lines up and so we
probably found packets coming from the

524
00:36:46,050 --> 00:36:48,090
mouse

525
00:36:48,090 --> 00:36:51,570
so now we have these candidates for you
know what we think of the packets

526
00:36:51,570 --> 00:36:55,620
we have the dongle sink back it up there
that's the only thing we've seen

527
00:36:55,620 --> 00:36:58,049
transmitted by the dongle that were
aware of

528
00:36:58,050 --> 00:37:03,090
we then have this list of mouse packets
and we have those four bytes which are

529
00:37:03,090 --> 00:37:07,170
the same between the dongle in the mouse
packet because we have that same in both

530
00:37:07,170 --> 00:37:12,390
cases the assumption is that that is
going to be either a single word shared

531
00:37:12,390 --> 00:37:17,670
by the devices and or the address and
then we have these preambles and post

532
00:37:17,670 --> 00:37:23,010
animals both the dongle and mouse
packets and with FF and then we have the

533
00:37:23,010 --> 00:37:26,700
for a preamble for the mouse packets and
then that 4s followed by 12 days

534
00:37:26,700 --> 00:37:33,569
preamble for the dongle and now the
question is you know what is this 16-bit

535
00:37:33,570 --> 00:37:37,530
see our CEO is it a crc could be
something else what is it

536
00:37:37,530 --> 00:37:42,330
so that the lowest hanging fruit is this
tool called crc reg you can just pass

537
00:37:42,330 --> 00:37:48,779
that a sequence of bytes experts in this
case and it will run through common and

538
00:37:48,780 --> 00:37:54,030
then brute force uncommon CRC's to tell
you you know is the same crc at the end

539
00:37:54,030 --> 00:37:59,910
of each one of these bites sequences in
this case as they were no no dice it

540
00:37:59,910 --> 00:38:01,620
didn't find anything

541
00:38:01,620 --> 00:38:07,740
and I've Stan frustrating but that
happens so now one thing to consider is

542
00:38:07,740 --> 00:38:09,629
a lot of packets will be whitened

543
00:38:09,630 --> 00:38:12,570
and this works by you know exhale bring
the payload of the packet or the entire

544
00:38:12,570 --> 00:38:14,280
packet with some value

545
00:38:14,280 --> 00:38:18,210
you know to avoid long runs of ones and
zeros and the data and so forth

546
00:38:19,320 --> 00:38:23,130
there's no magic bullet here I just went
through and try deck serene you know a

547
00:38:23,130 --> 00:38:25,830
lot of that common whitening sequences

548
00:38:25,830 --> 00:38:32,130
so this case exploring the entire packet
with 0 x 5 a bites was a magic bullet

549
00:38:32,130 --> 00:38:37,680
but then the last two bytes in the
packet the checksum where the first byte

550
00:38:37,680 --> 00:38:38,100
order

551
00:38:38,100 --> 00:38:42,690
so in this case explore the entire thing
with 0 X by the repeated and reversing

552
00:38:42,690 --> 00:38:46,860
the last two bytes for the checksum
worked and then pass it into crc revenge

553
00:38:46,860 --> 00:38:53,520
and then we see that is the X modem
variant of crc 16 ccitt and now we know

554
00:38:53,520 --> 00:38:57,360
ok we have the full packet format more
or less for the mouse

555
00:38:57,360 --> 00:39:01,200
so we know what has you know this
preamble

556
00:39:01,710 --> 00:39:05,610
we are assuming those four bytes are the
address that may or may not be because

557
00:39:05,610 --> 00:39:06,960
we only look at one mouse

558
00:39:06,960 --> 00:39:10,740
so we can't say for certain that another
mouse would have the same or different

559
00:39:10,740 --> 00:39:15,750
address value we know that it has a
payload of three bites followed by the

560
00:39:15,750 --> 00:39:17,700
crc in the post temple

561
00:39:17,700 --> 00:39:23,879
so now that we've figured out the one of
the packet formats that we can go back

562
00:39:23,880 --> 00:39:29,880
and start to figure out you know what is
a protocol behavior here and so you know

563
00:39:29,880 --> 00:39:34,530
this requires usually some additional
time and testing devices so the the you

564
00:39:34,530 --> 00:39:37,590
know low hanging fruit here is just
getting another one of the same Mouse

565
00:39:37,590 --> 00:39:42,150
and you run through the same procedure
and see what changes in this case the

566
00:39:42,150 --> 00:39:46,230
second mouse had a second mouse and
fungal had a different for byte value

567
00:39:46,230 --> 00:39:48,330
for that you know sink order address

568
00:39:48,330 --> 00:39:51,509
so now we can assume that those four
bytes are in fact a unique identifier

569
00:39:51,510 --> 00:39:58,680
for the mouse and uncle and are specific
to each device pair you want to go back

570
00:39:58,680 --> 00:40:03,810
and look at other packet formats as well
so this was just looking at mouse clicks

571
00:40:03,810 --> 00:40:07,500
we want to go back and generate the same
data by clicking the other button or

572
00:40:07,500 --> 00:40:10,950
doing the scroll or moving the mouse
slightly left and slightly right and so

573
00:40:10,950 --> 00:40:13,770
forth and just make work your way
through and and build out all of the

574
00:40:13,770 --> 00:40:20,400
different back formats but then we have
these tenets relax and it was unclear

575
00:40:20,400 --> 00:40:24,600
initially what those would look like
they were acts we haven't seen those in

576
00:40:24,600 --> 00:40:30,150
the decoded data yet but we can do is
simply grab for the address we have now

577
00:40:30,150 --> 00:40:31,470
that we know that the address

578
00:40:31,470 --> 00:40:35,759
rep for that and the data outputted by
the dongle and the mouse in the Faraday

579
00:40:35,760 --> 00:40:40,770
cage and we can see that we have that
for bite payload sequence

580
00:40:41,460 --> 00:40:47,070
following the mouse packet by three
hundred microseconds and so this is

581
00:40:47,070 --> 00:40:47,400
something

582
00:40:47,400 --> 00:40:51,329
is that this is in fact the ack with
only four bytes

583
00:40:51,329 --> 00:40:55,859
we force don't have room for crc but
going back and testing this with

584
00:40:55,859 --> 00:40:59,400
different types of mouse movement
packets and clicks and what not and it

585
00:40:59,400 --> 00:41:03,029
you know quickly became apparent in this
case that that was the act just not

586
00:41:03,029 --> 00:41:10,890
protected by a crc so we have an idea of
what the packet for it is for both the

587
00:41:10,890 --> 00:41:15,450
mouse and the dongle and now we want to
go verify what the timing is so the

588
00:41:15,450 --> 00:41:16,230
Assumption here

589
00:41:16,230 --> 00:41:20,940
based on the spectrogram is that we have
the dongle transmitting packets every 16

590
00:41:20,940 --> 00:41:25,920
milliseconds just following every dongle
packet the mouse has an opportunity to

591
00:41:25,920 --> 00:41:30,869
transmit a packet if it does the dongle
then acts a few hundred microseconds

592
00:41:30,869 --> 00:41:31,500
later

593
00:41:31,500 --> 00:41:35,579
and so knowing this behavior we can then
you know potentially build a father

594
00:41:35,579 --> 00:41:43,829
start transmitting etc so we have
knowledge of the packet format but we

595
00:41:43,829 --> 00:41:48,210
don't know what data is you know
transmitted in the payloads the skin you

596
00:41:48,210 --> 00:41:52,230
vary wildly but in this case we know
what we're expecting to happen so we

597
00:41:52,230 --> 00:41:56,099
know you know we can generate the same
thing over and over again for clicking

598
00:41:56,099 --> 00:42:00,329
the movement and so forth and so we need
to simply collect a bunch of data see

599
00:42:00,329 --> 00:42:04,170
what changes in the payload when we
change different behavior so different

600
00:42:04,170 --> 00:42:08,190
cliques or Scrolls or whatever and then
based on that we can infer what the

601
00:42:08,190 --> 00:42:13,770
format is of the payloads being
transmitted and so in this case we have

602
00:42:13,770 --> 00:42:16,920
a sequence number which is one nipple

603
00:42:16,920 --> 00:42:21,420
we have a one nibble frame type which
changes between movement first scroll

604
00:42:21,420 --> 00:42:26,309
and click and scroll and click have a
button states that's going to be down or

605
00:42:26,309 --> 00:42:27,000
up

606
00:42:27,000 --> 00:42:31,020
we have a button type which is either
scroll wheel or a regular but you can

607
00:42:31,020 --> 00:42:35,099
click and then we have the button
delimiter so you left right

608
00:42:35,099 --> 00:42:40,200
scroll up down etc and getting this data
is just a matter of going through the

609
00:42:40,200 --> 00:42:44,520
motion of you know literally moving the
mouse and seen what changes

610
00:42:48,069 --> 00:42:54,099
so now we have a fairly good model of
both the you know packet payload formats

611
00:42:54,099 --> 00:42:55,900
and protocol of this particular mouse

612
00:42:55,900 --> 00:43:00,459
so we know we have for packet format we
know we have the dongle singing packets

613
00:43:00,459 --> 00:43:04,058
we have the acts we have no movement
click and scroll packets

614
00:43:04,059 --> 00:43:10,359
we know it's true FSK modulated at a 1
megabit data rate we know that at camps

615
00:43:10,359 --> 00:43:14,440
on one channel in this case the other
mouse camp that I think 24 20 megahertz

616
00:43:14,440 --> 00:43:16,180
and never changes

617
00:43:16,180 --> 00:43:19,660
so it appears that for a lifetime of the
devices that they're likely at the same

618
00:43:19,660 --> 00:43:20,288
Channel

619
00:43:20,289 --> 00:43:24,999
we know that you know TMI information we
know the dongle transmits the sink

620
00:43:24,999 --> 00:43:26,919
packets and so forth

621
00:43:26,920 --> 00:43:32,289
we know that you know the mouse will
always follow the dongle sing packets

622
00:43:32,289 --> 00:43:36,549
and this is not always the case but in
this kind of pdma setup you'll usually

623
00:43:36,549 --> 00:43:41,589
have you know the mouse will get his
timing information from the dongle and

624
00:43:41,589 --> 00:43:46,869
it were inferring that uses 34 channels
and the channels that we saw in use

625
00:43:46,869 --> 00:43:50,529
were at and for megahertz offsets

626
00:43:50,529 --> 00:43:54,729
so based on that it's it's likely to 34
channels that we saw in the docks and

627
00:43:54,729 --> 00:43:55,930
not 67

628
00:43:55,930 --> 00:43:59,618
I'm it's not blue tooth that's not
frequency hopping and we know that it

629
00:43:59,619 --> 00:44:08,890
uses the export variant of crc ccitt now
this process for the mouse was you know

630
00:44:08,890 --> 00:44:13,239
one way of doing things but then I've
also been looking at in my hotel room in

631
00:44:13,239 --> 00:44:18,369
the past couple days this little tiny
quadcopter and for this I didn't have a

632
00:44:18,369 --> 00:44:23,079
Faraday cage here just str my laptop and
so I was visually looking at the data

633
00:44:23,079 --> 00:44:24,160
using bloodline

634
00:44:24,160 --> 00:44:28,779
now here's what it looks like when you
have just this remote turned on you can

635
00:44:28,779 --> 00:44:33,339
see with the remote on that it's you
know transmitting some kind of same you

636
00:44:33,339 --> 00:44:38,229
know civilization burst or what not to
the quadcopter every 15 milliseconds and

637
00:44:38,229 --> 00:44:40,299
we can see that that something is
happening there

638
00:44:40,299 --> 00:44:43,779
now if we zoom in a bit

639
00:44:43,779 --> 00:44:49,809
this is with the quadcopter on and
communicating back to the controller we

640
00:44:49,809 --> 00:44:54,069
have those top burst in each set which
line up with what we saw with the

641
00:44:54,069 --> 00:44:57,788
controller alone and then the second
more powerful bursts below so that might

642
00:44:57,789 --> 00:45:00,910
be ax coming back to the quad copter and

643
00:45:00,910 --> 00:45:05,200
the point of this is that you can do you
know quick visual analysis and get some

644
00:45:05,200 --> 00:45:08,350
useful data without even having to break
out the Faraday cage and do anything too

645
00:45:08,350 --> 00:45:15,069
complex and here we have zoomed in
further on the packet the controller the

646
00:45:15,070 --> 00:45:20,320
packet from the quadcopter here because
we can actually see the frequency change

647
00:45:20,320 --> 00:45:24,310
from a downed up 40 and one you could
actually you know work out exactly

648
00:45:24,310 --> 00:45:27,910
what's being transmitted by simply
visually looking at it and writing down

649
00:45:27,910 --> 00:45:33,279
you know what each bit position is this
is a little bit less robust of mechanism

650
00:45:33,280 --> 00:45:36,220
but for you know quick and dirty
analysis of protocols

651
00:45:36,220 --> 00:45:42,730
you know this kind of thing works works
pretty well so to recap the process used

652
00:45:42,730 --> 00:45:46,690
here we start you know you are open
source intelligence we look at the FCC

653
00:45:46,690 --> 00:45:50,680
documentation we Google around and so
forth and we find out everything we

654
00:45:50,680 --> 00:45:54,370
possibly can about the physical layer
operating characteristics of the device

655
00:45:55,600 --> 00:45:59,350
we then verify it with the spectrum
analyzer the Faraday cage it possible

656
00:45:59,350 --> 00:46:01,029
and make sure that that information

657
00:46:01,030 --> 00:46:06,850
it looks correct we then use your radio
to turn that into bites or bits on disk

658
00:46:06,850 --> 00:46:10,029
now we can just grow up around and start
finding this packet formats

659
00:46:10,930 --> 00:46:14,500
once you have a packet formats then we
can work out the protocol format or

660
00:46:14,500 --> 00:46:19,150
protocol behavior and the payload format
for the device and this process is you

661
00:46:19,150 --> 00:46:23,080
know pretty effective and for something
like this you know it's a few hours in

662
00:46:23,080 --> 00:46:27,370
an afternoon to get a for model of how
it works and then once you have that

663
00:46:27,370 --> 00:46:32,350
data then you can apply it to building a
buzzer or whatever your next research

664
00:46:32,350 --> 00:46:39,370
steps are so now i'm going to do a demo
of kind of what the result is all this

665
00:46:39,370 --> 00:46:45,190
research so Mouse track is a bunch of
key stroke injection vulnerabilities I

666
00:46:45,190 --> 00:46:51,130
found and you know different types of
mom bluetooth wireless mice for doing

667
00:46:51,130 --> 00:46:55,480
this kind of injection demo and i like
to use these Hardware to find radio

668
00:46:55,480 --> 00:46:56,290
dongles

669
00:46:56,290 --> 00:47:01,210
so in this case this is a dong goal from
the crazy fly which is an open-source

670
00:47:01,210 --> 00:47:02,680
drone project

671
00:47:02,680 --> 00:47:07,720
it's the same transceiver as logitech
uses in their wireless mice but also has

672
00:47:07,720 --> 00:47:11,470
a power amplifier and low-noise
amplifier and this is nice because once

673
00:47:11,470 --> 00:47:14,379
you know you know exactly how I device
operates you

674
00:47:14,380 --> 00:47:17,500
do something like this and it does you
know one thing very very well it's small

675
00:47:17,500 --> 00:47:20,170
compact effective cetera

676
00:47:20,170 --> 00:47:25,210
with this we were able to actually do p
stroke injection from 225 meters away

677
00:47:25,210 --> 00:47:29,230
using you know one of these and a
directional antenna so it seemed a

678
00:47:29,230 --> 00:47:35,110
little device and so in the case of the
water attack attack

679
00:47:35,710 --> 00:47:39,280
there are three vulnerabilities being
exploited there's a for sparing

680
00:47:39,280 --> 00:47:40,270
vulnerability

681
00:47:40,270 --> 00:47:46,210
so the normal behavior is you put the
dongle into pairing mode with her

682
00:47:46,210 --> 00:47:51,700
software and then it stays in pairing
mode for 30 to 60 seconds and then you

683
00:47:51,700 --> 00:47:56,379
compare your devices during that time
that turns out it's possible to also for

684
00:47:56,380 --> 00:48:02,020
spare device at any time so as long as
you know the RF address of a mouse or

685
00:48:02,020 --> 00:48:06,370
keyboard that is paired to it you can
pair your own device which turned out to

686
00:48:06,370 --> 00:48:07,270
be a problem

687
00:48:07,270 --> 00:48:12,460
another neat thing you need to pair a
keyboard with a dongle in order to

688
00:48:12,460 --> 00:48:13,540
inject keystrokes

689
00:48:13,540 --> 00:48:16,900
but you can actually structured the
pairing sequence in such a way where you

690
00:48:16,900 --> 00:48:21,010
pair device which is a keyboard
effectively but shows up to the end user

691
00:48:21,010 --> 00:48:25,960
as a mouse and you're still having a new
device paired not good people notice but

692
00:48:25,960 --> 00:48:27,460
if it looks like a mouse

693
00:48:27,460 --> 00:48:32,740
maybe it's no less suspicious and then
the you know that the really fun thing

694
00:48:32,740 --> 00:48:34,839
is this unencrypted keystroke injection

695
00:48:34,840 --> 00:48:39,760
so water tank and Crips the
communication going between keyboards

696
00:48:39,760 --> 00:48:45,940
and the dongle using hundred twenty bit
yes but they don't verify that incoming

697
00:48:45,940 --> 00:48:49,570
keyboard packets are encrypted so the
vulnerability is simply a matter of

698
00:48:49,570 --> 00:48:53,680
sending the unencrypted equivalent of
what the keyboard sense and the dawn

699
00:48:53,680 --> 00:48:57,520
goal gladly accepts it and will allow
you to inject keystrokes that way

700
00:48:58,060 --> 00:49:02,799
logitech has issued a firmware patch for
the strong goal you have to use logic

701
00:49:02,800 --> 00:49:03,640
devices

702
00:49:03,640 --> 00:49:06,670
you haven't patched please do it's
important

703
00:49:06,670 --> 00:49:13,390
so i'm going to plug a longer text on
goal into my laptop down here and my

704
00:49:13,390 --> 00:49:14,440
other laptop

705
00:49:14,440 --> 00:49:18,520
will plug in this crazy radio dongle
which will allow me to send the command

706
00:49:18,520 --> 00:49:20,380
to execute the attack

707
00:49:20,380 --> 00:49:23,380
just give me one second to get to set up
here

708
00:49:27,790 --> 00:49:34,570
and so in this case this is just a you
know water tech and 510 mouse with the

709
00:49:34,570 --> 00:49:37,570
standard in a water tank unifying USB
dongle

710
00:49:48,980 --> 00:49:52,369
and there are one thing to note there
are two different variants of these

711
00:49:52,369 --> 00:49:56,750
Logitech unifying dongles they have one
with nordic semiconductor transceivers

712
00:49:56,750 --> 00:50:01,760
and another version with ti texas
instruments transceivers both versions

713
00:50:01,760 --> 00:50:04,369
are vulnerable and both need to be
patched

714
00:50:04,369 --> 00:50:09,770
so i'm going to open up the Logitech
unifying software so we can see that

715
00:50:09,770 --> 00:50:12,770
were actually parenting advice

716
00:50:20,849 --> 00:50:25,619
ok so here we have now this one mouse
which is paired with a dongle and that's

717
00:50:25,619 --> 00:50:30,509
the expected behavior and now i'm going
to run a script on my laptop here the

718
00:50:30,509 --> 00:50:34,229
other one and this is going to issue
commands to pair a new device with the

719
00:50:34,229 --> 00:50:39,269
dongle the dongle is not in pairing mode
but in this case it doesn't matter

720
00:50:39,269 --> 00:50:51,089
ok so we run that then we'll see our new
device show up in this case I david maus

721
00:50:51,089 --> 00:50:54,930
track to make it visually distinct but
you can you arbitrarily set

722
00:50:54,930 --> 00:50:58,229
what it's titled you can also
arbitrarily set what device type of this

723
00:50:58,229 --> 00:51:01,710
you could have it show up as a mouse or
keyboard or trackpad or whatever

724
00:51:01,710 --> 00:51:08,700
so now i'm going to sew the output of my
script here is the wireless address of

725
00:51:08,700 --> 00:51:12,419
the newly pair device so each device
paired with the dongle has a distinct

726
00:51:12,420 --> 00:51:13,470
address

727
00:51:13,470 --> 00:51:17,939
so I'm going to feed that into another
script which will execute a keystroke

728
00:51:17,940 --> 00:51:19,049
injection attack

729
00:51:19,049 --> 00:51:22,979
this will bring up notepad and just take
a little bit of text

730
00:51:28,980 --> 00:51:35,460
and you know I'm not next to this laptop
now but we've shown with range testing

731
00:51:35,460 --> 00:51:40,140
and that you can do the exact same thing
with the exact same reliability at 225

732
00:51:40,140 --> 00:51:43,140
meters away and that range applies

733
00:51:43,680 --> 00:51:46,859
you know across the range of vulnerable
devices I've tested

734
00:51:46,859 --> 00:51:50,880
it's a definite concern that you should
jump at your devices

735
00:51:51,720 --> 00:51:55,439
the other vendors outside of Microsoft
right sorry outside of water tech don't

736
00:51:55,440 --> 00:51:59,100
have the ability to update the firmware
on those devices and so if you're using

737
00:51:59,100 --> 00:52:03,390
an on bluetooth wireless mouse and it's
you know not water tech or a lot of tech

738
00:52:03,390 --> 00:52:07,859
and I'm patched and i would definitely
change your behavior and anyway that's

739
00:52:07,859 --> 00:52:10,380
what I've got many questions

740
00:52:10,380 --> 00:52:18,869
thank you

741
00:52:20,550 --> 00:52:24,900
yep I guessed

742
00:52:27,710 --> 00:52:35,540
yeah i was it thank you

743
00:52:36,470 --> 00:52:36,740
and

