1
00:00:14,660 --> 00:00:17,900
hi thank you for joining the this

2
00:00:17,900 --> 00:00:31,278
- today we're going to discuss some very
exciting new ways to create and profit

3
00:00:31,279 --> 00:00:33,739
from iOS and Mauer

4
00:00:33,739 --> 00:00:40,129
my name is Camille but before we jumped
in a world of morning

5
00:00:40,129 --> 00:00:46,099
this talk is going to be focused on a
non jailbroken iOS device

6
00:00:46,100 --> 00:00:51,619
so if you're here looking for us our
sandbox escape or the latest jailbreak

7
00:00:51,619 --> 00:00:58,400
that's not your talk you can take your
time and enjoy it and other tracks a bit

8
00:00:58,400 --> 00:01:05,539
about myself and with security
researcher based in Israel release the

9
00:01:05,540 --> 00:01:09,320
analyzer and testing framework for iOS
application

10
00:01:10,010 --> 00:01:15,080
belch a pues and other tools for pen
testing

11
00:01:15,080 --> 00:01:22,759
I'm a security trainer did the iOS
hacking and black hat two consecutive on

12
00:01:22,760 --> 00:01:25,760
to tell you 2013 2014

13
00:01:25,760 --> 00:01:30,680
I gave security talks and I'm a twitter
addict

14
00:01:30,680 --> 00:01:33,860
so you can look me up that's better

15
00:01:33,860 --> 00:01:38,030
so let's go over the overview of stock

16
00:01:38,540 --> 00:01:45,320
first I'm going to represent the basics
of apples application sandbox

17
00:01:45,320 --> 00:01:52,220
why is it important and how it's built
by and the rules that must follow then

18
00:01:52,220 --> 00:01:56,240
we'll talk about evil client creation in
the latest and greatest and evil client

19
00:01:56,240 --> 00:02:02,600
exploitation on an non jailbroken iOS
device then we're going to talk a new

20
00:02:02,600 --> 00:02:11,299
vulnerability or if we introduce our
inability exploiting evil clients then

21
00:02:11,299 --> 00:02:18,409
we do some demo if demigods are good
with us and we'll talk about mitigation

22
00:02:18,409 --> 00:02:25,640
and detection and have a cuny so here is
a question to ponder during this talk

23
00:02:27,079 --> 00:02:31,110
FBI had allegedly paid 1.2 million
dollars

24
00:02:31,110 --> 00:02:36,210
to get into a locked device the device
that was set up with the brute force

25
00:02:36,210 --> 00:02:43,500
mitigation to wipe all of this content
had parody rumors passcode of a simple

26
00:02:43,500 --> 00:02:45,210
pass code for characters

27
00:02:45,210 --> 00:02:53,910
how much would an adverse sri pay to
gain access not the device butter to an

28
00:02:53,910 --> 00:02:57,570
encrypted content inside an application

29
00:02:57,570 --> 00:03:00,959
so when you picture a device and you
have on your iOS device you have a

30
00:03:00,959 --> 00:03:07,530
password manager you have this secret
check application and when the

31
00:03:07,530 --> 00:03:12,000
application developers are security
minded they keep that is secured

32
00:03:12,570 --> 00:03:18,780
they want their content to be encrypted
so think about someone getting access to

33
00:03:18,780 --> 00:03:23,640
a device and want to go into and take
down this village crip the messages of

34
00:03:23,640 --> 00:03:25,200
the grip the content

35
00:03:25,200 --> 00:03:30,238
how much will they pay in order for that
to achieve and keep in mind that the

36
00:03:30,239 --> 00:03:34,920
vendor can always say we have
implemented self exception we don't have

37
00:03:34,920 --> 00:03:35,609
the keys

38
00:03:35,610 --> 00:03:40,200
so don't come up with banging questions
or subpoena is because we don't have the

39
00:03:40,200 --> 00:03:43,170
key to decrypt the data that's on the
device itself right

40
00:03:43,170 --> 00:03:48,660
so in this talk will tackle this
question by exploiting the possibilities

41
00:03:48,660 --> 00:03:53,760
of utilizing evil clients to gain access
to security container like that

42
00:03:53,760 --> 00:04:00,390
we're going to talk about latest iOS
state of evil clients and our creation

43
00:04:00,390 --> 00:04:04,679
utilizing apples home birth certificate
program

44
00:04:04,680 --> 00:04:10,170
so let's start at the beginning the
application sandbox

45
00:04:10,170 --> 00:04:13,170
so on any iOS device

46
00:04:13,739 --> 00:04:17,970
each application has its own little
playground

47
00:04:17,970 --> 00:04:26,040
the old sandbox when it keeps all of its
contents in place and it must follow the

48
00:04:26,040 --> 00:04:32,640
sandbox rules laid by Apple operating
system iOS each application has it all

49
00:04:32,640 --> 00:04:38,789
echo system it's all finance system and
one application must not cross the

50
00:04:38,790 --> 00:04:42,270
border an axis other application file
system contents

51
00:04:43,360 --> 00:04:49,659
file system is mapped by utilizing the
bundle identifier during installation

52
00:04:49,659 --> 00:04:54,849
process into that specific application
and if by any chance

53
00:04:55,599 --> 00:04:59,889
other applications tries to access that
security container which is not owned by

54
00:04:59,889 --> 00:05:06,340
it is going to get an exception from the
process going to say you try to access

55
00:05:06,340 --> 00:05:11,138
the sandbox which is not allowed by your
application

56
00:05:11,139 --> 00:05:18,219
we're looking at applications sandbox
contents

57
00:05:18,219 --> 00:05:28,330
we most often see a sqlite databases for
storage application files configuration

58
00:05:28,330 --> 00:05:32,529
files and a lot of them cold and contain
sensitive information

59
00:05:33,460 --> 00:05:39,489
by the way what's up all in all
encryption doesn't work on a device

60
00:05:39,490 --> 00:05:45,550
itself on a device itself a database is
decrypt it's not equipped

61
00:05:46,060 --> 00:05:50,860
so if and malicious application can take
hold of that content

62
00:05:50,860 --> 00:05:54,520
it could read all of your chap matches
this one wats up

63
00:05:54,520 --> 00:06:02,020
another example is application generated
preferences file that holds all kind of

64
00:06:02,020 --> 00:06:07,419
mysterious and sensitive information
passcode remote servers VPN credentials

65
00:06:07,419 --> 00:06:08,198
etc

66
00:06:08,199 --> 00:06:15,610
not always these content is stored
protectively sometimes developer are

67
00:06:15,610 --> 00:06:23,800
trusting iOS in doing what they think is
iOS job by protecting this credentials

68
00:06:23,800 --> 00:06:27,879
and we'll see that that's the meanest
belief that can be exploited

69
00:06:28,449 --> 00:06:35,139
another example of application sandbox
content is the application generated

70
00:06:35,139 --> 00:06:36,009
cookies

71
00:06:36,009 --> 00:06:42,009
so whenever you open up an internal web
page from an internal application all of

72
00:06:42,009 --> 00:06:45,430
your cookies are stored for that
specific application inside of the

73
00:06:45,430 --> 00:06:51,069
application sandbox which means if you
have authorization cookies such as

74
00:06:51,069 --> 00:06:53,050
session cookies for facebook

75
00:06:53,050 --> 00:06:55,950
they are stored encrypted on your device

76
00:06:55,950 --> 00:07:04,620
any process any malicious process that's
getting axis these cookies can hijack

77
00:07:04,620 --> 00:07:07,590
your session and still your account

78
00:07:07,590 --> 00:07:14,700
so when summarizing the basics of
application sandbox

79
00:07:14,700 --> 00:07:22,409
we understand that application sand box
contents are one of a kind echo system

80
00:07:22,410 --> 00:07:30,660
for each application which iOS by
default protects with the high level of

81
00:07:30,660 --> 00:07:35,730
security for not allowing other
processes to cost that around me

82
00:07:35,730 --> 00:07:42,390
by crossing the boundary between
application sensitive information can be

83
00:07:42,390 --> 00:07:48,300
abused and exploited by malicious
processes and when we speak on malicious

84
00:07:48,300 --> 00:07:49,380
processes

85
00:07:49,380 --> 00:07:55,890
let us have this information in mind and
talk about iOS Mauer

86
00:07:55,890 --> 00:08:00,270
so we're looking at iOS malware

87
00:08:01,440 --> 00:08:08,580
thanks in order for getting a sample
running on a device itself it must

88
00:08:08,580 --> 00:08:13,200
somehow miraculously end itself on that
device then it came like that from the

89
00:08:13,200 --> 00:08:16,110
UM from the apple store right

90
00:08:16,110 --> 00:08:23,550
and in order to get that piece of our on
that specific device that code that now

91
00:08:23,550 --> 00:08:32,820
we must have been following apples rules
and a per rules for any code malware or

92
00:08:32,820 --> 00:08:39,900
not are the following all code running
in an iOS device is like the Ten

93
00:08:39,900 --> 00:08:45,329
Commandments but all code running on an
iOS device must be signed by a

94
00:08:45,330 --> 00:08:53,550
certificate that is provided by appt all
apps that are submitted to apple must go

95
00:08:53,550 --> 00:08:58,469
a very very selective i'll say that's
the right word

96
00:08:58,470 --> 00:09:05,610
selective a review process application
review process which may take swift

97
00:09:05,610 --> 00:09:09,100
amount of time or a large amount of time
you can get you banned

98
00:09:09,100 --> 00:09:17,800
or rejected for hosting your application
inside Apple storm all certificate

99
00:09:17,800 --> 00:09:23,890
applications must be identified in order
to get a developer's that difficult you

100
00:09:23,890 --> 00:09:28,750
must supply apple with the
identification means of who you are or

101
00:09:28,750 --> 00:09:29,830
if your company

102
00:09:29,830 --> 00:09:33,820
all of your legal documents and apple
has the possibility to request more and

103
00:09:33,820 --> 00:09:39,280
more identification if it feels that
something is not right with your

104
00:09:39,280 --> 00:09:44,920
application for the developer
certificates all the installations of

105
00:09:44,920 --> 00:09:50,979
any source of application is going to be
validated once its installed and that's

106
00:09:50,980 --> 00:09:55,900
a new mitigation of the Apple as
introducing iOS 9 to mitigate against

107
00:09:55,900 --> 00:10:02,620
malicious distributor certificates that
were abused in order to create on and

108
00:10:02,620 --> 00:10:11,260
all of our installation from the more so
if you want to install an application on

109
00:10:11,260 --> 00:10:17,439
the device you have to go through these
rules needs to stay that any misbehaving

110
00:10:17,440 --> 00:10:24,490
application will be removed any
misbehaving developer will be targeted

111
00:10:24,490 --> 00:10:30,760
with actions and every installation
requires to be signed by these

112
00:10:30,760 --> 00:10:33,490
certificates so the certificates the big
deal

113
00:10:33,490 --> 00:10:40,090
it's big deal that's one of the main
mechanism apple had kept its guard and

114
00:10:40,090 --> 00:10:49,420
protect by requiring any developer to
supply identification means that you can

115
00:10:49,420 --> 00:10:56,469
create any code you wish but once apple
has found about it and discovered it

116
00:10:56,470 --> 00:11:02,590
it's going to cost you with attribution
your act might be pulled out you might

117
00:11:02,590 --> 00:11:10,090
be targeted by legal whatever with
whatever Apple feels like which we came

118
00:11:10,090 --> 00:11:11,290
to learn

119
00:11:11,290 --> 00:11:15,280
just in the past two weeks right so if
you're aware of not aware

120
00:11:16,150 --> 00:11:22,090
Stefan's application has been removed by
the FM the app store because apple had

121
00:11:22,090 --> 00:11:22,440
clean

122
00:11:22,440 --> 00:11:25,710
that violated private api

123
00:11:25,710 --> 00:11:30,960
now that's a debate that can be powdered
but there's a live demonstration of

124
00:11:30,960 --> 00:11:38,490
apples be using that attribution against
whoever the heat they feel is breaking

125
00:11:38,490 --> 00:11:44,130
the rules when you look at more
classical example you can see that

126
00:11:44,130 --> 00:11:50,460
application of malicious application
were hosted on the app store such as

127
00:11:50,460 --> 00:11:57,900
Erick helper and the xcode ghost was
infecting iOS builds shipping to apple

128
00:11:57,900 --> 00:12:04,680
passing app review being hosted on the
app store and were very good arm

129
00:12:04,680 --> 00:12:08,640
articulated by cloud side from palo alto
networks and is long

130
00:12:09,570 --> 00:12:15,840
another example from malware on us as my
where that came from a distributing

131
00:12:15,840 --> 00:12:20,940
certificates and all provisions of
provision all device certificate that

132
00:12:20,940 --> 00:12:28,050
gets abused such as masks attack or he
specter that means that i can create a

133
00:12:28,050 --> 00:12:32,670
malware is sign it with this certificate
and they can send a link to anybody to

134
00:12:32,670 --> 00:12:33,870
install it

135
00:12:33,870 --> 00:12:36,870
but again once Apple identifies you

136
00:12:37,560 --> 00:12:41,369
it knows how to knock on your door it
has your address it has your name

137
00:12:42,000 --> 00:12:53,700
so if you think about it the ROI on our
creation and iOS was not that high but

138
00:12:53,700 --> 00:13:00,330
Apple has changed that it will see how
another example or maybe more

139
00:13:00,840 --> 00:13:08,339
the previous example what you can call a
scale where or a copycat application by

140
00:13:08,339 --> 00:13:13,230
using the app review process i can
upload a copy cat application hijacking

141
00:13:13,230 --> 00:13:18,000
the entire content of the presentable
layer of that application would look the

142
00:13:18,000 --> 00:13:22,800
same on the app store user will download
will pay for that and I got my bucks for

143
00:13:22,800 --> 00:13:24,479
the money right

144
00:13:24,480 --> 00:13:27,510
but in the old case a long run

145
00:13:27,510 --> 00:13:32,040
Apple knows who did that an applicant
attribute that if you choose to

146
00:13:34,200 --> 00:13:40,980
when looking and I our capabilities okay
so we know what the risk our what's the

147
00:13:40,980 --> 00:13:43,320
game for us for creating mouth

148
00:13:43,320 --> 00:13:48,690
we look at the game so analyzing
historical malware on iOS

149
00:13:48,690 --> 00:13:56,370
so you can take private api and abuse
them your extent i install or remove

150
00:13:56,370 --> 00:14:01,710
additional resources on the operating
system access to the address book

151
00:14:02,280 --> 00:14:10,170
access to users Gallinger and meetings
extract data from its meta data from its

152
00:14:10,170 --> 00:14:16,770
photostream access microphone hot like
plugging gps location and especially pin

153
00:14:16,770 --> 00:14:22,770
phone GPS location if I know where you
live because I'm tracking you with the

154
00:14:22,770 --> 00:14:26,819
GPS permission and it's been pointing

155
00:14:26,820 --> 00:14:30,510
now I know where you live and it
probably can assume what's your income

156
00:14:30,510 --> 00:14:34,590
tax and what's your income level because
I know which never you live in and I

157
00:14:34,590 --> 00:14:38,670
know where you work and how much time
you're spending at work because you're

158
00:14:38,670 --> 00:14:43,140
not moving and that's going to cost you
and backfired for you with your health

159
00:14:43,140 --> 00:14:44,340
insurance right

160
00:14:44,340 --> 00:14:51,060
so having that meta data is very very
efficient for causing either direct

161
00:14:51,060 --> 00:14:57,900
damage or collateral damage more
capabilities as the anonymizing the user

162
00:14:57,900 --> 00:14:58,650
right

163
00:14:58,650 --> 00:15:04,170
accessing private api to have a pinpoint
identification of the device itself so

164
00:15:04,170 --> 00:15:08,910
even if you upgrade downgrade or cell
device we know where the bread that

165
00:15:08,910 --> 00:15:15,089
device came from hijacking little bit
application resources fishing for

166
00:15:15,090 --> 00:15:23,070
credentials and even polymorphism using
a tree sign frameworks such as lua or

167
00:15:23,070 --> 00:15:28,350
javascriptcore in order to supply remote
updating of your malware capabilities

168
00:15:28,350 --> 00:15:37,710
so all of that is very very promising
but we came to a basic understanding

169
00:15:37,710 --> 00:15:45,600
which is if you create a malware either
going through an app review or not going

170
00:15:45,600 --> 00:15:47,279
through an app review

171
00:15:47,279 --> 00:15:51,569
an apple had found out about you or
someone has tipped them

172
00:15:51,569 --> 00:15:58,860
you have your identification and you go
to get attributed and all of this has

173
00:15:58,860 --> 00:16:05,819
changed dramatically when Apple has
introduced its home-brewed certificate

174
00:16:05,819 --> 00:16:12,930
program so not ladies

175
00:16:12,930 --> 00:16:24,120
Apple has been produced its sign in with
apple ID program which allows anyone to

176
00:16:24,120 --> 00:16:26,430
gain access to a developer certificate

177
00:16:26,430 --> 00:16:34,680
anyone can gain access to a developer
certificate

178
00:16:34,680 --> 00:16:41,189
anyone can gain access to a developer
certificate without supplying any

179
00:16:41,189 --> 00:16:45,509
identification or proper identification
to apple

180
00:16:46,019 --> 00:16:49,019
all you need is an email

181
00:16:49,559 --> 00:16:58,769
that's it so this change the rules was
introduced a were together with xcode

182
00:16:58,769 --> 00:16:59,699
seven

183
00:16:59,699 --> 00:17:07,319
it is called on signing with Apple ID
and it allow anyone with a valid email

184
00:17:07,319 --> 00:17:12,389
gain access to certificate that will
sign code and will cause it to be

185
00:17:12,390 --> 00:17:17,100
installable and it was available on any
and jailbroken iOS device

186
00:17:17,099 --> 00:17:25,079
sounds very promising right let's see
how easy it is to create an anonymous or

187
00:17:25,079 --> 00:17:28,079
fake apple ID

188
00:17:39,870 --> 00:17:46,080
you go into Google and create a new
gmail account of course your falsifying

189
00:17:46,080 --> 00:17:49,830
all the data because you don't want
attribution

190
00:17:49,830 --> 00:17:55,350
so you create a mary poppins account and
you validate that

191
00:17:56,100 --> 00:18:01,199
yeah I go too much time

192
00:18:01,200 --> 00:18:05,309
miss behave right and there you go
welcome to your new gmail

193
00:18:05,309 --> 00:18:12,600
so now let's do the same with apple
right so you going to apple icloud or

194
00:18:12,600 --> 00:18:17,459
any other Apple provided services and
create a new Apple ID with your just

195
00:18:17,460 --> 00:18:19,710
faked out gmail account

196
00:18:19,710 --> 00:18:23,790
you probably can automate that right
it's not a big deal

197
00:18:23,790 --> 00:18:35,730
and once you've done that you need to go
into your fake gmail invalidate your

198
00:18:35,730 --> 00:18:41,640
falsify developer account on apple right
and that's it you're done

199
00:18:42,330 --> 00:18:48,270
welcome you could connect with xcode
download your developer certificates and

200
00:18:48,270 --> 00:18:57,990
start signing any code you wish on a non
jailbroken iOS device very simple but

201
00:18:57,990 --> 00:19:04,980
Apple has introduced server capabilities
restriction to this program of sign in

202
00:19:04,980 --> 00:19:16,320
with apple ladies apple had a clear that
that should not have access to apple p

203
00:19:16,320 --> 00:19:22,290
now should not have access to the
Associated domains or game center or

204
00:19:22,290 --> 00:19:25,409
iCloud or VPN configuration

205
00:19:26,429 --> 00:19:33,300
those are off limits but you want gps
pinpoint location in background be my

206
00:19:33,300 --> 00:19:33,870
guess

207
00:19:33,870 --> 00:19:41,580
you want access to healthcare
information medical data information you

208
00:19:41,580 --> 00:19:42,510
can have it

209
00:19:42,510 --> 00:19:48,240
you want to access to the users we're
about its home security system at home

210
00:19:48,240 --> 00:19:53,280
all of his elmo start air conditioning
shaders configuration of

211
00:19:53,280 --> 00:19:57,090
your home kit be my guess that doesn't
concern me

212
00:19:57,900 --> 00:20:03,120
so we're looking in all of these
capabilities

213
00:20:04,740 --> 00:20:08,700
now we can create our own first of now
right

214
00:20:08,700 --> 00:20:13,350
it doesn't go through apple we don't
submit any code to go through code

215
00:20:13,350 --> 00:20:14,010
review

216
00:20:14,010 --> 00:20:21,000
nobody will know what we have created
and apple has helped us by lending a

217
00:20:21,000 --> 00:20:21,540
hand

218
00:20:21,540 --> 00:20:30,389
since iOS 9 since iOS not an apple has
changed the way that itunes backups and

219
00:20:30,390 --> 00:20:36,480
I club backups work prior to iOS 9 all
never application were bundled together

220
00:20:36,480 --> 00:20:40,110
with your data when performing a backup

221
00:20:40,110 --> 00:20:44,639
so when you perform a backup you have a
copy of the original application sitting

222
00:20:44,640 --> 00:20:50,340
on your desktop and all of its content
sitting along with it

223
00:20:50,340 --> 00:20:56,760
and since iOS 9 app had removed the
possibility of backing up the original

224
00:20:56,760 --> 00:21:04,140
application which means if you buy some
way of magic in still a malware on a

225
00:21:04,140 --> 00:21:05,040
device

226
00:21:05,040 --> 00:21:12,600
you cannot analyze it on your desktop
because you don't have access to it

227
00:21:12,600 --> 00:21:19,889
you need to have a sandbox xscape
exploit or have a jailbreak exploit in

228
00:21:19,890 --> 00:21:24,570
order to gain access to that space of
code because it's on a device

229
00:21:24,570 --> 00:21:28,679
it's not going to be backed up once it's
there it stick

230
00:21:28,680 --> 00:21:33,900
you can either delete it or leave it but
you cannot analyze it you don't have

231
00:21:33,900 --> 00:21:39,780
access to it and looking at these
playgrounds

232
00:21:40,470 --> 00:21:44,040
we have the following capabilities

233
00:21:44,040 --> 00:21:49,710
I can pinpoint your location when every
time I want by abusing the background

234
00:21:49,710 --> 00:21:51,510
pinpoint location functionality

235
00:21:51,510 --> 00:21:53,330
thank you

236
00:21:53,330 --> 00:22:02,270
a gain access to your address book by
approving your address book access and

237
00:22:02,270 --> 00:22:09,110
see all of your new connections your
contacts emails and more

238
00:22:09,110 --> 00:22:17,330
I could go even further from copying all
of your photo stream data and videos and

239
00:22:17,330 --> 00:22:21,949
try to extract sensitive information
from the EXIF metadata of your photo .

240
00:22:21,950 --> 00:22:28,310
one of the alleged ways that got Sean
Penn

241
00:22:28,310 --> 00:22:36,500
so much community access your calendar
data and heck I can access your health

242
00:22:36,500 --> 00:22:43,220
data see what's your glucose reading our
if you're having any cardiovascular

243
00:22:43,220 --> 00:22:51,860
problems or any other health data that
is stored on the device and if i was in

244
00:22:51,860 --> 00:22:56,840
the original application submitting this
requirement to Apple Apple has

245
00:22:56,840 --> 00:23:01,490
specifically claim that you must provide
HIPAA compliance to all of your

246
00:23:01,490 --> 00:23:05,780
accessing to medical records medical
data

247
00:23:05,780 --> 00:23:10,010
you must follow that that data model
it's not even it's not that you can get

248
00:23:10,010 --> 00:23:13,760
access very easy by going through apple

249
00:23:13,760 --> 00:23:19,850
so why should i if i can just install it
on your device and that's that

250
00:23:19,850 --> 00:23:26,270
when you look at it from a summarization
point of view when you create an hour

251
00:23:26,270 --> 00:23:29,510
utilizing home root certificate

252
00:23:29,510 --> 00:23:34,879
you don't have to throw after view or
code inspection so nobody knows what you

253
00:23:34,880 --> 00:23:38,780
have inside of your code once the code
is installed on the device

254
00:23:39,410 --> 00:23:43,850
no one can identify what's the true
meaning of that code because Apple has

255
00:23:43,850 --> 00:23:51,350
start backing that up to the pc or to
cloud and because utilized home-brewed

256
00:23:51,350 --> 00:23:52,459
certificate

257
00:23:52,460 --> 00:23:56,780
you didn't send any identification
factors to apple so they don't have

258
00:23:56,780 --> 00:24:02,840
anyone to a commute with all they have
is a falsified email account so you

259
00:24:02,840 --> 00:24:05,659
don't get security

260
00:24:05,660 --> 00:24:11,240
all of this pauses might be very looking
like very tedious but actually it can be

261
00:24:11,240 --> 00:24:12,650
very very much

262
00:24:12,650 --> 00:24:18,380
autumn eyes and this is suicide which I
have presented the black hat

263
00:24:18,380 --> 00:24:21,560
asia in the past month

264
00:24:22,100 --> 00:24:27,230
it's a framework to create an evil
client my we're out of an original

265
00:24:27,230 --> 00:24:33,140
application by simply running it and
connecting the device all the automation

266
00:24:33,140 --> 00:24:40,970
process with Apple cloud is done via the
API of spaceship

267
00:24:41,570 --> 00:24:47,510
it's running on Theo's engine creating a
new template and hooking up in the

268
00:24:47,510 --> 00:24:54,650
application with cyclic a nice pipe for
the evil client functionality so

269
00:24:54,650 --> 00:24:59,300
automatic the process you can create any
evil klein that you want from any

270
00:24:59,300 --> 00:25:04,850
legitimate decrypted application if you
have a copy of so let's see an example

271
00:25:24,340 --> 00:25:32,379
so this is a demo of running suicide
Iran then non jailbroken iOS 9 that to

272
00:25:32,380 --> 00:25:41,110
you are one but it's there running on
nine . 3 . 2 so Suicider is available or

273
00:25:41,110 --> 00:25:47,020
github under mi3 get help and it runs on
top of Theo's so you have a new template

274
00:25:47,020 --> 00:26:01,059
called suicide you choose it you enter a
project name or whatever and you're

275
00:26:01,059 --> 00:26:09,610
copying your decrypted application to be
hosted in to your suicide folder and

276
00:26:09,610 --> 00:26:19,209
then you around Suicider when the phone
is connected via USB connect your phone

277
00:26:19,840 --> 00:26:25,600
press ENTER and have internet
connectivity because you're going to

278
00:26:25,600 --> 00:26:31,990
call apple and ask for signing
certificates and provision for fall for

279
00:26:31,990 --> 00:26:33,669
that specific application

280
00:26:33,669 --> 00:26:43,450
I'm speeding things up so it's create
the injected the eyelid with psych

281
00:26:43,450 --> 00:26:48,520
report on it and I spy on it and it
connects for Apple asking for a

282
00:26:48,520 --> 00:26:53,649
provision for file for that device with
that piece of malware and now once it

283
00:26:53,649 --> 00:26:54,789
downloads it

284
00:26:54,789 --> 00:26:59,289
it's real signs the original application
as an evil client so now the skype

285
00:26:59,289 --> 00:27:06,190
application has been injected with all
of this malicious content and has the

286
00:27:06,190 --> 00:27:09,309
same look and feel the same behavior

287
00:27:09,309 --> 00:27:16,960
+ + of the original application and best
of all no one with not a technical diet

288
00:27:16,960 --> 00:27:21,429
background will pick up under the
profile management to look at the

289
00:27:21,429 --> 00:27:28,210
available profile for that specific
device it looks like a Skype it acts

290
00:27:28,210 --> 00:27:29,350
like skype

291
00:27:29,350 --> 00:27:34,270
apparently the skype but it's not a real
skype is an evil fine

292
00:27:34,270 --> 00:27:37,250
it's an evil skype or even Facebook or
whatever you want

293
00:27:37,250 --> 00:27:42,890
and to prove that we're connected to
that instance over psychiatry more chill

294
00:27:42,890 --> 00:27:48,650
so connecting over it getting access to
any internal memory object this case a

295
00:27:48,650 --> 00:27:54,350
uilabel and their athlete manipulating
it to your knees which is this case just

296
00:27:54,350 --> 00:27:59,449
editing a uilabel but the same thing you
can do with any other memory object one

297
00:27:59,450 --> 00:28:06,500
time on that device decryption keys chat
history passcodes VPN credentials

298
00:28:06,500 --> 00:28:12,350
whatever you want MDM policies and more
and more

299
00:28:12,350 --> 00:28:21,919
ok so now skype is in control of the
cycle right the attacker very easy i

300
00:28:21,920 --> 00:28:26,150
didn't have to ready call just click
next click Next and I have an evil

301
00:28:26,150 --> 00:28:33,170
flying it looks the same on the
application one skype to skype so these

302
00:28:33,170 --> 00:28:35,750
skypes which one is the correct one

303
00:28:35,750 --> 00:28:43,880
the user may never know so when looking
at this attack vector once my white

304
00:28:43,880 --> 00:28:46,250
might ask ok so wait

305
00:28:46,250 --> 00:28:51,530
in order to actually get the device in
fact that you have to have access to the

306
00:28:51,530 --> 00:28:52,940
device right

307
00:28:52,940 --> 00:28:56,270
the passcode protected and a passcode
protected but you have to have physical

308
00:28:56,270 --> 00:29:00,770
access devices cannot install this via
telepathy right

309
00:29:00,770 --> 00:29:05,000
it's not a remote installation you have
to have access the device that's correct

310
00:29:05,570 --> 00:29:11,840
think about spouse ex-wife ex
girlfriends or ex-boyfriend ex-husband a

311
00:29:11,840 --> 00:29:15,740
colleague or even better think about all
of these

312
00:29:16,310 --> 00:29:22,220
i pound stores so you dropped the phone
on the floor now the touch screen is

313
00:29:22,220 --> 00:29:22,970
broken

314
00:29:22,970 --> 00:29:29,420
have you ever heard of someone is doing
doing a full hardware reset on iOS

315
00:29:29,420 --> 00:29:35,360
device before it goes through life when
we put only the fanatics way

316
00:29:35,870 --> 00:29:40,580
so now each and every one of these doors
or particularly anybody with access to

317
00:29:40,580 --> 00:29:47,870
your code to your device have the
possibility to one malicious code on it

318
00:29:47,870 --> 00:29:50,750
because Apple has changed the rule

319
00:29:50,750 --> 00:29:54,260
anybody with an email can have signing
certificates

320
00:29:54,260 --> 00:29:58,940
even these guys at the phone repair shop
or your colleagues or your friend or

321
00:29:58,940 --> 00:30:00,650
your ex or whatever

322
00:30:00,650 --> 00:30:06,290
utilizing all of these capabilities that
Apple has left behind available to use

323
00:30:06,290 --> 00:30:12,139
back rounding no GPS context you'd just
need to install and then approve the

324
00:30:12,140 --> 00:30:14,900
one-time acceptance for that

325
00:30:14,900 --> 00:30:18,260
privacy information

326
00:30:18,260 --> 00:30:24,110
so what's the big idea right but let's
try to take it to the next level

327
00:30:24,770 --> 00:30:34,460
can I use this to gain access to these
rich content that was laying around

328
00:30:34,460 --> 00:30:35,000
right

329
00:30:35,000 --> 00:30:38,840
can i use skype to take over of the
skype messages

330
00:30:38,840 --> 00:30:44,209
can I use an evil wats up to gain access
to the evil wats of messages can I use

331
00:30:44,210 --> 00:30:50,720
this evil password manager to gain
access to your passwords without knowing

332
00:30:50,720 --> 00:30:54,830
the password or by allowing me to modify
its behavior

333
00:30:55,340 --> 00:31:01,820
can my Eva client take ownership of the
original application sandbox

334
00:31:01,820 --> 00:31:06,470
well that is sad jack

335
00:31:06,980 --> 00:31:20,180
so sad jacking in fact is allowing the
evil client to exploit the naive of the

336
00:31:20,180 --> 00:31:26,150
operating system by allowing him to gain
access to the original content that the

337
00:31:26,150 --> 00:31:33,170
original application created and save
them a device and when you're looking at

338
00:31:33,170 --> 00:31:34,760
a sample example

339
00:31:34,760 --> 00:31:40,850
we're going back to the FBI veces apple
or classes are encrypted application so

340
00:31:40,850 --> 00:31:45,709
now we have an encrypted application we
have someone who wants to extract that

341
00:31:45,710 --> 00:31:50,240
application the application has some
kind of a brute force mitigation

342
00:31:50,240 --> 00:31:54,320
implemented in order to wipe all about
that once five or three or two

343
00:31:54,320 --> 00:32:00,020
consecutive failed passcode were entered
and what you would like to do is not pay

344
00:32:00,020 --> 00:32:03,410
1.2 million dollars in order for
creating a

345
00:32:03,990 --> 00:32:13,080
food first possibility but utilizing an
evil client to trick the application

346
00:32:13,080 --> 00:32:19,350
behavior and gain access to the user
content so all of these security

347
00:32:19,350 --> 00:32:26,669
container sits on the phone and we would
like to use our evil client with patch

348
00:32:26,670 --> 00:32:28,890
functionality to take over that

349
00:32:28,890 --> 00:32:38,010
original content by using sound jacket
so sad jacking on iOS 8 i3 is very easy

350
00:32:38,010 --> 00:32:39,000
right

351
00:32:39,000 --> 00:32:43,620
because Apple he didn't implement
anything to mitigate against if you have

352
00:32:43,620 --> 00:32:49,050
the same bundle ID with the - Apple we
treat your evil flying as the original

353
00:32:49,050 --> 00:32:50,159
application

354
00:32:50,160 --> 00:32:57,000
you just install it and bam you have
access so okay that's where is pretty

355
00:32:57,000 --> 00:32:58,110
outdated

356
00:32:58,110 --> 00:33:01,199
what happened after a . 3

357
00:33:01,200 --> 00:33:07,800
well Apple had figure out that this is a
big vulnerability because anybody who

358
00:33:07,800 --> 00:33:13,740
has access to your phone can just write
down now where to take over all of your

359
00:33:13,740 --> 00:33:15,870
original application

360
00:33:15,870 --> 00:33:20,309
so what is limited to fix it says are
you have a mismatch application

361
00:33:20,309 --> 00:33:22,139
identifier entitlement

362
00:33:22,140 --> 00:33:27,390
you're up creator application the evil
client application doesn't have the same

363
00:33:27,390 --> 00:33:35,130
bundle ID is the original application so
i would install it won't upgrade and

364
00:33:35,130 --> 00:33:38,100
that's fixed everything for a . 3

365
00:33:38,100 --> 00:33:48,449
that was what Apple has belief but
apparently apples patch only the front

366
00:33:48,450 --> 00:33:51,450
door but the back doors left wide open

367
00:33:52,050 --> 00:33:58,530
apple had forgotten to patch the
vulnerability on the restore process

368
00:33:59,340 --> 00:34:12,790
so Allah San jacking on any iOS version
can be done very easily by the

369
00:34:12,790 --> 00:34:17,020
packing up the device with all of the
rich content that the application hold

370
00:34:17,020 --> 00:34:20,590
deleting the original application

371
00:34:22,510 --> 00:34:27,760
installing the evil client which now be
acceptable because it's not operating

372
00:34:27,760 --> 00:34:34,900
anything and then performing a restore
forces and by performing the restore

373
00:34:34,900 --> 00:34:41,650
process all of the rich content of that
specific application of being served to

374
00:34:41,650 --> 00:34:43,120
our evil client

375
00:34:43,120 --> 00:34:57,940
so here's a demo let's look at one
specific application in this case the

376
00:34:57,940 --> 00:35:08,350
passcode manager content so we set up
the stage we download this possible

377
00:35:08,350 --> 00:35:09,279
manager

378
00:35:09,280 --> 00:35:22,270
its installed on the device we set a
passcode and as you can see there is a

379
00:35:22,270 --> 00:35:26,560
brute force mitigation if you will try
to many attempts and if you could

380
00:35:26,560 --> 00:35:30,130
secretive fail is going to wipe all the
data and you get nothing

381
00:35:31,240 --> 00:35:35,560
sounds familiar right but this case not
a specific device you can have several

382
00:35:35,560 --> 00:35:39,160
of these on the same device it's a
application container equipped

383
00:35:53,140 --> 00:36:00,160
now we have this application that's why
any run suicide on it and try to run it

384
00:36:00,160 --> 00:36:07,450
on an upgrade process right so we're on
suicide on the application we create an

385
00:36:07,450 --> 00:36:16,118
evil client the original application is
still installed which will try to

386
00:36:16,119 --> 00:36:20,799
install the application and upgrade the
original application with the evil

387
00:36:20,799 --> 00:36:23,890
client but as we said Apple had patch
this vulnerability

388
00:36:24,490 --> 00:36:29,919
it won't allow install to upgrade an
evil client with the original

389
00:36:29,920 --> 00:36:31,960
application install ready

390
00:36:31,960 --> 00:36:44,230
so in this case what we can do is take
the back door and use a backup process

391
00:36:44,230 --> 00:36:47,230
and the restore process

392
00:36:52,120 --> 00:37:01,390
after we wiped out that application and
by restoring the original content on top

393
00:37:01,390 --> 00:37:08,950
of our evil client iOS and left the door
open for it to gain axis so now our evil

394
00:37:08,950 --> 00:37:14,290
client have access to the original
generated user content

395
00:37:14,290 --> 00:37:19,180
it has access to the GPS awareness as
you add this to all of this capabilities

396
00:37:19,180 --> 00:37:23,710
that we talked before but also has
access to all of his personal and

397
00:37:23,710 --> 00:37:34,450
private intimate data but the data is
encrypted right so what we can do is

398
00:37:34,450 --> 00:37:38,560
mitigated against the brute force
mitigation right so you can vent the

399
00:37:38,560 --> 00:37:47,710
brute force mitigation by removing that
penalty in this specific functionality

400
00:37:47,710 --> 00:37:52,330
is that we can ask the database the
internal application using psych ripped

401
00:37:52,330 --> 00:37:58,060
and it i'm running is the password
equals 3 without going through the

402
00:37:58,060 --> 00:38:01,090
penalty process the penalty function
right

403
00:38:01,090 --> 00:38:05,590
so if the penalty function is not called
that's good

404
00:38:05,590 --> 00:38:12,610
so we have a cycle shell side loaded
with various functionality on side of

405
00:38:12,610 --> 00:38:18,280
the security container application and
you want to look for us all of this

406
00:38:18,280 --> 00:38:25,870
effort right so what's easier to do then
- pipe out a dictionary with passwords

407
00:38:25,870 --> 00:38:32,440
straight through shell right take
metasploit dictionary

408
00:38:32,440 --> 00:38:41,320
unix password and run it over budget
over to cycle and consecutive asking is

409
00:38:41,320 --> 00:38:49,180
the password equal was forcing without
going through the penalty and we had

410
00:38:49,180 --> 00:38:55,210
only five consecutive failed attempts on
the original application but on the evil

411
00:38:55,210 --> 00:38:57,160
client we can do whatever we want

412
00:38:57,160 --> 00:39:00,279
so I'll speed this a bit because it

413
00:39:00,280 --> 00:39:04,190
I chose the less password so we have
enough and then what time

414
00:39:04,190 --> 00:39:09,589
and you can see for each and every one
of these passwords the answer is false

415
00:39:09,589 --> 00:39:16,369
right 0 is false one is true in this
case so this is what's forcing

416
00:39:16,369 --> 00:39:20,750
low-budget do for thing doesn't require
1.2 million dollars although i would

417
00:39:20,750 --> 00:39:30,829
like the bonus but yeah but eventually
we find out that the password is

418
00:39:30,829 --> 00:39:39,530
raspberry I hate was so that being in
raspberry on the security container

419
00:39:39,530 --> 00:39:44,480
application and welcome attacker

420
00:39:44,480 --> 00:39:49,040
you now have access to the previous
installed application security content

421
00:39:49,040 --> 00:39:55,310
that was encrypted and was mitigated
with high cryptographic engine

422
00:39:55,310 --> 00:40:04,369
pbk tf2 or whatever so by mixing and
matching these capabilities and thus and

423
00:40:04,369 --> 00:40:18,980
jacking one can truly profit from an iOS
Mauer and this vulnerability was

424
00:40:18,980 --> 00:40:29,480
disclosed responsibly to apple on
january january apple had responded and

425
00:40:29,480 --> 00:40:34,760
their latest update was that they are
working on a fixed and they got it we

426
00:40:34,760 --> 00:40:40,250
produce but the sand jacker tool that
was about to release in this

427
00:40:40,250 --> 00:40:44,599
presentation will have to wait until
that patch is implemented in order for

428
00:40:44,599 --> 00:40:55,310
not allowing sensitive content being
exploited by armed by these tool so hook

429
00:40:55,310 --> 00:40:58,279
up with the website and my three
security com

430
00:40:58,280 --> 00:41:01,880
and once the fix is implemented we
release this and jacket that will

431
00:41:01,880 --> 00:41:05,540
automate this process and

432
00:41:08,430 --> 00:41:13,799
now it's a time for a bit Q&A if you
have some questions

433
00:41:19,740 --> 00:41:26,339
so you mentioned ok so you mentioned
being able to do this on a device even

434
00:41:26,340 --> 00:41:29,580
if you don't have the passcode

435
00:41:29,580 --> 00:41:33,060
wouldn't the user still get like the
dialogue that they must trust this

436
00:41:33,060 --> 00:41:38,430
developer even - have the basket or the
advice doesn't have a passcode implement

437
00:41:38,430 --> 00:41:39,569
right

438
00:41:39,570 --> 00:41:44,040
if you if you give your phone to a
repair shop or your girlfriend or

439
00:41:44,040 --> 00:41:48,210
someone intimate a co-worker someone who
has access

440
00:41:48,210 --> 00:41:52,800
it doesn't require any more than five
seconds to install that are an evil

441
00:41:52,800 --> 00:41:59,220
client and I know where user will not
self we go into application sorry

442
00:41:59,220 --> 00:42:04,140
preferences and then settings and then
device management profiles me that skype

443
00:42:04,140 --> 00:42:09,569
was provision by a different it's not an
app store application that's that's a

444
00:42:09,570 --> 00:42:15,000
whole total of change of mind that he
wouldn't expect but yes you must have a

445
00:42:15,000 --> 00:42:19,500
passcode on for that device so repair
shop is a very very common

446
00:42:19,500 --> 00:42:25,020
uh phenomenon to have your device and
the passcode together or someone

447
00:42:25,020 --> 00:42:29,910
intimate with the device or share device
like there's a lot of people running on

448
00:42:29,910 --> 00:42:37,589
especially our own price equipment on
the inside of the startup you have a

449
00:42:37,590 --> 00:42:42,300
ipad pro which is one for the team and
you have different accounts on it and

450
00:42:42,300 --> 00:42:48,690
usually usually rely on the logon screen
to protect their privacy or pasco screen

451
00:42:48,690 --> 00:42:53,550
to protect the privacy but that can be
circumvented think about exploring this

452
00:42:53,550 --> 00:42:57,510
by the evil employees let's say I'm
inside of a corporate and I have this

453
00:42:57,510 --> 00:43:02,070
nvm that's blocking me from doing all of
the things i want to do exfiltrate data

454
00:43:02,850 --> 00:43:08,910
well I could evil client the protective
storage application and X with a doctor

455
00:43:08,910 --> 00:43:13,230
without jailbreaking the device that
caused a lot of damage or a lot of noise

456
00:43:13,230 --> 00:43:17,280
on network without nobody knowing where
they are supposed to that has been

457
00:43:17,280 --> 00:43:20,610
exfiltrated okay thank you

458
00:43:20,610 --> 00:43:21,180
sure

459
00:43:21,180 --> 00:43:29,799
what questions said

460
00:43:29,800 --> 00:43:35,800
that whatsapp is storing messages
unencrypted on the device

461
00:43:35,800 --> 00:43:41,680
you got it huh yeah yeah so uh that I
know only for the latest version right

462
00:43:41,680 --> 00:43:48,069
so it's only created on the networker
and or on its not sure so it's not

463
00:43:48,070 --> 00:43:52,090
encrypted on the device which mean if
you have an enforced encryption of your

464
00:43:52,090 --> 00:43:55,300
iTunes backup or your iCloud backup

465
00:43:56,470 --> 00:44:02,379
it won't be encrypted that means anybody
with a Zacks if I have now we're on your

466
00:44:02,380 --> 00:44:08,260
if i have an hour on your installed on
your pc then review you're gone because

467
00:44:08,260 --> 00:44:14,740
i have uh the certificates to gain
access to your device over Wi-Fi if you

468
00:44:14,740 --> 00:44:18,220
enable Wi-Fi think i could back up

469
00:44:18,220 --> 00:44:21,759
initiate a back up whenever I want with
the certificates

470
00:44:21,760 --> 00:44:25,480
I could back up the conduct of the wats
up and I can harvest them stand away

471
00:44:25,480 --> 00:44:30,160
they're not encrypted if you have
implemented an encrypted storage or you

472
00:44:30,160 --> 00:44:34,120
pass on the item's there's a possibility
of back up and quit my backup or in the

473
00:44:34,120 --> 00:44:39,970
MDM corporation enforce encrypted back
up then this backup will be encrypted

474
00:44:39,970 --> 00:44:44,169
but that can be food force offline right

475
00:44:44,170 --> 00:44:47,350
more questions

476
00:44:50,860 --> 00:44:58,150
yes I have a question so in your demo
you didn't explain how the passcode was

477
00:44:58,150 --> 00:45:02,710
secured so i was wondering since you
talked about backing up the containers

478
00:45:02,710 --> 00:45:04,420
the application containers

479
00:45:04,420 --> 00:45:09,340
you don't talk at all about the kitchen
because if the application is well

480
00:45:09,340 --> 00:45:13,480
implemented is correctly implemented the
passcode will not be in the container

481
00:45:13,480 --> 00:45:17,590
the application container but indication
and for that you have no way of

482
00:45:17,590 --> 00:45:22,450
extracting the occasion in inflammation
if only 50 devices are broken that

483
00:45:22,450 --> 00:45:28,689
that's it that's an excellent question
and the answer is two scenarios

484
00:45:30,700 --> 00:45:35,859
a what is a notification that
application gets when it gets deleted

485
00:45:35,860 --> 00:45:37,030
from the device

486
00:45:37,030 --> 00:45:43,030
what's the modification that we have any
do do apple has any published API that

487
00:45:43,030 --> 00:45:47,500
application gets a notification like
applications going to be deleted ok up

488
00:45:47,500 --> 00:45:49,750
stop there on go wipe out the key chain

489
00:45:49,750 --> 00:45:52,960
but there is no mechanism like this
available

490
00:45:52,960 --> 00:45:58,960
so when application is being deleted all
of the key chain

491
00:45:58,960 --> 00:46:02,350
storage is left inside right

492
00:46:02,920 --> 00:46:09,580
and most of the keychain doctor is being
backed up with the backup

493
00:46:09,580 --> 00:46:15,190
you have to specifically smark any data
file system on the same side

494
00:46:15,730 --> 00:46:18,850
- not back up or it will be backed up

495
00:46:19,360 --> 00:46:25,090
so when you look at mitigation if you're
a developer you must know a mark file

496
00:46:25,090 --> 00:46:31,810
system and NS sorry and attributed to do
not back up and kitchen and mark this

497
00:46:31,810 --> 00:46:36,400
device only this device only tells the
itunes backup process listen this is a

498
00:46:36,400 --> 00:46:40,270
security container encrypted or
protected i don't want it to be

499
00:46:40,270 --> 00:46:44,500
duplicated to itunes to iCloud any back
i'm going to see create another backup

500
00:46:44,500 --> 00:46:49,990
because if you hadn't done that then you
have a security container with an

501
00:46:49,990 --> 00:46:54,370
encrypted secret or a clear text secret
god forbid was getting duplicated

502
00:46:54,370 --> 00:46:55,750
duplicated duplicated

503
00:46:55,750 --> 00:46:59,740
each time the user performs a backup or
automatically because you have items

504
00:46:59,740 --> 00:47:03,919
back up all the time to allow to
anywhere so you have multiple places

505
00:47:03,920 --> 00:47:09,050
multiplication of that secret and goes
it won't be a secret anymore so so as

506
00:47:09,050 --> 00:47:12,620
you mean that the key chain is left
untouched once you remove the

507
00:47:12,620 --> 00:47:16,910
application when you inject your
compromise application with assuming

508
00:47:16,910 --> 00:47:19,430
that you injected with the same you idea
right

509
00:47:19,430 --> 00:47:23,390
but you will sign this application with
your own certificate right

510
00:47:23,390 --> 00:47:27,680
so do you still have access to education
and for me only two shared key chain

511
00:47:27,680 --> 00:47:28,250
right

512
00:47:28,250 --> 00:47:31,940
I want is a great chain group I won't be
able actually to overwrite the original

513
00:47:31,940 --> 00:47:33,320
story right

514
00:47:33,320 --> 00:47:36,140
that is correct so that's a good
medication actually started with

515
00:47:36,140 --> 00:47:37,400
mitigation that's good

516
00:47:37,400 --> 00:47:42,980
good mitigation are using apt groups lab
groups our specific file system

517
00:47:42,980 --> 00:47:48,980
containers that are shared between the
same vendors same developers are not

518
00:47:48,980 --> 00:47:54,170
seeing very same developer bundle
identification but because my malicious

519
00:47:54,170 --> 00:47:59,180
certificates are not one part of these
developers certificates

520
00:47:59,180 --> 00:48:03,799
they won't hatch so if you want to
mitigate against evil flying one safe

521
00:48:03,800 --> 00:48:08,810
location is going to store your data and
a half groups container which what's our

522
00:48:08,810 --> 00:48:12,620
what's up this or you want to hold your
secret

523
00:48:12,620 --> 00:48:20,630
Ivy's or or encrypted hashed inside of
your keychain and that kitchen is not

524
00:48:20,630 --> 00:48:25,100
share by that app so you won't have
access but anything else

525
00:48:25,640 --> 00:48:29,240
relying on iOS default security will get
you

526
00:48:29,240 --> 00:48:32,750
uh exploited any more questions yeah

527
00:48:38,630 --> 00:48:43,880
hi considering to the way of getting
into the phone would be reassigned

528
00:48:43,880 --> 00:48:49,490
application and are the one you explain
what self registering there is another

529
00:48:49,490 --> 00:48:53,720
way of stealing the certificate of the
alleged sign of directors a transmission

530
00:48:53,720 --> 00:48:54,919
happened with course

531
00:48:54,920 --> 00:48:59,360
so would you know what would be the
ratio of male where r that's being seen

532
00:48:59,360 --> 00:49:02,570
so far maybe how more often would it be
vicious

533
00:49:02,570 --> 00:49:06,110
I'm very that it's much harder to steal
the certificate right from the legit

534
00:49:06,110 --> 00:49:08,390
developer right any you know

535
00:49:08,390 --> 00:49:12,770
well although something that you know
any numbers on it maybe uh no I don't

536
00:49:12,770 --> 00:49:16,820
have statistics are but yes it's more
trickier

537
00:49:16,820 --> 00:49:21,080
or it's more difficult to steal
developer certificate would be more

538
00:49:21,080 --> 00:49:22,220
working as well right

539
00:49:22,220 --> 00:49:25,669
that waterboarding I don't know depends
on what your profile of attack

540
00:49:25,670 --> 00:49:30,860
are you trying to distribute an attack
against various appliance or you just

541
00:49:30,860 --> 00:49:33,260
need that high-profile one your ex

542
00:49:33,260 --> 00:49:36,740
I don't want to spy about old people i
just want to spend my XY what I just

543
00:49:36,740 --> 00:49:40,310
want to spy on my kids I want to let him
know what's going on it just doesn't

544
00:49:40,310 --> 00:49:43,520
want to do asking for his passcode or
asking for whatever

545
00:49:43,520 --> 00:49:48,320
have that Daddy monitors you with the
big eye on the icons is pretty down here

546
00:49:48,320 --> 00:49:49,340
for the kit

547
00:49:49,340 --> 00:49:54,530
so I want to monitor his facebook
community communication see if someone

548
00:49:54,530 --> 00:49:55,520
is abusing him

549
00:49:55,520 --> 00:50:00,259
I could take this all of you into
protective states right but the forms of

550
00:50:00,260 --> 00:50:03,110
the same the tools are the same and the
power is the same

551
00:50:03,110 --> 00:50:08,960
it's the agenda behind the power that
will lead into the exploit or the usage

552
00:50:08,960 --> 00:50:11,750
good usage of this functionality

553
00:50:11,750 --> 00:50:15,890
any more questions this is back

554
00:50:20,339 --> 00:50:27,250
yeah

555
00:50:27,250 --> 00:50:33,130
well because I have total control on the
application content

556
00:50:33,130 --> 00:50:36,610
one of the key component in the
application is the info pianist who

557
00:50:36,610 --> 00:50:38,680
enlist this application version

558
00:50:38,680 --> 00:50:43,029
so let's say I installed the malicious
facebook on your account and Facebook

559
00:50:43,030 --> 00:50:46,720
currently is that was seven . nine .
something i'm going to boost your

560
00:50:46,720 --> 00:50:49,720
version to be version 1009

561
00:50:50,380 --> 00:50:56,320
good luck with that right no updates for
a decade or so depends on facebook

562
00:50:56,320 --> 00:50:59,980
places like okay so any more questions
guys

563
00:50:59,980 --> 00:51:07,450
yes so you mentioned that whatsapp
doesn't encrypt things locally does

564
00:51:07,450 --> 00:51:08,230
signal

565
00:51:08,230 --> 00:51:12,670
do you know often that's a good question

566
00:51:22,070 --> 00:51:25,850
that is its encrypted locally

567
00:51:25,850 --> 00:51:30,319
I try to use singer for one of these
demos but i was too damn tedious to

568
00:51:30,320 --> 00:51:36,050
backtrack the description and
presentation because when you think

569
00:51:36,050 --> 00:51:40,100
about it when you have the evil client
and the doctor is decrypted you have

570
00:51:40,100 --> 00:51:44,720
your doctor decrypted and you can do
with whatever you want with it because

571
00:51:44,720 --> 00:51:48,020
it's evil flying it's running on your on
your ground right

572
00:51:48,560 --> 00:51:54,620
think about all these secure chat nobody
can take a screenshot of that

573
00:51:54,620 --> 00:52:00,770
application because it will send a UH
dismissing alert to anybody on the group

574
00:52:00,770 --> 00:52:05,120
saying this user just use the screenshot
and you get shamed

575
00:52:05,120 --> 00:52:08,540
so if it's an evil client and you have
the credentials

576
00:52:08,540 --> 00:52:14,600
you can do whatever you want you have
using wats up right or using or even

577
00:52:14,600 --> 00:52:21,680
client using with uh with signal one of
the most are a key component the

578
00:52:21,680 --> 00:52:25,339
application vendors missing our brand I
protections

579
00:52:25,340 --> 00:52:30,170
because injecting a new dy live in to
the macro file changes a lot of things

580
00:52:30,170 --> 00:52:31,730
right everybody

581
00:52:31,730 --> 00:52:37,010
mostly of getting our noticed a lack of
binary protection a lack of protecting

582
00:52:37,010 --> 00:52:41,690
and and validating application is really
really something that needs to be

583
00:52:41,690 --> 00:52:46,010
considered but we're looking are looking
at it on the long run

584
00:52:46,010 --> 00:52:50,120
everything is running on my device on my
terms on my ground so everything can be

585
00:52:50,120 --> 00:52:51,200
circumvented

586
00:52:51,200 --> 00:52:55,160
it depends if it'd be easy or be
difficult and i will switch to in the

587
00:52:55,160 --> 00:52:56,569
different application

588
00:52:56,570 --> 00:52:59,570
yes

589
00:53:04,849 --> 00:53:08,359
that's a good question

590
00:53:09,170 --> 00:53:13,650
why would have modified it

591
00:53:13,650 --> 00:53:19,950
yeah

592
00:53:19,950 --> 00:53:25,560
well well one if you would like to think
of a secure way of doing it was will be

593
00:53:25,560 --> 00:53:31,109
to distribute different piece having a
PB kdf using all these set of keys

594
00:53:31,109 --> 00:53:38,310
having a bundle ID installation type a
file paths are out and I Star recipient

595
00:53:38,310 --> 00:53:44,700
you can get from from a public API it's
not five API and using that to create

596
00:53:44,700 --> 00:53:51,419
one part of the key getting backwards
back silver on a successful again get

597
00:53:51,420 --> 00:53:55,410
your backward part of the key and then
created a decryption key you can you

598
00:53:55,410 --> 00:53:56,490
keep messages

599
00:53:56,490 --> 00:54:00,180
that's changing things together and
that's the security way of doing it

600
00:54:00,180 --> 00:54:03,540
probably any more questions

601
00:54:04,230 --> 00:54:11,880
ok so the last yes of course

602
00:54:11,880 --> 00:54:27,990
cuz I'm signing it with my spoofed maybe
they made for everything

603
00:54:29,190 --> 00:54:38,430
well Apple can do that Apple connect can
export a lot of a private uh concerning

604
00:54:38,430 --> 00:54:43,950
AP is to the user but currently it's not
that I'm aware even clients in advance

605
00:54:43,950 --> 00:54:49,379
that well sign in with apple ID is not
that I got it awarenesses the

606
00:54:49,380 --> 00:54:55,980
exploitability is very very high because
up until now in order to create a

607
00:54:55,980 --> 00:54:59,369
malware you had to have a developer a
certificate you have to go through

608
00:54:59,369 --> 00:55:00,780
identification with apple

609
00:55:00,780 --> 00:55:04,890
you had to have a lot of hoo-ha which
gets you attributed if something that

610
00:55:04,890 --> 00:55:08,069
happens but all that changed when Apple
change the rules

611
00:55:08,069 --> 00:55:20,819
yes the bundle ID

612
00:55:20,819 --> 00:55:26,579
yes the band ready because even if you
are a developer and you want to create a

613
00:55:26,579 --> 00:55:30,839
new application with the same bundle ID
more later so it's occupied already have

614
00:55:30,839 --> 00:55:32,190
to use what you have

615
00:55:32,190 --> 00:55:37,349
so bad idea is a unique constraint on
Apple backends so in order to create a

616
00:55:37,349 --> 00:55:44,040
faceplate fall facebook after use the
car on facebook facebook - I know 75 and

617
00:55:44,040 --> 00:55:47,369
that's it right there because the dash
is the application extension

618
00:55:47,369 --> 00:55:51,569
they treated the same as the original
application and that's what suicide of

619
00:55:51,569 --> 00:55:55,050
this if you want to look for up any more
questions

620
00:55:57,329 --> 00:56:00,960
maybe and yes that one

621
00:56:04,170 --> 00:56:11,760
no it will help because they have to
implement encryption that is based on a

622
00:56:11,760 --> 00:56:18,000
key that is based with a PB kdf that is
an output of some protection right

623
00:56:18,000 --> 00:56:24,250
yeah I can kick my ass what he did with
you

624
00:56:24,250 --> 00:56:29,860
I can patch it yeah but you have
everything to help me

625
00:56:29,860 --> 00:56:33,700
yeah of course I can fashion you like
your back job protection i catch

626
00:56:33,700 --> 00:56:34,660
anything else

627
00:56:34,660 --> 00:56:39,609
it has to be part of a decryption
process because if it's just a yes or no

628
00:56:39,610 --> 00:56:43,090
question you patch it you patches with
the hope you packed with the bank match

629
00:56:43,090 --> 00:56:45,550
it with the a psychic trip

630
00:56:45,550 --> 00:56:51,250
it's very easy to pack has to be linked
internally with cryptographic that's one

631
00:56:51,250 --> 00:56:53,920
of the oldest top and what is broken
cryptographic window

632
00:56:53,920 --> 00:56:58,930
la pass code screen is just a office eh
it's not doing anything

633
00:56:58,930 --> 00:57:04,330
yes these and so Stefan a sort of
perhaps or jailbreak protection and

634
00:57:04,330 --> 00:57:07,960
there was sort of various people from
claims and there's any reliable way to

635
00:57:07,960 --> 00:57:08,560
do

636
00:57:08,560 --> 00:57:12,040
<operand> twenty </operand> fiction that
can be patched or I mean there's any way

637
00:57:12,040 --> 00:57:18,850
you can pass the school's directly to
the Karen or the answer is no but it

638
00:57:18,850 --> 00:57:19,569
depends

639
00:57:19,570 --> 00:57:26,920
and Alice mean whatever is running as
past your research is past your time

640
00:57:26,920 --> 00:57:33,010
with it you spend intimate time with
that application so as time passes you

641
00:57:33,010 --> 00:57:36,460
gain more knowledge and more knowledge
you gain more power

642
00:57:36,460 --> 00:57:43,060
right so the only way for you to protect
against it with wait to break down the .

643
00:57:43,060 --> 00:57:48,400
the sensitive data and have it stored
either silver side or have encrypted

644
00:57:48,400 --> 00:57:49,780
very harshly

645
00:57:49,780 --> 00:57:53,830
well the encryption can be encrypted
with a passcode that you have one part

646
00:57:53,830 --> 00:57:55,330
of it in the server side

647
00:57:55,330 --> 00:58:00,670
so if we would like to mitigate
brute-forcing let's have let's be doing

648
00:58:00,670 --> 00:58:05,440
it on the server side right one failed
login second fail again third sale you

649
00:58:05,440 --> 00:58:07,240
know I have the control right

650
00:58:07,240 --> 00:58:12,100
the vendor has the control if it's
self-contained on the application then

651
00:58:12,100 --> 00:58:15,670
it's breakable as a function of time and
effort

652
00:58:18,690 --> 00:58:22,290
any more questions guys any more
questions

653
00:58:23,250 --> 00:58:30,720
ok so this is the black and Asia talk i
gave on the evil clients home birth

654
00:58:30,720 --> 00:58:31,919
certificates

655
00:58:31,920 --> 00:58:36,720
you might the videos are still doubt not
there so you might go through the slides

656
00:58:36,720 --> 00:58:39,899
that much more details on the evil
clients

657
00:58:39,900 --> 00:58:45,240
cloud style from palo alto networks is
an excellent security researcher and

658
00:58:45,240 --> 00:58:49,379
he's a very good source for everything
is going on iOS an hour

659
00:58:49,380 --> 00:58:54,630
I think you very much for joining mice
and jacking talk

660
00:58:54,630 --> 00:58:59,970
my name is Hector me and I work for any
security thank you very much like a

661
00:58:59,970 --> 00:59:00,209
little

