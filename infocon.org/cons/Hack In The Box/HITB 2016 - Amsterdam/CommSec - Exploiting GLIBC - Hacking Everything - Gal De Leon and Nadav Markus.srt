1
00:00:15,720 --> 00:00:24,480
ok so they will talk about leveraging CB
2015 7557 for full ESL bypass and we

2
00:00:24,480 --> 00:00:28,770
want to secure shin for foreign profits
so fast

3
00:00:28,770 --> 00:00:31,770
who we are my name is not have not
closed this is gold alone

4
00:00:32,668 --> 00:00:35,669
we are both security researchers at palo
alto networks

5
00:00:36,300 --> 00:00:41,730
it's the R&D centers and located tel
aviv our main focus is an ability

6
00:00:41,730 --> 00:00:45,898
research exploitation and reverse
engineering and we also developed the

7
00:00:45,899 --> 00:00:51,360
expectation for the tops and . solution
and enjoy security in general

8
00:00:51,870 --> 00:00:58,650
so first of all short introduction about
the vulnerability itself a the

9
00:00:58,650 --> 00:01:02,070
vulnerabilities in jeep see it wasn't
discovered by us

10
00:01:02,070 --> 00:01:07,290
it was discovered by google project do
you want three months ago and google

11
00:01:07,290 --> 00:01:12,210
released a python-based clash POC but
they didn't release if you'll see that

12
00:01:12,210 --> 00:01:16,110
allows you to control the instruction
pointer and no is allowed by us to speak

13
00:01:16,110 --> 00:01:16,740
of

14
00:01:16,740 --> 00:01:23,460
so this presentation will focus solely
about exploitation strategy and the red

15
00:01:23,460 --> 00:01:25,830
gaining full code execution

16
00:01:25,830 --> 00:01:30,390
so first of all let's take a look at the
vulnerable function getting the other

17
00:01:30,390 --> 00:01:31,110
info

18
00:01:31,110 --> 00:01:34,979
this function is used to resolve
hostname in a service to an IP address

19
00:01:35,580 --> 00:01:41,100
now the out parameter which is Type A
does info is that are used for usually

20
00:01:41,100 --> 00:01:45,419
connect or bind it was contained IP
address which is way which was resolved

21
00:01:45,420 --> 00:01:51,150
in order to resolve the hostname civil
discourse might be performed

22
00:01:51,150 --> 00:01:56,880
usually but sometimes awful TCPS we've
seen this presentation in development

23
00:01:56,880 --> 00:02:02,130
itself is a classic stack overflow and
when handling more phones dns replies

24
00:02:02,640 --> 00:02:07,409
now it's important to note here that
this this specific code wasn't compiled

25
00:02:07,409 --> 00:02:12,810
with a stock canal your cooking but
using all presented the attack technique

26
00:02:12,810 --> 00:02:15,069
one called a bypass the

27
00:02:15,069 --> 00:02:21,578
cookie if one was present now get it
together in for has a lot of two

28
00:02:21,579 --> 00:02:26,620
different coat pocket and the vulnerable
called pass is reachable

29
00:02:26,620 --> 00:02:31,870
if and only if the hint parameters that
is supplied to it contains the a family

30
00:02:31,870 --> 00:02:37,150
a safe unspecified this parameter means
that we don't care about the type of the

31
00:02:37,150 --> 00:02:41,409
assets that resolve it can be either
ipv4 which will result in a lake called

32
00:02:41,409 --> 00:02:46,120
center of the while or quadruple area
code which we of ipv6 which will result

33
00:02:46,120 --> 00:02:50,769
in quadruple Eric also sent over the
while and it's important to note that

34
00:02:50,769 --> 00:02:55,030
this is the most common use case it's
usually you don't care about the network

35
00:02:55,030 --> 00:02:58,480
layer up on which you communicate with
the server just want to communicate with

36
00:02:58,480 --> 00:02:58,840
it

37
00:02:58,840 --> 00:03:03,129
for example and smtp server that would
want to win an email does not care

38
00:03:03,129 --> 00:03:06,489
whether it gets the next email that the
next service address

39
00:03:06,489 --> 00:03:09,489
vr and I people or ipv6

40
00:03:10,030 --> 00:03:13,269
so let's talk a little bit about the
back

41
00:03:13,269 --> 00:03:20,049
well let's say that i mentioned earlier
that in smtp server tries to lay an

42
00:03:20,049 --> 00:03:20,739
email

43
00:03:20,739 --> 00:03:24,519
you know what to do so it is getting
your info to resolve the in

44
00:03:24,519 --> 00:03:30,400
corresponding host its so-called to get
into the other invoice performed this

45
00:03:30,400 --> 00:03:32,769
will result in similar things

46
00:03:32,769 --> 00:03:37,930
first of all dns query over UDP port 50
sling for both the area code and

47
00:03:37,930 --> 00:03:43,629
quadruple area code is sent in order to
accommodate the incoming response the

48
00:03:43,629 --> 00:03:50,228
James keeps a code uses a la carte
allocate stock buffer a of size 20 40

49
00:03:50,229 --> 00:03:51,069
bytes

50
00:03:51,069 --> 00:03:55,569
now usually this will suffice for
sponsors and therefore this is kind of

51
00:03:55,569 --> 00:03:59,409
an optimization because the market for
studio is a little bit more expensive in

52
00:03:59,409 --> 00:04:04,929
terms of time and using a loca is simply
a matter of documenting the stock . with

53
00:04:04,930 --> 00:04:13,000
a specified amount and as we can see
this pointer is stored inside hospital

54
00:04:13,000 --> 00:04:17,108
for the buff and he goes to FL which we
let us see how they are using the

55
00:04:17,108 --> 00:04:18,579
process of exploitation

56
00:04:18,579 --> 00:04:24,730
now the malicious epochal responds with
a valid the response that

57
00:04:24,730 --> 00:04:33,310
- yeah some response with a dns supply
that Khan has two important

58
00:04:33,310 --> 00:04:34,360
characteristics

59
00:04:34,360 --> 00:04:37,900
first of all it is too large in order to
fit into the buffer

60
00:04:37,900 --> 00:04:41,679
now it's important to note here that
this is not what the stack overflow is

61
00:04:41,680 --> 00:04:48,460
here it correctly locates in your buffer
on the heap using Mac's UDP sighs max a

62
00:04:48,460 --> 00:04:56,380
UDP packet size and in addition and the
blanket flag is set inside the NSA

63
00:04:56,380 --> 00:04:57,670
response headers

64
00:04:57,670 --> 00:05:03,010
now as we can see from the LFC a
compliant class and complained client

65
00:05:03,010 --> 00:05:11,650
should lick worry the dns servile over
tcp if the target is flag was a set the

66
00:05:11,650 --> 00:05:15,099
Gypsy client being a compliant client
flies to do so

67
00:05:15,100 --> 00:05:21,580
so once again both the a and quadruple
area codes are sent over the while now

68
00:05:21,580 --> 00:05:29,650
this time over tcp now first of all dr.
response was a valued area code response

69
00:05:29,650 --> 00:05:31,120
here

70
00:05:31,120 --> 00:05:36,010
they're not hip you my log buffer is
used correctly and it spotted two noted

71
00:05:36,010 --> 00:05:38,170
that he'll actually the response is
valid

72
00:05:38,170 --> 00:05:42,400
the IP address is valid this will be
later used in the positive exploitation

73
00:05:42,400 --> 00:05:49,929
and now here comes the stacks mesh the
quadruple a recalled is malformed it is

74
00:05:49,930 --> 00:05:52,540
wait we are in order to fit the 24 th
bites

75
00:05:52,540 --> 00:05:57,370
so we have this classic stack overflow
or start smashing attack a you might ask

76
00:05:57,370 --> 00:06:00,910
yourself why is there an ability here
because we mark the larger battle

77
00:06:00,910 --> 00:06:06,820
well due to internal beast many buffer
mismanagement the stack buffer is still

78
00:06:06,820 --> 00:06:11,170
being used but the size variable which
contains the size of the buffer was

79
00:06:11,170 --> 00:06:15,100
incorrectly updated to the size of Max
pocket

80
00:06:15,100 --> 00:06:18,880
this gives an attack of the ability to
over light max pocket

81
00:06:18,880 --> 00:06:25,480
- 20 48 bytes on the stock well let's
for the sake of simplicity assume that

82
00:06:25,480 --> 00:06:26,220
the

83
00:06:26,220 --> 00:06:29,250
response buffer is adjacent to the
return address

84
00:06:29,910 --> 00:06:34,200
this means that this is of course a
simplified the view of the

85
00:06:34,729 --> 00:06:41,779
the buffers will of the stocks will see
later and so now the attacker can

86
00:06:41,779 --> 00:06:43,520
control the rip

87
00:06:43,520 --> 00:06:49,639
when we return from the function however
who do exploit this vulnerability on a

88
00:06:49,639 --> 00:06:55,129
modern operating system which contains
more than the exploits mitigation with

89
00:06:55,129 --> 00:07:00,949
in order to detail attackers namely
d'Epinay salon so we want to be able to

90
00:07:00,949 --> 00:07:05,629
execute arbitrary data and in addition
we don't know where anything is located

91
00:07:05,629 --> 00:07:09,050
we don't know where the mothers are
located we don't know what the stockies

92
00:07:09,050 --> 00:07:10,490
we don't know what the hippies

93
00:07:10,490 --> 00:07:15,559
so if we would like to employ up which
is the standard technique in order to

94
00:07:15,559 --> 00:07:20,719
bypass step that execution prevention
and we need to find our gadgets we need

95
00:07:20,719 --> 00:07:23,779
to find in other cells which contain
executable code

96
00:07:24,409 --> 00:07:31,248
so there are several genetic techniques
for SLR bypass and we'll go over it is a

97
00:07:31,249 --> 00:07:36,889
briefly and will say and we'll explain
why we chose not to use them or why they

98
00:07:36,889 --> 00:07:39,860
were not a clipper applicable to a
specific use case

99
00:07:39,860 --> 00:07:46,819
first of all is the non pie executable
method a not by executable method relies

100
00:07:46,819 --> 00:07:51,709
on the fact that one comprise an
executable opening a linux program

101
00:07:51,709 --> 00:07:57,439
passing down the minutes FBI flag
without passing the means FBI flag to GC

102
00:07:57,949 --> 00:08:03,259
this results in a non relocatable a
module and an executable which provides

103
00:08:03,259 --> 00:08:06,740
that dr. with reliable auto says with a
computable code

104
00:08:06,740 --> 00:08:12,289
however we expected to achieve multiple
execution which means that we would want

105
00:08:12,289 --> 00:08:16,068
to exploit a internet-facing the
application

106
00:08:16,069 --> 00:08:20,389
this means that we at least what we
thought we assumed that the application

107
00:08:20,389 --> 00:08:23,059
would be compiled securely with the news

108
00:08:23,059 --> 00:08:27,319
FBI flag as they showed in order to
reduce that mitigate reduce that pack a

109
00:08:27,319 --> 00:08:28,279
possibility

110
00:08:28,279 --> 00:08:34,880
in addition it's not very fun at is
constant versus and another type of ASL

111
00:08:34,880 --> 00:08:38,990
a bypass technique is the remember with
an ability this kind of my abilities

112
00:08:38,990 --> 00:08:42,649
allow us to with memory from inside the
target host now

113
00:08:44,630 --> 00:08:47,870
the pockets that will receive for the
client

114
00:08:47,870 --> 00:08:51,860
the queries do not contain any
information regarding the internal

115
00:08:51,860 --> 00:08:56,780
memory layout of the machine we cannot
infer from them directly with the star

116
00:08:56,780 --> 00:09:01,040
core modules are loaded it and
transforming the stack overflow

117
00:09:01,040 --> 00:09:05,569
attacking to remember with an ability
was not so straightforward and we

118
00:09:05,570 --> 00:09:07,940
wouldn't even know if it was possible at
all

119
00:09:07,940 --> 00:09:11,390
maybe we can do it without crushing the
machine so we decided to skip this

120
00:09:11,390 --> 00:09:12,800
technique

121
00:09:12,800 --> 00:09:17,990
another technique that can be used to
bypass SLR asleep spring over there are

122
00:09:17,990 --> 00:09:20,210
two problems with the specific technique

123
00:09:20,210 --> 00:09:23,360
first of all we're trying to expect a
64-bit machine

124
00:09:23,360 --> 00:09:28,310
this means we have 64-bit virtual other
space and this means that we will

125
00:09:28,310 --> 00:09:32,569
exhaust the physical memory way before
we were able to get a reliable honest

126
00:09:32,570 --> 00:09:38,150
with our data however let's assume that
in some magical way I was able to

127
00:09:38,150 --> 00:09:43,640
achieve a reliable address with our data
we still have been able so this . i want

128
00:09:43,640 --> 00:09:46,160
to be executable throughout back to
square one

129
00:09:46,160 --> 00:09:53,959
we still need the way to bypass step
into finding Bob budgets so me and God

130
00:09:53,960 --> 00:09:57,050
felt kind of lucky so we thought the way
we just guess maybe we'll get lucky

131
00:09:57,920 --> 00:10:06,500
alright so let's step back a little bit
and talk about some of the building

132
00:10:06,500 --> 00:10:07,960
blocks we

133
00:10:07,960 --> 00:10:14,950
assume for this exploitation first thing
let's talk about the way new processes

134
00:10:14,950 --> 00:10:18,430
are created under the unix environment

135
00:10:18,430 --> 00:10:22,839
Stan way of doing so is to use the fork
system call

136
00:10:24,010 --> 00:10:27,640
so basically if you look at this code
snip and what's going to happen is that

137
00:10:27,640 --> 00:10:34,360
a process with one and then folk itself
creating a new trial process and the

138
00:10:34,360 --> 00:10:38,470
newly created child process is sort of a
clone version of its parent

139
00:10:39,430 --> 00:10:45,699
the only thing that the fair to is the
process 80 speed of the process

140
00:10:46,390 --> 00:10:51,280
so what's going to happen is basically
that the parent process it will be

141
00:10:51,280 --> 00:10:56,949
greater than 0 their return value fork
and execute the first block and the

142
00:10:56,950 --> 00:11:00,430
child was the speed will be 0 and will
execute the second block

143
00:11:00,430 --> 00:11:03,819
so the two processes share many
characteristics

144
00:11:04,660 --> 00:11:10,810
just to make me feel the memory layout
of the of both of them is the same which

145
00:11:10,810 --> 00:11:13,839
means that the Lord and models are look
at it at the same address

146
00:11:14,590 --> 00:11:19,780
this is a fact will take advantage of
later they're against the state is the

147
00:11:19,780 --> 00:11:22,600
same and the stack is the same

148
00:11:22,600 --> 00:11:27,880
even the heap is the same like or
previously allocated the he blocks it

149
00:11:27,880 --> 00:11:34,120
would be the same address as you later
see how this can be abused and another

150
00:11:34,120 --> 00:11:36,830
thing we didn't talk about previously

151
00:11:36,830 --> 00:11:42,680
we assume for this exploitation for the
specific exploit that the attacker has

152
00:11:42,680 --> 00:11:49,790
the ability to answer arbitrary dns
queries performed by the victim talking

153
00:11:49,790 --> 00:11:53,150
about all the possible ways of doing so
is really out of scope of this

154
00:11:53,150 --> 00:11:55,760
presentation but just to name a few

155
00:11:55,760 --> 00:12:01,400
the attacker could acquire some domain
and if he has the ability to make the

156
00:12:01,400 --> 00:12:06,829
client to query it is getting your info
with this domain or its subdomains then

157
00:12:06,830 --> 00:12:09,480
and would be able to

158
00:12:09,480 --> 00:12:14,639
- supply arbitrariness reply from
instance the local are poison attack

159
00:12:15,560 --> 00:12:20,479
between the victim and its dns server
and we allow us to answer opportunity

160
00:12:21,130 --> 00:12:25,180
requests and there are many other ways
of doing so so just take this for

161
00:12:25,180 --> 00:12:28,030
granted for this exploitation

162
00:12:28,030 --> 00:12:31,120
so let's discuss the exploitation
technique

163
00:12:31,960 --> 00:12:39,520
this light is very important we assume
that the attacker has some way to affect

164
00:12:39,520 --> 00:12:41,730
the targeted

165
00:12:41,730 --> 00:12:46,560
victim and demons service in such a way
that it can trigger for cooperation of

166
00:12:46,560 --> 00:12:48,599
that service remotely

167
00:12:48,600 --> 00:12:53,730
let's just take a real life example for
that and let's say that the process that

168
00:12:53,730 --> 00:12:59,790
we try to exploit is an HTTP server so
that HTTP server would listen on port 80

169
00:12:59,790 --> 00:13:04,769
for instance and on the victim machine
then that Tucker will perform an HTTP

170
00:13:04,769 --> 00:13:09,930
request and to that we cater to that
process which will cause the demon

171
00:13:09,930 --> 00:13:15,779
process to fork itself in order to a
supply to handle the records request

172
00:13:15,779 --> 00:13:23,579
so we assume that the the targeted then
we attack is some sort of if this kind

173
00:13:23,579 --> 00:13:28,138
of edema which the attack and can
trigger the fuckin market return their

174
00:13:28,139 --> 00:13:32,670
territories before and which creates a
new process and let's say with the

175
00:13:32,670 --> 00:13:40,139
period of 21 - doesn't matter which one
and then and we assume that the child

176
00:13:40,139 --> 00:13:46,079
process will call getting your info
specify the AF unspecified flag so it

177
00:13:46,079 --> 00:13:51,269
will be from to the NS aquarius one for
identifying I for one for ipv6 so the

178
00:13:51,269 --> 00:13:56,790
address right there on the left are just
it could have been any address

179
00:13:56,790 --> 00:14:01,050
depending on where GFC was loaded too
but let's assume for instance that the

180
00:14:01,050 --> 00:14:06,810
construction to get it in your info
happen to be in a dress a 12-12 and turn

181
00:14:06,810 --> 00:14:11,910
80 °c and that the return address from
getting your info would have been a 12

182
00:14:11,910 --> 00:14:16,319
12 10 12 could have been any address and
depending on anywhere GBC was loaded

183
00:14:16,829 --> 00:14:22,410
so then the implementation of the
galleria in function will perform a dns

184
00:14:22,410 --> 00:14:25,290
queries and which the attacker will
reply

185
00:14:25,290 --> 00:14:28,500
so will the attacker will perform

186
00:14:29,670 --> 00:14:34,920
we'll use the bag as we showed
previously settings own IP address for

187
00:14:34,920 --> 00:14:40,620
the tcp a request for the valid response
and sending a malicious response for the

188
00:14:40,620 --> 00:14:46,350
ID six it will set the return address of
getting your info to an arbitrary

189
00:14:46,350 --> 00:14:52,800
address it shows and let's say for
instance for this example 4 10 and 10 10

190
00:14:52,800 --> 00:14:55,680
10 10 on could have been any address

191
00:14:55,680 --> 00:15:00,329
so what will happen next is that getting
your info will return to this address

192
00:15:00,330 --> 00:15:08,520
and this will crush the child process
reason why we all encounter a crush it

193
00:15:08,520 --> 00:15:14,069
could be a segfault just trying to
execute in a dress that isn't mapped or

194
00:15:14,070 --> 00:15:19,800
others that isn't valid code page or
even if it is a code page and it could

195
00:15:19,800 --> 00:15:25,620
be just trying to execute some invalid
Hopkins so sooner or later the child

196
00:15:25,620 --> 00:15:27,990
process will crash

197
00:15:27,990 --> 00:15:35,430
so the attacker now and three years to
fuck again and the demon service of

198
00:15:35,430 --> 00:15:38,579
course didn't crush the only process the
crash is the child process

199
00:15:38,580 --> 00:15:44,430
so again the demon will folk itself in
coal getting your info

200
00:15:44,430 --> 00:15:49,680
the important thing is that fruit bar
the child processes the one that

201
00:15:49,680 --> 00:15:53,219
previously crushed and the newly created
one

202
00:15:53,220 --> 00:15:56,270
the address of the instruction

203
00:15:56,270 --> 00:16:00,350
for calling getting your info and the
return address of getting a ps4 will be

204
00:16:00,350 --> 00:16:05,090
located at the same addresses the reason
why is the four corporation since they

205
00:16:05,090 --> 00:16:12,890
were both fucked out of the same process
the other space remains the same so the

206
00:16:12,890 --> 00:16:15,170
attacker will again with life

207
00:16:15,170 --> 00:16:20,089
same way but this time let's assume that
it shows the right

208
00:16:20,089 --> 00:16:24,769
the correct address from getting your
info from so what happens next is that

209
00:16:24,769 --> 00:16:30,200
we execute the test the legs index card
and continue the execution of the child

210
00:16:30,200 --> 00:16:36,709
process as we should have been so then
let's assume the child process uses the

211
00:16:36,709 --> 00:16:42,680
kinect function is supplying the
engineering infrastructure returned from

212
00:16:42,680 --> 00:16:47,630
getting your info as an argument and
which will cause the child process to

213
00:16:47,630 --> 00:16:51,500
create a new tcp connection to the
attackers IP address

214
00:16:51,500 --> 00:16:57,949
so basically what we do here is that the
attack against the ability to in

215
00:16:57,949 --> 00:17:02,899
enumerate and check whether the return
address is set for getting your info is

216
00:17:02,899 --> 00:17:07,910
indeed the correct address or not if
they set it to in running address the

217
00:17:07,910 --> 00:17:13,429
child process will crash and you want to
get a new recipe connection and you can

218
00:17:13,429 --> 00:17:14,630
explode this address

219
00:17:14,630 --> 00:17:18,169
yes it will never be the correct address
this is all the child processes are

220
00:17:18,169 --> 00:17:23,870
cloned out of the same deal if it gets
us the address correctly you'll get a

221
00:17:23,869 --> 00:17:28,309
new recipe requests and now he knows
that this address resides within the

222
00:17:28,309 --> 00:17:34,730
deep sea model basically looks it so we
could have just enumerate theoretically

223
00:17:34,730 --> 00:17:41,270
and all the possible addresses return
address of getting your info but in 64

224
00:17:41,270 --> 00:17:41,960
bit machine

225
00:17:41,960 --> 00:17:47,360
this would be to almost 2 up to the 64
bits if you can or some

226
00:17:47,980 --> 00:17:52,929
it's that you always know your value so
this is not really feasible within a

227
00:17:52,929 --> 00:17:57,429
reasonable amount of that it will take
here starting right so we decided to

228
00:17:57,429 --> 00:18:04,330
operate this approach a little bit and
that will tell you about it so it's God

229
00:18:04,330 --> 00:18:07,330
said it's not visible to number 8 64
bits of entropy

230
00:18:08,020 --> 00:18:13,600
so we thought maybe we could break down
the original problem into sub problems

231
00:18:13,600 --> 00:18:16,809
smaller sub-problem which will be easier
for us to solve

232
00:18:16,809 --> 00:18:22,660
well this is exactly the byte by byte
approach we don't have to overwrite the

233
00:18:22,660 --> 00:18:26,559
lip completely whenever I think the
return worse because we know how much we

234
00:18:26,559 --> 00:18:31,210
were right and we know how much to write
into memory in order to to write a

235
00:18:31,210 --> 00:18:31,960
biography

236
00:18:31,960 --> 00:18:35,350
we can just all right just a portion of
it instead

237
00:18:35,350 --> 00:18:40,418
this means that the remaining bytes that
are set correctly by taught by the quad

238
00:18:40,419 --> 00:18:44,410
code of a flow will be set still have
the we still be there

239
00:18:44,410 --> 00:18:48,520
that's for example is young . it
original return address

240
00:18:48,520 --> 00:18:54,460
it worked 12 the or 12 now we overwrite
the retainers and just the least

241
00:18:54,460 --> 00:18:58,690
significant byte 0 feet as you can see
here in memory it will start first

242
00:18:58,690 --> 00:19:02,799
listen if an invite and here the most
significant . in this instance we all

243
00:19:02,799 --> 00:19:04,658
right over even the

244
00:19:04,659 --> 00:19:07,690
the least significant byte to be 0
instead of 12

245
00:19:07,690 --> 00:19:14,229
so what do we gain from this well
basically we've transformed the victim

246
00:19:14,229 --> 00:19:19,450
into some sort of oracle the Oracle
response and we give him a bite

247
00:19:19,450 --> 00:19:24,159
any response whether this was part of
the original others or not we can

248
00:19:24,159 --> 00:19:27,669
iterate the sports of several times in
order to lick the entire or regional

249
00:19:27,669 --> 00:19:28,659
return address

250
00:19:28,659 --> 00:19:34,779
so for example let's say the doctor sent
about a bunch of days followed by a zero

251
00:19:34,779 --> 00:19:37,479
overriding the least significant byte of
the return address

252
00:19:37,479 --> 00:19:42,999
the application will crush their for the
doctor to infer that 0 is not the cliff

253
00:19:42,999 --> 00:19:45,549
least significant byte of their address

254
00:19:45,549 --> 00:19:48,609
iterative process trying with one two
three

255
00:19:48,609 --> 00:19:53,889
until it gets to 12 Hector and it's
important to not really that for all the

256
00:19:53,889 --> 00:19:56,439
previous attempts it did not get a
response

257
00:19:56,440 --> 00:20:01,059
therefore it was able to infer this now
either a seat over Isis with the

258
00:20:01,059 --> 00:20:04,928
original bicycles in the least
significant byte that foreign continue

259
00:20:04,929 --> 00:20:08,559
to execute normally and that's what we
do get a response it attempts to connect

260
00:20:08,559 --> 00:20:10,658
with this result IP address

261
00:20:10,659 --> 00:20:15,700
ok so we have been something now we can
use it this newly acquired knowledge in

262
00:20:15,700 --> 00:20:17,739
order to override the next fight

263
00:20:17,739 --> 00:20:22,690
so it this time the doctor will send
much phase followed by 12 which you know

264
00:20:22,690 --> 00:20:28,210
is indeed the least significant byte and
then 0 and then it keeps doing this

265
00:20:28,210 --> 00:20:36,190
process and the most it would take eight
times 200 the 56 attempts as this is the

266
00:20:36,190 --> 00:20:40,929
maximum learning and combinations for a
bite it bite for the length of another's

267
00:20:40,929 --> 00:20:47,320
and this approach works marvelously for
own compiled application but this wasn't

268
00:20:47,320 --> 00:20:48,428
enough for us

269
00:20:48,429 --> 00:20:54,070
we wanted to find the little life
potentially exploitable application now

270
00:20:54,070 --> 00:20:58,539
as we mentioned in order for our
technique to walk the requirements were

271
00:20:58,539 --> 00:21:03,609
able to trick to your fork remotely and
that fork when he was getting your info

272
00:21:03,609 --> 00:21:08,019
the two in child process and we had to
send have some sort of indication of

273
00:21:08,019 --> 00:21:10,450
success whether we crushed the machine
or not

274
00:21:10,450 --> 00:21:15,789
now it means that not every application
that contains both for can get er in for

275
00:21:15,789 --> 00:21:16,720
vulnerable

276
00:21:16,720 --> 00:21:18,040
for example it might

277
00:21:18,040 --> 00:21:22,629
invoke getting your info from the parent
demon in which case the Oracle will die

278
00:21:22,630 --> 00:21:27,880
immediately and we want to be able to
predict the bites a it might not get us

279
00:21:27,880 --> 00:21:32,050
better an indication of success we might
not use it in order to connect which is

280
00:21:32,050 --> 00:21:34,120
not highly likely

281
00:21:34,120 --> 00:21:39,489
so we searched code search dr. beyond
that which indexes the source code of

282
00:21:39,490 --> 00:21:44,410
around a compelling packages and
intersecting the requirements for both

283
00:21:44,410 --> 00:21:49,120
fork and getting your info we remain
with certain how we potentially

284
00:21:49,120 --> 00:21:54,729
exploitable applications so god man

285
00:21:54,730 --> 00:22:00,280
we're faced with this is really boring
long list of applications to go over

286
00:22:00,280 --> 00:22:05,770
there so scored in to inspect but then
specific application and culture I and i

287
00:22:05,770 --> 00:22:08,770
want to show you why

288
00:22:11,890 --> 00:22:15,160
hey listen is your mouth tiny and small
then why don't you come down a little

289
00:22:15,160 --> 00:22:16,150
bits

290
00:22:16,150 --> 00:22:20,710
wait where the food is tiny it's looks
like regular food but really tiny you

291
00:22:20,710 --> 00:22:23,710
put in your mouth and need nothing gets
stuck in your lips

292
00:22:23,710 --> 00:22:26,740
it's just tiny and tiny and fits right
here it fits right in

293
00:22:27,250 --> 00:22:34,990
we got tiny of the Sun tiny pizza tiny
pie and little tiny fried eggs

294
00:22:34,990 --> 00:22:38,380
oh shit we got tiny people

295
00:22:38,380 --> 00:22:44,800
you hungry come on down see some shit
you stupid bitch

296
00:22:44,800 --> 00:22:48,080
I just kidding

297
00:22:48,080 --> 00:22:54,019
as you can see this is a from the show
we can multi which we really like ritual

298
00:22:54,019 --> 00:22:59,630
recommended for viewing and so the
obvious candidate for inspection was

299
00:22:59,630 --> 00:23:05,120
standing proxy and which did the proved
to be a viable candidate for

300
00:23:05,120 --> 00:23:06,260
exploitation

301
00:23:06,260 --> 00:23:10,340
so an epoxy is a lightweight

302
00:23:10,340 --> 00:23:17,510
HTTP proxy server what this means it
catches the HTTP responses from HTTP

303
00:23:17,510 --> 00:23:21,470
cells in order to reduce bandwidth
consumption or reduce latency

304
00:23:22,100 --> 00:23:24,860
you name it one in stores it stopped
raining so we never seen a lot in

305
00:23:24,860 --> 00:23:26,059
performance

306
00:23:26,059 --> 00:23:31,340
so let's say go over the flow of the
normal user connecting to an epoch

307
00:23:31,340 --> 00:23:34,490
server and how it serves it

308
00:23:34,490 --> 00:23:41,299
well let's say our user tries to connect
to www.zawya.com the tiny poxy in order

309
00:23:41,299 --> 00:23:47,210
to sell the client Fox itself and now it
need to retrieve the contents of the HDP

310
00:23:47,210 --> 00:23:49,880
right you need to connect to some my
HTTP server

311
00:23:49,880 --> 00:23:55,220
well in order to do so it uses getting
your info specifying the AF unspecified

312
00:23:55,220 --> 00:24:00,080
inside the same parameter resulting in
both the a and cortical area codes which

313
00:24:00,080 --> 00:24:02,990
are required for exploitation to be sent
over the wire

314
00:24:02,990 --> 00:24:06,139
after getting the response from the dns
server

315
00:24:06,139 --> 00:24:12,320
- a boxy connect on behalf of the client
to somewhere . com or twist HTML or

316
00:24:12,320 --> 00:24:15,019
whatever and pass them back down to the
client

317
00:24:15,019 --> 00:24:19,130
now let's recall the requirements for an
attacker in order to successfully

318
00:24:19,130 --> 00:24:25,850
exploit an application using are talking
to that allow you to connect can be used

319
00:24:25,850 --> 00:24:30,289
to trigger a fork and the invocation of
getting your info remotely

320
00:24:30,289 --> 00:24:34,370
now it's important to note here that
getting your info is invoked inside the

321
00:24:34,370 --> 00:24:37,939
child processes before the parent
process will never crash due to our

322
00:24:37,940 --> 00:24:42,139
attempts in addition we need must have
an indication of success

323
00:24:42,139 --> 00:24:47,959
this is achieved by the connection to
the HTTP server and a tacit can just

324
00:24:47,960 --> 00:24:52,060
point the dns records / call that we
sent the attacker can send

325
00:24:52,060 --> 00:24:57,190
before sending them out from quad-orable
area called 2.2 itself if it receives

326
00:24:57,190 --> 00:24:59,380
the connection it knows it was
successful

327
00:24:59,380 --> 00:25:03,550
if he didn't it failed so that way our
or killing is formed

328
00:25:04,090 --> 00:25:09,760
so now it's game over right we can just
like an address inside lipsy calculated

329
00:25:09,760 --> 00:25:13,570
offset perform a normal normal chain and
the everything sweet

330
00:25:13,570 --> 00:25:17,230
well no we like a little bit

331
00:25:17,230 --> 00:25:22,030
we don't really get control the
instruction pointer the stack buffer is

332
00:25:22,030 --> 00:25:26,290
not adjacent to their addresses you can
see from this diagram there are several

333
00:25:26,290 --> 00:25:28,120
local variables on the way

334
00:25:28,120 --> 00:25:32,260
and unfortunately some of these are
pointers pointing to the stock when

335
00:25:32,260 --> 00:25:36,370
these pointers will be the reference if
they contain an invalid address we will

336
00:25:36,370 --> 00:25:37,239
crush

337
00:25:37,240 --> 00:25:43,000
if we rush we don't get to return we
fail so sr is enabled so it can't hurt

338
00:25:43,000 --> 00:25:46,360
to call this point as beforehand or we
wouldn't have any problem in the first

339
00:25:46,360 --> 00:25:46,990
place

340
00:25:46,990 --> 00:25:50,830
so what we do how do we make the stack
pointers

341
00:25:50,830 --> 00:25:56,260
well we simply apply this technique we
use the Bible right approach in order to

342
00:25:56,260 --> 00:26:01,330
weak stock quarters and stuck at verses
in addition to the gypsies this module

343
00:26:01,330 --> 00:26:02,260
address

344
00:26:02,260 --> 00:26:08,260
so let's take for example the first set
for that when count as you can see here

345
00:26:08,260 --> 00:26:12,910
the offending instruction is inside and
its name in took which is a former

346
00:26:12,910 --> 00:26:17,560
coworker function internal of your
function invoked by you get attr info

347
00:26:17,560 --> 00:26:23,950
and we can see that the construction is
moved by PR are weak sealed this

348
00:26:23,950 --> 00:26:28,450
instruction it tends to write a single
bite to the others pointed to by l bx

349
00:26:28,450 --> 00:26:35,080
now as you can see from the following gb
instruction that we executed our B

350
00:26:35,080 --> 00:26:39,500
contains a bunch of days which is
clearly not writable and

351
00:26:39,500 --> 00:26:45,770
it's important to not hear that RBX
originally pointed to a stack buffer it

352
00:26:45,770 --> 00:26:51,080
pointed to a location on the stock so
using the microwave right approach we

353
00:26:51,080 --> 00:26:52,699
can lick this origin of the others

354
00:26:52,700 --> 00:26:56,060
yes but not so not

355
00:26:56,060 --> 00:27:01,850
we have well because this pointer is
used only as an output buffer it is not

356
00:27:01,850 --> 00:27:04,909
being leading to the reading for me
after all

357
00:27:04,910 --> 00:27:09,650
any likable address with suffice this
causes to move some granularity and we

358
00:27:09,650 --> 00:27:14,000
won't be able to lick the entire address
we won't be able to lick some bits of it

359
00:27:14,000 --> 00:27:15,710
is we will see in the next slide

360
00:27:15,710 --> 00:27:23,270
as you can see here the cut of pork in
maps shows us where the stock begins and

361
00:27:23,270 --> 00:27:30,020
ends as you can see in this example the
size of the stock is 21 hex our pages

362
00:27:30,020 --> 00:27:34,400
with 33 pages and which is way larger
than any one page

363
00:27:35,930 --> 00:27:41,660
SI sedalia it doesn't matter what our
beaks . street has just has to be

364
00:27:41,660 --> 00:27:47,210
writable so because the stack is always
will be larger than one page we can

365
00:27:47,210 --> 00:27:50,690
click the Lord little bits which are an
offset inside of this page

366
00:27:50,690 --> 00:27:55,640
let's for example is young that they
originally . of . . contain to the

367
00:27:55,640 --> 00:28:02,750
blackberry marked address and the tackle
guest a is the lower 12 beats it doesn't

368
00:28:02,750 --> 00:28:07,670
matter what he pushed her because even
if we put their 01 to see the sea

369
00:28:08,180 --> 00:28:12,230
whatever it will always be writable so
we can't affair

370
00:28:12,230 --> 00:28:17,210
the original value of our beaks but it's
good enough for us right now because we

371
00:28:17,210 --> 00:28:19,520
just wanted to have a not to crush

372
00:28:19,520 --> 00:28:24,500
so we will get to the dentist dr. an
executor it down and controlling grip

373
00:28:24,500 --> 00:28:30,020
over there are occasions when we do need
the exact pointer to be leaked

374
00:28:30,680 --> 00:28:37,130
it's for example take the second set for
that when Carter hear from smaller c

375
00:28:37,130 --> 00:28:38,559
code snippet from the

376
00:28:38,559 --> 00:28:42,999
lipsy cold as we can see horse before
the love which is equal to only host

377
00:28:42,999 --> 00:28:50,259
offer are allocated to the stock and and
then it after some many internal work is

378
00:28:50,259 --> 00:28:55,690
done and before turning to the user host
buffer to buffer is compared with only

379
00:28:55,690 --> 00:28:58,629
host butter in if you're different

380
00:28:58,629 --> 00:29:04,090
a freeze performed and why is that as we
mentioned earlier as an optimization the

381
00:29:04,090 --> 00:29:07,449
buffer is located on the stock but
internal Walker functions might allocate

382
00:29:07,450 --> 00:29:10,509
a another buffer on the hip

383
00:29:10,509 --> 00:29:14,980
if they're if they supply buffer is too
small so what's the verdict buffy is an

384
00:29:14,980 --> 00:29:20,409
in-out parameter that might be replaced
in order to detect so the sea cold

385
00:29:20,409 --> 00:29:25,090
stores the original pointer inside or we
caused buffer and compares them if they

386
00:29:25,090 --> 00:29:25,990
are different

387
00:29:25,990 --> 00:29:30,429
even by one beat and if we is performed

388
00:29:30,429 --> 00:29:36,100
however this is really bad for us
because we were passed an invalid hit

389
00:29:36,100 --> 00:29:41,049
pointer to free which will cause an
abort to be raised because free when we

390
00:29:41,049 --> 00:29:46,990
been and supplied with invalid chunk
with crush within the board so we cross

391
00:29:46,990 --> 00:29:51,730
before we return we can't override rip
mean we can / 34 better not be executed

392
00:29:52,629 --> 00:29:56,980
and as you can see the sequel was
translated into the following semi

393
00:29:56,980 --> 00:29:57,759
statement

394
00:29:57,759 --> 00:30:01,929
yeah the eye is that from the stock
which is under our control due to the

395
00:30:01,929 --> 00:30:06,909
overflow and circle around that we must
overflow the context of our be people

396
00:30:06,909 --> 00:30:11,740
speak ER because we have to offer for
all the way until the reverse and then

397
00:30:11,740 --> 00:30:17,350
it compare with our 14 which is equal to
0 equals buffer as you can see if there

398
00:30:17,350 --> 00:30:23,830
r equals keep a free that crushes us so
we need somehow to make our di is equal

399
00:30:23,830 --> 00:30:25,269
to r 14

400
00:30:25,269 --> 00:30:28,539
so what we do now

401
00:30:28,539 --> 00:30:31,629
do employ the same technique of the bite
approach

402
00:30:31,629 --> 00:30:36,189
well we could but this would mean we
would have to enumerate a lot of bites

403
00:30:36,190 --> 00:30:41,799
as we all right around 37 and bite on
the way this would make the exploit to

404
00:30:41,799 --> 00:30:42,908
take away longer than

405
00:30:42,909 --> 00:30:49,119
like so we searched for a way to
optimize this is an important two

406
00:30:49,119 --> 00:30:53,168
distinct an important observation is the
stock will remain identical between

407
00:30:53,169 --> 00:31:04,450
different folks and causing the correct
application so quickly after because we

408
00:31:04,450 --> 00:31:08,259
catch the application so quickly after
invoking getting your info

409
00:31:08,259 --> 00:31:12,580
the same amount of stock space will be
allocated for each them as you can see

410
00:31:12,580 --> 00:31:16,779
here is the tiny box them on which fork
to several child processes each one of

411
00:31:16,779 --> 00:31:20,889
them attempt to locate the buffer stock
and we see that they get the same

412
00:31:20,889 --> 00:31:25,629
returnable the same man stock address
for recalls bathroom

413
00:31:25,629 --> 00:31:31,539
so hows buffer . er is the same between
all executions

414
00:31:31,539 --> 00:31:35,139
so what we can basically do is use the
concept

415
00:31:35,139 --> 00:31:38,709
officers from the stock base because the
same amount of stock is research is

416
00:31:38,710 --> 00:31:42,129
allocated for Milan we can just
calculate beforehand

417
00:31:42,129 --> 00:31:47,228
the offset between the host buffer that
buff or Oracle's buffer to the step base

418
00:31:47,229 --> 00:31:52,450
and then recorded this offset and edit
to a leaked stock base

419
00:31:52,450 --> 00:31:56,440
so now we need to look at this stock
base so let's see how we manage to do

420
00:31:56,440 --> 00:32:03,129
that will first voice whether or not
here and that we used our previous

421
00:32:03,129 --> 00:32:05,529
primitive the move I'll be excused

422
00:32:05,529 --> 00:32:10,779
and as we mentioned earlier the only
restriction upon this address each at it

423
00:32:10,779 --> 00:32:17,720
has to be likeable so using this
primitive and we danced

424
00:32:17,720 --> 00:32:21,590
characteristics of the stock base we
were able to make it and the

425
00:32:21,590 --> 00:32:25,340
characteristics are the first of all the
stock base is aligned to a page boundary

426
00:32:25,340 --> 00:32:30,379
using the previously leaked stack
pointer arbitrary

427
00:32:30,380 --> 00:32:34,370
previously they lifted and others within
the stock with an address within the

428
00:32:34,370 --> 00:32:38,060
stock boundaries but we do not know
where exactly what to do with it . the

429
00:32:38,060 --> 00:32:43,340
four weeks was just delighted to start
bonding and then we kick the integrating

430
00:32:43,340 --> 00:32:45,649
adding one page at a time

431
00:32:45,650 --> 00:32:49,760
now another interesting property of the
stock base is that it will be the first

432
00:32:49,760 --> 00:32:57,140
known right about others adjacent to the
stock so now our Oracle response

433
00:32:57,140 --> 00:33:02,540
yes this is the court that less when we
do crush its like before we responded

434
00:33:02,540 --> 00:33:08,810
it is called the bite when we didn't
crush so we try with the zero then 1000

435
00:33:08,810 --> 00:33:14,870
2000 and all these things will get a
response when you go to the response we

436
00:33:14,870 --> 00:33:18,800
know we still havin to heat the stock
base in the first time which inaudible

437
00:33:18,800 --> 00:33:24,320
address which is indicated to us by a
timeout which then the application want

438
00:33:24,320 --> 00:33:26,450
to connect with you to a crush

439
00:33:26,450 --> 00:33:35,750
we heard the stock base and so is really
game over now

440
00:33:35,750 --> 00:33:40,430
I mean we have like the stock base we
calculated before hand

441
00:33:40,430 --> 00:33:46,700
the offset between the stock base and
each stock . buffer so we can feeling

442
00:33:46,700 --> 00:33:51,260
all the local variables leading up to
the story aliens return address

443
00:33:52,550 --> 00:33:55,760
so it's pretty much a piece of cake for
me right

444
00:33:55,760 --> 00:33:58,879
well wrong again

445
00:33:58,880 --> 00:34:06,350
okay so are we assume that the offset to
each and every local variable from the

446
00:34:06,350 --> 00:34:09,080
stock base would remain constant

447
00:34:09,080 --> 00:34:12,080
but we found out that this is not the
situation

448
00:34:13,010 --> 00:34:19,070
each time we started the tiny proxy
service this offset happened to be

449
00:34:19,619 --> 00:34:24,960
different it did remain the same between
all the force and each time which we

450
00:34:24,960 --> 00:34:29,879
started the demon but it did change for
the parents forces and each and every

451
00:34:29,879 --> 00:34:36,389
time so we try to figure out what's the
reason for that and the reason why is a

452
00:34:36,389 --> 00:34:38,039
det cord snapped

453
00:34:38,039 --> 00:34:42,720
for me the Linux kernel this is an
article architecture specific

454
00:34:42,719 --> 00:34:47,998
could the trans every time you create a
new process basically what it does

455
00:34:48,539 --> 00:34:55,200
if Israel is enabled as you can see
generator random offsets and a push the

456
00:34:55,199 --> 00:35:01,618
stuck a by that offset by all to running
the first function at the start function

457
00:35:01,619 --> 00:35:04,049
of the newly created process

458
00:35:04,049 --> 00:35:10,349
so let's examine this this picture of
the stack for instance

459
00:35:10,349 --> 00:35:15,420
so when you call stuck you gonna call to
start a function instead of having stack

460
00:35:15,420 --> 00:35:18,299
pointer pointing to the stock base

461
00:35:18,299 --> 00:35:24,809
it would be to the stock base plus some
random offset so this offset happened to

462
00:35:24,809 --> 00:35:26,490
be only 9 bits

463
00:35:26,490 --> 00:35:31,109
due to this model operation and the fact
that it has to be a line two pointer

464
00:35:31,110 --> 00:35:37,410
so basically what we did is just
enumerated we first leaked the stock

465
00:35:37,410 --> 00:35:40,410
base then we calculate

466
00:35:41,040 --> 00:35:46,710
and the offset to the local variables as
if this random offset created by the

467
00:35:46,710 --> 00:35:52,230
linux kernel was zero and then we
started to enumerate from there and the

468
00:35:52,960 --> 00:35:56,349
another night bits so basically and if
we get

469
00:35:57,500 --> 00:36:01,610
in the correct offset and we would keep
the free block and don't crash and

470
00:36:01,610 --> 00:36:09,320
otherwise we would so from now

471
00:36:09,320 --> 00:36:15,470
basically we gain control over the rfp
and returning from getting your info and

472
00:36:15,470 --> 00:36:19,640
after we looked all the local variables
on the way and we now just imply the

473
00:36:19,640 --> 00:36:23,089
same technique in order to leave the
return address of getting your info as

474
00:36:23,090 --> 00:36:25,070
we talked about before

475
00:36:25,070 --> 00:36:30,740
after we do so we want to create a rope
chain to construct the option to buy bus

476
00:36:30,740 --> 00:36:32,000
death

477
00:36:32,000 --> 00:36:36,170
so basically what we do is we compute
from that return address of getting

478
00:36:36,170 --> 00:36:43,280
their info which is within an MC model
the model base to the deep sea bass and

479
00:36:43,280 --> 00:36:46,589
then just find offsets to the

480
00:36:46,589 --> 00:36:51,859
instruction gadgets that we need in
order to run code just implied a

481
00:36:51,859 --> 00:36:57,170
a little tipsy technique but the thing
is that we don't know what the live CD

482
00:36:57,170 --> 00:37:00,490
version of the

483
00:37:00,490 --> 00:37:06,160
victim so each one of these versions
it's completely differently it has

484
00:37:06,160 --> 00:37:11,859
different code would result in different
offsets about 2 and a base of flip see

485
00:37:11,860 --> 00:37:17,590
from the retailer's of getting your info
and to the gadgets that when it

486
00:37:17,590 --> 00:37:21,580
so basically what we do and we just took
all the vulnerable

487
00:37:22,400 --> 00:37:26,420
versions of lipstick and compute the
offset to live sea bass and to the

488
00:37:26,420 --> 00:37:28,650
gadgets for each and every

489
00:37:28,650 --> 00:37:30,140
one of these

490
00:37:30,140 --> 00:37:35,269
libraries and then we just enumerate and
each time we guess the wrong bleep

491
00:37:35,269 --> 00:37:37,430
subversion will crush

492
00:37:37,430 --> 00:37:40,430
and the child process and when we get
the correct

493
00:37:41,290 --> 00:37:46,720
version will just run our right to leave
see attack and a runner exploit code

494
00:37:49,420 --> 00:37:56,620
so just as a quick review the complete
exploitation flow is a week an arbitrary

495
00:37:56,620 --> 00:37:57,730
stack pointer

496
00:37:57,730 --> 00:38:03,220
it's the first sexual encounter with
then make the stock base using the same

497
00:38:03,220 --> 00:38:04,240
crash

498
00:38:04,240 --> 00:38:08,109
we then lick the random stock offset in
order to

499
00:38:09,250 --> 00:38:13,930
liquid to set the right value for all
the precise like variables we then make

500
00:38:13,930 --> 00:38:18,609
the return address of getting your info
from enumerate on the lips infections

501
00:38:18,610 --> 00:38:20,980
and deal with successfully exploits

502
00:38:20,980 --> 00:38:23,980
so when I show a demo

503
00:38:24,620 --> 00:38:32,240
this attack but a life that was
sometimes don't work so we chose to show

504
00:38:32,240 --> 00:38:37,370
you a video of them about if anyone is
interested or doesn't find it satisfying

505
00:38:37,370 --> 00:38:41,540
enough you're more than welcome to come
afterwards and we'll show you in the

506
00:38:41,540 --> 00:38:44,170
lifetime so

507
00:38:44,170 --> 00:38:48,760
yes you can happen at any grapes

508
00:38:51,400 --> 00:39:01,900
so first thing we do is we restart the
tiny proxy service just in order to have

509
00:39:01,900 --> 00:39:03,369
a fresh start

510
00:39:03,369 --> 00:39:07,510
we then run a PS instruction do you guys
see this ring

511
00:39:07,510 --> 00:39:14,530
ya know is there any way to turn off
this light now

512
00:39:14,530 --> 00:39:21,790
ok so sorry how can you step back a
little bit will try to do our best

513
00:39:22,510 --> 00:39:28,960
second floor below

514
00:39:30,210 --> 00:39:36,450
so we restart the service as I'm .
dimension and then we'll run a PS

515
00:39:36,450 --> 00:39:40,950
instruction to show all the tiny proxy
processes

516
00:39:40,950 --> 00:39:47,790
so basically the first one is going to
be the a a demon process and all the

517
00:39:47,790 --> 00:39:49,980
others are just preformed a

518
00:39:49,980 --> 00:39:53,850
and processes from this one and two
handle requests

519
00:39:54,750 --> 00:40:00,510
so now one of expert card which will
start triggering the kinect requests in

520
00:40:00,510 --> 00:40:04,619
order to trigger the dns queries and as
you can see this white shark output

521
00:40:05,349 --> 00:40:08,829
we do send and we do connect to the
proxy a lot

522
00:40:08,829 --> 00:40:13,809
specifying exploit calm as the dns
server there is the domain we want to

523
00:40:13,809 --> 00:40:16,809
get it could have been any domain
doesn't really matter

524
00:40:18,220 --> 00:40:23,558
this causes tiny proxy and each and
every of the child processes to send the

525
00:40:23,559 --> 00:40:32,229
DNS requests / UDP a-1 a-2 p request for
the ipv4 address and the a request and

526
00:40:32,229 --> 00:40:36,640
another one for the ipv6 there about
sent over the same UDP socket

527
00:40:37,299 --> 00:40:40,290
we don't reply

528
00:40:40,290 --> 00:40:43,680
and with the two main characteristics
first we said the truncated flag to

529
00:40:43,680 --> 00:40:49,410
through in order to a restart the query
again over tcp we will later sit and

530
00:40:49,410 --> 00:40:52,799
we're feeling the buffer in order to
trigger the buffer mismanagement

531
00:40:52,800 --> 00:40:59,220
basically to trigger the milk and this
is not enough by the d1 ok we'll just

532
00:40:59,220 --> 00:41:02,470
continue with an a

533
00:41:02,470 --> 00:41:08,980
the tiny proxy and we start again
participe sending but in ipv4 request

534
00:41:08,980 --> 00:41:16,390
and ipv6 request and again over the same
TCP socket a which we reply now and with

535
00:41:16,390 --> 00:41:22,690
a valid response for the ipv4 request
setting the attackers IP addresses the

536
00:41:22,690 --> 00:41:25,540
result in a dress for

537
00:41:25,540 --> 00:41:31,150
for that domain and a reply again for
the ipv6 and with a man phone pocket

538
00:41:31,150 --> 00:41:36,370
basically a bunch of face and until we
get to the by to enumerate at this time

539
00:41:36,370 --> 00:41:43,299
it happened to be in 1c and we will
numerate only single bite now so we now

540
00:41:43,300 --> 00:41:46,690
see the script output shortly

541
00:41:46,690 --> 00:41:50,440
and as you can see we're already likes
to bite once he happened to be the

542
00:41:50,440 --> 00:41:53,440
correct bite and another one which is a
96

543
00:41:53,980 --> 00:41:57,190
so let's examine folks for second

544
00:41:57,190 --> 00:42:04,210
a what where the stock is using a cut
proc maps and as you can see and this is

545
00:42:04,210 --> 00:42:07,870
where the stock is located and that's
the base of the stock the highest

546
00:42:07,870 --> 00:42:11,470
address and a the other address is the
limit of the stuck

547
00:42:13,260 --> 00:42:21,540
so basically the bites will elect are
actually reside within that range

548
00:42:21,540 --> 00:42:26,220
those are the least significant bits and
then we call an adult can just

549
00:42:26,220 --> 00:42:30,899
fast-forward a little bit because it's
takes like two minutes depending on what

550
00:42:30,900 --> 00:42:44,520
might we got it

551
00:42:45,670 --> 00:42:48,880
yeah

552
00:42:58,760 --> 00:43:05,960
okay great so as you can see we did leak
the arbitrary address and then you just

553
00:43:05,960 --> 00:43:08,030
don't see because it happened too fast

554
00:43:08,030 --> 00:43:13,760
we also lick the stock base the way we
do that can you stop for a second

555
00:43:13,760 --> 00:43:17,900
the way we do that is that we take the
arbitrary pointer we licked and within

556
00:43:17,900 --> 00:43:22,610
the stock range and align it to a page
boundary and then just a head

557
00:43:23,410 --> 00:43:28,359
- 1000 exabyte each time until we don't
get a connection back and that would be

558
00:43:28,359 --> 00:43:34,240
the stock based so now the stage the
exploit is at is trying to lick the

559
00:43:34,240 --> 00:43:39,009
random stock offset that the current
generated and so now if you can continue

560
00:43:39,010 --> 00:43:41,589
what we'll do now is attached with 2gb

561
00:43:41,589 --> 00:43:42,609
- D

562
00:43:42,609 --> 00:43:49,150
tiny proxy to the demon service set a
breakpoint on getting your info and set

563
00:43:49,150 --> 00:43:53,319
the debugger to follow for my own child
and which means that we will also also

564
00:43:53,319 --> 00:43:59,079
attach child processes of the demon
service and debug dose so we continue

565
00:43:59,079 --> 00:44:02,890
and we are now within the context of the
child process and then in the creative

566
00:44:02,890 --> 00:44:04,328
process and stop it

567
00:44:04,329 --> 00:44:10,720
get in here in front will continue again
and we will encounter a clash and the

568
00:44:10,720 --> 00:44:11,769
reason why is that

569
00:44:11,769 --> 00:44:17,529
it's this specific iteration we didn't
guess the correct offsets if you examine

570
00:44:17,529 --> 00:44:21,609
the stack trace the crashes due to a
board to raise and general symbols in

571
00:44:21,609 --> 00:44:24,880
this machine but it happened to the free
that we showed earlier

572
00:44:27,220 --> 00:44:32,230
so now just continue as you can see the
kids are and just continue and continue

573
00:44:32,230 --> 00:44:35,230
because we crash all the child processes
all the time

574
00:44:35,950 --> 00:44:40,779
can you also fresh form so now there's a
nine BTW numeration

575
00:44:41,640 --> 00:44:44,640
to get the correct and offset

576
00:44:51,640 --> 00:44:56,770
account is this enumeration is usually
the one that takes the most amount of

577
00:44:56,770 --> 00:44:57,400
time

578
00:44:57,400 --> 00:45:05,050
well that depends of what upset you got
it thanks

579
00:45:05,050 --> 00:45:11,920
and well we got the correct of that this
address would be actually where the a

580
00:45:11,920 --> 00:45:18,220
local buffer is and we now at the stage
where we try to integrate the word the

581
00:45:18,220 --> 00:45:24,189
return address of getting your info and
basically we're tipsy is that's where

582
00:45:24,190 --> 00:45:25,450
lipsy is located

583
00:45:25,450 --> 00:45:30,279
it was randomized set in this execution
and it's kind of hard to say but we

584
00:45:30,280 --> 00:45:31,990
start to get advice from there

585
00:45:31,990 --> 00:45:36,430
one more thing our payload what it does
is create a new process and you a fight

586
00:45:36,430 --> 00:45:40,629
under the temp directory so we later see
that our people are actually worked by

587
00:45:41,480 --> 00:45:45,350
creating a fight over there so we liked
one bite of the return address

588
00:45:45,350 --> 00:45:49,069
57 and again we'll fast forward a little
bit

589
00:45:49,790 --> 00:45:53,869
this entire expert takes about seven to
ten minutes

590
00:45:54,770 --> 00:45:58,130
but we do x-ray machine that is on the
same line with us

591
00:45:58,640 --> 00:46:02,089
so if it would be on the internet it
would take a little bit longer because

592
00:46:02,090 --> 00:46:04,890
the fair the time we have to wait

593
00:46:04,890 --> 00:46:06,680
for the tcp

594
00:46:06,680 --> 00:46:11,480
request the tcp seem to be sent so it
could take longer time

595
00:46:17,330 --> 00:46:25,490
thanks so we now licked and we're lipsy
is we assume the one version of lipsy

596
00:46:25,490 --> 00:46:30,080
for this demo but we could have just
enumerated as we told you earlier and

597
00:46:30,080 --> 00:46:32,980
performed the rock chain

598
00:46:32,980 --> 00:46:37,300
which will create a new file an attempt
directory because that's what we

599
00:46:37,300 --> 00:46:47,619
executed and using the check and this is
the NFC address and there you go

600
00:46:48,460 --> 00:47:07,540
as you can see in your file was created
so just a quick conclusion security

601
00:47:07,540 --> 00:47:14,320
mitigations can make exploitation harder
but attackers can find a creative ways

602
00:47:15,390 --> 00:47:20,490
abusing always features like for this
example for this exploitation and the

603
00:47:20,490 --> 00:47:24,390
way the first system called works in
order to bypass those medications

604
00:47:25,319 --> 00:47:28,769
I was important to note is that this
technique can be applied to basically

605
00:47:28,769 --> 00:47:32,609
almost any memory corruption
vulnerability and within the server

606
00:47:33,760 --> 00:47:37,330
that Fox itself and operates the way we
described

607
00:47:38,260 --> 00:47:41,950
so how you protect yourself basically
you can use the palo alto networks

608
00:47:41,950 --> 00:47:46,509
security platform that protect you
against some of these threats and more

609
00:47:46,510 --> 00:47:51,010
importantly just better of software
basically if Lucy's batch and there

610
00:47:51,010 --> 00:47:53,500
would be no vulnerability

611
00:47:53,500 --> 00:47:59,110
so any questions no one

612
00:47:59,620 --> 00:48:02,620
yes

613
00:48:04,380 --> 00:48:18,180
yeah

614
00:48:21,910 --> 00:48:24,910
yeah

615
00:48:25,410 --> 00:48:28,410
yeah

616
00:48:31,390 --> 00:48:35,170
yeah

617
00:48:37,500 --> 00:48:49,770
we didn't try the the path of trying to
abuse their free behavior though we did

618
00:48:49,770 --> 00:48:54,240
see some my post about it and we thought
this is solution will be more

619
00:48:54,240 --> 00:48:58,259
straightforward and simpler to implement
and it will also demonstrate the

620
00:48:58,260 --> 00:49:08,310
technique services that sounds that I
minutes depending on the on demand if

621
00:49:08,310 --> 00:49:10,529
you get lower or higher bites for your
orders

622
00:49:10,530 --> 00:49:18,630
we could also improve that because we
didn't assume for somebody that we knew

623
00:49:18,630 --> 00:49:22,290
the value of like for instance some
bites are always zero some bites are

624
00:49:22,290 --> 00:49:26,070
always constant offset the return
address always ends up with the same

625
00:49:26,070 --> 00:49:28,980
bite stuff like that we did stealing
numerators

626
00:49:28,980 --> 00:49:32,070
so we could have improved a little bit

627
00:49:32,070 --> 00:49:35,310
any other questions

628
00:49:39,400 --> 00:49:47,260
all right then thank you

