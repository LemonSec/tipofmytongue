1
00:00:14,680 --> 00:00:22,540
hi everybody my name is Mikhail a is
lucas i estimate we come from Zurich

2
00:00:22,540 --> 00:00:30,130
from google and we're here to present
about CSP which is contra security

3
00:00:30,130 --> 00:00:37,180
policy and will say what it is how to
break it

4
00:00:37,180 --> 00:00:42,850
I was the current status of CSP and also
how to make it better

5
00:00:43,600 --> 00:00:46,600
how we are trying to make it better

6
00:00:49,360 --> 00:00:57,100
yeah that's us we workin the information
security team at Google Music and we are

7
00:00:57,100 --> 00:01:04,479
in a special focus area which aims to
solve large classes of vulnerabilities

8
00:01:04,479 --> 00:01:08,740
by mitigations in this case mostly
cross-site scripting

9
00:01:09,610 --> 00:01:12,610
so we're focusing on web vulnerabilities

10
00:01:14,140 --> 00:01:21,070
so yeah as a set first we talk about
what is ESP then we the sexy policy and

11
00:01:21,070 --> 00:01:22,119
we show

12
00:01:22,119 --> 00:01:25,810
what's inside a policy then we like
common mistakes

13
00:01:25,810 --> 00:01:33,400
how to bypass ESP and then we switch
from like a district destructive let's

14
00:01:33,400 --> 00:01:40,450
say i had to like a fixing hat and we
say how can we make it better and how we

15
00:01:40,450 --> 00:01:46,509
are already making better and if at any
moment you have any questions i would

16
00:01:46,509 --> 00:01:50,560
strongly encourage you to to stop us and
ask

17
00:01:50,560 --> 00:01:55,000
I I personally really like having
questions not just at the end but also

18
00:01:55,000 --> 00:02:05,409
doing ok so what's ESP CSP is our tool
that what means have to lock down their

19
00:02:05,409 --> 00:02:13,630
web applications in various ways so it's
does not solve the problems right

20
00:02:13,630 --> 00:02:16,690
d to the box the vulnerabilities you
might have but it's a defense-in-depth

21
00:02:16,690 --> 00:02:17,530
mechanism

22
00:02:17,530 --> 00:02:23,320
this means that in a lot of cases it is
supposed to block exploitation

23
00:02:24,190 --> 00:02:30,070
but not just that in any case in no case
should this be considered an alternative

24
00:02:30,070 --> 00:02:40,359
to careful input validation or output
encoding 60 is a pretty ambitious

25
00:02:40,360 --> 00:02:47,260
project and the first name is as a set
to mitigate risk so basically you can

26
00:02:47,260 --> 00:02:52,630
you have a fine-grained control of what
resources your web application can fetch

27
00:02:52,630 --> 00:02:59,859
in bed and execute in the context of
where your web application right so this

28
00:02:59,860 --> 00:03:07,720
for example is important when there are
market markup injections by an attacker

29
00:03:07,720 --> 00:03:11,620
the you do not expect this kind of
content to be in your web application so

30
00:03:11,620 --> 00:03:17,740
you can and declaratively say I just
want these content be on my page so if

31
00:03:17,740 --> 00:03:21,940
an attacker inject some content you you
did not see coming

32
00:03:22,870 --> 00:03:26,470
your application with just refuse to
load it right

33
00:03:26,470 --> 00:03:30,760
you can also be used to reduce privilege
of the application right i had an

34
00:03:30,760 --> 00:03:34,060
important concept in insecurity in
general not just with security is the

35
00:03:34,060 --> 00:03:38,530
minimum privilege concept so everything
should run at the minimum privilege

36
00:03:38,530 --> 00:03:44,680
it should so for example you can send
box not just frames html5 added a

37
00:03:44,680 --> 00:03:48,670
sandbox support for iframes but every
resource you have

38
00:03:49,180 --> 00:03:56,530
so you can for example isolate origins
you can avoid script to load in the same

39
00:03:56,530 --> 00:03:58,720
origin and so on

40
00:03:58,720 --> 00:04:04,269
and lastly you can use the SP to detect
exploitation because it has a monitoring

41
00:04:04,269 --> 00:04:09,970
mode and reporting mode where reports
are sent to an end . of your choice

42
00:04:09,970 --> 00:04:14,590
so that you can collect the reports of
violations graph them over time and have

43
00:04:14,590 --> 00:04:18,880
alerts or other types of monitoring and
alerting systems

44
00:04:22,010 --> 00:04:32,659
so CSP is basically an HTTP either
actually - Heather's the first one is

45
00:04:32,660 --> 00:04:37,070
content security policy which is
constituted policy in so-called and

46
00:04:37,070 --> 00:04:38,480
forcing mode

47
00:04:38,480 --> 00:04:42,740
so this is actually enforced and the
second one is consciously policy report

48
00:04:42,740 --> 00:04:47,810
only you can add report only to just
have it report violations but not

49
00:04:47,810 --> 00:04:51,860
actually enforce them and block the
content right so this is useful

50
00:04:52,460 --> 00:04:57,650
basically only if you want monitoring
and not just not also real protection

51
00:04:57,650 --> 00:05:03,739
there are many CSP directives for
different type of content so for example

52
00:05:03,740 --> 00:05:11,000
IMG SRC controls images media SRC
controls media and and child frames

53
00:05:11,000 --> 00:05:15,440
plugins styles sheets but will mostly
focused on script SRC

54
00:05:16,100 --> 00:05:19,430
because we are worried about cross-site
scripting which is the top web

55
00:05:19,430 --> 00:05:22,430
vulnerability right

56
00:05:28,710 --> 00:05:34,169
this is an example policy on the right
default sources the fall back pockets so

57
00:05:34,170 --> 00:05:39,840
basically everything everything that is
not more specified in a more a

58
00:05:39,840 --> 00:05:46,409
finer-grained way falls into the default
SRC bucket sales means the same origin

59
00:05:46,410 --> 00:05:49,740
so this policy will allow content in the
same origin

60
00:05:49,740 --> 00:05:55,650
it will allow scripts in the same origin
and from yep . khan and we will also

61
00:05:55,650 --> 00:06:00,870
send violations report to CSP violation
logger in the same domain you can also

62
00:06:00,870 --> 00:06:05,580
specify a remote past for reports and
for everything

63
00:06:05,580 --> 00:06:10,500
so here for example our money that
example.com you want to load an image of

64
00:06:10,500 --> 00:06:11,340
a cat

65
00:06:11,340 --> 00:06:18,780
you do image source cat or PNG that is
allowed because image source is not

66
00:06:18,780 --> 00:06:22,919
there so it falls back to default source
itself is allowed so it's the same

67
00:06:22,920 --> 00:06:25,170
origin is PHX it says yes

68
00:06:25,170 --> 00:06:31,110
the same origin let's allow then you
also try to choose a source a script

69
00:06:31,110 --> 00:06:36,240
from yep , which is explicitly allowed
for scripts in a second

70
00:06:36,240 --> 00:06:39,660
directive script SRC you have to come it
checks it to set

71
00:06:39,660 --> 00:06:43,710
yes this is allowed I executed but if an
attack her

72
00:06:43,710 --> 00:06:50,430
yes if an attacker try to inject mark up
like this

73
00:06:50,430 --> 00:06:54,960
you the usual access reflective exercise
ready breaks out of your markup and then

74
00:06:54,960 --> 00:06:59,849
he says he wants to source is clips from
his attacker dot-com domain so it does

75
00:06:59,850 --> 00:07:01,710
this script SRC attacker com

76
00:07:01,710 --> 00:07:05,370
this is blocked because the source is
not whitelisted there's no attacker .

77
00:07:05,370 --> 00:07:09,630
com right and the report is sent to the
CSP violation logger

78
00:07:09,630 --> 00:07:16,290
what if the attacker tries to just
inject inline scripts like this normally

79
00:07:16,290 --> 00:07:21,000
script alert 42 this is also blocked
because inline scripts are not allowed

80
00:07:21,000 --> 00:07:28,080
there is a keyword for allowing inline
scripts which is unsafe inline but this

81
00:07:28,080 --> 00:07:35,039
is completely defeats the protective
measure protective effectiveness of CSP

82
00:07:35,040 --> 00:07:38,100
so here ever

83
00:07:38,100 --> 00:07:40,720
very very quick demo for you

84
00:07:40,720 --> 00:07:44,470
so here we can specify the consequence
of policy

85
00:07:45,070 --> 00:07:50,740
can you see that oh wow it's really
blurry for some reason I don't know why

86
00:07:50,740 --> 00:07:59,620
a little blurry anyway she was specified
the content security policy and for

87
00:07:59,620 --> 00:08:02,260
example this with this

88
00:08:02,260 --> 00:08:05,530
I allow just images on the same domain

89
00:08:05,530 --> 00:08:17,080
so for example if i add a cat image we
see on the same domain it loads but if i

90
00:08:17,080 --> 00:08:21,010
try to source something from evil . com

91
00:08:21,010 --> 00:08:25,240
I here

92
00:08:25,240 --> 00:08:30,430
well you probably can't read but he said
refuted refused to load the image evil .

93
00:08:30,430 --> 00:08:32,469
com catch a pack because it violates the

94
00:08:32,469 --> 00:08:36,550
the following content security policy
all right

95
00:08:42,360 --> 00:08:47,550
yeah and here i am of course our that
was a pretty cool introduction arm

96
00:08:47,550 --> 00:08:50,939
before i continue with like the
interesting stuff about like how to

97
00:08:50,940 --> 00:08:54,779
break see is being to know i would like
to know like how many of you guys have

98
00:08:54,779 --> 00:08:59,730
hear about us before so just to go
orders are awesome that's great that's

99
00:08:59,730 --> 00:09:00,600
really great

100
00:09:00,600 --> 00:09:04,709
how many of you guys like tried to
impact to try to build these people

101
00:09:04,709 --> 00:09:08,849
application are also great breaking CSP

102
00:09:08,850 --> 00:09:12,029
cool awesome so I guess you would like
that

103
00:09:12,029 --> 00:09:17,189
the first part is easy and the other
this last section is getting more

104
00:09:17,190 --> 00:09:21,899
interesting i guess and hopefully he has
some news for you got for news from for

105
00:09:21,899 --> 00:09:26,670
you guys as well so like these
properties are really interesting right

106
00:09:26,670 --> 00:09:32,640
so CSP as a mitigation has like a lot of
potential are the possibility to maybe

107
00:09:32,640 --> 00:09:33,060
two feet

108
00:09:33,060 --> 00:09:41,069
access is really interesting
unfortunately most CSPs which are like

109
00:09:41,070 --> 00:09:44,730
which they are currently on the back
Eric totally useless right actually

110
00:09:44,730 --> 00:09:51,600
crawled a lot of sites like millions and
really the vast majority is useless

111
00:09:51,600 --> 00:09:56,880
I think this is mostly because people
either don't understand CSP or they just

112
00:09:56,880 --> 00:09:59,370
not manage to

113
00:09:59,370 --> 00:10:02,820
I don't know refactor the page in a way
that they could be you to protect it

114
00:10:02,820 --> 00:10:06,000
could be used of CSP right so they still
use and shipping line or whatever

115
00:10:06,000 --> 00:10:10,320
so yeah it's how to deploy are two
examples

116
00:10:11,279 --> 00:10:14,670
twitter.com and gmail

117
00:10:14,670 --> 00:10:18,120
this is just a script source part of the
content security policy

118
00:10:19,589 --> 00:10:23,579
don't focus on the details but you see
it it gets pretty long

119
00:10:23,579 --> 00:10:27,930
it is super hard to come up with a
superset that works and hold of all your

120
00:10:27,930 --> 00:10:32,640
leg forward the entire domain right so
you need to buy at least every other

121
00:10:32,640 --> 00:10:36,959
domain or end . you sourcing scripts
from if you forget on your site will

122
00:10:36,959 --> 00:10:41,939
break right it is really difficult right
also for the developer so the other

123
00:10:41,940 --> 00:10:48,990
thing is it's not only getting along the
morn . you put on the CSP in the CSP

124
00:10:48,990 --> 00:10:53,399
scriptures directive the more likely it
is that you cease totally useless right

125
00:10:53,399 --> 00:10:55,699
are we will introduce a bit later but

126
00:10:55,699 --> 00:11:01,758
certain endpoints are can be used to
bypass the whole CSP direct really it's

127
00:11:01,759 --> 00:11:12,859
a question are probably but maybe let's
discuss later

128
00:11:13,459 --> 00:11:20,779
no problem so the first thing which we
see here is like a both policies have

129
00:11:20,779 --> 00:11:26,660
answered invented so it is actually use
less right because you could just inject

130
00:11:26,660 --> 00:11:30,290
a script tag with whatever you want
right

131
00:11:30,290 --> 00:11:35,779
so this is actually really bad but also
if it would not have have two unsafe

132
00:11:35,779 --> 00:11:40,609
inline it would still be by possible
regardless what I guess down to Finland

133
00:11:40,609 --> 00:11:44,329
is still here because they can't get it
work without it because it's really hard

134
00:11:45,109 --> 00:11:56,689
so our I wouldn't call it a bypass may
be common mistake or maybe on purpose

135
00:11:56,689 --> 00:12:00,379
because you still have England script on
your our application and you haven't

136
00:12:00,379 --> 00:12:02,119
reflected wave completely

137
00:12:02,119 --> 00:12:04,939
for example for event and wasn't just
kind of stuff that takes a bit of effort

138
00:12:04,939 --> 00:12:08,419
and if your application wasn't designed
of CSP from ground up

139
00:12:08,419 --> 00:12:14,239
it's hard right but it's definitely
doable so s Mickey already mentioned

140
00:12:14,239 --> 00:12:17,269
right if you have answered in line in
the script source

141
00:12:17,269 --> 00:12:21,259
you could just as a attacker in checked
something like that

142
00:12:21,259 --> 00:12:25,850
like if we would say like a reflective
access like a break out and then script

143
00:12:25,850 --> 00:12:26,509
alert

144
00:12:26,509 --> 00:12:30,889
blah so it's really useless right so
totally defeats the purpose like the

145
00:12:30,889 --> 00:12:33,499
excess protection purpose of a CSP

146
00:12:33,499 --> 00:12:40,549
yes so the same holds true if there's no
script source directive and only a

147
00:12:40,549 --> 00:12:45,439
default source right because then the
default source becomes effective for

148
00:12:45,439 --> 00:12:48,169
script source and yep

149
00:12:48,169 --> 00:12:55,789
maybe a bit more interesting but still
very trivial it

150
00:12:55,789 --> 00:13:02,449
we saw it quite often that people just
by place like our URL schemes or star

151
00:13:02,449 --> 00:13:07,270
right so I mean basically you can again

152
00:13:07,270 --> 00:13:12,970
- almost everything right it's just a
bit bit more complicated right so

153
00:13:12,970 --> 00:13:19,180
instead of like inline script would just
source it from like any HTTP end . h PSN

154
00:13:19,180 --> 00:13:23,890
. and it will work as well or if the
state to write you just create a data

155
00:13:23,890 --> 00:13:28,180
plot with the script you want to execute
you know you know maybe just like a

156
00:13:28,180 --> 00:13:32,739
length for script restriction for excess
it might help to some extent but it's

157
00:13:32,740 --> 00:13:37,270
pretty useless right star as well right

158
00:13:37,270 --> 00:13:40,569
start just that means you can include
anything

159
00:13:40,570 --> 00:13:50,380
so are the same is the case for object
source if you have a protocol handler or

160
00:13:50,380 --> 00:13:55,900
after a URL scheme or about card on an
object or so you can do look very

161
00:13:55,900 --> 00:14:03,010
similar stuff just with flash files that
executes JavaScript ride are so just

162
00:14:03,010 --> 00:14:06,939
briefly to the unsafe inline we found
about like eighty-four eighty-five

163
00:14:06,940 --> 00:14:09,910
percent of the policies use answer in
line right

164
00:14:09,910 --> 00:14:13,600
eighty-five percent of to CSP policies
we were able to crawl on the map

165
00:14:14,110 --> 00:14:17,110
this is like a substantial amount right
it

166
00:14:22,100 --> 00:14:28,459
I it was like what was 25 percent and a
little more

167
00:14:28,459 --> 00:14:34,219
I think it'll be a little more than two
percent yeah so of hostnames host names

168
00:14:34,220 --> 00:14:37,430
based on emotions not you also because
it's priced

169
00:14:37,430 --> 00:14:46,758
yeah so it becomes less travel right

170
00:14:46,759 --> 00:14:52,430
very often people do like to fold source
like very liberal to have like images or

171
00:14:52,430 --> 00:14:55,250
whatever or just restrict the script
source right

172
00:14:55,250 --> 00:14:59,149
for example this one is kinda strict but
just self if you don't allow like

173
00:14:59,149 --> 00:15:05,000
user-provided content or user uploaded
the same domain it's usually ok-ish are

174
00:15:05,000 --> 00:15:10,730
very often people forget to add optical
source object source right

175
00:15:10,730 --> 00:15:14,930
so if you have a policy like that an
attacker could just include an object

176
00:15:14,930 --> 00:15:26,209
that does java script right and then you
give the object access to the sides

177
00:15:26,209 --> 00:15:30,380
javascript and you can again do whatever
you want in that origin

178
00:15:30,980 --> 00:15:41,720
so yeah also i mentioned that already

179
00:15:42,259 --> 00:15:48,439
if you want with self I guess most of
the cases could be okay if it's a pretty

180
00:15:48,439 --> 00:15:53,839
big domain like with a lot of endpoint
like a lot of product or whatever or if

181
00:15:53,839 --> 00:15:54,860
you

182
00:15:54,860 --> 00:15:59,240
yeah I know if you have like an apple
section of a right on the same domain

183
00:15:59,240 --> 00:16:03,019
which is always a better dear anyways
right but just for the sake of

184
00:16:03,019 --> 00:16:07,459
completeness it should be mentioned are
even attacker can for example upload

185
00:16:07,459 --> 00:16:14,388
javascript file or something that looks
like a JavaScript filed a CSV right then

186
00:16:14,389 --> 00:16:17,640
also self is not sufficient

187
00:16:17,640 --> 00:16:28,650
yeah so uh let's go let's continue with
cyclists in general ride

188
00:16:28,650 --> 00:16:34,770
so this is something which you see what
we really often you have a policy and

189
00:16:34,770 --> 00:16:35,730
divide list

190
00:16:35,730 --> 00:16:39,270
a lot of the mains right as we saw with
twitter and gmail

191
00:16:40,080 --> 00:16:49,830
the thing is this is unsecured in many
cases especially many CDNs which are

192
00:16:49,830 --> 00:16:55,350
like almost always whitelisted serve
files that can be used by an attacker to

193
00:16:55,350 --> 00:16:58,350
bypass the whole CSP

194
00:16:58,350 --> 00:17:05,339
I mean this is like super news for fancy
but i guess some people haven't heard

195
00:17:05,339 --> 00:17:06,119
about it

196
00:17:06,119 --> 00:17:14,069
so what you could do is if whitelisted .
com has a JSONP end . r which is

197
00:17:14,069 --> 00:17:19,800
basically just you know JavaScript
response where you can control the first

198
00:17:19,800 --> 00:17:21,240
part of the response right

199
00:17:21,240 --> 00:17:27,030
so with that white list an attack of the
TSP an attacker could include script

200
00:17:27,030 --> 00:17:30,570
source whitelisted comes less chasing p
and call back and then as a callback

201
00:17:30,570 --> 00:17:36,270
parameter he could put a javascript
function right are depending how

202
00:17:36,270 --> 00:17:43,110
restricted is even like a lot a lot of
trouble code as well so by doing that

203
00:17:43,110 --> 00:17:50,729
sees people say my jump next slide these
people say yeah sure

204
00:17:50,730 --> 00:17:55,050
at least that comes whitelisted so I
allowed this transaction and you're

205
00:17:55,050 --> 00:17:58,740
perfectly fine to source that from
lightest to come but at least it's not

206
00:17:58,740 --> 00:18:05,670
come then will our reply with the
callback parameter R and some other

207
00:18:05,670 --> 00:18:06,480
stuff right

208
00:18:06,480 --> 00:18:11,640
usually if some object blocks or
whatever right

209
00:18:11,640 --> 00:18:16,710
and then for the page it will look like
if you would include a script from the

210
00:18:16,710 --> 00:18:20,340
right because first thing is which is
returned is like a load one and we'll

211
00:18:20,340 --> 00:18:27,780
just execute so many people maybe know
that Jason P endpoints are often somehow

212
00:18:27,780 --> 00:18:28,879
restricted in the

213
00:18:28,880 --> 00:18:34,820
a character set they allow so for
example like an apparent ease is so

214
00:18:34,820 --> 00:18:39,830
whatever it is sometimes block right
which is good but this only mitigates

215
00:18:39,830 --> 00:18:45,919
this attack to some next to some extent
because there's something called some

216
00:18:45,920 --> 00:18:47,120
attack

217
00:18:47,120 --> 00:18:53,060
it's a same origin method of execution
and basically for that attack

218
00:18:53,060 --> 00:18:58,399
it's enough if you control the function
name to more or less you know interact

219
00:18:58,400 --> 00:19:01,610
with the page as a user so you don't
have like full script execution but

220
00:19:01,610 --> 00:19:06,979
usually you can do everything a user can
do right so it is like almost as bad or

221
00:19:06,980 --> 00:19:12,770
as bad depending how sensitive your side
is so that would look like this right

222
00:19:12,770 --> 00:19:19,610
you would for example like have called
back are some button . click and you

223
00:19:19,610 --> 00:19:24,139
don't need any parameters for that and
then you would just simulate a series of

224
00:19:24,140 --> 00:19:26,720
clicks or stuff like that right

225
00:19:26,720 --> 00:19:31,190
so it's pretty powerful there's a nice
paper about it if you haven't read it

226
00:19:31,190 --> 00:19:34,460
it's really a rough reading

227
00:19:34,460 --> 00:19:39,680
yeah so for the four better
understanding Mickey will give you like

228
00:19:39,680 --> 00:19:44,630
a quick demo of like how jsonp bypasses
work are ya

229
00:19:45,380 --> 00:19:51,650
thanks Lucas I this is great so yeah
isn't he is a problem for for CSP and

230
00:19:51,650 --> 00:19:57,290
this is not a very widely known and we
want to stress that this is a real

231
00:19:57,290 --> 00:19:59,510
problem and this is a deal breaker

232
00:19:59,510 --> 00:20:08,390
even if you use not just full of domains
like a CDN almost all Syrians and better

233
00:20:08,390 --> 00:20:12,350
at least one Jason p.m. . so this means
you can't wait Li CBS right

234
00:20:12,350 --> 00:20:17,330
this is as strong as that yes and even
if you want to

235
00:20:17,330 --> 00:20:21,260
what is that like a deep path because
you can say i don't want to lightly

236
00:20:21,260 --> 00:20:26,030
stuff full domain I whiteley is just a
query you at least the past okay

237
00:20:26,030 --> 00:20:31,610
you might be safe but in a lot of cases
actually even the API you want to you

238
00:20:31,610 --> 00:20:34,740
want to source for example

239
00:20:34,740 --> 00:20:38,490
google api or something like that might
support isn't p

240
00:20:39,000 --> 00:20:44,820
and if it does it means that you can
source it in a secure way because you

241
00:20:44,820 --> 00:20:49,980
can always pass callback parameter right
and have this that looks showed so here

242
00:20:49,980 --> 00:21:02,010
I want to show for example with a google
maps so here we have like our amsterdam

243
00:21:03,360 --> 00:21:12,209
this is a widget this is dynamic and is
sourcing maps google api eyes . com maps

244
00:21:12,210 --> 00:21:13,500
api to GS

245
00:21:13,500 --> 00:21:19,290
this supports are called back because a
lot of it i still do that

246
00:21:19,290 --> 00:21:25,320
so when this is finished loading it will
call in each map which is this function

247
00:21:25,320 --> 00:21:38,040
ok so what happens if I just right

248
00:21:38,040 --> 00:21:41,040
mmm what happens if

249
00:21:42,669 --> 00:21:46,690
you approach it sent set the content in
repose me

250
00:21:46,690 --> 00:21:55,929
yes no - 07 ya know if it would alert in
the callback this happens right

251
00:21:55,929 --> 00:22:00,399
this is not dangerous but because it
caused a large with some junk right it's

252
00:22:00,399 --> 00:22:04,149
not dangerous but if you have elements
on the page you can do element . click

253
00:22:04,149 --> 00:22:08,408
and this boot to get clicked because the
arguments passed to click has just gets

254
00:22:08,409 --> 00:22:09,100
ignored

255
00:22:09,100 --> 00:22:16,928
right so this is just to show that like
a very common API uses the S&P and you

256
00:22:16,929 --> 00:22:19,389
can't you can't

257
00:22:19,389 --> 00:22:25,178
so you can continue with 16 a secure way

258
00:22:25,179 --> 00:22:28,179
so for example here

259
00:22:29,679 --> 00:22:40,179
let's put a continuity policy that just
let's just ignore this for a moment that

260
00:22:40,179 --> 00:22:44,710
just a whitelist made maps . google it p
is . com

261
00:22:53,070 --> 00:22:56,070
okay just a second

262
00:22:57,549 --> 00:23:00,549
ok let's try again with the google maps

263
00:23:03,399 --> 00:23:08,498
ok

264
00:23:09,220 --> 00:23:12,220
sorry about that

265
00:23:17,450 --> 00:23:23,630
oh yes and I have to also add unsafe
inline group had announced right Leah we

266
00:23:23,630 --> 00:23:28,700
are going to the introducing not
associated with your number still ok

267
00:23:28,700 --> 00:23:33,740
i also have to allow and safe in line
for inline scripts because i have any

268
00:23:33,740 --> 00:23:38,899
any line block right for you need a map
for different this one right let's just

269
00:23:38,899 --> 00:23:41,090
take in order to announce for a second

270
00:23:41,090 --> 00:23:47,480
yes so this works I allowed to maps
google api still calm but as it should

271
00:23:47,480 --> 00:23:54,320
be for if I just a script source

272
00:23:54,320 --> 00:24:04,039
https maps google api is . com maps api
GS called back

273
00:24:04,039 --> 00:24:16,399
alert t I basically bypassed the policy
because here i could put my javascript

274
00:24:16,399 --> 00:24:23,090
- yeah yes and here we go back to the
presentation

275
00:24:25,030 --> 00:24:26,940
so yeah I mean

276
00:24:26,940 --> 00:24:34,260
pretty travel right it's white listed
and then . just replies what able to use

277
00:24:34,260 --> 00:24:40,890
it provides in the parameters right so
you trust yeah trust the whole end . but

278
00:24:40,890 --> 00:24:45,510
it still serves like user controllable
content right

279
00:24:45,510 --> 00:24:48,930
also funny right

280
00:24:48,930 --> 00:24:53,370
like if you use like angular or if you
don't use it and you have like any white

281
00:24:53,370 --> 00:25:01,530
place that origin in your CSP that also
serves angular UCSB is basically by

282
00:25:01,530 --> 00:25:06,899
possible not sure if this is obvious or
not too many of you

283
00:25:06,900 --> 00:25:12,570
so basically what you can do is right
now let's assume white list too . com

284
00:25:12,570 --> 00:25:17,790
hosts angular as an attack or you would
just checked that script tack with

285
00:25:17,790 --> 00:25:21,540
angular and then you would you like a
fit of anger right you can for example

286
00:25:21,540 --> 00:25:22,620
do that

287
00:25:22,620 --> 00:25:27,840
uh and this in an expression will get
executed because anger is loaded right

288
00:25:28,590 --> 00:25:33,179
the funny thing is again most students
provide your angular right so white

289
00:25:33,180 --> 00:25:36,180
listing in the city and again is
probably already enough to get it by

290
00:25:36,180 --> 00:25:38,220
past your PSP

291
00:25:38,220 --> 00:25:42,180
this is already very powerful because
you can do anything in the scope of

292
00:25:42,180 --> 00:25:44,910
angle right after angular ping

293
00:25:44,910 --> 00:25:49,050
but many many of you would say like yeah
it's not a full script execution so

294
00:25:49,050 --> 00:25:55,409
maybe this is like a scam but I mean
angular is basically nice but usually

295
00:25:55,410 --> 00:26:00,810
just all the sandbox bypasses right
angle doesn't consider the sandbox as

296
00:26:00,810 --> 00:26:06,030
the security sandbox I guess although
they are trying are just like always

297
00:26:06,030 --> 00:26:09,240
said it sent box bypass for angle right

298
00:26:09,240 --> 00:26:14,910
so for example again you load angular
and then you just do like angular

299
00:26:14,910 --> 00:26:19,350
application and Shey click and then you
select events view alert right and then

300
00:26:19,350 --> 00:26:25,409
if you click the element the JavaScript
to execute are you have another example

301
00:26:25,410 --> 00:26:33,390
in second that combines a angular and
what was it four times

302
00:26:33,390 --> 00:26:38,520
prototype GS to get like execution
without any user interaction and just

303
00:26:38,520 --> 00:26:39,910
also sandbox escapes

304
00:26:39,910 --> 00:26:44,710
for angular that are a bit longer it
also don't require a user interaction at

305
00:26:44,710 --> 00:26:45,220
all

306
00:26:45,220 --> 00:26:51,760
so you see it's getting pretty hard for
having a bite list that doesn't have any

307
00:26:51,760 --> 00:26:58,360
GMP doesn't have any angular and no user
controlled contents of like that so it's

308
00:26:58,360 --> 00:27:00,100
getting thin

309
00:27:00,100 --> 00:27:03,310
this is like for angular explained again

310
00:27:03,310 --> 00:27:09,970
so again the CSP allows workers to calm
it just says oh yeah right it'll come is

311
00:27:09,970 --> 00:27:10,570
allowed

312
00:27:10,570 --> 00:27:17,980
so you can load angler and then since
this is just a script tag that source is

313
00:27:17,980 --> 00:27:19,630
something from analog domain

314
00:27:19,630 --> 00:27:24,370
it's also allowed to execute right and
this is the example for complex

315
00:27:24,370 --> 00:27:26,649
angularjs combined with prototype chairs

316
00:27:26,650 --> 00:27:30,070
so you first select an Anglo dangler
library and then on top of that the load

317
00:27:30,070 --> 00:27:35,200
prototype and then you could do
something like on curry call alert 12 on

318
00:27:35,200 --> 00:27:38,110
carico will give you a window object and
then

319
00:27:38,110 --> 00:27:41,169
yeah you can do everything again right

320
00:27:41,170 --> 00:27:44,980
all of this is actually coming from cure
50 fries

321
00:27:46,390 --> 00:27:51,790
mini-challenge page if you're interested
in that they are there a lot of anger

322
00:27:51,790 --> 00:27:57,280
bypasses also CSP bypasses Mario is
doing a great job on like finding them

323
00:27:57,280 --> 00:28:00,310
collecting them and this is really cool

324
00:28:02,140 --> 00:28:05,140
yeah

325
00:28:06,940 --> 00:28:09,940
done

326
00:28:11,030 --> 00:28:15,350
this is something which is really
interesting

327
00:28:16,190 --> 00:28:19,790
we actually haven't been very about that
a long time as well

328
00:28:19,790 --> 00:28:24,290
only been talking with my quest was to
author of the Seas piece back in a side

329
00:28:24,290 --> 00:28:27,290
sentence he mentioned that this is
possible

330
00:28:27,860 --> 00:28:32,840
so you know that CSP allows you to also
provide a path right so you could say

331
00:28:32,840 --> 00:28:33,919
yes

332
00:28:33,920 --> 00:28:38,750
these cnc showed us the all insecure we
just white list every single javascript

333
00:28:38,750 --> 00:28:42,320
file which were loading which is still
crazy because you will have like a two

334
00:28:42,320 --> 00:28:46,280
page CSP probably right but assuming you
could do it right

335
00:28:47,600 --> 00:28:53,899
if any of these whitelisted endpoints
have an open redirect you could bypass

336
00:28:53,900 --> 00:28:58,310
the power of restriction entirely which
is really

337
00:28:59,060 --> 00:29:05,899
yeah not obvious right it was actually
added afterwards to fix a privacy issue

338
00:29:08,000 --> 00:29:12,650
so usually we would do something like
that right

339
00:29:12,650 --> 00:29:15,770
whiteness the dot-coms that's chasing
peak or blurred

340
00:29:15,770 --> 00:29:21,800
of course since we whitelisted not
listed , but at least it / totally

341
00:29:21,800 --> 00:29:25,159
secure . yes this will not work right

342
00:29:25,160 --> 00:29:29,840
because Rose will say yeah sorry but
Jason P is not whitelisted right

343
00:29:29,840 --> 00:29:38,510
it's just totally secure GS so what we
can do is instead we source to file from

344
00:29:38,510 --> 00:29:45,710
sight with redirected calm as a URL we
provide them

345
00:29:45,710 --> 00:29:50,900
this one right devices that come with
two not whitelisted path and what will

346
00:29:50,900 --> 00:29:59,540
happen is the browser will say yeah sure
you can source stuff from side with

347
00:29:59,540 --> 00:30:04,820
redirect come and then it will see like
code is a redirect so i'll drop the

348
00:30:04,820 --> 00:30:10,280
power of information because i have to
do it and then it redirects to some

349
00:30:10,280 --> 00:30:16,520
other powerful and Mike listal.com which
hesitation p.m. . returns chase & P and

350
00:30:16,520 --> 00:30:19,010
it's game over again right

351
00:30:19,010 --> 00:30:23,970
which is pretty bad so this was actually
added

352
00:30:23,970 --> 00:30:31,410
in as a response to houma coughs are
using chase and are using a CSP for evil

353
00:30:31,410 --> 00:30:39,150
Rock post which is really interesting
and yeah i think it's still part of the

354
00:30:39,150 --> 00:30:44,550
CHP three specs so we have to live with
that you cannot really fully rely on

355
00:30:44,550 --> 00:30:46,379
paths for security

356
00:30:46,380 --> 00:30:49,590
so that's bad right

357
00:30:51,870 --> 00:30:56,189
so this is a lot of information right
and usually developers

358
00:30:56,190 --> 00:31:01,650
it's just too much for them to know are
also for security folks sometimes right

359
00:31:01,650 --> 00:31:05,430
it's like so many bypasses and kind of
things you can do wrong

360
00:31:05,430 --> 00:31:12,660
so we developed a small tool that just
takes a CSP the users all the rules we

361
00:31:12,660 --> 00:31:18,240
found right and just keeps you all the
the weak points and bypasses of your

362
00:31:18,240 --> 00:31:21,600
content security policy and for example
like also tells you if you have missing

363
00:31:21,600 --> 00:31:23,189
your directives or whatever

364
00:31:23,190 --> 00:31:27,330
I and then you know you can unfold it
and you see like details

365
00:31:27,330 --> 00:31:33,629
we found a pretty helpful internally and
we hope to release it soon so I mean you

366
00:31:33,630 --> 00:31:39,060
know it's like not top secret or
anything so are just need to find time

367
00:31:39,060 --> 00:31:44,760
to release it and basically covers all
the rules we talked about and much more

368
00:31:44,760 --> 00:31:49,020
and especially for developers what you
can just put into CSP and see like oh

369
00:31:49,020 --> 00:31:49,590
wow

370
00:31:49,590 --> 00:31:54,090
red that's probably bad i should do
something else because it's very

371
00:31:54,090 --> 00:31:57,600
dangerous right because I people rely on
that activity you come up with this

372
00:31:57,600 --> 00:32:02,250
espn2 think you're secure but basically
they just wasted a lot of time and in

373
00:32:02,250 --> 00:32:07,230
the end the end up before and I'll just
maybe just takes the attacker bit longer

374
00:32:07,230 --> 00:32:08,430
to bypass it ride

375
00:32:08,430 --> 00:32:18,690
just buying some time so thing is uh
guess you saw its CSP is pretty powerful

376
00:32:18,690 --> 00:32:26,310
and it's like great here but it doesn't
really work in practice and we actually

377
00:32:26,310 --> 00:32:31,620
wanted to work because CSP has a lot of
interesting features and if it actually

378
00:32:31,620 --> 00:32:35,909
is actually in fact will be really
amazing if we could get rid of a huge

379
00:32:35,910 --> 00:32:36,830
portion of x

380
00:32:36,830 --> 00:32:42,168
yes with CSP right so we've never done
the problem - actually divide lists the

381
00:32:42,169 --> 00:32:44,720
thing is if you write lists the domain
right

382
00:32:44,720 --> 00:32:49,760
it's like trusting a whole city instead
of a citizen right there could be so

383
00:32:49,760 --> 00:32:50,629
many things

384
00:32:50,630 --> 00:32:55,220
javascript files other stuff on a whole
domain or CN it's actually not revised

385
00:32:55,220 --> 00:33:02,390
list it's more like you know narrowing
down at the bit right so we fought we

386
00:33:02,390 --> 00:33:07,760
probably should drop the Baptist
entirely right and instead use CSP

387
00:33:07,760 --> 00:33:10,549
nonces which were introduced in CSP -

388
00:33:10,549 --> 00:33:17,210
so instead of fight lists you would just
non severy script and only scripts with

389
00:33:17,210 --> 00:33:18,919
an ounce would get executed

390
00:33:18,919 --> 00:33:22,700
regardless if they're in line or source
from anywhere else

391
00:33:22,700 --> 00:33:25,850
the big advantage rise

392
00:33:25,850 --> 00:33:30,110
you don't have to maintain the vilest so
also for developers but it's incredibly

393
00:33:30,110 --> 00:33:31,820
hard to come up with a white list

394
00:33:31,820 --> 00:33:34,580
the second is agreeable how to maintain
/ please try to give some other

395
00:33:34,580 --> 00:33:37,158
developer at something like it out just
library

396
00:33:37,159 --> 00:33:41,600
maybe the whole side breaks because
difficult to adopt a CSP and I think

397
00:33:41,600 --> 00:33:46,158
this is also a change the speed because
i think this is also some one of the

398
00:33:46,159 --> 00:33:49,820
reasons why is he hasn't taken off
because it's really a lot of work a lot

399
00:33:49,820 --> 00:33:53,840
of work to maintain right with nonsense
it's a lot different because you can

400
00:33:53,840 --> 00:33:58,760
have the framework support announces and
for example I taught announcing scripts

401
00:33:58,760 --> 00:34:04,460
whatever arm and by that if you nonce

402
00:34:04,460 --> 00:34:11,089
for example Jason p.m. . it is fine
right because it's just the full URL

403
00:34:11,089 --> 00:34:14,389
that is not so that the attacker cannot
control it anymore right

404
00:34:14,389 --> 00:34:22,940
Mickey will give you a short demo
afterwards so yeah we call it that

405
00:34:22,940 --> 00:34:24,379
non-space tsp

406
00:34:24,379 --> 00:34:29,389
it's actually normal CSP just without
whitelists and nonsense

407
00:34:29,389 --> 00:34:34,820
there are actually some problems of that
but i think we have a solution

408
00:34:35,418 --> 00:34:38,418
so the problem is

409
00:34:40,550 --> 00:34:44,630
you can do not space to USB already now
right but it probably will break most of

410
00:34:44,630 --> 00:34:45,320
his sight

411
00:34:45,320 --> 00:34:48,980
because for example the maps

412
00:34:48,980 --> 00:34:52,340
Richard or other libraries right

413
00:34:52,340 --> 00:34:56,600
you put the first you you would like you
to source the library right and then

414
00:34:56,600 --> 00:35:02,420
these libraries source other script
files from some other place right

415
00:35:03,350 --> 00:35:07,370
and this is like very common for widgets
and other stuff right

416
00:35:07,880 --> 00:35:11,750
so for example a pattern like that the
initial script is allowed right with the

417
00:35:11,750 --> 00:35:16,400
nonce and what it does it does like a
great element script and sources some

418
00:35:16,400 --> 00:35:22,250
module for the library or widget from
somewhere else maybe it's just a minute

419
00:35:22,250 --> 00:35:26,150
scriptwriting sources the rest of the
library somewhere else and very often

420
00:35:26,150 --> 00:35:31,910
usually doesn't like a document
appendchild s so the thing is the new

421
00:35:31,910 --> 00:35:36,560
dynamically dynamically created script
does not have an ounce right so it will

422
00:35:36,560 --> 00:35:40,610
be blocked from executing so it will
break the whole budget so either you can

423
00:35:40,610 --> 00:35:46,400
respect to all the libraries and widgets
and try to have like big companies

424
00:35:46,400 --> 00:35:52,730
fixture stuff which is fairly unlikely
or we can do something else right

425
00:35:52,730 --> 00:35:59,840
which we will talk about in a second -
fixes but first let's talk about

426
00:35:59,840 --> 00:36:02,840
nonsense very briefly

427
00:36:03,410 --> 00:36:12,200
so it is quite similar to what we
already had you have a policy but

428
00:36:12,200 --> 00:36:16,460
instead of the whitelist you have nonce
some random string it is rear end it

429
00:36:16,460 --> 00:36:20,300
will be really random for every response
because if the attacker can guess the

430
00:36:20,300 --> 00:36:24,890
nonce he could check the script right
now and it would execute right but

431
00:36:24,890 --> 00:36:29,870
usually you can get this wrong without
messing up some people come and sit up

432
00:36:29,870 --> 00:36:30,609
and

433
00:36:30,609 --> 00:36:37,029
so this one would be fine right script
nonce something would execute because it

434
00:36:37,029 --> 00:36:40,539
has not kept commenting about this but
that doesn't matter anymore because

435
00:36:40,539 --> 00:36:41,680
there's an ounce

436
00:36:41,680 --> 00:36:49,989
what would not work is script source at
a calm with other nouns right

437
00:36:49,989 --> 00:36:53,440
if you would inject that it would be
blocked because there's no nonce same

438
00:36:53,440 --> 00:36:54,940
for inline scripts right

439
00:36:54,940 --> 00:37:00,309
if there's a if you inject the script
tag for the nonce wouldn't execute

440
00:37:00,819 --> 00:37:05,650
Mickey will show you a quick time about
that

441
00:37:05,650 --> 00:37:10,239
to make it easier to grasp yeah so
announces are look like a great solution

442
00:37:10,239 --> 00:37:14,650
so basically you just have to know
everything source or inline script and

443
00:37:14,650 --> 00:37:20,230
only non-scripted gets executed right so
scripted you putting your markup that

444
00:37:20,230 --> 00:37:23,200
the script you trust right

445
00:37:23,200 --> 00:37:28,930
but as Lucas set there is a problem
because most real life scripts actually

446
00:37:28,930 --> 00:37:34,210
dynamically load other scripts and the
dynamically loading script do not have

447
00:37:34,210 --> 00:37:35,019
an ounce

448
00:37:35,019 --> 00:37:39,910
so basically just the first one would be
loaded but what is dynamically loaded

449
00:37:39,910 --> 00:37:48,609
would not be would be blocked by CSP so
very very quick demo here i put ah

450
00:37:49,829 --> 00:38:00,359
policy with a self and an ounce of
random and then I put like the google

451
00:38:00,359 --> 00:38:05,940
maps which is with a couple seconds and
we see that it does not load and the

452
00:38:05,940 --> 00:38:11,579
constant complaints that it refused to
load a couple scripts which are see

453
00:38:11,579 --> 00:38:17,369
Commander jes well it is sooo probably
but come on the gpsmap GS you to do jes

454
00:38:17,369 --> 00:38:23,039
stats . yes these are all dynamically
loaded script that google maps is trying

455
00:38:23,039 --> 00:38:29,849
to load and it feels but the first one
like this and this got executed because

456
00:38:29,849 --> 00:38:36,269
they are the correct notes but what this
tried to load it has no no valid

457
00:38:36,269 --> 00:38:43,558
announced so it it is blocked by CSP and
we came up with a solution for that

458
00:38:43,559 --> 00:38:49,890
under the assumption that white lists
are insecure but you could have trust in

459
00:38:49,890 --> 00:38:54,598
your own scripts new scripts you put
willingly in your market and it is

460
00:38:54,599 --> 00:39:00,059
announced propagation method help there
was a question no question

461
00:39:06,090 --> 00:39:08,960
ok

462
00:39:08,960 --> 00:39:12,410
good question so basically the attacker
will not be able to see the announce

463
00:39:12,410 --> 00:39:18,560
because the announce will be in the
header in HTTP Heather and it would be

464
00:39:18,560 --> 00:39:22,160
in the in the in the dome of course but
it will not be able to guests announced

465
00:39:22,160 --> 00:39:25,430
without having to the script execution
in the first place because it will not

466
00:39:25,430 --> 00:39:26,960
be able to see it not the dome

467
00:39:26,960 --> 00:39:30,500
yes and there's already a dietary
elected the victim is receiving the

468
00:39:30,500 --> 00:39:34,130
header right so the attacker doesn't see
the head of each victim receives so he

469
00:39:34,130 --> 00:39:37,130
does not know which wants to put in the
first place right

470
00:39:39,140 --> 00:39:43,430
well if you can intercept why are the
buyer

471
00:39:43,430 --> 00:39:46,549
it's at outside outside yes i do you
have an active interception and you

472
00:39:46,550 --> 00:39:49,970
couldn't check anything about you reject
exactly and if you would just have

473
00:39:49,970 --> 00:39:53,450
passive and you would just see it and
would add it in the next response

474
00:39:53,450 --> 00:39:59,899
it would already not match any more than
you had a right so from that are at that

475
00:39:59,900 --> 00:40:05,119
attack scenario that you don't need to
access or CSP or anything if you can tap

476
00:40:05,119 --> 00:40:08,839
into the buyer and return whatever you
but maybe you have you had something

477
00:40:08,839 --> 00:40:09,440
else in mind

478
00:40:09,440 --> 00:40:12,800
I'm not sure we got the your your
concern completely

479
00:40:12,800 --> 00:40:18,320
we can also okay talk to Bill you need
JavaScript execution the first place to

480
00:40:18,320 --> 00:40:20,210
read the US right and you can't get it

481
00:40:20,210 --> 00:40:22,540
that's the idea

482
00:40:22,540 --> 00:40:29,500
on the server side yes on the server
side random for each page load exactly

483
00:40:29,500 --> 00:40:34,570
absolutely and can replay in fact I
think about it as an access ref token

484
00:40:34,570 --> 00:40:36,220
exactly the same right

485
00:40:36,220 --> 00:40:39,339
it's exactly the answer is exactly like
a nexus or after can just for script

486
00:40:39,340 --> 00:40:40,480
execution else

487
00:40:40,480 --> 00:40:45,220
basically yes you get the might just
make it should be back

488
00:40:45,220 --> 00:40:53,140
oh sure anyone else before we continue
and up sure

489
00:40:59,890 --> 00:41:05,140
yes yes but it will be the same right
that one in the header and you

490
00:41:05,140 --> 00:41:08,200
they have to match but i have to be
different at each page load the browser

491
00:41:08,200 --> 00:41:12,730
just compares head with all the script
tags right that matches brothers good to

492
00:41:12,730 --> 00:41:15,730
go

493
00:41:16,540 --> 00:41:23,050
yes yes just a dislike no server side
validation afterwards right it was all

494
00:41:23,050 --> 00:41:24,490
happening in the browser right

495
00:41:24,490 --> 00:41:30,459
yeah they actually an extra protection
with like a cookie and Palestinians

496
00:41:30,460 --> 00:41:34,360
client-side - yes we do this exactly
actually the same yes it's a browser

497
00:41:34,360 --> 00:41:34,900
enforced

498
00:41:34,900 --> 00:41:43,510
yes thank you ok ok so we propose a
solution which is called unsafe dynamic

499
00:41:43,510 --> 00:41:50,050
and it is our proposal in the draft of
the next generation of CSP sp3 according

500
00:41:50,050 --> 00:41:54,070
to an unsafe dynamic which might change
my change name

501
00:41:54,070 --> 00:41:58,750
we might see it in the specification
with another name allow dynamic maybe

502
00:41:58,750 --> 00:42:03,160
maybe allow because we we we are not
super comfortable with the unsafe part

503
00:42:03,160 --> 00:42:07,359
because it will actually make the the
policies much easier to deploy and also

504
00:42:07,360 --> 00:42:13,720
safer but you know there is a pattern to
to follow so it will

505
00:42:13,720 --> 00:42:17,109
the idea is to make a constitutive
policy simple to deploy for existing

506
00:42:17,110 --> 00:42:21,610
applications and yeah you have a high
degree of confidence on in the script

507
00:42:21,610 --> 00:42:25,690
you load directly but you have a lot of
confidence in being able to come up with

508
00:42:25,690 --> 00:42:28,690
a secure white list which it is which is
a very

509
00:42:29,560 --> 00:42:36,130
irrational assumption because we have
showed and we also show in a in a paper

510
00:42:36,130 --> 00:42:40,780
that we are going to submit that
basically if you use a white list

511
00:42:40,780 --> 00:42:45,340
it is very very very likely that your
speed is useless

512
00:42:47,260 --> 00:42:50,590
you're like nineteen ninety-four percent
likely

513
00:42:51,190 --> 00:42:57,790
and the idea is you have your script
which is not just like their the script

514
00:42:57,790 --> 00:43:01,509
loads are dynamic dynamically another
script with a pen try to create

515
00:43:01,510 --> 00:43:07,540
elemental appendchild let's look at
should before and this will be fine

516
00:43:07,540 --> 00:43:14,170
I mean that script would load because it
is loaded dynamically from a trusted

517
00:43:14,170 --> 00:43:14,920
script

518
00:43:14,920 --> 00:43:21,040
this is a simple isn't but if you use
another API which is not going to dom

519
00:43:21,040 --> 00:43:25,660
manipulation but for example documented
right or innerhtml assignments that

520
00:43:25,660 --> 00:43:33,910
would not work because these are AP is
that are more prone to excess and also

521
00:43:33,910 --> 00:43:37,480
conceptually in the browser hundred
who'd they are different they are

522
00:43:37,480 --> 00:43:42,100
opening the document at a document right
is opening the document the stream of

523
00:43:42,100 --> 00:43:47,890
the document and writing the market so
we say it is parser inserted this is

524
00:43:47,890 --> 00:43:52,060
something and dynamic would not allow
this is very important because allowing

525
00:43:52,060 --> 00:43:56,740
those two would actually make it a
little more unsafe will bring increased

526
00:43:56,740 --> 00:44:01,180
attack surface right would increase the
taxes right but we also conducted a

527
00:44:01,180 --> 00:44:07,720
study and we've seen that with em in
HTML is not a problem for dynamically

528
00:44:07,720 --> 00:44:11,919
inserted scripts because you can't
really add a script with inner HTML you

529
00:44:11,920 --> 00:44:17,290
can do in HTML script tag because this
will not work and what you can with

530
00:44:17,290 --> 00:44:18,130
event handlers

531
00:44:18,130 --> 00:44:21,940
but you can't directly document.write
this might be a problem for some

532
00:44:21,940 --> 00:44:24,940
properties but just for a very very few

533
00:44:27,120 --> 00:44:32,580
the same dynamic will as I said aloud
script created by known parser inserted

534
00:44:32,580 --> 00:44:38,190
dynamically generated scripts and we'll
do something else which allows backward

535
00:44:38,190 --> 00:44:39,090
compatibility

536
00:44:39,090 --> 00:44:42,930
so it will allow developers to just add
unsafe dynamic to their existing policy

537
00:44:42,930 --> 00:44:47,460
and make it secure magically which is it
discards the whitelist if present

538
00:44:48,210 --> 00:44:54,000
so if there is a whitelist and there is
a safe dynamic exactly as we probably

539
00:44:54,000 --> 00:44:57,390
didn't say that yet but if you have
announced and you put unsafe inline

540
00:44:57,390 --> 00:45:02,609
together and see in line get ignored
because you have announced this is just

541
00:45:02,610 --> 00:45:05,940
a fallback mechanism for the tall
grasses who don't support nonsense they

542
00:45:05,940 --> 00:45:08,040
would get terms of inland side would
still work

543
00:45:08,040 --> 00:45:11,700
new browsers would support on with just
ignored on supplements same your arms of

544
00:45:11,700 --> 00:45:16,799
dynamic great and we have an example
about that in a few slight so announced

545
00:45:16,800 --> 00:45:19,860
if you have announced and safety line is
discarded and if you have the same

546
00:45:19,860 --> 00:45:24,600
dynamic like just a white list

547
00:45:24,600 --> 00:45:30,240
thank you what this are discarded ok so
this is how it will look

548
00:45:31,620 --> 00:45:38,310
you would create a policy that is in
theory just has to have announced you

549
00:45:38,310 --> 00:45:42,840
need an ounce and you put a dynamic and
then you can keep whatever else you want

550
00:45:43,440 --> 00:45:49,500
so you can keep your existing policy and
it will be secure because most random

551
00:45:49,500 --> 00:45:53,880
will allow all scripts to execute if
they have the correctness and economic

552
00:45:53,880 --> 00:45:57,300
will propagate the trust to dynamically
generated scripts and we discard the

553
00:45:57,300 --> 00:46:00,870
white list of present and safety line
would be discarded because there is an

554
00:46:00,870 --> 00:46:03,870
ounce and everything else https self

555
00:46:04,590 --> 00:46:08,970
cbn.com would be discarded because it's
a white list and then there is the same

556
00:46:08,970 --> 00:46:11,790
dynamic have a very short demo here

557
00:46:11,790 --> 00:46:16,080
I should are already announced

558
00:46:17,050 --> 00:46:23,620
monospaced CSP so this is exactly this
one ounce script SRC knowns and save

559
00:46:23,620 --> 00:46:25,569
dynamic and safe in line

560
00:46:25,570 --> 00:46:33,760
HTTP is ok HTTP s allows just to be
clear every script on HTTPS but this is

561
00:46:33,760 --> 00:46:40,600
ignored because there is a safe dynamic
and second-line normally allow the

562
00:46:40,600 --> 00:46:45,040
inline scripts but it is ignored because
there is an ounce and again this is just

563
00:46:45,040 --> 00:46:49,390
for backward compatibility to all the
browsers you when you have like a user a

564
00:46:49,390 --> 00:46:54,910
good agent switch and only serve like
the policy to newest browsers

565
00:46:54,910 --> 00:46:59,140
you can just meet those you can just do
that right but if you have to fall backs

566
00:46:59,140 --> 00:47:02,140
all the browsers we don't just stand
there activity with just you know

567
00:47:02,140 --> 00:47:06,279
execute everything as if there would not
be any CSP and you would not break old

568
00:47:06,280 --> 00:47:07,690
stuff right

569
00:47:07,690 --> 00:47:10,930
so which is important especially if you
don't want to rely on user agents

570
00:47:10,930 --> 00:47:14,020
anything right despite the different
policies for different solutions yes he

571
00:47:14,020 --> 00:47:17,950
does not have versioning so you have to
rely on this like you know for back kind

572
00:47:17,950 --> 00:47:22,839
of things which is which makes this be a
lot harder to understand i think right

573
00:47:22,840 --> 00:47:27,340
because i'm not sure how many of you
knew that like nonstops and safe in line

574
00:47:27,340 --> 00:47:29,920
and economic will drop like this status

575
00:47:29,920 --> 00:47:33,880
yeah it is a little confusing so here
what just want to show that this that

576
00:47:33,880 --> 00:47:39,880
the example used before google maps with
the correct announced works

577
00:47:39,880 --> 00:47:43,420
we danced a dynamic so the problem
before you remember was that dynamically

578
00:47:43,420 --> 00:47:47,980
generated scripts were blocked by 6p now
there are no longer blocked and for

579
00:47:47,980 --> 00:47:55,060
example i can put jump in my so you I
did not last time I i tried this demo I

580
00:47:55,060 --> 00:47:57,279
went in that in a candle

581
00:47:57,280 --> 00:48:03,070
yes c and this works perfectly and this
is secure

582
00:48:03,070 --> 00:48:07,720
because if you try for example to load

583
00:48:09,700 --> 00:48:14,200
a dangerous a script or inject content
it will be is so competitive example

584
00:48:14,200 --> 00:48:18,640
before the attacker could not anymore in
checked script

585
00:48:18,640 --> 00:48:22,720
https Maps API / map / if you ask the
chest called back

586
00:48:22,720 --> 00:48:25,720
dangerous because you would not know the
nonce right there's a difference

587
00:48:26,350 --> 00:48:30,279
yeah exactly

588
00:48:32,730 --> 00:48:35,730
yes it is

589
00:48:44,480 --> 00:48:47,720
you guys

590
00:48:47,720 --> 00:48:52,339
yes yes sorry could you could you would
you mind using the microphone was it

591
00:48:53,600 --> 00:49:01,190
what if you want to use in HTML

592
00:49:01,190 --> 00:49:06,470
so usually it's a better idea right
because it's very error-prone but if you

593
00:49:06,470 --> 00:49:12,020
want to use it you could like set the
script in HTML like it may be better to

594
00:49:12,020 --> 00:49:15,920
the document right with the nonce
already right you could put if you're

595
00:49:15,920 --> 00:49:20,660
not an ounce you can also edit their
right but and then we'll see lexical

596
00:49:20,660 --> 00:49:24,410
because it has a nice but you have to
manually propagate the nonce right

597
00:49:24,410 --> 00:49:30,560
the browser does not do it for you this
is a design decision because you know

598
00:49:30,560 --> 00:49:32,299
document.write in HTML

599
00:49:32,300 --> 00:49:37,580
it is like a source of error right like
if you put any user control of the

600
00:49:37,580 --> 00:49:41,480
contour control over content to that
it's very likely that you end up with

601
00:49:41,480 --> 00:49:45,740
excess and this is exactly the point of
CSP you don't want to have that right

602
00:49:45,740 --> 00:49:55,339
and this is why don't I allows you know
staff created by an API so yeah in you

603
00:49:55,340 --> 00:50:00,560
can set script with University melt it
would not work so if you do this it will

604
00:50:00,560 --> 00:50:01,490
not work

605
00:50:01,490 --> 00:50:06,680
what you can do with interests email you
can execute scripts just be firing an

606
00:50:06,680 --> 00:50:12,259
event so you would have to use something
like this and then do an error alert one

607
00:50:12,260 --> 00:50:16,970
yeah so in this case right it's not
reducing or if it's not reducing their

608
00:50:16,970 --> 00:50:18,319
usefulness

609
00:50:18,320 --> 00:50:22,490
patent in general right if you don't
write hackers so you will not be able to

610
00:50:22,490 --> 00:50:23,629
do that in for in the first place

611
00:50:23,630 --> 00:50:26,900
you you should not use and you cannot
use energy more for interacting script

612
00:50:26,900 --> 00:50:28,190
directly

613
00:50:28,190 --> 00:50:32,930
you could use document right because it
is yeah exactly it will not fire the it

614
00:50:32,930 --> 00:50:35,089
would not be considered a script element

615
00:50:35,090 --> 00:50:39,500
yeah and if for some reason you really
have to use document right and some I

616
00:50:39,500 --> 00:50:41,540
don't have markup blog for script

617
00:50:41,540 --> 00:50:45,710
you could add the nonce you're right
because if you if you wrecked the author

618
00:50:45,710 --> 00:50:47,960
of the file you probably can propagate
to announce yourself

619
00:50:47,960 --> 00:50:51,410
the shell tanker doesn't know about it
yes but what if

620
00:50:51,410 --> 00:50:54,040
this kind of code is in

621
00:50:54,040 --> 00:50:58,450
in the library you use yes then you have
a problem give the library uses

622
00:50:58,450 --> 00:51:01,359
documented right to write a script drops

623
00:51:01,360 --> 00:51:07,450
Daniel break and then yeah hopefully
someone would have you then because I

624
00:51:07,450 --> 00:51:11,589
would have to be fixed and it has to be
say the document is right is a

625
00:51:11,590 --> 00:51:17,110
synchronous so it is a dedicated to
using a lot of situations so unless you

626
00:51:17,110 --> 00:51:20,500
really want to synchronous behavior so
for example for module loading it might

627
00:51:20,500 --> 00:51:25,000
make sense because they want to you want
to load them in order if al for a let's

628
00:51:25,000 --> 00:51:28,120
say I think module loading using
documents right is it is really

629
00:51:28,120 --> 00:51:32,440
discouraged because it would block the
execution it would create a global lock

630
00:51:32,440 --> 00:51:36,580
and it would be slow down your
application a lot so i would say that

631
00:51:36,580 --> 00:51:39,850
libraries are not advised to use to
drive more than likely person to do that

632
00:51:39,850 --> 00:51:40,930
in the first place

633
00:51:40,930 --> 00:51:52,359
ok ok cool ok cool thanks for all the
questions and yes this is yes this is

634
00:51:52,360 --> 00:51:54,160
the fallback mechanism i was talking
about

635
00:51:54,160 --> 00:52:00,640
so we just usb3 compatible browser so
for example chromium and we'll have some

636
00:52:00,640 --> 00:52:04,000
some of these cities a draft some of
these are behind the experimental flags

637
00:52:04,000 --> 00:52:10,690
but and both and secant line in HTTPS
are dropped because as we said https is

638
00:52:10,690 --> 00:52:14,680
a whitelist with dropped by and dynamic
and I say and second line is dropped

639
00:52:14,680 --> 00:52:19,000
because there is an ounce with our
current let the browser like firefox or

640
00:52:19,000 --> 00:52:22,930
chrome stable which is just be two
compatible and supports announces

641
00:52:22,930 --> 00:52:29,379
because no sense ESP to basically and
economic will would not be recognized

642
00:52:29,380 --> 00:52:32,620
it was the engine or because they're
talking if the keyword it doesn't know

643
00:52:32,620 --> 00:52:36,370
and a safe in line would still be
dropped because there is an ounce

644
00:52:36,370 --> 00:52:40,180
if you have a CSP one compatible driver
browser such as for example

645
00:52:41,650 --> 00:52:47,710
well right now let the old version of
safari on all the webkit browser it will

646
00:52:47,710 --> 00:52:50,650
not know what announced it is and it
will not know what a save the number

647
00:52:50,650 --> 00:52:52,420
case so it will be a knob

648
00:52:52,420 --> 00:52:55,900
basically it will allow a sit-in line so
it means

649
00:52:57,619 --> 00:53:02,509
inline scripts and from everywhere it is
so this means is like not having a CSP

650
00:53:02,509 --> 00:53:06,019
policy but it will not break it will not
break your application which is exactly

651
00:53:06,019 --> 00:53:13,848
what developers want when they and what
that it's a specification designers have

652
00:53:13,849 --> 00:53:17,509
in mind when they think about backward
compatibility right not to break

653
00:53:17,509 --> 00:53:24,920
existing applications browser support is
a little fragmented so the that browser

654
00:53:24,920 --> 00:53:31,970
that implements most of CSP three is
chromium then we have firefox and WebKit

655
00:53:31,970 --> 00:53:34,669
browsers for the sort of sorry fibers

656
00:53:34,670 --> 00:53:38,420
opera opera uses blank which is same a
chromium engine

657
00:53:38,420 --> 00:53:43,849
it lacks a little bit but not too much
safari Safari uses webkit as if I very

658
00:53:43,849 --> 00:53:48,049
recently got non-support it is as recent
as much of this year

659
00:53:49,640 --> 00:53:54,170
safari or firefox add does not support
USB to fully unfortunately it does not

660
00:53:54,170 --> 00:53:58,160
support child literacy which governs
frames and it also has a minor either

661
00:53:58,160 --> 00:54:04,609
have a couple minor other bitches
responsible for plugins and also serving

662
00:54:04,609 --> 00:54:11,509
the policy namita tak the Enders edge
which is just be one compatible

663
00:54:12,019 --> 00:54:16,669
it actually supports some CSP - but it
does not support announces unfortunately

664
00:54:16,670 --> 00:54:18,799
a broken it so they're working on it

665
00:54:18,799 --> 00:54:23,239
they are working on it so it will
probably be as safari in a way

666
00:54:23,239 --> 00:54:26,660
ok and Henry's internet explorer which
does not support herself

667
00:54:26,660 --> 00:54:36,078
csusb at all ok I'm I know how much time
we have left but my free for the ground

668
00:54:36,079 --> 00:54:41,599
but in just a couple of lights to talk
about our success stories so we piloted

669
00:54:41,599 --> 00:54:49,609
and dynamic on some complex web
applications at Google and we can say

670
00:54:49,609 --> 00:54:54,980
that we had a very very good experience
as developers and implementers we deal

671
00:54:54,980 --> 00:54:58,039
with teams directly and the teams were
really happy

672
00:54:58,039 --> 00:55:02,299
so some of them already had CSP and
we're already dealing with the burden of

673
00:55:02,299 --> 00:55:06,009
having to maintain a long white list and
update them

674
00:55:06,010 --> 00:55:11,920
so for example a part of Google Maps had
to periodically update the white list

675
00:55:11,920 --> 00:55:17,890
for loading the ties of maps so they
changed the name like that cause me and

676
00:55:17,890 --> 00:55:21,430
so they had to avoid breakages in
production they had to know that they

677
00:55:21,430 --> 00:55:23,919
had what to modify exactly

678
00:55:23,920 --> 00:55:28,750
wait for the push in production and so
on so they were super happy to actually

679
00:55:28,750 --> 00:55:33,520
switch to ask people is it will be as
secure or more secure and does not need

680
00:55:33,520 --> 00:55:41,770
to maintain wireless anymore and so we
deployed it on like 45 services they

681
00:55:41,770 --> 00:55:47,140
have more than 7 million monthly active
users and we can say that it works out

682
00:55:47,140 --> 00:55:51,160
of the box for at least Google Maps API
is google charts API facebook twitter

683
00:55:51,160 --> 00:55:58,540
and widgets to capture and really the
majority of the modern where you can

684
00:55:58,540 --> 00:56:04,210
test it yourself if you have chrome 52
so beta or Chrome Beta ordinary ordinary

685
00:56:04,210 --> 00:56:08,920
or if you have earlier one but not too
too old

686
00:56:09,550 --> 00:56:14,740
you could also enable a flag which is a
web platform experimental features and

687
00:56:14,740 --> 00:56:17,560
you can go to that site's ESP
experiments we have a test but they're

688
00:56:17,560 --> 00:56:21,880
so you can test that actually is a
dynamic works out of the box with a lot

689
00:56:21,880 --> 00:56:25,270
of widgets and we'll make deploying
since be much easier

690
00:56:25,780 --> 00:56:35,260
I think this is a lot for us and this is
our Twitter this is our email and this

691
00:56:35,260 --> 00:56:39,130
is hashtag because we are not cool if we
don't have a hashtag and questions

692
00:56:49,370 --> 00:56:55,400
haha question about maintaining the wine
list

693
00:56:55,400 --> 00:56:59,390
you said that google maps don't have to
maintain a wireless and more but for the

694
00:56:59,390 --> 00:57:00,680
older browsers

695
00:57:00,680 --> 00:57:05,810
I guess they do yes so for the older
browsers we decided to just use https so

696
00:57:05,810 --> 00:57:10,340
allow everything so yeah the wireless
didn't provide that much security in the

697
00:57:10,340 --> 00:57:11,330
first place right

698
00:57:11,330 --> 00:57:15,470
so why should you invest in the burden
of having to maintain it any longer if

699
00:57:15,470 --> 00:57:20,000
it's by possible anyway right so we just
did videos deleted is completely

700
00:57:20,000 --> 00:57:23,750
justjust https as a fallback right so it
would allow everything for prostitution

701
00:57:23,750 --> 00:57:28,820
support us be free because even even if
they were trying and we were trying

702
00:57:28,820 --> 00:57:34,970
really hard and unfortunately at least
one of them one of the the path we had

703
00:57:34,970 --> 00:57:38,419
to put their heads on the end .
unfortunately

704
00:57:38,420 --> 00:57:43,160
and we can't really do without it ok and
that is not just google like a lot of

705
00:57:43,160 --> 00:57:44,810
applications have the same problem

706
00:57:44,810 --> 00:57:49,130
so we can name the river but just like
with one exception where whitelists

707
00:57:49,130 --> 00:57:54,020
might work is if you have maybe have
like a sink domain right where you only

708
00:57:54,020 --> 00:57:57,830
put like free javascript file which
files which are fully control

709
00:57:57,830 --> 00:58:02,360
you don't get Jason P you don't get
angry or anything then it could work

710
00:58:02,360 --> 00:58:02,810
right

711
00:58:02,810 --> 00:58:08,000
but this is very hard if you have a big
complex application and probably not

712
00:58:08,000 --> 00:58:12,320
physical foremost you don't have to you
see the ants - yeah so I can you can you

713
00:58:12,320 --> 00:58:13,760
can appraise them publicly

714
00:58:13,760 --> 00:58:18,350
the thing I guess right yes I think it's
afraid git hub did a really really good

715
00:58:18,350 --> 00:58:23,660
job in actually creating a secure wait
list and it is kind of the only yes so

716
00:58:23,660 --> 00:58:27,950
do I you divide this one domain and they
just have like you know a couple of hand

717
00:58:27,950 --> 00:58:34,700
selected scripter yes rely on foot but
yeah i did for unfortunately doesn't

718
00:58:34,700 --> 00:58:42,470
work for menu other use cases right and
yeah so I guess we're going with a non

719
00:58:42,470 --> 00:58:43,279
basic approach

720
00:58:43,280 --> 00:58:45,349
okay thank you

721
00:58:45,349 --> 00:58:48,349
yeah

722
00:58:49,880 --> 00:58:54,860
I could only white les domaines would be
possible to whitelist files from yes

723
00:58:54,860 --> 00:58:58,550
domain so it could you not just wireless
the dot J's files and how are you - but

724
00:58:58,550 --> 00:59:02,090
if you if you have to worry if you use a
file that has a call back or tracing

725
00:59:02,090 --> 00:59:03,170
p.m. . right

726
00:59:03,170 --> 00:59:09,950
allegedly it would still be by possible
or if you have any other point in the

727
00:59:09,950 --> 00:59:13,100
right place which allows an open
redirect you can downgrade from this

728
00:59:13,100 --> 00:59:18,950
like file paths are granularity down to
the main terminal arity right you can

729
00:59:18,950 --> 00:59:25,609
bypass it again and it's incredibly hard
to whitelist every single javascript

730
00:59:25,610 --> 00:59:28,490
file path you have been a big
application right because the change

731
00:59:28,490 --> 00:59:34,129
diversion maybe they might start loading
other files from and same subdirectory

732
00:59:34,130 --> 00:59:37,160
battling an updated you will have
breakages exactly I want to demonstrate

733
00:59:37,160 --> 00:59:39,049
that did this

734
00:59:39,050 --> 00:59:43,820
exactly what you said so you see the
file load is jas API GS

735
00:59:43,820 --> 00:59:52,220
but and you see like this is not working
and it is trying to load and sorry i

736
00:59:52,220 --> 00:59:57,620
have to have to also allow and as if in
line sorry

737
01:00:01,819 --> 01:00:06,650
sorry so let's say you want to go down
to the that doesn't the single file

738
01:00:06,650 --> 01:00:07,910
right as you did

739
01:00:07,910 --> 01:00:12,799
now and you try to load and you see it's
not working

740
01:00:12,799 --> 01:00:17,059
it's also loading I don't know if you
can see that but , industry is so okay i

741
01:00:17,059 --> 01:00:23,420
want to load this one too so i added
like this right , GS then try again

742
01:00:23,930 --> 01:00:29,328
oh there are more there is you to the GS
there there is that the GS

743
01:00:29,329 --> 01:00:33,499
so II it goes wrong just going to reach
the maximum head size and HTTP right

744
01:00:33,499 --> 01:00:38,839
it's just like is this way to really
getting big and hard to maintain right

745
01:00:38,839 --> 01:00:42,499
yes so for example you you decide for
example here

746
01:00:42,499 --> 01:00:45,919
maybe they're all in the 11 a bath

747
01:00:45,920 --> 01:00:49,009
yeah I gotta have it or not there are
more

748
01:00:49,009 --> 01:00:52,009
so you can do that yeah

749
01:00:57,710 --> 01:01:03,740
portion of the JavaScript the documents
right and nothing unless it's coming

750
01:01:03,740 --> 01:01:07,520
simply for groups are you there any
ideas

751
01:01:07,520 --> 01:01:10,730
so we see father

752
01:01:11,330 --> 01:01:15,470
yeah we fought about having like a more
granular you know possibility to

753
01:01:15,470 --> 01:01:21,169
whitelist certainly the eyes when it
gets ridiculously difficult right for

754
01:01:21,170 --> 01:01:27,619
developers for maintaining it and
everything work with the world making

755
01:01:27,619 --> 01:01:33,349
figure right well if no one uses it
right if no one uses it then you already

756
01:01:33,349 --> 01:01:37,520
have lost right if it's like she has
been a currency is so hard to adopt that

757
01:01:37,520 --> 01:01:41,270
this is a reason why people not many not
many people using it right

758
01:01:42,080 --> 01:01:47,000
also like creating a safe ap is a subset
of what javascript allows to it is a

759
01:01:47,000 --> 01:01:52,550
great idea is what hardening does but it
is very hard to maintain that also

760
01:01:52,550 --> 01:01:55,849
blacklist is impossible right because
for example there are at least six ways

761
01:01:55,849 --> 01:01:56,869
of doing evil

762
01:01:56,869 --> 01:02:00,530
there is a new function there is evil
xmas trip six introduce new ways and so

763
01:02:00,530 --> 01:02:01,070
on right

764
01:02:01,070 --> 01:02:04,580
so you can't likely straight document
right there are many other way of doing

765
01:02:04,580 --> 01:02:07,580
document right ray

766
01:02:11,170 --> 01:02:15,609
generally and then only like four

767
01:02:15,609 --> 01:02:19,779
yes but it just means that everything to
be refactored in the web right so jQuery

768
01:02:19,780 --> 01:02:22,450
would not work right

769
01:02:22,450 --> 01:02:28,118
that for me

770
01:02:28,119 --> 01:02:32,859
that's looking done so quick just
because somebody didn't build in

771
01:02:32,859 --> 01:02:37,360
JavaScript investigating security on the
user from

772
01:02:37,360 --> 01:02:40,360
developer just leave

773
01:02:42,730 --> 01:02:47,950
yes you you have a pointer your pointer
interesting that let the web is moving

774
01:02:47,950 --> 01:02:53,080
forward really really fast and we would
love to have like a secure 7 that is

775
01:02:53,080 --> 01:03:00,250
used everywhere and I mean to create
element is mostly secure if you write an

776
01:03:00,250 --> 01:03:07,540
attacker cannot control the URL itself
right which is possible in a very niche

777
01:03:07,540 --> 01:03:12,220
cases but you would still like to remove
for the biggest portion of the attack

778
01:03:12,220 --> 01:03:14,169
surface right

779
01:03:14,170 --> 01:03:20,770
and the other thing is it's also not
easy to convey browser our vendors like

780
01:03:20,770 --> 01:03:26,080
to implement all these features of CSP
is right of CSP and onto the name is

781
01:03:26,080 --> 01:03:31,480
actually surprisingly easy to implement
and we hope that this will help us to

782
01:03:31,480 --> 01:03:33,610
drive adopted activity

783
01:03:33,610 --> 01:03:38,410
it doesn't really help you a lot if only
one browser supports it and maybe

784
01:03:38,410 --> 01:03:40,270
building on top we can iterate right

785
01:03:40,270 --> 01:03:46,180
building on top of that we can iterate
but from my perspective fucking this

786
01:03:46,180 --> 01:03:55,240
would really give her a CSP a second
chance and yeah i know you all to tackle

787
01:03:55,240 --> 01:03:58,629
me go and look at during lunch for any
further questions you may have to give

788
01:03:58,630 --> 01:04:01,180
them applause thank you guys thank you

