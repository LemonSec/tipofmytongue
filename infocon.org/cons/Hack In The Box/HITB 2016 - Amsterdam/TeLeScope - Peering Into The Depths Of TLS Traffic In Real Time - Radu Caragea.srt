1
00:00:14,540 --> 00:00:17,540
hello

2
00:00:18,550 --> 00:00:22,060
thanks for coming to this presentation
we're going to talk about some

3
00:00:22,060 --> 00:00:26,979
interesting stuff regarding pls and
where we also have not one but two

4
00:00:26,980 --> 00:00:29,980
called the most at the end so brace
yourselves

5
00:00:33,040 --> 00:00:37,150
first of all me to introduce myself I
work a bit defender

6
00:00:37,720 --> 00:00:44,680
I do sort of crazy low level stuff and
the rest were related to cryptography

7
00:00:44,680 --> 00:00:51,370
research occasionally and i also like to
place ETFs time with my boys playing the

8
00:00:51,370 --> 00:00:56,890
city of right now if you have a chance
to try some cts yourself it's really

9
00:00:56,890 --> 00:00:57,789
education

10
00:00:57,789 --> 00:01:04,839
alright so first of all I would like to
tell you what this presentation is about

11
00:01:04,839 --> 00:01:07,839
and what it isn't about so you know from
the spot

12
00:01:08,590 --> 00:01:16,720
it isn't about false in TLS per se or in
the underlying implementation in various

13
00:01:16,720 --> 00:01:17,920
crypto stacks

14
00:01:17,920 --> 00:01:23,349
neither is it about the attacks on the
cryptographic level of be sleeping

15
00:01:23,349 --> 00:01:26,709
attacks black and bars padding Oracle
something like that

16
00:01:26,709 --> 00:01:30,280
no well then you may ask what is it
about

17
00:01:30,849 --> 00:01:39,130
think of it as an experiment we decided
to model a very powerful adversary we

18
00:01:39,130 --> 00:01:47,259
call this a hypervisor in the middle
attack and or so imagine it in the

19
00:01:47,259 --> 00:01:49,450
context of cloud providers right

20
00:01:49,450 --> 00:01:56,920
so in the cloud the provider can see a
stuff from the VMS they can see HTTP

21
00:01:56,920 --> 00:01:59,920
traffic but can they also see HTTPS
traffic

22
00:02:00,700 --> 00:02:06,789
well not really because it's encrypted
right and we wanted to see how far they

23
00:02:06,789 --> 00:02:08,649
would have to go how intrusive

24
00:02:08,649 --> 00:02:15,610
do they have to be to decrypt your HTTPS
traffic as well and this so doing we got

25
00:02:15,610 --> 00:02:19,090
some really unexpected results that
you're going to like

26
00:02:19,090 --> 00:02:22,450
but why did we start this

27
00:02:22,450 --> 00:02:25,450
how did this idea came come about

28
00:02:26,590 --> 00:02:29,860
we're operating the honey pot farm

29
00:02:29,860 --> 00:02:36,670
you know what tiny parts are right there
just vm spread all around the globe and

30
00:02:36,670 --> 00:02:44,200
the attackers can gain access using the
week credentials and what we want to do

31
00:02:44,200 --> 00:02:48,790
is study while the hacker looks like how
he thinks and what exactly are the

32
00:02:48,790 --> 00:02:51,190
latest trends in hacker mischief

33
00:02:51,190 --> 00:03:00,970
so we set these rural route credentials
very weak but then how are we going to

34
00:03:00,970 --> 00:03:06,760
see what happens behind the scenes on
that vm because a lot of attackers just

35
00:03:06,760 --> 00:03:16,959
try and see if anything is a modified in
the vm so we wanted to see what traffic

36
00:03:16,959 --> 00:03:17,650
they do

37
00:03:17,650 --> 00:03:24,220
HTTP is ok HTTP you can see from the
hypervisor but https is used the

38
00:03:24,220 --> 00:03:27,730
nowadays why because all hackers have
access to

39
00:03:28,270 --> 00:03:34,450
let's encrypt right the second use case
is not advertising

40
00:03:34,450 --> 00:03:41,290
so it's a bit opposite you want two
scripts and browsers and make them

41
00:03:41,290 --> 00:03:47,349
scoured the internet for all the shady
corners in the hopes that you get

42
00:03:47,349 --> 00:03:48,130
affected

43
00:03:48,130 --> 00:03:53,500
this is exactly the opposite of what the
normal user would do but that's not our

44
00:03:53,500 --> 00:03:55,599
target our target is to obtain samples

45
00:03:55,599 --> 00:04:02,230
however most of the times these
infections samples coming stages and

46
00:04:02,230 --> 00:04:05,890
when the first stage is downloaded it

47
00:04:06,610 --> 00:04:14,050
it's usually fed for some pls enable
site either the advertising sites or the

48
00:04:14,050 --> 00:04:22,479
attackers service and this first stage
will set everything up but before it

49
00:04:22,479 --> 00:04:24,729
actually download the next stages

50
00:04:24,729 --> 00:04:26,889
it's chicks that

51
00:04:26,889 --> 00:04:30,729
if there's something wrong with the
machine if it's under scrutiny

52
00:04:32,379 --> 00:04:39,129
alright so let's see what are the
current solutions for getting tell us

53
00:04:39,129 --> 00:04:46,389
traffic and then we'll see why they
aren't enough so the first solution is

54
00:04:46,389 --> 00:04:48,099
called this is a kilo file

55
00:04:48,099 --> 00:04:53,860
it's just like a regular keylogger but
instead of logging keyboard keys it logs

56
00:04:53,860 --> 00:04:58,599
as the Silky's and actually it's
implemented in firefox and in Google

57
00:04:58,599 --> 00:04:59,469
Chrome

58
00:04:59,469 --> 00:05:03,969
by default you can just point the
environment variable to a text file and

59
00:05:03,969 --> 00:05:10,509
that it dumps out like this X mumbo
jumbo

60
00:05:10,509 --> 00:05:14,259
it doesn't make sense to you but if you
feed it into white shark

61
00:05:14,259 --> 00:05:21,460
it transforms traffic that is captured
like this into this which is human

62
00:05:21,460 --> 00:05:24,250
readable almost hackery the policy

63
00:05:24,250 --> 00:05:28,029
HTTP response 200 ok

64
00:05:28,029 --> 00:05:31,270
all right so why don't we use this

65
00:05:31,270 --> 00:05:39,128
well as I said it's only implemented in
firefox and chrome and for example in

66
00:05:39,129 --> 00:05:40,150
advertising

67
00:05:40,150 --> 00:05:43,960
we are also interested in exploit kits
in silverlight the flesh

68
00:05:43,960 --> 00:05:49,568
whatever we want to see internet
explorer exploited as well so we don't

69
00:05:49,569 --> 00:05:53,800
have this option in the internet
explorer and moreover it's really

70
00:05:53,800 --> 00:05:59,379
visible I mean it's an environment
variable are another solution

71
00:05:59,949 --> 00:06:06,849
speed quiz do you think this connection
is secure

72
00:06:06,849 --> 00:06:12,250
looks like it right it has the green
padlock secure connection

73
00:06:12,250 --> 00:06:15,639
well now do you think it's secure

74
00:06:16,149 --> 00:06:19,149
verified by superfish

75
00:06:20,800 --> 00:06:27,460
this is a root CA it's a typical
solution used by legitimate businesses

76
00:06:27,460 --> 00:06:33,520
by security proxies that such as the
excellent both sweet and by shady

77
00:06:33,520 --> 00:06:37,419
however there's such as you know who
issued superfish

78
00:06:38,710 --> 00:06:43,750
and because you have to add this to the
system somehow it's visible by mouth now

79
00:06:43,750 --> 00:06:51,130
were right but it's visible bite when it
escaped the browser however a recent

80
00:06:51,130 --> 00:06:53,620
paper a few years ago

81
00:06:53,620 --> 00:06:57,160
show that you actually don't need to
escape the browser it's a really cool

82
00:06:57,160 --> 00:06:58,780
research

83
00:06:58,780 --> 00:07:06,340
alright so now let's say that we don't
want to modify the VMR let's do

84
00:07:06,340 --> 00:07:09,340
something more rocket science what are
the current solutions for this

85
00:07:10,450 --> 00:07:15,310
there's a framework called panda which
is excellent

86
00:07:15,940 --> 00:07:21,490
I suggest you look into it and what they
do is instead of running the machine

87
00:07:21,490 --> 00:07:28,180
virtualized they emulated other costs
and then the instrument each and every

88
00:07:28,180 --> 00:07:34,780
instruction they said some trace points
some tap points whenever the keys are

89
00:07:34,780 --> 00:07:42,159
calculated and you having these trees
points means that when you figure out

90
00:07:42,160 --> 00:07:44,980
that you're at that point of execution

91
00:07:44,980 --> 00:07:50,500
you can just stop the the machine for a
while and get the memory of the keys

92
00:07:50,500 --> 00:07:55,840
from the memory then in there but as the
author says himself

93
00:07:56,590 --> 00:08:01,390
it transforms plus seconds into into two
hours

94
00:08:01,390 --> 00:08:07,539
it's a huge overhead and moreover we
assume that the hacker can do the hacker

95
00:08:07,540 --> 00:08:14,680
or the honeypot compromiser can do
whatever in that vm so maybe they are

96
00:08:14,680 --> 00:08:17,440
great the crypto libraries maybe they do
something else

97
00:08:17,440 --> 00:08:23,620
this means that you have to reanalyze
the vm and you have to modify the trace

98
00:08:23,620 --> 00:08:24,250
points

99
00:08:24,250 --> 00:08:29,290
so it's a non-portable you cannot get
the keys from the memory anymore

100
00:08:29,290 --> 00:08:36,280
what about that memory this is a key
idea i think about it for a bit if you

101
00:08:36,280 --> 00:08:37,809
have a TLS connection

102
00:08:37,809 --> 00:08:42,880
it's selective so this means that the
keys was still being memory

103
00:08:42,880 --> 00:08:47,560
why is this well if the connection is
selectively then you're supposed to be

104
00:08:47,560 --> 00:08:49,529
able to both receive

105
00:08:49,529 --> 00:08:55,769
packets and send it but if you're going
to receive packets you have to decrypt

106
00:08:55,769 --> 00:08:59,879
them right and the if you send packets
you have to be able to encapsulate them

107
00:08:59,879 --> 00:09:03,660
for an encryption layer so this means
that if the connection is selected the

108
00:09:03,660 --> 00:09:05,279
keys are in memory

109
00:09:05,279 --> 00:09:10,829
so what we're in the hypervisor that's
our adversary model hypervisor in the

110
00:09:10,829 --> 00:09:11,519
middle

111
00:09:11,519 --> 00:09:15,959
why can't we just access the memory and
get the keys from there

112
00:09:15,959 --> 00:09:22,649
what it's not so simple maybe it's linux
maybe it's windows maybe it's a schannel

113
00:09:22,649 --> 00:09:29,189
maybe it's open SSL boring ssl a little
bit in SS multiply these together and

114
00:09:29,189 --> 00:09:32,219
ultimately you just have to dump the
whole memory

115
00:09:32,730 --> 00:09:36,240
so it's a real problem

116
00:09:36,749 --> 00:09:40,410
you don't know the location you just
dumped on memory but when you do this

117
00:09:40,920 --> 00:09:46,319
say you have a vm with four gigabytes of
memory it will take a lot of time it

118
00:09:46,319 --> 00:09:51,689
will really be noticeable in the context
of our providers

119
00:09:51,689 --> 00:09:56,040
you don't want to violate the SLA

120
00:09:56,040 --> 00:09:59,579
so it's a it's a problem

121
00:09:59,579 --> 00:10:08,160
moreover as you will see in a browsing
session the browser doesn't just do one

122
00:10:08,160 --> 00:10:12,809
connection when you connect to
google.com it doesn't just get one page

123
00:10:12,809 --> 00:10:17,819
it also gets the advertisements the
static content the dynamic content

124
00:10:17,819 --> 00:10:20,699
referrals whatever

125
00:10:20,699 --> 00:10:25,079
so if you do this that each and every
connection this disk space on the

126
00:10:25,079 --> 00:10:26,969
hypervisor will quickly fill up

127
00:10:26,970 --> 00:10:31,620
but for the moment where engineers right
let's simplify the problem for a bit

128
00:10:31,620 --> 00:10:37,350
we're gonna the Crypt just one
connection for this we're going to

129
00:10:37,350 --> 00:10:45,179
except for the moment the penalty of
dumping the memory to disk and doing

130
00:10:45,179 --> 00:10:48,629
decrypting just one connection so we
have the memory dump

131
00:10:48,629 --> 00:10:53,459
what are we going to do it we can apply
volatility on it and it will take a lot

132
00:10:53,459 --> 00:10:55,888
of time we want to do it in a

133
00:10:55,889 --> 00:11:00,989
a real time right how are we going to
distinguish correct keys from that

134
00:11:00,989 --> 00:11:04,019
memory dump from garbage

135
00:11:04,019 --> 00:11:11,220
well these are problems we solve them
each and every one of them quite

136
00:11:11,220 --> 00:11:15,989
elegantly actually but to actually see
what we did we will have to dig a bit

137
00:11:15,989 --> 00:11:18,239
deeper into the tls attention

138
00:11:18,239 --> 00:11:24,419
alright so i'm going to present a know
very simplified version of the TLS

139
00:11:24,419 --> 00:11:25,290
handshake

140
00:11:25,290 --> 00:11:28,949
well for all intents and purposes you
can consider it as factually correct

141
00:11:29,699 --> 00:11:32,758
so how does the TLS handshake work

142
00:11:32,759 --> 00:11:37,169
the server is listening to request right
and the client does just that he issues

143
00:11:37,169 --> 00:11:37,889
a request

144
00:11:37,889 --> 00:11:42,839
but before doing this he has to
negotiate a secure channel with the

145
00:11:42,839 --> 00:11:44,339
server

146
00:11:44,339 --> 00:11:49,679
all right enter the TLS handshake that
he will send a client hello as it's

147
00:11:49,679 --> 00:11:56,040
called but which contains the version of
the of TLS the decline support or a list

148
00:11:56,040 --> 00:12:02,279
of tuples called the cipher suite list
which contains a signature crypto for

149
00:12:02,279 --> 00:12:06,179
the establishment symmetric crypto that
will be used throughout the lifetime of

150
00:12:06,179 --> 00:12:10,649
the connection and authentication code
and there is also an interesting very

151
00:12:10,649 --> 00:12:14,009
called the client random or we'll go
over this

152
00:12:14,009 --> 00:12:20,639
the in a bit to this the server responds
with a certificate so that the clients

153
00:12:20,639 --> 00:12:26,639
knows he's talking to who he thinks he's
talking to a cipher chosen among the

154
00:12:26,639 --> 00:12:29,970
list that the client supports and the
corresponding server random value

155
00:12:31,439 --> 00:12:35,248
all right what happens now

156
00:12:35,759 --> 00:12:42,959
that's the dotted line well under the
hood there's some math i'm not going to

157
00:12:42,959 --> 00:12:48,238
go into it because actually we don't
need much of it but what each party does

158
00:12:48,239 --> 00:12:55,319
is they compute using the information
they have a our context a symmetric

159
00:12:55,319 --> 00:12:56,819
encryption context

160
00:12:56,819 --> 00:13:01,889
these are keys that are computed
independently by both parties there will

161
00:13:01,889 --> 00:13:07,390
still be the same keys have to match so

162
00:13:07,390 --> 00:13:14,590
when they do do this after they finish
the client will send the last packet of

163
00:13:14,590 --> 00:13:20,800
the handshake which is encrypted the
server the same

164
00:13:21,610 --> 00:13:27,760
he will send the first encrypted packet
only after this has happened that the

165
00:13:27,760 --> 00:13:34,210
actual application data has been sent
there can be sent so only at this point

166
00:13:34,210 --> 00:13:39,340
can the client send the the first bite
of the request

167
00:13:40,930 --> 00:13:46,930
so what does this mean well we need some
more info on the server and the client

168
00:13:46,930 --> 00:13:53,229
random the standard said says that you
need both know you need both values to

169
00:13:53,230 --> 00:13:58,450
be able to compute the keys right so we
said that both parties will compute the

170
00:13:58,450 --> 00:14:04,240
keys on the room but they need
information from the other party because

171
00:14:04,240 --> 00:14:08,140
of this it means that at some point in
time

172
00:14:08,140 --> 00:14:12,220
you cannot have possibly computed the
keys right because you haven't received

173
00:14:12,220 --> 00:14:19,450
the information from the other side and
let's see this from the class perfect

174
00:14:19,450 --> 00:14:25,930
perspective immediately before the
server hello has been received the keys

175
00:14:25,930 --> 00:14:29,469
can also have been generated because the
client only has the client random

176
00:14:29,470 --> 00:14:36,280
he doesn't have the server and nor does
he have the cipher suite and when the

177
00:14:36,280 --> 00:14:40,420
first clients the clients finish has
been sent the first encrypted packet

178
00:14:40,420 --> 00:14:43,839
it means that the keys must be was still
being memory why

179
00:14:43,840 --> 00:14:48,160
as we said before the application data
has yet to be sent so the connection is

180
00:14:48,160 --> 00:14:49,030
active

181
00:14:49,030 --> 00:14:55,780
all right this means that we don't need
to dump all the memory if we are able to

182
00:14:55,780 --> 00:14:58,930
track memory between these two events
and it's a big if

183
00:15:00,010 --> 00:15:05,050
if we are able to somehow get some
signals from the natural that look

184
00:15:05,050 --> 00:15:06,760
now start

185
00:15:06,760 --> 00:15:10,750
getting the memory that is being
modified there now stop and dump it

186
00:15:11,740 --> 00:15:18,760
we can we could conceivably get only a
small portion of the memory and that

187
00:15:18,760 --> 00:15:20,560
will be all we need

188
00:15:20,560 --> 00:15:25,810
this will lead to a dramatic decrease in
what we need to dump to the hypervisor

189
00:15:25,810 --> 00:15:29,349
what can we do this in real time

190
00:15:29,350 --> 00:15:32,920
can you actually track pages which are
modified

191
00:15:32,920 --> 00:15:39,490
well yes you can think about virtual
machine live migration

192
00:15:39,490 --> 00:15:45,910
so you have a machine in a data center
in London and the data center in after

193
00:15:45,910 --> 00:15:46,360
them

194
00:15:46,360 --> 00:15:50,140
you want to move it because of vital
it's a better speed better bandwidth

195
00:15:50,140 --> 00:15:52,360
whatever

196
00:15:52,360 --> 00:15:56,800
what you do is the following

197
00:15:57,400 --> 00:16:04,030
we will consider this in hypervisor it
has a mechanism called log

198
00:16:04,030 --> 00:16:09,550
30 which is exactly what we need it logs
30 pages 30 / modified pages

199
00:16:09,550 --> 00:16:15,699
what you do is you issue this mechanism
and all the memory gets flashed on the

200
00:16:15,700 --> 00:16:19,090
network to the amsterdam data center

201
00:16:20,260 --> 00:16:26,590
ok but the first machine is still active
right it's live migration

202
00:16:26,590 --> 00:16:34,540
so when this transfer finishes the
Machine amsterdam will have an

203
00:16:34,540 --> 00:16:39,699
inconsistent the view of the physical
memory of the machine in London

204
00:16:39,700 --> 00:16:45,160
so you need to do this situation again
only with the pages that have been

205
00:16:45,160 --> 00:16:51,100
modified and this log dirty mechanism
helps you just with that at first you

206
00:16:51,100 --> 00:16:54,880
send four gigabytes as we said but at
the next iteration to have a consistent

207
00:16:54,880 --> 00:17:00,070
state you only need to send let's say
100 megabytes and in the next iteration

208
00:17:00,070 --> 00:17:05,230
50 megabytes 10 megabytes this
inconsistency will drop and drop until

209
00:17:05,230 --> 00:17:11,440
you reach a certain threshold so then
you just stopped the vm and started in

210
00:17:11,440 --> 00:17:12,820
answer them

211
00:17:12,819 --> 00:17:17,948
this is how it works and that if you
think about it for a bit

212
00:17:17,949 --> 00:17:19,530
this is exactly what we need

213
00:17:19,530 --> 00:17:25,109
between two timestamps you can track the
memory that has been modified

214
00:17:25,740 --> 00:17:33,540
all right but is this only for them will
know most modern hypervisors support

215
00:17:33,540 --> 00:17:39,810
this in some way either for what right
protecting pages right rotating a whole

216
00:17:39,810 --> 00:17:43,110
page tables or something really curious

217
00:17:43,110 --> 00:17:47,100
recently there's even a processor
extension from Intel called page

218
00:17:47,100 --> 00:17:52,110
modification logging which does just
what we need it's a really convenient

219
00:17:52,110 --> 00:17:54,389
for Taylor's descriptions so how

220
00:17:54,390 --> 00:17:58,710
ok so let's do a brief recap

221
00:17:59,370 --> 00:18:04,199
so you are you live in the hypervisor
right you have access to the traffic and

222
00:18:04,200 --> 00:18:09,090
what you're going to do is set some dumb
iptables rules

223
00:18:09,090 --> 00:18:14,730
why because the TLS handshake is plain
text well not plain text this collar

224
00:18:14,730 --> 00:18:15,690
plane hex

225
00:18:15,690 --> 00:18:23,940
it's a bicycle by white shark so when
you see that the server hello is coming

226
00:18:23,940 --> 00:18:29,100
from outside and it's about to enter the
guest VM you stop it

227
00:18:29,100 --> 00:18:34,679
in transit you start this log 30
mechanism and then you let the packet go

228
00:18:34,680 --> 00:18:35,370
through

229
00:18:35,370 --> 00:18:41,489
correspondingly when the client when you
see that the packet is exiting the vm

230
00:18:41,490 --> 00:18:43,590
and it's about to go on the network

231
00:18:43,590 --> 00:18:49,350
you stopped the vm so you stop the
packet you issue the log 30 mechanism to

232
00:18:49,350 --> 00:18:51,689
get the pages that have been modified

233
00:18:51,690 --> 00:18:56,820
you still keep the packet and chance for
a bit so that you don't stop the vm and

234
00:18:56,820 --> 00:19:00,689
you dump all the memory pages on the
hypervisor the hat that have been

235
00:19:00,690 --> 00:19:07,050
modified and then you just let the
packet continue its course and this is

236
00:19:07,050 --> 00:19:12,810
this is only the only this you have to
do at the tailor's connection

237
00:19:12,810 --> 00:19:19,500
well the result will be a micro memory
dump as we call it really small

238
00:19:19,500 --> 00:19:24,060
not four gigabytes as you'll see but
this can be processed offline anytime so

239
00:19:24,060 --> 00:19:29,250
you have the traffic from the hypervisor
and if you combine it with this you get

240
00:19:29,250 --> 00:19:30,000
the keys

241
00:19:30,000 --> 00:19:31,980
we'll see how but

242
00:19:31,980 --> 00:19:37,020
the important thing here is that you can
do this either one minute after the

243
00:19:37,020 --> 00:19:42,120
connection that we have started or one
month one year whenever you want

244
00:19:42,120 --> 00:19:45,659
so you can have a history right

245
00:19:45,660 --> 00:19:53,610
some numbers on a Linux VM the memory
dumps are about a couple of megabytes

246
00:19:53,610 --> 00:20:00,090
for a connection which is a bit
different from four gigabytes right on

247
00:20:00,090 --> 00:20:04,379
the windows because of blood and for
both I mean graphics interface of course

248
00:20:04,380 --> 00:20:10,440
you have a couple of tens of megabytes
memory them but what we are most

249
00:20:10,440 --> 00:20:16,080
interested in is if it's noticeable if
the hypervisor that is to a vm if it's

250
00:20:16,080 --> 00:20:21,270
noticeable and do some tricks that you
can see in the people we managed to get

251
00:20:21,270 --> 00:20:25,950
it down to zero point five minutes
seconds tops

252
00:20:25,950 --> 00:20:31,980
but usually it's 0.05 milliseconds and
this is on hardware that doesn't even

253
00:20:31,980 --> 00:20:38,309
have page modification log and the
actual page down time is a couple of

254
00:20:38,309 --> 00:20:45,210
milliseconds and as we said this is
included in the when you keep the packet

255
00:20:45,210 --> 00:20:46,049
in transit

256
00:20:46,049 --> 00:20:51,629
so you don't even need to pause the view
when you pause it only when you issue or

257
00:20:51,630 --> 00:20:53,669
reset the log 30 seconds

258
00:20:53,669 --> 00:20:58,770
all right revisiting our problems we
don't have to dance for gigabyte anymore

259
00:20:58,770 --> 00:21:03,720
we still have multiple connections but
space won't fill up as quickly

260
00:21:03,720 --> 00:21:08,730
right but there's still the second
problem so we have the micro memory dump

261
00:21:08,730 --> 00:21:12,660
what are we going to do it we have to
process it somehow and this is what

262
00:21:12,660 --> 00:21:14,130
we're going to do next

263
00:21:14,130 --> 00:21:20,460
apparently you have the key for Matt you
have various parameters for the Cypress

264
00:21:20,460 --> 00:21:21,030
eat

265
00:21:21,030 --> 00:21:27,540
assuming so let's simplify the problem a
bit again we're going to assume that the

266
00:21:27,540 --> 00:21:32,700
encryption keys are in memory so we're
going to try all substrates for example

267
00:21:32,700 --> 00:21:39,270
a is 256 we're going to try all 32 byte
consecutive the strings

268
00:21:39,270 --> 00:21:43,650
how are we going to know when we arrived
at the correct key

269
00:21:43,650 --> 00:21:45,270
we have the traffic from

270
00:21:45,270 --> 00:21:49,680
the network we're going to try to
decrypt it using the cipher suite but we

271
00:21:49,680 --> 00:21:53,550
don't know what behind the description

272
00:21:55,170 --> 00:22:02,520
what are we going to do we're going to
revisit the telus handshake again we

273
00:22:02,520 --> 00:22:05,580
said that just before the tailor's
handshake finishes

274
00:22:05,580 --> 00:22:10,770
we're going to use that sorry just
before the handshake finishes

275
00:22:10,770 --> 00:22:14,639
you have two more packets encrypted sent
from each side

276
00:22:14,640 --> 00:22:18,660
the client finished is encrypted but it
has a fixed form

277
00:22:18,660 --> 00:22:25,860
it starts with 14 000 c so if you just
try all the keys and somehow you get to

278
00:22:25,860 --> 00:22:30,840
one that starts with this you have two
possibilities right either

279
00:22:30,840 --> 00:22:34,260
it's you stumble upon the correct keys
or you have a false positive

280
00:22:35,010 --> 00:22:40,440
all right let's see the first positive
read it's 1 over 2 to the 32

281
00:22:40,440 --> 00:22:46,860
so this is 4 gigabytes so you need a
full gigabyte memory dump to get just

282
00:22:46,860 --> 00:22:49,830
one false positive but we don't have
four gigabytes

283
00:22:49,830 --> 00:22:55,710
we have four megabytes let's say forty
megabytes for windows so it's cool but

284
00:22:55,710 --> 00:23:00,720
this only works if you can actually
decrypt those first four bites it works

285
00:23:00,720 --> 00:23:01,890
for stream ciphers

286
00:23:01,890 --> 00:23:10,260
but 4g CBC NGC am not so so let's see
what exactly the what are the cipher

287
00:23:10,260 --> 00:23:14,610
suites that gets elected right we set
the server select the disciples

288
00:23:14,610 --> 00:23:21,600
unfortunately only five percent is a
prone to our technique only stream

289
00:23:21,600 --> 00:23:22,439
ciphers

290
00:23:22,440 --> 00:23:26,250
so twenty percent CBC and the rest GM

291
00:23:26,250 --> 00:23:33,600
all right let's talk about the next one
CBC as its name implies it just changed

292
00:23:33,600 --> 00:23:34,889
Block together

293
00:23:34,890 --> 00:23:41,190
so when you want to decrypt the third
block you need the second block when you

294
00:23:41,190 --> 00:23:45,120
want to decrypt this second block in the
first one all right but we need to get

295
00:23:45,120 --> 00:23:51,239
the first one for the first one you have
to use the initialization vector which

296
00:23:51,240 --> 00:23:56,760
is also part of the key material as the
key so it's somewhere else in memory so

297
00:23:56,760 --> 00:23:57,500
you need to

298
00:23:57,500 --> 00:24:03,170
for that as well you have one boot for
the ivy and another one nested for the

299
00:24:03,170 --> 00:24:10,550
key so you have a quadratic complexity
here which isn't actually real time but

300
00:24:10,550 --> 00:24:12,169
there's another thing

301
00:24:12,170 --> 00:24:17,630
this is a block cipher right when you
encrypt six bytes the encryption goes to

302
00:24:17,630 --> 00:24:25,520
16 bytes so you need padding so we don't
have access to the description of the

303
00:24:25,520 --> 00:24:29,540
first block but we have access to the
the description of the last block which

304
00:24:29,540 --> 00:24:33,770
is predictable padding and it's the same
as before

305
00:24:33,770 --> 00:24:36,770
you just don't use the first to use the
last block and get the pairing

306
00:24:37,460 --> 00:24:41,240
alright CBC down now let's take a GC him

307
00:24:41,240 --> 00:24:47,480
well it looks a bit difficult right now
we're going to split into two easily

308
00:24:47,480 --> 00:24:48,740
digestible parts

309
00:24:48,740 --> 00:24:55,670
GM counter mode half of it is countable
half of it is authentication so you just

310
00:24:55,670 --> 00:25:02,360
have a counter that infinitely increases
you encrypt this discounter and you will

311
00:25:02,360 --> 00:25:05,959
get the pseudo-random extreme
indifference to the Tennessee and you

312
00:25:05,960 --> 00:25:08,780
use it just like a normal student life
for you don't have the padding

313
00:25:08,780 --> 00:25:17,000
unfortunately you encrypted and at the
end instead of using the md5 sha-1 shelf

314
00:25:17,000 --> 00:25:25,550
ready for you use the GCM you combine
the ciphertext blocks you do some finite

315
00:25:25,550 --> 00:25:28,909
field math magic and you end up with the
tag

316
00:25:28,910 --> 00:25:33,800
this process is really fast that's why
it's a combined together

317
00:25:34,400 --> 00:25:37,940
all right so why can't we do

318
00:25:38,450 --> 00:25:41,450
why can't we have the same approach as
before

319
00:25:43,610 --> 00:25:49,310
think about it you have two directions
possible for the brute force

320
00:25:49,310 --> 00:25:57,020
either you use the counter to try all
the encryptions and see if strong with

321
00:25:57,020 --> 00:26:01,520
the ciphertext you get a planting
starting with 14 0 °c or the other

322
00:26:01,520 --> 00:26:06,260
direction wrong when you decrypt but if
you want to decrypt you only know half

323
00:26:06,260 --> 00:26:07,490
of the plain text

324
00:26:07,490 --> 00:26:10,669
so you will have a quadratic complexity
again

325
00:26:10,669 --> 00:26:16,609
and the counter is actually have random
from the key material have predictable

326
00:26:16,609 --> 00:26:19,730
so congested complexity again

327
00:26:20,809 --> 00:26:23,899
all right how do we solve this

328
00:26:23,899 --> 00:26:27,949
well using the tagging part in the
algorithm

329
00:26:28,759 --> 00:26:34,519
I don't actually have time to explain
but you can see in the people in short

330
00:26:34,519 --> 00:26:39,200
what we do is just reverse the floats in
the tagging instead of using the

331
00:26:39,200 --> 00:26:43,429
ciphertext the authentication data and
the encrypted counter to get the tag

332
00:26:43,429 --> 00:26:47,029
we will use the ciphertext the
authentication data and the tag to get

333
00:26:47,029 --> 00:26:52,070
an encrypted version of the counter with
this encrypted version we travel the

334
00:26:52,070 --> 00:26:56,210
keys and if it matches this predictable
value

335
00:26:56,210 --> 00:27:01,909
we're all set so this time it's a
plaintext attack on the counter

336
00:27:01,909 --> 00:27:11,330
all right some numbers again if you have
a memory dump that is completely random

337
00:27:12,049 --> 00:27:19,759
which isn't unusual in practice and you
try getting the GCM keys

338
00:27:19,759 --> 00:27:25,970
it will end up about seven seconds if
you feel more hardware and more cpus you

339
00:27:25,970 --> 00:27:32,899
will get a really cool speed up here we
only have six cpus but first I speed up

340
00:27:32,899 --> 00:27:38,539
you can read about it in the people if
you're really curious and the another

341
00:27:38,539 --> 00:27:43,609
thing is that when you do a micro memory
dump or any memory dump it's not

342
00:27:43,609 --> 00:27:45,649
completely random data

343
00:27:45,649 --> 00:27:51,168
it's it has structured than low entropy
data it has lots of padding lots of

344
00:27:51,169 --> 00:27:58,639
texts the keys from the key material are
have some good statistical properties

345
00:27:58,639 --> 00:28:06,199
so you can add these heuristics and you
will get really a bigger speed up to

346
00:28:06,200 --> 00:28:10,850
about the couple of hundreds of
milliseconds but think about it as we

347
00:28:10,850 --> 00:28:15,320
said the typical memory dump is a couple
of tens of megabytes right so this means

348
00:28:15,320 --> 00:28:22,039
that it's actually a couple of tens of
milliseconds on each micro memory dump

349
00:28:22,039 --> 00:28:24,110
the processes so

350
00:28:24,110 --> 00:28:28,820
you can actually consume the memory
dumps as fast as we can produce them so

351
00:28:28,820 --> 00:28:31,549
space won't fill up at all

352
00:28:31,549 --> 00:28:41,270
all right so that being said i can go on
to the demo we have two demos the first

353
00:28:41,270 --> 00:28:47,030
we'll show you the actual internals of
the telescope

354
00:28:48,140 --> 00:28:56,090
ok so the setup is the following i have
a laptop running zen and I have a

355
00:28:56,090 --> 00:29:05,990
machine that is running windows then as
a guest VM all right our guest VM where

356
00:29:05,990 --> 00:29:07,010
exactly is it

357
00:29:07,010 --> 00:29:10,580
it's this one do we have connectivity we
have

358
00:29:10,580 --> 00:29:19,189
ok so I'm going to start the telescope
and attached to that vm

359
00:29:19,760 --> 00:29:30,830
oh sorry first let me start up wireshark
we want the traffic at you right and we

360
00:29:30,830 --> 00:29:35,960
attach to the vm we have to specify the
IP that has been assigned to the vm and

361
00:29:35,960 --> 00:29:36,770
the name

362
00:29:36,770 --> 00:29:39,770
okay it starts logging

363
00:29:40,400 --> 00:29:44,179
why sure it seems to be working ok

364
00:29:47,220 --> 00:29:50,220
yeah

365
00:29:52,130 --> 00:29:52,780
so

366
00:29:52,780 --> 00:30:08,230
what we do is a regular browsing session
we go to google mail and sign but hang

367
00:30:08,230 --> 00:30:11,620
on a bit before we start typing our
credentials list check out this is a

368
00:30:11,620 --> 00:30:14,620
secure connection is the secure
connection

369
00:30:15,310 --> 00:30:20,350
look yeah it might be but we have to
check

370
00:30:20,350 --> 00:30:24,820
otherwise it will be super fish again
all right

371
00:30:24,820 --> 00:30:29,770
geotrust google authority account
google.com

372
00:30:29,770 --> 00:30:37,210
all right seems legit because it is a
connection encrypted with diffie-hellman

373
00:30:37,210 --> 00:30:40,390
RSA GCM all right

374
00:30:40,390 --> 00:30:43,390
seems good

375
00:30:53,210 --> 00:30:58,010
don't stay signed them ok

376
00:31:03,120 --> 00:31:09,000
yeah so you're going to see my password
so i decided to add two factor

377
00:31:09,000 --> 00:31:10,800
authentication

378
00:31:10,800 --> 00:31:13,860
ok

379
00:31:18,480 --> 00:31:22,380
35 it yup

380
00:31:25,410 --> 00:31:32,429
and with demo gods willing all right we
logged in with our top secret docs here

381
00:31:32,429 --> 00:31:44,100
going to stop white shark and save the
capture just to be safe to be on the

382
00:31:44,100 --> 00:31:45,059
safe side

383
00:31:45,059 --> 00:31:55,470
ok so what we have here almost unseeable
this is worse

384
00:31:56,790 --> 00:32:03,870
so we have a lot of sessions right for
each connection so we are watching

385
00:32:03,870 --> 00:32:10,889
session only lasted for a couple of
seconds but you see here a lot of

386
00:32:10,890 --> 00:32:15,929
connections right as i said because of
static traffic

387
00:32:15,929 --> 00:32:18,929
static content advertisements whatever

388
00:32:19,860 --> 00:32:28,229
ok how big are only 200 mix and that
there are about 30 connections

389
00:32:28,919 --> 00:32:37,470
I think so let's process them I have a
quick script that just iterates over the

390
00:32:37,470 --> 00:32:40,799
directories and passes them

391
00:32:40,799 --> 00:32:51,120
boom done let's try it again and see how
much time it takes one and a half

392
00:32:51,120 --> 00:32:56,790
seconds 4 30 memory dumps all right

393
00:32:56,790 --> 00:33:01,770
we have the wide shot traffic

394
00:33:04,490 --> 00:33:10,730
I'm going to filter just on the hell oh
so you see all the connections here

395
00:33:11,300 --> 00:33:18,440
alright so actually if you just look in
white shark and you don't plug in any

396
00:33:18,440 --> 00:33:19,580
keys

397
00:33:19,580 --> 00:33:28,428
what do you see um you can only see the
site that is being requested on the

398
00:33:28,429 --> 00:33:32,840
right hand side well without zooming you
cannot see anything

399
00:33:32,840 --> 00:33:36,949
we're going to look at this one account
. google.com

400
00:33:36,950 --> 00:33:41,750
I have a feeling this will be the one
we're interested in if you do tcp stream

401
00:33:42,290 --> 00:33:45,770
this is what's on the the wire

402
00:33:45,770 --> 00:33:50,300
you have the request you have the
certificate and everything else is

403
00:33:50,300 --> 00:33:50,990
encrypted

404
00:33:50,990 --> 00:33:58,340
it looks like garbage because it's
encrypted if you use why sharks feature

405
00:33:58,340 --> 00:34:03,500
for follow a self stream it would you
some keys but it doesn't have any Sasaki

406
00:34:03,500 --> 00:34:04,640
silver

407
00:34:04,640 --> 00:34:15,169
ok so now session Keys all right

408
00:34:17,510 --> 00:34:23,300
yeah we have the keys in there so I'm
going to do a bit of the heck

409
00:34:23,300 --> 00:34:27,770
because of white shark boom did you see
that

410
00:34:27,770 --> 00:34:31,340
something changed why what exactly

411
00:34:32,330 --> 00:34:39,440
instead of a cell you now have HTTP if
we do the same follow SL stream

412
00:34:39,440 --> 00:34:45,290
what do we get does this look plain text
to you

413
00:34:45,290 --> 00:34:52,820
it's the garbage well no actually it's
HTTP too . o which is the latest region

414
00:34:52,820 --> 00:34:57,800
browser technology but -

415
00:34:58,340 --> 00:35:07,850
we have something here email hack in the
Box telescope of concept then decrypted

416
00:35:07,850 --> 00:35:10,850
do we also have the password

417
00:35:11,390 --> 00:35:16,339
lame password 42 so now you can log into
my account

418
00:35:20,480 --> 00:35:26,630
but actually you can log it right
because you don't have my two factor

419
00:35:26,630 --> 00:35:33,080
authentication key the yeah

420
00:35:33,080 --> 00:35:36,080
it sits around here some time please

421
00:35:49,290 --> 00:35:52,529
anyway you can just get my Cookie so
you're all set

422
00:35:54,390 --> 00:36:04,140
ok so now what we have is a tcp on top
of this acyl on top of HTTP to do

423
00:36:04,140 --> 00:36:12,029
everything is decrypted you have this /
capture file and you have the keys

424
00:36:12,030 --> 00:36:16,560
you're all set you can decrypt that this
at any moment in time and did you

425
00:36:16,560 --> 00:36:18,210
actually see any overhead

426
00:36:18,210 --> 00:36:22,800
did you see any slowdown know this can
be done by the card provider

427
00:36:22,800 --> 00:36:33,090
whenever they want alright so i can
close this and the capture and this one

428
00:36:33,090 --> 00:36:36,240
is the key

429
00:36:36,240 --> 00:36:43,529
but let me show you something else

430
00:36:44,040 --> 00:36:47,460
when we did this

431
00:36:47,460 --> 00:36:59,400
let's see how much time was it the
machine actually post so update the time

432
00:36:59,400 --> 00:37:08,520
stamp - 30 pages so passé vm 0.0 43
milliseconds 48 0.0 40 milliseconds

433
00:37:09,030 --> 00:37:17,340
as we said and the page don't i'm a
couple of milliseconds so it's really

434
00:37:17,340 --> 00:37:21,060
are noticeable and pretty scary actually

435
00:37:21,660 --> 00:37:31,080
all right now i said i have another demo
this one is to put everything in context

436
00:37:31,080 --> 00:37:35,759
right so when i showed you before it's
just command line stuff you have to do

437
00:37:35,760 --> 00:37:43,020
it by hand but as I said we have some
honey pots and we want to see what the

438
00:37:43,020 --> 00:37:45,060
hackers look like what

439
00:37:45,060 --> 00:37:50,970
the hackers do on our machines so we
integrated the telescope along with

440
00:37:50,970 --> 00:37:54,779
another instrumentation framework that
we have and where we're going to see

441
00:37:54,780 --> 00:37:57,960
what we see

442
00:37:57,960 --> 00:37:59,060
but

443
00:37:59,060 --> 00:38:05,720
so we need a hacker so we want to see
what a hacker looks like you know the

444
00:38:05,720 --> 00:38:11,839
stereotypical portrait portrait version
of a hacker you if you find it

445
00:38:11,840 --> 00:38:15,830
if you search for it on Google
apparently there's some sort of pattern

446
00:38:17,180 --> 00:38:21,890
you cannot be a hacker without the
hoodie so I'm going to transform into a

447
00:38:21,890 --> 00:38:28,700
hacker and let's do this

448
00:38:29,900 --> 00:38:41,750
alright so i have compromised the honey
pot well well I'm going

449
00:38:41,750 --> 00:38:44,750
what am I going to do next date

450
00:38:44,750 --> 00:38:49,550
it's the date of 2d apparently my with
the webmaster all right

451
00:38:50,240 --> 00:38:58,370
seems legit i'm going to download my
files from the server that I control but

452
00:38:58,370 --> 00:39:04,130
no no it's just another thing a
conference . back in the box . work

453
00:39:04,130 --> 00:39:07,490
it's https i'm not sure if you can see
it

454
00:39:07,490 --> 00:39:11,990
i'm going to zoom in for a bit this is
my command

455
00:39:11,990 --> 00:39:16,040
yeah index HTML

456
00:39:16,040 --> 00:39:21,380
ok now let me do another one

457
00:39:21,380 --> 00:39:34,820
this is the side we control for various
reasons proof of concept or it and i'm

458
00:39:34,820 --> 00:39:37,250
going to download some samples

459
00:39:37,250 --> 00:39:43,130
the first of them will be dropped on the
file system

460
00:39:43,820 --> 00:39:49,880
so what it is it's an elf binding right

461
00:39:49,880 --> 00:39:53,990
the second one I'm going to try
something else

462
00:39:54,560 --> 00:39:58,790
I'm not going to even touch the file
system

463
00:39:59,600 --> 00:40:07,610
I'm still going to download it from
https but I'm going to connect it

464
00:40:07,610 --> 00:40:10,870
directly to batch

465
00:40:10,870 --> 00:40:18,910
all right well owning the system that
sounds

466
00:40:18,910 --> 00:40:21,940
how fortunate you have been known

467
00:40:21,940 --> 00:40:25,180
Wow ok so i compromise the machine

468
00:40:25,180 --> 00:40:28,600
I can get out

469
00:40:28,600 --> 00:40:32,020
cool so hyper mode off

470
00:40:32,020 --> 00:40:40,240
let's see what we see from the
hypervisor so you can picture us as the

471
00:40:40,240 --> 00:40:51,189
cloud provider for hackers who all right
so let me explain what you're going to

472
00:40:51,190 --> 00:40:57,220
see here we have two instrumentation
frame of one is telescope and another

473
00:40:57,220 --> 00:40:59,980
one is called fitness which just the
logs

474
00:40:59,980 --> 00:41:04,510
this calls but it does so from outside
the vm we mentioned it briefly in the

475
00:41:04,510 --> 00:41:13,180
paper and what we do is using these
frameworks we instrument and we get

476
00:41:13,180 --> 00:41:21,609
events events go to data center and then
they are correlated then we can use them

477
00:41:21,610 --> 00:41:27,580
to synthetically replay what hackers did
so on the left you will see the actual

478
00:41:27,580 --> 00:41:34,569
event and on the right you will see the
studio terminal events which are as well

479
00:41:34,570 --> 00:41:46,330
captured from syscalls everything is
centered so I locked him up

480
00:41:48,839 --> 00:41:51,839
slow typing skills

481
00:41:56,170 --> 00:41:57,240
yeah

482
00:41:57,240 --> 00:42:00,240
conference hack in the Box dog

483
00:42:00,869 --> 00:42:06,360
it's https so from the hypervisor I'm
not supposed to be able to see this

484
00:42:09,000 --> 00:42:17,970
well we have an eventful telescope and
it says that an HTML document has been

485
00:42:17,970 --> 00:42:24,480
received ok so I'm just gonna pause very
play for a bit and let's check this out

486
00:42:24,480 --> 00:42:34,950
let's save it to samples and in samples
will HTML

487
00:42:35,490 --> 00:42:41,790
jack in the box security conference so
this was a https all right let's carry

488
00:42:41,790 --> 00:42:42,330
on

489
00:42:42,330 --> 00:42:47,880
we're mostly interested in the actual
samples right that's what the honeypot

490
00:42:47,880 --> 00:42:48,869
are actually four

491
00:42:48,869 --> 00:42:54,720
well this one is red

492
00:42:54,720 --> 00:43:03,450
I wonder why because virustotal flag
that as with the dictionary of 39 out of

493
00:43:03,450 --> 00:43:06,450
56 engines detective has a virus

494
00:43:07,050 --> 00:43:11,190
so let me read through it this radiator
this sorry

495
00:43:11,730 --> 00:43:16,560
it's https right so from the hypervisor
you're only supposed to see tcp but with

496
00:43:16,560 --> 00:43:19,350
the telescope incorporated you can see
this end

497
00:43:19,350 --> 00:43:28,710
well it's real time ok and the second
one the sample to it never touched the

498
00:43:28,710 --> 00:43:34,980
first system for what did it actually do
you have known

499
00:43:34,980 --> 00:43:37,980
huh I don't think so

500
00:43:40,160 --> 00:43:46,308
857 this is the script that got
transferred from for free

501
00:43:46,309 --> 00:44:00,170
https what's fresh 857 but only the
system just left for a bit a bit lazy

502
00:44:00,170 --> 00:44:02,960
you have a knot but not really

503
00:44:02,960 --> 00:44:06,289
we're the good guys right yep

504
00:44:06,799 --> 00:44:13,009
so this is how it looks like this is one
was the virus

505
00:44:13,789 --> 00:44:19,309
yeah so that's how it looks like from
our dashboard

506
00:44:20,930 --> 00:44:30,319
this concludes my second channel and the
thing is this isn't actually limited to

507
00:44:30,319 --> 00:44:39,470
TLS because it's piggybacks on top of
asymmetric crypto it works with anything

508
00:44:39,470 --> 00:44:47,629
that negotiates keys in some form or
manner you can use this with VPN you can

509
00:44:47,630 --> 00:44:52,400
use this with this each individual tour
as well as long as it's in the guest VM

510
00:44:52,400 --> 00:44:58,250
and you have access to the hypervisor
which is pretty neat right

511
00:44:58,789 --> 00:45:03,440
it makes you think whether this has
happened to you or not

512
00:45:03,440 --> 00:45:08,359
if it has happened you probably haven't
noticed it and if it's happening now

513
00:45:08,960 --> 00:45:16,789
maybe i don't i'm not sure whether
you're going to be able to notice notice

514
00:45:16,789 --> 00:45:19,010
0.01 milliseconds or not

515
00:45:19,010 --> 00:45:23,299
in conclusion or you saw the proof of
concept

516
00:45:23,299 --> 00:45:28,430
you saw how it works you know you saw
how it can be integrated in something

517
00:45:28,430 --> 00:45:34,160
bigger and the key takeaway here is that
if you're not in complete control of

518
00:45:34,160 --> 00:45:42,618
your bare metal then all bets off
basically pretty scary questions please

519
00:45:47,200 --> 00:45:50,259
any questions yeah please

520
00:45:50,980 --> 00:45:56,770
so I guess you have also built the same
thing for for actual service like

521
00:45:56,770 --> 00:45:59,410
decrypting well my inclinations

522
00:45:59,410 --> 00:46:06,549
cool um maybe another one I have you
built all these some vp you r pn tour

523
00:46:07,119 --> 00:46:11,800
no not it no is it planned for the open
source project

524
00:46:11,800 --> 00:46:20,410
oh yes we still have some things to do
with TLS but after that we're going to

525
00:46:20,410 --> 00:46:24,790
probably go to ssh and then you could
heart thanks

526
00:46:24,790 --> 00:46:29,619
yeah thank you two in the back

527
00:46:30,400 --> 00:46:40,180
well in order for this to work you need
to have a hypervisor or a mechanism that

528
00:46:40,180 --> 00:46:45,160
allows you to look at 30 pages have you
tried this with in an operating system

529
00:46:45,160 --> 00:46:49,720
so without to any other advisors and now
is the response of course you are

530
00:46:49,720 --> 00:46:55,810
can you be a bit the number i will try
again so the busy technique requires a

531
00:46:55,810 --> 00:46:57,849
number visor for you to log

532
00:46:57,849 --> 00:47:04,359
30 pages and try this technique so
within NOS such as a using the page and

533
00:47:04,359 --> 00:47:07,869
link and other techniques and help us
yet

534
00:47:07,869 --> 00:47:12,790
ok so I am you're thinking of a setup
that doesn't involve virtualization at

535
00:47:12,790 --> 00:47:13,180
all

536
00:47:13,180 --> 00:47:20,770
exactly arm it it can work of course but
if you're already in the US

537
00:47:20,770 --> 00:47:26,710
why don't you just get the keys from
there on that doesn't yes I mean it was

538
00:47:26,710 --> 00:47:32,859
interested in the the the speed of
technique visually on if you do it from

539
00:47:32,859 --> 00:47:33,759
the OS

540
00:47:33,760 --> 00:47:38,380
it will be it will certainly be slower
ok well thank you

541
00:47:38,380 --> 00:47:41,380
yeah thank you

542
00:47:47,069 --> 00:47:51,180
your technique assumes the key is in
memory if the key would be obfuscated

543
00:47:51,180 --> 00:47:55,049
adore scattered around the memory will
be much more difficult to find it

544
00:47:55,049 --> 00:47:59,670
because you have to try all sorts of
permutations exactly X or whatever you

545
00:47:59,670 --> 00:48:02,670
would need some extra information from
the US

546
00:48:03,569 --> 00:48:08,788
you would need to see if it's a certain
library how it's obvious case if it does

547
00:48:08,789 --> 00:48:14,910
that but ultimately it will just remove
the real time factor from our approach

548
00:48:14,910 --> 00:48:17,910
it's still polynomial right ok

549
00:48:20,519 --> 00:48:30,718
any more questions I have one actually
for the CBC mode you're using the

550
00:48:30,719 --> 00:48:34,680
padding detection does that always work

551
00:48:34,680 --> 00:48:39,538
oh yes it pretty much works too because
if they're back at the lines at the

552
00:48:39,539 --> 00:48:40,859
right border than you

553
00:48:40,859 --> 00:48:46,319
there's no patio no but if it's the
lines then you have a block with just

554
00:48:46,319 --> 00:48:48,509
better ah very good

555
00:48:48,509 --> 00:48:54,029
yeah all right if there are no more
thing questions then I i think the

556
00:48:54,029 --> 00:48:57,029
speaker and that the demo gods have been
with you

557
00:49:00,920 --> 00:49:03,060
yeah

558
00:49:03,060 --> 00:49:05,160
yeah

