1
00:00:09,700 --> 00:00:10,180
alright

2
00:00:10,180 --> 00:00:12,220
hello everyone I'm Christopher

3
00:00:12,220 --> 00:00:15,700
spence yes I will talk about us

4
00:00:15,700 --> 00:00:19,110
Who Am I %uh a well I'm out but security
researcher

5
00:00:19,110 --> 00:00:23,060
used to do a lot of research on the
channel 5

6
00:00:23,060 --> 00:00:29,369
security features than moved to research
and also extensions and snow warning to

7
00:00:29,369 --> 00:00:30,050
crypto

8
00:00:30,050 --> 00:00:34,200
um I used to work with attack your 50
free with my ride:

9
00:00:34,200 --> 00:00:37,780
Mario hyderi and this presentation is
mostly

10
00:00:37,780 --> 00:00:40,840
based on the research but we thats

11
00:00:40,840 --> 00:00:44,160
we and I have done over that time

12
00:00:44,160 --> 00:00:47,989
now I work at Google butts obviously for
legal reasons I'm

13
00:00:47,989 --> 00:00:51,320
not endorsing like Google does not
endorse anything but I

14
00:00:51,320 --> 00:00:55,470
going to prison the woodstock soul

15
00:00:55,470 --> 00:01:00,579
let's see a show of hands who love you
think that's

16
00:01:00,579 --> 00:01:06,810
some a script crypto is sick good idea I
don't see that many hands

17
00:01:06,810 --> 00:01:10,490
who have you think that it's it's a bad
idea

18
00:01:10,490 --> 00:01:13,560
he yeah like

19
00:01:13,560 --> 00:01:16,570
half a few I would say so um

20
00:01:16,570 --> 00:01:20,770
if you Google stuff on the internets

21
00:01:20,770 --> 00:01:25,540
looking for just a crypto you will
immediately see those two book posts

22
00:01:25,540 --> 00:01:28,900
mostly the first one is by Thomas touch
ok

23
00:01:28,900 --> 00:01:32,189
from much as a No untitled on a skirt
cryptography

24
00:01:32,189 --> 00:01:35,280
considered harmful and the second one

25
00:01:35,280 --> 00:01:38,820
but nato some Colt arm

26
00:01:38,820 --> 00:01:42,390
final poster just with crypto and the
STU

27
00:01:42,390 --> 00:01:47,009
guys arm a really strongly against us
with crypto

28
00:01:47,009 --> 00:01:50,240
and they give several arguments from

29
00:01:50,240 --> 00:01:53,830
these book was also look like a
classical I'll

30
00:01:53,830 --> 00:01:57,359
view on just good crypto up

31
00:01:57,359 --> 00:02:00,649
saw why is is it a bad idea

32
00:02:00,649 --> 00:02:06,110
according to them so first one car
client-side cryptography is not needed

33
00:02:06,110 --> 00:02:12,379
liking the brosser soul if you are
trying to encrypt something on a client

34
00:02:12,379 --> 00:02:12,970
site

35
00:02:12,970 --> 00:02:16,900
in order to for example 27 not to have
access to the plain texts

36
00:02:16,900 --> 00:02:20,360
eats unfortunately won't work because

37
00:02:20,360 --> 00:02:24,450
the servicer to the district 5 so it
could back at the doorsteps fights so

38
00:02:24,450 --> 00:02:29,810
in any sort of are cryptographic
applications you need to have to replace

39
00:02:29,810 --> 00:02:31,040
a trust on the server

40
00:02:31,040 --> 00:02:34,110
right I and also you need to implement

41
00:02:34,110 --> 00:02:37,360
or serve the application over HTTPS
because

42
00:02:37,360 --> 00:02:40,880
that again its thats not happening

43
00:02:40,880 --> 00:02:44,620
if the if the data comes for plane tix
connections time

44
00:02:44,620 --> 00:02:49,049
its of course arm prone to many the
middle attacks and

45
00:02:49,049 --> 00:02:52,180
tampering with the data by are some sort
of

46
00:02:52,180 --> 00:02:55,660
network observer so

47
00:02:55,660 --> 00:03:00,379
it's not needed because you already have
a secure channel to the server

48
00:03:00,379 --> 00:03:03,630
and you need to trust the server so why
nots are

49
00:03:03,630 --> 00:03:06,989
relaying all the cryptographic
operations to to serve a coat

50
00:03:06,989 --> 00:03:10,299
where you somehow control it arm

51
00:03:10,299 --> 00:03:13,340
bart's it's not only dat it's also
dangerous

52
00:03:13,340 --> 00:03:18,489
are is dangerous because this distinct
gold cross site scripting so pretty much

53
00:03:18,489 --> 00:03:22,829
I'll very popular flowing web
applications

54
00:03:22,829 --> 00:03:28,049
Iran's for cryptococcal obviously are
executing at the Costco to in the same

55
00:03:28,049 --> 00:03:32,160
sort of our namespace let's say his spec
destructive

56
00:03:32,160 --> 00:03:35,540
immediately like at the Kirkland for
example extra keys plain text

57
00:03:35,540 --> 00:03:39,450
bandana what but like basically
circumvent any sort of

58
00:03:39,450 --> 00:03:43,730
cryptographic operations and also to
podcasts

59
00:03:43,730 --> 00:03:46,610
Javascript is not the most

60
00:03:46,610 --> 00:03:51,650
are convenient language to implement the
crypto with were also the libraries that

61
00:03:51,650 --> 00:03:52,140
were

62
00:03:52,140 --> 00:03:55,300
present at the time where of media crew
are

63
00:03:55,300 --> 00:03:59,110
quality soul the gist of

64
00:03:59,110 --> 00:04:02,200
all if you want to ask 22 is that

65
00:04:02,200 --> 00:04:07,610
its necessarily doomed to fail and
obviously like

66
00:04:07,610 --> 00:04:10,790
any things that are doomed to fail I'll

67
00:04:10,790 --> 00:04:14,340
become a huge success on the net or
become widely adopted so

68
00:04:14,340 --> 00:04:17,410
rights now in 2014 we have

69
00:04:17,410 --> 00:04:20,570
slavery simplement multiple like to
graphic primitives

70
00:04:20,570 --> 00:04:23,740
in just rips symmetric crypto asymmetry

71
00:04:23,740 --> 00:04:27,120
crypto our first TLS implementations
this

72
00:04:27,120 --> 00:04:31,220
a few OpenPGP protocol implementations a
lot of

73
00:04:31,220 --> 00:04:34,670
use applications built some upon those
libraries

74
00:04:34,670 --> 00:04:38,290
and some random trip to process well
I'll

75
00:04:38,290 --> 00:04:42,500
those free applications all you probably
didn't know

76
00:04:42,500 --> 00:04:45,880
at least some of them the script to cats
a multi-part

77
00:04:45,880 --> 00:04:48,900
arm encrypt each other the cation

78
00:04:48,900 --> 00:04:51,930
may develop which is a basically GPG

79
00:04:51,930 --> 00:04:56,090
or PGP the brosser and open be to BJs
which is later used by

80
00:04:56,090 --> 00:05:00,070
for example may develop so all those
three applications I have

81
00:05:00,070 --> 00:05:04,080
I'll docked at as well and somewhat

82
00:05:04,080 --> 00:05:08,110
are my fight next will be future string
to future during this stock

83
00:05:08,110 --> 00:05:11,210
our home butts

84
00:05:11,210 --> 00:05:15,160
what is actually the action plan so

85
00:05:15,160 --> 00:05:18,810
when I you read about just crypto

86
00:05:18,810 --> 00:05:23,170
he the arguments where in three
convincing for me

87
00:05:23,170 --> 00:05:28,030
I at least from nowadays point of view
so I decided

88
00:05:28,030 --> 00:05:32,860
finally when we have like real crypto
applications recruiter Ribery's

89
00:05:32,860 --> 00:05:37,010
written in JavaScript I and they are
actually being used

90
00:05:37,010 --> 00:05:41,400
why not taking that deeper look at the
at the Colt and seeing

91
00:05:41,400 --> 00:05:44,690
what actually happened like where those
predictions

92
00:05:44,690 --> 00:05:49,520
actually real so are you like I said I
took a look at the Colts I

93
00:05:49,520 --> 00:05:54,680
found some abilities I tried them to
identify the root causes for those with

94
00:05:54,680 --> 00:05:55,460
diabetes

95
00:05:55,460 --> 00:05:57,000
I N

96
00:05:57,000 --> 00:06:00,640
its finally I think the most important
part East

97
00:06:00,640 --> 00:06:03,850
church I try to compare the situation

98
00:06:03,850 --> 00:06:07,050
to mmm native crypto

99
00:06:07,050 --> 00:06:10,070
by native trip to i mean but did are

100
00:06:10,070 --> 00:06:14,040
classical cryptography calm applications
like

101
00:06:14,040 --> 00:06:19,250
by open a cell or lucia less return of
course it like

102
00:06:19,250 --> 00:06:22,470
I'll study compiled languages and

103
00:06:22,470 --> 00:06:26,680
and what not right so are when

104
00:06:26,680 --> 00:06:29,690
a certain looking at

105
00:06:29,690 --> 00:06:34,210
those applications I immediately found
out that the vulnerabilities or some

106
00:06:34,210 --> 00:06:37,750
we'd behaviors of of those libraries are
obligations

107
00:06:37,750 --> 00:06:41,910
are being caused by to distinct

108
00:06:41,910 --> 00:06:45,080
issues the first one East

109
00:06:45,080 --> 00:06:49,720
language issues to the fact that the
applications are written in JavaScript

110
00:06:49,720 --> 00:06:52,820
arm and the seconds

111
00:06:52,820 --> 00:06:56,050
group of I'll issues

112
00:06:56,050 --> 00:07:00,150
was because of the web platform how it
works

113
00:07:00,150 --> 00:07:04,729
we used to say even liked security
circles that the web is broken which is

114
00:07:04,729 --> 00:07:05,680
true obviously

115
00:07:05,680 --> 00:07:11,229
I haven't those flows would still be
present

116
00:07:11,229 --> 00:07:14,770
no matter if the applications to would
have been implemented in JavaScript or

117
00:07:14,770 --> 00:07:15,910
say for example

118
00:07:15,910 --> 00:07:18,919
I VBScript or Visual Basic Script right

119
00:07:18,919 --> 00:07:22,100
are so those are more arm

120
00:07:22,100 --> 00:07:25,930
because of how the web works not which
leg which was the future

121
00:07:25,930 --> 00:07:29,660
demented the let's look at the language
issues

122
00:07:29,660 --> 00:07:34,180
but first do you think that's language

123
00:07:34,180 --> 00:07:37,840
issue Martyn to crypto like I mean

124
00:07:37,840 --> 00:07:41,160
all languages are probably that them

125
00:07:41,160 --> 00:07:44,720
by IR all languages that are being used
as a program that was a

126
00:07:44,720 --> 00:07:48,100
to incomplete so but it shouldn't really
matter

127
00:07:48,100 --> 00:07:52,970
in which language do actually implement
the features in but I would say that's

128
00:07:52,970 --> 00:07:56,740
are they do matter and if you think they
don't

129
00:07:56,740 --> 00:08:02,949
at one point your going to fail events
let me repeat that you are going to fail

130
00:08:02,949 --> 00:08:06,490
so this is obviously example of a total
fail I'll

131
00:08:06,490 --> 00:08:09,870
failure which was sort of are

132
00:08:09,870 --> 00:08:13,159
because of how a language is implemented
in that

133
00:08:13,159 --> 00:08:16,529
its featured like the are go to
instructions

134
00:08:16,529 --> 00:08:19,659
so let's take a look at what cost
reduction yes

135
00:08:19,659 --> 00:08:23,400
because is a very tricky language it
said in dynamic one

136
00:08:23,400 --> 00:08:27,339
it's a leg which was sweetie type is
this really weird

137
00:08:27,339 --> 00:08:30,779
inheritance model are it has a im

138
00:08:30,779 --> 00:08:34,139
implicit global objects it has a
forgiving process well

139
00:08:34,139 --> 00:08:37,889
and it's a very flexible language

140
00:08:37,889 --> 00:08:42,079
you can Colts arbitrary JavaScript using
just six characters

141
00:08:42,079 --> 00:08:45,880
rights sort of like brain fuck for
example and

142
00:08:45,880 --> 00:08:49,680
obviously to take a lil deeper look at
this code you can immediately see that

143
00:08:49,680 --> 00:08:50,370
it's

144
00:08:50,370 --> 00:08:55,269
alert one right but doesn't matter to
crypto

145
00:08:55,269 --> 00:08:59,339
it's just a thing right I'll

146
00:08:59,339 --> 00:09:03,339
so let's take a look at something
political deeper right

147
00:09:03,339 --> 00:09:06,790
let's take a look at this week talking
with the JavaScript

148
00:09:06,790 --> 00:09:10,000
are so if you try to

149
00:09:10,000 --> 00:09:13,050
parson integer from from a string

150
00:09:13,050 --> 00:09:17,220
I'll the result it's not released so

151
00:09:17,220 --> 00:09:21,410
who is the three bright at the screen
but if you try to parse into

152
00:09:21,410 --> 00:09:26,240
off of this particular string together
mom but then again if you try

153
00:09:26,240 --> 00:09:29,490
to pass its using XO the two-mile

154
00:09:29,490 --> 00:09:33,190
radics you got 15 rights totally
expected

155
00:09:33,190 --> 00:09:36,290
I if you take for example

156
00:09:36,290 --> 00:09:39,310
after mean it's the medium number a
being

157
00:09:39,310 --> 00:09:42,500
able to be expressed by just a blank
which a

158
00:09:42,500 --> 00:09:47,360
its infinity but if you take the maximum
number it's minus infinity

159
00:09:47,360 --> 00:09:52,040
so if you can see immediately like

160
00:09:52,040 --> 00:09:55,040
me Mom number in just its actually
greater

161
00:09:55,040 --> 00:10:00,699
that the maximum number express just
ripped hands for example

162
00:10:00,699 --> 00:10:05,190
no is an object bart's it's not the
means to love an object so

163
00:10:05,190 --> 00:10:08,760
now for some things so

164
00:10:08,760 --> 00:10:12,220
as you can see JavaScript because of its

165
00:10:12,220 --> 00:10:16,480
weekly I'll type system can introduce
some subtle

166
00:10:16,480 --> 00:10:20,920
close to any sort of program I don't of
course for crypto this

167
00:10:20,920 --> 00:10:24,480
are can be disastrous a but of course

168
00:10:24,480 --> 00:10:31,130
boss thinks you can overcome in this
case we have close-up look like triple

169
00:10:31,130 --> 00:10:35,040
equals operators which is which is
called identity operator so this one

170
00:10:35,040 --> 00:10:38,900
a compass objects not lock/unlock
Lamothe

171
00:10:38,900 --> 00:10:43,680
only picking care of their values but
also the types

172
00:10:43,680 --> 00:10:47,250
so the type should much its sort of

173
00:10:47,250 --> 00:10:50,700
safe equal operator right so if

174
00:10:50,700 --> 00:10:53,810
you assign a value to up to a variable
called

175
00:10:53,810 --> 00:10:57,670
a and then you are plus or RT 12

176
00:10:57,670 --> 00:11:03,320
thats I'll that long variable this
shouldn't never happen right

177
00:11:03,320 --> 00:11:07,620
Lake unless you overload the operator in
sick just us but

178
00:11:07,620 --> 00:11:10,720
personal operator overloading dusted at
least

179
00:11:10,720 --> 00:11:14,490
and not in the general case are

180
00:11:14,490 --> 00:11:18,610
so what kind of object is actually a

181
00:11:18,610 --> 00:11:21,950
you might think that maybe it's not a
number

182
00:11:21,950 --> 00:11:25,100
that's a thing in javascript as an
object called not a number or

183
00:11:25,100 --> 00:11:28,390
an entity called not a number but that's
not the case

184
00:11:28,390 --> 00:11:31,730
not a number is not equal to anything
even itself

185
00:11:31,730 --> 00:11:35,340
like that's a special object I'll

186
00:11:35,340 --> 00:11:38,990
actually infinity yeah if you assign

187
00:11:38,990 --> 00:11:42,970
infinity 2 a.m. the new at 12 it its
salinity and its

188
00:11:42,970 --> 00:11:48,550
the same type so that's expected but
that mister big inning and you see that

189
00:11:48,550 --> 00:11:52,350
minus infinity has the same property and

190
00:11:52,350 --> 00:11:56,610
for example one times 10 to the power of
16

191
00:11:56,610 --> 00:12:00,560
has also this behavior which is

192
00:12:00,560 --> 00:12:05,200
kind of strange but may be expected is
just sick huge numbers so

193
00:12:05,200 --> 00:12:09,110
probably something is confused but then
you start digging deeper and actually

194
00:12:09,110 --> 00:12:12,140
this is the smallest number that's has
this property

195
00:12:12,140 --> 00:12:15,220
why this one

196
00:12:15,220 --> 00:12:19,800
no idea the self-destructs and system

197
00:12:19,800 --> 00:12:23,050
you can see immediately that

198
00:12:23,050 --> 00:12:26,630
the last song we do teachers in the
language its might to make

199
00:12:26,630 --> 00:12:31,060
implementing crypto Colts tricky so

200
00:12:31,060 --> 00:12:35,720
crypto is based on bits right its a
little therm

201
00:12:35,720 --> 00:12:39,160
I love operations are actually a keg
sorry shifting bits and what not

202
00:12:39,160 --> 00:12:42,680
so let's take a look at let i'll just
rips implements

203
00:12:42,680 --> 00:12:46,250
beach fifty so few the Hereford

204
00:12:46,250 --> 00:12:50,600
all numbers are actually floats Angeles
to thats implementation issue

205
00:12:50,600 --> 00:12:53,890
are so if you have number one

206
00:12:53,890 --> 00:12:57,370
and do then you try to left shifted by
thirty one beats

207
00:12:57,370 --> 00:13:01,790
you got a huge negative number which is
so horrible expect

208
00:13:01,790 --> 00:13:05,210
mantegna shifted left 32 bits and then
you'll get

209
00:13:05,210 --> 00:13:08,640
one so you shift its

210
00:13:08,640 --> 00:13:13,580
33 beats who gets to you sort of like
overflowed the whole thing

211
00:13:13,580 --> 00:13:17,510
but then you start shifting you left 31
beats and then left

212
00:13:17,510 --> 00:13:22,100
another one which should be something
like this should be one

213
00:13:22,100 --> 00:13:25,830
but it's actually 0 because of the
presidents of

214
00:13:25,830 --> 00:13:31,520
the operators a so you try them shifting
it left 31 bit something right for the

215
00:13:31,520 --> 00:13:33,080
one bit said you could buy this one

216
00:13:33,080 --> 00:13:37,220
and we actually have you know in

217
00:13:37,220 --> 00:13:41,230
JavaScript we have triple right shift
operator which assigns

218
00:13:41,230 --> 00:13:44,230
unsigned are right shift

219
00:13:44,230 --> 00:13:47,650
so if your shift left 31 beat/nu shift
right

220
00:13:47,650 --> 00:13:51,680
unsigned 31 mates you get one back
together

221
00:13:51,680 --> 00:13:55,410
so yet tricky from

222
00:13:55,410 --> 00:13:59,640
okay much property desist though this is
something to that

223
00:13:59,640 --> 00:14:02,920
was actually able nobody's what caused
the vulnerability

224
00:14:02,920 --> 00:14:05,220
so was the trip to cut

225
00:14:05,220 --> 00:14:08,220
it's a multi-part each other
publications a

226
00:14:08,220 --> 00:14:12,210
in order to exchange messages with
someone you need to

227
00:14:12,210 --> 00:14:15,460
are gets their pride the

228
00:14:15,460 --> 00:14:19,530
get their proper public key and then
derive some set secret with them

229
00:14:19,530 --> 00:14:23,480
were in order to semantically my crib to
you about communication

230
00:14:23,480 --> 00:14:26,950
soul are crib to cut whenever somebody
new

231
00:14:26,950 --> 00:14:30,620
joint chat room it is a cute that this

232
00:14:30,620 --> 00:14:33,690
kind of coat so what does this disco a

233
00:14:33,690 --> 00:14:37,030
do it checks whether was an array

234
00:14:37,030 --> 00:14:41,470
called public keys all it's not on a
rates an object doesn't really matter so

235
00:14:41,470 --> 00:14:44,900
versus storage for public keys

236
00:14:44,900 --> 00:14:48,110
answer based on the sender ID

237
00:14:48,110 --> 00:14:51,470
it checks whether I already have a
public key for that said there

238
00:14:51,470 --> 00:14:55,150
if I do that means I probably have a
shirt secret anyway

239
00:14:55,150 --> 00:14:58,220
and I already talk to this person so
personal

240
00:14:58,220 --> 00:15:01,260
absolve key exchange to be done a

241
00:15:01,260 --> 00:15:05,360
so if there is no keefer for particular
sender

242
00:15:05,360 --> 00:15:08,480
then I was just so store it

243
00:15:08,480 --> 00:15:13,110
whatever he sent me over the wire and
then I will generate a shirt secret for

244
00:15:13,110 --> 00:15:13,940
the sender

245
00:15:13,940 --> 00:15:17,150
so this is the key X sort of key
exchange

246
00:15:17,150 --> 00:15:21,870
apart but then when somebody sends an
increase that message to me

247
00:15:21,870 --> 00:15:25,510
I need to the crypt it so I'm looking
for a

248
00:15:25,510 --> 00:15:29,290
shirt secret of the same sender and

249
00:15:29,290 --> 00:15:32,820
if its president if it exists I was just
saw

250
00:15:32,820 --> 00:15:36,370
authenticate the message I would take
the H Markham them a

251
00:15:36,370 --> 00:15:39,660
the crypt a the deal using the actual

252
00:15:39,660 --> 00:15:43,000
prescription key looks insane

253
00:15:43,000 --> 00:15:46,910
in sort of leg which mostly are

254
00:15:46,910 --> 00:15:52,600
part it's almost ripped and we have
magic properties and there's a magic

255
00:15:52,600 --> 00:15:55,030
property Colts underscore underscore
Prato

256
00:15:55,030 --> 00:15:58,470
underscore underscore and this
particular property

257
00:15:58,470 --> 00:16:01,750
use always presents in an object

258
00:16:01,750 --> 00:16:05,040
arm so you have an object

259
00:16:05,040 --> 00:16:08,370
up an exemplary object of let's imagine

260
00:16:08,370 --> 00:16:13,330
to public useful to send us one called
101 Colts

261
00:16:13,330 --> 00:16:17,470
another web call to and those are of
course arbitrary values

262
00:16:17,470 --> 00:16:20,760
but but then again there's a

263
00:16:20,760 --> 00:16:24,650
into this sort of invisible pro property
called Prato

264
00:16:24,650 --> 00:16:28,250
and it's always there and issue

265
00:16:28,250 --> 00:16:31,410
try to evaluate this is a boolean value
it's you to evaluate

266
00:16:31,410 --> 00:16:35,360
true because it does a script an empty
object

267
00:16:35,360 --> 00:16:40,120
which is the value of the proper because
the Pro two ways to you instanceof the

268
00:16:40,120 --> 00:16:43,840
prototype of the objects which is

269
00:16:43,840 --> 00:16:47,350
and empty object in this case evaluates
to true

270
00:16:47,350 --> 00:16:51,550
so let's see what happens when when the
user called

271
00:16:51,550 --> 00:16:54,710
underscore underscore Prato I'll joins
the chart

272
00:16:54,710 --> 00:16:57,750
so first we are checking whether

273
00:16:57,750 --> 00:17:01,180
there is a public key for this arm
sender

274
00:17:01,180 --> 00:17:04,949
form for this so user this one

275
00:17:04,949 --> 00:17:09,560
his public use Prato which evaluates to
true so I never jittery too so should

276
00:17:09,560 --> 00:17:10,490
secret with them

277
00:17:10,490 --> 00:17:14,400
but then again if that user again

278
00:17:14,400 --> 00:17:18,829
send something encrypt it to me a
checking whether I have a shirt secrets

279
00:17:18,829 --> 00:17:21,420
for your support of course I do because
it even though it's a true

280
00:17:21,420 --> 00:17:24,839
about the night studies pectin on that
object

281
00:17:24,839 --> 00:17:28,320
here and this one is actually to Guinea

282
00:17:28,320 --> 00:17:31,490
triggering an error because the empty
object

283
00:17:31,490 --> 00:17:34,920
does not have an age like property nor
does it hurt him

284
00:17:34,920 --> 00:17:38,040
MMSD property so what happened is that

285
00:17:38,040 --> 00:17:41,300
use a underscore underscore Prato

286
00:17:41,300 --> 00:17:44,560
broke the chart for everyone else just
stopped working

287
00:17:44,560 --> 00:17:49,900
it was a sort of denial of service
vulnerability in the

288
00:17:49,900 --> 00:17:54,240
are critical because of implementing
that in javascript but

289
00:17:54,240 --> 00:17:58,750
that's not really unique to JavaScript
magic properties are present in various

290
00:17:58,750 --> 00:18:02,270
languages all for example in Python

291
00:18:02,270 --> 00:18:06,290
by tom has a lot of for magic properties
'em

292
00:18:06,290 --> 00:18:09,620
held by you so object and for example

293
00:18:09,620 --> 00:18:12,630
I demonstrate its how to mmm

294
00:18:12,630 --> 00:18:15,790
killer application basically by art

295
00:18:15,790 --> 00:18:18,970
delayed deleting an attribute to by
using the

296
00:18:18,970 --> 00:18:22,220
are much property for price on
application you

297
00:18:22,220 --> 00:18:25,430
you still up 10 G so this is not
something you need to JavaScript

298
00:18:25,430 --> 00:18:26,020
actually

299
00:18:26,020 --> 00:18:29,570
but then again we have something called
silent their apps

300
00:18:29,570 --> 00:18:33,780
so what happens does could you try to
access an index of an irate

301
00:18:33,780 --> 00:18:37,440
outside of pounds who silently gets

302
00:18:37,440 --> 00:18:40,540
a undefined and return which is

303
00:18:40,540 --> 00:18:43,590
way better than see for example when you
just gets you know

304
00:18:43,590 --> 00:18:47,220
whatever was their I'll

305
00:18:47,220 --> 00:18:51,450
kid beautiful mobility let's see

306
00:18:51,450 --> 00:18:54,920
in a moment JavaScript also

307
00:18:54,920 --> 00:18:59,030
natively supports Unicode strings

308
00:18:59,030 --> 00:19:03,700
soul versa very often use

309
00:19:03,700 --> 00:19:06,760
arm function called string dot car coat
at

310
00:19:06,760 --> 00:19:12,340
and then index value which is use to
sort of like import function in multiple

311
00:19:12,340 --> 00:19:12,930
languages

312
00:19:12,930 --> 00:19:17,680
you'd get an integer value out of value
of the characters start at a certain of

313
00:19:17,680 --> 00:19:18,570
the Mystery Inc

314
00:19:18,570 --> 00:19:22,360
the problem is this is not something

315
00:19:22,360 --> 00:19:25,420
like in traditional it's something which
is or

316
00:19:25,420 --> 00:19:28,420
languages without you got some support
where

317
00:19:28,420 --> 00:19:31,450
the value would be from 02

318
00:19:31,450 --> 00:19:35,080
to find to 255 it's actually I'll

319
00:19:35,080 --> 00:19:38,720
value which can be much greater if the
original string question you got

320
00:19:38,720 --> 00:19:41,040
and

321
00:19:41,040 --> 00:19:44,150
those to features

322
00:19:44,150 --> 00:19:48,490
let's say of the JavaScript actually
leads to a very beautiful attack

323
00:19:48,490 --> 00:19:53,060
oh which I topped sixteen 16 stolen
attack it was some talk

324
00:19:53,060 --> 00:19:56,780
I'll discovered by Daniel brush brush
into her in

325
00:19:56,780 --> 00:20:01,390
the one of the JavaScript a yes
encryption library its

326
00:20:01,390 --> 00:20:04,390
it's pretty

327
00:20:04,390 --> 00:20:07,800
tricky to explain it but I will try to
do so so

328
00:20:07,800 --> 00:20:11,659
let's first look at how does so a yes
safer works

329
00:20:11,660 --> 00:20:14,760
it's a block cipher so it's only operate
sums

330
00:20:14,760 --> 00:20:17,880
basically 16 bytes of data the top at
the time

331
00:20:17,880 --> 00:20:21,750
and it's a multiple rounds cipher so it
performs

332
00:20:21,750 --> 00:20:26,140
a similar operations are a few times a
number of times

333
00:20:26,140 --> 00:20:31,120
so are usually you get the plaintext
which is 16 bytes

334
00:20:31,120 --> 00:20:34,320
then you all

335
00:20:34,320 --> 00:20:39,730
well you derive a key for proof order of
for the

336
00:20:39,730 --> 00:20:43,070
round of operations which is so also 16
bytes long

337
00:20:43,070 --> 00:20:47,370
India then you perform a few operations
I'll

338
00:20:47,370 --> 00:20:50,860
in a loop each time having that a
different drum key

339
00:20:50,860 --> 00:20:55,520
up light and then you perform some final
final rounds just misses one of the

340
00:20:55,520 --> 00:20:56,190
operations

341
00:20:56,190 --> 00:20:59,740
and then you get this over text of
course I'll similar happens

342
00:20:59,740 --> 00:21:03,220
speed similar things in reverse happens
when you the crypt

343
00:21:03,220 --> 00:21:06,900
arm the cipher text

344
00:21:06,900 --> 00:21:10,010
one of the important

345
00:21:10,010 --> 00:21:13,590
steps in daas encryption and decryption
process

346
00:21:13,590 --> 00:21:16,960
are in all this particular attack

347
00:21:16,960 --> 00:21:20,430
is the sub bites from a function I
essentially

348
00:21:20,430 --> 00:21:23,890
it's a very simple function so you have

349
00:21:23,890 --> 00:21:27,160
16 bytes and you look at them one bite
at the time

350
00:21:27,160 --> 00:21:30,570
so let's imagine that the first byte is
I'll

351
00:21:30,570 --> 00:21:34,120
19 first bite of the arm

352
00:21:34,120 --> 00:21:36,160
plain text block a

353
00:21:36,160 --> 00:21:40,910
you have a constant values of 256 values
and you just look

354
00:21:40,910 --> 00:21:44,790
for an offset which is 1 in nineteen
here

355
00:21:44,790 --> 00:21:48,800
and ft are and this particular offset

356
00:21:48,800 --> 00:21:51,860
the this is called the are

357
00:21:51,860 --> 00:21:55,080
S box on as books table a

358
00:21:55,080 --> 00:21:58,880
at this particular value the city for so
you replace the first

359
00:21:58,880 --> 00:22:02,000
bite with before and you repeat that
sixteen times

360
00:22:02,000 --> 00:22:06,540
on so let's see mean that the
implementation of

361
00:22:06,540 --> 00:22:10,010
long this particular laboring its

362
00:22:10,010 --> 00:22:13,380
very straightforward I the function is
called sup bites

363
00:22:13,380 --> 00:22:17,270
it accepts a state which is six invite

364
00:22:17,270 --> 00:22:21,130
and and as box which is an array of

365
00:22:21,130 --> 00:22:25,150
does 256 values its it's a constant for
the whole

366
00:22:25,150 --> 00:22:28,810
algorithm it doesn't depend on the key
%ah

367
00:22:28,810 --> 00:22:33,760
and if you actually try to encrypt
instead of

368
00:22:33,760 --> 00:22:37,930
are 16 characters long string

369
00:22:37,930 --> 00:22:43,430
using asked characters one of two
characters is so unique ok value

370
00:22:43,430 --> 00:22:46,910
mmm interstate

371
00:22:46,910 --> 00:22:52,130
you will actually get ago values or
elements of the state array

372
00:22:52,130 --> 00:22:55,990
would be more than 256 soul

373
00:22:55,990 --> 00:22:59,150
when its tries to find the value in the
icebox table

374
00:22:59,150 --> 00:23:02,220
are it was actually silently

375
00:23:02,220 --> 00:23:07,390
return undefined for every bite which
was seen you got ants what happens now

376
00:23:07,390 --> 00:23:10,880
is after after the all function you will
get

377
00:23:10,880 --> 00:23:14,450
the state of the cipher which is 60
undefined values

378
00:23:14,450 --> 00:23:17,830
so immediately sort of broke

379
00:23:17,830 --> 00:23:22,270
what element of the first round the
cipher Bart

380
00:23:22,270 --> 00:23:26,730
that's not all work like that happens
here so that you have another step

381
00:23:26,730 --> 00:23:30,020
a you stand up a yes rounds it's called

382
00:23:30,020 --> 00:23:33,770
week's column step and then again if you
get those

383
00:23:33,770 --> 00:23:37,090
poison 16 undefined values pastors as an
import

384
00:23:37,090 --> 00:23:40,140
bart's the mix column steps

385
00:23:40,140 --> 00:23:43,550
actually does a lot of XR operations

386
00:23:43,550 --> 00:23:46,230
hands in

387
00:23:46,230 --> 00:23:50,580
JavaScript if you undefined XR undefined

388
00:23:50,580 --> 00:23:54,200
a XO 0 XO 0 you get 0

389
00:23:54,200 --> 00:23:57,610
in return because why not ants

390
00:23:57,610 --> 00:24:01,640
what what's the effect of this after

391
00:24:01,640 --> 00:24:06,190
a just almost at the end of the first
round of the AES cipher

392
00:24:06,190 --> 00:24:10,340
no matter what you were trying to
encrypt as a plain text

393
00:24:10,340 --> 00:24:16,179
if you supply to use data supplied d
unique old values 16 bytes of Unicode or

394
00:24:16,179 --> 00:24:16,940
16

395
00:24:16,940 --> 00:24:20,020
are elements of you people to use its
characters

396
00:24:20,020 --> 00:24:23,790
you destroyed the whole states 260 bytes

397
00:24:23,790 --> 00:24:28,590
that its repeats a few times and you get
some cipher text

398
00:24:28,590 --> 00:24:32,950
part then again vote comes

399
00:24:32,950 --> 00:24:36,610
the decryption round and decryption
round does the

400
00:24:36,610 --> 00:24:40,010
same operations US so in the last round

401
00:24:40,010 --> 00:24:43,080
of tea decryption routine you get those

402
00:24:43,080 --> 00:24:47,210
a 16 0 bytes are at the output

403
00:24:47,210 --> 00:24:50,710
and then you'd just needs to have the
invests a bite

404
00:24:50,710 --> 00:24:54,100
which is the same function just being
fast so

405
00:24:54,100 --> 00:24:57,460
a different costume table also

406
00:24:57,460 --> 00:25:00,690
this constant able use like cost and for
the whole localism

407
00:25:00,690 --> 00:25:03,900
and then you'd just needs ira at around
key

408
00:25:03,900 --> 00:25:09,790
step the final one so the sub bites
function for the last round of

409
00:25:09,790 --> 00:25:10,840
decryption

410
00:25:10,840 --> 00:25:12,170
a

411
00:25:12,170 --> 00:25:15,710
gets 16 0 bytes so obviously

412
00:25:15,710 --> 00:25:20,280
for every of those bites your the only
returns the first value of the inverse

413
00:25:20,280 --> 00:25:24,360
as books table which is known because
it's it's a public it's it's not for not

414
00:25:24,360 --> 00:25:25,210
only sexually

415
00:25:25,210 --> 00:25:29,460
52 hexadecimal and after that

416
00:25:29,460 --> 00:25:32,960
those ads around key step which for this
particular

417
00:25:32,960 --> 00:25:36,900
in stance means that I'll it actually
axles

418
00:25:36,900 --> 00:25:39,990
a the the 16 bytes with are

419
00:25:39,990 --> 00:25:43,690
with DES key used for the encryption and
decryption

420
00:25:43,690 --> 00:25:46,860
so what actually happened or what

421
00:25:46,860 --> 00:25:51,700
attack is possible is that having an
excess

422
00:25:51,700 --> 00:25:54,950
to this I'll encryption and decryption
routine

423
00:25:54,950 --> 00:25:58,240
without knowing toukie you can

424
00:25:58,240 --> 00:26:01,440
encrypt 16 bytes a few Nicollet then

425
00:26:01,440 --> 00:26:07,070
get the result and try to take richter's
the same result with the same on on key

426
00:26:07,070 --> 00:26:10,180
and in dnt you would get are

427
00:26:10,180 --> 00:26:13,930
the actually yes key exhorts with 16

428
00:26:13,930 --> 00:26:17,380
I'll 0 20 X 52 bytes so

429
00:26:17,380 --> 00:26:20,860
this immediately gives you access to the
ER

430
00:26:20,860 --> 00:26:24,140
secret key use for this description
produce some

431
00:26:24,140 --> 00:26:28,350
encryption so yeah the I can occur even
called

432
00:26:28,350 --> 00:26:31,960
and corruption in this particular case
right so

433
00:26:31,960 --> 00:26:36,850
too subtle issues resulting in pretty
destroying attack like having access to

434
00:26:36,850 --> 00:26:38,720
the exception and decryption Oracle

435
00:26:38,720 --> 00:26:41,870
reveals the key which is really bad
crypto

436
00:26:41,870 --> 00:26:45,480
bodies is unique to JavaScript or I'll

437
00:26:45,480 --> 00:26:49,510
are dose language issues you need to
just get well

438
00:26:49,510 --> 00:26:53,480
not necessarily so in 2014

439
00:26:53,480 --> 00:26:56,760
so not that long time ago we had surf a
nose

440
00:26:56,760 --> 00:26:59,830
glue TLS so again written in C

441
00:26:59,830 --> 00:27:05,110
I'll vulnerability which was basically a
certificate validation by parks

442
00:27:05,110 --> 00:27:11,750
what happened so Owen the when the
attack a corrected

443
00:27:11,750 --> 00:27:13,740
up to the server

444
00:27:13,740 --> 00:27:16,870
or when Jetta course Moss

445
00:27:16,870 --> 00:27:20,450
to prevent many the middle attack so on
the TLS

446
00:27:20,450 --> 00:27:24,460
protocol usually divided the certificate
of the server

447
00:27:24,460 --> 00:27:28,620
ans usual you check you perform value
citations

448
00:27:28,620 --> 00:27:32,600
arm the CA value politician whether the
the certificate was issued by your

449
00:27:32,600 --> 00:27:35,850
trust its authority is one of the checks
so

450
00:27:35,850 --> 00:27:40,820
there was this function call to check if
CA and it was supposed to return

451
00:27:40,820 --> 00:27:45,880
as documented true or false if the
issuer is sure is a CIA or not

452
00:27:45,880 --> 00:27:48,940
so obviously if if it's false

453
00:27:48,940 --> 00:27:53,700
than it's a fake certificate because the
issuer should be a certificate authority

454
00:27:53,700 --> 00:27:56,809
hmm unfortunately doesn't return true or
false

455
00:27:56,809 --> 00:27:59,850
editors Int it's right there like two
lines

456
00:27:59,850 --> 00:28:02,929
later in a coat about

457
00:28:02,929 --> 00:28:06,410
CN which has no exceptions soul

458
00:28:06,410 --> 00:28:10,600
usually the error value such just say
negative numbers right

459
00:28:10,600 --> 00:28:15,270
that's how you reports to the calling
function but to us a little condition

460
00:28:15,270 --> 00:28:18,910
and actually dysfunction whether if the

461
00:28:18,910 --> 00:28:22,650
I'll validations to get validation was

462
00:28:22,650 --> 00:28:27,260
in value just returned -1 it's pretty
easy to trigger an error condition when

463
00:28:27,260 --> 00:28:29,100
you control all the input to the
function

464
00:28:29,100 --> 00:28:32,540
you just up something the certificate
which

465
00:28:32,540 --> 00:28:36,270
say all has some and in very touched by
you right

466
00:28:36,270 --> 00:28:40,840
I so this function to the collar would
return -1

467
00:28:40,840 --> 00:28:44,179
and it was only comp hurts to

468
00:28:44,179 --> 00:28:47,950
or the colour assumed thats

469
00:28:47,950 --> 00:28:52,420
it would only it will to return if it
returns zero value

470
00:28:52,420 --> 00:28:55,640
than it would abort the whole
verification

471
00:28:55,640 --> 00:28:59,340
so any value I'll other than 0

472
00:28:59,340 --> 00:29:02,910
would mean that deep I'll issue a sissy
eight so

473
00:29:02,910 --> 00:29:06,670
perform followed for a validation and
eventually accept the connection

474
00:29:06,670 --> 00:29:10,220
so the subtle issue like

475
00:29:10,220 --> 00:29:13,550
not having access to the I'll

476
00:29:13,550 --> 00:29:16,750
exceptions or a separate error object

477
00:29:16,750 --> 00:29:18,510
a

478
00:29:18,510 --> 00:29:20,990
food cost really serious will not be T

479
00:29:20,990 --> 00:29:24,590
in the library which is not true

480
00:29:24,590 --> 00:29:28,170
apparently written in JavaScript its use
by

481
00:29:28,170 --> 00:29:31,910
are a lot of projects and its was
assumed trust

482
00:29:31,910 --> 00:29:36,040
to sum up the language issues

483
00:29:36,040 --> 00:29:39,100
I agree just is a really tricky language

484
00:29:39,100 --> 00:29:42,870
parts the issues that you may encounter

485
00:29:42,870 --> 00:29:47,710
while like from using those cute
features

486
00:29:47,710 --> 00:29:51,040
are not three unique to JavaScript and
you can

487
00:29:51,040 --> 00:29:54,830
actually it's a good message you can
overcome all those issues a

488
00:29:54,830 --> 00:29:58,640
right now those several home

489
00:29:58,640 --> 00:30:02,430
attempts of enforcing the strictness of
the language like

490
00:30:02,430 --> 00:30:06,000
ECMAScript 5 strict mode for example
this also

491
00:30:06,000 --> 00:30:09,870
type enforcing not in the language
itself parts in the compilers for those

492
00:30:09,870 --> 00:30:10,860
languages for

493
00:30:10,860 --> 00:30:14,400
right right no verse quite a few
languages which compiled to JavaScript

494
00:30:14,400 --> 00:30:18,110
was also close a compiler which sort of
and force for you

495
00:30:18,110 --> 00:30:21,180
declaration of the property cents are
you know

496
00:30:21,180 --> 00:30:24,430
gives you all did Java ish goodness

497
00:30:24,430 --> 00:30:27,740
to projects within JavaScript and also

498
00:30:27,740 --> 00:30:32,990
the usual boring stuff which actually
prevents most lovable na BT so

499
00:30:32,990 --> 00:30:36,600
are all the development practices like
unit tests

500
00:30:36,600 --> 00:30:41,190
continuous integration code reviews all
the boring stuff

501
00:30:41,190 --> 00:30:45,090
I'll let's move to web platform issues

502
00:30:45,090 --> 00:30:49,570
so crypto called

503
00:30:49,570 --> 00:30:52,920
is not just implemented in JavaScript it
Rance

504
00:30:52,920 --> 00:30:55,970
somewhere so where does it run some
javascript

505
00:30:55,970 --> 00:30:59,390
usually is running a JavaScript engine
like v8

506
00:30:59,390 --> 00:31:03,340
spider monkey or whatever Iron Monkey
there were a few

507
00:31:03,340 --> 00:31:07,100
versions of that bus a few others I'll

508
00:31:07,100 --> 00:31:11,920
this just called Runciman execution
environment like for example

509
00:31:11,920 --> 00:31:15,490
in the brosser into the surrender
process or somewhere in the server when

510
00:31:15,490 --> 00:31:17,330
we have like node.js project right

511
00:31:17,330 --> 00:31:22,440
are to this cold was different APIs
available for example

512
00:31:22,440 --> 00:31:26,500
if you run just community also have the
DOM if you are

513
00:31:26,500 --> 00:31:30,300
run did Oscar in the mode and also you
have with crypto

514
00:31:30,300 --> 00:31:35,300
API a two-run lead in accession over the
boss extension in papi and what

515
00:31:35,300 --> 00:31:39,380
a.m. so on and so on also there are
multiple

516
00:31:39,380 --> 00:31:43,190
restrictions being placed upon the I'll
just ripped out right now

517
00:31:43,190 --> 00:31:47,130
for example in the process same origin
policy are you can also place

518
00:31:47,130 --> 00:31:51,450
content security policy you can place to
call the doctor is some talks

519
00:31:51,450 --> 00:31:55,660
over some extension security police and
what not and all those conditions

520
00:31:55,660 --> 00:31:58,830
affect how what what is the code to
allow to do

521
00:31:58,830 --> 00:32:02,960
ants how we should actually execute its
and

522
00:32:02,960 --> 00:32:06,360
those conditions do matter to crypto one

523
00:32:06,360 --> 00:32:09,980
really or obvious example the success so

524
00:32:09,980 --> 00:32:14,120
web is full of exercise and it will
probably be full of exercise for the

525
00:32:14,120 --> 00:32:15,370
next few years at least

526
00:32:15,370 --> 00:32:18,730
you can think of exercise obviously

527
00:32:18,730 --> 00:32:21,900
s a.m. equivalent of remote code
execution

528
00:32:21,900 --> 00:32:26,310
are in this particular context if you
implement at least

529
00:32:26,310 --> 00:32:29,430
the crib to lay bricks are of course

530
00:32:29,430 --> 00:32:33,810
exercise can bypass any sort of
guarantees to cryptographic told you can

531
00:32:33,810 --> 00:32:37,350
replace a random number generator is an
expert said the key

532
00:32:37,350 --> 00:32:41,530
complete as the public you too for the
attacker to accrue to actually a cryptic

533
00:32:41,530 --> 00:32:42,360
message to you

534
00:32:42,360 --> 00:32:46,460
but to the home intended recipient and
there are

535
00:32:46,460 --> 00:32:50,460
exercices even in the trip to Colt notes
on the ER

536
00:32:50,460 --> 00:32:53,530
interpretations that include a trip to
called parts

537
00:32:53,530 --> 00:32:56,700
India petitions that are the crib too
cold

538
00:32:56,700 --> 00:32:59,800
so what do we take a look when we took a
look at

539
00:32:59,800 --> 00:33:03,460
a may develop for example about this
supplication

540
00:33:03,460 --> 00:33:07,440
used for Inc you implementing OpenPGP

541
00:33:07,440 --> 00:33:10,900
in Gmail interface as a browser
extension so

542
00:33:10,900 --> 00:33:14,330
usually when you test those those kinda
applications

543
00:33:14,330 --> 00:33:17,560
was an obvious factors so well because
it's a public

544
00:33:17,560 --> 00:33:22,900
crypto OpenPGP are you know how to
encrypt a message to a victim because

545
00:33:22,900 --> 00:33:23,460
you have

546
00:33:23,460 --> 00:33:27,210
his public key but only he knows how to
the crib to trade

547
00:33:27,210 --> 00:33:32,440
so you submit an exorcist bailout

548
00:33:32,440 --> 00:33:36,120
in male body encrypt its to the public
you're the victim

549
00:33:36,120 --> 00:33:39,200
aunt into hope that the victim with the
cryptic message

550
00:33:39,200 --> 00:33:42,590
and is so did in line using don't mix as
a sink

551
00:33:42,590 --> 00:33:46,190
arm and you just look for the for the
result in obviously

552
00:33:46,190 --> 00:33:49,500
the result of most of the cold but we
have stake in a look

553
00:33:49,500 --> 00:33:53,340
Hindi in its early stages just popped up
and I liked

554
00:33:53,340 --> 00:33:56,360
so obviously

555
00:33:56,360 --> 00:33:59,530
you cannot trust I'll this cold

556
00:33:59,530 --> 00:34:03,590
to actually all protect your for example
key material

557
00:34:03,590 --> 00:34:07,120
are crib to cut her

558
00:34:07,120 --> 00:34:10,930
the same on our ability like in this
case well

559
00:34:10,930 --> 00:34:14,690
the vulnerability order film the actual

560
00:34:14,690 --> 00:34:18,070
sort of I'll de da mix a slow

561
00:34:18,070 --> 00:34:21,870
was in the user name so the most obvious
scenario you submit

562
00:34:21,870 --> 00:34:25,000
a there was a client-side validation so

563
00:34:25,000 --> 00:34:29,040
you could modified the client call to
love your crib to cart

564
00:34:29,040 --> 00:34:32,330
no change in use a name to a DOM
exorcist bailout

565
00:34:32,330 --> 00:34:35,440
and then join a chart basically

566
00:34:35,440 --> 00:34:39,270
boning everyone else apart this was Sri

567
00:34:39,270 --> 00:34:42,710
are disasters in this case because
script to cart at the time

568
00:34:42,710 --> 00:34:46,720
it was about 6 tension soul and

569
00:34:46,720 --> 00:34:49,940
any sort of cold the executed executed
in with those

570
00:34:49,940 --> 00:34:53,610
elevated privileges are in case of

571
00:34:53,610 --> 00:34:56,760
kroll the extensions were protected by

572
00:34:56,760 --> 00:35:00,330
content security policies so there was
not much that could be done

573
00:35:00,330 --> 00:35:03,910
the toughest execution would be
prevented you could only

574
00:35:03,910 --> 00:35:09,340
sort of spoofing user interface Bart for
thought for Firefox

575
00:35:09,340 --> 00:35:14,710
are it's sort of the end of the game if
you have an exercise in Firefox Firefox

576
00:35:14,710 --> 00:35:15,350
add-on

577
00:35:15,350 --> 00:35:18,590
you freedom up pretty much can is told
our

578
00:35:18,590 --> 00:35:22,710
a you have direct access to defy system
and what not

579
00:35:22,710 --> 00:35:26,250
so obviously exorcist

580
00:35:26,250 --> 00:35:30,550
East problem for just crypto Bart

581
00:35:30,550 --> 00:35:35,000
again is this something so super unique

582
00:35:35,000 --> 00:35:38,140
not really again who nobody from this
year

583
00:35:38,140 --> 00:35:41,940
I'll there's a lucia less obviously a
TLS

584
00:35:41,940 --> 00:35:46,350
implementation like sort of the
competition for open SSL

585
00:35:46,350 --> 00:35:51,410
use pretty wide I think in Debian soul

586
00:35:51,410 --> 00:35:55,260
they're worse a buffer overflow a in the

587
00:35:55,260 --> 00:35:59,410
passing of the long session or session
ID for for the client

588
00:35:59,410 --> 00:36:04,770
so obviously buffer overflow causing a
memory corruption and

589
00:36:04,770 --> 00:36:08,220
potentially execute include a long
difficult to execute arbitrary code

590
00:36:08,220 --> 00:36:11,510
its the same thing exercise in the

591
00:36:11,510 --> 00:36:15,440
a/c Firefox add-on is

592
00:36:15,440 --> 00:36:19,060
has the same consequences basically yes

593
00:36:19,060 --> 00:36:23,010
executing are the three companies to the
crib to coat arm

594
00:36:23,010 --> 00:36:28,670
let's look at another thing one of the

595
00:36:28,670 --> 00:36:31,680
often spotted on a beach in just 22

596
00:36:31,680 --> 00:36:34,680
trip to called results from poor
randomness so

597
00:36:34,680 --> 00:36:37,730
a lot of I'll applications libraries

598
00:36:37,730 --> 00:36:40,940
use the are a jolt MoEF

599
00:36:40,940 --> 00:36:43,940
that random function which is supposed
to return absence for the run the

600
00:36:43,940 --> 00:36:45,320
numbers unfortunately

601
00:36:45,320 --> 00:36:48,630
are Dolce are being generated

602
00:36:48,630 --> 00:36:53,070
bind by random number generator which is
not cryptographically safe

603
00:36:53,070 --> 00:36:59,230
are specifically you can recovered a
state of to appear on G and

604
00:36:59,230 --> 00:37:02,310
therefore derived the future I'll the
random numbers

605
00:37:02,310 --> 00:37:05,760
been generated by its even close to mine
there was some

606
00:37:05,760 --> 00:37:09,890
research by Ivan I'll on that

607
00:37:09,890 --> 00:37:14,960
subject instead modern JavaScript
engines

608
00:37:14,960 --> 00:37:19,670
have access to a cryptographically safe
a pa. a preg

609
00:37:19,670 --> 00:37:23,300
which is a usually accessed using crypto
gets run them by use

610
00:37:23,300 --> 00:37:26,610
function or in the case of notorious
crips that the problem but

611
00:37:26,610 --> 00:37:29,910
but we have access

612
00:37:29,910 --> 00:37:34,720
to us say strong random number generator
parts

613
00:37:34,720 --> 00:37:38,120
it's very often so is very easy and it's

614
00:37:38,120 --> 00:37:42,550
often heard the case that the library
out also the software outlaws

615
00:37:42,550 --> 00:37:45,130
just some relied on most random

616
00:37:45,130 --> 00:37:48,000
for example cryptogram are

617
00:37:48,000 --> 00:37:51,640
crypto got to use this this protocol
whatever that is

618
00:37:51,640 --> 00:37:54,920
I want to do with the detainees parts if
you look at the specification of the

619
00:37:54,920 --> 00:37:56,410
protocols it says that the

620
00:37:56,410 --> 00:38:01,600
SAT and error ID our numbers our
security critical and therefore must be

621
00:38:01,600 --> 00:38:03,569
both unpredictable and then repeating

622
00:38:03,570 --> 00:38:07,340
more from them give should know of such
guarantees

623
00:38:07,340 --> 00:38:10,730
and obviously what trip to cut it or
actually

624
00:38:10,730 --> 00:38:14,020
the bush library thats trip to cuts
included

625
00:38:14,020 --> 00:38:17,580
was just use to my front of function
I'll

626
00:38:17,580 --> 00:38:22,700
critical had another fun thing we're
from the Miss

627
00:38:22,700 --> 00:38:26,240
the this was actually even publicizes
the

628
00:38:26,240 --> 00:38:30,060
the crib to cart exploit a vulnerability
I'll

629
00:38:30,060 --> 00:38:34,430
so crooked wanted to generate

630
00:38:34,430 --> 00:38:38,090
key in order to generate a key usually
want to have

631
00:38:38,090 --> 00:38:41,630
like high entropy a lot of I love
entropy to

632
00:38:41,630 --> 00:38:45,120
pro prevent for from brute forcing
attacks

633
00:38:45,120 --> 00:38:48,300
so it used the are

634
00:38:48,300 --> 00:38:51,720
function called keep to cut dot random
streamed which is

635
00:38:51,720 --> 00:38:57,040
as you can see in the comment 64 random
bytes 64 on the buy seats

636
00:38:57,040 --> 00:39:01,720
future entropy party should take a look
at the implementation of dysfunction

637
00:39:01,720 --> 00:39:05,370
it actually are based on those
parameters which is

638
00:39:05,370 --> 00:39:12,020
a great idea a a weak base based on
those Cooper meters it returned 64

639
00:39:12,020 --> 00:39:15,120
characters up

640
00:39:15,120 --> 00:39:18,320
in this particular case numeric
character so

641
00:39:18,320 --> 00:39:21,980
029 as you can see you you have
something like

642
00:39:21,980 --> 00:39:25,060
a three bits of entropy per character

643
00:39:25,060 --> 00:39:29,520
multiplied by are 64 East way less than

644
00:39:29,520 --> 00:39:32,590
expect its for 502

645
00:39:32,590 --> 00:39:36,280
bites of entropy so this another source

646
00:39:36,280 --> 00:39:39,800
resulting from well developer

647
00:39:39,800 --> 00:39:43,400
not really on the store not really
having access to a

648
00:39:43,400 --> 00:39:48,050
Group random not or good secret
generation mechanism

649
00:39:48,050 --> 00:39:52,350
are allowed to I'll effectively brute
force

650
00:39:52,350 --> 00:39:56,960
mom runs on hope to a random string used
to use to

651
00:39:56,960 --> 00:40:02,310
I'll long for MCE again

652
00:40:02,310 --> 00:40:06,970
this is not something so super you need
to JavaScript this was

653
00:40:06,970 --> 00:40:12,180
are a few years ago it was called that
day be an open a society of school

654
00:40:12,180 --> 00:40:15,690
so the Debian

655
00:40:15,690 --> 00:40:20,030
package of the open to sell library are

656
00:40:20,030 --> 00:40:23,580
open SSL needs to generate a lot of
random numbers is good

657
00:40:23,580 --> 00:40:26,710
imagine ads it is so far your central
resources to

658
00:40:26,710 --> 00:40:29,990
are to like initialized the whole thing

659
00:40:29,990 --> 00:40:33,330
and one of the sources was uninitialized
memory

660
00:40:33,330 --> 00:40:37,620
I'll addresses so super cool but
unfortunately

661
00:40:37,620 --> 00:40:40,660
a didn't maintainer used vibrant

662
00:40:40,660 --> 00:40:45,830
which is like a IR tool to analyze I'll
for memory corruption issues

663
00:40:45,830 --> 00:40:49,540
and its founder did triggered a lot of
warnings like you trying to access the

664
00:40:49,540 --> 00:40:50,870
memory which you

665
00:40:50,870 --> 00:40:54,080
which is uninitialized it's probably
well

666
00:40:54,080 --> 00:40:57,480
something tricky so the Debian
maintainer I ask'd

667
00:40:57,480 --> 00:41:02,160
our mailing list about can I just
removed the lines of code a comment out

668
00:41:02,160 --> 00:41:03,450
the lines of code which

669
00:41:03,450 --> 00:41:06,630
feeding trippy source from the irony

670
00:41:06,630 --> 00:41:10,260
from the you are about memory and they
said

671
00:41:10,260 --> 00:41:15,260
I I don't see a point why not so he did
and actually the only entropy source

672
00:41:15,260 --> 00:41:18,400
for the random number generator was the
process ID which is

673
00:41:18,400 --> 00:41:21,690
like 32 byte is hard to beat

674
00:41:21,690 --> 00:41:24,340
sewing senator all for it two years

675
00:41:24,340 --> 00:41:28,370
if anyone generated SSH keys on Thursday
bill system

676
00:41:28,370 --> 00:41:32,350
it could only generate to 32k possible
keys

677
00:41:32,350 --> 00:41:39,350
so again trying to deal with random
numbers is tricky no matter link which

678
00:41:39,700 --> 00:41:42,840
or no matter the platform I'm

679
00:41:42,840 --> 00:41:46,120
timing so channels are so

680
00:41:46,120 --> 00:41:49,220
the thing is encrypt operations at least
some

681
00:41:49,220 --> 00:41:53,160
of the operations are shoot

682
00:41:53,160 --> 00:41:57,400
executing a call sometime in order to
the attacker not derive some information

683
00:41:57,400 --> 00:41:58,250
from the timing

684
00:41:58,250 --> 00:42:04,010
aunt unfortunately for JavaScript

685
00:42:04,010 --> 00:42:07,890
at least in the brosser the timing

686
00:42:07,890 --> 00:42:11,140
differences are really miserable because
the attacker is not

687
00:42:11,140 --> 00:42:15,810
on a separate machine he's usually in a
second stop in a brawl so for example

688
00:42:15,810 --> 00:42:19,020
which means he executes the cold in the
same CPU

689
00:42:19,020 --> 00:42:22,370
sometimes even in the same thread

690
00:42:22,370 --> 00:42:27,320
so his street clothes and his
measurements can be really precise

691
00:42:27,320 --> 00:42:30,940
armbar and bite that the attacks are
actually

692
00:42:30,940 --> 00:42:34,330
meet proxy because there's a lot of
remote timing attacks

693
00:42:34,330 --> 00:42:38,040
which are not practical because the are
amount of noise

694
00:42:38,040 --> 00:42:42,190
and the precision of D are amount of
those is

695
00:42:42,190 --> 00:42:46,110
use pretty big and the precision is too
low for the

696
00:42:46,110 --> 00:42:49,230
for Jessica to distinguish the actual a
difference

697
00:42:49,230 --> 00:42:53,080
unfortunately in Joss could we don't
have that's

698
00:42:53,080 --> 00:42:57,340
I'll home lucky situation are

699
00:42:57,340 --> 00:43:00,910
it is possible engines the most rate
it's already this year

700
00:43:00,910 --> 00:43:04,770
it is possible in some conditions to
brute-force

701
00:43:04,770 --> 00:43:08,290
and 18th the deets digit number in

702
00:43:08,290 --> 00:43:12,440
other frame cross-domain are in about
three minutes by

703
00:43:12,440 --> 00:43:15,980
simply measuring the time it takes to
complete certain operations

704
00:43:15,980 --> 00:43:18,150
soul

705
00:43:18,150 --> 00:43:22,320
Rd justifications trying to protect
against stunning so channels

706
00:43:22,320 --> 00:43:25,700
sometimes sometimes not this is a
classic example again

707
00:43:25,700 --> 00:43:29,020
from OpenPGP JS library are this is

708
00:43:29,020 --> 00:43:32,530
does solve function which tries to D
Colts

709
00:43:32,530 --> 00:43:35,860
the party in use for our a/c encryption

710
00:43:35,860 --> 00:43:39,020
a ants or

711
00:43:39,020 --> 00:43:44,440
the thing too far to say use decoding
kept putting

712
00:43:44,440 --> 00:43:49,520
or validating the departing is correct
should be done in a constant time

713
00:43:49,520 --> 00:43:52,610
because otherwise I it gives are

714
00:43:52,610 --> 00:43:55,800
I could you access to the Oracle which
is pretty powerful and can a

715
00:43:55,800 --> 00:44:00,280
using but this Oracle the attacker can
actually derived a plain text

716
00:44:00,280 --> 00:44:04,730
by just sending repeated group double
elite slightly modified coat

717
00:44:04,730 --> 00:44:08,050
are unfortunately in this particular
function

718
00:44:08,050 --> 00:44:11,780
are those branching covers in if

719
00:44:11,780 --> 00:44:15,340
arm here person is here

720
00:44:15,340 --> 00:44:20,550
verson a accusers in or operations so

721
00:44:20,550 --> 00:44:24,650
because of for how long most of the
languages work for would-be

722
00:44:24,650 --> 00:44:28,200
and how do you call it slick early exit
from the

723
00:44:28,200 --> 00:44:31,760
from the arm from the condition
situation

724
00:44:31,760 --> 00:44:35,780
was an early exit hugh explicit by using
return -1

725
00:44:35,780 --> 00:44:39,570
and the finally here those two usual

726
00:44:39,570 --> 00:44:43,950
I'll our usual exit from the function
this function is

727
00:44:43,950 --> 00:44:48,760
has way more the timing say China's what
should be

728
00:44:48,760 --> 00:44:54,100
a a lout arm ants as effective this

729
00:44:54,100 --> 00:44:58,740
this function the spring and the are
saying crypts in use by OpenPGP

730
00:44:58,740 --> 00:45:03,460
arm JS library wash vulnerable to
pressure behind a tackle a week to

731
00:45:03,460 --> 00:45:07,320
well for just occurred to the crib the
plaintext again

732
00:45:07,320 --> 00:45:10,770
this is not something unique to
JavaScript or what platform

733
00:45:10,770 --> 00:45:14,470
the exact same think was

734
00:45:14,470 --> 00:45:18,390
sounds this year was it this year yet
this year

735
00:45:18,390 --> 00:45:21,680
its is this thing I was on this year
into a double

736
00:45:21,680 --> 00:45:25,720
secure Sockets some extensions

737
00:45:25,720 --> 00:45:28,720
which is also a receipt just you seen in
a TLS not

738
00:45:28,720 --> 00:45:33,000
OpenPGP protocol um and

739
00:45:33,000 --> 00:45:37,460
I can tell you that writing constant
time coltie Street Ricky

740
00:45:37,460 --> 00:45:41,150
no matter the language no matter the
platform because the compiler optimizes

741
00:45:41,150 --> 00:45:41,720
things

742
00:45:41,720 --> 00:45:45,720
a lot soul if you're trying to write

743
00:45:45,720 --> 00:45:49,010
library or any sort of

744
00:45:49,010 --> 00:45:52,210
algorithm in a language the compiler

745
00:45:52,210 --> 00:45:55,760
a and you really tried not to make an
early exit

746
00:45:55,760 --> 00:46:00,100
to all avoid branching

747
00:46:00,100 --> 00:46:05,360
Decompiler while compiling too cold in
optimizing the cold really wants to call

748
00:46:05,360 --> 00:46:06,450
to execute pretty

749
00:46:06,450 --> 00:46:11,010
so it up to my sis some of your content
measures and it's really tricky actually

750
00:46:11,010 --> 00:46:11,350
to

751
00:46:11,350 --> 00:46:15,160
to create a for the trip so applications
cause something called

752
00:46:15,160 --> 00:46:18,660
so the 23 seen very much here but

753
00:46:18,660 --> 00:46:22,090
this is for example how go library

754
00:46:22,090 --> 00:46:25,140
or go crypto library a implements

755
00:46:25,140 --> 00:46:28,770
a function that which com purse one bite

756
00:46:28,770 --> 00:46:32,460
to another bite you've got some time
it's not just

757
00:46:32,460 --> 00:46:37,220
unequal thing its are it

758
00:46:37,220 --> 00:46:40,660
Excellus the byte values here it's

759
00:46:40,660 --> 00:46:44,670
it's an and equals RZ

760
00:46:44,670 --> 00:46:48,290
right shifted four bytes them and equals

761
00:46:48,290 --> 00:46:51,510
the right shifted to buy you to YouTube
its ants

762
00:46:51,510 --> 00:46:54,520
one beat again and returns whether T

763
00:46:54,520 --> 00:46:57,670
I resulting from element is in Greece

764
00:46:57,670 --> 00:47:01,930
0 not this is to prevent up to me all
optimizations by the compiler

765
00:47:01,930 --> 00:47:06,020
and by the processes as well so
sometimes if you need soup

766
00:47:06,020 --> 00:47:09,930
Kevin cossom call to you need to even
look at the implementation of the

767
00:47:09,930 --> 00:47:14,290
microprocessor cold and see that's there
are some differences that might

768
00:47:14,290 --> 00:47:17,640
trick you I'll so got

769
00:47:17,640 --> 00:47:21,390
a compiler tomorrow optimizations
whether it's being

770
00:47:21,390 --> 00:47:24,710
dont by Joss troops are engine

771
00:47:24,710 --> 00:47:27,800
or any other execution environment

772
00:47:27,800 --> 00:47:31,440
it's something that's you need to be
aware of and implement a critic wrote

773
00:47:31,440 --> 00:47:34,000
them

774
00:47:34,000 --> 00:47:37,780
there's a case of direct memory access
you'll probably remember how to eat

775
00:47:37,780 --> 00:47:38,410
right

776
00:47:38,410 --> 00:47:41,860
so it was in the crypt will there be /t
a

777
00:47:41,860 --> 00:47:46,290
it was just too stupid it's are local
bounced check

778
00:47:46,290 --> 00:47:49,630
Bart a the results

779
00:47:49,630 --> 00:47:53,330
were really important to crypto I mean
you hurts what

780
00:47:53,330 --> 00:47:57,440
your fault is a McRib to channel right
so this confidentiality

781
00:47:57,440 --> 00:48:01,350
bart's she didn't occur access 0 memory

782
00:48:01,350 --> 00:48:04,880
like before the decryption you could
just sucked requests parts

783
00:48:04,880 --> 00:48:08,410
some even claim that the keys could be
extracted

784
00:48:08,410 --> 00:48:12,320
are and this you can probably

785
00:48:12,320 --> 00:48:15,360
oh no like implementing

786
00:48:15,360 --> 00:48:19,750
or having call their abilities memory
corruption will not beat is pretty

787
00:48:19,750 --> 00:48:20,710
common in

788
00:48:20,710 --> 00:48:24,440
no see for example so are

789
00:48:24,440 --> 00:48:29,830
luckily JavaScript is memory safe link
which we don't have

790
00:48:29,830 --> 00:48:34,080
of memory corruption issues at all like
this no out of bounds

791
00:48:34,080 --> 00:48:38,660
sec no way the store was no buffer
overflow in jasper beads just as

792
00:48:38,660 --> 00:48:39,340
possible

793
00:48:39,340 --> 00:48:43,619
are oh really well not really 'em

794
00:48:43,619 --> 00:48:46,820
so double scripts like I said is not
turn up strengthening

795
00:48:46,820 --> 00:48:50,619
its run in the concrete implementation
over

796
00:48:50,619 --> 00:48:53,990
JS engine up for example in

797
00:48:53,990 --> 00:48:59,390
in in v8 engine used by you are chrome
answer Firefox has its own

798
00:48:59,390 --> 00:49:02,700
JavaScript engine even this year there
was some vulnerabilities

799
00:49:02,700 --> 00:49:07,109
in the implementation of the language
engine I don't for out of bounds

800
00:49:07,109 --> 00:49:09,230
threesome right into the JavaScript

801
00:49:09,230 --> 00:49:13,420
keep a week for arbitrary code execution
news this was huge disses

802
00:49:13,420 --> 00:49:16,800
very similar for their beauty was this
close to

803
00:49:16,800 --> 00:49:20,230
by Jia Hao to in 0 comments the movie
eights

804
00:49:20,230 --> 00:49:24,250
used by com 33 and if you take a look at
the

805
00:49:24,250 --> 00:49:27,410
part of the expert called it's very are

806
00:49:27,410 --> 00:49:31,510
fun you just screw to marry buffer

807
00:49:31,510 --> 00:49:34,800
over a small a memory I'll

808
00:49:34,800 --> 00:49:36,810
in

809
00:49:36,810 --> 00:49:38,880
buffer and then you

810
00:49:38,880 --> 00:49:42,930
define get a person just couldn't get us
and setters so you can really find them

811
00:49:42,930 --> 00:49:46,230
and you over rollet d bike length

812
00:49:46,230 --> 00:49:50,120
property of this are a buffer to return
a huge

813
00:49:50,120 --> 00:49:53,230
number so then you

814
00:49:53,230 --> 00:49:56,670
initial ice NRA pointing to the same
buffer

815
00:49:56,670 --> 00:50:00,710
are ends while

816
00:50:00,710 --> 00:50:03,740
its are located only a small amount the
memory

817
00:50:03,740 --> 00:50:08,390
a Wendy in a Colts like the
implementation of the view to lead which

818
00:50:08,390 --> 00:50:12,120
checked to see how much in my allowed to
view

819
00:50:12,120 --> 00:50:15,870
a memory haha how hold big of the jungle
to memory

820
00:50:15,870 --> 00:50:19,430
MIT a lot to beat he'd return this.value

821
00:50:19,430 --> 00:50:23,080
so you could writes and reads arbitrary
memory addresses

822
00:50:23,080 --> 00:50:26,790
ants you can imagine what's what
followed so

823
00:50:26,790 --> 00:50:30,510
yes let's just get this immersive
language is an old Oscar attention is

824
00:50:30,510 --> 00:50:30,860
not

825
00:50:30,860 --> 00:50:34,080
is written not JavaScript well there are
some cases

826
00:50:34,080 --> 00:50:38,310
when does Curtis run by telescope butts
inception

827
00:50:38,310 --> 00:50:42,670
the so /url when

828
00:50:42,670 --> 00:50:46,140
you implement just got too cold and you
really want to be secure

829
00:50:46,140 --> 00:50:49,170
you need to be aware that see browsers
themselves

830
00:50:49,170 --> 00:50:52,310
because that's the most common execution
environment for all

831
00:50:52,310 --> 00:50:57,530
JS but also themselves are also part of
your attack surface

832
00:50:57,530 --> 00:51:01,400
so need to a make sure that the
network's stock

833
00:51:01,400 --> 00:51:04,830
used by Deborah so cease I'll secure

834
00:51:04,830 --> 00:51:08,140
DHTML passer is secure

835
00:51:08,140 --> 00:51:11,470
good luck with that and the JavaScript
engine as well as secure

836
00:51:11,470 --> 00:51:14,470
and the problem is that any URL that

837
00:51:14,470 --> 00:51:18,910
your user visits can actually a trigger
some kind of vulnerability in

838
00:51:18,910 --> 00:51:23,670
those huge called basis is a unique

839
00:51:23,670 --> 00:51:27,730
to JavaScript or to a platform not
really so

840
00:51:27,730 --> 00:51:33,070
it's sort of like a mobile problem so
you cannot implement a cryptographic

841
00:51:33,070 --> 00:51:37,850
are securely you cannot trust in

842
00:51:37,850 --> 00:51:43,520
cryptographic programs run on a machine
with a smooch for small ways top

843
00:51:43,520 --> 00:51:45,220
its

844
00:51:45,220 --> 00:51:48,280
sort of like by definition he it's a
game over right

845
00:51:48,280 --> 00:51:54,420
to are if you carol has all the ability
cynthia tucker has expected to colonel

846
00:51:54,420 --> 00:51:58,359
it can pretty much do anything with
recruiter called its gon

847
00:51:58,359 --> 00:52:01,750
just a stupid example right should I can
just any

848
00:52:01,750 --> 00:52:05,340
process can just read your private key
from from SSH

849
00:52:05,340 --> 00:52:08,700
I'll a yet evenly ginkgo PG

850
00:52:08,700 --> 00:52:11,920
FAQ they said that's yes our code is
secure but

851
00:52:11,920 --> 00:52:14,990
actually there was a case when there are
some drug

852
00:52:14,990 --> 00:52:18,220
reinforcements tho investigation hands

853
00:52:18,220 --> 00:52:22,400
for just installed a keylogger and the
yeah

854
00:52:22,400 --> 00:52:26,020
very got access to the Prime to a
private key and were able to the crew to

855
00:52:26,020 --> 00:52:26,570
miss its

856
00:52:26,570 --> 00:52:29,710
so the problem is for J's crypto

857
00:52:29,710 --> 00:52:33,240
you need to understand that G are
brosser

858
00:52:33,240 --> 00:52:37,770
becomes the equivalent of your operating
system

859
00:52:37,770 --> 00:52:41,710
when you're thinking about to call
native crypto

860
00:52:41,710 --> 00:52:45,619
unfortunately verse one really important
difference here

861
00:52:45,619 --> 00:52:49,470
so the problem is that

862
00:52:49,470 --> 00:52:52,510
in usual operating systems you

863
00:52:52,510 --> 00:52:55,900
usually decide what to install you call

864
00:52:55,900 --> 00:53:00,330
download the software package are and
pockets

865
00:53:00,330 --> 00:53:04,400
sometimes compilat a first some some
look into rich

866
00:53:04,400 --> 00:53:09,140
the incredible integrity checking along
the way this package manager since

867
00:53:09,140 --> 00:53:12,480
all those other features that you rely
on to

868
00:53:12,480 --> 00:53:16,609
notes run untrusted called on a machine
that's not the case for the process

869
00:53:16,609 --> 00:53:20,230
visit you you visit a URL and its

870
00:53:20,230 --> 00:53:23,750
it's just too Giants drive-by downloads

871
00:53:23,750 --> 00:53:28,950
playground right immediately if you
think that your bra size 20 s

872
00:53:28,950 --> 00:53:32,570
it's dick with a hint of choline
chloride not be Charlie

873
00:53:32,570 --> 00:53:36,810
hmmm website or binary blob

874
00:53:36,810 --> 00:53:37,930
then

875
00:53:37,930 --> 00:53:41,490
extracting it contre compiling its end
and running its

876
00:53:41,490 --> 00:53:45,920
that's what you do like we all deserve
like hundreds of of resources

877
00:53:45,920 --> 00:53:50,050
daily thousands I wouldn't say I'm each
of dole's can

878
00:53:50,050 --> 00:53:53,470
exploitable no beating a brosser or all
the other

879
00:53:53,470 --> 00:53:57,280
I'll black PDF I'll reader and what's
not

880
00:53:57,280 --> 00:54:00,530
an old those would be disastrous to your
trip to coat

881
00:54:00,530 --> 00:54:04,510
so the only thing that the ball so dass

882
00:54:04,510 --> 00:54:08,670
when allowing dissident Trust Co to
execute is

883
00:54:08,670 --> 00:54:12,420
they provide you same origin policy like

884
00:54:12,420 --> 00:54:16,760
that's a really thin layer of isolating
your coat

885
00:54:16,760 --> 00:54:20,660
ants unfortunately roughly half of the
user's

886
00:54:20,660 --> 00:54:24,240
worldwide use the browser that's

887
00:54:24,240 --> 00:54:28,160
implements any kind of some books I mean
some books from the

888
00:54:28,160 --> 00:54:31,940
in the OS level like process level some
books or something are

889
00:54:31,940 --> 00:54:35,180
so the situation is somewhat difficult

890
00:54:35,180 --> 00:54:38,510
or tricky for JavaScript run

891
00:54:38,510 --> 00:54:42,180
in the process to all to trust in this
coat

892
00:54:42,180 --> 00:54:45,380
so is to skip to don't

893
00:54:45,380 --> 00:54:49,830
I mean you can create a perfect excess
Asprey

894
00:54:49,830 --> 00:54:53,140
the Super protect its a out deterred by
the

895
00:54:53,140 --> 00:54:58,160
hundreds of people Cole 2000 which is
constant time and you can rely on it

896
00:54:58,160 --> 00:55:02,160
y'all you trust for to serve as it
serves the coat is

897
00:55:02,160 --> 00:55:07,590
are never become is never compromise is
being maintained by the the best

898
00:55:07,590 --> 00:55:08,700
security people

899
00:55:08,700 --> 00:55:12,050
in the world of course the code the call
to serve its

900
00:55:12,050 --> 00:55:16,320
from HTTPS web site since no use the
certificate authority

901
00:55:16,320 --> 00:55:20,150
you certificate pinning wrist no way of
Minden Minden the feeling that the thing

902
00:55:20,150 --> 00:55:23,180
a but still

903
00:55:23,180 --> 00:55:26,210
your user just in a separate tub

904
00:55:26,210 --> 00:55:29,520
visits a page from some

905
00:55:29,520 --> 00:55:32,750
random adults movie sites and

906
00:55:32,750 --> 00:55:36,050
distributed gets boned by an exploiter
your

907
00:55:36,050 --> 00:55:41,840
yet again basically by positing so

908
00:55:41,840 --> 00:55:43,080
can we fix this

909
00:55:43,080 --> 00:55:46,750
well we can only go so far in javascript

910
00:55:46,750 --> 00:55:50,430
we can only go so far as providing the
extensions so

911
00:55:50,430 --> 00:55:54,610
up watsup also extension so it's not a
plugin

912
00:55:54,610 --> 00:55:58,640
it's not like Paul PDF reader or

913
00:55:58,640 --> 00:56:02,070
I'll slash or Java for that matter
fortunately bus

914
00:56:02,070 --> 00:56:05,240
not much trouble in the process now all

915
00:56:05,240 --> 00:56:09,300
so it's still a justification using

916
00:56:09,300 --> 00:56:12,400
reaching out for you I rendering on CSS

917
00:56:12,400 --> 00:56:16,820
I but it's running in sort of like a
separate environments in a privileged

918
00:56:16,820 --> 00:56:20,760
zone the chromosome usually it's it's
called chrome

919
00:56:20,760 --> 00:56:25,100
and you need to install it so are

920
00:56:25,100 --> 00:56:28,300
the brosser is sort of

921
00:56:28,300 --> 00:56:32,960
isolate by some more guarantees the dis-

922
00:56:32,960 --> 00:56:37,630
just the same origin policy are for
example in chrome

923
00:56:37,630 --> 00:56:40,890
the brosser extensions runs in a
separate

924
00:56:40,890 --> 00:56:45,070
also process so in order for the
attacker to execute arbitrary code

925
00:56:45,070 --> 00:56:48,670
a is he has to have to win a BCS the
first one

926
00:56:48,670 --> 00:56:51,770
which is up owning the brawl surrender a
process

927
00:56:51,770 --> 00:56:56,520
and then something which is called the
sandbox bypass of course there are

928
00:56:56,520 --> 00:57:00,660
exploit chain switch to get those to
vulnerability to to will now be dis but

929
00:57:00,660 --> 00:57:01,490
they are much

930
00:57:01,490 --> 00:57:05,200
rarer than just a single one as you can
imagine

931
00:57:05,200 --> 00:57:08,590
so by packaging

932
00:57:08,590 --> 00:57:11,930
your application across extension you

933
00:57:11,930 --> 00:57:15,690
1 gets much more isolation

934
00:57:15,690 --> 00:57:20,660
from other web sites for the users
visiting to not protected only by same

935
00:57:20,660 --> 00:57:21,579
region policy

936
00:57:21,579 --> 00:57:25,369
you sometimes get your waist level
protections

937
00:57:25,369 --> 00:57:28,900
was a much smaller attack surface
because

938
00:57:28,900 --> 00:57:32,210
by definition the website's cannot

939
00:57:32,210 --> 00:57:36,269
arbitrarily into rocked with the
extension whereas

940
00:57:36,269 --> 00:57:40,210
in the wet case any to any bells atop
can

941
00:57:40,210 --> 00:57:45,630
like send XHR excellent cheapy requests
to your website to your server and

942
00:57:45,630 --> 00:57:48,880
well outer its behavior so how um

943
00:57:48,880 --> 00:57:53,089
so this is something

944
00:57:53,089 --> 00:57:56,509
that we can implement it so telescoped
crypto coat in

945
00:57:56,509 --> 00:58:01,660
unfortunately it's not super perfect I
mean it is still possible to trigger

946
00:58:01,660 --> 00:58:03,920
exercise although beating the extensions

947
00:58:03,920 --> 00:58:08,509
are it's there it's working chrome right
now because of the arbitrary content

948
00:58:08,509 --> 00:58:09,989
security policy part

949
00:58:09,989 --> 00:58:13,980
are in Firefox its sort of like it's

950
00:58:13,980 --> 00:58:19,039
2008 still I'll also

951
00:58:19,039 --> 00:58:22,779
due process isolations what I talked to
to you about

952
00:58:22,779 --> 00:58:26,950
few minutes ago well it's sort of not
yet there are lots I mean

953
00:58:26,950 --> 00:58:30,380
if you run a huge amount of processes

954
00:58:30,380 --> 00:58:33,509
over the limit that kicks in and you

955
00:58:33,509 --> 00:58:36,720
eventually the Chrome extension will
show up the process with another comic

956
00:58:36,720 --> 00:58:37,150
such

957
00:58:37,150 --> 00:58:40,799
and they're always side channels

958
00:58:40,799 --> 00:58:44,999
to I'll exploit so

959
00:58:44,999 --> 00:58:50,599
the only recommendations I can give for
implementing critical the JavaScript is

960
00:58:50,599 --> 00:58:54,390
use some sort of isolated environment
never implement

961
00:58:54,390 --> 00:58:57,519
JavaScript ripped or just in a website
are soul

962
00:58:57,519 --> 00:59:01,410
usually it's some sort of service I'd
like notorious environments or

963
00:59:01,410 --> 00:59:06,089
those extensions use standards
development practices

964
00:59:06,089 --> 00:59:10,170
code review Jays compilers make sure you
never

965
00:59:10,170 --> 00:59:13,259
are affected by those weird features a
black which

966
00:59:13,259 --> 00:59:15,150
UCSB to

967
00:59:15,150 --> 00:59:18,820
mitigate my taxes will not be a tease in

968
00:59:18,820 --> 00:59:22,180
of course you can use car sometime time
in corporations good luck with that

969
00:59:22,180 --> 00:59:23,310
that's very tricky

970
00:59:23,310 --> 00:59:26,950
I'll its yeah you can use requests for
things to

971
00:59:26,950 --> 00:59:30,080
mitigate such an expectation because
most of the time

972
00:59:30,080 --> 00:59:34,150
expecting timing so tell us a quiet yet
occurred to said look huge amount of

973
00:59:34,150 --> 00:59:34,760
requests

974
00:59:34,760 --> 00:59:38,280
so you can throttle that summary

975
00:59:38,280 --> 00:59:41,330
just got to sway better than it used to
be I'll

976
00:59:41,330 --> 00:59:44,490
despite examples but I just saw on

977
00:59:44,490 --> 00:59:47,740
a if you want to

978
00:59:47,740 --> 00:59:52,690
understand district to you always need
to compare it to native trip to as well

979
00:59:52,690 --> 00:59:56,280
this but similar problems they're just
being named differently

980
00:59:56,280 --> 01:00:00,900
a chance if you were to compare to plus
from issue so much harder to solve the

981
01:00:00,900 --> 01:00:03,750
diesel for the web platform Indy called
execution

982
01:00:03,750 --> 01:00:07,090
playground but it provides is much
harder to solve and just

983
01:00:07,090 --> 01:00:10,400
tricks with it shifting for example

984
01:00:10,400 --> 01:00:13,400
and mile will always win so

985
01:00:13,400 --> 01:00:16,740
hold securities always the security 101
interests

986
01:00:16,740 --> 01:00:21,060
in that's case and by that I would like
to finish

987
01:00:21,060 --> 01:00:26,430
if you're any questions so you
capitalist all

988
01:00:26,430 --> 01:00:30,070
unfortunately we don't have time in nor
for for questions

989
01:00:30,070 --> 01:00:31,900
so please round of applause

