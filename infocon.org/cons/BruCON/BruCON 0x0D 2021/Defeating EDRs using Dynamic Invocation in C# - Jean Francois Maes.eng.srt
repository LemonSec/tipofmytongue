1
00:00:00,160 --> 00:00:02,720
so first of all before i start whacking

2
00:00:02,720 --> 00:00:05,440
away about edrs and c-sharp

3
00:00:05,440 --> 00:00:06,799
i wanted to say

4
00:00:06,799 --> 00:00:08,720
how good it actually is to see everyone

5
00:00:08,720 --> 00:00:11,360
in person again it's amazing so thank

6
00:00:11,360 --> 00:00:14,160
you all for actually coming here and

7
00:00:14,160 --> 00:00:16,160
staying until the very end i realize

8
00:00:16,160 --> 00:00:17,359
it's the last

9
00:00:17,359 --> 00:00:18,960
talk so

10
00:00:18,960 --> 00:00:20,960
i appreciate you all being here and to

11
00:00:20,960 --> 00:00:23,439
the organization well done

12
00:00:23,439 --> 00:00:26,000
i didn't see any problems so that's

13
00:00:26,000 --> 00:00:27,680
amazing

14
00:00:27,680 --> 00:00:29,679
so originally as you can see on the

15
00:00:29,679 --> 00:00:30,720
slide

16
00:00:30,720 --> 00:00:32,719
i was going to present about defeating

17
00:00:32,719 --> 00:00:34,559
edrs in c sharp

18
00:00:34,559 --> 00:00:36,320
but

19
00:00:36,320 --> 00:00:37,680
i actually

20
00:00:37,680 --> 00:00:40,160
socially engineered brucom

21
00:00:40,160 --> 00:00:41,120
why

22
00:00:41,120 --> 00:00:43,120
because that was indeed originally the

23
00:00:43,120 --> 00:00:45,280
plan and i'm still going to do it but

24
00:00:45,280 --> 00:00:47,120
it's not just going to be me talking

25
00:00:47,120 --> 00:00:50,399
about defeating edrs in c sharp

26
00:00:50,399 --> 00:00:53,920
the cfp for brucon was actually quite

27
00:00:53,920 --> 00:00:56,399
far from the conference itself

28
00:00:56,399 --> 00:00:59,600
and after the cfp closed and i got the

29
00:00:59,600 --> 00:01:01,280
news that i got accepted

30
00:01:01,280 --> 00:01:04,559
i saw a random tweet in my twitter feed

31
00:01:04,559 --> 00:01:07,360
from a guy named class virus or at least

32
00:01:07,360 --> 00:01:08,880
that's his handle

33
00:01:08,880 --> 00:01:11,119
and he tweeted blog posts plus two

34
00:01:11,119 --> 00:01:14,799
release and i saw edr bypass framework i

35
00:01:14,799 --> 00:01:16,799
saw dll manual mapping direct cisco

36
00:01:16,799 --> 00:01:19,759
invocation i was intrigued

37
00:01:19,759 --> 00:01:22,240
so i started reading his blog post and

38
00:01:22,240 --> 00:01:24,159
suddenly i see my own name i don't know

39
00:01:24,159 --> 00:01:25,840
if you see it it's not jean-francois

40
00:01:25,840 --> 00:01:27,759
it's just sean jean-mass because that's

41
00:01:27,759 --> 00:01:29,759
my twitter handle i saw myself

42
00:01:29,759 --> 00:01:31,680
referenced and i thought wow that's

43
00:01:31,680 --> 00:01:33,119
actually quite cool

44
00:01:33,119 --> 00:01:35,200
and i don't know if some of you know

45
00:01:35,200 --> 00:01:37,680
this but i actually did the defeating

46
00:01:37,680 --> 00:01:41,119
edrs in c sharp already at black hat

47
00:01:41,119 --> 00:01:42,799
so i guess that's where alessandro

48
00:01:42,799 --> 00:01:44,799
probably saw the talk but i'm going to

49
00:01:44,799 --> 00:01:45,920
let him

50
00:01:45,920 --> 00:01:48,320
do the whole story so alessandro you can

51
00:01:48,320 --> 00:01:50,640
go ahead yeah either

52
00:01:50,640 --> 00:01:52,079
can hear me yeah

53
00:01:52,079 --> 00:01:54,720
and yes i was contemporaneously doing a

54
00:01:54,720 --> 00:01:57,920
research on av next gen ab and edr

55
00:01:57,920 --> 00:02:00,000
bypass in user land

56
00:02:00,000 --> 00:02:01,600
bought in c-sharp

57
00:02:01,600 --> 00:02:03,840
native code and powershell

58
00:02:03,840 --> 00:02:07,360
and yes i saw the presentation from gms

59
00:02:07,360 --> 00:02:10,479
and i found it like very good and very

60
00:02:10,479 --> 00:02:12,080
well explained so

61
00:02:12,080 --> 00:02:15,680
i decided to just take part of it and

62
00:02:15,680 --> 00:02:18,160
design a new blog post and a new like

63
00:02:18,160 --> 00:02:20,879
white paper on my own tool which is a

64
00:02:20,879 --> 00:02:24,000
framework called inceptor which can be

65
00:02:24,000 --> 00:02:25,120
used to

66
00:02:25,120 --> 00:02:27,040
like automatically

67
00:02:27,040 --> 00:02:28,879
implement in an implant

68
00:02:28,879 --> 00:02:31,519
like well-known techniques to bypass edr

69
00:02:31,519 --> 00:02:33,599
and next-gen av

70
00:02:33,599 --> 00:02:35,840
and so i just tweeted this and i i mean

71
00:02:35,840 --> 00:02:39,680
i always get created by credit is due so

72
00:02:39,680 --> 00:02:41,920
thanks jen thanks john you're welcome

73
00:02:41,920 --> 00:02:45,920
yeah and we're here so that's the story

74
00:02:45,920 --> 00:02:48,480
right awesome so

75
00:02:48,480 --> 00:02:50,239
the cfp was already entered i couldn't

76
00:02:50,239 --> 00:02:52,239
change the name anymore and maybe that's

77
00:02:52,239 --> 00:02:53,920
a good thing because i actually came up

78
00:02:53,920 --> 00:02:56,400
with probably the longest

79
00:02:56,400 --> 00:02:58,879
doc name in the history of docs

80
00:02:58,879 --> 00:03:01,360
so it's now a trip down history lane on

81
00:03:01,360 --> 00:03:03,760
how to defeat edrs in user mode how to

82
00:03:03,760 --> 00:03:05,920
do it using the invoke and how these

83
00:03:05,920 --> 00:03:08,000
conference talks inspire others with a

84
00:03:08,000 --> 00:03:10,000
little bit of inception which is a notch

85
00:03:10,000 --> 00:03:12,560
to the inceptor framework so what are we

86
00:03:12,560 --> 00:03:14,239
actually going to talk about today well

87
00:03:14,239 --> 00:03:15,599
i decided to do something a little bit

88
00:03:15,599 --> 00:03:18,159
different and actually created a doodle

89
00:03:18,159 --> 00:03:19,440
for it

90
00:03:19,440 --> 00:03:21,440
has this ever happened to you you have

91
00:03:21,440 --> 00:03:23,680
been hired to do a penetration test and

92
00:03:23,680 --> 00:03:25,280
need to get a reverse shell or other

93
00:03:25,280 --> 00:03:26,879
payload on your target but the

94
00:03:26,879 --> 00:03:29,920
anti-virus or edr is in the way today is

95
00:03:29,920 --> 00:03:32,720
your lucky day in the next 45 to 60

96
00:03:32,720 --> 00:03:35,280
minutes john and alessandro will walk

97
00:03:35,280 --> 00:03:36,640
you through the history of cyber

98
00:03:36,640 --> 00:03:38,720
security and tell you how modern

99
00:03:38,720 --> 00:03:41,920
adversaries evade alerts in user land so

100
00:03:41,920 --> 00:03:46,359
sit back and enjoy the presentation

101
00:03:46,400 --> 00:03:48,310
so yeah there you go

102
00:03:48,310 --> 00:03:49,599
[Applause]

103
00:03:49,599 --> 00:03:51,840
has this actually a funny story i

104
00:03:51,840 --> 00:03:54,560
actually hired a uh a native american

105
00:03:54,560 --> 00:03:56,239
speaker for that because i wasn't really

106
00:03:56,239 --> 00:03:58,080
too sure about my accent or alessandro's

107
00:03:58,080 --> 00:03:59,120
accent

108
00:03:59,120 --> 00:04:01,200
so i kind of wonder

109
00:04:01,200 --> 00:04:02,959
what that guy must have felt like when

110
00:04:02,959 --> 00:04:05,040
he received the script

111
00:04:05,040 --> 00:04:07,760
uh but yeah he did it anyway he he got

112
00:04:07,760 --> 00:04:10,879
he got some he got a payday so it's nice

113
00:04:10,879 --> 00:04:14,000
so who are we well i'm jean-francois mas

114
00:04:14,000 --> 00:04:15,840
i work at trusted tech and i'm also a

115
00:04:15,840 --> 00:04:18,320
sand instructor i teach the sec security

116
00:04:18,320 --> 00:04:20,639
699 which is a purple team course so if

117
00:04:20,639 --> 00:04:22,639
you're interested in both offense and

118
00:04:22,639 --> 00:04:24,479
defense and you want to combine the two

119
00:04:24,479 --> 00:04:26,080
or be sure to check the course out if

120
00:04:26,080 --> 00:04:27,840
you want to

121
00:04:27,840 --> 00:04:29,680
as i said i am a send instructor but i

122
00:04:29,680 --> 00:04:31,040
also work at trusted tech which is an

123
00:04:31,040 --> 00:04:32,639
american company i was already

124
00:04:32,639 --> 00:04:35,280
referenced yesterday as well

125
00:04:35,280 --> 00:04:36,960
we are yeah a cyber security firm in

126
00:04:36,960 --> 00:04:39,120
america and i'm also a toolsmith

127
00:04:39,120 --> 00:04:42,000
i regularly drop tools on github if you

128
00:04:42,000 --> 00:04:44,080
know me on twitter i say that i publish

129
00:04:44,080 --> 00:04:45,680
barely functioning tools which is

130
00:04:45,680 --> 00:04:47,840
actually accurate

131
00:04:47,840 --> 00:04:50,160
but yeah there you go i kind of do do it

132
00:04:50,160 --> 00:04:51,360
because i want to give back to the

133
00:04:51,360 --> 00:04:52,800
community but also because i want to

134
00:04:52,800 --> 00:04:55,759
learn some of the things i release

135
00:04:55,759 --> 00:04:58,320
are things that obviously already have

136
00:04:58,320 --> 00:05:00,240
been implemented in better shapes or

137
00:05:00,240 --> 00:05:02,560
forms but i just do it to

138
00:05:02,560 --> 00:05:05,120
learn coding on myself

139
00:05:05,120 --> 00:05:08,400
so yeah that's me

140
00:05:08,800 --> 00:05:10,880
and these guys here this guy here is not

141
00:05:10,880 --> 00:05:13,280
me no it's me and um i'm alessandra

142
00:05:13,280 --> 00:05:16,639
magnosi i work for bsi now i'm a senior

143
00:05:16,639 --> 00:05:19,680
security consultant here um and

144
00:05:19,680 --> 00:05:22,080
except for that i'm working for cnac red

145
00:05:22,080 --> 00:05:23,520
team so i'm

146
00:05:23,520 --> 00:05:26,160
gunter mostly um and

147
00:05:26,160 --> 00:05:28,639
of course i also did i also do a lot of

148
00:05:28,639 --> 00:05:30,960
public work and when i say public work i

149
00:05:30,960 --> 00:05:32,800
mean i release a lot of tools that i

150
00:05:32,800 --> 00:05:35,600
mean i built tool to help my work

151
00:05:35,600 --> 00:05:37,840
and my daily job and also help me with

152
00:05:37,840 --> 00:05:38,880
bounties

153
00:05:38,880 --> 00:05:41,840
so i always want to just share because i

154
00:05:41,840 --> 00:05:43,280
think that only sharing there is

155
00:05:43,280 --> 00:05:45,360
improvement and this is the reason why i

156
00:05:45,360 --> 00:05:47,039
also published inceptor i want the

157
00:05:47,039 --> 00:05:49,280
community to the community to help me to

158
00:05:49,280 --> 00:05:50,240
make this

159
00:05:50,240 --> 00:05:53,600
things better and to be like

160
00:05:53,600 --> 00:05:55,759
to help the the work of my work and the

161
00:05:55,759 --> 00:05:57,680
hell and the work of everyone

162
00:05:57,680 --> 00:05:59,120
um so

163
00:05:59,120 --> 00:06:01,120
that's it that is my twitter handle and

164
00:06:01,120 --> 00:06:03,120
github you can go there you can i'm

165
00:06:03,120 --> 00:06:05,759
reachable i'm like very open so if you

166
00:06:05,759 --> 00:06:08,000
want to help please help actually this

167
00:06:08,000 --> 00:06:10,639
is most of i'm begging for it like

168
00:06:10,639 --> 00:06:13,440
yeah mostly yeah because uh of course

169
00:06:13,440 --> 00:06:16,000
yeah it would be it's cool if we can i

170
00:06:16,000 --> 00:06:17,759
mean i think that together we can

171
00:06:17,759 --> 00:06:21,120
achieve more so yeah i absolutely

172
00:06:21,120 --> 00:06:22,880
believe that is true as well

173
00:06:22,880 --> 00:06:25,280
and i've gotta admit i haven't seen all

174
00:06:25,280 --> 00:06:26,800
the talks so i don't know if anyone

175
00:06:26,800 --> 00:06:28,639
actually did this but i'm always

176
00:06:28,639 --> 00:06:30,880
interested when i attend conferences

177
00:06:30,880 --> 00:06:33,199
but usually i'm not the one on stage so

178
00:06:33,199 --> 00:06:35,360
now i have the power to actually do this

179
00:06:35,360 --> 00:06:38,000
um by the raise of hands who's actually

180
00:06:38,000 --> 00:06:40,160
more of like red oriented than a pen

181
00:06:40,160 --> 00:06:42,479
tester

182
00:06:43,440 --> 00:06:44,560
right

183
00:06:44,560 --> 00:06:46,720
cool so it's actually pretty mixed which

184
00:06:46,720 --> 00:06:48,880
is surprising because i always thought

185
00:06:48,880 --> 00:06:51,039
it was more of a like a red oriented

186
00:06:51,039 --> 00:06:52,560
crowd so it's always nice to see some

187
00:06:52,560 --> 00:06:53,759
some blue people as well in the crowd

188
00:06:53,759 --> 00:06:55,680
that's fantastic

189
00:06:55,680 --> 00:06:57,919
the agenda for today is uh well 10

190
00:06:57,919 --> 00:07:00,240
bullet points i'm not going to walk over

191
00:07:00,240 --> 00:07:03,120
them you can read for yourself

192
00:07:03,120 --> 00:07:05,360
i'm going to make a joke and i don't

193
00:07:05,360 --> 00:07:08,240
know if it's well it's getting live

194
00:07:08,240 --> 00:07:10,800
stream so i don't want to be rude or

195
00:07:10,800 --> 00:07:13,199
anything but in the edrs or malware

196
00:07:13,199 --> 00:07:15,039
section i always like to joke that edrs

197
00:07:15,039 --> 00:07:18,400
are hookers and don't mean like ladies

198
00:07:18,400 --> 00:07:20,160
just yeah you're gonna see in just a

199
00:07:20,160 --> 00:07:22,720
moment so if i offend anyone for that

200
00:07:22,720 --> 00:07:24,319
i'm sorry it's not intended to be

201
00:07:24,319 --> 00:07:26,240
offensive

202
00:07:26,240 --> 00:07:28,639
without further ado let's take a trip

203
00:07:28,639 --> 00:07:30,720
down memory lane and this is actually

204
00:07:30,720 --> 00:07:33,759
before i was actually a pen tester but i

205
00:07:33,759 --> 00:07:35,840
obviously heard the stories

206
00:07:35,840 --> 00:07:36,720
and

207
00:07:36,720 --> 00:07:38,880
it used to be back in the days when

208
00:07:38,880 --> 00:07:40,880
metasploit was rather new

209
00:07:40,880 --> 00:07:43,039
it was rather easy for a pen tester i'd

210
00:07:43,039 --> 00:07:45,440
say or at least easier in my opinion you

211
00:07:45,440 --> 00:07:48,080
could just generate your meter payload

212
00:07:48,080 --> 00:07:50,720
drop it on disk execute it and you'd get

213
00:07:50,720 --> 00:07:52,720
a reverse shell usually the antivirus

214
00:07:52,720 --> 00:07:54,639
wouldn't really complain shikaraganai

215
00:07:54,639 --> 00:07:57,039
was out and shikaraganai did his

216
00:07:57,039 --> 00:07:58,400
job quite well

217
00:07:58,400 --> 00:08:01,039
the edr didn't edr antivirus edrs

218
00:08:01,039 --> 00:08:02,720
weren't the thing back then didn't

219
00:08:02,720 --> 00:08:05,120
really catch that so life was all good

220
00:08:05,120 --> 00:08:06,560
and you had

221
00:08:06,560 --> 00:08:09,280
well-known exploits like eternal blue

222
00:08:09,280 --> 00:08:11,440
who were a big thing as well so life was

223
00:08:11,440 --> 00:08:13,759
actually pretty easy for for a pen

224
00:08:13,759 --> 00:08:15,120
tester back then

225
00:08:15,120 --> 00:08:17,039
or at least i like to think so as i said

226
00:08:17,039 --> 00:08:18,560
i don't have the battle experience to

227
00:08:18,560 --> 00:08:20,400
back that up but from the stories that i

228
00:08:20,400 --> 00:08:23,280
hear war veterans style like i think it

229
00:08:23,280 --> 00:08:25,759
they it was an easier job back then

230
00:08:25,759 --> 00:08:26,879
then

231
00:08:26,879 --> 00:08:29,520
microsoft kind of caught on a little bit

232
00:08:29,520 --> 00:08:31,440
they introduced mc

233
00:08:31,440 --> 00:08:33,519
and as you can see we were a kid now

234
00:08:33,519 --> 00:08:35,599
we're a teenager

235
00:08:35,599 --> 00:08:36,559
mc

236
00:08:36,559 --> 00:08:38,479
pretty good i'm not going to lie it's

237
00:08:38,479 --> 00:08:39,760
not bad

238
00:08:39,760 --> 00:08:41,760
it helps catch

239
00:08:41,760 --> 00:08:43,839
payloads it helps catch script kitties

240
00:08:43,839 --> 00:08:45,360
but obviously

241
00:08:45,360 --> 00:08:47,440
we probably all know that mz is not

242
00:08:47,440 --> 00:08:49,200
without his flaws it's just the dll

243
00:08:49,200 --> 00:08:50,880
living in user land you can manipulate

244
00:08:50,880 --> 00:08:52,320
it yourself

245
00:08:52,320 --> 00:08:54,560
if you can actually see the slides i

246
00:08:54,560 --> 00:08:56,240
don't know if it's readable or not but

247
00:08:56,240 --> 00:08:58,320
there are a ton of references to like

248
00:08:58,320 --> 00:09:01,360
brook on in there i called like

249
00:09:01,360 --> 00:09:03,040
hacksaw i have a string hex where it's

250
00:09:03,040 --> 00:09:06,480
just i dot dll and then i have a dot a

251
00:09:06,480 --> 00:09:09,519
plus ms plus hacksaw and as you can see

252
00:09:09,519 --> 00:09:12,080
i didn't really took a lot of effort to

253
00:09:12,080 --> 00:09:13,519
obfuscate this

254
00:09:13,519 --> 00:09:14,399
because

255
00:09:14,399 --> 00:09:16,480
normally if you try to bypass mc

256
00:09:16,480 --> 00:09:18,640
nowadays you see like a crazy obfuscated

257
00:09:18,640 --> 00:09:19,760
string

258
00:09:19,760 --> 00:09:20,720
but

259
00:09:20,720 --> 00:09:23,680
yeah the c-sharp implementation and just

260
00:09:23,680 --> 00:09:25,279
the interoperability between c-sharp and

261
00:09:25,279 --> 00:09:27,120
powershell is rather powerful which

262
00:09:27,120 --> 00:09:29,760
allows you to just do this which is

263
00:09:29,760 --> 00:09:32,160
very low effort i made this in like five

264
00:09:32,160 --> 00:09:33,440
minutes

265
00:09:33,440 --> 00:09:38,480
and yeah it bypasses mse so there you go

266
00:09:38,959 --> 00:09:40,480
now we are

267
00:09:40,480 --> 00:09:43,760
becoming a bit more in like now in the

268
00:09:43,760 --> 00:09:46,000
now we have edrs

269
00:09:46,000 --> 00:09:48,560
so that's already a big thing it's not

270
00:09:48,560 --> 00:09:50,880
as easy anymore to just drop a payload

271
00:09:50,880 --> 00:09:53,279
to disk and expect it to work you're

272
00:09:53,279 --> 00:09:55,040
probably going to get caught

273
00:09:55,040 --> 00:09:56,800
and it's not just edr's that we have to

274
00:09:56,800 --> 00:09:58,080
worry about from an offensive point of

275
00:09:58,080 --> 00:09:59,600
view it's also things like attack

276
00:09:59,600 --> 00:10:01,760
surface reduction app locker exploit

277
00:10:01,760 --> 00:10:03,440
guard edge

278
00:10:03,440 --> 00:10:05,839
but the reality of the matter actually

279
00:10:05,839 --> 00:10:09,279
is that even though those things exist

280
00:10:09,279 --> 00:10:11,200
if you all saw the compti playbook that

281
00:10:11,200 --> 00:10:12,800
was leaked like

282
00:10:12,800 --> 00:10:15,040
two or three months ago

283
00:10:15,040 --> 00:10:16,880
i don't know who thought that was

284
00:10:16,880 --> 00:10:19,839
advanced

285
00:10:19,920 --> 00:10:22,560
there you go no one raises his hands

286
00:10:22,560 --> 00:10:23,360
yeah

287
00:10:23,360 --> 00:10:26,640
very funny you dude no so yeah but the

288
00:10:26,640 --> 00:10:29,440
reality of the matter is conti makes

289
00:10:29,440 --> 00:10:31,920
targets they don't really care that they

290
00:10:31,920 --> 00:10:33,040
hit like

291
00:10:33,040 --> 00:10:36,880
1 000 companies and 99.9 are protected

292
00:10:36,880 --> 00:10:38,959
if they just hit one it's already a win

293
00:10:38,959 --> 00:10:40,880
for them because it's low effort they

294
00:10:40,880 --> 00:10:42,480
don't really have to do a lot they just

295
00:10:42,480 --> 00:10:43,440
write

296
00:10:43,440 --> 00:10:44,959
a playbook they give it to someone you

297
00:10:44,959 --> 00:10:46,560
don't even need to have computer

298
00:10:46,560 --> 00:10:48,480
experience it's literally just type

299
00:10:48,480 --> 00:10:50,399
these commands into a command line

300
00:10:50,399 --> 00:10:52,720
there you go you ransom a company

301
00:10:52,720 --> 00:10:54,000
so even though all these fancy

302
00:10:54,000 --> 00:10:56,079
technologies exist

303
00:10:56,079 --> 00:10:57,760
not a lot of companies actually

304
00:10:57,760 --> 00:11:00,079
implement these things properly

305
00:11:00,079 --> 00:11:02,560
unfortunately even if they have an edr

306
00:11:02,560 --> 00:11:03,600
available

307
00:11:03,600 --> 00:11:05,040
it's usually

308
00:11:05,040 --> 00:11:06,000
not

309
00:11:06,000 --> 00:11:07,839
as well tuned as you might expect it to

310
00:11:07,839 --> 00:11:10,079
be and it's still

311
00:11:10,079 --> 00:11:12,640
i'm not going to say easy but it's still

312
00:11:12,640 --> 00:11:14,880
possible for a tech-savvy person to

313
00:11:14,880 --> 00:11:17,519
bypass the defenses

314
00:11:17,519 --> 00:11:19,600
so in order to actually fully understand

315
00:11:19,600 --> 00:11:21,040
what we're going to talk about a little

316
00:11:21,040 --> 00:11:23,360
bit today you actually have to know

317
00:11:23,360 --> 00:11:27,040
about the win32 api a little bit so is

318
00:11:27,040 --> 00:11:29,200
there anyone in the audience who is not

319
00:11:29,200 --> 00:11:30,640
familiar i don't want to shame anyone by

320
00:11:30,640 --> 00:11:33,200
the way this is not like a bad thing

321
00:11:33,200 --> 00:11:34,640
is there anyone in the audience who's

322
00:11:34,640 --> 00:11:37,040
not familiar like at all with the win32

323
00:11:37,040 --> 00:11:39,439
api

324
00:11:40,839 --> 00:11:44,160
awesome so that saves me a lot of work

325
00:11:44,160 --> 00:11:46,720
as you then probably all know the win32

326
00:11:46,720 --> 00:11:49,760
api is basically well documented for the

327
00:11:49,760 --> 00:11:52,160
most part on microsoft documentation

328
00:11:52,160 --> 00:11:54,639
online you can find it everything online

329
00:11:54,639 --> 00:11:55,839
it has

330
00:11:55,839 --> 00:11:59,519
a notorious dll called ntdll.dll

331
00:11:59,519 --> 00:12:01,600
and that one actually forms the bridge

332
00:12:01,600 --> 00:12:03,839
between user land and kernel land so

333
00:12:03,839 --> 00:12:05,600
that does the translation between user

334
00:12:05,600 --> 00:12:07,279
modes and kernel mode

335
00:12:07,279 --> 00:12:09,200
why is this interesting especially from

336
00:12:09,200 --> 00:12:10,800
an offensive point of view

337
00:12:10,800 --> 00:12:11,680
well

338
00:12:11,680 --> 00:12:13,760
everything that you type that interacts

339
00:12:13,760 --> 00:12:15,839
with win32 api

340
00:12:15,839 --> 00:12:18,880
for example kernel 32 sleep because

341
00:12:18,880 --> 00:12:21,440
there was a lot of hype about doing like

342
00:12:21,440 --> 00:12:24,399
hooking sleep and doing the read execute

343
00:12:24,399 --> 00:12:25,519
read write

344
00:12:25,519 --> 00:12:27,360
kind of memory fluctuation if you saw

345
00:12:27,360 --> 00:12:29,360
the the nighthawk versus brute rachel

346
00:12:29,360 --> 00:12:31,600
twitter drama

347
00:12:31,600 --> 00:12:33,920
so yeah if you hook or if you call

348
00:12:33,920 --> 00:12:36,560
kernel 32 sleep you're actually going to

349
00:12:36,560 --> 00:12:39,600
call in the backend an ntdll function

350
00:12:39,600 --> 00:12:41,760
so from an edr perspective

351
00:12:41,760 --> 00:12:44,480
it's very interesting to hook ntdll

352
00:12:44,480 --> 00:12:46,800
because everything that you do every

353
00:12:46,800 --> 00:12:49,360
every i every api interacts at some

354
00:12:49,360 --> 00:12:50,160
point

355
00:12:50,160 --> 00:12:52,160
with ntd level dll which is interesting

356
00:12:52,160 --> 00:12:54,079
and we're going to go into that a little

357
00:12:54,079 --> 00:12:55,760
bit more

358
00:12:55,760 --> 00:12:56,800
so

359
00:12:56,800 --> 00:12:58,880
as you probably all know

360
00:12:58,880 --> 00:13:01,920
the win32 api is being leveraged by

361
00:13:01,920 --> 00:13:03,600
all applications on your windows

362
00:13:03,600 --> 00:13:04,880
operating system

363
00:13:04,880 --> 00:13:07,440
but also by shellcode because shellcode

364
00:13:07,440 --> 00:13:09,680
guess what is going to interact with the

365
00:13:09,680 --> 00:13:12,240
win32 api unless of course

366
00:13:12,240 --> 00:13:13,920
shout out to the guys from from

367
00:13:13,920 --> 00:13:16,079
yesterday that uh talked about pick your

368
00:13:16,079 --> 00:13:19,760
malware if you have a fully self-aware

369
00:13:19,760 --> 00:13:21,360
yeah shellcode then it's not going to do

370
00:13:21,360 --> 00:13:23,279
that but guess what most frameworks

371
00:13:23,279 --> 00:13:24,880
don't do that most frameworks rely on

372
00:13:24,880 --> 00:13:27,519
rent and redo apis one way or another so

373
00:13:27,519 --> 00:13:29,839
a common use case would be virtual

374
00:13:29,839 --> 00:13:31,680
unlock virtual protect write process

375
00:13:31,680 --> 00:13:33,519
memory create remote threats guess what

376
00:13:33,519 --> 00:13:35,279
you just did you injected shell codes

377
00:13:35,279 --> 00:13:37,680
into another process

378
00:13:37,680 --> 00:13:40,000
so triviatime

379
00:13:40,000 --> 00:13:41,519
what happens

380
00:13:41,519 --> 00:13:44,480
if you create a loader that is actually

381
00:13:44,480 --> 00:13:46,560
doing kernel 32 api calls instead of

382
00:13:46,560 --> 00:13:51,519
ntdll while an edr hooked ntdl.tll

383
00:13:51,519 --> 00:13:53,199
does anyone have any id it's an open

384
00:13:53,199 --> 00:13:55,519
question

385
00:13:57,440 --> 00:13:58,800
no one

386
00:13:58,800 --> 00:14:00,959
well you're gonna get detected because

387
00:14:00,959 --> 00:14:03,600
you called a higher level function

388
00:14:03,600 --> 00:14:06,480
and that is what you can see here i hope

389
00:14:06,480 --> 00:14:08,959
in the slide so there is a

390
00:14:08,959 --> 00:14:11,120
pretty nice tool if you don't know about

391
00:14:11,120 --> 00:14:12,720
it yet you should definitely check it

392
00:14:12,720 --> 00:14:14,720
out called api monitor

393
00:14:14,720 --> 00:14:16,399
and what it allows you to do

394
00:14:16,399 --> 00:14:18,480
is it allows you to actually attach to a

395
00:14:18,480 --> 00:14:20,639
process and see what that process is

396
00:14:20,639 --> 00:14:23,360
actually doing in terms of api calls

397
00:14:23,360 --> 00:14:25,360
hence the name api monitor

398
00:14:25,360 --> 00:14:26,720
so i just

399
00:14:26,720 --> 00:14:28,320
attached to a

400
00:14:28,320 --> 00:14:31,120
pretty random uh loader that i created

401
00:14:31,120 --> 00:14:33,440
you can see there it's demo basic loader

402
00:14:33,440 --> 00:14:35,920
and as you can see i call

403
00:14:35,920 --> 00:14:38,880
virtual a lock x that's the blue line

404
00:14:38,880 --> 00:14:40,800
and you can see a distinction being made

405
00:14:40,800 --> 00:14:43,199
from virtual alok x to nt allocate

406
00:14:43,199 --> 00:14:44,720
virtual memory

407
00:14:44,720 --> 00:14:46,240
guess what that means

408
00:14:46,240 --> 00:14:48,880
it means that virtual lock x in the back

409
00:14:48,880 --> 00:14:51,199
end is nothing more than a higher level

410
00:14:51,199 --> 00:14:54,240
wrapper for nt-allocated virtual memory

411
00:14:54,240 --> 00:14:57,760
so if i am now an edr and i inspect

412
00:14:57,760 --> 00:15:00,320
everything that is going through nt

413
00:15:00,320 --> 00:15:02,880
allocate virtual memory i am going to

414
00:15:02,880 --> 00:15:05,279
detect everything that is being called

415
00:15:05,279 --> 00:15:08,959
on a higher level so virtual lock x cos

416
00:15:08,959 --> 00:15:11,360
nt allocate virtual memory i'm going to

417
00:15:11,360 --> 00:15:13,760
see that there's also a nice read from

418
00:15:13,760 --> 00:15:15,920
roster mouse if you're interested about

419
00:15:15,920 --> 00:15:17,519
the invoke syscalls

420
00:15:17,519 --> 00:15:19,519
shout out to roster is actually a friend

421
00:15:19,519 --> 00:15:21,920
of mine and i learned really a lot of

422
00:15:21,920 --> 00:15:25,120
things from rastamouse

423
00:15:25,120 --> 00:15:27,680
so you might have seen in the short

424
00:15:27,680 --> 00:15:29,360
introduction there when we were talking

425
00:15:29,360 --> 00:15:30,880
about the agenda

426
00:15:30,880 --> 00:15:31,920
that i

427
00:15:31,920 --> 00:15:34,320
like to call edr's malware and why do i

428
00:15:34,320 --> 00:15:38,399
like to call edr's malware because edrs

429
00:15:38,399 --> 00:15:40,639
behave like malware they inject their

430
00:15:40,639 --> 00:15:43,759
dll into your process usually through a

431
00:15:43,759 --> 00:15:46,000
kernel driver that is actually listening

432
00:15:46,000 --> 00:15:48,000
for new processes being created if it

433
00:15:48,000 --> 00:15:49,680
sees a new process of interest it's

434
00:15:49,680 --> 00:15:51,839
going to inject its dll it's going to

435
00:15:51,839 --> 00:15:55,120
place hooks on interesting api calls and

436
00:15:55,120 --> 00:15:56,800
then it's just going to wait for you to

437
00:15:56,800 --> 00:15:58,240
interact with that

438
00:15:58,240 --> 00:16:00,320
now what does that look like

439
00:16:00,320 --> 00:16:02,800
here you can actually see i hope

440
00:16:02,800 --> 00:16:04,800
you can actually see that

441
00:16:04,800 --> 00:16:07,519
it's a wind dbg i basically unassembled

442
00:16:07,519 --> 00:16:10,079
ntdl anti-allocate virtual memory you

443
00:16:10,079 --> 00:16:12,160
can see on the top that it's actually

444
00:16:12,160 --> 00:16:14,160
the example of what anti-allocate

445
00:16:14,160 --> 00:16:16,720
virtual memory normally looks like so

446
00:16:16,720 --> 00:16:18,880
that is the assembly codes of

447
00:16:18,880 --> 00:16:20,720
anti-allocated filterable memory as it

448
00:16:20,720 --> 00:16:24,160
should be and then on the back like on

449
00:16:24,160 --> 00:16:26,320
on the bottom you actually see the same

450
00:16:26,320 --> 00:16:29,600
exact api call but now it's hooked and i

451
00:16:29,600 --> 00:16:32,720
hope you can all see that here at the

452
00:16:32,720 --> 00:16:33,759
top

453
00:16:33,759 --> 00:16:35,839
you get like a move instruction you get

454
00:16:35,839 --> 00:16:38,480
like another move instruction but here

455
00:16:38,480 --> 00:16:40,959
it immediately starts with a jump to

456
00:16:40,959 --> 00:16:42,720
another memory address and if you would

457
00:16:42,720 --> 00:16:44,639
follow that memory address guess where

458
00:16:44,639 --> 00:16:47,279
you'll end up

459
00:16:48,880 --> 00:16:51,519
into the module of ddr

460
00:16:51,519 --> 00:16:53,759
right

461
00:16:54,800 --> 00:16:56,800
so how

462
00:16:56,800 --> 00:16:59,759
can we identify as an adversary

463
00:16:59,759 --> 00:17:02,800
what api calls are hooked well i

464
00:17:02,800 --> 00:17:04,880
actually already told it in the previous

465
00:17:04,880 --> 00:17:08,240
slides we kind of know how nt functions

466
00:17:08,240 --> 00:17:09,280
look like

467
00:17:09,280 --> 00:17:11,199
they all have the same

468
00:17:11,199 --> 00:17:12,880
functionality they all have the same

469
00:17:12,880 --> 00:17:14,559
assembly codes i'm going to go back a

470
00:17:14,559 --> 00:17:15,679
slide

471
00:17:15,679 --> 00:17:17,280
everything here

472
00:17:17,280 --> 00:17:20,079
everything here is the same for every nt

473
00:17:20,079 --> 00:17:22,720
function except this little number here

474
00:17:22,720 --> 00:17:25,199
the 18 hex in this case this is the

475
00:17:25,199 --> 00:17:26,559
syscall number

476
00:17:26,559 --> 00:17:28,720
and that cisco number is interesting

477
00:17:28,720 --> 00:17:30,880
because that is actually

478
00:17:30,880 --> 00:17:32,640
what is being

479
00:17:32,640 --> 00:17:34,640
called in the back end so that is

480
00:17:34,640 --> 00:17:36,240
actually the function the nt function it

481
00:17:36,240 --> 00:17:38,640
represents and it changes every

482
00:17:38,640 --> 00:17:40,400
operating system version

483
00:17:40,400 --> 00:17:42,880
so in this specific case 18 h might be

484
00:17:42,880 --> 00:17:45,440
true for windows 10 but it doesn't mean

485
00:17:45,440 --> 00:17:48,559
that it's true for windows server 2016.

486
00:17:48,559 --> 00:17:49,679
so

487
00:17:49,679 --> 00:17:52,400
you as an adversary ideally would have

488
00:17:52,400 --> 00:17:55,280
to find a way to dynamically find the

489
00:17:55,280 --> 00:17:56,880
syscall number on the operating system

490
00:17:56,880 --> 00:17:59,919
you try to target because if you don't

491
00:17:59,919 --> 00:18:02,559
and you just send a random payload and

492
00:18:02,559 --> 00:18:05,039
for some benign reason your customer

493
00:18:05,039 --> 00:18:07,120
still runs windows xp

494
00:18:07,120 --> 00:18:10,320
and you coded your stuff for windows 10

495
00:18:10,320 --> 00:18:11,679
it's not going to be the same syscall

496
00:18:11,679 --> 00:18:13,520
number so your malware isn't going to do

497
00:18:13,520 --> 00:18:16,000
what you expect it to do

498
00:18:16,000 --> 00:18:17,360
so if you now

499
00:18:17,360 --> 00:18:19,120
know that edrs

500
00:18:19,120 --> 00:18:21,200
hook certain nd functions and you know

501
00:18:21,200 --> 00:18:23,039
that the first assembly instruction will

502
00:18:23,039 --> 00:18:25,360
be a jump to their memory address you

503
00:18:25,360 --> 00:18:27,280
can actually start walking the exported

504
00:18:27,280 --> 00:18:29,840
function table from ntdltl and just

505
00:18:29,840 --> 00:18:31,360
compare everything

506
00:18:31,360 --> 00:18:34,000
in bytecodes and see oh this function

507
00:18:34,000 --> 00:18:37,039
has a jump that's not normal and mr

508
00:18:37,039 --> 00:18:38,720
unicoder i don't know if some of you are

509
00:18:38,720 --> 00:18:40,240
familiar with them

510
00:18:40,240 --> 00:18:43,120
actually created a github repository

511
00:18:43,120 --> 00:18:44,799
and he crowdsourced to work he says look

512
00:18:44,799 --> 00:18:47,200
i created tool run this if you have an

513
00:18:47,200 --> 00:18:49,520
edr in your environment run this send me

514
00:18:49,520 --> 00:18:52,080
the output and he basically has output

515
00:18:52,080 --> 00:18:54,320
for a lot of the edrs out there

516
00:18:54,320 --> 00:18:56,960
on the right side you'll actually see uh

517
00:18:56,960 --> 00:18:59,679
the extracts of crowdstrike so these are

518
00:18:59,679 --> 00:19:02,080
all the nt functions and zw functions

519
00:19:02,080 --> 00:19:04,000
which are kernel functions

520
00:19:04,000 --> 00:19:06,799
that are being hooked by crowdstrike

521
00:19:06,799 --> 00:19:09,679
but as you can see that list is not

522
00:19:09,679 --> 00:19:10,880
that long

523
00:19:10,880 --> 00:19:12,559
right

524
00:19:12,559 --> 00:19:13,280
so

525
00:19:13,280 --> 00:19:15,679
how can you as an adversary

526
00:19:15,679 --> 00:19:18,080
bypass this well there are actually two

527
00:19:18,080 --> 00:19:18,960
ways

528
00:19:18,960 --> 00:19:20,400
well there are more but i'm going to

529
00:19:20,400 --> 00:19:22,720
talk about two specific ways manual

530
00:19:22,720 --> 00:19:25,360
mapping is the first one and how does

531
00:19:25,360 --> 00:19:27,600
normal malware behave if it's not being

532
00:19:27,600 --> 00:19:29,120
manually mapped

533
00:19:29,120 --> 00:19:31,280
you see here this is malware you see

534
00:19:31,280 --> 00:19:32,960
here this is an edr

535
00:19:32,960 --> 00:19:35,520
my malware is trying to call something

536
00:19:35,520 --> 00:19:37,679
from this dll let's say that this is ntd

537
00:19:37,679 --> 00:19:40,160
allowable dll i want to call nt allocate

538
00:19:40,160 --> 00:19:42,640
virtual memory x well guess what i'm

539
00:19:42,640 --> 00:19:45,600
calling this but my edr hooked it so

540
00:19:45,600 --> 00:19:47,679
what's going to happen my edr is going

541
00:19:47,679 --> 00:19:49,760
to see that i'm trying to do something

542
00:19:49,760 --> 00:19:51,840
it's going to make a decision

543
00:19:51,840 --> 00:19:54,080
machine learning and it's going to

544
00:19:54,080 --> 00:19:56,400
either say oh yeah this is fine i'm

545
00:19:56,400 --> 00:19:58,559
going to allow it or oh this looks kind

546
00:19:58,559 --> 00:20:00,480
of shady i'm going to throw an alert by

547
00:20:00,480 --> 00:20:01,440
the way

548
00:20:01,440 --> 00:20:03,039
throwing an alert doesn't necessarily

549
00:20:03,039 --> 00:20:04,720
mean that you're going to get blocked

550
00:20:04,720 --> 00:20:07,120
that's a another discussion

551
00:20:07,120 --> 00:20:10,080
so yeah that is how it normally goes now

552
00:20:10,080 --> 00:20:12,000
if you manually map

553
00:20:12,000 --> 00:20:13,440
you're actually going to do something

554
00:20:13,440 --> 00:20:14,880
completely different what you're now

555
00:20:14,880 --> 00:20:16,640
going to do is

556
00:20:16,640 --> 00:20:19,039
you are still malware but you are now

557
00:20:19,039 --> 00:20:20,640
going to say look

558
00:20:20,640 --> 00:20:23,200
i know that i already have ntdll.tl in

559
00:20:23,200 --> 00:20:25,120
my virtual address space because every

560
00:20:25,120 --> 00:20:27,039
process has that as it needs to interact

561
00:20:27,039 --> 00:20:28,880
with the kernel at some point

562
00:20:28,880 --> 00:20:30,640
but i don't really want to use that one

563
00:20:30,640 --> 00:20:32,799
so can you please load me another one

564
00:20:32,799 --> 00:20:34,240
and that's exactly what you're going to

565
00:20:34,240 --> 00:20:36,240
do you're going to take a new copy from

566
00:20:36,240 --> 00:20:39,200
disk of ntdl.tlo you're going to map it

567
00:20:39,200 --> 00:20:41,760
in your memory but now there's a problem

568
00:20:41,760 --> 00:20:44,640
because well you manually mapped it so

569
00:20:44,640 --> 00:20:46,640
that means that you can just get the

570
00:20:46,640 --> 00:20:48,240
function addresses like it normally

571
00:20:48,240 --> 00:20:50,400
would because your windows loader didn't

572
00:20:50,400 --> 00:20:52,320
expect you to do this you manually did

573
00:20:52,320 --> 00:20:54,559
this so you as an adversary would have

574
00:20:54,559 --> 00:20:56,400
to come up with a way to actually

575
00:20:56,400 --> 00:20:58,640
resolve all the function calls in memory

576
00:20:58,640 --> 00:21:00,159
by yourself so you need to take care of

577
00:21:00,159 --> 00:21:02,320
all the allocations all the offsets all

578
00:21:02,320 --> 00:21:03,760
the whole shebang

579
00:21:03,760 --> 00:21:05,440
so that could be quite tedious if you

580
00:21:05,440 --> 00:21:07,039
don't really know what you're doing

581
00:21:07,039 --> 00:21:09,760
and unfortunately most adversaries don't

582
00:21:09,760 --> 00:21:11,280
really know what they're doing

583
00:21:11,280 --> 00:21:13,918
so there you go

584
00:21:14,240 --> 00:21:15,760
as you can see here

585
00:21:15,760 --> 00:21:17,919
i'm basically manual mapping i'm going

586
00:21:17,919 --> 00:21:18,960
to

587
00:21:18,960 --> 00:21:21,280
call anti-locate virtual memory x which

588
00:21:21,280 --> 00:21:23,120
exists in my memory

589
00:21:23,120 --> 00:21:25,440
manually mapped into the level dll

590
00:21:25,440 --> 00:21:28,679
my edr has a hook on the real ntd

591
00:21:28,679 --> 00:21:31,200
ntdl.dll but obviously i'm not calling

592
00:21:31,200 --> 00:21:32,880
that one i'm calling the manually mapped

593
00:21:32,880 --> 00:21:33,679
one

594
00:21:33,679 --> 00:21:35,679
because that one isn't hooked

595
00:21:35,679 --> 00:21:37,919
the edr won't see it

596
00:21:37,919 --> 00:21:39,840
so if that is a little bit chinese for

597
00:21:39,840 --> 00:21:42,559
you don't worry i actually um

598
00:21:42,559 --> 00:21:44,320
dumbed it down a little bit that doesn't

599
00:21:44,320 --> 00:21:45,679
necessarily mean that you're dumb

600
00:21:45,679 --> 00:21:47,440
definitely not i just wanted to make it

601
00:21:47,440 --> 00:21:48,720
more obvious

602
00:21:48,720 --> 00:21:50,559
so here you can actually see what's

603
00:21:50,559 --> 00:21:52,960
going on for a syscall

604
00:21:52,960 --> 00:21:56,000
we're now going to talk about syscalls

605
00:21:56,000 --> 00:21:58,480
if i have a function called hooked

606
00:21:58,480 --> 00:22:00,559
function and the function does something

607
00:22:00,559 --> 00:22:03,360
like just print i do cool stuff

608
00:22:03,360 --> 00:22:05,280
and i as an adversary know what that

609
00:22:05,280 --> 00:22:07,280
function looks like well guess what i

610
00:22:07,280 --> 00:22:09,760
can do i can recreate that function

611
00:22:09,760 --> 00:22:11,360
so i basically

612
00:22:11,360 --> 00:22:13,919
created a new function called clone of

613
00:22:13,919 --> 00:22:15,200
hooked function

614
00:22:15,200 --> 00:22:17,120
it's the same prototype it also just

615
00:22:17,120 --> 00:22:19,440
writes to line i do cool stuff

616
00:22:19,440 --> 00:22:21,679
so in my main function if i now call the

617
00:22:21,679 --> 00:22:23,520
hook function it's going to say i do

618
00:22:23,520 --> 00:22:26,480
cool stuff but if i call the clone of

619
00:22:26,480 --> 00:22:28,799
hooked function it's also going to say i

620
00:22:28,799 --> 00:22:30,799
do cool stuff so in the end the

621
00:22:30,799 --> 00:22:32,720
functionality is the same but the api

622
00:22:32,720 --> 00:22:35,360
call is different

623
00:22:36,559 --> 00:22:37,440
so

624
00:22:37,440 --> 00:22:40,400
edr's or malware user land hook bypasses

625
00:22:40,400 --> 00:22:42,159
what can you do so we already talked

626
00:22:42,159 --> 00:22:44,159
about manual mapping i

627
00:22:44,159 --> 00:22:46,080
briefly talked about syscalls but i'm

628
00:22:46,080 --> 00:22:47,440
going to do it a little bit more in

629
00:22:47,440 --> 00:22:49,760
depth in just a few moments but

630
00:22:49,760 --> 00:22:51,520
obviously the first thing you should

631
00:22:51,520 --> 00:22:54,000
think about is trying to just don't be

632
00:22:54,000 --> 00:22:55,200
malicious

633
00:22:55,200 --> 00:22:56,559
if you're not flagged as malicious you

634
00:22:56,559 --> 00:22:58,559
don't have to do anything fancy you're

635
00:22:58,559 --> 00:23:01,360
just going to get get allowed so this is

636
00:23:01,360 --> 00:23:04,159
a bit of field testing experience but

637
00:23:04,159 --> 00:23:07,520
you will learn from red team operations

638
00:23:07,520 --> 00:23:09,600
that some processes

639
00:23:09,600 --> 00:23:11,840
are more lenient in

640
00:23:11,840 --> 00:23:14,240
edr's eyes than others so if you inject

641
00:23:14,240 --> 00:23:16,080
in specific processes

642
00:23:16,080 --> 00:23:18,720
and you do for example an else dump in

643
00:23:18,720 --> 00:23:21,280
that process chances are

644
00:23:21,280 --> 00:23:23,280
you're fine but if you would do the same

645
00:23:23,280 --> 00:23:24,240
thing

646
00:23:24,240 --> 00:23:26,320
injecting into another process

647
00:23:26,320 --> 00:23:28,400
chances are you might get caught

648
00:23:28,400 --> 00:23:30,000
so it's a bit of a cat and mouse game

649
00:23:30,000 --> 00:23:32,159
and you kind of need to

650
00:23:32,159 --> 00:23:33,760
know a bit of the insights or do

651
00:23:33,760 --> 00:23:36,080
experiments against the edr it's not

652
00:23:36,080 --> 00:23:38,960
always possible because edr vendors

653
00:23:38,960 --> 00:23:41,120
guess what they don't really like

654
00:23:41,120 --> 00:23:43,200
offensive security people to

655
00:23:43,200 --> 00:23:45,440
well scrutinize them so if you try to

656
00:23:45,440 --> 00:23:47,679
purchase a license for an edr vendor

657
00:23:47,679 --> 00:23:49,600
guess what they're gonna say

658
00:23:49,600 --> 00:23:50,640
nope

659
00:23:50,640 --> 00:23:51,840
but it's actually the same thing with

660
00:23:51,840 --> 00:23:53,679
cobalt strike so if you're a blue team

661
00:23:53,679 --> 00:23:55,440
guy and you try to get a cobalt strike

662
00:23:55,440 --> 00:23:57,039
license guess what global strike is

663
00:23:57,039 --> 00:23:58,559
going to say

664
00:23:58,559 --> 00:23:59,679
nope

665
00:23:59,679 --> 00:24:01,039
so yeah it's a bit of a cat and mouse

666
00:24:01,039 --> 00:24:03,360
game everyone kind of tries to

667
00:24:03,360 --> 00:24:05,200
protect their own intellectual property

668
00:24:05,200 --> 00:24:06,559
a little bit

669
00:24:06,559 --> 00:24:08,480
but i'm getting a bit off topic off

670
00:24:08,480 --> 00:24:11,520
topic so of course this is the best way

671
00:24:11,520 --> 00:24:13,440
to bypass the edr just don't get flagged

672
00:24:13,440 --> 00:24:14,960
as malicious in the first place it's

673
00:24:14,960 --> 00:24:16,480
also the hardest one to pull off in my

674
00:24:16,480 --> 00:24:17,520
opinion

675
00:24:17,520 --> 00:24:20,400
you could unhook the hooks so you saw mr

676
00:24:20,400 --> 00:24:23,039
unicoder's github page you know exactly

677
00:24:23,039 --> 00:24:25,200
which functions are hooks well you know

678
00:24:25,200 --> 00:24:27,360
how an nt function looks like if you

679
00:24:27,360 --> 00:24:29,039
just look for the syscall number on that

680
00:24:29,039 --> 00:24:31,520
system you could actually unhook the

681
00:24:31,520 --> 00:24:32,720
hook

682
00:24:32,720 --> 00:24:33,520
but

683
00:24:33,520 --> 00:24:35,200
what if you unhook the hook and you

684
00:24:35,200 --> 00:24:36,799
actually

685
00:24:36,799 --> 00:24:38,720
call an api

686
00:24:38,720 --> 00:24:40,240
that is also hooked

687
00:24:40,240 --> 00:24:42,240
then you have hook exception and then

688
00:24:42,240 --> 00:24:43,520
you're going to start fighting against

689
00:24:43,520 --> 00:24:45,440
an edr of course you could use syscalls

690
00:24:45,440 --> 00:24:48,480
to do the unhook and then it will work

691
00:24:48,480 --> 00:24:50,320
then manual mapping what is the downside

692
00:24:50,320 --> 00:24:52,480
of manual mapping you manually map

693
00:24:52,480 --> 00:24:54,640
something in memory so it leaves in

694
00:24:54,640 --> 00:24:57,279
memory artifacts it kind of makes sense

695
00:24:57,279 --> 00:24:59,520
syscalls well the downside of syscalls

696
00:24:59,520 --> 00:25:01,600
is cisco numbers changed based on

697
00:25:01,600 --> 00:25:03,440
operating system versions i already

698
00:25:03,440 --> 00:25:05,279
mentioned that and i see that all

699
00:25:05,279 --> 00:25:07,600
officer in the crowd as well so if you

700
00:25:07,600 --> 00:25:09,600
follow olaf for fridays for

701
00:25:09,600 --> 00:25:11,840
example you know that syscalls can get

702
00:25:11,840 --> 00:25:13,760
detected as well by integrity checking

703
00:25:13,760 --> 00:25:15,679
for example so it doesn't necessarily

704
00:25:15,679 --> 00:25:17,120
mean that if you're using cisco's you

705
00:25:17,120 --> 00:25:18,159
are certainly

706
00:25:18,159 --> 00:25:20,320
flying under the radar of an edr because

707
00:25:20,320 --> 00:25:22,640
an er could check whether or not you're

708
00:25:22,640 --> 00:25:23,919
actually calling

709
00:25:23,919 --> 00:25:27,120
the cisco from ntdl or not

710
00:25:27,120 --> 00:25:30,480
and actually three days ago i think now

711
00:25:30,480 --> 00:25:33,120
it's october 6th so four days ago i

712
00:25:33,120 --> 00:25:35,039
don't know i i forgot what date we are

713
00:25:35,039 --> 00:25:36,080
today

714
00:25:36,080 --> 00:25:37,679
not that long ago let's just call it

715
00:25:37,679 --> 00:25:39,919
that i saw an interesting tweet

716
00:25:39,919 --> 00:25:41,679
by uh

717
00:25:41,679 --> 00:25:44,159
and he actually summarized

718
00:25:44,159 --> 00:25:45,279
exactly

719
00:25:45,279 --> 00:25:48,240
what i think are the edr bypasses of

720
00:25:48,240 --> 00:25:49,360
today

721
00:25:49,360 --> 00:25:52,080
so you have edr detection logic bypasses

722
00:25:52,080 --> 00:25:53,919
that's number three over there that is

723
00:25:53,919 --> 00:25:55,679
actually what we're kind of talking

724
00:25:55,679 --> 00:25:57,919
about today so using cisco's using

725
00:25:57,919 --> 00:26:00,640
manually mapping to try and avoid

726
00:26:00,640 --> 00:26:02,400
detection because while the detection

727
00:26:02,400 --> 00:26:05,120
logic isn't there yet most edr's don't

728
00:26:05,120 --> 00:26:07,679
really have functionality built in to

729
00:26:07,679 --> 00:26:10,240
know if your syscall originated from in

730
00:26:10,240 --> 00:26:12,159
from like ntdl or if you're doing it

731
00:26:12,159 --> 00:26:15,120
manually it's just not there yet why

732
00:26:15,120 --> 00:26:18,080
i don't know edrs just don't think it's

733
00:26:18,080 --> 00:26:20,240
that important i guess

734
00:26:20,240 --> 00:26:22,559
then you have edr configuration bypasses

735
00:26:22,559 --> 00:26:24,880
this of course depends entirely

736
00:26:24,880 --> 00:26:26,559
on your target

737
00:26:26,559 --> 00:26:28,320
some people have edr's in very

738
00:26:28,320 --> 00:26:29,840
restrictive modes

739
00:26:29,840 --> 00:26:31,120
others

740
00:26:31,120 --> 00:26:32,880
not so much

741
00:26:32,880 --> 00:26:35,039
and then the final one i can't really

742
00:26:35,039 --> 00:26:36,960
read it as much but i think that's the

743
00:26:36,960 --> 00:26:39,520
the technological capability bypass so

744
00:26:39,520 --> 00:26:41,440
that basically means that

745
00:26:41,440 --> 00:26:43,600
if you know which functions are hooked

746
00:26:43,600 --> 00:26:46,080
and you can achieve the same thing

747
00:26:46,080 --> 00:26:48,640
by calling functions that do basically

748
00:26:48,640 --> 00:26:50,640
the same thing but are not hooked you're

749
00:26:50,640 --> 00:26:52,559
also going to fly under the radar

750
00:26:52,559 --> 00:26:54,480
so with that being said i'm now going to

751
00:26:54,480 --> 00:26:56,480
give the words to my esteemed colleague

752
00:26:56,480 --> 00:26:58,559
alessandro to talk about inceptor and

753
00:26:58,559 --> 00:27:01,279
his research

754
00:27:02,080 --> 00:27:04,159
i need to switch this on

755
00:27:04,159 --> 00:27:06,960
okay right so

756
00:27:06,960 --> 00:27:07,679
so

757
00:27:07,679 --> 00:27:09,840
what i always want to bring into

758
00:27:09,840 --> 00:27:12,640
attention is that we need to understand

759
00:27:12,640 --> 00:27:15,039
that if we want to bypass a target like

760
00:27:15,039 --> 00:27:17,440
an idiot we cannot really forget the

761
00:27:17,440 --> 00:27:20,399
basics right so uh we can do a lot of

762
00:27:20,399 --> 00:27:23,520
things like using c skills to bypass the

763
00:27:23,520 --> 00:27:25,360
edr or user land looking we can use

764
00:27:25,360 --> 00:27:27,520
manual mapping or other cool techniques

765
00:27:27,520 --> 00:27:30,159
but then if we have a payload we contain

766
00:27:30,159 --> 00:27:31,760
like known signatures we're not going

767
00:27:31,760 --> 00:27:33,760
anywhere because the av will stop us

768
00:27:33,760 --> 00:27:35,919
anyway so let's think about what we have

769
00:27:35,919 --> 00:27:37,600
what we want to do every time during an

770
00:27:37,600 --> 00:27:39,200
assessment what we want to do is to

771
00:27:39,200 --> 00:27:43,039
switch from an external attacker just

772
00:27:43,039 --> 00:27:44,559
come up with some payload delivery

773
00:27:44,559 --> 00:27:46,720
mechanism then bypass the

774
00:27:46,720 --> 00:27:49,679
bypass dav and we are going to like

775
00:27:49,679 --> 00:27:51,360
using evasion techniques to bypass the

776
00:27:51,360 --> 00:27:53,760
av then we want to bypass some sort of

777
00:27:53,760 --> 00:27:56,399
vdr detection user land hooking and

778
00:27:56,399 --> 00:28:00,399
other edr techniques to like you we want

779
00:28:00,399 --> 00:28:02,559
we don't want our payload to leave data

780
00:28:02,559 --> 00:28:04,480
that is then collected and send us

781
00:28:04,480 --> 00:28:06,960
telemetry to an idiot and then we want

782
00:28:06,960 --> 00:28:09,200
also to bypass opsec certain way in

783
00:28:09,200 --> 00:28:11,520
certain way just to like blend in with

784
00:28:11,520 --> 00:28:12,720
the target

785
00:28:12,720 --> 00:28:13,679
and just

786
00:28:13,679 --> 00:28:17,279
like behave as a com as a legitimate as

787
00:28:17,279 --> 00:28:19,679
a legitimate executable would do in the

788
00:28:19,679 --> 00:28:21,840
system and after that we are established

789
00:28:21,840 --> 00:28:24,960
right so this is what we want to do so

790
00:28:24,960 --> 00:28:26,480
we don't forget the basis let's start

791
00:28:26,480 --> 00:28:27,919
with the av so the first thing we want

792
00:28:27,919 --> 00:28:30,000
to bypass is the ib what is an av what

793
00:28:30,000 --> 00:28:32,559
is what is what kind of uh what what

794
00:28:32,559 --> 00:28:34,640
kind of appliance it is well nav is

795
00:28:34,640 --> 00:28:36,399
quite a complex application and it's

796
00:28:36,399 --> 00:28:38,000
based on four

797
00:28:38,000 --> 00:28:40,240
and four parts we can say

798
00:28:40,240 --> 00:28:43,120
uh nab needs to have the compressors

799
00:28:43,120 --> 00:28:45,120
which are the ones that if i want to

800
00:28:45,120 --> 00:28:47,200
analyze anything i need to analyze it as

801
00:28:47,200 --> 00:28:49,760
a like a byte stream let's say

802
00:28:49,760 --> 00:28:52,640
so if i want to analyze it completely uh

803
00:28:52,640 --> 00:28:55,279
and i receive a zip file an archive file

804
00:28:55,279 --> 00:28:56,640
something like that i need to some i

805
00:28:56,640 --> 00:28:59,039
need somehow to be able to decompress it

806
00:28:59,039 --> 00:29:00,880
in order to actually analyze it for

807
00:29:00,880 --> 00:29:03,840
known signatures or for other stuff

808
00:29:03,840 --> 00:29:05,200
unpackers

809
00:29:05,200 --> 00:29:07,600
unpackers is another like an av needs to

810
00:29:07,600 --> 00:29:09,279
be provided with a lot of unpackers

811
00:29:09,279 --> 00:29:11,200
because if a tool has been provided with

812
00:29:11,200 --> 00:29:15,120
say upx or known parker well if the av

813
00:29:15,120 --> 00:29:17,840
is not able to unpack it well is not

814
00:29:17,840 --> 00:29:20,480
able even to like scan it for known

815
00:29:20,480 --> 00:29:24,399
signatures or other indicators of and

816
00:29:24,399 --> 00:29:26,799
like i'm okay i'm actually seeing a

817
00:29:26,799 --> 00:29:28,960
malicious binary here

818
00:29:28,960 --> 00:29:30,720
the third important thing is the

819
00:29:30,720 --> 00:29:32,559
scanners i mean scanners we all know

820
00:29:32,559 --> 00:29:34,480
scanners because scanners are actually

821
00:29:34,480 --> 00:29:36,960
what we use of what we know that we're

822
00:29:36,960 --> 00:29:39,840
using in an antivirus appliance and

823
00:29:39,840 --> 00:29:42,000
scanners are mostly divided in two like

824
00:29:42,000 --> 00:29:44,159
there are on-demand scanners of course

825
00:29:44,159 --> 00:29:46,159
and which are what we see when we have a

826
00:29:46,159 --> 00:29:47,679
file on the file system and we just

827
00:29:47,679 --> 00:29:50,080
launch a scan against it and we have in

828
00:29:50,080 --> 00:29:51,760
memory scanners in memory scanners is

829
00:29:51,760 --> 00:29:53,279
what microlib was actually presenting

830
00:29:53,279 --> 00:29:56,480
like msi msi is the like the the

831
00:29:56,480 --> 00:29:58,399
interface that provide the you that use

832
00:29:58,399 --> 00:29:59,919
like provide the antivirus the

833
00:29:59,919 --> 00:30:02,240
capability of scanning something when

834
00:30:02,240 --> 00:30:04,000
it's loaded into memory it's what is

835
00:30:04,000 --> 00:30:05,039
that it what

836
00:30:05,039 --> 00:30:07,840
it's exactly what happens when like i'm

837
00:30:07,840 --> 00:30:09,919
trying to load the binary using

838
00:30:09,919 --> 00:30:13,279
assembly load in c sharp for example

839
00:30:13,279 --> 00:30:15,679
and then the last bit which is important

840
00:30:15,679 --> 00:30:18,399
as well is the sandbox um the sandbox is

841
00:30:18,399 --> 00:30:20,799
actually an environment that the

842
00:30:20,799 --> 00:30:22,720
antivirus creates and it's you can

843
00:30:22,720 --> 00:30:25,600
imagine less like a little vm and the

844
00:30:25,600 --> 00:30:28,000
binaries just run into this sandbox and

845
00:30:28,000 --> 00:30:30,480
if it behaves like a malicious binary

846
00:30:30,480 --> 00:30:33,440
well it gets flagged so we need some we

847
00:30:33,440 --> 00:30:35,279
we need to come up with a strategy to

848
00:30:35,279 --> 00:30:36,720
bypass at least

849
00:30:36,720 --> 00:30:39,600
the scanners or the sandbox of course if

850
00:30:39,600 --> 00:30:41,279
we can provide the binary that behaves

851
00:30:41,279 --> 00:30:43,520
quite normally in the in the amount of

852
00:30:43,520 --> 00:30:45,279
time that the antivirus is actually

853
00:30:45,279 --> 00:30:48,080
scanning then we will bypass the sandbox

854
00:30:48,080 --> 00:30:50,080
if we provide the binary without known

855
00:30:50,080 --> 00:30:51,919
signatures we will probably bypass the

856
00:30:51,919 --> 00:30:54,080
scanner and if we provide a binary which

857
00:30:54,080 --> 00:30:56,240
can cannot be unpacked easily well we

858
00:30:56,240 --> 00:30:57,679
can actually bypass the interviews

859
00:30:57,679 --> 00:31:00,240
always even like that even using this

860
00:31:00,240 --> 00:31:02,559
technique

861
00:31:02,559 --> 00:31:03,760
so

862
00:31:03,760 --> 00:31:05,679
always don't forget the basics we need

863
00:31:05,679 --> 00:31:07,440
to understand what we need to bypass

864
00:31:07,440 --> 00:31:09,200
when we actually came up with a known

865
00:31:09,200 --> 00:31:10,720
payload so

866
00:31:10,720 --> 00:31:12,559
what are we trying to so here i'm

867
00:31:12,559 --> 00:31:14,960
actually dividing our payloads in like

868
00:31:14,960 --> 00:31:16,960
native binaries so here i'm talking

869
00:31:16,960 --> 00:31:19,440
about native windows application which

870
00:31:19,440 --> 00:31:21,519
are like common applications that just

871
00:31:21,519 --> 00:31:24,159
load ntdll dll

872
00:31:24,159 --> 00:31:26,799
or windows application which are like

873
00:31:26,799 --> 00:31:28,799
normal windows application written in c

874
00:31:28,799 --> 00:31:31,200
c plus plus dot net application and

875
00:31:31,200 --> 00:31:32,559
power with the scripts what we need to

876
00:31:32,559 --> 00:31:33,840
bypass so

877
00:31:33,840 --> 00:31:35,919
in the form of native application what

878
00:31:35,919 --> 00:31:37,519
we need to bypass actually is just the

879
00:31:37,519 --> 00:31:40,080
same boxing the behavioral analysis

880
00:31:40,080 --> 00:31:42,240
we're talking about loading in memory so

881
00:31:42,240 --> 00:31:44,000
let's say let's imagine i'm just loading

882
00:31:44,000 --> 00:31:45,120
this

883
00:31:45,120 --> 00:31:48,000
using a beacon object file for example

884
00:31:48,000 --> 00:31:51,440
and if instead if we're loading the our

885
00:31:51,440 --> 00:31:53,240
payload using

886
00:31:53,240 --> 00:31:55,200
assemblyreflection.net reflection i need

887
00:31:55,200 --> 00:31:56,880
to bypass not only this and bought this

888
00:31:56,880 --> 00:31:58,640
unboxing but i need to bypass also the

889
00:31:58,640 --> 00:32:01,120
real-time scanner because

890
00:32:01,120 --> 00:32:03,360
somehow this scanner will actually

891
00:32:03,360 --> 00:32:05,679
detect my assembly load and the clr

892
00:32:05,679 --> 00:32:08,880
would actually load mcdll in the clr

893
00:32:08,880 --> 00:32:11,840
context i will let msi actually looking

894
00:32:11,840 --> 00:32:13,919
at what i'm trying to load it will scan

895
00:32:13,919 --> 00:32:15,679
my banner and discount my buffering

896
00:32:15,679 --> 00:32:17,360
memory and it will actually detect my

897
00:32:17,360 --> 00:32:20,399
payload if anything is malicious and it

898
00:32:20,399 --> 00:32:22,720
contains any known signatures and

899
00:32:22,720 --> 00:32:24,720
powershell same thing actually real-time

900
00:32:24,720 --> 00:32:26,159
scanner is even more annoying because

901
00:32:26,159 --> 00:32:29,200
powershell actually loads ncdll when

902
00:32:29,200 --> 00:32:30,000
it's

903
00:32:30,000 --> 00:32:31,840
practically when it starts

904
00:32:31,840 --> 00:32:33,279
and of course there is another

905
00:32:33,279 --> 00:32:35,360
consideration if we want to actually

906
00:32:35,360 --> 00:32:38,159
stick and we want to plant that file on

907
00:32:38,159 --> 00:32:40,080
the file system then we need to bypass

908
00:32:40,080 --> 00:32:43,120
also the static scanner because

909
00:32:43,120 --> 00:32:45,840
as soon as my payload touch the disk

910
00:32:45,840 --> 00:32:49,678
uh the antivirus will try to scan it

911
00:32:49,919 --> 00:32:51,679
so let's

912
00:32:51,679 --> 00:32:53,840
start talking about getting rid of our

913
00:32:53,840 --> 00:32:56,240
old friends like the hour old friends is

914
00:32:56,240 --> 00:32:58,399
like one of them is

915
00:32:58,399 --> 00:33:00,480
of course msi

916
00:33:00,480 --> 00:33:03,120
and msi is actually quite easy to bypass

917
00:33:03,120 --> 00:33:06,000
msi is loaded as a dll in memory and if

918
00:33:06,000 --> 00:33:07,919
i can get an angle to the process i'm

919
00:33:07,919 --> 00:33:10,640
running so it's msi is actually loaded

920
00:33:10,640 --> 00:33:12,720
in the context of my own process or if

921
00:33:12,720 --> 00:33:14,320
it's loaded in a process in a remote

922
00:33:14,320 --> 00:33:16,399
process but i can get an angle to that

923
00:33:16,399 --> 00:33:18,640
process as long as i can get the handle

924
00:33:18,640 --> 00:33:21,279
to the process i can also like patch it

925
00:33:21,279 --> 00:33:22,320
in memory

926
00:33:22,320 --> 00:33:24,399
and the patch is usually very convenient

927
00:33:24,399 --> 00:33:26,720
because there are three bytes here like

928
00:33:26,720 --> 00:33:29,600
here actually we are storing the length

929
00:33:29,600 --> 00:33:31,679
of the buffer that needs to be scanned

930
00:33:31,679 --> 00:33:34,640
by hansi and what i can do so edi is

931
00:33:34,640 --> 00:33:37,200
actually gonna um is actually here is

932
00:33:37,200 --> 00:33:39,360
actually going to contain the length

933
00:33:39,360 --> 00:33:40,159
of

934
00:33:40,159 --> 00:33:42,880
the buffer that i need to scan so what i

935
00:33:42,880 --> 00:33:44,799
can do here is just replace these three

936
00:33:44,799 --> 00:33:48,240
bytes with like sore editing what is

937
00:33:48,240 --> 00:33:51,120
what the effect of this sort is that edi

938
00:33:51,120 --> 00:33:53,919
will be zero so the length of the buffer

939
00:33:53,919 --> 00:33:57,039
and f2 scan will be zero and when you

940
00:33:57,039 --> 00:33:59,760
reach the point then okay i can scan

941
00:33:59,760 --> 00:34:01,679
this buffer well the length is zero you

942
00:34:01,679 --> 00:34:02,960
don't let you don't need to scan

943
00:34:02,960 --> 00:34:04,880
anything and this is the like one of the

944
00:34:04,880 --> 00:34:08,159
no known bypass of amsi

945
00:34:08,159 --> 00:34:10,639
so this is one way to bypass amsi okay

946
00:34:10,639 --> 00:34:14,079
we can implement that easy

947
00:34:14,079 --> 00:34:16,560
what about signatures well signatures

948
00:34:16,560 --> 00:34:19,520
are like have been for a long time the

949
00:34:19,520 --> 00:34:22,960
main resource for finding malwares used

950
00:34:22,960 --> 00:34:26,399
by antiviruses like not not anymore of

951
00:34:26,399 --> 00:34:30,399
course and thanks god not more but like

952
00:34:30,399 --> 00:34:32,879
like once once in a time it was the only

953
00:34:32,879 --> 00:34:35,520
way for antivirus is to actually detect

954
00:34:35,520 --> 00:34:38,639
viruses and you know what it's very easy

955
00:34:38,639 --> 00:34:40,560
to bypass signatures it's so easy

956
00:34:40,560 --> 00:34:41,918
actually to bypass signatures because

957
00:34:41,918 --> 00:34:43,199
sometimes

958
00:34:43,199 --> 00:34:46,719
it's it's really a matter of what a

959
00:34:46,719 --> 00:34:49,040
payload is actually printing at screen

960
00:34:49,040 --> 00:34:51,199
you would be surprised of how signatures

961
00:34:51,199 --> 00:34:54,560
are built on like printf messages or

962
00:34:54,560 --> 00:34:56,960
console right line messages it's

963
00:34:56,960 --> 00:34:58,560
incredible it's almost ridiculous

964
00:34:58,560 --> 00:35:00,320
honestly because you can change those

965
00:35:00,320 --> 00:35:02,400
messages so easily you don't even need

966
00:35:02,400 --> 00:35:05,520
but to actually come up with a way to

967
00:35:05,520 --> 00:35:08,320
uh like to modify the logic of your

968
00:35:08,320 --> 00:35:10,320
payload you just need to

969
00:35:10,320 --> 00:35:12,720
basically obfuscate your strings

970
00:35:12,720 --> 00:35:13,839
so

971
00:35:13,839 --> 00:35:15,520
yeah and this is just a member saying

972
00:35:15,520 --> 00:35:17,280
yeah it's not mimikaz because it's not

973
00:35:17,280 --> 00:35:19,359
bringing mimi cats in the banner what

974
00:35:19,359 --> 00:35:22,400
the hell i mean yes it's still mimikatz

975
00:35:22,400 --> 00:35:23,920
so

976
00:35:23,920 --> 00:35:25,760
the other thing which is

977
00:35:25,760 --> 00:35:27,839
is becoming more annoying to bypass is

978
00:35:27,839 --> 00:35:29,440
the sandbox

979
00:35:29,440 --> 00:35:30,960
the sandbox

980
00:35:30,960 --> 00:35:32,720
will actually run the payload for a

981
00:35:32,720 --> 00:35:34,720
certain amount of time

982
00:35:34,720 --> 00:35:35,599
in

983
00:35:35,599 --> 00:35:38,000
in a sandbox environment so in a vm

984
00:35:38,000 --> 00:35:40,000
and uh it's

985
00:35:40,000 --> 00:35:42,880
kinda tricky to bypass it uh there are

986
00:35:42,880 --> 00:35:46,480
like a few uh details on on like

987
00:35:46,480 --> 00:35:48,720
publicly available on research to bypass

988
00:35:48,720 --> 00:35:51,200
the sandbox i think most of the work

989
00:35:51,200 --> 00:35:54,240
good work was done by emmerich nazi and

990
00:35:54,240 --> 00:35:56,240
it was collected in a pdf

991
00:35:56,240 --> 00:35:58,480
um and you can use a lot of technique

992
00:35:58,480 --> 00:36:00,640
like the the most like

993
00:36:00,640 --> 00:36:02,480
useful are like

994
00:36:02,480 --> 00:36:04,800
using behavioral analysis like usually

995
00:36:04,800 --> 00:36:07,040
in in like sorry using the environment

996
00:36:07,040 --> 00:36:09,119
so doing an analysis of the environment

997
00:36:09,119 --> 00:36:11,920
to actually come up with strategies to

998
00:36:11,920 --> 00:36:14,000
bypass detection using an early return

999
00:36:14,000 --> 00:36:16,400
approach so like if i have this reg

1000
00:36:16,400 --> 00:36:18,880
registry i can return early i can stop

1001
00:36:18,880 --> 00:36:20,640
my process from running

1002
00:36:20,640 --> 00:36:22,640
if i have the user in a certain way if i

1003
00:36:22,640 --> 00:36:25,359
can access this path then i'm in a vm or

1004
00:36:25,359 --> 00:36:27,200
something like that

1005
00:36:27,200 --> 00:36:29,440
just because a virtual environment by

1006
00:36:29,440 --> 00:36:31,760
its nature is not a full environment so

1007
00:36:31,760 --> 00:36:34,560
the antivirus will not be able to like

1008
00:36:34,560 --> 00:36:35,920
give it

1009
00:36:35,920 --> 00:36:38,560
all the things you would find in a real

1010
00:36:38,560 --> 00:36:40,800
environment and you can use anti-black

1011
00:36:40,800 --> 00:36:43,280
techniques like you you can use like

1012
00:36:43,280 --> 00:36:45,520
non-virtualized functions sometimes some

1013
00:36:45,520 --> 00:36:47,359
functions are not virtualized to save

1014
00:36:47,359 --> 00:36:49,920
memory like virtual lux pneuma which is

1015
00:36:49,920 --> 00:36:51,160
used in

1016
00:36:51,160 --> 00:36:54,240
multi-processor environments and fsr

1017
00:36:54,240 --> 00:36:57,280
look or other other other functions but

1018
00:36:57,280 --> 00:36:59,440
also you can provide the file name

1019
00:36:59,440 --> 00:37:02,480
checking this was done in macros like

1020
00:37:02,480 --> 00:37:04,640
back in the days like if i have a macro

1021
00:37:04,640 --> 00:37:07,200
and you know it's the file name is not

1022
00:37:07,200 --> 00:37:09,040
like the doc file name is not the same

1023
00:37:09,040 --> 00:37:11,200
just don't execute this

1024
00:37:11,200 --> 00:37:13,680
uh environment checking and you can

1025
00:37:13,680 --> 00:37:15,920
check for like actually the file system

1026
00:37:15,920 --> 00:37:16,880
or other

1027
00:37:16,880 --> 00:37:18,560
or other um

1028
00:37:18,560 --> 00:37:21,200
more sophisticated ways

1029
00:37:21,200 --> 00:37:22,800
and you can also check it's been the

1030
00:37:22,800 --> 00:37:25,680
back the dr registers that are the one

1031
00:37:25,680 --> 00:37:28,079
uh involved with actually if a pro if a

1032
00:37:28,079 --> 00:37:29,920
debugger is actually listening to my

1033
00:37:29,920 --> 00:37:31,040
process

1034
00:37:31,040 --> 00:37:33,119
and also map session

1035
00:37:33,119 --> 00:37:35,520
section hashing and this is actually

1036
00:37:35,520 --> 00:37:37,440
very useful if someone is looking my

1037
00:37:37,440 --> 00:37:40,240
promo process because if anyone installs

1038
00:37:40,240 --> 00:37:43,040
a hook in my process and i'm mapping my

1039
00:37:43,040 --> 00:37:44,560
sections with

1040
00:37:44,560 --> 00:37:47,599
an ash if they are if if if i check the

1041
00:37:47,599 --> 00:37:49,599
ash of my section and something is

1042
00:37:49,599 --> 00:37:51,839
changed well probably someone installed

1043
00:37:51,839 --> 00:37:53,680
a hook in my section

1044
00:37:53,680 --> 00:37:56,000
uh resource disruption like there is the

1045
00:37:56,000 --> 00:37:57,440
one million increment or the crazy

1046
00:37:57,440 --> 00:37:59,200
allocation this technique is called like

1047
00:37:59,200 --> 00:38:01,839
the offer you can't refu the offer you

1048
00:38:01,839 --> 00:38:03,200
have to refuse

1049
00:38:03,200 --> 00:38:05,839
like if you use a crazy allocation then

1050
00:38:05,839 --> 00:38:07,760
the antivirus would say you know what in

1051
00:38:07,760 --> 00:38:09,839
my virtual environment i don't have one

1052
00:38:09,839 --> 00:38:12,320
gig for your memory like i'm actually

1053
00:38:12,320 --> 00:38:14,880
trying to allocate for myself one gig in

1054
00:38:14,880 --> 00:38:17,599
the hip and it will say no no no just

1055
00:38:17,599 --> 00:38:20,079
break the just break the analysis or you

1056
00:38:20,079 --> 00:38:21,760
can have overly complex decoding

1057
00:38:21,760 --> 00:38:24,240
algorithms or algorithms that the codes

1058
00:38:24,240 --> 00:38:26,800
in only in certain conditions which is

1059
00:38:26,800 --> 00:38:30,160
pretty much um very smart i had the use

1060
00:38:30,160 --> 00:38:32,880
cases for that i used once you know once

1061
00:38:32,880 --> 00:38:35,599
in a while i used um

1062
00:38:35,599 --> 00:38:39,040
a very like not is like a very stupid

1063
00:38:39,040 --> 00:38:41,359
algorithm that is using uh for other

1064
00:38:41,359 --> 00:38:43,200
kind of data sets which is the run

1065
00:38:43,200 --> 00:38:45,520
length encoder around length encoder is

1066
00:38:45,520 --> 00:38:47,680
just counts the name on like the number

1067
00:38:47,680 --> 00:38:49,680
of consecutive

1068
00:38:49,680 --> 00:38:51,760
bytes you have and just you know

1069
00:38:51,760 --> 00:38:53,839
transform everything in like number of

1070
00:38:53,839 --> 00:38:55,920
bytes and the byte number of bytes and

1071
00:38:55,920 --> 00:38:58,960
the byte and it you know if you have a

1072
00:38:58,960 --> 00:39:00,880
very differentiated data set it works

1073
00:39:00,880 --> 00:39:03,040
with zero and one but if you have a very

1074
00:39:03,040 --> 00:39:06,079
like differentiated data set

1075
00:39:06,079 --> 00:39:07,839
like it takes a huge

1076
00:39:07,839 --> 00:39:08,640
time

1077
00:39:08,640 --> 00:39:10,560
and it comes out that

1078
00:39:10,560 --> 00:39:13,359
if you run a like a decoding algorithm

1079
00:39:13,359 --> 00:39:15,359
like that in memory what it happens is

1080
00:39:15,359 --> 00:39:16,320
that

1081
00:39:16,320 --> 00:39:17,040
the

1082
00:39:17,040 --> 00:39:19,760
sandbox will try to execute it but it

1083
00:39:19,760 --> 00:39:21,760
would time out before actually decoding

1084
00:39:21,760 --> 00:39:22,880
your stub

1085
00:39:22,880 --> 00:39:24,880
so it will pass the check

1086
00:39:24,880 --> 00:39:26,960
logit exception uh you can use

1087
00:39:26,960 --> 00:39:29,200
impossible branching like i'm checking a

1088
00:39:29,200 --> 00:39:32,480
yule and a url and if it does exist or

1089
00:39:32,480 --> 00:39:34,640
if it doesn't exist i do this thing or i

1090
00:39:34,640 --> 00:39:37,119
do another thing or special condition

1091
00:39:37,119 --> 00:39:39,520
like as i said registry values or other

1092
00:39:39,520 --> 00:39:41,280
environment variables these are all

1093
00:39:41,280 --> 00:39:42,560
techniques that you can use to avoid the

1094
00:39:42,560 --> 00:39:43,839
sandbox

1095
00:39:43,839 --> 00:39:45,760
and are pretty much working

1096
00:39:45,760 --> 00:39:47,200
also nowadays

1097
00:39:47,200 --> 00:39:49,839
and another actually another thing that

1098
00:39:49,839 --> 00:39:52,720
you want to get rid of is etw etw can

1099
00:39:52,720 --> 00:39:54,320
provide a lot of temel

1100
00:39:54,320 --> 00:39:57,040
telemetry there to use actually against

1101
00:39:57,040 --> 00:39:59,280
yours against an attacker

1102
00:39:59,280 --> 00:40:02,640
and what we are i mean etw is a beast uh

1103
00:40:02,640 --> 00:40:05,680
i'm not going into everything about tdw

1104
00:40:05,680 --> 00:40:07,760
but we will just focusing on event

1105
00:40:07,760 --> 00:40:11,119
registration so atw as a way to register

1106
00:40:11,119 --> 00:40:13,440
event usually you use a well-known

1107
00:40:13,440 --> 00:40:16,720
provider provided by by windows with uh

1108
00:40:16,720 --> 00:40:19,680
known guy uh sorry google id

1109
00:40:19,680 --> 00:40:22,960
and you will just um like in during the

1110
00:40:22,960 --> 00:40:24,480
registration process when you're

1111
00:40:24,480 --> 00:40:26,560
registering an event what you call this

1112
00:40:26,560 --> 00:40:28,800
etwm and register that will they will

1113
00:40:28,800 --> 00:40:31,599
just validate your data and we'll call

1114
00:40:31,599 --> 00:40:34,079
etw notification register

1115
00:40:34,079 --> 00:40:35,359
and this will actually create the

1116
00:40:35,359 --> 00:40:39,599
structure which is uh etw um

1117
00:40:39,599 --> 00:40:41,119
reg user data

1118
00:40:41,119 --> 00:40:43,520
which is a like a huge like your

1119
00:40:43,520 --> 00:40:45,280
structure is not correct it's like two

1120
00:40:45,280 --> 00:40:45,960
to

1121
00:40:45,960 --> 00:40:48,560
256 bytes but you will create a

1122
00:40:48,560 --> 00:40:50,880
structure which describes a register

1123
00:40:50,880 --> 00:40:52,560
like a registration

1124
00:40:52,560 --> 00:40:55,119
uh user registration for um for an etw

1125
00:40:55,119 --> 00:40:59,200
event and it will then insert it into a

1126
00:40:59,200 --> 00:41:02,000
global like variable which is the etwp

1127
00:41:02,000 --> 00:41:04,000
registration table so

1128
00:41:04,000 --> 00:41:06,880
one way to bypass um

1129
00:41:06,880 --> 00:41:09,280
to bypass ew that doesn't require any

1130
00:41:09,280 --> 00:41:12,640
kind of patch or whatever is that we can

1131
00:41:12,640 --> 00:41:15,119
actually um exploit we can actually

1132
00:41:15,119 --> 00:41:17,920
reach this because as long as we can you

1133
00:41:17,920 --> 00:41:20,960
know as long as we can get an handle to

1134
00:41:20,960 --> 00:41:22,319
the process we are attacking we are

1135
00:41:22,319 --> 00:41:24,400
injecting to we are using as a baseline

1136
00:41:24,400 --> 00:41:27,359
for our payload we can actually navigate

1137
00:41:27,359 --> 00:41:29,359
and traverse back to this registration

1138
00:41:29,359 --> 00:41:32,640
table we can go there and just oh sorry

1139
00:41:32,640 --> 00:41:36,240
i just mistake okay and we can just

1140
00:41:36,240 --> 00:41:38,079
open handle by traversing the table we

1141
00:41:38,079 --> 00:41:40,000
can open an handle to open to all the

1142
00:41:40,000 --> 00:41:42,800
registrations items to all the structure

1143
00:41:42,800 --> 00:41:45,680
and we can just call etw event register

1144
00:41:45,680 --> 00:41:46,720
on them

1145
00:41:46,720 --> 00:41:47,599
so

1146
00:41:47,599 --> 00:41:50,240
this is all load by windows and in that

1147
00:41:50,240 --> 00:41:52,480
way we will just disable etw from

1148
00:41:52,480 --> 00:41:54,400
working in that process

1149
00:41:54,400 --> 00:41:57,280
there is another way which is um still

1150
00:41:57,280 --> 00:41:58,319
available

1151
00:41:58,319 --> 00:42:01,119
on internet which is just patching of

1152
00:42:01,119 --> 00:42:04,960
course etw is managed by ntdl

1153
00:42:04,960 --> 00:42:08,079
and every event that needs to be like

1154
00:42:08,079 --> 00:42:10,240
traced like that need to be put and

1155
00:42:10,240 --> 00:42:12,560
logged in the trace in the windows trace

1156
00:42:12,560 --> 00:42:15,200
will eventually be like constructed as a

1157
00:42:15,200 --> 00:42:16,880
descriptor and have a descriptor and we

1158
00:42:16,880 --> 00:42:20,800
will pass to etw event right so what we

1159
00:42:20,800 --> 00:42:23,839
can do is just patch etw event right in

1160
00:42:23,839 --> 00:42:24,960
memory

1161
00:42:24,960 --> 00:42:28,720
um in like avoiding this etw event right

1162
00:42:28,720 --> 00:42:30,960
to actually write in the events log so

1163
00:42:30,960 --> 00:42:33,280
this is another way to

1164
00:42:33,280 --> 00:42:35,520
to disable etw but this requires any

1165
00:42:35,520 --> 00:42:38,560
memory patch so it's actually

1166
00:42:38,560 --> 00:42:40,400
detectable if someone is actually

1167
00:42:40,400 --> 00:42:43,040
looking at what we're doing in ntdl in

1168
00:42:43,040 --> 00:42:45,839
ntdl dll

1169
00:42:47,119 --> 00:42:49,359
so

1170
00:42:49,359 --> 00:42:52,640
now we are like now that we get rid of

1171
00:42:52,640 --> 00:42:55,520
all these friends we want to actually

1172
00:42:55,520 --> 00:42:56,800
come back to

1173
00:42:56,800 --> 00:42:59,760
john research and say okay now how can

1174
00:42:59,760 --> 00:43:02,319
we bypass more advanced stuff how can we

1175
00:43:02,319 --> 00:43:05,280
bypass like edr and user land looking

1176
00:43:05,280 --> 00:43:07,920
mostly usually looking

1177
00:43:07,920 --> 00:43:10,319
well we have two ways and we can

1178
00:43:10,319 --> 00:43:12,000
re-implement the wheel like we can

1179
00:43:12,000 --> 00:43:15,200
re-implement uh like the asm code that

1180
00:43:15,200 --> 00:43:17,040
we need to do for actually loading our

1181
00:43:17,040 --> 00:43:18,720
shell code using cisco's this is

1182
00:43:18,720 --> 00:43:20,240
perfectly fine and actually it's the

1183
00:43:20,240 --> 00:43:21,920
best approach but sometimes we're

1184
00:43:21,920 --> 00:43:25,040
lacking time to do that so we can also

1185
00:43:25,040 --> 00:43:28,240
stand on the shoulders of giant like

1186
00:43:28,240 --> 00:43:30,720
a great research by gioro

1187
00:43:30,720 --> 00:43:33,040
came up with cease whisper

1188
00:43:33,040 --> 00:43:35,280
one and we can use the static approach

1189
00:43:35,280 --> 00:43:37,760
like the static approach to locate

1190
00:43:37,760 --> 00:43:40,960
cisco's is um very is based just on the

1191
00:43:40,960 --> 00:43:43,359
work of george actually uh that you can

1192
00:43:43,359 --> 00:43:45,520
actually see because it's on sis whisper

1193
00:43:45,520 --> 00:43:48,640
version one and it's actually just based

1194
00:43:48,640 --> 00:43:51,040
on the version and the build of windows

1195
00:43:51,040 --> 00:43:53,119
it will collect like all the cisco

1196
00:43:53,119 --> 00:43:55,920
numbers for all the windows version you

1197
00:43:55,920 --> 00:43:58,160
can just look up in the table create

1198
00:43:58,160 --> 00:44:00,560
your stub for the cisco function with

1199
00:44:00,560 --> 00:44:03,040
the correct cisco number and then you

1200
00:44:03,040 --> 00:44:04,800
have you can build from there you can

1201
00:44:04,800 --> 00:44:07,599
build a payload using just cisco's that

1202
00:44:07,599 --> 00:44:10,319
is specific for that target version but

1203
00:44:10,319 --> 00:44:12,079
it has limitations of course because

1204
00:44:12,079 --> 00:44:13,760
it's not really what we want we need to

1205
00:44:13,760 --> 00:44:16,160
uh we need to update these lookup tables

1206
00:44:16,160 --> 00:44:20,560
every time it's just not good

1207
00:44:20,560 --> 00:44:23,839
so not as good as the second version of

1208
00:44:23,839 --> 00:44:25,839
this whispers which is using a technique

1209
00:44:25,839 --> 00:44:27,680
which is a bit more like

1210
00:44:27,680 --> 00:44:30,160
a bit better like because it uses a

1211
00:44:30,160 --> 00:44:34,400
cisco number eat ordering so uh in ntdl

1212
00:44:34,400 --> 00:44:36,880
of course every cisco's as every

1213
00:44:36,880 --> 00:44:40,880
exported function as a specific

1214
00:44:40,880 --> 00:44:44,000
ordinal function ordinal number and we

1215
00:44:44,000 --> 00:44:45,839
can actually we can actually use an

1216
00:44:45,839 --> 00:44:48,160
ordering approach in the exported

1217
00:44:48,160 --> 00:44:50,480
functions to actually locate

1218
00:44:50,480 --> 00:44:52,720
the cisco number every time so this is

1219
00:44:52,720 --> 00:44:54,160
what actually

1220
00:44:54,160 --> 00:44:55,760
says whisper is providing so since

1221
00:44:55,760 --> 00:44:57,440
whisper will actually provide you with

1222
00:44:57,440 --> 00:45:00,000
this with the stop code to actually

1223
00:45:00,000 --> 00:45:02,560
execute a cisco and then dynamically

1224
00:45:02,560 --> 00:45:04,160
where you where you're executing your

1225
00:45:04,160 --> 00:45:07,760
code the cisco number will be located

1226
00:45:07,760 --> 00:45:10,560
and it will be just passed to the stab

1227
00:45:10,560 --> 00:45:12,720
so you can actually use it so this is

1228
00:45:12,720 --> 00:45:13,520
what

1229
00:45:13,520 --> 00:45:15,200
square two does

1230
00:45:15,200 --> 00:45:16,800
and then there is another other two

1231
00:45:16,800 --> 00:45:19,520
techniques which is what um john was

1232
00:45:19,520 --> 00:45:22,240
talking before which is manual overload

1233
00:45:22,240 --> 00:45:24,720
mapping manual overload mapping was

1234
00:45:24,720 --> 00:45:27,119
explained by john before

1235
00:45:27,119 --> 00:45:28,960
manual mapping is exactly the same

1236
00:45:28,960 --> 00:45:31,280
technique you map a dll in memory and

1237
00:45:31,280 --> 00:45:34,400
you just find the export in that dll in

1238
00:45:34,400 --> 00:45:36,319
memory and you call it

1239
00:45:36,319 --> 00:45:37,440
when you

1240
00:45:37,440 --> 00:45:40,079
and usually using a custom version of

1241
00:45:40,079 --> 00:45:43,839
get module and get proc address

1242
00:45:43,839 --> 00:45:46,079
and what you do like manual mapping

1243
00:45:46,079 --> 00:45:48,480
misses the fact that um you have this

1244
00:45:48,480 --> 00:45:50,400
set you have this dll in memory but you

1245
00:45:50,400 --> 00:45:53,119
don't uh you're not like every dll which

1246
00:45:53,119 --> 00:45:55,119
one is in memory is backed up by a file

1247
00:45:55,119 --> 00:45:56,079
on disk

1248
00:45:56,079 --> 00:45:57,920
so overload mapping is the same

1249
00:45:57,920 --> 00:45:59,760
technique as manual mapping that it's

1250
00:45:59,760 --> 00:46:02,720
just like you open a new section object

1251
00:46:02,720 --> 00:46:05,599
you fi you open an handle to the ntdl on

1252
00:46:05,599 --> 00:46:08,640
disk you put the handle in the section

1253
00:46:08,640 --> 00:46:11,440
object with sec image protection and

1254
00:46:11,440 --> 00:46:13,599
you're done it's exactly the copy of

1255
00:46:13,599 --> 00:46:16,240
ntdll as loaded by your

1256
00:46:16,240 --> 00:46:18,720
by the windows loader and and then there

1257
00:46:18,720 --> 00:46:19,520
is

1258
00:46:19,520 --> 00:46:21,680
elsegate elsegate is a function

1259
00:46:21,680 --> 00:46:24,560
published by ammonsec

1260
00:46:24,560 --> 00:46:25,440
and

1261
00:46:25,440 --> 00:46:26,839
bx

1262
00:46:26,839 --> 00:46:29,280
smellybeaks which is a technique to

1263
00:46:29,280 --> 00:46:31,200
dynamically resolve

1264
00:46:31,200 --> 00:46:34,079
syscalls in memory these techniques was

1265
00:46:34,079 --> 00:46:37,599
previously used to actually um to just

1266
00:46:37,599 --> 00:46:40,079
dump the content the azom content of a

1267
00:46:40,079 --> 00:46:43,040
dll but it can be used also to um to

1268
00:46:43,040 --> 00:46:44,880
actually just call it just create this

1269
00:46:44,880 --> 00:46:46,720
tab and call it

1270
00:46:46,720 --> 00:46:48,079
and this is what is implemented in

1271
00:46:48,079 --> 00:46:51,040
deembook which is which makes this

1272
00:46:51,040 --> 00:46:53,599
project by the wover john and other

1273
00:46:53,599 --> 00:46:54,839
contributors

1274
00:46:54,839 --> 00:46:58,079
um that makes appealing for us to use

1275
00:46:58,079 --> 00:47:00,800
dimbook when we have to use c schools in

1276
00:47:00,800 --> 00:47:02,960
c sharp that's it

1277
00:47:02,960 --> 00:47:06,800
um as gate has only just one problem um

1278
00:47:06,800 --> 00:47:08,400
which uses

1279
00:47:08,400 --> 00:47:09,200
like

1280
00:47:09,200 --> 00:47:12,880
as john was saying is uses uh like it's

1281
00:47:12,880 --> 00:47:15,280
probably it's just comparing the stub of

1282
00:47:15,280 --> 00:47:17,599
the cisco with a known stub

1283
00:47:17,599 --> 00:47:19,839
but what happens if the c school is

1284
00:47:19,839 --> 00:47:21,040
hooked

1285
00:47:21,040 --> 00:47:23,520
the stub will be different from the one

1286
00:47:23,520 --> 00:47:25,040
i'm expecting

1287
00:47:25,040 --> 00:47:27,680
so to solve this problem renzo sector

1288
00:47:27,680 --> 00:47:29,200
seven actually came up with this

1289
00:47:29,200 --> 00:47:30,800
technique which is not currently

1290
00:47:30,800 --> 00:47:33,040
implemented by any tool actually so we

1291
00:47:33,040 --> 00:47:35,280
need to come up with something ourselves

1292
00:47:35,280 --> 00:47:37,920
and it's a it's a technique which is

1293
00:47:37,920 --> 00:47:39,680
practically else gate

1294
00:47:39,680 --> 00:47:42,400
plus a patch so if i find a function

1295
00:47:42,400 --> 00:47:44,800
which stops is not matching i know that

1296
00:47:44,800 --> 00:47:47,599
it's hooked so what i do is i navigate

1297
00:47:47,599 --> 00:47:49,359
to the neighbors

1298
00:47:49,359 --> 00:47:51,280
till i find someone some neighbors that

1299
00:47:51,280 --> 00:47:53,359
is not hooked and then i traverse back

1300
00:47:53,359 --> 00:47:54,640
and i patch

1301
00:47:54,640 --> 00:47:57,200
all the uh previous function till i have

1302
00:47:57,200 --> 00:47:59,280
my actual stub and i have my actual

1303
00:47:59,280 --> 00:48:00,960
cisco number

1304
00:48:00,960 --> 00:48:04,640
very cool technique um i i actually

1305
00:48:04,640 --> 00:48:06,319
if you want to dig more with this

1306
00:48:06,319 --> 00:48:09,280
technique i like sector 7 renzo has a

1307
00:48:09,280 --> 00:48:11,040
blog post about it and it's very cool

1308
00:48:11,040 --> 00:48:13,440
actually

1309
00:48:14,720 --> 00:48:17,119
so now then now that we

1310
00:48:17,119 --> 00:48:18,559
got out to

1311
00:48:18,559 --> 00:48:21,760
you know how to get there how to

1312
00:48:21,760 --> 00:48:24,160
invoke cisco's and bypass user land

1313
00:48:24,160 --> 00:48:26,559
looking now what is the next step the

1314
00:48:26,559 --> 00:48:29,280
next step was to bypass like opsec or

1315
00:48:29,280 --> 00:48:30,800
other thing

1316
00:48:30,800 --> 00:48:32,559
there are a lot of techniques to bypass

1317
00:48:32,559 --> 00:48:35,040
opsec but what can we do to make our

1318
00:48:35,040 --> 00:48:37,440
payload more legitimate well

1319
00:48:37,440 --> 00:48:39,599
we can do a basic techniques

1320
00:48:39,599 --> 00:48:41,119
these are very basic techniques but we

1321
00:48:41,119 --> 00:48:43,280
can blend in a bit more with our target

1322
00:48:43,280 --> 00:48:45,200
and what can we do well we can clone

1323
00:48:45,200 --> 00:48:47,680
metadata for example

1324
00:48:47,680 --> 00:48:50,160
we can clone metadata to make this

1325
00:48:50,160 --> 00:48:52,319
payload here to appear a bit more

1326
00:48:52,319 --> 00:48:54,160
legitimate

1327
00:48:54,160 --> 00:48:55,280
and

1328
00:48:55,280 --> 00:48:57,359
cloning all the metadata i mean this is

1329
00:48:57,359 --> 00:49:00,160
very basic technique but you know

1330
00:49:00,160 --> 00:49:03,760
sometimes it works and i'm not kidding

1331
00:49:03,760 --> 00:49:06,720
and we can also use code signing we can

1332
00:49:06,720 --> 00:49:08,880
use code signing and we can actually

1333
00:49:08,880 --> 00:49:12,079
craft a code signing certificate we can

1334
00:49:12,079 --> 00:49:14,079
dump one from

1335
00:49:14,079 --> 00:49:16,640
internet or we can also steal

1336
00:49:16,640 --> 00:49:19,200
a signature from another binary and this

1337
00:49:19,200 --> 00:49:21,119
works i mean of course if you check it

1338
00:49:21,119 --> 00:49:23,119
if you check the integrity of the file

1339
00:49:23,119 --> 00:49:24,079
it will

1340
00:49:24,079 --> 00:49:26,319
probably don't pass that check because

1341
00:49:26,319 --> 00:49:29,040
the signature will be invalid but the

1342
00:49:29,040 --> 00:49:32,240
point is that some av and adr appliances

1343
00:49:32,240 --> 00:49:35,920
just care about is designed or not

1344
00:49:35,920 --> 00:49:38,160
they won't really go and check

1345
00:49:38,160 --> 00:49:41,280
if the signature is valid or not

1346
00:49:41,280 --> 00:49:44,160
and so i would just say yeah i mean this

1347
00:49:44,160 --> 00:49:46,880
seems like legit yeah yeah let's let's

1348
00:49:46,880 --> 00:49:50,240
open the gate for for it

1349
00:49:50,960 --> 00:49:52,400
and so

1350
00:49:52,400 --> 00:49:53,599
the last step

1351
00:49:53,599 --> 00:49:56,559
now that we know a few techniques to do

1352
00:49:56,559 --> 00:49:58,640
what we want to do let's bring in

1353
00:49:58,640 --> 00:50:01,680
automation like yeah i'm just because

1354
00:50:01,680 --> 00:50:04,160
what we ate the most is actually to i

1355
00:50:04,160 --> 00:50:05,839
mean i've seen it multiple times right

1356
00:50:05,839 --> 00:50:07,520
maybe you've seen it as well in your

1357
00:50:07,520 --> 00:50:09,520
like when we need to craft a payload

1358
00:50:09,520 --> 00:50:12,880
maybe we have seven eight maybe even ten

1359
00:50:12,880 --> 00:50:16,079
twelve we have all these projects

1360
00:50:16,079 --> 00:50:19,200
with c plus plus c sharp projects and we

1361
00:50:19,200 --> 00:50:22,640
have also our stub that is mostly like

1362
00:50:22,640 --> 00:50:24,800
that it works and we have a python

1363
00:50:24,800 --> 00:50:27,680
utility to just take a binary maybe use

1364
00:50:27,680 --> 00:50:30,960
donut to create a shell code or another

1365
00:50:30,960 --> 00:50:32,880
technique to use to create a share code

1366
00:50:32,880 --> 00:50:35,359
then we have a python utility dexorid

1367
00:50:35,359 --> 00:50:37,680
ice encrypted something like that then

1368
00:50:37,680 --> 00:50:40,559
we copy paste the blob into our working

1369
00:50:40,559 --> 00:50:42,960
loader and then we compile the loader

1370
00:50:42,960 --> 00:50:44,640
and we have the stub we need usually

1371
00:50:44,640 --> 00:50:46,880
i've seen a lot of projects like that

1372
00:50:46,880 --> 00:50:49,520
and i used to have a lot of them

1373
00:50:49,520 --> 00:50:53,520
so why don't we actually go and

1374
00:50:53,520 --> 00:50:55,520
automate all the stuff i mean it's it's

1375
00:50:55,520 --> 00:50:57,040
possible is it

1376
00:50:57,040 --> 00:50:58,559
so um

1377
00:50:58,559 --> 00:51:00,480
here there is the tool to inceptor and

1378
00:51:00,480 --> 00:51:02,400
it's inceptor what it does it provides

1379
00:51:02,400 --> 00:51:04,559
you a set of well-known techniques and

1380
00:51:04,559 --> 00:51:05,760
it's

1381
00:51:05,760 --> 00:51:07,440
the first thing for the inceptor which

1382
00:51:07,440 --> 00:51:09,040
is very difficult to unders which is

1383
00:51:09,040 --> 00:51:10,880
very difficult to explain is that it's

1384
00:51:10,880 --> 00:51:12,960
template-based instant plate driving

1385
00:51:12,960 --> 00:51:14,480
generation what it means template

1386
00:51:14,480 --> 00:51:16,319
driving it means that it's not really

1387
00:51:16,319 --> 00:51:19,040
limited it's not a packer which has a

1388
00:51:19,040 --> 00:51:21,599
specific loader and uses always the same

1389
00:51:21,599 --> 00:51:23,440
loader it's nothing like that

1390
00:51:23,440 --> 00:51:25,839
you can create your own loader yes of

1391
00:51:25,839 --> 00:51:28,000
course it requires you to write your own

1392
00:51:28,000 --> 00:51:30,319
template because the one that are

1393
00:51:30,319 --> 00:51:32,480
publicly available they will be flagged

1394
00:51:32,480 --> 00:51:34,880
sooner or later they still work though

1395
00:51:34,880 --> 00:51:37,599
um and it provides you with automatic

1396
00:51:37,599 --> 00:51:39,520
shell coding creation you can have your

1397
00:51:39,520 --> 00:51:41,680
own shell code you can create one you

1398
00:51:41,680 --> 00:51:45,440
can just pass it a dll a dotnet dll a

1399
00:51:45,440 --> 00:51:48,559
native dll.net binary or not like a

1400
00:51:48,559 --> 00:51:49,440
naughty

1401
00:51:49,440 --> 00:51:52,000
uh dotnet xc it doesn't really care

1402
00:51:52,000 --> 00:51:54,160
and you can choose if you want to just

1403
00:51:54,160 --> 00:51:56,880
uh pack it in like it offered for three

1404
00:51:56,880 --> 00:51:59,280
languages now we are providing sub we

1405
00:51:59,280 --> 00:52:01,280
are starting support for more languages

1406
00:52:01,280 --> 00:52:04,559
but till now native language so c c plus

1407
00:52:04,559 --> 00:52:05,920
plus

1408
00:52:05,920 --> 00:52:08,319
c sharp and power shell are actually

1409
00:52:08,319 --> 00:52:10,880
supported

1410
00:52:11,760 --> 00:52:13,839
it provides you a way for encoding your

1411
00:52:13,839 --> 00:52:16,559
share code using loader dependent loader

1412
00:52:16,559 --> 00:52:18,720
independent shell codes loader dependent

1413
00:52:18,720 --> 00:52:20,880
it means that the loader knows how to go

1414
00:52:20,880 --> 00:52:23,440
the stub so it's useful if you are an

1415
00:52:23,440 --> 00:52:25,200
assembly load function for example in

1416
00:52:25,200 --> 00:52:27,280
your c sharp because if you are assembly

1417
00:52:27,280 --> 00:52:29,440
load you don't want to have a self

1418
00:52:29,440 --> 00:52:31,760
decoding

1419
00:52:31,760 --> 00:52:34,559
in memory because it will not match

1420
00:52:34,559 --> 00:52:36,079
and assembly

1421
00:52:36,079 --> 00:52:38,319
signature so it will not be loaded

1422
00:52:38,319 --> 00:52:41,440
uh so you want to decode it and then put

1423
00:52:41,440 --> 00:52:44,319
it and load it as assembly load it offer

1424
00:52:44,319 --> 00:52:48,079
for mc bypasses atw bypasses wdp bypass

1425
00:52:48,079 --> 00:52:50,079
they are built in but they are template

1426
00:52:50,079 --> 00:52:52,960
based so you can spin in your own mc

1427
00:52:52,960 --> 00:52:55,520
bypass your own atw bypass whatever it

1428
00:52:55,520 --> 00:52:56,640
works for you

1429
00:52:56,640 --> 00:52:59,440
it doesn't care because it's a framework

1430
00:52:59,440 --> 00:53:02,640
it offer for like natural obfuscation it

1431
00:53:02,640 --> 00:53:04,400
has three ways of obfuscating your

1432
00:53:04,400 --> 00:53:06,079
payloads or for

1433
00:53:06,079 --> 00:53:07,680
powershell is using

1434
00:53:07,680 --> 00:53:09,280
a tool i developed personally with this

1435
00:53:09,280 --> 00:53:10,880
which is a chameleon which is a

1436
00:53:10,880 --> 00:53:13,760
powershell for scatter

1437
00:53:13,760 --> 00:53:17,280
c-sharp using confusion reacts or

1438
00:53:17,280 --> 00:53:20,079
like as strong as or like logic

1439
00:53:20,079 --> 00:53:22,079
nets which are free publicly available

1440
00:53:22,079 --> 00:53:24,000
for skater but it provides support for

1441
00:53:24,000 --> 00:53:25,440
spinning yours

1442
00:53:25,440 --> 00:53:26,839
doesn't care

1443
00:53:26,839 --> 00:53:30,640
um and for c native template is using

1444
00:53:30,640 --> 00:53:31,839
lldm

1445
00:53:31,839 --> 00:53:33,040
so

1446
00:53:33,040 --> 00:53:34,480
it's i mean

1447
00:53:34,480 --> 00:53:36,880
the llvm obfuscation is something is a

1448
00:53:36,880 --> 00:53:38,480
an intermediate representation of

1449
00:53:38,480 --> 00:53:40,079
position that

1450
00:53:40,079 --> 00:53:42,079
is working quite fine and is actually

1451
00:53:42,079 --> 00:53:45,280
passing the proof of time because it's

1452
00:53:45,280 --> 00:53:47,599
actually very difficult to to detect a

1453
00:53:47,599 --> 00:53:50,079
payload which is uh which is compiled

1454
00:53:50,079 --> 00:53:52,079
with lldm

1455
00:53:52,079 --> 00:53:53,839
and this is for the obfuscation it

1456
00:53:53,839 --> 00:53:55,520
provides you a way of patching

1457
00:53:55,520 --> 00:53:58,160
automatically patching yes i i already

1458
00:53:58,160 --> 00:54:00,880
said told that one so it has for etw

1459
00:54:00,880 --> 00:54:02,720
provides way to just

1460
00:54:02,720 --> 00:54:06,960
spin up your etw wldp or mc bypass

1461
00:54:06,960 --> 00:54:08,640
and it has also other techniques other

1462
00:54:08,640 --> 00:54:10,720
modules you can spin in like anti-debug

1463
00:54:10,720 --> 00:54:13,200
environment environmental check whatever

1464
00:54:13,200 --> 00:54:15,280
you want actually

1465
00:54:15,280 --> 00:54:17,119
and we are actually extending it to

1466
00:54:17,119 --> 00:54:19,040
provide more support for this kind of

1467
00:54:19,040 --> 00:54:21,440
technique

1468
00:54:21,599 --> 00:54:24,559
it automatically compile and pack your

1469
00:54:24,559 --> 00:54:27,680
binary like if you if you are working on

1470
00:54:27,680 --> 00:54:30,720
like like every model you spin in how it

1471
00:54:30,720 --> 00:54:32,240
works is that if you're compiling an

1472
00:54:32,240 --> 00:54:34,079
anatomy binary it will just compile

1473
00:54:34,079 --> 00:54:36,480
every module a static library so it will

1474
00:54:36,480 --> 00:54:38,480
compile it in a lib and then you can

1475
00:54:38,480 --> 00:54:40,960
just link it that compil link in time so

1476
00:54:40,960 --> 00:54:42,799
you will have a standalone binary or a

1477
00:54:42,799 --> 00:54:44,400
standalone dll that you can use against

1478
00:54:44,400 --> 00:54:45,839
your target

1479
00:54:45,839 --> 00:54:48,160
and if you actually provide if you're

1480
00:54:48,160 --> 00:54:49,680
actually trying to

1481
00:54:49,680 --> 00:54:52,720
compile a c application or a c-sharp dll

1482
00:54:52,720 --> 00:54:54,720
it will just compile every module in a

1483
00:54:54,720 --> 00:54:55,839
dll

1484
00:54:55,839 --> 00:54:58,160
and then it will just merge together

1485
00:54:58,160 --> 00:55:01,760
using iel merge

1486
00:55:01,760 --> 00:55:03,920
and then blend in av dot with your

1487
00:55:03,920 --> 00:55:06,079
target the blending is done as we've

1488
00:55:06,079 --> 00:55:09,280
seen before it will use metadata cloning

1489
00:55:09,280 --> 00:55:11,920
it's automatically supported and code

1490
00:55:11,920 --> 00:55:14,720
signing bot online using

1491
00:55:14,720 --> 00:55:18,720
tools like carbon copy or offline using

1492
00:55:18,720 --> 00:55:22,000
sig teeth or lazy sign approach

1493
00:55:22,000 --> 00:55:23,680
so this is

1494
00:55:23,680 --> 00:55:25,599
pretty much it

1495
00:55:25,599 --> 00:55:28,079
for the slide if you want to check the

1496
00:55:28,079 --> 00:55:29,200
the

1497
00:55:29,200 --> 00:55:31,280
the framework is here it's publicly

1498
00:55:31,280 --> 00:55:32,319
available

1499
00:55:32,319 --> 00:55:34,079
and please check it out actually and

1500
00:55:34,079 --> 00:55:37,200
send me like bugs uh like feature you

1501
00:55:37,200 --> 00:55:39,520
would like to see something to that you

1502
00:55:39,520 --> 00:55:41,119
would like to be improved

1503
00:55:41,119 --> 00:55:43,440
uh because yes that would be appreciated

1504
00:55:43,440 --> 00:55:46,160
i'm not telling you just take fork and

1505
00:55:46,160 --> 00:55:48,880
start coding yourself and send me the

1506
00:55:48,880 --> 00:55:52,079
pull request the pull request is but

1507
00:55:52,079 --> 00:55:53,280
whatever you can do is really

1508
00:55:53,280 --> 00:55:55,520
appreciated that this stage even if you

1509
00:55:55,520 --> 00:55:58,079
can try it against your edr and just

1510
00:55:58,079 --> 00:56:02,319
send me the result would be just amazing

1511
00:56:02,319 --> 00:56:04,960
and that's it i guess

1512
00:56:04,960 --> 00:56:09,240
that's it are there any questions

1513
00:56:11,780 --> 00:56:17,359
[Applause]

1514
00:56:17,359 --> 00:56:19,680
yes

1515
00:56:24,720 --> 00:56:27,200
no unit's not on

1516
00:56:27,200 --> 00:56:30,200
no

1517
00:56:37,200 --> 00:56:39,919
the microphone

1518
00:56:43,520 --> 00:56:47,599
everything stops at five it's fine

1519
00:56:48,160 --> 00:56:50,559
yeah sorry everyone has to go home

1520
00:56:50,559 --> 00:56:53,799
no questions

1521
00:57:13,119 --> 00:57:15,760
well if you would jump after the edr

1522
00:57:15,760 --> 00:57:17,680
then the edr will still see what you're

1523
00:57:17,680 --> 00:57:19,599
doing right so that doesn't really make

1524
00:57:19,599 --> 00:57:22,079
a lot of sense

1525
00:57:22,160 --> 00:57:24,480
yes

1526
00:57:25,520 --> 00:57:27,920
oh okay so you want to

1527
00:57:27,920 --> 00:57:30,480
yeah okay yeah you could do that that

1528
00:57:30,480 --> 00:57:32,880
might definitely work but i don't really

1529
00:57:32,880 --> 00:57:36,799
see the added value in hooking

1530
00:57:36,799 --> 00:57:39,799
yeah

1531
00:57:47,200 --> 00:57:48,799
right if there are

1532
00:57:48,799 --> 00:57:51,040
no other questions then i'd like to

1533
00:57:51,040 --> 00:57:53,440
thank you all for your attention and we

1534
00:57:53,440 --> 00:57:54,960
were the last stock so i don't know if

1535
00:57:54,960 --> 00:57:57,040
tom you want to uh yeah we're gonna do a

1536
00:57:57,040 --> 00:57:59,119
quick outro so right but please round of

1537
00:57:59,119 --> 00:58:02,400
applause for these guys

1538
00:58:02,400 --> 00:58:08,620
[Applause]

