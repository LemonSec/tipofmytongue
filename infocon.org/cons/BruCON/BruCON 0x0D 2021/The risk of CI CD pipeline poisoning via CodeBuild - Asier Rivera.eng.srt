1
00:00:00,240 --> 00:00:02,480
hello everybody uh welcome

2
00:00:02,480 --> 00:00:05,120
um yeah i will be talking about cicd

3
00:00:05,120 --> 00:00:07,120
pipelines which

4
00:00:07,120 --> 00:00:08,890
have become a very important

5
00:00:08,890 --> 00:00:09,920
[Music]

6
00:00:09,920 --> 00:00:13,120
asset for companies with all the devops

7
00:00:13,120 --> 00:00:15,090
methodology and culture coming in

8
00:00:15,090 --> 00:00:16,160
[Music]

9
00:00:16,160 --> 00:00:18,640
and of course csv pipelines also require

10
00:00:18,640 --> 00:00:20,640
security around them so basically

11
00:00:20,640 --> 00:00:22,880
companies will set it up we'll configure

12
00:00:22,880 --> 00:00:23,600
it

13
00:00:23,600 --> 00:00:25,519
in a secure manner because we need that

14
00:00:25,519 --> 00:00:27,439
as we are trusting these pipelines to

15
00:00:27,439 --> 00:00:29,199
basically take code

16
00:00:29,199 --> 00:00:31,359
and most of the cases automatically drop

17
00:00:31,359 --> 00:00:33,680
it in a production environment of course

18
00:00:33,680 --> 00:00:36,480
over after some testing etc

19
00:00:36,480 --> 00:00:38,960
and today i would like to showcase how

20
00:00:38,960 --> 00:00:40,879
important it is to take

21
00:00:40,879 --> 00:00:43,520
care of this security as various small

22
00:00:43,520 --> 00:00:46,320
decisions can have quite a big impact

23
00:00:46,320 --> 00:00:48,719
to the point of breaking that trust

24
00:00:48,719 --> 00:00:51,600
built around the cic pipeline

25
00:00:51,600 --> 00:00:54,800
or as i like calling it poisoning

26
00:00:54,800 --> 00:00:56,800
the pipeline

27
00:00:56,800 --> 00:00:59,680
my name is asearivera fernandez i work

28
00:00:59,680 --> 00:01:03,280
as a technical expert at pwc

29
00:01:03,280 --> 00:01:06,159
but i grew up in spain in the north of

30
00:01:06,159 --> 00:01:08,960
spain in a small area called scaleria or

31
00:01:08,960 --> 00:01:11,119
the past country in english

32
00:01:11,119 --> 00:01:13,439
that's where i started studying computer

33
00:01:13,439 --> 00:01:15,600
sciences i did my bachelor over there

34
00:01:15,600 --> 00:01:16,880
and then i moved all the way to the

35
00:01:16,880 --> 00:01:18,960
other side of europe

36
00:01:18,960 --> 00:01:21,920
in sweden where i pursued my

37
00:01:21,920 --> 00:01:24,080
masters and i moved to

38
00:01:24,080 --> 00:01:26,640
belgium where i did my master's thesis

39
00:01:26,640 --> 00:01:30,000
at keraloven in the district department

40
00:01:30,000 --> 00:01:32,479
and as a small fact about me i really

41
00:01:32,479 --> 00:01:33,280
like

42
00:01:33,280 --> 00:01:35,119
brain storming and discussing crazy

43
00:01:35,119 --> 00:01:38,000
ideas with colleagues

44
00:01:38,000 --> 00:01:39,680
more often than not they bring to

45
00:01:39,680 --> 00:01:42,159
nowhere but sometimes you have some good

46
00:01:42,159 --> 00:01:44,399
ideas here and there right

47
00:01:44,399 --> 00:01:45,200
so

48
00:01:45,200 --> 00:01:47,920
uh going back into the topic

49
00:01:47,920 --> 00:01:50,479
um i started looking into cloud because

50
00:01:50,479 --> 00:01:52,560
i'm passionate about it i really believe

51
00:01:52,560 --> 00:01:54,399
that it has brought a lot of security

52
00:01:54,399 --> 00:01:55,600
features

53
00:01:55,600 --> 00:01:57,920
for a lot of companies around the world

54
00:01:57,920 --> 00:01:59,200
and i also

55
00:01:59,200 --> 00:02:01,280
have passion for application security

56
00:02:01,280 --> 00:02:04,240
and secure development so i decided to

57
00:02:04,240 --> 00:02:06,479
take a deep dive while i was doing this

58
00:02:06,479 --> 00:02:09,119
i started to wonder really

59
00:02:09,119 --> 00:02:10,959
how much do we understand

60
00:02:10,959 --> 00:02:13,200
cloud services

61
00:02:13,200 --> 00:02:15,280
when we're actually using them do we

62
00:02:15,280 --> 00:02:16,879
really see them as building blocks or do

63
00:02:16,879 --> 00:02:18,319
we actually

64
00:02:18,319 --> 00:02:20,400
look into the properties connectivity

65
00:02:20,400 --> 00:02:22,000
how they actually are built because they

66
00:02:22,000 --> 00:02:23,840
are not built for us they are built for

67
00:02:23,840 --> 00:02:26,080
everybody to try to fit as many

68
00:02:26,080 --> 00:02:27,760
situations as possible

69
00:02:27,760 --> 00:02:30,239
so i did a deep dive i focused on cicd

70
00:02:30,239 --> 00:02:33,040
pipelines in the cloud and i took aws as

71
00:02:33,040 --> 00:02:36,400
it is the major cloud provider worldwide

72
00:02:36,400 --> 00:02:39,680
once i got a confident amount of

73
00:02:39,680 --> 00:02:41,360
knowledge around it i decided to do some

74
00:02:41,360 --> 00:02:43,840
risk analysis some threat modeling and

75
00:02:43,840 --> 00:02:45,840
of course my goal was to really identify

76
00:02:45,840 --> 00:02:47,920
those properties

77
00:02:47,920 --> 00:02:51,040
and key areas that i needed to really

78
00:02:51,040 --> 00:02:52,959
take into account when trying to really

79
00:02:52,959 --> 00:02:55,200
tailor to security and build this trust

80
00:02:55,200 --> 00:02:58,319
around the csa pipeline

81
00:02:58,319 --> 00:03:00,720
so i went to aws and i looked to the

82
00:03:00,720 --> 00:03:02,640
code services which basically are the

83
00:03:02,640 --> 00:03:06,400
devops related services within aws um

84
00:03:06,400 --> 00:03:09,840
and as part of the of a generic devops

85
00:03:09,840 --> 00:03:12,720
pipeline uh with the faces yeah very

86
00:03:12,720 --> 00:03:14,800
simplified there are many of them every

87
00:03:14,800 --> 00:03:16,640
company has their own but basically the

88
00:03:16,640 --> 00:03:17,920
source part

89
00:03:17,920 --> 00:03:20,480
build phase test phase and deploy so we

90
00:03:20,480 --> 00:03:23,840
have the four sorry three aws code

91
00:03:23,840 --> 00:03:26,159
services code commit

92
00:03:26,159 --> 00:03:28,000
quite simple it's just a manage kit

93
00:03:28,000 --> 00:03:29,920
server so you have all your repositories

94
00:03:29,920 --> 00:03:32,400
with your branches you name it then

95
00:03:32,400 --> 00:03:35,599
there is code build which in a few words

96
00:03:35,599 --> 00:03:37,760
manages the build process with the sense

97
00:03:37,760 --> 00:03:39,840
of it will provide you a container that

98
00:03:39,840 --> 00:03:41,120
will run

99
00:03:41,120 --> 00:03:43,200
wherever you request the task that is

100
00:03:43,200 --> 00:03:45,280
set up so basically is the computational

101
00:03:45,280 --> 00:03:46,560
power

102
00:03:46,560 --> 00:03:48,159
for the test

103
00:03:48,159 --> 00:03:50,480
phase aws does not percept provide

104
00:03:50,480 --> 00:03:52,239
anything you can plug in some

105
00:03:52,239 --> 00:03:53,920
third-party tools or you can have your

106
00:03:53,920 --> 00:03:54,799
own

107
00:03:54,799 --> 00:03:57,200
scanners in a vm or something or you can

108
00:03:57,200 --> 00:03:59,599
also use code build again so the same

109
00:03:59,599 --> 00:04:01,360
that you can do some

110
00:04:01,360 --> 00:04:03,120
compilation commands you can also do

111
00:04:03,120 --> 00:04:04,640
some unit tests or whatever you want

112
00:04:04,640 --> 00:04:07,439
within the code build container and the

113
00:04:07,439 --> 00:04:08,480
last phase

114
00:04:08,480 --> 00:04:10,560
deploy so you have codeploy once more

115
00:04:10,560 --> 00:04:13,120
the name basically links to the face

116
00:04:13,120 --> 00:04:15,280
and here where

117
00:04:15,280 --> 00:04:17,279
code deploy provides is basically it

118
00:04:17,279 --> 00:04:20,000
allows you to simply identify the

119
00:04:20,000 --> 00:04:22,960
targets for the deployment and it will

120
00:04:22,960 --> 00:04:24,880
start the process and keep the execution

121
00:04:24,880 --> 00:04:25,919
running

122
00:04:25,919 --> 00:04:27,759
make sure that everything goes well and

123
00:04:27,759 --> 00:04:30,720
at the end monitor all that of course

124
00:04:30,720 --> 00:04:34,400
um these all you can uh basically set up

125
00:04:34,400 --> 00:04:36,800
manually uh you could also take care of

126
00:04:36,800 --> 00:04:38,560
the communication in between but because

127
00:04:38,560 --> 00:04:42,160
that is uh really difficult aws provides

128
00:04:42,160 --> 00:04:45,040
also code pipeline which basically will

129
00:04:45,040 --> 00:04:47,840
behind the scenes use the other ones

130
00:04:47,840 --> 00:04:49,280
and it will take care of a pipeline

131
00:04:49,280 --> 00:04:50,960
execution so it allows you to have

132
00:04:50,960 --> 00:04:52,240
different

133
00:04:52,240 --> 00:04:54,400
flows with you can have parallel

134
00:04:54,400 --> 00:04:56,000
executions

135
00:04:56,000 --> 00:04:57,440
also

136
00:04:57,440 --> 00:04:59,120
and it will take care of that execution

137
00:04:59,120 --> 00:05:00,639
it will make sure that it calls the

138
00:05:00,639 --> 00:05:02,240
right

139
00:05:02,240 --> 00:05:04,000
project so you could call code commit or

140
00:05:04,000 --> 00:05:05,440
it will call

141
00:05:05,440 --> 00:05:07,759
code build etc so that they are all

142
00:05:07,759 --> 00:05:09,919
running so basically it will execute the

143
00:05:09,919 --> 00:05:11,120
pipeline

144
00:05:11,120 --> 00:05:12,960
with the flow provided and make sure

145
00:05:12,960 --> 00:05:16,400
that everything is going fine

146
00:05:20,240 --> 00:05:22,880
and third there is a code star which

147
00:05:22,880 --> 00:05:25,199
just adds a new layer of abstraction

148
00:05:25,199 --> 00:05:26,320
here

149
00:05:26,320 --> 00:05:29,280
uses code pipeline underneath

150
00:05:29,280 --> 00:05:30,800
to for the infrastructure part for the

151
00:05:30,800 --> 00:05:32,560
computational part and of course it

152
00:05:32,560 --> 00:05:34,400
provides another types of extensions in

153
00:05:34,400 --> 00:05:36,400
this case a really easy way to configure

154
00:05:36,400 --> 00:05:37,520
ides

155
00:05:37,520 --> 00:05:39,600
to connect to the project and get access

156
00:05:39,600 --> 00:05:41,039
to the repo

157
00:05:41,039 --> 00:05:44,080
you also can put jira for issue tracking

158
00:05:44,080 --> 00:05:46,240
you can have extra monitoring on top of

159
00:05:46,240 --> 00:05:48,800
it so it's really nice for project level

160
00:05:48,800 --> 00:05:50,720
project management level and also allows

161
00:05:50,720 --> 00:05:52,880
to use other type of

162
00:05:52,880 --> 00:05:53,919
user

163
00:05:53,919 --> 00:05:55,600
access right management which is based

164
00:05:55,600 --> 00:05:57,600
on teams which provides the well-known

165
00:05:57,600 --> 00:06:01,039
owner contributor and viewer

166
00:06:01,039 --> 00:06:03,199
roles to the full it brings it to the

167
00:06:03,199 --> 00:06:04,840
full aws

168
00:06:04,840 --> 00:06:08,960
iam configuration so i would like to

169
00:06:08,960 --> 00:06:10,639
give you a bit more of insight and i

170
00:06:10,639 --> 00:06:12,400
will talk to you about two packages the

171
00:06:12,400 --> 00:06:13,919
source package

172
00:06:13,919 --> 00:06:16,000
this one is basically the zip file

173
00:06:16,000 --> 00:06:17,840
version of the repository so it's

174
00:06:17,840 --> 00:06:19,680
created by code commit with codes is

175
00:06:19,680 --> 00:06:21,199
basically you take the repository you

176
00:06:21,199 --> 00:06:23,600
snippet but and is used as input for

177
00:06:23,600 --> 00:06:25,440
code build most of the times so it

178
00:06:25,440 --> 00:06:27,280
contains source code media files

179
00:06:27,280 --> 00:06:29,199
wherever you can imagine that will be in

180
00:06:29,199 --> 00:06:31,120
the repository basically everything

181
00:06:31,120 --> 00:06:33,440
needed to compile and prepare that code

182
00:06:33,440 --> 00:06:36,000
into some application bundle at the end

183
00:06:36,000 --> 00:06:38,160
which is basically the artifact package

184
00:06:38,160 --> 00:06:40,160
this is the output of code build so once

185
00:06:40,160 --> 00:06:43,199
the code has been

186
00:06:43,199 --> 00:06:45,440
compiled or prepared

187
00:06:45,440 --> 00:06:47,120
and is used by code deploy which is

188
00:06:47,120 --> 00:06:48,720
basically the application bundle that

189
00:06:48,720 --> 00:06:51,280
will end up in an ec2 instance so

190
00:06:51,280 --> 00:06:53,919
installed via codeploy agent installed

191
00:06:53,919 --> 00:06:55,919
here running in the instance

192
00:06:55,919 --> 00:06:57,280
or it will

193
00:06:57,280 --> 00:07:00,319
land in a serverless via lambda or some

194
00:07:00,319 --> 00:07:03,199
container image etc and basically it

195
00:07:03,199 --> 00:07:04,639
includes the scripts

196
00:07:04,639 --> 00:07:06,720
information about the location of the of

197
00:07:06,720 --> 00:07:09,919
the files within this bundle or even

198
00:07:09,919 --> 00:07:11,599
in an ecr so

199
00:07:11,599 --> 00:07:13,680
container registry or whatever you need

200
00:07:13,680 --> 00:07:16,319
so that code deploy basically knows how

201
00:07:16,319 --> 00:07:19,599
to update the target resource

202
00:07:19,599 --> 00:07:21,440
for to the to the latest version of the

203
00:07:21,440 --> 00:07:23,759
application the example in the image is

204
00:07:23,759 --> 00:07:25,599
focusing on easy to instance is just

205
00:07:25,599 --> 00:07:26,880
like a

206
00:07:26,880 --> 00:07:29,759
java simple job application

207
00:07:29,759 --> 00:07:32,080
and then we have two files the first one

208
00:07:32,080 --> 00:07:33,599
is the build spec file

209
00:07:33,599 --> 00:07:35,919
this one is used by code build and for

210
00:07:35,919 --> 00:07:38,479
those more related to jenkins is

211
00:07:38,479 --> 00:07:41,199
jenkins pipelines or github actions

212
00:07:41,199 --> 00:07:42,639
basically

213
00:07:42,639 --> 00:07:44,560
it's a file that includes the steps the

214
00:07:44,560 --> 00:07:46,240
tasks to be executed within that

215
00:07:46,240 --> 00:07:48,319
container together with some properties

216
00:07:48,319 --> 00:07:50,319
environment variables secrets whatever

217
00:07:50,319 --> 00:07:51,840
you need

218
00:07:51,840 --> 00:07:54,240
and the container or code build will

219
00:07:54,240 --> 00:07:56,240
provide this to the container if it is

220
00:07:56,240 --> 00:07:58,400
set up at project level but it can also

221
00:07:58,400 --> 00:08:00,160
be provided as part of the source

222
00:08:00,160 --> 00:08:02,400
package so you can have it a file build

223
00:08:02,400 --> 00:08:05,199
a spec file in your repository code will

224
00:08:05,199 --> 00:08:07,280
find it out and will execute a step by

225
00:08:07,280 --> 00:08:08,800
step the commands

226
00:08:08,800 --> 00:08:11,360
the second one the app spec file is used

227
00:08:11,360 --> 00:08:13,120
by co-deploy

228
00:08:13,120 --> 00:08:14,800
it's very similar to the previous one

229
00:08:14,800 --> 00:08:18,240
but basically it tells

230
00:08:18,319 --> 00:08:20,720
code deploy what steps to to perform in

231
00:08:20,720 --> 00:08:21,680
order to

232
00:08:21,680 --> 00:08:24,840
take the installation of the new

233
00:08:24,840 --> 00:08:27,599
application and in the case of uh more

234
00:08:27,599 --> 00:08:29,840
microservice or container or serverless

235
00:08:29,840 --> 00:08:31,840
version it includes where exactly to

236
00:08:31,840 --> 00:08:33,839
locate the new container image or source

237
00:08:33,839 --> 00:08:35,760
code package and where it actually needs

238
00:08:35,760 --> 00:08:37,919
to to land

239
00:08:37,919 --> 00:08:38,958
and

240
00:08:38,958 --> 00:08:42,159
that's both files so now that we are all

241
00:08:42,159 --> 00:08:43,760
experts in

242
00:08:43,760 --> 00:08:47,279
cicd pipelines in the cloud

243
00:08:47,680 --> 00:08:49,839
i would like to ask for your input a bit

244
00:08:49,839 --> 00:08:50,959
so

245
00:08:50,959 --> 00:08:53,440
i will play a role of a new developer in

246
00:08:53,440 --> 00:08:54,640
the company

247
00:08:54,640 --> 00:08:57,440
and i need access rights to actually do

248
00:08:57,440 --> 00:08:58,480
my work

249
00:08:58,480 --> 00:09:00,959
and you the audience i would like you

250
00:09:00,959 --> 00:09:03,920
to be the administrator so basically

251
00:09:03,920 --> 00:09:06,720
your task is to define can i or

252
00:09:06,720 --> 00:09:09,279
can i not perform certain actions in the

253
00:09:09,279 --> 00:09:11,839
pipeline within aws

254
00:09:11,839 --> 00:09:14,000
uh we will have uh we will play around

255
00:09:14,000 --> 00:09:17,040
uh csd pipeline so two in this case one

256
00:09:17,040 --> 00:09:18,800
via code pipeline and the other one code

257
00:09:18,800 --> 00:09:21,040
star and basically they target an

258
00:09:21,040 --> 00:09:25,120
old-school bm deployment or lambdas

259
00:09:25,120 --> 00:09:27,519
for serverless

260
00:09:27,519 --> 00:09:31,360
and we also will take care of

261
00:09:31,360 --> 00:09:34,240
certain guidelines to say so that aws

262
00:09:34,240 --> 00:09:36,320
manages and provides which are the aws

263
00:09:36,320 --> 00:09:38,959
managed policies basically this policy

264
00:09:38,959 --> 00:09:40,640
is a file that contains a list of

265
00:09:40,640 --> 00:09:43,200
actions that are allowed or denied

266
00:09:43,200 --> 00:09:46,000
and aws creates these policies to help

267
00:09:46,000 --> 00:09:48,720
customers to

268
00:09:48,720 --> 00:09:50,320
to link uh

269
00:09:50,320 --> 00:09:51,760
which type of exercise should be

270
00:09:51,760 --> 00:09:53,600
provided for different roles in the

271
00:09:53,600 --> 00:09:55,680
table here you can see the ones related

272
00:09:55,680 --> 00:09:56,880
to code build

273
00:09:56,880 --> 00:09:58,480
and there are admin developer and

274
00:09:58,480 --> 00:10:02,640
read-only rows and i think it's fair to

275
00:10:02,640 --> 00:10:05,120
link the developer one to the target

276
00:10:05,120 --> 00:10:06,480
that we are looking for that you are

277
00:10:06,480 --> 00:10:08,240
looking for uh since i will be a

278
00:10:08,240 --> 00:10:09,440
developer

279
00:10:09,440 --> 00:10:11,839
and in the sense of uh in a

280
00:10:11,839 --> 00:10:13,440
site of course star as i already

281
00:10:13,440 --> 00:10:15,680
mentioned there are a role spin owner

282
00:10:15,680 --> 00:10:17,839
contributor viewer i think it's fair to

283
00:10:17,839 --> 00:10:20,320
say here that probably i will fall under

284
00:10:20,320 --> 00:10:23,920
the contributor one so let's start

285
00:10:23,920 --> 00:10:27,200
would you allow me to list builds

286
00:10:27,200 --> 00:10:30,480
this basically provides a list of bills

287
00:10:30,480 --> 00:10:32,480
these ids

288
00:10:32,480 --> 00:10:35,040
are linked to a unique execution of the

289
00:10:35,040 --> 00:10:37,519
code build project so every time you run

290
00:10:37,519 --> 00:10:39,120
a codewell project it will be linked to

291
00:10:39,120 --> 00:10:40,240
unique id

292
00:10:40,240 --> 00:10:43,200
and can you will you allow me to list

293
00:10:43,200 --> 00:10:45,120
these ids

294
00:10:45,120 --> 00:10:47,519
basically i will need these ids to later

295
00:10:47,519 --> 00:10:49,600
on uh request more information about

296
00:10:49,600 --> 00:10:51,920
that specific execution to see whether

297
00:10:51,920 --> 00:10:54,000
the status is green or something went

298
00:10:54,000 --> 00:10:55,680
wrong so i would like to ask the people

299
00:10:55,680 --> 00:10:57,519
that would like to allow me to do this

300
00:10:57,519 --> 00:11:00,640
to put their hands up

301
00:11:00,640 --> 00:11:02,959
okay i see quite a few and those that

302
00:11:02,959 --> 00:11:05,600
not that would not allow me to

303
00:11:05,600 --> 00:11:08,240
do this action i don't see anybody so if

304
00:11:08,240 --> 00:11:11,120
we follow the managed policies code

305
00:11:11,120 --> 00:11:13,360
build developer says yes why not

306
00:11:13,360 --> 00:11:15,760
and the contributor also is also yes so

307
00:11:15,760 --> 00:11:17,920
why not developer should be allowed to

308
00:11:17,920 --> 00:11:20,079
do list builds

309
00:11:20,079 --> 00:11:22,800
second could you allow me to delete the

310
00:11:22,800 --> 00:11:24,720
project basically deletes the build

311
00:11:24,720 --> 00:11:25,920
project so

312
00:11:25,920 --> 00:11:27,680
the full configuration everything goes

313
00:11:27,680 --> 00:11:28,640
down

314
00:11:28,640 --> 00:11:32,320
uh those that say yes put your hands up

315
00:11:32,320 --> 00:11:34,560
i see only one hand that's a brave

316
00:11:34,560 --> 00:11:37,200
person over there and those that say no

317
00:11:37,200 --> 00:11:39,680
don't allow a new joiner that makes more

318
00:11:39,680 --> 00:11:42,399
sense a lot of hands up of course

319
00:11:42,399 --> 00:11:45,440
aws manage policy for developers says no

320
00:11:45,440 --> 00:11:47,200
and the contributor

321
00:11:47,200 --> 00:11:49,680
contributor role also says no this makes

322
00:11:49,680 --> 00:11:51,360
sense because it will make a hole in the

323
00:11:51,360 --> 00:11:54,000
pipeline and something could go wrong

324
00:11:54,000 --> 00:11:56,880
third will you allow me to start a build

325
00:11:56,880 --> 00:11:59,519
just start running a new build of the

326
00:11:59,519 --> 00:12:03,279
project does that say yes

327
00:12:04,320 --> 00:12:07,279
quite hands yeah and those that say no

328
00:12:07,279 --> 00:12:09,440
let's see one hand

329
00:12:09,440 --> 00:12:12,160
if we follow code build developer

330
00:12:12,160 --> 00:12:14,000
role it says yes it will say the

331
00:12:14,000 --> 00:12:16,560
contributor role it says yes

332
00:12:16,560 --> 00:12:18,560
what i did was i really understood what

333
00:12:18,560 --> 00:12:20,720
all this means because it can be that

334
00:12:20,720 --> 00:12:23,040
star build doesn't just allow me to

335
00:12:23,040 --> 00:12:25,600
start running a build let me explain

336
00:12:25,600 --> 00:12:27,680
if you go further in the documentation

337
00:12:27,680 --> 00:12:29,120
you see there are some parameters in

338
00:12:29,120 --> 00:12:30,320
this case

339
00:12:30,320 --> 00:12:32,399
i highlight here artifacts override and

340
00:12:32,399 --> 00:12:34,959
build the spec override the first one

341
00:12:34,959 --> 00:12:38,320
allows me to modify the location of the

342
00:12:38,320 --> 00:12:40,079
output artifact

343
00:12:40,079 --> 00:12:42,160
for this bill only so it doesn't really

344
00:12:42,160 --> 00:12:44,480
change the generic configuration of the

345
00:12:44,480 --> 00:12:46,480
project so okay it doesn't sound that

346
00:12:46,480 --> 00:12:47,279
bad

347
00:12:47,279 --> 00:12:49,279
and the second one allows me to

348
00:12:49,279 --> 00:12:52,560
provide a new build aspect declaration

349
00:12:52,560 --> 00:12:54,959
in other words this the first one allows

350
00:12:54,959 --> 00:12:57,040
me to define the location

351
00:12:57,040 --> 00:12:59,120
for the output artifact and the second

352
00:12:59,120 --> 00:13:01,120
one allows me to run whatever i want in

353
00:13:01,120 --> 00:13:03,279
that container

354
00:13:03,279 --> 00:13:05,600
if it doesn't sound scary yet this could

355
00:13:05,600 --> 00:13:08,480
allow a developer to abuse a star build

356
00:13:08,480 --> 00:13:10,240
to exfiltrate data

357
00:13:10,240 --> 00:13:12,240
tamper with application and run

358
00:13:12,240 --> 00:13:13,839
privileged commands in the deployment

359
00:13:13,839 --> 00:13:14,880
server

360
00:13:14,880 --> 00:13:16,079
i think

361
00:13:16,079 --> 00:13:20,120
sounds quite bad in my opinion

362
00:13:22,720 --> 00:13:24,959
so how does this actually work

363
00:13:24,959 --> 00:13:27,839
first exfiltrate sensitive data option

364
00:13:27,839 --> 00:13:28,720
one

365
00:13:28,720 --> 00:13:31,360
a developer can define a new output

366
00:13:31,360 --> 00:13:33,760
location for the artifact so it can be

367
00:13:33,760 --> 00:13:35,920
like hey put it in my h3 bucket not the

368
00:13:35,920 --> 00:13:37,440
one managed by the company where i don't

369
00:13:37,440 --> 00:13:38,880
have access but

370
00:13:38,880 --> 00:13:42,399
just mine publicly open to right

371
00:13:42,399 --> 00:13:44,639
and code will be like yeah why not let's

372
00:13:44,639 --> 00:13:47,440
do the execution use the normal

373
00:13:47,440 --> 00:13:49,199
compilation process and at the end i

374
00:13:49,199 --> 00:13:52,000
will copy it somewhere else

375
00:13:52,000 --> 00:13:54,959
and it works at the end you get a valid

376
00:13:54,959 --> 00:13:56,800
application that you could sell in a

377
00:13:56,800 --> 00:13:58,959
black market or just do competency to

378
00:13:58,959 --> 00:14:01,199
your own company if you want

379
00:14:01,199 --> 00:14:03,120
and there is another option

380
00:14:03,120 --> 00:14:06,000
so this one takes advantage of the by

381
00:14:06,000 --> 00:14:08,000
default

382
00:14:08,000 --> 00:14:09,360
access to the internet that the

383
00:14:09,360 --> 00:14:11,360
container is provided because by default

384
00:14:11,360 --> 00:14:14,000
it will run in a bpc that has access to

385
00:14:14,000 --> 00:14:16,000
the internet so basically you override

386
00:14:16,000 --> 00:14:18,079
the build spec file and you do the

387
00:14:18,079 --> 00:14:20,639
compilation and at the end you put some

388
00:14:20,639 --> 00:14:23,519
scp sftp whatever copy over the internet

389
00:14:23,519 --> 00:14:25,360
to my server and you have a fresh

390
00:14:25,360 --> 00:14:26,880
application that

391
00:14:26,880 --> 00:14:28,720
you can use if you see think about paid

392
00:14:28,720 --> 00:14:30,399
applications sounds quite

393
00:14:30,399 --> 00:14:32,160
cheap

394
00:14:32,160 --> 00:14:35,120
number two tamper with the application

395
00:14:35,120 --> 00:14:37,040
similar approach you can define which

396
00:14:37,040 --> 00:14:39,680
commands to be to run in the container

397
00:14:39,680 --> 00:14:42,079
so why wouldn't those commands add some

398
00:14:42,079 --> 00:14:44,480
spiciness to the application bundles and

399
00:14:44,480 --> 00:14:47,440
malware some factor functionality

400
00:14:47,440 --> 00:14:50,160
and then you just wait that application

401
00:14:50,160 --> 00:14:52,160
bundle maybe sell

402
00:14:52,160 --> 00:14:54,000
maybe sold to two customers maybe

403
00:14:54,000 --> 00:14:56,399
installed in your own servers

404
00:14:56,399 --> 00:14:58,800
and this is quite similar to that attack

405
00:14:58,800 --> 00:15:00,880
that you may all have heard of which is

406
00:15:00,880 --> 00:15:02,800
called solar winds in that case they

407
00:15:02,800 --> 00:15:05,120
were not using containers it was a

408
00:15:05,120 --> 00:15:07,279
generic server that was always running

409
00:15:07,279 --> 00:15:09,279
where they got access but it's basically

410
00:15:09,279 --> 00:15:11,760
the same idea

411
00:15:11,760 --> 00:15:14,720
and number three run privileged commands

412
00:15:14,720 --> 00:15:16,800
in the deployment server similar

413
00:15:16,800 --> 00:15:18,959
approach once more all the time the same

414
00:15:18,959 --> 00:15:20,880
build the spec file i define which

415
00:15:20,880 --> 00:15:22,880
commands to run in the container and the

416
00:15:22,880 --> 00:15:24,399
container basically prepares the

417
00:15:24,399 --> 00:15:26,800
application bundle if you are using our

418
00:15:26,800 --> 00:15:29,519
pipeline this network needs to include

419
00:15:29,519 --> 00:15:31,360
this up spec file

420
00:15:31,360 --> 00:15:34,000
so my commands in the build spec file

421
00:15:34,000 --> 00:15:36,560
can add commands modify commands in the

422
00:15:36,560 --> 00:15:38,240
app spec file

423
00:15:38,240 --> 00:15:40,800
once this bundle gets selected for

424
00:15:40,800 --> 00:15:41,920
deployment

425
00:15:41,920 --> 00:15:45,360
the ec2 agent sorry the co-deploy agent

426
00:15:45,360 --> 00:15:47,600
installed in the ec2 machine will go and

427
00:15:47,600 --> 00:15:50,880
download that bundle the one that i

428
00:15:50,880 --> 00:15:53,120
on purpose added some malicious commands

429
00:15:53,120 --> 00:15:55,120
it will read the app spec file and it

430
00:15:55,120 --> 00:15:58,240
will execute my arbitrary commands

431
00:15:58,240 --> 00:16:00,639
this is a small um sorry

432
00:16:00,639 --> 00:16:02,720
this i am aware that i mentioned

433
00:16:02,720 --> 00:16:04,639
privilege commands and if you are

434
00:16:04,639 --> 00:16:05,920
wondering you don't really need a zero

435
00:16:05,920 --> 00:16:08,880
day you don't really need some fancy

436
00:16:08,880 --> 00:16:10,560
last second

437
00:16:10,560 --> 00:16:12,480
crazy idea of a hacker you need to use

438
00:16:12,480 --> 00:16:14,480
existing functionality

439
00:16:14,480 --> 00:16:16,639
which app spec file provides just a

440
00:16:16,639 --> 00:16:19,199
property called runners you serious root

441
00:16:19,199 --> 00:16:20,839
and that will elevate the

442
00:16:20,839 --> 00:16:23,680
privileges when running your malicious

443
00:16:23,680 --> 00:16:25,920
script in the server

444
00:16:25,920 --> 00:16:28,399
so quite simple

445
00:16:28,399 --> 00:16:30,320
there's a small issue here is how do we

446
00:16:30,320 --> 00:16:32,320
make sure that our artifacts of the

447
00:16:32,320 --> 00:16:34,160
poisoned artifact

448
00:16:34,160 --> 00:16:36,000
get installed

449
00:16:36,000 --> 00:16:37,519
is the one selected for deployment

450
00:16:37,519 --> 00:16:40,480
basically so one approach could be

451
00:16:40,480 --> 00:16:42,720
you first you run your poison build

452
00:16:42,720 --> 00:16:45,839
parallel to the legitimate build

453
00:16:45,839 --> 00:16:48,959
the goal is that the legitimate build

454
00:16:48,959 --> 00:16:51,120
finishes right before yours

455
00:16:51,120 --> 00:16:52,800
your poison one so when the poison one

456
00:16:52,800 --> 00:16:55,600
finishes it will overwrite the existing

457
00:16:55,600 --> 00:16:58,079
legitimate artifact package

458
00:16:58,079 --> 00:17:00,880
and three whenever the ec2 agent sorry

459
00:17:00,880 --> 00:17:02,800
the code deploy agent

460
00:17:02,800 --> 00:17:04,799
goes and downloads this artifact package

461
00:17:04,799 --> 00:17:06,400
since yours has overwritten the

462
00:17:06,400 --> 00:17:10,160
legitimate one it will be selected

463
00:17:10,319 --> 00:17:11,679
simple but

464
00:17:11,679 --> 00:17:13,839
when we're talking about code pipeline

465
00:17:13,839 --> 00:17:16,640
these names are randomized we can we

466
00:17:16,640 --> 00:17:19,199
cannot just say core build please go and

467
00:17:19,199 --> 00:17:22,079
write it in version 1.1 all these names

468
00:17:22,079 --> 00:17:24,240
are randomized completely

469
00:17:24,240 --> 00:17:26,000
not only the one of the artifact package

470
00:17:26,000 --> 00:17:28,079
but any package in between the steps

471
00:17:28,079 --> 00:17:29,760
with code pipeline they are completely

472
00:17:29,760 --> 00:17:32,000
randomized by code pipeline for

473
00:17:32,000 --> 00:17:33,679
versioning purposes

474
00:17:33,679 --> 00:17:36,080
so we need to figure out how to actually

475
00:17:36,080 --> 00:17:37,200
find the name

476
00:17:37,200 --> 00:17:38,799
so i look into it

477
00:17:38,799 --> 00:17:41,039
and of course a code pipeline needs to

478
00:17:41,039 --> 00:17:42,240
know

479
00:17:42,240 --> 00:17:43,679
what is the name of that randomized

480
00:17:43,679 --> 00:17:44,559
package

481
00:17:44,559 --> 00:17:46,640
he created created it and he will take

482
00:17:46,640 --> 00:17:48,559
care of managing it so there's an option

483
00:17:48,559 --> 00:17:50,720
be a code pipeline

484
00:17:50,720 --> 00:17:53,360
called list action executions

485
00:17:53,360 --> 00:17:54,880
which would allow to gather the

486
00:17:54,880 --> 00:17:57,039
information we're looking for the name

487
00:17:57,039 --> 00:17:59,039
of the randomized package

488
00:17:59,039 --> 00:18:00,559
of course i'm aware we were talking

489
00:18:00,559 --> 00:18:02,880
about code build for the developers so

490
00:18:02,880 --> 00:18:04,559
it may be that our developer doesn't

491
00:18:04,559 --> 00:18:05,520
have

492
00:18:05,520 --> 00:18:07,600
these access rights

493
00:18:07,600 --> 00:18:09,520
but this also allowed in the core

494
00:18:09,520 --> 00:18:11,840
pipeline read-only policy another aws

495
00:18:11,840 --> 00:18:14,080
managed policy for read-only role and

496
00:18:14,080 --> 00:18:16,480
our developer most likely wants to see

497
00:18:16,480 --> 00:18:18,160
the green lights in the full process of

498
00:18:18,160 --> 00:18:20,640
the execution so it can be that

499
00:18:20,640 --> 00:18:22,400
they have these access rights

500
00:18:22,400 --> 00:18:23,840
but in the case that you are not happy

501
00:18:23,840 --> 00:18:25,919
with this there's a second option using

502
00:18:25,919 --> 00:18:28,640
purely cover build you can code build

503
00:18:28,640 --> 00:18:30,799
for sure needs to know where to

504
00:18:30,799 --> 00:18:33,120
store that package somewhere at the end

505
00:18:33,120 --> 00:18:34,960
of the process so you will know it also

506
00:18:34,960 --> 00:18:37,360
so we just need in this case two actions

507
00:18:37,360 --> 00:18:39,360
to collect enough information to find

508
00:18:39,360 --> 00:18:40,480
out that

509
00:18:40,480 --> 00:18:42,880
randomized name and these two are also

510
00:18:42,880 --> 00:18:44,960
included in those that we follow before

511
00:18:44,960 --> 00:18:47,679
being the developer policy for uh code

512
00:18:47,679 --> 00:18:50,640
build and the code star contributor role

513
00:18:50,640 --> 00:18:52,880
so it could be the raw developer or most

514
00:18:52,880 --> 00:18:54,480
likely it will have

515
00:18:54,480 --> 00:18:57,840
option two at least

516
00:18:58,000 --> 00:19:00,480
so how does it actually work in real

517
00:19:00,480 --> 00:19:02,720
life

518
00:19:06,240 --> 00:19:08,240
i'd like to show you two

519
00:19:08,240 --> 00:19:10,799
demos the first one will be a

520
00:19:10,799 --> 00:19:12,880
pipeline using only code pipeline and

521
00:19:12,880 --> 00:19:13,919
below

522
00:19:13,919 --> 00:19:15,919
i manually set this up like a generic

523
00:19:15,919 --> 00:19:17,360
flow

524
00:19:17,360 --> 00:19:19,600
as a source i will use code commit

525
00:19:19,600 --> 00:19:22,320
for the build phase of course corbil

526
00:19:22,320 --> 00:19:23,280
what else

527
00:19:23,280 --> 00:19:25,600
for the other phase where all the unit

528
00:19:25,600 --> 00:19:27,200
testing all the other type of testing

529
00:19:27,200 --> 00:19:29,600
will be included i just put a manual

530
00:19:29,600 --> 00:19:32,160
check for simplicity and then we have

531
00:19:32,160 --> 00:19:33,360
code deploy

532
00:19:33,360 --> 00:19:35,120
which will basically take the bundle and

533
00:19:35,120 --> 00:19:37,760
target an ec2 instance that i have set

534
00:19:37,760 --> 00:19:39,440
up there's really nothing special about

535
00:19:39,440 --> 00:19:40,799
it

536
00:19:40,799 --> 00:19:42,960
and number two for serverless here i

537
00:19:42,960 --> 00:19:45,240
will use codestar i will use a

538
00:19:45,240 --> 00:19:47,679
pre-defined template so you i will

539
00:19:47,679 --> 00:19:49,440
create it in a second

540
00:19:49,440 --> 00:19:51,440
just a project like anybody could create

541
00:19:51,440 --> 00:19:55,360
using a standard and default aws setup

542
00:19:55,360 --> 00:19:58,240
this one has one face less

543
00:19:58,240 --> 00:20:00,000
it's only source build and deploy it

544
00:20:00,000 --> 00:20:02,400
uses code commit code build and for the

545
00:20:02,400 --> 00:20:04,960
deployment not really sure why

546
00:20:04,960 --> 00:20:06,640
they normally go for cloud formation

547
00:20:06,640 --> 00:20:08,559
instead of using code deploy and

548
00:20:08,559 --> 00:20:11,039
basically is a web application that

549
00:20:11,039 --> 00:20:11,919
is

550
00:20:11,919 --> 00:20:14,320
whose logic is in lambda so it targets a

551
00:20:14,320 --> 00:20:16,400
lambda function

552
00:20:16,400 --> 00:20:18,240
maybe a bit confusing but i will start

553
00:20:18,240 --> 00:20:19,840
just creating the second one because i

554
00:20:19,840 --> 00:20:22,720
will create it live

555
00:20:22,960 --> 00:20:24,240
so i will just create it and then we

556
00:20:24,240 --> 00:20:26,000
jump back to demo one

557
00:20:26,000 --> 00:20:28,080
so i will create just

558
00:20:28,080 --> 00:20:31,760
node.js lambda web application

559
00:20:31,760 --> 00:20:35,280
i'll give a name

560
00:20:35,280 --> 00:20:38,158
and let's create it

561
00:20:38,799 --> 00:20:40,559
this takes a few minutes that's why i

562
00:20:40,559 --> 00:20:42,320
created right now but let's keep it

563
00:20:42,320 --> 00:20:43,600
there working

564
00:20:43,600 --> 00:20:45,679
and let's go back to the

565
00:20:45,679 --> 00:20:48,159
first example which is the pipeline on

566
00:20:48,159 --> 00:20:49,360
the top

567
00:20:49,360 --> 00:20:51,280
to demonstrate this

568
00:20:51,280 --> 00:20:53,360
i will be using a tool that i developed

569
00:20:53,360 --> 00:20:56,720
you can find it in my github is free to

570
00:20:56,720 --> 00:20:59,440
use under your responsibility

571
00:20:59,440 --> 00:21:03,200
and basically is going to simulate or do

572
00:21:03,200 --> 00:21:05,440
the tasks that a developer will need to

573
00:21:05,440 --> 00:21:06,159
do

574
00:21:06,159 --> 00:21:08,799
in order to poison a pipeline first one

575
00:21:08,799 --> 00:21:10,960
being finding the randomized name

576
00:21:10,960 --> 00:21:13,120
starting a parallel poison build and

577
00:21:13,120 --> 00:21:14,880
then basically waiting

578
00:21:14,880 --> 00:21:17,039
sounds good for that i have two parts

579
00:21:17,039 --> 00:21:18,799
there is a script which is just a python

580
00:21:18,799 --> 00:21:20,720
script which basically does those three

581
00:21:20,720 --> 00:21:23,440
things and in for monitoring purposes i

582
00:21:23,440 --> 00:21:26,559
added an api that basically is a api

583
00:21:26,559 --> 00:21:28,559
gateway so url

584
00:21:28,559 --> 00:21:30,799
lambda that does the read and write on

585
00:21:30,799 --> 00:21:33,760
the dynamodb is basically a table with a

586
00:21:33,760 --> 00:21:36,320
poisson package id and then it follows

587
00:21:36,320 --> 00:21:39,679
with the status of it

588
00:21:39,679 --> 00:21:42,159
and how it works basically when the

589
00:21:42,159 --> 00:21:43,520
pipeline in the left-hand side is

590
00:21:43,520 --> 00:21:45,760
working as normal so i am building my

591
00:21:45,760 --> 00:21:48,400
legitimate um

592
00:21:48,400 --> 00:21:51,039
build process so my legitimate artifact

593
00:21:51,039 --> 00:21:52,960
the tool is going to be querying it's

594
00:21:52,960 --> 00:21:55,120
going to try to get that randomized name

595
00:21:55,120 --> 00:21:56,720
once it finds it it will start a

596
00:21:56,720 --> 00:22:00,080
poisoning pipeline poisoning build

597
00:22:00,080 --> 00:22:02,320
let's say that the name found was xyz so

598
00:22:02,320 --> 00:22:05,200
it will artifact overwrite xyz and it

599
00:22:05,200 --> 00:22:06,960
will do a poise on the script build the

600
00:22:06,960 --> 00:22:09,520
spec once that is done it will reach out

601
00:22:09,520 --> 00:22:11,760
to the api to let no way i poisoned a

602
00:22:11,760 --> 00:22:13,760
new one and it will start monitoring as

603
00:22:13,760 --> 00:22:16,320
of there that's basically it

604
00:22:16,320 --> 00:22:18,720
for the poison in build

605
00:22:18,720 --> 00:22:21,440
there is no much to worry about this

606
00:22:21,440 --> 00:22:23,200
execution because the tool basically

607
00:22:23,200 --> 00:22:26,000
does two things the first one is a post

608
00:22:26,000 --> 00:22:26,880
call

609
00:22:26,880 --> 00:22:30,080
to the cbpt api for monitoring purposes

610
00:22:30,080 --> 00:22:31,600
and also to demonstrate that i could

611
00:22:31,600 --> 00:22:34,000
exfiltrate data the same way i

612
00:22:34,000 --> 00:22:36,000
i'm able to reach out to the api i could

613
00:22:36,000 --> 00:22:37,919
take the secrets signing certificates

614
00:22:37,919 --> 00:22:40,799
whatever the build process uses

615
00:22:40,799 --> 00:22:42,480
number two create a file

616
00:22:42,480 --> 00:22:44,799
these are cppt was here file and they

617
00:22:44,799 --> 00:22:47,280
are created in the container and in the

618
00:22:47,280 --> 00:22:49,840
server in the case in the case of the

619
00:22:49,840 --> 00:22:51,200
container

620
00:22:51,200 --> 00:22:52,799
i added in the artifact package which

621
00:22:52,799 --> 00:22:54,559
allows us to demonstrate that i can also

622
00:22:54,559 --> 00:22:57,840
tamper with the application the same way

623
00:22:57,840 --> 00:23:00,240
and it also helps to monitor the status

624
00:23:00,240 --> 00:23:02,159
in the case that the api doesn't really

625
00:23:02,159 --> 00:23:04,320
work or your container is properly

626
00:23:04,320 --> 00:23:07,360
filled with our access to the internet

627
00:23:07,360 --> 00:23:09,520
and in the server case i will create in

628
00:23:09,520 --> 00:23:11,120
the root directory which of course

629
00:23:11,120 --> 00:23:12,480
requires root

630
00:23:12,480 --> 00:23:14,960
privileges and will demonstrate

631
00:23:14,960 --> 00:23:18,880
the part of running privilege commands

632
00:23:20,000 --> 00:23:22,080
so i have in the left hand side is the

633
00:23:22,080 --> 00:23:25,840
aws setup where i have the code pipeline

634
00:23:25,840 --> 00:23:28,480
pipeline as i showed up sorry we have

635
00:23:28,480 --> 00:23:30,320
the hello world pipeline

636
00:23:30,320 --> 00:23:33,200
it's a source phase using code commit

637
00:23:33,200 --> 00:23:36,880
i have a pl phase using code build

638
00:23:36,880 --> 00:23:39,760
some other space with a manual approval

639
00:23:39,760 --> 00:23:42,880
and deploy which uses code deploy this

640
00:23:42,880 --> 00:23:46,159
code deploy we'll call this machine here

641
00:23:46,159 --> 00:23:47,600
there's nothing really interesting about

642
00:23:47,600 --> 00:23:48,720
it

643
00:23:48,720 --> 00:23:51,360
it has some role set up easy to read

644
00:23:51,360 --> 00:23:54,400
only but it has a basic machine there's

645
00:23:54,400 --> 00:23:57,600
nothing really special about it

646
00:23:57,600 --> 00:23:59,440
and then i have my developer which is

647
00:23:59,440 --> 00:24:01,840
the aref dev

648
00:24:01,840 --> 00:24:04,320
and as you can see the only access right

649
00:24:04,320 --> 00:24:06,640
it has is code pipeline list action

650
00:24:06,640 --> 00:24:09,039
executions which will be option one

651
00:24:09,039 --> 00:24:12,080
and star build there is no boundaries

652
00:24:12,080 --> 00:24:15,039
there is no groups there is nothing else

653
00:24:15,039 --> 00:24:17,600
and the users don't worry i will delete

654
00:24:17,600 --> 00:24:19,600
these access keys later basically are

655
00:24:19,600 --> 00:24:23,120
the 37e which i will be using the python

656
00:24:23,120 --> 00:24:25,520
script

657
00:24:26,159 --> 00:24:28,960
so in python i hope it's big enough i'm

658
00:24:28,960 --> 00:24:31,120
basically calling my python script i

659
00:24:31,120 --> 00:24:34,080
will say target the hello world pipeline

660
00:24:34,080 --> 00:24:36,320
and i'm providing the access keys that

661
00:24:36,320 --> 00:24:38,720
i'm just showing for that developer

662
00:24:38,720 --> 00:24:40,960
the next information is the url and a

663
00:24:40,960 --> 00:24:43,520
small secret for the api

664
00:24:43,520 --> 00:24:45,600
which is basically created here

665
00:24:45,600 --> 00:24:47,919
this is just a cloudformation template

666
00:24:47,919 --> 00:24:49,679
and it's also available in github so

667
00:24:49,679 --> 00:24:52,000
it's really really easy to set up all

668
00:24:52,000 --> 00:24:54,720
the situation

669
00:24:55,120 --> 00:24:57,360
and we can run the tool so the first

670
00:24:57,360 --> 00:24:58,799
thing that is going to do is try to look

671
00:24:58,799 --> 00:25:00,400
for for artifacts

672
00:25:00,400 --> 00:25:02,400
as you can see it's already saying oops

673
00:25:02,400 --> 00:25:04,480
code build part didn't work which makes

674
00:25:04,480 --> 00:25:06,000
sense because it doesn't have the code

675
00:25:06,000 --> 00:25:07,679
build options

676
00:25:07,679 --> 00:25:08,480
uh

677
00:25:08,480 --> 00:25:10,240
access rights and then at any given

678
00:25:10,240 --> 00:25:11,760
moment there will be a pipeline

679
00:25:11,760 --> 00:25:14,799
execution that releases

680
00:25:14,799 --> 00:25:17,200
at this moment it will start as normal

681
00:25:17,200 --> 00:25:19,279
code community is going to provide the

682
00:25:19,279 --> 00:25:21,840
zip files of the source package

683
00:25:21,840 --> 00:25:25,039
this will take a few seconds

684
00:25:26,480 --> 00:25:28,720
depends a upon aws and how much

685
00:25:28,720 --> 00:25:31,679
availability they have

686
00:25:35,279 --> 00:25:37,520
that's done it goes to the build phase

687
00:25:37,520 --> 00:25:39,039
and in a few seconds in the right hand

688
00:25:39,039 --> 00:25:40,880
side you will see how the tool

689
00:25:40,880 --> 00:25:42,880
prints out a bit of information once it

690
00:25:42,880 --> 00:25:46,720
finds the randomized name

691
00:25:53,039 --> 00:25:54,480
sorry a bit of waiting is normally

692
00:25:54,480 --> 00:25:56,799
around 20 seconds

693
00:25:56,799 --> 00:25:59,520
so everything was fine

694
00:25:59,520 --> 00:26:02,159
there it is it already found the key

695
00:26:02,159 --> 00:26:03,960
which in this case we are talking about

696
00:26:03,960 --> 00:26:06,720
1mh6 something something

697
00:26:06,720 --> 00:26:08,960
it started a new poison build with the

698
00:26:08,960 --> 00:26:10,960
artifacts override for that specific

699
00:26:10,960 --> 00:26:14,799
artifact and of course our expected

700
00:26:14,799 --> 00:26:17,120
poison script and it has notified the

701
00:26:17,120 --> 00:26:18,720
api as i mentioned and it's just

702
00:26:18,720 --> 00:26:20,320
monitoring mode

703
00:26:20,320 --> 00:26:22,400
so in a few seconds once that the poison

704
00:26:22,400 --> 00:26:24,559
build executes you will reach out to the

705
00:26:24,559 --> 00:26:27,279
cppt api and we should see there it is

706
00:26:27,279 --> 00:26:29,440
the container already notified so it's

707
00:26:29,440 --> 00:26:31,120
running

708
00:26:31,120 --> 00:26:33,440
so at any given point from the

709
00:26:33,440 --> 00:26:36,000
legitimate bill finishing until now

710
00:26:36,000 --> 00:26:39,200
where our poison bill has finished

711
00:26:39,200 --> 00:26:41,760
the next phases can be

712
00:26:41,760 --> 00:26:44,320
continued

713
00:26:44,960 --> 00:26:47,360
and now when the deployment happens

714
00:26:47,360 --> 00:26:48,880
what is going to do is as explained

715
00:26:48,880 --> 00:26:51,440
before code deploy is going to grab

716
00:26:51,440 --> 00:26:54,320
my bundle instead of the legitimate one

717
00:26:54,320 --> 00:26:55,840
and there it is as you can see the

718
00:26:55,840 --> 00:26:58,400
server has been poisoned it replied as

719
00:26:58,400 --> 00:26:59,520
true

720
00:26:59,520 --> 00:27:01,600
and this is not the version available on

721
00:27:01,600 --> 00:27:04,000
github this does something else it does

722
00:27:04,000 --> 00:27:05,520
not just

723
00:27:05,520 --> 00:27:07,679
create files and so these are the actual

724
00:27:07,679 --> 00:27:09,440
access credentials from the easy to

725
00:27:09,440 --> 00:27:10,640
machine

726
00:27:10,640 --> 00:27:12,960
let me show you

727
00:27:12,960 --> 00:27:17,039
if i copy the same ones into my

728
00:27:19,120 --> 00:27:21,919
credentials file for aws

729
00:27:21,919 --> 00:27:24,159
oop

730
00:27:29,520 --> 00:27:33,799
i'm missing an i in there

731
00:27:40,000 --> 00:27:42,240
so if i now would just use that profile

732
00:27:42,240 --> 00:27:43,679
which is the one

733
00:27:43,679 --> 00:27:45,360
called easy2

734
00:27:45,360 --> 00:27:48,720
and i will get the color identity

735
00:27:48,720 --> 00:27:50,480
you can see that this is the instance

736
00:27:50,480 --> 00:27:51,760
that i showed you before it's the easy

737
00:27:51,760 --> 00:27:53,039
to read only

738
00:27:53,039 --> 00:27:55,120
role with the instance i did that and as

739
00:27:55,120 --> 00:27:56,880
you can see which is

740
00:27:56,880 --> 00:27:58,799
exactly the same instance as it was the

741
00:27:58,799 --> 00:28:01,600
deploy machine so at this moment i am

742
00:28:01,600 --> 00:28:03,840
the ec2 instance

743
00:28:03,840 --> 00:28:06,720
and if we look into

744
00:28:06,720 --> 00:28:08,320
what the developer was able to do which

745
00:28:08,320 --> 00:28:11,120
is my developer profile if i go to some

746
00:28:11,120 --> 00:28:14,320
s3ls this is not allowed because

747
00:28:14,320 --> 00:28:15,679
of course it doesn't have those access

748
00:28:15,679 --> 00:28:19,440
rights but if i go to the

749
00:28:19,440 --> 00:28:21,600
institute profile

750
00:28:21,600 --> 00:28:24,159
and i get access to all my s3

751
00:28:24,159 --> 00:28:25,840
buckets

752
00:28:25,840 --> 00:28:27,679
so that is the first

753
00:28:27,679 --> 00:28:29,600
use case for this stack

754
00:28:29,600 --> 00:28:32,880
there is more if we connect to the

755
00:28:32,880 --> 00:28:35,679
ec2 machine

756
00:28:42,640 --> 00:28:44,960
and i just list the

757
00:28:44,960 --> 00:28:47,360
root directory we can see that the cppd

758
00:28:47,360 --> 00:28:50,399
was here server which was created

759
00:28:50,399 --> 00:28:52,080
two minutes ago when the execution was

760
00:28:52,080 --> 00:28:54,399
running was created as root owned by

761
00:28:54,399 --> 00:28:55,520
root so

762
00:28:55,520 --> 00:28:57,279
root commands can be executed in the

763
00:28:57,279 --> 00:28:59,840
deployment server

764
00:29:02,080 --> 00:29:06,159
and that's for example number one

765
00:29:06,159 --> 00:29:09,520
so example number number two here code

766
00:29:09,520 --> 00:29:10,399
star

767
00:29:10,399 --> 00:29:12,640
i looked into it and of course

768
00:29:12,640 --> 00:29:15,120
i will just simplify it a bit and i will

769
00:29:15,120 --> 00:29:17,520
only demonstrate tamper with application

770
00:29:17,520 --> 00:29:20,880
so i will try to modify the lambda

771
00:29:20,880 --> 00:29:22,559
and here we are not talking about code

772
00:29:22,559 --> 00:29:25,039
deploy so i started looking into how can

773
00:29:25,039 --> 00:29:27,760
i do it and before i really had to

774
00:29:27,760 --> 00:29:29,200
hit my head against the wall or

775
00:29:29,200 --> 00:29:31,600
something like that i realized that the

776
00:29:31,600 --> 00:29:34,720
code build server the code build project

777
00:29:34,720 --> 00:29:37,039
set up by aws for us

778
00:29:37,039 --> 00:29:39,520
has already enough access rights to go

779
00:29:39,520 --> 00:29:41,200
to the lambda function and modify the

780
00:29:41,200 --> 00:29:42,159
code

781
00:29:42,159 --> 00:29:43,279
i don't know why they use cloud

782
00:29:43,279 --> 00:29:44,880
formation i guess some kind of blue

783
00:29:44,880 --> 00:29:47,200
green type of deployment keep track of

784
00:29:47,200 --> 00:29:48,960
how everything is going but basically

785
00:29:48,960 --> 00:29:51,440
code bill will be able to go and call

786
00:29:51,440 --> 00:29:53,039
that lambda function so let me

787
00:29:53,039 --> 00:29:55,120
demonstrate this one

788
00:29:55,120 --> 00:29:57,520
the left hand side we have the

789
00:29:57,520 --> 00:29:58,880
brucom

790
00:29:58,880 --> 00:30:01,679
codestar project and as i mentioned

791
00:30:01,679 --> 00:30:04,559
before it has a pipeline

792
00:30:04,559 --> 00:30:06,320
this pipeline run for the first time a

793
00:30:06,320 --> 00:30:08,799
few seconds ago you can see the source

794
00:30:08,799 --> 00:30:11,520
sorry the source with code commit

795
00:30:11,520 --> 00:30:13,520
build with code build and deploy which

796
00:30:13,520 --> 00:30:15,679
has two steps but basically is using

797
00:30:15,679 --> 00:30:17,760
cloud formation

798
00:30:17,760 --> 00:30:21,720
if i go to the application

799
00:30:22,080 --> 00:30:23,760
you can see a nice application really

800
00:30:23,760 --> 00:30:26,159
simple in five minutes you have a web up

801
00:30:26,159 --> 00:30:27,520
up and running and you have your nice

802
00:30:27,520 --> 00:30:30,000
cac pipeline so you can go to repository

803
00:30:30,000 --> 00:30:33,600
do your changes and it runs right

804
00:30:33,600 --> 00:30:36,399
then i will just set up the developer

805
00:30:36,399 --> 00:30:38,240
it's the same profile as before i will

806
00:30:38,240 --> 00:30:39,919
remove the

807
00:30:39,919 --> 00:30:41,919
code pipeline position in

808
00:30:41,919 --> 00:30:44,720
access right so it's fresh

809
00:30:44,720 --> 00:30:46,640
and i will just add it into the team

810
00:30:46,640 --> 00:30:48,320
members

811
00:30:48,320 --> 00:30:51,360
as contributor

812
00:30:51,360 --> 00:30:54,159
at this moment i have

813
00:30:54,159 --> 00:30:56,480
a contributor developer that has joined

814
00:30:56,480 --> 00:30:59,440
my broken project

815
00:31:00,320 --> 00:31:03,720
there it is

816
00:31:04,080 --> 00:31:05,919
now what does the developer need to do

817
00:31:05,919 --> 00:31:07,919
it's rather simple we need to build a

818
00:31:07,919 --> 00:31:09,600
spec file in this case i don't have any

819
00:31:09,600 --> 00:31:11,919
tool because it's rather easy to

820
00:31:11,919 --> 00:31:13,760
actually execute this

821
00:31:13,760 --> 00:31:15,760
uh so i just have the build spec file

822
00:31:15,760 --> 00:31:18,000
which looks like this quite simple a lot

823
00:31:18,000 --> 00:31:19,519
of text but is

824
00:31:19,519 --> 00:31:21,440
nothing really to worry about

825
00:31:21,440 --> 00:31:22,960
there is a lambda function which is the

826
00:31:22,960 --> 00:31:25,200
aren of the lambda function that we will

827
00:31:25,200 --> 00:31:28,240
be targeting the deploy one and you may

828
00:31:28,240 --> 00:31:30,840
wonder how did i find this name

829
00:31:30,840 --> 00:31:33,919
um it's by default generated so the only

830
00:31:33,919 --> 00:31:36,000
difference is the broken but even if

831
00:31:36,000 --> 00:31:38,240
this will not be the case

832
00:31:38,240 --> 00:31:40,960
the aws developer profile via the

833
00:31:40,960 --> 00:31:43,760
contributor

834
00:31:43,760 --> 00:31:46,080
contributor role it already has enough

835
00:31:46,080 --> 00:31:48,480
access rights to list lambda functions

836
00:31:48,480 --> 00:31:49,600
all of them

837
00:31:49,600 --> 00:31:52,000
or at least most of them and it could be

838
00:31:52,000 --> 00:31:54,240
able to find it so basically my build

839
00:31:54,240 --> 00:31:56,799
spec file is just set in a target as

840
00:31:56,799 --> 00:31:59,679
that lambda function with that this

841
00:31:59,679 --> 00:32:03,320
base64 encoded chunk is basically the

842
00:32:03,320 --> 00:32:04,880
index.html

843
00:32:04,880 --> 00:32:06,799
and i have another chunk which is the

844
00:32:06,799 --> 00:32:08,960
index javascript

845
00:32:08,960 --> 00:32:11,039
after that i just create a zip file

846
00:32:11,039 --> 00:32:12,720
including those two

847
00:32:12,720 --> 00:32:16,720
and i call aws lambda update function

848
00:32:16,720 --> 00:32:18,559
my target function and this is the new

849
00:32:18,559 --> 00:32:21,360
zip file and i state it as published so

850
00:32:21,360 --> 00:32:23,440
no don't only update it but publish it

851
00:32:23,440 --> 00:32:25,840
make it ready then i just get the

852
00:32:25,840 --> 00:32:28,559
version of this new

853
00:32:28,559 --> 00:32:29,519
code

854
00:32:29,519 --> 00:32:31,440
because i need to change the alias so

855
00:32:31,440 --> 00:32:33,760
the way it works the api will call

856
00:32:33,760 --> 00:32:35,600
lambda and it goes based on an alias

857
00:32:35,600 --> 00:32:37,919
name which is called live

858
00:32:37,919 --> 00:32:39,919
so i basically say for the lambda

859
00:32:39,919 --> 00:32:43,440
function the live alias is going to be

860
00:32:43,440 --> 00:32:45,679
set to the latest version so the one i

861
00:32:45,679 --> 00:32:46,880
just

862
00:32:46,880 --> 00:32:48,240
uploaded

863
00:32:48,240 --> 00:32:50,399
and it's that simple so at this moment

864
00:32:50,399 --> 00:32:53,559
the developer

865
00:32:56,080 --> 00:32:57,440
needs to

866
00:32:57,440 --> 00:33:00,320
run the code build so code build star

867
00:33:00,320 --> 00:33:01,200
build

868
00:33:01,200 --> 00:33:02,559
project name

869
00:33:02,559 --> 00:33:05,200
broken build spec override the file that

870
00:33:05,200 --> 00:33:07,200
you see on the left hand side

871
00:33:07,200 --> 00:33:09,360
um artifacts overwrite we don't really

872
00:33:09,360 --> 00:33:10,960
need artifacts overwrite we are not

873
00:33:10,960 --> 00:33:12,880
trying to exfiltrate those or we don't

874
00:33:12,880 --> 00:33:15,039
really go to be a code deploy so we

875
00:33:15,039 --> 00:33:16,080
don't need it

876
00:33:16,080 --> 00:33:18,000
source i don't want the sources here for

877
00:33:18,000 --> 00:33:21,679
now i will just go no source

878
00:33:22,159 --> 00:33:25,120
and run so our poisoning build is

879
00:33:25,120 --> 00:33:27,279
running the nice part of all this is if

880
00:33:27,279 --> 00:33:28,960
you go to your

881
00:33:28,960 --> 00:33:31,120
codestar point of view and you check the

882
00:33:31,120 --> 00:33:33,600
pipeline

883
00:33:37,039 --> 00:33:39,600
nothing is happening you don't see it

884
00:33:39,600 --> 00:33:41,760
you don't have a view on codestar to

885
00:33:41,760 --> 00:33:44,480
realize there is a code build running

886
00:33:44,480 --> 00:33:46,159
code bill says it succeeded this is the

887
00:33:46,159 --> 00:33:47,760
previous one nine minutes ago you

888
00:33:47,760 --> 00:33:50,000
actually need to go lower in the

889
00:33:50,000 --> 00:33:54,000
extraction layers to look for your

890
00:33:54,000 --> 00:33:55,440
poison build

891
00:33:55,440 --> 00:33:57,360
as you can see is in progress

892
00:33:57,360 --> 00:34:01,199
it takes around few seconds

893
00:34:05,519 --> 00:34:07,039
let's refresh it it should be finished

894
00:34:07,039 --> 00:34:10,719
right now there it is they succeeded

895
00:34:10,719 --> 00:34:12,079
so

896
00:34:12,079 --> 00:34:14,560
as simple as that an application

897
00:34:14,560 --> 00:34:15,918
in production

898
00:34:15,918 --> 00:34:18,079
can be quickly changed into whatever

899
00:34:18,079 --> 00:34:19,599
that the developer wants as a

900
00:34:19,599 --> 00:34:22,240
contributor

901
00:34:26,719 --> 00:34:29,199
so those were both demos let's go back

902
00:34:29,199 --> 00:34:32,359
to presentation

903
00:34:35,119 --> 00:34:37,839
so with all this information um

904
00:34:37,839 --> 00:34:39,760
i decided to bring it back with

905
00:34:39,760 --> 00:34:41,839
colleagues and put it

906
00:34:41,839 --> 00:34:43,679
a bit under stress to see whether

907
00:34:43,679 --> 00:34:44,560
actually

908
00:34:44,560 --> 00:34:46,879
these are relevant issues

909
00:34:46,879 --> 00:34:49,040
for real world and

910
00:34:49,040 --> 00:34:51,040
is exfiltration really an issue since a

911
00:34:51,040 --> 00:34:53,040
developer already can read documentation

912
00:34:53,040 --> 00:34:55,359
can read code and a lot of them have

913
00:34:55,359 --> 00:34:57,440
access to really sensitive

914
00:34:57,440 --> 00:34:59,520
data from the company and all that is

915
00:34:59,520 --> 00:35:01,040
true

916
00:35:01,040 --> 00:35:03,520
but there are cases where especially new

917
00:35:03,520 --> 00:35:05,440
joining developers don't have access to

918
00:35:05,440 --> 00:35:07,520
the full project they only have certain

919
00:35:07,520 --> 00:35:09,680
libraries or certain uh

920
00:35:09,680 --> 00:35:11,280
branches etc

921
00:35:11,280 --> 00:35:12,960
and here code build needs access to

922
00:35:12,960 --> 00:35:14,000
everything

923
00:35:14,000 --> 00:35:16,720
so any library third party whatever

924
00:35:16,720 --> 00:35:19,040
you're using into the build process will

925
00:35:19,040 --> 00:35:21,119
be accessible for that developer or

926
00:35:21,119 --> 00:35:22,880
anybody with those access rights

927
00:35:22,880 --> 00:35:25,440
including signing certificates passwords

928
00:35:25,440 --> 00:35:27,440
that you're using to

929
00:35:27,440 --> 00:35:29,359
set up the application any kind of

930
00:35:29,359 --> 00:35:31,760
configuration information like private

931
00:35:31,760 --> 00:35:33,920
urls for the internal infrastructure

932
00:35:33,920 --> 00:35:36,400
whatever it is used by code build is

933
00:35:36,400 --> 00:35:38,880
accessible by the developer

934
00:35:38,880 --> 00:35:41,040
is tampering really an issue application

935
00:35:41,040 --> 00:35:43,520
tampering since a developer can already

936
00:35:43,520 --> 00:35:44,400
write code

937
00:35:44,400 --> 00:35:47,040
and push it into the

938
00:35:47,040 --> 00:35:48,880
repository which will eventually go to

939
00:35:48,880 --> 00:35:51,119
the pipeline and this is true but this

940
00:35:51,119 --> 00:35:53,119
is also known risk that's why

941
00:35:53,119 --> 00:35:56,079
secures dlc environments should

942
00:35:56,079 --> 00:35:57,440
implement

943
00:35:57,440 --> 00:35:59,839
security mechanisms against this like

944
00:35:59,839 --> 00:36:02,640
peer code review so that no one single

945
00:36:02,640 --> 00:36:05,359
person can write code that without being

946
00:36:05,359 --> 00:36:07,119
reviewed by anybody else ends up in the

947
00:36:07,119 --> 00:36:08,560
deployment server

948
00:36:08,560 --> 00:36:11,680
um so basically cobil allows us to

949
00:36:11,680 --> 00:36:15,040
bypass whatever you have set up

950
00:36:15,040 --> 00:36:15,760
for

951
00:36:15,760 --> 00:36:17,680
us check for that code to be used in

952
00:36:17,680 --> 00:36:20,000
your pipeline because it allows to

953
00:36:20,000 --> 00:36:23,040
in a shadowy way add new code

954
00:36:23,040 --> 00:36:23,920
third

955
00:36:23,920 --> 00:36:26,640
is that execution really an issue

956
00:36:26,640 --> 00:36:29,280
since a developer and here is

957
00:36:29,280 --> 00:36:31,040
more uh one

958
00:36:31,040 --> 00:36:34,880
person army situations or really fast uh

959
00:36:34,880 --> 00:36:37,359
devops situations uh there can be a

960
00:36:37,359 --> 00:36:39,520
developer that already has access to the

961
00:36:39,520 --> 00:36:41,839
server and can run some administrative

962
00:36:41,839 --> 00:36:43,760
commands to install packages or

963
00:36:43,760 --> 00:36:46,880
configure certain things in a quick fix

964
00:36:46,880 --> 00:36:48,720
or patch you never know

965
00:36:48,720 --> 00:36:50,800
that is true but in all those cases this

966
00:36:50,800 --> 00:36:52,880
will be a known risk and there will be

967
00:36:52,880 --> 00:36:55,839
mitigating

968
00:36:55,920 --> 00:36:57,599
actions taken

969
00:36:57,599 --> 00:36:58,720
hopefully

970
00:36:58,720 --> 00:37:01,040
where that administrator will have lower

971
00:37:01,040 --> 00:37:03,280
rights or to a specific server or to a

972
00:37:03,280 --> 00:37:05,520
specific part of the server or only to

973
00:37:05,520 --> 00:37:07,839
put some patching etc so it will be

974
00:37:07,839 --> 00:37:09,280
limited in some way or you will have

975
00:37:09,280 --> 00:37:11,280
some monitoring and auditing second

976
00:37:11,280 --> 00:37:13,680
factor authentication you name it but

977
00:37:13,680 --> 00:37:15,680
cool build allows to bypass all those

978
00:37:15,680 --> 00:37:17,599
and just run root commands

979
00:37:17,599 --> 00:37:19,760
on the server and once it has been

980
00:37:19,760 --> 00:37:22,240
breached good luck for forensic teams to

981
00:37:22,240 --> 00:37:24,320
realize that it was co-deploy agent the

982
00:37:24,320 --> 00:37:28,160
one actually doing the dirty job

983
00:37:28,160 --> 00:37:30,160
and the last one these developers are

984
00:37:30,160 --> 00:37:32,320
actually our people we have coffee with

985
00:37:32,320 --> 00:37:34,560
them we work with them so we trust them

986
00:37:34,560 --> 00:37:36,960
right and this is true but i don't

987
00:37:36,960 --> 00:37:38,320
believe it will be the first time that

988
00:37:38,320 --> 00:37:40,320
some publicly available github

989
00:37:40,320 --> 00:37:42,880
repository has the credentials of a

990
00:37:42,880 --> 00:37:44,079
developer

991
00:37:44,079 --> 00:37:47,359
that sneaked into the public

992
00:37:47,359 --> 00:37:49,599
also there is always other things to

993
00:37:49,599 --> 00:37:52,560
consider like blackmailing or

994
00:37:52,560 --> 00:37:54,560
money so developers being paid for their

995
00:37:54,560 --> 00:37:56,800
credentials and there are other breaches

996
00:37:56,800 --> 00:37:58,160
that will allow

997
00:37:58,160 --> 00:37:59,920
some malicious actors to gain access to

998
00:37:59,920 --> 00:38:02,240
developer access rights and more often

999
00:38:02,240 --> 00:38:04,560
than not these are not as monitored and

1000
00:38:04,560 --> 00:38:06,640
controlled as admin level so probably

1001
00:38:06,640 --> 00:38:09,359
they can still be used so i think they

1002
00:38:09,359 --> 00:38:10,720
are relevant

1003
00:38:10,720 --> 00:38:13,599
for the real world

1004
00:38:13,599 --> 00:38:16,800
so with all these together

1005
00:38:16,800 --> 00:38:20,240
i prepared a document and i notified aws

1006
00:38:20,240 --> 00:38:22,800
look i don't think there is like a zero

1007
00:38:22,800 --> 00:38:25,280
day in your setup of course it's not

1008
00:38:25,280 --> 00:38:27,280
really a technical

1009
00:38:27,280 --> 00:38:29,760
exploit i'm just using whatever tools

1010
00:38:29,760 --> 00:38:31,040
you provided me

1011
00:38:31,040 --> 00:38:32,960
and i think there may be something that

1012
00:38:32,960 --> 00:38:34,800
went missing in the moment of doing

1013
00:38:34,800 --> 00:38:36,720
threat modelling or this is a really

1014
00:38:36,720 --> 00:38:40,320
powerful action that you are using quite

1015
00:38:40,320 --> 00:38:41,599
simply with

1016
00:38:41,599 --> 00:38:42,960
low level

1017
00:38:42,960 --> 00:38:44,160
users

1018
00:38:44,160 --> 00:38:45,040
so

1019
00:38:45,040 --> 00:38:46,800
not only that but the documentation is

1020
00:38:46,800 --> 00:38:48,640
not really clear about the power that it

1021
00:38:48,640 --> 00:38:50,960
has starts running a bill doesn't say

1022
00:38:50,960 --> 00:38:53,359
anywhere be careful it can be that it

1023
00:38:53,359 --> 00:38:55,760
allows to poison your pipeline

1024
00:38:55,760 --> 00:38:58,400
so i said we told them maybe there is an

1025
00:38:58,400 --> 00:39:00,400
issue there and some redesign or

1026
00:39:00,400 --> 00:39:01,839
something has to be

1027
00:39:01,839 --> 00:39:03,359
done

1028
00:39:03,359 --> 00:39:07,359
to which aws said this runs as expected

1029
00:39:07,359 --> 00:39:09,760
and is the problem of our customers to

1030
00:39:09,760 --> 00:39:12,960
decide who has access to starbuild

1031
00:39:12,960 --> 00:39:14,320
and indeed we can start a full

1032
00:39:14,320 --> 00:39:17,200
discussion here to with regards to the

1033
00:39:17,200 --> 00:39:19,280
augmentation doesn't say enough

1034
00:39:19,280 --> 00:39:21,200
their own managed policies providers

1035
00:39:21,200 --> 00:39:23,440
access rights whatever we want but let's

1036
00:39:23,440 --> 00:39:25,680
focus on solving the issue

1037
00:39:25,680 --> 00:39:27,680
so what would i recommend you to do go

1038
00:39:27,680 --> 00:39:29,920
check your pipelines and evaluate again

1039
00:39:29,920 --> 00:39:31,359
your access rights

1040
00:39:31,359 --> 00:39:33,599
first if you can deny the star build

1041
00:39:33,599 --> 00:39:35,599
access just do it

1042
00:39:35,599 --> 00:39:38,640
especially production pipelines etc

1043
00:39:38,640 --> 00:39:40,800
cancel and nobody should be allowed to

1044
00:39:40,800 --> 00:39:43,440
use a star build doesn't make sense

1045
00:39:43,440 --> 00:39:45,440
normally you can all this process can be

1046
00:39:45,440 --> 00:39:47,680
actually automated by triggering when

1047
00:39:47,680 --> 00:39:50,240
new code is pushed to the to the master

1048
00:39:50,240 --> 00:39:51,280
branch

1049
00:39:51,280 --> 00:39:53,119
and that will be automated your pipeline

1050
00:39:53,119 --> 00:39:54,560
will be happy you will see all your

1051
00:39:54,560 --> 00:39:57,200
green lights nobody needs to touch your

1052
00:39:57,200 --> 00:39:59,200
pipeline the more

1053
00:39:59,200 --> 00:40:02,079
human input you allow the more chances

1054
00:40:02,079 --> 00:40:04,079
for something to go wrong

1055
00:40:04,079 --> 00:40:06,000
if you still

1056
00:40:06,000 --> 00:40:08,160
need to allow the starboard action

1057
00:40:08,160 --> 00:40:11,200
because of some kind of weird use case i

1058
00:40:11,200 --> 00:40:12,800
have two options

1059
00:40:12,800 --> 00:40:14,560
the first one if you don't require those

1060
00:40:14,560 --> 00:40:17,119
overwrite parameters you can always

1061
00:40:17,119 --> 00:40:18,720
leverage lambda just have a lambda

1062
00:40:18,720 --> 00:40:20,480
function that can be triggered by these

1063
00:40:20,480 --> 00:40:21,680
developers

1064
00:40:21,680 --> 00:40:23,440
and the lambda function will call a star

1065
00:40:23,440 --> 00:40:25,760
build but it will never use the override

1066
00:40:25,760 --> 00:40:28,480
parameters just plain star build

1067
00:40:28,480 --> 00:40:31,920
project x and it will run it for them

1068
00:40:31,920 --> 00:40:34,640
and if you still really really require

1069
00:40:34,640 --> 00:40:37,280
these users to do star build

1070
00:40:37,280 --> 00:40:39,920
and to use overripe parameters

1071
00:40:39,920 --> 00:40:41,920
i don't recommend it but

1072
00:40:41,920 --> 00:40:44,480
rethink your pipeline have

1073
00:40:44,480 --> 00:40:46,560
evaluated and identify the tasks that

1074
00:40:46,560 --> 00:40:49,520
are security critical like co-signing

1075
00:40:49,520 --> 00:40:52,000
secret management etc

1076
00:40:52,000 --> 00:40:54,400
split those tasks and make sure that the

1077
00:40:54,400 --> 00:40:56,880
order is correct

1078
00:40:56,880 --> 00:40:58,160
the

1079
00:40:58,160 --> 00:41:00,640
sooner you provide user access will

1080
00:41:00,640 --> 00:41:03,599
affect more will affect the later tasks

1081
00:41:03,599 --> 00:41:06,480
for example if i already providing step

1082
00:41:06,480 --> 00:41:09,920
number one uh code will project a user

1083
00:41:09,920 --> 00:41:10,960
to to

1084
00:41:10,960 --> 00:41:13,200
perform some actions via star build and

1085
00:41:13,200 --> 00:41:14,800
later on in the pipeline you can see the

1086
00:41:14,800 --> 00:41:16,400
project that does the code signing well

1087
00:41:16,400 --> 00:41:18,400
your goal signing is bypass because if

1088
00:41:18,400 --> 00:41:21,200
in step one the developer already

1089
00:41:21,200 --> 00:41:23,520
modified the code when it gets signed

1090
00:41:23,520 --> 00:41:25,200
and whatever later on the process it

1091
00:41:25,200 --> 00:41:27,920
gets verified it's too late so the

1092
00:41:27,920 --> 00:41:29,680
ordering is important and then once you

1093
00:41:29,680 --> 00:41:31,520
have it really

1094
00:41:31,520 --> 00:41:33,040
properly set it up

1095
00:41:33,040 --> 00:41:35,280
just then i access again as much as you

1096
00:41:35,280 --> 00:41:36,400
can

1097
00:41:36,400 --> 00:41:38,960
it's my recommendation if you can go for

1098
00:41:38,960 --> 00:41:41,839
option number one

1099
00:41:42,319 --> 00:41:43,440
so

1100
00:41:43,440 --> 00:41:44,480
i have

1101
00:41:44,480 --> 00:41:46,319
published some

1102
00:41:46,319 --> 00:41:48,880
a small document that is available on

1103
00:41:48,880 --> 00:41:52,079
the link that you can see there

1104
00:41:52,319 --> 00:41:53,920
and it has more information it basically

1105
00:41:53,920 --> 00:41:56,800
contains everything i learned about

1106
00:41:56,800 --> 00:41:58,880
code related services

1107
00:41:58,880 --> 00:42:01,520
it doesn't so much include microservices

1108
00:42:01,520 --> 00:42:03,839
and codestar but it really provides way

1109
00:42:03,839 --> 00:42:06,160
more information about how they

1110
00:42:06,160 --> 00:42:08,480
communicate what types of properties you

1111
00:42:08,480 --> 00:42:10,000
actually need to take into account like

1112
00:42:10,000 --> 00:42:12,640
roles and actions etc

1113
00:42:12,640 --> 00:42:14,880
and yeah it's freely available in the in

1114
00:42:14,880 --> 00:42:16,560
the link so go have a look and let me

1115
00:42:16,560 --> 00:42:18,960
know what you think of course

1116
00:42:18,960 --> 00:42:19,760
and

1117
00:42:19,760 --> 00:42:22,079
before i finish i would like to bring

1118
00:42:22,079 --> 00:42:24,240
back the question do we understand class

1119
00:42:24,240 --> 00:42:25,920
services well enough

1120
00:42:25,920 --> 00:42:28,880
and i really hope i triggered a bit of

1121
00:42:28,880 --> 00:42:30,480
concern on your

1122
00:42:30,480 --> 00:42:33,359
mind so next time you just think about

1123
00:42:33,359 --> 00:42:35,040
cloud as building blocks that can be

1124
00:42:35,040 --> 00:42:37,040
just put together one after the other

1125
00:42:37,040 --> 00:42:38,079
one

1126
00:42:38,079 --> 00:42:40,240
you will actually think twice and look a

1127
00:42:40,240 --> 00:42:42,240
bit more into it try to understand how

1128
00:42:42,240 --> 00:42:44,000
they were designed what they can do what

1129
00:42:44,000 --> 00:42:46,000
they cannot how do they communicate with

1130
00:42:46,000 --> 00:42:47,280
each other

1131
00:42:47,280 --> 00:42:49,119
what type of access rights am i going to

1132
00:42:49,119 --> 00:42:51,599
allow it's not a simple job but just do

1133
00:42:51,599 --> 00:42:53,200
it because it can lead to really big

1134
00:42:53,200 --> 00:42:54,400
issues

1135
00:42:54,400 --> 00:42:57,200
and more related to this presentation i

1136
00:42:57,200 --> 00:43:00,079
really hope that you will not allow me

1137
00:43:00,079 --> 00:43:01,440
to start build

1138
00:43:01,440 --> 00:43:05,040
in your production pipeline anymore

1139
00:43:05,040 --> 00:43:05,760
so

1140
00:43:05,760 --> 00:43:07,920
that's everything from my side has been

1141
00:43:07,920 --> 00:43:09,599
a pleasure to be here and if you have

1142
00:43:09,599 --> 00:43:12,620
any questions i would be happy to answer

1143
00:43:12,620 --> 00:43:20,759
[Applause]

1144
00:43:21,920 --> 00:43:26,040
all right any questions

1145
00:43:33,280 --> 00:43:35,680
thanks for raising the issue

1146
00:43:35,680 --> 00:43:38,640
um i'm just wondering i myself i heavily

1147
00:43:38,640 --> 00:43:40,960
rely on on open source cloud auditing

1148
00:43:40,960 --> 00:43:44,640
tools on github have you considered to

1149
00:43:44,640 --> 00:43:48,160
i contribute to them to raise awareness

1150
00:43:48,160 --> 00:43:50,160
i haven't done it yet but indeed is a

1151
00:43:50,160 --> 00:43:52,880
good consideration um i try to reach out

1152
00:43:52,880 --> 00:43:55,359
to osp also for example

1153
00:43:55,359 --> 00:43:57,680
to do this and i'm trying via of course

1154
00:43:57,680 --> 00:43:59,680
presentations and try to make awareness

1155
00:43:59,680 --> 00:44:00,880
around it but

1156
00:44:00,880 --> 00:44:04,599
yeah it could be a great idea

1157
00:44:11,760 --> 00:44:12,480
hi

1158
00:44:12,480 --> 00:44:15,920
uh thanks for the presentation um i'm

1159
00:44:15,920 --> 00:44:18,400
absolutely absolutely not well versed

1160
00:44:18,400 --> 00:44:20,400
into the whole cloth deployment but

1161
00:44:20,400 --> 00:44:22,640
would you not argue that most of these

1162
00:44:22,640 --> 00:44:26,000
problems um exist because of

1163
00:44:26,000 --> 00:44:26,960
um

1164
00:44:26,960 --> 00:44:29,520
well not enough vlogging perhaps

1165
00:44:29,520 --> 00:44:31,680
sorry not enough not enough vloggings or

1166
00:44:31,680 --> 00:44:34,319
not enough transparency towards like the

1167
00:44:34,319 --> 00:44:36,480
people managing uh

1168
00:44:36,480 --> 00:44:39,200
stuff that you that you are deploying it

1169
00:44:39,200 --> 00:44:41,359
can be but uh even if it just if you

1170
00:44:41,359 --> 00:44:43,760
just take the the the initial issues so

1171
00:44:43,760 --> 00:44:46,240
the the exfiltration for example login

1172
00:44:46,240 --> 00:44:47,839
is not gonna help you there the problem

1173
00:44:47,839 --> 00:44:50,160
is that the action per se is really

1174
00:44:50,160 --> 00:44:52,079
overpowered in the sense that it

1175
00:44:52,079 --> 00:44:54,319
completely allows you to redefine

1176
00:44:54,319 --> 00:44:56,800
whatever the security engineer and

1177
00:44:56,800 --> 00:44:59,200
architect also define for that build

1178
00:44:59,200 --> 00:45:01,040
and it's really arbitrary commands that

1179
00:45:01,040 --> 00:45:02,720
you can run so they're logging you will

1180
00:45:02,720 --> 00:45:04,640
see the locks but probably by then it's

1181
00:45:04,640 --> 00:45:08,000
late for at least the initial part

1182
00:45:08,000 --> 00:45:10,400
the part of the command execution

1183
00:45:10,400 --> 00:45:12,400
that one could also be

1184
00:45:12,400 --> 00:45:15,040
stopped somehow if as part of the steps

1185
00:45:15,040 --> 00:45:18,720
you will have a check is the the bundle

1186
00:45:18,720 --> 00:45:20,400
that i'm about to deploy is the

1187
00:45:20,400 --> 00:45:22,560
legitimate one or is there something

1188
00:45:22,560 --> 00:45:23,920
strange there

1189
00:45:23,920 --> 00:45:26,240
but you wouldn't really anytime resolve

1190
00:45:26,240 --> 00:45:28,319
the full issue with with login there is

1191
00:45:28,319 --> 00:45:31,440
no way that uh because in

1192
00:45:31,440 --> 00:45:33,839
even if you would lock

1193
00:45:33,839 --> 00:45:36,480
the legitimate one uh the overriding one

1194
00:45:36,480 --> 00:45:38,079
will actually be parallel with just a

1195
00:45:38,079 --> 00:45:40,400
new execution and unless you really go

1196
00:45:40,400 --> 00:45:42,079
and check the full history you will not

1197
00:45:42,079 --> 00:45:44,000
see it happening and if you have a

1198
00:45:44,000 --> 00:45:46,480
really big infrastructure with a few

1199
00:45:46,480 --> 00:45:48,960
pipelines you will get lost

1200
00:45:48,960 --> 00:45:50,640
in the loggings i think

1201
00:45:50,640 --> 00:45:53,520
and then in practice isn't it a weird

1202
00:45:53,520 --> 00:45:55,440
thing that you see these parallel

1203
00:45:55,440 --> 00:45:57,200
processors spawn

1204
00:45:57,200 --> 00:46:00,079
so that you see them i mean

1205
00:46:00,079 --> 00:46:02,160
in my mind if i see something like that

1206
00:46:02,160 --> 00:46:04,560
i would say hmm that's strange i don't

1207
00:46:04,560 --> 00:46:07,920
see why a a system cannot uh

1208
00:46:07,920 --> 00:46:10,720
like give a warning and and maybe

1209
00:46:10,720 --> 00:46:12,319
that's that's kind of what i mean with

1210
00:46:12,319 --> 00:46:14,000
logging not low level but even at a

1211
00:46:14,000 --> 00:46:16,720
higher level so monitoring wise uh yeah

1212
00:46:16,720 --> 00:46:18,319
you could do some monitoring on it and

1213
00:46:18,319 --> 00:46:20,000
one of the uh

1214
00:46:20,000 --> 00:46:21,920
important facts here is who is the

1215
00:46:21,920 --> 00:46:23,680
initiator of this course that would be

1216
00:46:23,680 --> 00:46:24,880
one

1217
00:46:24,880 --> 00:46:26,319
by human

1218
00:46:26,319 --> 00:46:27,119
eye

1219
00:46:27,119 --> 00:46:28,319
that would be a bit more difficult

1220
00:46:28,319 --> 00:46:30,240
because this was a really really simple

1221
00:46:30,240 --> 00:46:32,319
pipeline but in most of them you have a

1222
00:46:32,319 --> 00:46:34,720
lot of parallel things going on so you

1223
00:46:34,720 --> 00:46:36,720
have like a list of seven

1224
00:46:36,720 --> 00:46:38,480
uh code build executions happening at

1225
00:46:38,480 --> 00:46:40,640
the same time if that already covers the

1226
00:46:40,640 --> 00:46:42,160
seven that the table shows you by

1227
00:46:42,160 --> 00:46:44,000
default i don't know exactly the numbers

1228
00:46:44,000 --> 00:46:44,960
seven

1229
00:46:44,960 --> 00:46:46,880
if you are doing the the eighth one you

1230
00:46:46,880 --> 00:46:49,359
may actually skip it so

1231
00:46:49,359 --> 00:46:51,440
you could have some

1232
00:46:51,440 --> 00:46:53,280
type of monitoring you would need to do

1233
00:46:53,280 --> 00:46:54,000
it

1234
00:46:54,000 --> 00:46:56,720
yourself of course but probably will

1235
00:46:56,720 --> 00:46:59,040
take something to be running

1236
00:46:59,040 --> 00:47:01,040
constantly and checking on all the code

1237
00:47:01,040 --> 00:47:02,880
build uh

1238
00:47:02,880 --> 00:47:05,200
pipeline code build executions and i

1239
00:47:05,200 --> 00:47:06,640
think it will be quite costly to be

1240
00:47:06,640 --> 00:47:09,359
honest but to do it with that approach

1241
00:47:09,359 --> 00:47:10,640
um

1242
00:47:10,640 --> 00:47:13,200
we did send some recommendations to aws

1243
00:47:13,200 --> 00:47:14,720
of how we saw it

1244
00:47:14,720 --> 00:47:15,760
um

1245
00:47:15,760 --> 00:47:17,119
and the

1246
00:47:17,119 --> 00:47:19,040
simplest solution in my opinion is to

1247
00:47:19,040 --> 00:47:20,960
have a star build with

1248
00:47:20,960 --> 00:47:23,200
like for administrator or like for high

1249
00:47:23,200 --> 00:47:25,280
level which allows you to do these

1250
00:47:25,280 --> 00:47:27,440
overrides with like has a big warning

1251
00:47:27,440 --> 00:47:29,440
label saying be careful with this one

1252
00:47:29,440 --> 00:47:31,119
and have like a more basic one for

1253
00:47:31,119 --> 00:47:34,319
developers to just run some test unit or

1254
00:47:34,319 --> 00:47:37,040
things like this but yeah it could be

1255
00:47:37,040 --> 00:47:38,240
something to look into but i think it

1256
00:47:38,240 --> 00:47:40,880
would consume a lot of resources yeah

1257
00:47:40,880 --> 00:47:44,400
okay thanks for your insights

1258
00:47:45,359 --> 00:47:47,520
thank you thanks for your time

1259
00:47:47,520 --> 00:47:50,839
thanks everyone

