1
00:00:04,960 --> 00:00:06,960
we're going to talk about automating

2
00:00:06,960 --> 00:00:11,519
binary analysis with gitra's b code

3
00:00:13,120 --> 00:00:16,000
yes and my name is gerge or gary for

4
00:00:16,000 --> 00:00:17,119
short

5
00:00:17,119 --> 00:00:20,720
i do security research at siemens

6
00:00:20,720 --> 00:00:24,320
and sometimes do tutorials on youtube

7
00:00:24,320 --> 00:00:26,080
yep that's me

8
00:00:26,080 --> 00:00:27,840
and about the talk

9
00:00:27,840 --> 00:00:30,800
so first of all um

10
00:00:30,800 --> 00:00:32,159
so in this presentation we are going to

11
00:00:32,159 --> 00:00:35,120
talk about gydra and its intermediate

12
00:00:35,120 --> 00:00:37,920
representation called p code

13
00:00:37,920 --> 00:00:40,800
uh first a quick disclaimer i'm not a

14
00:00:40,800 --> 00:00:42,160
guitar expert

15
00:00:42,160 --> 00:00:44,960
i use it time to time um and then i had

16
00:00:44,960 --> 00:00:47,200
a project on on backdoor detection which

17
00:00:47,200 --> 00:00:50,000
kind of led me to the direction of gidra

18
00:00:50,000 --> 00:00:52,160
because of because it's free and open

19
00:00:52,160 --> 00:00:54,879
source and that also that also led me to

20
00:00:54,879 --> 00:00:57,440
to work with p code and i was positively

21
00:00:57,440 --> 00:01:00,719
surprised um by you know how well p code

22
00:01:00,719 --> 00:01:02,559
worked and how well gitra worked for for

23
00:01:02,559 --> 00:01:04,799
this stuff so that's why i thought that

24
00:01:04,799 --> 00:01:06,720
it makes sense to uh to talk about it a

25
00:01:06,720 --> 00:01:08,400
little more because i think it could be

26
00:01:08,400 --> 00:01:10,240
really useful for anybody who wants to

27
00:01:10,240 --> 00:01:13,040
automate stuff in in reversing

28
00:01:13,040 --> 00:01:15,920
um so the first part i will very quickly

29
00:01:15,920 --> 00:01:18,320
introduce kidra and then i will talk a

30
00:01:18,320 --> 00:01:20,400
little bit more about gitra scripting

31
00:01:20,400 --> 00:01:22,080
and then we'll spend spend most of the

32
00:01:22,080 --> 00:01:26,479
time on talking about about p code and

33
00:01:26,479 --> 00:01:28,320
um there will be a couple of examples as

34
00:01:28,320 --> 00:01:32,159
well so that we not just look at slides

35
00:01:32,159 --> 00:01:35,520
all right um so if you don't live under

36
00:01:35,520 --> 00:01:37,360
a rock then you probably heard about

37
00:01:37,360 --> 00:01:40,799
kidra that's the nsa's reversing

38
00:01:40,799 --> 00:01:42,240
framework

39
00:01:42,240 --> 00:01:44,000
that everybody was super suspicious

40
00:01:44,000 --> 00:01:46,159
about when it came out but then i say

41
00:01:46,159 --> 00:01:49,280
open source and now all is good um

42
00:01:49,280 --> 00:01:52,240
ultimately it's very powerful um a tool

43
00:01:52,240 --> 00:01:54,880
and it's a great competitor for ida pro

44
00:01:54,880 --> 00:01:58,560
video ninja rotary 2 and all these tools

45
00:01:58,560 --> 00:02:02,159
and it's free so which is a great plus

46
00:02:02,159 --> 00:02:04,079
in my particular project i choose it

47
00:02:04,079 --> 00:02:06,079
because i didn't know where my my tool

48
00:02:06,079 --> 00:02:08,160
is going to be deployed so i didn't want

49
00:02:08,160 --> 00:02:12,239
to be bound by you know the licensing uh

50
00:02:12,239 --> 00:02:14,959
stuff with with the commercial tools so

51
00:02:14,959 --> 00:02:17,360
i wanted to use something uh open source

52
00:02:17,360 --> 00:02:19,440
um and you know kidro

53
00:02:19,440 --> 00:02:20,720
seemed like a

54
00:02:20,720 --> 00:02:22,879
great candidate um and it turned out to

55
00:02:22,879 --> 00:02:26,400
be true so um you know i'm glad i went

56
00:02:26,400 --> 00:02:28,560
with that

57
00:02:28,560 --> 00:02:30,239
all right um if you haven't seen gitra

58
00:02:30,239 --> 00:02:31,120
before

59
00:02:31,120 --> 00:02:33,599
this is it it's it looks amazing it's

60
00:02:33,599 --> 00:02:34,959
pretty similar to what you see when you

61
00:02:34,959 --> 00:02:38,000
open ida pro um the only you know

62
00:02:38,000 --> 00:02:40,400
difference at the beginning is that um

63
00:02:40,400 --> 00:02:43,120
since the decompiler is built into gitra

64
00:02:43,120 --> 00:02:45,680
then uh because of that the default view

65
00:02:45,680 --> 00:02:47,760
is the the assembly and then the

66
00:02:47,760 --> 00:02:49,760
decompiled

67
00:02:49,760 --> 00:02:51,360
code

68
00:02:51,360 --> 00:02:52,560
in sync

69
00:02:52,560 --> 00:02:56,080
which is also very nice

70
00:02:56,160 --> 00:02:58,480
and

71
00:02:58,560 --> 00:03:00,720
we'll talk about the

72
00:03:00,720 --> 00:03:02,959
rest of it later on i just wanted to you

73
00:03:02,959 --> 00:03:04,480
know if you haven't seen guitar to just

74
00:03:04,480 --> 00:03:06,560
to have a an understanding you know it's

75
00:03:06,560 --> 00:03:09,280
a decompiler and this disassembler so

76
00:03:09,280 --> 00:03:11,440
you can look at binaries and and see

77
00:03:11,440 --> 00:03:14,080
what's happening in in the binary um you

78
00:03:14,080 --> 00:03:17,840
know just a short segue um you can't

79
00:03:17,840 --> 00:03:20,560
really see that that but but in this

80
00:03:20,560 --> 00:03:23,040
screen i was reversing um a challenge

81
00:03:23,040 --> 00:03:25,120
from the flareon challenges

82
00:03:25,120 --> 00:03:27,040
if you don't know flareon um it's an

83
00:03:27,040 --> 00:03:29,840
only reversing capture the flag from

84
00:03:29,840 --> 00:03:32,000
from from fireeye and if you know

85
00:03:32,000 --> 00:03:34,560
flareon then you know um you might

86
00:03:34,560 --> 00:03:36,239
understand how difficult it was to work

87
00:03:36,239 --> 00:03:39,040
on slides while i was deeply in in

88
00:03:39,040 --> 00:03:41,680
solving fair challenges so um if you

89
00:03:41,680 --> 00:03:43,200
like reversing it still runs for a

90
00:03:43,200 --> 00:03:44,799
couple of weeks

91
00:03:44,799 --> 00:03:47,360
so check it out it's it's pretty cool

92
00:03:47,360 --> 00:03:50,080
just a fair warning um it's gonna uh

93
00:03:50,080 --> 00:03:52,319
it's gonna suck you in chew you up and

94
00:03:52,319 --> 00:03:54,239
and spit you out uh but it's gonna be

95
00:03:54,239 --> 00:03:55,280
fun

96
00:03:55,280 --> 00:03:59,200
so um yeah that was quickly about flare

97
00:03:59,200 --> 00:04:00,480
and

98
00:04:00,480 --> 00:04:02,080
now so this was all about gitra so

99
00:04:02,080 --> 00:04:03,360
hopefully everybody now understands what

100
00:04:03,360 --> 00:04:07,200
git ray is um a github script um

101
00:04:07,200 --> 00:04:10,000
so kidra as all the other tools have

102
00:04:10,000 --> 00:04:12,480
some kind of way of extending the the

103
00:04:12,480 --> 00:04:15,120
tools functionality i know in ida you

104
00:04:15,120 --> 00:04:18,639
have idc and either python

105
00:04:18,639 --> 00:04:21,279
you can automate rather too as well

106
00:04:21,279 --> 00:04:24,240
gitra has gitra scripts what they call

107
00:04:24,240 --> 00:04:26,240
it and

108
00:04:26,240 --> 00:04:29,360
and it has a similar tool um you

109
00:04:29,360 --> 00:04:31,440
you can kind of define two

110
00:04:31,440 --> 00:04:32,720
use cases

111
00:04:32,720 --> 00:04:34,960
one is that if you want to automate some

112
00:04:34,960 --> 00:04:37,120
kind of particle task in your manual

113
00:04:37,120 --> 00:04:39,759
reversing like let's say

114
00:04:39,759 --> 00:04:42,479
you have a malware and and it uses some

115
00:04:42,479 --> 00:04:44,639
kind of encoding for the strings that

116
00:04:44,639 --> 00:04:47,360
are in the malware or in the binary

117
00:04:47,360 --> 00:04:50,080
and um you reverse how it's decoded and

118
00:04:50,080 --> 00:04:52,320
you want to automate the the process of

119
00:04:52,320 --> 00:04:54,320
decoding so that every time when you see

120
00:04:54,320 --> 00:04:55,520
that that

121
00:04:55,520 --> 00:04:57,360
an encoded string is used then you can

122
00:04:57,360 --> 00:04:59,440
just quickly decode it and for that you

123
00:04:59,440 --> 00:05:01,520
can create a gig script and whenever you

124
00:05:01,520 --> 00:05:04,320
see such a such a an encoded string in

125
00:05:04,320 --> 00:05:06,800
the in the ui then you can just run your

126
00:05:06,800 --> 00:05:09,120
your script and it will decode it for

127
00:05:09,120 --> 00:05:12,320
you um or the other way is to try to

128
00:05:12,320 --> 00:05:15,840
write uh fully automated tools using

129
00:05:15,840 --> 00:05:18,080
gitra script or git droid itself as kind

130
00:05:18,080 --> 00:05:21,199
of like a reversing engine for your for

131
00:05:21,199 --> 00:05:23,520
your tool or like a

132
00:05:23,520 --> 00:05:26,080
levers in reversing library um that was

133
00:05:26,080 --> 00:05:28,320
my use case so i wanted to create a

134
00:05:28,320 --> 00:05:31,520
standalone tool uh without using the ui

135
00:05:31,520 --> 00:05:34,240
um that can that can do you know

136
00:05:34,240 --> 00:05:37,039
particular stuff automatically

137
00:05:37,039 --> 00:05:40,000
um when you write githurscript you can

138
00:05:40,000 --> 00:05:42,160
do it either in java or python but i

139
00:05:42,160 --> 00:05:43,759
will talk about that later

140
00:05:43,759 --> 00:05:46,800
and it has a huge sdk um

141
00:05:46,800 --> 00:05:48,560
there is something called the flat api

142
00:05:48,560 --> 00:05:50,720
which is like a set of set of methods

143
00:05:50,720 --> 00:05:53,759
that are available directly um and there

144
00:05:53,759 --> 00:05:55,680
is like a the rest of the sdk that's

145
00:05:55,680 --> 00:05:57,759
basically everything that skidra is

146
00:05:57,759 --> 00:06:00,080
but again i will talk about it a little

147
00:06:00,080 --> 00:06:02,800
bit later on

148
00:06:03,759 --> 00:06:06,560
what you see here now is the script

149
00:06:06,560 --> 00:06:08,479
manager of gitra

150
00:06:08,479 --> 00:06:10,800
this is basically where you can

151
00:06:10,800 --> 00:06:12,240
where you can look at the scripts that

152
00:06:12,240 --> 00:06:13,600
are or there

153
00:06:13,600 --> 00:06:16,160
you can run your scripts and you can

154
00:06:16,160 --> 00:06:18,160
also edit your scripts if you're not

155
00:06:18,160 --> 00:06:20,639
looking for any kind of fancy editor you

156
00:06:20,639 --> 00:06:22,639
can you can just edit the scripts uh in

157
00:06:22,639 --> 00:06:24,160
giger itself

158
00:06:24,160 --> 00:06:25,120
and

159
00:06:25,120 --> 00:06:26,800
as you can see there are already a bunch

160
00:06:26,800 --> 00:06:29,680
of scripts in gitra so if you're using

161
00:06:29,680 --> 00:06:31,280
idra regularly

162
00:06:31,280 --> 00:06:33,199
it makes sense to once go through all

163
00:06:33,199 --> 00:06:35,199
the scripts look at them just to you

164
00:06:35,199 --> 00:06:37,199
know have a rough idea what kind of

165
00:06:37,199 --> 00:06:39,520
functionality is available for you as as

166
00:06:39,520 --> 00:06:41,520
guitar script

167
00:06:41,520 --> 00:06:43,440
[Music]

168
00:06:43,440 --> 00:06:45,840
and the scripts also provide you

169
00:06:45,840 --> 00:06:48,560
um as kind of a great resource to figure

170
00:06:48,560 --> 00:06:50,560
out how to do stuff in gidras script so

171
00:06:50,560 --> 00:06:52,240
when you're writing your own gitra

172
00:06:52,240 --> 00:06:54,720
script uh many times you can look at

173
00:06:54,720 --> 00:06:56,800
other scripts to see how you know a

174
00:06:56,800 --> 00:06:58,720
particle class in the sdk is supposed to

175
00:06:58,720 --> 00:07:01,599
be used or how a particular task

176
00:07:01,599 --> 00:07:02,560
should be

177
00:07:02,560 --> 00:07:04,639
implemented

178
00:07:04,639 --> 00:07:07,120
all right

179
00:07:07,120 --> 00:07:11,120
so quickly about python versus java

180
00:07:11,120 --> 00:07:14,000
so gitra is written in java so the

181
00:07:14,000 --> 00:07:16,400
native language of gidras script is is

182
00:07:16,400 --> 00:07:18,080
also java

183
00:07:18,080 --> 00:07:20,960
but i guess the guys at nsa realized

184
00:07:20,960 --> 00:07:23,520
that that not everybody likes to suffer

185
00:07:23,520 --> 00:07:25,280
so they they implemented a python

186
00:07:25,280 --> 00:07:28,560
binding as well uh in jaitan which is

187
00:07:28,560 --> 00:07:30,800
not that great so um it's somewhat

188
00:07:30,800 --> 00:07:33,280
limited and it's python 2.

189
00:07:33,280 --> 00:07:35,520
but there is another great open source

190
00:07:35,520 --> 00:07:37,199
project called

191
00:07:37,199 --> 00:07:39,680
github bridge that you can see there

192
00:07:39,680 --> 00:07:42,160
which basically allows you to write your

193
00:07:42,160 --> 00:07:44,319
code in python 3 and using the whole

194
00:07:44,319 --> 00:07:45,599
python uh

195
00:07:45,599 --> 00:07:47,280
like everything that python is so

196
00:07:47,280 --> 00:07:49,759
basically get away from from jython

197
00:07:49,759 --> 00:07:51,840
and it works pretty well so i i tried it

198
00:07:51,840 --> 00:07:54,400
and and and and it works well so if

199
00:07:54,400 --> 00:07:56,080
you're using i want to write something

200
00:07:56,080 --> 00:07:58,400
in python then probably a gydra bridge

201
00:07:58,400 --> 00:07:59,360
will be

202
00:07:59,360 --> 00:08:01,599
something that's worth looking into

203
00:08:01,599 --> 00:08:03,919
um but as much as i'm not particularly a

204
00:08:03,919 --> 00:08:06,000
fan of java and the last time i actually

205
00:08:06,000 --> 00:08:08,479
wrote java code was at my university

206
00:08:08,479 --> 00:08:10,800
which wasn't really recently

207
00:08:10,800 --> 00:08:14,240
so um i still you know after a while i i

208
00:08:14,240 --> 00:08:16,319
had to come to terms with the

209
00:08:16,319 --> 00:08:19,199
um with the fact that that the java

210
00:08:19,199 --> 00:08:21,120
development environment for gidra is

211
00:08:21,120 --> 00:08:22,319
actually great

212
00:08:22,319 --> 00:08:24,720
so i changed to java and i don't really

213
00:08:24,720 --> 00:08:26,800
regret it um you know there is a

214
00:08:26,800 --> 00:08:28,639
learning curve there as well but but it

215
00:08:28,639 --> 00:08:30,800
actually works very well

216
00:08:30,800 --> 00:08:34,159
and um just to be a bit specific about

217
00:08:34,159 --> 00:08:36,080
why i came away from python

218
00:08:36,080 --> 00:08:38,640
is that um with all of these python

219
00:08:38,640 --> 00:08:41,839
implementations the problem is that um

220
00:08:41,839 --> 00:08:43,839
you know often you need to figure out

221
00:08:43,839 --> 00:08:46,160
what class you you want to use or or

222
00:08:46,160 --> 00:08:48,160
what method you want to use

223
00:08:48,160 --> 00:08:50,320
um and then you need to convert between

224
00:08:50,320 --> 00:08:52,320
or you know typecast cover between

225
00:08:52,320 --> 00:08:53,680
different classes

226
00:08:53,680 --> 00:08:54,560
and

227
00:08:54,560 --> 00:08:56,720
this this class information this type

228
00:08:56,720 --> 00:08:58,560
information is not impossible to recover

229
00:08:58,560 --> 00:09:01,279
when you do this in python um but

230
00:09:01,279 --> 00:09:03,120
obviously this is not a natural thing in

231
00:09:03,120 --> 00:09:04,240
python

232
00:09:04,240 --> 00:09:06,480
so you kind of can figure that out but

233
00:09:06,480 --> 00:09:08,320
it's it's an additional overhead that

234
00:09:08,320 --> 00:09:09,279
kind of

235
00:09:09,279 --> 00:09:10,800
slows you down

236
00:09:10,800 --> 00:09:12,480
so um

237
00:09:12,480 --> 00:09:15,519
and also like i spend a lot of time

238
00:09:15,519 --> 00:09:17,360
looking at the documentation and trying

239
00:09:17,360 --> 00:09:20,480
to figure out how i should use those um

240
00:09:20,480 --> 00:09:23,440
those classes and methods and um if you

241
00:09:23,440 --> 00:09:25,680
use python then on the top of that you

242
00:09:25,680 --> 00:09:28,240
you need to also figure out how this

243
00:09:28,240 --> 00:09:29,920
java code is supposed to look like in

244
00:09:29,920 --> 00:09:30,959
python

245
00:09:30,959 --> 00:09:32,959
which is again also not impossible but

246
00:09:32,959 --> 00:09:35,200
it's an additional step that that slows

247
00:09:35,200 --> 00:09:37,519
you down so

248
00:09:37,519 --> 00:09:38,959
um

249
00:09:38,959 --> 00:09:42,160
and yeah just one one one other note um

250
00:09:42,160 --> 00:09:44,000
so java is

251
00:09:44,000 --> 00:09:45,680
that you have a job but development is

252
00:09:45,680 --> 00:09:47,920
actually very well supported by by you

253
00:09:47,920 --> 00:09:50,560
know kidro or basically nsa um there is

254
00:09:50,560 --> 00:09:53,040
a there is an eclipse plug-in uh for for

255
00:09:53,040 --> 00:09:55,040
github development um so you can

256
00:09:55,040 --> 00:09:57,360
basically write your code in eclipse you

257
00:09:57,360 --> 00:10:00,240
can start kidra from eclipse and you can

258
00:10:00,240 --> 00:10:02,720
debug your own code in eclipse while

259
00:10:02,720 --> 00:10:05,120
it's executing in in gidra so that's

260
00:10:05,120 --> 00:10:07,279
that works really well and it helps a

261
00:10:07,279 --> 00:10:10,079
lot uh with debugging that you can you

262
00:10:10,079 --> 00:10:12,320
can see your code uh running inside

263
00:10:12,320 --> 00:10:15,279
gidra from eclipse so so that's uh

264
00:10:15,279 --> 00:10:17,200
that's pretty awesome

265
00:10:17,200 --> 00:10:20,320
so shortly my recommendation is that if

266
00:10:20,320 --> 00:10:21,920
you use if you want to do something

267
00:10:21,920 --> 00:10:24,399
short something simple then you know

268
00:10:24,399 --> 00:10:26,959
python is is cool and and going to work

269
00:10:26,959 --> 00:10:29,440
great um if you want to like

270
00:10:29,440 --> 00:10:31,680
use the whole sdk and do some kind of

271
00:10:31,680 --> 00:10:34,560
more complex uh program then you know

272
00:10:34,560 --> 00:10:37,440
probably it's worth to look into to uh

273
00:10:37,440 --> 00:10:39,600
to java and see you know compare how

274
00:10:39,600 --> 00:10:40,800
much uh

275
00:10:40,800 --> 00:10:42,720
whether it will be easier to do that in

276
00:10:42,720 --> 00:10:46,399
java and probably it will

277
00:10:46,399 --> 00:10:48,800
all right um just you know one quick

278
00:10:48,800 --> 00:10:51,279
word about headless mode

279
00:10:51,279 --> 00:10:54,320
so headless mode is basically um

280
00:10:54,320 --> 00:10:56,640
the way to run gidra without seeing the

281
00:10:56,640 --> 00:10:58,240
ui so

282
00:10:58,240 --> 00:11:00,399
this is what you what you will use if

283
00:11:00,399 --> 00:11:02,720
you want to create like fully automated

284
00:11:02,720 --> 00:11:05,839
tools uh you know without using the ui

285
00:11:05,839 --> 00:11:08,959
um it's basically in that case uh gidra

286
00:11:08,959 --> 00:11:11,120
is really just a just kind of a library

287
00:11:11,120 --> 00:11:13,040
for your tool for you know whatever

288
00:11:13,040 --> 00:11:15,600
reversing task you you want to do uh the

289
00:11:15,600 --> 00:11:18,320
only drawback is um that you know

290
00:11:18,320 --> 00:11:20,079
starting your program is you know it

291
00:11:20,079 --> 00:11:21,760
looks pretty weird that kind of like

292
00:11:21,760 --> 00:11:23,920
there's a comment uh comment line on the

293
00:11:23,920 --> 00:11:25,519
top um

294
00:11:25,519 --> 00:11:27,120
that's you know it just doesn't look

295
00:11:27,120 --> 00:11:28,800
good so probably will want to do some

296
00:11:28,800 --> 00:11:31,600
kind of uh rapper script but but you

297
00:11:31,600 --> 00:11:34,399
know that's that's the only thing um

298
00:11:34,399 --> 00:11:35,600
what it makes

299
00:11:35,600 --> 00:11:38,480
a bit bit weird

300
00:11:38,480 --> 00:11:40,560
all right um

301
00:11:40,560 --> 00:11:42,560
now let's talk about the flat api or

302
00:11:42,560 --> 00:11:44,000
officially it's called the

303
00:11:44,000 --> 00:11:45,760
flat program api

304
00:11:45,760 --> 00:11:47,360
um it's basically

305
00:11:47,360 --> 00:11:50,880
like a set of um of methods and

306
00:11:50,880 --> 00:11:52,880
attributes that are available for you

307
00:11:52,880 --> 00:11:54,560
directly if you're writing a guitar

308
00:11:54,560 --> 00:11:55,760
script so you don't have to instantiate

309
00:11:55,760 --> 00:11:57,519
any kind of class you can just call

310
00:11:57,519 --> 00:12:00,000
these methods and access these these uh

311
00:12:00,000 --> 00:12:04,800
fields um it's around like 150 methods

312
00:12:04,800 --> 00:12:05,680
and

313
00:12:05,680 --> 00:12:08,399
just to understand why it's there um you

314
00:12:08,399 --> 00:12:10,240
might be familiar with the feeling when

315
00:12:10,240 --> 00:12:11,040
you

316
00:12:11,040 --> 00:12:13,839
uh when you find an either either python

317
00:12:13,839 --> 00:12:16,000
script or ida script on the internet and

318
00:12:16,000 --> 00:12:17,279
you want to use it but it's for a

319
00:12:17,279 --> 00:12:19,279
specific idle version and you can you

320
00:12:19,279 --> 00:12:21,040
either have that version installed on

321
00:12:21,040 --> 00:12:24,000
your machine or or you need to port that

322
00:12:24,000 --> 00:12:25,839
that script to to the newest version or

323
00:12:25,839 --> 00:12:27,200
the version you have

324
00:12:27,200 --> 00:12:29,120
and you know it's just a lot of overhead

325
00:12:29,120 --> 00:12:32,000
and and pain in the ass so um

326
00:12:32,000 --> 00:12:34,079
so this is exactly why there is the the

327
00:12:34,079 --> 00:12:35,839
threat program api

328
00:12:35,839 --> 00:12:37,440
because they wanted to avoid this

329
00:12:37,440 --> 00:12:40,639
problem and the the the rules for for

330
00:12:40,639 --> 00:12:42,959
this uh for this

331
00:12:42,959 --> 00:12:46,160
flat program api is that um methods are

332
00:12:46,160 --> 00:12:48,399
not supposed to be removed and method

333
00:12:48,399 --> 00:12:49,839
signatures are not supposed to be

334
00:12:49,839 --> 00:12:52,399
changed so basically that means that the

335
00:12:52,399 --> 00:12:54,320
the script if you write the script that

336
00:12:54,320 --> 00:12:57,600
only uses the flat program api then then

337
00:12:57,600 --> 00:12:59,440
probably it's going to run in five years

338
00:12:59,440 --> 00:13:01,839
as well um so

339
00:13:01,839 --> 00:13:05,120
that's pretty great um and uh and i mean

340
00:13:05,120 --> 00:13:07,519
you see it's 150 methods so that's quite

341
00:13:07,519 --> 00:13:09,360
a lot and it kind of covers all the

342
00:13:09,360 --> 00:13:10,720
necessary stuff like looking at

343
00:13:10,720 --> 00:13:13,200
functions looking at memory um you know

344
00:13:13,200 --> 00:13:16,720
recovering data from um from the binary

345
00:13:16,720 --> 00:13:19,120
like there's a there is a field called

346
00:13:19,120 --> 00:13:21,200
current program and then from that you

347
00:13:21,200 --> 00:13:23,680
can extract all like various information

348
00:13:23,680 --> 00:13:25,600
about the binary that you are

349
00:13:25,600 --> 00:13:28,480
running at that point

350
00:13:28,560 --> 00:13:29,839
yeah

351
00:13:29,839 --> 00:13:32,480
and then there is the program api which

352
00:13:32,480 --> 00:13:35,120
is basically everything else that

353
00:13:35,120 --> 00:13:37,920
everything that gidra is so

354
00:13:37,920 --> 00:13:39,760
so you can access all the classes that

355
00:13:39,760 --> 00:13:41,920
are used or used and implemented by

356
00:13:41,920 --> 00:13:45,120
kidra um so you know it's it's huge and

357
00:13:45,120 --> 00:13:47,120
it's powerful but it's also

358
00:13:47,120 --> 00:13:49,680
also over overwhelming at times

359
00:13:49,680 --> 00:13:50,959
but the documentation is pretty good

360
00:13:50,959 --> 00:13:53,519
there is a javadoc on the internet and

361
00:13:53,519 --> 00:13:56,320
you know i spend a lot of time um you

362
00:13:56,320 --> 00:13:58,000
know looking at it you know sometimes on

363
00:13:58,000 --> 00:14:00,480
a rainy afternoon i sit by the window

364
00:14:00,480 --> 00:14:02,800
with the hot chocolate and and like just

365
00:14:02,800 --> 00:14:05,760
looking at uh gidra documentation it's

366
00:14:05,760 --> 00:14:07,440
it's it's a lot of fun

367
00:14:07,440 --> 00:14:08,959
and um

368
00:14:08,959 --> 00:14:12,160
just an example of you know complexities

369
00:14:12,160 --> 00:14:14,399
like if you wanna if you wanna do like

370
00:14:14,399 --> 00:14:15,760
if you wanna use an address like a

371
00:14:15,760 --> 00:14:17,680
memory address in gitra it's not like

372
00:14:17,680 --> 00:14:20,000
you can just use like a hex value and

373
00:14:20,000 --> 00:14:21,680
then say okay let's use this as an

374
00:14:21,680 --> 00:14:22,800
address

375
00:14:22,800 --> 00:14:24,240
because there is a

376
00:14:24,240 --> 00:14:26,399
address class in gitra so first you need

377
00:14:26,399 --> 00:14:28,560
to instantiate an address object using

378
00:14:28,560 --> 00:14:30,720
your hex value and then you can you know

379
00:14:30,720 --> 00:14:32,880
do whatever you want to do with the

380
00:14:32,880 --> 00:14:35,279
address it kind of makes sense but also

381
00:14:35,279 --> 00:14:37,360
you know sometimes there is time to

382
00:14:37,360 --> 00:14:39,519
figure out how these things um has to be

383
00:14:39,519 --> 00:14:40,800
done

384
00:14:40,800 --> 00:14:42,480
um

385
00:14:42,480 --> 00:14:44,639
yeah two things yeah source code is also

386
00:14:44,639 --> 00:14:45,920
available

387
00:14:45,920 --> 00:14:47,920
uh which is again a great resource and

388
00:14:47,920 --> 00:14:49,680
if you have like the you know eclipse

389
00:14:49,680 --> 00:14:51,600
dev environment set up then basically

390
00:14:51,600 --> 00:14:54,240
you can go to any class and then say you

391
00:14:54,240 --> 00:14:58,079
know uh go to to definition and and then

392
00:14:58,079 --> 00:14:59,519
it's going to open up the source code

393
00:14:59,519 --> 00:15:01,279
and then you can look at stuff like how

394
00:15:01,279 --> 00:15:02,880
this class is supposed to be used or

395
00:15:02,880 --> 00:15:04,959
what exactly the functions are doing

396
00:15:04,959 --> 00:15:06,000
um

397
00:15:06,000 --> 00:15:07,440
so

398
00:15:07,440 --> 00:15:09,680
with the whole program api

399
00:15:09,680 --> 00:15:11,839
you kind of lose the stability that the

400
00:15:11,839 --> 00:15:14,959
flat the the flat api provides um

401
00:15:14,959 --> 00:15:16,399
because your program might you know

402
00:15:16,399 --> 00:15:18,480
break with the new uh

403
00:15:18,480 --> 00:15:20,880
gitra release uh but it's but it's a

404
00:15:20,880 --> 00:15:22,639
huge resource and basically can do

405
00:15:22,639 --> 00:15:24,560
anything that's that's that's done in

406
00:15:24,560 --> 00:15:27,040
gidra so you you can you have access to

407
00:15:27,040 --> 00:15:28,160
everything

408
00:15:28,160 --> 00:15:29,519
um so

409
00:15:29,519 --> 00:15:31,519
to summarize the the

410
00:15:31,519 --> 00:15:34,079
program api is basically with great

411
00:15:34,079 --> 00:15:36,480
power comes great responsibility and

412
00:15:36,480 --> 00:15:38,959
some pain

413
00:15:39,279 --> 00:15:41,519
uh first example

414
00:15:41,519 --> 00:15:43,759
so um and this is how a gender script

415
00:15:43,759 --> 00:15:44,720
looks like

416
00:15:44,720 --> 00:15:48,000
um this is basically just to list the

417
00:15:48,000 --> 00:15:50,160
imported functions of the um of the

418
00:15:50,160 --> 00:15:51,839
binary

419
00:15:51,839 --> 00:15:55,600
we're going to look at it in a second

420
00:15:55,600 --> 00:15:58,160
just a few words about oh yeah i can't

421
00:15:58,160 --> 00:16:01,040
show there anything so as you can see um

422
00:16:01,040 --> 00:16:02,959
the base class is the grid gitra script

423
00:16:02,959 --> 00:16:05,440
class this is what makes your program a

424
00:16:05,440 --> 00:16:08,399
githurscript and then the only other

425
00:16:08,399 --> 00:16:10,160
thing that you need to have is a is a

426
00:16:10,160 --> 00:16:12,160
run method once you have these two

427
00:16:12,160 --> 00:16:14,079
things then you practically have a

428
00:16:14,079 --> 00:16:17,759
githurscript and what we do in this um

429
00:16:17,759 --> 00:16:20,880
in this in this script is basically you

430
00:16:20,880 --> 00:16:23,519
can see that from the current program

431
00:16:23,519 --> 00:16:24,399
um

432
00:16:24,399 --> 00:16:26,240
in line

433
00:16:26,240 --> 00:16:27,839
16

434
00:16:27,839 --> 00:16:29,920
we get the symbol table

435
00:16:29,920 --> 00:16:31,680
and then from there we can get the

436
00:16:31,680 --> 00:16:33,759
external symbols which are practically

437
00:16:33,759 --> 00:16:36,000
the imported functions

438
00:16:36,000 --> 00:16:37,279
and then

439
00:16:37,279 --> 00:16:39,120
with the loop so we get an iterator and

440
00:16:39,120 --> 00:16:40,639
with the loop we'll just

441
00:16:40,639 --> 00:16:43,199
iterate through these functions and and

442
00:16:43,199 --> 00:16:46,000
print them so it's that easy

443
00:16:46,000 --> 00:16:49,279
now i will try to

444
00:16:49,680 --> 00:16:50,639
yeah

445
00:16:50,639 --> 00:16:52,079
all right

446
00:16:52,079 --> 00:16:52,880
so

447
00:16:52,880 --> 00:16:56,639
here we see it in eclipse um and

448
00:16:56,639 --> 00:16:59,120
if i go here to

449
00:16:59,120 --> 00:17:02,680
you know run or debug then i can run

450
00:17:02,680 --> 00:17:04,799
a gidra

451
00:17:04,799 --> 00:17:07,599
and it starts kidra

452
00:17:07,599 --> 00:17:08,559
and

453
00:17:08,559 --> 00:17:11,678
i will show it on this one

454
00:17:12,640 --> 00:17:15,599
now we are basically opening a binary

455
00:17:15,599 --> 00:17:16,720
it's gonna

456
00:17:16,720 --> 00:17:18,400
analyze it

457
00:17:18,400 --> 00:17:20,240
so here as you can see

458
00:17:20,240 --> 00:17:22,319
here we have the assembly code and here

459
00:17:22,319 --> 00:17:23,599
we would have the decompile called the

460
00:17:23,599 --> 00:17:26,240
fully cutter function

461
00:17:26,240 --> 00:17:29,440
but to run our script we go to the

462
00:17:29,440 --> 00:17:30,960
script manager

463
00:17:30,960 --> 00:17:34,000
and we choose our script

464
00:17:34,000 --> 00:17:36,240
and say run

465
00:17:36,240 --> 00:17:38,640
and hopefully it ran

466
00:17:38,640 --> 00:17:40,000
and it did

467
00:17:40,000 --> 00:17:42,480
so here in the console you see that all

468
00:17:42,480 --> 00:17:45,760
the imported functions and the libraries

469
00:17:45,760 --> 00:17:48,960
or the dealers are are listed

470
00:17:48,960 --> 00:17:51,520
so this is just a very simple

471
00:17:51,520 --> 00:17:54,160
example of what you can do

472
00:17:54,160 --> 00:17:58,919
now let's get back to slides

473
00:18:03,760 --> 00:18:06,480
oh yeah great

474
00:18:10,320 --> 00:18:12,640
i never understood why is this this way

475
00:18:12,640 --> 00:18:13,679
anyway

476
00:18:13,679 --> 00:18:16,000
so so far we talked about gitra we

477
00:18:16,000 --> 00:18:18,559
talked about what kidra scripts are and

478
00:18:18,559 --> 00:18:21,679
now we are going to talk about

479
00:18:21,679 --> 00:18:24,000
p code

480
00:18:24,000 --> 00:18:25,600
so

481
00:18:25,600 --> 00:18:28,880
p code is um it's a registered transfer

482
00:18:28,880 --> 00:18:31,360
language which basically

483
00:18:31,360 --> 00:18:33,760
it's an intermediate representation and

484
00:18:33,760 --> 00:18:35,919
it translates um

485
00:18:35,919 --> 00:18:38,720
assembly instructions to to set off or

486
00:18:38,720 --> 00:18:41,280
sequence of of um

487
00:18:41,280 --> 00:18:44,879
p called operations

488
00:18:45,679 --> 00:18:48,559
here you can see on the screenshot

489
00:18:48,559 --> 00:18:50,720
can i navigate oh yeah so here you can

490
00:18:50,720 --> 00:18:52,799
see on the screenshot you can open this

491
00:18:52,799 --> 00:18:54,160
you can open this

492
00:18:54,160 --> 00:18:56,240
this bar here where you can enable or

493
00:18:56,240 --> 00:19:00,000
disable different um data on this view

494
00:19:00,000 --> 00:19:02,960
and if you if you go to p code

495
00:19:02,960 --> 00:19:05,520
it looks like a button but it's not so

496
00:19:05,520 --> 00:19:07,120
don't try to left click it and right

497
00:19:07,120 --> 00:19:08,720
click it and enable because you know it

498
00:19:08,720 --> 00:19:10,960
totally makes sense um

499
00:19:10,960 --> 00:19:15,280
and once you do that you get like below

500
00:19:15,280 --> 00:19:17,039
all right i will just give you them so

501
00:19:17,039 --> 00:19:19,919
below each assembly instruction you will

502
00:19:19,919 --> 00:19:22,799
have these sequence of uh gidra

503
00:19:22,799 --> 00:19:25,600
operations and the really interesting

504
00:19:25,600 --> 00:19:27,919
stuff with that and why it makes sense

505
00:19:27,919 --> 00:19:29,760
is because

506
00:19:29,760 --> 00:19:30,799
because

507
00:19:30,799 --> 00:19:33,679
the the p code clearly states all the

508
00:19:33,679 --> 00:19:36,320
side effect that in this instruction has

509
00:19:36,320 --> 00:19:37,200
so

510
00:19:37,200 --> 00:19:40,080
um like imagine a scenario that that

511
00:19:40,080 --> 00:19:41,679
you're looking at a jump and you want to

512
00:19:41,679 --> 00:19:43,760
figure out uh what's the condition for

513
00:19:43,760 --> 00:19:46,559
that particular jump is and um

514
00:19:46,559 --> 00:19:48,559
you know if it's if it's a jump if it's

515
00:19:48,559 --> 00:19:51,600
a jump if zero instruction then the the

516
00:19:51,600 --> 00:19:53,280
zero flag is going to be checked whether

517
00:19:53,280 --> 00:19:55,360
it's set or not and depending on on that

518
00:19:55,360 --> 00:19:57,440
the jump is going to be taken now you

519
00:19:57,440 --> 00:19:58,320
know

520
00:19:58,320 --> 00:20:00,559
most of the time the the the condition

521
00:20:00,559 --> 00:20:02,640
is just above the jump like a compare or

522
00:20:02,640 --> 00:20:05,280
a test instruction um

523
00:20:05,280 --> 00:20:06,720
but you know that's that that's not

524
00:20:06,720 --> 00:20:08,799
necessarily the case and who knows what

525
00:20:08,799 --> 00:20:11,919
compilers uh can do in the name of of

526
00:20:11,919 --> 00:20:14,320
optimization so it could be any kind of

527
00:20:14,320 --> 00:20:16,799
other instruction that says the the uh

528
00:20:16,799 --> 00:20:20,080
zero flag at some point so uh to find

529
00:20:20,080 --> 00:20:22,480
out to find your condition in assembly

530
00:20:22,480 --> 00:20:23,919
you have to know which instructions are

531
00:20:23,919 --> 00:20:25,760
setting the zero flag and backtrack

532
00:20:25,760 --> 00:20:27,919
until the first such instruction and

533
00:20:27,919 --> 00:20:30,080
then see what's happening there

534
00:20:30,080 --> 00:20:32,320
now with kidra the only the advantage

535
00:20:32,320 --> 00:20:34,320
that you get is that you don't have to

536
00:20:34,320 --> 00:20:35,200
like

537
00:20:35,200 --> 00:20:36,559
know everything like this you have to

538
00:20:36,559 --> 00:20:39,760
just go go up the the p code operations

539
00:20:39,760 --> 00:20:41,600
and see when was the last time when the

540
00:20:41,600 --> 00:20:43,919
zero flag was assigned here you can see

541
00:20:43,919 --> 00:20:46,320
like here uh here it assigns the zero

542
00:20:46,320 --> 00:20:48,320
fact so this is these are the the draw

543
00:20:48,320 --> 00:20:50,799
opera the p code operation and this

544
00:20:50,799 --> 00:20:52,960
operation says the zero flag and

545
00:20:52,960 --> 00:20:54,799
basically this is going to be what

546
00:20:54,799 --> 00:20:57,360
controls the the jump uh in the next

547
00:20:57,360 --> 00:20:59,679
instruction um

548
00:20:59,679 --> 00:21:01,360
so this is this is a this is a really

549
00:21:01,360 --> 00:21:04,400
big advantage uh oh when

550
00:21:04,400 --> 00:21:05,840
oh my god

551
00:21:05,840 --> 00:21:08,080
this is a really big advantage when

552
00:21:08,080 --> 00:21:11,919
um when using using p code and you know

553
00:21:11,919 --> 00:21:13,520
intermediate representations are not

554
00:21:13,520 --> 00:21:15,280
really a new thing so

555
00:21:15,280 --> 00:21:17,120
compilers use that as well basically

556
00:21:17,120 --> 00:21:18,799
when you when you have a source code

557
00:21:18,799 --> 00:21:20,000
they're going to turn the source code

558
00:21:20,000 --> 00:21:21,200
forward to an interme first to an

559
00:21:21,200 --> 00:21:23,520
intermediate representation and then

560
00:21:23,520 --> 00:21:25,440
separately they will they will turn that

561
00:21:25,440 --> 00:21:27,520
intermediate representation to you know

562
00:21:27,520 --> 00:21:30,159
assembly and and and machine code the

563
00:21:30,159 --> 00:21:32,400
reason behind this is because the first

564
00:21:32,400 --> 00:21:34,159
part is to get to the intermediate

565
00:21:34,159 --> 00:21:37,039
representation is basically um

566
00:21:37,039 --> 00:21:38,880
architecture independent and only for

567
00:21:38,880 --> 00:21:41,120
the second part have to you have

568
00:21:41,120 --> 00:21:42,640
you have to care what kind of

569
00:21:42,640 --> 00:21:44,880
architecture processor architecture

570
00:21:44,880 --> 00:21:46,159
you're going to be using

571
00:21:46,159 --> 00:21:48,400
and this is the same for the compilers

572
00:21:48,400 --> 00:21:50,000
so the compiler is first going to turn

573
00:21:50,000 --> 00:21:52,480
the the assembly code to an intermediate

574
00:21:52,480 --> 00:21:54,240
representation and from there they're

575
00:21:54,240 --> 00:21:56,799
going to turn that to a c code or some

576
00:21:56,799 --> 00:21:59,919
kind of code code

577
00:21:59,919 --> 00:22:02,960
and just to make stuff more confusing

578
00:22:02,960 --> 00:22:05,039
and there is actually two different

579
00:22:05,039 --> 00:22:08,640
levels of p code the row p code and the

580
00:22:08,640 --> 00:22:11,600
high p code and i didn't find like a

581
00:22:11,600 --> 00:22:14,640
very clear documentation uh what these

582
00:22:14,640 --> 00:22:16,720
are so what i'm saying is just my

583
00:22:16,720 --> 00:22:18,400
understanding and you know correct me if

584
00:22:18,400 --> 00:22:19,360
i'm wrong

585
00:22:19,360 --> 00:22:20,640
um

586
00:22:20,640 --> 00:22:24,840
basically um or first the

587
00:22:24,840 --> 00:22:27,440
the multi-layer intermediate

588
00:22:27,440 --> 00:22:30,159
representation is also not unheard of

589
00:22:30,159 --> 00:22:32,000
for instance as far as i know binary

590
00:22:32,000 --> 00:22:35,360
ninja also does this that that

591
00:22:35,360 --> 00:22:38,720
to get from assembly to to c they have

592
00:22:38,720 --> 00:22:40,640
like multiple levels of intermediate

593
00:22:40,640 --> 00:22:42,960
representation where they with each

594
00:22:42,960 --> 00:22:45,679
iteration they add more uh context to

595
00:22:45,679 --> 00:22:46,720
the code

596
00:22:46,720 --> 00:22:48,320
and basically this is the case here as

597
00:22:48,320 --> 00:22:51,039
well when we talk about row p code

598
00:22:51,039 --> 00:22:53,360
that's literally just a translation from

599
00:22:53,360 --> 00:22:55,120
the of the instruction the assembly

600
00:22:55,120 --> 00:22:57,840
instruction to uh these sequence of p

601
00:22:57,840 --> 00:23:00,960
code operations and um

602
00:23:00,960 --> 00:23:03,120
it's already great because because as i

603
00:23:03,120 --> 00:23:05,520
explained there they're much more like

604
00:23:05,520 --> 00:23:07,120
it has a structure and you have much

605
00:23:07,120 --> 00:23:09,440
more information that from the

606
00:23:09,440 --> 00:23:10,799
assembly

607
00:23:10,799 --> 00:23:12,400
but at this point you don't have like

608
00:23:12,400 --> 00:23:15,440
higher level concepts like um arguments

609
00:23:15,440 --> 00:23:18,640
or parameters or variables or

610
00:23:18,640 --> 00:23:20,320
any of these things you just have these

611
00:23:20,320 --> 00:23:24,000
sequence of uh p code operations

612
00:23:24,000 --> 00:23:25,120
and then

613
00:23:25,120 --> 00:23:28,000
when we talk about high p code um

614
00:23:28,000 --> 00:23:29,520
it's basically the output of the

615
00:23:29,520 --> 00:23:31,840
decompiler so later you're gonna you're

616
00:23:31,840 --> 00:23:34,960
gonna see in another example that to get

617
00:23:34,960 --> 00:23:37,039
access to high p code we have to set up

618
00:23:37,039 --> 00:23:39,200
the compiler and then we have to call

619
00:23:39,200 --> 00:23:42,640
the uh high function method uh for the

620
00:23:42,640 --> 00:23:44,559
the function want to analyze and then

621
00:23:44,559 --> 00:23:45,840
we're gonna we get a high function

622
00:23:45,840 --> 00:23:48,159
object back and then with that we can

623
00:23:48,159 --> 00:23:50,400
access the high p code of that

624
00:23:50,400 --> 00:23:51,840
particular function

625
00:23:51,840 --> 00:23:53,840
and basically this is the closest you

626
00:23:53,840 --> 00:23:56,480
can get to to dc

627
00:23:56,480 --> 00:23:59,200
representation and um you know for

628
00:23:59,200 --> 00:24:01,279
automated analysis it also doesn't make

629
00:24:01,279 --> 00:24:03,440
sense to go further because here you get

630
00:24:03,440 --> 00:24:05,679
the you get the structure or you get the

631
00:24:05,679 --> 00:24:07,200
structured uh

632
00:24:07,200 --> 00:24:09,840
p code and also you get the context

633
00:24:09,840 --> 00:24:12,320
information that's available in the sip

634
00:24:12,320 --> 00:24:14,799
zelda code so you know you can you can

635
00:24:14,799 --> 00:24:16,640
have things like you know what is the

636
00:24:16,640 --> 00:24:19,039
argument of this uh of this function

637
00:24:19,039 --> 00:24:22,240
call or what kind of variable is this or

638
00:24:22,240 --> 00:24:23,840
you know if you have a bar node which is

639
00:24:23,840 --> 00:24:25,679
like the the generalized data

640
00:24:25,679 --> 00:24:28,640
representation of of uh gidra then you

641
00:24:28,640 --> 00:24:30,320
can ask like where is this where is this

642
00:24:30,320 --> 00:24:32,159
war not defined and you don't have to

643
00:24:32,159 --> 00:24:34,799
backtrack line by line on your p code or

644
00:24:34,799 --> 00:24:36,559
on your assembly you can just navigate

645
00:24:36,559 --> 00:24:39,360
to the place where this value is is is

646
00:24:39,360 --> 00:24:41,200
basically set

647
00:24:41,200 --> 00:24:43,360
so it offers it it offers much more

648
00:24:43,360 --> 00:24:47,440
context to to your code

649
00:24:47,440 --> 00:24:48,640
and

650
00:24:48,640 --> 00:24:52,320
so why why usb code because it's cool um

651
00:24:52,320 --> 00:24:55,760
but no so um ir is not a new thing so

652
00:24:55,760 --> 00:24:57,520
intermediate representations are not a

653
00:24:57,520 --> 00:24:59,919
new thing um obviously the fact that

654
00:24:59,919 --> 00:25:02,400
compilers and decompilers also use them

655
00:25:02,400 --> 00:25:05,200
means that you know they kind of help in

656
00:25:05,200 --> 00:25:08,720
in understanding or analyzing um binary

657
00:25:08,720 --> 00:25:09,919
code

658
00:25:09,919 --> 00:25:12,080
so obviously it has advantage for you if

659
00:25:12,080 --> 00:25:14,480
you are if you're creating an

660
00:25:14,480 --> 00:25:15,919
analysis tool

661
00:25:15,919 --> 00:25:17,279
and um

662
00:25:17,279 --> 00:25:19,279
if that's not enough for you then then

663
00:25:19,279 --> 00:25:21,760
then maybe the fact that with p code you

664
00:25:21,760 --> 00:25:23,120
get the kind of architecture

665
00:25:23,120 --> 00:25:25,600
independence because because you're

666
00:25:25,600 --> 00:25:28,559
moving away from assembly to a level

667
00:25:28,559 --> 00:25:30,720
where you're you're you don't care about

668
00:25:30,720 --> 00:25:32,320
the processor architecture anymore

669
00:25:32,320 --> 00:25:34,000
because you're just looking at the p

670
00:25:34,000 --> 00:25:35,919
code and if you can stay on that level

671
00:25:35,919 --> 00:25:37,679
that could mean that that your

672
00:25:37,679 --> 00:25:39,279
application could deal with different

673
00:25:39,279 --> 00:25:41,600
targeted architectures of of binaries

674
00:25:41,600 --> 00:25:43,520
and you don't have to rewrite your tool

675
00:25:43,520 --> 00:25:45,360
every time you want to use it with a

676
00:25:45,360 --> 00:25:48,399
different architecture

677
00:25:48,799 --> 00:25:51,120
yes

678
00:25:51,360 --> 00:25:55,039
all right now everybody gets a demo

679
00:25:55,360 --> 00:25:58,480
so the the next example

680
00:25:58,480 --> 00:25:59,760
is gonna be

681
00:25:59,760 --> 00:26:01,679
um we're extending our first script a

682
00:26:01,679 --> 00:26:05,039
bit bit further um and uh for that a

683
00:26:05,039 --> 00:26:07,679
little bit of background information so

684
00:26:07,679 --> 00:26:08,480
um

685
00:26:08,480 --> 00:26:09,840
there is this thing from microsoft

686
00:26:09,840 --> 00:26:12,000
called the component object model um

687
00:26:12,000 --> 00:26:14,000
it's kind of like

688
00:26:14,000 --> 00:26:15,440
it's kind of like a standardized

689
00:26:15,440 --> 00:26:17,039
interface for

690
00:26:17,039 --> 00:26:19,919
whatever functionality so for instance

691
00:26:19,919 --> 00:26:23,120
um you can you can get a com object for

692
00:26:23,120 --> 00:26:25,120
for internet explorer and then you can

693
00:26:25,120 --> 00:26:27,360
pragmatically um exec

694
00:26:27,360 --> 00:26:29,919
or or control internet internet explorer

695
00:26:29,919 --> 00:26:32,320
through through a com object um you know

696
00:26:32,320 --> 00:26:34,159
like word uses these com objects or

697
00:26:34,159 --> 00:26:36,400
office uses context all the time

698
00:26:36,400 --> 00:26:38,880
so it's pretty popular in in microsoft

699
00:26:38,880 --> 00:26:39,760
word

700
00:26:39,760 --> 00:26:42,159
uh and the reason why it could be

701
00:26:42,159 --> 00:26:43,840
interesting for reversing is because

702
00:26:43,840 --> 00:26:46,640
malware uses it uh quite often and the

703
00:26:46,640 --> 00:26:48,720
reason behind it is that like if a

704
00:26:48,720 --> 00:26:51,360
malware wants to talk to some kind of c2

705
00:26:51,360 --> 00:26:53,919
server then if you just you look at the

706
00:26:53,919 --> 00:26:56,559
and it uses the windows api then if you

707
00:26:56,559 --> 00:26:58,000
just look at the

708
00:26:58,000 --> 00:27:00,880
the imported functions then you see the

709
00:27:00,880 --> 00:27:02,799
all the networking functions it uses and

710
00:27:02,799 --> 00:27:04,480
then you can just navigate to the call

711
00:27:04,480 --> 00:27:07,120
sides and then see that okay then you

712
00:27:07,120 --> 00:27:09,360
can really quickly reverse the c2

713
00:27:09,360 --> 00:27:10,559
communication

714
00:27:10,559 --> 00:27:12,880
of the malware on the other side if the

715
00:27:12,880 --> 00:27:15,279
malware uses the for instance internet

716
00:27:15,279 --> 00:27:17,360
explorer as like

717
00:27:17,360 --> 00:27:21,679
a proxy for its c2 communication then

718
00:27:21,679 --> 00:27:23,840
then it's it's much less obvious what's

719
00:27:23,840 --> 00:27:26,640
happening just because how you use the

720
00:27:26,640 --> 00:27:28,640
how you generally use com objects is is

721
00:27:28,640 --> 00:27:30,960
not trivial and it's um you know not

722
00:27:30,960 --> 00:27:33,760
easy to uh to understand just by looking

723
00:27:33,760 --> 00:27:36,080
at the uh assembly code so you have to

724
00:27:36,080 --> 00:27:38,640
invest much more time into uh reversing

725
00:27:38,640 --> 00:27:41,120
that that binary like even the fact that

726
00:27:41,120 --> 00:27:43,200
it's it's uh it's using the internet

727
00:27:43,200 --> 00:27:45,120
explorer it's not gonna be obvious when

728
00:27:45,120 --> 00:27:49,120
you just look at the uh the binary so

729
00:27:49,120 --> 00:27:52,480
in this first script we just want to

730
00:27:52,480 --> 00:27:53,440
um

731
00:27:53,440 --> 00:27:54,880
we just want to

732
00:27:54,880 --> 00:27:56,880
look at the binary and see whether it

733
00:27:56,880 --> 00:28:00,000
uses com objects at all and if so then

734
00:28:00,000 --> 00:28:01,760
we are going to you know print the p

735
00:28:01,760 --> 00:28:04,559
code of the call side uh which which you

736
00:28:04,559 --> 00:28:06,720
can use to uh

737
00:28:06,720 --> 00:28:08,640
manual uh manual

738
00:28:08,640 --> 00:28:11,120
analysis it's kind of like a

739
00:28:11,120 --> 00:28:12,960
reconnaissance script to see whether

740
00:28:12,960 --> 00:28:14,880
whether there is anything to do with com

741
00:28:14,880 --> 00:28:16,720
objects and whether you should

742
00:28:16,720 --> 00:28:19,360
focus their your reversing time

743
00:28:19,360 --> 00:28:20,640
on that

744
00:28:20,640 --> 00:28:22,559
all right i will try to

745
00:28:22,559 --> 00:28:24,960
do this again

746
00:28:24,960 --> 00:28:28,080
yeah and then we

747
00:28:28,840 --> 00:28:30,640
oh

748
00:28:30,640 --> 00:28:33,520
no that there is

749
00:28:33,679 --> 00:28:36,080
then we go back here

750
00:28:36,080 --> 00:28:37,360
so

751
00:28:37,360 --> 00:28:40,080
this is the this is the second script

752
00:28:40,080 --> 00:28:44,039
and basically

753
00:28:44,880 --> 00:28:46,720
uh here you can see these are the

754
00:28:46,720 --> 00:28:50,000
functions that are you know used to

755
00:28:50,000 --> 00:28:52,880
to con like communicate with com object

756
00:28:52,880 --> 00:28:54,880
the most important for us later will be

757
00:28:54,880 --> 00:28:57,120
the co-create instance uh we'll see that

758
00:28:57,120 --> 00:28:58,720
in the in the next

759
00:28:58,720 --> 00:29:00,000
example

760
00:29:00,000 --> 00:29:02,480
and at the beginning we do pretty much

761
00:29:02,480 --> 00:29:04,320
the same so

762
00:29:04,320 --> 00:29:07,039
we take the symbol table we look at the

763
00:29:07,039 --> 00:29:09,039
external symbols which is which are the

764
00:29:09,039 --> 00:29:11,679
imported function and then we we

765
00:29:11,679 --> 00:29:13,840
iterate through the symbols

766
00:29:13,840 --> 00:29:16,159
and then the only difference is that if

767
00:29:16,159 --> 00:29:16,880
we

768
00:29:16,880 --> 00:29:20,080
if we find um

769
00:29:20,080 --> 00:29:22,880
if we find a com object and or

770
00:29:22,880 --> 00:29:25,200
specifically the co-create instance then

771
00:29:25,200 --> 00:29:27,360
we are investigating that further

772
00:29:27,360 --> 00:29:30,080
and we are getting the cross references

773
00:29:30,080 --> 00:29:33,600
to to to the to that function call

774
00:29:33,600 --> 00:29:36,320
um and then we

775
00:29:36,320 --> 00:29:38,240
we are gonna we are gonna

776
00:29:38,240 --> 00:29:39,919
print out the basic block so here you

777
00:29:39,919 --> 00:29:42,240
can see that i'm i'm getting a basic

778
00:29:42,240 --> 00:29:44,960
basic block model for that program and

779
00:29:44,960 --> 00:29:47,200
then i get the the basic block for that

780
00:29:47,200 --> 00:29:48,960
particular address where that function

781
00:29:48,960 --> 00:29:50,080
is called

782
00:29:50,080 --> 00:29:53,520
and then at the end

783
00:29:53,520 --> 00:29:56,240
here you see i have an instruction so i

784
00:29:56,240 --> 00:29:57,600
iterate through the instruction of that

785
00:29:57,600 --> 00:29:58,799
basic block

786
00:29:58,799 --> 00:29:59,840
and

787
00:29:59,840 --> 00:30:04,559
and print the p code of that instruction

788
00:30:04,559 --> 00:30:08,480
so let's see we go to script manager

789
00:30:08,480 --> 00:30:09,679
and

790
00:30:09,679 --> 00:30:12,640
let's run this oh wait i will just

791
00:30:12,640 --> 00:30:14,960
like empty this one here

792
00:30:14,960 --> 00:30:17,039
so that it looks better

793
00:30:17,039 --> 00:30:18,480
all right

794
00:30:18,480 --> 00:30:19,440
run

795
00:30:19,440 --> 00:30:20,799
and then we go back

796
00:30:20,799 --> 00:30:24,480
and here's our output

797
00:30:25,840 --> 00:30:29,760
so here you can see what happened so

798
00:30:29,760 --> 00:30:31,919
the first com function found is the

799
00:30:31,919 --> 00:30:33,919
initial initialize

800
00:30:33,919 --> 00:30:36,320
that's supposed to be there and then we

801
00:30:36,320 --> 00:30:38,320
found the co-create instance so we say

802
00:30:38,320 --> 00:30:40,000
okay we're investigating co-create

803
00:30:40,000 --> 00:30:41,760
instance further

804
00:30:41,760 --> 00:30:45,120
and then checking cross refs and it find

805
00:30:45,120 --> 00:30:47,840
that it finds a cross-reference at this

806
00:30:47,840 --> 00:30:50,000
at this address

807
00:30:50,000 --> 00:30:50,960
so

808
00:30:50,960 --> 00:30:54,240
we go to we go to that address and then

809
00:30:54,240 --> 00:30:58,080
we we um we take the the basic block of

810
00:30:58,080 --> 00:30:59,120
that

811
00:30:59,120 --> 00:31:01,919
the basic block of that address and

812
00:31:01,919 --> 00:31:04,880
print the p code for that basic block

813
00:31:04,880 --> 00:31:07,760
so uh for instance here you see this is

814
00:31:07,760 --> 00:31:09,440
this is your address where the cross

815
00:31:09,440 --> 00:31:12,559
reference was and here is the uh the the

816
00:31:12,559 --> 00:31:13,519
call

817
00:31:13,519 --> 00:31:16,000
operation that actually calls the

818
00:31:16,000 --> 00:31:18,640
co-create instance function

819
00:31:18,640 --> 00:31:21,679
um so again at this point you should you

820
00:31:21,679 --> 00:31:24,080
still need to you know manually reverse

821
00:31:24,080 --> 00:31:26,640
what's happening here

822
00:31:26,640 --> 00:31:28,880
but

823
00:31:28,960 --> 00:31:31,200
but in the next example we are going to

824
00:31:31,200 --> 00:31:32,399
see

825
00:31:32,399 --> 00:31:35,439
go a little bit further

826
00:31:35,919 --> 00:31:37,440
i'm not sure i even have something

827
00:31:37,440 --> 00:31:39,120
useful on that slide

828
00:31:39,120 --> 00:31:41,519
yeah i do

829
00:31:41,519 --> 00:31:43,519
so in the next example

830
00:31:43,519 --> 00:31:45,600
what we are doing is

831
00:31:45,600 --> 00:31:48,240
to find out what is that that's being

832
00:31:48,240 --> 00:31:50,640
used as a com object we can you can look

833
00:31:50,640 --> 00:31:51,519
up the

834
00:31:51,519 --> 00:31:55,840
cls id and the iid so the cls id is

835
00:31:55,840 --> 00:31:58,720
basic or these both both are uuid so

836
00:31:58,720 --> 00:32:02,080
just a huge you know value um but the

837
00:32:02,080 --> 00:32:05,360
cls id can be looked up in the registry

838
00:32:05,360 --> 00:32:07,440
and there you would see what

839
00:32:07,440 --> 00:32:09,360
what the program exactly is that's being

840
00:32:09,360 --> 00:32:12,240
executed uh when this when this com

841
00:32:12,240 --> 00:32:14,960
object with this cls id is used

842
00:32:14,960 --> 00:32:16,159
the

843
00:32:16,159 --> 00:32:19,519
the id is the interface identifier um

844
00:32:19,519 --> 00:32:20,640
which is

845
00:32:20,640 --> 00:32:22,399
it's a bit more trickier to use so we

846
00:32:22,399 --> 00:32:23,760
probably have to google it what that

847
00:32:23,760 --> 00:32:25,840
exactly is it identifies what kind of

848
00:32:25,840 --> 00:32:27,679
interface that is exactly from that com

849
00:32:27,679 --> 00:32:31,279
object and that's being used um i put

850
00:32:31,279 --> 00:32:32,720
here

851
00:32:32,720 --> 00:32:34,240
oh yeah you can see

852
00:32:34,240 --> 00:32:35,440
yeah sorry

853
00:32:35,440 --> 00:32:37,679
you can see here that the

854
00:32:37,679 --> 00:32:39,039
um

855
00:32:39,039 --> 00:32:42,320
this is where you find in the registry

856
00:32:42,320 --> 00:32:43,360
which

857
00:32:43,360 --> 00:32:46,960
which program the cll cls id refers to

858
00:32:46,960 --> 00:32:48,559
obviously if this program is installed

859
00:32:48,559 --> 00:32:50,559
on your machine so you know if it's

860
00:32:50,559 --> 00:32:51,840
internet explorer it's going to be there

861
00:32:51,840 --> 00:32:54,000
any case in any way if it's something

862
00:32:54,000 --> 00:32:55,919
else like if it's it's something from

863
00:32:55,919 --> 00:32:57,919
from office then you have to have office

864
00:32:57,919 --> 00:32:59,760
installed to have this information in

865
00:32:59,760 --> 00:33:01,679
your registry

866
00:33:01,679 --> 00:33:03,120
and

867
00:33:03,120 --> 00:33:04,880
and this is how the co-create instance

868
00:33:04,880 --> 00:33:07,840
function uh looks like so we basically

869
00:33:07,840 --> 00:33:10,559
need the the first and the and the

870
00:33:10,559 --> 00:33:12,159
fourth

871
00:33:12,159 --> 00:33:14,000
parameters of this

872
00:33:14,000 --> 00:33:16,559
function call to be able to recover this

873
00:33:16,559 --> 00:33:18,640
information so that's what we are going

874
00:33:18,640 --> 00:33:20,399
to do

875
00:33:20,399 --> 00:33:23,440
so again i go back to

876
00:33:23,440 --> 00:33:25,200
to here

877
00:33:25,200 --> 00:33:29,279
to eclipse and look at the third

878
00:33:29,279 --> 00:33:32,000
code and

879
00:33:32,000 --> 00:33:33,919
yes so here you can see that we're going

880
00:33:33,919 --> 00:33:36,000
to start using the decompiler because we

881
00:33:36,000 --> 00:33:38,559
want to do it with high p code so at the

882
00:33:38,559 --> 00:33:40,559
beginning and

883
00:33:40,559 --> 00:33:43,279
we have some some code to set up the

884
00:33:43,279 --> 00:33:46,399
decompiler and it's mostly boilerplate

885
00:33:46,399 --> 00:33:47,360
um

886
00:33:47,360 --> 00:33:49,760
but but you know it kind of shows that

887
00:33:49,760 --> 00:33:51,279
you're coming

888
00:33:51,279 --> 00:33:54,480
away from simple script to you know more

889
00:33:54,480 --> 00:33:56,399
complicated programs but again it's

890
00:33:56,399 --> 00:33:58,159
mostly boilerplate so you can just

891
00:33:58,159 --> 00:34:00,480
usually copy paste it from one one

892
00:34:00,480 --> 00:34:02,720
script to to another

893
00:34:02,720 --> 00:34:05,200
and then here is the here is the

894
00:34:05,200 --> 00:34:06,799
decompile function

895
00:34:06,799 --> 00:34:09,359
where we decompile a function but the

896
00:34:09,359 --> 00:34:12,239
goal is that we just call the uh get

897
00:34:12,239 --> 00:34:16,719
high function uh on on that

898
00:34:16,719 --> 00:34:17,520
and

899
00:34:17,520 --> 00:34:20,800
and with that we get a high function

900
00:34:20,800 --> 00:34:23,679
object which will have all the the

901
00:34:23,679 --> 00:34:24,639
compact

902
00:34:24,639 --> 00:34:26,560
decompiled p code available available

903
00:34:26,560 --> 00:34:27,679
for us

904
00:34:27,679 --> 00:34:28,879
and

905
00:34:28,879 --> 00:34:31,199
if i scroll down to

906
00:34:31,199 --> 00:34:33,599
to the main to the run function the

907
00:34:33,599 --> 00:34:35,359
beginning is the same so we basically

908
00:34:35,359 --> 00:34:36,639
look up the

909
00:34:36,639 --> 00:34:39,359
com related functions then we find the

910
00:34:39,359 --> 00:34:41,199
co-create instance

911
00:34:41,199 --> 00:34:43,598
and

912
00:34:43,760 --> 00:34:46,240
and the

913
00:34:46,560 --> 00:34:47,280
the

914
00:34:47,280 --> 00:34:49,918
interesting part is here

915
00:34:49,918 --> 00:34:51,760
so until here it's pretty much the same

916
00:34:51,760 --> 00:34:54,399
as the previous script uh here we call

917
00:34:54,399 --> 00:34:55,280
this

918
00:34:55,280 --> 00:34:59,119
find cls id and iid

919
00:34:59,119 --> 00:35:00,400
function

920
00:35:00,400 --> 00:35:04,160
and then we can go to declaration

921
00:35:04,160 --> 00:35:06,880
and this is basically

922
00:35:06,880 --> 00:35:08,079
what

923
00:35:08,079 --> 00:35:10,000
uh what it does this is what's going to

924
00:35:10,000 --> 00:35:12,160
get the hype code for us so here we call

925
00:35:12,160 --> 00:35:13,760
the decompile function

926
00:35:13,760 --> 00:35:14,640
um

927
00:35:14,640 --> 00:35:17,280
and then then we get the p codes of that

928
00:35:17,280 --> 00:35:18,880
high function

929
00:35:18,880 --> 00:35:21,119
as an iterator so that we can go through

930
00:35:21,119 --> 00:35:23,119
the p code operations

931
00:35:23,119 --> 00:35:24,880
and um

932
00:35:24,880 --> 00:35:27,440
and later here um

933
00:35:27,440 --> 00:35:28,960
this is what's important that this is

934
00:35:28,960 --> 00:35:30,960
what is not possible

935
00:35:30,960 --> 00:35:33,359
if you use ropey code because basically

936
00:35:33,359 --> 00:35:35,520
you can say here okay here is a call

937
00:35:35,520 --> 00:35:38,000
operation so give me the inputs

938
00:35:38,000 --> 00:35:39,760
basically the arguments of this call

939
00:35:39,760 --> 00:35:41,599
operation so you cannot do that in

940
00:35:41,599 --> 00:35:43,680
assembly or you cannot do that in in row

941
00:35:43,680 --> 00:35:46,400
p code because this is you know the the

942
00:35:46,400 --> 00:35:50,079
um the context um what what all what is

943
00:35:50,079 --> 00:35:52,560
only available in in hyp code and we are

944
00:35:52,560 --> 00:35:53,760
requesting the first and the fourth

945
00:35:53,760 --> 00:35:55,200
parameter because that's what that was

946
00:35:55,200 --> 00:35:57,599
the cls id and the iid

947
00:35:57,599 --> 00:35:59,680
and basically after that we are just

948
00:35:59,680 --> 00:36:02,320
calling some helper scripts

949
00:36:02,320 --> 00:36:05,200
helper functions to uh to turn that byte

950
00:36:05,200 --> 00:36:06,400
array to

951
00:36:06,400 --> 00:36:10,480
um to a human readable uuid

952
00:36:10,480 --> 00:36:12,640
this script is limited to

953
00:36:12,640 --> 00:36:14,079
to you know

954
00:36:14,079 --> 00:36:16,160
uuids that are built like hard-coding in

955
00:36:16,160 --> 00:36:18,720
a binary but obviously you can extend it

956
00:36:18,720 --> 00:36:21,599
to to make it smarter

957
00:36:21,599 --> 00:36:24,160
so i come back here to the

958
00:36:24,160 --> 00:36:26,720
script manager and i will oh wait i will

959
00:36:26,720 --> 00:36:27,680
just

960
00:36:27,680 --> 00:36:30,000
empty the console again

961
00:36:30,000 --> 00:36:31,760
and script manager

962
00:36:31,760 --> 00:36:34,960
and let's run it

963
00:36:34,960 --> 00:36:37,760
and here we have the output

964
00:36:37,760 --> 00:36:40,160
and on the top it's exactly the same as

965
00:36:40,160 --> 00:36:42,160
before

966
00:36:42,160 --> 00:36:43,359
and here

967
00:36:43,359 --> 00:36:45,680
here we have the looking for csid and

968
00:36:45,680 --> 00:36:46,880
iid

969
00:36:46,880 --> 00:36:48,560
and this is

970
00:36:48,560 --> 00:36:50,800
we identified the call

971
00:36:50,800 --> 00:36:52,800
of the concrete instance and as you can

972
00:36:52,800 --> 00:36:55,839
see here this is this is what uh what

973
00:36:55,839 --> 00:36:58,640
the high p code is is looks like that we

974
00:36:58,640 --> 00:37:00,240
don't have just the call and then the

975
00:37:00,240 --> 00:37:02,320
address where we what we want to call

976
00:37:02,320 --> 00:37:04,079
but here we actually have the the

977
00:37:04,079 --> 00:37:06,880
parameters to that function call uh

978
00:37:06,880 --> 00:37:08,960
listed and now we have information

979
00:37:08,960 --> 00:37:10,800
whether they are constant or like this

980
00:37:10,800 --> 00:37:13,599
one is like a a register that is passed

981
00:37:13,599 --> 00:37:15,760
to to that call and obviously the first

982
00:37:15,760 --> 00:37:18,079
first parameter is the address of the

983
00:37:18,079 --> 00:37:19,760
function that we are calling

984
00:37:19,760 --> 00:37:21,440
and then here at the end we are printing

985
00:37:21,440 --> 00:37:22,560
the

986
00:37:22,560 --> 00:37:25,280
the cls id and the iid so these these

987
00:37:25,280 --> 00:37:27,280
are the things that we wanted to

988
00:37:27,280 --> 00:37:28,480
recover

989
00:37:28,480 --> 00:37:30,800
at this point you can either start to

990
00:37:30,800 --> 00:37:32,880
google these values or look them up in

991
00:37:32,880 --> 00:37:35,040
the windows registry or if you are

992
00:37:35,040 --> 00:37:36,960
running your your gitra script or on a

993
00:37:36,960 --> 00:37:38,640
windows machine that you can actually

994
00:37:38,640 --> 00:37:41,119
build in your gitra script that

995
00:37:41,119 --> 00:37:43,920
to look these values up with windows

996
00:37:43,920 --> 00:37:46,079
apis from the registry so you could

997
00:37:46,079 --> 00:37:48,880
automate one step further if you are

998
00:37:48,880 --> 00:37:53,119
if you are doing that on windows

999
00:37:53,119 --> 00:37:54,240
um

1000
00:37:54,240 --> 00:37:57,280
and so again the advantage of

1001
00:37:57,280 --> 00:37:58,880
of this

1002
00:37:58,880 --> 00:38:00,960
on

1003
00:38:00,960 --> 00:38:03,119
with high p code was that we can we can

1004
00:38:03,119 --> 00:38:04,480
easily recover

1005
00:38:04,480 --> 00:38:07,040
the um the parameters of that function

1006
00:38:07,040 --> 00:38:08,160
call

1007
00:38:08,160 --> 00:38:10,560
and we didn't have to you know

1008
00:38:10,560 --> 00:38:13,200
manually look into uh you know where

1009
00:38:13,200 --> 00:38:15,119
these values are coming from

1010
00:38:15,119 --> 00:38:18,119
etc

1011
00:38:19,599 --> 00:38:20,800
oh yeah

1012
00:38:20,800 --> 00:38:24,400
so um that's pretty much it um i hope it

1013
00:38:24,400 --> 00:38:27,440
was understandable um

1014
00:38:27,440 --> 00:38:29,680
quickly recap so gitra is a really

1015
00:38:29,680 --> 00:38:32,000
powerful tool um i think it's worth

1016
00:38:32,000 --> 00:38:34,000
looking into it if if reversing is your

1017
00:38:34,000 --> 00:38:35,440
stuff

1018
00:38:35,440 --> 00:38:38,240
and p code can offer you

1019
00:38:38,240 --> 00:38:40,160
some some

1020
00:38:40,160 --> 00:38:42,800
great automation possibilities

1021
00:38:42,800 --> 00:38:44,480
and

1022
00:38:44,480 --> 00:38:47,200
you know it's relatively well documented

1023
00:38:47,200 --> 00:38:48,800
and um

1024
00:38:48,800 --> 00:38:50,720
and and you know

1025
00:38:50,720 --> 00:38:53,200
at the end you don't have to be a fanboy

1026
00:38:53,200 --> 00:38:55,920
uh if um you know you just choose the

1027
00:38:55,920 --> 00:38:58,160
tool for the task that you want to solve

1028
00:38:58,160 --> 00:39:00,640
maybe it's kidra maybe it's not uh but

1029
00:39:00,640 --> 00:39:02,160
it's definitely work to have worth to

1030
00:39:02,160 --> 00:39:04,240
have git dry np code in your

1031
00:39:04,240 --> 00:39:07,839
arsenal for uh reversing

1032
00:39:07,839 --> 00:39:11,440
and um just a few references um apart

1033
00:39:11,440 --> 00:39:12,640
from the document the official

1034
00:39:12,640 --> 00:39:15,440
documentation there is not so much stuff

1035
00:39:15,440 --> 00:39:17,920
on the internet about b code itself

1036
00:39:17,920 --> 00:39:20,400
um so that's why i wanted to post here

1037
00:39:20,400 --> 00:39:23,359
these two um these two posts so alexa

1038
00:39:23,359 --> 00:39:25,280
jeremy they they had a presentation on p

1039
00:39:25,280 --> 00:39:27,760
code some time ago uh and this is the

1040
00:39:27,760 --> 00:39:31,440
blog post to it and raw roll frost um

1041
00:39:31,440 --> 00:39:34,320
writes um sometimes about p code as well

1042
00:39:34,320 --> 00:39:36,400
so if you start on on p code you know

1043
00:39:36,400 --> 00:39:37,280
these are

1044
00:39:37,280 --> 00:39:38,400
um

1045
00:39:38,400 --> 00:39:40,079
it's not introductory but you know these

1046
00:39:40,079 --> 00:39:43,119
are good references to to look into and

1047
00:39:43,119 --> 00:39:44,960
i just wanted to mention carlos my

1048
00:39:44,960 --> 00:39:46,480
friend who helped me with his infinite

1049
00:39:46,480 --> 00:39:50,880
wisdom in creating this uh presentation

1050
00:39:50,880 --> 00:39:53,839
so thanks very much um i was gary um i

1051
00:39:53,839 --> 00:39:55,520
think we have time for questions

1052
00:39:55,520 --> 00:39:57,599
although probably you're already

1053
00:39:57,599 --> 00:39:59,280
hungry but

1054
00:39:59,280 --> 00:40:01,359
let me know if you have questions

1055
00:40:01,359 --> 00:40:03,040
if you don't have questions right now

1056
00:40:03,040 --> 00:40:04,560
you can reach me on any of these

1057
00:40:04,560 --> 00:40:07,520
platforms or you know generally here

1058
00:40:07,520 --> 00:40:09,599
today and tomorrow

1059
00:40:09,599 --> 00:40:12,640
so thanks very much

1060
00:40:15,610 --> 00:40:18,480
[Applause]

1061
00:40:18,480 --> 00:40:20,400
somebody questions there is a question i

1062
00:40:20,400 --> 00:40:23,880
think you get a microphone

1063
00:40:25,359 --> 00:40:29,040
it's the fastest way let's see

1064
00:40:31,599 --> 00:40:35,079
excuse me

1065
00:40:38,240 --> 00:40:40,480
yeah um you said that you started with

1066
00:40:40,480 --> 00:40:43,119
python and then switched to java

1067
00:40:43,119 --> 00:40:45,119
any tips on how to do that because i'm

1068
00:40:45,119 --> 00:40:47,760
not really a fan of java myself either

1069
00:40:47,760 --> 00:40:49,599
how did you how did you do it did you

1070
00:40:49,599 --> 00:40:52,240
learn it somewhere or just i mean i did

1071
00:40:52,240 --> 00:40:54,800
learn java at the university so we had

1072
00:40:54,800 --> 00:40:56,720
this great object-oriented programming

1073
00:40:56,720 --> 00:40:59,680
class which was in java but that was in

1074
00:40:59,680 --> 00:41:01,359
i think in 2000

1075
00:41:01,359 --> 00:41:02,319
um

1076
00:41:02,319 --> 00:41:03,280
like

1077
00:41:03,280 --> 00:41:06,079
maybe six so it was a long time ago well

1078
00:41:06,079 --> 00:41:08,240
it's just you know i say that i'm not

1079
00:41:08,240 --> 00:41:10,880
i'm a google programmer so i kind of

1080
00:41:10,880 --> 00:41:13,280
program using google so uh

1081
00:41:13,280 --> 00:41:15,520
whatever i want to do something i google

1082
00:41:15,520 --> 00:41:18,160
it so and it's not terrible uh to be

1083
00:41:18,160 --> 00:41:19,760
honest i i thought it's gonna it's gonna

1084
00:41:19,760 --> 00:41:22,640
be worse um but at the end of the day

1085
00:41:22,640 --> 00:41:25,359
once you set up this um this

1086
00:41:25,359 --> 00:41:27,760
uh development environment with eclipse

1087
00:41:27,760 --> 00:41:30,400
then basically by saying create new

1088
00:41:30,400 --> 00:41:32,640
gender script then eclipse is gonna

1089
00:41:32,640 --> 00:41:35,200
throw you like this template and from

1090
00:41:35,200 --> 00:41:37,040
there you just have to write your java

1091
00:41:37,040 --> 00:41:38,960
code to do stuff like you don't have to

1092
00:41:38,960 --> 00:41:40,880
care about um

1093
00:41:40,880 --> 00:41:42,480
how it's going to be executed because

1094
00:41:42,480 --> 00:41:44,720
because actually provided to you

1095
00:41:44,720 --> 00:41:46,079
um

1096
00:41:46,079 --> 00:41:47,359
but

1097
00:41:47,359 --> 00:41:49,200
but the java code itself yeah you will

1098
00:41:49,200 --> 00:41:51,040
have to google it like you know i also

1099
00:41:51,040 --> 00:41:53,359
googled how how to do a for loop in java

1100
00:41:53,359 --> 00:41:55,680
like things like that so um you know

1101
00:41:55,680 --> 00:41:57,920
obviously i think that's that that's how

1102
00:41:57,920 --> 00:42:00,960
and i'm i mean it wasn't bad so i still

1103
00:42:00,960 --> 00:42:02,400
google a lot of stuff but it wasn't

1104
00:42:02,400 --> 00:42:06,240
terrible all right thank you sure

1105
00:42:10,720 --> 00:42:14,160
somebody else yeah there isn't

1106
00:42:20,640 --> 00:42:22,160
yeah so

1107
00:42:22,160 --> 00:42:24,160
i just wanted to know uh when you write

1108
00:42:24,160 --> 00:42:27,119
scripts uh using p code is p code aware

1109
00:42:27,119 --> 00:42:29,119
of the calling convention or do you need

1110
00:42:29,119 --> 00:42:31,440
to ask specific well

1111
00:42:31,440 --> 00:42:34,640
you are um getting values of out of

1112
00:42:34,640 --> 00:42:37,280
specific parameters can you ask it to

1113
00:42:37,280 --> 00:42:39,760
give you parameter one two and three or

1114
00:42:39,760 --> 00:42:40,960
do you need to

1115
00:42:40,960 --> 00:42:44,720
ask me area x e x

1116
00:42:44,720 --> 00:42:46,960
uh so uh theoretically and and that's

1117
00:42:46,960 --> 00:42:49,200
what i tried to show you

1118
00:42:49,200 --> 00:42:51,359
in gidra

1119
00:42:51,359 --> 00:42:54,400
and uh we can go quickly back there

1120
00:42:54,400 --> 00:42:56,160
so this is this is the high p code you

1121
00:42:56,160 --> 00:42:57,440
can see here i'm not sure whether you

1122
00:42:57,440 --> 00:42:59,760
see it from zoom in to see here here you

1123
00:42:59,760 --> 00:43:01,520
already have the parameters so this

1124
00:43:01,520 --> 00:43:04,079
first value like normally in row p code

1125
00:43:04,079 --> 00:43:05,920
you only have the call and the address

1126
00:43:05,920 --> 00:43:07,599
that you're calling and then the

1127
00:43:07,599 --> 00:43:10,400
parameters are you know somewhere above

1128
00:43:10,400 --> 00:43:12,560
here with code you have the address and

1129
00:43:12,560 --> 00:43:14,720
then listed all the all the parameters

1130
00:43:14,720 --> 00:43:17,280
of that function call and this is what

1131
00:43:17,280 --> 00:43:19,440
like when you do get input so that's the

1132
00:43:19,440 --> 00:43:21,440
that's the method you call and you tell

1133
00:43:21,440 --> 00:43:24,560
which the number of the of the parameter

1134
00:43:24,560 --> 00:43:26,640
you want to have and that's how you get

1135
00:43:26,640 --> 00:43:28,640
the fourth or the fif

1136
00:43:28,640 --> 00:43:31,359
the the first parameter obviously this

1137
00:43:31,359 --> 00:43:34,160
isn't gonna work all the time so um you

1138
00:43:34,160 --> 00:43:36,400
know sometimes it's hard and

1139
00:43:36,400 --> 00:43:38,800
it has also limitations uh but this is

1140
00:43:38,800 --> 00:43:40,480
how it is supposed to work

1141
00:43:40,480 --> 00:43:43,599
okay thanks sure

1142
00:43:44,720 --> 00:43:47,520
any more question

1143
00:43:48,160 --> 00:43:50,480
thank you

1144
00:43:52,319 --> 00:43:54,240
no then i guess thanks for thanks for

1145
00:43:54,240 --> 00:43:57,359
being here and have a nice lunch and see

1146
00:43:57,359 --> 00:43:58,440
you later

1147
00:43:58,440 --> 00:44:06,580
[Applause]

