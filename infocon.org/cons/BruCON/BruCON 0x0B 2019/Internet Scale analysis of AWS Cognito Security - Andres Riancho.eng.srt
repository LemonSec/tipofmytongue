1
00:00:04,580 --> 00:00:10,019
all right thank you

2
00:00:07,740 --> 00:00:13,530
today I'm going to be talking about an

3
00:00:10,019 --> 00:00:17,490
internet scale analysis of AWS

4
00:00:13,530 --> 00:00:20,490
coordinator so it all started with a

5
00:00:17,490 --> 00:00:25,009
cloud security assessment one of my

6
00:00:20,490 --> 00:00:30,330
customers asked me to review their cloud

7
00:00:25,010 --> 00:00:33,239
their account the services and I was

8
00:00:30,330 --> 00:00:36,780
going through the whole list of services

9
00:00:33,239 --> 00:00:39,358
that they were using in order to do that

10
00:00:36,780 --> 00:00:43,609
the customer gives me read-only

11
00:00:39,359 --> 00:00:47,569
credentials and I perform different

12
00:00:43,609 --> 00:00:51,960
enumeration tasks in order to see

13
00:00:47,569 --> 00:00:54,300
everything that they use and with this

14
00:00:51,960 --> 00:00:59,159
customer something different appeared

15
00:00:54,300 --> 00:01:03,449
and it was Cognito so I read in one of

16
00:00:59,159 --> 00:01:08,039
the tools kognito and I said what is

17
00:01:03,449 --> 00:01:11,579
this I have no idea so I went to the

18
00:01:08,040 --> 00:01:14,640
documentation like any good hacker does

19
00:01:11,579 --> 00:01:17,699
and if you're not going to the

20
00:01:14,640 --> 00:01:22,289
documentation do it it will improve your

21
00:01:17,700 --> 00:01:25,460
skills as a hacker trust me and this is

22
00:01:22,289 --> 00:01:30,619
what I found in the documentation

23
00:01:25,460 --> 00:01:35,250
identity pools enable you the developer

24
00:01:30,619 --> 00:01:40,789
to grant your users and users of the

25
00:01:35,250 --> 00:01:48,439
application access to AWS services so

26
00:01:40,789 --> 00:01:51,859
end users access AWS services and users

27
00:01:48,439 --> 00:01:57,538
access your infrastructure

28
00:01:51,859 --> 00:02:02,189
so what could go wrong right actually a

29
00:01:57,539 --> 00:02:05,909
lot so with the credentials that I have

30
00:02:02,189 --> 00:02:09,690
for that account I went to the AWS

31
00:02:05,909 --> 00:02:13,220
console and in the web application you

32
00:02:09,690 --> 00:02:16,850
just have a section for Cognito

33
00:02:13,220 --> 00:02:19,940
and in that section I found the identity

34
00:02:16,850 --> 00:02:23,060
poles and when you are the developer and

35
00:02:19,940 --> 00:02:27,230
you have read access to it it will show

36
00:02:23,060 --> 00:02:30,980
something like this the identity pole I

37
00:02:27,230 --> 00:02:36,109
D is there one in web and as you can see

38
00:02:30,980 --> 00:02:40,670
it's it has a format it has the region

39
00:02:36,110 --> 00:02:45,950
first true colon or a semi colon sorry

40
00:02:40,670 --> 00:02:49,060
and the identity pool ID that ID is

41
00:02:45,950 --> 00:02:54,760
randomly generated and it's pretty long

42
00:02:49,060 --> 00:02:57,890
so I got that from the AWS console and

43
00:02:54,760 --> 00:03:01,690
also from the documentation I took this

44
00:02:57,890 --> 00:03:03,799
function this function is going to and

45
00:03:01,690 --> 00:03:06,530
forget about the source code for a

46
00:03:03,800 --> 00:03:09,680
minute it's going to receive an identity

47
00:03:06,530 --> 00:03:13,930
polity which is the ID that we saw

48
00:03:09,680 --> 00:03:18,530
before and the output is AWS credentials

49
00:03:13,930 --> 00:03:22,459
that's how AWS Kaneda works that's one

50
00:03:18,530 --> 00:03:25,840
of the features that it has you throw an

51
00:03:22,459 --> 00:03:28,670
identity podi and in return screenshots

52
00:03:25,840 --> 00:03:31,700
all of these that we all of these lines

53
00:03:28,670 --> 00:03:34,369
that we see here is just the

54
00:03:31,700 --> 00:03:37,549
implementation for that black box it's

55
00:03:34,370 --> 00:03:41,090
nothing special nothing no hacks

56
00:03:37,550 --> 00:03:43,250
involved it's just how it works this is

57
00:03:41,090 --> 00:03:48,860
a function that I copy pasted from the

58
00:03:43,250 --> 00:03:54,200
AWS documentation so after I got AWS

59
00:03:48,860 --> 00:03:57,680
credentials for that account I said what

60
00:03:54,200 --> 00:04:01,359
can I do with these credentials am I

61
00:03:57,680 --> 00:04:06,290
going to be able to read files from s3

62
00:04:01,360 --> 00:04:09,950
am I going to be able to shut down ec2

63
00:04:06,290 --> 00:04:13,150
instances and not sure so my next step

64
00:04:09,950 --> 00:04:16,010
was to perform permission enumeration I

65
00:04:13,150 --> 00:04:18,470
took those credentials

66
00:04:16,010 --> 00:04:21,680
followed some steps I'm going to show

67
00:04:18,470 --> 00:04:25,180
them later and got definitions

68
00:04:21,680 --> 00:04:32,380
associated with those credentials and

69
00:04:25,180 --> 00:04:35,479
this sorry this was an assessment i just

70
00:04:32,380 --> 00:04:38,690
got access to it and was allowed to do

71
00:04:35,479 --> 00:04:41,860
anything with the account so i perform a

72
00:04:38,690 --> 00:04:44,870
privilege escalation attack using

73
00:04:41,860 --> 00:04:47,900
different techniques that involve lambda

74
00:04:44,870 --> 00:04:51,580
functions and from the credentials that

75
00:04:47,900 --> 00:04:56,229
i got initially from AWS kognito i

76
00:04:51,580 --> 00:05:00,650
elevate my privileges and ended up being

77
00:04:56,229 --> 00:05:05,289
for that AWS account my customer was

78
00:05:00,650 --> 00:05:09,049
happy I was happy this ended up being

79
00:05:05,289 --> 00:05:13,930
critical finding for this report for

80
00:05:09,050 --> 00:05:18,020
this assessment and I started to think

81
00:05:13,930 --> 00:05:23,020
this is something common is this

82
00:05:18,020 --> 00:05:26,900
something that many developers are doing

83
00:05:23,020 --> 00:05:30,950
assigning a lot of privileges to AWS

84
00:05:26,900 --> 00:05:36,760
kognito am I going to be able to exploit

85
00:05:30,950 --> 00:05:39,590
this in many installations worldwide and

86
00:05:36,760 --> 00:05:44,139
is it even possible to perform an

87
00:05:39,590 --> 00:05:47,119
internal scale analysis of AWS Cognito

88
00:05:44,139 --> 00:05:51,770
so all of these questions were the ones

89
00:05:47,120 --> 00:05:56,260
that started the research and the next

90
00:05:51,770 --> 00:05:59,469
slides are going to explain how I did it

91
00:05:56,260 --> 00:06:03,380
first I'm going to introduce you to

92
00:05:59,470 --> 00:06:07,669
kognito I just kind of told you what it

93
00:06:03,380 --> 00:06:11,690
is but in 30 seconds I'm going to zoom

94
00:06:07,669 --> 00:06:14,770
into that then I'm going to show you how

95
00:06:11,690 --> 00:06:18,160
I get the Internet in order to find

96
00:06:14,770 --> 00:06:18,159
identity politics

97
00:06:18,950 --> 00:06:24,710
one of the final steps I'm going to show

98
00:06:21,980 --> 00:06:28,280
you the statistics for the results of

99
00:06:24,710 --> 00:06:34,520
this research and finally we're going to

100
00:06:28,280 --> 00:06:37,549
try to understand why this happens this

101
00:06:34,520 --> 00:06:42,229
is a tweet that I received a few days

102
00:06:37,550 --> 00:06:45,460
ago I delivered this talk echo party in

103
00:06:42,230 --> 00:06:49,520
Buenos Aires and a few days after

104
00:06:45,460 --> 00:06:53,539
delivering that talk a random guy that I

105
00:06:49,520 --> 00:06:55,760
don't know he seems to be from Argentina

106
00:06:53,540 --> 00:07:00,830
because it says Francisco yes and that's

107
00:06:55,760 --> 00:07:05,630
a common name in in Argentina is saying

108
00:07:00,830 --> 00:07:08,000
that he owned an AWS account using these

109
00:07:05,630 --> 00:07:10,520
techniques and I'm showing this because

110
00:07:08,000 --> 00:07:13,160
it makes me happy and also because I

111
00:07:10,520 --> 00:07:17,060
want to let you know that this is easy

112
00:07:13,160 --> 00:07:21,130
to do there's no magic here once you

113
00:07:17,060 --> 00:07:24,410
understand once you go through the next

114
00:07:21,130 --> 00:07:29,840
30 minutes and pay attention to what I'm

115
00:07:24,410 --> 00:07:33,110
saying you can go home and own your like

116
00:07:29,840 --> 00:07:37,429
AWS accounts customers aid of this

117
00:07:33,110 --> 00:07:40,460
accounts let's say all the ones that are

118
00:07:37,430 --> 00:07:44,750
in a bug bounty don't hack anything

119
00:07:40,460 --> 00:07:49,210
random if you do send me a DM don't send

120
00:07:44,750 --> 00:07:53,560
me a tweet a public to attack this so

121
00:07:49,210 --> 00:07:56,270
intro to AWS Cognito

122
00:07:53,560 --> 00:08:02,960
address Cognito has two main components

123
00:07:56,270 --> 00:08:06,500
a user directory and identity pools the

124
00:08:02,960 --> 00:08:10,580
user directory or use of poles is a

125
00:08:06,500 --> 00:08:15,400
place to store user data so it's a

126
00:08:10,580 --> 00:08:18,620
database you store the email username

127
00:08:15,400 --> 00:08:21,229
phone number and stuff like that it's

128
00:08:18,620 --> 00:08:24,950
not very interesting and then you have

129
00:08:21,230 --> 00:08:27,410
identity poles the identity poles are

130
00:08:24,950 --> 00:08:30,960
the component that allows

131
00:08:27,410 --> 00:08:35,400
users to get AWS credentials

132
00:08:30,960 --> 00:08:38,819
I need works like this in that graph you

133
00:08:35,400 --> 00:08:42,110
see how the application is going to

134
00:08:38,820 --> 00:08:46,950
first authenticate against the user pool

135
00:08:42,110 --> 00:08:50,420
it gets a token from that user pool then

136
00:08:46,950 --> 00:08:52,890
it uses the token in order to

137
00:08:50,420 --> 00:08:57,569
communicate with the identity pool and

138
00:08:52,890 --> 00:09:00,150
get AWS credentials and finally it uses

139
00:08:57,570 --> 00:09:04,830
those credentials to consume other

140
00:09:00,150 --> 00:09:10,560
services those services can be DynamoDB

141
00:09:04,830 --> 00:09:16,290
s3 I am any service that you know from

142
00:09:10,560 --> 00:09:20,449
idle yes okay so let me explain this

143
00:09:16,290 --> 00:09:24,930
with an example we have an application

144
00:09:20,450 --> 00:09:28,250
that application is called cute cool

145
00:09:24,930 --> 00:09:32,400
topics and it has a mobile device

146
00:09:28,250 --> 00:09:34,560
application and a web application the

147
00:09:32,400 --> 00:09:36,980
mobile application is going to use

148
00:09:34,560 --> 00:09:40,560
kognito and also the world application

149
00:09:36,980 --> 00:09:45,110
so the developer wants to create a very

150
00:09:40,560 --> 00:09:50,069
simple experience for the users

151
00:09:45,110 --> 00:09:55,580
authenticated users can upload images of

152
00:09:50,070 --> 00:09:59,880
their cats to s3 directly and

153
00:09:55,580 --> 00:10:03,480
authenticate the users can also set a

154
00:09:59,880 --> 00:10:06,090
title for that image the image that they

155
00:10:03,480 --> 00:10:08,940
just uploaded it will have a title that

156
00:10:06,090 --> 00:10:13,370
title is going to be stored in a

157
00:10:08,940 --> 00:10:20,400
DynamoDB table the mobile application

158
00:10:13,370 --> 00:10:22,710
directly writes to s3 and DynamoDB then

159
00:10:20,400 --> 00:10:27,740
there is going to be an unauthenticated

160
00:10:22,710 --> 00:10:32,130
user that an authenticated user can only

161
00:10:27,740 --> 00:10:33,040
see the images read the images which are

162
00:10:32,130 --> 00:10:37,689
stored

163
00:10:33,040 --> 00:10:44,079
on s3 are you guys following me make

164
00:10:37,690 --> 00:10:46,930
sense yeah go and in order to do that

165
00:10:44,079 --> 00:10:50,199
the mobile application needs to use

166
00:10:46,930 --> 00:10:53,229
libraries there are official libraries

167
00:10:50,199 --> 00:11:01,420
which are developed at least partially

168
00:10:53,230 --> 00:11:05,019
by AWS for iOS and for Android so this

169
00:11:01,420 --> 00:11:08,199
application needs to embed those SDKs

170
00:11:05,019 --> 00:11:10,740
and this is important for one of the

171
00:11:08,199 --> 00:11:16,508
steps that we are going to see later

172
00:11:10,740 --> 00:11:20,529
also the web application that's going to

173
00:11:16,509 --> 00:11:26,230
be communicating week with Cognito with

174
00:11:20,529 --> 00:11:31,389
s3 and with dynamodb needs to have a

175
00:11:26,230 --> 00:11:35,019
JavaScript library also on sdk in order

176
00:11:31,389 --> 00:11:36,699
to do that in order to sign requests

177
00:11:35,019 --> 00:11:39,730
that are going to go to different

178
00:11:36,699 --> 00:11:42,880
services the mobile application the

179
00:11:39,730 --> 00:11:46,389
browser application that's running on

180
00:11:42,880 --> 00:11:52,389
the client side needs to have there as

181
00:11:46,389 --> 00:11:56,230
the SDK the JavaScript SDK and this is

182
00:11:52,389 --> 00:11:58,630
how it looks for a developer when a

183
00:11:56,230 --> 00:12:04,750
developer is creating a new identity

184
00:11:58,630 --> 00:12:08,350
pool he enters a name simple he needs to

185
00:12:04,750 --> 00:12:10,980
define if this identity pool is going to

186
00:12:08,350 --> 00:12:15,190
allow an authenticated

187
00:12:10,980 --> 00:12:19,199
role so in the example that we saw

188
00:12:15,190 --> 00:12:24,399
before with the application for their

189
00:12:19,199 --> 00:12:27,609
cat pictures we have two roles the role

190
00:12:24,399 --> 00:12:30,910
for not authenticated under all for

191
00:12:27,610 --> 00:12:32,470
authenticated if the developer is

192
00:12:30,910 --> 00:12:35,170
creating that application

193
00:12:32,470 --> 00:12:38,249
he needs to enable here

194
00:12:35,170 --> 00:12:39,689
access to unauthenticated identities

195
00:12:38,249 --> 00:12:44,079
okay

196
00:12:39,689 --> 00:12:50,459
users don't need to authenticate with a

197
00:12:44,079 --> 00:12:54,910
user pool before getting AWS credentials

198
00:12:50,459 --> 00:12:58,329
then he'll the developer also if

199
00:12:54,910 --> 00:13:03,189
necessary can configure other sources

200
00:12:58,329 --> 00:13:04,559
for authenticating so users of this

201
00:13:03,189 --> 00:13:08,290
small application could be

202
00:13:04,559 --> 00:13:13,299
authenticating through Facebook Google+

203
00:13:08,290 --> 00:13:21,309
and other providers then the developer

204
00:13:13,299 --> 00:13:29,619
assigns roles i am rose to Cognito i am

205
00:13:21,309 --> 00:13:33,189
all in AWS there an entity a resource in

206
00:13:29,619 --> 00:13:35,769
ideas which are used to define

207
00:13:33,189 --> 00:13:38,738
privileges in order to access other

208
00:13:35,769 --> 00:13:42,730
resources and I'm going to show that

209
00:13:38,739 --> 00:13:46,629
later but here we are going to set two

210
00:13:42,730 --> 00:13:52,949
different roles one role for the

211
00:13:46,629 --> 00:13:56,110
unaffiliated users incognito and a

212
00:13:52,949 --> 00:14:00,969
different role for the authenticated

213
00:13:56,110 --> 00:14:03,850
access so Cognito and this is how one of

214
00:14:00,970 --> 00:14:07,899
the policies that are attached to roles

215
00:14:03,850 --> 00:14:12,369
look like if you want to grant a user

216
00:14:07,899 --> 00:14:16,749
access to lists the contents of an s3

217
00:14:12,369 --> 00:14:20,049
bucket you do it like this s3 this

218
00:14:16,749 --> 00:14:23,230
bucket is the action the resource is a

219
00:14:20,049 --> 00:14:27,939
specific bucket and the other action

220
00:14:23,230 --> 00:14:30,579
that sphere is s3 star object which is

221
00:14:27,939 --> 00:14:34,238
going to be something like allow the

222
00:14:30,579 --> 00:14:37,479
user to read and write and finally also

223
00:14:34,239 --> 00:14:40,529
the resource where the user can perform

224
00:14:37,480 --> 00:14:40,529
those actions

225
00:14:40,620 --> 00:14:45,750
by defining this he is going to be

226
00:14:43,500 --> 00:14:52,800
defining the permissions that are going

227
00:14:45,750 --> 00:14:55,410
to be associated with AWS kognito right

228
00:14:52,800 --> 00:14:59,670
now after the developer completes those

229
00:14:55,410 --> 00:15:04,230
very simple steps the identity pole is

230
00:14:59,670 --> 00:15:06,089
created and it's ready to use the

231
00:15:04,230 --> 00:15:08,850
developer is also going to get a screen

232
00:15:06,090 --> 00:15:10,620
like this with identity pool this

233
00:15:08,850 --> 00:15:13,800
identity ball is the one that needs to

234
00:15:10,620 --> 00:15:16,440
be hard-coded into the mobile

235
00:15:13,800 --> 00:15:19,859
application and needs to be hard-coded

236
00:15:16,440 --> 00:15:21,480
into their web application though it

237
00:15:19,860 --> 00:15:24,480
needs to be hard-coded because it's the

238
00:15:21,480 --> 00:15:26,640
entry point for kognito those

239
00:15:24,480 --> 00:15:29,520
applications when they need to talk with

240
00:15:26,640 --> 00:15:33,360
Cognito they need ID in order to know

241
00:15:29,520 --> 00:15:37,760
which Cognito instance they are talking

242
00:15:33,360 --> 00:15:40,950
with and as a reminder this is

243
00:15:37,760 --> 00:15:46,830
completely random it's not possible for

244
00:15:40,950 --> 00:15:48,840
me to predict those IDs and it's long so

245
00:15:46,830 --> 00:15:53,990
I'm not going to be able to perform a

246
00:15:48,840 --> 00:15:59,610
brute-force over those IDs all right so

247
00:15:53,990 --> 00:16:02,400
now we know what kognito is let's try to

248
00:15:59,610 --> 00:16:06,630
automate the process and take this

249
00:16:02,400 --> 00:16:09,810
research internet scale and the research

250
00:16:06,630 --> 00:16:14,310
that I did can be summarized with one

251
00:16:09,810 --> 00:16:17,790
for a function first in the first line

252
00:16:14,310 --> 00:16:22,020
you see for identity polity in gate and

253
00:16:17,790 --> 00:16:25,170
indeed apologies from the internet so

254
00:16:22,020 --> 00:16:27,960
I'm getting many identity poles from the

255
00:16:25,170 --> 00:16:31,560
internet and you can imagine that any

256
00:16:27,960 --> 00:16:34,050
function that takes the internet as a

257
00:16:31,560 --> 00:16:37,739
parameter is going to be fairly

258
00:16:34,050 --> 00:16:39,900
complicated so for each other indeed a

259
00:16:37,740 --> 00:16:44,220
pole ID that I find

260
00:16:39,900 --> 00:16:46,380
I get the poor credentials this function

261
00:16:44,220 --> 00:16:48,720
is the one that I showed you before it

262
00:16:46,380 --> 00:16:52,950
simply gets the credentials based on the

263
00:16:48,720 --> 00:16:56,970
identity pole ID then I enumerate the

264
00:16:52,950 --> 00:17:01,020
permissions create a scoring system for

265
00:16:56,970 --> 00:17:04,940
those permissions and draw some pretty

266
00:17:01,020 --> 00:17:09,810
graphs in order to show at conferences

267
00:17:04,940 --> 00:17:14,280
and the first challenge was that

268
00:17:09,810 --> 00:17:17,579
identity pole IDs are random I'm not

269
00:17:14,280 --> 00:17:23,010
going to be able to just do a for loop

270
00:17:17,579 --> 00:17:26,790
and go from the identity pool with ID 1

271
00:17:23,010 --> 00:17:29,550
to the identity pool with ID 10,000 and

272
00:17:26,790 --> 00:17:32,639
for each of those get the credentials

273
00:17:29,550 --> 00:17:36,379
that's not possible because they DS are

274
00:17:32,640 --> 00:17:41,940
random so I need to extract them from

275
00:17:36,380 --> 00:17:44,280
somewhere and as I said before mobile

276
00:17:41,940 --> 00:17:50,040
applications and web applications

277
00:17:44,280 --> 00:17:53,160
needs to have those IDs so I can extract

278
00:17:50,040 --> 00:17:58,649
them from the Google Play Store common

279
00:17:53,160 --> 00:18:04,200
core and some other sources the thing is

280
00:17:58,650 --> 00:18:08,480
that Google Play has 2.6 million

281
00:18:04,200 --> 00:18:12,450
applications at the beginning I said I

282
00:18:08,480 --> 00:18:15,270
know programming I'm going to automate

283
00:18:12,450 --> 00:18:18,650
the whole process I will download the

284
00:18:15,270 --> 00:18:23,280
2.6 million applications I'm going to

285
00:18:18,650 --> 00:18:28,800
decompress decompile grep and this is

286
00:18:23,280 --> 00:18:31,950
just going to be a day of work the thing

287
00:18:28,800 --> 00:18:35,780
is that Google Play doesn't like me

288
00:18:31,950 --> 00:18:39,390
downloading 2.6 million applications

289
00:18:35,780 --> 00:18:42,820
they try to stop me after downloading

290
00:18:39,390 --> 00:18:45,880
like 500 applications

291
00:18:42,820 --> 00:18:50,290
and I'm sure that there are many ways in

292
00:18:45,880 --> 00:18:55,060
which I could have bypassed those

293
00:18:50,290 --> 00:18:57,159
protections using different email

294
00:18:55,060 --> 00:19:00,960
addresses to subscribe to the Google

295
00:18:57,160 --> 00:19:07,750
Playstore using different IP addresses

296
00:19:00,960 --> 00:19:09,940
I'm sure there are ways that I didn't

297
00:19:07,750 --> 00:19:12,820
have the time and I didn't want to

298
00:19:09,940 --> 00:19:15,730
reinvent the wheel because I'm sure that

299
00:19:12,820 --> 00:19:17,950
somebody else already implemented those

300
00:19:15,730 --> 00:19:20,650
bypasses for downloading a lot of

301
00:19:17,950 --> 00:19:22,960
content the thing is that nobody at

302
00:19:20,650 --> 00:19:28,120
least nobody that I could find made

303
00:19:22,960 --> 00:19:32,200
those techniques available so I found

304
00:19:28,120 --> 00:19:36,399
paid service that service gives you a

305
00:19:32,200 --> 00:19:40,480
search engine capability for the Play

306
00:19:36,400 --> 00:19:44,950
Store you subscribe to the service you

307
00:19:40,480 --> 00:19:47,980
pay a lot of money and you have a search

308
00:19:44,950 --> 00:19:50,890
just like in Google and you type

309
00:19:47,980 --> 00:19:56,700
something one of the things that you can

310
00:19:50,890 --> 00:20:00,040
type is SDK contains AWS

311
00:19:56,700 --> 00:20:05,050
so that service is going to return all

312
00:20:00,040 --> 00:20:12,620
of the applications in Google Play that

313
00:20:05,050 --> 00:20:15,918
use the AWS SDK that service is great

314
00:20:12,620 --> 00:20:18,830
but one of the things that I said in my

315
00:20:15,919 --> 00:20:23,059
description was you subscribe you pay a

316
00:20:18,830 --> 00:20:25,668
lot of money and then you search and I

317
00:20:23,059 --> 00:20:29,120
didn't want to pay a lot of money so I

318
00:20:25,669 --> 00:20:30,400
kind of had that service and got the

319
00:20:29,120 --> 00:20:33,799
results anyway

320
00:20:30,400 --> 00:20:41,690
that's what I am NOT saying the name of

321
00:20:33,799 --> 00:20:48,320
the service provider that got 13,000

322
00:20:41,690 --> 00:20:51,320
applications that use the AWS SDK those

323
00:20:48,320 --> 00:20:57,350
world applications that I really wanted

324
00:20:51,320 --> 00:21:01,029
to analyze and in retrospective if I

325
00:20:57,350 --> 00:21:06,168
downloaded 2.6 million applications and

326
00:21:01,029 --> 00:21:09,350
actually only used 13,000 I would have

327
00:21:06,169 --> 00:21:12,200
been really disappointed but in this

328
00:21:09,350 --> 00:21:16,459
case I only downloaded from a peak a

329
00:21:12,200 --> 00:21:20,090
mirror and a peak a pure those are kind

330
00:21:16,460 --> 00:21:20,390
of alternative sites for the Google Play

331
00:21:20,090 --> 00:21:25,428
Store

332
00:21:20,390 --> 00:21:28,929
I only downloaded those 13k from the

333
00:21:25,429 --> 00:21:31,090
alternative sites was pretty easy so

334
00:21:28,929 --> 00:21:37,360
everybody was happy

335
00:21:31,090 --> 00:21:43,129
maybe not the guys that I hacked but I

336
00:21:37,360 --> 00:21:48,168
got a lot of apks for those apks and set

337
00:21:43,130 --> 00:21:52,940
them D compile them and get in order to

338
00:21:48,169 --> 00:21:55,100
extract the identity Pleiades okay from

339
00:21:52,940 --> 00:22:00,409
there I got a lot a long list of

340
00:21:55,100 --> 00:22:03,949
identity politics then I wanted to I

341
00:22:00,409 --> 00:22:07,580
wanted to extract identity polities from

342
00:22:03,950 --> 00:22:11,870
the web from web applications that use

343
00:22:07,580 --> 00:22:14,189
Cognito so the first thing that I

344
00:22:11,870 --> 00:22:18,219
thought about was

345
00:22:14,190 --> 00:22:23,010
let's go one of the things one of the

346
00:22:18,220 --> 00:22:26,890
strengths that's commonly used in

347
00:22:23,010 --> 00:22:31,000
applications that use Cognito the thing

348
00:22:26,890 --> 00:22:34,980
is that when you search for this in any

349
00:22:31,000 --> 00:22:38,470
search engine you are going to find

350
00:22:34,980 --> 00:22:42,700
forum posts where developers complain

351
00:22:38,470 --> 00:22:45,159
that this service doesn't work you're

352
00:22:42,700 --> 00:22:48,460
not going to find applications that use

353
00:22:45,159 --> 00:22:52,240
this service the reason is that Google

354
00:22:48,460 --> 00:22:56,320
is going to index the text content of a

355
00:22:52,240 --> 00:22:59,919
page Google doesn't index the content of

356
00:22:56,320 --> 00:23:02,980
a script tag and I wanted to search for

357
00:22:59,919 --> 00:23:06,250
this which is inside a script tag or I

358
00:23:02,980 --> 00:23:12,250
wanted to search all the pages that were

359
00:23:06,250 --> 00:23:15,039
doing this so it kind of became

360
00:23:12,250 --> 00:23:18,899
complicated I realized that what I

361
00:23:15,039 --> 00:23:23,590
wanted to do was to grab the internet I

362
00:23:18,899 --> 00:23:27,518
wanted to do this I wanted to run I

363
00:23:23,590 --> 00:23:31,389
grabbed some regular expression and I

364
00:23:27,519 --> 00:23:34,419
wanted to have a huge file system

365
00:23:31,389 --> 00:23:40,928
somewhere or if the whole internet there

366
00:23:34,419 --> 00:23:43,260
and get the results sadly that's not

367
00:23:40,929 --> 00:23:49,299
possible

368
00:23:43,260 --> 00:23:54,370
it is actually something like this

369
00:23:49,299 --> 00:24:01,418
exists and it is the common crawl common

370
00:23:54,370 --> 00:24:05,229
core is nonprofit in the u.s. they call

371
00:24:01,419 --> 00:24:09,789
the Internet every month and they save

372
00:24:05,230 --> 00:24:13,149
the HTTP results it will be responses

373
00:24:09,789 --> 00:24:16,250
sorry for all of the traffic of calling

374
00:24:13,149 --> 00:24:19,789
the internet they saved those

375
00:24:16,250 --> 00:24:24,620
in publicly-accessible

376
00:24:19,789 --> 00:24:29,750
s3 bucket so anyone can access the

377
00:24:24,620 --> 00:24:30,678
results of Common Core doing a spider of

378
00:24:29,750 --> 00:24:35,120
the Internet

379
00:24:30,679 --> 00:24:40,220
and they do a pretty decent job around

380
00:24:35,120 --> 00:24:44,178
200 terabytes of data and 2.5 billion

381
00:24:40,220 --> 00:24:51,890
pages so that's content that's freely

382
00:24:44,179 --> 00:24:55,250
available it's easy to think that you

383
00:24:51,890 --> 00:24:57,919
can grab this bus but it's a little bit

384
00:24:55,250 --> 00:25:01,700
more complicated than that because it's

385
00:24:57,919 --> 00:25:05,750
200 terabytes and I don't have enough

386
00:25:01,700 --> 00:25:08,600
disk space to store that my internet

387
00:25:05,750 --> 00:25:11,330
connection is going to be really slow

388
00:25:08,600 --> 00:25:16,549
when I try to download 200 terabytes of

389
00:25:11,330 --> 00:25:18,918
data so you need to automate it you need

390
00:25:16,549 --> 00:25:22,010
to run it in the cloud and one of the

391
00:25:18,919 --> 00:25:25,460
ways in which people are extracting data

392
00:25:22,010 --> 00:25:32,390
from the common core is using a tool

393
00:25:25,460 --> 00:25:33,140
called CC as in Common Core M R Map

394
00:25:32,390 --> 00:25:38,059
Reduce

395
00:25:33,140 --> 00:25:39,250
job so this is an open source tool it

396
00:25:38,059 --> 00:25:41,320
works

397
00:25:39,250 --> 00:25:48,760
kind of

398
00:25:41,320 --> 00:25:52,990
I fought with this tool for two days the

399
00:25:48,760 --> 00:25:56,500
jobs simply hung there was no debugging

400
00:25:52,990 --> 00:25:58,450
information there was like a lot of

401
00:25:56,500 --> 00:26:02,410
problems with this I'm not sure if it's

402
00:25:58,450 --> 00:26:05,710
not maintained I'm not sure if I'm bad

403
00:26:02,410 --> 00:26:08,020
at understanding this technology but

404
00:26:05,710 --> 00:26:11,860
after fighting against this for two days

405
00:26:08,020 --> 00:26:15,790
I created my own version and it's CC

406
00:26:11,860 --> 00:26:19,300
lambda instead of using the elastic

407
00:26:15,790 --> 00:26:26,879
MapReduce service from AWS I'm using

408
00:26:19,300 --> 00:26:31,030
lambda functions and this allowed me to

409
00:26:26,880 --> 00:26:36,120
search the common crawl what I do with

410
00:26:31,030 --> 00:26:39,639
CC lambda is have 1,000 lambda functions

411
00:26:36,120 --> 00:26:42,760
running concurrently each lambda

412
00:26:39,640 --> 00:26:46,420
function is going to download a small

413
00:26:42,760 --> 00:26:49,750
piece of the common core it's going to

414
00:26:46,420 --> 00:26:55,180
decompress it and apply regular

415
00:26:49,750 --> 00:27:00,460
expressions to the result once much is

416
00:26:55,180 --> 00:27:07,960
found the matches for identity polities

417
00:27:00,460 --> 00:27:11,830
are stored on s3 this is how CC lambda

418
00:27:07,960 --> 00:27:14,560
looks like it's pretty simple to use and

419
00:27:11,830 --> 00:27:17,770
it has a small configuration file but

420
00:27:14,560 --> 00:27:21,540
either that you just run Python cc

421
00:27:17,770 --> 00:27:24,970
lambda this is one of the chunks of

422
00:27:21,540 --> 00:27:27,730
information from the Common Core it will

423
00:27:24,970 --> 00:27:31,210
process each of those chunks in 200

424
00:27:27,730 --> 00:27:34,420
seconds give or take and the matches you

425
00:27:31,210 --> 00:27:38,100
have a summary there and how much is

426
00:27:34,420 --> 00:27:38,100
stored on s3

427
00:27:38,770 --> 00:27:46,960
[Music]

428
00:27:40,020 --> 00:27:50,350
they are around 64,000 chunks of common

429
00:27:46,960 --> 00:27:54,120
crawl data for each of those it will

430
00:27:50,350 --> 00:27:57,459
take around 200 seconds and if you run

431
00:27:54,120 --> 00:28:03,459
1,000 concurrent functions it will all

432
00:27:57,460 --> 00:28:06,840
take three hours so you process 200

433
00:28:03,460 --> 00:28:15,210
terabytes of data in three hours that's

434
00:28:06,840 --> 00:28:19,840
pretty cool but it's costly one run of

435
00:28:15,210 --> 00:28:26,920
CC lamda is going to consume around 300

436
00:28:19,840 --> 00:28:28,959
USD in your AWS bill most of that is

437
00:28:26,920 --> 00:28:35,610
going to be associated with the lambda

438
00:28:28,960 --> 00:28:40,390
function running so if you ever run this

439
00:28:35,610 --> 00:28:44,590
don't blame me if you get $300 in your

440
00:28:40,390 --> 00:28:48,820
AWS bill I told you so there is cash

441
00:28:44,590 --> 00:28:55,899
there and that cash doesn't come to my

442
00:28:48,820 --> 00:28:59,260
pocket it goes to a Tobias and I also

443
00:28:55,900 --> 00:29:03,460
extracted identity Pleiades from other

444
00:28:59,260 --> 00:29:07,450
sources those other sources where I just

445
00:29:03,460 --> 00:29:11,350
did github search through their API and

446
00:29:07,450 --> 00:29:15,100
got results show them to my Google

447
00:29:11,350 --> 00:29:20,850
Yandex just calling the api's and

448
00:29:15,100 --> 00:29:23,790
getting results nothing special there so

449
00:29:20,850 --> 00:29:29,959
internet none

450
00:29:23,790 --> 00:29:34,350
now I have many identity polities and

451
00:29:29,960 --> 00:29:38,430
for each identity polity I got the

452
00:29:34,350 --> 00:29:40,530
credentials the AWS credentials but

453
00:29:38,430 --> 00:29:45,570
those credentials are simply strengths

454
00:29:40,530 --> 00:29:49,590
there are three long randomly generated

455
00:29:45,570 --> 00:29:52,220
strings that don't have any meaning so I

456
00:29:49,590 --> 00:29:55,949
had to perform permission enumeration

457
00:29:52,220 --> 00:30:00,720
for those connections there are two ways

458
00:29:55,950 --> 00:30:03,330
to do permission animation in AWS one

459
00:30:00,720 --> 00:30:08,270
way is with the credentials that you

460
00:30:03,330 --> 00:30:13,500
have you called the i''m service and

461
00:30:08,270 --> 00:30:15,810
query your permissions that's only

462
00:30:13,500 --> 00:30:20,070
possible if the credentials that you

463
00:30:15,810 --> 00:30:24,020
have have permissions to query the ion

464
00:30:20,070 --> 00:30:27,540
service in most cases in this research

465
00:30:24,020 --> 00:30:30,510
that doesn't work so I had to do

466
00:30:27,540 --> 00:30:34,230
something else I had to perform a

467
00:30:30,510 --> 00:30:41,250
brute-force process the brute force

468
00:30:34,230 --> 00:30:47,390
process is simple you call an API in AWS

469
00:30:41,250 --> 00:30:51,300
if you get 403 then you are not allowed

470
00:30:47,390 --> 00:30:57,410
if you get a 200 response with some

471
00:30:51,300 --> 00:30:59,580
content then you are allowed brute force

472
00:30:57,410 --> 00:31:03,900
there are a few things in this

473
00:30:59,580 --> 00:31:07,620
brute-force process first of all I

474
00:31:03,900 --> 00:31:12,420
didn't want to break anything I was

475
00:31:07,620 --> 00:31:14,070
doing this against AWS accounts for

476
00:31:12,420 --> 00:31:18,030
which I never got

477
00:31:14,070 --> 00:31:22,230
the permission to hack and I was

478
00:31:18,030 --> 00:31:26,700
completely unaware of who owned each day

479
00:31:22,230 --> 00:31:31,590
at AWS account so I didn't want to break

480
00:31:26,700 --> 00:31:36,450
anything so I did just get list and

481
00:31:31,590 --> 00:31:42,439
describe calls those are calls in AWS

482
00:31:36,450 --> 00:31:46,320
which are read-only you could

483
00:31:42,440 --> 00:31:50,270
potentially if you want to use this

484
00:31:46,320 --> 00:31:53,810
credentials to one test for

485
00:31:50,270 --> 00:31:58,230
brute-forcing purposes to see if

486
00:31:53,810 --> 00:32:03,300
destroyed the whole AWS account works if

487
00:31:58,230 --> 00:32:05,760
it would yeah I would but no

488
00:32:03,300 --> 00:32:09,300
this word because you destroyed the

489
00:32:05,760 --> 00:32:11,160
whole account so you just want to do

490
00:32:09,300 --> 00:32:17,340
when you're doing permission enumeration

491
00:32:11,160 --> 00:32:23,580
read-only attempts also something else

492
00:32:17,340 --> 00:32:29,399
is that in AWS and by calling the AWS

493
00:32:23,580 --> 00:32:35,250
API is you can read information about a

494
00:32:29,400 --> 00:32:39,620
service or read information stored in

495
00:32:35,250 --> 00:32:47,430
that service let me give you an example

496
00:32:39,620 --> 00:32:48,899
s3 you can perform an API call which is

497
00:32:47,430 --> 00:32:52,340
going to return the permissions

498
00:32:48,900 --> 00:32:57,120
associated with a bucket or you could

499
00:32:52,340 --> 00:33:00,300
run an API call that's going to list the

500
00:32:57,120 --> 00:33:03,179
content of the buckets and another API

501
00:33:00,300 --> 00:33:05,389
call which is going to download the

502
00:33:03,180 --> 00:33:09,840
whole content of the bucket

503
00:33:05,390 --> 00:33:13,260
both of those are read-only I'm only

504
00:33:09,840 --> 00:33:17,310
reading but I didn't want to get access

505
00:33:13,260 --> 00:33:20,640
to customer information because that's

506
00:33:17,310 --> 00:33:24,780
most likely illegal and I don't want to

507
00:33:20,640 --> 00:33:30,760
go to jail I'm so pretty for jail

508
00:33:24,780 --> 00:33:33,340
no not really okay so when I was doing

509
00:33:30,760 --> 00:33:35,770
the permission enumeration the first

510
00:33:33,340 --> 00:33:41,770
thing that I tried was a tool called

511
00:33:35,770 --> 00:33:45,070
Paku Paku is like Metasploit for the

512
00:33:41,770 --> 00:33:48,330
cloud it's pretty good but the

513
00:33:45,070 --> 00:33:53,110
permission innovation module that it has

514
00:33:48,330 --> 00:33:58,090
was slow and it wasn't complete it only

515
00:33:53,110 --> 00:34:01,500
supports a couple of aw services and I

516
00:33:58,090 --> 00:34:05,050
wanted a really in-depth view of the

517
00:34:01,500 --> 00:34:08,620
permissions that I got so I created my

518
00:34:05,050 --> 00:34:12,040
own to enumerate I am it's open source

519
00:34:08,620 --> 00:34:12,759
you can quickly find it that uses

520
00:34:12,040 --> 00:34:15,310
threads

521
00:34:12,760 --> 00:34:19,179
it uses a connection pool it uses

522
00:34:15,310 --> 00:34:22,120
different tricks very simple tricks to

523
00:34:19,179 --> 00:34:24,370
improve the whole process of memorizing

524
00:34:22,120 --> 00:34:32,319
permissions and it does this permission

525
00:34:24,370 --> 00:34:36,580
enumeration for all services in AWS this

526
00:34:32,320 --> 00:34:41,550
is how I know Merida am at the key

527
00:34:36,580 --> 00:34:46,918
secret key and it will tell you which

528
00:34:41,550 --> 00:34:52,740
API calls worked and which ones did not

529
00:34:46,918 --> 00:34:57,609
Commission Amish nothing fancy here so

530
00:34:52,739 --> 00:35:03,370
before we go into the details of what I

531
00:34:57,610 --> 00:35:08,370
found the research that I did all

532
00:35:03,370 --> 00:35:11,380
included the and authenticated roles

533
00:35:08,370 --> 00:35:15,130
kameido as I told before has two

534
00:35:11,380 --> 00:35:19,720
different access types and authenticated

535
00:35:15,130 --> 00:35:22,320
and unauthenticated in order to test the

536
00:35:19,720 --> 00:35:25,540
authenticated role you need to

537
00:35:22,320 --> 00:35:28,720
authenticate using Facebook Google or

538
00:35:25,540 --> 00:35:31,870
some other process and then you get the

539
00:35:28,720 --> 00:35:35,140
credentials with the unauthenticated

540
00:35:31,870 --> 00:35:37,870
role which is what I tested

541
00:35:35,140 --> 00:35:41,470
you don't need to authenticate and you

542
00:35:37,870 --> 00:35:45,940
get the W screenshots I just said that

543
00:35:41,470 --> 00:35:49,779
one because it was easier no other

544
00:35:45,940 --> 00:35:55,320
reason but the thing here to notice is

545
00:35:49,780 --> 00:35:58,690
that most likely the permissions for the

546
00:35:55,320 --> 00:36:02,110
unauthenticated role are going to be

547
00:35:58,690 --> 00:36:05,770
less or equal than the permissions for

548
00:36:02,110 --> 00:36:07,900
the authenticated role and all these

549
00:36:05,770 --> 00:36:11,830
results were for the unauthenticated

550
00:36:07,900 --> 00:36:14,230
role so if you guys ever go through the

551
00:36:11,830 --> 00:36:17,920
process of replicating this research

552
00:36:14,230 --> 00:36:20,620
with the authenticated bro the results

553
00:36:17,920 --> 00:36:28,720
are going to be much worse and they are

554
00:36:20,620 --> 00:36:33,420
bad as it is all right so data before we

555
00:36:28,720 --> 00:36:42,490
continue any questions no oh good

556
00:36:33,420 --> 00:36:46,750
great I found around 3,000 identity

557
00:36:42,490 --> 00:36:49,359
Pleiades most of them came from Google

558
00:36:46,750 --> 00:36:54,540
Play and this is something that I

559
00:36:49,360 --> 00:36:59,130
expected because kognito is targeted for

560
00:36:54,540 --> 00:37:02,710
mobile application developers so this is

561
00:36:59,130 --> 00:37:06,340
something that I really expected and I

562
00:37:02,710 --> 00:37:10,000
got other ideas from github and coming

563
00:37:06,340 --> 00:37:13,500
home and some other sources some of

564
00:37:10,000 --> 00:37:18,190
those and indeed apologies were usable

565
00:37:13,500 --> 00:37:23,080
others were not summon entity pool IDs

566
00:37:18,190 --> 00:37:26,680
did not exist so there was for example

567
00:37:23,080 --> 00:37:31,150
an application in Google Play which

568
00:37:26,680 --> 00:37:33,339
references an identity politely but the

569
00:37:31,150 --> 00:37:37,720
identity body was removed at some point

570
00:37:33,340 --> 00:37:41,590
from the AWS account those are the does

571
00:37:37,720 --> 00:37:42,870
not exist in this line invalid

572
00:37:41,590 --> 00:37:46,110
configuration

573
00:37:42,870 --> 00:37:50,910
at some point for example the developer

574
00:37:46,110 --> 00:37:52,980
was testing this and he broke it he

575
00:37:50,910 --> 00:37:56,580
broke the configuration it's unusable

576
00:37:52,980 --> 00:38:02,840
for me and it's unusable for the real

577
00:37:56,580 --> 00:38:08,460
users of this kognito identity pool and

578
00:38:02,840 --> 00:38:14,520
around 300 only allowed authenticated

579
00:38:08,460 --> 00:38:22,170
rolls the good thing is that 2500 did

580
00:38:14,520 --> 00:38:24,980
allow an authenticated access and when I

581
00:38:22,170 --> 00:38:30,210
was doing the the scoring to kind of

582
00:38:24,980 --> 00:38:34,880
assign a score between zero being really

583
00:38:30,210 --> 00:38:38,000
secure and ten being really ugly

584
00:38:34,880 --> 00:38:41,430
insecure and this needs my attention

585
00:38:38,000 --> 00:38:44,520
when trying to score the permissions

586
00:38:41,430 --> 00:38:50,069
associated with each identity polo deep

587
00:38:44,520 --> 00:38:56,060
and rented pool incognito I started to

588
00:38:50,070 --> 00:39:02,870
ask me as myself what is insecure

589
00:38:56,060 --> 00:39:06,570
because application a might require

590
00:39:02,870 --> 00:39:10,080
permissions one two or three and it

591
00:39:06,570 --> 00:39:13,010
might be completely secure and required

592
00:39:10,080 --> 00:39:17,700
for those permissions to be there

593
00:39:13,010 --> 00:39:21,800
application B might require only

594
00:39:17,700 --> 00:39:25,230
permission one but it has one and two

595
00:39:21,800 --> 00:39:30,060
but I don't really know the applications

596
00:39:25,230 --> 00:39:33,980
and the use cases behind the user roles

597
00:39:30,060 --> 00:39:38,370
that I enumerated permissions for so I

598
00:39:33,980 --> 00:39:42,230
started to think and a few of the API

599
00:39:38,370 --> 00:39:46,640
calls that I found and that I nominated

600
00:39:42,230 --> 00:39:50,840
started to feel like they were insecure

601
00:39:46,640 --> 00:39:55,890
and also where s3 these buckets

602
00:39:50,840 --> 00:40:00,480
Dino dynamodb lists backups these tables

603
00:39:55,890 --> 00:40:03,180
lambda list functions so I said if those

604
00:40:00,480 --> 00:40:09,779
are allowed

605
00:40:03,180 --> 00:40:12,989
then it's insecure but why if we go back

606
00:40:09,779 --> 00:40:19,259
to the example the moral application

607
00:40:12,989 --> 00:40:21,900
that's uploading images to s3 knows the

608
00:40:19,259 --> 00:40:27,349
name of the s3 bucket where it will

609
00:40:21,900 --> 00:40:31,079
where it will upload the cut pictures

610
00:40:27,349 --> 00:40:35,369
the mobile application when it's setting

611
00:40:31,079 --> 00:40:38,640
the title for that images for those

612
00:40:35,369 --> 00:40:41,779
images it knows the name of the table

613
00:40:38,640 --> 00:40:48,569
where it needs to write the content and

614
00:40:41,779 --> 00:40:52,170
I saw no reason for almost any mobile

615
00:40:48,569 --> 00:40:57,630
application to have access to list

616
00:40:52,170 --> 00:41:02,009
buckets or these tables and certainly

617
00:40:57,630 --> 00:41:04,920
there is no reason for list backups in

618
00:41:02,009 --> 00:41:09,809
dynamo DB dynamodb had no sequel

619
00:41:04,920 --> 00:41:12,420
database hosted at AWS so there's

620
00:41:09,809 --> 00:41:15,239
certainly no need for an application

621
00:41:12,420 --> 00:41:20,339
such as the one that I explained before

622
00:41:15,239 --> 00:41:25,279
to have access to list buckets so with

623
00:41:20,339 --> 00:41:30,630
this in mind I found that around 20% of

624
00:41:25,279 --> 00:41:37,470
the kognito installations and now these

625
00:41:30,630 --> 00:41:45,450
backups around 5% and sorry 20% list

626
00:41:37,470 --> 00:41:47,819
buckets and 4% list backups so this

627
00:41:45,450 --> 00:41:51,739
result is telling me that 20% of

628
00:41:47,819 --> 00:41:55,170
developers at least 20% of developers

629
00:41:51,739 --> 00:41:56,440
miss configuring AWS Cognito

630
00:41:55,170 --> 00:42:00,670
the

631
00:41:56,440 --> 00:42:03,190
signing more privileges than needed by

632
00:42:00,670 --> 00:42:06,490
the application and with those

633
00:42:03,190 --> 00:42:13,150
permissions attackers can do really bad

634
00:42:06,490 --> 00:42:17,859
things sensitive data during this

635
00:42:13,150 --> 00:42:21,160
research I was able to access through

636
00:42:17,859 --> 00:42:25,920
the credentials that I extracted from

637
00:42:21,160 --> 00:42:33,759
kognito I gained access to a total of

638
00:42:25,920 --> 00:42:38,380
like 13,000 s3 buckets those 13,000

639
00:42:33,760 --> 00:42:41,890
buckets around 900 have sensitive

640
00:42:38,380 --> 00:42:44,589
information how do I know that they were

641
00:42:41,890 --> 00:42:47,140
storing sensitive information just

642
00:42:44,589 --> 00:42:50,819
because of the name of the bucket I

643
00:42:47,140 --> 00:42:55,868
never read the contents of any buckets

644
00:42:50,819 --> 00:43:02,140
mr. camera there I never read aw yes I

645
00:42:55,869 --> 00:43:09,329
never read so if the title of the s3

646
00:43:02,140 --> 00:43:14,950
bucket says credit card password backup

647
00:43:09,329 --> 00:43:19,630
and some other keywords then it holds

648
00:43:14,950 --> 00:43:23,200
sensitive information so I was able to

649
00:43:19,630 --> 00:43:26,530
identify 900 buckets with sensitive

650
00:43:23,200 --> 00:43:29,379
information an attacker could have read

651
00:43:26,530 --> 00:43:34,359
the sensitive information stored in that

652
00:43:29,380 --> 00:43:39,250
bucket the same goes for dynamodb tables

653
00:43:34,359 --> 00:43:46,869
I was able to list even hundred

654
00:43:39,250 --> 00:43:49,240
tables in DynamoDB and I 140 had

655
00:43:46,869 --> 00:43:53,670
sensitive content once again if the

656
00:43:49,240 --> 00:43:58,740
table name was password or secret or

657
00:43:53,670 --> 00:43:58,740
something that it was sensitive

658
00:43:59,130 --> 00:44:05,239
something else that I found that was

659
00:44:00,479 --> 00:44:10,288
interesting is that when I did our

660
00:44:05,239 --> 00:44:13,259
lambda dot list functions API call the

661
00:44:10,289 --> 00:44:16,799
result included the names for the lambda

662
00:44:13,259 --> 00:44:19,979
functions but also included the user

663
00:44:16,799 --> 00:44:24,630
defined environment variables for those

664
00:44:19,979 --> 00:44:28,078
lambda functions and it seems that it's

665
00:44:24,630 --> 00:44:32,279
a pretty common practice to use

666
00:44:28,079 --> 00:44:36,239
environment variables to hold secrets so

667
00:44:32,279 --> 00:44:42,449
I found 78 environment variables with

668
00:44:36,239 --> 00:44:55,339
API keys database passwords and many

669
00:44:42,449 --> 00:44:58,559
other things questions so far great

670
00:44:55,339 --> 00:45:04,199
Wilkinson and Isis why is this happening

671
00:44:58,559 --> 00:45:08,039
why are we seeing so many 20% that's a

672
00:45:04,199 --> 00:45:10,529
lot why are we seeing so many AWS

673
00:45:08,039 --> 00:45:14,519
kognito configurations which are

674
00:45:10,529 --> 00:45:19,049
insecure I think that there are two main

675
00:45:14,519 --> 00:45:22,669
reasons first documentation the

676
00:45:19,049 --> 00:45:26,880
documentation before this research was

677
00:45:22,670 --> 00:45:32,099
insecure by default how does that

678
00:45:26,880 --> 00:45:36,469
developer create something in AWS he

679
00:45:32,099 --> 00:45:44,039
goes to the augmentation reads copy

680
00:45:36,469 --> 00:45:48,660
paste okay it works that's the average

681
00:45:44,039 --> 00:45:55,109
developer day and no offense to other /

682
00:45:48,660 --> 00:45:57,629
developers in the audience so the

683
00:45:55,109 --> 00:45:59,790
official documentation wasn't secured by

684
00:45:57,630 --> 00:46:06,860
default

685
00:45:59,790 --> 00:46:06,860
examples which who are giving developers

686
00:46:06,980 --> 00:46:15,510
really insecure policies to associate

687
00:46:10,560 --> 00:46:18,590
with Cognito policies and allowed a lot

688
00:46:15,510 --> 00:46:22,170
of actions which were unnecessary and

689
00:46:18,590 --> 00:46:25,730
policies which are going to lead to the

690
00:46:22,170 --> 00:46:29,190
vulnerabilities that I showed before I

691
00:46:25,730 --> 00:46:33,780
talked with the AWS security team about

692
00:46:29,190 --> 00:46:37,310
this and their solution was to add a

693
00:46:33,780 --> 00:46:39,450
warning to a part of that documentation

694
00:46:37,310 --> 00:46:41,370
and this is just an example

695
00:46:39,450 --> 00:46:45,509
they added like three or four more

696
00:46:41,370 --> 00:46:49,670
warnings the warning basically says this

697
00:46:45,510 --> 00:46:53,720
is an example don't use it in production

698
00:46:49,670 --> 00:46:57,000
they didn't fix the documentation itself

699
00:46:53,720 --> 00:46:59,609
because they thought it was going to

700
00:46:57,000 --> 00:47:03,000
make things more complicated for

701
00:46:59,610 --> 00:47:10,410
developers but they did add a warning

702
00:47:03,000 --> 00:47:12,650
sign there are some restrictions on the

703
00:47:10,410 --> 00:47:17,629
permissions that developers can

704
00:47:12,650 --> 00:47:21,840
associate with an unauthenticated role

705
00:47:17,630 --> 00:47:25,140
so when the roll is unauthenticated you

706
00:47:21,840 --> 00:47:27,960
can only assign permissions for 26

707
00:47:25,140 --> 00:47:33,569
services it's impossible to associate

708
00:47:27,960 --> 00:47:36,110
permissions for easy 2 or 4 I am but it

709
00:47:33,570 --> 00:47:40,170
is possible to associate permissions for

710
00:47:36,110 --> 00:47:44,190
DynamoDB es 3 lambda and many other

711
00:47:40,170 --> 00:47:46,710
services and as I told you in the

712
00:47:44,190 --> 00:47:48,210
introduction I was able to use

713
00:47:46,710 --> 00:47:50,250
misconfigurations

714
00:47:48,210 --> 00:47:55,200
in the permissions for an

715
00:47:50,250 --> 00:48:00,300
unauthenticated role to modify a lambda

716
00:47:55,200 --> 00:48:03,990
function and elevate my privileges into

717
00:48:00,300 --> 00:48:08,700
the AWS account so even with these

718
00:48:03,990 --> 00:48:10,680
restrictions it's really easy for the

719
00:48:08,700 --> 00:48:15,660
developer to make a mistake

720
00:48:10,680 --> 00:48:20,180
and expose the security of the whole AWS

721
00:48:15,660 --> 00:48:24,390
account for the authenticated rolls

722
00:48:20,180 --> 00:48:29,609
there are no restrictions you can simply

723
00:48:24,390 --> 00:48:34,589
assign any action for that role it will

724
00:48:29,610 --> 00:48:39,060
work no restriction also this is bad

725
00:48:34,590 --> 00:48:43,070
because most applications like the

726
00:48:39,060 --> 00:48:45,630
example that I gave want you to register

727
00:48:43,070 --> 00:48:48,210
most applications want you to

728
00:48:45,630 --> 00:48:50,460
authenticate to create a user to

729
00:48:48,210 --> 00:48:54,380
authenticate and to interact with the

730
00:48:50,460 --> 00:48:58,290
application so being authenticated

731
00:48:54,380 --> 00:49:01,770
doesn't mean much in this context it

732
00:48:58,290 --> 00:49:05,790
just means that you click on create my

733
00:49:01,770 --> 00:49:10,050
user or you click on authenticate with

734
00:49:05,790 --> 00:49:13,020
Facebook that's all that it takes to be

735
00:49:10,050 --> 00:49:17,640
authenticated in a kognito

736
00:49:13,020 --> 00:49:23,759
application so the developers can shoot

737
00:49:17,640 --> 00:49:27,509
themselves and a dress isn't doing much

738
00:49:23,760 --> 00:49:32,070
about it in my opinion they should add

739
00:49:27,510 --> 00:49:34,890
to the UI a big warning when you are

740
00:49:32,070 --> 00:49:37,310
doing something wrong so if you are a

741
00:49:34,890 --> 00:49:40,230
developer and you are assigning

742
00:49:37,310 --> 00:49:43,759
excessive permissions and it's pretty

743
00:49:40,230 --> 00:49:48,120
easy to identify when that's happening

744
00:49:43,760 --> 00:49:52,920
the UI should warn you

745
00:49:48,120 --> 00:49:56,130
the URL should show a big warning in red

746
00:49:52,920 --> 00:49:59,400
saying you are trying to do this this

747
00:49:56,130 --> 00:50:02,820
and this this is insecure because this

748
00:49:59,400 --> 00:50:05,100
disand is higher and referential if you

749
00:50:02,820 --> 00:50:08,710
don't understand why that's a warning

750
00:50:05,100 --> 00:50:10,930
that should be there hopefully

751
00:50:08,710 --> 00:50:17,890
and no kidding that there should be a

752
00:50:10,930 --> 00:50:21,129
hourly so for the developers in the

753
00:50:17,890 --> 00:50:23,859
audience please follow the list

754
00:50:21,130 --> 00:50:28,349
privilege principle if you are ever

755
00:50:23,859 --> 00:50:32,650
configuring anything in AWS and

756
00:50:28,349 --> 00:50:35,740
specifically AWS Cognito follow the

757
00:50:32,650 --> 00:50:38,230
least privilege principle already assign

758
00:50:35,740 --> 00:50:40,779
the permissions that you require and

759
00:50:38,230 --> 00:50:44,740
your application requires to the roles

760
00:50:40,780 --> 00:50:46,450
that you associate with community if you

761
00:50:44,740 --> 00:50:49,959
assign more permissions that the ones

762
00:50:46,450 --> 00:50:54,790
that are required someone eventually is

763
00:50:49,960 --> 00:50:59,460
going to hack you I never mentioned

764
00:50:54,790 --> 00:50:59,460
anything about object level permissions

765
00:50:59,609 --> 00:51:07,240
once again if we go back to our sample

766
00:51:03,160 --> 00:51:11,980
application there are images and there

767
00:51:07,240 --> 00:51:14,950
are titles for those images the only

768
00:51:11,980 --> 00:51:17,980
user that should be allowed to change

769
00:51:14,950 --> 00:51:20,680
the title for one of those images is the

770
00:51:17,980 --> 00:51:27,339
user that uploaded the image

771
00:51:20,680 --> 00:51:29,879
I never even attempted to test for the

772
00:51:27,339 --> 00:51:32,440
security of object level permissions

773
00:51:29,880 --> 00:51:36,309
because in an automated way it's

774
00:51:32,440 --> 00:51:38,770
impossible but you as a developer need

775
00:51:36,309 --> 00:51:43,720
to understand this I need to probably

776
00:51:38,770 --> 00:51:47,290
implement it all right - before we

777
00:51:43,720 --> 00:51:52,000
finish since I was grabbing the internet

778
00:51:47,290 --> 00:51:52,660
I also tried to find hard-coded AWS

779
00:51:52,000 --> 00:51:55,960
credentials

780
00:51:52,660 --> 00:52:00,660
I didn't just try to find identity

781
00:51:55,960 --> 00:52:06,130
Pleiades I also try to find this I found

782
00:52:00,660 --> 00:52:10,000
26 great accounts in AWS a root account

783
00:52:06,130 --> 00:52:11,770
is the master account for the the master

784
00:52:10,000 --> 00:52:14,290
user for the whole account

785
00:52:11,770 --> 00:52:15,070
so if you have that you can do whatever

786
00:52:14,290 --> 00:52:19,720
you want

787
00:52:15,070 --> 00:52:22,720
and I found 26 of those online really

788
00:52:19,720 --> 00:52:27,779
for somebody to do some evil

789
00:52:22,720 --> 00:52:32,169
I found 38 hi privileges hi privileged

790
00:52:27,780 --> 00:52:37,600
accounts also hard-coded in some HTML

791
00:52:32,170 --> 00:52:40,510
files somewhere on the Internet and most

792
00:52:37,600 --> 00:52:43,960
of these route accounts came from the

793
00:52:40,510 --> 00:52:46,570
common crawl so if you ever want to get

794
00:52:43,960 --> 00:52:47,890
a root account instead of going through

795
00:52:46,570 --> 00:52:54,550
the whole process of creating your

796
00:52:47,890 --> 00:52:56,920
account use come CC lamda do a grab and

797
00:52:54,550 --> 00:53:00,760
you find most likely root accounts there

798
00:52:56,920 --> 00:53:03,700
I notified a security team about all

799
00:53:00,760 --> 00:53:06,880
this not only about the hard-coded

800
00:53:03,700 --> 00:53:09,700
credentials but also when I was studying

801
00:53:06,880 --> 00:53:12,640
with this research and before I did

802
00:53:09,700 --> 00:53:15,069
anything I sent them an email and told

803
00:53:12,640 --> 00:53:17,830
them I'm going to be doing this this and

804
00:53:15,070 --> 00:53:20,619
this and then I'm going to be doing this

805
00:53:17,830 --> 00:53:24,069
and this I explained the whole process

806
00:53:20,619 --> 00:53:27,670
to them before starting because the

807
00:53:24,070 --> 00:53:30,810
whole process is really noisy from my IP

808
00:53:27,670 --> 00:53:34,380
address I was going to be performing

809
00:53:30,810 --> 00:53:37,900
brute force of thousands of accounts

810
00:53:34,380 --> 00:53:42,760
that was going to be noisy and detected

811
00:53:37,900 --> 00:53:48,160
in many ways they told me please

812
00:53:42,760 --> 00:53:57,240
consider don't doing it I said I'm going

813
00:53:48,160 --> 00:54:01,118
to consider it thanks I'm here so okay

814
00:53:57,240 --> 00:54:04,000
this research can continue you can

815
00:54:01,119 --> 00:54:06,280
continue this research I'm done with it

816
00:54:04,000 --> 00:54:10,240
but maybe it's interesting for somebody

817
00:54:06,280 --> 00:54:14,230
else you can extend this research by

818
00:54:10,240 --> 00:54:16,509
looking into iOS applications you can

819
00:54:14,230 --> 00:54:17,940
extend the research by trying to do the

820
00:54:16,510 --> 00:54:21,420
same with

821
00:54:17,940 --> 00:54:26,339
cloud service providers maybe a she has

822
00:54:21,420 --> 00:54:29,329
there its own cognitive also you could

823
00:54:26,339 --> 00:54:31,410
try the authenticated role analysis

824
00:54:29,329 --> 00:54:34,589
doing the same but with the

825
00:54:31,410 --> 00:54:37,170
authenticator role and you could

826
00:54:34,589 --> 00:54:41,670
potentially do some privilege escalation

827
00:54:37,170 --> 00:54:47,810
analysis try to answer the question how

828
00:54:41,670 --> 00:54:51,119
many accounts can I own three Cognito

829
00:54:47,810 --> 00:54:54,900
misconfigurations that's a potential

830
00:54:51,119 --> 00:54:57,900
question that you can answer it says

831
00:54:54,900 --> 00:55:01,260
danger there because it really has

832
00:54:57,900 --> 00:55:06,300
privilege escalation techniques often

833
00:55:01,260 --> 00:55:10,710
require you to modify the AWS account in

834
00:55:06,300 --> 00:55:12,750
one way or another and usually you don't

835
00:55:10,710 --> 00:55:14,960
want to do that if you don't have

836
00:55:12,750 --> 00:55:14,960
permission

837
00:55:15,650 --> 00:55:24,329
wait so key takeaways there are three

838
00:55:20,579 --> 00:55:29,069
things that you should take away from

839
00:55:24,329 --> 00:55:34,859
this talk AWS for needle is commonly

840
00:55:29,069 --> 00:55:38,460
misconfigured misconfigured so and it's

841
00:55:34,859 --> 00:55:42,839
really easy to exploit so if you're ever

842
00:55:38,460 --> 00:55:46,680
doing an assessment and kognito appears

843
00:55:42,839 --> 00:55:51,810
there you should be happy you have

844
00:55:46,680 --> 00:55:56,578
access most likely 20% of chances of

845
00:55:51,810 --> 00:55:59,310
getting something good out of that it's

846
00:55:56,579 --> 00:56:02,790
possible to grab the internet and find

847
00:55:59,310 --> 00:56:06,270
vulnerabilities whatever you want using

848
00:56:02,790 --> 00:56:09,630
CC lambda if you ever dreamed about

849
00:56:06,270 --> 00:56:12,869
doing a go ahead of the internet CC

850
00:56:09,630 --> 00:56:14,640
lambda and it's also possible to

851
00:56:12,869 --> 00:56:19,109
enumerate the permissions associated

852
00:56:14,640 --> 00:56:22,618
with AWS credentials using enumerate I

853
00:56:19,109 --> 00:56:24,290
am and it's going to be fast and it's

854
00:56:22,619 --> 00:56:35,350
going to be safe too

855
00:56:24,290 --> 00:56:35,350
in any account alright questions no no

856
00:56:35,410 --> 00:56:39,859
wait

857
00:56:36,770 --> 00:56:46,360
excellent all right thank you very much

858
00:56:39,860 --> 00:56:46,360
[Applause]

