1
00:00:01,920 --> 00:00:04,380
okay good afternoon everyone thank you

2
00:00:04,380 --> 00:00:05,700
for the introduction

3
00:00:05,700 --> 00:00:07,919
so without further Ado let's let's get

4
00:00:07,919 --> 00:00:09,900
into the startling system

5
00:00:09,900 --> 00:00:12,300
I think most of you are at least

6
00:00:12,300 --> 00:00:13,980
somewhat familiar how a satellite

7
00:00:13,980 --> 00:00:15,780
communication system works

8
00:00:15,780 --> 00:00:17,580
but in all cases you usually have a

9
00:00:17,580 --> 00:00:20,039
space segment and an earth segment

10
00:00:20,039 --> 00:00:21,960
in this case a space segment of course

11
00:00:21,960 --> 00:00:24,720
contains satellites these satellites are

12
00:00:24,720 --> 00:00:26,820
in lower Earth orbits so they are not

13
00:00:26,820 --> 00:00:29,400
geostationary they fly over us as we

14
00:00:29,400 --> 00:00:30,420
speak

15
00:00:30,420 --> 00:00:31,920
some of these satellites are already

16
00:00:31,920 --> 00:00:33,600
equipped with laser links meaning that

17
00:00:33,600 --> 00:00:35,340
they can communicate to each other over

18
00:00:35,340 --> 00:00:36,719
a laser

19
00:00:36,719 --> 00:00:39,000
on Earth we have the user terminal this

20
00:00:39,000 --> 00:00:41,100
is the device you buy as a user that

21
00:00:41,100 --> 00:00:43,379
then talks to the satellite and relays

22
00:00:43,379 --> 00:00:45,180
your information

23
00:00:45,180 --> 00:00:47,280
to other satellites back to Earth to a

24
00:00:47,280 --> 00:00:49,980
Gateway these gateways are positioned on

25
00:00:49,980 --> 00:00:51,840
multiple locations on Earth and are

26
00:00:51,840 --> 00:00:54,239
connected to the regular internet so in

27
00:00:54,239 --> 00:00:55,980
this in this way you can connect to the

28
00:00:55,980 --> 00:00:58,320
internet to the satellite

29
00:00:58,320 --> 00:01:00,960
now when I started this research SpaceX

30
00:01:00,960 --> 00:01:03,059
wasn't willing to give me a satellite

31
00:01:03,059 --> 00:01:05,400
so we had to buy ourselves a user

32
00:01:05,400 --> 00:01:07,439
terminal and that's what this talk is

33
00:01:07,439 --> 00:01:08,580
focused on

34
00:01:08,580 --> 00:01:10,799
now if you think about this

35
00:01:10,799 --> 00:01:12,900
in another way if you would want to

36
00:01:12,900 --> 00:01:15,479
attack a satellite the easiest way would

37
00:01:15,479 --> 00:01:17,220
probably be to First compromise the

38
00:01:17,220 --> 00:01:19,740
user's terminal because you cannot use a

39
00:01:19,740 --> 00:01:21,659
regular satellite dish to connect to

40
00:01:21,659 --> 00:01:24,619
these satellites

41
00:01:24,659 --> 00:01:26,220
so you ordered one of the user terminals

42
00:01:26,220 --> 00:01:27,600
you put it on the roof of a University

43
00:01:27,600 --> 00:01:28,740
Building

44
00:01:28,740 --> 00:01:30,840
played with it for 10 minutes and then

45
00:01:30,840 --> 00:01:32,460
got pretty bored because there's not

46
00:01:32,460 --> 00:01:33,960
much you can do with it it's just an

47
00:01:33,960 --> 00:01:35,700
internet connection

48
00:01:35,700 --> 00:01:37,500
so I started looking around what other

49
00:01:37,500 --> 00:01:39,540
people had done or what other people

50
00:01:39,540 --> 00:01:41,460
were doing at that point in time

51
00:01:41,460 --> 00:01:44,640
so the top three videos are um yeah the

52
00:01:44,640 --> 00:01:46,140
ones at the top of the slide were

53
00:01:46,140 --> 00:01:48,420
already going on when I started my

54
00:01:48,420 --> 00:01:50,579
research so we had Mike on Space doing a

55
00:01:50,579 --> 00:01:52,079
tear down showing what was on the inside

56
00:01:52,079 --> 00:01:54,659
he had to be really destructive for his

57
00:01:54,659 --> 00:01:57,060
user thermal but that did make it easier

58
00:01:57,060 --> 00:01:58,860
for others to tear down the user

59
00:01:58,860 --> 00:02:01,520
terminal in less destructive way

60
00:02:01,520 --> 00:02:04,079
who went a bit deeper he removed the

61
00:02:04,079 --> 00:02:06,119
metal back shield and described some of

62
00:02:06,119 --> 00:02:07,920
the parts on the PCB

63
00:02:07,920 --> 00:02:10,199
the signal pad went a bit further they

64
00:02:10,199 --> 00:02:12,660
described all of the RF components and

65
00:02:12,660 --> 00:02:14,760
also all the materials that the dish was

66
00:02:14,760 --> 00:02:16,500
made up

67
00:02:16,500 --> 00:02:18,239
then at the time I was doing my research

68
00:02:18,239 --> 00:02:20,040
some other videos and blog posts came

69
00:02:20,040 --> 00:02:22,560
online so we're calling offline doing a

70
00:02:22,560 --> 00:02:24,720
tear down and trying some basic fault

71
00:02:24,720 --> 00:02:26,940
injection experiments Live on YouTube

72
00:02:26,940 --> 00:02:28,260
let's say

73
00:02:28,260 --> 00:02:30,660
oh I could go after the tear down of the

74
00:02:30,660 --> 00:02:32,819
Wi-Fi routers that you get with the user

75
00:02:32,819 --> 00:02:34,920
terminal and there's some reverse

76
00:02:34,920 --> 00:02:37,260
engineering on it he also posts a lot of

77
00:02:37,260 --> 00:02:39,120
interesting tweets on Twitter showing

78
00:02:39,120 --> 00:02:41,160
how he's basically repairing user

79
00:02:41,160 --> 00:02:43,620
terminals that get broken on the front

80
00:02:43,620 --> 00:02:45,599
line in Ukraine

81
00:02:45,599 --> 00:02:47,760
then bottom right we have Dan Murray who

82
00:02:47,760 --> 00:02:49,620
did one of the first thing arounds of

83
00:02:49,620 --> 00:02:52,319
the rectangular music terminal and

84
00:02:52,319 --> 00:02:54,480
because that's a destructive process he

85
00:02:54,480 --> 00:02:57,360
also built a 3D printable case that you

86
00:02:57,360 --> 00:03:00,780
can use to um yeah he plays it

87
00:03:00,780 --> 00:03:02,099
now I've already mentioned that there's

88
00:03:02,099 --> 00:03:04,019
multiple different heart surgery visions

89
00:03:04,019 --> 00:03:06,180
of this user terminal but there's very

90
00:03:06,180 --> 00:03:07,860
few people that realize how many heart

91
00:03:07,860 --> 00:03:10,680
revisions SpaceX has been going to in

92
00:03:10,680 --> 00:03:12,420
this short period of time

93
00:03:12,420 --> 00:03:14,280
so we first had the circular user

94
00:03:14,280 --> 00:03:16,080
terminal that's the same music terminal

95
00:03:16,080 --> 00:03:18,120
we have here on stage it's about 60

96
00:03:18,120 --> 00:03:19,920
centimeters in diameter and it was meant

97
00:03:19,920 --> 00:03:21,540
for residential use

98
00:03:21,540 --> 00:03:22,980
so you can see that there have been

99
00:03:22,980 --> 00:03:25,340
quite a lot of Hardware revisions here

100
00:03:25,340 --> 00:03:27,780
most of the circular user terminals are

101
00:03:27,780 --> 00:03:29,459
commonly referred to as revision one and

102
00:03:29,459 --> 00:03:31,620
revision two Hardware but as you can see

103
00:03:31,620 --> 00:03:33,239
there have been multiple variants of

104
00:03:33,239 --> 00:03:34,560
these equations

105
00:03:34,560 --> 00:03:36,659
after that came the square user terminal

106
00:03:36,659 --> 00:03:38,700
or the rectangular use of terminal which

107
00:03:38,700 --> 00:03:41,280
is meant for residential and RV use and

108
00:03:41,280 --> 00:03:42,780
also here we've seen multiple Hardware

109
00:03:42,780 --> 00:03:44,760
revisions

110
00:03:44,760 --> 00:03:46,739
now there's also a high performance user

111
00:03:46,739 --> 00:03:48,120
terminal that's only meant for business

112
00:03:48,120 --> 00:03:50,760
use and Maritime use and here as well

113
00:03:50,760 --> 00:03:51,959
they have been multiple Hardware

114
00:03:51,959 --> 00:03:54,120
divisions then finally there's a

115
00:03:54,120 --> 00:03:55,860
transceiver unit there's not a lot of

116
00:03:55,860 --> 00:03:58,200
public information on this yet but you

117
00:03:58,200 --> 00:04:00,420
can find some details in the firmware so

118
00:04:00,420 --> 00:04:01,500
to hear the ideas that you have a

119
00:04:01,500 --> 00:04:03,180
transceiver box that is paired with an

120
00:04:03,180 --> 00:04:05,940
external phased array antenna

121
00:04:05,940 --> 00:04:08,340
when we first order the user terminal we

122
00:04:08,340 --> 00:04:10,920
received a F2 Polo 2 Terminal

123
00:04:10,920 --> 00:04:13,379
which contained a system on ship cut

124
00:04:13,379 --> 00:04:15,720
tree meaning it was the third silicon

125
00:04:15,720 --> 00:04:17,699
revision of the system on chip

126
00:04:17,699 --> 00:04:19,620
during my research I broke this user

127
00:04:19,620 --> 00:04:21,600
terminal and when we received a new one

128
00:04:21,600 --> 00:04:24,360
it was already a F2 Port of 4 and this

129
00:04:24,360 --> 00:04:26,100
contained the fourth revision of the

130
00:04:26,100 --> 00:04:27,960
system on chip

131
00:04:27,960 --> 00:04:29,940
now all of the other user terminals that

132
00:04:29,940 --> 00:04:33,300
came off the F2 Polo 4 use the soc code

133
00:04:33,300 --> 00:04:36,060
4. and the attack that I showed in this

134
00:04:36,060 --> 00:04:37,979
presentation will this also work on all

135
00:04:37,979 --> 00:04:40,940
of the other terminals

136
00:04:41,699 --> 00:04:44,699
now as I said we had a user thermal

137
00:04:44,699 --> 00:04:47,280
setup we got bought pretty quickly so we

138
00:04:47,280 --> 00:04:49,199
started to open it up if you remove the

139
00:04:49,199 --> 00:04:51,540
plastic backing shell then you get it

140
00:04:51,540 --> 00:04:53,400
with this big metal shield there's only

141
00:04:53,400 --> 00:04:55,560
a very small cutout in this that has

142
00:04:55,560 --> 00:04:57,600
three connectors one of them is for

143
00:04:57,600 --> 00:04:59,639
power over ethernet the other is for the

144
00:04:59,639 --> 00:05:01,979
motors so normally the dish will roughly

145
00:05:01,979 --> 00:05:03,900
align itself towards satellites and then

146
00:05:03,900 --> 00:05:06,419
uses the phased array principle to

147
00:05:06,419 --> 00:05:08,160
really tack a satellite that is flying

148
00:05:08,160 --> 00:05:09,300
over

149
00:05:09,300 --> 00:05:11,400
and now finally there was an unpopulated

150
00:05:11,400 --> 00:05:13,500
uart connector and if you flip the

151
00:05:13,500 --> 00:05:15,300
target products before if you see a UI

152
00:05:15,300 --> 00:05:16,500
connector you always get a bit happy

153
00:05:16,500 --> 00:05:18,479
because there might be an easy way into

154
00:05:18,479 --> 00:05:19,919
the system

155
00:05:19,919 --> 00:05:22,680
turns out that wasn't the case here so

156
00:05:22,680 --> 00:05:24,000
we could see a lot of information about

157
00:05:24,000 --> 00:05:25,919
the dish while it was booting so it was

158
00:05:25,919 --> 00:05:27,600
using the u-boot Bootloader for example

159
00:05:27,600 --> 00:05:30,000
but as you can also see SpaceX had

160
00:05:30,000 --> 00:05:32,580
disabled all of the serial input so you

161
00:05:32,580 --> 00:05:34,020
could type away at your keyboard and do

162
00:05:34,020 --> 00:05:35,940
whatever you want user thermal wouldn't

163
00:05:35,940 --> 00:05:39,919
actually respond to any of your inputs

164
00:05:40,080 --> 00:05:42,180
then when you allow the dish to boot

165
00:05:42,180 --> 00:05:44,039
fully you'll get it with this login

166
00:05:44,039 --> 00:05:46,080
prompt so it says development login

167
00:05:46,080 --> 00:05:48,720
enabled no because of course this is a

168
00:05:48,720 --> 00:05:50,100
regular dish it's not development

169
00:05:50,100 --> 00:05:52,440
hardware and it gives you a login prompt

170
00:05:52,440 --> 00:05:54,000
you can actually type usernames and

171
00:05:54,000 --> 00:05:56,100
password passwords in this prompt but it

172
00:05:56,100 --> 00:05:57,539
will not do anything

173
00:05:57,539 --> 00:05:59,580
as long as the dish doesn't believe it

174
00:05:59,580 --> 00:06:02,460
is development heart rate

175
00:06:02,460 --> 00:06:04,620
so that meant we had to go deeper so we

176
00:06:04,620 --> 00:06:06,000
had to remove the metal backing cover

177
00:06:06,000 --> 00:06:09,120
from the PCB this takes quite a lot of

178
00:06:09,120 --> 00:06:12,720
effort and time so use a heat gun plying

179
00:06:12,720 --> 00:06:15,539
tools and some IPA to dissolve it

180
00:06:15,539 --> 00:06:17,820
to dissolve the glue and then we can see

181
00:06:17,820 --> 00:06:20,160
a few interesting Parts on the PCB so I

182
00:06:20,160 --> 00:06:21,360
marked here an area where the GPS

183
00:06:21,360 --> 00:06:24,000
receiver in the middle there's an area

184
00:06:24,000 --> 00:06:26,460
that is responsible for creating all of

185
00:06:26,460 --> 00:06:27,360
the clocks for all of the other

186
00:06:27,360 --> 00:06:29,460
components on the board there's an area

187
00:06:29,460 --> 00:06:30,960
related to the power of an Ethernet

188
00:06:30,960 --> 00:06:33,360
system and finally the area that we're

189
00:06:33,360 --> 00:06:34,979
most interested in for this stock is the

190
00:06:34,979 --> 00:06:37,919
area of the main system on shippers

191
00:06:37,919 --> 00:06:39,660
and there's of course one part on this

192
00:06:39,660 --> 00:06:41,340
entire PCB that I haven't marked and

193
00:06:41,340 --> 00:06:43,259
that's basically all of the other stuff

194
00:06:43,259 --> 00:06:44,699
and all of the other stuff looks like

195
00:06:44,699 --> 00:06:47,220
this it contains a digital beam former

196
00:06:47,220 --> 00:06:49,800
made by SD microelectronics and it's

197
00:06:49,800 --> 00:06:51,479
code named Shiraz

198
00:06:51,479 --> 00:06:54,840
in each of these from the beam formers

199
00:06:54,840 --> 00:06:57,960
is packed with 16 front-end modules

200
00:06:57,960 --> 00:07:00,600
codenamed pulsar

201
00:07:00,600 --> 00:07:03,240
now while I was working on this dish as

202
00:07:03,240 --> 00:07:05,639
I said earlier I broke one but I didn't

203
00:07:05,639 --> 00:07:07,860
want to have the entire Hardware go to

204
00:07:07,860 --> 00:07:10,139
waste so we desoldered some of these ICS

205
00:07:10,139 --> 00:07:12,060
and we sent them off to John McMaster

206
00:07:12,060 --> 00:07:13,620
and it's almost nice enough to

207
00:07:13,620 --> 00:07:15,180
decapsulate these chips for us and then

208
00:07:15,180 --> 00:07:17,340
image them so now these images of these

209
00:07:17,340 --> 00:07:19,319
chips are available online and you can

210
00:07:19,319 --> 00:07:21,900
view them in high resolution there

211
00:07:21,900 --> 00:07:23,220
um there's a few interesting things you

212
00:07:23,220 --> 00:07:26,340
can see here clearly the the beam former

213
00:07:26,340 --> 00:07:29,039
chip also named cheras has these 16

214
00:07:29,039 --> 00:07:31,620
channels the 16 patterns that repeat in

215
00:07:31,620 --> 00:07:33,599
the chip basically for the front-end

216
00:07:33,599 --> 00:07:35,400
module we can see that it's basically

217
00:07:35,400 --> 00:07:38,819
the same part mirrored twice and that's

218
00:07:38,819 --> 00:07:42,919
a received and a transmit path

219
00:07:42,960 --> 00:07:44,520
now if you look at the system on ship

220
00:07:44,520 --> 00:07:46,740
area on the board we of course see the

221
00:07:46,740 --> 00:07:48,720
main system on ship this is a custom

222
00:07:48,720 --> 00:07:51,960
quad-core arm cortex A50 feature made by

223
00:07:51,960 --> 00:07:54,360
SD microelectronics

224
00:07:54,360 --> 00:07:55,500
um as I said there have been multiple

225
00:07:55,500 --> 00:07:57,539
silicon revisions of this chip and it is

226
00:07:57,539 --> 00:07:59,460
code named Gatson

227
00:07:59,460 --> 00:08:01,800
then there's a secure element again made

228
00:08:01,800 --> 00:08:04,500
by SD microelectronics and at the end of

229
00:08:04,500 --> 00:08:05,759
the presentation I will give you some

230
00:08:05,759 --> 00:08:07,560
more hints as to what this secure

231
00:08:07,560 --> 00:08:09,539
element is used for

232
00:08:09,539 --> 00:08:11,639
then C or in green we have a four

233
00:08:11,639 --> 00:08:14,220
gigabyte emmc chip and finally we have

234
00:08:14,220 --> 00:08:18,300
two four gigabit DDR3 chips

235
00:08:18,300 --> 00:08:19,860
um in the red marked on the slide are

236
00:08:19,860 --> 00:08:22,139
some pull up and pull down existers that

237
00:08:22,139 --> 00:08:25,080
basically encode a zero or a one and

238
00:08:25,080 --> 00:08:26,460
this is used by the dish while it's

239
00:08:26,460 --> 00:08:28,319
booting to figure out which of all of

240
00:08:28,319 --> 00:08:30,060
these Hardware revisions it actually is

241
00:08:30,060 --> 00:08:31,860
and then based on that a different

242
00:08:31,860 --> 00:08:34,799
device tree is used

243
00:08:34,799 --> 00:08:36,599
now on this previous slide you can also

244
00:08:36,599 --> 00:08:38,640
see that there's this metal cover on top

245
00:08:38,640 --> 00:08:40,500
of the main SOC chip that's an

246
00:08:40,500 --> 00:08:42,479
integrated heat spreader you can remove

247
00:08:42,479 --> 00:08:43,440
that

248
00:08:43,440 --> 00:08:45,899
and then you are greeted with the back

249
00:08:45,899 --> 00:08:48,300
side of the Silicon die and the back

250
00:08:48,300 --> 00:08:49,500
side of the Silicon die you can actually

251
00:08:49,500 --> 00:08:51,060
make a picture of

252
00:08:51,060 --> 00:08:53,160
in this case we made the picture in our

253
00:08:53,160 --> 00:08:55,320
lab using a laser fault transaction

254
00:08:55,320 --> 00:08:56,480
station

255
00:08:56,480 --> 00:08:59,459
so this is a 50x magnified magnification

256
00:08:59,459 --> 00:09:01,740
of the Chip And this sort of picture can

257
00:09:01,740 --> 00:09:03,480
be interesting for a physical attack to

258
00:09:03,480 --> 00:09:06,120
figure out where certain parts of the

259
00:09:06,120 --> 00:09:07,980
chip are physically located

260
00:09:07,980 --> 00:09:10,320
so one thing you can see very clearly in

261
00:09:10,320 --> 00:09:12,240
the bottom right or the fourth CPU cores

262
00:09:12,240 --> 00:09:14,519
and if you maybe want to do a an em

263
00:09:14,519 --> 00:09:16,500
fault attack that targets the CPU then

264
00:09:16,500 --> 00:09:19,140
it's very nice if you know already where

265
00:09:19,140 --> 00:09:20,820
it's physically located

266
00:09:20,820 --> 00:09:22,740
we also donated this picture to the

267
00:09:22,740 --> 00:09:24,540
Silicon Chrome website so you can also

268
00:09:24,540 --> 00:09:27,740
view it there in high resolution

269
00:09:27,899 --> 00:09:29,399
so of course the first thing we want to

270
00:09:29,399 --> 00:09:31,560
do with any of these embedded devices is

271
00:09:31,560 --> 00:09:33,420
basically extract the firmware and then

272
00:09:33,420 --> 00:09:35,100
look at the software maybe we can find

273
00:09:35,100 --> 00:09:36,660
an easy software vulnerability that

274
00:09:36,660 --> 00:09:39,300
allows away in in this case the software

275
00:09:39,300 --> 00:09:42,060
is stored on that emmc chip which is

276
00:09:42,060 --> 00:09:44,820
basically a an SD card with more data

277
00:09:44,820 --> 00:09:45,660
lines

278
00:09:45,660 --> 00:09:47,760
and all you need to read out an SD card

279
00:09:47,760 --> 00:09:49,980
or a clock line a command line and a

280
00:09:49,980 --> 00:09:51,720
data zero line

281
00:09:51,720 --> 00:09:53,700
there's quite a few test points on this

282
00:09:53,700 --> 00:09:55,620
board so what we did is we solved wires

283
00:09:55,620 --> 00:09:56,940
to all of these test points and then

284
00:09:56,940 --> 00:09:59,519
looked at a logic analyzer capture

285
00:09:59,519 --> 00:10:01,560
and you can always see the clock line is

286
00:10:01,560 --> 00:10:03,600
easy to spot the command line will be

287
00:10:03,600 --> 00:10:05,640
the first line to do anything and then

288
00:10:05,640 --> 00:10:07,740
data 0 will also be the first data line

289
00:10:07,740 --> 00:10:10,019
to respond with data

290
00:10:10,019 --> 00:10:12,660
and once you have these test points you

291
00:10:12,660 --> 00:10:15,300
can connect an SD card reader to it and

292
00:10:15,300 --> 00:10:16,920
just connect the SD card theater to your

293
00:10:16,920 --> 00:10:19,380
PC and read out the chip in this case I

294
00:10:19,380 --> 00:10:21,480
also had to add a level shifter because

295
00:10:21,480 --> 00:10:25,260
the emmc was running at one voltage

296
00:10:25,260 --> 00:10:26,700
now this is not the way I would

297
00:10:26,700 --> 00:10:28,440
recommend doing this and this is the way

298
00:10:28,440 --> 00:10:30,120
I did it because I was impatient I

299
00:10:30,120 --> 00:10:31,260
wasn't willing to wait for the right

300
00:10:31,260 --> 00:10:33,300
tools so what I would recommend you do

301
00:10:33,300 --> 00:10:35,880
is you buy this low voltage emmc adapter

302
00:10:35,880 --> 00:10:38,399
they're only 10 or 12 dollars online and

303
00:10:38,399 --> 00:10:40,620
they make your life a lot easier

304
00:10:40,620 --> 00:10:42,480
there's multiple other ways of doing of

305
00:10:42,480 --> 00:10:44,880
dumping emcs and dumping emc's in

306
00:10:44,880 --> 00:10:47,220
circuit or doing ship off so here's a

307
00:10:47,220 --> 00:10:49,079
few other ways you could go there's a

308
00:10:49,079 --> 00:10:51,959
lot of phone data recovery slash

309
00:10:51,959 --> 00:10:54,839
forensics Tools in my experience they

310
00:10:54,839 --> 00:10:57,480
don't work really well there relatively

311
00:10:57,480 --> 00:10:59,519
expensive they're annoying to work with

312
00:10:59,519 --> 00:11:01,800
they only have Windows software there's

313
00:11:01,800 --> 00:11:04,019
licenses involved it's all very annoying

314
00:11:04,019 --> 00:11:06,420
to work with so I did try the easy JTAG

315
00:11:06,420 --> 00:11:09,000
box it did work but it was relatively

316
00:11:09,000 --> 00:11:10,260
unstable

317
00:11:10,260 --> 00:11:13,200
then Murray tested the octopus Pro box

318
00:11:13,200 --> 00:11:15,660
and he had a similar experience really

319
00:11:15,660 --> 00:11:17,220
annoying software and it was very

320
00:11:17,220 --> 00:11:18,360
unstable

321
00:11:18,360 --> 00:11:20,519
another alternative that might work is

322
00:11:20,519 --> 00:11:23,279
the T56 programmer which is the

323
00:11:23,279 --> 00:11:26,640
successor of the tl866 II which is a

324
00:11:26,640 --> 00:11:29,399
very popular program to dump all sorts

325
00:11:29,399 --> 00:11:31,620
of memory chips

326
00:11:31,620 --> 00:11:34,380
now if you if you're lucky or unlucky

327
00:11:34,380 --> 00:11:36,600
and you have a newer user Terminal A

328
00:11:36,600 --> 00:11:39,360
rectangular one then this area of the

329
00:11:39,360 --> 00:11:41,519
main system on shift looks like this and

330
00:11:41,519 --> 00:11:43,740
SpaceX removed all of the test points on

331
00:11:43,740 --> 00:11:46,079
this new hardware vision so here you

332
00:11:46,079 --> 00:11:47,640
have to go for the chip off method

333
00:11:47,640 --> 00:11:49,260
meaning that you remove the emmc chip

334
00:11:49,260 --> 00:11:51,240
from the board put in an external relay

335
00:11:51,240 --> 00:11:53,220
then re-ball it and put it back on the

336
00:11:53,220 --> 00:11:53,940
board

337
00:11:53,940 --> 00:11:55,980
this sounds complicated but you should

338
00:11:55,980 --> 00:11:57,660
just try it once it's really not that

339
00:11:57,660 --> 00:11:59,940
difficult if you have the high tools so

340
00:11:59,940 --> 00:12:01,860
useful they have to remove the chip and

341
00:12:01,860 --> 00:12:03,959
then on on AliExpress for example you

342
00:12:03,959 --> 00:12:06,120
get one of these jigs shown on the top

343
00:12:06,120 --> 00:12:08,160
right and this makes it really easy to

344
00:12:08,160 --> 00:12:10,620
align the stencil on top of the the BGA

345
00:12:10,620 --> 00:12:13,620
balls then you use solar paste spread it

346
00:12:13,620 --> 00:12:16,200
over the stencil again use hot air and

347
00:12:16,200 --> 00:12:18,899
all of the balls will reform then you

348
00:12:18,899 --> 00:12:20,579
can put a chip in one of these sockets

349
00:12:20,579 --> 00:12:22,980
shown on the bottom right and again

350
00:12:22,980 --> 00:12:24,839
connected to an SD card reader and make

351
00:12:24,839 --> 00:12:27,480
a dump you can then also change the data

352
00:12:27,480 --> 00:12:29,100
on the MMC if you want and put it back

353
00:12:29,100 --> 00:12:31,579
on the board

354
00:12:32,100 --> 00:12:35,220
now once we have a raw dump of the MMC

355
00:12:35,220 --> 00:12:37,260
it's just one binary blob and we don't

356
00:12:37,260 --> 00:12:39,060
really know what is going on

357
00:12:39,060 --> 00:12:41,459
so we have to start pulling it apart so

358
00:12:41,459 --> 00:12:43,200
for this we can look a bit at the open

359
00:12:43,200 --> 00:12:46,560
source u-boot code so SpaceX did release

360
00:12:46,560 --> 00:12:50,399
the modifications because Ubud is GPL

361
00:12:50,399 --> 00:12:52,440
licensed and you can see there's a lot

362
00:12:52,440 --> 00:12:54,240
of partitions and there's a few

363
00:12:54,240 --> 00:12:55,560
interesting things you can already see

364
00:12:55,560 --> 00:12:57,360
here so you can see there's a lot of

365
00:12:57,360 --> 00:13:00,120
interested firmware a boot stages that

366
00:13:00,120 --> 00:13:01,980
are talking about image packages and

367
00:13:01,980 --> 00:13:03,600
these you can earn back with the FIP

368
00:13:03,600 --> 00:13:04,740
tool

369
00:13:04,740 --> 00:13:07,680
there's a flattened UI image tree which

370
00:13:07,680 --> 00:13:10,740
also had a custom format by SpaceX on

371
00:13:10,740 --> 00:13:12,600
top of it that I'll explain later

372
00:13:12,600 --> 00:13:14,760
then there's a runtime image a

373
00:13:14,760 --> 00:13:16,680
calibration and a calibration the

374
00:13:16,680 --> 00:13:19,500
calibration is user thermal specific and

375
00:13:19,500 --> 00:13:21,660
as you can see these partitions are DMV

376
00:13:21,660 --> 00:13:22,980
vanity protected

377
00:13:22,980 --> 00:13:25,380
there's an EDR and config partition that

378
00:13:25,380 --> 00:13:27,660
looks protected and looks keys for these

379
00:13:27,660 --> 00:13:30,120
expectations are stocked in e-fuses

380
00:13:30,120 --> 00:13:32,040
so from this slide it should always be

381
00:13:32,040 --> 00:13:34,200
clear that modifying anything on the MMC

382
00:13:34,200 --> 00:13:36,839
won't really get you very far the entire

383
00:13:36,839 --> 00:13:39,060
system implements secure boot so

384
00:13:39,060 --> 00:13:42,420
modifying something will be detected by

385
00:13:42,420 --> 00:13:42,959
um

386
00:13:42,959 --> 00:13:44,700
the home bootloading initially for

387
00:13:44,700 --> 00:13:46,440
example and then it will stop booting

388
00:13:46,440 --> 00:13:49,139
and you won't be able to do anything

389
00:13:49,139 --> 00:13:51,420
so it isn't as simple as just replacing

390
00:13:51,420 --> 00:13:52,740
firmware

391
00:13:52,740 --> 00:13:54,899
now if we want to look a bit more in in

392
00:13:54,899 --> 00:13:56,459
the firmware itself then usually you

393
00:13:56,459 --> 00:13:58,019
would use a tool like bin walk and try

394
00:13:58,019 --> 00:14:00,120
to extract it in this case it didn't

395
00:14:00,120 --> 00:14:02,399
work because of some custom error

396
00:14:02,399 --> 00:14:04,320
correcting codes that SpaceX has put on

397
00:14:04,320 --> 00:14:07,740
top of the standard fit image the reason

398
00:14:07,740 --> 00:14:10,680
they did this is presumably because

399
00:14:10,680 --> 00:14:12,480
some parts of the code are shared

400
00:14:12,480 --> 00:14:13,800
between the user terminal and the

401
00:14:13,800 --> 00:14:15,600
satellites and the satellites are

402
00:14:15,600 --> 00:14:17,100
exposed to a bit harsher of an

403
00:14:17,100 --> 00:14:19,200
environment so a bit flip is more likely

404
00:14:19,200 --> 00:14:20,519
to happen

405
00:14:20,519 --> 00:14:23,459
this means that each 255 block of data

406
00:14:23,459 --> 00:14:25,560
contains 32 bytes of error correcting

407
00:14:25,560 --> 00:14:27,180
codes that you want to initially step

408
00:14:27,180 --> 00:14:29,639
away from this I explained the entire

409
00:14:29,639 --> 00:14:31,440
data format in a blog post that you can

410
00:14:31,440 --> 00:14:32,519
find online

411
00:14:32,519 --> 00:14:34,200
now once you go through the process of

412
00:14:34,200 --> 00:14:37,440
once removing all of this ECC data you

413
00:14:37,440 --> 00:14:39,779
can actually extract an ECC binary from

414
00:14:39,779 --> 00:14:41,040
the firmware and then of course

415
00:14:41,040 --> 00:14:43,500
afterwards you can simply use that to

416
00:14:43,500 --> 00:14:48,560
remove an ECC and correct bit flips

417
00:14:48,720 --> 00:14:50,579
now there's only a few things that are

418
00:14:50,579 --> 00:14:51,899
interesting that we can find in this

419
00:14:51,899 --> 00:14:54,000
program work there's some very nicely

420
00:14:54,000 --> 00:14:55,860
documented scripts for example or

421
00:14:55,860 --> 00:14:57,779
configuration files

422
00:14:57,779 --> 00:14:59,459
so some people have asked me in the past

423
00:14:59,459 --> 00:15:01,339
how does the user terminal handle

424
00:15:01,339 --> 00:15:03,660
thermal management so what does it do if

425
00:15:03,660 --> 00:15:05,220
it gets too hot what does it do if it

426
00:15:05,220 --> 00:15:07,680
gets too cold how does it handle that

427
00:15:07,680 --> 00:15:09,899
well there's a nice file in the firmware

428
00:15:09,899 --> 00:15:11,579
that really explains this in a lot of

429
00:15:11,579 --> 00:15:13,440
details with a lot of comments and it's

430
00:15:13,440 --> 00:15:15,540
really nicely structured so if you want

431
00:15:15,540 --> 00:15:16,740
to know that information then the

432
00:15:16,740 --> 00:15:18,959
firmware is the perfect place to start

433
00:15:18,959 --> 00:15:21,420
we can also see all of the RF channels

434
00:15:21,420 --> 00:15:23,220
that are being used so we can see the

435
00:15:23,220 --> 00:15:25,560
Uplink and downlink frequencies we can

436
00:15:25,560 --> 00:15:28,199
see which channels are being combined in

437
00:15:28,199 --> 00:15:29,940
a pair and you can even see the

438
00:15:29,940 --> 00:15:31,380
frequencies of the lasers that are used

439
00:15:31,380 --> 00:15:34,160
in the satellites

440
00:15:34,260 --> 00:15:36,000
we can also find some hidden web pages

441
00:15:36,000 --> 00:15:37,980
so if you connect to the user terminal

442
00:15:37,980 --> 00:15:40,980
over a yft ethernet connection then

443
00:15:40,980 --> 00:15:42,899
there are a few web pages that you can

444
00:15:42,899 --> 00:15:44,760
find on there and you wouldn't really

445
00:15:44,760 --> 00:15:46,740
know that these web pages exist without

446
00:15:46,740 --> 00:15:49,199
first looking at the firmware so these

447
00:15:49,199 --> 00:15:52,500
web pages some of them are meant for um

448
00:15:52,500 --> 00:15:55,500
I guess regulatory testing and allows

449
00:15:55,500 --> 00:15:56,639
some easy

450
00:15:56,639 --> 00:15:59,339
controls over the user terminal but if

451
00:15:59,339 --> 00:16:01,260
you have a regular consumer user

452
00:16:01,260 --> 00:16:02,760
terminal you won't be able to use these

453
00:16:02,760 --> 00:16:05,240
controls

454
00:16:05,699 --> 00:16:08,639
there's a lot of

455
00:16:08,639 --> 00:16:11,399
code in the program work that is used to

456
00:16:11,399 --> 00:16:15,300
do Telemetry and SpaceX is I guess

457
00:16:15,300 --> 00:16:17,699
playing being a close eye at what some

458
00:16:17,699 --> 00:16:18,899
people are doing with their user

459
00:16:18,899 --> 00:16:21,060
terminals so I know one person that

460
00:16:21,060 --> 00:16:22,920
mounted the user terminal inside of the

461
00:16:22,920 --> 00:16:24,720
plane because they wanted to have high

462
00:16:24,720 --> 00:16:27,600
speed internet in that plane this worked

463
00:16:27,600 --> 00:16:29,820
up until a few weeks ago when SpaceX

464
00:16:29,820 --> 00:16:31,620
started blocking this but even before

465
00:16:31,620 --> 00:16:33,899
that SpaceX already knew because from

466
00:16:33,899 --> 00:16:36,779
the firmware it is clear that if you um

467
00:16:36,779 --> 00:16:39,000
yeah have too high of an acceleration or

468
00:16:39,000 --> 00:16:40,860
too high of an altitude that an alert

469
00:16:40,860 --> 00:16:42,360
will be triggered

470
00:16:42,360 --> 00:16:44,160
similarly they keep track of their

471
00:16:44,160 --> 00:16:46,680
development Hardware in the past it has

472
00:16:46,680 --> 00:16:48,240
happened for example Microsoft had an

473
00:16:48,240 --> 00:16:50,820
issue with Xbox development gets leaking

474
00:16:50,820 --> 00:16:52,500
and then people using those to attack

475
00:16:52,500 --> 00:16:54,480
the Xbox network that's of course

476
00:16:54,480 --> 00:16:56,820
something you want to try and avoid

477
00:16:56,820 --> 00:16:59,220
so if let's say a developer was to take

478
00:16:59,220 --> 00:17:01,680
the user terminal home and work to use

479
00:17:01,680 --> 00:17:03,779
it in a non-development geofence then an

480
00:17:03,779 --> 00:17:05,760
alert would be triggered at the side of

481
00:17:05,760 --> 00:17:06,720
SpaceX

482
00:17:06,720 --> 00:17:08,819
you can find all of these geofences

483
00:17:08,819 --> 00:17:11,459
defined in the firmware so the example

484
00:17:11,459 --> 00:17:13,439
on the left is a rather obvious example

485
00:17:13,439 --> 00:17:15,480
it's a SpaceX facility so you are

486
00:17:15,480 --> 00:17:17,579
allowed to use development Hardware at a

487
00:17:17,579 --> 00:17:18,959
SpaceX facility

488
00:17:18,959 --> 00:17:20,459
the one on the right is a bit less

489
00:17:20,459 --> 00:17:22,439
obvious it's the connections Museum in

490
00:17:22,439 --> 00:17:23,400
Seattle

491
00:17:23,400 --> 00:17:25,079
and I'm not really sure why they have

492
00:17:25,079 --> 00:17:27,000
access to development archery

493
00:17:27,000 --> 00:17:29,220
there was another example that was

494
00:17:29,220 --> 00:17:31,260
called the snow bench and this was a

495
00:17:31,260 --> 00:17:32,760
villa somewhere in the middle of nowhere

496
00:17:32,760 --> 00:17:34,980
in the US but I don't really know who

497
00:17:34,980 --> 00:17:36,480
this place belongs to so I'm not going

498
00:17:36,480 --> 00:17:39,360
to disclosed location

499
00:17:39,360 --> 00:17:42,059
now I'm not going to say that you should

500
00:17:42,059 --> 00:17:43,679
try to get your hands on development

501
00:17:43,679 --> 00:17:45,539
heart right but if you really want and

502
00:17:45,539 --> 00:17:47,880
if you zoom for zoom in far enough on

503
00:17:47,880 --> 00:17:49,380
Google Maps you can actually find some

504
00:17:49,380 --> 00:17:51,419
of these user terminals sitting on top

505
00:17:51,419 --> 00:17:55,400
of a parking lot at a SpaceX facility

506
00:17:55,740 --> 00:17:57,480
so of course what we want to obtain is

507
00:17:57,480 --> 00:17:58,919
we want root we want to root on this

508
00:17:58,919 --> 00:18:00,539
user terminal so that we can interact

509
00:18:00,539 --> 00:18:02,340
with the network side of things and

510
00:18:02,340 --> 00:18:03,780
maybe we can even try and attack a

511
00:18:03,780 --> 00:18:06,600
satellite eventually

512
00:18:06,600 --> 00:18:08,100
I already mentioned that there's this

513
00:18:08,100 --> 00:18:09,900
development login enable prompt and now

514
00:18:09,900 --> 00:18:11,220
that you have the firmware we can start

515
00:18:11,220 --> 00:18:13,200
looking at how this is implemented

516
00:18:13,200 --> 00:18:15,000
so you can see in the shell script that

517
00:18:15,000 --> 00:18:16,679
it will first print development logo

518
00:18:16,679 --> 00:18:19,140
enabled then it does this is production

519
00:18:19,140 --> 00:18:21,240
Hardware check if it's production

520
00:18:21,240 --> 00:18:22,740
non-production heart reacts or

521
00:18:22,740 --> 00:18:24,299
development character then it prints yes

522
00:18:24,299 --> 00:18:27,120
and sets the root password to Falcon

523
00:18:27,120 --> 00:18:29,220
otherwise it just depends snow and

524
00:18:29,220 --> 00:18:30,960
there's no route to accept and you won't

525
00:18:30,960 --> 00:18:33,360
be able to log in

526
00:18:33,360 --> 00:18:34,860
now if we look at this from a more

527
00:18:34,860 --> 00:18:37,620
physical perspective then

528
00:18:37,620 --> 00:18:39,960
this is a logic analyzer capture of the

529
00:18:39,960 --> 00:18:41,520
development login enabled print so

530
00:18:41,520 --> 00:18:43,200
there's this print statement then

531
00:18:43,200 --> 00:18:45,120
there's a two millisecond Gap and then

532
00:18:45,120 --> 00:18:46,799
the dish prints no

533
00:18:46,799 --> 00:18:48,419
so here you can of course imagine that

534
00:18:48,419 --> 00:18:50,760
this is production Arctic check is

535
00:18:50,760 --> 00:18:53,100
happening in this two millisecond Gap

536
00:18:53,100 --> 00:18:55,679
and we as the attacker we want this user

537
00:18:55,679 --> 00:18:57,120
terminal to believe that it is

538
00:18:57,120 --> 00:18:59,100
development Hardware instead of

539
00:18:59,100 --> 00:19:01,440
production hardware and how do we do

540
00:19:01,440 --> 00:19:03,419
this we do this with fault injection

541
00:19:03,419 --> 00:19:05,400
so we're going to try and disrupt the

542
00:19:05,400 --> 00:19:08,100
normal program flow in the hopes of the

543
00:19:08,100 --> 00:19:09,539
user terminal printing yes and then

544
00:19:09,539 --> 00:19:11,940
allowing us to log in

545
00:19:11,940 --> 00:19:13,740
I already mentioned that this is a flip

546
00:19:13,740 --> 00:19:16,440
ship packaging and that exposes the dive

547
00:19:16,440 --> 00:19:17,340
back side

548
00:19:17,340 --> 00:19:19,200
and usually in Academia then we start

549
00:19:19,200 --> 00:19:21,120
thinking about the very fancy type of

550
00:19:21,120 --> 00:19:23,460
attacks that are easier because of this

551
00:19:23,460 --> 00:19:25,620
sort of packaging so you can do laser

552
00:19:25,620 --> 00:19:27,860
fault injection body bias injection

553
00:19:27,860 --> 00:19:29,940
electromagnetic fault injection and so

554
00:19:29,940 --> 00:19:31,919
on and we have all of these tools in our

555
00:19:31,919 --> 00:19:33,780
lab at the University to do

556
00:19:33,780 --> 00:19:35,940
there's one very inconvenient thing

557
00:19:35,940 --> 00:19:38,100
about this hardware and that it's very

558
00:19:38,100 --> 00:19:39,059
big

559
00:19:39,059 --> 00:19:40,980
so all of the hardware we have to

560
00:19:40,980 --> 00:19:43,140
accurately position any amp rope for

561
00:19:43,140 --> 00:19:45,120
example on top of a die or to position a

562
00:19:45,120 --> 00:19:48,780
laser on top of the die is not meant for

563
00:19:48,780 --> 00:19:51,840
pcbs that are 60 centimeters in diameter

564
00:19:51,840 --> 00:19:53,400
and if you think about doing a laser

565
00:19:53,400 --> 00:19:54,840
fault injection attack and you would

566
00:19:54,840 --> 00:19:56,520
later want to use this use of terminal

567
00:19:56,520 --> 00:19:58,320
on a roof and you would also have to

568
00:19:58,320 --> 00:20:00,600
move your entire laser setup on top of a

569
00:20:00,600 --> 00:20:03,720
roof and that's not very convenient

570
00:20:03,720 --> 00:20:05,580
another issue we faced of course is that

571
00:20:05,580 --> 00:20:07,440
that we don't have access to legitimate

572
00:20:07,440 --> 00:20:10,200
development kits and the chip made by SD

573
00:20:10,200 --> 00:20:12,299
here the chip we're targeting isn't

574
00:20:12,299 --> 00:20:14,280
public so we cannot buy a development

575
00:20:14,280 --> 00:20:16,559
kit either we cannot even find a data

576
00:20:16,559 --> 00:20:17,760
sheet for this chip

577
00:20:17,760 --> 00:20:20,039
even worse St doesn't even make a ship

578
00:20:20,039 --> 00:20:21,900
publicly available that is similar to

579
00:20:21,900 --> 00:20:24,240
this to whatever we're targeting that

580
00:20:24,240 --> 00:20:26,160
makes everything more cumbersome and

581
00:20:26,160 --> 00:20:27,600
annoying

582
00:20:27,600 --> 00:20:29,400
so there's a few more ways we could try

583
00:20:29,400 --> 00:20:31,320
to inject faults into the system you

584
00:20:31,320 --> 00:20:32,760
could try to play with the clock of the

585
00:20:32,760 --> 00:20:35,160
system on ship but usually in this sort

586
00:20:35,160 --> 00:20:37,799
of Chip you have a PLL that will likely

587
00:20:37,799 --> 00:20:40,020
eat all of your clock glitches we can

588
00:20:40,020 --> 00:20:41,760
try to play with the reset Line This is

589
00:20:41,760 --> 00:20:43,200
a technique that people use to attack

590
00:20:43,200 --> 00:20:45,480
the Xbox 360.

591
00:20:45,480 --> 00:20:47,580
but then what I ended up choosing for is

592
00:20:47,580 --> 00:20:49,799
the voltage fault injection

593
00:20:49,799 --> 00:20:51,419
now if you've never heard of voltage

594
00:20:51,419 --> 00:20:53,100
fault injection this is the very quick

595
00:20:53,100 --> 00:20:54,480
introduction to it

596
00:20:54,480 --> 00:20:56,820
so we have a Target processor that has a

597
00:20:56,820 --> 00:20:58,919
gorg voltage Supply in this case there

598
00:20:58,919 --> 00:21:00,360
are four cores

599
00:21:00,360 --> 00:21:02,039
the target processor also connects to

600
00:21:02,039 --> 00:21:04,740
dram which uses a different voltage

601
00:21:04,740 --> 00:21:07,140
Supply there might be gpios running at

602
00:21:07,140 --> 00:21:08,820
one volt 8 for example or some other

603
00:21:08,820 --> 00:21:10,799
City volt 3 and there might be other

604
00:21:10,799 --> 00:21:12,660
peripherals that also expect their own

605
00:21:12,660 --> 00:21:14,940
specific voltage but what we really want

606
00:21:14,940 --> 00:21:17,100
to do is we want to briefly short the

607
00:21:17,100 --> 00:21:19,020
core voltage Supply to ground

608
00:21:19,020 --> 00:21:20,820
and the way we do this is we try to

609
00:21:20,820 --> 00:21:22,140
remove as many of the decoupling

610
00:21:22,140 --> 00:21:24,780
capacitors as possible because they

611
00:21:24,780 --> 00:21:26,760
basically try to stabilize everything

612
00:21:26,760 --> 00:21:28,679
and we want the system to become

613
00:21:28,679 --> 00:21:29,940
unstable

614
00:21:29,940 --> 00:21:32,340
then we connect a mosfet to this coil

615
00:21:32,340 --> 00:21:35,220
voltage Supply Rail and by opening the

616
00:21:35,220 --> 00:21:37,559
mosfet we get a short to ground sinking

617
00:21:37,559 --> 00:21:38,880
away all of the current from the chip

618
00:21:38,880 --> 00:21:43,159
and hopefully inducing a glitch

619
00:21:43,320 --> 00:21:46,020
now there's some challenges here the

620
00:21:46,020 --> 00:21:47,640
first one is located in the core voltage

621
00:21:47,640 --> 00:21:49,559
Supply so we're working here with a

622
00:21:49,559 --> 00:21:51,539
black box Target we have no schematics

623
00:21:51,539 --> 00:21:54,240
no data sheets so what you'd use is to

624
00:21:54,240 --> 00:21:55,919
use the digital multimeter and some

625
00:21:55,919 --> 00:21:58,740
educated guessing so you can look at for

626
00:21:58,740 --> 00:22:01,620
example a quad-core cortex a53 made by a

627
00:22:01,620 --> 00:22:03,600
different manufacturer and then look at

628
00:22:03,600 --> 00:22:05,340
what sort of cork voltage Supply they're

629
00:22:05,340 --> 00:22:07,260
running from and in this way you can

630
00:22:07,260 --> 00:22:09,720
then make some yeses

631
00:22:09,720 --> 00:22:11,159
you also have to determine which the

632
00:22:11,159 --> 00:22:12,419
coupling capacitors you're going to

633
00:22:12,419 --> 00:22:14,640
remove there might be a lot of them a

634
00:22:14,640 --> 00:22:16,679
lot of different values as well so we'll

635
00:22:16,679 --> 00:22:18,659
remove none of them all of them will

636
00:22:18,659 --> 00:22:20,580
need some of them and all of these

637
00:22:20,580 --> 00:22:22,020
decisions you make will have an impact

638
00:22:22,020 --> 00:22:25,320
on the effectiveness of your glitch

639
00:22:25,320 --> 00:22:28,080
you have to select a mosfet to perform

640
00:22:28,080 --> 00:22:30,360
the glitch itself and there's a few

641
00:22:30,360 --> 00:22:32,039
parameters here that you you want to pay

642
00:22:32,039 --> 00:22:34,080
attention to while selecting the mosfet

643
00:22:34,080 --> 00:22:36,900
don't worry about this too much if you

644
00:22:36,900 --> 00:22:38,580
have questions about this then send me

645
00:22:38,580 --> 00:22:39,960
an email

646
00:22:39,960 --> 00:22:42,659
then the most difficult part of doing

647
00:22:42,659 --> 00:22:44,520
voltage fault injection is finding the

648
00:22:44,520 --> 00:22:46,740
correct parametrics for your glitch so

649
00:22:46,740 --> 00:22:48,539
we need a timing reference this is

650
00:22:48,539 --> 00:22:50,520
usually what we call our trigger signal

651
00:22:50,520 --> 00:22:53,100
and this can be a GPI open this can be

652
00:22:53,100 --> 00:22:55,320
uart data this can be data being read

653
00:22:55,320 --> 00:22:57,780
from the EMC and so on it's just to

654
00:22:57,780 --> 00:23:00,539
acquire a stable point in time as a

655
00:23:00,539 --> 00:23:03,240
reference from the timing reference we

656
00:23:03,240 --> 00:23:05,760
wait a certain amount of time our glitch

657
00:23:05,760 --> 00:23:08,640
offset at that point we enable the

658
00:23:08,640 --> 00:23:10,799
glitch mosfet for a certain amount of

659
00:23:10,799 --> 00:23:13,200
time the glitch width and then we hope

660
00:23:13,200 --> 00:23:16,380
that some glitch occurs of course if you

661
00:23:16,380 --> 00:23:18,000
made the glitch with too wide then the

662
00:23:18,000 --> 00:23:20,580
entire system just caches and reboots

663
00:23:20,580 --> 00:23:22,500
and here the magic is then of course to

664
00:23:22,500 --> 00:23:24,780
find a suitable timing reference and

665
00:23:24,780 --> 00:23:27,539
offset and a width

666
00:23:27,539 --> 00:23:29,340
so this is how we started

667
00:23:29,340 --> 00:23:31,260
as I mentioned earlier we were trying to

668
00:23:31,260 --> 00:23:33,360
glitch the development login enabled

669
00:23:33,360 --> 00:23:36,240
prompt at that stage the entire user

670
00:23:36,240 --> 00:23:38,520
terminal is already fully booted meaning

671
00:23:38,520 --> 00:23:41,039
that all four cars are running at a high

672
00:23:41,039 --> 00:23:42,600
clock frequency

673
00:23:42,600 --> 00:23:45,179
and the way we usually design these

674
00:23:45,179 --> 00:23:47,159
chips is that we try to push them to the

675
00:23:47,159 --> 00:23:49,320
very limit you want your processor to

676
00:23:49,320 --> 00:23:51,900
run as fast as it possibly can and this

677
00:23:51,900 --> 00:23:53,760
means that it's already very close to

678
00:23:53,760 --> 00:23:55,860
caching and this means it's also easier

679
00:23:55,860 --> 00:23:57,360
to inject faults

680
00:23:57,360 --> 00:23:59,820
so use a cheaper spray light and to

681
00:23:59,820 --> 00:24:02,100
start our experiments if you haven't

682
00:24:02,100 --> 00:24:03,900
used one of these I noticed that they

683
00:24:03,900 --> 00:24:05,940
have some upstairs in the iot village

684
00:24:05,940 --> 00:24:07,500
that you can play with

685
00:24:07,500 --> 00:24:09,240
and it does basically the same principle

686
00:24:09,240 --> 00:24:11,159
it has the mosfet on board it has an

687
00:24:11,159 --> 00:24:12,840
fpga that controls all these glitch

688
00:24:12,840 --> 00:24:14,580
parameters and you can configure it to

689
00:24:14,580 --> 00:24:15,840
python

690
00:24:15,840 --> 00:24:17,820
so as I said the system is already fully

691
00:24:17,820 --> 00:24:20,039
booted it's pretty unstable so we can

692
00:24:20,039 --> 00:24:21,480
leave all of the decoupling capacitors

693
00:24:21,480 --> 00:24:23,220
simply on the board

694
00:24:23,220 --> 00:24:25,919
and then we do some attempts and hope to

695
00:24:25,919 --> 00:24:27,480
get lucky

696
00:24:27,480 --> 00:24:30,059
this is one example of what might happen

697
00:24:30,059 --> 00:24:31,740
so the bishop brings development login

698
00:24:31,740 --> 00:24:34,080
enabled it even prints yes

699
00:24:34,080 --> 00:24:36,120
but at the same time because the kernel

700
00:24:36,120 --> 00:24:38,280
no pointer dereference error and the

701
00:24:38,280 --> 00:24:40,440
entire system came caching down so this

702
00:24:40,440 --> 00:24:42,900
was not a useful glitch for us but if

703
00:24:42,900 --> 00:24:44,400
you try this often enough then

704
00:24:44,400 --> 00:24:46,140
eventually you do get lucky the

705
00:24:46,140 --> 00:24:47,760
discipline's development log enabled yes

706
00:24:47,760 --> 00:24:49,919
you log in with the username root and

707
00:24:49,919 --> 00:24:51,419
the password Falcon and now you can

708
00:24:51,419 --> 00:24:53,580
start doing whatever you want

709
00:24:53,580 --> 00:24:55,919
at this point I reported this issue to

710
00:24:55,919 --> 00:24:58,200
this Basics they even reproduced it in

711
00:24:58,200 --> 00:25:01,500
that lab and it was a nice group of

712
00:25:01,500 --> 00:25:03,179
concept to begin with because it was

713
00:25:03,179 --> 00:25:06,299
easy to produce some faults but most of

714
00:25:06,299 --> 00:25:08,580
them are undesirable

715
00:25:08,580 --> 00:25:10,260
so the issue with this attack is that

716
00:25:10,260 --> 00:25:12,120
it's slow because you only get one

717
00:25:12,120 --> 00:25:14,340
glitching attempt every boot cycle and

718
00:25:14,340 --> 00:25:16,020
an entire boot Cycle takes about 12

719
00:25:16,020 --> 00:25:17,039
seconds

720
00:25:17,039 --> 00:25:18,900
it would take many hours maybe a day

721
00:25:18,900 --> 00:25:20,640
before you get lucky once and that's of

722
00:25:20,640 --> 00:25:24,120
course not a very practical attack

723
00:25:24,120 --> 00:25:25,620
so what we want to do is we want to move

724
00:25:25,620 --> 00:25:27,900
up into the boot chain so glitch earlier

725
00:25:27,900 --> 00:25:30,240
in the boot cycle and then we can do

726
00:25:30,240 --> 00:25:33,960
multiple attempts per second maybe even

727
00:25:33,960 --> 00:25:36,120
so the way the system is designed is we

728
00:25:36,120 --> 00:25:37,919
have the system on ship and the system

729
00:25:37,919 --> 00:25:40,200
inside of this system on chip we have a

730
00:25:40,200 --> 00:25:42,779
route of trust that consists of if uses

731
00:25:42,779 --> 00:25:44,640
and our own bootloader

732
00:25:44,640 --> 00:25:48,000
these effuses are a special type of

733
00:25:48,000 --> 00:25:50,340
memory basically bits that you can only

734
00:25:50,340 --> 00:25:52,679
set once from zero to one and they can

735
00:25:52,679 --> 00:25:56,580
never go back from one to zero in theory

736
00:25:56,580 --> 00:25:57,419
um

737
00:25:57,419 --> 00:25:59,220
so in theory everything that's outside

738
00:25:59,220 --> 00:26:01,020
of this system on chip and outside of

739
00:26:01,020 --> 00:26:02,760
the stress boundary should be considered

740
00:26:02,760 --> 00:26:04,860
untrusted

741
00:26:04,860 --> 00:26:06,960
the root of trust publicly and the

742
00:26:06,960 --> 00:26:09,240
security State fuses are blown during

743
00:26:09,240 --> 00:26:11,880
manufacturing so you as a consumer when

744
00:26:11,880 --> 00:26:13,440
you buy one of these user terminals you

745
00:26:13,440 --> 00:26:16,980
have no control over this data

746
00:26:16,980 --> 00:26:19,020
as I said it should be impossible to

747
00:26:19,020 --> 00:26:21,299
revert a blown fuse there are certain

748
00:26:21,299 --> 00:26:22,919
techniques that might make it possible

749
00:26:22,919 --> 00:26:24,779
but those are usually considered out of

750
00:26:24,779 --> 00:26:26,640
scope

751
00:26:26,640 --> 00:26:28,260
and of course it must again must be

752
00:26:28,260 --> 00:26:30,120
taken when blowing additional fuses if

753
00:26:30,120 --> 00:26:32,820
you think up of an attacker that gains

754
00:26:32,820 --> 00:26:34,559
maybe code execution on the user

755
00:26:34,559 --> 00:26:36,600
terminal it shouldn't be super easy for

756
00:26:36,600 --> 00:26:38,760
them to blow additional fuses in areas

757
00:26:38,760 --> 00:26:40,500
of e-fuse memory that have already been

758
00:26:40,500 --> 00:26:42,600
blown if I as an attacker can for

759
00:26:42,600 --> 00:26:44,460
example blow additional bits in the root

760
00:26:44,460 --> 00:26:46,440
of trust bubble key then maybe I can

761
00:26:46,440 --> 00:26:47,940
come up with a key pair that allows me

762
00:26:47,940 --> 00:26:50,520
to sign my own firmware

763
00:26:50,520 --> 00:26:52,679
when you initially boot a system on chip

764
00:26:52,679 --> 00:26:55,500
usually the first part of code that is

765
00:26:55,500 --> 00:26:58,679
run is the ROM bootloader it's baked in

766
00:26:58,679 --> 00:27:01,679
during manufacturing it is immutable

767
00:27:01,679 --> 00:27:04,080
and it loads and verifies the second

768
00:27:04,080 --> 00:27:06,480
stage which is on the EMC memory so

769
00:27:06,480 --> 00:27:10,520
external memory it is untrusted

770
00:27:11,279 --> 00:27:13,860
the security State fuses are the first

771
00:27:13,860 --> 00:27:16,260
few fuses in e-fuse memory and they

772
00:27:16,260 --> 00:27:18,240
basically allow a disallow debugging

773
00:27:18,240 --> 00:27:20,940
access these fuses are never read by

774
00:27:20,940 --> 00:27:22,860
software and are basically only read by

775
00:27:22,860 --> 00:27:24,960
a hardware peripheral very early on in

776
00:27:24,960 --> 00:27:26,880
the boot cycle this might be another

777
00:27:26,880 --> 00:27:29,760
interesting Target for attack

778
00:27:29,760 --> 00:27:33,059
but what we decided to attack is loading

779
00:27:33,059 --> 00:27:36,000
the second stage bootloader so the way

780
00:27:36,000 --> 00:27:37,860
this happens is the home bootloader

781
00:27:37,860 --> 00:27:40,380
loads a certificate from the external

782
00:27:40,380 --> 00:27:42,059
emmc memory

783
00:27:42,059 --> 00:27:44,340
this certificate is a custom format in

784
00:27:44,340 --> 00:27:46,559
this case designed by SD

785
00:27:46,559 --> 00:27:48,240
microelectronics

786
00:27:48,240 --> 00:27:50,220
the magic value shown on the slides it

787
00:27:50,220 --> 00:27:53,100
contains some rollback counters to have

788
00:27:53,100 --> 00:27:55,080
rollback prevention

789
00:27:55,080 --> 00:27:56,700
then this um

790
00:27:56,700 --> 00:27:59,700
a short digest of the signed firmware

791
00:27:59,700 --> 00:28:01,980
basically and then of course a signature

792
00:28:01,980 --> 00:28:04,200
over this Digest

793
00:28:04,200 --> 00:28:06,360
so the home builder will first verify

794
00:28:06,360 --> 00:28:08,880
the certificate's signature if that

795
00:28:08,880 --> 00:28:10,860
signature is valid then it will load the

796
00:28:10,860 --> 00:28:13,500
second stage firmware from the emmc and

797
00:28:13,500 --> 00:28:15,059
then it will verify that the hash in

798
00:28:15,059 --> 00:28:16,740
this in the certificate actually matches

799
00:28:16,740 --> 00:28:19,320
what was loaded from emmc

800
00:28:19,320 --> 00:28:20,580
now if you've done fault injection

801
00:28:20,580 --> 00:28:22,620
before there's a few obvious locations

802
00:28:22,620 --> 00:28:24,600
here that you could try to attack you

803
00:28:24,600 --> 00:28:25,860
could try to attack the signature

804
00:28:25,860 --> 00:28:28,380
verification or you could try to attack

805
00:28:28,380 --> 00:28:32,419
the hash comparison

806
00:28:33,000 --> 00:28:36,419
here again we Face multiple challenges

807
00:28:36,419 --> 00:28:39,179
we don't have any documentation we don't

808
00:28:39,179 --> 00:28:40,740
have data sheets of the chip we don't

809
00:28:40,740 --> 00:28:42,480
even have data sheets of similar chips

810
00:28:42,480 --> 00:28:45,360
and we don't have any open or infused

811
00:28:45,360 --> 00:28:47,580
samples that we can experiment with so

812
00:28:47,580 --> 00:28:49,080
most commonly when we do an attack like

813
00:28:49,080 --> 00:28:50,580
this you would buy a development board

814
00:28:50,580 --> 00:28:52,620
then our own code on the development

815
00:28:52,620 --> 00:28:54,960
board and then we have some control over

816
00:28:54,960 --> 00:28:56,940
what is going on

817
00:28:56,940 --> 00:28:58,679
so we can also not run our own test

818
00:28:58,679 --> 00:29:00,960
program here so commonly we would make a

819
00:29:00,960 --> 00:29:03,120
simple dummy program with some nested

820
00:29:03,120 --> 00:29:05,279
for Loops that count basically and then

821
00:29:05,279 --> 00:29:06,840
that allow us to observe the final

822
00:29:06,840 --> 00:29:09,299
counter outcome then if you know if you

823
00:29:09,299 --> 00:29:11,159
can corrupt this counter output then you

824
00:29:11,159 --> 00:29:12,900
have some good glitch parameters that

825
00:29:12,900 --> 00:29:17,120
you can then use on your actual targets

826
00:29:19,320 --> 00:29:21,918
hmm

827
00:29:23,760 --> 00:29:25,440
we can also not dump any version

828
00:29:25,440 --> 00:29:26,820
engineer the wrong bootloader to figure

829
00:29:26,820 --> 00:29:29,100
out what the code is doing exactly but

830
00:29:29,100 --> 00:29:30,779
once we get the attack working we can

831
00:29:30,779 --> 00:29:33,559
the room

832
00:29:34,620 --> 00:29:36,480
we do know that some of the latest

833
00:29:36,480 --> 00:29:39,419
stages so BL2 onwards are based on

834
00:29:39,419 --> 00:29:41,100
Thursday firmware a

835
00:29:41,100 --> 00:29:42,899
and from that we can sort of assume that

836
00:29:42,899 --> 00:29:44,580
the home bootloader will have a similar

837
00:29:44,580 --> 00:29:47,580
structure and this is helpful

838
00:29:47,580 --> 00:29:49,080
now here are some tricks of the trade

839
00:29:49,080 --> 00:29:50,520
that you can apply if you're faced with

840
00:29:50,520 --> 00:29:52,860
a similar Black Box scenario so what you

841
00:29:52,860 --> 00:29:54,720
can do is you can boot with a second

842
00:29:54,720 --> 00:29:57,539
stage that is invalid and observe

843
00:29:57,539 --> 00:30:00,240
differences in how the entire system is

844
00:30:00,240 --> 00:30:02,840
booting so you can for example use

845
00:30:02,840 --> 00:30:05,940
invalid certificate signature an invalid

846
00:30:05,940 --> 00:30:08,279
bootloader hash in a certificate or a

847
00:30:08,279 --> 00:30:10,679
valid certificate but finally a bootload

848
00:30:10,679 --> 00:30:12,360
of firmware that doesn't match the hash

849
00:30:12,360 --> 00:30:14,760
in that certificate and by doing all of

850
00:30:14,760 --> 00:30:16,200
these experiments you can see how the

851
00:30:16,200 --> 00:30:18,120
boot flow changes and then try to

852
00:30:18,120 --> 00:30:19,860
determine which action is happening when

853
00:30:19,860 --> 00:30:22,340
in time

854
00:30:22,679 --> 00:30:25,320
so then we can also attempt to glitch a

855
00:30:25,320 --> 00:30:27,360
valid certificate into a signature

856
00:30:27,360 --> 00:30:29,700
verification failure so this normally

857
00:30:29,700 --> 00:30:31,919
wouldn't happen but by doing this you

858
00:30:31,919 --> 00:30:34,320
can verify that the range of glitch

859
00:30:34,320 --> 00:30:36,480
widths you're using is at least valid

860
00:30:36,480 --> 00:30:38,340
and this is something that is usually

861
00:30:38,340 --> 00:30:40,679
very easy to achieve you can imagine if

862
00:30:40,679 --> 00:30:42,360
there's a single bit flip in a signature

863
00:30:42,360 --> 00:30:44,340
the signature check should fail so this

864
00:30:44,340 --> 00:30:46,740
is an easy effect to cause

865
00:30:46,740 --> 00:30:48,779
and then finally side channels are very

866
00:30:48,779 --> 00:30:50,399
useful information so you can measure

867
00:30:50,399 --> 00:30:52,919
power consumption em illuminations from

868
00:30:52,919 --> 00:30:54,899
the chip maybe timing differences

869
00:30:54,899 --> 00:30:56,880
temperature of the Chip and so on

870
00:30:56,880 --> 00:30:58,200
there's a lot of side channels that can

871
00:30:58,200 --> 00:31:00,899
give you a lot of useful information

872
00:31:00,899 --> 00:31:02,580
and then there's one important thing to

873
00:31:02,580 --> 00:31:03,320
remember

874
00:31:03,320 --> 00:31:05,880
heart rate and software executing on it

875
00:31:05,880 --> 00:31:07,860
can be susceptible to glitches in

876
00:31:07,860 --> 00:31:11,340
multiple unexpected ways and usually the

877
00:31:11,340 --> 00:31:13,799
mental model we as attackers use to try

878
00:31:13,799 --> 00:31:16,080
and attack something is very likely to

879
00:31:16,080 --> 00:31:17,340
be incorrect

880
00:31:17,340 --> 00:31:19,860
and it's important to try and be

881
00:31:19,860 --> 00:31:21,539
exhausted with all of the experiments

882
00:31:21,539 --> 00:31:24,000
you do so this code example is an

883
00:31:24,000 --> 00:31:26,399
example that I use for for a simple demo

884
00:31:26,399 --> 00:31:28,620
in our lab at some point it's a simple

885
00:31:28,620 --> 00:31:31,500
password comparison check in this case

886
00:31:31,500 --> 00:31:33,419
it is constant time so you cannot do a

887
00:31:33,419 --> 00:31:35,399
sectional attack on it but when you ask

888
00:31:35,399 --> 00:31:37,020
most people how are you going to glitch

889
00:31:37,020 --> 00:31:39,179
it they will say I will Target the if

890
00:31:39,179 --> 00:31:41,640
branch that checks the accumulator

891
00:31:41,640 --> 00:31:43,679
and that's one valve way of attacking

892
00:31:43,679 --> 00:31:45,480
this code but the easier way of

893
00:31:45,480 --> 00:31:46,980
attacking this code is skipping the

894
00:31:46,980 --> 00:31:48,600
entire for Loop because then the

895
00:31:48,600 --> 00:31:50,340
accumulator stays at zero and you just

896
00:31:50,340 --> 00:31:52,980
fall to the branch and in practice this

897
00:31:52,980 --> 00:31:57,440
is usually easier than skipping the if

898
00:31:57,659 --> 00:31:59,220
so this is the initial setup we made

899
00:31:59,220 --> 00:32:01,679
where we have the user terminal

900
00:32:01,679 --> 00:32:03,840
in the top right you can see an em probe

901
00:32:03,840 --> 00:32:05,820
sitting in the location of the fourth

902
00:32:05,820 --> 00:32:08,220
CPU cores so that's a side channel in

903
00:32:08,220 --> 00:32:09,200
this case

904
00:32:09,200 --> 00:32:11,520
now I did remove all of the decoupling

905
00:32:11,520 --> 00:32:14,460
capacitors so in the head rectangles

906
00:32:14,460 --> 00:32:16,200
there used to be the coupling capacitors

907
00:32:16,200 --> 00:32:19,440
in this case I removed them because now

908
00:32:19,440 --> 00:32:21,240
we're targeting the home bootloading the

909
00:32:21,240 --> 00:32:23,100
home bootloader has been executed by a

910
00:32:23,100 --> 00:32:25,080
single core running at a much lower

911
00:32:25,080 --> 00:32:27,240
clock frequency and that makes the list

912
00:32:27,240 --> 00:32:29,100
the system less susceptible to these

913
00:32:29,100 --> 00:32:30,840
glitches and then we need to remove

914
00:32:30,840 --> 00:32:32,460
these decoupling capacitors to have a

915
00:32:32,460 --> 00:32:35,360
better effect basically

916
00:32:36,000 --> 00:32:38,399
this is a capture of a side Channel

917
00:32:38,399 --> 00:32:40,520
Trace in this case the EM side Channel

918
00:32:40,520 --> 00:32:43,080
with the uart output that has been

919
00:32:43,080 --> 00:32:45,539
provided by the user terminal so at this

920
00:32:45,539 --> 00:32:47,340
point user terminal is saying I've

921
00:32:47,340 --> 00:32:49,380
loaded certificate I'm going to start

922
00:32:49,380 --> 00:32:52,080
verifying the signature and you can only

923
00:32:52,080 --> 00:32:54,179
see clearly here from the EM sectional

924
00:32:54,179 --> 00:32:56,279
Trace that the computation of the

925
00:32:56,279 --> 00:32:57,779
signature verification is already

926
00:32:57,779 --> 00:33:00,659
starting when the last byte of uart data

927
00:33:00,659 --> 00:33:02,159
is still being sent out by the UR

928
00:33:02,159 --> 00:33:04,500
peripheral and this is very useful for

929
00:33:04,500 --> 00:33:05,940
us to have as an attacker this

930
00:33:05,940 --> 00:33:07,919
information because that means that we

931
00:33:07,919 --> 00:33:09,179
might have to start glitching way

932
00:33:09,179 --> 00:33:11,520
earlier than you would expect

933
00:33:11,520 --> 00:33:13,559
and as it turns out if you glitch this

934
00:33:13,559 --> 00:33:16,440
with the exact correct parameters and at

935
00:33:16,440 --> 00:33:18,659
the exact time where the signature

936
00:33:18,659 --> 00:33:21,240
verification starts and you can skip the

937
00:33:21,240 --> 00:33:23,940
entire signature verification so here

938
00:33:23,940 --> 00:33:26,820
the again we see the same point in time

939
00:33:26,820 --> 00:33:28,260
basically as before

940
00:33:28,260 --> 00:33:30,360
the difference I followed a certificate

941
00:33:30,360 --> 00:33:32,940
I'm going to start verifying it here it

942
00:33:32,940 --> 00:33:34,620
basically says I've loaded certificate

943
00:33:34,620 --> 00:33:37,080
it's verified without doing any

944
00:33:37,080 --> 00:33:39,539
verification and for us as the attacker

945
00:33:39,539 --> 00:33:41,640
that's of course very useful because now

946
00:33:41,640 --> 00:33:43,980
whatever we use as a second stage will

947
00:33:43,980 --> 00:33:46,380
be executed

948
00:33:46,380 --> 00:33:48,779
from that we have control so now we have

949
00:33:48,779 --> 00:33:50,340
control over the second stage bootloader

950
00:33:50,340 --> 00:33:52,500
meaning that we can start modifying it

951
00:33:52,500 --> 00:33:54,659
so in this case I modified the normal

952
00:33:54,659 --> 00:33:57,059
second stage to start dumping some

953
00:33:57,059 --> 00:33:59,340
memory regions in this way I was able to

954
00:33:59,340 --> 00:34:00,899
dump the wrong bootloader from the Chip

955
00:34:00,899 --> 00:34:03,960
And also the if users

956
00:34:03,960 --> 00:34:06,240
um I use that wrong bootloader dump and

957
00:34:06,240 --> 00:34:08,760
emulated in unicorn engine I tried

958
00:34:08,760 --> 00:34:10,859
fuzzing it with AFL plus plus in unicorn

959
00:34:10,859 --> 00:34:11,760
mode

960
00:34:11,760 --> 00:34:13,739
My Hope here was to find a software

961
00:34:13,739 --> 00:34:16,440
exploitable bug of course so that I

962
00:34:16,440 --> 00:34:17,639
wouldn't have to glitch the user

963
00:34:17,639 --> 00:34:19,560
terminal every single time but that

964
00:34:19,560 --> 00:34:22,440
didn't work out as you can imagine the

965
00:34:22,440 --> 00:34:24,119
first photograph project has been first

966
00:34:24,119 --> 00:34:27,000
quite a lot by now

967
00:34:27,000 --> 00:34:28,500
another thing I was able to do in

968
00:34:28,500 --> 00:34:31,080
unicorn is to skip

969
00:34:31,080 --> 00:34:33,540
or skip certain instructions as a way of

970
00:34:33,540 --> 00:34:35,099
simulating the glitches we've been

971
00:34:35,099 --> 00:34:36,060
inserting

972
00:34:36,060 --> 00:34:38,599
and I noticed that a single instruction

973
00:34:38,599 --> 00:34:41,599
skipped fault would never result in the

974
00:34:41,599 --> 00:34:44,219
behavior we observed and this was

975
00:34:44,219 --> 00:34:46,859
because SpaceX or SD microelectronics

976
00:34:46,859 --> 00:34:49,020
had actually implemented countermeasures

977
00:34:49,020 --> 00:34:50,460
in their own bootloader against the

978
00:34:50,460 --> 00:34:52,440
exact attack we're doing here

979
00:34:52,440 --> 00:34:54,239
and this again brings me back to my

980
00:34:54,239 --> 00:34:55,800
previous point that the mental model

981
00:34:55,800 --> 00:34:57,300
that was used to have to implement the

982
00:34:57,300 --> 00:35:00,240
countermeasures do not match reality so

983
00:35:00,240 --> 00:35:02,040
a model of you can only Skip One

984
00:35:02,040 --> 00:35:04,440
instruction probably doesn't apply to a

985
00:35:04,440 --> 00:35:08,119
seven stage pipeline processor

986
00:35:08,400 --> 00:35:09,900
here you can see one of the

987
00:35:09,900 --> 00:35:11,940
countermeasures at work

988
00:35:11,940 --> 00:35:13,980
so the dish first prints some output

989
00:35:13,980 --> 00:35:16,619
saying I've loaded the certificate and

990
00:35:16,619 --> 00:35:18,900
I'm going to start verifying it

991
00:35:18,900 --> 00:35:20,880
in this case a certificate contains an

992
00:35:20,880 --> 00:35:23,280
invalid signature but a valid digest for

993
00:35:23,280 --> 00:35:25,800
the next Second Stage bootload here you

994
00:35:25,800 --> 00:35:27,480
can see that our glitch sort of worked

995
00:35:27,480 --> 00:35:30,180
because we continue and

996
00:35:30,180 --> 00:35:32,760
we load the second stage firmware and

997
00:35:32,760 --> 00:35:34,079
the hash matches

998
00:35:34,079 --> 00:35:35,940
and then usually the second The Next

999
00:35:35,940 --> 00:35:37,800
Step would be to actually execute the

1000
00:35:37,800 --> 00:35:39,780
second stage bootloader but here you can

1001
00:35:39,780 --> 00:35:41,640
see we still get an authentication error

1002
00:35:41,640 --> 00:35:43,440
and this is one of the control flow

1003
00:35:43,440 --> 00:35:45,000
checks in the wrong bootloader that

1004
00:35:45,000 --> 00:35:47,700
actually managed to catch a glitching

1005
00:35:47,700 --> 00:35:49,079
attempt

1006
00:35:49,079 --> 00:35:50,700
here's an example of how this is

1007
00:35:50,700 --> 00:35:52,500
implemented in the code so at the very

1008
00:35:52,500 --> 00:35:54,720
start of the wrong bootloading two magic

1009
00:35:54,720 --> 00:35:57,060
values are being set somewhere in memory

1010
00:35:57,060 --> 00:35:59,460
and then after calling um signature

1011
00:35:59,460 --> 00:36:01,260
verification function in this case

1012
00:36:01,260 --> 00:36:03,839
ed25519

1013
00:36:03,839 --> 00:36:04,680
um

1014
00:36:04,680 --> 00:36:07,260
this magic value is being overwritten

1015
00:36:07,260 --> 00:36:08,940
and at the very end of the home

1016
00:36:08,940 --> 00:36:11,460
bootloader they again check if these

1017
00:36:11,460 --> 00:36:14,220
values or if these memory addresses have

1018
00:36:14,220 --> 00:36:17,160
the correct magic value otherwise

1019
00:36:17,160 --> 00:36:20,420
Something Fishy happened

1020
00:36:21,359 --> 00:36:23,579
no I had an issue because I didn't find

1021
00:36:23,579 --> 00:36:25,560
a vulnerability in the wrong bootloader

1022
00:36:25,560 --> 00:36:27,000
meaning that I would have to glitch the

1023
00:36:27,000 --> 00:36:28,680
wrong boot loader every single time I

1024
00:36:28,680 --> 00:36:30,420
reboot the user terminal

1025
00:36:30,420 --> 00:36:32,400
and this was annoying because once you

1026
00:36:32,400 --> 00:36:34,079
remove all the coupling capacitors from

1027
00:36:34,079 --> 00:36:36,480
the system it becomes so unstable that

1028
00:36:36,480 --> 00:36:38,820
it will not actually boot completely

1029
00:36:38,820 --> 00:36:40,320
so this means that you will have to

1030
00:36:40,320 --> 00:36:42,480
disable the coupling capacitors once

1031
00:36:42,480 --> 00:36:43,619
you're trying to glitch it and then

1032
00:36:43,619 --> 00:36:45,420
enable them later on

1033
00:36:45,420 --> 00:36:47,700
and this turned out to be not an easy

1034
00:36:47,700 --> 00:36:49,800
task it required a lot of manual

1035
00:36:49,800 --> 00:36:52,920
experiments so on shown on the left is a

1036
00:36:52,920 --> 00:36:56,040
manual board I just saw it by hand that

1037
00:36:56,040 --> 00:36:57,240
didn't work

1038
00:36:57,240 --> 00:36:58,800
on the right is the first photo

1039
00:36:58,800 --> 00:37:01,020
prototype that did work which is a

1040
00:37:01,020 --> 00:37:03,720
simple Enterprise PCB that you solder to

1041
00:37:03,720 --> 00:37:06,119
the Target and that contains two mosfets

1042
00:37:06,119 --> 00:37:08,579
to switch on capacitor Banks so I

1043
00:37:08,579 --> 00:37:09,720
experimented with a lot of different

1044
00:37:09,720 --> 00:37:12,300
types of mosfets doing high side

1045
00:37:12,300 --> 00:37:13,800
switching and low side switching

1046
00:37:13,800 --> 00:37:16,079
different gate voltages different mosfet

1047
00:37:16,079 --> 00:37:18,480
drive with different sizes of capacitors

1048
00:37:18,480 --> 00:37:20,099
and so on

1049
00:37:20,099 --> 00:37:22,260
but so what did end up working for me is

1050
00:37:22,260 --> 00:37:24,960
bigger capacitors so using bigger

1051
00:37:24,960 --> 00:37:27,540
capacitors actually helped make it

1052
00:37:27,540 --> 00:37:29,480
easier to get the desired effect

1053
00:37:29,480 --> 00:37:32,400
normally in a system like this you'd use

1054
00:37:32,400 --> 00:37:35,339
different capacity sizes because each of

1055
00:37:35,339 --> 00:37:36,720
them all of them have a different

1056
00:37:36,720 --> 00:37:39,359
frequency response and you try to yeah

1057
00:37:39,359 --> 00:37:41,640
have a wide coverage over the entire

1058
00:37:41,640 --> 00:37:44,339
frequency spectrum

1059
00:37:44,339 --> 00:37:46,740
so in this case 47 micro farad and 100

1060
00:37:46,740 --> 00:37:49,260
magnified capacities seemed to have the

1061
00:37:49,260 --> 00:37:51,540
most positive influence all of the 100

1062
00:37:51,540 --> 00:37:53,880
nanofarad and one microfarad capacities

1063
00:37:53,880 --> 00:37:55,260
that were spared around over the board

1064
00:37:55,260 --> 00:37:59,000
didn't seem to really help

1065
00:37:59,339 --> 00:38:01,140
so what I ended up using are two reverse

1066
00:38:01,140 --> 00:38:03,300
orientation and channel mosfets as high

1067
00:38:03,300 --> 00:38:04,800
side switches

1068
00:38:04,800 --> 00:38:06,599
some electrical engineers might start

1069
00:38:06,599 --> 00:38:09,180
swearing at me now but you can't argue

1070
00:38:09,180 --> 00:38:10,980
with the root shell

1071
00:38:10,980 --> 00:38:13,619
now the reason I ended up doing this is

1072
00:38:13,619 --> 00:38:15,660
n channel mosfets are usually used as

1073
00:38:15,660 --> 00:38:17,400
low side switches

1074
00:38:17,400 --> 00:38:20,940
but they have a way lower RDS on value

1075
00:38:20,940 --> 00:38:22,980
so I use them as high side switches

1076
00:38:22,980 --> 00:38:24,599
anyway and because we're only switching

1077
00:38:24,599 --> 00:38:27,420
one volt that's not much of an issue

1078
00:38:27,420 --> 00:38:29,700
having them in Reverse orientation gives

1079
00:38:29,700 --> 00:38:31,260
us the advantage that we can use the

1080
00:38:31,260 --> 00:38:33,359
body diode to keep the decoupling

1081
00:38:33,359 --> 00:38:36,119
capacitors semi-charged basically even

1082
00:38:36,119 --> 00:38:39,000
if the mosfets are off and then I also

1083
00:38:39,000 --> 00:38:41,400
ended up using a 12 volt mosfet drive to

1084
00:38:41,400 --> 00:38:44,579
switch these on and off

1085
00:38:44,579 --> 00:38:47,400
so now I had a full attack working I

1086
00:38:47,400 --> 00:38:49,020
could glitch the wrong bootloader I

1087
00:38:49,020 --> 00:38:50,540
could patch all of the consecutive

1088
00:38:50,540 --> 00:38:53,160
bootloader stages and so on and end up

1089
00:38:53,160 --> 00:38:54,599
in a root shell

1090
00:38:54,599 --> 00:38:56,339
so I had demonstrated the full attack in

1091
00:38:56,339 --> 00:38:58,380
the lab but you can imagine this setup

1092
00:38:58,380 --> 00:39:00,720
is really quite bulky I had a big

1093
00:39:00,720 --> 00:39:02,400
oscilloscope attached to it I had

1094
00:39:02,400 --> 00:39:04,380
multiple power supplies and Signal

1095
00:39:04,380 --> 00:39:06,359
generators attached to it and so on and

1096
00:39:06,359 --> 00:39:08,579
that's not very convenient on my roof

1097
00:39:08,579 --> 00:39:10,859
but either way I reported this to SpaceX

1098
00:39:10,859 --> 00:39:13,260
and they said oh that's very cool we can

1099
00:39:13,260 --> 00:39:15,480
send you a Ubi key with an SSH key on it

1100
00:39:15,480 --> 00:39:17,099
so you can log into your user terminal

1101
00:39:17,099 --> 00:39:18,420
so you don't have to go through this

1102
00:39:18,420 --> 00:39:20,960
effort again

1103
00:39:21,660 --> 00:39:24,359
I decided to not accept this offer

1104
00:39:24,359 --> 00:39:26,400
because I was already way too far down

1105
00:39:26,400 --> 00:39:28,079
the rabbit hole

1106
00:39:28,079 --> 00:39:30,180
so I decided I was going to make a

1107
00:39:30,180 --> 00:39:32,160
mobile setup or a mod chip in this case

1108
00:39:32,160 --> 00:39:35,099
and I started replacing my lap expensive

1109
00:39:35,099 --> 00:39:37,020
lab equipment with low cost of the Shelf

1110
00:39:37,020 --> 00:39:38,520
components

1111
00:39:38,520 --> 00:39:40,079
so what you see here is basically your

1112
00:39:40,079 --> 00:39:42,240
first prototype of the working mobile

1113
00:39:42,240 --> 00:39:44,579
setup you could say it uses a Raspberry

1114
00:39:44,579 --> 00:39:46,500
Pi Pico which is a five dollar

1115
00:39:46,500 --> 00:39:48,900
microcontroller board and in this case

1116
00:39:48,900 --> 00:39:51,000
it replaces the oscilloscope and allows

1117
00:39:51,000 --> 00:39:54,119
me to trigger on the uart signals this

1118
00:39:54,119 --> 00:39:55,440
works but as you can see it's still

1119
00:39:55,440 --> 00:39:57,119
pretty messy

1120
00:39:57,119 --> 00:39:58,980
so what I wanted to do was make a mod

1121
00:39:58,980 --> 00:40:00,420
chip that you can solder on the board

1122
00:40:00,420 --> 00:40:02,940
and then do the attack automatically in

1123
00:40:02,940 --> 00:40:03,960
system

1124
00:40:03,960 --> 00:40:05,700
so what I ended up doing is putting the

1125
00:40:05,700 --> 00:40:07,859
entire user terminal on the scanner as

1126
00:40:07,859 --> 00:40:09,300
you can see it's still way too big even

1127
00:40:09,300 --> 00:40:11,040
to fit under there

1128
00:40:11,040 --> 00:40:12,720
then you end up with a nice picture that

1129
00:40:12,720 --> 00:40:15,060
you can draw a board or outline on an

1130
00:40:15,060 --> 00:40:16,980
inkscape this outline you can load in

1131
00:40:16,980 --> 00:40:19,020
guycat and then you can start designing

1132
00:40:19,020 --> 00:40:21,000
your PCB

1133
00:40:21,000 --> 00:40:22,859
this is the finished product

1134
00:40:22,859 --> 00:40:25,020
you can also come and watch it up close

1135
00:40:25,020 --> 00:40:27,839
after the talk on the user terminal

1136
00:40:27,839 --> 00:40:30,480
so it has gas deleted holes that allow

1137
00:40:30,480 --> 00:40:32,640
you to mount the user the mod chip on

1138
00:40:32,640 --> 00:40:36,420
the PCB basically on existing footprints

1139
00:40:36,420 --> 00:40:39,720
and there are two types of mosfets two

1140
00:40:39,720 --> 00:40:41,700
were used to enable and disable the

1141
00:40:41,700 --> 00:40:44,400
coupling capacitor Banks and the second

1142
00:40:44,400 --> 00:40:47,460
one is to insert the actual glitch

1143
00:40:47,460 --> 00:40:49,079
then there's a two channel mosfet driver

1144
00:40:49,079 --> 00:40:51,300
to drive all of these mosfets and we

1145
00:40:51,300 --> 00:40:53,660
have the rp2040 microcontroller

1146
00:40:53,660 --> 00:40:57,420
overclocked to 250 megahertz to actually

1147
00:40:57,420 --> 00:41:00,180
generate all of the signals so I made

1148
00:41:00,180 --> 00:41:02,400
some code using the programmable i o

1149
00:41:02,400 --> 00:41:04,380
modules that allow us to trigger and

1150
00:41:04,380 --> 00:41:06,300
generate glitches

1151
00:41:06,300 --> 00:41:08,099
now one of the goals for this project is

1152
00:41:08,099 --> 00:41:10,500
that also other people can experiment

1153
00:41:10,500 --> 00:41:12,839
with their user terminal and try to

1154
00:41:12,839 --> 00:41:14,339
explore the network inside of this

1155
00:41:14,339 --> 00:41:16,619
entire system because as you've probably

1156
00:41:16,619 --> 00:41:18,240
figured out by now I'm not really much

1157
00:41:18,240 --> 00:41:21,599
of a of a networking expert

1158
00:41:21,599 --> 00:41:23,160
um so because of that I made the design

1159
00:41:23,160 --> 00:41:25,200
open source it's available on GitHub so

1160
00:41:25,200 --> 00:41:26,940
you can download the girl with get a PCB

1161
00:41:26,940 --> 00:41:29,099
produced go through the effort of

1162
00:41:29,099 --> 00:41:30,540
actually installing it and getting it

1163
00:41:30,540 --> 00:41:32,520
working but at that point you can have a

1164
00:41:32,520 --> 00:41:34,079
root on your user terminal and start

1165
00:41:34,079 --> 00:41:37,460
interacting with the network side

1166
00:41:37,619 --> 00:41:39,180
this is a picture of the mod chip

1167
00:41:39,180 --> 00:41:40,920
installed on the board so there's still

1168
00:41:40,920 --> 00:41:42,839
a few waves you have to solder one wire

1169
00:41:42,839 --> 00:41:46,140
is to an enable pin of the core voltage

1170
00:41:46,140 --> 00:41:48,240
regulator and this allows you to power

1171
00:41:48,240 --> 00:41:50,579
cycle the user terminal I'm also

1172
00:41:50,579 --> 00:41:53,760
reaching 12 volt from board to yeah for

1173
00:41:53,760 --> 00:41:55,859
the mosfet driver and then it's one volt

1174
00:41:55,859 --> 00:41:59,000
8 for a level shifter

1175
00:41:59,160 --> 00:42:01,980
then we got this mounting system made so

1176
00:42:01,980 --> 00:42:04,500
that we could um put the user thermal

1177
00:42:04,500 --> 00:42:06,480
outside of the window overlap and that

1178
00:42:06,480 --> 00:42:07,740
was a lot more convenient than having to

1179
00:42:07,740 --> 00:42:09,119
go up to the roof every time something

1180
00:42:09,119 --> 00:42:10,440
broke

1181
00:42:10,440 --> 00:42:13,079
um and in this way we had a working

1182
00:42:13,079 --> 00:42:14,820
internet connections we were connected

1183
00:42:14,820 --> 00:42:17,160
to the styling system on a hooded user

1184
00:42:17,160 --> 00:42:18,780
to everyone

1185
00:42:18,780 --> 00:42:20,700
and at this time I made a mistake

1186
00:42:20,700 --> 00:42:22,920
because I was reading Reddit

1187
00:42:22,920 --> 00:42:25,020
and yeah never trusted

1188
00:42:25,020 --> 00:42:27,180
and someone posted that a lot of the

1189
00:42:27,180 --> 00:42:28,560
recent firmware updates made the

1190
00:42:28,560 --> 00:42:30,839
connections a lot more stable and as you

1191
00:42:30,839 --> 00:42:32,700
can see here I have the user terminal

1192
00:42:32,700 --> 00:42:34,920
just flat pointing up to the sky so

1193
00:42:34,920 --> 00:42:36,960
there's no even rough alignment towards

1194
00:42:36,960 --> 00:42:38,700
the satellite so my connection wasn't

1195
00:42:38,700 --> 00:42:39,900
really stable

1196
00:42:39,900 --> 00:42:41,820
so I decided okay let's do a firmware

1197
00:42:41,820 --> 00:42:43,920
update I had

1198
00:42:43,920 --> 00:42:46,200
a book in the wrong bootloader I was

1199
00:42:46,200 --> 00:42:48,000
convinced there was no way SpaceX could

1200
00:42:48,000 --> 00:42:49,980
ever fix this without replacing the hard

1201
00:42:49,980 --> 00:42:50,880
drive

1202
00:42:50,880 --> 00:42:53,099
but as it turned out SpaceX still had

1203
00:42:53,099 --> 00:42:55,260
one e-fuse that they could blow

1204
00:42:55,260 --> 00:42:57,540
and blowing this e-fuse make sure that

1205
00:42:57,540 --> 00:42:59,040
the user thermal would never output

1206
00:42:59,040 --> 00:43:02,040
anything over the uart and I was using

1207
00:43:02,040 --> 00:43:04,140
uart to trigger on this was my timing

1208
00:43:04,140 --> 00:43:06,660
reference so as you can can imagine this

1209
00:43:06,660 --> 00:43:08,099
was very annoying

1210
00:43:08,099 --> 00:43:10,140
in hindsight I should have known this

1211
00:43:10,140 --> 00:43:12,060
beforehand because I had emulated the

1212
00:43:12,060 --> 00:43:14,160
rhombus and I had looked at what all of

1213
00:43:14,160 --> 00:43:16,380
the fuses were used for and this fuse I

1214
00:43:16,380 --> 00:43:18,900
had marked as unknown

1215
00:43:18,900 --> 00:43:20,760
but this means that we have to improvise

1216
00:43:20,760 --> 00:43:23,280
adapt and overcome

1217
00:43:23,280 --> 00:43:24,780
luckily I already had a lot of

1218
00:43:24,780 --> 00:43:26,400
information from doing the attack before

1219
00:43:26,400 --> 00:43:28,800
so I had logic analyzer captures of all

1220
00:43:28,800 --> 00:43:30,900
of the interesting signals and I could

1221
00:43:30,900 --> 00:43:32,760
make New Logic analyzer captures after

1222
00:43:32,760 --> 00:43:35,099
the fuse had been blown then I can start

1223
00:43:35,099 --> 00:43:37,440
comparing these and then of course the

1224
00:43:37,440 --> 00:43:39,240
side Channel information we had was very

1225
00:43:39,240 --> 00:43:41,400
useful all I really have to do is make

1226
00:43:41,400 --> 00:43:44,460
new captchas find the same looking em

1227
00:43:44,460 --> 00:43:46,260
side Channel pattern and then I again

1228
00:43:46,260 --> 00:43:48,359
had my timing reference

1229
00:43:48,359 --> 00:43:50,400
and instead of using the uarks as a

1230
00:43:50,400 --> 00:43:52,200
timing referencer trigger signal I now

1231
00:43:52,200 --> 00:43:55,500
use the data zero line of the emmc so

1232
00:43:55,500 --> 00:43:57,119
basically when the certificate is being

1233
00:43:57,119 --> 00:43:59,400
shifted from the emmc to the system on

1234
00:43:59,400 --> 00:44:01,560
chip I have a timing reference from

1235
00:44:01,560 --> 00:44:04,500
there I wait and insert a glitch

1236
00:44:04,500 --> 00:44:07,260
so after a day or two I was back in the

1237
00:44:07,260 --> 00:44:09,900
system luckily I could reuse my mod chip

1238
00:44:09,900 --> 00:44:12,540
I just had to solve a botch live

1239
00:44:12,540 --> 00:44:14,520
basically to it that now connects to the

1240
00:44:14,520 --> 00:44:17,220
data zero line I had to change some

1241
00:44:17,220 --> 00:44:19,319
parameters in a python script and then

1242
00:44:19,319 --> 00:44:21,660
we work back in the alternative view of

1243
00:44:21,660 --> 00:44:23,099
course would have been to make a new PCB

1244
00:44:23,099 --> 00:44:27,020
design but that seemed a bit cumbersome

1245
00:44:27,119 --> 00:44:28,560
now at this point you can start

1246
00:44:28,560 --> 00:44:30,060
exploring the networking side of things

1247
00:44:30,060 --> 00:44:32,160
this is where stuff should get really

1248
00:44:32,160 --> 00:44:33,780
interesting but it's not really getting

1249
00:44:33,780 --> 00:44:35,880
easier here because all of the

1250
00:44:35,880 --> 00:44:37,859
communication with back-end servers is

1251
00:44:37,859 --> 00:44:40,619
using mutually authenticated TLS right

1252
00:44:40,619 --> 00:44:42,180
the client-side authentication is

1253
00:44:42,180 --> 00:44:45,660
handled by the SD safe secure element

1254
00:44:45,660 --> 00:44:47,579
meaning that none of the standard tools

1255
00:44:47,579 --> 00:44:50,099
have support for this so you cannot

1256
00:44:50,099 --> 00:44:51,780
simply proxy the traffic to burp or

1257
00:44:51,780 --> 00:44:54,540
something like that that will not work

1258
00:44:54,540 --> 00:44:56,940
I ended up adding SD safe support in the

1259
00:44:56,940 --> 00:44:59,160
TLs light and gdtls implementation this

1260
00:44:59,160 --> 00:45:01,500
is a pure python implementation so I

1261
00:45:01,500 --> 00:45:03,540
have python running on the user terminal

1262
00:45:03,540 --> 00:45:05,339
and I made a skipped that allows me to

1263
00:45:05,339 --> 00:45:06,900
download the latest firmware image

1264
00:45:06,900 --> 00:45:09,119
whenever I want so now if someone posts

1265
00:45:09,119 --> 00:45:10,560
on Reddit that they have a new firmware

1266
00:45:10,560 --> 00:45:12,839
update I can first download it and look

1267
00:45:12,839 --> 00:45:14,579
at it to see if I really want to apply

1268
00:45:14,579 --> 00:45:16,260
it or not

1269
00:45:16,260 --> 00:45:18,060
in this way I've also started making my

1270
00:45:18,060 --> 00:45:19,980
own update archive which is convenient

1271
00:45:19,980 --> 00:45:21,720
if you want to compare how things are

1272
00:45:21,720 --> 00:45:24,560
changing over time

1273
00:45:24,780 --> 00:45:26,160
now what I really should have done

1274
00:45:26,160 --> 00:45:28,440
instead of using TLS light NG I should

1275
00:45:28,440 --> 00:45:30,119
have probably implemented SD safe

1276
00:45:30,119 --> 00:45:33,060
support in boring SSL because most of

1277
00:45:33,060 --> 00:45:34,700
the communication with back-end services

1278
00:45:34,700 --> 00:45:37,260
overgrpc and I currently don't have an

1279
00:45:37,260 --> 00:45:40,500
easy way to integrate all of that

1280
00:45:40,500 --> 00:45:42,420
all of the back-end communication so far

1281
00:45:42,420 --> 00:45:45,119
I've seen us over IPv6 meaning it's also

1282
00:45:45,119 --> 00:45:46,680
not really easy to scan the entire

1283
00:45:46,680 --> 00:45:49,560
network but here's one endpoint you can

1284
00:45:49,560 --> 00:45:51,480
find once you get hood on your user

1285
00:45:51,480 --> 00:45:53,400
terminal and I've also listed a few

1286
00:45:53,400 --> 00:45:56,700
ports that you can try and play with

1287
00:45:56,700 --> 00:45:59,460
so what's next you can all go home and

1288
00:45:59,460 --> 00:46:01,319
make your own watch app open up your

1289
00:46:01,319 --> 00:46:03,660
users terminal install it get root and

1290
00:46:03,660 --> 00:46:04,680
then start playing with the network

1291
00:46:04,680 --> 00:46:06,920
infrastructure

1292
00:46:06,920 --> 00:46:09,540
you can also interact with a digital

1293
00:46:09,540 --> 00:46:12,720
beam forums so these special chips that

1294
00:46:12,720 --> 00:46:15,060
are on this user terminal this is I

1295
00:46:15,060 --> 00:46:17,040
believe one of the first consumer gate

1296
00:46:17,040 --> 00:46:19,380
electronics that actually has this sort

1297
00:46:19,380 --> 00:46:22,980
of military grade you could say RF

1298
00:46:22,980 --> 00:46:25,079
Equipment in there so I know a lot of

1299
00:46:25,079 --> 00:46:26,579
people are interested in playing with

1300
00:46:26,579 --> 00:46:27,359
that

1301
00:46:27,359 --> 00:46:29,339
you might even be able to repurpose your

1302
00:46:29,339 --> 00:46:30,720
user terminal maybe you can type

1303
00:46:30,720 --> 00:46:32,339
building a point-to-point link with two

1304
00:46:32,339 --> 00:46:33,960
user terminals or something like that I

1305
00:46:33,960 --> 00:46:35,220
think there's a lot of fun to be had

1306
00:46:35,220 --> 00:46:37,520
still

1307
00:46:37,680 --> 00:46:40,560
so to conclude we can bypass secure boot

1308
00:46:40,560 --> 00:46:42,060
using voltage fault injection in the

1309
00:46:42,060 --> 00:46:44,460
wrong bootloader with it as a quad-core

1310
00:46:44,460 --> 00:46:46,980
cortex a53 processor and a completely

1311
00:46:46,980 --> 00:46:49,260
Black Box scenario we didn't have any

1312
00:46:49,260 --> 00:46:53,460
documentations or open development kits

1313
00:46:53,460 --> 00:46:55,440
we had to figure out a way to enable and

1314
00:46:55,440 --> 00:46:57,660
disable the coupling capacitors to be

1315
00:46:57,660 --> 00:46:59,880
able to glitch their own bootloader and

1316
00:46:59,880 --> 00:47:02,880
boot the entire system fully

1317
00:47:02,880 --> 00:47:04,440
and then of course this fault injection

1318
00:47:04,440 --> 00:47:06,000
counter measures that were implemented

1319
00:47:06,000 --> 00:47:07,740
are only as good as a fault model that

1320
00:47:07,740 --> 00:47:09,660
was used

1321
00:47:09,660 --> 00:47:11,280
I think this is a very well designed

1322
00:47:11,280 --> 00:47:12,420
product at least from a security

1323
00:47:12,420 --> 00:47:13,619
standpoint

1324
00:47:13,619 --> 00:47:16,020
um I didn't find any obvious or at least

1325
00:47:16,020 --> 00:47:18,119
to me obvious low hanging fruit and I

1326
00:47:18,119 --> 00:47:19,319
think this is a device that a lot of

1327
00:47:19,319 --> 00:47:24,619
device manufacturers can learn from

1328
00:47:24,839 --> 00:47:26,640
in contrast yeah so like I said in

1329
00:47:26,640 --> 00:47:28,260
contrast to many other devices getting a

1330
00:47:28,260 --> 00:47:29,760
root shell here was already challenging

1331
00:47:29,760 --> 00:47:31,560
and then once you get the root shell it

1332
00:47:31,560 --> 00:47:33,060
doesn't really become easier from there

1333
00:47:33,060 --> 00:47:34,980
so in the past when I've looked at other

1334
00:47:34,980 --> 00:47:37,680
iot organ batter devices oftentimes it

1335
00:47:37,680 --> 00:47:39,180
takes you an hour to get a good shell

1336
00:47:39,180 --> 00:47:40,859
and then once you have that root shell

1337
00:47:40,859 --> 00:47:44,060
everything starts crumbling

1338
00:47:44,400 --> 00:47:46,380
as I mentioned earlier I've reported all

1339
00:47:46,380 --> 00:47:48,300
of these vulnerabilities to SpaceX and

1340
00:47:48,300 --> 00:47:50,099
they have a big Bounty program they're

1341
00:47:50,099 --> 00:47:52,440
very responsive and easy to reach and as

1342
00:47:52,440 --> 00:47:54,900
a response to this research they also

1343
00:47:54,900 --> 00:47:56,940
uploaded the six page PDF document

1344
00:47:56,940 --> 00:47:58,740
explaining how they try to secure their

1345
00:47:58,740 --> 00:48:02,419
entire system and so on

1346
00:48:02,460 --> 00:48:03,480
now

1347
00:48:03,480 --> 00:48:05,220
some people ask me how can they actually

1348
00:48:05,220 --> 00:48:07,319
stop you from doing this attack so I

1349
00:48:07,319 --> 00:48:09,480
made a slide that says how to annoy me

1350
00:48:09,480 --> 00:48:11,520
if they had disabled all of the uart

1351
00:48:11,520 --> 00:48:13,020
output from the start so if they had

1352
00:48:13,020 --> 00:48:14,640
blown that fuse from the beginning then

1353
00:48:14,640 --> 00:48:16,400
I would have a lot less information

1354
00:48:16,400 --> 00:48:18,780
I might have not initially seen that

1355
00:48:18,780 --> 00:48:21,780
it's using posted firmware for example

1356
00:48:21,780 --> 00:48:23,940
we also have encrypted all of the emmc

1357
00:48:23,940 --> 00:48:25,920
contents then again I would have a lot

1358
00:48:25,920 --> 00:48:27,540
less information I wouldn't have been

1359
00:48:27,540 --> 00:48:29,280
able to look at the firmware and I

1360
00:48:29,280 --> 00:48:30,839
wouldn't have known that they're using a

1361
00:48:30,839 --> 00:48:33,000
distant firmware implementation

1362
00:48:33,000 --> 00:48:34,800
you can also try to react when a fault

1363
00:48:34,800 --> 00:48:37,020
is detected they clearly have counter

1364
00:48:37,020 --> 00:48:38,760
meshes that can detect some types of

1365
00:48:38,760 --> 00:48:41,040
faults so maybe they can try to use

1366
00:48:41,040 --> 00:48:45,000
these to for example blow a fuse or

1367
00:48:45,000 --> 00:48:47,099
increment a monotonic fuse counter then

1368
00:48:47,099 --> 00:48:49,560
if the system does boot fully it can

1369
00:48:49,560 --> 00:48:51,420
check if this fuse was blown or not and

1370
00:48:51,420 --> 00:48:53,579
then maybe send the report to the back

1371
00:48:53,579 --> 00:48:55,680
end and they clearly have all of the

1372
00:48:55,680 --> 00:48:57,960
monitoring capabilities for this

1373
00:48:57,960 --> 00:48:59,700
implemented

1374
00:48:59,700 --> 00:49:01,140
another thing you can do is insert

1375
00:49:01,140 --> 00:49:04,440
random delays that screws up my timing

1376
00:49:04,440 --> 00:49:06,660
so I have a timing reference if there's

1377
00:49:06,660 --> 00:49:08,160
a random delay in between when the

1378
00:49:08,160 --> 00:49:10,140
actual operation is happening then the

1379
00:49:10,140 --> 00:49:11,700
also of the attack work can become a lot

1380
00:49:11,700 --> 00:49:12,720
smaller

1381
00:49:12,720 --> 00:49:14,339
another technique is called lockstep

1382
00:49:14,339 --> 00:49:16,079
this is where you run the same code on

1383
00:49:16,079 --> 00:49:18,180
two processes at the same time and you

1384
00:49:18,180 --> 00:49:20,520
try to compare the outcome of these two

1385
00:49:20,520 --> 00:49:22,680
processors

1386
00:49:22,680 --> 00:49:24,839
now none of these things are foolproof

1387
00:49:24,839 --> 00:49:26,579
and with a lot of effort they can

1388
00:49:26,579 --> 00:49:28,920
probably still be bypassed but you'll be

1389
00:49:28,920 --> 00:49:30,300
reaching a point where it might be

1390
00:49:30,300 --> 00:49:32,280
frustrating enough for some attackers

1391
00:49:32,280 --> 00:49:34,619
and probably also me to just pick a

1392
00:49:34,619 --> 00:49:37,440
different Target and move on

1393
00:49:37,440 --> 00:49:40,200
now before I really end the stock

1394
00:49:40,200 --> 00:49:41,940
um I'm going to attempt to do a live

1395
00:49:41,940 --> 00:49:43,920
demo

1396
00:49:43,920 --> 00:49:46,619
this is tricky for some reasons as you

1397
00:49:46,619 --> 00:49:48,859
can imagine

1398
00:49:48,960 --> 00:49:51,079
um

1399
00:49:51,839 --> 00:49:54,119
so off we go so on the left we have a

1400
00:49:54,119 --> 00:49:55,920
control script it's a simple python skip

1401
00:49:55,920 --> 00:50:00,240
that talks to the mod chip on the board

1402
00:50:00,240 --> 00:50:02,099
it's basically sending commands it's

1403
00:50:02,099 --> 00:50:03,540
orchestrating everything it's setting

1404
00:50:03,540 --> 00:50:05,460
glitch parameters it's turning off the

1405
00:50:05,460 --> 00:50:08,040
user terminal on again arming the glitch

1406
00:50:08,040 --> 00:50:10,440
and so on as you can see it takes about

1407
00:50:10,440 --> 00:50:12,420
one second for each attempt now instead

1408
00:50:12,420 --> 00:50:15,119
of the 12 that we had before

1409
00:50:15,119 --> 00:50:16,980
the annoying thing about a glitching

1410
00:50:16,980 --> 00:50:18,359
demo is that it's very difficult to

1411
00:50:18,359 --> 00:50:20,760
predict how long it's going to take

1412
00:50:20,760 --> 00:50:22,859
it has never taken any longer than five

1413
00:50:22,859 --> 00:50:23,839
minutes

1414
00:50:23,839 --> 00:50:26,280
and sometimes it only takes 10 seconds

1415
00:50:26,280 --> 00:50:29,280
so that's yeah very annoying

1416
00:50:29,280 --> 00:50:31,079
on the right you can see the serial

1417
00:50:31,079 --> 00:50:33,300
output from the user terminal and this

1418
00:50:33,300 --> 00:50:35,339
user terminal has the uart fuse blown

1419
00:50:35,339 --> 00:50:37,079
and that's why you don't see any output

1420
00:50:37,079 --> 00:50:39,780
now so previously before the e-fuse was

1421
00:50:39,780 --> 00:50:41,520
blown you would see a lot of scrolling

1422
00:50:41,520 --> 00:50:43,079
text and user term we basically

1423
00:50:43,079 --> 00:50:45,119
repeatedly say signature verification

1424
00:50:45,119 --> 00:50:47,220
ever

1425
00:50:47,220 --> 00:50:50,400
now while we wait for this

1426
00:50:50,400 --> 00:50:52,440
attempt and hopefully we get lucky soon

1427
00:50:52,440 --> 00:50:54,960
maybe you can already start answering a

1428
00:50:54,960 --> 00:50:56,880
question

1429
00:50:56,880 --> 00:51:00,859
so if anyone has a question then uh yeah

1430
00:51:03,059 --> 00:51:05,220
yeah let's start by giving a round of

1431
00:51:05,220 --> 00:51:05,920
applause

1432
00:51:05,920 --> 00:51:14,460
[Applause]

1433
00:51:14,460 --> 00:51:16,319
and meanwhile who wants the first

1434
00:51:16,319 --> 00:51:19,700
question who has a question

1435
00:51:21,540 --> 00:51:24,559
who is smart enough to ask a question

1436
00:51:24,559 --> 00:51:27,240
we got partially lucky with the demo I

1437
00:51:27,240 --> 00:51:29,520
think we'll have to try again

1438
00:51:29,520 --> 00:51:32,339
so what's happened here is switching on

1439
00:51:32,339 --> 00:51:33,839
the coupling capacitors is a really

1440
00:51:33,839 --> 00:51:36,240
tricky process and here it sort of

1441
00:51:36,240 --> 00:51:38,520
worked so the glitch worked we got into

1442
00:51:38,520 --> 00:51:40,260
the second stage bootloader it started

1443
00:51:40,260 --> 00:51:42,839
executing with them and trying to

1444
00:51:42,839 --> 00:51:45,720
um well run the next stage basically the

1445
00:51:45,720 --> 00:51:48,240
entire system failed hopefully we get

1446
00:51:48,240 --> 00:51:50,819
lucky again quick enough

1447
00:51:50,819 --> 00:51:52,920
I did the same demo at blackhead there

1448
00:51:52,920 --> 00:51:56,040
took um I think 100 seconds

1449
00:51:56,040 --> 00:51:59,160
which was quite frightening on stage

1450
00:51:59,160 --> 00:52:01,619
at Defcon the demo actually failed um so

1451
00:52:01,619 --> 00:52:04,460
let's let's see what happens

1452
00:52:06,480 --> 00:52:08,819
what

1453
00:52:08,819 --> 00:52:10,260
yeah of course the ultimate goal would

1454
00:52:10,260 --> 00:52:11,880
be to hack a satellite

1455
00:52:11,880 --> 00:52:12,839
um

1456
00:52:12,839 --> 00:52:14,520
but I'm not sure I'll find the time for

1457
00:52:14,520 --> 00:52:18,079
that I'm not sure how realistic it is

1458
00:52:18,119 --> 00:52:20,280
in the book Bounty program they're open

1459
00:52:20,280 --> 00:52:22,619
to it but they say that if you believe

1460
00:52:22,619 --> 00:52:24,180
to have identified the vulnerability

1461
00:52:24,180 --> 00:52:26,520
that might affect the satellite they ask

1462
00:52:26,520 --> 00:52:28,859
you to import it before actually trying

1463
00:52:28,859 --> 00:52:30,780
something so that they can can

1464
00:52:30,780 --> 00:52:33,059
coordinate everything but yeah that

1465
00:52:33,059 --> 00:52:34,559
would of course be the the ultimate end

1466
00:52:34,559 --> 00:52:36,180
goal and that's also what I hope other

1467
00:52:36,180 --> 00:52:38,280
people will start looking at now I don't

1468
00:52:38,280 --> 00:52:40,559
know much about networking stuff so I

1469
00:52:40,559 --> 00:52:42,000
hope in this way other people can can

1470
00:52:42,000 --> 00:52:45,200
look at the networking sites

1471
00:52:46,619 --> 00:52:49,640
any questions

1472
00:52:53,520 --> 00:52:56,460
thank you for killing the time

1473
00:52:56,460 --> 00:52:58,260
did you try to glitch the bootloader as

1474
00:52:58,260 --> 00:53:00,540
well to get into u-boot or

1475
00:53:00,540 --> 00:53:02,520
um so yeah by doing

1476
00:53:02,520 --> 00:53:04,260
so the first attack was at the very end

1477
00:53:04,260 --> 00:53:06,000
of the boot cycle and of course you

1478
00:53:06,000 --> 00:53:08,760
could move up step by step towards the

1479
00:53:08,760 --> 00:53:10,380
first stage

1480
00:53:10,380 --> 00:53:12,839
I did consider doing that but it sort of

1481
00:53:12,839 --> 00:53:14,700
has the same issue as finding a software

1482
00:53:14,700 --> 00:53:16,920
vulnerability like once you find it and

1483
00:53:16,920 --> 00:53:19,440
you report it SpaceX is going to fix it

1484
00:53:19,440 --> 00:53:21,900
and you will lose access

1485
00:53:21,900 --> 00:53:23,280
um so that's why I immediately went for

1486
00:53:23,280 --> 00:53:25,079
the first home bootload because I know I

1487
00:53:25,079 --> 00:53:26,819
they cannot fix this without replacing

1488
00:53:26,819 --> 00:53:29,058
the hardware

1489
00:53:33,119 --> 00:53:34,980
or no actually

1490
00:53:34,980 --> 00:53:36,660
um

1491
00:53:36,660 --> 00:53:38,520
I think at that point if you have you

1492
00:53:38,520 --> 00:53:40,859
would access and it and it loads the fit

1493
00:53:40,859 --> 00:53:42,359
then you can still change the kernel

1494
00:53:42,359 --> 00:53:44,640
command line arguments probably and

1495
00:53:44,640 --> 00:53:46,619
just put in single user mode and then

1496
00:53:46,619 --> 00:53:48,000
end up in a root shell I think that

1497
00:53:48,000 --> 00:53:49,440
would be possible yeah

1498
00:53:49,440 --> 00:53:51,720
so now here we have fully booted user

1499
00:53:51,720 --> 00:53:53,700
terminal and we can log in with the

1500
00:53:53,700 --> 00:53:56,220
username root and a password Falcon and

1501
00:53:56,220 --> 00:53:57,480
we are root

1502
00:53:57,480 --> 00:54:01,260
and then you can do for example log the

1503
00:54:01,260 --> 00:54:02,579
messages that are being printed during

1504
00:54:02,579 --> 00:54:04,400
boot there's a lot of information here

1505
00:54:04,400 --> 00:54:06,780
some of the stuff is interesting so for

1506
00:54:06,780 --> 00:54:09,300
example one thing that they did change

1507
00:54:09,300 --> 00:54:10,800
in the recent firmware updates is that

1508
00:54:10,800 --> 00:54:13,500
the entire surface of the of the phase

1509
00:54:13,500 --> 00:54:14,880
delay has been split into multiple

1510
00:54:14,880 --> 00:54:17,700
antennas so one antenna beam can follow

1511
00:54:17,700 --> 00:54:19,920
a satellite that is flying over well the

1512
00:54:19,920 --> 00:54:21,359
next one is already steering to the next

1513
00:54:21,359 --> 00:54:23,339
satellite and these locks for example

1514
00:54:23,339 --> 00:54:25,079
print which exact satellite you're

1515
00:54:25,079 --> 00:54:27,960
connecting to and if you look online at

1516
00:54:27,960 --> 00:54:29,400
Satellite tekkers you can actually see

1517
00:54:29,400 --> 00:54:31,079
the satellite that's flying over at this

1518
00:54:31,079 --> 00:54:33,240
point that that's the satellite your

1519
00:54:33,240 --> 00:54:35,579
user thermal is connecting to

1520
00:54:35,579 --> 00:54:37,859
so that was it for the demo um if

1521
00:54:37,859 --> 00:54:40,819
there's more questions than

1522
00:54:45,000 --> 00:54:46,859
no it's not a mitigation and in most

1523
00:54:46,859 --> 00:54:48,420
cases that that password doesn't really

1524
00:54:48,420 --> 00:54:50,520
matter because as long as it's not

1525
00:54:50,520 --> 00:54:52,619
development Hardware it won't accept any

1526
00:54:52,619 --> 00:54:56,240
password anyway yeah

1527
00:55:01,140 --> 00:55:04,500
if they're not any more questions

1528
00:55:04,500 --> 00:55:06,420
last

1529
00:55:06,420 --> 00:55:09,380
okay one more

1530
00:55:10,319 --> 00:55:12,420
in one of the photographs you showed a

1531
00:55:12,420 --> 00:55:15,200
probe attached to the CPU cores

1532
00:55:15,200 --> 00:55:17,599
what was the purpose of that

1533
00:55:17,599 --> 00:55:20,520
so that is an um

1534
00:55:20,520 --> 00:55:23,099
it's basically an antenna that picks up

1535
00:55:23,099 --> 00:55:26,099
the eminations generated by the chip

1536
00:55:26,099 --> 00:55:29,220
pulse operating and the other end of

1537
00:55:29,220 --> 00:55:31,319
this or the cable of this antenna is

1538
00:55:31,319 --> 00:55:33,420
connected to an oscilloscope and allows

1539
00:55:33,420 --> 00:55:35,760
us to create these the blue capture

1540
00:55:35,760 --> 00:55:37,980
basically shown here on the slide that's

1541
00:55:37,980 --> 00:55:39,839
Cyclone information and in this case it

1542
00:55:39,839 --> 00:55:42,720
was very useful to determine

1543
00:55:42,720 --> 00:55:44,339
like you can you can see here at the

1544
00:55:44,339 --> 00:55:45,720
very beginning of the slide so you have

1545
00:55:45,720 --> 00:55:47,760
to work the left that it looks like a

1546
00:55:47,760 --> 00:55:49,740
CPU is not doing that much and the

1547
00:55:49,740 --> 00:55:50,819
reason it's not doing that much is

1548
00:55:50,819 --> 00:55:52,680
because it's sending out bytes to the

1549
00:55:52,680 --> 00:55:54,599
uart peripheral and I'm waiting for that

1550
00:55:54,599 --> 00:55:56,220
byte to be sent out and then sending

1551
00:55:56,220 --> 00:55:59,400
next byte and so this waiting has a yeah

1552
00:55:59,400 --> 00:56:01,859
a different pattern to it than actual

1553
00:56:01,859 --> 00:56:03,900
computations and so you can also see

1554
00:56:03,900 --> 00:56:06,000
here that while the last byte is being

1555
00:56:06,000 --> 00:56:08,460
sent out it's already starting to

1556
00:56:08,460 --> 00:56:09,780
compute things

1557
00:56:09,780 --> 00:56:11,700
and in this case we wanted to glitch at

1558
00:56:11,700 --> 00:56:12,900
the very start of the signature

1559
00:56:12,900 --> 00:56:15,240
verification to skip it entirely

1560
00:56:15,240 --> 00:56:18,300
and this em site Channel allows us to

1561
00:56:18,300 --> 00:56:19,800
determine exactly where that beginning

1562
00:56:19,800 --> 00:56:22,619
is because if you were to base your

1563
00:56:22,619 --> 00:56:25,020
guess on this uart output then maybe you

1564
00:56:25,020 --> 00:56:26,460
would have started glitching at the

1565
00:56:26,460 --> 00:56:29,099
headline instead of the black one

1566
00:56:29,099 --> 00:56:32,780
that's the purpose of this inteller

1567
00:56:34,740 --> 00:56:36,540
if there are more questions now at the

1568
00:56:36,540 --> 00:56:38,779
time

1569
00:56:38,880 --> 00:56:41,599
there's a question

1570
00:56:48,599 --> 00:56:51,540
thank you very much for the presentation

1571
00:56:51,540 --> 00:56:53,579
um it's not a question actually uh so

1572
00:56:53,579 --> 00:56:57,000
you you hacked the Tesla and no Starling

1573
00:56:57,000 --> 00:56:59,760
the next step neuralink or

1574
00:56:59,760 --> 00:57:01,680
maybe if they want to finish it then uh

1575
00:57:01,680 --> 00:57:05,620
yeah who knows thank you

1576
00:57:05,620 --> 00:57:09,500
[Applause]

