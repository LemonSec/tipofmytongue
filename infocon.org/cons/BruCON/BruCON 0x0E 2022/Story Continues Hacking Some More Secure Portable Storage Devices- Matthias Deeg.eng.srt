1
00:00:02,460 --> 00:00:04,980
good afternoon everyone my name is

2
00:00:04,980 --> 00:00:07,140
Matthias in the next couple of minutes I

3
00:00:07,140 --> 00:00:09,720
want to talk about the security of

4
00:00:09,720 --> 00:00:12,300
portable storage devices and how I was

5
00:00:12,300 --> 00:00:14,880
able to hack some of them

6
00:00:14,880 --> 00:00:15,900
yeah

7
00:00:15,900 --> 00:00:18,180
I work as an I.T security consultant

8
00:00:18,180 --> 00:00:19,160
since

9
00:00:19,160 --> 00:00:22,140
2007 and sometimes have a look at

10
00:00:22,140 --> 00:00:24,840
devices like this actually concerning

11
00:00:24,840 --> 00:00:28,260
this research it was having a blast from

12
00:00:28,260 --> 00:00:30,119
the past because I did similar things

13
00:00:30,119 --> 00:00:33,780
back in 2009 actually and already also

14
00:00:33,780 --> 00:00:36,120
published some security boundaries back

15
00:00:36,120 --> 00:00:39,600
then in yeah USB flash drives made by

16
00:00:39,600 --> 00:00:42,840
Kingston Riverton and also SanDisk I

17
00:00:42,840 --> 00:00:45,719
also gave a yeah small lightning torque

18
00:00:45,719 --> 00:00:47,879
I think it was four minutes also back in

19
00:00:47,879 --> 00:00:50,460
2009 at the kios communication Congress

20
00:00:50,460 --> 00:00:52,620
about actually the same topic but

21
00:00:52,620 --> 00:00:56,520
different products yeah and two to make

22
00:00:56,520 --> 00:01:00,539
it through in 2011 I also had some other

23
00:01:00,539 --> 00:01:03,120
secure crypto USB flash drives so

24
00:01:03,120 --> 00:01:04,440
there's quite some history history

25
00:01:04,440 --> 00:01:07,439
between me and secure portable storage

26
00:01:07,439 --> 00:01:10,979
devices in USB format

27
00:01:10,979 --> 00:01:13,200
so the agenda of this talk will be as

28
00:01:13,200 --> 00:01:15,840
follows at first I want to give a basic

29
00:01:15,840 --> 00:01:17,640
overview a short introduction about the

30
00:01:17,640 --> 00:01:20,220
use technology of my research project I

31
00:01:20,220 --> 00:01:23,100
want to shortly present the research of

32
00:01:23,100 --> 00:01:26,880
other researchers which my researchers

33
00:01:26,880 --> 00:01:30,119
are of course based upon

34
00:01:30,119 --> 00:01:31,439
then I want to talk about the text

35
00:01:31,439 --> 00:01:32,700
service and the text scenarios

36
00:01:32,700 --> 00:01:34,619
concerning this kind of devices so

37
00:01:34,619 --> 00:01:36,299
portable storage devices it's rather

38
00:01:36,299 --> 00:01:38,520
easy then I want to talk about my

39
00:01:38,520 --> 00:01:41,100
research my findings of course the found

40
00:01:41,100 --> 00:01:44,820
security issues I have also prepared to

41
00:01:44,820 --> 00:01:48,320
live demo attacks we'll see if they work

42
00:01:48,320 --> 00:01:51,420
and yeah afterwards some conclusions and

43
00:01:51,420 --> 00:01:53,880
recommendations and if there is some

44
00:01:53,880 --> 00:01:57,119
time for Q a of course q a

45
00:01:57,119 --> 00:01:58,799
so here you can see an image of some of

46
00:01:58,799 --> 00:02:00,960
the devices I had a looked at during

47
00:02:00,960 --> 00:02:02,820
this year

48
00:02:02,820 --> 00:02:04,560
um most of the devices you can see here

49
00:02:04,560 --> 00:02:06,960
are by the same manufacturer or vendor

50
00:02:06,960 --> 00:02:09,479
in this case world team yeah and there's

51
00:02:09,479 --> 00:02:12,120
also history to it so all the devices

52
00:02:12,120 --> 00:02:14,220
you can see here have one or more

53
00:02:14,220 --> 00:02:16,739
security issues uh we're going to

54
00:02:16,739 --> 00:02:18,000
present

55
00:02:18,000 --> 00:02:21,900
so the typical main components of secure

56
00:02:21,900 --> 00:02:24,300
devices like the one we've seen here is

57
00:02:24,300 --> 00:02:26,239
of course some kind of storage device

58
00:02:26,239 --> 00:02:28,860
actually obviously it's nand flash

59
00:02:28,860 --> 00:02:31,020
memory based then we have some kind of

60
00:02:31,020 --> 00:02:33,420
memory controllers some kind of USB

61
00:02:33,420 --> 00:02:36,060
Bridge controller because we have USB

62
00:02:36,060 --> 00:02:38,940
devices then there is some kind of user

63
00:02:38,940 --> 00:02:41,040
inputs device depending on the user

64
00:02:41,040 --> 00:02:42,900
authentication process

65
00:02:42,900 --> 00:02:45,360
you have either a keypad or a

66
00:02:45,360 --> 00:02:46,760
fingerprint sensor

67
00:02:46,760 --> 00:02:49,560
concerning my test devices and so

68
00:02:49,560 --> 00:02:51,180
there's either keypad controller in one

69
00:02:51,180 --> 00:02:53,040
way or another or a fingerprint sensor

70
00:02:53,040 --> 00:02:55,860
controller and sometimes there's also a

71
00:02:55,860 --> 00:02:57,959
spy flash memory chip for storing

72
00:02:57,959 --> 00:03:00,420
firmware

73
00:03:00,420 --> 00:03:03,720
so here you can see one of the sample

74
00:03:03,720 --> 00:03:05,519
test devices it's a suburbating keypad

75
00:03:05,519 --> 00:03:09,000
secure we have noun flash memory we have

76
00:03:09,000 --> 00:03:10,800
a USB disorder Bridge controller and we

77
00:03:10,800 --> 00:03:13,379
have a memory controller and yeah that's

78
00:03:13,379 --> 00:03:15,900
that's most of it on the one side and on

79
00:03:15,900 --> 00:03:18,360
the other side we have a keypad for our

80
00:03:18,360 --> 00:03:20,819
pin entry we have a spy flash memory

81
00:03:20,819 --> 00:03:22,379
that contains the firmware as we'll see

82
00:03:22,379 --> 00:03:24,959
later on and we have a keypad controller

83
00:03:24,959 --> 00:03:27,900
for the user input here it's a six to I

84
00:03:27,900 --> 00:03:30,180
don't know 12 digit passcode or 15 digit

85
00:03:30,180 --> 00:03:31,620
passcode that you can enter on this

86
00:03:31,620 --> 00:03:33,300
specific device

87
00:03:33,300 --> 00:03:37,760
so all devices I have tested support 256

88
00:03:37,760 --> 00:03:40,799
256-bit AES Hardware encryption

89
00:03:40,799 --> 00:03:42,780
they all have a hardware encryption

90
00:03:42,780 --> 00:03:45,140
engine implemented usually in the USB

91
00:03:45,140 --> 00:03:48,780
that average controller the user data is

92
00:03:48,780 --> 00:03:51,659
encrypted using a disk encryption key

93
00:03:51,659 --> 00:03:52,860
usually

94
00:03:52,860 --> 00:03:55,319
this disk encryption key is then further

95
00:03:55,319 --> 00:03:57,659
encrypted using a key encryption key and

96
00:03:57,659 --> 00:03:59,700
the key encryption key is derived from

97
00:03:59,700 --> 00:04:02,879
some kind of user input during the user

98
00:04:02,879 --> 00:04:05,040
authentication process so either from

99
00:04:05,040 --> 00:04:08,400
the answered pin code from a password

100
00:04:08,400 --> 00:04:10,799
for instance via client software for Mac

101
00:04:10,799 --> 00:04:13,200
osm windows so I have also one example

102
00:04:13,200 --> 00:04:15,959
for this or wire fingerprint

103
00:04:15,959 --> 00:04:18,899
using a fingerprint sensor obviously

104
00:04:18,899 --> 00:04:21,478
so on this slide I have collected yeah

105
00:04:21,478 --> 00:04:24,479
some previous work of other researchers

106
00:04:24,479 --> 00:04:27,840
and also by myself so starting back one

107
00:04:27,840 --> 00:04:30,180
and a half decade ago 2007. I think

108
00:04:30,180 --> 00:04:32,759
there is also some prior work consoling

109
00:04:32,759 --> 00:04:35,340
crypto news B flash drives but yeah this

110
00:04:35,340 --> 00:04:37,560
is the work I was aware of and

111
00:04:37,560 --> 00:04:41,280
that I've also used for my research here

112
00:04:41,280 --> 00:04:44,040
so they are hacking crypto USB flash

113
00:04:44,040 --> 00:04:46,919
drives is far from you but still

114
00:04:46,919 --> 00:04:48,120
possible

115
00:04:48,120 --> 00:04:51,240
so here I've collected some desired

116
00:04:51,240 --> 00:04:53,880
secure properties I want to have this

117
00:04:53,880 --> 00:04:56,280
kind of device as a user to so what I

118
00:04:56,280 --> 00:04:57,960
want to have is that all user data is

119
00:04:57,960 --> 00:04:59,600
securely encrypted in one way or another

120
00:04:59,600 --> 00:05:02,460
which also means that it is not possible

121
00:05:02,460 --> 00:05:06,440
to deduce or infer any information by

122
00:05:06,440 --> 00:05:09,840
having a look at the

123
00:05:09,840 --> 00:05:10,440
um

124
00:05:10,440 --> 00:05:13,440
ciphertext of the device to infer

125
00:05:13,440 --> 00:05:15,419
information about the plain text so this

126
00:05:15,419 --> 00:05:17,699
should not be possible one property then

127
00:05:17,699 --> 00:05:19,979
only authorized users obviously should

128
00:05:19,979 --> 00:05:22,560
have access to the sensitive data that

129
00:05:22,560 --> 00:05:24,360
is stored on such a device

130
00:05:24,360 --> 00:05:26,520
the user authentication process in place

131
00:05:26,520 --> 00:05:30,360
should not be bypassable

132
00:05:30,360 --> 00:05:32,820
user authentication attempts for

133
00:05:32,820 --> 00:05:34,139
instance if there is a kind of password

134
00:05:34,139 --> 00:05:36,180
entry or pin code entry should be

135
00:05:36,180 --> 00:05:37,800
limited to a specific amount at least

136
00:05:37,800 --> 00:05:39,780
concerning online Brute Force attacks by

137
00:05:39,780 --> 00:05:41,460
online Brute Force attacks I mean

138
00:05:41,460 --> 00:05:43,680
attacks against the device itself so

139
00:05:43,680 --> 00:05:45,180
there's no network connection involved

140
00:05:45,180 --> 00:05:47,160
but you have to have access physical

141
00:05:47,160 --> 00:05:50,520
access to the live device for performing

142
00:05:50,520 --> 00:05:52,560
this kind of attack and what you want to

143
00:05:52,560 --> 00:05:55,139
have is the device to reset after a

144
00:05:55,139 --> 00:05:57,900
specific amount of consecutive failed

145
00:05:57,900 --> 00:06:00,419
login attempts that you have to reset or

146
00:06:00,419 --> 00:06:02,160
that is completely destroyed which is

147
00:06:02,160 --> 00:06:04,380
also possible for some kind of devices

148
00:06:04,380 --> 00:06:07,139
then device Integrity itself should also

149
00:06:07,139 --> 00:06:10,620
be protected by yeah hopefully secure

150
00:06:10,620 --> 00:06:13,199
cryptographic means and the other kind

151
00:06:13,199 --> 00:06:14,940
of Brute Force attacks I call them also

152
00:06:14,940 --> 00:06:16,740
here online offline root Force attacks

153
00:06:16,740 --> 00:06:19,139
should also not be possible by this kind

154
00:06:19,139 --> 00:06:21,000
of attack I mean you don't have to have

155
00:06:21,000 --> 00:06:24,300
access to the device itself anymore

156
00:06:24,300 --> 00:06:27,419
after we have extracted some required

157
00:06:27,419 --> 00:06:29,340
data but you perform the actual Blue

158
00:06:29,340 --> 00:06:31,020
Cross attack on your own tackle control

159
00:06:31,020 --> 00:06:33,360
machines and candle is a lot faster than

160
00:06:33,360 --> 00:06:35,340
for instance the microcontrollers that

161
00:06:35,340 --> 00:06:37,380
are used in the device

162
00:06:37,380 --> 00:06:40,680
there and this kind of attacks cannot

163
00:06:40,680 --> 00:06:42,840
completely prevent it in my opinion if

164
00:06:42,840 --> 00:06:44,699
you have the right lab and right

165
00:06:44,699 --> 00:06:46,860
know-how and Equipment but you can make

166
00:06:46,860 --> 00:06:48,240
it very expensive very hard for

167
00:06:48,240 --> 00:06:50,160
attackers

168
00:06:50,160 --> 00:06:52,979
yeah and my research started back in

169
00:06:52,979 --> 00:06:55,500
December 21 last year with a customer

170
00:06:55,500 --> 00:06:59,520
request and in January I began to take a

171
00:06:59,520 --> 00:07:02,280
closer look at one specific of those

172
00:07:02,280 --> 00:07:04,979
devices I will talk today and yeah

173
00:07:04,979 --> 00:07:07,440
that's the first device I was lucky and

174
00:07:07,440 --> 00:07:09,900
found some security issues then I bought

175
00:07:09,900 --> 00:07:11,880
similar devices also by the same

176
00:07:11,880 --> 00:07:14,340
manufacturer and buy some other ones and

177
00:07:14,340 --> 00:07:16,259
found the same and also some other

178
00:07:16,259 --> 00:07:18,180
security issues and further devices that

179
00:07:18,180 --> 00:07:21,840
I was surprised that yeah even in 2022

180
00:07:21,840 --> 00:07:24,660
you can find some attacks that I found

181
00:07:24,660 --> 00:07:27,360
yeah 13 years before

182
00:07:27,360 --> 00:07:29,460
yeah and so I've reported the found

183
00:07:29,460 --> 00:07:31,199
security vulnerabilities to the affected

184
00:07:31,199 --> 00:07:34,319
manufacturers or respectively vendors

185
00:07:34,319 --> 00:07:36,419
and yeah next I want to talk about my

186
00:07:36,419 --> 00:07:38,400
test methodology and some technical

187
00:07:38,400 --> 00:07:39,960
stuff

188
00:07:39,960 --> 00:07:41,099
that I

189
00:07:41,099 --> 00:07:43,800
was capable of doing and about some

190
00:07:43,800 --> 00:07:45,960
things that didn't work out so my test

191
00:07:45,960 --> 00:07:49,020
methodology is I think the same for

192
00:07:49,020 --> 00:07:51,620
yeah every Hardware hacking project

193
00:07:51,620 --> 00:07:54,419
people do so there are the three parts

194
00:07:54,419 --> 00:07:56,280
uh there are three parts involved the

195
00:07:56,280 --> 00:07:58,199
hardware analysis firmware analysis and

196
00:07:58,199 --> 00:07:59,699
software analysis

197
00:07:59,699 --> 00:08:02,880
but only for some devices every part is

198
00:08:02,880 --> 00:08:04,680
actually required or needed because for

199
00:08:04,680 --> 00:08:06,720
some devices you don't have client

200
00:08:06,720 --> 00:08:09,120
software for Mac or Windows for other

201
00:08:09,120 --> 00:08:11,280
devices it's not possible to gain access

202
00:08:11,280 --> 00:08:13,800
to the firmware so you can perform this

203
00:08:13,800 --> 00:08:16,620
analysis step yeah and when performing

204
00:08:16,620 --> 00:08:18,720
in Hardware analysis you usually open up

205
00:08:18,720 --> 00:08:20,400
the device make some pictures try to

206
00:08:20,400 --> 00:08:23,699
identify all the chips try to find

207
00:08:23,699 --> 00:08:25,680
documentation read the documentation

208
00:08:25,680 --> 00:08:27,720
understand it find programmer manuals

209
00:08:27,720 --> 00:08:30,240
finding test points using logic

210
00:08:30,240 --> 00:08:34,740
analyzers yeah and if you're lucky using

211
00:08:34,740 --> 00:08:37,339
some jtek debuggers stuff like that

212
00:08:37,339 --> 00:08:39,299
considering firmware analysis if you're

213
00:08:39,299 --> 00:08:41,339
lucky enough to gain access to the

214
00:08:41,339 --> 00:08:43,080
firmware of such a device for instance

215
00:08:43,080 --> 00:08:45,540
by dumping the firmware from the device

216
00:08:45,540 --> 00:08:48,060
Itself by one way or another or by

217
00:08:48,060 --> 00:08:50,700
downloading via support website of the

218
00:08:50,700 --> 00:08:52,800
manufacturer

219
00:08:52,800 --> 00:08:55,560
um you can yeah reverse engineer using

220
00:08:55,560 --> 00:08:57,779
the firmware using the aesthetic code

221
00:08:57,779 --> 00:08:59,459
analysis for instance

222
00:08:59,459 --> 00:09:02,660
and yeah software analysis the same for

223
00:09:02,660 --> 00:09:05,040
clients software components for Mac

224
00:09:05,040 --> 00:09:07,680
Windows Linux if the device itself

225
00:09:07,680 --> 00:09:10,080
provides them also using static code

226
00:09:10,080 --> 00:09:12,180
analysis or runtime analysis of the

227
00:09:12,180 --> 00:09:13,080
software

228
00:09:13,080 --> 00:09:14,820
so the attack surface and effects

229
00:09:14,820 --> 00:09:17,519
scenarios concerning portable USB

230
00:09:17,519 --> 00:09:20,640
storage devices are quite Limited in my

231
00:09:20,640 --> 00:09:22,800
opinion so if you want to perform an

232
00:09:22,800 --> 00:09:24,660
attack against such device you have to

233
00:09:24,660 --> 00:09:27,439
have physical access

234
00:09:27,480 --> 00:09:29,700
um attacks in general are possible at

235
00:09:29,700 --> 00:09:32,100
two different points in time so first

236
00:09:32,100 --> 00:09:34,339
before the legitimate user of the device

237
00:09:34,339 --> 00:09:37,860
has used the device so I think of supply

238
00:09:37,860 --> 00:09:40,920
chain attack in the scenario and yeah

239
00:09:40,920 --> 00:09:43,320
the second point in time would be after

240
00:09:43,320 --> 00:09:45,120
the legitimate user has used the device

241
00:09:45,120 --> 00:09:46,860
there is some sensitive data already

242
00:09:46,860 --> 00:09:49,500
stored on it so for instance the Lost

243
00:09:49,500 --> 00:09:52,680
device or stolen device scenario where

244
00:09:52,680 --> 00:09:54,839
it permanently remove the device from

245
00:09:54,839 --> 00:09:56,880
the legitimate user and try to attack it

246
00:09:56,880 --> 00:09:59,339
and okay now not addressed access to the

247
00:09:59,339 --> 00:10:00,000
um

248
00:10:00,000 --> 00:10:03,120
content or maybe you're able to perform

249
00:10:03,120 --> 00:10:05,700
an attack where you only gain temporary

250
00:10:05,700 --> 00:10:08,279
physical access to this USB device

251
00:10:08,279 --> 00:10:10,500
without still a judgment user ever

252
00:10:10,500 --> 00:10:12,920
knowing

253
00:10:13,860 --> 00:10:16,440
yeah so here's one still one of my

254
00:10:16,440 --> 00:10:17,820
favorite pictures concerning supply

255
00:10:17,820 --> 00:10:20,040
chain attacks it's yeah from a news

256
00:10:20,040 --> 00:10:22,260
report a couple of years ago concerning

257
00:10:22,260 --> 00:10:23,940
the tailored access operations by the

258
00:10:23,940 --> 00:10:27,779
NSA and yeah what could happen to your

259
00:10:27,779 --> 00:10:30,360
Parcels is that someone intercepts them

260
00:10:30,360 --> 00:10:32,040
and tampers with your devices and then

261
00:10:32,040 --> 00:10:34,620
sends them along and later on I have one

262
00:10:34,620 --> 00:10:36,420
attack scenario where this may be

263
00:10:36,420 --> 00:10:38,700
possible for some of the devices

264
00:10:38,700 --> 00:10:42,360
so and here is my first

265
00:10:42,360 --> 00:10:44,040
sample device I want to talk about it's

266
00:10:44,040 --> 00:10:46,140
the verbutton keypad secure

267
00:10:46,140 --> 00:10:48,240
um here are some important features that

268
00:10:48,240 --> 00:10:51,480
the manufacturer Robertson mentions and

269
00:10:51,480 --> 00:10:53,600
marketing material it has yeah the AES

270
00:10:53,600 --> 00:10:55,920
256-bit Hardware encryption a built-in

271
00:10:55,920 --> 00:10:58,740
keypad it does not store any password in

272
00:10:58,740 --> 00:11:00,660
the computer systems volatile memory

273
00:11:00,660 --> 00:11:02,399
where you can extract it by means of

274
00:11:02,399 --> 00:11:04,920
malware and it's compatible to the PC

275
00:11:04,920 --> 00:11:08,820
and mac and there is also a log out

276
00:11:08,820 --> 00:11:11,279
mechanism here we can see the warning

277
00:11:11,279 --> 00:11:13,380
after 20 failed passcode attempts the

278
00:11:13,380 --> 00:11:15,180
device will lock and initialize the USB

279
00:11:15,180 --> 00:11:18,779
drive so it will be format the drive and

280
00:11:18,779 --> 00:11:19,860
yeah

281
00:11:19,860 --> 00:11:21,779
everything should be lost and not

282
00:11:21,779 --> 00:11:23,940
accessible anymore by attackers have you

283
00:11:23,940 --> 00:11:25,620
seen this picture before so it's the

284
00:11:25,620 --> 00:11:26,940
front of the PCB

285
00:11:26,940 --> 00:11:30,120
flash memory USB starter controller and

286
00:11:30,120 --> 00:11:32,880
a memory controller oh yeah and the

287
00:11:32,880 --> 00:11:35,160
interesting part about this um this is

288
00:11:35,160 --> 00:11:38,339
actually a SSD and m.2 form factor so

289
00:11:38,339 --> 00:11:41,459
it's not sorted to the PCB but it's a

290
00:11:41,459 --> 00:11:44,100
removal so as you can see here so this

291
00:11:44,100 --> 00:11:46,620
is a small SSD device I'm holding up

292
00:11:46,620 --> 00:11:48,480
here you can just remove it and replace

293
00:11:48,480 --> 00:11:51,000
it it's also useful for attacking it

294
00:11:51,000 --> 00:11:52,200
later on in

295
00:11:52,200 --> 00:11:55,260
an external rutual scenario

296
00:11:55,260 --> 00:11:57,839
so here's the other side of the PCB

297
00:11:57,839 --> 00:11:59,279
um yeah we've already seen this picture

298
00:11:59,279 --> 00:12:01,320
uh there's five flash memory and a

299
00:12:01,320 --> 00:12:03,480
keypad controller the Spy flash memory

300
00:12:03,480 --> 00:12:05,940
contains the firmware of the USB to data

301
00:12:05,940 --> 00:12:07,620
Bridge controller on the other side and

302
00:12:07,620 --> 00:12:10,079
this keypad controller here is labeled

303
00:12:10,079 --> 00:12:12,660
sw611 I have no idea what this kind of

304
00:12:12,660 --> 00:12:14,100
chip is couldn't find any documentation

305
00:12:14,100 --> 00:12:17,700
but it's responsible for handling the

306
00:12:17,700 --> 00:12:19,620
pin input

307
00:12:19,620 --> 00:12:23,160
so the first thing I found out about

308
00:12:23,160 --> 00:12:26,279
this device is that the device lock and

309
00:12:26,279 --> 00:12:29,180
reset mechanism doesn't work as yeah

310
00:12:29,180 --> 00:12:33,779
marketed by verbatim so yeah when I

311
00:12:33,779 --> 00:12:35,760
performed manual passcode Brute Force

312
00:12:35,760 --> 00:12:37,620
attempts so entering more than 20

313
00:12:37,620 --> 00:12:40,140
consecutive failed login attempts on

314
00:12:40,140 --> 00:12:42,300
this device my device didn't lock and it

315
00:12:42,300 --> 00:12:43,680
also didn't lock after 30 failed

316
00:12:43,680 --> 00:12:45,300
attempts and also not up after 50

317
00:12:45,300 --> 00:12:47,220
attempts yeah and then I just gave up

318
00:12:47,220 --> 00:12:49,740
tested another device it was the same so

319
00:12:49,740 --> 00:12:52,139
it simply does not work as yeah

320
00:12:52,139 --> 00:12:55,740
proclaimed by Robert Tim here so no no

321
00:12:55,740 --> 00:12:57,660
Brute Force protection concerning online

322
00:12:57,660 --> 00:12:59,519
Brute Force attacks but it's still very

323
00:12:59,519 --> 00:13:01,560
cumbersome and slow to enter all the

324
00:13:01,560 --> 00:13:03,839
possible pins manually from I think five

325
00:13:03,839 --> 00:13:05,459
or six digits to

326
00:13:05,459 --> 00:13:07,980
12 yeah five to twelve digits yeah it's

327
00:13:07,980 --> 00:13:09,779
here and the manual

328
00:13:09,779 --> 00:13:12,000
so that was the first security issue

329
00:13:12,000 --> 00:13:14,339
concerning this device

330
00:13:14,339 --> 00:13:15,660
um

331
00:13:15,660 --> 00:13:17,820
yeah so you can try more passcodes than

332
00:13:17,820 --> 00:13:20,639
you are supposed to actually do

333
00:13:20,639 --> 00:13:23,600
so then I also had a look at the

334
00:13:23,600 --> 00:13:26,639
encrypted data of the zata SSD and the

335
00:13:26,639 --> 00:13:29,040
m.2 form factor because it can simply be

336
00:13:29,040 --> 00:13:32,160
removed and put in another external

337
00:13:32,160 --> 00:13:33,480
enclosure

338
00:13:33,480 --> 00:13:36,720
and here I yeah analyze the encrypted

339
00:13:36,720 --> 00:13:39,899
data and saw some obvious patterns that

340
00:13:39,899 --> 00:13:41,220
I did not expect

341
00:13:41,220 --> 00:13:43,860
and yeah yeah you can see it marked here

342
00:13:43,860 --> 00:13:46,500
so the star means that the previous line

343
00:13:46,500 --> 00:13:48,060
just repeats

344
00:13:48,060 --> 00:13:51,540
for a specific number until the next hex

345
00:13:51,540 --> 00:13:53,880
address you can see here and we are

346
00:13:53,880 --> 00:13:56,579
seeing such repeating byte patterns in

347
00:13:56,579 --> 00:13:59,660
encrypted data is always not a good sign

348
00:13:59,660 --> 00:14:02,220
because yeah

349
00:14:02,220 --> 00:14:04,680
here you can actually infer

350
00:14:04,680 --> 00:14:07,740
some information about the plain text

351
00:14:07,740 --> 00:14:09,480
only when having a look at the cipher

352
00:14:09,480 --> 00:14:11,459
text but this is only true for a

353
00:14:11,459 --> 00:14:13,380
specific kind of data and the most

354
00:14:13,380 --> 00:14:15,500
famous example is

355
00:14:15,500 --> 00:14:18,480
bitmaps so here is the tax penguin

356
00:14:18,480 --> 00:14:21,500
because in this case

357
00:14:21,500 --> 00:14:23,820
several devices not only the web team

358
00:14:23,820 --> 00:14:26,100
keypad secure use the as encryption mode

359
00:14:26,100 --> 00:14:29,579
named ECB electronic code book and here

360
00:14:29,579 --> 00:14:32,820
the same 16 bytes of plain text always

361
00:14:32,820 --> 00:14:34,860
result in the same 16 bytes of

362
00:14:34,860 --> 00:14:36,600
ciphertext

363
00:14:36,600 --> 00:14:40,560
and for some data

364
00:14:40,560 --> 00:14:43,139
bitmaps or audio data in specific file

365
00:14:43,139 --> 00:14:46,139
formats yeah this can leak actual data

366
00:14:46,139 --> 00:14:48,959
in the ciphertext because a specific

367
00:14:48,959 --> 00:14:50,880
cryptographic property called diffusion

368
00:14:50,880 --> 00:14:53,279
is just lacking for this as encryption

369
00:14:53,279 --> 00:14:54,360
mode

370
00:14:54,360 --> 00:14:57,779
so this is also not very good for such a

371
00:14:57,779 --> 00:15:00,420
secure USB portable device

372
00:15:00,420 --> 00:15:02,760
so the next step was a firmware analysis

373
00:15:02,760 --> 00:15:05,940
because I was able to Simply dump this

374
00:15:05,940 --> 00:15:07,440
bioflash membership we've seen on the

375
00:15:07,440 --> 00:15:10,440
PCB using a universal programmer I use

376
00:15:10,440 --> 00:15:13,800
the T56 in this case but yeah I think

377
00:15:13,800 --> 00:15:15,720
any Supply flash programmer should work

378
00:15:15,720 --> 00:15:18,360
to actually dump the firmware it was 128

379
00:15:18,360 --> 00:15:21,360
kilobytes in size and it contains yeah

380
00:15:21,360 --> 00:15:24,959
the firmware for the initial inic USB

381
00:15:24,959 --> 00:15:27,000
result average controller unfortunately

382
00:15:27,000 --> 00:15:29,279
no public information is available for

383
00:15:29,279 --> 00:15:31,139
this controller

384
00:15:31,139 --> 00:15:33,779
um no data sheet no programmers manual

385
00:15:33,779 --> 00:15:37,260
yeah so it was a black box for me

386
00:15:37,260 --> 00:15:39,980
um but there were research Publications

387
00:15:39,980 --> 00:15:42,420
by other researchers a couple of years

388
00:15:42,420 --> 00:15:44,820
old that had a similar device and they

389
00:15:44,820 --> 00:15:46,320
talked about them and reversed some of

390
00:15:46,320 --> 00:15:50,040
the firmware before namely the inic 3607

391
00:15:50,040 --> 00:15:51,720
and I could use some of the information

392
00:15:51,720 --> 00:15:56,459
to yeah perform some or come up with

393
00:15:56,459 --> 00:15:58,620
some test cases in this scenario and

394
00:15:58,620 --> 00:16:02,459
also speed up my firmware analysis and

395
00:16:02,459 --> 00:16:04,800
one publication especially was useful

396
00:16:04,800 --> 00:16:07,500
your your secure HTTP pin we can help by

397
00:16:07,500 --> 00:16:10,920
Julian Lenoir and Rafael

398
00:16:10,920 --> 00:16:13,500
um and I could also make great use of a

399
00:16:13,500 --> 00:16:14,779
guitar

400
00:16:14,779 --> 00:16:18,180
add-on by Nicholas EOS

401
00:16:18,180 --> 00:16:20,339
because he implemented support for the

402
00:16:20,339 --> 00:16:24,000
actual instruction set because this

403
00:16:24,000 --> 00:16:26,760
controller used Arc compact instruction

404
00:16:26,760 --> 00:16:28,260
set I've never worked with this before

405
00:16:28,260 --> 00:16:30,600
so I had to learn it and yeah this

406
00:16:30,600 --> 00:16:34,019
guitar plugin was very very valuable of

407
00:16:34,019 --> 00:16:38,339
course so yeah I was able to load the

408
00:16:38,339 --> 00:16:41,639
dump firmware in gitra and also use the

409
00:16:41,639 --> 00:16:44,759
decompile on this case but makes things

410
00:16:44,759 --> 00:16:47,160
a lot easier for analyzing what is going

411
00:16:47,160 --> 00:16:48,839
on internally

412
00:16:48,839 --> 00:16:51,360
so what I also found out concerning the

413
00:16:51,360 --> 00:16:53,940
firmware is that it's yeah only

414
00:16:53,940 --> 00:16:58,620
protected by a simple checksum a crc16

415
00:16:58,620 --> 00:17:01,620
and X modem configuration so I was also

416
00:17:01,620 --> 00:17:04,859
able to manipulate the firmware uh flash

417
00:17:04,859 --> 00:17:06,540
it through the Spy flash memory boot the

418
00:17:06,540 --> 00:17:10,319
device and see what changes I could yeah

419
00:17:10,319 --> 00:17:13,079
actually perform and by this I was able

420
00:17:13,079 --> 00:17:15,299
to write some own debug code and do some

421
00:17:15,299 --> 00:17:17,819
some runtime analysis because as

422
00:17:17,819 --> 00:17:19,260
mentioned before I didn't have any data

423
00:17:19,260 --> 00:17:21,240
sheet I did not know how the AES engine

424
00:17:21,240 --> 00:17:23,520
worked of this chip so this was very

425
00:17:23,520 --> 00:17:24,720
very useful

426
00:17:24,720 --> 00:17:27,480
yeah and of course an attacker is also

427
00:17:27,480 --> 00:17:29,040
able with physical access to the device

428
00:17:29,040 --> 00:17:32,100
to just store malicious firmware on this

429
00:17:32,100 --> 00:17:34,919
controller and use his voice his

430
00:17:34,919 --> 00:17:36,059
purposes for instance he could

431
00:17:36,059 --> 00:17:37,559
manipulate the firmware in such a way

432
00:17:37,559 --> 00:17:39,720
that always the same as key is used no

433
00:17:39,720 --> 00:17:42,179
matter what pin code you are setting

434
00:17:42,179 --> 00:17:44,039
when you're initializing the device and

435
00:17:44,039 --> 00:17:46,080
later on if he gains access to your

436
00:17:46,080 --> 00:17:47,880
device temporarily or he steals it

437
00:17:47,880 --> 00:17:50,460
forever he can simply decrypt all your

438
00:17:50,460 --> 00:17:52,700
data

439
00:17:53,700 --> 00:17:56,220
um yeah as mentioned before being able

440
00:17:56,220 --> 00:17:57,720
to modify the firmware was very very

441
00:17:57,720 --> 00:17:59,220
useful

442
00:17:59,220 --> 00:18:03,660
um being able also to patch the CRC was

443
00:18:03,660 --> 00:18:07,220
also useful and

444
00:18:07,679 --> 00:18:09,600
we are learning about our Compact and

445
00:18:09,600 --> 00:18:13,080
finding a working GCC tool chain

446
00:18:13,080 --> 00:18:15,120
was another step that helped me going

447
00:18:15,120 --> 00:18:16,740
forward so what you can see here on this

448
00:18:16,740 --> 00:18:19,679
slide is some our compact assembler code

449
00:18:19,679 --> 00:18:23,360
I come up with to just dump some

450
00:18:23,360 --> 00:18:26,400
memory during runtime because I was

451
00:18:26,400 --> 00:18:28,080
interested in how the AES engine

452
00:18:28,080 --> 00:18:30,539
actually worked and I was interested in

453
00:18:30,539 --> 00:18:32,520
where cryptographic key material was

454
00:18:32,520 --> 00:18:34,620
stored and in this way I could just came

455
00:18:34,620 --> 00:18:36,240
up with some educated guesses and then

456
00:18:36,240 --> 00:18:38,460
verify them using my own modified

457
00:18:38,460 --> 00:18:40,679
firmware

458
00:18:40,679 --> 00:18:44,160
yeah and what I did here is I um yeah

459
00:18:44,160 --> 00:18:48,240
simply dumped the firmware bite wise

460
00:18:48,240 --> 00:18:51,480
using the Spy communication because spy

461
00:18:51,480 --> 00:18:54,120
serial peripheral interface was used for

462
00:18:54,120 --> 00:18:56,580
the internship communication between the

463
00:18:56,580 --> 00:18:58,679
keypad controller and the USB disorder

464
00:18:58,679 --> 00:19:02,100
bridge and I could yeah simply reuse

465
00:19:02,100 --> 00:19:04,679
code that was already there and

466
00:19:04,679 --> 00:19:07,140
exfiltrate data

467
00:19:07,140 --> 00:19:10,460
by using spy and sniffing it using a

468
00:19:10,460 --> 00:19:13,740
logic analyzer because the device itself

469
00:19:13,740 --> 00:19:17,280
doesn't have any display yeah so

470
00:19:17,280 --> 00:19:19,140
this was one way another way would have

471
00:19:19,140 --> 00:19:21,240
been blinking lights but I think it's

472
00:19:21,240 --> 00:19:23,520
more cumbersome and this is an easier

473
00:19:23,520 --> 00:19:25,860
way to do it

474
00:19:25,860 --> 00:19:29,640
yeah and as already mentioned I luckily

475
00:19:29,640 --> 00:19:31,400
found a working

476
00:19:31,400 --> 00:19:34,740
pre-compiled GCC tool chain that could

477
00:19:34,740 --> 00:19:36,059
um

478
00:19:36,059 --> 00:19:37,260
create

479
00:19:37,260 --> 00:19:39,960
the correct code for this Arc compact

480
00:19:39,960 --> 00:19:41,640
architecture because there are also

481
00:19:41,640 --> 00:19:45,360
different versions of it and yeah that I

482
00:19:45,360 --> 00:19:47,820
was able to dump it using my or program

483
00:19:47,820 --> 00:19:49,740
it using Universal program on the Spy

484
00:19:49,740 --> 00:19:52,260
flash memory chip and

485
00:19:52,260 --> 00:19:54,299
uh have a go

486
00:19:54,299 --> 00:19:55,919
what I also found out during the

487
00:19:55,919 --> 00:19:57,780
firmware analysis is that there were

488
00:19:57,780 --> 00:20:00,419
some interesting yeah I'd say artifacts

489
00:20:00,419 --> 00:20:03,240
left over that I've also read about in

490
00:20:03,240 --> 00:20:05,580
other Publications for example there is

491
00:20:05,580 --> 00:20:08,460
a strange Pie by sequence that is used

492
00:20:08,460 --> 00:20:11,280
as initial AES encryption key concerning

493
00:20:11,280 --> 00:20:13,620
other devices for example this one

494
00:20:13,620 --> 00:20:16,799
mentioned here the Salman smve 500.

495
00:20:16,799 --> 00:20:20,340
but this yeah Pi byte sequence so we

496
00:20:20,340 --> 00:20:22,559
have three one four one five and so on

497
00:20:22,559 --> 00:20:25,919
was not used it was just a left over on

498
00:20:25,919 --> 00:20:29,400
this device and there was also I call it

499
00:20:29,400 --> 00:20:32,160
magic signature that is used for the PIN

500
00:20:32,160 --> 00:20:35,100
codes verification and this was also the

501
00:20:35,100 --> 00:20:37,799
same as in other devices by other

502
00:20:37,799 --> 00:20:40,260
manufacturers so there's shared firmware

503
00:20:40,260 --> 00:20:43,559
code between different products sold by

504
00:20:43,559 --> 00:20:45,299
different vendors

505
00:20:45,299 --> 00:20:47,520
which is also interesting

506
00:20:47,520 --> 00:20:49,860
so next up was a protocol analysis

507
00:20:49,860 --> 00:20:52,020
concerning the internship communication

508
00:20:52,020 --> 00:20:54,059
I've already mentioned between between

509
00:20:54,059 --> 00:20:56,160
the USB disorder Bridge controller and

510
00:20:56,160 --> 00:20:58,440
the keypad controller and here I was

511
00:20:58,440 --> 00:21:00,720
also able to find some interesting

512
00:21:00,720 --> 00:21:03,240
patterns

513
00:21:03,240 --> 00:21:05,059
um yeah

514
00:21:05,059 --> 00:21:08,700
and what I found out is that the

515
00:21:08,700 --> 00:21:10,620
proprietor is by communication supports

516
00:21:10,620 --> 00:21:13,140
six different commands and at least four

517
00:21:13,140 --> 00:21:14,820
of them I know what they do they

518
00:21:14,820 --> 00:21:16,200
initialize the device they can unlock

519
00:21:16,200 --> 00:21:17,940
the device lock the device or change the

520
00:21:17,940 --> 00:21:20,400
password and two of them I have no clue

521
00:21:20,400 --> 00:21:23,340
I didn't have a look into them and the

522
00:21:23,340 --> 00:21:25,919
protocol for me looks like this in its

523
00:21:25,919 --> 00:21:28,020
structure or the message format we have

524
00:21:28,020 --> 00:21:31,380
a length field a command ID a payload

525
00:21:31,380 --> 00:21:33,380
and a checksum the checksum again is

526
00:21:33,380 --> 00:21:37,020
crc16 in X nodem configuration

527
00:21:37,020 --> 00:21:38,880
yeah and

528
00:21:38,880 --> 00:21:41,940
this was also quite useful because now I

529
00:21:41,940 --> 00:21:43,500
could see when I trigger an unlock

530
00:21:43,500 --> 00:21:45,960
command what will be sent by from the

531
00:21:45,960 --> 00:21:47,880
keypad controller to the USB without a

532
00:21:47,880 --> 00:21:50,880
bridge and what may be used for key

533
00:21:50,880 --> 00:21:52,380
derivation because in some way or

534
00:21:52,380 --> 00:21:55,380
another there is a key derivation for

535
00:21:55,380 --> 00:21:57,659
getting a key encryption key to

536
00:21:57,659 --> 00:22:01,039
decrypted disk encryption key

537
00:22:02,700 --> 00:22:04,700
um yeah another interesting thing

538
00:22:04,700 --> 00:22:07,679
concerning the actual payload is that

539
00:22:07,679 --> 00:22:10,500
all enter passcode resulted in a 32 byte

540
00:22:10,500 --> 00:22:11,460
payload

541
00:22:11,460 --> 00:22:13,620
the passcodes themselves or PIN codes

542
00:22:13,620 --> 00:22:16,919
are five to 12 digits as we've seen in

543
00:22:16,919 --> 00:22:19,500
manual but we overall always have a 32

544
00:22:19,500 --> 00:22:22,400
bytes and the last 16 bytes are always

545
00:22:22,400 --> 00:22:25,860
FF in hexadecimal so only half of the

546
00:22:25,860 --> 00:22:29,039
space is actually used and yeah obvious

547
00:22:29,039 --> 00:22:30,840
patterns could be found in the first 16

548
00:22:30,840 --> 00:22:33,960
bytes of the payload as we can see here

549
00:22:33,960 --> 00:22:37,080
so for instance when I only enter

550
00:22:37,080 --> 00:22:41,000
once so this should be

551
00:22:41,000 --> 00:22:43,860
12 ones

552
00:22:43,860 --> 00:22:46,679
I have repeating patterns consisting of

553
00:22:46,679 --> 00:22:49,440
four bytes each yeah I don't know if you

554
00:22:49,440 --> 00:22:51,360
can see it large enough I have it also

555
00:22:51,360 --> 00:22:53,280
another slide but here repeating

556
00:22:53,280 --> 00:22:54,539
patterns again

557
00:22:54,539 --> 00:22:58,559
so one one one always results in 0 ac91

558
00:22:58,559 --> 00:22:59,820
f2f

559
00:22:59,820 --> 00:23:02,880
so that's also interesting because some

560
00:23:02,880 --> 00:23:05,280
kind of mapping or hashing concerning

561
00:23:05,280 --> 00:23:08,159
the user input has to be going on

562
00:23:08,159 --> 00:23:10,740
um yeah but unfortunately this

563
00:23:10,740 --> 00:23:12,600
keypad controller is a black box and I

564
00:23:12,600 --> 00:23:14,400
couldn't find any information about it

565
00:23:14,400 --> 00:23:17,280
so I had two ideas finding out how this

566
00:23:17,280 --> 00:23:20,640
hash or mapping algorithm works first

567
00:23:20,640 --> 00:23:22,559
yeah

568
00:23:22,559 --> 00:23:25,020
by collecting more samples for for

569
00:23:25,020 --> 00:23:27,059
digital inputs and analyzing them in the

570
00:23:27,059 --> 00:23:29,880
hope that I can understand the function

571
00:23:29,880 --> 00:23:31,919
or performing a hard help Brute Force

572
00:23:31,919 --> 00:23:33,600
Attack Just for generating all the

573
00:23:33,600 --> 00:23:36,000
possible four-digit inputs and create a

574
00:23:36,000 --> 00:23:37,320
large lookup table it would be

575
00:23:37,320 --> 00:23:38,760
sufficient enough for an attacker yeah

576
00:23:38,760 --> 00:23:41,340
who wants to gain access

577
00:23:41,340 --> 00:23:45,480
in this 32-bit scenario we have here

578
00:23:45,480 --> 00:23:47,880
yeah so I first collected manually some

579
00:23:47,880 --> 00:23:50,820
more samples concerning user input and

580
00:23:50,820 --> 00:23:52,440
here you can see some

581
00:23:52,440 --> 00:23:55,090
um yeah in this table

582
00:23:55,090 --> 00:23:55,860
[Music]

583
00:23:55,860 --> 00:23:57,240
um

584
00:23:57,240 --> 00:24:00,059
yeah and so I tried to collect all the

585
00:24:00,059 --> 00:24:02,340
possible hashes

586
00:24:02,340 --> 00:24:05,820
using a hardware approach

587
00:24:05,820 --> 00:24:07,980
so what I did is I had a look at the

588
00:24:07,980 --> 00:24:10,980
encoding of the different

589
00:24:10,980 --> 00:24:11,820
um

590
00:24:11,820 --> 00:24:15,600
pins that we have on the keypad that you

591
00:24:15,600 --> 00:24:19,020
can see here yeah then I figured out the

592
00:24:19,020 --> 00:24:21,720
different or the pin out of the unknown

593
00:24:21,720 --> 00:24:23,760
keypad controller

594
00:24:23,760 --> 00:24:27,059
and what I then tried is to desolder the

595
00:24:27,059 --> 00:24:28,500
keypad controller put it on a breakout

596
00:24:28,500 --> 00:24:30,179
board put it on a breadboard with a

597
00:24:30,179 --> 00:24:32,280
Teensy and then try to simulate all the

598
00:24:32,280 --> 00:24:34,620
key presses and then just lock this by

599
00:24:34,620 --> 00:24:37,080
communication to have all the hashes but

600
00:24:37,080 --> 00:24:39,539
this approach failed at least for me

601
00:24:39,539 --> 00:24:41,940
because I was not able to simulate the

602
00:24:41,940 --> 00:24:43,980
unlock key correctly because obviously

603
00:24:43,980 --> 00:24:45,840
there is some other communication going

604
00:24:45,840 --> 00:24:48,140
on when the unlock key is pressed

605
00:24:48,140 --> 00:24:50,760
initiated not by the keypad controller

606
00:24:50,760 --> 00:24:53,159
but by the USB to data bridge and I

607
00:24:53,159 --> 00:24:54,659
couldn't figure out what is actually

608
00:24:54,659 --> 00:24:57,120
going on there so I couldn't collect all

609
00:24:57,120 --> 00:24:58,740
the possible hashes and create a lookup

610
00:24:58,740 --> 00:25:00,780
table by this approach but in theory it

611
00:25:00,780 --> 00:25:02,640
should be possible but I'm missing some

612
00:25:02,640 --> 00:25:04,679
crucial information here

613
00:25:04,679 --> 00:25:07,320
so yeah in Act of frustration I tried

614
00:25:07,320 --> 00:25:10,620
again to find more information about

615
00:25:10,620 --> 00:25:13,679
this hashing or mapping algorithm and

616
00:25:13,679 --> 00:25:15,539
the second time I did the web research I

617
00:25:15,539 --> 00:25:18,059
got lucky because I actually

618
00:25:18,059 --> 00:25:20,700
um here had a search result

619
00:25:20,700 --> 00:25:24,059
uh concerning the four digit input for

620
00:25:24,059 --> 00:25:27,659
zeros yeah and four zeros resulted in

621
00:25:27,659 --> 00:25:30,779
this value for six three six and so on

622
00:25:30,779 --> 00:25:33,720
and you can see here uh I've I found a

623
00:25:33,720 --> 00:25:34,860
Reddit

624
00:25:34,860 --> 00:25:36,000
um

625
00:25:36,000 --> 00:25:39,419
Reddit post with the title integer hash

626
00:25:39,419 --> 00:25:41,580
function interpreter and this sounds

627
00:25:41,580 --> 00:25:44,640
very promising yeah and indeed in this

628
00:25:44,640 --> 00:25:47,820
article there is one function described

629
00:25:47,820 --> 00:25:50,640
a h32 shift 2002.

630
00:25:50,640 --> 00:25:53,039
which generates the output I was looking

631
00:25:53,039 --> 00:25:54,840
for

632
00:25:54,840 --> 00:25:58,080
yeah and obviously this integer hash

633
00:25:58,080 --> 00:26:00,480
function was created by Thomas Wang and

634
00:26:00,480 --> 00:26:02,279
simplification is rather simple and

635
00:26:02,279 --> 00:26:04,320
looks like this so here I got really

636
00:26:04,320 --> 00:26:06,179
lucky because I have a black box to have

637
00:26:06,179 --> 00:26:08,039
a function I don't know

638
00:26:08,039 --> 00:26:10,520
and yeah by

639
00:26:10,520 --> 00:26:12,659
searching in the world wide web I could

640
00:26:12,659 --> 00:26:14,580
find the correct function at the second

641
00:26:14,580 --> 00:26:15,900
try and

642
00:26:15,900 --> 00:26:18,179
now I had all the information that were

643
00:26:18,179 --> 00:26:21,179
required for actually performing a Brute

644
00:26:21,179 --> 00:26:22,620
Force attack

645
00:26:22,620 --> 00:26:24,900
oh not all uh yeah here on the slide is

646
00:26:24,900 --> 00:26:27,120
the last missing part so what I also did

647
00:26:27,120 --> 00:26:29,400
by setting different passcodes on the

648
00:26:29,400 --> 00:26:30,299
device

649
00:26:30,299 --> 00:26:33,659
I analyzed the SSD content

650
00:26:33,659 --> 00:26:37,679
and I found some changes in one specific

651
00:26:37,679 --> 00:26:39,799
sector or one specific block

652
00:26:39,799 --> 00:26:42,720
and this block yeah stored the

653
00:26:42,720 --> 00:26:44,340
authentication information in encrypted

654
00:26:44,340 --> 00:26:46,380
way so this was the last piece I was

655
00:26:46,380 --> 00:26:48,120
missing for implementing a Brute Force

656
00:26:48,120 --> 00:26:50,220
attack and the other firmware analysis

657
00:26:50,220 --> 00:26:52,440
also showed that only the first one 12

658
00:26:52,440 --> 00:26:55,620
bytes are used for storing this kind of

659
00:26:55,620 --> 00:26:59,600
information and the AES engine

660
00:26:59,600 --> 00:27:02,039
is responsible for decrypting this block

661
00:27:02,039 --> 00:27:04,200
and I have to correctly configure it

662
00:27:04,200 --> 00:27:06,179
before and this is done by the key

663
00:27:06,179 --> 00:27:09,000
encryption key that is derived by the

664
00:27:09,000 --> 00:27:12,059
pin inputs sandbox by communication and

665
00:27:12,059 --> 00:27:15,960
if I decrypt the block correctly I have

666
00:27:15,960 --> 00:27:19,380
to see the magic signature mentioner a

667
00:27:19,380 --> 00:27:22,260
few slides before any at a specific

668
00:27:22,260 --> 00:27:24,000
offset and if I can see this magic

669
00:27:24,000 --> 00:27:26,640
signature my derived key was correct and

670
00:27:26,640 --> 00:27:29,340
I found the correct PIN code

671
00:27:29,340 --> 00:27:32,700
yeah so here's just a sample of a magic

672
00:27:32,700 --> 00:27:35,100
block in encrypted form

673
00:27:35,100 --> 00:27:38,279
and yeah the actual as key I found out

674
00:27:38,279 --> 00:27:42,179
is simply the 32 byte payload sent from

675
00:27:42,179 --> 00:27:43,559
the keypad controller By Us by

676
00:27:43,559 --> 00:27:44,760
communication

677
00:27:44,760 --> 00:27:47,220
so this is the key that is used for the

678
00:27:47,220 --> 00:27:49,620
hardware es engine but there was one

679
00:27:49,620 --> 00:27:52,380
specialty namely the byte order so as

680
00:27:52,380 --> 00:27:55,020
you can see here in this pseudo code you

681
00:27:55,020 --> 00:27:57,900
had to reverse the byte order for each

682
00:27:57,900 --> 00:28:00,419
16 byte block for the last one it was

683
00:28:00,419 --> 00:28:02,760
not important because it was only FF and

684
00:28:02,760 --> 00:28:04,440
for the first one it was more important

685
00:28:04,440 --> 00:28:06,059
so I found this all packs trial and

686
00:28:06,059 --> 00:28:06,900
error

687
00:28:06,900 --> 00:28:09,960
just um testing some some different

688
00:28:09,960 --> 00:28:11,820
combinations

689
00:28:11,820 --> 00:28:14,880
yeah and this was all I needed for

690
00:28:14,880 --> 00:28:17,640
implementing a brute forcer and a Brute

691
00:28:17,640 --> 00:28:19,200
Force Works in this case because the

692
00:28:19,200 --> 00:28:21,179
search space is rather limited I only

693
00:28:21,179 --> 00:28:24,240
have 5 to 12 digit PIN codes that are

694
00:28:24,240 --> 00:28:25,799
supported by the firmware

695
00:28:25,799 --> 00:28:29,000
yeah and let's try if I can do this

696
00:28:29,000 --> 00:28:31,380
also live

697
00:28:31,380 --> 00:28:35,640
so yeah what I've prepared here

698
00:28:35,640 --> 00:28:37,260
um there's a Windows Virtual Machine and

699
00:28:37,260 --> 00:28:39,720
now I will attack this robotin keypad

700
00:28:39,720 --> 00:28:42,299
secure if I

701
00:28:42,299 --> 00:28:45,600
just insert it here we should see

702
00:28:45,600 --> 00:28:47,760
nothing so

703
00:28:47,760 --> 00:28:50,340
um the device will only be unlocked if I

704
00:28:50,340 --> 00:28:52,200
enter the correct pin code so if I yeah

705
00:28:52,200 --> 00:28:55,080
enter some wrong PIN code here and press

706
00:28:55,080 --> 00:28:59,240
the unlock button nothing happens

707
00:29:00,240 --> 00:29:02,279
yeah and the device does not even show

708
00:29:02,279 --> 00:29:04,799
up in a USB stack of your operating

709
00:29:04,799 --> 00:29:06,120
system

710
00:29:06,120 --> 00:29:08,760
so what I've done now I've removed the

711
00:29:08,760 --> 00:29:11,820
SSD in the m.2 type form factor I have

712
00:29:11,820 --> 00:29:13,919
an external enclosure for this kind of

713
00:29:13,919 --> 00:29:17,760
SSD device and now I will just connect

714
00:29:17,760 --> 00:29:22,080
it to my Windows Virtual Machine

715
00:29:22,080 --> 00:29:24,600
and now let's see

716
00:29:24,600 --> 00:29:26,940
I didn't put any any screws I hope that

717
00:29:26,940 --> 00:29:27,840
it

718
00:29:27,840 --> 00:29:31,039
has enough contacts also in this way

719
00:29:31,039 --> 00:29:34,440
and yeah here I've developed a

720
00:29:34,440 --> 00:29:37,279
simple tool

721
00:29:37,380 --> 00:29:41,039
which reads the hidden sectors at the

722
00:29:41,039 --> 00:29:43,200
end of the drive and after a couple of

723
00:29:43,200 --> 00:29:44,880
seconds so this is a rather slow machine

724
00:29:44,880 --> 00:29:48,000
it's six years old but yeah it's about

725
00:29:48,000 --> 00:29:52,880
seven seconds and I get a pin

726
00:29:52,919 --> 00:29:55,500
and now I can see if this pin actually

727
00:29:55,500 --> 00:29:58,039
works

728
00:29:59,279 --> 00:30:02,159
by connecting device again to my Windows

729
00:30:02,159 --> 00:30:03,240
machine

730
00:30:03,240 --> 00:30:06,659
so switching to the Explorer and now I

731
00:30:06,659 --> 00:30:09,500
have to enter

732
00:30:11,880 --> 00:30:14,840
the PIN

733
00:30:17,039 --> 00:30:19,520
unlock

734
00:30:21,539 --> 00:30:26,880
and now we actually should have

735
00:30:26,880 --> 00:30:28,679
no

736
00:30:28,679 --> 00:30:32,059
my machine just froze

737
00:30:33,179 --> 00:30:35,940
so I have a green light here on my stick

738
00:30:35,940 --> 00:30:37,860
but

739
00:30:37,860 --> 00:30:39,480
my virtual machine doesn't respond

740
00:30:39,480 --> 00:30:41,659
anymore

741
00:30:41,659 --> 00:30:45,860
yeah that's the thing with live demos

742
00:30:58,200 --> 00:31:01,880
let's try to remove it

743
00:31:03,059 --> 00:31:05,580
okay so at least not a whole machine

744
00:31:05,580 --> 00:31:06,840
crashed

745
00:31:06,840 --> 00:31:10,520
oh but this one crashed obviously

746
00:31:14,279 --> 00:31:16,559
okay I will reboot the machine and we'll

747
00:31:16,559 --> 00:31:18,600
give it another try in a couple of

748
00:31:18,600 --> 00:31:22,580
minutes because I also have another

749
00:31:23,690 --> 00:31:25,559
[Music]

750
00:31:25,559 --> 00:31:28,620
no what do I want to do

751
00:31:28,620 --> 00:31:32,299
just want to power off everything

752
00:31:33,720 --> 00:31:35,880
and power it again so I will continue

753
00:31:35,880 --> 00:31:38,220
with the slides and try to repeat it um

754
00:31:38,220 --> 00:31:40,140
yeah later on

755
00:31:40,140 --> 00:31:42,539
with another one so sorry for that but

756
00:31:42,539 --> 00:31:44,220
it should work and you can also come

757
00:31:44,220 --> 00:31:46,080
after talk to me and I'll give a live

758
00:31:46,080 --> 00:31:47,580
presentation

759
00:31:47,580 --> 00:31:49,799
okay so here on the slide

760
00:31:49,799 --> 00:31:51,539
um yeah I have a backup this is what

761
00:31:51,539 --> 00:31:53,340
you've seen so I was able to actually

762
00:31:53,340 --> 00:31:56,399
perform Brute Force attack I can get a

763
00:31:56,399 --> 00:31:58,500
passcode and in all my attempts the

764
00:31:58,500 --> 00:32:01,140
passcode was correct to actually unlock

765
00:32:01,140 --> 00:32:03,299
the device and this was performed on

766
00:32:03,299 --> 00:32:04,500
another machine so if you have a first

767
00:32:04,500 --> 00:32:06,480
machine and also faster and you can also

768
00:32:06,480 --> 00:32:08,940
increase the performance of this boot

769
00:32:08,940 --> 00:32:11,039
forces so this was only done with a very

770
00:32:11,039 --> 00:32:13,200
simple as encryption and this hash

771
00:32:13,200 --> 00:32:15,539
function we've seen previously okay so

772
00:32:15,539 --> 00:32:17,700
here I have a second device

773
00:32:17,700 --> 00:32:20,460
um that use that functions differently

774
00:32:20,460 --> 00:32:22,980
it doesn't use a keypad for user input

775
00:32:22,980 --> 00:32:24,240
but it has a fingerprint sensor

776
00:32:24,240 --> 00:32:26,659
otherwise it has the same

777
00:32:26,659 --> 00:32:29,039
important features AES encryption and

778
00:32:29,039 --> 00:32:31,679
should be secure and it also has an

779
00:32:31,679 --> 00:32:34,799
administrative access feature using

780
00:32:34,799 --> 00:32:39,299
client software for Mac or for Windows

781
00:32:39,299 --> 00:32:41,340
yeah so this device looks a little bit

782
00:32:41,340 --> 00:32:42,440
different

783
00:32:42,440 --> 00:32:45,659
but with the same components we have

784
00:32:45,659 --> 00:32:48,720
some nand flash memory again on an m.2

785
00:32:48,720 --> 00:32:51,299
form factor SSD spy flash memory with

786
00:32:51,299 --> 00:32:53,760
firmware for controller we have memory

787
00:32:53,760 --> 00:32:56,279
controller of course on the other side

788
00:32:56,279 --> 00:32:57,720
we have a fingerprint sensor we have a

789
00:32:57,720 --> 00:32:59,220
fingerprint sensor controller and we

790
00:32:59,220 --> 00:33:01,020
have a USB to that average and it's the

791
00:33:01,020 --> 00:33:03,360
same as in the other device concerning

792
00:33:03,360 --> 00:33:05,100
the fingerprint sensor I have no idea

793
00:33:05,100 --> 00:33:07,380
how it works there aren't any publicly

794
00:33:07,380 --> 00:33:09,659
available data sheets so this is also an

795
00:33:09,659 --> 00:33:13,380
interesting attack Vector possibly but I

796
00:33:13,380 --> 00:33:15,419
was able to hack this device in another

797
00:33:15,419 --> 00:33:18,539
way which was way simpler and not as

798
00:33:18,539 --> 00:33:20,700
sophisticated

799
00:33:20,700 --> 00:33:24,059
so this Executives of fingerprint secure

800
00:33:24,059 --> 00:33:26,360
supports two kind of user authentication

801
00:33:26,360 --> 00:33:29,880
biometric authentication via fingerprint

802
00:33:29,880 --> 00:33:32,279
and also password-based authentication

803
00:33:32,279 --> 00:33:35,220
using a specific USB communication with

804
00:33:35,220 --> 00:33:37,980
Windows software on Mac software

805
00:33:37,980 --> 00:33:39,980
yeah so no public information about

806
00:33:39,980 --> 00:33:42,600
those chips that are used

807
00:33:42,600 --> 00:33:44,760
and you can register your fingerprints

808
00:33:44,760 --> 00:33:47,519
using specific client software and the

809
00:33:47,519 --> 00:33:49,200
client software also supports

810
00:33:49,200 --> 00:33:52,080
password-based Authentication

811
00:33:52,080 --> 00:33:54,559
yeah and here you can see the

812
00:33:54,559 --> 00:33:57,440
password-based Authentication

813
00:33:57,440 --> 00:34:01,260
dialog for the administrator so you can

814
00:34:01,260 --> 00:34:03,360
set an administrative password and this

815
00:34:03,360 --> 00:34:05,100
password gives you access to

816
00:34:05,100 --> 00:34:07,140
training or register registering new

817
00:34:07,140 --> 00:34:08,879
fingerprints and it also unlocks your

818
00:34:08,879 --> 00:34:10,139
device

819
00:34:10,139 --> 00:34:11,940
so what I did here is a software

820
00:34:11,940 --> 00:34:13,619
analysis because I had some windows

821
00:34:13,619 --> 00:34:15,659
software and Mac OS software but I only

822
00:34:15,659 --> 00:34:17,699
had a look at the windows software and

823
00:34:17,699 --> 00:34:19,560
what I found out that this client

824
00:34:19,560 --> 00:34:21,418
software communicates with the USB

825
00:34:21,418 --> 00:34:25,379
storage device using yeah some i o

826
00:34:25,379 --> 00:34:28,879
control scarcity pass through commands

827
00:34:28,879 --> 00:34:31,560
and that the USB communication is

828
00:34:31,560 --> 00:34:34,279
actually encrypted

829
00:34:34,859 --> 00:34:37,800
so here's an example in a software

830
00:34:37,800 --> 00:34:40,260
debugger x604 debug in this case and

831
00:34:40,260 --> 00:34:42,659
when you just set some breakpoints on

832
00:34:42,659 --> 00:34:45,300
the device i o control Windows API you

833
00:34:45,300 --> 00:34:46,980
can see the bi-directional communication

834
00:34:46,980 --> 00:34:49,260
but it's yeah not

835
00:34:49,260 --> 00:34:51,300
plain text it's ciphertext because it's

836
00:34:51,300 --> 00:34:53,820
a yes encrypted fortunately the windows

837
00:34:53,820 --> 00:34:56,399
client software is very analysis

838
00:34:56,399 --> 00:34:58,380
friendly at least the this firmware

839
00:34:58,380 --> 00:35:00,300
version was or software version was and

840
00:35:00,300 --> 00:35:02,460
I had meaningful symbol names as you can

841
00:35:02,460 --> 00:35:05,880
see here concerning AES encryption and

842
00:35:05,880 --> 00:35:07,500
yeah of course now it's obvious where to

843
00:35:07,500 --> 00:35:09,300
set the breakpoints during runtime and

844
00:35:09,300 --> 00:35:13,320
extract the IES keys and there I could

845
00:35:13,320 --> 00:35:15,300
also find out that hardcoded as

846
00:35:15,300 --> 00:35:16,680
encryption keys are used for device

847
00:35:16,680 --> 00:35:19,859
communication so nio was also able to

848
00:35:19,859 --> 00:35:22,200
decrypt the USB communication on just

849
00:35:22,200 --> 00:35:24,180
set breakpoints at the correct point in

850
00:35:24,180 --> 00:35:25,020
time

851
00:35:25,020 --> 00:35:28,859
yeah and this helped me with configuring

852
00:35:28,859 --> 00:35:30,900
the next attack here and here you can

853
00:35:30,900 --> 00:35:32,520
see some information at the exchange of

854
00:35:32,520 --> 00:35:36,060
sage is the manufacturer of the USB to

855
00:35:36,060 --> 00:35:39,020
data bridge for instance

856
00:35:39,420 --> 00:35:42,839
so yeah I analyzed this communication of

857
00:35:42,839 --> 00:35:45,119
the client software and made a very

858
00:35:45,119 --> 00:35:46,440
interesting and also concerning

859
00:35:46,440 --> 00:35:47,700
observation

860
00:35:47,700 --> 00:35:51,119
because before even a dialogue window is

861
00:35:51,119 --> 00:35:52,320
showed where I have to enter

862
00:35:52,320 --> 00:35:54,480
administrative password when starting

863
00:35:54,480 --> 00:35:56,940
the Windows executable there is some

864
00:35:56,940 --> 00:35:58,920
communication going on and some

865
00:35:58,920 --> 00:36:01,140
communication with some very sensitive

866
00:36:01,140 --> 00:36:03,500
data

867
00:36:03,500 --> 00:36:07,220
and when I had a look at the decrypted

868
00:36:07,220 --> 00:36:10,800
data that is going on

869
00:36:10,800 --> 00:36:12,780
I found out that

870
00:36:12,780 --> 00:36:14,460
actually the currently set

871
00:36:14,460 --> 00:36:17,760
administrative password is transmitted

872
00:36:17,760 --> 00:36:20,640
from the device to

873
00:36:20,640 --> 00:36:23,040
Windows software by USB

874
00:36:23,040 --> 00:36:26,240
so that's a rather easy one right

875
00:36:26,240 --> 00:36:30,780
yeah so that is the next demo

876
00:36:30,780 --> 00:36:31,800
um

877
00:36:31,800 --> 00:36:35,160
but it's possible to unlock this secure

878
00:36:35,160 --> 00:36:37,619
crypto device yeah in a rather magical

879
00:36:37,619 --> 00:36:39,720
Way by sending a specific USB command

880
00:36:39,720 --> 00:36:40,980
and retrieving the correct

881
00:36:40,980 --> 00:36:42,540
administrative password for unlocking

882
00:36:42,540 --> 00:36:45,660
the device if you just kindly ask it to

883
00:36:45,660 --> 00:36:48,180
do this yeah and

884
00:36:48,180 --> 00:36:50,940
I also had discussions if this was on

885
00:36:50,940 --> 00:36:54,960
purpose or if this was just yeah some

886
00:36:54,960 --> 00:36:57,180
mistake I think it was a mistake that

887
00:36:57,180 --> 00:36:59,460
some debug code was left in the actual

888
00:36:59,460 --> 00:37:02,400
production firmware that was sold

889
00:37:02,400 --> 00:37:05,880
yeah but it can of course be used as a

890
00:37:05,880 --> 00:37:08,460
backdoor

891
00:37:08,460 --> 00:37:11,900
so let's see if

892
00:37:12,119 --> 00:37:14,700
my machine works again yeah it's it's

893
00:37:14,700 --> 00:37:17,540
also quite slow

894
00:37:18,420 --> 00:37:20,460
and I've already got a new one but I

895
00:37:20,460 --> 00:37:22,140
didn't prepare it to bring it here to

896
00:37:22,140 --> 00:37:24,618
Groupon

897
00:37:27,300 --> 00:37:29,900
okay

898
00:37:34,380 --> 00:37:37,760
and even Windows 10 is quite demanding

899
00:37:37,760 --> 00:37:39,900
concerning resources if you want to run

900
00:37:39,900 --> 00:37:41,099
it

901
00:37:41,099 --> 00:37:43,200
in a virtual machine

902
00:37:43,200 --> 00:37:45,480
so what I have here is the verbalting

903
00:37:45,480 --> 00:37:48,359
executive fingerprint secure device if I

904
00:37:48,359 --> 00:37:50,099
connect this to my virtual machine I

905
00:37:50,099 --> 00:37:54,140
hope it doesn't crash as before

906
00:38:04,370 --> 00:38:07,339
[Music]

907
00:38:07,339 --> 00:38:11,880
it didn't crash but it also didn't show

908
00:38:11,880 --> 00:38:15,440
the information I want to see

909
00:38:15,780 --> 00:38:18,800
namely the device

910
00:38:42,900 --> 00:38:46,740
so what's going on with USB here

911
00:38:46,740 --> 00:38:49,939
whoever Tim

912
00:38:59,520 --> 00:39:01,920
Okay so

913
00:39:01,920 --> 00:39:03,660
now I loaded it so it didn't

914
00:39:03,660 --> 00:39:06,780
automatically pass through the

915
00:39:06,780 --> 00:39:08,940
device because what we have here is an

916
00:39:08,940 --> 00:39:11,160
emulated cd-1 Drive

917
00:39:11,160 --> 00:39:13,380
that you can see here and here we have

918
00:39:13,380 --> 00:39:15,420
mac and windows client software and if I

919
00:39:15,420 --> 00:39:17,220
open the windows software there is this

920
00:39:17,220 --> 00:39:20,579
verbatim secure executable

921
00:39:20,579 --> 00:39:21,900
mm-hmm

922
00:39:21,900 --> 00:39:23,400
I'm going to start this work with him

923
00:39:23,400 --> 00:39:26,040
secure executable we will see the log on

924
00:39:26,040 --> 00:39:28,440
dialog for the administrator yeah and

925
00:39:28,440 --> 00:39:30,720
here if I know the correct password

926
00:39:30,720 --> 00:39:32,460
I could gain access to the

927
00:39:32,460 --> 00:39:34,200
administrative interface

928
00:39:34,200 --> 00:39:36,540
and here it shouldn't work

929
00:39:36,540 --> 00:39:38,820
how is everything it's quite slow here

930
00:39:38,820 --> 00:39:40,760
yeah but password authentication failed

931
00:39:40,760 --> 00:39:46,260
and so what I did is I have written a

932
00:39:46,260 --> 00:39:47,820
simple

933
00:39:47,820 --> 00:39:50,099
total

934
00:39:50,099 --> 00:39:51,480
this one here

935
00:39:51,480 --> 00:39:53,220
so the verbalting fingerprint secure

936
00:39:53,220 --> 00:39:55,800
password Retriever and if I click on the

937
00:39:55,800 --> 00:39:58,440
retrieve password button I get the

938
00:39:58,440 --> 00:40:00,420
correct password so this tool simply

939
00:40:00,420 --> 00:40:03,119
sends one specific USB command gets a

940
00:40:03,119 --> 00:40:05,220
response and the response contains the

941
00:40:05,220 --> 00:40:07,079
secret password it's automatically

942
00:40:07,079 --> 00:40:09,060
copied to the clipboard so if I switch

943
00:40:09,060 --> 00:40:11,880
back to this one here

944
00:40:11,880 --> 00:40:13,740
put in here

945
00:40:13,740 --> 00:40:15,240
and

946
00:40:15,240 --> 00:40:20,598
let's say next what it also failed

947
00:40:21,960 --> 00:40:24,240
so the demo gods are not with me today

948
00:40:24,240 --> 00:40:26,899
obviously

949
00:40:32,520 --> 00:40:35,180
hmm

950
00:40:35,220 --> 00:40:38,660
okay that's strange

951
00:40:44,940 --> 00:40:48,260
let's try it again

952
00:41:02,640 --> 00:41:05,160
I think there's some something going on

953
00:41:05,160 --> 00:41:07,619
with my USB stack here because the

954
00:41:07,619 --> 00:41:10,680
machine hangs again so I cannot move any

955
00:41:10,680 --> 00:41:13,700
any windows

956
00:41:14,579 --> 00:41:16,920
Okay so

957
00:41:16,920 --> 00:41:20,220
then resorts to other measures to the

958
00:41:20,220 --> 00:41:21,480
back up

959
00:41:21,480 --> 00:41:23,880
I'm sorry for that I hope that I can

960
00:41:23,880 --> 00:41:26,220
also show it afterwards you know live

961
00:41:26,220 --> 00:41:28,680
setting what I've also prepared

962
00:41:28,680 --> 00:41:31,859
um Here video it's already available on

963
00:41:31,859 --> 00:41:35,940
YouTube and I wanted to show you is

964
00:41:35,940 --> 00:41:38,820
yeah you can extract

965
00:41:38,820 --> 00:41:42,859
the password so where's the password

966
00:41:43,320 --> 00:41:47,119
so here we've seen this dialog

967
00:41:47,640 --> 00:41:51,379
here I enter a wrong password

968
00:41:54,359 --> 00:41:56,099
and I'm going forward

969
00:41:56,099 --> 00:41:58,680
yeah now we see the um

970
00:41:58,680 --> 00:42:01,140
password retrieval tool that we've seen

971
00:42:01,140 --> 00:42:04,500
a couple of minutes ago

972
00:42:04,500 --> 00:42:06,300
and now I click on retrieve password

973
00:42:06,300 --> 00:42:07,619
it's the same password and it's actually

974
00:42:07,619 --> 00:42:09,480
the same device from the video so I'm

975
00:42:09,480 --> 00:42:11,760
confused why it doesn't work and it

976
00:42:11,760 --> 00:42:13,980
worked yeah this morning when I tested

977
00:42:13,980 --> 00:42:17,720
it but something's screwed up with my

978
00:42:17,720 --> 00:42:20,220
virtualbox setting and USB pass through

979
00:42:20,220 --> 00:42:22,380
yeah but here you could see I could

980
00:42:22,380 --> 00:42:24,480
successfully unlock the device then you

981
00:42:24,480 --> 00:42:26,040
will get another partition besides the

982
00:42:26,040 --> 00:42:28,320
emulated CD-ROM partition rubber team HD

983
00:42:28,320 --> 00:42:30,420
there is some sensitive data on there

984
00:42:30,420 --> 00:42:32,760
and you have an unauthorized access to

985
00:42:32,760 --> 00:42:35,220
the device by yeah getting access there

986
00:42:35,220 --> 00:42:36,599
and you can also register new

987
00:42:36,599 --> 00:42:37,920
fingerprints and delete existing

988
00:42:37,920 --> 00:42:40,980
fingerprints if you wanted to Okay so

989
00:42:40,980 --> 00:42:43,440
this is that and

990
00:42:43,440 --> 00:42:46,920
yeah I will also use the backup for the

991
00:42:46,920 --> 00:42:48,960
other attack because I think it's it

992
00:42:48,960 --> 00:42:51,000
also won't work with to keep it secure

993
00:42:51,000 --> 00:42:53,160
unfortunately

994
00:42:53,160 --> 00:42:58,040
so let's try now let's try this here

995
00:43:00,359 --> 00:43:03,300
I can also skip the boring stuff that

996
00:43:03,300 --> 00:43:05,940
you've seen previously so it's the same

997
00:43:05,940 --> 00:43:09,000
attack I did a couple of minutes ago but

998
00:43:09,000 --> 00:43:12,300
with screwing this time

999
00:43:12,300 --> 00:43:15,740
so we have our

1000
00:43:15,780 --> 00:43:18,420
ah keep it secret cracker

1001
00:43:18,420 --> 00:43:22,160
this step still worked

1002
00:43:26,579 --> 00:43:29,099
yeah I'm gonna skip it here so

1003
00:43:29,099 --> 00:43:30,720
offline boot cross attack we have the

1004
00:43:30,720 --> 00:43:32,220
pin it's also the same pin because it's

1005
00:43:32,220 --> 00:43:35,339
the same device for this purpose and

1006
00:43:35,339 --> 00:43:39,119
yeah if I assemble the device again

1007
00:43:39,119 --> 00:43:41,700
connect it to my PC and then enter the

1008
00:43:41,700 --> 00:43:45,480
correct pin with some time lapse

1009
00:43:45,480 --> 00:43:48,240
the obvious thing should happen namely

1010
00:43:48,240 --> 00:43:50,760
the secure partition should be unlocked

1011
00:43:50,760 --> 00:43:53,280
and I should have a Nexus

1012
00:43:53,280 --> 00:43:56,640
to the sensitive data stored on it

1013
00:43:56,640 --> 00:44:02,040
yeah so in this case it worked okay

1014
00:44:02,040 --> 00:44:04,680
so back to the slides because I have

1015
00:44:04,680 --> 00:44:06,180
some more

1016
00:44:06,180 --> 00:44:09,119
not that much time left

1017
00:44:09,119 --> 00:44:12,140
so another issue was Data authenticity

1018
00:44:12,140 --> 00:44:14,099
concerning this device we've seen the

1019
00:44:14,099 --> 00:44:17,160
emulated CD-ROM drive the

1020
00:44:17,160 --> 00:44:18,960
image for the CD-ROM drive is also

1021
00:44:18,960 --> 00:44:23,160
stored on the SSD in some hidden sectors

1022
00:44:23,160 --> 00:44:23,940
um

1023
00:44:23,940 --> 00:44:27,180
yeah and I found out that I can also

1024
00:44:27,180 --> 00:44:30,540
manipulate this either image rather

1025
00:44:30,540 --> 00:44:32,520
simply by generating my own one and just

1026
00:44:32,520 --> 00:44:36,960
storing it at the specific disk offset

1027
00:44:36,960 --> 00:44:38,700
and what is possible here is the text

1028
00:44:38,700 --> 00:44:41,940
scenario is I could put malware on the

1029
00:44:41,940 --> 00:44:44,640
device I can manipulate existing files I

1030
00:44:44,640 --> 00:44:46,680
could add some files so here I have a

1031
00:44:46,680 --> 00:44:48,900
malware access for instance or the web

1032
00:44:48,900 --> 00:44:51,240
secure X that I could manipulate so this

1033
00:44:51,240 --> 00:44:53,819
can be useful for a supply chain attack

1034
00:44:53,819 --> 00:44:56,400
yeah and here is my poor hackers not

1035
00:44:56,400 --> 00:44:58,380
targeted supply chain attack as a

1036
00:44:58,380 --> 00:45:00,599
thought experiment I didn't do this but

1037
00:45:00,599 --> 00:45:03,540
one could actually buy some vulnerable

1038
00:45:03,540 --> 00:45:06,780
devices in online shops modify them by

1039
00:45:06,780 --> 00:45:08,339
adding some malware for instance to the

1040
00:45:08,339 --> 00:45:09,960
easer image or by manipulating the

1041
00:45:09,960 --> 00:45:12,300
firmware if you prefers to then he could

1042
00:45:12,300 --> 00:45:14,460
return the modified devices within 30

1043
00:45:14,460 --> 00:45:16,200
days for instance and get his money back

1044
00:45:16,200 --> 00:45:18,480
and then hope that's the return devices

1045
00:45:18,480 --> 00:45:21,720
are not destroyed but all but result to

1046
00:45:21,720 --> 00:45:24,420
some users and then he maybe have to

1047
00:45:24,420 --> 00:45:26,420
wait for potential victims

1048
00:45:26,420 --> 00:45:30,000
and could profit off of this

1049
00:45:30,000 --> 00:45:31,560
here and

1050
00:45:31,560 --> 00:45:34,800
I don't know him how many companies this

1051
00:45:34,800 --> 00:45:36,119
kind of attack would actually be

1052
00:45:36,119 --> 00:45:40,859
detected yeah if they get a already used

1053
00:45:40,859 --> 00:45:42,780
device that was returned for example to

1054
00:45:42,780 --> 00:45:44,040
Amazon

1055
00:45:44,040 --> 00:45:46,440
that was tampered with

1056
00:45:46,440 --> 00:45:48,240
okay I will skip the other examples

1057
00:45:48,240 --> 00:45:50,220
because they are the same have the same

1058
00:45:50,220 --> 00:45:52,200
issues but in a different form factor

1059
00:45:52,200 --> 00:45:54,540
pcbs look

1060
00:45:54,540 --> 00:45:57,660
different but are yeah working in the

1061
00:45:57,660 --> 00:45:58,920
same way

1062
00:45:58,920 --> 00:46:00,720
the same for this device

1063
00:46:00,720 --> 00:46:03,660
so nothing special here to see so here's

1064
00:46:03,660 --> 00:46:06,300
another example that had different

1065
00:46:06,300 --> 00:46:10,280
security issue yeah leaping

1066
00:46:10,280 --> 00:46:13,079
kp001 that was a device from China also

1067
00:46:13,079 --> 00:46:15,240
bought wire Amazon had of course the

1068
00:46:15,240 --> 00:46:17,220
strongest military technology according

1069
00:46:17,220 --> 00:46:19,740
to their marketing and also yeah a

1070
00:46:19,740 --> 00:46:22,859
keypad 6 to 14 digit PIN codes and

1071
00:46:22,859 --> 00:46:25,980
interesting passcode recovery feature

1072
00:46:25,980 --> 00:46:28,260
um yeah the product website was very

1073
00:46:28,260 --> 00:46:30,060
interesting and that's why I bought this

1074
00:46:30,060 --> 00:46:31,680
device because the military grade was

1075
00:46:31,680 --> 00:46:34,740
named there and the recovery

1076
00:46:34,740 --> 00:46:36,480
um the other company website also looked

1077
00:46:36,480 --> 00:46:38,220
interesting with Enterprise honor and

1078
00:46:38,220 --> 00:46:40,079
some certificates that at least made no

1079
00:46:40,079 --> 00:46:41,819
sense in context of the products they

1080
00:46:41,819 --> 00:46:43,859
are selling so FCC for radio

1081
00:46:43,859 --> 00:46:46,260
communication stuff I don't know why

1082
00:46:46,260 --> 00:46:47,819
this device should be certified by the

1083
00:46:47,819 --> 00:46:50,119
FCC

1084
00:46:50,520 --> 00:46:53,160
um yeah and the password recovery

1085
00:46:53,160 --> 00:46:56,640
feature there is one concerning a Serial

1086
00:46:56,640 --> 00:46:58,319
ID that is printed on there and you

1087
00:46:58,319 --> 00:47:02,099
could send an email to this email

1088
00:47:02,099 --> 00:47:04,380
address so this is from a video that is

1089
00:47:04,380 --> 00:47:06,000
contained on the drive itself when you

1090
00:47:06,000 --> 00:47:08,520
buy it and then you will get a dynamic

1091
00:47:08,520 --> 00:47:11,099
password only works up to 10 times but I

1092
00:47:11,099 --> 00:47:13,200
never got feedback from them so I sent

1093
00:47:13,200 --> 00:47:14,520
them the serial number of my test

1094
00:47:14,520 --> 00:47:16,619
devices and they never answered me so I

1095
00:47:16,619 --> 00:47:18,359
don't know how this Dynamic password

1096
00:47:18,359 --> 00:47:21,000
feature works but it sounds very

1097
00:47:21,000 --> 00:47:23,880
suspicious yeah but the attack I was

1098
00:47:23,880 --> 00:47:26,579
able to pull off is this one here you

1099
00:47:26,579 --> 00:47:28,619
can see the hardware layout and the

1100
00:47:28,619 --> 00:47:30,839
suspicious thing was this high-speed

1101
00:47:30,839 --> 00:47:34,560
analog switch that I have here and this

1102
00:47:34,560 --> 00:47:36,420
high speed analog switch is connected to

1103
00:47:36,420 --> 00:47:39,480
the data lines of the USB so it switches

1104
00:47:39,480 --> 00:47:42,839
between data lines and here we have an

1105
00:47:42,839 --> 00:47:45,359
unmarked chip this one is responsible

1106
00:47:45,359 --> 00:47:47,579
also for the pin input

1107
00:47:47,579 --> 00:47:51,300
and what I realized is

1108
00:47:51,300 --> 00:47:53,400
that it's possible to form a so-called

1109
00:47:53,400 --> 00:47:56,760
chip swapping attack so what I did is I

1110
00:47:56,760 --> 00:47:58,200
bought two devices one device is

1111
00:47:58,200 --> 00:48:00,300
attacker controlled I set a pin on this

1112
00:48:00,300 --> 00:48:02,339
device with yeah

1113
00:48:02,339 --> 00:48:03,540
um

1114
00:48:03,540 --> 00:48:06,839
with a known yeah configuration

1115
00:48:06,839 --> 00:48:09,119
and then I had a Target device there I

1116
00:48:09,119 --> 00:48:10,920
set another pin and then I simply

1117
00:48:10,920 --> 00:48:13,020
desoldered the chip from both devices

1118
00:48:13,020 --> 00:48:16,440
put the attacker controlled chip on my

1119
00:48:16,440 --> 00:48:18,119
target device and then I was able to

1120
00:48:18,119 --> 00:48:20,760
unlock the device with the correct

1121
00:48:20,760 --> 00:48:22,260
decrypted data

1122
00:48:22,260 --> 00:48:24,780
so here there is no key derivation going

1123
00:48:24,780 --> 00:48:26,400
on with the user input have you seen in

1124
00:48:26,400 --> 00:48:28,680
the previous example but yeah we have

1125
00:48:28,680 --> 00:48:30,720
some kind of other key management I

1126
00:48:30,720 --> 00:48:33,000
don't know how it's done in those black

1127
00:48:33,000 --> 00:48:35,339
boxes we have here as chips yeah but

1128
00:48:35,339 --> 00:48:36,599
it's insecure

1129
00:48:36,599 --> 00:48:38,520
simple chip solving attack so the paper

1130
00:48:38,520 --> 00:48:40,440
clip hack concerning the analogs which

1131
00:48:40,440 --> 00:48:43,440
didn't work out because I think

1132
00:48:43,440 --> 00:48:46,740
if it's possible to switch the data

1133
00:48:46,740 --> 00:48:48,480
lines

1134
00:48:48,480 --> 00:48:50,040
I think it will also be possible to

1135
00:48:50,040 --> 00:48:52,319
unlock it maybe but I couldn't figure it

1136
00:48:52,319 --> 00:48:53,400
out

1137
00:48:53,400 --> 00:48:55,680
okay yeah and there of course is an

1138
00:48:55,680 --> 00:48:58,079
authentication bypass attack so on this

1139
00:48:58,079 --> 00:48:59,579
slide you can see all the found security

1140
00:48:59,579 --> 00:49:01,440
vulnerabilities actually there are only

1141
00:49:01,440 --> 00:49:04,619
six but several devices affected I think

1142
00:49:04,619 --> 00:49:06,960
six devices in total with the

1143
00:49:06,960 --> 00:49:09,839
corresponding cve IDs so it's just for

1144
00:49:09,839 --> 00:49:10,920
reference

1145
00:49:10,920 --> 00:49:13,140
um here I don't know seven it were seven

1146
00:49:13,140 --> 00:49:14,579
security issues so here are the seven

1147
00:49:14,579 --> 00:49:17,880
CDE IDs and affected devices concerning

1148
00:49:17,880 --> 00:49:20,220
my research

1149
00:49:20,220 --> 00:49:21,420
um

1150
00:49:21,420 --> 00:49:24,960
yeah and concerning vendor manufacturer

1151
00:49:24,960 --> 00:49:28,079
feedback I didn't get any directly but

1152
00:49:28,079 --> 00:49:30,180
robotim released security updates at the

1153
00:49:30,180 --> 00:49:33,540
end of July and I had a look two weeks

1154
00:49:33,540 --> 00:49:36,000
ago or yeah two and a half weeks ago at

1155
00:49:36,000 --> 00:49:38,060
the updates only briefly

1156
00:49:38,060 --> 00:49:40,800
and what they did is they released the

1157
00:49:40,800 --> 00:49:43,200
windows updater tool with some new

1158
00:49:43,200 --> 00:49:45,780
device firmware for specific or for

1159
00:49:45,780 --> 00:49:47,700
different vulnerable devices

1160
00:49:47,700 --> 00:49:50,040
and here's the example for the verbatim

1161
00:49:50,040 --> 00:49:51,839
keypad secure we've seen previously so

1162
00:49:51,839 --> 00:49:54,060
there's a lot of software it is also

1163
00:49:54,060 --> 00:49:55,619
interesting to analyze the software a

1164
00:49:55,619 --> 00:49:57,540
little further because maybe bad USB

1165
00:49:57,540 --> 00:49:59,339
devices using malware are now possible

1166
00:49:59,339 --> 00:50:01,859
if you know how to program the Spy flash

1167
00:50:01,859 --> 00:50:03,720
memory chip or the firmware

1168
00:50:03,720 --> 00:50:06,540
via Windows system

1169
00:50:06,540 --> 00:50:08,579
because I had to use a programmer and do

1170
00:50:08,579 --> 00:50:10,740
it physically now I can maybe program

1171
00:50:10,740 --> 00:50:14,760
the firmware using a USB flasher tool

1172
00:50:14,760 --> 00:50:16,619
um in software but I haven't had a look

1173
00:50:16,619 --> 00:50:18,780
here

1174
00:50:18,780 --> 00:50:21,240
yeah and what I found out it is that

1175
00:50:21,240 --> 00:50:22,980
they have fixed some of the issues but

1176
00:50:22,980 --> 00:50:25,920
not all of them so what I fixed is the

1177
00:50:25,920 --> 00:50:27,960
AAS ECP encryption mode they're now

1178
00:50:27,960 --> 00:50:31,260
using AES XTS or more secure encryption

1179
00:50:31,260 --> 00:50:33,180
mode is actually designed for this kind

1180
00:50:33,180 --> 00:50:35,339
of storage devices the firmware

1181
00:50:35,339 --> 00:50:36,839
manipulation is still possible but I

1182
00:50:36,839 --> 00:50:39,359
think they cannot fix this due to the

1183
00:50:39,359 --> 00:50:42,060
hardware using the yeah microcontroller

1184
00:50:42,060 --> 00:50:43,560
does not support any of these features

1185
00:50:43,560 --> 00:50:46,440
they have also fixed at least for now

1186
00:50:46,440 --> 00:50:49,260
the Brute Force attack I have shown you

1187
00:50:49,260 --> 00:50:51,119
at least in the video because they

1188
00:50:51,119 --> 00:50:54,059
switched to AES XTS and they changed the

1189
00:50:54,059 --> 00:50:56,460
PIN code verification mechanism and I

1190
00:50:56,460 --> 00:50:58,800
haven't figured out yet how it now works

1191
00:50:58,800 --> 00:51:02,280
but in principle you just have to find

1192
00:51:02,280 --> 00:51:04,619
out what they are now doing with the

1193
00:51:04,619 --> 00:51:06,960
hardware as encryption engine and

1194
00:51:06,960 --> 00:51:09,599
reproduce it in yeah USC code and then

1195
00:51:09,599 --> 00:51:11,819
you have an offline Brute Force take

1196
00:51:11,819 --> 00:51:14,099
again online brute force is now already

1197
00:51:14,099 --> 00:51:16,500
possible if you are willing to patch the

1198
00:51:16,500 --> 00:51:18,420
firmware or write your own firmware and

1199
00:51:18,420 --> 00:51:20,359
use the Hardware AES encryption engine

1200
00:51:20,359 --> 00:51:23,280
yeah on a live device

1201
00:51:23,280 --> 00:51:25,980
but I don't have a programmers manual so

1202
00:51:25,980 --> 00:51:28,980
it's very cumbersome to yeah programs

1203
00:51:28,980 --> 00:51:31,859
such a firmware for this encryption

1204
00:51:31,859 --> 00:51:34,140
engine yeah and concerning the log out I

1205
00:51:34,140 --> 00:51:36,300
was surprised they also did not fix this

1206
00:51:36,300 --> 00:51:39,000
so I bought new devices three weeks ago

1207
00:51:39,000 --> 00:51:41,520
and tested the manual Brute Force attack

1208
00:51:41,520 --> 00:51:44,940
and after 20 failed consecutive login

1209
00:51:44,940 --> 00:51:47,940
attempts and even the 30 and 40 device

1210
00:51:47,940 --> 00:51:50,160
does not lock and does not reset so it's

1211
00:51:50,160 --> 00:51:52,559
still not fixed I don't know why

1212
00:51:52,559 --> 00:51:54,300
and concerning the executive think of

1213
00:51:54,300 --> 00:51:57,720
insecure they have only fixed the

1214
00:51:57,720 --> 00:51:59,520
password retrieval attack that we've

1215
00:51:59,520 --> 00:52:01,380
seen so if I send specific command this

1216
00:52:01,380 --> 00:52:03,000
command is not supported anymore by the

1217
00:52:03,000 --> 00:52:05,940
firmware uh luckily yeah but all the

1218
00:52:05,940 --> 00:52:08,099
other issues we have they have not fixed

1219
00:52:08,099 --> 00:52:10,440
even the as ECB encryption for the user

1220
00:52:10,440 --> 00:52:11,880
data and I don't know why because they

1221
00:52:11,880 --> 00:52:13,559
fixed it for another device

1222
00:52:13,559 --> 00:52:15,960
but not for this one I don't know yeah

1223
00:52:15,960 --> 00:52:17,960
but these are my my current results

1224
00:52:17,960 --> 00:52:20,480
concerning the July patch

1225
00:52:20,480 --> 00:52:24,000
yes so I'm almost out of time so there

1226
00:52:24,000 --> 00:52:26,220
was also an interesting yeah web finds

1227
00:52:26,220 --> 00:52:29,359
so this was the Amazon storage

1228
00:52:29,359 --> 00:52:32,220
for the executive fingerprint Amazon's

1229
00:52:32,220 --> 00:52:33,900
talk with the executive fingerprint

1230
00:52:33,900 --> 00:52:37,380
Secure Storage that I've bought 100 and

1231
00:52:37,380 --> 00:52:40,859
yeah six euros it's their cost and I

1232
00:52:40,859 --> 00:52:43,020
could also find some other sources where

1233
00:52:43,020 --> 00:52:45,660
I can get the same enclosure

1234
00:52:45,660 --> 00:52:48,660
for a lower price but without the actual

1235
00:52:48,660 --> 00:52:51,119
SSD storage if I would buy 100 000

1236
00:52:51,119 --> 00:52:52,680
pieces so

1237
00:52:52,680 --> 00:52:54,540
yeah at local sources you can find

1238
00:52:54,540 --> 00:52:56,400
different devices that I've just

1239
00:52:56,400 --> 00:52:58,680
rebranded for different vendors actually

1240
00:52:58,680 --> 00:53:01,920
and the same with this keypad enclosure

1241
00:53:01,920 --> 00:53:04,980
that is also used by verton for instance

1242
00:53:04,980 --> 00:53:07,740
so here my conclusions new portable

1243
00:53:07,740 --> 00:53:09,079
storage devices

1244
00:53:09,079 --> 00:53:11,880
with actually old security issues that

1245
00:53:11,880 --> 00:53:14,220
have been known for at least one and a

1246
00:53:14,220 --> 00:53:15,839
half decades or even longer are still

1247
00:53:15,839 --> 00:53:16,920
produced

1248
00:53:16,920 --> 00:53:20,819
today and also sold and some of those

1249
00:53:20,819 --> 00:53:22,680
security issues are hard or even

1250
00:53:22,680 --> 00:53:24,599
impossible to fix concerning the

1251
00:53:24,599 --> 00:53:27,240
hardware design that is used

1252
00:53:27,240 --> 00:53:29,400
so there may be forever bugs concerning

1253
00:53:29,400 --> 00:53:30,900
some of those devices that have been

1254
00:53:30,900 --> 00:53:33,300
sold the last couple of years that may

1255
00:53:33,300 --> 00:53:34,980
affect the device until it's end off

1256
00:53:34,980 --> 00:53:38,460
yeah life actually

1257
00:53:38,460 --> 00:53:40,680
so one of my recommendations for users

1258
00:53:40,680 --> 00:53:45,420
yeah if you're going to buy a portable

1259
00:53:45,420 --> 00:53:47,520
secure storage devices choose them

1260
00:53:47,520 --> 00:53:48,839
wisely

1261
00:53:48,839 --> 00:53:50,640
perform a thorough online research

1262
00:53:50,640 --> 00:53:53,339
before buying such a product

1263
00:53:53,339 --> 00:53:55,500
and if you buy them in your large

1264
00:53:55,500 --> 00:53:58,040
quantities do it even more so

1265
00:53:58,040 --> 00:54:01,440
do not have faith in their products

1266
00:54:01,440 --> 00:54:03,180
certificates and marketing claims that

1267
00:54:03,180 --> 00:54:04,380
you can find on the vendors or

1268
00:54:04,380 --> 00:54:07,440
manufacturers yeah website and it's

1269
00:54:07,440 --> 00:54:09,180
always a good idea to ask for further

1270
00:54:09,180 --> 00:54:12,140
security testing Beyond some

1271
00:54:12,140 --> 00:54:15,660
certificates they you may receive and

1272
00:54:15,660 --> 00:54:17,520
also very important the scope of the

1273
00:54:17,520 --> 00:54:19,020
perform tests

1274
00:54:19,020 --> 00:54:21,960
because yeah that's very critical

1275
00:54:21,960 --> 00:54:23,760
yeah and for manufacturers and vendors

1276
00:54:23,760 --> 00:54:26,460
also some recommendation yeah check your

1277
00:54:26,460 --> 00:54:29,280
product for security issues

1278
00:54:29,280 --> 00:54:31,500
before on producing or mass producing

1279
00:54:31,500 --> 00:54:33,240
them and selling them so when you have a

1280
00:54:33,240 --> 00:54:35,339
prototype just ask some knowledge

1281
00:54:35,339 --> 00:54:37,559
knowledgeable it professionals to have a

1282
00:54:37,559 --> 00:54:38,880
look at

1283
00:54:38,880 --> 00:54:41,760
your staff concerning all cryptography

1284
00:54:41,760 --> 00:54:43,319
it's a good idea to hire actual

1285
00:54:43,319 --> 00:54:45,300
cryptographers because they know what

1286
00:54:45,300 --> 00:54:46,260
they are doing

1287
00:54:46,260 --> 00:54:48,079
hopefully

1288
00:54:48,079 --> 00:54:50,599
I would also like to see that

1289
00:54:50,599 --> 00:54:52,859
manufacturers of such devices publish

1290
00:54:52,859 --> 00:54:54,900
their crypto design so that it's yeah

1291
00:54:54,900 --> 00:54:57,059
just known and not a black box until

1292
00:54:57,059 --> 00:54:58,920
somebody does the reverse engineering

1293
00:54:58,920 --> 00:55:02,460
and finds out how it actually works

1294
00:55:02,460 --> 00:55:04,260
um and it's also important to think of

1295
00:55:04,260 --> 00:55:06,059
the product as a whole so you have to

1296
00:55:06,059 --> 00:55:08,400
think of your soft firm and Hardware if

1297
00:55:08,400 --> 00:55:10,140
they have all these components like this

1298
00:55:10,140 --> 00:55:11,940
executive fingerprint secure for

1299
00:55:11,940 --> 00:55:12,780
instance

1300
00:55:12,780 --> 00:55:15,480
yeah and generally a good idea is also

1301
00:55:15,480 --> 00:55:18,300
refrain from false marketing claims

1302
00:55:18,300 --> 00:55:21,359
so military grade and unhikeable and

1303
00:55:21,359 --> 00:55:23,220
stuff like that so maybe it's not true

1304
00:55:23,220 --> 00:55:25,380
when someone takes a closer look okay

1305
00:55:25,380 --> 00:55:27,359
here are some references

1306
00:55:27,359 --> 00:55:28,859
so thank you very much for your

1307
00:55:28,859 --> 00:55:30,680
attention that's it

1308
00:55:30,680 --> 00:55:38,819
[Applause]

1309
00:55:38,819 --> 00:55:42,020
okay time for questions

1310
00:55:43,619 --> 00:55:45,480
I may ask the first one if there are

1311
00:55:45,480 --> 00:55:46,740
none but

1312
00:55:46,740 --> 00:55:48,599
all right while I'm walking are there

1313
00:55:48,599 --> 00:55:51,780
any other manufacturers that you've

1314
00:55:51,780 --> 00:55:54,480
tested and if so can you recommend to us

1315
00:55:54,480 --> 00:55:57,000
any certain brands or I think currently

1316
00:55:57,000 --> 00:55:59,460
I cannot recommend one of them I have

1317
00:55:59,460 --> 00:56:01,200
tested other devices

1318
00:56:01,200 --> 00:56:03,960
um I have some devices where maybe more

1319
00:56:03,960 --> 00:56:06,359
sophisticated attacks may be useful like

1320
00:56:06,359 --> 00:56:08,420
glitching like we've seen yesterday with

1321
00:56:08,420 --> 00:56:11,160
SpaceX dishes

1322
00:56:11,160 --> 00:56:13,559
yeah and I've also tested a lot of

1323
00:56:13,559 --> 00:56:15,180
devices with fingerprint sensors and I

1324
00:56:15,180 --> 00:56:17,760
didn't have a closer look at how Those

1325
00:56:17,760 --> 00:56:20,579
sensors work how AES keys are derivated

1326
00:56:20,579 --> 00:56:22,920
from the user input yeah it's also very

1327
00:56:22,920 --> 00:56:24,359
new for me and I'm learning new stuff

1328
00:56:24,359 --> 00:56:26,598
there

1329
00:56:27,119 --> 00:56:30,740
hi I just got a question about the USB

1330
00:56:30,740 --> 00:56:34,160
drives who had the client installed

1331
00:56:34,160 --> 00:56:37,440
you took a look on the possibility to

1332
00:56:37,440 --> 00:56:40,440
get to retrieve the key by sending a

1333
00:56:40,440 --> 00:56:42,900
certain command and getting the key did

1334
00:56:42,900 --> 00:56:44,599
you also try to

1335
00:56:44,599 --> 00:56:48,300
use the command post authentication and

1336
00:56:48,300 --> 00:56:50,940
see if they were available before you

1337
00:56:50,940 --> 00:56:53,660
were authenticated

1338
00:56:54,059 --> 00:56:55,980
um do you mean if the data itself was

1339
00:56:55,980 --> 00:56:58,020
available before well for example if you

1340
00:56:58,020 --> 00:57:00,359
want to read uh you want to read in

1341
00:57:00,359 --> 00:57:01,800
fingerprints

1342
00:57:01,800 --> 00:57:03,359
um you need to authenticate and then

1343
00:57:03,359 --> 00:57:05,280
those API or those calls are available

1344
00:57:05,280 --> 00:57:07,260
and

1345
00:57:07,260 --> 00:57:09,960
um if you did not authenticate we're

1346
00:57:09,960 --> 00:57:12,900
also uh those calls available

1347
00:57:12,900 --> 00:57:15,059
I didn't have a look into this and

1348
00:57:15,059 --> 00:57:15,900
concerning the fingerprint

1349
00:57:15,900 --> 00:57:17,339
authentication this was performed

1350
00:57:17,339 --> 00:57:18,960
completely in Hardware so the software

1351
00:57:18,960 --> 00:57:20,819
was not involved there so there was a

1352
00:57:20,819 --> 00:57:21,960
different microcontroller for the

1353
00:57:21,960 --> 00:57:24,180
fingerprint sensor and you have both

1354
00:57:24,180 --> 00:57:26,460
authentication methods uh yeah using

1355
00:57:26,460 --> 00:57:27,540
hardware-based fingerprint

1356
00:57:27,540 --> 00:57:30,660
authentication or the password as USB

1357
00:57:30,660 --> 00:57:33,900
communication also only is used when

1358
00:57:33,900 --> 00:57:35,760
using the client software here and not

1359
00:57:35,760 --> 00:57:37,980
the fingerprints so you can also unlock

1360
00:57:37,980 --> 00:57:40,020
the device without any Windows or Mac

1361
00:57:40,020 --> 00:57:44,700
software only by touching it yeah

1362
00:57:44,700 --> 00:57:47,040
I think you're out of time going once

1363
00:57:47,040 --> 00:57:51,180
more I I will just say I'm a little glad

1364
00:57:51,180 --> 00:57:53,700
that the live demo didn't work because

1365
00:57:53,700 --> 00:57:55,800
in the video you could see your uh

1366
00:57:55,800 --> 00:57:58,200
custom your hardware setup which we

1367
00:57:58,200 --> 00:57:59,220
couldn't see when you're holding stuff

1368
00:57:59,220 --> 00:58:01,440
that's kind of cool yeah but it's the

1369
00:58:01,440 --> 00:58:02,520
same hardware setup I have here it's

1370
00:58:02,520 --> 00:58:04,260
just an external enclosure for instance

1371
00:58:04,260 --> 00:58:06,540
and the cable and that's it so very cool

1372
00:58:06,540 --> 00:58:08,940
it's very simple and it should be

1373
00:58:08,940 --> 00:58:10,680
reproducible so if you're interested in

1374
00:58:10,680 --> 00:58:12,300
all the information should be in the

1375
00:58:12,300 --> 00:58:14,640
slides to reproduce thank you thank you

1376
00:58:14,640 --> 00:58:15,720
very much

1377
00:58:15,720 --> 00:58:18,259
welcome

