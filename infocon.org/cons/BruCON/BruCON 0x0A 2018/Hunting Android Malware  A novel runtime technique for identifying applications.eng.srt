1
00:00:02,530 --> 00:00:07,779
so yeah welcome<font color="#E5E5E5"> to</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> I'm</font>

2
00:00:05,260 --> 00:00:10,059
<font color="#E5E5E5">gonna be</font><font color="#CCCCCC"> sharing with you some</font><font color="#E5E5E5"> fun that</font>

3
00:00:07,779 --> 00:00:13,660
<font color="#E5E5E5">I've had with regards to hunting Android</font>

4
00:00:10,059 --> 00:00:14,860
malware so Who am<font color="#E5E5E5"> I I'm Chris hello</font>

5
00:00:13,660 --> 00:00:17,650
everyone nice<font color="#CCCCCC"> to meet you</font>

6
00:00:14,860 --> 00:00:19,600
how awesome is<font color="#CCCCCC"> bruecke on that's that's</font>

7
00:00:17,650 --> 00:00:21,038
your cue to<font color="#E5E5E5"> make some noise you don't</font>

8
00:00:19,600 --> 00:00:22,689
<font color="#E5E5E5">have to die we can just keep awkward</font>

9
00:00:21,039 --> 00:00:26,080
silence I can I can roll with<font color="#E5E5E5"> that as</font>

10
00:00:22,689 --> 00:00:27,490
well<font color="#CCCCCC"> but</font><font color="#E5E5E5"> yeah hacking and beer like two</font>

11
00:00:26,080 --> 00:00:30,880
<font color="#CCCCCC">of my favorite things</font>

12
00:00:27,490 --> 00:00:33,580
can I stay<font color="#E5E5E5"> so I'm Chris Leroy</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am a</font>

13
00:00:30,880 --> 00:00:35,680
security engineer slash<font color="#CCCCCC"> researcher I use</font>

14
00:00:33,580 --> 00:00:37,690
those two terms<font color="#E5E5E5"> very loosely but</font>

15
00:00:35,680 --> 00:00:40,210
<font color="#E5E5E5">generally I just like breaking stuff and</font>

16
00:00:37,690 --> 00:00:43,059
building stuff<font color="#CCCCCC"> I work</font><font color="#E5E5E5"> for a company</font>

17
00:00:40,210 --> 00:00:43,899
called Heroku and yeah you can<font color="#E5E5E5"> find me</font>

18
00:00:43,059 --> 00:00:47,440
on<font color="#E5E5E5"> Twitter</font>

19
00:00:43,899 --> 00:00:51,700
<font color="#E5E5E5">Bron</font><font color="#CCCCCC"> pony</font><font color="#E5E5E5"> if you are on that side</font><font color="#CCCCCC"> of the</font>

20
00:00:47,440 --> 00:00:53,440
<font color="#CCCCCC">sobs fear</font><font color="#E5E5E5"> so enough about</font><font color="#CCCCCC"> me sort of an</font>

21
00:00:51,700 --> 00:00:55,539
<font color="#CCCCCC">outline this is more for me than it is</font>

22
00:00:53,440 --> 00:00:56,919
<font color="#CCCCCC">for you</font><font color="#E5E5E5"> just so</font><font color="#CCCCCC"> that I don't die aggress</font>

23
00:00:55,539 --> 00:00:59,920
from what is I want to<font color="#E5E5E5"> share with you</font>

24
00:00:56,920 --> 00:01:02,620
today<font color="#E5E5E5"> but this is what you can expect in</font>

25
00:00:59,920 --> 00:01:05,170
the<font color="#E5E5E5"> next 40 minutes or</font><font color="#CCCCCC"> so so we're</font><font color="#E5E5E5"> going</font>

26
00:01:02,620 --> 00:01:07,450
<font color="#E5E5E5">to look at a problem</font><font color="#CCCCCC"> that I saw some</font>

27
00:01:05,170 --> 00:01:10,060
points<font color="#E5E5E5"> an interesting question that</font><font color="#CCCCCC"> I</font>

28
00:01:07,450 --> 00:01:12,280
was asked that<font color="#E5E5E5"> triggered and idea that I</font>

29
00:01:10,060 --> 00:01:15,640
then created PRC which led to<font color="#CCCCCC"> some</font>

30
00:01:12,280 --> 00:01:19,180
interesting<font color="#E5E5E5"> results</font><font color="#CCCCCC"> and there is a bit</font>

31
00:01:15,640 --> 00:01:22,450
<font color="#E5E5E5">of a conclusion so</font><font color="#CCCCCC"> what is the problem</font><font color="#E5E5E5"> I</font>

32
00:01:19,180 --> 00:01:24,750
don't<font color="#E5E5E5"> think this slide is a surprise to</font>

33
00:01:22,450 --> 00:01:27,729
anyone in this room<font color="#E5E5E5"> Android</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> malware</font>

34
00:01:24,750 --> 00:01:29,020
<font color="#CCCCCC">those two fit together very well and</font>

35
00:01:27,729 --> 00:01:30,970
it's a problem<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we've been dealing</font>

36
00:01:29,020 --> 00:01:33,340
<font color="#E5E5E5">with for quite some time</font><font color="#CCCCCC"> these are just</font>

37
00:01:30,970 --> 00:01:35,710
some<font color="#E5E5E5"> of the headlines from</font><font color="#CCCCCC"> the past year</font>

38
00:01:33,340 --> 00:01:39,159
and this<font color="#CCCCCC"> has been happening for a long</font>

39
00:01:35,710 --> 00:01:43,149
time on a<font color="#CCCCCC"> very large scale so not really</font>

40
00:01:39,159 --> 00:01:45,880
new<font color="#E5E5E5"> but</font><font color="#CCCCCC"> when I started babbling in</font>

41
00:01:43,150 --> 00:01:48,310
reversing<font color="#E5E5E5"> Android malware</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font>

42
00:01:45,880 --> 00:01:50,829
see how easy it<font color="#E5E5E5"> was to</font><font color="#CCCCCC"> actually create</font>

43
00:01:48,310 --> 00:01:52,390
some<font color="#E5E5E5"> of my own so the research that I'm</font>

44
00:01:50,829 --> 00:01:55,750
actually be sharing<font color="#E5E5E5"> with you today is</font>

45
00:01:52,390 --> 00:01:58,570
actually derived from<font color="#CCCCCC"> bits</font><font color="#E5E5E5"> from some</font>

46
00:01:55,750 --> 00:02:00,820
previous research<font color="#CCCCCC"> that I did</font><font color="#E5E5E5"> create</font><font color="#CCCCCC"> a</font>

47
00:01:58,570 --> 00:02:03,429
tool called<font color="#CCCCCC"> quad sir</font><font color="#E5E5E5"> quite some time ago</font>

48
00:02:00,820 --> 00:02:05,110
<font color="#E5E5E5">so that's the very bad</font><font color="#CCCCCC"> Eskie art that</font>

49
00:02:03,430 --> 00:02:07,630
you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> there it's not</font><font color="#CCCCCC"> a tool</font>

50
00:02:05,110 --> 00:02:09,369
that<font color="#E5E5E5"> doesn't have ASCII arts</font><font color="#CCCCCC"> but I must</font>

51
00:02:07,630 --> 00:02:10,978
point<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that originally this ASCII art</font>

52
00:02:09,369 --> 00:02:13,349
was<font color="#CCCCCC"> Green</font>

53
00:02:10,979 --> 00:02:15,659
text on a black background<font color="#CCCCCC"> but in an</font>

54
00:02:13,349 --> 00:02:18,510
attempt<font color="#CCCCCC"> to break down hacker stereotypes</font>

55
00:02:15,659 --> 00:02:21,298
I<font color="#E5E5E5"> changed the</font><font color="#CCCCCC"> SGR to</font><font color="#E5E5E5"> art just so that</font>

56
00:02:18,510 --> 00:02:22,798
you are<font color="#E5E5E5"> aware of that so I shared this</font>

57
00:02:21,299 --> 00:02:24,060
tool and<font color="#E5E5E5"> the basically just</font><font color="#CCCCCC"> backdoored</font>

58
00:02:22,799 --> 00:02:25,590
<font color="#CCCCCC">any Android application with the</font>

59
00:02:24,060 --> 00:02:27,989
meterpreter payload<font color="#E5E5E5"> nothing really</font>

60
00:02:25,590 --> 00:02:29,849
<font color="#CCCCCC">interesting there and I was</font><font color="#E5E5E5"> showing this</font>

61
00:02:27,989 --> 00:02:31,620
research with some<font color="#E5E5E5"> researchers and</font><font color="#CCCCCC"> we</font>

62
00:02:29,849 --> 00:02:33,629
<font color="#CCCCCC">were discussing it</font><font color="#E5E5E5"> and most of the</font>

63
00:02:31,620 --> 00:02:36,480
<font color="#CCCCCC">questions that</font><font color="#E5E5E5"> I got was what</font><font color="#CCCCCC"> Chris</font>

64
00:02:33,629 --> 00:02:38,518
hired you<font color="#CCCCCC"> back door Kotlin apps or does</font>

65
00:02:36,480 --> 00:02:41,250
<font color="#CCCCCC">it</font><font color="#E5E5E5"> really matter how do you</font><font color="#CCCCCC"> Baba's</font>

66
00:02:38,519 --> 00:02:43,950
<font color="#E5E5E5">antivirus hide</font><font color="#CCCCCC"> ensure stability</font><font color="#E5E5E5"> so</font>

67
00:02:41,250 --> 00:02:45,030
pretty much the usual<font color="#CCCCCC"> read teeny kick</font>

68
00:02:43,950 --> 00:02:47,010
every door down

69
00:02:45,030 --> 00:02:49,230
kind<font color="#E5E5E5"> of question</font><font color="#CCCCCC"> that I got which is</font>

70
00:02:47,010 --> 00:02:51,899
<font color="#E5E5E5">what I was expecting</font><font color="#CCCCCC"> but I got one</font>

71
00:02:49,230 --> 00:02:54,660
question<font color="#CCCCCC"> that took</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> by surprise and</font>

72
00:02:51,900 --> 00:02:58,200
the question was from a developer that

73
00:02:54,660 --> 00:03:02,549
<font color="#E5E5E5">was developing Android apps and</font><font color="#CCCCCC"> develop</font>

74
00:02:58,200 --> 00:03:05,488
<font color="#CCCCCC">ask me Chris</font><font color="#E5E5E5"> how do I detect if my app</font>

75
00:03:02,549 --> 00:03:08,099
has been backdoor by this tool or if my

76
00:03:05,489 --> 00:03:10,319
app has been<font color="#CCCCCC"> infected with</font><font color="#E5E5E5"> some malware</font>

77
00:03:08,099 --> 00:03:13,828
<font color="#E5E5E5">or in general how do I detect malware</font>

78
00:03:10,319 --> 00:03:16,138
<font color="#E5E5E5">and to answer this question I spoke</font>

79
00:03:13,829 --> 00:03:18,690
around<font color="#CCCCCC"> two points so I said well firstly</font>

80
00:03:16,139 --> 00:03:21,480
<font color="#CCCCCC">gotta look</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> apk so perform some</font>

81
00:03:18,690 --> 00:03:23,069
sort<font color="#CCCCCC"> of static analysis tear apart</font><font color="#E5E5E5"> that</font>

82
00:03:21,480 --> 00:03:26,119
bag of bits<font color="#E5E5E5"> and see what it is that</font><font color="#CCCCCC"> it</font>

83
00:03:23,069 --> 00:03:28,470
<font color="#CCCCCC">is doing then I also spoke around</font>

84
00:03:26,120 --> 00:03:30,150
<font color="#E5E5E5">sandboxing so you want to</font><font color="#CCCCCC"> analyze this</font>

85
00:03:28,470 --> 00:03:33,959
piece of malware in some sort of sandbox

86
00:03:30,150 --> 00:03:36,480
<font color="#E5E5E5">and see what it does and this question</font>

87
00:03:33,959 --> 00:03:39,000
led me to think<font color="#E5E5E5"> about well I've created</font>

88
00:03:36,480 --> 00:03:42,450
<font color="#CCCCCC">something with an offensive capability</font>

89
00:03:39,000 --> 00:03:46,079
but is<font color="#CCCCCC"> this some way that</font><font color="#E5E5E5"> we can detect</font>

90
00:03:42,450 --> 00:03:49,078
the usages of<font color="#E5E5E5"> this tool so I figured</font>

91
00:03:46,079 --> 00:03:51,359
well<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> go ahead and see how we</font>

92
00:03:49,079 --> 00:03:55,019
analyze malware<font color="#E5E5E5"> nothing</font><font color="#CCCCCC"> new over here</font>

93
00:03:51,359 --> 00:03:57,989
the usual hashes code signatures<font color="#E5E5E5"> so this</font>

94
00:03:55,019 --> 00:04:00,840
isn't<font color="#CCCCCC"> specific to Android or mobile</font>

95
00:03:57,989 --> 00:04:01,739
malware<font color="#CCCCCC"> but in Android it's quite</font>

96
00:04:00,840 --> 00:04:04,769
interesting<font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> the permissions</font>

97
00:04:01,739 --> 00:04:07,680
<font color="#E5E5E5">of</font><font color="#CCCCCC"> Android applications</font><font color="#E5E5E5"> for example if</font>

98
00:04:04,769 --> 00:04:10,440
that<font color="#E5E5E5"> torch app that's for free that</font>

99
00:04:07,680 --> 00:04:13,079
turns your phone into a torch<font color="#E5E5E5"> and if</font>

100
00:04:10,440 --> 00:04:15,150
it's asking for premium SMS<font color="#E5E5E5"> access and</font>

101
00:04:13,079 --> 00:04:17,280
your<font color="#E5E5E5"> GPS location</font><font color="#CCCCCC"> that's probably</font>

102
00:04:15,150 --> 00:04:18,899
sounding a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> dodgy</font><font color="#CCCCCC"> and you'd</font>

103
00:04:17,279 --> 00:04:21,179
probably look at that app with a bit

104
00:04:18,899 --> 00:04:23,549
<font color="#E5E5E5">more scrutiny and then the last point</font>

105
00:04:21,180 --> 00:04:24,419
behavior which ties<font color="#CCCCCC"> into</font><font color="#E5E5E5"> this point but</font>

106
00:04:23,550 --> 00:04:26,069
<font color="#E5E5E5">when you're looking at</font>

107
00:04:24,419 --> 00:04:28,258
so you typically<font color="#E5E5E5"> want to look at the</font>

108
00:04:26,069 --> 00:04:30,180
apps that appear<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be dodgy the ones</font>

109
00:04:28,259 --> 00:04:32,460
that are<font color="#E5E5E5"> draining your battery the ones</font>

110
00:04:30,180 --> 00:04:36,120
that<font color="#CCCCCC"> ask for ridiculous permissions</font><font color="#E5E5E5"> so</font>

111
00:04:32,460 --> 00:04:36,719
on and so forth<font color="#E5E5E5"> but</font><font color="#CCCCCC"> how we protected by</font>

112
00:04:36,120 --> 00:04:39,090
<font color="#E5E5E5">malware</font>

113
00:04:36,719 --> 00:04:41,789
so quite recently we've had Google<font color="#E5E5E5"> paper</font>

114
00:04:39,090 --> 00:04:44,008
<font color="#E5E5E5">text or formerly Google Play bouncer</font>

115
00:04:41,789 --> 00:04:45,449
<font color="#E5E5E5">some of you may</font><font color="#CCCCCC"> remember that so that's</font>

116
00:04:44,009 --> 00:04:46,889
nearly that little alert that<font color="#E5E5E5"> you'll get</font>

117
00:04:45,449 --> 00:04:49,439
<font color="#E5E5E5">on your Android phone</font><font color="#CCCCCC"> saying do you want</font>

118
00:04:46,889 --> 00:04:52,169
<font color="#E5E5E5">to analyze this or submit this</font>

119
00:04:49,439 --> 00:04:54,120
application<font color="#E5E5E5"> for analysis and of course</font>

120
00:04:52,169 --> 00:04:55,650
there's the Play Store<font color="#CCCCCC"> now this is quite</font>

121
00:04:54,120 --> 00:04:58,020
<font color="#E5E5E5">debatable if it is an effective</font>

122
00:04:55,650 --> 00:05:00,060
<font color="#E5E5E5">protection against malware</font><font color="#CCCCCC"> I'll be happy</font>

123
00:04:58,020 --> 00:05:03,120
to<font color="#E5E5E5"> discuss this with anyone afterwards</font>

124
00:05:00,060 --> 00:05:05,219
<font color="#E5E5E5">but the idea</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the verified</font>

125
00:05:03,120 --> 00:05:07,199
developers submit the applications and

126
00:05:05,219 --> 00:05:09,330
you can trust the Play<font color="#E5E5E5"> Store</font><font color="#CCCCCC"> to install</font>

127
00:05:07,199 --> 00:05:11,729
the apps<font color="#E5E5E5"> that they offer then of course</font>

128
00:05:09,330 --> 00:05:14,628
there's<font color="#CCCCCC"> third party software</font><font color="#E5E5E5"> so good ol</font>

129
00:05:11,729 --> 00:05:17,639
antivirus<font color="#E5E5E5"> I'm of the opinion that</font>

130
00:05:14,629 --> 00:05:18,449
antivirus in the word<font color="#E5E5E5"> mobile are</font>

131
00:05:17,639 --> 00:05:21,270
oxymorons

132
00:05:18,449 --> 00:05:24,539
so<font color="#E5E5E5"> yeah I think that's where we stand</font>

133
00:05:21,270 --> 00:05:26,430
<font color="#E5E5E5">with that in this field of</font><font color="#CCCCCC"> research</font><font color="#E5E5E5"> some</font>

134
00:05:24,539 --> 00:05:29,219
always supports so a lot of the

135
00:05:26,430 --> 00:05:30,629
operating systems out<font color="#CCCCCC"> there that modify</font>

136
00:05:29,219 --> 00:05:32,129
the Android operating system<font color="#CCCCCC"> try</font>

137
00:05:30,629 --> 00:05:34,229
<font color="#CCCCCC">implements and mechanisms to prevent</font>

138
00:05:32,129 --> 00:05:35,969
against my way<font color="#E5E5E5"> androids weapons by</font>

139
00:05:34,229 --> 00:05:38,188
default so things like<font color="#CCCCCC"> selinux</font>

140
00:05:35,969 --> 00:05:40,319
so on and so forth<font color="#E5E5E5"> then you've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> your</font>

141
00:05:38,189 --> 00:05:41,580
mDM's and your MEMS<font color="#E5E5E5"> which</font><font color="#CCCCCC"> you can try</font>

142
00:05:40,319 --> 00:05:45,569
and<font color="#CCCCCC"> limit what the users are installing</font>

143
00:05:41,580 --> 00:05:48,628
<font color="#E5E5E5">and enforce profiles and enforce</font>

144
00:05:45,569 --> 00:05:50,009
passwords and all of that<font color="#E5E5E5"> so those are</font>

145
00:05:48,629 --> 00:05:52,139
some<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ways</font><font color="#CCCCCC"> that we're looking</font><font color="#E5E5E5"> at</font>

146
00:05:50,009 --> 00:05:54,870
and<font color="#E5E5E5"> trying to protect ourselves from</font>

147
00:05:52,139 --> 00:05:57,960
malware but<font color="#E5E5E5"> I noticed that there are</font>

148
00:05:54,870 --> 00:06:01,169
<font color="#E5E5E5">some shortcomings</font><font color="#CCCCCC"> so I think static</font>

149
00:05:57,960 --> 00:06:02,758
analysis is hard on a good day

150
00:06:01,169 --> 00:06:05,099
but<font color="#E5E5E5"> in Android it gets a little bit</font>

151
00:06:02,759 --> 00:06:08,159
tricky<font color="#CCCCCC"> because you can be looking at</font>

152
00:06:05,099 --> 00:06:10,139
Java or Kotlin sure you can<font color="#E5E5E5"> look at the</font>

153
00:06:08,159 --> 00:06:11,520
<font color="#CCCCCC">smiley levels all</font><font color="#E5E5E5"> the same but then you</font>

154
00:06:10,139 --> 00:06:13,379
can<font color="#E5E5E5"> run into issues with the different</font>

155
00:06:11,520 --> 00:06:16,289
<font color="#CCCCCC">on versions that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> looking at and</font>

156
00:06:13,379 --> 00:06:17,729
in general static analysis is hard also

157
00:06:16,289 --> 00:06:19,349
<font color="#CCCCCC">the issue</font><font color="#E5E5E5"> that you can run things are</font>

158
00:06:17,729 --> 00:06:21,870
<font color="#E5E5E5">cuckoo</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> your phone if you think an app</font>

159
00:06:19,349 --> 00:06:24,149
is dodgy on your device you<font color="#E5E5E5"> have to set</font>

160
00:06:21,870 --> 00:06:27,389
<font color="#E5E5E5">up a separate machine</font><font color="#CCCCCC"> set up cuckoo and</font>

161
00:06:24,149 --> 00:06:30,509
put the<font color="#E5E5E5"> sample there and of course the</font>

162
00:06:27,389 --> 00:06:33,269
scalability and<font color="#E5E5E5"> quite recently the</font>

163
00:06:30,509 --> 00:06:35,159
Google paper<font color="#E5E5E5"> tech team and they research</font>

164
00:06:33,269 --> 00:06:36,240
a researcher<font color="#E5E5E5"> Mary</font><font color="#CCCCCC"> Stone gave a talk at</font>

165
00:06:35,159 --> 00:06:39,659
blackhat

166
00:06:36,240 --> 00:06:40,889
<font color="#CCCCCC">we'll talk on</font><font color="#E5E5E5"> how they manually analyzed</font>

167
00:06:39,660 --> 00:06:42,900
the piece of malware<font color="#CCCCCC"> that</font><font color="#E5E5E5"> had some</font>

168
00:06:40,889 --> 00:06:44,069
pretty<font color="#E5E5E5"> cool anti tampering</font><font color="#CCCCCC"> I recommend</font>

169
00:06:42,900 --> 00:06:47,429
you look at<font color="#E5E5E5"> the talk when it's available</font>

170
00:06:44,069 --> 00:06:49,319
<font color="#CCCCCC">and they had to put an analyst behind</font>

171
00:06:47,430 --> 00:06:51,900
the sample to see what it<font color="#E5E5E5"> was doing so</font>

172
00:06:49,319 --> 00:06:54,259
<font color="#E5E5E5">that they could</font><font color="#CCCCCC"> then implement tools to</font>

173
00:06:51,900 --> 00:06:57,299
then automatically detect it<font color="#CCCCCC"> and this</font>

174
00:06:54,259 --> 00:06:59,009
shows a<font color="#E5E5E5"> peer scalability problem there</font>

175
00:06:57,300 --> 00:07:00,990
are thousands of<font color="#E5E5E5"> samples at the insurer</font>

176
00:06:59,009 --> 00:07:02,370
you can automate as<font color="#CCCCCC"> much</font><font color="#E5E5E5"> as you can but</font>

177
00:07:00,990 --> 00:07:04,680
you<font color="#E5E5E5"> still need a human behind a monitor</font>

178
00:07:02,370 --> 00:07:07,919
<font color="#CCCCCC">to verify</font><font color="#E5E5E5"> or to look at those</font><font color="#CCCCCC"> samples</font>

179
00:07:04,680 --> 00:07:10,560
that<font color="#E5E5E5"> can't be automatically analyzed so</font>

180
00:07:07,919 --> 00:07:11,969
scalability is not on<font color="#E5E5E5"> our side well so</font>

181
00:07:10,560 --> 00:07:15,180
what if<font color="#E5E5E5"> the app is not on the official</font>

182
00:07:11,970 --> 00:07:16,440
store so this is quite<font color="#CCCCCC"> a big trend</font><font color="#E5E5E5"> some</font>

183
00:07:15,180 --> 00:07:19,680
apps aren't available<font color="#E5E5E5"> in certain regions</font>

184
00:07:16,440 --> 00:07:23,300
<font color="#CCCCCC">so you download third-party apps</font><font color="#E5E5E5"> of</font>

185
00:07:19,680 --> 00:07:25,620
course<font color="#E5E5E5"> bypassing</font><font color="#CCCCCC"> AV</font><font color="#E5E5E5"> is too easy</font>

186
00:07:23,300 --> 00:07:28,319
forensics has a very interesting

187
00:07:25,620 --> 00:07:31,440
<font color="#E5E5E5">approach</font><font color="#CCCCCC"> I like it but</font><font color="#E5E5E5"> how do you use</font>

188
00:07:28,319 --> 00:07:32,940
forensics tools at runtime<font color="#CCCCCC"> you have an</font>

189
00:07:31,440 --> 00:07:34,349
app<font color="#CCCCCC"> that you want to</font><font color="#E5E5E5"> look at and how do</font>

190
00:07:32,940 --> 00:07:36,449
<font color="#E5E5E5">you go</font><font color="#CCCCCC"> ahead and use the existing tools</font>

191
00:07:34,349 --> 00:07:38,639
at that very moment in time it's quite

192
00:07:36,449 --> 00:07:41,969
tricky<font color="#CCCCCC"> and then of course this last</font>

193
00:07:38,639 --> 00:07:44,099
points and I'll elaborate quite a bit on

194
00:07:41,969 --> 00:07:45,719
this<font color="#E5E5E5"> going</font><font color="#CCCCCC"> forward but</font><font color="#E5E5E5"> static analysis</font>

195
00:07:44,099 --> 00:07:48,060
can only show<font color="#CCCCCC"> you a subset of what the</font>

196
00:07:45,719 --> 00:07:51,389
<font color="#E5E5E5">application is doing when it's installed</font>

197
00:07:48,060 --> 00:07:54,060
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the device</font><font color="#E5E5E5"> so we're quite limited to</font>

198
00:07:51,389 --> 00:07:55,800
what we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see provided</font><font color="#CCCCCC"> that we can</font>

199
00:07:54,060 --> 00:07:58,880
only see what the<font color="#CCCCCC"> apk is doing</font><font color="#E5E5E5"> which is</font>

200
00:07:55,800 --> 00:08:01,409
<font color="#E5E5E5">not always indicative of what it can do</font>

201
00:07:58,880 --> 00:08:04,469
so basically<font color="#E5E5E5"> my main frustration was</font>

202
00:08:01,409 --> 00:08:08,130
that<font color="#E5E5E5"> on a phone</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no reliable way</font>

203
00:08:04,469 --> 00:08:10,500
<font color="#CCCCCC">to take</font><font color="#E5E5E5"> my own devices so then I had an</font>

204
00:08:08,130 --> 00:08:13,469
idea<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> quite rare things so I</font>

205
00:08:10,500 --> 00:08:15,870
<font color="#E5E5E5">was really to</font><font color="#CCCCCC"> embrace it these heaps of</font>

206
00:08:13,469 --> 00:08:17,550
data to be looked at<font color="#E5E5E5"> and I do</font><font color="#CCCCCC"> apologise</font>

207
00:08:15,870 --> 00:08:20,789
<font color="#CCCCCC">for the really lame jokes</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> forward</font>

208
00:08:17,550 --> 00:08:23,940
<font color="#E5E5E5">but I enjoy</font><font color="#CCCCCC"> it and I thought</font><font color="#E5E5E5"> well</font>

209
00:08:20,789 --> 00:08:27,419
Android apps<font color="#CCCCCC"> make use of</font><font color="#E5E5E5"> objects objects</font>

210
00:08:23,940 --> 00:08:29,909
everywhere and I thought<font color="#CCCCCC"> okay import</font>

211
00:08:27,419 --> 00:08:32,458
statements are useful to look<font color="#E5E5E5"> at what</font>

212
00:08:29,909 --> 00:08:34,409
objects<font color="#E5E5E5"> an app is using but you can</font>

213
00:08:32,458 --> 00:08:38,069
import but not necessarily instantiate

214
00:08:34,409 --> 00:08:39,630
very bad coding pattern you can in a way

215
00:08:38,070 --> 00:08:41,820
<font color="#E5E5E5">assume that if it's instantiated</font>

216
00:08:39,630 --> 00:08:44,370
<font color="#E5E5E5">something is using the object so if</font>

217
00:08:41,820 --> 00:08:47,010
there's my object<font color="#CCCCCC"> new equals new</font><font color="#E5E5E5"> object</font>

218
00:08:44,370 --> 00:08:49,320
<font color="#E5E5E5">something is using that object</font><font color="#CCCCCC"> well</font>

219
00:08:47,010 --> 00:08:50,100
they're just<font color="#CCCCCC"> wasting memory</font><font color="#E5E5E5"> and of</font>

220
00:08:49,320 --> 00:08:52,470
course instead

221
00:08:50,100 --> 00:08:54,210
objects<font color="#CCCCCC"> have data</font><font color="#E5E5E5"> they are very</font>

222
00:08:52,470 --> 00:08:56,760
interesting<font color="#E5E5E5"> to look at so I thought that</font>

223
00:08:54,210 --> 00:08:59,760
I thought<font color="#CCCCCC"> well</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> everything that</font>

224
00:08:56,760 --> 00:09:01,020
an app does boils down to objects so

225
00:08:59,760 --> 00:09:02,520
this day that has to be<font color="#E5E5E5"> sitting</font>

226
00:09:01,020 --> 00:09:04,829
<font color="#E5E5E5">somewhere and</font><font color="#CCCCCC"> we know it's</font><font color="#E5E5E5"> sitting on</font>

227
00:09:02,520 --> 00:09:06,780
the heap<font color="#CCCCCC"> and one of the</font><font color="#E5E5E5"> first places you</font>

228
00:09:04,830 --> 00:09:09,120
may typically<font color="#E5E5E5"> look at is proc</font><font color="#CCCCCC"> pert of</font>

229
00:09:06,780 --> 00:09:10,589
the process in maps and look at the heap

230
00:09:09,120 --> 00:09:12,810
regions

231
00:09:10,590 --> 00:09:14,280
I'm currently suffering from<font color="#E5E5E5"> a lot from</font>

232
00:09:12,810 --> 00:09:16,530
significant hair loss<font color="#E5E5E5"> I don't want to</font>

233
00:09:14,280 --> 00:09:19,050
lose any<font color="#CCCCCC"> more so I quickly ran away from</font>

234
00:09:16,530 --> 00:09:21,660
proc<font color="#CCCCCC"> pad maps</font><font color="#E5E5E5"> and thought well why don't</font>

235
00:09:19,050 --> 00:09:24,000
I look<font color="#E5E5E5"> at the HP</font><font color="#CCCCCC"> Roth files and sure you</font>

236
00:09:21,660 --> 00:09:25,500
<font color="#CCCCCC">can look</font><font color="#E5E5E5"> at that but</font><font color="#CCCCCC"> you'll be fighting</font>

237
00:09:24,000 --> 00:09:27,750
<font color="#E5E5E5">with the garbage collector on a regular</font>

238
00:09:25,500 --> 00:09:30,300
basis and if any of you have generated

239
00:09:27,750 --> 00:09:32,460
<font color="#E5E5E5">HP Roth files to get a snapshot of an</font>

240
00:09:30,300 --> 00:09:35,609
<font color="#CCCCCC">android process</font><font color="#E5E5E5"> you'll notice that time</font>

241
00:09:32,460 --> 00:09:38,850
is not on your<font color="#CCCCCC"> side and sure you may get</font>

242
00:09:35,610 --> 00:09:41,430
it<font color="#CCCCCC"> a couple minutes</font><font color="#E5E5E5"> or a couple seconds</font>

243
00:09:38,850 --> 00:09:44,640
afterwards<font color="#CCCCCC"> but it's also</font><font color="#E5E5E5"> quite tricky</font><font color="#CCCCCC"> to</font>

244
00:09:41,430 --> 00:09:46,680
work with HP<font color="#CCCCCC"> RAW</font><font color="#E5E5E5"> files so I thought well</font>

245
00:09:44,640 --> 00:09:48,689
what about memory forensics<font color="#E5E5E5"> the really</font>

246
00:09:46,680 --> 00:09:50,609
cool tools alarm or<font color="#E5E5E5"> volatility</font>

247
00:09:48,690 --> 00:09:52,950
so you<font color="#E5E5E5"> either require written in the</font>

248
00:09:50,610 --> 00:09:55,830
device or a customized kernel<font color="#E5E5E5"> and you</font>

249
00:09:52,950 --> 00:09:58,560
can get<font color="#CCCCCC"> a nice snapshot of the device's</font>

250
00:09:55,830 --> 00:09:59,610
entire<font color="#E5E5E5"> memory not exactly what we're</font>

251
00:09:58,560 --> 00:10:02,130
<font color="#CCCCCC">looking for</font><font color="#E5E5E5"> because we're looking for</font>

252
00:09:59,610 --> 00:10:04,710
<font color="#CCCCCC">the memory for</font><font color="#E5E5E5"> specific processes but in</font>

253
00:10:02,130 --> 00:10:07,260
this case we can get<font color="#E5E5E5"> everything the last</font>

254
00:10:04,710 --> 00:10:09,930
<font color="#E5E5E5">point is my favorite and good old gdb to</font>

255
00:10:07,260 --> 00:10:11,580
<font color="#CCCCCC">the rescue so on all the</font><font color="#E5E5E5"> Android devices</font>

256
00:10:09,930 --> 00:10:14,400
or<font color="#E5E5E5"> Android for when you're still using</font>

257
00:10:11,580 --> 00:10:16,410
DL<font color="#CCCCCC"> melech</font><font color="#E5E5E5"> if you go to any object and</font>

258
00:10:14,400 --> 00:10:18,870
you say get<font color="#E5E5E5"> hash code you can get the</font>

259
00:10:16,410 --> 00:10:21,810
base address for the object<font color="#E5E5E5"> and if you</font>

260
00:10:18,870 --> 00:10:23,430
go ahead<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then read the bats</font><font color="#E5E5E5"> 2014 13</font>

261
00:10:21,810 --> 00:10:25,530
<font color="#CCCCCC">BOTS from</font><font color="#E5E5E5"> that base address you'll</font>

262
00:10:23,430 --> 00:10:26,910
actually see the object and you'll see

263
00:10:25,530 --> 00:10:30,209
the magic<font color="#E5E5E5"> strings that identify that</font>

264
00:10:26,910 --> 00:10:33,000
objects really<font color="#E5E5E5"> cool for all the Android</font>

265
00:10:30,210 --> 00:10:34,680
devices<font color="#E5E5E5"> they were using</font><font color="#CCCCCC"> VR mereloc but</font>

266
00:10:33,000 --> 00:10:37,380
on a RT it's something<font color="#E5E5E5"> different than</font>

267
00:10:34,680 --> 00:10:40,170
hunger into now<font color="#E5E5E5"> but</font><font color="#CCCCCC"> yeah if you</font><font color="#E5E5E5"> like je</font>

268
00:10:37,380 --> 00:10:42,480
<font color="#CCCCCC">malloc</font><font color="#E5E5E5"> and a RT</font><font color="#CCCCCC"> it's quite interesting</font>

269
00:10:40,170 --> 00:10:44,550
<font color="#CCCCCC">so these are some of the</font><font color="#E5E5E5"> ways</font><font color="#CCCCCC"> that I was</font>

270
00:10:42,480 --> 00:10:46,980
like<font color="#E5E5E5"> thinking well yeah</font><font color="#CCCCCC"> let's look at</font>

271
00:10:44,550 --> 00:10:48,719
the memory<font color="#E5E5E5"> let's look at what objects</font>

272
00:10:46,980 --> 00:10:50,430
are<font color="#E5E5E5"> there and I got really frustrated</font>

273
00:10:48,720 --> 00:10:52,950
and nothing really<font color="#E5E5E5"> worked and then I</font>

274
00:10:50,430 --> 00:10:55,400
thought well how about<font color="#E5E5E5"> instrumentation</font>

275
00:10:52,950 --> 00:10:57,720
so there's this<font color="#E5E5E5"> great tool called</font><font color="#CCCCCC"> Frida</font>

276
00:10:55,400 --> 00:11:00,900
not the<font color="#E5E5E5"> only instrumentation tool out</font>

277
00:10:57,720 --> 00:11:02,730
<font color="#CCCCCC">there but I thought</font><font color="#E5E5E5"> well these objects</font>

278
00:11:00,900 --> 00:11:03,930
exist so they must<font color="#CCCCCC"> be on the heap and</font>

279
00:11:02,730 --> 00:11:06,240
therefore<font color="#E5E5E5"> they must be accessible</font>

280
00:11:03,930 --> 00:11:08,280
not only with<font color="#E5E5E5"> instrumentation can we</font>

281
00:11:06,240 --> 00:11:09,780
<font color="#CCCCCC">access the objects on the heap</font><font color="#E5E5E5"> we can</font>

282
00:11:08,280 --> 00:11:13,050
also trace calls and monitor behavior

283
00:11:09,780 --> 00:11:14,760
<font color="#CCCCCC">and food has made it relatively easy to</font>

284
00:11:13,050 --> 00:11:16,979
<font color="#CCCCCC">implement</font><font color="#E5E5E5"> this compared</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the previous</font>

285
00:11:14,760 --> 00:11:18,990
tools<font color="#E5E5E5"> and it's a great way to gain</font>

286
00:11:16,980 --> 00:11:22,020
insight into applications in general<font color="#E5E5E5"> not</font>

287
00:11:18,990 --> 00:11:23,700
<font color="#E5E5E5">just</font><font color="#CCCCCC"> for analyzing</font><font color="#E5E5E5"> the heap but wow I</font>

288
00:11:22,020 --> 00:11:25,920
stuck with<font color="#CCCCCC"> Frieda it was because it's</font>

289
00:11:23,700 --> 00:11:27,840
<font color="#E5E5E5">object carving functionality is awesome</font>

290
00:11:25,920 --> 00:11:29,939
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I will show you in a bit</font>

291
00:11:27,840 --> 00:11:31,260
<font color="#E5E5E5">Wow so I thought</font><font color="#CCCCCC"> great well I've got</font>

292
00:11:29,940 --> 00:11:33,480
instrumentation it's providing a

293
00:11:31,260 --> 00:11:35,280
<font color="#CCCCCC">mechanism for</font><font color="#E5E5E5"> me to look at the heap</font><font color="#CCCCCC"> in</font>

294
00:11:33,480 --> 00:11:37,590
<font color="#E5E5E5">quite an efficient way</font><font color="#CCCCCC"> so I don't have</font>

295
00:11:35,280 --> 00:11:40,380
to try<font color="#E5E5E5"> and integrate with gdb or start</font>

296
00:11:37,590 --> 00:11:42,300
processing<font color="#E5E5E5"> and the heap regions so I</font>

297
00:11:40,380 --> 00:11:45,420
thought to<font color="#E5E5E5"> myself wouldn't it be cool if</font>

298
00:11:42,300 --> 00:11:47,729
at runtime<font color="#CCCCCC"> I could see which</font><font color="#E5E5E5"> objects</font><font color="#CCCCCC"> an</font>

299
00:11:45,420 --> 00:11:50,370
app is<font color="#E5E5E5"> using which objects are</font>

300
00:11:47,730 --> 00:11:52,530
instantiated<font color="#E5E5E5"> and what are the values</font><font color="#CCCCCC"> for</font>

301
00:11:50,370 --> 00:11:55,170
<font color="#CCCCCC">these</font><font color="#E5E5E5"> objects because</font><font color="#CCCCCC"> if I</font><font color="#E5E5E5"> get this</font>

302
00:11:52,530 --> 00:11:58,290
<font color="#CCCCCC">information this would give me an idea</font>

303
00:11:55,170 --> 00:12:00,060
<font color="#E5E5E5">as to what an app is doing and how</font>

304
00:11:58,290 --> 00:12:02,880
because everything<font color="#CCCCCC"> that an app does</font>

305
00:12:00,060 --> 00:12:07,229
boils down to<font color="#E5E5E5"> some sort of object</font><font color="#CCCCCC"> some</font>

306
00:12:02,880 --> 00:12:10,170
<font color="#E5E5E5">way that does something</font><font color="#CCCCCC"> for example if I</font>

307
00:12:07,230 --> 00:12:11,730
were to<font color="#CCCCCC"> analyze an application that was</font>

308
00:12:10,170 --> 00:12:14,130
say hypothetically<font color="#E5E5E5"> backdoored with an</font>

309
00:12:11,730 --> 00:12:17,100
interpreter payload<font color="#E5E5E5"> experience tells me</font>

310
00:12:14,130 --> 00:12:20,520
<font color="#E5E5E5">to look for two things</font><font color="#CCCCCC"> a dex class</font>

311
00:12:17,100 --> 00:12:22,080
loader<font color="#E5E5E5"> which is used to inject</font><font color="#CCCCCC"> jars or</font>

312
00:12:20,520 --> 00:12:24,540
<font color="#CCCCCC">apks at</font><font color="#E5E5E5"> runtime for additional</font>

313
00:12:22,080 --> 00:12:25,500
functionality what you look for TCP

314
00:12:24,540 --> 00:12:27,719
<font color="#E5E5E5">connection because I know that</font>

315
00:12:25,500 --> 00:12:31,260
meterpreter<font color="#CCCCCC"> any established connections</font>

316
00:12:27,720 --> 00:12:33,990
over<font color="#E5E5E5"> HTTP or TCP</font><font color="#CCCCCC"> if I see these</font><font color="#E5E5E5"> objects</font>

317
00:12:31,260 --> 00:12:36,689
<font color="#CCCCCC">this</font><font color="#E5E5E5"> tells me that the app is injecting</font>

318
00:12:33,990 --> 00:12:40,530
<font color="#CCCCCC">code at runtime</font><font color="#E5E5E5"> and it's communicating</font>

319
00:12:36,690 --> 00:12:43,590
remotely relatively<font color="#E5E5E5"> simple so going</font>

320
00:12:40,530 --> 00:12:49,560
<font color="#E5E5E5">forward we're going to use a</font><font color="#CCCCCC"> infected</font>

321
00:12:43,590 --> 00:12:53,220
app because<font color="#CCCCCC"> that's quite</font><font color="#E5E5E5"> fun</font><font color="#CCCCCC"> to infect</font>

322
00:12:49,560 --> 00:12:56,430
<font color="#E5E5E5">apps I think and I'm sorry on the wrong</font>

323
00:12:53,220 --> 00:12:59,190
slide the play button I need<font color="#CCCCCC"> to find</font>

324
00:12:56,430 --> 00:13:03,140
<font color="#CCCCCC">computing is hard</font><font color="#E5E5E5"> I apologize there we</font>

325
00:12:59,190 --> 00:13:05,130
go<font color="#E5E5E5"> so we're just using a stock standard</font>

326
00:13:03,140 --> 00:13:08,730
<font color="#CCCCCC">meterpreter</font><font color="#E5E5E5"> backdoor</font>

327
00:13:05,130 --> 00:13:12,399
using a standard multi handler and what

328
00:13:08,730 --> 00:13:18,620
we've gone is just

329
00:13:12,399 --> 00:13:21,649
<font color="#E5E5E5">backdoored a version of Twitter and we</font>

330
00:13:18,620 --> 00:13:23,899
get a session and all that we're really

331
00:13:21,649 --> 00:13:25,430
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is just perform some</font>

332
00:13:23,899 --> 00:13:26,990
malicious activity<font color="#E5E5E5"> so we have a</font>

333
00:13:25,430 --> 00:13:29,540
meterpreter session we have remote

334
00:13:26,990 --> 00:13:33,320
control<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the device via the</font><font color="#CCCCCC"> backdoor</font>

335
00:13:29,540 --> 00:13:34,969
application and we're just<font color="#E5E5E5"> going to go</font>

336
00:13:33,320 --> 00:13:37,070
ahead and take a<font color="#E5E5E5"> screenshot once the</font>

337
00:13:34,970 --> 00:13:38,300
<font color="#CCCCCC">super secret</font><font color="#E5E5E5"> password</font><font color="#CCCCCC"> the reason why we</font>

338
00:13:37,070 --> 00:13:39,740
can do<font color="#CCCCCC"> this from</font><font color="#E5E5E5"> this infection is</font>

339
00:13:38,300 --> 00:13:41,540
because our meterpreter session is

340
00:13:39,740 --> 00:13:43,790
running in the context of the Twitter

341
00:13:41,540 --> 00:13:45,980
application and because it's<font color="#CCCCCC"> it's itself</font>

342
00:13:43,790 --> 00:13:47,000
<font color="#E5E5E5">it can take screenshots</font><font color="#CCCCCC"> of itself just</font>

343
00:13:45,980 --> 00:13:49,490
in<font color="#E5E5E5"> case you're wondering there's no</font>

344
00:13:47,000 --> 00:13:54,260
magic there and yeah we go ahead<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font>

345
00:13:49,490 --> 00:13:56,750
<font color="#E5E5E5">take a screenshot and we have any</font>

346
00:13:54,260 --> 00:14:00,200
effective<font color="#E5E5E5"> device so</font><font color="#CCCCCC"> that is the sample</font>

347
00:13:56,750 --> 00:14:03,649
<font color="#E5E5E5">that we're going to work with so we have</font>

348
00:14:00,200 --> 00:14:06,649
this<font color="#E5E5E5"> and how do we actually analyze this</font>

349
00:14:03,649 --> 00:14:09,709
malware<font color="#E5E5E5"> using freedom</font><font color="#CCCCCC"> I apologise for</font>

350
00:14:06,649 --> 00:14:11,630
the small text<font color="#CCCCCC"> I see that now</font><font color="#E5E5E5"> but the</font>

351
00:14:09,709 --> 00:14:14,000
videos are up<font color="#E5E5E5"> online</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you're just</font>

352
00:14:11,630 --> 00:14:17,870
gonna have<font color="#CCCCCC"> to either squint really hard</font>

353
00:14:14,000 --> 00:14:22,130
<font color="#CCCCCC">or see the videos afterwards</font><font color="#E5E5E5"> but what</font>

354
00:14:17,870 --> 00:14:24,050
we're going<font color="#CCCCCC"> to do now is use the Feder</font>

355
00:14:22,130 --> 00:14:25,579
<font color="#E5E5E5">JavaScript client and we're going to</font>

356
00:14:24,050 --> 00:14:29,689
<font color="#E5E5E5">look for some particular objects at</font><font color="#CCCCCC"> the</font>

357
00:14:25,579 --> 00:14:31,310
top so<font color="#E5E5E5"> we have a java.net sockets and</font>

358
00:14:29,690 --> 00:14:33,860
<font color="#CCCCCC">Dex class</font><font color="#E5E5E5"> loader and here we're using</font>

359
00:14:31,310 --> 00:14:34,849
feeders<font color="#CCCCCC"> objects carving mechanisms what</font>

360
00:14:33,860 --> 00:14:37,850
we're going<font color="#CCCCCC"> to do is we're going to</font><font color="#E5E5E5"> scan</font>

361
00:14:34,850 --> 00:14:39,950
the heap<font color="#E5E5E5"> for instances</font><font color="#CCCCCC"> of particular</font>

362
00:14:37,850 --> 00:14:42,020
objects<font color="#E5E5E5"> if we find an instantiated</font>

363
00:14:39,950 --> 00:14:43,760
object<font color="#E5E5E5"> within going to display the</font>

364
00:14:42,020 --> 00:14:45,410
details<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that objects we're then</font>

365
00:14:43,760 --> 00:14:47,689
going to attach<font color="#CCCCCC"> frida which is using P</font>

366
00:14:45,410 --> 00:14:49,430
<font color="#CCCCCC">trace to a particular process in this</font>

367
00:14:47,690 --> 00:14:52,360
case it's the Twitter<font color="#CCCCCC"> application and</font>

368
00:14:49,430 --> 00:14:55,250
basically what we're going<font color="#E5E5E5"> to say is</font><font color="#CCCCCC"> hey</font>

369
00:14:52,360 --> 00:14:57,980
scan this application<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> come across</font>

370
00:14:55,250 --> 00:15:00,649
an insane<font color="#CCCCCC"> ciated object of java.net or</font>

371
00:14:57,980 --> 00:15:02,540
sockets display the contents so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

372
00:15:00,649 --> 00:15:05,390
see<font color="#CCCCCC"> over here we</font><font color="#E5E5E5"> have a whole bunch</font><font color="#CCCCCC"> of</font>

373
00:15:02,540 --> 00:15:06,680
instances<font color="#CCCCCC"> of java.net sockets which are</font>

374
00:15:05,390 --> 00:15:08,660
<font color="#E5E5E5">basically showing</font><font color="#CCCCCC"> all the remote</font>

375
00:15:06,680 --> 00:15:10,459
connections<font color="#E5E5E5"> that this app has made at</font>

376
00:15:08,660 --> 00:15:13,370
this<font color="#E5E5E5"> point in time so there's</font><font color="#CCCCCC"> a whole</font>

377
00:15:10,459 --> 00:15:15,229
<font color="#E5E5E5">bunch to Twitter image comm you can get</font>

378
00:15:13,370 --> 00:15:17,149
the local ports and the remote<font color="#CCCCCC"> ports</font>

379
00:15:15,230 --> 00:15:18,589
<font color="#E5E5E5">you'll see this one over here is</font>

380
00:15:17,149 --> 00:15:20,270
<font color="#E5E5E5">actually our</font><font color="#CCCCCC"> interpreter connection</font>

381
00:15:18,589 --> 00:15:23,779
because we have a remote<font color="#CCCCCC"> connection to a</font>

382
00:15:20,270 --> 00:15:26,509
<font color="#E5E5E5">102 168 range on</font><font color="#CCCCCC"> quad 4</font>

383
00:15:23,779 --> 00:15:28,189
and what's quite<font color="#CCCCCC"> interesting as</font><font color="#E5E5E5"> was at</font>

384
00:15:26,509 --> 00:15:30,920
the<font color="#E5E5E5"> bottom we have two instantiated</font>

385
00:15:28,189 --> 00:15:35,750
<font color="#E5E5E5">objects of</font><font color="#CCCCCC"> Dex</font><font color="#E5E5E5"> class loader which means</font>

386
00:15:30,920 --> 00:15:38,540
that this<font color="#CCCCCC"> application is loading to jar</font>

387
00:15:35,750 --> 00:15:40,189
files into<font color="#E5E5E5"> the process at runtime to</font>

388
00:15:38,540 --> 00:15:42,050
inject additional<font color="#E5E5E5"> functionality and we</font>

389
00:15:40,189 --> 00:15:43,849
can see it<font color="#E5E5E5"> right here we can see that</font>

390
00:15:42,050 --> 00:15:47,569
the drawers have<font color="#CCCCCC"> been placed</font><font color="#E5E5E5"> in beta</font>

391
00:15:43,850 --> 00:15:50,230
beta comma dot<font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> Android and has</font>

392
00:15:47,569 --> 00:15:53,269
loaded<font color="#E5E5E5"> those jar files which were then</font>

393
00:15:50,230 --> 00:15:56,240
loaded remotely from the multi handler

394
00:15:53,269 --> 00:15:58,910
<font color="#E5E5E5">so this is how we can</font><font color="#CCCCCC"> use feeder and</font>

395
00:15:56,240 --> 00:16:01,730
it's object carving to look at an app at

396
00:15:58,910 --> 00:16:03,290
runtime<font color="#E5E5E5"> and say hey tell</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> what objects</font>

397
00:16:01,730 --> 00:16:05,959
on the heap what have been instantiated

398
00:16:03,290 --> 00:16:07,879
and what are the values<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these objects</font>

399
00:16:05,959 --> 00:16:11,508
<font color="#CCCCCC">so this is</font><font color="#E5E5E5"> quite fun</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run this script</font>

400
00:16:07,879 --> 00:16:16,870
<font color="#CCCCCC">onto a lot of Android</font><font color="#E5E5E5"> apps</font><font color="#CCCCCC"> and yeah you</font>

401
00:16:11,509 --> 00:16:19,399
see some interesting<font color="#E5E5E5"> results so I</font>

402
00:16:16,870 --> 00:16:21,620
mentioned<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> that static analysis</font>

403
00:16:19,399 --> 00:16:23,839
won't show you<font color="#E5E5E5"> everything and what would</font>

404
00:16:21,620 --> 00:16:25,910
won't show you is runtime injection<font color="#E5E5E5"> for</font>

405
00:16:23,839 --> 00:16:28,939
example the jars in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> apk s that are</font>

406
00:16:25,910 --> 00:16:30,589
<font color="#E5E5E5">loaded from Dex class loaders if you get</font>

407
00:16:28,939 --> 00:16:32,149
<font color="#CCCCCC">access to the original</font><font color="#E5E5E5"> apk you'll see</font>

408
00:16:30,589 --> 00:16:33,709
reference to Dex class loader but you

409
00:16:32,149 --> 00:16:36,170
won't be<font color="#E5E5E5"> able to see the contents of the</font>

410
00:16:33,709 --> 00:16:39,739
jar<font color="#E5E5E5"> or the apk because it's not included</font>

411
00:16:36,170 --> 00:16:42,050
<font color="#E5E5E5">if it's loaded remotely so you're not</font>

412
00:16:39,740 --> 00:16:43,910
<font color="#E5E5E5">going to see this data and typically if</font>

413
00:16:42,050 --> 00:16:45,859
you pull off an<font color="#CCCCCC"> apk with ADB</font><font color="#E5E5E5"> you can you</font>

414
00:16:43,910 --> 00:16:47,480
get the original<font color="#E5E5E5"> apk but you're not</font>

415
00:16:45,860 --> 00:16:47,930
going<font color="#E5E5E5"> to get the content that's in</font><font color="#CCCCCC"> beta</font>

416
00:16:47,480 --> 00:16:50,600
data

417
00:16:47,930 --> 00:16:52,579
<font color="#E5E5E5">comet or Android because the sandbox</font>

418
00:16:50,600 --> 00:16:54,350
permissions won't let you so generally

419
00:16:52,579 --> 00:16:56,839
what<font color="#E5E5E5"> we do to get access to these third</font>

420
00:16:54,350 --> 00:16:59,509
party apks is run the app in the sandbox

421
00:16:56,839 --> 00:17:00,079
<font color="#CCCCCC">on a rooted device and then gain access</font>

422
00:16:59,509 --> 00:17:02,860
to it

423
00:17:00,079 --> 00:17:05,899
but by<font color="#CCCCCC"> default you won't get that</font><font color="#E5E5E5"> then</font>

424
00:17:02,860 --> 00:17:08,360
there's<font color="#E5E5E5"> my least favorite Java package</font>

425
00:17:05,900 --> 00:17:11,449
Java dot<font color="#CCCCCC"> Lang and what's interesting</font>

426
00:17:08,359 --> 00:17:14,000
about this<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> every Android process</font>

427
00:17:11,449 --> 00:17:16,339
will get an instantiated object of all

428
00:17:14,000 --> 00:17:18,709
<font color="#E5E5E5">the classes in Java dot land so there</font>

429
00:17:16,339 --> 00:17:21,230
are no import statements and this

430
00:17:18,709 --> 00:17:24,260
becomes interesting if any of you know

431
00:17:21,230 --> 00:17:25,699
the<font color="#E5E5E5"> Java space runtime dot exec so if</font>

432
00:17:24,260 --> 00:17:26,929
you want to<font color="#E5E5E5"> run any shell commands or</font>

433
00:17:25,699 --> 00:17:27,199
get a<font color="#E5E5E5"> reverse shell</font><font color="#CCCCCC"> or anything</font><font color="#E5E5E5"> like</font>

434
00:17:26,929 --> 00:17:30,110
<font color="#E5E5E5">that</font>

435
00:17:27,199 --> 00:17:32,179
runtime exec is going to be the<font color="#CCCCCC"> c'mon</font>

436
00:17:30,110 --> 00:17:33,620
that you're going to<font color="#E5E5E5"> run and what's</font>

437
00:17:32,179 --> 00:17:36,320
<font color="#E5E5E5">interesting about this is</font><font color="#CCCCCC"> that you don't</font>

438
00:17:33,620 --> 00:17:36,919
instantiate runtime it's static<font color="#E5E5E5"> you get</font>

439
00:17:36,320 --> 00:17:40,730
<font color="#CCCCCC">wrong too</font>

440
00:17:36,920 --> 00:17:42,170
<font color="#CCCCCC">a instance and</font><font color="#E5E5E5"> I say it's kind of</font>

441
00:17:40,730 --> 00:17:45,140
immutable because you don't have<font color="#E5E5E5"> control</font>

442
00:17:42,170 --> 00:17:46,670
<font color="#CCCCCC">of the properties that</font><font color="#E5E5E5"> get set the</font>

443
00:17:45,140 --> 00:17:48,890
properties typically get set by the

444
00:17:46,670 --> 00:17:50,960
actions that<font color="#E5E5E5"> you perform on that on the</font>

445
00:17:48,890 --> 00:17:52,160
object itself<font color="#CCCCCC"> so it gets a</font><font color="#E5E5E5"> little bit</font>

446
00:17:50,960 --> 00:17:53,810
tricky when<font color="#E5E5E5"> you want to dump the</font>

447
00:17:52,160 --> 00:17:56,180
contents of the object<font color="#CCCCCC"> and see what it's</font>

448
00:17:53,810 --> 00:18:01,970
<font color="#E5E5E5">actually doing so let's go ahead and</font>

449
00:17:56,180 --> 00:18:05,810
actually look at<font color="#CCCCCC"> an example</font><font color="#E5E5E5"> so on the</font>

450
00:18:01,970 --> 00:18:07,580
Left we<font color="#CCCCCC"> have an Android application I'm</font>

451
00:18:05,810 --> 00:18:09,889
going to run it in debugger<font color="#E5E5E5"> so you can</font>

452
00:18:07,580 --> 00:18:12,169
see the code so on the left is a<font color="#E5E5E5"> vanilla</font>

453
00:18:09,890 --> 00:18:16,160
Android application<font color="#E5E5E5"> hello world then on</font>

454
00:18:12,170 --> 00:18:17,660
the right<font color="#E5E5E5"> we have some Java code</font><font color="#CCCCCC"> that</font>

455
00:18:16,160 --> 00:18:21,320
we're going to<font color="#E5E5E5"> bundle into</font><font color="#CCCCCC"> a jar and</font>

456
00:18:17,660 --> 00:18:23,450
<font color="#E5E5E5">then execute at runtime</font><font color="#CCCCCC"> on the app on</font>

457
00:18:21,320 --> 00:18:25,580
the<font color="#CCCCCC"> left so if we were to perform static</font>

458
00:18:23,450 --> 00:18:27,860
analysis on this application<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> Left</font>

459
00:18:25,580 --> 00:18:29,659
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is what we would see we would not</font>

460
00:18:27,860 --> 00:18:32,090
<font color="#E5E5E5">see this card unless we've got</font><font color="#CCCCCC"> access to</font>

461
00:18:29,660 --> 00:18:34,670
this additional apk<font color="#E5E5E5"> so we're gonna load</font>

462
00:18:32,090 --> 00:18:35,990
it up<font color="#E5E5E5"> and we ain't going to use our</font>

463
00:18:34,670 --> 00:18:37,850
script that we were using earlier<font color="#E5E5E5"> that's</font>

464
00:18:35,990 --> 00:18:39,470
<font color="#E5E5E5">gonna scan the heap</font><font color="#CCCCCC"> for all the</font>

465
00:18:37,850 --> 00:18:42,550
instantiated<font color="#E5E5E5"> objects of a particular</font>

466
00:18:39,470 --> 00:18:44,780
<font color="#CCCCCC">type and then dump out the contents</font><font color="#E5E5E5"> so</font>

467
00:18:42,550 --> 00:18:46,340
we're gonna<font color="#E5E5E5"> break it these points once</font>

468
00:18:44,780 --> 00:18:48,680
again I<font color="#CCCCCC"> apologize for the really small</font>

469
00:18:46,340 --> 00:18:52,669
<font color="#E5E5E5">text if you can see that that's</font>

470
00:18:48,680 --> 00:18:54,140
impressive<font color="#E5E5E5"> but apologize</font><font color="#CCCCCC"> for that</font><font color="#E5E5E5"> but</font>

471
00:18:52,670 --> 00:18:55,160
<font color="#E5E5E5">I'll tell you what's happening in I</font>

472
00:18:54,140 --> 00:18:58,040
guess you're just gonna<font color="#E5E5E5"> have to believe</font>

473
00:18:55,160 --> 00:19:00,530
<font color="#E5E5E5">me so we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> run our script to scan</font>

474
00:18:58,040 --> 00:19:02,180
the heap at this point and here we're

475
00:19:00,530 --> 00:19:03,980
looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> text class photos</font><font color="#CCCCCC"> or</font>

476
00:19:02,180 --> 00:19:05,420
java.net of soccer<font color="#E5E5E5"> objects and a bunch</font>

477
00:19:03,980 --> 00:19:08,540
of other objects<font color="#E5E5E5"> and we can see we get</font>

478
00:19:05,420 --> 00:19:10,550
nothing<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> step</font><font color="#CCCCCC"> over a couple</font><font color="#E5E5E5"> other</font>

479
00:19:08,540 --> 00:19:13,520
points<font color="#E5E5E5"> what's going to happen over</font><font color="#CCCCCC"> here</font>

480
00:19:10,550 --> 00:19:15,649
<font color="#E5E5E5">is we instantiate an object of Dex class</font>

481
00:19:13,520 --> 00:19:17,900
loader which we can see just appear over

482
00:19:15,650 --> 00:19:20,150
here<font color="#E5E5E5"> on our scripts</font><font color="#CCCCCC"> for instantiate</font><font color="#E5E5E5"> in</font>

483
00:19:17,900 --> 00:19:22,100
this because<font color="#E5E5E5"> we want to load this jar</font>

484
00:19:20,150 --> 00:19:23,930
into memory at runtime<font color="#CCCCCC"> to</font><font color="#E5E5E5"> execute all</font>

485
00:19:22,100 --> 00:19:26,230
the functionality that's in here<font color="#E5E5E5"> it's a</font>

486
00:19:23,930 --> 00:19:28,790
great way to hide your<font color="#CCCCCC"> functionality and</font>

487
00:19:26,230 --> 00:19:30,230
once we have the instantiated<font color="#E5E5E5"> objects we</font>

488
00:19:28,790 --> 00:19:32,600
then<font color="#E5E5E5"> going to iterate</font><font color="#CCCCCC"> and actually</font>

489
00:19:30,230 --> 00:19:36,290
perform<font color="#E5E5E5"> some methods on the object that</font>

490
00:19:32,600 --> 00:19:40,189
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> via reflection so there's a</font>

491
00:19:36,290 --> 00:19:42,080
<font color="#CCCCCC">method here called</font><font color="#E5E5E5"> make beard and it's</font>

492
00:19:40,190 --> 00:19:44,030
just to add<font color="#E5E5E5"> print lines which are over</font>

493
00:19:42,080 --> 00:19:48,080
<font color="#CCCCCC">here and those don't have</font><font color="#E5E5E5"> any particular</font>

494
00:19:44,030 --> 00:19:50,259
objects of in of<font color="#E5E5E5"> of interest there's one</font>

495
00:19:48,080 --> 00:19:53,928
command<font color="#E5E5E5"> that we did run which</font><font color="#CCCCCC"> is in Ben</font>

496
00:19:50,259 --> 00:19:56,990
<font color="#CCCCCC">sh-boom</font><font color="#E5E5E5"> PS so we can see in our</font><font color="#CCCCCC"> ADB</font>

497
00:19:53,929 --> 00:19:59,419
outputs we adb logcat<font color="#E5E5E5"> output we have</font><font color="#CCCCCC"> an</font>

498
00:19:56,990 --> 00:20:01,429
<font color="#E5E5E5">upper over here so it executed if we</font>

499
00:19:59,419 --> 00:20:03,499
then<font color="#E5E5E5"> actually go ahead</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> run</font><font color="#CCCCCC"> our</font>

500
00:20:01,429 --> 00:20:04,610
script<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> analyze the heap we'll see</font>

501
00:20:03,499 --> 00:20:07,789
<font color="#E5E5E5">that we actually won't get anything</font>

502
00:20:04,610 --> 00:20:09,498
<font color="#CCCCCC">because runtime</font><font color="#E5E5E5"> objects is really</font>

503
00:20:07,789 --> 00:20:12,710
<font color="#CCCCCC">difficult to tell</font><font color="#E5E5E5"> if something's been</font>

504
00:20:09,499 --> 00:20:15,499
executed on it but we'll look<font color="#E5E5E5"> into that</font>

505
00:20:12,710 --> 00:20:17,480
<font color="#CCCCCC">solution in a bit the next method that</font>

506
00:20:15,499 --> 00:20:18,860
we executed by<font color="#E5E5E5"> a</font><font color="#CCCCCC"> reflection is over here</font>

507
00:20:17,480 --> 00:20:22,190
<font color="#E5E5E5">and what it's</font><font color="#CCCCCC"> going to do it's going to</font>

508
00:20:18,860 --> 00:20:24,139
<font color="#CCCCCC">establish HTTP connection which is</font><font color="#E5E5E5"> this</font>

509
00:20:22,190 --> 00:20:25,879
<font color="#E5E5E5">code over</font><font color="#CCCCCC"> here so once again this code</font>

510
00:20:24,139 --> 00:20:28,399
<font color="#E5E5E5">has been</font><font color="#CCCCCC"> loaded into memory by the dex</font>

511
00:20:25,879 --> 00:20:31,428
class loader<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> gonna run this</font>

512
00:20:28,399 --> 00:20:33,559
method<font color="#E5E5E5"> which establishes an HTTP</font><font color="#CCCCCC"> TCP</font>

513
00:20:31,429 --> 00:20:35,809
connection a and<font color="#E5E5E5"> executes an HTTP GET</font>

514
00:20:33,559 --> 00:20:37,249
when we then<font color="#E5E5E5"> run our script we'll get</font>

515
00:20:35,809 --> 00:20:38,690
some information and<font color="#E5E5E5"> of course we'll get</font>

516
00:20:37,249 --> 00:20:41,210
an error<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you're not supposed</font><font color="#CCCCCC"> to</font>

517
00:20:38,690 --> 00:20:43,340
do HTTP gets in the main thread<font color="#E5E5E5"> of an</font>

518
00:20:41,210 --> 00:20:46,450
<font color="#CCCCCC">android app</font><font color="#E5E5E5"> and when we then run our</font>

519
00:20:43,340 --> 00:20:50,389
script<font color="#CCCCCC"> we will then see two instances of</font>

520
00:20:46,450 --> 00:20:54,679
<font color="#E5E5E5">java.net</font><font color="#CCCCCC"> URL and java.net</font><font color="#E5E5E5"> socket which</font>

521
00:20:50,389 --> 00:20:57,320
shows<font color="#CCCCCC"> that the code that we ran here you</font>

522
00:20:54,679 --> 00:21:00,860
can't see over<font color="#E5E5E5"> here has been loaded</font><font color="#CCCCCC"> at</font>

523
00:20:57,320 --> 00:21:03,889
runtime but our object carving at

524
00:21:00,860 --> 00:21:08,389
runtime has identified<font color="#E5E5E5"> those two objects</font>

525
00:21:03,889 --> 00:21:09,769
<font color="#CCCCCC">on the heap which shows us that if</font>

526
00:21:08,389 --> 00:21:12,758
you're<font color="#E5E5E5"> performing static analysis on</font>

527
00:21:09,769 --> 00:21:15,440
this<font color="#CCCCCC"> application you</font><font color="#E5E5E5"> would not see this</font>

528
00:21:12,759 --> 00:21:18,049
<font color="#E5E5E5">so I have heaps of love for</font><font color="#CCCCCC"> this</font>

529
00:21:15,440 --> 00:21:21,649
approach<font color="#E5E5E5"> because you don't have to troll</font>

530
00:21:18,049 --> 00:21:23,259
code you can programmatically<font color="#E5E5E5"> specify</font>

531
00:21:21,649 --> 00:21:26,899
the nominees<font color="#E5E5E5"> that you want to identify</font>

532
00:21:23,259 --> 00:21:28,879
which is pretty cool<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you can</font>

533
00:21:26,899 --> 00:21:31,399
say scan this<font color="#E5E5E5"> code and tell me if these</font>

534
00:21:28,879 --> 00:21:35,869
objects exist and if they do do a B and

535
00:21:31,399 --> 00:21:38,418
<font color="#E5E5E5">C</font><font color="#CCCCCC"> some frustration so like I said</font>

536
00:21:35,869 --> 00:21:40,240
java.lang runtime<font color="#E5E5E5"> every</font><font color="#CCCCCC"> android process</font>

537
00:21:38,419 --> 00:21:42,619
will get an instance of this object<font color="#E5E5E5"> and</font>

538
00:21:40,240 --> 00:21:45,080
this is what it looks<font color="#E5E5E5"> like if</font><font color="#CCCCCC"> you were</font>

539
00:21:42,619 --> 00:21:47,509
to inspected in a debugger<font color="#CCCCCC"> if you wanted</font>

540
00:21:45,080 --> 00:21:50,090
to try and detect if some process has

541
00:21:47,509 --> 00:21:51,830
<font color="#CCCCCC">executed system</font><font color="#E5E5E5"> than PS or executed</font><font color="#CCCCCC"> runs</font>

542
00:21:50,090 --> 00:21:54,168
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> not exact if you were to analyze</font>

543
00:21:51,830 --> 00:21:57,199
that object there's not an easy way to

544
00:21:54,169 --> 00:22:01,009
see<font color="#CCCCCC"> Oh someone executed that so it's</font>

545
00:21:57,200 --> 00:22:03,379
<font color="#E5E5E5">really not</font><font color="#CCCCCC"> very useful</font><font color="#E5E5E5"> to look at but we</font>

546
00:22:01,009 --> 00:22:04,520
have instrumentation that<font color="#E5E5E5"> we can use so</font>

547
00:22:03,379 --> 00:22:06,990
what's the

548
00:22:04,520 --> 00:22:09,120
so according to<font color="#E5E5E5"> the documentation</font><font color="#CCCCCC"> I</font>

549
00:22:06,990 --> 00:22:11,580
apologize for<font color="#CCCCCC"> showing</font><font color="#E5E5E5"> you Java</font><font color="#CCCCCC"> Docs at</font>

550
00:22:09,120 --> 00:22:14,250
this time of<font color="#CCCCCC"> day</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> go have plenty</font>

551
00:22:11,580 --> 00:22:16,350
<font color="#CCCCCC">beer after</font><font color="#E5E5E5"> this but for once the Java</font>

552
00:22:14,250 --> 00:22:19,980
<font color="#CCCCCC">Docs were useful and said hey there are</font>

553
00:22:16,350 --> 00:22:22,740
six<font color="#CCCCCC"> unique</font><font color="#E5E5E5"> signatures as to how exact</font>

554
00:22:19,980 --> 00:22:24,090
can be<font color="#E5E5E5"> executed and what we can do is we</font>

555
00:22:22,740 --> 00:22:26,250
can overload<font color="#CCCCCC"> those signatures for a</font>

556
00:22:24,090 --> 00:22:28,110
particular<font color="#E5E5E5"> process which basically means</font>

557
00:22:26,250 --> 00:22:30,090
that<font color="#E5E5E5"> every</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> any one of those</font><font color="#CCCCCC"> methods</font>

558
00:22:28,110 --> 00:22:31,918
are executed<font color="#E5E5E5"> on the exact object for a</font>

559
00:22:30,090 --> 00:22:34,470
particular Android process we can

560
00:22:31,919 --> 00:22:37,049
intercept<font color="#E5E5E5"> that call and then see exactly</font>

561
00:22:34,470 --> 00:22:41,789
what's<font color="#E5E5E5"> going on so what does it actually</font>

562
00:22:37,049 --> 00:22:44,490
look like<font color="#E5E5E5"> so once again I have an app</font>

563
00:22:41,789 --> 00:22:46,500
over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and what we're going to do is</font>

564
00:22:44,490 --> 00:22:47,549
we have a script<font color="#E5E5E5"> over here all it's</font>

565
00:22:46,500 --> 00:22:49,890
going<font color="#E5E5E5"> to do is attach</font><font color="#CCCCCC"> them to the</font>

566
00:22:47,549 --> 00:22:51,600
<font color="#E5E5E5">process</font><font color="#CCCCCC"> over load all the exact methods</font>

567
00:22:49,890 --> 00:22:54,260
<font color="#E5E5E5">and essentially what's going</font><font color="#CCCCCC"> to happen</font>

568
00:22:51,600 --> 00:22:57,750
is that every time<font color="#E5E5E5"> exec is called on</font>

569
00:22:54,260 --> 00:23:00,419
this processes runtime objects we're

570
00:22:57,750 --> 00:23:02,460
going to intercept it essentially see

571
00:23:00,419 --> 00:23:05,549
what is being<font color="#E5E5E5"> sent</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the method and</font>

572
00:23:02,460 --> 00:23:08,640
then pretty much<font color="#E5E5E5"> identify that a</font>

573
00:23:05,549 --> 00:23:10,889
specific<font color="#E5E5E5"> shell command was executed</font><font color="#CCCCCC"> so</font>

574
00:23:08,640 --> 00:23:13,799
we go back<font color="#CCCCCC"> to our victim</font><font color="#E5E5E5"> app and we are</font>

575
00:23:10,890 --> 00:23:16,919
<font color="#E5E5E5">running this code from a jar that has</font>

576
00:23:13,799 --> 00:23:18,389
been loaded<font color="#E5E5E5"> into memory</font><font color="#CCCCCC"> so we're going</font>

577
00:23:16,919 --> 00:23:19,980
to<font color="#E5E5E5"> run these commands which are over</font>

578
00:23:18,390 --> 00:23:23,100
<font color="#E5E5E5">here once</font><font color="#CCCCCC"> again I don't</font><font color="#E5E5E5"> expect you</font><font color="#CCCCCC"> to</font>

579
00:23:19,980 --> 00:23:25,820
see this<font color="#E5E5E5"> but via reflection we're going</font>

580
00:23:23,100 --> 00:23:28,500
to execute<font color="#CCCCCC"> the commands</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are from</font>

581
00:23:25,820 --> 00:23:31,470
jar<font color="#CCCCCC"> that we've loaded via</font><font color="#E5E5E5"> Dex class</font>

582
00:23:28,500 --> 00:23:34,020
loader<font color="#E5E5E5"> so once we load up our emulator</font>

583
00:23:31,470 --> 00:23:36,200
<font color="#E5E5E5">and we'll see the particular code so</font>

584
00:23:34,020 --> 00:23:38,908
we'll see the command there is been<font color="#CCCCCC"> SH</font>

585
00:23:36,200 --> 00:23:41,970
<font color="#E5E5E5">so we should see that being sent</font><font color="#CCCCCC"> through</font>

586
00:23:38,909 --> 00:23:44,940
to<font color="#E5E5E5"> the method signature when we click</font>

587
00:23:41,970 --> 00:23:47,520
run stuff you'll see that over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> our</font>

588
00:23:44,940 --> 00:23:48,750
script<font color="#CCCCCC"> on</font><font color="#E5E5E5"> it ran some stuff pops up</font><font color="#CCCCCC"> over</font>

589
00:23:47,520 --> 00:23:50,460
there<font color="#E5E5E5"> and what's happening over here is</font>

590
00:23:48,750 --> 00:23:52,799
that it's<font color="#E5E5E5"> saying exact</font><font color="#CCCCCC"> god</font><font color="#E5E5E5"> colt</font>

591
00:23:50,460 --> 00:23:54,480
so that means<font color="#E5E5E5"> that this process was</font>

592
00:23:52,799 --> 00:23:58,950
running the exact<font color="#E5E5E5"> method on a particular</font>

593
00:23:54,480 --> 00:24:01,740
object<font color="#CCCCCC"> it's all</font><font color="#E5E5E5"> very fun but how does</font><font color="#CCCCCC"> it</font>

594
00:23:58,950 --> 00:24:03,840
<font color="#E5E5E5">work if we maybe wanted to run it on an</font>

595
00:24:01,740 --> 00:24:06,120
infection so<font color="#CCCCCC"> we're going back to our</font>

596
00:24:03,840 --> 00:24:08,270
<font color="#E5E5E5">infected Twitter</font><font color="#CCCCCC"> application and what</font>

597
00:24:06,120 --> 00:24:11,399
we're now<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> do is run the same</font>

598
00:24:08,270 --> 00:24:14,340
method over here but we're going<font color="#E5E5E5"> to see</font>

599
00:24:11,399 --> 00:24:16,139
how meterpreter<font color="#CCCCCC"> executes shell commands</font>

600
00:24:14,340 --> 00:24:18,449
<font color="#E5E5E5">and it's quite</font><font color="#CCCCCC"> interesting</font>

601
00:24:16,140 --> 00:24:21,360
we have a meterpreter shell<font color="#CCCCCC"> over here</font>

602
00:24:18,450 --> 00:24:23,370
and if<font color="#CCCCCC"> we run</font><font color="#E5E5E5"> an LS</font><font color="#CCCCCC"> we'll see</font><font color="#E5E5E5"> that we</font>

603
00:24:21,360 --> 00:24:26,549
<font color="#E5E5E5">are in data data</font><font color="#CCCCCC"> Commodore</font><font color="#E5E5E5"> Twitter that</font>

604
00:24:23,370 --> 00:24:28,709
Android<font color="#E5E5E5"> but our script didn't fire</font>

605
00:24:26,549 --> 00:24:31,379
anything<font color="#E5E5E5"> so that means that that piece</font>

606
00:24:28,710 --> 00:24:33,840
<font color="#CCCCCC">of functionality isn't using ransom not</font>

607
00:24:31,380 --> 00:24:36,720
exact but if we drop down<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a native</font>

608
00:24:33,840 --> 00:24:38,909
shell in meterpreter<font color="#E5E5E5"> we can see that</font>

609
00:24:36,720 --> 00:24:42,420
there<font color="#E5E5E5"> was a call and the call that was</font>

610
00:24:38,910 --> 00:24:44,340
<font color="#E5E5E5">simply</font><font color="#CCCCCC"> run somebody exec is SH - C SH</font>

611
00:24:42,420 --> 00:24:46,830
<font color="#E5E5E5">and those</font><font color="#CCCCCC"> of you familiar with Java</font>

612
00:24:44,340 --> 00:24:49,620
reversals<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is the command that</font><font color="#E5E5E5"> you</font>

613
00:24:46,830 --> 00:24:51,449
typically want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> execute and we can see</font>

614
00:24:49,620 --> 00:24:52,860
now this now has established<font color="#CCCCCC"> a pop and</font>

615
00:24:51,450 --> 00:24:54,809
we've got an interactive shell<font color="#E5E5E5"> on the</font>

616
00:24:52,860 --> 00:24:56,729
Android device<font color="#E5E5E5"> and all the commands that</font>

617
00:24:54,809 --> 00:24:59,850
<font color="#E5E5E5">will run you'll see that meterpreter</font>

618
00:24:56,730 --> 00:25:02,640
doesn't create a new exact method<font color="#E5E5E5"> every</font>

619
00:24:59,850 --> 00:25:03,899
<font color="#E5E5E5">time it's established a pop so all the</font>

620
00:25:02,640 --> 00:25:06,570
commands are just being popped through

621
00:25:03,900 --> 00:25:08,010
to the instance on the other side and if

622
00:25:06,570 --> 00:25:11,700
<font color="#E5E5E5">we kill this instance and creates</font>

623
00:25:08,010 --> 00:25:14,669
<font color="#E5E5E5">another one by typing in shell will then</font>

624
00:25:11,700 --> 00:25:17,700
see<font color="#CCCCCC"> that we get</font><font color="#E5E5E5"> some information</font><font color="#CCCCCC"> over</font>

625
00:25:14,669 --> 00:25:20,070
<font color="#CCCCCC">here</font><font color="#E5E5E5"> so this is one way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> identify if</font>

626
00:25:17,700 --> 00:25:22,080
an<font color="#E5E5E5"> Android process is executing shell</font>

627
00:25:20,070 --> 00:25:23,399
commands<font color="#E5E5E5"> typically it's</font><font color="#CCCCCC"> not the kind of</font>

628
00:25:22,080 --> 00:25:26,699
stuff that you would want to see on your

629
00:25:23,400 --> 00:25:30,419
<font color="#E5E5E5">device</font><font color="#CCCCCC"> but you can go</font><font color="#E5E5E5"> ahead and see it</font>

630
00:25:26,700 --> 00:25:31,890
at any<font color="#CCCCCC"> time so you</font><font color="#E5E5E5"> just take a</font><font color="#CCCCCC"> snapshot</font>

631
00:25:30,419 --> 00:25:33,540
at this point in time we have the

632
00:25:31,890 --> 00:25:35,940
<font color="#CCCCCC">ability to analyze the objects on the</font>

633
00:25:33,540 --> 00:25:38,610
heap we can hook methods for certain

634
00:25:35,940 --> 00:25:41,730
objects and method signatures<font color="#E5E5E5"> we can do</font>

635
00:25:38,610 --> 00:25:43,620
<font color="#CCCCCC">this all at runtime on the</font><font color="#E5E5E5"> device so no</font>

636
00:25:41,730 --> 00:25:46,320
need<font color="#E5E5E5"> to take memory snapshots take it</font>

637
00:25:43,620 --> 00:25:49,530
offline and<font color="#E5E5E5"> process HP</font><font color="#CCCCCC"> RAW files</font><font color="#E5E5E5"> or</font>

638
00:25:46,320 --> 00:25:51,809
volatile or volatility snapshots<font color="#E5E5E5"> we can</font>

639
00:25:49,530 --> 00:25:53,840
see more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> static analysis so static</font>

640
00:25:51,809 --> 00:25:57,780
<font color="#CCCCCC">analysis</font><font color="#E5E5E5"> and this works really well and</font>

641
00:25:53,840 --> 00:26:01,049
we can<font color="#E5E5E5"> perform the above from a</font>

642
00:25:57,780 --> 00:26:02,490
workstation<font color="#E5E5E5"> which is ideally not what we</font>

643
00:26:01,049 --> 00:26:05,389
want to do we want<font color="#CCCCCC"> to run everything</font><font color="#E5E5E5"> on</font>

644
00:26:02,490 --> 00:26:08,429
<font color="#E5E5E5">an Android device which then leads me to</font>

645
00:26:05,390 --> 00:26:10,890
the<font color="#E5E5E5"> safety net attestation API</font><font color="#CCCCCC"> so when</font><font color="#E5E5E5"> I</font>

646
00:26:08,429 --> 00:26:13,740
<font color="#E5E5E5">thought</font><font color="#CCCCCC"> of this functionality</font><font color="#E5E5E5"> I said</font>

647
00:26:10,890 --> 00:26:17,520
well<font color="#E5E5E5"> Android</font><font color="#CCCCCC"> has a really cool</font><font color="#E5E5E5"> feature</font>

648
00:26:13,740 --> 00:26:19,080
called<font color="#E5E5E5"> the</font><font color="#CCCCCC"> attestation APR which from an</font>

649
00:26:17,520 --> 00:26:21,660
<font color="#E5E5E5">Android app you</font><font color="#CCCCCC"> can programmatically</font>

650
00:26:19,080 --> 00:26:24,320
query the states or<font color="#E5E5E5"> the awareness</font><font color="#CCCCCC"> of the</font>

651
00:26:21,660 --> 00:26:27,480
<font color="#E5E5E5">Android device for</font><font color="#CCCCCC"> example is it</font><font color="#E5E5E5"> rooted</font>

652
00:26:24,320 --> 00:26:29,439
is it using a proper version<font color="#CCCCCC"> of Android</font>

653
00:26:27,480 --> 00:26:31,120
<font color="#E5E5E5">so on and so forth so</font><font color="#CCCCCC"> it</font>

654
00:26:29,440 --> 00:26:33,850
<font color="#CCCCCC">is an API via the Google</font><font color="#E5E5E5"> Play services</font>

655
00:26:31,120 --> 00:26:36,518
<font color="#CCCCCC">so I thought great well there's an APR</font>

656
00:26:33,850 --> 00:26:39,189
in the Android operating system<font color="#E5E5E5"> to query</font>

657
00:26:36,519 --> 00:26:41,320
this information about<font color="#E5E5E5"> the environment</font>

658
00:26:39,190 --> 00:26:43,289
that<font color="#E5E5E5"> the app finds itself in but</font>

659
00:26:41,320 --> 00:26:46,240
wouldn't it<font color="#CCCCCC"> be cool if there</font><font color="#E5E5E5"> was an API</font>

660
00:26:43,289 --> 00:26:48,309
<font color="#E5E5E5">that could give you information about</font>

661
00:26:46,240 --> 00:26:50,610
particular<font color="#E5E5E5"> apps so I thought well</font>

662
00:26:48,309 --> 00:26:53,259
according<font color="#E5E5E5"> to the architecture diagrams</font>

663
00:26:50,610 --> 00:26:55,120
<font color="#CCCCCC">provided by Android you can</font><font color="#E5E5E5"> see that the</font>

664
00:26:53,259 --> 00:26:57,070
<font color="#CCCCCC">safe needed station API lives inside the</font>

665
00:26:55,120 --> 00:26:59,469
<font color="#CCCCCC">Google Play services</font><font color="#E5E5E5"> and I thought well</font>

666
00:26:57,070 --> 00:27:02,918
you could potentially<font color="#E5E5E5"> slot something in</font>

667
00:26:59,470 --> 00:27:07,049
over here<font color="#E5E5E5"> to provide an</font><font color="#CCCCCC"> API to provide</font>

668
00:27:02,919 --> 00:27:09,700
information on<font color="#E5E5E5"> Android applications and</font>

669
00:27:07,049 --> 00:27:13,299
that then led<font color="#CCCCCC"> me to develop</font><font color="#E5E5E5"> something</font>

670
00:27:09,700 --> 00:27:15,220
called<font color="#CCCCCC"> it cake and you can use this API</font>

671
00:27:13,299 --> 00:27:18,429
to analyze applications that are

672
00:27:15,220 --> 00:27:20,320
installed<font color="#E5E5E5"> on an Android</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> it's a</font>

673
00:27:18,429 --> 00:27:23,769
custom Android<font color="#CCCCCC"> frida library</font><font color="#E5E5E5"> it's</font>

674
00:27:20,320 --> 00:27:27,399
essentially<font color="#E5E5E5"> d-bus over TCP yes on</font>

675
00:27:23,769 --> 00:27:28,720
<font color="#E5E5E5">Android it is as ugly as</font><font color="#CCCCCC"> it looks which</font>

676
00:27:27,399 --> 00:27:30,879
then provides us with<font color="#E5E5E5"> free to server</font>

677
00:27:28,720 --> 00:27:32,590
<font color="#CCCCCC">integration with the feeder daemon this</font>

678
00:27:30,879 --> 00:27:36,549
can run all the tests<font color="#CCCCCC"> that I showed you</font>

679
00:27:32,590 --> 00:27:38,439
<font color="#E5E5E5">previously and more for example</font><font color="#CCCCCC"> if you</font>

680
00:27:36,549 --> 00:27:39,879
were<font color="#E5E5E5"> to say from</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> workstation</font><font color="#CCCCCC"> hey</font>

681
00:27:38,440 --> 00:27:41,710
<font color="#E5E5E5">Frida</font><font color="#CCCCCC"> give me a list of running</font>

682
00:27:39,879 --> 00:27:43,590
<font color="#E5E5E5">processes this is typically the command</font>

683
00:27:41,710 --> 00:27:46,090
<font color="#CCCCCC">that you would run from your workstation</font>

684
00:27:43,590 --> 00:27:47,740
<font color="#E5E5E5">using the feet of clients and that's the</font>

685
00:27:46,090 --> 00:27:49,389
information<font color="#CCCCCC"> that you would</font><font color="#E5E5E5"> get if you</font>

686
00:27:47,740 --> 00:27:52,210
<font color="#E5E5E5">were</font><font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> from an Android device</font>

687
00:27:49,389 --> 00:27:54,580
<font color="#CCCCCC">so from your</font><font color="#E5E5E5"> Android application you</font>

688
00:27:52,210 --> 00:27:58,360
could<font color="#E5E5E5"> do something like this instantiate</font>

689
00:27:54,580 --> 00:28:00,789
an object of 8kq tools<font color="#E5E5E5"> and say give</font><font color="#CCCCCC"> me a</font>

690
00:27:58,360 --> 00:28:03,549
list of all the processes<font color="#E5E5E5"> running on the</font>

691
00:28:00,789 --> 00:28:05,529
device using this particular method<font color="#E5E5E5"> and</font>

692
00:28:03,549 --> 00:28:06,960
<font color="#CCCCCC">this is all done within an</font><font color="#E5E5E5"> Android</font>

693
00:28:05,529 --> 00:28:10,179
<font color="#CCCCCC">application</font>

694
00:28:06,960 --> 00:28:11,320
similarly<font color="#E5E5E5"> for looking at processes you</font>

695
00:28:10,179 --> 00:28:13,120
could say hey<font color="#E5E5E5"> free to the timing of this</font>

696
00:28:11,320 --> 00:28:15,189
<font color="#E5E5E5">app looks malicious to remember</font>

697
00:28:13,120 --> 00:28:17,590
<font color="#E5E5E5">previously we had a script</font><font color="#CCCCCC"> that was</font>

698
00:28:15,190 --> 00:28:20,289
living<font color="#E5E5E5"> on our workstation which we then</font>

699
00:28:17,590 --> 00:28:22,269
called from the<font color="#CCCCCC"> fetus CLR and that gave</font>

700
00:28:20,289 --> 00:28:24,639
<font color="#CCCCCC">us that juicy information how would we</font>

701
00:28:22,269 --> 00:28:25,450
do this<font color="#E5E5E5"> from an Android application</font><font color="#CCCCCC"> you</font>

702
00:28:24,639 --> 00:28:28,059
can do it like<font color="#CCCCCC"> this</font>

703
00:28:25,450 --> 00:28:30,039
<font color="#E5E5E5">just give it the Frida host and free</font>

704
00:28:28,059 --> 00:28:32,590
<font color="#E5E5E5">reports so what I was doing at this time</font>

705
00:28:30,039 --> 00:28:34,899
<font color="#CCCCCC">because Frida is</font><font color="#E5E5E5"> not a native daemon in</font>

706
00:28:32,590 --> 00:28:37,029
<font color="#CCCCCC">android I was just building custom</font>

707
00:28:34,899 --> 00:28:39,428
Android roms<font color="#E5E5E5"> with Frida bundled in and</font>

708
00:28:37,029 --> 00:28:41,990
flashing it<font color="#E5E5E5"> onto a nexus and</font><font color="#CCCCCC"> then</font>

709
00:28:39,429 --> 00:28:44,780
exposing it on a certain interface

710
00:28:41,990 --> 00:28:47,350
is a terrible<font color="#CCCCCC"> idea but just</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> pierce it</font>

711
00:28:44,780 --> 00:28:50,389
<font color="#E5E5E5">that's what I did and you</font><font color="#CCCCCC"> just specify a</font>

712
00:28:47,350 --> 00:28:52,428
IP address and ports and<font color="#E5E5E5"> the pit of the</font>

713
00:28:50,390 --> 00:28:53,900
process that<font color="#E5E5E5"> you want and those tests</font>

714
00:28:52,429 --> 00:28:56,179
that<font color="#E5E5E5"> we ran previously would go ahead</font>

715
00:28:53,900 --> 00:29:00,050
<font color="#CCCCCC">and be executed on that process that</font><font color="#E5E5E5"> is</font>

716
00:28:56,179 --> 00:29:03,140
<font color="#E5E5E5">running on the Android device so why the</font>

717
00:29:00,050 --> 00:29:06,139
<font color="#E5E5E5">eight cake</font><font color="#CCCCCC"> APR so there was no</font><font color="#E5E5E5"> Android</font>

718
00:29:03,140 --> 00:29:08,870
free<font color="#E5E5E5"> the library to demonstrate this it</font>

719
00:29:06,140 --> 00:29:10,850
didn't<font color="#E5E5E5"> exist</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to use feeder</font>

720
00:29:08,870 --> 00:29:13,010
because<font color="#E5E5E5"> as object carving capability</font>

721
00:29:10,850 --> 00:29:14,330
worked really well<font color="#E5E5E5"> I don't want to go</font>

722
00:29:13,010 --> 00:29:17,090
ahead<font color="#E5E5E5"> and implement some gdb</font>

723
00:29:14,330 --> 00:29:19,669
integrations<font color="#CCCCCC"> I want you to keep</font><font color="#E5E5E5"> that</font>

724
00:29:17,090 --> 00:29:21,800
<font color="#E5E5E5">little hair that</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> left and I went</font>

725
00:29:19,670 --> 00:29:23,390
to the<font color="#E5E5E5"> client-server model that aligns</font>

726
00:29:21,800 --> 00:29:26,030
itself was what currently exists with

727
00:29:23,390 --> 00:29:27,980
the<font color="#CCCCCC"> attestation</font><font color="#E5E5E5"> API and lastly the most</font>

728
00:29:26,030 --> 00:29:29,750
importantly I didn't<font color="#CCCCCC"> one</font><font color="#E5E5E5"> paint because</font>

729
00:29:27,980 --> 00:29:32,809
if you go to the<font color="#CCCCCC"> debug documentation</font>

730
00:29:29,750 --> 00:29:35,270
that<font color="#E5E5E5"> sentence over there if you use this</font>

731
00:29:32,809 --> 00:29:37,970
low-level<font color="#E5E5E5"> API directly you're signing up</font>

732
00:29:35,270 --> 00:29:40,429
<font color="#CCCCCC">for some pain</font><font color="#E5E5E5"> so basically what I did</font>

733
00:29:37,970 --> 00:29:43,370
<font color="#CCCCCC">was I didn't implement the D bus</font>

734
00:29:40,429 --> 00:29:46,760
protocol<font color="#CCCCCC"> I did something</font><font color="#E5E5E5"> else to avoid</font>

735
00:29:43,370 --> 00:29:48,050
the pain so if you look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> ate cake</font>

736
00:29:46,760 --> 00:29:50,150
you'll see a lot of<font color="#E5E5E5"> these you'll see a</font>

737
00:29:48,050 --> 00:29:52,280
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> parts arrays and basically all</font>

738
00:29:50,150 --> 00:29:54,860
<font color="#E5E5E5">that it is is a TCP socket to the feeder</font>

739
00:29:52,280 --> 00:29:56,928
daemon and just pushes and pulls a whole

740
00:29:54,860 --> 00:30:00,260
bunch of<font color="#E5E5E5"> bots where did these parts come</font>

741
00:29:56,929 --> 00:30:01,940
<font color="#CCCCCC">from</font><font color="#E5E5E5"> well in the beginning I did</font><font color="#CCCCCC"> not</font>

742
00:30:00,260 --> 00:30:04,670
know<font color="#CCCCCC"> that the d-bus specification at all</font>

743
00:30:01,940 --> 00:30:06,950
and I still don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> it but what I did</font>

744
00:30:04,670 --> 00:30:09,350
was I just<font color="#CCCCCC"> sniffed sessions between</font><font color="#E5E5E5"> my</font>

745
00:30:06,950 --> 00:30:11,530
<font color="#CCCCCC">workstation and an</font><font color="#E5E5E5"> Android device</font><font color="#CCCCCC"> when I</font>

746
00:30:09,350 --> 00:30:14,780
was using<font color="#E5E5E5"> freedom and basically</font>

747
00:30:11,530 --> 00:30:17,149
performed a replay<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> to see if this</font>

748
00:30:14,780 --> 00:30:20,000
could<font color="#E5E5E5"> work</font><font color="#CCCCCC"> without</font><font color="#E5E5E5"> going through the</font>

749
00:30:17,150 --> 00:30:21,740
<font color="#CCCCCC">foetus CLR and surprisingly</font><font color="#E5E5E5"> I did all</font>

750
00:30:20,000 --> 00:30:24,800
that<font color="#CCCCCC"> I really then did was I've learned</font>

751
00:30:21,740 --> 00:30:26,390
certain key fields<font color="#E5E5E5"> so for example you're</font>

752
00:30:24,800 --> 00:30:29,030
not<font color="#E5E5E5"> going to be analyzing the same</font><font color="#CCCCCC"> pet</font>

753
00:30:26,390 --> 00:30:31,700
all the time you need to<font color="#CCCCCC"> change</font><font color="#E5E5E5"> that you</font>

754
00:30:29,030 --> 00:30:34,129
<font color="#CCCCCC">can identify some</font><font color="#E5E5E5"> key bots that feel and</font>

755
00:30:31,700 --> 00:30:35,840
diverse needs<font color="#E5E5E5"> to communicate and wash</font>

756
00:30:34,130 --> 00:30:37,910
rinse repeat<font color="#CCCCCC"> so if you look</font><font color="#E5E5E5"> at a</font><font color="#CCCCCC"> track</font>

757
00:30:35,840 --> 00:30:39,260
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> see a lot of batteries what some</font>

758
00:30:37,910 --> 00:30:40,460
of them do what<font color="#CCCCCC"> something mean I've</font>

759
00:30:39,260 --> 00:30:42,890
<font color="#E5E5E5">absolutely</font><font color="#CCCCCC"> no idea</font>

760
00:30:40,460 --> 00:30:46,040
and if anybody here<font color="#CCCCCC"> knows I'd love to</font>

761
00:30:42,890 --> 00:30:49,070
know<font color="#E5E5E5"> more about that but how it looked</font>

762
00:30:46,040 --> 00:30:51,678
as the first PLC was this<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was the</font>

763
00:30:49,070 --> 00:30:55,149
<font color="#E5E5E5">initial research literally</font><font color="#CCCCCC"> copy pasted</font>

764
00:30:51,679 --> 00:30:56,349
but from Wireshark sessions

765
00:30:55,149 --> 00:30:59,320
and if you're familiar<font color="#CCCCCC"> with the bus</font>

766
00:30:56,349 --> 00:31:01,359
you'll see<font color="#E5E5E5"> the the earth preamble over</font>

767
00:30:59,320 --> 00:31:04,450
here and then<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> just send butts</font>

768
00:31:01,359 --> 00:31:06,129
between the<font color="#E5E5E5"> feet of demon from existing</font>

769
00:31:04,450 --> 00:31:09,070
sessions that<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> snuff and it</font>

770
00:31:06,129 --> 00:31:10,509
<font color="#E5E5E5">actually worked</font><font color="#CCCCCC"> quite surprisingly I</font>

771
00:31:09,070 --> 00:31:13,928
don't know<font color="#CCCCCC"> what I'm surprised about</font><font color="#E5E5E5"> that</font>

772
00:31:10,509 --> 00:31:14,499
<font color="#E5E5E5">but not the most</font><font color="#CCCCCC"> reliable</font><font color="#E5E5E5"> and using</font>

773
00:31:13,929 --> 00:31:17,109
<font color="#CCCCCC">parson</font>

774
00:31:14,499 --> 00:31:19,929
but<font color="#CCCCCC"> when ported over</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> drive</font><font color="#E5E5E5"> and</font>

775
00:31:17,109 --> 00:31:21,519
Android<font color="#CCCCCC"> I was actually quite reliable</font><font color="#E5E5E5"> so</font>

776
00:31:19,929 --> 00:31:24,099
we can you get it it is<font color="#E5E5E5"> all out</font><font color="#CCCCCC"> in</font>

777
00:31:21,519 --> 00:31:25,839
github<font color="#CCCCCC"> so the feeder scripts if you want</font>

778
00:31:24,099 --> 00:31:28,089
to execute from the<font color="#CCCCCC"> workstation are</font>

779
00:31:25,839 --> 00:31:29,408
there<font color="#E5E5E5"> the Android library is there as</font>

780
00:31:28,089 --> 00:31:31,749
<font color="#CCCCCC">well so</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't worry about compiling</font>

781
00:31:29,409 --> 00:31:33,759
the code you can<font color="#CCCCCC"> just embed it into your</font>

782
00:31:31,749 --> 00:31:35,109
<font color="#E5E5E5">Android application it's</font><font color="#CCCCCC"> going to make</font>

783
00:31:33,759 --> 00:31:37,210
<font color="#E5E5E5">sure</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's a feeder instance</font>

784
00:31:35,109 --> 00:31:39,309
<font color="#E5E5E5">running on the local device there are</font>

785
00:31:37,210 --> 00:31:41,739
<font color="#E5E5E5">also the sample apps that I was showing</font>

786
00:31:39,309 --> 00:31:43,269
<font color="#E5E5E5">that are also running there</font><font color="#CCCCCC"> and yeah the</font>

787
00:31:41,739 --> 00:31:47,229
videos that I've showed you are also at

788
00:31:43,269 --> 00:31:50,109
this link<font color="#CCCCCC"> I think you can trust</font><font color="#E5E5E5"> this URL</font>

789
00:31:47,229 --> 00:31:52,450
<font color="#CCCCCC">the one</font><font color="#E5E5E5"> that Google gave me so that's</font>

790
00:31:50,109 --> 00:31:54,968
<font color="#E5E5E5">where you can get</font><font color="#CCCCCC"> everything but it's</font>

791
00:31:52,450 --> 00:31:57,669
all good<font color="#CCCCCC"> research they're</font><font color="#E5E5E5"> often</font>

792
00:31:54,969 --> 00:31:59,109
shortcomings<font color="#E5E5E5"> so this definitely if it</font>

793
00:31:57,669 --> 00:32:01,179
were to be implemented<font color="#CCCCCC"> it would</font>

794
00:31:59,109 --> 00:32:02,889
definitely<font color="#E5E5E5"> increase the</font><font color="#CCCCCC"> tax surface</font>

795
00:32:01,179 --> 00:32:04,210
<font color="#E5E5E5">because now you've got something</font><font color="#CCCCCC"> that is</font>

796
00:32:02,889 --> 00:32:05,709
reading the memory of<font color="#CCCCCC"> android</font>

797
00:32:04,210 --> 00:32:09,039
applications which just<font color="#E5E5E5"> absolutely</font>

798
00:32:05,710 --> 00:32:10,779
terrifies me at the same<font color="#E5E5E5"> time so this</font>

799
00:32:09,039 --> 00:32:12,460
place<font color="#E5E5E5"> will typically run as root</font><font color="#CCCCCC"> and</font>

800
00:32:10,779 --> 00:32:15,269
what do<font color="#E5E5E5"> you know services running with</font>

801
00:32:12,460 --> 00:32:18,549
privileges<font color="#CCCCCC"> like that would</font><font color="#E5E5E5"> be targeted</font>

802
00:32:15,269 --> 00:32:20,019
<font color="#CCCCCC">and the pessimist in me is</font><font color="#E5E5E5"> saying well</font>

803
00:32:18,549 --> 00:32:22,299
we're still<font color="#E5E5E5"> struggling to get basic</font>

804
00:32:20,019 --> 00:32:24,249
security<font color="#CCCCCC"> rights I don't know how I feel</font>

805
00:32:22,299 --> 00:32:26,408
<font color="#E5E5E5">about us implementing a mechanism in</font>

806
00:32:24,249 --> 00:32:28,330
<font color="#E5E5E5">Android that's going to allow</font><font color="#CCCCCC"> some</font>

807
00:32:26,409 --> 00:32:31,539
service<font color="#CCCCCC"> to scan the memory for</font><font color="#E5E5E5"> Android</font>

808
00:32:28,330 --> 00:32:34,710
applications and like I said<font color="#CCCCCC"> it it's it</font>

809
00:32:31,539 --> 00:32:34,710
is quite terrifying

810
00:32:35,909 --> 00:32:43,299
so some<font color="#CCCCCC"> of the conclusions</font><font color="#E5E5E5"> from this so</font>

811
00:32:40,359 --> 00:32:46,478
far<font color="#E5E5E5"> it's a journey that I've seen so</font><font color="#CCCCCC"> far</font>

812
00:32:43,299 --> 00:32:47,649
I<font color="#E5E5E5"> don't think it's a silver bullet at</font>

813
00:32:46,479 --> 00:32:48,999
this point in time I<font color="#CCCCCC"> think in</font>

814
00:32:47,649 --> 00:32:51,070
conjunction<font color="#CCCCCC"> with all the</font><font color="#E5E5E5"> other</font>

815
00:32:48,999 --> 00:32:54,519
mechanisms<font color="#E5E5E5"> it's a step in the right</font>

816
00:32:51,070 --> 00:32:57,119
direction<font color="#CCCCCC"> defense</font><font color="#E5E5E5"> in depth is key with</font>

817
00:32:54,519 --> 00:33:01,179
all of this<font color="#CCCCCC"> in the Android ecosystem</font>

818
00:32:57,119 --> 00:33:03,369
always a problem<font color="#E5E5E5"> dynamic analysis in</font>

819
00:33:01,179 --> 00:33:04,989
conjunction with static analysis can<font color="#CCCCCC"> be</font>

820
00:33:03,369 --> 00:33:07,179
really powerful<font color="#E5E5E5"> to help you understand</font>

821
00:33:04,989 --> 00:33:07,990
what an app is doing but

822
00:33:07,180 --> 00:33:12,000
<font color="#E5E5E5">believe</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> Android operating</font>

823
00:33:07,990 --> 00:33:14,470
system is key to protecting itself

824
00:33:12,000 --> 00:33:17,070
because third-party applications are

825
00:33:14,470 --> 00:33:22,390
limited<font color="#E5E5E5"> by the capability</font><font color="#CCCCCC"> that is</font>

826
00:33:17,070 --> 00:33:25,179
provided by<font color="#CCCCCC"> the APR</font><font color="#E5E5E5"> so you can't have a</font>

827
00:33:22,390 --> 00:33:27,910
system<font color="#E5E5E5"> access if you're a third party</font>

828
00:33:25,180 --> 00:33:31,060
app so the Android operating system has

829
00:33:27,910 --> 00:33:34,060
<font color="#CCCCCC">to provide that so as end of my</font>

830
00:33:31,060 --> 00:33:35,770
<font color="#CCCCCC">presentation I have flown through it and</font>

831
00:33:34,060 --> 00:33:37,179
I've actually<font color="#CCCCCC"> realized now it's because</font>

832
00:33:35,770 --> 00:33:39,220
I've<font color="#E5E5E5"> actually missed a couple of slides</font>

833
00:33:37,180 --> 00:33:41,970
<font color="#CCCCCC">that did</font><font color="#E5E5E5"> not make my</font><font color="#CCCCCC"> los edit</font><font color="#E5E5E5"> that</font>

834
00:33:39,220 --> 00:33:44,080
actually showed that<font color="#E5E5E5"> as I ate cake demo</font>

835
00:33:41,970 --> 00:33:46,510
<font color="#E5E5E5">so what I'm gonna do is actually just</font>

836
00:33:44,080 --> 00:33:48,929
open the floor up<font color="#E5E5E5"> for any questions</font><font color="#CCCCCC"> if</font>

837
00:33:46,510 --> 00:33:48,930
there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> any</font>

838
00:33:49,590 --> 00:34:01,559
[Applause]

839
00:33:58,760 --> 00:34:03,059
cool so yeah I<font color="#E5E5E5"> did miss out one slide</font>

840
00:34:01,559 --> 00:34:06,178
<font color="#CCCCCC">that shows ate cake running from the</font>

841
00:34:03,059 --> 00:34:08,969
<font color="#E5E5E5">Android</font><font color="#CCCCCC"> application it is online you'll</font>

842
00:34:06,179 --> 00:34:11,760
see<font color="#CCCCCC"> that the application uses the</font>

843
00:34:08,969 --> 00:34:13,168
library and then you specify<font color="#E5E5E5"> a</font>

844
00:34:11,760 --> 00:34:15,240
<font color="#CCCCCC">particular process that you</font><font color="#E5E5E5"> want to</font>

845
00:34:13,168 --> 00:34:17,339
analyze<font color="#E5E5E5"> and it'll go ahead and tell you</font>

846
00:34:15,239 --> 00:34:20,040
hey<font color="#CCCCCC"> this</font><font color="#E5E5E5"> app is using text class loaders</font>

847
00:34:17,340 --> 00:34:21,750
this app is using<font color="#E5E5E5"> these objects to</font>

848
00:34:20,040 --> 00:34:24,810
establish these remote connections<font color="#E5E5E5"> and</font>

849
00:34:21,750 --> 00:34:26,520
it can be quite useful<font color="#CCCCCC"> and you'll see</font>

850
00:34:24,810 --> 00:34:28,379
why I'm<font color="#CCCCCC"> not a developer just</font><font color="#E5E5E5"> by looking</font>

851
00:34:26,520 --> 00:34:30,000
at<font color="#E5E5E5"> that</font><font color="#CCCCCC"> application but if you do want</font>

852
00:34:28,379 --> 00:34:32,250
to see<font color="#E5E5E5"> that actual PSC it is running</font>

853
00:34:30,000 --> 00:34:34,520
<font color="#CCCCCC">there</font><font color="#E5E5E5"> and it is all online</font><font color="#CCCCCC"> so yeah thank</font>

854
00:34:32,250 --> 00:34:37,679
you for<font color="#E5E5E5"> your time</font><font color="#CCCCCC"> see you at the party</font>

855
00:34:34,520 --> 00:34:39,090
<font color="#E5E5E5">don't drink too much and yeah have a</font>

856
00:34:37,679 --> 00:34:40,610
good<font color="#E5E5E5"> one and thank you brew con for</font>

857
00:34:39,090 --> 00:34:44,579
having me

858
00:34:40,610 --> 00:34:44,579
[Applause]

