1
00:00:00,000 --> 00:00:05,970
alright last but not least I love to
welcome really in Johnson they're going

2
00:00:05,970 --> 00:00:10,330
to talk about technical details and
implementations for detection noodles

3
00:00:10,330 --> 00:00:15,960
for analysis and i'm looking forward to
the presentation so the floor sales yeah

4
00:00:15,960 --> 00:00:22,020
thanks for giving us the best slot of
the entire conference what I like being

5
00:00:22,020 --> 00:00:27,289
last win win situation right if we go
too long then you guys can sneak out and

6
00:00:27,289 --> 00:00:30,429
we won't see you afterwards it will be
awkward if you go too short to get out

7
00:00:30,429 --> 00:00:33,829
early and you can drink beer and stuff
and so this is good if we're right on

8
00:00:33,829 --> 00:00:38,020
time and I guess that's maybe lose
situation I don't know but anyways super

9
00:00:38,020 --> 00:00:41,780
excited to be here we are going to dive
into a couple of technical details

10
00:00:41,780 --> 00:00:47,160
around our topic here and so will get
into those as well I guess I quick

11
00:00:47,160 --> 00:00:55,300
errands do everything in our authors
here and defenders maybe read Demers ok

12
00:00:55,300 --> 00:00:59,029
we got a good year and will try to talk
to a number of different perspectives

13
00:00:59,030 --> 00:01:02,500
throughout this presentation but let's
get started let's not do too much

14
00:01:02,500 --> 00:01:05,780
introduction to get a better do a little
better

15
00:01:05,780 --> 00:01:10,470
my name's with a balanced and I'm from
the dc-area I work for fire I or chrome

16
00:01:10,470 --> 00:01:15,229
and even before that about five years
sort of doing incident response computer

17
00:01:15,229 --> 00:01:18,409
forensics and more recently over the
past couple years I focused on doing

18
00:01:18,409 --> 00:01:22,280
specifically malware analysis then
sitting in for my computer

19
00:01:22,280 --> 00:01:27,950
late nights and starkly get either pro
and disassembly John

20
00:01:27,950 --> 00:01:29,800
hello everyone

21
00:01:29,800 --> 00:01:40,610
better so I actually with managing
professional services you doing I R

22
00:01:40,610 --> 00:01:46,940
where four and six previously before
that I was running it works with my dad

23
00:01:46,940 --> 00:01:51,289
you know building forensics tools that
kind of thing for that is attempting to

24
00:01:51,290 --> 00:01:59,230
be a game developer whatever but yeah so
now with manda and you know exploring

25
00:01:59,230 --> 00:02:05,850
all these cool new tools and you know
knowing about where we're going to be

26
00:02:05,850 --> 00:02:14,600
talking about shims is a great new way
it's not really that new but yeah sure

27
00:02:14,600 --> 00:02:17,720
right so we're talking about here today
is the application compatibility

28
00:02:17,720 --> 00:02:23,620
infrastructure or shims anyone here
before everyone here know what it is

29
00:02:23,620 --> 00:02:28,200
simply not that's why you're here that's
ok we're going to dive into it let me

30
00:02:28,200 --> 00:02:31,829
tell you talk to a little bit about how
I got involved in them and why can't the

31
00:02:31,830 --> 00:02:36,550
so interesting so I work on the Maillard
reaction and fire and Mandy and we get

32
00:02:36,550 --> 00:02:41,020
to see a lot of stuff comes in each day
we reverse a fairly quickly try to get a

33
00:02:41,020 --> 00:02:43,440
sense for what it's doing and if it's
doing something new

34
00:02:43,440 --> 00:02:46,930
cooler interesting that we do a deep
dive analysis on it and so there was

35
00:02:46,930 --> 00:02:50,950
this one particular case we had this
like large deployment to fire I boxes

36
00:02:50,950 --> 00:02:56,280
that their clients paying like a lot of
money for and spear phishing emails and

37
00:02:56,280 --> 00:03:00,550
our boxes were on fire now the client
wasn't happy that doesn't make me feel

38
00:03:00,550 --> 00:03:04,459
real good about working for a company
whose products don't work so we want to

39
00:03:04,459 --> 00:03:07,860
get in figure out what was going on
there how more boxes weren't detecting

40
00:03:07,860 --> 00:03:13,060
this malware and that the malware still
persisting on the system so how about a

41
00:03:13,060 --> 00:03:17,520
pro start disassembling a sting
understanding was doing and it turns out

42
00:03:17,520 --> 00:03:22,890
this malware was using the application
compatibility infrastructure to maintain

43
00:03:22,890 --> 00:03:27,820
persistence on a box ok so we had was
the main payload that was attached to

44
00:03:27,820 --> 00:03:29,070
the email phishing email

45
00:03:29,070 --> 00:03:33,019
self-destructing wrong right to double
click on this thing if both straps files

46
00:03:33,020 --> 00:03:38,100
in the file system and its executing new
code the content of this code was a

47
00:03:38,100 --> 00:03:43,109
couple different files the main payload
was always call core plug or plug them

48
00:03:43,110 --> 00:03:49,830
our family it's honestly typically used
by Chinese actors and corporates used to

49
00:03:49,830 --> 00:03:59,580
basically bypass code integrity checking
a lot of times environments will enforce

50
00:03:59,580 --> 00:04:03,850
that all executables are running have to
be signed by trusted certificates are so

51
00:04:03,850 --> 00:04:08,140
what these attackers will do it still
deployed intentionally vulnerable and

52
00:04:08,140 --> 00:04:13,149
will generate programs that are
vulnerable to lure hijacking and then

53
00:04:13,150 --> 00:04:18,149
they supply and lower order hijacking
exploit in the form of a deal I'll miss

54
00:04:18,149 --> 00:04:18,679
cases

55
00:04:18,680 --> 00:04:23,240
DLL and when they execute this
legitimate science program that is

56
00:04:23,240 --> 00:04:28,100
vulnerable its slurps up this luscious
code into the address space and execute

57
00:04:28,100 --> 00:04:33,980
so it's a tricky way from to bypass code
signing verification know it's like this

58
00:04:33,980 --> 00:04:38,010
is a pretty well-known attacker we see
it all the time again we talked about

59
00:04:38,010 --> 00:04:41,680
was interesting I was actually the
payload the shellcode payload but

60
00:04:41,680 --> 00:04:46,060
ultimately executed and was malicious
and what was going on there was a whole

61
00:04:46,060 --> 00:04:49,150
bunch of different things it was not so
do which is what we typically see in

62
00:04:49,150 --> 00:04:53,429
this kind of ecosystem it was kind of a
mishmash of a of a back door with an

63
00:04:53,430 --> 00:04:56,870
installer with a downloader a bunch of
different code families kind of package

64
00:04:56,870 --> 00:05:03,200
in 2010 when it actually installed
malware for persistence it could do it

65
00:05:03,200 --> 00:05:06,140
using a service but it could also use
this application compatibility

66
00:05:06,140 --> 00:05:10,580
infrastructure and that's how it was
evading our sandbox as a thousand ways

67
00:05:10,580 --> 00:05:13,870
to evade a sandbox but this is a really
interesting ones were gonna dig into

68
00:05:13,870 --> 00:05:19,880
that one walk us through the basics of
what this thing is and why we should

69
00:05:19,880 --> 00:05:20,760
care

70
00:05:20,760 --> 00:05:21,599
sure

71
00:05:21,600 --> 00:05:29,510
so basically what the this
infrastructure does is its windows way

72
00:05:29,510 --> 00:05:37,340
like 16 applications across their
different OS's so you know the transfer

73
00:05:37,340 --> 00:05:42,849
from XP to Windows 7 to Windows 8
Windows 10 you know it's it's radically

74
00:05:42,850 --> 00:05:46,310
different than it was you know ten years
ago and so they implement December

75
00:05:46,310 --> 00:05:50,520
structured so that it could fix
applications that were already compiled

76
00:05:50,520 --> 00:05:56,820
people are familiar with using and they
didn't want to compile you know whatever

77
00:05:56,820 --> 00:06:03,140
they wrote you know whatever application
they made into you know a whole new

78
00:06:03,140 --> 00:06:08,400
binary for each OS Windows OS like its
launch so they create these these fixes

79
00:06:08,400 --> 00:06:14,260
and and actually Microsoft uses this all
the time and when you get an update

80
00:06:14,260 --> 00:06:19,130
sometimes I'll see you like microsoft
office you know getting updated all the

81
00:06:19,130 --> 00:06:24,880
time like sometimes you know two or
three times a week sometimes when they

82
00:06:24,880 --> 00:06:28,260
find like different things are going
wrong different vulnerabilities that

83
00:06:28,260 --> 00:06:35,230
might actually cause office the break or
you know I look to break whatever and so

84
00:06:35,230 --> 00:06:39,330
they'll implement these little fixes and
they do this by looking into the apt

85
00:06:39,330 --> 00:06:46,409
actual Windows API so these things are
actually called shims and the built into

86
00:06:46,410 --> 00:06:54,060
these these big data bases operate on
the file system and they're basically

87
00:06:54,060 --> 00:07:05,020
these binary XML so what's inside each
of these shimon trees you have a

88
00:07:05,020 --> 00:07:10,820
filename a key checks file size version
info and then you have so this is all

89
00:07:10,820 --> 00:07:14,900
pointing towards the actual target of
whatever application you're trying to

90
00:07:14,900 --> 00:07:22,989
modify or six and where you actually
have or these these reconfigured quick

91
00:07:22,990 --> 00:07:29,350
fixes and then there's like four hundred
and seven of them you can modify an

92
00:07:29,350 --> 00:07:36,870
application anyway you want to run you
can inject different shoko you can you

93
00:07:36,870 --> 00:07:41,360
know turn off Windows Defender you can
turn on you know make it run as admin

94
00:07:41,360 --> 00:07:46,490
you know all these different little
fixes or you can virtualize a registry

95
00:07:46,490 --> 00:07:52,900
and we're gonna go talk to all of these
different implementations also you know

96
00:07:52,900 --> 00:07:57,960
uses this infrastructure to actually
inject its DLL and two processes on

97
00:07:57,960 --> 00:08:04,099
execution so that you know it can
analyze exactly what an application is

98
00:08:04,100 --> 00:08:14,940
doing so this is a shame entry for the
Oregon Trail and one of the fixes is

99
00:08:14,940 --> 00:08:20,060
actually doing is you know Oregon Trail
has been around for you know quite a

100
00:08:20,060 --> 00:08:25,050
long time so you know it didn't actually
have you know it doesn't know how to

101
00:08:25,050 --> 00:08:30,940
reference this space that's you know
large you know it can't reference a

102
00:08:30,940 --> 00:08:37,940
terabyte drive so what one of these six
is emulates it for the the program so

103
00:08:37,940 --> 00:08:41,719
when it tries to reference something it
can actually see you know store files

104
00:08:41,719 --> 00:08:45,570
etc so this is

105
00:08:45,570 --> 00:08:51,810
this is basically the XML that we pulled
out from this entry so some shrimp

106
00:08:51,810 --> 00:08:56,380
techniques so here we're actually gonna
talk about some of the things that we

107
00:08:56,380 --> 00:09:02,760
saw in the ohio these get created and
exactly know what we see in the wild and

108
00:09:02,760 --> 00:09:10,350
how they're actually deployed so this is
the action the application toolkit it's

109
00:09:10,350 --> 00:09:16,030
actually given out by Microsoft for free
and they will actually help you if you

110
00:09:16,030 --> 00:09:20,550
contact them they'll actually help you
fix your application and then go through

111
00:09:20,550 --> 00:09:28,010
like each of these different fixes and
you know what each one does that way you

112
00:09:28,010 --> 00:09:33,600
can look into the API and change the how
your application is actually running so

113
00:09:33,600 --> 00:09:39,700
here I was actually using the correct
file past six and you can actually see

114
00:09:39,700 --> 00:09:44,980
on the left side here all these
applications that were fixed so you can

115
00:09:44,980 --> 00:09:52,220
actually see like World of Warcraft or
ZoneAlarm here and you know the Oregon

116
00:09:52,220 --> 00:09:56,830
Trail or all these different other
applications cause when you write a shim

117
00:09:56,830 --> 00:10:03,270
Microsoft will actually claiming his
property as part of their way to have a

118
00:10:03,270 --> 00:10:06,910
reliable OS running the different
applications that a user might want to

119
00:10:06,910 --> 00:10:13,410
install so they request that you while I
guess the man that you send the shipment

120
00:10:13,410 --> 00:10:18,199
so that way when you run an application
that there's that reliability that it's

121
00:10:18,200 --> 00:10:25,390
actually going to run properly so
there's this one is actually using

122
00:10:25,390 --> 00:10:31,520
Windows 7 and in then in Windows 8.1 and
actually has like four hundred and seven

123
00:10:31,520 --> 00:10:36,780
different fixes that you can slip
through I think we found in our kind of

124
00:10:36,780 --> 00:10:40,230
our experience looking into this whole
infrastructure everything that this

125
00:10:40,230 --> 00:10:42,810
technology has been around for a really
long time

126
00:10:42,810 --> 00:10:44,119
alright so this is

127
00:10:44,120 --> 00:10:47,990
built into the very core of windows and
actually a lot of people already know

128
00:10:47,990 --> 00:10:52,650
about it from the defensive and may be
offensive perspectives I think I knew I

129
00:10:52,650 --> 00:10:55,339
didn't know about it until a couple
months ago I don't see much research

130
00:10:55,339 --> 00:10:57,339
about it like I said again

131
00:10:57,339 --> 00:11:00,980
attacks if you look online this is a
very heavily used technology especially

132
00:11:00,980 --> 00:11:06,000
within kind of the gaming industry and
john was saying earlier in software

133
00:11:06,000 --> 00:11:09,610
development and ensuring that old
obsolete programs still run a new

134
00:11:09,610 --> 00:11:13,470
versions of Windows so it's kind of neat
when you're you're browsing online and

135
00:11:13,470 --> 00:11:15,870
you don't find any attackers were using
the stuff but there's plenty of

136
00:11:15,870 --> 00:11:19,600
information on gaming forums on how to
actually set these things up and use

137
00:11:19,600 --> 00:11:25,800
them in your environment so as part of
the plane once you actually create your

138
00:11:25,800 --> 00:11:27,160
shimon tree

139
00:11:27,160 --> 00:11:31,969
STB install or actually install it for
you will create the uninstall entry in

140
00:11:31,970 --> 00:11:37,760
the control panel and create these two
registry keys so that way when when the

141
00:11:37,760 --> 00:11:42,760
application actually runs OS will say
okay hold on I need to load the ship up

142
00:11:42,760 --> 00:11:46,520
first and this is how he knows where to
get it and although that sham and then

143
00:11:46,520 --> 00:11:50,949
whenever a file try as a reference any
of the things that its hooks will

144
00:11:50,950 --> 00:11:58,220
redirect it to whatever you know whoever
made the shim you know process however

145
00:11:58,220 --> 00:12:05,720
you want that she wanted you to do and
he gets out forensic investigators out

146
00:12:05,720 --> 00:12:11,000
there used the application about a
compact cash found pretty useful right

147
00:12:11,000 --> 00:12:13,490
you could see what programs are
executing some of the things that are

148
00:12:13,490 --> 00:12:18,209
loaded and when they're running well as
the performance feature of this whole

149
00:12:18,209 --> 00:12:22,060
infrastructure here it's that I think
I've cash is just a feature that allows

150
00:12:22,060 --> 00:12:25,800
the system to quickly decide whether or
not a new program that's about it

151
00:12:25,800 --> 00:12:30,250
executes should be ashamed it's
interesting now in the original research

152
00:12:30,250 --> 00:12:34,230
first on out we basically like hey
there's a slight registry key that seems

153
00:12:34,230 --> 00:12:37,020
to have really interesting information
and we don't really know much about it

154
00:12:37,020 --> 00:12:40,829
is that there that it has to do with
this whole infrastructure that we're

155
00:12:40,830 --> 00:12:44,690
talking about right here so

156
00:12:44,690 --> 00:12:51,680
and basically microsoft recommends they
use this to you know pushing out with

157
00:12:51,680 --> 00:12:58,459
you know group policy and then taxing on
MSI installer for your application

158
00:12:58,460 --> 00:13:05,850
however we have seen malware where it
actually directly as these registry

159
00:13:05,850 --> 00:13:09,710
values caused this all you need for your
sims to actually run and get reference

160
00:13:09,710 --> 00:13:15,460
when in a profession run so it's very
easy to circumvent some of these things

161
00:13:15,460 --> 00:13:22,790
you know the actual control panel and
trees so do you wanna go over some of

162
00:13:22,790 --> 00:13:26,620
these cool things through you know we've
been talking like this this weird

163
00:13:26,620 --> 00:13:30,740
infrastructure game developers use it i
guess im our authors use it and why do

164
00:13:30,740 --> 00:13:35,420
they use it so here are some of just a
few of the four hundred or so teams that

165
00:13:35,420 --> 00:13:40,300
are available to you to configure using
that nicely program so let's see

166
00:13:40,300 --> 00:13:44,630
disable Windows Defender that sounds
pretty useful maybe I create a sham

167
00:13:44,630 --> 00:13:48,620
apply it to my mouth were filed and then
like maybe Windows Defender doesn't like

168
00:13:48,620 --> 00:13:52,780
look at it cuz that would cause system
instability or something we can correct

169
00:13:52,780 --> 00:13:56,850
file past and John likely gonna walk us
through that essentially we can say

170
00:13:56,850 --> 00:14:00,870
whatever you wanna go launcher process
and this one directory redirected to

171
00:14:00,870 --> 00:14:06,100
this other location ok we can redirect
file system reads and writes and Mark

172
00:14:06,100 --> 00:14:08,520
Begich had a really interesting
presentation I think two years ago at

173
00:14:08,520 --> 00:14:12,880
Derby Conn where he developed the whole
user land route kit that can hide from

174
00:14:12,880 --> 00:14:15,960
the TV but basically you'll read
redirecting all these filesystem

175
00:14:15,960 --> 00:14:19,900
activities other things we can do is we
can change the directory is in which

176
00:14:19,900 --> 00:14:24,400
load library looks for deals that it's
gonna lower it would be pretty neat way

177
00:14:24,400 --> 00:14:27,680
of kind of adding new

178
00:14:27,680 --> 00:14:33,109
hijacking vulnerabilities perhaps no
signature shock there is no

179
00:14:33,110 --> 00:14:37,839
documentation on it I'd like to believe
maybe just no longer verify signatures

180
00:14:37,839 --> 00:14:44,140
as you load them I think we did a little
research XII gonna be a fun one that's

181
00:14:44,140 --> 00:14:47,569
another good really interesting shows
that we can use you can like terminate

182
00:14:47,570 --> 00:14:48,420
process

183
00:14:48,420 --> 00:14:52,529
on execution when I first met up with a
melee kill them imagine you go when you

184
00:14:52,529 --> 00:14:57,200
strip try to run like Process Explorer
on your camera systems put triage a

185
00:14:57,200 --> 00:15:00,970
lightbox try to open enough and
immediately stop trippin again they just

186
00:15:00,970 --> 00:15:05,110
killed over and over and over again I'd
be pretty frustrating to be the end of

187
00:15:05,110 --> 00:15:10,180
the world but I'd love to mess with some
defender as if I were developing our

188
00:15:10,180 --> 00:15:14,120
like using that way and the same thing
with a virtual registry that allows us

189
00:15:14,120 --> 00:15:18,920
to redirect reason rights from specific
registry key is to different parts of

190
00:15:18,920 --> 00:15:23,189
the high so as an attacker that's a
pretty interesting thing to do right if

191
00:15:23,190 --> 00:15:27,860
you were to say for instance target
Kaspersky don't yet see and say his

192
00:15:27,860 --> 00:15:33,480
first anytime you try to read from the
current freshman Ryan key under the I

193
00:15:33,480 --> 00:15:39,630
don't know current users hi well let's
re-direct that registry read to the

194
00:15:39,630 --> 00:15:44,139
local systems hi ok now on conspiracy
tries to go in a numerate this

195
00:15:44,139 --> 00:15:49,019
persistence locations things that'll be
executed when the user logs and he

196
00:15:49,019 --> 00:15:53,440
doesn't see anything malicious in that
users high seas with the system starting

197
00:15:53,440 --> 00:15:57,339
out and that would be an interesting way
to my mouth where only the a/v solutions

198
00:15:57,339 --> 00:16:02,760
but not the drivers and all the other
parts of the system so I think there

199
00:16:02,760 --> 00:16:06,689
would be pretty neat thing you could do
but let's dig into a couple of

200
00:16:06,690 --> 00:16:10,390
real-world practical instances of what
mauer is doing and why we should care

201
00:16:10,390 --> 00:16:14,329
about this because these things are
really need to start with but there's an

202
00:16:14,329 --> 00:16:18,719
even better things you can do so we
describe the very beginning of this

203
00:16:18,720 --> 00:16:22,160
presentation we know what kind of
motivated us to start researching this

204
00:16:22,160 --> 00:16:27,390
topic it was a sentence of your core
plugin aspect or those creating these

205
00:16:27,390 --> 00:16:31,930
STB files which I had to research and
understand and I learned that they were

206
00:16:31,930 --> 00:16:37,670
the STB file is the way that malware
registers a shame with the operating

207
00:16:37,670 --> 00:16:41,469
system and says hey next time you see
the process run make sure you shimon

208
00:16:41,470 --> 00:16:46,010
apply these faxes all rights I learned
about it and I started to learn how to

209
00:16:46,010 --> 00:16:52,720
process these STB files when I dug into
the STB file that was being used by the

210
00:16:52,720 --> 00:16:58,240
malware this is what I saw well I have
changed a little bit of the name here so

211
00:16:58,240 --> 00:16:59,430
it might be hard for you to

212
00:16:59,430 --> 00:17:05,760
identify the client we have a name for
this one particular database this is not

213
00:17:05,760 --> 00:17:09,429
this doesn't affect how the program runs
but from an investigative perspective

214
00:17:09,429 --> 00:17:13,010
this is interesting because what we
found was actually a huge campaign of

215
00:17:13,010 --> 00:17:16,520
attacks that reuse the same database
ideas so even though they attack

216
00:17:16,520 --> 00:17:19,869
different users and attacked him
processes there are linked by the same

217
00:17:19,869 --> 00:17:24,589
database I do that was an easy way for
us to track this campaign the next thing

218
00:17:24,589 --> 00:17:33,220
I saw was this definition of a show so
this is a type of this is a specific

219
00:17:33,220 --> 00:17:38,990
instance of a loved one of those
mechanisms in this case the DLL file tax

220
00:17:38,990 --> 00:17:45,910
says we want to load and additional DLL
file at runtime into some process ok

221
00:17:45,910 --> 00:17:51,500
this DLL file would in a legitimate
circumstances be allowed to patch up the

222
00:17:51,500 --> 00:17:55,720
target executable afford execuse maybe
can do some runtime patching and the

223
00:17:55,720 --> 00:17:59,590
essence of Emmett for instance it can
add additional medications to prevent

224
00:17:59,590 --> 00:18:01,320
exploitation on the box

225
00:18:01,320 --> 00:18:06,559
alright and for staff and stuff like
that but here is using its malicious Lee

226
00:18:06,559 --> 00:18:12,440
it was targeting SVC hosted exe and
everytime not process started the

227
00:18:12,440 --> 00:18:18,990
windows loader very nicely said Oh I see
the position that is registered ok one

228
00:18:18,990 --> 00:18:23,130
sec host arts which starts all the time
when the system boots I'm gonna load in

229
00:18:23,130 --> 00:18:26,520
this alleged ideal outside back door

230
00:18:26,520 --> 00:18:30,690
alright I thought that was pretty cool
because I didn't cause when I go

231
00:18:30,690 --> 00:18:34,640
investigate the system I see maybe
there's some our running maybe I use

232
00:18:34,640 --> 00:18:39,280
volatility or something I look at the
address space of SVC host I see this

233
00:18:39,280 --> 00:18:44,110
malicious thing and it's i got a disk I
say how come SEC host is compromised

234
00:18:44,110 --> 00:18:47,689
like why is it running an address this
is SPC host code injection or anything

235
00:18:47,690 --> 00:18:51,960
else again really need because the
definition of these shims are in this

236
00:18:51,960 --> 00:18:57,990
opaque binary database format registered
this really weird registry key off to

237
00:18:57,990 --> 00:19:01,920
the side it's very difficult to identify
that this is James are registered with

238
00:19:01,920 --> 00:19:05,600
the system and that's what we wanted to
really talk about here today is that

239
00:19:05,600 --> 00:19:10,040
there's not really any good methodology
at this moment to identify this thing

240
00:19:10,040 --> 00:19:11,340
happening

241
00:19:11,340 --> 00:19:16,560
so will they get a little bit more so
anyways this is really underhanded it's

242
00:19:16,560 --> 00:19:25,870
very difficult to identify this type of
deal injection so this one was what I

243
00:19:25,870 --> 00:19:30,189
actually implementing the law and the
lab just play play with it see how long

244
00:19:30,190 --> 00:19:33,960
would actually take to build some of
these things take takes like probably

245
00:19:33,960 --> 00:19:39,080
about like 30 seconds I mean to build
one the shims build and deploy on these

246
00:19:39,080 --> 00:19:44,899
databases so I mean this custom I used
the correct file path fix which

247
00:19:44,900 --> 00:19:50,490
redirects the arguments and then I made
this mind I exe

248
00:19:50,490 --> 00:19:57,200
and basically just launches you know
some other executable and so whenever my

249
00:19:57,200 --> 00:20:02,740
ninety exceed trying to call this
executable instead you know that since I

250
00:20:02,740 --> 00:20:08,809
hope the API is now going to call the
CDM point out here so all I did was I

251
00:20:08,809 --> 00:20:15,200
simply added this six and I said but
this gave it this argument so now I'm

252
00:20:15,200 --> 00:20:19,770
redirecting whenever I call this
whenever the application calls this call

253
00:20:19,770 --> 00:20:24,620
this so you can do this for you know I
know I files batch scripts it doesn't

254
00:20:24,620 --> 00:20:30,489
matter essentially anything it's it's
looking into the API and redirecting all

255
00:20:30,490 --> 00:20:31,630
of these files pass

256
00:20:31,630 --> 00:20:37,350
why this is implemented because you know
and Windows XP everything was named like

257
00:20:37,350 --> 00:20:41,260
you know when and he's blah blah blah
you know or documents and settings blah

258
00:20:41,260 --> 00:20:45,720
blah blah so this was their way of
fixing that and saying like ok I want to

259
00:20:45,720 --> 00:20:51,920
redirect to see users or you know oh hey
I want to write to see windows no your

260
00:20:51,920 --> 00:20:56,170
gonna go to see users AppData or
something like that so that this is why

261
00:20:56,170 --> 00:21:03,470
they actually put the facts and but it
can be used for military purposes so

262
00:21:03,470 --> 00:21:10,320
this is what this looks like I made this
minus the V Shem database and then this

263
00:21:10,320 --> 00:21:14,899
is my executable this application that
I'm affecting it has like the crack file

264
00:21:14,900 --> 00:21:23,230
pounds and then the argument so you know
pretty clear so you know so some of the

265
00:21:23,230 --> 00:21:26,690
use you know after analysis of this you
know some of the things that you could

266
00:21:26,690 --> 00:21:32,280
actually take away is like a mile high
command I exe so you could you know how

267
00:21:32,280 --> 00:21:36,490
some in persistence or you know man the
middle some of these process creation

268
00:21:36,490 --> 00:21:40,950
would say in a child wants to create
something or you know some admin is

269
00:21:40,950 --> 00:21:45,809
doing something you can see exactly what
they're trying to do on particular

270
00:21:45,809 --> 00:21:52,220
servers how they're set up you know add
some DFI our confusion so when some

271
00:21:52,220 --> 00:21:55,640
someone knows that something's wrong as
you see something you know how about on

272
00:21:55,640 --> 00:21:59,440
the network is that cool hey you know
what is going on here on the system and

273
00:21:59,440 --> 00:22:04,409
then going actually see anything cuz you
can actually build all these shims to

274
00:22:04,409 --> 00:22:09,850
kinda build a back door to exactly you
know exel trade any kind of information

275
00:22:09,850 --> 00:22:42,340
on that system

276
00:22:42,340 --> 00:22:55,139
so there's there's no limitation to
where you can modify on operating system

277
00:22:55,140 --> 00:23:02,200
and so arthur the case study here is
another piece of malware that we've seen

278
00:23:02,200 --> 00:23:07,029
in awhile here this is cific malware
family I think it's so good it is kind

279
00:23:07,029 --> 00:23:11,990
of a commodity malware family it's not
as at this point the targeted threat but

280
00:23:11,990 --> 00:23:18,340
it doesn't really need stuff what makes
its own needs is that it installs us has

281
00:23:18,340 --> 00:23:24,470
to be filed with using STB install
registers with in the registry system

282
00:23:24,470 --> 00:23:29,210
when it boots up takes a target of
process and applies us into it and

283
00:23:29,210 --> 00:23:33,130
what's interesting about the shim is
that the ship actually directly patches

284
00:23:33,130 --> 00:23:38,370
shellcode into the target of executable
alright and only in memory will that

285
00:23:38,370 --> 00:23:43,070
she'll code be there and all the the
shell card on desk its associated with

286
00:23:43,070 --> 00:23:46,350
this complex database format that
basically no one actually knows how to

287
00:23:46,350 --> 00:23:53,049
detection really difficult so when I go
and I look at the the installation for

288
00:23:53,049 --> 00:23:58,649
the back door what I see is I got this
unique database idea that I could Quiapo

289
00:23:58,649 --> 00:24:03,580
except in this case the power actually
create a new database I D uniquely for

290
00:24:03,580 --> 00:24:07,289
every single installation so it's not
easy for me to go in and just blacklist

291
00:24:07,289 --> 00:24:10,890
that particular database I did now I
don't really know which ones might be

292
00:24:10,890 --> 00:24:15,110
related to the attacker within that I
see that the malware is targeting

293
00:24:15,110 --> 00:24:21,279
operated exe and went up her tight pussy
is lost the windows loader

294
00:24:21,279 --> 00:24:25,440
a compact past says okay sure enough I
have a shame to apply what should my

295
00:24:25,440 --> 00:24:31,220
going to apply this patch data 0 the
definition of that is right here

296
00:24:31,220 --> 00:24:37,220
the takeaway is attached its declaration
there is actually contains raw binary

297
00:24:37,220 --> 00:24:43,430
data that gets patched into memory at
specific locations this is awesome

298
00:24:43,430 --> 00:24:50,820
dating a little bit into this show
unicef what these patterns do but the

299
00:24:50,820 --> 00:24:53,990
capabilities within the statute its
structure again it's kind of an

300
00:24:53,990 --> 00:25:00,730
undocumented structure there allows you
to first match on its like you expect to

301
00:25:00,730 --> 00:25:04,700
find in memory that allows you to ensure
that you know when to corrupt the system

302
00:25:04,700 --> 00:25:08,580
by accidentally patching into the middle
of an existing function that allows you

303
00:25:08,580 --> 00:25:13,250
very accurately target specific versions
of software as memory patching is a

304
00:25:13,250 --> 00:25:18,090
fragile heart you think it would be like
I said this patch bits directly into

305
00:25:18,090 --> 00:25:23,320
memory that are defined in these STB
files and we can pass both he exceeds

306
00:25:23,320 --> 00:25:27,379
Indy Lights I love to read a little
proof of concept that maybe patches a

307
00:25:27,380 --> 00:25:32,480
single by it within I don't know as a
cell verification library at simply

308
00:25:32,480 --> 00:25:36,320
always returns true when you go to an
Internet address that would be a very

309
00:25:36,320 --> 00:25:41,530
obvious application of this type of
attack but this specific backdoor what

310
00:25:41,530 --> 00:25:47,450
it did was it made three patches to
opera and within operate targeted

311
00:25:47,450 --> 00:25:52,600
colonel 32 . exe which is a standard
library news on the left here we have

312
00:25:52,600 --> 00:25:56,399
the bits that were matched that the
loader just kind of verified were there

313
00:25:56,400 --> 00:26:02,040
in order to not corrupt members face and
we find on the right is about as are the

314
00:26:02,040 --> 00:26:06,570
bites that were passed in what we see on
the left here is that the malware

315
00:26:06,570 --> 00:26:10,580
targeted this unused portion of the
binary perhaps that some slack space

316
00:26:10,580 --> 00:26:14,929
within the the sections that contains us
know by us and what was put in this

317
00:26:14,930 --> 00:26:20,110
place was to instructions we have a call
instruction to hardcoded address an

318
00:26:20,110 --> 00:26:24,199
extra jump instruction turns out this
jump instructions never executed but

319
00:26:24,200 --> 00:26:30,600
this is a classic look ok sorry I did
like here he's not here are not in

320
00:26:30,600 --> 00:26:35,939
between sections so I got ahead of
myself as a different user

321
00:26:35,940 --> 00:26:41,970
start of a of a function that's commonly
used within 32 alright this is in one of

322
00:26:41,970 --> 00:26:46,960
the function prolongs Microsoft actually
includes the schnapps is no operation

323
00:26:46,960 --> 00:26:51,700
instructions in order to allow hot
touching during future updates to

324
00:26:51,700 --> 00:26:56,840
colonel 32 in this case the malware
takes advantage of this existing space

325
00:26:56,840 --> 00:27:00,059
at the beginning of a function to put on
its own instructions which again come to

326
00:27:00,059 --> 00:27:06,639
some luscious code see what that section
looks like here is that slack space

327
00:27:06,639 --> 00:27:12,979
section a bunch of no bites which is
replaced in memory with this trampoline

328
00:27:12,980 --> 00:27:18,250
here so anyone familiar with assembly
code x86 assembly code here will see

329
00:27:18,250 --> 00:27:24,450
that this first instruction changes the
return pointer which cleans up the stack

330
00:27:24,450 --> 00:27:31,220
after the execute its shady pushed FDA
says the context that the program is

331
00:27:31,220 --> 00:27:35,750
currently in and allows a pillow to
execute and the contact center be

332
00:27:35,750 --> 00:27:39,450
restored afterwards so there's no
lasting effects the program so that

333
00:27:39,450 --> 00:27:43,750
colonel 32 continues to execute as
expected but the malicious code also

334
00:27:43,750 --> 00:27:50,220
runs so in between the Pusha T in the
Park lady we have this car and this is

335
00:27:50,220 --> 00:27:55,429
where the payload of the shellcode back
Doris and so if we look at that we'd see

336
00:27:55,429 --> 00:28:00,000
like many kilobytes of shellcode which
ultimately reach out to the internet

337
00:28:00,000 --> 00:28:03,590
download additional back doors and
execute them on the system

338
00:28:03,590 --> 00:28:07,720
pretty cool little setup here I'm terms
of I try to this animation this

339
00:28:07,720 --> 00:28:12,269
afternoon I love these things and ICO
people do themselves atop here's a legit

340
00:28:12,269 --> 00:28:16,820
colonel 32 when this legit function is
called we would expect all the legit

341
00:28:16,820 --> 00:28:20,480
code to run and nothing unusual to
happen once it's been patched by this

342
00:28:20,480 --> 00:28:25,320
particular back door we saw those three
patches the first one was a jump at the

343
00:28:25,320 --> 00:28:30,340
very beginning of the function that
jumps to the trampoline trampoline

344
00:28:30,340 --> 00:28:37,449
passes control to our show code back
door which fetches additional back doors

345
00:28:37,450 --> 00:28:39,030
and execute on them on a system

346
00:28:39,030 --> 00:28:43,970
returns the trampoline and then the
legitimate colder than colonel 32 also

347
00:28:43,970 --> 00:28:53,970
gets an opportunity to still run so
that's pretty neat so well done in terms

348
00:28:53,970 --> 00:28:58,610
of analyzing this this is where I really
got excited because I don't know I feel

349
00:28:58,610 --> 00:29:02,350
when I'm analyzing a lot of these
targeted back doors lot of them are very

350
00:29:02,350 --> 00:29:05,409
difficult to analyze like it's almost
like the attackers don't care if they're

351
00:29:05,410 --> 00:29:10,630
found because there are completing their
attack right when I was dealing with

352
00:29:10,630 --> 00:29:13,520
this back door was thinking this is
awesome this is a guy who's going out

353
00:29:13,520 --> 00:29:17,040
and research how you can use this brand
new technology

354
00:29:17,040 --> 00:29:20,510
he's doing it in a way that makes it
very difficult for me to analyze because

355
00:29:20,510 --> 00:29:23,350
if I would actually asked the question
where else can I find this back door

356
00:29:23,350 --> 00:29:29,189
where else to find these artifacts I'm
not left with very much right because I

357
00:29:29,190 --> 00:29:33,630
have to look I is not colonel 32 is not
operate those things are not compromised

358
00:29:33,630 --> 00:29:39,320
again I have to look at your corners of
the registry and these database files

359
00:29:39,320 --> 00:29:47,780
that ok blobs of data even that she'll
code isn't in one section it's lit up

360
00:29:47,780 --> 00:29:50,810
all over the place and so i cant even
scan for particular house and things

361
00:29:50,810 --> 00:29:57,158
like that it's not a great situation so

362
00:29:57,159 --> 00:30:08,369
understand maybe what we can do about it
so basically this is what the file looks

363
00:30:08,369 --> 00:30:13,379
like you know it's just essentially
looks like a blow of data you can kind

364
00:30:13,379 --> 00:30:21,609
of pulls you know you know ask you out
of it but not really no doubt helped out

365
00:30:21,609 --> 00:30:26,889
yellow exposes 254 exports for
manipulating the gym so you know you

366
00:30:26,889 --> 00:30:34,809
have a lot of different things that you
can do that how they look like so what

367
00:30:34,809 --> 00:30:42,109
we do is we actually reverse engineered
it actually looks like an index XML

368
00:30:42,109 --> 00:30:48,129
document so the three main knows you
have the index the database structure

369
00:30:48,129 --> 00:30:54,699
and in a string table there's no
compression and encryption there is no

370
00:30:54,700 --> 00:30:58,210
no check songs or anything but you know
essentially when you're looking at it

371
00:30:58,210 --> 00:31:02,599
just looks like a blob of data that you
know it's very difficult to just like

372
00:31:02,599 --> 00:31:06,369
freed with a hex editor so you need to
build a parser to really understand

373
00:31:06,369 --> 00:31:08,840
what's going on

374
00:31:08,840 --> 00:31:16,320
lie on the Apple DLL routines that
doesn't really want work on Linux or Mac

375
00:31:16,320 --> 00:31:20,460
or some of your other analysis systems
also I'm always concerned about like

376
00:31:20,460 --> 00:31:24,259
what is Windows doing to interpret the
data for me like you try to use like a

377
00:31:24,259 --> 00:31:27,919
web browser and they go out of their way
to like Patrick data for you to make it

378
00:31:27,919 --> 00:31:34,049
actually displayed to you on screen when
I give Microsoft a Stevie file I wanna

379
00:31:34,049 --> 00:31:37,889
know that is giving me precisely the
information that's in there no more no

380
00:31:37,889 --> 00:31:38,789
less

381
00:31:38,789 --> 00:31:43,849
and I can't be sure that helped me out
that's why I think it's important that

382
00:31:43,849 --> 00:31:47,999
we know it these days I'll actually look
like the binary structure and so we can

383
00:31:47,999 --> 00:31:54,749
perceive ourselves so we ended up
actually building this despite a nasty

384
00:31:54,749 --> 00:32:02,179
being which breaks it down in our system
to these databases and windows so

385
00:32:02,179 --> 00:32:09,419
so here is link for actually when you
pull these things down they actually

386
00:32:09,419 --> 00:32:15,659
it's easy to grab them I mean it's not
like really are protected file so you

387
00:32:15,659 --> 00:32:21,740
can read them pretty easily so it's
pretty simple the copy and back so sorry

388
00:32:21,740 --> 00:32:26,809
for detection methodology you know when
we're investigating some of these things

389
00:32:26,809 --> 00:32:33,070
I decided to grab a bunch from you know
a couple of cars that I was doing just

390
00:32:33,070 --> 00:32:37,899
do some analysis to see if we could
actually find anything any of these

391
00:32:37,899 --> 00:32:45,399
things that scale so you know you wanna
walk through the yeah sure so I think

392
00:32:45,399 --> 00:32:48,869
the question that we need to consider is
we've done certain at this point like

393
00:32:48,869 --> 00:32:53,340
yeah if you have a single box and you
doing a deep forensic analysis and you

394
00:32:53,340 --> 00:32:57,709
suspect that the shins are years like
yeah you can you can deal with that

395
00:32:57,710 --> 00:32:58,379
right

396
00:32:58,379 --> 00:33:01,649
like there's some Parsons we've really
some parts of some other people earliest

397
00:33:01,649 --> 00:33:06,119
you can figure out what's going on but
that doesn't help us at a large scale in

398
00:33:06,119 --> 00:33:10,269
terms of detection of this things
actually happening if you don't have

399
00:33:10,269 --> 00:33:14,190
that hint that the attackers are using
this technique are you really going to

400
00:33:14,190 --> 00:33:18,549
be looking for us let's talk about how
you can do that so as we talk about how

401
00:33:18,549 --> 00:33:22,330
we do this I want to use one more
example of how I that I found just the

402
00:33:22,330 --> 00:33:28,830
other week I think it's semantics to
text this thing as envisioned kind of an

403
00:33:28,830 --> 00:33:34,080
interesting back door it's written in
Python so I first like possum pie to EXE

404
00:33:34,080 --> 00:33:36,820
I'm just going to decompile and
resources gonna be easy

405
00:33:36,820 --> 00:33:40,379
not actually easy as one of the first
times I've actually seen up as get an

406
00:33:40,379 --> 00:33:44,590
iPhone by code that was really fun to
play like emulated and figure out how it

407
00:33:44,590 --> 00:33:49,230
worked and then under the hood it used
to see types module to directly

408
00:33:49,230 --> 00:33:54,409
interface with native API and
dynamically create new STP files and

409
00:33:54,409 --> 00:33:58,010
installers STB files for persistence
alright

410
00:33:58,010 --> 00:34:00,560
so there's kind of a motivating example
here this is mass mailers and

411
00:34:00,560 --> 00:34:02,250
distributed all over the place

412
00:34:02,250 --> 00:34:05,650
how do we know that it's out there on
your system besides rely on semantic to

413
00:34:05,650 --> 00:34:13,610
do its so some of the year

414
00:34:13,610 --> 00:34:18,320
you know do we have any ways that we can
detect this normally like

415
00:34:18,320 --> 00:34:23,750
admit you know as an NIT you know admin
or security person you know if you you

416
00:34:23,750 --> 00:34:30,310
know just using like normal Windows
controls you know you know there is the

417
00:34:30,310 --> 00:34:34,299
problem is with this infrastructure is
that there's no central management for

418
00:34:34,300 --> 00:34:40,700
all these STDs that get deployed as an
application gets in i mean it gets you

419
00:34:40,699 --> 00:34:47,138
know stacked are you gets put on to one
of the existing databases and then you

420
00:34:47,139 --> 00:34:49,330
don't mind actually be different

421
00:34:49,330 --> 00:34:54,790
across the different systems depending
on what is installed first so there's

422
00:34:54,790 --> 00:34:59,190
also no Active Directory tools for this
shame database management so you don't

423
00:34:59,190 --> 00:35:04,050
know which ones been fix which one is
you don't know what you know

424
00:35:04,050 --> 00:35:09,420
updates of them push to the different
servers or different systems and there

425
00:35:09,420 --> 00:35:13,910
you know there's no accounting of these
changes or in the actual database and

426
00:35:13,910 --> 00:35:19,810
there's no no rollback features in case
you did push in and they're like oh you

427
00:35:19,810 --> 00:35:24,540
know I wanna go back to the old one
after I have pushed all these shims up

428
00:35:24,540 --> 00:35:33,650
and like it broke everything you know so
you only win maybe St be installed that

429
00:35:33,650 --> 00:35:39,220
exceed gets called and then you know do
some process auditing event logs or

430
00:35:39,220 --> 00:35:45,810
something but I don't know that's really
kind of seems like we're on our own

431
00:35:45,810 --> 00:35:50,390
because we can't use built-in tools to
Korea for the SEC files so maybe what we

432
00:35:50,390 --> 00:35:54,670
hope is like well truly these databases
are like signed by trusted certificates

433
00:35:54,670 --> 00:35:58,240
that are only loaded you know
appropriately well that's also not the

434
00:35:58,240 --> 00:36:01,919
case there's no Microsoft doesn't
verifying signatures when loading these

435
00:36:01,920 --> 00:36:05,630
gems and applying them to processes are
basically if you have administrative

436
00:36:05,630 --> 00:36:12,600
rights the box then you can install the
Sims and they always executed ok so well

437
00:36:12,600 --> 00:36:15,900
if we can't rely on Microsoft's new the
hashing in the verification well maybe

438
00:36:15,900 --> 00:36:20,030
we can develop a white list of all the
same databases that you see in your

439
00:36:20,030 --> 00:36:23,410
system I see my system if we just kind
of assumed that were not all compromise

440
00:36:23,410 --> 00:36:28,779
maybe he just uses lifeless without also
doesn't work because each of these

441
00:36:28,780 --> 00:36:33,060
databases ends up being more or less
unique to each individual system based

442
00:36:33,060 --> 00:36:37,330
on what software is installed in what
order to software was installed what

443
00:36:37,330 --> 00:36:40,150
time stance on your database the
database of all these different features

444
00:36:40,150 --> 00:36:44,930
into the new details they're ultimately
would you stay glaze that you can't just

445
00:36:44,930 --> 00:36:50,319
ask these files and compare them to a
white less that it doesn't work so

446
00:36:50,320 --> 00:36:57,580
alright what else can we think about
John so one way it was actually you know

447
00:36:57,580 --> 00:37:04,759
acquire all the STDs on a particular
system its it ranged anywhere from like

448
00:37:04,760 --> 00:37:11,800
50 megs hundred and twenty migs you know
depending on you know how many

449
00:37:11,800 --> 00:37:19,630
applications were actually installed on
persistent we also did you know some of

450
00:37:19,630 --> 00:37:24,920
the where the actual gym databases were
actually stored so like normally

451
00:37:24,920 --> 00:37:29,110
legitimate ones are stored in their own
Program Files directory so the help that

452
00:37:29,110 --> 00:37:34,580
application actually run that that's
that would appear normal also if Windows

453
00:37:34,580 --> 00:37:40,150
Windows has its own like in a patch
directory will have all of its databases

454
00:37:40,150 --> 00:37:46,350
and some of the ones that we found in
the wild they actually use their you

455
00:37:46,350 --> 00:37:51,350
know the user's profile environment
variable you know some of their working

456
00:37:51,350 --> 00:37:55,529
directories that's where they put the
STB that kinda stuck out like a sore

457
00:37:55,530 --> 00:38:01,650
thumb then also if anything's been added
you know let's you know you can inspect

458
00:38:01,650 --> 00:38:06,200
the tube registry keys showing what has
actually been registered on the system

459
00:38:06,200 --> 00:38:09,419
and then some

460
00:38:09,420 --> 00:38:14,980
we have we have a list here of like some
of the default databases you know so all

461
00:38:14,980 --> 00:38:22,670
these phones with maine are typically
the ones that the OS uses look at my

462
00:38:22,670 --> 00:38:26,579
system here to understand system now too
old I have those five as TV files and

463
00:38:26,579 --> 00:38:30,000
then an additional one that was
installed by think 77 and those are the

464
00:38:30,000 --> 00:38:34,599
only six are still be found out how my
entire system so maybe we could try and

465
00:38:34,599 --> 00:38:38,410
a large environmentally did say to some
kind of anomaly detection find out which

466
00:38:38,410 --> 00:38:42,328
which additional as TV's are installed
maybe look at them that way but that's

467
00:38:42,329 --> 00:38:46,200
not really great solutions at this point
like it's nice when you have the

468
00:38:46,200 --> 00:38:52,509
capacity to Hyundai how many guys get to
do hunting you know I mean like

469
00:38:52,510 --> 00:38:55,880
proactively looking for compromises
doesn't sound like too many people even

470
00:38:55,880 --> 00:39:00,559
have the capacity to do that so it's
nice to be able to think about how we do

471
00:39:00,559 --> 00:39:06,299
this but we don't want a solution that
relies on that if we're taking you know

472
00:39:06,299 --> 00:39:11,650
into account the specific mom bush in
malware what it actually did what when

473
00:39:11,650 --> 00:39:16,230
it was interacting the sea types to
create these custom STV files I was it

474
00:39:16,230 --> 00:39:19,390
was doing some really really silly
things they went through a lot of work

475
00:39:19,390 --> 00:39:20,160
to do

476
00:39:20,160 --> 00:39:23,290
Python opposition using these new
techniques and everything like that but

477
00:39:23,290 --> 00:39:26,990
when it came to actually using the same
infrastructure they made a lot of really

478
00:39:26,990 --> 00:39:31,990
bad choices some of things they did was
there's a timestamp at the beginning of

479
00:39:31,990 --> 00:39:37,450
the STB file about what it was like
created alright that's a 64 bit value of

480
00:39:37,450 --> 00:39:42,460
Microsoft file time and they picked a
random number to put in there alright so

481
00:39:42,460 --> 00:39:46,059
if you think about the time span
represented by a file time that's like

482
00:39:46,059 --> 00:39:49,190
hundreds or thousands of years and
they're just picking a random value and

483
00:39:49,190 --> 00:39:52,319
they're hoping that falls within
something reasonable I mean that's at

484
00:39:52,319 --> 00:39:56,079
sprained it would simply have to look at
these STB files and say hey which one

485
00:39:56,079 --> 00:40:01,109
are created last like 10 years and most
the time

486
00:40:01,109 --> 00:40:05,328
extreme majority of the time you'd cast
a spell where same thing with a compiler

487
00:40:05,329 --> 00:40:08,210
version they were just being random
numbers to create this compiler versions

488
00:40:08,210 --> 00:40:12,579
this particular piece of malware is not
too difficult to find using some basic

489
00:40:12,579 --> 00:40:17,920
heuristics inspecting the STP files but
we have to think about is that people

490
00:40:17,920 --> 00:40:21,839
a year from now maybe watch this
presentation are considered a little

491
00:40:21,839 --> 00:40:26,009
more depth how to use this technology
how to really blind and the environment

492
00:40:26,010 --> 00:40:34,270
what would you do that so there's
another artifact that's left behind is

493
00:40:34,270 --> 00:40:41,569
actually this this event log in the app
experience programme tree and the

494
00:40:41,569 --> 00:40:44,920
problem is that when you're actually
analyzing these things you'll see all

495
00:40:44,920 --> 00:40:50,299
the legitimate since they actually get
pushed by so you'll see a lie a lot of

496
00:40:50,299 --> 00:41:00,799
office one's outlook ones yeah so all
these things would show up and you know

497
00:41:00,799 --> 00:41:07,460
using this format you know compatibility
6 applied to block this this application

498
00:41:07,460 --> 00:41:11,160
you know and then have the fix
information so some of the the actual

499
00:41:11,160 --> 00:41:18,098
fixes that helped push so you'd see you
like you know like the file path one or

500
00:41:18,099 --> 00:41:22,079
whatever and then you know do you
actually have a technology thing can go

501
00:41:22,079 --> 00:41:26,829
through and parse through all these
unusual entries and see which one is the

502
00:41:26,829 --> 00:41:33,460
actual outlier and actually alert to
something being shims you know

503
00:41:33,460 --> 00:41:40,200
improperly or maliciously people of
psychedelic machine learning and

504
00:41:40,200 --> 00:41:44,379
computer security or else that might be
an application where maybe you could

505
00:41:44,380 --> 00:41:47,839
just stop a huge data set and then it
could just tell you what they usually

506
00:41:47,839 --> 00:41:48,849
are

507
00:41:48,849 --> 00:41:52,910
but I think early years away from that
solution so until someone develops that

508
00:41:52,910 --> 00:41:59,200
it's a feasible solution but just not
there yet and so one of the final ideas

509
00:41:59,200 --> 00:42:02,979
that we have right now in terms of
detecting these things is I don't know

510
00:42:02,979 --> 00:42:08,828
I'm kind of like domain-specific and
what I mean by that is already described

511
00:42:08,829 --> 00:42:11,979
earlier how we can simply has all the
SEC files and basically create these

512
00:42:11,979 --> 00:42:17,239
signatures and use them to wider
blacklist because each database looks

513
00:42:17,239 --> 00:42:23,349
mostly unique but we can do is have
entries within those databases ok so

514
00:42:23,349 --> 00:42:26,759
Microsoft john was saying earlier
distribute something like four hundred

515
00:42:26,759 --> 00:42:31,619
and ten defaults shims it has a
collection of a few thousand programs at

516
00:42:31,619 --> 00:42:33,210
Jims by default

517
00:42:33,210 --> 00:42:36,420
those things don't change from Windows
version of Windows version too much

518
00:42:36,420 --> 00:42:39,069
especially from your computer to my
computer

519
00:42:39,069 --> 00:42:44,720
definitions will still be there in a
slightly different order so we can do is

520
00:42:44,720 --> 00:42:48,129
basically come up as a community or you
can simply listen to me in a way that I

521
00:42:48,130 --> 00:42:52,489
did it is hashed which one of those
different entries that allows you to

522
00:42:52,489 --> 00:42:59,890
create a checksum work obviously you
have obviously that allows it to build

523
00:42:59,890 --> 00:43:04,348
the white list that you can look up
against your STB files and decide if the

524
00:43:04,349 --> 00:43:08,799
things in STP file are legitimate or
have never been seen before

525
00:43:08,799 --> 00:43:16,099
should be trusted or not trusted the
benefits of this is that it'll work the

526
00:43:16,099 --> 00:43:20,719
downside is well we need to start
developing tools I can parse these

527
00:43:20,719 --> 00:43:25,180
databases do it at scale do across
entire environment build-up assets

528
00:43:25,180 --> 00:43:29,129
there's a bit of work there but I think
we can demonstrate is that this

529
00:43:29,130 --> 00:43:33,999
technique would work should this take
this shelling attacks become much more

530
00:43:33,999 --> 00:43:38,339
prevalent and they are suffering in
Syria like every Patch Tuesday you know

531
00:43:38,339 --> 00:43:44,660
adding to that wireless so kind of pain
so

532
00:43:44,660 --> 00:43:50,000
so prepare for this scenario so
basically there's this this packer which

533
00:43:50,000 --> 00:43:57,059
actually builds a without you know using
this tool kit will actually pulled the

534
00:43:57,059 --> 00:44:03,079
the XML for each of the shims and then
packaged into a database for you and so

535
00:44:03,079 --> 00:44:07,520
if you took the system aimed at STV
which you can actually access with the

536
00:44:07,520 --> 00:44:15,549
toolkit normally I should say at all but
you can parse it out you know parse out

537
00:44:15,549 --> 00:44:22,299
all the XML and then repack and inject
your own gym and two sis Main St B and

538
00:44:22,299 --> 00:44:27,089
then you know he simply add a new ship
for explorer.exe you know how your

539
00:44:27,089 --> 00:44:34,038
payload have some key log data show you
know whatever you want right and then

540
00:44:34,039 --> 00:44:40,180
you know repack the system aimed at St
be played out who's going to is going to

541
00:44:40,180 --> 00:44:47,200
find it you know so it's just scary idea
of what you can do with these things and

542
00:44:47,200 --> 00:44:52,319
they're pretty much on chat right now
that you know the malware samples I we

543
00:44:52,319 --> 00:44:56,410
showed you we can catch pretty easily
like we've seen them we found in a while

544
00:44:56,410 --> 00:45:00,270
before but the big question is let's say
these people actually start working

545
00:45:00,270 --> 00:45:05,230
harder bosses crack down on a big raise
if they felt something cool and knew

546
00:45:05,230 --> 00:45:08,539
they do something like this and we're
gonna be totally left in the dust as the

547
00:45:08,539 --> 00:45:13,480
fenders they can be patching their
shellcode into arbitrary executables we

548
00:45:13,480 --> 00:45:17,619
won't easily defining it we have no way
to scan for it identify it across the

549
00:45:17,619 --> 00:45:22,579
network that's a little scary so the
idea of this visitation is kind of walk

550
00:45:22,579 --> 00:45:26,760
through a bit of this is the kind of
walk through this technology goes it

551
00:45:26,760 --> 00:45:31,410
introduction of what is infrastructure
is so you that malware and attackers are

552
00:45:31,410 --> 00:45:34,910
actively using US and the environment
and in the world for the past year or

553
00:45:34,910 --> 00:45:40,368
two it's becoming more and more common
and introduce a couple techniques that

554
00:45:40,369 --> 00:45:44,589
we could use to maybe find this thing
these are not include solutions as you

555
00:45:44,589 --> 00:45:49,410
can tell we still need to develop them
more as a community but as our

556
00:45:49,410 --> 00:45:53,618
introduction to the realm of application
compatibility show

557
00:45:53,619 --> 00:46:03,079
the front line now asked many questions
I don't know if any of this make sense

558
00:46:03,079 --> 00:46:11,069
if it was interesting to you let me know
what you think

559
00:46:11,069 --> 00:46:19,589
maybe maybe I didn't understand cuz it
was a long outlines a long day today of

560
00:46:19,589 --> 00:46:24,699
course but you describe the scenario
earlier where you would wind up with

561
00:46:24,699 --> 00:46:29,729
different view files if you install
Office first then say Visual Studio

562
00:46:29,729 --> 00:46:38,109
exactly if I took two machines and one I
did it in order at a and on the other I

563
00:46:38,109 --> 00:46:46,160
did it and B and then I took the TV file
from que se and I just dropped it on

564
00:46:46,160 --> 00:46:49,680
being is it still going to behave as it
is expected

565
00:46:49,680 --> 00:46:54,899
my understanding is that should behave
as expected so follow-on is if you're

566
00:46:54,900 --> 00:46:58,619
talking about us sort of scenario in
which you could conceivably do

567
00:46:58,619 --> 00:47:03,160
whitelisting that implies an enterprise
or institution that has a fairly

568
00:47:03,160 --> 00:47:08,629
sophisticated mechanism for controlling
was only a point yes you're probably

569
00:47:08,630 --> 00:47:13,299
doing application whitelisting as well
so if you got like this is a golden

570
00:47:13,299 --> 00:47:19,549
master and we're controlling the
application said you could push out as

571
00:47:19,549 --> 00:47:23,549
TV files at this patch level this is
what the shit is supposed to look like

572
00:47:23,549 --> 00:47:28,719
now you have the whole thing and use
tripwire or something

573
00:47:28,719 --> 00:47:40,750
tripwire is to detect changes would that
not work

574
00:47:40,750 --> 00:47:51,920
I think that's a good solution to try it
out and make sure it works and that

575
00:47:51,920 --> 00:47:54,830
maybe that's just solves everything
maybe this last hour you should have

576
00:47:54,830 --> 00:47:56,839
been drinking

577
00:47:56,839 --> 00:48:01,880
but also I have a feeling that it's a
good solution and that immature company

578
00:48:01,880 --> 00:48:06,259
may be able to implement that but if
you're not able to implement that

579
00:48:06,259 --> 00:48:10,239
ensuring that all golden images are
precisely up to date on every single one

580
00:48:10,239 --> 00:48:15,009
of your computers father in law's PC
exactly then we need to start worrying

581
00:48:15,009 --> 00:48:21,589
about response and detection versus just
preparing for the compromise on things

582
00:48:21,589 --> 00:48:26,269
like that so I think that's a great
solution I also have a backup plan in

583
00:48:26,269 --> 00:48:31,729
case we're not quite thanks talk I'm
going to work my way to the back but let

584
00:48:31,729 --> 00:48:38,259
me start here

585
00:48:38,259 --> 00:48:45,700
other issues that affect settings GPA as
a liar and eggs

586
00:48:45,700 --> 00:48:55,970
emmitt medications etc I'm fairly sure
there are yes there are and also noted

587
00:48:55,970 --> 00:49:01,560
this is how i met is implemented right
so basically I met when you like enable

588
00:49:01,560 --> 00:49:05,940
the programs and that gooey it basically
adds shimon trees to inject the enmity

589
00:49:05,940 --> 00:49:10,530
lol into your programs that you want to
be protected and then that deal is able

590
00:49:10,530 --> 00:49:14,850
to patch up the protected program to
maybe check the stack and you know

591
00:49:14,850 --> 00:49:40,589
enabled after an accident these things
like that

592
00:49:40,590 --> 00:49:59,410
how different do something I use fuzzy
hashing to analyze differences and kind

593
00:49:59,410 --> 00:50:02,850
of get paid payloads even if the order
is different

594
00:50:02,850 --> 00:50:07,410
basically on the same track there is
that ultimately the chunks of the files

595
00:50:07,410 --> 00:50:11,240
are basically the same yet the ordering
maybe often there might be some small

596
00:50:11,240 --> 00:50:12,899
fields here and there that are different

597
00:50:12,900 --> 00:50:17,070
adding stuff like that I'm so your fuzzy
asking asking solution was kind of what

598
00:50:17,070 --> 00:50:20,510
I was talking like domain-specific
hashing earlier which is like I know the

599
00:50:20,510 --> 00:50:23,460
structure of this file I know that this
thing is something appropriate to be

600
00:50:23,460 --> 00:50:28,020
hashed sony has set and use that as part
of my signature for things that should

601
00:50:28,020 --> 00:50:43,540
be whitelisted blacklisted on the same
track there yes exactly

602
00:50:43,540 --> 00:50:50,870
the answer is yes there is a different
program would you say there are ten you

603
00:50:50,870 --> 00:50:55,870
can do like PE header hash version
information you can do with a binary

604
00:50:55,870 --> 00:51:01,180
path of the binary name of the binary
like you can do I think do certificate

605
00:51:01,180 --> 00:51:04,490
used to sign the binary you can use all
these different ways to specify things

606
00:51:04,490 --> 00:51:08,279
that you are seeing this is interesting
both in the defendant's respective easy

607
00:51:08,280 --> 00:51:12,110
way to operate all your programs at the
same time away from it

608
00:51:12,110 --> 00:51:14,980
attackers perspective as well because
you don't have to shame operate you

609
00:51:14,980 --> 00:51:22,680
could see him all the prizes at the same
time I haven't tried that would be

610
00:51:22,680 --> 00:51:24,910
pretty cool

611
00:51:24,910 --> 00:51:32,779
IC researcher us IRA employee can you
comment on what happened to 44 Condon

612
00:51:32,780 --> 00:51:39,190
conference I am not too familiar with it
decides what I something is wrong with

613
00:51:39,190 --> 00:51:51,690
you guys that's it is a big company and
so questions

614
00:51:51,690 --> 00:51:58,690
things that run before the user logs in
like sticky keys

615
00:51:58,690 --> 00:52:07,920
systems are also get called I don't now
I suspect they do in my reasoning is

616
00:52:07,920 --> 00:52:14,720
that the registry path that you used to
register the shams is in like the local

617
00:52:14,720 --> 00:52:20,160
machine hive therefore I think its
systemwide and the implementation of the

618
00:52:20,160 --> 00:52:24,980
shipping engine is in the windows loader
so it seems to me that those things

619
00:52:24,980 --> 00:52:33,900
should be simple but that's my educated
guess I don't know for sure thank you to

620
00:52:33,900 --> 00:52:39,099
the wild-card point what did you try
shaming the windows loader there's a few

621
00:52:39,099 --> 00:52:42,990
things that you can't sham I don't have
been totally enumerated there's also

622
00:52:42,990 --> 00:52:47,310
some protections on like weather like
there are few places you can share and I

623
00:52:47,310 --> 00:52:59,089
that's one of them was just be 30

624
00:52:59,089 --> 00:53:06,058
directly so John Erickson out of
eyesight has done a lot of offensive

625
00:53:06,059 --> 00:53:10,130
research basically taking the field also
developing new techniques as well

626
00:53:10,130 --> 00:53:12,880
to show how this can be used to cause
this is not a vulnerability in Windows

627
00:53:12,880 --> 00:53:17,380
you need administrative access to the
system it's almost like the desired

628
00:53:17,380 --> 00:53:23,710
state configuration talked earlier it's
not a vulnerability but it can be used

629
00:53:23,710 --> 00:53:29,410
maliciously and so as repressive
directly no I don't know I think easy

630
00:53:29,410 --> 00:53:34,269
thing I could do is maybe do signature
verification of the STB files may be

631
00:53:34,269 --> 00:53:38,729
quick win in order to find what should
be allowed to go tonight but I don't

632
00:53:38,729 --> 00:53:57,770
know for sure what he did was

633
00:53:57,770 --> 00:54:13,880
nature of this research questions no one
drink beer let's keep going you

634
00:54:13,880 --> 00:54:20,350
mentioned locations see windows and some
are under program files in their

635
00:54:20,350 --> 00:54:21,759
detection sort of way

636
00:54:21,760 --> 00:54:26,770
would it be a bad idea do you think to
just look for say put an exclusion for

637
00:54:26,770 --> 00:54:32,410
if you're looking for stuff under ignore
STDs in windows and understated Program

638
00:54:32,410 --> 00:54:38,359
Files x86 and have a closer look at
stuff elsewhere so you're looking for

639
00:54:38,360 --> 00:54:46,880
shipments within the program files as I
was just pointing that out more info

640
00:54:46,880 --> 00:54:50,380
like a quick win so like if you're
analyzing you know that there might be

641
00:54:50,380 --> 00:54:54,150
ships involved that you can actually say
like oh hey this is a new users

642
00:54:54,150 --> 00:55:00,380
directory it's normally not like
developer building that Shin are pushing

643
00:55:00,380 --> 00:55:07,400
a database oh so you would have to start
a deep diving into exactly what fixes

644
00:55:07,400 --> 00:55:12,630
are getting pushed what applications are
getting touched as they cather's with

645
00:55:12,630 --> 00:55:16,170
the event log you can actually see what
is getting what applications actually

646
00:55:16,170 --> 00:55:20,730
getting modified and then what six being
applied to it so if you're seeing

647
00:55:20,730 --> 00:55:24,160
something that is in this Program Files
directory

648
00:55:24,160 --> 00:55:30,040
like you know Visual Studio but hey it's
affecting demand that you see you know

649
00:55:30,040 --> 00:55:34,040
that might be an indicator that you
might want to check out what exactly is

650
00:55:34,040 --> 00:55:40,829
going on

651
00:55:40,829 --> 00:55:48,339
so when you when you're going through
in-kind hunting for this kind of stuff

652
00:55:48,339 --> 00:55:53,670
you've done it but some clients have you
found a lot of commodity malware that is

653
00:55:53,670 --> 00:55:58,910
it start to use as reference 11 or two
years but have you seen it just pop up

654
00:55:58,910 --> 00:56:07,149
in the in hunting phase or you know what
have you seen yet because we haven't

655
00:56:07,150 --> 00:56:12,089
worked at too many different different
clients and engagements yet we're still

656
00:56:12,089 --> 00:56:15,660
kind of expanding both our methodology
here making it seem must make it easy

657
00:56:15,660 --> 00:56:20,339
push-button to do and also expanding
into more finance what we do tend to

658
00:56:20,339 --> 00:56:23,009
finally see the stuff that we've talked
about here is there's both commodity

659
00:56:23,009 --> 00:56:28,359
that's using this and it's hard to tell
how many groups are using this technique

660
00:56:28,359 --> 00:56:36,098
obviously won the question is how much
code sharing is there two or three cause

661
00:56:36,099 --> 00:56:39,910
some hours slightly different it's hard
to really say but there are multiple

662
00:56:39,910 --> 00:56:45,769
people who are using this is James right
now as technique and in my limited

663
00:56:45,769 --> 00:56:52,589
experience as a computer security person
I expect us to grow in the future maybe

664
00:56:52,589 --> 00:56:56,288
I should recommend since I know there's
a lot of people here that anyone has

665
00:56:56,289 --> 00:57:00,989
questions meet us a prime afterwards and
there s you guys are welcome to come

666
00:57:00,989 --> 00:57:03,799
back next year as I think it's gonna be
another really good conference so thank

667
00:57:03,799 --> 00:57:03,849
you

