1
00:00:00,000 --> 00:00:05,629
im records in San I'm the chief security
architect retain him I have about 12

2
00:00:05,629 --> 00:00:10,040
years background in its response
forensics and penetration testing prior

3
00:00:10,040 --> 00:00:13,719
to my current role at 10 a.m. I was at
mandiant for about six years doing

4
00:00:13,719 --> 00:00:18,439
mostly I R work and also the
contributing author to insert a response

5
00:00:18,440 --> 00:00:23,250
in computer forensics the third edition
of which was released last year and I'm

6
00:00:23,250 --> 00:00:27,039
at he sings I have a very similar
experience Ryan's I'm not going to bore

7
00:00:27,039 --> 00:00:35,750
you with my details except that I'm not
a published author so agenda for today

8
00:00:35,750 --> 00:00:41,540
will do a quick background to cover what
DSC is and why we chose it as a topic of

9
00:00:41,540 --> 00:00:45,829
research will introduce the des
compromised framework and walk through a

10
00:00:45,829 --> 00:00:49,890
few different attack scenarios will do
some live well cause I live demo some

11
00:00:49,890 --> 00:00:53,710
videos showing it in action and then
we'll switch from kind of the red team

12
00:00:53,710 --> 00:00:57,340
angle to the blue team angle will go
from attack the defense and talk about

13
00:00:57,340 --> 00:01:01,520
the sources of evidence you get used to
detect what we're presenting today and

14
00:01:01,520 --> 00:01:06,720
then we'll wrap up with areas for future
research and work so quick show of hands

15
00:01:06,720 --> 00:01:09,548
how many of the people in this room and
don't be shy

16
00:01:09,549 --> 00:01:16,270
have ever heard of desired state
configuration before I was in the exact

17
00:01:16,270 --> 00:01:22,158
same boat so this is kind of an obscure
thing that only existed since like mid

18
00:01:22,159 --> 00:01:28,840
2014 so desire to configuration is
included with PowerShell for which is

19
00:01:28,840 --> 00:01:33,299
part of the Windows management framework
for dough installed by default on

20
00:01:33,299 --> 00:01:39,439
Windows 8 10 and server 2012 are too and
later its windows next generation

21
00:01:39,439 --> 00:01:44,329
configuration management platform so
it's instrumented via powershell the

22
00:01:44,329 --> 00:01:47,579
thing that it uses to actually manage
configurations and ingest them is a

23
00:01:47,579 --> 00:01:51,779
standard as the MOF managed object
format standard so the same thing

24
00:01:51,780 --> 00:01:57,369
windows WMI has been using for over a
decade but it also has some distinctions

25
00:01:57,369 --> 00:02:01,590
from things like SCCM Group Policy like
it doesn't require active directory to

26
00:02:01,590 --> 00:02:05,220
manager configure systems a lot of
people call it

27
00:02:05,220 --> 00:02:08,960
puppet or chef for Windows if you are in
the DevOps world you might be familiar

28
00:02:08,960 --> 00:02:13,960
with those they're not really equivalent
insofar as the IC really implements the

29
00:02:13,960 --> 00:02:18,120
configuration later but not so much the
front ends tooling and management layer

30
00:02:18,120 --> 00:02:23,100
meaning you know public in chiapas kind
of like a full stack solution DSC just

31
00:02:23,100 --> 00:02:26,780
as the Configuration button in fact
they're interoperable like microsoft has

32
00:02:26,780 --> 00:02:30,100
released an open source components that
the chef and publicize have used to

33
00:02:30,100 --> 00:02:34,420
build interoperability between them so
you can manage DSC with popular chef if

34
00:02:34,420 --> 00:02:41,070
you'd like but so so why do we care what
what India see do so the thing that got

35
00:02:41,070 --> 00:02:44,489
us interested when we stumbled on this
is is this list of capabilities right

36
00:02:44,490 --> 00:02:49,959
here so at its core at the issue means
enforcing a desired configuration stayed

37
00:02:49,959 --> 00:02:54,990
on a system over time and the way can do
that is by acting on the system in a

38
00:02:54,990 --> 00:02:58,020
number of different out of the box
capabilities so these are all the things

39
00:02:58,020 --> 00:03:03,360
that in a pure clean window system you
get with BSE so you can download and

40
00:03:03,360 --> 00:03:07,860
create files you can execute processes
in scripts you can create users and give

41
00:03:07,860 --> 00:03:12,080
them grants to certain groups you can
control services change registry keys

42
00:03:12,080 --> 00:03:17,310
install software this sounds a lot like
a command control framework that fully

43
00:03:17,310 --> 00:03:21,459
featured rat would also implement which
is fine I mean any administration tool

44
00:03:21,459 --> 00:03:25,600
is not terribly different from a good
back door right but this is interesting

45
00:03:25,600 --> 00:03:28,959
because it actually built into Windows
and so it got us thinking well how could

46
00:03:28,959 --> 00:03:34,170
we use this in the various ways so the
way this works and we're gonna go into

47
00:03:34,170 --> 00:03:38,850
more detail when we talk about the tools
we wrote to help facilitate this but the

48
00:03:38,850 --> 00:03:43,820
the higher-level workflow for DSC is
broken into three stages author stage

49
00:03:43,820 --> 00:03:48,230
and implement author is when you create
the configuration to do those things we

50
00:03:48,230 --> 00:03:52,850
outlined earlier you get a model which
is the thing that has the config and

51
00:03:52,850 --> 00:03:56,549
then you basically stage and somewhere
in there is two modes of operation in

52
00:03:56,549 --> 00:04:01,630
DSC there's poll Anders push push means
that you have the config file and you

53
00:04:01,630 --> 00:04:05,850
connect to a remote host via something
like windows remote management and you

54
00:04:05,850 --> 00:04:09,680
literally transfer the config over and
again suggested by the system

55
00:04:09,680 --> 00:04:15,150
pull is the exact opposite of that you
host the configuration on essentially a

56
00:04:15,150 --> 00:04:19,599
IIS web server and then the client
system that you want configured

57
00:04:19,599 --> 00:04:25,450
retrieves it via web protocol so HTTP or
HTTPS you can also stay tuned on a

58
00:04:25,450 --> 00:04:30,500
file-sharing SMB can be used to retrieve
it as well lead to later we actually

59
00:04:30,500 --> 00:04:35,160
chose Paul server via HTTP as our
mechanism because it's a lot like a real

60
00:04:35,160 --> 00:04:39,910
c2 server so we consume and implement
the configuration on the victim host and

61
00:04:39,910 --> 00:04:42,550
then we go into this cycle that we've
shown here

62
00:04:42,550 --> 00:04:47,729
of basically continuously my client
monitors its config for drift so this is

63
00:04:47,729 --> 00:04:52,840
called consistency and the system is
designed to automatically determine has

64
00:04:52,840 --> 00:04:56,780
its configuration drifted away from what
you were enforcing and if it does it

65
00:04:56,780 --> 00:05:01,219
auto corrects itself so it's like myself
fixing back door and that's kind of cool

66
00:05:01,220 --> 00:05:07,210
so just as clearly we're not presenting
your day vulnerabilities we're not

67
00:05:07,210 --> 00:05:10,919
really presenting any vulnerabilities at
all here we didn't find anything

68
00:05:10,919 --> 00:05:14,900
intrinsically wrong with the SEC has
designed or security holes in its

69
00:05:14,900 --> 00:05:21,280
implementation nor did we identify ways
to do like that so you have to be an

70
00:05:21,280 --> 00:05:25,260
administrator to interact with the stuff
on your victim host but what this is

71
00:05:25,260 --> 00:05:29,340
interesting as is a mechanism for the
post compromise phase of an incident

72
00:05:29,340 --> 00:05:33,609
right so you've compromised a target and
now you want to hide you want to persist

73
00:05:33,610 --> 00:05:36,960
malware keep it running keep a user
account there and you want to evade

74
00:05:36,960 --> 00:05:41,070
detection and so Windows has lots of
like autorun mechanisms and persistence

75
00:05:41,070 --> 00:05:45,250
techniques that have been used for over
a decade and this to me Fitz is one of

76
00:05:45,250 --> 00:05:46,200
these categories

77
00:05:46,200 --> 00:05:50,229
the other thing we wanted to do a
simplify the process by which you could

78
00:05:50,229 --> 00:05:55,169
use DSC for this purpose it was really
painful to figure this out and learn it

79
00:05:55,169 --> 00:05:58,430
partially because it's so new and so
there's not a lot of great documentation

80
00:05:58,430 --> 00:06:02,930
online but we wanted to make it as easy
as possible for a red team to just roll

81
00:06:02,930 --> 00:06:08,169
with this with like a cloud-hosted g2
server and a couple PowerShell scripts

82
00:06:08,169 --> 00:06:14,240
to run on your victims and then finally
for the matter I have basically

83
00:06:14,240 --> 00:06:18,650
investigated attacks and seen attackers
misuse persistence mechanism stir you

84
00:06:18,650 --> 00:06:22,729
know well over five years and it always
seems like we're a couple of years

85
00:06:22,729 --> 00:06:25,969
lagging from attackers like attackers
discover a cool persistence mechanism

86
00:06:25,970 --> 00:06:28,790
that use it for a while and then finally
the

87
00:06:28,790 --> 00:06:32,030
isaacson security community catch on to
it and build tools and techniques to

88
00:06:32,030 --> 00:06:36,619
find it neither is have ever seen this
used in the wild before so we thought it

89
00:06:36,620 --> 00:06:40,190
would be cool to outta persistence
mechanism show how you can leverage it

90
00:06:40,190 --> 00:06:43,940
but then also show how you could
detected perhaps before it is even being

91
00:06:43,940 --> 00:06:50,130
used by attackers in the real wild and
so yeah I think we both agreed when we

92
00:06:50,130 --> 00:06:53,620
were deciding to pursue this that DSC is
a really interesting persistence

93
00:06:53,620 --> 00:06:58,470
mechanism if nothing else what makes it
distinctive is it's really obscure it's

94
00:06:58,470 --> 00:07:02,580
very flexible in the ways you can
interact with the hosts none of the

95
00:07:02,580 --> 00:07:06,550
existing security tools like the auto
runs utility for example in New Murray

96
00:07:06,550 --> 00:07:12,730
DSC config and finally the automatic
reinfection capability is kind of unique

97
00:07:12,730 --> 00:07:16,320
right the fact that you can actually
have this set up to ring in fact the

98
00:07:16,320 --> 00:07:21,110
host if someone tries to clean it up and
misses some very easily missed ways that

99
00:07:21,110 --> 00:07:25,730
this mechanism works by so this is the
basis of why we went down this road for

100
00:07:25,730 --> 00:07:30,580
our research limitations as I alluded to
just a moment ago this is really

101
00:07:30,580 --> 00:07:34,340
difficult to use like this was mad and I
for about a month as we were putting

102
00:07:34,340 --> 00:07:39,200
this work together so troubleshooting
can be painful we tried to alleviate

103
00:07:39,200 --> 00:07:44,190
that with our scripts but you still may
hunt for some very obscure PowerShell

104
00:07:44,190 --> 00:07:47,210
error messages as you work with us

105
00:07:47,210 --> 00:07:51,789
it does require PowerShell for on both
the victim and the seat to server for

106
00:07:51,790 --> 00:07:55,140
the c2 server that's not a big deal like
all of our testing we just spun up a

107
00:07:55,140 --> 00:08:01,130
server to k-12 are 2 p.m. with Google
Cloud or as you're so very easy to get

108
00:08:01,130 --> 00:08:04,600
that ready on the client victim side
though your victims are gonna have to be

109
00:08:04,600 --> 00:08:08,190
running either that server OS or Windows
a one or later

110
00:08:08,190 --> 00:08:12,320
technically you can upgrade windows
management framework to version four or

111
00:08:12,320 --> 00:08:16,990
five but as an attacker that's a really
like cumbersome noisy thing to do so I

112
00:08:16,990 --> 00:08:21,110
didn't consider that in balance and then
again finally you do have to have local

113
00:08:21,110 --> 00:08:24,890
administrator equivalent rights on the
victim host to mess with any of this

114
00:08:24,890 --> 00:08:30,330
stuff so this fall squarely within the
realm of post compromise persistence and

115
00:08:30,330 --> 00:08:34,968
not privilege escalation or anything
like that right

116
00:08:34,969 --> 00:08:39,959
so as Ryan mentioned DSC is not
something that's very easy to implement

117
00:08:39,958 --> 00:08:43,039
we found that there's a ton of
roadblocks and it's not very well

118
00:08:43,039 --> 00:08:46,379
documented so one of the things we want
to do is eliminate as many other

119
00:08:46,379 --> 00:08:50,680
roadblocks as possible and then
streamline the process for weapons using

120
00:08:50,680 --> 00:08:55,300
DSC til along with our research are also
releasing that what we're calling the

121
00:08:55,300 --> 00:08:59,399
des compromise framework and what this
framework is it's a set of PowerShell

122
00:08:59,399 --> 00:09:04,420
scripts that allow you to set up a DSC
we're going to see to server build out

123
00:09:04,420 --> 00:09:09,079
different militias palos and infect
victims so far too late it's four

124
00:09:09,079 --> 00:09:12,019
different components all different
PowerShell scripts which will go into

125
00:09:12,019 --> 00:09:15,819
detail on it publicly available on
github if anybody wants to check it out

126
00:09:15,819 --> 00:09:21,069
one of the first design decisions that
we had to make was the the push vs

127
00:09:21,069 --> 00:09:25,910
DePaul decision so do we want our our
victim hosts have to go out and pull

128
00:09:25,910 --> 00:09:29,209
configs or do we want to rely on Oct
server to have the ability to push down

129
00:09:29,209 --> 00:09:33,709
can fix it is pretty evident that we
want to go with the poll mechanism for

130
00:09:33,709 --> 00:09:38,138
the first part of it emulates a true CT
server it also doesn't require a route

131
00:09:38,139 --> 00:09:42,410
to the internal hosts of you think about
if you have an Amazon ec2 instance you

132
00:09:42,410 --> 00:09:45,879
have to have an in route to an internal
hosts to push you can pick and that

133
00:09:45,879 --> 00:09:52,939
rarely happens the clients will reach
out over HTTP or HTTPS and poster URI

134
00:09:52,939 --> 00:09:59,309
and then attempt to pull down a config
on a defined interval again this can be

135
00:09:59,309 --> 00:10:03,079
on the internal network but since it has
a lot of requirements and standing up

136
00:10:03,079 --> 00:10:07,109
the server it's typically better if you
roll your own and not try and in fact an

137
00:10:07,110 --> 00:10:11,920
internal server and then try to put all
the DSC components part of it so how

138
00:10:11,920 --> 00:10:16,550
this process worst is the first part is
you actually configure your server and

139
00:10:16,550 --> 00:10:19,420
we have a script for that which will
walk to an example of you create your

140
00:10:19,420 --> 00:10:22,759
malicious payload we have two different
types they were supporting at this point

141
00:10:22,759 --> 00:10:26,620
and then finally you configure victims
then go out and pull these

142
00:10:26,620 --> 00:10:31,350
configurations down and you can create
as many as you want but the clients can

143
00:10:31,350 --> 00:10:36,779
only pull down and force a single
configure a time when I first attack

144
00:10:36,779 --> 00:10:41,420
scenario we want to persist malware we
want infected machine with back to an

145
00:10:41,420 --> 00:10:42,170
hour

146
00:10:42,170 --> 00:10:46,219
ensure that this matter remains on disk
and that's really not exciting like

147
00:10:46,220 --> 00:10:50,720
that's pretty standard stuff but finally
we want to read in fact our victim is

148
00:10:50,720 --> 00:10:54,500
it's automatically if it's been
remediated and this reinfection occurs

149
00:10:54,500 --> 00:10:57,950
if the system is online or not so if you
take the system offline in and

150
00:10:57,950 --> 00:11:01,910
remediated and not remediate if properly
it will happen here infected cells

151
00:11:01,910 --> 00:11:07,149
without even realizing it so we should
have a quick non live demo that we want

152
00:11:07,149 --> 00:11:14,120
to show you guys and I'll walk through
it as we're going on the right is RCT

153
00:11:14,120 --> 00:11:17,930
server and on the left is a victim of
the first thing we're doing here is

154
00:11:17,930 --> 00:11:22,349
we're creating a malicious payload we're
giving it the file that we want to exist

155
00:11:22,350 --> 00:11:28,579
and the path we want it to be located on
a victim and then any arguments you want

156
00:11:28,579 --> 00:11:32,849
the process to run that so we're going
to use that cat is pretty easy and we

157
00:11:32,850 --> 00:11:37,949
just want to type a command shell out to
RCT server ok it now creates this unique

158
00:11:37,949 --> 00:11:42,290
and you need to say that cuz that's what
the convict the victim will actually use

159
00:11:42,290 --> 00:11:48,010
today go out and download this payload

160
00:11:48,010 --> 00:11:53,939
victim machine like Ryan mentioned were
already Ministry of user now loaded in

161
00:11:53,940 --> 00:12:00,140
our house our model the files in there
which is what we're seeing you here and

162
00:12:00,140 --> 00:12:08,089
the task isn't running configure victim
just give it the server IP address and

163
00:12:08,089 --> 00:12:15,079
the go-ahead the payload that we wanted
to run now going to see a bunch of

164
00:12:15,079 --> 00:12:19,819
messages that don't mean much

165
00:12:19,820 --> 00:12:26,850
ok and within a few seconds are now we
have a commune she'll come down from

166
00:12:26,850 --> 00:12:31,070
victim on the server we had an
accomplice near hanging out here and it

167
00:12:31,070 --> 00:12:36,330
happens instantaneously so the
connection initiates because the victim

168
00:12:36,330 --> 00:12:41,530
host so now we're gonna show you is
mediation attempt where we actually go

169
00:12:41,530 --> 00:12:42,209
in

170
00:12:42,210 --> 00:12:48,260
delete the file and then kill the
process and one thing to note is the

171
00:12:48,260 --> 00:12:53,110
consistency checker which is the process
in this case it's a scheduled task it

172
00:12:53,110 --> 00:12:56,340
runs in a predefined basis and what it
does is it basically says have I

173
00:12:56,340 --> 00:13:00,350
deviated from my config and if so do I
need to reset my cells and so we're

174
00:13:00,350 --> 00:13:05,140
going years as manually rerunning this
consistency checker and so we're just

175
00:13:05,140 --> 00:13:10,810
forcing it to run and now as you can see
we start back up our next Alasdair and

176
00:13:10,810 --> 00:13:17,439
are infected machine is continually
create that reversal again and then

177
00:13:17,440 --> 00:13:22,590
recreated and our process is now back up
and running just a quick demo of how you

178
00:13:22,590 --> 00:13:34,280
can ensure a file is both present on a
victim and running so what are we

179
00:13:34,280 --> 00:13:37,760
actually do now let's walk through the
steps in a bit more detail and what you

180
00:13:37,760 --> 00:13:41,189
actually need to perform in order to get
this to work for the very first thing is

181
00:13:41,190 --> 00:13:46,430
configured ESC Paul server and what that
requires forces did the DSC service

182
00:13:46,430 --> 00:13:51,020
which you can just add with a simple
PowerShell command and what this does is

183
00:13:51,020 --> 00:13:55,939
it installs all the prereqs the DSE
requires if the DSC service and then

184
00:13:55,940 --> 00:13:59,260
what you need to do is install the
required PowerShell modules is actually

185
00:13:59,260 --> 00:14:02,900
comes in his hip use unzip it to the
location that you want in these models

186
00:14:02,900 --> 00:14:08,569
are always available available to you in
power show and then finally you run our

187
00:14:08,570 --> 00:14:12,540
configure server script which is part of
the des compromise framework and your

188
00:14:12,540 --> 00:14:17,610
servers ready to go what the server
script actually does it initializes the

189
00:14:17,610 --> 00:14:21,530
DSC server with some optional parameters
so the two parameters that we support

190
00:14:21,530 --> 00:14:26,199
the compliance pour in the config port
the compliance port is the port that the

191
00:14:26,200 --> 00:14:30,480
server runs that listens for victims to
check in to report how they are

192
00:14:30,480 --> 00:14:32,130
compliant with the various config

193
00:14:32,130 --> 00:14:35,510
and the config port which is important
because this is the point that the

194
00:14:35,510 --> 00:14:39,970
client / reach out to so they have to be
able to connect outbound and this is

195
00:14:39,970 --> 00:14:43,320
where they can figure being hosted by
your server and they both have default

196
00:14:43,320 --> 00:14:48,200
values so now that we've got our config
server setup the next thing we need to

197
00:14:48,200 --> 00:14:52,800
do is create are malicious payload the
first thing you need to do is copy a

198
00:14:52,800 --> 00:14:57,979
local file on the local executable file
to R&D sec to server so this is the file

199
00:14:57,980 --> 00:15:01,410
that we want to persist on AIM points we
need a first put it on the server and

200
00:15:01,410 --> 00:15:05,550
the reason we do that is because we
actually don't we don't copy the file

201
00:15:05,550 --> 00:15:10,160
down from the config we read and it in
as a byte array into the PowerShell

202
00:15:10,160 --> 00:15:13,630
configuration that then gets passed down
so the victim machine is actually

203
00:15:13,630 --> 00:15:17,720
pulling down the file and has it locally
stored in a buyer a within the one of

204
00:15:17,720 --> 00:15:23,110
the files that Ryan will talk about
later then when our our pilot script and

205
00:15:23,110 --> 00:15:27,020
then we put a basic creates them off
I'll that we need puts it in the right

206
00:15:27,020 --> 00:15:32,480
location and gives its unique do it we
need to configure are victims so this is

207
00:15:32,480 --> 00:15:36,260
what the payload script looks like again
this is the source file evil dottie

208
00:15:36,260 --> 00:15:39,020
exceed thats local to our poll server

209
00:15:39,020 --> 00:15:42,810
destination path that's where we wanted
to exist on all the victims and any

210
00:15:42,810 --> 00:15:48,329
arguments we wanted to pass and again
the output of this we put it in the

211
00:15:48,330 --> 00:15:51,250
correct location for you see all the
worry about it but if you ever need to

212
00:15:51,250 --> 00:15:55,160
have you ever care this is where they
need to be and we also generate the

213
00:15:55,160 --> 00:15:58,329
output mosque and there's a checksum
filed in you to be created that we also

214
00:15:58,330 --> 00:16:02,910
just create forty oh yeah this is part
of what we did all that automation like

215
00:16:02,910 --> 00:16:07,230
everything has to be exactly so the
checksum file has to be named the same

216
00:16:07,230 --> 00:16:11,530
as 2008 filed after being the same
directory in that path DSC server has

217
00:16:11,530 --> 00:16:15,209
been configured to host it all up if any
of those failed and the whole thing so

218
00:16:15,210 --> 00:16:19,120
the script does this all for you just to
reduce likelihood of error at each of

219
00:16:19,120 --> 00:16:21,630
those steps it's incredibly brutal

220
00:16:21,630 --> 00:16:25,750
super parental rights in the next thing
you want to do is actually in fact one

221
00:16:25,750 --> 00:16:29,850
of our victim machines and so we need to
log into the victim copy down are

222
00:16:29,850 --> 00:16:33,450
configured victims scripts and running
just like you saw the first thing that

223
00:16:33,450 --> 00:16:36,480
the victims group does is actually
ensures that when are in service is

224
00:16:36,480 --> 00:16:40,080
running because its action required for
this to work if it's not running it goes

225
00:16:40,080 --> 00:16:44,010
ahead and start setup so that could be a
telltale sign in

226
00:16:44,010 --> 00:16:48,450
you see when I am running and you don't
expect it then takes the GUI and the

227
00:16:48,450 --> 00:16:53,250
server address as parameters and then it
configures the local Configuration

228
00:16:53,250 --> 00:16:59,890
Manager LCM to use their mobile server
after that the victim automatically

229
00:16:59,890 --> 00:17:04,889
downloads implies the configuration the
configuration off drops in embedded

230
00:17:04,890 --> 00:17:09,880
power and disk and execute its now we
have a back door sorry attacker can now

231
00:17:09,880 --> 00:17:14,949
proceed to interact with it again this
is pretty simple

232
00:17:14,949 --> 00:17:19,680
configure victims ripped one differences
it has to drop a file on disk

233
00:17:19,680 --> 00:17:23,740
temporarily in order to initiate the
configurations for whatever reason you

234
00:17:23,740 --> 00:17:28,540
can't just pass an object in PowerShell
it has to be written to do so we write

235
00:17:28,540 --> 00:17:31,200
it to the correct location and then
delete it but you have an optional

236
00:17:31,200 --> 00:17:36,300
parameter to put it where you want and
then we're going to leave it for you

237
00:17:36,300 --> 00:17:40,010
the LCM is pretty interesting because
this is where you can define specific

238
00:17:40,010 --> 00:17:44,290
parameters that are required to do
different things so allow module over

239
00:17:44,290 --> 00:17:48,570
eight this is what allows you to update
instead on the fly and then push a new

240
00:17:48,570 --> 00:17:52,110
configuration down so if you want to
take the same do it and overwrite it was

241
00:17:52,110 --> 00:17:53,139
something new

242
00:17:53,140 --> 00:17:56,320
the victim machine if this is set to
true will automatically download the

243
00:17:56,320 --> 00:17:59,240
same do it but apply the new
configuration which is really nice for

244
00:17:59,240 --> 00:18:02,830
light dynamic updating as well as
dissolving configurations will talk

245
00:18:02,830 --> 00:18:08,230
about later the configuration mode
frequency is how often it's gonna try

246
00:18:08,230 --> 00:18:13,690
and reset itself back to its know it to
its config state so every in this case

247
00:18:13,690 --> 00:18:17,530
15 minutes it's gonna say in my complete
my comply with my configuration at the

248
00:18:17,530 --> 00:18:18,620
answer is No

249
00:18:18,620 --> 00:18:22,479
do I need to reset myself and there's
actually an undocumented minimum here

250
00:18:22,480 --> 00:18:27,270
which is 15 minutes the Apply and auto
correct setting with the configuration

251
00:18:27,270 --> 00:18:30,280
mode is what tells it to actually
enforce the config rather than walking

252
00:18:30,280 --> 00:18:33,920
so you can say if I'm not compliant just
log into a file and then I'll check it

253
00:18:33,920 --> 00:18:37,110
later and send it to the event logs and
do whatever you want but this actually

254
00:18:37,110 --> 00:18:42,129
enforces it back to the known state the
refresh frequency is how often it's

255
00:18:42,130 --> 00:18:45,580
gonna pull from the pole server and in
the refresh mode is telling us that

256
00:18:45,580 --> 00:18:49,300
we're going to deploy forces have pushed
configuration but one thing to keep in

257
00:18:49,300 --> 00:18:51,180
mind is because of this design

258
00:18:51,180 --> 00:18:55,880
in this mode it will execute your
payload every 15 minutes so if you have

259
00:18:55,880 --> 00:18:59,210
like a dropper you'd probably when
you're writing your own malware you want

260
00:18:59,210 --> 00:19:01,780
to ensure that you had some logic check
in there so they don't just continuously

261
00:19:01,780 --> 00:19:04,050
try to re-enact the system over and over

262
00:19:04,050 --> 00:19:08,100
it also could be any command right like
we're showing you dropping enact running

263
00:19:08,100 --> 00:19:11,100
an exercise but you could just gonna
PowerShell command with an encoded

264
00:19:11,100 --> 00:19:15,740
argument like David showed earlier today
as keynote so lots of flexibility there

265
00:19:15,740 --> 00:19:21,570
yet so now in our step 3 we now have a
victim that's the evening out to our

266
00:19:21,570 --> 00:19:24,960
Packer attackers interacting it through
reverse shell so let's say we get

267
00:19:24,960 --> 00:19:30,460
detected so now we have no clue team
Taylor who runs on the scene because

268
00:19:30,460 --> 00:19:33,390
she's received a network alert of some
come enjoy being piped across the

269
00:19:33,390 --> 00:19:34,170
network

270
00:19:34,170 --> 00:19:38,710
she doesn't investigation she finds
analysis process she finds a file she

271
00:19:38,710 --> 00:19:42,540
deletes both of them she runs on her
arms can't find a persistence mechanism

272
00:19:42,540 --> 00:19:47,629
so she's like I'm good I did a good job
and she just goes around you know doing

273
00:19:47,630 --> 00:19:52,460
her thing which he doesn't realize that
the consistency checker is gonna run

274
00:19:52,460 --> 00:19:55,880
within 15 minutes we're doing that and
then reapply that configurations that's

275
00:19:55,880 --> 00:19:59,710
going to recreate the file from the
bitrate we have stored them off and is

276
00:19:59,710 --> 00:20:03,440
gonna restart the process because he's
not gonna find it running one thing that

277
00:20:03,440 --> 00:20:06,320
we found out that caused us a lot of
pain we thought we were going to

278
00:20:06,320 --> 00:20:09,280
describe this whole things you couldn't
get it to work is that if you're on a

279
00:20:09,280 --> 00:20:10,440
laptop

280
00:20:10,440 --> 00:20:15,660
consistency task is set that if it's not
on it is on battery power it won't work

281
00:20:15,660 --> 00:20:19,820
it won't run the consistency task unless
it's plugged into a hard power yeah

282
00:20:19,820 --> 00:20:22,889
there's there's a funding in with the
Scheduled Tasks conditions in this is

283
00:20:22,890 --> 00:20:26,490
across the board for all tasks are you
can define whether I liked asking runs

284
00:20:26,490 --> 00:20:30,670
when you're not unplugged in power which
I guess is smartly 2012 burned battery

285
00:20:30,670 --> 00:20:33,670
drain you an update or something that
you may not want to do all the systems

286
00:20:33,670 --> 00:20:39,960
remote it should tell you it's not going
to be ok so now our our internal victim

287
00:20:39,960 --> 00:20:43,000
has reinvented itself

288
00:20:43,000 --> 00:20:46,570
when it runs the consistency check and
the attackers back to reenacting with

289
00:20:46,570 --> 00:20:51,350
the back door but at this point you know
this this Mallard Ben Bernanke has been

290
00:20:51,350 --> 00:20:54,419
detected by the blue team so the
attacker prolly not gonna want to

291
00:20:54,420 --> 00:20:58,630
continue to use it because InfoSec
Taylor so it's going to just come back

292
00:20:58,630 --> 00:21:03,750
and delete them our again and have to
investigate investigate the system says

293
00:21:03,750 --> 00:21:07,600
the attacker one of the things you want
to do is update the configuration on the

294
00:21:07,600 --> 00:21:11,199
Bulls server so what you can do is
actually update them aware that you want

295
00:21:11,200 --> 00:21:16,210
to use as your payload but keep the same
do it and just replace that good and

296
00:21:16,210 --> 00:21:20,400
what this allows you to do is then the
next time that the victims system checks

297
00:21:20,400 --> 00:21:24,180
in its gonna update the same doing the
same configuration just download new

298
00:21:24,180 --> 00:21:29,390
Mallory and executed and then continued
go undetected until something something

299
00:21:29,390 --> 00:21:38,580
gets elected and then you and our second
scenario the second scenario we were so

300
00:21:38,580 --> 00:21:43,949
excited about this job I was very we
just want to create versus an

301
00:21:43,950 --> 00:21:46,830
unauthorized accounts we don't care
about back to an hour we don't care

302
00:21:46,830 --> 00:21:50,270
about a running process but we do want
to have a local admin on the system and

303
00:21:50,270 --> 00:21:55,010
have it persist even if somebody deletes
it removes it from from a group and you

304
00:21:55,010 --> 00:21:58,670
can absolutely do that with the SEC so
here we have another quick video that

305
00:21:58,670 --> 00:22:01,650
will walk you through how we're doing it
and it will just do it quick step there

306
00:22:01,650 --> 00:22:03,330
again

307
00:22:03,330 --> 00:22:09,270
server victim serve on the right to
molest again we don't see the members of

308
00:22:09,270 --> 00:22:13,270
the local groups are so the local
Administrators group here and you see

309
00:22:13,270 --> 00:22:17,960
that the local users on this post so
systems clean right now only three

310
00:22:17,960 --> 00:22:26,560
accounts this again is on our pool
server and configure user here now one

311
00:22:26,560 --> 00:22:31,070
thing to know that users the user
password is stored in clear text you

312
00:22:31,070 --> 00:22:37,580
don't use your legitimate password for
this show same thing as the other a

313
00:22:37,580 --> 00:22:40,360
little like you get him off while he get
the good word for it and then you can

314
00:22:40,360 --> 00:22:49,799
figure the victim to ingest that same
exact concept

315
00:22:49,799 --> 00:22:56,179
the server address in this case a little
bit longer for whatever reason than the

316
00:22:56,179 --> 00:22:59,480
file rights so this hangs like two or
three seconds

317
00:22:59,480 --> 00:23:03,919
don't worry it's going to end up working
eventually crash and burn you know it

318
00:23:03,919 --> 00:23:05,499
could go either way

319
00:23:05,499 --> 00:23:09,940
rights in this area did not err I'll now
we can do is we can look at the user's

320
00:23:09,940 --> 00:23:15,409
again we now see our evil users been
created and then we look at the evil

321
00:23:15,409 --> 00:23:22,179
users group memberships in turn off
their part of local admins are gonna do

322
00:23:22,179 --> 00:23:26,429
the same task of remediating the system
so we're just gonna delete user and then

323
00:23:26,429 --> 00:23:30,330
force another consistency check and sure
enough that this is going to be a big

324
00:23:30,330 --> 00:23:35,699
spoiler users going to get recreate it
automatically yet again just to be clear

325
00:23:35,700 --> 00:23:40,350
we're just not waiting 15 minutes in the
interest of the demo so running the task

326
00:23:40,350 --> 00:23:48,539
manually is the same waiting 15 minutes
back on the system and we did confirm

327
00:23:48,539 --> 00:23:52,158
like it validates with the user
existence and the group membership so if

328
00:23:52,159 --> 00:24:02,379
you demoted the user but kept it on the
box and put it back in the groove and

329
00:24:02,379 --> 00:24:05,600
then just a quick definition of what the
script is doing you give it to the

330
00:24:05,600 --> 00:24:09,259
username you get the password you wanted
to use again this password is stored in

331
00:24:09,259 --> 00:24:14,100
a POS credential object in the mosque
but it's a clear text format we did that

332
00:24:14,100 --> 00:24:17,908
so you don't the passenger gets back and
forth cuz thats gets really messy and

333
00:24:17,909 --> 00:24:20,739
then you can give an optional group
where you can say any local group I

334
00:24:20,739 --> 00:24:23,129
wanted to be a member of but default
it's going to use it

335
00:24:23,129 --> 00:24:26,639
administrators from the output you get
the exact same thing as you would when

336
00:24:26,639 --> 00:24:30,199
you did the payload where interest them
off the checks and it puts them in the

337
00:24:30,200 --> 00:24:37,869
correct location for you right so
switching to the fence motor incident

338
00:24:37,869 --> 00:24:41,629
response mode let's talk a little bit
how to how to find evidence of DSC use

339
00:24:41,629 --> 00:24:46,199
and abuse and I think there there's two
fortunate things here one is that DSC is

340
00:24:46,200 --> 00:24:50,359
so infrequently used legitimately just
taking the sampling of this audience as

341
00:24:50,359 --> 00:24:54,418
an example of that the presence of it or
the use of it anywhere in an environment

342
00:24:54,419 --> 00:24:58,549
might be intrinsically interesting also
even the most covert resistance

343
00:24:58,549 --> 00:25:01,859
mechanisms are only so good as the
source of evidence in your knowledge to

344
00:25:01,859 --> 00:25:02,860
look for them so

345
00:25:02,860 --> 00:25:06,629
it actually as a school is this is a
persistence mechanism it's pretty easy

346
00:25:06,630 --> 00:25:09,990
to find if you know where to look and so
that's what we're gonna try to cover

347
00:25:09,990 --> 00:25:15,370
here so first on the network side if
you've got a web proxy or if you're

348
00:25:15,370 --> 00:25:18,469
doing any form of network monitoring
that gives you the ability to inspect

349
00:25:18,470 --> 00:25:22,830
your eyes that are aggressing your
network you probably shouldn't see

350
00:25:22,830 --> 00:25:28,850
requests for resources named PSDs he
pull server . SVC this is the URI scheme

351
00:25:28,850 --> 00:25:32,850
for retrieving the configs implode you
can see in the example here we have a

352
00:25:32,850 --> 00:25:36,530
good specified so this is what the
requests look like this is what a

353
00:25:36,530 --> 00:25:40,240
so-called infected host is going to be
issuing every 30 minutes as it tries to

354
00:25:40,240 --> 00:25:45,190
refresh its config so less in the very
rare circumstances you are legitimate

355
00:25:45,190 --> 00:25:52,160
Lee using an external DSC server you
probably shouldn't see this on the end

356
00:25:52,160 --> 00:25:56,730
point that the configured and point on
disk the config files all live in a

357
00:25:56,730 --> 00:26:01,520
directory on the system32 called
configuration and there all my files you

358
00:26:01,520 --> 00:26:05,400
get one called back up and one cult
current so like they sound current is

359
00:26:05,400 --> 00:26:10,419
the current active configuration backup
is exactly that it's a backup is that

360
00:26:10,419 --> 00:26:14,919
encase current gets corrupt and then you
are you might see one called pending

361
00:26:14,919 --> 00:26:19,010
that usually goes away once I configure
supplied and then there's one called

362
00:26:19,010 --> 00:26:19,990
medical Fig

363
00:26:19,990 --> 00:26:22,929
which actually contains the
configuration about what Paul server to

364
00:26:22,929 --> 00:26:27,500
go to and what the refresh interval is
and all that stuff finally there's a

365
00:26:27,500 --> 00:26:32,790
file here called pull Run Log it's as
plain text file and adjust contains a

366
00:26:32,790 --> 00:26:36,889
single row every time Apple occurs in
terms of evidence is actually not the

367
00:26:36,890 --> 00:26:40,549
best log so I covered it here for
thoroughness but we have better locks

368
00:26:40,549 --> 00:26:44,850
that will show you in the eventing
system if you look inside the medic in

369
00:26:44,850 --> 00:26:49,668
Fig not mom on any system you'll find
the URI to the poll server so we can see

370
00:26:49,669 --> 00:26:54,710
the full IP address and location of that
resource so I should step back and say

371
00:26:54,710 --> 00:26:58,440
first that those files won't even exist
if the system isn't configured with the

372
00:26:58,440 --> 00:27:02,059
SEC in other words none of these files
will be present in the configuration

373
00:27:02,059 --> 00:27:05,970
directory unless someone's tried to use
the so even the presence of these files

374
00:27:05,970 --> 00:27:09,590
can be indicative that something's
happened and then looking inside this

375
00:27:09,590 --> 00:27:13,780
file can tells you what the server is
that's providing the configurations you

376
00:27:13,780 --> 00:27:15,700
also get the active configure I D

377
00:27:15,700 --> 00:27:22,399
in the same file so what happens on the
filesystem during infection used

378
00:27:22,399 --> 00:27:28,739
basically we use the config victim to
pull down the payload that ran the neck

379
00:27:28,740 --> 00:27:34,179
at 64 binary is our first example and
monitored file system activity to just

380
00:27:34,179 --> 00:27:37,919
look at what changed while this was
occurring just to see all the files that

381
00:27:37,919 --> 00:27:41,200
were being written and touched and so on
so if you have a capability to monitor

382
00:27:41,200 --> 00:27:45,289
changes to files in motion in central
alot that you could see this sort of

383
00:27:45,289 --> 00:27:50,429
stuff so really to summarize quickly a
temporary file is mad alluded to we drop

384
00:27:50,429 --> 00:27:54,690
on disc called pull config Demoff is the
first thing that gets dropped and

385
00:27:54,690 --> 00:27:58,010
basically that contains the
configuration for how the victim is

386
00:27:58,010 --> 00:28:01,990
going to use the full server the next
thing that happens is that basically get

387
00:28:01,990 --> 00:28:07,090
serialize to the medic in Fig . moths
which is it's like permanent home the

388
00:28:07,090 --> 00:28:11,350
first time you can figure DSC scheduled
tasks are created for the consistency

389
00:28:11,350 --> 00:28:16,418
check and for restart boot check so it
actually does checks at both times both

390
00:28:16,419 --> 00:28:20,929
at the polling interval and then on
reboot and those tasks are again they're

391
00:28:20,929 --> 00:28:25,380
created they have desired state
configuration in their path so if those

392
00:28:25,380 --> 00:28:28,779
get created on a system that means
someone was using it and then finally

393
00:28:28,779 --> 00:28:33,289
there's event log that actually captures
all this activity the DSC operational

394
00:28:33,289 --> 00:28:36,809
event log so if you've got a sim and you
want to start monitoring the log to look

395
00:28:36,809 --> 00:28:39,649
for the use of the store near
environment as will show you in a moment

396
00:28:39,649 --> 00:28:44,449
that event log contains lots of good
stuff and then finally the rest of it is

397
00:28:44,450 --> 00:28:48,350
mostly just my files getting moved
around so you have a temp directory that

398
00:28:48,350 --> 00:28:52,649
Windows generates for a temporary
holding place for the configuration

399
00:28:52,649 --> 00:28:55,649
itself the payload so that's called
localhost

400
00:28:55,649 --> 00:29:00,928
it's in the sub-directory under windows
temp and then a random number we see the

401
00:29:00,929 --> 00:29:06,409
malware files get dropped here the local
host at martha's copied over to back up

402
00:29:06,409 --> 00:29:10,600
in current dollar off and then the
system deletes the temporary files the

403
00:29:10,600 --> 00:29:15,389
poll run LA gets updated and then the
configure script that we added the leads

404
00:29:15,389 --> 00:29:19,229
its own set up my life and now you're
done so basically even though it leaves

405
00:29:19,230 --> 00:29:22,639
evidence on desk if you weren't
monitoring changes it's it's fairly

406
00:29:22,639 --> 00:29:25,860
covert I think

407
00:29:25,860 --> 00:29:29,889
the event logs are a good source because
they provide very explicit evidence that

408
00:29:29,890 --> 00:29:34,540
someone is trying to set up a pool
configuration or push configuration on a

409
00:29:34,540 --> 00:29:38,820
system and so in this case when we run
our configure victim script there's a

410
00:29:38,820 --> 00:29:42,350
whole series of events and you can look
at the slides off line and see the ideas

411
00:29:42,350 --> 00:29:47,799
but it basically says this user said is
trying to send a configuration from this

412
00:29:47,799 --> 00:29:51,809
computer so might be local or if you're
using PowerShell remoting it could be

413
00:29:51,809 --> 00:29:56,100
over the network and then we have the
events basically saying hey I'm going to

414
00:29:56,100 --> 00:30:00,549
this IP address of the server URL and
pulling down this configuration do it

415
00:30:00,549 --> 00:30:03,910
it's probably a little small on-screen
but that's really all these events say

416
00:30:03,910 --> 00:30:08,350
so just like looking in the moscow you
get your ID to the polls server and you

417
00:30:08,350 --> 00:30:11,870
get to the configuration I D so if you
are monitoring these events and you want

418
00:30:11,870 --> 00:30:16,830
to look for like rogue server addresses
or URLs in these event IDs that would be

419
00:30:16,830 --> 00:30:22,330
another way to find the sinews more of
the same in the slide and then finally

420
00:30:22,330 --> 00:30:28,000
the Task Scheduler registers the task
the DSC consistency task during for

421
00:30:28,000 --> 00:30:32,590
setup and then when the task when you
update the configuration or change

422
00:30:32,590 --> 00:30:36,709
anything that task likewise gets updated
and so you can see these events are

423
00:30:36,710 --> 00:30:40,510
captured in the task Adria login again
might be a good thing to monitoring your

424
00:30:40,510 --> 00:30:46,840
sim if you're looking for this and then
finally you can use PowerShell itself on

425
00:30:46,840 --> 00:30:50,928
a victim and point to enumerate the
stuff so there's a command let called to

426
00:30:50,929 --> 00:30:55,110
get DSC configuration that just like it
sounds returns the current configuration

427
00:30:55,110 --> 00:31:00,979
so in the case of the Configure victim
for malware payload we actually can see

428
00:31:00,980 --> 00:31:05,010
here the byte array that Matt was
talking about creating and this byte

429
00:31:05,010 --> 00:31:09,129
arrays what contains the malware before
it gets he realized the desk so this

430
00:31:09,130 --> 00:31:13,470
obviously looks incredibly anomalous on
a system and most host if you don't have

431
00:31:13,470 --> 00:31:20,250
anything configured this command would
return blank more of the same here so

432
00:31:20,250 --> 00:31:25,059
just additional chunks of our scripts
that are embedded in the configuration

433
00:31:25,059 --> 00:31:30,540
so you can see the start process with
the command line and all that good stuff

434
00:31:30,540 --> 00:31:36,490
for user config so if the payload was to
persist a user rather than to run

435
00:31:36,490 --> 00:31:38,900
malware the output of this looks a
little different

436
00:31:38,900 --> 00:31:43,380
it actually looks just like like a net
user output almost you see the user name

437
00:31:43,380 --> 00:31:47,800
that you are configuring the group name
that you're persisting it under and then

438
00:31:47,800 --> 00:31:51,680
the settings for like password policy
and all that so this is how you to

439
00:31:51,680 --> 00:31:54,890
identify that someone persisted a
configuration to keep a user account

440
00:31:54,890 --> 00:32:00,460
with a specific password on the host and
then finally instead of going to the

441
00:32:00,460 --> 00:32:04,540
mosque files again you can use
PowerShell to enumerate the local

442
00:32:04,540 --> 00:32:08,220
configuration manager and this would be
if you wanted to identify if a system is

443
00:32:08,220 --> 00:32:13,970
configured in pole motor Push Mode and
what the last config idea retrieved was

444
00:32:13,970 --> 00:32:17,870
so again if this ever produces output
like this you know someone to configure

445
00:32:17,870 --> 00:32:21,800
the system to use the SEC and you could
proceed to look at them off I'll to get

446
00:32:21,800 --> 00:32:26,300
the address of the server that's one
unfortunate thing we didn't find any

447
00:32:26,300 --> 00:32:30,800
method other than looking inside the
mall file to enumerate the address of a

448
00:32:30,800 --> 00:32:34,620
poll server when the system is
configured in full mode like this does

449
00:32:34,620 --> 00:32:41,260
not output that it only gives you the
GUI configuration settings and then

450
00:32:41,260 --> 00:32:45,470
finally clean up so if in fact Taylor
Swift wants to come in actually clean up

451
00:32:45,470 --> 00:32:49,620
the system completely and prevent
reinfection during consistency what you

452
00:32:49,620 --> 00:32:54,139
need to do is go to that configuration
directory and delete all the MA file so

453
00:32:54,140 --> 00:32:58,220
that won't harm the system in any way
all it does is it basically says you

454
00:32:58,220 --> 00:33:02,450
know whatever configuration you are
persisting stop doing that and so that

455
00:33:02,450 --> 00:33:06,430
will be cleared out and 15 minutes we'll
pass for consistency and nothing will

456
00:33:06,430 --> 00:33:10,420
happen because there is no longer any
persistent state so know that we're not

457
00:33:10,420 --> 00:33:12,880
talking about if you're if you're
familiar with like the same repository

458
00:33:12,880 --> 00:33:17,340
like objects . data none of this stuff
is she realized in that it's all just

459
00:33:17,340 --> 00:33:24,020
living in these my files so pretty easy
to clean up so what's next

460
00:33:24,020 --> 00:33:28,160
the first thing that we were thinking of
when we were doing this research is are

461
00:33:28,160 --> 00:33:32,000
we kind of going down a path for a
technology that may end up being in a

462
00:33:32,000 --> 00:33:36,000
trashed it never gets picked up a
generally accepted but we think that the

463
00:33:36,000 --> 00:33:37,799
issue is probably here to stay

464
00:33:37,799 --> 00:33:41,299
there's a few reasons for that one of
the reasons it hasn't become more

465
00:33:41,299 --> 00:33:47,720
popular more quickly I guess is that
it's so hard to use I think there's in

466
00:33:47,720 --> 00:33:53,129
the past year to adoption of PowerShell
by administrators in by blue team in red

467
00:33:53,129 --> 00:33:57,369
team practitioners has greatly increased
and i think that will eventually spill

468
00:33:57,369 --> 00:34:00,908
over into DSC since they require I mean
you need so much PowerShell knowledge to

469
00:34:00,909 --> 00:34:05,940
use DSC lack of easy to use tools has
definitely been inhibiting also the fact

470
00:34:05,940 --> 00:34:11,119
that this only works with Windows 8 one
and server 2012 are two certainly has an

471
00:34:11,119 --> 00:34:14,569
effect if you're thinking about attack
surface and the proportion of victims

472
00:34:14,569 --> 00:34:17,699
systems that you could use this on
fortunately at least as we said earlier

473
00:34:17,699 --> 00:34:21,348
the server side of this is in your hands
you control the CD server it's just

474
00:34:21,349 --> 00:34:24,139
something you spin up in the cloud so
you don't have to worry about picking

475
00:34:24,139 --> 00:34:27,450
victims that can handle the client side
of things

476
00:34:27,449 --> 00:34:32,388
another reason that I think this is
going to be increasingly widespread is

477
00:34:32,389 --> 00:34:38,280
Microsoft open source the DSC resource
kit this past June that has led to a lot

478
00:34:38,280 --> 00:34:42,079
of other tool adoption including as I
mentioned earlier shopping puppet having

479
00:34:42,079 --> 00:34:46,790
integration points with the SEC also do
you see is required to do a couple of

480
00:34:46,790 --> 00:34:51,159
things in next generation of Windows so
some of you may have heard of Windows

481
00:34:51,159 --> 00:34:56,520
nano server nano basically takes the
concept of Windows core even further and

482
00:34:56,520 --> 00:35:02,099
it's like an extremely lightweight small
instance of the Windows kernel with all

483
00:35:02,099 --> 00:35:05,880
the cool air strips out and all of the
necessary things even like the

484
00:35:05,880 --> 00:35:10,359
capability to run MSI installers in like
parts of dotnet framework so minimal

485
00:35:10,359 --> 00:35:15,000
court great for like small instance p.m.
is great for security and DSC is

486
00:35:15,000 --> 00:35:19,119
actually the only way to manage those if
you want to install configure and then a

487
00:35:19,119 --> 00:35:23,799
server DSC is the way you do it now
becomes popular you're gonna see a lot

488
00:35:23,799 --> 00:35:25,530
more of DSC and then

489
00:35:25,530 --> 00:35:31,310
Windows Azure has a mechanism by which
you can actually configure DSC scripts

490
00:35:31,310 --> 00:35:35,630
and inject them into virtual machines so
that they are all configured the way you

491
00:35:35,630 --> 00:35:38,860
want which is great if you're managing a
fleet of GM's right as you have a simple

492
00:35:38,860 --> 00:35:42,450
way to make sure that they are and stop
this offer you want this installed and

493
00:35:42,450 --> 00:35:46,129
configured right from an attacker
perspective that might be a really

494
00:35:46,130 --> 00:35:49,740
interesting factor is well like if I
hijacked that mechanism to tamper with

495
00:35:49,740 --> 00:35:54,120
configuration settings I may be able to
impact the number of GM's concurrently

496
00:35:54,120 --> 00:35:58,620
from an external location so that's an
interesting path that we might go down

497
00:35:58,620 --> 00:36:02,880
again I do want to stress that neither
matter myself have seen any of these

498
00:36:02,880 --> 00:36:06,270
techniques in the wild every couple
weeks i've been searching the internet I

499
00:36:06,270 --> 00:36:10,150
haven't really seen anyone else even
talking about this yet that doesn't mean

500
00:36:10,150 --> 00:36:14,310
it's not happening but we would be very
interesting if anyone ever stumbled

501
00:36:14,310 --> 00:36:17,910
across this so please do let us now and
again we're hoping we can be good

502
00:36:17,910 --> 00:36:21,960
citizens in providing both attack and
defence I the things that help us to

503
00:36:21,960 --> 00:36:28,800
detection side so just like we hope that
he is he is here to stay we also hope

504
00:36:28,800 --> 00:36:32,530
that DSC compromises here to say so we
we are planning to add some additional

505
00:36:32,530 --> 00:36:37,360
capabilities the first thing that we
like to do is adding more resource

506
00:36:37,360 --> 00:36:41,200
availability so if you want to enforce a
registry key or for example if you wanna

507
00:36:41,200 --> 00:36:44,890
instead of dropping by nearly Tedeschi's
PowerShell injection to just run

508
00:36:44,890 --> 00:36:46,290
malicious code in memory

509
00:36:46,290 --> 00:36:49,630
this is the type of capabilities we're
looking at here in the short term the

510
00:36:49,630 --> 00:36:52,860
other thing that we're looking to do is
marginalized configurations so I

511
00:36:52,860 --> 00:36:56,740
mentioned earlier you can only put one
configuration on a victim in point so

512
00:36:56,740 --> 00:37:00,270
we'd like to do is allow you to stack as
many resources as you like into that

513
00:37:00,270 --> 00:37:04,259
single configuration so if you want to
have a binary that runs and have a user

514
00:37:04,260 --> 00:37:07,310
account that persists and have a
registry accounted for our registry key

515
00:37:07,310 --> 00:37:11,029
that's always present you know stacking
those onto a single configuration is

516
00:37:11,030 --> 00:37:15,010
something that we want to support in the
near term the ability to other dissolve

517
00:37:15,010 --> 00:37:18,890
your victims so for example if you need
to dissolve victims and go away

518
00:37:18,890 --> 00:37:21,839
building and capabilities to
automatically update can fix that they

519
00:37:21,840 --> 00:37:26,720
go in and delete all the MAS and again
the dynamically updating existing config

520
00:37:26,720 --> 00:37:29,970
said none of this would be popular
possible if we don't support updating it

521
00:37:29,970 --> 00:37:30,839
can take on the fly

