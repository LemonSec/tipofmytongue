1
00:00:00,000 --> 00:00:02,639
and this allows me to um this was sheer

2
00:00:02,639 --> 00:00:03,760
luck by the way

3
00:00:03,760 --> 00:00:05,920
this allows me to quickly introduce

4
00:00:05,920 --> 00:00:06,799
natalie

5
00:00:06,799 --> 00:00:08,960
who actually doesn't really need an

6
00:00:08,960 --> 00:00:10,160
introduction

7
00:00:10,160 --> 00:00:14,880
um so she's she's i've been

8
00:00:14,880 --> 00:00:16,560
following her research for a very long

9
00:00:16,560 --> 00:00:18,480
time and i'm um like uh

10
00:00:18,480 --> 00:00:20,320
i i'm really impressed by all of the

11
00:00:20,320 --> 00:00:21,840
stuff that she has been doing

12
00:00:21,840 --> 00:00:25,039
so she's a uh security researcher at

13
00:00:25,039 --> 00:00:26,560
google projects here

14
00:00:26,560 --> 00:00:30,400
focusing on i think a lot of it

15
00:00:30,400 --> 00:00:32,880
um i got to know her through her

16
00:00:32,880 --> 00:00:34,320
tamagotchi hackery

17
00:00:34,320 --> 00:00:37,120
but she also focuses on browser security

18
00:00:37,120 --> 00:00:38,399
scripting engines

19
00:00:38,399 --> 00:00:41,920
web assembly webrtc um

20
00:00:41,920 --> 00:00:43,600
today she'll talk about adventures in

21
00:00:43,600 --> 00:00:45,200
video conferencing but

22
00:00:45,200 --> 00:00:48,640
also she has a background in um

23
00:00:48,640 --> 00:00:51,360
mobile security messaging apps and so on

24
00:00:51,360 --> 00:00:51,760
i think

25
00:00:51,760 --> 00:00:54,640
overall she's just doing a lot of uh

26
00:00:54,640 --> 00:00:55,520
amazing

27
00:00:55,520 --> 00:00:57,360
research which would be way too long for

28
00:00:57,360 --> 00:00:59,600
me to actually go into too much detail

29
00:00:59,600 --> 00:01:01,199
and i don't really want to take away too

30
00:01:01,199 --> 00:01:03,120
much from her so i would like to pass

31
00:01:03,120 --> 00:01:04,799
the word over to her

32
00:01:04,799 --> 00:01:08,720
and let her present her

33
00:01:09,119 --> 00:01:10,960
her talk so thank you natalie for

34
00:01:10,960 --> 00:01:12,960
accepting i'm really looking forward to

35
00:01:12,960 --> 00:01:14,320
your talk

36
00:01:14,320 --> 00:01:16,240
great thanks so much and thanks so much

37
00:01:16,240 --> 00:01:19,119
for inviting me

38
00:01:19,680 --> 00:01:23,759
this is working amazing yes

39
00:01:23,759 --> 00:01:26,960
yes today i'm gonna give a talk entitled

40
00:01:26,960 --> 00:01:30,400
adventures in video conferencing

41
00:01:30,400 --> 00:01:33,680
um i'm natalie slovanovich and i'm a

42
00:01:33,680 --> 00:01:34,400
member

43
00:01:34,400 --> 00:01:37,280
of a team called project zero at google

44
00:01:37,280 --> 00:01:39,360
uh project zero's mission

45
00:01:39,360 --> 00:01:42,799
is to make zero day hard we want to make

46
00:01:42,799 --> 00:01:43,119
it

47
00:01:43,119 --> 00:01:46,159
more difficult for attackers to use zero

48
00:01:46,159 --> 00:01:47,840
days against

49
00:01:47,840 --> 00:01:51,200
anyone they target and

50
00:01:51,200 --> 00:01:53,439
to choose this goal we do a few

51
00:01:53,439 --> 00:01:54,960
different types of work

52
00:01:54,960 --> 00:01:56,960
most of our work consists of finding and

53
00:01:56,960 --> 00:01:58,880
reporting vulnerabilities so they can be

54
00:01:58,880 --> 00:02:00,000
fixed

55
00:02:00,000 --> 00:02:03,439
so my average day is um putting my nose

56
00:02:03,439 --> 00:02:04,640
into code

57
00:02:04,640 --> 00:02:07,920
and trying to find the types of bugs

58
00:02:07,920 --> 00:02:09,758
that i think attackers will use

59
00:02:09,758 --> 00:02:13,120
so that they aren't available anymore

60
00:02:13,120 --> 00:02:14,800
we also spend some of our time writing

61
00:02:14,800 --> 00:02:16,560
exploits our goal

62
00:02:16,560 --> 00:02:19,599
is to understand how the

63
00:02:19,599 --> 00:02:24,000
exploits work so that we can um

64
00:02:24,000 --> 00:02:26,319
think of ways to make it more difficult

65
00:02:26,319 --> 00:02:28,400
for attackers to use them

66
00:02:28,400 --> 00:02:30,560
we also spend some of our time driving

67
00:02:30,560 --> 00:02:32,480
structural improvements related to our

68
00:02:32,480 --> 00:02:33,200
work

69
00:02:33,200 --> 00:02:35,680
so this will often be things like

70
00:02:35,680 --> 00:02:37,920
mitigations to make exploitation more

71
00:02:37,920 --> 00:02:39,120
difficult

72
00:02:39,120 --> 00:02:43,200
or helping vendors

73
00:02:43,200 --> 00:02:46,640
think of new ways to fuzz their software

74
00:02:46,640 --> 00:02:48,239
so i'm going to talk today about the

75
00:02:48,239 --> 00:02:50,879
work i've done on video conferencing

76
00:02:50,879 --> 00:02:54,000
i've been doing this for on and off for

77
00:02:54,000 --> 00:02:56,560
two years i want to talk a bit about you

78
00:02:56,560 --> 00:02:58,080
know how this process worked

79
00:02:58,080 --> 00:03:00,560
and more specifically how attackers

80
00:03:00,560 --> 00:03:02,400
behaved in the meantime

81
00:03:02,400 --> 00:03:05,440
and how it informs this research

82
00:03:05,440 --> 00:03:08,159
when i started i realized that video

83
00:03:08,159 --> 00:03:10,239
conferencing um became a big thing

84
00:03:10,239 --> 00:03:12,239
really really quickly

85
00:03:12,239 --> 00:03:14,400
of course with covid we're using it more

86
00:03:14,400 --> 00:03:15,519
and more

87
00:03:15,519 --> 00:03:18,400
but even before then um video

88
00:03:18,400 --> 00:03:19,840
conferencing software was

89
00:03:19,840 --> 00:03:22,480
in browsers it slowly came to every

90
00:03:22,480 --> 00:03:24,560
messaging client you know to whatsapp

91
00:03:24,560 --> 00:03:28,000
to signal to facebook to many others

92
00:03:28,000 --> 00:03:31,519
and at this time there was

93
00:03:31,519 --> 00:03:33,920
um very little information available on

94
00:03:33,920 --> 00:03:36,400
implementation vulnerabilities

95
00:03:36,400 --> 00:03:38,080
when video conferencing protocols were

96
00:03:38,080 --> 00:03:39,920
designed a lot of work was done on

97
00:03:39,920 --> 00:03:40,640
encryption

98
00:03:40,640 --> 00:03:42,959
so things like how do you prevent an

99
00:03:42,959 --> 00:03:43,840
eavesdropper

100
00:03:43,840 --> 00:03:46,640
from like seeing or modifying the stream

101
00:03:46,640 --> 00:03:47,760
but there's way less

102
00:03:47,760 --> 00:03:51,040
on what if there's a buffer overflow in

103
00:03:51,040 --> 00:03:54,080
one of the protocol parsers i found this

104
00:03:54,080 --> 00:03:56,480
especially concerning because

105
00:03:56,480 --> 00:03:59,120
there are some people out there who um

106
00:03:59,120 --> 00:04:00,080
use

107
00:04:00,080 --> 00:04:02,640
exploits for bad purposes and there's

108
00:04:02,640 --> 00:04:04,159
actually exploit brokers

109
00:04:04,159 --> 00:04:06,799
who will buy and sell these exploits and

110
00:04:06,799 --> 00:04:08,480
most of them are private but there's one

111
00:04:08,480 --> 00:04:10,159
called serodium that actually

112
00:04:10,159 --> 00:04:12,720
posts their price list um to give some

113
00:04:12,720 --> 00:04:14,239
examples uh their most

114
00:04:14,239 --> 00:04:17,918
valuable thing right now is um

115
00:04:17,918 --> 00:04:20,000
android full privilege escalation zero

116
00:04:20,000 --> 00:04:21,199
clicks so basically

117
00:04:21,199 --> 00:04:24,240
if you can remotely um jailbreak an

118
00:04:24,240 --> 00:04:26,560
android without touching it allowing an

119
00:04:26,560 --> 00:04:28,639
attacker access to everything

120
00:04:28,639 --> 00:04:31,120
this company will pay you 2.5 million

121
00:04:31,120 --> 00:04:32,720
dollars

122
00:04:32,720 --> 00:04:34,639
meanwhile you can do that in ios you can

123
00:04:34,639 --> 00:04:37,280
get uh 2 million

124
00:04:37,280 --> 00:04:40,800
and um prices go down after that but you

125
00:04:40,800 --> 00:04:42,320
can see that there's a lot of different

126
00:04:42,320 --> 00:04:43,759
targets here

127
00:04:43,759 --> 00:04:46,160
and something that i noticed was a great

128
00:04:46,160 --> 00:04:46,880
deal

129
00:04:46,880 --> 00:04:49,680
of these top value exploits involve

130
00:04:49,680 --> 00:04:51,040
video conferencing

131
00:04:51,040 --> 00:04:54,320
so obviously you know android has a duo

132
00:04:54,320 --> 00:04:56,400
installed on most devices

133
00:04:56,400 --> 00:05:00,320
ios has facetime and then things like

134
00:05:00,320 --> 00:05:02,960
whatsapp telegram signal facebook

135
00:05:02,960 --> 00:05:03,759
messenger

136
00:05:03,759 --> 00:05:07,360
they all have video conferencing so um

137
00:05:07,360 --> 00:05:09,039
this seems like this could potentially

138
00:05:09,039 --> 00:05:10,720
be a

139
00:05:10,720 --> 00:05:12,160
interesting target to find the sort of

140
00:05:12,160 --> 00:05:14,880
bugs that attackers really value

141
00:05:14,880 --> 00:05:17,680
so i looked into it and i found that the

142
00:05:17,680 --> 00:05:19,759
vast majority of video conferencing

143
00:05:19,759 --> 00:05:22,960
is implemented using webrtc

144
00:05:22,960 --> 00:05:25,680
and webrtc is an audio and video

145
00:05:25,680 --> 00:05:27,120
conferencing library

146
00:05:27,120 --> 00:05:30,080
that's maintained by google and it's

147
00:05:30,080 --> 00:05:30,720
used

148
00:05:30,720 --> 00:05:33,919
by basically most video conferencing

149
00:05:33,919 --> 00:05:37,280
it's in browsers so for example this uh

150
00:05:37,280 --> 00:05:38,800
pop-in thing we're using for this

151
00:05:38,800 --> 00:05:41,600
workshop this will be using webrtc

152
00:05:41,600 --> 00:05:44,720
in your browser messaging applications

153
00:05:44,720 --> 00:05:47,120
also use it

154
00:05:47,120 --> 00:05:49,759
facebook messenger signal snapchat slack

155
00:05:49,759 --> 00:05:50,639
etc

156
00:05:50,639 --> 00:05:52,960
they also embed this library to use it

157
00:05:52,960 --> 00:05:54,320
for video conferencing

158
00:05:54,320 --> 00:05:57,440
i have whatsapp in there but um they're

159
00:05:57,440 --> 00:05:58,400
basically the one

160
00:05:58,400 --> 00:06:01,759
exception they do use um parts of webrtc

161
00:06:01,759 --> 00:06:02,639
but they also

162
00:06:02,639 --> 00:06:05,039
you use mostly an alternative called pj

163
00:06:05,039 --> 00:06:06,960
sip and the other alternative

164
00:06:06,960 --> 00:06:07,919
implementation

165
00:06:07,919 --> 00:06:11,360
is facetime on ios devices they

166
00:06:11,360 --> 00:06:12,639
implement their own video conferencing

167
00:06:12,639 --> 00:06:14,319
but other than that

168
00:06:14,319 --> 00:06:16,720
most systems don't most of them use this

169
00:06:16,720 --> 00:06:18,160
webrtc

170
00:06:18,160 --> 00:06:20,160
and at the time basically there wasn't

171
00:06:20,160 --> 00:06:22,319
any security information available about

172
00:06:22,319 --> 00:06:23,919
it

173
00:06:23,919 --> 00:06:26,479
so just to step back a bit um how does

174
00:06:26,479 --> 00:06:27,759
webrtc

175
00:06:27,759 --> 00:06:30,240
and video conferencing systems in

176
00:06:30,240 --> 00:06:31,680
general work

177
00:06:31,680 --> 00:06:33,680
well it's sort of it's a two-phase

178
00:06:33,680 --> 00:06:34,880
process

179
00:06:34,880 --> 00:06:36,319
so to start off you do what's called

180
00:06:36,319 --> 00:06:38,880
signaling and signaling is where two

181
00:06:38,880 --> 00:06:40,880
peers that can talk to each other

182
00:06:40,880 --> 00:06:43,280
in some way set up their video

183
00:06:43,280 --> 00:06:44,479
conferencing call

184
00:06:44,479 --> 00:06:46,639
using the messages they can already send

185
00:06:46,639 --> 00:06:48,000
so for example

186
00:06:48,000 --> 00:06:49,919
if you're using a browser like we are

187
00:06:49,919 --> 00:06:52,160
now um

188
00:06:52,160 --> 00:06:54,000
the browser clients can communicate with

189
00:06:54,000 --> 00:06:55,360
a server so

190
00:06:55,360 --> 00:06:57,440
um the browser will send this signaling

191
00:06:57,440 --> 00:06:59,360
data to the server

192
00:06:59,360 --> 00:07:01,680
and then that'll be exchanged with the

193
00:07:01,680 --> 00:07:03,360
peer which in this case would be another

194
00:07:03,360 --> 00:07:04,080
server

195
00:07:04,080 --> 00:07:06,400
and then that'll be the information that

196
00:07:06,400 --> 00:07:08,240
the two peers need to set up a

197
00:07:08,240 --> 00:07:09,520
peer-to-peer connection

198
00:07:09,520 --> 00:07:12,800
and send media if it's a messaging

199
00:07:12,800 --> 00:07:13,759
client for example something like

200
00:07:13,759 --> 00:07:15,199
facebook messenger they'll use what's

201
00:07:15,199 --> 00:07:16,560
available to them for example a facebook

202
00:07:16,560 --> 00:07:17,120
message

203
00:07:17,120 --> 00:07:18,720
but it's always the same deal there's

204
00:07:18,720 --> 00:07:20,960
this signaling information

205
00:07:20,960 --> 00:07:22,479
that they exchange through the secure

206
00:07:22,479 --> 00:07:24,800
channel and then this is used to set up

207
00:07:24,800 --> 00:07:26,960
a peer-to-peer channel between

208
00:07:26,960 --> 00:07:30,720
the two or more devices that need to

209
00:07:30,720 --> 00:07:32,560
communicate

210
00:07:32,560 --> 00:07:34,319
there's a lot of protocols that are used

211
00:07:34,319 --> 00:07:36,240
for this on the left hand side of this

212
00:07:36,240 --> 00:07:38,080
diagram is what's typically used for

213
00:07:38,080 --> 00:07:39,120
signaling

214
00:07:39,120 --> 00:07:42,400
which is usually tls over tcp

215
00:07:42,400 --> 00:07:44,960
though as i said it can be anything but

216
00:07:44,960 --> 00:07:45,680
on the right

217
00:07:45,680 --> 00:07:47,840
is how the peer-to-peer protocol usually

218
00:07:47,840 --> 00:07:48,800
works

219
00:07:48,800 --> 00:07:51,840
and this is typically over udp though it

220
00:07:51,840 --> 00:07:52,800
doesn't have to be

221
00:07:52,800 --> 00:07:54,479
um there's nothing transport specific

222
00:07:54,479 --> 00:07:56,720
about webrtc so it can use tcp

223
00:07:56,720 --> 00:07:59,919
or other things then there's ice done in

224
00:07:59,919 --> 00:08:00,400
turn

225
00:08:00,400 --> 00:08:02,160
and these are the protocols that are

226
00:08:02,160 --> 00:08:04,240
used to help peers find each other on

227
00:08:04,240 --> 00:08:05,280
the network

228
00:08:05,280 --> 00:08:07,360
so if you're behind a nat or something

229
00:08:07,360 --> 00:08:09,280
ice done in turn will make the two peers

230
00:08:09,280 --> 00:08:12,080
have readable ips to each other

231
00:08:12,080 --> 00:08:14,479
then there's two protocols that are

232
00:08:14,479 --> 00:08:15,759
actually used by

233
00:08:15,759 --> 00:08:19,360
um webrtc to exchange peer-to-peer data

234
00:08:19,360 --> 00:08:22,000
um rtp which is called srtp if it's

235
00:08:22,000 --> 00:08:23,039
encrypted

236
00:08:23,039 --> 00:08:25,360
i'll talk about a lot and that is the

237
00:08:25,360 --> 00:08:28,319
protocol that's used for audio and video

238
00:08:28,319 --> 00:08:30,960
and this is a pro best effort protocol

239
00:08:30,960 --> 00:08:32,240
so something you want in video

240
00:08:32,240 --> 00:08:33,679
conferencing typically

241
00:08:33,679 --> 00:08:35,919
is that it's okay if you lose packets

242
00:08:35,919 --> 00:08:37,599
you know if you lose one video frame

243
00:08:37,599 --> 00:08:39,200
that's okay you know it just makes your

244
00:08:39,200 --> 00:08:41,279
video go slower

245
00:08:41,279 --> 00:08:43,120
but then there's also sctp and that's

246
00:08:43,120 --> 00:08:45,360
used for reliable data transfer

247
00:08:45,360 --> 00:08:48,399
and that's typically used for uh sending

248
00:08:48,399 --> 00:08:50,080
small amounts of text data

249
00:08:50,080 --> 00:08:52,480
for example if you post a question in

250
00:08:52,480 --> 00:08:53,760
the question box here

251
00:08:53,760 --> 00:08:56,640
they'll usually use data channels and

252
00:08:56,640 --> 00:08:57,839
the reason you need that reliable

253
00:08:57,839 --> 00:08:58,720
transport is

254
00:08:58,720 --> 00:09:00,720
unlike video you need 100 of that you

255
00:09:00,720 --> 00:09:02,000
don't want like one bit

256
00:09:02,000 --> 00:09:03,600
of your question to be missing because

257
00:09:03,600 --> 00:09:06,640
that would make it not understandable

258
00:09:06,640 --> 00:09:08,800
so i looked at this and the first thing

259
00:09:08,800 --> 00:09:09,920
i did was

260
00:09:09,920 --> 00:09:13,120
i fuzzed the rdp processing that seemed

261
00:09:13,120 --> 00:09:15,040
like a really complex protocol

262
00:09:15,040 --> 00:09:18,480
so i thought i would start off by

263
00:09:18,480 --> 00:09:22,560
giving that a shot so i started off with

264
00:09:22,560 --> 00:09:23,680
what i'd kind of call

265
00:09:23,680 --> 00:09:26,800
the worst fuzzer ever i

266
00:09:26,800 --> 00:09:30,320
altered chrome so that it's it now

267
00:09:30,320 --> 00:09:32,800
sent out malformed rdp so i literally

268
00:09:32,800 --> 00:09:34,320
altered the code where the rt was

269
00:09:34,320 --> 00:09:35,600
generated

270
00:09:35,600 --> 00:09:37,279
and then i you know pointed it at a

271
00:09:37,279 --> 00:09:40,320
normal browser i set up called webrtc

272
00:09:40,320 --> 00:09:42,560
and this crashed every 30 seconds which

273
00:09:42,560 --> 00:09:43,920
was um

274
00:09:43,920 --> 00:09:45,600
not what i expected but it showed that

275
00:09:45,600 --> 00:09:48,720
this code was like really really bad

276
00:09:48,720 --> 00:09:50,480
so i learned here that the concept would

277
00:09:50,480 --> 00:09:52,480
generally work and i got a few

278
00:09:52,480 --> 00:09:55,839
very shallow bugs that um block fuzzing

279
00:09:55,839 --> 00:09:56,959
fixed

280
00:09:56,959 --> 00:09:58,959
and just in case people are curious this

281
00:09:58,959 --> 00:10:00,640
is the fuzzer i used

282
00:10:00,640 --> 00:10:05,040
so it literally was that um

283
00:10:05,040 --> 00:10:08,320
i would overwrite one byte with

284
00:10:08,320 --> 00:10:09,920
something random or sometimes i would

285
00:10:09,920 --> 00:10:10,959
overwrite

286
00:10:10,959 --> 00:10:14,079
a block or sometimes i would

287
00:10:14,079 --> 00:10:18,000
uh shorten the pack package so this is a

288
00:10:18,000 --> 00:10:19,519
very very simple fuzzer to find this

289
00:10:19,519 --> 00:10:21,680
number of bugs

290
00:10:21,680 --> 00:10:24,959
um but then i decided that this was

291
00:10:24,959 --> 00:10:27,200
um not not enough and i wanted to find

292
00:10:27,200 --> 00:10:29,279
more bugs so eventually

293
00:10:29,279 --> 00:10:32,560
i wrote a client fuzzer using a webrtc

294
00:10:32,560 --> 00:10:34,959
in c plus plus which was nice it was

295
00:10:34,959 --> 00:10:36,320
lighter weight than the browser i could

296
00:10:36,320 --> 00:10:38,560
run it against every target

297
00:10:38,560 --> 00:10:41,839
um and i think like the only good part

298
00:10:41,839 --> 00:10:43,600
about this was that there were no false

299
00:10:43,600 --> 00:10:45,040
positives every crash i got in the

300
00:10:45,040 --> 00:10:46,000
browser was a real

301
00:10:46,000 --> 00:10:49,040
crash but it was very slow and it did

302
00:10:49,040 --> 00:10:49,920
help me find

303
00:10:49,920 --> 00:10:52,480
some more um end-to-end vulnerabilities

304
00:10:52,480 --> 00:10:54,320
in webrtc

305
00:10:54,320 --> 00:10:57,360
and then what happened was that the

306
00:10:57,360 --> 00:11:00,240
webrtc team got sick of me um

307
00:11:00,240 --> 00:11:03,360
i kept reporting all these bugs where

308
00:11:03,360 --> 00:11:06,079
uh i would be like hey you know change

309
00:11:06,079 --> 00:11:07,839
this code build the browser put it in

310
00:11:07,839 --> 00:11:09,279
another browser

311
00:11:09,279 --> 00:11:11,760
and those are really hard to reproduce

312
00:11:11,760 --> 00:11:12,399
so

313
00:11:12,399 --> 00:11:15,040
um they gave me this command line tool

314
00:11:15,040 --> 00:11:16,880
that would emulate rtp so i could put

315
00:11:16,880 --> 00:11:18,320
the packets in a file

316
00:11:18,320 --> 00:11:21,120
and then use this to emulate it and what

317
00:11:21,120 --> 00:11:23,040
was nice about is this was fast

318
00:11:23,040 --> 00:11:24,959
i could build it with coverage and do

319
00:11:24,959 --> 00:11:26,480
distributed fuzzing

320
00:11:26,480 --> 00:11:28,959
um what was not great about it is it was

321
00:11:28,959 --> 00:11:30,560
not a perfect representation

322
00:11:30,560 --> 00:11:32,560
and i did some work to make it a better

323
00:11:32,560 --> 00:11:34,160
representation

324
00:11:34,160 --> 00:11:36,800
but still um i spent a lot of time going

325
00:11:36,800 --> 00:11:38,160
through false positives but what was

326
00:11:38,160 --> 00:11:39,440
good about this is then i could do

327
00:11:39,440 --> 00:11:40,959
fuzzing with coverage

328
00:11:40,959 --> 00:11:44,320
and um i found many bugs

329
00:11:44,320 --> 00:11:47,200
so um these were like the first seven

330
00:11:47,200 --> 00:11:49,040
serious vulnerabilities i found

331
00:11:49,040 --> 00:11:50,560
and there were quite a few that were not

332
00:11:50,560 --> 00:11:52,800
not serious as well

333
00:11:52,800 --> 00:11:56,320
um and considering

334
00:11:56,320 --> 00:11:58,639
the nature of this attack surface and

335
00:11:58,639 --> 00:12:00,399
the number of things it was in

336
00:12:00,399 --> 00:12:03,279
you know i thought it was concerning um

337
00:12:03,279 --> 00:12:04,880
so i'm gonna

338
00:12:04,880 --> 00:12:07,279
um give you an example of one of the

339
00:12:07,279 --> 00:12:08,480
bugs i found

340
00:12:08,480 --> 00:12:10,079
and what i like about this one is like

341
00:12:10,079 --> 00:12:11,839
i've never seen a bug like this

342
00:12:11,839 --> 00:12:14,959
so i want to give everyone a minute um

343
00:12:14,959 --> 00:12:17,120
take a look at this code and see if you

344
00:12:17,120 --> 00:12:18,399
can find the bug in it

345
00:12:18,399 --> 00:12:21,200
and put it in the chat and i want to see

346
00:12:21,200 --> 00:12:21,920
if anyone

347
00:12:21,920 --> 00:12:25,839
can figure out what it is

348
00:13:10,079 --> 00:13:12,880
okay wow so i just got the right answer

349
00:13:12,880 --> 00:13:14,079
and this says i've done this at many

350
00:13:14,079 --> 00:13:15,680
presentations i have literally never had

351
00:13:15,680 --> 00:13:17,360
a single person give the right answer

352
00:13:17,360 --> 00:13:22,160
so i am like so excited by this um

353
00:13:22,160 --> 00:13:25,439
whoever said um

354
00:13:26,560 --> 00:13:31,040
said it was defined that is 100 correct

355
00:13:31,040 --> 00:13:34,079
so find what does it do if it doesn't

356
00:13:34,079 --> 00:13:37,200
find something it returns um standard

357
00:13:37,200 --> 00:13:39,760
and and that's just a point to the end

358
00:13:39,760 --> 00:13:41,360
of the find array so that points out of

359
00:13:41,360 --> 00:13:42,880
bounds memory

360
00:13:42,880 --> 00:13:45,360
so this would basically get this out of

361
00:13:45,360 --> 00:13:46,320
bounds memory

362
00:13:46,320 --> 00:13:49,440
and then access it and um

363
00:13:49,440 --> 00:13:52,480
this would this this would cause memory

364
00:13:52,480 --> 00:13:53,279
correction

365
00:13:53,279 --> 00:13:54,639
so this is one of those interesting bugs

366
00:13:54,639 --> 00:13:55,839
and it's one of those things that i you

367
00:13:55,839 --> 00:13:57,600
know when i saw it i was like

368
00:13:57,600 --> 00:13:59,040
what and i think i never would have

369
00:13:59,040 --> 00:14:02,800
found it without fuzzing

370
00:14:02,800 --> 00:14:05,040
so i also want to look at the two other

371
00:14:05,040 --> 00:14:06,160
messengers that

372
00:14:06,160 --> 00:14:08,880
don't use webrtc and the biggest ones

373
00:14:08,880 --> 00:14:10,560
are facetime and whatsapp

374
00:14:10,560 --> 00:14:12,320
so i created similar setups that fuzz

375
00:14:12,320 --> 00:14:13,680
and replay rdp

376
00:14:13,680 --> 00:14:16,959
on each app and this was more difficult

377
00:14:16,959 --> 00:14:18,880
than webrtc it required binary

378
00:14:18,880 --> 00:14:20,079
modifications because i didn't have

379
00:14:20,079 --> 00:14:20,880
thesaurus

380
00:14:20,880 --> 00:14:22,880
so i basically spent months basically

381
00:14:22,880 --> 00:14:23,920
setting this up

382
00:14:23,920 --> 00:14:26,880
modifying the binary but i did

383
00:14:26,880 --> 00:14:29,839
eventually get this to

384
00:14:29,839 --> 00:14:31,920
so in facetime i found four

385
00:14:31,920 --> 00:14:33,199
vulnerabilities

386
00:14:33,199 --> 00:14:35,040
and one of these was especially

387
00:14:35,040 --> 00:14:36,959
interesting because

388
00:14:36,959 --> 00:14:40,079
um it was a kernel heap corruption bug

389
00:14:40,079 --> 00:14:41,199
so basically

390
00:14:41,199 --> 00:14:43,040
if someone picked up this facetime call

391
00:14:43,040 --> 00:14:44,800
this would um

392
00:14:44,800 --> 00:14:47,040
basically be could be a straight to

393
00:14:47,040 --> 00:14:48,560
kernel exploit with one bug

394
00:14:48,560 --> 00:14:51,040
so that was pretty interesting and then

395
00:14:51,040 --> 00:14:52,079
i also found

396
00:14:52,079 --> 00:14:54,240
a heap corruption vulnerability in

397
00:14:54,240 --> 00:14:55,920
whatsapp

398
00:14:55,920 --> 00:14:57,760
but at this point i finished my research

399
00:14:57,760 --> 00:15:00,000
but i wasn't quite sure what to make

400
00:15:00,000 --> 00:15:03,040
of it you know i had these bugs where

401
00:15:03,040 --> 00:15:04,880
you know if someone picks up a call

402
00:15:04,880 --> 00:15:06,560
maybe you could exploit them but i

403
00:15:06,560 --> 00:15:08,240
hadn't actually exploited them

404
00:15:08,240 --> 00:15:10,480
and also wondered how useful is this to

405
00:15:10,480 --> 00:15:11,600
an attacker

406
00:15:11,600 --> 00:15:13,839
you know how likely is someone to

407
00:15:13,839 --> 00:15:15,680
actually pick up

408
00:15:15,680 --> 00:15:17,920
a call from a stranger and allow it to

409
00:15:17,920 --> 00:15:19,279
exploit and that sort of thing

410
00:15:19,279 --> 00:15:21,440
so i wasn't sure but then a few things

411
00:15:21,440 --> 00:15:23,040
happened

412
00:15:23,040 --> 00:15:24,639
to start off there was this whatsapp

413
00:15:24,639 --> 00:15:28,000
zero day and this was actually

414
00:15:28,000 --> 00:15:30,800
uh pretty shocking so what's app

415
00:15:30,800 --> 00:15:32,240
detected

416
00:15:32,240 --> 00:15:35,759
a zero day that was targeted against

417
00:15:35,759 --> 00:15:38,720
uh dissidents and academics and others

418
00:15:38,720 --> 00:15:39,600
and it was a zero

419
00:15:39,600 --> 00:15:42,399
click exploit so basically these victims

420
00:15:42,399 --> 00:15:43,759
did not have to pick up their phone they

421
00:15:43,759 --> 00:15:46,000
did not have to touch their phone

422
00:15:46,000 --> 00:15:48,399
for um their device to be compromised

423
00:15:48,399 --> 00:15:49,519
and it turned out

424
00:15:49,519 --> 00:15:51,199
that this worked through video

425
00:15:51,199 --> 00:15:54,399
conferencing that basically the attacker

426
00:15:54,399 --> 00:15:55,680
had found a memory corruption

427
00:15:55,680 --> 00:15:56,639
vulnerability

428
00:15:56,639 --> 00:15:58,320
in the peer-to-peer protocols used by

429
00:15:58,320 --> 00:15:59,759
whatsapp

430
00:15:59,759 --> 00:16:02,000
but but they were able to use another

431
00:16:02,000 --> 00:16:03,040
bug to make it

432
00:16:03,040 --> 00:16:07,199
so that the protocol would be processed

433
00:16:07,199 --> 00:16:09,600
before the user picked up the call so

434
00:16:09,600 --> 00:16:11,440
this completely changed how

435
00:16:11,440 --> 00:16:13,279
i thought about the video conferencing

436
00:16:13,279 --> 00:16:15,519
bugs now it wasn't just like oh someone

437
00:16:15,519 --> 00:16:17,600
has to pick up the call you know maybe

438
00:16:17,600 --> 00:16:19,759
there is a way to get this stuff

439
00:16:19,759 --> 00:16:20,720
processed

440
00:16:20,720 --> 00:16:23,040
before the user picks up the call and

441
00:16:23,040 --> 00:16:24,480
make it a purely remote exploit

442
00:16:24,480 --> 00:16:27,360
but then also you know maybe this

443
00:16:27,360 --> 00:16:28,639
happens already maybe you don't need

444
00:16:28,639 --> 00:16:29,680
another bug

445
00:16:29,680 --> 00:16:32,320
i hadn't really looked into what webrtc

446
00:16:32,320 --> 00:16:34,800
does before it picks up the call

447
00:16:34,800 --> 00:16:36,959
and um you know is there is there the

448
00:16:36,959 --> 00:16:38,079
possibility

449
00:16:38,079 --> 00:16:40,959
of peer-to-peer exploits there and then

450
00:16:40,959 --> 00:16:42,560
this other thing happened

451
00:16:42,560 --> 00:16:45,519
and this was the group facetime exploit

452
00:16:45,519 --> 00:16:47,279
and you may remember this

453
00:16:47,279 --> 00:16:50,000
uh it was a very unusual bug that i'd

454
00:16:50,000 --> 00:16:51,759
never seen the likes of before

455
00:16:51,759 --> 00:16:54,240
and what happened is that if you started

456
00:16:54,240 --> 00:16:55,040
a group call

457
00:16:55,040 --> 00:16:57,680
on facetime and then you added someone

458
00:16:57,680 --> 00:16:59,839
who was in the call again

459
00:16:59,839 --> 00:17:02,079
it would pick up the call on their end

460
00:17:02,079 --> 00:17:03,279
even though they didn't touch their

461
00:17:03,279 --> 00:17:04,000
phone

462
00:17:04,000 --> 00:17:05,679
so basically you could force the phone

463
00:17:05,679 --> 00:17:07,280
at the other end to turn its microphone

464
00:17:07,280 --> 00:17:08,559
on and you could hear what was happening

465
00:17:08,559 --> 00:17:10,000
in the surroundings without the user

466
00:17:10,000 --> 00:17:12,240
touch without touching the phone

467
00:17:12,240 --> 00:17:13,919
um and this is quite a bad bug it ended

468
00:17:13,919 --> 00:17:16,240
up being a serious downtime incident for

469
00:17:16,240 --> 00:17:17,520
group face time

470
00:17:17,520 --> 00:17:18,799
because it was something that you didn't

471
00:17:18,799 --> 00:17:21,199
need special skills for and was reported

472
00:17:21,199 --> 00:17:22,400
for several people

473
00:17:22,400 --> 00:17:25,199
including some middle schoolers many

474
00:17:25,199 --> 00:17:27,039
many people used it and they had to take

475
00:17:27,039 --> 00:17:28,720
group face time down so it would be

476
00:17:28,720 --> 00:17:31,600
fixed and this made me think more

477
00:17:31,600 --> 00:17:33,280
you know are there possibly video

478
00:17:33,280 --> 00:17:35,200
conferencing bugs where the bug

479
00:17:35,200 --> 00:17:37,120
isn't that you can exploit it and steal

480
00:17:37,120 --> 00:17:38,559
everyone's messages

481
00:17:38,559 --> 00:17:40,000
but maybe you know it's enough just to

482
00:17:40,000 --> 00:17:41,520
turn the microphone on so you can hear a

483
00:17:41,520 --> 00:17:43,120
person surrounding

484
00:17:43,120 --> 00:17:44,559
but also you know if you can't turn the

485
00:17:44,559 --> 00:17:46,480
microphone on then what other protocols

486
00:17:46,480 --> 00:17:48,320
are being processed and is this another

487
00:17:48,320 --> 00:17:50,320
way to make these rtp exploits more

488
00:17:50,320 --> 00:17:51,520
useful

489
00:17:51,520 --> 00:17:53,440
so i decided it was time to spend some

490
00:17:53,440 --> 00:17:55,440
more time on this

491
00:17:55,440 --> 00:17:58,640
so i got more serious about

492
00:17:58,640 --> 00:18:01,840
webrtc fuzzing um if asked for more bugs

493
00:18:01,840 --> 00:18:03,440
i reported them

494
00:18:03,440 --> 00:18:06,240
i fell bugs for missing coverage in oss

495
00:18:06,240 --> 00:18:07,919
fuzz which is basically integrated

496
00:18:07,919 --> 00:18:08,880
fuzzing

497
00:18:08,880 --> 00:18:12,080
so um i made it

498
00:18:12,080 --> 00:18:15,120
i made sure that um the fuzzing that is

499
00:18:15,120 --> 00:18:17,600
a part of the development life cycle

500
00:18:17,600 --> 00:18:21,120
in chrome and webrtc was adequately

501
00:18:21,120 --> 00:18:22,640
covering

502
00:18:22,640 --> 00:18:25,600
all the parts of webrtc so that you know

503
00:18:25,600 --> 00:18:28,320
as new bikes got added in they got found

504
00:18:28,320 --> 00:18:31,120
i also wrote an exploit to determine the

505
00:18:31,120 --> 00:18:32,559
exploitability

506
00:18:32,559 --> 00:18:36,880
of webrtc in different applications

507
00:18:36,880 --> 00:18:40,640
so um i started off i found some

508
00:18:40,640 --> 00:18:43,520
more rtp bugs and part of my problem

509
00:18:43,520 --> 00:18:44,080
here

510
00:18:44,080 --> 00:18:45,600
is you know in the beginning i thought

511
00:18:45,600 --> 00:18:47,440
found a lot of like really good bugs but

512
00:18:47,440 --> 00:18:49,039
as if i was more and more you know you

513
00:18:49,039 --> 00:18:50,720
kind of started to hit the bottom of the

514
00:18:50,720 --> 00:18:51,520
bug barrel

515
00:18:51,520 --> 00:18:54,400
sometimes so these were not you know the

516
00:18:54,400 --> 00:18:56,320
best bugs

517
00:18:56,320 --> 00:18:59,840
and um also android uses what's called a

518
00:18:59,840 --> 00:19:01,360
slab allocator

519
00:19:01,360 --> 00:19:03,440
which means that they don't have inline

520
00:19:03,440 --> 00:19:04,480
heat metadata

521
00:19:04,480 --> 00:19:07,200
and that made expectation more difficult

522
00:19:07,200 --> 00:19:08,799
i did manage to move the instruction

523
00:19:08,799 --> 00:19:10,160
pointer using an rtp

524
00:19:10,160 --> 00:19:12,799
bug but i couldn't break aslr which is

525
00:19:12,799 --> 00:19:13,840
basically

526
00:19:13,840 --> 00:19:16,400
um on android and most systems they'll

527
00:19:16,400 --> 00:19:19,120
randomly load libraries in memory

528
00:19:19,120 --> 00:19:20,960
as a security measure so that it's

529
00:19:20,960 --> 00:19:23,600
harder to like find where stuff is

530
00:19:23,600 --> 00:19:25,039
and that was my problem with this so i

531
00:19:25,039 --> 00:19:26,480
was able to set the instruction pointer

532
00:19:26,480 --> 00:19:28,320
to wherever i wanted but i wasn't

533
00:19:28,320 --> 00:19:29,919
basically able to figure out where

534
00:19:29,919 --> 00:19:31,520
anything was so i could figure out where

535
00:19:31,520 --> 00:19:33,360
to point it

536
00:19:33,360 --> 00:19:36,400
so i had to move on from this

537
00:19:36,400 --> 00:19:39,039
and i started looking at sctp which is

538
00:19:39,039 --> 00:19:40,480
the other protocol

539
00:19:40,480 --> 00:19:43,120
in webrtc this is the reliable one

540
00:19:43,120 --> 00:19:44,720
that's used typically for

541
00:19:44,720 --> 00:19:48,080
peer-to-peer text messages um

542
00:19:48,080 --> 00:19:49,760
and historically i'd found a few at

543
00:19:49,760 --> 00:19:52,400
about reads but like not a good number

544
00:19:52,400 --> 00:19:55,360
but i decided to give it another look

545
00:19:55,360 --> 00:19:55,919
and

546
00:19:55,919 --> 00:19:59,039
um i found two vulnerabilities in it

547
00:19:59,039 --> 00:20:00,720
so this first one this one was actually

548
00:20:00,720 --> 00:20:02,559
a shocking bug and i suppose it's

549
00:20:02,559 --> 00:20:03,520
actually a bug

550
00:20:03,520 --> 00:20:07,120
in webrtc it was actually an sctp

551
00:20:07,120 --> 00:20:10,240
integration issue and the problem here

552
00:20:10,240 --> 00:20:13,679
is that the user http software um allows

553
00:20:13,679 --> 00:20:15,600
what's called custom transports

554
00:20:15,600 --> 00:20:17,760
so you know you don't have to use udp or

555
00:20:17,760 --> 00:20:19,679
tcp you can use whatever protocol you

556
00:20:19,679 --> 00:20:20,559
want

557
00:20:20,559 --> 00:20:23,120
and webrtc used this feature and they

558
00:20:23,120 --> 00:20:24,880
used it to set up dtls

559
00:20:24,880 --> 00:20:27,760
so that it would be a secure transport

560
00:20:27,760 --> 00:20:30,559
which is a good idea

561
00:20:30,559 --> 00:20:33,520
but the problem here is that you have to

562
00:20:33,520 --> 00:20:34,000
tell

563
00:20:34,000 --> 00:20:37,280
user sctp what an address looks like you

564
00:20:37,280 --> 00:20:38,640
know is an ip

565
00:20:38,640 --> 00:20:41,600
address is it some other type of address

566
00:20:41,600 --> 00:20:42,960
and you have to provide this as a void

567
00:20:42,960 --> 00:20:43,919
pointer

568
00:20:43,919 --> 00:20:46,640
and what webrtc did is they provided the

569
00:20:46,640 --> 00:20:48,480
address of a specific structure in

570
00:20:48,480 --> 00:20:49,440
memory as

571
00:20:49,440 --> 00:20:51,760
the um quote network address which

572
00:20:51,760 --> 00:20:52,640
basically meant

573
00:20:52,640 --> 00:20:55,840
that this um pointer was in every single

574
00:20:55,840 --> 00:20:58,480
sctp packet that got sent which was

575
00:20:58,480 --> 00:21:00,240
pretty crazy that was a memory leak

576
00:21:00,240 --> 00:21:04,240
but what was more interesting was that

577
00:21:04,240 --> 00:21:06,400
you it they would also extract this

578
00:21:06,400 --> 00:21:08,400
pointer sometimes from an echo packet

579
00:21:08,400 --> 00:21:09,760
and make calls on it

580
00:21:09,760 --> 00:21:12,080
so this was also like a perfect bug that

581
00:21:12,080 --> 00:21:12,880
would allow you

582
00:21:12,880 --> 00:21:16,559
to set the instruction pointer

583
00:21:16,559 --> 00:21:18,559
so um yeah it was it was quite a good

584
00:21:18,559 --> 00:21:20,720
bug and it allowed me

585
00:21:20,720 --> 00:21:22,159
to both move the inspection pointer and

586
00:21:22,159 --> 00:21:24,880
also somewhat break aslr

587
00:21:24,880 --> 00:21:27,760
yeah so here's the bug if you're curious

588
00:21:27,760 --> 00:21:28,640
um

589
00:21:28,640 --> 00:21:32,080
this is basically a bad cast

590
00:21:32,080 --> 00:21:33,840
um they would take this thing right out

591
00:21:33,840 --> 00:21:36,080
of the network and cast it

592
00:21:36,080 --> 00:21:37,679
and what they should have done and they

593
00:21:37,679 --> 00:21:39,440
are doing now is they use a map

594
00:21:39,440 --> 00:21:41,120
so now they have an integer that

595
00:21:41,120 --> 00:21:43,440
represents the pointer in the packet

596
00:21:43,440 --> 00:21:45,200
and then they map it back to the right

597
00:21:45,200 --> 00:21:47,360
pointer

598
00:21:47,360 --> 00:21:50,559
so was this enough to break it alsr on

599
00:21:50,559 --> 00:21:52,080
android it turned out to be no

600
00:21:52,080 --> 00:21:54,000
um knowing one pointer on the heap won't

601
00:21:54,000 --> 00:21:55,679
tell you or anything other than the heap

602
00:21:55,679 --> 00:21:58,000
is which was uh too bad

603
00:21:58,000 --> 00:22:00,799
but i kept looking for more bugs so i

604
00:22:00,799 --> 00:22:02,400
looked more and i found this

605
00:22:02,400 --> 00:22:05,520
amuse after free bug in sctp i was

606
00:22:05,520 --> 00:22:06,799
interesting about it

607
00:22:06,799 --> 00:22:08,720
is it had actually already been reported

608
00:22:08,720 --> 00:22:10,240
by another googler

609
00:22:10,240 --> 00:22:13,760
mark woodrick but um it wasn't

610
00:22:13,760 --> 00:22:16,159
actually fixed in webrtc because um

611
00:22:16,159 --> 00:22:17,679
there was some communication problems

612
00:22:17,679 --> 00:22:18,960
between the projects

613
00:22:18,960 --> 00:22:22,000
um so it was still there

614
00:22:22,000 --> 00:22:25,360
and this bug is more of a subtle bug

615
00:22:25,360 --> 00:22:27,919
basically there's this error handling so

616
00:22:27,919 --> 00:22:29,840
if you send a really small packet

617
00:22:29,840 --> 00:22:32,640
it's supposed to not send anything back

618
00:22:32,640 --> 00:22:34,480
so it frees the potential act it's going

619
00:22:34,480 --> 00:22:36,720
to send and what it should have done

620
00:22:36,720 --> 00:22:40,000
is it returns and then

621
00:22:40,000 --> 00:22:42,000
handles the error but instead it would

622
00:22:42,000 --> 00:22:43,360
just free it and keep

623
00:22:43,360 --> 00:22:47,200
moving on and this would lead to

624
00:22:47,200 --> 00:22:49,600
um basically it's sending back this act

625
00:22:49,600 --> 00:22:50,880
packet that could be replaced with

626
00:22:50,880 --> 00:22:52,320
something else and this would usually

627
00:22:52,320 --> 00:22:53,120
send back

628
00:22:53,120 --> 00:22:56,080
a good hunk of memory in their in the

629
00:22:56,080 --> 00:22:57,520
packet

630
00:22:57,520 --> 00:23:00,480
and what i like about this bug is um the

631
00:23:00,480 --> 00:23:02,480
green is obviously the fix to it

632
00:23:02,480 --> 00:23:04,240
and this shows like how difficult and

633
00:23:04,240 --> 00:23:06,799
subtle it can be to rid your software of

634
00:23:06,799 --> 00:23:08,559
these sorts of bugs sometimes

635
00:23:08,559 --> 00:23:11,280
i mean who among us has not made a

636
00:23:11,280 --> 00:23:12,640
mistake like this

637
00:23:12,640 --> 00:23:15,360
before you know missing one return yeah

638
00:23:15,360 --> 00:23:16,240
unfortunately

639
00:23:16,240 --> 00:23:19,520
this one mistake basically made it so

640
00:23:19,520 --> 00:23:23,440
that one billion devices now had a

641
00:23:23,440 --> 00:23:25,120
remote bug on them

642
00:23:25,120 --> 00:23:28,080
so that um an attacker could compromise

643
00:23:28,080 --> 00:23:29,520
them without touching them

644
00:23:29,520 --> 00:23:32,240
so um yeah quite a small mistake for

645
00:23:32,240 --> 00:23:35,200
such a serious bug

646
00:23:35,200 --> 00:23:38,240
so i exploited this bug and

647
00:23:38,240 --> 00:23:40,480
um

648
00:23:41,520 --> 00:23:44,799
i made an exploit that worked

649
00:23:44,799 --> 00:23:46,799
on basically a generic android

650
00:23:46,799 --> 00:23:48,240
application

651
00:23:48,240 --> 00:23:51,520
and then i looked for what

652
00:23:51,520 --> 00:23:54,080
applications there are on google play

653
00:23:54,080 --> 00:23:57,039
that had this software in it

654
00:23:57,039 --> 00:23:59,440
and um there were 200 apps with more

655
00:23:59,440 --> 00:24:01,440
than 10 million installs

656
00:24:01,440 --> 00:24:04,799
that had webrtc in them that said most

657
00:24:04,799 --> 00:24:06,880
of them didn't have it as a practical

658
00:24:06,880 --> 00:24:09,279
attack surface part of what was fun

659
00:24:09,279 --> 00:24:10,240
about this

660
00:24:10,240 --> 00:24:13,840
was that i got to see

661
00:24:13,840 --> 00:24:16,400
every use of webrtc and there was a lot

662
00:24:16,400 --> 00:24:17,200
of them

663
00:24:17,200 --> 00:24:18,880
so one of them was browsers i didn't

664
00:24:18,880 --> 00:24:20,559
look at browsers just because well

665
00:24:20,559 --> 00:24:21,440
webrtc

666
00:24:21,440 --> 00:24:23,840
bugs do affect them they're not any more

667
00:24:23,840 --> 00:24:25,360
serious than any other bug they're not

668
00:24:25,360 --> 00:24:27,520
any more serious than say a javascript

669
00:24:27,520 --> 00:24:28,720
bug

670
00:24:28,720 --> 00:24:31,360
also webrtc is used for streaming a lot

671
00:24:31,360 --> 00:24:33,279
but that's not a good attack surface

672
00:24:33,279 --> 00:24:35,279
because typically when you stream

673
00:24:35,279 --> 00:24:38,320
you upload for example an mp4 file and

674
00:24:38,320 --> 00:24:40,080
then the server streams it to the other

675
00:24:40,080 --> 00:24:40,880
user

676
00:24:40,880 --> 00:24:43,200
so usually a user doesn't have control

677
00:24:43,200 --> 00:24:44,720
over what packets get set

678
00:24:44,720 --> 00:24:47,679
sent to appear there was also a lot of i

679
00:24:47,679 --> 00:24:48,559
thought this was kind of cool

680
00:24:48,559 --> 00:24:49,679
projections so

681
00:24:49,679 --> 00:24:53,840
what apps will do is they'll use webrtc

682
00:24:53,840 --> 00:24:55,520
um in the app and then you can link it

683
00:24:55,520 --> 00:24:57,520
to the browser and that'll allow you to

684
00:24:57,520 --> 00:25:00,000
use like accessibility features

685
00:25:00,000 --> 00:25:02,640
or basically blow up the screen so you

686
00:25:02,640 --> 00:25:04,080
can see it larger

687
00:25:04,080 --> 00:25:06,240
but that's not an attack surface really

688
00:25:06,240 --> 00:25:08,000
because you use

689
00:25:08,000 --> 00:25:09,679
you own both the thing you're projecting

690
00:25:09,679 --> 00:25:11,520
to and your phone so there's no reason

691
00:25:11,520 --> 00:25:12,960
that one would try to compromise the

692
00:25:12,960 --> 00:25:14,799
other usually

693
00:25:14,799 --> 00:25:16,640
and finally there was a lot of chat

694
00:25:16,640 --> 00:25:18,640
roulette and

695
00:25:18,640 --> 00:25:20,559
well that is a viable attack surface all

696
00:25:20,559 --> 00:25:22,240
these apps had the problem that there

697
00:25:22,240 --> 00:25:23,679
was no reasonable way

698
00:25:23,679 --> 00:25:26,720
for me to connect to a predictable user

699
00:25:26,720 --> 00:25:30,240
so i didn't look at them so

700
00:25:30,240 --> 00:25:32,880
after removing these there were 14 large

701
00:25:32,880 --> 00:25:35,679
apps that use webrtc

702
00:25:35,679 --> 00:25:38,480
and you can see these are all basically

703
00:25:38,480 --> 00:25:40,400
big messengers

704
00:25:40,400 --> 00:25:43,440
facebook duo hangouts viber

705
00:25:43,440 --> 00:25:46,799
slack signal all of these and

706
00:25:46,799 --> 00:25:50,320
i evaluated all of these for the exploit

707
00:25:50,320 --> 00:25:52,559
um i made minor modifications so they

708
00:25:52,559 --> 00:25:53,360
would work

709
00:25:53,360 --> 00:25:56,880
on each application and

710
00:25:56,880 --> 00:25:58,559
the exploit was fully remote on some and

711
00:25:58,559 --> 00:26:00,400
one click click on others

712
00:26:00,400 --> 00:26:02,320
um so these were the ones that actually

713
00:26:02,320 --> 00:26:04,880
worked on and you might wonder

714
00:26:04,880 --> 00:26:08,000
what about the others because this was a

715
00:26:08,000 --> 00:26:11,440
bug that used sctp all it would only

716
00:26:11,440 --> 00:26:13,440
work against applications

717
00:26:13,440 --> 00:26:16,400
that used http so a lot of these

718
00:26:16,400 --> 00:26:17,840
applications you know

719
00:26:17,840 --> 00:26:20,480
they would never open a data channel and

720
00:26:20,480 --> 00:26:21,760
some of them even had

721
00:26:21,760 --> 00:26:25,760
data channels hard disabled and webrtc

722
00:26:25,760 --> 00:26:27,600
so that meant that this specific x-play

723
00:26:27,600 --> 00:26:29,039
wouldn't work on them

724
00:26:29,039 --> 00:26:30,400
and do you fear some of these apps that

725
00:26:30,400 --> 00:26:32,559
it did work on also tried to disable

726
00:26:32,559 --> 00:26:35,120
data channels but they did it poorly but

727
00:26:35,120 --> 00:26:35,600
this is

728
00:26:35,600 --> 00:26:38,320
just one good example of the fact that

729
00:26:38,320 --> 00:26:40,559
reducing attack surface does reduce your

730
00:26:40,559 --> 00:26:42,480
vulnerability to exploit

731
00:26:42,480 --> 00:26:44,320
you know every feature that you're not

732
00:26:44,320 --> 00:26:46,400
using if you turn it off well it means

733
00:26:46,400 --> 00:26:47,520
you're less likely

734
00:26:47,520 --> 00:26:50,559
to be prone to a security bug in it so

735
00:26:50,559 --> 00:26:52,880
the 14 only six of them actually used

736
00:26:52,880 --> 00:26:54,159
this feature

737
00:26:54,159 --> 00:26:55,760
in a way that allowed me to use the bug

738
00:26:55,760 --> 00:26:57,760
in it

739
00:26:57,760 --> 00:27:00,720
what was also interesting was that the

740
00:27:00,720 --> 00:27:02,720
impact of the bug was different on

741
00:27:02,720 --> 00:27:03,679
different

742
00:27:03,679 --> 00:27:06,799
applications so four of them duo

743
00:27:06,799 --> 00:27:08,640
geochat signal and mocha were fully

744
00:27:08,640 --> 00:27:11,279
remote so if i use this exploit

745
00:27:11,279 --> 00:27:12,559
i didn't have to pick up the call at the

746
00:27:12,559 --> 00:27:14,559
other side it would just

747
00:27:14,559 --> 00:27:17,279
um compromise the device but then two of

748
00:27:17,279 --> 00:27:17,840
them

749
00:27:17,840 --> 00:27:20,000
were one click so these ones you had to

750
00:27:20,000 --> 00:27:21,440
pick up the phone

751
00:27:21,440 --> 00:27:23,679
for the exploit to actually work and

752
00:27:23,679 --> 00:27:26,000
they also required contacts so basically

753
00:27:26,000 --> 00:27:27,279
you could only phone a person who

754
00:27:27,279 --> 00:27:28,480
you were in their contact list in the

755
00:27:28,480 --> 00:27:30,799
first place so this made it like much

756
00:27:30,799 --> 00:27:31,679
less useful

757
00:27:31,679 --> 00:27:34,159
for an attacker the difference between

758
00:27:34,159 --> 00:27:35,760
being able to

759
00:27:35,760 --> 00:27:37,440
um compromise any device without

760
00:27:37,440 --> 00:27:38,799
touching it as opposed to having to have

761
00:27:38,799 --> 00:27:40,240
the person pick up the call and be their

762
00:27:40,240 --> 00:27:41,120
contacts

763
00:27:41,120 --> 00:27:44,799
um it's a very different level of effort

764
00:27:44,799 --> 00:27:46,320
so i'm going to show you some videos

765
00:27:46,320 --> 00:27:48,640
just to kind of give you an idea

766
00:27:48,640 --> 00:27:51,039
of how different this is so this is

767
00:27:51,039 --> 00:27:52,559
google duo

768
00:27:52,559 --> 00:27:54,880
and i'm exploiting the device on the

769
00:27:54,880 --> 00:27:56,320
right and you'll notice i don't touch

770
00:27:56,320 --> 00:27:57,440
the device at all

771
00:27:57,440 --> 00:27:59,200
so basically this is just an incoming

772
00:27:59,200 --> 00:28:02,080
call and you can see in my console

773
00:28:02,080 --> 00:28:05,120
um the exploit is working and

774
00:28:05,120 --> 00:28:06,799
this you know device could be in

775
00:28:06,799 --> 00:28:08,880
someone's purse or something

776
00:28:08,880 --> 00:28:12,080
it's um just getting to incoming calls

777
00:28:12,080 --> 00:28:15,039
and then as the as the phone rings the

778
00:28:15,039 --> 00:28:17,840
exploit is working

779
00:28:19,679 --> 00:28:22,159
and there we go there's a calc no user

780
00:28:22,159 --> 00:28:23,600
interaction so that that's

781
00:28:23,600 --> 00:28:24,960
that would be very valuable to an

782
00:28:24,960 --> 00:28:27,520
attacker to give a comparison

783
00:28:27,520 --> 00:28:29,440
this is a one-click exploit so this one

784
00:28:29,440 --> 00:28:32,480
you'll see i do have to touch the phone

785
00:28:32,480 --> 00:28:34,640
so i'm making the incoming call and you

786
00:28:34,640 --> 00:28:36,480
can see my finger comes in and i

787
00:28:36,480 --> 00:28:38,559
actually have to accept that call

788
00:28:38,559 --> 00:28:40,080
and then look at how long i have to stay

789
00:28:40,080 --> 00:28:42,840
connected for this exploit to actually

790
00:28:42,840 --> 00:28:45,840
work

791
00:29:07,279 --> 00:29:09,360
so there we go that was like 30 seconds

792
00:29:09,360 --> 00:29:10,559
so well i'm sure there's situations

793
00:29:10,559 --> 00:29:12,080
where an attacker might do

794
00:29:12,080 --> 00:29:16,159
this it's like a very different um deal

795
00:29:16,159 --> 00:29:18,480
so what i figured out is that the state

796
00:29:18,480 --> 00:29:20,080
machine design

797
00:29:20,080 --> 00:29:22,480
is very important it can be the

798
00:29:22,480 --> 00:29:23,760
difference between

799
00:29:23,760 --> 00:29:26,240
any problem of rtc being like extremely

800
00:29:26,240 --> 00:29:26,960
bad

801
00:29:26,960 --> 00:29:30,799
to being you know maybe a useful bug

802
00:29:30,799 --> 00:29:33,919
and i i read a lot of developer

803
00:29:33,919 --> 00:29:35,120
recommendations

804
00:29:35,120 --> 00:29:37,039
if anyone's interested interested i can

805
00:29:37,039 --> 00:29:38,880
send them links to it to other talks

806
00:29:38,880 --> 00:29:40,000
i've done specifically

807
00:29:40,000 --> 00:29:43,039
on how developers can handle this

808
00:29:43,039 --> 00:29:44,799
but basically it will determine whether

809
00:29:44,799 --> 00:29:47,120
you have fully remote or one-click bugs

810
00:29:47,120 --> 00:29:49,200
in your application

811
00:29:49,200 --> 00:29:51,840
so i decided i wanted to look more at

812
00:29:51,840 --> 00:29:52,399
this

813
00:29:52,399 --> 00:29:53,520
one thing that happened during this

814
00:29:53,520 --> 00:29:55,760
research which surprised me a lot

815
00:29:55,760 --> 00:29:58,399
is i accidentally found two bugs that

816
00:29:58,399 --> 00:29:59,840
caused calls to be completed without

817
00:29:59,840 --> 00:30:01,520
user interaction

818
00:30:01,520 --> 00:30:04,480
so basically on some of these um

819
00:30:04,480 --> 00:30:06,880
messaging applications i wanted to just

820
00:30:06,880 --> 00:30:08,240
turn on data channels

821
00:30:08,240 --> 00:30:10,080
and sometimes when i found ways to do

822
00:30:10,080 --> 00:30:12,480
this the call just connected

823
00:30:12,480 --> 00:30:14,320
and i could basically hear the sound on

824
00:30:14,320 --> 00:30:16,000
the other end even though that wasn't

825
00:30:16,000 --> 00:30:18,000
like even what i was trying to do

826
00:30:18,000 --> 00:30:20,399
and this especially after the group

827
00:30:20,399 --> 00:30:22,559
facetime bug made me think um

828
00:30:22,559 --> 00:30:25,200
you know do similar bugs exist i spent a

829
00:30:25,200 --> 00:30:28,640
lot of time looking into that

830
00:30:28,799 --> 00:30:31,440
so stepping back a bit video

831
00:30:31,440 --> 00:30:33,600
conferencing applications make implicit

832
00:30:33,600 --> 00:30:34,720
promises

833
00:30:34,720 --> 00:30:36,320
about when audio and video will be

834
00:30:36,320 --> 00:30:38,080
transmitted basically

835
00:30:38,080 --> 00:30:39,200
it should only be transmitted with

836
00:30:39,200 --> 00:30:42,000
consent so the person should have to

837
00:30:42,000 --> 00:30:43,360
answer the call

838
00:30:43,360 --> 00:30:46,480
to um transmit audio and video

839
00:30:46,480 --> 00:30:49,039
also they should only transmit it to the

840
00:30:49,039 --> 00:30:51,039
parties that are allowed

841
00:30:51,039 --> 00:30:53,279
and there's also other things for

842
00:30:53,279 --> 00:30:54,480
example

843
00:30:54,480 --> 00:30:56,640
you want to assume that say your mute

844
00:30:56,640 --> 00:30:58,960
button actually meets your conversation

845
00:30:58,960 --> 00:31:01,039
it doesn't just prevent the other side

846
00:31:01,039 --> 00:31:02,480
from

847
00:31:02,480 --> 00:31:04,960
um playing the packets you should

848
00:31:04,960 --> 00:31:06,240
actually start sending them

849
00:31:06,240 --> 00:31:08,480
stuff like that so i started to look for

850
00:31:08,480 --> 00:31:10,960
um audio video vulnerabilities

851
00:31:10,960 --> 00:31:14,960
that basically violated these rules

852
00:31:15,360 --> 00:31:16,559
and there were a few different classes i

853
00:31:16,559 --> 00:31:19,120
found so i was surprised i

854
00:31:19,120 --> 00:31:21,039
found i think six vulnerabilities like

855
00:31:21,039 --> 00:31:22,480
this total

856
00:31:22,480 --> 00:31:24,000
i remember when the group facetime bug

857
00:31:24,000 --> 00:31:25,919
came out i was pretty surprised but when

858
00:31:25,919 --> 00:31:27,519
i started looking into this i found that

859
00:31:27,519 --> 00:31:29,919
basically every application i look at

860
00:31:29,919 --> 00:31:32,799
has this problem and there's different

861
00:31:32,799 --> 00:31:34,159
ways that happens

862
00:31:34,159 --> 00:31:36,480
um signal messenger and facebook had

863
00:31:36,480 --> 00:31:38,399
similar vulnerabilities

864
00:31:38,399 --> 00:31:42,799
and their root cause is state confusion

865
00:31:42,799 --> 00:31:45,360
so for signal it was state confusion

866
00:31:45,360 --> 00:31:46,720
between color and kali

867
00:31:46,720 --> 00:31:48,799
and for facebook messenger it was

868
00:31:48,799 --> 00:31:49,919
actually a lack of check

869
00:31:49,919 --> 00:31:52,080
whether a call was in progress but it's

870
00:31:52,080 --> 00:31:54,159
the same the same idea

871
00:31:54,159 --> 00:31:55,519
there were messages that were sent

872
00:31:55,519 --> 00:31:57,600
between the device that were intended to

873
00:31:57,600 --> 00:31:58,080
be sent

874
00:31:58,080 --> 00:32:00,159
in one state and they were actually sent

875
00:32:00,159 --> 00:32:01,440
in another and this

876
00:32:01,440 --> 00:32:04,720
caused the call to be um connected and

877
00:32:04,720 --> 00:32:07,919
um they both allowed audio to be

878
00:32:07,919 --> 00:32:10,320
transmitted without consent

879
00:32:10,320 --> 00:32:12,159
so to explain how this works this is how

880
00:32:12,159 --> 00:32:14,000
signal would normally

881
00:32:14,000 --> 00:32:17,120
start a call so when you use webrtc

882
00:32:17,120 --> 00:32:19,440
you exchange what's called an offer and

883
00:32:19,440 --> 00:32:20,799
then you get an answer back

884
00:32:20,799 --> 00:32:22,159
and this includes things like your

885
00:32:22,159 --> 00:32:24,000
crypto keys and the protocols you want

886
00:32:24,000 --> 00:32:26,159
to use and that sort of thing

887
00:32:26,159 --> 00:32:27,840
and then you can exchange something

888
00:32:27,840 --> 00:32:29,519
called stp candidates

889
00:32:29,519 --> 00:32:31,919
and this is after the calling call with

890
00:32:31,919 --> 00:32:33,279
caller and callee have checked out the

891
00:32:33,279 --> 00:32:35,120
network configuration based on the offer

892
00:32:35,120 --> 00:32:36,240
and answer

893
00:32:36,240 --> 00:32:37,760
they'll come up with like candidate ways

894
00:32:37,760 --> 00:32:39,600
to connect and then they'll

895
00:32:39,600 --> 00:32:40,960
once you've exchanged these they'll

896
00:32:40,960 --> 00:32:43,360
connect and you'll have this pdp

897
00:32:43,360 --> 00:32:45,919
media connection and this is available

898
00:32:45,919 --> 00:32:47,039
but unless you

899
00:32:47,039 --> 00:32:49,120
add what's called a track um that's what

900
00:32:49,120 --> 00:32:51,200
enables the the camera or the microphone

901
00:32:51,200 --> 00:32:52,159
nothing will actually get

902
00:32:52,159 --> 00:32:54,960
sent and then what happens in signal is

903
00:32:54,960 --> 00:32:56,799
the colleague will press a button

904
00:32:56,799 --> 00:32:58,720
this will add the track on their side

905
00:32:58,720 --> 00:33:00,399
and they'll start transmitting video and

906
00:33:00,399 --> 00:33:01,919
then it will send a message back to the

907
00:33:01,919 --> 00:33:02,720
caller

908
00:33:02,720 --> 00:33:04,559
so that the caller knows to also turn on

909
00:33:04,559 --> 00:33:05,840
video

910
00:33:05,840 --> 00:33:07,279
and the mistake here was that you could

911
00:33:07,279 --> 00:33:08,880
send this in the other direction

912
00:33:08,880 --> 00:33:10,640
so you could set up send offer answer

913
00:33:10,640 --> 00:33:12,720
candidate set up the connection

914
00:33:12,720 --> 00:33:14,320
and send this message from the caller to

915
00:33:14,320 --> 00:33:15,840
callee and this would connect

916
00:33:15,840 --> 00:33:18,720
the call and then you could um hear the

917
00:33:18,720 --> 00:33:20,080
microphone

918
00:33:20,080 --> 00:33:23,120
and yeah that was really interesting

919
00:33:23,120 --> 00:33:26,799
and um yeah that was basically a pure

920
00:33:26,799 --> 00:33:28,320
logic vulnerability

921
00:33:28,320 --> 00:33:32,320
in the state machine of signal

922
00:33:32,320 --> 00:33:35,440
i also found similar vulnerabilities in

923
00:33:35,440 --> 00:33:36,880
chat and mocha and these are the ones

924
00:33:36,880 --> 00:33:38,960
that i found accidentally

925
00:33:38,960 --> 00:33:42,480
and um this one the root cause i think

926
00:33:42,480 --> 00:33:44,159
was that they didn't understand how

927
00:33:44,159 --> 00:33:46,240
offers and answers works worked and

928
00:33:46,240 --> 00:33:47,519
specifically that they could contain

929
00:33:47,519 --> 00:33:48,880
candidates

930
00:33:48,880 --> 00:33:50,720
and these ones allowed both audio and

931
00:33:50,720 --> 00:33:53,760
video to be transmitted without consent

932
00:33:53,760 --> 00:33:57,600
what happened here is that

933
00:33:57,600 --> 00:34:00,720
this is a server-mediated

934
00:34:00,720 --> 00:34:02,399
setup and actually all of the setups are

935
00:34:02,399 --> 00:34:04,000
server mediated but

936
00:34:04,000 --> 00:34:05,600
in this case it actually mattered

937
00:34:05,600 --> 00:34:07,519
because what they would do is they would

938
00:34:07,519 --> 00:34:08,719
send the offer

939
00:34:08,719 --> 00:34:10,399
which would be forwarded on by the

940
00:34:10,399 --> 00:34:12,000
server to the callee

941
00:34:12,000 --> 00:34:14,399
then the colleague would send an answer

942
00:34:14,399 --> 00:34:16,320
and then they'd exchange candidates

943
00:34:16,320 --> 00:34:17,839
but what the server would do is it would

944
00:34:17,839 --> 00:34:19,679
actually save the candidates

945
00:34:19,679 --> 00:34:21,359
and then when the callee accepted it

946
00:34:21,359 --> 00:34:22,960
would send the candidates in both

947
00:34:22,960 --> 00:34:24,879
directions and this is what would set up

948
00:34:24,879 --> 00:34:27,040
the call and then

949
00:34:27,040 --> 00:34:30,159
this would trigger an event in webrtc

950
00:34:30,159 --> 00:34:31,918
and that would enable the track and

951
00:34:31,918 --> 00:34:34,320
actually turn on the camera

952
00:34:34,320 --> 00:34:35,918
and the problem with this is that in

953
00:34:35,918 --> 00:34:37,520
webrtc you can actually put the

954
00:34:37,520 --> 00:34:39,520
candidates in the offer or the answer if

955
00:34:39,520 --> 00:34:40,800
you have them ready

956
00:34:40,800 --> 00:34:42,480
so that's what i did i put it in the

957
00:34:42,480 --> 00:34:44,719
offer i put it in the answer

958
00:34:44,719 --> 00:34:46,399
and then this would set up pdp media

959
00:34:46,399 --> 00:34:47,760
which would trigger the event and this

960
00:34:47,760 --> 00:34:49,040
would just cause the

961
00:34:49,040 --> 00:34:52,480
call to answer without any user

962
00:34:52,480 --> 00:34:53,679
interaction

963
00:34:53,679 --> 00:34:57,760
again this was a situation where

964
00:34:57,760 --> 00:34:58,640
i think this was just a pure

965
00:34:58,640 --> 00:35:01,359
misunderstanding of how weber tc worked

966
00:35:01,359 --> 00:35:04,240
and the result of it was that you could

967
00:35:04,240 --> 00:35:05,920
easily connect a call without user

968
00:35:05,920 --> 00:35:08,560
interaction

969
00:35:08,560 --> 00:35:11,280
and then i found another interesting

970
00:35:11,280 --> 00:35:13,200
logic vulnerability

971
00:35:13,200 --> 00:35:16,400
in google duo

972
00:35:16,400 --> 00:35:19,119
and this one was kind of unique because

973
00:35:19,119 --> 00:35:20,160
it was

974
00:35:20,160 --> 00:35:22,319
uh

975
00:35:23,200 --> 00:35:26,240
it was a race condition and what was fun

976
00:35:26,240 --> 00:35:26,880
about it is

977
00:35:26,880 --> 00:35:28,560
it allowed a few frames a video to be

978
00:35:28,560 --> 00:35:30,160
transmitted without

979
00:35:30,160 --> 00:35:32,640
consent so it could basically turn on

980
00:35:32,640 --> 00:35:34,400
the camera very briefly

981
00:35:34,400 --> 00:35:35,920
and get a few photos and it would turn

982
00:35:35,920 --> 00:35:38,160
off again but that's still you know a

983
00:35:38,160 --> 00:35:41,119
few more photos than i would like my

984
00:35:41,119 --> 00:35:41,760
device

985
00:35:41,760 --> 00:35:45,119
to transmit without my consent

986
00:35:45,119 --> 00:35:49,040
so um here's how this one worked

987
00:35:49,040 --> 00:35:52,720
um the normal setup would be

988
00:35:52,720 --> 00:35:55,520
you'd get the sdpp offer and then it

989
00:35:55,520 --> 00:35:57,520
would go through a series of calls and

990
00:35:57,520 --> 00:35:59,200
these dotted lines and represent that

991
00:35:59,200 --> 00:35:59,520
they're

992
00:35:59,520 --> 00:36:01,920
asynchronous calls they happen in

993
00:36:01,920 --> 00:36:02,960
different threads

994
00:36:02,960 --> 00:36:04,320
and basically what this would do is you

995
00:36:04,320 --> 00:36:05,760
get the offer and then it would do the

996
00:36:05,760 --> 00:36:07,359
set parameters which would

997
00:36:07,359 --> 00:36:10,160
disable video then you send back the

998
00:36:10,160 --> 00:36:11,040
answer

999
00:36:11,040 --> 00:36:12,640
and then you exchange the candidates

1000
00:36:12,640 --> 00:36:14,240
then the media is set up

1001
00:36:14,240 --> 00:36:17,440
and then the user would

1002
00:36:17,440 --> 00:36:18,640
press the button and then they'd set the

1003
00:36:18,640 --> 00:36:20,960
parameters back so

1004
00:36:20,960 --> 00:36:28,160
that audio and video get transmitted and

1005
00:36:29,520 --> 00:36:31,760
the problem here is since these are

1006
00:36:31,760 --> 00:36:33,520
asynchronous calls you know what if this

1007
00:36:33,520 --> 00:36:34,960
one that disables it

1008
00:36:34,960 --> 00:36:37,359
is really really slow well then what

1009
00:36:37,359 --> 00:36:38,000
happens

1010
00:36:38,000 --> 00:36:41,280
is this could actually happen after the

1011
00:36:41,280 --> 00:36:42,320
pdp

1012
00:36:42,320 --> 00:36:45,599
gets set up and in that case it would be

1013
00:36:45,599 --> 00:36:47,839
you know you start transmitting video

1014
00:36:47,839 --> 00:36:49,359
and then the thing that turns it off

1015
00:36:49,359 --> 00:36:50,000
happens

1016
00:36:50,000 --> 00:36:51,680
and by then you've already sent a few

1017
00:36:51,680 --> 00:36:53,920
frames and the way i actually did this

1018
00:36:53,920 --> 00:36:55,040
is i discovered

1019
00:36:55,040 --> 00:36:59,119
that um the sctp data channel

1020
00:36:59,119 --> 00:37:01,440
is actually on the same thread as this

1021
00:37:01,440 --> 00:37:02,640
set parameters

1022
00:37:02,640 --> 00:37:05,599
so basically um i would turn turn send

1023
00:37:05,599 --> 00:37:07,440
offers over and over turn the call on

1024
00:37:07,440 --> 00:37:08,240
and off

1025
00:37:08,240 --> 00:37:09,920
and have a huge data cue that would

1026
00:37:09,920 --> 00:37:11,760
basically slow down this thread a lot

1027
00:37:11,760 --> 00:37:14,960
so that these um images would get sent

1028
00:37:14,960 --> 00:37:17,280
so this was kind of a really fun

1029
00:37:17,280 --> 00:37:18,560
vulnerability

1030
00:37:18,560 --> 00:37:22,240
and the reason it happened in my opinion

1031
00:37:22,240 --> 00:37:22,720
was

1032
00:37:22,720 --> 00:37:25,839
um it's a lack of testing

1033
00:37:25,839 --> 00:37:27,200
of the state machine but also needless

1034
00:37:27,200 --> 00:37:29,119
threading um you know what

1035
00:37:29,119 --> 00:37:31,119
is did they really need to have two

1036
00:37:31,119 --> 00:37:32,240
threads here

1037
00:37:32,240 --> 00:37:35,760
for this one specific call um not really

1038
00:37:35,760 --> 00:37:38,160
they just made everything asynchronous

1039
00:37:38,160 --> 00:37:40,000
just in case it blocked and that ended

1040
00:37:40,000 --> 00:37:42,480
up causing a bug like this

1041
00:37:42,480 --> 00:37:46,000
um so this led to a number of security

1042
00:37:46,000 --> 00:37:47,760
improvements um i want to mention

1043
00:37:47,760 --> 00:37:48,880
i haven't been talking about them

1044
00:37:48,880 --> 00:37:51,599
individually but

1045
00:37:51,599 --> 00:37:53,119
every bug in this presentation has been

1046
00:37:53,119 --> 00:37:55,200
fixed um none of them are still

1047
00:37:55,200 --> 00:37:55,920
available to

1048
00:37:55,920 --> 00:38:00,079
attackers also signal and whatsapp

1049
00:38:00,079 --> 00:38:02,400
change their state machines to reduce

1050
00:38:02,400 --> 00:38:03,839
the attack surface and other

1051
00:38:03,839 --> 00:38:06,160
applications are considering this

1052
00:38:06,160 --> 00:38:07,839
so basically um signal did something

1053
00:38:07,839 --> 00:38:09,920
interesting they made it so

1054
00:38:09,920 --> 00:38:12,320
that if someone you know calls you it

1055
00:38:12,320 --> 00:38:13,520
works normally

1056
00:38:13,520 --> 00:38:15,839
but if someone you don't know calls you

1057
00:38:15,839 --> 00:38:17,200
you actually have to press an extra

1058
00:38:17,200 --> 00:38:19,599
button before it'll even set up the call

1059
00:38:19,599 --> 00:38:21,920
and do the ringing and that makes it a

1060
00:38:21,920 --> 00:38:22,720
lot

1061
00:38:22,720 --> 00:38:25,280
um more difficult for an attacker to use

1062
00:38:25,280 --> 00:38:26,720
this type of bug against you without

1063
00:38:26,720 --> 00:38:28,800
social engineering

1064
00:38:28,800 --> 00:38:32,160
now they have to be in your contact list

1065
00:38:32,160 --> 00:38:34,160
or get you to accept the call like that

1066
00:38:34,160 --> 00:38:37,440
before they can attack you

1067
00:38:37,440 --> 00:38:40,720
also um user http is in the process of

1068
00:38:40,720 --> 00:38:42,320
being replaced with more maintainable

1069
00:38:42,320 --> 00:38:43,359
code

1070
00:38:43,359 --> 00:38:45,599
so um once again they're reducing the

1071
00:38:45,599 --> 00:38:48,240
attack surface but also making it so

1072
00:38:48,240 --> 00:38:51,279
that um

1073
00:38:52,880 --> 00:38:55,440
there won't be issues with the gap

1074
00:38:55,440 --> 00:38:56,000
between

1075
00:38:56,000 --> 00:38:58,800
bugs being fixed in the main project and

1076
00:38:58,800 --> 00:39:01,760
getting it into a webrtc

1077
00:39:01,760 --> 00:39:03,920
and as a result of this several projects

1078
00:39:03,920 --> 00:39:05,520
have implemented or improved their

1079
00:39:05,520 --> 00:39:07,040
integrated fuzzing

1080
00:39:07,040 --> 00:39:10,160
and this is something i think is uh

1081
00:39:10,160 --> 00:39:13,520
really important i think that

1082
00:39:13,520 --> 00:39:14,800
if you can have fuzzing as a part of

1083
00:39:14,800 --> 00:39:16,960
your development life cycle

1084
00:39:16,960 --> 00:39:18,480
it really makes it a lot less likely

1085
00:39:18,480 --> 00:39:19,440
you're going to have serious

1086
00:39:19,440 --> 00:39:21,760
vulnerabilities in your software

1087
00:39:21,760 --> 00:39:23,200
and there's a lot of different ways to

1088
00:39:23,200 --> 00:39:26,160
do this to

1089
00:39:27,599 --> 00:39:29,280
to make it less likely that these bugs

1090
00:39:29,280 --> 00:39:31,680
exist

1091
00:39:31,760 --> 00:39:34,960
um so that's it um

1092
00:39:34,960 --> 00:39:37,200
one thing i learned from this research

1093
00:39:37,200 --> 00:39:39,119
that it is that attacker behavior is an

1094
00:39:39,119 --> 00:39:40,839
important consideration in targeting

1095
00:39:40,839 --> 00:39:42,000
research

1096
00:39:42,000 --> 00:39:45,119
when i started off all i had was

1097
00:39:45,119 --> 00:39:48,800
the table from zerodium

1098
00:39:48,800 --> 00:39:50,560
and based on you know the prices people

1099
00:39:50,560 --> 00:39:52,720
were paying for exploits um i tried to

1100
00:39:52,720 --> 00:39:53,040
do

1101
00:39:53,040 --> 00:39:55,280
the best guesses i could of what people

1102
00:39:55,280 --> 00:39:56,240
were doing

1103
00:39:56,240 --> 00:39:58,720
and in this research it turned out to be

1104
00:39:58,720 --> 00:39:59,920
fairly right

1105
00:39:59,920 --> 00:40:01,760
but that's not always the case um

1106
00:40:01,760 --> 00:40:02,880
sometimes you just have to look at

1107
00:40:02,880 --> 00:40:04,160
something

1108
00:40:04,160 --> 00:40:06,640
with limited information but then as

1109
00:40:06,640 --> 00:40:07,760
time went on

1110
00:40:07,760 --> 00:40:09,920
i developed more and more information

1111
00:40:09,920 --> 00:40:11,839
about what attackers were doing

1112
00:40:11,839 --> 00:40:14,800
and i was able to target my research

1113
00:40:14,800 --> 00:40:15,440
more

1114
00:40:15,440 --> 00:40:16,960
and i think that's something that's

1115
00:40:16,960 --> 00:40:18,800
really important to consider you know as

1116
00:40:18,800 --> 00:40:20,800
we do our research

1117
00:40:20,800 --> 00:40:22,800
you know how can we monitor attackers

1118
00:40:22,800 --> 00:40:24,319
and figure out what's useful

1119
00:40:24,319 --> 00:40:27,760
to them and focus our time on that

1120
00:40:27,760 --> 00:40:29,280
um and one thing another thing i think

1121
00:40:29,280 --> 00:40:31,040
is interesting is based on what we know

1122
00:40:31,040 --> 00:40:31,440
now

1123
00:40:31,440 --> 00:40:33,920
i think attackers were targeting video

1124
00:40:33,920 --> 00:40:35,520
conference saying like well well before

1125
00:40:35,520 --> 00:40:36,960
my research

1126
00:40:36,960 --> 00:40:38,640
and one question i have that i think

1127
00:40:38,640 --> 00:40:40,560
would be interesting to discuss is how

1128
00:40:40,560 --> 00:40:43,440
do we find other areas like this

1129
00:40:43,440 --> 00:40:45,280
how do we determine you know what

1130
00:40:45,280 --> 00:40:46,800
attackers are looking at

1131
00:40:46,800 --> 00:40:50,000
now and um

1132
00:40:50,000 --> 00:40:51,680
how can we make sure that we're also

1133
00:40:51,680 --> 00:40:53,839
doing research into these areas

1134
00:40:53,839 --> 00:40:56,400
and finally how can attack research be

1135
00:40:56,400 --> 00:40:57,839
used with word

1136
00:40:57,839 --> 00:41:00,640
attackers the sort of research we do at

1137
00:41:00,640 --> 00:41:01,440
woot

1138
00:41:01,440 --> 00:41:04,480
is um research on how attacks work but

1139
00:41:04,480 --> 00:41:06,160
it's also important to think about with

1140
00:41:06,160 --> 00:41:07,119
this knowledge

1141
00:41:07,119 --> 00:41:09,359
how do we use this to help the people

1142
00:41:09,359 --> 00:41:10,319
who are

1143
00:41:10,319 --> 00:41:13,359
targeted by attacks and how can we use

1144
00:41:13,359 --> 00:41:13,920
this

1145
00:41:13,920 --> 00:41:17,440
to make software more secure

1146
00:41:17,440 --> 00:41:20,720
so that's it um i'm hoping everyone can

1147
00:41:20,720 --> 00:41:22,480
uh think about these questions as we go

1148
00:41:22,480 --> 00:41:24,160
through the conference um

1149
00:41:24,160 --> 00:41:26,079
i know i'm supposed to end with you

1150
00:41:26,079 --> 00:41:27,599
asking me questions but i'm

1151
00:41:27,599 --> 00:41:29,359
unfortunately also asking

1152
00:41:29,359 --> 00:41:33,440
ending with me asking you questions um

1153
00:41:33,440 --> 00:41:36,240
but that's it and uh now i have time for

1154
00:41:36,240 --> 00:41:38,319
questions and discussions uh thanks a

1155
00:41:38,319 --> 00:41:40,880
lot everyone

1156
00:41:43,440 --> 00:41:46,079
awesome thanks very much for your uh for

1157
00:41:46,079 --> 00:41:48,400
your talk this was super inspiring

1158
00:41:48,400 --> 00:41:51,760
i have lots and lots of questions and i

1159
00:41:51,760 --> 00:41:53,520
see that people are starting to fill out

1160
00:41:53,520 --> 00:41:54,319
the q a

1161
00:41:54,319 --> 00:41:57,680
please use the q and a tab

1162
00:41:57,680 --> 00:42:01,200
to ask your questions and i want to

1163
00:42:01,200 --> 00:42:02,160
start with a

1164
00:42:02,160 --> 00:42:05,440
like a not an easy one but more

1165
00:42:05,440 --> 00:42:07,280
to get a bit more insight into your

1166
00:42:07,280 --> 00:42:09,440
process um assuming you're you have a

1167
00:42:09,440 --> 00:42:11,040
fuzzer and you let your fuzzy run

1168
00:42:11,040 --> 00:42:14,079
you find 200 crashes um how do you go

1169
00:42:14,079 --> 00:42:15,200
from crashes

1170
00:42:15,200 --> 00:42:18,160
to vulnerabilities to the side hey this

1171
00:42:18,160 --> 00:42:18,880
is actually

1172
00:42:18,880 --> 00:42:22,000
a a bug i want to invest more time on

1173
00:42:22,000 --> 00:42:23,280
because a lot of time it's not going to

1174
00:42:23,280 --> 00:42:23,599
be

1175
00:42:23,599 --> 00:42:26,000
easily exploitable but how do you get

1176
00:42:26,000 --> 00:42:27,760
that that feeling for which ones to

1177
00:42:27,760 --> 00:42:29,359
focus on more and

1178
00:42:29,359 --> 00:42:31,920
which ones to yeah just quickly report

1179
00:42:31,920 --> 00:42:34,160
and be done with it

1180
00:42:34,160 --> 00:42:36,480
yeah that's that's difficult so i do

1181
00:42:36,480 --> 00:42:37,680
feel like i'm obligated to go through

1182
00:42:37,680 --> 00:42:38,800
every crash

1183
00:42:38,800 --> 00:42:41,839
and i do i make a point of reporting

1184
00:42:41,839 --> 00:42:43,200
every one of them

1185
00:42:43,200 --> 00:42:46,160
and and we do have um in our internal

1186
00:42:46,160 --> 00:42:47,680
fuzzing tools and

1187
00:42:47,680 --> 00:42:49,680
i'm sorry buzzing tools have this tool

1188
00:42:49,680 --> 00:42:51,040
like classifiers

1189
00:42:51,040 --> 00:42:53,119
that will use for example the crash from

1190
00:42:53,119 --> 00:42:54,880
asan to say like oh

1191
00:42:54,880 --> 00:42:56,560
you know this one's used after free as

1192
00:42:56,560 --> 00:42:58,319
opposed to this one

1193
00:42:58,319 --> 00:43:00,960
is um null pointer but i would say other

1194
00:43:00,960 --> 00:43:02,720
than that like quite often it is just a

1195
00:43:02,720 --> 00:43:03,119
gut

1196
00:43:03,119 --> 00:43:07,200
feel or trying to exploit it because

1197
00:43:07,200 --> 00:43:09,040
as you saw on the rtp thing there were

1198
00:43:09,040 --> 00:43:10,640
like bugs that i thought were really

1199
00:43:10,640 --> 00:43:11,040
good

1200
00:43:11,040 --> 00:43:13,119
that didn't turn out and then ones that

1201
00:43:13,119 --> 00:43:14,560
did turn out to be very good

1202
00:43:14,560 --> 00:43:16,160
and i think you know you can tell a bit

1203
00:43:16,160 --> 00:43:17,920
from the crash dump but sometimes you do

1204
00:43:17,920 --> 00:43:20,800
just have to dig in and try things to

1205
00:43:20,800 --> 00:43:22,000
figure out

1206
00:43:22,000 --> 00:43:26,560
um yeah which ones are the best

1207
00:43:26,560 --> 00:43:31,119
yep that makes sense um rocco calvi asks

1208
00:43:31,119 --> 00:43:33,119
can oss fuzz now deliver these

1209
00:43:33,119 --> 00:43:34,800
vulnerabilities in these software

1210
00:43:34,800 --> 00:43:35,760
versions

1211
00:43:35,760 --> 00:43:37,839
um or does it still need more work like

1212
00:43:37,839 --> 00:43:39,760
is there automation for these kinds of

1213
00:43:39,760 --> 00:43:41,359
vulnerabilities or

1214
00:43:41,359 --> 00:43:45,040
is it uh yes yes sorry

1215
00:43:45,040 --> 00:43:47,920
can you say the question again sure it

1216
00:43:47,920 --> 00:43:48,880
was in a chat

1217
00:43:48,880 --> 00:43:52,560
um can oss first

1218
00:43:52,560 --> 00:43:54,800
now discover these vulnerabilities and

1219
00:43:54,800 --> 00:43:56,480
assume these types of vulnerabilities

1220
00:43:56,480 --> 00:43:58,800
in these software versions or does it

1221
00:43:58,800 --> 00:44:00,400
still need manual work

1222
00:44:00,400 --> 00:44:03,680
no way um oss fuzz and we also use

1223
00:44:03,680 --> 00:44:04,880
cluster fuzz

1224
00:44:04,880 --> 00:44:06,960
for chrome tools between the two and

1225
00:44:06,960 --> 00:44:08,560
they can discover these bugs now for

1226
00:44:08,560 --> 00:44:09,920
sure

1227
00:44:09,920 --> 00:44:14,079
okay cool um

1228
00:44:14,079 --> 00:44:16,800
roland asks i thought android aslr

1229
00:44:16,800 --> 00:44:18,720
entropy may not be so high

1230
00:44:18,720 --> 00:44:20,640
handling state machines in cnc plus plus

1231
00:44:20,640 --> 00:44:22,480
can be buggy for complex statements

1232
00:44:22,480 --> 00:44:24,160
probably tools are better to transform

1233
00:44:24,160 --> 00:44:26,079
the code rather than manual

1234
00:44:26,079 --> 00:44:27,359
i think that's an answer to your

1235
00:44:27,359 --> 00:44:29,280
question more than a question

1236
00:44:29,280 --> 00:44:32,800
yeah um so for aslr um i will

1237
00:44:32,800 --> 00:44:34,560
admit i absolutely walked into this

1238
00:44:34,560 --> 00:44:36,000
project thinking this and i was

1239
00:44:36,000 --> 00:44:38,960
wrong um i think aslr on android has a

1240
00:44:38,960 --> 00:44:41,040
bad rap but in the new versions they've

1241
00:44:41,040 --> 00:44:42,720
improved it a lot so if i'd use an old

1242
00:44:42,720 --> 00:44:44,720
version of android um it absolutely

1243
00:44:44,720 --> 00:44:46,160
would have been

1244
00:44:46,160 --> 00:44:48,480
a problem but the the newest versions

1245
00:44:48,480 --> 00:44:49,599
you know i spent a lot of time doing

1246
00:44:49,599 --> 00:44:51,440
things like histograms and

1247
00:44:51,440 --> 00:44:53,359
you know i asked around and and for for

1248
00:44:53,359 --> 00:44:55,440
the newer androids and the slr

1249
00:44:55,440 --> 00:44:59,839
um it is actually good um

1250
00:45:00,480 --> 00:45:04,000
yeah handling skate machines yeah

1251
00:45:04,000 --> 00:45:06,560
um anupam karya i think that's the the

1252
00:45:06,560 --> 00:45:07,760
question you wanted to ask

1253
00:45:07,760 --> 00:45:09,920
uh answer next and it's actually

1254
00:45:09,920 --> 00:45:11,440
actually the the same question that i

1255
00:45:11,440 --> 00:45:12,640
had as well or similar one

1256
00:45:12,640 --> 00:45:14,400
did you consider looking into stateful

1257
00:45:14,400 --> 00:45:16,400
fuzzing as i see some design issues you

1258
00:45:16,400 --> 00:45:16,960
mentioned

1259
00:45:16,960 --> 00:45:19,200
will that find more bugs or more

1260
00:45:19,200 --> 00:45:20,560
precisely like how do you connect

1261
00:45:20,560 --> 00:45:22,240
all these different states and multiple

1262
00:45:22,240 --> 00:45:23,839
messages especially when you go through

1263
00:45:23,839 --> 00:45:26,240
a very complex state machine

1264
00:45:26,240 --> 00:45:28,880
yeah yeah so a few thoughts i'm just

1265
00:45:28,880 --> 00:45:30,319
going to go back to roland's second

1266
00:45:30,319 --> 00:45:31,359
question here which

1267
00:45:31,359 --> 00:45:33,359
is for state machines it was rare to

1268
00:45:33,359 --> 00:45:34,640
find actually i did not find a single

1269
00:45:34,640 --> 00:45:36,000
state machine bug that was

1270
00:45:36,000 --> 00:45:38,640
specific to um the features of the

1271
00:45:38,640 --> 00:45:39,760
language

1272
00:45:39,760 --> 00:45:41,520
they were all higher level design issues

1273
00:45:41,520 --> 00:45:43,119
so it wasn't like you know someone wrote

1274
00:45:43,119 --> 00:45:44,480
c that did the wrong thing

1275
00:45:44,480 --> 00:45:46,560
it was that someone you know if you

1276
00:45:46,560 --> 00:45:48,079
wrote out the list of the steps

1277
00:45:48,079 --> 00:45:50,560
in order they did the wrong thing and

1278
00:45:50,560 --> 00:45:52,079
yet the way i did this

1279
00:45:52,079 --> 00:45:54,319
was so um signal was the easiest because

1280
00:45:54,319 --> 00:45:55,440
they actually have their state machine

1281
00:45:55,440 --> 00:45:56,480
documented

1282
00:45:56,480 --> 00:45:59,119
um but for the for the other ones um i

1283
00:45:59,119 --> 00:46:00,400
went through and figured out how their

1284
00:46:00,400 --> 00:46:02,160
state machines

1285
00:46:02,160 --> 00:46:05,520
worked since i'm on android

1286
00:46:05,520 --> 00:46:07,359
these are java natives i wrote a friday

1287
00:46:07,359 --> 00:46:08,720
script that would hook the java natives

1288
00:46:08,720 --> 00:46:09,920
and that would like print out the order

1289
00:46:09,920 --> 00:46:11,280
they were called in

1290
00:46:11,280 --> 00:46:15,200
and then like looking at the like

1291
00:46:15,200 --> 00:46:16,720
i'm delving this assembly a bit i could

1292
00:46:16,720 --> 00:46:18,400
figure out what was going on generally

1293
00:46:18,400 --> 00:46:19,839
and then kind of think about you know is

1294
00:46:19,839 --> 00:46:21,040
this sensible

1295
00:46:21,040 --> 00:46:24,480
and sometimes it wasn't um i've thought

1296
00:46:24,480 --> 00:46:25,760
about stateful

1297
00:46:25,760 --> 00:46:28,960
fuzzing um what i would say is what's

1298
00:46:28,960 --> 00:46:30,480
challenging about

1299
00:46:30,480 --> 00:46:33,839
these is i would say some of these

1300
00:46:33,839 --> 00:46:34,800
systems

1301
00:46:34,800 --> 00:46:37,839
aren't that reliable and

1302
00:46:37,839 --> 00:46:41,200
um it's also kind of difficult to detect

1303
00:46:41,200 --> 00:46:42,480
a situation

1304
00:46:42,480 --> 00:46:44,560
where you get what you want so i think

1305
00:46:44,560 --> 00:46:45,839
this would be something

1306
00:46:45,839 --> 00:46:48,960
if i had the source and i was able to

1307
00:46:48,960 --> 00:46:51,520
kind of extract the state machine

1308
00:46:51,520 --> 00:46:53,599
and have it not connected to all the

1309
00:46:53,599 --> 00:46:54,720
other things i think

1310
00:46:54,720 --> 00:46:57,440
this would be reasonable i think the

1311
00:46:57,440 --> 00:46:58,160
practical

1312
00:46:58,160 --> 00:47:00,240
aspects of doing this on an android

1313
00:47:00,240 --> 00:47:01,359
application where you don't have the

1314
00:47:01,359 --> 00:47:02,079
source

1315
00:47:02,079 --> 00:47:04,400
are overwhelming and i haven't been able

1316
00:47:04,400 --> 00:47:05,839
to think of

1317
00:47:05,839 --> 00:47:07,599
a good way to do it though i think you

1318
00:47:07,599 --> 00:47:10,000
know if that exists dude

1319
00:47:10,000 --> 00:47:14,079
i think it would be promising so maybe

1320
00:47:14,079 --> 00:47:16,000
um would it be fair to say instead of

1321
00:47:16,000 --> 00:47:18,000
doing or creating a father that does

1322
00:47:18,000 --> 00:47:18,640
stateful

1323
00:47:18,640 --> 00:47:21,680
fuzzing you focus more on individual

1324
00:47:21,680 --> 00:47:24,000
fuzzing stubs that set up the necessary

1325
00:47:24,000 --> 00:47:25,760
preconditions so you could then focus on

1326
00:47:25,760 --> 00:47:27,359
this particular aspect

1327
00:47:27,359 --> 00:47:30,000
and then you just tried multiple ones or

1328
00:47:30,000 --> 00:47:30,400
yeah

1329
00:47:30,400 --> 00:47:32,240
no no so i basically used the stubs just

1330
00:47:32,240 --> 00:47:33,680
to document the state machine

1331
00:47:33,680 --> 00:47:36,079
so i i went through i drew a diagram and

1332
00:47:36,079 --> 00:47:37,599
then i just looked at the diagram and

1333
00:47:37,599 --> 00:47:39,040
thought like well what if i do this what

1334
00:47:39,040 --> 00:47:40,319
if i do that

1335
00:47:40,319 --> 00:47:41,520
so so what i would say most of the

1336
00:47:41,520 --> 00:47:43,680
problems were like obvious enough if you

1337
00:47:43,680 --> 00:47:45,040
just understood what the state machine

1338
00:47:45,040 --> 00:47:45,920
did

1339
00:47:45,920 --> 00:47:47,359
okay fair enough yeah i think that makes

1340
00:47:47,359 --> 00:47:50,640
a lot of sense um

1341
00:47:50,880 --> 00:47:54,160
has a question we get a lot uh will

1342
00:47:54,160 --> 00:47:56,079
switching to memory save languages like

1343
00:47:56,079 --> 00:47:57,200
rust prevent these kind of

1344
00:47:57,200 --> 00:47:58,240
vulnerabilities

1345
00:47:58,240 --> 00:47:59,920
making apps that you see seem to be

1346
00:47:59,920 --> 00:48:01,520
calling for more very basic barriers

1347
00:48:01,520 --> 00:48:02,400
that can lead to bad

1348
00:48:02,400 --> 00:48:05,599
abilities yeah and my answer to this is

1349
00:48:05,599 --> 00:48:07,119
like yes in my dreams

1350
00:48:07,119 --> 00:48:10,160
um you know

1351
00:48:10,880 --> 00:48:12,160
like i've looked into this a bit and

1352
00:48:12,160 --> 00:48:13,599
you've talked to people to do this a bit

1353
00:48:13,599 --> 00:48:15,359
and i think that the reality is everyone

1354
00:48:15,359 --> 00:48:17,440
would love to have webrtc and rust

1355
00:48:17,440 --> 00:48:18,800
the practical aspects of making it

1356
00:48:18,800 --> 00:48:21,839
happen are difficult

1357
00:48:22,000 --> 00:48:25,040
but yeah i i do think that this this

1358
00:48:25,040 --> 00:48:26,960
would be good um although this is

1359
00:48:26,960 --> 00:48:29,839
possibly some of the most performance

1360
00:48:29,839 --> 00:48:31,920
intensive

1361
00:48:31,920 --> 00:48:35,599
code on the web so um

1362
00:48:35,599 --> 00:48:37,280
performance is a big issue here which is

1363
00:48:37,280 --> 00:48:39,760
currently why it's done in c

1364
00:48:39,760 --> 00:48:41,760
but yeah you know who knows what will

1365
00:48:41,760 --> 00:48:43,040
happen in the future

1366
00:48:43,040 --> 00:48:45,839
um hopefully it will be webrtc and rust

1367
00:48:45,839 --> 00:48:48,720
so we don't have these problems anymore

1368
00:48:48,720 --> 00:48:51,680
yep that'll be cool um how much work is

1369
00:48:51,680 --> 00:48:53,520
building a testing harness

1370
00:48:53,520 --> 00:48:55,920
uh asksville pierce and how important

1371
00:48:55,920 --> 00:48:58,800
are good harnesses

1372
00:48:58,880 --> 00:49:02,079
yeah so test harnesses are insane um for

1373
00:49:02,079 --> 00:49:03,440
the statefulness because like they

1374
00:49:03,440 --> 00:49:05,359
weren't full harnesses it was fast but

1375
00:49:05,359 --> 00:49:09,040
for facetime and for whatsapp this was

1376
00:49:09,040 --> 00:49:10,559
months and months of work

1377
00:49:10,559 --> 00:49:13,119
um so yeah it was very time intensive

1378
00:49:13,119 --> 00:49:15,040
and it's very very important

1379
00:49:15,040 --> 00:49:17,920
um i think that especially if you have

1380
00:49:17,920 --> 00:49:19,920
this sort of software internally i think

1381
00:49:19,920 --> 00:49:21,520
it's very important that every vendor

1382
00:49:21,520 --> 00:49:22,079
has the

1383
00:49:22,079 --> 00:49:24,640
ability to have a harness that will

1384
00:49:24,640 --> 00:49:26,000
replay packets

1385
00:49:26,000 --> 00:49:27,599
that they can use for testing and i'm

1386
00:49:27,599 --> 00:49:29,200
surprised by the number of vendors who

1387
00:49:29,200 --> 00:49:29,680
don't

1388
00:49:29,680 --> 00:49:32,319
so it's a lot of time it's a lot less

1389
00:49:32,319 --> 00:49:34,240
time if you have the source but i think

1390
00:49:34,240 --> 00:49:35,760
like it's extremely valuable for

1391
00:49:35,760 --> 00:49:38,640
security and everyone who produces this

1392
00:49:38,640 --> 00:49:41,839
type of software should have one

1393
00:49:41,920 --> 00:49:44,960
yeah i think yeah that makes sense

1394
00:49:44,960 --> 00:49:48,000
cool um i had one more question i mean

1395
00:49:48,000 --> 00:49:50,480
you mentioned in one of the slides that

1396
00:49:50,480 --> 00:49:52,640
hey i just scanned all

1397
00:49:52,640 --> 00:49:55,440
android apps i i wish we were mortals

1398
00:49:55,440 --> 00:49:58,240
had such capabilities as well um

1399
00:49:58,240 --> 00:50:01,599
but in a in and you checked for usage of

1400
00:50:01,599 --> 00:50:03,520
certain api and libraries

1401
00:50:03,520 --> 00:50:07,200
yeah in a recent project we looked at um

1402
00:50:07,200 --> 00:50:10,400
android apps over time and measured like

1403
00:50:10,400 --> 00:50:12,079
what what kind of native libraries do

1404
00:50:12,079 --> 00:50:14,000
they include and

1405
00:50:14,000 --> 00:50:15,680
as it turns out this is a really really

1406
00:50:15,680 --> 00:50:17,599
hard problem because the native library

1407
00:50:17,599 --> 00:50:18,079
is not

1408
00:50:18,079 --> 00:50:22,640
named openssl dash 1.0.1.f

1409
00:50:22,640 --> 00:50:25,440
but like main library.so or something

1410
00:50:25,440 --> 00:50:26,400
like that so you need to

1411
00:50:26,400 --> 00:50:28,800
infer what kind of what the library name

1412
00:50:28,800 --> 00:50:30,880
is first and oftentimes people

1413
00:50:30,880 --> 00:50:33,119
modify the libraries do you have some

1414
00:50:33,119 --> 00:50:34,400
internal tools there

1415
00:50:34,400 --> 00:50:36,720
or how do you infer these these library

1416
00:50:36,720 --> 00:50:39,359
versions and dependencies and and so on

1417
00:50:39,359 --> 00:50:41,280
yeah so this was a very frustrating

1418
00:50:41,280 --> 00:50:43,119
thing so what we have is an internal

1419
00:50:43,119 --> 00:50:44,960
tool that can basically

1420
00:50:44,960 --> 00:50:47,920
grep every library in every android

1421
00:50:47,920 --> 00:50:48,960
application

1422
00:50:48,960 --> 00:50:51,440
so the way i did this is i searched for

1423
00:50:51,440 --> 00:50:53,040
basically a string

1424
00:50:53,040 --> 00:50:55,440
in the user sctp library and i

1425
00:50:55,440 --> 00:50:57,040
considered that good enough

1426
00:50:57,040 --> 00:51:00,000
but um this was actually a problem that

1427
00:51:00,000 --> 00:51:02,319
i spent some time on because

1428
00:51:02,319 --> 00:51:03,839
before i did this project there is

1429
00:51:03,839 --> 00:51:06,079
actually no way to

1430
00:51:06,079 --> 00:51:08,400
determine the version of the webrtc

1431
00:51:08,400 --> 00:51:09,280
library

1432
00:51:09,280 --> 00:51:12,480
um and now we've at least changed um

1433
00:51:12,480 --> 00:51:14,640
webrtc so that going forward there'll be

1434
00:51:14,640 --> 00:51:16,240
a token so there should be like a

1435
00:51:16,240 --> 00:51:17,359
specific thing you can grab

1436
00:51:17,359 --> 00:51:18,720
for with the version afterwards to

1437
00:51:18,720 --> 00:51:20,160
figure out if you have webrtc and what

1438
00:51:20,160 --> 00:51:21,119
version it is

1439
00:51:21,119 --> 00:51:22,880
but yeah unfortunately we didn't have

1440
00:51:22,880 --> 00:51:24,960
that at the time so yeah this

1441
00:51:24,960 --> 00:51:27,119
the scanning was somewhat incomplete

1442
00:51:27,119 --> 00:51:28,720
based on a collection of strings that i

1443
00:51:28,720 --> 00:51:31,280
thought was like a good representation

1444
00:51:31,280 --> 00:51:33,520
strings or byte sequences or instruction

1445
00:51:33,520 --> 00:51:34,640
sequences

1446
00:51:34,640 --> 00:51:36,400
um yeah they're actually like like

1447
00:51:36,400 --> 00:51:38,240
strings like log entries

1448
00:51:38,240 --> 00:51:41,680
okay yeah um we we ended up doing

1449
00:51:41,680 --> 00:51:44,960
like uh a matching on on strings as well

1450
00:51:44,960 --> 00:51:46,000
but also

1451
00:51:46,000 --> 00:51:49,200
just just exported uh symbols uh

1452
00:51:49,200 --> 00:51:50,720
and a couple of other very simple

1453
00:51:50,720 --> 00:51:51,839
features that we could use for

1454
00:51:51,839 --> 00:51:52,720
clustering

1455
00:51:52,720 --> 00:51:54,319
and it turns out like people are really

1456
00:51:54,319 --> 00:51:56,079
really slow at updating

1457
00:51:56,079 --> 00:51:58,640
um libraries it often takes two plus

1458
00:51:58,640 --> 00:51:59,599
years

1459
00:51:59,599 --> 00:52:03,599
for people to or to update and modify

1460
00:52:03,599 --> 00:52:05,680
these these native libraries

1461
00:52:05,680 --> 00:52:08,880
um now that you knew

1462
00:52:08,880 --> 00:52:10,720
that there was a native library how did

1463
00:52:10,720 --> 00:52:13,040
you decide what kind of functionality

1464
00:52:13,040 --> 00:52:14,160
was used

1465
00:52:14,160 --> 00:52:15,440
because you have to cross this this

1466
00:52:15,440 --> 00:52:18,160
language barrier from sea land to

1467
00:52:18,160 --> 00:52:22,559
uh the android art dolly gland

1468
00:52:22,559 --> 00:52:26,480
yeah this um was another situation where

1469
00:52:26,480 --> 00:52:29,280
i got out that python script that hooked

1470
00:52:29,280 --> 00:52:31,119
the natives in webrtc

1471
00:52:31,119 --> 00:52:32,400
and then i was able to just like run the

1472
00:52:32,400 --> 00:52:34,079
app and it would print out in what order

1473
00:52:34,079 --> 00:52:36,160
they got called

1474
00:52:36,160 --> 00:52:38,319
cool that makes a lot of sense yep we

1475
00:52:38,319 --> 00:52:40,559
tried to do something similar cool

1476
00:52:40,559 --> 00:52:45,359
um any more questions folks

1477
00:52:45,359 --> 00:52:47,839
amazing work by the way that's super

1478
00:52:47,839 --> 00:52:50,160
cool

1479
00:52:54,160 --> 00:52:57,920
if not thank you very much for coming

1480
00:52:57,920 --> 00:52:59,920
thanks so much for having me super cool

1481
00:52:59,920 --> 00:53:01,920
um will you stick around for a bit so

1482
00:53:01,920 --> 00:53:03,680
people can actually ask more questions

1483
00:53:03,680 --> 00:53:05,760
and you can just just type and answer

1484
00:53:05,760 --> 00:53:06,480
them

1485
00:53:06,480 --> 00:53:08,800
absolutely if you're if you're around so

1486
00:53:08,800 --> 00:53:10,079
that would be a good

1487
00:53:10,079 --> 00:53:12,960
good way we have a short break and i

1488
00:53:12,960 --> 00:53:13,440
think

1489
00:53:13,440 --> 00:53:19,359
bonfey is chairing the the next session

