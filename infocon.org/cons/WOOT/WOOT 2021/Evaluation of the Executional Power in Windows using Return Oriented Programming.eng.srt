1
00:00:00,240 --> 00:00:03,439
uh as a second talk we have

2
00:00:03,439 --> 00:00:07,759
uh ricardo rodriguez

3
00:00:08,320 --> 00:00:12,080
awesome yes i am yes um

4
00:00:12,080 --> 00:00:15,120
and it's the on the evaluation of the

5
00:00:15,120 --> 00:00:18,560
executional power in windows using

6
00:00:18,560 --> 00:00:20,240
return or in the programming or

7
00:00:20,240 --> 00:00:23,199
programming we can see your slides they

8
00:00:23,199 --> 00:00:23,760
are not

9
00:00:23,760 --> 00:00:27,119
full screen yet okay now i'm putting in

10
00:00:27,119 --> 00:00:28,840
for the screen now it's in the first

11
00:00:28,840 --> 00:00:30,720
screen

12
00:00:30,720 --> 00:00:33,760
well i see what i still see the bars

13
00:00:33,760 --> 00:00:36,960
okay yes second i think then i have to

14
00:00:36,960 --> 00:00:40,079
share the full screen right

15
00:00:40,079 --> 00:00:44,320
i don't know i'm not a mac user

16
00:00:44,320 --> 00:00:47,840
but that may be the case ah let me try

17
00:00:47,840 --> 00:00:48,879
it

18
00:00:48,879 --> 00:00:51,440
on firefox it actually stuck to the

19
00:00:51,440 --> 00:00:53,280
window

20
00:00:53,280 --> 00:00:56,079
now i see your full screen cool yeah

21
00:00:56,079 --> 00:00:57,760
therefore

22
00:00:57,760 --> 00:01:01,199
so please ricardo take it away okay so

23
00:01:01,199 --> 00:01:03,039
thank you for the introduction uh

24
00:01:03,039 --> 00:01:05,519
i'm going to present this uh this paper

25
00:01:05,519 --> 00:01:06,560
evolution of the

26
00:01:06,560 --> 00:01:08,400
execution are powering windows using the

27
00:01:08,400 --> 00:01:10,159
written oriented program

28
00:01:10,159 --> 00:01:12,000
so i'm going to follow this outline for

29
00:01:12,000 --> 00:01:14,000
the talk okay

30
00:01:14,000 --> 00:01:16,799
so moving to the introduction uh we are

31
00:01:16,799 --> 00:01:18,479
talking about territory into farming

32
00:01:18,479 --> 00:01:19,680
attacks which

33
00:01:19,680 --> 00:01:22,159
are a type of uh cultural use techniques

34
00:01:22,159 --> 00:01:22,799
introduced

35
00:01:22,799 --> 00:01:27,040
in 2007 by sachan this kind of attacks

36
00:01:27,040 --> 00:01:28,320
allow us to

37
00:01:28,320 --> 00:01:30,479
allow another side to hijack the control

38
00:01:30,479 --> 00:01:32,240
flow of habitual problems without

39
00:01:32,240 --> 00:01:36,560
injecting the code the

40
00:01:36,880 --> 00:01:39,280
these attacks are known to be to

41
00:01:39,280 --> 00:01:40,400
incomplete

42
00:01:40,400 --> 00:01:43,439
this means that we are able to perform

43
00:01:43,439 --> 00:01:45,200
any kind of arbitrary computation with

44
00:01:45,200 --> 00:01:46,159
them

45
00:01:46,159 --> 00:01:48,159
so first some terminology that we need

46
00:01:48,159 --> 00:01:50,000
to to understand

47
00:01:50,000 --> 00:01:53,439
we have rob gatchetts which are a

48
00:01:53,439 --> 00:01:55,439
code snippets which are already present

49
00:01:55,439 --> 00:01:58,240
in the victim's memory space

50
00:01:58,240 --> 00:02:00,320
and end in a assembly station that

51
00:02:00,320 --> 00:02:01,759
change the control flow of the

52
00:02:01,759 --> 00:02:03,360
of the program for instance a red

53
00:02:03,360 --> 00:02:05,840
instruction in intel assembly

54
00:02:05,840 --> 00:02:08,800
or a jumping instruction and then we

55
00:02:08,800 --> 00:02:10,639
have also a rope chain which is just a

56
00:02:10,639 --> 00:02:11,280
chain of

57
00:02:11,280 --> 00:02:14,560
rope catkins so the idea of rope is that

58
00:02:14,560 --> 00:02:17,440
if we have this kind of coat in the in

59
00:02:17,440 --> 00:02:18,640
the memory

60
00:02:18,640 --> 00:02:21,760
that can be a legitimate instruction if

61
00:02:21,760 --> 00:02:22,080
we

62
00:02:22,080 --> 00:02:23,440
start to read this solution in the

63
00:02:23,440 --> 00:02:25,280
second byte instead of the first byte

64
00:02:25,280 --> 00:02:26,959
then we have a chain totally

65
00:02:26,959 --> 00:02:29,680
uh the behave and the meaning of the

66
00:02:29,680 --> 00:02:30,560
structure

67
00:02:30,560 --> 00:02:33,760
okay you see now we have here a

68
00:02:33,760 --> 00:02:37,200
a movement to an address

69
00:02:37,200 --> 00:02:38,879
of the value of a register and then we

70
00:02:38,879 --> 00:02:40,879
have a written instruction

71
00:02:40,879 --> 00:02:44,160
so if the adversary is able to

72
00:02:44,160 --> 00:02:47,360
write the values into the stack then

73
00:02:47,360 --> 00:02:50,239
that versa can for instance insert these

74
00:02:50,239 --> 00:02:51,680
values which are just

75
00:02:51,680 --> 00:02:55,040
instructions sorry memory addresses and

76
00:02:55,040 --> 00:02:58,560
some arbitrary values uh if you see the

77
00:02:58,560 --> 00:02:59,440
uh

78
00:02:59,440 --> 00:03:01,440
the memory addresses then i have put

79
00:03:01,440 --> 00:03:03,040
here some examples of

80
00:03:03,040 --> 00:03:06,879
possible rope gadgets okay

81
00:03:06,879 --> 00:03:10,000
at the end of this objective without the

82
00:03:10,000 --> 00:03:12,080
drop chain then the attacker will obtain

83
00:03:12,080 --> 00:03:15,440
this as a result of the execution so

84
00:03:15,440 --> 00:03:17,840
he is able to obtain the values that he

85
00:03:17,840 --> 00:03:18,800
wants on the

86
00:03:18,800 --> 00:03:21,840
on the registers well

87
00:03:21,840 --> 00:03:24,000
uh one question that still remains open

88
00:03:24,000 --> 00:03:25,680
is how much is the executional power of

89
00:03:25,680 --> 00:03:27,760
an adversary so to answer this

90
00:03:27,760 --> 00:03:31,599
question we have reframe it into other

91
00:03:31,599 --> 00:03:33,280
questions

92
00:03:33,280 --> 00:03:35,760
which are these ones so how often uh we

93
00:03:35,760 --> 00:03:36,640
can find

94
00:03:36,640 --> 00:03:39,760
rob cadets in any uh

95
00:03:39,760 --> 00:03:44,080
real world program and is it possible to

96
00:03:44,080 --> 00:03:46,879
change gadgets for any kind of dessert

97
00:03:46,879 --> 00:03:48,720
computation so can we have

98
00:03:48,720 --> 00:03:51,519
enough gadgets to emulate any kind of

99
00:03:51,519 --> 00:03:54,000
algorithm

100
00:03:54,000 --> 00:03:56,959
as an adversary model we have thought in

101
00:03:56,959 --> 00:03:57,840
a

102
00:03:57,840 --> 00:04:00,879
in a system which has not

103
00:04:00,879 --> 00:04:03,519
addressed space like randomization of in

104
00:04:03,519 --> 00:04:04,720
case that

105
00:04:04,720 --> 00:04:07,360
it is deployed there is a break for that

106
00:04:07,360 --> 00:04:08,799
the thing happens with the control for

107
00:04:08,799 --> 00:04:10,400
integrity protection mechanism

108
00:04:10,400 --> 00:04:13,280
mechanism so they are disabled or they

109
00:04:13,280 --> 00:04:13,599
are

110
00:04:13,599 --> 00:04:15,439
there is a break for this kind of

111
00:04:15,439 --> 00:04:16,880
protection

112
00:04:16,880 --> 00:04:20,160
and of course the adversary knows

113
00:04:20,160 --> 00:04:22,400
the content of the memory address space

114
00:04:22,400 --> 00:04:25,359
of the leaking program

115
00:04:26,240 --> 00:04:28,639
as contributions of this work we have

116
00:04:28,639 --> 00:04:30,400
defined a two incomplete virtual

117
00:04:30,400 --> 00:04:31,040
language

118
00:04:31,040 --> 00:04:34,560
which we have named roblanc and now we

119
00:04:34,560 --> 00:04:36,639
have used this language to quantify the

120
00:04:36,639 --> 00:04:38,639
executional power of an adversary

121
00:04:38,639 --> 00:04:41,680
in windows 7 and windows 10

122
00:04:41,680 --> 00:04:45,040
in both 52 and 64-bit

123
00:04:45,040 --> 00:04:49,120
versions as a side product of this

124
00:04:49,120 --> 00:04:51,440
research we have developed a software

125
00:04:51,440 --> 00:04:52,560
tool which is named

126
00:04:52,560 --> 00:04:56,240
rob3 that takes as input

127
00:04:56,240 --> 00:04:59,280
a set of program files uh a set of

128
00:04:59,280 --> 00:05:00,560
binary files

129
00:05:00,560 --> 00:05:03,440
and a rob chain which is described with

130
00:05:03,440 --> 00:05:05,840
the roblox operations

131
00:05:05,840 --> 00:05:08,800
and as a result as an output this tool

132
00:05:08,800 --> 00:05:09,520
is going to

133
00:05:09,520 --> 00:05:12,400
return you the rope cabinets that make

134
00:05:12,400 --> 00:05:12,800
up

135
00:05:12,800 --> 00:05:14,560
such a proper chain that you have

136
00:05:14,560 --> 00:05:16,960
defined

137
00:05:16,960 --> 00:05:19,039
so let me introduce you the virtual

138
00:05:19,039 --> 00:05:20,080
language that

139
00:05:20,080 --> 00:05:24,320
we have defined

140
00:05:24,320 --> 00:05:26,400
this language is composed by a set of

141
00:05:26,400 --> 00:05:27,520
virtual operations

142
00:05:27,520 --> 00:05:29,840
these virtual operations at the end are

143
00:05:29,840 --> 00:05:32,000
just

144
00:05:32,000 --> 00:05:33,759
taking sequence of instructions of the

145
00:05:33,759 --> 00:05:35,199
general problem

146
00:05:35,199 --> 00:05:37,039
confirmed by rob gadgets and are

147
00:05:37,039 --> 00:05:41,440
simulating the operation of interest

148
00:05:41,440 --> 00:05:44,080
these operations are following the intel

149
00:05:44,080 --> 00:05:45,600
assembly notation so

150
00:05:45,600 --> 00:05:48,800
we are there to the intellect a

151
00:05:48,800 --> 00:05:51,680
52-bit syntax okay so we have first the

152
00:05:51,680 --> 00:05:53,840
destiny and then we have

153
00:05:53,840 --> 00:05:57,119
the source registers

154
00:05:57,520 --> 00:05:59,199
regarding the operations that we have in

155
00:05:59,199 --> 00:06:01,440
this language we have the arithmetic

156
00:06:01,440 --> 00:06:03,919
operations we have the assignment

157
00:06:03,919 --> 00:06:05,280
operations to assign

158
00:06:05,280 --> 00:06:07,759
values to variables in this case

159
00:06:07,759 --> 00:06:08,479
variables

160
00:06:08,479 --> 00:06:11,600
are logical registers of the cpu

161
00:06:11,600 --> 00:06:14,319
are mainly logical registers then we

162
00:06:14,319 --> 00:06:14,960
have also

163
00:06:14,960 --> 00:06:17,360
the reference operations which are

164
00:06:17,360 --> 00:06:19,039
useful to write or read

165
00:06:19,039 --> 00:06:22,319
memory addresses we have also logical

166
00:06:22,319 --> 00:06:24,000
operations

167
00:06:24,000 --> 00:06:27,199
the typical typical ones that can be

168
00:06:27,199 --> 00:06:28,720
simplified to

169
00:06:28,720 --> 00:06:32,080
a smaller set just using the

170
00:06:32,080 --> 00:06:34,560
the morgan laws and we have also

171
00:06:34,560 --> 00:06:35,360
branching

172
00:06:35,360 --> 00:06:37,039
operations so we have conditional and

173
00:06:37,039 --> 00:06:38,639
unconditional branch

174
00:06:38,639 --> 00:06:41,120
operations conditional branching

175
00:06:41,120 --> 00:06:41,919
operations

176
00:06:41,919 --> 00:06:44,960
are a little more tricky that i will

177
00:06:44,960 --> 00:06:46,840
explain

178
00:06:46,840 --> 00:06:49,599
afterwards

179
00:06:49,599 --> 00:06:52,000
so i just forgive some examples these

180
00:06:52,000 --> 00:06:53,039
are the

181
00:06:53,039 --> 00:06:55,680
kind of arithmetic operations that we

182
00:06:55,680 --> 00:06:56,960
have so we have the additions

183
00:06:56,960 --> 00:06:58,479
restriction and delegation

184
00:06:58,479 --> 00:07:02,240
okay and these are just some ways to

185
00:07:02,240 --> 00:07:05,520
to simulate this behavior with arab

186
00:07:05,520 --> 00:07:06,479
gadget

187
00:07:06,479 --> 00:07:08,719
okay

188
00:07:10,000 --> 00:07:12,720
note that for instance here we have the

189
00:07:12,720 --> 00:07:13,759
negation of the

190
00:07:13,759 --> 00:07:17,120
destiny register and can be either

191
00:07:17,120 --> 00:07:19,599
simulated with the combination of these

192
00:07:19,599 --> 00:07:21,120
rope gadgets plus

193
00:07:21,120 --> 00:07:24,160
this other virtual operation or uh with

194
00:07:24,160 --> 00:07:26,160
the dirty separation

195
00:07:26,160 --> 00:07:30,000
otherwise so regarding assignment

196
00:07:30,000 --> 00:07:31,840
operations we have the move and the load

197
00:07:31,840 --> 00:07:33,919
constant so to

198
00:07:33,919 --> 00:07:37,360
set values in particular

199
00:07:37,360 --> 00:07:41,759
registers or particular memory addresses

200
00:07:41,759 --> 00:07:44,639
and regarding the reference operations

201
00:07:44,639 --> 00:07:46,879
we have to load and store typical

202
00:07:46,879 --> 00:07:49,599
glutamate store operations and logical

203
00:07:49,599 --> 00:07:53,520
operations that i have committed before

204
00:07:54,720 --> 00:07:58,080
so regarding the conditional branching

205
00:07:58,080 --> 00:08:02,080
these are very tricky

206
00:08:02,080 --> 00:08:04,639
uh operations so we need first to get

207
00:08:04,639 --> 00:08:06,000
the current flag

208
00:08:06,000 --> 00:08:08,000
in uh the value of the of the current

209
00:08:08,000 --> 00:08:10,080
flag in uh

210
00:08:10,080 --> 00:08:13,680
in a registry and then we need to

211
00:08:13,680 --> 00:08:17,759
get that registry and uh

212
00:08:18,160 --> 00:08:21,120
add to them at least to it sorry some

213
00:08:21,120 --> 00:08:23,280
delta value okay this delta value

214
00:08:23,280 --> 00:08:25,520
is means the the value that we want to

215
00:08:25,520 --> 00:08:26,720
to jump

216
00:08:26,720 --> 00:08:28,479
in case that the current flag is set to

217
00:08:28,479 --> 00:08:30,319
one or otherwise it

218
00:08:30,319 --> 00:08:33,039
will be the delta value in the

219
00:08:33,039 --> 00:08:35,039
assignment will be set to zero to zero

220
00:08:35,039 --> 00:08:35,919
which means that

221
00:08:35,919 --> 00:08:39,200
it's not going to to make the jump okay

222
00:08:39,200 --> 00:08:42,719
and finally we will need also the uh uh

223
00:08:42,719 --> 00:08:45,519
the addition of that value to the stack

224
00:08:45,519 --> 00:08:46,399
pointer

225
00:08:46,399 --> 00:08:49,680
so for emulating uh simulating

226
00:08:49,680 --> 00:08:53,279
uh conditional branching we will need

227
00:08:53,279 --> 00:08:56,320
these three uh

228
00:08:56,320 --> 00:09:00,240
uh operations uh follow it okay

229
00:09:00,240 --> 00:09:03,360
uh by the way i forgot to say that for

230
00:09:03,360 --> 00:09:05,200
the get carry flag operation we will

231
00:09:05,200 --> 00:09:06,399
need also to add the

232
00:09:06,399 --> 00:09:08,480
comparison operations which means the

233
00:09:08,480 --> 00:09:10,000
the depression that he wants to

234
00:09:10,000 --> 00:09:12,959
to perform uh as comparison we have only

235
00:09:12,959 --> 00:09:14,320
considered an

236
00:09:14,320 --> 00:09:15,839
equal composition or less than

237
00:09:15,839 --> 00:09:17,920
comparison because we disconnect and

238
00:09:17,920 --> 00:09:18,720
with this

239
00:09:18,720 --> 00:09:22,240
combined we can do many other

240
00:09:22,240 --> 00:09:24,560
comparison operations and then

241
00:09:24,560 --> 00:09:25,760
conditional branching is

242
00:09:25,760 --> 00:09:28,000
very straightforward so we can just load

243
00:09:28,000 --> 00:09:29,360
the the delta value

244
00:09:29,360 --> 00:09:32,800
in the in the rest in the std registry

245
00:09:32,800 --> 00:09:33,760
and then

246
00:09:33,760 --> 00:09:38,240
add this register to the start pointer

247
00:09:38,480 --> 00:09:41,839
so just as some remarks on this

248
00:09:41,839 --> 00:09:43,760
we have at the moment this is a

249
00:09:43,760 --> 00:09:46,399
non-exhaustive list of propagates

250
00:09:46,399 --> 00:09:49,839
you can extend this very easily with the

251
00:09:49,839 --> 00:09:51,360
with the tool

252
00:09:51,360 --> 00:09:54,000
uh as i have commented before some of

253
00:09:54,000 --> 00:09:55,040
these operations are

254
00:09:55,040 --> 00:09:57,360
virtual opera arbitrary operations while

255
00:09:57,360 --> 00:09:58,320
there are directly

256
00:09:58,320 --> 00:10:00,640
robocar kits so we are combining both in

257
00:10:00,640 --> 00:10:02,240
order to obtain the

258
00:10:02,240 --> 00:10:05,519
uh the behavior uh we have assumed that

259
00:10:05,519 --> 00:10:07,680
there is no harmful side effects

260
00:10:07,680 --> 00:10:09,200
between the sequences of virtual

261
00:10:09,200 --> 00:10:11,120
operations

262
00:10:11,120 --> 00:10:13,120
uh we have also proved that this

263
00:10:13,120 --> 00:10:15,200
language is turing complete

264
00:10:15,200 --> 00:10:17,680
you can find the demonstration in the in

265
00:10:17,680 --> 00:10:19,839
the paper in which we have simulated a

266
00:10:19,839 --> 00:10:20,800
classical

267
00:10:20,800 --> 00:10:24,720
tuning machine with the operations

268
00:10:24,720 --> 00:10:27,200
recording the tool drop three it was

269
00:10:27,200 --> 00:10:28,720
developed in python and

270
00:10:28,720 --> 00:10:30,720
relies on capstone to disassemble the

271
00:10:30,720 --> 00:10:32,240
input files uh

272
00:10:32,240 --> 00:10:34,399
the idea is that this tool already

273
00:10:34,399 --> 00:10:36,320
supports the virtual operations that

274
00:10:36,320 --> 00:10:37,120
make up the

275
00:10:37,120 --> 00:10:40,240
the raw plank language the operations in

276
00:10:40,240 --> 00:10:42,640
fact are defined using the gml

277
00:10:42,640 --> 00:10:46,000
syntax so you can define your own

278
00:10:46,000 --> 00:10:48,560
operations either as a single or some

279
00:10:48,560 --> 00:10:50,640
multiple journal files

280
00:10:50,640 --> 00:10:54,000
you can specify also register mask or

281
00:10:54,000 --> 00:10:56,720
a specifically logical cpu registers and

282
00:10:56,720 --> 00:10:58,079
you can also set the

283
00:10:58,079 --> 00:11:02,160
arbitrary values for uh searching for uh

284
00:11:02,160 --> 00:11:05,920
rope objects the tool uses a similar

285
00:11:05,920 --> 00:11:07,440
approach to the galileo or

286
00:11:07,440 --> 00:11:11,760
the hourly mod such

287
00:11:12,000 --> 00:11:13,920
just to illustrate an example of this

288
00:11:13,920 --> 00:11:15,279
file so

289
00:11:15,279 --> 00:11:18,000
here we have the definition of the how

290
00:11:18,000 --> 00:11:18,560
is the at

291
00:11:18,560 --> 00:11:21,440
position okay and here we have the

292
00:11:21,440 --> 00:11:23,360
definition of the node operation and

293
00:11:23,360 --> 00:11:27,120
if you see we can also set a

294
00:11:27,120 --> 00:11:29,040
particular values to some of the

295
00:11:29,040 --> 00:11:31,599
registers

296
00:11:33,680 --> 00:11:35,600
so one of the main contribution of this

297
00:11:35,600 --> 00:11:37,200
tool is that allow us to

298
00:11:37,200 --> 00:11:40,880
construct a rock chain being specified

299
00:11:40,880 --> 00:11:43,120
by virtual operations

300
00:11:43,120 --> 00:11:44,720
so the search algorithm works in this

301
00:11:44,720 --> 00:11:46,880
way first it will find all the

302
00:11:46,880 --> 00:11:49,440
categories that are complying with the

303
00:11:49,440 --> 00:11:52,800
operation in the in the finding chain

304
00:11:52,800 --> 00:11:55,839
then it will it will build a tree

305
00:11:55,839 --> 00:11:57,360
structure considering the order of

306
00:11:57,360 --> 00:11:58,160
operations

307
00:11:58,160 --> 00:11:59,920
and then it's going to resolve the data

308
00:11:59,920 --> 00:12:01,839
dependencies by uh

309
00:12:01,839 --> 00:12:04,160
traversing the the three recursive

310
00:12:04,160 --> 00:12:05,279
records simply

311
00:12:05,279 --> 00:12:07,680
in depth first order with bad tracking

312
00:12:07,680 --> 00:12:09,519
okay at the moment we are working to

313
00:12:09,519 --> 00:12:10,000
eliminate

314
00:12:10,000 --> 00:12:12,079
the side effects in the chin so let me

315
00:12:12,079 --> 00:12:13,839
illustrate with an example

316
00:12:13,839 --> 00:12:16,160
imagine that you want to obtain the you

317
00:12:16,160 --> 00:12:18,160
want to to have this chain this drop

318
00:12:18,160 --> 00:12:19,920
chain okay so you want first to load the

319
00:12:19,920 --> 00:12:22,320
constant in a register then to negate in

320
00:12:22,320 --> 00:12:24,720
another register and then to uh

321
00:12:24,720 --> 00:12:27,279
do an an operation between both the

322
00:12:27,279 --> 00:12:29,440
registers

323
00:12:29,440 --> 00:12:31,519
so the tool will uh look for the rob

324
00:12:31,519 --> 00:12:33,680
cartels that fulfill each one of these

325
00:12:33,680 --> 00:12:36,079
operations okay and then it will start

326
00:12:36,079 --> 00:12:37,680
to build the tree

327
00:12:37,680 --> 00:12:41,920
so it will start with the first not yet

328
00:12:41,920 --> 00:12:44,800
i have only shown the in the future i am

329
00:12:44,800 --> 00:12:46,000
only showing the

330
00:12:46,000 --> 00:12:49,200
the first okay uh it will assign

331
00:12:49,200 --> 00:12:52,720
rec 1 to edx register and then you will

332
00:12:52,720 --> 00:12:54,000
move to the second

333
00:12:54,000 --> 00:12:56,560
uh to the second instruction to the

334
00:12:56,560 --> 00:12:57,519
second operation

335
00:12:57,519 --> 00:13:00,399
okay it will start with the first

336
00:13:00,399 --> 00:13:01,600
instruction of the

337
00:13:01,600 --> 00:13:03,839
the one that has been found in this case

338
00:13:03,839 --> 00:13:04,880
is this a neck

339
00:13:04,880 --> 00:13:08,399
ebx so evx will be assigned to correct2

340
00:13:08,399 --> 00:13:10,560
all right then it will move to the next

341
00:13:10,560 --> 00:13:11,920
one and then

342
00:13:11,920 --> 00:13:15,360
he will start with this and ecx eax

343
00:13:15,360 --> 00:13:17,920
in this case it has to fulfill that the

344
00:13:17,920 --> 00:13:18,800
ecx

345
00:13:18,800 --> 00:13:20,720
is the value assignment to rec 2 but

346
00:13:20,720 --> 00:13:23,440
it's not because it was edvx so

347
00:13:23,440 --> 00:13:26,399
it will backtrack and then it will try

348
00:13:26,399 --> 00:13:27,519
with the next one

349
00:13:27,519 --> 00:13:30,880
which again is ecx so it will not be

350
00:13:30,880 --> 00:13:31,519
fulfilled

351
00:13:31,519 --> 00:13:34,079
so it will backtrack and then backtrack

352
00:13:34,079 --> 00:13:34,639
again

353
00:13:34,639 --> 00:13:37,040
and go to the next okay so in this case

354
00:13:37,040 --> 00:13:38,000
it will get the

355
00:13:38,000 --> 00:13:41,040
neck ecx right so it will assign their

356
00:13:41,040 --> 00:13:44,399
ecx register to rec2 and once

357
00:13:44,399 --> 00:13:46,880
it has been done it will go to the next

358
00:13:46,880 --> 00:13:48,880
operation and in this case

359
00:13:48,880 --> 00:13:52,639
uh with the first uh

360
00:13:52,639 --> 00:13:55,680
robocatjet uh if you see eax

361
00:13:55,680 --> 00:13:59,920
is not which is edx

362
00:13:59,920 --> 00:14:01,760
so it will move to the next one and then

363
00:14:01,760 --> 00:14:03,680
it will it will finish

364
00:14:03,680 --> 00:14:06,800
okay and it will return the this

365
00:14:06,800 --> 00:14:10,319
rough chain to the user

366
00:14:10,639 --> 00:14:13,920
so this tool is released on the gpl

367
00:14:13,920 --> 00:14:15,760
version 3 license it accepts many

368
00:14:15,760 --> 00:14:17,680
parameters such as the maximum

369
00:14:17,680 --> 00:14:19,120
byte size that you want for the raw

370
00:14:19,120 --> 00:14:20,959
gadgets or the

371
00:14:20,959 --> 00:14:22,720
the final solutions that you want to

372
00:14:22,720 --> 00:14:25,440
consider and it's also a python 3

373
00:14:25,440 --> 00:14:27,120
library so you can integrate into your

374
00:14:27,120 --> 00:14:28,639
workflow analysis

375
00:14:28,639 --> 00:14:31,519
very very very easy so you can check on

376
00:14:31,519 --> 00:14:32,720
the on the github

377
00:14:32,720 --> 00:14:37,600
of our group to to get the tool

378
00:14:37,600 --> 00:14:40,720
regarding the valuation so we have get

379
00:14:40,720 --> 00:14:44,079
a subset of the dlls which are contained

380
00:14:44,079 --> 00:14:47,120
in the non-dll system object uh

381
00:14:47,120 --> 00:14:48,880
in fact we have only considered the ones

382
00:14:48,880 --> 00:14:51,440
that are common uh between all the

383
00:14:51,440 --> 00:14:53,040
versions of windows considered for the

384
00:14:53,040 --> 00:14:54,560
spreading edition okay

385
00:14:54,560 --> 00:14:56,880
we have taken windows 10 and windows 7

386
00:14:56,880 --> 00:14:59,440
in both 52-bit and 64-bit

387
00:14:59,440 --> 00:15:01,839
version so here you have the specific

388
00:15:01,839 --> 00:15:03,040
versions

389
00:15:03,040 --> 00:15:05,120
i'm going to start now with you uh the

390
00:15:05,120 --> 00:15:06,320
plots of the

391
00:15:06,320 --> 00:15:09,440
of the experimentation these are heat

392
00:15:09,440 --> 00:15:10,240
maps

393
00:15:10,240 --> 00:15:12,240
in which we are showing the percentage

394
00:15:12,240 --> 00:15:13,680
of occurrence of

395
00:15:13,680 --> 00:15:17,519
each operation within each dll uh

396
00:15:17,519 --> 00:15:20,399
these heat maps are annotated so we are

397
00:15:20,399 --> 00:15:22,480
showing the number of results

398
00:15:22,480 --> 00:15:24,399
in case that we have a number of results

399
00:15:24,399 --> 00:15:27,839
which is greater than the

400
00:15:28,480 --> 00:15:31,600
10 thousand we are just assuming the

401
00:15:31,600 --> 00:15:33,920
most significant digit and the order

402
00:15:33,920 --> 00:15:36,399
okay and the dlls has been sorted by the

403
00:15:36,399 --> 00:15:39,040
byte size

404
00:15:39,120 --> 00:15:41,040
rather than the configuration of robs3

405
00:15:41,040 --> 00:15:43,120
so we have this

406
00:15:43,120 --> 00:15:47,920
configuration a maximum of a 10 byte

407
00:15:47,920 --> 00:15:51,040
only red as final destruction and

408
00:15:51,040 --> 00:15:53,519
we have only counted only once that

409
00:15:53,519 --> 00:15:54,320
updates

410
00:15:54,320 --> 00:15:57,360
that are made up of the same sequence of

411
00:15:57,360 --> 00:15:58,560
instructions

412
00:15:58,560 --> 00:15:59,839
and we have only considered the

413
00:15:59,839 --> 00:16:01,920
definitions that the reply

414
00:16:01,920 --> 00:16:05,360
operation that i have shown you

415
00:16:07,279 --> 00:16:09,519
uh um we have also considered some

416
00:16:09,519 --> 00:16:10,800
additional operations so we have

417
00:16:10,800 --> 00:16:11,680
extended

418
00:16:11,680 --> 00:16:15,199
uh the native operations uh

419
00:16:15,199 --> 00:16:17,920
to these ones uh if you see this is just

420
00:16:17,920 --> 00:16:19,759
uh for uh

421
00:16:19,759 --> 00:16:22,560
getting more results on the on the on

422
00:16:22,560 --> 00:16:24,639
the conditional branching so it's adding

423
00:16:24,639 --> 00:16:29,120
specific values to to the stack point

424
00:16:29,120 --> 00:16:31,759
so these are the results that i'm going

425
00:16:31,759 --> 00:16:32,720
to go

426
00:16:32,720 --> 00:16:36,560
first to the discussion

427
00:16:36,560 --> 00:16:39,759
you can see the uh the graphs on the

428
00:16:39,759 --> 00:16:42,560
on the paper uh we have found that

429
00:16:42,560 --> 00:16:44,240
branching virtual operations are the

430
00:16:44,240 --> 00:16:45,120
least frequent

431
00:16:45,120 --> 00:16:48,079
in both architectures and in fact there

432
00:16:48,079 --> 00:16:49,519
is no resource for unconditional

433
00:16:49,519 --> 00:16:52,160
branching in 64-bit systems

434
00:16:52,160 --> 00:16:54,000
um regarding the other virtual

435
00:16:54,000 --> 00:16:56,079
operations the results are very

436
00:16:56,079 --> 00:16:58,399
diverse and of course i saw their

437
00:16:58,399 --> 00:16:59,279
outsource

438
00:16:59,279 --> 00:17:01,360
claim in the literature the larger the

439
00:17:01,360 --> 00:17:05,839
dll the greater the number of results

440
00:17:07,039 --> 00:17:08,640
we have also observed that the number of

441
00:17:08,640 --> 00:17:10,319
virtual operations in windows 10 is

442
00:17:10,319 --> 00:17:12,240
always greater than in windows 7

443
00:17:12,240 --> 00:17:15,280
and in 64 bit than in 32 bits

444
00:17:15,280 --> 00:17:18,720
this also can be motivated because

445
00:17:18,720 --> 00:17:23,039
the difference is in the size of the dns

446
00:17:23,039 --> 00:17:25,439
uh let me also note here one thing is

447
00:17:25,439 --> 00:17:27,039
that regarding the

448
00:17:27,039 --> 00:17:30,320
resource in 52 bit

449
00:17:30,320 --> 00:17:33,440
environments this kind of

450
00:17:33,440 --> 00:17:35,520
instructions can have references to

451
00:17:35,520 --> 00:17:36,720
memory addresses that

452
00:17:36,720 --> 00:17:39,919
are randomized by a eslr ir

453
00:17:39,919 --> 00:17:42,559
and we have only considered each dll

454
00:17:42,559 --> 00:17:44,640
with its base address so

455
00:17:44,640 --> 00:17:46,880
these results are highly dependent on

456
00:17:46,880 --> 00:17:48,720
the base addresses of the dealers

457
00:17:48,720 --> 00:17:50,640
and that can change when the base

458
00:17:50,640 --> 00:17:52,080
addresses are different this is not

459
00:17:52,080 --> 00:17:54,160
happening in 64-bit

460
00:17:54,160 --> 00:17:56,559
architecture because of the new others

461
00:17:56,559 --> 00:17:57,840
in the form of

462
00:17:57,840 --> 00:18:00,240
of intel that was included with this

463
00:18:00,240 --> 00:18:01,280
with this abstract

464
00:18:01,280 --> 00:18:05,360
relative repo

465
00:18:05,600 --> 00:18:08,000
so one question that remains here is to

466
00:18:08,000 --> 00:18:09,200
to see

467
00:18:09,200 --> 00:18:12,960
how aslr

468
00:18:12,960 --> 00:18:14,559
can affect the prevalence of proper

469
00:18:14,559 --> 00:18:19,120
captives on the 52-bit window systems

470
00:18:19,600 --> 00:18:22,960
so as we have seen we have very limited

471
00:18:22,960 --> 00:18:23,679
results from

472
00:18:23,679 --> 00:18:25,919
conditional and conditional operations

473
00:18:25,919 --> 00:18:27,679
and these kind of operations are

474
00:18:27,679 --> 00:18:29,679
mandatory to simulate the classical tool

475
00:18:29,679 --> 00:18:30,880
machines so

476
00:18:30,880 --> 00:18:33,120
we have an idea is to relax the data

477
00:18:33,120 --> 00:18:34,480
dependency constraints

478
00:18:34,480 --> 00:18:36,720
on certain operations just by adding

479
00:18:36,720 --> 00:18:38,080
some assignment

480
00:18:38,080 --> 00:18:39,919
intermediate assigning operations for

481
00:18:39,919 --> 00:18:41,760
instance with a move

482
00:18:41,760 --> 00:18:46,880
this will increase our probability of

483
00:18:46,880 --> 00:18:49,840
finding some conditional unconditional

484
00:18:49,840 --> 00:18:51,039
positions

485
00:18:51,039 --> 00:18:54,080
of course this will also add more length

486
00:18:54,080 --> 00:18:55,600
to the drop chain

487
00:18:55,600 --> 00:18:59,360
and also can occur more is more likely

488
00:18:59,360 --> 00:19:00,160
to occur

489
00:19:00,160 --> 00:19:02,960
more side effects for instance consider

490
00:19:02,960 --> 00:19:03,919
that we have this

491
00:19:03,919 --> 00:19:07,440
as originally defined so if we

492
00:19:07,440 --> 00:19:10,400
add this intermediate register so we are

493
00:19:10,400 --> 00:19:12,480
increasing the probability of

494
00:19:12,480 --> 00:19:15,679
having more more results

495
00:19:15,679 --> 00:19:18,799
okay we have done this with the

496
00:19:18,799 --> 00:19:22,080
the operations that are involved in the

497
00:19:22,080 --> 00:19:23,520
in the conditional and conditional

498
00:19:23,520 --> 00:19:25,760
positions

499
00:19:25,760 --> 00:19:28,480
doing this we have found that well we

500
00:19:28,480 --> 00:19:29,200
have some

501
00:19:29,200 --> 00:19:32,640
few results on the

502
00:19:32,880 --> 00:19:35,919
architecture okay for windows 10 and

503
00:19:35,919 --> 00:19:38,160
still we have no results for windows 7

504
00:19:38,160 --> 00:19:39,840
in 64-bit

505
00:19:39,840 --> 00:19:43,120
architectures in addition we have also

506
00:19:43,120 --> 00:19:46,640
more resource on 32-bit systems

507
00:19:46,640 --> 00:19:49,600
this also demonstrates that if the

508
00:19:49,600 --> 00:19:50,480
adversary

509
00:19:50,480 --> 00:19:53,120
tries to make a sophisticated link of

510
00:19:53,120 --> 00:19:55,360
other operations it will increase

511
00:19:55,360 --> 00:19:57,760
the probability of simulating any kind

512
00:19:57,760 --> 00:19:59,200
of operation

513
00:19:59,200 --> 00:20:02,240
when it's not found directly okay and

514
00:20:02,240 --> 00:20:04,960
this kind of extension is very

515
00:20:04,960 --> 00:20:09,679
simple uh using our tool route 3.

516
00:20:09,679 --> 00:20:11,679
so regarding the related world there are

517
00:20:11,679 --> 00:20:12,880
a lot of

518
00:20:12,880 --> 00:20:14,240
tools focused on detection and

519
00:20:14,240 --> 00:20:16,080
mitigation of rob attacks

520
00:20:16,080 --> 00:20:18,000
some other tools focused on offensive

521
00:20:18,000 --> 00:20:21,280
technology and few tools on the

522
00:20:21,280 --> 00:20:23,280
generation analysis of blockchain

523
00:20:23,280 --> 00:20:26,159
our approach is a simple solution so

524
00:20:26,159 --> 00:20:28,080
it's just make a

525
00:20:28,080 --> 00:20:31,280
backtracking hiring and it

526
00:20:31,280 --> 00:20:34,480
also add this language

527
00:20:34,480 --> 00:20:37,200
that allow us to define semantically

528
00:20:37,200 --> 00:20:39,280
equivalent operations very easily

529
00:20:39,280 --> 00:20:42,240
and also allow us to automatically

530
00:20:42,240 --> 00:20:43,760
generate the rope change

531
00:20:43,760 --> 00:20:48,159
uh define it with this approach so

532
00:20:48,159 --> 00:20:50,799
moving to the conclusions

533
00:20:50,799 --> 00:20:52,400
well we have defined this virtual

534
00:20:52,400 --> 00:20:54,000
language that

535
00:20:54,000 --> 00:20:56,240
in which the virtual operations are

536
00:20:56,240 --> 00:20:58,240
mapped to rob gadgets

537
00:20:58,240 --> 00:21:00,000
and we have developed a tool that allows

538
00:21:00,000 --> 00:21:02,960
us to find the rope gadgets and

539
00:21:02,960 --> 00:21:06,240
rock chain automatically being specified

540
00:21:06,240 --> 00:21:09,679
by the europlan operations

541
00:21:09,679 --> 00:21:13,120
as conclusion we can say that well any

542
00:21:13,120 --> 00:21:15,840
virtual operation has been found and the

543
00:21:15,840 --> 00:21:16,880
branching operation

544
00:21:16,880 --> 00:21:19,120
is the ones that are being the the least

545
00:21:19,120 --> 00:21:21,440
frequent in the experiments

546
00:21:21,440 --> 00:21:24,159
in any event the adversary can make a

547
00:21:24,159 --> 00:21:24,799
careful

548
00:21:24,799 --> 00:21:27,520
uh linking of the retro operations to

549
00:21:27,520 --> 00:21:28,000
find

550
00:21:28,000 --> 00:21:31,280
any kind of operation that he wants

551
00:21:31,280 --> 00:21:35,200
and as uh i have commented before

552
00:21:35,200 --> 00:21:36,559
so i know there are outsourced already

553
00:21:36,559 --> 00:21:38,640
plain in the return tool the size of the

554
00:21:38,640 --> 00:21:40,720
program file clearly impacts in the

555
00:21:40,720 --> 00:21:41,919
prevalence of the robot

556
00:21:41,919 --> 00:21:45,120
so the lag the the dll

557
00:21:45,120 --> 00:21:49,440
uh the the higher number of referrals

558
00:21:49,440 --> 00:21:51,679
well as a future work we are working now

559
00:21:51,679 --> 00:21:53,919
and trying to automatically

560
00:21:53,919 --> 00:21:55,679
eliminate the side effects that can

561
00:21:55,679 --> 00:21:57,360
occur with

562
00:21:57,360 --> 00:21:58,960
with some of the rock captains in the

563
00:21:58,960 --> 00:22:01,679
blockchain and also we want to

564
00:22:01,679 --> 00:22:03,760
extend this work to evaluate the

565
00:22:03,760 --> 00:22:05,520
exceptional power in other operating

566
00:22:05,520 --> 00:22:07,280
systems such as

567
00:22:07,280 --> 00:22:10,960
linux or macos among others

568
00:22:10,960 --> 00:22:13,120
and that's all thank you for your

569
00:22:13,120 --> 00:22:14,799
attention if you have any

570
00:22:14,799 --> 00:22:17,760
questions i would be glad to answer it

571
00:22:17,760 --> 00:22:18,400
awesome

572
00:22:18,400 --> 00:22:20,240
thank you very much ricardo for your

573
00:22:20,240 --> 00:22:21,440
talk um

574
00:22:21,440 --> 00:22:23,760
we are a couple of minutes behind

575
00:22:23,760 --> 00:22:24,640
schedule

576
00:22:24,640 --> 00:22:27,520
uh we didn't catch up so i would suggest

577
00:22:27,520 --> 00:22:27,919
we

578
00:22:27,919 --> 00:22:30,960
actually take questions over the the

579
00:22:30,960 --> 00:22:33,120
chat i do have a couple

580
00:22:33,120 --> 00:22:37,520
um the and people can actually typed it

581
00:22:37,520 --> 00:22:38,080
up

582
00:22:38,080 --> 00:22:40,159
type them up and you ricardo can can

583
00:22:40,159 --> 00:22:42,799
answer them

