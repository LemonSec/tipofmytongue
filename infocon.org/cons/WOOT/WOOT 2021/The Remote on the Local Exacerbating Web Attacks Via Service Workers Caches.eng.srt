1
00:00:02,000 --> 00:00:05,040
fingers crossed here

2
00:00:05,040 --> 00:00:08,480
i can't hear you yet can you start

3
00:00:08,480 --> 00:00:09,040
talking

4
00:00:09,040 --> 00:00:11,120
okay can you can you can you hear me now

5
00:00:11,120 --> 00:00:12,880
yes very good thank you

6
00:00:12,880 --> 00:00:16,079
okay excuse me slice right yes

7
00:00:16,079 --> 00:00:18,560
we can see the slides we can hear you so

8
00:00:18,560 --> 00:00:20,160
the last talk in the

9
00:00:20,160 --> 00:00:23,439
in this session on uh web and web-based

10
00:00:23,439 --> 00:00:24,240
attacks

11
00:00:24,240 --> 00:00:28,240
we'll hear marco uh scorsina

12
00:00:28,240 --> 00:00:31,119
from theo vienna talk about the remote

13
00:00:31,119 --> 00:00:32,320
on the local

14
00:00:32,320 --> 00:00:35,920
exec executing web attacks via service

15
00:00:35,920 --> 00:00:37,920
workers caches

16
00:00:37,920 --> 00:00:41,360
please go so uh thanks a lot for the

17
00:00:41,360 --> 00:00:42,320
introduction

18
00:00:42,320 --> 00:00:44,719
it looks like the web tried to get

19
00:00:44,719 --> 00:00:46,559
revenge on me and someone wrote in the

20
00:00:46,559 --> 00:00:47,440
chat

21
00:00:47,440 --> 00:00:50,079
uh but but yeah i was got a backup

22
00:00:50,079 --> 00:00:51,600
computer in case that things

23
00:00:51,600 --> 00:00:54,640
go wrong so hi everyone

24
00:00:54,640 --> 00:00:56,640
my name is marcus cortina i'm from tv

25
00:00:56,640 --> 00:00:58,000
and this is a joint

26
00:00:58,000 --> 00:01:00,559
work with stefano calzada from foscari

27
00:01:00,559 --> 00:01:01,600
university of venice

28
00:01:01,600 --> 00:01:03,840
that was my former university and mata

29
00:01:03,840 --> 00:01:06,400
masai from matiuvian

30
00:01:06,400 --> 00:01:08,640
so i think that we all agree that the

31
00:01:08,640 --> 00:01:09,520
web is

32
00:01:09,520 --> 00:01:11,760
no more a simple content distribution

33
00:01:11,760 --> 00:01:12,640
platform

34
00:01:12,640 --> 00:01:14,000
and the fact that we're having this nice

35
00:01:14,000 --> 00:01:16,320
conference uh inside our browser

36
00:01:16,320 --> 00:01:17,920
should be a solid argument right to

37
00:01:17,920 --> 00:01:19,680
convince you that the web

38
00:01:19,680 --> 00:01:21,600
morphed into an application platform

39
00:01:21,600 --> 00:01:22,799
nowadays

40
00:01:22,799 --> 00:01:24,720
progressive web applications are the

41
00:01:24,720 --> 00:01:26,000
latest trend in the

42
00:01:26,000 --> 00:01:28,159
evolution of the web and this is mostly

43
00:01:28,159 --> 00:01:30,079
due to the fact that they offer a user

44
00:01:30,079 --> 00:01:30,880
experience that is

45
00:01:30,880 --> 00:01:33,280
similar to traditional applications by

46
00:01:33,280 --> 00:01:34,960
providing responsiveness

47
00:01:34,960 --> 00:01:37,920
and by supporting offline usage service

48
00:01:37,920 --> 00:01:38,479
workers

49
00:01:38,479 --> 00:01:41,520
are the key enabler of pwas since they

50
00:01:41,520 --> 00:01:42,799
act as a client-side

51
00:01:42,799 --> 00:01:45,680
web application proxy a service worker

52
00:01:45,680 --> 00:01:46,320
can indeed

53
00:01:46,320 --> 00:01:49,040
intercept all http requests made by the

54
00:01:49,040 --> 00:01:50,960
web application and also modify the

55
00:01:50,960 --> 00:01:51,840
responses

56
00:01:51,840 --> 00:01:54,159
with arbitrary content using the cache

57
00:01:54,159 --> 00:01:55,680
api service workers

58
00:01:55,680 --> 00:01:58,719
can also store http responses and serve

59
00:01:58,719 --> 00:01:59,119
them

60
00:01:59,119 --> 00:02:01,840
at a later time one thing also that is

61
00:02:01,840 --> 00:02:03,520
important to mention is that the service

62
00:02:03,520 --> 00:02:04,880
workers

63
00:02:04,880 --> 00:02:06,960
execute in a separate context from the

64
00:02:06,960 --> 00:02:08,878
javascript code that is running in the

65
00:02:08,878 --> 00:02:09,919
page

66
00:02:09,919 --> 00:02:12,000
um and that means that they have no

67
00:02:12,000 --> 00:02:13,360
access to the dom

68
00:02:13,360 --> 00:02:15,280
they also are not allowed to access

69
00:02:15,280 --> 00:02:17,520
cookies via document.cookie and

70
00:02:17,520 --> 00:02:21,200
cannot call other synchronous api calls

71
00:02:21,200 --> 00:02:24,640
like local storage or session storage

72
00:02:24,640 --> 00:02:27,120
so uh let's now look in detail how

73
00:02:27,120 --> 00:02:28,000
caching

74
00:02:28,000 --> 00:02:30,239
is done so this code snippet said that

75
00:02:30,239 --> 00:02:32,160
the simple that is taken from

76
00:02:32,160 --> 00:02:34,959
the mozilla website implements a basic

77
00:02:34,959 --> 00:02:36,879
version of a common pattern that is

78
00:02:36,879 --> 00:02:38,319
called the cache first

79
00:02:38,319 --> 00:02:40,640
that is used to minimize network traffic

80
00:02:40,640 --> 00:02:43,120
and provide offline capabilities

81
00:02:43,120 --> 00:02:46,239
so we see in the first line that the

82
00:02:46,239 --> 00:02:48,319
service worker intercepts

83
00:02:48,319 --> 00:02:51,519
all the by registering a listener on the

84
00:02:51,519 --> 00:02:53,200
fetch event

85
00:02:53,200 --> 00:02:56,239
then uh it checks if the corresponding

86
00:02:56,239 --> 00:02:57,040
resource

87
00:02:57,040 --> 00:02:59,200
is found in the cache using the match

88
00:02:59,200 --> 00:03:00,959
method

89
00:03:00,959 --> 00:03:03,120
if this is the case the cache response

90
00:03:03,120 --> 00:03:04,000
is used

91
00:03:04,000 --> 00:03:06,720
and otherwise data source is fetched

92
00:03:06,720 --> 00:03:08,480
from the network

93
00:03:08,480 --> 00:03:11,760
and subsequently it is added

94
00:03:11,760 --> 00:03:14,400
to the cache first by opening a given

95
00:03:14,400 --> 00:03:15,120
cache in this

96
00:03:15,120 --> 00:03:16,640
in this case the name of the cache is

97
00:03:16,640 --> 00:03:20,000
static and then by using the put method

98
00:03:20,000 --> 00:03:23,360
to store it inside the cache and finally

99
00:03:23,360 --> 00:03:24,319
as the last step

100
00:03:24,319 --> 00:03:27,280
it is served back to the web application

101
00:03:27,280 --> 00:03:28,400
all right

102
00:03:28,400 --> 00:03:31,200
um so our attack is enabled by the fact

103
00:03:31,200 --> 00:03:33,599
that surprisingly service worker

104
00:03:33,599 --> 00:03:36,720
uh the service worker cache api is

105
00:03:36,720 --> 00:03:39,519
accessible from scripts running in the

106
00:03:39,519 --> 00:03:40,799
same origin

107
00:03:40,799 --> 00:03:43,040
where the same worker was the service

108
00:03:43,040 --> 00:03:45,120
worker was registered

109
00:03:45,120 --> 00:03:47,360
this means that an attacker with an xss

110
00:03:47,360 --> 00:03:48,319
on a page

111
00:03:48,319 --> 00:03:51,120
can get arbitrary read and write access

112
00:03:51,120 --> 00:03:52,319
on the cached content

113
00:03:52,319 --> 00:03:55,120
for the wall origin okay so like what

114
00:03:55,120 --> 00:03:57,840
does it mean from a security standpoint

115
00:03:57,840 --> 00:03:59,680
well an attacker can leak seekers from

116
00:03:59,680 --> 00:04:00,879
the cache

117
00:04:00,879 --> 00:04:03,280
like sensitive data left over from a

118
00:04:03,280 --> 00:04:04,959
previous authenticated session

119
00:04:04,959 --> 00:04:06,799
and this includes our personal

120
00:04:06,799 --> 00:04:08,879
information multimedia content

121
00:04:08,879 --> 00:04:13,439
security tokens passwords and so on

122
00:04:13,439 --> 00:04:15,760
uh as we said the attacker can also

123
00:04:15,760 --> 00:04:16,478
perform

124
00:04:16,478 --> 00:04:18,320
arbitrary corruption of the cache

125
00:04:18,320 --> 00:04:19,519
content all right

126
00:04:19,519 --> 00:04:21,358
and you see in this example the attacker

127
00:04:21,358 --> 00:04:23,840
has a reflected xss on a page so

128
00:04:23,840 --> 00:04:26,160
we make this assumption but wants to

129
00:04:26,160 --> 00:04:26,880
spread

130
00:04:26,880 --> 00:04:28,960
a malicious payload to other cached

131
00:04:28,960 --> 00:04:30,160
resources

132
00:04:30,160 --> 00:04:32,320
so let's now have a look so in the first

133
00:04:32,320 --> 00:04:34,479
step the attacker tampers with the

134
00:04:34,479 --> 00:04:36,080
cached responses

135
00:04:36,080 --> 00:04:38,000
in order to spread the injection of a

136
00:04:38,000 --> 00:04:40,639
malicious script like a keylogger

137
00:04:40,639 --> 00:04:43,759
then the victim performs an access to a

138
00:04:43,759 --> 00:04:47,199
legitimate pages such as a login page

139
00:04:47,199 --> 00:04:50,479
that happens to be in the cache so this

140
00:04:50,479 --> 00:04:51,120
was like

141
00:04:51,120 --> 00:04:54,000
a page in the cache that was uh modified

142
00:04:54,000 --> 00:04:55,520
by the attacker

143
00:04:55,520 --> 00:04:58,160
and at this point the service worker

144
00:04:58,160 --> 00:05:00,000
will return the page that contains the

145
00:05:00,000 --> 00:05:00,720
keylogger

146
00:05:00,720 --> 00:05:02,479
which will exfiltrate to the looking

147
00:05:02,479 --> 00:05:04,240
credentials

148
00:05:04,240 --> 00:05:05,759
in a way you might say that this is

149
00:05:05,759 --> 00:05:07,840
somehow similar to a persistent

150
00:05:07,840 --> 00:05:08,840
client-side

151
00:05:08,840 --> 00:05:12,160
xss because the attack allows to turn an

152
00:05:12,160 --> 00:05:14,240
ephemeral reflected xss

153
00:05:14,240 --> 00:05:16,400
into a persistent attack uh all

154
00:05:16,400 --> 00:05:17,280
persistent

155
00:05:17,280 --> 00:05:20,320
uh well the cash does not expire unless

156
00:05:20,320 --> 00:05:22,720
explicitly cleaned so even if the

157
00:05:22,720 --> 00:05:23,759
service worker

158
00:05:23,759 --> 00:05:26,479
is installed the cache is not modified

159
00:05:26,479 --> 00:05:27,919
by default you have to

160
00:05:27,919 --> 00:05:31,280
explicitly delete it

161
00:05:31,280 --> 00:05:33,360
as shown in this example this attacker

162
00:05:33,360 --> 00:05:35,440
can also be used to amplify the attack

163
00:05:35,440 --> 00:05:36,639
surface

164
00:05:36,639 --> 00:05:40,000
and you can also uh mount the os attack

165
00:05:40,000 --> 00:05:41,600
by preventing the user from

166
00:05:41,600 --> 00:05:44,000
accessing the website so you keep

167
00:05:44,000 --> 00:05:45,600
returning the same resource over and

168
00:05:45,600 --> 00:05:46,400
over

169
00:05:46,400 --> 00:05:50,080
uh instead of the legitimate pages

170
00:05:50,080 --> 00:05:52,639
so finger cross and let's try to see a

171
00:05:52,639 --> 00:05:54,080
demo

172
00:05:54,080 --> 00:05:58,400
this is recorded anyway so yes

173
00:05:58,400 --> 00:06:01,120
okay so we can

174
00:06:02,319 --> 00:06:06,800
yeah okay uh to explain the attack

175
00:06:06,800 --> 00:06:10,720
and safe notes is a kind of a poor mess

176
00:06:10,720 --> 00:06:11,759
google keep

177
00:06:11,759 --> 00:06:14,560
it allow users to store personal nodes

178
00:06:14,560 --> 00:06:15,360
each node

179
00:06:15,360 --> 00:06:17,039
is encrypted on the client with a

180
00:06:17,039 --> 00:06:18,880
password and stored in the browser so

181
00:06:18,880 --> 00:06:19,600
there is no

182
00:06:19,600 --> 00:06:22,319
server side the counterpart here just

183
00:06:22,319 --> 00:06:23,520
everything is on the client for

184
00:06:23,520 --> 00:06:24,720
simplicity

185
00:06:24,720 --> 00:06:27,280
the website can also work offline thanks

186
00:06:27,280 --> 00:06:29,360
to the service worker that catches all

187
00:06:29,360 --> 00:06:30,800
static resources

188
00:06:30,800 --> 00:06:33,440
fetched by the browser then we also

189
00:06:33,440 --> 00:06:34,319
place the dominic's

190
00:06:34,319 --> 00:06:36,319
don't basic success vulnerability on the

191
00:06:36,319 --> 00:06:38,080
page other dot html

192
00:06:38,080 --> 00:06:41,360
um so let's have a look how the

193
00:06:41,360 --> 00:06:44,160
application works

194
00:06:44,160 --> 00:06:46,479
it's okay we are saving a super secret

195
00:06:46,479 --> 00:06:49,599
node with a password

196
00:06:49,599 --> 00:06:51,759
password is wrong so decryption failed

197
00:06:51,759 --> 00:06:52,800
by putting the

198
00:06:52,800 --> 00:06:54,720
right password we should be able to

199
00:06:54,720 --> 00:06:56,240
decrypt it

200
00:06:56,240 --> 00:06:59,919
and yeah and it works

201
00:07:01,039 --> 00:07:04,479
now we go to the other dot html page

202
00:07:04,479 --> 00:07:07,280
the one vulnerable to the uh dom basic

203
00:07:07,280 --> 00:07:09,039
success vulnerability

204
00:07:09,039 --> 00:07:11,599
and as you can see if we inject an alert

205
00:07:11,599 --> 00:07:12,479
in the fragment

206
00:07:12,479 --> 00:07:15,120
we successfully triggered another pop-up

207
00:07:15,120 --> 00:07:16,639
window

208
00:07:16,639 --> 00:07:19,360
okay so uh what's the aim of the

209
00:07:19,360 --> 00:07:20,000
attacker

210
00:07:20,000 --> 00:07:22,319
the emoji attacker is to steal passwords

211
00:07:22,319 --> 00:07:23,919
typed by the user

212
00:07:23,919 --> 00:07:26,240
the thing is that a traditional xss

213
00:07:26,240 --> 00:07:28,479
wouldn't be very useful here right

214
00:07:28,479 --> 00:07:30,960
because arbitrary code execution is

215
00:07:30,960 --> 00:07:31,919
restricted

216
00:07:31,919 --> 00:07:35,280
to the page other.html and there is no

217
00:07:35,280 --> 00:07:36,720
possibility for the attacker to

218
00:07:36,720 --> 00:07:37,680
interfere

219
00:07:37,680 --> 00:07:40,960
with a sensitive page index.html

220
00:07:40,960 --> 00:07:43,680
so going back to our attack after the

221
00:07:43,680 --> 00:07:45,199
website is loaded

222
00:07:45,199 --> 00:07:48,160
and the index page page is cached as

223
00:07:48,160 --> 00:07:49,759
this is like the case

224
00:07:49,759 --> 00:07:52,560
uh we assume that the victim clicks on

225
00:07:52,560 --> 00:07:53,840
our xss payload

226
00:07:53,840 --> 00:07:57,280
let's see it in action

227
00:07:57,280 --> 00:07:59,199
okay we also see at the bottom of the

228
00:07:59,199 --> 00:08:00,639
page that there are only two scripts

229
00:08:00,639 --> 00:08:01,759
that are loaded the

230
00:08:01,759 --> 00:08:03,759
safe notes dot js and the one about the

231
00:08:03,759 --> 00:08:06,560
service worker

232
00:08:06,560 --> 00:08:09,759
so now we simulate the victim clicking

233
00:08:09,759 --> 00:08:10,800
on the xss

234
00:08:10,800 --> 00:08:14,879
which is like this stuff bunch of stuff

235
00:08:14,879 --> 00:08:18,000
um so like this

236
00:08:18,000 --> 00:08:21,520
this script registers a listener on the

237
00:08:21,520 --> 00:08:24,000
add the note button to read the password

238
00:08:24,000 --> 00:08:25,280
value from the dom

239
00:08:25,280 --> 00:08:27,199
and prompts another message when the

240
00:08:27,199 --> 00:08:28,879
password with the password

241
00:08:28,879 --> 00:08:30,560
when the button is clicked so let's see

242
00:08:30,560 --> 00:08:41,839
in action

243
00:08:46,720 --> 00:08:49,920
not so secure not so secret note

244
00:08:49,920 --> 00:08:53,200
now that i've been pawned and

245
00:08:53,200 --> 00:08:55,200
and yeah you see that there is the alert

246
00:08:55,200 --> 00:08:57,600
message with the password that has just

247
00:08:57,600 --> 00:08:58,080
been

248
00:08:58,080 --> 00:09:02,399
exfiltrated uh if we inspect the content

249
00:09:02,399 --> 00:09:05,600
of the cache using the chrome the tools

250
00:09:05,600 --> 00:09:07,920
we can also see that the index page has

251
00:09:07,920 --> 00:09:09,519
been indeed modified

252
00:09:09,519 --> 00:09:12,959
to include our to include our payload

253
00:09:12,959 --> 00:09:14,560
remember that there were only like two

254
00:09:14,560 --> 00:09:16,399
scripts at the bottom of the page

255
00:09:16,399 --> 00:09:19,519
now there is an alliance script there

256
00:09:19,519 --> 00:09:21,680
that describes what i told you before

257
00:09:21,680 --> 00:09:22,959
about like this

258
00:09:22,959 --> 00:09:26,320
listener on the uh button

259
00:09:26,320 --> 00:09:28,560
okay

260
00:09:30,480 --> 00:09:34,000
so uh yes okay we are back to the slides

261
00:09:34,000 --> 00:09:35,519
so we mentioned persistent client

262
00:09:35,519 --> 00:09:37,120
deciding success before

263
00:09:37,120 --> 00:09:38,880
but the ability of the attacker to

264
00:09:38,880 --> 00:09:40,720
perform a person in the middle attacks

265
00:09:40,720 --> 00:09:41,360
against

266
00:09:41,360 --> 00:09:45,120
cached responses opens up novel threats

267
00:09:45,120 --> 00:09:47,279
uh other than temp tampering with the

268
00:09:47,279 --> 00:09:49,600
body of http responses an attacker can

269
00:09:49,600 --> 00:09:51,839
investigate and manipulate the http

270
00:09:51,839 --> 00:09:52,720
address too

271
00:09:52,720 --> 00:09:54,480
and this grants much more power than a

272
00:09:54,480 --> 00:09:56,399
persistent client-side xss

273
00:09:56,399 --> 00:09:58,320
for example by disabling the frame

274
00:09:58,320 --> 00:10:00,080
ancestor directive or the content

275
00:10:00,080 --> 00:10:01,360
security policy

276
00:10:01,360 --> 00:10:03,680
or the x-frame option either an attacker

277
00:10:03,680 --> 00:10:04,480
in control

278
00:10:04,480 --> 00:10:07,200
of evo.com could frame a page that was

279
00:10:07,200 --> 00:10:09,040
previously previously protected

280
00:10:09,040 --> 00:10:11,760
and mount attacks like click checking or

281
00:10:11,760 --> 00:10:12,959
certain classes of

282
00:10:12,959 --> 00:10:16,240
excess leaks other examples include

283
00:10:16,240 --> 00:10:18,000
breaking the document isolation by

284
00:10:18,000 --> 00:10:19,600
removing the sandbox directive

285
00:10:19,600 --> 00:10:22,000
from my frames and the csp also

286
00:10:22,000 --> 00:10:23,440
stripping out the permission policy

287
00:10:23,440 --> 00:10:25,600
header in case it is enforced

288
00:10:25,600 --> 00:10:27,519
gives the ability to access the webcam

289
00:10:27,519 --> 00:10:29,200
and the microphone of the user

290
00:10:29,200 --> 00:10:31,600
and furthermore the injected script can

291
00:10:31,600 --> 00:10:33,519
be executed anywhere in the page this is

292
00:10:33,519 --> 00:10:34,480
very important

293
00:10:34,480 --> 00:10:36,480
because this enables the attacker to

294
00:10:36,480 --> 00:10:37,680
bypass the fastest

295
00:10:37,680 --> 00:10:39,760
defensive programming practices such as

296
00:10:39,760 --> 00:10:41,839
freezing freezing objects

297
00:10:41,839 --> 00:10:43,680
which is a standard way to protect

298
00:10:43,680 --> 00:10:47,600
against the prototype pollution attacks

299
00:10:47,600 --> 00:10:50,399
we wanted to check the provision of this

300
00:10:50,399 --> 00:10:51,120
threat

301
00:10:51,120 --> 00:10:53,839
so we performed a large scale assessment

302
00:10:53,839 --> 00:10:54,880
of the cache

303
00:10:54,880 --> 00:10:58,240
api usage by website so we

304
00:10:58,240 --> 00:11:00,959
did this by using the pipeline that is

305
00:11:00,959 --> 00:11:01,519
shown

306
00:11:01,519 --> 00:11:03,760
in this slide meet my proxy and

307
00:11:03,760 --> 00:11:06,480
puppeteer for google chrome were used to

308
00:11:06,480 --> 00:11:09,360
uh inject a runtime monitor that keeps

309
00:11:09,360 --> 00:11:11,440
track of all the access to the cache

310
00:11:11,440 --> 00:11:13,920
happening in the page context and also

311
00:11:13,920 --> 00:11:15,920
inside the service workers

312
00:11:15,920 --> 00:11:18,000
then we said we saved the all the

313
00:11:18,000 --> 00:11:19,279
recorded the calls

314
00:11:19,279 --> 00:11:22,240
into database for written analysis for

315
00:11:22,240 --> 00:11:23,519
each one of the origin

316
00:11:23,519 --> 00:11:26,720
that we processed we visited up to 50

317
00:11:26,720 --> 00:11:27,519
different links

318
00:11:27,519 --> 00:11:29,600
in the same origin so to speak we did a

319
00:11:29,600 --> 00:11:31,279
lot of interaction with the website

320
00:11:31,279 --> 00:11:34,320
to maximize the coverage of our analysis

321
00:11:34,320 --> 00:11:36,240
we also investigated the main subdomains

322
00:11:36,240 --> 00:11:37,360
of the sites

323
00:11:37,360 --> 00:11:41,279
in our data set overall

324
00:11:41,279 --> 00:11:43,040
we started from the trunk list and we

325
00:11:43,040 --> 00:11:44,560
crawled uh one

326
00:11:44,560 --> 00:11:47,839
uh hundred and fifty thousand websites

327
00:11:47,839 --> 00:11:50,000
for a total amount of four million

328
00:11:50,000 --> 00:11:52,240
distinct web pages

329
00:11:52,240 --> 00:11:54,880
we found that service worker adoption as

330
00:11:54,880 --> 00:11:56,240
of last year so

331
00:11:56,240 --> 00:11:59,440
this experiment was done in june 2020

332
00:11:59,440 --> 00:12:02,399
is still low around like 4.6 percent but

333
00:12:02,399 --> 00:12:04,000
more than half of these sites

334
00:12:04,000 --> 00:12:06,399
are using the cache api to store and

335
00:12:06,399 --> 00:12:07,839
retrieve data

336
00:12:07,839 --> 00:12:10,880
uh so the cache api is

337
00:12:10,880 --> 00:12:13,920
very often used in conjunction uh with

338
00:12:13,920 --> 00:12:15,600
the service workers

339
00:12:15,600 --> 00:12:17,600
since our threat model requires that we

340
00:12:17,600 --> 00:12:19,040
have an xss on the site

341
00:12:19,040 --> 00:12:21,600
we analyze the csp adoption and

342
00:12:21,600 --> 00:12:22,720
unsurprisingly

343
00:12:22,720 --> 00:12:25,120
if you are familiar with web security

344
00:12:25,120 --> 00:12:26,720
we've found that the deployment is

345
00:12:26,720 --> 00:12:27,200
broken

346
00:12:27,200 --> 00:12:30,399
or completely missing in 96 of the

347
00:12:30,399 --> 00:12:32,800
websites that are using service workers

348
00:12:32,800 --> 00:12:36,560
and the cache api um and yeah in

349
00:12:36,560 --> 00:12:39,120
in the in the study we've only focused

350
00:12:39,120 --> 00:12:40,079
on websites

351
00:12:40,079 --> 00:12:43,440
with a trivially broken csp so if

352
00:12:43,440 --> 00:12:46,399
the site is well protected using the csp

353
00:12:46,399 --> 00:12:46,880
we

354
00:12:46,880 --> 00:12:50,079
didn't even like try to uh exploit it

355
00:12:50,079 --> 00:12:51,920
so then we came up with an automatic

356
00:12:51,920 --> 00:12:54,480
testing strategy to verify the potential

357
00:12:54,480 --> 00:12:57,200
exploitability of the issue in the wild

358
00:12:57,200 --> 00:12:58,959
we visited a random selection of the

359
00:12:58,959 --> 00:13:01,200
links uh to fill the cache with some

360
00:13:01,200 --> 00:13:02,480
content

361
00:13:02,480 --> 00:13:05,680
then we infected all javascript and html

362
00:13:05,680 --> 00:13:07,760
files with our payload and we also

363
00:13:07,760 --> 00:13:09,920
stripped out all security headers

364
00:13:09,920 --> 00:13:12,240
after this step we visited the pages

365
00:13:12,240 --> 00:13:14,399
again and checked whether our payload is

366
00:13:14,399 --> 00:13:15,600
executed

367
00:13:15,600 --> 00:13:17,839
we perform this injection using an

368
00:13:17,839 --> 00:13:19,440
extension that we made available

369
00:13:19,440 --> 00:13:22,560
and we found that our payload was

370
00:13:22,560 --> 00:13:23,920
blindly executed by

371
00:13:23,920 --> 00:13:28,320
65 percent of the tested websites

372
00:13:28,320 --> 00:13:31,360
uh talking about uh countermeasures how

373
00:13:31,360 --> 00:13:33,200
to protect against this attack

374
00:13:33,200 --> 00:13:35,200
so a straightforward solution is to

375
00:13:35,200 --> 00:13:37,040
prevent scripts in the page to access

376
00:13:37,040 --> 00:13:38,160
the cache api

377
00:13:38,160 --> 00:13:40,800
basically restricting it to a service

378
00:13:40,800 --> 00:13:42,639
worker context only

379
00:13:42,639 --> 00:13:45,519
this is a cure but the solution will

380
00:13:45,519 --> 00:13:47,360
introduce compatibility issues

381
00:13:47,360 --> 00:13:49,519
on sites that are using the cache api

382
00:13:49,519 --> 00:13:51,519
from the page context

383
00:13:51,519 --> 00:13:53,360
from our measurements we discovered that

384
00:13:53,360 --> 00:13:54,880
around 250

385
00:13:54,880 --> 00:13:57,360
sites would be affected by this change

386
00:13:57,360 --> 00:13:59,040
and furthermore we identified some

387
00:13:59,040 --> 00:14:01,120
legitimate caching patterns

388
00:14:01,120 --> 00:14:03,680
that require cooperation between service

389
00:14:03,680 --> 00:14:06,320
workers and scripts in the page

390
00:14:06,320 --> 00:14:09,360
so uh we proposed to restrict the cache

391
00:14:09,360 --> 00:14:11,760
api to service workers by default

392
00:14:11,760 --> 00:14:14,160
but at the same time was just a way to

393
00:14:14,160 --> 00:14:15,199
relax the protection

394
00:14:15,199 --> 00:14:18,000
using either a custom header or the new

395
00:14:18,000 --> 00:14:19,360
document policy

396
00:14:19,360 --> 00:14:21,600
so to preserve a compatibility in a

397
00:14:21,600 --> 00:14:23,199
nutshell you get the same behavior by

398
00:14:23,199 --> 00:14:23,760
default

399
00:14:23,760 --> 00:14:26,560
but also a way to opt into the current

400
00:14:26,560 --> 00:14:28,560
vulnerable design of the cache api if

401
00:14:28,560 --> 00:14:29,120
you want

402
00:14:29,120 --> 00:14:31,680
or if you need as a mitigation web

403
00:14:31,680 --> 00:14:32,480
developers

404
00:14:32,480 --> 00:14:34,959
can also harden the code of the service

405
00:14:34,959 --> 00:14:35,920
workers

406
00:14:35,920 --> 00:14:37,440
to protect against the malicious

407
00:14:37,440 --> 00:14:39,279
modifications of the cache so

408
00:14:39,279 --> 00:14:41,360
not against inspection but against the

409
00:14:41,360 --> 00:14:43,440
modification

410
00:14:43,440 --> 00:14:45,600
this can be done by checking that the

411
00:14:45,600 --> 00:14:46,880
url attribute

412
00:14:46,880 --> 00:14:49,839
of cached responses corresponds to the

413
00:14:49,839 --> 00:14:50,480
url

414
00:14:50,480 --> 00:14:53,040
of the request by doing so it's possible

415
00:14:53,040 --> 00:14:54,639
to spot the tampering attempts

416
00:14:54,639 --> 00:14:57,120
because the synthetic responses have the

417
00:14:57,120 --> 00:14:58,240
url attribute

418
00:14:58,240 --> 00:15:00,880
set to the empty string but again you

419
00:15:00,880 --> 00:15:03,360
will introduce the compatibility issues

420
00:15:03,360 --> 00:15:05,839
so to conclude um we introduced the

421
00:15:05,839 --> 00:15:06,959
powerful

422
00:15:06,959 --> 00:15:09,440
attack on service workers that revolves

423
00:15:09,440 --> 00:15:11,760
around the design of the cache api

424
00:15:11,760 --> 00:15:13,760
we show that this attack grants personal

425
00:15:13,760 --> 00:15:15,360
in the middle capabilities

426
00:15:15,360 --> 00:15:17,760
that are more powerful than a persistent

427
00:15:17,760 --> 00:15:19,440
client-side xss

428
00:15:19,440 --> 00:15:21,519
although our threat model is strong we

429
00:15:21,519 --> 00:15:22,800
prove that it's realistic

430
00:15:22,800 --> 00:15:25,600
considering that excesses are still very

431
00:15:25,600 --> 00:15:26,800
widespread

432
00:15:26,800 --> 00:15:29,680
and mitigations such as csp are not

433
00:15:29,680 --> 00:15:31,519
correctly implemented

434
00:15:31,519 --> 00:15:33,680
our large-scale assessment showed that

435
00:15:33,680 --> 00:15:35,120
65 percent

436
00:15:35,120 --> 00:15:37,040
of the sites that are using service

437
00:15:37,040 --> 00:15:38,880
workers with the cash api

438
00:15:38,880 --> 00:15:41,279
are affected and lastly we proposed a

439
00:15:41,279 --> 00:15:43,120
backward compatible redesign of the

440
00:15:43,120 --> 00:15:44,160
cache api

441
00:15:44,160 --> 00:15:46,320
that would immediately secure the large

442
00:15:46,320 --> 00:15:47,199
majority

443
00:15:47,199 --> 00:15:49,759
of the sites affected by the issue this

444
00:15:49,759 --> 00:15:51,759
discussed in this talk

445
00:15:51,759 --> 00:15:54,160
just one other thing before concluding

446
00:15:54,160 --> 00:15:55,440
uh the demo

447
00:15:55,440 --> 00:15:58,079
the demo the the proof of concept uh

448
00:15:58,079 --> 00:15:59,199
examples

449
00:15:59,199 --> 00:16:02,000
the extension the paper and also the

450
00:16:02,000 --> 00:16:04,399
slides of this talk will be published

451
00:16:04,399 --> 00:16:08,680
on this website swv cash attack dot

452
00:16:08,680 --> 00:16:10,320
sacrifian

453
00:16:10,320 --> 00:16:12,880
so thanks for listening and i will be

454
00:16:12,880 --> 00:16:14,399
i'm happy to take

455
00:16:14,399 --> 00:16:17,440
your questions awesome

456
00:16:17,440 --> 00:16:19,519
thank you very much for the presentation

457
00:16:19,519 --> 00:16:22,480
while folks are still typing their

458
00:16:22,480 --> 00:16:24,880
questions let me kick it off

459
00:16:24,880 --> 00:16:27,279
um yeah this is good for the city of

460
00:16:27,279 --> 00:16:28,240
challenge

461
00:16:28,240 --> 00:16:31,440
that's definitely true yeah that's what

462
00:16:31,440 --> 00:16:32,399
i figured

463
00:16:32,399 --> 00:16:34,880
um the data you showed was from june

464
00:16:34,880 --> 00:16:37,279
2020 do you have an indication of on how

465
00:16:37,279 --> 00:16:38,880
the numbers changed in

466
00:16:38,880 --> 00:16:41,440
like it's it's been like a year or so

467
00:16:41,440 --> 00:16:44,000
has this week

468
00:16:44,000 --> 00:16:47,120
um i think that the

469
00:16:47,120 --> 00:16:49,440
the adoption of service workers and the

470
00:16:49,440 --> 00:16:50,800
cache api

471
00:16:50,800 --> 00:16:54,480
is increasing because pwas

472
00:16:54,480 --> 00:16:56,240
now are really trendy you can also

473
00:16:56,240 --> 00:16:57,920
install them inside the browser

474
00:16:57,920 --> 00:17:01,279
also you can do the same on android um

475
00:17:01,279 --> 00:17:05,039
so i guess that yeah service workers

476
00:17:05,039 --> 00:17:08,079
are being adopted more and more

477
00:17:08,079 --> 00:17:11,119
and so this kind of threat

478
00:17:11,119 --> 00:17:14,480
is there because there is no way to

479
00:17:14,480 --> 00:17:17,280
uh to prevent an attacker from mounting

480
00:17:17,280 --> 00:17:19,039
this uh

481
00:17:19,039 --> 00:17:22,000
technique what about the mitigations did

482
00:17:22,000 --> 00:17:23,439
any of them

483
00:17:23,439 --> 00:17:26,160
make it into the major browsers do you

484
00:17:26,160 --> 00:17:26,480
see

485
00:17:26,480 --> 00:17:29,520
progress there no uh

486
00:17:29,520 --> 00:17:32,160
yeah this is a very good question and we

487
00:17:32,160 --> 00:17:33,200
discussed

488
00:17:33,200 --> 00:17:35,840
with the browser vendors and also with

489
00:17:35,840 --> 00:17:38,000
the

490
00:17:38,320 --> 00:17:40,160
tools behind the standard of service

491
00:17:40,160 --> 00:17:41,520
workers

492
00:17:41,520 --> 00:17:44,640
we sent the paper but

493
00:17:44,640 --> 00:17:48,640
we received some feedback i think that

494
00:17:48,640 --> 00:17:51,760
our countermeasure is uh i mean is is

495
00:17:51,760 --> 00:17:53,679
good in a way that like it provides a

496
00:17:53,679 --> 00:17:54,960
security by default

497
00:17:54,960 --> 00:17:56,880
but security by default comes at the

498
00:17:56,880 --> 00:17:59,200
price of breaking applications by

499
00:17:59,200 --> 00:18:00,160
default

500
00:18:00,160 --> 00:18:02,960
so it will require some applications to

501
00:18:02,960 --> 00:18:03,919
explicitly

502
00:18:03,919 --> 00:18:07,120
opt out from like the mitigation

503
00:18:07,120 --> 00:18:09,679
and so because the compatibility issue i

504
00:18:09,679 --> 00:18:10,160
guess

505
00:18:10,160 --> 00:18:13,600
that this redesign

506
00:18:13,600 --> 00:18:16,080
is not taking place yet the problem is

507
00:18:16,080 --> 00:18:16,640
that

508
00:18:16,640 --> 00:18:18,880
we are still in an early stage with

509
00:18:18,880 --> 00:18:20,400
adoption of service workers

510
00:18:20,400 --> 00:18:23,039
so it will be good to do it now before

511
00:18:23,039 --> 00:18:24,480
it's too late

512
00:18:24,480 --> 00:18:27,760
right or but as we've seen time and time

513
00:18:27,760 --> 00:18:29,919
before we first need more pressure

514
00:18:29,919 --> 00:18:32,000
through exploitation until this is

515
00:18:32,000 --> 00:18:33,360
actually being picked up

516
00:18:33,360 --> 00:18:35,120
yeah yeah because this is not a major

517
00:18:35,120 --> 00:18:36,640
problem right now it may take some

518
00:18:36,640 --> 00:18:38,559
additional time

519
00:18:38,559 --> 00:18:41,760
yeah but yeah super super cool i think

520
00:18:41,760 --> 00:18:42,880
it's

521
00:18:42,880 --> 00:18:44,160
you mentioned in the beginning it's

522
00:18:44,160 --> 00:18:46,080
somewhat like similar to

523
00:18:46,080 --> 00:18:48,320
client-side cross-site scripting but

524
00:18:48,320 --> 00:18:49,840
it's like uh

525
00:18:49,840 --> 00:18:51,600
i i would see it more like as a more

526
00:18:51,600 --> 00:18:53,200
powerful extension

527
00:18:53,200 --> 00:18:55,919
of client-side cross-scripting that just

528
00:18:55,919 --> 00:18:56,880
gives you guys because

529
00:18:56,880 --> 00:18:58,640
you're actually absolutely full full

530
00:18:58,640 --> 00:19:00,880
person in the middle capabilities yeah

531
00:19:00,880 --> 00:19:01,679
that you don't

532
00:19:01,679 --> 00:19:04,880
have uh with the traditional uh

533
00:19:04,880 --> 00:19:07,760
client side xss persistent client side

534
00:19:07,760 --> 00:19:08,880
but systemic success

535
00:19:08,880 --> 00:19:12,320
sorry i agree this is super cool

536
00:19:12,320 --> 00:19:15,679
thank you for the presentation thank you

537
00:19:15,679 --> 00:19:19,200
drop the link in the chat so that other

538
00:19:19,200 --> 00:19:19,919
people can

539
00:19:19,919 --> 00:19:23,039
copy it and and paste it and

540
00:19:23,039 --> 00:19:25,120
yeah thanks everybody in this session

541
00:19:25,120 --> 00:19:27,120
for your your great talks this has been

542
00:19:27,120 --> 00:19:28,400
a lot of fun

543
00:19:28,400 --> 00:19:32,160
lots of interaction as well

