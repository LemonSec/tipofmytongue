1
00:00:00,399 --> 00:00:02,560
we're going to move right on and i'm

2
00:00:02,560 --> 00:00:04,480
going to pass the button to

3
00:00:04,480 --> 00:00:07,759
uh funk fade who will share the

4
00:00:07,759 --> 00:00:10,800
our last section and we'll hear the the

5
00:00:10,800 --> 00:00:12,080
best paper award

6
00:00:12,080 --> 00:00:15,040
or the like the the presentation of the

7
00:00:15,040 --> 00:00:16,400
the best paper

8
00:00:16,400 --> 00:00:19,840
um along with another um

9
00:00:19,840 --> 00:00:22,000
very interesting architecture attack so

10
00:00:22,000 --> 00:00:24,000
why don't you take it over and go ahead

11
00:00:24,000 --> 00:00:27,519
okay okay um so let's move to the

12
00:00:27,519 --> 00:00:30,560
uh last session uh

13
00:00:30,560 --> 00:00:32,880
the architecture session we have two

14
00:00:32,880 --> 00:00:33,680
papers

15
00:00:33,680 --> 00:00:37,120
uh so uh the first paper is

16
00:00:37,120 --> 00:00:40,000
severity code injection attacks against

17
00:00:40,000 --> 00:00:41,760
the encrypted

18
00:00:41,760 --> 00:00:45,600
virtual machines uh so materials

19
00:00:45,600 --> 00:00:49,680
mobby marketer will be the presenter

20
00:00:49,680 --> 00:00:59,840
so matias you can get started

21
00:01:04,640 --> 00:01:08,960
yeah now it looks good can you hear me

22
00:01:09,840 --> 00:01:12,799
perfect nothing not nothing broke that's

23
00:01:12,799 --> 00:01:13,280
good

24
00:01:13,280 --> 00:01:16,320
to hear so um

25
00:01:16,320 --> 00:01:19,280
hi everyone i'm matthias and today i

26
00:01:19,280 --> 00:01:21,360
will talk to you about some work i did

27
00:01:21,360 --> 00:01:22,479
together with sergey

28
00:01:22,479 --> 00:01:25,360
martin marco and eric which we call in

29
00:01:25,360 --> 00:01:26,159
severity

30
00:01:26,159 --> 00:01:28,320
which as you already said is code

31
00:01:28,320 --> 00:01:29,840
injection attacks against encrypted

32
00:01:29,840 --> 00:01:32,079
virtual machines

33
00:01:32,079 --> 00:01:34,640
this work is a joint work between the

34
00:01:34,640 --> 00:01:35,759
front of isaac

35
00:01:35,759 --> 00:01:40,479
and the technical university of munich

36
00:01:40,479 --> 00:01:42,960
so first let's have a look at what amd

37
00:01:42,960 --> 00:01:43,520
suv

38
00:01:43,520 --> 00:01:46,720
actually is what you see here is

39
00:01:46,720 --> 00:01:49,680
the cloud the way you usually work in

40
00:01:49,680 --> 00:01:50,320
the cloud

41
00:01:50,320 --> 00:01:52,720
is you rent yourself a virtual machine

42
00:01:52,720 --> 00:01:54,880
and in this virtual machine you can

43
00:01:54,880 --> 00:01:56,719
install your own operating system and

44
00:01:56,719 --> 00:01:58,320
then do whatever you want

45
00:01:58,320 --> 00:02:01,840
like process your data store your data

46
00:02:01,840 --> 00:02:04,880
whatever and

47
00:02:04,880 --> 00:02:06,799
this virtual machine will be managed by

48
00:02:06,799 --> 00:02:08,479
the hypervisor

49
00:02:08,479 --> 00:02:11,360
and this hypervisor is usually managed

50
00:02:11,360 --> 00:02:13,840
by the cloud provider

51
00:02:13,840 --> 00:02:15,840
the fact that the hypervisor manages the

52
00:02:15,840 --> 00:02:16,879
virtual machines

53
00:02:16,879 --> 00:02:19,760
means that a malicious hypervisor will

54
00:02:19,760 --> 00:02:21,920
be able to access the virtual machine

55
00:02:21,920 --> 00:02:23,760
and the virtual machine's memory

56
00:02:23,760 --> 00:02:25,440
and thereby possibly extract

57
00:02:25,440 --> 00:02:27,200
confidential information from the

58
00:02:27,200 --> 00:02:28,319
virtual machine

59
00:02:28,319 --> 00:02:31,280
or maybe even to modify the information

60
00:02:31,280 --> 00:02:32,800
are you going to say now okay

61
00:02:32,800 --> 00:02:34,879
i'm going to trust the cloud provider so

62
00:02:34,879 --> 00:02:36,800
there's no need to worry about it

63
00:02:36,800 --> 00:02:39,120
but another attack vector is that

64
00:02:39,120 --> 00:02:40,560
somebody

65
00:02:40,560 --> 00:02:42,720
when also renting a virtual machine in

66
00:02:42,720 --> 00:02:45,200
the same cloud environment on the same

67
00:02:45,200 --> 00:02:48,080
hypervisor might find a possibility to

68
00:02:48,080 --> 00:02:48,879
outbreak

69
00:02:48,879 --> 00:02:51,360
if the virtual machine sandbox get

70
00:02:51,360 --> 00:02:53,040
control over the hypervisor

71
00:02:53,040 --> 00:02:56,239
and then access your data so

72
00:02:56,239 --> 00:02:59,040
to mitigate this threat amd introduced

73
00:02:59,040 --> 00:02:59,760
scb

74
00:02:59,760 --> 00:03:02,640
secure encrypted virtualization what

75
00:03:02,640 --> 00:03:03,760
this does is

76
00:03:03,760 --> 00:03:05,760
it encrypts the memory of the virtual

77
00:03:05,760 --> 00:03:06,879
machine

78
00:03:06,879 --> 00:03:09,440
and therefore preventing the hypervisor

79
00:03:09,440 --> 00:03:11,280
from accessing the data

80
00:03:11,280 --> 00:03:15,440
or the memory of the virtual machine

81
00:03:15,840 --> 00:03:17,680
so let's have a quick look at the

82
00:03:17,680 --> 00:03:20,319
timeline of amd scv

83
00:03:20,319 --> 00:03:23,280
so at some point suv was introduced and

84
00:03:23,280 --> 00:03:25,120
as we quickly already said

85
00:03:25,120 --> 00:03:28,360
it added memory integrity memory

86
00:03:28,360 --> 00:03:29,680
confidentiality

87
00:03:29,680 --> 00:03:33,200
to virtual machines what we had

88
00:03:33,200 --> 00:03:34,239
afterwards

89
00:03:34,239 --> 00:03:37,680
is suvs es

90
00:03:37,680 --> 00:03:40,959
stands for encrypted state

91
00:03:40,959 --> 00:03:43,200
what this does is it additionally

92
00:03:43,200 --> 00:03:44,239
protected

93
00:03:44,239 --> 00:03:47,920
the registers of the virtual machine

94
00:03:47,920 --> 00:03:49,840
when the vm hands control back to the

95
00:03:49,840 --> 00:03:51,360
hypervisor to make sure that the

96
00:03:51,360 --> 00:03:53,200
hypervisor isn't able to sneak on the

97
00:03:53,200 --> 00:03:56,159
vm's registers

98
00:03:56,720 --> 00:03:59,040
however soon after those two got

99
00:03:59,040 --> 00:04:00,879
announced we saw the first attacks on

100
00:04:00,879 --> 00:04:03,040
amd scb which was a control flow

101
00:04:03,040 --> 00:04:05,760
modification attack

102
00:04:05,760 --> 00:04:07,360
afterwards we saw another attack which

103
00:04:07,360 --> 00:04:10,959
was a memory extraction attack

104
00:04:10,959 --> 00:04:13,040
and then we see a saw code execution

105
00:04:13,040 --> 00:04:14,640
attacks it was now also possible to

106
00:04:14,640 --> 00:04:15,760
execute code

107
00:04:15,760 --> 00:04:20,798
in vms protected by mds cv

108
00:04:20,798 --> 00:04:22,800
however after the code execution attack

109
00:04:22,800 --> 00:04:24,479
amd announced some new

110
00:04:24,479 --> 00:04:28,720
cpus which then fixed the code ex

111
00:04:28,720 --> 00:04:32,240
which fixed which which fixed the code

112
00:04:32,240 --> 00:04:33,600
execution

113
00:04:33,600 --> 00:04:36,720
presented previously however then we saw

114
00:04:36,720 --> 00:04:39,759
another code execution attack

115
00:04:39,759 --> 00:04:42,080
which was however came along with some

116
00:04:42,080 --> 00:04:43,520
software patches

117
00:04:43,520 --> 00:04:46,160
which then again solved the code

118
00:04:46,160 --> 00:04:48,479
execution attack

119
00:04:48,479 --> 00:04:50,960
so what i want to present to you today

120
00:04:50,960 --> 00:04:51,600
now

121
00:04:51,600 --> 00:04:54,320
is a new code execution attack on amd

122
00:04:54,320 --> 00:04:55,680
scv

123
00:04:55,680 --> 00:04:58,800
which we call in severity

124
00:04:58,800 --> 00:05:02,560
so how does severity work well

125
00:05:02,560 --> 00:05:04,400
on the left hand side we see the guest

126
00:05:04,400 --> 00:05:05,840
physical memory so this

127
00:05:05,840 --> 00:05:07,840
the memory that is managed by the guest

128
00:05:07,840 --> 00:05:09,360
by the virtual machine

129
00:05:09,360 --> 00:05:11,440
and on the right hand side we see the

130
00:05:11,440 --> 00:05:13,680
host physical memory

131
00:05:13,680 --> 00:05:16,400
so the memory managed by a host or by

132
00:05:16,400 --> 00:05:18,320
the hypervisor

133
00:05:18,320 --> 00:05:20,880
to create a mapping between those two we

134
00:05:20,880 --> 00:05:23,360
have to set the slat the secondary level

135
00:05:23,360 --> 00:05:25,039
address translation

136
00:05:25,039 --> 00:05:28,000
which is managed also by the hypervisor

137
00:05:28,000 --> 00:05:28,960
so our attack

138
00:05:28,960 --> 00:05:31,919
consists of three steps in the first

139
00:05:31,919 --> 00:05:32,320
step

140
00:05:32,320 --> 00:05:34,400
we identify a trigger within the virtual

141
00:05:34,400 --> 00:05:36,000
machine's memory

142
00:05:36,000 --> 00:05:39,600
a trigger is some is a piece of code

143
00:05:39,600 --> 00:05:41,600
that we are able to trigger from outside

144
00:05:41,600 --> 00:05:44,479
of the virtual machine

145
00:05:44,479 --> 00:05:47,360
in the next step we identify we inject

146
00:05:47,360 --> 00:05:49,120
and identify a payload within the

147
00:05:49,120 --> 00:05:51,440
virtual machine's memory

148
00:05:51,440 --> 00:05:53,840
and in the third step what we do is we

149
00:05:53,840 --> 00:05:55,520
modify the slat so that

150
00:05:55,520 --> 00:05:58,160
the page of the trigger points to the

151
00:05:58,160 --> 00:05:58,720
page

152
00:05:58,720 --> 00:06:01,520
of the payload and therefore as soon as

153
00:06:01,520 --> 00:06:03,280
we trigger execution of the

154
00:06:03,280 --> 00:06:05,280
trigger what actually gets executed by

155
00:06:05,280 --> 00:06:07,600
the virtual machine is our payload

156
00:06:07,600 --> 00:06:10,639
and there we have our code execution so

157
00:06:10,639 --> 00:06:12,479
let's have a quick look into how

158
00:06:12,479 --> 00:06:17,600
we perform this steps exactly in detail

159
00:06:17,600 --> 00:06:21,039
so to identify the trigger we make use

160
00:06:21,039 --> 00:06:22,080
of mmis

161
00:06:22,080 --> 00:06:25,520
or non-maskable interrupts as soon as

162
00:06:25,520 --> 00:06:27,600
the hypervisor injects a non-mask will

163
00:06:27,600 --> 00:06:29,440
interrupt into the virtual machine

164
00:06:29,440 --> 00:06:31,840
the vm will immediately stop doing what

165
00:06:31,840 --> 00:06:33,680
it's doing at the moment

166
00:06:33,680 --> 00:06:36,400
and jump to its nmi handler to process

167
00:06:36,400 --> 00:06:38,160
the nmi

168
00:06:38,160 --> 00:06:40,240
so for us that means that nmis are

169
00:06:40,240 --> 00:06:43,039
perfect trigger

170
00:06:43,600 --> 00:06:46,800
to find the address of the nmi handler

171
00:06:46,800 --> 00:06:49,440
within the vm's kernel binary

172
00:06:49,440 --> 00:06:52,319
within the vm's kernel what we do is we

173
00:06:52,319 --> 00:06:53,759
analyze the kernel

174
00:06:53,759 --> 00:06:57,280
image of the of the virtual machine

175
00:06:57,280 --> 00:06:59,520
so we assume that the hypervisor is able

176
00:06:59,520 --> 00:07:02,160
to access this kernel image

177
00:07:02,160 --> 00:07:05,039
so by analyzing that we know at which

178
00:07:05,039 --> 00:07:05,919
offset

179
00:07:05,919 --> 00:07:08,960
of the of the binary of the common image

180
00:07:08,960 --> 00:07:12,639
the nmi handler is located however

181
00:07:12,639 --> 00:07:15,039
we have another problem as attacker

182
00:07:15,039 --> 00:07:17,440
which is kslr the kernel address-based

183
00:07:17,440 --> 00:07:19,199
layout randomization

184
00:07:19,199 --> 00:07:21,919
so this additionally randomizes the

185
00:07:21,919 --> 00:07:23,039
offset of the

186
00:07:23,039 --> 00:07:25,680
kernel binary within the within the

187
00:07:25,680 --> 00:07:27,919
virtual machine physical

188
00:07:27,919 --> 00:07:30,880
and virtual memory so we also have to

189
00:07:30,880 --> 00:07:33,759
determine the kslr offset

190
00:07:33,759 --> 00:07:35,599
to do this we discuss three different

191
00:07:35,599 --> 00:07:37,520
methods in our paper

192
00:07:37,520 --> 00:07:40,400
one of that i will discuss now in a bit

193
00:07:40,400 --> 00:07:43,120
more details

194
00:07:43,120 --> 00:07:46,160
so for the trigger identification

195
00:07:46,160 --> 00:07:48,000
what we have is we know that somewhere

196
00:07:48,000 --> 00:07:49,599
in the guest physical memory that is the

197
00:07:49,599 --> 00:07:50,720
trigger

198
00:07:50,720 --> 00:07:53,199
however the problem is the memory is

199
00:07:53,199 --> 00:07:54,160
encrypted

200
00:07:54,160 --> 00:07:56,960
so we don't know where this is located

201
00:07:56,960 --> 00:07:58,560
exactly

202
00:07:58,560 --> 00:08:01,520
so what we do now is we make a use of

203
00:08:01,520 --> 00:08:02,639
the fact that

204
00:08:02,639 --> 00:08:04,879
we as the hypervisor are able to control

205
00:08:04,879 --> 00:08:06,080
the sled

206
00:08:06,080 --> 00:08:09,840
specifically for each entry in the sled

207
00:08:09,840 --> 00:08:12,560
we are also able to modify the flags of

208
00:08:12,560 --> 00:08:14,560
the respective entry

209
00:08:14,560 --> 00:08:17,680
so among others the sled enter such a

210
00:08:17,680 --> 00:08:18,319


211
00:08:18,319 --> 00:08:20,800
page table entry has different flags you

212
00:08:20,800 --> 00:08:21,360
have the p

213
00:08:21,360 --> 00:08:23,680
flag which is the present flag that

214
00:08:23,680 --> 00:08:24,560
indicates if

215
00:08:24,560 --> 00:08:27,280
a flag is present or currently swapped

216
00:08:27,280 --> 00:08:28,960
out in memory then it would not be

217
00:08:28,960 --> 00:08:30,319
present

218
00:08:30,319 --> 00:08:33,200
another flag is the w flag which means

219
00:08:33,200 --> 00:08:34,000
if the

220
00:08:34,000 --> 00:08:36,880
page is writable or not and finally we

221
00:08:36,880 --> 00:08:38,958
have the executable flag indicating if

222
00:08:38,958 --> 00:08:41,360
the page is executable or not

223
00:08:41,360 --> 00:08:44,080
so in order to find the trigger what we

224
00:08:44,080 --> 00:08:44,800
do is

225
00:08:44,800 --> 00:08:48,000
we remove the executable flag from all

226
00:08:48,000 --> 00:08:52,399
pages of the virtual machine in the sled

227
00:08:52,399 --> 00:08:55,200
therefore as soon as the vm tries to

228
00:08:55,200 --> 00:08:56,000
execute

229
00:08:56,000 --> 00:08:59,279
any page calls from any page

230
00:08:59,279 --> 00:09:01,440
the hypervisor will get alerted that the

231
00:09:01,440 --> 00:09:02,880
vm tried to execute

232
00:09:02,880 --> 00:09:05,600
paid execute code from a non-executable

233
00:09:05,600 --> 00:09:07,040
page

234
00:09:07,040 --> 00:09:10,080
and this alert will include information

235
00:09:10,080 --> 00:09:12,000
about which page to this

236
00:09:12,000 --> 00:09:13,920
so what we're gonna do we remove the

237
00:09:13,920 --> 00:09:15,600
executable flag

238
00:09:15,600 --> 00:09:18,320
from all of the page table entries and

239
00:09:18,320 --> 00:09:19,200
then we're gonna

240
00:09:19,200 --> 00:09:21,920
trigger the execution of the trigger

241
00:09:21,920 --> 00:09:24,000
which means that

242
00:09:24,000 --> 00:09:27,040
if that's the trigger or the execution

243
00:09:27,040 --> 00:09:27,760
will trap

244
00:09:27,760 --> 00:09:31,200
in the sled and will alert us about

245
00:09:31,200 --> 00:09:34,480
the page the vm wanted to execute

246
00:09:34,480 --> 00:09:36,399
and with this we will be able to infer

247
00:09:36,399 --> 00:09:38,240
the location of the trigger within the

248
00:09:38,240 --> 00:09:40,880
virtual machine's memory

249
00:09:40,880 --> 00:09:44,959
so this is the first step to execute the

250
00:09:44,959 --> 00:09:46,720
the detection of the trigger in the

251
00:09:46,720 --> 00:09:48,800
virtual machine's memory

252
00:09:48,800 --> 00:09:51,680
the next step is the identification of

253
00:09:51,680 --> 00:09:54,240
the injection and identification of the

254
00:09:54,240 --> 00:09:55,760
payload within the virtual machine's

255
00:09:55,760 --> 00:09:57,920
memory

256
00:09:57,920 --> 00:09:59,920
for this let's first make a quick

257
00:09:59,920 --> 00:10:02,800
excursion into verteo

258
00:10:02,800 --> 00:10:06,000
without suv so word io is

259
00:10:06,000 --> 00:10:08,640
the most common system uh vms and

260
00:10:08,640 --> 00:10:10,079
hypervisors use

261
00:10:10,079 --> 00:10:13,680
to exchange data so how this works is we

262
00:10:13,680 --> 00:10:15,120
have the virtual machine on the left

263
00:10:15,120 --> 00:10:16,000
hand side

264
00:10:16,000 --> 00:10:18,640
and the hypervise on the right hand side

265
00:10:18,640 --> 00:10:19,440
so if

266
00:10:19,440 --> 00:10:21,600
the virtual device in the hypervisor

267
00:10:21,600 --> 00:10:23,920
receives has some data it wants to share

268
00:10:23,920 --> 00:10:24,560
with the

269
00:10:24,560 --> 00:10:27,040
driver in the virtual machine let's say

270
00:10:27,040 --> 00:10:29,200
for example a network packet

271
00:10:29,200 --> 00:10:31,360
what it will do it will use make use of

272
00:10:31,360 --> 00:10:33,279
virtuo

273
00:10:33,279 --> 00:10:35,600
within verteo we have the word queue

274
00:10:35,600 --> 00:10:36,640
structures

275
00:10:36,640 --> 00:10:39,120
such a word queue structure consists of

276
00:10:39,120 --> 00:10:39,839
multiple

277
00:10:39,839 --> 00:10:42,640
structures itself we have the available

278
00:10:42,640 --> 00:10:43,040
ring

279
00:10:43,040 --> 00:10:45,680
we have the u string and scripted table

280
00:10:45,680 --> 00:10:48,479
and some buffers

281
00:10:48,640 --> 00:10:50,640
so when the virtual device now wants to

282
00:10:50,640 --> 00:10:52,800
send some data to the driver

283
00:10:52,800 --> 00:10:54,640
in the first step it will read the

284
00:10:54,640 --> 00:10:56,560
available ring

285
00:10:56,560 --> 00:10:59,040
and the weibull ring will indicate which

286
00:10:59,040 --> 00:11:00,560
buffers are available

287
00:11:00,560 --> 00:11:02,399
so the weibull ring has some index to

288
00:11:02,399 --> 00:11:04,000
the descriptor table

289
00:11:04,000 --> 00:11:06,399
and from the descriptor table a

290
00:11:06,399 --> 00:11:08,480
hypervisor can infer which buffers it

291
00:11:08,480 --> 00:11:10,160
can write to

292
00:11:10,160 --> 00:11:12,480
so in the next step it will write the

293
00:11:12,480 --> 00:11:14,000
information so in our case

294
00:11:14,000 --> 00:11:17,519
the network packet into the buffer

295
00:11:17,519 --> 00:11:19,920
and finally it will indicate in the

296
00:11:19,920 --> 00:11:21,839
u-string that it has just

297
00:11:21,839 --> 00:11:23,600
used up the buffer and written

298
00:11:23,600 --> 00:11:25,920
information to it

299
00:11:25,920 --> 00:11:28,000
so then this allows the driver in the

300
00:11:28,000 --> 00:11:29,120
virtual machine

301
00:11:29,120 --> 00:11:32,240
to read the u-string and to determine

302
00:11:32,240 --> 00:11:34,079
from which buffer to read information

303
00:11:34,079 --> 00:11:35,839
from

304
00:11:35,839 --> 00:11:38,800
so however this is the setup without suv

305
00:11:38,800 --> 00:11:39,839
with scb

306
00:11:39,839 --> 00:11:43,120
we now face the problem that everything

307
00:11:43,120 --> 00:11:44,959
on the left hand side everything that's

308
00:11:44,959 --> 00:11:47,600
part of the virtual machine is encrypted

309
00:11:47,600 --> 00:11:49,600
which means that the hypervisor is not

310
00:11:49,600 --> 00:11:51,519
able to access any of the vertices

311
00:11:51,519 --> 00:11:53,519
structure

312
00:11:53,519 --> 00:11:55,839
which poses a problem for the water or

313
00:11:55,839 --> 00:11:56,959
exchange we

314
00:11:56,959 --> 00:12:00,079
felt before how sdv works around this

315
00:12:00,079 --> 00:12:01,440
issue

316
00:12:01,440 --> 00:12:03,600
is that it introduces an additional

317
00:12:03,600 --> 00:12:04,959
memory area

318
00:12:04,959 --> 00:12:07,600
a shared memory area that is accessible

319
00:12:07,600 --> 00:12:09,120
for both the virtual machine and the

320
00:12:09,120 --> 00:12:11,839
hypervisor

321
00:12:12,160 --> 00:12:15,279
and then it bounces the

322
00:12:15,279 --> 00:12:17,279
information from the shared memory to

323
00:12:17,279 --> 00:12:19,440
the vm but first let's have a

324
00:12:19,440 --> 00:12:22,079
look at the first few steps those are

325
00:12:22,079 --> 00:12:24,079
exactly the same as we've seen before

326
00:12:24,079 --> 00:12:25,920
so the hypervisor will first read from

327
00:12:25,920 --> 00:12:28,079
the weibull ring

328
00:12:28,079 --> 00:12:30,240
then write the information in the buffer

329
00:12:30,240 --> 00:12:32,000
indicate in the u string

330
00:12:32,000 --> 00:12:34,320
that it has just written the information

331
00:12:34,320 --> 00:12:35,360
and finally

332
00:12:35,360 --> 00:12:37,519
the driver will read from the u string

333
00:12:37,519 --> 00:12:39,279
and so now the driver will know

334
00:12:39,279 --> 00:12:40,959
or the vm will know from which

335
00:12:40,959 --> 00:12:42,800
information to consume

336
00:12:42,800 --> 00:12:44,240
from which buffer to consume the

337
00:12:44,240 --> 00:12:45,839
information

338
00:12:45,839 --> 00:12:48,480
the difference now between what we have

339
00:12:48,480 --> 00:12:49,920
seen previously

340
00:12:49,920 --> 00:12:52,000
is that the vm will now bounce the

341
00:12:52,000 --> 00:12:54,079
information from the shared

342
00:12:54,079 --> 00:12:57,680
buffer to the packet buffer in its

343
00:12:57,680 --> 00:13:01,040
own encrypted private memory and only

344
00:13:01,040 --> 00:13:02,639
then the driver will consume the

345
00:13:02,639 --> 00:13:05,200
information

346
00:13:05,360 --> 00:13:08,959
so where we gonna step in is the process

347
00:13:08,959 --> 00:13:11,760
of bouncing the information from the

348
00:13:11,760 --> 00:13:13,200
buffer in the shared memory

349
00:13:13,200 --> 00:13:15,360
to the packet buffer in the private

350
00:13:15,360 --> 00:13:16,880
memory

351
00:13:16,880 --> 00:13:20,079
specifically similar to before we make

352
00:13:20,079 --> 00:13:21,360
use of the fact

353
00:13:21,360 --> 00:13:23,839
that we control the sled and therefore

354
00:13:23,839 --> 00:13:25,519
we're able to control

355
00:13:25,519 --> 00:13:28,560
the page table entries and the flags of

356
00:13:28,560 --> 00:13:31,200
the respective page table entries

357
00:13:31,200 --> 00:13:33,120
so what we're gonna do is we're to

358
00:13:33,120 --> 00:13:35,200
remove the present flag

359
00:13:35,200 --> 00:13:38,639
from all buffers off in the shared

360
00:13:38,639 --> 00:13:39,519
memory page

361
00:13:39,519 --> 00:13:41,680
so as soon as you put as the hypervisor

362
00:13:41,680 --> 00:13:44,000
adds some

363
00:13:44,000 --> 00:13:45,680
add some network packets into this

364
00:13:45,680 --> 00:13:48,880
buffers we will remove the present flag

365
00:13:48,880 --> 00:13:51,839
this means that as soon as the vm tries

366
00:13:51,839 --> 00:13:52,720
to access

367
00:13:52,720 --> 00:13:55,839
access the buffer and read from it we

368
00:13:55,839 --> 00:13:57,360
will get alerted

369
00:13:57,360 --> 00:13:59,760
and then we can conclude okay the vm has

370
00:13:59,760 --> 00:14:01,120
just read the buffer

371
00:14:01,120 --> 00:14:03,600
read from the buffer so the next step

372
00:14:03,600 --> 00:14:04,160
will be

373
00:14:04,160 --> 00:14:06,959
writing into the packet buffer however

374
00:14:06,959 --> 00:14:07,920
we don't know yet

375
00:14:07,920 --> 00:14:09,360
where the packet buffer is in the

376
00:14:09,360 --> 00:14:11,760
virtual machine's memory

377
00:14:11,760 --> 00:14:14,800
so what we do is next again is the

378
00:14:14,800 --> 00:14:16,639
similar approach

379
00:14:16,639 --> 00:14:19,199
this time remove the writable flag from

380
00:14:19,199 --> 00:14:20,880
all of the vm's

381
00:14:20,880 --> 00:14:23,839
pages meaning that as soon as the vm

382
00:14:23,839 --> 00:14:24,320
tries

383
00:14:24,320 --> 00:14:26,880
to write to any of its pages we will get

384
00:14:26,880 --> 00:14:28,880
an alert

385
00:14:28,880 --> 00:14:31,839
so after having read the vm will now

386
00:14:31,839 --> 00:14:33,519
write the information into the packet

387
00:14:33,519 --> 00:14:34,800
buffer

388
00:14:34,800 --> 00:14:36,800
and since the packet buffer is missing

389
00:14:36,800 --> 00:14:38,160
the writeable flag

390
00:14:38,160 --> 00:14:40,000
we'll get information about where the

391
00:14:40,000 --> 00:14:44,560
right the buffer is located

392
00:14:44,560 --> 00:14:46,079
and this is the second step the

393
00:14:46,079 --> 00:14:48,880
information uh the identification of the

394
00:14:48,880 --> 00:14:51,360
payload

395
00:14:51,360 --> 00:14:54,800
for the last step the remapping

396
00:14:54,800 --> 00:14:56,480
let's have a quick look at how we do

397
00:14:56,480 --> 00:14:59,360
this on the left hand side we see the

398
00:14:59,360 --> 00:15:00,800
trigger page

399
00:15:00,800 --> 00:15:02,560
so we have to trigger the nmi handler

400
00:15:02,560 --> 00:15:05,760
which is located at offset 700

401
00:15:05,760 --> 00:15:07,279
and on the right hand side we have the

402
00:15:07,279 --> 00:15:10,079
payload page

403
00:15:10,079 --> 00:15:12,399
for this one in our example here we know

404
00:15:12,399 --> 00:15:14,399
okay when we inject our payload it will

405
00:15:14,399 --> 00:15:17,519
be located at offset six zero zero

406
00:15:17,519 --> 00:15:19,920
so what we have to do first when we

407
00:15:19,920 --> 00:15:21,920
inject our network packet we add some

408
00:15:21,920 --> 00:15:23,120
arbitrary data

409
00:15:23,120 --> 00:15:25,519
so that the payload that we checked

410
00:15:25,519 --> 00:15:26,399
afterwards

411
00:15:26,399 --> 00:15:29,839
is located at also 700 that

412
00:15:29,839 --> 00:15:32,560
exactly the same offset as the trigger

413
00:15:32,560 --> 00:15:33,839
which means that

414
00:15:33,839 --> 00:15:36,399
when we now do the remapping and remap

415
00:15:36,399 --> 00:15:38,839
the original trigger page to the payload

416
00:15:38,839 --> 00:15:40,000
page

417
00:15:40,000 --> 00:15:41,920
as soon as the virtual machine fetches

418
00:15:41,920 --> 00:15:43,920
instruction from this offset where it

419
00:15:43,920 --> 00:15:46,000
assumes the trigger to be

420
00:15:46,000 --> 00:15:47,680
what it will actually do is it will

421
00:15:47,680 --> 00:15:49,519
fetch instructions from the payload

422
00:15:49,519 --> 00:15:52,000
and execute this instructions and there

423
00:15:52,000 --> 00:15:55,839
we have our code execution

424
00:15:57,360 --> 00:15:59,839
so again going back this is the overview

425
00:15:59,839 --> 00:16:00,959
of our attacks

426
00:16:00,959 --> 00:16:04,079
three simple steps identification of the

427
00:16:04,079 --> 00:16:04,560
trigger

428
00:16:04,560 --> 00:16:06,639
identification of the payload and

429
00:16:06,639 --> 00:16:08,000
finally the remapping

430
00:16:08,000 --> 00:16:11,519
from the trigger to the payload

431
00:16:11,519 --> 00:16:15,120
so going back to our timeline

432
00:16:16,079 --> 00:16:18,800
we said the this is like severity the

433
00:16:18,800 --> 00:16:22,639
code execution attack

434
00:16:22,639 --> 00:16:25,680
however the good news is that amd has

435
00:16:25,680 --> 00:16:27,279
recently announced suv

436
00:16:27,279 --> 00:16:29,680
snp which stands for secure nested

437
00:16:29,680 --> 00:16:31,120
paging

438
00:16:31,120 --> 00:16:33,839
smp provides additional integrity

439
00:16:33,839 --> 00:16:34,560
protection

440
00:16:34,560 --> 00:16:39,359
to vm's encrypted with suv smp

441
00:16:42,000 --> 00:16:45,360
yes so let's have a look how this how

442
00:16:45,360 --> 00:16:48,320
this defense mechanism works

443
00:16:48,320 --> 00:16:51,759
so smp does not prevent us to ex

444
00:16:51,759 --> 00:16:53,600
to perform the first few steps of our

445
00:16:53,600 --> 00:16:55,360
attacks meaning that we would still be

446
00:16:55,360 --> 00:16:57,279
able to identify the trigger

447
00:16:57,279 --> 00:17:00,480
and the payload of our attack

448
00:17:00,480 --> 00:17:03,279
however what it would prevent is the

449
00:17:03,279 --> 00:17:05,280
third step the remapping of

450
00:17:05,280 --> 00:17:07,119
trigger to the payload page and

451
00:17:07,119 --> 00:17:08,880
therefore it would prevent the whole

452
00:17:08,880 --> 00:17:11,119
attack

453
00:17:11,119 --> 00:17:13,760
so in conclusion i showed to use a

454
00:17:13,760 --> 00:17:14,720
rarity

455
00:17:14,720 --> 00:17:16,720
an attack which allows us to execute

456
00:17:16,720 --> 00:17:18,240
arbitrary codes in

457
00:17:18,240 --> 00:17:23,280
vms protected by either scv or scves

458
00:17:23,280 --> 00:17:26,319
we achieved this goal by using page

459
00:17:26,319 --> 00:17:27,359
tracking

460
00:17:27,359 --> 00:17:30,879
and sled remapping

461
00:17:30,960 --> 00:17:33,120
we have we do have our a proof of

462
00:17:33,120 --> 00:17:35,360
concept which we also evaluate in our

463
00:17:35,360 --> 00:17:36,160
paper

464
00:17:36,160 --> 00:17:38,960
which is based on linux and word io

465
00:17:38,960 --> 00:17:41,039
however it is important to keep in mind

466
00:17:41,039 --> 00:17:43,360
that the general concept of our attack

467
00:17:43,360 --> 00:17:45,679
the three steps the payload

468
00:17:45,679 --> 00:17:47,919
identification trigger identification to

469
00:17:47,919 --> 00:17:48,799
beam up

470
00:17:48,799 --> 00:17:51,440
also applied to any other guest

471
00:17:51,440 --> 00:17:53,600
operating system so we don't necessarily

472
00:17:53,600 --> 00:17:54,240
lie on

473
00:17:54,240 --> 00:17:56,720
linux

474
00:17:57,520 --> 00:18:00,400
so we show that suv and svs are

475
00:18:00,400 --> 00:18:02,480
vulnerable to various attacks

476
00:18:02,480 --> 00:18:05,679
however the good news is that

477
00:18:05,679 --> 00:18:08,400
s p adds integrity also adds integrity

478
00:18:08,400 --> 00:18:10,000
protection

479
00:18:10,000 --> 00:18:12,720
and the first hardware which supports

480
00:18:12,720 --> 00:18:14,000
suv smp has

481
00:18:14,000 --> 00:18:17,440
been recently announced in the variable

482
00:18:17,440 --> 00:18:20,960
in q1 2021 and there's also been the

483
00:18:20,960 --> 00:18:21,440
first

484
00:18:21,440 --> 00:18:24,320
software patches which means that there

485
00:18:24,320 --> 00:18:24,720
is

486
00:18:24,720 --> 00:18:27,200
light at the end of the tunnel and with

487
00:18:27,200 --> 00:18:29,039
that i'm at the end of my talk i'll be

488
00:18:29,039 --> 00:18:29,919
happy to

489
00:18:29,919 --> 00:18:33,600
discuss with you any questions thank you

490
00:18:33,600 --> 00:18:36,960
thanks matias for the nice presentation

491
00:18:36,960 --> 00:18:40,840
any questions from the audience

492
00:18:40,840 --> 00:18:44,480
uh so actually i i'm curious uh what is

493
00:18:44,480 --> 00:18:45,760
the mechanism that

494
00:18:45,760 --> 00:18:50,160
uh in uh uh sc way smp that prevents a

495
00:18:50,160 --> 00:18:50,960
remapping

496
00:18:50,960 --> 00:18:54,400
attack um so what they do

497
00:18:54,400 --> 00:18:56,640
is they introduce what they call a

498
00:18:56,640 --> 00:18:58,960
reverse mapping table

499
00:18:58,960 --> 00:19:02,380
so you have an additional

500
00:19:02,380 --> 00:19:04,240
[Music]

501
00:19:04,240 --> 00:19:06,559
table which prove this reverse mapping

502
00:19:06,559 --> 00:19:08,799
table provides additional information to

503
00:19:08,799 --> 00:19:10,160
the page tables

504
00:19:10,160 --> 00:19:12,640
which also say to which guest physical

505
00:19:12,640 --> 00:19:13,919
address

506
00:19:13,919 --> 00:19:16,720
and to which virtual machine a physical

507
00:19:16,720 --> 00:19:18,000
page is mapped

508
00:19:18,000 --> 00:19:20,640
so if we would do the remapping the

509
00:19:20,640 --> 00:19:22,640
hardware will be able to detect okay

510
00:19:22,640 --> 00:19:23,200
that

511
00:19:23,200 --> 00:19:25,600
now actually this the page is still

512
00:19:25,600 --> 00:19:26,550
mapped to the same

513
00:19:26,550 --> 00:19:27,760
[Music]

514
00:19:27,760 --> 00:19:29,760
to the same virtual machine but to a

515
00:19:29,760 --> 00:19:30,880
different guest

516
00:19:30,880 --> 00:19:33,360
physical address and but that will be

517
00:19:33,360 --> 00:19:35,600
able to detect the remapping

518
00:19:35,600 --> 00:19:38,960
okay um so does it incur additional

519
00:19:38,960 --> 00:19:42,000
performance overhead

520
00:19:42,400 --> 00:19:45,760
good question uh as it's not available

521
00:19:45,760 --> 00:19:47,440
yet

522
00:19:47,440 --> 00:19:51,120
i can't tell you i don't know

523
00:19:51,120 --> 00:19:53,360
okay okay obviously like obviously it

524
00:19:53,360 --> 00:19:54,160
has to

525
00:19:54,160 --> 00:19:56,240
there has to be some performance

526
00:19:56,240 --> 00:19:58,480
overhead

527
00:19:58,480 --> 00:20:03,200
but it's hard to say how much exactly

528
00:20:03,200 --> 00:20:06,559
okay uh maybe one more question um so

529
00:20:06,559 --> 00:20:10,080
uh uh in your attack uh you use

530
00:20:10,080 --> 00:20:14,720
uh mmi uh as a handler as a trigger page

531
00:20:14,720 --> 00:20:16,720
uh is there any particular reason you

532
00:20:16,720 --> 00:20:18,480
choose mmi

533
00:20:18,480 --> 00:20:21,760
uh handler well uh

534
00:20:21,760 --> 00:20:25,120
we wanted some code that we know that is

535
00:20:25,120 --> 00:20:26,159
executed

536
00:20:26,159 --> 00:20:29,760
really as soon as we trigger

537
00:20:29,760 --> 00:20:31,600
there would of course we could also take

538
00:20:31,600 --> 00:20:32,880
something else but

539
00:20:32,880 --> 00:20:34,880
this has just the advantage that we can

540
00:20:34,880 --> 00:20:36,799
stop the vm

541
00:20:36,799 --> 00:20:39,200
then remove the executable flag from all

542
00:20:39,200 --> 00:20:40,799
of its pages

543
00:20:40,799 --> 00:20:42,559
and check the nmi while the virtual

544
00:20:42,559 --> 00:20:44,159
machine is still stopped

545
00:20:44,159 --> 00:20:46,080
and as soon as we will resume the

546
00:20:46,080 --> 00:20:48,080
virtual machine it will directly jump to

547
00:20:48,080 --> 00:20:49,679
it again

548
00:20:49,679 --> 00:20:51,600
so we don't have to use an nmi but it

549
00:20:51,600 --> 00:20:53,679
just fulfills all the requirements we

550
00:20:53,679 --> 00:20:54,480
need

551
00:20:54,480 --> 00:20:59,360
okay okay any

552
00:20:59,360 --> 00:21:02,240
questions from the audience please feel

553
00:21:02,240 --> 00:21:03,520
free to post

554
00:21:03,520 --> 00:21:06,158
in the chat

555
00:21:06,559 --> 00:21:10,080
um i have a question um

556
00:21:10,080 --> 00:21:12,559
how did you figure out the the offset of

557
00:21:12,559 --> 00:21:14,480
this nmi handler

558
00:21:14,480 --> 00:21:17,679
inside the page uh

559
00:21:17,679 --> 00:21:20,320
for this we assume that we have access

560
00:21:20,320 --> 00:21:21,679
to the kernel binary

561
00:21:21,679 --> 00:21:24,720
so the

562
00:21:24,720 --> 00:21:27,039
with kslr the offset of the current

563
00:21:27,039 --> 00:21:27,760
binary

564
00:21:27,760 --> 00:21:30,640
is randomized but the offset within the

565
00:21:30,640 --> 00:21:33,280
page will stay the same

566
00:21:33,280 --> 00:21:35,760
so we know that this will stay the uh

567
00:21:35,760 --> 00:21:37,679
the offset of within the page will stay

568
00:21:37,679 --> 00:21:38,240
the same

569
00:21:38,240 --> 00:21:40,080
what we only have to find is the page

570
00:21:40,080 --> 00:21:41,440
itself

571
00:21:41,440 --> 00:21:45,280
okay sure that makes sense yeah thanks

572
00:21:45,280 --> 00:21:48,480
welcome okay

573
00:21:48,480 --> 00:21:51,600
thank you so much for the nice work

574
00:21:51,600 --> 00:21:55,199
very interesting work

