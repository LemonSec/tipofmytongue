1
00:00:10,400 --> 00:00:13,280
all right uh let's get started so

2
00:00:13,280 --> 00:00:16,160
uh welcome back hope you all had a good

3
00:00:16,160 --> 00:00:16,880
break

4
00:00:16,880 --> 00:00:20,160
um so our next session is

5
00:00:20,160 --> 00:00:23,359
protocols um we have two papers

6
00:00:23,359 --> 00:00:27,119
in this session and each each talk will

7
00:00:27,119 --> 00:00:27,519
have

8
00:00:27,519 --> 00:00:30,560
uh 20 minutes including q

9
00:00:30,560 --> 00:00:34,160
a so please post your question in a q a

10
00:00:34,160 --> 00:00:35,520
tab

11
00:00:35,520 --> 00:00:38,880
if you have any questions

12
00:00:39,600 --> 00:00:42,640
so the first talk is

13
00:00:42,640 --> 00:00:46,719
bad usbc uh revisiting bad usb with type

14
00:00:46,719 --> 00:00:47,840
c

15
00:00:47,840 --> 00:00:51,920
uh uh the speaker is

16
00:00:51,920 --> 00:00:54,800
from uh southern university of science

17
00:00:54,800 --> 00:00:58,160
and technology china

18
00:01:02,079 --> 00:01:05,360
okay hello everyone i'm

19
00:01:05,360 --> 00:01:08,000
hongyuu-lu and i'm here today to present

20
00:01:08,000 --> 00:01:08,720
our work

21
00:01:08,720 --> 00:01:11,439
badassbc revisiting various b with type

22
00:01:11,439 --> 00:01:12,320
c

23
00:01:12,320 --> 00:01:14,560
this is actually a course project of

24
00:01:14,560 --> 00:01:16,560
computer security instructed by

25
00:01:16,560 --> 00:01:19,040
professor john in southern university

26
00:01:19,040 --> 00:01:22,320
of science and technology here is the

27
00:01:22,320 --> 00:01:23,920
outline on my today's

28
00:01:23,920 --> 00:01:26,400
presentation first we will go through

29
00:01:26,400 --> 00:01:29,119
some background about usb protocols

30
00:01:29,119 --> 00:01:31,360
then i will introduce the design of our

31
00:01:31,360 --> 00:01:32,240
battle sbc

32
00:01:32,240 --> 00:01:34,720
and the prototype we implemented to test

33
00:01:34,720 --> 00:01:36,079
its efficiency

34
00:01:36,079 --> 00:01:38,320
after that i will talk about a case

35
00:01:38,320 --> 00:01:40,720
study of a real life scenario

36
00:01:40,720 --> 00:01:43,920
of sharing power bank where we simulated

37
00:01:43,920 --> 00:01:45,439
steering private data

38
00:01:45,439 --> 00:01:48,720
using barriers bc after the case study i

39
00:01:48,720 --> 00:01:50,880
will also discuss the limitations

40
00:01:50,880 --> 00:01:52,880
mitigations and the responsible

41
00:01:52,880 --> 00:01:55,200
disclosure will make too far away

42
00:01:55,200 --> 00:01:57,600
lastly i will summarize and conclude

43
00:01:57,600 --> 00:02:00,559
this presentation

44
00:02:00,640 --> 00:02:04,320
usb short for universal serial bus

45
00:02:04,320 --> 00:02:06,960
it is kind of a ubiquitous protocol

46
00:02:06,960 --> 00:02:09,598
nowadays you can use it to connect

47
00:02:09,598 --> 00:02:12,879
to hids like keyboard or mouse you can

48
00:02:12,879 --> 00:02:14,160
use it to

49
00:02:14,160 --> 00:02:16,319
connect a power bank and charge your

50
00:02:16,319 --> 00:02:18,080
phone when going outside

51
00:02:18,080 --> 00:02:20,480
and you can also use it to carry data

52
00:02:20,480 --> 00:02:23,599
runs with a flash drive

53
00:02:23,599 --> 00:02:25,840
what's more with type c connector

54
00:02:25,840 --> 00:02:26,720
introduced

55
00:02:26,720 --> 00:02:29,920
with usb 3.1 you no longer need to face

56
00:02:29,920 --> 00:02:32,160
a massive ball of cables

57
00:02:32,160 --> 00:02:34,879
all you'll need is just a single usb

58
00:02:34,879 --> 00:02:37,760
type-c cable

59
00:02:37,760 --> 00:02:40,959
but just as the same goes with great

60
00:02:40,959 --> 00:02:41,519
power

61
00:02:41,519 --> 00:02:44,480
comes great responsibility there is

62
00:02:44,480 --> 00:02:46,480
there are all kinds of vulnerabilities

63
00:02:46,480 --> 00:02:47,519
were discovered

64
00:02:47,519 --> 00:02:51,280
during the development of usb protocol

65
00:02:51,280 --> 00:02:56,000
in 1996 usb 1.0 was announced

66
00:02:56,000 --> 00:02:59,280
with the supports for basic hids like

67
00:02:59,280 --> 00:03:00,959
keyboards and mice

68
00:03:00,959 --> 00:03:03,519
at that time the battery fb attack is

69
00:03:03,519 --> 00:03:04,080
already

70
00:03:04,080 --> 00:03:07,440
possible as there are few authentication

71
00:03:07,440 --> 00:03:10,800
mechanisms in usb protocol

72
00:03:10,800 --> 00:03:14,239
in 2013 usb 3.1

73
00:03:14,239 --> 00:03:17,040
was released with a major change in the

74
00:03:17,040 --> 00:03:18,480
connector standard

75
00:03:18,480 --> 00:03:21,840
in usb 3.1 a new connector standard

76
00:03:21,840 --> 00:03:23,440
called usb type-c was

77
00:03:23,440 --> 00:03:25,920
introduced which allows transmission of

78
00:03:25,920 --> 00:03:28,480
video data like display ports over a usb

79
00:03:28,480 --> 00:03:29,200
cable

80
00:03:29,200 --> 00:03:31,519
this also paved the path for our today's

81
00:03:31,519 --> 00:03:32,560
work

82
00:03:32,560 --> 00:03:36,720
usbc now battery as we see

83
00:03:37,360 --> 00:03:39,599
as our work is an extension to the

84
00:03:39,599 --> 00:03:40,560
original

85
00:03:40,560 --> 00:03:43,280
badass b attack now i will introduce the

86
00:03:43,280 --> 00:03:45,200
traditional battery sb attack and its

87
00:03:45,200 --> 00:03:46,799
limitations

88
00:03:46,799 --> 00:03:49,760
badass b attack is attack presented on

89
00:03:49,760 --> 00:03:50,959
blackhead

90
00:03:50,959 --> 00:03:55,439
2014. it abuses the lack of

91
00:03:56,400 --> 00:03:59,599
so it's lost at here right

92
00:03:59,599 --> 00:04:03,200
yes uh i think you just started the

93
00:04:03,200 --> 00:04:06,879
introduction of bad usb okay okay

94
00:04:06,879 --> 00:04:10,319
uh okay so uh as our work

95
00:04:10,319 --> 00:04:13,439
is actually okay let me go back

96
00:04:13,439 --> 00:04:17,040
okay so as our work is an extension to

97
00:04:17,040 --> 00:04:18,399
the original badass b

98
00:04:18,399 --> 00:04:20,720
attack now i will introduce the

99
00:04:20,720 --> 00:04:22,560
traditional battle usb attack and its

100
00:04:22,560 --> 00:04:24,080
limitations

101
00:04:24,080 --> 00:04:26,720
badass b attack is an attack presented

102
00:04:26,720 --> 00:04:28,080
on blackhead

103
00:04:28,080 --> 00:04:30,720
2014 it abuses the lack of

104
00:04:30,720 --> 00:04:32,000
authentication

105
00:04:32,000 --> 00:04:34,720
of usb protocol to trick the victim's

106
00:04:34,720 --> 00:04:36,240
device into believing

107
00:04:36,240 --> 00:04:39,040
a flash drive is actually a keyboard

108
00:04:39,040 --> 00:04:41,520
thus executing malicious commands such

109
00:04:41,520 --> 00:04:43,840
as reversal share

110
00:04:43,840 --> 00:04:46,960
but it has a major drawback

111
00:04:46,960 --> 00:04:50,080
as we can see here aft after it

112
00:04:50,080 --> 00:04:52,720
executed a malicious command such as a

113
00:04:52,720 --> 00:04:53,680
reversal share

114
00:04:53,680 --> 00:04:56,240
the attacker cannot actually obtain any

115
00:04:56,240 --> 00:04:58,880
feedback until the shell is established

116
00:04:58,880 --> 00:05:02,800
which largely limited this attack

117
00:05:02,800 --> 00:05:05,600
and we summarized the drawbacks of

118
00:05:05,600 --> 00:05:06,800
traditional battle asp

119
00:05:06,800 --> 00:05:10,800
attacks as photos first due to the lack

120
00:05:10,800 --> 00:05:11,120
of

121
00:05:11,120 --> 00:05:13,680
a stable feedback channel during the

122
00:05:13,680 --> 00:05:15,440
attack process

123
00:05:15,440 --> 00:05:17,840
the attacker cannot view the attack

124
00:05:17,840 --> 00:05:18,479
progress

125
00:05:18,479 --> 00:05:22,800
thus cannot carry out process attacks

126
00:05:22,800 --> 00:05:25,840
secondly as the battery usb

127
00:05:25,840 --> 00:05:28,960
only provides hid emulations it is

128
00:05:28,960 --> 00:05:31,199
almost impossible for battery sb to

129
00:05:31,199 --> 00:05:33,520
interact with the gui components

130
00:05:33,520 --> 00:05:36,800
such as a button this severely limited

131
00:05:36,800 --> 00:05:39,039
the potential of bad usb on mobile

132
00:05:39,039 --> 00:05:39,840
devices

133
00:05:39,840 --> 00:05:41,919
which usually does not equip with a

134
00:05:41,919 --> 00:05:44,960
powerful command line interface

135
00:05:44,960 --> 00:05:47,440
apart from that to establish a

136
00:05:47,440 --> 00:05:50,000
connection between the attacker and the

137
00:05:50,000 --> 00:05:52,240
victim's device such as a

138
00:05:52,240 --> 00:05:54,800
reversal shell better speed typically

139
00:05:54,800 --> 00:05:55,600
requires

140
00:05:55,600 --> 00:05:58,080
the host network usage which may be

141
00:05:58,080 --> 00:05:59,520
detectable to

142
00:05:59,520 --> 00:06:02,000
ids intrusion detection system or

143
00:06:02,000 --> 00:06:05,199
stopped by firewalls

144
00:06:05,680 --> 00:06:08,080
here we introduced the design of our

145
00:06:08,080 --> 00:06:09,120
battery sbc

146
00:06:09,120 --> 00:06:12,160
and how we solved the three limitations

147
00:06:12,160 --> 00:06:14,560
of battery sb

148
00:06:14,560 --> 00:06:17,680
as we can see here the battery sbc is

149
00:06:17,680 --> 00:06:18,479
connected

150
00:06:18,479 --> 00:06:20,960
to the victim's device using a usb

151
00:06:20,960 --> 00:06:22,080
type-c cable

152
00:06:22,080 --> 00:06:24,720
which can transmit both video signal and

153
00:06:24,720 --> 00:06:27,680
hid signals

154
00:06:27,759 --> 00:06:30,240
in this way our battery svc can collect

155
00:06:30,240 --> 00:06:32,840
the videos

156
00:06:32,840 --> 00:06:35,840
okay

157
00:06:36,960 --> 00:06:40,000
uh in this way our balance pc can

158
00:06:40,000 --> 00:06:40,720
collect

159
00:06:40,720 --> 00:06:42,960
video stream of victims device and build

160
00:06:42,960 --> 00:06:44,720
a stable feedback channel

161
00:06:44,720 --> 00:06:47,520
using the video capture card listed here

162
00:06:47,520 --> 00:06:48,560
this forms a

163
00:06:48,560 --> 00:06:51,520
video stream parts of our values pc and

164
00:06:51,520 --> 00:06:52,400
solves the first

165
00:06:52,400 --> 00:06:55,440
limitation of the original battery sb

166
00:06:55,440 --> 00:06:58,720
attack what's more with this video

167
00:06:58,720 --> 00:07:00,000
feedback channel

168
00:07:00,000 --> 00:07:03,440
the hid emulator here now can emulate

169
00:07:03,440 --> 00:07:05,759
not only keyboard but also mouse to

170
00:07:05,759 --> 00:07:06,560
perform

171
00:07:06,560 --> 00:07:09,919
gui interaction on the victim's device

172
00:07:09,919 --> 00:07:12,080
this solves the second limitation of the

173
00:07:12,080 --> 00:07:14,639
original battery usb attack

174
00:07:14,639 --> 00:07:17,440
lastly as we can see in this figure our

175
00:07:17,440 --> 00:07:18,319
batteries we see

176
00:07:18,319 --> 00:07:21,520
also use a individual wi-fi

177
00:07:21,520 --> 00:07:24,319
slash gsm module to transmitting data

178
00:07:24,319 --> 00:07:25,280
between

179
00:07:25,280 --> 00:07:28,080
the attacker and the victim's device

180
00:07:28,080 --> 00:07:30,000
this avoids being detected

181
00:07:30,000 --> 00:07:32,639
by the firewall or idis on the victim's

182
00:07:32,639 --> 00:07:35,199
devices

183
00:07:35,280 --> 00:07:38,560
here is a prototype we built to test

184
00:07:38,560 --> 00:07:42,880
the efficiency of our battery as we see

185
00:07:42,880 --> 00:07:46,319
here a stands for the victim's device

186
00:07:46,319 --> 00:07:49,360
which is a huawei smartphone b is the

187
00:07:49,360 --> 00:07:52,879
com is a compact version of our battery

188
00:07:52,879 --> 00:07:53,440
sbc

189
00:07:53,440 --> 00:07:56,479
after it is assembled and on the right

190
00:07:56,479 --> 00:08:00,560
is the components of our values pc

191
00:08:00,560 --> 00:08:03,919
one is the usbc hub we use to connect

192
00:08:03,919 --> 00:08:06,720
all the other components two is

193
00:08:06,720 --> 00:08:07,520
raspberry pi

194
00:08:07,520 --> 00:08:10,160
as the onboard computer to prepar to

195
00:08:10,160 --> 00:08:11,199
pre-process

196
00:08:11,199 --> 00:08:13,520
the video data to avoid transmitting too

197
00:08:13,520 --> 00:08:15,520
much data

198
00:08:15,520 --> 00:08:18,160
to the attacker to save network

199
00:08:18,160 --> 00:08:19,680
bandwidth

200
00:08:19,680 --> 00:08:22,960
three is the auxiliary power bank which

201
00:08:22,960 --> 00:08:26,080
provides power for both battle fpc

202
00:08:26,080 --> 00:08:29,680
itself and the victims device

203
00:08:29,680 --> 00:08:32,000
four is the video capture card that

204
00:08:32,000 --> 00:08:34,240
captures all video streams transmitted

205
00:08:34,240 --> 00:08:37,440
by the victim's devices

206
00:08:37,440 --> 00:08:40,799
fi is achieved from admak and as the hid

207
00:08:40,799 --> 00:08:44,080
emulator and the wi-fi chip

208
00:08:44,080 --> 00:08:46,800
we also conduct a case study of sharing

209
00:08:46,800 --> 00:08:47,440
power bank

210
00:08:47,440 --> 00:08:50,000
which is a popular service in china when

211
00:08:50,000 --> 00:08:52,399
you are outside and your phone

212
00:08:52,399 --> 00:08:53,920
and your phone's power is nearly

213
00:08:53,920 --> 00:08:56,160
depleted you can rent a temporary power

214
00:08:56,160 --> 00:08:56,560
bank

215
00:08:56,560 --> 00:09:00,880
to charge your phone and return it later

216
00:09:00,959 --> 00:09:03,440
here is a typical attack procedure or

217
00:09:03,440 --> 00:09:04,320
battery as we see

218
00:09:04,320 --> 00:09:08,240
on sharing power bank first the attacker

219
00:09:08,240 --> 00:09:11,040
can rent a power bank and replace his

220
00:09:11,040 --> 00:09:13,279
internal with better rpc

221
00:09:13,279 --> 00:09:16,000
then the attacker returns the tempered

222
00:09:16,000 --> 00:09:18,399
power bank to the rental station

223
00:09:18,399 --> 00:09:21,360
after another user after another naive

224
00:09:21,360 --> 00:09:22,000
user

225
00:09:22,000 --> 00:09:24,560
borrows the modified power bank and

226
00:09:24,560 --> 00:09:26,320
connect it to his or her

227
00:09:26,320 --> 00:09:29,839
own devices the attacker

228
00:09:29,839 --> 00:09:32,320
can has can have complete control over

229
00:09:32,320 --> 00:09:35,120
the victim's device

230
00:09:35,120 --> 00:09:38,959
um we also performed an experiment

231
00:09:38,959 --> 00:09:42,720
on a huawei p 30 android smartphone

232
00:09:42,720 --> 00:09:45,279
and the 11 applications were selected

233
00:09:45,279 --> 00:09:47,839
and tested in the following steps

234
00:09:47,839 --> 00:09:50,480
first we're logging test accounts and

235
00:09:50,480 --> 00:09:52,640
keeps all the default settings

236
00:09:52,640 --> 00:09:56,080
and then we attach that svc to

237
00:09:56,080 --> 00:09:59,040
to the test device and we simulate

238
00:09:59,040 --> 00:10:01,360
victims daily usage of the application

239
00:10:01,360 --> 00:10:04,320
and see what we got

240
00:10:04,320 --> 00:10:07,120
here is some screenshots of the leaked

241
00:10:07,120 --> 00:10:08,160
informations

242
00:10:08,160 --> 00:10:10,480
on the left is a screenshot we obtained

243
00:10:10,480 --> 00:10:12,399
from the status page of

244
00:10:12,399 --> 00:10:15,200
paypal application which leaked the

245
00:10:15,200 --> 00:10:18,160
financial status of the victim

246
00:10:18,160 --> 00:10:20,880
on the middle is a screenshot of wechat

247
00:10:20,880 --> 00:10:22,320
payment qr codes

248
00:10:22,320 --> 00:10:24,320
which can be used by the attacker to

249
00:10:24,320 --> 00:10:25,839
perform transactions

250
00:10:25,839 --> 00:10:29,040
without victim's permission on the right

251
00:10:29,040 --> 00:10:30,880
is a screenshot of telegram

252
00:10:30,880 --> 00:10:34,959
which leaks the victim's chart history

253
00:10:35,120 --> 00:10:37,600
and here is also a table summarizing the

254
00:10:37,600 --> 00:10:40,720
leaked information during our experiment

255
00:10:40,720 --> 00:10:43,200
in social network applications such as

256
00:10:43,200 --> 00:10:43,920
wechat

257
00:10:43,920 --> 00:10:46,560
and whatsapp the attacker can obtain the

258
00:10:46,560 --> 00:10:47,279
contacts

259
00:10:47,279 --> 00:10:49,519
and chat history of the victims in

260
00:10:49,519 --> 00:10:50,880
financial applications

261
00:10:50,880 --> 00:10:53,600
like alipay and paypal the financial

262
00:10:53,600 --> 00:10:54,800
status of

263
00:10:54,800 --> 00:11:00,720
the attack of the victims is leaked

264
00:11:00,720 --> 00:11:03,200
during our experiments we also find that

265
00:11:03,200 --> 00:11:04,560
our battery spc

266
00:11:04,560 --> 00:11:07,440
uh has the following limitations first

267
00:11:07,440 --> 00:11:08,240
battlefc

268
00:11:08,240 --> 00:11:10,399
cannot actually bypass biometric

269
00:11:10,399 --> 00:11:11,839
authentications

270
00:11:11,839 --> 00:11:15,120
uh like fingerprints and second

271
00:11:15,120 --> 00:11:19,040
balance c requires displayport over usbc

272
00:11:19,040 --> 00:11:22,240
feature to work which is a rather new

273
00:11:22,240 --> 00:11:24,480
features and currently only well

274
00:11:24,480 --> 00:11:25,600
supported

275
00:11:25,600 --> 00:11:29,360
on flagship phones lastly battery lvc

276
00:11:29,360 --> 00:11:31,519
may incur notifications on victims

277
00:11:31,519 --> 00:11:32,720
devices and

278
00:11:32,720 --> 00:11:36,240
be discovered to mitigate this

279
00:11:36,240 --> 00:11:39,279
vulnerability we also proposed

280
00:11:39,279 --> 00:11:42,079
no a normal mitigation for this kind of

281
00:11:42,079 --> 00:11:43,760
problem

282
00:11:43,760 --> 00:11:46,320
this is to divide the ui rendering into

283
00:11:46,320 --> 00:11:47,360
two layers

284
00:11:47,360 --> 00:11:49,680
one is the sensitive layer and the other

285
00:11:49,680 --> 00:11:51,120
is insensitive layer

286
00:11:51,120 --> 00:11:54,160
as this figure suggests sensitive

287
00:11:54,160 --> 00:11:56,079
contents such like

288
00:11:56,079 --> 00:11:59,360
password and the keyboard used

289
00:11:59,360 --> 00:12:01,600
to input it are only rendered on

290
00:12:01,600 --> 00:12:03,279
sensitive layer and will not be

291
00:12:03,279 --> 00:12:04,000
transmitted

292
00:12:04,000 --> 00:12:07,040
to any external monitors thus

293
00:12:07,040 --> 00:12:09,839
this mechanism can effectively mitigate

294
00:12:09,839 --> 00:12:10,560
this uh

295
00:12:10,560 --> 00:12:14,800
this issue after this vulnerability was

296
00:12:14,800 --> 00:12:15,680
discovered

297
00:12:15,680 --> 00:12:18,079
we immediately contacted huawei who

298
00:12:18,079 --> 00:12:20,480
later signed a cve entry for this

299
00:12:20,480 --> 00:12:21,519
vulnerability

300
00:12:21,519 --> 00:12:25,600
and this is an email of hours response

301
00:12:25,600 --> 00:12:28,880
and we also applied for the park bounty

302
00:12:28,880 --> 00:12:31,519
program of huawei

303
00:12:31,519 --> 00:12:34,800
and who gave us a generous reward of

304
00:12:34,800 --> 00:12:39,839
over 4500 dollars

305
00:12:40,240 --> 00:12:42,320
now mitigations uh for this

306
00:12:42,320 --> 00:12:43,440
vulnerability has

307
00:12:43,440 --> 00:12:45,440
already been deployed which requires

308
00:12:45,440 --> 00:12:48,079
users authentication before allowing any

309
00:12:48,079 --> 00:12:49,120
external usb

310
00:12:49,120 --> 00:12:53,040
devices to get the video stream

311
00:12:53,040 --> 00:12:55,760
and we summarize our work as follows

312
00:12:55,760 --> 00:12:56,399
firstly

313
00:12:56,399 --> 00:12:58,320
we explore a new attack scheme

314
00:12:58,320 --> 00:13:00,000
leveraging the latest

315
00:13:00,000 --> 00:13:02,720
feature of usb protocol secondly we

316
00:13:02,720 --> 00:13:05,200
conduct a real-life scenario study of

317
00:13:05,200 --> 00:13:06,399
sharing power bank

318
00:13:06,399 --> 00:13:09,680
to test the better sbc's efficiency

319
00:13:09,680 --> 00:13:12,480
lastly we propose a noble mitigation

320
00:13:12,480 --> 00:13:13,040
named

321
00:13:13,040 --> 00:13:15,440
isolated ui rendering for our battery sd

322
00:13:15,440 --> 00:13:17,120
attack

323
00:13:17,120 --> 00:13:21,839
okay thank you for your attentions

324
00:13:21,920 --> 00:13:25,040
do you have any questions

325
00:13:27,200 --> 00:13:31,519
um us thank you so much honey i guess

326
00:13:31,519 --> 00:13:34,959
it finally works and

327
00:13:34,959 --> 00:13:38,800
we have one question uh in the chat

328
00:13:38,800 --> 00:13:41,920
uh jose has a question uh

329
00:13:41,920 --> 00:13:45,040
what are the reasons of the display port

330
00:13:45,040 --> 00:13:48,160
over type c requirements does type c

331
00:13:48,160 --> 00:13:52,480
not support transporting hdmi

332
00:13:53,040 --> 00:13:57,199
okay so you want to ask the latency of

333
00:13:57,199 --> 00:13:57,839
the

334
00:13:57,839 --> 00:14:01,199
usbc transmission like it's been

335
00:14:01,199 --> 00:14:04,639
with and the latency okay so

336
00:14:04,639 --> 00:14:07,760
uh during our experiment we find that

337
00:14:07,760 --> 00:14:10,959
the latency of usb usb c

338
00:14:10,959 --> 00:14:14,639
is uh fine it can transmit displayport

339
00:14:14,639 --> 00:14:15,040
and

340
00:14:15,040 --> 00:14:19,760
hdmi okay and uh almost have no latency

341
00:14:19,760 --> 00:14:23,360
our main uh one of the limitations

342
00:14:23,360 --> 00:14:25,600
of our various vc attack is that's the

343
00:14:25,600 --> 00:14:26,800
network okay

344
00:14:26,800 --> 00:14:29,920
so we add a raspberry pi to solve the

345
00:14:29,920 --> 00:14:31,519
network latency problem

346
00:14:31,519 --> 00:14:34,480
which is to pre-process the video stream

347
00:14:34,480 --> 00:14:36,399
before we transmit it

348
00:14:36,399 --> 00:14:39,440
like extract the use for frames and do

349
00:14:39,440 --> 00:14:40,240
not transmit

350
00:14:40,240 --> 00:14:45,519
the whole video stream okay

351
00:14:45,519 --> 00:14:48,639
so i'm not sure if that answers

352
00:14:48,639 --> 00:14:52,320
the question uh

353
00:14:52,320 --> 00:14:55,600
i i think um

354
00:14:55,839 --> 00:14:58,800
i'm not sure it's fully answers maybe uh

355
00:14:58,800 --> 00:15:00,480
jose you can

356
00:15:00,480 --> 00:15:04,720
uh type uh whether it answers your

357
00:15:04,720 --> 00:15:08,160
he answers your questions or not um

358
00:15:08,160 --> 00:15:11,440
and there is another question uh

359
00:15:11,440 --> 00:15:14,959
from virgil

360
00:15:14,959 --> 00:15:18,160
can you also emulate a mouse

361
00:15:18,160 --> 00:15:21,440
plus cable plus usbc stick

362
00:15:21,440 --> 00:15:25,279
to copy and run a malicious apk

363
00:15:25,279 --> 00:15:28,560
for instance and bypass the confirmation

364
00:15:28,560 --> 00:15:29,120
ui

365
00:15:29,120 --> 00:15:33,199
by emulating a usbc mouse

366
00:15:33,199 --> 00:15:36,560
okay uh yes

367
00:15:36,560 --> 00:15:39,759
we tested it it can it can actually

368
00:15:39,759 --> 00:15:42,720
bypass most of those applications but as

369
00:15:42,720 --> 00:15:43,360
i mentioned

370
00:15:43,360 --> 00:15:46,320
it cannot actually bypass biomagic

371
00:15:46,320 --> 00:15:47,680
authentications

372
00:15:47,680 --> 00:15:51,360
so for mobile phones equipped with like

373
00:15:51,360 --> 00:15:52,560
fingerprints

374
00:15:52,560 --> 00:15:56,000
uh it's hard to actually bypass such

375
00:15:56,000 --> 00:15:59,040
uh authentications and uh

376
00:15:59,040 --> 00:16:02,399
but if it's already in like uh is

377
00:16:02,399 --> 00:16:05,360
not in the lock screen uh so you can

378
00:16:05,360 --> 00:16:06,240
actually plug

379
00:16:06,240 --> 00:16:09,519
in the plugging the all the emulated

380
00:16:09,519 --> 00:16:11,600
devices such as mouse keyboards

381
00:16:11,600 --> 00:16:13,199
as well as they are connected to the

382
00:16:13,199 --> 00:16:15,839
usbc hub which will

383
00:16:15,839 --> 00:16:17,759
in charge of the whole communication

384
00:16:17,759 --> 00:16:20,160
process

385
00:16:20,839 --> 00:16:23,440
yes okay we have

386
00:16:23,440 --> 00:16:26,480
uh two more questions uh uh

387
00:16:26,480 --> 00:16:29,440
is is this really a failure or

388
00:16:29,440 --> 00:16:32,399
vulnerability on the side of usb

389
00:16:32,399 --> 00:16:34,800
this seems more like a vulnerability in

390
00:16:34,800 --> 00:16:38,320
plug-in unload device

391
00:16:38,320 --> 00:16:41,680
is it even possible to separate valid or

392
00:16:41,680 --> 00:16:44,399
invalid usb devices

393
00:16:44,399 --> 00:16:48,079
uh what are your thoughts on that

394
00:16:48,079 --> 00:16:51,519
okay so i i believe

395
00:16:51,519 --> 00:16:54,720
that this is okay

396
00:16:54,720 --> 00:16:56,880
during our experiment we actually find

397
00:16:56,880 --> 00:16:58,000
that usb

398
00:16:58,000 --> 00:17:01,759
otg otg which is use the smartphone as

399
00:17:01,759 --> 00:17:02,079
uh

400
00:17:02,079 --> 00:17:05,679
actually as a host of the usb protocol

401
00:17:05,679 --> 00:17:07,679
can actually differentiate the different

402
00:17:07,679 --> 00:17:09,520
uh

403
00:17:09,520 --> 00:17:11,280
different functionalities for example

404
00:17:11,280 --> 00:17:13,520
when you connect your phone to a

405
00:17:13,520 --> 00:17:16,799
computer it will ask you to transmit

406
00:17:16,799 --> 00:17:20,799
files or to use it only in charge

407
00:17:20,799 --> 00:17:23,839
okay it can separate these i believe is

408
00:17:23,839 --> 00:17:24,559
uh

409
00:17:24,559 --> 00:17:27,679
is actually uh overlook in usb protocol

410
00:17:27,679 --> 00:17:28,880
designs

411
00:17:28,880 --> 00:17:31,200
i believe the authentication should be

412
00:17:31,200 --> 00:17:33,679
as added to usb protocol

413
00:17:33,679 --> 00:17:35,679
designs for example when you're plugging

414
00:17:35,679 --> 00:17:37,200
uh

415
00:17:37,200 --> 00:17:40,240
on the devices it can promote the users

416
00:17:40,240 --> 00:17:43,440
to input these functionalities such as

417
00:17:43,440 --> 00:17:45,280
i believe there is a work called good

418
00:17:45,280 --> 00:17:46,720
usb who is

419
00:17:46,720 --> 00:17:50,400
doing uh who is actually done that okay

420
00:17:50,400 --> 00:17:53,600
and i i i personally

421
00:17:53,600 --> 00:17:55,760
i think this vulnerability is rather

422
00:17:55,760 --> 00:17:57,120
obvious but i

423
00:17:57,120 --> 00:18:00,640
also believe that usb protocol can

424
00:18:00,640 --> 00:18:04,480
can be refined to avoid such problems

425
00:18:04,480 --> 00:18:07,679
yeah okay

426
00:18:07,679 --> 00:18:11,120
um makes sense so one last question

427
00:18:11,120 --> 00:18:14,240
how can trusted or untrusted screen

428
00:18:14,240 --> 00:18:17,600
speed differentiated

429
00:18:18,000 --> 00:18:21,280
yeah so uh so i believe he's asking

430
00:18:21,280 --> 00:18:22,240
about the

431
00:18:22,240 --> 00:18:26,640
isolation you are wondering yeah uh

432
00:18:26,880 --> 00:18:30,480
in in in our paper we actually mentioned

433
00:18:30,480 --> 00:18:30,799
that

434
00:18:30,799 --> 00:18:33,840
it should be the developer who is uh

435
00:18:33,840 --> 00:18:36,720
deciding which should be rendered in oh

436
00:18:36,720 --> 00:18:37,840
okay oh oh

437
00:18:37,840 --> 00:18:42,160
you mean trust or okay sorry so uh

438
00:18:42,160 --> 00:18:45,200
uh in mobile phones we believe that the

439
00:18:45,200 --> 00:18:48,080
internal internal uh screen of the

440
00:18:48,080 --> 00:18:49,360
mobile phones are

441
00:18:49,360 --> 00:18:52,960
are the only trusted uh screen i mean

442
00:18:52,960 --> 00:18:57,600
in mobile phones uh people does not uh

443
00:18:57,600 --> 00:19:00,720
people does not usually uh input their

444
00:19:00,720 --> 00:19:01,200
phones

445
00:19:01,200 --> 00:19:04,559
in external screens it's a real happens

446
00:19:04,559 --> 00:19:07,360
so we believe uh we believe in our

447
00:19:07,360 --> 00:19:08,559
proposal we only

448
00:19:08,559 --> 00:19:12,000
plan to to use the

449
00:19:12,000 --> 00:19:14,720
inner inner inner equipped screen of the

450
00:19:14,720 --> 00:19:16,960
smartphone as the trusted screen

451
00:19:16,960 --> 00:19:19,679
yeah but you can also design a mechanism

452
00:19:19,679 --> 00:19:20,080
to

453
00:19:20,080 --> 00:19:22,320
for example charge the other external

454
00:19:22,320 --> 00:19:23,360
screens but

455
00:19:23,360 --> 00:19:27,918
it requires the user interactions yeah

456
00:19:28,000 --> 00:19:31,280
okay uh so we we're already uh

457
00:19:31,280 --> 00:19:35,039
four minutes past so uh i guess we we

458
00:19:35,039 --> 00:19:36,000
still have

459
00:19:36,000 --> 00:19:38,080
several more questions in the chat so

460
00:19:38,080 --> 00:19:40,240
maybe you can

461
00:19:40,240 --> 00:19:43,760
type your answer in the chat so

462
00:19:43,760 --> 00:19:47,039
thank you again for the for the talk

463
00:19:47,039 --> 00:19:50,720
very nice work

