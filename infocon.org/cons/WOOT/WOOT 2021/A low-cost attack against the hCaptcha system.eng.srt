1
00:00:00,320 --> 00:00:03,360
next we'll have imran josem uh

2
00:00:03,360 --> 00:00:05,279
talking about a low-cost attack against

3
00:00:05,279 --> 00:00:06,560
the h capture

4
00:00:06,560 --> 00:00:09,120
system

5
00:00:09,599 --> 00:00:11,920
that looks good we see your slides

6
00:00:11,920 --> 00:00:15,360
please go ahead thank you

7
00:00:15,440 --> 00:00:18,080
okay um hi everyone i am imran from the

8
00:00:18,080 --> 00:00:20,560
university of louisiana at lafayette

9
00:00:20,560 --> 00:00:22,880
this is a presentation of our work on a

10
00:00:22,880 --> 00:00:24,720
low-cost attack against the ace capture

11
00:00:24,720 --> 00:00:25,760
system

12
00:00:25,760 --> 00:00:28,000
where we were able to break it with a

13
00:00:28,000 --> 00:00:31,840
pretty high accuracy and efficiency

14
00:00:31,840 --> 00:00:34,480
all right without further ado let's get

15
00:00:34,480 --> 00:00:36,640
right into it

16
00:00:36,640 --> 00:00:39,200
so um captures are programs to

17
00:00:39,200 --> 00:00:41,760
distinguish human from machine input

18
00:00:41,760 --> 00:00:44,719
the defend website against malicious bot

19
00:00:44,719 --> 00:00:45,840
programs

20
00:00:45,840 --> 00:00:48,879
captions has been around since late 90s

21
00:00:48,879 --> 00:00:51,840
and it captures a relatively new image

22
00:00:51,840 --> 00:00:53,760
capture system developed by intuitions

23
00:00:53,760 --> 00:00:55,440
machines

24
00:00:55,440 --> 00:00:57,840
it was designed as a drop-in replacement

25
00:00:57,840 --> 00:00:58,960
for google's

26
00:00:58,960 --> 00:01:02,399
image recaptcha system

27
00:01:02,399 --> 00:01:04,879
this video shows a h capsule selling

28
00:01:04,879 --> 00:01:07,439
challenge where the user is required to

29
00:01:07,439 --> 00:01:09,680
solve an image classification task to

30
00:01:09,680 --> 00:01:12,479
verify that they are humans and not

31
00:01:12,479 --> 00:01:16,400
bots in this

32
00:01:16,400 --> 00:01:19,600
work we made the following contributions

33
00:01:19,600 --> 00:01:21,600
first we designed and developed a

34
00:01:21,600 --> 00:01:23,759
low-cost end-to-end system to breakage

35
00:01:23,759 --> 00:01:25,680
capture service

36
00:01:25,680 --> 00:01:29,119
we evaluated the system against 270 live

37
00:01:29,119 --> 00:01:31,040
age capture challenges and

38
00:01:31,040 --> 00:01:33,040
achieved a success rate of attack of

39
00:01:33,040 --> 00:01:34,079
over 95

40
00:01:34,079 --> 00:01:38,640
in less than 90 seconds on average

41
00:01:38,640 --> 00:01:41,520
we also conducted a preliminary security

42
00:01:41,520 --> 00:01:43,520
analysis of the itch capture system

43
00:01:43,520 --> 00:01:46,640
and revealed several design weaknesses

44
00:01:46,640 --> 00:01:51,119
of the system against automated abuse

45
00:01:52,720 --> 00:01:55,439
we adopted a threat model involving an

46
00:01:55,439 --> 00:01:56,560
attacker with

47
00:01:56,560 --> 00:02:00,159
limited resources specifically we assume

48
00:02:00,159 --> 00:02:00,560
the

49
00:02:00,560 --> 00:02:03,119
attacker is limited to one computer with

50
00:02:03,119 --> 00:02:04,159
a small size ram

51
00:02:04,159 --> 00:02:08,239
and one ip address since uh such an

52
00:02:08,239 --> 00:02:10,160
attacker cannot afford to have lower

53
00:02:10,160 --> 00:02:11,280
success rates

54
00:02:11,280 --> 00:02:14,239
we aimed for an accuracy benchmark above

55
00:02:14,239 --> 00:02:16,560
50

56
00:02:17,200 --> 00:02:19,599
in this slide i'll provide an overview

57
00:02:19,599 --> 00:02:22,160
of our capsule braking system

58
00:02:22,160 --> 00:02:24,560
our system solves ah caps challenge in

59
00:02:24,560 --> 00:02:25,840
three steps

60
00:02:25,840 --> 00:02:27,760
the first step is to obtain the

61
00:02:27,760 --> 00:02:28,879
challenge

62
00:02:28,879 --> 00:02:31,200
in this stage our bot program first

63
00:02:31,200 --> 00:02:31,920
visits

64
00:02:31,920 --> 00:02:34,640
each capture enable web page locates the

65
00:02:34,640 --> 00:02:37,040
html elements related to its captcha

66
00:02:37,040 --> 00:02:39,599
and uh initiate the image challenge

67
00:02:39,599 --> 00:02:41,519
after that it downloads the images from

68
00:02:41,519 --> 00:02:43,840
the challenge widget

69
00:02:43,840 --> 00:02:46,480
next we feed the images to a deep neural

70
00:02:46,480 --> 00:02:48,560
network based image classifier

71
00:02:48,560 --> 00:02:51,599
that returns the labels or class name

72
00:02:51,599 --> 00:02:53,519
for the images

73
00:02:53,519 --> 00:02:55,599
then we select the images that match the

74
00:02:55,599 --> 00:02:56,800
target level

75
00:02:56,800 --> 00:02:59,200
provided in the instruction in this case

76
00:02:59,200 --> 00:03:01,440
it is a train

77
00:03:01,440 --> 00:03:04,800
after clicking on the potential um

78
00:03:04,800 --> 00:03:06,879
target images we submit the challenge

79
00:03:06,879 --> 00:03:08,959
and verify whether this challenge is

80
00:03:08,959 --> 00:03:12,800
passed or failed

81
00:03:13,280 --> 00:03:15,280
in the next few slides uh i'm going to

82
00:03:15,280 --> 00:03:16,959
present the evaluation result of our

83
00:03:16,959 --> 00:03:19,840
attack

84
00:03:19,840 --> 00:03:22,000
for uh automating browsing related

85
00:03:22,000 --> 00:03:23,599
activities we used

86
00:03:23,599 --> 00:03:26,159
puppeteer firefox with firefox web

87
00:03:26,159 --> 00:03:27,680
browser

88
00:03:27,680 --> 00:03:30,640
and we solved the challenges using areas

89
00:03:30,640 --> 00:03:32,319
net 18 network

90
00:03:32,319 --> 00:03:35,599
pretend on imagenet dataset we further

91
00:03:35,599 --> 00:03:38,159
fine tune the network using 45000 images

92
00:03:38,159 --> 00:03:40,480
belonging to nine classes from

93
00:03:40,480 --> 00:03:44,000
the open images dataset

94
00:03:44,000 --> 00:03:46,560
we evaluated all the experiment inside a

95
00:03:46,560 --> 00:03:47,760
docker container to

96
00:03:47,760 --> 00:03:51,200
simulate a low cost attack the container

97
00:03:51,200 --> 00:03:51,760
runs

98
00:03:51,760 --> 00:03:54,879
on a ubuntu 224 and um zero for image

99
00:03:54,879 --> 00:03:56,640
and was configured to use only two

100
00:03:56,640 --> 00:03:58,159
gigabytes of memory and

101
00:03:58,159 --> 00:04:02,720
three cpu cores from the host machine

102
00:04:02,720 --> 00:04:05,599
and we used a regular non-academic ip

103
00:04:05,599 --> 00:04:07,519
address for this experiment

104
00:04:07,519 --> 00:04:10,560
also we ran the program with a fresh

105
00:04:10,560 --> 00:04:12,239
browser profile this time

106
00:04:12,239 --> 00:04:15,599
meaning we did not

107
00:04:15,599 --> 00:04:17,279
keep the caches and cookies from the

108
00:04:17,279 --> 00:04:20,078
private visits

109
00:04:20,560 --> 00:04:23,040
to identify what image classes

110
00:04:23,040 --> 00:04:24,880
frequently appear on the edge capture

111
00:04:24,880 --> 00:04:26,080
challenges

112
00:04:26,080 --> 00:04:29,440
we collected 5000 challenges from three

113
00:04:29,440 --> 00:04:31,520
website from may 2020

114
00:04:31,520 --> 00:04:35,040
to july 2020 and we observed only nine

115
00:04:35,040 --> 00:04:37,919
image categories in those challenges

116
00:04:37,919 --> 00:04:39,600
this figure shows the frequencies of

117
00:04:39,600 --> 00:04:41,520
these image classes

118
00:04:41,520 --> 00:04:44,000
as you can see these image categories

119
00:04:44,000 --> 00:04:46,400
include airplane bicycle boat

120
00:04:46,400 --> 00:04:49,680
etc next uh

121
00:04:49,680 --> 00:04:54,400
we submitted 270 70s challenges

122
00:04:54,400 --> 00:04:58,199
and our system was able to break uh

123
00:04:58,199 --> 00:05:01,680
259 of them which resulted

124
00:05:01,680 --> 00:05:06,639
in accuracy of attack of 95.93 percent

125
00:05:06,639 --> 00:05:08,960
and the average time our system takes to

126
00:05:08,960 --> 00:05:13,440
crack a challenge is 18.76 seconds

127
00:05:13,440 --> 00:05:14,960
the figure shows the accuracy and

128
00:05:14,960 --> 00:05:16,960
frequency of each image categories in

129
00:05:16,960 --> 00:05:19,280
the solved challenges

130
00:05:19,280 --> 00:05:22,560
we got over 90 accuracy for

131
00:05:22,560 --> 00:05:25,840
all image categories

132
00:05:26,639 --> 00:05:28,639
figure 4 shows the probability

133
00:05:28,639 --> 00:05:30,720
distribution of the number of images

134
00:05:30,720 --> 00:05:31,520
selected per

135
00:05:31,520 --> 00:05:34,479
challenge for the most challenges we had

136
00:05:34,479 --> 00:05:35,759
to choose from

137
00:05:35,759 --> 00:05:37,840
two to six images as the correct

138
00:05:37,840 --> 00:05:39,280
solutions

139
00:05:39,280 --> 00:05:40,880
and for the remaining challenges this

140
00:05:40,880 --> 00:05:44,800
number ranges from 7 to 14.

141
00:05:44,800 --> 00:05:46,479
figure 5 shows the cumulative

142
00:05:46,479 --> 00:05:48,240
distribution of time required by each

143
00:05:48,240 --> 00:05:49,759
module

144
00:05:49,759 --> 00:05:52,240
in this figure the blue line indicates

145
00:05:52,240 --> 00:05:53,360
uh the blue line

146
00:05:53,360 --> 00:05:56,240
indicates uh the time our initial

147
00:05:56,240 --> 00:05:57,840
explorer network takes to solve a

148
00:05:57,840 --> 00:05:58,880
challenge

149
00:05:58,880 --> 00:06:00,560
the yellow line indicates the time is

150
00:06:00,560 --> 00:06:02,639
spent on automating browsing related

151
00:06:02,639 --> 00:06:03,759
activities

152
00:06:03,759 --> 00:06:05,840
and finally the green line indicates the

153
00:06:05,840 --> 00:06:07,120
total time

154
00:06:07,120 --> 00:06:09,759
uh the system is spent while solving a

155
00:06:09,759 --> 00:06:12,160
challenge

156
00:06:12,960 --> 00:06:15,520
to investigate whether clients ip

157
00:06:15,520 --> 00:06:17,199
address types have an impact on

158
00:06:17,199 --> 00:06:18,880
attacker's success rate

159
00:06:18,880 --> 00:06:22,800
we ran an experiment using three

160
00:06:22,800 --> 00:06:24,960
different ip addresses including an

161
00:06:24,960 --> 00:06:25,919
academic ip

162
00:06:25,919 --> 00:06:30,160
a bpm ip and a door exit node ip

163
00:06:30,160 --> 00:06:32,400
we submitted 200 challenges from each ip

164
00:06:32,400 --> 00:06:33,199
address

165
00:06:33,199 --> 00:06:35,680
separated by 20 second delay between two

166
00:06:35,680 --> 00:06:37,840
subsequent requests

167
00:06:37,840 --> 00:06:40,960
and we obtained over 95 95

168
00:06:40,960 --> 00:06:44,160
accuracy for all three ip addresses

169
00:06:44,160 --> 00:06:46,479
this signals that each capture does not

170
00:06:46,479 --> 00:06:48,000
generally discriminate against

171
00:06:48,000 --> 00:06:50,880
users ibm

172
00:06:52,240 --> 00:06:54,960
uh from our prior experience we found

173
00:06:54,960 --> 00:06:56,400
that some capture systems

174
00:06:56,400 --> 00:06:58,000
show more difficult challenges to the

175
00:06:58,000 --> 00:07:00,960
clients likely to be bought

176
00:07:00,960 --> 00:07:02,479
assessed by different signals such as

177
00:07:02,479 --> 00:07:05,280
the presence of web automation software

178
00:07:05,280 --> 00:07:08,080
and the browser configuration setting we

179
00:07:08,080 --> 00:07:10,560
analyzed dph capture employed such

180
00:07:10,560 --> 00:07:12,160
features

181
00:07:12,160 --> 00:07:14,960
we used both the selenium and property

182
00:07:14,960 --> 00:07:16,720
of firefox

183
00:07:16,720 --> 00:07:20,080
web automation software with various

184
00:07:20,080 --> 00:07:22,319
experimental settings

185
00:07:22,319 --> 00:07:24,880
however while running our attack we did

186
00:07:24,880 --> 00:07:25,759
not

187
00:07:25,759 --> 00:07:27,840
observed any discrepancies in terms of

188
00:07:27,840 --> 00:07:28,800
the challenges

189
00:07:28,800 --> 00:07:32,400
that were served to us also we did not

190
00:07:32,400 --> 00:07:34,880
encounter any blocking

191
00:07:34,880 --> 00:07:37,360
further we achieved over 90 percent

192
00:07:37,360 --> 00:07:38,319
accuracy

193
00:07:38,319 --> 00:07:42,000
of attack across all these settings

194
00:07:42,720 --> 00:07:44,720
since during our main experiment we did

195
00:07:44,720 --> 00:07:47,199
not uh observe any blocking

196
00:07:47,199 --> 00:07:49,599
uh to make sure that we had not missed

197
00:07:49,599 --> 00:07:51,440
any server side blocking we deployed

198
00:07:51,440 --> 00:07:53,039
each capsule on our

199
00:07:53,039 --> 00:07:56,800
website and ran several experiments

200
00:07:56,800 --> 00:07:58,560
each caps allows website owners to

201
00:07:58,560 --> 00:08:00,639
adjust the difficulty level for the

202
00:08:00,639 --> 00:08:03,280
capture served on their website it

203
00:08:03,280 --> 00:08:05,680
suffers for difficulty levels namely

204
00:08:05,680 --> 00:08:08,800
easy moderate which is used by default

205
00:08:08,800 --> 00:08:12,879
difficult and always on we tested

206
00:08:12,879 --> 00:08:15,840
the blocking on moderate and difficult

207
00:08:15,840 --> 00:08:17,599
difficulty levels

208
00:08:17,599 --> 00:08:20,879
uh by submitting 400 challenges

209
00:08:20,879 --> 00:08:24,080
for each difficulty setting and all the

210
00:08:24,080 --> 00:08:25,120
requests to our web

211
00:08:25,120 --> 00:08:27,680
application were centenary with a one

212
00:08:27,680 --> 00:08:29,120
second delay between two subsequent

213
00:08:29,120 --> 00:08:31,360
requests

214
00:08:31,360 --> 00:08:34,958
and only 17 out of the total 800 items

215
00:08:34,958 --> 00:08:35,760
combined

216
00:08:35,760 --> 00:08:39,039
were blocked during our experiment

217
00:08:39,039 --> 00:08:43,360
further we achieved 92.25 percent and

218
00:08:43,360 --> 00:08:44,640
88.50

219
00:08:44,640 --> 00:08:47,600
accuracy for these two difficulty

220
00:08:47,600 --> 00:08:50,000
settings

221
00:08:50,160 --> 00:08:52,720
next we tried to trigger blocking

222
00:08:52,720 --> 00:08:54,480
intentionally by sending too many

223
00:08:54,480 --> 00:08:56,720
requests simultaneously to our

224
00:08:56,720 --> 00:08:59,360
h capture protected web application

225
00:08:59,360 --> 00:09:00,800
specifically we ran

226
00:09:00,800 --> 00:09:02,720
50 instance of our bot program

227
00:09:02,720 --> 00:09:05,040
concurrently for 10 times with a two

228
00:09:05,040 --> 00:09:06,839
second delay between two subsequent

229
00:09:06,839 --> 00:09:08,640
iterations

230
00:09:08,640 --> 00:09:10,640
and this time by its capsule system

231
00:09:10,640 --> 00:09:12,160
blocked many of our requests

232
00:09:12,160 --> 00:09:14,480
with the warning message your computer

233
00:09:14,480 --> 00:09:18,320
or network has sent too many requests

234
00:09:18,480 --> 00:09:20,480
uh the minimum number of instances

235
00:09:20,480 --> 00:09:23,200
blocked in an iteration was 24

236
00:09:23,200 --> 00:09:27,760
and the maximum number was 48.

237
00:09:28,160 --> 00:09:30,640
we found that each caps often repeat the

238
00:09:30,640 --> 00:09:33,519
same image across multiple challenges

239
00:09:33,519 --> 00:09:35,040
to quantitatively determine the

240
00:09:35,040 --> 00:09:36,560
imaginations

241
00:09:36,560 --> 00:09:41,040
we used over 48 000 images for analysis

242
00:09:41,040 --> 00:09:43,279
we computed both the md5 and perceptual

243
00:09:43,279 --> 00:09:45,600
hashes of the images

244
00:09:45,600 --> 00:09:48,240
interestingly both algorithms return the

245
00:09:48,240 --> 00:09:49,600
same result

246
00:09:49,600 --> 00:09:54,000
specifically we identified 9854

247
00:09:54,000 --> 00:09:55,680
redundant images

248
00:09:55,680 --> 00:09:59,680
belonging to 1985 sets of identical

249
00:09:59,680 --> 00:10:02,160
images

250
00:10:02,399 --> 00:10:04,880
we also conducted an online attack using

251
00:10:04,880 --> 00:10:07,920
tribution apis for image recognition

252
00:10:07,920 --> 00:10:09,920
the api services we used are google

253
00:10:09,920 --> 00:10:11,200
cloud vision api

254
00:10:11,200 --> 00:10:13,839
microsoft computer vision api and amazon

255
00:10:13,839 --> 00:10:16,079
recognition api

256
00:10:16,079 --> 00:10:19,360
figure 6 shows an h capture image and

257
00:10:19,360 --> 00:10:21,360
a list of levels returned by the three

258
00:10:21,360 --> 00:10:22,959
vision apis

259
00:10:22,959 --> 00:10:24,800
the original level of the image is a

260
00:10:24,800 --> 00:10:26,560
track we will see that the

261
00:10:26,560 --> 00:10:29,040
google cloud vision api recognized a

262
00:10:29,040 --> 00:10:30,959
bunch of objects such as land vehicle

263
00:10:30,959 --> 00:10:32,160
vehicle transportation

264
00:10:32,160 --> 00:10:36,320
truck etc and um two other apis returned

265
00:10:36,320 --> 00:10:39,440
similar tanks as well

266
00:10:39,440 --> 00:10:43,040
next uh this figure uh

267
00:10:43,040 --> 00:10:45,120
the attack performance of the of the

268
00:10:45,120 --> 00:10:48,640
shell vision apis is listed in table one

269
00:10:48,640 --> 00:10:51,680
we got the highest accuracy for

270
00:10:51,680 --> 00:10:53,600
microsoft computer vision api which is

271
00:10:53,600 --> 00:10:54,959
98

272
00:10:54,959 --> 00:10:57,360
followed by google cloud vision api and

273
00:10:57,360 --> 00:11:00,000
amazon recognition

274
00:11:00,000 --> 00:11:01,760
so uh from this result we can see that

275
00:11:01,760 --> 00:11:03,200
our offline slide provides

276
00:11:03,200 --> 00:11:05,360
a similar performance to that of the

277
00:11:05,360 --> 00:11:06,959
vision apis

278
00:11:06,959 --> 00:11:09,519
but one significant disadvantage of

279
00:11:09,519 --> 00:11:11,600
using visual api is that

280
00:11:11,600 --> 00:11:14,640
they are not free so when making some

281
00:11:14,640 --> 00:11:17,120
api requests they will incur some

282
00:11:17,120 --> 00:11:19,600
charges

283
00:11:19,839 --> 00:11:22,320
we recommended uh several counter

284
00:11:22,320 --> 00:11:23,360
measures to make the

285
00:11:23,360 --> 00:11:25,279
itch capture system more robust to

286
00:11:25,279 --> 00:11:27,200
automated abuse

287
00:11:27,200 --> 00:11:30,160
first we propose using more image

288
00:11:30,160 --> 00:11:31,360
categories to

289
00:11:31,360 --> 00:11:34,880
um uh lev compared to the num less

290
00:11:34,880 --> 00:11:35,600
number of

291
00:11:35,600 --> 00:11:37,760
small number of classes that the system

292
00:11:37,760 --> 00:11:39,760
currently has to make the collection

293
00:11:39,760 --> 00:11:40,880
process

294
00:11:40,880 --> 00:11:43,600
uh more challenging for the attacker

295
00:11:43,600 --> 00:11:44,480
second uh

296
00:11:44,480 --> 00:11:46,959
we recommend using adversarial example

297
00:11:46,959 --> 00:11:48,720
to the challenge images

298
00:11:48,720 --> 00:11:50,720
adversarial examples are specifically

299
00:11:50,720 --> 00:11:52,160
crafted input

300
00:11:52,160 --> 00:11:54,399
to um that can mislead neural network

301
00:11:54,399 --> 00:11:56,480
into making wrong prediction

302
00:11:56,480 --> 00:11:58,320
so they can help lower the accuracy of

303
00:11:58,320 --> 00:12:00,399
the attacker

304
00:12:00,399 --> 00:12:02,800
third we propose that the traffic

305
00:12:02,800 --> 00:12:04,240
originating from a wave automation

306
00:12:04,240 --> 00:12:05,440
software

307
00:12:05,440 --> 00:12:08,320
should be blocked by default since most

308
00:12:08,320 --> 00:12:10,240
bot programs use some form of

309
00:12:10,240 --> 00:12:11,760
wave automation technology for running

310
00:12:11,760 --> 00:12:13,440
the attack not

311
00:12:13,440 --> 00:12:15,120
allowing them in the first place might

312
00:12:15,120 --> 00:12:17,920
be a good idea

313
00:12:17,920 --> 00:12:20,320
finally we recommend incorporating

314
00:12:20,320 --> 00:12:21,519
common sense knowledge

315
00:12:21,519 --> 00:12:24,079
to form the challenging instruction

316
00:12:24,079 --> 00:12:26,160
research shows that

317
00:12:26,160 --> 00:12:28,560
machines don't usually do well on tasks

318
00:12:28,560 --> 00:12:30,480
that require higher order reasoning

319
00:12:30,480 --> 00:12:32,720
that's just it'll make solving the test

320
00:12:32,720 --> 00:12:36,240
most challenging for the birds

321
00:12:36,320 --> 00:12:38,560
it is important to note here that some

322
00:12:38,560 --> 00:12:40,720
of these counter measures may negatively

323
00:12:40,720 --> 00:12:41,839
impact the

324
00:12:41,839 --> 00:12:45,040
usability of the system therefore

325
00:12:45,040 --> 00:12:46,959
further research is required to find the

326
00:12:46,959 --> 00:12:49,120
right balance between the usability and

327
00:12:49,120 --> 00:12:51,040
security when implementing such

328
00:12:51,040 --> 00:12:52,800
countermeasures

329
00:12:52,800 --> 00:12:56,160
in the image capture designs

330
00:12:56,160 --> 00:12:58,560
so before we conclude here are some

331
00:12:58,560 --> 00:13:01,279
important takeaways from our work

332
00:13:01,279 --> 00:13:03,440
we showed that h capture challenges

333
00:13:03,440 --> 00:13:05,360
could be solved automatically with

334
00:13:05,360 --> 00:13:07,360
high accuracy using deep learning based

335
00:13:07,360 --> 00:13:08,880
methods

336
00:13:08,880 --> 00:13:11,440
to make things worse we demonstrated

337
00:13:11,440 --> 00:13:11,920
that

338
00:13:11,920 --> 00:13:14,240
even a low resource adversary can mount

339
00:13:14,240 --> 00:13:17,519
a powerful attack using our method

340
00:13:17,519 --> 00:13:21,040
we also identified several design flaws

341
00:13:21,040 --> 00:13:22,959
that make this capture system

342
00:13:22,959 --> 00:13:26,560
highly vulnerable to automated abuse

343
00:13:26,560 --> 00:13:28,959
in the future we would like to test our

344
00:13:28,959 --> 00:13:30,720
methodology on

345
00:13:30,720 --> 00:13:33,519
other similar image capture system to

346
00:13:33,519 --> 00:13:34,000
see if

347
00:13:34,000 --> 00:13:37,680
it would be generalized

348
00:13:37,680 --> 00:13:40,079
uh that's all thanks everyone for

349
00:13:40,079 --> 00:13:41,120
listening and

350
00:13:41,120 --> 00:13:43,360
now i will be happy to take any question

351
00:13:43,360 --> 00:13:46,240
you guys might have

352
00:13:46,240 --> 00:13:48,639
awesome this has been a very interesting

353
00:13:48,639 --> 00:13:50,399
talk thank you imran

354
00:13:50,399 --> 00:13:54,079
um let's uh

355
00:13:54,079 --> 00:13:57,040
start with the uh with the questions i

356
00:13:57,040 --> 00:13:58,560
already see a couple

357
00:13:58,560 --> 00:14:00,959
first off i was surprised to see the

358
00:14:00,959 --> 00:14:03,199
accuracy numbers that he presented

359
00:14:03,199 --> 00:14:04,959
they are definitely much better than i

360
00:14:04,959 --> 00:14:07,120
am at solving captcha so this is

361
00:14:07,120 --> 00:14:10,240
an interesting result so kevin

362
00:14:10,240 --> 00:14:13,199
asked um can you estimate the size of

363
00:14:13,199 --> 00:14:14,240
the h

364
00:14:14,240 --> 00:14:17,199
captures image library like if there's

365
00:14:17,199 --> 00:14:19,040
that much repetition you should be able

366
00:14:19,040 --> 00:14:21,199
to use some statistical means to guess

367
00:14:21,199 --> 00:14:22,560
the total size of the

368
00:14:22,560 --> 00:14:25,680
samples well

369
00:14:25,680 --> 00:14:28,079
uh like we identified on the uh nine

370
00:14:28,079 --> 00:14:30,079
image classes

371
00:14:30,079 --> 00:14:33,120
and i mean uh

372
00:14:33,120 --> 00:14:36,320
we collected like over 5000 challenges

373
00:14:36,320 --> 00:14:40,320
and more than like 48 000

374
00:14:40,320 --> 00:14:43,360
images for our uh during our talk about

375
00:14:43,360 --> 00:14:44,399
uh

376
00:14:44,399 --> 00:14:46,959
i mean uh it's really difficult to like

377
00:14:46,959 --> 00:14:48,959
identify

378
00:14:48,959 --> 00:14:52,000
like how many more images they have i

379
00:14:52,000 --> 00:14:53,120
mean i don't know if that

380
00:14:53,120 --> 00:14:56,800
answered the question yeah

381
00:14:56,800 --> 00:15:01,600
um it it hints at it at least um

382
00:15:01,600 --> 00:15:04,079
one question regarding blocking that you

383
00:15:04,079 --> 00:15:05,360
observed

384
00:15:05,360 --> 00:15:07,120
like was some of the blocking that

385
00:15:07,120 --> 00:15:10,880
you've seen related to wrong guesses

386
00:15:10,880 --> 00:15:14,079
well no no not actually i mean um

387
00:15:14,079 --> 00:15:16,720
most of the times uh they did not block

388
00:15:16,720 --> 00:15:17,199
us

389
00:15:17,199 --> 00:15:20,639
even when we submit like we select real

390
00:15:20,639 --> 00:15:24,079
like wrong images and then submit it

391
00:15:24,079 --> 00:15:27,360
but it did not block us so uh it's kind

392
00:15:27,360 --> 00:15:28,320
of

393
00:15:28,320 --> 00:15:30,800
like uh did not block most of the time

394
00:15:30,800 --> 00:15:31,680
but when

395
00:15:31,680 --> 00:15:34,560
we sub like send too many requests to

396
00:15:34,560 --> 00:15:36,240
the system it only blocks

397
00:15:36,240 --> 00:15:40,000
in those like instances

398
00:15:40,000 --> 00:15:43,759
you try to slowly guess the number

399
00:15:43,759 --> 00:15:46,399
like the heuristics on blocking by just

400
00:15:46,399 --> 00:15:50,240
adjusting it a little bit here and there

401
00:15:52,160 --> 00:15:55,360
um another question from virgil uh when

402
00:15:55,360 --> 00:15:57,279
some captures are used to train ais does

403
00:15:57,279 --> 00:15:57,920
this

404
00:15:57,920 --> 00:16:00,079
attack mean that we can use an ai to

405
00:16:00,079 --> 00:16:02,000
train ai

406
00:16:02,000 --> 00:16:05,199
this is inception of ais yes like

407
00:16:05,199 --> 00:16:07,040
that's what like google and other

408
00:16:07,040 --> 00:16:08,560
companies are doing

409
00:16:08,560 --> 00:16:10,720
like people select the images with

410
00:16:10,720 --> 00:16:12,800
correct levels and then they

411
00:16:12,800 --> 00:16:16,079
use those images labeled images to

412
00:16:16,079 --> 00:16:18,240
train like other machine learning system

413
00:16:18,240 --> 00:16:20,560
so a sketch actually developed

414
00:16:20,560 --> 00:16:23,680
uh for this purpose they

415
00:16:23,680 --> 00:16:26,399
uh use the data set the people level for

416
00:16:26,399 --> 00:16:26,959
training

417
00:16:26,959 --> 00:16:29,759
uh com machine learning data set for

418
00:16:29,759 --> 00:16:31,360
other companies

419
00:16:31,360 --> 00:16:34,959
so it's interesting but you you know you

420
00:16:34,959 --> 00:16:36,480
you're reversed right you're using

421
00:16:36,480 --> 00:16:38,399
machine learning to figure out

422
00:16:38,399 --> 00:16:41,040
what to train something on something

423
00:16:41,040 --> 00:16:43,519
that is then used to later train

424
00:16:43,519 --> 00:16:45,600
yes so the answer from your training

425
00:16:45,600 --> 00:16:47,839
result will be fed into another training

426
00:16:47,839 --> 00:16:50,880
yes it could be it could be used to feed

427
00:16:50,880 --> 00:16:51,920
the

428
00:16:51,920 --> 00:16:56,000
dataset by their system

429
00:16:56,000 --> 00:16:59,040
to train their data yeah

430
00:16:59,040 --> 00:17:02,160
super cool thank you very much um are

431
00:17:02,160 --> 00:17:05,839
there more questions

432
00:17:08,720 --> 00:17:12,640
if not um or if there are more questions

433
00:17:12,640 --> 00:17:13,919
feel free to use the chat

434
00:17:13,919 --> 00:17:16,959
and i'm happy to answer them there okay

435
00:17:16,959 --> 00:17:18,640
thank you very much

436
00:17:18,640 --> 00:17:22,559
thank you can you stop sharing

