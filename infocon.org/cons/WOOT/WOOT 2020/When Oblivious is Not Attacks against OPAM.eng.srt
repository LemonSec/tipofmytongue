1
00:00:09,040 --> 00:00:13,120
good evening everybody

2
00:00:10,559 --> 00:00:14,079
my name is neet shah roy and today i'll

3
00:00:13,120 --> 00:00:15,758
be

4
00:00:14,080 --> 00:00:19,759
presenting our paper titled when

5
00:00:15,759 --> 00:00:20,960
oblivious is not attacks against opam

6
00:00:19,760 --> 00:00:22,880
we'll start off with the presentation

7
00:00:20,960 --> 00:00:24,400
roadmap we'll first have an introduction

8
00:00:22,880 --> 00:00:25,759
to enclaves and what programs or

9
00:00:24,400 --> 00:00:27,439
oblivious rams are

10
00:00:25,760 --> 00:00:29,519
we'll then describe how invasive pager

11
00:00:27,439 --> 00:00:31,679
op-amp works followed by

12
00:00:29,519 --> 00:00:33,040
the attacks and the vulnerabilities that

13
00:00:31,679 --> 00:00:35,360
we have found out and applied

14
00:00:33,040 --> 00:00:37,280
on them we'll discuss the covert channel

15
00:00:35,360 --> 00:00:38,879
that is possible using reuse distances

16
00:00:37,280 --> 00:00:40,800
so this distance is a term which we

17
00:00:38,879 --> 00:00:42,320
coined uh we'll

18
00:00:40,800 --> 00:00:44,399
we'll demonstrate how it works and then

19
00:00:42,320 --> 00:00:46,879
we'll beat idea with the conclusion

20
00:00:44,399 --> 00:00:47,920
so what are on clips enclaves are just a

21
00:00:46,879 --> 00:00:49,760
hardware provided

22
00:00:47,920 --> 00:00:51,680
isolated environment where applications

23
00:00:49,760 --> 00:00:53,920
can execute in a much secured way

24
00:00:51,680 --> 00:00:55,120
such that even if high level or higher

25
00:00:53,920 --> 00:00:56,879
privileged

26
00:00:55,120 --> 00:00:58,718
code like the operating system code of

27
00:00:56,879 --> 00:01:00,640
the device driver code is malicious

28
00:00:58,719 --> 00:01:03,520
it won't be able to leak secrets from

29
00:01:00,640 --> 00:01:05,920
there so overamps or m stands for uh

30
00:01:03,520 --> 00:01:07,760
oblivious ram so what it does is so

31
00:01:05,920 --> 00:01:09,760
we'll let's see with this diagram

32
00:01:07,760 --> 00:01:12,159
so there is a client which is trying to

33
00:01:09,760 --> 00:01:12,880
access our data at location i so which

34
00:01:12,159 --> 00:01:14,960
is di

35
00:01:12,880 --> 00:01:16,640
so it sends the index or the location to

36
00:01:14,960 --> 00:01:19,600
this odam interface whatever interface

37
00:01:16,640 --> 00:01:20,400
interacts with an untrusted server uh in

38
00:01:19,600 --> 00:01:23,520
the following way

39
00:01:20,400 --> 00:01:24,799
so if it tries to access location i what

40
00:01:23,520 --> 00:01:27,600
odam interface

41
00:01:24,799 --> 00:01:28,640
will do is it will access location i

42
00:01:27,600 --> 00:01:31,439
followed by it will

43
00:01:28,640 --> 00:01:32,479
access many other locations and then it

44
00:01:31,439 --> 00:01:35,600
will return

45
00:01:32,479 --> 00:01:38,240
the desired content

46
00:01:35,600 --> 00:01:38,880
or data at location i so what happens is

47
00:01:38,240 --> 00:01:40,720
uh

48
00:01:38,880 --> 00:01:42,880
since this interface accesses multiple

49
00:01:40,720 --> 00:01:44,960
locations the untrusted server

50
00:01:42,880 --> 00:01:45,920
gets confused and is unable to figure

51
00:01:44,960 --> 00:01:50,158
out the

52
00:01:45,920 --> 00:01:53,680
access pattern of the client

53
00:01:50,159 --> 00:01:56,240
so uh yeah so odam is just an interface

54
00:01:53,680 --> 00:01:57,200
so also the data is shuffled so after i

55
00:01:56,240 --> 00:01:59,039
is accessed

56
00:01:57,200 --> 00:02:00,320
uh the entire memory is reshuffled so

57
00:01:59,040 --> 00:02:02,960
that next time when i is

58
00:02:00,320 --> 00:02:04,079
again this this location i is accessed

59
00:02:02,960 --> 00:02:07,039
uh it will be in a

60
00:02:04,079 --> 00:02:08,399
it will be in a separate location so it

61
00:02:07,040 --> 00:02:11,280
hides access patterns and

62
00:02:08,399 --> 00:02:13,040
some examples of odams are three base

63
00:02:11,280 --> 00:02:14,160
some tree based orange like top path

64
00:02:13,040 --> 00:02:16,879
over ram ring or ram

65
00:02:14,160 --> 00:02:18,480
and square root orem which is not a

66
00:02:16,879 --> 00:02:21,679
freebie store

67
00:02:18,480 --> 00:02:22,959
so how does uh oram fits into the demand

68
00:02:21,680 --> 00:02:24,959
paging inside enclaves

69
00:02:22,959 --> 00:02:27,280
so there is this enclave application

70
00:02:24,959 --> 00:02:28,400
which is which is running in in a sealed

71
00:02:27,280 --> 00:02:30,480
environment

72
00:02:28,400 --> 00:02:31,599
and the page fault occurs so it is sent

73
00:02:30,480 --> 00:02:35,040
to this runtime

74
00:02:31,599 --> 00:02:36,399
so runtime is just a mini os or a mini

75
00:02:35,040 --> 00:02:39,040
kernel for the enclave app

76
00:02:36,400 --> 00:02:41,360
which is also a part of the trusted

77
00:02:39,040 --> 00:02:44,879
component and runs inside the enclave

78
00:02:41,360 --> 00:02:46,800
or sealed sealed environment

79
00:02:44,879 --> 00:02:47,920
this runtime is basically responsible

80
00:02:46,800 --> 00:02:50,400
for handling

81
00:02:47,920 --> 00:02:52,799
various types of page faults and other

82
00:02:50,400 --> 00:02:54,640
interrupts

83
00:02:52,800 --> 00:02:55,920
so the so that the control doesn't go to

84
00:02:54,640 --> 00:02:58,958
the untrusted host

85
00:02:55,920 --> 00:03:00,958
operating system so yeah so this uh the

86
00:02:58,959 --> 00:03:04,080
page fault goes to this runtime

87
00:03:00,959 --> 00:03:06,000
and the runtime basically sends the page

88
00:03:04,080 --> 00:03:07,519
faulting address to this odam interface

89
00:03:06,000 --> 00:03:11,200
the odam interface

90
00:03:07,519 --> 00:03:14,400
uh sends out a bunch of uh addresses or

91
00:03:11,200 --> 00:03:15,839
indices to this host os the host

92
00:03:14,400 --> 00:03:19,200
interacts with the untrusted memory

93
00:03:15,840 --> 00:03:22,000
fetches the page contents

94
00:03:19,200 --> 00:03:22,799
which are uh which are of course

95
00:03:22,000 --> 00:03:25,280
encrypted and

96
00:03:22,800 --> 00:03:26,799
as well as authenticated the the os

97
00:03:25,280 --> 00:03:29,680
sends it back to the odom interface

98
00:03:26,799 --> 00:03:31,599
interface sends the required page uh in

99
00:03:29,680 --> 00:03:33,840
the runtime the runtime decrypts it and

100
00:03:31,599 --> 00:03:35,518
and authenticates it and the control

101
00:03:33,840 --> 00:03:37,040
comes back to the enclave app and

102
00:03:35,519 --> 00:03:38,400
execution resumes

103
00:03:37,040 --> 00:03:40,400
so here the threat model is like the

104
00:03:38,400 --> 00:03:41,440
host os tries to find out the access

105
00:03:40,400 --> 00:03:43,280
pattern of

106
00:03:41,440 --> 00:03:44,640
this uh enclave application that is

107
00:03:43,280 --> 00:03:46,239
running

108
00:03:44,640 --> 00:03:48,079
but what the host phase ultimately

109
00:03:46,239 --> 00:03:51,760
observes is that a set of pages

110
00:03:48,080 --> 00:03:52,560
gets read in and then or a set of pages

111
00:03:51,760 --> 00:03:56,000
gets

112
00:03:52,560 --> 00:03:58,080
get evicted that the attacker of the

113
00:03:56,000 --> 00:04:00,000
host os can try to modify the

114
00:03:58,080 --> 00:04:01,519
pages but it will be detected in the

115
00:04:00,000 --> 00:04:03,680
runtime because all the pages are

116
00:04:01,519 --> 00:04:05,519
authenticated

117
00:04:03,680 --> 00:04:07,599
even if the attacker has some access to

118
00:04:05,519 --> 00:04:09,120
this physical access to the untrusted

119
00:04:07,599 --> 00:04:09,760
memory it won't help because of the fact

120
00:04:09,120 --> 00:04:11,920
that

121
00:04:09,760 --> 00:04:13,280
the contents are encrypted and we do not

122
00:04:11,920 --> 00:04:15,359
consider any kind of

123
00:04:13,280 --> 00:04:18,798
microarchitectural type of attacks we

124
00:04:15,360 --> 00:04:18,799
are only concerned with software attacks

125
00:04:20,000 --> 00:04:23,759
so our contributions first we discovered

126
00:04:21,519 --> 00:04:26,560
a vulnerability in nvc page and then

127
00:04:23,759 --> 00:04:26,560
systematically

128
00:04:27,040 --> 00:04:31,600
uh exploited it to form an attack which

129
00:04:29,520 --> 00:04:33,280
we call as the use distance attack

130
00:04:31,600 --> 00:04:34,800
we of course implemented demand paging

131
00:04:33,280 --> 00:04:36,320
in size inside keystone

132
00:04:34,800 --> 00:04:38,639
uh by the way the current version of

133
00:04:36,320 --> 00:04:40,159
keystone do support uh

134
00:04:38,639 --> 00:04:43,040
in this page they have their own system

135
00:04:40,160 --> 00:04:46,000
but we have a separate uh

136
00:04:43,040 --> 00:04:46,000
system of our own

137
00:04:46,320 --> 00:04:53,520
then we uh exploited this uh

138
00:04:50,560 --> 00:04:54,639
exploited this vulnerability to form new

139
00:04:53,520 --> 00:04:56,320
attacks the first one is called the

140
00:04:54,639 --> 00:04:57,600
rio's distance attacks

141
00:04:56,320 --> 00:04:59,680
and the second one is called the level

142
00:04:57,600 --> 00:05:02,560
tracking attack we also uh

143
00:04:59,680 --> 00:05:03,680
designed the covert channel which is

144
00:05:02,560 --> 00:05:06,240
designed well or

145
00:05:03,680 --> 00:05:07,919
which is uh formed using this reused

146
00:05:06,240 --> 00:05:09,280
distances we'll see what reuse distances

147
00:05:07,919 --> 00:05:13,919
are

148
00:05:09,280 --> 00:05:15,520
so so we'll first we'll describe how uh

149
00:05:13,919 --> 00:05:17,280
envision page at op-amp works so in the

150
00:05:15,520 --> 00:05:20,560
invisi page the metadata

151
00:05:17,280 --> 00:05:22,000
tree is decoupled from the data tree so

152
00:05:20,560 --> 00:05:23,600
the metadata tree contains some

153
00:05:22,000 --> 00:05:26,400
description of

154
00:05:23,600 --> 00:05:28,160
contains the metadata of the pages and

155
00:05:26,400 --> 00:05:31,359
the data tree contains actual

156
00:05:28,160 --> 00:05:32,720
pages or blocks

157
00:05:31,360 --> 00:05:34,080
so this red color indicates that they

158
00:05:32,720 --> 00:05:35,840
are in the untrusted world while the

159
00:05:34,080 --> 00:05:38,159
green color indicates that

160
00:05:35,840 --> 00:05:39,440
it is in the trusted or sealed memory

161
00:05:38,160 --> 00:05:42,479
region so these

162
00:05:39,440 --> 00:05:45,039
red locations are completely accessible

163
00:05:42,479 --> 00:05:47,360
to the operating system

164
00:05:45,039 --> 00:05:49,120
although we show the page numbers as 100

165
00:05:47,360 --> 00:05:52,240
692 something like this

166
00:05:49,120 --> 00:05:53,039
but they are actually encrypted so the

167
00:05:52,240 --> 00:05:55,759
os for

168
00:05:53,039 --> 00:05:57,840
the untrusted os won't know that this is

169
00:05:55,759 --> 00:05:59,919
the content is 100 so it will see some

170
00:05:57,840 --> 00:06:01,280
some gibberish some encrypted content so

171
00:05:59,919 --> 00:06:03,280
we have kept it for the sake of

172
00:06:01,280 --> 00:06:06,479
simplicity

173
00:06:03,280 --> 00:06:08,159
so let's say uh the client of the or uh

174
00:06:06,479 --> 00:06:10,080
the enclave application tries to access

175
00:06:08,160 --> 00:06:12,400
page number 88 and it's a fetch

176
00:06:10,080 --> 00:06:13,680
so what happens is it reads from the

177
00:06:12,400 --> 00:06:16,799
position map it tries to

178
00:06:13,680 --> 00:06:18,720
it tries to read the path the metadata

179
00:06:16,800 --> 00:06:20,400
tree path to find out where exactly in

180
00:06:18,720 --> 00:06:23,600
this part the target page

181
00:06:20,400 --> 00:06:25,919
resides so the contents so the metadata

182
00:06:23,600 --> 00:06:28,240
contents are fetched into the enclave

183
00:06:25,919 --> 00:06:29,280
uh they are of of course decrypted and

184
00:06:28,240 --> 00:06:31,280
authenticated and

185
00:06:29,280 --> 00:06:32,799
then a check is performed as to in as to

186
00:06:31,280 --> 00:06:36,400
where in this path

187
00:06:32,800 --> 00:06:38,960
the the tree lies i mean the page lies

188
00:06:36,400 --> 00:06:40,799
so if the page lies here so this page is

189
00:06:38,960 --> 00:06:43,280
so now the actual page is brought in

190
00:06:40,800 --> 00:06:44,240
and it is decrypted and authenticated

191
00:06:43,280 --> 00:06:47,520
and then uh

192
00:06:44,240 --> 00:06:49,360
of course this page

193
00:06:47,520 --> 00:06:50,560
uh is now remapped to a different

194
00:06:49,360 --> 00:06:52,400
location i just

195
00:06:50,560 --> 00:06:53,759
zero just a random number so this

196
00:06:52,400 --> 00:06:57,280
remapping is done

197
00:06:53,759 --> 00:06:59,199
using a random number generator now

198
00:06:57,280 --> 00:07:00,799
the next phase is the shuffling phase so

199
00:06:59,199 --> 00:07:04,720
the first

200
00:07:00,800 --> 00:07:06,880
phase was the page read uh or oram read

201
00:07:04,720 --> 00:07:08,080
stage and this is the path right or path

202
00:07:06,880 --> 00:07:11,520
shuffling phase

203
00:07:08,080 --> 00:07:12,159
so here uh uh it works in the following

204
00:07:11,520 --> 00:07:15,680
way

205
00:07:12,160 --> 00:07:18,160
so first we we write them we try to

206
00:07:15,680 --> 00:07:19,599
construct the path so here we see that

207
00:07:18,160 --> 00:07:22,319
the path to

208
00:07:19,599 --> 00:07:23,919
uh so in the in the previous slide we've

209
00:07:22,319 --> 00:07:25,680
seen that

210
00:07:23,919 --> 00:07:27,120
we read path two so we'll try to

211
00:07:25,680 --> 00:07:32,160
reconstruct or rewrite

212
00:07:27,120 --> 00:07:33,840
the same path so in part two

213
00:07:32,160 --> 00:07:35,680
250 is the only node that can be placed

214
00:07:33,840 --> 00:07:38,638
because it is mapped to leaf two

215
00:07:35,680 --> 00:07:39,360
so the n so 250 comes here then we are

216
00:07:38,639 --> 00:07:42,319
able to

217
00:07:39,360 --> 00:07:44,080
then at this at this at this location we

218
00:07:42,319 --> 00:07:47,120
can place a page

219
00:07:44,080 --> 00:07:48,719
which is either nafta two or three so we

220
00:07:47,120 --> 00:07:51,360
place hundred

221
00:07:48,720 --> 00:07:52,400
because android is mapped to two so it

222
00:07:51,360 --> 00:07:56,000
comes here

223
00:07:52,400 --> 00:07:58,400
and no page can be placed at this point

224
00:07:56,000 --> 00:08:00,240
because uh

225
00:07:58,400 --> 00:08:02,159
there's no page there's no more page

226
00:08:00,240 --> 00:08:07,360
available to be

227
00:08:02,160 --> 00:08:07,360
placed here so yeah

228
00:08:07,520 --> 00:08:13,840
so what happens so what happened is that

229
00:08:09,599 --> 00:08:13,840
as we if we see the last two figures

230
00:08:14,319 --> 00:08:20,400
here the the arrangement was hundred

231
00:08:18,160 --> 00:08:22,160
hundred to fifteen eighty eight and af

232
00:08:20,400 --> 00:08:25,280
after after shuffling

233
00:08:22,160 --> 00:08:27,680
the pages look like 100 and 250

234
00:08:25,280 --> 00:08:29,359
and 88 was red so it is no more present

235
00:08:27,680 --> 00:08:31,440
in the tree

236
00:08:29,360 --> 00:08:33,120
so this shuffling is totally done

237
00:08:31,440 --> 00:08:36,159
outside the enclave

238
00:08:33,120 --> 00:08:37,120
uh and the os can easily see how the

239
00:08:36,159 --> 00:08:38,559
shuffling is done

240
00:08:37,120 --> 00:08:40,320
so the enclave application basically

241
00:08:38,559 --> 00:08:43,359
sends the commands

242
00:08:40,320 --> 00:08:45,120
of uh commands to shuffle but the

243
00:08:43,360 --> 00:08:46,000
shuffling is done outside the enclave

244
00:08:45,120 --> 00:08:49,279
and

245
00:08:46,000 --> 00:08:51,040
uh the contents are not re-encrypted

246
00:08:49,279 --> 00:08:52,560
that is the shuffle pages so 250 is not

247
00:08:51,040 --> 00:08:54,880
re-encrypted hundreds is not

248
00:08:52,560 --> 00:08:56,479
re-encrypted this is a vulnerability as

249
00:08:54,880 --> 00:08:58,000
we see in the next slide

250
00:08:56,480 --> 00:09:00,000
so on every page fault we see that

251
00:08:58,000 --> 00:09:01,760
exactly one page gets transferred

252
00:09:00,000 --> 00:09:03,360
and the adversary is able to observe

253
00:09:01,760 --> 00:09:05,360
which page got exchanged

254
00:09:03,360 --> 00:09:07,040
since only one page gets it gets

255
00:09:05,360 --> 00:09:08,320
exchanged that means it is definitely

256
00:09:07,040 --> 00:09:11,680
not a dummy page

257
00:09:08,320 --> 00:09:12,880
and the host os of the adversary can

258
00:09:11,680 --> 00:09:16,079
find out

259
00:09:12,880 --> 00:09:19,200
number of intervening oram accesses or

260
00:09:16,080 --> 00:09:22,959
faults between two successive

261
00:09:19,200 --> 00:09:26,240
page uh page faults

262
00:09:22,959 --> 00:09:27,119
so if there is a page fault p another

263
00:09:26,240 --> 00:09:28,399
page fault queue

264
00:09:27,120 --> 00:09:31,440
that works it is able to calculate

265
00:09:28,399 --> 00:09:34,399
number of intervening page faults

266
00:09:31,440 --> 00:09:37,519
uh this makes uh op-amp not oblivious

267
00:09:34,399 --> 00:09:39,200
and this is a vulnerability

268
00:09:37,519 --> 00:09:41,440
so what is reduced distance so due

269
00:09:39,200 --> 00:09:43,279
distance is if a page p gets evicted at

270
00:09:41,440 --> 00:09:45,839
a time t0 and then

271
00:09:43,279 --> 00:09:48,480
it is again fetched or reused or brought

272
00:09:45,839 --> 00:09:49,680
back to the enclave

273
00:09:48,480 --> 00:09:51,839
the use distance is number of

274
00:09:49,680 --> 00:09:52,880
intervening page faults or overarm

275
00:09:51,839 --> 00:09:57,040
accesses

276
00:09:52,880 --> 00:09:59,519
in between those two times t 0 and t 1.

277
00:09:57,040 --> 00:10:01,439
uh if you are able to get such this such

278
00:09:59,519 --> 00:10:02,399
set of or sequence of use distances it

279
00:10:01,440 --> 00:10:04,320
will be different for different

280
00:10:02,399 --> 00:10:08,240
applications we found this by

281
00:10:04,320 --> 00:10:11,200
doing experiments and we are using this

282
00:10:08,240 --> 00:10:12,240
unique sequence of reduced distances we

283
00:10:11,200 --> 00:10:14,399
we can distinguish

284
00:10:12,240 --> 00:10:16,000
or predict which application is running

285
00:10:14,399 --> 00:10:18,880
inside the enclave

286
00:10:16,000 --> 00:10:20,240
so this is a concrete example so this is

287
00:10:18,880 --> 00:10:21,600
application one which is trying to

288
00:10:20,240 --> 00:10:24,480
access an array

289
00:10:21,600 --> 00:10:26,320
uh continuously in in a linear fashion

290
00:10:24,480 --> 00:10:28,480
whereas this is this accesses a binary

291
00:10:26,320 --> 00:10:29,920
tree which is in the form of an array

292
00:10:28,480 --> 00:10:33,519
uh so we'll assume that only has two

293
00:10:29,920 --> 00:10:37,040
physical pages with lr being used and

294
00:10:33,519 --> 00:10:40,320
so we see that for every

295
00:10:37,040 --> 00:10:43,599
page so for every iteration

296
00:10:40,320 --> 00:10:44,560
the uh the reuse distance for every page

297
00:10:43,600 --> 00:10:47,680
here is two

298
00:10:44,560 --> 00:10:49,599
so when so when page two is accessed the

299
00:10:47,680 --> 00:10:51,359
enclave has pages zero and one so page

300
00:10:49,600 --> 00:10:52,720
zero gets evicted when page three is

301
00:10:51,360 --> 00:10:55,680
accessed one gets evicted

302
00:10:52,720 --> 00:10:56,240
so next time when again zero is accessed

303
00:10:55,680 --> 00:10:59,599
uh

304
00:10:56,240 --> 00:11:02,480
we see that number of faults between

305
00:10:59,600 --> 00:11:03,839
the time zero was evicted and gets

306
00:11:02,480 --> 00:11:06,880
refetched

307
00:11:03,839 --> 00:11:10,399
it is two so two false means

308
00:11:06,880 --> 00:11:11,120
that page two was evicted and page three

309
00:11:10,399 --> 00:11:13,600
was evicted

310
00:11:11,120 --> 00:11:15,760
so number of faults is to so for every

311
00:11:13,600 --> 00:11:18,800
page that the false is to similarly we

312
00:11:15,760 --> 00:11:19,200
in in in this case uh number of faults

313
00:11:18,800 --> 00:11:22,079
is

314
00:11:19,200 --> 00:11:23,760
for every page is a multiple of two so

315
00:11:22,079 --> 00:11:26,000
the root node will always be two

316
00:11:23,760 --> 00:11:26,800
because it's uh it is accessed in every

317
00:11:26,000 --> 00:11:28,560
iteration

318
00:11:26,800 --> 00:11:30,000
the other internal nodes might not be

319
00:11:28,560 --> 00:11:33,279
accessed in every iteration

320
00:11:30,000 --> 00:11:35,760
but uh by uh

321
00:11:33,279 --> 00:11:37,360
for working it out we can see that every

322
00:11:35,760 --> 00:11:40,800
internal node will be

323
00:11:37,360 --> 00:11:43,920
uh reused after

324
00:11:40,800 --> 00:11:46,240
even number of faults

325
00:11:43,920 --> 00:11:49,040
so the use distance for every page is a

326
00:11:46,240 --> 00:11:49,040
multiple of two

327
00:11:49,839 --> 00:11:54,160
so i thought we'll now describe our

328
00:11:52,480 --> 00:11:56,000
attack methodology

329
00:11:54,160 --> 00:11:57,519
we have seen this similar diagram in the

330
00:11:56,000 --> 00:11:59,279
previous slide so this entire

331
00:11:57,519 --> 00:12:01,040
application it tries to uh

332
00:11:59,279 --> 00:12:03,200
for uh it causes the page fault control

333
00:12:01,040 --> 00:12:05,519
goes to the runtime in which

334
00:12:03,200 --> 00:12:06,639
runtime the runtime calls the modem

335
00:12:05,519 --> 00:12:08,320
interface in this case it is the

336
00:12:06,639 --> 00:12:10,480
invisipage or op-amp interface

337
00:12:08,320 --> 00:12:12,639
and let's say it is calling uh making a

338
00:12:10,480 --> 00:12:15,519
no call to evict page 88

339
00:12:12,639 --> 00:12:17,839
so so the os records page number 88

340
00:12:15,519 --> 00:12:20,399
again this 88 isn't just an encrypted

341
00:12:17,839 --> 00:12:22,079
address so it's something you need it it

342
00:12:20,399 --> 00:12:25,120
need not be

343
00:12:22,079 --> 00:12:27,680
88 so

344
00:12:25,120 --> 00:12:30,399
and uh yeah so the control comes back to

345
00:12:27,680 --> 00:12:32,880
the invisi page interface

346
00:12:30,399 --> 00:12:34,399
and control and the control and the

347
00:12:32,880 --> 00:12:37,360
application resumes

348
00:12:34,399 --> 00:12:38,639
so this way a couple of uh page faults

349
00:12:37,360 --> 00:12:41,519
page faults occur

350
00:12:38,639 --> 00:12:44,720
and after some time again uh and and

351
00:12:41,519 --> 00:12:44,720
these page votes are recorded

352
00:12:45,279 --> 00:12:48,560
then again the onslaught application

353
00:12:47,040 --> 00:12:51,760
tries to fetch

354
00:12:48,560 --> 00:12:54,800
page number 88 which it evicted

355
00:12:51,760 --> 00:12:55,760
some time back so the same goes on and

356
00:12:54,800 --> 00:12:58,880
our call

357
00:12:55,760 --> 00:13:02,480
is made for 88 to fetch so

358
00:12:58,880 --> 00:13:05,120
again the os records this access so 88

359
00:13:02,480 --> 00:13:06,240
read and the control comes back so we

360
00:13:05,120 --> 00:13:08,959
can see that

361
00:13:06,240 --> 00:13:10,240
uh between the time between 88 was

362
00:13:08,959 --> 00:13:13,199
evicted and 8 was

363
00:13:10,240 --> 00:13:14,720
read or refetched the os is able to

364
00:13:13,200 --> 00:13:16,480
record the number of faults in between

365
00:13:14,720 --> 00:13:18,240
and this is basically the rio's distance

366
00:13:16,480 --> 00:13:20,000
so if you can get such real distances

367
00:13:18,240 --> 00:13:23,120
for all the pages

368
00:13:20,000 --> 00:13:25,920
it will be it will be

369
00:13:23,120 --> 00:13:27,519
different for different application or

370
00:13:25,920 --> 00:13:28,479
different memory access patterns and

371
00:13:27,519 --> 00:13:31,760
hence

372
00:13:28,480 --> 00:13:31,760
invisipage is not

373
00:13:32,240 --> 00:13:36,959
memory access oblivious so what we did

374
00:13:35,839 --> 00:13:40,240
was we collected a trace of

375
00:13:36,959 --> 00:13:42,239
distances for many apps and uh

376
00:13:40,240 --> 00:13:43,440
every application was executed for a

377
00:13:42,240 --> 00:13:45,440
couple of inputs

378
00:13:43,440 --> 00:13:47,440
and then we trained the sequences using

379
00:13:45,440 --> 00:13:49,279
a conventional

380
00:13:47,440 --> 00:13:50,720
neural network sequence classifier which

381
00:13:49,279 --> 00:13:52,399
takes in a

382
00:13:50,720 --> 00:13:53,839
sequence and classifies it into one of

383
00:13:52,399 --> 00:13:57,120
the n classes so here n

384
00:13:53,839 --> 00:13:58,399
is uh just the applications and for

385
00:13:57,120 --> 00:14:01,440
testing we took a random

386
00:13:58,399 --> 00:14:03,199
uh random

387
00:14:01,440 --> 00:14:04,480
reduced distance trace for an

388
00:14:03,199 --> 00:14:07,680
application

389
00:14:04,480 --> 00:14:08,480
uh which the cnn has not seen i mean uh

390
00:14:07,680 --> 00:14:11,279
we take a

391
00:14:08,480 --> 00:14:14,240
sequence of an application and the

392
00:14:11,279 --> 00:14:17,600
sequence was not seen uh or trained

393
00:14:14,240 --> 00:14:19,920
in the cnn sequence classifier and then

394
00:14:17,600 --> 00:14:20,800
we try to measure how is it able to

395
00:14:19,920 --> 00:14:24,000
detect

396
00:14:20,800 --> 00:14:27,519
or classify unknown sequences but yeah

397
00:14:24,000 --> 00:14:29,680
the the sequence has to be

398
00:14:27,519 --> 00:14:30,880
of a known application the sequence

399
00:14:29,680 --> 00:14:32,638
might be different but the application

400
00:14:30,880 --> 00:14:36,399
has to be of course known because

401
00:14:32,639 --> 00:14:36,399
number of classes is fixed in a training

402
00:14:37,440 --> 00:14:43,519
so this is the accuracy that we have got

403
00:14:40,480 --> 00:14:46,240
so we executed 100 to 200 inputs

404
00:14:43,519 --> 00:14:47,760
for these eight applications so we

405
00:14:46,240 --> 00:14:48,560
divided the entire dataset into threes

406
00:14:47,760 --> 00:14:51,120
to one ratio

407
00:14:48,560 --> 00:14:52,079
and we repeated it multiple times so

408
00:14:51,120 --> 00:14:54,880
that uh

409
00:14:52,079 --> 00:14:56,239
we get an accurate value and uh there is

410
00:14:54,880 --> 00:15:00,320
no

411
00:14:56,240 --> 00:15:00,320
overfit or an under fit issue

412
00:15:08,160 --> 00:15:12,480
so yeah so and the splitting was also

413
00:15:10,320 --> 00:15:15,920
done randomly

414
00:15:12,480 --> 00:15:15,920
into training and test data sets

415
00:15:16,079 --> 00:15:20,479
i will now describe covert channel using

416
00:15:18,560 --> 00:15:23,439
these distances

417
00:15:20,480 --> 00:15:26,320
so the model here is that there is

418
00:15:23,440 --> 00:15:29,120
onslave application

419
00:15:26,320 --> 00:15:30,560
there is this enclave application and a

420
00:15:29,120 --> 00:15:32,959
host operating system

421
00:15:30,560 --> 00:15:35,359
so they are not allowed to pass any

422
00:15:32,959 --> 00:15:35,359
message

423
00:15:37,360 --> 00:15:40,720
so they are not allowed to pass any

424
00:15:38,639 --> 00:15:42,720
message if it tries to pass a message

425
00:15:40,720 --> 00:15:44,560
it will be blocked but what they can do

426
00:15:42,720 --> 00:15:46,160
is it of course do some page exchanges

427
00:15:44,560 --> 00:15:50,239
during paging

428
00:15:46,160 --> 00:15:53,279
and the host os can observe the trace of

429
00:15:50,240 --> 00:15:55,519
page faults and the enclave application

430
00:15:53,279 --> 00:15:58,800
will try to engineer or try to

431
00:15:55,519 --> 00:16:00,480
cause a sequence of page faults and

432
00:15:58,800 --> 00:16:02,479
hence a sequence of use distances in

433
00:16:00,480 --> 00:16:06,639
such a way that the host os

434
00:16:02,480 --> 00:16:08,320
is able to uh process them and infer

435
00:16:06,639 --> 00:16:10,079
the message that the enclave application

436
00:16:08,320 --> 00:16:11,680
is trying to send so in this case the

437
00:16:10,079 --> 00:16:13,839
enclave app as well as the whole story

438
00:16:11,680 --> 00:16:17,279
they're colluding with each other

439
00:16:13,839 --> 00:16:18,880
so this basically the page fault or this

440
00:16:17,279 --> 00:16:20,399
yeah this this page fault is basically

441
00:16:18,880 --> 00:16:22,320
the covert channel

442
00:16:20,399 --> 00:16:24,800
which is used by the enclave app to send

443
00:16:22,320 --> 00:16:24,800
messages

444
00:16:25,440 --> 00:16:28,800
so it's a standard enclave threat model

445
00:16:27,360 --> 00:16:30,639
where only the enclave application is

446
00:16:28,800 --> 00:16:34,399
trusted

447
00:16:30,639 --> 00:16:34,399
and we consider only software attackers

448
00:16:34,959 --> 00:16:38,399
as we have said we do not consider any

449
00:16:36,320 --> 00:16:41,600
microarchitectural side channels

450
00:16:38,399 --> 00:16:43,360
uh the enclave application in the whole

451
00:16:41,600 --> 00:16:45,680
store is colludes with each other

452
00:16:43,360 --> 00:16:47,360
and the host os is aware of the encoding

453
00:16:45,680 --> 00:16:48,800
uh in which

454
00:16:47,360 --> 00:16:50,959
which is used by the enclave application

455
00:16:48,800 --> 00:16:52,399
to transfer the messages

456
00:16:50,959 --> 00:16:54,880
so we'll take our concrete example over

457
00:16:52,399 --> 00:16:55,440
here uh so we'll assume that the message

458
00:16:54,880 --> 00:16:57,600
that the

459
00:16:55,440 --> 00:16:59,199
app wants to send is one one double zero

460
00:16:57,600 --> 00:17:00,639
one number of so there mis

461
00:16:59,199 --> 00:17:03,359
the length of the message is four and

462
00:17:00,639 --> 00:17:06,640
then it is two so one zero zero

463
00:17:03,360 --> 00:17:09,439
one zero zero one uh

464
00:17:06,640 --> 00:17:11,679
in binary is just one zero zero one so

465
00:17:09,439 --> 00:17:14,559
and page replacement policy is five four

466
00:17:11,679 --> 00:17:15,360
and the enclave has four physical pages

467
00:17:14,559 --> 00:17:18,480
now to

468
00:17:15,359 --> 00:17:21,280
uh to transfer bit one uh we will

469
00:17:18,480 --> 00:17:23,199
try to generate our use distance of the

470
00:17:21,280 --> 00:17:24,079
range 8 to 16 which corresponds to bit 1

471
00:17:23,199 --> 00:17:28,079
and 8

472
00:17:24,079 --> 00:17:28,079
and for bit 0 it is 9 to 16.

473
00:17:31,280 --> 00:17:35,840
okay so yeah so first a stands for

474
00:17:35,039 --> 00:17:39,360
access

475
00:17:35,840 --> 00:17:40,959
and e stands for evict so we we

476
00:17:39,360 --> 00:17:42,959
so the application first accesses first

477
00:17:40,960 --> 00:17:43,600
16 pages and the adversary observes the

478
00:17:42,960 --> 00:17:47,520
first

479
00:17:43,600 --> 00:17:51,120
12 pages getting evicted followed by

480
00:17:47,520 --> 00:17:52,480
the access uh followed by access of uh

481
00:17:51,120 --> 00:17:55,439
page number one because we're

482
00:17:52,480 --> 00:17:57,039
trying to uh access we are trying to

483
00:17:55,440 --> 00:18:00,400
download application tries to

484
00:17:57,039 --> 00:18:02,480
send a bit one so it must access

485
00:18:00,400 --> 00:18:04,080
page between one to eight followed by

486
00:18:02,480 --> 00:18:06,880
zero so it should access a page between

487
00:18:04,080 --> 00:18:06,879
nine to sixteen

488
00:18:07,520 --> 00:18:14,480
and then again

489
00:18:10,960 --> 00:18:18,320
ten and then

490
00:18:14,480 --> 00:18:21,120
this is 14. so

491
00:18:18,320 --> 00:18:22,879
we got the sequence of use distances as

492
00:18:21,120 --> 00:18:26,399
12 double 5 14

493
00:18:22,880 --> 00:18:30,400
which corresponds to bits 1 0 0 1

494
00:18:26,400 --> 00:18:32,559
and hence the bit the enclave is

495
00:18:30,400 --> 00:18:33,679
successful in sending the messages

496
00:18:32,559 --> 00:18:36,960
message to the

497
00:18:33,679 --> 00:18:38,080
host to us via page faults

498
00:18:36,960 --> 00:18:40,640
we have done an analysis of the

499
00:18:38,080 --> 00:18:44,080
bandwidth so a peak

500
00:18:40,640 --> 00:18:44,880
with an additive 4 we see uh the maximum

501
00:18:44,080 --> 00:18:48,159
bandwidth

502
00:18:44,880 --> 00:18:49,520
and as we decrease the arity

503
00:18:48,160 --> 00:18:52,480
as as we increase the addit the

504
00:18:49,520 --> 00:18:54,799
transmission bandwidth decreases so at 4

505
00:18:52,480 --> 00:18:55,679
the bandwidth is maximum because in each

506
00:18:54,799 --> 00:18:56,960
page fault

507
00:18:55,679 --> 00:18:58,640
as we have seen in the previous slide

508
00:18:56,960 --> 00:19:00,240
each page fault in this case

509
00:18:58,640 --> 00:19:03,679
corresponded to

510
00:19:00,240 --> 00:19:06,400
one bit but if that it is four then

511
00:19:03,679 --> 00:19:08,160
every digit will be either zero one two

512
00:19:06,400 --> 00:19:09,760
or three which corresponds to two bits

513
00:19:08,160 --> 00:19:11,679
so every fault would have contributed

514
00:19:09,760 --> 00:19:14,480
two bits and hence the

515
00:19:11,679 --> 00:19:16,080
uh bandwidth increases but on further

516
00:19:14,480 --> 00:19:17,600
increasing the arity

517
00:19:16,080 --> 00:19:20,000
uh the initial number of page faults

518
00:19:17,600 --> 00:19:22,879
which was 16 in in this case

519
00:19:20,000 --> 00:19:25,120
increases and this overhead basically

520
00:19:22,880 --> 00:19:29,280
brings down the

521
00:19:25,120 --> 00:19:30,719
overall bandwidth because of the high

522
00:19:29,280 --> 00:19:32,879
high performance overheads of page

523
00:19:30,720 --> 00:19:33,840
faults because every page fault involves

524
00:19:32,880 --> 00:19:35,919
page transfers

525
00:19:33,840 --> 00:19:37,918
encryption decryption authentication

526
00:19:35,919 --> 00:19:38,960
these things a context which is between

527
00:19:37,919 --> 00:19:43,280
enclave and the

528
00:19:38,960 --> 00:19:45,679
outside non-enclave world

529
00:19:43,280 --> 00:19:47,200
so we conclude now uh we've introduced a

530
00:19:45,679 --> 00:19:48,320
new side channel attack values distance

531
00:19:47,200 --> 00:19:50,240
attack which is able to infer

532
00:19:48,320 --> 00:19:53,760
confidential information about

533
00:19:50,240 --> 00:19:55,039
enclaves execution uh followed by a new

534
00:19:53,760 --> 00:19:57,679
cohort channel

535
00:19:55,039 --> 00:19:59,520
where even if the enclave application is

536
00:19:57,679 --> 00:20:01,600
not allowed to send

537
00:19:59,520 --> 00:20:03,440
x information on messages explicitly it

538
00:20:01,600 --> 00:20:04,639
can do it using page faults which is a

539
00:20:03,440 --> 00:20:06,720
cover channel

540
00:20:04,640 --> 00:20:08,480
we exported found and exploited

541
00:20:06,720 --> 00:20:09,360
systematically a vulnerability in one of

542
00:20:08,480 --> 00:20:11,200
the state of the

543
00:20:09,360 --> 00:20:15,199
state-of-the-art approaches to secure

544
00:20:11,200 --> 00:20:18,400
demand paging which is invisible op-amp

545
00:20:15,200 --> 00:20:22,320
uh yeah so uh this presentation

546
00:20:18,400 --> 00:20:23,760
this paper is dedicated to our advisor

547
00:20:22,320 --> 00:20:26,639
in memory of our advisor dr pramod

548
00:20:23,760 --> 00:20:31,360
subramanian we're very sorry uh to

549
00:20:26,640 --> 00:20:31,360
that he is not amongst us anymore

550
00:20:33,039 --> 00:20:36,080
thank you uh this work was supported by

551
00:20:35,200 --> 00:20:39,280
acrb

552
00:20:36,080 --> 00:20:41,039
india and uh i'd like to thank all the

553
00:20:39,280 --> 00:20:42,399
authors all my co-authors nikhil bhansal

554
00:20:41,039 --> 00:20:46,000
nikhil mithal

555
00:20:42,400 --> 00:20:49,840
uh god of tucker and our advisor dr

556
00:20:46,000 --> 00:20:49,840
late dr pramot sabramanian

557
00:20:50,559 --> 00:21:05,600
we will take questions now

558
00:21:03,520 --> 00:21:05,600
you

