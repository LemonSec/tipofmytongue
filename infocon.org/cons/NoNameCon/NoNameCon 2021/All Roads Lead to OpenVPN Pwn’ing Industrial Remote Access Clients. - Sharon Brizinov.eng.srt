1
00:00:03,919 --> 00:00:05,839
hello everyone and welcome to my talk

2
00:00:05,839 --> 00:00:08,559
all roads related to openvpn pwning

3
00:00:08,559 --> 00:00:11,040
industrial remote access clients my name

4
00:00:11,040 --> 00:00:12,400
is fran brzezinov and i work at

5
00:00:12,400 --> 00:00:15,040
clerthing and in this talk we'll i will

6
00:00:15,040 --> 00:00:17,680
describe um and tell you a story behind

7
00:00:17,680 --> 00:00:19,520
the research we've conducted in our

8
00:00:19,520 --> 00:00:21,520
research department and

9
00:00:21,520 --> 00:00:24,320
clarity so let's start quickly with who

10
00:00:24,320 --> 00:00:26,720
am i so as i said my name is sharon

11
00:00:26,720 --> 00:00:28,800
brazinov i'm a vulnerability research

12
00:00:28,800 --> 00:00:32,159
team related clarity and my main focus

13
00:00:32,159 --> 00:00:35,760
area of research is ics cyber security

14
00:00:35,760 --> 00:00:39,200
and as you can see here our lab we have

15
00:00:39,200 --> 00:00:42,559
a lot of ics related equipment with plcs

16
00:00:42,559 --> 00:00:45,039
hmis engineering working stations

17
00:00:45,039 --> 00:00:46,800
we have all different kind of sensors

18
00:00:46,800 --> 00:00:49,120
and field devices that we're playing

19
00:00:49,120 --> 00:00:51,039
with that's why we love to call it the

20
00:00:51,039 --> 00:00:52,719
playground

21
00:00:52,719 --> 00:00:56,879
but is the the official name is our lab

22
00:00:56,879 --> 00:00:59,600
so let's start with uh the agenda for

23
00:00:59,600 --> 00:01:01,199
today so first of all i'm going to tell

24
00:01:01,199 --> 00:01:03,600
you the story behind this research then

25
00:01:03,600 --> 00:01:05,920
we'll go over quickly uh

26
00:01:05,920 --> 00:01:06,799
and

27
00:01:06,799 --> 00:01:08,880
we'll describe what is industrial ot

28
00:01:08,880 --> 00:01:11,600
networks then we're gonna discuss what

29
00:01:11,600 --> 00:01:13,760
are remote access solutions

30
00:01:13,760 --> 00:01:14,799
and

31
00:01:14,799 --> 00:01:18,080
what's what's the relation to openvpn

32
00:01:18,080 --> 00:01:20,720
and what are the design flows that we

33
00:01:20,720 --> 00:01:23,840
found in how remote access solutions are

34
00:01:23,840 --> 00:01:27,759
implementing openvpn and why and how we

35
00:01:27,759 --> 00:01:30,880
abused and exploited this fact to gain a

36
00:01:30,880 --> 00:01:33,520
couple of vulnerabilities in cvs

37
00:01:33,520 --> 00:01:34,560
so

38
00:01:34,560 --> 00:01:36,560
with that let's start with our story

39
00:01:36,560 --> 00:01:38,000
time so

40
00:01:38,000 --> 00:01:40,960
2020 as you all know the corona virus

41
00:01:40,960 --> 00:01:43,200
the current epidemic broke out

42
00:01:43,200 --> 00:01:45,119
around the world and people started to

43
00:01:45,119 --> 00:01:46,399
work from home

44
00:01:46,399 --> 00:01:49,680
so uh wfas worked from home become very

45
00:01:49,680 --> 00:01:52,079
popular but people still still need it

46
00:01:52,079 --> 00:01:55,839
to work somehow so

47
00:01:56,159 --> 00:01:58,960
working places started to use vpns and

48
00:01:58,960 --> 00:02:01,119
vpns

49
00:02:01,119 --> 00:02:03,520
as you know allow people to connect

50
00:02:03,520 --> 00:02:06,079
remotely to other networks so

51
00:02:06,079 --> 00:02:08,239
it's a future private network that

52
00:02:08,239 --> 00:02:11,038
allows uh in this case employees to

53
00:02:11,038 --> 00:02:13,680
connect to their working place without

54
00:02:13,680 --> 00:02:16,879
being physical and on-site

55
00:02:16,879 --> 00:02:18,400
and

56
00:02:18,400 --> 00:02:20,560
we as a security

57
00:02:20,560 --> 00:02:22,480
cyber security firm and other

58
00:02:22,480 --> 00:02:24,879
researchers and also attackers across

59
00:02:24,879 --> 00:02:27,200
the globe started to look into vpn

60
00:02:27,200 --> 00:02:30,319
solutions and remote access solutions

61
00:02:30,319 --> 00:02:33,519
to find vulnerabilities in so

62
00:02:33,519 --> 00:02:36,239
many researchers started to to discover

63
00:02:36,239 --> 00:02:38,400
vulnerabilities and attackers started

64
00:02:38,400 --> 00:02:39,920
hackers started to exploit these

65
00:02:39,920 --> 00:02:42,319
vulnerabilities

66
00:02:42,319 --> 00:02:43,200
and

67
00:02:43,200 --> 00:02:44,319
we too

68
00:02:44,319 --> 00:02:47,840
in clarity started to research these

69
00:02:47,840 --> 00:02:49,840
products and eventually we found a

70
00:02:49,840 --> 00:02:51,519
couple of an abilities and we got our

71
00:02:51,519 --> 00:02:52,640
cvs

72
00:02:52,640 --> 00:02:55,840
and when i'm discussing vpn so usually

73
00:02:55,840 --> 00:02:57,920
in the industrial world

74
00:02:57,920 --> 00:03:00,319
we're usually talking about an engineer

75
00:03:00,319 --> 00:03:02,879
for so in this example we have here

76
00:03:02,879 --> 00:03:05,360
let's call it rachel the rachel the

77
00:03:05,360 --> 00:03:07,760
engineer and she's working from home

78
00:03:07,760 --> 00:03:09,680
it's corona time so

79
00:03:09,680 --> 00:03:10,879
her kids

80
00:03:10,879 --> 00:03:12,879
are home too and you can see the baby on

81
00:03:12,879 --> 00:03:15,519
her hands and she's trying to work

82
00:03:15,519 --> 00:03:18,159
but from home she's trying to connect uh

83
00:03:18,159 --> 00:03:21,840
to the industrial network in the factory

84
00:03:21,840 --> 00:03:23,440
uh and so

85
00:03:23,440 --> 00:03:26,560
her goal is to communicate with one of

86
00:03:26,560 --> 00:03:28,959
the devices in the network in this

87
00:03:28,959 --> 00:03:31,760
example it's a robotic arm that

88
00:03:31,760 --> 00:03:33,920
she's trying to control somehow and for

89
00:03:33,920 --> 00:03:36,480
that she needs to connect to the vpn so

90
00:03:36,480 --> 00:03:39,840
she's using she's using a vpn software

91
00:03:39,840 --> 00:03:43,599
on uh on her computer so on her private

92
00:03:43,599 --> 00:03:46,560
machine uh and using this software she

93
00:03:46,560 --> 00:03:48,959
is able to connect through vpn tunnel to

94
00:03:48,959 --> 00:03:50,799
the network and she is able to control

95
00:03:50,799 --> 00:03:52,239
the robotic arm

96
00:03:52,239 --> 00:03:54,879
so our goal was uh

97
00:03:54,879 --> 00:03:57,760
if we can find since many researchers

98
00:03:57,760 --> 00:03:59,680
are trying to find vulnerability in the

99
00:03:59,680 --> 00:04:01,519
vpn servers

100
00:04:01,519 --> 00:04:05,360
we tried to focus this time on rachel's

101
00:04:05,360 --> 00:04:08,000
machine so we tried it to focus on the

102
00:04:08,000 --> 00:04:11,599
computer or the client side and we poked

103
00:04:11,599 --> 00:04:13,920
we poked different industrial remote

104
00:04:13,920 --> 00:04:16,000
access clients to find vulnerabilities

105
00:04:16,000 --> 00:04:17,358
in them

106
00:04:17,358 --> 00:04:18,079
so

107
00:04:18,079 --> 00:04:19,918
that's the background

108
00:04:19,918 --> 00:04:22,880
on on the research or why we started it

109
00:04:22,880 --> 00:04:25,520
uh and now let's talk a little bit about

110
00:04:25,520 --> 00:04:28,639
our domain field so it industrial ot

111
00:04:28,639 --> 00:04:31,040
networks and let's start with this

112
00:04:31,040 --> 00:04:32,240
diagram

113
00:04:32,240 --> 00:04:35,199
or uh image from a factory so as you can

114
00:04:35,199 --> 00:04:37,759
see here it's a starter factory we can

115
00:04:37,759 --> 00:04:39,840
see a conveyor belt here so this

116
00:04:39,840 --> 00:04:43,840
conveyor belt is just

117
00:04:44,560 --> 00:04:48,639
it is just a belt that spins and used to

118
00:04:48,639 --> 00:04:51,680
move objects from one side of the plant

119
00:04:51,680 --> 00:04:54,560
or factory to the other side and across

120
00:04:54,560 --> 00:04:57,199
this belt there are a couple of sensors

121
00:04:57,199 --> 00:04:58,160
and

122
00:04:58,160 --> 00:05:01,039
actuators or motors that

123
00:05:01,039 --> 00:05:05,680
spins and tell this belt how to spin and

124
00:05:05,680 --> 00:05:08,479
what controls this entire belt and this

125
00:05:08,479 --> 00:05:12,400
entire mechanism is a device called plc

126
00:05:12,400 --> 00:05:15,919
and the plc is the brain behind actually

127
00:05:15,919 --> 00:05:17,520
every machinery that you see in the

128
00:05:17,520 --> 00:05:19,280
industrial world

129
00:05:19,280 --> 00:05:21,520
there are tons of different vendors of

130
00:05:21,520 --> 00:05:24,240
plc's and this is just an example i

131
00:05:24,240 --> 00:05:26,400
found online but this plc what's

132
00:05:26,400 --> 00:05:29,680
important in it is it is that it runs

133
00:05:29,680 --> 00:05:32,880
logic continuously running logic so what

134
00:05:32,880 --> 00:05:36,080
happens is that the programmer uh

135
00:05:36,080 --> 00:05:38,400
writing logic to this plc transfers the

136
00:05:38,400 --> 00:05:40,400
logic to this plc

137
00:05:40,400 --> 00:05:43,759
and the programmer is using uh

138
00:05:43,759 --> 00:05:46,560
something similar to ide so

139
00:05:46,560 --> 00:05:48,639
for example this is the

140
00:05:48,639 --> 00:05:51,120
the id that the engineering is using and

141
00:05:51,120 --> 00:05:53,120
the right terminology for this is

142
00:05:53,120 --> 00:05:55,120
engineering working station so using the

143
00:05:55,120 --> 00:05:56,800
engineering working station they're

144
00:05:56,800 --> 00:06:00,080
writing logic for example uh how to read

145
00:06:00,080 --> 00:06:02,080
data from different sensors and how to

146
00:06:02,080 --> 00:06:03,919
command the different actuators and

147
00:06:03,919 --> 00:06:06,000
motors so the first step would be to

148
00:06:06,000 --> 00:06:07,199
program

149
00:06:07,199 --> 00:06:09,520
the logic that will be executed on the

150
00:06:09,520 --> 00:06:12,560
plc and then the plc can

151
00:06:12,560 --> 00:06:15,120
run continuously this logic and control

152
00:06:15,120 --> 00:06:17,520
the sensors and actuators

153
00:06:17,520 --> 00:06:20,800
for example motors on the conveyor belt

154
00:06:20,800 --> 00:06:23,199
or other machinery to control it so for

155
00:06:23,199 --> 00:06:24,400
example

156
00:06:24,400 --> 00:06:26,240
the plc can receive data from the

157
00:06:26,240 --> 00:06:28,800
sensors that tells it the height of a

158
00:06:28,800 --> 00:06:31,199
certain box and then based on the

159
00:06:31,199 --> 00:06:32,840
written logic

160
00:06:32,840 --> 00:06:35,520
the plc can decide

161
00:06:35,520 --> 00:06:38,000
how to change the actuators where the

162
00:06:38,000 --> 00:06:40,800
are the motors to drive this object

163
00:06:40,800 --> 00:06:43,120
across the conveyor belt so this is the

164
00:06:43,120 --> 00:06:44,400
brain

165
00:06:44,400 --> 00:06:46,800
and most of the industrial networks are

166
00:06:46,800 --> 00:06:48,319
built

167
00:06:48,319 --> 00:06:52,080
on these plc's and this uh

168
00:06:52,080 --> 00:06:53,520
this scheme of engineering working

169
00:06:53,520 --> 00:06:55,120
station and a plc

170
00:06:55,120 --> 00:06:56,240
and again

171
00:06:56,240 --> 00:06:58,800
engineers are writing programs in the

172
00:06:58,800 --> 00:07:00,639
engineering working station which is a

173
00:07:00,639 --> 00:07:03,120
windows based software and through this

174
00:07:03,120 --> 00:07:05,280
software they're transferring the the

175
00:07:05,280 --> 00:07:06,400
logic

176
00:07:06,400 --> 00:07:08,160
that will be executed on the plc and

177
00:07:08,160 --> 00:07:10,960
then the plc is the one that controls

178
00:07:10,960 --> 00:07:13,440
the actual same source or and other

179
00:07:13,440 --> 00:07:14,840
field

180
00:07:14,840 --> 00:07:19,199
devices and the goal of

181
00:07:19,199 --> 00:07:21,039
people that managing and writing

182
00:07:21,039 --> 00:07:22,960
programs to these plcs and actually

183
00:07:22,960 --> 00:07:25,440
maintaining these pcs is to

184
00:07:25,440 --> 00:07:27,599
connect to these pcs so they need

185
00:07:27,599 --> 00:07:30,880
connectivity to is these plcs and

186
00:07:30,880 --> 00:07:33,120
they're doing this with remote access

187
00:07:33,120 --> 00:07:35,440
solutions when they're working from home

188
00:07:35,440 --> 00:07:37,840
so this is a very basic scheme of how

189
00:07:37,840 --> 00:07:40,479
remote access solutions are working

190
00:07:40,479 --> 00:07:43,840
basically you can see here the engineer

191
00:07:43,840 --> 00:07:47,120
working from home and they need access

192
00:07:47,120 --> 00:07:49,039
for this in our example we're using

193
00:07:49,039 --> 00:07:52,240
rachel rachel needs access from her home

194
00:07:52,240 --> 00:07:54,720
to the factory where she can control the

195
00:07:54,720 --> 00:07:57,680
plc's hmis and other devices on the

196
00:07:57,680 --> 00:08:00,560
industrial network and to do that she is

197
00:08:00,560 --> 00:08:03,440
using she's using a vpn service or a

198
00:08:03,440 --> 00:08:06,160
remote access solution

199
00:08:06,160 --> 00:08:08,639
and it starts with a client on her

200
00:08:08,639 --> 00:08:11,440
computer which connects through a cloud

201
00:08:11,440 --> 00:08:12,400
gateway

202
00:08:12,400 --> 00:08:15,120
to a physical embedded device on the

203
00:08:15,120 --> 00:08:16,240
network

204
00:08:16,240 --> 00:08:17,840
and

205
00:08:17,840 --> 00:08:19,199
this

206
00:08:19,199 --> 00:08:21,440
this hardware appliance actually has two

207
00:08:21,440 --> 00:08:24,319
network interfaces one on the internet

208
00:08:24,319 --> 00:08:27,280
outside and one into the ulti network

209
00:08:27,280 --> 00:08:29,599
and then she has connectivity

210
00:08:29,599 --> 00:08:32,399
uh to the plc's she can write programs

211
00:08:32,399 --> 00:08:35,120
and change the logic on these pcs or

212
00:08:35,120 --> 00:08:38,080
monitor these plcs that will eventually

213
00:08:38,080 --> 00:08:40,479
control the actual field devices for

214
00:08:40,479 --> 00:08:42,159
example the robotic arm that we've

215
00:08:42,159 --> 00:08:44,240
discussed before so she needs this

216
00:08:44,240 --> 00:08:46,399
connectivity to control the plc which

217
00:08:46,399 --> 00:08:48,720
controls the robotic arm

218
00:08:48,720 --> 00:08:49,519
and

219
00:08:49,519 --> 00:08:51,760
this tunnel here although it looks very

220
00:08:51,760 --> 00:08:53,440
simple is actually

221
00:08:53,440 --> 00:08:56,880
not that simple so uh in the modern days

222
00:08:56,880 --> 00:08:59,200
we have a terminology called vpn a

223
00:08:59,200 --> 00:09:00,880
virtual private network which

224
00:09:00,880 --> 00:09:03,680
essentially creates a vpn talent between

225
00:09:03,680 --> 00:09:06,080
two places so the remote client can

226
00:09:06,080 --> 00:09:07,920
communicate

227
00:09:07,920 --> 00:09:10,720
internally on the other side with a

228
00:09:10,720 --> 00:09:14,000
remote network and it does this by

229
00:09:14,000 --> 00:09:16,720
encrypting the payload on the entrance

230
00:09:16,720 --> 00:09:19,120
to this tunnel so this is the packet

231
00:09:19,120 --> 00:09:21,600
that we want to send to the other side

232
00:09:21,600 --> 00:09:23,920
the vpn service will actually take this

233
00:09:23,920 --> 00:09:25,839
packet that we want to send encrypt it

234
00:09:25,839 --> 00:09:28,160
and then add a couple of more headers

235
00:09:28,160 --> 00:09:30,160
and then send it across the tunnel to

236
00:09:30,160 --> 00:09:33,920
the other side then it will be dissected

237
00:09:33,920 --> 00:09:35,680
and broken down

238
00:09:35,680 --> 00:09:38,320
all these layers will be turned off and

239
00:09:38,320 --> 00:09:41,200
then the payload our packet will be sent

240
00:09:41,200 --> 00:09:43,440
internally on the network

241
00:09:43,440 --> 00:09:44,480
and

242
00:09:44,480 --> 00:09:46,800
one of the most common solutions when

243
00:09:46,800 --> 00:09:49,440
we're talking about vpns is openvpn

244
00:09:49,440 --> 00:09:52,000
because this is a great

245
00:09:52,000 --> 00:09:54,560
open source implementation of a vpn

246
00:09:54,560 --> 00:09:57,200
protocol so it consists of client and

247
00:09:57,200 --> 00:09:59,120
server applications it consists of a

248
00:09:59,120 --> 00:10:01,959
dedicated protocol over udp

249
00:10:01,959 --> 00:10:07,200
1194 and it works and this vpn open vpn

250
00:10:07,200 --> 00:10:09,920
and actually any other vpn application

251
00:10:09,920 --> 00:10:12,000
works as follows so we have this

252
00:10:12,000 --> 00:10:14,480
application which is not it's completely

253
00:10:14,480 --> 00:10:16,720
unaware of the vpn

254
00:10:16,720 --> 00:10:19,760
uh secure tunnel but it needs to send

255
00:10:19,760 --> 00:10:22,000
data to

256
00:10:22,000 --> 00:10:25,600
what it thinks is a nearby

257
00:10:25,600 --> 00:10:28,399
device so in our example rachel is using

258
00:10:28,399 --> 00:10:31,040
this engineering working station to send

259
00:10:31,040 --> 00:10:35,279
data or to read data from a plc uh which

260
00:10:35,279 --> 00:10:37,920
is actually remote on the remote uh

261
00:10:37,920 --> 00:10:40,560
location but this application thinks

262
00:10:40,560 --> 00:10:44,000
that the plc is nearby and what hack

263
00:10:44,000 --> 00:10:45,360
actually happens behind the scene if

264
00:10:45,360 --> 00:10:47,040
this application tries to communicate

265
00:10:47,040 --> 00:10:48,399
with the plc

266
00:10:48,399 --> 00:10:50,000
and

267
00:10:50,000 --> 00:10:51,360
instead of

268
00:10:51,360 --> 00:10:53,600
instead of the network packets directly

269
00:10:53,600 --> 00:10:56,720
reaching the the plc what happens is the

270
00:10:56,720 --> 00:10:59,200
entire network traffic goes through a

271
00:10:59,200 --> 00:11:01,839
ton zero which is a virtual network

272
00:11:01,839 --> 00:11:05,600
interface and distance zero what it does

273
00:11:05,600 --> 00:11:08,079
is redirect the

274
00:11:08,079 --> 00:11:11,120
redirect the traffic through openvpn

275
00:11:11,120 --> 00:11:14,640
instance in which the openvpn adds these

276
00:11:14,640 --> 00:11:17,680
layers of uh different headers and also

277
00:11:17,680 --> 00:11:20,240
encrypts the internal data

278
00:11:20,240 --> 00:11:23,040
and then it sends it sends it through

279
00:11:23,040 --> 00:11:25,519
the real interface and now the packet

280
00:11:25,519 --> 00:11:27,279
here is encrypted

281
00:11:27,279 --> 00:11:28,959
and goes through the

282
00:11:28,959 --> 00:11:32,399
vpn tunnel so openvpn is a great

283
00:11:32,399 --> 00:11:34,640
implementation for vpn it's very easy to

284
00:11:34,640 --> 00:11:37,040
use and highly configurable vpn system

285
00:11:37,040 --> 00:11:38,320
and that's why

286
00:11:38,320 --> 00:11:40,959
many remote access solutions are not

287
00:11:40,959 --> 00:11:43,760
implementing the vpn protocol themselves

288
00:11:43,760 --> 00:11:46,000
but they are

289
00:11:46,000 --> 00:11:48,880
they're using uh as a black box or out

290
00:11:48,880 --> 00:11:51,360
of the box the open vpn which is a great

291
00:11:51,360 --> 00:11:52,639
uh

292
00:11:52,639 --> 00:11:55,200
great implementation of the vpn and it

293
00:11:55,200 --> 00:11:58,560
saves them a great amount of time

294
00:11:58,560 --> 00:11:59,680
so

295
00:11:59,680 --> 00:12:01,920
uh i've recorded it recording using

296
00:12:01,920 --> 00:12:03,279
wireshark

297
00:12:03,279 --> 00:12:05,360
session with openvpn and as you can see

298
00:12:05,360 --> 00:12:08,160
here i'm sending encrypted data and

299
00:12:08,160 --> 00:12:10,320
everything is being sent encrypted

300
00:12:10,320 --> 00:12:12,160
through the vpn tunnel

301
00:12:12,160 --> 00:12:14,480
and everything works as it should so

302
00:12:14,480 --> 00:12:17,120
just to conclude openvpn

303
00:12:17,120 --> 00:12:20,240
is a great standard uh and the greater

304
00:12:20,240 --> 00:12:24,160
implementation of vpn service and remote

305
00:12:24,160 --> 00:12:26,079
remote access solutions specifically in

306
00:12:26,079 --> 00:12:29,040
the industrial world instead of creating

307
00:12:29,040 --> 00:12:31,839
their own vpn implementation they're

308
00:12:31,839 --> 00:12:34,880
using openvpn out of the box which saves

309
00:12:34,880 --> 00:12:37,200
them a great amount of time

310
00:12:37,200 --> 00:12:39,519
so let's talk a little bit about the

311
00:12:39,519 --> 00:12:43,040
specific feature in openvpn uh which we

312
00:12:43,040 --> 00:12:45,839
found a kind of a problematic way to

313
00:12:45,839 --> 00:12:47,040
implement it

314
00:12:47,040 --> 00:12:49,200
so this feature is called management

315
00:12:49,200 --> 00:12:52,079
interface but before we're diving in

316
00:12:52,079 --> 00:12:54,320
into what is an open vpn management

317
00:12:54,320 --> 00:12:57,680
interface i want to raise an issue that

318
00:12:57,680 --> 00:12:58,639
uh

319
00:12:58,639 --> 00:13:00,800
remote access solution vendors itself

320
00:13:00,800 --> 00:13:03,120
software vendors encountered

321
00:13:03,120 --> 00:13:04,079
so

322
00:13:04,079 --> 00:13:05,440
the problem is

323
00:13:05,440 --> 00:13:08,000
that low privileged users need the

324
00:13:08,000 --> 00:13:10,079
ability to connect to the vpn tunnel for

325
00:13:10,079 --> 00:13:13,120
example rachel uh probably through the

326
00:13:13,120 --> 00:13:16,399
organization policy in her domain

327
00:13:16,399 --> 00:13:18,639
is defined as a low privileged user so

328
00:13:18,639 --> 00:13:20,720
even if her computer will get infected

329
00:13:20,720 --> 00:13:22,959
somehow by malware the malware will have

330
00:13:22,959 --> 00:13:24,639
no admin rights

331
00:13:24,639 --> 00:13:27,839
but openvpn needs admin rights to head

332
00:13:27,839 --> 00:13:29,839
routes and configurations and to

333
00:13:29,839 --> 00:13:32,079
configure them

334
00:13:32,079 --> 00:13:34,720
the virtual network interface and

335
00:13:34,720 --> 00:13:37,519
other configuration needed and for this

336
00:13:37,519 --> 00:13:40,240
configuration admin rights are needed

337
00:13:40,240 --> 00:13:43,440
for the process so for the openvpn uh

338
00:13:43,440 --> 00:13:45,519
instance that is running

339
00:13:45,519 --> 00:13:48,480
but rachel is activating the tunnel so

340
00:13:48,480 --> 00:13:50,639
rachel decides when she wants to connect

341
00:13:50,639 --> 00:13:54,320
to her uh to her office network and she

342
00:13:54,320 --> 00:13:55,360
is

343
00:13:55,360 --> 00:13:57,279
unprivileged user

344
00:13:57,279 --> 00:14:00,399
in her domain so what happens is that

345
00:14:00,399 --> 00:14:03,120
low privileged users has no ability to

346
00:14:03,120 --> 00:14:05,680
use vpns because they don't have admin

347
00:14:05,680 --> 00:14:07,440
rights to configure the different routes

348
00:14:07,440 --> 00:14:08,560
needed

349
00:14:08,560 --> 00:14:11,760
and that's why openvpn understood this

350
00:14:11,760 --> 00:14:13,920
and that's why they've created the

351
00:14:13,920 --> 00:14:16,560
openvpn management interface

352
00:14:16,560 --> 00:14:19,040
and essentially the openvpn management

353
00:14:19,040 --> 00:14:21,959
interface allows openvpn to be

354
00:14:21,959 --> 00:14:24,079
administratively controlled from an

355
00:14:24,079 --> 00:14:26,000
external program

356
00:14:26,000 --> 00:14:29,600
through a socket a tcp socket so open

357
00:14:29,600 --> 00:14:31,120
it's an open vpn feature to

358
00:14:31,120 --> 00:14:33,440
programmatically control

359
00:14:33,440 --> 00:14:36,560
a running opm vpn process through as a

360
00:14:36,560 --> 00:14:39,040
tcp socket so basically

361
00:14:39,040 --> 00:14:42,320
uh vpn processor openvpn process is

362
00:14:42,320 --> 00:14:44,880
running and his weight is listening on

363
00:14:44,880 --> 00:14:47,120
one of the tcp ports and he's waiting

364
00:14:47,120 --> 00:14:49,920
for a command such as start the vpn

365
00:14:49,920 --> 00:14:52,160
tunnel using this configuration and then

366
00:14:52,160 --> 00:14:54,800
it reads the configuration and starts

367
00:14:54,800 --> 00:14:58,160
running so if we if you want to uh

368
00:14:58,160 --> 00:14:59,839
understand better the

369
00:14:59,839 --> 00:15:02,000
scheme of uh entire remote access

370
00:15:02,000 --> 00:15:04,240
solution you can you can consider this

371
00:15:04,240 --> 00:15:08,399
so we have openvpn which is initially

372
00:15:08,399 --> 00:15:11,120
started as a high privileged

373
00:15:11,120 --> 00:15:13,199
service so when we're talking about

374
00:15:13,199 --> 00:15:15,839
windows based machines usually the open

375
00:15:15,839 --> 00:15:17,760
vpn

376
00:15:17,760 --> 00:15:21,680
is is configured to run as a service

377
00:15:21,680 --> 00:15:23,440
i'm sorry it's configured to run with

378
00:15:23,440 --> 00:15:27,120
high privileges and the openvpn instance

379
00:15:27,120 --> 00:15:28,320
is waiting

380
00:15:28,320 --> 00:15:30,800
using the management interface feature

381
00:15:30,800 --> 00:15:33,279
is waiting for commands so

382
00:15:33,279 --> 00:15:35,440
once it will receive a command it will

383
00:15:35,440 --> 00:15:37,839
open it will start and open the tunnel

384
00:15:37,839 --> 00:15:39,920
to the home office which sits on the

385
00:15:39,920 --> 00:15:42,399
other side of the internet so right now

386
00:15:42,399 --> 00:15:45,040
we have the host machine

387
00:15:45,040 --> 00:15:47,759
here this is the host machine and one of

388
00:15:47,759 --> 00:15:50,560
the processes running is openvpn and it

389
00:15:50,560 --> 00:15:52,560
waits for a command

390
00:15:52,560 --> 00:15:54,800
and what happens usually when we're

391
00:15:54,800 --> 00:15:56,240
talking about the remote access

392
00:15:56,240 --> 00:15:59,680
solutions is the following diagram so we

393
00:15:59,680 --> 00:16:00,639
have

394
00:16:00,639 --> 00:16:02,880
before the openvpn

395
00:16:02,880 --> 00:16:05,440
we have a service so this is a high

396
00:16:05,440 --> 00:16:07,360
privileged service

397
00:16:07,360 --> 00:16:09,360
that is also waiting for a command

398
00:16:09,360 --> 00:16:11,600
because this is a service a windows

399
00:16:11,600 --> 00:16:15,040
service and it receives the command when

400
00:16:15,040 --> 00:16:17,600
low privileged software is being opened

401
00:16:17,600 --> 00:16:19,920
by a low privileged user

402
00:16:19,920 --> 00:16:22,800
and this low privileged user is starting

403
00:16:22,800 --> 00:16:24,800
the low privileged application which is

404
00:16:24,800 --> 00:16:27,440
just a front-end application and the

405
00:16:27,440 --> 00:16:28,880
whole purpose of the front-end

406
00:16:28,880 --> 00:16:32,079
application is to tell the service again

407
00:16:32,079 --> 00:16:35,120
through a tcp connection tcp socket

408
00:16:35,120 --> 00:16:37,440
tells the service which is always

409
00:16:37,440 --> 00:16:40,160
running in the background to start the

410
00:16:40,160 --> 00:16:42,480
open vpn instance and the open vpn

411
00:16:42,480 --> 00:16:46,079
instance is always listening for a

412
00:16:46,079 --> 00:16:48,639
command to start the tunnel to kill the

413
00:16:48,639 --> 00:16:51,839
tunnel and it does it again through the

414
00:16:51,839 --> 00:16:54,160
management interface feature

415
00:16:54,160 --> 00:16:57,839
and now we have this service which runs

416
00:16:57,839 --> 00:17:00,079
the backend service

417
00:17:00,079 --> 00:17:02,320
which runs with high privileges and

418
00:17:02,320 --> 00:17:04,959
since it is the one that starts the open

419
00:17:04,959 --> 00:17:07,199
vpn

420
00:17:07,199 --> 00:17:09,919
process it can control it using the

421
00:17:09,919 --> 00:17:11,599
management interface

422
00:17:11,599 --> 00:17:15,039
and that's why and how low privileged

423
00:17:15,039 --> 00:17:19,119
user can start the entire chain

424
00:17:19,119 --> 00:17:21,199
just because of this cool feature that

425
00:17:21,199 --> 00:17:24,400
allows openvpn to wait for commands and

426
00:17:24,400 --> 00:17:26,720
now of course we have low privileged

427
00:17:26,720 --> 00:17:27,919
user

428
00:17:27,919 --> 00:17:30,080
that can start vpn

429
00:17:30,080 --> 00:17:31,520
services

430
00:17:31,520 --> 00:17:33,280
if we did not have

431
00:17:33,280 --> 00:17:34,080
this

432
00:17:34,080 --> 00:17:37,520
feature of openvpn management interface

433
00:17:37,520 --> 00:17:39,120
we would have needed

434
00:17:39,120 --> 00:17:42,559
to be privileged users or admin users to

435
00:17:42,559 --> 00:17:44,840
start the the openvpn

436
00:17:44,840 --> 00:17:48,240
instance but this feature saves us the

437
00:17:48,240 --> 00:17:49,919
need for

438
00:17:49,919 --> 00:17:52,400
for being administrators on on the

439
00:17:52,400 --> 00:17:55,039
machines and even low privileged users

440
00:17:55,039 --> 00:17:57,520
can start open vpn

441
00:17:57,520 --> 00:17:59,840
tunnels

442
00:17:59,840 --> 00:18:01,919
this is the basic scheme and as you can

443
00:18:01,919 --> 00:18:04,240
see here i've put a product logo just

444
00:18:04,240 --> 00:18:07,280
because we've seen this uh exact

445
00:18:07,280 --> 00:18:11,200
architecture or design uh layout of

446
00:18:11,200 --> 00:18:13,440
openvpn being controlled by a back-end

447
00:18:13,440 --> 00:18:15,200
service which is being controlled by a

448
00:18:15,200 --> 00:18:17,440
front-end application we've seen this

449
00:18:17,440 --> 00:18:20,320
many times and we found an issue with

450
00:18:20,320 --> 00:18:23,280
this so now let's go on and describe the

451
00:18:23,280 --> 00:18:27,280
design flow that allowed us to find

452
00:18:27,280 --> 00:18:31,520
lpe and ssrf attacks and eventually

453
00:18:31,520 --> 00:18:34,240
change them up into one click rc on the

454
00:18:34,240 --> 00:18:36,080
vpn client side on different

455
00:18:36,080 --> 00:18:39,360
applications so let's discuss the flow

456
00:18:39,360 --> 00:18:42,160
as we said before we have the front-end

457
00:18:42,160 --> 00:18:44,080
application which runs in the context of

458
00:18:44,080 --> 00:18:45,520
the user because the user is

459
00:18:45,520 --> 00:18:48,240
double-clicking the open vpn application

460
00:18:48,240 --> 00:18:51,440
this application sends commands to a

461
00:18:51,440 --> 00:18:52,640
back-end

462
00:18:52,640 --> 00:18:55,440
service which runs always as a windows

463
00:18:55,440 --> 00:18:58,320
service and this windows service waits

464
00:18:58,320 --> 00:19:00,960
for command and it usually listens on a

465
00:19:00,960 --> 00:19:04,160
tcp socket once it receives uh the

466
00:19:04,160 --> 00:19:06,480
vendor management command

467
00:19:06,480 --> 00:19:10,720
it will uh it will send a start

468
00:19:10,720 --> 00:19:14,080
tunnel or open tunnel to the vpn which

469
00:19:14,080 --> 00:19:16,960
listens using the management interface

470
00:19:16,960 --> 00:19:19,679
feature for a command and it will send

471
00:19:19,679 --> 00:19:21,679
this uh this command to open vpn

472
00:19:21,679 --> 00:19:24,480
instance to start a secure tunnel

473
00:19:24,480 --> 00:19:27,120
so here we have

474
00:19:27,120 --> 00:19:29,280
the management interface commands and

475
00:19:29,280 --> 00:19:32,240
obviously openvpn will only accept the

476
00:19:32,240 --> 00:19:34,799
management interface commands which are

477
00:19:34,799 --> 00:19:35,760
kind of

478
00:19:35,760 --> 00:19:36,799
something

479
00:19:36,799 --> 00:19:37,679
like

480
00:19:37,679 --> 00:19:40,480
start encrypted tunnel or

481
00:19:40,480 --> 00:19:42,400
use this configuration or something

482
00:19:42,400 --> 00:19:45,039
similar but it will only accept specific

483
00:19:45,039 --> 00:19:48,240
keywords that were defined in the open

484
00:19:48,240 --> 00:19:49,600
vpn

485
00:19:49,600 --> 00:19:52,640
management interface protocol and we

486
00:19:52,640 --> 00:19:56,640
have this second listener which

487
00:19:56,640 --> 00:19:59,679
waits for vendor management commands but

488
00:19:59,679 --> 00:20:02,480
what we found is in many cases

489
00:20:02,480 --> 00:20:05,919
these are these commands are textual and

490
00:20:05,919 --> 00:20:09,440
very loose so the backend service is not

491
00:20:09,440 --> 00:20:12,559
doing such a great job at checking what

492
00:20:12,559 --> 00:20:15,520
commands it tries to parse and in many

493
00:20:15,520 --> 00:20:17,679
cases it will be

494
00:20:17,679 --> 00:20:20,159
very loose so if it will receive a

495
00:20:20,159 --> 00:20:23,120
command that it did not understand it

496
00:20:23,120 --> 00:20:24,799
will just

497
00:20:24,799 --> 00:20:26,320
ignore it and move

498
00:20:26,320 --> 00:20:28,480
move on to the next command

499
00:20:28,480 --> 00:20:30,640
so as you can see here again this is a

500
00:20:30,640 --> 00:20:33,679
very abstract design but since we've

501
00:20:33,679 --> 00:20:36,799
seen this across many different vendors

502
00:20:36,799 --> 00:20:38,159
specifically in the industrial

503
00:20:38,159 --> 00:20:40,559
automation world but we've seen this

504
00:20:40,559 --> 00:20:42,400
design in many

505
00:20:42,400 --> 00:20:44,159
in many different vendors

506
00:20:44,159 --> 00:20:47,360
so we decided to dig in and to think if

507
00:20:47,360 --> 00:20:49,200
we can find a vulnerability in this

508
00:20:49,200 --> 00:20:52,960
design and we did find a way to exploit

509
00:20:52,960 --> 00:20:56,400
it so we needed to find a way to inject

510
00:20:56,400 --> 00:20:58,559
commands into the back end

511
00:20:58,559 --> 00:21:01,919
from the outside world and luckily we

512
00:21:01,919 --> 00:21:04,799
found a couple of protocols for example

513
00:21:04,799 --> 00:21:08,080
http that are complete textual so if you

514
00:21:08,080 --> 00:21:12,000
can if you remember the http rfc this

515
00:21:12,000 --> 00:21:15,280
protocol is completely textual and what

516
00:21:15,280 --> 00:21:18,000
we can do with the textual protocol we

517
00:21:18,000 --> 00:21:20,159
can send the textual data to the backend

518
00:21:20,159 --> 00:21:22,480
service which is very loose and it will

519
00:21:22,480 --> 00:21:24,960
just ignore commands that it doesn't

520
00:21:24,960 --> 00:21:27,360
understand and it will move on until it

521
00:21:27,360 --> 00:21:29,360
reaches a command that it does

522
00:21:29,360 --> 00:21:32,080
understand so for example if we can see

523
00:21:32,080 --> 00:21:34,960
here the http request we can see

524
00:21:34,960 --> 00:21:38,159
it consists of just text or ascii based

525
00:21:38,159 --> 00:21:41,120
characters that are

526
00:21:41,120 --> 00:21:43,919
printable and we can see uh it has a

527
00:21:43,919 --> 00:21:46,080
very defined structure so for example it

528
00:21:46,080 --> 00:21:48,960
has the first line get and then the path

529
00:21:48,960 --> 00:21:50,559
the method and then the path and then

530
00:21:50,559 --> 00:21:52,000
the version of the protocol and then we

531
00:21:52,000 --> 00:21:54,640
have a couple of headers and if we if

532
00:21:54,640 --> 00:21:57,520
we're sending a post message a post

533
00:21:57,520 --> 00:22:00,320
post http method eventually we will

534
00:22:00,320 --> 00:22:04,880
reach the data itself so what what we're

535
00:22:04,880 --> 00:22:07,520
what we tried to achieve here is the

536
00:22:07,520 --> 00:22:10,720
following we uh we have this diagram

537
00:22:10,720 --> 00:22:12,640
again so we have the fronted application

538
00:22:12,640 --> 00:22:14,400
when we have the backend service and we

539
00:22:14,400 --> 00:22:17,280
have the openvpn instance which are all

540
00:22:17,280 --> 00:22:19,679
waiting for commands to start the

541
00:22:19,679 --> 00:22:21,520
openvpn tunnel

542
00:22:21,520 --> 00:22:25,200
and we sent to one of our victims we

543
00:22:25,200 --> 00:22:27,679
sent a malicious link to a malicious

544
00:22:27,679 --> 00:22:29,039
website

545
00:22:29,039 --> 00:22:32,880
once the user clicked on this link

546
00:22:32,880 --> 00:22:34,240
we uh

547
00:22:34,240 --> 00:22:36,080
we activated

548
00:22:36,080 --> 00:22:40,159
we activated uh um

549
00:22:40,159 --> 00:22:44,640
we activated a malicious js payload

550
00:22:44,640 --> 00:22:47,120
which sent locally

551
00:22:47,120 --> 00:22:51,520
http post request with our controlled

552
00:22:51,520 --> 00:22:54,480
data so what we did is once the user

553
00:22:54,480 --> 00:22:57,280
clicked on the link and went on

554
00:22:57,280 --> 00:23:00,159
and visited our malicious website we

555
00:23:00,159 --> 00:23:02,000
actually sent

556
00:23:02,000 --> 00:23:04,360
locally to uh

557
00:23:04,360 --> 00:23:07,679
127.001 on the required port of the back

558
00:23:07,679 --> 00:23:08,640
end

559
00:23:08,640 --> 00:23:10,799
on the on the port that the backend is

560
00:23:10,799 --> 00:23:14,640
listening on we sent http post

561
00:23:14,640 --> 00:23:18,159
request message with our payload and it

562
00:23:18,159 --> 00:23:20,559
just read all the different headers

563
00:23:20,559 --> 00:23:23,520
ignored them and finally when it reached

564
00:23:23,520 --> 00:23:26,720
our payload it executed the payload

565
00:23:26,720 --> 00:23:30,960
and started the open vpn instance tunnel

566
00:23:30,960 --> 00:23:32,480
so let's see

567
00:23:32,480 --> 00:23:34,480
from the logs how it looks like so here

568
00:23:34,480 --> 00:23:35,440
we have

569
00:23:35,440 --> 00:23:37,360
an example of a very loose backend

570
00:23:37,360 --> 00:23:40,080
parser and you can we can see here that

571
00:23:40,080 --> 00:23:42,080
the backend uh

572
00:23:42,080 --> 00:23:45,039
received the message which looks uh

573
00:23:45,039 --> 00:23:47,120
unfamiliar to him so basically it

574
00:23:47,120 --> 00:23:51,600
received our malicious uh js

575
00:23:51,600 --> 00:23:54,240
http request through the json

576
00:23:54,240 --> 00:23:56,880
payload and what it did it just ignored

577
00:23:56,880 --> 00:23:58,880
this line and ignored this line and

578
00:23:58,880 --> 00:24:01,200
ignored this line and ignored the next

579
00:24:01,200 --> 00:24:03,840
line so it actually ignored the entire

580
00:24:03,840 --> 00:24:06,400
http payload

581
00:24:06,400 --> 00:24:07,919
until it

582
00:24:07,919 --> 00:24:10,640
it ignored all the http headers until it

583
00:24:10,640 --> 00:24:14,159
reached our payload and our payload was

584
00:24:14,159 --> 00:24:17,919
start openvpn instance with with this

585
00:24:17,919 --> 00:24:20,320
and that configuration as you can see

586
00:24:20,320 --> 00:24:22,960
here in the process monitor

587
00:24:22,960 --> 00:24:25,919
so what eventually happened is that the

588
00:24:25,919 --> 00:24:27,360
backend service

589
00:24:27,360 --> 00:24:30,720
started the openvpn service and

590
00:24:30,720 --> 00:24:32,240
it started it with a certain

591
00:24:32,240 --> 00:24:35,840
configuration that told openvpn to start

592
00:24:35,840 --> 00:24:38,640
and open a tunnel a secure tunnel so

593
00:24:38,640 --> 00:24:41,200
because the vp that in many cases we

594
00:24:41,200 --> 00:24:43,440
encountered the backend service was very

595
00:24:43,440 --> 00:24:46,159
loose we were able to exploit it using a

596
00:24:46,159 --> 00:24:50,000
malicious http request with post data

597
00:24:50,000 --> 00:24:52,320
but you may ask yourself what about

598
00:24:52,320 --> 00:24:53,440
single

599
00:24:53,440 --> 00:24:55,760
or region policy and course cross or

600
00:24:55,760 --> 00:24:57,760
region resource sharing so these

601
00:24:57,760 --> 00:25:01,520
terminologies are

602
00:25:01,520 --> 00:25:02,720
or exist

603
00:25:02,720 --> 00:25:05,039
to help

604
00:25:05,039 --> 00:25:06,240
clients

605
00:25:06,240 --> 00:25:07,200
not

606
00:25:07,200 --> 00:25:09,120
not to be

607
00:25:09,120 --> 00:25:12,400
exploited by malicious websites so what

608
00:25:12,400 --> 00:25:14,640
it means is if

609
00:25:14,640 --> 00:25:18,000
i'm going i'm visiting example.com

610
00:25:18,000 --> 00:25:19,919
and example.com let's say it's a

611
00:25:19,919 --> 00:25:23,440
malicious website which has fetch

612
00:25:23,440 --> 00:25:25,840
data from evil.com

613
00:25:25,840 --> 00:25:26,799
the

614
00:25:26,799 --> 00:25:30,559
same origin policy will prevent

615
00:25:30,559 --> 00:25:33,039
the browser will enforce the same origin

616
00:25:33,039 --> 00:25:36,320
policy which will prevent the web page

617
00:25:36,320 --> 00:25:39,440
from getting data from evil.com it will

618
00:25:39,440 --> 00:25:42,000
not prevent the request itself so the

619
00:25:42,000 --> 00:25:46,480
request of evil.com will be executed but

620
00:25:46,480 --> 00:25:49,760
the browser itself will enforce the same

621
00:25:49,760 --> 00:25:53,120
origin policy and will not allow this

622
00:25:53,120 --> 00:25:56,720
page of example.com to read the response

623
00:25:56,720 --> 00:25:59,200
from evil.com

624
00:25:59,200 --> 00:26:02,080
so if that's the case the request goes

625
00:26:02,080 --> 00:26:04,159
on but we can't receive the response we

626
00:26:04,159 --> 00:26:06,799
don't care because all we need is to

627
00:26:06,799 --> 00:26:08,320
send data

628
00:26:08,320 --> 00:26:09,279
to

629
00:26:09,279 --> 00:26:12,080
uh to the localhost page so in in this

630
00:26:12,080 --> 00:26:14,240
example to the local service which is a

631
00:26:14,240 --> 00:26:15,760
backend service

632
00:26:15,760 --> 00:26:18,880
waiting for vendor-specific commands so

633
00:26:18,880 --> 00:26:22,000
we don't care that this backend service

634
00:26:22,000 --> 00:26:24,960
doesn't return any response we we don't

635
00:26:24,960 --> 00:26:26,640
care that we can't even read these

636
00:26:26,640 --> 00:26:29,520
responses we only care about sending

637
00:26:29,520 --> 00:26:32,080
this request and we care about that our

638
00:26:32,080 --> 00:26:34,159
request will reach

639
00:26:34,159 --> 00:26:36,960
the backend service that could that

640
00:26:36,960 --> 00:26:39,600
could potentially parse the request and

641
00:26:39,600 --> 00:26:41,919
execute the vendor specific command

642
00:26:41,919 --> 00:26:45,200
which will start the open vpn chain so

643
00:26:45,200 --> 00:26:47,360
we didn't care we did not care at all

644
00:26:47,360 --> 00:26:49,600
about

645
00:26:49,600 --> 00:26:51,840
the response we only care about the

646
00:26:51,840 --> 00:26:54,000
request which

647
00:26:54,000 --> 00:26:56,960
soap does not prevent

648
00:26:56,960 --> 00:26:59,200
so let's do a quick recap

649
00:26:59,200 --> 00:27:01,360
what we have here is the same diagram

650
00:27:01,360 --> 00:27:03,520
that we've discussed before

651
00:27:03,520 --> 00:27:05,520
and what we're doing is actually we're

652
00:27:05,520 --> 00:27:07,679
injecting commands to the backend

653
00:27:07,679 --> 00:27:09,520
service from

654
00:27:09,520 --> 00:27:11,520
http

655
00:27:11,520 --> 00:27:12,720
http

656
00:27:12,720 --> 00:27:15,360
payload through a browser in this case

657
00:27:15,360 --> 00:27:18,480
so that's why our attacks are called one

658
00:27:18,480 --> 00:27:20,399
click because it only requires the

659
00:27:20,399 --> 00:27:23,200
victim to do a one click on a link that

660
00:27:23,200 --> 00:27:25,200
we send him through whatsapp or facebook

661
00:27:25,200 --> 00:27:28,000
or whatever and once the victim goes

662
00:27:28,000 --> 00:27:30,640
onto our website we can start this

663
00:27:30,640 --> 00:27:33,120
openvpn chain

664
00:27:33,120 --> 00:27:35,200
okay so you might ask yourself okay so

665
00:27:35,200 --> 00:27:37,200
we can start an open v

666
00:27:37,200 --> 00:27:39,760
of open vpn tunnel so what

667
00:27:39,760 --> 00:27:40,559
so

668
00:27:40,559 --> 00:27:43,279
if we can control the vpn tunnel with

669
00:27:43,279 --> 00:27:45,200
the configuration there are a couple of

670
00:27:45,200 --> 00:27:49,120
very interesting uh configurations that

671
00:27:49,120 --> 00:27:51,279
we can use for example the

672
00:27:51,279 --> 00:27:53,279
app command

673
00:27:53,279 --> 00:27:54,640
allows

674
00:27:54,640 --> 00:27:57,360
configuration to consist of a specific

675
00:27:57,360 --> 00:27:59,840
command that will be executed once the

676
00:27:59,840 --> 00:28:03,039
time where tab devices are open so

677
00:28:03,039 --> 00:28:05,440
once the open vpn

678
00:28:05,440 --> 00:28:08,960
instance is started and it tries to

679
00:28:08,960 --> 00:28:11,679
configure the ton and tap

680
00:28:11,679 --> 00:28:13,919
virtual network interfaces

681
00:28:13,919 --> 00:28:16,960
if the configuration that the openvpn

682
00:28:16,960 --> 00:28:18,320
started upon

683
00:28:18,320 --> 00:28:21,440
contains the app command it will execute

684
00:28:21,440 --> 00:28:24,640
this command after uh after starting the

685
00:28:24,640 --> 00:28:27,679
tan or top device so let's see in a

686
00:28:27,679 --> 00:28:30,080
quick example as you can see here we

687
00:28:30,080 --> 00:28:31,919
have on the right side of the screen we

688
00:28:31,919 --> 00:28:34,480
have a very simple

689
00:28:34,480 --> 00:28:37,760
a very simple openvpn configuration

690
00:28:37,760 --> 00:28:40,159
and as you can see here we have the hub

691
00:28:40,159 --> 00:28:42,840
directive and this app

692
00:28:42,840 --> 00:28:46,240
directive forces openvpn to execute this

693
00:28:46,240 --> 00:28:47,440
command

694
00:28:47,440 --> 00:28:51,520
after it's opened the top devices so we

695
00:28:51,520 --> 00:28:54,320
can see here the openvpn started as you

696
00:28:54,320 --> 00:28:56,640
can see here the openvpn started with

697
00:28:56,640 --> 00:28:59,200
this configuration and once the tap

698
00:28:59,200 --> 00:29:01,360
device was opened

699
00:29:01,360 --> 00:29:04,080
the app directive executed this command

700
00:29:04,080 --> 00:29:08,480
and we have we have popped a calculator

701
00:29:08,480 --> 00:29:09,840
so

702
00:29:09,840 --> 00:29:11,679
i hope you understand where where we're

703
00:29:11,679 --> 00:29:14,000
going with this but this is a local

704
00:29:14,000 --> 00:29:16,000
configuration can we do something

705
00:29:16,000 --> 00:29:17,440
remotely

706
00:29:17,440 --> 00:29:20,399
so the answer is most definitely yes

707
00:29:20,399 --> 00:29:21,919
if we're using

708
00:29:21,919 --> 00:29:24,640
a unc path we can

709
00:29:24,640 --> 00:29:26,720
place our malicious configuration

710
00:29:26,720 --> 00:29:29,440
somewhere in the internet and then uh

711
00:29:29,440 --> 00:29:32,960
open smb 2 server so we can use for

712
00:29:32,960 --> 00:29:36,960
example in packet with python to create

713
00:29:36,960 --> 00:29:42,000
a new smb server instance which will uh

714
00:29:42,000 --> 00:29:42,960
which will

715
00:29:42,960 --> 00:29:44,240
once it will

716
00:29:44,240 --> 00:29:46,559
receive a request for a specific file it

717
00:29:46,559 --> 00:29:48,640
will return this file so for example if

718
00:29:48,640 --> 00:29:50,880
we're hosting a malicious openvpn

719
00:29:50,880 --> 00:29:53,760
configuration and we will hand

720
00:29:53,760 --> 00:29:55,279
and we will

721
00:29:55,279 --> 00:29:57,600
start the open vpn tunnel with this

722
00:29:57,600 --> 00:30:01,679
configuration the configuration will be

723
00:30:01,679 --> 00:30:04,880
pulled from our remote smb server and so

724
00:30:04,880 --> 00:30:07,600
our entire attack can be executed

725
00:30:07,600 --> 00:30:09,919
remotely

726
00:30:09,919 --> 00:30:10,799
so

727
00:30:10,799 --> 00:30:13,679
that's the base of our attack and all

728
00:30:13,679 --> 00:30:15,520
the different parts in the exploit and

729
00:30:15,520 --> 00:30:18,640
now we will see a couple of examples of

730
00:30:18,640 --> 00:30:20,960
vendors that implemented

731
00:30:20,960 --> 00:30:22,559
the entire chain and the entire

732
00:30:22,559 --> 00:30:24,000
architecture

733
00:30:24,000 --> 00:30:26,720
with some flows that allowed us to

734
00:30:26,720 --> 00:30:29,039
exploit them so

735
00:30:29,039 --> 00:30:31,760
let's let's start with perfect openvpn

736
00:30:31,760 --> 00:30:33,520
client

737
00:30:33,520 --> 00:30:37,440
so we have here ssrf to one click remote

738
00:30:37,440 --> 00:30:39,919
code execution let's start

739
00:30:39,919 --> 00:30:43,039
so perfect is a software company that

740
00:30:43,039 --> 00:30:44,159
develops

741
00:30:44,159 --> 00:30:46,640
professional i.t solutions mostly for

742
00:30:46,640 --> 00:30:49,919
the industrial world and we encountered

743
00:30:49,919 --> 00:30:52,559
it in one of our customers that's why we

744
00:30:52,559 --> 00:30:56,000
started to research it and the open the

745
00:30:56,000 --> 00:30:57,760
openvpn clients

746
00:30:57,760 --> 00:31:00,320
perfect openvpn client is essentially

747
00:31:00,320 --> 00:31:03,360
what the users see is just a very simple

748
00:31:03,360 --> 00:31:06,399
gui the the front end in our diagram in

749
00:31:06,399 --> 00:31:10,720
our architecture that allows users to

750
00:31:10,720 --> 00:31:14,080
to start openvpn instance using

751
00:31:14,080 --> 00:31:17,360
openvpn configuration so it has a nice

752
00:31:17,360 --> 00:31:19,840
logo of but behind the scene it uses

753
00:31:19,840 --> 00:31:21,600
openvpn

754
00:31:21,600 --> 00:31:25,039
and when we started to research uh we

755
00:31:25,039 --> 00:31:28,080
saw that we have a front-end application

756
00:31:28,080 --> 00:31:30,000
just like you saw before and we have a

757
00:31:30,000 --> 00:31:32,640
service so here you can see the perfect

758
00:31:32,640 --> 00:31:35,279
open vpn service and this backend

759
00:31:35,279 --> 00:31:36,399
service

760
00:31:36,399 --> 00:31:39,120
is a windows service so you can see here

761
00:31:39,120 --> 00:31:41,519
it runs with the system privileges this

762
00:31:41,519 --> 00:31:45,039
is high privileges and when the the

763
00:31:45,039 --> 00:31:48,240
front end application starts

764
00:31:48,240 --> 00:31:51,519
sends command to the service back-end to

765
00:31:51,519 --> 00:31:52,559
start

766
00:31:52,559 --> 00:31:55,200
the vpn chain it will

767
00:31:55,200 --> 00:31:57,279
that the back-end service will start the

768
00:31:57,279 --> 00:31:59,440
open vpn instance with the configuration

769
00:31:59,440 --> 00:32:00,399
received

770
00:32:00,399 --> 00:32:01,519
from the

771
00:32:01,519 --> 00:32:04,559
from the front end from the user so

772
00:32:04,559 --> 00:32:06,399
this is the backend service

773
00:32:06,399 --> 00:32:09,200
it runs with high privileges system

774
00:32:09,200 --> 00:32:10,320
and

775
00:32:10,320 --> 00:32:12,399
we wanted to exploit it

776
00:32:12,399 --> 00:32:16,880
so we saw that the backend service can

777
00:32:16,880 --> 00:32:18,960
receive a couple of commands so it can

778
00:32:18,960 --> 00:32:21,120
receive status it can receive command

779
00:32:21,120 --> 00:32:23,440
with a config with the path

780
00:32:23,440 --> 00:32:24,799
close and by

781
00:32:24,799 --> 00:32:26,960
and we were very interested with the

782
00:32:26,960 --> 00:32:29,200
config because the config receives a

783
00:32:29,200 --> 00:32:33,039
path to an open vpn configuration and it

784
00:32:33,039 --> 00:32:36,480
will start the entire opnvpn chain based

785
00:32:36,480 --> 00:32:39,120
on that configuration so the entire

786
00:32:39,120 --> 00:32:41,120
diagram looks like this we have the

787
00:32:41,120 --> 00:32:43,600
front end application this time with the

788
00:32:43,600 --> 00:32:46,960
logo of perfect and the oh the frontend

789
00:32:46,960 --> 00:32:49,360
application connects to the backend

790
00:32:49,360 --> 00:32:51,679
service using tcp port

791
00:32:51,679 --> 00:32:53,600
10700

792
00:32:53,600 --> 00:32:56,399
and it sends to the backend service

793
00:32:56,399 --> 00:32:57,440
uh

794
00:32:57,440 --> 00:33:00,399
the config with the actual openvpn

795
00:33:00,399 --> 00:33:03,600
config which will then start the openvpn

796
00:33:03,600 --> 00:33:07,039
instance and the openvpn instance will

797
00:33:07,039 --> 00:33:09,720
listen on tcp port

798
00:33:09,720 --> 00:33:12,559
10600 and it will wait for commands from

799
00:33:12,559 --> 00:33:14,880
the backend service which will tell it

800
00:33:14,880 --> 00:33:16,799
take this configuration received from

801
00:33:16,799 --> 00:33:20,240
the user and execute it or start the the

802
00:33:20,240 --> 00:33:22,640
tunnel using this configuration

803
00:33:22,640 --> 00:33:25,600
so our goal obviously was to inject the

804
00:33:25,600 --> 00:33:29,679
payload over here so our goal was to

805
00:33:29,679 --> 00:33:32,080
to force this user to open

806
00:33:32,080 --> 00:33:35,159
a web page in our control and inject

807
00:33:35,159 --> 00:33:39,039
an inject http request to the backend

808
00:33:39,039 --> 00:33:40,559
service so

809
00:33:40,559 --> 00:33:42,720
let's go over the different steps that

810
00:33:42,720 --> 00:33:45,360
we needed in order to exploit this so

811
00:33:45,360 --> 00:33:46,799
first of all we needed to prepare

812
00:33:46,799 --> 00:33:49,279
malicious openvpn config with the app

813
00:33:49,279 --> 00:33:50,480
directive

814
00:33:50,480 --> 00:33:52,799
then we needed to prepare remote smb

815
00:33:52,799 --> 00:33:56,159
share with anonymous access enabled so

816
00:33:56,159 --> 00:33:58,720
everyone could actually pull data from

817
00:33:58,720 --> 00:34:00,320
this server

818
00:34:00,320 --> 00:34:02,559
smb server then we needed to prepare

819
00:34:02,559 --> 00:34:04,559
malicious website with the javascript

820
00:34:04,559 --> 00:34:08,079
payload and this javascript payload will

821
00:34:08,079 --> 00:34:09,199
obviously

822
00:34:09,199 --> 00:34:12,879
send a fetch request or send a post

823
00:34:12,879 --> 00:34:15,440
request http request to the backend

824
00:34:15,440 --> 00:34:16,399
service

825
00:34:16,399 --> 00:34:19,119
and finally lure a factory engineer in

826
00:34:19,119 --> 00:34:21,520
our case rachel into our website and

827
00:34:21,520 --> 00:34:24,480
then we have a one click rc so let's see

828
00:34:24,480 --> 00:34:25,918
all the different steps let's start with

829
00:34:25,918 --> 00:34:28,159
number one preparing a malicious open

830
00:34:28,159 --> 00:34:30,960
vpn config so this is how we prepared

831
00:34:30,960 --> 00:34:33,679
our config basically what we have here

832
00:34:33,679 --> 00:34:36,079
is a very simple config with this

833
00:34:36,079 --> 00:34:38,719
command and this command what it does is

834
00:34:38,719 --> 00:34:40,879
starting a reverse shell so we can see

835
00:34:40,879 --> 00:34:43,679
here the up directive here at the bottom

836
00:34:43,679 --> 00:34:46,239
on line 26 you can see the app directive

837
00:34:46,239 --> 00:34:48,480
with all four command we needed to do

838
00:34:48,480 --> 00:34:50,480
some uh some cool uh

839
00:34:50,480 --> 00:34:53,359
kind of magic in here to because our

840
00:34:53,359 --> 00:34:56,480
reverse shell was kind of uh big

841
00:34:56,480 --> 00:34:58,320
so we needed to

842
00:34:58,320 --> 00:35:01,200
break it down and encode it and once we

843
00:35:01,200 --> 00:35:04,160
did that we had uh app directive which

844
00:35:04,160 --> 00:35:08,079
starts every reverse shell to our ip to

845
00:35:08,079 --> 00:35:10,320
our the attacker's ip

846
00:35:10,320 --> 00:35:12,960
and so this is the malicious open vpn we

847
00:35:12,960 --> 00:35:16,320
configured we hosted it on a remote

848
00:35:16,320 --> 00:35:18,079
server uh

849
00:35:18,079 --> 00:35:21,680
using as smb server so it was a server

850
00:35:21,680 --> 00:35:23,520
that we started with in pocket using

851
00:35:23,520 --> 00:35:25,280
python and we

852
00:35:25,280 --> 00:35:27,680
specifically asked for anonymous access

853
00:35:27,680 --> 00:35:30,960
to be enabled on it and so anyone can

854
00:35:30,960 --> 00:35:33,680
access it and ask for the openvpn

855
00:35:33,680 --> 00:35:35,040
configuration

856
00:35:35,040 --> 00:35:37,599
step three was to prepare the malicious

857
00:35:37,599 --> 00:35:40,640
javascript so we prepared here

858
00:35:40,640 --> 00:35:44,480
a javascript that fetches http request

859
00:35:44,480 --> 00:35:48,320
using a post method and the body of this

860
00:35:48,320 --> 00:35:50,960
request this request was config

861
00:35:50,960 --> 00:35:53,839
according to the vendor perfect

862
00:35:53,839 --> 00:35:56,000
protocol so config and then the

863
00:35:56,000 --> 00:35:59,359
configuration uh open config openvpn

864
00:35:59,359 --> 00:36:02,640
configuration file that we hosted on our

865
00:36:02,640 --> 00:36:05,760
controlled remote server the smb server

866
00:36:05,760 --> 00:36:09,520
and finally we alert rachel to click on

867
00:36:09,520 --> 00:36:11,599
into our website we know that rachel

868
00:36:11,599 --> 00:36:13,839
loves cats and that's why we sent her an

869
00:36:13,839 --> 00:36:15,040
image

870
00:36:15,040 --> 00:36:17,200
that once with a cat once she clicks on

871
00:36:17,200 --> 00:36:20,240
the cat she goes on to a website

872
00:36:20,240 --> 00:36:22,160
and let's see how it works

873
00:36:22,160 --> 00:36:24,399
so

874
00:36:24,480 --> 00:36:25,359
once

875
00:36:25,359 --> 00:36:28,400
rachel clicked on the cat she uh

876
00:36:28,400 --> 00:36:29,680
our

877
00:36:29,680 --> 00:36:31,920
netcat received a new connection with a

878
00:36:31,920 --> 00:36:34,880
system uh privileges remote shell so

879
00:36:34,880 --> 00:36:37,520
let's see a demo we have here perfect

880
00:36:37,520 --> 00:36:40,320
and then rachel goes onto our website

881
00:36:40,320 --> 00:36:41,599
and then

882
00:36:41,599 --> 00:36:44,560
stuff are starting to run and we get our

883
00:36:44,560 --> 00:36:47,680
shell here because of the injection to

884
00:36:47,680 --> 00:36:49,599
the backend service which started

885
00:36:49,599 --> 00:36:52,880
openvpn instance with our malicious

886
00:36:52,880 --> 00:36:54,720
configuration

887
00:36:54,720 --> 00:36:57,920
and now we have a logo we have we pawned

888
00:36:57,920 --> 00:37:01,520
the perfect openvpn not because openvpn

889
00:37:01,520 --> 00:37:03,200
has some issues but because the

890
00:37:03,200 --> 00:37:06,079
management interface was implemented

891
00:37:06,079 --> 00:37:08,560
wrong and we'll discuss what can be done

892
00:37:08,560 --> 00:37:09,839
better

893
00:37:09,839 --> 00:37:11,280
in the end

894
00:37:11,280 --> 00:37:13,839
next we had the siemens cinema remote

895
00:37:13,839 --> 00:37:16,720
connect which again we were able to get

896
00:37:16,720 --> 00:37:20,720
a ssrf to one click rc on it so siemens

897
00:37:20,720 --> 00:37:23,920
you all know siemens it's a very uh huge

898
00:37:23,920 --> 00:37:26,720
corporate uh it has a

899
00:37:26,720 --> 00:37:28,480
cinema remote connect which is a

900
00:37:28,480 --> 00:37:30,960
management platform for remote networks

901
00:37:30,960 --> 00:37:34,079
specifically to manage uh remote

902
00:37:34,079 --> 00:37:36,720
networks on site with

903
00:37:36,720 --> 00:37:39,520
plc's belonging to siemens

904
00:37:39,520 --> 00:37:41,280
and

905
00:37:41,280 --> 00:37:43,839
we started to look on this

906
00:37:43,839 --> 00:37:45,920
on this platform

907
00:37:45,920 --> 00:37:48,000
a couple of months ago and again we

908
00:37:48,000 --> 00:37:50,400
discovered the same design the same

909
00:37:50,400 --> 00:37:53,119
architecture the only difference is

910
00:37:53,119 --> 00:37:56,079
the logo here and obviously the tcp port

911
00:37:56,079 --> 00:37:59,359
was changed a bit so now it's 14 000 and

912
00:37:59,359 --> 00:38:02,160
here it's it's different as well but all

913
00:38:02,160 --> 00:38:04,000
in all it's the same we have a front-end

914
00:38:04,000 --> 00:38:06,079
application we have a back-end service

915
00:38:06,079 --> 00:38:07,680
with high privileges and we have the

916
00:38:07,680 --> 00:38:10,000
open vpn instance which runs

917
00:38:10,000 --> 00:38:13,920
after the back-end service starts the uh

918
00:38:13,920 --> 00:38:15,680
the instance

919
00:38:15,680 --> 00:38:16,400
so

920
00:38:16,400 --> 00:38:18,960
yes it looks familiar and again we've

921
00:38:18,960 --> 00:38:21,520
prepared a poc just like before we

922
00:38:21,520 --> 00:38:24,000
prepared a malicious javascript this

923
00:38:24,000 --> 00:38:27,440
time take a look we used not config

924
00:38:27,440 --> 00:38:29,200
but we used a different

925
00:38:29,200 --> 00:38:32,800
keyword and this this time siemens had a

926
00:38:32,800 --> 00:38:35,599
kind of a different protocol that was

927
00:38:35,599 --> 00:38:37,359
expected on the back end and that's why

928
00:38:37,359 --> 00:38:40,079
we used load not config but all in all

929
00:38:40,079 --> 00:38:42,400
it's very the same we're just

930
00:38:42,400 --> 00:38:43,839
in issuing

931
00:38:43,839 --> 00:38:47,359
shooting http post request to localhost

932
00:38:47,359 --> 00:38:51,280
on 14 000 locally through a web browser

933
00:38:51,280 --> 00:38:54,320
and finally we're getting a

934
00:38:54,320 --> 00:38:56,640
reverse shell with it so let's see a

935
00:38:56,640 --> 00:38:58,560
demo

936
00:38:58,560 --> 00:39:02,079
we can see here a quick demo as well

937
00:39:02,079 --> 00:39:04,640
we can see here the attacker

938
00:39:04,640 --> 00:39:06,800
window waiting for reverse gel we can

939
00:39:06,800 --> 00:39:08,480
see here uh

940
00:39:08,480 --> 00:39:12,000
cinema rc client

941
00:39:12,000 --> 00:39:14,560
waiting to be exploited and we can see

942
00:39:14,560 --> 00:39:15,359
here

943
00:39:15,359 --> 00:39:17,119
that the service is running as the

944
00:39:17,119 --> 00:39:21,200
system and we will see in shortly that

945
00:39:21,200 --> 00:39:22,880
rachel

946
00:39:22,880 --> 00:39:24,480
is

947
00:39:24,480 --> 00:39:29,079
trying to reach our poc website

948
00:39:29,119 --> 00:39:32,160
we wait a bit and now rachel reached our

949
00:39:32,160 --> 00:39:34,320
clarity rc poc

950
00:39:34,320 --> 00:39:38,000
and now we have a new reverse shell of

951
00:39:38,000 --> 00:39:39,280
course

952
00:39:39,280 --> 00:39:43,000
with system privileges

953
00:39:46,320 --> 00:39:48,960
um yes so now we have

954
00:39:48,960 --> 00:39:51,839
both perfect exploited and

955
00:39:51,839 --> 00:39:53,040
siemens

956
00:39:53,040 --> 00:39:56,400
remote client exploited next we had hms

957
00:39:56,400 --> 00:39:58,800
e1 e catcher which again it's very

958
00:39:58,800 --> 00:40:01,280
similar

959
00:40:01,280 --> 00:40:02,480
this time

960
00:40:02,480 --> 00:40:04,880
we are talking about hms networks this

961
00:40:04,880 --> 00:40:06,000
is a

962
00:40:06,000 --> 00:40:07,680
large-scale company international

963
00:40:07,680 --> 00:40:09,200
company in the field of industrial

964
00:40:09,200 --> 00:40:12,000
communication again and it has

965
00:40:12,000 --> 00:40:12,880
a

966
00:40:12,880 --> 00:40:15,599
a product line named e1 which is a brand

967
00:40:15,599 --> 00:40:18,480
of hms and one and

968
00:40:18,480 --> 00:40:22,319
basically uh its entire platform uh for

969
00:40:22,319 --> 00:40:24,800
a vpn connectivity so remote

970
00:40:24,800 --> 00:40:27,040
connectivity so you can use these

971
00:40:27,040 --> 00:40:29,040
devices

972
00:40:29,040 --> 00:40:31,119
and the talk2m

973
00:40:31,119 --> 00:40:35,280
cloud to allow remote connectivity

974
00:40:35,280 --> 00:40:38,640
so this in this case you have both the

975
00:40:38,640 --> 00:40:40,880
cloud platform and you have the

976
00:40:40,880 --> 00:40:42,640
appliance as well

977
00:40:42,640 --> 00:40:45,599
and talk2m is just the the main server

978
00:40:45,599 --> 00:40:47,599
the cloud server

979
00:40:47,599 --> 00:40:49,040
and what

980
00:40:49,040 --> 00:40:52,319
what connects to this cloud service is a

981
00:40:52,319 --> 00:40:55,359
program the client named ecatcher so

982
00:40:55,359 --> 00:40:58,319
again we're focusing on clients vpn

983
00:40:58,319 --> 00:41:01,359
clients so we started to research

984
00:41:01,359 --> 00:41:04,160
e-catcher and what we discover is

985
00:41:04,160 --> 00:41:06,480
basically like previously we had the

986
00:41:06,480 --> 00:41:08,160
back end listening

987
00:41:08,160 --> 00:41:09,920
locally on on

988
00:41:09,920 --> 00:41:13,040
this time port 445. it's a service

989
00:41:13,040 --> 00:41:15,920
windows service name the talk2m vpn

990
00:41:15,920 --> 00:41:18,079
service very indicative and we can see

991
00:41:18,079 --> 00:41:20,400
here a bunch of functions

992
00:41:20,400 --> 00:41:23,680
or commands that this service is waiting

993
00:41:23,680 --> 00:41:24,720
for

994
00:41:24,720 --> 00:41:26,800
and once it receives one of these

995
00:41:26,800 --> 00:41:28,960
commands it will execute it

996
00:41:28,960 --> 00:41:31,440
what we found we found a bug in one of

997
00:41:31,440 --> 00:41:34,400
the printing debug logs functions we

998
00:41:34,400 --> 00:41:36,240
found that if we enter a big enough

999
00:41:36,240 --> 00:41:38,560
command a stock buffer overflow will

1000
00:41:38,560 --> 00:41:42,240
occur so if we send a large

1001
00:41:42,240 --> 00:41:43,760
aaa

1002
00:41:43,760 --> 00:41:46,240
then a buffer overflow

1003
00:41:46,240 --> 00:41:49,359
will take place and

1004
00:41:49,359 --> 00:41:52,400
we could crash the program so what we

1005
00:41:52,400 --> 00:41:57,200
did here is uh again we used http to

1006
00:41:57,200 --> 00:42:00,160
a http request to send a very large

1007
00:42:00,160 --> 00:42:03,839
request with a great amount of bytes in

1008
00:42:03,839 --> 00:42:04,880
the

1009
00:42:04,880 --> 00:42:06,480
in the url

1010
00:42:06,480 --> 00:42:08,960
and as you can see here this is what the

1011
00:42:08,960 --> 00:42:13,280
function received a get with a huge url

1012
00:42:13,280 --> 00:42:14,079
and

1013
00:42:14,079 --> 00:42:16,560
since we had the stock buffer overflow

1014
00:42:16,560 --> 00:42:19,920
we overflowed the the entire stock with

1015
00:42:19,920 --> 00:42:22,400
the url data

1016
00:42:22,400 --> 00:42:24,880
so now all we needed to do is send our

1017
00:42:24,880 --> 00:42:29,040
victim an email or html page with

1018
00:42:29,040 --> 00:42:32,880
a image tag something like this

1019
00:42:32,880 --> 00:42:35,599
because all we needed is a very long url

1020
00:42:35,599 --> 00:42:36,560
that

1021
00:42:36,560 --> 00:42:39,440
once the backend service will

1022
00:42:39,440 --> 00:42:42,319
will get this url it will try to do some

1023
00:42:42,319 --> 00:42:44,640
stuff with it in the debug log and it

1024
00:42:44,640 --> 00:42:48,720
will wrongly copy and overflow some data

1025
00:42:48,720 --> 00:42:51,200
on the stack so what

1026
00:42:51,200 --> 00:42:54,640
was our plan here was to abuse a

1027
00:42:54,640 --> 00:42:56,960
mechanism named

1028
00:42:56,960 --> 00:42:59,200
s-e-h safe

1029
00:42:59,200 --> 00:43:01,920
safe exception handlers and

1030
00:43:01,920 --> 00:43:04,560
we will not get into the details of sch

1031
00:43:04,560 --> 00:43:07,359
handlers in this presentation but all i

1032
00:43:07,359 --> 00:43:11,040
want to say is there is a sch handler

1033
00:43:11,040 --> 00:43:12,720
which is a pointer

1034
00:43:12,720 --> 00:43:16,319
on the stack and our goal was to

1035
00:43:16,319 --> 00:43:19,119
overflow it with our data so our goal

1036
00:43:19,119 --> 00:43:21,599
was to do something like this

1037
00:43:21,599 --> 00:43:24,960
send a very large request with a long

1038
00:43:24,960 --> 00:43:28,400
url and because of the stock buffer

1039
00:43:28,400 --> 00:43:30,880
overflow uh we would

1040
00:43:30,880 --> 00:43:33,760
overflow this pointer and eventually

1041
00:43:33,760 --> 00:43:34,800
we'll

1042
00:43:34,800 --> 00:43:36,960
will achieve code execution so this is

1043
00:43:36,960 --> 00:43:39,440
how we prepared our payload as you can

1044
00:43:39,440 --> 00:43:42,079
see here we have html page with iframe

1045
00:43:42,079 --> 00:43:46,720
source and a very very very long url and

1046
00:43:46,720 --> 00:43:48,160
we carefully

1047
00:43:48,160 --> 00:43:51,599
uh tailored made prepared this um

1048
00:43:51,599 --> 00:43:55,359
this request so only these four bytes

1049
00:43:55,359 --> 00:43:58,079
will get to the specific

1050
00:43:58,079 --> 00:44:02,800
location on the stack so we carefully uh

1051
00:44:02,800 --> 00:44:06,720
build this payload so only these

1052
00:44:06,720 --> 00:44:09,839
four bytes uh will be placed in a very

1053
00:44:09,839 --> 00:44:12,800
exact uh place in in the memory on the

1054
00:44:12,800 --> 00:44:16,000
stack and eventually through this image

1055
00:44:16,000 --> 00:44:19,440
being presented on html or email we got

1056
00:44:19,440 --> 00:44:20,960
control on the

1057
00:44:20,960 --> 00:44:24,720
eap and we could steal execution from

1058
00:44:24,720 --> 00:44:28,000
the program and control the execution so

1059
00:44:28,000 --> 00:44:29,359
we had

1060
00:44:29,359 --> 00:44:32,319
rce just from an email being opened on

1061
00:44:32,319 --> 00:44:34,640
the machine with ecatcher

1062
00:44:34,640 --> 00:44:38,079
client so now we have three logos on

1063
00:44:38,079 --> 00:44:39,599
rachel's

1064
00:44:39,599 --> 00:44:42,480
computer that we can control completely

1065
00:44:42,480 --> 00:44:45,920
take control the last one is mbconnect

1066
00:44:45,920 --> 00:44:47,359
which was

1067
00:44:47,359 --> 00:44:49,200
which was a

1068
00:44:49,200 --> 00:44:51,280
local privilege escalation this was not

1069
00:44:51,280 --> 00:44:55,200
one one click remote code execution

1070
00:44:55,200 --> 00:44:58,319
so mb connect line is a company that

1071
00:44:58,319 --> 00:45:01,040
again develops uh vpn

1072
00:45:01,040 --> 00:45:04,880
services uh secure ntn connection for

1073
00:45:04,880 --> 00:45:07,520
when you need one this is uh their logo

1074
00:45:07,520 --> 00:45:10,319
so mp dial up is again a company in the

1075
00:45:10,319 --> 00:45:13,839
industrial uh automation worlds and they

1076
00:45:13,839 --> 00:45:16,480
produce and manufacture different um

1077
00:45:16,480 --> 00:45:18,319
different appliances different systems

1078
00:45:18,319 --> 00:45:21,040
and they have their own uh vpn cloud

1079
00:45:21,040 --> 00:45:23,760
again so we started to research again

1080
00:45:23,760 --> 00:45:27,280
the client mb dial up launcher and we

1081
00:45:27,280 --> 00:45:30,000
quickly found out that it supports again

1082
00:45:30,000 --> 00:45:32,640
the same design all over the place

1083
00:45:32,640 --> 00:45:35,440
the backend service supports uh a

1084
00:45:35,440 --> 00:45:38,000
different different commands for example

1085
00:45:38,000 --> 00:45:42,160
exit who time version etc and this time

1086
00:45:42,160 --> 00:45:44,079
the windows service or the backend

1087
00:45:44,079 --> 00:45:47,839
service was called mb connect 24 serve

1088
00:45:47,839 --> 00:45:50,640
and it listens locally on seven eight

1089
00:45:50,640 --> 00:45:52,640
zero zero

1090
00:45:52,640 --> 00:45:55,200
now we already we're already familiar

1091
00:45:55,200 --> 00:45:57,040
with this type of design so we

1092
00:45:57,040 --> 00:46:00,560
immediately started to exploit this

1093
00:46:00,560 --> 00:46:04,160
and we found the two vulnerabilities

1094
00:46:04,160 --> 00:46:06,880
and so for example here what we use the

1095
00:46:06,880 --> 00:46:09,119
command injection so

1096
00:46:09,119 --> 00:46:13,359
it expects the backend service expects

1097
00:46:13,359 --> 00:46:15,920
to a legitimate command for example

1098
00:46:15,920 --> 00:46:17,119
route

1099
00:46:17,119 --> 00:46:20,400
but since it runs this command through a

1100
00:46:20,400 --> 00:46:20,910
system

1101
00:46:20,910 --> 00:46:22,000
[Music]

1102
00:46:22,000 --> 00:46:23,359
a system shell

1103
00:46:23,359 --> 00:46:24,480
we could have

1104
00:46:24,480 --> 00:46:26,800
injected some more special characters

1105
00:46:26,800 --> 00:46:30,400
for example pipe pipe and then we issued

1106
00:46:30,400 --> 00:46:32,480
our own command so this is the os

1107
00:46:32,480 --> 00:46:34,480
command injection

1108
00:46:34,480 --> 00:46:36,720
being injected into a legitimate command

1109
00:46:36,720 --> 00:46:37,760
and if

1110
00:46:37,760 --> 00:46:39,920
eventually we had a local privileged

1111
00:46:39,920 --> 00:46:41,839
connection because this backend service

1112
00:46:41,839 --> 00:46:45,119
is running as uh as a service with

1113
00:46:45,119 --> 00:46:46,800
system privileges

1114
00:46:46,800 --> 00:46:49,440
so we had lpa here too

1115
00:46:49,440 --> 00:46:51,920
and now we have four logos finally we

1116
00:46:51,920 --> 00:46:54,400
exploited all the four of uh

1117
00:46:54,400 --> 00:46:56,400
all the four applications vpn clients

1118
00:46:56,400 --> 00:46:58,640
applications different vendors across

1119
00:46:58,640 --> 00:47:01,920
all the industrial control system uh

1120
00:47:01,920 --> 00:47:03,040
domain

1121
00:47:03,040 --> 00:47:05,760
and we have reached our summary

1122
00:47:05,760 --> 00:47:08,800
so just to conclude here the problem is

1123
00:47:08,800 --> 00:47:12,160
not with openvpn vpn openvpn is a good

1124
00:47:12,160 --> 00:47:14,720
boy vpn is a

1125
00:47:14,720 --> 00:47:17,920
is is not a problem here the issue is

1126
00:47:17,920 --> 00:47:20,880
with the vendors implementations because

1127
00:47:20,880 --> 00:47:23,520
they have started a backend service

1128
00:47:23,520 --> 00:47:26,000
which waits for commands it's not

1129
00:47:26,000 --> 00:47:30,240
proper properly uh verifies or sanitize

1130
00:47:30,240 --> 00:47:32,319
the input and so we can control in a

1131
00:47:32,319 --> 00:47:34,559
different way whether it's uh through

1132
00:47:34,559 --> 00:47:36,480
injection because the the backend

1133
00:47:36,480 --> 00:47:39,520
service was kind of a loose and ignored

1134
00:47:39,520 --> 00:47:41,599
different commands that he did not care

1135
00:47:41,599 --> 00:47:44,240
about or because we had a command

1136
00:47:44,240 --> 00:47:46,640
injection or because we exploited a

1137
00:47:46,640 --> 00:47:47,920
memory

1138
00:47:47,920 --> 00:47:50,480
memory corruption in this case it was a

1139
00:47:50,480 --> 00:47:53,119
stock buffer overflow but all in all we

1140
00:47:53,119 --> 00:47:56,400
were able to achieve ssrf to one click

1141
00:47:56,400 --> 00:47:58,160
remote code execution with the system

1142
00:47:58,160 --> 00:48:01,359
privileges or at least local privileges

1143
00:48:01,359 --> 00:48:03,359
execution as system

1144
00:48:03,359 --> 00:48:06,000
but the main point here is openvpn is

1145
00:48:06,000 --> 00:48:08,079
not the problem the issue is with the

1146
00:48:08,079 --> 00:48:10,480
vendor's implementation and once we

1147
00:48:10,480 --> 00:48:14,079
disclosed all these uh cves to the

1148
00:48:14,079 --> 00:48:16,240
different vendors we obviously worked

1149
00:48:16,240 --> 00:48:19,040
with them to remedy and solve these

1150
00:48:19,040 --> 00:48:21,119
issues and they all

1151
00:48:21,119 --> 00:48:23,760
released patches and mitigations for the

1152
00:48:23,760 --> 00:48:24,720
users

1153
00:48:24,720 --> 00:48:26,480
the last thing i want to discuss is

1154
00:48:26,480 --> 00:48:28,640
recommendations

1155
00:48:28,640 --> 00:48:30,960
so we have a couple of recommendations

1156
00:48:30,960 --> 00:48:32,800
for the different vendors or any other

1157
00:48:32,800 --> 00:48:35,119
remote access solutions implementing

1158
00:48:35,119 --> 00:48:37,520
openvpn and specifically

1159
00:48:37,520 --> 00:48:39,440
the management interface feature so

1160
00:48:39,440 --> 00:48:40,960
first of all you can use dynamic

1161
00:48:40,960 --> 00:48:43,119
parameters for example you don't have to

1162
00:48:43,119 --> 00:48:46,640
listen always on 127.001 you can use the

1163
00:48:46,640 --> 00:48:49,520
entire uh localhost range for example

1164
00:48:49,520 --> 00:48:51,440
127 123.

1165
00:48:51,440 --> 00:48:54,559
you can use a security token so

1166
00:48:54,559 --> 00:48:58,240
something similar to csrf so

1167
00:48:58,240 --> 00:49:00,160
if you receive if the backend service

1168
00:49:00,160 --> 00:49:02,720
received the command without a specific

1169
00:49:02,720 --> 00:49:03,839
token

1170
00:49:03,839 --> 00:49:06,000
it will not execute this command they

1171
00:49:06,000 --> 00:49:09,200
can also add to the openvpn a policy

1172
00:49:09,200 --> 00:49:11,680
enforcement to not use

1173
00:49:11,680 --> 00:49:13,920
to not use the app command so you can

1174
00:49:13,920 --> 00:49:16,720
read the manual but to save you some

1175
00:49:16,720 --> 00:49:18,640
time you should look for script security

1176
00:49:18,640 --> 00:49:20,720
and set it to level 1 which will not

1177
00:49:20,720 --> 00:49:22,160
allow any

1178
00:49:22,160 --> 00:49:24,640
arbitrary script to be running with the

1179
00:49:24,640 --> 00:49:27,839
directive up in the configuration and

1180
00:49:27,839 --> 00:49:29,359
you should limit the potential attack

1181
00:49:29,359 --> 00:49:30,800
surface and

1182
00:49:30,800 --> 00:49:33,200
refrain from executing openvpn with the

1183
00:49:33,200 --> 00:49:36,079
system privileges whenever possible

1184
00:49:36,079 --> 00:49:38,559
so these are the recommendations and

1185
00:49:38,559 --> 00:49:41,040
this is was our research thank you very

1186
00:49:41,040 --> 00:49:43,280
much everyone and i hope you'll have a

1187
00:49:43,280 --> 00:49:46,480
nice day we will start the q a session

1188
00:49:46,480 --> 00:49:48,240
right now

1189
00:49:48,240 --> 00:49:49,920
and uh

1190
00:49:49,920 --> 00:49:51,599
yeah it normally takes a couple of

1191
00:49:51,599 --> 00:49:53,520
minutes for the audience to

1192
00:49:53,520 --> 00:49:55,920
catch up and type in all the questions

1193
00:49:55,920 --> 00:49:57,119
they have

1194
00:49:57,119 --> 00:49:59,920
i will check zoom q a

1195
00:49:59,920 --> 00:50:04,319
section now not yet anything

1196
00:50:04,319 --> 00:50:06,079
no not not

1197
00:50:06,079 --> 00:50:09,040
the questions are not yet here but i see

1198
00:50:09,040 --> 00:50:11,280
that yeah the support team is typing

1199
00:50:11,280 --> 00:50:13,839
something into the master script

1200
00:50:13,839 --> 00:50:15,119
so the first question i'll have for

1201
00:50:15,119 --> 00:50:17,040
myself i guess so i have very different

1202
00:50:17,040 --> 00:50:19,680
experience with openvpn

1203
00:50:19,680 --> 00:50:22,000
as a very like you know

1204
00:50:22,000 --> 00:50:24,160
general purpose and tester i would say

1205
00:50:24,160 --> 00:50:26,400
so without all this uh deep propeller

1206
00:50:26,400 --> 00:50:30,000
head techy stuff related to ot iot

1207
00:50:30,000 --> 00:50:32,319
scatter ics and so on

1208
00:50:32,319 --> 00:50:33,599
uh so

1209
00:50:33,599 --> 00:50:36,319
i just wanted to catch up with you

1210
00:50:36,319 --> 00:50:37,920
how

1211
00:50:37,920 --> 00:50:41,760
different is it uh and how hard is it

1212
00:50:41,760 --> 00:50:44,400
how harder is it how much harder is it

1213
00:50:44,400 --> 00:50:47,200
when you are dealing with different

1214
00:50:47,200 --> 00:50:49,040
second factor implementations for

1215
00:50:49,040 --> 00:50:51,920
openvpn does it does it protect at all

1216
00:50:51,920 --> 00:50:52,800
or

1217
00:50:52,800 --> 00:50:54,960
it's just a fancy

1218
00:50:54,960 --> 00:50:57,440
addition that just demands a little more

1219
00:50:57,440 --> 00:50:59,359
time to circumvent

1220
00:50:59,359 --> 00:51:00,559
yeah so

1221
00:51:00,559 --> 00:51:01,440
the

1222
00:51:01,440 --> 00:51:03,839
what's important to say is openvpn is

1223
00:51:03,839 --> 00:51:06,720
not the issue openvpn

1224
00:51:06,720 --> 00:51:10,000
has done a great job in creating a great

1225
00:51:10,000 --> 00:51:12,640
architecture of client server and

1226
00:51:12,640 --> 00:51:15,440
protocol so openvpn is not the issue

1227
00:51:15,440 --> 00:51:18,400
um they also have openvpn have a couple

1228
00:51:18,400 --> 00:51:20,720
of features that are again if you're

1229
00:51:20,720 --> 00:51:23,839
using them correctly you're secured the

1230
00:51:23,839 --> 00:51:26,720
problem is with vendors that are not

1231
00:51:26,720 --> 00:51:28,960
probably reading the documentation of

1232
00:51:28,960 --> 00:51:31,520
openvpn and using some of the features

1233
00:51:31,520 --> 00:51:32,400
in

1234
00:51:32,400 --> 00:51:35,280
a way that can allow attackers enable

1235
00:51:35,280 --> 00:51:38,240
attackers to attack the entire solution

1236
00:51:38,240 --> 00:51:40,160
because what they're doing they can open

1237
00:51:40,160 --> 00:51:41,680
vpn and they're using a couple of

1238
00:51:41,680 --> 00:51:44,160
features and they're kind of integrating

1239
00:51:44,160 --> 00:51:46,559
their software with openvpn and

1240
00:51:46,559 --> 00:51:49,520
controlling openvpn problematically

1241
00:51:49,520 --> 00:51:50,400
and

1242
00:51:50,400 --> 00:51:52,800
they need to follow a very strict

1243
00:51:52,800 --> 00:51:54,559
documentation

1244
00:51:54,559 --> 00:51:57,040
but sometimes they're skipping

1245
00:51:57,040 --> 00:51:59,520
uh they're skipping some of the steps or

1246
00:51:59,520 --> 00:52:01,200
they're lacking some of the security

1247
00:52:01,200 --> 00:52:04,240
checks that they need to do and so it

1248
00:52:04,240 --> 00:52:06,720
happens just like i described in the in

1249
00:52:06,720 --> 00:52:08,319
the presentation

1250
00:52:08,319 --> 00:52:11,119
uh so attackers can abuse this and

1251
00:52:11,119 --> 00:52:12,240
exploit

1252
00:52:12,240 --> 00:52:14,240
clients specifically i'm talking about

1253
00:52:14,240 --> 00:52:16,400
clients with developing clients

1254
00:52:16,400 --> 00:52:19,200
and exploit open vpn clients due to the

1255
00:52:19,200 --> 00:52:22,640
bad integration

1256
00:52:23,839 --> 00:52:26,240
yeah makes perfect sense so like

1257
00:52:26,240 --> 00:52:29,839
network-wise early protocol this stack

1258
00:52:29,839 --> 00:52:33,680
is okay it's well scrutinized it's well

1259
00:52:33,680 --> 00:52:36,880
designed it has been through a lot and

1260
00:52:36,880 --> 00:52:39,280
now it's like a very robust

1261
00:52:39,280 --> 00:52:40,240
uh

1262
00:52:40,240 --> 00:52:42,559
product i would say but when you try to

1263
00:52:42,559 --> 00:52:44,880
bolt on anything else like a managerial

1264
00:52:44,880 --> 00:52:46,559
part that will like i don't know

1265
00:52:46,559 --> 00:52:49,200
authorize client in some separate way

1266
00:52:49,200 --> 00:52:51,440
but then establish the open dpn tunnel

1267
00:52:51,440 --> 00:52:54,000
yeah it may go wrong just because vendor

1268
00:52:54,000 --> 00:52:56,000
did not do proper threat management and

1269
00:52:56,000 --> 00:52:57,280
architecture

1270
00:52:57,280 --> 00:52:59,200
yes design

1271
00:52:59,200 --> 00:53:01,839
cool cool so i think we have a question

1272
00:53:01,839 --> 00:53:04,240
in the chat room

1273
00:53:04,240 --> 00:53:05,040
uh

1274
00:53:05,040 --> 00:53:09,520
what is your opinion about openvpn nl

1275
00:53:09,520 --> 00:53:11,359
where opensl was

1276
00:53:11,359 --> 00:53:15,040
swapped for embed tls

1277
00:53:15,040 --> 00:53:17,200
so i think again i think the issue

1278
00:53:17,200 --> 00:53:19,599
usually the issue is not with the with

1279
00:53:19,599 --> 00:53:22,960
the ssl stack protocol stack or the

1280
00:53:22,960 --> 00:53:26,079
lower layers of the protocol so i don't

1281
00:53:26,079 --> 00:53:28,400
i don't see any issue or problematically

1282
00:53:28,400 --> 00:53:31,119
with using open vpn in different flavors

1283
00:53:31,119 --> 00:53:32,319
that are using

1284
00:53:32,319 --> 00:53:33,520
um

1285
00:53:33,520 --> 00:53:36,160
mptls instead of open ssl i don't think

1286
00:53:36,160 --> 00:53:40,480
uh so both opencsl and mbtls were gone

1287
00:53:40,480 --> 00:53:42,319
through a lot of research and a lot of

1288
00:53:42,319 --> 00:53:45,599
scrutinizing so they're well defined

1289
00:53:45,599 --> 00:53:47,760
well established and i do things that if

1290
00:53:47,760 --> 00:53:49,520
you're using these libraries in the

1291
00:53:49,520 --> 00:53:51,200
correct way

1292
00:53:51,200 --> 00:53:54,160
just like openvpn is doing so you have

1293
00:53:54,160 --> 00:53:57,839
no issues and it's totally fine

1294
00:53:58,720 --> 00:54:00,959
good

1295
00:54:01,200 --> 00:54:04,079
okay maybe one more question for me

1296
00:54:04,079 --> 00:54:06,960
what do you think about alternative

1297
00:54:06,960 --> 00:54:08,720
alternative stacks

1298
00:54:08,720 --> 00:54:11,440
like wire guard that gains popularity we

1299
00:54:11,440 --> 00:54:14,640
will have uh some plans for native

1300
00:54:14,640 --> 00:54:15,920
windows support

1301
00:54:15,920 --> 00:54:17,920
if i'm not mistaken

1302
00:54:17,920 --> 00:54:21,520
does it does it catch the bit uh

1303
00:54:21,520 --> 00:54:25,520
does it see the perspective of

1304
00:54:25,520 --> 00:54:28,400
similar adoption rates

1305
00:54:28,400 --> 00:54:29,119
so

1306
00:54:29,119 --> 00:54:32,559
openvpn is by far the most popular open

1307
00:54:32,559 --> 00:54:35,599
vpn yeah apparently apparently but does

1308
00:54:35,599 --> 00:54:38,160
any alternative does any challenger have

1309
00:54:38,160 --> 00:54:39,760
any chances

1310
00:54:39,760 --> 00:54:42,160
yeah so i i don't think that new players

1311
00:54:42,160 --> 00:54:44,720
have great chances of becoming the next

1312
00:54:44,720 --> 00:54:47,839
big thing uh currently due to the great

1313
00:54:47,839 --> 00:54:51,040
popularity of openvpn all the major

1314
00:54:51,040 --> 00:54:53,920
uh deployments of

1315
00:54:53,920 --> 00:54:57,119
software software

1316
00:54:57,280 --> 00:54:59,520
different software related to remote

1317
00:54:59,520 --> 00:55:01,680
connect or remote access

1318
00:55:01,680 --> 00:55:05,680
are 100 based on openvpn so i as a

1319
00:55:05,680 --> 00:55:07,440
vulnerability research

1320
00:55:07,440 --> 00:55:09,680
researching different products i did not

1321
00:55:09,680 --> 00:55:11,200
encounter

1322
00:55:11,200 --> 00:55:14,960
other solutions other than openvpn yet

1323
00:55:14,960 --> 00:55:17,119
but i do think we will see we'll start

1324
00:55:17,119 --> 00:55:18,799
seeing this very soon because other

1325
00:55:18,799 --> 00:55:20,400
solutions just like you said

1326
00:55:20,400 --> 00:55:25,280
wireguard is gaining some popularity

1327
00:55:27,599 --> 00:55:29,599
what do you personally use for vpn

1328
00:55:29,599 --> 00:55:30,559
access

1329
00:55:30,559 --> 00:55:33,599
for privacy reasons

1330
00:55:35,760 --> 00:55:38,559
yeah i'm using openvpn with a modified

1331
00:55:38,559 --> 00:55:40,000
service

1332
00:55:40,000 --> 00:55:42,400
modified server but

1333
00:55:42,400 --> 00:55:44,640
anyway it's it's it's not like open with

1334
00:55:44,640 --> 00:55:47,520
pnas or something it's your homemade

1335
00:55:47,520 --> 00:55:50,319
homebrewed server

1336
00:55:50,319 --> 00:55:52,400
kind of you know it's based on openvpn

1337
00:55:52,400 --> 00:55:53,839
but yes

1338
00:55:53,839 --> 00:55:56,960
okay okay

1339
00:55:57,280 --> 00:56:00,799
so do we have any more questions

1340
00:56:00,799 --> 00:56:03,799
guys

1341
00:56:04,000 --> 00:56:05,520
nothing yet

1342
00:56:05,520 --> 00:56:08,880
okay then uh i think then that's it uh i

1343
00:56:08,880 --> 00:56:11,200
don't know maybe the last one from me uh

1344
00:56:11,200 --> 00:56:16,759
how does it feel uh like in general

1345
00:56:17,359 --> 00:56:19,280
oh that's that's not that's that's not

1346
00:56:19,280 --> 00:56:21,359
the question how does it feel to hold

1347
00:56:21,359 --> 00:56:24,720
the black page for devcon

1348
00:56:26,319 --> 00:56:27,280
yeah

1349
00:56:27,280 --> 00:56:30,480
it feels good and i can attend any any

1350
00:56:30,480 --> 00:56:32,160
different that i want for free so

1351
00:56:32,160 --> 00:56:34,720
definitely definitely great

1352
00:56:34,720 --> 00:56:36,079
cool cool

1353
00:56:36,079 --> 00:56:38,000
congratulations on that that's quite an

1354
00:56:38,000 --> 00:56:41,119
impressive achievement in it by itself

1355
00:56:41,119 --> 00:56:43,920
besides all the other cool stuff you do

1356
00:56:43,920 --> 00:56:46,160
okay then uh thank you again for your

1357
00:56:46,160 --> 00:56:48,720
great talk for for all the research

1358
00:56:48,720 --> 00:56:50,240
you're doing for all the knowledge that

1359
00:56:50,240 --> 00:56:53,200
you've shared and uh yeah

1360
00:56:53,200 --> 00:56:56,240
we just hope that everyone who missed it

1361
00:56:56,240 --> 00:57:00,319
in these hours we'll be able to

1362
00:57:00,319 --> 00:57:02,799
watch it on uh online on our youtube

1363
00:57:02,799 --> 00:57:05,119
channel and get back to you and uh yeah

1364
00:57:05,119 --> 00:57:06,880
ask your questions

1365
00:57:06,880 --> 00:57:08,240
thank you very much

1366
00:57:08,240 --> 00:57:12,279
thank you happy to be here bye-bye

1367
00:57:13,839 --> 00:57:15,920
you

