1
00:00:03,760 --> 00:00:05,600
hello everyone hope you are joining this

2
00:00:05,600 --> 00:00:07,919
conference so far welcome to my talk

3
00:00:07,919 --> 00:00:09,760
attacks on windows infrastructure blue

4
00:00:09,760 --> 00:00:12,400
team edition couple words about myself

5
00:00:12,400 --> 00:00:14,400
uh my name is bonan vannek i'm security

6
00:00:14,400 --> 00:00:16,400
engineering tip i've been working in

7
00:00:16,400 --> 00:00:18,400
security for about five years started my

8
00:00:18,400 --> 00:00:20,880
career past as perforation tester at

9
00:00:20,880 --> 00:00:23,199
under defense malware analysis in the

10
00:00:23,199 --> 00:00:24,880
past splunk enthusiast that's why you'll

11
00:00:24,880 --> 00:00:27,199
see a lot of splunk searches maintaining

12
00:00:27,199 --> 00:00:28,960
my block on medium regarding stride

13
00:00:28,960 --> 00:00:30,720
content counting and lower analysis and

14
00:00:30,720 --> 00:00:32,159
if you want to reach out you can just

15
00:00:32,159 --> 00:00:34,640
use my twitter handle

16
00:00:34,640 --> 00:00:37,040
topics we want to cover today are

17
00:00:37,040 --> 00:00:38,879
initial reconnaissance passwords break

18
00:00:38,879 --> 00:00:41,600
lmr kerberos and caster posting pass the

19
00:00:41,600 --> 00:00:43,360
hash pass the ticket over pass the hash

20
00:00:43,360 --> 00:00:45,520
silver ticket golden ticket constraint

21
00:00:45,520 --> 00:00:47,600
and unconstrained delegations dc sync

22
00:00:47,600 --> 00:00:49,120
and dc shadow

23
00:00:49,120 --> 00:00:51,360
reconnaissance so when we talk about

24
00:00:51,360 --> 00:00:53,440
reconnaissance we have two options first

25
00:00:53,440 --> 00:00:56,079
is use native tools like who am i we

26
00:00:56,079 --> 00:00:58,719
make that username group and to detect

27
00:00:58,719 --> 00:01:00,399
and monitor this activity you can use

28
00:01:00,399 --> 00:01:03,600
this mondivant id1 or windows security

29
00:01:03,600 --> 00:01:05,760
process creation device with extended

30
00:01:05,760 --> 00:01:07,680
command line logging and just look for

31
00:01:07,680 --> 00:01:08,960
these patterns

32
00:01:08,960 --> 00:01:11,520
and another option is to drop your own

33
00:01:11,520 --> 00:01:14,320
tool like bloodhound or sharpcount or

34
00:01:14,320 --> 00:01:16,960
for example i defined

35
00:01:16,960 --> 00:01:20,159
basically these tools uh just utilizing

36
00:01:20,159 --> 00:01:22,720
heavily utilizing ldap protocol to

37
00:01:22,720 --> 00:01:25,439
enumerate active directory

38
00:01:25,439 --> 00:01:26,560
objects

39
00:01:26,560 --> 00:01:29,200
and find different relationship between

40
00:01:29,200 --> 00:01:31,920
these objects and find different attack

41
00:01:31,920 --> 00:01:34,079
passes which you can use to

42
00:01:34,079 --> 00:01:36,159
for example get the main controller or

43
00:01:36,159 --> 00:01:38,560
administrator privileges

44
00:01:38,560 --> 00:01:40,720
yeah and as we mentioned before it's

45
00:01:40,720 --> 00:01:42,960
heavily using ldap filters and if we

46
00:01:42,960 --> 00:01:46,640
just dive deeper inside a source code of

47
00:01:46,640 --> 00:01:49,280
in this case sharp count you'll see that

48
00:01:49,280 --> 00:01:52,240
you heavily using ldap filters and

49
00:01:52,240 --> 00:01:54,479
trying to merge all different stuff from

50
00:01:54,479 --> 00:01:56,000
active directory

51
00:01:56,000 --> 00:01:58,399
uh to monitor this activity by default

52
00:01:58,399 --> 00:02:01,600
windows doesn't lock at all

53
00:02:01,600 --> 00:02:04,880
um but you can enable and enable ldap

54
00:02:04,880 --> 00:02:06,320
performance monitoring logging with

55
00:02:06,320 --> 00:02:09,758
event id 1644 and to enable that you

56
00:02:09,758 --> 00:02:11,920
just need to set this register keys and

57
00:02:11,920 --> 00:02:13,120
values

58
00:02:13,120 --> 00:02:15,360
and here is a list of

59
00:02:15,360 --> 00:02:16,720
guides to

60
00:02:16,720 --> 00:02:18,560
set these keys

61
00:02:18,560 --> 00:02:21,840
how this log looks like you have clients

62
00:02:21,840 --> 00:02:24,480
ipn port you have starting node hold up

63
00:02:24,480 --> 00:02:26,560
node and you have filter looks pretty

64
00:02:26,560 --> 00:02:28,030
good for me

65
00:02:28,030 --> 00:02:29,280
[Music]

66
00:02:29,280 --> 00:02:31,280
then let's just see for example

67
00:02:31,280 --> 00:02:33,360
sharpcount

68
00:02:33,360 --> 00:02:34,959
so we use

69
00:02:34,959 --> 00:02:37,840
collect all to run all and collect all

70
00:02:37,840 --> 00:02:39,200
information from

71
00:02:39,200 --> 00:02:41,760
active directory if we just go

72
00:02:41,760 --> 00:02:43,680
and look for network traffic you will

73
00:02:43,680 --> 00:02:46,319
see encrypted ldap traffic and that's

74
00:02:46,319 --> 00:02:48,319
because by default

75
00:02:48,319 --> 00:02:49,680
uh

76
00:02:49,680 --> 00:02:52,560
sharp count utilizes uh

77
00:02:52,560 --> 00:02:55,040
kerberos signing and it will encrypts

78
00:02:55,040 --> 00:02:57,599
all adapt filters but if you want to

79
00:02:57,599 --> 00:02:58,720
just look

80
00:02:58,720 --> 00:03:01,200
what are what they are you can just run

81
00:03:01,200 --> 00:03:03,200
this flag with your

82
00:03:03,200 --> 00:03:05,360
sharp hound disable kerberos signing and

83
00:03:05,360 --> 00:03:08,400
you will secure text filters

84
00:03:08,400 --> 00:03:11,200
and if we go to our mentioned before

85
00:03:11,200 --> 00:03:12,800
1644

86
00:03:12,800 --> 00:03:15,360
security event you will see yes exactly

87
00:03:15,360 --> 00:03:16,560
nothing

88
00:03:16,560 --> 00:03:19,920
because for some reason uh

89
00:03:19,920 --> 00:03:23,120
microsoft implemented is kind of pearly

90
00:03:23,120 --> 00:03:25,200
and you need to look for some other

91
00:03:25,200 --> 00:03:28,319
options and what other options is using

92
00:03:28,319 --> 00:03:29,680
some tools

93
00:03:29,680 --> 00:03:31,840
which works with

94
00:03:31,840 --> 00:03:34,400
event racing for windows so fireeye

95
00:03:34,400 --> 00:03:37,280
developed tool called silk etv and silk

96
00:03:37,280 --> 00:03:39,680
service which is like some flexible

97
00:03:39,680 --> 00:03:41,599
some c-sharp wrappers

98
00:03:41,599 --> 00:03:45,599
for low-level etv which for example

99
00:03:45,599 --> 00:03:48,640
event viewer from windows is all it's

100
00:03:48,640 --> 00:03:51,760
also utilizing etv to

101
00:03:51,760 --> 00:03:54,879
creating those security ones

102
00:03:54,879 --> 00:03:57,680
and basically what you can do you can

103
00:03:57,680 --> 00:04:00,720
just configure simple simple ldap

104
00:04:00,720 --> 00:04:03,519
logging with connecting to ldap client

105
00:04:03,519 --> 00:04:07,360
provider uh you can also

106
00:04:07,360 --> 00:04:08,319
use

107
00:04:08,319 --> 00:04:11,360
yara because it includes your plugin you

108
00:04:11,360 --> 00:04:12,319
can just

109
00:04:12,319 --> 00:04:14,640
make your own your signature for example

110
00:04:14,640 --> 00:04:17,759
detecting uh as well posting on kerberos

111
00:04:17,759 --> 00:04:20,320
and other stuff with uh

112
00:04:20,320 --> 00:04:22,320
ldaps

113
00:04:22,320 --> 00:04:25,120
yeah and when we run our attack we

114
00:04:25,120 --> 00:04:27,199
collected all this information inside

115
00:04:27,199 --> 00:04:30,400
our old upload and to move further you

116
00:04:30,400 --> 00:04:33,040
can just start

117
00:04:33,040 --> 00:04:35,120
digesting this lock with your favorite

118
00:04:35,120 --> 00:04:37,040
cm

119
00:04:37,040 --> 00:04:39,520
if you wonder what you can look for

120
00:04:39,520 --> 00:04:43,280
inside your ldap data microsoft atp team

121
00:04:43,280 --> 00:04:44,720
compiled this

122
00:04:44,720 --> 00:04:45,919
list of

123
00:04:45,919 --> 00:04:48,720
ldap filters which are

124
00:04:48,720 --> 00:04:51,040
used by different plugins organization

125
00:04:51,040 --> 00:04:54,000
tools so basically you can just install

126
00:04:54,000 --> 00:04:56,400
silky tv series

127
00:04:56,400 --> 00:04:58,560
compile couple of detection using these

128
00:04:58,560 --> 00:05:01,360
filters and you are ready to catch

129
00:05:01,360 --> 00:05:03,199
some initial reconnaissance in your

130
00:05:03,199 --> 00:05:05,360
network

131
00:05:05,360 --> 00:05:10,000
password playing lmr vtns and mdns best

132
00:05:10,000 --> 00:05:12,000
for spraying so the main difference

133
00:05:12,000 --> 00:05:14,639
between password spraying and default

134
00:05:14,639 --> 00:05:16,960
password brute force is that you're

135
00:05:16,960 --> 00:05:19,360
using one password against many

136
00:05:19,360 --> 00:05:22,400
different accounts who's trying to avoid

137
00:05:22,400 --> 00:05:25,520
account lockout

138
00:05:25,520 --> 00:05:27,759
there are a lot of tools scripts to do

139
00:05:27,759 --> 00:05:30,240
that basically you have list of users

140
00:05:30,240 --> 00:05:32,320
you have list of passwords and you're

141
00:05:32,320 --> 00:05:35,039
just trying to spray

142
00:05:35,039 --> 00:05:39,280
with one password to many many users

143
00:05:39,280 --> 00:05:41,759
by default in case of ntlm

144
00:05:41,759 --> 00:05:44,080
authentication or for example smb

145
00:05:44,080 --> 00:05:46,919
authentication you will see a lot of

146
00:05:46,919 --> 00:05:49,440
4625 events

147
00:05:49,440 --> 00:05:52,320
and if you make some grouping with

148
00:05:52,320 --> 00:05:55,440
source destination and look for unique

149
00:05:55,440 --> 00:05:58,720
usernames you can come up with

150
00:05:58,720 --> 00:06:00,960
your first detection

151
00:06:00,960 --> 00:06:03,199
password spraying detection so basically

152
00:06:03,199 --> 00:06:05,280
we're trying to find

153
00:06:05,280 --> 00:06:07,199
a

154
00:06:07,199 --> 00:06:10,400
threshold for unique user names

155
00:06:10,400 --> 00:06:13,199
within specific period of time with like

156
00:06:13,199 --> 00:06:15,440
source and destination and you will

157
00:06:15,440 --> 00:06:16,639
catch some

158
00:06:16,639 --> 00:06:17,919
password spring

159
00:06:17,919 --> 00:06:20,560
but there are other authentication

160
00:06:20,560 --> 00:06:23,280
protocols like kerberos think which

161
00:06:23,280 --> 00:06:27,280
won't generate any for this 625 events

162
00:06:27,280 --> 00:06:28,800
in that case for example in case of

163
00:06:28,800 --> 00:06:30,800
kyber roasting you will get a lot of

164
00:06:30,800 --> 00:06:33,600
4771 or

165
00:06:33,600 --> 00:06:36,080
specification failed events but you can

166
00:06:36,080 --> 00:06:38,479
apply just the same logic as we did with

167
00:06:38,479 --> 00:06:39,560
uh

168
00:06:39,560 --> 00:06:42,880
4625 lines to this one as well

169
00:06:42,880 --> 00:06:45,280
and the other events we want to look for

170
00:06:45,280 --> 00:06:49,039
because they will be missing in 46 25

171
00:06:49,039 --> 00:06:52,800
and 47 71 is like kerberos in invalid

172
00:06:52,800 --> 00:06:55,520
users disabled users on the lm invalid

173
00:06:55,520 --> 00:06:57,199
wrong passwords

174
00:06:57,199 --> 00:06:59,599
and 4648

175
00:06:59,599 --> 00:07:01,199
or authentication using explicit

176
00:07:01,199 --> 00:07:02,720
credentials can be

177
00:07:02,720 --> 00:07:06,000
useful for us as well

178
00:07:06,000 --> 00:07:10,479
uh lemon r and nbt and ns and dns so

179
00:07:10,479 --> 00:07:12,560
basically a laminar is protocol which

180
00:07:12,560 --> 00:07:15,199
was developed by microsoft for cases

181
00:07:15,199 --> 00:07:17,759
when a domain controller is for some

182
00:07:17,759 --> 00:07:19,759
reason is unavailable but you still want

183
00:07:19,759 --> 00:07:22,000
to resolve some class names and how it

184
00:07:22,000 --> 00:07:23,759
works basically you're trying to resolve

185
00:07:23,759 --> 00:07:26,080
some cost name with your dns it doesn't

186
00:07:26,080 --> 00:07:29,039
know in that case you will make some

187
00:07:29,039 --> 00:07:31,440
multicasts requests to your network

188
00:07:31,440 --> 00:07:33,599
asking maybe someone know

189
00:07:33,599 --> 00:07:36,000
the ip for the specific hostname and

190
00:07:36,000 --> 00:07:38,319
when you have attacker in your network

191
00:07:38,319 --> 00:07:41,039
who configure for example running some

192
00:07:41,039 --> 00:07:43,280
responder it will respond yeah yeah it's

193
00:07:43,280 --> 00:07:46,080
me and in that case

194
00:07:46,080 --> 00:07:48,240
you can simply collect

195
00:07:48,240 --> 00:07:49,039
some

196
00:07:49,039 --> 00:07:51,280
ntlm hashes for further

197
00:07:51,280 --> 00:07:54,479
reinforcing and cracking those hashes

198
00:07:54,479 --> 00:07:57,360
so what are the ways to detect provide

199
00:07:57,360 --> 00:07:59,199
this so from probation perspective you

200
00:07:59,199 --> 00:08:02,240
can just disable luminara and nbt in dns

201
00:08:02,240 --> 00:08:04,560
and from detection perspective it's kind

202
00:08:04,560 --> 00:08:06,400
of not so trivial to detect this

203
00:08:06,400 --> 00:08:09,440
activity like maybe some compiling some

204
00:08:09,440 --> 00:08:12,160
look up a list of what host names are in

205
00:08:12,160 --> 00:08:13,840
your network and trying to find this

206
00:08:13,840 --> 00:08:14,879
like

207
00:08:14,879 --> 00:08:17,520
misspelled host names but it's like not

208
00:08:17,520 --> 00:08:18,800
so obvious

209
00:08:18,800 --> 00:08:21,919
what you can do is utilize a script made

210
00:08:21,919 --> 00:08:25,120
by a praetorian based on honeypot and

211
00:08:25,120 --> 00:08:27,280
basically it's just trying to some time

212
00:08:27,280 --> 00:08:30,240
interval to resolve this bogus or false

213
00:08:30,240 --> 00:08:33,200
host names and if it can

214
00:08:33,200 --> 00:08:35,360
it's means that someone is probably

215
00:08:35,360 --> 00:08:37,440
trying to spoof a lmnr

216
00:08:37,440 --> 00:08:39,839
and to go to the next like more

217
00:08:39,839 --> 00:08:41,679
production uh

218
00:08:41,679 --> 00:08:43,919
ready solution you can

219
00:08:43,919 --> 00:08:46,560
add some login to the script and the js

220
00:08:46,560 --> 00:08:50,479
that logs to your favorite cm

221
00:08:51,200 --> 00:08:54,000
kerberos thing and as web hosting so

222
00:08:54,000 --> 00:08:55,920
that's where we start our journey to

223
00:08:55,920 --> 00:08:59,360
kerberos think we will start with uh

224
00:08:59,360 --> 00:09:01,040
talking about how kerberos

225
00:09:01,040 --> 00:09:03,440
authentication works so

226
00:09:03,440 --> 00:09:04,880
at first we

227
00:09:04,880 --> 00:09:07,440
make requests for tgt which providing

228
00:09:07,440 --> 00:09:09,680
our ntlm cache but we don't send this

229
00:09:09,680 --> 00:09:12,160
hash to our domain controller we just

230
00:09:12,160 --> 00:09:14,480
use this hash to encrypt timestamp

231
00:09:14,480 --> 00:09:16,320
inside of our

232
00:09:16,320 --> 00:09:18,480
request to gt

233
00:09:18,480 --> 00:09:20,640
and because domain controller knows our

234
00:09:20,640 --> 00:09:23,440
password it tries to decrypt

235
00:09:23,440 --> 00:09:25,040
as that time step and if it is

236
00:09:25,040 --> 00:09:27,200
successful this means that our logon is

237
00:09:27,200 --> 00:09:29,839
successful and we receive our tgt or

238
00:09:29,839 --> 00:09:31,519
ticket granting ticket

239
00:09:31,519 --> 00:09:33,760
which is encrypted

240
00:09:33,760 --> 00:09:37,279
by hash of kerberos tgt account

241
00:09:37,279 --> 00:09:39,279
and like only this account can decrypt

242
00:09:39,279 --> 00:09:42,640
that like there's two portion one one is

243
00:09:42,640 --> 00:09:45,360
decryptable by user hash and one is

244
00:09:45,360 --> 00:09:48,320
decrypted by this kerberos hd account

245
00:09:48,320 --> 00:09:50,800
when we have this tgd what we want for

246
00:09:50,800 --> 00:09:53,680
example to do is to authenticate to some

247
00:09:53,680 --> 00:09:55,920
access remote resource for example some

248
00:09:55,920 --> 00:09:59,600
smb share in that case we need to

249
00:09:59,600 --> 00:10:02,959
get a ticket granting service ticket so

250
00:10:02,959 --> 00:10:05,360
to do that we

251
00:10:05,360 --> 00:10:08,480
make requests for tgs presenting our tgt

252
00:10:08,480 --> 00:10:09,440
request

253
00:10:09,440 --> 00:10:11,920
and domain controller just responds with

254
00:10:11,920 --> 00:10:15,279
each encrypted ggs ticket

255
00:10:15,279 --> 00:10:17,600
which is encrypted with service account

256
00:10:17,600 --> 00:10:19,040
cash

257
00:10:19,040 --> 00:10:21,519
and

258
00:10:21,680 --> 00:10:24,399
what like attack vectors here

259
00:10:24,399 --> 00:10:25,200
so

260
00:10:25,200 --> 00:10:26,320
uh

261
00:10:26,320 --> 00:10:28,720
there are like default service accounts

262
00:10:28,720 --> 00:10:30,000
which are manageable by domain

263
00:10:30,000 --> 00:10:33,399
controller and they have uh

264
00:10:33,399 --> 00:10:36,480
128 password lengths which is changing

265
00:10:36,480 --> 00:10:38,880
like with period of time of 30 days but

266
00:10:38,880 --> 00:10:40,640
there are some cases when we

267
00:10:40,640 --> 00:10:43,680
want to use spn's or like unique

268
00:10:43,680 --> 00:10:47,200
identifier for our service instances

269
00:10:47,200 --> 00:10:49,680
in that case users are responsible to

270
00:10:49,680 --> 00:10:51,920
configuring this like not so long and

271
00:10:51,920 --> 00:10:54,560
complex passwords and they may be our

272
00:10:54,560 --> 00:10:57,440
target for our attack

273
00:10:57,440 --> 00:10:58,720
and

274
00:10:58,720 --> 00:11:02,000
what are the issue here that

275
00:11:02,000 --> 00:11:04,640
our domain controller doesn't validate

276
00:11:04,640 --> 00:11:06,959
if we have access or we don't have

277
00:11:06,959 --> 00:11:09,440
access to specific resource it just

278
00:11:09,440 --> 00:11:12,640
responds with this dgs so

279
00:11:12,640 --> 00:11:15,519
the logic of kerberos think is to

280
00:11:15,519 --> 00:11:19,120
requesting this tgs stickies which are

281
00:11:19,120 --> 00:11:23,600
encrypted with service password caches

282
00:11:23,600 --> 00:11:25,519
and trying just to brute force those

283
00:11:25,519 --> 00:11:26,480
hashes

284
00:11:26,480 --> 00:11:28,240
and retargeting

285
00:11:28,240 --> 00:11:30,640
service principal names because they can

286
00:11:30,640 --> 00:11:34,160
have this weak password set for them

287
00:11:34,160 --> 00:11:35,040
so

288
00:11:35,040 --> 00:11:36,640
from like kerberos authentication

289
00:11:36,640 --> 00:11:38,240
perspective

290
00:11:38,240 --> 00:11:41,360
we will see very similar to

291
00:11:41,360 --> 00:11:44,079
we probably will have some tgt

292
00:11:44,079 --> 00:11:47,680
uh requests tgt response and we see this

293
00:11:47,680 --> 00:11:50,560
tgs request for like our user but we

294
00:11:50,560 --> 00:11:52,880
will see after that like we for example

295
00:11:52,880 --> 00:11:54,839
in case of kerberos think we will be

296
00:11:54,839 --> 00:11:59,279
requesting a lot of tgs tickets

297
00:11:59,279 --> 00:12:03,360
without further ado to remote service

298
00:12:03,360 --> 00:12:06,079
uh how we can perform this attack

299
00:12:06,079 --> 00:12:09,040
rubus has module called kerberos and

300
00:12:09,040 --> 00:12:10,240
it's basically just collecting

301
00:12:10,240 --> 00:12:11,920
information from

302
00:12:11,920 --> 00:12:14,000
active directory about

303
00:12:14,000 --> 00:12:18,079
available spns and just requesting uh

304
00:12:18,079 --> 00:12:19,040
yeah

305
00:12:19,040 --> 00:12:21,600
requesting uh information about spn

306
00:12:21,600 --> 00:12:24,079
users and requesting tgs for each spin

307
00:12:24,079 --> 00:12:26,160
user

308
00:12:26,160 --> 00:12:27,360
and from

309
00:12:27,360 --> 00:12:30,880
how b9 service logging looks in windows

310
00:12:30,880 --> 00:12:34,240
events so we have this kerberos tgt

311
00:12:34,240 --> 00:12:37,279
request we have service

312
00:12:37,279 --> 00:12:38,880
ticket request

313
00:12:38,880 --> 00:12:41,360
and a whole couple of few months in case

314
00:12:41,360 --> 00:12:43,120
it was successful his account was

315
00:12:43,120 --> 00:12:45,120
successfully logged on or failed logan

316
00:12:45,120 --> 00:12:47,680
if the password didn't match and we have

317
00:12:47,680 --> 00:12:50,959
all gone using split credentials

318
00:12:50,959 --> 00:12:53,279
and if we look for in network traffic

319
00:12:53,279 --> 00:12:56,240
we'll see the same we see tgt part we

320
00:12:56,240 --> 00:13:00,399
see djs part and we see this

321
00:13:00,800 --> 00:13:04,880
application to remote service part

322
00:13:04,880 --> 00:13:08,320
but when we have a kerberos attack we'll

323
00:13:08,320 --> 00:13:11,440
see just this a lot of uh

324
00:13:11,440 --> 00:13:14,240
not even a lot you can see if you have

325
00:13:14,240 --> 00:13:18,480
just one request for tgt without further

326
00:13:18,480 --> 00:13:20,160
uh

327
00:13:20,160 --> 00:13:22,399
again using explicit credential or pre

328
00:13:22,399 --> 00:13:24,560
or tgt request then this can be

329
00:13:24,560 --> 00:13:26,959
indicator of kerberosting

330
00:13:26,959 --> 00:13:29,440
uh and that's how we came up with couple

331
00:13:29,440 --> 00:13:32,399
of detections so first one is look for

332
00:13:32,399 --> 00:13:36,480
this as uh ldap filters looking for spn

333
00:13:36,480 --> 00:13:39,199
users you can this can be circuited a tv

334
00:13:39,199 --> 00:13:42,720
as we mentioned or network traffic

335
00:13:42,720 --> 00:13:44,720
or that can be the logic as we described

336
00:13:44,720 --> 00:13:48,480
before look for tgs requests without

337
00:13:48,480 --> 00:13:49,519
further

338
00:13:49,519 --> 00:13:51,680
using uh logon using explicit credential

339
00:13:51,680 --> 00:13:55,120
or pure uh tgt requests

340
00:13:55,120 --> 00:13:59,120
also to be noted in case of uh even like

341
00:13:59,120 --> 00:14:02,000
most of attacks which are targeting some

342
00:14:02,000 --> 00:14:05,279
tickets like uh some like

343
00:14:05,279 --> 00:14:09,360
pass the ticket okay for hosting uh or

344
00:14:09,360 --> 00:14:10,480
or

345
00:14:10,480 --> 00:14:11,600
the hash

346
00:14:11,600 --> 00:14:12,480
they

347
00:14:12,480 --> 00:14:15,199
will downgrade your encryption type by

348
00:14:15,199 --> 00:14:17,920
default and for example if by default

349
00:14:17,920 --> 00:14:19,480
you have is

350
00:14:19,480 --> 00:14:22,480
256 it will be downgraded to your c4

351
00:14:22,480 --> 00:14:24,399
which corresponds to

352
00:14:24,399 --> 00:14:25,760
hex code

353
00:14:25,760 --> 00:14:28,319
17.

354
00:14:28,880 --> 00:14:30,639
i isr posting

355
00:14:30,639 --> 00:14:33,360
so with us supposing you basically can

356
00:14:33,360 --> 00:14:37,199
set for your accounts uh this flag do

357
00:14:37,199 --> 00:14:40,000
not require kerberos presentation and

358
00:14:40,000 --> 00:14:42,079
it's like there's no reasonable need for

359
00:14:42,079 --> 00:14:44,399
this life to be set but in case you

360
00:14:44,399 --> 00:14:48,079
wanted to set it how it works so

361
00:14:48,079 --> 00:14:49,839
when you are trying to authenticate in

362
00:14:49,839 --> 00:14:52,000
active directory you at first you will

363
00:14:52,000 --> 00:14:54,160
try to authenticate without

364
00:14:54,160 --> 00:14:57,839
presentation and you will send your uh

365
00:14:57,839 --> 00:15:00,720
tgt request or srec

366
00:15:00,720 --> 00:15:01,920
uh with

367
00:15:01,920 --> 00:15:05,360
sending just pa like back request data

368
00:15:05,360 --> 00:15:07,600
and it will be failed in case

369
00:15:07,600 --> 00:15:10,480
that flag is not set in case that flag

370
00:15:10,480 --> 00:15:14,000
is set or it's like one presentation is

371
00:15:14,000 --> 00:15:16,160
enable enabled

372
00:15:16,160 --> 00:15:19,120
what you need to do is provide your

373
00:15:19,120 --> 00:15:21,519
timestamp encrypted with password hash

374
00:15:21,519 --> 00:15:23,760
as we mentioned before when we describe

375
00:15:23,760 --> 00:15:25,839
we're describing uh kerberos

376
00:15:25,839 --> 00:15:28,160
authentication and that's how like

377
00:15:28,160 --> 00:15:30,240
password is transferred to your domain

378
00:15:30,240 --> 00:15:32,240
controller it's not transferred it just

379
00:15:32,240 --> 00:15:34,639
uses it's hash to encrypt this timestamp

380
00:15:34,639 --> 00:15:36,959
and in case presentation is

381
00:15:36,959 --> 00:15:39,920
disabled we don't have this and

382
00:15:39,920 --> 00:15:42,560
basically this means that we can request

383
00:15:42,560 --> 00:15:44,399
tgt

384
00:15:44,399 --> 00:15:45,920
uh tickets

385
00:15:45,920 --> 00:15:48,160
uh for each user who has this

386
00:15:48,160 --> 00:15:50,959
specification disabled without knowing

387
00:15:50,959 --> 00:15:54,480
this password and further we can use uh

388
00:15:54,480 --> 00:15:55,279
this

389
00:15:55,279 --> 00:15:57,519
hash to brute force and correct that

390
00:15:57,519 --> 00:16:00,320
password for that specific user

391
00:16:00,320 --> 00:16:03,279
uh we can detect here as well uh

392
00:16:03,279 --> 00:16:05,920
specific ldap filters which look for

393
00:16:05,920 --> 00:16:08,800
presentation disabled users or we can

394
00:16:08,800 --> 00:16:10,000
use for

395
00:16:10,000 --> 00:16:12,800
look for kerberos authentication ticket

396
00:16:12,800 --> 00:16:14,240
was requested

397
00:16:14,240 --> 00:16:15,519
waste

398
00:16:15,519 --> 00:16:19,759
pre-ow stop equals zero or disabled

399
00:16:19,759 --> 00:16:21,839
pass the hash by the ticket overpass the

400
00:16:21,839 --> 00:16:23,199
hash

401
00:16:23,199 --> 00:16:24,720
pass the cash we spend the cash

402
00:16:24,720 --> 00:16:26,560
basically what you are trying to do is

403
00:16:26,560 --> 00:16:30,720
access remote service without knowing uh

404
00:16:30,720 --> 00:16:34,399
user clear text password

405
00:16:34,399 --> 00:16:37,120
without user clear object password so

406
00:16:37,120 --> 00:16:38,480
how it works

407
00:16:38,480 --> 00:16:41,120
uh each process has associated process

408
00:16:41,120 --> 00:16:43,519
access token which contains information

409
00:16:43,519 --> 00:16:45,120
information like username groups

410
00:16:45,120 --> 00:16:47,120
information privileges and

411
00:16:47,120 --> 00:16:49,120
logon session reference which is

412
00:16:49,120 --> 00:16:51,839
referencing structure logon session

413
00:16:51,839 --> 00:16:53,440
inside elsa's

414
00:16:53,440 --> 00:16:55,920
process memory and that contains

415
00:16:55,920 --> 00:16:57,680
information like username domain

416
00:16:57,680 --> 00:17:01,360
investigation id or like indeed

417
00:17:01,360 --> 00:17:04,559
like inside of that you have nt hash lam

418
00:17:04,559 --> 00:17:05,599
hash

419
00:17:05,599 --> 00:17:07,839
and when you are trying to access remote

420
00:17:07,839 --> 00:17:10,160
resources this logon session credential

421
00:17:10,160 --> 00:17:13,520
materials are used for authentication

422
00:17:13,520 --> 00:17:16,400
great example to describe this

423
00:17:16,400 --> 00:17:18,640
deeper would be

424
00:17:18,640 --> 00:17:21,039
windows native command called run s

425
00:17:21,039 --> 00:17:23,760
so when you in this case we are trying

426
00:17:23,760 --> 00:17:26,160
to access a domain controller adventure

427
00:17:26,160 --> 00:17:28,960
as simple user janik hickman of course

428
00:17:28,960 --> 00:17:30,000
of course

429
00:17:30,000 --> 00:17:32,880
access is denied but when we tried

430
00:17:32,880 --> 00:17:34,240
we run that

431
00:17:34,240 --> 00:17:37,520
run as as administrator cmd we run who

432
00:17:37,520 --> 00:17:39,919
am i and this administrator we were

433
00:17:39,919 --> 00:17:42,799
successfully able to access this

434
00:17:42,799 --> 00:17:44,559
administrator

435
00:17:44,559 --> 00:17:45,440
what

436
00:17:45,440 --> 00:17:48,400
events were generated at this time so on

437
00:17:48,400 --> 00:17:50,880
the top right you see timestamp and

438
00:17:50,880 --> 00:17:53,280
commands run it and on the bottom you

439
00:17:53,280 --> 00:17:56,960
see according windows security events so

440
00:17:56,960 --> 00:18:00,400
when we run it run s we generated a

441
00:18:00,400 --> 00:18:03,520
successful logon for user administrator

442
00:18:03,520 --> 00:18:05,200
with logon

443
00:18:05,200 --> 00:18:07,200
type interactive

444
00:18:07,200 --> 00:18:09,120
tool and after that

445
00:18:09,120 --> 00:18:12,000
we accessed remote

446
00:18:12,000 --> 00:18:15,919
smb share that's ntlm authentication and

447
00:18:15,919 --> 00:18:19,120
we generated generated this ntlm uh

448
00:18:19,120 --> 00:18:21,760
authentication logon

449
00:18:21,760 --> 00:18:24,400
but ronsk has very like

450
00:18:24,400 --> 00:18:27,919
curious uh flag called net only and when

451
00:18:27,919 --> 00:18:31,120
we run run as net only flag

452
00:18:31,120 --> 00:18:33,679
when you run who am i you still

453
00:18:33,679 --> 00:18:35,760
are jenny hickman but when you are

454
00:18:35,760 --> 00:18:38,000
trying to access remote share

455
00:18:38,000 --> 00:18:40,640
you are using credential materials of

456
00:18:40,640 --> 00:18:42,640
administrator and you accessing as

457
00:18:42,640 --> 00:18:45,760
administrator and we can prove that with

458
00:18:45,760 --> 00:18:48,400
looking for

459
00:18:49,679 --> 00:18:52,480
windows security locks so here you see

460
00:18:52,480 --> 00:18:53,440
see

461
00:18:53,440 --> 00:18:55,440
successful logon but now we have new

462
00:18:55,440 --> 00:18:58,640
credentials type logon type

463
00:18:58,640 --> 00:19:00,960
and sec logo for generic hickman and

464
00:19:00,960 --> 00:19:03,120
when we try to authenticate to remote

465
00:19:03,120 --> 00:19:08,000
resource we have administrator logon

466
00:19:08,000 --> 00:19:12,160
and that's how we come up to by the hash

467
00:19:12,160 --> 00:19:12,880
so

468
00:19:12,880 --> 00:19:15,039
cobblestrike by the hash is basically

469
00:19:15,039 --> 00:19:18,000
utilizing mimikatz for this attack

470
00:19:18,000 --> 00:19:20,480
what you need to perform attack is user

471
00:19:20,480 --> 00:19:23,200
password cache domain

472
00:19:23,200 --> 00:19:25,679
listener and such information but it

473
00:19:25,679 --> 00:19:28,160
need be with elevated privileges or

474
00:19:28,160 --> 00:19:31,360
system privileges and why we will

475
00:19:31,360 --> 00:19:33,600
get to this in the moment

476
00:19:33,600 --> 00:19:36,320
so how we perform this attack basically

477
00:19:36,320 --> 00:19:40,320
it's uh spawns dummy process

478
00:19:40,320 --> 00:19:42,400
this uh process

479
00:19:42,400 --> 00:19:44,240
uh tmd

480
00:19:44,240 --> 00:19:48,480
echo with sending to name it pipe

481
00:19:48,480 --> 00:19:52,320
and what we are trying to do is access

482
00:19:52,320 --> 00:19:54,559
elsa memory directly

483
00:19:54,559 --> 00:19:57,440
and patch those credential materials

484
00:19:57,440 --> 00:19:59,840
inside of logon session structure with

485
00:19:59,840 --> 00:20:01,200
provided

486
00:20:01,200 --> 00:20:04,000
and send back to us that's a reference

487
00:20:04,000 --> 00:20:05,840
to logon sessions so we can utilize

488
00:20:05,840 --> 00:20:08,159
inside of our current session and that's

489
00:20:08,159 --> 00:20:10,480
basically how it works

490
00:20:10,480 --> 00:20:13,919
if we look dive into windows events we

491
00:20:13,919 --> 00:20:15,840
will see the same

492
00:20:15,840 --> 00:20:18,480
events as we did with rona's net only

493
00:20:18,480 --> 00:20:21,200
flag we see account was successfully

494
00:20:21,200 --> 00:20:24,480
look on uh new credentials logon type

495
00:20:24,480 --> 00:20:28,000
and we see successful gun using ntlm as

496
00:20:28,000 --> 00:20:29,919
a remote host

497
00:20:29,919 --> 00:20:33,120
as ken martin which were used for

498
00:20:33,120 --> 00:20:36,320
uh pass the hash

499
00:20:36,320 --> 00:20:38,640
and when we look for process creation

500
00:20:38,640 --> 00:20:41,440
event we will see this sim d spawn which

501
00:20:41,440 --> 00:20:44,320
is child to run dll or

502
00:20:44,320 --> 00:20:46,840
cable strike beacon

503
00:20:46,840 --> 00:20:50,159
process so what we can use for detection

504
00:20:50,159 --> 00:20:52,240
we can use this uh

505
00:20:52,240 --> 00:20:55,039
logon type new credentials or nine and

506
00:20:55,039 --> 00:20:58,240
logon process name sec logo but there is

507
00:20:58,240 --> 00:21:01,440
like one downfall it's we can have this

508
00:21:01,440 --> 00:21:04,720
couple of false positive with runner

509
00:21:04,720 --> 00:21:06,720
or an s net only flag

510
00:21:06,720 --> 00:21:09,440
and to improve our detection what we can

511
00:21:09,440 --> 00:21:10,720
use is

512
00:21:10,720 --> 00:21:12,960
uh this

513
00:21:12,960 --> 00:21:15,679
like behavior when we need to access all

514
00:21:15,679 --> 00:21:17,840
some memory and to do that we can use

515
00:21:17,840 --> 00:21:20,480
for example sysmon event id 10 which is

516
00:21:20,480 --> 00:21:22,960
a member directory memory access and

517
00:21:22,960 --> 00:21:25,440
look for those processes which are

518
00:21:25,440 --> 00:21:28,000
accessing elsa's memory and if we

519
00:21:28,000 --> 00:21:29,440
compile

520
00:21:29,440 --> 00:21:31,919
using process id and look for both of

521
00:21:31,919 --> 00:21:34,080
those events within a specific short of

522
00:21:34,080 --> 00:21:37,039
time like this logon event with new

523
00:21:37,039 --> 00:21:38,880
credentials and some process is

524
00:21:38,880 --> 00:21:42,080
accessing elsa's memory then this looks

525
00:21:42,080 --> 00:21:44,880
very suspicious and very

526
00:21:44,880 --> 00:21:48,480
like pass the hash attack

527
00:21:48,720 --> 00:21:51,600
overpass the hash attack so in this case

528
00:21:51,600 --> 00:21:53,520
uh there are cases when ntlm

529
00:21:53,520 --> 00:21:56,159
authentication is like disabled and we

530
00:21:56,159 --> 00:21:58,240
have only curb authentication in that

531
00:21:58,240 --> 00:22:00,640
case what we can do is our password hash

532
00:22:00,640 --> 00:22:03,520
it just request uh kerberos valid

533
00:22:03,520 --> 00:22:06,240
kerberos ticket

534
00:22:06,240 --> 00:22:09,919
so uh mimikaz utilizes the same way he

535
00:22:09,919 --> 00:22:12,960
spawns this child process its patches

536
00:22:12,960 --> 00:22:15,039
its uh

537
00:22:15,039 --> 00:22:17,600
credential materials falcon session and

538
00:22:17,600 --> 00:22:20,400
it just requests like in the default way

539
00:22:20,400 --> 00:22:22,080
this gtd

540
00:22:22,080 --> 00:22:23,679
and if we look for

541
00:22:23,679 --> 00:22:25,280
windows events you will see the same

542
00:22:25,280 --> 00:22:27,440
pattern for part of the hash attack you

543
00:22:27,440 --> 00:22:30,240
will still log on to dc and you see the

544
00:22:30,240 --> 00:22:32,880
tgt request when we try to access remote

545
00:22:32,880 --> 00:22:33,919
resource

546
00:22:33,919 --> 00:22:36,400
and basically how you can distinguish

547
00:22:36,400 --> 00:22:38,960
two of this is you have this pass the

548
00:22:38,960 --> 00:22:41,120
hash pattern with

549
00:22:41,120 --> 00:22:44,960
according uh sysmon event 10 access to

550
00:22:44,960 --> 00:22:49,039
elsa's memory and further you have uh in

551
00:22:49,039 --> 00:22:51,120
case of pass the hash you have until

552
00:22:51,120 --> 00:22:53,120
lambda gone in case of overpass the hash

553
00:22:53,120 --> 00:22:55,200
you have kerberos logo

554
00:22:55,200 --> 00:22:57,919
but we have case with rubos which has

555
00:22:57,919 --> 00:23:01,520
this model as dgt which looks uh looks

556
00:23:01,520 --> 00:23:02,480
to like

557
00:23:02,480 --> 00:23:05,039
work in the same way but it's not it's

558
00:23:05,039 --> 00:23:06,480
doesn't

559
00:23:06,480 --> 00:23:09,520
access elsa's memory what is trying to

560
00:23:09,520 --> 00:23:10,880
do is

561
00:23:10,880 --> 00:23:14,159
craft this uh asktgd packet and directly

562
00:23:14,159 --> 00:23:16,720
ask your kerberos uh your domain

563
00:23:16,720 --> 00:23:19,200
controller for this ticket and then just

564
00:23:19,200 --> 00:23:21,360
perform past the ticket attack

565
00:23:21,360 --> 00:23:22,400
in this case

566
00:23:22,400 --> 00:23:24,320
you won't see

567
00:23:24,320 --> 00:23:26,880
as you can see here

568
00:23:26,880 --> 00:23:28,640
any

569
00:23:28,640 --> 00:23:32,320
new logon activity etc you just see digi

570
00:23:32,320 --> 00:23:35,679
was requested and calibers logon so

571
00:23:35,679 --> 00:23:38,400
yeah because rubus manually

572
00:23:38,400 --> 00:23:41,200
crafts this packet you don't see any of

573
00:23:41,200 --> 00:23:42,960
those activities so

574
00:23:42,960 --> 00:23:45,840
how you can detect that well if you have

575
00:23:45,840 --> 00:23:47,600
sysmon events

576
00:23:47,600 --> 00:23:50,960
uh code three three

577
00:23:50,960 --> 00:23:53,039
you can look for connection like from

578
00:23:53,039 --> 00:23:55,600
suspicious processes to destination port

579
00:23:55,600 --> 00:23:59,039
80 8 which is kerberos on your domain

580
00:23:59,039 --> 00:24:01,919
controller and with this looks small and

581
00:24:01,919 --> 00:24:03,919
very straightforward detection you can

582
00:24:03,919 --> 00:24:05,679
detect different

583
00:24:05,679 --> 00:24:06,640
uh

584
00:24:06,640 --> 00:24:09,520
or pass the hashes activity or ask ttd

585
00:24:09,520 --> 00:24:10,799
activity

586
00:24:10,799 --> 00:24:13,120
to detect or pass the hash

587
00:24:13,120 --> 00:24:14,880
attack

588
00:24:14,880 --> 00:24:16,320
next comes

589
00:24:16,320 --> 00:24:19,200
pass the ticket so we spend the tickets

590
00:24:19,200 --> 00:24:22,720
uh what adversary is trying to do is say

591
00:24:22,720 --> 00:24:25,360
extracted tickets from one system and

592
00:24:25,360 --> 00:24:27,200
then try they trying to import those

593
00:24:27,200 --> 00:24:29,440
stickers to other hosts they

594
00:24:29,440 --> 00:24:32,159
opponent in your network so basically

595
00:24:32,159 --> 00:24:34,080
this is the same way where we're trying

596
00:24:34,080 --> 00:24:36,720
to access remote service without knowing

597
00:24:36,720 --> 00:24:38,640
account password

598
00:24:38,640 --> 00:24:41,279
so when we have uh this default kerb

599
00:24:41,279 --> 00:24:43,760
authentication we have request tgd or

600
00:24:43,760 --> 00:24:47,120
ctg request djs receive djs and present

601
00:24:47,120 --> 00:24:50,000
digest to remote service in case we have

602
00:24:50,000 --> 00:24:51,360
passed the ticket

603
00:24:51,360 --> 00:24:54,000
we don't have first two steps because we

604
00:24:54,000 --> 00:24:56,240
already have the tgt we just imported

605
00:24:56,240 --> 00:24:57,600
that

606
00:24:57,600 --> 00:24:59,520
what we see in windows security events

607
00:24:59,520 --> 00:25:01,679
it just requests for tgs for specific

608
00:25:01,679 --> 00:25:04,000
service

609
00:25:04,480 --> 00:25:05,200
in

610
00:25:05,200 --> 00:25:06,880
and to

611
00:25:06,880 --> 00:25:09,840
perform this attack we utilize rubric's

612
00:25:09,840 --> 00:25:12,080
monitor functionality which is basically

613
00:25:12,080 --> 00:25:13,760
with specific interval just list of

614
00:25:13,760 --> 00:25:17,200
currently uh cash at tgt tickets and we

615
00:25:17,200 --> 00:25:19,360
can just dump those tickets and on the

616
00:25:19,360 --> 00:25:20,720
target host

617
00:25:20,720 --> 00:25:23,919
we can just run buy the tickets provide

618
00:25:23,919 --> 00:25:25,919
the ticket and now we have this ticket

619
00:25:25,919 --> 00:25:28,400
in memory and we can we are able to

620
00:25:28,400 --> 00:25:31,120
access remote services

621
00:25:31,120 --> 00:25:34,080
and from windows event perspective as we

622
00:25:34,080 --> 00:25:36,559
mentioned before we will see only this

623
00:25:36,559 --> 00:25:39,279
kerberos service ticket was requested

624
00:25:39,279 --> 00:25:42,400
so what we can look for from detection

625
00:25:42,400 --> 00:25:43,919
perspective is

626
00:25:43,919 --> 00:25:47,120
requesting for tgs or

627
00:25:47,120 --> 00:25:49,919
requesting for tgt renewal

628
00:25:49,919 --> 00:25:52,960
events without pure

629
00:25:52,960 --> 00:25:57,279
tgt requests so basically you have tgs

630
00:25:57,279 --> 00:25:58,720
requests

631
00:25:58,720 --> 00:26:01,440
or you have digit renewal requests but

632
00:26:01,440 --> 00:26:03,520
you won't see in the past

633
00:26:03,520 --> 00:26:06,480
and this pass can be up to 10 hours

634
00:26:06,480 --> 00:26:08,159
uh

635
00:26:08,159 --> 00:26:11,760
tgt events uh was requested events

636
00:26:11,760 --> 00:26:15,039
uh from my experience uh in this case i

637
00:26:15,039 --> 00:26:17,440
tried to somehow compile them together

638
00:26:17,440 --> 00:26:18,240
but

639
00:26:18,240 --> 00:26:20,720
uh from production perspective it's

640
00:26:20,720 --> 00:26:21,840
better to

641
00:26:21,840 --> 00:26:23,840
split both of these and make separate

642
00:26:23,840 --> 00:26:26,159
detections for

643
00:26:26,159 --> 00:26:28,720
cases where you have djs without prior

644
00:26:28,720 --> 00:26:31,760
tgt or you have tgt renewal without pure

645
00:26:31,760 --> 00:26:34,720
tgd requests

646
00:26:35,440 --> 00:26:36,880
golden tickets

647
00:26:36,880 --> 00:26:38,400
so we

648
00:26:38,400 --> 00:26:40,640
call so how golden tickets works so

649
00:26:40,640 --> 00:26:42,960
basically as we mentioned before in

650
00:26:42,960 --> 00:26:44,640
cambridge authentication we have

651
00:26:44,640 --> 00:26:47,039
kerberos uh we have request tgt

652
00:26:47,039 --> 00:26:49,200
providing our cache and we receive this

653
00:26:49,200 --> 00:26:52,080
hdd which is encrypted with kerberos tgt

654
00:26:52,080 --> 00:26:54,159
account hash

655
00:26:54,159 --> 00:26:57,760
and when if we know this hash we can

656
00:26:57,760 --> 00:27:00,640
forge ourselves like different tickets

657
00:27:00,640 --> 00:27:02,559
for different accounts for for any

658
00:27:02,559 --> 00:27:07,440
accounts even not existing account to be

659
00:27:07,440 --> 00:27:08,400
true

660
00:27:08,400 --> 00:27:09,919
and uh

661
00:27:09,919 --> 00:27:11,679
from

662
00:27:11,679 --> 00:27:14,720
this attack perspective you will still

663
00:27:14,720 --> 00:27:16,640
from a windows event perspective you'll

664
00:27:16,640 --> 00:27:19,200
see that there is no events

665
00:27:19,200 --> 00:27:22,320
for asking for tgt as in

666
00:27:22,320 --> 00:27:24,559
past the ticket attack

667
00:27:24,559 --> 00:27:26,559
you'll see just requesting for to js

668
00:27:26,559 --> 00:27:29,440
service some remote services

669
00:27:29,440 --> 00:27:33,279
which you are trying to now access

670
00:27:33,360 --> 00:27:36,000
uh so how we can get this camera to gt

671
00:27:36,000 --> 00:27:38,480
account hash uh you can use dc sync and

672
00:27:38,480 --> 00:27:40,640
we will uh talk about

673
00:27:40,640 --> 00:27:42,640
about that attack later

674
00:27:42,640 --> 00:27:44,480
uh or you can just

675
00:27:44,480 --> 00:27:47,760
dump ntds did or else process dump on

676
00:27:47,760 --> 00:27:50,320
your domain controllers as alternatives

677
00:27:50,320 --> 00:27:52,720
basically you just collect this hash

678
00:27:52,720 --> 00:27:55,200
you need domain seat

679
00:27:55,200 --> 00:27:57,840
and domain as it's all and you can use

680
00:27:57,840 --> 00:27:59,279
mimiket's

681
00:27:59,279 --> 00:28:01,279
kerberos golden module

682
00:28:01,279 --> 00:28:03,679
and you can just issue this ticket and

683
00:28:03,679 --> 00:28:07,120
perform positive ticket attack to

684
00:28:07,120 --> 00:28:09,360
import this ticket and becomes this evil

685
00:28:09,360 --> 00:28:10,880
admin

686
00:28:10,880 --> 00:28:13,279
from windows lock perspective all you

687
00:28:13,279 --> 00:28:16,399
see is just successful log logging on

688
00:28:16,399 --> 00:28:17,279
your

689
00:28:17,279 --> 00:28:19,679
destination host which you are trying to

690
00:28:19,679 --> 00:28:23,600
access and kerberos serious ticket

691
00:28:23,600 --> 00:28:26,880
uh was requested as we mentioned so

692
00:28:26,880 --> 00:28:28,960
basically golden tickets is just another

693
00:28:28,960 --> 00:28:32,480
ticket for your pizza ticket detections

694
00:28:32,480 --> 00:28:35,440
uh now let's talk about silver tickets

695
00:28:35,440 --> 00:28:37,919
so silver tickets it's in kind of very

696
00:28:37,919 --> 00:28:39,279
similar to

697
00:28:39,279 --> 00:28:41,279
golden tickets but now you are not

698
00:28:41,279 --> 00:28:43,120
trying to target

699
00:28:43,120 --> 00:28:46,159
kerberos service itself you're trying to

700
00:28:46,159 --> 00:28:49,200
attack some uh service

701
00:28:49,200 --> 00:28:50,480
account

702
00:28:50,480 --> 00:28:52,399
passwords you are like bracket for

703
00:28:52,399 --> 00:28:56,559
example hash s4 and now you can issue

704
00:28:56,559 --> 00:28:59,039
different dgs for that specific ticket

705
00:28:59,039 --> 00:29:01,360
and with that you can issue for example

706
00:29:01,360 --> 00:29:03,760
for as well for not existing user or

707
00:29:03,760 --> 00:29:07,200
grant yourself uh higher privileges

708
00:29:07,200 --> 00:29:08,640
but uh

709
00:29:08,640 --> 00:29:11,520
if we trying to compare two cases when

710
00:29:11,520 --> 00:29:13,520
we have default authentication

711
00:29:13,520 --> 00:29:16,880
and silver tickets you will skip all

712
00:29:16,880 --> 00:29:18,320
that communication with your domain

713
00:29:18,320 --> 00:29:20,880
controller you just craft your tgs and

714
00:29:20,880 --> 00:29:22,880
you will just present djs to your remote

715
00:29:22,880 --> 00:29:25,039
service

716
00:29:25,039 --> 00:29:27,360
uh for example in case of mimikaz we use

717
00:29:27,360 --> 00:29:30,000
the same module kerberos golden we

718
00:29:30,000 --> 00:29:33,200
provide service we are trying to you you

719
00:29:33,200 --> 00:29:37,120
use to issue this djs for

720
00:29:37,120 --> 00:29:39,200
and that's all for example in this case

721
00:29:39,200 --> 00:29:42,480
we issued a ticket for user called darth

722
00:29:42,480 --> 00:29:44,960
kitios and performance pass the ticket

723
00:29:44,960 --> 00:29:45,760
but

724
00:29:45,760 --> 00:29:48,240
pass the ticket in case of tgs is much

725
00:29:48,240 --> 00:29:50,480
harder to detect

726
00:29:50,480 --> 00:29:52,880
and if when we try to access this remote

727
00:29:52,880 --> 00:29:55,440
share we are were successfully able to

728
00:29:55,440 --> 00:29:56,480
access it

729
00:29:56,480 --> 00:29:57,520
so

730
00:29:57,520 --> 00:29:59,440
silver ticket direction is very really

731
00:29:59,440 --> 00:30:01,919
hard so what you can look for is for

732
00:30:01,919 --> 00:30:04,000
example look for non-existent users or

733
00:30:04,000 --> 00:30:05,760
look for a normally privileged

734
00:30:05,760 --> 00:30:07,200
assignment event

735
00:30:07,200 --> 00:30:10,320
in case of a non-existent user you can

736
00:30:10,320 --> 00:30:13,120
just compile list of user creation

737
00:30:13,120 --> 00:30:16,559
events for example 4720 events

738
00:30:16,559 --> 00:30:19,039
and compare it to your logon events for

739
00:30:19,039 --> 00:30:21,360
example for past 24 days et cetera et

740
00:30:21,360 --> 00:30:23,840
cetera

741
00:30:24,320 --> 00:30:26,159
in case a normally privileged assigned

742
00:30:26,159 --> 00:30:29,679
device is also you compare like previous

743
00:30:29,679 --> 00:30:31,760
span of time for example

744
00:30:31,760 --> 00:30:34,000
uh previous to today

745
00:30:34,000 --> 00:30:36,320
to today for last seven days and you

746
00:30:36,320 --> 00:30:38,159
compare to time

747
00:30:38,159 --> 00:30:41,200
for last 24 hours and look for this

748
00:30:41,200 --> 00:30:43,440
uh privilege assignment events like

749
00:30:43,440 --> 00:30:46,559
46.72 and if you discover that that's

750
00:30:46,559 --> 00:30:50,399
probably something uh suspicious is

751
00:30:50,399 --> 00:30:52,480
in your network

752
00:30:52,480 --> 00:30:55,360
constraint and unconstrained delegation

753
00:30:55,360 --> 00:30:57,919
so unconstrained delegation is used to

754
00:30:57,919 --> 00:30:59,360
grant

755
00:30:59,360 --> 00:31:01,360
resource

756
00:31:01,360 --> 00:31:02,799
permissions

757
00:31:02,799 --> 00:31:05,039
to authenticate to another resource on

758
00:31:05,039 --> 00:31:07,679
behalf of uh any user in case of

759
00:31:07,679 --> 00:31:10,640
constrained delegation uh example would

760
00:31:10,640 --> 00:31:12,640
be web server needs access to database

761
00:31:12,640 --> 00:31:14,480
server to be able to make changes on

762
00:31:14,480 --> 00:31:15,760
users behalf

763
00:31:15,760 --> 00:31:18,480
so when we have this default kerberos

764
00:31:18,480 --> 00:31:21,519
sophistication we requested here ctg we

765
00:31:21,519 --> 00:31:23,600
request tgs we receive djs and we

766
00:31:23,600 --> 00:31:26,799
present the hds to our remote server in

767
00:31:26,799 --> 00:31:29,440
case of unconstrained delegation when

768
00:31:29,440 --> 00:31:31,919
we're trying to request djs for server

769
00:31:31,919 --> 00:31:35,200
presenting our tdt we will get this dgs

770
00:31:35,200 --> 00:31:38,399
as well as for double tgt

771
00:31:38,399 --> 00:31:41,120
uh with which are encrypted with server

772
00:31:41,120 --> 00:31:42,320
account hash

773
00:31:42,320 --> 00:31:45,279
and then this remote service will be

774
00:31:45,279 --> 00:31:47,760
able to provide this affordable tgt to

775
00:31:47,760 --> 00:31:50,080
authenticate the remote servers uh

776
00:31:50,080 --> 00:31:52,799
making this similar approach

777
00:31:52,799 --> 00:31:55,679
from like a more human readable

778
00:31:55,679 --> 00:31:57,039
perspective

779
00:31:57,039 --> 00:32:00,000
uh yeah to now to enable this you just

780
00:32:00,000 --> 00:32:01,919
need to set delegation try this computer

781
00:32:01,919 --> 00:32:04,080
for the question to any servers

782
00:32:04,080 --> 00:32:06,640
uh it's basically just caching all tgt

783
00:32:06,640 --> 00:32:09,360
in memory and if you can

784
00:32:09,360 --> 00:32:11,039
access this uh

785
00:32:11,039 --> 00:32:12,840
computer and make

786
00:32:12,840 --> 00:32:15,760
some elevate your privileges and dump

787
00:32:15,760 --> 00:32:17,760
all these tickets you can just move

788
00:32:17,760 --> 00:32:20,399
laterally as you wish and in case some

789
00:32:20,399 --> 00:32:22,320
for example domain administrator

790
00:32:22,320 --> 00:32:24,799
accesses this share

791
00:32:24,799 --> 00:32:26,840
he will

792
00:32:26,840 --> 00:32:30,240
uh you will catch his tgt as well so

793
00:32:30,240 --> 00:32:31,760
that's like the bad

794
00:32:31,760 --> 00:32:32,880
it's bad

795
00:32:32,880 --> 00:32:35,039
uh what you can do about unconstrained

796
00:32:35,039 --> 00:32:38,080
location detection prevention so so from

797
00:32:38,080 --> 00:32:40,000
detection perspective

798
00:32:40,000 --> 00:32:43,440
uh you can look for these patterns for

799
00:32:43,440 --> 00:32:46,399
ldap filtering or for command line

800
00:32:46,399 --> 00:32:49,360
searching for this uh trust for

801
00:32:49,360 --> 00:32:51,519
delegation equal true activity for

802
00:32:51,519 --> 00:32:54,080
example you just look for uh with regex

803
00:32:54,080 --> 00:32:56,480
for this same glass filter like tres

804
00:32:56,480 --> 00:32:59,039
trusted relegation equal true or

805
00:32:59,039 --> 00:33:01,279
ldap account

806
00:33:01,279 --> 00:33:03,440
or you can uh

807
00:33:03,440 --> 00:33:05,120
unconstrain the legation just another

808
00:33:05,120 --> 00:33:06,640
way to get tickets for positive ticket

809
00:33:06,640 --> 00:33:08,559
detection so that's like the third time

810
00:33:08,559 --> 00:33:09,679
this

811
00:33:09,679 --> 00:33:11,760
detection works for us

812
00:33:11,760 --> 00:33:14,399
and as prevention is recommended to use

813
00:33:14,399 --> 00:33:16,000
constrained delegation

814
00:33:16,000 --> 00:33:18,000
constraint delegation for construct

815
00:33:18,000 --> 00:33:21,519
delegation we do not specify that any

816
00:33:21,519 --> 00:33:25,039
service can use any

817
00:33:25,039 --> 00:33:27,039
this account can be used for any service

818
00:33:27,039 --> 00:33:31,519
now we specify a list of spns

819
00:33:31,519 --> 00:33:32,720
which

820
00:33:32,720 --> 00:33:34,399
will be provided in case the service

821
00:33:34,399 --> 00:33:36,960
account as subsets is accepted for this

822
00:33:36,960 --> 00:33:40,240
specific experience for delegation

823
00:33:40,240 --> 00:33:44,159
and as a downfall and there are cases

824
00:33:44,159 --> 00:33:45,919
when um

825
00:33:45,919 --> 00:33:47,840
any accounts that have service principle

826
00:33:47,840 --> 00:33:50,480
name set in their ms ds allowed to

827
00:33:50,480 --> 00:33:52,880
delegate to property can pretend to be

828
00:33:52,880 --> 00:33:54,960
any user in the domain to those specific

829
00:33:54,960 --> 00:33:58,640
sbns and that's the tricky part

830
00:33:58,640 --> 00:34:00,960
so before we dive into that attack we

831
00:34:00,960 --> 00:34:02,159
need

832
00:34:02,159 --> 00:34:05,200
to explain uh how this delegation works

833
00:34:05,200 --> 00:34:07,519
because by default to make controller

834
00:34:07,519 --> 00:34:08,560
cannot

835
00:34:08,560 --> 00:34:10,719
make the delegation by itself that's why

836
00:34:10,719 --> 00:34:12,960
windows develops this service for user

837
00:34:12,960 --> 00:34:16,159
extensions to proxy and to self so how

838
00:34:16,159 --> 00:34:17,760
they work

839
00:34:17,760 --> 00:34:21,199
for proxy you basically

840
00:34:21,199 --> 00:34:24,079
when you perform this default uh cable

841
00:34:24,079 --> 00:34:25,839
authentication to remote resource and

842
00:34:25,839 --> 00:34:28,639
you want from resource service a to

843
00:34:28,639 --> 00:34:30,560
server access service b

844
00:34:30,560 --> 00:34:32,800
what you are going to do is present your

845
00:34:32,800 --> 00:34:34,719
tgs to

846
00:34:34,719 --> 00:34:35,839
this service

847
00:34:35,839 --> 00:34:38,480
a will present your tgs to your domain

848
00:34:38,480 --> 00:34:40,399
controller it will validate if you are

849
00:34:40,399 --> 00:34:43,520
allowed to delegate to specific service

850
00:34:43,520 --> 00:34:44,399
b

851
00:34:44,399 --> 00:34:47,040
if it's true you will receive djs ticket

852
00:34:47,040 --> 00:34:48,879
for service b

853
00:34:48,879 --> 00:34:50,719
and for self

854
00:34:50,719 --> 00:34:53,359
service for user accenture to self

855
00:34:53,359 --> 00:34:55,760
is basically for cases when you don't

856
00:34:55,760 --> 00:34:57,200
have a

857
00:34:57,200 --> 00:34:59,680
kerb authentication for some reason in

858
00:34:59,680 --> 00:35:01,440
that case to

859
00:35:01,440 --> 00:35:03,599
work properly a

860
00:35:03,599 --> 00:35:07,119
service a needs like tgt ggs for user

861
00:35:07,119 --> 00:35:09,119
which is trying to authenticate in

862
00:35:09,119 --> 00:35:12,320
non-kerberos way in that case it will

863
00:35:12,320 --> 00:35:15,040
request djs for that specific user like

864
00:35:15,040 --> 00:35:17,920
on to itself

865
00:35:17,920 --> 00:35:21,520
and in that case if we have this user

866
00:35:21,520 --> 00:35:24,800
which can be delegated for service a

867
00:35:24,800 --> 00:35:25,920
we can

868
00:35:25,920 --> 00:35:28,839
which is tricky part uh request

869
00:35:28,839 --> 00:35:32,720
dgs on behalf of other users for example

870
00:35:32,720 --> 00:35:34,320
on behalf of administrator and

871
00:35:34,320 --> 00:35:37,119
impersonate this administrator

872
00:35:37,119 --> 00:35:40,800
and if we combine both of these

873
00:35:40,800 --> 00:35:42,800
extensions

874
00:35:42,800 --> 00:35:45,839
we have a constrained delegation attack

875
00:35:45,839 --> 00:35:48,560
so first of all we need to get this

876
00:35:48,560 --> 00:35:51,839
in this case backup user tgd

877
00:35:51,839 --> 00:35:54,240
which is allowed to

878
00:35:54,240 --> 00:35:57,040
delegate to for example dub and

879
00:35:57,040 --> 00:36:00,640
smb and then we perform self for

880
00:36:00,640 --> 00:36:02,640
uh user

881
00:36:02,640 --> 00:36:06,480
self and the proxy uh to impersonate uh

882
00:36:06,480 --> 00:36:08,560
our user walden evans

883
00:36:08,560 --> 00:36:10,079
basically with

884
00:36:10,079 --> 00:36:12,720
two combination of these two uh

885
00:36:12,720 --> 00:36:13,920
extensions

886
00:36:13,920 --> 00:36:16,320
and in that case we were able for

887
00:36:16,320 --> 00:36:18,960
example to impersonate uh

888
00:36:18,960 --> 00:36:20,800
user weldon evans

889
00:36:20,800 --> 00:36:23,119
for that specific spn for example so we

890
00:36:23,119 --> 00:36:25,280
can

891
00:36:25,280 --> 00:36:28,720
impersonate any user for the specific

892
00:36:28,720 --> 00:36:29,680
service

893
00:36:29,680 --> 00:36:32,480
so what we can detect and prevent here

894
00:36:32,480 --> 00:36:33,280
so

895
00:36:33,280 --> 00:36:35,599
for detection perspective we can look as

896
00:36:35,599 --> 00:36:38,320
well for some ldap filters for example

897
00:36:38,320 --> 00:36:41,520
or patterns msds allowed to delegate to

898
00:36:41,520 --> 00:36:42,720
zero

899
00:36:42,720 --> 00:36:44,000
equal to

900
00:36:44,000 --> 00:36:46,880
asterix to look for all accounts and we

901
00:36:46,880 --> 00:36:49,599
can look for this activity

902
00:36:49,599 --> 00:36:51,440
or from provisional perspective we can

903
00:36:51,440 --> 00:36:54,320
put a user into protected users group

904
00:36:54,320 --> 00:36:55,680
or checking the option account is

905
00:36:55,680 --> 00:36:58,160
sensitive and cannot be delegated

906
00:36:58,160 --> 00:37:00,720
and another option to detect this it

907
00:37:00,720 --> 00:37:02,720
will generate

908
00:37:02,720 --> 00:37:05,200
with the first step

909
00:37:05,200 --> 00:37:07,680
as for dhd

910
00:37:07,680 --> 00:37:10,879
we have the same

911
00:37:12,000 --> 00:37:14,240
behavior network behavior as we did when

912
00:37:14,240 --> 00:37:17,680
we had overpass the cache for rubios

913
00:37:17,680 --> 00:37:20,000
when we have communication with domain

914
00:37:20,000 --> 00:37:22,320
controller and we can detect this like

915
00:37:22,320 --> 00:37:25,440
detection from unknown process to

916
00:37:25,440 --> 00:37:27,359
communication from a known process to

917
00:37:27,359 --> 00:37:29,520
our domain controller so that's a good

918
00:37:29,520 --> 00:37:32,000
spot to detect this activity

919
00:37:32,000 --> 00:37:34,720
this is sync ndc shadow

920
00:37:34,720 --> 00:37:37,040
so adversary may try to

921
00:37:37,040 --> 00:37:39,280
read your active directory

922
00:37:39,280 --> 00:37:42,320
uh data using uh windows domain

923
00:37:42,320 --> 00:37:45,680
controller api or call grs get and see

924
00:37:45,680 --> 00:37:49,200
changes to simulate this process of

925
00:37:49,200 --> 00:37:51,520
domain controller replication process

926
00:37:51,520 --> 00:37:53,040
and in that case if you are like a

927
00:37:53,040 --> 00:37:54,720
member of mini strategy made means

928
00:37:54,720 --> 00:37:56,640
enterprise that means you can perform

929
00:37:56,640 --> 00:37:59,839
and access this api and example reads

930
00:37:59,839 --> 00:38:02,320
password hashes for kerberos tgt

931
00:38:02,320 --> 00:38:04,160
administrator

932
00:38:04,160 --> 00:38:07,119
and that's how it performed with uh alsa

933
00:38:07,119 --> 00:38:10,240
dumped dc sync model for mimikatz and

934
00:38:10,240 --> 00:38:13,520
you can detect it's by basically by two

935
00:38:13,520 --> 00:38:15,359
approaches from network perspective you

936
00:38:15,359 --> 00:38:17,839
can use zig plus bizarre plugin which is

937
00:38:17,839 --> 00:38:19,920
like really awesome they develop a lot

938
00:38:19,920 --> 00:38:23,760
of api resolution dcr pc resolutions

939
00:38:23,760 --> 00:38:25,760
which you can utilize to build your

940
00:38:25,760 --> 00:38:27,440
detections and you can just look for

941
00:38:27,440 --> 00:38:30,000
this specific operation drs get and see

942
00:38:30,000 --> 00:38:30,960
changes

943
00:38:30,960 --> 00:38:33,200
from windows

944
00:38:33,200 --> 00:38:35,640
event perspective you can just look for

945
00:38:35,640 --> 00:38:38,640
4662 events which is operation made on

946
00:38:38,640 --> 00:38:41,839
object and this property id

947
00:38:41,839 --> 00:38:44,079
for ds replication gate changes so by

948
00:38:44,079 --> 00:38:46,480
default in splunk at least it's

949
00:38:46,480 --> 00:38:47,839
blacklisted

950
00:38:47,839 --> 00:38:50,560
for all of these events but you can just

951
00:38:50,560 --> 00:38:53,280
change that uh fill uh

952
00:38:53,280 --> 00:38:56,480
input field from this regex to this one

953
00:38:56,480 --> 00:38:58,320
and you will collect all these events in

954
00:38:58,320 --> 00:39:01,280
your for example splunk

955
00:39:01,280 --> 00:39:03,040
roach the mind controller

956
00:39:03,040 --> 00:39:06,240
for in this case we have dc shadow

957
00:39:06,240 --> 00:39:08,880
attack and we are trying to

958
00:39:08,880 --> 00:39:10,400
uh

959
00:39:10,400 --> 00:39:12,960
look like very similar we're trying to

960
00:39:12,960 --> 00:39:16,560
impersonate or simulate behavior of dc

961
00:39:16,560 --> 00:39:19,520
and in this case we are not just able to

962
00:39:19,520 --> 00:39:21,839
read data from domain controller we are

963
00:39:21,839 --> 00:39:23,520
able to

964
00:39:23,520 --> 00:39:26,000
push our own data or change it data

965
00:39:26,000 --> 00:39:28,480
inside of our active directory

966
00:39:28,480 --> 00:39:31,520
so when we performing dc shadow is

967
00:39:31,520 --> 00:39:33,839
basically we need

968
00:39:33,839 --> 00:39:36,480
high enough privileges to perform this

969
00:39:36,480 --> 00:39:39,920
attack and when we have this access we

970
00:39:39,920 --> 00:39:42,800
can for example change simple user or

971
00:39:42,800 --> 00:39:45,760
group from example not admin to domain

972
00:39:45,760 --> 00:39:47,760
administrator group

973
00:39:47,760 --> 00:39:50,880
and access remote resources

974
00:39:50,880 --> 00:39:53,920
to detect this we can use utilize zik

975
00:39:53,920 --> 00:39:57,280
and bizarre as well with this according

976
00:39:57,280 --> 00:40:00,240
operation for drs at entry audio recipe

977
00:40:00,240 --> 00:40:03,359
replica ad or we can look for events

978
00:40:03,359 --> 00:40:05,280
4722

979
00:40:05,280 --> 00:40:06,160
where

980
00:40:06,160 --> 00:40:09,680
service principal name was added with

981
00:40:09,680 --> 00:40:10,480
this

982
00:40:10,480 --> 00:40:12,400
prefix for global catalog which is

983
00:40:12,400 --> 00:40:14,720
unique for your domain controllers

984
00:40:14,720 --> 00:40:16,560
and if this doesn't match with your

985
00:40:16,560 --> 00:40:18,880
asset inventory then this probably looks

986
00:40:18,880 --> 00:40:21,839
something like dc shadow attack

987
00:40:21,839 --> 00:40:24,400
so summary uh congrats now you are

988
00:40:24,400 --> 00:40:25,680
kerberos guru

989
00:40:25,680 --> 00:40:28,000
how did old up queries catch most of

990
00:40:28,000 --> 00:40:29,760
reconnaissance activity remove

991
00:40:29,760 --> 00:40:32,079
administrator permission from

992
00:40:32,079 --> 00:40:34,480
users from their extensions because

993
00:40:34,480 --> 00:40:36,640
mimikaz

994
00:40:36,640 --> 00:40:39,200
uses ins pass the hashes or some

995
00:40:39,200 --> 00:40:41,680
overpass the caches or like this uh

996
00:40:41,680 --> 00:40:42,720
different

997
00:40:42,720 --> 00:40:45,760
uh golden ticket stuff so

998
00:40:45,760 --> 00:40:48,000
you you need to make this mimikaz run

999
00:40:48,000 --> 00:40:50,000
harder so remove administrator

1000
00:40:50,000 --> 00:40:53,359
permission from your users use rank but

1001
00:40:53,359 --> 00:40:55,760
strong passwords for any accounts

1002
00:40:55,760 --> 00:40:59,040
especially for sbns so they won't be

1003
00:40:59,040 --> 00:41:01,200
so easy to crack

1004
00:41:01,200 --> 00:41:03,040
by default ticket related text will

1005
00:41:03,040 --> 00:41:04,960
downgrade your encryption encryption

1006
00:41:04,960 --> 00:41:08,640
algorithms look for those rc4 or

1007
00:41:08,640 --> 00:41:13,119
17 hex values inside your logs and last

1008
00:41:13,119 --> 00:41:15,920
but not least around bloodhound and plum

1009
00:41:15,920 --> 00:41:16,880
count

1010
00:41:16,880 --> 00:41:19,119
to discover those

1011
00:41:19,119 --> 00:41:21,720
windows active directory

1012
00:41:21,720 --> 00:41:24,319
misconfiguration or some hidden passes

1013
00:41:24,319 --> 00:41:26,800
before like attackers do

1014
00:41:26,800 --> 00:41:28,800
so thank you for

1015
00:41:28,800 --> 00:41:29,599
uh

1016
00:41:29,599 --> 00:41:31,760
listening to my talk hope you are

1017
00:41:31,760 --> 00:41:34,319
enjoyed that so do you have any

1018
00:41:34,319 --> 00:41:35,520
questions

1019
00:41:35,520 --> 00:41:37,119
okay

1020
00:41:37,119 --> 00:41:39,440
thank you for

1021
00:41:39,440 --> 00:41:42,960
your great talk and now we are ready for

1022
00:41:42,960 --> 00:41:45,599
questions and answers let me check

1023
00:41:45,599 --> 00:41:46,640
whether we

1024
00:41:46,640 --> 00:41:49,839
have anything right now

1025
00:41:52,400 --> 00:41:54,960
okay not yet

1026
00:41:54,960 --> 00:41:55,839
so

1027
00:41:55,839 --> 00:41:57,599
i remind you the rules

1028
00:41:57,599 --> 00:41:59,440
if you're in zoom you can raise your

1029
00:41:59,440 --> 00:42:01,599
hand i will give you the mic and you

1030
00:42:01,599 --> 00:42:02,560
will

1031
00:42:02,560 --> 00:42:04,160
ask your question

1032
00:42:04,160 --> 00:42:05,359
out loud

1033
00:42:05,359 --> 00:42:08,960
if you are not in zoom or if you

1034
00:42:08,960 --> 00:42:11,839
don't want to take the mic

1035
00:42:11,839 --> 00:42:13,440
uh

1036
00:42:13,440 --> 00:42:15,040
just type it in

1037
00:42:15,040 --> 00:42:19,040
q a section in zoom or

1038
00:42:20,079 --> 00:42:24,839
chat in the live stream live stream

1039
00:42:33,520 --> 00:42:35,520
normally it takes a few minutes

1040
00:42:35,520 --> 00:42:37,040
for people

1041
00:42:37,040 --> 00:42:39,520
to type it in come up with a question

1042
00:42:39,520 --> 00:42:41,280
type it in then

1043
00:42:41,280 --> 00:42:42,640
hit enter

1044
00:42:42,640 --> 00:42:45,920
yeah yeah a few seconds for transmission

1045
00:42:45,920 --> 00:42:48,400
and then we finally

1046
00:42:48,400 --> 00:42:50,880
okay so uh

1047
00:42:50,880 --> 00:42:53,520
my question first i guess

1048
00:42:53,520 --> 00:42:56,160
i have the priority here so

1049
00:42:56,160 --> 00:42:58,800
okay is it still valid

1050
00:42:58,800 --> 00:43:00,240
uh which one

1051
00:43:00,240 --> 00:43:01,839
i mean

1052
00:43:01,839 --> 00:43:03,040
all of it

1053
00:43:03,040 --> 00:43:05,920
so intellectual like is it yeah isn't it

1054
00:43:05,920 --> 00:43:08,000
ancient history but because for me it's

1055
00:43:08,000 --> 00:43:09,839
like you know i was

1056
00:43:09,839 --> 00:43:12,720
i think your age but i did the same

1057
00:43:12,720 --> 00:43:15,040
stuff

1058
00:43:15,119 --> 00:43:18,880
okay so uh unsurprisingly uh

1059
00:43:18,880 --> 00:43:22,079
i saw like couple months ago a case

1060
00:43:22,079 --> 00:43:25,760
where the power pass the hash was

1061
00:43:25,760 --> 00:43:27,119
abused

1062
00:43:27,119 --> 00:43:29,760
like for example so they requested this

1063
00:43:29,760 --> 00:43:32,960
uh tgd ticket with like downgraded uh

1064
00:43:32,960 --> 00:43:35,599
encryption so that's how probably we

1065
00:43:35,599 --> 00:43:37,119
detected that

1066
00:43:37,119 --> 00:43:40,000
and kerberosync also is

1067
00:43:40,000 --> 00:43:41,520
used

1068
00:43:41,520 --> 00:43:42,480
uh

1069
00:43:42,480 --> 00:43:44,880
as the ticket of course should be

1070
00:43:44,880 --> 00:43:46,960
also used because it's like it's like

1071
00:43:46,960 --> 00:43:49,119
for golden tickets for best tickets

1072
00:43:49,119 --> 00:43:51,440
simple pass the ticket or for example

1073
00:43:51,440 --> 00:43:53,200
this one unconstrained location you have

1074
00:43:53,200 --> 00:43:55,200
like the same the same as the ticket

1075
00:43:55,200 --> 00:43:56,560
action

1076
00:43:56,560 --> 00:43:59,280
and for of course like something like dc

1077
00:43:59,280 --> 00:44:00,160
sync

1078
00:44:00,160 --> 00:44:02,480
i guess it should be valid as well to

1079
00:44:02,480 --> 00:44:04,319
get some credentials but

1080
00:44:04,319 --> 00:44:07,520
they probably moves to something better

1081
00:44:07,520 --> 00:44:10,480
like just dump a process memory from

1082
00:44:10,480 --> 00:44:14,079
your domain controller so

1083
00:44:14,800 --> 00:44:16,319
what can you do

1084
00:44:16,319 --> 00:44:19,200
like what's the first thing that any

1085
00:44:19,200 --> 00:44:22,319
awesome inactive directory can do so the

1086
00:44:22,319 --> 00:44:24,400
best way of course is like you know

1087
00:44:24,400 --> 00:44:26,800
layered security so you shouldn't like

1088
00:44:26,800 --> 00:44:29,680
uh depend on some specific for example

1089
00:44:29,680 --> 00:44:31,280
otherwise no no no no

1090
00:44:31,280 --> 00:44:32,560
no

1091
00:44:32,560 --> 00:44:35,359
what can you do like you know like first

1092
00:44:35,359 --> 00:44:38,240
thing that you can do in order to start

1093
00:44:38,240 --> 00:44:39,920
yeah you can learn all this stuff you

1094
00:44:39,920 --> 00:44:43,280
can okay so documentation uh see some

1095
00:44:43,280 --> 00:44:45,440
talks go see some talks at conferences

1096
00:44:45,440 --> 00:44:46,240
right

1097
00:44:46,240 --> 00:44:48,079
but if you want to do something really

1098
00:44:48,079 --> 00:44:52,160
quickly what can you do so as i remember

1099
00:44:52,160 --> 00:44:54,800
uh microsoft at least developed their

1100
00:44:54,800 --> 00:44:58,160
like own sandbox for your lsas

1101
00:44:58,160 --> 00:45:00,560
process where you just put you for

1102
00:45:00,560 --> 00:45:02,880
example some separate virtualization

1103
00:45:02,880 --> 00:45:05,520
environment so it shouldn't be so easy

1104
00:45:05,520 --> 00:45:08,720
for example mimic s to dump your hashes

1105
00:45:08,720 --> 00:45:11,040
as then in case for example those

1106
00:45:11,040 --> 00:45:13,200
attacks on controlled delegation because

1107
00:45:13,200 --> 00:45:15,440
they are better than unconstrained

1108
00:45:15,440 --> 00:45:18,319
you should either use resource-based

1109
00:45:18,319 --> 00:45:20,880
uh construct delegation where you like

1110
00:45:20,880 --> 00:45:22,160
shift your

1111
00:45:22,160 --> 00:45:24,240
authentication to specific service in

1112
00:45:24,240 --> 00:45:26,880
this case or you should just mark them

1113
00:45:26,880 --> 00:45:29,760
like do not accept for delegation

1114
00:45:29,760 --> 00:45:30,880
and

1115
00:45:30,880 --> 00:45:33,040
yeah so for

1116
00:45:33,040 --> 00:45:34,880
best tickets

1117
00:45:34,880 --> 00:45:36,319
of course you should have some

1118
00:45:36,319 --> 00:45:39,119
detections in place and just look for

1119
00:45:39,119 --> 00:45:40,560
those patterns

1120
00:45:40,560 --> 00:45:43,280
for ldap uh related and reconstant

1121
00:45:43,280 --> 00:45:46,480
related activity uh like do your thing

1122
00:45:46,480 --> 00:45:49,520
first before others do you know

1123
00:45:49,520 --> 00:45:52,400
just run those sharp count the black

1124
00:45:52,400 --> 00:45:53,920
plump hound

1125
00:45:53,920 --> 00:45:57,839
before someone did that for you

1126
00:45:58,480 --> 00:46:00,800
is any like sanity

1127
00:46:00,800 --> 00:46:02,960
precautions like i don't know like i

1128
00:46:02,960 --> 00:46:04,960
don't know running pin castle once in a

1129
00:46:04,960 --> 00:46:07,599
while and see whether yes you know it's

1130
00:46:07,599 --> 00:46:08,640
like

1131
00:46:08,640 --> 00:46:13,200
degraded security gauging like again so

1132
00:46:13,200 --> 00:46:15,280
basically you just need to

1133
00:46:15,280 --> 00:46:17,839
constantly look for some gaps in your

1134
00:46:17,839 --> 00:46:20,319
environment gaps in your detections gaps

1135
00:46:20,319 --> 00:46:22,960
in your prevention capabilities even if

1136
00:46:22,960 --> 00:46:25,680
you don't have you know this like whole

1137
00:46:25,680 --> 00:46:28,079
huge budget for security you know you

1138
00:46:28,079 --> 00:46:30,240
can just install security onion which is

1139
00:46:30,240 --> 00:46:32,319
like free open source you can install

1140
00:46:32,319 --> 00:46:34,720
system one which is open source or some

1141
00:46:34,720 --> 00:46:36,240
sort of edr

1142
00:46:36,240 --> 00:46:38,240
and that's basically like what this

1143
00:46:38,240 --> 00:46:40,160
presentation was about like you can just

1144
00:46:40,160 --> 00:46:42,400
use native and free tools

1145
00:46:42,400 --> 00:46:45,920
to start detecting something

1146
00:46:46,240 --> 00:46:47,760
yeah

1147
00:46:47,760 --> 00:46:50,640
all nice advice okay so i think it will

1148
00:46:50,640 --> 00:46:52,560
be with us forever

1149
00:46:52,560 --> 00:46:54,400
as long as we have some on the ground

1150
00:46:54,400 --> 00:46:55,920
infrastructure and then they will

1151
00:46:55,920 --> 00:46:58,000
successfully migrate it to the cloud and

1152
00:46:58,000 --> 00:47:00,000
we will still be having it because yeah

1153
00:47:00,000 --> 00:47:02,400
the way they implemented the the way

1154
00:47:02,400 --> 00:47:06,480
they married kerberos and ldap

1155
00:47:06,480 --> 00:47:10,960
it still amazes me how it even works

1156
00:47:10,960 --> 00:47:12,960
yeah it's now there it's like a lot of

1157
00:47:12,960 --> 00:47:13,760
fun

1158
00:47:13,760 --> 00:47:15,680
yeah now there's like tricks where you

1159
00:47:15,680 --> 00:47:17,680
can have of course your

1160
00:47:17,680 --> 00:47:20,000
azure in the cloud but there's some sort

1161
00:47:20,000 --> 00:47:22,720
of example hybrid infrastructure and you

1162
00:47:22,720 --> 00:47:25,359
still can for example dump everything

1163
00:47:25,359 --> 00:47:26,640
from the cloud

1164
00:47:26,640 --> 00:47:29,280
using your like internal why why do you

1165
00:47:29,280 --> 00:47:30,880
think

1166
00:47:30,880 --> 00:47:32,800
what what are your thoughts about why it

1167
00:47:32,800 --> 00:47:34,319
so happens they

1168
00:47:34,319 --> 00:47:36,559
allowed for some backward compatibility

1169
00:47:36,559 --> 00:47:39,359
for hybrid cloud installations or what

1170
00:47:39,359 --> 00:47:40,720
i guess so

1171
00:47:40,720 --> 00:47:43,040
maybe they forgot that they are

1172
00:47:43,040 --> 00:47:44,960
microsoft and they just forget to

1173
00:47:44,960 --> 00:47:46,960
involve some security guys from their

1174
00:47:46,960 --> 00:47:48,720
teams too you know when you're

1175
00:47:48,720 --> 00:47:50,319
developing your product they have some

1176
00:47:50,319 --> 00:47:52,720
capability they have some capacity

1177
00:47:52,720 --> 00:47:54,559
they have some really cool security

1178
00:47:54,559 --> 00:47:56,640
people working for them just not looking

1179
00:47:56,640 --> 00:47:58,640
in this direction

1180
00:47:58,640 --> 00:48:01,040
yeah i don't know maybe this you know

1181
00:48:01,040 --> 00:48:03,920
there's like some deadlines or project

1182
00:48:03,920 --> 00:48:07,359
features which yeah have as usual and

1183
00:48:07,359 --> 00:48:10,160
they just misses that part or

1184
00:48:10,160 --> 00:48:12,160
it was like you know when you have this

1185
00:48:12,160 --> 00:48:14,640
like big zoo of different tools and

1186
00:48:14,640 --> 00:48:16,559
technologies it's probably not so

1187
00:48:16,559 --> 00:48:18,480
obvious how to fix them and they're

1188
00:48:18,480 --> 00:48:21,040
probably the best case to explain and

1189
00:48:21,040 --> 00:48:23,599
this is like this latest vulnerability

1190
00:48:23,599 --> 00:48:24,640
like

1191
00:48:24,640 --> 00:48:27,599
print nightmare or pull spool nightmare

1192
00:48:27,599 --> 00:48:30,000
angela's like 20 others

1193
00:48:30,000 --> 00:48:32,079
different vulnerabilities which games

1194
00:48:32,079 --> 00:48:34,720
one after after after every

1195
00:48:34,720 --> 00:48:36,240
because because finally someone pays

1196
00:48:36,240 --> 00:48:37,680
attention

1197
00:48:37,680 --> 00:48:39,680
yeah that's what happens when someone is

1198
00:48:39,680 --> 00:48:41,280
paying attention

1199
00:48:41,280 --> 00:48:43,599
yeah okay it looks like we don't have

1200
00:48:43,599 --> 00:48:45,680
any questions which is

1201
00:48:45,680 --> 00:48:46,720
which is

1202
00:48:46,720 --> 00:48:49,680
okay surprising but uh

1203
00:48:49,680 --> 00:48:51,680
maybe maybe that was uh enough

1204
00:48:51,680 --> 00:48:53,920
information and no additional i hope so

1205
00:48:53,920 --> 00:48:55,040
right

1206
00:48:55,040 --> 00:48:57,280
okay thank you bogdan very much uh thank

1207
00:48:57,280 --> 00:48:58,559
you guys

1208
00:48:58,559 --> 00:49:01,200
for today's workshop we have a lot of

1209
00:49:01,200 --> 00:49:03,200
positive feedback and everyone's

1210
00:49:03,200 --> 00:49:05,599
cheering you up it was really nice and

1211
00:49:05,599 --> 00:49:08,319
uh yeah my colleagues were

1212
00:49:08,319 --> 00:49:10,400
just sitting and watching because yeah

1213
00:49:10,400 --> 00:49:12,720
i'm glad to hear that

1214
00:49:12,720 --> 00:49:15,119
cool cool so keep up keep up with the

1215
00:49:15,119 --> 00:49:17,040
great walk hope to see you around

1216
00:49:17,040 --> 00:49:20,359
cheers guys

