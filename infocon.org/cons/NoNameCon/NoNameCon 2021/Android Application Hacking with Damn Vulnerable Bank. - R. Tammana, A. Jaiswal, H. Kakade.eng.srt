1
00:00:03,919 --> 00:00:05,759
hello all i would like to thank you for

2
00:00:05,759 --> 00:00:07,440
joining our session on android

3
00:00:07,440 --> 00:00:09,440
application hacking with damn vulnerable

4
00:00:09,440 --> 00:00:11,678
bank

5
00:00:12,320 --> 00:00:15,120
so this is how the ui of our vulnerable

6
00:00:15,120 --> 00:00:17,359
bank case

7
00:00:17,359 --> 00:00:18,800
with a huge number of android

8
00:00:18,800 --> 00:00:20,800
applications and the frequency with

9
00:00:20,800 --> 00:00:23,199
which we use them it is more important

10
00:00:23,199 --> 00:00:25,119
than ever for us to understand the

11
00:00:25,119 --> 00:00:26,960
security of android applications and

12
00:00:26,960 --> 00:00:29,359
their pitfalls

13
00:00:29,359 --> 00:00:31,760
we have many ways to learn and practice

14
00:00:31,760 --> 00:00:34,800
android application security as of today

15
00:00:34,800 --> 00:00:37,600
but most of the applications which you

16
00:00:37,600 --> 00:00:40,239
have cover only the basic os top 10

17
00:00:40,239 --> 00:00:41,760
vulnerabilities

18
00:00:41,760 --> 00:00:44,559
which are common in 2010

19
00:00:44,559 --> 00:00:46,320
none of them are updated to these

20
00:00:46,320 --> 00:00:48,640
standards of the latest dates

21
00:00:48,640 --> 00:00:50,239
so we would like to

22
00:00:50,239 --> 00:00:52,559
cover this gap and take the learning

23
00:00:52,559 --> 00:00:54,559
curve a notch higher with our dumb

24
00:00:54,559 --> 00:00:56,399
vulnerable bank

25
00:00:56,399 --> 00:00:58,559
this not only allows you to assess your

26
00:00:58,559 --> 00:01:00,960
theoretical skills but it also goes

27
00:01:00,960 --> 00:01:04,799
beyond regular os top 10 vulnerabilities

28
00:01:04,799 --> 00:01:06,400
it expects you to know more about

29
00:01:06,400 --> 00:01:08,240
android internals how the applications

30
00:01:08,240 --> 00:01:09,600
are built

31
00:01:09,600 --> 00:01:12,080
you have to do binary analysis and lot

32
00:01:12,080 --> 00:01:13,119
more

33
00:01:13,119 --> 00:01:14,720
we are sure it pushes your heart to the

34
00:01:14,720 --> 00:01:16,560
next level whoever is getting started

35
00:01:16,560 --> 00:01:19,280
with android application security

36
00:01:19,280 --> 00:01:22,479
without further ado let's get started

37
00:01:22,479 --> 00:01:24,799
so this is the outline of this talk an

38
00:01:24,799 --> 00:01:27,280
introduction to our core team

39
00:01:27,280 --> 00:01:28,799
why android

40
00:01:28,799 --> 00:01:31,040
via android applications why did we

41
00:01:31,040 --> 00:01:33,280
choose android application security

42
00:01:33,280 --> 00:01:34,479
threat vectors for the android

43
00:01:34,479 --> 00:01:37,680
applications introduction to our

44
00:01:37,680 --> 00:01:39,040
application

45
00:01:39,040 --> 00:01:43,439
hands-on session closing notes qa

46
00:01:43,759 --> 00:01:45,280
so the core team

47
00:01:45,280 --> 00:01:47,360
myself raven tamina

48
00:01:47,360 --> 00:01:49,119
i'm currently a senior security

49
00:01:49,119 --> 00:01:51,439
architect at emirates npd

50
00:01:51,439 --> 00:01:54,079
speaker and trainer at hat defcon hack

51
00:01:54,079 --> 00:01:55,600
in the box etc

52
00:01:55,600 --> 00:01:57,439
i'm an active open source contributor

53
00:01:57,439 --> 00:01:59,680
and i have added 17 000 plus lines of

54
00:01:59,680 --> 00:02:02,560
code to and math

55
00:02:02,640 --> 00:02:04,479
and the other

56
00:02:04,479 --> 00:02:06,320
key member of our co-team is actions

57
00:02:06,320 --> 00:02:08,080
jaiswal

58
00:02:08,080 --> 00:02:10,560
security engineer at cred he's an active

59
00:02:10,560 --> 00:02:13,120
ctf player he won several ctfs including

60
00:02:13,120 --> 00:02:16,560
hacker one hacky holidays and so on

61
00:02:16,560 --> 00:02:20,640
he is also a cynic red team member

62
00:02:20,640 --> 00:02:23,599
last but not least we have this kakade

63
00:02:23,599 --> 00:02:25,840
so he is a part of bandung specialized

64
00:02:25,840 --> 00:02:28,239
in advanced security assessment

65
00:02:28,239 --> 00:02:31,760
and he is an active synaptic member oscp

66
00:02:31,760 --> 00:02:34,319
certified and also an open source

67
00:02:34,319 --> 00:02:36,319
contributor

68
00:02:36,319 --> 00:02:38,959
so why android why did we choose android

69
00:02:38,959 --> 00:02:40,879
android is everywhere

70
00:02:40,879 --> 00:02:44,560
across the globe you find it

71
00:02:44,560 --> 00:02:46,400
so it is you can find android in

72
00:02:46,400 --> 00:02:49,440
automobiles refrigerators mobiles gaming

73
00:02:49,440 --> 00:02:53,200
consoles home automation via os

74
00:02:53,200 --> 00:02:57,599
nintendos everywhere you'll find android

75
00:02:57,599 --> 00:02:59,440
and if you see android has been growing

76
00:02:59,440 --> 00:03:01,280
without leaps and bounds since its

77
00:03:01,280 --> 00:03:03,519
inception it started out with cupcake

78
00:03:03,519 --> 00:03:05,840
donut but it gained more traction once

79
00:03:05,840 --> 00:03:08,480
it released jelly bean that's when these

80
00:03:08,480 --> 00:03:10,080
smartphones got more cheaper and the

81
00:03:10,080 --> 00:03:12,080
processing power of

82
00:03:12,080 --> 00:03:14,560
the mobiles got increased so this jelly

83
00:03:14,560 --> 00:03:17,680
bean kitkat lollipop marshmallow that's

84
00:03:17,680 --> 00:03:19,599
when android gear more traction than

85
00:03:19,599 --> 00:03:21,200
ever and

86
00:03:21,200 --> 00:03:23,200
we got more developers building a lot of

87
00:03:23,200 --> 00:03:24,640
applications

88
00:03:24,640 --> 00:03:27,120
and the trend continues to go on and

89
00:03:27,120 --> 00:03:28,480
android

90
00:03:28,480 --> 00:03:30,319
devices and the applications keep on

91
00:03:30,319 --> 00:03:32,560
increasing

92
00:03:32,560 --> 00:03:34,959
so according to this stats counter from

93
00:03:34,959 --> 00:03:36,720
july 2021

94
00:03:36,720 --> 00:03:38,560
they say 72

95
00:03:38,560 --> 00:03:40,959
of the devices across the globe are

96
00:03:40,959 --> 00:03:43,040
running android

97
00:03:43,040 --> 00:03:45,040
so this is one of the reason why we

98
00:03:45,040 --> 00:03:47,519
picked android because it creates a huge

99
00:03:47,519 --> 00:03:48,799
impact

100
00:03:48,799 --> 00:03:51,120
and even the ios is also having a

101
00:03:51,120 --> 00:03:54,080
significant contribution of 26 percent

102
00:03:54,080 --> 00:03:55,680
and there are some other operating

103
00:03:55,680 --> 00:03:57,439
systems which are

104
00:03:57,439 --> 00:03:58,840
considerably

105
00:03:58,840 --> 00:04:01,280
minimal so if you see the growth of

106
00:04:01,280 --> 00:04:04,000
android in 2009 it started

107
00:04:04,000 --> 00:04:06,959
but it was growing very slow

108
00:04:06,959 --> 00:04:09,159
comparatively in the

109
00:04:09,159 --> 00:04:11,920
2013-14 where we have the marshmallow

110
00:04:11,920 --> 00:04:13,120
jelly bean

111
00:04:13,120 --> 00:04:14,640
it started off with jelly bean until

112
00:04:14,640 --> 00:04:17,279
marshmallow we had a huge surge

113
00:04:17,279 --> 00:04:19,918
in the number of android applications

114
00:04:19,918 --> 00:04:20,720
so

115
00:04:20,720 --> 00:04:22,639
as you can see from the statistics of

116
00:04:22,639 --> 00:04:25,759
data flare by 2023 there will be around

117
00:04:25,759 --> 00:04:29,520
87 of the devices running android

118
00:04:29,520 --> 00:04:31,440
standard is not just limited to mobile

119
00:04:31,440 --> 00:04:35,520
the iot automobiles everywhere

120
00:04:35,520 --> 00:04:37,600
and why did we choose the android

121
00:04:37,600 --> 00:04:39,759
applications

122
00:04:39,759 --> 00:04:42,080
as you can see in 2012 it started out

123
00:04:42,080 --> 00:04:45,520
and when you compare the ios and android

124
00:04:45,520 --> 00:04:46,880
there was not much

125
00:04:46,880 --> 00:04:49,600
much difference it's just about a

126
00:04:49,600 --> 00:04:52,000
0.1 million difference but when you see

127
00:04:52,000 --> 00:04:52,919
about

128
00:04:52,919 --> 00:04:55,440
2013-14 where we got the jelly bean

129
00:04:55,440 --> 00:04:56,400
kitkat

130
00:04:56,400 --> 00:04:58,720
and the other versions released sickness

131
00:04:58,720 --> 00:05:00,160
slowly

132
00:05:00,160 --> 00:05:02,560
we can see the number of

133
00:05:02,560 --> 00:05:04,400
we can see the increase in the number of

134
00:05:04,400 --> 00:05:05,680
applications

135
00:05:05,680 --> 00:05:08,160
for android on google play if you see on

136
00:05:08,160 --> 00:05:12,400
2017 we have around 1.6 million

137
00:05:12,400 --> 00:05:15,120
apps on google play whereas in ios it's

138
00:05:15,120 --> 00:05:16,360
just

139
00:05:16,360 --> 00:05:19,600
0.75 million but as of 2021 there are

140
00:05:19,600 --> 00:05:22,000
around 4 million apps on google

141
00:05:22,000 --> 00:05:25,000
play

142
00:05:25,199 --> 00:05:27,680
and yeah this is a statistics from build

143
00:05:27,680 --> 00:05:29,360
fire which confirms these facts that i

144
00:05:29,360 --> 00:05:31,680
validated there are around 4.2 million

145
00:05:31,680 --> 00:05:35,120
applications as of 2020 and as of 2021

146
00:05:35,120 --> 00:05:36,880
it's even more

147
00:05:36,880 --> 00:05:39,520
and the games play a key role in android

148
00:05:39,520 --> 00:05:40,880
applications

149
00:05:40,880 --> 00:05:42,880
and the remaining regular applications

150
00:05:42,880 --> 00:05:44,560
which we use on the daily basis for the

151
00:05:44,560 --> 00:05:46,320
sportswear fintech

152
00:05:46,320 --> 00:05:49,039
health tracking cooking entertainment

153
00:05:49,039 --> 00:05:51,360
and the list goes on

154
00:05:51,360 --> 00:05:52,560
so

155
00:05:52,560 --> 00:05:55,600
just imagine 4.2 million applications

156
00:05:55,600 --> 00:05:57,840
and

157
00:05:58,240 --> 00:06:01,199
its security is more important than ever

158
00:06:01,199 --> 00:06:03,520
so why android application security as

159
00:06:03,520 --> 00:06:05,680
we have seen there are around 4 million

160
00:06:05,680 --> 00:06:07,039
applications

161
00:06:07,039 --> 00:06:08,319
and

162
00:06:08,319 --> 00:06:10,720
people have been using that across the

163
00:06:10,720 --> 00:06:11,919
globe

164
00:06:11,919 --> 00:06:14,319
and an attack on such one of such

165
00:06:14,319 --> 00:06:17,759
applications will create a huge impact

166
00:06:17,759 --> 00:06:20,720
so the malware attacks and android

167
00:06:20,720 --> 00:06:22,880
according to checkpoint as you can see

168
00:06:22,880 --> 00:06:23,680
the

169
00:06:23,680 --> 00:06:26,080
malware attacks are targeted mostly for

170
00:06:26,080 --> 00:06:28,000
the financial leverage

171
00:06:28,000 --> 00:06:30,319
around 29 of the attacks happen in the

172
00:06:30,319 --> 00:06:32,400
financial industry or the fintech

173
00:06:32,400 --> 00:06:36,479
applications that impacts the

174
00:06:37,120 --> 00:06:39,199
that impacts a lot of things and

175
00:06:39,199 --> 00:06:40,639
the government applications

176
00:06:40,639 --> 00:06:45,360
manufacturing technology and so on

177
00:06:45,360 --> 00:06:46,960
also you can see the

178
00:06:46,960 --> 00:06:48,560
growth in

179
00:06:48,560 --> 00:06:50,720
malware infection is significantly

180
00:06:50,720 --> 00:06:53,599
higher when the android started it was

181
00:06:53,599 --> 00:06:55,840
just 12 million

182
00:06:55,840 --> 00:06:57,759
devices or applications that got

183
00:06:57,759 --> 00:07:00,160
compromised and as of 2018 there are

184
00:07:00,160 --> 00:07:02,479
around 800

185
00:07:02,479 --> 00:07:03,840
million

186
00:07:03,840 --> 00:07:05,680
and more

187
00:07:05,680 --> 00:07:08,479
infected applications

188
00:07:08,479 --> 00:07:11,199
so if you consider about 2021 it will be

189
00:07:11,199 --> 00:07:12,720
even more higher

190
00:07:12,720 --> 00:07:14,400
so it's very important for us to

191
00:07:14,400 --> 00:07:16,160
understand the core concepts of the

192
00:07:16,160 --> 00:07:18,000
android application security or how we

193
00:07:18,000 --> 00:07:19,440
can protect them

194
00:07:19,440 --> 00:07:23,199
from a security point of view

195
00:07:23,520 --> 00:07:24,720
and

196
00:07:24,720 --> 00:07:28,560
yeah as you can see in 20 2006 when it

197
00:07:28,560 --> 00:07:30,479
everything got started

198
00:07:30,479 --> 00:07:32,080
all the attacks were non-profit

199
00:07:32,080 --> 00:07:34,880
motivated they were just uh

200
00:07:34,880 --> 00:07:37,680
leveraging the vulnerabilities so for

201
00:07:37,680 --> 00:07:39,039
fun

202
00:07:39,039 --> 00:07:41,199
but as we got

203
00:07:41,199 --> 00:07:43,120
later into the other era we got

204
00:07:43,120 --> 00:07:44,720
introduction to the

205
00:07:44,720 --> 00:07:47,280
bitcoins cryptocurrencies non-traceable

206
00:07:47,280 --> 00:07:49,919
transactions and so on so that's when

207
00:07:49,919 --> 00:07:51,840
things changed when the fintech

208
00:07:51,840 --> 00:07:53,680
application started getting installed on

209
00:07:53,680 --> 00:07:55,759
our mobiles where we can make

210
00:07:55,759 --> 00:07:58,479
transactions in just one click

211
00:07:58,479 --> 00:08:00,560
that's when the attackers move from

212
00:08:00,560 --> 00:08:02,879
non-profit to profit motivated attacks

213
00:08:02,879 --> 00:08:05,039
where they do spear phishing attacks or

214
00:08:05,039 --> 00:08:06,800
they target particular individuals or a

215
00:08:06,800 --> 00:08:08,800
particular application

216
00:08:08,800 --> 00:08:09,090
to

217
00:08:09,090 --> 00:08:10,319
[Music]

218
00:08:10,319 --> 00:08:12,879
exploit for money and as you can see in

219
00:08:12,879 --> 00:08:15,400
2012 there are around

220
00:08:15,400 --> 00:08:16,960
173

221
00:08:16,960 --> 00:08:19,199
attacks that happened for the profit

222
00:08:19,199 --> 00:08:22,720
motivated and that's a significant race

223
00:08:22,720 --> 00:08:25,680
so uh we are sure if by 2021 as of now

224
00:08:25,680 --> 00:08:28,720
it's even more

225
00:08:29,360 --> 00:08:31,840
as you can see highest vulnerabilities

226
00:08:31,840 --> 00:08:33,279
found in

227
00:08:33,279 --> 00:08:35,679
one third of the android applications

228
00:08:35,679 --> 00:08:38,159
are nearly equivalent to half of the or

229
00:08:38,159 --> 00:08:40,880
50 of the android applications

230
00:08:40,880 --> 00:08:43,440
and according to the helpnet security

231
00:08:43,440 --> 00:08:45,600
60 of the vulnerabilities in android

232
00:08:45,600 --> 00:08:49,200
applications are on client side itself

233
00:08:49,200 --> 00:08:51,519
and that should be something

234
00:08:51,519 --> 00:08:53,279
very scary

235
00:08:53,279 --> 00:08:56,000
about and 89 of the vulnerabilities can

236
00:08:56,000 --> 00:08:58,000
be exploited without any physical access

237
00:08:58,000 --> 00:09:00,640
so just your android application and an

238
00:09:00,640 --> 00:09:03,040
internet access

239
00:09:03,040 --> 00:09:04,720
it's enough to

240
00:09:04,720 --> 00:09:06,959
create a huge loss

241
00:09:06,959 --> 00:09:08,240
and also 56 percent of the

242
00:09:08,240 --> 00:09:09,920
vulnerabilities can be exploited without

243
00:09:09,920 --> 00:09:12,480
even administrative rights

244
00:09:12,480 --> 00:09:14,959
so even if some attacker gets hands on

245
00:09:14,959 --> 00:09:17,680
your mobile he doesn't need to jailbreak

246
00:09:17,680 --> 00:09:19,600
or do something just with the default

247
00:09:19,600 --> 00:09:24,240
privileges 56 of the attacks happen

248
00:09:24,240 --> 00:09:26,399
so

249
00:09:26,640 --> 00:09:28,640
this is where we believe

250
00:09:28,640 --> 00:09:30,800
uh considering these huge significant

251
00:09:30,800 --> 00:09:31,839
numbers

252
00:09:31,839 --> 00:09:35,440
android applications should be protected

253
00:09:35,440 --> 00:09:36,560
and

254
00:09:36,560 --> 00:09:37,920
threat vectors for the android

255
00:09:37,920 --> 00:09:39,839
applications as we have discussed the

256
00:09:39,839 --> 00:09:43,120
malware data exfiltration data tampering

257
00:09:43,120 --> 00:09:44,640
data loss

258
00:09:44,640 --> 00:09:46,080
multiple

259
00:09:46,080 --> 00:09:47,839
threat vectors depending on the kind of

260
00:09:47,839 --> 00:09:49,600
applications we are seeing and

261
00:09:49,600 --> 00:09:51,519
considering the huge number of 4 million

262
00:09:51,519 --> 00:09:53,920
plus applications which we have

263
00:09:53,920 --> 00:09:56,000
they have different features and we'll

264
00:09:56,000 --> 00:09:58,560
get to have different threat vectors but

265
00:09:58,560 --> 00:10:00,800
the most common ones are

266
00:10:00,800 --> 00:10:01,760
these

267
00:10:01,760 --> 00:10:03,760
listed here

268
00:10:03,760 --> 00:10:05,200
and what are the consequences of this

269
00:10:05,200 --> 00:10:07,519
threat vectors they can lead to using of

270
00:10:07,519 --> 00:10:09,519
your data bad use of your mobile

271
00:10:09,519 --> 00:10:11,279
resources may be a crypto miner running

272
00:10:11,279 --> 00:10:12,480
on your mobile

273
00:10:12,480 --> 00:10:14,320
and reputational laws

274
00:10:14,320 --> 00:10:16,160
identity theft they can use your mobile

275
00:10:16,160 --> 00:10:18,079
to perform some ddos attacks they can

276
00:10:18,079 --> 00:10:19,440
use your

277
00:10:19,440 --> 00:10:22,480
mobile for multiple other purposes and

278
00:10:22,480 --> 00:10:25,279
which can create a huge impact

279
00:10:25,279 --> 00:10:27,680
for you on the professional and personal

280
00:10:27,680 --> 00:10:30,000
level

281
00:10:30,720 --> 00:10:33,519
so this is what we strive to do with our

282
00:10:33,519 --> 00:10:35,760
damn vulnerable bank

283
00:10:35,760 --> 00:10:37,279
with these

284
00:10:37,279 --> 00:10:39,120
significant numbers and the increasing

285
00:10:39,120 --> 00:10:41,360
rate of the android applications

286
00:10:41,360 --> 00:10:42,399
and

287
00:10:42,399 --> 00:10:43,120
the

288
00:10:43,120 --> 00:10:47,120
lot of new developers to the android

289
00:10:47,120 --> 00:10:50,079
we want to provide a platform where the

290
00:10:50,079 --> 00:10:51,680
people who want to get started with the

291
00:10:51,680 --> 00:10:53,360
android application security or the

292
00:10:53,360 --> 00:10:55,600
android developers have an interface to

293
00:10:55,600 --> 00:10:58,480
learn android application security at

294
00:10:58,480 --> 00:11:00,399
a deeper level

295
00:11:00,399 --> 00:11:02,000
all the applications which we have today

296
00:11:02,000 --> 00:11:03,519
they just cover the os top 10

297
00:11:03,519 --> 00:11:05,600
vulnerabilities but we want to take it

298
00:11:05,600 --> 00:11:08,240
much higher and focus on the recent

299
00:11:08,240 --> 00:11:10,000
vulnerabilities which we see

300
00:11:10,000 --> 00:11:11,600
and we want to make it

301
00:11:11,600 --> 00:11:14,320
realistic as possible

302
00:11:14,320 --> 00:11:16,160
and that's where this

303
00:11:16,160 --> 00:11:17,920
damn vulnerable bank comes into play as

304
00:11:17,920 --> 00:11:20,160
you can see we have the complete banking

305
00:11:20,160 --> 00:11:22,399
interface the sign up login similar to

306
00:11:22,399 --> 00:11:24,399
the real world applications

307
00:11:24,399 --> 00:11:26,320
and for making a transfer adding the bin

308
00:11:26,320 --> 00:11:28,959
feature and stuff so i won't take much

309
00:11:28,959 --> 00:11:30,720
of your time will get immediately

310
00:11:30,720 --> 00:11:34,000
started with the demo and my colleague

311
00:11:34,000 --> 00:11:36,320
frishkesh will

312
00:11:36,320 --> 00:11:39,920
take you further on this

313
00:11:40,399 --> 00:11:41,680
thank you everyone for a quick

314
00:11:41,680 --> 00:11:44,079
introduction let's start with installing

315
00:11:44,079 --> 00:11:45,600
the application

316
00:11:45,600 --> 00:11:49,120
using the adb command so adb install dvb

317
00:11:49,120 --> 00:11:50,800
dot apk

318
00:11:50,800 --> 00:11:52,639
okay looks like we have installed the

319
00:11:52,639 --> 00:11:54,639
application successfully

320
00:11:54,639 --> 00:11:59,200
let's go ahead and open the application

321
00:11:59,360 --> 00:12:03,120
looks like the application is crashing

322
00:12:03,839 --> 00:12:05,440
we need to find a way why the

323
00:12:05,440 --> 00:12:07,760
application is crashing in order to do

324
00:12:07,760 --> 00:12:09,440
that what we can do

325
00:12:09,440 --> 00:12:11,680
is we will decompile the application

326
00:12:11,680 --> 00:12:13,920
using the apk tool and check the android

327
00:12:13,920 --> 00:12:15,360
manifest file

328
00:12:15,360 --> 00:12:17,279
so let's go ahead

329
00:12:17,279 --> 00:12:19,680
we'll use the apk tool d

330
00:12:19,680 --> 00:12:21,440
to decompile

331
00:12:21,440 --> 00:12:25,839
and we'll check take the apk file

332
00:12:28,800 --> 00:12:32,760
let's decompile the application

333
00:12:38,720 --> 00:12:42,000
next we will go to the section

334
00:12:42,000 --> 00:12:44,079
where the android manifest is

335
00:12:44,079 --> 00:12:46,399
open that are manifest file

336
00:12:46,399 --> 00:12:48,320
and we need to check the section called

337
00:12:48,320 --> 00:12:50,639
as hardware accelerated

338
00:12:50,639 --> 00:12:53,279
so why we are looking at this is because

339
00:12:53,279 --> 00:12:55,120
we are running the application right now

340
00:12:55,120 --> 00:12:57,680
in an emulator and the emulator does not

341
00:12:57,680 --> 00:12:59,279
need a gpu

342
00:12:59,279 --> 00:13:01,200
and since this is set to true it means

343
00:13:01,200 --> 00:13:03,360
that the application will be using gpu

344
00:13:03,360 --> 00:13:04,839
which is basically crashing the

345
00:13:04,839 --> 00:13:07,200
application so what we can do is we'll

346
00:13:07,200 --> 00:13:11,519
go ahead and set this value to false

347
00:13:11,519 --> 00:13:13,839
now before closing this android manifest

348
00:13:13,839 --> 00:13:15,760
what we could do is just copy the name

349
00:13:15,760 --> 00:13:17,680
of the package which will require it for

350
00:13:17,680 --> 00:13:20,320
the later use

351
00:13:20,320 --> 00:13:22,079
all right i think we are done over here

352
00:13:22,079 --> 00:13:24,079
with the android manifest we will close

353
00:13:24,079 --> 00:13:25,360
it

354
00:13:25,360 --> 00:13:26,959
go back

355
00:13:26,959 --> 00:13:29,199
and

356
00:13:29,519 --> 00:13:31,600
compile the application again using the

357
00:13:31,600 --> 00:13:33,360
apk2

358
00:13:33,360 --> 00:13:35,680
which is apktool build

359
00:13:35,680 --> 00:13:37,920
that is b

360
00:13:37,920 --> 00:13:40,480
and then again the name of the folder

361
00:13:40,480 --> 00:13:44,920
followed by a new application name

362
00:13:49,440 --> 00:13:51,519
let's wait for a few seconds so that it

363
00:13:51,519 --> 00:13:53,120
builds the application

364
00:13:53,120 --> 00:13:54,880
and the application is built

365
00:13:54,880 --> 00:13:57,040
now what we will do is we will go ahead

366
00:13:57,040 --> 00:13:59,440
and uninstall the previous application

367
00:13:59,440 --> 00:14:00,880
so that we can install this new

368
00:14:00,880 --> 00:14:04,000
application we'll use adb uninstall

369
00:14:04,000 --> 00:14:05,839
and remember we had copied the package

370
00:14:05,839 --> 00:14:11,320
name we'll quickly paste it over here

371
00:14:16,000 --> 00:14:18,000
apparently copied the other command so

372
00:14:18,000 --> 00:14:20,320
i'll have to just

373
00:14:20,320 --> 00:14:23,760
quickly go to this section

374
00:14:23,760 --> 00:14:27,040
copy the name of the package

375
00:14:28,000 --> 00:14:31,680
and then edit adb uninstall

376
00:14:31,680 --> 00:14:33,360
the name of the package now we have

377
00:14:33,360 --> 00:14:35,680
uninstalled the application

378
00:14:35,680 --> 00:14:37,360
we will go ahead and install the

379
00:14:37,360 --> 00:14:40,000
application that we just now

380
00:14:40,000 --> 00:14:41,040
built

381
00:14:41,040 --> 00:14:44,959
which is dvba hyphen no gpu

382
00:14:44,959 --> 00:14:46,639
so adb

383
00:14:46,639 --> 00:14:47,839
install

384
00:14:47,839 --> 00:14:50,720
name of the package

385
00:14:52,399 --> 00:14:54,720
it's trying to install the package

386
00:14:54,720 --> 00:14:57,120
but looks like there is some error it

387
00:14:57,120 --> 00:14:59,279
says that failed to collect certificates

388
00:14:59,279 --> 00:15:01,040
now we are getting this error because we

389
00:15:01,040 --> 00:15:03,279
have yet not signed our application

390
00:15:03,279 --> 00:15:04,959
so let's go ahead and sign the

391
00:15:04,959 --> 00:15:07,920
application using the key tool

392
00:15:07,920 --> 00:15:09,279
tool

393
00:15:09,279 --> 00:15:10,639
so key tool

394
00:15:10,639 --> 00:15:13,120
will create a key first with the type

395
00:15:13,120 --> 00:15:14,720
key store

396
00:15:14,720 --> 00:15:16,639
and

397
00:15:16,639 --> 00:15:20,720
let's set up a password for the key tool

398
00:15:21,440 --> 00:15:23,519
we can keep it blank

399
00:15:23,519 --> 00:15:25,360
click on yes

400
00:15:25,360 --> 00:15:27,680
we have created a key now we'll use this

401
00:15:27,680 --> 00:15:30,079
key to sign our app application using

402
00:15:30,079 --> 00:15:32,880
the jar signer

403
00:15:32,880 --> 00:15:35,040
let's go ahead and sign our application

404
00:15:35,040 --> 00:15:37,279
let's use the previously set password

405
00:15:37,279 --> 00:15:38,480
for the key

406
00:15:38,480 --> 00:15:40,560
and we have signed the application

407
00:15:40,560 --> 00:15:42,880
now what we'll go is we'll go ahead and

408
00:15:42,880 --> 00:15:45,759
install the application

409
00:15:45,759 --> 00:15:48,959
using the adb install

410
00:15:49,279 --> 00:15:52,079
hyphen gpu

411
00:15:52,079 --> 00:15:55,600
and it says success great let's go ahead

412
00:15:55,600 --> 00:15:57,519
open the application and see if it's

413
00:15:57,519 --> 00:15:58,800
opening

414
00:15:58,800 --> 00:16:00,639
we are now able to open the application

415
00:16:00,639 --> 00:16:02,639
but wait we are now getting some other

416
00:16:02,639 --> 00:16:04,959
errors it says that 4 is rooted and the

417
00:16:04,959 --> 00:16:06,959
emulator is detected

418
00:16:06,959 --> 00:16:08,720
what we can do now

419
00:16:08,720 --> 00:16:10,399
let's reverse engineer the application

420
00:16:10,399 --> 00:16:12,720
using a tool called apkx

421
00:16:12,720 --> 00:16:14,880
so

422
00:16:15,759 --> 00:16:18,959
let's go ahead type in apkx the name of

423
00:16:18,959 --> 00:16:21,600
the apk that we are using right now

424
00:16:21,600 --> 00:16:23,519
which is no hyphen gpu

425
00:16:23,519 --> 00:16:25,680
what it will do is it will decompile the

426
00:16:25,680 --> 00:16:27,040
application

427
00:16:27,040 --> 00:16:28,959
and then using this what we are going to

428
00:16:28,959 --> 00:16:31,120
do is we are going we are going to look

429
00:16:31,120 --> 00:16:33,519
at the source code

430
00:16:33,519 --> 00:16:35,279
and then from that we are going to find

431
00:16:35,279 --> 00:16:37,440
out what exactly is

432
00:16:37,440 --> 00:16:39,360
making the application close

433
00:16:39,360 --> 00:16:40,320
and

434
00:16:40,320 --> 00:16:42,639
exactly what code block

435
00:16:42,639 --> 00:16:43,759
is

436
00:16:43,759 --> 00:16:45,519
giving us those

437
00:16:45,519 --> 00:16:47,759
toasts which is the emulator detected

438
00:16:47,759 --> 00:16:51,040
and the root is detected let's wait for

439
00:16:51,040 --> 00:16:54,319
this tool to complete

440
00:16:55,839 --> 00:16:58,480
all right we can see that the

441
00:16:58,480 --> 00:17:00,240
decompiling is done

442
00:17:00,240 --> 00:17:01,839
let's go ahead

443
00:17:01,839 --> 00:17:05,679
and check the folder dvb iphone no gpu

444
00:17:05,679 --> 00:17:08,240
we'll go ahead and open this in one of

445
00:17:08,240 --> 00:17:10,559
our favorite code editors here i will

446
00:17:10,559 --> 00:17:13,678
use the vs code

447
00:17:17,039 --> 00:17:19,839
but wait searching from here is a

448
00:17:19,839 --> 00:17:22,959
tedious task what we could do instead is

449
00:17:22,959 --> 00:17:24,559
let's use a command line tool called

450
00:17:24,559 --> 00:17:25,599
grub

451
00:17:25,599 --> 00:17:27,119
and look for the

452
00:17:27,119 --> 00:17:29,840
word which said emulator detected i'll

453
00:17:29,840 --> 00:17:32,799
just quickly show the application again

454
00:17:32,799 --> 00:17:34,880
and we'll check the toast what message

455
00:17:34,880 --> 00:17:36,160
does it give

456
00:17:36,160 --> 00:17:38,080
it is emulator detected let's go with

457
00:17:38,080 --> 00:17:39,840
that

458
00:17:39,840 --> 00:17:42,000
so

459
00:17:44,640 --> 00:17:46,799
i'm using a minus i flag for case

460
00:17:46,799 --> 00:17:49,600
insensitive and r for recursive

461
00:17:49,600 --> 00:17:51,600
and let's check for the message saying

462
00:17:51,600 --> 00:17:53,760
emulator detected great we have found

463
00:17:53,760 --> 00:17:56,080
the name of the file which is in src com

464
00:17:56,080 --> 00:17:57,280
app

465
00:17:57,280 --> 00:17:59,679
a damn vulnerable bank holder as well

466
00:17:59,679 --> 00:18:01,760
let's go ahead

467
00:18:01,760 --> 00:18:03,360
and open that

468
00:18:03,360 --> 00:18:05,039
said src

469
00:18:05,039 --> 00:18:07,760
com app damn vulnerable

470
00:18:07,760 --> 00:18:10,559
main activity dot java

471
00:18:10,559 --> 00:18:12,840
now what we could do from here

472
00:18:12,840 --> 00:18:16,240
is let's search for the keyword

473
00:18:16,240 --> 00:18:17,840
emulator

474
00:18:17,840 --> 00:18:19,280
and there it is

475
00:18:19,280 --> 00:18:21,360
we have found the code block

476
00:18:21,360 --> 00:18:23,760
that is actually giving us the toast

477
00:18:23,760 --> 00:18:25,760
but this code block does not

478
00:18:25,760 --> 00:18:28,000
seem to actually close the application

479
00:18:28,000 --> 00:18:30,960
it is just sending a toast

480
00:18:30,960 --> 00:18:32,880
now let's check for the other message

481
00:18:32,880 --> 00:18:35,440
that was phone is rooted

482
00:18:35,440 --> 00:18:36,559
here it is

483
00:18:36,559 --> 00:18:38,240
so basically we are looking at this code

484
00:18:38,240 --> 00:18:39,200
block

485
00:18:39,200 --> 00:18:41,600
now what exactly is happening if the a

486
00:18:41,600 --> 00:18:43,760
dot r returns true

487
00:18:43,760 --> 00:18:45,840
the application will send a toast with

488
00:18:45,840 --> 00:18:48,799
the message phone is rooted and then it

489
00:18:48,799 --> 00:18:49,919
will

490
00:18:49,919 --> 00:18:51,440
call the function which is this dot

491
00:18:51,440 --> 00:18:53,360
finish which will basically close the

492
00:18:53,360 --> 00:18:54,720
application

493
00:18:54,720 --> 00:18:56,960
now now in order to bypass this checks

494
00:18:56,960 --> 00:18:58,799
what we have to do is

495
00:18:58,799 --> 00:19:00,400
we have to flip the

496
00:19:00,400 --> 00:19:03,039
written value of this method

497
00:19:03,039 --> 00:19:05,440
now there are two ways to do that

498
00:19:05,440 --> 00:19:08,640
uh one is to patch the application using

499
00:19:08,640 --> 00:19:12,160
smiley code and then rebuild

500
00:19:12,160 --> 00:19:15,280
and then reinstall the other way is to

501
00:19:15,280 --> 00:19:17,200
dynamically

502
00:19:17,200 --> 00:19:18,960
hook into this function

503
00:19:18,960 --> 00:19:21,120
at the runtime and change the behavior

504
00:19:21,120 --> 00:19:23,679
of this method and send the value as

505
00:19:23,679 --> 00:19:25,520
false instead of true

506
00:19:25,520 --> 00:19:27,520
or we could just flip the value of a dot

507
00:19:27,520 --> 00:19:28,240
r

508
00:19:28,240 --> 00:19:30,000
so we don't even have to see how the a

509
00:19:30,000 --> 00:19:31,840
dot r is implemented

510
00:19:31,840 --> 00:19:35,200
now in order to do that let's go ahead

511
00:19:35,200 --> 00:19:36,960
and

512
00:19:36,960 --> 00:19:38,880
let's use frida

513
00:19:38,880 --> 00:19:42,960
to dynamically hook on to this method

514
00:19:43,200 --> 00:19:45,440
so i'll close this file which we won't

515
00:19:45,440 --> 00:19:48,320
need right now

516
00:19:48,400 --> 00:19:49,440
okay

517
00:19:49,440 --> 00:19:51,280
now what i'm going to do is we already

518
00:19:51,280 --> 00:19:54,320
have a script ready for freedom

519
00:19:54,320 --> 00:19:56,480
i will just quickly show you the script

520
00:19:56,480 --> 00:19:58,080
that is

521
00:19:58,080 --> 00:20:01,600
we that we are going to use

522
00:20:01,600 --> 00:20:04,320
let me just get back

523
00:20:04,320 --> 00:20:07,440
here it is

524
00:20:07,440 --> 00:20:08,960
so what we are going to do right now is

525
00:20:08,960 --> 00:20:10,799
java dot use is going to use this

526
00:20:10,799 --> 00:20:13,039
package called a dot a dot a dot a where

527
00:20:13,039 --> 00:20:16,400
the a dot r is actually defined

528
00:20:16,400 --> 00:20:19,280
now we are going to implement the method

529
00:20:19,280 --> 00:20:22,480
r which we saw previously which where in

530
00:20:22,480 --> 00:20:24,880
a dot r was being used

531
00:20:24,880 --> 00:20:27,120
what we are going to do is we will be

532
00:20:27,120 --> 00:20:29,840
going to call the method as is without

533
00:20:29,840 --> 00:20:32,159
modifying we will get the return value

534
00:20:32,159 --> 00:20:34,000
of this method

535
00:20:34,000 --> 00:20:36,080
and then what we are going to do is we

536
00:20:36,080 --> 00:20:37,919
are going to return

537
00:20:37,919 --> 00:20:39,919
the exact opposite value of the return

538
00:20:39,919 --> 00:20:44,320
value before that will print the value

539
00:20:44,320 --> 00:20:45,039
now

540
00:20:45,039 --> 00:20:46,960
this is a javascript code

541
00:20:46,960 --> 00:20:49,200
which we'll be using

542
00:20:49,200 --> 00:20:51,120
so how do we use this

543
00:20:51,120 --> 00:20:53,440
basically we'll be using freeda to

544
00:20:53,440 --> 00:20:56,080
execute this and this will also open the

545
00:20:56,080 --> 00:20:58,720
application

546
00:20:59,039 --> 00:21:02,640
all right then let's go ahead and run

547
00:21:02,640 --> 00:21:04,159
frida

548
00:21:04,159 --> 00:21:06,400
to start this what i'm going to do is

549
00:21:06,400 --> 00:21:08,799
i'll be calling a frida command

550
00:21:08,799 --> 00:21:10,799
with a minus f

551
00:21:10,799 --> 00:21:13,600
uh which will open the package and the l

552
00:21:13,600 --> 00:21:15,520
will pass the file name which we just

553
00:21:15,520 --> 00:21:16,720
saw

554
00:21:16,720 --> 00:21:17,760
okay

555
00:21:17,760 --> 00:21:20,320
let's see how it goes

556
00:21:20,320 --> 00:21:22,320
clicking on insert

557
00:21:22,320 --> 00:21:24,720
all right looks like i have not started

558
00:21:24,720 --> 00:21:29,799
my fada server let me just go ahead

559
00:21:32,480 --> 00:21:35,480
and

560
00:21:49,760 --> 00:21:54,039
let me just start the fluida server

561
00:22:00,720 --> 00:22:03,280
this might have gotten stuck let's open

562
00:22:03,280 --> 00:22:05,120
a new terminal

563
00:22:05,120 --> 00:22:07,600
and let's try the same frida script

564
00:22:07,600 --> 00:22:10,600
command

565
00:22:15,039 --> 00:22:17,840
okay it says syntax error let's check

566
00:22:17,840 --> 00:22:22,600
what the error is on the line 10.

567
00:22:32,880 --> 00:22:37,000
let's try and change it to where

568
00:22:40,240 --> 00:22:43,520
let's execute it again

569
00:22:45,600 --> 00:22:48,159
so let's run the freda script

570
00:22:48,159 --> 00:22:50,559
and see if we can bypass

571
00:22:50,559 --> 00:22:52,159
the root detection and the emulator

572
00:22:52,159 --> 00:22:55,840
detection using this

573
00:22:56,799 --> 00:22:58,320
says use

574
00:22:58,320 --> 00:23:02,240
resume we let them benefit running

575
00:23:02,240 --> 00:23:04,640
okay

576
00:23:04,880 --> 00:23:07,039
now what we are seeing over here is we

577
00:23:07,039 --> 00:23:09,280
can ignore the emulator it is detected

578
00:23:09,280 --> 00:23:10,640
but we are seeing that the feeder is

579
00:23:10,640 --> 00:23:13,200
running this is what we are seeing now

580
00:23:13,200 --> 00:23:14,640
and that is what is crashing the

581
00:23:14,640 --> 00:23:16,799
application

582
00:23:16,799 --> 00:23:19,360
let's go ahead

583
00:23:19,360 --> 00:23:22,880
and see exactly what that is

584
00:23:22,880 --> 00:23:26,240
let's check the code again

585
00:23:30,320 --> 00:23:33,120
all right now we have bypass this

586
00:23:33,120 --> 00:23:35,440
phone root is detect4 is rooted now what

587
00:23:35,440 --> 00:23:37,840
we have to do is we have to bypass

588
00:23:37,840 --> 00:23:41,840
the frida is running error

589
00:23:41,919 --> 00:23:43,919
which is basically causing the

590
00:23:43,919 --> 00:23:45,679
application to stop

591
00:23:45,679 --> 00:23:48,159
now how do we do that

592
00:23:48,159 --> 00:23:50,400
we need to first figure out

593
00:23:50,400 --> 00:23:51,279
how

594
00:23:51,279 --> 00:23:54,799
exactly what this field check is

595
00:23:54,799 --> 00:23:56,720
now how do we find that the code is

596
00:23:56,720 --> 00:23:59,279
already obfuscated we cannot just go in

597
00:23:59,279 --> 00:24:00,960
into the code and keep on looking that

598
00:24:00,960 --> 00:24:02,480
will take a lot of time

599
00:24:02,480 --> 00:24:07,120
what we can do again is use grip

600
00:24:08,880 --> 00:24:10,559
ir

601
00:24:10,559 --> 00:24:13,520
and let's grab for freedom

602
00:24:13,520 --> 00:24:15,840
now we have got many matches over here

603
00:24:15,840 --> 00:24:18,720
what we can check for hints is

604
00:24:18,720 --> 00:24:20,799
frida check jni

605
00:24:20,799 --> 00:24:22,480
we could check

606
00:24:22,480 --> 00:24:25,120
load system dot load library for free

607
00:24:25,120 --> 00:24:26,400
check

608
00:24:26,400 --> 00:24:30,640
you also find over here frida check jni

609
00:24:30,880 --> 00:24:32,400
which is basically

610
00:24:32,400 --> 00:24:34,960
and also over here something like lift

611
00:24:34,960 --> 00:24:36,480
reader check

612
00:24:36,480 --> 00:24:37,760
dot so

613
00:24:37,760 --> 00:24:40,720
which is basically giving us some idea

614
00:24:40,720 --> 00:24:42,080
that

615
00:24:42,080 --> 00:24:43,600
there is a chance

616
00:24:43,600 --> 00:24:45,600
that we are

617
00:24:45,600 --> 00:24:47,679
looking at a native library

618
00:24:47,679 --> 00:24:50,000
which is a dot so file now how do we

619
00:24:50,000 --> 00:24:50,880
find

620
00:24:50,880 --> 00:24:53,200
how this frida check is implemented

621
00:24:53,200 --> 00:24:55,279
in order to do that we are going to use

622
00:24:55,279 --> 00:24:57,919
a tool called

623
00:24:58,000 --> 00:25:01,120
to reverse engineer this library and see

624
00:25:01,120 --> 00:25:03,520
what exactly it is doing

625
00:25:03,520 --> 00:25:04,400
so

626
00:25:04,400 --> 00:25:07,520
let's open github

627
00:25:12,640 --> 00:25:15,640
and

628
00:25:32,080 --> 00:25:36,320
let me just transfer the file

629
00:25:37,039 --> 00:25:38,720
into the github

630
00:25:38,720 --> 00:25:40,159
now we know that what we have to do

631
00:25:40,159 --> 00:25:42,000
right now is since we are using an

632
00:25:42,000 --> 00:25:45,440
emulator we have to find a file of x86

633
00:25:45,440 --> 00:25:47,600
since the emulator runs on an x86

634
00:25:47,600 --> 00:25:49,679
architecture so this is the path of the

635
00:25:49,679 --> 00:25:52,880
file that we need to get

636
00:25:53,200 --> 00:25:56,159
so what i have done right now is i have

637
00:25:56,159 --> 00:25:57,520
drag and drop

638
00:25:57,520 --> 00:26:01,279
this file in ghidra i just click on ok

639
00:26:01,279 --> 00:26:04,000
it will load

640
00:26:04,080 --> 00:26:06,320
and

641
00:26:06,559 --> 00:26:08,960
so basically it will give you give us a

642
00:26:08,960 --> 00:26:12,320
file browser sorry my bad code browser

643
00:26:12,320 --> 00:26:13,919
now what we can do is we can go ahead

644
00:26:13,919 --> 00:26:15,440
and click on functions

645
00:26:15,440 --> 00:26:17,120
and check all the methods

646
00:26:17,120 --> 00:26:19,200
the method that we are interested in is

647
00:26:19,200 --> 00:26:20,000
this

648
00:26:20,000 --> 00:26:21,360
this is java

649
00:26:21,360 --> 00:26:25,520
underscore com underscore app damnable

650
00:26:26,880 --> 00:26:29,120
now binary analysis is out of the scope

651
00:26:29,120 --> 00:26:31,679
over here so we won't be focusing a lot

652
00:26:31,679 --> 00:26:33,279
but if you look at the code on the right

653
00:26:33,279 --> 00:26:36,080
side it is basically a

654
00:26:36,080 --> 00:26:38,960
reverse engineered code for a socket

655
00:26:38,960 --> 00:26:40,880
connection

656
00:26:40,880 --> 00:26:42,960
so what is happening over here is the

657
00:26:42,960 --> 00:26:45,039
socket is being created

658
00:26:45,039 --> 00:26:48,559
and this local 28 is being passed for

659
00:26:48,559 --> 00:26:49,600
connection

660
00:26:49,600 --> 00:26:52,240
now as we can see that local 28 is

661
00:26:52,240 --> 00:26:54,559
actually

662
00:26:54,559 --> 00:26:57,360
a constant over here

663
00:26:57,360 --> 00:26:58,240
now

664
00:26:58,240 --> 00:27:01,679
what do we understand from this

665
00:27:03,279 --> 00:27:05,039
so in most cases what happens is the

666
00:27:05,039 --> 00:27:07,039
binaries content code in the big indian

667
00:27:07,039 --> 00:27:08,159
format

668
00:27:08,159 --> 00:27:09,200
so we

669
00:27:09,200 --> 00:27:11,679
basically need to convert this value

670
00:27:11,679 --> 00:27:16,320
which is a269 double zero double zero to

671
00:27:16,320 --> 00:27:18,159
the triple zero two

672
00:27:18,159 --> 00:27:20,320
to an actual value which is having eight

673
00:27:20,320 --> 00:27:21,520
bits

674
00:27:21,520 --> 00:27:23,200
now

675
00:27:23,200 --> 00:27:25,120
basically we have to split this into

676
00:27:25,120 --> 00:27:27,039
halves which is

677
00:27:27,039 --> 00:27:28,240
zero x

678
00:27:28,240 --> 00:27:30,880
a two six nine and

679
00:27:30,880 --> 00:27:32,880
a triple zero two

680
00:27:32,880 --> 00:27:34,480
now in order to convert them from big

681
00:27:34,480 --> 00:27:35,919
ending to a decimal value we have to

682
00:27:35,919 --> 00:27:38,399
swap the first two and the last two bits

683
00:27:38,399 --> 00:27:41,520
so basically a zero x a two six nine

684
00:27:41,520 --> 00:27:44,399
will become six nine a two

685
00:27:44,399 --> 00:27:45,440
and

686
00:27:45,440 --> 00:27:47,520
uh which is equivalent

687
00:27:47,520 --> 00:27:49,039
to 274

688
00:27:49,039 --> 00:27:52,399
basically it is equivalent to 27042

689
00:27:52,399 --> 00:27:55,760
so if i could just see if i can

690
00:27:55,760 --> 00:27:59,879
convert this value directly

691
00:28:04,240 --> 00:28:05,600
to decimal

692
00:28:05,600 --> 00:28:09,279
if i can show you right over here

693
00:28:11,360 --> 00:28:12,720
yes

694
00:28:12,720 --> 00:28:14,960
so what's happening right now over here

695
00:28:14,960 --> 00:28:15,679
is

696
00:28:15,679 --> 00:28:18,960
that we need to swap the digits which is

697
00:28:18,960 --> 00:28:21,440
why we are not able to get the exact

698
00:28:21,440 --> 00:28:24,320
value which we wanted to

699
00:28:24,320 --> 00:28:25,360
which is

700
00:28:25,360 --> 00:28:28,360
27042

701
00:28:28,960 --> 00:28:32,720
now if i click on convert again

702
00:28:34,080 --> 00:28:36,960
so this is the problem

703
00:28:36,960 --> 00:28:37,840
but

704
00:28:37,840 --> 00:28:39,360
i hope you got it

705
00:28:39,360 --> 00:28:41,440
basically what we are saying is that

706
00:28:41,440 --> 00:28:43,200
since we have to convert it from big

707
00:28:43,200 --> 00:28:45,600
endian we have to split the first four

708
00:28:45,600 --> 00:28:47,440
bits and the last four bits

709
00:28:47,440 --> 00:28:49,520
so we have just let's focus on the first

710
00:28:49,520 --> 00:28:53,279
four bits which is zero x a two six nine

711
00:28:53,279 --> 00:28:55,200
which will be changing as

712
00:28:55,200 --> 00:28:58,799
two a and nine six so it will be 0x 2a

713
00:28:58,799 --> 00:29:00,000
96

714
00:29:00,000 --> 00:29:02,399
which after converting to decimal

715
00:29:02,399 --> 00:29:05,440
would be 27042

716
00:29:05,440 --> 00:29:08,559
and now if you google the frida's the

717
00:29:08,559 --> 00:29:10,640
default port since friday the server

718
00:29:10,640 --> 00:29:13,120
client architecture frida server is

719
00:29:13,120 --> 00:29:15,840
running on the emulator now if we google

720
00:29:15,840 --> 00:29:17,919
the default port of the

721
00:29:17,919 --> 00:29:22,559
frida we'll find that it is 27042

722
00:29:22,559 --> 00:29:23,919
which is the exact port that we have

723
00:29:23,919 --> 00:29:25,840
formed so what do we understand from

724
00:29:25,840 --> 00:29:27,760
this code it's basically that the

725
00:29:27,760 --> 00:29:29,600
application is trying to connect to the

726
00:29:29,600 --> 00:29:31,520
default port

727
00:29:31,520 --> 00:29:35,600
and if the port responds back with a

728
00:29:35,679 --> 00:29:37,679
tcp handshake packet

729
00:29:37,679 --> 00:29:39,120
basically it will find that the port is

730
00:29:39,120 --> 00:29:41,919
open and the application stops working

731
00:29:41,919 --> 00:29:43,919
so how do we bypass this

732
00:29:43,919 --> 00:29:45,760
well it's pretty easy all we have to do

733
00:29:45,760 --> 00:29:47,679
is just change the port of the firena

734
00:29:47,679 --> 00:29:50,399
server that's it now how do we do that

735
00:29:50,399 --> 00:29:52,399
let's see

736
00:29:52,399 --> 00:29:55,918
let me just close the gyra

737
00:29:58,399 --> 00:29:59,840
all right

738
00:29:59,840 --> 00:30:02,879
now let's go ahead

739
00:30:03,919 --> 00:30:05,120
and

740
00:30:05,120 --> 00:30:08,880
get into adb shell

741
00:30:08,880 --> 00:30:11,840
cd data local time this is where i have

742
00:30:11,840 --> 00:30:15,199
stored my frida server

743
00:30:16,640 --> 00:30:18,399
this is my friday server what i'm going

744
00:30:18,399 --> 00:30:20,960
to do is i will kill the previous

745
00:30:20,960 --> 00:30:23,840
the current process

746
00:30:24,159 --> 00:30:28,600
let me find what the process is

747
00:30:38,960 --> 00:30:41,840
which is 4706

748
00:30:41,840 --> 00:30:44,959
let's skim that first

749
00:30:46,480 --> 00:30:51,000
now let's start the frida server again

750
00:30:56,240 --> 00:30:57,440
now what we are going to do is we are

751
00:30:57,440 --> 00:30:59,120
going to run the frida server on port

752
00:30:59,120 --> 00:31:01,360
1337

753
00:31:01,360 --> 00:31:02,640
let's see

754
00:31:02,640 --> 00:31:04,480
how it goes

755
00:31:04,480 --> 00:31:06,640
all right now that we have started the

756
00:31:06,640 --> 00:31:09,120
feeder server on 1337 port

757
00:31:09,120 --> 00:31:11,360
uh let me just change the

758
00:31:11,360 --> 00:31:14,159
terminal over here and let's try and

759
00:31:14,159 --> 00:31:15,200
connect

760
00:31:15,200 --> 00:31:16,320
to this

761
00:31:16,320 --> 00:31:17,760
frida server

762
00:31:17,760 --> 00:31:21,279
now how do we execute the command now

763
00:31:21,279 --> 00:31:22,799
well it's pretty easy we just have to

764
00:31:22,799 --> 00:31:25,279
add the minus h flag so how do we do

765
00:31:25,279 --> 00:31:26,320
that

766
00:31:26,320 --> 00:31:27,279
first

767
00:31:27,279 --> 00:31:28,080
get

768
00:31:28,080 --> 00:31:29,679
the ip address of the

769
00:31:29,679 --> 00:31:32,320
emulator

770
00:31:32,320 --> 00:31:33,279
which is

771
00:31:33,279 --> 00:31:35,940
in my case it's 192.168.57.107.

772
00:31:35,940 --> 00:31:38,080
[Music]

773
00:31:38,080 --> 00:31:39,679
let's go ahead

774
00:31:39,679 --> 00:31:42,399
and run friday this time with the host

775
00:31:42,399 --> 00:31:44,559
and the port number that we have given

776
00:31:44,559 --> 00:31:47,200
and the rest of the flags

777
00:31:47,200 --> 00:31:50,000
remain the same

778
00:31:52,640 --> 00:31:55,650
let's see how it goes

779
00:31:55,650 --> 00:31:58,809
[Music]

780
00:32:00,720 --> 00:32:03,120
the application is opening

781
00:32:03,120 --> 00:32:05,919
and finally the emulator detected

782
00:32:05,919 --> 00:32:08,240
and the friday is not running

783
00:32:08,240 --> 00:32:09,440
that's great

784
00:32:09,440 --> 00:32:13,200
now we are able to run the application

785
00:32:13,519 --> 00:32:15,679
now let's try and understand and explore

786
00:32:15,679 --> 00:32:18,399
the application

787
00:32:19,279 --> 00:32:20,960
now that we are able to run the

788
00:32:20,960 --> 00:32:24,080
application let's go ahead and try and

789
00:32:24,080 --> 00:32:26,559
explore the application in order to do

790
00:32:26,559 --> 00:32:28,880
that what we have to do first is start

791
00:32:28,880 --> 00:32:30,480
the backend server

792
00:32:30,480 --> 00:32:31,279
and

793
00:32:31,279 --> 00:32:33,120
then get the ip address where the

794
00:32:33,120 --> 00:32:35,360
backend server is running and enter the

795
00:32:35,360 --> 00:32:39,039
ip address in the api input field

796
00:32:39,039 --> 00:32:41,440
i went ahead and checked the ip address

797
00:32:41,440 --> 00:32:44,240
where my back-end server is running

798
00:32:44,240 --> 00:32:45,840
and i'm going to

799
00:32:45,840 --> 00:32:46,880
put that

800
00:32:46,880 --> 00:32:50,760
over here which is 192.168.57.1

801
00:32:51,039 --> 00:32:54,240
and 3000 so 3000 port is where the api

802
00:32:54,240 --> 00:32:56,399
is running let's click on health check

803
00:32:56,399 --> 00:32:58,159
and see if the api is up

804
00:32:58,159 --> 00:33:00,399
great the api is up

805
00:33:00,399 --> 00:33:03,039
i'm going to go ahead and use the login

806
00:33:03,039 --> 00:33:04,080
feature

807
00:33:04,080 --> 00:33:05,840
to log in using one of the default

808
00:33:05,840 --> 00:33:07,519
credentials

809
00:33:07,519 --> 00:33:10,840
which is user1

810
00:33:11,840 --> 00:33:13,600
and the corresponding password of user

811
00:33:13,600 --> 00:33:15,760
would

812
00:33:17,120 --> 00:33:19,279
all right then looks like we have logged

813
00:33:19,279 --> 00:33:21,760
in finally we will have to keep this

814
00:33:21,760 --> 00:33:22,559
free

815
00:33:22,559 --> 00:33:23,600
running

816
00:33:23,600 --> 00:33:25,200
because

817
00:33:25,200 --> 00:33:26,399
without that

818
00:33:26,399 --> 00:33:28,399
the bypasses won't work which means the

819
00:33:28,399 --> 00:33:30,480
application will crash

820
00:33:30,480 --> 00:33:32,320
now the next step if you need to

821
00:33:32,320 --> 00:33:33,919
understand and see

822
00:33:33,919 --> 00:33:35,600
how the request and response is being

823
00:33:35,600 --> 00:33:36,640
handled

824
00:33:36,640 --> 00:33:39,039
so for that what we are going to do is

825
00:33:39,039 --> 00:33:41,360
we are going to use bird to intercept

826
00:33:41,360 --> 00:33:43,760
the prox to intercept the requests

827
00:33:43,760 --> 00:33:45,600
and then see the traffic how is it

828
00:33:45,600 --> 00:33:46,880
flowing

829
00:33:46,880 --> 00:33:49,360
now how to set up burp and proxy is not

830
00:33:49,360 --> 00:33:51,279
in the scope so i am going to just go

831
00:33:51,279 --> 00:33:53,360
ahead and show the response and the

832
00:33:53,360 --> 00:33:56,720
request from the board

833
00:33:56,720 --> 00:33:59,440
all right then let's go ahead and just

834
00:33:59,440 --> 00:34:02,000
let's click on view beneficiary

835
00:34:02,000 --> 00:34:04,480
we can see that there is a request and

836
00:34:04,480 --> 00:34:06,720
response that we are getting by clicking

837
00:34:06,720 --> 00:34:08,560
the v button officially

838
00:34:08,560 --> 00:34:10,399
in the request we are not getting any

839
00:34:10,399 --> 00:34:12,000
much of a body

840
00:34:12,000 --> 00:34:14,320
uh it's just a post request

841
00:34:14,320 --> 00:34:15,839
to view the beneficiary the

842
00:34:15,839 --> 00:34:18,000
authentication or the authorization is

843
00:34:18,000 --> 00:34:19,359
implemented

844
00:34:19,359 --> 00:34:22,159
using the jwd token

845
00:34:22,159 --> 00:34:24,719
now even jw token is out of scope right

846
00:34:24,719 --> 00:34:26,639
now since we are focusing more on the

847
00:34:26,639 --> 00:34:27,918
application

848
00:34:27,918 --> 00:34:30,079
let's check the response

849
00:34:30,079 --> 00:34:31,119
okay

850
00:34:31,119 --> 00:34:33,599
it looks like the response has the

851
00:34:33,599 --> 00:34:35,760
keyword so the first thing is that the

852
00:34:35,760 --> 00:34:38,159
response is in json format second is the

853
00:34:38,159 --> 00:34:40,399
key is enc underscore data

854
00:34:40,399 --> 00:34:43,440
and the value is not in plain text

855
00:34:43,440 --> 00:34:46,839
it looks like a base64 so let's just go

856
00:34:46,839 --> 00:34:50,480
ahead select this value

857
00:34:50,480 --> 00:34:52,879
we can check in the decoder

858
00:34:52,879 --> 00:34:56,239
decode as base64 but hey this everything

859
00:34:56,239 --> 00:34:57,680
is garbage

860
00:34:57,680 --> 00:35:00,560
it looks like it's probably encrypted

861
00:35:00,560 --> 00:35:02,480
now what we can do

862
00:35:02,480 --> 00:35:03,520
is

863
00:35:03,520 --> 00:35:05,200
since we are checking at the beneficiary

864
00:35:05,200 --> 00:35:06,000
view

865
00:35:06,000 --> 00:35:07,760
we can just go ahead and check the

866
00:35:07,760 --> 00:35:09,280
source code of it

867
00:35:09,280 --> 00:35:11,440
and we will find what exactly is the

868
00:35:11,440 --> 00:35:13,599
application doing

869
00:35:13,599 --> 00:35:16,400
so to do that let's open

870
00:35:16,400 --> 00:35:17,920
the

871
00:35:17,920 --> 00:35:19,760
application that was previously

872
00:35:19,760 --> 00:35:22,480
decompiled using the apx tool so we will

873
00:35:22,480 --> 00:35:27,320
open it using the vs code editor

874
00:35:32,640 --> 00:35:34,240
so let's say we are checking the view

875
00:35:34,240 --> 00:35:36,400
beneficiary

876
00:35:36,400 --> 00:35:39,440
let's see where view beneficiary is okay

877
00:35:39,440 --> 00:35:41,280
this looks like a function which is

878
00:35:41,280 --> 00:35:44,760
using view beneficiary

879
00:35:44,880 --> 00:35:47,200
let me just

880
00:35:47,200 --> 00:35:49,839
minimize

881
00:35:50,000 --> 00:35:53,320
my work

882
00:35:59,200 --> 00:36:01,680
all right

883
00:36:07,839 --> 00:36:10,000
great

884
00:36:10,000 --> 00:36:12,640
i hope this is visible now

885
00:36:12,640 --> 00:36:14,880
oh

886
00:36:14,880 --> 00:36:18,640
so now let's check view beneficiary

887
00:36:18,640 --> 00:36:21,599
let us again check what exactly did we

888
00:36:21,599 --> 00:36:23,280
find in the board

889
00:36:23,280 --> 00:36:24,720
the keyword

890
00:36:24,720 --> 00:36:28,000
it was enc underscore data

891
00:36:28,000 --> 00:36:30,400
so let's go ahead

892
00:36:30,400 --> 00:36:32,400
and check for the keyword enc underscore

893
00:36:32,400 --> 00:36:34,720
data

894
00:36:39,119 --> 00:36:41,359
we are not finding anything under enc

895
00:36:41,359 --> 00:36:43,520
underscore data

896
00:36:43,520 --> 00:36:46,000
nowadays we can go ahead and check view

897
00:36:46,000 --> 00:36:47,359
balance

898
00:36:47,359 --> 00:36:50,000
and hey i think there is one finding

899
00:36:50,000 --> 00:36:51,920
where the enc underscore data is being

900
00:36:51,920 --> 00:36:53,200
used

901
00:36:53,200 --> 00:36:55,760
so what does this line say

902
00:36:55,760 --> 00:36:57,040
it says that

903
00:36:57,040 --> 00:36:59,520
it is getting a json object

904
00:36:59,520 --> 00:37:01,680
from the enc underscore data it is

905
00:37:01,680 --> 00:37:04,320
taking the body of the value of enc

906
00:37:04,320 --> 00:37:06,480
underscore data and it is passing to a

907
00:37:06,480 --> 00:37:09,839
function called e dot a

908
00:37:10,160 --> 00:37:12,640
now we need to find out what does e dot

909
00:37:12,640 --> 00:37:14,880
a does

910
00:37:14,880 --> 00:37:17,680
it looks like that e dot a is decrypting

911
00:37:17,680 --> 00:37:20,079
the value that is being sent

912
00:37:20,079 --> 00:37:23,119
by the enc underscore data

913
00:37:23,119 --> 00:37:25,280
now how do we find that

914
00:37:25,280 --> 00:37:27,119
so the package that is being imported is

915
00:37:27,119 --> 00:37:30,079
c dot b dot a dot e what we could do is

916
00:37:30,079 --> 00:37:32,240
just get into c dot b

917
00:37:32,240 --> 00:37:34,799
dot a

918
00:37:35,119 --> 00:37:36,640
dot e

919
00:37:36,640 --> 00:37:38,160
so this is the package that you are

920
00:37:38,160 --> 00:37:39,200
looking at

921
00:37:39,200 --> 00:37:40,720
and then the function

922
00:37:40,720 --> 00:37:43,599
with the method name a

923
00:37:43,599 --> 00:37:45,599
again then there is another function

924
00:37:45,599 --> 00:37:47,520
that has been called let's not get into

925
00:37:47,520 --> 00:37:50,560
the rabbit hole what we could do it just

926
00:37:50,560 --> 00:37:53,359
use frida magic again and just hook on

927
00:37:53,359 --> 00:37:56,320
to the method which we saw previously

928
00:37:56,320 --> 00:37:59,440
in let's say view balance

929
00:37:59,440 --> 00:38:01,200
which was

930
00:38:01,200 --> 00:38:04,598
e dot a

931
00:38:06,320 --> 00:38:10,560
so this is the script that will be using

932
00:38:10,800 --> 00:38:13,119
to get the decrypted value

933
00:38:13,119 --> 00:38:14,800
so what we are doing here

934
00:38:14,800 --> 00:38:17,280
we are using the package which is

935
00:38:17,280 --> 00:38:19,040
c dot b dot a dot e which we saw

936
00:38:19,040 --> 00:38:20,240
previously

937
00:38:20,240 --> 00:38:21,839
we are implementing the function which

938
00:38:21,839 --> 00:38:23,760
is a which means that whenever this

939
00:38:23,760 --> 00:38:25,920
function a is called from the package c

940
00:38:25,920 --> 00:38:27,680
dot b dot a dot e

941
00:38:27,680 --> 00:38:29,200
this is the method that will get

942
00:38:29,200 --> 00:38:31,680
executed and what are we doing here we

943
00:38:31,680 --> 00:38:33,520
are just getting the data that is being

944
00:38:33,520 --> 00:38:35,119
sent to this method

945
00:38:35,119 --> 00:38:36,960
we will actually call this original

946
00:38:36,960 --> 00:38:37,839
method

947
00:38:37,839 --> 00:38:39,520
get the written value

948
00:38:39,520 --> 00:38:41,359
which hopefully should be the decrypted

949
00:38:41,359 --> 00:38:42,240
value

950
00:38:42,240 --> 00:38:44,400
will log it and then we'll just return

951
00:38:44,400 --> 00:38:46,320
the same value so that we do not crash

952
00:38:46,320 --> 00:38:48,000
the application

953
00:38:48,000 --> 00:38:51,680
all right then let's save this

954
00:38:52,480 --> 00:38:55,040
let us go ahead

955
00:38:55,040 --> 00:38:57,359
and

956
00:38:58,960 --> 00:39:02,640
let us go ahead and reload the script

957
00:39:09,040 --> 00:39:11,440
all right then looks like we are getting

958
00:39:11,440 --> 00:39:14,400
the decrypted value as well

959
00:39:14,400 --> 00:39:17,119
that is great

960
00:39:17,119 --> 00:39:19,359
but now we also need to see the value

961
00:39:19,359 --> 00:39:21,839
that is being sent

962
00:39:21,839 --> 00:39:24,000
to the server

963
00:39:24,000 --> 00:39:25,839
so basically we need the value that is

964
00:39:25,839 --> 00:39:27,520
being sent to the server so that we can

965
00:39:27,520 --> 00:39:30,400
tamper with the request and then go

966
00:39:30,400 --> 00:39:32,400
ahead with our other pen testing

967
00:39:32,400 --> 00:39:34,640
methodologies or strategies

968
00:39:34,640 --> 00:39:37,280
but first let's see how we can tamper

969
00:39:37,280 --> 00:39:39,359
the request for that first we'll have to

970
00:39:39,359 --> 00:39:43,520
decode or decrypt the requests

971
00:39:43,520 --> 00:39:46,000
so in order to find how the request can

972
00:39:46,000 --> 00:39:48,079
be tampered we need to find an api that

973
00:39:48,079 --> 00:39:50,400
actually has got the requests

974
00:39:50,400 --> 00:39:53,200
so let's just click on few of the apis

975
00:39:53,200 --> 00:39:55,440
over here and see if we can find any api

976
00:39:55,440 --> 00:39:58,640
that actually has got the request

977
00:39:58,640 --> 00:40:02,078
well this does not have one

978
00:40:03,119 --> 00:40:06,240
my balance does not have

979
00:40:08,839 --> 00:40:11,520
one transactions

980
00:40:11,520 --> 00:40:13,759
now

981
00:40:17,760 --> 00:40:20,720
we get one form

982
00:40:23,520 --> 00:40:25,520
so let's go ahead and transfer some

983
00:40:25,520 --> 00:40:29,040
money see if that works

984
00:40:29,520 --> 00:40:31,839
enter the account number again which is

985
00:40:31,839 --> 00:40:33,359
three times to

986
00:40:33,359 --> 00:40:35,280
three times two

987
00:40:35,280 --> 00:40:40,079
into the amount let's just send one

988
00:40:41,280 --> 00:40:43,280
it has not

989
00:40:43,280 --> 00:40:45,599
found any fingerprint sensor i hope it

990
00:40:45,599 --> 00:40:48,319
goes ahead

991
00:40:49,359 --> 00:40:52,759
and it won't

992
00:40:58,640 --> 00:41:00,640
this is because we have not implemented

993
00:41:00,640 --> 00:41:03,040
a pin if we had implemented a security

994
00:41:03,040 --> 00:41:05,119
pin this would have gone ahead alright

995
00:41:05,119 --> 00:41:06,720
then looks like we are not finding any

996
00:41:06,720 --> 00:41:08,560
method from here let's just go into the

997
00:41:08,560 --> 00:41:10,400
source code and see if we can find any

998
00:41:10,400 --> 00:41:11,760
method

999
00:41:11,760 --> 00:41:14,880
let's check bank login

1000
00:41:16,640 --> 00:41:18,480
all right then looks like this is

1001
00:41:18,480 --> 00:41:20,480
something that is interesting

1002
00:41:20,480 --> 00:41:23,200
it is taking user name and password okay

1003
00:41:23,200 --> 00:41:25,839
wait this is something

1004
00:41:25,839 --> 00:41:28,560
we had found in the burp as well

1005
00:41:28,560 --> 00:41:31,280
if you check login

1006
00:41:31,280 --> 00:41:32,960
the request is actually sending some

1007
00:41:32,960 --> 00:41:34,400
data

1008
00:41:34,400 --> 00:41:36,640
which is encrypted

1009
00:41:36,640 --> 00:41:40,240
let's try and leverage this

1010
00:41:43,920 --> 00:41:46,160
so here the username password is being

1011
00:41:46,160 --> 00:41:48,319
sent and it's being put in enc

1012
00:41:48,319 --> 00:41:49,760
underscore data

1013
00:41:49,760 --> 00:41:51,200
as a key

1014
00:41:51,200 --> 00:41:52,880
and e dot b

1015
00:41:52,880 --> 00:41:54,720
method is being called

1016
00:41:54,720 --> 00:41:57,599
before sending this json object this is

1017
00:41:57,599 --> 00:42:00,240
the json object that was created

1018
00:42:00,240 --> 00:42:02,480
now this e dot b could be the function

1019
00:42:02,480 --> 00:42:04,800
that is used to encrypt the data so how

1020
00:42:04,800 --> 00:42:07,040
do we do this again we already know

1021
00:42:07,040 --> 00:42:10,560
where the method is being which is in

1022
00:42:10,560 --> 00:42:12,000
so e dot b

1023
00:42:12,000 --> 00:42:16,720
is a part of c dot b dot a dot e now we

1024
00:42:16,720 --> 00:42:18,640
we won't go into the rabbit hole again

1025
00:42:18,640 --> 00:42:21,119
we will just write as frida script

1026
00:42:21,119 --> 00:42:24,640
to decrypt this value

1027
00:42:25,359 --> 00:42:27,119
as you can see here this is the method

1028
00:42:27,119 --> 00:42:28,640
that we are using

1029
00:42:28,640 --> 00:42:31,280
to decrypt the encrypted value

1030
00:42:31,280 --> 00:42:33,119
so we are again using the same package

1031
00:42:33,119 --> 00:42:35,440
which is c dot b dot a dot e

1032
00:42:35,440 --> 00:42:37,119
this time we are implementing the method

1033
00:42:37,119 --> 00:42:37,839
b

1034
00:42:37,839 --> 00:42:39,680
last time we had implemented the method

1035
00:42:39,680 --> 00:42:42,240
a which was the decryption method

1036
00:42:42,240 --> 00:42:45,520
this method is used for encryption

1037
00:42:45,520 --> 00:42:47,040
and now what we are going to do over

1038
00:42:47,040 --> 00:42:49,520
here is we will get the data

1039
00:42:49,520 --> 00:42:50,240
the

1040
00:42:50,240 --> 00:42:53,040
original data before encryption

1041
00:42:53,040 --> 00:42:55,680
then will be encrypting the data and

1042
00:42:55,680 --> 00:42:58,319
then we'll be logging it again and then

1043
00:42:58,319 --> 00:43:00,240
we will return the data as is so that

1044
00:43:00,240 --> 00:43:02,079
the application does not crash

1045
00:43:02,079 --> 00:43:04,960
so let's just save this file

1046
00:43:04,960 --> 00:43:07,839
let's close it

1047
00:43:07,839 --> 00:43:10,240
or we could keep it running

1048
00:43:10,240 --> 00:43:12,880
let's come here

1049
00:43:12,880 --> 00:43:14,960
just a few enter so that we do not mess

1050
00:43:14,960 --> 00:43:16,880
up

1051
00:43:16,880 --> 00:43:19,680
let's reload

1052
00:43:21,760 --> 00:43:24,160
and now what we could do

1053
00:43:24,160 --> 00:43:27,839
is we could log out

1054
00:43:41,760 --> 00:43:43,520
and login

1055
00:43:43,520 --> 00:43:46,160
user1

1056
00:43:47,760 --> 00:43:50,800
and password1

1057
00:43:50,960 --> 00:43:52,960
there we go we are able to get the

1058
00:43:52,960 --> 00:43:55,839
decrypted data

1059
00:43:57,680 --> 00:44:00,000
now let's understand how the encryption

1060
00:44:00,000 --> 00:44:01,839
and decryption is working

1061
00:44:01,839 --> 00:44:05,119
because we cannot keep on doing this if

1062
00:44:05,119 --> 00:44:07,119
we have to tamper the value while

1063
00:44:07,119 --> 00:44:09,440
sending the encrypted data we need a

1064
00:44:09,440 --> 00:44:12,319
code on our local site that will easily

1065
00:44:12,319 --> 00:44:14,480
encrypt and decrypt for us but in order

1066
00:44:14,480 --> 00:44:16,240
to write a local code we'll have to

1067
00:44:16,240 --> 00:44:18,160
understand how the encryption decryption

1068
00:44:18,160 --> 00:44:20,000
is working in the application

1069
00:44:20,000 --> 00:44:22,480
now we know that the method e dot b is

1070
00:44:22,480 --> 00:44:23,680
being called

1071
00:44:23,680 --> 00:44:26,560
which is the package c dot b dot a dot e

1072
00:44:26,560 --> 00:44:28,560
is being used for both encryption and

1073
00:44:28,560 --> 00:44:31,200
decryption so let's go ahead and check

1074
00:44:31,200 --> 00:44:32,880
that package

1075
00:44:32,880 --> 00:44:34,720
so what i'm going to do is i'm going to

1076
00:44:34,720 --> 00:44:37,359
visit c dot b

1077
00:44:37,359 --> 00:44:39,520
dot a

1078
00:44:39,520 --> 00:44:41,200
dot e

1079
00:44:41,200 --> 00:44:43,839
wherein i can see that the method a was

1080
00:44:43,839 --> 00:44:46,319
used for decryption the method b was

1081
00:44:46,319 --> 00:44:48,000
used for encryption

1082
00:44:48,000 --> 00:44:50,560
and what is common in this the common is

1083
00:44:50,560 --> 00:44:52,720
method e dot c

1084
00:44:52,720 --> 00:44:54,880
which is e dot c which is being used as

1085
00:44:54,880 --> 00:44:56,560
you can see in the decryption what it is

1086
00:44:56,560 --> 00:44:59,839
doing is it is passing the

1087
00:44:59,839 --> 00:45:00,640
the

1088
00:45:00,640 --> 00:45:05,280
base 64 decoded value to e dot e.c

1089
00:45:05,280 --> 00:45:06,240
while

1090
00:45:06,240 --> 00:45:06,960
in

1091
00:45:06,960 --> 00:45:09,520
method b as you can see over here

1092
00:45:09,520 --> 00:45:11,359
it is first encoding

1093
00:45:11,359 --> 00:45:13,520
it is first passing the value directly

1094
00:45:13,520 --> 00:45:14,880
which means that it is a plain text

1095
00:45:14,880 --> 00:45:19,119
value and then base 64 encoding

1096
00:45:19,119 --> 00:45:22,079
so let's see what this exactly is

1097
00:45:22,079 --> 00:45:24,319
now

1098
00:45:25,440 --> 00:45:27,119
the logic that is being used for

1099
00:45:27,119 --> 00:45:29,440
encryption and decryption is not a part

1100
00:45:29,440 --> 00:45:32,240
of this and could be done as a homework

1101
00:45:32,240 --> 00:45:34,079
what we are going to do is we will

1102
00:45:34,079 --> 00:45:37,440
basically understand what exactly it is

1103
00:45:37,440 --> 00:45:39,920
how exactly can we implement this

1104
00:45:39,920 --> 00:45:41,359
now we can see that there is a hard

1105
00:45:41,359 --> 00:45:42,800
coded key

1106
00:45:42,800 --> 00:45:46,240
that we can use

1107
00:45:46,240 --> 00:45:49,280
which is being used as well

1108
00:45:49,280 --> 00:45:52,240
and then there are a few operations

1109
00:45:52,240 --> 00:45:54,480
that are being implemented

1110
00:45:54,480 --> 00:45:56,000
now what we are going to do is we are

1111
00:45:56,000 --> 00:45:57,680
not going to go into the depth of the

1112
00:45:57,680 --> 00:45:58,880
encryption

1113
00:45:58,880 --> 00:45:59,760
but

1114
00:45:59,760 --> 00:46:01,680
let's say we have written

1115
00:46:01,680 --> 00:46:04,400
the encrypted and the decryption code

1116
00:46:04,400 --> 00:46:08,000
on the local side once we understand how

1117
00:46:08,000 --> 00:46:09,440
this encryption and decryption is

1118
00:46:09,440 --> 00:46:11,200
working on the application

1119
00:46:11,200 --> 00:46:13,119
so how easy would it be

1120
00:46:13,119 --> 00:46:16,560
just to decrypt this application

1121
00:46:16,560 --> 00:46:19,200
or decrypt the entire traffic

1122
00:46:19,200 --> 00:46:23,200
let me just spin up burp again

1123
00:46:23,520 --> 00:46:25,680
so here we can see

1124
00:46:25,680 --> 00:46:28,319
that let's say we take this encrypted

1125
00:46:28,319 --> 00:46:30,880
data and we try to decrypt it all we

1126
00:46:30,880 --> 00:46:34,880
have to do now is just copy this data

1127
00:46:37,359 --> 00:46:38,079
and

1128
00:46:38,079 --> 00:46:40,079
we just have to paste it in we just have

1129
00:46:40,079 --> 00:46:41,760
to call the decrypt method that we have

1130
00:46:41,760 --> 00:46:43,119
written

1131
00:46:43,119 --> 00:46:45,520
after understanding or after reversing

1132
00:46:45,520 --> 00:46:47,280
the decryption and encryption method

1133
00:46:47,280 --> 00:46:48,880
from the application

1134
00:46:48,880 --> 00:46:51,040
and we just copied over here

1135
00:46:51,040 --> 00:46:53,200
we save this

1136
00:46:53,200 --> 00:46:54,720
and then we call

1137
00:46:54,720 --> 00:46:57,760
the script which is using node so we

1138
00:46:57,760 --> 00:47:00,960
have written the code in the javascript

1139
00:47:00,960 --> 00:47:03,040
so let's create uh

1140
00:47:03,040 --> 00:47:05,599
try and execute this and there you go we

1141
00:47:05,599 --> 00:47:07,599
are getting the decrypted value

1142
00:47:07,599 --> 00:47:11,560
let's try another one

1143
00:47:14,240 --> 00:47:17,040
let us take a response this time

1144
00:47:17,040 --> 00:47:20,480
we copy the encrypted data

1145
00:47:22,720 --> 00:47:26,640
we open the j crypto js

1146
00:47:26,960 --> 00:47:29,920
change this value

1147
00:47:30,720 --> 00:47:33,119
save the file

1148
00:47:33,119 --> 00:47:34,960
and execute it again

1149
00:47:34,960 --> 00:47:36,240
and there you go

1150
00:47:36,240 --> 00:47:38,640
we have our decrypted data

1151
00:47:38,640 --> 00:47:40,480
this is how easy

1152
00:47:40,480 --> 00:47:42,480
this has been once you understand how

1153
00:47:42,480 --> 00:47:44,720
the application is reversed

1154
00:47:44,720 --> 00:47:46,880
but it's not going to be that easy in

1155
00:47:46,880 --> 00:47:49,119
the real world example

1156
00:47:49,119 --> 00:47:51,440
now to take you ahead

1157
00:47:51,440 --> 00:47:53,440
i invite akshans

1158
00:47:53,440 --> 00:47:57,760
and i hand over it to him thank you

1159
00:47:58,800 --> 00:48:00,640
so in exploit section we are going to

1160
00:48:00,640 --> 00:48:02,960
talk about real world attack scenarios

1161
00:48:02,960 --> 00:48:05,599
and vulnerabilities in dbpa

1162
00:48:05,599 --> 00:48:07,280
so let's begin with irrelevant attack

1163
00:48:07,280 --> 00:48:08,800
scenarios

1164
00:48:08,800 --> 00:48:10,720
so first we are going to discuss about

1165
00:48:10,720 --> 00:48:13,200
sensitive information disclosure so in

1166
00:48:13,200 --> 00:48:14,000
this

1167
00:48:14,000 --> 00:48:16,559
we are going to talk about a researcher

1168
00:48:16,559 --> 00:48:17,520
report

1169
00:48:17,520 --> 00:48:19,520
that was

1170
00:48:19,520 --> 00:48:21,599
being disclosed on hacker one

1171
00:48:21,599 --> 00:48:24,160
and the application was coinbase

1172
00:48:24,160 --> 00:48:26,240
so in coinbase application

1173
00:48:26,240 --> 00:48:28,559
there was a bug where

1174
00:48:28,559 --> 00:48:30,720
logging was enabled and which would

1175
00:48:30,720 --> 00:48:33,040
result in

1176
00:48:33,040 --> 00:48:35,200
the highest impact for access token

1177
00:48:35,200 --> 00:48:38,000
leakage so basically when a user would

1178
00:48:38,000 --> 00:48:40,079
login into facebook

1179
00:48:40,079 --> 00:48:41,520
uh

1180
00:48:41,520 --> 00:48:43,760
the response the oauth response code

1181
00:48:43,760 --> 00:48:45,680
would be sent back to the application

1182
00:48:45,680 --> 00:48:47,920
but in this case what was also happening

1183
00:48:47,920 --> 00:48:49,280
is that

1184
00:48:49,280 --> 00:48:51,359
the application was receiving it but

1185
00:48:51,359 --> 00:48:54,559
also the logging was enabled so

1186
00:48:54,559 --> 00:48:56,880
via log cat anyone could also see that

1187
00:48:56,880 --> 00:48:58,960
responsible so researcher further

1188
00:48:58,960 --> 00:49:01,520
escalated and was able to obtain the

1189
00:49:01,520 --> 00:49:04,079
access token for an account by also

1190
00:49:04,079 --> 00:49:06,640
using client secret

1191
00:49:06,640 --> 00:49:09,119
coming to second vulnerability there was

1192
00:49:09,119 --> 00:49:11,680
user input leakage so this happened in

1193
00:49:11,680 --> 00:49:13,839
grammarly keyboard application

1194
00:49:13,839 --> 00:49:15,760
so in grammarly keyboard application

1195
00:49:15,760 --> 00:49:19,280
before 4.1 there was leakage in user

1196
00:49:19,280 --> 00:49:21,119
input text field

1197
00:49:21,119 --> 00:49:22,480
but

1198
00:49:22,480 --> 00:49:25,200
currently uh grammarly keyboard is not

1199
00:49:25,200 --> 00:49:27,599
supported less than version 5.0 so the

1200
00:49:27,599 --> 00:49:31,839
vulnerability is itself prevented

1201
00:49:32,000 --> 00:49:34,480
third we are coming to access in web

1202
00:49:34,480 --> 00:49:37,280
view so this was reported by pachi pro

1203
00:49:37,280 --> 00:49:38,319
and

1204
00:49:38,319 --> 00:49:40,559
in grab application

1205
00:49:40,559 --> 00:49:44,000
so in this the issues were related with

1206
00:49:44,000 --> 00:49:46,079
deep link and webview

1207
00:49:46,079 --> 00:49:46,960
so

1208
00:49:46,960 --> 00:49:49,520
what basically the issue was that deep

1209
00:49:49,520 --> 00:49:51,359
link was accepting

1210
00:49:51,359 --> 00:49:54,400
page url parameter and this parameter

1211
00:49:54,400 --> 00:49:56,720
was able to open

1212
00:49:56,720 --> 00:49:59,040
was able to load url

1213
00:49:59,040 --> 00:50:01,040
in the application

1214
00:50:01,040 --> 00:50:01,760
so

1215
00:50:01,760 --> 00:50:04,079
once it was loaded in the application

1216
00:50:04,079 --> 00:50:07,040
user can send a deep link url and it

1217
00:50:07,040 --> 00:50:08,880
would be loaded inside the application

1218
00:50:08,880 --> 00:50:10,079
sandbox

1219
00:50:10,079 --> 00:50:13,119
so backy pro further escalated it and

1220
00:50:13,119 --> 00:50:15,920
then he was also able to get

1221
00:50:15,920 --> 00:50:17,760
grab user information

1222
00:50:17,760 --> 00:50:20,720
so for a particular user who was able to

1223
00:50:20,720 --> 00:50:23,359
get information of them

1224
00:50:23,359 --> 00:50:25,359
so how this was exactly triggered let's

1225
00:50:25,359 --> 00:50:28,400
see so as you can see like

1226
00:50:28,400 --> 00:50:30,640
the page parameter was vulnerable which

1227
00:50:30,640 --> 00:50:33,599
was able to open any url

1228
00:50:33,599 --> 00:50:34,480
now

1229
00:50:34,480 --> 00:50:37,200
once this could open any url the the

1230
00:50:37,200 --> 00:50:39,839
first major attacks can be the user can

1231
00:50:39,839 --> 00:50:43,040
do and open redirect and can send him to

1232
00:50:43,040 --> 00:50:45,520
a malicious webpage or they can show in

1233
00:50:45,520 --> 00:50:48,880
pop-up or alert kind of thing but

1234
00:50:48,880 --> 00:50:51,040
in this case what was happening is

1235
00:50:51,040 --> 00:50:52,240
basically

1236
00:50:52,240 --> 00:50:54,319
the webview had an interesting setting

1237
00:50:54,319 --> 00:50:56,480
that would support zendex activity web

1238
00:50:56,480 --> 00:50:58,480
interface and basically this what

1239
00:50:58,480 --> 00:51:01,359
allowed is to get grab information user

1240
00:51:01,359 --> 00:51:03,760
within that webpage so basically for the

1241
00:51:03,760 --> 00:51:06,640
poc if someone had loaded windowed or

1242
00:51:06,640 --> 00:51:07,839
under

1243
00:51:07,839 --> 00:51:11,040
get grab user and loaded this exact page

1244
00:51:11,040 --> 00:51:12,720
what would happen basically is they

1245
00:51:12,720 --> 00:51:14,880
could get grab user information

1246
00:51:14,880 --> 00:51:17,440
so this was a sensitive one which was

1247
00:51:17,440 --> 00:51:19,280
happening by accesses

1248
00:51:19,280 --> 00:51:21,280
and also the deep link was involved so

1249
00:51:21,280 --> 00:51:25,119
this was a chain of multiple issues

1250
00:51:28,880 --> 00:51:31,040
so now let's look at vulnerabilities

1251
00:51:31,040 --> 00:51:33,520
that we have laid out in dbp so we are

1252
00:51:33,520 --> 00:51:35,040
going to see demo for two of the

1253
00:51:35,040 --> 00:51:36,880
vulnerabilities that is for sensory

1254
00:51:36,880 --> 00:51:39,200
information and disclosure and accesses

1255
00:51:39,200 --> 00:51:42,000
in webview deep link

1256
00:51:42,000 --> 00:51:42,800
so

1257
00:51:42,800 --> 00:51:46,599
let's start with this

1258
00:51:50,240 --> 00:51:52,720
so first we are going to see

1259
00:51:52,720 --> 00:51:54,720
the

1260
00:51:54,720 --> 00:51:56,960
sensory information disclosure

1261
00:51:56,960 --> 00:51:58,720
that is we are going to see how we can

1262
00:51:58,720 --> 00:52:00,480
get an access token

1263
00:52:00,480 --> 00:52:01,440
from

1264
00:52:01,440 --> 00:52:03,599
the application

1265
00:52:03,599 --> 00:52:06,240
so here let's first look at the activity

1266
00:52:06,240 --> 00:52:08,000
so in bank login activity which is the

1267
00:52:08,000 --> 00:52:09,599
login page for our

1268
00:52:09,599 --> 00:52:10,720
application

1269
00:52:10,720 --> 00:52:13,839
here once a user login basically

1270
00:52:13,839 --> 00:52:15,760
the application also login for access

1271
00:52:15,760 --> 00:52:17,680
token so basically

1272
00:52:17,680 --> 00:52:20,559
one can read the access token by adp

1273
00:52:20,559 --> 00:52:24,559
logs so let's see the demo for same

1274
00:52:26,079 --> 00:52:29,119
so we have our application here

1275
00:52:29,119 --> 00:52:30,000
and

1276
00:52:30,000 --> 00:52:31,280
let's

1277
00:52:31,280 --> 00:52:34,640
do login

1278
00:52:37,040 --> 00:52:38,079
admin

1279
00:52:38,079 --> 00:52:40,640
user account

1280
00:52:40,640 --> 00:52:42,720
and let's grip

1281
00:52:42,720 --> 00:52:46,559
for the access token and let's login

1282
00:52:46,559 --> 00:52:47,920
so as you can see

1283
00:52:47,920 --> 00:52:50,079
we got the admin

1284
00:52:50,079 --> 00:52:54,400
user access token where the adb logs

1285
00:52:54,800 --> 00:52:56,640
so this was an issue

1286
00:52:56,640 --> 00:52:58,800
where the application is logging which

1287
00:52:58,800 --> 00:53:01,040
it should not and because of that we

1288
00:53:01,040 --> 00:53:03,920
were able to get the access token

1289
00:53:03,920 --> 00:53:05,200
and

1290
00:53:05,200 --> 00:53:08,240
see the admin account so by using this

1291
00:53:08,240 --> 00:53:12,160
basically you can also log in as admin

1292
00:53:12,160 --> 00:53:15,440
now second we will see an access issue

1293
00:53:15,440 --> 00:53:18,160
that exists due to chaining of

1294
00:53:18,160 --> 00:53:20,720
web view and deep link

1295
00:53:20,720 --> 00:53:22,079
now let's look

1296
00:53:22,079 --> 00:53:22,960
at

1297
00:53:22,960 --> 00:53:24,960
android studio again and let's look at

1298
00:53:24,960 --> 00:53:27,359
the code for android manifest

1299
00:53:27,359 --> 00:53:29,200
so in manifest if we see we have

1300
00:53:29,200 --> 00:53:31,760
currency rates activity which basically

1301
00:53:31,760 --> 00:53:35,040
accepts a deep link so the steep link is

1302
00:53:35,040 --> 00:53:36,800
a url basically

1303
00:53:36,800 --> 00:53:37,839
where

1304
00:53:37,839 --> 00:53:40,079
the scheme is http and the host is

1305
00:53:40,079 --> 00:53:43,280
xe.com so basically then the application

1306
00:53:43,280 --> 00:53:45,119
expects that

1307
00:53:45,119 --> 00:53:48,880
a deep link within protocol http

1308
00:53:48,880 --> 00:53:51,920
and a host xp.com can be accepted by

1309
00:53:51,920 --> 00:53:54,240
this application now let's see how this

1310
00:53:54,240 --> 00:53:55,760
vlink will be consumed by the

1311
00:53:55,760 --> 00:53:57,760
application

1312
00:53:57,760 --> 00:54:00,400
so if we open currency rates activity we

1313
00:54:00,400 --> 00:54:02,640
see that the d-ping has two ways to

1314
00:54:02,640 --> 00:54:05,359
being accepted the first being if the

1315
00:54:05,359 --> 00:54:09,440
deep link is null it would directly open

1316
00:54:09,440 --> 00:54:10,720
xe.com

1317
00:54:10,720 --> 00:54:13,359
but if there is a url parameter attached

1318
00:54:13,359 --> 00:54:16,960
to it then it would load that url

1319
00:54:16,960 --> 00:54:18,079
basically

1320
00:54:18,079 --> 00:54:19,119
uh

1321
00:54:19,119 --> 00:54:21,760
after the url uh parameter the value of

1322
00:54:21,760 --> 00:54:23,040
that so

1323
00:54:23,040 --> 00:54:26,319
just giving you an example here

1324
00:54:26,319 --> 00:54:29,040
if we have http

1325
00:54:29,040 --> 00:54:29,839
as

1326
00:54:29,839 --> 00:54:31,680
http

1327
00:54:31,680 --> 00:54:34,680
www.xe.com

1328
00:54:34,720 --> 00:54:36,640
comma url

1329
00:54:36,640 --> 00:54:39,839
equal to http

1330
00:54:40,079 --> 00:54:42,000
google.com

1331
00:54:42,000 --> 00:54:44,000
so if we see here

1332
00:54:44,000 --> 00:54:46,000
google.com will be open

1333
00:54:46,000 --> 00:54:48,079
if we send this url

1334
00:54:48,079 --> 00:54:50,319
to the default

1335
00:54:50,319 --> 00:54:51,119
now

1336
00:54:51,119 --> 00:54:53,119
let's see what the potential impact can

1337
00:54:53,119 --> 00:54:55,520
be of this

1338
00:54:55,520 --> 00:54:58,720
now we have seen that we can send a

1339
00:54:58,720 --> 00:55:01,599
arbitrary url from our side which we can

1340
00:55:01,599 --> 00:55:04,480
send it to the deep link now using this

1341
00:55:04,480 --> 00:55:07,760
we can get an open redirect but let's

1342
00:55:07,760 --> 00:55:09,599
see an xss example

1343
00:55:09,599 --> 00:55:11,760
so what we can do is basically load a

1344
00:55:11,760 --> 00:55:13,599
page a web page

1345
00:55:13,599 --> 00:55:16,480
we can open it in chrome or in

1346
00:55:16,480 --> 00:55:17,920
wi-fi also

1347
00:55:17,920 --> 00:55:20,160
so under this what we'll do is basically

1348
00:55:20,160 --> 00:55:23,760
first add xc.com that is the protocol

1349
00:55:23,760 --> 00:55:26,640
and the host then add the url parameter

1350
00:55:26,640 --> 00:55:27,920
which will

1351
00:55:27,920 --> 00:55:30,160
help us to pass the

1352
00:55:30,160 --> 00:55:32,480
other half that is other url for that

1353
00:55:32,480 --> 00:55:34,720
and then we can execute the javascript

1354
00:55:34,720 --> 00:55:36,160
as well

1355
00:55:36,160 --> 00:55:40,920
so let's see the demo for same

1356
00:55:49,920 --> 00:55:51,599
so as you can see we have loaded this

1357
00:55:51,599 --> 00:55:52,480
page

1358
00:55:52,480 --> 00:55:53,359
and

1359
00:55:53,359 --> 00:55:55,119
if we click on lucky draw let's see what

1360
00:55:55,119 --> 00:55:57,280
happens

1361
00:55:57,280 --> 00:55:59,280
so we get the prompt

1362
00:55:59,280 --> 00:56:03,599
and we'll click just one

1363
00:56:03,599 --> 00:56:05,599
as you see we get

1364
00:56:05,599 --> 00:56:07,760
the javascript being executed and we get

1365
00:56:07,760 --> 00:56:08,880
the prompt

1366
00:56:08,880 --> 00:56:12,160
for enter password

1367
00:56:13,680 --> 00:56:14,960
now this was

1368
00:56:14,960 --> 00:56:16,720
the demo for the two vulnerabilities

1369
00:56:16,720 --> 00:56:19,598
that we have covered

1370
00:56:22,480 --> 00:56:24,240
thank you akshaya and srishkish for the

1371
00:56:24,240 --> 00:56:26,400
wonderful session

1372
00:56:26,400 --> 00:56:27,839
i hope

1373
00:56:27,839 --> 00:56:28,880
you have

1374
00:56:28,880 --> 00:56:31,040
got some idea on what we are trying to

1375
00:56:31,040 --> 00:56:32,880
achieve and the kind of vulnerabilities

1376
00:56:32,880 --> 00:56:35,280
which we have indicated with

1377
00:56:35,280 --> 00:56:38,559
the vulnerable application

1378
00:56:38,880 --> 00:56:41,599
so just a closing note

1379
00:56:41,599 --> 00:56:44,720
so with this all said we developed this

1380
00:56:44,720 --> 00:56:46,400
application the damn vulnerable bank

1381
00:56:46,400 --> 00:56:48,720
with the willingness to share learn and

1382
00:56:48,720 --> 00:56:51,440
teach android application security

1383
00:56:51,440 --> 00:56:53,440
we want to give the community what we

1384
00:56:53,440 --> 00:56:55,760
didn't have when we got started

1385
00:56:55,760 --> 00:56:57,119
just knowing the os top 10

1386
00:56:57,119 --> 00:56:59,520
vulnerabilities will not help us in the

1387
00:56:59,520 --> 00:57:02,559
long run or when we try to pen test

1388
00:57:02,559 --> 00:57:05,200
applications

1389
00:57:05,359 --> 00:57:07,599
at large scale

1390
00:57:07,599 --> 00:57:09,119
so we want to provide an interface that

1391
00:57:09,119 --> 00:57:11,440
will help you while doing the real world

1392
00:57:11,440 --> 00:57:13,839
pen tests as well so we are constantly

1393
00:57:13,839 --> 00:57:14,960
striving

1394
00:57:14,960 --> 00:57:16,720
to keep this application updated with

1395
00:57:16,720 --> 00:57:18,640
the latest vulnerabilities and make it

1396
00:57:18,640 --> 00:57:21,119
as harder as possible to level up the

1397
00:57:21,119 --> 00:57:22,400
skills of the beginners starting with

1398
00:57:22,400 --> 00:57:24,720
android application security so that

1399
00:57:24,720 --> 00:57:27,200
they will have access and knowledge to

1400
00:57:27,200 --> 00:57:28,799
different techniques

1401
00:57:28,799 --> 00:57:32,240
other than os top 10.

1402
00:57:32,240 --> 00:57:34,880
and as you can see we have the github

1403
00:57:34,880 --> 00:57:36,000
link and

1404
00:57:36,000 --> 00:57:37,440
over there and

1405
00:57:37,440 --> 00:57:39,760
we have a complete guide on how you can

1406
00:57:39,760 --> 00:57:41,520
solve all these challenges with a

1407
00:57:41,520 --> 00:57:43,599
complete walkthrough

1408
00:57:43,599 --> 00:57:45,599
as the below link

1409
00:57:45,599 --> 00:57:46,640
and

1410
00:57:46,640 --> 00:57:48,559
yeah we are open for the q and d and you

1411
00:57:48,559 --> 00:57:51,520
can contact us on twitter on this below

1412
00:57:51,520 --> 00:57:53,119
links

1413
00:57:53,119 --> 00:57:55,520
thank you for staying with us so far

1414
00:57:55,520 --> 00:57:57,440
i would like to hear more on your

1415
00:57:57,440 --> 00:58:00,319
feedback okay guys

1416
00:58:00,319 --> 00:58:02,960
thank you for the great talk

1417
00:58:02,960 --> 00:58:07,040
we are now ready for the q a session

1418
00:58:07,680 --> 00:58:09,119
do you have any questions from the

1419
00:58:09,119 --> 00:58:10,640
audience

1420
00:58:10,640 --> 00:58:14,079
on youtube in zoom

1421
00:58:14,079 --> 00:58:16,799
anywhere else

1422
00:58:18,480 --> 00:58:20,640
okay guys

1423
00:58:20,640 --> 00:58:23,799
thank you

1424
00:58:26,640 --> 00:58:28,559
okay

1425
00:58:28,559 --> 00:58:30,480
i'm checking my notes and i don't see

1426
00:58:30,480 --> 00:58:32,720
any questions is that correct or should

1427
00:58:32,720 --> 00:58:34,960
we

1428
00:58:34,960 --> 00:58:38,160
let the audience rest

1429
00:58:48,960 --> 00:58:51,119
if anyone on zoom wants to ask the

1430
00:58:51,119 --> 00:58:52,960
questions live please raise your hand

1431
00:58:52,960 --> 00:58:56,920
and i will give you the microphone

1432
00:59:05,839 --> 00:59:09,279
okay that's surprising

1433
00:59:14,480 --> 00:59:16,799
okay i will ask the question then guys

1434
00:59:16,799 --> 00:59:18,480
uh

1435
00:59:18,480 --> 00:59:21,119
do you plan to extend this work

1436
00:59:21,119 --> 00:59:23,760
somewhere else to some other platforms

1437
00:59:23,760 --> 00:59:25,110
to iot or to

1438
00:59:25,110 --> 00:59:26,720
[Music]

1439
00:59:26,720 --> 00:59:28,160
ios

1440
00:59:28,160 --> 00:59:30,240
i don't know it looks like something

1441
00:59:30,240 --> 00:59:33,558
that could scale

1442
00:59:36,960 --> 00:59:38,559
sure so

1443
00:59:38,559 --> 00:59:41,760
what we have plan right now

1444
00:59:41,760 --> 00:59:44,240
in our minds is to actually add some

1445
00:59:44,240 --> 00:59:45,200
more

1446
00:59:45,200 --> 00:59:48,000
findings that are more realistic

1447
00:59:48,000 --> 00:59:51,119
than the ctf ones so that

1448
00:59:51,119 --> 00:59:52,960
ones that who are learning right now

1449
00:59:52,960 --> 00:59:55,040
about the android android security atlas

1450
00:59:55,040 --> 00:59:56,240
specifically

1451
00:59:56,240 --> 00:59:59,119
they'll get more exposure to how and

1452
00:59:59,119 --> 01:00:01,119
what are the threats that need to be

1453
01:00:01,119 --> 01:00:03,680
checked and they could again uh come up

1454
01:00:03,680 --> 01:00:05,599
with let's say threat modeling of some

1455
01:00:05,599 --> 01:00:07,040
applications

1456
01:00:07,040 --> 01:00:08,880
that would be uh

1457
01:00:08,880 --> 01:00:11,119
that is to be integrated as well

1458
01:00:11,119 --> 01:00:12,559
and yeah

1459
01:00:12,559 --> 01:00:15,040
we invite all of you uh whoever wants to

1460
01:00:15,040 --> 01:00:16,880
contribute to the application feel free

1461
01:00:16,880 --> 01:00:19,280
to send us a pull request uh we'll work

1462
01:00:19,280 --> 01:00:21,680
on it and we can make this an app for

1463
01:00:21,680 --> 01:00:23,680
everyone in the future

1464
01:00:23,680 --> 01:00:24,880
awesome

1465
01:00:24,880 --> 01:00:25,839
awesome

1466
01:00:25,839 --> 01:00:28,720
okay so my strategy of taking fire on

1467
01:00:28,720 --> 01:00:31,040
myself and letting the audience rest

1468
01:00:31,040 --> 01:00:32,720
seems to work out we have the first

1469
01:00:32,720 --> 01:00:33,760
question

1470
01:00:33,760 --> 01:00:35,520
does the damn vulnerable bank contain

1471
01:00:35,520 --> 01:00:36,960
all the real world

1472
01:00:36,960 --> 01:00:38,880
challenges

1473
01:00:38,880 --> 01:00:40,319
it's a tricky one

1474
01:00:40,319 --> 01:00:42,079
how can you contain all the real world

1475
01:00:42,079 --> 01:00:44,640
challenges in one product but please

1476
01:00:44,640 --> 01:00:46,240
advice

1477
01:00:46,240 --> 01:00:48,319
sure so uh the challenges that we are

1478
01:00:48,319 --> 01:00:50,240
adding are the real world challenges

1479
01:00:50,240 --> 01:00:52,400
that's one thing that we can tell uh

1480
01:00:52,400 --> 01:00:54,880
there are no ctf like uh

1481
01:00:54,880 --> 01:00:57,359
challenges or we are not luring the

1482
01:00:57,359 --> 01:00:59,839
attackers in some rabbit holes so yeah

1483
01:00:59,839 --> 01:01:02,079
and uh we are going to keep on adding

1484
01:01:02,079 --> 01:01:04,160
some of the challenges as well as we

1485
01:01:04,160 --> 01:01:06,160
will be adding some of the mitigations

1486
01:01:06,160 --> 01:01:07,920
that people are using right now like

1487
01:01:07,920 --> 01:01:10,400
using some native libraries and even how

1488
01:01:10,400 --> 01:01:13,200
to bypass these mitigations as well so

1489
01:01:13,200 --> 01:01:15,280
we are trying to keep it as real as

1490
01:01:15,280 --> 01:01:18,280
possible

1491
01:01:21,600 --> 01:01:24,679
[Music]

1492
01:01:26,559 --> 01:01:28,160
i'm glad you're on mute if you're

1493
01:01:28,160 --> 01:01:30,000
speaking

1494
01:01:30,000 --> 01:01:33,119
yeah sorry i'm giving the microphone to

1495
01:01:33,119 --> 01:01:35,200
bogdan who has a question and wants to

1496
01:01:35,200 --> 01:01:38,079
ask it live please go on

1497
01:01:38,079 --> 01:01:40,720
yeah hey guys thanks a lot for your talk

1498
01:01:40,720 --> 01:01:43,280
um let me introduce myself uh i'm back

1499
01:01:43,280 --> 01:01:45,760
done i was brutal chapter leader and i

1500
01:01:45,760 --> 01:01:48,240
have a question for you uh would it be

1501
01:01:48,240 --> 01:01:51,839
easier to use real device with uh magisk

1502
01:01:51,839 --> 01:01:53,760
for example two bypass root detection

1503
01:01:53,760 --> 01:01:56,559
and some slk switch to decrypt the

1504
01:01:56,559 --> 01:01:58,960
traffic

1505
01:01:59,039 --> 01:01:59,760
hey

1506
01:01:59,760 --> 01:02:02,640
thank you for your question so um yeah i

1507
01:02:02,640 --> 01:02:04,960
mean majority of the applications can be

1508
01:02:04,960 --> 01:02:07,520
bypassed using uh matches to bypass

1509
01:02:07,520 --> 01:02:10,720
protection and even kill switches work

1510
01:02:10,720 --> 01:02:13,119
but in real life or in real world we've

1511
01:02:13,119 --> 01:02:16,240
seen applications on which these general

1512
01:02:16,240 --> 01:02:19,119
tools don't work so just for that what

1513
01:02:19,119 --> 01:02:20,880
we have done is we have been

1514
01:02:20,880 --> 01:02:24,160
implemented or used freeda so that

1515
01:02:24,160 --> 01:02:26,160
the people who are just entering into

1516
01:02:26,160 --> 01:02:28,640
android security would also get a test

1517
01:02:28,640 --> 01:02:30,640
of it so that they can use their own

1518
01:02:30,640 --> 01:02:32,480
creativity uh

1519
01:02:32,480 --> 01:02:35,039
in order to write some uh code to hook

1520
01:02:35,039 --> 01:02:37,680
into the methods uh dynamically and

1521
01:02:37,680 --> 01:02:40,799
perform some more stuff

1522
01:02:40,960 --> 01:02:43,280
okay got it thank you thanks for an

1523
01:02:43,280 --> 01:02:44,880
answer yes

1524
01:02:44,880 --> 01:02:46,839
okay next

1525
01:02:46,839 --> 01:02:49,599
question as far as i understand

1526
01:02:49,599 --> 01:02:52,640
this app doesn't use armed trust zone

1527
01:02:52,640 --> 01:02:56,160
what can you do in such case

1528
01:02:59,440 --> 01:03:02,079
i'm sorry um i i'm not able to see the

1529
01:03:02,079 --> 01:03:04,559
question can you please repeat it again

1530
01:03:04,559 --> 01:03:06,640
uh as far as i understand this app

1531
01:03:06,640 --> 01:03:09,039
doesn't use armed trust zone what can

1532
01:03:09,039 --> 01:03:12,319
you do in such cases

1533
01:03:12,799 --> 01:03:16,000
i think well uh i think it means that uh

1534
01:03:16,000 --> 01:03:18,319
what you can do when the case in the

1535
01:03:18,319 --> 01:03:20,720
case is when uh the application does use

1536
01:03:20,720 --> 01:03:23,200
arm trouser

1537
01:03:23,200 --> 01:03:24,400
um

1538
01:03:24,400 --> 01:03:26,799
i'm not sure exactly what the question i

1539
01:03:26,799 --> 01:03:28,799
mean what exactly are they expecting it

1540
01:03:28,799 --> 01:03:30,480
from the question and if you're not

1541
01:03:30,480 --> 01:03:32,319
implementing i will ask i will ask

1542
01:03:32,319 --> 01:03:34,880
alexander to clarify their question if

1543
01:03:34,880 --> 01:03:37,440
they can or maybe ask it live because

1544
01:03:37,440 --> 01:03:41,480
this is the question from zoom

1545
01:03:52,240 --> 01:03:54,240
yes alexander you can now talk please

1546
01:03:54,240 --> 01:03:56,160
and mute and go on

1547
01:03:56,160 --> 01:03:58,559
hello everyone uh let me clarify my

1548
01:03:58,559 --> 01:03:59,599
question

1549
01:03:59,599 --> 01:04:03,920
uh so arm frozen is a standard um

1550
01:04:03,920 --> 01:04:06,640
mechanism for security

1551
01:04:06,640 --> 01:04:10,480
uh extensions and uh it should

1552
01:04:10,480 --> 01:04:14,880
enhance security for device uh for using

1553
01:04:14,880 --> 01:04:15,920
uh

1554
01:04:15,920 --> 01:04:19,359
secure storage uh cryptography

1555
01:04:19,359 --> 01:04:21,920
from drazon and

1556
01:04:21,920 --> 01:04:23,440
other mechanisms

1557
01:04:23,440 --> 01:04:26,480
could you bypass such mechanism with

1558
01:04:26,480 --> 01:04:28,400
your techniques

1559
01:04:28,400 --> 01:04:31,440
got it got it uh thank you for excuse me

1560
01:04:31,440 --> 01:04:33,760
just from my understanding it's like uh

1561
01:04:33,760 --> 01:04:34,799
it's like

1562
01:04:34,799 --> 01:04:37,920
security enclave in ios right

1563
01:04:37,920 --> 01:04:39,119
right

1564
01:04:39,119 --> 01:04:41,920
uh-huh so tpm basically yeah thank you

1565
01:04:41,920 --> 01:04:44,880
for the question really interesting

1566
01:04:44,880 --> 01:04:46,880
right so uh if you're speaking about

1567
01:04:46,880 --> 01:04:48,720
some of the security measures that are

1568
01:04:48,720 --> 01:04:50,480
being actually implemented on the

1569
01:04:50,480 --> 01:04:51,760
hardware level

1570
01:04:51,760 --> 01:04:55,440
uh they won't be uh bypassed using the

1571
01:04:55,440 --> 01:04:57,920
techniques since uh like even to give an

1572
01:04:57,920 --> 01:05:00,319
example of android key store so correct

1573
01:05:00,319 --> 01:05:02,799
me if i'm wrong so even key store cannot

1574
01:05:02,799 --> 01:05:05,280
be bypassed even on the rooted devices

1575
01:05:05,280 --> 01:05:06,319
because

1576
01:05:06,319 --> 01:05:09,839
uh unless and until we get the

1577
01:05:09,839 --> 01:05:11,440
uid or the

1578
01:05:11,440 --> 01:05:14,000
id of the application we won't be able

1579
01:05:14,000 --> 01:05:15,760
to access the key store that is being

1580
01:05:15,760 --> 01:05:18,000
actually mapped for the application

1581
01:05:18,000 --> 01:05:18,880
so

1582
01:05:18,880 --> 01:05:21,760
these are the shortcomings of

1583
01:05:21,760 --> 01:05:23,200
actually hacking the applications even

1584
01:05:23,200 --> 01:05:25,119
if you are doing it on the rooted device

1585
01:05:25,119 --> 01:05:26,480
or even if the application is running on

1586
01:05:26,480 --> 01:05:29,440
a rooted device

1587
01:05:31,440 --> 01:05:32,880
thank you us

1588
01:05:32,880 --> 01:05:34,720
yes thank you

1589
01:05:34,720 --> 01:05:37,280
okay do we have any more questions we

1590
01:05:37,280 --> 01:05:39,119
have a lot of

1591
01:05:39,119 --> 01:05:42,160
feedback positive cheering on youtube

1592
01:05:42,160 --> 01:05:44,319
thank you for the great talk nice one

1593
01:05:44,319 --> 01:05:46,799
keep it going

1594
01:05:46,799 --> 01:05:48,400
yeah

1595
01:05:48,400 --> 01:05:51,280
i would just i'll just repeat that if

1596
01:05:51,280 --> 01:05:53,680
anyone in the audience wants to

1597
01:05:53,680 --> 01:05:56,720
contribute to the project

1598
01:05:56,720 --> 01:06:00,720
get back to our speakers after

1599
01:06:00,720 --> 01:06:04,880
the talk or after the conference and

1600
01:06:04,880 --> 01:06:07,520
would i post the link in the chat

1601
01:06:07,520 --> 01:06:10,480
and go ahead and do that

1602
01:06:12,079 --> 01:06:14,559
yeah you can easily find them vulnerable

1603
01:06:14,559 --> 01:06:18,559
bank on github so your prs are

1604
01:06:18,559 --> 01:06:19,839
warmly

1605
01:06:19,839 --> 01:06:22,240
welcome

1606
01:06:22,319 --> 01:06:24,160
okay any more questions we have some

1607
01:06:24,160 --> 01:06:25,920
delay with youtube

1608
01:06:25,920 --> 01:06:29,200
let's wait for about

1609
01:06:29,359 --> 01:06:33,520
20 seconds and then wrap it up

1610
01:06:33,520 --> 01:06:36,640
and the link goes to youtube channel as

1611
01:06:36,640 --> 01:06:39,640
well

1612
01:06:48,799 --> 01:06:52,400
okay gentlemen i think

1613
01:06:52,400 --> 01:06:54,799
uh that was that was a pause long enough

1614
01:06:54,799 --> 01:06:57,520
for us to

1615
01:06:58,480 --> 01:07:00,079
to be sure that all the questions were

1616
01:07:00,079 --> 01:07:01,920
answered thank you very much for the

1617
01:07:01,920 --> 01:07:05,119
great talk and uh we will get back to

1618
01:07:05,119 --> 01:07:06,000
you

1619
01:07:06,000 --> 01:07:09,039
regarding the logistics later on okay

1620
01:07:09,039 --> 01:07:10,480
thank you thank you blair thank you for

1621
01:07:10,480 --> 01:07:11,760
having me thank you thank you very much

1622
01:07:11,760 --> 01:07:13,200
for your contribution

1623
01:07:13,200 --> 01:07:14,480
and the great project that you are

1624
01:07:14,480 --> 01:07:17,760
maintaining and i again

1625
01:07:17,760 --> 01:07:19,119
uh

1626
01:07:19,119 --> 01:07:21,680
welcome everyone to contribute and join

1627
01:07:21,680 --> 01:07:24,960
this uh great opportunity to advance the

1628
01:07:24,960 --> 01:07:26,880
security knowledge around android

1629
01:07:26,880 --> 01:07:29,839
platform

