1
00:00:04,640 --> 00:00:07,440
why the options pattern is great for

2
00:00:07,440 --> 00:00:10,000
security

3
00:00:10,160 --> 00:00:11,200
hello

4
00:00:11,200 --> 00:00:13,440
my name is dima kotek

5
00:00:13,440 --> 00:00:15,360
i'm an application security engineer at

6
00:00:15,360 --> 00:00:16,640
security journey

7
00:00:16,640 --> 00:00:18,800
we provide training for developers by

8
00:00:18,800 --> 00:00:21,279
developers for all matters related to

9
00:00:21,279 --> 00:00:23,840
security

10
00:00:24,240 --> 00:00:25,920
the goals of our presentation are the

11
00:00:25,920 --> 00:00:27,359
following

12
00:00:27,359 --> 00:00:29,359
we will review the options pattern for

13
00:00:29,359 --> 00:00:32,159
complex object initialization

14
00:00:32,159 --> 00:00:33,680
we will discover the types of

15
00:00:33,680 --> 00:00:36,640
vulnerabilities it can prevent

16
00:00:36,640 --> 00:00:38,079
we will try to improve the classic

17
00:00:38,079 --> 00:00:40,800
paradigm to maximize security

18
00:00:40,800 --> 00:00:42,719
and finally i hope this talk inspires

19
00:00:42,719 --> 00:00:46,399
you to adopt the pattern when it fits

20
00:00:46,399 --> 00:00:48,879
the examples will be provided in golang

21
00:00:48,879 --> 00:00:50,879
because i like it very much and they fit

22
00:00:50,879 --> 00:00:54,320
very nicely on slides

23
00:00:54,320 --> 00:00:56,239
well let's get started first by defining

24
00:00:56,239 --> 00:00:58,320
the problem and the problem we have this

25
00:00:58,320 --> 00:01:02,320
year is the o wasp top 10 number six

26
00:01:02,320 --> 00:01:05,920
security misconfiguration

27
00:01:06,240 --> 00:01:08,479
it doesn't matter how well your

28
00:01:08,479 --> 00:01:10,320
application is protected

29
00:01:10,320 --> 00:01:12,000
by static code analysis and emi code

30
00:01:12,000 --> 00:01:13,119
analysis

31
00:01:13,119 --> 00:01:15,920
firewalls all sorts of great tools if it

32
00:01:15,920 --> 00:01:19,360
is insecurely misconfigured

33
00:01:19,360 --> 00:01:21,360
so many services in production right now

34
00:01:21,360 --> 00:01:23,200
are securely misconfigured and are

35
00:01:23,200 --> 00:01:27,040
attacked and exploited easily

36
00:01:27,040 --> 00:01:28,799
attackers love

37
00:01:28,799 --> 00:01:30,799
different types of misconfiguration

38
00:01:30,799 --> 00:01:35,520
notably for example a hamstrung cipher

39
00:01:36,079 --> 00:01:37,360
you can provide

40
00:01:37,360 --> 00:01:40,079
a weak source of random for your crypto

41
00:01:40,079 --> 00:01:42,560
a weak algorithm a weak key length or a

42
00:01:42,560 --> 00:01:45,360
set of parameters that makes the cipher

43
00:01:45,360 --> 00:01:47,119
unusable

44
00:01:47,119 --> 00:01:48,720
it is also common to see services

45
00:01:48,720 --> 00:01:51,920
shipped with missing access controls

46
00:01:51,920 --> 00:01:53,840
something that was supposed to be not

47
00:01:53,840 --> 00:01:54,960
accessible

48
00:01:54,960 --> 00:01:56,640
protected by credentials

49
00:01:56,640 --> 00:01:58,479
was shipped without

50
00:01:58,479 --> 00:02:01,920
and of course debug backdoors

51
00:02:01,920 --> 00:02:04,240
to get our services running well we need

52
00:02:04,240 --> 00:02:05,759
instrumentation we need additional

53
00:02:05,759 --> 00:02:08,959
facility and observability to find out

54
00:02:08,959 --> 00:02:10,560
what's wrong

55
00:02:10,560 --> 00:02:13,040
so many of our services are running with

56
00:02:13,040 --> 00:02:15,840
those additional observability helpers

57
00:02:15,840 --> 00:02:18,080
and back doors in production

58
00:02:18,080 --> 00:02:21,120
and when attacker discovers

59
00:02:21,120 --> 00:02:22,879
back door especially if it's using a

60
00:02:22,879 --> 00:02:25,440
weak or default password it is for them

61
00:02:25,440 --> 00:02:26,640
like candy

62
00:02:26,640 --> 00:02:29,520
easy to take

63
00:02:29,520 --> 00:02:31,280
the difficulty with security

64
00:02:31,280 --> 00:02:33,120
misconfiguration is that two common

65
00:02:33,120 --> 00:02:35,440
pieces of advice on the street are not

66
00:02:35,440 --> 00:02:36,800
super helpful

67
00:02:36,800 --> 00:02:38,400
the first one is of course we're called

68
00:02:38,400 --> 00:02:41,120
to stop misconfiguring services and yes

69
00:02:41,120 --> 00:02:42,800
we can try

70
00:02:42,800 --> 00:02:44,879
but with sophistication and with growing

71
00:02:44,879 --> 00:02:46,480
complexity of our networks and

72
00:02:46,480 --> 00:02:48,840
applications it's very difficult to keep

73
00:02:48,840 --> 00:02:52,319
up the second one is to use an analysis

74
00:02:52,319 --> 00:02:54,000
tool a static or dynamic analysis tool

75
00:02:54,000 --> 00:02:56,400
that can detect ms configuration problem

76
00:02:56,400 --> 00:02:59,200
and that's good and helpful however the

77
00:02:59,200 --> 00:03:01,440
cost of discovery

78
00:03:01,440 --> 00:03:04,000
of a misconfiguration problem is great

79
00:03:04,000 --> 00:03:06,080
and the static analysis tool cannot

80
00:03:06,080 --> 00:03:07,840
detect it unless it has seen somewhere

81
00:03:07,840 --> 00:03:10,879
else in the wild do you want to risk it

82
00:03:10,879 --> 00:03:13,519
the real question is can we do something

83
00:03:13,519 --> 00:03:15,280
on the engineering side

84
00:03:15,280 --> 00:03:16,840
to make our application

85
00:03:16,840 --> 00:03:19,760
resistant to misconfiguration

86
00:03:19,760 --> 00:03:21,360
and yes we can

87
00:03:21,360 --> 00:03:23,599
enter the options pattern the options

88
00:03:23,599 --> 00:03:25,360
pattern is a flexible object

89
00:03:25,360 --> 00:03:27,519
provisioning strategy using a list of

90
00:03:27,519 --> 00:03:29,599
independent object modifiers

91
00:03:29,599 --> 00:03:32,560
those are typically functions imagine

92
00:03:32,560 --> 00:03:34,400
your application is an engine

93
00:03:34,400 --> 00:03:36,879
and you will have a list of tweaks

94
00:03:36,879 --> 00:03:39,280
applied sequentially to your engine each

95
00:03:39,280 --> 00:03:42,080
one helping with one or two parameters

96
00:03:42,080 --> 00:03:43,440
in isolation

97
00:03:43,440 --> 00:03:45,920
to get our engine to get our application

98
00:03:45,920 --> 00:03:48,400
ready to run in production in a secure

99
00:03:48,400 --> 00:03:50,640
way

100
00:03:50,799 --> 00:03:52,959
to demonstrate this let's go back to a

101
00:03:52,959 --> 00:03:56,720
java classic the builder pattern

102
00:03:56,720 --> 00:03:58,560
suppose we need a bank account and we

103
00:03:58,560 --> 00:04:02,080
will call bank account builder a class

104
00:04:02,080 --> 00:04:04,239
that creates a class

105
00:04:04,239 --> 00:04:05,840
and each

106
00:04:05,840 --> 00:04:07,920
step of the builder pattern

107
00:04:07,920 --> 00:04:09,200
uses

108
00:04:09,200 --> 00:04:12,159
a list of options or a list of settings

109
00:04:12,159 --> 00:04:14,400
that are sequentially applied to the

110
00:04:14,400 --> 00:04:16,238
object and then the final build

111
00:04:16,238 --> 00:04:18,720
method returns our bank account

112
00:04:18,720 --> 00:04:20,798
this is very familiar

113
00:04:20,798 --> 00:04:22,320
the options pattern is like an odd

114
00:04:22,320 --> 00:04:24,160
cousin of the builder pattern there's a

115
00:04:24,160 --> 00:04:26,000
lot of superficial similarity but

116
00:04:26,000 --> 00:04:28,800
there's a great difference for security

117
00:04:28,800 --> 00:04:30,400
as we will see

118
00:04:30,400 --> 00:04:32,560
in our second example i'm showing you

119
00:04:32,560 --> 00:04:36,080
how to apply an options pattern also to

120
00:04:36,080 --> 00:04:38,000
initialize our bank account

121
00:04:38,000 --> 00:04:39,919
and what we do is instead of calling a

122
00:04:39,919 --> 00:04:41,280
string of methods

123
00:04:41,280 --> 00:04:43,840
we're passing a list of options

124
00:04:43,840 --> 00:04:45,520
to our constructor

125
00:04:45,520 --> 00:04:47,280
we're using an option with client with

126
00:04:47,280 --> 00:04:50,400
email and with newsletter preference

127
00:04:50,400 --> 00:04:52,479
on the surface it looks the same very

128
00:04:52,479 --> 00:04:54,080
similar syntax

129
00:04:54,080 --> 00:04:56,800
but again in application it's very very

130
00:04:56,800 --> 00:04:58,800
different and there is one significant

131
00:04:58,800 --> 00:05:00,400
difference but an easy way to think

132
00:05:00,400 --> 00:05:02,639
about it is that a builder pattern is

133
00:05:02,639 --> 00:05:05,199
when an object constructs another object

134
00:05:05,199 --> 00:05:07,280
an options pattern is when an object is

135
00:05:07,280 --> 00:05:10,240
constructed using a list of functions

136
00:05:10,240 --> 00:05:12,240
typically closures

137
00:05:12,240 --> 00:05:14,080
how do we write the option well this is

138
00:05:14,080 --> 00:05:16,000
the classic that i first learned in the

139
00:05:16,000 --> 00:05:17,759
go community

140
00:05:17,759 --> 00:05:20,000
first let's define the option type and

141
00:05:20,000 --> 00:05:21,520
an option type is going to be just a

142
00:05:21,520 --> 00:05:24,800
function which takes the pointer to our

143
00:05:24,800 --> 00:05:26,800
engine to our main thing that we're

144
00:05:26,800 --> 00:05:28,320
trying to configure in this instance is

145
00:05:28,320 --> 00:05:30,720
this the bank account

146
00:05:30,720 --> 00:05:32,400
and we will

147
00:05:32,400 --> 00:05:35,039
then spell out one option and we'll call

148
00:05:35,039 --> 00:05:36,880
it with email it will take a string

149
00:05:36,880 --> 00:05:39,600
email and return an option

150
00:05:39,600 --> 00:05:41,039
you can see the closure here being

151
00:05:41,039 --> 00:05:42,320
returned

152
00:05:42,320 --> 00:05:44,240
and the closure will simply

153
00:05:44,240 --> 00:05:45,360
modify

154
00:05:45,360 --> 00:05:47,039
client email by applying the email

155
00:05:47,039 --> 00:05:49,039
string provided earlier

156
00:05:49,039 --> 00:05:51,520
in golang lowercase letter parameter

157
00:05:51,520 --> 00:05:53,280
means a private parameter

158
00:05:53,280 --> 00:05:55,199
we want to make sure that nobody can

159
00:05:55,199 --> 00:05:57,680
misconfigure our parameters by accessing

160
00:05:57,680 --> 00:06:00,240
them directly without going through the

161
00:06:00,240 --> 00:06:02,400
proper channel through the proper option

162
00:06:02,400 --> 00:06:03,520
so to speak

163
00:06:03,520 --> 00:06:05,840
and so this way we're protecting

164
00:06:05,840 --> 00:06:08,000
our object from this configuration not

165
00:06:08,000 --> 00:06:10,319
just by the wrong setting but also by

166
00:06:10,319 --> 00:06:12,560
bypassing the proper mechanism of

167
00:06:12,560 --> 00:06:15,199
setting so we use private

168
00:06:15,199 --> 00:06:17,759
parameter

169
00:06:18,000 --> 00:06:20,880
how can we improve this classic

170
00:06:20,880 --> 00:06:23,120
we improve it by applying four

171
00:06:23,120 --> 00:06:26,400
categories of correct security failure

172
00:06:26,400 --> 00:06:29,680
to our application we want to fail early

173
00:06:29,680 --> 00:06:31,600
as soon as a problem is detected and of

174
00:06:31,600 --> 00:06:33,440
course object initialization is about as

175
00:06:33,440 --> 00:06:36,080
early as you can fail we want to fail

176
00:06:36,080 --> 00:06:38,639
safely so that the failure is handled

177
00:06:38,639 --> 00:06:40,880
upstream and the program just doesn't

178
00:06:40,880 --> 00:06:43,680
crash with that stack trace we want to

179
00:06:43,680 --> 00:06:45,600
fail explicitly so the cause of the

180
00:06:45,600 --> 00:06:48,240
failure is known right away and of

181
00:06:48,240 --> 00:06:50,400
course singularly

182
00:06:50,400 --> 00:06:52,160
nobody wants to observe a cascade of

183
00:06:52,160 --> 00:06:54,639
failures of five or six failures without

184
00:06:54,639 --> 00:06:56,560
knowing which one is the real cause in

185
00:06:56,560 --> 00:06:58,479
production the cause needs to be

186
00:06:58,479 --> 00:07:00,000
singular

187
00:07:00,000 --> 00:07:02,160
and the truth is if you're serious about

188
00:07:02,160 --> 00:07:03,520
security

189
00:07:03,520 --> 00:07:05,759
insecurely configured services should

190
00:07:05,759 --> 00:07:08,720
not even start

191
00:07:08,720 --> 00:07:10,560
it is the responsibility of your

192
00:07:10,560 --> 00:07:13,840
application not to start if it was given

193
00:07:13,840 --> 00:07:15,120
wrong settings

194
00:07:15,120 --> 00:07:18,960
weak settings are also a failure state

195
00:07:18,960 --> 00:07:20,639
how can we improve the classic options

196
00:07:20,639 --> 00:07:22,319
pattern to account for

197
00:07:22,319 --> 00:07:25,199
this the four failure states or ideal

198
00:07:25,199 --> 00:07:26,720
failure conditions

199
00:07:26,720 --> 00:07:28,960
we will simply do this by modifying our

200
00:07:28,960 --> 00:07:31,680
signature of our definition there of the

201
00:07:31,680 --> 00:07:33,599
option definition it will still be a

202
00:07:33,599 --> 00:07:36,400
function taking a pointer to the object

203
00:07:36,400 --> 00:07:38,800
being configured by equal return and

204
00:07:38,800 --> 00:07:39,840
error

205
00:07:39,840 --> 00:07:41,520
of course in many languages you may want

206
00:07:41,520 --> 00:07:45,120
to throw an error in go we return errors

207
00:07:45,120 --> 00:07:47,280
this is just a common idiom

208
00:07:47,280 --> 00:07:49,919
in fact it doesn't matter so much

209
00:07:49,919 --> 00:07:51,840
um but that's the that's the best way to

210
00:07:51,840 --> 00:07:53,440
write it and going

211
00:07:53,440 --> 00:07:54,800
so what kind of difference does this

212
00:07:54,800 --> 00:07:56,240
make so

213
00:07:56,240 --> 00:07:58,400
we're having the same option with email

214
00:07:58,400 --> 00:08:00,080
that will take emails a string and

215
00:08:00,080 --> 00:08:01,680
return the closure

216
00:08:01,680 --> 00:08:04,240
but this time we will validate the email

217
00:08:04,240 --> 00:08:05,520
inside the option

218
00:08:05,520 --> 00:08:08,400
and return an error if there was one

219
00:08:08,400 --> 00:08:10,479
detected or throw in there if you're

220
00:08:10,479 --> 00:08:13,360
writing in something other than go

221
00:08:13,360 --> 00:08:15,759
it is a subtle difference but it makes a

222
00:08:15,759 --> 00:08:17,520
great difference

223
00:08:17,520 --> 00:08:19,919
to apply those options

224
00:08:19,919 --> 00:08:22,080
all we do is we have a constructor let's

225
00:08:22,080 --> 00:08:23,919
call our constructor a new bank account

226
00:08:23,919 --> 00:08:26,319
which will take a list of options and

227
00:08:26,319 --> 00:08:28,479
return a pointer to a bank account and

228
00:08:28,479 --> 00:08:31,039
an error if there was one discovered

229
00:08:31,039 --> 00:08:33,679
we will initialize a blank bank account

230
00:08:33,679 --> 00:08:35,679
and then we will iterate

231
00:08:35,679 --> 00:08:37,360
through every option provided to the

232
00:08:37,360 --> 00:08:38,799
constructor

233
00:08:38,799 --> 00:08:41,120
apply that option to our resulting

234
00:08:41,120 --> 00:08:44,320
object and check if there was an error

235
00:08:44,320 --> 00:08:46,399
if there was one we want to halt the

236
00:08:46,399 --> 00:08:48,480
execution immediately

237
00:08:48,480 --> 00:08:51,600
return nothing for a pointer and also

238
00:08:51,600 --> 00:08:53,360
return wrapped

239
00:08:53,360 --> 00:08:55,120
error which we will mark as

240
00:08:55,120 --> 00:08:57,200
initialization failure so that that can

241
00:08:57,200 --> 00:09:01,200
be gracefully handled upstream

242
00:09:01,680 --> 00:09:03,519
later on in the constructor we will

243
00:09:03,519 --> 00:09:06,000
check if mandatory parameters were set

244
00:09:06,000 --> 00:09:08,000
but we will not validate our object in

245
00:09:08,000 --> 00:09:10,800
the constructor all the validation code

246
00:09:10,800 --> 00:09:15,199
should be moved inside the option

247
00:09:19,440 --> 00:09:21,279
how does this help us

248
00:09:21,279 --> 00:09:23,279
what is the outcome

249
00:09:23,279 --> 00:09:25,360
the option pattern helps us prevent

250
00:09:25,360 --> 00:09:27,839
three categories of problems the first

251
00:09:27,839 --> 00:09:31,360
one is invalid or in secure state

252
00:09:31,360 --> 00:09:33,760
if something is missing something is no

253
00:09:33,760 --> 00:09:36,000
or improperly configured is missing a

254
00:09:36,000 --> 00:09:38,080
port or an address or some kind of

255
00:09:38,080 --> 00:09:40,160
critical setting we want to detect that

256
00:09:40,160 --> 00:09:42,560
at initialization

257
00:09:42,560 --> 00:09:44,320
second we want to detect failures

258
00:09:44,320 --> 00:09:46,320
originating in parameters

259
00:09:46,320 --> 00:09:49,440
sophisticated objects can take behaviors

260
00:09:49,440 --> 00:09:51,600
for parameters

261
00:09:51,600 --> 00:09:52,720
do you know

262
00:09:52,720 --> 00:09:54,720
how those parameters providing behavior

263
00:09:54,720 --> 00:09:57,440
were configured who configured them what

264
00:09:57,440 --> 00:09:59,279
config was used

265
00:09:59,279 --> 00:10:00,800
are they actually

266
00:10:00,800 --> 00:10:02,880
working

267
00:10:02,880 --> 00:10:05,839
the option pattern allows you to examine

268
00:10:05,839 --> 00:10:08,000
a sophisticated parameter that has

269
00:10:08,000 --> 00:10:09,920
behavior or passes behavior to your

270
00:10:09,920 --> 00:10:12,480
object to make sure that it actually is

271
00:10:12,480 --> 00:10:15,120
fully functioning like it's supposed to

272
00:10:15,120 --> 00:10:17,440
and it is properly initialized

273
00:10:17,440 --> 00:10:20,959
and finally conflicting parameters

274
00:10:20,959 --> 00:10:22,640
it is very common for a security

275
00:10:22,640 --> 00:10:25,040
vulnerability to emerge not from one or

276
00:10:25,040 --> 00:10:28,000
two parameters but from interactions

277
00:10:28,000 --> 00:10:29,360
between them

278
00:10:29,360 --> 00:10:31,920
one parameter can undermine or make and

279
00:10:31,920 --> 00:10:33,120
secure

280
00:10:33,120 --> 00:10:35,279
another or the combination of several

281
00:10:35,279 --> 00:10:38,160
can put your program into insecure state

282
00:10:38,160 --> 00:10:40,079
the option pattern can help you detect

283
00:10:40,079 --> 00:10:41,839
those conditions

284
00:10:41,839 --> 00:10:44,640
and cancel the execution before

285
00:10:44,640 --> 00:10:47,839
everything gets out of control

286
00:10:47,920 --> 00:10:49,839
of course i'm saying how great all of

287
00:10:49,839 --> 00:10:52,399
this is but there needs to be some

288
00:10:52,399 --> 00:10:54,480
limits placed on when to use this

289
00:10:54,480 --> 00:10:56,160
there are at least three usage criteria

290
00:10:56,160 --> 00:10:57,600
that you need to look for before you're

291
00:10:57,600 --> 00:10:59,360
using an options pattern typically you

292
00:10:59,360 --> 00:11:01,519
will use it only one time

293
00:11:01,519 --> 00:11:03,279
per package and the package has to be

294
00:11:03,279 --> 00:11:06,079
sufficiently sophisticated to warrant

295
00:11:06,079 --> 00:11:08,720
this additional work

296
00:11:08,720 --> 00:11:10,160
three things to look for first is

297
00:11:10,160 --> 00:11:11,920
flexible behavior

298
00:11:11,920 --> 00:11:14,800
does your initialized object change its

299
00:11:14,800 --> 00:11:18,480
behavior based on settings given to it

300
00:11:18,480 --> 00:11:21,279
for example are using providers

301
00:11:21,279 --> 00:11:22,399
drivers

302
00:11:22,399 --> 00:11:24,880
caches and networking layer of some sort

303
00:11:24,880 --> 00:11:27,279
or protocol if you are taking those as

304
00:11:27,279 --> 00:11:28,560
parameters

305
00:11:28,560 --> 00:11:30,399
an options pattern can really help you

306
00:11:30,399 --> 00:11:31,920
validate them

307
00:11:31,920 --> 00:11:33,920
second if you have some parameters that

308
00:11:33,920 --> 00:11:36,160
are mandatory but not others

309
00:11:36,160 --> 00:11:37,760
the options pattern can really help you

310
00:11:37,760 --> 00:11:38,720
a lot

311
00:11:38,720 --> 00:11:41,040
if all your parameters are mandatory you

312
00:11:41,040 --> 00:11:42,800
may be better off with something more

313
00:11:42,800 --> 00:11:44,160
straightforward

314
00:11:44,160 --> 00:11:45,440
and easy

315
00:11:45,440 --> 00:11:47,440
but when you have some mandatory and

316
00:11:47,440 --> 00:11:50,079
they're not and they can even change

317
00:11:50,079 --> 00:11:51,760
which ones are mandatory depending on

318
00:11:51,760 --> 00:11:53,600
which parameters are provided

319
00:11:53,600 --> 00:11:55,279
the options pattern is much better for

320
00:11:55,279 --> 00:11:57,680
that and finally if you have entangled

321
00:11:57,680 --> 00:11:58,880
parameters

322
00:11:58,880 --> 00:12:00,320
those are a class of conflicting

323
00:12:00,320 --> 00:12:03,360
parameters that affect each other

324
00:12:03,360 --> 00:12:05,600
the options pattern can help you resolve

325
00:12:05,600 --> 00:12:07,760
gracefully at initialization any kind of

326
00:12:07,760 --> 00:12:09,279
entanglement

327
00:12:09,279 --> 00:12:11,120
in such a way that it precludes or

328
00:12:11,120 --> 00:12:13,920
prevents security vulnerabilities

329
00:12:13,920 --> 00:12:17,040
let's look at an example

330
00:12:17,519 --> 00:12:19,920
suppose you have

331
00:12:19,920 --> 00:12:22,240
a hypothetical asset encoder that will

332
00:12:22,240 --> 00:12:23,279
take

333
00:12:23,279 --> 00:12:25,680
a stream of bytes and encode it and we

334
00:12:25,680 --> 00:12:27,760
will use it in our iot device so it will

335
00:12:27,760 --> 00:12:29,600
be pretty straightforward and simple and

336
00:12:29,600 --> 00:12:31,600
it will stream the

337
00:12:31,600 --> 00:12:33,360
encoded information out of the iot

338
00:12:33,360 --> 00:12:35,279
device and let's say we're writing an

339
00:12:35,279 --> 00:12:37,200
option and we'll call our option with

340
00:12:37,200 --> 00:12:40,000
block size and memory limit and we're

341
00:12:40,000 --> 00:12:42,480
putting size and limit as parameters of

342
00:12:42,480 --> 00:12:43,760
the same option

343
00:12:43,760 --> 00:12:46,240
why are we doing this because those two

344
00:12:46,240 --> 00:12:47,920
are related to each other

345
00:12:47,920 --> 00:12:50,160
there are at least three conditions

346
00:12:50,160 --> 00:12:51,600
of entanglement

347
00:12:51,600 --> 00:12:54,160
that affect both of those

348
00:12:54,160 --> 00:12:56,000
first of all the limit has to be greater

349
00:12:56,000 --> 00:12:58,320
than zero and greater than size

350
00:12:58,320 --> 00:12:59,839
second the limit has to be a multiple of

351
00:12:59,839 --> 00:13:01,200
the size because we don't want to end up

352
00:13:01,200 --> 00:13:03,200
with a buffer that's overfilled or

353
00:13:03,200 --> 00:13:04,560
under-filled eventually when we get to

354
00:13:04,560 --> 00:13:07,120
the last block and finally you may know

355
00:13:07,120 --> 00:13:09,360
you have some protocol based

356
00:13:09,360 --> 00:13:11,440
requirements or limitations for example

357
00:13:11,440 --> 00:13:13,200
in this instance there's only two bytes

358
00:13:13,200 --> 00:13:15,120
for block sequence so you know there's

359
00:13:15,120 --> 00:13:17,360
going to be a limit imposed on that

360
00:13:17,360 --> 00:13:19,839
just from the protocol

361
00:13:19,839 --> 00:13:21,600
in golang all those three things are

362
00:13:21,600 --> 00:13:23,440
fairly benign but if

363
00:13:23,440 --> 00:13:24,959
they may lead to vulnerability but if

364
00:13:24,959 --> 00:13:28,480
you're using low level language

365
00:13:28,480 --> 00:13:30,560
like c for example

366
00:13:30,560 --> 00:13:34,160
or even rust any one of those three

367
00:13:34,160 --> 00:13:36,560
right in certain conditions can cause

368
00:13:36,560 --> 00:13:39,120
you trouble they can create a state for

369
00:13:39,120 --> 00:13:41,920
dos remote code execution

370
00:13:41,920 --> 00:13:44,480
buffer overflow anything you can imagine

371
00:13:44,480 --> 00:13:46,480
and of course you want to check those to

372
00:13:46,480 --> 00:13:48,639
preclude that possibility inside the

373
00:13:48,639 --> 00:13:50,639
option and after you validate them

374
00:13:50,639 --> 00:13:53,040
together

375
00:13:53,040 --> 00:13:55,440
then you assign both of them to your

376
00:13:55,440 --> 00:13:56,399
object

377
00:13:56,399 --> 00:13:58,160
this helps you prevent entanglement

378
00:13:58,160 --> 00:13:59,680
because if somebody else goes and

379
00:13:59,680 --> 00:14:01,519
modifies the size independently they

380
00:14:01,519 --> 00:14:03,760
will not be able to do that outside of

381
00:14:03,760 --> 00:14:06,399
this very helpful protective

382
00:14:06,399 --> 00:14:08,320
option

383
00:14:08,320 --> 00:14:10,320
also please note

384
00:14:10,320 --> 00:14:11,279
that

385
00:14:11,279 --> 00:14:13,040
this creates what we call self

386
00:14:13,040 --> 00:14:15,920
documenting code when a person is using

387
00:14:15,920 --> 00:14:17,279
your object

388
00:14:17,279 --> 00:14:19,600
and they're using an ide id will give

389
00:14:19,600 --> 00:14:21,600
them hints on how to initialize it

390
00:14:21,600 --> 00:14:24,160
properly and with the list of options

391
00:14:24,160 --> 00:14:26,720
the consumer of the your api will see

392
00:14:26,720 --> 00:14:28,720
that size and limit are together in the

393
00:14:28,720 --> 00:14:31,360
same option it hints to them that they

394
00:14:31,360 --> 00:14:33,920
have a significant relationship between

395
00:14:33,920 --> 00:14:35,760
each other and it makes

396
00:14:35,760 --> 00:14:37,600
your initialization procedure even more

397
00:14:37,600 --> 00:14:40,639
secure because the person using it knows

398
00:14:40,639 --> 00:14:43,199
something is up this is self-documenting

399
00:14:43,199 --> 00:14:44,399
code

400
00:14:44,399 --> 00:14:46,399
we can keep going there is another

401
00:14:46,399 --> 00:14:47,680
improvement to be made here and it's

402
00:14:47,680 --> 00:14:50,480
called option grouping option grouping

403
00:14:50,480 --> 00:14:53,120
can allow you to use isolation clarity

404
00:14:53,120 --> 00:14:54,480
and safety

405
00:14:54,480 --> 00:14:57,600
by combining options together

406
00:14:57,600 --> 00:14:58,959
how does this work

407
00:14:58,959 --> 00:15:00,720
well let's write a little helping

408
00:15:00,720 --> 00:15:03,360
function we'll call it our little helper

409
00:15:03,360 --> 00:15:05,360
with options that will take a list of

410
00:15:05,360 --> 00:15:07,680
options and sequentially apply them to

411
00:15:07,680 --> 00:15:09,199
the pointer of our main object and

412
00:15:09,199 --> 00:15:11,519
return an error if there is one

413
00:15:11,519 --> 00:15:13,199
we have already written something like

414
00:15:13,199 --> 00:15:14,800
this on the constructor so why are we

415
00:15:14,800 --> 00:15:18,240
pulling this out into a separate routine

416
00:15:18,240 --> 00:15:19,680
good question

417
00:15:19,680 --> 00:15:22,079
we'll look at it in a second but first

418
00:15:22,079 --> 00:15:23,600
of all note that we will change our

419
00:15:23,600 --> 00:15:26,079
constructor and replace that whole loop

420
00:15:26,079 --> 00:15:27,760
that was iterating through options with

421
00:15:27,760 --> 00:15:30,639
our little helper and again wrap the

422
00:15:30,639 --> 00:15:33,120
resulting error as initialization

423
00:15:33,120 --> 00:15:34,240
failure

424
00:15:34,240 --> 00:15:36,959
what does this helper allow us to do

425
00:15:36,959 --> 00:15:40,399
we can set up option sets

426
00:15:40,399 --> 00:15:42,639
we will unleash our little helper by

427
00:15:42,639 --> 00:15:45,360
designing default options

428
00:15:45,360 --> 00:15:48,079
how convenient is it to have your object

429
00:15:48,079 --> 00:15:51,040
configured securely by default but also

430
00:15:51,040 --> 00:15:53,279
make it easy for the consumer of the api

431
00:15:53,279 --> 00:15:56,160
to click on just one routine and without

432
00:15:56,160 --> 00:15:58,320
having to parse through many setters and

433
00:15:58,320 --> 00:16:00,639
getters and factory functions know

434
00:16:00,639 --> 00:16:03,920
exactly how it's supposed to be used

435
00:16:03,920 --> 00:16:05,839
with a list of all the modifications

436
00:16:05,839 --> 00:16:08,560
that are secure by default and also know

437
00:16:08,560 --> 00:16:10,720
which ones they may want to change

438
00:16:10,720 --> 00:16:12,880
this makes for a very lean and easy to

439
00:16:12,880 --> 00:16:14,720
use api

440
00:16:14,720 --> 00:16:16,880
another way to set up a set of options

441
00:16:16,880 --> 00:16:19,360
is to use an option set called with

442
00:16:19,360 --> 00:16:21,279
debug option

443
00:16:21,279 --> 00:16:22,959
with debug options we'll take a list of

444
00:16:22,959 --> 00:16:24,880
options and present them together as a

445
00:16:24,880 --> 00:16:25,920
set

446
00:16:25,920 --> 00:16:26,720
well

447
00:16:26,720 --> 00:16:29,360
in that list you could use unsafe

448
00:16:29,360 --> 00:16:31,120
private options

449
00:16:31,120 --> 00:16:33,120
why private because for example like a

450
00:16:33,120 --> 00:16:34,800
debug backdoor

451
00:16:34,800 --> 00:16:36,240
is not something we will ever want to

452
00:16:36,240 --> 00:16:38,959
see in production or someone use

453
00:16:38,959 --> 00:16:40,480
carelessly

454
00:16:40,480 --> 00:16:44,160
or flaunt without careful consideration

455
00:16:44,160 --> 00:16:45,600
on and

456
00:16:45,600 --> 00:16:48,160
by accident include it in our object and

457
00:16:48,160 --> 00:16:50,079
ship it

458
00:16:50,079 --> 00:16:52,880
by bundling unsafe private options

459
00:16:52,880 --> 00:16:55,440
together in an option set we make it

460
00:16:55,440 --> 00:16:58,639
very clear and exact

461
00:16:58,639 --> 00:17:01,440
that those types of vulnerabilities will

462
00:17:01,440 --> 00:17:03,920
not end up or those types of dangerous

463
00:17:03,920 --> 00:17:05,520
or weak options will not end up where

464
00:17:05,520 --> 00:17:07,679
they're not supposed to because a person

465
00:17:07,679 --> 00:17:10,079
will have to either use that entire set

466
00:17:10,079 --> 00:17:12,240
or refuse that entire set and they can

467
00:17:12,240 --> 00:17:13,439
see right away from object

468
00:17:13,439 --> 00:17:16,000
initialization which set is being used

469
00:17:16,000 --> 00:17:17,760
and of course since you're writing an

470
00:17:17,760 --> 00:17:20,240
option set just for debugging why don't

471
00:17:20,240 --> 00:17:22,959
you just check right away that your

472
00:17:22,959 --> 00:17:24,559
instance is not running in production

473
00:17:24,559 --> 00:17:26,079
because if it is

474
00:17:26,079 --> 00:17:27,679
you guessed it you need to raise an

475
00:17:27,679 --> 00:17:30,640
exception and halt execution

476
00:17:30,640 --> 00:17:32,960
finally you can use option sets for

477
00:17:32,960 --> 00:17:35,600
visual grouping sometimes you don't have

478
00:17:35,600 --> 00:17:37,840
entangled parameters but for clarity you

479
00:17:37,840 --> 00:17:40,080
want to have on the same line through

480
00:17:40,080 --> 00:17:42,160
related things and comment on them

481
00:17:42,160 --> 00:17:43,200
together

482
00:17:43,200 --> 00:17:45,280
you can group and nest by using our

483
00:17:45,280 --> 00:17:47,200
little helper as much as you want

484
00:17:47,200 --> 00:17:48,960
to your heart's content in the end it

485
00:17:48,960 --> 00:17:50,080
will not make a difference for

486
00:17:50,080 --> 00:17:51,360
initialization

487
00:17:51,360 --> 00:17:53,440
but it will provide you a convenient and

488
00:17:53,440 --> 00:17:56,000
well documented way to present

489
00:17:56,000 --> 00:17:57,919
the way you're using your object to your

490
00:17:57,919 --> 00:18:00,000
team

491
00:18:00,000 --> 00:18:01,679
let's put all this together and look at

492
00:18:01,679 --> 00:18:04,320
a few examples which are a little bit

493
00:18:04,320 --> 00:18:06,160
more complicated

494
00:18:06,160 --> 00:18:08,160
so suppose we're writing a hypothetical

495
00:18:08,160 --> 00:18:10,400
distributed secrets manager

496
00:18:10,400 --> 00:18:12,160
is that sophisticated enough oh yes it

497
00:18:12,160 --> 00:18:12,960
is

498
00:18:12,960 --> 00:18:14,799
so we'll use

499
00:18:14,799 --> 00:18:16,880
a set of peers that we can pass or even

500
00:18:16,880 --> 00:18:19,039
a pure discovery protocol

501
00:18:19,039 --> 00:18:20,559
we can write an option for that and

502
00:18:20,559 --> 00:18:23,120
validate each one of the parameters

503
00:18:23,120 --> 00:18:24,080
being set

504
00:18:24,080 --> 00:18:25,600
of course we'll use a caching layer

505
00:18:25,600 --> 00:18:28,240
because that's very good for performance

506
00:18:28,240 --> 00:18:30,000
redis is kind of a standard caching

507
00:18:30,000 --> 00:18:31,600
layer and we'll have to write an adapter

508
00:18:31,600 --> 00:18:34,080
for our object but we'll set it up as an

509
00:18:34,080 --> 00:18:35,200
option

510
00:18:35,200 --> 00:18:36,799
we will also need a list of allowed

511
00:18:36,799 --> 00:18:39,280
cyphers we want to do cryptography

512
00:18:39,280 --> 00:18:40,960
without releasing the keys

513
00:18:40,960 --> 00:18:43,280
and we'll need for secret manager

514
00:18:43,280 --> 00:18:46,880
rotation window and a max key lifetime

515
00:18:46,880 --> 00:18:48,720
as you are drafting the options you're

516
00:18:48,720 --> 00:18:51,200
realizing okay that those two rotation

517
00:18:51,200 --> 00:18:52,880
window and max key lifetime are

518
00:18:52,880 --> 00:18:54,799
pretzeled they have a relationship

519
00:18:54,799 --> 00:18:56,799
between them so let's think about this

520
00:18:56,799 --> 00:18:59,200
for a second what can we do

521
00:18:59,200 --> 00:19:01,520
should we combine them into one option

522
00:19:01,520 --> 00:19:04,400
like an example i showed earlier

523
00:19:04,400 --> 00:19:05,520
well

524
00:19:05,520 --> 00:19:07,360
perhaps but what if there are more

525
00:19:07,360 --> 00:19:09,200
options that come up

526
00:19:09,200 --> 00:19:12,400
later that can affect those two

527
00:19:12,400 --> 00:19:14,160
then there's another question what if

528
00:19:14,160 --> 00:19:17,760
the cache layer was misconfigured

529
00:19:17,760 --> 00:19:19,919
what will happen

530
00:19:19,919 --> 00:19:22,160
it could lead to broken access control

531
00:19:22,160 --> 00:19:24,960
or ghost keys that should be long

532
00:19:24,960 --> 00:19:26,559
expired but they're hanging out in a

533
00:19:26,559 --> 00:19:28,720
cache layer because somebody wrote the

534
00:19:28,720 --> 00:19:32,320
config incorrectly or provided incorrect

535
00:19:32,320 --> 00:19:33,600
configuration

536
00:19:33,600 --> 00:19:35,520
in production

537
00:19:35,520 --> 00:19:37,039
but also

538
00:19:37,039 --> 00:19:38,799
the cache configuration needs to account

539
00:19:38,799 --> 00:19:42,080
for the rotation lifetimes as well

540
00:19:42,080 --> 00:19:44,400
the max key lifetime cannot be greater

541
00:19:44,400 --> 00:19:46,080
than five times the rotation window

542
00:19:46,080 --> 00:19:47,200
because then it defeats the whole

543
00:19:47,200 --> 00:19:49,520
purpose of key rotation

544
00:19:49,520 --> 00:19:51,120
those things all have to be accounted

545
00:19:51,120 --> 00:19:53,600
for and we realize all of a sudden it's

546
00:19:53,600 --> 00:19:55,120
not just two things that are pretzel

547
00:19:55,120 --> 00:19:57,039
it's at least three things and maybe

548
00:19:57,039 --> 00:19:58,160
more

549
00:19:58,160 --> 00:19:59,760
what's a good way to handle this with

550
00:19:59,760 --> 00:20:02,080
the option pattern

551
00:20:02,080 --> 00:20:04,480
well instead of combining the two

552
00:20:04,480 --> 00:20:06,960
rotation window and max key lifetime

553
00:20:06,960 --> 00:20:09,600
let's take a hybrid approach and write

554
00:20:09,600 --> 00:20:11,679
an option called with synchronization

555
00:20:11,679 --> 00:20:13,280
strategy

556
00:20:13,280 --> 00:20:16,080
and provide a list of keyword settings

557
00:20:16,080 --> 00:20:18,559
to initialize our strategy

558
00:20:18,559 --> 00:20:20,559
you can see there at number one we'll

559
00:20:20,559 --> 00:20:22,000
leave a comment because we expect

560
00:20:22,000 --> 00:20:24,080
perhaps that maybe more parameters will

561
00:20:24,080 --> 00:20:27,039
join the synchronization strategy later

562
00:20:27,039 --> 00:20:28,880
that we don't know yet and second of

563
00:20:28,880 --> 00:20:31,120
course since we're using a structure

564
00:20:31,120 --> 00:20:33,039
with keywords to initialize those

565
00:20:33,039 --> 00:20:35,280
settings we're in effect combining two

566
00:20:35,280 --> 00:20:36,640
different installation approaches

567
00:20:36,640 --> 00:20:38,080
options pattern plus keyword

568
00:20:38,080 --> 00:20:40,080
installation we can actually use this

569
00:20:40,080 --> 00:20:41,200
structure

570
00:20:41,200 --> 00:20:43,520
and share it internally between our

571
00:20:43,520 --> 00:20:45,440
different option sets

572
00:20:45,440 --> 00:20:46,960
and we can use those parameters to

573
00:20:46,960 --> 00:20:48,960
present them to our caching layer to

574
00:20:48,960 --> 00:20:50,080
make sure

575
00:20:50,080 --> 00:20:53,360
that key expiration in cache matches the

576
00:20:53,360 --> 00:20:54,720
key lifetime

577
00:20:54,720 --> 00:20:57,520
provided for the rotation

578
00:20:57,520 --> 00:21:00,880
this process makes our api

579
00:21:00,880 --> 00:21:02,799
hard to misuse

580
00:21:02,799 --> 00:21:04,080
if it's well written it will be

581
00:21:04,080 --> 00:21:06,400
impossible to misuse

582
00:21:06,400 --> 00:21:09,039
notice the pattern helps you think the

583
00:21:09,039 --> 00:21:10,320
options pattern

584
00:21:10,320 --> 00:21:13,120
maybe we can write a book and call it

585
00:21:13,120 --> 00:21:15,360
options pattern design

586
00:21:15,360 --> 00:21:17,520
i'm just kidding

587
00:21:17,520 --> 00:21:19,520
let's look at some more examples suppose

588
00:21:19,520 --> 00:21:20,559
we're writing a hypothetical

589
00:21:20,559 --> 00:21:21,919
microservice

590
00:21:21,919 --> 00:21:23,760
and let's write some options for that

591
00:21:23,760 --> 00:21:26,559
with host and port those two are related

592
00:21:26,559 --> 00:21:28,480
to each other they're entangled you can

593
00:21:28,480 --> 00:21:30,960
see the port is an integer not a string

594
00:21:30,960 --> 00:21:32,400
because we want to lean on the type

595
00:21:32,400 --> 00:21:34,480
system to make this even more secure

596
00:21:34,480 --> 00:21:37,679
we will need a tls layer acme is a good

597
00:21:37,679 --> 00:21:39,280
way to go so we'll write an option for

598
00:21:39,280 --> 00:21:40,080
that

599
00:21:40,080 --> 00:21:43,200
and also timeouts microservices are very

600
00:21:43,200 --> 00:21:45,600
very reliant on timeouts

601
00:21:45,600 --> 00:21:47,679
regarding security right we don't want

602
00:21:47,679 --> 00:21:50,320
our apis and our calls to hang

603
00:21:50,320 --> 00:21:53,520
or to tie up resources by having really

604
00:21:53,520 --> 00:21:55,440
long targeted

605
00:21:55,440 --> 00:21:56,799
connections

606
00:21:56,799 --> 00:21:58,240
all sorts of things can go wrong and

607
00:21:58,240 --> 00:22:01,039
here we will use a keyword

608
00:22:01,039 --> 00:22:02,400
setting

609
00:22:02,400 --> 00:22:04,960
in a structure by defining ingress

610
00:22:04,960 --> 00:22:07,120
egress and idle session timeouts that

611
00:22:07,120 --> 00:22:09,679
can be shared between both internal and

612
00:22:09,679 --> 00:22:13,120
external api calls to make a service

613
00:22:13,120 --> 00:22:15,280
stable and resilient against the dos

614
00:22:15,280 --> 00:22:16,720
attack

615
00:22:16,720 --> 00:22:18,480
of course we'll need a secret manager

616
00:22:18,480 --> 00:22:20,640
because microservices need a rotating

617
00:22:20,640 --> 00:22:22,559
secret manager and we'll use a kms

618
00:22:22,559 --> 00:22:23,600
adapter

619
00:22:23,600 --> 00:22:25,600
that will write later throttling

620
00:22:25,600 --> 00:22:26,720
strategy

621
00:22:26,720 --> 00:22:29,039
that's a requirement if our service does

622
00:22:29,039 --> 00:22:31,200
not throttle it is

623
00:22:31,200 --> 00:22:34,080
very rickety and vulnerable and let's

624
00:22:34,080 --> 00:22:36,559
take a strategy that will throttle by p

625
00:22:36,559 --> 00:22:39,440
you notice a behavior is being passed

626
00:22:39,440 --> 00:22:41,200
great for the options pattern

627
00:22:41,200 --> 00:22:42,720
we'll have a retry strategy another

628
00:22:42,720 --> 00:22:45,039
behavior and we'll use immediate retry

629
00:22:45,039 --> 00:22:46,159
two times

630
00:22:46,159 --> 00:22:48,960
uh when a call fails or a connection

631
00:22:48,960 --> 00:22:50,320
fails

632
00:22:50,320 --> 00:22:52,480
of course we'll need a state backend

633
00:22:52,480 --> 00:22:55,039
redis is great with an adapter and of

634
00:22:55,039 --> 00:22:55,919
course

635
00:22:55,919 --> 00:22:57,760
a logger

636
00:22:57,760 --> 00:23:00,559
uh it's a good question where is a good

637
00:23:00,559 --> 00:23:02,720
point to put loggers

638
00:23:02,720 --> 00:23:04,000
sometimes you want

639
00:23:04,000 --> 00:23:05,360
you want to be tempted to put them

640
00:23:05,360 --> 00:23:07,120
everywhere but they create side effects

641
00:23:07,120 --> 00:23:08,559
and they make things that are not so

642
00:23:08,559 --> 00:23:10,400
testable

643
00:23:10,400 --> 00:23:11,919
it's an additional complication but when

644
00:23:11,919 --> 00:23:13,760
you're using a sophisticated

645
00:23:13,760 --> 00:23:15,760
object that requires options pattern

646
00:23:15,760 --> 00:23:17,200
typically you should have an option

647
00:23:17,200 --> 00:23:18,960
called with logger and what you really

648
00:23:18,960 --> 00:23:21,120
want to do is write an interface so you

649
00:23:21,120 --> 00:23:23,120
can satisfy it with a logger of your

650
00:23:23,120 --> 00:23:25,120
choice or perhaps

651
00:23:25,120 --> 00:23:28,400
multiple loggers that's a good way to go

652
00:23:28,400 --> 00:23:31,280
observability adds to security and

653
00:23:31,280 --> 00:23:33,919
here's an option to do that

654
00:23:33,919 --> 00:23:35,600
let's look at another example how about

655
00:23:35,600 --> 00:23:38,640
we write aws fargate containerized

656
00:23:38,640 --> 00:23:40,320
task launcher

657
00:23:40,320 --> 00:23:43,520
so a task launcher we will define tasks

658
00:23:43,520 --> 00:23:45,919
fargate is basically a layer over

659
00:23:45,919 --> 00:23:48,640
kubernetes cluster

660
00:23:48,640 --> 00:23:51,360
all sorts of fun comes with kubernetes

661
00:23:51,360 --> 00:23:52,880
clusters and security right they're

662
00:23:52,880 --> 00:23:54,799
difficult to secure

663
00:23:54,799 --> 00:23:56,480
so far gate is already

664
00:23:56,480 --> 00:23:58,400
easier because it's an api right on top

665
00:23:58,400 --> 00:23:59,679
of it so you don't have to worry nearly

666
00:23:59,679 --> 00:24:01,840
about as much for security

667
00:24:01,840 --> 00:24:02,559
but

668
00:24:02,559 --> 00:24:06,080
still there are things to check

669
00:24:07,039 --> 00:24:08,880
the first thing of course is aws

670
00:24:08,880 --> 00:24:10,080
configuration

671
00:24:10,080 --> 00:24:11,760
object right so we need to have a proper

672
00:24:11,760 --> 00:24:13,440
config that has all the right roles

673
00:24:13,440 --> 00:24:17,279
configured and access to the right

674
00:24:17,279 --> 00:24:19,760
access control points and the right uh

675
00:24:19,760 --> 00:24:22,799
apis to to launch our tasks

676
00:24:22,799 --> 00:24:24,640
so we'll make an option for that and we

677
00:24:24,640 --> 00:24:26,159
will validate configuration inside the

678
00:24:26,159 --> 00:24:28,159
option of course the cluster name

679
00:24:28,159 --> 00:24:29,600
because we don't want to just be

680
00:24:29,600 --> 00:24:31,600
launching containers all over the place

681
00:24:31,600 --> 00:24:32,880
we'll want to restrict them to a certain

682
00:24:32,880 --> 00:24:34,799
cluster so there's some control

683
00:24:34,799 --> 00:24:36,880
a singular point of control when we can

684
00:24:36,880 --> 00:24:38,960
turn off the whole cluster and shut the

685
00:24:38,960 --> 00:24:41,279
servers if something goes wrong

686
00:24:41,279 --> 00:24:43,679
we'll need a url factory right because

687
00:24:43,679 --> 00:24:45,360
eventually those containers will need to

688
00:24:45,360 --> 00:24:49,039
be accessed somehow and the public ip

689
00:24:49,039 --> 00:24:50,960
will need to be converted to a link

690
00:24:50,960 --> 00:24:53,039
maybe we'll be passing a token of some

691
00:24:53,039 --> 00:24:54,240
sort

692
00:24:54,240 --> 00:24:56,880
as well for access management and a url

693
00:24:56,880 --> 00:24:59,520
factory method a behavior is very

694
00:24:59,520 --> 00:25:01,039
convenient way to do that we're passing

695
00:25:01,039 --> 00:25:04,480
behavior using an options pattern

696
00:25:04,480 --> 00:25:08,480
next um fargate takes subnet

697
00:25:08,480 --> 00:25:09,919
configuration and security group

698
00:25:09,919 --> 00:25:12,080
configuration a security group in aws is

699
00:25:12,080 --> 00:25:14,799
basically a firewall set of rules

700
00:25:14,799 --> 00:25:15,840
and

701
00:25:15,840 --> 00:25:18,640
the way fargate is set up is that it

702
00:25:18,640 --> 00:25:21,200
takes both subnets and security groups

703
00:25:21,200 --> 00:25:23,360
without differentiating between them

704
00:25:23,360 --> 00:25:25,200
it doesn't care if they're private or

705
00:25:25,200 --> 00:25:26,640
public

706
00:25:26,640 --> 00:25:29,760
but we care right because we need to

707
00:25:29,760 --> 00:25:32,159
make sure our containers are either

708
00:25:32,159 --> 00:25:34,159
public or private we never want to have

709
00:25:34,159 --> 00:25:36,000
one that's supposed to be

710
00:25:36,000 --> 00:25:37,760
internet private

711
00:25:37,760 --> 00:25:39,679
launched with a public subnet

712
00:25:39,679 --> 00:25:41,200
configuration

713
00:25:41,200 --> 00:25:43,360
to preclude that we can actually write

714
00:25:43,360 --> 00:25:45,679
an option that will differentiate and

715
00:25:45,679 --> 00:25:48,799
protect the forget api

716
00:25:48,799 --> 00:25:51,440
by checking our settings

717
00:25:51,440 --> 00:25:53,840
so that when we provide the subnet id

718
00:25:53,840 --> 00:25:56,240
let's go ahead and just peek at that ip

719
00:25:56,240 --> 00:25:58,720
address of that subnet

720
00:25:58,720 --> 00:26:01,039
and see maybe if it starts from

721
00:26:01,039 --> 00:26:04,240
10.0 right because that will indicate

722
00:26:04,240 --> 00:26:06,559
a private ip most likely that's just a

723
00:26:06,559 --> 00:26:07,760
simple check but you can be more

724
00:26:07,760 --> 00:26:09,760
sophisticated than that but the point

725
00:26:09,760 --> 00:26:11,600
being is that when a person configures

726
00:26:11,600 --> 00:26:14,320
your object this will prevent them from

727
00:26:14,320 --> 00:26:16,320
publicly exposing the container when

728
00:26:16,320 --> 00:26:19,840
they did not intend to

729
00:26:19,840 --> 00:26:22,799
otherwise you're just relying

730
00:26:22,799 --> 00:26:24,400
on that id

731
00:26:24,400 --> 00:26:27,360
to be pointing to the correct subnet

732
00:26:27,360 --> 00:26:29,360
a person chasing a deadline will they

733
00:26:29,360 --> 00:26:31,679
present you the correct one yes you

734
00:26:31,679 --> 00:26:34,720
guessed it very likely not so have your

735
00:26:34,720 --> 00:26:37,919
option check for it similarly a security

736
00:26:37,919 --> 00:26:39,120
group id

737
00:26:39,120 --> 00:26:41,360
option can access that security group

738
00:26:41,360 --> 00:26:44,559
and check the ingress and ingress

739
00:26:44,559 --> 00:26:46,799
firewall rules to make sure that only

740
00:26:46,799 --> 00:26:48,880
certain types of traffic gets in and out

741
00:26:48,880 --> 00:26:50,559
of your container

742
00:26:50,559 --> 00:26:51,919
and for each one of those options you

743
00:26:51,919 --> 00:26:54,240
can also wrap them with additional

744
00:26:54,240 --> 00:26:56,400
functionality when you are presenting

745
00:26:56,400 --> 00:26:57,200
them

746
00:26:57,200 --> 00:26:59,279
to your fargate containerized task

747
00:26:59,279 --> 00:27:00,320
launcher

748
00:27:00,320 --> 00:27:02,240
this is called security

749
00:27:02,240 --> 00:27:04,960
built in and even if the api itself did

750
00:27:04,960 --> 00:27:07,200
not account for those failure states

751
00:27:07,200 --> 00:27:09,679
you're accounting for it in your

752
00:27:09,679 --> 00:27:12,400
implementation

753
00:27:13,919 --> 00:27:15,679
fargate api does not differentiate

754
00:27:15,679 --> 00:27:16,799
public and private networking

755
00:27:16,799 --> 00:27:18,000
dependencies

756
00:27:18,000 --> 00:27:19,360
but we must

757
00:27:19,360 --> 00:27:21,520
and the option pattern here will help us

758
00:27:21,520 --> 00:27:23,918
do that

759
00:27:24,159 --> 00:27:26,559
let's look at a hypothetical encrypted

760
00:27:26,559 --> 00:27:29,120
network tunnel those are fun to write

761
00:27:29,120 --> 00:27:31,760
and we'll need to have it very flexible

762
00:27:31,760 --> 00:27:33,360
and configurable

763
00:27:33,360 --> 00:27:35,600
and let's set it up with a certain

764
00:27:35,600 --> 00:27:37,360
packet size

765
00:27:37,360 --> 00:27:39,039
large packet size

766
00:27:39,039 --> 00:27:41,279
means greater efficiency for processing

767
00:27:41,279 --> 00:27:44,240
but also greater latency and who knows

768
00:27:44,240 --> 00:27:47,120
where this encrypted tunnel will be used

769
00:27:47,120 --> 00:27:49,679
will be an iot device

770
00:27:49,679 --> 00:27:52,080
a backup server who knows we want that

771
00:27:52,080 --> 00:27:53,919
to be configurable

772
00:27:53,919 --> 00:27:55,919
and so we're going to make an option for

773
00:27:55,919 --> 00:27:57,919
that second of course if it's encrypted

774
00:27:57,919 --> 00:28:00,159
it will need a key provider and we'll

775
00:28:00,159 --> 00:28:01,919
need to write some adapters for

776
00:28:01,919 --> 00:28:03,919
different key providers that we're using

777
00:28:03,919 --> 00:28:06,480
so there's a security built in not just

778
00:28:06,480 --> 00:28:08,320
in initializing the key provider but

779
00:28:08,320 --> 00:28:10,480
also validating that it's working

780
00:28:10,480 --> 00:28:11,919
correctly

781
00:28:11,919 --> 00:28:13,840
we will also need a recovery fallback

782
00:28:13,840 --> 00:28:16,000
right what if our instance that's

783
00:28:16,000 --> 00:28:19,039
providing the network tunnel is rebooted

784
00:28:19,039 --> 00:28:21,679
our protocol could be stateless like

785
00:28:21,679 --> 00:28:23,840
wireguard or maybe it's stateful if it

786
00:28:23,840 --> 00:28:25,360
is stateful we'll need a recovery

787
00:28:25,360 --> 00:28:26,640
strategy

788
00:28:26,640 --> 00:28:28,799
and we could write a journal rollback

789
00:28:28,799 --> 00:28:30,559
strategy so that even if there is a

790
00:28:30,559 --> 00:28:33,360
reboot or some kind of a problem that

791
00:28:33,360 --> 00:28:35,200
shuts down the network tunnel it can

792
00:28:35,200 --> 00:28:38,240
rebuild itself when it wakes up

793
00:28:38,240 --> 00:28:40,880
a nonce factory is so important because

794
00:28:40,880 --> 00:28:42,880
nonsense will have to be synchronized

795
00:28:42,880 --> 00:28:45,600
centrally uh if we're using multiple

796
00:28:45,600 --> 00:28:47,520
instances or if we're managing

797
00:28:47,520 --> 00:28:49,760
connections at scale

798
00:28:49,760 --> 00:28:51,919
and there of course we can decide if we

799
00:28:51,919 --> 00:28:55,039
can use like a local non-skash or a

800
00:28:55,039 --> 00:28:56,960
networked one or even use something

801
00:28:56,960 --> 00:28:59,840
really fancy like etcd with raft a

802
00:28:59,840 --> 00:29:03,279
protocol for synchronization

803
00:29:03,440 --> 00:29:05,440
of course we want to handle errors

804
00:29:05,440 --> 00:29:08,720
gratefully and with error handler is a

805
00:29:08,720 --> 00:29:11,039
way to pass a closure

806
00:29:11,039 --> 00:29:13,039
to respond to an error that's so

807
00:29:13,039 --> 00:29:15,200
convenient to have on just about any

808
00:29:15,200 --> 00:29:17,919
object sometimes you want to respond to

809
00:29:17,919 --> 00:29:19,360
a particular error state but maybe

810
00:29:19,360 --> 00:29:20,880
you're just hunting for one type of

811
00:29:20,880 --> 00:29:22,320
error or you're interested in a

812
00:29:22,320 --> 00:29:24,080
particular type of error

813
00:29:24,080 --> 00:29:26,399
pass an error handler and by the way

814
00:29:26,399 --> 00:29:28,960
nothing stops you from repeating the

815
00:29:28,960 --> 00:29:30,960
option multiple times

816
00:29:30,960 --> 00:29:32,240
if you would like multiple error

817
00:29:32,240 --> 00:29:34,399
handlers you can write it in such a way

818
00:29:34,399 --> 00:29:36,960
that they're appended to a list that

819
00:29:36,960 --> 00:29:38,720
will be iterated when an error does

820
00:29:38,720 --> 00:29:40,080
occur and this will give you

821
00:29:40,080 --> 00:29:41,679
instrumentation for

822
00:29:41,679 --> 00:29:45,279
logging for recovery for alerts

823
00:29:45,279 --> 00:29:48,240
and alerts are good for security

824
00:29:48,240 --> 00:29:50,240
well there is an elephant in the room

825
00:29:50,240 --> 00:29:52,640
here that i did not even mention this

826
00:29:52,640 --> 00:29:55,679
whole time

827
00:29:55,679 --> 00:29:57,840
think back you know what are we actually

828
00:29:57,840 --> 00:30:00,080
doing

829
00:30:00,559 --> 00:30:03,440
we are pulling out complex validation

830
00:30:03,440 --> 00:30:04,399
code

831
00:30:04,399 --> 00:30:06,000
out of the constructor

832
00:30:06,000 --> 00:30:09,919
and isolating it by concern and behavior

833
00:30:09,919 --> 00:30:11,520
inside singular

834
00:30:11,520 --> 00:30:14,000
functions

835
00:30:15,360 --> 00:30:17,279
the options pattern

836
00:30:17,279 --> 00:30:19,919
is the most testable initialization

837
00:30:19,919 --> 00:30:21,039
strategy

838
00:30:21,039 --> 00:30:23,520
you're ever going to get

839
00:30:23,520 --> 00:30:25,279
because you're isolating one or two

840
00:30:25,279 --> 00:30:28,159
parameters per function you're already

841
00:30:28,159 --> 00:30:29,679
setting up code

842
00:30:29,679 --> 00:30:31,919
that's testable without having to go

843
00:30:31,919 --> 00:30:33,760
through multiple factories or multiple

844
00:30:33,760 --> 00:30:36,960
builders and validate each one you are

845
00:30:36,960 --> 00:30:38,799
isolating concerns

846
00:30:38,799 --> 00:30:42,720
and make them easy to discover for bugs

847
00:30:42,720 --> 00:30:45,440
and to check for security by writing a

848
00:30:45,440 --> 00:30:47,200
battery of unit tests

849
00:30:47,200 --> 00:30:49,200
on each

850
00:30:49,200 --> 00:30:51,200
this is a wonderful benefit

851
00:30:51,200 --> 00:30:52,880
of the options pattern and of course we

852
00:30:52,880 --> 00:30:53,760
know

853
00:30:53,760 --> 00:30:56,159
that testability and security are

854
00:30:56,159 --> 00:30:58,880
closely related the earlier you can test

855
00:30:58,880 --> 00:31:00,640
the more thoroughly you can test the

856
00:31:00,640 --> 00:31:02,240
more you can isolate the better your

857
00:31:02,240 --> 00:31:03,760
security will be

858
00:31:03,760 --> 00:31:06,000
and this will give you the advantage

859
00:31:06,000 --> 00:31:09,600
of writing your tests in such a way

860
00:31:09,600 --> 00:31:11,600
that you can handle

861
00:31:11,600 --> 00:31:15,679
high complexity with great security

862
00:31:15,679 --> 00:31:16,880
o wasp

863
00:31:16,880 --> 00:31:18,640
top 10 number six

864
00:31:18,640 --> 00:31:21,840
security misconfiguration

865
00:31:21,840 --> 00:31:23,840
number six

866
00:31:23,840 --> 00:31:24,799
can we

867
00:31:24,799 --> 00:31:27,600
remove this vulnerability type from a

868
00:31:27,600 --> 00:31:29,600
wasp.10

869
00:31:29,600 --> 00:31:31,440
i believe we can

870
00:31:31,440 --> 00:31:34,000
use the options pattern

871
00:31:34,000 --> 00:31:35,840
it is not the responsibility of the

872
00:31:35,840 --> 00:31:37,919
consumer to keep your app secure it is

873
00:31:37,919 --> 00:31:40,399
your responsibility as a programmer to

874
00:31:40,399 --> 00:31:42,640
write your app secure an insecure

875
00:31:42,640 --> 00:31:44,880
configuration is a failure state that

876
00:31:44,880 --> 00:31:47,039
needs to be detected

877
00:31:47,039 --> 00:31:49,039
and needs to be rejected

878
00:31:49,039 --> 00:31:51,919
early in the program execution and then

879
00:31:51,919 --> 00:31:54,640
this will go away

880
00:31:54,640 --> 00:31:56,960
some key takeaways

881
00:31:56,960 --> 00:31:59,039
if something can be misused

882
00:31:59,039 --> 00:32:01,519
it will be misused

883
00:32:01,519 --> 00:32:03,600
be secure by default and that means

884
00:32:03,600 --> 00:32:05,200
weekend services

885
00:32:05,200 --> 00:32:07,279
should not even start

886
00:32:07,279 --> 00:32:09,840
in the cloud

887
00:32:09,840 --> 00:32:12,720
in a sophisticated system

888
00:32:12,720 --> 00:32:14,480
it's just a matter of time before

889
00:32:14,480 --> 00:32:15,840
somebody

890
00:32:15,840 --> 00:32:17,760
presents a wrong configuration or all

891
00:32:17,760 --> 00:32:21,120
configuration and the service falls over

892
00:32:21,120 --> 00:32:23,440
build the security into

893
00:32:23,440 --> 00:32:25,760
the into the program use the options

894
00:32:25,760 --> 00:32:28,799
pattern to detect the problem and fix it

895
00:32:28,799 --> 00:32:30,960
or prevent the program from running

896
00:32:30,960 --> 00:32:33,039
if if there is one

897
00:32:33,039 --> 00:32:34,000
second

898
00:32:34,000 --> 00:32:36,159
the options pattern guards against

899
00:32:36,159 --> 00:32:38,240
configuration invalid initialization

900
00:32:38,240 --> 00:32:39,120
states

901
00:32:39,120 --> 00:32:42,760
and other vulnerabilities

902
00:32:43,039 --> 00:32:44,320
third

903
00:32:44,320 --> 00:32:46,320
the options pattern is convenient for

904
00:32:46,320 --> 00:32:47,919
automated testing

905
00:32:47,919 --> 00:32:49,760
i would contend it is the most

906
00:32:49,760 --> 00:32:52,080
convenient initialization strategy for

907
00:32:52,080 --> 00:32:55,360
automated testing

908
00:32:55,519 --> 00:32:58,240
testable code is reliable and secure

909
00:32:58,240 --> 00:33:00,320
use the options pattern

910
00:33:00,320 --> 00:33:03,039
and fourth i hope i'm able to inspire

911
00:33:03,039 --> 00:33:05,200
you to implement the options pattern in

912
00:33:05,200 --> 00:33:07,200
your next major version release to

913
00:33:07,200 --> 00:33:09,279
bolster security with a boost of code

914
00:33:09,279 --> 00:33:10,559
readability

915
00:33:10,559 --> 00:33:14,480
reliability and resilience

916
00:33:16,080 --> 00:33:19,039
your program your api your library will

917
00:33:19,039 --> 00:33:22,320
be easier to use it will be fun to use

918
00:33:22,320 --> 00:33:25,840
and secure to use if it has the options

919
00:33:25,840 --> 00:33:30,959
pattern at its top api interface

920
00:33:33,600 --> 00:33:34,960
if you are interested in the subject

921
00:33:34,960 --> 00:33:36,880
here are a few more resources to

922
00:33:36,880 --> 00:33:38,880
consider first of all there's a classic

923
00:33:38,880 --> 00:33:41,200
presentation by dave cheney on the

924
00:33:41,200 --> 00:33:43,600
options pattern which is very excellent

925
00:33:43,600 --> 00:33:45,440
there's an article if you're more into

926
00:33:45,440 --> 00:33:46,480
reading

927
00:33:46,480 --> 00:33:50,080
explained by mark sagi kazar

928
00:33:50,080 --> 00:33:52,399
there's also a really good blog on how

929
00:33:52,399 --> 00:33:54,240
to apply the options pattern to database

930
00:33:54,240 --> 00:33:56,880
queries um it's a very interesting use

931
00:33:56,880 --> 00:33:59,120
case of a similar approach

932
00:33:59,120 --> 00:34:00,399
and finally

933
00:34:00,399 --> 00:34:02,640
there is a full example source code just

934
00:34:02,640 --> 00:34:05,440
with comments of the options pattern as

935
00:34:05,440 --> 00:34:08,399
i presented it in this talk

936
00:34:08,399 --> 00:34:10,639
that you can access but that qr code

937
00:34:10,639 --> 00:34:12,879
it's compilable it will run and it gives

938
00:34:12,879 --> 00:34:14,879
you an opportunity to study this in more

939
00:34:14,879 --> 00:34:17,199
detail

940
00:34:17,280 --> 00:34:19,119
thank you so much jimmy thank you for

941
00:34:19,119 --> 00:34:20,399
the great talk

942
00:34:20,399 --> 00:34:22,879
uh it was inspiring

943
00:34:22,879 --> 00:34:24,639
i'm a big fan of

944
00:34:24,639 --> 00:34:28,560
this idea making software development

945
00:34:28,560 --> 00:34:31,599
much less convenient for introducing

946
00:34:31,599 --> 00:34:33,679
vulnerabilities and

947
00:34:33,679 --> 00:34:37,199
yeah it was very much

948
00:34:37,199 --> 00:34:38,800
uh

949
00:34:38,800 --> 00:34:40,389
along these lines so

950
00:34:40,389 --> 00:34:42,879
[Music]

951
00:34:42,879 --> 00:34:45,199
at one point you just said that

952
00:34:45,199 --> 00:34:47,440
you

953
00:34:47,440 --> 00:34:49,040
uh

954
00:34:49,040 --> 00:34:50,399
jokingly

955
00:34:50,399 --> 00:34:54,159
have an idea of writing a book on that

956
00:34:54,159 --> 00:34:57,040
why is it joke why is it a joke though i

957
00:34:57,040 --> 00:35:00,560
think it's actually a good idea

958
00:35:00,560 --> 00:35:03,599
well it was more of a pawn to the trend

959
00:35:03,599 --> 00:35:06,880
to make uh fans

960
00:35:07,200 --> 00:35:10,480
i see i like didn't catch that

961
00:35:10,480 --> 00:35:12,640
sorry yeah well because people will take

962
00:35:12,640 --> 00:35:14,240
an idea that may be a good one like test

963
00:35:14,240 --> 00:35:15,680
driven design you know

964
00:35:15,680 --> 00:35:16,720
and

965
00:35:16,720 --> 00:35:18,320
then it's all like really crazy until

966
00:35:18,320 --> 00:35:20,240
people get really tired of it um because

967
00:35:20,240 --> 00:35:22,400
most of those ideas they need to be

968
00:35:22,400 --> 00:35:24,720
weighted and carefully applied like i am

969
00:35:24,720 --> 00:35:28,240
a big fan of a test driven design

970
00:35:28,240 --> 00:35:29,040
but

971
00:35:29,040 --> 00:35:32,079
in in practice i maybe use the approach

972
00:35:32,079 --> 00:35:34,400
perhaps 20 of the time and that's not a

973
00:35:34,400 --> 00:35:35,920
constraint

974
00:35:35,920 --> 00:35:37,599
of choice it's just what the budget and

975
00:35:37,599 --> 00:35:39,280
how much time i'm allowed to work on a

976
00:35:39,280 --> 00:35:41,359
solution you know so and my time is very

977
00:35:41,359 --> 00:35:42,320
valuable

978
00:35:42,320 --> 00:35:44,880
so what i'm going to do i will use the

979
00:35:44,880 --> 00:35:47,200
most of the approach is benefit but i'm

980
00:35:47,200 --> 00:35:49,119
not going to just write it like a fad

981
00:35:49,119 --> 00:35:51,200
and do you know put it everywhere so

982
00:35:51,200 --> 00:35:52,880
options pattern is kind of like that too

983
00:35:52,880 --> 00:35:55,599
it has uses it's great but uh don't put

984
00:35:55,599 --> 00:35:58,760
it everywhere

985
00:35:59,440 --> 00:36:01,440
yeah yeah

986
00:36:01,440 --> 00:36:03,040
the paradigms should be used to the

987
00:36:03,040 --> 00:36:05,119
extent they are useful for

988
00:36:05,119 --> 00:36:07,200
if they're not that's just just the

989
00:36:07,200 --> 00:36:09,760
religion i guess already not using the

990
00:36:09,760 --> 00:36:10,800
paradigm

991
00:36:10,800 --> 00:36:14,240
okay okay do we have any questions from

992
00:36:14,240 --> 00:36:15,599
the stream

993
00:36:15,599 --> 00:36:17,599
or in zoom i

994
00:36:17,599 --> 00:36:19,920
remind to all our attendees that if you

995
00:36:19,920 --> 00:36:22,720
want to do it out loud you just raise

996
00:36:22,720 --> 00:36:26,720
your hand and i will allow you to talk

997
00:36:26,720 --> 00:36:28,880
and

998
00:36:28,880 --> 00:36:32,079
if you don't you just

999
00:36:32,400 --> 00:36:36,040
just type it in

1000
00:36:48,079 --> 00:36:51,520
i think people are just hungry

1001
00:36:51,520 --> 00:36:53,280
right before i sense

1002
00:36:53,280 --> 00:36:57,520
low sugar levels in this chat room

1003
00:36:59,760 --> 00:37:02,000
okay and then the mother that i don't

1004
00:37:02,000 --> 00:37:03,440
know

1005
00:37:03,440 --> 00:37:04,960
certainly you have to

1006
00:37:04,960 --> 00:37:07,520
have certain

1007
00:37:07,520 --> 00:37:08,400
background

1008
00:37:08,400 --> 00:37:09,280
uh

1009
00:37:09,280 --> 00:37:11,440
to grasp all the concepts concepts that

1010
00:37:11,440 --> 00:37:12,880
you just uh

1011
00:37:12,880 --> 00:37:15,200
outlined and uh yeah for me it was a

1012
00:37:15,200 --> 00:37:17,119
good introductory talking to the topic

1013
00:37:17,119 --> 00:37:19,599
and i most probably will delve deeper

1014
00:37:19,599 --> 00:37:21,280
into it

1015
00:37:21,280 --> 00:37:24,880
but i am not sure i am capable to

1016
00:37:24,880 --> 00:37:27,040
pose any questions and i think that's

1017
00:37:27,040 --> 00:37:28,320
the

1018
00:37:28,320 --> 00:37:29,280
theme

1019
00:37:29,280 --> 00:37:30,480
out there

1020
00:37:30,480 --> 00:37:32,480
in our audience

1021
00:37:32,480 --> 00:37:33,200
but

1022
00:37:33,200 --> 00:37:36,000
nevertheless that was very exciting

1023
00:37:36,000 --> 00:37:37,680
security professionals you know say

1024
00:37:37,680 --> 00:37:39,920
about shifting security left

1025
00:37:39,920 --> 00:37:41,599
uh there's like a really big buzzword

1026
00:37:41,599 --> 00:37:44,160
too but uh when in practice you say how

1027
00:37:44,160 --> 00:37:46,240
do you do this well that's one of the

1028
00:37:46,240 --> 00:37:47,839
easiest way that's one of the best ways

1029
00:37:47,839 --> 00:37:50,480
to actually uh for sure but when

1030
00:37:50,480 --> 00:37:52,480
security professionals

1031
00:37:52,480 --> 00:37:54,400
talk about shifting left normally then

1032
00:37:54,400 --> 00:37:56,960
they mean implementing some zest or

1033
00:37:56,960 --> 00:37:59,920
other deficio stuff you know

1034
00:37:59,920 --> 00:38:02,560
uh and this is like uh

1035
00:38:02,560 --> 00:38:04,720
yeah this is it this is it this is

1036
00:38:04,720 --> 00:38:06,079
culture

1037
00:38:06,079 --> 00:38:08,720
yeah so it's like thinking differently

1038
00:38:08,720 --> 00:38:10,480
and uh by

1039
00:38:10,480 --> 00:38:13,359
applying thinking patterns just avoiding

1040
00:38:13,359 --> 00:38:15,839
risky areas right

1041
00:38:15,839 --> 00:38:19,040
it's like switching from no it's a very

1042
00:38:19,040 --> 00:38:20,960
rough example i understand but it's like

1043
00:38:20,960 --> 00:38:23,839
switching from c plus plus to java okay

1044
00:38:23,839 --> 00:38:25,760
there are many things you cannot do in

1045
00:38:25,760 --> 00:38:27,760
java that you otherwise would be able to

1046
00:38:27,760 --> 00:38:29,680
do in c plus

1047
00:38:29,680 --> 00:38:32,800
and get and get hacked right

1048
00:38:32,800 --> 00:38:34,480
so yeah

1049
00:38:34,480 --> 00:38:37,680
shifting the paradigm uh is one of the

1050
00:38:37,680 --> 00:38:40,560
ways to shift left and to start applying

1051
00:38:40,560 --> 00:38:43,920
security practices early in the sdlc

1052
00:38:43,920 --> 00:38:46,800
but unfortunately the market

1053
00:38:46,800 --> 00:38:49,680
buzzwords are dictating other strategies

1054
00:38:49,680 --> 00:38:51,920
like implementing some

1055
00:38:51,920 --> 00:38:54,640
code analysis or

1056
00:38:54,640 --> 00:38:56,160
usually

1057
00:38:56,160 --> 00:38:57,440
yeah

1058
00:38:57,440 --> 00:38:59,280
usually it's a solution unfortunately

1059
00:38:59,280 --> 00:39:01,200
throw money at a problem until it goes

1060
00:39:01,200 --> 00:39:02,480
away

1061
00:39:02,480 --> 00:39:04,880
yeah leftist left of all left in

1062
00:39:04,880 --> 00:39:07,040
shifting left is threat modeling

1063
00:39:07,040 --> 00:39:09,440
virtually no one does it

1064
00:39:09,440 --> 00:39:12,720
okay just set some time aside

1065
00:39:12,720 --> 00:39:14,800
put it into threat modeling

1066
00:39:14,800 --> 00:39:17,119
it's a crazy idea for everyone because

1067
00:39:17,119 --> 00:39:18,720
we would otherwise

1068
00:39:18,720 --> 00:39:22,560
use this time to implement features

1069
00:39:22,560 --> 00:39:24,560
sad story but

1070
00:39:24,560 --> 00:39:26,960
unfortunately it's true

1071
00:39:26,960 --> 00:39:29,680
but if you okay then correctly it's uh

1072
00:39:29,680 --> 00:39:32,320
one twentieth of the cost of uh

1073
00:39:32,320 --> 00:39:35,520
fixing and preventing right

1074
00:39:35,520 --> 00:39:37,520
i

1075
00:39:37,520 --> 00:39:40,800
i'm a big fan of this idea but uh

1076
00:39:40,800 --> 00:39:43,280
you know i have background in actually

1077
00:39:43,280 --> 00:39:46,320
trying to sell that mindset you know

1078
00:39:46,320 --> 00:39:47,359
uh

1079
00:39:47,359 --> 00:39:49,920
it's very hard

1080
00:39:49,920 --> 00:39:51,200
uh

1081
00:39:51,200 --> 00:39:52,880
when it even when you're talking to a

1082
00:39:52,880 --> 00:39:54,880
very analytical person

1083
00:39:54,880 --> 00:39:58,320
who actually understand the math and

1084
00:39:58,320 --> 00:39:59,359
they know

1085
00:39:59,359 --> 00:40:02,079
the idea about the

1086
00:40:02,079 --> 00:40:03,839
mathematic models

1087
00:40:03,839 --> 00:40:07,200
behind these concepts

1088
00:40:07,200 --> 00:40:10,560
they may get it but they cannot push it

1089
00:40:10,560 --> 00:40:12,960
through the bureaucracy and the decision

1090
00:40:12,960 --> 00:40:15,280
making in the in the business in the

1091
00:40:15,280 --> 00:40:18,160
actual business just because

1092
00:40:18,160 --> 00:40:21,119
security is uncertain you know

1093
00:40:21,119 --> 00:40:23,200
business people do not have good

1094
00:40:23,200 --> 00:40:24,960
intuition

1095
00:40:24,960 --> 00:40:26,400
about

1096
00:40:26,400 --> 00:40:28,560
prevented losses

1097
00:40:28,560 --> 00:40:30,640
they're thinking about top lines bottom

1098
00:40:30,640 --> 00:40:32,480
lines but prevented losses is something

1099
00:40:32,480 --> 00:40:34,400
very virtual it might happen might never

1100
00:40:34,400 --> 00:40:36,800
happen why bother before it happens and

1101
00:40:36,800 --> 00:40:40,079
that's that's it but yeah if we if we

1102
00:40:40,079 --> 00:40:44,480
one day uh have enough data in order to

1103
00:40:44,480 --> 00:40:47,760
uh make something out of it and state as

1104
00:40:47,760 --> 00:40:50,079
a fact maybe that will help

1105
00:40:50,079 --> 00:40:53,359
but until then yeah this uh

1106
00:40:53,359 --> 00:40:56,880
this undercover magic

1107
00:40:56,880 --> 00:40:58,720
of doing stuff that

1108
00:40:58,720 --> 00:41:00,800
similar to that is similar to what you

1109
00:41:00,800 --> 00:41:03,200
just described maybe maybe the only way

1110
00:41:03,200 --> 00:41:05,440
we can achieve more secure software just

1111
00:41:05,440 --> 00:41:07,760
just not letting the business people

1112
00:41:07,760 --> 00:41:09,839
know that we do it and yeah moving in

1113
00:41:09,839 --> 00:41:13,119
the right direction this way

1114
00:41:13,520 --> 00:41:17,040
i think it was a very sad note to end

1115
00:41:17,040 --> 00:41:19,760
to wrap up such such an optimistic uh

1116
00:41:19,760 --> 00:41:22,160
talk but nevertheless

1117
00:41:22,160 --> 00:41:24,640
that's how it is so thank you very much

1118
00:41:24,640 --> 00:41:27,520
for bringing this up uh it's so it was

1119
00:41:27,520 --> 00:41:29,440
really interesting for me personally and

1120
00:41:29,440 --> 00:41:31,599
i hope that everyone enjoyed it as well

1121
00:41:31,599 --> 00:41:34,560
if you missed it if you just join

1122
00:41:34,560 --> 00:41:37,119
rewind and watch it or just watch it

1123
00:41:37,119 --> 00:41:39,440
when it's published on youtube in a

1124
00:41:39,440 --> 00:41:41,599
couple of weeks nemo thank you very much

1125
00:41:41,599 --> 00:41:43,440
it's nice having you here

1126
00:41:43,440 --> 00:41:46,599
thank you

