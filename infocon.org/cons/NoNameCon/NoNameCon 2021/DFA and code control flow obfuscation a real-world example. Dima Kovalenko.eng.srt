1
00:00:03,840 --> 00:00:05,680
hi i'm dima today i talk about

2
00:00:05,680 --> 00:00:07,919
deterministic finite automata and code

3
00:00:07,919 --> 00:00:09,760
control flow of sketch it's not a

4
00:00:09,760 --> 00:00:11,679
theoretical presentation i will show you

5
00:00:11,679 --> 00:00:14,000
some real obfuscated code found into the

6
00:00:14,000 --> 00:00:15,120
wild

7
00:00:15,120 --> 00:00:16,400
to be honest i am not good in

8
00:00:16,400 --> 00:00:18,800
non-technical talks so let me skip

9
00:00:18,800 --> 00:00:21,760
myself presentation introduction funny

10
00:00:21,760 --> 00:00:22,960
jokes

11
00:00:22,960 --> 00:00:24,480
let's start right from the technical

12
00:00:24,480 --> 00:00:25,680
things

13
00:00:25,680 --> 00:00:28,560
i found this code in an ios application

14
00:00:28,560 --> 00:00:31,199
from app store the code is a part of

15
00:00:31,199 --> 00:00:33,200
anti-tampering protection at first it

16
00:00:33,200 --> 00:00:35,200
doesn't look any special

17
00:00:35,200 --> 00:00:37,920
it's an objective-c method the class is

18
00:00:37,920 --> 00:00:40,640
device uad the selector is safe

19
00:00:40,640 --> 00:00:42,719
the code itself looks absolutely

20
00:00:42,719 --> 00:00:45,440
ordinary but if i try to execute it to

21
00:00:45,440 --> 00:00:47,680
an exit point i mean to return

22
00:00:47,680 --> 00:00:49,920
instruction on the jio broken iphone the

23
00:00:49,920 --> 00:00:52,559
application process just exits

24
00:00:52,559 --> 00:00:54,480
boom

25
00:00:54,480 --> 00:00:57,440
ok let's take a close look at the code

26
00:00:57,440 --> 00:00:59,920
respond the application under odb then

27
00:00:59,920 --> 00:01:01,600
break point and disassemble the

28
00:01:01,600 --> 00:01:04,080
objective-c method that's how the method

29
00:01:04,080 --> 00:01:05,519
code looks like

30
00:01:05,519 --> 00:01:07,520
please note that instruction addresses

31
00:01:07,520 --> 00:01:10,880
are different now because of asl on ios

32
00:01:10,880 --> 00:01:12,960
well first of all the epilogue

33
00:01:12,960 --> 00:01:15,280
instructions look weird they do not

34
00:01:15,280 --> 00:01:17,119
balance stack there is no return

35
00:01:17,119 --> 00:01:19,119
instruction

36
00:01:19,119 --> 00:01:21,360
and there are two more pieces of weird

37
00:01:21,360 --> 00:01:25,479
code related to the epilogue

38
00:01:27,759 --> 00:01:29,520
now you can see all instruction of the

39
00:01:29,520 --> 00:01:31,680
always try all instructions of the weird

40
00:01:31,680 --> 00:01:33,600
code in the right part of the screen of

41
00:01:33,600 --> 00:01:35,280
course there are no labels in the

42
00:01:35,280 --> 00:01:37,200
original machine code but i replaced

43
00:01:37,200 --> 00:01:38,960
absolute instruction addresses with

44
00:01:38,960 --> 00:01:40,880
labels to make the code more looking

45
00:01:40,880 --> 00:01:43,360
like an assembly sources i will explain

46
00:01:43,360 --> 00:01:45,840
the label names in a couple minutes

47
00:01:45,840 --> 00:01:48,640
now let me explain how the code works

48
00:01:48,640 --> 00:01:52,640
first of all i calculate the address of

49
00:01:52,640 --> 00:01:55,840
well let's call it sum data for now and

50
00:01:55,840 --> 00:01:58,479
store the address in the general purpose

51
00:01:58,479 --> 00:02:00,799
register x23

52
00:02:00,799 --> 00:02:03,280
then the code sets some stack variable

53
00:02:03,280 --> 00:02:05,119
to zero

54
00:02:05,119 --> 00:02:07,439
after that the code checks if the stack

55
00:02:07,439 --> 00:02:11,200
variable value is in range from 0 to 17.

56
00:02:11,200 --> 00:02:12,560
the 17 is

57
00:02:12,560 --> 00:02:15,440
is in hexadecimal number system

58
00:02:15,440 --> 00:02:17,360
if the variable is out of the range the

59
00:02:17,360 --> 00:02:19,920
code falls into an infinite loop from my

60
00:02:19,920 --> 00:02:21,520
point of view it's a strange way to

61
00:02:21,520 --> 00:02:24,000
handle out of range errors

62
00:02:24,000 --> 00:02:25,760
the last piece of code is quite

63
00:02:25,760 --> 00:02:28,720
important it explains actually

64
00:02:28,720 --> 00:02:30,239
everything

65
00:02:30,239 --> 00:02:33,519
let me remember that the register x23

66
00:02:33,519 --> 00:02:35,040
points to

67
00:02:35,040 --> 00:02:37,760
we called it some data

68
00:02:37,760 --> 00:02:39,519
looking at the code it's easy to see

69
00:02:39,519 --> 00:02:41,840
that some data is actually an array of

70
00:02:41,840 --> 00:02:42,879
two bytes

71
00:02:42,879 --> 00:02:44,720
unsigned integers

72
00:02:44,720 --> 00:02:47,680
and the stack variable is an index

73
00:02:47,680 --> 00:02:50,319
the code reads an element from the array

74
00:02:50,319 --> 00:02:53,200
by the index multiplies the element by 4

75
00:02:53,200 --> 00:02:55,360
and adds the result to the address of

76
00:02:55,360 --> 00:02:57,840
first instruction after the code

77
00:02:57,840 --> 00:03:00,400
it's the base label on the slide

78
00:03:00,400 --> 00:03:03,040
finally the code calls the resulting

79
00:03:03,040 --> 00:03:04,640
address

80
00:03:04,640 --> 00:03:06,959
as you see the array contains some

81
00:03:06,959 --> 00:03:10,640
offsets however the offsets are not byte

82
00:03:10,640 --> 00:03:13,920
offsets an element of the array is not a

83
00:03:13,920 --> 00:03:16,239
count of bytes to add to the base its

84
00:03:16,239 --> 00:03:18,720
account of irm machine instructions you

85
00:03:18,720 --> 00:03:21,360
should skip moving down from the base

86
00:03:21,360 --> 00:03:23,599
as you probably remember every irm

87
00:03:23,599 --> 00:03:26,720
instruction is four byte lengths so the

88
00:03:26,720 --> 00:03:29,920
code reads an element of the array then

89
00:03:29,920 --> 00:03:33,680
multiplies the element by 4 to get some

90
00:03:33,680 --> 00:03:36,640
byte offset and then the code calculates

91
00:03:36,640 --> 00:03:39,360
some absolute address by adding the byte

92
00:03:39,360 --> 00:03:42,319
offset to the base

93
00:03:44,239 --> 00:03:45,360
well

94
00:03:45,360 --> 00:03:48,080
i hope that the label names array adder

95
00:03:48,080 --> 00:03:50,879
initial array index and base i explain

96
00:03:50,879 --> 00:03:53,280
it now and the viewed code does not look

97
00:03:53,280 --> 00:03:55,760
too weird anymore i will explain the

98
00:03:55,760 --> 00:03:58,720
dispatcher label name later

99
00:03:58,720 --> 00:04:00,640
okay but there are two additional

100
00:04:00,640 --> 00:04:03,439
questions here the first one is

101
00:04:03,439 --> 00:04:06,239
what offsets are in the array

102
00:04:06,239 --> 00:04:08,319
now it's clear how to calculate absolute

103
00:04:08,319 --> 00:04:10,720
addresses from the sets but i'm too lazy

104
00:04:10,720 --> 00:04:12,879
to do it manually for every array

105
00:04:12,879 --> 00:04:16,079
element so i created the custom odb

106
00:04:16,079 --> 00:04:18,320
command dump off

107
00:04:18,320 --> 00:04:20,399
it finds the array in the

108
00:04:20,399 --> 00:04:22,320
virtual memory of the application

109
00:04:22,320 --> 00:04:23,520
process

110
00:04:23,520 --> 00:04:26,800
loops array indexes reads the elements

111
00:04:26,800 --> 00:04:29,360
for every index and calculates the

112
00:04:29,360 --> 00:04:32,160
corresponding absolute address

113
00:04:32,160 --> 00:04:34,000
just to make sure that the array is

114
00:04:34,000 --> 00:04:35,440
dumped correctly let's make an

115
00:04:35,440 --> 00:04:38,479
experiment breakpoint the branch

116
00:04:38,479 --> 00:04:41,040
instruction before the view code is

117
00:04:41,040 --> 00:04:43,600
executed and continue the process

118
00:04:43,600 --> 00:04:46,479
the the breakpoint hits the debugger

119
00:04:46,479 --> 00:04:49,120
prints tons of useless information but i

120
00:04:49,120 --> 00:04:52,479
use the magic key combination cmd l to

121
00:04:52,479 --> 00:04:53,600
remove it

122
00:04:53,600 --> 00:04:55,680
then i dump the register

123
00:04:55,680 --> 00:04:58,880
x9 and see what the address in the

124
00:04:58,880 --> 00:05:01,280
register equals

125
00:05:01,280 --> 00:05:03,599
to the

126
00:05:04,080 --> 00:05:06,560
then i dump the register x

127
00:05:06,560 --> 00:05:08,479
9 and see that the address in the

128
00:05:08,479 --> 00:05:10,240
register equals to the address

129
00:05:10,240 --> 00:05:12,479
calculated from the very first element

130
00:05:12,479 --> 00:05:14,720
of the array okay let's take a look at

131
00:05:14,720 --> 00:05:16,080
the code

132
00:05:16,080 --> 00:05:18,080
at the address

133
00:05:18,080 --> 00:05:20,240
i step one machine instruction forward

134
00:05:20,240 --> 00:05:22,800
and use the magic cmdl to clean up the

135
00:05:22,800 --> 00:05:24,639
step instruction output then i

136
00:05:24,639 --> 00:05:26,320
disassemble the code

137
00:05:26,320 --> 00:05:27,680
and check it

138
00:05:27,680 --> 00:05:30,000
i see that the code does something

139
00:05:30,000 --> 00:05:32,160
useful i do not try to understand what

140
00:05:32,160 --> 00:05:34,160
exactly it doesn't matter now

141
00:05:34,160 --> 00:05:36,639
then the code stores a new index to the

142
00:05:36,639 --> 00:05:39,360
stack variable and branches to the

143
00:05:39,360 --> 00:05:41,600
dispatcher label in the viewed code

144
00:05:41,600 --> 00:05:43,919
remember the dispatcher label i promised

145
00:05:43,919 --> 00:05:46,560
to explain it later and i will

146
00:05:46,560 --> 00:05:48,560
well i used the dump of command and

147
00:05:48,560 --> 00:05:51,120
randomly checked some addresses

148
00:05:51,120 --> 00:05:53,360
the code at the addresses always works

149
00:05:53,360 --> 00:05:55,759
in the same way do something useful

150
00:05:55,759 --> 00:05:58,319
store a new index to the stack variable

151
00:05:58,319 --> 00:05:59,280
branch

152
00:05:59,280 --> 00:06:01,039
to the dispatcher label in the weird

153
00:06:01,039 --> 00:06:02,080
code

154
00:06:02,080 --> 00:06:03,919
well now you understand how the word

155
00:06:03,919 --> 00:06:05,840
code works but let me explain it again

156
00:06:05,840 --> 00:06:09,520
without machine code just in case

157
00:06:09,520 --> 00:06:11,759
at the very beginning the index is zero

158
00:06:11,759 --> 00:06:13,759
then the dispatcher code

159
00:06:13,759 --> 00:06:15,840
reads the corresponding offset from the

160
00:06:15,840 --> 00:06:17,360
array

161
00:06:17,360 --> 00:06:20,240
and calculates the absolute address then

162
00:06:20,240 --> 00:06:22,479
the dispatcher code calls the code at

163
00:06:22,479 --> 00:06:24,479
the address the code does something

164
00:06:24,479 --> 00:06:26,880
useful changes the index and branch to

165
00:06:26,880 --> 00:06:29,120
the beginning of the dispatcher code the

166
00:06:29,120 --> 00:06:30,960
dispatcher does the same trick again

167
00:06:30,960 --> 00:06:32,800
this time with the new index and then

168
00:06:32,800 --> 00:06:35,039
again and again and again this

169
00:06:35,039 --> 00:06:37,360
obfuscation pattern makes static

170
00:06:37,360 --> 00:06:39,600
analysis of the code quite hard the

171
00:06:39,600 --> 00:06:42,000
dynamic analysis is not so hard but we

172
00:06:42,000 --> 00:06:43,520
anyway need to spend some time to

173
00:06:43,520 --> 00:06:46,080
understand how the pattern works

174
00:06:46,080 --> 00:06:47,039
okay

175
00:06:47,039 --> 00:06:50,160
now let me know how it works uh

176
00:06:50,160 --> 00:06:52,080
now we know how it works and can trace

177
00:06:52,080 --> 00:06:54,560
the calls let's restart the application

178
00:06:54,560 --> 00:06:57,440
under lldb again

179
00:06:57,440 --> 00:06:59,759
all the addresses are different again

180
00:06:59,759 --> 00:07:02,800
because of slr but i have the dump off

181
00:07:02,800 --> 00:07:05,199
command to dump the array and another

182
00:07:05,199 --> 00:07:08,000
custom command i created

183
00:07:08,000 --> 00:07:10,080
the track flow to track the dispatcher

184
00:07:10,080 --> 00:07:12,800
calls in real time the green addresses

185
00:07:12,800 --> 00:07:15,039
in the is the currently covered

186
00:07:15,039 --> 00:07:17,840
addresses the red addresses is the

187
00:07:17,840 --> 00:07:19,840
previously covered addresses if you

188
00:07:19,840 --> 00:07:22,000
constantly see the same green address

189
00:07:22,000 --> 00:07:24,880
you are looking at the loop

190
00:07:24,880 --> 00:07:27,199
it will take about

191
00:07:27,199 --> 00:07:29,840
probably 10 seconds and currently you

192
00:07:29,840 --> 00:07:32,880
are looking at the obfuscated calls to

193
00:07:32,880 --> 00:07:34,080
say

194
00:07:34,080 --> 00:07:37,560
in real time

195
00:07:49,039 --> 00:07:50,879
okay

196
00:07:50,879 --> 00:07:53,280
as usual

197
00:07:53,280 --> 00:07:54,080
the

198
00:07:54,080 --> 00:07:55,599
cause

199
00:07:55,599 --> 00:07:59,919
ended in a process exit code

200
00:07:59,919 --> 00:08:02,160
in some process exit code

201
00:08:02,160 --> 00:08:05,680
after 150 and 58 calls the process

202
00:08:05,680 --> 00:08:06,720
exists

203
00:08:06,720 --> 00:08:08,720
let's remember the index of the current

204
00:08:08,720 --> 00:08:09,759
call

205
00:08:09,759 --> 00:08:12,960
it's e in hexadecimal system also let's

206
00:08:12,960 --> 00:08:15,039
remember the index of the previous call

207
00:08:15,039 --> 00:08:16,720
it's three

208
00:08:16,720 --> 00:08:19,360
now i restart the application under lodb

209
00:08:19,360 --> 00:08:20,720
again

210
00:08:20,720 --> 00:08:22,400
dump the array

211
00:08:22,400 --> 00:08:24,800
and disassemble the code at the address

212
00:08:24,800 --> 00:08:28,160
by index e

213
00:08:31,360 --> 00:08:33,360
and here is the result

214
00:08:33,360 --> 00:08:35,039
the code calls

215
00:08:35,039 --> 00:08:36,080
exit

216
00:08:36,080 --> 00:08:38,399
with the only argument zero that is why

217
00:08:38,399 --> 00:08:41,440
the process exists

218
00:08:41,440 --> 00:08:43,360
now let's check the code at the address

219
00:08:43,360 --> 00:08:46,080
by index 3 because obviously this code

220
00:08:46,080 --> 00:08:48,640
told the dispatcher to call that exit

221
00:08:48,640 --> 00:08:51,920
code ok i disassemble the code and see a

222
00:08:51,920 --> 00:08:54,959
system call it calls the pathconf

223
00:08:54,959 --> 00:08:56,399
function

224
00:08:56,399 --> 00:08:58,160
let's respawn the application under a

225
00:08:58,160 --> 00:09:00,160
debugging breakpoint the service

226
00:09:00,160 --> 00:09:01,360
instruction

227
00:09:01,360 --> 00:09:03,680
and down the first argument of the

228
00:09:03,680 --> 00:09:05,760
pathconf function

229
00:09:05,760 --> 00:09:07,360
it's a path to a

230
00:09:07,360 --> 00:09:10,800
drop beer binary

231
00:09:10,800 --> 00:09:13,600
some jailbreaks install it to your

232
00:09:13,600 --> 00:09:15,360
iphone and some anti-tampering

233
00:09:15,360 --> 00:09:19,040
protection check for the binary

234
00:09:19,200 --> 00:09:21,519
okay we completely understand the

235
00:09:21,519 --> 00:09:24,240
obfuscation pattern now and it looks

236
00:09:24,240 --> 00:09:28,480
quite familiar is it a dfa

237
00:09:28,480 --> 00:09:32,320
let me remember what adfa is

238
00:09:32,320 --> 00:09:34,160
to define a deterministic finite

239
00:09:34,160 --> 00:09:37,600
automaton also known as dfa we need a

240
00:09:37,600 --> 00:09:40,480
finite set of states let's denote it by

241
00:09:40,480 --> 00:09:42,320
q

242
00:09:42,320 --> 00:09:45,360
a finite set of input symbols and

243
00:09:45,360 --> 00:09:48,560
alphabet let's denote it by a

244
00:09:48,560 --> 00:09:51,200
a transition function sigma that maps a

245
00:09:51,200 --> 00:09:54,720
state input symbol pair

246
00:09:55,040 --> 00:09:57,360
to the set of states

247
00:09:57,360 --> 00:10:00,640
we also need a start state q0

248
00:10:00,640 --> 00:10:04,160
and a finite set of accepted states f

249
00:10:04,160 --> 00:10:08,000
the set f should be a subset of q

250
00:10:08,000 --> 00:10:09,120
further

251
00:10:09,120 --> 00:10:12,399
an ordered set of input symbols is

252
00:10:12,399 --> 00:10:14,399
called a string

253
00:10:14,399 --> 00:10:18,640
the dfa starts with the start state q0

254
00:10:18,640 --> 00:10:20,959
it takes input symbols from a string one

255
00:10:20,959 --> 00:10:23,440
by one and changes states according to

256
00:10:23,440 --> 00:10:25,519
the transition function

257
00:10:25,519 --> 00:10:28,000
if the last step is an accepted one we

258
00:10:28,000 --> 00:10:30,880
say that the dfa accepts the string

259
00:10:30,880 --> 00:10:33,600
otherwise it rejects the string

260
00:10:33,600 --> 00:10:34,959
there are many ways to define the

261
00:10:34,959 --> 00:10:37,040
transition function sigma

262
00:10:37,040 --> 00:10:40,079
probably the simplest one is state table

263
00:10:40,079 --> 00:10:43,600
the table contains a resulting state

264
00:10:43,600 --> 00:10:46,800
for any state input symbol pair

265
00:10:46,800 --> 00:10:49,040
okay now let's try to represent the

266
00:10:49,040 --> 00:10:50,560
dispatcher

267
00:10:50,560 --> 00:10:51,200
the

268
00:10:51,200 --> 00:10:54,000
weird code as a dfa

269
00:10:54,000 --> 00:10:56,399
let's define the set of state at of

270
00:10:56,399 --> 00:10:58,399
states as follow

271
00:10:58,399 --> 00:11:01,839
let the start state q0 be nothing is

272
00:11:01,839 --> 00:11:04,480
executed yet another states are defined

273
00:11:04,480 --> 00:11:06,959
as the code at some address is covered

274
00:11:06,959 --> 00:11:09,360
by the dispatcher or the code at some

275
00:11:09,360 --> 00:11:12,880
address is executing now

276
00:11:12,880 --> 00:11:15,120
the alphabet is the set of the indexes

277
00:11:15,120 --> 00:11:18,800
from 0 to 17 in hexadecimal system

278
00:11:18,800 --> 00:11:20,800
the transition function is defined by

279
00:11:20,800 --> 00:11:24,800
the state transition table on the slide

280
00:11:24,800 --> 00:11:26,880
the table may look disappointing you

281
00:11:26,880 --> 00:11:28,959
probably already noted that all rows

282
00:11:28,959 --> 00:11:32,160
within any single column have the same

283
00:11:32,160 --> 00:11:33,839
are the same

284
00:11:33,839 --> 00:11:35,519
from mathematical point of view the

285
00:11:35,519 --> 00:11:38,320
fuscation pattern is quite simple

286
00:11:38,320 --> 00:11:41,519
as we already noted before the q0

287
00:11:41,519 --> 00:11:43,920
nothing is executed yet stead is the

288
00:11:43,920 --> 00:11:45,279
start state

289
00:11:45,279 --> 00:11:47,920
finally let's define the accepted states

290
00:11:47,920 --> 00:11:50,480
let any state be accepted excluding the

291
00:11:50,480 --> 00:11:53,440
state the code which calls exit is

292
00:11:53,440 --> 00:11:54,639
called

293
00:11:54,639 --> 00:11:56,480
is executing sorry

294
00:11:56,480 --> 00:12:00,480
so we accept all states except the

295
00:12:00,480 --> 00:12:03,519
states uh their code that calls actually

296
00:12:03,519 --> 00:12:06,160
that exit

297
00:12:06,160 --> 00:12:08,560
function

298
00:12:08,560 --> 00:12:11,040
okay let's go back to the obfuscation

299
00:12:11,040 --> 00:12:14,320
pattern and consider it as dfa here the

300
00:12:14,320 --> 00:12:17,360
initial state is q0 nothing is executed

301
00:12:17,360 --> 00:12:19,680
yet the string is unknown yet we know

302
00:12:19,680 --> 00:12:22,560
only the first input symbol it's the

303
00:12:22,560 --> 00:12:25,360
index zero the dispatcher acts like a

304
00:12:25,360 --> 00:12:27,519
transition function it takes the index

305
00:12:27,519 --> 00:12:30,000
calculates the absolute address and

306
00:12:30,000 --> 00:12:31,680
calls the address

307
00:12:31,680 --> 00:12:33,680
from math point of view it takes an

308
00:12:33,680 --> 00:12:36,959
input symbol and changes the state of

309
00:12:36,959 --> 00:12:39,200
the dfa accordingly to the transition

310
00:12:39,200 --> 00:12:41,279
table

311
00:12:41,279 --> 00:12:43,440
then the code does something useful and

312
00:12:43,440 --> 00:12:45,920
branch dispatcher from another index

313
00:12:45,920 --> 00:12:48,240
from mathematical point of view the code

314
00:12:48,240 --> 00:12:50,399
just adds another input symbol to the

315
00:12:50,399 --> 00:12:53,120
string so the transition function can

316
00:12:53,120 --> 00:12:55,760
change the state of the dfa again and

317
00:12:55,760 --> 00:12:59,200
again and again

318
00:12:59,200 --> 00:13:02,000
well uh

319
00:13:02,320 --> 00:13:04,560
this means that

320
00:13:04,560 --> 00:13:07,519
our dfa accepts

321
00:13:07,519 --> 00:13:10,800
a string only on a non-dual broken

322
00:13:10,800 --> 00:13:13,200
device is if the device is due broken if

323
00:13:13,200 --> 00:13:15,279
your iphone is geobroken

324
00:13:15,279 --> 00:13:17,440
now the dfa does not accept the string

325
00:13:17,440 --> 00:13:18,959
and we see that

326
00:13:18,959 --> 00:13:21,600
exit call

327
00:13:21,600 --> 00:13:24,240
okay the idea of this code execution

328
00:13:24,240 --> 00:13:27,200
flow obfuscation is not new i mean it's

329
00:13:27,200 --> 00:13:28,959
not new at all

330
00:13:28,959 --> 00:13:31,920
20 years ago four scientists published a

331
00:13:31,920 --> 00:13:33,040
paper

332
00:13:33,040 --> 00:13:36,079
the title was an approach to obfuscation

333
00:13:36,079 --> 00:13:39,760
of control flow of sequential computer

334
00:13:39,760 --> 00:13:40,880
programs

335
00:13:40,880 --> 00:13:43,040
wow

336
00:13:43,040 --> 00:13:45,760
let me inside

337
00:13:45,760 --> 00:13:48,959
let me read uh

338
00:13:48,959 --> 00:13:52,160
a couple words from the article

339
00:13:52,160 --> 00:13:55,120
a control flow of a source program is

340
00:13:55,120 --> 00:13:57,360
grouped on a switch statement called a

341
00:13:57,360 --> 00:14:00,800
dispatcher a dispatcher so that the

342
00:14:00,800 --> 00:14:04,079
targets of go 2 jumps are determined

343
00:14:04,079 --> 00:14:06,399
determinant dynamically

344
00:14:06,399 --> 00:14:08,480
a dispatcher may be viewed as a

345
00:14:08,480 --> 00:14:11,199
deterministic finite state automaton

346
00:14:11,199 --> 00:14:13,839
realizing the overall control over a

347
00:14:13,839 --> 00:14:16,240
flattened program

348
00:14:16,240 --> 00:14:18,639
so now you understand why that

349
00:14:18,639 --> 00:14:21,600
weird chord is cavity dispatcher

350
00:14:21,600 --> 00:14:24,399
20 years ago

351
00:14:25,199 --> 00:14:27,279
sorry

352
00:14:27,279 --> 00:14:28,800
sorry ah okay

353
00:14:28,800 --> 00:14:31,360
ah well that's it so it goes

354
00:14:31,360 --> 00:14:34,639
so it goes thanks for watching and uh

355
00:14:34,639 --> 00:14:36,399
here is my mail if you want to ask me

356
00:14:36,399 --> 00:14:38,160
something well

357
00:14:38,160 --> 00:14:40,320
see you do we have any questions from

358
00:14:40,320 --> 00:14:42,160
the audience

359
00:14:42,160 --> 00:14:47,040
let me check we really need to

360
00:14:47,040 --> 00:14:49,199
to get some questions

361
00:14:49,199 --> 00:14:53,120
do we have any questions people

362
00:14:53,120 --> 00:14:56,480
please bring back some hope

363
00:14:56,480 --> 00:15:01,839
some some faith in humanity anyone here

364
00:15:01,839 --> 00:15:04,160
possesses technical knowledge to shape a

365
00:15:04,160 --> 00:15:07,600
question to our speaker

366
00:15:11,279 --> 00:15:13,519
okay well i should say it's a quite

367
00:15:13,519 --> 00:15:16,160
specific area where you're

368
00:15:16,160 --> 00:15:17,199
doing

369
00:15:17,199 --> 00:15:19,519
reverse engineering and you're doing

370
00:15:19,519 --> 00:15:21,519
math at the same time

371
00:15:21,519 --> 00:15:22,480
so

372
00:15:22,480 --> 00:15:25,839
it's maybe a little bit hard to um to

373
00:15:25,839 --> 00:15:29,519
get it you know for 15 minutes it's

374
00:15:29,519 --> 00:15:31,920
i understand it may be hard but this is

375
00:15:31,920 --> 00:15:35,920
what i do and this is how it works it's

376
00:15:35,920 --> 00:15:37,519
yeah

377
00:15:37,519 --> 00:15:38,639
yeah

378
00:15:38,639 --> 00:15:41,279
it does and it certainly needs some

379
00:15:41,279 --> 00:15:43,040
practical background

380
00:15:43,040 --> 00:15:45,279
to consume that but we still want to

381
00:15:45,279 --> 00:15:48,880
have practical and hardcore technical

382
00:15:48,880 --> 00:15:51,600
talks on the conference

383
00:15:51,600 --> 00:15:53,199
program

384
00:15:53,199 --> 00:15:55,759
so yeah i just i just hope

385
00:15:55,759 --> 00:15:58,720
there are questions

386
00:15:59,279 --> 00:16:01,600
yeah i'm ready to answer i'm here let's

387
00:16:01,600 --> 00:16:05,199
let's give it another couple of minutes

388
00:16:05,199 --> 00:16:08,199
okay

389
00:16:11,680 --> 00:16:14,480
how how is business overall what you're

390
00:16:14,480 --> 00:16:15,440
up to

391
00:16:15,440 --> 00:16:16,720
these days

392
00:16:16,720 --> 00:16:18,720
same old well it's

393
00:16:18,720 --> 00:16:20,880
yeah same oh it's okay it's going

394
00:16:20,880 --> 00:16:23,440
smoothly no problems

395
00:16:23,440 --> 00:16:26,079
as usual

396
00:16:29,600 --> 00:16:33,680
ah come on man your as usual is

397
00:16:33,680 --> 00:16:35,440
many young folks

398
00:16:35,440 --> 00:16:38,240
a sweet dream

399
00:16:39,040 --> 00:16:41,440
well it's

400
00:16:41,440 --> 00:16:43,199
well

401
00:16:43,199 --> 00:16:44,600
to be honest it's um

402
00:16:44,600 --> 00:16:46,240
[Music]

403
00:16:46,240 --> 00:16:47,980
now it's hard to understand

404
00:16:47,980 --> 00:16:49,360
[Music]

405
00:16:49,360 --> 00:16:51,680
how things works these days for example

406
00:16:51,680 --> 00:16:52,800
what's up

407
00:16:52,800 --> 00:16:56,639
uh developers tell our messenger is safe

408
00:16:56,639 --> 00:16:57,360
but

409
00:16:57,360 --> 00:16:59,680
how do you know it's really safe

410
00:16:59,680 --> 00:17:02,000
well the only way is reverse engineering

411
00:17:02,000 --> 00:17:04,640
and math that's

412
00:17:04,640 --> 00:17:07,360
you tell us

413
00:17:07,679 --> 00:17:09,919
yeah so because everybody

414
00:17:09,919 --> 00:17:12,000
tells our messenger is the best our

415
00:17:12,000 --> 00:17:14,319
messenger or our social network or our

416
00:17:14,319 --> 00:17:16,559
application our protocol is

417
00:17:16,559 --> 00:17:19,599
absolutely secure and don't worry it's

418
00:17:19,599 --> 00:17:21,359
it's the best protocol in the world but

419
00:17:21,359 --> 00:17:23,760
in fact

420
00:17:23,839 --> 00:17:27,839
various cases are possible

421
00:17:28,720 --> 00:17:31,120
we had the question

422
00:17:31,120 --> 00:17:36,240
for course earlier today about uh

423
00:17:36,240 --> 00:17:38,400
you know you know of course right dia

424
00:17:38,400 --> 00:17:41,600
and safra all those yeah yeah

425
00:17:41,600 --> 00:17:44,160
cos is here with us today he opened the

426
00:17:44,160 --> 00:17:47,039
first day and we had to talk about

427
00:17:47,039 --> 00:17:49,919
ukrainian cyber strategy but there was a

428
00:17:49,919 --> 00:17:51,440
slightly related

429
00:17:51,440 --> 00:17:53,280
question very interesting i think you

430
00:17:53,280 --> 00:17:55,280
could address it what do you think about

431
00:17:55,280 --> 00:17:58,720
apple's plans to integrate

432
00:17:58,720 --> 00:18:01,280
the driver's license id into their

433
00:18:01,280 --> 00:18:02,799
wallet

434
00:18:02,799 --> 00:18:04,559
and uh yeah

435
00:18:04,559 --> 00:18:07,918
what do you think is it gonna be honest

436
00:18:08,000 --> 00:18:11,039
yeah honest i'm an old verb

437
00:18:11,039 --> 00:18:11,840
uh

438
00:18:11,840 --> 00:18:14,880
i'd say i am adult for tazao

439
00:18:14,880 --> 00:18:18,400
and i do not like any innovations this

440
00:18:18,400 --> 00:18:21,760
is my honest answer but it doesn't mean

441
00:18:21,760 --> 00:18:24,400
the innovations are bad and i think we

442
00:18:24,400 --> 00:18:27,679
will get something like that in a couple

443
00:18:27,679 --> 00:18:30,960
years in any case from apple not from

444
00:18:30,960 --> 00:18:33,200
apple from google maybe from some new

445
00:18:33,200 --> 00:18:35,360
company we never heard before but we

446
00:18:35,360 --> 00:18:38,240
will get something like this

447
00:18:38,240 --> 00:18:42,240
the world is moving to digitalization

448
00:18:42,240 --> 00:18:44,400
and the world is moving very very

449
00:18:44,400 --> 00:18:46,960
quickly it makes me scared but this is

450
00:18:46,960 --> 00:18:50,160
our reality so um

451
00:18:50,160 --> 00:18:51,840
if apple

452
00:18:51,840 --> 00:18:54,240
is doing it okay let's upload

453
00:18:54,240 --> 00:18:56,960
if apple would changes

454
00:18:56,960 --> 00:19:00,000
its mind tomorrow it will be doing by

455
00:19:00,000 --> 00:19:02,720
some other company

456
00:19:02,720 --> 00:19:04,960
yeah

457
00:19:05,120 --> 00:19:06,480
yeah

458
00:19:06,480 --> 00:19:07,679
that's that's

459
00:19:07,679 --> 00:19:10,799
very very along the lines of what i

460
00:19:10,799 --> 00:19:13,360
think about that because

461
00:19:13,360 --> 00:19:16,720
we are old let's accept that at least so

462
00:19:16,720 --> 00:19:18,799
we don't like changes but they are

463
00:19:18,799 --> 00:19:21,039
inevitable and we can we have two

464
00:19:21,039 --> 00:19:23,360
choices to keep up

465
00:19:23,360 --> 00:19:25,440
and to try to

466
00:19:25,440 --> 00:19:27,760
make those changes less harmful to

467
00:19:27,760 --> 00:19:30,320
everyone just from our perspective yeah

468
00:19:30,320 --> 00:19:33,120
so we know some stuff about that

469
00:19:33,120 --> 00:19:35,760
let's try to do something positive

470
00:19:35,760 --> 00:19:39,520
or we can not

471
00:19:39,520 --> 00:19:41,440
never just be left outside of the

472
00:19:41,440 --> 00:19:45,039
process but from all companies

473
00:19:45,039 --> 00:19:47,919
uh apple certainly might be not the best

474
00:19:47,919 --> 00:19:49,120
to do it

475
00:19:49,120 --> 00:19:52,799
you know but it's certainly somewhere

476
00:19:52,799 --> 00:19:55,200
somewhere in top 10 i would say

477
00:19:55,200 --> 00:19:58,240
i mean to do it correctly from

478
00:19:58,240 --> 00:20:00,160
from second try

479
00:20:00,160 --> 00:20:01,440
you know

480
00:20:01,440 --> 00:20:04,320
well actually i am looking at

481
00:20:04,320 --> 00:20:07,039
the apple code every day and i got

482
00:20:07,039 --> 00:20:09,360
something like a cognitive damage

483
00:20:09,360 --> 00:20:11,360
because of that

484
00:20:11,360 --> 00:20:12,240
i

485
00:20:12,240 --> 00:20:14,159
i see a lot so what do you think about

486
00:20:14,159 --> 00:20:18,760
what they just said complete [ __ ]

487
00:20:20,000 --> 00:20:21,600
well uh

488
00:20:21,600 --> 00:20:23,600
we should say uh

489
00:20:23,600 --> 00:20:27,760
yes they do great things sometimes and

490
00:20:27,760 --> 00:20:28,880
sometimes

491
00:20:28,880 --> 00:20:31,280
let's live on the track

492
00:20:31,280 --> 00:20:33,760
that's normal that's normal yeah that's

493
00:20:33,760 --> 00:20:36,799
difficult yeah so i i can say wow apple

494
00:20:36,799 --> 00:20:39,440
is doing it's so cool man

495
00:20:39,440 --> 00:20:42,480
but from other point of view i can say

496
00:20:42,480 --> 00:20:45,840
it's a total crap it will not work

497
00:20:45,840 --> 00:20:48,240
no no apple is just doing it and i

498
00:20:48,240 --> 00:20:50,320
believe they will be maybe not the first

499
00:20:50,320 --> 00:20:53,039
but one of the first of companies yeah

500
00:20:53,039 --> 00:20:54,880
yeah that's that's what i meant i i

501
00:20:54,880 --> 00:20:56,720
don't think that uh

502
00:20:56,720 --> 00:20:59,120
no i'm i have i'm a long-term apple

503
00:20:59,120 --> 00:21:00,880
fanboy you know that right but that

504
00:21:00,880 --> 00:21:03,600
doesn't affect my judgment about this

505
00:21:03,600 --> 00:21:06,480
it's just a company that has complete

506
00:21:06,480 --> 00:21:08,240
supply chain

507
00:21:08,240 --> 00:21:11,600
from hardware to software to whatever

508
00:21:11,600 --> 00:21:14,080
right so they have complete control over

509
00:21:14,080 --> 00:21:16,559
it that's the first one and the second

510
00:21:16,559 --> 00:21:18,480
point is

511
00:21:18,480 --> 00:21:21,440
one billion i iphones okay

512
00:21:21,440 --> 00:21:24,159
so with these numbers you can do a lot

513
00:21:24,159 --> 00:21:26,320
of experimentation

514
00:21:26,320 --> 00:21:28,240
like a lot

515
00:21:28,240 --> 00:21:30,960
this can result in like uh on large

516
00:21:30,960 --> 00:21:32,480
numbers

517
00:21:32,480 --> 00:21:34,960
at large number scale it can result in

518
00:21:34,960 --> 00:21:37,360
something good coming out of it

519
00:21:37,360 --> 00:21:40,080
naturally not because they intended just

520
00:21:40,080 --> 00:21:41,840
because they have

521
00:21:41,840 --> 00:21:44,080
uh capability

522
00:21:44,080 --> 00:21:46,159
you know

523
00:21:46,159 --> 00:21:48,320
like this yeah i totally agree actually

524
00:21:48,320 --> 00:21:49,520
so

525
00:21:49,520 --> 00:21:53,039
anyway the cyberpunk world uh predicted

526
00:21:53,039 --> 00:21:53,760
by

527
00:21:53,760 --> 00:21:57,280
i don't know gibson betke and other

528
00:21:57,280 --> 00:22:00,640
cyberpunk wave of writers is coming it's

529
00:22:00,640 --> 00:22:03,440
coming very quickly and we should adopt

530
00:22:03,440 --> 00:22:05,360
we should we should i don't know

531
00:22:05,360 --> 00:22:08,080
take it take it somehow because yes yeah

532
00:22:08,080 --> 00:22:10,480
take it in somehow just you will have to

533
00:22:10,480 --> 00:22:12,400
there's no way you can leave

534
00:22:12,400 --> 00:22:15,039
there is no way in exile nobody nobody

535
00:22:15,039 --> 00:22:16,799
asks you

536
00:22:16,799 --> 00:22:19,120
yeah okay so we finally have one

537
00:22:19,120 --> 00:22:20,880
question from the audience thank you

538
00:22:20,880 --> 00:22:22,159
very much

539
00:22:22,159 --> 00:22:25,280
so dima where did you meet

540
00:22:25,280 --> 00:22:27,840
assembler implementations of dfa for for

541
00:22:27,840 --> 00:22:29,840
the first time

542
00:22:29,840 --> 00:22:33,360
so you recognize the structure

543
00:22:34,559 --> 00:22:37,280
well uh

544
00:22:37,840 --> 00:22:41,440
actually from time to time i see the

545
00:22:41,440 --> 00:22:43,600
sketching pattern like that

546
00:22:43,600 --> 00:22:44,380
probably

547
00:22:44,380 --> 00:22:45,600
[Music]

548
00:22:45,600 --> 00:22:47,679
well the earliest

549
00:22:47,679 --> 00:22:50,000
time i remember is

550
00:22:50,000 --> 00:22:52,400
it was

551
00:22:52,640 --> 00:22:54,880
probably the old uh

552
00:22:54,880 --> 00:22:57,200
people remember

553
00:22:57,200 --> 00:22:59,280
star force protection

554
00:22:59,280 --> 00:23:02,480
it was a quite popular protection yes

555
00:23:02,480 --> 00:23:04,720
yes that their protection for cd you

556
00:23:04,720 --> 00:23:05,919
know

557
00:23:05,919 --> 00:23:08,159
this is the conference i have constant

558
00:23:08,159 --> 00:23:09,679
flashbacks

559
00:23:09,679 --> 00:23:12,080
right now oksana finished to talk about

560
00:23:12,080 --> 00:23:14,640
about the gaming hacks and the yeah i

561
00:23:14,640 --> 00:23:15,760
had some

562
00:23:15,760 --> 00:23:18,400
and not star force cool cool

563
00:23:18,400 --> 00:23:21,360
star force so they did they i mean the

564
00:23:21,360 --> 00:23:24,559
creators of star force protection did

565
00:23:24,559 --> 00:23:26,960
use something like that actually the

566
00:23:26,960 --> 00:23:29,760
idea is not new because uh

567
00:23:29,760 --> 00:23:32,640
deterministic finite automata are great

568
00:23:32,640 --> 00:23:33,360
for

569
00:23:33,360 --> 00:23:34,480
um

570
00:23:34,480 --> 00:23:37,600
hiding uh code flow

571
00:23:37,600 --> 00:23:40,559
from static analysis static analysis

572
00:23:40,559 --> 00:23:42,880
literally

573
00:23:42,880 --> 00:23:44,480
maybe not literally but almost

574
00:23:44,480 --> 00:23:47,679
impossible dynamic analysis is uh harder

575
00:23:47,679 --> 00:23:51,039
but possible you saw that live demo with

576
00:23:51,039 --> 00:23:53,440
green and red addresses where we

577
00:23:53,440 --> 00:23:55,600
actually see obfuscated calls in real

578
00:23:55,600 --> 00:23:58,080
time so yes it's possible but it needs

579
00:23:58,080 --> 00:24:00,960
some efforts you need to to

580
00:24:00,960 --> 00:24:03,279
to invest some time in this

581
00:24:03,279 --> 00:24:04,480
i actually

582
00:24:04,480 --> 00:24:07,440
actually my choice of this piece of code

583
00:24:07,440 --> 00:24:09,440
was because it's simple

584
00:24:09,440 --> 00:24:11,520
this piece of code is simple

585
00:24:11,520 --> 00:24:13,919
it's not actually

586
00:24:13,919 --> 00:24:16,159
scattered quite hard the mathematical

587
00:24:16,159 --> 00:24:17,840
model is simple you saw that

588
00:24:17,840 --> 00:24:20,400
deterministic finite automata

589
00:24:20,400 --> 00:24:22,320
it's absolutely simple it's primitive

590
00:24:22,320 --> 00:24:24,159
from mathematical point of view the code

591
00:24:24,159 --> 00:24:25,679
is quite primitive

592
00:24:25,679 --> 00:24:27,520
that's why i can explain it in 15

593
00:24:27,520 --> 00:24:29,840
minutes section that's

594
00:24:29,840 --> 00:24:31,840
because harder and more complex more

595
00:24:31,840 --> 00:24:34,080
sophisticated code needs more time to

596
00:24:34,080 --> 00:24:35,919
explain

597
00:24:35,919 --> 00:24:38,080
well so the answer is probably yes

598
00:24:38,080 --> 00:24:40,559
probably start force

599
00:24:40,559 --> 00:24:41,919
yeah yeah

600
00:24:41,919 --> 00:24:43,919
old times good old time so

601
00:24:43,919 --> 00:24:47,520
i have a question so just uh from what

602
00:24:47,520 --> 00:24:49,279
what from what i heard from what i've

603
00:24:49,279 --> 00:24:52,240
seen for what we just discussed

604
00:24:52,240 --> 00:24:54,480
uh

605
00:24:55,039 --> 00:24:57,200
if my memory doesn't fail me

606
00:24:57,200 --> 00:24:59,840
yet dfa is basically like second or

607
00:24:59,840 --> 00:25:02,880
third thing they teach you

608
00:25:02,880 --> 00:25:05,760
in discrete math right it's like

609
00:25:05,760 --> 00:25:06,720
first

610
00:25:06,720 --> 00:25:09,200
first yeah yeah extra simple primitives

611
00:25:09,200 --> 00:25:12,559
and then you get into eventually into

612
00:25:12,559 --> 00:25:15,520
algorithmics and into

613
00:25:15,520 --> 00:25:16,400
uh

614
00:25:16,400 --> 00:25:19,840
compiler theory right so just just

615
00:25:19,840 --> 00:25:21,679
in the middle of those topics you got

616
00:25:21,679 --> 00:25:24,159
dfa because yeah during all that kind of

617
00:25:24,159 --> 00:25:26,159
stuff you have to learn before before

618
00:25:26,159 --> 00:25:28,880
doing anything like fundamental but they

619
00:25:28,880 --> 00:25:30,880
don't teach it to everyone

620
00:25:30,880 --> 00:25:32,480
not many coders not many software

621
00:25:32,480 --> 00:25:33,840
engineers really

622
00:25:33,840 --> 00:25:36,400
know these basics nowadays

623
00:25:36,400 --> 00:25:38,080
because

624
00:25:38,080 --> 00:25:39,039
uh

625
00:25:39,039 --> 00:25:41,679
because they don't have to

626
00:25:41,679 --> 00:25:42,400
right

627
00:25:42,400 --> 00:25:43,760
they must not

628
00:25:43,760 --> 00:25:46,960
currently do that well to produce high

629
00:25:46,960 --> 00:25:49,120
level abstract code

630
00:25:49,120 --> 00:25:50,799
right

631
00:25:50,799 --> 00:25:53,679
so what do you need to what what what

632
00:25:53,679 --> 00:25:56,720
background do you need to acquire before

633
00:25:56,720 --> 00:26:00,159
dwelving into such topics

634
00:26:00,159 --> 00:26:02,080
now if you don't have that mathematical

635
00:26:02,080 --> 00:26:04,080
background right if you didn't have

636
00:26:04,080 --> 00:26:06,320
discrete math in

637
00:26:06,320 --> 00:26:09,760
in high school in university

638
00:26:09,760 --> 00:26:12,080
well um

639
00:26:12,080 --> 00:26:14,720
my answer may

640
00:26:14,720 --> 00:26:16,080
sounds

641
00:26:16,080 --> 00:26:20,559
strange but actually you only need a

642
00:26:20,559 --> 00:26:23,279
very basic mathematical background

643
00:26:23,279 --> 00:26:26,240
because to be honest preparing this

644
00:26:26,240 --> 00:26:29,440
presentation i didn't remember the exact

645
00:26:29,440 --> 00:26:31,440
definition of dfa

646
00:26:31,440 --> 00:26:34,720
yes i know i knew what dfa is

647
00:26:34,720 --> 00:26:36,960
and i know what dfa is but the exact

648
00:26:36,960 --> 00:26:39,440
definition was all it said et cetera it

649
00:26:39,440 --> 00:26:42,240
was uh i didn't remember

650
00:26:42,240 --> 00:26:43,900
so i just opened uh

651
00:26:43,900 --> 00:26:45,279
[Music]

652
00:26:45,279 --> 00:26:46,159
a

653
00:26:46,159 --> 00:26:47,120
math

654
00:26:47,120 --> 00:26:48,960
guide book i found

655
00:26:48,960 --> 00:26:50,320
in my bookshelf

656
00:26:50,320 --> 00:26:52,400
open the definition and if you

657
00:26:52,400 --> 00:26:55,200
understand for example what sets are

658
00:26:55,200 --> 00:26:58,159
you can understand the definition of dfa

659
00:26:58,159 --> 00:26:59,840
in two minutes so

660
00:26:59,840 --> 00:27:02,799
the only thing you really need is some

661
00:27:02,799 --> 00:27:06,000
very very basic mathematical withdrawal

662
00:27:06,000 --> 00:27:09,279
but if you are interested in

663
00:27:09,279 --> 00:27:11,679
making obfuscaters or

664
00:27:11,679 --> 00:27:13,919
you are interested in hiding your code

665
00:27:13,919 --> 00:27:17,279
from you know research from analysis

666
00:27:17,279 --> 00:27:20,960
uh you probably should go further and

667
00:27:20,960 --> 00:27:24,159
you probably should read some

668
00:27:24,159 --> 00:27:27,200
special uh articles and these papers

669
00:27:27,200 --> 00:27:30,559
because actually uh uh making obfuscator

670
00:27:30,559 --> 00:27:33,760
and developing obscure techniques

671
00:27:33,760 --> 00:27:35,120
are is

672
00:27:35,120 --> 00:27:37,200
quite is a quite popular

673
00:27:37,200 --> 00:27:39,200
line of research in academia because

674
00:27:39,200 --> 00:27:42,480
open just open google scholar and uh

675
00:27:42,480 --> 00:27:45,679
type dfa obfuscation and you will

676
00:27:45,679 --> 00:27:48,720
get thousands of scientific papers

677
00:27:48,720 --> 00:27:49,919
because yes

678
00:27:49,919 --> 00:27:52,480
people is doing it constantly and it's

679
00:27:52,480 --> 00:27:53,840
it's a serie

680
00:27:53,840 --> 00:27:57,200
it's a serious uh area in research in

681
00:27:57,200 --> 00:27:59,279
math in theoretical manner

682
00:27:59,279 --> 00:28:01,360
so if you want to do it you can go

683
00:28:01,360 --> 00:28:04,240
forward no problem everything is in

684
00:28:04,240 --> 00:28:05,840
google

685
00:28:05,840 --> 00:28:08,559
so like very basic algebra

686
00:28:08,559 --> 00:28:10,399
and uh

687
00:28:10,399 --> 00:28:12,559
i don't know you actually just need a

688
00:28:12,559 --> 00:28:17,279
theory if you if you learn it sets fury

689
00:28:20,159 --> 00:28:22,559
uh the first great logic is your friend

690
00:28:22,559 --> 00:28:25,120
oh matt are built on the set theory and

691
00:28:25,120 --> 00:28:26,960
first great watch

692
00:28:26,960 --> 00:28:30,480
yeah sure sure thank you so uh i think

693
00:28:30,480 --> 00:28:33,039
we will have one more question

694
00:28:33,039 --> 00:28:35,200
uh we'll have two so

695
00:28:35,200 --> 00:28:38,399
dima you wrote an ad hoc asm tools

696
00:28:38,399 --> 00:28:39,679
functions

697
00:28:39,679 --> 00:28:41,760
how do you make sure

698
00:28:41,760 --> 00:28:43,679
they don't have bugs

699
00:28:43,679 --> 00:28:46,320
very practical question

700
00:28:46,320 --> 00:28:47,919
how do you make sure they don't have

701
00:28:47,919 --> 00:28:49,760
bugs i think i think i know the answer

702
00:28:49,760 --> 00:28:50,799
but

703
00:28:50,799 --> 00:28:52,399
i bet it's harder than vbs called

704
00:28:52,399 --> 00:28:54,959
debugging

705
00:28:56,240 --> 00:28:58,480
well actually

706
00:28:58,480 --> 00:29:00,799
the point here is i'm not a developer to

707
00:29:00,799 --> 00:29:02,799
be honest i am absolutely crappy

708
00:29:02,799 --> 00:29:04,880
developer and uh

709
00:29:04,880 --> 00:29:08,399
my top level as a developer is the proof

710
00:29:08,399 --> 00:29:09,679
of concept

711
00:29:09,679 --> 00:29:10,720
usually

712
00:29:10,720 --> 00:29:12,640
created with

713
00:29:12,640 --> 00:29:16,320
with python or c c plus plus so it's

714
00:29:16,320 --> 00:29:17,279
i'm

715
00:29:17,279 --> 00:29:20,080
i'm a researcher i can

716
00:29:20,080 --> 00:29:22,880
reverse machine code i can understand

717
00:29:22,880 --> 00:29:24,720
the machine code sometimes i think in

718
00:29:24,720 --> 00:29:28,240
machine codes after a long working day

719
00:29:28,240 --> 00:29:30,399
but i can't

720
00:29:30,399 --> 00:29:32,399
can't write code it's it's absolutely

721
00:29:32,399 --> 00:29:35,440
not my area of interest and i am not my

722
00:29:35,440 --> 00:29:37,279
top skill totally

723
00:29:37,279 --> 00:29:39,520
so i'm a researcher i'm a reverse

724
00:29:39,520 --> 00:29:42,240
engineer but i am not a coder so i to be

725
00:29:42,240 --> 00:29:44,720
honest i don't know how to

726
00:29:44,720 --> 00:29:47,440
create a secure code i know how to find

727
00:29:47,440 --> 00:29:51,840
a vulnerability in a code yes i know i

728
00:29:51,840 --> 00:29:54,000
know a lot of tricks how to do it but i

729
00:29:54,000 --> 00:29:56,320
don't know how to to create a security

730
00:29:56,320 --> 00:29:58,320
code especially if you are talking about

731
00:29:58,320 --> 00:30:01,039
uh binary security like stack hip

732
00:30:01,039 --> 00:30:03,600
overflows etc etc i don't know how to do

733
00:30:03,600 --> 00:30:05,919
it secure i know how to find the box and

734
00:30:05,919 --> 00:30:08,240
how to turn it into vulnerability as

735
00:30:08,240 --> 00:30:10,480
well

736
00:30:12,640 --> 00:30:15,760
thank you i really i really don't

737
00:30:15,760 --> 00:30:17,440
know

738
00:30:17,440 --> 00:30:19,520
how to

739
00:30:19,520 --> 00:30:22,480
how to read the next question without

740
00:30:22,480 --> 00:30:26,000
our stream being downgraded to

741
00:30:26,000 --> 00:30:28,240
adult only

742
00:30:28,240 --> 00:30:30,240
okay so can you please read it maybe in

743
00:30:30,240 --> 00:30:31,540
the chat

744
00:30:31,540 --> 00:30:34,320
[Laughter]

745
00:30:34,320 --> 00:30:37,840
not allowed of course

746
00:30:40,080 --> 00:30:42,799
ah okay that um it's a question about

747
00:30:42,799 --> 00:30:45,039
that well-known uh

748
00:30:45,039 --> 00:30:47,520
programming language brain

749
00:30:47,520 --> 00:30:50,000
not not true well-known but yeah it's

750
00:30:50,000 --> 00:30:51,360
brilliant

751
00:30:51,360 --> 00:30:53,039
let's call it let's call it brilliant

752
00:30:53,039 --> 00:30:55,360
brain love yeah brain love like

753
00:30:55,360 --> 00:30:56,240
your brain

754
00:30:56,240 --> 00:30:59,279
language that looks really really

755
00:30:59,279 --> 00:31:02,000
nice so it does not dissect any subjects

756
00:31:02,000 --> 00:31:04,960
or semantics from it just just a fun

757
00:31:04,960 --> 00:31:06,399
exercise

758
00:31:06,399 --> 00:31:09,200
historically right

759
00:31:09,200 --> 00:31:10,000
yeah

760
00:31:10,000 --> 00:31:12,880
well actually um

761
00:31:12,880 --> 00:31:16,840
the brain love language may look

762
00:31:16,840 --> 00:31:18,960
complex as

763
00:31:18,960 --> 00:31:21,200
as a source code

764
00:31:21,200 --> 00:31:23,200
yeah the source code

765
00:31:23,200 --> 00:31:25,440
looks absolutely complex

766
00:31:25,440 --> 00:31:28,320
but after translation into machine

767
00:31:28,320 --> 00:31:30,640
instructions well

768
00:31:30,640 --> 00:31:31,519
it

769
00:31:31,519 --> 00:31:34,559
doesn't look absolutely

770
00:31:34,559 --> 00:31:36,640
it doesn't look any complex because it's

771
00:31:36,640 --> 00:31:39,039
just usual instructions is from any

772
00:31:39,039 --> 00:31:41,840
usual programming language by the way i

773
00:31:41,840 --> 00:31:42,799
um

774
00:31:42,799 --> 00:31:44,080
i never

775
00:31:44,080 --> 00:31:45,279
see

776
00:31:45,279 --> 00:31:46,880
the brain love

777
00:31:46,880 --> 00:31:48,799
compiler for example for modern

778
00:31:48,799 --> 00:31:52,320
operation systems i saw a brain love

779
00:31:52,320 --> 00:31:53,679
compiler

780
00:31:53,679 --> 00:31:55,200
for those the

781
00:31:55,200 --> 00:31:57,840
uh microsoft does and that's this was

782
00:31:57,840 --> 00:32:00,960
the the top of their actually

783
00:32:00,960 --> 00:32:04,399
compiler career i never saw a compiler

784
00:32:04,399 --> 00:32:06,080
for windows for example now we have

785
00:32:06,080 --> 00:32:09,918
javascript why do we need brain love

786
00:32:10,480 --> 00:32:14,919
yes i totally agree

787
00:32:15,760 --> 00:32:18,720
okay okay so i think we can if we don't

788
00:32:18,720 --> 00:32:20,880
have any other questions we can wrap it

789
00:32:20,880 --> 00:32:24,159
up and let our speaker go free thank you

790
00:32:24,159 --> 00:32:26,080
very much thank you very much for the

791
00:32:26,080 --> 00:32:28,320
great talk and for a

792
00:32:28,320 --> 00:32:29,440
nice and

793
00:32:29,440 --> 00:32:33,039
informative q a session

794
00:32:33,039 --> 00:32:35,600
thank you i thought it would be great to

795
00:32:35,600 --> 00:32:38,559
present some kind of bare bone reverse

796
00:32:38,559 --> 00:32:40,080
engineering talk

797
00:32:40,080 --> 00:32:42,640
on the conference mode it's completely

798
00:32:42,640 --> 00:32:44,399
correct thank you for that thank you for

799
00:32:44,399 --> 00:32:46,640
your effort and for your insightful

800
00:32:46,640 --> 00:32:49,640
presentation

