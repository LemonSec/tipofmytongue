1
00:00:05,680 --> 00:00:10,399
hello no name khan

2
00:00:07,120 --> 00:00:11,840
uh my name is alex j boland i work for a

3
00:00:10,400 --> 00:00:16,400
cyber security company called

4
00:00:11,840 --> 00:00:19,279
bitdefender and today

5
00:00:16,400 --> 00:00:21,680
i'm going to talk to you about uh

6
00:00:19,279 --> 00:00:22,720
exploiting bad cloud implementations in

7
00:00:21,680 --> 00:00:24,640
iot

8
00:00:22,720 --> 00:00:26,479
uh essentially this is the third

9
00:00:24,640 --> 00:00:28,400
presentation in a in a series

10
00:00:26,480 --> 00:00:31,199
this is why it's called next gen iit

11
00:00:28,400 --> 00:00:32,960
botnets three more ownage

12
00:00:31,199 --> 00:00:34,880
and we've been doing this for the past

13
00:00:32,960 --> 00:00:36,880
maybe five six seven years

14
00:00:34,880 --> 00:00:38,160
uh and i'm happy to say that we've got a

15
00:00:36,880 --> 00:00:40,719
lot of good feedback and positive

16
00:00:38,160 --> 00:00:43,040
feedback on our research so far

17
00:00:40,719 --> 00:00:44,399
we've managed to kind of break down and

18
00:00:43,040 --> 00:00:47,920
get vulnerabilities in

19
00:00:44,399 --> 00:00:50,480
more than i i guess now it's about 35

20
00:00:47,920 --> 00:00:52,640
uh devices iot devices amongst which

21
00:00:50,480 --> 00:00:56,078
some of the very popular ones

22
00:00:52,640 --> 00:00:56,960
so again today this session is going to

23
00:00:56,079 --> 00:00:59,920
be about

24
00:00:56,960 --> 00:01:01,280
bad cloud implementations and also i

25
00:00:59,920 --> 00:01:04,000
think it's worth saying that

26
00:01:01,280 --> 00:01:05,760
this is a recorded session it's um so

27
00:01:04,000 --> 00:01:09,040
the guys from known income

28
00:01:05,760 --> 00:01:11,200
uh no name no name con sorry

29
00:01:09,040 --> 00:01:13,680
um asked me whether or not i wanted to

30
00:01:11,200 --> 00:01:14,960
do a live session a recorded session or

31
00:01:13,680 --> 00:01:17,840
some other variants

32
00:01:14,960 --> 00:01:19,520
and just out of curiosity i wanted to do

33
00:01:17,840 --> 00:01:20,960
a recorded session a pretty cool

34
00:01:19,520 --> 00:01:23,600
session simply because i've never done

35
00:01:20,960 --> 00:01:25,039
that before and i wanted to see how this

36
00:01:23,600 --> 00:01:28,399
is going to go

37
00:01:25,040 --> 00:01:30,720
um so about me

38
00:01:28,400 --> 00:01:32,320
um i work as chief secret researcher for

39
00:01:30,720 --> 00:01:34,720
bitdefender

40
00:01:32,320 --> 00:01:35,919
i have a lot to do with with iot

41
00:01:34,720 --> 00:01:37,439
research we

42
00:01:35,920 --> 00:01:40,079
work with several teams that quality

43
00:01:37,439 --> 00:01:41,600
research um

44
00:01:40,079 --> 00:01:43,039
and i also managed the bug bounty

45
00:01:41,600 --> 00:01:43,600
program at the defender and the lot of

46
00:01:43,040 --> 00:01:46,720
the

47
00:01:43,600 --> 00:01:48,479
vulnerability research part uh and for

48
00:01:46,720 --> 00:01:50,320
this particular presentation

49
00:01:48,479 --> 00:01:51,759
we have three main contributors and that

50
00:01:50,320 --> 00:01:54,880
would be my colleagues

51
00:01:51,759 --> 00:01:56,240
radhu alex basaraba alex lazar and

52
00:01:54,880 --> 00:01:58,079
a number of other people from the

53
00:01:56,240 --> 00:02:00,640
beautiful labs so

54
00:01:58,079 --> 00:02:00,639
moving on

55
00:02:01,119 --> 00:02:08,080
this is um a small clip from

56
00:02:04,960 --> 00:02:10,959
a movie with cameron diaz

57
00:02:08,080 --> 00:02:12,160
in which this is kind of what we feel

58
00:02:10,959 --> 00:02:14,640
some companies

59
00:02:12,160 --> 00:02:16,720
uh understand about how to do cloud

60
00:02:14,640 --> 00:02:19,760
implementations in iot

61
00:02:16,720 --> 00:02:22,640
you know the cloud

62
00:02:19,760 --> 00:02:23,599
nobody understands the cloud yeah well

63
00:02:22,640 --> 00:02:25,760
because pretty much

64
00:02:23,599 --> 00:02:27,040
um most of the time as we've seen they

65
00:02:25,760 --> 00:02:29,200
kind of do

66
00:02:27,040 --> 00:02:30,400
the implementation out of the box and

67
00:02:29,200 --> 00:02:33,200
then don't necessarily

68
00:02:30,400 --> 00:02:34,720
look for uh whether or not they've done

69
00:02:33,200 --> 00:02:36,799
a good job about it as we're going to

70
00:02:34,720 --> 00:02:39,760
see further on

71
00:02:36,800 --> 00:02:41,519
so let's start with defining iot and

72
00:02:39,760 --> 00:02:43,599
while this may sound a little bit boring

73
00:02:41,519 --> 00:02:45,840
for some of you guys

74
00:02:43,599 --> 00:02:46,959
you're gonna see that it may not be

75
00:02:45,840 --> 00:02:51,840
exactly

76
00:02:46,959 --> 00:02:55,680
uh how you see it so

77
00:02:51,840 --> 00:02:58,560
iot is a stack so let's start actually

78
00:02:55,680 --> 00:02:59,440
sorry let's start with a few a few

79
00:02:58,560 --> 00:03:02,640
stacks

80
00:02:59,440 --> 00:03:04,400
right so you have hardware an operating

81
00:03:02,640 --> 00:03:06,000
system and an application layer so in

82
00:03:04,400 --> 00:03:07,040
this case you have hardware uh red hat

83
00:03:06,000 --> 00:03:10,080
6.2

84
00:03:07,040 --> 00:03:11,519
and for those of you who are older or at

85
00:03:10,080 --> 00:03:15,040
least as old as i am

86
00:03:11,519 --> 00:03:18,640
uh ftpd which was a renowned

87
00:03:15,040 --> 00:03:21,040
uh vulnerable application back in 1999

88
00:03:18,640 --> 00:03:23,440
uh then let's say you have like hardware

89
00:03:21,040 --> 00:03:24,640
an operating system and the iis web

90
00:03:23,440 --> 00:03:27,680
server

91
00:03:24,640 --> 00:03:32,000
5.0 which again was

92
00:03:27,680 --> 00:03:37,680
a extremely hacked service back in 1991

93
00:03:32,000 --> 00:03:40,879
1990 oh sorry 1999 2000 2001

94
00:03:37,680 --> 00:03:44,560
so you have another stack like hardware

95
00:03:40,879 --> 00:03:46,879
windows operating system and rdp

96
00:03:44,560 --> 00:03:48,799
and another stack called you know

97
00:03:46,879 --> 00:03:49,120
hardware whatever operating system and

98
00:03:48,799 --> 00:03:52,480
the

99
00:03:49,120 --> 00:03:54,159
joomla uh website web application

100
00:03:52,480 --> 00:03:56,159
and you're gonna notice that at the

101
00:03:54,159 --> 00:03:58,319
application layer

102
00:03:56,159 --> 00:04:00,720
i've added stuff that was known to be

103
00:03:58,319 --> 00:04:04,000
hacked at some point in time right so

104
00:04:00,720 --> 00:04:05,200
fdpd is 5.0 rdp joomla

105
00:04:04,000 --> 00:04:06,640
all of them had some serious

106
00:04:05,200 --> 00:04:09,040
vulnerabilities that enabled hackers to

107
00:04:06,640 --> 00:04:12,879
kind of compromise them at some point

108
00:04:09,040 --> 00:04:15,519
now bringing this within the iot space

109
00:04:12,879 --> 00:04:16,639
uh in in the vast majority of cases you

110
00:04:15,519 --> 00:04:18,880
have hardware

111
00:04:16,639 --> 00:04:20,400
uh an operating system which is like

112
00:04:18,880 --> 00:04:23,360
busy box in the most

113
00:04:20,399 --> 00:04:26,000
in the most common scenarios uh and the

114
00:04:23,360 --> 00:04:28,880
hardware is very often either mips

115
00:04:26,000 --> 00:04:31,840
or arm and then you have an application

116
00:04:28,880 --> 00:04:33,360
layer built on top of that pc box

117
00:04:31,840 --> 00:04:34,799
uh and that busy box for those of you

118
00:04:33,360 --> 00:04:35,680
who don't know though i guess most of

119
00:04:34,800 --> 00:04:38,080
you do

120
00:04:35,680 --> 00:04:40,240
is a stripped-down version of linux

121
00:04:38,080 --> 00:04:41,520
that's designed to work on on very small

122
00:04:40,240 --> 00:04:44,880
slash embedded

123
00:04:41,520 --> 00:04:48,479
hardware and

124
00:04:44,880 --> 00:04:51,759
on besides that in iot we have

125
00:04:48,479 --> 00:04:52,800
two additional components you have a

126
00:04:51,759 --> 00:04:56,000
mobile app

127
00:04:52,800 --> 00:05:00,160
and you have cloud because today

128
00:04:56,000 --> 00:05:03,360
in 2020 99 of all iots

129
00:05:00,160 --> 00:05:05,280
um are cloud connected

130
00:05:03,360 --> 00:05:07,440
and managed by a mobile app and that

131
00:05:05,280 --> 00:05:09,198
mobile app usually talks to the cloud

132
00:05:07,440 --> 00:05:12,000
you know and then the cloud relays those

133
00:05:09,199 --> 00:05:15,039
commands to the irk itself

134
00:05:12,000 --> 00:05:18,160
and then of course this kind of

135
00:05:15,039 --> 00:05:19,840
extends the attack surface right so in

136
00:05:18,160 --> 00:05:21,600
the old days you had like only the

137
00:05:19,840 --> 00:05:23,919
application layer or maybe the operating

138
00:05:21,600 --> 00:05:26,479
system as an attack surface

139
00:05:23,919 --> 00:05:27,758
well right now you also have the mobile

140
00:05:26,479 --> 00:05:29,440
app as an attack surface

141
00:05:27,759 --> 00:05:31,520
and the cloud is on the back surface as

142
00:05:29,440 --> 00:05:35,120
we're going to see further down

143
00:05:31,520 --> 00:05:35,120
the road of this presentation

144
00:05:35,199 --> 00:05:41,520
so essentially uh

145
00:05:39,039 --> 00:05:42,320
is is just a small website because in in

146
00:05:41,520 --> 00:05:44,479
99

147
00:05:42,320 --> 00:05:46,320
of the cases that application that stays

148
00:05:44,479 --> 00:05:49,199
on top of the operating system is a

149
00:05:46,320 --> 00:05:50,719
web application running on linux but

150
00:05:49,199 --> 00:05:52,639
with a significantly bigger attack

151
00:05:50,720 --> 00:05:54,800
surface due to mobile apps and cloud

152
00:05:52,639 --> 00:05:56,960
and the reason i'm saying they're just

153
00:05:54,800 --> 00:06:00,479
websites is because again

154
00:05:56,960 --> 00:06:01,280
in most cases that application is a web

155
00:06:00,479 --> 00:06:03,120
app

156
00:06:01,280 --> 00:06:05,280
and that means it's subject to all the

157
00:06:03,120 --> 00:06:07,600
most common exploits running in web apps

158
00:06:05,280 --> 00:06:08,638
except for the fact that it's very often

159
00:06:07,600 --> 00:06:11,919
outdated

160
00:06:08,639 --> 00:06:14,080
uh they run some cgi's which talk to

161
00:06:11,919 --> 00:06:16,960
system commands

162
00:06:14,080 --> 00:06:19,520
in some cases they're on php in many

163
00:06:16,960 --> 00:06:22,239
cases they have command injection

164
00:06:19,520 --> 00:06:23,280
and very often you can even find buffer

165
00:06:22,240 --> 00:06:25,759
overflows because

166
00:06:23,280 --> 00:06:27,599
the that app is designed to not be

167
00:06:25,759 --> 00:06:30,240
interacted with directly it's

168
00:06:27,600 --> 00:06:31,919
designed to only talk to the cloud and

169
00:06:30,240 --> 00:06:33,039
that's kind of security by obscurity as

170
00:06:31,919 --> 00:06:36,400
we're going to see further

171
00:06:33,039 --> 00:06:38,800
further on uh because they believe that

172
00:06:36,400 --> 00:06:40,400
since a user doesn't have direct access

173
00:06:38,800 --> 00:06:40,960
to that mobile app there's no comports

174
00:06:40,400 --> 00:06:43,840
on the device

175
00:06:40,960 --> 00:06:45,039
whatever then there's nobody to actually

176
00:06:43,840 --> 00:06:47,359
try to you know

177
00:06:45,039 --> 00:06:49,840
brute force it or find a buffer overflow

178
00:06:47,360 --> 00:06:53,840
or interact with it in any way

179
00:06:49,840 --> 00:06:56,638
and that's wrong so

180
00:06:53,840 --> 00:06:59,440
just as a quick prologue for those of

181
00:06:56,639 --> 00:07:00,800
you who want to get into iot hacking now

182
00:06:59,440 --> 00:07:02,800
and you know just want to get started

183
00:07:00,800 --> 00:07:03,599
and have some easy quick quick and easy

184
00:07:02,800 --> 00:07:06,240
wins

185
00:07:03,599 --> 00:07:06,960
uh here's what to look for first of all

186
00:07:06,240 --> 00:07:11,120
you have uh

187
00:07:06,960 --> 00:07:14,159
the software part and sadly

188
00:07:11,120 --> 00:07:16,960
uh telnet is still a thing

189
00:07:14,160 --> 00:07:18,639
and i'm sorry if this is says 2019 i've

190
00:07:16,960 --> 00:07:20,400
stolen this live from a presentation

191
00:07:18,639 --> 00:07:22,240
that i was doing last year

192
00:07:20,400 --> 00:07:23,599
uh but it's still a thing in 2020 as

193
00:07:22,240 --> 00:07:27,039
well

194
00:07:23,599 --> 00:07:28,319
um then you can look at the mobile app

195
00:07:27,039 --> 00:07:28,960
slash device communication so

196
00:07:28,319 --> 00:07:31,440
essentially

197
00:07:28,960 --> 00:07:33,120
you you you're going to want to set up a

198
00:07:31,440 --> 00:07:35,759
small man in the middle device

199
00:07:33,120 --> 00:07:37,199
that analyzes the way the mobile app

200
00:07:35,759 --> 00:07:39,039
talks to the device and the way the

201
00:07:37,199 --> 00:07:40,240
mobile app talks to the cloud

202
00:07:39,039 --> 00:07:42,479
and then you're going to want to try to

203
00:07:40,240 --> 00:07:45,360
impersonate the commands

204
00:07:42,479 --> 00:07:46,159
uh you know initiated by the mobile app

205
00:07:45,360 --> 00:07:49,120
you're gonna see

206
00:07:46,160 --> 00:07:50,960
uh http requests so http post request

207
00:07:49,120 --> 00:07:53,120
http get requests

208
00:07:50,960 --> 00:07:54,638
um and you're gonna see apis with which

209
00:07:53,120 --> 00:07:56,800
the mobile app interacts

210
00:07:54,639 --> 00:07:59,039
then you're gonna want to fuzz those

211
00:07:56,800 --> 00:08:00,479
commands you're going to want to try to

212
00:07:59,039 --> 00:08:02,318
alter those commands and try different

213
00:08:00,479 --> 00:08:04,719
commands to see

214
00:08:02,319 --> 00:08:06,400
uh you know whether or not you can

215
00:08:04,720 --> 00:08:08,000
trigger different types of unexpected

216
00:08:06,400 --> 00:08:08,799
behavior in either the device or the

217
00:08:08,000 --> 00:08:12,160
cloud

218
00:08:08,800 --> 00:08:14,000
api and with this you're gonna be able

219
00:08:12,160 --> 00:08:14,240
to probably reach command ejection you

220
00:08:14,000 --> 00:08:16,160
know

221
00:08:14,240 --> 00:08:18,400
there's a lot of directory traversal

222
00:08:16,160 --> 00:08:20,240
especially in the iot itself if there's

223
00:08:18,400 --> 00:08:23,919
any open interfaces on that

224
00:08:20,240 --> 00:08:25,680
uh local fun inclusion exploits um and

225
00:08:23,919 --> 00:08:27,280
buffer overflows and this is the part

226
00:08:25,680 --> 00:08:28,000
where it's worth it's worth mentioning

227
00:08:27,280 --> 00:08:30,638
that

228
00:08:28,000 --> 00:08:31,759
and this is very important in the vast

229
00:08:30,639 --> 00:08:34,719
majority if not

230
00:08:31,759 --> 00:08:36,320
all iot devices uh the binaries are

231
00:08:34,719 --> 00:08:39,360
compiled without

232
00:08:36,320 --> 00:08:40,880
the position independent executable flag

233
00:08:39,360 --> 00:08:43,039
so i'm sure that most of you are

234
00:08:40,880 --> 00:08:45,360
familiar with aslr

235
00:08:43,039 --> 00:08:47,600
right and essentially in an operating

236
00:08:45,360 --> 00:08:50,800
system aslr enables for

237
00:08:47,600 --> 00:08:51,440
one for a binary to be moved at random

238
00:08:50,800 --> 00:08:55,120
memory

239
00:08:51,440 --> 00:08:58,160
locations when it's executed uh in order

240
00:08:55,120 --> 00:08:58,720
to prevent uh command execution when

241
00:08:58,160 --> 00:09:00,160
somebody

242
00:08:58,720 --> 00:09:02,320
you know manages to get a buffer

243
00:09:00,160 --> 00:09:06,160
overflow to find the buffer overflow

244
00:09:02,320 --> 00:09:08,080
um and well yeah slr does that but in

245
00:09:06,160 --> 00:09:10,160
order for aslr to work

246
00:09:08,080 --> 00:09:11,920
the binaries themselves have to be

247
00:09:10,160 --> 00:09:15,360
compiled with a flag

248
00:09:11,920 --> 00:09:17,760
that allows aslr to move it at different

249
00:09:15,360 --> 00:09:18,399
memory addresses and that flag is called

250
00:09:17,760 --> 00:09:21,920
pi

251
00:09:18,399 --> 00:09:23,040
position independent executable and that

252
00:09:21,920 --> 00:09:25,439
that kind of

253
00:09:23,040 --> 00:09:26,319
uses a few additional cpu cycles and

254
00:09:25,440 --> 00:09:30,720
this is why

255
00:09:26,320 --> 00:09:34,080
on most iots there is no pi

256
00:09:30,720 --> 00:09:35,680
right uh and um

257
00:09:34,080 --> 00:09:38,320
because there is no pi if you find the

258
00:09:35,680 --> 00:09:42,800
buffer overflow not only can you crash

259
00:09:38,320 --> 00:09:46,080
that executable but you can also

260
00:09:42,800 --> 00:09:47,199
very predictably achieve a command

261
00:09:46,080 --> 00:09:51,760
execution

262
00:09:47,200 --> 00:09:53,279
on that device

263
00:09:51,760 --> 00:09:55,360
also worth mentioning that if you find

264
00:09:53,279 --> 00:09:56,640
the vulnerability in one device

265
00:09:55,360 --> 00:09:58,640
there's a very good chance that that

266
00:09:56,640 --> 00:10:00,240
vulnerability is going to be found in

267
00:09:58,640 --> 00:10:02,720
other devices as well

268
00:10:00,240 --> 00:10:03,600
we've seen this a lot and we've seen

269
00:10:02,720 --> 00:10:05,600
vendors

270
00:10:03,600 --> 00:10:07,600
that share the same code we've seen

271
00:10:05,600 --> 00:10:10,720
vendors that use oem code

272
00:10:07,600 --> 00:10:12,560
and in one case for example we found

273
00:10:10,720 --> 00:10:14,399
a number of buffer overflows and more

274
00:10:12,560 --> 00:10:18,239
common execution vulnerabilities in

275
00:10:14,399 --> 00:10:20,640
uh you know in a security camera

276
00:10:18,240 --> 00:10:22,079
and then when we looked under the hood

277
00:10:20,640 --> 00:10:24,800
we found the firmware

278
00:10:22,079 --> 00:10:26,079
that was present in about 20 other

279
00:10:24,800 --> 00:10:26,880
different types of cameras with

280
00:10:26,079 --> 00:10:29,920
different

281
00:10:26,880 --> 00:10:31,680
uis different uh you know buttons texts

282
00:10:29,920 --> 00:10:34,560
and and so on and so forth

283
00:10:31,680 --> 00:10:35,279
but these vulnerabilities were common to

284
00:10:34,560 --> 00:10:36,800
all of them

285
00:10:35,279 --> 00:10:38,480
and that kind of brought up the number

286
00:10:36,800 --> 00:10:40,079
from what we initially evaluated at a

287
00:10:38,480 --> 00:10:42,399
few hundred thousand devices

288
00:10:40,079 --> 00:10:43,359
to a few million all of them sharing the

289
00:10:42,399 --> 00:10:44,800
same vulnerability

290
00:10:43,360 --> 00:10:47,279
and as you can imagine it was a

291
00:10:44,800 --> 00:10:49,279
nightmare for us to reach out to all the

292
00:10:47,279 --> 00:10:53,120
vendors and get them to patch them

293
00:10:49,279 --> 00:10:56,480
this is why right now a few years later

294
00:10:53,120 --> 00:10:58,000
there's still roughly well

295
00:10:56,480 --> 00:10:59,440
i guess at least five hundred thousand

296
00:10:58,000 --> 00:11:01,040
six hundred thousand devices still

297
00:10:59,440 --> 00:11:02,800
vulnerable to these exploits

298
00:11:01,040 --> 00:11:04,319
because they didn't reply to our emails

299
00:11:02,800 --> 00:11:06,319
or we couldn't find

300
00:11:04,320 --> 00:11:09,440
a contact address to reach them or to

301
00:11:06,320 --> 00:11:13,279
reach out to them or something like that

302
00:11:09,440 --> 00:11:14,959
okay um another common vulnerability

303
00:11:13,279 --> 00:11:16,480
is back doors and credential reuse

304
00:11:14,959 --> 00:11:16,959
private carriers this is common this

305
00:11:16,480 --> 00:11:20,000
you're going to

306
00:11:16,959 --> 00:11:23,760
see this in any iot related talk

307
00:11:20,000 --> 00:11:25,680
um essentially back doors would be

308
00:11:23,760 --> 00:11:28,399
either service accounts implemented by

309
00:11:25,680 --> 00:11:30,079
the vendors or actual back doors

310
00:11:28,399 --> 00:11:32,320
we've seen a device that if you send a

311
00:11:30,079 --> 00:11:34,800
certain string on a certain port

312
00:11:32,320 --> 00:11:35,519
then after that string you can enter any

313
00:11:34,800 --> 00:11:38,800
command

314
00:11:35,519 --> 00:11:41,839
so it wasn't a common protocol like http

315
00:11:38,800 --> 00:11:42,240
it was simply a service port open on if

316
00:11:41,839 --> 00:11:45,519
i

317
00:11:42,240 --> 00:11:48,800
remember correctly 9000 something

318
00:11:45,519 --> 00:11:51,440
and you had to send a six

319
00:11:48,800 --> 00:11:53,279
character string and after that six

320
00:11:51,440 --> 00:11:55,760
character string your command and it

321
00:11:53,279 --> 00:11:57,200
would be system executed on the device

322
00:11:55,760 --> 00:11:58,800
obviously it wasn't documented it was

323
00:11:57,200 --> 00:12:01,920
here and so on and so forth but you know

324
00:11:58,800 --> 00:12:03,760
we found it um credential reuse

325
00:12:01,920 --> 00:12:06,639
obviously it means that you know

326
00:12:03,760 --> 00:12:07,680
um some service accounts which may be

327
00:12:06,639 --> 00:12:09,200
documented

328
00:12:07,680 --> 00:12:11,359
have the same credentials across all

329
00:12:09,200 --> 00:12:14,600
devices this was the main cause

330
00:12:11,360 --> 00:12:16,320
of the mirai botnet if you remember in

331
00:12:14,600 --> 00:12:18,880
2016

332
00:12:16,320 --> 00:12:19,519
we had uh for example a password which

333
00:12:18,880 --> 00:12:24,399
let's say

334
00:12:19,519 --> 00:12:26,720
is saved like xcv goldie 2941

335
00:12:24,399 --> 00:12:27,519
and this was the password you wouldn't

336
00:12:26,720 --> 00:12:29,200
guess it

337
00:12:27,519 --> 00:12:30,800
however if you extracted it from the

338
00:12:29,200 --> 00:12:32,720
firmware once

339
00:12:30,800 --> 00:12:34,800
because you could find it there then you

340
00:12:32,720 --> 00:12:36,399
could use that password to compromise

341
00:12:34,800 --> 00:12:37,680
hundreds of hundreds of thousands of

342
00:12:36,399 --> 00:12:39,200
devices

343
00:12:37,680 --> 00:12:41,359
you know because they would use the same

344
00:12:39,200 --> 00:12:42,399
credentials and obviously the users

345
00:12:41,360 --> 00:12:45,360
didn't know about that

346
00:12:42,399 --> 00:12:47,839
in order to change it uh and last but my

347
00:12:45,360 --> 00:12:50,240
name is least private key to use

348
00:12:47,839 --> 00:12:51,519
in many cases we've seen manufacturers

349
00:12:50,240 --> 00:12:53,040
embedding

350
00:12:51,519 --> 00:12:54,720
encryption keys that can be used to

351
00:12:53,040 --> 00:12:55,519
communicate with the device in the

352
00:12:54,720 --> 00:12:57,200
firmware

353
00:12:55,519 --> 00:12:59,040
and then the same key would be used

354
00:12:57,200 --> 00:13:00,079
across all devices so if you manage to

355
00:12:59,040 --> 00:13:01,920
compromise the key

356
00:13:00,079 --> 00:13:04,319
in one device then you're going to be

357
00:13:01,920 --> 00:13:05,920
able to re use that key

358
00:13:04,320 --> 00:13:08,320
to compromise all the devices from that

359
00:13:05,920 --> 00:13:08,319
vendor

360
00:13:08,959 --> 00:13:13,199
um so cloud chatter is again thing to

361
00:13:11,519 --> 00:13:14,560
look out for just look at the way the

362
00:13:13,200 --> 00:13:16,399
mobile app talks to the cloud and you're

363
00:13:14,560 --> 00:13:17,439
going to see some apis

364
00:13:16,399 --> 00:13:18,800
and then you're going to find

365
00:13:17,440 --> 00:13:20,240
interesting things in those apis we're

366
00:13:18,800 --> 00:13:22,399
going to talk about that actually later

367
00:13:20,240 --> 00:13:22,399
on

368
00:13:23,839 --> 00:13:28,160
so um moving on

369
00:13:28,480 --> 00:13:31,920
other tools to use are obviously you can

370
00:13:30,639 --> 00:13:35,360
look in the hardware just

371
00:13:31,920 --> 00:13:36,000
open it up and then find a jtag

372
00:13:35,360 --> 00:13:39,519
interface

373
00:13:36,000 --> 00:13:41,040
or much easier way find a serial

374
00:13:39,519 --> 00:13:43,040
interface just

375
00:13:41,040 --> 00:13:44,399
again the vast majority of devices have

376
00:13:43,040 --> 00:13:46,240
serial ports

377
00:13:44,399 --> 00:13:48,000
and hooking up to that serial port with

378
00:13:46,240 --> 00:13:50,880
either you know a screen

379
00:13:48,000 --> 00:13:52,160
slash minicom in linux or hyper terminal

380
00:13:50,880 --> 00:13:53,680
in windows i guess

381
00:13:52,160 --> 00:13:55,360
enables you to interact with the device

382
00:13:53,680 --> 00:13:58,800
on the serial interface

383
00:13:55,360 --> 00:13:59,360
and you can do boot hijack much like you

384
00:13:58,800 --> 00:14:01,279
would do

385
00:13:59,360 --> 00:14:02,560
on a linux machine that you want to

386
00:14:01,279 --> 00:14:05,279
change your password

387
00:14:02,560 --> 00:14:05,839
right so you just pause the bootloader

388
00:14:05,279 --> 00:14:09,199
and then

389
00:14:05,839 --> 00:14:11,360
pass parameters to the bootloader to

390
00:14:09,199 --> 00:14:15,120
uh start it up in single user mode for

391
00:14:11,360 --> 00:14:17,279
example or init equals bnsh in this case

392
00:14:15,120 --> 00:14:18,800
and much like a linux this is going to

393
00:14:17,279 --> 00:14:21,519
drop you

394
00:14:18,800 --> 00:14:23,040
into a dumb shell then you just remount

395
00:14:21,519 --> 00:14:25,360
the the file systems and you can

396
00:14:23,040 --> 00:14:27,920
interact with them at your own users

397
00:14:25,360 --> 00:14:30,959
so you can just log in properly after

398
00:14:27,920 --> 00:14:34,880
the next reboot

399
00:14:30,959 --> 00:14:38,959
so we get to today's presentation

400
00:14:34,880 --> 00:14:38,959
so this is the the start of it

401
00:14:39,040 --> 00:14:42,240
traditionally compromising iot is

402
00:14:41,519 --> 00:14:45,360
especially

403
00:14:42,240 --> 00:14:46,959
from the perspective of iot botnets was

404
00:14:45,360 --> 00:14:49,839
done like this you would

405
00:14:46,959 --> 00:14:51,680
iterate each ip address in the ipv4

406
00:14:49,839 --> 00:14:54,639
space

407
00:14:51,680 --> 00:14:56,959
and then find maybe an intel network or

408
00:14:54,639 --> 00:14:59,360
maybe an open ssh port

409
00:14:56,959 --> 00:15:00,880
and then you will brute force that with

410
00:14:59,360 --> 00:15:01,360
the most common credentials that you

411
00:15:00,880 --> 00:15:03,839
know

412
00:15:01,360 --> 00:15:05,120
and then you get in you drop a payload

413
00:15:03,839 --> 00:15:08,000
uh and then you

414
00:15:05,120 --> 00:15:08,880
enroll that device into apartment or you

415
00:15:08,000 --> 00:15:11,360
find an open

416
00:15:08,880 --> 00:15:12,720
web service board and you and you try

417
00:15:11,360 --> 00:15:15,920
the most common

418
00:15:12,720 --> 00:15:17,760
uh iot specific uh exploits web exploits

419
00:15:15,920 --> 00:15:20,160
usually command injection ones

420
00:15:17,760 --> 00:15:21,439
um some cgi's that are getting exploited

421
00:15:20,160 --> 00:15:23,600
you know some uh

422
00:15:21,440 --> 00:15:25,760
some debugging interfaces are getting

423
00:15:23,600 --> 00:15:28,160
exploited it's not that difficult

424
00:15:25,760 --> 00:15:29,519
but the bottom line here that that has

425
00:15:28,160 --> 00:15:32,959
to be understood is

426
00:15:29,519 --> 00:15:34,880
this was done by iterating ip addresses

427
00:15:32,959 --> 00:15:38,160
in the ipv4 space

428
00:15:34,880 --> 00:15:40,800
with exposed ports slash

429
00:15:38,160 --> 00:15:42,079
applications right so exposing the

430
00:15:40,800 --> 00:15:44,079
internet

431
00:15:42,079 --> 00:15:45,680
now this window for hackers is going to

432
00:15:44,079 --> 00:15:47,519
close right because

433
00:15:45,680 --> 00:15:49,120
a lot of devices are not going to be

434
00:15:47,519 --> 00:15:51,839
directly exposed on internet

435
00:15:49,120 --> 00:15:53,120
port forwarding is thank god it's dying

436
00:15:51,839 --> 00:15:55,279
a upnp

437
00:15:53,120 --> 00:15:56,720
is probably gonna die soon as well so

438
00:15:55,279 --> 00:15:58,800
the the whole concept of

439
00:15:56,720 --> 00:16:00,160
finding open interfaces directly

440
00:15:58,800 --> 00:16:03,359
exposing internet

441
00:16:00,160 --> 00:16:06,719
in the iop space is gonna gradually

442
00:16:03,360 --> 00:16:09,040
die so what's a hacker to do especially

443
00:16:06,720 --> 00:16:10,720
an iot hacker so what are we to do if we

444
00:16:09,040 --> 00:16:13,120
want to keep compromising devices

445
00:16:10,720 --> 00:16:15,600
i'm not saying we should but i'm saying

446
00:16:13,120 --> 00:16:16,399
you know if i put myself in the shoes of

447
00:16:15,600 --> 00:16:18,959
a

448
00:16:16,399 --> 00:16:20,320
of a cyber criminal what would be my

449
00:16:18,959 --> 00:16:22,800
next step

450
00:16:20,320 --> 00:16:24,240
so we started researching cloud

451
00:16:22,800 --> 00:16:27,680
implementations

452
00:16:24,240 --> 00:16:30,800
so this is how iots look right now

453
00:16:27,680 --> 00:16:33,439
you have the iot the cloud and the

454
00:16:30,800 --> 00:16:33,439
mobile app

455
00:16:33,600 --> 00:16:38,720
so the iot in this scenario again 2020

456
00:16:36,880 --> 00:16:40,880
is not directly accessible from the

457
00:16:38,720 --> 00:16:44,079
internet there's no open ports

458
00:16:40,880 --> 00:16:44,480
there's no port forwarding everything is

459
00:16:44,079 --> 00:16:47,439
down

460
00:16:44,480 --> 00:16:47,440
relayed by the cloud

461
00:16:47,519 --> 00:16:50,959
obviously it allows for more efficient

462
00:16:49,120 --> 00:16:52,560
management because you don't need to

463
00:16:50,959 --> 00:16:55,439
have you know technical skills to do

464
00:16:52,560 --> 00:16:56,079
forwarding and have access to it right

465
00:16:55,440 --> 00:16:58,000
uh

466
00:16:56,079 --> 00:16:59,920
it has a modular architecture and this

467
00:16:58,000 --> 00:17:01,360
is an important thing to mention

468
00:16:59,920 --> 00:17:03,120
and many very often some of the

469
00:17:01,360 --> 00:17:04,000
components like the cloud component is

470
00:17:03,120 --> 00:17:06,079
provided by a third

471
00:17:04,000 --> 00:17:07,520
party the mobile app is provided by a

472
00:17:06,079 --> 00:17:09,119
third party and

473
00:17:07,520 --> 00:17:11,039
that's not necessarily a bad thing

474
00:17:09,119 --> 00:17:12,879
because usually you're supposed to

475
00:17:11,039 --> 00:17:15,280
build the things that you're good at

476
00:17:12,880 --> 00:17:16,559
building and if you don't know that much

477
00:17:15,280 --> 00:17:19,039
about cloud maybe

478
00:17:16,559 --> 00:17:20,799
it's good it's a good idea to kind of

479
00:17:19,039 --> 00:17:22,799
call upon a third party to provide a

480
00:17:20,799 --> 00:17:24,400
cloud service for you

481
00:17:22,799 --> 00:17:26,799
but as we're going to see further down

482
00:17:24,400 --> 00:17:28,880
the road it's also very important to

483
00:17:26,799 --> 00:17:30,960
pick a proper third party to provide

484
00:17:28,880 --> 00:17:33,679
that cloud platform for you

485
00:17:30,960 --> 00:17:35,120
and if they tell you this is how you're

486
00:17:33,679 --> 00:17:36,640
supposed to implement it

487
00:17:35,120 --> 00:17:39,360
it's ideal if you follow that

488
00:17:36,640 --> 00:17:39,360
documentation

489
00:17:39,919 --> 00:17:43,919
um usually and again we've seen this

490
00:17:43,120 --> 00:17:47,360
across

491
00:17:43,919 --> 00:17:48,000
most iot devices the iot registers to

492
00:17:47,360 --> 00:17:50,959
the cloud

493
00:17:48,000 --> 00:17:52,960
with a unique identifier usually it's a

494
00:17:50,960 --> 00:17:55,919
32-bit string

495
00:17:52,960 --> 00:17:58,240
um much like the one that you see in the

496
00:17:55,919 --> 00:18:00,160
in the image over there

497
00:17:58,240 --> 00:18:01,600
and this is the thing that identifies

498
00:18:00,160 --> 00:18:02,480
that device through cloud and this is

499
00:18:01,600 --> 00:18:05,120
the thing that

500
00:18:02,480 --> 00:18:05,840
is used across the entire communication

501
00:18:05,120 --> 00:18:10,239
as

502
00:18:05,840 --> 00:18:10,240
an identifier for that unique device

503
00:18:10,880 --> 00:18:14,640
and usually the way this is going to

504
00:18:12,880 --> 00:18:17,200
work further for the run is

505
00:18:14,640 --> 00:18:18,480
the mobile app tells the cloud please

506
00:18:17,200 --> 00:18:22,000
send this command

507
00:18:18,480 --> 00:18:25,039
to that device using that unique id

508
00:18:22,000 --> 00:18:26,880
as the identifier

509
00:18:25,039 --> 00:18:28,640
and they use encryption or the entire

510
00:18:26,880 --> 00:18:30,720
communication between the mobile app

511
00:18:28,640 --> 00:18:32,720
and the cloud is encrypted very often

512
00:18:30,720 --> 00:18:34,880
well not always but very often so that's

513
00:18:32,720 --> 00:18:34,880
good

514
00:18:34,960 --> 00:18:38,640
and this is a very generic description

515
00:18:37,280 --> 00:18:40,399
of uh

516
00:18:38,640 --> 00:18:42,400
how iots are implemented today it

517
00:18:40,400 --> 00:18:44,160
applies to literally ninety percent of

518
00:18:42,400 --> 00:18:46,640
all the devices that we've analyzed

519
00:18:44,160 --> 00:18:48,080
so again uh the device registers into

520
00:18:46,640 --> 00:18:50,640
the cloud says i'm device

521
00:18:48,080 --> 00:18:52,240
this unique device id and then the

522
00:18:50,640 --> 00:18:54,960
mobile app says okay

523
00:18:52,240 --> 00:18:57,440
shoot this command towards that unique

524
00:18:54,960 --> 00:18:58,799
device id or can be the status of this

525
00:18:57,440 --> 00:19:00,720
unique device id

526
00:18:58,799 --> 00:19:02,639
or interact with that unique device id

527
00:19:00,720 --> 00:19:05,280
in this way

528
00:19:02,640 --> 00:19:07,039
so this was great right it's awesome

529
00:19:05,280 --> 00:19:08,639
it's it's definitely much better than

530
00:19:07,039 --> 00:19:10,000
exposing it directly into the internet

531
00:19:08,640 --> 00:19:14,000
and it looks pretty pretty

532
00:19:10,000 --> 00:19:18,160
secure but

533
00:19:14,000 --> 00:19:19,440
well not all cloud implementations turn

534
00:19:18,160 --> 00:19:22,799
out to be that great so

535
00:19:19,440 --> 00:19:26,400
this this looks big but this looks okay

536
00:19:22,799 --> 00:19:27,840
the first time you look at it but it may

537
00:19:26,400 --> 00:19:32,880
not necessarily be

538
00:19:27,840 --> 00:19:32,879
that great so

539
00:19:34,320 --> 00:19:38,000
in the vast majority of the cases

540
00:19:36,640 --> 00:19:39,760
there's no additional

541
00:19:38,000 --> 00:19:41,360
authentication implemented this means

542
00:19:39,760 --> 00:19:44,400
that

543
00:19:41,360 --> 00:19:47,120
there's no uh the mobile app doesn't

544
00:19:44,400 --> 00:19:50,480
need to authenticate to the cloud

545
00:19:47,120 --> 00:19:52,799
and the device just doesn't need to use

546
00:19:50,480 --> 00:19:53,360
anything other than that unique device

547
00:19:52,799 --> 00:19:55,679
id

548
00:19:53,360 --> 00:19:57,439
essentially that device id is considered

549
00:19:55,679 --> 00:19:58,880
unpredictable and that serves as

550
00:19:57,440 --> 00:20:02,799
authentication

551
00:19:58,880 --> 00:20:04,640
if somebody knows the device id

552
00:20:02,799 --> 00:20:06,080
then they will be able to talk to the

553
00:20:04,640 --> 00:20:09,360
cloud and send commands

554
00:20:06,080 --> 00:20:11,840
to that device id without any other form

555
00:20:09,360 --> 00:20:14,879
of additional authentication required

556
00:20:11,840 --> 00:20:18,320
arguably the device id in most cases

557
00:20:14,880 --> 00:20:18,720
is unpredictable so you can brute force

558
00:20:18,320 --> 00:20:20,879
it

559
00:20:18,720 --> 00:20:23,760
you cannot reverse it because it it's

560
00:20:20,880 --> 00:20:26,799
rather large it's 32-bit it's

561
00:20:23,760 --> 00:20:28,720
and it's going to be different for each

562
00:20:26,799 --> 00:20:30,320
type of cloud implementation

563
00:20:28,720 --> 00:20:32,080
so there's a very good chance that

564
00:20:30,320 --> 00:20:33,600
you're not going to be able to find out

565
00:20:32,080 --> 00:20:35,918
which is the device id that you want to

566
00:20:33,600 --> 00:20:37,840
have but

567
00:20:35,919 --> 00:20:39,679
again worth mentioning that if you do

568
00:20:37,840 --> 00:20:41,678
know a device id

569
00:20:39,679 --> 00:20:43,360
then in the vast majority of cases

570
00:20:41,679 --> 00:20:44,159
there's no additional authentication

571
00:20:43,360 --> 00:20:49,840
required

572
00:20:44,159 --> 00:20:49,840
to send commands to it through the cloud

573
00:20:50,080 --> 00:20:53,039
another good thing is some vendors do

574
00:20:51,679 --> 00:20:54,480
implement additional symmetric keys

575
00:20:53,039 --> 00:20:58,640
unique per device

576
00:20:54,480 --> 00:21:00,720
but that's very rare so we've only seen

577
00:20:58,640 --> 00:21:02,720
that once or twice

578
00:21:00,720 --> 00:21:03,760
and some vendors and this is gonna be

579
00:21:02,720 --> 00:21:06,240
fun uh

580
00:21:03,760 --> 00:21:07,440
and we're gonna see it later later on

581
00:21:06,240 --> 00:21:09,679
some vendors implement

582
00:21:07,440 --> 00:21:10,880
additional functionality in that cloud

583
00:21:09,679 --> 00:21:13,280
implementation

584
00:21:10,880 --> 00:21:14,960
quite often breaking what should be

585
00:21:13,280 --> 00:21:18,080
decent security

586
00:21:14,960 --> 00:21:18,720
uh and you know when and amazon s3 and

587
00:21:18,080 --> 00:21:22,639
qdd

588
00:21:18,720 --> 00:21:24,640
uh these are a few common examples um

589
00:21:22,640 --> 00:21:26,159
i'm going to detail them in the in the

590
00:21:24,640 --> 00:21:28,000
next slides

591
00:21:26,159 --> 00:21:29,600
client id is going to be something

592
00:21:28,000 --> 00:21:30,159
specific to a vendor that i'm going to

593
00:21:29,600 --> 00:21:33,360
talk about

594
00:21:30,159 --> 00:21:33,360
a lot later on

595
00:21:33,840 --> 00:21:40,799
so a few words on amazon s3 buckets

596
00:21:37,600 --> 00:21:44,000
in many cases the security of s3 relies

597
00:21:40,799 --> 00:21:45,280
in the obscurity of the path but a file

598
00:21:44,000 --> 00:21:48,559
is stored

599
00:21:45,280 --> 00:21:50,480
so you have a path which is like like

600
00:21:48,559 --> 00:21:52,080
this is the path to the file you want

601
00:21:50,480 --> 00:21:53,120
slashing before and the path is

602
00:21:52,080 --> 00:21:55,199
generated by

603
00:21:53,120 --> 00:21:57,439
whichever device generates that file

604
00:21:55,200 --> 00:21:59,840
right so i have a security camera

605
00:21:57,440 --> 00:22:01,039
i generate the recording i upload it to

606
00:21:59,840 --> 00:22:04,158
the to the

607
00:22:01,039 --> 00:22:05,120
to my to the s3 bucket and then i really

608
00:22:04,159 --> 00:22:07,919
the information

609
00:22:05,120 --> 00:22:09,760
the file is in this path to the mobile

610
00:22:07,919 --> 00:22:11,280
app saying you can access it at this

611
00:22:09,760 --> 00:22:13,919
path

612
00:22:11,280 --> 00:22:15,600
what you should be able to do is access

613
00:22:13,919 --> 00:22:18,640
the file at that path

614
00:22:15,600 --> 00:22:21,280
from anywhere even from any other uh

615
00:22:18,640 --> 00:22:22,880
device even without authentication it

616
00:22:21,280 --> 00:22:27,039
may not sound ideal but

617
00:22:22,880 --> 00:22:29,760
that path is usually not predictable

618
00:22:27,039 --> 00:22:30,640
what you shouldn't in any situation be

619
00:22:29,760 --> 00:22:34,720
able to do

620
00:22:30,640 --> 00:22:36,960
is list the files or go up one level

621
00:22:34,720 --> 00:22:38,480
in that file path so if you you're going

622
00:22:36,960 --> 00:22:40,320
to be able to see the path

623
00:22:38,480 --> 00:22:42,799
in the mobile app right so when you're

624
00:22:40,320 --> 00:22:44,000
relayed the pathway recording you're

625
00:22:42,799 --> 00:22:45,840
going to be able to see

626
00:22:44,000 --> 00:22:47,360
the path to that recording in the mobile

627
00:22:45,840 --> 00:22:49,120
app

628
00:22:47,360 --> 00:22:50,959
but you should only be able to see that

629
00:22:49,120 --> 00:22:54,719
recording you shouldn't be able to list

630
00:22:50,960 --> 00:22:57,360
all the other files in that folder

631
00:22:54,720 --> 00:22:59,440
and definitely you should not be able to

632
00:22:57,360 --> 00:23:01,600
go up one level up one level up one

633
00:22:59,440 --> 00:23:04,159
level to see all the files

634
00:23:01,600 --> 00:23:05,520
in uh in in that folder it's much like a

635
00:23:04,159 --> 00:23:08,400
web server

636
00:23:05,520 --> 00:23:10,320
that has directory index enabled and it

637
00:23:08,400 --> 00:23:12,400
shouldn't

638
00:23:10,320 --> 00:23:13,918
right usually you'll only be able you

639
00:23:12,400 --> 00:23:15,600
should only be able to see the files

640
00:23:13,919 --> 00:23:17,120
available from that web service from

641
00:23:15,600 --> 00:23:18,240
that website which are exposed by the

642
00:23:17,120 --> 00:23:20,799
website itself

643
00:23:18,240 --> 00:23:22,320
by the website application you should

644
00:23:20,799 --> 00:23:24,799
not see the directory index of that

645
00:23:22,320 --> 00:23:24,799
website

646
00:23:25,200 --> 00:23:29,600
so um we've seen an an army number of

647
00:23:27,679 --> 00:23:32,400
vendors that allow the equivalent

648
00:23:29,600 --> 00:23:34,080
of a recursive list of the root folder

649
00:23:32,400 --> 00:23:37,120
of their s3 bucket

650
00:23:34,080 --> 00:23:39,280
so if you implement s3 in it doesn't

651
00:23:37,120 --> 00:23:40,158
have to be iot if you implement a stream

652
00:23:39,280 --> 00:23:42,559
anyway

653
00:23:40,159 --> 00:23:43,679
make sure that you check out for this

654
00:23:42,559 --> 00:23:46,799
make sure that you

655
00:23:43,679 --> 00:23:49,120
make sure that nobody can

656
00:23:46,799 --> 00:23:51,760
recursively list the contents of your

657
00:23:49,120 --> 00:23:54,959
bucket

658
00:23:51,760 --> 00:23:58,720
mqtt nkttt

659
00:23:54,960 --> 00:24:01,200
is a new uh protocol which enables

660
00:23:58,720 --> 00:24:02,080
monitoring alerts and in some cases

661
00:24:01,200 --> 00:24:03,840
commands

662
00:24:02,080 --> 00:24:05,918
between mobile app and the device and

663
00:24:03,840 --> 00:24:09,600
the way it works is that

664
00:24:05,919 --> 00:24:10,960
um the device registers in the mqtt

665
00:24:09,600 --> 00:24:13,199
servers to something like

666
00:24:10,960 --> 00:24:14,640
a slash vendor slash device id slash

667
00:24:13,200 --> 00:24:16,080
topic

668
00:24:14,640 --> 00:24:18,159
uh where topic is like the different

669
00:24:16,080 --> 00:24:20,559
types of events so i registered to

670
00:24:18,159 --> 00:24:22,000
a slice vendor slash device id which

671
00:24:20,559 --> 00:24:24,399
would be a unique string

672
00:24:22,000 --> 00:24:25,279
specific to my device id and then when i

673
00:24:24,400 --> 00:24:28,880
would say

674
00:24:25,279 --> 00:24:30,000
i'm online and then or topic online

675
00:24:28,880 --> 00:24:32,320
topic offline

676
00:24:30,000 --> 00:24:33,279
topic event happens topic something

677
00:24:32,320 --> 00:24:35,439
something something

678
00:24:33,279 --> 00:24:36,640
and then i would really all these let's

679
00:24:35,440 --> 00:24:38,000
call them paths

680
00:24:36,640 --> 00:24:39,760
to the mobile app and say you can

681
00:24:38,000 --> 00:24:43,679
register to those

682
00:24:39,760 --> 00:24:47,600
um topics and see whenever something

683
00:24:43,679 --> 00:24:50,799
changes in them

684
00:24:47,600 --> 00:24:52,399
so you should only be able to see the

685
00:24:50,799 --> 00:24:54,320
topics that the

686
00:24:52,400 --> 00:24:56,159
device tells you you can see from the

687
00:24:54,320 --> 00:24:59,840
mobile app

688
00:24:56,159 --> 00:25:03,840
now what we've been

689
00:24:59,840 --> 00:25:07,360
able to see in some cases is that

690
00:25:03,840 --> 00:25:09,039
while normally as a user i shouldn't be

691
00:25:07,360 --> 00:25:11,120
i should only be able to see the topics

692
00:25:09,039 --> 00:25:13,279
relevant to my device

693
00:25:11,120 --> 00:25:15,840
and register only to the topics that

694
00:25:13,279 --> 00:25:17,279
were exposed by my device

695
00:25:15,840 --> 00:25:20,000
we've seen implementations in which you

696
00:25:17,279 --> 00:25:22,559
can just register to slash vendor

697
00:25:20,000 --> 00:25:23,840
and then see all the topics from all the

698
00:25:22,559 --> 00:25:26,879
devices

699
00:25:23,840 --> 00:25:28,080
uh used by that vendor and we've seen

700
00:25:26,880 --> 00:25:31,919
this actually live

701
00:25:28,080 --> 00:25:34,158
in in some cases and the statuses

702
00:25:31,919 --> 00:25:35,600
are first of all you can see all the

703
00:25:34,159 --> 00:25:38,480
device ids

704
00:25:35,600 --> 00:25:40,080
which is a a great deal because again

705
00:25:38,480 --> 00:25:41,600
those are the device ids which shouldn't

706
00:25:40,080 --> 00:25:43,840
be accessible

707
00:25:41,600 --> 00:25:45,360
and you shouldn't know them except for

708
00:25:43,840 --> 00:25:48,399
your own device id

709
00:25:45,360 --> 00:25:50,080
and in some cases the status is

710
00:25:48,400 --> 00:25:52,559
i'm being configured and this is my

711
00:25:50,080 --> 00:25:53,360
password so if you manage to see a

712
00:25:52,559 --> 00:25:56,559
device

713
00:25:53,360 --> 00:25:58,158
to monitor the mqtt stream and at that

714
00:25:56,559 --> 00:25:59,279
point somebody configures the device

715
00:25:58,159 --> 00:26:02,080
you're gonna see that

716
00:25:59,279 --> 00:26:03,600
person's passwords configuration

717
00:26:02,080 --> 00:26:06,240
everything that's being sent

718
00:26:03,600 --> 00:26:08,559
uh and updated on the device in the mqtt

719
00:26:06,240 --> 00:26:08,559
stream

720
00:26:09,120 --> 00:26:13,360
so here's an example targeted attack in

721
00:26:11,279 --> 00:26:15,440
which let's say you want to

722
00:26:13,360 --> 00:26:17,120
hack you want to get access to

723
00:26:15,440 --> 00:26:19,120
somebody's baby monitor a specific

724
00:26:17,120 --> 00:26:22,239
person's baby monitor

725
00:26:19,120 --> 00:26:24,399
irene's baby monitor so

726
00:26:22,240 --> 00:26:25,600
you register to slash vendor and on mqtt

727
00:26:24,400 --> 00:26:27,360
and have a script just

728
00:26:25,600 --> 00:26:28,799
parse all the output of that it's going

729
00:26:27,360 --> 00:26:30,559
to be a lot you're going to

730
00:26:28,799 --> 00:26:32,799
you're going to have millions of devices

731
00:26:30,559 --> 00:26:34,320
sending you status updates

732
00:26:32,799 --> 00:26:36,720
and you have a script that parses that

733
00:26:34,320 --> 00:26:38,000
uh and then harvest all the registered

734
00:26:36,720 --> 00:26:40,960
device ids

735
00:26:38,000 --> 00:26:42,080
and then with those device ids you you

736
00:26:40,960 --> 00:26:45,120
query

737
00:26:42,080 --> 00:26:46,799
the cloud of that baby monitor and get

738
00:26:45,120 --> 00:26:47,279
the information of the owner because

739
00:26:46,799 --> 00:26:49,279
again

740
00:26:47,279 --> 00:26:50,880
as i was saying earlier very often the

741
00:26:49,279 --> 00:26:52,400
device id is the only thing you need to

742
00:26:50,880 --> 00:26:54,240
authenticate with

743
00:26:52,400 --> 00:26:55,760
so you're going to be able to just say

744
00:26:54,240 --> 00:26:57,120
hello give me the information about this

745
00:26:55,760 --> 00:26:58,799
device id

746
00:26:57,120 --> 00:27:00,639
and then you're going to get the

747
00:26:58,799 --> 00:27:04,240
information like you know

748
00:27:00,640 --> 00:27:07,120
email address address owner name

749
00:27:04,240 --> 00:27:09,200
phone number location all the stuff

750
00:27:07,120 --> 00:27:11,199
associated with that

751
00:27:09,200 --> 00:27:12,480
why well because you're supposed to know

752
00:27:11,200 --> 00:27:13,760
your own device id

753
00:27:12,480 --> 00:27:15,760
and you're supposed to be able to pull

754
00:27:13,760 --> 00:27:17,440
your own information but

755
00:27:15,760 --> 00:27:19,279
since we're pulling all the device ids

756
00:27:17,440 --> 00:27:21,360
from the mqtt stream

757
00:27:19,279 --> 00:27:22,880
unfortunately you're going to be able to

758
00:27:21,360 --> 00:27:25,199
kind of pull this information about all

759
00:27:22,880 --> 00:27:26,960
the users

760
00:27:25,200 --> 00:27:28,399
so when you see irene's email popping up

761
00:27:26,960 --> 00:27:32,320
you have her device id

762
00:27:28,399 --> 00:27:35,120
and email and then you go to s3

763
00:27:32,320 --> 00:27:36,720
as i was saying in the s3 bucket slide

764
00:27:35,120 --> 00:27:39,918
in this case we have flash vendor

765
00:27:36,720 --> 00:27:41,279
slash device id slash recordings and if

766
00:27:39,919 --> 00:27:43,279
listing is enabled you're going to see

767
00:27:41,279 --> 00:27:45,679
all the recordings from irene's baby

768
00:27:43,279 --> 00:27:48,640
monitor

769
00:27:45,679 --> 00:27:49,919
which this is a purely hypothetical

770
00:27:48,640 --> 00:27:53,360
scenario

771
00:27:49,919 --> 00:27:57,039
that we have not done except for

772
00:27:53,360 --> 00:27:59,600
our own device of course um

773
00:27:57,039 --> 00:28:00,158
so yeah this is how you could you know

774
00:27:59,600 --> 00:28:04,639
leverage

775
00:28:00,159 --> 00:28:04,640
bad mqtt s3 implementations

776
00:28:05,919 --> 00:28:10,080
now another bad cloud implementation

777
00:28:08,480 --> 00:28:12,760
that we've seen was from eddie max you

778
00:28:10,080 --> 00:28:16,000
can find this paper on our website

779
00:28:12,760 --> 00:28:17,760
labs.beautyfunder.com uh essentially

780
00:28:16,000 --> 00:28:19,679
uh they had a number of vulnerabilities

781
00:28:17,760 --> 00:28:20,559
but the the one that had to do with

782
00:28:19,679 --> 00:28:22,799
cloud

783
00:28:20,559 --> 00:28:24,158
was an unauthenticated remote command

784
00:28:22,799 --> 00:28:26,399
execution

785
00:28:24,159 --> 00:28:28,159
uh because of the way they would change

786
00:28:26,399 --> 00:28:31,039
the password on the device

787
00:28:28,159 --> 00:28:32,640
so when the when the power outlet would

788
00:28:31,039 --> 00:28:36,799
talk to the cloud

789
00:28:32,640 --> 00:28:38,720
um and then with the mobile app

790
00:28:36,799 --> 00:28:40,639
they would need a form of authentication

791
00:28:38,720 --> 00:28:41,600
between them the power outlet and the

792
00:28:40,640 --> 00:28:42,640
mobile app

793
00:28:41,600 --> 00:28:44,639
and the way they would check that

794
00:28:42,640 --> 00:28:46,240
authentication is that they would empty

795
00:28:44,640 --> 00:28:48,880
5 their password

796
00:28:46,240 --> 00:28:49,360
both the mobile app and the device and

797
00:28:48,880 --> 00:28:53,440
then

798
00:28:49,360 --> 00:28:56,639
check if the hash sent by the the phone

799
00:28:53,440 --> 00:28:59,279
is the same with the hash resulted from

800
00:28:56,640 --> 00:29:00,159
mp5 in your local locally stored

801
00:28:59,279 --> 00:29:02,720
password

802
00:29:00,159 --> 00:29:04,799
if the if the hashes match then the

803
00:29:02,720 --> 00:29:07,279
communication is established

804
00:29:04,799 --> 00:29:08,240
now the problem was that the power

805
00:29:07,279 --> 00:29:11,360
outlet was using

806
00:29:08,240 --> 00:29:12,159
the system md5 command or checking that

807
00:29:11,360 --> 00:29:14,399
hash

808
00:29:12,159 --> 00:29:17,200
so if you told the cloud to change the

809
00:29:14,399 --> 00:29:19,439
password to semicolon whatever

810
00:29:17,200 --> 00:29:21,360
then you would get command execution so

811
00:29:19,440 --> 00:29:24,480
as a proof of concept what we've done

812
00:29:21,360 --> 00:29:29,199
was we changed the password to semicolon

813
00:29:24,480 --> 00:29:32,320
uh ftp get a metatrader payload

814
00:29:29,200 --> 00:29:34,640
connect back pentaprinter payload and

815
00:29:32,320 --> 00:29:35,760
execute it and then we send the command

816
00:29:34,640 --> 00:29:37,600
to the cloud

817
00:29:35,760 --> 00:29:39,039
and then we got a connectback shell from

818
00:29:37,600 --> 00:29:41,439
the power outlet

819
00:29:39,039 --> 00:29:43,919
from across the world we did this demo

820
00:29:41,440 --> 00:29:47,120
on at the security conference in china

821
00:29:43,919 --> 00:29:50,000
a few years ago and unfortunately that

822
00:29:47,120 --> 00:29:52,399
password function is hidden

823
00:29:50,000 --> 00:29:53,360
no user changed it to the best of our

824
00:29:52,399 --> 00:29:55,760
knowledge

825
00:29:53,360 --> 00:29:57,600
and the only identifier that you need to

826
00:29:55,760 --> 00:29:59,120
talk to the cloud is the device id which

827
00:29:57,600 --> 00:30:02,158
in this case

828
00:29:59,120 --> 00:30:04,479
was the mac address of the device so

829
00:30:02,159 --> 00:30:08,320
definitely but this was also predictable

830
00:30:04,480 --> 00:30:09,760
brute forceable and they have two slash

831
00:30:08,320 --> 00:30:13,520
16

832
00:30:09,760 --> 00:30:16,559
um well two 16-bit

833
00:30:13,520 --> 00:30:18,559
uh ranges of mac addresses

834
00:30:16,559 --> 00:30:20,639
uh which essentially enables you to kind

835
00:30:18,559 --> 00:30:22,960
of get the root access

836
00:30:20,640 --> 00:30:25,120
on literally all of their devices and i

837
00:30:22,960 --> 00:30:25,840
think that this exploit works to this

838
00:30:25,120 --> 00:30:27,199
day

839
00:30:25,840 --> 00:30:29,439
because even though they issued an

840
00:30:27,200 --> 00:30:31,440
update the update we were not able to

841
00:30:29,440 --> 00:30:34,000
apply it so apparently nobody applied

842
00:30:31,440 --> 00:30:34,000
that update

843
00:30:34,240 --> 00:30:38,960
so moving onwards to guardzilla the

844
00:30:37,440 --> 00:30:42,399
smart security camera

845
00:30:38,960 --> 00:30:45,919
now spoiler alert uh they just

846
00:30:42,399 --> 00:30:46,719
closed shop a few weeks ago as i was

847
00:30:45,919 --> 00:30:50,000
preparing

848
00:30:46,720 --> 00:30:51,600
the presentation for for this conference

849
00:30:50,000 --> 00:30:55,039
so we're probably not going to be able

850
00:30:51,600 --> 00:30:57,279
to see live demos on how to hack these

851
00:30:55,039 --> 00:30:58,320
but i'm going to be able to tell you at

852
00:30:57,279 --> 00:31:00,480
least how

853
00:30:58,320 --> 00:31:01,840
we did hack it uh you know the process

854
00:31:00,480 --> 00:31:05,120
that we went through

855
00:31:01,840 --> 00:31:07,120
what happened and uh well

856
00:31:05,120 --> 00:31:08,879
you know a few details about the

857
00:31:07,120 --> 00:31:10,639
vulnerabilities that we found and how to

858
00:31:08,880 --> 00:31:11,440
exploit them and this is reusable

859
00:31:10,640 --> 00:31:12,880
information

860
00:31:11,440 --> 00:31:14,960
so this is the kind of stuff that you

861
00:31:12,880 --> 00:31:17,360
can actually you know learn from

862
00:31:14,960 --> 00:31:19,760
and then reuse for other research that

863
00:31:17,360 --> 00:31:22,879
you're doing

864
00:31:19,760 --> 00:31:23,440
so we started with analyzing the mobile

865
00:31:22,880 --> 00:31:25,200
app

866
00:31:23,440 --> 00:31:29,919
and we saw that the mobile app talks to

867
00:31:25,200 --> 00:31:33,360
an api endpoint https.godzilla.com

868
00:31:29,919 --> 00:31:34,720
and after we registered uh our initial

869
00:31:33,360 --> 00:31:35,840
account because they required you to

870
00:31:34,720 --> 00:31:39,200
register an account

871
00:31:35,840 --> 00:31:41,039
the app receives a six digit long uid

872
00:31:39,200 --> 00:31:42,080
which would be something called a client

873
00:31:41,039 --> 00:31:46,960
id

874
00:31:42,080 --> 00:31:49,039
and that six digit in our cases was 408

875
00:31:46,960 --> 00:31:52,880
311

876
00:31:49,039 --> 00:31:56,640
so 408 311 was our client

877
00:31:52,880 --> 00:32:00,159
id do you see anything wrong with this

878
00:31:56,640 --> 00:32:03,679
well yes it's a six digit

879
00:32:00,159 --> 00:32:05,840
number fully predictable this means that

880
00:32:03,679 --> 00:32:07,760
the next customer's id is going to be

881
00:32:05,840 --> 00:32:10,799
408 312

882
00:32:07,760 --> 00:32:11,760
and the one after that 408 313. so

883
00:32:10,799 --> 00:32:14,879
essentially

884
00:32:11,760 --> 00:32:18,720
you have a fully predictable range of

885
00:32:14,880 --> 00:32:18,720
client id that you can interact with

886
00:32:19,120 --> 00:32:22,959
and it cannot be changed and it's

887
00:32:21,039 --> 00:32:25,279
implemented by one for each account

888
00:32:22,960 --> 00:32:27,200
so what can you do with this client id

889
00:32:25,279 --> 00:32:28,080
well they have a hard coded password

890
00:32:27,200 --> 00:32:31,840
again the same for

891
00:32:28,080 --> 00:32:34,879
older customers you query the cloud

892
00:32:31,840 --> 00:32:37,519
with the client id and with these

893
00:32:34,880 --> 00:32:37,519
parameters

894
00:32:37,679 --> 00:32:42,240
and then yeah sorry i forgot to mention

895
00:32:40,559 --> 00:32:44,080
that the post requests are encrypted

896
00:32:42,240 --> 00:32:45,600
with aes 256

897
00:32:44,080 --> 00:32:47,120
however the encryption key and the

898
00:32:45,600 --> 00:32:48,879
initialization vector

899
00:32:47,120 --> 00:32:51,199
were hardcoded in the app so you can

900
00:32:48,880 --> 00:32:52,799
essentially replicate the entire mobile

901
00:32:51,200 --> 00:32:55,279
app behavior

902
00:32:52,799 --> 00:32:57,679
however you can also script it into your

903
00:32:55,279 --> 00:33:00,240
favorite python bash whatever

904
00:32:57,679 --> 00:33:02,559
to interact with any of the client ids

905
00:33:00,240 --> 00:33:04,880
that you want so this is what we did

906
00:33:02,559 --> 00:33:06,960
we replicated the entire mobile app

907
00:33:04,880 --> 00:33:10,640
interaction with the api

908
00:33:06,960 --> 00:33:13,440
we used the encryption key and

909
00:33:10,640 --> 00:33:15,200
we started posting uh queries to the

910
00:33:13,440 --> 00:33:20,960
cloud

911
00:33:15,200 --> 00:33:22,880
and this is the reply that we got back

912
00:33:20,960 --> 00:33:24,640
and uh this is replying in a more

913
00:33:22,880 --> 00:33:27,600
beautiful format so

914
00:33:24,640 --> 00:33:28,480
you post the request to the uh guardiola

915
00:33:27,600 --> 00:33:29,678
cloud and you say

916
00:33:28,480 --> 00:33:31,600
tell me all the information that you

917
00:33:29,679 --> 00:33:32,880
have about 408 311

918
00:33:31,600 --> 00:33:34,719
and this is the kind of stuff that you

919
00:33:32,880 --> 00:33:37,519
get back so

920
00:33:34,720 --> 00:33:38,080
this device has two cameras associated

921
00:33:37,519 --> 00:33:39,600
with it

922
00:33:38,080 --> 00:33:41,760
in this case three cameras associated

923
00:33:39,600 --> 00:33:43,120
with it this is the password for each

924
00:33:41,760 --> 00:33:46,960
camera and this is the

925
00:33:43,120 --> 00:33:50,080
device id that long non-predictable

926
00:33:46,960 --> 00:33:50,559
identifier uh that i was mentioning

927
00:33:50,080 --> 00:33:52,960
earlier

928
00:33:50,559 --> 00:33:54,240
for each one of those cameras now what

929
00:33:52,960 --> 00:33:56,320
happened here was that

930
00:33:54,240 --> 00:33:58,080
they use a cloud platform that says

931
00:33:56,320 --> 00:34:01,678
we're going to use the device id

932
00:33:58,080 --> 00:34:03,918
and the password to manage the

933
00:34:01,679 --> 00:34:05,120
manager cameras manage the devices and

934
00:34:03,919 --> 00:34:07,120
then guardilla said

935
00:34:05,120 --> 00:34:09,520
okay and on top of that we're going to

936
00:34:07,120 --> 00:34:13,598
add something called a client id

937
00:34:09,520 --> 00:34:16,480
in this case is the uid the 408 311

938
00:34:13,599 --> 00:34:18,800
and so we can manage multiple cameras

939
00:34:16,480 --> 00:34:20,399
for one custom

940
00:34:18,800 --> 00:34:21,839
so this is what this was one of the

941
00:34:20,399 --> 00:34:24,799
biggest mistakes

942
00:34:21,839 --> 00:34:26,639
because obviously this is predictable so

943
00:34:24,800 --> 00:34:29,040
you see the device ids you see the

944
00:34:26,639 --> 00:34:31,280
password so from this point onwards

945
00:34:29,040 --> 00:34:35,839
you can you know do anything you want

946
00:34:31,280 --> 00:34:35,839
with these cameras

947
00:34:36,480 --> 00:34:40,639
oh yeah so worth mentioning that you can

948
00:34:39,359 --> 00:34:42,799
change the password

949
00:34:40,639 --> 00:34:44,079
uh and some user users do change the

950
00:34:42,800 --> 00:34:46,639
password of the camera

951
00:34:44,079 --> 00:34:48,240
but unfortunately it's useless because

952
00:34:46,639 --> 00:34:49,839
godzilla is just going to keep telling

953
00:34:48,239 --> 00:34:51,678
the attacker this is the password this

954
00:34:49,839 --> 00:34:54,399
is the password this is the password

955
00:34:51,679 --> 00:34:54,800
so no matter what password you set on it

956
00:34:54,399 --> 00:34:56,239
uh

957
00:34:54,800 --> 00:34:58,000
all you have to do is just credit the

958
00:34:56,239 --> 00:34:59,439
guard to the cloud and then it's going

959
00:34:58,000 --> 00:35:03,680
to tell you this is the password that's

960
00:34:59,440 --> 00:35:05,680
being set for this device

961
00:35:03,680 --> 00:35:07,520
so the first thing that we did was okay

962
00:35:05,680 --> 00:35:10,078
how can we do account takeover

963
00:35:07,520 --> 00:35:11,280
there's apis not documented but we found

964
00:35:10,079 --> 00:35:14,640
them anyway

965
00:35:11,280 --> 00:35:15,680
um you can change the email and all you

966
00:35:14,640 --> 00:35:18,720
have to do is just

967
00:35:15,680 --> 00:35:19,839
send the client id and the new email

968
00:35:18,720 --> 00:35:22,480
that you want to

969
00:35:19,839 --> 00:35:24,640
set and this is going to change the

970
00:35:22,480 --> 00:35:25,440
email of the owner of the account and

971
00:35:24,640 --> 00:35:28,480
then just

972
00:35:25,440 --> 00:35:32,000
take over the take over the

973
00:35:28,480 --> 00:35:33,839
account of a customer so

974
00:35:32,000 --> 00:35:36,320
there's no confirmation email sent and

975
00:35:33,839 --> 00:35:38,240
your credentials are invalidated

976
00:35:36,320 --> 00:35:39,760
again the only thing that you need for

977
00:35:38,240 --> 00:35:44,000
this is the uid

978
00:35:39,760 --> 00:35:45,839
that's all the client id

979
00:35:44,000 --> 00:35:48,480
uh we wanted to get access to the video

980
00:35:45,839 --> 00:35:50,880
feeds so initially we

981
00:35:48,480 --> 00:35:52,960
did we did it the hard way we wrote a

982
00:35:50,880 --> 00:35:56,320
client that pipes

983
00:35:52,960 --> 00:35:57,200
the the pipes the the video feed of the

984
00:35:56,320 --> 00:36:00,000
camera

985
00:35:57,200 --> 00:36:01,598
to a local pipe and then you just read

986
00:36:00,000 --> 00:36:03,599
it with vlc

987
00:36:01,599 --> 00:36:05,280
it wasn't beautiful it kind of trashed

988
00:36:03,599 --> 00:36:08,000
but it worked and we

989
00:36:05,280 --> 00:36:09,920
again what you needed as parameters is

990
00:36:08,000 --> 00:36:14,000
the device id and password

991
00:36:09,920 --> 00:36:16,160
which you got from creating the cloud

992
00:36:14,000 --> 00:36:18,000
and then we found an easier way which is

993
00:36:16,160 --> 00:36:19,200
invite somebody to view my camera so

994
00:36:18,000 --> 00:36:21,599
there's this option

995
00:36:19,200 --> 00:36:23,439
in which you can invite somebody to have

996
00:36:21,599 --> 00:36:27,359
access to your security camera

997
00:36:23,440 --> 00:36:30,320
and this is also callable in the api

998
00:36:27,359 --> 00:36:32,560
and the cool thing about is is that

999
00:36:30,320 --> 00:36:34,560
there is no

1000
00:36:32,560 --> 00:36:36,160
notification to the owner that somebody

1001
00:36:34,560 --> 00:36:38,078
has has access to the camera

1002
00:36:36,160 --> 00:36:40,240
there's no notification to the owner

1003
00:36:38,079 --> 00:36:40,800
that somebody was invited to view the

1004
00:36:40,240 --> 00:36:43,759
camera

1005
00:36:40,800 --> 00:36:44,640
or is invited or has access so all you

1006
00:36:43,760 --> 00:36:48,079
have to do is just

1007
00:36:44,640 --> 00:36:50,799
call upon this api invite yourself and

1008
00:36:48,079 --> 00:36:51,599
watch the camera and the owner will have

1009
00:36:50,800 --> 00:36:55,359
no idea

1010
00:36:51,599 --> 00:36:58,000
that this is happening

1011
00:36:55,359 --> 00:36:59,440
so i know that the talk was called

1012
00:36:58,000 --> 00:37:01,839
next-generation botnets

1013
00:36:59,440 --> 00:37:04,320
so let's talk about how to get a root

1014
00:37:01,839 --> 00:37:06,320
shell on these devices

1015
00:37:04,320 --> 00:37:07,839
so first of all we found a buffer

1016
00:37:06,320 --> 00:37:10,800
overflow in the cloud agent

1017
00:37:07,839 --> 00:37:11,119
essentially the cloud agent is provided

1018
00:37:10,800 --> 00:37:14,079
by

1019
00:37:11,119 --> 00:37:14,800
a platform called kali and there's a

1020
00:37:14,079 --> 00:37:16,960
combination of

1021
00:37:14,800 --> 00:37:18,000
peer-to-peer relay savers relay servers

1022
00:37:16,960 --> 00:37:21,599
that are used to bypass

1023
00:37:18,000 --> 00:37:25,760
nat and there's the binary called

1024
00:37:21,599 --> 00:37:28,960
main v5 one or one for that exe

1025
00:37:25,760 --> 00:37:30,160
linux machine that handles a num

1026
00:37:28,960 --> 00:37:32,079
number of service including cloud

1027
00:37:30,160 --> 00:37:35,440
communication so

1028
00:37:32,079 --> 00:37:37,359
in that exe so when we put it into the

1029
00:37:35,440 --> 00:37:41,920
disassembler we saw a function

1030
00:37:37,359 --> 00:37:44,240
called dkc device model request handle

1031
00:37:41,920 --> 00:37:44,960
and uh this was found to be vulnerable

1032
00:37:44,240 --> 00:37:47,439
to an

1033
00:37:44,960 --> 00:37:48,560
out of bandwidth so a specially crafted

1034
00:37:47,440 --> 00:37:50,880
buffer

1035
00:37:48,560 --> 00:37:51,680
sent to the cloud we'll get at rc

1036
00:37:50,880 --> 00:37:55,040
because again

1037
00:37:51,680 --> 00:37:56,799
buffer overflows do not i mean you can

1038
00:37:55,040 --> 00:38:00,640
get rc from buffer versus because

1039
00:37:56,800 --> 00:38:01,359
aslr does not work so what we're doing

1040
00:38:00,640 --> 00:38:04,240
is that

1041
00:38:01,359 --> 00:38:05,680
you can see here in the tk set device

1042
00:38:04,240 --> 00:38:09,680
model request handle

1043
00:38:05,680 --> 00:38:11,440
you can see that there's uh a v28 and

1044
00:38:09,680 --> 00:38:14,799
v29 so these are the

1045
00:38:11,440 --> 00:38:17,839
names that our disassembler gave to the

1046
00:38:14,800 --> 00:38:19,920
to the functions and as a funny story we

1047
00:38:17,839 --> 00:38:21,279
also find on the source code on github

1048
00:38:19,920 --> 00:38:23,280
later on

1049
00:38:21,280 --> 00:38:24,880
with proper names for these but you know

1050
00:38:23,280 --> 00:38:26,720
for the sake of this presentation we're

1051
00:38:24,880 --> 00:38:29,599
going to use v28 and p29

1052
00:38:26,720 --> 00:38:30,480
so we overflow v28 db29 and reach the

1053
00:38:29,599 --> 00:38:34,480
return address

1054
00:38:30,480 --> 00:38:39,599
here and as you can see we have system

1055
00:38:34,480 --> 00:38:39,599
uh so we can just call system from there

1056
00:38:41,040 --> 00:38:47,839
and then this is the the entire exploit

1057
00:38:49,119 --> 00:38:56,079
so all we got to do is just uh

1058
00:38:52,400 --> 00:38:58,160
send this buffer and that's it

1059
00:38:56,079 --> 00:39:00,400
and the main binary is going to crash

1060
00:38:58,160 --> 00:39:02,720
and then well it depends

1061
00:39:00,400 --> 00:39:04,400
each each person can do whatever they

1062
00:39:02,720 --> 00:39:05,680
want in this case we wanted to add

1063
00:39:04,400 --> 00:39:09,040
something to the startup

1064
00:39:05,680 --> 00:39:09,040
we can get a connect back shell

1065
00:39:09,359 --> 00:39:16,078
different things so

1066
00:39:12,560 --> 00:39:19,599
we do have a movie

1067
00:39:16,079 --> 00:39:24,560
because unfortunately right now

1068
00:39:19,599 --> 00:39:29,280
uh the the api is dead

1069
00:39:24,560 --> 00:39:32,320
it's it's so dead that if you

1070
00:39:29,280 --> 00:39:36,560
profiles presentations

1071
00:39:32,320 --> 00:39:36,560
so it's so that that if you try this

1072
00:39:49,440 --> 00:39:58,160
so um we're gonna fall back to movies

1073
00:39:54,880 --> 00:39:58,160
so this is about for overflow

1074
00:39:58,800 --> 00:40:02,400
essentially we're setting up a listener

1075
00:40:04,400 --> 00:40:07,760
we're getting the we're using our own

1076
00:40:06,880 --> 00:40:10,720
script

1077
00:40:07,760 --> 00:40:12,480
that emulates the app to get uh the

1078
00:40:10,720 --> 00:40:13,759
details of the device that we want to

1079
00:40:12,480 --> 00:40:15,520
hack so essentially

1080
00:40:13,760 --> 00:40:17,200
we're asking tell me all the information

1081
00:40:15,520 --> 00:40:18,720
about 408 311

1082
00:40:17,200 --> 00:40:21,040
and then we're getting back okay this is

1083
00:40:18,720 --> 00:40:22,640
the device id 5 pk

1084
00:40:21,040 --> 00:40:25,839
mk and so on and so forth and this is

1085
00:40:22,640 --> 00:40:25,839
the password admin

1086
00:40:26,400 --> 00:40:31,839
and with this information we can just

1087
00:40:28,880 --> 00:40:31,839
tell it okay

1088
00:40:31,920 --> 00:40:36,640
then we have this client which would be

1089
00:40:35,359 --> 00:40:38,640
our exploit that says the buffer

1090
00:40:36,640 --> 00:40:39,839
overflow and this is the command that we

1091
00:40:38,640 --> 00:40:43,359
want executed

1092
00:40:39,839 --> 00:40:48,720
uh create

1093
00:40:43,359 --> 00:40:50,560
a well a net cut connect back shell

1094
00:40:48,720 --> 00:40:53,439
similar to netcat with nk not because

1095
00:40:50,560 --> 00:40:53,440
they don't have netcap

1096
00:40:56,240 --> 00:41:07,839
and there's this is the show that we got

1097
00:41:08,160 --> 00:41:11,598
another rc is a command injection that

1098
00:41:10,079 --> 00:41:12,720
we found in another version of the

1099
00:41:11,599 --> 00:41:15,440
firmware so another

1100
00:41:12,720 --> 00:41:17,279
another one of their cameras essentially

1101
00:41:15,440 --> 00:41:18,560
in the update process they use a system

1102
00:41:17,280 --> 00:41:21,359
command to

1103
00:41:18,560 --> 00:41:22,000
unpack the firmware so we gotta do is

1104
00:41:21,359 --> 00:41:25,040
trick it

1105
00:41:22,000 --> 00:41:27,920
to unpack uh something that has a

1106
00:41:25,040 --> 00:41:27,920
semicolon in it

1107
00:41:36,240 --> 00:41:40,720
unfortunately again we're gonna use

1108
00:41:37,839 --> 00:41:40,720
movies for this

1109
00:41:44,240 --> 00:41:48,560
again the the demos are simulated to be

1110
00:41:46,319 --> 00:41:51,440
fully remote right so all of them

1111
00:41:48,560 --> 00:41:53,119
are designed to pop up connect back

1112
00:41:51,440 --> 00:41:56,800
shells

1113
00:41:53,119 --> 00:42:00,000
so once more we try to get the device id

1114
00:41:56,800 --> 00:42:03,280
by using the get uid script

1115
00:42:00,000 --> 00:42:06,000
we got it it's uh b l e

1116
00:42:03,280 --> 00:42:07,839
m n c i mean it's the password and this

1117
00:42:06,000 --> 00:42:09,599
is the command that we're injecting

1118
00:42:07,839 --> 00:42:12,078
pop center and connect back shell with

1119
00:42:09,599 --> 00:42:12,079
netcat

1120
00:42:12,160 --> 00:42:19,680
and this is a connect back shell

1121
00:42:16,800 --> 00:42:21,520
so this was full this works fully remote

1122
00:42:19,680 --> 00:42:24,399
completely behind

1123
00:42:21,520 --> 00:42:26,400
maybe three four nuts it doesn't matter

1124
00:42:24,400 --> 00:42:30,319
again fully remote

1125
00:42:26,400 --> 00:42:33,280
from any server when when i i did this

1126
00:42:30,319 --> 00:42:34,400
at a previous conference i used a server

1127
00:42:33,280 --> 00:42:37,280
in canada

1128
00:42:34,400 --> 00:42:38,560
and compromised the camera in my hotel

1129
00:42:37,280 --> 00:42:40,240
room

1130
00:42:38,560 --> 00:42:42,560
and the camera in my hotel room was

1131
00:42:40,240 --> 00:42:44,399
behind three routers my own

1132
00:42:42,560 --> 00:42:46,400
router that i use in my hotel room for

1133
00:42:44,400 --> 00:42:49,040
my own private networking there

1134
00:42:46,400 --> 00:42:49,520
and then the hotels router and whatever

1135
00:42:49,040 --> 00:42:52,000
other

1136
00:42:49,520 --> 00:42:53,599
firewall that they had over there so no

1137
00:42:52,000 --> 00:42:55,119
data connection everything relayed by

1138
00:42:53,599 --> 00:42:59,839
the cloud and then a connect back shelf

1139
00:42:55,119 --> 00:42:59,839
from the device to my server in canada

1140
00:43:00,560 --> 00:43:05,119
so unfortunately you're not going to be

1141
00:43:03,119 --> 00:43:08,240
able to try this at home

1142
00:43:05,119 --> 00:43:12,160
because the clothes shop and

1143
00:43:08,240 --> 00:43:14,078
now not only did they close shop um the

1144
00:43:12,160 --> 00:43:16,560
cameras no longer work

1145
00:43:14,079 --> 00:43:18,240
so right now to the best of my knowledge

1146
00:43:16,560 --> 00:43:20,160
there's millions of devices which are

1147
00:43:18,240 --> 00:43:22,640
literally bricked

1148
00:43:20,160 --> 00:43:24,960
and there's there was no notice i looked

1149
00:43:22,640 --> 00:43:26,799
at my customer account with them

1150
00:43:24,960 --> 00:43:30,640
there was no notice nothing whatsoever

1151
00:43:26,800 --> 00:43:30,640
and yeah not a not a good thing

1152
00:43:32,400 --> 00:43:38,319
okay as a bonus um

1153
00:43:35,440 --> 00:43:40,000
as i said earlier s3 is not necessarily

1154
00:43:38,319 --> 00:43:41,680
the best implementation if you don't do

1155
00:43:40,000 --> 00:43:44,480
it properly

1156
00:43:41,680 --> 00:43:46,319
so there was an open s3 bucket in which

1157
00:43:44,480 --> 00:43:49,680
you could see all the recordings of

1158
00:43:46,319 --> 00:43:51,520
all of their customers we were told by

1159
00:43:49,680 --> 00:43:53,440
them that they closed that

1160
00:43:51,520 --> 00:43:55,280
and then while i was doing this

1161
00:43:53,440 --> 00:43:59,280
presentation at

1162
00:43:55,280 --> 00:43:59,760
derbycon somebody in the audience told

1163
00:43:59,280 --> 00:44:01,920
me that

1164
00:43:59,760 --> 00:44:08,000
they were looking at the same thing and

1165
00:44:01,920 --> 00:44:11,280
it's not closed

1166
00:44:08,000 --> 00:44:13,200
so to sum up if

1167
00:44:11,280 --> 00:44:15,280
we have that initially indeed in the

1168
00:44:13,200 --> 00:44:18,879
guardzilla case obviously

1169
00:44:15,280 --> 00:44:20,880
if we have that initial client id

1170
00:44:18,880 --> 00:44:22,160
the client can get all the information

1171
00:44:20,880 --> 00:44:25,359
about all the devices

1172
00:44:22,160 --> 00:44:28,078
associated with that client id and

1173
00:44:25,359 --> 00:44:31,040
that client id is a six digit number

1174
00:44:28,079 --> 00:44:31,040
incremented by one

1175
00:44:32,720 --> 00:44:36,799
and from that point onwards it leads to

1176
00:44:35,040 --> 00:44:39,279
a full account takeover

1177
00:44:36,800 --> 00:44:40,640
uh getting access to view the video feed

1178
00:44:39,280 --> 00:44:41,839
of the device without the owner's

1179
00:44:40,640 --> 00:44:44,000
knowledge

1180
00:44:41,839 --> 00:44:46,000
and multiple remote command executions

1181
00:44:44,000 --> 00:44:47,119
that you can just get connect back shows

1182
00:44:46,000 --> 00:44:49,040
from

1183
00:44:47,119 --> 00:44:50,319
uh and literally you can hack them from

1184
00:44:49,040 --> 00:44:52,240
anywhere in the world

1185
00:44:50,319 --> 00:44:55,680
again without them being directly

1186
00:44:52,240 --> 00:44:58,000
connected or exposed in the internet

1187
00:44:55,680 --> 00:44:58,879
so as takeaways um i think it's worth

1188
00:44:58,000 --> 00:45:01,440
mentioning that

1189
00:44:58,880 --> 00:45:02,880
the iop is a huge attack surface and not

1190
00:45:01,440 --> 00:45:06,400
only that uh

1191
00:45:02,880 --> 00:45:10,560
well many people have no idea

1192
00:45:06,400 --> 00:45:11,119
about the the the problems that lie with

1193
00:45:10,560 --> 00:45:13,839
iot

1194
00:45:11,119 --> 00:45:14,400
it's a nice commodity obviously but

1195
00:45:13,839 --> 00:45:16,319
nobody

1196
00:45:14,400 --> 00:45:17,760
nobody takes the time to kind of do a

1197
00:45:16,319 --> 00:45:18,000
very thorough investigation when they

1198
00:45:17,760 --> 00:45:19,920
get

1199
00:45:18,000 --> 00:45:22,319
their next you know light bulb power

1200
00:45:19,920 --> 00:45:22,960
outlet vacuum cleaner and so on and so

1201
00:45:22,319 --> 00:45:26,160
forth

1202
00:45:22,960 --> 00:45:27,920
and because of cloud you can bypass that

1203
00:45:26,160 --> 00:45:28,640
and you can get root shells in people's

1204
00:45:27,920 --> 00:45:31,119
houses

1205
00:45:28,640 --> 00:45:32,960
right and and it's really scary because

1206
00:45:31,119 --> 00:45:36,240
it can lead to apt you can have a root

1207
00:45:32,960 --> 00:45:38,160
shell in somebody's house for months

1208
00:45:36,240 --> 00:45:39,680
simply because you know they wouldn't

1209
00:45:38,160 --> 00:45:42,560
have they wouldn't know that

1210
00:45:39,680 --> 00:45:44,160
you're present in that small power

1211
00:45:42,560 --> 00:45:45,680
outlet that they have

1212
00:45:44,160 --> 00:45:47,839
whatever the air conditioning connected

1213
00:45:45,680 --> 00:45:49,680
to right there's no indication that

1214
00:45:47,839 --> 00:45:51,920
you're present into their network

1215
00:45:49,680 --> 00:45:52,799
and if you you know if you cover your

1216
00:45:51,920 --> 00:45:55,040
connection

1217
00:45:52,800 --> 00:45:56,640
pretty well if you use let's say an

1218
00:45:55,040 --> 00:45:59,839
amazon

1219
00:45:56,640 --> 00:46:01,200
vps then that connect back shell

1220
00:45:59,839 --> 00:46:03,359
is going to look like a legitimate

1221
00:46:01,200 --> 00:46:05,200
connection to amazon so there's ways and

1222
00:46:03,359 --> 00:46:07,200
ways and ways in which you can cover

1223
00:46:05,200 --> 00:46:11,040
your presence into somebody's house

1224
00:46:07,200 --> 00:46:13,040
and that's a little bit scary right

1225
00:46:11,040 --> 00:46:15,359
so vendors would definitely need to

1226
00:46:13,040 --> 00:46:17,119
enter the product we have periodically

1227
00:46:15,359 --> 00:46:18,400
um when we published our initial

1228
00:46:17,119 --> 00:46:21,839
research on godzilla

1229
00:46:18,400 --> 00:46:23,599
um after trying to reach out to them for

1230
00:46:21,839 --> 00:46:26,799
about a year

1231
00:46:23,599 --> 00:46:29,520
without success they they called me

1232
00:46:26,800 --> 00:46:31,520
so they literally linked up with one of

1233
00:46:29,520 --> 00:46:34,400
our oem people on linkedin

1234
00:46:31,520 --> 00:46:35,200
asked him for my phone number and they

1235
00:46:34,400 --> 00:46:37,280
called me

1236
00:46:35,200 --> 00:46:38,319
the product management director told me

1237
00:46:37,280 --> 00:46:40,480
personally

1238
00:46:38,319 --> 00:46:41,839
asking why we published and said well we

1239
00:46:40,480 --> 00:46:42,960
couldn't reach you here are the emails

1240
00:46:41,839 --> 00:46:44,400
that we sent

1241
00:46:42,960 --> 00:46:46,560
and then they said okay we're gonna do a

1242
00:46:44,400 --> 00:46:47,359
better job at uh at listening to the

1243
00:46:46,560 --> 00:46:50,799
community answer

1244
00:46:47,359 --> 00:46:52,560
great that's really really great um

1245
00:46:50,800 --> 00:46:54,640
but have you done any kind of security

1246
00:46:52,560 --> 00:46:56,319
evaluation before you put the product

1247
00:46:54,640 --> 00:46:58,560
into the market because

1248
00:46:56,319 --> 00:47:00,079
having a predictable client id and so

1249
00:46:58,560 --> 00:47:01,920
many things depending on it

1250
00:47:00,079 --> 00:47:04,720
it's a pretty obvious thing it took us

1251
00:47:01,920 --> 00:47:07,440
five minutes to find to find that out

1252
00:47:04,720 --> 00:47:10,240
and he said that they did and they paid

1253
00:47:07,440 --> 00:47:12,160
a lot of money for that pen test so

1254
00:47:10,240 --> 00:47:13,359
i don't know if he was lying or not or

1255
00:47:12,160 --> 00:47:16,160
the company that they

1256
00:47:13,359 --> 00:47:16,960
got was just sticking some boxes in some

1257
00:47:16,160 --> 00:47:20,078
excel sheets

1258
00:47:16,960 --> 00:47:23,359
doing some automated scans

1259
00:47:20,079 --> 00:47:26,400
but iot uh security is really

1260
00:47:23,359 --> 00:47:28,558
not that difficult so you you

1261
00:47:26,400 --> 00:47:30,240
it's not going to work with just running

1262
00:47:28,559 --> 00:47:32,960
nessus or running you know

1263
00:47:30,240 --> 00:47:34,319
nextpose or acronetics or whatever it's

1264
00:47:32,960 --> 00:47:36,160
not going to work with that but

1265
00:47:34,319 --> 00:47:37,599
all you have to do is just do some very

1266
00:47:36,160 --> 00:47:39,839
simple steps

1267
00:47:37,599 --> 00:47:41,280
like the ones i've outlined in the first

1268
00:47:39,839 --> 00:47:43,599
part of the presentation

1269
00:47:41,280 --> 00:47:45,839
and that's it you're going to find a lot

1270
00:47:43,599 --> 00:47:47,599
of things

1271
00:47:45,839 --> 00:47:49,200
so vendors do need to paint us their

1272
00:47:47,599 --> 00:47:51,599
products properly

1273
00:47:49,200 --> 00:47:53,359
run bug bounty programs there's no

1274
00:47:51,599 --> 00:47:54,000
better way to do security for your

1275
00:47:53,359 --> 00:47:56,160
company

1276
00:47:54,000 --> 00:47:57,839
than bug bounty programs i'm telling you

1277
00:47:56,160 --> 00:48:00,720
this from first time experience i manage

1278
00:47:57,839 --> 00:48:03,200
the one here at bitdefender

1279
00:48:00,720 --> 00:48:06,240
no pentas whatsoever and no pentesting

1280
00:48:03,200 --> 00:48:10,078
company whatsoever could find as much as

1281
00:48:06,240 --> 00:48:10,078
we get from the program

1282
00:48:11,359 --> 00:48:15,119
so as i was saying it's still trivial to

1283
00:48:13,440 --> 00:48:17,760
find our series in iot but

1284
00:48:15,119 --> 00:48:19,040
one thing that's really really important

1285
00:48:17,760 --> 00:48:20,720
is

1286
00:48:19,040 --> 00:48:22,480
listen to the community have a channel

1287
00:48:20,720 --> 00:48:23,759
provisional community can reach out to

1288
00:48:22,480 --> 00:48:26,720
you

1289
00:48:23,760 --> 00:48:28,160
our biggest issue by far was getting a

1290
00:48:26,720 --> 00:48:31,680
hold of somebody that

1291
00:48:28,160 --> 00:48:33,920
says oh thank you for telling us this

1292
00:48:31,680 --> 00:48:36,160
we try to read to write that security ad

1293
00:48:33,920 --> 00:48:38,000
company support at company office that

1294
00:48:36,160 --> 00:48:39,839
company all the spamming emails

1295
00:48:38,000 --> 00:48:42,000
we try to look for contacts about them

1296
00:48:39,839 --> 00:48:44,240
we try to reach out to them on twitter

1297
00:48:42,000 --> 00:48:45,839
we try to reach out to them on linkedin

1298
00:48:44,240 --> 00:48:46,879
and in one case there was

1299
00:48:45,839 --> 00:48:49,359
there was a really really serious

1300
00:48:46,880 --> 00:48:50,720
situation like a really big

1301
00:48:49,359 --> 00:48:53,920
vulnerability

1302
00:48:50,720 --> 00:48:55,439
and um we couldn't disclose it it was

1303
00:48:53,920 --> 00:48:58,000
that bad

1304
00:48:55,440 --> 00:48:58,880
and we even tried to reach out to the to

1305
00:48:58,000 --> 00:49:00,960
the shops

1306
00:48:58,880 --> 00:49:03,440
that were pushing their products right

1307
00:49:00,960 --> 00:49:04,559
so maybe there was a chess bridge out of

1308
00:49:03,440 --> 00:49:07,119
them like that so

1309
00:49:04,559 --> 00:49:09,200
we went that extra mile in trying to get

1310
00:49:07,119 --> 00:49:11,920
in touch with the company

1311
00:49:09,200 --> 00:49:14,078
and it doesn't really work that well so

1312
00:49:11,920 --> 00:49:16,880
definitely as a company you would need

1313
00:49:14,079 --> 00:49:18,800
to have a security contact if it was up

1314
00:49:16,880 --> 00:49:20,319
to me i would talk to lawmakers to make

1315
00:49:18,800 --> 00:49:23,760
sure that no company is

1316
00:49:20,319 --> 00:49:27,359
allowed to operate without a clear

1317
00:49:23,760 --> 00:49:29,599
security contact on their website

1318
00:49:27,359 --> 00:49:30,880
and that's one thing and the second is

1319
00:49:29,599 --> 00:49:33,200
obviously have a proper

1320
00:49:30,880 --> 00:49:34,559
update unattended update mechanism we've

1321
00:49:33,200 --> 00:49:36,879
seen cases in which the company

1322
00:49:34,559 --> 00:49:39,760
responded pushed the update

1323
00:49:36,880 --> 00:49:40,319
but the less than one percent of the

1324
00:49:39,760 --> 00:49:42,240
users

1325
00:49:40,319 --> 00:49:43,359
applied that update so this is very

1326
00:49:42,240 --> 00:49:45,279
important as well

1327
00:49:43,359 --> 00:49:48,000
every everybody has vulnerabilities it's

1328
00:49:45,280 --> 00:49:49,920
a matter of how you find out about them

1329
00:49:48,000 --> 00:49:52,880
and how you can fix them across the

1330
00:49:49,920 --> 00:49:52,880
entire user base

1331
00:49:53,760 --> 00:49:58,640
so this is a slightly desirable mention

1332
00:49:57,440 --> 00:50:01,440
the one that i was telling you about

1333
00:49:58,640 --> 00:50:03,520
earlier when we tried to reach out

1334
00:50:01,440 --> 00:50:04,960
to the company on all the channels

1335
00:50:03,520 --> 00:50:07,920
possible and we

1336
00:50:04,960 --> 00:50:09,599
we couldn't uh we couldn't get to them

1337
00:50:07,920 --> 00:50:11,440
and we also weren't able to talk about

1338
00:50:09,599 --> 00:50:14,079
it because of legal issues

1339
00:50:11,440 --> 00:50:15,200
and the really sad part is that the

1340
00:50:14,079 --> 00:50:19,760
vulnerability is rather

1341
00:50:15,200 --> 00:50:22,879
trivial it can be exploited and

1342
00:50:19,760 --> 00:50:24,559
it's well thankfully we we did get a

1343
00:50:22,880 --> 00:50:27,359
chance we did fine we did get in touch

1344
00:50:24,559 --> 00:50:30,400
with them eventually a few days ago

1345
00:50:27,359 --> 00:50:31,839
so yeah it is closed now but it was

1346
00:50:30,400 --> 00:50:33,599
at least from the moment we found out

1347
00:50:31,839 --> 00:50:37,200
about it a year and a half later

1348
00:50:33,599 --> 00:50:38,480
it was still open so this was my

1349
00:50:37,200 --> 00:50:42,879
presentation

1350
00:50:38,480 --> 00:50:46,079
um this was all done in one take

1351
00:50:42,880 --> 00:50:48,160
so i hope that it it went

1352
00:50:46,079 --> 00:50:49,280
okay i know i kind of stuttered every

1353
00:50:48,160 --> 00:50:51,440
now and then

1354
00:50:49,280 --> 00:50:52,319
i had no idea how this is gonna work at

1355
00:50:51,440 --> 00:50:54,400
this

1356
00:50:52,319 --> 00:50:56,319
obviously i'm used to having an audience

1357
00:50:54,400 --> 00:50:57,760
and kind of interacting with them every

1358
00:50:56,319 --> 00:50:58,720
now and then so it's kind of weird for

1359
00:50:57,760 --> 00:51:01,200
me as well

1360
00:50:58,720 --> 00:51:02,078
this is my first pre-recording talk ever

1361
00:51:01,200 --> 00:51:05,118
so

1362
00:51:02,079 --> 00:51:06,640
uh i thank you all if you watch this uh

1363
00:51:05,119 --> 00:51:08,559
and if you didn't well i thank you

1364
00:51:06,640 --> 00:51:11,520
because that you tried you know

1365
00:51:08,559 --> 00:51:12,960
it props you know thanks for that so you

1366
00:51:11,520 --> 00:51:15,040
can reach out to me this is my email

1367
00:51:12,960 --> 00:51:17,920
address this is my twitter handle

1368
00:51:15,040 --> 00:51:19,359
um my dms are open on twitter so don't

1369
00:51:17,920 --> 00:51:21,920
hesitate if you have any questions

1370
00:51:19,359 --> 00:51:23,920
kind of uh shoot any questions my way i

1371
00:51:21,920 --> 00:51:26,000
will be more than happy to answer

1372
00:51:23,920 --> 00:51:28,319
so thank you for your patience and have

1373
00:51:26,000 --> 00:51:31,359
a great no name khan

1374
00:51:28,319 --> 00:51:32,079
so that was a great talk alex and you

1375
00:51:31,359 --> 00:51:34,400
see

1376
00:51:32,079 --> 00:51:35,280
i'm reading comments on youtube and

1377
00:51:34,400 --> 00:51:37,760
people are like

1378
00:51:35,280 --> 00:51:39,599
so excited about how many scripts and

1379
00:51:37,760 --> 00:51:40,160
how many different ways you've shown on

1380
00:51:39,599 --> 00:51:42,480
your

1381
00:51:40,160 --> 00:51:43,759
during your talk so they like we need

1382
00:51:42,480 --> 00:51:46,880
slides we need to

1383
00:51:43,760 --> 00:51:48,559
see it and read it again like hey

1384
00:51:46,880 --> 00:51:50,319
i hope you'll share slides with us

1385
00:51:48,559 --> 00:51:52,079
because really there's a lot of you know

1386
00:51:50,319 --> 00:51:54,800
details to follow

1387
00:51:52,079 --> 00:51:56,880
um i have a question for you from our

1388
00:51:54,800 --> 00:51:59,200
audience

1389
00:51:56,880 --> 00:52:00,000
that you know some vendors think that

1390
00:51:59,200 --> 00:52:02,799
can they can

1391
00:52:00,000 --> 00:52:03,839
increase security of their software by

1392
00:52:02,800 --> 00:52:06,880
hiding

1393
00:52:03,839 --> 00:52:09,040
algorithms and protocols even if those

1394
00:52:06,880 --> 00:52:10,480
algorithms are well known

1395
00:52:09,040 --> 00:52:12,558
how do you think does it really

1396
00:52:10,480 --> 00:52:15,280
increases the security level

1397
00:52:12,559 --> 00:52:18,319
absolutely not i mean we've had a case

1398
00:52:15,280 --> 00:52:21,200
just recently where a vendor

1399
00:52:18,319 --> 00:52:22,880
had an encryption key hard coded and it

1400
00:52:21,200 --> 00:52:25,439
was the same encryption key across

1401
00:52:22,880 --> 00:52:26,319
all of their devices many millions of

1402
00:52:25,440 --> 00:52:28,800
them

1403
00:52:26,319 --> 00:52:30,319
and their their security mechanism was

1404
00:52:28,800 --> 00:52:32,319
they used drop 13

1405
00:52:30,319 --> 00:52:34,800
to hide the encryption key so obviously

1406
00:52:32,319 --> 00:52:37,920
it was easy to reverse and extracted

1407
00:52:34,800 --> 00:52:39,599
so no definitely obfuscating obfuscation

1408
00:52:37,920 --> 00:52:41,200
or just hiding the encryption keys or

1409
00:52:39,599 --> 00:52:43,920
the sensitive data will not

1410
00:52:41,200 --> 00:52:46,000
is not a protection measure i really

1411
00:52:43,920 --> 00:52:48,880
enjoyed that uh this slide that you

1412
00:52:46,000 --> 00:52:50,480
when you explain that uh software uses

1413
00:52:48,880 --> 00:52:53,440
is hdbc

1414
00:52:50,480 --> 00:52:55,359
like encryption right but the key and

1415
00:52:53,440 --> 00:52:56,319
initial experiment were hardcoded in

1416
00:52:55,359 --> 00:52:59,040
there

1417
00:52:56,319 --> 00:53:02,319
that's our reality right like every day

1418
00:52:59,040 --> 00:53:06,079
like most applications are like that

1419
00:53:02,319 --> 00:53:09,040
awesome uh one personal question

1420
00:53:06,079 --> 00:53:11,280
for you as someone who knows so much

1421
00:53:09,040 --> 00:53:13,599
about security in iot

1422
00:53:11,280 --> 00:53:15,760
do you on your own do you use iot

1423
00:53:13,599 --> 00:53:16,960
devices like smart bulbs or like

1424
00:53:15,760 --> 00:53:20,240
security cameras

1425
00:53:16,960 --> 00:53:23,040
at your home i use

1426
00:53:20,240 --> 00:53:23,040
a google home

1427
00:53:24,240 --> 00:53:31,200
and i think that's it

1428
00:53:27,280 --> 00:53:33,760
i used to have a smart egg carton

1429
00:53:31,200 --> 00:53:34,720
but i decommissioned it a long time ago

1430
00:53:33,760 --> 00:53:38,480
essentially

1431
00:53:34,720 --> 00:53:40,959
um and again that's just me i only use

1432
00:53:38,480 --> 00:53:42,000
devices from vendors that i trust it's

1433
00:53:40,960 --> 00:53:43,920
mostly about

1434
00:53:42,000 --> 00:53:45,920
vendor and how the vendor how i see the

1435
00:53:43,920 --> 00:53:48,160
vendor handling security

1436
00:53:45,920 --> 00:53:49,440
right so right now you trust on the

1437
00:53:48,160 --> 00:53:52,240
google

1438
00:53:49,440 --> 00:53:52,880
well i trust google more than i trust

1439
00:53:52,240 --> 00:53:55,118
some

1440
00:53:52,880 --> 00:53:57,920
no name company that you know that's

1441
00:53:55,119 --> 00:53:59,760
obviously not tricking security properly

1442
00:53:57,920 --> 00:54:01,359
google has privacy issues there's no

1443
00:53:59,760 --> 00:54:04,559
question about that

1444
00:54:01,359 --> 00:54:07,839
uh but on the security side i mean

1445
00:54:04,559 --> 00:54:11,599
they're okay okay

1446
00:54:07,839 --> 00:54:12,799
um okay and you shown this example with

1447
00:54:11,599 --> 00:54:14,640
those cameras

1448
00:54:12,800 --> 00:54:16,160
and you mentioned that the store is

1449
00:54:14,640 --> 00:54:18,879
closed do you think like you are the

1450
00:54:16,160 --> 00:54:18,879
reason of that

1451
00:54:19,280 --> 00:54:23,760
well obviously at some point in their in

1452
00:54:22,160 --> 00:54:24,078
their life cycle they didn't make the

1453
00:54:23,760 --> 00:54:26,079
best

1454
00:54:24,079 --> 00:54:27,520
decisions and that means that the people

1455
00:54:26,079 --> 00:54:29,040
making those decisions may not

1456
00:54:27,520 --> 00:54:30,079
necessarily have been the best people i

1457
00:54:29,040 --> 00:54:32,960
don't want to

1458
00:54:30,079 --> 00:54:34,160
to comment any more than that it's okay

1459
00:54:32,960 --> 00:54:37,200
okay no pressure no

1460
00:54:34,160 --> 00:54:40,319
pressure uh but talking about like

1461
00:54:37,200 --> 00:54:42,319
smart cameras for example um

1462
00:54:40,319 --> 00:54:44,480
they're like uh there are many companies

1463
00:54:42,319 --> 00:54:46,240
that make smart cameras and we know that

1464
00:54:44,480 --> 00:54:48,559
they may be vulnerable like there is a

1465
00:54:46,240 --> 00:54:49,520
history within different companies

1466
00:54:48,559 --> 00:54:52,079
it's pretty much the same

1467
00:54:49,520 --> 00:54:52,400
vulnerabilities right uh who do you

1468
00:54:52,079 --> 00:54:55,520
think

1469
00:54:52,400 --> 00:54:58,400
is responsible for that and users

1470
00:54:55,520 --> 00:54:59,200
that use this kind of devices or

1471
00:54:58,400 --> 00:55:01,119
companies

1472
00:54:59,200 --> 00:55:03,359
that produce this kind of like weak

1473
00:55:01,119 --> 00:55:05,200
security devices

1474
00:55:03,359 --> 00:55:06,880
well as much as much as i would be

1475
00:55:05,200 --> 00:55:10,319
tempted to say

1476
00:55:06,880 --> 00:55:12,880
that it's only the vendor's fault i do

1477
00:55:10,319 --> 00:55:13,520
have i mean obviously you you're gonna

1478
00:55:12,880 --> 00:55:15,280
say

1479
00:55:13,520 --> 00:55:16,880
well it's the vendor's responsibility to

1480
00:55:15,280 --> 00:55:20,559
make secure devices

1481
00:55:16,880 --> 00:55:22,319
but we just encourage them to continue

1482
00:55:20,559 --> 00:55:25,119
having bad practices

1483
00:55:22,319 --> 00:55:26,079
by not challenging those bad practices

1484
00:55:25,119 --> 00:55:28,799
we continue to

1485
00:55:26,079 --> 00:55:30,240
back to buy cheap and bad stuff we

1486
00:55:28,799 --> 00:55:32,799
continue to accept

1487
00:55:30,240 --> 00:55:35,040
cheap and bad security practices and

1488
00:55:32,799 --> 00:55:36,240
that's on us as well we shouldn't allow

1489
00:55:35,040 --> 00:55:37,920
this kind of behavior

1490
00:55:36,240 --> 00:55:39,919
we shouldn't allow this kind of practice

1491
00:55:37,920 --> 00:55:41,680
we shouldn't allow companies to operate

1492
00:55:39,920 --> 00:55:44,400
with such negligence about how they

1493
00:55:41,680 --> 00:55:47,200
treat security of the devices

1494
00:55:44,400 --> 00:55:48,880
yeah i agree and even after incidents

1495
00:55:47,200 --> 00:55:52,000
like people just continue

1496
00:55:48,880 --> 00:55:54,720
buying these things because you know

1497
00:55:52,000 --> 00:55:55,760
i agree i agree totally on this topic

1498
00:55:54,720 --> 00:55:59,118
another question

1499
00:55:55,760 --> 00:56:01,839
do you think um if obligatory

1500
00:55:59,119 --> 00:56:02,640
security is a certification for iot

1501
00:56:01,839 --> 00:56:05,279
devices

1502
00:56:02,640 --> 00:56:07,279
will be useful and will make make things

1503
00:56:05,280 --> 00:56:10,640
better

1504
00:56:07,280 --> 00:56:13,280
um in short no what i would want to say

1505
00:56:10,640 --> 00:56:15,680
is of an obligat is an obligation for

1506
00:56:13,280 --> 00:56:18,000
companies to have a security contact

1507
00:56:15,680 --> 00:56:20,399
and something like an sla to answer and

1508
00:56:18,000 --> 00:56:22,480
transparency in vulnerability management

1509
00:56:20,400 --> 00:56:24,160
that's the solution to the problem the

1510
00:56:22,480 --> 00:56:26,559
the certifications

1511
00:56:24,160 --> 00:56:27,279
much like most other certifications in

1512
00:56:26,559 --> 00:56:29,680
this planet

1513
00:56:27,280 --> 00:56:31,040
on this planet are subjective they can

1514
00:56:29,680 --> 00:56:33,040
be corrupted

1515
00:56:31,040 --> 00:56:34,079
you know some certification institution

1516
00:56:33,040 --> 00:56:36,480
may be

1517
00:56:34,079 --> 00:56:37,839
more easy going than others that might

1518
00:56:36,480 --> 00:56:40,160
not be as rigorous

1519
00:56:37,839 --> 00:56:44,000
i mean let's face it our secretary from

1520
00:56:40,160 --> 00:56:46,319
our spanish office passed the ceh exam

1521
00:56:44,000 --> 00:56:47,920
right and she wasn't not necessarily the

1522
00:56:46,319 --> 00:56:50,960
the most skilled of hackers

1523
00:56:47,920 --> 00:56:51,839
so certification can be can be can be

1524
00:56:50,960 --> 00:56:54,559
subject to

1525
00:56:51,839 --> 00:56:56,400
sort of corruption too much you know

1526
00:56:54,559 --> 00:56:58,640
lenience and stuff like that

1527
00:56:56,400 --> 00:57:00,079
but definitely companies if they have a

1528
00:56:58,640 --> 00:57:01,920
security contact

1529
00:57:00,079 --> 00:57:03,760
and if they transparently manage their

1530
00:57:01,920 --> 00:57:05,920
vulnerabilities

1531
00:57:03,760 --> 00:57:08,160
then that is going to make literally

1532
00:57:05,920 --> 00:57:10,319
make the world a better place worldwide

1533
00:57:08,160 --> 00:57:13,839
i think it has a security worldwide but

1534
00:57:10,319 --> 00:57:13,839
so few companies do this

1535
00:57:14,640 --> 00:57:19,520
make the world make a world the better

1536
00:57:16,880 --> 00:57:19,520
place yeah

1537
00:57:22,000 --> 00:57:28,000
yeah indeed indeed like wipes okay

1538
00:57:25,200 --> 00:57:30,480
uh thank you we have like a technical

1539
00:57:28,000 --> 00:57:33,599
question regarding your slides

1540
00:57:30,480 --> 00:57:35,680
uh people notice that many devices like

1541
00:57:33,599 --> 00:57:36,079
comedy application mobile applications

1542
00:57:35,680 --> 00:57:40,078
use

1543
00:57:36,079 --> 00:57:42,799
post requests from your experience

1544
00:57:40,079 --> 00:57:44,000
uh is it like the most popular type of

1545
00:57:42,799 --> 00:57:45,759
requests

1546
00:57:44,000 --> 00:57:47,119
if i understood the question correctly

1547
00:57:45,760 --> 00:57:50,720
or maybe

1548
00:57:47,119 --> 00:57:55,359
they get uh in

1549
00:57:50,720 --> 00:57:58,319
options are mostly used to something

1550
00:57:55,359 --> 00:57:58,799
well the reason for for for that is that

1551
00:57:58,319 --> 00:58:01,520
most

1552
00:57:58,799 --> 00:58:02,079
most mobile apps tap into apis and it's

1553
00:58:01,520 --> 00:58:05,280
usually

1554
00:58:02,079 --> 00:58:07,680
json uh posts right

1555
00:58:05,280 --> 00:58:09,359
so you usually just follow up on the api

1556
00:58:07,680 --> 00:58:10,399
and then within a json you just send the

1557
00:58:09,359 --> 00:58:13,359
json and that's

1558
00:58:10,400 --> 00:58:14,799
done with the post method uh but we've

1559
00:58:13,359 --> 00:58:18,400
seen gets and posts

1560
00:58:14,799 --> 00:58:19,440
maybe not equally because of this api i

1561
00:58:18,400 --> 00:58:22,160
think because it's it's

1562
00:58:19,440 --> 00:58:25,280
it's calling up on an api but that's the

1563
00:58:22,160 --> 00:58:25,279
message used by the api

1564
00:58:25,440 --> 00:58:28,480
okay well from from my personal

1565
00:58:27,440 --> 00:58:31,040
experience

1566
00:58:28,480 --> 00:58:33,119
i see that post request is used a lot

1567
00:58:31,040 --> 00:58:36,000
indeed just because it's like you know

1568
00:58:33,119 --> 00:58:37,680
oh sometimes i really like when email

1569
00:58:36,000 --> 00:58:40,319
and password are sent as

1570
00:58:37,680 --> 00:58:42,799
url parameters and get requests just

1571
00:58:40,319 --> 00:58:45,359
just because

1572
00:58:42,799 --> 00:58:46,559
yeah life happens do you remember a

1573
00:58:45,359 --> 00:58:50,319
story about

1574
00:58:46,559 --> 00:58:52,079
rental car in california mountains

1575
00:58:50,319 --> 00:58:53,680
so there was a story about people who

1576
00:58:52,079 --> 00:58:54,640
rented a car and they went to the

1577
00:58:53,680 --> 00:58:56,720
mountains

1578
00:58:54,640 --> 00:58:58,558
and then in you know in mountains the

1579
00:58:56,720 --> 00:59:00,640
infant connection is not the best

1580
00:58:58,559 --> 00:59:02,880
and they needed to have this um mobile

1581
00:59:00,640 --> 00:59:04,640
application to enable the car

1582
00:59:02,880 --> 00:59:06,640
and the car needed to connect to the

1583
00:59:04,640 --> 00:59:08,879
cloud service so long-term connections

1584
00:59:06,640 --> 00:59:12,160
the car can't connect to cloud service

1585
00:59:08,880 --> 00:59:14,240
and they they can't start a car

1586
00:59:12,160 --> 00:59:16,799
and they can't go like away from the

1587
00:59:14,240 --> 00:59:16,799
mountains

1588
00:59:20,000 --> 00:59:24,160
yeah they basically stuck and they

1589
00:59:21,760 --> 00:59:28,000
needed to call they called as a rental

1590
00:59:24,160 --> 00:59:31,680
but no help and they needed to call the

1591
00:59:28,000 --> 00:59:33,440
like the evacuator car to to get them to

1592
00:59:31,680 --> 00:59:36,480
the area with internet connection

1593
00:59:33,440 --> 00:59:38,079
do you think this is like these things

1594
00:59:36,480 --> 00:59:40,160
will happen more often

1595
00:59:38,079 --> 00:59:41,200
because we will have all these smart

1596
00:59:40,160 --> 00:59:44,160
devices not even

1597
00:59:41,200 --> 00:59:46,160
cars smart kettles or smart fridges or

1598
00:59:44,160 --> 00:59:47,520
do you think we'll handle this issue

1599
00:59:46,160 --> 00:59:50,000
somehow

1600
00:59:47,520 --> 00:59:52,079
well this is a twofold answer first of

1601
00:59:50,000 --> 00:59:53,839
all i wouldn't stop putting cloud

1602
00:59:52,079 --> 00:59:55,440
enabled services in the car just because

1603
00:59:53,839 --> 00:59:57,040
there's no signal

1604
00:59:55,440 --> 00:59:59,520
i would use this as an incentive to have

1605
00:59:57,040 --> 01:00:03,119
better signal everywhere

1606
00:59:59,520 --> 01:00:05,839
first of all okay makes sense

1607
01:00:03,119 --> 01:00:07,359
uh but second to that obviously

1608
01:00:05,839 --> 01:00:08,960
everything is gonna become connected

1609
01:00:07,359 --> 01:00:09,440
especially with the 5g coming on you

1610
01:00:08,960 --> 01:00:10,799
know

1611
01:00:09,440 --> 01:00:12,960
everything will become connected you

1612
01:00:10,799 --> 01:00:14,000
know this table this chair everything is

1613
01:00:12,960 --> 01:00:17,280
going to become connected

1614
01:00:14,000 --> 01:00:19,359
for telemetry user statistics uh

1615
01:00:17,280 --> 01:00:21,119
you know reports to the end user you

1616
01:00:19,359 --> 01:00:22,480
have this health issue not this

1617
01:00:21,119 --> 01:00:24,240
so everything everything is going to

1618
01:00:22,480 --> 01:00:24,799
become connected and they all really are

1619
01:00:24,240 --> 01:00:26,959
i mean

1620
01:00:24,799 --> 01:00:29,200
we're there already kettles they're

1621
01:00:26,960 --> 01:00:29,920
connected smart coffee makers all that

1622
01:00:29,200 --> 01:00:32,000
stuff right

1623
01:00:29,920 --> 01:00:33,359
there's even a smart yoga mat smart

1624
01:00:32,000 --> 01:00:35,680
pillows smart beds

1625
01:00:33,359 --> 01:00:36,720
everything has started to become smart

1626
01:00:35,680 --> 01:00:38,399
and in some cases

1627
01:00:36,720 --> 01:00:41,118
there's not even an option to buy a dumb

1628
01:00:38,400 --> 01:00:43,119
one i mean if you look at the smart tvs

1629
01:00:41,119 --> 01:00:44,559
all of the tvs are smart now right you

1630
01:00:43,119 --> 01:00:46,400
look at the printer

1631
01:00:44,559 --> 01:00:47,760
or network connected now so so there's

1632
01:00:46,400 --> 01:00:50,799
no more an option to get

1633
01:00:47,760 --> 01:00:52,640
non-smart devices so yes definitely

1634
01:00:50,799 --> 01:00:55,040
the the whole the whole buzz would be

1635
01:00:52,640 --> 01:00:55,759
enhanced with an enhanced number of iot

1636
01:00:55,040 --> 01:00:57,839
devices

1637
01:00:55,760 --> 01:00:59,280
30 billion 50 billion blah blah blah

1638
01:00:57,839 --> 01:01:02,558
it's not fake news it's

1639
01:00:59,280 --> 01:01:04,960
that's that's how it's gonna be so

1640
01:01:02,559 --> 01:01:06,640
if a person would like to you know to

1641
01:01:04,960 --> 01:01:07,440
hide somewhere from all these smart

1642
01:01:06,640 --> 01:01:09,440
devices

1643
01:01:07,440 --> 01:01:11,280
they can do it and like living on this

1644
01:01:09,440 --> 01:01:13,920
rock and that's the only option

1645
01:01:11,280 --> 01:01:15,839
like in an island and that's the only

1646
01:01:13,920 --> 01:01:16,319
option we have because people in cities

1647
01:01:15,839 --> 01:01:18,400
that's

1648
01:01:16,319 --> 01:01:20,480
they will communicate with all the smart

1649
01:01:18,400 --> 01:01:23,839
devices whether they want it or not

1650
01:01:20,480 --> 01:01:25,680
right yeah and yes you have to take into

1651
01:01:23,839 --> 01:01:27,920
account uh

1652
01:01:25,680 --> 01:01:29,919
third-party threats right i mean okay

1653
01:01:27,920 --> 01:01:30,720
i'm not i'm not using a smart device but

1654
01:01:29,920 --> 01:01:32,960
you are

1655
01:01:30,720 --> 01:01:34,160
and you are next to me that exposes me

1656
01:01:32,960 --> 01:01:37,280
as well so it's gonna be

1657
01:01:34,160 --> 01:01:39,920
very difficult to run away from that

1658
01:01:37,280 --> 01:01:40,799
okay that that this is a very you know

1659
01:01:39,920 --> 01:01:44,240
dark

1660
01:01:40,799 --> 01:01:46,960
and dystopian kind of future not this is

1661
01:01:44,240 --> 01:01:49,598
reality right now

1662
01:01:46,960 --> 01:01:50,880
don't forget we already have this 2020

1663
01:01:49,599 --> 01:01:54,000
no don't make things

1664
01:01:50,880 --> 01:01:56,000
worse by saying that

1665
01:01:54,000 --> 01:01:57,280
thank you i just wanted to say thank you

1666
01:01:56,000 --> 01:01:59,119
for for your time

1667
01:01:57,280 --> 01:02:00,720
and for the talk and for the question

1668
01:01:59,119 --> 01:02:05,359
that was really cool

1669
01:02:00,720 --> 01:02:05,359
my pleasure anytime thank you

