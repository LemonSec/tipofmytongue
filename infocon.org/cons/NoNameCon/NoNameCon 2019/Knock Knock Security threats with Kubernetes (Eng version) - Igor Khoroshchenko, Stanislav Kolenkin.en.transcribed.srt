1
00:00:03,770 --> 00:00:11,250
yuck neighbor of Tecate dynamo plastic

2
00:00:07,799 --> 00:00:14,420
how to avoid losing date and your

3
00:00:11,250 --> 00:00:18,750
plaster on the cluster itself we have

4
00:00:14,420 --> 00:00:22,970
stanislav the ranking from sub 74

5
00:00:18,750 --> 00:00:22,970
corrosion cut from a bomb here welcome

6
00:00:26,570 --> 00:00:32,430
welcome everybody

7
00:00:29,029 --> 00:00:35,519
as you know we will be talking about

8
00:00:32,430 --> 00:00:38,489
threats related to kubernetes

9
00:00:35,519 --> 00:00:39,900
and why have agenda here because we have

10
00:00:38,489 --> 00:00:44,159
quite interesting students we would like

11
00:00:39,900 --> 00:00:49,979
to share with you and now how did we get

12
00:00:44,159 --> 00:00:53,159
to this subject we thought that we have

13
00:00:49,979 --> 00:00:55,949
to catch those threats to look for them

14
00:00:53,159 --> 00:00:58,229
every day to show that information and

15
00:00:55,949 --> 00:01:03,869
to patch some holes as soon as possible

16
00:00:58,229 --> 00:01:06,960
but in our mind it did look like that

17
00:01:03,869 --> 00:01:13,140
but in most cases it may actually look a

18
00:01:06,960 --> 00:01:16,110
bit different because it's difficult for

19
00:01:13,140 --> 00:01:17,550
people to grasp some information I have

20
00:01:16,110 --> 00:01:22,050
been faced with security issue when

21
00:01:17,550 --> 00:01:24,840
working with kubernetes based project

22
00:01:22,050 --> 00:01:26,429
and there was a HIPAA or get within the

23
00:01:24,840 --> 00:01:29,490
project and there are many things which

24
00:01:26,430 --> 00:01:31,530
I realized back then and I was faced

25
00:01:29,490 --> 00:01:33,000
with these things and I was shown why we

26
00:01:31,530 --> 00:01:34,650
haven't passed that all these

27
00:01:33,000 --> 00:01:36,840
successfully after that I stopped to pay

28
00:01:34,650 --> 00:01:38,310
attention to the things and sharing my

29
00:01:36,840 --> 00:01:40,080
experience with friends and colleagues

30
00:01:38,310 --> 00:01:41,550
and present at conferences and most

31
00:01:40,080 --> 00:01:43,408
interestingly after each and every

32
00:01:41,550 --> 00:01:45,210
conference you would tell people about

33
00:01:43,409 --> 00:01:46,920
something usual practical cases how

34
00:01:45,210 --> 00:01:49,169
things were hard without the fine

35
00:01:46,920 --> 00:01:51,930
nuances why did it happen and so on but

36
00:01:49,170 --> 00:01:53,729
after that there are only few people who

37
00:01:51,930 --> 00:01:55,380
start changing something and paying

38
00:01:53,729 --> 00:01:57,810
attention to some things and since

39
00:01:55,380 --> 00:02:00,229
cabinets have been becoming more popular

40
00:01:57,810 --> 00:02:03,590
the issues have been more relevant

41
00:02:00,229 --> 00:02:05,810
nowadays so

42
00:02:03,590 --> 00:02:07,850
presentation is structured in such a way

43
00:02:05,810 --> 00:02:10,819
that will tell you a bit about the

44
00:02:07,850 --> 00:02:13,690
history how did we get to this point and

45
00:02:10,818 --> 00:02:16,429
this is one of the first parts

46
00:02:13,690 --> 00:02:18,769
previously and now monolithic

47
00:02:16,430 --> 00:02:20,480
applications were used it's like one big

48
00:02:18,769 --> 00:02:22,099
application working on some running on

49
00:02:20,480 --> 00:02:23,720
some server and we know for sure that

50
00:02:22,099 --> 00:02:26,869
that application works on this several

51
00:02:23,720 --> 00:02:31,370
we know which forced open how to check a

52
00:02:26,870 --> 00:02:32,890
TRO to open and so on when people

53
00:02:31,370 --> 00:02:37,370
started switching to multi

54
00:02:32,890 --> 00:02:38,899
micro-services containers Dockers we

55
00:02:37,370 --> 00:02:40,549
have been getting more and more

56
00:02:38,900 --> 00:02:42,230
components for application and all of

57
00:02:40,549 --> 00:02:44,180
those components have been talking to

58
00:02:42,230 --> 00:02:46,130
each other using West's API often over

59
00:02:44,180 --> 00:02:48,019
the network and there is Network into a

60
00:02:46,130 --> 00:02:50,900
connection and there are more and more

61
00:02:48,019 --> 00:02:52,459
components they have scaled up they may

62
00:02:50,900 --> 00:02:54,560
be working in different nodes nodes are

63
00:02:52,459 --> 00:02:57,230
creating dynamically so you have to open

64
00:02:54,560 --> 00:02:58,489
pores how to check how to implement

65
00:02:57,230 --> 00:03:00,379
those checks how to check our

66
00:02:58,489 --> 00:03:03,879
infrastructure infrastructure is growing

67
00:03:00,379 --> 00:03:03,879
and the number of components is growing

68
00:03:04,690 --> 00:03:11,959
then when we got micro service we deploy

69
00:03:08,870 --> 00:03:15,079
and one node then we get those

70
00:03:11,959 --> 00:03:17,030
additional nodes and you have to manage

71
00:03:15,079 --> 00:03:20,959
all these things and there are kiss

72
00:03:17,030 --> 00:03:22,910
traitors Cuban Edison docker swarm which

73
00:03:20,959 --> 00:03:24,799
made our life a bit easier but until we

74
00:03:22,910 --> 00:03:26,870
have to control these things like which

75
00:03:24,799 --> 00:03:30,650
ports open world how to open them and

76
00:03:26,870 --> 00:03:36,079
after that nowadays there was a trend

77
00:03:30,650 --> 00:03:38,569
towards multi-cloud one the so-called

78
00:03:36,079 --> 00:03:40,760
cloud agnostics occasions because now

79
00:03:38,569 --> 00:03:43,339
when we deploy our solution to some

80
00:03:40,760 --> 00:03:46,040
particular cloud one cloned the new

81
00:03:43,340 --> 00:03:47,810
trend is that we should not be dependent

82
00:03:46,040 --> 00:03:51,349
on any one cloud so that we would be

83
00:03:47,810 --> 00:03:53,030
able to easily migrate dirt or debris

84
00:03:51,349 --> 00:03:55,069
essence on and each and every case has

85
00:03:53,030 --> 00:03:57,760
their own fans the boss security have to

86
00:03:55,069 --> 00:03:57,760
understand dolls

87
00:04:00,950 --> 00:04:07,200
world is changing and we are getting

88
00:04:04,260 --> 00:04:09,329
recitation of what we have to distribute

89
00:04:07,200 --> 00:04:10,950
resources in an organized way please

90
00:04:09,330 --> 00:04:14,090
they would have some hardware and

91
00:04:10,950 --> 00:04:16,440
monolithic application know we would

92
00:04:14,090 --> 00:04:18,899
restrict some cause those environments

93
00:04:16,440 --> 00:04:20,730
and applications now you may see

94
00:04:18,899 --> 00:04:22,440
thousands of applications on any one

95
00:04:20,730 --> 00:04:24,060
server and there would be relatively

96
00:04:22,440 --> 00:04:24,469
protected if you do things in the right

97
00:04:24,060 --> 00:04:27,690
way

98
00:04:24,470 --> 00:04:31,770
containers and several ways things are

99
00:04:27,690 --> 00:04:34,080
always features a big have appealed and

100
00:04:31,770 --> 00:04:40,409
they will be used over some period of

101
00:04:34,080 --> 00:04:42,180
time and currently on one hand those

102
00:04:40,410 --> 00:04:44,130
functions make it easier to deploy the

103
00:04:42,180 --> 00:04:47,880
code we don't have to think anymore how

104
00:04:44,130 --> 00:04:50,520
to assemble there was this code and we

105
00:04:47,880 --> 00:04:52,740
have to deploy it and this is deployed

106
00:04:50,520 --> 00:04:54,479
through a provider and you get rid of

107
00:04:52,740 --> 00:04:57,630
some of the tasks but still we have to

108
00:04:54,479 --> 00:04:59,909
think about security is anybody able to

109
00:04:57,630 --> 00:05:03,000
get access to those resources and so on

110
00:04:59,910 --> 00:05:05,750
and cases like that even now we will be

111
00:05:03,000 --> 00:05:09,660
sharing links to presentations and

112
00:05:05,750 --> 00:05:11,880
people for whom we have great respect

113
00:05:09,660 --> 00:05:14,460
and we do value their contribution to

114
00:05:11,880 --> 00:05:20,250
educating more people and spreading

115
00:05:14,460 --> 00:05:24,870
their ideas switching from monolithic

116
00:05:20,250 --> 00:05:28,289
applications to containers our uncle

117
00:05:24,870 --> 00:05:30,690
presented with Kabletown in 2018 he

118
00:05:28,289 --> 00:05:34,830
would be able to tell better about these

119
00:05:30,690 --> 00:05:36,650
things there have been a number of

120
00:05:34,830 --> 00:05:40,690
orchestrators of containers like

121
00:05:36,650 --> 00:05:44,400
kubernetes measures because swarm

122
00:05:40,690 --> 00:05:49,090
Rancho using the same kubernetes and

123
00:05:44,400 --> 00:05:53,469
Amazon SES terrible Metis management

124
00:05:49,090 --> 00:05:56,229
services like gta's aks and so on they

125
00:05:53,470 --> 00:05:57,760
make our life easier and we just say we

126
00:05:56,230 --> 00:06:00,040
want to get the kubernetes cost around

127
00:05:57,760 --> 00:06:02,980
three minutes and do God in GK that

128
00:06:00,040 --> 00:06:05,620
kubernetes cluster with ready-made

129
00:06:02,980 --> 00:06:12,400
configuration indeed we will not have

130
00:06:05,620 --> 00:06:14,380
access to master node but here in this

131
00:06:12,400 --> 00:06:16,780
picture you say master node showed in

132
00:06:14,380 --> 00:06:20,260
blue and we we don't have access to that

133
00:06:16,780 --> 00:06:21,969
master node it's managed by Google

134
00:06:20,260 --> 00:06:24,280
itself all the other sense all the other

135
00:06:21,970 --> 00:06:27,310
nodes where our containers are running

136
00:06:24,280 --> 00:06:29,140
we can enter them we can see them we can

137
00:06:27,310 --> 00:06:32,380
even change something there but this is

138
00:06:29,140 --> 00:06:34,360
a nice case because this is the whole

139
00:06:32,380 --> 00:06:40,659
infrastructure being managed by Google

140
00:06:34,360 --> 00:06:43,180
itself say double yes waw yes and some

141
00:06:40,660 --> 00:06:45,190
their updates and fixes and in JK they

142
00:06:43,180 --> 00:06:49,450
can be applied automatically dynamically

143
00:06:45,190 --> 00:06:51,940
and again in JK as I say I want to have

144
00:06:49,450 --> 00:06:54,670
this mentor for say I set the check mark

145
00:06:51,940 --> 00:06:57,130
and the optional for them network

146
00:06:54,670 --> 00:07:00,220
policies on one a deploy your own to the

147
00:06:57,130 --> 00:07:02,950
lettuce pastor you have to have better

148
00:07:00,220 --> 00:07:04,870
knowledge to set up these things how to

149
00:07:02,950 --> 00:07:08,560
generate certificates for those nodes

150
00:07:04,870 --> 00:07:10,510
how how to set up network policies how

151
00:07:08,560 --> 00:07:12,700
to set this this things up in such a way

152
00:07:10,510 --> 00:07:14,530
that broad metadata metadata from our

153
00:07:12,700 --> 00:07:18,060
containers would be intercepted and

154
00:07:14,530 --> 00:07:21,580
there would be no access from containers

155
00:07:18,060 --> 00:07:24,820
to get metadata for a provider this is

156
00:07:21,580 --> 00:07:26,469
one of the cases where we can enter that

157
00:07:24,820 --> 00:07:28,000
container over schedule get metadata

158
00:07:26,470 --> 00:07:29,980
including called industry time the

159
00:07:28,000 --> 00:07:33,280
initialization token and then we go

160
00:07:29,980 --> 00:07:34,780
along the chain and then JK you just set

161
00:07:33,280 --> 00:07:38,559
up on check mark it's not about the

162
00:07:34,780 --> 00:07:40,530
management service you you just have to

163
00:07:38,560 --> 00:07:43,380
do it on your own

164
00:07:40,530 --> 00:07:44,940
maybe we are talking a bit too fast but

165
00:07:43,380 --> 00:07:46,080
after a conference if you have any

166
00:07:44,940 --> 00:07:52,020
questions we will tell you in more

167
00:07:46,080 --> 00:07:53,919
detail about these things in this

168
00:07:52,020 --> 00:07:55,340
picture we would like to show a thread

169
00:07:53,920 --> 00:07:58,170
[Music]

170
00:07:55,340 --> 00:08:00,510
around public clouds about your

171
00:07:58,170 --> 00:08:02,550
environments here we can see that the

172
00:08:00,510 --> 00:08:08,659
different types of attacks for example

173
00:08:02,550 --> 00:08:12,210
your data storage your users and

174
00:08:08,660 --> 00:08:17,100
computing computing resources you own

175
00:08:12,210 --> 00:08:19,799
our subject to those attacks what to do

176
00:08:17,100 --> 00:08:23,030
about your your cloud yeah we'll talk

177
00:08:19,800 --> 00:08:23,030
about it in under defense

178
00:08:33,559 --> 00:08:41,968
together the general picture will look

179
00:08:37,740 --> 00:08:44,039
at this report of this year where a

180
00:08:41,969 --> 00:08:47,010
couple thousand people were interviewed

181
00:08:44,039 --> 00:08:48,959
and most concerns were about security

182
00:08:47,010 --> 00:08:51,300
for cabinets and containers as such and

183
00:08:48,959 --> 00:08:53,459
only 7% of people are currently sure

184
00:08:51,300 --> 00:08:57,870
that their infrastructure is in good

185
00:08:53,459 --> 00:08:58,670
working water and that's why they're

186
00:08:57,870 --> 00:09:02,750
here

187
00:08:58,670 --> 00:09:06,060
why cabinets kubernetes is currently

188
00:09:02,750 --> 00:09:08,040
becoming a standard for August among

189
00:09:06,060 --> 00:09:10,890
orchestrators on the global scale there

190
00:09:08,040 --> 00:09:12,449
was a huge number of deployments it has

191
00:09:10,890 --> 00:09:14,689
huge community and it has been

192
00:09:12,450 --> 00:09:17,490
developing in a dynamic way and

193
00:09:14,690 --> 00:09:19,560
respectively more and more people have

194
00:09:17,490 --> 00:09:22,080
been using it have been deploying it

195
00:09:19,560 --> 00:09:23,640
some people deploy it on their own some

196
00:09:22,080 --> 00:09:25,709
of them use management management

197
00:09:23,640 --> 00:09:27,480
services and the key problem is when

198
00:09:25,709 --> 00:09:28,859
people deploy their own key but not as

199
00:09:27,480 --> 00:09:32,160
posture without understand what exactly

200
00:09:28,860 --> 00:09:36,020
they are doing it looks like this slide

201
00:09:32,160 --> 00:09:38,250
like tonight you're told

202
00:09:36,020 --> 00:09:39,810
tomorrow morning we have to have a key

203
00:09:38,250 --> 00:09:42,570
but not as kloster for us to be able to

204
00:09:39,810 --> 00:09:46,890
use it yeah we open documentation how to

205
00:09:42,570 --> 00:09:49,350
deploy it we deploy it using some

206
00:09:46,890 --> 00:09:53,610
options but nobody thinks about security

207
00:09:49,350 --> 00:09:56,040
issues also nobody thinks about and know

208
00:09:53,610 --> 00:09:58,260
where this is general picture about what

209
00:09:56,040 --> 00:10:01,890
our security controls by and large to be

210
00:09:58,260 --> 00:10:03,839
monitored to be change and corrected

211
00:10:01,890 --> 00:10:07,020
anytime you have any changes made to

212
00:10:03,839 --> 00:10:09,120
your infrastructure 2010 2018 it is

213
00:10:07,020 --> 00:10:10,920
still relevant now and it will remain

214
00:10:09,120 --> 00:10:12,990
relevant because not many experts

215
00:10:10,920 --> 00:10:18,020
nowadays are able to properly deploy the

216
00:10:12,990 --> 00:10:18,020
infrastructure environments

217
00:10:20,420 --> 00:10:25,920
exposed it's about 21,000 of those it's

218
00:10:23,759 --> 00:10:28,259
easier to the check that information

219
00:10:25,920 --> 00:10:31,430
with any public search engine by the way

220
00:10:28,259 --> 00:10:34,019
how many of you are what children is

221
00:10:31,430 --> 00:10:36,180
raise your hand yeah just interesting

222
00:10:34,019 --> 00:10:39,420
yeah every year we see more and more

223
00:10:36,180 --> 00:10:43,529
people aware of that ninety-five percent

224
00:10:39,420 --> 00:10:46,979
of those environments are exposed to the

225
00:10:43,529 --> 00:10:48,569
big world and it's possible to get even

226
00:10:46,980 --> 00:10:54,180
more information there and they're

227
00:10:48,569 --> 00:10:55,849
mostly hosted on double yes and most of

228
00:10:54,180 --> 00:10:58,790
them are not properly configured because

229
00:10:55,850 --> 00:11:01,470
people set them up on their own without

230
00:10:58,790 --> 00:11:06,089
using self management services provided

231
00:11:01,470 --> 00:11:10,470
by providers the very first key Burnett

232
00:11:06,089 --> 00:11:14,009
is plaster was on Google it was JK so it

233
00:11:10,470 --> 00:11:18,110
has broader functionality it has more

234
00:11:14,009 --> 00:11:18,110
people using it but on top of hand

235
00:11:20,449 --> 00:11:28,290
appeared for the pier della and there's

236
00:11:25,110 --> 00:11:30,240
still quite portable and people are

237
00:11:28,290 --> 00:11:33,329
using aw yes to deploy their own

238
00:11:30,240 --> 00:11:37,139
kubernetes cluster one year ago it says

239
00:11:33,329 --> 00:11:39,239
was not managing kubernetes Prato and

240
00:11:37,139 --> 00:11:41,880
people were using kiosks or other tools

241
00:11:39,240 --> 00:11:46,139
to to set up their own kubernetes

242
00:11:41,880 --> 00:11:48,209
cluster so how to update given s cluster

243
00:11:46,139 --> 00:11:50,069
how to monitor kubernetes cluster two

244
00:11:48,209 --> 00:11:54,630
minute updates and four four settings

245
00:11:50,069 --> 00:11:56,729
and the key problem here who seen by

246
00:11:54,630 --> 00:12:01,050
most people who used it in productions

247
00:11:56,730 --> 00:12:03,059
about security we already mentioned

248
00:12:01,050 --> 00:12:04,559
shorten sudden is a public search engine

249
00:12:03,059 --> 00:12:09,019
which allows you in real time to see

250
00:12:04,559 --> 00:12:09,019
services exposed to the big world

251
00:12:09,180 --> 00:12:13,620
external world and you can connect to

252
00:12:12,060 --> 00:12:16,260
them and you can get unauthorized access

253
00:12:13,620 --> 00:12:18,950
to the system and it's you should be

254
00:12:16,260 --> 00:12:22,800
very careful about it

255
00:12:18,950 --> 00:12:24,750
speaking about compromised services it

256
00:12:22,800 --> 00:12:33,060
was discussed by never said that last

257
00:12:24,750 --> 00:12:35,700
year's Def Con and he showed tables used

258
00:12:33,060 --> 00:12:38,010
by attackers and researchers to check

259
00:12:35,700 --> 00:12:40,260
that your infrastructure has been hot

260
00:12:38,010 --> 00:12:42,300
and you have to do something about it

261
00:12:40,260 --> 00:12:44,750
but as you can see these are test

262
00:12:42,300 --> 00:12:49,529
environments development environments

263
00:12:44,750 --> 00:12:52,170
sometimes whole databases are wiped so

264
00:12:49,529 --> 00:12:58,920
people get problems with recovering

265
00:12:52,170 --> 00:13:01,860
their data he works as the researcher

266
00:12:58,920 --> 00:13:04,620
for Azure and he showed that about two

267
00:13:01,860 --> 00:13:06,360
million ports about within that other

268
00:13:04,620 --> 00:13:08,130
infrastructure is exposed to the

269
00:13:06,360 --> 00:13:11,190
external world and looking at these

270
00:13:08,130 --> 00:13:14,870
trends you can see one a try example to

271
00:13:11,190 --> 00:13:20,310
see that the number of vulnerable

272
00:13:14,870 --> 00:13:29,130
Windows RS instances has been lower now

273
00:13:20,310 --> 00:13:34,140
but it takes a long time how data leak

274
00:13:29,130 --> 00:13:36,360
from there anybody can see scripts to

275
00:13:34,140 --> 00:13:38,220
see that the financial data created

276
00:13:36,360 --> 00:13:40,140
coughs data to dump the database to

277
00:13:38,220 --> 00:13:42,899
completely wipe the database it's very

278
00:13:40,140 --> 00:13:44,970
easy to do it and it's terrible to think

279
00:13:42,899 --> 00:13:48,899
about what can happen to your data by

280
00:13:44,970 --> 00:13:50,550
and large so it's not worth using

281
00:13:48,899 --> 00:13:51,839
production data and your test

282
00:13:50,550 --> 00:13:55,859
environments and your development

283
00:13:51,839 --> 00:14:00,209
environments they should be marked as be

284
00:13:55,860 --> 00:14:02,430
careful and how to work with sensitive

285
00:14:00,209 --> 00:14:04,229
data your compliance people your

286
00:14:02,430 --> 00:14:07,589
compliance teams should be able to tell

287
00:14:04,230 --> 00:14:10,350
you what to do with sensitive data as an

288
00:14:07,589 --> 00:14:12,300
example I often saw situations with in

289
00:14:10,350 --> 00:14:12,850
the projects when people are saying yeah

290
00:14:12,300 --> 00:14:16,810
we have

291
00:14:12,850 --> 00:14:18,100
we have to understand why do we have

292
00:14:16,810 --> 00:14:21,399
this problem and to do something about

293
00:14:18,100 --> 00:14:25,839
it and developers who just take some

294
00:14:21,399 --> 00:14:29,560
piece of the database they would put it

295
00:14:25,839 --> 00:14:33,310
into their local copy of elasticsearch

296
00:14:29,560 --> 00:14:36,339
MongoDB or novel database not on the VMS

297
00:14:33,310 --> 00:14:38,560
but it have to work it port forwarding

298
00:14:36,339 --> 00:14:40,779
is not convenient or using telepresence

299
00:14:38,560 --> 00:14:42,939
for for for connection forwarding is not

300
00:14:40,779 --> 00:14:45,459
convenient so what people do they would

301
00:14:42,940 --> 00:14:47,769
create a services in kubernetes we start

302
00:14:45,459 --> 00:14:51,910
load bound sometimes they get public IP

303
00:14:47,769 --> 00:14:54,069
they access it using public IP yeah you

304
00:14:51,910 --> 00:14:55,540
can use it from the comfort of your home

305
00:14:54,069 --> 00:14:57,790
because they open the database until

306
00:14:55,540 --> 00:14:59,639
saving and then okay I had lots of

307
00:14:57,790 --> 00:15:02,469
thoughts I haven't finished

308
00:14:59,639 --> 00:15:03,970
over a week and during that time Shogun

309
00:15:02,470 --> 00:15:05,800
or other systems would check you and

310
00:15:03,970 --> 00:15:07,600
understand what's going on and maybe

311
00:15:05,800 --> 00:15:10,719
somebody would download your data and

312
00:15:07,600 --> 00:15:14,050
quite often in elasticsearch you know

313
00:15:10,720 --> 00:15:16,959
people put data there and then you have

314
00:15:14,050 --> 00:15:19,709
to use expert to Center ization so they

315
00:15:16,959 --> 00:15:23,109
put data there without any authorization

316
00:15:19,709 --> 00:15:25,359
you have to generate the test data set

317
00:15:23,110 --> 00:15:29,380
you should spend some time to use your

318
00:15:25,360 --> 00:15:33,040
test data set there are some open source

319
00:15:29,380 --> 00:15:35,610
solutions world buys quite easy to do it

320
00:15:33,040 --> 00:15:39,420
but you should be careful about it

321
00:15:35,610 --> 00:15:44,050
California Privacy Act and GDP are

322
00:15:39,420 --> 00:15:48,250
covering security and improving somehow

323
00:15:44,050 --> 00:15:50,199
and no there have been various finds for

324
00:15:48,250 --> 00:15:52,209
companies who suffer from data leakage

325
00:15:50,199 --> 00:15:54,550
but the general situation with Varma

326
00:15:52,209 --> 00:15:57,180
cesari's Information Awareness and

327
00:15:54,550 --> 00:16:01,089
security awareness has been a bit better

328
00:15:57,180 --> 00:16:04,930
an interesting example here is we had

329
00:16:01,089 --> 00:16:07,540
this example where we deployed MongoDB

330
00:16:04,930 --> 00:16:11,829
honey pots to see how

331
00:16:07,540 --> 00:16:17,529
long it will take for people to take it

332
00:16:11,829 --> 00:16:19,479
down one will get the message that we

333
00:16:17,529 --> 00:16:21,040
copy of database yeah it happened this

334
00:16:19,480 --> 00:16:23,190
way in one day we sort of some

335
00:16:21,040 --> 00:16:26,469
researchers connected our database and

336
00:16:23,190 --> 00:16:28,420
and their website we didn't have any

337
00:16:26,470 --> 00:16:30,160
information on their website who they

338
00:16:28,420 --> 00:16:32,500
are and what they do with the data but

339
00:16:30,160 --> 00:16:36,519
they have been doing it since 2004 in

340
00:16:32,500 --> 00:16:38,170
ten days we were in the index by shorten

341
00:16:36,519 --> 00:16:41,019
and we had become publicly available

342
00:16:38,170 --> 00:16:43,959
over shodhan which has now been used

343
00:16:41,019 --> 00:16:46,269
about two million people various people

344
00:16:43,959 --> 00:16:47,739
on the global scale and in 17 seconds

345
00:16:46,269 --> 00:16:50,290
after that immediately after that

346
00:16:47,740 --> 00:16:52,509
somebody from China from Chinese IP

347
00:16:50,290 --> 00:16:59,290
address connected to us and wiped

348
00:16:52,509 --> 00:17:01,810
whatever we had them do you can see in

349
00:16:59,290 --> 00:17:04,959
your works certain IP addresses and what

350
00:17:01,810 --> 00:17:12,609
you can do to avoid your data being

351
00:17:04,959 --> 00:17:15,189
compromised you have to do that look up

352
00:17:12,609 --> 00:17:19,349
there was this relatively good example

353
00:17:15,189 --> 00:17:19,350
because my range is just a search system

354
00:17:20,939 --> 00:17:28,030
you can use this gray noise deployed by

355
00:17:25,299 --> 00:17:30,040
one of the researchers on their own we

356
00:17:28,030 --> 00:17:33,010
all see activities from that IP address

357
00:17:30,040 --> 00:17:37,120
on the global scale to compare facts and

358
00:17:33,010 --> 00:17:39,490
skip this risk as such you know

359
00:17:37,120 --> 00:17:41,678
companies we just scanned something and

360
00:17:39,490 --> 00:17:44,980
sell information there are more than 10

361
00:17:41,679 --> 00:17:46,720
of those currently the case which is a

362
00:17:44,980 --> 00:17:50,590
bit worse is this world that the IP

363
00:17:46,720 --> 00:17:52,360
address is posted on Amazon and based on

364
00:17:50,590 --> 00:17:54,490
the activities you see that they only

365
00:17:52,360 --> 00:18:01,658
they have only been scanning kubernetes

366
00:17:54,490 --> 00:18:03,460
services such then start using more

367
00:18:01,659 --> 00:18:05,500
powerful threat intelligence tool and

368
00:18:03,460 --> 00:18:07,419
itself that it doesn't have any relevant

369
00:18:05,500 --> 00:18:09,400
and up-to-date information and you have

370
00:18:07,419 --> 00:18:11,830
to skip it and to

371
00:18:09,400 --> 00:18:13,150
those myths and looks or walks and to

372
00:18:11,830 --> 00:18:17,500
see whatever your data have leaked

373
00:18:13,150 --> 00:18:19,630
somebody or not it's much better when

374
00:18:17,500 --> 00:18:22,800
you are able to use honey pots to

375
00:18:19,630 --> 00:18:26,680
monitor the activities for example now

376
00:18:22,800 --> 00:18:29,440
using the same engine we have seen that

377
00:18:26,680 --> 00:18:32,140
there are about 65 IP addresses on a

378
00:18:29,440 --> 00:18:35,560
daily basis trying to look for Cuban

379
00:18:32,140 --> 00:18:38,020
ettus waters the same applies to Dec of

380
00:18:35,560 --> 00:18:40,629
diamonds using which you can just

381
00:18:38,020 --> 00:18:43,090
connect somewhere and to launch some

382
00:18:40,630 --> 00:18:47,080
malware container malicious container

383
00:18:43,090 --> 00:18:49,480
wherever possible more iterations of the

384
00:18:47,080 --> 00:18:54,520
dokie of daemon and about 30 IP

385
00:18:49,480 --> 00:18:56,800
addresses daily trying to do it some

386
00:18:54,520 --> 00:18:59,410
articles and publications about how to

387
00:18:56,800 --> 00:19:02,379
stand the whole world about the service

388
00:18:59,410 --> 00:19:04,660
how to collect the information required

389
00:19:02,380 --> 00:19:07,120
and those articles have been publicly

390
00:19:04,660 --> 00:19:11,890
available since 2017 anybody can do it

391
00:19:07,120 --> 00:19:14,020
so now how to live in this situation how

392
00:19:11,890 --> 00:19:19,720
to check that your infrastructure is

393
00:19:14,020 --> 00:19:23,080
still somehow so how should you leave

394
00:19:19,720 --> 00:19:27,760
you it may seem complicated you should

395
00:19:23,080 --> 00:19:32,439
either leave your job or start studying

396
00:19:27,760 --> 00:19:38,290
and using best practices start improving

397
00:19:32,440 --> 00:19:41,740
yourself and invest them in your

398
00:19:38,290 --> 00:19:45,760
infrastructure at any stage never forget

399
00:19:41,740 --> 00:19:49,300
security even when you just prepare your

400
00:19:45,760 --> 00:19:54,600
infrastructure at and at the same stage

401
00:19:49,300 --> 00:19:59,460
this is a short road map to improve your

402
00:19:54,600 --> 00:20:06,100
security first of all restrict access

403
00:19:59,460 --> 00:20:07,410
over k2 cube kti to limit connections

404
00:20:06,100 --> 00:20:12,530
then

405
00:20:07,410 --> 00:20:20,040
to use private key Burnett as kloster

406
00:20:12,530 --> 00:20:23,399
use access control role based access

407
00:20:20,040 --> 00:20:26,909
control creating the database for roles

408
00:20:23,400 --> 00:20:30,210
and resources except accessible for

409
00:20:26,910 --> 00:20:33,300
Sasha or other users but this is not all

410
00:20:30,210 --> 00:20:35,930
your containers may operate at the same

411
00:20:33,300 --> 00:20:41,990
node but communicate over the network

412
00:20:35,930 --> 00:20:46,080
because you should use a network policy

413
00:20:41,990 --> 00:20:49,800
by means of the right to network plugin

414
00:20:46,080 --> 00:20:52,800
if you deployed cuban a test circle asta

415
00:20:49,800 --> 00:20:55,500
with plugin not supporting the network

416
00:20:52,800 --> 00:20:58,190
policy it will be difficult to upgrade

417
00:20:55,500 --> 00:21:02,870
your infrastructure think in advance

418
00:20:58,190 --> 00:21:06,890
use namespaces and split your flows your

419
00:21:02,870 --> 00:21:12,659
applications instructions and so on by

420
00:21:06,890 --> 00:21:17,100
namespace create team a and Team B and

421
00:21:12,660 --> 00:21:21,300
set up policies and what setting towards

422
00:21:17,100 --> 00:21:25,080
of public Ivies and resources for every

423
00:21:21,300 --> 00:21:29,550
namespace isolate them use booster

424
00:21:25,080 --> 00:21:36,360
Chile's node make a note communicate

425
00:21:29,550 --> 00:21:40,230
over TLS at the next stage we go to cuba

426
00:21:36,360 --> 00:21:43,379
latest security and updates you should

427
00:21:40,230 --> 00:21:46,110
constantly update kubernetes and google

428
00:21:43,380 --> 00:21:49,860
kubernetes engine is good in the sense

429
00:21:46,110 --> 00:21:52,889
that the updates are issued regularly

430
00:21:49,860 --> 00:21:56,540
and deployed regularly and google would

431
00:21:52,890 --> 00:21:56,540
inform you about this

432
00:21:57,980 --> 00:22:05,539
in gk for instance that dashboard has

433
00:22:02,809 --> 00:22:08,928
already switched out talking and

434
00:22:05,539 --> 00:22:11,779
switched out if you deploy a cuban

435
00:22:08,929 --> 00:22:15,590
attacks yourself so this service token

436
00:22:11,779 --> 00:22:18,980
may be available and it allows somebody

437
00:22:15,590 --> 00:22:20,029
to use container to access your skipper

438
00:22:18,980 --> 00:22:24,529
net as kalasa

439
00:22:20,029 --> 00:22:29,539
use minimum operating system without any

440
00:22:24,529 --> 00:22:32,720
excesses a good example is disappea

441
00:22:29,539 --> 00:22:36,200
with operation system or core operation

442
00:22:32,720 --> 00:22:40,070
system container human use me more I am

443
00:22:36,200 --> 00:22:43,850
rules deploy the private cluster on your

444
00:22:40,070 --> 00:22:46,549
note such a/k/a allows you to create

445
00:22:43,850 --> 00:22:49,070
private Cuban Etta's cluster meaning

446
00:22:46,549 --> 00:22:52,809
that there is no eyepiece public

447
00:22:49,070 --> 00:22:56,480
eyepiece at your node it was a

448
00:22:52,809 --> 00:23:00,220
disadvantage of using public appeared in

449
00:22:56,480 --> 00:23:02,929
shallow but now it's not so anyway

450
00:23:00,220 --> 00:23:05,929
verify binaries that are deployed and

451
00:23:02,929 --> 00:23:08,799
monitor access with audit logging as

452
00:23:05,929 --> 00:23:12,250
soon as we got his bananas cluster

453
00:23:08,799 --> 00:23:17,149
disabled - but it's not necessary use

454
00:23:12,250 --> 00:23:19,909
common problem this is a default service

455
00:23:17,149 --> 00:23:25,279
account or can protect node metadata

456
00:23:19,909 --> 00:23:29,929
that I mentioned just imagine we entered

457
00:23:25,279 --> 00:23:34,639
your container somehow made a request

458
00:23:29,929 --> 00:23:38,440
and wrote a script that was used to

459
00:23:34,639 --> 00:23:42,320
deploy them no but after that we can

460
00:23:38,440 --> 00:23:46,030
search for another information but JK

461
00:23:42,320 --> 00:23:48,820
allows you to disable this

462
00:23:46,030 --> 00:23:51,420
when you use self deployment Cuba Metis

463
00:23:48,820 --> 00:23:51,419
kalasa

464
00:23:51,960 --> 00:24:00,630
set it up so that metadata cannot be

465
00:23:56,620 --> 00:24:07,020
accessed from the assets in images for

466
00:24:00,630 --> 00:24:11,200
vulnerabilities and the last stage is

467
00:24:07,020 --> 00:24:13,180
odd security policy preventing import of

468
00:24:11,200 --> 00:24:16,780
macro service compromised protect

469
00:24:13,180 --> 00:24:22,300
secrets and to limit the identity used

470
00:24:16,780 --> 00:24:30,220
by but remember that you should not skip

471
00:24:22,300 --> 00:24:33,520
any stage or part of this work but there

472
00:24:30,220 --> 00:24:41,590
is an article being regularly updated

473
00:24:33,520 --> 00:24:43,120
about a kubernetes attack but a regular

474
00:24:41,590 --> 00:24:46,300
picture is like this

475
00:24:43,120 --> 00:24:49,050
everybody will arrange for low-hanging

476
00:24:46,300 --> 00:24:55,510
fruit being the access control or

477
00:24:49,050 --> 00:25:03,460
traffic Smith between the containers all

478
00:24:55,510 --> 00:25:06,540
things like this a doesn't have attacks

479
00:25:03,460 --> 00:25:11,590
have been described by bread VG's Minh

480
00:25:06,540 --> 00:25:14,530
and this is an example access on one

481
00:25:11,590 --> 00:25:17,070
durable container to access download and

482
00:25:14,530 --> 00:25:20,678
all its resources

483
00:25:17,070 --> 00:25:23,320
one of the a wasp's is shown I have

484
00:25:20,679 --> 00:25:26,650
shown how to get into the container

485
00:25:23,320 --> 00:25:29,980
using your application as an access

486
00:25:26,650 --> 00:25:36,100
point but then you get metadata updated

487
00:25:29,980 --> 00:25:40,179
and use AWS with your own token or SSH

488
00:25:36,100 --> 00:25:43,928
key to update the metadata and give you

489
00:25:40,179 --> 00:25:49,630
access it's possible whenever you get

490
00:25:43,929 --> 00:25:53,289
into container now which is the right

491
00:25:49,630 --> 00:25:59,860
way to protect yourself I can cite a

492
00:25:53,289 --> 00:26:03,309
great presentation by gan-chan patel who

493
00:25:59,860 --> 00:26:09,309
splits the security or breaks down the

494
00:26:03,309 --> 00:26:14,200
security to seven levels and he gives a

495
00:26:09,309 --> 00:26:20,678
road map for each level works to do to

496
00:26:14,200 --> 00:26:25,360
be sure that you protect your data yes

497
00:26:20,679 --> 00:26:30,429
it's a lot of additional work but it can

498
00:26:25,360 --> 00:26:33,729
help you to change something this

499
00:26:30,429 --> 00:26:38,200
example is about securing the field what

500
00:26:33,730 --> 00:26:40,409
I would recommend is to check images for

501
00:26:38,200 --> 00:26:46,630
vulnerabilities there were many capers

502
00:26:40,409 --> 00:26:51,399
when Judas images were used containing

503
00:26:46,630 --> 00:26:55,539
backdoors use your own registry

504
00:26:51,399 --> 00:26:59,350
container and put only your own images

505
00:26:55,539 --> 00:27:03,049
they're made from scratch or verifiably

506
00:26:59,350 --> 00:27:06,340
be very careful about this Cuban

507
00:27:03,049 --> 00:27:12,110
allows you to limit access to other

508
00:27:06,340 --> 00:27:14,658
registers by the use of Daugherty saying

509
00:27:12,110 --> 00:27:19,549
stating that some repositories are

510
00:27:14,659 --> 00:27:26,869
trusted signing images for being used

511
00:27:19,549 --> 00:27:31,879
but be very aggressive and very careful

512
00:27:26,869 --> 00:27:36,918
about this because the problem of images

513
00:27:31,879 --> 00:27:40,129
containing backdoor home / is more and

514
00:27:36,919 --> 00:27:43,369
more relevant use private repository

515
00:27:40,129 --> 00:27:47,658
sign with your certificate and limit

516
00:27:43,369 --> 00:27:50,899
public can register containers in cuban

517
00:27:47,659 --> 00:27:55,669
Airness when you validated all your

518
00:27:50,899 --> 00:27:58,998
changes you will want to check your

519
00:27:55,669 --> 00:28:02,539
cluster for security but describe the

520
00:27:58,999 --> 00:28:06,619
scope which is really important because

521
00:28:02,539 --> 00:28:14,210
without this you will get garbled

522
00:28:06,619 --> 00:28:18,320
results this can be a clickable to your

523
00:28:14,210 --> 00:28:30,999
infrastructure this is one of the recent

524
00:28:18,320 --> 00:28:30,999
case sorry the interpreter cannot hear

525
00:28:32,499 --> 00:28:40,929
the container then go to dashboard to

526
00:28:36,950 --> 00:28:44,389
the secrets are decrypted the keys

527
00:28:40,929 --> 00:28:49,809
connected to the data person started

528
00:28:44,389 --> 00:28:55,039
mining this is an example of taking a

529
00:28:49,809 --> 00:29:01,539
script image comprising more were to be

530
00:28:55,039 --> 00:29:01,539
capable of mining and grow the botnet

531
00:29:01,779 --> 00:29:07,820
you can use your monitoring to see that

532
00:29:05,299 --> 00:29:12,529
there is more than one container with

533
00:29:07,820 --> 00:29:16,639
your application if you don't pay any

534
00:29:12,529 --> 00:29:19,940
attention to this it may signify that

535
00:29:16,639 --> 00:29:24,080
you have somebody mining in your

536
00:29:19,940 --> 00:29:27,460
containers check your images what is the

537
00:29:24,080 --> 00:29:27,460
proactive protection

538
00:29:30,950 --> 00:29:35,669
[Music]

539
00:29:32,270 --> 00:29:40,520
he was automation as the proactive

540
00:29:35,669 --> 00:29:46,250
security are put a circle topic in our

541
00:29:40,520 --> 00:29:54,120
Demilitarized Zone are to limit people

542
00:29:46,250 --> 00:30:02,399
from scanning your services and overload

543
00:29:54,120 --> 00:30:05,580
their service this is a good case about

544
00:30:02,399 --> 00:30:10,949
supply chain attacks but this is another

545
00:30:05,580 --> 00:30:16,110
slide docker hub is a repository for

546
00:30:10,950 --> 00:30:18,649
people for sales for storing their

547
00:30:16,110 --> 00:30:22,289
images were using her publicly available

548
00:30:18,649 --> 00:30:26,059
images we tried to find out is there any

549
00:30:22,289 --> 00:30:28,860
more variant the repositories is

550
00:30:26,059 --> 00:30:33,210
actually dock hub is used by their

551
00:30:28,860 --> 00:30:38,309
criminals to grow to initiate and grow

552
00:30:33,210 --> 00:30:45,830
attacks we found out that in May some

553
00:30:38,309 --> 00:30:49,260
repositories contained the images of for

554
00:30:45,830 --> 00:30:51,809
mining and it took seven months for

555
00:30:49,260 --> 00:30:57,000
researchers to describe this case and

556
00:30:51,809 --> 00:30:59,879
make it known but docker hub didn't

557
00:30:57,000 --> 00:31:02,940
delete this repository after death

558
00:30:59,880 --> 00:31:06,510
fortunate has described this case again

559
00:31:02,940 --> 00:31:11,220
and it took another two days for docker

560
00:31:06,510 --> 00:31:15,960
hub to delete this malicious images we

561
00:31:11,220 --> 00:31:20,100
cannot say what harm has been actually

562
00:31:15,960 --> 00:31:25,740
done but we think that the losses were

563
00:31:20,100 --> 00:31:32,219
like $100,000 but attackers made about

564
00:31:25,740 --> 00:31:37,139
ninety thousand dollars by exporting

565
00:31:32,220 --> 00:31:39,690
more than five million images from the

566
00:31:37,139 --> 00:31:43,000
door kabab

567
00:31:39,690 --> 00:31:52,260
after that it was another story with

568
00:31:43,000 --> 00:31:55,980
docker hub three weeks ago somebody had

569
00:31:52,260 --> 00:32:01,090
unauthorized access to the database and

570
00:31:55,980 --> 00:32:06,700
leaked about 5% of the users data the

571
00:32:01,090 --> 00:32:10,959
hub stated that there were not financial

572
00:32:06,700 --> 00:32:17,070
data exposure but tokens were exposed

573
00:32:10,960 --> 00:32:21,000
and this resulted in losses as you know

574
00:32:17,070 --> 00:32:26,189
containers who would use a host kernel

575
00:32:21,000 --> 00:32:30,640
and there were cases when the container

576
00:32:26,190 --> 00:32:34,210
have been used or to go out of the

577
00:32:30,640 --> 00:32:40,720
container and get access to the hole to

578
00:32:34,210 --> 00:32:44,140
a host system it's a recent case a dark

579
00:32:40,720 --> 00:32:46,960
container allowed to go outside and do

580
00:32:44,140 --> 00:32:49,120
something on the host system and after

581
00:32:46,960 --> 00:32:51,940
that the access to the host system

582
00:32:49,120 --> 00:32:59,350
allows you to do many different things

583
00:32:51,940 --> 00:33:03,510
it was a vulnerability fixed and 18.9 it

584
00:32:59,350 --> 00:33:07,360
was not the first case of the kind but

585
00:33:03,510 --> 00:33:11,590
you know there is no silver bullet or to

586
00:33:07,360 --> 00:33:14,169
protect everything because your needs

587
00:33:11,590 --> 00:33:19,750
depend on the things you are doing in

588
00:33:14,170 --> 00:33:22,750
your environments you can try and spend

589
00:33:19,750 --> 00:33:28,030
money on protection but the security

590
00:33:22,750 --> 00:33:32,560
control require not only money but the

591
00:33:28,030 --> 00:33:35,950
time to do it but there are expensive

592
00:33:32,560 --> 00:33:40,820
products with additional overhead and

593
00:33:35,950 --> 00:33:44,300
they can't be built in as like

594
00:33:40,820 --> 00:33:47,510
box it into your containers but anyway

595
00:33:44,300 --> 00:33:50,300
you cannot cover everything and there is

596
00:33:47,510 --> 00:33:56,110
no single solution to resolve all your

597
00:33:50,300 --> 00:33:59,840
problems just choose the medium way use

598
00:33:56,110 --> 00:34:03,169
different products to resolve different

599
00:33:59,840 --> 00:34:05,840
problems it may happen that the

600
00:34:03,170 --> 00:34:08,810
protection services would consume more

601
00:34:05,840 --> 00:34:14,389
resources than your application you also

602
00:34:08,810 --> 00:34:20,150
can try and use open source utilities to

603
00:34:14,389 --> 00:34:25,009
close the gaps and use a small volume of

604
00:34:20,150 --> 00:34:30,080
resources there are for instance micro

605
00:34:25,010 --> 00:34:33,679
scanner and cube hunter to get hair look

606
00:34:30,080 --> 00:34:36,918
on women images and exposure or

607
00:34:33,679 --> 00:34:41,690
infrastructure to the wall and you can

608
00:34:36,918 --> 00:34:46,609
get all the cube bench afford the

609
00:34:41,690 --> 00:34:49,880
verification of your controller by the

610
00:34:46,610 --> 00:34:57,590
tools are for C's 20 using the best

611
00:34:49,880 --> 00:35:03,350
practices one more protection tool for

612
00:34:57,590 --> 00:35:05,990
you you can try and participate the bug

613
00:35:03,350 --> 00:35:07,610
bounty program and initiate the bug

614
00:35:05,990 --> 00:35:12,790
bounty program in your company for

615
00:35:07,610 --> 00:35:17,080
instance through Sudan I found the case

616
00:35:12,790 --> 00:35:21,040
where O death kubernetes

617
00:35:17,080 --> 00:35:25,819
dashboards will be would be publicly

618
00:35:21,040 --> 00:35:32,050
open and I tried cube hunter to find out

619
00:35:25,820 --> 00:35:32,050
that but there are o 120 nodes like this

620
00:35:35,860 --> 00:35:43,760
ops technology to do this I think that

621
00:35:40,010 --> 00:35:44,520
the developers should have some

622
00:35:43,760 --> 00:35:46,860
knowledge

623
00:35:44,520 --> 00:35:49,430
about the security and be capable of

624
00:35:46,860 --> 00:35:52,700
using the tools to verify your

625
00:35:49,430 --> 00:35:57,450
infrastructure security this will be

626
00:35:52,700 --> 00:36:01,319
2019 trend and will delete the hopes I

627
00:35:57,450 --> 00:36:05,129
will have to study cyber security and

628
00:36:01,320 --> 00:36:12,510
you also should validate all the

629
00:36:05,130 --> 00:36:16,350
solution design stage for security and

630
00:36:12,510 --> 00:36:21,120
some additional measures to take a test

631
00:36:16,350 --> 00:36:24,060
spend that time and resources for your

632
00:36:21,120 --> 00:36:26,670
people development and carry out

633
00:36:24,060 --> 00:36:30,930
security trainings which is nothing new

634
00:36:26,670 --> 00:36:35,070
but necessary one of the cases that can

635
00:36:30,930 --> 00:36:41,569
help you to improve security is the

636
00:36:35,070 --> 00:36:44,190
using service mesh and IFC i/o issue

637
00:36:41,570 --> 00:36:46,740
supported by Google and other big

638
00:36:44,190 --> 00:36:51,330
internationals is the one of the

639
00:36:46,740 --> 00:36:56,939
examples of such service mesh it has its

640
00:36:51,330 --> 00:36:59,100
advantages a while monitoring traffic or

641
00:36:56,940 --> 00:37:03,860
closed direct traffic

642
00:36:59,100 --> 00:37:07,460
outbound traffic increase the traffic

643
00:37:03,860 --> 00:37:11,850
mutual tearless integration with

644
00:37:07,460 --> 00:37:16,560
adapters like api gateway JWT

645
00:37:11,850 --> 00:37:19,589
but its disadvantage is a huge overhead

646
00:37:16,560 --> 00:37:23,340
because the card process is added to

647
00:37:19,590 --> 00:37:27,660
each of your containers plus control

648
00:37:23,340 --> 00:37:32,990
plane plus difficult of configuration

649
00:37:27,660 --> 00:37:36,480
and troubleshooting this is a picture

650
00:37:32,990 --> 00:37:41,140
which we have thanks to a Vadim about

651
00:37:36,480 --> 00:37:43,980
compliance and you can use cube bench at

652
00:37:41,140 --> 00:37:48,868
to verify the security level

653
00:37:43,980 --> 00:37:51,869
elasticsearch a Tehran and expect model

654
00:37:48,869 --> 00:37:56,289
which you can buy to get authorization

655
00:37:51,869 --> 00:38:01,269
and the breaking down by indexes but

656
00:37:56,289 --> 00:38:04,750
it's great before your license expires

657
00:38:01,269 --> 00:38:07,868
after that the last exertion will be

658
00:38:04,750 --> 00:38:11,819
open to everybody without authorization

659
00:38:07,869 --> 00:38:17,099
please monitor it you search God to

660
00:38:11,819 --> 00:38:21,880
which is free and allows you to set up

661
00:38:17,099 --> 00:38:24,970
to wrap up let's say that we should

662
00:38:21,880 --> 00:38:27,250
always see a whole picture of the things

663
00:38:24,970 --> 00:38:32,288
that are going on you're in in your

664
00:38:27,250 --> 00:38:34,779
infrastructure to discover what's going

665
00:38:32,289 --> 00:38:38,500
on and what you have you should

666
00:38:34,779 --> 00:38:41,950
decompose it to smaller layers analyze

667
00:38:38,500 --> 00:38:46,960
the risks on each layer and you should

668
00:38:41,950 --> 00:38:49,689
do it in a cyclic way in the cyclic mode

669
00:38:46,960 --> 00:38:56,319
every time you change anything in your

670
00:38:49,690 --> 00:39:02,559
environment and please educate and share

671
00:38:56,319 --> 00:39:05,349
knowledge train your developers study

672
00:39:02,559 --> 00:39:09,970
these problems and processes yourself

673
00:39:05,349 --> 00:39:12,730
and try to make your product as good as

674
00:39:09,970 --> 00:39:15,819
possible to understand your problems you

675
00:39:12,730 --> 00:39:19,650
should also carry out penetration tests

676
00:39:15,819 --> 00:39:23,799
and some things some references

677
00:39:19,650 --> 00:39:26,710
supporting our opinion these are the

678
00:39:23,799 --> 00:39:29,980
most interesting materials to support

679
00:39:26,710 --> 00:39:31,960
and secure your clusters all right now

680
00:39:29,980 --> 00:39:33,519
thank you for your attention we ran

681
00:39:31,960 --> 00:39:40,779
short of time and

682
00:39:33,519 --> 00:39:46,928
now open to your questions any questions

683
00:39:40,779 --> 00:39:53,739
on the floor yes because I have a

684
00:39:46,929 --> 00:40:01,079
question too what would be your attitude

685
00:39:53,739 --> 00:40:09,130
to the divorce the developers for using

686
00:40:01,079 --> 00:40:13,989
Cuban ethics okay well we can split the

687
00:40:09,130 --> 00:40:18,459
runs to provide just the necessary all

688
00:40:13,989 --> 00:40:21,729
right so it depends on API but rules

689
00:40:18,459 --> 00:40:25,299
based access control can be used for

690
00:40:21,729 --> 00:40:27,640
this so you think it's possible but role

691
00:40:25,299 --> 00:40:31,019
based access controls should be used

692
00:40:27,640 --> 00:40:35,379
well it depends on the components and

693
00:40:31,019 --> 00:40:38,968
where it should be used not on the

694
00:40:35,380 --> 00:40:42,849
production environment but maybe in the

695
00:40:38,969 --> 00:40:47,319
development environment if you have

696
00:40:42,849 --> 00:40:52,299
enough budget finance resources you can

697
00:40:47,319 --> 00:40:58,599
also deploy your own or kubernetes

698
00:40:52,299 --> 00:41:02,788
cluster how do you think what is the

699
00:40:58,599 --> 00:41:07,599
best possible team or to secure

700
00:41:02,789 --> 00:41:11,769
kubernetes it depends on the project and

701
00:41:07,599 --> 00:41:14,140
it depends of whether or not the

702
00:41:11,769 --> 00:41:17,410
customer is ready and willing to pay for

703
00:41:14,140 --> 00:41:22,328
security in ideal case you should have a

704
00:41:17,410 --> 00:41:27,328
security engineer a new team and if you

705
00:41:22,329 --> 00:41:31,029
elect finance to hire an engineer before

706
00:41:27,329 --> 00:41:33,759
you deploy your project and production

707
00:41:31,029 --> 00:41:40,029
you should carry out penetration test

708
00:41:33,759 --> 00:41:43,869
and we have an ideal case like super

709
00:41:40,029 --> 00:41:48,640
security team in vacuum all the budgets

710
00:41:43,869 --> 00:41:51,099
no deadlines well the ideal case is to

711
00:41:48,640 --> 00:41:55,209
create a methodology and then use it

712
00:41:51,099 --> 00:41:58,809
with the resources you have actually we

713
00:41:55,209 --> 00:42:03,038
are going to do it at our new workplace

714
00:41:58,809 --> 00:42:11,829
and it may be even provided at open

715
00:42:03,039 --> 00:42:12,609
source emotional yanli school for

716
00:42:11,829 --> 00:42:16,680
archery

717
00:42:12,609 --> 00:42:22,979
yes we here

718
00:42:16,680 --> 00:42:25,569
sakaram was Lewis your internet the most

719
00:42:22,979 --> 00:42:32,769
reduced officials internet I'm the mom

720
00:42:25,569 --> 00:42:34,690
was Lewis a major emergency dosed up

721
00:42:32,769 --> 00:42:36,729
she's not a pro a kiss problem a

722
00:42:34,690 --> 00:42:41,799
achieves a bully proportionable

723
00:42:36,729 --> 00:42:48,308
spaghetti shoe but I had to put him

724
00:42:41,799 --> 00:42:51,788
sustainable so cool my question it was

725
00:42:48,309 --> 00:42:56,440
possible to go out of the door container

726
00:42:51,789 --> 00:43:00,459
and do get to the root privileges to the

727
00:42:56,440 --> 00:43:01,339
whole system all no root or what well it

728
00:43:00,459 --> 00:43:06,649
depends

729
00:43:01,339 --> 00:43:09,170
how the container runs if there is no

730
00:43:06,650 --> 00:43:10,099
privilege flag you are not going out of

731
00:43:09,170 --> 00:43:12,829
the container

732
00:43:10,099 --> 00:43:17,839
who is the root access but there are

733
00:43:12,829 --> 00:43:21,529
many configurations requiring to operate

734
00:43:17,839 --> 00:43:24,038
container with root privileges where

735
00:43:21,529 --> 00:43:27,859
people just don't think about the

736
00:43:24,039 --> 00:43:31,789
privileges to limit how to limit

737
00:43:27,859 --> 00:43:39,729
privileges not giving the roots right so

738
00:43:31,789 --> 00:43:44,059
it's 5050 actually some vulnerabilities

739
00:43:39,729 --> 00:43:47,149
become not relevant after the update and

740
00:43:44,059 --> 00:43:51,049
in every single case you should think

741
00:43:47,150 --> 00:43:55,390
about getting root access on the cause

742
00:43:51,049 --> 00:43:55,390
okay let's start thank our speakers

