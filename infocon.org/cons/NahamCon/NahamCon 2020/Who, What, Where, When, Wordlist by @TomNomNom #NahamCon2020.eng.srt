1
00:00:00,060 --> 00:00:06,569
okay so our first speaker of the night

2
00:00:03,179 --> 00:00:10,740
is no other than the amazing Tom nom nom

3
00:00:06,569 --> 00:00:13,349
um he is I'm very very happy to know him

4
00:00:10,740 --> 00:00:16,948
personally as a friend he has a member

5
00:00:13,349 --> 00:00:19,470
of team disturbance and provides some

6
00:00:16,949 --> 00:00:22,710
really cool stuff to Detective I bring

7
00:00:19,470 --> 00:00:28,320
it up for bash hero vim master Tom nom

8
00:00:22,710 --> 00:00:31,710
nom hi I'm Tom nom nom and this is who

9
00:00:28,320 --> 00:00:34,440
what where when wordlist really is to

10
00:00:31,710 --> 00:00:36,030
talk about word lists so I think a

11
00:00:34,440 --> 00:00:38,399
pretty good place to start off or at

12
00:00:36,030 --> 00:00:44,899
least good a place as any is what is a

13
00:00:38,399 --> 00:00:49,230
word list and it's a list of words and

14
00:00:44,899 --> 00:00:51,690
yeah I am being a little bit silly

15
00:00:49,230 --> 00:00:53,300
though but you know it's a list of words

16
00:00:51,690 --> 00:00:55,589
used for brute-forcing

17
00:00:53,300 --> 00:00:58,649
maybe I'm actually using that term a

18
00:00:55,590 --> 00:01:00,840
little bit incorrectly maybe a better

19
00:00:58,649 --> 00:01:02,850
way to be putting it would be it's a

20
00:01:00,840 --> 00:01:07,110
list of words used for guessing things

21
00:01:02,850 --> 00:01:10,110
instead so well let's say useful if you

22
00:01:07,110 --> 00:01:12,090
want to check all the combinations for

23
00:01:10,110 --> 00:01:15,479
something but we don't really have

24
00:01:12,090 --> 00:01:18,509
enough time to do that so there's a

25
00:01:15,479 --> 00:01:20,789
little bit of quick maths we can figure

26
00:01:18,509 --> 00:01:23,970
out that if somehow you managed to

27
00:01:20,790 --> 00:01:28,610
maintain 500 requests a second and you

28
00:01:23,970 --> 00:01:31,408
wanted to get all six character

29
00:01:28,610 --> 00:01:34,409
directory names in like a path brute

30
00:01:31,409 --> 00:01:35,759
force with some tool like buster or for

31
00:01:34,409 --> 00:01:38,430
fuff fuff

32
00:01:35,759 --> 00:01:40,470
however you want to pronounce it things

33
00:01:38,430 --> 00:01:42,180
that match this lowercase letters

34
00:01:40,470 --> 00:01:44,369
uppercase letters underscore in dashes

35
00:01:42,180 --> 00:01:47,280
six characters long you're looking at

36
00:01:44,369 --> 00:01:49,290
more than four years to brute force all

37
00:01:47,280 --> 00:01:52,799
of those possibilities and you know that

38
00:01:49,290 --> 00:01:55,110
would be the ideal way to do things in

39
00:01:52,799 --> 00:01:59,130
theory because you would definitely find

40
00:01:55,110 --> 00:02:02,240
everything in that set

41
00:01:59,130 --> 00:02:05,189
except you know you're gonna firstly

42
00:02:02,240 --> 00:02:07,919
take too long secondly you're gonna fill

43
00:02:05,189 --> 00:02:10,470
a service disk up with logs and it's

44
00:02:07,920 --> 00:02:13,140
probably going to crash and it's just

45
00:02:10,470 --> 00:02:13,630
not practical so really word lists as

46
00:02:13,140 --> 00:02:15,940
far as

47
00:02:13,630 --> 00:02:19,030
I'm concerned as something exists to

48
00:02:15,940 --> 00:02:23,109
save time and resources to make attacks

49
00:02:19,030 --> 00:02:24,940
a bit more practical they can be used in

50
00:02:23,110 --> 00:02:27,820
a lot of different places or a lot of

51
00:02:24,940 --> 00:02:28,780
different ways so probably one of the

52
00:02:27,820 --> 00:02:30,280
most common that you're probably

53
00:02:28,780 --> 00:02:34,420
familiar with it sub domain and

54
00:02:30,280 --> 00:02:38,410
numeration so guessing which sub domains

55
00:02:34,420 --> 00:02:42,399
exist for a particular apex domain like

56
00:02:38,410 --> 00:02:44,530
target comm or yahoo.com also path

57
00:02:42,400 --> 00:02:47,110
guessing an incredibly common technique

58
00:02:44,530 --> 00:02:50,380
to do so we already mentioned that using

59
00:02:47,110 --> 00:02:52,150
tools like der buster off of but also

60
00:02:50,380 --> 00:02:54,280
you know authentication guessing's kind

61
00:02:52,150 --> 00:02:56,920
of one of the oldest to use cases for

62
00:02:54,280 --> 00:02:59,950
this sort of thing so guessing usernames

63
00:02:56,920 --> 00:03:02,649
and passwords more recently I found

64
00:02:59,950 --> 00:03:06,250
myself using it to guess API method

65
00:03:02,650 --> 00:03:08,670
names for example in an RPC style API if

66
00:03:06,250 --> 00:03:12,700
I've got no documentation I don't know

67
00:03:08,670 --> 00:03:15,600
any of the API methods guessing might be

68
00:03:12,700 --> 00:03:19,209
a good way to go about it other

69
00:03:15,600 --> 00:03:21,280
parameters so query string parameters

70
00:03:19,210 --> 00:03:23,110
post parameters or headers I guess

71
00:03:21,280 --> 00:03:26,080
should probably be included in

72
00:03:23,110 --> 00:03:29,560
parameters as well any kind of input

73
00:03:26,080 --> 00:03:31,800
that the application accepts but isn't

74
00:03:29,560 --> 00:03:34,830
documented I want to get those things

75
00:03:31,800 --> 00:03:37,750
and you probably get the point

76
00:03:34,830 --> 00:03:43,120
so one of the places you can get word

77
00:03:37,750 --> 00:03:46,030
list from is the internet you know and

78
00:03:43,120 --> 00:03:47,140
there's a few that are very popular and

79
00:03:46,030 --> 00:03:50,680
with good reason

80
00:03:47,140 --> 00:03:53,350
so cyclists is probably I would say the

81
00:03:50,680 --> 00:03:55,540
most used among bug bounty hunters if I

82
00:03:53,350 --> 00:03:57,670
had to guess you know it's well

83
00:03:55,540 --> 00:03:59,650
organized into different categories

84
00:03:57,670 --> 00:04:02,859
depending on what you want to use the

85
00:03:59,650 --> 00:04:05,040
word list for and there's a lot of

86
00:04:02,860 --> 00:04:07,630
coverage as well so really good lists

87
00:04:05,040 --> 00:04:10,269
quite recently Google of release some of

88
00:04:07,630 --> 00:04:11,769
their fuzzing dictionaries I've been

89
00:04:10,270 --> 00:04:13,390
playing with those a little bit

90
00:04:11,770 --> 00:04:16,209
they seem quite good they're much

91
00:04:13,390 --> 00:04:18,880
smaller and often I find they're not

92
00:04:16,209 --> 00:04:20,790
quite in the right format that I want so

93
00:04:18,880 --> 00:04:23,460
I have to mess around with a little bit

94
00:04:20,790 --> 00:04:25,050
and if you go googling

95
00:04:23,460 --> 00:04:27,150
there are many many more than internet

96
00:04:25,050 --> 00:04:30,389
depending on your use cases for example

97
00:04:27,150 --> 00:04:34,429
crack station have a fantastic word list

98
00:04:30,389 --> 00:04:37,259
and it gets many many gigabytes of

99
00:04:34,430 --> 00:04:38,729
possibilities and also you know

100
00:04:37,259 --> 00:04:41,880
sometimes you only need something simple

101
00:04:38,729 --> 00:04:44,370
so users share dict words is a

102
00:04:41,880 --> 00:04:46,860
dictionary file exists on many Linux

103
00:04:44,370 --> 00:04:51,660
distributions and you know sometimes

104
00:04:46,860 --> 00:04:54,210
that's all you need so like what's the

105
00:04:51,660 --> 00:04:57,270
problem with those word lists and really

106
00:04:54,210 --> 00:04:59,789
the main thing is you know despite being

107
00:04:57,270 --> 00:05:02,370
genuinely useful and being awesome in

108
00:04:59,789 --> 00:05:05,599
the case of cyclists and so on you know

109
00:05:02,370 --> 00:05:09,780
like I said already everybody uses them

110
00:05:05,599 --> 00:05:11,460
so if you are running the same word list

111
00:05:09,780 --> 00:05:13,440
of everybody else you're going to find

112
00:05:11,460 --> 00:05:15,870
the same things as everybody else

113
00:05:13,440 --> 00:05:18,360
and that means you know maybe you'll get

114
00:05:15,870 --> 00:05:20,070
duped or maybe it's just that you'll be

115
00:05:18,360 --> 00:05:22,259
looking at things that have already been

116
00:05:20,070 --> 00:05:24,449
tested quite heavily by other people

117
00:05:22,259 --> 00:05:25,710
there may well still be bugs there but

118
00:05:24,449 --> 00:05:28,349
if you're trying to increase your

119
00:05:25,710 --> 00:05:31,789
chances maybe that's not what you want

120
00:05:28,349 --> 00:05:35,699
they're also generally pretty generic so

121
00:05:31,789 --> 00:05:37,949
most applications have many paths or

122
00:05:35,699 --> 00:05:40,830
properties of parameters that are

123
00:05:37,949 --> 00:05:43,919
specific to them that don't really show

124
00:05:40,830 --> 00:05:46,889
up so much in other applications and

125
00:05:43,919 --> 00:05:49,500
that means they're less likely to show

126
00:05:46,889 --> 00:05:52,259
up in these generic word lists they're

127
00:05:49,500 --> 00:05:54,080
also often really large so you know

128
00:05:52,259 --> 00:05:57,630
we're trying to save time and resources

129
00:05:54,080 --> 00:05:59,340
and if you take cyclists for example

130
00:05:57,630 --> 00:06:01,979
there's about a gigabyte of text in

131
00:05:59,340 --> 00:06:03,780
there and it's going to take quite a

132
00:06:01,979 --> 00:06:05,639
long time to chew through all of them

133
00:06:03,780 --> 00:06:07,590
and that's a bit unrealistic perhaps

134
00:06:05,639 --> 00:06:09,630
because you wouldn't usually be using

135
00:06:07,590 --> 00:06:11,820
all of them but you know the point

136
00:06:09,630 --> 00:06:14,400
stands because they are generic and

137
00:06:11,820 --> 00:06:16,259
because they try to cover as many cases

138
00:06:14,400 --> 00:06:20,840
as possible they tend to be very large

139
00:06:16,259 --> 00:06:24,840
and sometimes in practically so so I

140
00:06:20,840 --> 00:06:26,609
think if you're going to find things

141
00:06:24,840 --> 00:06:28,080
that other people aren't finding and

142
00:06:26,610 --> 00:06:30,030
you're going to be efficient one of the

143
00:06:28,080 --> 00:06:33,359
best things you can do is build custom

144
00:06:30,030 --> 00:06:35,279
word lists so you know like we said

145
00:06:33,360 --> 00:06:37,230
every target has something specific to

146
00:06:35,279 --> 00:06:39,630
them generic words

147
00:06:37,230 --> 00:06:44,460
contain target name underscore super

148
00:06:39,630 --> 00:06:48,350
happy API Docs you know it might do but

149
00:06:44,460 --> 00:06:51,630
it's pretty unlikely and if that's the

150
00:06:48,350 --> 00:06:53,820
directory that happens to contain the

151
00:06:51,630 --> 00:06:56,010
secrets that you need to exploit your

152
00:06:53,820 --> 00:06:58,469
bug or finish your exploit chain or

153
00:06:56,010 --> 00:07:00,630
whatever it is or even just to find a

154
00:06:58,470 --> 00:07:02,780
bug in the first place you know it would

155
00:07:00,630 --> 00:07:07,680
be really useful to find out about them

156
00:07:02,780 --> 00:07:11,270
also there are specific use cases which

157
00:07:07,680 --> 00:07:13,290
I think call for specific word lists so

158
00:07:11,270 --> 00:07:14,549
example here is you know non point using

159
00:07:13,290 --> 00:07:18,930
a subdomain list when you guessing

160
00:07:14,550 --> 00:07:21,960
headers so those lists that you need

161
00:07:18,930 --> 00:07:24,060
might exist already but if your use case

162
00:07:21,960 --> 00:07:26,549
is very specific it becomes quite

163
00:07:24,060 --> 00:07:30,090
unlikely and you have to really look at

164
00:07:26,550 --> 00:07:32,160
building your own so one of the easiest

165
00:07:30,090 --> 00:07:35,729
ways to do that is to have my newly

166
00:07:32,160 --> 00:07:37,170
curated list and I would say the word

167
00:07:35,730 --> 00:07:40,020
list that I use the most is one that I

168
00:07:37,170 --> 00:07:42,270
typed out myself it's not very big I

169
00:07:40,020 --> 00:07:45,240
think it has maybe two hundred entries

170
00:07:42,270 --> 00:07:48,690
in it also but it has been very very

171
00:07:45,240 --> 00:07:51,150
useful it's made me a reasonable amount

172
00:07:48,690 --> 00:07:53,969
of money over the couple years that I've

173
00:07:51,150 --> 00:07:56,340
been putting it together and I just add

174
00:07:53,970 --> 00:08:00,420
to it when I read something interesting

175
00:07:56,340 --> 00:08:01,799
so if it's a disclosed issue where there

176
00:08:00,420 --> 00:08:04,710
was a particular path that was mentioned

177
00:08:01,800 --> 00:08:06,300
or maybe it's just a blog post about

178
00:08:04,710 --> 00:08:08,760
some interesting files that someone's

179
00:08:06,300 --> 00:08:11,880
found or something like that I'll just

180
00:08:08,760 --> 00:08:14,700
add to it but I try to keep the quality

181
00:08:11,880 --> 00:08:19,200
high and the size small so that I can

182
00:08:14,700 --> 00:08:22,800
use it quickly one of the most powerful

183
00:08:19,200 --> 00:08:26,310
things that I think when bug hunting is

184
00:08:22,800 --> 00:08:28,550
I have a target specific list so rather

185
00:08:26,310 --> 00:08:31,020
than one of these generic lists with

186
00:08:28,550 --> 00:08:33,840
lots of entries are almost definitely

187
00:08:31,020 --> 00:08:36,598
not going to exist so for example if

188
00:08:33,840 --> 00:08:40,110
you're looking at an Apache server

189
00:08:36,599 --> 00:08:42,630
running pH mod PHP there's no point

190
00:08:40,110 --> 00:08:44,220
looking for all those dot aspx files

191
00:08:42,630 --> 00:08:49,260
because they're almost certainly not

192
00:08:44,220 --> 00:08:50,540
going to exist almost certainly so let's

193
00:08:49,260 --> 00:08:53,660
take a look

194
00:08:50,540 --> 00:08:56,719
example of building like a path guessing

195
00:08:53,660 --> 00:08:59,569
word list for a specific target as an

196
00:08:56,720 --> 00:09:02,779
example so we're gonna need a need which

197
00:08:59,570 --> 00:09:05,180
in this case is we want to guess what

198
00:09:02,779 --> 00:09:07,310
directories or paths exist on a web

199
00:09:05,180 --> 00:09:11,359
server we're going to need a source of

200
00:09:07,310 --> 00:09:14,029
data somewhere to actually get the

201
00:09:11,360 --> 00:09:16,670
information we need to build our word

202
00:09:14,029 --> 00:09:19,430
list we need a way to process the data

203
00:09:16,670 --> 00:09:21,529
so depending on where we go from and the

204
00:09:19,430 --> 00:09:24,258
data might not be in the format that we

205
00:09:21,529 --> 00:09:26,540
require so we need a way to where you

206
00:09:24,259 --> 00:09:28,850
process it and then we need a way to use

207
00:09:26,540 --> 00:09:32,180
the word list which is kind of mostly

208
00:09:28,850 --> 00:09:34,550
outside the scope of this talk but we'll

209
00:09:32,180 --> 00:09:39,229
pay a very small amount of attention to

210
00:09:34,550 --> 00:09:41,599
it anyway so first off where are we

211
00:09:39,230 --> 00:09:44,540
going to get past data from we want lots

212
00:09:41,600 --> 00:09:47,509
and lots of URLs specific to the target

213
00:09:44,540 --> 00:09:50,060
that we can extract the data from and a

214
00:09:47,509 --> 00:09:53,300
really good nice easy source of that is

215
00:09:50,060 --> 00:09:54,920
in your burp suite history everything

216
00:09:53,300 --> 00:09:58,160
that's been proxied through your burp

217
00:09:54,920 --> 00:10:00,290
suite project has been saved it's in the

218
00:09:58,160 --> 00:10:02,480
target tab in the sitemap you can

219
00:10:00,290 --> 00:10:04,420
right-click a host click copy URLs in

220
00:10:02,480 --> 00:10:09,079
this host and you've got a list of URLs

221
00:10:04,420 --> 00:10:11,870
so really nice source of things Google

222
00:10:09,079 --> 00:10:13,519
Docs are also really handy for this but

223
00:10:11,870 --> 00:10:15,579
they could be a little bit tedious if

224
00:10:13,519 --> 00:10:18,980
you sort of copy and pasting everything

225
00:10:15,579 --> 00:10:22,969
Google generally do not like people

226
00:10:18,980 --> 00:10:25,940
scraping their search results but I have

227
00:10:22,970 --> 00:10:28,010
a little trick to make it not automated

228
00:10:25,940 --> 00:10:30,949
but a little bit easier which I'll I'll

229
00:10:28,010 --> 00:10:35,839
show you in a minute those tools like

230
00:10:30,949 --> 00:10:37,699
garel or get all URLs which fetch URLs

231
00:10:35,839 --> 00:10:39,980
for a particular domain from the wayback

232
00:10:37,699 --> 00:10:43,279
machine virustotal and a bunch of other

233
00:10:39,980 --> 00:10:45,709
services and I may have also written a

234
00:10:43,279 --> 00:10:47,959
tool myself that does this too but I

235
00:10:45,709 --> 00:10:49,989
thought I'd give someone else some

236
00:10:47,959 --> 00:10:54,050
credit for a change

237
00:10:49,990 --> 00:10:57,380
sitemaps also you find a sitemap XML for

238
00:10:54,050 --> 00:10:59,120
a particular domain I was going to tell

239
00:10:57,380 --> 00:11:02,300
you actually quite a lot about what's

240
00:10:59,120 --> 00:11:03,870
there and one thing I want to point out

241
00:11:02,300 --> 00:11:07,020
is remember doing

242
00:11:03,870 --> 00:11:09,690
pass from all of your targets domains so

243
00:11:07,020 --> 00:11:11,670
sometimes a boring path on one domain

244
00:11:09,690 --> 00:11:15,330
may actually be quite interesting on

245
00:11:11,670 --> 00:11:17,189
another and what I mean by that is you

246
00:11:15,330 --> 00:11:19,950
know some companies will have different

247
00:11:17,190 --> 00:11:23,040
applications running on different

248
00:11:19,950 --> 00:11:25,410
domains but running out of the same

249
00:11:23,040 --> 00:11:27,329
codebase so the code base can run more

250
00:11:25,410 --> 00:11:30,150
than one application and sometimes

251
00:11:27,330 --> 00:11:32,550
you'll find that a path which is totally

252
00:11:30,150 --> 00:11:34,560
innocuous and does what it's supposed to

253
00:11:32,550 --> 00:11:36,810
on one domain isn't quite configured

254
00:11:34,560 --> 00:11:39,239
right to run on a different domain but

255
00:11:36,810 --> 00:11:41,189
still responds maybe it gives you errors

256
00:11:39,240 --> 00:11:43,800
or maybe there's some checking missing

257
00:11:41,190 --> 00:11:45,720
or something like that but the other

258
00:11:43,800 --> 00:11:49,020
thing there is you know if we're

259
00:11:45,720 --> 00:11:51,570
fetching URLs from wayback machine it

260
00:11:49,020 --> 00:11:53,819
might be the case that a path is only

261
00:11:51,570 --> 00:11:57,720
known about on one particular subdomain

262
00:11:53,820 --> 00:11:59,760
and is interesting where but exists

263
00:11:57,720 --> 00:12:01,830
everywhere so you know you want to have

264
00:11:59,760 --> 00:12:06,180
a look in all of the different places

265
00:12:01,830 --> 00:12:07,980
that we can and I mentioned in Google

266
00:12:06,180 --> 00:12:10,050
talking and how it was a little bit of a

267
00:12:07,980 --> 00:12:12,630
pain so I want to show you something I

268
00:12:10,050 --> 00:12:18,329
hacked together to try and make it a

269
00:12:12,630 --> 00:12:20,820
little bit easier so you are probably

270
00:12:18,330 --> 00:12:23,010
familiar with Google Docs like this one

271
00:12:20,820 --> 00:12:26,640
so let's look for everything on

272
00:12:23,010 --> 00:12:30,810
yahoo.com that has an extension of PHP

273
00:12:26,640 --> 00:12:32,670
and why not and straight away you know

274
00:12:30,810 --> 00:12:34,079
I've got an I'm not a robot thing and

275
00:12:32,670 --> 00:12:39,479
this is the problem with trying to

276
00:12:34,080 --> 00:12:41,700
automate this kind of searches is you're

277
00:12:39,480 --> 00:12:45,089
going to hit these captures or I'm not a

278
00:12:41,700 --> 00:12:48,209
robot tick boxes all the time and it's

279
00:12:45,089 --> 00:12:49,890
really hard to script so what I could do

280
00:12:48,209 --> 00:12:52,199
is sort of go through all of these

281
00:12:49,890 --> 00:12:54,660
results and open them up in new tabs or

282
00:12:52,200 --> 00:12:56,209
something copy the URLs but that would

283
00:12:54,660 --> 00:12:58,469
take a really really long time

284
00:12:56,209 --> 00:13:01,829
so what I built was this little

285
00:12:58,470 --> 00:13:06,200
extension I call it web paste it lives

286
00:13:01,830 --> 00:13:09,540
in my hacks repo there's no real

287
00:13:06,200 --> 00:13:12,410
documentation to speak of so I think if

288
00:13:09,540 --> 00:13:14,849
you want to use it you need to be

289
00:13:12,410 --> 00:13:16,060
willing to put at least a little bit of

290
00:13:14,850 --> 00:13:17,800
effort in

291
00:13:16,060 --> 00:13:19,329
even if it was documented ballast I

292
00:13:17,800 --> 00:13:24,760
think you need to still put a bit of

293
00:13:19,330 --> 00:13:26,440
effort in but what it does is it

294
00:13:24,760 --> 00:13:27,910
provides this list of buttons and I'll

295
00:13:26,440 --> 00:13:30,070
show you the configuration for these in

296
00:13:27,910 --> 00:13:32,500
the moment and one of them says google

297
00:13:30,070 --> 00:13:36,600
urls and right now it won't do anything

298
00:13:32,500 --> 00:13:41,080
all I need to do is run a companion app

299
00:13:36,600 --> 00:13:42,520
called web paste in my command line and

300
00:13:41,080 --> 00:13:45,310
you can see it's not actually doing

301
00:13:42,520 --> 00:13:47,370
anything right now but if I go back to

302
00:13:45,310 --> 00:13:51,160
my Google search click the web paste

303
00:13:47,370 --> 00:13:54,550
icon up the top click Google URLs you

304
00:13:51,160 --> 00:13:57,189
can see it's moved to the next page but

305
00:13:54,550 --> 00:14:01,030
what it actually did was extract all of

306
00:13:57,190 --> 00:14:03,160
the URLs from that search page send them

307
00:14:01,030 --> 00:14:06,449
to the companion application which is

308
00:14:03,160 --> 00:14:10,060
actually a little webserver and then

309
00:14:06,450 --> 00:14:12,610
move to the next page of the results so

310
00:14:10,060 --> 00:14:15,390
the end result is I can sit here with

311
00:14:12,610 --> 00:14:18,010
this menu open clicking this button

312
00:14:15,390 --> 00:14:22,150
moving to the next page really easily

313
00:14:18,010 --> 00:14:24,580
and you know if I get any of those I am

314
00:14:22,150 --> 00:14:26,980
NOT a robot prompts I can deal with them

315
00:14:24,580 --> 00:14:30,370
you know click all over the images that

316
00:14:26,980 --> 00:14:33,730
contain fire hydrants and be on my way

317
00:14:30,370 --> 00:14:35,680
without having to worry about being by

318
00:14:33,730 --> 00:14:38,850
breaking Google's Terms of Service or

319
00:14:35,680 --> 00:14:41,349
anything which I don't think I'm doing

320
00:14:38,850 --> 00:14:43,600
because you know I'm still a human I'm

321
00:14:41,350 --> 00:14:46,630
just clicking a button I'm just saving

322
00:14:43,600 --> 00:14:48,700
myself a little bit of time so we can

323
00:14:46,630 --> 00:14:52,900
see all of those URLs appeared in this

324
00:14:48,700 --> 00:14:54,340
list and that's great and all but you

325
00:14:52,900 --> 00:14:56,020
know from here we could either copy and

326
00:14:54,340 --> 00:15:00,850
paste them or we could have put them

327
00:14:56,020 --> 00:15:05,290
into a file in the first place by

328
00:15:00,850 --> 00:15:11,860
running something like web paste say T -

329
00:15:05,290 --> 00:15:14,469
a Docs txt or something like that so if

330
00:15:11,860 --> 00:15:19,060
we go back to the browser click a button

331
00:15:14,470 --> 00:15:22,810
a few times we'll see that there's some

332
00:15:19,060 --> 00:15:25,479
URLs come through and they also exist in

333
00:15:22,810 --> 00:15:27,479
that Doc's txt as well so we can then

334
00:15:25,480 --> 00:15:29,950
use them for whatever we want

335
00:15:27,480 --> 00:15:32,080
so I'll just show you a little bit of

336
00:15:29,950 --> 00:15:34,630
the configuration of this web-based

337
00:15:32,080 --> 00:15:37,110
extension so you can get an idea of how

338
00:15:34,630 --> 00:15:40,180
it does what it does

339
00:15:37,110 --> 00:15:42,790
so if we right-click it and go to the

340
00:15:40,180 --> 00:15:45,099
options we'll see

341
00:15:42,790 --> 00:15:48,459
firstly that I am NOT a graphic designer

342
00:15:45,100 --> 00:15:50,230
in any way shape or form and secondly

343
00:15:48,459 --> 00:15:51,939
there's a couple of bits of

344
00:15:50,230 --> 00:15:55,570
configuration at the top one of which is

345
00:15:51,940 --> 00:15:57,250
a server which is where that little web

346
00:15:55,570 --> 00:16:01,240
paste companion app is going to be

347
00:15:57,250 --> 00:16:03,970
running and it defaults to port 8080 but

348
00:16:01,240 --> 00:16:06,279
you can change it if you want to and

349
00:16:03,970 --> 00:16:14,970
also there's a token which is completely

350
00:16:06,279 --> 00:16:17,500
arbitrary and it has to be exported in

351
00:16:14,970 --> 00:16:19,390
the terminal as well that you're running

352
00:16:17,500 --> 00:16:23,290
the companion app in so they have to

353
00:16:19,390 --> 00:16:25,449
match and the reason for that is that I

354
00:16:23,290 --> 00:16:27,339
guess it's effectively standing in for

355
00:16:25,450 --> 00:16:30,540
some kind of authentication mechanism

356
00:16:27,339 --> 00:16:34,750
between the extension and the web paste

357
00:16:30,540 --> 00:16:36,819
companion app so you know you could run

358
00:16:34,750 --> 00:16:39,160
this on a VPS or something like that if

359
00:16:36,820 --> 00:16:41,740
you wanted to so each one of these

360
00:16:39,160 --> 00:16:43,540
snippets is not something that's bundled

361
00:16:41,740 --> 00:16:45,279
with the extension but what it really is

362
00:16:43,540 --> 00:16:49,540
is a name and then a couple of pieces of

363
00:16:45,279 --> 00:16:52,660
JavaScript so we said here the code

364
00:16:49,540 --> 00:16:59,110
should return an array of strings so if

365
00:16:52,660 --> 00:17:01,719
I move back to my Google tab over here

366
00:16:59,110 --> 00:17:03,640
and pull up in a console and I run this

367
00:17:01,720 --> 00:17:07,870
bit of JavaScript you can see what we

368
00:17:03,640 --> 00:17:10,750
get back is an array of URLs so we're

369
00:17:07,869 --> 00:17:13,958
using a query selector with a CSS

370
00:17:10,750 --> 00:17:18,369
selector to find the anchor tags in the

371
00:17:13,959 --> 00:17:20,760
Google search results that have the H

372
00:17:18,369 --> 00:17:24,790
refs that we want and we're using a map

373
00:17:20,760 --> 00:17:29,440
over those to extract the href attribute

374
00:17:24,790 --> 00:17:31,809
which is where the URL is the second bit

375
00:17:29,440 --> 00:17:33,850
of this though is what happens when that

376
00:17:31,809 --> 00:17:35,860
has succeeded and run so this is the

377
00:17:33,850 --> 00:17:37,389
part that we can use to move to the next

378
00:17:35,860 --> 00:17:40,090
page of results so we don't have to do

379
00:17:37,390 --> 00:17:41,140
it manually so in this case it's fairly

380
00:17:40,090 --> 00:17:46,659
simple we set

381
00:17:41,140 --> 00:17:49,390
location to the value of the next link

382
00:17:46,660 --> 00:17:52,000
so if I paste that into the console over

383
00:17:49,390 --> 00:17:53,860
here we should see we're currently page

384
00:17:52,000 --> 00:17:56,890
ten of results and when I pasted it we

385
00:17:53,860 --> 00:17:59,469
move on to page eleven so that's all its

386
00:17:56,890 --> 00:18:02,050
really doing is the array of strings

387
00:17:59,470 --> 00:18:03,460
that's returned here gets sent to that

388
00:18:02,050 --> 00:18:05,230
companion app and then you can do

389
00:18:03,460 --> 00:18:07,360
whatever you want with it and I have a

390
00:18:05,230 --> 00:18:10,540
few of these set up for doing different

391
00:18:07,360 --> 00:18:14,649
kinds of Doc's so one to extract the

392
00:18:10,540 --> 00:18:18,399
github repo URLs from lists of github

393
00:18:14,650 --> 00:18:21,040
search results one to pull out strings

394
00:18:18,400 --> 00:18:25,150
from the beatified j/s source code from

395
00:18:21,040 --> 00:18:28,540
the JSP to fire extension that I use one

396
00:18:25,150 --> 00:18:31,830
to pull out clone URLs for results on

397
00:18:28,540 --> 00:18:36,310
software heritage IPS from census

398
00:18:31,830 --> 00:18:38,260
results and the scope from a common

399
00:18:36,310 --> 00:18:39,669
profile pages as well and you know

400
00:18:38,260 --> 00:18:43,060
sooner or later these are going to break

401
00:18:39,670 --> 00:18:45,910
but they work quite well and they're

402
00:18:43,060 --> 00:18:48,159
relatively easy to maintain so but for

403
00:18:45,910 --> 00:18:51,400
google talking especially for building

404
00:18:48,160 --> 00:18:56,740
word lists from these results i found it

405
00:18:51,400 --> 00:18:58,630
to be incredibly useful so now we got a

406
00:18:56,740 --> 00:19:00,790
load of path data or actually we've got

407
00:18:58,630 --> 00:19:02,950
a load of urls we need to process it

408
00:19:00,790 --> 00:19:05,379
somehow you know I don't want the full

409
00:19:02,950 --> 00:19:07,930
URLs with the domain on attached and

410
00:19:05,380 --> 00:19:09,280
that sort of thing and a lot of the time

411
00:19:07,930 --> 00:19:13,330
I probably don't want the query string

412
00:19:09,280 --> 00:19:17,200
either or any page fragments or anything

413
00:19:13,330 --> 00:19:21,189
like that so here in this example using

414
00:19:17,200 --> 00:19:24,130
go to fetch URLs for example dotnet I'm

415
00:19:21,190 --> 00:19:25,990
using a tool of mine called unfurl which

416
00:19:24,130 --> 00:19:29,170
i think is probably one of the tools

417
00:19:25,990 --> 00:19:31,180
that I use the most of the tools I've

418
00:19:29,170 --> 00:19:33,100
written it's certainly one that I'm very

419
00:19:31,180 --> 00:19:36,250
happy with the name of I'm actually

420
00:19:33,100 --> 00:19:38,649
quite proud of myself for that one so

421
00:19:36,250 --> 00:19:41,290
what this command here means is use gal

422
00:19:38,650 --> 00:19:44,680
to fetch URLs for example Don that and

423
00:19:41,290 --> 00:19:47,260
then pipe or take the output of this

424
00:19:44,680 --> 00:19:50,050
command and feed it to the input of the

425
00:19:47,260 --> 00:19:53,500
unfurl command we have the - new flag

426
00:19:50,050 --> 00:19:56,800
which means only produce unique results

427
00:19:53,500 --> 00:20:00,160
and then our parents say I actually want

428
00:19:56,800 --> 00:20:02,770
the paths part of the URL so there are

429
00:20:00,160 --> 00:20:05,830
other options too which I'll show you in

430
00:20:02,770 --> 00:20:09,220
a sec but this gives us all of the

431
00:20:05,830 --> 00:20:12,070
unique paths from all of those URLs and

432
00:20:09,220 --> 00:20:14,500
we could just use those as our word list

433
00:20:12,070 --> 00:20:16,870
if we wanted to and it would be

434
00:20:14,500 --> 00:20:19,180
relatively fast if we did that but I

435
00:20:16,870 --> 00:20:22,239
think we would miss things as well so

436
00:20:19,180 --> 00:20:24,370
you know not everything that exists on

437
00:20:22,240 --> 00:20:28,360
these domains is going to be in those

438
00:20:24,370 --> 00:20:29,800
archives and maybe a better idea would

439
00:20:28,360 --> 00:20:34,149
be to split them apart

440
00:20:29,800 --> 00:20:37,000
so you can see we have here tilde Susan

441
00:20:34,150 --> 00:20:39,340
slash wiki and you know that might not

442
00:20:37,000 --> 00:20:41,980
exist but some other directory slash

443
00:20:39,340 --> 00:20:44,620
wiki might exist so actually we want to

444
00:20:41,980 --> 00:20:47,560
pull them apart and I'm doing that here

445
00:20:44,620 --> 00:20:50,949
with said so said is the stream edit on

446
00:20:47,560 --> 00:20:52,629
our text stream editor and here I've

447
00:20:50,950 --> 00:20:56,110
just given it a regular expression to

448
00:20:52,630 --> 00:20:58,630
say search for a pattern which is the

449
00:20:56,110 --> 00:21:01,689
part between the first two hashes which

450
00:20:58,630 --> 00:21:04,660
is just a forward slash and replace it

451
00:21:01,690 --> 00:21:06,940
with a new line character and then this

452
00:21:04,660 --> 00:21:09,310
hashes the end of the pattern and the G

453
00:21:06,940 --> 00:21:12,160
is for global so if it appears more than

454
00:21:09,310 --> 00:21:14,860
once on a line both will be replaced by

455
00:21:12,160 --> 00:21:17,770
default only the the first one's

456
00:21:14,860 --> 00:21:20,709
replaced and there's an input to that we

457
00:21:17,770 --> 00:21:23,110
used a path stock txt which is just a

458
00:21:20,710 --> 00:21:24,820
saved output of the previous one

459
00:21:23,110 --> 00:21:27,100
and because there's going to be lots of

460
00:21:24,820 --> 00:21:29,050
duplicates in there so we know you know

461
00:21:27,100 --> 00:21:31,090
tilde Susan appears lots of times here

462
00:21:29,050 --> 00:21:34,930
till the user appears lots of times here

463
00:21:31,090 --> 00:21:37,300
we use sort - U which sorts the output

464
00:21:34,930 --> 00:21:40,840
and removes the duplicates only gives

465
00:21:37,300 --> 00:21:43,330
you the unique outputs so we remove all

466
00:21:40,840 --> 00:21:44,949
of the duplicates that way and like I

467
00:21:43,330 --> 00:21:47,500
said you know then we want to recombine

468
00:21:44,950 --> 00:21:51,400
them recursively somehow using your tool

469
00:21:47,500 --> 00:21:55,990
of choice so here you would want to look

470
00:21:51,400 --> 00:21:57,880
for slash me but also slash media and

471
00:21:55,990 --> 00:22:00,610
then also slash me slash member dot PHP

472
00:21:57,880 --> 00:22:05,380
and slash needed media dot member dot

473
00:22:00,610 --> 00:22:06,679
PHP and so on and so forth so while

474
00:22:05,380 --> 00:22:10,010
we're here on

475
00:22:06,680 --> 00:22:12,290
well has a few more tricks up its sleeve

476
00:22:10,010 --> 00:22:15,140
for other kinds of words lists that you

477
00:22:12,290 --> 00:22:17,120
might be building so you can also pull

478
00:22:15,140 --> 00:22:19,010
out the query string keys and the values

479
00:22:17,120 --> 00:22:21,500
or you might call them the parameter

480
00:22:19,010 --> 00:22:24,290
names I guess I went with keys when I

481
00:22:21,500 --> 00:22:26,180
built the tool the domains also portions

482
00:22:24,290 --> 00:22:28,580
of the domains like the top-level

483
00:22:26,180 --> 00:22:32,570
fragment the subdomain part the

484
00:22:28,580 --> 00:22:35,030
fragments the ports and generally it's

485
00:22:32,570 --> 00:22:37,370
pretty flexible there's a format option

486
00:22:35,030 --> 00:22:39,649
so you can have a effectively a custom

487
00:22:37,370 --> 00:22:42,350
output format for it as well if you deal

488
00:22:39,650 --> 00:22:43,520
with big text files full of URLs quite

489
00:22:42,350 --> 00:22:48,290
often I think you'll find it quite

490
00:22:43,520 --> 00:22:50,240
useful so now that we've got a list we

491
00:22:48,290 --> 00:22:52,700
want to use it and we have a lot of

492
00:22:50,240 --> 00:22:55,520
options here so people would use der

493
00:22:52,700 --> 00:22:58,070
Buster go Buster many other things that

494
00:22:55,520 --> 00:23:01,760
end in Buster and you probably already

495
00:22:58,070 --> 00:23:05,120
have a favorite but if you don't full is

496
00:23:01,760 --> 00:23:09,080
good or 4th off I'm not quite sure or on

497
00:23:05,120 --> 00:23:11,750
what the official pronunciation is but

498
00:23:09,080 --> 00:23:14,870
sweets intruder and turbo intruder are

499
00:23:11,750 --> 00:23:16,850
both very good especially if you need a

500
00:23:14,870 --> 00:23:18,649
great deal of control over the request

501
00:23:16,850 --> 00:23:23,149
and you maybe want to be changing more

502
00:23:18,650 --> 00:23:25,220
than one thing at once or maybe you want

503
00:23:23,150 --> 00:23:27,710
to be using hack Verta or something to

504
00:23:25,220 --> 00:23:30,260
apply certain encodings to things that's

505
00:23:27,710 --> 00:23:33,290
very useful and then I have a few tools

506
00:23:30,260 --> 00:23:36,020
of my own too so I have Meg which has

507
00:23:33,290 --> 00:23:37,730
been around for quite a while and you

508
00:23:36,020 --> 00:23:39,080
know has some shortcomings but I think

509
00:23:37,730 --> 00:23:40,880
is still useful

510
00:23:39,080 --> 00:23:43,820
Kankuro which is designed for running

511
00:23:40,880 --> 00:23:46,070
curl in parallel or concurrently hence

512
00:23:43,820 --> 00:23:48,129
the name and then something I've been

513
00:23:46,070 --> 00:23:51,649
playing with more recently called FFF

514
00:23:48,130 --> 00:23:54,740
which stands for the fairly fast fetcher

515
00:23:51,650 --> 00:23:57,620
and I apologize for the name of that and

516
00:23:54,740 --> 00:24:00,970
how close it is to fuff but I think I

517
00:23:57,620 --> 00:24:03,229
named it before I was familiar with and

518
00:24:00,970 --> 00:24:04,610
it's just kind of stuck with me and I

519
00:24:03,230 --> 00:24:07,790
haven't thought of another name for it

520
00:24:04,610 --> 00:24:11,270
yet but we'll see it in action later on

521
00:24:07,790 --> 00:24:12,220
anyway so here's an example of using 4/4

522
00:24:11,270 --> 00:24:15,290
off

523
00:24:12,220 --> 00:24:17,180
and the usage is pretty simple so we

524
00:24:15,290 --> 00:24:19,280
give it a word list with dash W so this

525
00:24:17,180 --> 00:24:20,360
is our paths dot txt that we created

526
00:24:19,280 --> 00:24:23,960
previously

527
00:24:20,360 --> 00:24:26,689
and then some URL to use so we have

528
00:24:23,960 --> 00:24:29,030
example dotnet slash fuzz in all capital

529
00:24:26,690 --> 00:24:32,480
letters and this fuzz will be replaced

530
00:24:29,030 --> 00:24:34,879
with each line of the path stop txt in

531
00:24:32,480 --> 00:24:36,500
turn and then you can change the

532
00:24:34,880 --> 00:24:39,350
filtering options or what it responds to

533
00:24:36,500 --> 00:24:41,210
and what sort of thing as well and for

534
00:24:39,350 --> 00:24:42,830
the record it's significantly more

535
00:24:41,210 --> 00:24:46,070
powerful and that has a lot more options

536
00:24:42,830 --> 00:24:50,090
you should definitely look into how it

537
00:24:46,070 --> 00:24:56,000
works and what it can do so you know

538
00:24:50,090 --> 00:24:59,418
that was all useful but we're still sort

539
00:24:56,000 --> 00:25:02,570
of only finding things that are already

540
00:24:59,419 --> 00:25:05,809
known I guess you know they were found

541
00:25:02,570 --> 00:25:07,159
by the wayback machine at some point you

542
00:25:05,809 --> 00:25:09,139
know if that's the source were using or

543
00:25:07,160 --> 00:25:12,080
they were already found and we're in

544
00:25:09,140 --> 00:25:14,690
your burp suite history but to find

545
00:25:12,080 --> 00:25:17,299
things that are perhaps not linked but

546
00:25:14,690 --> 00:25:19,520
may exist and we still want a list

547
00:25:17,299 --> 00:25:21,379
that's quite specific to a target one of

548
00:25:19,520 --> 00:25:25,309
the techniques I've come up with is a

549
00:25:21,380 --> 00:25:27,650
way to get a list of words that are at

550
00:25:25,309 --> 00:25:30,830
least more likely to be unique to a

551
00:25:27,650 --> 00:25:33,080
target so if I fetch for example just a

552
00:25:30,830 --> 00:25:34,820
homepage of a website there's going to

553
00:25:33,080 --> 00:25:38,120
be a lot of way words there that are

554
00:25:34,820 --> 00:25:40,928
really definitely not specific to a

555
00:25:38,120 --> 00:25:46,189
target like basic English words for one

556
00:25:40,929 --> 00:25:48,830
also HTML tags things like body or div

557
00:25:46,190 --> 00:25:50,960
for example you know going to show up in

558
00:25:48,830 --> 00:25:53,030
basically every web page and I don't

559
00:25:50,960 --> 00:25:57,080
necessarily want to be searching for

560
00:25:53,030 --> 00:26:00,309
those so one of the things that you can

561
00:25:57,080 --> 00:26:04,100
do is use a second completely unrelated

562
00:26:00,309 --> 00:26:07,700
source of data to sort of remove a lot

563
00:26:04,100 --> 00:26:10,969
of those common words so here as an

564
00:26:07,700 --> 00:26:12,380
example I'm using the HTML RFC because I

565
00:26:10,970 --> 00:26:15,049
know it's going to include all of the

566
00:26:12,380 --> 00:26:16,820
tag names that are in use and a lot of

567
00:26:15,049 --> 00:26:19,309
other technical jargon that might show

568
00:26:16,820 --> 00:26:21,168
up in source code that in this case I

569
00:26:19,309 --> 00:26:25,690
don't really care about so here I've

570
00:26:21,169 --> 00:26:30,320
used curl to fetch two files HTML RFC

571
00:26:25,690 --> 00:26:32,690
1866 and I saw that in RFC dot HTML and

572
00:26:30,320 --> 00:26:33,600
then the Yahoo UK home page which I'm

573
00:26:32,690 --> 00:26:37,620
storing in

574
00:26:33,600 --> 00:26:40,320
HTML so the next thing we need to do is

575
00:26:37,620 --> 00:26:41,549
what's called tokenization or at least

576
00:26:40,320 --> 00:26:43,350
that's what I'm calling it

577
00:26:41,549 --> 00:26:45,900
really you know we want to extract all

578
00:26:43,350 --> 00:26:48,750
of the words from those files without

579
00:26:45,900 --> 00:26:50,640
caring about special characters and

580
00:26:48,750 --> 00:26:53,820
quotes and less than and greater than

581
00:26:50,640 --> 00:26:57,840
all of those things that show up in HTML

582
00:26:53,820 --> 00:26:59,340
source so I have a silly sort of alpha

583
00:26:57,840 --> 00:27:02,879
quality tool for doing this called TOC

584
00:26:59,340 --> 00:27:07,199
you just send it text to its input with

585
00:27:02,880 --> 00:27:10,049
a pipe and it outputs words that appear

586
00:27:07,200 --> 00:27:10,919
it doesn't you know remove duplicates or

587
00:27:10,049 --> 00:27:13,470
anything like that

588
00:27:10,919 --> 00:27:16,020
it reads one byte at a time when it hits

589
00:27:13,470 --> 00:27:18,330
a non word character it spits out the

590
00:27:16,020 --> 00:27:20,908
word it's been accumulating and moves on

591
00:27:18,330 --> 00:27:23,000
to the next one you can give it a list

592
00:27:20,909 --> 00:27:25,440
of characters that it should accept so

593
00:27:23,000 --> 00:27:27,390
by default it doesn't accept dashes and

594
00:27:25,440 --> 00:27:29,640
dot's for example but you can force it

595
00:27:27,390 --> 00:27:32,640
to do that if you're looking for

596
00:27:29,640 --> 00:27:36,780
candidates for domain name forcing or

597
00:27:32,640 --> 00:27:39,210
guessing I should say for example or you

598
00:27:36,780 --> 00:27:40,470
can use grep with some creative regex

599
00:27:39,210 --> 00:27:44,909
ease though or do whatever you like but

600
00:27:40,470 --> 00:27:46,470
I'm using TOC here in this example and a

601
00:27:44,909 --> 00:27:48,390
very important prerequisite here is I

602
00:27:46,470 --> 00:27:51,210
want to do some normalization and

603
00:27:48,390 --> 00:27:53,640
sorting on these lists of words so I'm

604
00:27:51,210 --> 00:27:55,710
going to use duplicates remove

605
00:27:53,640 --> 00:27:58,830
duplicates should I say sorry with sort

606
00:27:55,710 --> 00:28:02,010
- you own in this case and this isn't

607
00:27:58,830 --> 00:28:05,158
necessary but I'm using TR or translate

608
00:28:02,010 --> 00:28:07,320
to move let it change letters in the

609
00:28:05,159 --> 00:28:09,179
classic upper case to the class of the

610
00:28:07,320 --> 00:28:11,850
lower case so I'm replying that lower

611
00:28:09,179 --> 00:28:13,500
case transformation and again depending

612
00:28:11,850 --> 00:28:15,780
on your use case you may or may not want

613
00:28:13,500 --> 00:28:17,970
to do that but otherwise you know I'm

614
00:28:15,780 --> 00:28:20,700
extracting the words I'm sorting them so

615
00:28:17,970 --> 00:28:23,010
that both lists are sorted and the

616
00:28:20,700 --> 00:28:24,210
reason we're doing that is because the

617
00:28:23,010 --> 00:28:27,480
tool that we're going to use is called

618
00:28:24,210 --> 00:28:32,039
cocom requires that those lists be

619
00:28:27,480 --> 00:28:37,049
sorted so the common tool compares

620
00:28:32,039 --> 00:28:39,600
sorted files and tells you which lines

621
00:28:37,049 --> 00:28:42,260
are unique in each file and by default

622
00:28:39,600 --> 00:28:44,360
you get three columns of output

623
00:28:42,260 --> 00:28:46,820
and this is a part of the reason that

624
00:28:44,360 --> 00:28:50,209
the options for it a little bit

625
00:28:46,820 --> 00:28:53,929
confusing I think so this is part of the

626
00:28:50,210 --> 00:28:55,700
man page from the comm utility and we

627
00:28:53,930 --> 00:28:57,890
can see there's column ones two and

628
00:28:55,700 --> 00:29:00,590
three where one is lines unique to file

629
00:28:57,890 --> 00:29:02,360
one two is lines you need to file two so

630
00:29:00,590 --> 00:29:05,030
that would be the RFC words and Yahoo

631
00:29:02,360 --> 00:29:07,520
words respectively and three years lines

632
00:29:05,030 --> 00:29:09,889
that appear in both files and in this

633
00:29:07,520 --> 00:29:12,080
case I only care about the words in

634
00:29:09,890 --> 00:29:15,920
column two so I'm going to suppress

635
00:29:12,080 --> 00:29:20,050
columns 1 3 with - 1 - 3 which can be

636
00:29:15,920 --> 00:29:23,000
combined so in 0 we get some quite yahoo

637
00:29:20,050 --> 00:29:26,060
specific looking terminology appearing

638
00:29:23,000 --> 00:29:27,860
in this list and actually off the side

639
00:29:26,060 --> 00:29:30,020
of the screenshot there's a head in the

640
00:29:27,860 --> 00:29:31,580
tail command to sort of give us a window

641
00:29:30,020 --> 00:29:33,110
somewhere into the middle of the list

642
00:29:31,580 --> 00:29:36,250
that looked a bit more interesting but

643
00:29:33,110 --> 00:29:39,709
you know the point still stands that

644
00:29:36,250 --> 00:29:42,440
we've ignored a lot of the generic words

645
00:29:39,710 --> 00:29:44,810
that we don't care about and use that to

646
00:29:42,440 --> 00:29:47,270
try and zero in on the things that are

647
00:29:44,810 --> 00:29:49,669
specific to the target and that may

648
00:29:47,270 --> 00:29:54,260
prove to be more useful in a variety of

649
00:29:49,670 --> 00:29:56,840
situations including path guessing so

650
00:29:54,260 --> 00:30:00,560
you know that was with just one HTML

651
00:29:56,840 --> 00:30:04,189
page but you know in reality most sites

652
00:30:00,560 --> 00:30:06,139
have more than one HTML page we might

653
00:30:04,190 --> 00:30:09,410
want to fetch lots of them so you can

654
00:30:06,140 --> 00:30:11,660
use tools like Meg to do that you know

655
00:30:09,410 --> 00:30:13,340
it does a fairly good job of that or you

656
00:30:11,660 --> 00:30:15,440
can just you know write a bash script

657
00:30:13,340 --> 00:30:17,720
use curl you can use W get with it's

658
00:30:15,440 --> 00:30:19,370
mirroring function anything like that

659
00:30:17,720 --> 00:30:22,610
but one of the things I found to be

660
00:30:19,370 --> 00:30:25,250
really useful especially for parameter

661
00:30:22,610 --> 00:30:29,689
guessing API name guessing and that sort

662
00:30:25,250 --> 00:30:31,460
of thing is JavaScript files so one of

663
00:30:29,690 --> 00:30:34,700
the things I found myself doing from

664
00:30:31,460 --> 00:30:36,620
time to time is wanting to fetch the

665
00:30:34,700 --> 00:30:39,490
JavaScript files associated with

666
00:30:36,620 --> 00:30:42,169
webpages and it turns out to not be

667
00:30:39,490 --> 00:30:44,840
super trivial to do I've been doing some

668
00:30:42,170 --> 00:30:47,180
experiments of using headless chrome to

669
00:30:44,840 --> 00:30:51,889
do it but they're not quite finished yet

670
00:30:47,180 --> 00:30:54,380
so I might talk more about that as in

671
00:30:51,890 --> 00:30:55,800
the future but for now kind of a

672
00:30:54,380 --> 00:30:58,320
relatively low

673
00:30:55,800 --> 00:31:02,399
take away you can do this is to fetch

674
00:30:58,320 --> 00:31:04,889
lots of pages for a site so here we're

675
00:31:02,400 --> 00:31:07,230
using gal to fetch URLs for yahoo.com

676
00:31:04,890 --> 00:31:09,090
and we're just going to take a thousand

677
00:31:07,230 --> 00:31:12,840
of them and I don't want to request too

678
00:31:09,090 --> 00:31:14,060
many I'm going to use my FFF tool the

679
00:31:12,840 --> 00:31:16,770
fairly fast betcha

680
00:31:14,060 --> 00:31:19,919
and what these options mean is I want to

681
00:31:16,770 --> 00:31:22,320
save responses with the 200 response

682
00:31:19,920 --> 00:31:24,150
code and also those with the 404

683
00:31:22,320 --> 00:31:26,129
response code and store them in a

684
00:31:24,150 --> 00:31:27,170
directory called Yahoo and that's all it

685
00:31:26,130 --> 00:31:29,160
means

686
00:31:27,170 --> 00:31:33,390
and then I'm going to use the final

687
00:31:29,160 --> 00:31:35,460
command to list all of the files things

688
00:31:33,390 --> 00:31:37,650
work type dash F in the eye who

689
00:31:35,460 --> 00:31:40,440
directory that have a name of start-up

690
00:31:37,650 --> 00:31:43,350
body so f FF stores two files for each

691
00:31:40,440 --> 00:31:45,240
request dot body file and the dot

692
00:31:43,350 --> 00:31:48,179
headers file that contains the headers

693
00:31:45,240 --> 00:31:49,380
I'm more interested in the body file and

694
00:31:48,180 --> 00:31:52,680
letting to point them to this little

695
00:31:49,380 --> 00:31:58,230
tool I wrote called HTML tool and what

696
00:31:52,680 --> 00:32:01,080
that does is it extracts HTML or sorry

697
00:31:58,230 --> 00:32:03,540
should've parses HTML should I say and

698
00:32:01,080 --> 00:32:06,300
extract certain parts of it so you can

699
00:32:03,540 --> 00:32:09,840
extract attributes with ribs or you can

700
00:32:06,300 --> 00:32:12,360
extract tag contents with tags and I

701
00:32:09,840 --> 00:32:14,459
think it does comments as well so that

702
00:32:12,360 --> 00:32:18,540
can be quite useful in some situations

703
00:32:14,460 --> 00:32:21,930
but here we using the tribe's SRC to

704
00:32:18,540 --> 00:32:24,540
return the value of the SRC of source

705
00:32:21,930 --> 00:32:27,240
attribute from all of the HTML tags it

706
00:32:24,540 --> 00:32:31,080
finds and because that includes both

707
00:32:27,240 --> 00:32:33,570
script tags and image tags in this case

708
00:32:31,080 --> 00:32:37,050
I'm just using grep to say I only want

709
00:32:33,570 --> 00:32:39,659
the ones that end in dot J s and you

710
00:32:37,050 --> 00:32:41,820
know I'm going to miss some here and

711
00:32:39,660 --> 00:32:45,090
some of these will be relative paths

712
00:32:41,820 --> 00:32:46,790
that will need further processing but at

713
00:32:45,090 --> 00:32:49,470
least some of them are going to be

714
00:32:46,790 --> 00:32:51,840
absolute paths that I can then pass back

715
00:32:49,470 --> 00:32:55,650
into f FF to fetch all of those

716
00:32:51,840 --> 00:32:57,510
JavaScript files and then I can use the

717
00:32:55,650 --> 00:32:59,490
techniques like using talked or using

718
00:32:57,510 --> 00:33:03,060
grep to extract the pieces of

719
00:32:59,490 --> 00:33:06,840
information that I want for them and I

720
00:33:03,060 --> 00:33:08,950
found that to be quite useful and also

721
00:33:06,840 --> 00:33:11,620
you know don't forget to

722
00:33:08,950 --> 00:33:15,490
them for secrets and all of that juicy

723
00:33:11,620 --> 00:33:18,189
stuff too so another thing that I think

724
00:33:15,490 --> 00:33:23,159
to be really useful but it is a little

725
00:33:18,190 --> 00:33:26,139
bit different is lists that are custom

726
00:33:23,159 --> 00:33:28,179
but still a little bit generic so a lot

727
00:33:26,139 --> 00:33:31,918
of people like to hunt on more than one

728
00:33:28,179 --> 00:33:34,120
target at once you know myself included

729
00:33:31,919 --> 00:33:36,549
and it would still be nice to have good

730
00:33:34,120 --> 00:33:38,709
word lists and preferably ones that

731
00:33:36,549 --> 00:33:41,260
maybe include some things that those

732
00:33:38,710 --> 00:33:44,260
public lists don't so you can be finding

733
00:33:41,260 --> 00:33:46,629
some things that other people don't and

734
00:33:44,260 --> 00:33:48,610
also you know sometimes you want to just

735
00:33:46,630 --> 00:33:52,000
look for like a specific vulnerability

736
00:33:48,610 --> 00:33:54,729
maybe you just found a zero-day in

737
00:33:52,000 --> 00:33:56,649
something and you want information to

738
00:33:54,730 --> 00:33:59,139
build a word list to go off and look for

739
00:33:56,649 --> 00:34:01,330
it in lots of places those things are

740
00:33:59,139 --> 00:34:04,178
you know legitimate use cases that often

741
00:34:01,330 --> 00:34:09,790
those generic pre-baked word lists don't

742
00:34:04,179 --> 00:34:12,220
necessarily cover so one of the tools

743
00:34:09,790 --> 00:34:14,109
that I've found myself using quite often

744
00:34:12,219 --> 00:34:17,290
to build these kinds of word lists is

745
00:34:14,109 --> 00:34:18,668
Google bigquery and straight off the bat

746
00:34:17,290 --> 00:34:20,949
I need to give you a bit of a warning

747
00:34:18,668 --> 00:34:23,408
here some of these things and next

748
00:34:20,949 --> 00:34:26,319
slides can cost you not insignificant

749
00:34:23,409 --> 00:34:28,659
amounts of money so bigquery costs about

750
00:34:26,319 --> 00:34:30,819
and I think it's $5 per terabyte to

751
00:34:28,659 --> 00:34:33,970
query and depending on what your query

752
00:34:30,819 --> 00:34:37,750
you can go through multiple terabytes

753
00:34:33,969 --> 00:34:39,279
quite quickly you there is a free tier

754
00:34:37,750 --> 00:34:42,010
which gives you about I think it's about

755
00:34:39,280 --> 00:34:44,260
$300 of credit in your first year I've

756
00:34:42,010 --> 00:34:46,810
long since used mine and I think your

757
00:34:44,260 --> 00:34:49,800
first terabyte per month is free but

758
00:34:46,810 --> 00:34:53,918
outside of that you know do be careful

759
00:34:49,800 --> 00:34:55,990
but what is also on bigquery is some

760
00:34:53,918 --> 00:34:58,328
really useful data sets so one of them

761
00:34:55,989 --> 00:35:01,379
is in bigquery public data it's the

762
00:34:58,329 --> 00:35:03,940
github repos data set which contains

763
00:35:01,380 --> 00:35:06,130
quite a lot it's a little bit outdated

764
00:35:03,940 --> 00:35:08,950
but still very useful information about

765
00:35:06,130 --> 00:35:10,990
lots and lots of github repos including

766
00:35:08,950 --> 00:35:14,379
the file contents the file names all

767
00:35:10,990 --> 00:35:16,569
kinds of useful things there is an HTTP

768
00:35:14,380 --> 00:35:18,220
archive data set on there as well from

769
00:35:16,569 --> 00:35:19,779
the wayback machine and I'll show how

770
00:35:18,220 --> 00:35:22,029
up-to-date it is

771
00:35:19,780 --> 00:35:24,310
I can tell you it's very very large the

772
00:35:22,030 --> 00:35:28,330
tables are looking at recently were

773
00:35:24,310 --> 00:35:30,730
approaching you know 10 terabytes so if

774
00:35:28,330 --> 00:35:32,650
you queried a significant fraction of

775
00:35:30,730 --> 00:35:38,170
them you'd be looking at 30 40 maybe 50

776
00:35:32,650 --> 00:35:41,110
dollars per query so do be careful and

777
00:35:38,170 --> 00:35:44,080
you know use the sample tables to get

778
00:35:41,110 --> 00:35:46,510
your queries right before you commit to

779
00:35:44,080 --> 00:35:49,020
running them and then hopefully maybe

780
00:35:46,510 --> 00:35:52,330
they'll make your money back afterwards

781
00:35:49,020 --> 00:35:58,020
so one of the first things you can do is

782
00:35:52,330 --> 00:36:01,330
you can use the the github repos data to

783
00:35:58,020 --> 00:36:06,460
find paths for files based on their

784
00:36:01,330 --> 00:36:09,340
contents and here as an example I'm

785
00:36:06,460 --> 00:36:12,250
looking for potential files that contain

786
00:36:09,340 --> 00:36:13,600
the PHP info command so that's one of

787
00:36:12,250 --> 00:36:15,790
the things that always makes me smile

788
00:36:13,600 --> 00:36:18,700
and a target is when I see a PHP info

789
00:36:15,790 --> 00:36:22,690
page flash up so I thought it'd be a

790
00:36:18,700 --> 00:36:24,790
good idea to try and figure out what

791
00:36:22,690 --> 00:36:27,580
paths I should be looking at when I'm

792
00:36:24,790 --> 00:36:29,650
looking for PHP info files so if you're

793
00:36:27,580 --> 00:36:33,970
not familiar with sequel I don't worry

794
00:36:29,650 --> 00:36:35,860
too much but what this query does is it

795
00:36:33,970 --> 00:36:41,259
looks for the path which is the part I

796
00:36:35,860 --> 00:36:45,400
am interested in so select path from the

797
00:36:41,260 --> 00:36:49,450
contents table of contents data set in

798
00:36:45,400 --> 00:36:54,490
the github repos database and I'm

799
00:36:49,450 --> 00:36:56,169
joining the files database and the way

800
00:36:54,490 --> 00:37:01,180
they're linked together is that the ID

801
00:36:56,170 --> 00:37:02,440
field is the same so this may be a feels

802
00:37:01,180 --> 00:37:05,009
a little bit backwards actually it

803
00:37:02,440 --> 00:37:06,910
should be select path from the files

804
00:37:05,010 --> 00:37:09,580
table because that's the one the path

805
00:37:06,910 --> 00:37:13,569
field exists in but it doesn't matter it

806
00:37:09,580 --> 00:37:15,819
works either way so in the join we say

807
00:37:13,570 --> 00:37:18,160
is how these tables relate to each other

808
00:37:15,820 --> 00:37:20,470
which is that the files table and the

809
00:37:18,160 --> 00:37:23,500
contents table both have this file id

810
00:37:20,470 --> 00:37:26,950
field and they match them and then we

811
00:37:23,500 --> 00:37:31,360
use the regex contains function to pass

812
00:37:26,950 --> 00:37:33,100
the content from the contents table and

813
00:37:31,360 --> 00:37:35,200
look for PHP info in the

814
00:37:33,100 --> 00:37:37,900
file and you know this is just an

815
00:37:35,200 --> 00:37:40,299
example you could look for whatever year

816
00:37:37,900 --> 00:37:42,220
is you're looking for but when I get

817
00:37:40,300 --> 00:37:45,690
back from this it is a big old list of

818
00:37:42,220 --> 00:37:48,100
paths of PHP files that contain PHP info

819
00:37:45,690 --> 00:37:50,440
and again there's going to be false

820
00:37:48,100 --> 00:37:55,029
positives in there but there's going to

821
00:37:50,440 --> 00:37:57,330
be true positives as well and things

822
00:37:55,030 --> 00:37:59,770
that are you know really good to know

823
00:37:57,330 --> 00:38:03,250
what I would say about this technique is

824
00:37:59,770 --> 00:38:05,530
it's relatively expensive so bigquery

825
00:38:03,250 --> 00:38:07,240
helpfully tells you how many terabytes

826
00:38:05,530 --> 00:38:08,740
of data you're going to process by

827
00:38:07,240 --> 00:38:12,729
running this query and in this case it's

828
00:38:08,740 --> 00:38:14,609
2.5 which I guess makes it just a little

829
00:38:12,730 --> 00:38:16,300
less than about 15 dollars to run

830
00:38:14,610 --> 00:38:20,440
depending on the region that you're

831
00:38:16,300 --> 00:38:25,080
running in so in the global region I

832
00:38:20,440 --> 00:38:28,330
guess I believe it's $5 per terabyte so

833
00:38:25,080 --> 00:38:30,160
you know not a cheap query to run so

834
00:38:28,330 --> 00:38:35,380
hopefully you got you know at least a

835
00:38:30,160 --> 00:38:38,350
$50 bug out of it to pay for it but or

836
00:38:35,380 --> 00:38:40,420
maybe you're using your free credits the

837
00:38:38,350 --> 00:38:43,770
other thing piece of advice I would give

838
00:38:40,420 --> 00:38:46,750
you is to use the save to Google Drive

839
00:38:43,770 --> 00:38:49,330
option and I use the CSV because it's

840
00:38:46,750 --> 00:38:52,710
easier to process than the JSON files I

841
00:38:49,330 --> 00:38:55,810
think you know multiple I'm sort of

842
00:38:52,710 --> 00:38:58,720
hundreds of megabytes of JSON files is

843
00:38:55,810 --> 00:39:01,600
quite difficult to deal with even if

844
00:38:58,720 --> 00:39:06,910
you're using some very good open source

845
00:39:01,600 --> 00:39:09,520
tools for dealing with JSON files so

846
00:39:06,910 --> 00:39:13,120
yeah safe to drive gives you the option

847
00:39:09,520 --> 00:39:15,340
to get up to a 100 get one gigabyte of

848
00:39:13,120 --> 00:39:18,310
results or as I think the download

849
00:39:15,340 --> 00:39:20,830
option is only up to 16,000 rows which

850
00:39:18,310 --> 00:39:23,200
you know is probably a lot smaller than

851
00:39:20,830 --> 00:39:26,259
one gigabyte in this case so that's a

852
00:39:23,200 --> 00:39:30,879
useful approach something a bit cheaper

853
00:39:26,260 --> 00:39:32,710
though is to use the paths that you kind

854
00:39:30,880 --> 00:39:35,950
of know at least a little bit of to find

855
00:39:32,710 --> 00:39:37,450
things instead so I've used this

856
00:39:35,950 --> 00:39:39,549
technique for it for a few different

857
00:39:37,450 --> 00:39:43,660
things but all I want to show you an

858
00:39:39,550 --> 00:39:47,779
example of is looking for

859
00:39:43,660 --> 00:39:50,569
nginx config files so you might be

860
00:39:47,779 --> 00:39:52,849
familiar with an engine ex-miss

861
00:39:50,569 --> 00:39:58,249
configuration that's become known as off

862
00:39:52,849 --> 00:40:02,930
by slash where it allows directory

863
00:39:58,249 --> 00:40:05,538
traversal so in order to build a word

864
00:40:02,930 --> 00:40:08,749
list for that I want a whole load of

865
00:40:05,539 --> 00:40:10,789
nginx config files so all I'm gonna do

866
00:40:08,749 --> 00:40:13,819
is say select the repository name and

867
00:40:10,789 --> 00:40:17,539
the path from the files table where the

868
00:40:13,819 --> 00:40:19,819
path is anything like nginx Kampf so

869
00:40:17,539 --> 00:40:21,650
these percents are wild cards so if

870
00:40:19,819 --> 00:40:24,529
nginx appears anywhere in the path and

871
00:40:21,650 --> 00:40:27,559
it's a dot-com file then it's going to

872
00:40:24,529 --> 00:40:28,910
show up in the results and again you

873
00:40:27,559 --> 00:40:30,799
know there's going to be files in here

874
00:40:28,910 --> 00:40:33,379
that aren't actually nginx config files

875
00:40:30,799 --> 00:40:37,849
but as long as I'm prepared to deal with

876
00:40:33,380 --> 00:40:39,670
that bit of noise it's okay so if you're

877
00:40:37,849 --> 00:40:42,289
not familiar with this particular issue

878
00:40:39,670 --> 00:40:44,809
this is a slide from orange sighs

879
00:40:42,289 --> 00:40:47,660
fantastic the presentation breaking

880
00:40:44,809 --> 00:40:51,859
parser logic which was a presented I

881
00:40:47,660 --> 00:40:55,460
think blackout 2018 and it's a wonderful

882
00:40:51,859 --> 00:40:57,279
find and this is what it looks like so

883
00:40:55,460 --> 00:41:00,549
this is a bit of nginx configuration

884
00:40:57,279 --> 00:41:03,650
which says for the location slash static

885
00:41:00,549 --> 00:41:06,619
actually we want file to be served out

886
00:41:03,650 --> 00:41:08,509
of this location and the problem here

887
00:41:06,619 --> 00:41:11,119
and why this is called off by slash is

888
00:41:08,509 --> 00:41:16,039
this location block does not end with a

889
00:41:11,119 --> 00:41:18,799
slash and that means it matches this URL

890
00:41:16,039 --> 00:41:21,230
here with the dot dot and everything

891
00:41:18,799 --> 00:41:24,170
after the static gets appended to the

892
00:41:21,230 --> 00:41:26,059
real path like this which I was perfect

893
00:41:24,170 --> 00:41:30,230
reversal so this is what we're looking

894
00:41:26,059 --> 00:41:34,160
for this slash static I want as many of

895
00:41:30,230 --> 00:41:39,470
the possible locations for this as

896
00:41:34,160 --> 00:41:41,149
possible so I know run my query and I've

897
00:41:39,470 --> 00:41:44,058
ended up with a results file that looks

898
00:41:41,150 --> 00:41:46,400
like this so this is my CSV file of the

899
00:41:44,059 --> 00:41:50,509
repo name and the path I want to remove

900
00:41:46,400 --> 00:41:53,029
that first line before we do any

901
00:41:50,509 --> 00:41:54,109
processing and then I have the repo name

902
00:41:53,029 --> 00:41:58,249
and the

903
00:41:54,109 --> 00:42:01,578
complete path so here we've got this

904
00:41:58,249 --> 00:42:03,200
repo Whitlock's slash dcs and then

905
00:42:01,579 --> 00:42:06,980
within that the path is controller slash

906
00:42:03,200 --> 00:42:11,180
nginx Kampf and you know I want to go

907
00:42:06,980 --> 00:42:13,489
and fetch those files somehow but one

908
00:42:11,180 --> 00:42:15,649
option would be to go and clone all of

909
00:42:13,489 --> 00:42:18,799
these repositories but you know with

910
00:42:15,650 --> 00:42:20,989
thousands of repositories when I don't

911
00:42:18,799 --> 00:42:23,960
even want to see most of the data that's

912
00:42:20,989 --> 00:42:26,450
a real waste of resources but as luck

913
00:42:23,960 --> 00:42:28,970
would have it you confection directly

914
00:42:26,450 --> 00:42:31,399
from Rock github user content comm so

915
00:42:28,970 --> 00:42:34,459
when you're viewing a file on github

916
00:42:31,400 --> 00:42:36,259
when you click the raw View button this

917
00:42:34,460 --> 00:42:38,690
is where the file is loaded from to show

918
00:42:36,259 --> 00:42:42,890
in your browser so I would say please

919
00:42:38,690 --> 00:42:45,170
use rate limiting you know be nice to

920
00:42:42,890 --> 00:42:47,239
get up even though you sort of

921
00:42:45,170 --> 00:42:49,009
technically saving them resources by not

922
00:42:47,239 --> 00:42:52,339
cloning tens of thousands of

923
00:42:49,009 --> 00:42:57,019
repositories you know still be nice to

924
00:42:52,339 --> 00:43:00,440
them so here I'm using orc using - big F

925
00:42:57,019 --> 00:43:04,819
to say the field separator is comma and

926
00:43:00,440 --> 00:43:06,680
I want to print out the URL HTTP colon

927
00:43:04,819 --> 00:43:08,779
slash slash raw dog github user content

928
00:43:06,680 --> 00:43:11,899
calm slash dollar one which is the

929
00:43:08,779 --> 00:43:14,480
repository and then slash master which

930
00:43:11,900 --> 00:43:17,390
is the default branch name in get slash

931
00:43:14,480 --> 00:43:20,180
dollar two which is the path to the file

932
00:43:17,390 --> 00:43:23,598
and then I use the nginx files dot CSV

933
00:43:20,180 --> 00:43:27,828
as the input so that will give me a list

934
00:43:23,599 --> 00:43:30,640
of URLs that I can fetch that will

935
00:43:27,829 --> 00:43:34,190
contain all of those nginx config files

936
00:43:30,640 --> 00:43:36,470
so I'll save them in nginx - URLs dot

937
00:43:34,190 --> 00:43:37,880
txt mostly cuz the the line links

938
00:43:36,470 --> 00:43:40,578
getting a little bit long and then I can

939
00:43:37,880 --> 00:43:44,059
use FFF to go and fetch them using the

940
00:43:40,579 --> 00:43:46,640
dirty or delay flag to apply some rate

941
00:43:44,059 --> 00:43:49,390
limiting once we got them though you

942
00:43:46,640 --> 00:43:52,069
know we need to process them somehow and

943
00:43:49,390 --> 00:43:54,788
ideally we would use like an actual

944
00:43:52,069 --> 00:43:58,038
parser that understands the grammar and

945
00:43:54,789 --> 00:44:01,940
syntax of nginx config files but that

946
00:43:58,039 --> 00:44:03,380
sounds quite difficult so here I'm going

947
00:44:01,940 --> 00:44:04,570
to kind of hack it with grep and hawk

948
00:44:03,380 --> 00:44:06,280
instead

949
00:44:04,570 --> 00:44:09,130
and you know for my purposes it doesn't

950
00:44:06,280 --> 00:44:11,980
have to be perfect I'm gonna miss some

951
00:44:09,130 --> 00:44:14,320
of these paths that's okay I'd you know

952
00:44:11,980 --> 00:44:16,120
I don't mind I just want a half-decent

953
00:44:14,320 --> 00:44:21,670
list that's going to increase my chances

954
00:44:16,120 --> 00:44:25,060
of finding something interesting so here

955
00:44:21,670 --> 00:44:27,070
I'm using grep with H to suppress the

956
00:44:25,060 --> 00:44:28,810
file name in the output are to look

957
00:44:27,070 --> 00:44:32,140
recursively and I to look in case

958
00:44:28,810 --> 00:44:34,299
insensitively for the word alias in this

959
00:44:32,140 --> 00:44:36,509
engine X conflicts directory where we

960
00:44:34,300 --> 00:44:41,170
stored all of the files that we fetched

961
00:44:36,510 --> 00:44:45,220
and I'm using a relatively uncommon flag

962
00:44:41,170 --> 00:44:47,710
fur grip here which is the big B 3 which

963
00:44:45,220 --> 00:44:52,569
means provide three lines of context

964
00:44:47,710 --> 00:44:54,850
before the results so my guess basically

965
00:44:52,570 --> 00:44:58,450
is that it's going to look something

966
00:44:54,850 --> 00:45:00,910
like this so they'll be the word alias

967
00:44:58,450 --> 00:45:03,460
and if I get a few lines before that

968
00:45:00,910 --> 00:45:08,080
it'll probably also include the location

969
00:45:03,460 --> 00:45:10,930
block too and then from that output I'm

970
00:45:08,080 --> 00:45:12,790
going to regret case insensitively only

971
00:45:10,930 --> 00:45:15,460
include the matching part of the output

972
00:45:12,790 --> 00:45:19,509
with extended regular expressions for

973
00:45:15,460 --> 00:45:22,000
the location part and I'm looking for

974
00:45:19,510 --> 00:45:24,810
things that look like regular paths so

975
00:45:22,000 --> 00:45:29,050
something's that eh-2-zed not to 9/2

976
00:45:24,810 --> 00:45:31,299
underscore and - that do not end in a

977
00:45:29,050 --> 00:45:34,510
slash so it's one or more characters

978
00:45:31,300 --> 00:45:38,260
that match that set and then one

979
00:45:34,510 --> 00:45:40,660
character that does not match /fo load

980
00:45:38,260 --> 00:45:43,720
by a space and then the curly bracket at

981
00:45:40,660 --> 00:45:45,850
the end so that should find me all of

982
00:45:43,720 --> 00:45:48,459
these location blocks which contained an

983
00:45:45,850 --> 00:45:50,710
alias and did not end in a slash which

984
00:45:48,460 --> 00:45:55,570
should be vulnerable to this off by

985
00:45:50,710 --> 00:45:57,250
slash issue so usually when you do this

986
00:45:55,570 --> 00:45:59,680
kind of thing you still end up having to

987
00:45:57,250 --> 00:46:01,360
do a bit of data cleaning so you know

988
00:45:59,680 --> 00:46:03,100
here are still up the location bar and

989
00:46:01,360 --> 00:46:05,920
the slash and the curly brace and things

990
00:46:03,100 --> 00:46:08,860
so I would say you know simple shell

991
00:46:05,920 --> 00:46:10,330
tools like or grep said if you're

992
00:46:08,860 --> 00:46:12,850
familiar with them or if you want an

993
00:46:10,330 --> 00:46:14,620
excuse to learn them are really useful

994
00:46:12,850 --> 00:46:16,990
for doing the kind of thing but you know

995
00:46:14,620 --> 00:46:17,630
don't be afraid to do things manually

996
00:46:16,990 --> 00:46:20,270
near edit

997
00:46:17,630 --> 00:46:21,980
to manually review the list scroll

998
00:46:20,270 --> 00:46:25,310
through it even you know if it's a

999
00:46:21,980 --> 00:46:26,540
thousand lines long that feels long but

1000
00:46:25,310 --> 00:46:28,580
really it's something going to take you

1001
00:46:26,540 --> 00:46:30,500
five minutes to scroll through maybe

1002
00:46:28,580 --> 00:46:33,890
pull out things that don't look right or

1003
00:46:30,500 --> 00:46:35,720
manually fix things or whatever or maybe

1004
00:46:33,890 --> 00:46:40,549
even see things that you want to

1005
00:46:35,720 --> 00:46:45,830
manually apply some extra conditions to

1006
00:46:40,550 --> 00:46:47,750
and duplicate modify slightly there's

1007
00:46:45,830 --> 00:46:50,480
more files than just you know the nginx

1008
00:46:47,750 --> 00:46:52,910
config file that this sort of technique

1009
00:46:50,480 --> 00:46:55,360
would be useful for here's just a few

1010
00:46:52,910 --> 00:46:59,930
that you could use so robots.txt

1011
00:46:55,360 --> 00:47:01,400
contains paths and you know some of

1012
00:46:59,930 --> 00:47:03,799
which which are disallowed and should

1013
00:47:01,400 --> 00:47:05,000
not be crawled by search engines I'm

1014
00:47:03,800 --> 00:47:06,530
going to so they're not going to show up

1015
00:47:05,000 --> 00:47:08,780
in Google Docs

1016
00:47:06,530 --> 00:47:12,830
you know I reckon if you pulled all the

1017
00:47:08,780 --> 00:47:15,170
robots.txt files on github or at least a

1018
00:47:12,830 --> 00:47:16,790
decent sample size of them you'd

1019
00:47:15,170 --> 00:47:20,210
probably find some interesting paths in

1020
00:47:16,790 --> 00:47:22,480
that get ignore files again these are

1021
00:47:20,210 --> 00:47:24,830
the files that you know by definition

1022
00:47:22,480 --> 00:47:27,370
the files listed in there should

1023
00:47:24,830 --> 00:47:30,200
probably not be exposed on a web server

1024
00:47:27,370 --> 00:47:32,930
so there is kind of an interesting

1025
00:47:30,200 --> 00:47:36,410
source of path names make files rake

1026
00:47:32,930 --> 00:47:39,890
files those kinds of configuration files

1027
00:47:36,410 --> 00:47:44,330
in general often contain lots of paths

1028
00:47:39,890 --> 00:47:47,060
to potentially interesting files so

1029
00:47:44,330 --> 00:47:48,410
that's it from me so you know a big

1030
00:47:47,060 --> 00:47:51,290
thank you for listening if you made it

1031
00:47:48,410 --> 00:47:52,879
this far and really I think the

1032
00:47:51,290 --> 00:47:55,220
important things to remember are keep a

1033
00:47:52,880 --> 00:47:56,420
manually curated list for the really

1034
00:47:55,220 --> 00:48:00,080
interesting things that you read about

1035
00:47:56,420 --> 00:48:02,030
so have that sort of small fast list but

1036
00:48:00,080 --> 00:48:03,310
also you know target specific lists are

1037
00:48:02,030 --> 00:48:06,430
going to help you discover things

1038
00:48:03,310 --> 00:48:09,950
generic word lists ordinarily cannot

1039
00:48:06,430 --> 00:48:12,230
Google docking is fun if you have

1040
00:48:09,950 --> 00:48:14,870
feeling brave maybe have a play with

1041
00:48:12,230 --> 00:48:16,730
that Chrome extension I put together and

1042
00:48:14,870 --> 00:48:21,319
also set building limits in bigquery

1043
00:48:16,730 --> 00:48:23,900
because otherwise you can have a really

1044
00:48:21,320 --> 00:48:26,890
bad time most of all stay safe have fun

1045
00:48:23,900 --> 00:48:26,890
Thanks

1046
00:48:34,090 --> 00:48:36,150
you

