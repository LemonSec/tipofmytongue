1
00:00:00,060 --> 00:00:06,298
one more talk one more talk coming up I

2
00:00:04,009 --> 00:00:08,700
let us know what's happening who's

3
00:00:06,299 --> 00:00:10,260
coming up next yep so we got deaf Bram

4
00:00:08,700 --> 00:00:13,290
coming up next he's gonna be talking

5
00:00:10,260 --> 00:00:15,240
about httprequest smuggling which I've

6
00:00:13,290 --> 00:00:17,160
always thought his way over my head and

7
00:00:15,240 --> 00:00:18,810
I saw I'll buy an all-access talk last

8
00:00:17,160 --> 00:00:21,000
year about it and it still felt way over

9
00:00:18,810 --> 00:00:22,919
my head so we got brand new research I'm

10
00:00:21,000 --> 00:00:26,070
excited to see it learn more about it

11
00:00:22,920 --> 00:00:29,730
and without further ado here's deaf Bram

12
00:00:26,070 --> 00:00:31,590
let's go right to it hey guys my name is

13
00:00:29,730 --> 00:00:33,000
Evan custodial I would like to thank Ben

14
00:00:31,590 --> 00:00:35,430
and others for inviting me here to give

15
00:00:33,000 --> 00:00:37,649
a talk on practical attacks using HTTP

16
00:00:35,430 --> 00:00:40,110
requests smuggling so let's get into it

17
00:00:37,649 --> 00:00:41,879
so Who am I

18
00:00:40,110 --> 00:00:43,890
I've worked as a hardware engineer for

19
00:00:41,879 --> 00:00:46,019
about 13 years specializing in designing

20
00:00:43,890 --> 00:00:48,480
hardware for networking data encryption

21
00:00:46,020 --> 00:00:49,770
and cloud workload acceleration most

22
00:00:48,480 --> 00:00:51,779
recently architecting security

23
00:00:49,770 --> 00:00:54,809
architectures for FPGAs in the cloud for

24
00:00:51,780 --> 00:00:57,510
a rather large chip maker I'm pretty new

25
00:00:54,809 --> 00:00:59,250
to hacker 1 in broad crowd my first bug

26
00:00:57,510 --> 00:01:01,469
I submitted last August they think it

27
00:00:59,250 --> 00:01:03,239
was cross-site scripting but since

28
00:01:01,469 --> 00:01:05,880
November between hacker 1 and bugcrowd

29
00:01:03,239 --> 00:01:07,619
I've reported about 40 triaged requests

30
00:01:05,880 --> 00:01:10,380
smuggling vulnerabilities were rated

31
00:01:07,619 --> 00:01:11,460
between medium to critical so I'd like

32
00:01:10,380 --> 00:01:13,619
to take this opportunity to disclose

33
00:01:11,460 --> 00:01:15,960
some of the techniques I've used my

34
00:01:13,619 --> 00:01:18,090
interests are low stack integration and

35
00:01:15,960 --> 00:01:20,699
protocol bugs so requests smuggling is a

36
00:01:18,090 --> 00:01:23,520
great fit and some of you already may

37
00:01:20,700 --> 00:01:26,210
know of me if not I am at deaf program

38
00:01:23,520 --> 00:01:29,399
on Twitter you could follow me there on

39
00:01:26,210 --> 00:01:32,369
the agenda for today's talk I quickly go

40
00:01:29,400 --> 00:01:35,850
over and introduce the concept of C LTE

41
00:01:32,369 --> 00:01:37,380
and Tec alt sync attacks then I

42
00:01:35,850 --> 00:01:39,210
introduce a little bit on how I've

43
00:01:37,380 --> 00:01:41,579
tested and search for requests smuggling

44
00:01:39,210 --> 00:01:43,649
targets in general after that I

45
00:01:41,579 --> 00:01:46,320
discussed the categories of impact on a

46
00:01:43,649 --> 00:01:47,880
request modeling attack from there I

47
00:01:46,320 --> 00:01:49,529
move on to more practical attack and

48
00:01:47,880 --> 00:01:52,560
recon techniques I've done to increase

49
00:01:49,530 --> 00:01:54,540
request smuggling impact and lastly I

50
00:01:52,560 --> 00:01:56,729
finished a talk with two proofs of proof

51
00:01:54,540 --> 00:01:58,439
of concept demos these demos show

52
00:01:56,729 --> 00:02:00,360
techniques I've used in the majority of

53
00:01:58,439 --> 00:02:05,610
my reports to obtain session takeover

54
00:02:00,360 --> 00:02:08,758
and the leakage of PII data so a quick

55
00:02:05,610 --> 00:02:10,978
introduction into C LTE and TE CLD sync

56
00:02:08,758 --> 00:02:13,260
attacks and a warning these techniques

57
00:02:10,979 --> 00:02:14,050
may be dangerous so understand your

58
00:02:13,260 --> 00:02:18,750
program and your

59
00:02:14,050 --> 00:02:21,190
nope a lot of the server assets have

60
00:02:18,750 --> 00:02:22,780
high traffic scenarios where there's a

61
00:02:21,190 --> 00:02:24,490
lot of connection is being made these

62
00:02:22,780 --> 00:02:27,070
attacks can affect those connections and

63
00:02:24,490 --> 00:02:30,280
can potentially cause a lot of damage so

64
00:02:27,070 --> 00:02:32,140
be cognizant of that also this talk

65
00:02:30,280 --> 00:02:34,120
makes the assumption that all of you

66
00:02:32,140 --> 00:02:37,179
have sort of a basic understanding of

67
00:02:34,120 --> 00:02:38,530
how HPT seek attacks work although I

68
00:02:37,180 --> 00:02:43,570
will be covering in the next couple of

69
00:02:38,530 --> 00:02:46,330
slides a quick intro but to level-set

70
00:02:43,570 --> 00:02:49,390
definitely check out James kettles HPD's

71
00:02:46,330 --> 00:02:51,400
tax talk called a smashing into the cell

72
00:02:49,390 --> 00:02:54,160
next door that he presented at blackhat

73
00:02:51,400 --> 00:02:56,080
last summer and also he references a

74
00:02:54,160 --> 00:02:59,170
watched fire paper in 2005 that has a

75
00:02:56,080 --> 00:03:01,090
lot of good insight into into this area

76
00:02:59,170 --> 00:03:02,470
definitely check that out the other

77
00:03:01,090 --> 00:03:05,740
thing that I don't cover in a stock is

78
00:03:02,470 --> 00:03:10,090
techniques to force desync now forms

79
00:03:05,740 --> 00:03:12,700
transfer encoding headers and parameters

80
00:03:10,090 --> 00:03:14,350
is not covered in his tacos although it

81
00:03:12,700 --> 00:03:17,739
is interesting to take a look and figure

82
00:03:14,350 --> 00:03:23,290
out more payloads that can cause desync

83
00:03:17,740 --> 00:03:25,780
issues on to your servers so first we

84
00:03:23,290 --> 00:03:29,920
start off as a with the CL to eat desync

85
00:03:25,780 --> 00:03:33,550
attack scenario c LTE's reference is is

86
00:03:29,920 --> 00:03:36,790
shown as CL de which is the front end

87
00:03:33,550 --> 00:03:38,830
dot the back end this type attack what

88
00:03:36,790 --> 00:03:41,769
this means is that the front end will

89
00:03:38,830 --> 00:03:43,600
interpret a web request using its

90
00:03:41,770 --> 00:03:46,630
content length header and the back end

91
00:03:43,600 --> 00:03:51,250
will interpret the same request using a

92
00:03:46,630 --> 00:03:53,890
transfer encoded header and so here we

93
00:03:51,250 --> 00:03:58,390
have an attacker about to access host

94
00:03:53,890 --> 00:04:00,160
comm and issues a post request to the

95
00:03:58,390 --> 00:04:03,630
lock at endpoint and you've seen this

96
00:04:00,160 --> 00:04:06,900
post request that the transfer encoded

97
00:04:03,630 --> 00:04:09,220
encoding a header is malformed it has a

98
00:04:06,900 --> 00:04:11,170
character one in front of the transfer

99
00:04:09,220 --> 00:04:12,760
encoding so it is ignored by the front

100
00:04:11,170 --> 00:04:16,029
end and so the front end interprets the

101
00:04:12,760 --> 00:04:17,130
content length 35 in this request which

102
00:04:16,029 --> 00:04:20,858
encompasses

103
00:04:17,130 --> 00:04:22,950
the payload highlighted in blue when

104
00:04:20,858 --> 00:04:26,020
that request goes to the backend the

105
00:04:22,950 --> 00:04:27,229
back end actually interprets the

106
00:04:26,020 --> 00:04:29,979
transfer encoding

107
00:04:27,230 --> 00:04:33,170
header instead despite it having the

108
00:04:29,980 --> 00:04:35,410
malformed character and when it does

109
00:04:33,170 --> 00:04:39,620
that it ignores the content length

110
00:04:35,410 --> 00:04:42,590
sizing of the packet and shown here the

111
00:04:39,620 --> 00:04:47,000
what it parses out of this request is

112
00:04:42,590 --> 00:04:50,450
only the zero and double double line end

113
00:04:47,000 --> 00:04:53,060
the rest of the payload which is this

114
00:04:50,450 --> 00:04:57,800
data that has a get to the robots.txt

115
00:04:53,060 --> 00:04:59,420
endpoint is placed on the socket between

116
00:04:57,800 --> 00:05:04,370
the front end and the back end has

117
00:04:59,420 --> 00:05:06,530
poison and so when we take a look at

118
00:05:04,370 --> 00:05:07,880
that we now have this persistent

119
00:05:06,530 --> 00:05:10,969
connection between the front end and the

120
00:05:07,880 --> 00:05:13,880
back end with this poison of robots.txt

121
00:05:10,970 --> 00:05:16,550
and we have a victim coming in wanting

122
00:05:13,880 --> 00:05:19,580
to access host comm and so that victim

123
00:05:16,550 --> 00:05:21,710
simply wants to get the slash endpoint

124
00:05:19,580 --> 00:05:24,890
of host comm and says it's request to

125
00:05:21,710 --> 00:05:27,109
the front end the front end forwards

126
00:05:24,890 --> 00:05:30,229
this request down the same connection

127
00:05:27,110 --> 00:05:32,750
that's poison to the back end but we see

128
00:05:30,230 --> 00:05:35,750
what happens here is that the poison

129
00:05:32,750 --> 00:05:38,060
gets prepended to the request and the

130
00:05:35,750 --> 00:05:41,960
back end interprets that the that the

131
00:05:38,060 --> 00:05:46,070
customer wanted to actually get the

132
00:05:41,960 --> 00:05:48,650
robots.txt endpoint rather than the

133
00:05:46,070 --> 00:05:50,599
slash endpoint and so the response back

134
00:05:48,650 --> 00:05:57,469
from the back end to the to the victim

135
00:05:50,600 --> 00:06:01,510
is the data for robots dot txt tec LD

136
00:05:57,470 --> 00:06:05,210
sync attacks are similar so the attacker

137
00:06:01,510 --> 00:06:07,570
sends a request to the front end with a

138
00:06:05,210 --> 00:06:13,640
similar malformed transfer encoding

139
00:06:07,570 --> 00:06:18,409
header like this and the data portion of

140
00:06:13,640 --> 00:06:21,530
the web request contains a chunks a

141
00:06:18,410 --> 00:06:23,690
chunk size payload that has a web

142
00:06:21,530 --> 00:06:26,809
request inside so in this case it's a

143
00:06:23,690 --> 00:06:30,230
chunk size payload of hex 46 to a post

144
00:06:26,810 --> 00:06:34,760
of the somewhere endpoint on host comm

145
00:06:30,230 --> 00:06:36,980
with a content length of 100 so when

146
00:06:34,760 --> 00:06:38,300
that gets the front end purposes this

147
00:06:36,980 --> 00:06:40,640
transfer encoding and when that gets

148
00:06:38,300 --> 00:06:41,160
forwarded to the back end the back end

149
00:06:40,640 --> 00:06:44,580
and

150
00:06:41,160 --> 00:06:47,220
as content length encoding and so all

151
00:06:44,580 --> 00:06:50,099
the back end does parses for four

152
00:06:47,220 --> 00:06:55,080
characters out of the payload which is

153
00:06:50,100 --> 00:06:57,600
the chunk size hex 46 and then the the

154
00:06:55,080 --> 00:07:01,859
our end character that follows it which

155
00:06:57,600 --> 00:07:04,110
means that the entire the entire payload

156
00:07:01,860 --> 00:07:07,950
that follows it which is the post

157
00:07:04,110 --> 00:07:09,630
somewhere gets placed on the front end

158
00:07:07,950 --> 00:07:13,320
the back end connection as Poisson and

159
00:07:09,630 --> 00:07:16,620
so when a victim comes to access host

160
00:07:13,320 --> 00:07:20,250
com from the front end we have that post

161
00:07:16,620 --> 00:07:23,760
to somewhere as a poisson between the

162
00:07:20,250 --> 00:07:26,100
front and the back end they make a web

163
00:07:23,760 --> 00:07:30,480
request to slash get perhaps with a

164
00:07:26,100 --> 00:07:32,250
session cookie of some sort and then

165
00:07:30,480 --> 00:07:35,310
what we see is when that request gets

166
00:07:32,250 --> 00:07:39,990
into the gets to the back end the poison

167
00:07:35,310 --> 00:07:41,670
actually gets prepended to that and it

168
00:07:39,990 --> 00:07:45,930
it gets placed to a post to the

169
00:07:41,670 --> 00:07:49,350
somewhere endpoint and the the get

170
00:07:45,930 --> 00:07:52,350
request from the from the customer gets

171
00:07:49,350 --> 00:07:54,180
placed as payload to this post to

172
00:07:52,350 --> 00:07:56,520
somewhere which could be potentially

173
00:07:54,180 --> 00:07:58,320
dangerous if that post to somewhere is

174
00:07:56,520 --> 00:08:01,409
accessible by the attacker

175
00:07:58,320 --> 00:08:06,510
the attacker now has visibility to the

176
00:08:01,410 --> 00:08:08,310
session cookie that was placed into into

177
00:08:06,510 --> 00:08:13,469
the into the web request that was

178
00:08:08,310 --> 00:08:15,450
initially said testing for request

179
00:08:13,470 --> 00:08:17,370
smuggling can be done safely in a blog

180
00:08:15,450 --> 00:08:19,590
post released by ports Wicker james

181
00:08:17,370 --> 00:08:21,210
outlines a clever method to safely test

182
00:08:19,590 --> 00:08:23,760
for desync issues without actively

183
00:08:21,210 --> 00:08:25,530
affecting neighboring connections he has

184
00:08:23,760 --> 00:08:28,710
released an open-source perfect session

185
00:08:25,530 --> 00:08:30,570
called HTTP request smuggler to help

186
00:08:28,710 --> 00:08:33,270
find desync issues on servers in a burp

187
00:08:30,570 --> 00:08:34,650
extension this tool was extremely

188
00:08:33,270 --> 00:08:37,409
helpful and useful on getting started

189
00:08:34,650 --> 00:08:39,569
with my desync detection recon however

190
00:08:37,409 --> 00:08:41,010
personally for me it wasn't very

191
00:08:39,570 --> 00:08:43,710
efficient for me to use this tool for

192
00:08:41,010 --> 00:08:45,240
scanning large amounts of targets it

193
00:08:43,710 --> 00:08:47,550
quickly dawned on me that in early

194
00:08:45,240 --> 00:08:49,350
october i need to build a tool that

195
00:08:47,550 --> 00:08:51,479
would perform the same exact test as a

196
00:08:49,350 --> 00:08:53,370
tool james created but in a way that

197
00:08:51,480 --> 00:08:54,740
allowed me to decouple it from burp so i

198
00:08:53,370 --> 00:08:58,700
so that i could run in

199
00:08:54,740 --> 00:09:00,770
manor and also to be developed in such a

200
00:08:58,700 --> 00:09:02,060
way where I could provide it with a list

201
00:09:00,770 --> 00:09:05,720
of domains for it to run back-to-back

202
00:09:02,060 --> 00:09:08,449
scans on overnight so I wrote a new tool

203
00:09:05,720 --> 00:09:12,320
in Python 3 called smuggler this tool

204
00:09:08,450 --> 00:09:14,720
takes the safe detection methods james

205
00:09:12,320 --> 00:09:16,940
discuss and performs it on various

206
00:09:14,720 --> 00:09:19,130
decent payloads to the targets that you

207
00:09:16,940 --> 00:09:20,690
specify on command-line I took

208
00:09:19,130 --> 00:09:22,880
inspiration from to her search on its

209
00:09:20,690 --> 00:09:24,529
look and feel usually I'm not in favor

210
00:09:22,880 --> 00:09:26,180
for writing tools that already exists

211
00:09:24,529 --> 00:09:28,100
but writing this tool allowed me to

212
00:09:26,180 --> 00:09:30,500
painfully understand request smuggling

213
00:09:28,100 --> 00:09:33,320
at a very low level so I consider it

214
00:09:30,500 --> 00:09:34,850
worth the time and effort the details on

215
00:09:33,320 --> 00:09:36,649
how to use smuggler and a detection

216
00:09:34,850 --> 00:09:38,660
methods it uses will not be discussed in

217
00:09:36,649 --> 00:09:40,040
this talk however by the time his talk

218
00:09:38,660 --> 00:09:42,170
is made public everyone can go and

219
00:09:40,040 --> 00:09:45,020
download smuggler from I get repo shown

220
00:09:42,170 --> 00:09:48,140
on the slide later in the POC section of

221
00:09:45,020 --> 00:09:50,510
this talk I reference C LTE and TCL

222
00:09:48,140 --> 00:09:52,130
turbo intruder helper scripts these

223
00:09:50,510 --> 00:09:54,110
scripts will also be open source but a

224
00:09:52,130 --> 00:09:55,459
time the stock is released follow me on

225
00:09:54,110 --> 00:09:59,540
Twitter and I should have the links

226
00:09:55,459 --> 00:10:01,729
posted there so a quick note on the

227
00:09:59,540 --> 00:10:03,890
impact radius or blast radius of request

228
00:10:01,730 --> 00:10:05,690
smuggling desync attacks when issuing

229
00:10:03,890 --> 00:10:07,760
auf diese attacks there's a chance you

230
00:10:05,690 --> 00:10:09,140
may affect neighboring connections the

231
00:10:07,760 --> 00:10:12,020
impact of that I split into three

232
00:10:09,140 --> 00:10:15,890
categories open D sync IP d sync and

233
00:10:12,020 --> 00:10:17,540
self d sync an open d sync is the most

234
00:10:15,890 --> 00:10:19,490
dangerous of the three an attacker

235
00:10:17,540 --> 00:10:21,380
issuing a decent attack from any IP

236
00:10:19,490 --> 00:10:23,480
address can affect a victim from any

237
00:10:21,380 --> 00:10:24,860
other IP address this is because all

238
00:10:23,480 --> 00:10:26,600
requests that come in to the front end

239
00:10:24,860 --> 00:10:30,380
are funneled down the same connection

240
00:10:26,600 --> 00:10:31,820
into the back end the impact radius of

241
00:10:30,380 --> 00:10:34,310
an IP d sync is a little bit more

242
00:10:31,820 --> 00:10:35,870
limited in this case the attacker can

243
00:10:34,310 --> 00:10:38,449
only affect neighboring connections from

244
00:10:35,870 --> 00:10:40,100
their IP address this is still dangerous

245
00:10:38,450 --> 00:10:42,740
because an attacker can still affect

246
00:10:40,100 --> 00:10:45,140
victims behind a common VPN or corporate

247
00:10:42,740 --> 00:10:47,450
proxy server however a decent attack

248
00:10:45,140 --> 00:10:50,980
from one IP address cannot affect web

249
00:10:47,450 --> 00:10:50,980
requests from a different IP address

250
00:10:51,339 --> 00:10:56,029
lastly a self desync has a smallest

251
00:10:53,959 --> 00:10:58,040
reach of all three categories it is

252
00:10:56,029 --> 00:10:59,570
assumed that for every connection to the

253
00:10:58,040 --> 00:11:01,880
front end there is an Associated

254
00:10:59,570 --> 00:11:03,050
connection to the back end although in

255
00:11:01,880 --> 00:11:04,850
this scenario you cannot affect

256
00:11:03,050 --> 00:11:06,800
neighboring connections there is still a

257
00:11:04,850 --> 00:11:08,180
security risk if the front end

258
00:11:06,800 --> 00:11:10,370
implements any type of security

259
00:11:08,180 --> 00:11:12,160
sing or firewalling a self decent can

260
00:11:10,370 --> 00:11:14,029
potentially bypass those security checks

261
00:11:12,160 --> 00:11:16,520
if you believe you have requests

262
00:11:14,029 --> 00:11:17,810
smuggling on a target use VPNs and VPSs

263
00:11:16,520 --> 00:11:22,010
determine which of the three categories

264
00:11:17,810 --> 00:11:24,380
of impact your desynch has okay so onto

265
00:11:22,010 --> 00:11:27,080
some practical attack recon stories that

266
00:11:24,380 --> 00:11:31,610
I've I've seen throughout my time

267
00:11:27,080 --> 00:11:35,330
testing for these for these issues just

268
00:11:31,610 --> 00:11:37,910
quick update these stories these stories

269
00:11:35,330 --> 00:11:40,459
are all based on on attacks that I've

270
00:11:37,910 --> 00:11:43,370
done that have already been resolved and

271
00:11:40,459 --> 00:11:46,640
fixed but I don't have permission from

272
00:11:43,370 --> 00:11:50,029
any of the any of the providers websites

273
00:11:46,640 --> 00:11:53,270
to to give more detail so everything is

274
00:11:50,029 --> 00:11:56,420
sort of redacted and made up but the the

275
00:11:53,270 --> 00:11:59,089
techniques are still valid so for for

276
00:11:56,420 --> 00:12:03,979
this specific attack recon story I had I

277
00:11:59,089 --> 00:12:07,810
I had found a te dot dia TCL desync on a

278
00:12:03,980 --> 00:12:10,399
main dot-com server of a major website

279
00:12:07,810 --> 00:12:13,430
but it was it wasn't looking really good

280
00:12:10,399 --> 00:12:16,580
because the impact reach for this dia de

281
00:12:13,430 --> 00:12:20,930
d CL deseg was only a self desynch so I

282
00:12:16,580 --> 00:12:22,940
couldn't I couldn't desync anyone else

283
00:12:20,930 --> 00:12:24,650
and I couldn't desync anyone else on my

284
00:12:22,940 --> 00:12:28,370
IP address I really can only decent my

285
00:12:24,650 --> 00:12:31,279
connection so I sort of had this this

286
00:12:28,370 --> 00:12:33,050
this vulnerability well you know lying

287
00:12:31,279 --> 00:12:36,320
around for a while because it was it was

288
00:12:33,050 --> 00:12:40,939
kind of fairly low impact at some point

289
00:12:36,320 --> 00:12:43,760
I went back to it and I decided to look

290
00:12:40,940 --> 00:12:48,820
at it a little bit more and I looked at

291
00:12:43,760 --> 00:12:52,970
the the robots.txt file of that site and

292
00:12:48,820 --> 00:12:54,500
I looked at some of the endpoints it it

293
00:12:52,970 --> 00:12:57,770
showed and and one of the end points

294
00:12:54,500 --> 00:13:00,070
sort of stood out from the rest and this

295
00:12:57,770 --> 00:13:02,240
and these names are sort of made up

296
00:13:00,070 --> 00:13:05,089
there's one endpoint that was called

297
00:13:02,240 --> 00:13:05,779
control room and I thought that was okay

298
00:13:05,089 --> 00:13:08,720
that's a weird

299
00:13:05,779 --> 00:13:10,790
that's a weird endpoint what's what's

300
00:13:08,720 --> 00:13:12,470
actually there and so when I when I

301
00:13:10,790 --> 00:13:15,709
actually did an access through the

302
00:13:12,470 --> 00:13:17,990
repeater the front end reported back

303
00:13:15,709 --> 00:13:20,630
that you know okay this endpoint was not

304
00:13:17,990 --> 00:13:21,769
found and at this point I don't not sure

305
00:13:20,630 --> 00:13:24,470
why I I try

306
00:13:21,769 --> 00:13:31,339
but I I tried accessing that endpoint

307
00:13:24,470 --> 00:13:33,170
through a Tec LD sink bypass and so you

308
00:13:31,339 --> 00:13:35,209
know with example.com as an example of

309
00:13:33,170 --> 00:13:37,248
the payload the payload roughly looks

310
00:13:35,209 --> 00:13:39,018
something like this we have we have sort

311
00:13:37,249 --> 00:13:41,089
of our transfer encoding malformed

312
00:13:39,019 --> 00:13:44,689
header we have contact life for that

313
00:13:41,089 --> 00:13:48,259
just compasses the the chunked encoding

314
00:13:44,689 --> 00:13:51,019
life and the rest of the payload sort of

315
00:13:48,259 --> 00:13:54,439
gets split as its own request directly

316
00:13:51,019 --> 00:13:58,100
into the backend and when I issued this

317
00:13:54,439 --> 00:14:00,349
request and desync myself to get to the

318
00:13:58,100 --> 00:14:04,579
control-room endpoint on the back end I

319
00:14:00,350 --> 00:14:08,629
was surprised to see that I was I got a

320
00:14:04,579 --> 00:14:12,229
200 okay back from from the from the

321
00:14:08,629 --> 00:14:15,110
request and some information that looked

322
00:14:12,230 --> 00:14:17,480
like a an administration panel that had

323
00:14:15,110 --> 00:14:19,790
access to load balance had load

324
00:14:17,480 --> 00:14:21,860
balancers and cache servers and and all

325
00:14:19,790 --> 00:14:24,799
sort of this was sort of these

326
00:14:21,860 --> 00:14:29,179
maintenance control knobs for the main

327
00:14:24,799 --> 00:14:31,730
website so yeah so once I reported that

328
00:14:29,179 --> 00:14:35,990
it got triaged and resolved immediately

329
00:14:31,730 --> 00:14:39,259
and the takeaway for this is definitely

330
00:14:35,990 --> 00:14:41,959
check your robots.txt file for for any

331
00:14:39,259 --> 00:14:44,179
weird endpoints and search for those

332
00:14:41,959 --> 00:14:45,768
endpoints bypassing the front end you

333
00:14:44,179 --> 00:14:49,059
never know when the front end is is

334
00:14:45,769 --> 00:14:52,699
acting as sort of a security barrier

335
00:14:49,059 --> 00:14:55,309
blocking specific endpoints so it's good

336
00:14:52,699 --> 00:14:57,920
to to try it out and even if you have

337
00:14:55,309 --> 00:15:01,279
something like a like a self desynch in

338
00:14:57,920 --> 00:15:03,740
a TCL which which typically doesn't show

339
00:15:01,279 --> 00:15:05,959
much security impact sometimes you can

340
00:15:03,740 --> 00:15:10,669
actually get some pretty high impact

341
00:15:05,959 --> 00:15:13,729
from it so another decent attack recon

342
00:15:10,669 --> 00:15:17,720
story again a completely fabricated but

343
00:15:13,730 --> 00:15:23,829
the technique is based on a report that

344
00:15:17,720 --> 00:15:27,110
I had filed I had a decent on an API

345
00:15:23,829 --> 00:15:29,359
server asset for a high major high

346
00:15:27,110 --> 00:15:31,450
traffic provider the vulnerability was a

347
00:15:29,360 --> 00:15:33,640
CL to Edie sink and the

348
00:15:31,450 --> 00:15:36,580
impact reach was an open D sink so I

349
00:15:33,640 --> 00:15:39,100
could hijack any theoretically any

350
00:15:36,580 --> 00:15:42,610
connection that went to the API server

351
00:15:39,100 --> 00:15:46,900
this API server was was primarily used

352
00:15:42,610 --> 00:15:48,700
by their mobile app and so I went

353
00:15:46,900 --> 00:15:51,280
immediately to reverse engineering the

354
00:15:48,700 --> 00:15:53,170
mobile app removing the cert pinning

355
00:15:51,280 --> 00:15:56,589
restrictions and and getting traffic

356
00:15:53,170 --> 00:15:59,490
going through Burpo to analyze what type

357
00:15:56,590 --> 00:16:01,990
of requests are sent to the API server

358
00:15:59,490 --> 00:16:04,450
immediately what caught my interest was

359
00:16:01,990 --> 00:16:07,210
a request like this that was destined to

360
00:16:04,450 --> 00:16:12,250
an authorized user end point this

361
00:16:07,210 --> 00:16:16,390
allowed an account owner to to add

362
00:16:12,250 --> 00:16:19,900
another user as an account owner to to

363
00:16:16,390 --> 00:16:22,030
their account and so the the schema

364
00:16:19,900 --> 00:16:26,140
looked like this it's a JSON application

365
00:16:22,030 --> 00:16:27,520
JSON encoded encoded structure where you

366
00:16:26,140 --> 00:16:29,560
specify the user ID you specify

367
00:16:27,520 --> 00:16:31,270
permissions owner and you just send it

368
00:16:29,560 --> 00:16:33,869
off with with your session key and

369
00:16:31,270 --> 00:16:37,180
you've you've authorized that user and

370
00:16:33,870 --> 00:16:40,360
so I played around with this in the

371
00:16:37,180 --> 00:16:42,040
repeater and I found that if you take

372
00:16:40,360 --> 00:16:43,660
those parameters and you add it to the

373
00:16:42,040 --> 00:16:46,839
request line even though it's a post you

374
00:16:43,660 --> 00:16:48,370
could actually have the application

375
00:16:46,840 --> 00:16:50,620
accept it

376
00:16:48,370 --> 00:16:53,800
even at a higher priority than the JSON

377
00:16:50,620 --> 00:16:56,530
encoded parameters so this was

378
00:16:53,800 --> 00:16:58,469
immediately useful because typically in

379
00:16:56,530 --> 00:17:01,420
a decent attack you don't have access to

380
00:16:58,470 --> 00:17:03,220
changing the body of data on a post

381
00:17:01,420 --> 00:17:08,710
request but you do have access to

382
00:17:03,220 --> 00:17:10,150
changing the request endpoint and if you

383
00:17:08,710 --> 00:17:12,250
could change your quest endpoint you

384
00:17:10,150 --> 00:17:15,130
could also specify request

385
00:17:12,250 --> 00:17:17,829
parameterization request line so

386
00:17:15,130 --> 00:17:21,550
immediately I started to create an

387
00:17:17,829 --> 00:17:25,540
attack payload for addy sink and in my

388
00:17:21,550 --> 00:17:28,089
prefix to be pended onto onto a victim

389
00:17:25,540 --> 00:17:31,450
request I added this post line to

390
00:17:28,089 --> 00:17:34,620
authorized user with the user ID my user

391
00:17:31,450 --> 00:17:39,550
ID with permissions owner and I sent it

392
00:17:34,620 --> 00:17:41,469
about one two three times and was was

393
00:17:39,550 --> 00:17:43,950
happy to see that I got email

394
00:17:41,470 --> 00:17:47,130
notification that I was added to

395
00:17:43,950 --> 00:17:53,040
added as owner to a random user account

396
00:17:47,130 --> 00:17:57,150
on on the on the website so the takeaway

397
00:17:53,040 --> 00:17:59,670
from this is if you have a CL te open D

398
00:17:57,150 --> 00:18:02,580
sync sure it's it's on its own is

399
00:17:59,670 --> 00:18:05,160
already a high priority issue you could

400
00:18:02,580 --> 00:18:06,840
report it as is but you know I always

401
00:18:05,160 --> 00:18:09,020
like to try and escalate to see what

402
00:18:06,840 --> 00:18:11,820
else can I do with it can I actually get

403
00:18:09,020 --> 00:18:14,310
account access can I steal a session

404
00:18:11,820 --> 00:18:18,230
token can I do you know those sorts of

405
00:18:14,310 --> 00:18:22,050
things to understand the application

406
00:18:18,230 --> 00:18:24,000
study the API you know go ahead and

407
00:18:22,050 --> 00:18:25,980
reverse engineer the mobile app try to

408
00:18:24,000 --> 00:18:28,490
run it through burp figure out you know

409
00:18:25,980 --> 00:18:31,710
what does what does the what is the

410
00:18:28,490 --> 00:18:33,420
protocol in the API look like and then

411
00:18:31,710 --> 00:18:35,340
three like I did in this specific

412
00:18:33,420 --> 00:18:37,590
instance if the parameters are json

413
00:18:35,340 --> 00:18:39,840
encoded try and see if the application

414
00:18:37,590 --> 00:18:41,699
accepts the parameterization via the via

415
00:18:39,840 --> 00:18:45,090
the request line in different forms you

416
00:18:41,700 --> 00:18:47,030
might be surprised to see that even

417
00:18:45,090 --> 00:18:49,740
though the mobile app doesn't issue out

418
00:18:47,030 --> 00:18:51,629
parameters in that way that the

419
00:18:49,740 --> 00:18:54,810
application actually does accept it and

420
00:18:51,630 --> 00:18:58,680
that could be extremely helpful for for

421
00:18:54,810 --> 00:19:00,570
desync attacks and it's sort of as a as

422
00:18:58,680 --> 00:19:04,080
a bonus to this and this is on a

423
00:19:00,570 --> 00:19:06,480
completely different report I did

424
00:19:04,080 --> 00:19:11,460
something similar on the request line

425
00:19:06,480 --> 00:19:14,640
where you know most graph QL targets get

426
00:19:11,460 --> 00:19:17,340
data posted to the graph QL endpoint as

427
00:19:14,640 --> 00:19:20,840
post data but if you read the graph QL

428
00:19:17,340 --> 00:19:27,570
specification you could actually send

429
00:19:20,840 --> 00:19:29,850
graph QL commands via a get request on

430
00:19:27,570 --> 00:19:33,720
the request line like this you basically

431
00:19:29,850 --> 00:19:36,510
have to set the graph QL endpoint with a

432
00:19:33,720 --> 00:19:41,220
query parameter and then add your query

433
00:19:36,510 --> 00:19:44,520
so I was able to show impact exploiting

434
00:19:41,220 --> 00:19:46,650
a graph QL command that allowed me to do

435
00:19:44,520 --> 00:19:51,150
a very sensitive operation on one

436
00:19:46,650 --> 00:19:53,640
specific act one specific asset and it

437
00:19:51,150 --> 00:19:56,000
allowed me to to escalate the report to

438
00:19:53,640 --> 00:19:56,000
critical

439
00:19:56,990 --> 00:20:04,140
so for the last desync attack recon

440
00:19:59,520 --> 00:20:08,668
story this this attack actually is a

441
00:20:04,140 --> 00:20:10,950
third way to obtain a session token this

442
00:20:08,669 --> 00:20:13,860
the first two ways are covered in the

443
00:20:10,950 --> 00:20:15,630
two pocs at the end of this talk this

444
00:20:13,860 --> 00:20:17,280
one's a little bit more complicated so i

445
00:20:15,630 --> 00:20:20,789
didn't create a POC out of it but it is

446
00:20:17,280 --> 00:20:24,299
a third way to obtain a session token so

447
00:20:20,789 --> 00:20:27,030
I had a main comm asset for for a major

448
00:20:24,299 --> 00:20:31,860
website and the vulnerability was a cltd

449
00:20:27,030 --> 00:20:33,600
sync with a with a an impact reach of an

450
00:20:31,860 --> 00:20:37,590
open D sync so it was a fairly serious

451
00:20:33,600 --> 00:20:39,299
issue and but there was no useful API on

452
00:20:37,590 --> 00:20:41,820
the server to the point where I could I

453
00:20:39,299 --> 00:20:47,129
could show any sort of significant

454
00:20:41,820 --> 00:20:48,689
impact and there was no open redirect or

455
00:20:47,130 --> 00:20:52,080
response acute poisoning that I could do

456
00:20:48,690 --> 00:20:54,419
to steal a session token like I'll be

457
00:20:52,080 --> 00:20:56,668
showing in the the POCs so I had to

458
00:20:54,419 --> 00:20:58,789
figure out a different way based on the

459
00:20:56,669 --> 00:21:01,289
application on how I could steal a

460
00:20:58,789 --> 00:21:03,600
session token so I started playing

461
00:21:01,289 --> 00:21:07,370
around with the website through burp

462
00:21:03,600 --> 00:21:10,760
like I did with the previous story and I

463
00:21:07,370 --> 00:21:14,399
noticed an interesting an interesting

464
00:21:10,760 --> 00:21:17,820
endpoint that allows you to invite

465
00:21:14,400 --> 00:21:21,929
someone onto onto your platform and it

466
00:21:17,820 --> 00:21:24,059
was a post to utils invite with a with a

467
00:21:21,929 --> 00:21:26,010
common type of application JSON and

468
00:21:24,059 --> 00:21:29,070
there's two fields there's an email

469
00:21:26,010 --> 00:21:30,570
field where they where the invite email

470
00:21:29,070 --> 00:21:33,178
gets sent to send to and there's a name

471
00:21:30,570 --> 00:21:36,090
field where you can place a name in the

472
00:21:33,179 --> 00:21:39,740
email the to who it's addressed to and

473
00:21:36,090 --> 00:21:42,689
so I started playing with this and

474
00:21:39,740 --> 00:21:46,830
started testing okay well is there any

475
00:21:42,690 --> 00:21:50,940
length limitations to the name field and

476
00:21:46,830 --> 00:21:53,010
there didn't seem to be any any sort of

477
00:21:50,940 --> 00:21:55,860
restrictions and how much you can put

478
00:21:53,010 --> 00:21:59,549
into the name parameter and so like the

479
00:21:55,860 --> 00:22:02,729
previous story I decided to figure out

480
00:21:59,549 --> 00:22:08,190
well could you actually switch this to a

481
00:22:02,730 --> 00:22:08,980
URL encoded parameters and obtain the

482
00:22:08,190 --> 00:22:11,380
same

483
00:22:08,980 --> 00:22:14,230
same behavior and so I did that and I

484
00:22:11,380 --> 00:22:17,200
converted the JSON to URL encoded

485
00:22:14,230 --> 00:22:20,919
parameters and was was happy to to see

486
00:22:17,200 --> 00:22:24,700
that I still received the email inviting

487
00:22:20,919 --> 00:22:26,440
at some some dot email so that

488
00:22:24,700 --> 00:22:28,960
immediately piqued my interest because

489
00:22:26,440 --> 00:22:32,100
there's a another type of attack you can

490
00:22:28,960 --> 00:22:36,640
perform that is similar to a CLT hijack

491
00:22:32,100 --> 00:22:38,469
but instead of hijacking the the victims

492
00:22:36,640 --> 00:22:42,330
request to send them to a different

493
00:22:38,470 --> 00:22:48,190
endpoint you hijack a victim's request

494
00:22:42,330 --> 00:22:51,520
to steal their entire request that's

495
00:22:48,190 --> 00:22:55,900
sent to the server and we do that using

496
00:22:51,520 --> 00:23:00,070
this type of desync attack where in this

497
00:22:55,900 --> 00:23:03,309
case we are desync payload smuggling

498
00:23:00,070 --> 00:23:06,399
payload is a is a request a delete

499
00:23:03,309 --> 00:23:09,639
request to to the utility example.com

500
00:23:06,400 --> 00:23:12,630
server with with a character for

501
00:23:09,640 --> 00:23:14,860
transfer encoding malformed chunk header

502
00:23:12,630 --> 00:23:19,780
that will confuse the front and back end

503
00:23:14,860 --> 00:23:23,860
servers and in the prefix usually we

504
00:23:19,780 --> 00:23:27,820
just specify the endpoint to which we

505
00:23:23,860 --> 00:23:30,159
want to send the victim to with a with a

506
00:23:27,820 --> 00:23:32,230
custom header to delete their endpoint

507
00:23:30,160 --> 00:23:35,290
but in this case what we're doing is

508
00:23:32,230 --> 00:23:38,049
we're specifying the entire request for

509
00:23:35,290 --> 00:23:41,649
the victim and in that request we

510
00:23:38,049 --> 00:23:44,710
specify a request a specific request to

511
00:23:41,650 --> 00:23:48,100
the application invite endpoint using

512
00:23:44,710 --> 00:23:51,940
the attacker authentication token with

513
00:23:48,100 --> 00:23:54,639
the email field already assigned that is

514
00:23:51,940 --> 00:23:57,220
under the attackers control but the but

515
00:23:54,640 --> 00:23:59,470
the payload stopping right at the name

516
00:23:57,220 --> 00:24:01,600
field and you can see what will happen

517
00:23:59,470 --> 00:24:06,250
is when this payload goes to the front

518
00:24:01,600 --> 00:24:09,549
end server it will it will parse this

519
00:24:06,250 --> 00:24:11,230
entire web request forward it to the

520
00:24:09,549 --> 00:24:15,280
backend server and the backend server

521
00:24:11,230 --> 00:24:15,730
will process the delete request and then

522
00:24:15,280 --> 00:24:18,129
Passa

523
00:24:15,730 --> 00:24:22,419
the post request as a separate request

524
00:24:18,130 --> 00:24:27,399
and when it goes to Parsa parse the URL

525
00:24:22,419 --> 00:24:30,940
coded fields the name field will

526
00:24:27,399 --> 00:24:34,029
actually contain the entire victim

527
00:24:30,940 --> 00:24:36,519
request that was supposed to go to the

528
00:24:34,029 --> 00:24:39,909
backend and with a content length 500

529
00:24:36,519 --> 00:24:41,889
that that puts the parsing deep into the

530
00:24:39,909 --> 00:24:44,619
the victim request that'll get attached

531
00:24:41,889 --> 00:24:47,738
to the name field so if this attack is

532
00:24:44,619 --> 00:24:51,668
done correctly invitee at some that

533
00:24:47,739 --> 00:24:57,879
email will have a name field that will

534
00:24:51,669 --> 00:25:01,659
look like a an HTTP request and to my to

535
00:24:57,879 --> 00:25:04,959
my surprise it did and so the email that

536
00:25:01,659 --> 00:25:07,480
was sent to me at this email address was

537
00:25:04,960 --> 00:25:10,720
dear and then the HTTP request of the

538
00:25:07,480 --> 00:25:13,330
victim and the key thing here is you

539
00:25:10,720 --> 00:25:16,629
have to specify a Content life long

540
00:25:13,330 --> 00:25:19,570
enough so that you you are able to grab

541
00:25:16,629 --> 00:25:22,928
enough of the requests to be able to

542
00:25:19,570 --> 00:25:27,039
steal the X app token or the the token

543
00:25:22,929 --> 00:25:30,100
that's used used by the victim and

544
00:25:27,039 --> 00:25:32,519
that's completely pasted right into the

545
00:25:30,100 --> 00:25:35,320
email that's sent to the attacker

546
00:25:32,519 --> 00:25:38,080
I've used this successfully on on two

547
00:25:35,320 --> 00:25:42,100
different reports too to steal a session

548
00:25:38,080 --> 00:25:44,470
token from victim and so the takeaway

549
00:25:42,100 --> 00:25:48,070
for this is again if you have a C LTE

550
00:25:44,470 --> 00:25:50,529
open D sync try to escalate even if you

551
00:25:48,070 --> 00:25:52,840
have no useful api's and there's no

552
00:25:50,529 --> 00:25:55,570
other way to steal a session token there

553
00:25:52,840 --> 00:25:59,889
might be a way to do it in band to the

554
00:25:55,570 --> 00:26:01,418
application of the asset and so to that

555
00:25:59,889 --> 00:26:03,699
end look for requests that allow you to

556
00:26:01,419 --> 00:26:06,279
reflect parameters back to the attacker

557
00:26:03,700 --> 00:26:08,830
in a stored manner it doesn't really

558
00:26:06,279 --> 00:26:11,080
help you if it reflects it back in the

559
00:26:08,830 --> 00:26:13,149
in the response because you don't have

560
00:26:11,080 --> 00:26:15,850
access to the response at that point but

561
00:26:13,149 --> 00:26:17,559
if you're able to store it in back to

562
00:26:15,850 --> 00:26:20,738
the attacker in some way either through

563
00:26:17,559 --> 00:26:22,720
an email or through some sort of field

564
00:26:20,739 --> 00:26:26,230
that is associated with the attacker

565
00:26:22,720 --> 00:26:29,289
session that you can later go and look

566
00:26:26,230 --> 00:26:31,869
and see what what information was stored

567
00:26:29,289 --> 00:26:35,560
in that field you may have the victims

568
00:26:31,869 --> 00:26:38,470
token that is stored in the web request

569
00:26:35,560 --> 00:26:41,440
and then third yeah if if requests are

570
00:26:38,470 --> 00:26:46,510
json encoded just try swooshing them to

571
00:26:41,440 --> 00:26:49,330
URL encoded because a a URL encoded body

572
00:26:46,510 --> 00:26:51,550
is useful for for this exact type of

573
00:26:49,330 --> 00:26:55,710
attack in which you could potentially

574
00:26:51,550 --> 00:26:55,710
steal the entire victims web request

575
00:26:56,370 --> 00:27:02,020
okay time to go into demo mode now these

576
00:26:59,950 --> 00:27:03,760
next two pocs I have used successfully

577
00:27:02,020 --> 00:27:06,820
in over ten reports to either steal

578
00:27:03,760 --> 00:27:08,620
session tokens or private data to show

579
00:27:06,820 --> 00:27:10,810
these techniques I've developed a couple

580
00:27:08,620 --> 00:27:12,429
of CTF examples to illustrate how I

581
00:27:10,810 --> 00:27:15,550
typically approach these techniques in

582
00:27:12,430 --> 00:27:17,290
practice for these pocs I have a server

583
00:27:15,550 --> 00:27:21,190
with a load balancer front-end pointed

584
00:27:17,290 --> 00:27:22,659
to by CTF tree config dot IO I also have

585
00:27:21,190 --> 00:27:24,390
simulated traffic being sent to the

586
00:27:22,660 --> 00:27:28,270
server to play the part of the victim

587
00:27:24,390 --> 00:27:30,730
the backend is a G unicorn slash flask

588
00:27:28,270 --> 00:27:31,960
framework that was modified by me to

589
00:27:30,730 --> 00:27:35,050
introduce a request smuggling

590
00:27:31,960 --> 00:27:38,080
vulnerability this first POC is a very

591
00:27:35,050 --> 00:27:40,300
trivial one and is the first thing I

592
00:27:38,080 --> 00:27:42,340
look for when I know that a server is

593
00:27:40,300 --> 00:27:46,540
vulnerable to C LTE hijacking on any

594
00:27:42,340 --> 00:27:48,879
victim connection after I prove that a

595
00:27:46,540 --> 00:27:50,889
server has an open D Sync issue

596
00:27:48,880 --> 00:27:54,900
I usually directory search it right away

597
00:27:50,890 --> 00:27:57,700
looking for 301 or 302 redirects however

598
00:27:54,900 --> 00:27:59,290
the key is that the redirect should be

599
00:27:57,700 --> 00:28:02,020
an absolute redirect instead of a

600
00:27:59,290 --> 00:28:04,149
relative redirect the reason why is that

601
00:28:02,020 --> 00:28:06,730
the URL specified in the absolute

602
00:28:04,150 --> 00:28:09,220
redirect may be able to be influenced by

603
00:28:06,730 --> 00:28:11,500
smuggling specific requests past the

604
00:28:09,220 --> 00:28:13,480
front end server in the case of a

605
00:28:11,500 --> 00:28:15,130
relative redirect there is very little

606
00:28:13,480 --> 00:28:17,020
one can do to influence the redirect

607
00:28:15,130 --> 00:28:19,650
away from the server however sometimes

608
00:28:17,020 --> 00:28:22,420
it can be done depending on the backend

609
00:28:19,650 --> 00:28:24,130
if you are familiar with the request

610
00:28:22,420 --> 00:28:26,200
smuggling bug I recently disclosed on

611
00:28:24,130 --> 00:28:28,450
slacks back-end to steal session cookies

612
00:28:26,200 --> 00:28:31,150
that report is a prime example of

613
00:28:28,450 --> 00:28:33,220
session stealing using an open redirect

614
00:28:31,150 --> 00:28:34,870
I'd like to thank the slack security

615
00:28:33,220 --> 00:28:37,000
team for allowing that disclosure and

616
00:28:34,870 --> 00:28:38,649
full-on redacted form as I believe it

617
00:28:37,000 --> 00:28:41,110
helped a lot of others understand the

618
00:28:38,650 --> 00:28:45,850
impact in severity of this attack so

619
00:28:41,110 --> 00:28:47,969
let's get into it okay so here's the CTF

620
00:28:45,850 --> 00:28:50,360
landing page with a couple of hints to

621
00:28:47,970 --> 00:28:53,400
for a common ctlt style tea ticket ACK

622
00:28:50,360 --> 00:28:56,699
so we use the smuggler tool to search

623
00:28:53,400 --> 00:28:59,400
for common desync force teasing payloads

624
00:28:56,700 --> 00:29:02,820
we find that an underscore payload

625
00:28:59,400 --> 00:29:04,980
causes a potential desync issue so we go

626
00:29:02,820 --> 00:29:06,830
and we paste the request into a repeater

627
00:29:04,980 --> 00:29:09,890
tab and we see the landing page

628
00:29:06,830 --> 00:29:15,179
successfully so then we get a common

629
00:29:09,890 --> 00:29:18,780
decent payload to robots.txt and we send

630
00:29:15,180 --> 00:29:21,660
it several times until we hijack our own

631
00:29:18,780 --> 00:29:26,370
connection and get back the robots.txt

632
00:29:21,660 --> 00:29:28,590
content so next we go back into the

633
00:29:26,370 --> 00:29:34,320
terminal and we do a directory

634
00:29:28,590 --> 00:29:36,590
brute-force search on the server we we

635
00:29:34,320 --> 00:29:38,879
do this to search for any 301 or 302

636
00:29:36,590 --> 00:29:41,129
redirects that may exist on the server

637
00:29:38,880 --> 00:29:45,660
because this could be a potential way to

638
00:29:41,130 --> 00:29:47,790
create a forced open redirect to victim

639
00:29:45,660 --> 00:29:51,810
connections so we find that CSS has one

640
00:29:47,790 --> 00:29:53,760
and so we test it in a and try to decide

641
00:29:51,810 --> 00:29:56,159
our own connection to see that the

642
00:29:53,760 --> 00:30:00,470
redirection payload we find that we can

643
00:29:56,160 --> 00:30:06,480
redirect our own connection to

644
00:30:00,470 --> 00:30:08,640
reconfigure that io / CSS / so what I

645
00:30:06,480 --> 00:30:11,790
usually do here is I see well if we

646
00:30:08,640 --> 00:30:14,940
provide a full URL to the back-end

647
00:30:11,790 --> 00:30:16,800
server to like say XCOM will that

648
00:30:14,940 --> 00:30:20,700
actually be will the back end reflect

649
00:30:16,800 --> 00:30:23,010
that back into 301 or 302 and so we send

650
00:30:20,700 --> 00:30:27,630
this a couple of times until we see the

651
00:30:23,010 --> 00:30:29,990
response from the server and indeed the

652
00:30:27,630 --> 00:30:34,380
server does actually respond back to

653
00:30:29,990 --> 00:30:37,830
XCOM slash CSS / so from here what we do

654
00:30:34,380 --> 00:30:40,350
is we set up a request bin and we get

655
00:30:37,830 --> 00:30:43,889
the URL for that request bin and we

656
00:30:40,350 --> 00:30:47,939
place that URL into the payload

657
00:30:43,890 --> 00:30:49,770
replacing the XCOM and we use this to

658
00:30:47,940 --> 00:30:54,270
potentially redirect any other

659
00:30:49,770 --> 00:30:56,129
connections to our request bin so let's

660
00:30:54,270 --> 00:30:58,029
see if there are any other requests that

661
00:30:56,130 --> 00:30:59,889
we can hijack other than

662
00:30:58,029 --> 00:31:03,279
so we send it and all of a sudden we

663
00:30:59,889 --> 00:31:04,748
start to get requests being placed into

664
00:31:03,279 --> 00:31:06,729
a request bid so let's take a look at

665
00:31:04,749 --> 00:31:09,339
them so if we look at that we look at

666
00:31:06,729 --> 00:31:12,570
the headers we see that oh we're

667
00:31:09,339 --> 00:31:15,849
actually forcing a redirect from

668
00:31:12,570 --> 00:31:18,549
reconfig CTF bot which is our script

669
00:31:15,849 --> 00:31:21,249
that's that's automatically sending

670
00:31:18,549 --> 00:31:25,839
these these requests to the server and

671
00:31:21,249 --> 00:31:28,119
so in in this request is this x-ray

672
00:31:25,839 --> 00:31:30,958
conveying auth token that has our flag

673
00:31:28,119 --> 00:31:35,019
for the conclusion of this of the CTF

674
00:31:30,959 --> 00:31:39,989
now sometimes you may or may not get

675
00:31:35,019 --> 00:31:43,749
cookies depending on whether or not the

676
00:31:39,989 --> 00:31:47,349
decliner hijacking places those cookies

677
00:31:43,749 --> 00:31:50,109
into into the requests but what often

678
00:31:47,349 --> 00:31:53,079
times I see is when you have a decent

679
00:31:50,109 --> 00:31:55,359
say to say an API server oftentimes you

680
00:31:53,079 --> 00:31:58,539
get these auth tokens that are in custom

681
00:31:55,359 --> 00:32:00,339
headers that are that seem to always be

682
00:31:58,539 --> 00:32:03,099
there on any request to the API server

683
00:32:00,339 --> 00:32:06,339
so API servers are are especially

684
00:32:03,099 --> 00:32:08,739
vulnerable to this style of attack to be

685
00:32:06,339 --> 00:32:11,619
able to steal the auth token away from

686
00:32:08,739 --> 00:32:15,059
away from a neighboring victim

687
00:32:11,619 --> 00:32:17,559
connection and so we take the flag here

688
00:32:15,059 --> 00:32:25,029
we bring it back to the landing page we

689
00:32:17,559 --> 00:32:26,918
enter it and solved the CTF challenge so

690
00:32:25,029 --> 00:32:28,450
let's go over what typically happens in

691
00:32:26,919 --> 00:32:30,579
some infrastructures when you send a

692
00:32:28,450 --> 00:32:33,190
request that contains a full URL in the

693
00:32:30,579 --> 00:32:35,408
request line oftentimes the front-end

694
00:32:33,190 --> 00:32:37,839
server will normalize these requests by

695
00:32:35,409 --> 00:32:40,359
converting the absolute request URL to a

696
00:32:37,839 --> 00:32:43,029
relative request and place the server

697
00:32:40,359 --> 00:32:45,789
address in the host header this acts as

698
00:32:43,029 --> 00:32:48,039
sort of a security sanitation because it

699
00:32:45,789 --> 00:32:50,440
means that the backend server will never

700
00:32:48,039 --> 00:32:55,509
see an absolute request specified on the

701
00:32:50,440 --> 00:32:58,089
request line however if an attacker were

702
00:32:55,509 --> 00:32:59,950
to bypass the sanitation by smuggling an

703
00:32:58,089 --> 00:33:01,690
absolute request directly to the backend

704
00:32:59,950 --> 00:33:04,419
server that this could allow the

705
00:33:01,690 --> 00:33:07,499
attacker more control over specifying an

706
00:33:04,419 --> 00:33:10,179
open redirect location say to XCOM in

707
00:33:07,499 --> 00:33:10,929
this diagram the attacker has poisoned

708
00:33:10,179 --> 00:33:12,820
the request

709
00:33:10,929 --> 00:33:15,429
with an absolute request to a foreign

710
00:33:12,820 --> 00:33:22,418
server but an endpoint that the back-end

711
00:33:15,429 --> 00:33:25,269
server knows to redirect so with the

712
00:33:22,419 --> 00:33:27,759
poison place with the poison place the

713
00:33:25,269 --> 00:33:31,299
CTF bot accesses the server with its

714
00:33:27,759 --> 00:33:35,369
auth token CTF spots requests is then

715
00:33:31,299 --> 00:33:35,369
merged with the poison as shown here and

716
00:33:35,580 --> 00:33:40,629
the backend blindly uses the absolute

717
00:33:38,499 --> 00:33:45,039
request line as a new server when we're

718
00:33:40,629 --> 00:33:46,689
flying back with a 302 redirect assuming

719
00:33:45,039 --> 00:33:50,259
the attacker has visibility or control

720
00:33:46,690 --> 00:33:52,029
of XCOM then CTF bot will repost all its

721
00:33:50,259 --> 00:33:55,599
secret headers back onto a request

722
00:33:52,029 --> 00:34:01,239
destined to XCOM with the attacker we'll

723
00:33:55,599 --> 00:34:03,009
use to collect this information so for

724
00:34:01,239 --> 00:34:04,450
the final POC of this talk I introduce

725
00:34:03,009 --> 00:34:06,580
session stealing using response queue

726
00:34:04,450 --> 00:34:08,230
poisoning this attack I found during my

727
00:34:06,580 --> 00:34:10,418
desync research is by far the most

728
00:34:08,230 --> 00:34:12,789
dangerous attack I've encountered far

729
00:34:10,418 --> 00:34:15,219
more dangerous than C LTE hijacking and

730
00:34:12,789 --> 00:34:17,619
I'll show you why for this demo I show a

731
00:34:15,219 --> 00:34:20,049
video of me attacking my server CTF that

732
00:34:17,619 --> 00:34:21,549
reconfig that IO while simulated victim

733
00:34:20,049 --> 00:34:25,779
traffic is also being sent to that

734
00:34:21,549 --> 00:34:28,089
server so if you recall a normal c LT

735
00:34:25,779 --> 00:34:29,829
hijack shown here introduces a poison

736
00:34:28,089 --> 00:34:31,779
that sits on the backend TCP connection

737
00:34:29,829 --> 00:34:34,230
between the front end and a back end to

738
00:34:31,779 --> 00:34:36,699
be prepended to the next web request

739
00:34:34,230 --> 00:34:38,889
this happens because the poison is not a

740
00:34:36,699 --> 00:34:40,538
full HP request and so the back end

741
00:34:38,889 --> 00:34:44,470
queues the data waiting for the request

742
00:34:40,539 --> 00:34:46,049
conclusion however what if instead of a

743
00:34:44,469 --> 00:34:49,709
partially sheepy request the attacker

744
00:34:46,049 --> 00:34:53,049
smuggled a full HP request

745
00:34:49,710 --> 00:34:54,970
this causes HTTP request splitting and

746
00:34:53,049 --> 00:34:57,700
the back end interprets this one request

747
00:34:54,969 --> 00:34:59,770
as two requests and two responses are

748
00:34:57,700 --> 00:35:02,020
generated so what happens when two

749
00:34:59,770 --> 00:35:03,759
responses are generated presumably the

750
00:35:02,020 --> 00:35:05,950
first response goes back to the attacker

751
00:35:03,760 --> 00:35:07,380
but what does the load balancer do when

752
00:35:05,950 --> 00:35:11,950
the second with their second response

753
00:35:07,380 --> 00:35:14,789
let's jump into the POC demo so here's a

754
00:35:11,950 --> 00:35:17,288
POC demo of response cue poison anchor

755
00:35:14,789 --> 00:35:20,440
first we scan for some common CLT

756
00:35:17,289 --> 00:35:23,109
attacks which I've done per prior we

757
00:35:20,440 --> 00:35:24,550
found it under join exploit issue we

758
00:35:23,109 --> 00:35:28,120
have no redirect to exploit this

759
00:35:24,550 --> 00:35:31,390
time and we have a hint to exploit the

760
00:35:28,120 --> 00:35:33,730
response queue of the server so we open

761
00:35:31,390 --> 00:35:38,740
a new repeater tab and we test the

762
00:35:33,730 --> 00:35:41,890
connection to the server so we take the

763
00:35:38,740 --> 00:35:44,319
URL to the server we paste it into the

764
00:35:41,890 --> 00:35:49,540
repeater to test that the connection

765
00:35:44,320 --> 00:35:52,030
works we then take a payload of a normal

766
00:35:49,540 --> 00:35:55,390
CLT hijacked of robots to see if our

767
00:35:52,030 --> 00:35:57,130
hijack works and if we send it a couple

768
00:35:55,390 --> 00:36:01,390
send it a couple times we see that we do

769
00:35:57,130 --> 00:36:03,790
get the robots.txt output so in this

770
00:36:01,390 --> 00:36:05,650
next step we go into the turbo intruder

771
00:36:03,790 --> 00:36:09,910
where I have a special script to help

772
00:36:05,650 --> 00:36:13,450
out with requests smuggling and response

773
00:36:09,910 --> 00:36:16,480
acute poisoning attacks I paste in the

774
00:36:13,450 --> 00:36:19,990
CLTV version of this request smuggling

775
00:36:16,480 --> 00:36:22,680
script and we have a whole bunch of

776
00:36:19,990 --> 00:36:25,450
parameters to fill out for this attack

777
00:36:22,680 --> 00:36:28,690
so we first start by specifying two

778
00:36:25,450 --> 00:36:31,350
server CTF dollar you can fig dial on

779
00:36:28,690 --> 00:36:31,350
port 80

780
00:36:35,280 --> 00:36:43,810
we specifies an attack count of three

781
00:36:38,880 --> 00:36:46,360
with regular requests ten so that we

782
00:36:43,810 --> 00:36:48,580
have thirteen requests in in total and

783
00:36:46,360 --> 00:36:50,500
we continuously send those requests at

784
00:36:48,580 --> 00:36:53,110
ten connections with five requests per

785
00:36:50,500 --> 00:36:54,880
connection we specify what our smuggle

786
00:36:53,110 --> 00:36:56,560
gadget is in this case is under join so

787
00:36:54,880 --> 00:36:59,830
we put an underscore between transfer

788
00:36:56,560 --> 00:37:01,900
and encoding we have a post request and

789
00:36:59,830 --> 00:37:04,330
we specify the host header and the

790
00:37:01,900 --> 00:37:09,910
smuggler request as CTF not reconfig

791
00:37:04,330 --> 00:37:12,759
that I owe for the prefix parameter we

792
00:37:09,910 --> 00:37:16,899
keep it as a get request to 404 a normal

793
00:37:12,760 --> 00:37:20,800
404 not found we play CTF diary config

794
00:37:16,900 --> 00:37:22,390
daya I owe as the prefix host and we

795
00:37:20,800 --> 00:37:26,890
specify this as nan chopped meaning a

796
00:37:22,390 --> 00:37:30,910
full HTTP request we remove any any

797
00:37:26,890 --> 00:37:34,870
response filters and we start issuing

798
00:37:30,910 --> 00:37:38,500
off to attack so immediately we start to

799
00:37:34,870 --> 00:37:41,700
see regular 200 OK's from

800
00:37:38,500 --> 00:37:47,710
the normal landing page which is typical

801
00:37:41,700 --> 00:37:50,970
and we also see we also see in the

802
00:37:47,710 --> 00:37:55,710
response 404 Stu not found which which

803
00:37:50,970 --> 00:37:58,149
means that our smuggles also have worked

804
00:37:55,710 --> 00:38:01,270
but let's take a look at the data

805
00:37:58,150 --> 00:38:03,670
closely by filtering out the greetings

806
00:38:01,270 --> 00:38:05,470
page so we add greetings the string

807
00:38:03,670 --> 00:38:07,390
greetings as our filter to filter out

808
00:38:05,470 --> 00:38:09,910
responses that have the word greetings

809
00:38:07,390 --> 00:38:14,440
in it and we just get the 404 S which is

810
00:38:09,910 --> 00:38:17,890
the desync reply back but is there

811
00:38:14,440 --> 00:38:20,050
anything else there are we confusing the

812
00:38:17,890 --> 00:38:22,420
load balancer in any way for this we

813
00:38:20,050 --> 00:38:25,480
take the string in the 404 not found and

814
00:38:22,420 --> 00:38:29,080
we place it also as a filter and we see

815
00:38:25,480 --> 00:38:32,020
how many requests will take to confuse

816
00:38:29,080 --> 00:38:34,569
the load balancer so we start sending

817
00:38:32,020 --> 00:38:38,369
hundreds and hundreds of requests and we

818
00:38:34,570 --> 00:38:41,070
start seeing weird responses coming back

819
00:38:38,369 --> 00:38:44,740
let's take a look and we see this

820
00:38:41,070 --> 00:38:46,540
interesting response that was never

821
00:38:44,740 --> 00:38:50,709
requested by the attacker

822
00:38:46,540 --> 00:38:52,119
we have PII data with first name last

823
00:38:50,710 --> 00:38:53,920
name address phone number and social

824
00:38:52,119 --> 00:38:58,480
security number and we have a session

825
00:38:53,920 --> 00:39:01,599
token so we take the session token and

826
00:38:58,480 --> 00:39:06,750
we finish the CTF by place in that

827
00:39:01,599 --> 00:39:06,750
session token into the main landing page

828
00:39:09,900 --> 00:39:14,200
ok so what's happening here why did we

829
00:39:12,670 --> 00:39:16,270
get a response that was not destined for

830
00:39:14,200 --> 00:39:17,770
us to understand why let's quickly

831
00:39:16,270 --> 00:39:19,420
review how load balancers and other

832
00:39:17,770 --> 00:39:21,609
reverse proxies keep track of response

833
00:39:19,420 --> 00:39:24,040
order when you have a load balancer that

834
00:39:21,609 --> 00:39:25,690
supports HTTP pipelining serving many

835
00:39:24,040 --> 00:39:27,190
connections the order of these

836
00:39:25,690 --> 00:39:28,300
connections are done as first-come

837
00:39:27,190 --> 00:39:31,839
first-serve or first-in-first-out

838
00:39:28,300 --> 00:39:34,180
ordering in this diagram we see customer

839
00:39:31,839 --> 00:39:34,480
a b c and d sending requests in that

840
00:39:34,180 --> 00:39:36,759
order

841
00:39:34,480 --> 00:39:40,510
these requests go down a common back-end

842
00:39:36,760 --> 00:39:41,950
connection in that order the response is

843
00:39:40,510 --> 00:39:44,250
produced by the back-end are sent back

844
00:39:41,950 --> 00:39:46,930
in that same order and a load balancer

845
00:39:44,250 --> 00:39:51,130
sends responses back to their requesters

846
00:39:46,930 --> 00:39:51,609
also in that order but what happens if

847
00:39:51,130 --> 00:39:53,470
we do

848
00:39:51,610 --> 00:39:56,320
the server's to cause request split on

849
00:39:53,470 --> 00:39:58,270
the back end this time customer a is an

850
00:39:56,320 --> 00:40:00,460
attack is an attacker sending a decent

851
00:39:58,270 --> 00:40:02,890
payload with a full HTTP request and

852
00:40:00,460 --> 00:40:05,470
customer B C and D are sending normal

853
00:40:02,890 --> 00:40:06,879
requests these requests are sent down

854
00:40:05,470 --> 00:40:09,040
the back in connection in that order

855
00:40:06,880 --> 00:40:11,770
however requests a causes an HTTP

856
00:40:09,040 --> 00:40:16,000
request split so how does this affect

857
00:40:11,770 --> 00:40:18,280
the response queue so now instead of

858
00:40:16,000 --> 00:40:20,590
four we have five responses being sent

859
00:40:18,280 --> 00:40:22,780
back from the backend server the load

860
00:40:20,590 --> 00:40:26,470
balancer sends a response a back to the

861
00:40:22,780 --> 00:40:29,260
attacker but then responds a split is

862
00:40:26,470 --> 00:40:31,600
sent to customer B and a response for

863
00:40:29,260 --> 00:40:33,250
customer B is sent to customer C and a

864
00:40:31,600 --> 00:40:35,770
response for customer C is sent the

865
00:40:33,250 --> 00:40:37,780
customer D and so on if an attacker

866
00:40:35,770 --> 00:40:40,090
plays a role of both customer a and

867
00:40:37,780 --> 00:40:42,070
customer D then they have successfully

868
00:40:40,090 --> 00:40:43,960
stolen a response intended for customers

869
00:40:42,070 --> 00:40:48,280
C which could contain a session cookie

870
00:40:43,960 --> 00:40:50,080
or PII however in doing so the attacker

871
00:40:48,280 --> 00:40:51,910
created a lot of collateral damage to

872
00:40:50,080 --> 00:40:53,770
the server every connection is now

873
00:40:51,910 --> 00:40:55,299
getting responses to other connections

874
00:40:53,770 --> 00:40:58,840
for the lifetime of the back-end

875
00:40:55,300 --> 00:41:01,870
connection so I've used this technique

876
00:40:58,840 --> 00:41:03,730
to get critical on several programs one

877
00:41:01,870 --> 00:41:05,950
in particular give a very generous

878
00:41:03,730 --> 00:41:09,400
bounty but also a stern warning shown

879
00:41:05,950 --> 00:41:11,980
here the biggest problem is in the

880
00:41:09,400 --> 00:41:14,920
payload that injects extra HTTP requests

881
00:41:11,980 --> 00:41:17,080
is a TCP stream if you are lucky you'll

882
00:41:14,920 --> 00:41:18,850
be able to get a get a response of their

883
00:41:17,080 --> 00:41:21,009
customers requests and his session

884
00:41:18,850 --> 00:41:23,799
cookie unfortunately there's a side

885
00:41:21,010 --> 00:41:26,440
effect every requests in this TCP stream

886
00:41:23,800 --> 00:41:29,050
from now on will be D synchronized that

887
00:41:26,440 --> 00:41:31,450
means that the attackers customers did

888
00:41:29,050 --> 00:41:33,490
the next customers requests will get a

889
00:41:31,450 --> 00:41:36,189
response to a normal attackers request

890
00:41:33,490 --> 00:41:38,529
and so on for as long as the backend TCP

891
00:41:36,190 --> 00:41:42,430
connection is open the result of the

892
00:41:38,530 --> 00:41:44,560
above is that not only are not only you

893
00:41:42,430 --> 00:41:47,109
are possibly getting the session of some

894
00:41:44,560 --> 00:41:48,790
victim but other people can also get

895
00:41:47,110 --> 00:41:50,920
sessions and data which do not belong to

896
00:41:48,790 --> 00:41:52,240
them in other words a bunch of random

897
00:41:50,920 --> 00:41:54,070
people will suddenly receive in the

898
00:41:52,240 --> 00:41:56,080
background data that was meant for

899
00:41:54,070 --> 00:41:58,810
someone else and in some cases even

900
00:41:56,080 --> 00:42:01,540
valid session cookies causing them to be

901
00:41:58,810 --> 00:42:03,610
suddenly relog din as someone else we

902
00:42:01,540 --> 00:42:04,339
think it's pretty obvious that when this

903
00:42:03,610 --> 00:42:07,219
happens

904
00:42:04,339 --> 00:42:09,589
environment it's not great no this is

905
00:42:07,219 --> 00:42:11,900
not a theoretical issue and in fact we

906
00:42:09,589 --> 00:42:14,150
can confirm based on exhaustive analysis

907
00:42:11,900 --> 00:42:17,119
of our service logs that this has indeed

908
00:42:14,150 --> 00:42:19,339
happened because of your testing so it

909
00:42:17,119 --> 00:42:24,049
goes without saying that response acute

910
00:42:19,339 --> 00:42:26,859
poisoning is a very dangerous attack but

911
00:42:24,049 --> 00:42:30,130
can be used by attackers to leak

912
00:42:26,859 --> 00:42:33,769
sensitive PII data in session cookies

913
00:42:30,130 --> 00:42:39,849
for for high throughput high traffic

914
00:42:33,769 --> 00:42:41,839
servers so that's all I had for today

915
00:42:39,849 --> 00:42:44,119
thanks everyone for listening to my talk

916
00:42:41,839 --> 00:42:45,920
I hope it gave some inspiration to this

917
00:42:44,119 --> 00:42:47,960
weird bug class I would like to

918
00:42:45,920 --> 00:42:50,059
personally thank the Homme con hosts the

919
00:42:47,960 --> 00:42:52,309
Homme sex the cyber mentor Stoke and

920
00:42:50,059 --> 00:42:53,900
John Hammond and a thank you to all the

921
00:42:52,309 --> 00:42:56,359
speakers and sponsors involved in making

922
00:42:53,900 --> 00:42:58,460
the Homme con a success for any blog

923
00:42:56,359 --> 00:43:00,950
postings related to my POCs you can find

924
00:42:58,460 --> 00:43:02,660
me on twitter at def Bream also check

925
00:43:00,950 --> 00:43:04,910
out my github account for my latest

926
00:43:02,660 --> 00:43:06,288
smuggler tool hackers and scary teams

927
00:43:04,910 --> 00:43:08,058
are free to use it to scan there are a

928
00:43:06,289 --> 00:43:10,190
lot of difference truckers this tool

929
00:43:08,059 --> 00:43:11,749
only points out potential httpd sync

930
00:43:10,190 --> 00:43:14,839
issues but does not exploit them for

931
00:43:11,749 --> 00:43:16,749
exploitation check out my turbo turbo

932
00:43:14,839 --> 00:43:18,920
intruders desync attack helper scripts

933
00:43:16,749 --> 00:43:20,538
triage are familiar with these scripts

934
00:43:18,920 --> 00:43:23,599
I've used them to craft payloads to

935
00:43:20,539 --> 00:43:25,910
actively exploit desync issues they're

936
00:43:23,599 --> 00:43:26,989
great to use as POC in reproduction

937
00:43:25,910 --> 00:43:29,239
steps for request my glowing

938
00:43:26,989 --> 00:43:30,079
vulnerability reports well that's it

939
00:43:29,239 --> 00:43:32,619
thanks everyone

940
00:43:30,079 --> 00:43:32,619
take care

941
00:43:38,619 --> 00:43:40,680
you

