1
00:00:00,030 --> 00:00:03,989
for sure alright so we have one more

2
00:00:02,580 --> 00:00:06,930
minute

3
00:00:03,990 --> 00:00:09,360
the next speaker we have MDI seg he's

4
00:00:06,930 --> 00:00:12,570
also a streamer himself he's also a good

5
00:00:09,360 --> 00:00:14,940
friend of mine he does a lot of hacking

6
00:00:12,570 --> 00:00:17,460
live also I think he does I think his

7
00:00:14,940 --> 00:00:20,130
audience is mostly Turkish but this talk

8
00:00:17,460 --> 00:00:22,109
is special because not only he is a

9
00:00:20,130 --> 00:00:24,359
great hacker he's a stream and also a

10
00:00:22,109 --> 00:00:25,710
first-time speaker for anything that we

11
00:00:24,359 --> 00:00:28,650
have organized as this group

12
00:00:25,710 --> 00:00:30,689
he wasn't adversity Khan and he also is

13
00:00:28,650 --> 00:00:32,098
just here for the first time so before

14
00:00:30,689 --> 00:00:36,059
we get started can we get the channel

15
00:00:32,098 --> 00:00:37,620
over hyped up drop some MDI SEC emotes

16
00:00:36,059 --> 00:00:39,540
if you are a subscriber to his channel

17
00:00:37,620 --> 00:00:42,180
and if not job some other remotes let's

18
00:00:39,540 --> 00:00:45,809
get this chopped up and we're gonna

19
00:00:42,180 --> 00:00:47,370
bring on his talk in a few seconds let's

20
00:00:45,809 --> 00:00:50,070
talk about finding a zero-day

21
00:00:47,370 --> 00:00:52,288
vulnerability on the security solutions

22
00:00:50,070 --> 00:00:53,969
this is Mohammed injure and I've been

23
00:00:52,289 --> 00:00:57,899
working as a vulnerable to researcher

24
00:00:53,969 --> 00:01:00,780
since 2005 you can find me on Twitter

25
00:00:57,899 --> 00:01:03,030
with my MD Isaac handler and the

26
00:01:00,780 --> 00:01:06,299
Panthers thought that block is a webpage

27
00:01:03,030 --> 00:01:08,990
where me and my teammates writing a

28
00:01:06,299 --> 00:01:12,689
technical articles about our research

29
00:01:08,990 --> 00:01:14,820
today's case study is Tran macro

30
00:01:12,689 --> 00:01:17,939
interests can work security virtual

31
00:01:14,820 --> 00:01:19,289
appliance we are going to talk about -

32
00:01:17,939 --> 00:01:21,149
the combination of the different

33
00:01:19,290 --> 00:01:23,820
vulnerabilities that I found on the

34
00:01:21,150 --> 00:01:26,430
product which gives us a remote on

35
00:01:23,820 --> 00:01:31,429
authenticate code execution with a root

36
00:01:26,430 --> 00:01:33,900
user so here's the methodology of my

37
00:01:31,430 --> 00:01:36,659
vulnerability research project and the

38
00:01:33,900 --> 00:01:38,640
first step is quite easy you find a way

39
00:01:36,659 --> 00:01:41,579
to get a free trial of the product and

40
00:01:38,640 --> 00:01:44,310
read the documentation about it and find

41
00:01:41,579 --> 00:01:46,589
a way to make a success connection to

42
00:01:44,310 --> 00:01:48,780
the Box try to understand the features

43
00:01:46,590 --> 00:01:50,939
enumerated all the service and the

44
00:01:48,780 --> 00:01:52,890
configuration and the most important

45
00:01:50,939 --> 00:01:57,508
part is that define the attack vector

46
00:01:52,890 --> 00:02:00,210
and find a vulnerability a free trial

47
00:01:57,509 --> 00:02:02,310
step it was quite easy in that case but

48
00:02:00,210 --> 00:02:05,280
it's not always easy to get an access to

49
00:02:02,310 --> 00:02:06,869
free trial sometimes it requires - lots

50
00:02:05,280 --> 00:02:09,330
of meeting with the sales team well in

51
00:02:06,869 --> 00:02:11,250
that case it was quite easy and the

52
00:02:09,330 --> 00:02:12,750
second step is reading the manual and

53
00:02:11,250 --> 00:02:15,650
the information about the product

54
00:02:12,750 --> 00:02:18,780
you have to get as much as possible

55
00:02:15,650 --> 00:02:21,450
information about your targets because

56
00:02:18,780 --> 00:02:26,250
you will use those information during

57
00:02:21,450 --> 00:02:28,950
the exploitation phase as you can see in

58
00:02:26,250 --> 00:02:31,230
here we are seeing the different mod

59
00:02:28,950 --> 00:02:33,950
selections about the product it can be

60
00:02:31,230 --> 00:02:38,450
installed as a breach mode forward proxy

61
00:02:33,950 --> 00:02:40,829
proxy etc exit you can even see the

62
00:02:38,450 --> 00:02:43,260
graphic and the detailed information

63
00:02:40,830 --> 00:02:45,270
about the most selections in the

64
00:02:43,260 --> 00:02:48,420
documentation so it is quite important

65
00:02:45,270 --> 00:02:51,630
to get those information before doing

66
00:02:48,420 --> 00:02:54,869
something technical and third step is we

67
00:02:51,630 --> 00:02:58,200
have to find a way to SSH to the box

68
00:02:54,870 --> 00:03:00,450
since we are installing the product in

69
00:02:58,200 --> 00:03:04,530
our environment and it's being shipped

70
00:03:00,450 --> 00:03:06,690
as an ISO file by the vendor you can set

71
00:03:04,530 --> 00:03:08,370
the administrator password during the

72
00:03:06,690 --> 00:03:10,230
installation but when you do that such

73
00:03:08,370 --> 00:03:11,610
connection it will gives you the

74
00:03:10,230 --> 00:03:14,579
restricted shell and there is nothing

75
00:03:11,610 --> 00:03:17,730
you can do too much about things in the

76
00:03:14,580 --> 00:03:20,070
restricted shell so we have to find a

77
00:03:17,730 --> 00:03:21,959
way to get rid of those restricted shell

78
00:03:20,070 --> 00:03:26,010
and we need to have an either remove -

79
00:03:21,959 --> 00:03:28,410
root shell in our in our environment it

80
00:03:26,010 --> 00:03:30,540
is quite important because you wanna do

81
00:03:28,410 --> 00:03:32,700
remote debugging you want you have

82
00:03:30,540 --> 00:03:34,079
access to the code base in the product

83
00:03:32,700 --> 00:03:37,470
you wanna elaborate the different

84
00:03:34,080 --> 00:03:40,260
services and in order to do all those

85
00:03:37,470 --> 00:03:43,940
stuff you have to have a special

86
00:03:40,260 --> 00:03:47,519
connection so in that case the the

87
00:03:43,940 --> 00:03:51,060
operating system has a lots of hardening

88
00:03:47,519 --> 00:03:53,010
so you have to install the ISO file into

89
00:03:51,060 --> 00:03:56,070
your visualization system of course and

90
00:03:53,010 --> 00:03:58,230
if you when you do that you can the

91
00:03:56,070 --> 00:04:00,239
attach the VM the card disc from the

92
00:03:58,230 --> 00:04:02,730
virtual machine you can attach it to the

93
00:04:00,239 --> 00:04:05,190
different Linux machine and when you do

94
00:04:02,730 --> 00:04:07,078
that you need you want to need disk and

95
00:04:05,190 --> 00:04:10,470
find-a-grave file because there was that

96
00:04:07,079 --> 00:04:12,900
grab protection in the box so you can

97
00:04:10,470 --> 00:04:15,359
simply remove the protection line from

98
00:04:12,900 --> 00:04:18,600
the graph file and then you can go to

99
00:04:15,360 --> 00:04:21,450
the accession sshd config file in order

100
00:04:18,600 --> 00:04:24,100
to enable remote route login and as a

101
00:04:21,450 --> 00:04:26,469
final step you can I

102
00:04:24,100 --> 00:04:29,890
the past video file and you can give the

103
00:04:26,470 --> 00:04:32,410
beam bash for the root user and you can

104
00:04:29,890 --> 00:04:34,750
unmount this from your secondary virtual

105
00:04:32,410 --> 00:04:36,370
machine you can detach the VM deco file

106
00:04:34,750 --> 00:04:38,650
and you can attach it back to the

107
00:04:36,370 --> 00:04:42,430
original VM and you can reboot you can

108
00:04:38,650 --> 00:04:44,349
restart the operating system and you

109
00:04:42,430 --> 00:04:46,720
will be having a remote as such

110
00:04:44,350 --> 00:04:49,420
connection to the box those kind of

111
00:04:46,720 --> 00:04:52,390
things are important before doing one

112
00:04:49,420 --> 00:04:54,490
able to research project and the fourth

113
00:04:52,390 --> 00:04:56,500
step is it is quite important to

114
00:04:54,490 --> 00:05:00,280
understand the feature of the product

115
00:04:56,500 --> 00:05:03,940
just installing it into your researching

116
00:05:00,280 --> 00:05:06,820
why I won't try to use the product in a

117
00:05:03,940 --> 00:05:09,280
normal way now I must say and since we

118
00:05:06,820 --> 00:05:11,290
are going to talk about the reverse

119
00:05:09,280 --> 00:05:13,510
proxy installation of the product and

120
00:05:11,290 --> 00:05:17,140
you can go to the administrator

121
00:05:13,510 --> 00:05:20,680
interface of the product which is quite

122
00:05:17,140 --> 00:05:23,289
easy to use it because it's a solution

123
00:05:20,680 --> 00:05:26,260
as you know it doesn't have sometimes it

124
00:05:23,290 --> 00:05:28,990
has a beautiful UI user interface but

125
00:05:26,260 --> 00:05:30,789
you need to get familiar with the

126
00:05:28,990 --> 00:05:33,870
features of the administrator interface

127
00:05:30,790 --> 00:05:37,870
to find out how these things is working

128
00:05:33,870 --> 00:05:42,640
the five step is quite important we need

129
00:05:37,870 --> 00:05:44,830
to do a numeration of the box there you

130
00:05:42,640 --> 00:05:47,979
can you can just get the output of the

131
00:05:44,830 --> 00:05:50,500
nested netstat command to find out what

132
00:05:47,980 --> 00:05:53,200
kind of services are running in the box

133
00:05:50,500 --> 00:05:56,290
as you can see in the red squares there

134
00:05:53,200 --> 00:05:57,969
was a UW SGI service which means most

135
00:05:56,290 --> 00:06:02,710
probable there's a Python project

136
00:05:57,970 --> 00:06:05,770
running on a poor ad 11 sorry 60 11 and

137
00:06:02,710 --> 00:06:07,599
there is a Java services which is

138
00:06:05,770 --> 00:06:09,849
listening to administrator interface

139
00:06:07,600 --> 00:06:11,830
port that means the administrator

140
00:06:09,850 --> 00:06:16,120
interface is written with Java most

141
00:06:11,830 --> 00:06:19,719
probably it's being run by the Apache

142
00:06:16,120 --> 00:06:23,890
Tomcat service and there is IW SSD which

143
00:06:19,720 --> 00:06:26,350
listens the port 8080 and 88888 one that

144
00:06:23,890 --> 00:06:29,919
that is the service is running for the

145
00:06:26,350 --> 00:06:32,370
reverse proxy itself so since the

146
00:06:29,920 --> 00:06:35,440
product is a reverse proxy that means

147
00:06:32,370 --> 00:06:37,970
it's been placed between the client and

148
00:06:35,440 --> 00:06:41,030
the user and that is a specific process

149
00:06:37,970 --> 00:06:43,480
which is responsible for the taking

150
00:06:41,030 --> 00:06:49,700
records from the user and send it to the

151
00:06:43,480 --> 00:06:50,540
requested source and if you have to do a

152
00:06:49,700 --> 00:06:52,700
numeration

153
00:06:50,540 --> 00:06:55,100
you have to keep doing the service

154
00:06:52,700 --> 00:06:57,800
enumeration we get the information about

155
00:06:55,100 --> 00:07:00,530
to what kind of service we have in here

156
00:06:57,800 --> 00:07:02,930
but you need to find out which all those

157
00:07:00,530 --> 00:07:05,119
services are accessible from the outside

158
00:07:02,930 --> 00:07:08,030
of the box you can use the IP tables or

159
00:07:05,120 --> 00:07:10,340
you can just run an am BAPS come from

160
00:07:08,030 --> 00:07:12,469
outside of the box to find out which are

161
00:07:10,340 --> 00:07:17,510
those shows are accessible from the

162
00:07:12,470 --> 00:07:19,760
outcoming connections alright let's have

163
00:07:17,510 --> 00:07:22,969
a look at the Python process that we

164
00:07:19,760 --> 00:07:25,039
have seen earlier as you can see there

165
00:07:22,970 --> 00:07:27,310
is Apache Solr service and lots of

166
00:07:25,040 --> 00:07:31,250
Python services that means there is a

167
00:07:27,310 --> 00:07:34,730
internal Python project and it's most

168
00:07:31,250 --> 00:07:38,060
probably responsible for parsing the log

169
00:07:34,730 --> 00:07:40,880
files and acquiring so most probably

170
00:07:38,060 --> 00:07:43,400
when I was you try to query something

171
00:07:40,880 --> 00:07:47,090
through the administrator interface that

172
00:07:43,400 --> 00:07:49,340
data can be parsed by that protein

173
00:07:47,090 --> 00:07:51,409
project or it can be delivered by the

174
00:07:49,340 --> 00:07:53,750
Python project but the important thing

175
00:07:51,410 --> 00:07:58,640
is that we have the Apache Solr service

176
00:07:53,750 --> 00:07:59,450
in here alright let's have a look at the

177
00:07:58,640 --> 00:08:02,690
ISW

178
00:07:59,450 --> 00:08:04,820
SSD service you can find the full path

179
00:08:02,690 --> 00:08:06,890
just by grabbing the process tree and

180
00:08:04,820 --> 00:08:10,010
you can use the file command to find out

181
00:08:06,890 --> 00:08:14,120
what is the file type which has assembly

182
00:08:10,010 --> 00:08:18,110
link to the is w w is w SS - process

183
00:08:14,120 --> 00:08:21,230
which is Linux binary and it has more

184
00:08:18,110 --> 00:08:24,530
than 6 it actually specifically has 6 to

185
00:08:21,230 --> 00:08:28,220
1 imported project so basically it's a

186
00:08:24,530 --> 00:08:31,460
very huge binary file and I can tell you

187
00:08:28,220 --> 00:08:33,620
it is written with the C++ so we are

188
00:08:31,460 --> 00:08:37,309
facing with a different type of

189
00:08:33,620 --> 00:08:39,650
technologies we have Apache Solr Python

190
00:08:37,309 --> 00:08:42,439
project Java for the administrative

191
00:08:39,650 --> 00:08:45,290
interface C++ project for the reverse

192
00:08:42,440 --> 00:08:48,470
proxy service so those are the most

193
00:08:45,290 --> 00:08:50,829
important information about our target

194
00:08:48,470 --> 00:08:53,380
so we got enough

195
00:08:50,830 --> 00:08:55,900
information I believe about the product

196
00:08:53,380 --> 00:08:59,110
so we can define some sort of possible

197
00:08:55,900 --> 00:09:00,699
attack vectors so we know that the this

198
00:08:59,110 --> 00:09:02,530
product is being placed between the

199
00:09:00,700 --> 00:09:04,780
client and the destination it takes the

200
00:09:02,530 --> 00:09:07,600
request from the clients clients and it

201
00:09:04,780 --> 00:09:09,819
sends it to do destination on behalf of

202
00:09:07,600 --> 00:09:10,480
a user and whenever the proxy gets the

203
00:09:09,820 --> 00:09:14,890
response

204
00:09:10,480 --> 00:09:17,110
it forces back to the client so but that

205
00:09:14,890 --> 00:09:20,260
product also is capable to offloading

206
00:09:17,110 --> 00:09:22,540
the SSL parse all the HTML contents kind

207
00:09:20,260 --> 00:09:24,550
of files because it is a very secure to

208
00:09:22,540 --> 00:09:28,000
solutions it's try to understand what's

209
00:09:24,550 --> 00:09:30,609
happening on the clients network so it

210
00:09:28,000 --> 00:09:32,860
has to see the all the files parsed HTML

211
00:09:30,610 --> 00:09:36,370
content offloading the society setter

212
00:09:32,860 --> 00:09:39,970
etcetera so that is another attack

213
00:09:36,370 --> 00:09:41,830
vector we can aim and the third step you

214
00:09:39,970 --> 00:09:43,540
can see the administrative interface is

215
00:09:41,830 --> 00:09:45,250
written with Java so we can basically

216
00:09:43,540 --> 00:09:46,810
just focus on the administrator

217
00:09:45,250 --> 00:09:51,160
interface to find out something

218
00:09:46,810 --> 00:09:53,500
important and also we can target the

219
00:09:51,160 --> 00:09:56,350
proxy service which was written with C++

220
00:09:53,500 --> 00:09:59,050
and as you know there's a lot of

221
00:09:56,350 --> 00:10:01,150
internal services part most of them are

222
00:09:59,050 --> 00:10:04,660
not accessible from outside of the work

223
00:10:01,150 --> 00:10:08,350
so those are the possible attack vectors

224
00:10:04,660 --> 00:10:10,810
where we can target from outside of the

225
00:10:08,350 --> 00:10:12,240
box itself let's start Peter talking

226
00:10:10,810 --> 00:10:15,369
about the administrator interface

227
00:10:12,240 --> 00:10:18,660
whenever I'm dealing with the Java

228
00:10:15,370 --> 00:10:21,130
project I'm stuck I'm start doing the

229
00:10:18,660 --> 00:10:22,900
configuration understanding you know I'm

230
00:10:21,130 --> 00:10:25,510
just reading the configuration file as

231
00:10:22,900 --> 00:10:29,199
the initial step to find out the initial

232
00:10:25,510 --> 00:10:31,360
information about the project itself but

233
00:10:29,200 --> 00:10:33,460
we don't have a direct source code

234
00:10:31,360 --> 00:10:36,490
access we have all the jar files in the

235
00:10:33,460 --> 00:10:41,380
box and thanks to the operating system

236
00:10:36,490 --> 00:10:44,230
hardening breaking stuff we can secure

237
00:10:41,380 --> 00:10:46,450
copy all of those jar files and the

238
00:10:44,230 --> 00:10:51,550
configuration files into your main host

239
00:10:46,450 --> 00:10:53,790
to do further analysis so if we have the

240
00:10:51,550 --> 00:10:56,229
loss of jar files on your hands I

241
00:10:53,790 --> 00:11:00,339
strongly suggest you to use ideas

242
00:10:56,230 --> 00:11:02,200
because IDs gives you an ability to find

243
00:11:00,340 --> 00:11:03,490
out a function definition just by

244
00:11:02,200 --> 00:11:06,010
clicking on a function

245
00:11:03,490 --> 00:11:08,320
and also you can find a different

246
00:11:06,010 --> 00:11:11,740
location where the specific function

247
00:11:08,320 --> 00:11:15,459
you're interested has been called I used

248
00:11:11,740 --> 00:11:17,320
to use GD UI for that purpose but since

249
00:11:15,459 --> 00:11:19,750
that product project has a lot of

250
00:11:17,320 --> 00:11:22,330
libraries because there's a lot of

251
00:11:19,750 --> 00:11:25,390
third-party third-party Java libraries

252
00:11:22,330 --> 00:11:27,040
you know and you want to have the

253
00:11:25,390 --> 00:11:29,470
clicking continue to the function

254
00:11:27,040 --> 00:11:32,500
definition feature and if you put lots

255
00:11:29,470 --> 00:11:36,880
of heavy work on the G dy it wasn't just

256
00:11:32,500 --> 00:11:39,339
working as expected so I just shifted to

257
00:11:36,880 --> 00:11:42,640
using IntelliJ or the Eclipse for that

258
00:11:39,339 --> 00:11:45,089
purpose and you can Dec compile all the

259
00:11:42,640 --> 00:11:47,949
jar files and you can put them into the

260
00:11:45,089 --> 00:11:50,589
intelligent as a library source and

261
00:11:47,950 --> 00:11:52,810
classes and the intelligibility the rest

262
00:11:50,589 --> 00:11:54,850
of the job you want so it's gonna

263
00:11:52,810 --> 00:11:57,399
process and analyze all the source

264
00:11:54,850 --> 00:11:59,800
because I need to give you and quite

265
00:11:57,399 --> 00:12:04,089
easy way to find the function definition

266
00:11:59,800 --> 00:12:06,189
and everything so so far we got all the

267
00:12:04,089 --> 00:12:08,410
information at least for the initial

268
00:12:06,190 --> 00:12:10,750
step all the information we needs we

269
00:12:08,410 --> 00:12:12,819
have an access to source code of the

270
00:12:10,750 --> 00:12:15,370
administrative interface so it's time to

271
00:12:12,820 --> 00:12:18,160
start reading some source code so you

272
00:12:15,370 --> 00:12:21,070
can either go to top to bottom or but on

273
00:12:18,160 --> 00:12:23,800
the top so but on top means you let's

274
00:12:21,070 --> 00:12:26,380
say you know the potential runnable

275
00:12:23,800 --> 00:12:28,599
functions and you can directly search

276
00:12:26,380 --> 00:12:31,660
those function in the code base and if

277
00:12:28,600 --> 00:12:34,540
you believe you find some sweet spot you

278
00:12:31,660 --> 00:12:37,180
can try to find out you can reach those

279
00:12:34,540 --> 00:12:39,910
code paths or not so you are starting

280
00:12:37,180 --> 00:12:42,160
from bottom right and for the top to

281
00:12:39,910 --> 00:12:44,290
bottom you can start by reading filters

282
00:12:42,160 --> 00:12:47,290
or the middleware layer of the project

283
00:12:44,290 --> 00:12:49,810
you can go to the request handler or the

284
00:12:47,290 --> 00:12:52,510
controller layer and you can go to the

285
00:12:49,810 --> 00:12:57,099
repository and the rest of thing so in

286
00:12:52,510 --> 00:13:00,010
that case I'm kinda well I was kind of

287
00:12:57,100 --> 00:13:02,079
doing top to bottom approach so I was

288
00:13:00,010 --> 00:13:03,880
reading the handler functions and after

289
00:13:02,079 --> 00:13:06,310
spending a couple of hearts on the code

290
00:13:03,880 --> 00:13:10,870
base I found that's particular function

291
00:13:06,310 --> 00:13:13,479
definition and it is accessible by slash

292
00:13:10,870 --> 00:13:16,680
mount on the scroll device path and it

293
00:13:13,480 --> 00:13:18,690
takes the port porn post request

294
00:13:16,680 --> 00:13:20,910
and if you look at the initial

295
00:13:18,690 --> 00:13:22,740
definition in the codebase it tells you

296
00:13:20,910 --> 00:13:25,469
if the request is not coming from below

297
00:13:22,740 --> 00:13:29,340
close I'm gonna Walla date this request

298
00:13:25,470 --> 00:13:32,610
so if if you manage to pass that past

299
00:13:29,340 --> 00:13:35,700
that part pass past that if statement it

300
00:13:32,610 --> 00:13:38,160
calls to get token and if we look at the

301
00:13:35,700 --> 00:13:40,530
rest of the function definition there is

302
00:13:38,160 --> 00:13:43,680
something different something special is

303
00:13:40,530 --> 00:13:47,699
happening so it takes a post body and it

304
00:13:43,680 --> 00:13:50,520
parses as energy is an object it does

305
00:13:47,700 --> 00:13:55,470
some escaping stuff especially have a

306
00:13:50,520 --> 00:13:57,630
look at the Ford F for the line 418 so

307
00:13:55,470 --> 00:14:01,920
it escapes the dollar sign within a

308
00:13:57,630 --> 00:14:05,310
backslash and after two line later it at

309
00:14:01,920 --> 00:14:07,790
caves it escapes backslash one more time

310
00:14:05,310 --> 00:14:12,119
so there is a double escaping on back

311
00:14:07,790 --> 00:14:14,969
backslash character so if you keep

312
00:14:12,120 --> 00:14:17,190
reading the code base as you can see it

313
00:14:14,970 --> 00:14:19,890
passed that those parameters to the

314
00:14:17,190 --> 00:14:24,770
Exile how to see on the function and the

315
00:14:19,890 --> 00:14:27,210
name of the function explains itself

316
00:14:24,770 --> 00:14:29,130
keep reading the source code because we

317
00:14:27,210 --> 00:14:31,680
are interested that particular function

318
00:14:29,130 --> 00:14:35,460
exit you I help with CMD and as you can

319
00:14:31,680 --> 00:14:37,140
understand so far after param variable

320
00:14:35,460 --> 00:14:39,060
has been passed to that function and we

321
00:14:37,140 --> 00:14:41,160
can control everything in After Prom

322
00:14:39,060 --> 00:14:42,750
and there is some sort of escaping

323
00:14:41,160 --> 00:14:45,089
happening in there and there is a

324
00:14:42,750 --> 00:14:49,280
problem because the backslash is escaped

325
00:14:45,090 --> 00:14:52,470
twice it executed to e

326
00:14:49,280 --> 00:14:54,750
execute UI how pure binary which is

327
00:14:52,470 --> 00:14:58,200
located under the ETCs can add me UI

328
00:14:54,750 --> 00:15:00,960
folder and if you look at that binary it

329
00:14:58,200 --> 00:15:04,020
has the su ID bit and the owner of that

330
00:15:00,960 --> 00:15:06,840
or owner of that binaries root so that

331
00:15:04,020 --> 00:15:11,910
means that records will be executed with

332
00:15:06,840 --> 00:15:14,250
the root user privilege and finally we

333
00:15:11,910 --> 00:15:17,100
are seeing the eggs a CMD function and

334
00:15:14,250 --> 00:15:18,840
axis iam the function basically execute

335
00:15:17,100 --> 00:15:23,220
the command has been given to the

336
00:15:18,840 --> 00:15:25,440
function so we have removed command

337
00:15:23,220 --> 00:15:28,500
injection one level T but there is a

338
00:15:25,440 --> 00:15:29,139
limitation authentication is required to

339
00:15:28,500 --> 00:15:31,869
explain

340
00:15:29,139 --> 00:15:33,879
that one ability we have to option here

341
00:15:31,869 --> 00:15:36,639
we have to find a way to authentication

342
00:15:33,879 --> 00:15:40,149
bypass all we need to find the way to

343
00:15:36,639 --> 00:15:42,399
some sort of SSR f1 ER ability to reach

344
00:15:40,149 --> 00:15:43,949
out that specific end point from the

345
00:15:42,399 --> 00:15:46,929
lock loss because as you can remember

346
00:15:43,949 --> 00:15:51,299
the request is request coming from the

347
00:15:46,929 --> 00:15:54,730
locus locals are allowed in here okay so

348
00:15:51,299 --> 00:15:57,759
you might remember gat talkin function

349
00:15:54,730 --> 00:16:00,850
from the previous slides basically it

350
00:15:57,759 --> 00:16:04,410
takes the cookie of the request and it

351
00:16:00,850 --> 00:16:08,290
print out that cookie name and the value

352
00:16:04,410 --> 00:16:10,959
but the problem is those printing out

353
00:16:08,290 --> 00:16:14,019
think is going to be written in the log

354
00:16:10,959 --> 00:16:16,540
file on Tomcat project so if you find a

355
00:16:14,019 --> 00:16:19,419
way to local file disclosure we can

356
00:16:16,540 --> 00:16:23,259
directly go and read the content of the

357
00:16:19,419 --> 00:16:25,779
Apache log file and we can extract to

358
00:16:23,259 --> 00:16:28,899
violets session ID so we don't need to

359
00:16:25,779 --> 00:16:31,600
necessarily have a way to bypass

360
00:16:28,899 --> 00:16:34,389
authentication we can just we just need

361
00:16:31,600 --> 00:16:37,059
to find a local file disclosure right so

362
00:16:34,389 --> 00:16:42,129
in order to find a local file disclosure

363
00:16:37,059 --> 00:16:45,399
or I was thinking about the targeting

364
00:16:42,129 --> 00:16:47,619
the proxy service itself because it just

365
00:16:45,399 --> 00:16:49,600
takes the URL you want to visit from the

366
00:16:47,619 --> 00:16:52,619
user as you can see in this packet

367
00:16:49,600 --> 00:16:55,119
picture we are communicating with the

368
00:16:52,619 --> 00:16:57,160
proxy service and we are telling them

369
00:16:55,119 --> 00:17:00,449
that all right I wanna go to the

370
00:16:57,160 --> 00:17:03,459
Panthers block and the proxy service

371
00:17:00,449 --> 00:17:05,529
sends that request on behalf of you and

372
00:17:03,459 --> 00:17:06,908
you will get response when the proxy

373
00:17:05,529 --> 00:17:10,148
service get a response from the

374
00:17:06,909 --> 00:17:12,459
destination so this is basically how

375
00:17:10,148 --> 00:17:14,529
it's work of course it is much more than

376
00:17:12,459 --> 00:17:18,039
this but this is the basic understanding

377
00:17:14,529 --> 00:17:21,970
of the proxy service what happened if I

378
00:17:18,039 --> 00:17:24,849
tell the proxy service that okay I want

379
00:17:21,970 --> 00:17:28,899
you to communicate you two with yourself

380
00:17:24,849 --> 00:17:31,480
and when I try that the probe shows told

381
00:17:28,899 --> 00:17:33,789
me that self-referential request to the

382
00:17:31,480 --> 00:17:37,840
proxy are forbidden so that was

383
00:17:33,789 --> 00:17:39,460
interesting if I find a way to trick the

384
00:17:37,840 --> 00:17:40,269
proxy service to communicate with

385
00:17:39,460 --> 00:17:42,650
himself

386
00:17:40,269 --> 00:17:45,380
I may have a find a way to communicate

387
00:17:42,650 --> 00:17:49,460
the internal services that I have that

388
00:17:45,380 --> 00:17:53,240
we talked about previous slides so I

389
00:17:49,460 --> 00:17:55,670
just want to see how this error is being

390
00:17:53,240 --> 00:17:59,000
produced by the proxy service so I just

391
00:17:55,670 --> 00:18:01,700
drag point into the get and use the auto

392
00:17:59,000 --> 00:18:04,550
notification function which is producing

393
00:18:01,700 --> 00:18:07,790
exactly same HTTP response we are seeing

394
00:18:04,550 --> 00:18:10,389
in here and that function when I hit the

395
00:18:07,790 --> 00:18:13,250
repeat button on the birth suite pro I

396
00:18:10,390 --> 00:18:15,380
see the function calls because that

397
00:18:13,250 --> 00:18:17,870
notification function is being called by

398
00:18:15,380 --> 00:18:19,880
the propria procs loop rejection and it

399
00:18:17,870 --> 00:18:21,260
is being called by the handle probes and

400
00:18:19,880 --> 00:18:24,350
which has been called by the do

401
00:18:21,260 --> 00:18:27,710
processing so let's start doing some

402
00:18:24,350 --> 00:18:30,649
easier was engineering stuff on the do a

403
00:18:27,710 --> 00:18:34,610
proxy function definition as you can see

404
00:18:30,650 --> 00:18:36,770
it was a very huge file but very very

405
00:18:34,610 --> 00:18:38,540
specific portion of the definition of

406
00:18:36,770 --> 00:18:40,910
the do processing function

407
00:18:38,540 --> 00:18:44,690
it just looks for the configuration file

408
00:18:40,910 --> 00:18:46,730
by doing a reverse proxy function call

409
00:18:44,690 --> 00:18:49,820
so basically it's try to understand am i

410
00:18:46,730 --> 00:18:52,059
placed as a reverse proxy and in that

411
00:18:49,820 --> 00:18:57,110
case it calls the handle proxy love and

412
00:18:52,059 --> 00:18:59,000
post live calls is same address function

413
00:18:57,110 --> 00:19:01,520
from the TM socket address class and

414
00:18:59,000 --> 00:19:04,760
that particular function specially

415
00:19:01,520 --> 00:19:07,940
compared itself with the target

416
00:19:04,760 --> 00:19:11,890
destination by doing full URL comparison

417
00:19:07,940 --> 00:19:15,050
all right so and in if the if the if

418
00:19:11,890 --> 00:19:19,790
those two others are same it calls the

419
00:19:15,050 --> 00:19:21,050
prepare proxy loop rejection so I just

420
00:19:19,790 --> 00:19:22,820
told him all right

421
00:19:21,050 --> 00:19:24,980
I want to communicate with the different

422
00:19:22,820 --> 00:19:27,460
port on your look lost because you but

423
00:19:24,980 --> 00:19:30,559
you are being installed in a port 8080

424
00:19:27,460 --> 00:19:32,210
alright I'm telling you the same IP

425
00:19:30,559 --> 00:19:34,610
address but I'm telling you the

426
00:19:32,210 --> 00:19:36,620
different port and there is a patch a

427
00:19:34,610 --> 00:19:39,469
solar service in the local service that

428
00:19:36,620 --> 00:19:43,669
we have seen previous slides so in that

429
00:19:39,470 --> 00:19:46,750
case that proxy service get me to the

430
00:19:43,670 --> 00:19:50,510
answer so I have an access to solar

431
00:19:46,750 --> 00:19:54,500
administrator interface that runs in the

432
00:19:50,510 --> 00:19:56,490
box as a local service so that was

433
00:19:54,500 --> 00:19:57,860
another one ER ability

434
00:19:56,490 --> 00:20:00,869
as you can see the vulnerable

435
00:19:57,860 --> 00:20:03,508
description provided by the zero the

436
00:20:00,869 --> 00:20:05,699
initiative company they told that that

437
00:20:03,509 --> 00:20:07,350
an attacker can leverage this vulnerable

438
00:20:05,700 --> 00:20:09,090
to the bypass authentication on the

439
00:20:07,350 --> 00:20:13,469
system I will leave everyone right now

440
00:20:09,090 --> 00:20:15,809
understand what's happening so after

441
00:20:13,470 --> 00:20:17,879
that point I start to working on the

442
00:20:15,809 --> 00:20:19,860
Apache Solr service and unfortunate

443
00:20:17,879 --> 00:20:22,049
there was a very old version in the Box

444
00:20:19,860 --> 00:20:23,998
it's not quite easy to upgrade your

445
00:20:22,049 --> 00:20:26,850
third-party services like a database on

446
00:20:23,999 --> 00:20:29,279
the solar if you are doing those type of

447
00:20:26,850 --> 00:20:31,110
products so that was a very old and

448
00:20:29,279 --> 00:20:33,809
known vulnerability which is the

449
00:20:31,110 --> 00:20:36,269
arbitrary fire read via Pat reversal

450
00:20:33,809 --> 00:20:39,090
attack so there was a vulnerability in

451
00:20:36,269 --> 00:20:42,299
Apache Solr service and I find a way to

452
00:20:39,090 --> 00:20:45,480
communicate with Apache Solr service

453
00:20:42,299 --> 00:20:48,600
itself and by using known vulnerability

454
00:20:45,480 --> 00:20:50,220
in the Apache Solr version 4 I managed

455
00:20:48,600 --> 00:20:55,199
to get the content of the end of file I

456
00:20:50,220 --> 00:20:57,869
want so as you know I just changed the

457
00:20:55,200 --> 00:21:00,840
file from its past we did the Tomcats

458
00:20:57,869 --> 00:21:05,519
catalina that out file and i have seen

459
00:21:00,840 --> 00:21:08,189
that the session ID is so the developer

460
00:21:05,519 --> 00:21:10,710
just innocently decided to print out the

461
00:21:08,190 --> 00:21:13,980
cookies during the part of the cookie

462
00:21:10,710 --> 00:21:16,830
header within the catacomb function and

463
00:21:13,980 --> 00:21:19,940
that information is written in the log

464
00:21:16,830 --> 00:21:22,309
file and i'm by using the two different

465
00:21:19,940 --> 00:21:25,909
vulnerability together we managed to

466
00:21:22,309 --> 00:21:27,899
leak the active session IDs so

467
00:21:25,909 --> 00:21:30,629
exploitation chain is quite easy

468
00:21:27,899 --> 00:21:32,850
actually we're going to exploit the

469
00:21:30,629 --> 00:21:34,769
proxy service vulnerability itself we

470
00:21:32,850 --> 00:21:37,678
can a force in to communicate with a

471
00:21:34,769 --> 00:21:41,669
solar service that's running on the box

472
00:21:37,679 --> 00:21:43,710
itself and when we do that we can

473
00:21:41,669 --> 00:21:46,440
exploit the old one they will t in the

474
00:21:43,710 --> 00:21:49,590
solar service to get a content of to

475
00:21:46,440 --> 00:21:52,919
catalina dot out file and we need to

476
00:21:49,590 --> 00:21:55,619
find a session ID thanks to the guitar

477
00:21:52,919 --> 00:21:58,590
comm function definition and we can do

478
00:21:55,619 --> 00:22:00,720
go back to the exploitation of the

479
00:21:58,590 --> 00:22:03,529
command execution one durability which

480
00:22:00,720 --> 00:22:05,759
requires a valid identification and

481
00:22:03,529 --> 00:22:09,419
combining all of those vulnerabilities

482
00:22:05,759 --> 00:22:10,140
we got your remote root shell here is

483
00:22:09,419 --> 00:22:14,010
the method

484
00:22:10,140 --> 00:22:16,590
module that I implemented for that

485
00:22:14,010 --> 00:22:18,240
vulnerability and it's quite easy you

486
00:22:16,590 --> 00:22:22,909
are just telling the okay this is a

487
00:22:18,240 --> 00:22:27,450
localhost this is the remote host and

488
00:22:22,910 --> 00:22:31,200
get my shell and run there you go you

489
00:22:27,450 --> 00:22:34,650
got the remote unauthenticated code

490
00:22:31,200 --> 00:22:36,480
execution with a root privilege and tego

491
00:22:34,650 --> 00:22:39,180
this is how I find a zero-day

492
00:22:36,480 --> 00:22:40,650
vulnerability in the security solution

493
00:22:39,180 --> 00:22:43,680
guys thank you very much for listening

494
00:22:40,650 --> 00:22:46,680
and if you have any questions you can

495
00:22:43,680 --> 00:22:49,400
follow me on Twitter thank you very much

496
00:22:46,680 --> 00:22:49,400
guys thanks

497
00:22:55,850 --> 00:22:57,909
you

