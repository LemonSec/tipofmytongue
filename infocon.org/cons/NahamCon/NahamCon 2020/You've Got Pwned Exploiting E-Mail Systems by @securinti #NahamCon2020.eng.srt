1
00:00:01,439 --> 00:00:05,120
and we're back

2
00:00:03,439 --> 00:00:06,560
all right that was a cool talk by tom i

3
00:00:05,120 --> 00:00:08,480
hope everybody got to join

4
00:00:06,560 --> 00:00:10,000
the live qa on discord in case you guys

5
00:00:08,480 --> 00:00:11,360
didn't know there is a live q a for

6
00:00:10,000 --> 00:00:15,040
almost every talk after

7
00:00:11,360 --> 00:00:17,359
we get done and i really hope after

8
00:00:15,040 --> 00:00:18,560
this talk we get less people asking us

9
00:00:17,359 --> 00:00:20,320
to share word list

10
00:00:18,560 --> 00:00:22,080
and that sort of request so if you're

11
00:00:20,320 --> 00:00:23,279
watching this and you miss the talk and

12
00:00:22,080 --> 00:00:24,320
you want to get into your own word

13
00:00:23,279 --> 00:00:27,599
listing

14
00:00:24,320 --> 00:00:29,279
please give this video a try and

15
00:00:27,599 --> 00:00:31,199
make sure you follow along i think it's

16
00:00:29,279 --> 00:00:32,558
a really cool way that uh tom uses you

17
00:00:31,199 --> 00:00:35,360
know open source

18
00:00:32,558 --> 00:00:36,718
um projects and i love how he changes

19
00:00:35,360 --> 00:00:37,839
different tools you know for different

20
00:00:36,719 --> 00:00:40,320
purposes and

21
00:00:37,840 --> 00:00:42,640
just spits out tons of tons of uh word

22
00:00:40,320 --> 00:00:42,640
listing

23
00:00:42,719 --> 00:00:46,239
should we get started on our next talk

24
00:00:45,440 --> 00:00:48,718
absolutely

25
00:00:46,239 --> 00:00:49,519
the next speaker coming up is no other

26
00:00:48,719 --> 00:00:53,520
than

27
00:00:49,520 --> 00:00:55,680
inti and he's one of the few person

28
00:00:53,520 --> 00:00:57,600
that has made a show and telling each

29
00:00:55,680 --> 00:00:59,440
and every of the hacker one live hacking

30
00:00:57,600 --> 00:01:01,920
events and the presentations

31
00:00:59,440 --> 00:01:02,800
that this gentleman presents is always

32
00:01:01,920 --> 00:01:05,199
mind-blowing

33
00:01:02,800 --> 00:01:06,960
and to be able to have this i don't know

34
00:01:05,199 --> 00:01:09,520
a concatenated version

35
00:01:06,960 --> 00:01:10,640
of pretty freaking awesomeness being

36
00:01:09,520 --> 00:01:12,880
presented from us

37
00:01:10,640 --> 00:01:13,680
but no other than indy is for me

38
00:01:12,880 --> 00:01:16,560
personally

39
00:01:13,680 --> 00:01:16,960
mind blowing so if you are hyped about

40
00:01:16,560 --> 00:01:19,360
into

41
00:01:16,960 --> 00:01:20,320
giving this talk let me know in the chat

42
00:01:19,360 --> 00:01:22,799
to you there's not

43
00:01:20,320 --> 00:01:23,839
lazy bots hanging around give me some

44
00:01:22,799 --> 00:01:26,960
int in the

45
00:01:23,840 --> 00:01:28,960
in the chat let it free and um

46
00:01:26,960 --> 00:01:30,880
if i get a little bit of rumble going on

47
00:01:28,960 --> 00:01:34,399
with that we're gonna let the talk

48
00:01:30,880 --> 00:01:36,880
go um yeah come in

49
00:01:34,400 --> 00:01:38,720
come on everybody let's get into we go

50
00:01:36,880 --> 00:01:42,158
yeah here we go blowing up now

51
00:01:38,720 --> 00:01:44,640
okay we're going the hype train

52
00:01:42,159 --> 00:01:45,759
is live and crazy i think it's time to

53
00:01:44,640 --> 00:01:48,320
bring auntie up

54
00:01:45,759 --> 00:01:50,640
you guys ready let's bring indian let's

55
00:01:48,320 --> 00:01:52,798
jump into it

56
00:01:50,640 --> 00:01:54,320
all right hello everybody and welcome to

57
00:01:52,799 --> 00:01:57,040
my talk you've got pond

58
00:01:54,320 --> 00:01:58,719
exploiting email systems we only have 20

59
00:01:57,040 --> 00:01:59,280
minutes together so let's get down to

60
00:01:58,719 --> 00:02:01,439
business

61
00:01:59,280 --> 00:02:02,719
right away okay so i'll start off with a

62
00:02:01,439 --> 00:02:04,880
quick introduction

63
00:02:02,719 --> 00:02:05,839
my name is indy and my accent comes from

64
00:02:04,880 --> 00:02:07,679
belgium

65
00:02:05,840 --> 00:02:09,759
i currently work as a community manager

66
00:02:07,680 --> 00:02:11,360
for bugbounty platform integrity

67
00:02:09,758 --> 00:02:12,799
where i mainly get to throw on their

68
00:02:11,360 --> 00:02:14,239
twitter account so

69
00:02:12,800 --> 00:02:16,480
please follow us because you know it

70
00:02:14,239 --> 00:02:18,080
makes me money other than that i've been

71
00:02:16,480 --> 00:02:19,200
active on several other bugbounty

72
00:02:18,080 --> 00:02:20,879
platforms as well

73
00:02:19,200 --> 00:02:23,359
where most of my time goes into life

74
00:02:20,879 --> 00:02:25,040
hacking events people that know me will

75
00:02:23,360 --> 00:02:27,360
know that i tend to look for a very

76
00:02:25,040 --> 00:02:29,440
specific range of vulnerabilities

77
00:02:27,360 --> 00:02:31,840
more often than not related to email

78
00:02:29,440 --> 00:02:34,079
systems and today i would like to share

79
00:02:31,840 --> 00:02:36,160
some of these findings with you so first

80
00:02:34,080 --> 00:02:37,519
let me state why i think emails are just

81
00:02:36,160 --> 00:02:39,280
so interesting

82
00:02:37,519 --> 00:02:41,280
they contain a lot of confidential

83
00:02:39,280 --> 00:02:42,400
information from attachments to password

84
00:02:41,280 --> 00:02:43,599
reset links

85
00:02:42,400 --> 00:02:45,519
you know there's just so much

86
00:02:43,599 --> 00:02:48,319
specification edge cases

87
00:02:45,519 --> 00:02:50,000
and integration purposes that only very

88
00:02:48,319 --> 00:02:52,958
few vendors tend to get it right

89
00:02:50,000 --> 00:02:55,120
actually so the fact that most of the

90
00:02:52,959 --> 00:02:55,920
ideas behind email are also pretty

91
00:02:55,120 --> 00:02:58,239
outdated

92
00:02:55,920 --> 00:02:59,359
doesn't really help this combined with

93
00:02:58,239 --> 00:03:02,560
the fact that

94
00:02:59,360 --> 00:03:03,760
almost everybody and every service uses

95
00:03:02,560 --> 00:03:05,680
or implements it

96
00:03:03,760 --> 00:03:08,000
makes it a very interesting and often

97
00:03:05,680 --> 00:03:09,680
forgotten target for bug bounty hunters

98
00:03:08,000 --> 00:03:11,200
so let's start with the part that we all

99
00:03:09,680 --> 00:03:12,959
know the email address

100
00:03:11,200 --> 00:03:14,560
at first glance this looks pretty

101
00:03:12,959 --> 00:03:16,400
straightforward right

102
00:03:14,560 --> 00:03:18,159
you have the local port which specifies

103
00:03:16,400 --> 00:03:19,920
the users then you have the little ad

104
00:03:18,159 --> 00:03:21,519
symbol and then you have the domain

105
00:03:19,920 --> 00:03:23,440
all right now let's take a look at the

106
00:03:21,519 --> 00:03:24,000
actual specifications for the local

107
00:03:23,440 --> 00:03:26,079
parts

108
00:03:24,000 --> 00:03:27,920
i think nobody is surprised you can have

109
00:03:26,080 --> 00:03:28,480
latin characters digits and dots in

110
00:03:27,920 --> 00:03:30,559
there

111
00:03:28,480 --> 00:03:33,119
but what about hashes ampersand question

112
00:03:30,560 --> 00:03:35,440
marks brackets or percentage signs

113
00:03:33,120 --> 00:03:37,040
you know i think the way we see an email

114
00:03:35,440 --> 00:03:38,959
address is based on the

115
00:03:37,040 --> 00:03:40,879
email providers we all know like gmail

116
00:03:38,959 --> 00:03:42,720
and hotmail and of course they don't

117
00:03:40,879 --> 00:03:45,280
really allow these characters

118
00:03:42,720 --> 00:03:46,319
by their choice but it's not because

119
00:03:45,280 --> 00:03:47,920
they don't allow

120
00:03:46,319 --> 00:03:50,079
these characters in their email

121
00:03:47,920 --> 00:03:50,640
addresses that those are not valid email

122
00:03:50,080 --> 00:03:53,200
addresses

123
00:03:50,640 --> 00:03:55,200
according to the rfc now funny thing is

124
00:03:53,200 --> 00:03:57,200
that things will get even a little bit

125
00:03:55,200 --> 00:03:59,040
more funky if you start to quote the

126
00:03:57,200 --> 00:04:01,119
local part of an email address

127
00:03:59,040 --> 00:04:02,480
because for some reason this allows you

128
00:04:01,120 --> 00:04:05,040
to include some more

129
00:04:02,480 --> 00:04:07,359
potentially dangerous characters and

130
00:04:05,040 --> 00:04:09,359
even emojis

131
00:04:07,360 --> 00:04:11,360
okay so that leaves us with the domain

132
00:04:09,360 --> 00:04:12,879
part which is a little bit less funky

133
00:04:11,360 --> 00:04:15,040
than the local part

134
00:04:12,879 --> 00:04:16,079
it does allow ip addresses when

135
00:04:15,040 --> 00:04:18,079
encapsulated by

136
00:04:16,079 --> 00:04:20,239
square brackets which will be

137
00:04:18,079 --> 00:04:22,560
interesting for ssrf attacks but

138
00:04:20,238 --> 00:04:24,080
more on that later then there's also

139
00:04:22,560 --> 00:04:25,840
wild cards and comments

140
00:04:24,080 --> 00:04:28,000
lots of people use wildcards to

141
00:04:25,840 --> 00:04:30,560
recognize or take email addresses when

142
00:04:28,000 --> 00:04:32,240
signing up for third party services but

143
00:04:30,560 --> 00:04:34,080
for some reason you can also put a

144
00:04:32,240 --> 00:04:36,880
comment within an email address

145
00:04:34,080 --> 00:04:38,479
by putting it between parentheses i

146
00:04:36,880 --> 00:04:41,040
don't know who made it up

147
00:04:38,479 --> 00:04:41,758
but not a lot of people seem to know

148
00:04:41,040 --> 00:04:43,840
about it

149
00:04:41,759 --> 00:04:46,000
but email servers will actually ignore

150
00:04:43,840 --> 00:04:48,159
these when delivering your email so

151
00:04:46,000 --> 00:04:50,560
whatever junk you put in there

152
00:04:48,160 --> 00:04:52,080
will still arrive actually so that's

153
00:04:50,560 --> 00:04:53,600
always interesting when

154
00:04:52,080 --> 00:04:55,840
when you're just messing around with

155
00:04:53,600 --> 00:04:58,160
some payloads and want something funky

156
00:04:55,840 --> 00:05:00,400
you can just put it in a comment

157
00:04:58,160 --> 00:05:02,080
now that we've seen how rfc compliant

158
00:05:00,400 --> 00:05:03,758
email addresses can look like

159
00:05:02,080 --> 00:05:06,400
let's start to construct some valid

160
00:05:03,759 --> 00:05:08,240
payloads we can use for security testing

161
00:05:06,400 --> 00:05:09,758
okay i will just let the example speak

162
00:05:08,240 --> 00:05:11,680
for themselves here

163
00:05:09,759 --> 00:05:14,000
all of the email addresses are perfectly

164
00:05:11,680 --> 00:05:16,320
valid according to the rfc

165
00:05:14,000 --> 00:05:18,560
because developers usually don't expect

166
00:05:16,320 --> 00:05:21,759
malicious payloads in email addresses

167
00:05:18,560 --> 00:05:24,320
they're often not as properly sanitized

168
00:05:21,759 --> 00:05:25,919
in application flows as well

169
00:05:24,320 --> 00:05:28,479
i'll get you the slides after this

170
00:05:25,919 --> 00:05:31,039
presentation so you can use this

171
00:05:28,479 --> 00:05:31,840
for your testing there's no need to copy

172
00:05:31,039 --> 00:05:33,840
them now

173
00:05:31,840 --> 00:05:35,679
apart from traditional attack factors

174
00:05:33,840 --> 00:05:37,198
these email addresses can also be used

175
00:05:35,680 --> 00:05:39,520
to circumvent flows

176
00:05:37,199 --> 00:05:41,520
that require a very specific email

177
00:05:39,520 --> 00:05:42,960
domain usually from the company in

178
00:05:41,520 --> 00:05:45,280
question

179
00:05:42,960 --> 00:05:46,719
in the first example for example the

180
00:05:45,280 --> 00:05:47,919
valid email address ends with a

181
00:05:46,720 --> 00:05:50,000
whitelisted domain

182
00:05:47,919 --> 00:05:51,198
but when passed to the email server it

183
00:05:50,000 --> 00:05:53,360
gets treated as

184
00:05:51,199 --> 00:05:55,199
three different email addresses one of

185
00:05:53,360 --> 00:05:58,880
which is valid and will get the email

186
00:05:55,199 --> 00:06:01,199
intended for the actual whitelist domain

187
00:05:58,880 --> 00:06:03,120
then the next ones would work if the

188
00:06:01,199 --> 00:06:05,120
parsers take the first of the last

189
00:06:03,120 --> 00:06:07,360
occurrence of an email address

190
00:06:05,120 --> 00:06:08,800
but ignores everything followed by a

191
00:06:07,360 --> 00:06:11,039
semicolon or a bracket

192
00:06:08,800 --> 00:06:12,720
that also happens in some specific

193
00:06:11,039 --> 00:06:14,560
situations

194
00:06:12,720 --> 00:06:16,720
theory is all cool and stuff but let's

195
00:06:14,560 --> 00:06:17,680
see how this translates to real world

196
00:06:16,720 --> 00:06:20,000
scenarios

197
00:06:17,680 --> 00:06:22,400
a while ago i sent an email to my gmail

198
00:06:20,000 --> 00:06:24,880
address with some basic html

199
00:06:22,400 --> 00:06:27,359
embedded in a comment and to my surprise

200
00:06:24,880 --> 00:06:29,280
the html actually rendered

201
00:06:27,360 --> 00:06:31,360
unfortunately i could not escalate this

202
00:06:29,280 --> 00:06:33,039
xss and neither could a

203
00:06:31,360 --> 00:06:34,960
google security team so it kind of

204
00:06:33,039 --> 00:06:37,440
remains unexploitable

205
00:06:34,960 --> 00:06:39,758
however this still works for anyone

206
00:06:37,440 --> 00:06:40,160
wanting to try it out or maybe escalate

207
00:06:39,759 --> 00:06:43,680
it

208
00:06:40,160 --> 00:06:46,400
go ahead be my guest i personally had

209
00:06:43,680 --> 00:06:48,240
some more look with other email clients

210
00:06:46,400 --> 00:06:50,159
which resulted actually in multiple

211
00:06:48,240 --> 00:06:50,880
stored cross-site scripting issues in

212
00:06:50,160 --> 00:06:53,120
different

213
00:06:50,880 --> 00:06:55,360
email clients so at this moment i don't

214
00:06:53,120 --> 00:06:56,960
have permission to disclose these

215
00:06:55,360 --> 00:06:59,199
so you'll have to take my word for it

216
00:06:56,960 --> 00:07:01,599
but i can imagine the teams

217
00:06:59,199 --> 00:07:03,039
behind these email providers were kind

218
00:07:01,599 --> 00:07:04,880
of surprised that these

219
00:07:03,039 --> 00:07:07,440
cross-site scripting vulnerabilities

220
00:07:04,880 --> 00:07:10,080
were just you know around for more than

221
00:07:07,440 --> 00:07:12,240
a decade and nobody really tried to

222
00:07:10,080 --> 00:07:15,039
get that specific email address with the

223
00:07:12,240 --> 00:07:17,039
crazy html embedded inside of it

224
00:07:15,039 --> 00:07:18,080
okay so i hear you all saying okay this

225
00:07:17,039 --> 00:07:20,400
is cool but

226
00:07:18,080 --> 00:07:22,400
outside of email clients nobody would

227
00:07:20,400 --> 00:07:23,359
really accept or process these email

228
00:07:22,400 --> 00:07:26,880
addresses so

229
00:07:23,360 --> 00:07:29,280
what's your problem minty well you know

230
00:07:26,880 --> 00:07:30,800
you're right i mean most normal

231
00:07:29,280 --> 00:07:34,000
companies

232
00:07:30,800 --> 00:07:36,319
simple regex wouldn't really consider

233
00:07:34,000 --> 00:07:38,080
the rfc compliant email addresses with

234
00:07:36,319 --> 00:07:39,840
funky characters in them

235
00:07:38,080 --> 00:07:41,758
but there's still some ways to have

236
00:07:39,840 --> 00:07:43,758
these interact with your targets

237
00:07:41,759 --> 00:07:46,000
and that's often a double win as these

238
00:07:43,759 --> 00:07:48,720
targets won't really be prepared to

239
00:07:46,000 --> 00:07:50,240
actually deal with input like that one

240
00:07:48,720 --> 00:07:52,240
of the places where this actually

241
00:07:50,240 --> 00:07:53,120
happened was gitlab which i would like

242
00:07:52,240 --> 00:07:54,879
to thank for

243
00:07:53,120 --> 00:07:56,160
allowing me to disclose this issue

244
00:07:54,879 --> 00:07:58,400
during this talk

245
00:07:56,160 --> 00:08:00,240
so basically i tried to sign up with an

246
00:07:58,400 --> 00:08:02,799
rfc valid email address first

247
00:08:00,240 --> 00:08:04,879
that contained an xss payload but

248
00:08:02,800 --> 00:08:06,800
unfortunately you know their validator

249
00:08:04,879 --> 00:08:08,560
didn't want anything to do with that so

250
00:08:06,800 --> 00:08:10,080
uh no look there

251
00:08:08,560 --> 00:08:12,639
but then i took a step back and i

252
00:08:10,080 --> 00:08:14,560
noticed that they would allow anybody

253
00:08:12,639 --> 00:08:16,800
that to create a gitlab account to a

254
00:08:14,560 --> 00:08:19,440
third party identity provider

255
00:08:16,800 --> 00:08:21,199
possibly with individual differences in

256
00:08:19,440 --> 00:08:23,360
email validation rules

257
00:08:21,199 --> 00:08:24,800
so i ended up with this table and to my

258
00:08:23,360 --> 00:08:27,280
surprise two of five

259
00:08:24,800 --> 00:08:28,960
identity providers fully allowed rfc

260
00:08:27,280 --> 00:08:30,318
compliant email addresses

261
00:08:28,960 --> 00:08:32,000
know that this is not really a

262
00:08:30,319 --> 00:08:32,880
vulnerability with these identity

263
00:08:32,000 --> 00:08:36,000
providers

264
00:08:32,880 --> 00:08:37,919
they're only just following the rfc so i

265
00:08:36,000 --> 00:08:38,799
checked out github first and signed up

266
00:08:37,919 --> 00:08:41,199
for github

267
00:08:38,799 --> 00:08:42,000
with the email that gitlab initially

268
00:08:41,200 --> 00:08:44,080
rejected

269
00:08:42,000 --> 00:08:46,160
and then i signed up with this github

270
00:08:44,080 --> 00:08:47,040
account linked to that specific email

271
00:08:46,160 --> 00:08:48,800
address

272
00:08:47,040 --> 00:08:51,360
and to my surprise it worked and the

273
00:08:48,800 --> 00:08:52,959
email was there gitlab however properly

274
00:08:51,360 --> 00:08:54,320
escaped the email address so there was

275
00:08:52,959 --> 00:08:56,319
no excesses there

276
00:08:54,320 --> 00:08:58,160
however the difference in identity

277
00:08:56,320 --> 00:09:00,959
provider flows sparked my interest

278
00:08:58,160 --> 00:09:02,480
so i decided to dig a little bit deeper

279
00:09:00,959 --> 00:09:04,319
every time i wanted to inject a

280
00:09:02,480 --> 00:09:05,760
cross-site scripting payload through an

281
00:09:04,320 --> 00:09:08,240
identity provider

282
00:09:05,760 --> 00:09:09,040
i had to of course verify that email

283
00:09:08,240 --> 00:09:11,279
address

284
00:09:09,040 --> 00:09:13,279
except for the salesforce flow where i

285
00:09:11,279 --> 00:09:14,640
could just sign up with an unverified

286
00:09:13,279 --> 00:09:16,560
email address i looked into the

287
00:09:14,640 --> 00:09:18,480
salesforce documentation and as it

288
00:09:16,560 --> 00:09:20,319
turned out they actually specify

289
00:09:18,480 --> 00:09:22,640
whether the email address is verified or

290
00:09:20,320 --> 00:09:25,040
not in the identity response

291
00:09:22,640 --> 00:09:26,319
so it's expected behavior according to

292
00:09:25,040 --> 00:09:28,319
the documentation

293
00:09:26,320 --> 00:09:29,680
and then i started wondering whether

294
00:09:28,320 --> 00:09:32,240
gitlab had correctly

295
00:09:29,680 --> 00:09:34,160
implemented it or not so i set a gitlab

296
00:09:32,240 --> 00:09:36,000
email address in salesforce which i

297
00:09:34,160 --> 00:09:38,160
obviously could not verify then

298
00:09:36,000 --> 00:09:40,640
i looked at the idp response and as you

299
00:09:38,160 --> 00:09:42,240
can see the email verified attribute was

300
00:09:40,640 --> 00:09:44,800
correctly set to false

301
00:09:42,240 --> 00:09:46,800
so technically gitlab should reject it

302
00:09:44,800 --> 00:09:47,439
or trigger their own verification

303
00:09:46,800 --> 00:09:49,599
process

304
00:09:47,440 --> 00:09:51,279
so after logging into gitlab the email

305
00:09:49,600 --> 00:09:53,760
address actually showed up

306
00:09:51,279 --> 00:09:56,560
being verified so great now we have an

307
00:09:53,760 --> 00:09:58,720
email verification bypass on gitlab side

308
00:09:56,560 --> 00:10:00,319
obviously i tried to log into existing

309
00:09:58,720 --> 00:10:01,200
accounts to get account takeover

310
00:10:00,320 --> 00:10:02,880
basically

311
00:10:01,200 --> 00:10:04,480
but since these accounts were not linked

312
00:10:02,880 --> 00:10:06,720
to any salesforce instance

313
00:10:04,480 --> 00:10:08,800
i could not just log into their accounts

314
00:10:06,720 --> 00:10:09,519
using an unverified salesforce email

315
00:10:08,800 --> 00:10:12,240
address

316
00:10:09,519 --> 00:10:13,120
so hijacking gitlab account itself

317
00:10:12,240 --> 00:10:15,440
wouldn't work

318
00:10:13,120 --> 00:10:16,880
but then i remembered that like github

319
00:10:15,440 --> 00:10:19,600
some companies would use

320
00:10:16,880 --> 00:10:20,399
gitlab as an identity provider which

321
00:10:19,600 --> 00:10:22,800
would now

322
00:10:20,399 --> 00:10:24,160
indicate that the email address is

323
00:10:22,800 --> 00:10:26,319
actually verified

324
00:10:24,160 --> 00:10:28,640
so implementations that would only

325
00:10:26,320 --> 00:10:29,680
consider the verified email address for

326
00:10:28,640 --> 00:10:31,760
authentication

327
00:10:29,680 --> 00:10:32,880
would be vulnerable to account takeover

328
00:10:31,760 --> 00:10:35,519
so i quickly

329
00:10:32,880 --> 00:10:36,880
went on google looking for gitlab sso

330
00:10:35,519 --> 00:10:38,959
implementations

331
00:10:36,880 --> 00:10:40,880
and as it turned out our their own

332
00:10:38,959 --> 00:10:43,439
discourse based forum had one

333
00:10:40,880 --> 00:10:45,120
here's my actual gitlab forum account

334
00:10:43,440 --> 00:10:46,640
linked to my hacker1 email

335
00:10:45,120 --> 00:10:48,240
and take this effort there as a

336
00:10:46,640 --> 00:10:50,880
reference in this example

337
00:10:48,240 --> 00:10:52,160
if you see this it's my valid real

338
00:10:50,880 --> 00:10:54,880
account

339
00:10:52,160 --> 00:10:56,000
next up i created the second unverified

340
00:10:54,880 --> 00:10:58,320
gitlab account

341
00:10:56,000 --> 00:11:00,640
with the same email address through the

342
00:10:58,320 --> 00:11:02,800
salesforce single sign-on vulnerability

343
00:11:00,640 --> 00:11:04,800
so on the left hand side you can see my

344
00:11:02,800 --> 00:11:07,120
unverified gitlab account which

345
00:11:04,800 --> 00:11:09,040
appears to be verified and then on the

346
00:11:07,120 --> 00:11:10,320
right hand side you can see my valid

347
00:11:09,040 --> 00:11:13,120
form account

348
00:11:10,320 --> 00:11:14,959
so i just go to the forum then i connect

349
00:11:13,120 --> 00:11:16,880
my fake gitlab account

350
00:11:14,959 --> 00:11:19,279
and all of a sudden i'm logged into my

351
00:11:16,880 --> 00:11:20,160
real account so at this moment i could

352
00:11:19,279 --> 00:11:22,640
have taken over

353
00:11:20,160 --> 00:11:24,800
any account without user interaction but

354
00:11:22,640 --> 00:11:25,600
of course i only use my test accounts

355
00:11:24,800 --> 00:11:27,920
for testing

356
00:11:25,600 --> 00:11:30,079
so gitlab quickly addressed the issue by

357
00:11:27,920 --> 00:11:31,760
updating their single siren flow

358
00:11:30,079 --> 00:11:33,760
and they accepted it as a critical

359
00:11:31,760 --> 00:11:35,519
availability i also wanted to give a

360
00:11:33,760 --> 00:11:37,600
quick shout out to ron chen

361
00:11:35,519 --> 00:11:38,880
he reported the email verification

362
00:11:37,600 --> 00:11:40,720
process earlier

363
00:11:38,880 --> 00:11:43,040
but didn't escalate it to account

364
00:11:40,720 --> 00:11:43,360
takeover so technically my submission

365
00:11:43,040 --> 00:11:46,079
was

366
00:11:43,360 --> 00:11:48,560
dupe but we both agreed with gitlab to

367
00:11:46,079 --> 00:11:50,638
increase the severity of ron's report

368
00:11:48,560 --> 00:11:52,239
because of the account takeover and then

369
00:11:50,639 --> 00:11:54,399
split the bounty equally

370
00:11:52,240 --> 00:11:56,399
okay ladies and gentlemen we've spent

371
00:11:54,399 --> 00:11:58,160
quite some time on just email addresses

372
00:11:56,399 --> 00:11:59,120
and we haven't really sent a single

373
00:11:58,160 --> 00:12:00,959
email yet

374
00:11:59,120 --> 00:12:02,560
so for the next part of my talk i'm

375
00:12:00,959 --> 00:12:03,119
going to discuss some books that

376
00:12:02,560 --> 00:12:05,839
actually

377
00:12:03,120 --> 00:12:08,000
involve sending emails instead of just

378
00:12:05,839 --> 00:12:10,240
relying on email addresses

379
00:12:08,000 --> 00:12:11,200
let's simplify things for a moment when

380
00:12:10,240 --> 00:12:13,760
you send an email

381
00:12:11,200 --> 00:12:14,639
two things can happen the email arrives

382
00:12:13,760 --> 00:12:16,639
or it does not

383
00:12:14,639 --> 00:12:19,120
in which case it should bounce back to

384
00:12:16,639 --> 00:12:21,040
the sender let's be optimistic and

385
00:12:19,120 --> 00:12:21,680
assume that our email will actually

386
00:12:21,040 --> 00:12:23,519
arrive

387
00:12:21,680 --> 00:12:25,680
but before we dig into this i would like

388
00:12:23,519 --> 00:12:28,240
to ask you not to spam bug bounty

389
00:12:25,680 --> 00:12:30,800
programs or run automated tests

390
00:12:28,240 --> 00:12:32,720
always ask for permission first and read

391
00:12:30,800 --> 00:12:34,800
the program guidelines clearly

392
00:12:32,720 --> 00:12:36,480
you never know what kind of process an

393
00:12:34,800 --> 00:12:38,719
email can trigger on the backend

394
00:12:36,480 --> 00:12:40,000
so and you know if everybody starts

395
00:12:38,720 --> 00:12:41,600
doing it recklessly

396
00:12:40,000 --> 00:12:43,360
lots of bug bounty programs will

397
00:12:41,600 --> 00:12:44,480
probably close down because of all the

398
00:12:43,360 --> 00:12:47,040
noise so please

399
00:12:44,480 --> 00:12:47,680
don't a trick you can use for avoiding

400
00:12:47,040 --> 00:12:51,120
spam is

401
00:12:47,680 --> 00:12:52,638
verifying whether an email alias exists

402
00:12:51,120 --> 00:12:55,120
you can do that for example with a

403
00:12:52,639 --> 00:12:57,600
verify smtp command or

404
00:12:55,120 --> 00:12:58,399
just setting the recipient this will not

405
00:12:57,600 --> 00:13:01,360
really send an

406
00:12:58,399 --> 00:13:02,959
email so it won't really cause any spam

407
00:13:01,360 --> 00:13:04,160
however this won't work in all

408
00:13:02,959 --> 00:13:06,079
situations

409
00:13:04,160 --> 00:13:08,639
it really depends on the email server

410
00:13:06,079 --> 00:13:11,359
there's also some services and apis that

411
00:13:08,639 --> 00:13:11,839
provide these services so if you're into

412
00:13:11,360 --> 00:13:14,000
recon

413
00:13:11,839 --> 00:13:14,959
over email i would advise you to look at

414
00:13:14,000 --> 00:13:16,800
these

415
00:13:14,959 --> 00:13:18,638
so i made this list of common email

416
00:13:16,800 --> 00:13:19,439
addresses that usually don't link to an

417
00:13:18,639 --> 00:13:21,440
individual

418
00:13:19,440 --> 00:13:23,120
most of them will create some kind of

419
00:13:21,440 --> 00:13:25,279
ticket on the back end

420
00:13:23,120 --> 00:13:26,720
others can be configured to trigger some

421
00:13:25,279 --> 00:13:28,639
other kind of process

422
00:13:26,720 --> 00:13:30,560
now the customer support once come in

423
00:13:28,639 --> 00:13:31,120
handy to exploit things like ticket

424
00:13:30,560 --> 00:13:32,959
trick

425
00:13:31,120 --> 00:13:35,200
for those of you unfamiliar with ticket

426
00:13:32,959 --> 00:13:36,079
trick i will drop a link to the initial

427
00:13:35,200 --> 00:13:38,399
blog post

428
00:13:36,079 --> 00:13:40,319
by myself and some further work by

429
00:13:38,399 --> 00:13:42,480
uranium hacker

430
00:13:40,320 --> 00:13:44,560
and then there's also the internal

431
00:13:42,480 --> 00:13:47,680
ticketing system misconfiguration

432
00:13:44,560 --> 00:13:51,199
which was discussed in the previous

433
00:13:47,680 --> 00:13:53,839
virtual conference by uranium hacker

434
00:13:51,199 --> 00:13:54,959
but the last category is absolutely my

435
00:13:53,839 --> 00:13:57,600
favorite as they're

436
00:13:54,959 --> 00:13:58,000
even though they're rare they often lead

437
00:13:57,600 --> 00:14:00,160
to

438
00:13:58,000 --> 00:14:02,320
a lot of weird stuff so that's what i

439
00:14:00,160 --> 00:14:04,560
like just as an example

440
00:14:02,320 --> 00:14:06,240
during recon for a live hacking event i

441
00:14:04,560 --> 00:14:08,560
found out that mapbox had this

442
00:14:06,240 --> 00:14:09,360
test email address that would just

443
00:14:08,560 --> 00:14:11,760
return

444
00:14:09,360 --> 00:14:12,639
half a sentence to whoever sent

445
00:14:11,760 --> 00:14:14,720
something to it

446
00:14:12,639 --> 00:14:15,680
you know it's not really exploitable but

447
00:14:14,720 --> 00:14:18,320
it's still

448
00:14:15,680 --> 00:14:20,479
of an example i guess it's not that the

449
00:14:18,320 --> 00:14:22,320
email was completely useless though you

450
00:14:20,480 --> 00:14:24,480
know the headers can often contain some

451
00:14:22,320 --> 00:14:25,680
information about the kind of software

452
00:14:24,480 --> 00:14:27,760
they're using

453
00:14:25,680 --> 00:14:29,199
in this case this was help scout so it

454
00:14:27,760 --> 00:14:32,079
can really help you

455
00:14:29,199 --> 00:14:32,719
find additional systems and sometimes

456
00:14:32,079 --> 00:14:34,479
even

457
00:14:32,720 --> 00:14:36,560
you know the version of a specific

458
00:14:34,480 --> 00:14:37,760
system so always try to look at the

459
00:14:36,560 --> 00:14:39,680
email headers

460
00:14:37,760 --> 00:14:41,600
i've also seen the weirdest setups to

461
00:14:39,680 --> 00:14:43,439
obtain an invite for a private slack

462
00:14:41,600 --> 00:14:45,760
workspace

463
00:14:43,440 --> 00:14:47,839
in one case just emailing slack at

464
00:14:45,760 --> 00:14:49,360
company.com would just provide you with

465
00:14:47,839 --> 00:14:50,320
a sign up link so that was an

466
00:14:49,360 --> 00:14:53,120
interesting one

467
00:14:50,320 --> 00:14:54,320
another surprisingly common shadow items

468
00:14:53,120 --> 00:14:56,880
configuration

469
00:14:54,320 --> 00:14:57,360
is print at company.com that would just

470
00:14:56,880 --> 00:14:59,600
allow

471
00:14:57,360 --> 00:15:01,760
employees to send stuff to the printer

472
00:14:59,600 --> 00:15:04,320
and you know it would just print it

473
00:15:01,760 --> 00:15:06,319
in a red theme assessment for example uh

474
00:15:04,320 --> 00:15:08,240
if you encounter this you can sign up

475
00:15:06,320 --> 00:15:10,240
for a google account using print at

476
00:15:08,240 --> 00:15:12,480
company.com and then the printer would

477
00:15:10,240 --> 00:15:15,199
you know print out the code for you

478
00:15:12,480 --> 00:15:16,399
and you'd still need a way to retrieve

479
00:15:15,199 --> 00:15:18,399
the printed

480
00:15:16,399 --> 00:15:20,000
authentication code but it's definitely

481
00:15:18,399 --> 00:15:22,000
useful to get yourself

482
00:15:20,000 --> 00:15:23,279
a company google account during a red

483
00:15:22,000 --> 00:15:24,880
team assessment

484
00:15:23,279 --> 00:15:27,040
other than that i've seen a lot of other

485
00:15:24,880 --> 00:15:28,800
autoresponders most people

486
00:15:27,040 --> 00:15:30,240
would then think of out of office

487
00:15:28,800 --> 00:15:32,800
replies for example

488
00:15:30,240 --> 00:15:33,440
but especially automated services have

489
00:15:32,800 --> 00:15:35,839
been

490
00:15:33,440 --> 00:15:37,759
mailing back a lot of random stuff

491
00:15:35,839 --> 00:15:40,079
usually these systems would look at the

492
00:15:37,759 --> 00:15:41,199
center domains and see if it matches the

493
00:15:40,079 --> 00:15:42,719
company domain

494
00:15:41,199 --> 00:15:44,240
and then if it doesn't they get a

495
00:15:42,720 --> 00:15:46,720
different reply

496
00:15:44,240 --> 00:15:47,480
usually containing less information so

497
00:15:46,720 --> 00:15:50,560
in case

498
00:15:47,480 --> 00:15:52,959
attacker.com emailscompany.com

499
00:15:50,560 --> 00:15:54,560
they may not see the autoresponder

500
00:15:52,959 --> 00:15:57,040
intended for employees

501
00:15:54,560 --> 00:15:58,719
within the same company after fiddling

502
00:15:57,040 --> 00:16:00,639
around with this a little bit i noticed

503
00:15:58,720 --> 00:16:01,120
that some system would look at the from

504
00:16:00,639 --> 00:16:02,800
header

505
00:16:01,120 --> 00:16:04,480
to check whether the sender is in the

506
00:16:02,800 --> 00:16:07,359
company domain and then

507
00:16:04,480 --> 00:16:08,399
send the auto response back to the reply

508
00:16:07,360 --> 00:16:11,839
to header

509
00:16:08,399 --> 00:16:14,160
so if we spoof an email from the company

510
00:16:11,839 --> 00:16:15,680
and then add the attacker email to the

511
00:16:14,160 --> 00:16:18,240
reply to header

512
00:16:15,680 --> 00:16:19,279
misconfigured instances may deliver the

513
00:16:18,240 --> 00:16:21,920
author response

514
00:16:19,279 --> 00:16:23,360
intended for employees to somebody

515
00:16:21,920 --> 00:16:25,279
outside of the domain

516
00:16:23,360 --> 00:16:26,399
here's just a quick example from a big

517
00:16:25,279 --> 00:16:28,959
bounty target

518
00:16:26,399 --> 00:16:31,199
these emails can contain links to forms

519
00:16:28,959 --> 00:16:33,758
spreadsheets or documentation

520
00:16:31,199 --> 00:16:35,439
you know while at it you can also try

521
00:16:33,759 --> 00:16:38,240
some different attacks and

522
00:16:35,440 --> 00:16:39,920
something i always try as blind excesses

523
00:16:38,240 --> 00:16:42,720
blind templating action

524
00:16:39,920 --> 00:16:43,279
and you know i've also had one case

525
00:16:42,720 --> 00:16:46,000
where

526
00:16:43,279 --> 00:16:47,680
you could just mail a php attachment to

527
00:16:46,000 --> 00:16:50,240
some ticketing service

528
00:16:47,680 --> 00:16:52,560
and you know the it would get uploaded

529
00:16:50,240 --> 00:16:53,519
to the same server and the agent would

530
00:16:52,560 --> 00:16:56,239
open it

531
00:16:53,519 --> 00:16:58,399
and it would send me back a response an

532
00:16:56,240 --> 00:17:01,040
xss hunter you know response

533
00:16:58,399 --> 00:17:02,240
with a screenshot of a successfully

534
00:17:01,040 --> 00:17:04,639
executed

535
00:17:02,240 --> 00:17:06,319
php info comment so it's essentially

536
00:17:04,640 --> 00:17:08,079
blind rce

537
00:17:06,319 --> 00:17:10,240
for the last part of this session i

538
00:17:08,079 --> 00:17:12,319
would like to address email bounces

539
00:17:10,240 --> 00:17:13,839
you may wonder how they relate to bug

540
00:17:12,319 --> 00:17:15,839
bounties but i found

541
00:17:13,839 --> 00:17:16,879
at least three cases where it turned out

542
00:17:15,839 --> 00:17:18,958
to be useful

543
00:17:16,880 --> 00:17:21,120
as a first example i would like to

544
00:17:18,959 --> 00:17:21,600
showcase a google drive book i stumbled

545
00:17:21,119 --> 00:17:24,319
upon

546
00:17:21,599 --> 00:17:26,159
a few years ago i'm sure everybody in

547
00:17:24,319 --> 00:17:26,879
here is familiar with this screen that

548
00:17:26,160 --> 00:17:28,640
pops up

549
00:17:26,880 --> 00:17:31,360
whenever you're trying to visit a

550
00:17:28,640 --> 00:17:33,360
document that you don't have access to

551
00:17:31,360 --> 00:17:34,399
so if you would have pressed the request

552
00:17:33,360 --> 00:17:36,559
access button

553
00:17:34,400 --> 00:17:37,440
google would send this email request on

554
00:17:36,559 --> 00:17:40,160
your behalf

555
00:17:37,440 --> 00:17:42,320
to get access to the file and this email

556
00:17:40,160 --> 00:17:44,400
contains the sharing link as well as the

557
00:17:42,320 --> 00:17:46,799
title of the google drive file

558
00:17:44,400 --> 00:17:47,520
in my case the recipient's inbox was

559
00:17:46,799 --> 00:17:50,160
full

560
00:17:47,520 --> 00:17:52,320
since gmail could not deliver the email

561
00:17:50,160 --> 00:17:54,400
including the title and sharing link

562
00:17:52,320 --> 00:17:55,520
it would bounce back to the original

563
00:17:54,400 --> 00:17:58,799
sender which

564
00:17:55,520 --> 00:18:01,280
is me so this is the email i got back

565
00:17:58,799 --> 00:18:03,440
and as you can see it did not only

566
00:18:01,280 --> 00:18:05,918
disclose the title and sharing link

567
00:18:03,440 --> 00:18:06,559
but also the original owner's email

568
00:18:05,919 --> 00:18:08,880
address

569
00:18:06,559 --> 00:18:11,440
was included in the bounce now this was

570
00:18:08,880 --> 00:18:14,240
a coincidence and it only works in

571
00:18:11,440 --> 00:18:16,559
extreme rare scenarios in which case the

572
00:18:14,240 --> 00:18:18,960
recipients in books would be full

573
00:18:16,559 --> 00:18:21,039
so i started to investigate new ways to

574
00:18:18,960 --> 00:18:23,520
deliberately invoke the bonds

575
00:18:21,039 --> 00:18:24,320
regardless of the status of the victim's

576
00:18:23,520 --> 00:18:26,480
inbox

577
00:18:24,320 --> 00:18:28,240
during my research i stumbled upon the

578
00:18:26,480 --> 00:18:30,480
dmarc policy standard

579
00:18:28,240 --> 00:18:31,919
now i won't lecture you today on what

580
00:18:30,480 --> 00:18:35,520
all of these policies do

581
00:18:31,919 --> 00:18:37,840
but in simple terms spf and dkim

582
00:18:35,520 --> 00:18:38,559
set some rules to indicate whether the

583
00:18:37,840 --> 00:18:41,280
email was

584
00:18:38,559 --> 00:18:42,960
authorized and then dmarc actually

585
00:18:41,280 --> 00:18:44,480
decides what to do with it

586
00:18:42,960 --> 00:18:46,480
in our case we wanted to have an

587
00:18:44,480 --> 00:18:47,520
extremely strict configuration where the

588
00:18:46,480 --> 00:18:49,440
dmarc policy

589
00:18:47,520 --> 00:18:51,918
would basically tell the recipients that

590
00:18:49,440 --> 00:18:54,080
they should bounce back the email to us

591
00:18:51,919 --> 00:18:55,520
okay so basically at this point thanks

592
00:18:54,080 --> 00:18:58,320
to dkim

593
00:18:55,520 --> 00:19:00,160
we can ask any email forwarder to bounce

594
00:18:58,320 --> 00:19:02,559
the email straight back to us

595
00:19:00,160 --> 00:19:04,480
but where do we really encounter these

596
00:19:02,559 --> 00:19:07,120
email forwarders and how can we

597
00:19:04,480 --> 00:19:08,799
apply this to a bug bounty situation now

598
00:19:07,120 --> 00:19:10,559
the first situation is not really a

599
00:19:08,799 --> 00:19:12,400
bounty situation but it's definitely a

600
00:19:10,559 --> 00:19:14,720
common one

601
00:19:12,400 --> 00:19:16,080
and you know whenever some target gets

602
00:19:14,720 --> 00:19:19,280
hit by

603
00:19:16,080 --> 00:19:20,240
by ransomware attack the attackers often

604
00:19:19,280 --> 00:19:23,520
leave some

605
00:19:20,240 --> 00:19:24,799
kind of masked email address for support

606
00:19:23,520 --> 00:19:26,639
reasons

607
00:19:24,799 --> 00:19:29,039
and in some cases this will actually

608
00:19:26,640 --> 00:19:30,160
just forward them to their normal inbox

609
00:19:29,039 --> 00:19:32,799
linked to their name

610
00:19:30,160 --> 00:19:34,240
which is a dom idea but you know people

611
00:19:32,799 --> 00:19:36,600
still do it

612
00:19:34,240 --> 00:19:37,760
and in this case for example it was

613
00:19:36,600 --> 00:19:41,280
backupdated.company.com

614
00:19:37,760 --> 00:19:43,679
obviously a reconstruction

615
00:19:41,280 --> 00:19:45,039
but then you know because the this

616
00:19:43,679 --> 00:19:47,679
forwarder would just

617
00:19:45,039 --> 00:19:48,240
forward it to a gmail address whenever

618
00:19:47,679 --> 00:19:51,440
we would

619
00:19:48,240 --> 00:19:52,880
apply the dkim trick we would get a

620
00:19:51,440 --> 00:19:55,440
bounce back with the true

621
00:19:52,880 --> 00:19:58,000
identity that the gmail address of the

622
00:19:55,440 --> 00:20:00,000
actual attacker linked to this attack

623
00:19:58,000 --> 00:20:01,520
of course ransomware operators don't

624
00:20:00,000 --> 00:20:03,440
really issue bug bounties

625
00:20:01,520 --> 00:20:05,679
so i also started to look at some

626
00:20:03,440 --> 00:20:07,120
bugbounty programs that used email for

627
00:20:05,679 --> 00:20:08,720
orders

628
00:20:07,120 --> 00:20:11,120
i didn't really have to look far and

629
00:20:08,720 --> 00:20:14,159
wide because most platforms themselves

630
00:20:11,120 --> 00:20:16,239
use email aliases for their hackers so

631
00:20:14,159 --> 00:20:18,240
basically you can send anyone an email

632
00:20:16,240 --> 00:20:19,679
just by targeting their username and it

633
00:20:18,240 --> 00:20:22,159
will end up in their inbox

634
00:20:19,679 --> 00:20:23,200
they use it to so they can basically

635
00:20:22,159 --> 00:20:24,960
sign up

636
00:20:23,200 --> 00:20:27,120
with their custom domain and be

637
00:20:24,960 --> 00:20:29,840
recognized more easily

638
00:20:27,120 --> 00:20:31,520
of course we also tested the integrity

639
00:20:29,840 --> 00:20:34,559
forwarder and uh

640
00:20:31,520 --> 00:20:36,960
yeah we it turned out we were vulnerable

641
00:20:34,559 --> 00:20:37,760
so what i did was i sent an email to

642
00:20:36,960 --> 00:20:39,440
intdc at

643
00:20:37,760 --> 00:20:40,799
integrity.me which is our email

644
00:20:39,440 --> 00:20:43,360
forwarder

645
00:20:40,799 --> 00:20:45,440
and then you know this bounce showed up

646
00:20:43,360 --> 00:20:46,320
actually disclosing my private gmail

647
00:20:45,440 --> 00:20:48,640
address

648
00:20:46,320 --> 00:20:50,320
so we quickly fixed that and luckily you

649
00:20:48,640 --> 00:20:52,799
know there was no abuse so

650
00:20:50,320 --> 00:20:54,000
i reported this within our own platform

651
00:20:52,799 --> 00:20:56,720
and we fixed it

652
00:20:54,000 --> 00:20:57,360
uh by setting an alternative from header

653
00:20:56,720 --> 00:20:59,360
and

654
00:20:57,360 --> 00:21:01,280
you know this book would have been worth

655
00:20:59,360 --> 00:21:03,039
thousands of euros in book bounty so i'm

656
00:21:01,280 --> 00:21:03,760
still kind of glad that we found it

657
00:21:03,039 --> 00:21:06,240
ourselves

658
00:21:03,760 --> 00:21:08,000
but it was definitely a nice find to

659
00:21:06,240 --> 00:21:10,480
wrap up i would like to finish with a

660
00:21:08,000 --> 00:21:13,280
scenario that attributed to one of my

661
00:21:10,480 --> 00:21:16,159
biggest big bounties in the past year

662
00:21:13,280 --> 00:21:18,320
lots of platforms have this multi-talent

663
00:21:16,159 --> 00:21:20,799
environment which basically means that

664
00:21:18,320 --> 00:21:21,840
while customers get their own isolated

665
00:21:20,799 --> 00:21:24,080
application and

666
00:21:21,840 --> 00:21:25,760
just to slap their branding on the

667
00:21:24,080 --> 00:21:27,678
database and the backend and you know

668
00:21:25,760 --> 00:21:28,640
just the server are still kind of the

669
00:21:27,679 --> 00:21:31,200
same

670
00:21:28,640 --> 00:21:33,520
they're just isolated from each other

671
00:21:31,200 --> 00:21:35,520
but tenants can basically sign in

672
00:21:33,520 --> 00:21:36,799
on the same server they could sign in to

673
00:21:35,520 --> 00:21:38,960
multiple tenants

674
00:21:36,799 --> 00:21:40,240
so as an example let's take two users

675
00:21:38,960 --> 00:21:42,960
alice and john

676
00:21:40,240 --> 00:21:44,159
both have their own isolated tenant on

677
00:21:42,960 --> 00:21:47,200
the same server

678
00:21:44,159 --> 00:21:48,480
um but you know john triggers a password

679
00:21:47,200 --> 00:21:50,720
reset on his tenant

680
00:21:48,480 --> 00:21:52,400
branded you know they they all have the

681
00:21:50,720 --> 00:21:53,200
domain set up and it's linked to their

682
00:21:52,400 --> 00:21:55,360
own domain

683
00:21:53,200 --> 00:21:56,640
so he triggers a password reset for his

684
00:21:55,360 --> 00:21:58,639
own tenant

685
00:21:56,640 --> 00:21:59,840
and of course you know this will end up

686
00:21:58,640 --> 00:22:03,039
with john

687
00:21:59,840 --> 00:22:05,360
john dot io okay now john gives alice

688
00:22:03,039 --> 00:22:07,760
account access to his tenant and then he

689
00:22:05,360 --> 00:22:09,840
triggers a password reset for alice

690
00:22:07,760 --> 00:22:11,600
so it gets sent to her email address

691
00:22:09,840 --> 00:22:14,720
alice alice.com

692
00:22:11,600 --> 00:22:17,280
which contains a password reset link

693
00:22:14,720 --> 00:22:18,240
basically to reset alice's account which

694
00:22:17,280 --> 00:22:21,120
has access

695
00:22:18,240 --> 00:22:22,159
to all these tenants so to both john's

696
00:22:21,120 --> 00:22:25,360
tenant and both

697
00:22:22,159 --> 00:22:28,480
alice's tenant now let's imagine that

698
00:22:25,360 --> 00:22:30,158
john after adding alice he implements a

699
00:22:28,480 --> 00:22:32,320
very strict dkim

700
00:22:30,159 --> 00:22:33,600
basically telling the server okay bounce

701
00:22:32,320 --> 00:22:36,559
these emails back to me

702
00:22:33,600 --> 00:22:38,399
inevitably alice's password reset link

703
00:22:36,559 --> 00:22:40,639
will bounce back to john

704
00:22:38,400 --> 00:22:42,240
now john can reset the password for

705
00:22:40,640 --> 00:22:44,720
alice's account

706
00:22:42,240 --> 00:22:46,640
which has access to not only his but

707
00:22:44,720 --> 00:22:49,200
also her workspace

708
00:22:46,640 --> 00:22:51,760
and once the password is reset john can

709
00:22:49,200 --> 00:22:54,559
access and take over alice's workspace

710
00:22:51,760 --> 00:22:56,720
without any form of user interaction and

711
00:22:54,559 --> 00:22:59,200
with this lost account takeover i'm

712
00:22:56,720 --> 00:23:01,039
wrapping up my talk for today i hope you

713
00:22:59,200 --> 00:23:02,720
liked it and i look forward to receive

714
00:23:01,039 --> 00:23:04,080
your feedback and questions

715
00:23:02,720 --> 00:23:05,600
thank you all for attending my

716
00:23:04,080 --> 00:23:06,480
presentations and thanks to the

717
00:23:05,600 --> 00:23:08,480
organizers

718
00:23:06,480 --> 00:23:23,840
for giving me the opportunity to share

719
00:23:08,480 --> 00:23:23,840
this with you today

720
00:24:32,480 --> 00:24:34,559
you

