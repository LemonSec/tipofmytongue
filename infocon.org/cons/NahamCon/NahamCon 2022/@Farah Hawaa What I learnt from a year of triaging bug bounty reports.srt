1
00:00:01,439 --> 00:00:03,600
hi everyone thank you so much for tuning

2
00:00:03,600 --> 00:00:06,000
in to my talk so as you can see today

3
00:00:06,000 --> 00:00:07,600
i'm going to talk about what i learned

4
00:00:07,600 --> 00:00:09,599
from a year of triaging bug bounty

5
00:00:09,599 --> 00:00:11,840
reports so before i get into it let me

6
00:00:11,840 --> 00:00:14,080
tell you a little bit about myself so i

7
00:00:14,080 --> 00:00:15,839
have been working as a triager for buck

8
00:00:15,839 --> 00:00:17,840
crowd which is a bug bounty platform for

9
00:00:17,840 --> 00:00:19,920
over a year now but i'm also a bug

10
00:00:19,920 --> 00:00:22,320
bounty hunter and a content creator for

11
00:00:22,320 --> 00:00:24,000
the past two years i have been spreading

12
00:00:24,000 --> 00:00:26,080
awareness in the world of infosec all

13
00:00:26,080 --> 00:00:28,480
over social media platforms like youtube

14
00:00:28,480 --> 00:00:31,599
and instagram at university though i was

15
00:00:31,599 --> 00:00:33,520
studying to be a journalist but i

16
00:00:33,520 --> 00:00:35,680
quickly realized that journalism isn't

17
00:00:35,680 --> 00:00:37,200
my passion

18
00:00:37,200 --> 00:00:39,360
i was unsure what it was but i set out

19
00:00:39,360 --> 00:00:41,360
to find it and it was at this point that

20
00:00:41,360 --> 00:00:44,000
i came across information security i

21
00:00:44,000 --> 00:00:45,680
joined the local training institute and

22
00:00:45,680 --> 00:00:48,160
i did a course on ethical hacking the

23
00:00:48,160 --> 00:00:50,079
course covered a lot of the theoretical

24
00:00:50,079 --> 00:00:52,480
aspects of hacking but the concept had

25
00:00:52,480 --> 00:00:55,039
me pretty hooked but even then i knew

26
00:00:55,039 --> 00:00:57,600
that i had a lot of self learning to do

27
00:00:57,600 --> 00:00:59,920
so after finding my first bug in which i

28
00:00:59,920 --> 00:01:03,039
earned a 100 bounty i posted about it on

29
00:01:03,039 --> 00:01:04,879
one of my social media platforms which

30
00:01:04,879 --> 00:01:06,880
was met with a lot of questions from

31
00:01:06,880 --> 00:01:09,200
other beginners this is when i realized

32
00:01:09,200 --> 00:01:11,200
that there was a gap in the market for

33
00:01:11,200 --> 00:01:12,960
content which was aimed at novice

34
00:01:12,960 --> 00:01:15,520
hackers from a fellow beginner point of

35
00:01:15,520 --> 00:01:17,520
view and that's when i created my

36
00:01:17,520 --> 00:01:20,159
youtube channel the exposure that i got

37
00:01:20,159 --> 00:01:22,240
from creating videos and my youtube

38
00:01:22,240 --> 00:01:24,799
channel helped me land my full-time job

39
00:01:24,799 --> 00:01:27,200
at bakarak today where i work as a team

40
00:01:27,200 --> 00:01:30,720
lead for security operations in india

41
00:01:30,720 --> 00:01:32,640
now let me tell you about why i chose

42
00:01:32,640 --> 00:01:33,840
this topic

43
00:01:33,840 --> 00:01:36,079
so triage is often seen as a very

44
00:01:36,079 --> 00:01:38,320
mysterious zone you kind of submit

45
00:01:38,320 --> 00:01:40,320
reports and they disappear into the void

46
00:01:40,320 --> 00:01:42,159
until you get a reply or until you get

47
00:01:42,159 --> 00:01:44,399
rewarded so i wanted to share some

48
00:01:44,399 --> 00:01:46,560
insights into the triage process to help

49
00:01:46,560 --> 00:01:48,720
fill that gap if you're active on

50
00:01:48,720 --> 00:01:51,119
twitter or any popular bug bounty forums

51
00:01:51,119 --> 00:01:52,720
you'll know that people have a lot of

52
00:01:52,720 --> 00:01:55,040
questions about triage sometimes it's

53
00:01:55,040 --> 00:01:57,520
about specific platforms sometimes it's

54
00:01:57,520 --> 00:01:59,200
about the customers or the program

55
00:01:59,200 --> 00:02:01,439
owners and others are just general

56
00:02:01,439 --> 00:02:02,479
questions

57
00:02:02,479 --> 00:02:04,159
so i hope to answer some frequently

58
00:02:04,159 --> 00:02:06,079
asked questions through this

59
00:02:06,079 --> 00:02:08,239
and last reason is a little bit selfish

60
00:02:08,239 --> 00:02:10,720
i want to humanize triages because the

61
00:02:10,720 --> 00:02:13,040
triage process can seem very robotic

62
00:02:13,040 --> 00:02:15,360
from the outside and bug bounty hunters

63
00:02:15,360 --> 00:02:17,280
sometimes forget that as an actual

64
00:02:17,280 --> 00:02:19,440
person on the other side of the screen

65
00:02:19,440 --> 00:02:21,280
this is why i decided to talk about my

66
00:02:21,280 --> 00:02:23,200
learnings and my insights from the one

67
00:02:23,200 --> 00:02:25,520
year that i have been on triage and i

68
00:02:25,520 --> 00:02:27,440
hope by the end of this talk you can see

69
00:02:27,440 --> 00:02:29,440
that triagers are humans doing their

70
00:02:29,440 --> 00:02:30,319
jobs

71
00:02:30,319 --> 00:02:31,680
so the first thing that i'm going to do

72
00:02:31,680 --> 00:02:33,840
today is walk you through a triager's

73
00:02:33,840 --> 00:02:34,640
day

74
00:02:34,640 --> 00:02:36,640
so let me tell you about how i start my

75
00:02:36,640 --> 00:02:37,440
day

76
00:02:37,440 --> 00:02:39,519
the first thing that i do is check my

77
00:02:39,519 --> 00:02:42,000
assignments so every day the application

78
00:02:42,000 --> 00:02:44,239
security engineers at buck crowd who are

79
00:02:44,239 --> 00:02:46,879
triagers they get work assigned to them

80
00:02:46,879 --> 00:02:49,360
so currently we have a queue manager who

81
00:02:49,360 --> 00:02:52,720
assigns submissions from the queue to us

82
00:02:52,720 --> 00:02:55,519
and the assignments differ every day at

83
00:02:55,519 --> 00:02:57,920
times we have new submissions we have

84
00:02:57,920 --> 00:03:00,560
close to sla or aging submissions we

85
00:03:00,560 --> 00:03:02,560
have blockers that need to be unblocked

86
00:03:02,560 --> 00:03:04,319
and we have retest and sometimes we have

87
00:03:04,319 --> 00:03:06,080
a mix of all of these

88
00:03:06,080 --> 00:03:08,400
i also go through my email to check if

89
00:03:08,400 --> 00:03:10,560
there are any replies on any submissions

90
00:03:10,560 --> 00:03:13,120
that need to be responded so basically

91
00:03:13,120 --> 00:03:15,360
it's just checking what i have in store

92
00:03:15,360 --> 00:03:17,120
for the day

93
00:03:17,120 --> 00:03:19,200
once i'm done with that i actually start

94
00:03:19,200 --> 00:03:21,519
working on the assignments that i have

95
00:03:21,519 --> 00:03:23,760
and when i open a submission to triage

96
00:03:23,760 --> 00:03:25,760
there are three things that i check for

97
00:03:25,760 --> 00:03:28,000
before i actually go ahead and try to

98
00:03:28,000 --> 00:03:29,599
reproduce the bug

99
00:03:29,599 --> 00:03:32,000
so the first thing is the bug type or

100
00:03:32,000 --> 00:03:34,640
the bug category should be in scope for

101
00:03:34,640 --> 00:03:36,319
this you need to check the brief of the

102
00:03:36,319 --> 00:03:38,640
program so for example if someone

103
00:03:38,640 --> 00:03:41,040
submits a dmarc bug and email spoofing

104
00:03:41,040 --> 00:03:42,959
related bugs are not in scope for the

105
00:03:42,959 --> 00:03:44,400
program and the customer isn't

106
00:03:44,400 --> 00:03:46,560
interested in accepting them i am not

107
00:03:46,560 --> 00:03:48,319
going to try and reproduce the dmacc

108
00:03:48,319 --> 00:03:50,000
submission because it would just be a

109
00:03:50,000 --> 00:03:51,519
waste of time

110
00:03:51,519 --> 00:03:54,640
similarly the asset or the host should

111
00:03:54,640 --> 00:03:57,519
also be in scope now some programs are

112
00:03:57,519 --> 00:03:59,519
super strict about their scope because

113
00:03:59,519 --> 00:04:01,360
they've probably started a bug bounty

114
00:04:01,360 --> 00:04:04,400
program only to harden a specific target

115
00:04:04,400 --> 00:04:06,879
but some programs like vdps are more

116
00:04:06,879 --> 00:04:09,040
forgiving with scope so if a program

117
00:04:09,040 --> 00:04:11,439
brief specifically restricts researchers

118
00:04:11,439 --> 00:04:13,360
from hunting for out of scope bugs or

119
00:04:13,360 --> 00:04:15,599
has specific assets that are listed at

120
00:04:15,599 --> 00:04:17,839
listed as out of scope i'm not going to

121
00:04:17,839 --> 00:04:19,440
try and reproduce a bug that's been

122
00:04:19,440 --> 00:04:22,079
submitted on an autoscope target but you

123
00:04:22,079 --> 00:04:24,400
might ask what if it's a p1 or what if

124
00:04:24,400 --> 00:04:26,160
it's a critical bug that needs to be

125
00:04:26,160 --> 00:04:29,440
fixed asap now there are always some

126
00:04:29,440 --> 00:04:32,320
edge cases but these are rare exceptions

127
00:04:32,320 --> 00:04:34,320
and you need to be very careful with it

128
00:04:34,320 --> 00:04:36,560
because it also has a lot of legalities

129
00:04:36,560 --> 00:04:38,800
involved now at this point i would

130
00:04:38,800 --> 00:04:40,800
suggest you to watch kudingo's video

131
00:04:40,800 --> 00:04:43,520
about scope he is the director of secops

132
00:04:43,520 --> 00:04:45,680
in background and he has a much higher

133
00:04:45,680 --> 00:04:47,600
view of these things so this video is

134
00:04:47,600 --> 00:04:49,600
full of some great insights about why

135
00:04:49,600 --> 00:04:51,600
scopes are restricted why it may be

136
00:04:51,600 --> 00:04:53,199
dangerous to go out of scope and it will

137
00:04:53,199 --> 00:04:55,199
give you an idea about how scope works

138
00:04:55,199 --> 00:04:57,120
from a triage point of view and from a

139
00:04:57,120 --> 00:04:59,199
customer point of view

140
00:04:59,199 --> 00:05:01,840
and the last thing that we check for is

141
00:05:01,840 --> 00:05:03,759
duplicates so at background we have a

142
00:05:03,759 --> 00:05:06,320
process to duplicate bugs for every bug

143
00:05:06,320 --> 00:05:07,919
we are first suggested some similar

144
00:05:07,919 --> 00:05:09,600
submissions but we can also search for

145
00:05:09,600 --> 00:05:11,600
them using criteria like the bug

146
00:05:11,600 --> 00:05:14,320
category we can type in specific words

147
00:05:14,320 --> 00:05:16,639
uh for example for xss submissions we

148
00:05:16,639 --> 00:05:18,960
have the path of the url or we have we

149
00:05:18,960 --> 00:05:20,960
may have a vulnerable parameter so we

150
00:05:20,960 --> 00:05:23,199
can search for duplicates using those

151
00:05:23,199 --> 00:05:24,960
it's also easier to look for duplicates

152
00:05:24,960 --> 00:05:27,039
for bugs like xss open redirects

153
00:05:27,039 --> 00:05:28,560
compared to some others that are little

154
00:05:28,560 --> 00:05:30,400
more vague but we don't need to get into

155
00:05:30,400 --> 00:05:33,120
the technicalities of those right now so

156
00:05:33,120 --> 00:05:35,280
now let's move on to the actual triage

157
00:05:35,280 --> 00:05:38,000
part so by now we have checked our three

158
00:05:38,000 --> 00:05:39,680
things we checked if the bug was in

159
00:05:39,680 --> 00:05:41,520
scope we've checked if the target was in

160
00:05:41,520 --> 00:05:43,759
scope and finally we checked if the bug

161
00:05:43,759 --> 00:05:46,720
has been reported before or if it's new

162
00:05:46,720 --> 00:05:48,800
so now we get to the actual reproduction

163
00:05:48,800 --> 00:05:50,960
and the actual triage part

164
00:05:50,960 --> 00:05:52,560
so if the reproduction steps are well

165
00:05:52,560 --> 00:05:54,560
written by the researcher

166
00:05:54,560 --> 00:05:56,479
the report can be triaged in a matter of

167
00:05:56,479 --> 00:05:57,440
minutes

168
00:05:57,440 --> 00:05:59,600
but some reports can take weeks to

169
00:05:59,600 --> 00:06:01,840
triage if the steps aren't clear or if

170
00:06:01,840 --> 00:06:03,520
there's something missing because that

171
00:06:03,520 --> 00:06:05,520
causes a ton of back and forth between

172
00:06:05,520 --> 00:06:08,639
the triager and the researcher so now i

173
00:06:08,639 --> 00:06:10,400
would like to give some tips on writing

174
00:06:10,400 --> 00:06:12,319
better reproduction steps from a

175
00:06:12,319 --> 00:06:14,800
triager's point of view the biggest

176
00:06:14,800 --> 00:06:16,639
thumb rule to remember is providing

177
00:06:16,639 --> 00:06:19,759
steps from zero to repro and what i mean

178
00:06:19,759 --> 00:06:21,680
by this is that you should essentially

179
00:06:21,680 --> 00:06:23,600
assume that the triager is new to the

180
00:06:23,600 --> 00:06:26,080
application and is not as familiar with

181
00:06:26,080 --> 00:06:28,240
every application as you might be so

182
00:06:28,240 --> 00:06:30,000
triagers especially the ones who work

183
00:06:30,000 --> 00:06:32,319
for bug bounty platforms like myself

184
00:06:32,319 --> 00:06:34,319
they have to constantly switch contexts

185
00:06:34,319 --> 00:06:36,080
between different programs and different

186
00:06:36,080 --> 00:06:38,160
targets so they might not know every

187
00:06:38,160 --> 00:06:40,080
little feature of every app that they

188
00:06:40,080 --> 00:06:42,560
triage and as a researcher i think it's

189
00:06:42,560 --> 00:06:44,400
important to keep this in mind while

190
00:06:44,400 --> 00:06:46,720
writing your report so the first tip

191
00:06:46,720 --> 00:06:48,560
that i would like to give is to write

192
00:06:48,560 --> 00:06:51,120
short and clear steps instead of writing

193
00:06:51,120 --> 00:06:53,599
long paragraphs because that makes it

194
00:06:53,599 --> 00:06:55,360
much more easily readable for the

195
00:06:55,360 --> 00:06:58,319
triager for example if you look at these

196
00:06:58,319 --> 00:07:00,240
two reports you can clearly see that the

197
00:07:00,240 --> 00:07:02,479
left one is very easy to read while the

198
00:07:02,479 --> 00:07:04,400
right one looks much more complicated

199
00:07:04,400 --> 00:07:05,840
even though both reports have

200
00:07:05,840 --> 00:07:08,160
essentially the same information and

201
00:07:08,160 --> 00:07:09,919
trust me triagers are going to be

202
00:07:09,919 --> 00:07:11,680
thankful to you if they can scan these

203
00:07:11,680 --> 00:07:14,160
simple steps and not pass long

204
00:07:14,160 --> 00:07:16,479
paragraphs so prefer writing short and

205
00:07:16,479 --> 00:07:18,319
clear steps instead of long paragraphs

206
00:07:18,319 --> 00:07:20,400
where a lot of actions might be clubbed

207
00:07:20,400 --> 00:07:22,000
into one step

208
00:07:22,000 --> 00:07:24,479
now the next tip is to always add a

209
00:07:24,479 --> 00:07:27,199
proof of concept in your reports if a

210
00:07:27,199 --> 00:07:29,280
bug hunter creates a proof of concept

211
00:07:29,280 --> 00:07:31,280
and mentions it in their report it

212
00:07:31,280 --> 00:07:33,039
allows triagers to reproduce and

213
00:07:33,039 --> 00:07:35,360
validate the bug quicker

214
00:07:35,360 --> 00:07:37,360
most of the times proof of concepts are

215
00:07:37,360 --> 00:07:40,160
pretty simple for example for an xss

216
00:07:40,160 --> 00:07:42,240
submission the proof of concept will

217
00:07:42,240 --> 00:07:44,800
just be a simple link

218
00:07:44,800 --> 00:07:46,720
and once the triager or the customer

219
00:07:46,720 --> 00:07:48,720
clicks on that link they will be able to

220
00:07:48,720 --> 00:07:50,960
see the xss alert file

221
00:07:50,960 --> 00:07:53,440
similarly if you have a csrf submission

222
00:07:53,440 --> 00:07:55,680
then it always helps to attach the html

223
00:07:55,680 --> 00:07:57,599
file or the link where we can see the

224
00:07:57,599 --> 00:07:58,479
bug

225
00:07:58,479 --> 00:08:01,360
for oauth insecure redirect uris once

226
00:08:01,360 --> 00:08:03,759
again a link where the triage or the

227
00:08:03,759 --> 00:08:06,080
customer opens and signs in they will

228
00:08:06,080 --> 00:08:07,520
notice that they're being redirected to

229
00:08:07,520 --> 00:08:09,599
an arbitrary website so these are just

230
00:08:09,599 --> 00:08:12,639
some examples of proof of concepts

231
00:08:12,639 --> 00:08:14,240
the next tip that i would like to give

232
00:08:14,240 --> 00:08:17,280
is about video pocs now video pocs can

233
00:08:17,280 --> 00:08:19,039
either be extremely annoying or

234
00:08:19,039 --> 00:08:21,360
extremely helpful for example the other

235
00:08:21,360 --> 00:08:23,680
day i received a video proof of concept

236
00:08:23,680 --> 00:08:26,240
which was 13 minutes long the researcher

237
00:08:26,240 --> 00:08:28,000
switches between the notepad and the

238
00:08:28,000 --> 00:08:29,759
target application to demonstrate the

239
00:08:29,759 --> 00:08:32,080
bug and in general it was a very lengthy

240
00:08:32,080 --> 00:08:34,719
process video proof of concepts are not

241
00:08:34,719 --> 00:08:36,719
necessary if you can write the steps

242
00:08:36,719 --> 00:08:38,958
well they can also take way longer to

243
00:08:38,958 --> 00:08:41,120
follow because triagers need to pause

244
00:08:41,120 --> 00:08:43,120
repeatedly and follow the steps and it

245
00:08:43,120 --> 00:08:45,040
can be hard to get an overview of the

246
00:08:45,040 --> 00:08:47,519
bug that way but if you do want to send

247
00:08:47,519 --> 00:08:50,240
in a video or if one is requested by you

248
00:08:50,240 --> 00:08:51,760
then i'm going to give you some tips on

249
00:08:51,760 --> 00:08:53,600
how you can make them as efficient as

250
00:08:53,600 --> 00:08:55,839
possible so that triagers can follow

251
00:08:55,839 --> 00:08:58,800
along easily

252
00:08:58,880 --> 00:09:00,720
so the first thing that i would like to

253
00:09:00,720 --> 00:09:02,800
tell you is to avoid writing steps on

254
00:09:02,800 --> 00:09:05,360
notepad everything

255
00:09:05,360 --> 00:09:07,279
any text that's necessary should be in

256
00:09:07,279 --> 00:09:09,279
the original report

257
00:09:09,279 --> 00:09:11,040
you can edit the video to keep it short

258
00:09:11,040 --> 00:09:12,560
so that the triager only sees the

259
00:09:12,560 --> 00:09:14,720
necessary steps you should ensure that

260
00:09:14,720 --> 00:09:17,360
the video quality is high and everything

261
00:09:17,360 --> 00:09:19,680
can be clearly seen on your screen

262
00:09:19,680 --> 00:09:21,760
the video should be private so avoid

263
00:09:21,760 --> 00:09:24,160
putting up unlisted videos on youtube

264
00:09:24,160 --> 00:09:26,240
instead you can upload it on vimeo and

265
00:09:26,240 --> 00:09:28,480
add a password and give that password to

266
00:09:28,480 --> 00:09:31,120
the triager so the video remains private

267
00:09:31,120 --> 00:09:33,040
and if you feel like then you can add

268
00:09:33,040 --> 00:09:34,640
music and make your video more

269
00:09:34,640 --> 00:09:36,720
interesting

270
00:09:36,720 --> 00:09:39,360
some additional things that i always

271
00:09:39,360 --> 00:09:42,480
find myself asking for in reports are

272
00:09:42,480 --> 00:09:45,040
vulnerable http requests or responses so

273
00:09:45,040 --> 00:09:46,959
if you have an http request that needs

274
00:09:46,959 --> 00:09:49,040
to be manipulated then mentioning that

275
00:09:49,040 --> 00:09:51,760
in the report always helps the triager

276
00:09:51,760 --> 00:09:54,000
if there are multiple users involved in

277
00:09:54,000 --> 00:09:56,959
your bug then detailed roles permissions

278
00:09:56,959 --> 00:09:58,800
of the users so that that can be

279
00:09:58,800 --> 00:10:01,760
recreated easily the vulnerable url or

280
00:10:01,760 --> 00:10:03,839
the vulnerable endpoint where your bug

281
00:10:03,839 --> 00:10:04,560
is

282
00:10:04,560 --> 00:10:06,880
and my new details like if the user is

283
00:10:06,880 --> 00:10:09,040
authenticated or if they need to perform

284
00:10:09,040 --> 00:10:10,720
a certain action

285
00:10:10,720 --> 00:10:13,279
that always helps and reduces one step

286
00:10:13,279 --> 00:10:15,200
of back and forth

287
00:10:15,200 --> 00:10:17,440
and and screenshots added in line with

288
00:10:17,440 --> 00:10:19,600
the steps in your report also help

289
00:10:19,600 --> 00:10:21,120
especially when there are multiple

290
00:10:21,120 --> 00:10:23,519
features on a single page

291
00:10:23,519 --> 00:10:24,959
once we've reproduced the bug

292
00:10:24,959 --> 00:10:27,360
successfully we then check if there is

293
00:10:27,360 --> 00:10:30,079
any impact to it which basically means

294
00:10:30,079 --> 00:10:32,399
answering some questions like

295
00:10:32,399 --> 00:10:34,240
how can an attacker exploit this

296
00:10:34,240 --> 00:10:35,519
remotely

297
00:10:35,519 --> 00:10:37,200
what is the starting position of an

298
00:10:37,200 --> 00:10:39,279
attacker in this scenario which means

299
00:10:39,279 --> 00:10:41,120
are they a privileged user are they an

300
00:10:41,120 --> 00:10:43,760
anonymous user how does this bug affect

301
00:10:43,760 --> 00:10:45,600
the application or does it affect the

302
00:10:45,600 --> 00:10:47,839
users of the application and is there

303
00:10:47,839 --> 00:10:50,720
any potential gdpr risk so if there's

304
00:10:50,720 --> 00:10:53,600
any personal information leaked that

305
00:10:53,600 --> 00:10:55,200
would be a gdpr risk for the

306
00:10:55,200 --> 00:10:56,560
organization

307
00:10:56,560 --> 00:10:58,480
who would want to exploit this bug and

308
00:10:58,480 --> 00:11:00,880
why for example it would be very rare

309
00:11:00,880 --> 00:11:02,800
that an admin of an application would

310
00:11:02,800 --> 00:11:04,640
want to take over a lower privileged

311
00:11:04,640 --> 00:11:06,720
user's account since they obviously have

312
00:11:06,720 --> 00:11:09,600
more power than that user in that case

313
00:11:09,600 --> 00:11:11,519
are there any prerequisites for the

314
00:11:11,519 --> 00:11:13,279
application which means does it have to

315
00:11:13,279 --> 00:11:15,600
be a specific version does the exploit

316
00:11:15,600 --> 00:11:17,920
only work on a specific browser does it

317
00:11:17,920 --> 00:11:20,480
require a proxy are there prerequisites

318
00:11:20,480 --> 00:11:22,320
for the attacker like do they need to be

319
00:11:22,320 --> 00:11:24,560
part of the team to exploit this and

320
00:11:24,560 --> 00:11:26,480
what assumptions does the attacker make

321
00:11:26,480 --> 00:11:28,640
about the victim for example does the

322
00:11:28,640 --> 00:11:30,560
attacker expect the victim to just click

323
00:11:30,560 --> 00:11:32,720
on a link and that's it or do they

324
00:11:32,720 --> 00:11:34,480
expect them to click on a link and then

325
00:11:34,480 --> 00:11:36,320
log in with their credentials and then

326
00:11:36,320 --> 00:11:38,079
perform some actions

327
00:11:38,079 --> 00:11:40,000
answering these questions

328
00:11:40,000 --> 00:11:42,160
really helps us analyze the potential

329
00:11:42,160 --> 00:11:44,560
impact this bug holds and to answer

330
00:11:44,560 --> 00:11:46,240
these questions it always helps to

331
00:11:46,240 --> 00:11:48,160
include an attack scenario in your

332
00:11:48,160 --> 00:11:49,200
report

333
00:11:49,200 --> 00:11:52,160
now i would highly recommend you to

334
00:11:52,160 --> 00:11:55,920
not paste information from owasp or cwe

335
00:11:55,920 --> 00:11:57,680
into the impact section just for the

336
00:11:57,680 --> 00:11:59,839
sake of filling it out but actually

337
00:11:59,839 --> 00:12:02,000
mentioning an attack scenario where your

338
00:12:02,000 --> 00:12:03,920
bug could be exploited by a malicious

339
00:12:03,920 --> 00:12:05,200
hacker

340
00:12:05,200 --> 00:12:07,120
also keep in mind that an attack

341
00:12:07,120 --> 00:12:08,880
scenario might not be needed for

342
00:12:08,880 --> 00:12:12,079
obviously valid bugs like an xss or a

343
00:12:12,079 --> 00:12:13,600
sql injection

344
00:12:13,600 --> 00:12:15,920
but writing an attack scenario can help

345
00:12:15,920 --> 00:12:17,440
you think about the bug that you are

346
00:12:17,440 --> 00:12:20,000
reporting and in some cases it might

347
00:12:20,000 --> 00:12:22,320
help you discover that your finding is

348
00:12:22,320 --> 00:12:24,560
actually having more or less impact than

349
00:12:24,560 --> 00:12:26,560
you might have initially thought and

350
00:12:26,560 --> 00:12:27,920
this could be because the attack

351
00:12:27,920 --> 00:12:30,399
probably has so many prerequisites that

352
00:12:30,399 --> 00:12:32,320
even if an attacker manages to fulfill

353
00:12:32,320 --> 00:12:34,720
them your finding will probably not be

354
00:12:34,720 --> 00:12:37,040
very interesting for them for example if

355
00:12:37,040 --> 00:12:39,200
an attacker needs physical access to a

356
00:12:39,200 --> 00:12:42,000
device for the attack to work then they

357
00:12:42,000 --> 00:12:44,079
might have a simpler and more powerful

358
00:12:44,079 --> 00:12:46,480
attack option than the bug that you are

359
00:12:46,480 --> 00:12:47,680
reporting

360
00:12:47,680 --> 00:12:49,760
but even the opposite could happen that

361
00:12:49,760 --> 00:12:51,920
once you actually sit down and think

362
00:12:51,920 --> 00:12:54,320
about how the bug can be exploited you

363
00:12:54,320 --> 00:12:57,040
will realize that it is way more serious

364
00:12:57,040 --> 00:12:58,800
than you thought it was

365
00:12:58,800 --> 00:13:01,200
so writing an attack scenario can help

366
00:13:01,200 --> 00:13:03,360
you discover that your finding might

367
00:13:03,360 --> 00:13:07,320
actually have less impact

368
00:13:07,760 --> 00:13:10,000
so here is an example of how an attack

369
00:13:10,000 --> 00:13:12,399
scenario can be mentioned in your report

370
00:13:12,399 --> 00:13:14,560
for example this is a common report we

371
00:13:14,560 --> 00:13:16,959
receive about session expiration which

372
00:13:16,959 --> 00:13:19,360
mentions that a user can still access

373
00:13:19,360 --> 00:13:21,279
privileged features even after their

374
00:13:21,279 --> 00:13:23,920
permissions have been revoked the attack

375
00:13:23,920 --> 00:13:26,000
scenario here should not exactly be

376
00:13:26,000 --> 00:13:28,480
steps to reproduce the bug but it should

377
00:13:28,480 --> 00:13:30,639
rather be a quick overview of how the

378
00:13:30,639 --> 00:13:33,120
bug can be exploited by an attacker in

379
00:13:33,120 --> 00:13:36,079
real life like in this case the admin

380
00:13:36,079 --> 00:13:37,839
invites their employee into the

381
00:13:37,839 --> 00:13:40,160
workspace after the employee is done

382
00:13:40,160 --> 00:13:42,079
with the project the admin removes them

383
00:13:42,079 --> 00:13:44,639
from the workspace however because the

384
00:13:44,639 --> 00:13:46,720
session or the permissions do not expire

385
00:13:46,720 --> 00:13:48,880
after this action the employee can still

386
00:13:48,880 --> 00:13:50,800
perform actions like adding removing

387
00:13:50,800 --> 00:13:53,760
users changing the project settings etc

388
00:13:53,760 --> 00:13:55,760
so your attack scenario should include

389
00:13:55,760 --> 00:13:58,079
any challenges any barriers that an

390
00:13:58,079 --> 00:13:59,920
attacker would face while exploiting

391
00:13:59,920 --> 00:14:01,760
this in real life

392
00:14:01,760 --> 00:14:03,600
so after reproducing the bug and

393
00:14:03,600 --> 00:14:06,000
analyzing the impact we finally triage

394
00:14:06,000 --> 00:14:08,320
the bug so now let me tell you what goes

395
00:14:08,320 --> 00:14:10,800
into the actual triage process when we

396
00:14:10,800 --> 00:14:13,120
triage something we always leave a note

397
00:14:13,120 --> 00:14:14,720
for the client which gives them some

398
00:14:14,720 --> 00:14:16,639
quick information that they might need

399
00:14:16,639 --> 00:14:18,800
about the bug so here's what we give

400
00:14:18,800 --> 00:14:21,279
them the first thing is a one to two

401
00:14:21,279 --> 00:14:23,120
sentence description of the bug for

402
00:14:23,120 --> 00:14:25,600
example for an exercise bug it would be

403
00:14:25,600 --> 00:14:26,959
something

404
00:14:26,959 --> 00:14:28,800
the first thing is a one to two sentence

405
00:14:28,800 --> 00:14:30,639
description of the bug

406
00:14:30,639 --> 00:14:33,360
we also mentioned the exact bug url or

407
00:14:33,360 --> 00:14:34,880
the bug origin

408
00:14:34,880 --> 00:14:36,560
we let them know that we've checked for

409
00:14:36,560 --> 00:14:38,480
dupes and we've also checked the bounty

410
00:14:38,480 --> 00:14:40,399
brief to make sure that the bug type and

411
00:14:40,399 --> 00:14:42,480
the target was in scope

412
00:14:42,480 --> 00:14:44,480
this chain

413
00:14:44,480 --> 00:14:46,480
this check also serves as a reminder for

414
00:14:46,480 --> 00:14:48,560
triagers in case they miss doing that

415
00:14:48,560 --> 00:14:50,480
before reproduction

416
00:14:50,480 --> 00:14:52,560
we also let them know if this bug leaks

417
00:14:52,560 --> 00:14:54,399
any personal information so if it has

418
00:14:54,399 --> 00:14:57,279
any potential gdpr risk for them and if

419
00:14:57,279 --> 00:14:58,800
there's been a lot of back and forth

420
00:14:58,800 --> 00:15:00,560
with the researcher while reproducing

421
00:15:00,560 --> 00:15:02,480
the bug then we also mention any

422
00:15:02,480 --> 00:15:04,160
additional steps that the client may

423
00:15:04,160 --> 00:15:06,639
need when they try to reproduce

424
00:15:06,639 --> 00:15:08,880
and lastly we end the note with a

425
00:15:08,880 --> 00:15:11,199
screenshot or some kind of output like a

426
00:15:11,199 --> 00:15:13,279
terminal output just to show that the

427
00:15:13,279 --> 00:15:15,920
bug was validated by the triager

428
00:15:15,920 --> 00:15:18,399
so that's about it for how the triage

429
00:15:18,399 --> 00:15:20,720
process works i hope this gave you some

430
00:15:20,720 --> 00:15:22,720
insights into how it works and what a

431
00:15:22,720 --> 00:15:26,639
triager's work day looks like now being

432
00:15:26,639 --> 00:15:28,399
on the triage team has also given me

433
00:15:28,399 --> 00:15:30,720
insights into how hunters approach

434
00:15:30,720 --> 00:15:33,279
applications and what types of bug gets

435
00:15:33,279 --> 00:15:36,160
reported the most versus the least and

436
00:15:36,160 --> 00:15:38,240
in most of the reports you can mainly

437
00:15:38,240 --> 00:15:40,320
see one of these types of approaches

438
00:15:40,320 --> 00:15:42,240
taken by the researcher

439
00:15:42,240 --> 00:15:43,920
there are researchers that deep dive on

440
00:15:43,920 --> 00:15:46,240
a single target on one application and

441
00:15:46,240 --> 00:15:48,240
find bugs like privilege escalation

442
00:15:48,240 --> 00:15:50,320
which are most common in team based

443
00:15:50,320 --> 00:15:52,160
applications there are different users

444
00:15:52,160 --> 00:15:53,839
and different types of roles involved in

445
00:15:53,839 --> 00:15:55,360
the application and there are

446
00:15:55,360 --> 00:15:57,199
restrictions on users based on the rules

447
00:15:57,199 --> 00:15:58,399
assigned to them

448
00:15:58,399 --> 00:16:00,320
business logic bugs can also be found

449
00:16:00,320 --> 00:16:02,160
when you take a deep dive approach in an

450
00:16:02,160 --> 00:16:03,600
application

451
00:16:03,600 --> 00:16:05,040
the other type of approach you can

452
00:16:05,040 --> 00:16:06,959
choose to take is going down the recon

453
00:16:06,959 --> 00:16:09,360
and automation path a lot of bugs

454
00:16:09,360 --> 00:16:11,680
reported like subdomain takeovers can be

455
00:16:11,680 --> 00:16:13,360
automated

456
00:16:13,360 --> 00:16:15,839
cve based approaches can also be taken

457
00:16:15,839 --> 00:16:17,360
through automation

458
00:16:17,360 --> 00:16:18,880
if you're good at scripting you have

459
00:16:18,880 --> 00:16:20,959
some knowledge in languages like python

460
00:16:20,959 --> 00:16:22,800
bash then you can choose to take this

461
00:16:22,800 --> 00:16:24,959
approach to look for bugs

462
00:16:24,959 --> 00:16:26,880
the next thing i would suggest you to do

463
00:16:26,880 --> 00:16:29,040
is to get to know a platform

464
00:16:29,040 --> 00:16:31,279
and what kind of bugs they accept for

465
00:16:31,279 --> 00:16:34,000
example buck route has a vrt which is

466
00:16:34,000 --> 00:16:36,560
the vulnerability rating taxonomy

467
00:16:36,560 --> 00:16:38,560
according to the description it is a

468
00:16:38,560 --> 00:16:40,639
document which outlines backgrounds

469
00:16:40,639 --> 00:16:43,199
baseline priority rating which includes

470
00:16:43,199 --> 00:16:46,480
edge cases for common vulnerabilities

471
00:16:46,480 --> 00:16:48,160
so here you can see the different types

472
00:16:48,160 --> 00:16:50,079
of bugs that are typically reported in

473
00:16:50,079 --> 00:16:52,880
bug bounties for example in the p3

474
00:16:52,880 --> 00:16:55,199
category you can see that bugs accepted

475
00:16:55,199 --> 00:16:56,880
under this category are like basic

476
00:16:56,880 --> 00:16:59,759
subdomain takeovers crlf injections

477
00:16:59,759 --> 00:17:01,680
exist data not being stripped and some

478
00:17:01,680 --> 00:17:04,400
cases of exercise as well and the same

479
00:17:04,400 --> 00:17:07,119
thing for p4 we have some rate limiting

480
00:17:07,119 --> 00:17:10,720
bugs we have some oauth bugs

481
00:17:10,720 --> 00:17:12,640
and of course it goes without saying

482
00:17:12,640 --> 00:17:14,079
that you should always be checking the

483
00:17:14,079 --> 00:17:16,079
out of scopes section for specific

484
00:17:16,079 --> 00:17:17,839
programs before looking for those bugs

485
00:17:17,839 --> 00:17:20,079
on a target but if everything from the

486
00:17:20,079 --> 00:17:22,720
scope side is clear and good to go then

487
00:17:22,720 --> 00:17:24,720
getting to know that background accepts

488
00:17:24,720 --> 00:17:26,880
these bugs you can take the approach of

489
00:17:26,880 --> 00:17:28,960
looking for the same buck type or the

490
00:17:28,960 --> 00:17:30,960
same bug category across different

491
00:17:30,960 --> 00:17:33,440
targets and across different programs so

492
00:17:33,440 --> 00:17:35,280
depending on your style of hunting you

493
00:17:35,280 --> 00:17:37,840
can use the vrt as a reference while

494
00:17:37,840 --> 00:17:39,360
looking for bugs

495
00:17:39,360 --> 00:17:41,360
so that's all the tips that i have from

496
00:17:41,360 --> 00:17:42,960
a triager's point of view if you're

497
00:17:42,960 --> 00:17:44,880
looking to get into bug bounties and

498
00:17:44,880 --> 00:17:46,880
start bug bounties today

499
00:17:46,880 --> 00:17:48,960
i hope this talk helped answer your

500
00:17:48,960 --> 00:17:51,360
questions and gave you insights into the

501
00:17:51,360 --> 00:17:53,440
other side of bug bounty and it will

502
00:17:53,440 --> 00:17:55,120
hopefully also help you when you hunt

503
00:17:55,120 --> 00:17:57,679
and report these bugs in the future

504
00:17:57,679 --> 00:17:59,520
you can stay in touch with me on social

505
00:17:59,520 --> 00:18:02,000
media here are my handles for instagram

506
00:18:02,000 --> 00:18:05,120
and twitter where i'm pretty active and

507
00:18:05,120 --> 00:18:07,120
if you enjoyed this talk then please

508
00:18:07,120 --> 00:18:09,280
also consider subscribing to my youtube

509
00:18:09,280 --> 00:18:10,559
channel

510
00:18:10,559 --> 00:18:14,879
thank you so much for watching bye

