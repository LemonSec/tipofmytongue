1
00:00:00,560 --> 00:00:02,800
all right welcome to homcon i am happy

2
00:00:02,800 --> 00:00:04,640
to kick off the talks today as the

3
00:00:04,640 --> 00:00:07,200
keynote speaker my name is jason haddix

4
00:00:07,200 --> 00:00:09,280
uh i've been doing offense security for

5
00:00:09,280 --> 00:00:11,200
a ton of time and i have a lot of

6
00:00:11,200 --> 00:00:12,960
content today hopefully it's good and

7
00:00:12,960 --> 00:00:17,799
we're gonna launch right into it

8
00:00:18,560 --> 00:00:20,800
all right so today's talk is the bug

9
00:00:20,800 --> 00:00:22,960
hunters methodology application hacking

10
00:00:22,960 --> 00:00:24,320
v1

11
00:00:24,320 --> 00:00:25,199
um

12
00:00:25,199 --> 00:00:26,800
basically i have been doing the bug

13
00:00:26,800 --> 00:00:29,119
hunters methodology talk for quite a

14
00:00:29,119 --> 00:00:32,238
while and it got too big to fit in one

15
00:00:32,238 --> 00:00:33,840
presentation so we have split it off

16
00:00:33,840 --> 00:00:36,079
from recon to application hacking

17
00:00:36,079 --> 00:00:38,640
so my disclaimer to start uh the talks

18
00:00:38,640 --> 00:00:41,760
today my talk specifically is that

19
00:00:41,760 --> 00:00:44,800
many people can teach you know alert xss

20
00:00:44,800 --> 00:00:46,640
right and they can teach you uh

21
00:00:46,640 --> 00:00:48,320
basically how to do

22
00:00:48,320 --> 00:00:51,199
you know ssrf or any of these other you

23
00:00:51,199 --> 00:00:53,920
know bugs but less people teach you

24
00:00:53,920 --> 00:00:56,160
about how to approach applications and

25
00:00:56,160 --> 00:00:58,879
where to find the bugs and give kind of

26
00:00:58,879 --> 00:01:00,960
their tips and tricks for saving time

27
00:01:00,960 --> 00:01:02,320
and so although you know it's called the

28
00:01:02,320 --> 00:01:04,720
bug hunters methodology

29
00:01:04,720 --> 00:01:06,799
this is really a collection of my

30
00:01:06,799 --> 00:01:08,799
favorite tips tools

31
00:01:08,799 --> 00:01:11,200
and tricks and even some

32
00:01:11,200 --> 00:01:14,479
mantra stuff that i uh that i talk about

33
00:01:14,479 --> 00:01:15,840
in this presentation and hopefully it's

34
00:01:15,840 --> 00:01:17,600
useful to you

35
00:01:17,600 --> 00:01:19,920
and you can use it in your day-to-day as

36
00:01:19,920 --> 00:01:21,119
well

37
00:01:21,119 --> 00:01:23,680
so like i said uh i am a hacker

38
00:01:23,680 --> 00:01:26,159
basically almost two-day almost two

39
00:01:26,159 --> 00:01:28,640
decades of offensive security um this is

40
00:01:28,640 --> 00:01:32,479
me and my uh my kids and um happily

41
00:01:32,479 --> 00:01:35,040
married i'm a gamer sometimes i stream

42
00:01:35,040 --> 00:01:37,680
currently playing uh destiny path of

43
00:01:37,680 --> 00:01:41,600
exile and dota and so um yeah this is uh

44
00:01:41,600 --> 00:01:43,680
it's my life it's hacking gaming and and

45
00:01:43,680 --> 00:01:45,840
family basically

46
00:01:45,840 --> 00:01:49,520
and uh let's see here

47
00:01:50,320 --> 00:01:51,280
so

48
00:01:51,280 --> 00:01:52,640
i talked about it before i have this

49
00:01:52,640 --> 00:01:54,079
series of talks called the bug hunters

50
00:01:54,079 --> 00:01:55,680
methodology the last one was version

51
00:01:55,680 --> 00:01:57,840
four and had a lot of recon stuff in it

52
00:01:57,840 --> 00:02:00,079
a little bit of application analysis and

53
00:02:00,079 --> 00:02:02,159
it was already getting two hours and so

54
00:02:02,159 --> 00:02:03,759
uh basically

55
00:02:03,759 --> 00:02:04,560
we

56
00:02:04,560 --> 00:02:05,920
wanted to split it out or i wanted to

57
00:02:05,920 --> 00:02:07,439
split it out so that i could focus

58
00:02:07,439 --> 00:02:10,000
specifically in application analysis in

59
00:02:10,000 --> 00:02:11,520
this version of the talk it's been a

60
00:02:11,520 --> 00:02:14,480
long time coming um because of kovid and

61
00:02:14,480 --> 00:02:16,239
uh you know that really hit my family

62
00:02:16,239 --> 00:02:17,280
pretty hard

63
00:02:17,280 --> 00:02:18,400
twice

64
00:02:18,400 --> 00:02:20,959
and so uh yeah so i had been putting it

65
00:02:20,959 --> 00:02:23,840
off for quite a while

66
00:02:24,080 --> 00:02:27,440
um so here's the agenda for today so um

67
00:02:27,440 --> 00:02:29,040
we're going to do a little bit of like a

68
00:02:29,040 --> 00:02:30,800
getting started section for newer people

69
00:02:30,800 --> 00:02:32,800
this talk is intended for

70
00:02:32,800 --> 00:02:35,599
mostly like new to intermediate hackers

71
00:02:35,599 --> 00:02:37,680
who are getting into offensive security

72
00:02:37,680 --> 00:02:39,120
but also there's some tips and tricks in

73
00:02:39,120 --> 00:02:41,120
there for you know the seasoned veteran

74
00:02:41,120 --> 00:02:42,959
as well um we're going to talk about

75
00:02:42,959 --> 00:02:44,959
mental hurdles to testing we're going to

76
00:02:44,959 --> 00:02:46,560
talk about pre-manual testing and

77
00:02:46,560 --> 00:02:47,840
automation we're going to talk about

78
00:02:47,840 --> 00:02:49,280
content discovery and then we're going

79
00:02:49,280 --> 00:02:50,800
to get into the probably the biggest

80
00:02:50,800 --> 00:02:53,599
section application analysis

81
00:02:53,599 --> 00:02:55,200
so let's get started

82
00:02:55,200 --> 00:02:56,800
so beginning your journey into hacking

83
00:02:56,800 --> 00:02:58,800
right in your journey

84
00:02:58,800 --> 00:03:01,040
so i'll attempt to give you tips and

85
00:03:01,040 --> 00:03:03,360
tricks and tools related to testing but

86
00:03:03,360 --> 00:03:05,599
there are a bunch of holistic texts out

87
00:03:05,599 --> 00:03:07,120
there to supplement you know your

88
00:03:07,120 --> 00:03:09,840
hacking journey and so the uh you know

89
00:03:09,840 --> 00:03:12,080
what they call the bible of uh web

90
00:03:12,080 --> 00:03:13,599
hacking is really the web application

91
00:03:13,599 --> 00:03:15,599
hackers handbook too

92
00:03:15,599 --> 00:03:17,200
everybody who's doing web up assessment

93
00:03:17,200 --> 00:03:19,840
should read that book uh at least twice

94
00:03:19,840 --> 00:03:21,840
uh three times if not i've read it you

95
00:03:21,840 --> 00:03:24,319
know many many times um and then there's

96
00:03:24,319 --> 00:03:25,920
some others that i really like too real

97
00:03:25,920 --> 00:03:28,000
world bug hunting by peter yawarski the

98
00:03:28,000 --> 00:03:30,799
owasp testing guide can give you a great

99
00:03:30,799 --> 00:03:33,920
um you know methodology to follow bug

100
00:03:33,920 --> 00:03:36,239
bounty boot camp by vicky lee is a newer

101
00:03:36,239 --> 00:03:39,280
one and i liked that book as well

102
00:03:39,280 --> 00:03:42,560
the hacker playbook um and then a couple

103
00:03:42,560 --> 00:03:44,080
more breaking in information security

104
00:03:44,080 --> 00:03:46,799
hands-on hacking by matthew hickey and

105
00:03:46,799 --> 00:03:49,920
jennifer r curry and then the other two

106
00:03:49,920 --> 00:03:51,680
are by alex thomas the bug bounty

107
00:03:51,680 --> 00:03:53,360
playbook one and two

108
00:03:53,360 --> 00:03:54,959
which are very similar to this talk but

109
00:03:54,959 --> 00:03:56,400
um text written

110
00:03:56,400 --> 00:03:58,400
resources i like them as well

111
00:03:58,400 --> 00:04:00,400
so if you are a reading type person

112
00:04:00,400 --> 00:04:02,480
these are the resources that i would say

113
00:04:02,480 --> 00:04:05,760
that um you should grab um and sometimes

114
00:04:05,760 --> 00:04:07,599
they go on sale through uh you know

115
00:04:07,599 --> 00:04:10,080
various means um and so yeah you can

116
00:04:10,080 --> 00:04:12,480
grab them

117
00:04:12,480 --> 00:04:14,720
also beginning your journey in hacking

118
00:04:14,720 --> 00:04:17,279
there's a ton of resources out there

119
00:04:17,279 --> 00:04:20,880
today and in 2022 there's just like more

120
00:04:20,880 --> 00:04:22,479
than ever right i remember when i

121
00:04:22,479 --> 00:04:24,080
started doing this there

122
00:04:24,080 --> 00:04:26,080
wasn't any there was hardly any like all

123
00:04:26,080 --> 00:04:27,919
we had was like crack me bank and stuff

124
00:04:27,919 --> 00:04:30,320
like that which um you know it was was

125
00:04:30,320 --> 00:04:32,000
good but uh you know there's nothing

126
00:04:32,000 --> 00:04:33,600
like it today today you have pentester

127
00:04:33,600 --> 00:04:36,400
lab which has graciously sponsored uh

128
00:04:36,400 --> 00:04:38,240
the conference um

129
00:04:38,240 --> 00:04:40,960
and uh inside my presentation there are

130
00:04:40,960 --> 00:04:43,440
hidden three

131
00:04:43,440 --> 00:04:46,400
coupon codes for pentester lab to uh to

132
00:04:46,400 --> 00:04:47,600
get you

133
00:04:47,600 --> 00:04:50,000
free membership uh two for one month and

134
00:04:50,000 --> 00:04:51,600
one for three months so keep an eye on

135
00:04:51,600 --> 00:04:53,919
the slides they're hidden

136
00:04:53,919 --> 00:04:55,360
and stay all the way to the end because

137
00:04:55,360 --> 00:04:56,960
that's where you'll find them

138
00:04:56,960 --> 00:04:59,919
uh so yeah so there's a lot of

139
00:04:59,919 --> 00:05:02,000
there's a lot of

140
00:05:02,000 --> 00:05:03,440
labs today to

141
00:05:03,440 --> 00:05:06,000
basically do application testing right

142
00:05:06,000 --> 00:05:08,080
and so pentester lab is one of my

143
00:05:08,080 --> 00:05:10,160
favorites hack the box is another

144
00:05:10,160 --> 00:05:13,039
favorite and web security academy by um

145
00:05:13,039 --> 00:05:16,560
but portsmouth is also amazing um web

146
00:05:16,560 --> 00:05:18,000
security academy is actually the one i

147
00:05:18,000 --> 00:05:20,800
recommend to most people to like kind of

148
00:05:20,800 --> 00:05:22,800
um start with like burp and stuff

149
00:05:22,800 --> 00:05:25,520
pentester lab has is like such a diverse

150
00:05:25,520 --> 00:05:28,960
set of challenges as well um and then

151
00:05:28,960 --> 00:05:30,400
there's also some other resources that

152
00:05:30,400 --> 00:05:31,680
you can look to

153
00:05:31,680 --> 00:05:32,479
uh

154
00:05:32,479 --> 00:05:34,960
in there they're cheap or free

155
00:05:34,960 --> 00:05:37,440
vol habha has over 400 crack me's i

156
00:05:37,440 --> 00:05:38,720
think this number has grown i put this

157
00:05:38,720 --> 00:05:40,720
number on the slide a long time ago

158
00:05:40,720 --> 00:05:43,039
so it's probably more than 400 but 400

159
00:05:43,039 --> 00:05:45,840
crack me applications um to practice on

160
00:05:45,840 --> 00:05:47,919
as well as there's a project for oas

161
00:05:47,919 --> 00:05:49,520
company called the owats vulnerable web

162
00:05:49,520 --> 00:05:51,280
applications directory and basically

163
00:05:51,280 --> 00:05:53,039
anybody anybody who puts anything on

164
00:05:53,039 --> 00:05:54,320
github

165
00:05:54,320 --> 00:05:56,000
that's a vulnerable application for

166
00:05:56,000 --> 00:05:57,840
people to test application security

167
00:05:57,840 --> 00:05:59,520
skills on they try to put it in this

168
00:05:59,520 --> 00:06:02,319
directory on owasp it has over 180

169
00:06:02,319 --> 00:06:04,160
applications to practice on one thing

170
00:06:04,160 --> 00:06:05,680
here that i really like about the bottom

171
00:06:05,680 --> 00:06:06,400
two

172
00:06:06,400 --> 00:06:10,479
is they're absolutely free um and also

173
00:06:10,479 --> 00:06:12,720
uh they require you also to set them up

174
00:06:12,720 --> 00:06:15,199
which i think is kind of a core pre what

175
00:06:15,199 --> 00:06:16,720
prerequisite that a lot of people skip

176
00:06:16,720 --> 00:06:18,400
over nowadays right and so

177
00:06:18,400 --> 00:06:20,000
these are applications that you have to

178
00:06:20,000 --> 00:06:21,440
install the web server and install the

179
00:06:21,440 --> 00:06:22,880
application make sure it's configured

180
00:06:22,880 --> 00:06:24,639
right sometimes it's an iso so you have

181
00:06:24,639 --> 00:06:26,960
to deal with um you know standing a vm

182
00:06:26,960 --> 00:06:28,560
up or something like that there's

183
00:06:28,560 --> 00:06:30,720
components of networking and setting

184
00:06:30,720 --> 00:06:32,319
them up or even sometimes hacking them

185
00:06:32,319 --> 00:06:33,440
and so

186
00:06:33,440 --> 00:06:35,199
i think that those are really cool to

187
00:06:35,199 --> 00:06:36,639
kind of cut your teeth on when you're

188
00:06:36,639 --> 00:06:38,240
learning too is understanding how to set

189
00:06:38,240 --> 00:06:40,240
up the servers and everything like that

190
00:06:40,240 --> 00:06:42,880
so a bunch of great resources for

191
00:06:42,880 --> 00:06:45,280
anybody getting started in application

192
00:06:45,280 --> 00:06:47,120
security

193
00:06:47,120 --> 00:06:49,759
so also beginning your journey um

194
00:06:49,759 --> 00:06:52,080
there's uh there's like a lot of content

195
00:06:52,080 --> 00:06:53,280
creators now there weren't a lot of

196
00:06:53,280 --> 00:06:55,440
these back when i was coming up and so

197
00:06:55,440 --> 00:06:57,360
these are some of the content creators i

198
00:06:57,360 --> 00:06:59,120
really respect and like

199
00:06:59,120 --> 00:07:02,080
um there's daniel measler stoke who is

200
00:07:02,080 --> 00:07:04,080
today's emcee

201
00:07:04,080 --> 00:07:05,840
you know you've got a lot of people on

202
00:07:05,840 --> 00:07:08,880
here uh you know who are amazing and

203
00:07:08,880 --> 00:07:10,560
willing to share their knowledge and who

204
00:07:10,560 --> 00:07:12,160
are consistently giving back to the

205
00:07:12,160 --> 00:07:14,160
community uh you can follow them on

206
00:07:14,160 --> 00:07:15,919
twitter those are their twitter handles

207
00:07:15,919 --> 00:07:17,440
below and that seems to be kind of the

208
00:07:17,440 --> 00:07:19,440
place right now where the community

209
00:07:19,440 --> 00:07:21,919
lives and posts a lot of details or

210
00:07:21,919 --> 00:07:23,440
everything like that

211
00:07:23,440 --> 00:07:24,800
if you want to conglomerate these all

212
00:07:24,800 --> 00:07:26,400
into a list there's a couple of twitter

213
00:07:26,400 --> 00:07:29,840
lists down there the bug bounty one

214
00:07:29,840 --> 00:07:31,840
run by b and another one called

215
00:07:31,840 --> 00:07:33,680
insecurity the links are down there in

216
00:07:33,680 --> 00:07:36,319
the corner and uh you can grab those and

217
00:07:36,319 --> 00:07:37,919
they have a collection of you know other

218
00:07:37,919 --> 00:07:39,919
hackers you know up to 302 different

219
00:07:39,919 --> 00:07:41,199
people that maybe you should follow if

220
00:07:41,199 --> 00:07:43,199
you're just getting into this um it's a

221
00:07:43,199 --> 00:07:46,160
a good feed so but keep your twitter uh

222
00:07:46,160 --> 00:07:48,319
you know like uh clean of uh negativity

223
00:07:48,319 --> 00:07:50,720
right it is a social network so

224
00:07:50,720 --> 00:07:52,080
okay so we're gonna go into the first

225
00:07:52,080 --> 00:07:54,319
part of the talk and i'm going fast

226
00:07:54,319 --> 00:07:56,080
because i got a lot of content um

227
00:07:56,080 --> 00:07:57,759
hopefully we'll get through it all so

228
00:07:57,759 --> 00:07:58,560
the first thing we're going to talk

229
00:07:58,560 --> 00:08:00,639
about is mental hurdles and testing and

230
00:08:00,639 --> 00:08:02,879
these are things that can get in the way

231
00:08:02,879 --> 00:08:04,160
of you

232
00:08:04,160 --> 00:08:05,759
hacking your target or stop you dead in

233
00:08:05,759 --> 00:08:07,199
your tracks

234
00:08:07,199 --> 00:08:09,280
so the first one i want to talk about is

235
00:08:09,280 --> 00:08:10,720
client reputation and so you can see

236
00:08:10,720 --> 00:08:12,879
here i put a picture of tesla here who

237
00:08:12,879 --> 00:08:14,560
is going to be used in a lot of the

238
00:08:14,560 --> 00:08:17,280
examples um today anyway but

239
00:08:17,280 --> 00:08:18,080
um

240
00:08:18,080 --> 00:08:19,919
the thing is about tesla you know maybe

241
00:08:19,919 --> 00:08:21,120
this will be a little bit personal is

242
00:08:21,120 --> 00:08:23,520
that i know people who work at tesla and

243
00:08:23,520 --> 00:08:26,560
they are epic security people

244
00:08:26,560 --> 00:08:27,599
and so

245
00:08:27,599 --> 00:08:29,919
um when i look at tesla and i'm like oh

246
00:08:29,919 --> 00:08:31,919
should i do this bug bounty or should i

247
00:08:31,919 --> 00:08:32,958
take this

248
00:08:32,958 --> 00:08:34,719
test you know as a pen tester or

249
00:08:34,719 --> 00:08:35,919
something like that and this could you

250
00:08:35,919 --> 00:08:37,200
know it could be for any site not just

251
00:08:37,200 --> 00:08:38,159
tesla

252
00:08:38,159 --> 00:08:40,719
um but you could have this idea of um

253
00:08:40,719 --> 00:08:42,159
the reputation

254
00:08:42,159 --> 00:08:45,040
of this company um and the people that

255
00:08:45,040 --> 00:08:47,519
work there uh and the money that the

256
00:08:47,519 --> 00:08:50,000
company makes and just think wow like i

257
00:08:50,000 --> 00:08:53,200
am not really uh you know up to hacking

258
00:08:53,200 --> 00:08:54,880
something like that right like i think

259
00:08:54,880 --> 00:08:57,519
of uh my friend who works there he's uh

260
00:08:57,519 --> 00:09:00,880
twice the hacker i am uh super smart and

261
00:09:00,880 --> 00:09:03,360
um yeah and so you know like the first

262
00:09:03,360 --> 00:09:04,560
thing that goes through my mind is i'm

263
00:09:04,560 --> 00:09:06,240
not gonna find anything there's nothing

264
00:09:06,240 --> 00:09:09,200
that they haven't you know already found

265
00:09:09,200 --> 00:09:11,600
um you know that i'll find and that's

266
00:09:11,600 --> 00:09:13,839
that's actually a fallacy right so as

267
00:09:13,839 --> 00:09:16,160
you um i don't know fallacy is the right

268
00:09:16,160 --> 00:09:18,080
word but i'm going to call it a fallacy

269
00:09:18,080 --> 00:09:21,040
as you grow in size and complexity as

270
00:09:21,040 --> 00:09:24,160
tesla has in their kind of web footprint

271
00:09:24,160 --> 00:09:25,680
the more complexity you have the more

272
00:09:25,680 --> 00:09:27,519
opportunity for bugs that they'll have

273
00:09:27,519 --> 00:09:28,800
and you'll find this is a repeated

274
00:09:28,800 --> 00:09:30,000
pattern i'm going to say over all of

275
00:09:30,000 --> 00:09:32,480
these hurdles is complexity equals more

276
00:09:32,480 --> 00:09:35,279
bugs and that's always the case and you

277
00:09:35,279 --> 00:09:37,040
will be proven wrong every time that

278
00:09:37,040 --> 00:09:38,880
there are simple bugs still on some of

279
00:09:38,880 --> 00:09:40,720
these sites and you'll see some of them

280
00:09:40,720 --> 00:09:43,360
in the presentation um to prove that not

281
00:09:43,360 --> 00:09:45,279
only you know do you have an opportunity

282
00:09:45,279 --> 00:09:46,880
to hack this but you know other people

283
00:09:46,880 --> 00:09:49,200
have hacked it as well and um and you

284
00:09:49,200 --> 00:09:51,120
can do it you can um you can get past

285
00:09:51,120 --> 00:09:53,440
this first hurdle of kind of reputation

286
00:09:53,440 --> 00:09:56,080
of the company

287
00:09:56,080 --> 00:09:58,560
the second hurdle you can run into as a

288
00:09:58,560 --> 00:10:00,320
you know an offensive security person an

289
00:10:00,320 --> 00:10:02,640
assessment person a bug bounty hunter

290
00:10:02,640 --> 00:10:04,959
is uh as if there's been a lot of

291
00:10:04,959 --> 00:10:07,600
pre-testing done and this exists both in

292
00:10:07,600 --> 00:10:09,200
bug bounty and not in bug bounty right

293
00:10:09,200 --> 00:10:12,000
you have uh github here who you know has

294
00:10:12,000 --> 00:10:14,480
a really great bug bounty not only do

295
00:10:14,480 --> 00:10:16,720
they run it through a platform but they

296
00:10:16,720 --> 00:10:18,000
also have their like their own page

297
00:10:18,000 --> 00:10:19,839
where they give out their own badges and

298
00:10:19,839 --> 00:10:22,399
rewards and um they give out money for

299
00:10:22,399 --> 00:10:24,160
critical rewards you can see some really

300
00:10:24,160 --> 00:10:26,399
great hackers have scored bugs

301
00:10:26,399 --> 00:10:28,640
on their bounty and so you can get into

302
00:10:28,640 --> 00:10:30,959
this mindset of hey

303
00:10:30,959 --> 00:10:33,040
uh it's already been picked over there's

304
00:10:33,040 --> 00:10:35,200
no way that i'm gonna find a bug

305
00:10:35,200 --> 00:10:37,760
on github right and this is also a

306
00:10:37,760 --> 00:10:41,360
fallacy again complexity and size um

307
00:10:41,360 --> 00:10:42,880
mean that bugs are getting introduced

308
00:10:42,880 --> 00:10:44,480
all the time and there's plenty of stuff

309
00:10:44,480 --> 00:10:46,560
still out there any website you visit

310
00:10:46,560 --> 00:10:49,680
nowadays has bugs associated to it so

311
00:10:49,680 --> 00:10:52,320
don't worry about um you know about

312
00:10:52,320 --> 00:10:54,079
anybody who's stepped you know on that

313
00:10:54,079 --> 00:10:56,079
path before just go and tread your own

314
00:10:56,079 --> 00:10:58,640
path i promise it'll be valuable to you

315
00:10:58,640 --> 00:10:59,920
and if you don't find anything you'll

316
00:10:59,920 --> 00:11:02,160
definitely learn something um and you

317
00:11:02,160 --> 00:11:03,440
know that's kind of the the joy of

318
00:11:03,440 --> 00:11:04,399
hacking

319
00:11:04,399 --> 00:11:06,079
but there are bugs there there are bugs

320
00:11:06,079 --> 00:11:09,199
in every application

321
00:11:09,760 --> 00:11:11,519
the third one is size and so you can

322
00:11:11,519 --> 00:11:14,000
look at a you know this is salesforce

323
00:11:14,000 --> 00:11:15,680
cloud i think and so you can look at an

324
00:11:15,680 --> 00:11:17,519
application like this

325
00:11:17,519 --> 00:11:19,440
and automatically you can see that

326
00:11:19,440 --> 00:11:21,440
there's so many sections of the

327
00:11:21,440 --> 00:11:24,160
application there's so many form fields

328
00:11:24,160 --> 00:11:26,240
and then you can look in the back uh you

329
00:11:26,240 --> 00:11:27,600
know on the back end well not really in

330
00:11:27,600 --> 00:11:28,720
the back end but you can look in your

331
00:11:28,720 --> 00:11:29,920
interception proxy when you're

332
00:11:29,920 --> 00:11:31,920
processing a site like this through burp

333
00:11:31,920 --> 00:11:34,000
and see hundreds or thousands of

334
00:11:34,000 --> 00:11:35,839
parameters i've seen medical apps with

335
00:11:35,839 --> 00:11:37,600
thousands of parameters

336
00:11:37,600 --> 00:11:38,399
and

337
00:11:38,399 --> 00:11:40,240
at this point you start thinking holy

338
00:11:40,240 --> 00:11:41,920
crap i don't i don't know if i can do

339
00:11:41,920 --> 00:11:45,040
this this uh there's so much to do

340
00:11:45,040 --> 00:11:46,560
it's overwhelming

341
00:11:46,560 --> 00:11:49,120
i don't want to do it um

342
00:11:49,120 --> 00:11:50,240
and you're really doing yourself a

343
00:11:50,240 --> 00:11:52,160
disservice right because like i said

344
00:11:52,160 --> 00:11:54,880
size equals complexity complexity equals

345
00:11:54,880 --> 00:11:57,360
bugs um and there's been plenty of bugs

346
00:11:57,360 --> 00:12:00,720
on salesforce a lot uh and and honestly

347
00:12:00,720 --> 00:12:02,639
when you get to applications like this

348
00:12:02,639 --> 00:12:04,880
you know some of these functions like at

349
00:12:04,880 --> 00:12:06,800
the top you know menu bar opportunities

350
00:12:06,800 --> 00:12:09,200
or leads or tasks or files or whatever

351
00:12:09,200 --> 00:12:10,560
they will

352
00:12:10,560 --> 00:12:12,560
have different functionality and have

353
00:12:12,560 --> 00:12:14,720
custom code applied to them but a lot of

354
00:12:14,720 --> 00:12:16,959
the way that the application is handling

355
00:12:16,959 --> 00:12:18,320
inputs

356
00:12:18,320 --> 00:12:20,320
is the same across

357
00:12:20,320 --> 00:12:22,399
a whole site like this it's duplicated

358
00:12:22,399 --> 00:12:25,920
it's templatized et cetera and so um you

359
00:12:25,920 --> 00:12:28,000
know it's less daunting than you think

360
00:12:28,000 --> 00:12:29,760
if you focus on the right places so

361
00:12:29,760 --> 00:12:33,600
don't let size get you down

362
00:12:33,600 --> 00:12:36,079
the last one is um is a less common one

363
00:12:36,079 --> 00:12:38,480
but still exists is is basically people

364
00:12:38,480 --> 00:12:41,680
can look at a piece of paid software or

365
00:12:41,680 --> 00:12:43,680
a piece of open source software most

366
00:12:43,680 --> 00:12:46,000
commonly open source actually and

367
00:12:46,000 --> 00:12:47,600
they'll look at it and they'll be like

368
00:12:47,600 --> 00:12:49,600
oh it's open source everybody's already

369
00:12:49,600 --> 00:12:52,320
looked at this it's kind of related to

370
00:12:52,320 --> 00:12:53,839
one of the earlier ones

371
00:12:53,839 --> 00:12:56,000
but they'll look at this and be be like

372
00:12:56,000 --> 00:12:57,519
no there's no way i'm going to find a

373
00:12:57,519 --> 00:13:00,000
bug on an installed application that's

374
00:13:00,000 --> 00:13:01,760
open source that everybody has already

375
00:13:01,760 --> 00:13:03,760
looked at and that is absolutely false

376
00:13:03,760 --> 00:13:05,279
it's been proven time and again that

377
00:13:05,279 --> 00:13:06,720
sometimes these open source projects

378
00:13:06,720 --> 00:13:08,079
have more bugs

379
00:13:08,079 --> 00:13:10,480
than uh closer software so

380
00:13:10,480 --> 00:13:12,320
this is also another one of the

381
00:13:12,320 --> 00:13:14,240
fallacies

382
00:13:14,240 --> 00:13:16,480
so let's say you get through those four

383
00:13:16,480 --> 00:13:18,240
and you get through those four

384
00:13:18,240 --> 00:13:20,720
and uh and you decide to start hacking a

385
00:13:20,720 --> 00:13:22,800
site and this is one that i see happens

386
00:13:22,800 --> 00:13:24,560
a lot with new hunters

387
00:13:24,560 --> 00:13:26,639
and it's only touching the surface level

388
00:13:26,639 --> 00:13:28,240
of the site so there might be some

389
00:13:28,240 --> 00:13:30,160
functionality to the site that is

390
00:13:30,160 --> 00:13:31,680
unauthenticated right like the search

391
00:13:31,680 --> 00:13:33,680
function or a blog there might even be

392
00:13:33,680 --> 00:13:35,760
some application functionality that

393
00:13:35,760 --> 00:13:37,920
doesn't require authentication and

394
00:13:37,920 --> 00:13:39,760
testers will get past the first four

395
00:13:39,760 --> 00:13:41,440
hurdles or any one of the first hurdles

396
00:13:41,440 --> 00:13:43,120
and get to this point

397
00:13:43,120 --> 00:13:46,000
and start touching the application

398
00:13:46,000 --> 00:13:47,519
and get discouraged by not finding

399
00:13:47,519 --> 00:13:49,600
anything right away and this is the

400
00:13:49,600 --> 00:13:51,040
discussion that a lot of bug hunters

401
00:13:51,040 --> 00:13:53,199
have is like you gotta go in depth right

402
00:13:53,199 --> 00:13:55,199
and so the first you know the the i

403
00:13:55,199 --> 00:13:58,079
guess this is the fifth hurdle is uh is

404
00:13:58,079 --> 00:13:59,519
you gotta authenticate

405
00:13:59,519 --> 00:14:01,440
um you gotta you know

406
00:14:01,440 --> 00:14:03,600
build or you gotta um basically

407
00:14:03,600 --> 00:14:05,839
requisition an account and then all of

408
00:14:05,839 --> 00:14:08,639
the juicy stuff is on the other side of

409
00:14:08,639 --> 00:14:10,240
you know getting an account for the site

410
00:14:10,240 --> 00:14:12,720
right the my profile section any

411
00:14:12,720 --> 00:14:14,800
integrations paid account functions

412
00:14:14,800 --> 00:14:17,120
multiple user levels customer data

413
00:14:17,120 --> 00:14:19,279
persistent user input that could become

414
00:14:19,279 --> 00:14:20,800
cross-site scripting

415
00:14:20,800 --> 00:14:23,360
upload functions undocumented api calls

416
00:14:23,360 --> 00:14:25,839
and admin tools this is all paths the

417
00:14:25,839 --> 00:14:27,680
authentication part

418
00:14:27,680 --> 00:14:30,399
of the application and so this is the

419
00:14:30,399 --> 00:14:33,120
last hurdle that you'll need to you need

420
00:14:33,120 --> 00:14:35,279
to jump through in order to you know

421
00:14:35,279 --> 00:14:38,800
really get into in-depth testing

422
00:14:38,800 --> 00:14:40,959
so those are the mental hurdles

423
00:14:40,959 --> 00:14:42,639
so now we're going to talk about

424
00:14:42,639 --> 00:14:45,680
pre-manual testing and automation

425
00:14:45,680 --> 00:14:48,399
so uh the three sections here that i

426
00:14:48,399 --> 00:14:49,680
have it broken down to are tech

427
00:14:49,680 --> 00:14:51,760
profiling finding cves and

428
00:14:51,760 --> 00:14:53,279
misconfigurations

429
00:14:53,279 --> 00:14:55,360
and port scanning

430
00:14:55,360 --> 00:14:57,120
so when i look at an app at an

431
00:14:57,120 --> 00:14:59,440
application i actually try to break it

432
00:14:59,440 --> 00:15:00,639
down into

433
00:15:00,639 --> 00:15:03,120
several sections and this is how i look

434
00:15:03,120 --> 00:15:05,680
at an application as far as how i have

435
00:15:05,680 --> 00:15:08,399
to test it so there are you know six

436
00:15:08,399 --> 00:15:10,079
layers here first the first layer is

437
00:15:10,079 --> 00:15:12,160
like open ports and services on this

438
00:15:12,160 --> 00:15:14,240
server right and in this case there

439
00:15:14,240 --> 00:15:15,600
could be

440
00:15:15,600 --> 00:15:17,199
you know uh remote authentication

441
00:15:17,199 --> 00:15:20,800
services like ssh or ftp or rdp or

442
00:15:20,800 --> 00:15:23,279
something like that and normally i would

443
00:15:23,279 --> 00:15:24,880
consider these in scope for most tests

444
00:15:24,880 --> 00:15:26,480
right and so

445
00:15:26,480 --> 00:15:27,600
you want to make sure that there's no

446
00:15:27,600 --> 00:15:29,360
default credits on those services and

447
00:15:29,360 --> 00:15:31,199
you also have the opportunity for those

448
00:15:31,199 --> 00:15:32,959
services to have exploits themselves

449
00:15:32,959 --> 00:15:34,000
although it's

450
00:15:34,000 --> 00:15:35,519
less likely nowadays that you'll find a

451
00:15:35,519 --> 00:15:37,360
service level exploit

452
00:15:37,360 --> 00:15:39,600
at that level but it could exist at some

453
00:15:39,600 --> 00:15:40,480
point

454
00:15:40,480 --> 00:15:42,079
then you have your web hosting software

455
00:15:42,079 --> 00:15:43,920
right your apaches your nginxes your

456
00:15:43,920 --> 00:15:45,519
your hosting software your web hosting

457
00:15:45,519 --> 00:15:46,800
software and so

458
00:15:46,800 --> 00:15:48,800
this can have a whole set

459
00:15:48,800 --> 00:15:51,199
of places that you look for you can have

460
00:15:51,199 --> 00:15:53,440
default creds you know in you know

461
00:15:53,440 --> 00:15:55,600
things like tomcat or whatever

462
00:15:55,600 --> 00:15:57,600
it can have web server misconfigurations

463
00:15:57,600 --> 00:15:59,920
where configuration files are being

464
00:15:59,920 --> 00:16:02,399
um are being leaked uh and it can have

465
00:16:02,399 --> 00:16:03,839
exploits against the web hosting

466
00:16:03,839 --> 00:16:05,839
software or web server software but

467
00:16:05,839 --> 00:16:07,759
that's also less likely

468
00:16:07,759 --> 00:16:08,959
not a lot of times where you're seeing

469
00:16:08,959 --> 00:16:11,279
web server software exploits i'm at that

470
00:16:11,279 --> 00:16:13,120
level but misconfigurations and default

471
00:16:13,120 --> 00:16:15,680
creds absolutely a thing at that layer

472
00:16:15,680 --> 00:16:17,519
then you have your application framework

473
00:16:17,519 --> 00:16:19,440
which also has the same stuff as above

474
00:16:19,440 --> 00:16:20,959
right you have an application framework

475
00:16:20,959 --> 00:16:23,199
that possibly has a login to administer

476
00:16:23,199 --> 00:16:26,639
something or it has a you know has

477
00:16:26,639 --> 00:16:28,399
a configuration file

478
00:16:28,399 --> 00:16:30,000
that you might have misconfigured wrong

479
00:16:30,000 --> 00:16:32,160
or left world readable and it can also

480
00:16:32,160 --> 00:16:33,920
have bugs associated to the application

481
00:16:33,920 --> 00:16:35,839
framework and then you have your custom

482
00:16:35,839 --> 00:16:38,079
code and your custom code is what your

483
00:16:38,079 --> 00:16:40,399
target has you know built more of their

484
00:16:40,399 --> 00:16:41,440
application or the most of their

485
00:16:41,440 --> 00:16:43,519
application on usually unless they've

486
00:16:43,519 --> 00:16:45,680
paid for cots software which is i call

487
00:16:45,680 --> 00:16:47,360
custom off the shelf software basically

488
00:16:47,360 --> 00:16:49,839
paid software

489
00:16:49,839 --> 00:16:51,920
and and then

490
00:16:51,920 --> 00:16:53,759
that is where a majority of the bugs

491
00:16:53,759 --> 00:16:56,320
live because it's custom code and

492
00:16:56,320 --> 00:16:58,240
that is where your sql injections and

493
00:16:58,240 --> 00:17:00,399
your idors and all that kind of stuff

494
00:17:00,399 --> 00:17:02,160
like custom application vulnerabilities

495
00:17:02,160 --> 00:17:03,440
will lie there

496
00:17:03,440 --> 00:17:05,439
then you have your your baked in

497
00:17:05,439 --> 00:17:07,520
libraries or dependencies usually

498
00:17:07,520 --> 00:17:09,679
javascript they can have associated

499
00:17:09,679 --> 00:17:11,599
vulnerabilities as well most likely web

500
00:17:11,599 --> 00:17:14,000
vulnerabilities um and we'll talk about

501
00:17:14,000 --> 00:17:16,160
that later and then integrate it deeply

502
00:17:16,160 --> 00:17:17,679
into the flow of your application you

503
00:17:17,679 --> 00:17:19,359
could have integrations where your site

504
00:17:19,359 --> 00:17:21,119
is talking to other sites

505
00:17:21,119 --> 00:17:24,000
and there's opportunities to both attack

506
00:17:24,000 --> 00:17:25,839
your site or other sites through the

507
00:17:25,839 --> 00:17:28,319
integrations that your application uh

508
00:17:28,319 --> 00:17:30,320
your application does so this is how i

509
00:17:30,320 --> 00:17:33,120
look at the testing layers for any given

510
00:17:33,120 --> 00:17:34,320
application

511
00:17:34,320 --> 00:17:35,679
and how i break them down in my mind and

512
00:17:35,679 --> 00:17:36,960
i have to test each one of them and

513
00:17:36,960 --> 00:17:38,559
we'll talk about techniques and tools

514
00:17:38,559 --> 00:17:41,200
and tips and tricks to go after you know

515
00:17:41,200 --> 00:17:44,960
most of these places in this talk

516
00:17:44,960 --> 00:17:47,840
so the first thing i need to do when i

517
00:17:47,840 --> 00:17:50,559
attempt to hack a site is i need to know

518
00:17:50,559 --> 00:17:52,799
what technology it's running

519
00:17:52,799 --> 00:17:55,039
and so you can use uh two browser

520
00:17:55,039 --> 00:17:57,200
extensions i like for this are what runs

521
00:17:57,200 --> 00:17:58,720
and wapalizer you can see on the left

522
00:17:58,720 --> 00:18:00,240
hand side i'm looking at tesla and it

523
00:18:00,240 --> 00:18:02,880
tells me right away that drupal is their

524
00:18:02,880 --> 00:18:05,600
cms they're using a cache using caching

525
00:18:05,600 --> 00:18:07,919
of varnish they're on a cd cdn of akamai

526
00:18:07,919 --> 00:18:09,360
et cetera et cetera and their

527
00:18:09,360 --> 00:18:11,039
programming language is php and they're

528
00:18:11,039 --> 00:18:13,360
getting all this information by reading

529
00:18:13,360 --> 00:18:15,200
the source of the

530
00:18:15,200 --> 00:18:17,280
html in several sections looking for

531
00:18:17,280 --> 00:18:18,720
readme files that might have been left

532
00:18:18,720 --> 00:18:20,960
over et cetera et cetera wapolizer on

533
00:18:20,960 --> 00:18:22,640
the right hand side is looking at twitch

534
00:18:22,640 --> 00:18:24,160
gives a little bit less information but

535
00:18:24,160 --> 00:18:26,000
i can see it's nginx

536
00:18:26,000 --> 00:18:27,600
also varnish

537
00:18:27,600 --> 00:18:29,360
it's got some

538
00:18:29,360 --> 00:18:31,440
got some tag managers and webpack and et

539
00:18:31,440 --> 00:18:33,840
cetera so um so these will give you

540
00:18:33,840 --> 00:18:35,919
right away uh at least a decent

541
00:18:35,919 --> 00:18:37,919
knowledge of what technology you're up

542
00:18:37,919 --> 00:18:39,919
against when you're going up against a

543
00:18:39,919 --> 00:18:42,480
single site

544
00:18:42,480 --> 00:18:45,679
so i like to give options for

545
00:18:45,679 --> 00:18:47,520
both

546
00:18:47,520 --> 00:18:48,960
interactive tools like those browser

547
00:18:48,960 --> 00:18:51,600
extensions as well as command line tools

548
00:18:51,600 --> 00:18:53,440
because you know you might want to take

549
00:18:53,440 --> 00:18:55,440
everything in this talk and somehow

550
00:18:55,440 --> 00:18:58,320
automate it into a chain um to do your

551
00:18:58,320 --> 00:19:00,080
testing and so this is a command line

552
00:19:00,080 --> 00:19:01,440
alternative to those it's called web

553
00:19:01,440 --> 00:19:02,720
analyze

554
00:19:02,720 --> 00:19:05,440
and you can give it a host and it will

555
00:19:05,440 --> 00:19:08,000
give you back you know some or if not

556
00:19:08,000 --> 00:19:09,200
all of the information that the other

557
00:19:09,200 --> 00:19:10,880
tool tools give you it'll tell you the

558
00:19:10,880 --> 00:19:12,640
javascript libraries the web server and

559
00:19:12,640 --> 00:19:14,400
the caching information that you want to

560
00:19:14,400 --> 00:19:16,400
know and sometimes even more

561
00:19:16,400 --> 00:19:17,600
so if you want to do it on the command

562
00:19:17,600 --> 00:19:21,600
line web analyzes is what i recommend

563
00:19:21,840 --> 00:19:23,919
all right so you've done your technology

564
00:19:23,919 --> 00:19:26,960
profiling now we want to look for any

565
00:19:26,960 --> 00:19:29,200
cves and misconfigurations and this is a

566
00:19:29,200 --> 00:19:31,280
contentious area of the talk but that's

567
00:19:31,280 --> 00:19:32,640
okay we're going to talk about it a

568
00:19:32,640 --> 00:19:34,480
little bit so

569
00:19:34,480 --> 00:19:35,840
normally if you're like a red teamer or

570
00:19:35,840 --> 00:19:37,200
an offensive security person or

571
00:19:37,200 --> 00:19:39,679
assessment person you need to provide

572
00:19:39,679 --> 00:19:40,880
some coverage that there's no like

573
00:19:40,880 --> 00:19:43,120
existing cves

574
00:19:43,120 --> 00:19:45,600
which are known vulnerabilities in

575
00:19:45,600 --> 00:19:49,679
software that are published to mitre

576
00:19:49,679 --> 00:19:51,600
that exist right and so normally if

577
00:19:51,600 --> 00:19:54,000
you're an enterprise level like

578
00:19:54,000 --> 00:19:55,760
if you're an enterprise like red teamer

579
00:19:55,760 --> 00:19:57,039
or offensive security person you're

580
00:19:57,039 --> 00:19:58,559
doing a pen test or even if you're doing

581
00:19:58,559 --> 00:20:00,480
consulting pen tests you'll use like a

582
00:20:00,480 --> 00:20:02,799
nessus or something like that or um you

583
00:20:02,799 --> 00:20:04,480
know some type of scanner just to

584
00:20:04,480 --> 00:20:06,559
complete you know the coverage part of

585
00:20:06,559 --> 00:20:08,799
your you know your testing

586
00:20:08,799 --> 00:20:10,000
and uh

587
00:20:10,000 --> 00:20:11,200
and so

588
00:20:11,200 --> 00:20:12,880
there are some free you know

589
00:20:12,880 --> 00:20:14,640
alternatives for you to do this and even

590
00:20:14,640 --> 00:20:16,080
in bug hunting you can use these tools

591
00:20:16,080 --> 00:20:17,280
as well and we'll talk about that a

592
00:20:17,280 --> 00:20:18,559
little bit

593
00:20:18,559 --> 00:20:21,280
but having completed recon you want to

594
00:20:21,280 --> 00:20:23,039
look for these cves you also want to

595
00:20:23,039 --> 00:20:25,360
look for things like login pages and

596
00:20:25,360 --> 00:20:28,640
maybe default creds um related to

597
00:20:28,640 --> 00:20:30,880
non-custom code and so these are things

598
00:20:30,880 --> 00:20:32,240
that are associated to the frameworks

599
00:20:32,240 --> 00:20:33,919
and the cms's and the libraries that

600
00:20:33,919 --> 00:20:34,880
exist

601
00:20:34,880 --> 00:20:36,320
on your target

602
00:20:36,320 --> 00:20:37,679
so here you can see

603
00:20:37,679 --> 00:20:39,280
um the first one we're going to talk

604
00:20:39,280 --> 00:20:40,559
about is

605
00:20:40,559 --> 00:20:42,799
nuclei which is uh made by project

606
00:20:42,799 --> 00:20:45,679
discovery um it has

607
00:20:45,679 --> 00:20:49,280
you know 1000 plus cve checks

608
00:20:49,280 --> 00:20:51,280
100 plus informational detections that

609
00:20:51,280 --> 00:20:52,640
give you know information about

610
00:20:52,640 --> 00:20:54,320
different technologies

611
00:20:54,320 --> 00:20:57,280
over 500 admin panel checkers

612
00:20:57,280 --> 00:21:00,480
and uh you know a total of over 3 000

613
00:21:00,480 --> 00:21:02,320
total templates that give you security

614
00:21:02,320 --> 00:21:04,880
information about a site so um you know

615
00:21:04,880 --> 00:21:06,080
this is the same kind of stuff that like

616
00:21:06,080 --> 00:21:08,720
nessus does and uh you know it's it's

617
00:21:08,720 --> 00:21:11,200
really powerful and so um there's a lot

618
00:21:11,200 --> 00:21:13,600
of checks and so nuclei is one of the

619
00:21:13,600 --> 00:21:15,280
you know perennial

620
00:21:15,280 --> 00:21:19,039
uh tools in this in this area right now

621
00:21:19,039 --> 00:21:21,520
now there are other tools to find these

622
00:21:21,520 --> 00:21:23,280
cves and misconfigurations that are

623
00:21:23,280 --> 00:21:26,400
published as uh you know in in the wild

624
00:21:26,400 --> 00:21:28,320
and to find these panels and so another

625
00:21:28,320 --> 00:21:31,360
one i really like is is jails by jesse

626
00:21:31,360 --> 00:21:34,799
jj and um these are old numbers i put

627
00:21:34,799 --> 00:21:36,240
these together when i started doing

628
00:21:36,240 --> 00:21:39,039
these this talk like a year ago so these

629
00:21:39,039 --> 00:21:40,400
are probably outdated there's probably

630
00:21:40,400 --> 00:21:42,159
way more checks at this point in jails

631
00:21:42,159 --> 00:21:43,280
than this

632
00:21:43,280 --> 00:21:45,840
but it's got a ton uh these tools have a

633
00:21:45,840 --> 00:21:48,480
ton of other extensibility as well so

634
00:21:48,480 --> 00:21:50,320
not just checking for control panels but

635
00:21:50,320 --> 00:21:52,559
some of these even actually do

636
00:21:52,559 --> 00:21:54,480
injection testers where they'll do a

637
00:21:54,480 --> 00:21:56,000
little bit of spidering and actually do

638
00:21:56,000 --> 00:21:57,520
some custom injection and stuff like

639
00:21:57,520 --> 00:21:58,880
that

640
00:21:58,880 --> 00:22:00,640
and so really with a combination of

641
00:22:00,640 --> 00:22:03,200
these if you're a red team or offensive

642
00:22:03,200 --> 00:22:04,480
security person that isn't a bounty

643
00:22:04,480 --> 00:22:05,919
hunter you can get this coverage almost

644
00:22:05,919 --> 00:22:09,039
for free now same thing as nessus

645
00:22:09,039 --> 00:22:11,520
with the combination of these tools or

646
00:22:11,520 --> 00:22:13,120
using one of them

647
00:22:13,120 --> 00:22:14,640
you know you have intrigue core here you

648
00:22:14,640 --> 00:22:16,799
have sniper you have go fingerprint and

649
00:22:16,799 --> 00:22:18,960
retire.js looks for

650
00:22:18,960 --> 00:22:20,880
outdated dependencies for javascript

651
00:22:20,880 --> 00:22:22,559
libraries and things like that and so

652
00:22:22,559 --> 00:22:23,919
you can do all this scanning on the

653
00:22:23,919 --> 00:22:25,440
cheap um

654
00:22:25,440 --> 00:22:27,600
the only problem is is that

655
00:22:27,600 --> 00:22:29,280
you know nessus you can do internal

656
00:22:29,280 --> 00:22:31,039
level scanning really easily you can

657
00:22:31,039 --> 00:22:32,400
still use these tools to scan web

658
00:22:32,400 --> 00:22:33,840
servers internally

659
00:22:33,840 --> 00:22:35,600
but also nessus does things like patch

660
00:22:35,600 --> 00:22:37,520
levels at the os level so you don't get

661
00:22:37,520 --> 00:22:38,799
that with these type of things they're

662
00:22:38,799 --> 00:22:41,120
just checking for usually web bugs that

663
00:22:41,120 --> 00:22:43,679
are cve published and so i like jails

664
00:22:43,679 --> 00:22:46,159
here i like nuclei and these other tools

665
00:22:46,159 --> 00:22:47,840
too i've all used them in all different

666
00:22:47,840 --> 00:22:50,640
forms and they're pretty awesome

667
00:22:50,640 --> 00:22:52,080
for you know a variety of different

668
00:22:52,080 --> 00:22:53,679
things

669
00:22:53,679 --> 00:22:56,240
now uh this is a tweet by corbin who's a

670
00:22:56,240 --> 00:22:58,400
friend of mine on the left here and so

671
00:22:58,400 --> 00:23:00,880
he's talking about nuclei

672
00:23:00,880 --> 00:23:03,360
in the vein of

673
00:23:03,360 --> 00:23:05,520
um that it's a competitive disadvantage

674
00:23:05,520 --> 00:23:07,200
and she's saying contrary to what you've

675
00:23:07,200 --> 00:23:09,120
been told you're guaranteed duplicates

676
00:23:09,120 --> 00:23:11,039
and heart duplicates and heartbreak in

677
00:23:11,039 --> 00:23:13,120
the bounty context and you know what

678
00:23:13,120 --> 00:23:16,240
he's right um but in a certain context

679
00:23:16,240 --> 00:23:19,360
so if you're testing like tesla.com

680
00:23:19,360 --> 00:23:21,280
a known target then yeah probably

681
00:23:21,280 --> 00:23:22,799
everybody has hit that with nuclei

682
00:23:22,799 --> 00:23:25,039
there's probably little point to

683
00:23:25,039 --> 00:23:27,440
um to scanning it and you'll probably

684
00:23:27,440 --> 00:23:29,840
just get duplicates and it's not really

685
00:23:29,840 --> 00:23:32,320
worth it right i have found success

686
00:23:32,320 --> 00:23:35,200
using nuclei even in a bounty

687
00:23:35,200 --> 00:23:38,799
context um if i felt like i had done

688
00:23:38,799 --> 00:23:40,720
really good recon and i was testing a

689
00:23:40,720 --> 00:23:42,960
site that not many other testers had

690
00:23:42,960 --> 00:23:45,039
gotten to yet and that's kind of a gut

691
00:23:45,039 --> 00:23:47,679
feeling sometimes you find like a domain

692
00:23:47,679 --> 00:23:49,600
that you don't think that in a wide

693
00:23:49,600 --> 00:23:51,679
scope program that nobody has

694
00:23:51,679 --> 00:23:53,360
touched yet i've done that several times

695
00:23:53,360 --> 00:23:55,440
where i like i find this random domain

696
00:23:55,440 --> 00:23:57,120
in my proxy traffic and i'm like oh this

697
00:23:57,120 --> 00:23:58,640
is my clients i know it is because it

698
00:23:58,640 --> 00:24:00,240
has their trademark or you know

699
00:24:00,240 --> 00:24:02,400
something else it has data of theirs on

700
00:24:02,400 --> 00:24:05,200
it or it has their logo but it's not the

701
00:24:05,200 --> 00:24:06,880
domain that everybody else i think is

702
00:24:06,880 --> 00:24:08,880
looking at right now and so uh i have

703
00:24:08,880 --> 00:24:10,960
found success using nuclei on fresh

704
00:24:10,960 --> 00:24:12,880
targets as well as if you're just an

705
00:24:12,880 --> 00:24:14,400
offensive security

706
00:24:14,400 --> 00:24:16,799
tester um you know these the tool is

707
00:24:16,799 --> 00:24:18,799
great and you know providing coverage

708
00:24:18,799 --> 00:24:21,039
and using it is uh is probably part of a

709
00:24:21,039 --> 00:24:22,880
workflow you should have you know at

710
00:24:22,880 --> 00:24:25,520
some point also uh nuclei is great

711
00:24:25,520 --> 00:24:26,400
because

712
00:24:26,400 --> 00:24:27,679
it makes

713
00:24:27,679 --> 00:24:29,919
building scanner checks

714
00:24:29,919 --> 00:24:32,480
really really easy so the templates for

715
00:24:32,480 --> 00:24:35,039
nuclei are very easy to make and so if

716
00:24:35,039 --> 00:24:37,679
you have a new bug that comes out

717
00:24:37,679 --> 00:24:40,159
tomorrow and there's not a cve yet and

718
00:24:40,159 --> 00:24:44,000
there's not really a great knowledge of

719
00:24:44,000 --> 00:24:45,520
how the bug is executed but you have

720
00:24:45,520 --> 00:24:47,760
that knowledge you can quickly script up

721
00:24:47,760 --> 00:24:49,520
a nuclei template and start scanning

722
00:24:49,520 --> 00:24:51,679
with it uh on your infrastructure or

723
00:24:51,679 --> 00:24:54,000
bounties or or anything like that so um

724
00:24:54,000 --> 00:24:55,679
there are pros and cons to using these

725
00:24:55,679 --> 00:24:58,000
cve finding tools and but i'm really a

726
00:24:58,000 --> 00:24:59,679
big fan of nuclei and i've found success

727
00:24:59,679 --> 00:25:02,080
with it in certain places and so um you

728
00:25:02,080 --> 00:25:05,520
know happy to to promote it

729
00:25:05,760 --> 00:25:08,640
all right so on top of finding cves at

730
00:25:08,640 --> 00:25:10,960
the layer of like the web server or the

731
00:25:10,960 --> 00:25:13,039
layer of the server itself you also want

732
00:25:13,039 --> 00:25:14,960
to do some port scanning

733
00:25:14,960 --> 00:25:17,039
usually you tie your port scanning into

734
00:25:17,039 --> 00:25:18,799
like a larger recon process but today

735
00:25:18,799 --> 00:25:20,880
we're just talking about hacking one

736
00:25:20,880 --> 00:25:22,559
site right and so if you're just going

737
00:25:22,559 --> 00:25:24,159
after one site and you just want to do a

738
00:25:24,159 --> 00:25:26,240
port scan nabu by project discovery as

739
00:25:26,240 --> 00:25:28,799
well is you know the fastest and most

740
00:25:28,799 --> 00:25:30,559
extensible port scanner that's out right

741
00:25:30,559 --> 00:25:31,760
now i think

742
00:25:31,760 --> 00:25:33,760
basically you can give it a host or a

743
00:25:33,760 --> 00:25:34,880
domain

744
00:25:34,880 --> 00:25:36,880
it will resolve it and it will do a port

745
00:25:36,880 --> 00:25:38,480
scan for you and it has a ton of

746
00:25:38,480 --> 00:25:41,039
extensibility you can pipe it then into

747
00:25:41,039 --> 00:25:42,880
nmap for service scanning

748
00:25:42,880 --> 00:25:44,159
um it's got a whole bunch of output

749
00:25:44,159 --> 00:25:46,559
options it can scan ciders anything you

750
00:25:46,559 --> 00:25:48,000
don't scan anything basically and it's

751
00:25:48,000 --> 00:25:49,919
optimized and it's you know pretty good

752
00:25:49,919 --> 00:25:51,200
so if you're just going to do like a

753
00:25:51,200 --> 00:25:55,760
one-shot port scan nabu is the way to go

754
00:25:55,760 --> 00:25:57,600
all right so we've talked about this pre

755
00:25:57,600 --> 00:25:59,440
stuff that we need to do

756
00:25:59,440 --> 00:26:01,120
before getting into

757
00:26:01,120 --> 00:26:02,320
the next phase which is content

758
00:26:02,320 --> 00:26:03,440
discovery

759
00:26:03,440 --> 00:26:05,840
and in content discovery uh there's

760
00:26:05,840 --> 00:26:09,440
several sections so it is one of the

761
00:26:09,440 --> 00:26:11,600
most important parts

762
00:26:11,600 --> 00:26:15,120
of your web hacking um kind of journey

763
00:26:15,120 --> 00:26:16,320
or your

764
00:26:16,320 --> 00:26:17,760
your session and hacking you know this

765
00:26:17,760 --> 00:26:19,200
single site that we're fictitiously

766
00:26:19,200 --> 00:26:22,080
talking about it's uh and there's about

767
00:26:22,080 --> 00:26:23,840
seven different things that i like to

768
00:26:23,840 --> 00:26:25,039
talk about when talking about content

769
00:26:25,039 --> 00:26:26,480
discovery that are tips or tricks or

770
00:26:26,480 --> 00:26:28,320
things that you need to know so

771
00:26:28,320 --> 00:26:31,520
we're gonna dive right into them

772
00:26:31,520 --> 00:26:32,960
so first off we're gonna talk about

773
00:26:32,960 --> 00:26:35,760
content discovery tools and uh you can

774
00:26:35,760 --> 00:26:37,360
see that i have a preference right now

775
00:26:37,360 --> 00:26:39,679
with the fire icons in the lower left

776
00:26:39,679 --> 00:26:41,600
corner and that's okay

777
00:26:41,600 --> 00:26:42,799
but i'm going to talk about a little bit

778
00:26:42,799 --> 00:26:45,600
of these each so um go buster

779
00:26:45,600 --> 00:26:47,200
or dursearch was the first one that

780
00:26:47,200 --> 00:26:48,880
exists it's written in python and it was

781
00:26:48,880 --> 00:26:49,760
the one

782
00:26:49,760 --> 00:26:52,400
we used about five years ago then w fuzz

783
00:26:52,400 --> 00:26:54,960
came along and w then go buster then f

784
00:26:54,960 --> 00:26:55,760
buff

785
00:26:55,760 --> 00:26:57,760
somewhere right before ff i think turbo

786
00:26:57,760 --> 00:26:59,919
intruder came out and then ferro buster

787
00:26:59,919 --> 00:27:03,760
is relatively new um in the scene so uh

788
00:27:03,760 --> 00:27:07,440
go buster um a lot of extensibility a

789
00:27:07,440 --> 00:27:10,320
lot of filters w fuzz is preferred by

790
00:27:10,320 --> 00:27:11,919
people who really want to control the

791
00:27:11,919 --> 00:27:13,679
filters and the response codes looking

792
00:27:13,679 --> 00:27:16,000
for the response codes that come back

793
00:27:16,000 --> 00:27:17,919
from these brute forcing tools dursearch

794
00:27:17,919 --> 00:27:19,600
written in python so very extensible in

795
00:27:19,600 --> 00:27:21,039
python also has a lot of filtering

796
00:27:21,039 --> 00:27:24,640
capabilities ff is really fast um and it

797
00:27:24,640 --> 00:27:26,640
was the bug bounding

798
00:27:26,640 --> 00:27:28,240
content discovery tool of choice for a

799
00:27:28,240 --> 00:27:30,159
long time turbo truder is probably the

800
00:27:30,159 --> 00:27:31,600
fastest out of all of them because it

801
00:27:31,600 --> 00:27:34,240
incorporates uh it incorporates http

802
00:27:34,240 --> 00:27:35,440
pipelining being able to send a whole

803
00:27:35,440 --> 00:27:37,760
bunch of requests you know via one um

804
00:27:37,760 --> 00:27:40,720
http connection um and so turbo intruder

805
00:27:40,720 --> 00:27:43,200
is really fast but is hampered a little

806
00:27:43,200 --> 00:27:45,200
bit by being part of burp and not on the

807
00:27:45,200 --> 00:27:48,799
command line um and also uh you know

808
00:27:48,799 --> 00:27:51,039
feeding lists into turbo intruders not

809
00:27:51,039 --> 00:27:52,240
as intuitive as some of these other

810
00:27:52,240 --> 00:27:55,679
tools um i have put the fire emojis next

811
00:27:55,679 --> 00:27:57,279
to ferro buster right now because it is

812
00:27:57,279 --> 00:27:58,960
my current tool of choice probably

813
00:27:58,960 --> 00:28:02,240
number one because it has um it has a

814
00:28:02,240 --> 00:28:03,360
couple features that i've been looking

815
00:28:03,360 --> 00:28:04,960
for in a content discovery tool for a

816
00:28:04,960 --> 00:28:07,039
long time so what ferro buster has is

817
00:28:07,039 --> 00:28:08,960
the ability to pause

818
00:28:08,960 --> 00:28:11,760
um a content discovery scan

819
00:28:11,760 --> 00:28:13,760
and edit it

820
00:28:13,760 --> 00:28:15,120
while it's paused and so what you'll

821
00:28:15,120 --> 00:28:16,640
have we have happen a lot of times

822
00:28:16,640 --> 00:28:18,000
you'll start your content discovery with

823
00:28:18,000 --> 00:28:19,520
a giant list a generic list something

824
00:28:19,520 --> 00:28:21,440
like that and then

825
00:28:21,440 --> 00:28:24,240
um basically you'll hit a

826
00:28:24,240 --> 00:28:26,799
200 but it's actually a you know a not

827
00:28:26,799 --> 00:28:28,720
found page so it's a it's a not found

828
00:28:28,720 --> 00:28:30,480
page but it's a custom

829
00:28:30,480 --> 00:28:33,520
200 response so the

830
00:28:33,520 --> 00:28:35,919
tool just says yeah this is here this is

831
00:28:35,919 --> 00:28:37,600
here this is here this is here for every

832
00:28:37,600 --> 00:28:38,880
line in your list that you're doing

833
00:28:38,880 --> 00:28:41,679
content discovery for and so if i have

834
00:28:41,679 --> 00:28:42,960
that up on a screen and i'm doing

835
00:28:42,960 --> 00:28:44,960
content discovery in a project i can

836
00:28:44,960 --> 00:28:46,000
pause it

837
00:28:46,000 --> 00:28:48,320
and then add a filter really quick

838
00:28:48,320 --> 00:28:50,080
using ferro buster

839
00:28:50,080 --> 00:28:52,240
and then resume ferro buster it also has

840
00:28:52,240 --> 00:28:55,200
an auto resume if you accidentally

841
00:28:55,200 --> 00:28:57,039
if you accidentally close the scan you

842
00:28:57,039 --> 00:28:59,440
can resume any given scan and so that's

843
00:28:59,440 --> 00:29:00,720
a feature i've been looking for a long

844
00:29:00,720 --> 00:29:02,799
time in a content discovery tool as well

845
00:29:02,799 --> 00:29:04,399
as has all the it has all the

846
00:29:04,399 --> 00:29:06,000
extensibility that these other ones do

847
00:29:06,000 --> 00:29:09,919
control of um filtering of output

848
00:29:09,919 --> 00:29:11,679
as well as you know

849
00:29:11,679 --> 00:29:13,279
you know what you want to send input

850
00:29:13,279 --> 00:29:15,279
cookies headers et cetera et cetera and

851
00:29:15,279 --> 00:29:17,440
then also

852
00:29:17,440 --> 00:29:19,279
it has a feature to

853
00:29:19,279 --> 00:29:21,520
auto-tune which basically will find

854
00:29:21,520 --> 00:29:23,600
those edge cases where you're getting

855
00:29:23,600 --> 00:29:26,320
200s and it will

856
00:29:26,320 --> 00:29:27,919
it will auto tune them out of the

857
00:29:27,919 --> 00:29:30,399
results so it's fast and it also is

858
00:29:30,399 --> 00:29:32,960
recursive most of these are recursive uh

859
00:29:32,960 --> 00:29:34,240
tools

860
00:29:34,240 --> 00:29:35,679
except for turbo intruder i think they

861
00:29:35,679 --> 00:29:37,039
have options for recursion and we'll

862
00:29:37,039 --> 00:29:41,080
talk about recursion in a second

863
00:29:41,760 --> 00:29:42,720
okay

864
00:29:42,720 --> 00:29:45,200
so content discovery tools are nothing

865
00:29:45,200 --> 00:29:48,399
without the lists that drive them

866
00:29:48,399 --> 00:29:50,480
and you know basically what we're doing

867
00:29:50,480 --> 00:29:53,039
here is we are sending requests trying

868
00:29:53,039 --> 00:29:56,000
to find paths and files that exist on

869
00:29:56,000 --> 00:29:57,679
the web server

870
00:29:57,679 --> 00:30:00,960
and so we need some really good lists

871
00:30:00,960 --> 00:30:03,200
now uh you'll see here that i have my

872
00:30:03,200 --> 00:30:05,520
mind map of how i break up content

873
00:30:05,520 --> 00:30:07,440
discovery lists and which ones i would

874
00:30:07,440 --> 00:30:09,200
use in certain cases

875
00:30:09,200 --> 00:30:10,640
so you'll see that in the bottom

876
00:30:10,640 --> 00:30:12,080
left-hand corner i have a key that says

877
00:30:12,080 --> 00:30:13,919
anything that has that blue triangle

878
00:30:13,919 --> 00:30:17,200
next to it is actually from asset notes

879
00:30:17,200 --> 00:30:19,360
word list project and so asset note did

880
00:30:19,360 --> 00:30:21,520
a whole bunch of work with bigquery and

881
00:30:21,520 --> 00:30:23,760
went out and spidered the internet

882
00:30:23,760 --> 00:30:26,320
using bigquery to find

883
00:30:26,320 --> 00:30:28,559
or to build content discovery lists for

884
00:30:28,559 --> 00:30:30,480
certain technologies or just generic

885
00:30:30,480 --> 00:30:32,480
ones that we could use it's an excellent

886
00:30:32,480 --> 00:30:33,840
project i suggest you check it out

887
00:30:33,840 --> 00:30:36,480
wordlist.assetnet.com

888
00:30:36,480 --> 00:30:38,720
and here's how i break those down

889
00:30:38,720 --> 00:30:40,320
so if i'm going after an iis or

890
00:30:40,320 --> 00:30:42,399
microsoft technology

891
00:30:42,399 --> 00:30:44,640
i am going to use the asset note list

892
00:30:44,640 --> 00:30:47,360
that starts with http archive aspx asp

893
00:30:47,360 --> 00:30:50,080
cfm's svc et cetera et cetera et cetera

894
00:30:50,080 --> 00:30:51,440
i'm going to use that list and the

895
00:30:51,440 --> 00:30:53,440
reason there's no extension on these or

896
00:30:53,440 --> 00:30:55,039
a dot dot dot

897
00:30:55,039 --> 00:30:57,120
is because they're updated periodically

898
00:30:57,120 --> 00:30:58,159
and so you're going to want to choose

899
00:30:58,159 --> 00:30:59,760
the list that has the most recent date

900
00:30:59,760 --> 00:31:01,440
that's why the dot dot is there is

901
00:31:01,440 --> 00:31:03,519
because the the date will change all the

902
00:31:03,519 --> 00:31:04,399
time

903
00:31:04,399 --> 00:31:06,399
uh and then i also want to use um i a

904
00:31:06,399 --> 00:31:09,679
short name scanner by um soros um he

905
00:31:09,679 --> 00:31:12,159
basically made that tool and uh it will

906
00:31:12,159 --> 00:31:14,000
brute force short names up to a certain

907
00:31:14,000 --> 00:31:16,640
number of characters um to help you you

908
00:31:16,640 --> 00:31:18,320
find pads as well in microsoft

909
00:31:18,320 --> 00:31:19,440
technologies

910
00:31:19,440 --> 00:31:21,840
uh if i'm going after php there's two

911
00:31:21,840 --> 00:31:24,320
that i use there uh both part of asset

912
00:31:24,320 --> 00:31:25,760
notes um

913
00:31:25,760 --> 00:31:27,600
asset notes list there

914
00:31:27,600 --> 00:31:30,320
if i'm going after a general api there's

915
00:31:30,320 --> 00:31:32,080
their swagger word list and their http

916
00:31:32,080 --> 00:31:34,240
archive api routes and so that'll help

917
00:31:34,240 --> 00:31:36,640
you um that'll help you discover routes

918
00:31:36,640 --> 00:31:38,240
for apis

919
00:31:38,240 --> 00:31:40,159
as well as there's an api endpoint as

920
00:31:40,159 --> 00:31:42,080
part of a project called secluse which

921
00:31:42,080 --> 00:31:44,240
me and my friend daniel measler run

922
00:31:44,240 --> 00:31:47,840
um and uh and that has some api endpoint

923
00:31:47,840 --> 00:31:49,919
um pads in it as well so i'll use those

924
00:31:49,919 --> 00:31:52,159
three for general api fuzzing or for

925
00:31:52,159 --> 00:31:54,799
content discovery java there's a java

926
00:31:54,799 --> 00:31:58,080
file based in wordlist.assetnet.com

927
00:31:58,080 --> 00:32:02,240
and then there's four or five generic

928
00:32:02,240 --> 00:32:04,159
ones that i will use in addition to the

929
00:32:04,159 --> 00:32:06,799
technology specific one and so uh for

930
00:32:06,799 --> 00:32:08,399
the one that's maintained by asset note

931
00:32:08,399 --> 00:32:09,600
i think is really good is the hp

932
00:32:09,600 --> 00:32:11,279
archetype directories one million

933
00:32:11,279 --> 00:32:13,279
remember requests are free

934
00:32:13,279 --> 00:32:15,120
so uh you know like i'm not really

935
00:32:15,120 --> 00:32:16,720
worried about sending a million requests

936
00:32:16,720 --> 00:32:18,000
i don't know some people might need to

937
00:32:18,000 --> 00:32:20,000
be stealth but uh

938
00:32:20,000 --> 00:32:22,159
i gotta have that coverage um there's

939
00:32:22,159 --> 00:32:23,600
also the wrath list and the robot

940
00:32:23,600 --> 00:32:24,799
disallowed the wrist which were very

941
00:32:24,799 --> 00:32:27,840
similar um so raft came out many many

942
00:32:27,840 --> 00:32:30,480
years ago uh and was

943
00:32:30,480 --> 00:32:32,320
basically a word list built out of the

944
00:32:32,320 --> 00:32:34,880
contents of all of the robots.txt files

945
00:32:34,880 --> 00:32:36,559
on the internet and if you know anything

946
00:32:36,559 --> 00:32:38,320
about spidering and how

947
00:32:38,320 --> 00:32:39,760
spiders work for search engines

948
00:32:39,760 --> 00:32:42,559
robots.txt file tells the spiders where

949
00:32:42,559 --> 00:32:44,159
not to index

950
00:32:44,159 --> 00:32:46,640
and so it's kind of an indication of

951
00:32:46,640 --> 00:32:47,679
where

952
00:32:47,679 --> 00:32:50,000
sites don't want you to go and so the

953
00:32:50,000 --> 00:32:51,600
raft project went and collected all of

954
00:32:51,600 --> 00:32:53,760
the robots.txt files across the alexa

955
00:32:53,760 --> 00:32:55,200
something or something

956
00:32:55,200 --> 00:32:58,000
and basically turn them into a word list

957
00:32:58,000 --> 00:32:59,279
for us to find the things that people

958
00:32:59,279 --> 00:33:02,559
didn't want found um that was old um

959
00:33:02,559 --> 00:33:05,039
very old i think it's about 12 years now

960
00:33:05,039 --> 00:33:07,039
maybe 10 years i don't know

961
00:33:07,039 --> 00:33:08,799
but it's still a very very good list a

962
00:33:08,799 --> 00:33:10,880
lot of people use it robots disallowed

963
00:33:10,880 --> 00:33:12,640
did the exact same thing

964
00:33:12,640 --> 00:33:15,279
but refreshed it later on so i would

965
00:33:15,279 --> 00:33:17,039
actually prefer robots disallowed over

966
00:33:17,039 --> 00:33:18,480
raft at this point

967
00:33:18,480 --> 00:33:21,279
and there's granular sets of lists just

968
00:33:21,279 --> 00:33:23,360
like rafts so you have a large one a

969
00:33:23,360 --> 00:33:25,919
medium one a small one etc and that's

970
00:33:25,919 --> 00:33:27,760
that's actually uh built by daniel

971
00:33:27,760 --> 00:33:29,360
miesler as well

972
00:33:29,360 --> 00:33:32,240
and then you have some newer stuff so uh

973
00:33:32,240 --> 00:33:34,720
the one list for all is actually uh made

974
00:33:34,720 --> 00:33:37,360
one list for all is a generic

975
00:33:37,360 --> 00:33:39,600
uh content discovery list made by six

976
00:33:39,600 --> 00:33:42,399
tudes who also makes recon for the win

977
00:33:42,399 --> 00:33:43,919
which i'm a big fan of

978
00:33:43,919 --> 00:33:46,720
and um that list is about a year old i

979
00:33:46,720 --> 00:33:49,679
think and um basically takes a couple of

980
00:33:49,679 --> 00:33:52,080
other lists removes a lot of cruft in

981
00:33:52,080 --> 00:33:55,120
them like junk numbers and stuff like

982
00:33:55,120 --> 00:33:57,440
that and is a pretty good content

983
00:33:57,440 --> 00:33:59,679
discovery generic list as well as i have

984
00:33:59,679 --> 00:34:01,519
one called content discovery all which i

985
00:34:01,519 --> 00:34:04,960
have used to great success in my hunting

986
00:34:04,960 --> 00:34:07,919
it does still have a lot of the cruft uh

987
00:34:07,919 --> 00:34:10,320
that's um that has been removed in one

988
00:34:10,320 --> 00:34:12,079
uh one list for all but

989
00:34:12,079 --> 00:34:14,320
um still i've had really good success

990
00:34:14,320 --> 00:34:15,599
with it so every once in a while i

991
00:34:15,599 --> 00:34:18,719
choose to use it on a whim

992
00:34:18,719 --> 00:34:19,520
okay

993
00:34:19,520 --> 00:34:21,520
so on top of

994
00:34:21,520 --> 00:34:24,399
um grouping those technologies together

995
00:34:24,399 --> 00:34:26,719
uh you'll start to uncover you know

996
00:34:26,719 --> 00:34:29,359
using some of the tools

997
00:34:29,359 --> 00:34:31,440
that um

998
00:34:31,440 --> 00:34:33,440
that we talked about before

999
00:34:33,440 --> 00:34:35,040
and uh

1000
00:34:35,040 --> 00:34:36,320
understand the technologies that are on

1001
00:34:36,320 --> 00:34:37,679
your site so

1002
00:34:37,679 --> 00:34:39,119
you might understand okay you're against

1003
00:34:39,119 --> 00:34:41,679
apache or nginx or rails or you know

1004
00:34:41,679 --> 00:34:45,359
tomcat or whatever and in the section of

1005
00:34:45,359 --> 00:34:47,839
asset notes uh wordless project there's

1006
00:34:47,839 --> 00:34:50,320
a technology to host mapping section and

1007
00:34:50,320 --> 00:34:52,320
you can look up your specific technology

1008
00:34:52,320 --> 00:34:53,760
there and see if it's

1009
00:34:53,760 --> 00:34:54,800
um

1010
00:34:54,800 --> 00:34:56,399
uh if it's represented and then you you

1011
00:34:56,399 --> 00:34:58,640
would use that list for the specific uh

1012
00:34:58,640 --> 00:35:00,079
technology as well

1013
00:35:00,079 --> 00:35:03,119
um so aem or you know larval or you know

1014
00:35:03,119 --> 00:35:06,640
whatever um so yeah so those are how i

1015
00:35:06,640 --> 00:35:09,040
map word lists and the ones i use

1016
00:35:09,040 --> 00:35:09,920
um

1017
00:35:09,920 --> 00:35:12,400
really project uh really uh asset note

1018
00:35:12,400 --> 00:35:14,480
is you know doing the best research in

1019
00:35:14,480 --> 00:35:17,680
this area right now and yeah i would i

1020
00:35:17,680 --> 00:35:20,879
would use a lot of their stuff

1021
00:35:21,280 --> 00:35:23,839
okay so when you're doing research on

1022
00:35:23,839 --> 00:35:25,760
your technology or you look at any of

1023
00:35:25,760 --> 00:35:26,880
these lists

1024
00:35:26,880 --> 00:35:28,960
one thing that you want to take special

1025
00:35:28,960 --> 00:35:33,040
attention to is configuration files for

1026
00:35:33,040 --> 00:35:34,000
your

1027
00:35:34,000 --> 00:35:35,119
technology that you're against

1028
00:35:35,119 --> 00:35:37,680
specifically the web server or the

1029
00:35:37,680 --> 00:35:39,520
application framework and so a lot of

1030
00:35:39,520 --> 00:35:41,520
times you'll see the example here you

1031
00:35:41,520 --> 00:35:43,359
know there is at some point in an

1032
00:35:43,359 --> 00:35:44,480
application

1033
00:35:44,480 --> 00:35:46,320
sometimes exposed to the internet or in

1034
00:35:46,320 --> 00:35:47,440
the pads that are exposed to the

1035
00:35:47,440 --> 00:35:49,839
internet um a configuration file or

1036
00:35:49,839 --> 00:35:51,680
something like that that has you know

1037
00:35:51,680 --> 00:35:55,440
your database url and port and username

1038
00:35:55,440 --> 00:35:59,119
and password and maybe your aws keys in

1039
00:35:59,119 --> 00:36:01,280
it or possibly some other api keys that

1040
00:36:01,280 --> 00:36:02,640
are really sensitive

1041
00:36:02,640 --> 00:36:05,280
and so you know while a default install

1042
00:36:05,280 --> 00:36:07,920
usually does not have these you know

1043
00:36:07,920 --> 00:36:09,440
disclosed sometimes server

1044
00:36:09,440 --> 00:36:12,480
misconfigurations can happen access can

1045
00:36:12,480 --> 00:36:14,480
be granted and you can accidentally

1046
00:36:14,480 --> 00:36:16,119
leave something like your app your

1047
00:36:16,119 --> 00:36:18,079
appsettings.json file

1048
00:36:18,079 --> 00:36:19,839
uh you know out there for the world to

1049
00:36:19,839 --> 00:36:22,800
read um i i talked with this one on or

1050
00:36:22,800 --> 00:36:24,960
uh corbin leo who's referenced in this

1051
00:36:24,960 --> 00:36:27,359
presentation a couple times

1052
00:36:27,359 --> 00:36:30,320
he actually found the same thing in one

1053
00:36:30,320 --> 00:36:31,920
of his hacker stories really recently he

1054
00:36:31,920 --> 00:36:34,480
found an app settings.json file

1055
00:36:34,480 --> 00:36:36,480
out on the internet easy

1056
00:36:36,480 --> 00:36:38,400
and easy finding so you want to look for

1057
00:36:38,400 --> 00:36:40,400
the configuration files for

1058
00:36:40,400 --> 00:36:42,880
your web server and um

1059
00:36:42,880 --> 00:36:44,320
and for your application framework and

1060
00:36:44,320 --> 00:36:45,680
then you also want to find out you want

1061
00:36:45,680 --> 00:36:47,440
to do some research as to where the

1062
00:36:47,440 --> 00:36:49,839
admin login is for if there's like a cms

1063
00:36:49,839 --> 00:36:51,920
or a crm that you're up against or you

1064
00:36:51,920 --> 00:36:53,200
know maybe even the application

1065
00:36:53,200 --> 00:36:55,280
framework has the login um you want to

1066
00:36:55,280 --> 00:36:57,760
understand uh where that is and where

1067
00:36:57,760 --> 00:37:00,400
the endpoints are associated to it um so

1068
00:37:00,400 --> 00:37:02,400
that you know um where to look for

1069
00:37:02,400 --> 00:37:04,640
access bugs uh in that vein too because

1070
00:37:04,640 --> 00:37:06,000
you want to make sure to try to get

1071
00:37:06,000 --> 00:37:09,280
there if you can

1072
00:37:09,280 --> 00:37:11,520
all right in content discovery you also

1073
00:37:11,520 --> 00:37:13,359
can sometimes go against something that

1074
00:37:13,359 --> 00:37:15,280
is open source so if you're going

1075
00:37:15,280 --> 00:37:17,440
against um you know an application

1076
00:37:17,440 --> 00:37:18,640
that's built off an open source

1077
00:37:18,640 --> 00:37:20,560
technology

1078
00:37:20,560 --> 00:37:23,040
dan um has built this project called

1079
00:37:23,040 --> 00:37:24,640
source to url

1080
00:37:24,640 --> 00:37:27,680
and uh basically it will if you download

1081
00:37:27,680 --> 00:37:29,200
the open source project yourself and

1082
00:37:29,200 --> 00:37:30,560
install it on

1083
00:37:30,560 --> 00:37:32,400
your linux system or your windows system

1084
00:37:32,400 --> 00:37:35,119
or whatever um it will you can place

1085
00:37:35,119 --> 00:37:37,839
this bash file in the root and it will

1086
00:37:37,839 --> 00:37:40,000
build a complete map of all files and

1087
00:37:40,000 --> 00:37:42,000
paths past the web group and then it

1088
00:37:42,000 --> 00:37:43,200
will also

1089
00:37:43,200 --> 00:37:45,280
forward those urls

1090
00:37:45,280 --> 00:37:47,599
um if you give it a prefix of your

1091
00:37:47,599 --> 00:37:48,640
target

1092
00:37:48,640 --> 00:37:50,880
and it will forward it will build with

1093
00:37:50,880 --> 00:37:53,040
the prefix and the site map that you've

1094
00:37:53,040 --> 00:37:54,880
built using the tool it'll request it

1095
00:37:54,880 --> 00:37:56,960
through a proxy so it can go straight

1096
00:37:56,960 --> 00:37:58,560
through burp or zap or something like

1097
00:37:58,560 --> 00:38:00,560
that and so then you'll get a full

1098
00:38:00,560 --> 00:38:02,079
mapping

1099
00:38:02,079 --> 00:38:04,400
of everything that could be possible in

1100
00:38:04,400 --> 00:38:06,880
a default install of that framework or

1101
00:38:06,880 --> 00:38:08,480
open source software so this is a really

1102
00:38:08,480 --> 00:38:11,119
cool tool um to use if you're up against

1103
00:38:11,119 --> 00:38:13,680
something like that

1104
00:38:13,680 --> 00:38:16,400
all right so what if the application

1105
00:38:16,400 --> 00:38:18,000
you're up against there the customer

1106
00:38:18,000 --> 00:38:19,760
you're up against has you know installed

1107
00:38:19,760 --> 00:38:21,920
something like this crm like a paid

1108
00:38:21,920 --> 00:38:25,200
piece of software right and so uh

1109
00:38:25,200 --> 00:38:27,040
you know you don't have a

1110
00:38:27,040 --> 00:38:28,560
you know list in

1111
00:38:28,560 --> 00:38:31,839
asset note that uh tells you um

1112
00:38:31,839 --> 00:38:33,520
basically what to do for content

1113
00:38:33,520 --> 00:38:36,320
discovery here um and it's a little

1114
00:38:36,320 --> 00:38:38,320
known you know site or whatever well

1115
00:38:38,320 --> 00:38:39,920
what you want to do is you want to try

1116
00:38:39,920 --> 00:38:40,640
to

1117
00:38:40,640 --> 00:38:42,880
uh to get a demo basically and you can

1118
00:38:42,880 --> 00:38:45,599
see here for this example sweet crm is a

1119
00:38:45,599 --> 00:38:47,280
crm software that you know any of our

1120
00:38:47,280 --> 00:38:49,040
targets could put you know potentially

1121
00:38:49,040 --> 00:38:50,560
decide to use and install on one of

1122
00:38:50,560 --> 00:38:51,920
their servers

1123
00:38:51,920 --> 00:38:53,839
and so if you go to the manufacturer

1124
00:38:53,839 --> 00:38:55,839
usually referenced in the source of the

1125
00:38:55,839 --> 00:38:57,680
page when you land on it eventually

1126
00:38:57,680 --> 00:38:59,440
you'll figure out that it is a piece of

1127
00:38:59,440 --> 00:39:02,079
paid software you can go to their site

1128
00:39:02,079 --> 00:39:04,880
and some sites will like sweet crm have

1129
00:39:04,880 --> 00:39:07,040
a demo for you to

1130
00:39:07,040 --> 00:39:08,560
play around with

1131
00:39:08,560 --> 00:39:10,480
and so here you can see they have a

1132
00:39:10,480 --> 00:39:12,800
sweet crm 8 demo with the username and

1133
00:39:12,800 --> 00:39:14,320
password that's given to you you can

1134
00:39:14,320 --> 00:39:16,000
just play around with it

1135
00:39:16,000 --> 00:39:18,400
this is where you can make a content

1136
00:39:18,400 --> 00:39:20,320
discovery list for yourself of this

1137
00:39:20,320 --> 00:39:22,720
custom paid software

1138
00:39:22,720 --> 00:39:24,720
and you want to pay special attention to

1139
00:39:24,720 --> 00:39:27,520
the admin functionality of the site

1140
00:39:27,520 --> 00:39:29,280
as well as any like you know private

1141
00:39:29,280 --> 00:39:30,880
data sections of the site those

1142
00:39:30,880 --> 00:39:32,000
endpoints you're going to want to pay

1143
00:39:32,000 --> 00:39:34,000
special attention to marking those down

1144
00:39:34,000 --> 00:39:35,359
so you can then go to your target who

1145
00:39:35,359 --> 00:39:37,200
has installed this software and try to

1146
00:39:37,200 --> 00:39:38,480
get to them

1147
00:39:38,480 --> 00:39:40,320
using content discovery or later on when

1148
00:39:40,320 --> 00:39:41,920
you need to get to private data you know

1149
00:39:41,920 --> 00:39:44,079
where the endpoint is

1150
00:39:44,079 --> 00:39:46,240
let's say they don't offer you know a

1151
00:39:46,240 --> 00:39:48,560
sweet demo like this where you can just

1152
00:39:48,560 --> 00:39:50,480
use it on your own leisure well you can

1153
00:39:50,480 --> 00:39:52,240
call and usually get a demo with a lot

1154
00:39:52,240 --> 00:39:53,920
of these companies you just call them up

1155
00:39:53,920 --> 00:39:55,359
say you're interested

1156
00:39:55,359 --> 00:39:57,200
in purchasing the software and you have

1157
00:39:57,200 --> 00:39:58,880
a budget and you're fancy and you have a

1158
00:39:58,880 --> 00:39:59,680
suit

1159
00:39:59,680 --> 00:40:00,640
and

1160
00:40:00,640 --> 00:40:02,400
they will pitch you and you usually have

1161
00:40:02,400 --> 00:40:04,079
to spend about an hour with them and

1162
00:40:04,079 --> 00:40:05,680
they will pitch you on the site and show

1163
00:40:05,680 --> 00:40:07,680
you how it works and then

1164
00:40:07,680 --> 00:40:09,200
you can either take notes on the

1165
00:40:09,200 --> 00:40:11,280
application that demo call and if that's

1166
00:40:11,280 --> 00:40:12,640
all they give you that sucks but a lot

1167
00:40:12,640 --> 00:40:14,160
of times they'll give you a demo of the

1168
00:40:14,160 --> 00:40:15,040
site

1169
00:40:15,040 --> 00:40:17,599
at the end of like a sales pitch call so

1170
00:40:17,599 --> 00:40:19,440
uh and that's how you build a content

1171
00:40:19,440 --> 00:40:21,119
discovery list for you know paid

1172
00:40:21,119 --> 00:40:22,720
software or commonly off-the-shelf

1173
00:40:22,720 --> 00:40:25,520
software

1174
00:40:25,520 --> 00:40:27,760
all right what about custom content

1175
00:40:27,760 --> 00:40:29,119
discovery lists what about building

1176
00:40:29,119 --> 00:40:31,599
something that is contextually relevant

1177
00:40:31,599 --> 00:40:34,960
to your site um so here i have capital

1178
00:40:34,960 --> 00:40:37,200
one which is a hacker one program

1179
00:40:37,200 --> 00:40:39,680
and basically i've spidered a whole

1180
00:40:39,680 --> 00:40:41,119
bunch of stuff and got some stuff in my

1181
00:40:41,119 --> 00:40:43,440
burp site tree and i'm really digging

1182
00:40:43,440 --> 00:40:44,960
right now

1183
00:40:44,960 --> 00:40:47,040
this tool called scavenger so what

1184
00:40:47,040 --> 00:40:49,920
scavenger do will it will basically you

1185
00:40:49,920 --> 00:40:52,880
select a couple of domains in your site

1186
00:40:52,880 --> 00:40:54,160
tree

1187
00:40:54,160 --> 00:40:55,040
and

1188
00:40:55,040 --> 00:40:56,400
you can

1189
00:40:56,400 --> 00:40:58,240
basically go up to the scavenger

1190
00:40:58,240 --> 00:40:59,839
function after you install the extension

1191
00:40:59,839 --> 00:41:00,880
in burp

1192
00:41:00,880 --> 00:41:03,920
and you can say create me a custom word

1193
00:41:03,920 --> 00:41:06,480
list from your burp history and then it

1194
00:41:06,480 --> 00:41:09,359
will spit out this file which has a

1195
00:41:09,359 --> 00:41:12,560
collection of parameters endpoints

1196
00:41:12,560 --> 00:41:14,319
all kinds of all kinds of stuff and also

1197
00:41:14,319 --> 00:41:16,560
contextual words that it sees repeated

1198
00:41:16,560 --> 00:41:18,800
and it will build you

1199
00:41:18,800 --> 00:41:21,599
a custom contextual word list

1200
00:41:21,599 --> 00:41:24,560
um there is some junk in it uh you know

1201
00:41:24,560 --> 00:41:26,480
it you know every once in a while you'll

1202
00:41:26,480 --> 00:41:27,839
get like some of this stuff like on the

1203
00:41:27,839 --> 00:41:29,440
right hand side you'll see

1204
00:41:29,440 --> 00:41:31,599
um you know like google analytics google

1205
00:41:31,599 --> 00:41:33,680
adwords or facebook audiences right

1206
00:41:33,680 --> 00:41:34,880
those are never going to be passing and

1207
00:41:34,880 --> 00:41:38,880
run into but for the uh rest of it um it

1208
00:41:38,880 --> 00:41:40,720
is uh pretty

1209
00:41:40,720 --> 00:41:43,040
it is pretty good for building a custom

1210
00:41:43,040 --> 00:41:44,640
word list and so tom non did a talk

1211
00:41:44,640 --> 00:41:45,839
about doing this

1212
00:41:45,839 --> 00:41:48,000
you know um in one of the past naham

1213
00:41:48,000 --> 00:41:50,240
cons and this is really the easiest way

1214
00:41:50,240 --> 00:41:52,319
i found for me to build these contextual

1215
00:41:52,319 --> 00:41:53,839
word lists is with this tool called

1216
00:41:53,839 --> 00:41:57,279
scavenger by dexterous

1217
00:41:58,880 --> 00:42:00,079
all right so

1218
00:42:00,079 --> 00:42:02,960
uh you want to build a

1219
00:42:02,960 --> 00:42:05,359
content discovery list

1220
00:42:05,359 --> 00:42:07,119
but you want to do it

1221
00:42:07,119 --> 00:42:09,599
from uh historical data so this is one

1222
00:42:09,599 --> 00:42:11,359
of the methods that you can do as well

1223
00:42:11,359 --> 00:42:13,839
so gao is kind of the

1224
00:42:13,839 --> 00:42:15,839
the best tool in this

1225
00:42:15,839 --> 00:42:16,880
area

1226
00:42:16,880 --> 00:42:19,280
what gao does is it goes back to alien

1227
00:42:19,280 --> 00:42:22,400
vaults open thread exchange and

1228
00:42:22,400 --> 00:42:24,800
and the way back machine for

1229
00:42:24,800 --> 00:42:26,160
for any

1230
00:42:26,160 --> 00:42:28,720
domain and will pull all the

1231
00:42:28,720 --> 00:42:30,640
urls and endpoints

1232
00:42:30,640 --> 00:42:33,040
out of there and then you can feed it to

1233
00:42:33,040 --> 00:42:35,599
a tool like wordlessgen

1234
00:42:35,599 --> 00:42:36,480
by

1235
00:42:36,480 --> 00:42:38,800
amin mali and

1236
00:42:38,800 --> 00:42:40,560
basically create

1237
00:42:40,560 --> 00:42:43,440
a word list of paths that have existed

1238
00:42:43,440 --> 00:42:45,520
in the past and you can then brute force

1239
00:42:45,520 --> 00:42:47,440
using that against your current

1240
00:42:47,440 --> 00:42:50,240
um your current uh site in its state as

1241
00:42:50,240 --> 00:42:51,359
it is now

1242
00:42:51,359 --> 00:42:53,599
um what happens here with gao a little

1243
00:42:53,599 --> 00:42:56,079
bit is that uh can get pretty spammy

1244
00:42:56,079 --> 00:42:57,280
with a lot of

1245
00:42:57,280 --> 00:42:59,200
with an enterprise level site that has

1246
00:42:59,200 --> 00:43:00,560
um

1247
00:43:00,560 --> 00:43:02,160
very similar urls and similar

1248
00:43:02,160 --> 00:43:04,000
functionality can get a little spammy so

1249
00:43:04,000 --> 00:43:05,920
um shout out to michael here who's who

1250
00:43:05,920 --> 00:43:08,160
built a tool that's not in the

1251
00:43:08,160 --> 00:43:09,440
screenshot because i couldn't fit all on

1252
00:43:09,440 --> 00:43:12,240
one page um called trash compactor what

1253
00:43:12,240 --> 00:43:14,000
trash compactor will do is look at the

1254
00:43:14,000 --> 00:43:16,800
similarity of of certain things on pages

1255
00:43:16,800 --> 00:43:18,640
and remove them if they have a lot of

1256
00:43:18,640 --> 00:43:21,040
similarities so you can basically

1257
00:43:21,040 --> 00:43:23,280
unspamify a little bit of that gow

1258
00:43:23,280 --> 00:43:26,160
output um and sweeten it up a little bit

1259
00:43:26,160 --> 00:43:27,040
for

1260
00:43:27,040 --> 00:43:29,200
or make the the word list more concise

1261
00:43:29,200 --> 00:43:31,040
when you pass it to word list gen or you

1262
00:43:31,040 --> 00:43:33,280
just want those gao urls for some other

1263
00:43:33,280 --> 00:43:35,599
reason so this is how you create a

1264
00:43:35,599 --> 00:43:40,640
historical based content discovery list

1265
00:43:40,640 --> 00:43:43,280
all right so a tip on content discovery

1266
00:43:43,280 --> 00:43:45,440
that i think a lot of people you know a

1267
00:43:45,440 --> 00:43:47,440
lot of seasoned hunters know

1268
00:43:47,440 --> 00:43:49,599
but a lot of new hunters or new red

1269
00:43:49,599 --> 00:43:51,599
teamers or new offensive security people

1270
00:43:51,599 --> 00:43:52,800
don't know

1271
00:43:52,800 --> 00:43:55,839
is that uh basically you need to

1272
00:43:55,839 --> 00:43:58,960
recursively brute force your target so

1273
00:43:58,960 --> 00:44:02,720
at the bottom here i have an example of

1274
00:44:02,720 --> 00:44:05,599
um you know some app slash admin will

1275
00:44:05,599 --> 00:44:06,839
give you a

1276
00:44:06,839 --> 00:44:08,720
401 um

1277
00:44:08,720 --> 00:44:10,400
a 401 response right which is not

1278
00:44:10,400 --> 00:44:11,520
authorized

1279
00:44:11,520 --> 00:44:13,200
and

1280
00:44:13,200 --> 00:44:15,920
everything that you get 401 on basically

1281
00:44:15,920 --> 00:44:17,440
you should

1282
00:44:17,440 --> 00:44:19,680
mark as an area for recursion basically

1283
00:44:19,680 --> 00:44:21,839
so you can see that we got a 401 for

1284
00:44:21,839 --> 00:44:23,920
slash admin and then

1285
00:44:23,920 --> 00:44:25,839
uh we told our tool to keep on brute

1286
00:44:25,839 --> 00:44:26,960
forcing

1287
00:44:26,960 --> 00:44:29,599
in this fictitious scenario and it also

1288
00:44:29,599 --> 00:44:32,240
got a 401 for admin slash dashboard

1289
00:44:32,240 --> 00:44:34,800
and at some point new bug bounty hunters

1290
00:44:34,800 --> 00:44:37,119
will stop there and be like okay i have

1291
00:44:37,119 --> 00:44:38,960
my list of 200s for all this other stuff

1292
00:44:38,960 --> 00:44:41,040
and you know i kind of did recursion or

1293
00:44:41,040 --> 00:44:42,160
maybe i went two levels deep or

1294
00:44:42,160 --> 00:44:44,079
something like that but um really it

1295
00:44:44,079 --> 00:44:45,680
behooves you to

1296
00:44:45,680 --> 00:44:48,160
uh fully recursively brute force because

1297
00:44:48,160 --> 00:44:50,720
there are many times and i have made a

1298
00:44:50,720 --> 00:44:53,040
lot of money off of recursive content

1299
00:44:53,040 --> 00:44:54,400
discovery

1300
00:44:54,400 --> 00:44:56,160
at some point there's going to be some

1301
00:44:56,160 --> 00:44:57,760
misconfiguration that allows you to

1302
00:44:57,760 --> 00:44:59,200
access

1303
00:44:59,200 --> 00:45:00,240
you know something and you can see the

1304
00:45:00,240 --> 00:45:02,400
final example is dashboard members gives

1305
00:45:02,400 --> 00:45:05,200
a 200 and you bypass authentication

1306
00:45:05,200 --> 00:45:06,960
um you know and you're on the inside of

1307
00:45:06,960 --> 00:45:10,560
the app and this has taken verbatim from

1308
00:45:10,560 --> 00:45:12,480
a finding i've had in bug bounty i had a

1309
00:45:12,480 --> 00:45:13,680
crm

1310
00:45:13,680 --> 00:45:16,640
that um that was a pretty well known one

1311
00:45:16,640 --> 00:45:19,599
and somehow the admins or the developers

1312
00:45:19,599 --> 00:45:21,760
had misconfigured

1313
00:45:21,760 --> 00:45:24,319
a couple of uh the endpoints

1314
00:45:24,319 --> 00:45:26,160
and so i didn't have any authentication

1315
00:45:26,160 --> 00:45:27,280
creds

1316
00:45:27,280 --> 00:45:29,359
and eventually i recursively brute

1317
00:45:29,359 --> 00:45:31,119
forced and found a page that i could

1318
00:45:31,119 --> 00:45:32,720
access that gave access to something

1319
00:45:32,720 --> 00:45:33,920
like

1320
00:45:33,920 --> 00:45:36,000
oh boy i want to say like a million

1321
00:45:36,000 --> 00:45:39,280
personal records and access to

1322
00:45:39,280 --> 00:45:42,000
sms a whole bunch of any of those users

1323
00:45:42,000 --> 00:45:44,000
so i could have sent that like a mass

1324
00:45:44,000 --> 00:45:46,800
sms to them and it was a huge finding a

1325
00:45:46,800 --> 00:45:48,240
huge payout

1326
00:45:48,240 --> 00:45:51,119
so recursive content discovery is

1327
00:45:51,119 --> 00:45:54,880
absolutely necessary for um for hunters

1328
00:45:54,880 --> 00:45:58,240
and offensive security people

1329
00:45:59,599 --> 00:46:02,079
cool another tip for content discovery

1330
00:46:02,079 --> 00:46:05,680
is uh parse the mobile app so often the

1331
00:46:05,680 --> 00:46:08,000
scope for a bug bounty or a red team

1332
00:46:08,000 --> 00:46:09,520
test or something like that is based off

1333
00:46:09,520 --> 00:46:10,800
of a domain

1334
00:46:10,800 --> 00:46:13,280
and a lot of time the mobile apis will

1335
00:46:13,280 --> 00:46:15,119
actually be based off the same domain

1336
00:46:15,119 --> 00:46:16,560
but use

1337
00:46:16,560 --> 00:46:18,880
the existing api or even a different api

1338
00:46:18,880 --> 00:46:20,800
for the mobile functions

1339
00:46:20,800 --> 00:46:22,720
and so this is all

1340
00:46:22,720 --> 00:46:24,960
a scope that you can test because it's

1341
00:46:24,960 --> 00:46:26,960
on your domain right except for that you

1342
00:46:26,960 --> 00:46:29,760
need to get the these special end points

1343
00:46:29,760 --> 00:46:31,440
these ones that are only available to

1344
00:46:31,440 --> 00:46:33,359
them to the mobile app out of the mobile

1345
00:46:33,359 --> 00:46:36,160
app and so um you can do this with a

1346
00:46:36,160 --> 00:46:37,920
tool that a couple tools but i like this

1347
00:46:37,920 --> 00:46:40,640
one called apk leaks you can basically

1348
00:46:40,640 --> 00:46:42,880
uh find the android app in this case

1349
00:46:42,880 --> 00:46:44,400
ubereats you can find it off one of

1350
00:46:44,400 --> 00:46:46,400
those secondary app stores where you can

1351
00:46:46,400 --> 00:46:48,960
download the apk on your computer

1352
00:46:48,960 --> 00:46:51,680
upload it to your vps run apk leaks on

1353
00:46:51,680 --> 00:46:52,800
it

1354
00:46:52,800 --> 00:46:54,960
and it will not only pull out all the

1355
00:46:54,960 --> 00:46:56,400
paths

1356
00:46:56,400 --> 00:46:58,480
that exist for the web endpoints inside

1357
00:46:58,480 --> 00:47:00,880
of the mobile app because it unzips the

1358
00:47:00,880 --> 00:47:02,000
apk

1359
00:47:02,000 --> 00:47:04,079
and then it does you know like strings

1360
00:47:04,079 --> 00:47:06,960
analysis on it but it'll also look for

1361
00:47:06,960 --> 00:47:09,200
hard-coded api keys and some other

1362
00:47:09,200 --> 00:47:11,520
metadata that's useful in your testing

1363
00:47:11,520 --> 00:47:14,480
um as well so you can see here that uh

1364
00:47:14,480 --> 00:47:16,480
you know ubereats.com i ran this on

1365
00:47:16,480 --> 00:47:19,440
ubereats and you know i'm seeing you

1366
00:47:19,440 --> 00:47:21,520
know pretty cool api points about you

1367
00:47:21,520 --> 00:47:24,559
know redemption of gifts and and stuff

1368
00:47:24,559 --> 00:47:25,839
like that and you can also see that

1369
00:47:25,839 --> 00:47:27,440
there's versions of different parts of

1370
00:47:27,440 --> 00:47:28,880
the api which is interesting because i

1371
00:47:28,880 --> 00:47:30,720
want to basically test anything that's

1372
00:47:30,720 --> 00:47:32,720
an older version i think that's

1373
00:47:32,720 --> 00:47:34,400
you know an interesting place to look et

1374
00:47:34,400 --> 00:47:35,599
cetera and so

1375
00:47:35,599 --> 00:47:38,160
finding endpoints from mobile file or

1376
00:47:38,160 --> 00:47:40,400
mobile applications it's really simple

1377
00:47:40,400 --> 00:47:42,079
you just download the apk you run this

1378
00:47:42,079 --> 00:47:44,000
on it and you get a whole bunch of paths

1379
00:47:44,000 --> 00:47:45,599
that you can dump and burp or your

1380
00:47:45,599 --> 00:47:47,119
browser so

1381
00:47:47,119 --> 00:47:50,720
a cool tip to to check out

1382
00:47:51,200 --> 00:47:55,119
so uh another tip is like changes to

1383
00:47:55,119 --> 00:47:57,200
your site and this is probably more for

1384
00:47:57,200 --> 00:47:59,680
the bug hunters than um the rest of the

1385
00:47:59,680 --> 00:48:01,520
offensive security folk but

1386
00:48:01,520 --> 00:48:03,520
um sometimes being the first to a new

1387
00:48:03,520 --> 00:48:05,440
function means that you find the

1388
00:48:05,440 --> 00:48:06,640
vulnerability

1389
00:48:06,640 --> 00:48:08,640
um and so you have to figure out

1390
00:48:08,640 --> 00:48:10,559
creative ways to stay

1391
00:48:10,559 --> 00:48:12,079
knowledgeable about your target if

1392
00:48:12,079 --> 00:48:14,160
you're gonna hack on them for a long

1393
00:48:14,160 --> 00:48:16,720
time and so there are several ways to do

1394
00:48:16,720 --> 00:48:18,480
this some of the ways that i like are

1395
00:48:18,480 --> 00:48:20,319
the you got to sign up for your targets

1396
00:48:20,319 --> 00:48:22,960
newsletter many companies and products

1397
00:48:22,960 --> 00:48:24,720
have newsletters and the first place

1398
00:48:24,720 --> 00:48:26,160
that they'll go to

1399
00:48:26,160 --> 00:48:28,319
talk about new development they're doing

1400
00:48:28,319 --> 00:48:29,920
or new features that are launching with

1401
00:48:29,920 --> 00:48:32,400
the site is their newsletter another

1402
00:48:32,400 --> 00:48:34,079
place is a lot of these places have

1403
00:48:34,079 --> 00:48:35,440
another thing is a lot of these places

1404
00:48:35,440 --> 00:48:37,119
have affiliate programs and affiliate

1405
00:48:37,119 --> 00:48:39,839
programs uh sometimes give you access to

1406
00:48:39,839 --> 00:48:40,720
new

1407
00:48:40,720 --> 00:48:42,880
uh new features before anybody else

1408
00:48:42,880 --> 00:48:45,200
because you're kind of a trusted uh

1409
00:48:45,200 --> 00:48:47,440
insider for you know one of these places

1410
00:48:47,440 --> 00:48:49,760
and so for one of these applications and

1411
00:48:49,760 --> 00:48:51,920
so being an affiliate you know working

1412
00:48:51,920 --> 00:48:54,160
to get that affiliate status or

1413
00:48:54,160 --> 00:48:56,480
talking to them about access for that it

1414
00:48:56,480 --> 00:48:58,400
can be a really good thing

1415
00:48:58,400 --> 00:49:01,839
the next one is conference talks so

1416
00:49:01,839 --> 00:49:04,720
basically your target you know probably

1417
00:49:04,720 --> 00:49:06,400
goes out to tech conferences in their

1418
00:49:06,400 --> 00:49:08,559
vertical or any type of conference in

1419
00:49:08,559 --> 00:49:11,040
their vertical and they might talk about

1420
00:49:11,040 --> 00:49:12,640
application functionality that's on the

1421
00:49:12,640 --> 00:49:14,319
horizon or their roadmap or something

1422
00:49:14,319 --> 00:49:17,119
like that and so being ready to test

1423
00:49:17,119 --> 00:49:18,640
that code when it comes out before

1424
00:49:18,640 --> 00:49:20,240
anybody else

1425
00:49:20,240 --> 00:49:22,400
can give you that little edge and speed

1426
00:49:22,400 --> 00:49:24,640
that you you know want to find

1427
00:49:24,640 --> 00:49:27,359
vulnerabilities before other people

1428
00:49:27,359 --> 00:49:29,280
verbatim they might drop a feature at

1429
00:49:29,280 --> 00:49:30,480
one of these conferences so if you're

1430
00:49:30,480 --> 00:49:32,400
watching it live you could be the first

1431
00:49:32,400 --> 00:49:34,800
one to test that functionality that

1432
00:49:34,800 --> 00:49:36,960
nobody else knows about so

1433
00:49:36,960 --> 00:49:38,480
googling conference talks that the

1434
00:49:38,480 --> 00:49:40,559
company's giving and looking at public

1435
00:49:40,559 --> 00:49:44,240
roadmaps the last one is via tech you're

1436
00:49:44,240 --> 00:49:46,559
actually monitoring the domain for code

1437
00:49:46,559 --> 00:49:47,599
changes

1438
00:49:47,599 --> 00:49:49,119
and this one i haven't used yet but was

1439
00:49:49,119 --> 00:49:52,000
given to me by my friend patrick and he

1440
00:49:52,000 --> 00:49:53,920
said that it looks cool and so i'm going

1441
00:49:53,920 --> 00:49:55,200
to try it out soon but it's called

1442
00:49:55,200 --> 00:49:57,760
change detection.io and you can enter in

1443
00:49:57,760 --> 00:50:01,359
domains and pages and monitor for

1444
00:50:01,359 --> 00:50:03,359
um changes and auction and actually get

1445
00:50:03,359 --> 00:50:04,640
alerts for

1446
00:50:04,640 --> 00:50:06,400
changes that happen to the code base and

1447
00:50:06,400 --> 00:50:09,200
so um this could be useful to just like

1448
00:50:09,200 --> 00:50:11,599
send you like a slack message or a

1449
00:50:11,599 --> 00:50:13,599
discord dm or something like that when

1450
00:50:13,599 --> 00:50:14,720
something has changed and you can go

1451
00:50:14,720 --> 00:50:17,520
check it out so um you know live change

1452
00:50:17,520 --> 00:50:19,520
detection as well so

1453
00:50:19,520 --> 00:50:20,880
these are some tips on you know how to

1454
00:50:20,880 --> 00:50:24,079
get two features first

1455
00:50:24,559 --> 00:50:26,559
all right now to the brunt of the

1456
00:50:26,559 --> 00:50:28,160
application which are the bunk of the

1457
00:50:28,160 --> 00:50:29,520
presentation which is application

1458
00:50:29,520 --> 00:50:30,640
analysis

1459
00:50:30,640 --> 00:50:32,800
so we have uh five sections here and i'm

1460
00:50:32,800 --> 00:50:34,079
gonna blow through them pretty fast

1461
00:50:34,079 --> 00:50:36,079
because uh running out of time

1462
00:50:36,079 --> 00:50:38,160
all right so questions i ask myself when

1463
00:50:38,160 --> 00:50:40,480
i'm testing applications right these are

1464
00:50:40,480 --> 00:50:41,920
there was seven but i think i trimmed

1465
00:50:41,920 --> 00:50:44,480
down to five anyway um how does the app

1466
00:50:44,480 --> 00:50:46,480
pass data and this is really important

1467
00:50:46,480 --> 00:50:48,319
that you understand this especially as a

1468
00:50:48,319 --> 00:50:50,160
new tester and it seems like such a

1469
00:50:50,160 --> 00:50:52,480
simple thing but it's really important

1470
00:50:52,480 --> 00:50:55,839
are they using a resource parameter and

1471
00:50:55,839 --> 00:50:58,000
value structure that was you know like

1472
00:50:58,000 --> 00:51:00,559
very common and prominent in the last

1473
00:51:00,559 --> 00:51:03,119
uh you know like you know 10 years or

1474
00:51:03,119 --> 00:51:05,520
something like that or are they using a

1475
00:51:05,520 --> 00:51:08,000
rest method that's more similar to uh

1476
00:51:08,000 --> 00:51:09,839
you know method route resource

1477
00:51:09,839 --> 00:51:11,520
sub-resource

1478
00:51:11,520 --> 00:51:13,119
and that's how they're you know passing

1479
00:51:13,119 --> 00:51:15,200
data through the application is through

1480
00:51:15,200 --> 00:51:17,359
different methods

1481
00:51:17,359 --> 00:51:18,960
it's important to understand this

1482
00:51:18,960 --> 00:51:21,040
because it's a cornerstone of how

1483
00:51:21,040 --> 00:51:23,839
you'll do a lot of your fuzzing um you

1484
00:51:23,839 --> 00:51:26,400
know your injection testing later on in

1485
00:51:26,400 --> 00:51:28,640
the application and i've seen people

1486
00:51:28,640 --> 00:51:31,599
uh you know basically not understand how

1487
00:51:31,599 --> 00:51:33,760
their application is

1488
00:51:33,760 --> 00:51:36,160
sending data not inspect it super well

1489
00:51:36,160 --> 00:51:39,200
but then try to scan for bugs using

1490
00:51:39,200 --> 00:51:40,880
automated scanners or using like burp

1491
00:51:40,880 --> 00:51:42,480
scanner or something or even fuzzing

1492
00:51:42,480 --> 00:51:44,079
manually but fuzzing manually in the

1493
00:51:44,079 --> 00:51:45,839
wrong place

1494
00:51:45,839 --> 00:51:47,599
and fail because they just don't

1495
00:51:47,599 --> 00:51:49,200
understand how their application is

1496
00:51:49,200 --> 00:51:50,880
passing data so this is one of the first

1497
00:51:50,880 --> 00:51:53,040
questions i ask when i'm on a site how

1498
00:51:53,040 --> 00:51:55,280
is my application passing data i want to

1499
00:51:55,280 --> 00:51:56,640
understand it

1500
00:51:56,640 --> 00:51:58,960
and then that will set me up for success

1501
00:51:58,960 --> 00:52:01,599
for the rest of my test

1502
00:52:01,599 --> 00:52:03,440
the second question i ask when i get on

1503
00:52:03,440 --> 00:52:07,200
a site is where does the app talk about

1504
00:52:07,200 --> 00:52:09,920
users and how does it talk about users

1505
00:52:09,920 --> 00:52:13,359
and so understanding users both yourself

1506
00:52:13,359 --> 00:52:14,720
and other users and how they're

1507
00:52:14,720 --> 00:52:16,720
referenced is important because it leads

1508
00:52:16,720 --> 00:52:18,400
into several

1509
00:52:18,400 --> 00:52:20,640
bugs that are in the realms of access

1510
00:52:20,640 --> 00:52:22,559
authentication logic information

1511
00:52:22,559 --> 00:52:24,640
disclosure etc and so what you're

1512
00:52:24,640 --> 00:52:26,559
looking for here is you know how do they

1513
00:52:26,559 --> 00:52:28,559
reference a user is it a uid is it an

1514
00:52:28,559 --> 00:52:32,079
email is it a username or is it a uuid

1515
00:52:32,079 --> 00:52:33,760
how do they reference you or any other

1516
00:52:33,760 --> 00:52:35,920
user in their apis

1517
00:52:35,920 --> 00:52:38,480
or their requests and then where are

1518
00:52:38,480 --> 00:52:40,720
they referencing you what api calls are

1519
00:52:40,720 --> 00:52:43,040
you being referenced in uh you know is

1520
00:52:43,040 --> 00:52:46,720
that is that uuid being used in and if

1521
00:52:46,720 --> 00:52:48,720
uh if it's an api call and it has a

1522
00:52:48,720 --> 00:52:50,480
reference uuid for yourself and you're

1523
00:52:50,480 --> 00:52:52,319
just using the application regularly

1524
00:52:52,319 --> 00:52:53,760
what if you create a second account and

1525
00:52:53,760 --> 00:52:55,440
put another uuid in there can you get

1526
00:52:55,440 --> 00:52:57,920
somebody else's information back um are

1527
00:52:57,920 --> 00:52:59,920
they you know cross-referencing the api

1528
00:52:59,920 --> 00:53:02,000
call with the session to make sure you

1529
00:53:02,000 --> 00:53:04,640
know it's you etc there's a lot of bugs

1530
00:53:04,640 --> 00:53:06,960
or based around access authentication

1531
00:53:06,960 --> 00:53:09,200
and information disclosure that really

1532
00:53:09,200 --> 00:53:11,599
center around understanding how the

1533
00:53:11,599 --> 00:53:14,240
application references you as a user and

1534
00:53:14,240 --> 00:53:15,760
where it does this so this is the second

1535
00:53:15,760 --> 00:53:18,480
question i ask when i'm starting to look

1536
00:53:18,480 --> 00:53:21,280
at an application

1537
00:53:21,680 --> 00:53:24,240
all right so the third question is does

1538
00:53:24,240 --> 00:53:26,319
the site have multi-tenancy or user

1539
00:53:26,319 --> 00:53:27,359
levels

1540
00:53:27,359 --> 00:53:30,800
so this will dictate on classes of bugs

1541
00:53:30,800 --> 00:53:31,920
that we

1542
00:53:31,920 --> 00:53:34,079
that we check for authorization

1543
00:53:34,079 --> 00:53:35,119
and access

1544
00:53:35,119 --> 00:53:37,520
again a lot of these last three slides

1545
00:53:37,520 --> 00:53:41,040
are specifically about or referencing

1546
00:53:41,040 --> 00:53:42,640
authorization access bugs and that's

1547
00:53:42,640 --> 00:53:45,119
because like as time goes on the

1548
00:53:45,119 --> 00:53:47,040
frameworks and the technologies the

1549
00:53:47,040 --> 00:53:49,599
protection technologies tend to

1550
00:53:49,599 --> 00:53:52,400
push us away from you know traditional

1551
00:53:52,400 --> 00:53:55,200
um traditional injection bugs and stuff

1552
00:53:55,200 --> 00:53:57,440
like that like uh you know cross-site

1553
00:53:57,440 --> 00:53:59,119
scripting protections are released in

1554
00:53:59,119 --> 00:54:01,280
every new framework and although there's

1555
00:54:01,280 --> 00:54:02,960
bypasses there's less and less of them

1556
00:54:02,960 --> 00:54:04,400
as time goes on

1557
00:54:04,400 --> 00:54:06,079
they'll always be around but they're not

1558
00:54:06,079 --> 00:54:08,559
going to be as prevalent but access and

1559
00:54:08,559 --> 00:54:10,559
author an authentication access

1560
00:54:10,559 --> 00:54:13,440
authentication and authorization bugs

1561
00:54:13,440 --> 00:54:14,319
they

1562
00:54:14,319 --> 00:54:16,800
are the uh the gift that keeps on giving

1563
00:54:16,800 --> 00:54:18,079
when it comes to security testing

1564
00:54:18,079 --> 00:54:19,680
because no matter what framework you

1565
00:54:19,680 --> 00:54:21,839
make it's just really hard for

1566
00:54:21,839 --> 00:54:23,920
um for you to build a comprehensive

1567
00:54:23,920 --> 00:54:26,559
system of access and authorization

1568
00:54:26,559 --> 00:54:29,280
and uh and even then when you do people

1569
00:54:29,280 --> 00:54:30,559
have to configure it right when they

1570
00:54:30,559 --> 00:54:32,240
make custom code to make sure that it's

1571
00:54:32,240 --> 00:54:34,880
it's rigged up correctly and so these

1572
00:54:34,880 --> 00:54:36,799
are you know idors and authorization

1573
00:54:36,799 --> 00:54:39,839
bugs and you know api level blogs that

1574
00:54:39,839 --> 00:54:42,000
give information disclosure they're the

1575
00:54:42,000 --> 00:54:43,119
they're the kind of things that you see

1576
00:54:43,119 --> 00:54:46,559
a lot these days anyway so how how does

1577
00:54:46,559 --> 00:54:48,480
your site work does it have

1578
00:54:48,480 --> 00:54:50,480
multiple users or multiple tenants like

1579
00:54:50,480 --> 00:54:52,960
let's say for instant bug crowd right um

1580
00:54:52,960 --> 00:54:55,839
you know bug crowd has a sas application

1581
00:54:55,839 --> 00:54:56,799
um

1582
00:54:56,799 --> 00:54:58,640
that hosts bounties for customers right

1583
00:54:58,640 --> 00:55:00,559
if you're on the customer side and when

1584
00:55:00,559 --> 00:55:03,599
you log in to your tenant you have your

1585
00:55:03,599 --> 00:55:05,760
bounties and you can control them but

1586
00:55:05,760 --> 00:55:07,520
you know on that system

1587
00:55:07,520 --> 00:55:10,319
there are other customers on that system

1588
00:55:10,319 --> 00:55:12,799
right and so it's a multi-tenant style

1589
00:55:12,799 --> 00:55:14,400
site

1590
00:55:14,400 --> 00:55:15,359
so

1591
00:55:15,359 --> 00:55:17,119
when you start testing you want to know

1592
00:55:17,119 --> 00:55:18,799
this because you want to start asking

1593
00:55:18,799 --> 00:55:21,520
yourself can i access other tenants

1594
00:55:21,520 --> 00:55:23,760
data somehow either through apis or

1595
00:55:23,760 --> 00:55:25,760
different types of bugs or if i get you

1596
00:55:25,760 --> 00:55:27,440
know an injection bug can i go after

1597
00:55:27,440 --> 00:55:28,640
someone else's data because that's

1598
00:55:28,640 --> 00:55:31,920
really valuable to to do

1599
00:55:31,920 --> 00:55:33,760
so is it designed for you know multiple

1600
00:55:33,760 --> 00:55:36,799
customers or is it multi-tenant and then

1601
00:55:36,799 --> 00:55:39,040
if the application isn't or even if it

1602
00:55:39,040 --> 00:55:39,760
is

1603
00:55:39,760 --> 00:55:41,520
uh are there different levels of user

1604
00:55:41,520 --> 00:55:43,040
because these will dictate these will

1605
00:55:43,040 --> 00:55:44,640
dictate how you test

1606
00:55:44,640 --> 00:55:47,520
um for authorization bugs so

1607
00:55:47,520 --> 00:55:50,000
is there an admin user or like an

1608
00:55:50,000 --> 00:55:52,400
account user an account viewer or even

1609
00:55:52,400 --> 00:55:54,319
some unauthenticated functionality to

1610
00:55:54,319 --> 00:55:57,440
the app and can the unauthenticated

1611
00:55:57,440 --> 00:56:00,319
view data that a viewer should only be

1612
00:56:00,319 --> 00:56:02,240
able to view and can of viewer only can

1613
00:56:02,240 --> 00:56:04,160
a viewer view any data that only the

1614
00:56:04,160 --> 00:56:06,319
user the admin is supposed to be able to

1615
00:56:06,319 --> 00:56:08,000
view and you can go all the way up or

1616
00:56:08,000 --> 00:56:09,440
down this chain

1617
00:56:09,440 --> 00:56:12,079
to understand you know are they able to

1618
00:56:12,079 --> 00:56:13,520
access anything they're not supposed to

1619
00:56:13,520 --> 00:56:15,440
at their user level and so understanding

1620
00:56:15,440 --> 00:56:16,799
your application and if it has user

1621
00:56:16,799 --> 00:56:18,400
levels is important even at your

1622
00:56:18,400 --> 00:56:20,720
framework level sometimes there's uh

1623
00:56:20,720 --> 00:56:22,559
there's user levels there too like the

1624
00:56:22,559 --> 00:56:24,880
admin of a cms or a crm or something

1625
00:56:24,880 --> 00:56:26,720
like that and so these are questions you

1626
00:56:26,720 --> 00:56:28,319
want to ask yourself because

1627
00:56:28,319 --> 00:56:29,599
they'll also set you up for success

1628
00:56:29,599 --> 00:56:31,440
later on when you're testing and want to

1629
00:56:31,440 --> 00:56:35,040
do authorization checks

1630
00:56:35,280 --> 00:56:37,440
all right so does the site have a unique

1631
00:56:37,440 --> 00:56:39,599
threat model so this is one

1632
00:56:39,599 --> 00:56:41,280
um which is you know

1633
00:56:41,280 --> 00:56:43,119
kind of hard to explain but i'll do my

1634
00:56:43,119 --> 00:56:45,599
best here right so

1635
00:56:45,599 --> 00:56:47,280
if an application houses more than your

1636
00:56:47,280 --> 00:56:49,280
standard pii data like email address

1637
00:56:49,280 --> 00:56:51,440
credit card blah blah

1638
00:56:51,440 --> 00:56:53,040
and if you're a security tester it can

1639
00:56:53,040 --> 00:56:54,160
be easy

1640
00:56:54,160 --> 00:56:56,559
to forget

1641
00:56:56,559 --> 00:56:57,599
about

1642
00:56:57,599 --> 00:56:59,520
some non-standard

1643
00:56:59,520 --> 00:57:01,440
uh some non-standard data that still

1644
00:57:01,440 --> 00:57:03,920
might be sensitive and so you know like

1645
00:57:03,920 --> 00:57:06,079
as a tester even me sometimes i can get

1646
00:57:06,079 --> 00:57:08,720
so far down the role of like oh i need

1647
00:57:08,720 --> 00:57:11,119
to be testing the site for these classes

1648
00:57:11,119 --> 00:57:12,480
of vulnerabilities

1649
00:57:12,480 --> 00:57:15,520
and for pii et cetera that i miss out on

1650
00:57:15,520 --> 00:57:17,119
the unique threat model that maybe a

1651
00:57:17,119 --> 00:57:18,640
site has and here we're looking at

1652
00:57:18,640 --> 00:57:19,760
twitch

1653
00:57:19,760 --> 00:57:22,480
you know my twitch and um you know one

1654
00:57:22,480 --> 00:57:24,799
of the things that is holy grail for

1655
00:57:24,799 --> 00:57:26,720
twitch is protecting the stream key so

1656
00:57:26,720 --> 00:57:28,720
nobody can hijack your stream

1657
00:57:28,720 --> 00:57:30,319
also protecting

1658
00:57:30,319 --> 00:57:32,400
your real name and username because on

1659
00:57:32,400 --> 00:57:34,319
twitch if you're like a twitch celebrity

1660
00:57:34,319 --> 00:57:35,839
you don't want to get doxxed and you

1661
00:57:35,839 --> 00:57:37,440
don't want everybody to swap your house

1662
00:57:37,440 --> 00:57:40,160
and et cetera et cetera et cetera so um

1663
00:57:40,160 --> 00:57:42,160
even though this is regular user data

1664
00:57:42,160 --> 00:57:44,640
it's not exactly pii or you know the the

1665
00:57:44,640 --> 00:57:48,160
most the most critical pii um you know

1666
00:57:48,160 --> 00:57:51,119
this api key is something to be sought

1667
00:57:51,119 --> 00:57:52,880
after in your testing and it's important

1668
00:57:52,880 --> 00:57:54,319
to know does your site have a unique

1669
00:57:54,319 --> 00:57:56,000
threat threat model this is the same

1670
00:57:56,000 --> 00:57:57,920
with like medical sites if you're

1671
00:57:57,920 --> 00:58:01,280
uh if you're testing a site that is a

1672
00:58:01,280 --> 00:58:02,960
medical you know company or something

1673
00:58:02,960 --> 00:58:04,559
like that like a lot of data in there

1674
00:58:04,559 --> 00:58:05,520
can be

1675
00:58:05,520 --> 00:58:07,119
um really

1676
00:58:07,119 --> 00:58:09,280
uh it can be really valuable as an

1677
00:58:09,280 --> 00:58:11,599
attacker and can matter to the customer

1678
00:58:11,599 --> 00:58:13,040
that it's disclosed but it's not

1679
00:58:13,040 --> 00:58:15,119
necessarily your traditional

1680
00:58:15,119 --> 00:58:17,920
um your traditional pii so you know the

1681
00:58:17,920 --> 00:58:19,119
question you ask yourself when you get

1682
00:58:19,119 --> 00:58:20,640
on a site is does this site have a

1683
00:58:20,640 --> 00:58:22,720
unique threat model that i um that i

1684
00:58:22,720 --> 00:58:25,200
care about

1685
00:58:25,359 --> 00:58:27,119
all right another question is has there

1686
00:58:27,119 --> 00:58:28,960
been past security research or

1687
00:58:28,960 --> 00:58:31,280
vulnerabilities and here you can see uh

1688
00:58:31,280 --> 00:58:32,799
basically i did a ton of googling on

1689
00:58:32,799 --> 00:58:34,640
tesla right uh tesla's my fictitious

1690
00:58:34,640 --> 00:58:36,559
program i'm going against here i can see

1691
00:58:36,559 --> 00:58:38,319
there was some dom xss against

1692
00:58:38,319 --> 00:58:40,160
forums.tesla.com

1693
00:58:40,160 --> 00:58:43,200
i can see that my friend sam curry

1694
00:58:43,200 --> 00:58:46,160
um put a blind cross site scripting

1695
00:58:46,160 --> 00:58:50,000
payload as the name of his car i believe

1696
00:58:50,000 --> 00:58:52,640
and then broke down and the bro and the

1697
00:58:52,640 --> 00:58:55,359
blind xss payload fired in the back end

1698
00:58:55,359 --> 00:58:57,200
of the customer service

1699
00:58:57,200 --> 00:58:59,920
people for tesla which is hilarious um

1700
00:58:59,920 --> 00:59:02,000
you can also see that bug crowd has a

1701
00:59:02,000 --> 00:59:04,720
whole bunch of disclosures for tesla

1702
00:59:04,720 --> 00:59:07,040
which referenced cross-site scripting

1703
00:59:07,040 --> 00:59:09,040
and the exact bug url where it took

1704
00:59:09,040 --> 00:59:10,799
place this is very interesting to me

1705
00:59:10,799 --> 00:59:12,400
because it's recent

1706
00:59:12,400 --> 00:59:14,079
and it's on the main domain that i'm

1707
00:59:14,079 --> 00:59:16,319
testing so i definitely want to read

1708
00:59:16,319 --> 00:59:17,839
about this and understand what happened

1709
00:59:17,839 --> 00:59:20,960
there not only to give me some clues as

1710
00:59:20,960 --> 00:59:23,599
to what happened but also the area of

1711
00:59:23,599 --> 00:59:25,520
the application it took place in and

1712
00:59:25,520 --> 00:59:27,119
then also you could even test the same

1713
00:59:27,119 --> 00:59:29,599
vulnerability for regressions later on

1714
00:59:29,599 --> 00:59:31,359
so doing research

1715
00:59:31,359 --> 00:59:33,359
on has the application had vulners

1716
00:59:33,359 --> 00:59:35,040
before has it been security tested

1717
00:59:35,040 --> 00:59:37,280
before etcetera etcetera will always pay

1718
00:59:37,280 --> 00:59:39,599
you dividends um later on in your test

1719
00:59:39,599 --> 00:59:41,359
it's great to have this information

1720
00:59:41,359 --> 00:59:43,680
understand you know how the the platform

1721
00:59:43,680 --> 00:59:45,280
has attacked it's also a good confidence

1722
00:59:45,280 --> 00:59:47,520
booster right the tesla had an xss which

1723
00:59:47,520 --> 00:59:49,520
is a pretty generic web bug on their

1724
00:59:49,520 --> 00:59:52,160
main domain um and

1725
00:59:52,160 --> 00:59:53,440
you know we talked about some of the

1726
00:59:53,440 --> 00:59:55,200
hurdles in the beginning of the

1727
00:59:55,200 --> 00:59:56,960
presentation well

1728
00:59:56,960 --> 00:59:59,839
this is uh this is proof that everybody

1729
00:59:59,839 --> 01:00:01,839
has bugs everybody has bugs and people

1730
01:00:01,839 --> 01:00:04,480
can find them so

1731
01:00:04,480 --> 01:00:06,319
all right the next question is how does

1732
01:00:06,319 --> 01:00:08,480
it handle these three things and this is

1733
01:00:08,480 --> 01:00:10,079
just me personally these are questions

1734
01:00:10,079 --> 01:00:11,280
that i built this isn't like any

1735
01:00:11,280 --> 01:00:13,359
methodology that anybody else built

1736
01:00:13,359 --> 01:00:16,400
but when i go against an application a

1737
01:00:16,400 --> 01:00:19,119
custom application or even a framework

1738
01:00:19,119 --> 01:00:21,680
i want to know three things

1739
01:00:21,680 --> 01:00:24,559
uh how does it handle xss and not really

1740
01:00:24,559 --> 01:00:27,760
specifically xss but how does it handle

1741
01:00:27,760 --> 01:00:30,319
output and coding of special characters

1742
01:00:30,319 --> 01:00:32,240
um and so you can see here on the left

1743
01:00:32,240 --> 01:00:34,240
um i'm just googling right a ton of

1744
01:00:34,240 --> 01:00:36,640
application hacking is googling and

1745
01:00:36,640 --> 01:00:38,960
reading and doing research on

1746
01:00:38,960 --> 01:00:41,119
uh on your application and your and your

1747
01:00:41,119 --> 01:00:43,200
target um and so you can see here i'm

1748
01:00:43,200 --> 01:00:45,200
looking at like larval xss protection

1749
01:00:45,200 --> 01:00:46,400
there's a ton

1750
01:00:46,400 --> 01:00:49,599
of um basically guys on you know what

1751
01:00:49,599 --> 01:00:51,599
the sanitization does

1752
01:00:51,599 --> 01:00:53,440
in larval as well as people who are

1753
01:00:53,440 --> 01:00:55,760
saying that they've bypassed

1754
01:00:55,760 --> 01:00:57,359
the sanitization and i want to read

1755
01:00:57,359 --> 01:00:59,200
about this i want to know and you know

1756
01:00:59,200 --> 01:01:00,960
maybe it's based on a version number and

1757
01:01:00,960 --> 01:01:03,200
i can do an attack based on the version

1758
01:01:03,200 --> 01:01:04,799
that's installed or you know something

1759
01:01:04,799 --> 01:01:06,640
like that and so it really behooves you

1760
01:01:06,640 --> 01:01:08,640
to do research

1761
01:01:08,640 --> 01:01:10,240
on the framework to understand what it's

1762
01:01:10,240 --> 01:01:12,160
doing um for

1763
01:01:12,160 --> 01:01:14,000
these three areas and so the areas are

1764
01:01:14,000 --> 01:01:16,000
output encoding or xss that's when i

1765
01:01:16,000 --> 01:01:17,920
look at the next one is i want to do

1766
01:01:17,920 --> 01:01:20,400
research on how the application protects

1767
01:01:20,400 --> 01:01:22,000
itself from cross-site request forgery

1768
01:01:22,000 --> 01:01:24,880
is it a header you know a post body you

1769
01:01:24,880 --> 01:01:27,680
know parameter something i want to know

1770
01:01:27,680 --> 01:01:29,040
how they're protecting us across site

1771
01:01:29,040 --> 01:01:32,480
request forgery in mass and then uh that

1772
01:01:32,480 --> 01:01:33,680
information will be useful for to me

1773
01:01:33,680 --> 01:01:34,960
when i want to look at the rest of the

1774
01:01:34,960 --> 01:01:36,480
application that i think is custom

1775
01:01:36,480 --> 01:01:39,280
written and maybe that was not rigged up

1776
01:01:39,280 --> 01:01:41,280
correctly and then code injection things

1777
01:01:41,280 --> 01:01:42,799
like sql injection

1778
01:01:42,799 --> 01:01:44,559
template injection

1779
01:01:44,559 --> 01:01:46,480
no sql injection any type of code

1780
01:01:46,480 --> 01:01:47,839
injection that exists i want to

1781
01:01:47,839 --> 01:01:49,760
understand you know what issues they've

1782
01:01:49,760 --> 01:01:51,839
had in the past

1783
01:01:51,839 --> 01:01:54,400
what their framework protects against in

1784
01:01:54,400 --> 01:01:56,880
input sanitization et cetera et cetera

1785
01:01:56,880 --> 01:01:58,079
and so these are things that i'll do

1786
01:01:58,079 --> 01:02:01,440
some googling for usually 30 45 minutes

1787
01:02:01,440 --> 01:02:04,960
in a really in-depth test

1788
01:02:05,359 --> 01:02:06,480
all right so we're going to move on to

1789
01:02:06,480 --> 01:02:08,079
spidering

1790
01:02:08,079 --> 01:02:10,319
so um

1791
01:02:10,319 --> 01:02:12,079
i kind of already assumed that most of

1792
01:02:12,079 --> 01:02:13,599
you know how to use an interception

1793
01:02:13,599 --> 01:02:14,640
proxy right so we're not going to spend

1794
01:02:14,640 --> 01:02:15,440
very long on this there's two

1795
01:02:15,440 --> 01:02:17,599
interception proxies that are kind of uh

1796
01:02:17,599 --> 01:02:19,520
industry best and that's burp suite and

1797
01:02:19,520 --> 01:02:20,559
zap

1798
01:02:20,559 --> 01:02:22,240
i have been moving more recently towards

1799
01:02:22,240 --> 01:02:23,359
zap

1800
01:02:23,359 --> 01:02:24,960
but at some point you're going to want a

1801
01:02:24,960 --> 01:02:27,280
spider using technology right no amount

1802
01:02:27,280 --> 01:02:29,119
of you walking the app or even doing

1803
01:02:29,119 --> 01:02:30,960
content discovery from the tools that we

1804
01:02:30,960 --> 01:02:32,480
talked about in the content discovery

1805
01:02:32,480 --> 01:02:34,559
section will get you all of the code

1806
01:02:34,559 --> 01:02:36,160
paths and all of the endpoints at some

1807
01:02:36,160 --> 01:02:37,520
point you're going to need to actually

1808
01:02:37,520 --> 01:02:38,880
spider the app with a piece of

1809
01:02:38,880 --> 01:02:41,119
technology that'll execute maybe some

1810
01:02:41,119 --> 01:02:43,680
stuff that you've missed

1811
01:02:43,680 --> 01:02:47,200
so in zap pretty simple you select your

1812
01:02:47,200 --> 01:02:49,200
domain you right click you choose attack

1813
01:02:49,200 --> 01:02:51,599
in spider and off it goes

1814
01:02:51,599 --> 01:02:53,200
in burp it's a little bit more

1815
01:02:53,200 --> 01:02:55,280
convoluted but you right click on your

1816
01:02:55,280 --> 01:02:58,559
domain in the sitemap you choose scan

1817
01:02:58,559 --> 01:03:01,520
you choose crawl only and then just some

1818
01:03:01,520 --> 01:03:03,440
small tips is uh you can go into your

1819
01:03:03,440 --> 01:03:06,720
scan configuration uh because burp uh

1820
01:03:06,720 --> 01:03:08,160
recently and

1821
01:03:08,160 --> 01:03:09,839
this is just my thing maybe it's not

1822
01:03:09,839 --> 01:03:11,920
your thing but uh the crawling can

1823
01:03:11,920 --> 01:03:14,160
sometimes take forever uh you know in

1824
01:03:14,160 --> 01:03:15,920
the burp crawler and

1825
01:03:15,920 --> 01:03:18,079
sometimes i can time out and it's not

1826
01:03:18,079 --> 01:03:20,480
really the best so i set uh my crawl

1827
01:03:20,480 --> 01:03:22,880
strategy the fastest to try to make sure

1828
01:03:22,880 --> 01:03:24,640
that i get some coverage but it you know

1829
01:03:24,640 --> 01:03:27,039
it doesn't take days and then the other

1830
01:03:27,039 --> 01:03:28,240
thing is you want to set it to never

1831
01:03:28,240 --> 01:03:29,440
stop due to

1832
01:03:29,440 --> 01:03:30,880
application errors because what will

1833
01:03:30,880 --> 01:03:33,119
happen is after a few errors the crawler

1834
01:03:33,119 --> 01:03:35,119
will stop and it'll just sit paused and

1835
01:03:35,119 --> 01:03:36,799
then you'll forget about it

1836
01:03:36,799 --> 01:03:38,720
and then you'll press play

1837
01:03:38,720 --> 01:03:40,720
once you remember and then you'll forget

1838
01:03:40,720 --> 01:03:42,160
about it again after it hits a couple

1839
01:03:42,160 --> 01:03:43,920
errors and then you'll never finish your

1840
01:03:43,920 --> 01:03:46,160
crawl so choose never stop crawl due to

1841
01:03:46,160 --> 01:03:48,319
application errors in your scan

1842
01:03:48,319 --> 01:03:51,359
configuration and then uh at the bottom

1843
01:03:51,359 --> 01:03:52,559
on the left hand side choose your

1844
01:03:52,559 --> 01:03:53,839
resource pool

1845
01:03:53,839 --> 01:03:56,000
and give your research your resource

1846
01:03:56,000 --> 01:03:59,039
pool more maximum concurrent requests so

1847
01:03:59,039 --> 01:04:01,280
i chose 75 here and that's how you

1848
01:04:01,280 --> 01:04:04,559
spider in uh burst suite

1849
01:04:04,559 --> 01:04:05,760
okay let's say you don't want to use

1850
01:04:05,760 --> 01:04:07,599
burps to do your spidering you want to

1851
01:04:07,599 --> 01:04:08,720
do it on the command line because you're

1852
01:04:08,720 --> 01:04:10,880
going to rig all this up into

1853
01:04:10,880 --> 01:04:13,440
some automation to start you off quick

1854
01:04:13,440 --> 01:04:14,640
or something like that i don't know you

1855
01:04:14,640 --> 01:04:16,400
know what you want to do there are two

1856
01:04:16,400 --> 01:04:18,000
spiders which are best in class hack

1857
01:04:18,000 --> 01:04:19,760
crawler and ghost spider

1858
01:04:19,760 --> 01:04:23,039
they both do similar things

1859
01:04:23,039 --> 01:04:25,119
they also do cool things like not only

1860
01:04:25,119 --> 01:04:27,440
spider the site via command line spider

1861
01:04:27,440 --> 01:04:29,119
but they'll parse the robots.txt and

1862
01:04:29,119 --> 01:04:30,880
request everything in there and they'll

1863
01:04:30,880 --> 01:04:33,039
parse javascript files using the same

1864
01:04:33,039 --> 01:04:34,720
regexes that are in link finder which

1865
01:04:34,720 --> 01:04:36,480
we're going to talk about when we get to

1866
01:04:36,480 --> 01:04:40,319
the javascript section of the talk which

1867
01:04:40,319 --> 01:04:41,280
is now

1868
01:04:41,280 --> 01:04:44,720
so javascript okay so uh basically this

1869
01:04:44,720 --> 01:04:46,880
is the idea that many bug hunters find

1870
01:04:46,880 --> 01:04:48,079
endpoints

1871
01:04:48,079 --> 01:04:49,520
that are

1872
01:04:49,520 --> 01:04:52,720
um buried in javascript files and uh and

1873
01:04:52,720 --> 01:04:54,799
they find endpoints that are sensitive

1874
01:04:54,799 --> 01:04:55,599
or

1875
01:04:55,599 --> 01:04:57,920
um are not meant for like even views

1876
01:04:57,920 --> 01:04:59,039
sometimes sometimes there's even

1877
01:04:59,039 --> 01:05:01,599
hardcoded keys in javascript it's crazy

1878
01:05:01,599 --> 01:05:02,960
um and so

1879
01:05:02,960 --> 01:05:05,440
you know the og tool was link fighter by

1880
01:05:05,440 --> 01:05:07,839
gerbin givatto which basically pulled

1881
01:05:07,839 --> 01:05:09,119
out relative

1882
01:05:09,119 --> 01:05:12,000
paths from javascript files full links

1883
01:05:12,000 --> 01:05:14,799
and and references as well and so it had

1884
01:05:14,799 --> 01:05:16,319
kind of three or four methods to pull

1885
01:05:16,319 --> 01:05:17,039
out

1886
01:05:17,039 --> 01:05:20,160
links from javascript files.js files

1887
01:05:20,160 --> 01:05:22,000
and so this was really good a lot of

1888
01:05:22,000 --> 01:05:23,280
people use this to this day link

1889
01:05:23,280 --> 01:05:24,960
finder's still great the regexes are

1890
01:05:24,960 --> 01:05:26,480
built into a lot of other tools like i

1891
01:05:26,480 --> 01:05:28,720
said those spiders in the last site um

1892
01:05:28,720 --> 01:05:30,240
at least i know

1893
01:05:30,240 --> 01:05:32,960
um ghostbiter does that those registers

1894
01:05:32,960 --> 01:05:34,720
to pull things out of javascript files

1895
01:05:34,720 --> 01:05:37,440
uh one of the things um that i care

1896
01:05:37,440 --> 01:05:38,720
about though and then you know i asked

1897
01:05:38,720 --> 01:05:40,160
the community about a couple weeks ago

1898
01:05:40,160 --> 01:05:41,599
was you know what about inline

1899
01:05:41,599 --> 01:05:42,960
javascript right what about things that

1900
01:05:42,960 --> 01:05:45,119
are not in a js file like are we still

1901
01:05:45,119 --> 01:05:46,559
parsing those for

1902
01:05:46,559 --> 01:05:49,039
um for paths and stuff like that and the

1903
01:05:49,039 --> 01:05:50,559
answer was there's not a lot of tools to

1904
01:05:50,559 --> 01:05:52,400
do that and then one follower said hey i

1905
01:05:52,400 --> 01:05:54,880
built this thing um

1906
01:05:54,880 --> 01:05:56,160
and uh

1907
01:05:56,160 --> 01:05:58,400
yeah it's really awesome so this is a

1908
01:05:58,400 --> 01:06:00,319
tool command line tool called xn link

1909
01:06:00,319 --> 01:06:03,680
finder by xnl hacker and uh basically

1910
01:06:03,680 --> 01:06:07,200
you give it um you give it your domain

1911
01:06:07,200 --> 01:06:09,599
and some other arguments and it will do

1912
01:06:09,599 --> 01:06:11,520
what i just talked about it will

1913
01:06:11,520 --> 01:06:13,520
uh spider and parse

1914
01:06:13,520 --> 01:06:15,280
um javascript files

1915
01:06:15,280 --> 01:06:18,400
um it will also spite it'll also parse

1916
01:06:18,400 --> 01:06:20,640
inline javascript

1917
01:06:20,640 --> 01:06:23,520
and uh and then re-request things and so

1918
01:06:23,520 --> 01:06:26,000
um it is the first one that i know to do

1919
01:06:26,000 --> 01:06:28,319
that inline scanning as well as it has

1920
01:06:28,319 --> 01:06:30,640
some other features that i really like

1921
01:06:30,640 --> 01:06:32,480
at the top you'll see it's uh i added a

1922
01:06:32,480 --> 01:06:34,480
dash sp for

1923
01:06:34,480 --> 01:06:35,839
um

1924
01:06:35,839 --> 01:06:37,760
it's basically adding a prefix so a lot

1925
01:06:37,760 --> 01:06:39,039
of times you'll get the output of these

1926
01:06:39,039 --> 01:06:40,640
tools and it'll give you it'll only give

1927
01:06:40,640 --> 01:06:43,599
you the slash inventory new m3

1928
01:06:43,599 --> 01:06:45,839
what this does is it

1929
01:06:45,839 --> 01:06:49,599
um a fully uh fledged um the beginning

1930
01:06:49,599 --> 01:06:53,039
part of the ul url for you to um to copy

1931
01:06:53,039 --> 01:06:54,319
so i don't have to do that after the

1932
01:06:54,319 --> 01:06:56,240
fact and try to request it so it gives

1933
01:06:56,240 --> 01:06:58,079
you the fully formed link basically

1934
01:06:58,079 --> 01:07:00,960
which is awesome so uh i love this tool

1935
01:07:00,960 --> 01:07:01,760
um

1936
01:07:01,760 --> 01:07:05,680
i think it's pretty sick so yeah

1937
01:07:05,680 --> 01:07:08,240
what about in burp right so

1938
01:07:08,240 --> 01:07:11,839
xml hacker also created a sick

1939
01:07:11,839 --> 01:07:14,240
burp extension to do this and other

1940
01:07:14,240 --> 01:07:17,200
things so the extension is called gap

1941
01:07:17,200 --> 01:07:19,280
and it parses both

1942
01:07:19,280 --> 01:07:21,839
endpoints and parameters out of your

1943
01:07:21,839 --> 01:07:23,520
burp history

1944
01:07:23,520 --> 01:07:26,160
in a very intuitive way

1945
01:07:26,160 --> 01:07:27,680
you basically right click on your site

1946
01:07:27,680 --> 01:07:31,200
map you say uh send a gap and then you

1947
01:07:31,200 --> 01:07:33,440
choose your gap is set up either to

1948
01:07:33,440 --> 01:07:36,400
create a parameter list or a link list

1949
01:07:36,400 --> 01:07:38,880
um and then you have your your link list

1950
01:07:38,880 --> 01:07:40,720
and it's easily

1951
01:07:40,720 --> 01:07:44,240
copyable um you have the option to show

1952
01:07:44,240 --> 01:07:46,720
the origin of where the link was parsed

1953
01:07:46,720 --> 01:07:49,440
out of you can filter by scope you can

1954
01:07:49,440 --> 01:07:50,400
search

1955
01:07:50,400 --> 01:07:51,440
um

1956
01:07:51,440 --> 01:07:53,440
it is amazing it is super cool and i

1957
01:07:53,440 --> 01:07:54,240
love

1958
01:07:54,240 --> 01:07:56,799
this uh this tool called gap so um i

1959
01:07:56,799 --> 01:07:58,480
suggest people there were some other

1960
01:07:58,480 --> 01:08:00,640
plugins that did link finder type stuff

1961
01:08:00,640 --> 01:08:03,680
in burp and it wasn't uh it wasn't as

1962
01:08:03,680 --> 01:08:05,520
intuitive as this is and easy to use as

1963
01:08:05,520 --> 01:08:06,960
this is so this is you know my current

1964
01:08:06,960 --> 01:08:08,839
favorite for for this and

1965
01:08:08,839 --> 01:08:12,480
burp all right so some some other just

1966
01:08:12,480 --> 01:08:14,000
like discussion around javascript

1967
01:08:14,000 --> 01:08:16,319
parsing right so there's still

1968
01:08:16,319 --> 01:08:18,000
there's still a couple of stuff uh

1969
01:08:18,000 --> 01:08:19,198
there's also a couple of things about

1970
01:08:19,198 --> 01:08:20,960
javascript parsing that can

1971
01:08:20,960 --> 01:08:22,719
be tricky right when your javascript is

1972
01:08:22,719 --> 01:08:25,439
minified or obfuscated in some way

1973
01:08:25,439 --> 01:08:26,960
there's still data in there to be had

1974
01:08:26,960 --> 01:08:28,479
and endpoints to be

1975
01:08:28,479 --> 01:08:29,439
seen

1976
01:08:29,439 --> 01:08:30,399
but you're going to have to do it

1977
01:08:30,399 --> 01:08:32,880
manually so you can feed you know

1978
01:08:32,880 --> 01:08:36,080
minified javascript to beautifier

1979
01:08:36,080 --> 01:08:37,040
or

1980
01:08:37,040 --> 01:08:40,319
you can try to um obfuscate it um

1981
01:08:40,319 --> 01:08:43,600
using different techniques uh and tools

1982
01:08:43,600 --> 01:08:46,000
but uh really it ends up being a manual

1983
01:08:46,000 --> 01:08:47,759
endeavor um

1984
01:08:47,759 --> 01:08:49,198
there is some work being done in this

1985
01:08:49,198 --> 01:08:53,679
space by matsu who um was basically

1986
01:08:53,679 --> 01:08:55,679
introduced to me on twitter by

1987
01:08:55,679 --> 01:08:57,839
the author of ffuf

1988
01:08:57,839 --> 01:08:59,439
and uh is

1989
01:08:59,439 --> 01:09:01,679
matsu is a lot of this is above my head

1990
01:09:01,679 --> 01:09:02,880
so that's okay

1991
01:09:02,880 --> 01:09:05,120
but is using

1992
01:09:05,120 --> 01:09:07,198
typescript language services

1993
01:09:07,198 --> 01:09:09,040
um to

1994
01:09:09,040 --> 01:09:11,279
to try to work on files that maybe have

1995
01:09:11,279 --> 01:09:12,560
been

1996
01:09:12,560 --> 01:09:14,158
minified or

1997
01:09:14,158 --> 01:09:16,560
um or obfuscated and so

1998
01:09:16,560 --> 01:09:18,479
he posted some code couple weeks ago

1999
01:09:18,479 --> 01:09:20,640
when i was having this discussion about

2000
01:09:20,640 --> 01:09:23,600
um looking at javascript and the tools

2001
01:09:23,600 --> 01:09:26,640
around it and um you know keep keep stay

2002
01:09:26,640 --> 01:09:29,920
tuned for his twitter at matsu

2003
01:09:29,920 --> 01:09:30,960
underscore

2004
01:09:30,960 --> 01:09:35,399
for for maybe something in the future

2005
01:09:35,439 --> 01:09:36,960
all right so the last part of the

2006
01:09:36,960 --> 01:09:38,640
javascript section is that there are

2007
01:09:38,640 --> 01:09:40,960
such things as javascript dependencies

2008
01:09:40,960 --> 01:09:43,279
uh the og tool for this or the pioneer

2009
01:09:43,279 --> 01:09:46,238
here was pioneer here was retire.js

2010
01:09:46,238 --> 01:09:48,960
which basically um

2011
01:09:48,960 --> 01:09:50,880
uh basically looked for version levels

2012
01:09:50,880 --> 01:09:53,198
of your libraries and if they were below

2013
01:09:53,198 --> 01:09:54,640
a certain version level they knew that

2014
01:09:54,640 --> 01:09:57,360
they were vulnerable to certain um web

2015
01:09:57,360 --> 01:09:59,920
bugs and uh so this a lot of this has

2016
01:09:59,920 --> 01:10:02,400
been ported already into burp suite by

2017
01:10:02,400 --> 01:10:04,000
default so you can see here that burp

2018
01:10:04,000 --> 01:10:05,440
now can give you these alerts that say

2019
01:10:05,440 --> 01:10:07,760
vulnerable javascript dependency

2020
01:10:07,760 --> 01:10:10,640
your bootstrap is subject to

2021
01:10:10,640 --> 01:10:13,760
um you know these four xss payloads

2022
01:10:13,760 --> 01:10:14,840
because it's

2023
01:10:14,840 --> 01:10:17,760
lower than version 3.2 or something like

2024
01:10:17,760 --> 01:10:19,520
that so um this has already been baked

2025
01:10:19,520 --> 01:10:21,520
into burp but it's important to look at

2026
01:10:21,520 --> 01:10:23,760
the components that are making up your

2027
01:10:23,760 --> 01:10:25,840
application especially your javascript

2028
01:10:25,840 --> 01:10:28,239
dependencies and libraries um it's still

2029
01:10:28,239 --> 01:10:29,679
yet still really important and you can

2030
01:10:29,679 --> 01:10:31,679
find bugs in there in old versions and

2031
01:10:31,679 --> 01:10:34,239
exploit them so

2032
01:10:34,239 --> 01:10:35,360
all right so now i want to talk about

2033
01:10:35,360 --> 01:10:36,560
heat mapping

2034
01:10:36,560 --> 01:10:40,480
um so this is this is the idea of um

2035
01:10:40,480 --> 01:10:42,000
you know it's one of my own terms it

2036
01:10:42,000 --> 01:10:43,600
didn't come out of any book or anything

2037
01:10:43,600 --> 01:10:45,600
like that i just this is kind of how i

2038
01:10:45,600 --> 01:10:48,480
think about applications and um so heat

2039
01:10:48,480 --> 01:10:50,880
mapping is my term for places inside an

2040
01:10:50,880 --> 01:10:52,400
application where bad things can

2041
01:10:52,400 --> 01:10:54,640
normally happen or things i want to look

2042
01:10:54,640 --> 01:10:56,719
at that may indicate interesting places

2043
01:10:56,719 --> 01:10:58,880
to explore and

2044
01:10:58,880 --> 01:11:00,320
you can call it hacker intuition or

2045
01:11:00,320 --> 01:11:01,520
whatever but

2046
01:11:01,520 --> 01:11:03,440
this is this is kind of what i ask

2047
01:11:03,440 --> 01:11:05,760
myself when i'm looking and this is my

2048
01:11:05,760 --> 01:11:08,000
mind map and it's a work in progress for

2049
01:11:08,000 --> 01:11:09,920
heat mapping and application

2050
01:11:09,920 --> 01:11:11,840
so the first thing i want to do is look

2051
01:11:11,840 --> 01:11:13,520
at upload functions i really care about

2052
01:11:13,520 --> 01:11:15,840
upload functions uh in several different

2053
01:11:15,840 --> 01:11:17,840
ways the first is integrations right

2054
01:11:17,840 --> 01:11:19,360
let's say that

2055
01:11:19,360 --> 01:11:21,199
your site doesn't have

2056
01:11:21,199 --> 01:11:24,239
a verbatim self upload function

2057
01:11:24,239 --> 01:11:27,280
but you can tie it to facebook right and

2058
01:11:27,280 --> 01:11:29,520
so facebook uh

2059
01:11:29,520 --> 01:11:31,760
facebook will give this site your

2060
01:11:31,760 --> 01:11:35,280
profile picture on facebook or linkedin

2061
01:11:35,280 --> 01:11:37,120
or something like that and it will

2062
01:11:37,120 --> 01:11:38,719
magically show up in the site that

2063
01:11:38,719 --> 01:11:40,880
you're testing well what if you put you

2064
01:11:40,880 --> 01:11:43,440
know uh payloads in that image that you

2065
01:11:43,440 --> 01:11:45,600
give to linkedin or facebook and then it

2066
01:11:45,600 --> 01:11:47,440
you set this integration up from a third

2067
01:11:47,440 --> 01:11:50,320
party and you're able to exploit a bug

2068
01:11:50,320 --> 01:11:52,560
in your application like xss or

2069
01:11:52,560 --> 01:11:54,719
something like that so um you know

2070
01:11:54,719 --> 01:11:56,239
integrations with upload functions are

2071
01:11:56,239 --> 01:11:58,239
something i want to look at also self

2072
01:11:58,239 --> 01:11:59,840
uploads so if there's an upload function

2073
01:11:59,840 --> 01:12:02,320
verbatim in your site um what type of

2074
01:12:02,320 --> 01:12:03,760
upload function is it is it like a

2075
01:12:03,760 --> 01:12:05,760
document that you're able to upload well

2076
01:12:05,760 --> 01:12:08,080
those are xml most of them are xml based

2077
01:12:08,080 --> 01:12:10,640
right and so there's opportunity there

2078
01:12:10,640 --> 01:12:14,400
to embed sfrf attacks in srf attacks in

2079
01:12:14,400 --> 01:12:18,719
the xml schema or xss attacks

2080
01:12:18,719 --> 01:12:21,280
in the xml schema and so if you're able

2081
01:12:21,280 --> 01:12:22,480
to upload documents you want to make

2082
01:12:22,480 --> 01:12:24,159
sure you're testing for those

2083
01:12:24,159 --> 01:12:26,480
uh if you're able to upload an image

2084
01:12:26,480 --> 01:12:29,199
right you can do things like

2085
01:12:29,199 --> 01:12:31,280
basically fiddle with the image either

2086
01:12:31,280 --> 01:12:33,199
the name of the image the binary header

2087
01:12:33,199 --> 01:12:36,080
header or the metadata and you can try

2088
01:12:36,080 --> 01:12:39,600
to attack the uploader for xss or you

2089
01:12:39,600 --> 01:12:41,520
can do some old school magic by trying

2090
01:12:41,520 --> 01:12:43,360
to upload you know a shell in any of

2091
01:12:43,360 --> 01:12:45,360
these situations right like a php shell

2092
01:12:45,360 --> 01:12:47,760
or an asp shell or something like that

2093
01:12:47,760 --> 01:12:49,520
if they're not correctly checking

2094
01:12:49,520 --> 01:12:53,360
content type or the binary data or any

2095
01:12:53,360 --> 01:12:55,840
other various methods of doing

2096
01:12:55,840 --> 01:12:57,679
a shell upload attack

2097
01:12:57,679 --> 01:12:59,520
and then if it's not self i mean if

2098
01:12:59,520 --> 01:13:01,040
you're doing an upload where is the data

2099
01:13:01,040 --> 01:13:02,880
stored is it on the server itself is

2100
01:13:02,880 --> 01:13:04,960
that stored there or is it on some kind

2101
01:13:04,960 --> 01:13:06,800
of cloud storage does that cloud storage

2102
01:13:06,800 --> 01:13:08,880
have the proper permissions set up on it

2103
01:13:08,880 --> 01:13:11,040
and do i need to

2104
01:13:11,040 --> 01:13:12,480
test those permissions to make sure i

2105
01:13:12,480 --> 01:13:15,600
can't access somebody else's content

2106
01:13:15,600 --> 01:13:16,640
on

2107
01:13:16,640 --> 01:13:18,400
on that cloud service so these are

2108
01:13:18,400 --> 01:13:19,840
things i ask myself about upload

2109
01:13:19,840 --> 01:13:21,199
functions they're particularly important

2110
01:13:21,199 --> 01:13:22,239
to me

2111
01:13:22,239 --> 01:13:23,679
content types are another thing on my

2112
01:13:23,679 --> 01:13:26,000
heat map anything that returns a content

2113
01:13:26,000 --> 01:13:28,560
type about json and xml it's most likely

2114
01:13:28,560 --> 01:13:31,360
a web service these days web services

2115
01:13:31,360 --> 01:13:33,040
are

2116
01:13:33,040 --> 01:13:35,679
are basically where a lot of bugs are

2117
01:13:35,679 --> 01:13:38,320
because it's easy to have

2118
01:13:38,320 --> 01:13:39,520
access

2119
01:13:39,520 --> 01:13:41,120
authorization

2120
01:13:41,120 --> 01:13:42,239
and

2121
01:13:42,239 --> 01:13:44,800
data leaks in an api if you don't do it

2122
01:13:44,800 --> 01:13:46,400
correctly

2123
01:13:46,400 --> 01:13:49,120
and so i care immediately about xml and

2124
01:13:49,120 --> 01:13:50,880
content type json coming back to

2125
01:13:50,880 --> 01:13:53,360
understand you know where uh where the

2126
01:13:53,360 --> 01:13:55,199
api is and i can get started on it and

2127
01:13:55,199 --> 01:13:57,120
then multi-part forms this one's hard to

2128
01:13:57,120 --> 01:13:58,960
explain but i just never

2129
01:13:58,960 --> 01:14:00,960
found a site that used a multi-part form

2130
01:14:00,960 --> 01:14:02,080
before

2131
01:14:02,080 --> 01:14:03,600
that i didn't find a file upload

2132
01:14:03,600 --> 01:14:06,080
vulnerability on for some reason so

2133
01:14:06,080 --> 01:14:07,760
it's just in my heat map like any time i

2134
01:14:07,760 --> 01:14:09,360
see a multi-part form i'm like okay yeah

2135
01:14:09,360 --> 01:14:10,640
i'm going to test that

2136
01:14:10,640 --> 01:14:12,320
i don't know if it's an indication of

2137
01:14:12,320 --> 01:14:14,560
multi-part forms were used in a time in

2138
01:14:14,560 --> 01:14:16,480
the web that you know things were really

2139
01:14:16,480 --> 01:14:18,000
vulnerable i'm not sure

2140
01:14:18,000 --> 01:14:19,199
so

2141
01:14:19,199 --> 01:14:21,360
uh now apis

2142
01:14:21,360 --> 01:14:22,159
um

2143
01:14:22,159 --> 01:14:25,040
i care a lot about apis in my heat map

2144
01:14:25,040 --> 01:14:28,000
so uh i want to make sure that uh not

2145
01:14:28,000 --> 01:14:30,000
only am i finding where the api is early

2146
01:14:30,000 --> 01:14:31,679
on and fiddling with it but i understand

2147
01:14:31,679 --> 01:14:32,880
the methods

2148
01:14:32,880 --> 01:14:36,000
and the routes that make up the api um

2149
01:14:36,000 --> 01:14:37,600
and that i do a full assessment on the

2150
01:14:37,600 --> 01:14:38,880
api there's actually a really good book

2151
01:14:38,880 --> 01:14:40,960
that just came about about api hacking

2152
01:14:40,960 --> 01:14:42,640
that i have sitting on my desk

2153
01:14:42,640 --> 01:14:44,080
i guess i say it's really good i've only

2154
01:14:44,080 --> 01:14:46,320
read the first few chapters but um it's

2155
01:14:46,320 --> 01:14:47,600
pretty awesome

2156
01:14:47,600 --> 01:14:48,800
so far

2157
01:14:48,800 --> 01:14:51,040
then i care about the account section

2158
01:14:51,040 --> 01:14:52,880
and most applications have an account

2159
01:14:52,880 --> 01:14:53,840
section right where you have your

2160
01:14:53,840 --> 01:14:55,840
profile where there's a lot of stored

2161
01:14:55,840 --> 01:14:57,440
reflected data

2162
01:14:57,440 --> 01:14:59,600
and so i care a lot about that area of

2163
01:14:59,600 --> 01:15:01,520
the application because it's a prime

2164
01:15:01,520 --> 01:15:03,120
candidate for

2165
01:15:03,120 --> 01:15:05,600
storedxss it's a

2166
01:15:05,600 --> 01:15:08,320
it's a prime candidate for data leakage

2167
01:15:08,320 --> 01:15:09,920
and it's where integrations are usually

2168
01:15:09,920 --> 01:15:11,600
housed in the profile section or the

2169
01:15:11,600 --> 01:15:14,080
configuration section um and those are

2170
01:15:14,080 --> 01:15:16,480
integrations are normally when you set

2171
01:15:16,480 --> 01:15:18,480
up an integration usually it's url based

2172
01:15:18,480 --> 01:15:20,880
a lot of times between two sites or web

2173
01:15:20,880 --> 01:15:23,040
hook based and so that's really where i

2174
01:15:23,040 --> 01:15:25,360
see a lot of ssrf and

2175
01:15:25,360 --> 01:15:27,199
xss attacks there

2176
01:15:27,199 --> 01:15:28,880
and then the last thing on my heat map

2177
01:15:28,880 --> 01:15:31,360
is monitoring the site for errors

2178
01:15:31,360 --> 01:15:32,880
and this is something i don't see a lot

2179
01:15:32,880 --> 01:15:34,640
of people do but as i'm doing my fuzzing

2180
01:15:34,640 --> 01:15:36,080
and crawling and i'm throwing content

2181
01:15:36,080 --> 01:15:38,640
discovery lists at stuff if i can get it

2182
01:15:38,640 --> 01:15:40,640
to go through burp and i start seeing

2183
01:15:40,640 --> 01:15:43,040
errors i really want to pay attention to

2184
01:15:43,040 --> 01:15:44,719
what caused these errors because it's

2185
01:15:44,719 --> 01:15:46,239
going to give me contextual information

2186
01:15:46,239 --> 01:15:48,560
about the application so now that burp

2187
01:15:48,560 --> 01:15:49,920
has a built-in

2188
01:15:49,920 --> 01:15:51,280
logger

2189
01:15:51,280 --> 01:15:54,400
you can really filter you know by errors

2190
01:15:54,400 --> 01:15:56,080
and you know just look at the requests

2191
01:15:56,080 --> 01:15:58,000
and see what caused that here was it a

2192
01:15:58,000 --> 01:16:01,040
meta character was it like too big

2193
01:16:01,040 --> 01:16:02,400
you know what happened there and

2194
01:16:02,400 --> 01:16:04,320
understand that you know what happens if

2195
01:16:04,320 --> 01:16:06,320
i do that a hundred times in a row or

2196
01:16:06,320 --> 01:16:08,400
like you know like why did that meta

2197
01:16:08,400 --> 01:16:09,520
character

2198
01:16:09,520 --> 01:16:11,840
um you know cause an error and what was

2199
01:16:11,840 --> 01:16:13,440
what was given in the error was you know

2200
01:16:13,440 --> 01:16:15,520
what debug information the error page

2201
01:16:15,520 --> 01:16:16,640
was given back there's a lot of

2202
01:16:16,640 --> 01:16:18,000
questions around errors that are really

2203
01:16:18,000 --> 01:16:19,600
important and a lot of people just don't

2204
01:16:19,600 --> 01:16:21,360
pay any attention to them so

2205
01:16:21,360 --> 01:16:23,199
but really errors give you

2206
01:16:23,199 --> 01:16:25,360
a lot of juicy information

2207
01:16:25,360 --> 01:16:26,480
in your

2208
01:16:26,480 --> 01:16:28,960
in your testing

2209
01:16:28,960 --> 01:16:30,800
all right the last almost last section

2210
01:16:30,800 --> 01:16:32,480
is parameter analysis

2211
01:16:32,480 --> 01:16:34,800
so several years ago i did a project

2212
01:16:34,800 --> 01:16:36,880
called hunt at bug crowd and what this

2213
01:16:36,880 --> 01:16:38,640
went is it went across all of the

2214
01:16:38,640 --> 01:16:42,800
vulnerabilities we uh anonymized them

2215
01:16:42,800 --> 01:16:45,840
and basically only took two keys out of

2216
01:16:45,840 --> 01:16:49,520
them um which was the parameter that uh

2217
01:16:49,520 --> 01:16:52,719
was existing in the submission and

2218
01:16:52,719 --> 01:16:54,320
um

2219
01:16:54,320 --> 01:16:56,159
and the bug class basically and then we

2220
01:16:56,159 --> 01:16:58,239
did a statistical analysis of

2221
01:16:58,239 --> 01:17:00,080
which parameters

2222
01:17:00,080 --> 01:17:02,480
were most likely vulnerable to which

2223
01:17:02,480 --> 01:17:03,440
type

2224
01:17:03,440 --> 01:17:05,040
of vulnerabilities

2225
01:17:05,040 --> 01:17:08,239
and this to this day this remains one of

2226
01:17:08,239 --> 01:17:10,480
my testing super powers

2227
01:17:10,480 --> 01:17:11,840
it gives me

2228
01:17:11,840 --> 01:17:15,199
um some semblance of priority

2229
01:17:15,199 --> 01:17:18,400
to test uh in huge applications right

2230
01:17:18,400 --> 01:17:20,480
like the sales force example that you're

2231
01:17:20,480 --> 01:17:22,719
looking at hundreds or maybe thousands

2232
01:17:22,719 --> 01:17:25,600
of parameters or endpoints to fuzz

2233
01:17:25,600 --> 01:17:27,760
for certain types of vulnerabilities

2234
01:17:27,760 --> 01:17:30,560
this is the superpower that lets you

2235
01:17:30,560 --> 01:17:33,280
um understand where to go looking and

2236
01:17:33,280 --> 01:17:34,880
probably the most important part of this

2237
01:17:34,880 --> 01:17:36,159
presentation

2238
01:17:36,159 --> 01:17:37,520
and i don't know if a lot of people do

2239
01:17:37,520 --> 01:17:39,760
it i do it and i've made a ton of money

2240
01:17:39,760 --> 01:17:41,440
off of this prioritization that it gives

2241
01:17:41,440 --> 01:17:42,239
you

2242
01:17:42,239 --> 01:17:45,360
and um so so we did this project and you

2243
01:17:45,360 --> 01:17:47,040
can see on the right-hand side the idor

2244
01:17:47,040 --> 01:17:48,560
list of some of the parameters that are

2245
01:17:48,560 --> 01:17:51,040
most likely vulnerable to iodor id user

2246
01:17:51,040 --> 01:17:53,040
account and you know contextually they

2247
01:17:53,040 --> 01:17:54,560
make sense right

2248
01:17:54,560 --> 01:17:56,000
at least in the english language that

2249
01:17:56,000 --> 01:17:57,199
makes sense

2250
01:17:57,199 --> 01:18:00,080
so since hunson's inception many years

2251
01:18:00,080 --> 01:18:01,920
ago there have been other projects that

2252
01:18:01,920 --> 01:18:03,199
have attempted to do this but with

2253
01:18:03,199 --> 01:18:06,080
smaller data sets with the xss.com

2254
01:18:06,080 --> 01:18:08,480
data set and with hacker one's public

2255
01:18:08,480 --> 01:18:10,080
disclosures

2256
01:18:10,080 --> 01:18:13,120
a lot of these have been ported to gf

2257
01:18:13,120 --> 01:18:14,159
pattern

2258
01:18:14,159 --> 01:18:17,040
files basically json files with lists of

2259
01:18:17,040 --> 01:18:19,440
these parameters and remember it's not

2260
01:18:19,440 --> 01:18:20,800
just parameters here that we could look

2261
01:18:20,800 --> 01:18:23,040
for these could be routes as well

2262
01:18:23,040 --> 01:18:26,560
and so gf is a is an awesome grep tool

2263
01:18:26,560 --> 01:18:28,480
made by tom nom nom it's like grep on

2264
01:18:28,480 --> 01:18:31,120
steroids and you can feed it lists to

2265
01:18:31,120 --> 01:18:32,719
grip out patterns

2266
01:18:32,719 --> 01:18:35,360
and so um that's an example on the left

2267
01:18:35,360 --> 01:18:37,040
indian elite has built

2268
01:18:37,040 --> 01:18:39,040
uh in his project a whole bunch of gf

2269
01:18:39,040 --> 01:18:40,560
patterns some of which are from hunts

2270
01:18:40,560 --> 01:18:42,640
and some are from other places

2271
01:18:42,640 --> 01:18:45,520
and you can basically feed it a list of

2272
01:18:45,520 --> 01:18:47,600
a giant list of urls that you've seen

2273
01:18:47,600 --> 01:18:49,840
and it'll give you back a report based

2274
01:18:49,840 --> 01:18:52,719
on the pattern saying here's these 50

2275
01:18:52,719 --> 01:18:54,560
that have these parameters and they're

2276
01:18:54,560 --> 01:18:56,480
most likely vulnerable to

2277
01:18:56,480 --> 01:18:58,000
in this example on the left sql

2278
01:18:58,000 --> 01:18:59,040
injection

2279
01:18:59,040 --> 01:19:00,800
um and so that gives you a prioritized

2280
01:19:00,800 --> 01:19:02,320
place to fuzz

2281
01:19:02,320 --> 01:19:03,760
um all those

2282
01:19:03,760 --> 01:19:06,960
all those parameters and those links

2283
01:19:06,960 --> 01:19:10,320
so um to be honest uh there's a whole

2284
01:19:10,320 --> 01:19:12,400
bunch of these projects that have

2285
01:19:12,400 --> 01:19:14,719
patterns that are kind of copied off

2286
01:19:14,719 --> 01:19:16,080
each other i don't know where the data

2287
01:19:16,080 --> 01:19:18,719
came from a lot of them are stolen

2288
01:19:18,719 --> 01:19:20,320
verbatim from hunt

2289
01:19:20,320 --> 01:19:21,760
some of them are from these other data

2290
01:19:21,760 --> 01:19:24,080
sets and so i plan to

2291
01:19:24,080 --> 01:19:26,239
uh basically redo

2292
01:19:26,239 --> 01:19:29,280
um just the parameter section

2293
01:19:29,280 --> 01:19:30,960
of that hunt tool we released a long

2294
01:19:30,960 --> 01:19:33,679
time ago that did this analysis in burp

2295
01:19:33,679 --> 01:19:36,560
um but i just i just plan to redo the uh

2296
01:19:36,560 --> 01:19:38,719
the patterns that um

2297
01:19:38,719 --> 01:19:41,760
that gf can use pretty soon so uh i am

2298
01:19:41,760 --> 01:19:44,239
going to take the you know clean it all

2299
01:19:44,239 --> 01:19:46,800
up and also add some new sources that

2300
01:19:46,800 --> 01:19:49,199
i've been parsing this week keep an eye

2301
01:19:49,199 --> 01:19:50,719
out for jhaddix

2302
01:19:50,719 --> 01:19:52,800
sus underscore params on github that's

2303
01:19:52,800 --> 01:19:55,920
where it'll be and i'll have both uh

2304
01:19:55,920 --> 01:19:57,280
verbatim lists

2305
01:19:57,280 --> 01:20:00,159
um of parameters as well as gf pattern

2306
01:20:00,159 --> 01:20:02,840
json files for you to use with um

2307
01:20:02,840 --> 01:20:07,520
that so this parameter um analysis right

2308
01:20:07,520 --> 01:20:08,960
now can really only be done on the

2309
01:20:08,960 --> 01:20:10,800
command line with the tools we're

2310
01:20:10,800 --> 01:20:13,199
talking about um with gf

2311
01:20:13,199 --> 01:20:15,920
uh because hunt is unmaintained and

2312
01:20:15,920 --> 01:20:17,280
broken i don't know the time to fix it

2313
01:20:17,280 --> 01:20:20,080
right now um nor do i have the skill set

2314
01:20:20,080 --> 01:20:21,679
really it was built by a friend of mine

2315
01:20:21,679 --> 01:20:23,440
the you know the scaffolding was built

2316
01:20:23,440 --> 01:20:25,360
by a friend of mine i did the data

2317
01:20:25,360 --> 01:20:27,520
analysis work um

2318
01:20:27,520 --> 01:20:29,040
and so

2319
01:20:29,040 --> 01:20:31,199
uh you can look into a paid tool that

2320
01:20:31,199 --> 01:20:33,120
will do this called burt bounty it has

2321
01:20:33,120 --> 01:20:36,239
most of the hunt and other data sources

2322
01:20:36,239 --> 01:20:39,120
of parameters in there it's a paid tool

2323
01:20:39,120 --> 01:20:41,199
that's a paid extension to burp it does

2324
01:20:41,199 --> 01:20:43,120
much more than this parameter analysis

2325
01:20:43,120 --> 01:20:45,360
it also allows you to build your own

2326
01:20:45,360 --> 01:20:47,760
scanner checks and burp very easily i

2327
01:20:47,760 --> 01:20:50,000
love this tool i think it's well worth

2328
01:20:50,000 --> 01:20:51,520
the 60

2329
01:20:51,520 --> 01:20:53,280
that they charge for it it's also got

2330
01:20:53,280 --> 01:20:55,840
some scan checks in there built in so i

2331
01:20:55,840 --> 01:20:57,280
think it's really good but not everybody

2332
01:20:57,280 --> 01:20:59,520
can afford 60 for an extension to burp i

2333
01:20:59,520 --> 01:21:02,000
totally get that um hopefully hunt

2334
01:21:02,000 --> 01:21:04,800
someone will pick up hunts and um

2335
01:21:04,800 --> 01:21:06,800
fix it and add the new data sources but

2336
01:21:06,800 --> 01:21:08,800
um right now you probably end up doing a

2337
01:21:08,800 --> 01:21:10,159
lot of this on the command line unless

2338
01:21:10,159 --> 01:21:13,120
you have burp bounty pro

2339
01:21:13,120 --> 01:21:15,360
all right whoa

2340
01:21:15,360 --> 01:21:17,520
that's a lot of stuff okay

2341
01:21:17,520 --> 01:21:18,560
um

2342
01:21:18,560 --> 01:21:21,120
yeah so that's a lot of stuff

2343
01:21:21,120 --> 01:21:22,560
and you're probably wondering like how

2344
01:21:22,560 --> 01:21:24,000
do i keep track of all this stuff you've

2345
01:21:24,000 --> 01:21:25,360
done stuff on the command line you've

2346
01:21:25,360 --> 01:21:27,360
done stuff in burp and like you know

2347
01:21:27,360 --> 01:21:28,800
like also there's some notes and

2348
01:21:28,800 --> 01:21:30,080
questions you're supposed to be asking

2349
01:21:30,080 --> 01:21:31,520
yourself what is

2350
01:21:31,520 --> 01:21:33,679
what does this look like right and so

2351
01:21:33,679 --> 01:21:35,440
um it's totally fair to ask so i'm going

2352
01:21:35,440 --> 01:21:37,679
to show you two-thirds

2353
01:21:37,679 --> 01:21:39,360
of the methodology

2354
01:21:39,360 --> 01:21:41,120
um that

2355
01:21:41,120 --> 01:21:42,560
we talked about

2356
01:21:42,560 --> 01:21:44,639
here in a mind map i'm a big mindmap fan

2357
01:21:44,639 --> 01:21:45,920
you can see here that i've done it for

2358
01:21:45,920 --> 01:21:46,960
tesla

2359
01:21:46,960 --> 01:21:49,760
so i started off with tech which we

2360
01:21:49,760 --> 01:21:52,000
start off the presentation with um via

2361
01:21:52,000 --> 01:21:53,840
the browser extensions we talked about

2362
01:21:53,840 --> 01:21:55,920
all that information is here for my

2363
01:21:55,920 --> 01:21:58,400
reference when i'm testing this site

2364
01:21:58,400 --> 01:22:00,639
for pre-manual testing automation i

2365
01:22:00,639 --> 01:22:02,159
wasn't going to hit tesla.com with

2366
01:22:02,159 --> 01:22:04,239
nuclear jails so you can see the little

2367
01:22:04,239 --> 01:22:07,199
no here i did do a port scan with nabu

2368
01:22:07,199 --> 01:22:09,120
only standard ports open

2369
01:22:09,120 --> 01:22:10,800
for content discovery

2370
01:22:10,800 --> 01:22:12,000
i used

2371
01:22:12,000 --> 01:22:16,719
um this drupal um one because uh the the

2372
01:22:16,719 --> 01:22:18,719
the plugin said that it was drupal

2373
01:22:18,719 --> 01:22:20,480
although this is an old version of a

2374
01:22:20,480 --> 01:22:21,679
drupal's

2375
01:22:21,679 --> 01:22:23,840
mapping so i might want to do a new one

2376
01:22:23,840 --> 01:22:25,440
pretty soon

2377
01:22:25,440 --> 01:22:28,159
i also used uh one of the generic lists

2378
01:22:28,159 --> 01:22:29,679
here i think i use hp archive

2379
01:22:29,679 --> 01:22:30,960
directories

2380
01:22:30,960 --> 01:22:34,560
um and then i use gao as well and then i

2381
01:22:34,560 --> 01:22:36,239
also parsed which i didn't note here

2382
01:22:36,239 --> 01:22:38,960
which i can end right now um i parsed

2383
01:22:38,960 --> 01:22:42,400
the mobile application as well

2384
01:22:43,199 --> 01:22:44,159
yeah

2385
01:22:44,159 --> 01:22:46,239
okay so all these are in text files on

2386
01:22:46,239 --> 01:22:49,040
my vps which i can feed the burp later

2387
01:22:49,040 --> 01:22:52,719
um so that's good uh i asked myself how

2388
01:22:52,719 --> 01:22:54,560
does the app pass data it's a hybrid it

2389
01:22:54,560 --> 01:22:57,120
uses both parameters in some sections of

2390
01:22:57,120 --> 01:22:59,840
the application as well as an api

2391
01:22:59,840 --> 01:23:02,320
um the api when i went to change account

2392
01:23:02,320 --> 01:23:05,760
settings was here at a tesla account

2393
01:23:05,760 --> 01:23:07,600
profile settings api

2394
01:23:07,600 --> 01:23:10,560
um how does it talk about users well it

2395
01:23:10,560 --> 01:23:14,239
didn't directly have a uid on tesla.com

2396
01:23:14,239 --> 01:23:15,600
but uh

2397
01:23:15,600 --> 01:23:17,600
tightly integrated into regular tesla

2398
01:23:17,600 --> 01:23:19,199
was

2399
01:23:19,199 --> 01:23:20,839
with shop.tesla.comwithshop.com

2400
01:23:21,040 --> 01:23:22,800
uh and there's an endpoint there user

2401
01:23:22,800 --> 01:23:25,520
status that once i was logged in

2402
01:23:25,520 --> 01:23:27,679
i looked through my burp history and i

2403
01:23:27,679 --> 01:23:30,080
think i used the burp search for uid or

2404
01:23:30,080 --> 01:23:31,920
uuid i tried both and i found one that

2405
01:23:31,920 --> 01:23:34,800
had uh uuid which referenced my username

2406
01:23:34,800 --> 01:23:37,600
here you can see my email id

2407
01:23:37,600 --> 01:23:40,239
am i authenticated yes and here is my

2408
01:23:40,239 --> 01:23:42,239
uid

2409
01:23:42,239 --> 01:23:44,239
does it have multi-tenancy or user

2410
01:23:44,239 --> 01:23:45,520
levels remember i'm just having this

2411
01:23:45,520 --> 01:23:47,920
discussion with myself so drupal should

2412
01:23:47,920 --> 01:23:49,280
have an admin role but they've hidden

2413
01:23:49,280 --> 01:23:51,199
the login be you know somewhere of the

2414
01:23:51,199 --> 01:23:53,040
drupal login if that's even a right

2415
01:23:53,040 --> 01:23:54,800
fingerprint i think it is but i'm not

2416
01:23:54,800 --> 01:23:57,440
sure i'll have to investigate it more

2417
01:23:57,440 --> 01:23:59,760
um does the api have multi-tenancy or

2418
01:23:59,760 --> 01:24:02,880
user levels uh kind of i mean i'm

2419
01:24:02,880 --> 01:24:04,960
guessing that the api will have access

2420
01:24:04,960 --> 01:24:07,120
to a lot of people's data on the shop

2421
01:24:07,120 --> 01:24:09,760
side that's usually how an api works so

2422
01:24:09,760 --> 01:24:10,960
i'll have to spend more time looking

2423
01:24:10,960 --> 01:24:13,600
there does it have a unique threat model

2424
01:24:13,600 --> 01:24:16,400
not for tesla.com or shop.tesla.com i

2425
01:24:16,400 --> 01:24:17,920
think those are pretty standard threat

2426
01:24:17,920 --> 01:24:19,920
models but for the mobile app that

2427
01:24:19,920 --> 01:24:22,480
controls functions of the car and like

2428
01:24:22,480 --> 01:24:24,960
does things with the roof and like can

2429
01:24:24,960 --> 01:24:26,639
mess up the console

2430
01:24:26,639 --> 01:24:28,800
yes it possibly has a unique threat

2431
01:24:28,800 --> 01:24:30,719
model in the mobile app urls that i

2432
01:24:30,719 --> 01:24:31,920
pulled out

2433
01:24:31,920 --> 01:24:34,239
using the tool earlier

2434
01:24:34,239 --> 01:24:36,880
how does the app handle

2435
01:24:36,880 --> 01:24:38,880
xss or

2436
01:24:38,880 --> 01:24:41,360
or output encoding output encoding in

2437
01:24:41,360 --> 01:24:42,480
drupal

2438
01:24:42,480 --> 01:24:44,080
is like pretty default and well

2439
01:24:44,080 --> 01:24:46,239
standardized in drupal 9.

2440
01:24:46,239 --> 01:24:48,400
um i still need to check the apis you

2441
01:24:48,400 --> 01:24:50,480
can see i make typos in my notes all the

2442
01:24:50,480 --> 01:24:51,440
time

2443
01:24:51,440 --> 01:24:54,000
c surf uh the tokens are in the headers

2444
01:24:54,000 --> 01:24:55,440
and they're applied everywhere so far

2445
01:24:55,440 --> 01:24:57,440
that i've seen so nothing there but i

2446
01:24:57,440 --> 01:24:59,520
want to make sure i test the api and

2447
01:24:59,520 --> 01:25:00,880
shop endpoints

2448
01:25:00,880 --> 01:25:03,520
um and subdomains as well to make sure

2449
01:25:03,520 --> 01:25:05,360
that sea surf is being handled correctly

2450
01:25:05,360 --> 01:25:07,360
there i haven't done that yet

2451
01:25:07,360 --> 01:25:09,120
i googled some research on bugs which we

2452
01:25:09,120 --> 01:25:10,719
talked about earlier in the presentation

2453
01:25:10,719 --> 01:25:12,080
so that i could reference them later

2454
01:25:12,080 --> 01:25:14,000
here's the links

2455
01:25:14,000 --> 01:25:15,360
in my heap map

2456
01:25:15,360 --> 01:25:17,199
the profile section

2457
01:25:17,199 --> 01:25:18,000
um

2458
01:25:18,000 --> 01:25:19,920
which is here i've just copied down the

2459
01:25:19,920 --> 01:25:21,520
link so i know where that is and then

2460
01:25:21,520 --> 01:25:22,800
there's also

2461
01:25:22,800 --> 01:25:25,520
the api um here

2462
01:25:25,520 --> 01:25:27,040
and then no uploads that i've seen yet

2463
01:25:27,040 --> 01:25:28,880
for tesla.com not sure about

2464
01:25:28,880 --> 01:25:30,400
shop.tesla.com they're all very

2465
01:25:30,400 --> 01:25:32,480
interchangeable in fact even auth

2466
01:25:32,480 --> 01:25:34,080
is a third domain that does the

2467
01:25:34,080 --> 01:25:35,840
authentication and it all gets passed

2468
01:25:35,840 --> 01:25:37,520
around and then i haven't done them

2469
01:25:37,520 --> 01:25:39,440
running currently parameter analysis for

2470
01:25:39,440 --> 01:25:40,719
everything right now

2471
01:25:40,719 --> 01:25:43,120
so this is how i track and this gives me

2472
01:25:43,120 --> 01:25:45,920
a great launching point

2473
01:25:45,920 --> 01:25:48,320
for my manual testing and i now have a

2474
01:25:48,320 --> 01:25:51,280
holistic you know kind of look

2475
01:25:51,280 --> 01:25:53,040
and feel uh

2476
01:25:53,040 --> 01:25:54,880
in good kick off place for the rest of

2477
01:25:54,880 --> 01:25:56,239
my testing

2478
01:25:56,239 --> 01:25:57,280
so

2479
01:25:57,280 --> 01:25:59,040
hopefully

2480
01:25:59,040 --> 01:26:00,960
i've given you

2481
01:26:00,960 --> 01:26:03,040
a lot to think about

2482
01:26:03,040 --> 01:26:04,960
um

2483
01:26:04,960 --> 01:26:06,719
and so what's next

2484
01:26:06,719 --> 01:26:08,239
for this presentation i went over a

2485
01:26:08,239 --> 01:26:09,679
little bit sorry about that

2486
01:26:09,679 --> 01:26:11,920
uh

2487
01:26:12,480 --> 01:26:14,159
basically the next version of this i'm

2488
01:26:14,159 --> 01:26:15,120
going to take a lot of community

2489
01:26:15,120 --> 01:26:17,280
feedback put more into it

2490
01:26:17,280 --> 01:26:19,199
i want to do a full workshop where i do

2491
01:26:19,199 --> 01:26:21,360
the whole process live using all the

2492
01:26:21,360 --> 01:26:22,400
tools

2493
01:26:22,400 --> 01:26:24,080
i show people how i pass data around

2494
01:26:24,080 --> 01:26:26,480
between my vps and my burp and

2495
01:26:26,480 --> 01:26:27,760
everything like that

2496
01:26:27,760 --> 01:26:30,000
and then i have to do the next version

2497
01:26:30,000 --> 01:26:32,639
of the bug hunters methodology recon

2498
01:26:32,639 --> 01:26:33,679
edition

2499
01:26:33,679 --> 01:26:35,040
version 5.

2500
01:26:35,040 --> 01:26:38,719
so that is the bug hunters methodology

2501
01:26:38,719 --> 01:26:40,639
application analysis hopefully there was

2502
01:26:40,639 --> 01:26:42,639
some tips and tricks in there some tools

2503
01:26:42,639 --> 01:26:43,760
some stuff

2504
01:26:43,760 --> 01:26:45,280
that helped you

2505
01:26:45,280 --> 01:26:47,040
sorry i went over a little bit

2506
01:26:47,040 --> 01:26:49,440
and i hope everybody has a wonderful

2507
01:26:49,440 --> 01:26:51,520
conference thanks naham khan

2508
01:26:51,520 --> 01:26:55,400
and i'll talk to you later

