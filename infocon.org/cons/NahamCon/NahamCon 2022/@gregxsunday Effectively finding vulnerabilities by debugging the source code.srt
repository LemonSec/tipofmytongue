1
00:00:00,799 --> 00:00:02,879
hello everyone welcome to my talk

2
00:00:02,879 --> 00:00:04,880
effectively finding vulnerabilities in

3
00:00:04,880 --> 00:00:07,359
web applications by debugging the source

4
00:00:07,359 --> 00:00:10,480
code my name is gregos nigella but i'm

5
00:00:10,480 --> 00:00:12,559
more known under the brand backbone to

6
00:00:12,559 --> 00:00:14,080
report explained

7
00:00:14,080 --> 00:00:15,519
i have a youtube channel with

8
00:00:15,519 --> 00:00:18,880
explanations of complex back bounty

9
00:00:18,880 --> 00:00:20,960
reports i have other media as well i

10
00:00:20,960 --> 00:00:22,480
have a newsletter

11
00:00:22,480 --> 00:00:25,119
uh my background is being a pentester

12
00:00:25,119 --> 00:00:26,960
and right now i'm switching from pen

13
00:00:26,960 --> 00:00:29,279
testing to doing back bounty i am

14
00:00:29,279 --> 00:00:31,840
documenting everything that i learn

15
00:00:31,840 --> 00:00:32,800
in

16
00:00:32,800 --> 00:00:35,680
my social media channels and i also

17
00:00:35,680 --> 00:00:38,160
have quite a popular series of

18
00:00:38,160 --> 00:00:39,920
bug bounty challenges where i challenge

19
00:00:39,920 --> 00:00:42,800
myself to spend 100 hours on one back

20
00:00:42,800 --> 00:00:45,840
bounty target and i transparently

21
00:00:45,840 --> 00:00:48,399
show you as much as i can what i

22
00:00:48,399 --> 00:00:51,120
reported what i learned and so on and so

23
00:00:51,120 --> 00:00:54,000
forth but enough about me let's jump to

24
00:00:54,000 --> 00:00:56,160
today's agenda

25
00:00:56,160 --> 00:00:58,399
first for debugging you need to have the

26
00:00:58,399 --> 00:01:00,800
source code so as the first step we will

27
00:01:00,800 --> 00:01:03,680
actually think about when to get the

28
00:01:03,680 --> 00:01:07,360
source code for non-open source projects

29
00:01:07,360 --> 00:01:08,400
then

30
00:01:08,400 --> 00:01:10,159
i will show you what debugging even

31
00:01:10,159 --> 00:01:11,840
looks like and i will show you that it's

32
00:01:11,840 --> 00:01:14,479
not that hard as you may think it's

33
00:01:14,479 --> 00:01:17,280
surely not that hard as i thought before

34
00:01:17,280 --> 00:01:19,040
i started doing that

35
00:01:19,040 --> 00:01:20,000
then

36
00:01:20,000 --> 00:01:22,560
in the third step i will show you i will

37
00:01:22,560 --> 00:01:24,720
tell you my approach to when to do

38
00:01:24,720 --> 00:01:26,479
static source code review when to run

39
00:01:26,479 --> 00:01:28,560
the application and when to

40
00:01:28,560 --> 00:01:31,600
have a proper debugging setup and

41
00:01:31,600 --> 00:01:34,880
finally i will go through an actual back

42
00:01:34,880 --> 00:01:38,799
how i found step by step and ssrf in a

43
00:01:38,799 --> 00:01:40,799
smoke screen

44
00:01:40,799 --> 00:01:41,600
tool

45
00:01:41,600 --> 00:01:43,439
and finally

46
00:01:43,439 --> 00:01:45,600
i will tell you where to start reviewing

47
00:01:45,600 --> 00:01:48,479
the code and debugging the code

48
00:01:48,479 --> 00:01:50,320
because you may

49
00:01:50,320 --> 00:01:53,119
hopefully want to do this after this

50
00:01:53,119 --> 00:01:54,560
presentation

51
00:01:54,560 --> 00:01:56,960
so the easy way to finding

52
00:01:56,960 --> 00:01:58,960
the source code is just testing open

53
00:01:58,960 --> 00:02:01,439
source targets on hacker one there are a

54
00:02:01,439 --> 00:02:02,719
few hundred

55
00:02:02,719 --> 00:02:04,640
repositories in scope on different

56
00:02:04,640 --> 00:02:06,799
public back bounty programs also there

57
00:02:06,799 --> 00:02:09,758
are some organizations that basically

58
00:02:09,758 --> 00:02:12,239
have their whole githubs in scope which

59
00:02:12,239 --> 00:02:14,800
makes things easier and personally i

60
00:02:14,800 --> 00:02:17,360
love these programs because it gives me

61
00:02:17,360 --> 00:02:18,959
a lot of room for different

62
00:02:18,959 --> 00:02:20,640
configurations for different attack

63
00:02:20,640 --> 00:02:22,959
scenarios sometimes in a tool you can

64
00:02:22,959 --> 00:02:26,160
even create your own plugins and maybe

65
00:02:26,160 --> 00:02:29,200
find bugs that are not there

66
00:02:29,200 --> 00:02:32,080
if you just don't write your own code

67
00:02:32,080 --> 00:02:34,879
that's one of the exercises i reverse

68
00:02:34,879 --> 00:02:37,040
engineered recently was found

69
00:02:37,040 --> 00:02:39,840
this way so this is the easy way

70
00:02:39,840 --> 00:02:41,760
but it's not the only way because

71
00:02:41,760 --> 00:02:43,840
sometimes for closed source applications

72
00:02:43,840 --> 00:02:46,879
you can also find the source code and

73
00:02:46,879 --> 00:02:49,040
this is not a secret sauce it won't

74
00:02:49,040 --> 00:02:51,680
magically find your source code of

75
00:02:51,680 --> 00:02:53,920
facebook or twitter

76
00:02:53,920 --> 00:02:54,800
but

77
00:02:54,800 --> 00:02:56,879
enterprise search is an application from

78
00:02:56,879 --> 00:02:59,680
elastic it's not an open source

79
00:02:59,680 --> 00:03:02,159
one it's not under your github but it's

80
00:03:02,159 --> 00:03:05,280
available to install using docker image

81
00:03:05,280 --> 00:03:07,440
and if it's docker image you can also

82
00:03:07,440 --> 00:03:09,680
extract contents of the image and

83
00:03:09,680 --> 00:03:11,760
analyze the source code in this case

84
00:03:11,760 --> 00:03:14,400
it's obfuscated so it's not that easy

85
00:03:14,400 --> 00:03:16,000
but it is still

86
00:03:16,000 --> 00:03:19,200
very much possible so docker hub is the

87
00:03:19,200 --> 00:03:21,840
first place where you can check the

88
00:03:21,840 --> 00:03:23,519
other one is just having another

89
00:03:23,519 --> 00:03:25,519
vulnerability that allows you to

90
00:03:25,519 --> 00:03:27,040
download the source code of the

91
00:03:27,040 --> 00:03:31,040
application so xxc traversal i i was

92
00:03:31,040 --> 00:03:34,000
joking that when i get an rce my black

93
00:03:34,000 --> 00:03:36,640
box pen test becomes a white box pen

94
00:03:36,640 --> 00:03:39,200
test but be cautious with this because

95
00:03:39,200 --> 00:03:41,040
no matter if you are doing a pen test or

96
00:03:41,040 --> 00:03:43,040
a back bounty you probably should have

97
00:03:43,040 --> 00:03:46,239
permission to extract the source code

98
00:03:46,239 --> 00:03:48,319
there are also other methods personally

99
00:03:48,319 --> 00:03:50,720
i haven't tried all of them but these

100
00:03:50,720 --> 00:03:52,799
come from an excellent presentation by

101
00:03:52,799 --> 00:03:55,200
shops called how to do code review the

102
00:03:55,200 --> 00:03:58,159
offensive security way and it's linked

103
00:03:58,159 --> 00:04:00,239
at the bottom of the slide and one of

104
00:04:00,239 --> 00:04:03,360
his methods is looking at cloud

105
00:04:03,360 --> 00:04:06,560
marketplaces so for example on aws you

106
00:04:06,560 --> 00:04:09,360
can start up a machine with a particular

107
00:04:09,360 --> 00:04:11,200
software installed on it and this

108
00:04:11,200 --> 00:04:13,680
software may not be an open source but

109
00:04:13,680 --> 00:04:15,840
if you can have it on your own machine

110
00:04:15,840 --> 00:04:18,880
you can also ssh into this machine and

111
00:04:18,880 --> 00:04:21,600
extract the source code

112
00:04:21,600 --> 00:04:24,080
then you can simply contact sales

113
00:04:24,080 --> 00:04:26,560
pretending to be interesting in buying

114
00:04:26,560 --> 00:04:29,280
this software and getting the trail of

115
00:04:29,280 --> 00:04:32,000
the software which will also

116
00:04:32,000 --> 00:04:34,479
may give you access to the source code

117
00:04:34,479 --> 00:04:36,000
and finally

118
00:04:36,000 --> 00:04:38,639
you can find freelancers who have access

119
00:04:38,639 --> 00:04:41,120
to a source code for example if you want

120
00:04:41,120 --> 00:04:43,440
to test a wordpress plugin find a

121
00:04:43,440 --> 00:04:47,040
developer on let's say fiverr or fever

122
00:04:47,040 --> 00:04:49,440
who can develop integrations with this

123
00:04:49,440 --> 00:04:51,759
plugin likely this developer will have

124
00:04:51,759 --> 00:04:54,400
access to this plugin which may cost a

125
00:04:54,400 --> 00:04:57,840
few hundred quid and if you ask nicely

126
00:04:57,840 --> 00:04:59,919
you may get access

127
00:04:59,919 --> 00:05:02,479
from this person to this source code

128
00:05:02,479 --> 00:05:04,639
personally i haven't tried this method

129
00:05:04,639 --> 00:05:05,440
but

130
00:05:05,440 --> 00:05:06,240
uh

131
00:05:06,240 --> 00:05:07,919
i saw them in this presentation and i

132
00:05:07,919 --> 00:05:11,840
think they really may work

133
00:05:13,120 --> 00:05:15,440
and we'll right now

134
00:05:15,440 --> 00:05:16,800
jump

135
00:05:16,800 --> 00:05:17,919
into the

136
00:05:17,919 --> 00:05:20,400
practical example

137
00:05:20,400 --> 00:05:22,240
i have a very simple

138
00:05:22,240 --> 00:05:24,960
python script here which takes a

139
00:05:24,960 --> 00:05:26,240
parameter

140
00:05:26,240 --> 00:05:28,080
let's say it takes the parameter from

141
00:05:28,080 --> 00:05:29,199
the user

142
00:05:29,199 --> 00:05:31,680
it's untrusted and then it puts this

143
00:05:31,680 --> 00:05:34,800
parameter inside the command execution

144
00:05:34,800 --> 00:05:37,919
this function subprocess we open

145
00:05:37,919 --> 00:05:39,759
executes a command

146
00:05:39,759 --> 00:05:42,560
and we have the parameter here so

147
00:05:42,560 --> 00:05:44,320
immediately you probably think about

148
00:05:44,320 --> 00:05:46,880
testing for command injection here and i

149
00:05:46,880 --> 00:05:48,800
would do the same so i created my

150
00:05:48,800 --> 00:05:50,000
parameter

151
00:05:50,000 --> 00:05:52,400
like this and let's just

152
00:05:52,400 --> 00:05:53,680
run this

153
00:05:53,680 --> 00:05:54,880
program

154
00:05:54,880 --> 00:05:57,120
but all we see is hacking

155
00:05:57,120 --> 00:05:59,520
alert so there are some protections in

156
00:05:59,520 --> 00:06:02,000
place that are supposed to protect the

157
00:06:02,000 --> 00:06:04,800
app from people like me

158
00:06:04,800 --> 00:06:07,360
and of course this is a very small

159
00:06:07,360 --> 00:06:09,759
script i could manually review it but

160
00:06:09,759 --> 00:06:12,479
let's see how debugging the program

161
00:06:12,479 --> 00:06:16,240
looks like so i'm in vs code this is my

162
00:06:16,240 --> 00:06:19,039
go-to ide and i can honestly recommend

163
00:06:19,039 --> 00:06:21,520
it for languages like python node.js

164
00:06:21,520 --> 00:06:23,360
golang it works

165
00:06:23,360 --> 00:06:25,840
very very well and i have python

166
00:06:25,840 --> 00:06:28,000
extension installed

167
00:06:28,000 --> 00:06:29,600
and because this is a python script

168
00:06:29,600 --> 00:06:30,960
obviously

169
00:06:30,960 --> 00:06:33,600
and if i want to debug this program i

170
00:06:33,600 --> 00:06:34,400
can

171
00:06:34,400 --> 00:06:35,840
open this

172
00:06:35,840 --> 00:06:38,479
display button in the upper right hand

173
00:06:38,479 --> 00:06:41,680
corner and click debug the python file

174
00:06:41,680 --> 00:06:44,319
and we can see that the command is quite

175
00:06:44,319 --> 00:06:46,160
different from from what i run

176
00:06:46,160 --> 00:06:48,160
previously but it doesn't really matter

177
00:06:48,160 --> 00:06:50,960
the result is the same so what is the

178
00:06:50,960 --> 00:06:52,400
difference between just trying the

179
00:06:52,400 --> 00:06:55,039
program and debugging it

180
00:06:55,039 --> 00:06:58,400
i can simply click with my mouse

181
00:06:58,400 --> 00:07:01,280
on the left hand side of the line number

182
00:07:01,280 --> 00:07:04,240
and this red box up here appears here

183
00:07:04,240 --> 00:07:06,639
and now if i debug the program again i

184
00:07:06,639 --> 00:07:09,840
can do it using f5 shortcut

185
00:07:09,840 --> 00:07:11,120
i see

186
00:07:11,120 --> 00:07:14,000
no output here i see no hacking alert

187
00:07:14,000 --> 00:07:16,560
nor the command execution and the line

188
00:07:16,560 --> 00:07:20,400
is now yellow what happened is it hit a

189
00:07:20,400 --> 00:07:23,039
break point this red dot it was a break

190
00:07:23,039 --> 00:07:25,199
point and it means that when the program

191
00:07:25,199 --> 00:07:28,240
gets to executing this particular line

192
00:07:28,240 --> 00:07:31,360
it stops and i can do now with it

193
00:07:31,360 --> 00:07:32,800
whatever i

194
00:07:32,800 --> 00:07:35,520
want and in this case

195
00:07:35,520 --> 00:07:36,720
i can

196
00:07:36,720 --> 00:07:39,120
select to continue the execution and it

197
00:07:39,120 --> 00:07:41,360
will just return what it returned

198
00:07:41,360 --> 00:07:45,039
previously and nothing will change

199
00:07:45,039 --> 00:07:48,000
but i can also instead of continuing

200
00:07:48,000 --> 00:07:50,319
choose to step over this function and

201
00:07:50,319 --> 00:07:53,360
what will happen is this execution of

202
00:07:53,360 --> 00:07:56,000
line 32 will continue but the program

203
00:07:56,000 --> 00:07:59,840
will stop in line 33 one line later and

204
00:07:59,840 --> 00:08:02,080
in this case we can see this is an if

205
00:08:02,080 --> 00:08:03,440
expression

206
00:08:03,440 --> 00:08:06,319
which calls the is secure function

207
00:08:06,319 --> 00:08:08,560
so i would like to see what this

208
00:08:08,560 --> 00:08:11,039
function does so in this case i will

209
00:08:11,039 --> 00:08:13,440
choose from this many step into which

210
00:08:13,440 --> 00:08:16,000
means step into the function

211
00:08:16,000 --> 00:08:17,599
and all of a sudden

212
00:08:17,599 --> 00:08:20,879
i am inside in is secure function and i

213
00:08:20,879 --> 00:08:22,479
can see in the left

214
00:08:22,479 --> 00:08:24,479
left hand side that the value of the

215
00:08:24,479 --> 00:08:29,280
payload is dollar id so this is exactly

216
00:08:29,280 --> 00:08:30,319
what i

217
00:08:30,319 --> 00:08:31,680
sent as the

218
00:08:31,680 --> 00:08:34,240
as the argument here i can also

219
00:08:34,240 --> 00:08:36,240
evaluate it

220
00:08:36,240 --> 00:08:37,919
in this

221
00:08:37,919 --> 00:08:40,719
in this debug console i can like call

222
00:08:40,719 --> 00:08:42,159
functions here

223
00:08:42,159 --> 00:08:43,519
if i wanted

224
00:08:43,519 --> 00:08:45,920
but i'm not going to do this

225
00:08:45,920 --> 00:08:46,640
and

226
00:08:46,640 --> 00:08:47,839
in this case

227
00:08:47,839 --> 00:08:50,720
it's a very ugly code i must admit

228
00:08:50,720 --> 00:08:52,880
and it checks one by one

229
00:08:52,880 --> 00:08:55,440
if there are some forbidden characters

230
00:08:55,440 --> 00:08:58,000
so i will step over this one and we can

231
00:08:58,000 --> 00:09:01,440
see that we didn't get inside this if

232
00:09:01,440 --> 00:09:02,560
which means

233
00:09:02,560 --> 00:09:04,080
that this condition

234
00:09:04,080 --> 00:09:05,200
doesn't

235
00:09:05,200 --> 00:09:07,760
break our payload isn't marking our

236
00:09:07,760 --> 00:09:10,160
payload as insecure so i'm step over

237
00:09:10,160 --> 00:09:11,600
stepping over again

238
00:09:11,600 --> 00:09:12,880
and again

239
00:09:12,880 --> 00:09:16,399
and again but this time we went inside

240
00:09:16,399 --> 00:09:18,640
the if expression we went inside this

241
00:09:18,640 --> 00:09:21,600
block and the function now returns false

242
00:09:21,600 --> 00:09:23,279
and we can see that if this returns

243
00:09:23,279 --> 00:09:26,399
false there is printing of hacking alert

244
00:09:26,399 --> 00:09:29,200
and the program doesn't even get to

245
00:09:29,200 --> 00:09:31,279
executing the command

246
00:09:31,279 --> 00:09:34,399
so i know that this line is the very

247
00:09:34,399 --> 00:09:37,040
line that i need to bypass at the moment

248
00:09:37,040 --> 00:09:39,279
so right now i'm continuing execution of

249
00:09:39,279 --> 00:09:40,800
the program

250
00:09:40,800 --> 00:09:42,800
i will set up a breakpoint inside this

251
00:09:42,800 --> 00:09:46,800
function so i now have two breakpoints

252
00:09:46,800 --> 00:09:49,920
and i will change my payload now to use

253
00:09:49,920 --> 00:09:51,920
backticks instead of

254
00:09:51,920 --> 00:09:53,760
the dollar sign

255
00:09:53,760 --> 00:09:55,920
right now i will again stop

256
00:09:55,920 --> 00:09:59,279
in this place i tend to like remove the

257
00:09:59,279 --> 00:10:01,600
outer break point because i set up one

258
00:10:01,600 --> 00:10:04,399
here so i can remove this one or i or i

259
00:10:04,399 --> 00:10:06,800
can only disable it

260
00:10:06,800 --> 00:10:09,200
and i can continue again and it now

261
00:10:09,200 --> 00:10:13,040
stops in my next breakpoint it breaks

262
00:10:13,040 --> 00:10:14,880
uh you could say and i will do the same

263
00:10:14,880 --> 00:10:16,959
thing as previously so i'm stepping over

264
00:10:16,959 --> 00:10:18,480
until

265
00:10:18,480 --> 00:10:21,680
i get to this check where it returns

266
00:10:21,680 --> 00:10:24,240
false again because it also the code

267
00:10:24,240 --> 00:10:26,000
also checks

268
00:10:26,000 --> 00:10:28,959
if i have backticks in my code so i will

269
00:10:28,959 --> 00:10:31,200
continue again

270
00:10:31,200 --> 00:10:33,519
and i have to think about a payload that

271
00:10:33,519 --> 00:10:36,320
does not include backticks or dollars so

272
00:10:36,320 --> 00:10:39,120
i will go for another

273
00:10:39,120 --> 00:10:42,320
vector here i will try a semicolon

274
00:10:42,320 --> 00:10:43,760
and

275
00:10:43,760 --> 00:10:45,279
let's do the same

276
00:10:45,279 --> 00:10:48,560
again and this time i don't have this

277
00:10:48,560 --> 00:10:51,120
breakpoint this one is deactivated

278
00:10:51,120 --> 00:10:53,519
and i am in this is secure function and

279
00:10:53,519 --> 00:10:55,839
i will step over until

280
00:10:55,839 --> 00:10:57,839
i get to any

281
00:10:57,839 --> 00:10:58,880
return

282
00:10:58,880 --> 00:11:02,320
false fragments turns out i don't turns

283
00:11:02,320 --> 00:11:03,120
out

284
00:11:03,120 --> 00:11:04,800
we get to the very end of the function

285
00:11:04,800 --> 00:11:07,200
when when it returns true which means it

286
00:11:07,200 --> 00:11:08,800
is secure

287
00:11:08,800 --> 00:11:12,000
so i can now step out of this function

288
00:11:12,000 --> 00:11:15,680
and again we are in this place i can i

289
00:11:15,680 --> 00:11:17,440
know that i can bypass this secure

290
00:11:17,440 --> 00:11:19,040
function so i will now

291
00:11:19,040 --> 00:11:21,360
deactivate this breakpoint as well

292
00:11:21,360 --> 00:11:23,519
collapse this function

293
00:11:23,519 --> 00:11:26,160
and continue execution of the program

294
00:11:26,160 --> 00:11:27,519
but i see that

295
00:11:27,519 --> 00:11:30,000
it doesn't really execute the id command

296
00:11:30,000 --> 00:11:33,120
it echoes the string id which is

297
00:11:33,120 --> 00:11:34,560
definitely not

298
00:11:34,560 --> 00:11:37,040
what i wanted and i have a feeling that

299
00:11:37,040 --> 00:11:39,519
the filter malicious function may have

300
00:11:39,519 --> 00:11:42,000
something to do with this so what i will

301
00:11:42,000 --> 00:11:45,040
do is i will put a breakpoint here

302
00:11:45,040 --> 00:11:48,079
and i will start the program again and

303
00:11:48,079 --> 00:11:50,720
we can see that up until this point

304
00:11:50,720 --> 00:11:51,600
our

305
00:11:51,600 --> 00:11:54,480
parameter is not changed it's exactly

306
00:11:54,480 --> 00:11:57,760
the same what is what it was here but if

307
00:11:57,760 --> 00:12:00,399
i step over this function

308
00:12:00,399 --> 00:12:02,480
i can see that all of a sudden the

309
00:12:02,480 --> 00:12:05,680
parameter is id but the semicolon is not

310
00:12:05,680 --> 00:12:08,639
there so it's nothing strange that it

311
00:12:08,639 --> 00:12:12,320
only prints the id string

312
00:12:12,320 --> 00:12:13,279
so

313
00:12:13,279 --> 00:12:15,120
what i would like to do is now step into

314
00:12:15,120 --> 00:12:17,440
the filter malicious function to see

315
00:12:17,440 --> 00:12:18,720
what this one

316
00:12:18,720 --> 00:12:21,200
does and we see that it checks if

317
00:12:21,200 --> 00:12:23,760
ampersands are in our payload but they

318
00:12:23,760 --> 00:12:24,720
are not

319
00:12:24,720 --> 00:12:27,200
and then it checks if

320
00:12:27,200 --> 00:12:29,440
the semicolons are and in this case

321
00:12:29,440 --> 00:12:31,279
there are and it's a while loop that

322
00:12:31,279 --> 00:12:33,360
removes all of them

323
00:12:33,360 --> 00:12:35,600
so if we step over this we see that we

324
00:12:35,600 --> 00:12:36,800
indeed

325
00:12:36,800 --> 00:12:38,480
step into this block

326
00:12:38,480 --> 00:12:39,360
and

327
00:12:39,360 --> 00:12:41,760
the semicolon is removed from the

328
00:12:41,760 --> 00:12:43,360
payload

329
00:12:43,360 --> 00:12:44,160
so

330
00:12:44,160 --> 00:12:46,320
we need to find a payload that also

331
00:12:46,320 --> 00:12:49,120
doesn't use the semicolon and this is

332
00:12:49,120 --> 00:12:50,639
the one that

333
00:12:50,639 --> 00:12:53,440
i could use with the pipe and right now

334
00:12:53,440 --> 00:12:55,360
i will continue the execution without

335
00:12:55,360 --> 00:12:56,800
stepping into

336
00:12:56,800 --> 00:12:58,240
and finally

337
00:12:58,240 --> 00:13:01,040
we can see that the payload worked

338
00:13:01,040 --> 00:13:05,639
because the id command was executed

339
00:13:07,839 --> 00:13:08,560
and

340
00:13:08,560 --> 00:13:10,959
important thing is that

341
00:13:10,959 --> 00:13:12,639
in this case this program didn't take

342
00:13:12,639 --> 00:13:14,880
any arguments it didn't require any

343
00:13:14,880 --> 00:13:17,040
libraries environment variables nothing

344
00:13:17,040 --> 00:13:18,399
like this

345
00:13:18,399 --> 00:13:20,480
and so i could just

346
00:13:20,480 --> 00:13:22,880
debug python file and it worked because

347
00:13:22,880 --> 00:13:24,480
it it executed

348
00:13:24,480 --> 00:13:26,880
the comment without any arguments

349
00:13:26,880 --> 00:13:27,680
but

350
00:13:27,680 --> 00:13:29,120
more often

351
00:13:29,120 --> 00:13:31,440
when testing any more complex

352
00:13:31,440 --> 00:13:33,600
application you will need

353
00:13:33,600 --> 00:13:35,920
to either configure some arguments some

354
00:13:35,920 --> 00:13:38,160
parameters environment variables things

355
00:13:38,160 --> 00:13:39,760
like that

356
00:13:39,760 --> 00:13:43,040
and for this in vs code you will need a

357
00:13:43,040 --> 00:13:46,560
launch.json file and in the left hand

358
00:13:46,560 --> 00:13:49,440
side menu if i choose run in debug

359
00:13:49,440 --> 00:13:51,760
i see that i have no configuration and

360
00:13:51,760 --> 00:13:52,480
it

361
00:13:52,480 --> 00:13:55,519
allows me to create a launch.json file

362
00:13:55,519 --> 00:13:58,240
so i i do this i choose the first option

363
00:13:58,240 --> 00:14:00,839
a python file there are also

364
00:14:00,839 --> 00:14:02,560
pre-configured

365
00:14:02,560 --> 00:14:03,839
files for

366
00:14:03,839 --> 00:14:06,160
frameworks like django or flask but in

367
00:14:06,160 --> 00:14:08,959
this case it's just a python file

368
00:14:08,959 --> 00:14:11,120
and it looks like this

369
00:14:11,120 --> 00:14:14,160
it generates the the program and

370
00:14:14,160 --> 00:14:16,000
i am able and i will show you that in a

371
00:14:16,000 --> 00:14:18,800
few slides i am able to configure it for

372
00:14:18,800 --> 00:14:20,959
example and

373
00:14:20,959 --> 00:14:24,480
environment variables so

374
00:14:24,480 --> 00:14:26,000
we'll jump to this

375
00:14:26,000 --> 00:14:29,600
in a second for now let's come back to

376
00:14:29,600 --> 00:14:32,639
to the presentation

377
00:14:33,199 --> 00:14:35,439
so

378
00:14:35,680 --> 00:14:38,079
this is the comparison of

379
00:14:38,079 --> 00:14:40,959
different ways to approach testing open

380
00:14:40,959 --> 00:14:43,760
source application the first one the

381
00:14:43,760 --> 00:14:44,959
most

382
00:14:44,959 --> 00:14:47,120
common i think is just analyzing the

383
00:14:47,120 --> 00:14:49,199
source code statically importantly i'm

384
00:14:49,199 --> 00:14:51,600
not talking here about using any tools

385
00:14:51,600 --> 00:14:54,320
i'm just talking about a manual source

386
00:14:54,320 --> 00:14:57,040
code uh you're manually working with

387
00:14:57,040 --> 00:14:59,760
with application then we have source

388
00:14:59,760 --> 00:15:01,360
code access to

389
00:15:01,360 --> 00:15:03,680
so static code analysis is the easiest

390
00:15:03,680 --> 00:15:06,160
one to start because you just need the

391
00:15:06,160 --> 00:15:08,880
code and you can browse it straight away

392
00:15:08,880 --> 00:15:11,440
then the next step a little bit harder

393
00:15:11,440 --> 00:15:13,519
is running the application then you need

394
00:15:13,519 --> 00:15:15,839
to maybe install libraries set up the

395
00:15:15,839 --> 00:15:18,079
environment

396
00:15:18,079 --> 00:15:20,160
if you are lucky if the application is

397
00:15:20,160 --> 00:15:22,000
available as a docker image because then

398
00:15:22,000 --> 00:15:24,880
you can usually run it with a single

399
00:15:24,880 --> 00:15:28,959
command and then the most advanced i

400
00:15:28,959 --> 00:15:30,320
would say

401
00:15:30,320 --> 00:15:32,639
way to test it is with the debugging

402
00:15:32,639 --> 00:15:34,560
setup which is what i was just showing

403
00:15:34,560 --> 00:15:38,480
you so it's running the application plus

404
00:15:38,480 --> 00:15:41,199
dynamically analyzing the code and in my

405
00:15:41,199 --> 00:15:43,440
opinion it is the most effective way to

406
00:15:43,440 --> 00:15:46,639
test applications because it combines

407
00:15:46,639 --> 00:15:47,600
the

408
00:15:47,600 --> 00:15:50,000
pros of static code analysis and running

409
00:15:50,000 --> 00:15:53,600
the application and i think that

410
00:15:53,600 --> 00:15:54,480
it's

411
00:15:54,480 --> 00:15:56,880
better than static code analysis because

412
00:15:56,880 --> 00:15:59,839
when you're doing that you need to first

413
00:15:59,839 --> 00:16:02,240
know what the functions are doing

414
00:16:02,240 --> 00:16:04,959
uh you also need to like remember the

415
00:16:04,959 --> 00:16:06,639
the call stack in your head you need to

416
00:16:06,639 --> 00:16:08,880
remember where you are and and what will

417
00:16:08,880 --> 00:16:10,720
this code do

418
00:16:10,720 --> 00:16:13,920
and i feel like static code analysis

419
00:16:13,920 --> 00:16:16,399
requires more knowledge of the language

420
00:16:16,399 --> 00:16:18,800
you're auditing than debugging the code

421
00:16:18,800 --> 00:16:20,800
because when debugging the code

422
00:16:20,800 --> 00:16:22,000
you don't need to guess what the

423
00:16:22,000 --> 00:16:24,320
function is doing you can just step into

424
00:16:24,320 --> 00:16:26,560
it or step over the function and you

425
00:16:26,560 --> 00:16:28,800
will see the result

426
00:16:28,800 --> 00:16:30,959
i'm answering this because people often

427
00:16:30,959 --> 00:16:33,360
ask me do i need to know the programming

428
00:16:33,360 --> 00:16:35,120
language to

429
00:16:35,120 --> 00:16:37,600
either manually review the source code

430
00:16:37,600 --> 00:16:40,480
or to debug the source code and i i

431
00:16:40,480 --> 00:16:42,959
think that for both of these you need to

432
00:16:42,959 --> 00:16:45,839
understand some programming language

433
00:16:45,839 --> 00:16:48,399
one is usually enough and then you can

434
00:16:48,399 --> 00:16:50,639
review the source code of other ones but

435
00:16:50,639 --> 00:16:53,680
i would note that in my opinion you need

436
00:16:53,680 --> 00:16:55,519
less of this knowledge for debugging

437
00:16:55,519 --> 00:16:57,759
than you need for static code

438
00:16:57,759 --> 00:16:59,839
analysis running the application of

439
00:16:59,839 --> 00:17:00,959
course

440
00:17:00,959 --> 00:17:03,680
does not require you to to know any code

441
00:17:03,680 --> 00:17:06,240
you just need to be able to start the

442
00:17:06,240 --> 00:17:07,839
application

443
00:17:07,839 --> 00:17:10,079
and

444
00:17:10,079 --> 00:17:12,000
usually you can also combine static code

445
00:17:12,000 --> 00:17:14,319
analysis and running the application and

446
00:17:14,319 --> 00:17:17,199
a few years ago what i would do is like

447
00:17:17,199 --> 00:17:18,959
run the application

448
00:17:18,959 --> 00:17:22,000
check the logs check the database

449
00:17:22,000 --> 00:17:23,919
maybe add some print printing some

450
00:17:23,919 --> 00:17:25,119
variables

451
00:17:25,119 --> 00:17:27,359
to see what what the values are plus

452
00:17:27,359 --> 00:17:28,799
read the code this is what i would do a

453
00:17:28,799 --> 00:17:30,880
few years ago because i thought that

454
00:17:30,880 --> 00:17:33,600
debugging is very hard it's like

455
00:17:33,600 --> 00:17:36,080
insanely complicated and i won't be able

456
00:17:36,080 --> 00:17:38,240
to do this um

457
00:17:38,240 --> 00:17:39,919
but this is really not it's it's not

458
00:17:39,919 --> 00:17:42,799
that hard as as i initially thought then

459
00:17:42,799 --> 00:17:46,080
as you may think as well so when to do

460
00:17:46,080 --> 00:17:48,400
what so even though i've said that

461
00:17:48,400 --> 00:17:51,360
debugging is the best way to to do the

462
00:17:51,360 --> 00:17:54,080
source code i reviewed or analyzed the

463
00:17:54,080 --> 00:17:55,760
application that you have access to the

464
00:17:55,760 --> 00:17:58,720
source code it also requires the most

465
00:17:58,720 --> 00:18:01,120
effort to configure so

466
00:18:01,120 --> 00:18:03,039
i would not recommend to do it every

467
00:18:03,039 --> 00:18:04,480
single time

468
00:18:04,480 --> 00:18:06,480
the source code review will be much

469
00:18:06,480 --> 00:18:08,000
better if you

470
00:18:08,000 --> 00:18:10,720
don't know how to set up the application

471
00:18:10,720 --> 00:18:12,960
which is likely

472
00:18:12,960 --> 00:18:14,640
even though it's not insanely

473
00:18:14,640 --> 00:18:17,360
complicated i also can't say that for

474
00:18:17,360 --> 00:18:19,919
every application it's easy to create

475
00:18:19,919 --> 00:18:22,880
uh to to run the application also if the

476
00:18:22,880 --> 00:18:25,360
application i'm analyzing is not complex

477
00:18:25,360 --> 00:18:28,320
it's only a few hundred lines i can get

478
00:18:28,320 --> 00:18:31,360
my head around the whole code base i may

479
00:18:31,360 --> 00:18:36,159
also not go for the static code review

480
00:18:37,280 --> 00:18:40,400
when it comes to running the application

481
00:18:40,400 --> 00:18:41,520
i think

482
00:18:41,520 --> 00:18:44,799
these days i rarely do it because

483
00:18:44,799 --> 00:18:47,600
i feel like in these three levels

484
00:18:47,600 --> 00:18:50,080
the effort between statically reviewing

485
00:18:50,080 --> 00:18:52,000
the source code and running the

486
00:18:52,000 --> 00:18:54,400
application is quite big you know

487
00:18:54,400 --> 00:18:56,559
installing the libraries there are

488
00:18:56,559 --> 00:18:59,679
always some problems and personally i am

489
00:18:59,679 --> 00:19:02,160
a problem solver mentality but it

490
00:19:02,160 --> 00:19:04,640
somehow does not apply to this kind of

491
00:19:04,640 --> 00:19:06,960
problems and i absolutely hate finding

492
00:19:06,960 --> 00:19:08,720
with machines when i need to install

493
00:19:08,720 --> 00:19:11,039
something and i feel like for running

494
00:19:11,039 --> 00:19:12,480
the application

495
00:19:12,480 --> 00:19:15,600
the effort is quite big but then the

496
00:19:15,600 --> 00:19:17,760
additional steps to add the debugging

497
00:19:17,760 --> 00:19:20,000
setup if i already have the app running

498
00:19:20,000 --> 00:19:23,280
is not that big so if i can already run

499
00:19:23,280 --> 00:19:24,400
the application

500
00:19:24,400 --> 00:19:26,880
i prefer to invest a bit more and just

501
00:19:26,880 --> 00:19:29,600
have the debugging setup which is my

502
00:19:29,600 --> 00:19:32,320
definitely go to way to analyze the

503
00:19:32,320 --> 00:19:35,360
application if i want to dive deep into

504
00:19:35,360 --> 00:19:36,559
it

505
00:19:36,559 --> 00:19:37,600
and

506
00:19:37,600 --> 00:19:40,240
earlier i spoke about the launch dot

507
00:19:40,240 --> 00:19:43,520
json file and now the practical example

508
00:19:43,520 --> 00:19:46,240
of how to do this because if there's one

509
00:19:46,240 --> 00:19:48,720
valid argument against

510
00:19:48,720 --> 00:19:49,840
debugging

511
00:19:49,840 --> 00:19:51,120
this is that

512
00:19:51,120 --> 00:19:53,840
setup might be hard as i said

513
00:19:53,840 --> 00:19:57,760
i personally hate doing setups

514
00:19:57,760 --> 00:20:00,240
so the first thing you need to do before

515
00:20:00,240 --> 00:20:02,320
you even start thinking about debugging

516
00:20:02,320 --> 00:20:04,080
is to just be able to run the

517
00:20:04,080 --> 00:20:06,559
application without without the

518
00:20:06,559 --> 00:20:08,799
debugging these are steps to install

519
00:20:08,799 --> 00:20:11,360
kibana it's the elastic search

520
00:20:11,360 --> 00:20:13,600
application doesn't really matter what

521
00:20:13,600 --> 00:20:16,000
it does these are just steps from from

522
00:20:16,000 --> 00:20:18,240
github's readme file which you have to

523
00:20:18,240 --> 00:20:20,559
take so you just clone the repository

524
00:20:20,559 --> 00:20:23,360
choose the proper version of node.js

525
00:20:23,360 --> 00:20:26,480
install yarn and then you run install

526
00:20:26,480 --> 00:20:29,120
kbn bootstrap and i have no idea what

527
00:20:29,120 --> 00:20:31,120
this command does under the hood it was

528
00:20:31,120 --> 00:20:33,360
created by the developers they know what

529
00:20:33,360 --> 00:20:35,520
it does i don't have to i'm just

530
00:20:35,520 --> 00:20:37,200
worrying for it to

531
00:20:37,200 --> 00:20:39,520
not throw any errors

532
00:20:39,520 --> 00:20:40,640
on the way

533
00:20:40,640 --> 00:20:42,799
installing those plugins and then to

534
00:20:42,799 --> 00:20:44,720
start the application

535
00:20:44,720 --> 00:20:47,039
i have to first start the database so

536
00:20:47,039 --> 00:20:48,880
this is the common tool to do this

537
00:20:48,880 --> 00:20:50,880
elasticsearch database and then starting

538
00:20:50,880 --> 00:20:54,080
kibana itself is this command yarnstart

539
00:20:54,080 --> 00:20:56,640
run examples and let's see how this

540
00:20:56,640 --> 00:20:59,520
translates to the launch.json file that

541
00:20:59,520 --> 00:21:00,960
i showed you

542
00:21:00,960 --> 00:21:03,600
earlier for the python file so this is

543
00:21:03,600 --> 00:21:05,120
the file

544
00:21:05,120 --> 00:21:06,000
these

545
00:21:06,000 --> 00:21:08,320
uh everything apart from these two lines

546
00:21:08,320 --> 00:21:09,039
but

547
00:21:09,039 --> 00:21:11,120
this this last line actually

548
00:21:11,120 --> 00:21:13,520
everything apart from that was

549
00:21:13,520 --> 00:21:16,240
generated automatically by vs code and

550
00:21:16,240 --> 00:21:19,039
when i created when i clicked create

551
00:21:19,039 --> 00:21:21,600
launch.json file

552
00:21:21,600 --> 00:21:23,760
everything that i added here is runtime

553
00:21:23,760 --> 00:21:25,280
arguments

554
00:21:25,280 --> 00:21:27,360
to just use the start command and run

555
00:21:27,360 --> 00:21:30,000
examples and that's it and right now i

556
00:21:30,000 --> 00:21:32,799
can just press f5 and debug this

557
00:21:32,799 --> 00:21:36,320
application which is uh definitely not a

558
00:21:36,320 --> 00:21:38,080
small one

559
00:21:38,080 --> 00:21:40,720
and we'll now jump into the

560
00:21:40,720 --> 00:21:43,520
the practical step-by-step explanation

561
00:21:43,520 --> 00:21:46,080
of the ssrf in smokescreen and what

562
00:21:46,080 --> 00:21:49,840
smokestream even is it's a proxy it sits

563
00:21:49,840 --> 00:21:51,039
between

564
00:21:51,039 --> 00:21:53,520
the stripe server and the public

565
00:21:53,520 --> 00:21:55,840
internet and when stripe

566
00:21:55,840 --> 00:21:57,440
who created the tool

567
00:21:57,440 --> 00:21:58,960
and open source it

568
00:21:58,960 --> 00:22:00,400
when they want to

569
00:22:00,400 --> 00:22:03,760
send a request to an url taken from the

570
00:22:03,760 --> 00:22:07,200
user which by definition is untrusted

571
00:22:07,200 --> 00:22:09,919
they don't do it directly but they go

572
00:22:09,919 --> 00:22:11,919
through smokescreen proxy they just

573
00:22:11,919 --> 00:22:14,080
connect through the proxy telling that

574
00:22:14,080 --> 00:22:16,320
they want to connect to in this case one

575
00:22:16,320 --> 00:22:18,159
two three four address and then smoke

576
00:22:18,159 --> 00:22:21,039
screen checks the list of rules that it

577
00:22:21,039 --> 00:22:24,480
has configured and sees if it should

578
00:22:24,480 --> 00:22:27,039
allow or block this address you can

579
00:22:27,039 --> 00:22:29,760
configure both allow lists block lists

580
00:22:29,760 --> 00:22:32,480
of both ip addresses and domains in this

581
00:22:32,480 --> 00:22:35,039
case it would allow such requests

582
00:22:35,039 --> 00:22:38,320
because this is pretty harmless url but

583
00:22:38,320 --> 00:22:39,760
in this case

584
00:22:39,760 --> 00:22:43,120
if i would add a url with the internal

585
00:22:43,120 --> 00:22:46,159
ip smoking would block it because

586
00:22:46,159 --> 00:22:49,360
it's basically for preventing ssrfs so

587
00:22:49,360 --> 00:22:51,600
it would not allow this address so

588
00:22:51,600 --> 00:22:54,080
smokescreen is a tool to prevent ssrfs

589
00:22:54,080 --> 00:22:56,799
it works as a proxy

590
00:22:56,799 --> 00:22:59,039
and

591
00:22:59,600 --> 00:23:00,720
the

592
00:23:00,720 --> 00:23:01,919
the setup

593
00:23:01,919 --> 00:23:04,720
that i have also relies on the extension

594
00:23:04,720 --> 00:23:07,360
for vs code this time it's go

595
00:23:07,360 --> 00:23:08,400
application

596
00:23:08,400 --> 00:23:09,840
so it's also go

597
00:23:09,840 --> 00:23:12,640
extension to vs code

598
00:23:12,640 --> 00:23:15,440
and again the same way i just opened

599
00:23:15,440 --> 00:23:16,880
this menu

600
00:23:16,880 --> 00:23:20,400
run and debug created a launch.json file

601
00:23:20,400 --> 00:23:22,880
i chose the first option

602
00:23:22,880 --> 00:23:23,600
to

603
00:23:23,600 --> 00:23:26,159
select launch package

604
00:23:26,159 --> 00:23:28,159
and this

605
00:23:28,159 --> 00:23:30,000
is the

606
00:23:30,000 --> 00:23:32,640
this is the

607
00:23:32,640 --> 00:23:35,360
file that was auto generated so

608
00:23:35,360 --> 00:23:38,000
this is what vs code created

609
00:23:38,000 --> 00:23:40,400
and this is my actual file

610
00:23:40,400 --> 00:23:42,000
uh that i'm i was testing the

611
00:23:42,000 --> 00:23:43,760
application with so there are a little

612
00:23:43,760 --> 00:23:45,360
bit more changes

613
00:23:45,360 --> 00:23:47,279
because first

614
00:23:47,279 --> 00:23:49,600
it was program file there name it means

615
00:23:49,600 --> 00:23:52,480
the currently opened file which is

616
00:23:52,480 --> 00:23:54,880
definitely a bad way don't don't do this

617
00:23:54,880 --> 00:23:56,159
because

618
00:23:56,159 --> 00:23:58,240
you will you would have to have the

619
00:23:58,240 --> 00:24:01,760
main.go file opened at all times so i

620
00:24:01,760 --> 00:24:04,559
changed the this expression to just hard

621
00:24:04,559 --> 00:24:07,760
code the main.go file

622
00:24:07,760 --> 00:24:09,919
and i also added the environment

623
00:24:09,919 --> 00:24:12,960
variable go one-on-one module on and i

624
00:24:12,960 --> 00:24:16,000
also added some arguments with my config

625
00:24:16,000 --> 00:24:19,120
the config that that i have is a deny

626
00:24:19,120 --> 00:24:22,159
list that is supposed to block requests

627
00:24:22,159 --> 00:24:25,679
sent to example.com domain

628
00:24:25,679 --> 00:24:26,640
and

629
00:24:26,640 --> 00:24:28,720
uh we'll jump to the

630
00:24:28,720 --> 00:24:31,200
to the practical example and the first

631
00:24:31,200 --> 00:24:32,880
step when you want to debug an

632
00:24:32,880 --> 00:24:35,120
application is to identify the entry

633
00:24:35,120 --> 00:24:37,039
point if it's in a web application if

634
00:24:37,039 --> 00:24:38,960
it's a web application

635
00:24:38,960 --> 00:24:41,679
usually you are looking for a router of

636
00:24:41,679 --> 00:24:44,080
a particular endpoint so

637
00:24:44,080 --> 00:24:46,320
i would just search for it using the

638
00:24:46,320 --> 00:24:49,679
endpoints name or something like this

639
00:24:49,679 --> 00:24:52,400
another way is just to to trace what

640
00:24:52,400 --> 00:24:54,960
happens or or find by a function name in

641
00:24:54,960 --> 00:24:56,159
this case

642
00:24:56,159 --> 00:24:58,480
there was a function called

643
00:24:58,480 --> 00:25:00,000
check if request should be proxied

644
00:25:00,000 --> 00:25:02,640
function which sounds like it might have

645
00:25:02,640 --> 00:25:04,400
to do something with

646
00:25:04,400 --> 00:25:06,880
filtering the traffic

647
00:25:06,880 --> 00:25:10,240
so i simply put uh and this function was

648
00:25:10,240 --> 00:25:13,760
in the smokestream.go file so

649
00:25:13,760 --> 00:25:15,840
it was pretty much the main file of this

650
00:25:15,840 --> 00:25:18,159
whole program so i put a breakpoint

651
00:25:18,159 --> 00:25:19,120
there

652
00:25:19,120 --> 00:25:19,919
and

653
00:25:19,919 --> 00:25:22,320
this is the comment that i used to to

654
00:25:22,320 --> 00:25:24,960
test so i'm basically using curl

655
00:25:24,960 --> 00:25:27,440
to try to connect to example com which

656
00:25:27,440 --> 00:25:29,360
should not be possible and i'm going

657
00:25:29,360 --> 00:25:31,919
through the proxy this smoke screen runs

658
00:25:31,919 --> 00:25:32,720
on

659
00:25:32,720 --> 00:25:36,000
address 4750

660
00:25:36,000 --> 00:25:38,880
so of course the program breaks

661
00:25:38,880 --> 00:25:40,400
in this check if request should be

662
00:25:40,400 --> 00:25:42,480
proxied function but

663
00:25:42,480 --> 00:25:44,400
it actually doesn't do

664
00:25:44,400 --> 00:25:46,640
the domain comparisons that i'm caring

665
00:25:46,640 --> 00:25:47,520
for

666
00:25:47,520 --> 00:25:50,880
but it calls check acls for request this

667
00:25:50,880 --> 00:25:52,960
is actually very common

668
00:25:52,960 --> 00:25:54,559
that whenever you are debugging

669
00:25:54,559 --> 00:25:57,840
something first few function calls will

670
00:25:57,840 --> 00:26:00,799
usually not have the the juicy low level

671
00:26:00,799 --> 00:26:03,840
comparisons it will be some higher level

672
00:26:03,840 --> 00:26:06,640
functions like check acls for request

673
00:26:06,640 --> 00:26:08,480
and the actual

674
00:26:08,480 --> 00:26:11,120
comparison of of domains of ip addresses

675
00:26:11,120 --> 00:26:13,919
of things like that will be a few calls

676
00:26:13,919 --> 00:26:15,440
down the line

677
00:26:15,440 --> 00:26:19,120
so i stepped into it this function

678
00:26:19,120 --> 00:26:22,240
check a sales for request has some

679
00:26:22,240 --> 00:26:24,400
some config some logging some metrics

680
00:26:24,400 --> 00:26:27,279
but it also doesn't have the juicy

681
00:26:27,279 --> 00:26:29,919
comparisons so

682
00:26:29,919 --> 00:26:32,320
but there is a function called decide

683
00:26:32,320 --> 00:26:34,720
which also does sound like something i

684
00:26:34,720 --> 00:26:36,240
would be interested in

685
00:26:36,240 --> 00:26:40,000
so i'm stepping into the decide function

686
00:26:40,000 --> 00:26:41,520
this one

687
00:26:41,520 --> 00:26:43,760
still doesn't have

688
00:26:43,760 --> 00:26:46,799
the comparisons but it does one by one

689
00:26:46,799 --> 00:26:49,279
check different sets of rules

690
00:26:49,279 --> 00:26:51,279
and the first

691
00:26:51,279 --> 00:26:53,840
set it will check is the global allow

692
00:26:53,840 --> 00:26:56,559
list which i'm not interested in here

693
00:26:56,559 --> 00:26:59,120
i'm just inspecting what is the rule

694
00:26:59,120 --> 00:27:00,240
object

695
00:27:00,240 --> 00:27:03,039
in this first step but

696
00:27:03,039 --> 00:27:06,000
i didn't like follow this

697
00:27:06,000 --> 00:27:06,880
this

698
00:27:06,880 --> 00:27:09,120
lead i just went over

699
00:27:09,120 --> 00:27:11,840
and we can see that this first

700
00:27:11,840 --> 00:27:15,039
first call to domain globs host matches

701
00:27:15,039 --> 00:27:17,039
club checks if the

702
00:27:17,039 --> 00:27:19,679
host is on the whitelist of our allow

703
00:27:19,679 --> 00:27:22,240
list of domains

704
00:27:22,240 --> 00:27:24,240
but i stepped over it because i only

705
00:27:24,240 --> 00:27:27,279
have the denial list configured

706
00:27:27,279 --> 00:27:29,360
and this is the check of of the deny

707
00:27:29,360 --> 00:27:30,240
list

708
00:27:30,240 --> 00:27:31,840
and in this case

709
00:27:31,840 --> 00:27:34,159
we can see that host matches glob

710
00:27:34,159 --> 00:27:38,240
function is called with host and dg

711
00:27:38,240 --> 00:27:41,279
variables right now i can also evaluate

712
00:27:41,279 --> 00:27:43,679
what are the host and dg

713
00:27:43,679 --> 00:27:46,000
values i can see that on the left hand

714
00:27:46,000 --> 00:27:49,120
side panel i can also evaluate it in the

715
00:27:49,120 --> 00:27:52,159
course console so let's step into the

716
00:27:52,159 --> 00:27:54,320
host matches globe function

717
00:27:54,320 --> 00:27:56,000
and this one

718
00:27:56,000 --> 00:27:58,960
finally contains the juicy comparisons

719
00:27:58,960 --> 00:28:02,000
that that i cared about and there's an

720
00:28:02,000 --> 00:28:04,080
if statement because

721
00:28:04,080 --> 00:28:07,039
the domain globe which is the rule

722
00:28:07,039 --> 00:28:10,559
specified in the smokescreen config

723
00:28:10,559 --> 00:28:12,720
it can also be a wildcard so there is a

724
00:28:12,720 --> 00:28:14,799
check if this that's a wildcard or not

725
00:28:14,799 --> 00:28:16,640
but in my case it's not it's just a

726
00:28:16,640 --> 00:28:19,679
hard-coded domain so when i step into

727
00:28:19,679 --> 00:28:20,799
this if

728
00:28:20,799 --> 00:28:23,039
we go straight to the else if and there

729
00:28:23,039 --> 00:28:26,640
is a simple equals equals comparison of

730
00:28:26,640 --> 00:28:28,880
domain globe which is the rule to the

731
00:28:28,880 --> 00:28:31,840
host which is the url that i'm trying to

732
00:28:31,840 --> 00:28:33,360
connect to

733
00:28:33,360 --> 00:28:34,799
and to me

734
00:28:34,799 --> 00:28:37,919
it immediately looked fishy because urls

735
00:28:37,919 --> 00:28:41,360
are insanely complex and having just a

736
00:28:41,360 --> 00:28:43,200
simple equals equals

737
00:28:43,200 --> 00:28:46,640
string comparison seemed like it can't

738
00:28:46,640 --> 00:28:49,120
it can never work i didn't come up with

739
00:28:49,120 --> 00:28:51,440
the solution straight away

740
00:28:51,440 --> 00:28:52,399
but

741
00:28:52,399 --> 00:28:55,840
i came to that point later in this case

742
00:28:55,840 --> 00:28:57,520
my request is denied

743
00:28:57,520 --> 00:28:59,440
we can see the 407

744
00:28:59,440 --> 00:29:02,640
response code because the host matched

745
00:29:02,640 --> 00:29:05,600
the rule in global denial list

746
00:29:05,600 --> 00:29:06,480
so

747
00:29:06,480 --> 00:29:10,480
this doesn't work but as i said urls are

748
00:29:10,480 --> 00:29:13,279
really really complex and

749
00:29:13,279 --> 00:29:14,799
in this case

750
00:29:14,799 --> 00:29:16,399
the trick that

751
00:29:16,399 --> 00:29:17,679
i could use

752
00:29:17,679 --> 00:29:19,039
is

753
00:29:19,039 --> 00:29:21,600
a trailing dot because from dns

754
00:29:21,600 --> 00:29:24,399
standpoint if you have example come with

755
00:29:24,399 --> 00:29:27,360
the dot at the end it's just an absolute

756
00:29:27,360 --> 00:29:29,679
domain name if you have example com

757
00:29:29,679 --> 00:29:31,919
without the dot it's a relative domain

758
00:29:31,919 --> 00:29:32,720
name

759
00:29:32,720 --> 00:29:35,679
in our browsers in most or probably all

760
00:29:35,679 --> 00:29:39,200
other our tools you can use both

761
00:29:39,200 --> 00:29:42,000
both ways of writing the url but in this

762
00:29:42,000 --> 00:29:44,320
case

763
00:29:44,399 --> 00:29:48,080
it wasn't exactly the same because the

764
00:29:48,080 --> 00:29:50,399
version with the dot at the end didn't

765
00:29:50,399 --> 00:29:51,760
match this

766
00:29:51,760 --> 00:29:54,000
equals equals comparison so i set a

767
00:29:54,000 --> 00:29:56,080
breakpoint inside this function so i

768
00:29:56,080 --> 00:29:57,760
don't have to step through all these

769
00:29:57,760 --> 00:30:00,480
check a cells for request and so on

770
00:30:00,480 --> 00:30:02,880
um usually in this case i would also

771
00:30:02,880 --> 00:30:04,960
deactivate the

772
00:30:04,960 --> 00:30:07,279
the outer breakpoint but in this case i

773
00:30:07,279 --> 00:30:09,760
didn't do this so i stopped in check if

774
00:30:09,760 --> 00:30:11,760
request should be proxied function

775
00:30:11,760 --> 00:30:13,679
so i had to continue the execution of

776
00:30:13,679 --> 00:30:15,760
the program until the next breakpoint

777
00:30:15,760 --> 00:30:18,320
which is inside the host matches globe

778
00:30:18,320 --> 00:30:20,240
function and we can see on the left hand

779
00:30:20,240 --> 00:30:23,200
side that host indeed has the dot at the

780
00:30:23,200 --> 00:30:24,080
end

781
00:30:24,080 --> 00:30:26,720
and domain globe does not the dot is not

782
00:30:26,720 --> 00:30:27,919
stripped

783
00:30:27,919 --> 00:30:30,240
at any way at any point

784
00:30:30,240 --> 00:30:32,640
which means that this comparison

785
00:30:32,640 --> 00:30:34,880
will not return

786
00:30:34,880 --> 00:30:36,720
true so

787
00:30:36,720 --> 00:30:39,279
according to this and the script those

788
00:30:39,279 --> 00:30:41,520
domains are not the same which means

789
00:30:41,520 --> 00:30:42,960
that

790
00:30:42,960 --> 00:30:46,080
the deny list rule will not be matched

791
00:30:46,080 --> 00:30:47,600
and

792
00:30:47,600 --> 00:30:49,440
the request should be

793
00:30:49,440 --> 00:30:51,360
allowed and

794
00:30:51,360 --> 00:30:53,520
as i continue execution of the program

795
00:30:53,520 --> 00:30:56,080
we can see in the terminal that indeed i

796
00:30:56,080 --> 00:30:57,600
have the response from

797
00:30:57,600 --> 00:30:59,919
examplecom domain which means i

798
00:30:59,919 --> 00:31:02,799
successfully bypassed the

799
00:31:02,799 --> 00:31:06,640
deny list as a result of that um

800
00:31:06,640 --> 00:31:09,360
i got one and a half thousand dollars

801
00:31:09,360 --> 00:31:11,519
from stripe and also

802
00:31:11,519 --> 00:31:14,159
uh it was assigned a cve it's the first

803
00:31:14,159 --> 00:31:16,399
cv that i got which

804
00:31:16,399 --> 00:31:18,559
to be honest didn't change anything in

805
00:31:18,559 --> 00:31:21,360
my life and as i didn't expect but it's

806
00:31:21,360 --> 00:31:22,960
something that

807
00:31:22,960 --> 00:31:24,480
at least looks

808
00:31:24,480 --> 00:31:26,159
nicely

809
00:31:26,159 --> 00:31:28,399
so what is my approach when testing for

810
00:31:28,399 --> 00:31:29,840
these bugs

811
00:31:29,840 --> 00:31:31,840
first i

812
00:31:31,840 --> 00:31:34,559
know that one of the common ways to to

813
00:31:34,559 --> 00:31:36,480
do the source code review is to just

814
00:31:36,480 --> 00:31:38,240
look for dangerous functions for

815
00:31:38,240 --> 00:31:40,640
functions like eval exec

816
00:31:40,640 --> 00:31:42,559
and things like that looking to catch

817
00:31:42,559 --> 00:31:45,039
the low hanging fruit personally i

818
00:31:45,039 --> 00:31:47,600
didn't do this the reason is that

819
00:31:47,600 --> 00:31:49,600
i'm spending most of my time at the

820
00:31:49,600 --> 00:31:51,360
moment on public programs for from

821
00:31:51,360 --> 00:31:52,640
hackerone

822
00:31:52,640 --> 00:31:55,039
and i'm not

823
00:31:55,039 --> 00:31:57,679
deluding myself that i will just find a

824
00:31:57,679 --> 00:32:00,720
simple eval call and i will find an rce

825
00:32:00,720 --> 00:32:03,360
this way i am however using two tools

826
00:32:03,360 --> 00:32:05,279
that i hope that would

827
00:32:05,279 --> 00:32:06,240
um

828
00:32:06,240 --> 00:32:08,720
catch those things for me if somehow

829
00:32:08,720 --> 00:32:11,440
they happened it's called ql

830
00:32:11,440 --> 00:32:14,320
which is which i use through lgtm

831
00:32:14,320 --> 00:32:16,320
website which which is a very good

832
00:32:16,320 --> 00:32:17,919
scanner it has

833
00:32:17,919 --> 00:32:20,080
a really nice findings and often gives

834
00:32:20,080 --> 00:32:22,399
me some leads as to what should i look

835
00:32:22,399 --> 00:32:24,799
for in the application and the other is

836
00:32:24,799 --> 00:32:26,240
sam grab which is a little less

837
00:32:26,240 --> 00:32:29,200
sophisticated it doesn't mean it's worse

838
00:32:29,200 --> 00:32:31,760
and i hope these tools would catch the

839
00:32:31,760 --> 00:32:34,320
low hanging fruit for me

840
00:32:34,320 --> 00:32:36,000
but what i do is

841
00:32:36,000 --> 00:32:38,320
i just start the test like i would do a

842
00:32:38,320 --> 00:32:40,080
black box so

843
00:32:40,080 --> 00:32:42,720
i'm just finding a functionality that

844
00:32:42,720 --> 00:32:44,880
seems interesting

845
00:32:44,880 --> 00:32:46,720
and then i try to find the code

846
00:32:46,720 --> 00:32:48,720
responsible for doing this i set up

847
00:32:48,720 --> 00:32:51,039
breakpoints and i try to understand what

848
00:32:51,039 --> 00:32:54,320
are the parameters what are the sources

849
00:32:54,320 --> 00:32:57,519
saying more appropriately

850
00:32:57,519 --> 00:32:59,279
and then what are the things which means

851
00:32:59,279 --> 00:33:01,679
what can i do with those parameters what

852
00:33:01,679 --> 00:33:03,279
potentially can go

853
00:33:03,279 --> 00:33:06,159
wrong and that's basically what i do and

854
00:33:06,159 --> 00:33:08,480
regarding finding the place in code

855
00:33:08,480 --> 00:33:12,159
there are two tricks that usually

856
00:33:12,159 --> 00:33:13,840
work for me when i'm trying to find the

857
00:33:13,840 --> 00:33:16,960
code responsible for a functionality

858
00:33:16,960 --> 00:33:18,159
the first one

859
00:33:18,159 --> 00:33:18,880
is

860
00:33:18,880 --> 00:33:21,919
looking by the endpoint's name so when

861
00:33:21,919 --> 00:33:23,919
you are looking for let's say password

862
00:33:23,919 --> 00:33:25,919
reset functionality the code responsible

863
00:33:25,919 --> 00:33:27,200
for that

864
00:33:27,200 --> 00:33:30,399
and it's on slash api slash user slash

865
00:33:30,399 --> 00:33:32,799
reset password endpoint the reset

866
00:33:32,799 --> 00:33:34,960
password string must be somewhere in the

867
00:33:34,960 --> 00:33:37,279
source code and it's quite a unique one

868
00:33:37,279 --> 00:33:39,440
so what i would do is i would just look

869
00:33:39,440 --> 00:33:41,360
for this string throughout the whole

870
00:33:41,360 --> 00:33:43,919
code codebase and somewhere

871
00:33:43,919 --> 00:33:46,159
would be the code that says that this is

872
00:33:46,159 --> 00:33:48,320
the code that will handle

873
00:33:48,320 --> 00:33:51,840
a request sent to this endpoint and it

874
00:33:51,840 --> 00:33:53,519
works i would say in

875
00:33:53,519 --> 00:33:55,519
eighty percent of the time

876
00:33:55,519 --> 00:33:58,399
when testing and a web application the

877
00:33:58,399 --> 00:34:00,640
other one which also

878
00:34:00,640 --> 00:34:02,880
is quite reliable is looking by error

879
00:34:02,880 --> 00:34:05,039
messages so when you have an error

880
00:34:05,039 --> 00:34:07,360
message maybe in the browser maybe in

881
00:34:07,360 --> 00:34:09,359
the javascript console

882
00:34:09,359 --> 00:34:10,879
maybe

883
00:34:10,879 --> 00:34:12,719
in server logs which you also have

884
00:34:12,719 --> 00:34:13,760
access to

885
00:34:13,760 --> 00:34:16,639
the part of this error also has to be

886
00:34:16,639 --> 00:34:19,119
somewhere in the source code as a string

887
00:34:19,119 --> 00:34:20,399
of course

888
00:34:20,399 --> 00:34:21,359
so

889
00:34:21,359 --> 00:34:24,159
if you have an error just look for

890
00:34:24,159 --> 00:34:26,560
for part of this error throughout the

891
00:34:26,560 --> 00:34:29,520
code i i just use vs code search

892
00:34:29,520 --> 00:34:31,760
functionality to look for these things

893
00:34:31,760 --> 00:34:33,040
and it works

894
00:34:33,040 --> 00:34:34,879
quite well

895
00:34:34,879 --> 00:34:36,560
and

896
00:34:36,560 --> 00:34:38,800
remember that part of the error message

897
00:34:38,800 --> 00:34:40,639
will be some will be parameter

898
00:34:40,639 --> 00:34:42,719
parameterized will will contain

899
00:34:42,719 --> 00:34:44,079
parameters

900
00:34:44,079 --> 00:34:47,599
um so you need to like cut out to the

901
00:34:47,599 --> 00:34:49,760
to the part that doesn't have any

902
00:34:49,760 --> 00:34:51,839
parameters

903
00:34:51,839 --> 00:34:53,679
and where to start it's also a very

904
00:34:53,679 --> 00:34:56,000
common question that i get asked quite a

905
00:34:56,000 --> 00:34:58,560
lot and i recommend

906
00:34:58,560 --> 00:35:00,880
starting reviewing the source code with

907
00:35:00,880 --> 00:35:03,839
ctfs why because first

908
00:35:03,839 --> 00:35:06,560
those code bases are usually quite small

909
00:35:06,560 --> 00:35:08,079
i of course mean

910
00:35:08,079 --> 00:35:10,480
web category challenges that have the

911
00:35:10,480 --> 00:35:12,960
source code available these usually

912
00:35:12,960 --> 00:35:15,359
contain only a few hundred lines of code

913
00:35:15,359 --> 00:35:18,240
like 200 300 lines of code

914
00:35:18,240 --> 00:35:20,880
so it's not overwhelming

915
00:35:20,880 --> 00:35:23,440
as let's say a big

916
00:35:23,440 --> 00:35:24,640
enterprise

917
00:35:24,640 --> 00:35:26,240
great product

918
00:35:26,240 --> 00:35:29,200
so they are quite small and also and

919
00:35:29,200 --> 00:35:30,880
they are available you have instructions

920
00:35:30,880 --> 00:35:32,720
how to run them

921
00:35:32,720 --> 00:35:34,800
so that's that's what i recommend for

922
00:35:34,800 --> 00:35:36,800
anyone who asks me where to start

923
00:35:36,800 --> 00:35:38,880
reviewing code or

924
00:35:38,880 --> 00:35:40,400
debugging the code and there's a

925
00:35:40,400 --> 00:35:42,320
ctftime.org

926
00:35:42,320 --> 00:35:46,240
website which is uh

927
00:35:46,240 --> 00:35:49,359
has all the ctfs that that are happening

928
00:35:49,359 --> 00:35:51,280
right now uh

929
00:35:51,280 --> 00:35:53,920
right now actually there is a namco cdf

930
00:35:53,920 --> 00:35:56,480
going on i'm not sure if

931
00:35:56,480 --> 00:35:58,320
the source code is available for the

932
00:35:58,320 --> 00:36:01,040
tasks but if it is i definitely

933
00:36:01,040 --> 00:36:04,160
encourage you to check that

934
00:36:04,160 --> 00:36:06,160
and that's it for this presentation

935
00:36:06,160 --> 00:36:08,400
thank you very much for sticking with me

936
00:36:08,400 --> 00:36:11,359
and i hope that for at least some of you

937
00:36:11,359 --> 00:36:13,839
i really clear that debugging is not

938
00:36:13,839 --> 00:36:17,280
that hard but it can have a really great

939
00:36:17,280 --> 00:36:19,280
impact on your methodology and i hope

940
00:36:19,280 --> 00:36:21,760
that some of you will want to know more

941
00:36:21,760 --> 00:36:22,960
about it and

942
00:36:22,960 --> 00:36:26,480
incorporate this in your workflow uh if

943
00:36:26,480 --> 00:36:28,400
you want to access slides from this

944
00:36:28,400 --> 00:36:30,640
presentation here is the link bury the

945
00:36:30,640 --> 00:36:34,720
dev slash dvd dot dash slides

946
00:36:34,720 --> 00:36:35,920
uh

947
00:36:35,920 --> 00:36:37,839
here are my media those are clickable

948
00:36:37,839 --> 00:36:40,400
links which you can see if you can

949
00:36:40,400 --> 00:36:41,920
open the presentation

950
00:36:41,920 --> 00:36:44,359
if you just want to open url write

951
00:36:44,359 --> 00:36:46,640
bbre.dev and there are links to all my

952
00:36:46,640 --> 00:36:48,880
social media that i have

953
00:36:48,880 --> 00:36:51,599
and i also prepared a survey

954
00:36:51,599 --> 00:36:53,599
about this presentation this is my first

955
00:36:53,599 --> 00:36:55,599
time speaking at the hamcon and i would

956
00:36:55,599 --> 00:36:57,680
be very grateful if you fill this out

957
00:36:57,680 --> 00:37:00,720
for me with a feedback about this talk

958
00:37:00,720 --> 00:37:02,960
that's it for now i hope that you

959
00:37:02,960 --> 00:37:04,400
learned something from this talk and

960
00:37:04,400 --> 00:37:06,560
maybe you will start debugging your

961
00:37:06,560 --> 00:37:08,800
source code once again thank you for

962
00:37:08,800 --> 00:37:11,800
today

