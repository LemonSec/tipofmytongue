1
00:00:00,640 --> 00:00:02,720
hi everyone welcome to my presentation

2
00:00:02,720 --> 00:00:05,359
today here at nahang khan 2022 my name

3
00:00:05,359 --> 00:00:06,960
is shabam shah and today i'll be

4
00:00:06,960 --> 00:00:08,559
presenting about finding zero days in

5
00:00:08,559 --> 00:00:10,880
enterprise software i'm the co-founder

6
00:00:10,880 --> 00:00:13,200
and cto of asset note an attack service

7
00:00:13,200 --> 00:00:15,360
management platform we often find

8
00:00:15,360 --> 00:00:17,039
vulnerabilities in enterprise software

9
00:00:17,039 --> 00:00:19,279
for our customers as well as generally

10
00:00:19,279 --> 00:00:21,279
for the wider security of software

11
00:00:21,279 --> 00:00:23,840
inventors

12
00:00:24,320 --> 00:00:25,840
the first piece of software i'll be

13
00:00:25,840 --> 00:00:28,080
talking about today is hcl digital

14
00:00:28,080 --> 00:00:30,560
experience it's also known as ibm

15
00:00:30,560 --> 00:00:32,640
websphere portal it's a piece of

16
00:00:32,640 --> 00:00:34,880
software that's written in java and runs

17
00:00:34,880 --> 00:00:38,160
on ibm websphere server

18
00:00:38,160 --> 00:00:40,719
it's used by enterprises

19
00:00:40,719 --> 00:00:42,480
and is a very flexible content

20
00:00:42,480 --> 00:00:44,559
management system there's around four

21
00:00:44,559 --> 00:00:46,399
and a half thousand instances on the

22
00:00:46,399 --> 00:00:48,320
internet and it's self-hosted as i said

23
00:00:48,320 --> 00:00:51,680
earlier on ibm websphere server

24
00:00:51,680 --> 00:00:53,360
it's pretty it's got pretty widespread

25
00:00:53,360 --> 00:00:55,520
usage amongst the fortune 500 and other

26
00:00:55,520 --> 00:00:58,480
companies running bug bounties

27
00:00:58,480 --> 00:01:01,120
so how do you get a copy of it

28
00:01:01,120 --> 00:01:03,440
so it's not that difficult actually

29
00:01:03,440 --> 00:01:04,720
whenever you're looking for enterprise

30
00:01:04,720 --> 00:01:07,040
software one of the key things i can

31
00:01:07,040 --> 00:01:08,240
tell you to do

32
00:01:08,240 --> 00:01:09,920
is to look for it on

33
00:01:09,920 --> 00:01:12,320
public services like docker hub docker

34
00:01:12,320 --> 00:01:14,159
hub often has copies of enterprise

35
00:01:14,159 --> 00:01:15,600
software that

36
00:01:15,600 --> 00:01:17,280
either someone has pushed as they were

37
00:01:17,280 --> 00:01:19,520
doing some sort of development or even

38
00:01:19,520 --> 00:01:20,960
officially has been pushed by the

39
00:01:20,960 --> 00:01:22,080
company

40
00:01:22,080 --> 00:01:24,080
in this scenario ibm have pushed a

41
00:01:24,080 --> 00:01:25,680
version of websphere portal at some

42
00:01:25,680 --> 00:01:27,680
stage that we can download locally and

43
00:01:27,680 --> 00:01:30,000
start running on our instance

44
00:01:30,000 --> 00:01:32,240
this isn't always the case these days a

45
00:01:32,240 --> 00:01:33,920
lot of enterprise software is locked up

46
00:01:33,920 --> 00:01:36,240
behind sales processes and sometimes it

47
00:01:36,240 --> 00:01:37,920
can be quite tricky to get access to

48
00:01:37,920 --> 00:01:39,360
enterprise software

49
00:01:39,360 --> 00:01:41,040
thankfully for websphere it wasn't too

50
00:01:41,040 --> 00:01:42,799
difficult and we're able to get a local

51
00:01:42,799 --> 00:01:45,840
instance running quite quickly

52
00:01:45,840 --> 00:01:47,680
the next thing is

53
00:01:47,680 --> 00:01:50,079
decompiling the jar files now this isn't

54
00:01:50,079 --> 00:01:51,920
the same for every enterprise software

55
00:01:51,920 --> 00:01:54,000
but we realized that websphere portal is

56
00:01:54,000 --> 00:01:56,399
written in java and ultimately it's

57
00:01:56,399 --> 00:01:58,079
deployed in a similar way to how you

58
00:01:58,079 --> 00:01:59,520
deploy web applications through

59
00:01:59,520 --> 00:02:01,840
something like tomcat except on web app

60
00:02:01,840 --> 00:02:04,320
and websphere application server so what

61
00:02:04,320 --> 00:02:06,399
we do is we ultimately find the location

62
00:02:06,399 --> 00:02:08,878
of all the jar files and we

63
00:02:08,878 --> 00:02:11,200
compress them into a tar file we get

64
00:02:11,200 --> 00:02:13,360
that onto our local system and then we

65
00:02:13,360 --> 00:02:15,360
use our favorite decompiler to decompile

66
00:02:15,360 --> 00:02:17,760
all the jar files in this scenario i use

67
00:02:17,760 --> 00:02:20,000
presion decompiler but ultimately you

68
00:02:20,000 --> 00:02:22,480
can use anything you want like jdcli or

69
00:02:22,480 --> 00:02:24,480
jd gui

70
00:02:24,480 --> 00:02:27,280
this will end up with a bunch of source

71
00:02:27,280 --> 00:02:29,760
code that you can start auditing

72
00:02:29,760 --> 00:02:31,440
this is an easy way to get to a point

73
00:02:31,440 --> 00:02:33,760
where you can start auditing source code

74
00:02:33,760 --> 00:02:35,599
immediately but before you start

75
00:02:35,599 --> 00:02:37,200
auditing the source code what i would

76
00:02:37,200 --> 00:02:38,879
recommend is mapping out the attack

77
00:02:38,879 --> 00:02:40,959
surface

78
00:02:40,959 --> 00:02:42,959
so to find the attack surface

79
00:02:42,959 --> 00:02:45,519
we can run this command which will

80
00:02:45,519 --> 00:02:47,519
return all of the different mappings for

81
00:02:47,519 --> 00:02:48,959
this application

82
00:02:48,959 --> 00:02:50,800
obviously this is specific to this

83
00:02:50,800 --> 00:02:52,160
application

84
00:02:52,160 --> 00:02:54,319
because it's in uh it's using websphere

85
00:02:54,319 --> 00:02:57,440
application server and it's mapped in

86
00:02:57,440 --> 00:02:58,800
this way

87
00:02:58,800 --> 00:03:00,480
each enterprise application is going to

88
00:03:00,480 --> 00:03:02,239
have a different way of doing routing

89
00:03:02,239 --> 00:03:04,239
and mapping and you need to determine

90
00:03:04,239 --> 00:03:06,239
that before you can find what to run to

91
00:03:06,239 --> 00:03:08,959
get the exact details you're looking for

92
00:03:08,959 --> 00:03:11,200
in this scenario we can see that there's

93
00:03:11,200 --> 00:03:13,599
quite a few mappings available and

94
00:03:13,599 --> 00:03:15,120
there's a lot of attack surface for us

95
00:03:15,120 --> 00:03:16,319
to go through

96
00:03:16,319 --> 00:03:18,319
but as we started to progress down this

97
00:03:18,319 --> 00:03:20,480
list what we ended up finding was this

98
00:03:20,480 --> 00:03:22,560
really interesting file

99
00:03:22,560 --> 00:03:23,799
called

100
00:03:23,799 --> 00:03:25,360
proxy.config.xml

101
00:03:25,360 --> 00:03:27,360
and it was really surprising because

102
00:03:27,360 --> 00:03:30,159
when we found this file uh we saw that

103
00:03:30,159 --> 00:03:32,159
there are a number of paths that were

104
00:03:32,159 --> 00:03:34,799
defined and there were also three urls

105
00:03:34,799 --> 00:03:36,319
that were whitelisted

106
00:03:36,319 --> 00:03:39,319
www.ibm.com

107
00:03:40,040 --> 00:03:44,400
www.03.ibm.com and redbooks.ibm.com

108
00:03:44,400 --> 00:03:46,400
immediately this this sparked our

109
00:03:46,400 --> 00:03:49,280
curiosity we thought to ourselves okay

110
00:03:49,280 --> 00:03:51,040
this seems like there's some sort of

111
00:03:51,040 --> 00:03:52,799
outbound proxy here

112
00:03:52,799 --> 00:03:55,200
and it seems like these three urls are

113
00:03:55,200 --> 00:03:56,480
whitelisted

114
00:03:56,480 --> 00:03:57,840
some of the questions that we thought

115
00:03:57,840 --> 00:04:00,319
about at the time were is this one

116
00:04:00,319 --> 00:04:03,040
protected by authentication and two

117
00:04:03,040 --> 00:04:05,760
is there any sort of uh

118
00:04:05,760 --> 00:04:08,080
support for something like redirects

119
00:04:08,080 --> 00:04:09,840
because even if there's a policy url

120
00:04:09,840 --> 00:04:11,439
here if it supports redirects we might

121
00:04:11,439 --> 00:04:15,560
be able to bypass these policies

122
00:04:15,840 --> 00:04:18,238
one of the hard things about mapping

123
00:04:18,238 --> 00:04:20,000
things when it comes from looking at the

124
00:04:20,000 --> 00:04:22,240
mappings that we found earlier back to

125
00:04:22,240 --> 00:04:23,919
endpoints on the system on the

126
00:04:23,919 --> 00:04:25,040
application

127
00:04:25,040 --> 00:04:26,960
is that that is the difficult part

128
00:04:26,960 --> 00:04:29,199
sometimes knowing that there's a mapping

129
00:04:29,199 --> 00:04:31,040
available isn't enough you need to be

130
00:04:31,040 --> 00:04:32,720
able to know where you can hit the

131
00:04:32,720 --> 00:04:34,720
application to reach that mapping and

132
00:04:34,720 --> 00:04:36,400
that piece of code

133
00:04:36,400 --> 00:04:39,040
so this one was pretty easy it was um it

134
00:04:39,040 --> 00:04:41,840
was deployed under wps so we found that

135
00:04:41,840 --> 00:04:45,040
those wps proxy my proxy common proxy

136
00:04:45,040 --> 00:04:46,400
and so on

137
00:04:46,400 --> 00:04:48,400
but the the proxy config file says that

138
00:04:48,400 --> 00:04:50,840
we can only access ibm.com and

139
00:04:50,840 --> 00:04:52,720
redbooks.ibm.com how are we going to

140
00:04:52,720 --> 00:04:55,680
turn this into a full read ssrf

141
00:04:55,680 --> 00:04:58,240
well this is where the magic happens

142
00:04:58,240 --> 00:04:59,880
we realized that

143
00:04:59,880 --> 00:05:02,240
redbooks.ibm.com runs a software called

144
00:05:02,240 --> 00:05:05,039
lotus domino to deliver content to users

145
00:05:05,039 --> 00:05:07,440
if we achieved a url redirect on this

146
00:05:07,440 --> 00:05:10,320
subdomain we'll be able to achieve

147
00:05:10,320 --> 00:05:13,199
ssrf on arbitrary hosts and after

148
00:05:13,199 --> 00:05:15,360
researching the software lotus domino we

149
00:05:15,360 --> 00:05:16,880
realized that there was some pretty old

150
00:05:16,880 --> 00:05:18,400
documentation around the sign out

151
00:05:18,400 --> 00:05:19,360
process

152
00:05:19,360 --> 00:05:21,120
this sign up process allowed you to

153
00:05:21,120 --> 00:05:23,280
redirect people to arbitrary locations

154
00:05:23,280 --> 00:05:25,520
after signing out

155
00:05:25,520 --> 00:05:28,000
so looking at this documentation we can

156
00:05:28,000 --> 00:05:29,919
see that there's this simple command

157
00:05:29,919 --> 00:05:31,919
that you this is there's a simple thing

158
00:05:31,919 --> 00:05:34,560
you can slap onto a url which lets you

159
00:05:34,560 --> 00:05:37,440
lets you redirect to arbitrary locations

160
00:05:37,440 --> 00:05:39,039
in this example you can see question

161
00:05:39,039 --> 00:05:42,680
mark log out and redirect to equals

162
00:05:42,680 --> 00:05:46,000
http.www.sales.com for example

163
00:05:46,000 --> 00:05:47,360
so it's actually quite straightforward

164
00:05:47,360 --> 00:05:48,800
to understand that there is this

165
00:05:48,800 --> 00:05:51,840
redirect gadget in lotus domino and we

166
00:05:51,840 --> 00:05:53,520
can combine all of these elements

167
00:05:53,520 --> 00:05:56,960
together to achieve full read ssrf

168
00:05:56,960 --> 00:05:58,639
so you can see here

169
00:05:58,639 --> 00:06:01,680
that we can reach redbooks.ibm.com

170
00:06:01,680 --> 00:06:04,240
and we can add the

171
00:06:04,240 --> 00:06:06,319
the query parameter logout and the other

172
00:06:06,319 --> 00:06:08,080
query parameter redirect to with our

173
00:06:08,080 --> 00:06:10,240
host and we can see the response from

174
00:06:10,240 --> 00:06:12,400
this web server it's redirecting to the

175
00:06:12,400 --> 00:06:14,160
location we're looking for

176
00:06:14,160 --> 00:06:16,720
so ultimately we now have a redirect

177
00:06:16,720 --> 00:06:19,199
gadget on one of the whitelisted hosts

178
00:06:19,199 --> 00:06:21,440
that this proxy config has in its

179
00:06:21,440 --> 00:06:23,039
policies

180
00:06:23,039 --> 00:06:24,560
we can we can

181
00:06:24,560 --> 00:06:26,560
pull all of this together and ultimately

182
00:06:26,560 --> 00:06:28,880
achieve full read ssrf

183
00:06:28,880 --> 00:06:30,479
so if we put it all together this is

184
00:06:30,479 --> 00:06:32,720
what our final payload looks like slash

185
00:06:32,720 --> 00:06:35,160
wps proxy

186
00:06:35,160 --> 00:06:37,199
redbooks.ibm.com and then we've got the

187
00:06:37,199 --> 00:06:39,039
log out and redirect two parameters at

188
00:06:39,039 --> 00:06:41,120
the end and ultimately we're now

189
00:06:41,120 --> 00:06:43,600
proxying to arbitrary locations on

190
00:06:43,600 --> 00:06:45,759
behalf of the web server using this

191
00:06:45,759 --> 00:06:47,680
redirect gadget

192
00:06:47,680 --> 00:06:49,919
so this one's pretty exciting because

193
00:06:49,919 --> 00:06:51,759
it's not just a straight ssrf we're

194
00:06:51,759 --> 00:06:53,840
actually using a redirect gadget to

195
00:06:53,840 --> 00:06:56,160
finally get to our location and this is

196
00:06:56,160 --> 00:06:58,080
why often open redirects are more

197
00:06:58,080 --> 00:07:00,319
valuable than most people think in

198
00:07:00,319 --> 00:07:02,000
scenarios like server-side request

199
00:07:02,000 --> 00:07:03,759
forgery and open redirect could be the

200
00:07:03,759 --> 00:07:05,520
difference between a successful

201
00:07:05,520 --> 00:07:07,759
exploitation of the ssrf versus

202
00:07:07,759 --> 00:07:10,880
unsuccessful exploitation

203
00:07:10,880 --> 00:07:12,800
the next thing we did was variant

204
00:07:12,800 --> 00:07:14,960
hunting now this is a common technique

205
00:07:14,960 --> 00:07:17,199
that vulnerability researchers do when

206
00:07:17,199 --> 00:07:19,120
they detect a vulnerability they look

207
00:07:19,120 --> 00:07:20,560
for all the different variants in the

208
00:07:20,560 --> 00:07:22,479
code base that may also have that

209
00:07:22,479 --> 00:07:23,759
vulnerability

210
00:07:23,759 --> 00:07:26,160
so we ran the command this find command

211
00:07:26,160 --> 00:07:27,840
to look at all the other proxy config

212
00:07:27,840 --> 00:07:30,080
files on the system we found a number of

213
00:07:30,080 --> 00:07:31,680
hits and we went through all of these

214
00:07:31,680 --> 00:07:33,520
systematically

215
00:07:33,520 --> 00:07:35,120
you can see here that i've highlighted

216
00:07:35,120 --> 00:07:37,039
these two hits in particular that's

217
00:07:37,039 --> 00:07:39,199
because these hits actually were the

218
00:07:39,199 --> 00:07:42,720
most impactful in my opinion

219
00:07:42,720 --> 00:07:44,960
if you take a look at the policy

220
00:07:44,960 --> 00:07:47,680
um it allows you to proxy to any url

221
00:07:47,680 --> 00:07:49,759
using all of these different methods

222
00:07:49,759 --> 00:07:52,879
this is even worse than the initial ssrf

223
00:07:52,879 --> 00:07:54,800
we found in websphere that we just went

224
00:07:54,800 --> 00:07:56,319
through with lotus

225
00:07:56,319 --> 00:07:59,120
domino

226
00:07:59,120 --> 00:08:01,840
so it's really like a super ssrf um you

227
00:08:01,840 --> 00:08:03,840
can hit this endpoint and ultimately you

228
00:08:03,840 --> 00:08:04,639
can

229
00:08:04,639 --> 00:08:07,680
send any request method and you can have

230
00:08:07,680 --> 00:08:09,680
any body you can have any headers or you

231
00:08:09,680 --> 00:08:11,440
can have these headers as well

232
00:08:11,440 --> 00:08:13,520
and ultimately you can proxy to anywhere

233
00:08:13,520 --> 00:08:15,360
on the internal network

234
00:08:15,360 --> 00:08:16,720
using this

235
00:08:16,720 --> 00:08:17,840
exploit

236
00:08:17,840 --> 00:08:20,400
so variant hunting is very powerful and

237
00:08:20,400 --> 00:08:22,000
something that i highly recommend you do

238
00:08:22,000 --> 00:08:24,000
when you are auditing enterprise web

239
00:08:24,000 --> 00:08:25,440
applications

240
00:08:25,440 --> 00:08:27,280
once you find a single vulnerability try

241
00:08:27,280 --> 00:08:29,440
and find all the different patterns and

242
00:08:29,440 --> 00:08:31,199
locations in the code base that mimic

243
00:08:31,199 --> 00:08:33,200
that vulnerability or that behavior

244
00:08:33,200 --> 00:08:34,880
because you'll often find that a mistake

245
00:08:34,880 --> 00:08:37,200
made once in code is made elsewhere as

246
00:08:37,200 --> 00:08:40,958
well or in config

247
00:08:40,958 --> 00:08:43,200
so you can see here that this ssrf works

248
00:08:43,200 --> 00:08:44,480
really well we don't even need a

249
00:08:44,480 --> 00:08:47,200
redirect gadget we can hit any endpoint

250
00:08:47,200 --> 00:08:50,080
any url and we can also have any method

251
00:08:50,080 --> 00:08:52,480
that we want in any body as well so it's

252
00:08:52,480 --> 00:08:54,880
basically a super ssrf in websphere

253
00:08:54,880 --> 00:08:57,279
portal

254
00:08:57,440 --> 00:09:00,080
the next thing is uh i did look for more

255
00:09:00,080 --> 00:09:01,839
variants and i found that there were

256
00:09:01,839 --> 00:09:03,600
some other locations in the code that

257
00:09:03,600 --> 00:09:04,640
you could

258
00:09:04,640 --> 00:09:06,800
reach this proxy functionality

259
00:09:06,800 --> 00:09:09,120
so these are some examples of how else

260
00:09:09,120 --> 00:09:11,360
you could reach this proxy functionality

261
00:09:11,360 --> 00:09:13,279
so really what it meant that you know

262
00:09:13,279 --> 00:09:15,920
waff rules weren't really that effective

263
00:09:15,920 --> 00:09:17,440
because there's so many ways to

264
00:09:17,440 --> 00:09:18,880
ultimately reach the proxying

265
00:09:18,880 --> 00:09:20,560
functionality

266
00:09:20,560 --> 00:09:22,240
it was also possible to use the redirect

267
00:09:22,240 --> 00:09:24,080
gadget in these two scenarios to achieve

268
00:09:24,080 --> 00:09:27,519
full read ssrf as well

269
00:09:27,920 --> 00:09:29,360
here's just an example of it running

270
00:09:29,360 --> 00:09:31,839
locally

271
00:09:32,320 --> 00:09:33,279
and

272
00:09:33,279 --> 00:09:36,000
another variant that we found was inside

273
00:09:36,000 --> 00:09:38,320
uh the quicker document picker

274
00:09:38,320 --> 00:09:40,800
and they had an internal proxy as well

275
00:09:40,800 --> 00:09:44,080
uh and looking at the internal proxy um

276
00:09:44,080 --> 00:09:45,760
and also the common proxy is very

277
00:09:45,760 --> 00:09:47,120
straightforward

278
00:09:47,120 --> 00:09:48,720
you could just hit these two endpoints

279
00:09:48,720 --> 00:09:52,160
and also proxy to any url any location

280
00:09:52,160 --> 00:09:53,680
one with the read write gadget and one

281
00:09:53,680 --> 00:09:55,760
without the redirect gadget

282
00:09:55,760 --> 00:09:58,399
this is again a full read ssrf pre-auth

283
00:09:58,399 --> 00:10:02,440
but it's limited to get requests

284
00:10:04,720 --> 00:10:05,600
um

285
00:10:05,600 --> 00:10:08,480
once we found the ssrf we wanted to see

286
00:10:08,480 --> 00:10:10,399
if we could chain the vulnerability to

287
00:10:10,399 --> 00:10:12,560
gain further impact and one of the

288
00:10:12,560 --> 00:10:14,560
things we realized with ibm websphere

289
00:10:14,560 --> 00:10:16,640
portal is that it has this software

290
00:10:16,640 --> 00:10:18,800
called knowledge center that's running

291
00:10:18,800 --> 00:10:20,800
on port 9043

292
00:10:20,800 --> 00:10:22,880
we thought that throughout ssrf we can

293
00:10:22,880 --> 00:10:24,640
access this port and hence this

294
00:10:24,640 --> 00:10:27,120
functionality and inside the web.xml

295
00:10:27,120 --> 00:10:29,360
file we saw this interesting route

296
00:10:29,360 --> 00:10:30,560
called

297
00:10:30,560 --> 00:10:33,200
jsonp callback filter which was that oh

298
00:10:33,200 --> 00:10:34,880
sorry it was yeah it that's the filter

299
00:10:34,880 --> 00:10:37,360
it was called api slash web feed which

300
00:10:37,360 --> 00:10:38,640
we thought could have further

301
00:10:38,640 --> 00:10:41,120
vulnerabilities inside

302
00:10:41,120 --> 00:10:43,360
so naturally we downloaded the knowledge

303
00:10:43,360 --> 00:10:46,000
center wall file and we decompiled it

304
00:10:46,000 --> 00:10:48,000
and looked at it in our source code

305
00:10:48,000 --> 00:10:49,519
looked at the source code and we found

306
00:10:49,519 --> 00:10:53,040
that it's downloading a arbitrary url

307
00:10:53,040 --> 00:10:55,600
and then it's performing

308
00:10:55,600 --> 00:10:57,440
xml

309
00:10:57,440 --> 00:10:59,839
parsing on that on the contents of that

310
00:10:59,839 --> 00:11:00,959
url

311
00:11:00,959 --> 00:11:02,800
and we thought okay this looks amazing

312
00:11:02,800 --> 00:11:05,920
this looks like we can probably get um

313
00:11:05,920 --> 00:11:09,760
xxe through this um through this gadget

314
00:11:09,760 --> 00:11:12,399
but what we ultimately found is we tried

315
00:11:12,399 --> 00:11:14,320
it on a bug bounty target and we just

316
00:11:14,320 --> 00:11:15,600
got

317
00:11:15,600 --> 00:11:17,519
it just returned forbidden and it didn't

318
00:11:17,519 --> 00:11:19,120
work even though we could hit the

319
00:11:19,120 --> 00:11:21,360
knowledge center port and the url and

320
00:11:21,360 --> 00:11:23,760
everything it just returned forbidden so

321
00:11:23,760 --> 00:11:24,880
it was a fail

322
00:11:24,880 --> 00:11:26,880
but we had to work out why it was a

323
00:11:26,880 --> 00:11:28,959
failure because everything in the code

324
00:11:28,959 --> 00:11:32,000
made it seem as if it should work

325
00:11:32,000 --> 00:11:34,160
and we realized that once we downloaded

326
00:11:34,160 --> 00:11:36,560
an even newer version of this software

327
00:11:36,560 --> 00:11:39,760
that this was basically patched

328
00:11:39,760 --> 00:11:42,079
we downloaded a different docker image

329
00:11:42,079 --> 00:11:43,600
that seemed to be a newer version of

330
00:11:43,600 --> 00:11:46,399
websphere and it was effectively patched

331
00:11:46,399 --> 00:11:49,519
because um you can see here it has a

332
00:11:49,519 --> 00:11:52,720
and add deprecated um and essentially

333
00:11:52,720 --> 00:11:54,639
returns a forbidden exception instead of

334
00:11:54,639 --> 00:11:56,560
actually doing anything

335
00:11:56,560 --> 00:11:58,560
the big lesson we learned here was make

336
00:11:58,560 --> 00:12:00,320
sure you have the latest copy of code

337
00:12:00,320 --> 00:12:02,480
before testing your vulnerabilities

338
00:12:02,480 --> 00:12:04,160
this is often something that you don't

339
00:12:04,160 --> 00:12:06,880
have access to in this scenario

340
00:12:06,880 --> 00:12:09,760
we only had sparse access to websphere

341
00:12:09,760 --> 00:12:11,519
and the copies on docker hub and things

342
00:12:11,519 --> 00:12:13,120
like that so

343
00:12:13,120 --> 00:12:14,079
i guess

344
00:12:14,079 --> 00:12:15,600
if you can always make sure you have the

345
00:12:15,600 --> 00:12:17,200
latest copy if you are looking at

346
00:12:17,200 --> 00:12:19,360
targets in the wild but in many

347
00:12:19,360 --> 00:12:20,720
scenarios i understand that it's not

348
00:12:20,720 --> 00:12:23,360
going to be possible

349
00:12:23,360 --> 00:12:25,600
we had another attempt at xxe so we

350
00:12:25,600 --> 00:12:27,360
tried um

351
00:12:27,360 --> 00:12:30,399
uh crafting a payload like this and uh

352
00:12:30,399 --> 00:12:32,880
basics defouring it and then we tried

353
00:12:32,880 --> 00:12:35,680
hitting uh this resource proxy portlet

354
00:12:35,680 --> 00:12:38,320
which takes in xml

355
00:12:38,320 --> 00:12:40,160
as a base64

356
00:12:40,160 --> 00:12:42,240
and we thought maybe we can get xxe this

357
00:12:42,240 --> 00:12:43,920
way and this was obviously found by

358
00:12:43,920 --> 00:12:46,320
auditing the source code and what we

359
00:12:46,320 --> 00:12:48,480
found was ultimately

360
00:12:48,480 --> 00:12:51,200
it was well protected against xxe

361
00:12:51,200 --> 00:12:53,600
none of the dcds were being resolved and

362
00:12:53,600 --> 00:12:55,839
we weren't able to successfully achieve

363
00:12:55,839 --> 00:12:57,760
xxe

364
00:12:57,760 --> 00:12:59,279
now one of the things is i'm talking

365
00:12:59,279 --> 00:13:00,880
about the failures here just so that you

366
00:13:00,880 --> 00:13:02,720
understand that

367
00:13:02,720 --> 00:13:05,519
source code auditing isn't always

368
00:13:05,519 --> 00:13:07,040
glamorous and you're not always going to

369
00:13:07,040 --> 00:13:08,560
find amazing vulnerabilities there's

370
00:13:08,560 --> 00:13:09,920
going to be a lot of failures along the

371
00:13:09,920 --> 00:13:11,519
way there's going to be a lot of time

372
00:13:11,519 --> 00:13:13,839
spent on testing vulnerabilities even

373
00:13:13,839 --> 00:13:16,399
when they might not account or they

374
00:13:16,399 --> 00:13:18,839
might not amount to real

375
00:13:18,839 --> 00:13:20,399
impact

376
00:13:20,399 --> 00:13:23,040
we can see here that this failure at xxc

377
00:13:23,040 --> 00:13:24,959
we can see that it's just not resolving

378
00:13:24,959 --> 00:13:27,360
any of the dtds and digging further into

379
00:13:27,360 --> 00:13:29,440
the source code we can see that they've

380
00:13:29,440 --> 00:13:31,040
explicitly

381
00:13:31,040 --> 00:13:33,200
disabled any of the dtd handling or the

382
00:13:33,200 --> 00:13:34,560
resolvers

383
00:13:34,560 --> 00:13:37,279
for external entities so ultimately it

384
00:13:37,279 --> 00:13:38,560
was something that they had already

385
00:13:38,560 --> 00:13:41,279
patched and it wasn't vulnerable to xxe

386
00:13:41,279 --> 00:13:42,880
but yeah talking about failures is

387
00:13:42,880 --> 00:13:44,639
extremely valuable

388
00:13:44,639 --> 00:13:46,240
this sort of stuff happens all the time

389
00:13:46,240 --> 00:13:47,600
on your source code auditing so don't

390
00:13:47,600 --> 00:13:49,839
feel discouraged just keep on going and

391
00:13:49,839 --> 00:13:51,839
find more vulnerabilities spend more

392
00:13:51,839 --> 00:13:53,279
time on your target you will find

393
00:13:53,279 --> 00:13:56,160
something eventually

394
00:13:56,880 --> 00:13:58,320
one of the other vulnerabilities that we

395
00:13:58,320 --> 00:14:00,639
found in websphere portal was post orth

396
00:14:00,639 --> 00:14:03,360
rce via directory traversal so there's

397
00:14:03,360 --> 00:14:04,959
this functionality to upload script

398
00:14:04,959 --> 00:14:07,360
applications and it allows you to upload

399
00:14:07,360 --> 00:14:10,160
zip files that can contain html css and

400
00:14:10,160 --> 00:14:11,360
javascript

401
00:14:11,360 --> 00:14:13,199
what's really interesting about this is

402
00:14:13,199 --> 00:14:14,839
that even though it's post

403
00:14:14,839 --> 00:14:16,720
authentication once someone does get

404
00:14:16,720 --> 00:14:18,320
authentication it's likely that they can

405
00:14:18,320 --> 00:14:19,839
get command execution through this

406
00:14:19,839 --> 00:14:21,600
technique

407
00:14:21,600 --> 00:14:23,360
so you can find it at this location that

408
00:14:23,360 --> 00:14:24,800
i've got in this slide if you're looking

409
00:14:24,800 --> 00:14:26,800
for it inside websphere

410
00:14:26,800 --> 00:14:28,959
and essentially you click this actions

411
00:14:28,959 --> 00:14:32,079
and import and you can import a zip file

412
00:14:32,079 --> 00:14:34,560
what we found was we can simply

413
00:14:34,560 --> 00:14:36,240
upload a zip file which has directory

414
00:14:36,240 --> 00:14:38,000
traversal

415
00:14:38,000 --> 00:14:40,800
inside it and it will let us upload

416
00:14:40,800 --> 00:14:42,320
files to the local system at any

417
00:14:42,320 --> 00:14:43,440
location

418
00:14:43,440 --> 00:14:45,120
so we we can use the software called

419
00:14:45,120 --> 00:14:47,199
evil arc which will construct zip files

420
00:14:47,199 --> 00:14:49,199
with directory traversal and we can

421
00:14:49,199 --> 00:14:50,880
create a file which has the following

422
00:14:50,880 --> 00:14:52,720
contents here

423
00:14:52,720 --> 00:14:55,600
this will lead to rce on reboot which

424
00:14:55,600 --> 00:14:57,440
you know isn't too impactful but if you

425
00:14:57,440 --> 00:14:58,880
are looking at this as an attack chain

426
00:14:58,880 --> 00:15:02,560
this could be useful in the attack chain

427
00:15:02,560 --> 00:15:04,240
um you might be wondering why this

428
00:15:04,240 --> 00:15:06,079
technique works like why can you put

429
00:15:06,079 --> 00:15:08,480
this file in this location and why will

430
00:15:08,480 --> 00:15:10,720
it lead to command execution

431
00:15:10,720 --> 00:15:13,440
so essentially there's this amazing um

432
00:15:13,440 --> 00:15:17,040
full disclosure um exploit details um

433
00:15:17,040 --> 00:15:18,880
where they talk about this technique

434
00:15:18,880 --> 00:15:20,399
where for whatever reason if you can

435
00:15:20,399 --> 00:15:23,120
write this file to etc sysconfig network

436
00:15:23,120 --> 00:15:24,399
scripts

437
00:15:24,399 --> 00:15:26,800
and you do a reboot um you can

438
00:15:26,800 --> 00:15:28,959
ultimately execute arbitrary commands

439
00:15:28,959 --> 00:15:30,800
based on the name attribute

440
00:15:30,800 --> 00:15:32,639
um so anything after the first blank

441
00:15:32,639 --> 00:15:34,800
space in the name attribute is executed

442
00:15:34,800 --> 00:15:37,759
as root um or as whatever users are

443
00:15:37,759 --> 00:15:39,920
executing this

444
00:15:39,920 --> 00:15:42,320
so this is an interesting rce vector

445
00:15:42,320 --> 00:15:43,920
something to remember that if you do

446
00:15:43,920 --> 00:15:46,320
find a way to upload arbitrary files to

447
00:15:46,320 --> 00:15:48,399
the system but you can't really get

448
00:15:48,399 --> 00:15:50,480
command execution this is one of the

449
00:15:50,480 --> 00:15:52,079
possible techniques to get command

450
00:15:52,079 --> 00:15:55,120
execution by arbitrary file upload like

451
00:15:55,120 --> 00:15:56,720
for example let's say you can't upload a

452
00:15:56,720 --> 00:15:58,720
shell for whatever reason

453
00:15:58,720 --> 00:16:00,880
and you can't nothing's really writable

454
00:16:00,880 --> 00:16:03,120
except some directories if you can write

455
00:16:03,120 --> 00:16:05,279
to the etc sysconfig network scripts

456
00:16:05,279 --> 00:16:07,199
directory you can likely get a shell

457
00:16:07,199 --> 00:16:11,519
anyways if on reboot at least

458
00:16:12,000 --> 00:16:13,360
here are some references around

459
00:16:13,360 --> 00:16:15,120
websphere and some of the things that i

460
00:16:15,120 --> 00:16:16,320
was looking at when i was auditing

461
00:16:16,320 --> 00:16:17,920
websphere i found all of these very

462
00:16:17,920 --> 00:16:20,079
useful if you do look at this software

463
00:16:20,079 --> 00:16:23,839
these might be useful to you as well

464
00:16:24,320 --> 00:16:26,320
and lastly here's the exploit write up

465
00:16:26,320 --> 00:16:29,120
for websphere you can find a lot more

466
00:16:29,120 --> 00:16:31,600
details about this a lot more details

467
00:16:31,600 --> 00:16:33,279
about the exact source code and things

468
00:16:33,279 --> 00:16:35,199
like that in this exploit write-up in

469
00:16:35,199 --> 00:16:37,040
the journey that that we had to go

470
00:16:37,040 --> 00:16:38,079
through in order to find these

471
00:16:38,079 --> 00:16:40,880
vulnerabilities

472
00:16:43,120 --> 00:16:45,360
the next software that uh we're gonna

473
00:16:45,360 --> 00:16:47,920
look into is solarwinds web help desk

474
00:16:47,920 --> 00:16:50,240
and we're gonna see how we can hack solo

475
00:16:50,240 --> 00:16:51,680
in web help desk which is another

476
00:16:51,680 --> 00:16:53,759
enterprise software that's used by a lot

477
00:16:53,759 --> 00:16:55,600
of large companies

478
00:16:55,600 --> 00:16:58,079
so what is solarwinds web help desk well

479
00:16:58,079 --> 00:16:59,600
it's essentially a central ticketing

480
00:16:59,600 --> 00:17:01,519
management system free enterprise it

481
00:17:01,519 --> 00:17:03,600
connects with solarwinds oreon it's used

482
00:17:03,600 --> 00:17:05,520
by medium to large enterprises schools

483
00:17:05,520 --> 00:17:07,599
government there's around 2000 instances

484
00:17:07,599 --> 00:17:10,319
of it on the internet

485
00:17:10,319 --> 00:17:11,760
one of the things i want to quickly talk

486
00:17:11,760 --> 00:17:13,839
about is removing the stigma from huge

487
00:17:13,839 --> 00:17:15,119
code bases

488
00:17:15,119 --> 00:17:17,439
so solomon's have this helpdesk product

489
00:17:17,439 --> 00:17:19,359
that is used by large enterprises and

490
00:17:19,359 --> 00:17:21,919
the code base is absolutely huge there's

491
00:17:21,919 --> 00:17:24,480
spring web objects traditional servlets

492
00:17:24,480 --> 00:17:26,240
all sorts of different things going on

493
00:17:26,240 --> 00:17:27,599
and initially when you look at this it

494
00:17:27,599 --> 00:17:29,600
can be really daunting to take a look at

495
00:17:29,600 --> 00:17:31,600
because of the scope however with some

496
00:17:31,600 --> 00:17:33,440
intelligent analysis of sources and

497
00:17:33,440 --> 00:17:35,679
syncs it starts to get easier my number

498
00:17:35,679 --> 00:17:37,280
one advice when it comes to auditing

499
00:17:37,280 --> 00:17:39,679
complex software is trying to map out as

500
00:17:39,679 --> 00:17:41,919
much of the attack surface as possible

501
00:17:41,919 --> 00:17:44,320
in forms of sources and syncs and then

502
00:17:44,320 --> 00:17:46,000
do your auditing after you understand

503
00:17:46,000 --> 00:17:48,000
this

504
00:17:48,000 --> 00:17:49,520
one of the first things we found when

505
00:17:49,520 --> 00:17:51,760
looking through the source code was this

506
00:17:51,760 --> 00:17:54,320
uh concept of hard-coded credentials we

507
00:17:54,320 --> 00:17:55,679
saw that there was some

508
00:17:55,679 --> 00:17:57,280
there was some javascript that had these

509
00:17:57,280 --> 00:17:59,200
hardcoded credentials in there and

510
00:17:59,200 --> 00:18:00,720
immediately we started searching the

511
00:18:00,720 --> 00:18:02,400
entire code base for these hard-coded

512
00:18:02,400 --> 00:18:03,760
credentials

513
00:18:03,760 --> 00:18:05,600
we found that there's actually

514
00:18:05,600 --> 00:18:07,919
production hardcoded credentials as well

515
00:18:07,919 --> 00:18:09,600
and you can see them being defined as

516
00:18:09,600 --> 00:18:11,600
constants in the source code here you

517
00:18:11,600 --> 00:18:12,960
can see that there's a login and a

518
00:18:12,960 --> 00:18:16,160
password that's defined here

519
00:18:16,160 --> 00:18:17,760
well the first thing we thought about

520
00:18:17,760 --> 00:18:19,360
was what does this let us access these

521
00:18:19,360 --> 00:18:20,640
credentials

522
00:18:20,640 --> 00:18:22,240
seem to be a big part of the spring web

523
00:18:22,240 --> 00:18:24,640
app app embedded into the software and

524
00:18:24,640 --> 00:18:25,840
there seems to be this really

525
00:18:25,840 --> 00:18:27,760
interesting controller which these

526
00:18:27,760 --> 00:18:30,400
credentials let us access over here

527
00:18:30,400 --> 00:18:33,120
surprisingly solarwinds were exposing

528
00:18:33,120 --> 00:18:35,280
endpoints that let you run arbitrary

529
00:18:35,280 --> 00:18:37,760
hibernate queries and hibernate talks

530
00:18:37,760 --> 00:18:39,360
directly to the database based off

531
00:18:39,360 --> 00:18:42,320
models explicitly defined in java

532
00:18:42,320 --> 00:18:44,880
so what we found was these credentials

533
00:18:44,880 --> 00:18:47,679
let us access a spring controller which

534
00:18:47,679 --> 00:18:50,160
let us execute arbitrary hibernate

535
00:18:50,160 --> 00:18:52,160
queries

536
00:18:52,160 --> 00:18:54,080
so this is what the spring controller

537
00:18:54,080 --> 00:18:55,679
looked like you can see that the

538
00:18:55,679 --> 00:18:58,400
endpoint was slash raw hql

539
00:18:58,400 --> 00:19:02,160
and it took in an arbitrary

540
00:19:02,160 --> 00:19:03,120
string

541
00:19:03,120 --> 00:19:06,559
that it would execute as a result

542
00:19:06,559 --> 00:19:08,880
so the get string hql result would then

543
00:19:08,880 --> 00:19:11,120
create a query using that string and it

544
00:19:11,120 --> 00:19:14,000
would get the results

545
00:19:14,000 --> 00:19:15,840
once we put it all together you can see

546
00:19:15,840 --> 00:19:18,160
that the the

547
00:19:18,160 --> 00:19:19,440
post request

548
00:19:19,440 --> 00:19:21,120
actually needed a few things for it to

549
00:19:21,120 --> 00:19:21,919
work

550
00:19:21,919 --> 00:19:23,200
and we found this through the trial and

551
00:19:23,200 --> 00:19:25,679
error but essentially it needed a csrf

552
00:19:25,679 --> 00:19:27,679
token it needed the basic auth

553
00:19:27,679 --> 00:19:29,600
credentials that we found earlier

554
00:19:29,600 --> 00:19:31,679
it needed the csrf token again in the

555
00:19:31,679 --> 00:19:34,400
cookie and very important it needed the

556
00:19:34,400 --> 00:19:36,880
content type being text plain

557
00:19:36,880 --> 00:19:39,600
and lastly in the post request the full

558
00:19:39,600 --> 00:19:41,679
hibernate query

559
00:19:41,679 --> 00:19:43,679
this took a really long time to figure

560
00:19:43,679 --> 00:19:45,200
out all of these different elements

561
00:19:45,200 --> 00:19:46,720
working backwards

562
00:19:46,720 --> 00:19:47,600
but

563
00:19:47,600 --> 00:19:49,520
one of the things that i was actually

564
00:19:49,520 --> 00:19:51,200
stuck on was the content type and it

565
00:19:51,200 --> 00:19:52,880
took me forever to realize that tech

566
00:19:52,880 --> 00:19:54,720
slash plane was what was needed to

567
00:19:54,720 --> 00:19:56,799
exploit this issue

568
00:19:56,799 --> 00:19:59,039
but ultimately it responded with an

569
00:19:59,039 --> 00:20:00,880
email address and a password hash which

570
00:20:00,880 --> 00:20:03,039
is crazy there was an endpoint that let

571
00:20:03,039 --> 00:20:05,520
you execute arbitrary hqr queries inside

572
00:20:05,520 --> 00:20:08,080
solarwinds web help desk

573
00:20:08,080 --> 00:20:10,880
and this was the vulnerability

574
00:20:10,880 --> 00:20:13,200
what's not shown in this presentation

575
00:20:13,200 --> 00:20:14,880
and something that i've kind of really

576
00:20:14,880 --> 00:20:17,440
glossed over is the amount of time that

577
00:20:17,440 --> 00:20:20,480
was spent mapping out sources and sinks

578
00:20:20,480 --> 00:20:22,720
understanding the authentication flow

579
00:20:22,720 --> 00:20:24,799
for some of the spring routes and how a

580
00:20:24,799 --> 00:20:26,320
hard-coded credential is enabled with

581
00:20:26,320 --> 00:20:27,919
this vulnerability

582
00:20:27,919 --> 00:20:30,080
numerous failed attempts at exploiting

583
00:20:30,080 --> 00:20:31,840
certain vulnerability classes in other

584
00:20:31,840 --> 00:20:34,080
areas of the code the vast amount of

585
00:20:34,080 --> 00:20:35,840
code in this code base causing auditing

586
00:20:35,840 --> 00:20:38,480
fatigue and also shouting f yeah after

587
00:20:38,480 --> 00:20:40,720
discovering the pre-orth critical bug so

588
00:20:40,720 --> 00:20:43,360
these are all things that um during the

589
00:20:43,360 --> 00:20:45,120
process of source code auditing you will

590
00:20:45,120 --> 00:20:47,280
often come across and

591
00:20:47,280 --> 00:20:48,880
don't be discouraged if it takes you a

592
00:20:48,880 --> 00:20:51,039
long time to find these critical pre-ord

593
00:20:51,039 --> 00:20:53,200
vulnerabilities but this is just an

594
00:20:53,200 --> 00:20:55,600
example of finding a vulnerability in a

595
00:20:55,600 --> 00:20:57,120
soft piece of software that's used by a

596
00:20:57,120 --> 00:21:00,080
lot of enterprises

597
00:21:00,720 --> 00:21:02,559
the impact of this was that an

598
00:21:02,559 --> 00:21:04,640
unauthenticated user could run arbitrary

599
00:21:04,640 --> 00:21:06,640
sql against solarwinds web help desk's

600
00:21:06,640 --> 00:21:09,120
internal database and it would allow

601
00:21:09,120 --> 00:21:10,799
attackers to obtain usernames and

602
00:21:10,799 --> 00:21:12,960
passwords hash password hashes from the

603
00:21:12,960 --> 00:21:15,200
database it also allowed attackers to

604
00:21:15,200 --> 00:21:17,679
insert arbitrary data into the database

605
00:21:17,679 --> 00:21:20,000
so an alternative vector is just

606
00:21:20,000 --> 00:21:21,520
replacing the password hash with one

607
00:21:21,520 --> 00:21:23,039
you've generated yourself or adding a

608
00:21:23,039 --> 00:21:24,159
new user

609
00:21:24,159 --> 00:21:26,080
but it is limited to hibernate sql

610
00:21:26,080 --> 00:21:28,320
queries and these hibernate sql queries

611
00:21:28,320 --> 00:21:29,760
will only work if there are models

612
00:21:29,760 --> 00:21:32,240
defined in java for the most part almost

613
00:21:32,240 --> 00:21:34,240
every table had a model defined in java

614
00:21:34,240 --> 00:21:36,080
for hibernate so on you could access

615
00:21:36,080 --> 00:21:38,240
almost any table and run almost any

616
00:21:38,240 --> 00:21:41,280
query you wanted to

617
00:21:41,440 --> 00:21:43,039
the exploit write-up for this issue can

618
00:21:43,039 --> 00:21:44,640
be found here you can learn a little bit

619
00:21:44,640 --> 00:21:46,240
more about the mitigations that were in

620
00:21:46,240 --> 00:21:48,799
place that prevented mass exploitation

621
00:21:48,799 --> 00:21:50,400
as well as some of the things that we

622
00:21:50,400 --> 00:21:52,400
worked out when diving deeper into the

623
00:21:52,400 --> 00:21:53,679
issue

624
00:21:53,679 --> 00:21:55,360
as much as this presentation doesn't go

625
00:21:55,360 --> 00:21:56,880
into the really deep

626
00:21:56,880 --> 00:21:58,799
analysis of the source code you will

627
00:21:58,799 --> 00:22:00,960
find that this exploit write up does and

628
00:22:00,960 --> 00:22:02,559
it should be a really valuable resource

629
00:22:02,559 --> 00:22:03,679
when you're trying to understand how

630
00:22:03,679 --> 00:22:06,000
these vulnerabilities worked or how we

631
00:22:06,000 --> 00:22:07,120
were able to discover these

632
00:22:07,120 --> 00:22:11,158
vulnerabilities in the first place

633
00:22:14,159 --> 00:22:15,919
another favorite piece of software that

634
00:22:15,919 --> 00:22:18,559
i hacked uh last year was called

635
00:22:18,559 --> 00:22:20,799
sitecore experience platform

636
00:22:20,799 --> 00:22:23,440
and um this was one of my favorite

637
00:22:23,440 --> 00:22:24,960
vulnerabilities that i found in the last

638
00:22:24,960 --> 00:22:26,480
year just because of

639
00:22:26,480 --> 00:22:28,960
one how widespread sitecore is used in

640
00:22:28,960 --> 00:22:31,200
enterprises and also how simple the

641
00:22:31,200 --> 00:22:33,120
vulnerability ended up being when it

642
00:22:33,120 --> 00:22:35,440
comes to exploitation

643
00:22:35,440 --> 00:22:37,679
and the impact it does lead to command

644
00:22:37,679 --> 00:22:39,280
execution so it was one of my most

645
00:22:39,280 --> 00:22:42,400
impactful bugs that i found as well

646
00:22:42,400 --> 00:22:44,400
what is sitecore experience platform

647
00:22:44,400 --> 00:22:46,400
well it's essentially a cms that's used

648
00:22:46,400 --> 00:22:48,559
by large enterprises government banks

649
00:22:48,559 --> 00:22:50,799
fortune 500 companies you can build a

650
00:22:50,799 --> 00:22:52,720
lot of digital experiences through

651
00:22:52,720 --> 00:22:54,320
sitecore's experience platform and

652
00:22:54,320 --> 00:22:57,039
there's around 10 000 instances or so of

653
00:22:57,039 --> 00:22:58,480
this software running on the internet

654
00:22:58,480 --> 00:23:00,880
exposed externally it's a handful of bug

655
00:23:00,880 --> 00:23:02,480
bounty programs that were affected by

656
00:23:02,480 --> 00:23:04,880
discovering bugs in the software and

657
00:23:04,880 --> 00:23:06,480
ultimately we were able to make a lot of

658
00:23:06,480 --> 00:23:07,919
money through bug bounties through this

659
00:23:07,919 --> 00:23:10,080
software but not only that a lot of our

660
00:23:10,080 --> 00:23:11,919
customers that asset also ran this

661
00:23:11,919 --> 00:23:13,679
software which was the most important

662
00:23:13,679 --> 00:23:17,200
thing for us in securing them

663
00:23:17,200 --> 00:23:19,120
so note on giving up

664
00:23:19,120 --> 00:23:21,200
and this is something that

665
00:23:21,200 --> 00:23:23,360
you know you'll often feel like doing uh

666
00:23:23,360 --> 00:23:26,159
when you're auditing large code bases is

667
00:23:26,159 --> 00:23:28,320
um you know throughout your source code

668
00:23:28,320 --> 00:23:31,039
auditing journey um you'll like want to

669
00:23:31,039 --> 00:23:33,280
give up all the time in fact when i was

670
00:23:33,280 --> 00:23:35,039
auditing sitecore's experience platform

671
00:23:35,039 --> 00:23:37,520
i almost gave up like five times it was

672
00:23:37,520 --> 00:23:39,760
so tempting to walk away and not spend

673
00:23:39,760 --> 00:23:42,480
any more time auditing this software

674
00:23:42,480 --> 00:23:44,480
ultimately not auditing the software

675
00:23:44,480 --> 00:23:46,240
costs nothing and it's something that's

676
00:23:46,240 --> 00:23:48,400
really easy to do just walking away and

677
00:23:48,400 --> 00:23:50,720
moving on to something else but you have

678
00:23:50,720 --> 00:23:52,240
to be really motivated to find these

679
00:23:52,240 --> 00:23:53,600
software vulnerabilities through source

680
00:23:53,600 --> 00:23:55,919
code auditing and when the code base is

681
00:23:55,919 --> 00:23:57,440
very large and complex this can be

682
00:23:57,440 --> 00:23:59,760
pretty difficult but my best advice is

683
00:23:59,760 --> 00:24:01,760
to take a lot of breaks so every time

684
00:24:01,760 --> 00:24:04,559
you feel fatigued take another break

685
00:24:04,559 --> 00:24:05,760
come back to the source code when you're

686
00:24:05,760 --> 00:24:08,080
feeling better and this strategy has

687
00:24:08,080 --> 00:24:09,919
worked really well for me

688
00:24:09,919 --> 00:24:12,000
um what i will find is you know i'll be

689
00:24:12,000 --> 00:24:13,520
auditing a piece of software and it

690
00:24:13,520 --> 00:24:15,440
might take me a week two weeks before i

691
00:24:15,440 --> 00:24:17,520
find critical vulnerabilities

692
00:24:17,520 --> 00:24:18,400
and

693
00:24:18,400 --> 00:24:20,559
honestly it's really tempting to just

694
00:24:20,559 --> 00:24:22,720
want to give up and the key is

695
00:24:22,720 --> 00:24:24,799
persistence the key is confidence that

696
00:24:24,799 --> 00:24:26,559
you're going to find something and just

697
00:24:26,559 --> 00:24:29,039
keeping at it and keep going without

698
00:24:29,039 --> 00:24:30,080
giving up

699
00:24:30,080 --> 00:24:32,080
so this is my note on giving up and when

700
00:24:32,080 --> 00:24:33,520
it comes to source code auditing it's

701
00:24:33,520 --> 00:24:35,919
particularly important um things will

702
00:24:35,919 --> 00:24:37,840
get better over time you will understand

703
00:24:37,840 --> 00:24:40,080
the code base better over time so just

704
00:24:40,080 --> 00:24:43,918
don't give up keep on moving forward

705
00:24:44,080 --> 00:24:46,720
the first step in auditing sitecore was

706
00:24:46,720 --> 00:24:48,799
obtaining its source code now i obtained

707
00:24:48,799 --> 00:24:50,240
the source code by looking at github

708
00:24:50,240 --> 00:24:52,240
repos um where people had posted the

709
00:24:52,240 --> 00:24:54,720
site called webroot to a github repo

710
00:24:54,720 --> 00:24:56,080
and i was able to find one that was

711
00:24:56,080 --> 00:24:57,919
relatively recent and looked like it was

712
00:24:57,919 --> 00:25:00,080
really popular version of sitecore so i

713
00:25:00,080 --> 00:25:02,080
downloaded it all to my local system and

714
00:25:02,080 --> 00:25:04,720
i decompiled all the dll files i then

715
00:25:04,720 --> 00:25:07,440
opened up the sitecore source code the

716
00:25:07,440 --> 00:25:09,679
decompile dlls as well as the site

717
00:25:09,679 --> 00:25:12,159
called deployment folder side by side in

718
00:25:12,159 --> 00:25:14,400
sublime text this was pivotal to

719
00:25:14,400 --> 00:25:16,159
understand the attack surface by looking

720
00:25:16,159 --> 00:25:18,000
at the c-sharp source code and also

721
00:25:18,000 --> 00:25:18,960
looking at the web route and

722
00:25:18,960 --> 00:25:22,159
understanding what was exposed

723
00:25:22,159 --> 00:25:23,840
again we have to map out the attack

724
00:25:23,840 --> 00:25:25,520
surface like we do with any enterprise

725
00:25:25,520 --> 00:25:27,760
software and you know sitecore is

726
00:25:27,760 --> 00:25:30,000
complex it has a lot of attack surface

727
00:25:30,000 --> 00:25:31,440
and a lot of this attack surface is

728
00:25:31,440 --> 00:25:33,200
defined in the config files located in

729
00:25:33,200 --> 00:25:35,440
the app underscore config folder

730
00:25:35,440 --> 00:25:37,679
but sitecore also has a lot of aspx and

731
00:25:37,679 --> 00:25:40,000
ashx files in the web root as well and

732
00:25:40,000 --> 00:25:41,919
inside the web.config file we find the

733
00:25:41,919 --> 00:25:44,080
following line which essentially says

734
00:25:44,080 --> 00:25:46,159
that this virtual folder

735
00:25:46,159 --> 00:25:48,320
is being mapped in the web.config file

736
00:25:48,320 --> 00:25:49,840
and anything within this virtual folder

737
00:25:49,840 --> 00:25:52,720
can be executed

738
00:25:53,520 --> 00:25:56,320
so what we can see here on the left is

739
00:25:56,320 --> 00:25:58,080
just the basic outline of the shell

740
00:25:58,080 --> 00:26:00,080
folder and what was included inside that

741
00:26:00,080 --> 00:26:01,120
folder

742
00:26:01,120 --> 00:26:03,200
and we can see that

743
00:26:03,200 --> 00:26:04,960
you know there's quite a few different

744
00:26:04,960 --> 00:26:07,279
aspx files and folders and things like

745
00:26:07,279 --> 00:26:10,000
that but really the journey in mapping

746
00:26:10,000 --> 00:26:11,840
out the attack surface is not over yet

747
00:26:11,840 --> 00:26:12,880
we still don't know what's

748
00:26:12,880 --> 00:26:14,799
pre-authentication and what's post

749
00:26:14,799 --> 00:26:16,880
authentication this becomes a little bit

750
00:26:16,880 --> 00:26:18,880
clearer clearer as we iterate through

751
00:26:18,880 --> 00:26:20,320
some of these files and read the source

752
00:26:20,320 --> 00:26:21,440
code to see whether or not there are

753
00:26:21,440 --> 00:26:23,360
authentication requirements but we still

754
00:26:23,360 --> 00:26:27,200
need to do that in in this journey

755
00:26:27,200 --> 00:26:29,120
discovering the vulnerable endpoint was

756
00:26:29,120 --> 00:26:31,039
pretty interesting because inside one of

757
00:26:31,039 --> 00:26:32,880
these folders i found a file which was

758
00:26:32,880 --> 00:26:34,880
called report.ashx

759
00:26:34,880 --> 00:26:37,200
and had the following contents basically

760
00:26:37,200 --> 00:26:39,120
just referred to a c-sharp file called

761
00:26:39,120 --> 00:26:41,919
report.ashx.cs

762
00:26:41,919 --> 00:26:43,360
and since we've loaded up all of our

763
00:26:43,360 --> 00:26:45,120
source code into our id we can check

764
00:26:45,120 --> 00:26:48,320
that source code simultaneously

765
00:26:48,320 --> 00:26:51,200
while looking at uh this asujx file

766
00:26:51,200 --> 00:26:52,559
so we found that the source code was

767
00:26:52,559 --> 00:26:54,520
located in this directory called

768
00:26:54,520 --> 00:26:57,840
report.cs and we opened it up

769
00:26:57,840 --> 00:26:59,919
this is what report.cs looked like

770
00:26:59,919 --> 00:27:02,159
ultimately it was processing the request

771
00:27:02,159 --> 00:27:03,600
and it was

772
00:27:03,600 --> 00:27:05,919
passing it was processing uh it was

773
00:27:05,919 --> 00:27:07,840
ending up at the sync report data

774
00:27:07,840 --> 00:27:10,080
serializer dot to serialize query where

775
00:27:10,080 --> 00:27:12,000
it took our input stream

776
00:27:12,000 --> 00:27:14,559
as input

777
00:27:14,559 --> 00:27:15,960
when we look at report data

778
00:27:15,960 --> 00:27:18,880
serializer.cs we can find that our sync

779
00:27:18,880 --> 00:27:22,000
here was ultimately net data contract

780
00:27:22,000 --> 00:27:24,799
serializer dot read object

781
00:27:24,799 --> 00:27:26,720
now for people that aren't familiar with

782
00:27:26,720 --> 00:27:29,279
source code auditing or specific quirks

783
00:27:29,279 --> 00:27:31,120
of languages

784
00:27:31,120 --> 00:27:34,240
this is incredibly dangerous behavior in

785
00:27:34,240 --> 00:27:35,520
dotnet

786
00:27:35,520 --> 00:27:36,960
there's always been the issue of

787
00:27:36,960 --> 00:27:39,600
insecure deserialization or at least

788
00:27:39,600 --> 00:27:41,360
since the last four or five years that's

789
00:27:41,360 --> 00:27:43,679
been more widely known and publicized

790
00:27:43,679 --> 00:27:46,799
where if you're uh if this arbitrary

791
00:27:46,799 --> 00:27:48,720
input from the user ending up at one of

792
00:27:48,720 --> 00:27:51,200
these dangerous syncs for example net

793
00:27:51,200 --> 00:27:54,000
data contract serializer.read object you

794
00:27:54,000 --> 00:27:56,559
can achieve command execution

795
00:27:56,559 --> 00:27:58,480
there are so many more syncs just like

796
00:27:58,480 --> 00:27:59,520
this

797
00:27:59,520 --> 00:28:01,200
and there are so many different quirks

798
00:28:01,200 --> 00:28:02,880
inside languages that let you do

799
00:28:02,880 --> 00:28:04,960
dangerous functionality or dangerous

800
00:28:04,960 --> 00:28:06,240
things

801
00:28:06,240 --> 00:28:07,919
thankfully

802
00:28:07,919 --> 00:28:09,520
when i was auditing the source code my

803
00:28:09,520 --> 00:28:11,120
understanding was

804
00:28:11,120 --> 00:28:12,799
if something is being deserialized we

805
00:28:12,799 --> 00:28:14,159
should check whether or not it is

806
00:28:14,159 --> 00:28:16,159
happening in a safe way or not and

807
00:28:16,159 --> 00:28:17,679
anything that looked like it was the

808
00:28:17,679 --> 00:28:19,600
serializing i would investigate further

809
00:28:19,600 --> 00:28:21,200
to see whether or not it could lead to a

810
00:28:21,200 --> 00:28:22,720
dangerous uh

811
00:28:22,720 --> 00:28:24,320
dangerous outcome

812
00:28:24,320 --> 00:28:25,679
in this scenario we can see that the

813
00:28:25,679 --> 00:28:26,480
sync

814
00:28:26,480 --> 00:28:28,640
netdata contract serialized.readobject

815
00:28:28,640 --> 00:28:31,440
takes in the input that we provide and

816
00:28:31,440 --> 00:28:35,840
ultimately that data gets deserialized

817
00:28:35,840 --> 00:28:38,320
so to craft the payload uh we used yso

818
00:28:38,320 --> 00:28:40,000
serial which

819
00:28:40,000 --> 00:28:41,919
thankfully has a gadget available for

820
00:28:41,919 --> 00:28:44,159
net data contract serializer and we can

821
00:28:44,159 --> 00:28:46,480
just do a simple gadget like this and

822
00:28:46,480 --> 00:28:49,200
generate the base64 for that gadget

823
00:28:49,200 --> 00:28:50,799
our final payload looks something like

824
00:28:50,799 --> 00:28:51,840
this

825
00:28:51,840 --> 00:28:53,840
which had query source parameters and

826
00:28:53,840 --> 00:28:55,600
the parameter name and the serialized

827
00:28:55,600 --> 00:28:57,360
xml object

828
00:28:57,360 --> 00:28:59,360
this payload was crafted by looking at

829
00:28:59,360 --> 00:29:01,440
the source code and understanding how do

830
00:29:01,440 --> 00:29:03,520
we get to that sync what do we need to

831
00:29:03,520 --> 00:29:05,360
do what do we need to include to get to

832
00:29:05,360 --> 00:29:07,039
that sync

833
00:29:07,039 --> 00:29:08,799
tech and really what we needed to do was

834
00:29:08,799 --> 00:29:11,360
craft this specific xml file which would

835
00:29:11,360 --> 00:29:12,399
lead to

836
00:29:12,399 --> 00:29:15,360
the the sync inside the parameters tag

837
00:29:15,360 --> 00:29:19,120
where the serialized xml object is

838
00:29:19,120 --> 00:29:20,960
our final rce payload looks something

839
00:29:20,960 --> 00:29:22,880
like this so you just send a post

840
00:29:22,880 --> 00:29:25,120
request to report.ashx

841
00:29:25,120 --> 00:29:27,440
with the xml payload and the serialized

842
00:29:27,440 --> 00:29:31,520
xml inside the parameter tag

843
00:29:32,720 --> 00:29:34,240
the exploit write up for this can be

844
00:29:34,240 --> 00:29:35,760
found here it has a lot more detail

845
00:29:35,760 --> 00:29:37,679
about the vulnerability how we found it

846
00:29:37,679 --> 00:29:39,200
some of the things that we had to do to

847
00:29:39,200 --> 00:29:41,120
come up with the exploit payload and i

848
00:29:41,120 --> 00:29:43,919
hope that it's uh it's more insightful

849
00:29:43,919 --> 00:29:45,760
for you to read this right up than just

850
00:29:45,760 --> 00:29:47,360
this presentation because it does have a

851
00:29:47,360 --> 00:29:50,879
lot more extra information as well

852
00:29:51,360 --> 00:29:53,200
lastly i want to talk about vmware

853
00:29:53,200 --> 00:29:55,840
workspace 1 uem which is also known as

854
00:29:55,840 --> 00:29:57,919
airwatch

855
00:29:57,919 --> 00:30:00,159
so workspace 1 uem is used for mobile

856
00:30:00,159 --> 00:30:02,559
device management mobility management by

857
00:30:02,559 --> 00:30:03,919
enterprises

858
00:30:03,919 --> 00:30:05,760
it's for the administration of mobile

859
00:30:05,760 --> 00:30:07,679
devices such as smartphones tablets

860
00:30:07,679 --> 00:30:10,000
laptops and mdm is usually implemented

861
00:30:10,000 --> 00:30:10,720
with

862
00:30:10,720 --> 00:30:12,159
with the use of a third-party product

863
00:30:12,159 --> 00:30:14,640
like workspace one uem

864
00:30:14,640 --> 00:30:16,640
vmware acquired airwatch and then

865
00:30:16,640 --> 00:30:19,520
renamed airwatch into workspace one uem

866
00:30:19,520 --> 00:30:21,279
almost every large enterprise has some

867
00:30:21,279 --> 00:30:23,600
sort of mdm solution and this software

868
00:30:23,600 --> 00:30:25,039
is actually a really popular solution

869
00:30:25,039 --> 00:30:28,559
that a lot of enterprises use

870
00:30:28,640 --> 00:30:30,480
as usual we've got to map out the attack

871
00:30:30,480 --> 00:30:31,440
surface

872
00:30:31,440 --> 00:30:33,360
so one of the things that's pretty funny

873
00:30:33,360 --> 00:30:35,279
is installing workspace one uem was

874
00:30:35,279 --> 00:30:36,640
almost harder than discovering the

875
00:30:36,640 --> 00:30:38,640
vulnerability which is

876
00:30:38,640 --> 00:30:40,240
many times the case when looking at

877
00:30:40,240 --> 00:30:42,320
enterprise software

878
00:30:42,320 --> 00:30:44,880
these folders inside the website's uh

879
00:30:44,880 --> 00:30:46,720
websites directory were deployed under

880
00:30:46,720 --> 00:30:48,640
different virtual paths so you can see

881
00:30:48,640 --> 00:30:50,159
on the right hand side there's all these

882
00:30:50,159 --> 00:30:52,799
different um websites like devices

883
00:30:52,799 --> 00:30:55,200
gateway catalog device management they

884
00:30:55,200 --> 00:30:56,799
all have different virtual paths when

885
00:30:56,799 --> 00:30:58,640
configured through iis

886
00:30:58,640 --> 00:31:01,039
and there was some presence of some ashx

887
00:31:01,039 --> 00:31:02,480
files which is what we focused on

888
00:31:02,480 --> 00:31:03,919
initially when looking at the attack

889
00:31:03,919 --> 00:31:04,880
surface

890
00:31:04,880 --> 00:31:06,480
some of these ashx files weren't

891
00:31:06,480 --> 00:31:09,519
protected by authentication

892
00:31:09,519 --> 00:31:10,880
one of the ones that we focus on

893
00:31:10,880 --> 00:31:12,320
particularly was something called

894
00:31:12,320 --> 00:31:14,399
blobhandler.ashx

895
00:31:14,399 --> 00:31:16,320
this file existed in multiple multiple

896
00:31:16,320 --> 00:31:17,760
virtual parts however the ones that we

897
00:31:17,760 --> 00:31:19,360
found that were vulnerable were only on

898
00:31:19,360 --> 00:31:22,080
slash airwatch and slash catalog

899
00:31:22,080 --> 00:31:23,600
the endpoint was accessible

900
00:31:23,600 --> 00:31:25,200
pre-authentication and there was no

901
00:31:25,200 --> 00:31:26,720
authentication logic that was found

902
00:31:26,720 --> 00:31:29,679
within the code or the web.config files

903
00:31:29,679 --> 00:31:31,200
and as you can see here there was this

904
00:31:31,200 --> 00:31:32,480
function that we found within

905
00:31:32,480 --> 00:31:34,399
blobhandler.ashx

906
00:31:34,399 --> 00:31:36,640
called renderproxyresponse

907
00:31:36,640 --> 00:31:39,120
it took in an encrypted url and then it

908
00:31:39,120 --> 00:31:41,919
would proxy that encrypted url directly

909
00:31:41,919 --> 00:31:44,960
this was incredibly interesting to us

910
00:31:44,960 --> 00:31:47,200
the first question we had was how can we

911
00:31:47,200 --> 00:31:50,880
generate our own encrypted urls

912
00:31:50,880 --> 00:31:53,440
so the logic uh was essentially as long

913
00:31:53,440 --> 00:31:55,840
as we provided an encrypted url

914
00:31:55,840 --> 00:31:57,600
a http request would be made to this

915
00:31:57,600 --> 00:31:59,679
encrypted url you could control the

916
00:31:59,679 --> 00:32:01,440
method you can control the body the

917
00:32:01,440 --> 00:32:03,360
headers and the full response would be

918
00:32:03,360 --> 00:32:05,440
proxied back to the user this

919
00:32:05,440 --> 00:32:06,880
functionality was not in use by

920
00:32:06,880 --> 00:32:08,640
literally anything else in the code base

921
00:32:08,640 --> 00:32:10,159
and it was a big question for why it was

922
00:32:10,159 --> 00:32:12,000
implemented in the first place

923
00:32:12,000 --> 00:32:14,080
essentially it's a full read ssrf with

924
00:32:14,080 --> 00:32:16,159
full control over the request if we work

925
00:32:16,159 --> 00:32:19,039
out this encryption algorithm

926
00:32:19,039 --> 00:32:20,559
the encryption function looks something

927
00:32:20,559 --> 00:32:22,960
like this it would obtain a master key

928
00:32:22,960 --> 00:32:25,279
and then it would uh return a function

929
00:32:25,279 --> 00:32:27,120
with that master key and encrypt using

930
00:32:27,120 --> 00:32:29,440
that function

931
00:32:29,440 --> 00:32:31,440
when we looked at the the function to

932
00:32:31,440 --> 00:32:33,360
get the master key we realized that the

933
00:32:33,360 --> 00:32:35,519
logic was actually quite flawed

934
00:32:35,519 --> 00:32:37,200
and it would return the default master

935
00:32:37,200 --> 00:32:39,919
key in most scenarios

936
00:32:39,919 --> 00:32:41,360
so you can you can walk through this

937
00:32:41,360 --> 00:32:43,840
logic pretty easily you can see that um

938
00:32:43,840 --> 00:32:45,760
it uses the key version to determine

939
00:32:45,760 --> 00:32:47,120
whether or not it returns the default

940
00:32:47,120 --> 00:32:49,279
master key but you can see that it

941
00:32:49,279 --> 00:32:51,039
returns a default master key in two

942
00:32:51,039 --> 00:32:53,600
scenarios if the key version is empty or

943
00:32:53,600 --> 00:32:56,880
it equals kv 0 or also if the master key

944
00:32:56,880 --> 00:32:58,880
from the database is null or the master

945
00:32:58,880 --> 00:33:01,039
d from the master key from the database

946
00:33:01,039 --> 00:33:02,320
is not valid

947
00:33:02,320 --> 00:33:03,360
um

948
00:33:03,360 --> 00:33:05,200
but yeah ultimately this was the

949
00:33:05,200 --> 00:33:07,120
functionality that was being used to

950
00:33:07,120 --> 00:33:08,240
encrypt

951
00:33:08,240 --> 00:33:10,320
arbitrary strings and also the

952
00:33:10,320 --> 00:33:12,559
functionality being used when you needed

953
00:33:12,559 --> 00:33:14,799
to encrypt the url to provide to

954
00:33:14,799 --> 00:33:18,640
airwatch or vmware workspace 1 uem

955
00:33:18,640 --> 00:33:20,399
we realized that the default master key

956
00:33:20,399 --> 00:33:22,320
was just hard coded in the code base so

957
00:33:22,320 --> 00:33:24,320
you can see that here's the key version

958
00:33:24,320 --> 00:33:26,799
the passphrase the salt data

959
00:33:26,799 --> 00:33:28,399
and at this point we were pretty

960
00:33:28,399 --> 00:33:30,159
confident that if we were able to use

961
00:33:30,159 --> 00:33:33,679
this master key to encrypt our own urls

962
00:33:33,679 --> 00:33:37,360
we would be able to get full read ssrf

963
00:33:37,360 --> 00:33:39,120
so what we did was we hooked into the

964
00:33:39,120 --> 00:33:41,679
source code we hooked into the dll files

965
00:33:41,679 --> 00:33:43,200
and we ultimately hooked into the

966
00:33:43,200 --> 00:33:45,120
encryption functions defined in the dll

967
00:33:45,120 --> 00:33:48,159
files in order to make our own encrypter

968
00:33:48,159 --> 00:33:50,000
we leveraged the already existing

969
00:33:50,000 --> 00:33:51,840
functions for encryption and we were

970
00:33:51,840 --> 00:33:53,519
able to create a cli application that

971
00:33:53,519 --> 00:33:55,120
was encrypted that was capable of

972
00:33:55,120 --> 00:33:56,960
encrypting arbitrary strings

973
00:33:56,960 --> 00:33:58,640
this allowed us to specify arbitrary

974
00:33:58,640 --> 00:34:00,640
urls to be encrypted which could then be

975
00:34:00,640 --> 00:34:02,600
used for when requesting

976
00:34:02,600 --> 00:34:05,200
blobhandler.ashx this successfully led

977
00:34:05,200 --> 00:34:08,399
to pre-auth ssrf

978
00:34:08,399 --> 00:34:10,079
the final exploit looks something like

979
00:34:10,079 --> 00:34:12,480
this um we had a python script that

980
00:34:12,480 --> 00:34:13,679
would do all of the work with the

981
00:34:13,679 --> 00:34:15,599
encryption calling out to the binary

982
00:34:15,599 --> 00:34:17,918
that we created it will take in a url

983
00:34:17,918 --> 00:34:20,000
and the ssrf target and then it would

984
00:34:20,000 --> 00:34:22,320
generate an ssrf payload this is an

985
00:34:22,320 --> 00:34:24,480
example ssr of payload that will request

986
00:34:24,480 --> 00:34:27,280
example.com

987
00:34:27,280 --> 00:34:29,520
the write up for this can be found here

988
00:34:29,520 --> 00:34:31,119
this has a lot more detail on the

989
00:34:31,119 --> 00:34:32,719
write-up and it explains the whole

990
00:34:32,719 --> 00:34:35,040
encryption algorithm how we hook in the

991
00:34:35,040 --> 00:34:37,119
poc and things like that so i highly

992
00:34:37,119 --> 00:34:38,960
recommend you check up this write up and

993
00:34:38,960 --> 00:34:40,239
see if you can

994
00:34:40,239 --> 00:34:43,359
recreate this yourself

995
00:34:43,520 --> 00:34:45,119
that's all i have for today thank you

996
00:34:45,119 --> 00:34:46,560
very much for joining and watching this

997
00:34:46,560 --> 00:34:48,320
session i hope that you learned a little

998
00:34:48,320 --> 00:34:50,079
bit about source code analysis i know

999
00:34:50,079 --> 00:34:51,520
that ultimately i was just explaining

1000
00:34:51,520 --> 00:34:52,800
vulnerabilities that we found through

1001
00:34:52,800 --> 00:34:54,879
source code analysis but i feel like i

1002
00:34:54,879 --> 00:34:56,399
had a few really important lessons

1003
00:34:56,399 --> 00:34:58,400
throughout this presentation

1004
00:34:58,400 --> 00:34:59,760
i hope that you can learn something from

1005
00:34:59,760 --> 00:35:01,359
my journey in source code analysis and i

1006
00:35:01,359 --> 00:35:03,280
hope that i helped you in some way have

1007
00:35:03,280 --> 00:35:06,599
a great day

