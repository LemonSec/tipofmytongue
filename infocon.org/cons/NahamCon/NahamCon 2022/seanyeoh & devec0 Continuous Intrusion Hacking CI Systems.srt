1
00:00:00,240 --> 00:00:02,240
hey everyone thanks for having us on

2
00:00:02,240 --> 00:00:03,919
today we'll be talking about hacking ci

3
00:00:03,919 --> 00:00:06,319
cd systems first things first though

4
00:00:06,319 --> 00:00:08,240
we'll do a little introduction and then

5
00:00:08,240 --> 00:00:09,440
we'll quickly go over what we'll be

6
00:00:09,440 --> 00:00:11,120
talking about today in case you're on

7
00:00:11,120 --> 00:00:12,480
the fence about actually watching this

8
00:00:12,480 --> 00:00:15,480
talk

9
00:00:16,239 --> 00:00:18,800
uh echo or james i work as a backend

10
00:00:18,800 --> 00:00:20,960
engineer it's a fancy way of saying i

11
00:00:20,960 --> 00:00:22,560
stare really hard at computers and

12
00:00:22,560 --> 00:00:24,560
encourage them to do better

13
00:00:24,560 --> 00:00:26,160
i'm an internet more golf and have been

14
00:00:26,160 --> 00:00:27,920
hacking since the mid 90s which i think

15
00:00:27,920 --> 00:00:29,599
makes me a senior citizen in the bug

16
00:00:29,599 --> 00:00:32,240
bounty space

17
00:00:33,360 --> 00:00:36,160
hi i'm sean i'm a startup engineer at

18
00:00:36,160 --> 00:00:37,360
assetnote

19
00:00:37,360 --> 00:00:39,440
that means i do everything at the

20
00:00:39,440 --> 00:00:40,960
startup from

21
00:00:40,960 --> 00:00:44,160
management to backend to middle end got

22
00:00:44,160 --> 00:00:46,719
the front end i do devops i do product

23
00:00:46,719 --> 00:00:49,760
management and the general firefighting

24
00:00:49,760 --> 00:00:52,160
these days i infrequently spend my time

25
00:00:52,160 --> 00:00:54,399
automating bug value techniques and then

26
00:00:54,399 --> 00:00:55,600
i just leave them until they break

27
00:00:55,600 --> 00:00:56,960
forever

28
00:00:56,960 --> 00:01:01,120
otherwise i just do scroll twitter

29
00:01:03,840 --> 00:01:05,519
so today we'll be serving you five

30
00:01:05,519 --> 00:01:09,360
courses of cicd exploits and adventures

31
00:01:09,360 --> 00:01:11,280
we'll be mostly covering the following

32
00:01:11,280 --> 00:01:13,360
topics as an introduction we'll be

33
00:01:13,360 --> 00:01:16,320
covering who is cicd

34
00:01:16,320 --> 00:01:19,040
some aca bedtime stories

35
00:01:19,040 --> 00:01:21,439
be going through some cicd blue team

36
00:01:21,439 --> 00:01:22,880
horror stories

37
00:01:22,880 --> 00:01:25,520
how we own some ci systems and how you

38
00:01:25,520 --> 00:01:28,159
can own some ci systems

39
00:01:28,159 --> 00:01:30,320
and finally what you can do to stop

40
00:01:30,320 --> 00:01:34,880
people like us owning your ci system

41
00:01:35,680 --> 00:01:36,880
all right

42
00:01:36,880 --> 00:01:39,119
devops thought leadership image party

43
00:01:39,119 --> 00:01:41,439
let's go

44
00:01:41,439 --> 00:01:43,520
so if you're familiar with software

45
00:01:43,520 --> 00:01:45,040
development at scale you should be

46
00:01:45,040 --> 00:01:47,119
familiar with devops and if you do a

47
00:01:47,119 --> 00:01:50,159
devops good you'll be using ci cd and

48
00:01:50,159 --> 00:01:51,840
the supporting systems to automate

49
00:01:51,840 --> 00:01:54,079
testing and deployment of your code as

50
00:01:54,079 --> 00:01:56,799
changes are approved

51
00:01:56,799 --> 00:01:59,920
but business excellence aside the is is

52
00:01:59,920 --> 00:02:01,360
where you push code that's the

53
00:02:01,360 --> 00:02:03,439
continuous integration and then they run

54
00:02:03,439 --> 00:02:05,439
a set of tests and scripts against your

55
00:02:05,439 --> 00:02:06,560
code

56
00:02:06,560 --> 00:02:09,520
and continuous deployment or cd is where

57
00:02:09,520 --> 00:02:10,959
they deploy the code straight to

58
00:02:10,959 --> 00:02:12,879
production i mean not always to

59
00:02:12,879 --> 00:02:14,879
production but you get the idea

60
00:02:14,879 --> 00:02:17,200
this landscape has a heap of providers

61
00:02:17,200 --> 00:02:19,040
and you may be familiar with them

62
00:02:19,040 --> 00:02:21,840
already some of them include jenkins

63
00:02:21,840 --> 00:02:24,400
github actions and even get labs runner

64
00:02:24,400 --> 00:02:26,560
or ci

65
00:02:26,560 --> 00:02:28,640
there's a ton of existing literature

66
00:02:28,640 --> 00:02:30,400
covering this area so we won't tell you

67
00:02:30,400 --> 00:02:32,239
how to do devops well

68
00:02:32,239 --> 00:02:34,480
just know that all 10 times full stack

69
00:02:34,480 --> 00:02:36,400
developers love this stuff and trust

70
00:02:36,400 --> 00:02:37,920
these platforms more than you've ever

71
00:02:37,920 --> 00:02:40,160
trusted anything in your life

72
00:02:40,160 --> 00:02:42,080
that background is fairly important when

73
00:02:42,080 --> 00:02:45,040
looking at ci systems

74
00:02:45,040 --> 00:02:46,640
and on that note

75
00:02:46,640 --> 00:02:50,200
why should you care

76
00:02:53,519 --> 00:02:56,640
so yeah ci and cd jobs have some pretty

77
00:02:56,640 --> 00:03:00,238
spicy secrets usually

78
00:03:01,519 --> 00:03:04,159
when we talk about hacking cd systems

79
00:03:04,159 --> 00:03:06,159
we're actually talking about a few main

80
00:03:06,159 --> 00:03:08,239
areas of attack surface

81
00:03:08,239 --> 00:03:09,840
in cicd

82
00:03:09,840 --> 00:03:12,080
context is even more important than ever

83
00:03:12,080 --> 00:03:13,440
because there's a higher degree of

84
00:03:13,440 --> 00:03:15,040
freedom given to users which would

85
00:03:15,040 --> 00:03:17,519
constitute security flaws on a regular

86
00:03:17,519 --> 00:03:19,200
applications

87
00:03:19,200 --> 00:03:21,840
on regular applications

88
00:03:21,840 --> 00:03:25,200
examples of this would be rcc or ssrf

89
00:03:25,200 --> 00:03:28,159
rce or ssrf which are features rather

90
00:03:28,159 --> 00:03:29,440
than bugs when

91
00:03:29,440 --> 00:03:32,640
you talk about ci cd jobs so in order to

92
00:03:32,640 --> 00:03:35,280
hack ci cd systems you're looking to

93
00:03:35,280 --> 00:03:37,519
escalate your privileges so you can

94
00:03:37,519 --> 00:03:39,760
change your scope and see what you can

95
00:03:39,760 --> 00:03:42,239
shake out from your new vantage point

96
00:03:42,239 --> 00:03:43,920
some examples of ways we've commonly

97
00:03:43,920 --> 00:03:46,560
been able to do this are information

98
00:03:46,560 --> 00:03:49,360
disclosures in the build context the icd

99
00:03:49,360 --> 00:03:51,360
jobs require an eye-ordering number of

100
00:03:51,360 --> 00:03:54,080
secrets to download configure build and

101
00:03:54,080 --> 00:03:56,239
deploy software projects in an automated

102
00:03:56,239 --> 00:03:57,439
way

103
00:03:57,439 --> 00:03:59,120
sometimes you can leak these secrets

104
00:03:59,120 --> 00:04:01,760
from the orchestration platform

105
00:04:01,760 --> 00:04:04,400
you also need access to other systems

106
00:04:04,400 --> 00:04:05,680
automation

107
00:04:05,680 --> 00:04:07,840
basically requires access to other

108
00:04:07,840 --> 00:04:09,760
systems in order to be able to automate

109
00:04:09,760 --> 00:04:10,640
things

110
00:04:10,640 --> 00:04:13,840
the cisd jobs often have broader access

111
00:04:13,840 --> 00:04:16,160
sometimes inside of the build context

112
00:04:16,160 --> 00:04:19,199
sometimes outside of the build context

113
00:04:19,199 --> 00:04:20,959
so pivoting from the build runner to

114
00:04:20,959 --> 00:04:22,960
another system can be a valid strategy

115
00:04:22,960 --> 00:04:25,680
for getting loot

116
00:04:25,680 --> 00:04:27,600
you also often have access to other

117
00:04:27,600 --> 00:04:28,960
people's code

118
00:04:28,960 --> 00:04:30,400
given the cost of running cloud

119
00:04:30,400 --> 00:04:32,400
infrastructure especially on free or

120
00:04:32,400 --> 00:04:34,800
cheaper tiers ci runners will handle

121
00:04:34,800 --> 00:04:37,199
jobs from multiple different users

122
00:04:37,199 --> 00:04:38,960
these users can be

123
00:04:38,960 --> 00:04:41,440
projects under the same organization or

124
00:04:41,440 --> 00:04:42,960
users with no organizational

125
00:04:42,960 --> 00:04:44,960
relationship with each other

126
00:04:44,960 --> 00:04:47,120
gaining access to secrets or code from

127
00:04:47,120 --> 00:04:50,479
other users is a huge win

128
00:04:50,560 --> 00:04:54,160
escape and persistence is another vector

129
00:04:54,160 --> 00:04:56,639
the security context of the cicd job

130
00:04:56,639 --> 00:04:59,280
running on the runner server is often

131
00:04:59,280 --> 00:05:01,199
heavily constrained to make sure users

132
00:05:01,199 --> 00:05:03,680
can use the ci cd system

133
00:05:03,680 --> 00:05:07,199
or as we prefer to call it rce and ssrf

134
00:05:07,199 --> 00:05:08,800
as a service

135
00:05:08,800 --> 00:05:10,800
without compromising or accessing

136
00:05:10,800 --> 00:05:12,560
anything sensitive

137
00:05:12,560 --> 00:05:14,639
again given the cost of the underlying

138
00:05:14,639 --> 00:05:17,440
infrastructure which is usually on aws

139
00:05:17,440 --> 00:05:19,440
gcp or azure

140
00:05:19,440 --> 00:05:21,440
there are resource limitations placed on

141
00:05:21,440 --> 00:05:23,759
the runners too to present excessive

142
00:05:23,759 --> 00:05:26,320
network compute and storage usage and

143
00:05:26,320 --> 00:05:28,160
especially to limit abuse like

144
00:05:28,160 --> 00:05:31,039
cryptocurrency mining network transfers

145
00:05:31,039 --> 00:05:32,160
in bulk

146
00:05:32,160 --> 00:05:34,240
and you know network scanning that kind

147
00:05:34,240 --> 00:05:35,840
of thing

148
00:05:35,840 --> 00:05:37,840
rendering these controls ineffective can

149
00:05:37,840 --> 00:05:40,080
lead to extended or unlimited access to

150
00:05:40,080 --> 00:05:42,240
resources which a bad actor can use to

151
00:05:42,240 --> 00:05:44,240
do bad active things

152
00:05:44,240 --> 00:05:46,560
this has a real financial impact to the

153
00:05:46,560 --> 00:05:49,840
company running the cicd infrastructure

154
00:05:49,840 --> 00:05:52,639
circumventing scoping and controls to

155
00:05:52,639 --> 00:05:55,199
expose more secrets is another one

156
00:05:55,199 --> 00:05:57,440
this includes escaping sandboxes such as

157
00:05:57,440 --> 00:05:59,759
containers escalating your privileges

158
00:05:59,759 --> 00:06:01,680
potentially gaining access to secrets

159
00:06:01,680 --> 00:06:03,840
normal users should never see

160
00:06:03,840 --> 00:06:05,759
which can in turn be used to further

161
00:06:05,759 --> 00:06:08,720
exploit the ci cd system via any of the

162
00:06:08,720 --> 00:06:10,880
methods we've just discussed

163
00:06:10,880 --> 00:06:14,319
changed security context

164
00:06:14,319 --> 00:06:15,360
okay

165
00:06:15,360 --> 00:06:17,759
let's discuss how you can approach a ci

166
00:06:17,759 --> 00:06:21,199
cd system to assess these vectors

167
00:06:21,199 --> 00:06:23,520
after that we'll dig into the good stuff

168
00:06:23,520 --> 00:06:25,199
by discussing the attack vectors we've

169
00:06:25,199 --> 00:06:26,000
seen

170
00:06:26,000 --> 00:06:27,759
with some choice examples to show you

171
00:06:27,759 --> 00:06:30,240
what we mean

172
00:06:31,600 --> 00:06:34,080
so when approaching a ci system there's

173
00:06:34,080 --> 00:06:36,240
a few key questions you should ask about

174
00:06:36,240 --> 00:06:38,160
the platform and the features that it

175
00:06:38,160 --> 00:06:39,520
advertises

176
00:06:39,520 --> 00:06:41,280
the first is how are they getting my

177
00:06:41,280 --> 00:06:42,160
code

178
00:06:42,160 --> 00:06:45,120
for a ci cd system to be useful

179
00:06:45,120 --> 00:06:47,199
it needs to be able to get user code and

180
00:06:47,199 --> 00:06:49,280
run some kind of testing or

181
00:06:49,280 --> 00:06:51,199
transformation on it in order to fulfill

182
00:06:51,199 --> 00:06:52,800
its purpose

183
00:06:52,800 --> 00:06:54,960
it needs to do that frequently without

184
00:06:54,960 --> 00:06:57,520
use or intervention and that means

185
00:06:57,520 --> 00:06:58,800
secrets

186
00:06:58,800 --> 00:07:00,560
like machine secret

187
00:07:00,560 --> 00:07:02,080
which secrets that you have to give it

188
00:07:02,080 --> 00:07:04,639
for it in order to work how likely is it

189
00:07:04,639 --> 00:07:06,400
that other people have provided the same

190
00:07:06,400 --> 00:07:07,919
secrets

191
00:07:07,919 --> 00:07:10,000
so while poking around inside a running

192
00:07:10,000 --> 00:07:12,479
ci job you should go hunting for those

193
00:07:12,479 --> 00:07:14,639
secrets and see how they're stored and

194
00:07:14,639 --> 00:07:16,560
see if you can access other people's

195
00:07:16,560 --> 00:07:20,080
data or access secrets for other users

196
00:07:20,080 --> 00:07:22,000
the next question you can ask is how are

197
00:07:22,000 --> 00:07:24,000
they running and building my tests and

198
00:07:24,000 --> 00:07:25,520
can i control this

199
00:07:25,520 --> 00:07:27,840
when it comes to ci jobs there's usually

200
00:07:27,840 --> 00:07:30,479
a level of customization available as to

201
00:07:30,479 --> 00:07:32,560
what's actually right inside the test or

202
00:07:32,560 --> 00:07:33,759
build job

203
00:07:33,759 --> 00:07:36,400
in our experience there's often a very

204
00:07:36,400 --> 00:07:38,880
small amount of sanitization done

205
00:07:38,880 --> 00:07:40,960
mainly to use give us give users more

206
00:07:40,960 --> 00:07:42,479
flexibility

207
00:07:42,479 --> 00:07:44,639
play around with the build scripts test

208
00:07:44,639 --> 00:07:47,039
various commands and configurations to

209
00:07:47,039 --> 00:07:49,199
see if you can inject shell escapes or

210
00:07:49,199 --> 00:07:50,879
append additional commands

211
00:07:50,879 --> 00:07:52,960
they may be running these outside of the

212
00:07:52,960 --> 00:07:55,599
context of where you're building

213
00:07:55,599 --> 00:07:57,280
or when the build agent passes them

214
00:07:57,280 --> 00:07:59,199
incorrectly throw you into a completely

215
00:07:59,199 --> 00:08:01,360
different

216
00:08:01,360 --> 00:08:03,120
when they are running my code then you

217
00:08:03,120 --> 00:08:05,520
can ask what else is hosted there

218
00:08:05,520 --> 00:08:07,680
similar to the previous point if you can

219
00:08:07,680 --> 00:08:10,080
find out where the code is being stored

220
00:08:10,080 --> 00:08:12,560
and you poke around inside the build job

221
00:08:12,560 --> 00:08:14,800
you might find a configuration or code

222
00:08:14,800 --> 00:08:17,280
for other users in flight jobs timing

223
00:08:17,280 --> 00:08:18,879
might be a valid vector here they might

224
00:08:18,879 --> 00:08:21,599
be using containers alongside you or

225
00:08:21,599 --> 00:08:23,360
processors within the same container to

226
00:08:23,360 --> 00:08:25,840
do the same

227
00:08:25,840 --> 00:08:27,280
next you can ask questions about the

228
00:08:27,280 --> 00:08:30,400
artifacts and a common use case for ci

229
00:08:30,400 --> 00:08:33,440
cd is storing the built software

230
00:08:33,440 --> 00:08:36,000
packages or the results of tests as

231
00:08:36,000 --> 00:08:38,479
artifacts so afterwards users can view

232
00:08:38,479 --> 00:08:40,880
them or review review them these are

233
00:08:40,880 --> 00:08:42,958
normally stored and persisted elsewhere

234
00:08:42,958 --> 00:08:45,760
for access via the ci cd system or via

235
00:08:45,760 --> 00:08:47,519
front-end web ui

236
00:08:47,519 --> 00:08:48,959
similar to other file upload

237
00:08:48,959 --> 00:08:51,519
vulnerabilities controlling the name the

238
00:08:51,519 --> 00:08:53,680
content can often lead to controlling

239
00:08:53,680 --> 00:08:56,160
what is essentially untrusted input into

240
00:08:56,160 --> 00:08:58,320
the ci cd platform or to the web

241
00:08:58,320 --> 00:09:00,959
application or to the web ui

242
00:09:00,959 --> 00:09:02,560
here's an opportunity to look for things

243
00:09:02,560 --> 00:09:05,360
like xss art traversal and file

244
00:09:05,360 --> 00:09:07,839
inclusion bar

245
00:09:07,839 --> 00:09:10,160
next question you can ask is a bit more

246
00:09:10,160 --> 00:09:12,800
about the operating system itself what

247
00:09:12,800 --> 00:09:15,040
does our operating environment look like

248
00:09:15,040 --> 00:09:16,080
what can this tell you about the

249
00:09:16,080 --> 00:09:17,519
infrastructure

250
00:09:17,519 --> 00:09:19,360
this one can be a lot of fun because

251
00:09:19,360 --> 00:09:21,839
even if you don't escalate privileges or

252
00:09:21,839 --> 00:09:24,240
escape confinement you're guaranteed

253
00:09:24,240 --> 00:09:26,160
limitless callbacks on your reverse

254
00:09:26,160 --> 00:09:28,399
shells and you get some real opportunity

255
00:09:28,399 --> 00:09:30,720
for hacker lapping

256
00:09:30,720 --> 00:09:32,959
interpreter sessions can open but

257
00:09:32,959 --> 00:09:34,320
seriously this can lead to some really

258
00:09:34,320 --> 00:09:37,360
good thought as most ci cd jobs are run

259
00:09:37,360 --> 00:09:40,320
in some kind of jail or true

260
00:09:40,320 --> 00:09:42,880
and contrary to good container security

261
00:09:42,880 --> 00:09:44,240
advice

262
00:09:44,240 --> 00:09:46,240
people just use containers as a security

263
00:09:46,240 --> 00:09:48,880
boundary even when they really shouldn't

264
00:09:48,880 --> 00:09:50,640
this can lead to disclosing some very

265
00:09:50,640 --> 00:09:53,360
juicy secrets such as the ci platform's

266
00:09:53,360 --> 00:09:56,240
cloud credentials metadata endpoint and

267
00:09:56,240 --> 00:09:57,839
you get the picture anything cloud

268
00:09:57,839 --> 00:10:00,880
native that's really our sandbox

269
00:10:00,880 --> 00:10:02,399
because in some cases you'll find

270
00:10:02,399 --> 00:10:04,160
yourself operating in the same security

271
00:10:04,160 --> 00:10:06,800
context as a platform

272
00:10:06,800 --> 00:10:08,800
so with this high level methodology in

273
00:10:08,800 --> 00:10:10,560
mind let's dive into some of these

274
00:10:10,560 --> 00:10:12,480
vulnerability classes and actual bugs

275
00:10:12,480 --> 00:10:16,320
we've found to demonstrate some of these

276
00:10:17,279 --> 00:10:18,560
all right

277
00:10:18,560 --> 00:10:20,720
let's say you found a ci pipeline you're

278
00:10:20,720 --> 00:10:22,000
interested in

279
00:10:22,000 --> 00:10:23,680
drop a reverse shell into the build

280
00:10:23,680 --> 00:10:26,800
process put your black hoodie on dim the

281
00:10:26,800 --> 00:10:27,920
lights

282
00:10:27,920 --> 00:10:30,079
now you start staring at a shell on

283
00:10:30,079 --> 00:10:33,920
someone's infrastructure what do you do

284
00:10:33,920 --> 00:10:35,680
one of your first goals when you start

285
00:10:35,680 --> 00:10:38,160
auditing a ci system is to disclose as

286
00:10:38,160 --> 00:10:40,720
much information as possible

287
00:10:40,720 --> 00:10:43,519
some of the first things we try doing

288
00:10:43,519 --> 00:10:45,440
are digging through things like

289
00:10:45,440 --> 00:10:47,360
accessible files

290
00:10:47,360 --> 00:10:49,120
we've got some examples in the slides

291
00:10:49,120 --> 00:10:51,440
here just like really quick win commands

292
00:10:51,440 --> 00:10:52,880
we use

293
00:10:52,880 --> 00:10:55,839
what kind of environment variables um

294
00:10:55,839 --> 00:10:58,160
both the process that you are running

295
00:10:58,160 --> 00:11:00,560
your job as and other processors on the

296
00:11:00,560 --> 00:11:04,240
system might have access to

297
00:11:04,240 --> 00:11:07,040
any open network connections within the

298
00:11:07,040 --> 00:11:09,760
actual ci environment can be really

299
00:11:09,760 --> 00:11:11,680
telling as to what kind of external

300
00:11:11,680 --> 00:11:13,680
systems you might be able to access

301
00:11:13,680 --> 00:11:16,240
using some of those secrets

302
00:11:16,240 --> 00:11:19,920
and the process tree um how how is the

303
00:11:19,920 --> 00:11:21,680
build being called

304
00:11:21,680 --> 00:11:24,800
um what are the parent processes to the

305
00:11:24,800 --> 00:11:27,120
actual build job itself can you interact

306
00:11:27,120 --> 00:11:29,839
with those things

307
00:11:32,320 --> 00:11:34,959
so in our case we were able to obtain

308
00:11:34,959 --> 00:11:37,519
the build agent source code or the build

309
00:11:37,519 --> 00:11:39,760
system due to improper directory

310
00:11:39,760 --> 00:11:41,200
permission

311
00:11:41,200 --> 00:11:44,000
this meant we knew exactly how our

312
00:11:44,000 --> 00:11:46,560
builds were being run and how the inputs

313
00:11:46,560 --> 00:11:49,040
into the web outside of the ci system

314
00:11:49,040 --> 00:11:51,279
mapped to inputs in the various build

315
00:11:51,279 --> 00:11:53,760
stages including those running at a

316
00:11:53,760 --> 00:11:55,519
higher privilege level

317
00:11:55,519 --> 00:11:57,440
we're able to use this source code to

318
00:11:57,440 --> 00:11:59,440
find two interesting bugs related to

319
00:11:59,440 --> 00:12:01,279
information

320
00:12:01,279 --> 00:12:03,200
now this isn't always possible if the

321
00:12:03,200 --> 00:12:05,519
build agent is written in a compiled

322
00:12:05,519 --> 00:12:07,760
language unless you want to go into

323
00:12:07,760 --> 00:12:10,560
binary versing but in our case is a mix

324
00:12:10,560 --> 00:12:12,399
of batch and python which is pretty

325
00:12:12,399 --> 00:12:16,000
common and makes our life a lot

326
00:12:16,079 --> 00:12:18,880
heaps easier

327
00:12:20,720 --> 00:12:23,120
all right

328
00:12:23,120 --> 00:12:24,800
putting the code showed that the build

329
00:12:24,800 --> 00:12:27,200
path was not being sanitized and was

330
00:12:27,200 --> 00:12:29,839
being executed inside of a shell so when

331
00:12:29,839 --> 00:12:32,320
the job was actually being run the path

332
00:12:32,320 --> 00:12:35,680
in which the job was being um run as the

333
00:12:35,680 --> 00:12:38,639
current working directory was a user

334
00:12:38,639 --> 00:12:41,680
controllable input

335
00:12:41,680 --> 00:12:43,279
i'm sure there's a number of like really

336
00:12:43,279 --> 00:12:45,279
valid reasons that you would want to do

337
00:12:45,279 --> 00:12:47,920
this for certain

338
00:12:47,920 --> 00:12:48,880
build

339
00:12:48,880 --> 00:12:50,079
systems

340
00:12:50,079 --> 00:12:51,760
and like this is a good reminder that

341
00:12:51,760 --> 00:12:53,760
flexibility in these systems is really

342
00:12:53,760 --> 00:12:55,760
common because the requirements of

343
00:12:55,760 --> 00:12:57,519
different developers are actually quite

344
00:12:57,519 --> 00:12:58,959
broad

345
00:12:58,959 --> 00:13:00,800
um we attempted

346
00:13:00,800 --> 00:13:03,279
typical stuff like shell injection uh

347
00:13:03,279 --> 00:13:05,360
because we could see this was controlled

348
00:13:05,360 --> 00:13:06,639
um

349
00:13:06,639 --> 00:13:08,880
this phase of the build was being run

350
00:13:08,880 --> 00:13:12,560
before a pseudo into a constrained build

351
00:13:12,560 --> 00:13:15,360
user so it actually was like quite a

352
00:13:15,360 --> 00:13:17,680
tantalizing

353
00:13:17,680 --> 00:13:20,959
input to try and control um

354
00:13:20,959 --> 00:13:23,600
that step switched the user context to

355
00:13:23,600 --> 00:13:25,440
the build user which was like heavily

356
00:13:25,440 --> 00:13:28,639
restricted it couldn't sudo um like file

357
00:13:28,639 --> 00:13:30,880
permission restrictions etc

358
00:13:30,880 --> 00:13:32,880
if we could inject code here we'd have

359
00:13:32,880 --> 00:13:34,720
access to the service account of the ci

360
00:13:34,720 --> 00:13:38,800
runner which had way more privilege

361
00:13:40,639 --> 00:13:42,720
unfortunately the path was being

362
00:13:42,720 --> 00:13:46,760
validated for special characters

363
00:13:48,000 --> 00:13:49,760
fortunately it was only client-side

364
00:13:49,760 --> 00:13:52,000
validation and a quick burp session

365
00:13:52,000 --> 00:13:53,680
showed that we could actually inject the

366
00:13:53,680 --> 00:13:58,000
special characters just via repeater

367
00:13:59,360 --> 00:14:01,760
once the new path was accepted we found

368
00:14:01,760 --> 00:14:04,160
another issue in that the path was being

369
00:14:04,160 --> 00:14:06,079
checked to ensure it existed before

370
00:14:06,079 --> 00:14:07,839
running the job

371
00:14:07,839 --> 00:14:09,600
this didn't seem like a deliberate

372
00:14:09,600 --> 00:14:11,920
security measure but rather a happy

373
00:14:11,920 --> 00:14:16,279
accident from a security perspective

374
00:14:17,360 --> 00:14:20,000
thankfully ext4 is very resilient in a

375
00:14:20,000 --> 00:14:22,000
feature full file system

376
00:14:22,000 --> 00:14:23,440
and allowed us to create all of the

377
00:14:23,440 --> 00:14:25,040
folders and files

378
00:14:25,040 --> 00:14:26,959
including the special characters need

379
00:14:26,959 --> 00:14:29,360
for the shell injection so the path

380
00:14:29,360 --> 00:14:31,120
check passed and we were able to run

381
00:14:31,120 --> 00:14:34,880
with our modified injected

382
00:14:34,880 --> 00:14:37,199
path

383
00:14:38,560 --> 00:14:40,639
using this trick we were able to dump

384
00:14:40,639 --> 00:14:43,040
the environment of the ci runner which

385
00:14:43,040 --> 00:14:45,519
included the github private keys and a

386
00:14:45,519 --> 00:14:47,199
bunch of other tokens

387
00:14:47,199 --> 00:14:49,360
upon validating these keys we found that

388
00:14:49,360 --> 00:14:52,240
they gave us access to the repos of

389
00:14:52,240 --> 00:14:54,880
every customer using this ci platform

390
00:14:54,880 --> 00:14:56,560
not just our own

391
00:14:56,560 --> 00:14:58,480
at the time we found the bug that was

392
00:14:58,480 --> 00:15:01,760
around 50 or 60 000 users

393
00:15:01,760 --> 00:15:03,519
various github repos

394
00:15:03,519 --> 00:15:06,000
phenomenal

395
00:15:08,079 --> 00:15:10,079
so in this example we learned some key

396
00:15:10,079 --> 00:15:12,079
ways you can leverage ci systems to

397
00:15:12,079 --> 00:15:14,320
access sensitive data and gain rce

398
00:15:14,320 --> 00:15:16,639
outside of the build context

399
00:15:16,639 --> 00:15:18,480
for attackers this is a reminder to

400
00:15:18,480 --> 00:15:21,519
always test all of the inputs and always

401
00:15:21,519 --> 00:15:23,120
check to see if validation is only

402
00:15:23,120 --> 00:15:25,199
present on the client side

403
00:15:25,199 --> 00:15:28,720
also continually test your assumptions

404
00:15:28,720 --> 00:15:30,240
we might have stopped when we saw that

405
00:15:30,240 --> 00:15:32,240
the file path was being checked but

406
00:15:32,240 --> 00:15:34,079
instead we tried to create a path that

407
00:15:34,079 --> 00:15:35,759
would satisfy the check

408
00:15:35,759 --> 00:15:37,360
and we're able

409
00:15:37,360 --> 00:15:39,680
due to linux's relaxed file naming rules

410
00:15:39,680 --> 00:15:40,399
which

411
00:15:40,399 --> 00:15:42,560
uh i think a lot of people people might

412
00:15:42,560 --> 00:15:45,040
have assumed might not as have been as

413
00:15:45,040 --> 00:15:47,279
so relaxed as they were

414
00:15:47,279 --> 00:15:49,519
um

415
00:15:49,759 --> 00:15:51,759
for defenders there's a few key lessons

416
00:15:51,759 --> 00:15:54,320
here firstly you should always sanitize

417
00:15:54,320 --> 00:15:55,279
your

418
00:15:55,279 --> 00:15:57,600
preferably on the server side with your

419
00:15:57,600 --> 00:16:00,079
ui feedback instead of relying on just

420
00:16:00,079 --> 00:16:02,480
client-side validation you have to treat

421
00:16:02,480 --> 00:16:04,880
all user input as on password

422
00:16:04,880 --> 00:16:07,360
also making sure that you scope your

423
00:16:07,360 --> 00:16:10,480
tokens very aggressively down to be

424
00:16:10,480 --> 00:16:12,079
only given the minimal privilege

425
00:16:12,079 --> 00:16:14,240
necessary for what the user needs the

426
00:16:14,240 --> 00:16:16,079
last thing you want is

427
00:16:16,079 --> 00:16:18,399
one bug to leak the tokens for all your

428
00:16:18,399 --> 00:16:19,680
users

429
00:16:19,680 --> 00:16:21,440
the next part is around how you

430
00:16:21,440 --> 00:16:22,959
orchestrate your build

431
00:16:22,959 --> 00:16:24,959
and often we recommend trying to

432
00:16:24,959 --> 00:16:27,040
segregate the build orchestration

433
00:16:27,040 --> 00:16:29,279
software or the code that lets you run

434
00:16:29,279 --> 00:16:32,399
the user code from the user job itself

435
00:16:32,399 --> 00:16:35,120
i understand that's not always possible

436
00:16:35,120 --> 00:16:37,120
so in addition to that we recommend

437
00:16:37,120 --> 00:16:39,440
heavily locking down the permissions

438
00:16:39,440 --> 00:16:41,440
and the container permissions to prevent

439
00:16:41,440 --> 00:16:43,120
access to this code

440
00:16:43,120 --> 00:16:45,600
we found that after we reported this bug

441
00:16:45,600 --> 00:16:47,600
they decided to change the user

442
00:16:47,600 --> 00:16:50,399
permissions on all of the runtime or all

443
00:16:50,399 --> 00:16:52,079
on the job running code that we couldn't

444
00:16:52,079 --> 00:16:54,399
check it anymore this effectively meant

445
00:16:54,399 --> 00:16:56,639
we couldn't audit any more source and as

446
00:16:56,639 --> 00:16:58,800
such we can't find any more bugs with it

447
00:16:58,800 --> 00:17:00,880
unless we just start blackbox brute

448
00:17:00,880 --> 00:17:03,880
force

449
00:17:09,919 --> 00:17:12,319
in contemporary cloud computing it's

450
00:17:12,319 --> 00:17:14,720
more and more common to see

451
00:17:14,720 --> 00:17:16,839
layering of cloud

452
00:17:16,839 --> 00:17:19,280
services to build build like to build

453
00:17:19,280 --> 00:17:21,679
systems generally

454
00:17:21,679 --> 00:17:23,439
in the case of this ci system the

455
00:17:23,439 --> 00:17:25,439
underpinning orchestration and compute

456
00:17:25,439 --> 00:17:27,839
service was actually provided by azure

457
00:17:27,839 --> 00:17:30,240
devops pipelines

458
00:17:30,240 --> 00:17:33,200
we found this out when we found um

459
00:17:33,200 --> 00:17:35,039
you know going back to the point about

460
00:17:35,039 --> 00:17:37,120
looking to see what you have access to

461
00:17:37,120 --> 00:17:39,039
and trying to find source code of like

462
00:17:39,039 --> 00:17:41,360
build agents and things like that we

463
00:17:41,360 --> 00:17:43,039
actually found a rendered azure

464
00:17:43,039 --> 00:17:46,080
pipelines yaml file it's an artifact on

465
00:17:46,080 --> 00:17:47,919
the build file system

466
00:17:47,919 --> 00:17:50,400
just lying around

467
00:17:50,400 --> 00:17:52,640
something we also should not have had

468
00:17:52,640 --> 00:17:54,799
access to really there was no real

469
00:17:54,799 --> 00:17:56,320
reason for it to be there on the file

470
00:17:56,320 --> 00:17:57,919
system and accessible by the build

471
00:17:57,919 --> 00:18:01,360
system but we did so we audited it

472
00:18:01,360 --> 00:18:03,039
it was clear it had been rendered from a

473
00:18:03,039 --> 00:18:04,720
template by the web app and build

474
00:18:04,720 --> 00:18:06,720
scripts so we started reading the

475
00:18:06,720 --> 00:18:09,840
documentation for azure devops pipelines

476
00:18:09,840 --> 00:18:12,960
we noticed a really useful feature here

477
00:18:12,960 --> 00:18:15,919
for developers and as it turns out also

478
00:18:15,919 --> 00:18:17,520
for attackers

479
00:18:17,520 --> 00:18:19,919
which allowed substitution variables to

480
00:18:19,919 --> 00:18:22,320
be injected using string interpolation

481
00:18:22,320 --> 00:18:24,559
by a very rudimentary kind of templating

482
00:18:24,559 --> 00:18:27,120
syntax

483
00:18:27,440 --> 00:18:29,760
we of course uh tried to use that to

484
00:18:29,760 --> 00:18:32,480
launch a shell

485
00:18:33,200 --> 00:18:35,600
and that worked these commands were

486
00:18:35,600 --> 00:18:38,160
being run well before the build agent

487
00:18:38,160 --> 00:18:40,000
actually even ran

488
00:18:40,000 --> 00:18:43,360
we were running uh as the same user in

489
00:18:43,360 --> 00:18:45,760
the same security context as the entire

490
00:18:45,760 --> 00:18:48,480
build system we were immediately able to

491
00:18:48,480 --> 00:18:51,600
access the azure devops service user

492
00:18:51,600 --> 00:18:53,919
as it turns out it had passwordless sudo

493
00:18:53,919 --> 00:18:56,160
so we had root access to the host

494
00:18:56,160 --> 00:18:59,600
container which was

495
00:18:59,600 --> 00:19:02,399
pretty exciting

496
00:19:03,120 --> 00:19:05,600
so with access to the host container as

497
00:19:05,600 --> 00:19:07,919
root we started looking around for ways

498
00:19:07,919 --> 00:19:10,960
to escalate even further we found the

499
00:19:10,960 --> 00:19:13,600
number one container escape crime which

500
00:19:13,600 --> 00:19:16,799
is an exposed docker socket under bar

501
00:19:16,799 --> 00:19:18,400
run docker

502
00:19:18,400 --> 00:19:20,960
we created a super privileged container

503
00:19:20,960 --> 00:19:23,360
which meant a privileged container but

504
00:19:23,360 --> 00:19:26,720
we also used the root network namespace

505
00:19:26,720 --> 00:19:29,840
and bind mounted the host proc and file

506
00:19:29,840 --> 00:19:31,840
system into that container

507
00:19:31,840 --> 00:19:34,000
we chose ubuntu as it's got a fairly

508
00:19:34,000 --> 00:19:36,160
complete docker image and it's easy for

509
00:19:36,160 --> 00:19:38,400
us to install additional

510
00:19:38,400 --> 00:19:40,400
what this meant was that we now had

511
00:19:40,400 --> 00:19:44,000
effectively access to the host machine

512
00:19:44,000 --> 00:19:45,919
running this content

513
00:19:45,919 --> 00:19:48,080
from the host system we were able to

514
00:19:48,080 --> 00:19:50,720
then bypass the firewall rules which had

515
00:19:50,720 --> 00:19:52,640
been applied to the build containers via

516
00:19:52,640 --> 00:19:55,440
ip tables and as such access the

517
00:19:55,440 --> 00:19:58,880
metadata ip of our cloud provider

518
00:19:58,880 --> 00:20:00,720
we then managed to use this to pivot

519
00:20:00,720 --> 00:20:02,559
further into the platform's cloud

520
00:20:02,559 --> 00:20:03,760
environment

521
00:20:03,760 --> 00:20:06,400
and needless to say we had a pretty big

522
00:20:06,400 --> 00:20:07,840
payday on this

523
00:20:07,840 --> 00:20:10,000
we were able to take this even further

524
00:20:10,000 --> 00:20:12,640
eventually but in the interest of time

525
00:20:12,640 --> 00:20:14,480
we'll stop here because we've already

526
00:20:14,480 --> 00:20:17,120
made our point

527
00:20:17,120 --> 00:20:19,679
as a counter example

528
00:20:19,679 --> 00:20:24,159
a different ci provider entirely

529
00:20:24,400 --> 00:20:26,960
were able to gain access to the builds

530
00:20:26,960 --> 00:20:29,760
which is nothing special

531
00:20:29,760 --> 00:20:32,320
but we did find a very similar container

532
00:20:32,320 --> 00:20:33,440
escape

533
00:20:33,440 --> 00:20:35,120
this time there was no docker socket

534
00:20:35,120 --> 00:20:38,960
available but via an abuse of cgroup fs

535
00:20:38,960 --> 00:20:41,679
which is a kernel mechanism for

536
00:20:41,679 --> 00:20:44,159
controlling monitoring managing

537
00:20:44,159 --> 00:20:46,240
various system metrics available to

538
00:20:46,240 --> 00:20:49,919
namespaces and sub processors

539
00:20:50,559 --> 00:20:54,640
the host machine was able to be accessed

540
00:20:54,640 --> 00:20:55,840
however this machine had been

541
00:20:55,840 --> 00:20:58,000
provisioned dynamically for the job so

542
00:20:58,000 --> 00:21:00,720
the job was siloed to this machine

543
00:21:00,720 --> 00:21:02,240
and the machine was destroyed once the

544
00:21:02,240 --> 00:21:04,320
job was complete so there was no

545
00:21:04,320 --> 00:21:06,080
possibility of grabbing other user

546
00:21:06,080 --> 00:21:08,880
secrets or artifacts or anything

547
00:21:08,880 --> 00:21:11,120
additionally all of the orchestration

548
00:21:11,120 --> 00:21:12,799
software was running on another host

549
00:21:12,799 --> 00:21:15,200
entirely so we're not able to gather

550
00:21:15,200 --> 00:21:16,960
further detail or escalate our

551
00:21:16,960 --> 00:21:19,200
privileges by accessing stored secrets

552
00:21:19,200 --> 00:21:20,720
or anything like that

553
00:21:20,720 --> 00:21:23,600
as there weren't any on the system

554
00:21:23,600 --> 00:21:25,600
the cloud made a data ip was made

555
00:21:25,600 --> 00:21:27,679
accessible by removing the firewall

556
00:21:27,679 --> 00:21:29,600
rules preventing access once the host

557
00:21:29,600 --> 00:21:32,000
machine was accessible

558
00:21:32,000 --> 00:21:35,120
but the tokens were so heavily scoped

559
00:21:35,120 --> 00:21:37,600
that no secrets were revealed

560
00:21:37,600 --> 00:21:40,640
in essence what a cool hack was done

561
00:21:40,640 --> 00:21:42,960
the impact was basically zero given the

562
00:21:42,960 --> 00:21:44,720
security impact had been effectively

563
00:21:44,720 --> 00:21:46,799
mitigated by all of these controls that

564
00:21:46,799 --> 00:21:48,720
have been put in place

565
00:21:48,720 --> 00:21:50,559
it's very important to consider this

566
00:21:50,559 --> 00:21:52,720
when reporting bugs like this

567
00:21:52,720 --> 00:21:55,120
in this case it was not worth reporting

568
00:21:55,120 --> 00:21:57,679
as it was marked informational

569
00:21:57,679 --> 00:21:59,840
and you know for good reason really like

570
00:21:59,840 --> 00:22:02,799
this was an example of essentially doing

571
00:22:02,799 --> 00:22:05,360
this well and doing it correctly to make

572
00:22:05,360 --> 00:22:07,600
sure that you know even if someone does

573
00:22:07,600 --> 00:22:09,360
leverage the build system

574
00:22:09,360 --> 00:22:11,520
to do unusual things

575
00:22:11,520 --> 00:22:13,200
they don't actually have access to

576
00:22:13,200 --> 00:22:16,240
anything sensitive

577
00:22:17,120 --> 00:22:20,000
so we've seen a few good examples of the

578
00:22:20,000 --> 00:22:23,039
kind of loop you can find on ci system

579
00:22:23,039 --> 00:22:25,200
if you approach it methodically you test

580
00:22:25,200 --> 00:22:27,120
your assumptions and you sort of build a

581
00:22:27,120 --> 00:22:28,640
general understanding of how the

582
00:22:28,640 --> 00:22:31,200
platform is laid and ultimately figuring

583
00:22:31,200 --> 00:22:33,760
out when where and how your builds are

584
00:22:33,760 --> 00:22:34,720
run

585
00:22:34,720 --> 00:22:36,320
we've seen some of the pitfalls that

586
00:22:36,320 --> 00:22:39,200
exist for people building ci systems and

587
00:22:39,200 --> 00:22:41,520
how they've led to huge paydays for

588
00:22:41,520 --> 00:22:43,760
attackers in our case they'll bug

589
00:22:43,760 --> 00:22:44,880
bounties

590
00:22:44,880 --> 00:22:47,120
but how do you do it right and how do

591
00:22:47,120 --> 00:22:50,240
defenders build a more robust platform

592
00:22:50,240 --> 00:22:52,159
as we said before you shouldn't trust

593
00:22:52,159 --> 00:22:53,360
user input

594
00:22:53,360 --> 00:22:56,000
understand how the tools and platforms

595
00:22:56,000 --> 00:22:58,320
and frameworks that you're using to

596
00:22:58,320 --> 00:23:00,720
transform user input um and how they

597
00:23:00,720 --> 00:23:03,280
work before and make sure you validate

598
00:23:03,280 --> 00:23:06,000
all the inputs that go in as moda would

599
00:23:06,000 --> 00:23:08,880
say trust no one

600
00:23:08,880 --> 00:23:11,520
second point is use ephemeral vms the

601
00:23:11,520 --> 00:23:14,000
less you have leave the less you have

602
00:23:14,000 --> 00:23:16,640
lying around between builds the less

603
00:23:16,640 --> 00:23:19,280
likely you are to get caught and

604
00:23:19,280 --> 00:23:20,480
breached

605
00:23:20,480 --> 00:23:22,000
now this is distinct from using

606
00:23:22,000 --> 00:23:24,080
containers which we might see most

607
00:23:24,080 --> 00:23:26,320
similar to vms but distinctly the

608
00:23:26,320 --> 00:23:29,520
isolation of a vm provides a substantial

609
00:23:29,520 --> 00:23:32,720
num more amount more of security

610
00:23:32,720 --> 00:23:34,720
next we should use network policies or

611
00:23:34,720 --> 00:23:36,480
firewall rules to prevent access to

612
00:23:36,480 --> 00:23:38,320
resources which aren't needed by the

613
00:23:38,320 --> 00:23:39,760
build process

614
00:23:39,760 --> 00:23:42,559
typically anything in a private cidr

615
00:23:42,559 --> 00:23:44,960
range should be blocked during the build

616
00:23:44,960 --> 00:23:47,679
especially for the ci job use

617
00:23:47,679 --> 00:23:49,600
we recommend implementing least

618
00:23:49,600 --> 00:23:51,360
privileged principles when running ci

619
00:23:51,360 --> 00:23:53,520
jobs do your users really need to

620
00:23:53,520 --> 00:23:56,480
install arbitrary packages probably do

621
00:23:56,480 --> 00:23:59,440
they need the docker socket probably not

622
00:23:59,440 --> 00:24:01,120
do they need to be able to access the

623
00:24:01,120 --> 00:24:02,960
source code of the orchestration

624
00:24:02,960 --> 00:24:06,320
software most definitely not

625
00:24:06,320 --> 00:24:08,320
we recommend avoiding to run jobs or

626
00:24:08,320 --> 00:24:10,799
orchestration software as root user name

627
00:24:10,799 --> 00:24:12,480
space separation is often a good

628
00:24:12,480 --> 00:24:14,880
solution here if you can't separate the

629
00:24:14,880 --> 00:24:16,799
orchestration software onto a totally

630
00:24:16,799 --> 00:24:18,480
separate

631
00:24:18,480 --> 00:24:20,000
if you're running a container as

632
00:24:20,000 --> 00:24:22,080
privileged and expected to provide any

633
00:24:22,080 --> 00:24:24,240
kind of security boundary you should

634
00:24:24,240 --> 00:24:26,559
drop that assumption right now

635
00:24:26,559 --> 00:24:28,400
a privileged container is functionally

636
00:24:28,400 --> 00:24:30,880
equivalent to route access to the host

637
00:24:30,880 --> 00:24:32,559
in most cases

638
00:24:32,559 --> 00:24:34,640
if not now wait a month until there's a

639
00:24:34,640 --> 00:24:37,360
new vulnerability then typically only

640
00:24:37,360 --> 00:24:40,799
impact privilege continuously

641
00:24:40,799 --> 00:24:42,960
don't mount the docket socket inside a

642
00:24:42,960 --> 00:24:44,880
container there's no good reason to do

643
00:24:44,880 --> 00:24:47,520
it also if you expose docker on the

644
00:24:47,520 --> 00:24:50,240
network enable tls and don't mount the

645
00:24:50,240 --> 00:24:52,320
certificates in the container

646
00:24:52,320 --> 00:24:54,640
we have also seen this

647
00:24:54,640 --> 00:24:56,640
also assume that people either mine

648
00:24:56,640 --> 00:24:58,559
crypto on your runners or use them to

649
00:24:58,559 --> 00:25:00,159
run mass mascara

650
00:25:00,159 --> 00:25:01,679
you should appropriately limit and

651
00:25:01,679 --> 00:25:04,559
restrict the resources that your vms or

652
00:25:04,559 --> 00:25:07,760
your containers have access

653
00:25:07,760 --> 00:25:09,200
so thank you for coming to watch our

654
00:25:09,200 --> 00:25:11,039
talk and hopefully this has been

655
00:25:11,039 --> 00:25:13,760
insightful into how ci systems are

656
00:25:13,760 --> 00:25:15,520
horribly vulnerable

657
00:25:15,520 --> 00:25:17,600
and thanks to everyone for organizing

658
00:25:17,600 --> 00:25:22,439
non-con and thanks for having us on

