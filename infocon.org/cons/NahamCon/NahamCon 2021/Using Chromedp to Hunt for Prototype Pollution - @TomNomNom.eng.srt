1
00:00:01,680 --> 00:00:03,360
prototype pollution is a problem that

2
00:00:03,360 --> 00:00:05,839
can affect javascript applications

3
00:00:05,839 --> 00:00:07,919
but before we can talk about prototype

4
00:00:07,919 --> 00:00:09,599
pollution i think we need to spend a

5
00:00:09,599 --> 00:00:11,040
little bit of time talking about

6
00:00:11,040 --> 00:00:13,679
prototypes and what they are and then we

7
00:00:13,679 --> 00:00:15,759
can talk about prototype pollution

8
00:00:15,759 --> 00:00:19,039
so javascript has objects so we might

9
00:00:19,039 --> 00:00:20,160
have a

10
00:00:20,160 --> 00:00:23,279
car object for example

11
00:00:23,279 --> 00:00:26,640
and it might have a color property so we

12
00:00:26,640 --> 00:00:27,439
have a car

13
00:00:27,439 --> 00:00:31,119
that is red fairly simple

14
00:00:31,119 --> 00:00:33,200
and in some languages you get what's

15
00:00:33,200 --> 00:00:36,239
called classical inheritance where one

16
00:00:36,239 --> 00:00:39,520
class can inherit from another and gets

17
00:00:39,520 --> 00:00:41,280
to access its properties and that sort

18
00:00:41,280 --> 00:00:42,879
of thing javascript doesn't have

19
00:00:42,879 --> 00:00:44,160
classical inheritance

20
00:00:44,160 --> 00:00:45,120
but it does have something called

21
00:00:45,120 --> 00:00:47,440
prototypal inheritance

22
00:00:47,440 --> 00:00:49,920
uh and to show you what that is uh we

23
00:00:49,920 --> 00:00:50,559
might say

24
00:00:50,559 --> 00:00:53,680
our car wants to inherit from some kind

25
00:00:53,680 --> 00:00:53,920
of

26
00:00:53,920 --> 00:00:57,840
vehicle object so let's make a vehicle

27
00:00:57,840 --> 00:01:00,160
that's another object

28
00:01:00,160 --> 00:01:01,680
and we might say that vehicles by

29
00:01:01,680 --> 00:01:03,680
default have

30
00:01:03,680 --> 00:01:07,200
four wheels and what we can do is say

31
00:01:07,200 --> 00:01:08,159
the car's

32
00:01:08,159 --> 00:01:10,400
prototype with this double underscore

33
00:01:10,400 --> 00:01:12,640
proto double underscore thing

34
00:01:12,640 --> 00:01:16,799
it's actually equal to vehicle

35
00:01:16,799 --> 00:01:18,799
and what that does for us is it means

36
00:01:18,799 --> 00:01:20,240
that not only is

37
00:01:20,240 --> 00:01:23,360
car.color available but card.wheels

38
00:01:23,360 --> 00:01:26,240
is available too so when we try to

39
00:01:26,240 --> 00:01:28,320
access card up wheels

40
00:01:28,320 --> 00:01:30,400
javascript knows that the car object

41
00:01:30,400 --> 00:01:32,560
doesn't have a wheels property

42
00:01:32,560 --> 00:01:35,840
so it uses the prototype instead

43
00:01:35,840 --> 00:01:37,439
and that can happen more than once as

44
00:01:37,439 --> 00:01:39,200
well you can chase the prototype

45
00:01:39,200 --> 00:01:42,479
chain all the way up to the top

46
00:01:42,479 --> 00:01:44,159
and we can access it directly as well

47
00:01:44,159 --> 00:01:46,240
and say

48
00:01:46,240 --> 00:01:49,439
card.proto dot fuel

49
00:01:49,439 --> 00:01:53,439
for example is equal to petrol

50
00:01:53,439 --> 00:01:55,520
and that means that card or petrol card

51
00:01:55,520 --> 00:01:57,600
or fuel should i say

52
00:01:57,600 --> 00:02:02,560
fuel is available um but also

53
00:02:02,560 --> 00:02:05,119
vehicle.fuel is available as well we

54
00:02:05,119 --> 00:02:06,240
affected that

55
00:02:06,240 --> 00:02:09,679
prototype object directly

56
00:02:09,679 --> 00:02:12,800
one of the interesting thing to note

57
00:02:12,800 --> 00:02:16,480
is that all objects in javascript by

58
00:02:16,480 --> 00:02:17,360
default

59
00:02:17,360 --> 00:02:20,840
share a prototype so if i was to set

60
00:02:20,840 --> 00:02:22,080
vehicle.proto

61
00:02:22,080 --> 00:02:26,160
dot oh what's a good example size

62
00:02:26,160 --> 00:02:30,160
equal to large uh

63
00:02:30,160 --> 00:02:32,640
well let's go with yeah let's go with

64
00:02:32,640 --> 00:02:34,400
size it's large

65
00:02:34,400 --> 00:02:36,400
then we'll find that actually the window

66
00:02:36,400 --> 00:02:37,680
now has a size

67
00:02:37,680 --> 00:02:39,920
property as well called large because

68
00:02:39,920 --> 00:02:41,200
the window object

69
00:02:41,200 --> 00:02:43,840
shares a prototype with the vehicle

70
00:02:43,840 --> 00:02:44,879
object

71
00:02:44,879 --> 00:02:47,920
so if we can write to this uh

72
00:02:47,920 --> 00:02:52,000
proto property somehow

73
00:02:52,000 --> 00:02:55,040
then we can affect effectively

74
00:02:55,040 --> 00:02:58,239
the global scope so window is the global

75
00:02:58,239 --> 00:02:59,519
scope in javascript

76
00:02:59,519 --> 00:03:01,680
so now we have this size variable

77
00:03:01,680 --> 00:03:02,840
available

78
00:03:02,840 --> 00:03:05,920
so all well and good

79
00:03:05,920 --> 00:03:08,640
um so let's take an example of where

80
00:03:08,640 --> 00:03:10,000
this can go wrong

81
00:03:10,000 --> 00:03:11,920
and where we get what we call prototype

82
00:03:11,920 --> 00:03:13,280
pollution

83
00:03:13,280 --> 00:03:16,239
so this is just a little demo web page

84
00:03:16,239 --> 00:03:18,720
that i put together it's a

85
00:03:18,720 --> 00:03:21,360
a modern single page application with an

86
00:03:21,360 --> 00:03:23,519
about page

87
00:03:23,519 --> 00:03:26,239
and a contact page and we can see we've

88
00:03:26,239 --> 00:03:28,640
got one query string parameter here

89
00:03:28,640 --> 00:03:32,000
page equals home so let's have a look at

90
00:03:32,000 --> 00:03:32,799
the

91
00:03:32,799 --> 00:03:35,360
html source for this web page and see

92
00:03:35,360 --> 00:03:37,519
what it looks like

93
00:03:37,519 --> 00:03:41,280
so here we go let's move this out of the

94
00:03:41,280 --> 00:03:43,519
way a little bit

95
00:03:43,519 --> 00:03:46,400
or at least we'll try to not working so

96
00:03:46,400 --> 00:03:47,440
well

97
00:03:47,440 --> 00:03:50,400
let's move this one instead here we go

98
00:03:50,400 --> 00:03:51,120
so

99
00:03:51,120 --> 00:03:53,519
a fairly standard looking html page

100
00:03:53,519 --> 00:03:54,799
we've got two

101
00:03:54,799 --> 00:03:56,959
uh different bits of javascript included

102
00:03:56,959 --> 00:03:58,879
here so we have jquery

103
00:03:58,879 --> 00:04:00,799
and we also have this jquery plugin

104
00:04:00,799 --> 00:04:02,560
query object

105
00:04:02,560 --> 00:04:05,120
uh library being included and i've

106
00:04:05,120 --> 00:04:06,799
included that for a fairly specific

107
00:04:06,799 --> 00:04:08,400
reason

108
00:04:08,400 --> 00:04:10,720
but we'll get to that in a second so we

109
00:04:10,720 --> 00:04:12,879
have our h1 tag which we can see in the

110
00:04:12,879 --> 00:04:14,239
page here

111
00:04:14,239 --> 00:04:16,478
we have a div with an id of content and

112
00:04:16,478 --> 00:04:17,759
then we've got some javascript that will

113
00:04:17,759 --> 00:04:19,120
have a nice

114
00:04:19,120 --> 00:04:22,160
detailed look at so we have an object

115
00:04:22,160 --> 00:04:24,400
here called pages

116
00:04:24,400 --> 00:04:26,320
because you know a single application

117
00:04:26,320 --> 00:04:28,000
page applications of the future for

118
00:04:28,000 --> 00:04:31,120
sure so uh in here

119
00:04:31,120 --> 00:04:34,560
is a set of properties

120
00:04:34,560 --> 00:04:37,120
and each one has some html in it so one

121
00:04:37,120 --> 00:04:37,840
for the home page

122
00:04:37,840 --> 00:04:39,199
one for the about page one for the

123
00:04:39,199 --> 00:04:41,680
contact page that we've just seen

124
00:04:41,680 --> 00:04:44,080
and then what this javascript does is it

125
00:04:44,080 --> 00:04:44,880
uses

126
00:04:44,880 --> 00:04:48,960
this jquery query jquery query is a bit

127
00:04:48,960 --> 00:04:50,240
of a mouthful isn't it

128
00:04:50,240 --> 00:04:52,880
uh plugin to get the page query string

129
00:04:52,880 --> 00:04:56,160
parameter that we can see here

130
00:04:56,160 --> 00:04:59,759
and then checks if it's empty if it is

131
00:04:59,759 --> 00:05:02,000
then it redirects us to page equals hum

132
00:05:02,000 --> 00:05:04,080
so we can see that happen

133
00:05:04,080 --> 00:05:07,919
like that and then if it's a known page

134
00:05:07,919 --> 00:05:08,880
we set the page

135
00:05:08,880 --> 00:05:12,000
content so we use that as a key for the

136
00:05:12,000 --> 00:05:13,199
pages object

137
00:05:13,199 --> 00:05:15,680
and if it's not undefined we use jquery

138
00:05:15,680 --> 00:05:16,479
to

139
00:05:16,479 --> 00:05:19,520
fetch that content div and set its html

140
00:05:19,520 --> 00:05:22,720
to be whatever the html is

141
00:05:22,720 --> 00:05:27,759
in this object so when we click about

142
00:05:27,759 --> 00:05:29,600
we can see we get redirected to page

143
00:05:29,600 --> 00:05:32,639
equals about

144
00:05:33,440 --> 00:05:35,840
and this piece of html here under the

145
00:05:35,840 --> 00:05:36,800
about key

146
00:05:36,800 --> 00:05:40,240
is being put into this div so if we use

147
00:05:40,240 --> 00:05:41,919
the elements view

148
00:05:41,919 --> 00:05:45,520
we can see that the html is there

149
00:05:45,520 --> 00:05:48,639
so that's all fine um and if you were

150
00:05:48,639 --> 00:05:50,479
you know evaluating this page to look

151
00:05:50,479 --> 00:05:52,400
for say dom xss

152
00:05:52,400 --> 00:05:56,000
for example um you might think

153
00:05:56,000 --> 00:05:59,039
that uh it's not vulnerable because you

154
00:05:59,039 --> 00:06:00,880
know we have no control over the content

155
00:06:00,880 --> 00:06:01,840
here

156
00:06:01,840 --> 00:06:04,880
um we've got one parameter

157
00:06:04,880 --> 00:06:07,600
that um is used is just the page

158
00:06:07,600 --> 00:06:09,840
parameter and all it's used is a key

159
00:06:09,840 --> 00:06:13,199
of this array uh

160
00:06:13,199 --> 00:06:15,759
so you know how can we get control over

161
00:06:15,759 --> 00:06:17,600
some content in the page and maybe

162
00:06:17,600 --> 00:06:20,720
get some domex success working and the

163
00:06:20,720 --> 00:06:22,639
answer here is as you might have guessed

164
00:06:22,639 --> 00:06:26,000
prototype pollution so what we want to

165
00:06:26,000 --> 00:06:27,120
do

166
00:06:27,120 --> 00:06:30,479
is affect the prototype of this page's

167
00:06:30,479 --> 00:06:32,880
object

168
00:06:32,880 --> 00:06:36,400
and set our own value somehow

169
00:06:36,400 --> 00:06:39,600
uh and it turns out this uh

170
00:06:39,600 --> 00:06:43,759
particular jquery plugin query object

171
00:06:43,759 --> 00:06:47,039
uh plugin is vulnerable to

172
00:06:47,039 --> 00:06:49,440
prototype pollution and i know that

173
00:06:49,440 --> 00:06:50,160
thanks to this

174
00:06:50,160 --> 00:06:52,800
uh incredibly useful repo from blackfan

175
00:06:52,800 --> 00:06:53,759
aka sergei

176
00:06:53,759 --> 00:06:56,639
bobrov sergey sergey i don't know which

177
00:06:56,639 --> 00:06:57,039
uh

178
00:06:57,039 --> 00:07:00,240
i apologize sir j or sergey

179
00:07:00,240 --> 00:07:02,080
which lists a whole bunch of different

180
00:07:02,080 --> 00:07:03,360
javascript libraries which are

181
00:07:03,360 --> 00:07:05,199
vulnerable to prototype pollution

182
00:07:05,199 --> 00:07:07,840
um and some ways that you can try and

183
00:07:07,840 --> 00:07:09,520
use that so

184
00:07:09,520 --> 00:07:12,560
we can see here suggested uh

185
00:07:12,560 --> 00:07:14,960
problem score proto double underscore

186
00:07:14,960 --> 00:07:16,560
test equals test

187
00:07:16,560 --> 00:07:20,319
so we can do something like this

188
00:07:20,319 --> 00:07:23,440
on the query string here

189
00:07:25,039 --> 00:07:27,199
and see if it worked and the way we can

190
00:07:27,199 --> 00:07:29,120
do that is just in the console we can

191
00:07:29,120 --> 00:07:30,479
look at the test

192
00:07:30,479 --> 00:07:32,319
variable and we can see it's equal to

193
00:07:32,319 --> 00:07:34,639
test and if we change it to

194
00:07:34,639 --> 00:07:37,520
something else match the keyboard a

195
00:07:37,520 --> 00:07:39,599
little bit

196
00:07:39,599 --> 00:07:40,880
then we can say it's equal to that

197
00:07:40,880 --> 00:07:43,199
instead

198
00:07:43,199 --> 00:07:46,720
but also really importantly that pages

199
00:07:46,720 --> 00:07:47,360
variable

200
00:07:47,360 --> 00:07:49,280
if you remember the one with uh all of

201
00:07:49,280 --> 00:07:51,680
our html in it

202
00:07:51,680 --> 00:07:55,120
now has a test property set to

203
00:07:55,120 --> 00:07:58,400
this value and that's because it shares

204
00:07:58,400 --> 00:08:02,960
a prototype with the window object

205
00:08:02,960 --> 00:08:06,319
so what we can do

206
00:08:06,319 --> 00:08:09,680
is set the page key to be some random

207
00:08:09,680 --> 00:08:10,560
value

208
00:08:10,560 --> 00:08:13,759
um let's say foo

209
00:08:13,759 --> 00:08:15,440
and then we can use prototype pollution

210
00:08:15,440 --> 00:08:17,520
to say that foo

211
00:08:17,520 --> 00:08:21,120
is equal to some content

212
00:08:21,120 --> 00:08:23,520
and now our content appears in the page

213
00:08:23,520 --> 00:08:24,560
so

214
00:08:24,560 --> 00:08:28,000
we're only really one step off uh

215
00:08:28,000 --> 00:08:31,039
having some kind of

216
00:08:31,039 --> 00:08:34,640
uh exploit here some domex success

217
00:08:34,640 --> 00:08:37,679
so let's use image source

218
00:08:37,679 --> 00:08:40,880
uh empty source and use the on error

219
00:08:40,880 --> 00:08:44,440
event handler to fire off an alert of

220
00:08:44,440 --> 00:08:46,640
document.domain

221
00:08:46,640 --> 00:08:48,240
we're in a query string here so we need

222
00:08:48,240 --> 00:08:50,640
to actually escape this

223
00:08:50,640 --> 00:08:54,399
equals sign percent 3d and with a bit of

224
00:08:54,399 --> 00:08:54,800
luck

225
00:08:54,800 --> 00:08:57,920
we get an alert fired so don't access

226
00:08:57,920 --> 00:09:01,839
through prototype pollution very useful

227
00:09:01,839 --> 00:09:04,880
very handy when it shows up

228
00:09:04,880 --> 00:09:07,200
and like say have a look through this uh

229
00:09:07,200 --> 00:09:08,240
great repository

230
00:09:08,240 --> 00:09:10,160
for all of the different libraries that

231
00:09:10,160 --> 00:09:11,760
can affect this whole

232
00:09:11,760 --> 00:09:13,760
host of information here incredibly

233
00:09:13,760 --> 00:09:15,839
useful

234
00:09:15,839 --> 00:09:18,959
so i love learning about new

235
00:09:18,959 --> 00:09:20,320
vulnerabilities and new ways to do

236
00:09:20,320 --> 00:09:21,440
things and

237
00:09:21,440 --> 00:09:22,560
and that was the same for me when i

238
00:09:22,560 --> 00:09:24,640
learned about prototype pollution

239
00:09:24,640 --> 00:09:27,839
but i also love automation or

240
00:09:27,839 --> 00:09:29,519
more specifically as some of you will

241
00:09:29,519 --> 00:09:32,160
know i like writing tools

242
00:09:32,160 --> 00:09:35,200
and if i discover a new class of

243
00:09:35,200 --> 00:09:36,000
vulnerability

244
00:09:36,000 --> 00:09:38,399
i want to go off and try and find it

245
00:09:38,399 --> 00:09:40,000
everywhere that i can

246
00:09:40,000 --> 00:09:42,000
a lot of people use things like nuclei

247
00:09:42,000 --> 00:09:43,680
for that which is

248
00:09:43,680 --> 00:09:45,680
uh you know it's a great project very

249
00:09:45,680 --> 00:09:47,120
useful um

250
00:09:47,120 --> 00:09:48,720
or maybe they use some of the tools that

251
00:09:48,720 --> 00:09:51,200
i wrote like meg for example

252
00:09:51,200 --> 00:09:53,440
go and search for reflected cross-site

253
00:09:53,440 --> 00:09:54,959
scripting or

254
00:09:54,959 --> 00:09:57,200
maybe sql injection or anything like

255
00:09:57,200 --> 00:09:58,320
that

256
00:09:58,320 --> 00:10:00,160
but we have a bit of a problem doing

257
00:10:00,160 --> 00:10:02,240
that for something like prototype

258
00:10:02,240 --> 00:10:03,519
pollution because this is a

259
00:10:03,519 --> 00:10:06,959
purely client-side vulnerability

260
00:10:06,959 --> 00:10:10,880
you know if i took a test string like

261
00:10:10,959 --> 00:10:14,240
we had originally

262
00:10:14,240 --> 00:10:18,320
just test and test there's nothing about

263
00:10:18,320 --> 00:10:21,600
the page source here that gives away

264
00:10:21,600 --> 00:10:23,120
that this page is vulnerable to

265
00:10:23,120 --> 00:10:25,120
prototype pollution short of maybe you

266
00:10:25,120 --> 00:10:27,200
know fingerprinting known vulnerable

267
00:10:27,200 --> 00:10:30,560
javascript libraries but even then

268
00:10:30,560 --> 00:10:34,240
you know that can be error prone because

269
00:10:34,240 --> 00:10:36,079
we can't necessarily rely on the file

270
00:10:36,079 --> 00:10:38,560
name where of the javascript library

271
00:10:38,560 --> 00:10:40,399
when things have all been concatenated

272
00:10:40,399 --> 00:10:42,160
and bundled into one

273
00:10:42,160 --> 00:10:45,040
um single javascript file with just a

274
00:10:45,040 --> 00:10:47,600
hash as its name

275
00:10:47,600 --> 00:10:49,920
and you know we also aren't going to

276
00:10:49,920 --> 00:10:52,160
spot any libraries that we don't already

277
00:10:52,160 --> 00:10:53,440
know about we're not going to find

278
00:10:53,440 --> 00:10:56,800
anything novel that way so

279
00:10:56,800 --> 00:10:59,920
what i would like to suggest is that we

280
00:10:59,920 --> 00:11:01,760
use a headless browser

281
00:11:01,760 --> 00:11:04,720
to go off and try and find this

282
00:11:04,720 --> 00:11:07,200
particular kind of issue

283
00:11:07,200 --> 00:11:10,079
and because i like go i'm going to use

284
00:11:10,079 --> 00:11:12,839
the chrome dp

285
00:11:12,839 --> 00:11:16,240
library so chrome dp

286
00:11:16,240 --> 00:11:19,279
as the readme will tell us is a faster

287
00:11:19,279 --> 00:11:21,200
simpler way to drive browsers supporting

288
00:11:21,200 --> 00:11:21,920
the chrome

289
00:11:21,920 --> 00:11:25,120
devtools protocol in go without any kind

290
00:11:25,120 --> 00:11:27,120
of external dependencies like selenium

291
00:11:27,120 --> 00:11:28,880
or phantom js

292
00:11:28,880 --> 00:11:30,880
and that sounds like exactly the kind of

293
00:11:30,880 --> 00:11:32,399
thing that i want

294
00:11:32,399 --> 00:11:35,120
so i'm going to take you through how i

295
00:11:35,120 --> 00:11:35,680
would

296
00:11:35,680 --> 00:11:39,040
prototype and then build

297
00:11:39,040 --> 00:11:41,360
a tool to detect this vulnerability

298
00:11:41,360 --> 00:11:42,720
using chrome dp

299
00:11:42,720 --> 00:11:46,399
so let's give it a go so this is the the

300
00:11:46,399 --> 00:11:47,839
library that we're going to use

301
00:11:47,839 --> 00:11:49,760
i'm going to switch to a terminal and i

302
00:11:49,760 --> 00:11:51,360
have a directory here already set up

303
00:11:51,360 --> 00:11:53,680
called run.js

304
00:11:53,680 --> 00:11:55,200
but there's only one thing in here which

305
00:11:55,200 --> 00:11:57,920
is a list of urls that i've pre-prepared

306
00:11:57,920 --> 00:12:00,079
and we'll come back to those later so

307
00:12:00,079 --> 00:12:01,120
i'm going to make a new

308
00:12:01,120 --> 00:12:04,320
go file called main.go

309
00:12:05,600 --> 00:12:07,519
apparently i already have a swap file

310
00:12:07,519 --> 00:12:09,440
for main.go so i'm just going to remove

311
00:12:09,440 --> 00:12:11,839
that

312
00:12:12,800 --> 00:12:16,320
and i'm using the vimgo plugin which

313
00:12:16,320 --> 00:12:18,800
gives me this template automatically

314
00:12:18,800 --> 00:12:21,040
when i start a new go program

315
00:12:21,040 --> 00:12:22,639
but we'll run through it quickly what it

316
00:12:22,639 --> 00:12:24,800
all means anyway if you're not

317
00:12:24,800 --> 00:12:26,880
super familiar with go syntax i'll try

318
00:12:26,880 --> 00:12:27,920
and explain

319
00:12:27,920 --> 00:12:30,560
as best as i can but unfortunately we

320
00:12:30,560 --> 00:12:32,480
don't really have the time to go through

321
00:12:32,480 --> 00:12:33,040
a full

322
00:12:33,040 --> 00:12:37,040
go tutorial so we're in package main

323
00:12:37,040 --> 00:12:39,440
that means we are writing an executable

324
00:12:39,440 --> 00:12:41,200
so in go code you can have

325
00:12:41,200 --> 00:12:43,920
libraries so this might be package my

326
00:12:43,920 --> 00:12:45,279
super awesome library

327
00:12:45,279 --> 00:12:47,120
for example it can be included in other

328
00:12:47,120 --> 00:12:49,040
go programs

329
00:12:49,040 --> 00:12:51,120
but if we're writing an executable we

330
00:12:51,120 --> 00:12:52,720
want package main

331
00:12:52,720 --> 00:12:54,240
we've imported the thumped package by

332
00:12:54,240 --> 00:12:56,880
default because we have from.println

333
00:12:56,880 --> 00:12:59,519
and we have a main function here which

334
00:12:59,519 --> 00:13:00,800
is what runs when you

335
00:13:00,800 --> 00:13:04,560
execute a go executable a bit like in c

336
00:13:04,560 --> 00:13:08,880
and we have the main function now

337
00:13:08,880 --> 00:13:11,920
i like many other people in this world

338
00:13:11,920 --> 00:13:15,279
i'm relatively lazy and if i can get

339
00:13:15,279 --> 00:13:17,519
away with not doing very much work

340
00:13:17,519 --> 00:13:21,839
i will do that and as luck would have it

341
00:13:21,839 --> 00:13:24,399
the maintainers of chrome dp have my

342
00:13:24,399 --> 00:13:25,120
back here

343
00:13:25,120 --> 00:13:27,760
so they provide an examples repository

344
00:13:27,760 --> 00:13:28,880
containing some

345
00:13:28,880 --> 00:13:30,800
more complex examples and i'm going to

346
00:13:30,800 --> 00:13:32,240
use that

347
00:13:32,240 --> 00:13:36,240
so our plan of attack is we want to load

348
00:13:36,240 --> 00:13:39,360
a url like this have some kind of

349
00:13:39,360 --> 00:13:41,839
prototype pollution

350
00:13:41,839 --> 00:13:46,639
uh payload in the um

351
00:13:46,639 --> 00:13:48,880
query string and then we're going to

352
00:13:48,880 --> 00:13:49,839
look to see

353
00:13:49,839 --> 00:13:52,320
if we've managed to set a variable in

354
00:13:52,320 --> 00:13:53,680
the global scope

355
00:13:53,680 --> 00:13:56,160
and if that's true then we should have

356
00:13:56,160 --> 00:13:57,519
prototype pollution

357
00:13:57,519 --> 00:14:00,079
it doesn't necessarily tell us if we

358
00:14:00,079 --> 00:14:01,040
have

359
00:14:01,040 --> 00:14:03,279
you know if the page is going to be

360
00:14:03,279 --> 00:14:05,440
vulnerable to cross-site scripting

361
00:14:05,440 --> 00:14:07,199
but it does give us a pretty big hint

362
00:14:07,199 --> 00:14:08,560
that it's quite likely

363
00:14:08,560 --> 00:14:11,279
or it's at least possible so let's go

364
00:14:11,279 --> 00:14:13,360
with that

365
00:14:13,360 --> 00:14:16,079
so there's an example here in the

366
00:14:16,079 --> 00:14:18,720
examples repository called eval

367
00:14:18,720 --> 00:14:21,120
which is what i'm going to use uh and if

368
00:14:21,120 --> 00:14:23,519
we take a look at it

369
00:14:23,519 --> 00:14:25,199
we can see it does something with a

370
00:14:25,199 --> 00:14:27,120
context we don't know about that yet

371
00:14:27,120 --> 00:14:28,160
we'll have a look

372
00:14:28,160 --> 00:14:31,040
um and it just chrome dp dot run it

373
00:14:31,040 --> 00:14:32,480
navigates to a page

374
00:14:32,480 --> 00:14:35,360
waits until some element is visible and

375
00:14:35,360 --> 00:14:35,760
then

376
00:14:35,760 --> 00:14:38,880
it evaluates some javascript

377
00:14:38,880 --> 00:14:40,959
uh and puts it into some kind of

378
00:14:40,959 --> 00:14:43,040
response variable so

379
00:14:43,040 --> 00:14:46,639
this feels like the kind of thing

380
00:14:46,639 --> 00:14:49,600
that we want or at least pretty close so

381
00:14:49,600 --> 00:14:50,399
uh

382
00:14:50,399 --> 00:14:54,000
let's just uh copy and paste it

383
00:14:54,000 --> 00:14:57,199
put it into our window um

384
00:14:57,199 --> 00:15:00,320
we need to import

385
00:15:00,320 --> 00:15:04,639
that package as well so let's do that

386
00:15:05,360 --> 00:15:09,519
so import looks like i copied the quotes

387
00:15:09,519 --> 00:15:12,320
as well there we go

388
00:15:12,320 --> 00:15:15,120
apply some formatting and in theory if

389
00:15:15,120 --> 00:15:17,120
we run this

390
00:15:17,120 --> 00:15:20,480
we should load google.com

391
00:15:20,480 --> 00:15:23,920
uh wait for a main some element with an

392
00:15:23,920 --> 00:15:25,600
id of main to be visible

393
00:15:25,600 --> 00:15:27,600
and then we should evaluate that bit of

394
00:15:27,600 --> 00:15:28,800
javascript

395
00:15:28,800 --> 00:15:30,240
and then we should print it out window

396
00:15:30,240 --> 00:15:33,759
object keys so let's see if that works

397
00:15:33,759 --> 00:15:37,199
and it may well not and if it doesn't

398
00:15:37,199 --> 00:15:40,240
i think the main most likely reason is

399
00:15:40,240 --> 00:15:43,199
going to be that that

400
00:15:43,440 --> 00:15:45,440
element with an id of main doesn't exist

401
00:15:45,440 --> 00:15:47,199
so let's just drop that line out

402
00:15:47,199 --> 00:15:49,519
we probably don't want that anyway give

403
00:15:49,519 --> 00:15:50,320
that a run

404
00:15:50,320 --> 00:15:53,440
that looks like it did something so this

405
00:15:53,440 --> 00:15:54,720
is a list of

406
00:15:54,720 --> 00:15:57,920
all of the variables uh on the window

407
00:15:57,920 --> 00:15:59,360
object

408
00:15:59,360 --> 00:16:04,160
on google.com uh so

409
00:16:04,480 --> 00:16:06,320
it's working you know it's launching a

410
00:16:06,320 --> 00:16:09,120
headless browser and i think for me

411
00:16:09,120 --> 00:16:12,160
when making tools the important thing is

412
00:16:12,160 --> 00:16:14,560
to move from one working thing to

413
00:16:14,560 --> 00:16:16,079
another working thing

414
00:16:16,079 --> 00:16:19,440
in as small steps as possible if you

415
00:16:19,440 --> 00:16:21,759
set out to write a large complex

416
00:16:21,759 --> 00:16:23,279
application

417
00:16:23,279 --> 00:16:27,279
all at once it might work

418
00:16:27,279 --> 00:16:28,959
but you dramatically increase your

419
00:16:28,959 --> 00:16:31,440
chances of having a working program if

420
00:16:31,440 --> 00:16:32,399
you

421
00:16:32,399 --> 00:16:34,800
start with something working and make

422
00:16:34,800 --> 00:16:38,000
small modifications until

423
00:16:38,000 --> 00:16:40,480
uh you're finished or until it stops

424
00:16:40,480 --> 00:16:41,920
working i guess

425
00:16:41,920 --> 00:16:43,920
so let's make some changes to this to

426
00:16:43,920 --> 00:16:46,399
try and detect prototype pollution

427
00:16:46,399 --> 00:16:49,440
in our example page

428
00:16:49,440 --> 00:16:52,720
so let's take uh this

429
00:16:52,720 --> 00:16:55,440
url here

430
00:16:57,040 --> 00:17:00,079
and we will load

431
00:17:00,079 --> 00:17:04,400
that one instead so let me go into here

432
00:17:04,400 --> 00:17:07,039
change that url to one that we control

433
00:17:07,039 --> 00:17:09,039
and we want to know something about this

434
00:17:09,039 --> 00:17:12,319
test variable um and in fact

435
00:17:12,319 --> 00:17:14,319
test is maybe feels like a bit too

436
00:17:14,319 --> 00:17:16,079
likely to already exist so i'm going to

437
00:17:16,079 --> 00:17:17,439
change it to

438
00:17:17,439 --> 00:17:20,480
a nonsense word futile and i'm going to

439
00:17:20,480 --> 00:17:21,280
set it to

440
00:17:21,280 --> 00:17:23,839
moodle don't know why they're just

441
00:17:23,839 --> 00:17:25,679
always the the two words that i end up

442
00:17:25,679 --> 00:17:28,079
using

443
00:17:28,160 --> 00:17:31,200
so the javascript that we want to run is

444
00:17:31,200 --> 00:17:32,000
going to be something that

445
00:17:32,000 --> 00:17:34,799
tells us whether that futile variable is

446
00:17:34,799 --> 00:17:37,440
set on the window object so

447
00:17:37,440 --> 00:17:40,960
we could do something like

448
00:17:41,120 --> 00:17:44,400
just get the output of it so

449
00:17:44,400 --> 00:17:46,240
if we just run foodle or maybe

450
00:17:46,240 --> 00:17:48,720
window.foodle or something

451
00:17:48,720 --> 00:17:50,880
and we try and put the response into

452
00:17:50,880 --> 00:17:52,160
just a regular string

453
00:17:52,160 --> 00:17:56,559
we don't want a list of strings anymore

454
00:17:56,559 --> 00:17:58,320
and this is not the window object keys

455
00:17:58,320 --> 00:18:00,960
this is going to be

456
00:18:00,960 --> 00:18:04,240
the value of futol

457
00:18:04,240 --> 00:18:06,160
and we run that and let's see what it

458
00:18:06,160 --> 00:18:07,440
does

459
00:18:07,440 --> 00:18:10,160
so we have uh the value of foodle is

460
00:18:10,160 --> 00:18:10,799
bootle

461
00:18:10,799 --> 00:18:13,679
so that tells us that this page is

462
00:18:13,679 --> 00:18:15,679
vulnerable

463
00:18:15,679 --> 00:18:19,120
but you know this one exact page in this

464
00:18:19,120 --> 00:18:21,679
one exact configuration this isn't an

465
00:18:21,679 --> 00:18:23,520
especially useful

466
00:18:23,520 --> 00:18:26,000
uh bit of code so let's try and make it

467
00:18:26,000 --> 00:18:28,880
a little bit more useful

468
00:18:28,880 --> 00:18:30,320
you know one of the ways that we could

469
00:18:30,320 --> 00:18:33,039
do that would be to have this

470
00:18:33,039 --> 00:18:36,080
code accept a list of urls

471
00:18:36,080 --> 00:18:39,679
as input and check all of them

472
00:18:39,679 --> 00:18:43,039
somehow and if we did that

473
00:18:43,039 --> 00:18:46,400
we could you know apply this query

474
00:18:46,400 --> 00:18:48,000
string

475
00:18:48,000 --> 00:18:51,120
that we've come up with here to

476
00:18:51,120 --> 00:18:54,000
every single url that comes in and we

477
00:18:54,000 --> 00:18:55,280
would have a fairly

478
00:18:55,280 --> 00:18:57,840
useful but single purpose tool there

479
00:18:57,840 --> 00:18:59,440
that would check for

480
00:18:59,440 --> 00:19:01,600
just prototype pollution in the urls

481
00:19:01,600 --> 00:19:02,720
that you give it with this one

482
00:19:02,720 --> 00:19:04,080
particular payload

483
00:19:04,080 --> 00:19:05,440
or maybe you could build multiple

484
00:19:05,440 --> 00:19:07,280
payloads in

485
00:19:07,280 --> 00:19:09,280
what i'd really like to do is build

486
00:19:09,280 --> 00:19:11,039
something that's a little bit more

487
00:19:11,039 --> 00:19:13,520
flexible so if i come up with anything

488
00:19:13,520 --> 00:19:15,840
else that i want to do

489
00:19:15,840 --> 00:19:17,679
running javascript on lots of different

490
00:19:17,679 --> 00:19:19,280
web pages

491
00:19:19,280 --> 00:19:22,880
i can do that too so

492
00:19:22,880 --> 00:19:25,600
let's start off with just something that

493
00:19:25,600 --> 00:19:27,280
takes a list of urls as

494
00:19:27,280 --> 00:19:30,160
input and runs some javascript on the

495
00:19:30,160 --> 00:19:30,960
page and

496
00:19:30,960 --> 00:19:34,480
prints the result let's give it a go

497
00:19:34,480 --> 00:19:38,720
so we are going to use

498
00:19:38,720 --> 00:19:40,880
uh a thing from the buffalo package

499
00:19:40,880 --> 00:19:43,360
called a scanner to read lines of input

500
00:19:43,360 --> 00:19:46,559
so we'll say sc is a

501
00:19:46,559 --> 00:19:49,600
buffalo new scanner over os

502
00:19:49,600 --> 00:19:53,760
dot stood in

503
00:19:53,760 --> 00:19:55,520
which is going to give us lines of

504
00:19:55,520 --> 00:19:57,760
standard input one after the other

505
00:19:57,760 --> 00:20:01,440
and we'll say for the time that we can

506
00:20:01,440 --> 00:20:06,799
scan the input we will do all of this

507
00:20:06,799 --> 00:20:09,440
effectively

508
00:20:10,400 --> 00:20:13,039
that we were doing before and we're

509
00:20:13,039 --> 00:20:15,280
going to have some url

510
00:20:15,280 --> 00:20:18,080
we'll set equal to u which is going to

511
00:20:18,080 --> 00:20:18,400
be

512
00:20:18,400 --> 00:20:21,360
a c dot text so that gets us whatever

513
00:20:21,360 --> 00:20:23,520
the current line is

514
00:20:23,520 --> 00:20:27,679
that's being read by the scanner

515
00:20:27,679 --> 00:20:30,960
and we'll

516
00:20:30,960 --> 00:20:33,520
instead of loading that url we'll just

517
00:20:33,520 --> 00:20:36,480
load whatever you are we're given

518
00:20:36,480 --> 00:20:38,640
uh and then we'll evaluate

519
00:20:38,640 --> 00:20:42,080
window.footall for now why not

520
00:20:42,080 --> 00:20:45,280
uh and this is log fatal

521
00:20:45,280 --> 00:20:46,799
in the middle of the loop i'm not

522
00:20:46,799 --> 00:20:48,960
especially keen on

523
00:20:48,960 --> 00:20:53,360
so let's change this instead to a log

524
00:20:53,360 --> 00:20:56,799
dot printf where we print the string

525
00:20:56,799 --> 00:20:58,880
value of the error and say

526
00:20:58,880 --> 00:21:01,200
there has been an error of some kind we

527
00:21:01,200 --> 00:21:02,480
don't need a new line because we're

528
00:21:02,480 --> 00:21:04,320
using a log package

529
00:21:04,320 --> 00:21:07,600
and then we will continue in this loop

530
00:21:07,600 --> 00:21:11,600
instead now

531
00:21:11,600 --> 00:21:14,240
if i try and run this program it's going

532
00:21:14,240 --> 00:21:15,760
to tell me that i've got some

533
00:21:15,760 --> 00:21:17,280
some packages that haven't included so

534
00:21:17,280 --> 00:21:19,120
i'll just do that real quick

535
00:21:19,120 --> 00:21:21,200
and if i run that it's just going to sit

536
00:21:21,200 --> 00:21:23,039
there and the reason it's sitting there

537
00:21:23,039 --> 00:21:26,320
is it's waiting for us

538
00:21:26,320 --> 00:21:29,440
to put in some kind of url

539
00:21:29,440 --> 00:21:30,880
and we can see we got an error on

540
00:21:30,880 --> 00:21:33,520
example.com encountered an undefined

541
00:21:33,520 --> 00:21:36,159
value and that's because it's looking

542
00:21:36,159 --> 00:21:37,919
for window.footall right

543
00:21:37,919 --> 00:21:40,640
and that doesn't exist because why would

544
00:21:40,640 --> 00:21:42,400
it

545
00:21:42,400 --> 00:21:45,919
so what i'm going to do is say actually

546
00:21:45,919 --> 00:21:47,520
i'll use bang to execute the shell

547
00:21:47,520 --> 00:21:50,640
command i'll run go build

548
00:21:50,640 --> 00:21:54,240
in the current directory and

549
00:21:54,240 --> 00:21:57,280
i want to cat my urls file

550
00:21:57,280 --> 00:22:00,640
into this run.js program that

551
00:22:00,640 --> 00:22:02,480
we've been writing so we were in a

552
00:22:02,480 --> 00:22:04,159
directory called run.js

553
00:22:04,159 --> 00:22:07,200
called run.js and

554
00:22:07,200 --> 00:22:09,200
therefore go decided that's what the

555
00:22:09,200 --> 00:22:10,960
binary should be called

556
00:22:10,960 --> 00:22:13,360
so let's run that and see what happens

557
00:22:13,360 --> 00:22:14,159
so we got

558
00:22:14,159 --> 00:22:16,480
counted undefined values and one of them

559
00:22:16,480 --> 00:22:17,760
we got the value of foodle

560
00:22:17,760 --> 00:22:21,200
is brutal we don't know what for

561
00:22:21,200 --> 00:22:24,159
so uh let's fix that and instead of

562
00:22:24,159 --> 00:22:25,200
saying

563
00:22:25,200 --> 00:22:29,039
the value of futile let's just put in

564
00:22:29,039 --> 00:22:31,440
the url that we were calling instead and

565
00:22:31,440 --> 00:22:33,919
see what that looks like

566
00:22:33,919 --> 00:22:35,520
so we're running we expect the output to

567
00:22:35,520 --> 00:22:37,600
be uh

568
00:22:37,600 --> 00:22:39,600
oh i heard the wrong thing i want to run

569
00:22:39,600 --> 00:22:42,559
my go build command again

570
00:22:42,559 --> 00:22:44,400
so we'll run that we count undefined

571
00:22:44,400 --> 00:22:46,720
values for some of them

572
00:22:46,720 --> 00:22:49,919
uh and on others on this one

573
00:22:49,919 --> 00:22:53,039
we got this value bootle

574
00:22:53,039 --> 00:22:56,480
so that works okay uh it's a little bit

575
00:22:56,480 --> 00:22:57,600
strange though

576
00:22:57,600 --> 00:23:00,159
to always just run this window.futile uh

577
00:23:00,159 --> 00:23:02,480
i wouldn't expect the user of this tool

578
00:23:02,480 --> 00:23:03,679
to be able to

579
00:23:03,679 --> 00:23:06,559
you know guess or remember that that's

580
00:23:06,559 --> 00:23:10,480
for some reason uh what you had to do

581
00:23:10,480 --> 00:23:13,679
so let's change this instead to be

582
00:23:13,679 --> 00:23:16,720
some value called user.js and we're

583
00:23:16,720 --> 00:23:20,080
going to accept that as a flag

584
00:23:20,840 --> 00:23:25,760
so we'll use the go flag package

585
00:23:26,480 --> 00:23:30,799
and we will make a string variable

586
00:23:30,799 --> 00:23:33,679
and let's see if i can remember the

587
00:23:33,679 --> 00:23:34,880
order of

588
00:23:34,880 --> 00:23:37,760
the parameters here so we're going to

589
00:23:37,760 --> 00:23:38,400
have far

590
00:23:38,400 --> 00:23:41,600
user.js which is a string

591
00:23:41,600 --> 00:23:45,520
and then a string variable of user.js

592
00:23:45,520 --> 00:23:49,279
with a default of empty

593
00:23:49,279 --> 00:23:51,039
trying to get this right oh no first

594
00:23:51,039 --> 00:23:53,679
comes the name so we'll make that j

595
00:23:53,679 --> 00:23:56,960
uh a default of empty and then the help

596
00:23:56,960 --> 00:23:59,039
output for is going to be

597
00:23:59,039 --> 00:24:03,440
the js to run on each page

598
00:24:03,440 --> 00:24:08,320
okay so now if we run this

599
00:24:08,320 --> 00:24:10,080
tell us we haven't got the flag package

600
00:24:10,080 --> 00:24:12,639
now we do

601
00:24:13,279 --> 00:24:16,240
and it's going to go off and run some

602
00:24:16,240 --> 00:24:18,400
empty javascript on every page

603
00:24:18,400 --> 00:24:20,559
but if we change our command to say

604
00:24:20,559 --> 00:24:22,400
let's include

605
00:24:22,400 --> 00:24:25,679
window.futal again

606
00:24:25,760 --> 00:24:27,760
hopefully without a bit of luck we'll

607
00:24:27,760 --> 00:24:29,440
see one of them in there

608
00:24:29,440 --> 00:24:31,760
works just fine which is great that's

609
00:24:31,760 --> 00:24:34,559
exactly what we wanted

610
00:24:34,559 --> 00:24:36,799
cool

611
00:24:37,760 --> 00:24:42,000
so we

612
00:24:42,000 --> 00:24:45,360
have a kind of reasonably working tool i

613
00:24:45,360 --> 00:24:47,440
think i think maybe the output could

614
00:24:47,440 --> 00:24:50,480
use a little bit of fixing up uh

615
00:24:50,480 --> 00:24:53,440
so i think the log of the error for

616
00:24:53,440 --> 00:24:54,960
example

617
00:24:54,960 --> 00:24:58,080
could probably stand to tell us what

618
00:24:58,080 --> 00:25:01,760
uh url we were using so let's fix that

619
00:25:01,760 --> 00:25:04,000
fix that

620
00:25:04,000 --> 00:25:06,320
um

621
00:25:08,720 --> 00:25:11,120
and you know let's have a quick play

622
00:25:11,120 --> 00:25:11,840
with the tool

623
00:25:11,840 --> 00:25:13,360
and make sure it does exactly what we

624
00:25:13,360 --> 00:25:15,120
want

625
00:25:15,120 --> 00:25:18,799
so our urls file kind of already has

626
00:25:18,799 --> 00:25:19,279
these

627
00:25:19,279 --> 00:25:24,080
payloads in here and we could

628
00:25:24,400 --> 00:25:26,880
have them in there manually or we could

629
00:25:26,880 --> 00:25:28,000
add them in with some

630
00:25:28,000 --> 00:25:31,120
kind of bash magic

631
00:25:31,120 --> 00:25:35,039
so if we pretend

632
00:25:35,039 --> 00:25:40,960
for example that we only had the

633
00:25:40,960 --> 00:25:43,120
uh first part of the url without the

634
00:25:43,120 --> 00:25:44,640
path or anything like that we could add

635
00:25:44,640 --> 00:25:46,400
it in that way

636
00:25:46,400 --> 00:25:49,440
so we could take

637
00:25:49,760 --> 00:25:51,279
now i have to try and remember how to

638
00:25:51,279 --> 00:25:53,600
use my own tool

639
00:25:53,600 --> 00:25:56,720
uh let's have a look at the help output

640
00:25:56,720 --> 00:25:58,080
for unfill

641
00:25:58,080 --> 00:25:59,760
so unfail is a tool i wrote for pulling

642
00:25:59,760 --> 00:26:02,240
up our urls

643
00:26:02,240 --> 00:26:06,320
so we might have the

644
00:26:06,320 --> 00:26:10,159
scheme which is percent s

645
00:26:10,159 --> 00:26:13,360
and then we want the domain which

646
00:26:13,360 --> 00:26:17,039
is percent d and then we probably want

647
00:26:17,039 --> 00:26:20,159
the path as well which is p so there we

648
00:26:20,159 --> 00:26:23,039
go we've got those all stripped off

649
00:26:23,039 --> 00:26:26,000
uh and then we could do something like

650
00:26:26,000 --> 00:26:26,400
uh

651
00:26:26,400 --> 00:26:29,919
awk print dollar one which is just the

652
00:26:29,919 --> 00:26:32,240
url by itself and then we could append

653
00:26:32,240 --> 00:26:33,840
the query string that way so we could

654
00:26:33,840 --> 00:26:34,159
say

655
00:26:34,159 --> 00:26:36,720
proto

656
00:26:37,840 --> 00:26:39,440
let's use something other than football

657
00:26:39,440 --> 00:26:41,039
let's just use foo

658
00:26:41,039 --> 00:26:43,360
it's equal to bar and that gives us a

659
00:26:43,360 --> 00:26:45,360
whole bunch of urls

660
00:26:45,360 --> 00:26:48,080
that have this query string appended to

661
00:26:48,080 --> 00:26:48,640
them

662
00:26:48,640 --> 00:26:51,360
and then we can run that through our

663
00:26:51,360 --> 00:26:52,080
run.js

664
00:26:52,080 --> 00:26:55,440
program give it some javascript and say

665
00:26:55,440 --> 00:26:58,880
well we want to know the value of window

666
00:26:58,880 --> 00:27:04,320
dot thing and see what happens there

667
00:27:04,640 --> 00:27:06,799
so we have uh something i set up

668
00:27:06,799 --> 00:27:08,000
previously here

669
00:27:08,000 --> 00:27:11,679
uh which is prototype pollution example

670
00:27:11,679 --> 00:27:14,320
running elsewhere and that's come up and

671
00:27:14,320 --> 00:27:14,880
said

672
00:27:14,880 --> 00:27:17,919
bar um which is you know

673
00:27:17,919 --> 00:27:21,039
kinda useful output i suppose but we

674
00:27:21,039 --> 00:27:23,200
could probably do something

675
00:27:23,200 --> 00:27:25,279
a little bit better and say let's use a

676
00:27:25,279 --> 00:27:27,600
ternary operator to say

677
00:27:27,600 --> 00:27:31,919
if window.fu exists say

678
00:27:31,919 --> 00:27:36,240
vulnerable otherwise say

679
00:27:36,240 --> 00:27:39,600
not vulnerable instead and we'll see

680
00:27:39,600 --> 00:27:40,880
what that looks like

681
00:27:40,880 --> 00:27:42,880
so now instead of getting that error on

682
00:27:42,880 --> 00:27:46,240
all the ones that don't have the

683
00:27:46,240 --> 00:27:49,679
prototype pollution issue uh

684
00:27:49,679 --> 00:27:53,600
we just say not vulnerable instead

685
00:27:53,600 --> 00:27:56,880
so that works reasonably well i think

686
00:27:56,880 --> 00:27:58,960
we've done a fairly good job there

687
00:27:58,960 --> 00:28:00,159
but there's still probably some

688
00:28:00,159 --> 00:28:01,679
improvements that we can make to this

689
00:28:01,679 --> 00:28:02,640
thing

690
00:28:02,640 --> 00:28:05,039
um one thing i think is pretty common

691
00:28:05,039 --> 00:28:06,240
across a lot of uh

692
00:28:06,240 --> 00:28:08,640
bug bounty hunters especially is that

693
00:28:08,640 --> 00:28:10,720
they like to look at a lot of different

694
00:28:10,720 --> 00:28:13,679
targets so you know i have a list of

695
00:28:13,679 --> 00:28:16,320
several urls how many was it

696
00:28:16,320 --> 00:28:20,000
seven urls how often do you have several

697
00:28:20,000 --> 00:28:21,520
urls you want to look at you could do

698
00:28:21,520 --> 00:28:23,440
that manually there's not really

699
00:28:23,440 --> 00:28:26,320
much point in

700
00:28:26,480 --> 00:28:28,480
you know writing a tool to check seven

701
00:28:28,480 --> 00:28:30,000
urls so

702
00:28:30,000 --> 00:28:32,000
let's add some concurrency to this

703
00:28:32,000 --> 00:28:33,679
instead as well

704
00:28:33,679 --> 00:28:35,600
and hopefully maybe we can check things

705
00:28:35,600 --> 00:28:36,960
a little bit faster by

706
00:28:36,960 --> 00:28:40,000
introducing some parallelism

707
00:28:40,000 --> 00:28:44,320
so um the way i tend to approach adding

708
00:28:44,320 --> 00:28:46,399
parallelism in go programs is to have

709
00:28:46,399 --> 00:28:47,840
some kind of pool of

710
00:28:47,840 --> 00:28:50,880
workers and then use

711
00:28:50,880 --> 00:28:54,399
a thing that go has called channels to

712
00:28:54,399 --> 00:28:57,840
communicate the list of uh

713
00:28:57,840 --> 00:29:00,880
inputs to them so let's do that and see

714
00:29:00,880 --> 00:29:02,640
what that looks like

715
00:29:02,640 --> 00:29:06,559
so we want to set up maybe let's say

716
00:29:06,559 --> 00:29:09,360
five workers for a concurrency level of

717
00:29:09,360 --> 00:29:10,320
five

718
00:29:10,320 --> 00:29:13,360
so we'll say if i is equal to zero i is

719
00:29:13,360 --> 00:29:14,240
less than five

720
00:29:14,240 --> 00:29:16,880
i plus plus go only really has four

721
00:29:16,880 --> 00:29:17,919
loops

722
00:29:17,919 --> 00:29:19,679
um which is actually one of the nice

723
00:29:19,679 --> 00:29:21,039
things about it

724
00:29:21,039 --> 00:29:23,039
as far as i'm concerned we're going to

725
00:29:23,039 --> 00:29:24,240
run a go routine

726
00:29:24,240 --> 00:29:26,320
which looks like this and a go routine

727
00:29:26,320 --> 00:29:27,600
is a function

728
00:29:27,600 --> 00:29:32,320
which runs asynchronously effectively

729
00:29:32,320 --> 00:29:35,200
and what it's going to run is all of

730
00:29:35,200 --> 00:29:41,840
this stuff

731
00:29:43,440 --> 00:29:46,240
uh but it needs to get that from some

732
00:29:46,240 --> 00:29:47,520
kind of input

733
00:29:47,520 --> 00:29:50,720
so let's make a channel and we'll make

734
00:29:50,720 --> 00:29:53,039
that channel called

735
00:29:53,039 --> 00:29:56,640
uh urls so i'll make a channel of

736
00:29:56,640 --> 00:29:59,120
strings

737
00:29:59,679 --> 00:30:02,000
and then each go routine is going to

738
00:30:02,000 --> 00:30:05,200
read from that channel so we'll say

739
00:30:05,200 --> 00:30:08,720
for you is

740
00:30:08,720 --> 00:30:12,399
equal to the range of urls

741
00:30:12,399 --> 00:30:17,039
that's how you read on a channel and go

742
00:30:18,159 --> 00:30:21,200
we are going to take urls off the

743
00:30:21,200 --> 00:30:24,640
ur urls off the urls channel for as long

744
00:30:24,640 --> 00:30:26,799
as we can

745
00:30:26,799 --> 00:30:30,080
and we are going to run our

746
00:30:30,080 --> 00:30:33,360
headless chrome code against them uh

747
00:30:33,360 --> 00:30:34,720
we've got a couple of things to clean up

748
00:30:34,720 --> 00:30:36,960
here though so one of which is this

749
00:30:36,960 --> 00:30:37,600
defer

750
00:30:37,600 --> 00:30:41,440
cancel you know this was kind of fine

751
00:30:41,440 --> 00:30:43,520
using small volumes of urls but if we're

752
00:30:43,520 --> 00:30:44,799
going to be using lots

753
00:30:44,799 --> 00:30:46,399
these are all going to stack up until

754
00:30:46,399 --> 00:30:48,840
we've finished at the very end

755
00:30:48,840 --> 00:30:51,279
so uh we are

756
00:30:51,279 --> 00:30:53,760
not going to call cancel there uh

757
00:30:53,760 --> 00:30:54,559
instead

758
00:30:54,559 --> 00:30:57,679
we are going to run it uh let's say

759
00:30:57,679 --> 00:31:01,200
here uh after we've finished doing all

760
00:31:01,200 --> 00:31:02,960
of the things we need to do

761
00:31:02,960 --> 00:31:05,840
that should be fine

762
00:31:06,240 --> 00:31:09,279
okay but

763
00:31:09,279 --> 00:31:12,720
if we try and use this well uh

764
00:31:12,720 --> 00:31:14,399
so far we're not actually adding any

765
00:31:14,399 --> 00:31:16,080
information to it so

766
00:31:16,080 --> 00:31:19,360
it'll just pretty much uh tell us you

767
00:31:19,360 --> 00:31:20,720
know hue is not declared but

768
00:31:20,720 --> 00:31:23,840
is declared and not used uh

769
00:31:23,840 --> 00:31:27,760
which is uh which one

770
00:31:27,760 --> 00:31:30,880
oh it's this one here so what we

771
00:31:30,880 --> 00:31:32,080
actually need to do here is

772
00:31:32,080 --> 00:31:35,360
send this you text on our urls

773
00:31:35,360 --> 00:31:38,399
channel so that it gets sent to all of

774
00:31:38,399 --> 00:31:41,039
those workers that we've just span up

775
00:31:41,039 --> 00:31:42,960
so let's give that a go instead see how

776
00:31:42,960 --> 00:31:44,960
that works

777
00:31:44,960 --> 00:31:48,480
uh ooh kind of worked

778
00:31:48,480 --> 00:31:50,000
so we've got you know encountered

779
00:31:50,000 --> 00:31:51,519
undefined value that's

780
00:31:51,519 --> 00:31:54,240
fine that's just because we're you know

781
00:31:54,240 --> 00:31:55,760
that's exactly what we're doing and on

782
00:31:55,760 --> 00:31:57,440
these pages there isn't one

783
00:31:57,440 --> 00:32:00,480
but more worryingly we only saw two of

784
00:32:00,480 --> 00:32:01,679
these

785
00:32:01,679 --> 00:32:05,039
uh before they stopped working so

786
00:32:05,039 --> 00:32:07,840
let's try again and we only got two of

787
00:32:07,840 --> 00:32:08,559
them again

788
00:32:08,559 --> 00:32:12,960
so you know what gives um

789
00:32:12,960 --> 00:32:15,120
and the answer is you know we're

790
00:32:15,120 --> 00:32:17,919
creating a pool of workers

791
00:32:17,919 --> 00:32:21,519
reading from this channel of data

792
00:32:21,519 --> 00:32:24,799
and then we are writing uh all of our

793
00:32:24,799 --> 00:32:26,559
input onto that channel so that they

794
00:32:26,559 --> 00:32:28,720
receive it that's fine

795
00:32:28,720 --> 00:32:30,480
but as soon as we've done writing it we

796
00:32:30,480 --> 00:32:32,480
hit the end of our main function

797
00:32:32,480 --> 00:32:35,519
and we stop go doesn't automatically

798
00:32:35,519 --> 00:32:39,200
wait for your work to be finished

799
00:32:39,200 --> 00:32:41,279
because it's perfectly legitimate that

800
00:32:41,279 --> 00:32:44,720
you wouldn't want that to be the case

801
00:32:44,720 --> 00:32:46,159
but we can use a thing called a weight

802
00:32:46,159 --> 00:32:48,399
group to coordinate

803
00:32:48,399 --> 00:32:50,880
our worker pool and wait until they've

804
00:32:50,880 --> 00:32:51,679
all finished

805
00:32:51,679 --> 00:32:54,480
doing their thing before we stop so

806
00:32:54,480 --> 00:32:56,640
let's give that a go

807
00:32:56,640 --> 00:33:00,159
uh so somewhere around here probably

808
00:33:00,159 --> 00:33:01,279
maybe after we

809
00:33:01,279 --> 00:33:04,960
maybe just before we make our uh channel

810
00:33:04,960 --> 00:33:07,600
a view for urls uh we're going to make a

811
00:33:07,600 --> 00:33:09,600
variable called wg

812
00:33:09,600 --> 00:33:10,960
and that's going to be something from

813
00:33:10,960 --> 00:33:13,120
the sync dot weight group

814
00:33:13,120 --> 00:33:16,559
package and every time we launch a go

815
00:33:16,559 --> 00:33:20,399
routine we're going to call wg.add1

816
00:33:20,399 --> 00:33:22,880
to say we're adding one thing to this

817
00:33:22,880 --> 00:33:24,399
weight group

818
00:33:24,399 --> 00:33:27,360
so what a weight group does is you add

819
00:33:27,360 --> 00:33:28,000
tasks

820
00:33:28,000 --> 00:33:30,000
to it or effectively just sort of

821
00:33:30,000 --> 00:33:31,360
placeholders to say

822
00:33:31,360 --> 00:33:34,159
i am doing something and then when

823
00:33:34,159 --> 00:33:35,039
you're done

824
00:33:35,039 --> 00:33:38,720
so when the channel's closed

825
00:33:38,720 --> 00:33:42,960
uh we can call weight group.done

826
00:33:42,960 --> 00:33:46,080
in each go routine

827
00:33:46,240 --> 00:33:48,559
so what that does is when we create the

828
00:33:48,559 --> 00:33:50,240
go routines we add one to the weight

829
00:33:50,240 --> 00:33:51,760
group

830
00:33:51,760 --> 00:33:54,960
we create the go routine which will

831
00:33:54,960 --> 00:33:58,240
read input from the urls channel until

832
00:33:58,240 --> 00:33:59,679
the channel is closed that's the

833
00:33:59,679 --> 00:34:01,679
behavior of range

834
00:34:01,679 --> 00:34:03,440
and then when that's closed we'll call

835
00:34:03,440 --> 00:34:05,120
weight group.done

836
00:34:05,120 --> 00:34:06,960
and that effectively subtracts one from

837
00:34:06,960 --> 00:34:08,480
the weight group

838
00:34:08,480 --> 00:34:10,079
and then down here right at the end of

839
00:34:10,079 --> 00:34:12,000
our program

840
00:34:12,000 --> 00:34:15,280
we can call wg.weight

841
00:34:15,280 --> 00:34:17,040
and that's going to sit there and block

842
00:34:17,040 --> 00:34:20,399
until hopefully at least uh

843
00:34:20,399 --> 00:34:22,639
all of our go routines are finished so

844
00:34:22,639 --> 00:34:24,800
uh let's give that a go and see how it

845
00:34:24,800 --> 00:34:26,079
does

846
00:34:26,079 --> 00:34:30,560
so looks like things worked so we have a

847
00:34:30,560 --> 00:34:33,679
brutal value for this one uh the rest of

848
00:34:33,679 --> 00:34:34,079
them

849
00:34:34,079 --> 00:34:35,599
you know we encountered an undefined

850
00:34:35,599 --> 00:34:37,520
error we can

851
00:34:37,520 --> 00:34:39,760
quit out of this and run our previous

852
00:34:39,760 --> 00:34:42,000
command and give it a go

853
00:34:42,000 --> 00:34:43,918
and and hopefully you can see things

854
00:34:43,918 --> 00:34:46,839
happen a little bit faster now

855
00:34:46,839 --> 00:34:50,399
uh which is pretty good i think that's

856
00:34:50,399 --> 00:34:53,359
something that we would uh want from a

857
00:34:53,359 --> 00:34:53,679
more

858
00:34:53,679 --> 00:34:57,359
concurrent program so

859
00:34:57,359 --> 00:34:58,960
hopefully this gives you a bit of an

860
00:34:58,960 --> 00:35:01,119
idea of uh

861
00:35:01,119 --> 00:35:03,359
firstly what prototype pollution is uh

862
00:35:03,359 --> 00:35:04,240
but also

863
00:35:04,240 --> 00:35:07,040
how i might approach writing a small

864
00:35:07,040 --> 00:35:07,520
tool

865
00:35:07,520 --> 00:35:10,800
in go or you know the principles apply

866
00:35:10,800 --> 00:35:11,119
to

867
00:35:11,119 --> 00:35:13,119
nearly any language i think the

868
00:35:13,119 --> 00:35:14,880
important parts for me are

869
00:35:14,880 --> 00:35:17,839
have a problem to solve

870
00:35:18,640 --> 00:35:22,160
but as you are working move from

871
00:35:22,160 --> 00:35:25,680
a small working program in small steps

872
00:35:25,680 --> 00:35:29,280
to your eventual working and potentially

873
00:35:29,280 --> 00:35:32,320
complex program instead and also

874
00:35:32,320 --> 00:35:34,160
you know where there's very little

875
00:35:34,160 --> 00:35:37,200
overhead to doing so

876
00:35:37,200 --> 00:35:40,480
uh it would be a really good idea to

877
00:35:40,480 --> 00:35:41,680
make a tool

878
00:35:41,680 --> 00:35:44,880
more generally useful so to give you an

879
00:35:44,880 --> 00:35:47,040
idea of what i mean

880
00:35:47,040 --> 00:35:49,760
if i take my list of urls i can run

881
00:35:49,760 --> 00:35:51,119
through this run.js

882
00:35:51,119 --> 00:35:54,640
program and let's say i wanted to know

883
00:35:54,640 --> 00:35:57,118
about

884
00:35:57,760 --> 00:36:00,960
the oh what's a good example

885
00:36:00,960 --> 00:36:03,400
any cookies that were set so

886
00:36:03,400 --> 00:36:06,000
document.cookie

887
00:36:06,000 --> 00:36:09,200
uh so i can run this uh and i can see

888
00:36:09,200 --> 00:36:10,839
that on

889
00:36:10,839 --> 00:36:12,960
tomtomnum.com

890
00:36:12,960 --> 00:36:15,520
not being able to say your own nicknames

891
00:36:15,520 --> 00:36:16,560
pretty bad

892
00:36:16,560 --> 00:36:19,760
there's these utma and utmc cookies

893
00:36:19,760 --> 00:36:20,720
being set

894
00:36:20,720 --> 00:36:22,640
and on the other ones there isn't really

895
00:36:22,640 --> 00:36:25,118
anything

896
00:36:25,200 --> 00:36:29,280
or maybe we might want to

897
00:36:29,280 --> 00:36:32,400
look for uh links

898
00:36:32,400 --> 00:36:36,640
that are in the page so we might say

899
00:36:36,640 --> 00:36:40,640
document dot get elements

900
00:36:40,640 --> 00:36:43,680
by tag name

901
00:36:43,839 --> 00:36:48,000
and have the a tag

902
00:36:48,000 --> 00:36:49,839
and we will use the spread operator to

903
00:36:49,839 --> 00:36:51,680
turn these into an array

904
00:36:51,680 --> 00:36:54,960
so we can use a map operator on them

905
00:36:54,960 --> 00:36:58,320
take each node and get the href

906
00:36:58,320 --> 00:37:00,400
value of it and then join them together

907
00:37:00,400 --> 00:37:02,400
with a space

908
00:37:02,400 --> 00:37:04,880
for example i've just seen some single

909
00:37:04,880 --> 00:37:06,000
quotes in there that are probably going

910
00:37:06,000 --> 00:37:07,040
to mess with us i'll change them to

911
00:37:07,040 --> 00:37:08,320
double quotes

912
00:37:08,320 --> 00:37:10,640
uh and there you go you know the

913
00:37:10,640 --> 00:37:11,440
output's

914
00:37:11,440 --> 00:37:14,000
not super pretty uh but you can see it's

915
00:37:14,000 --> 00:37:15,680
working we're getting the

916
00:37:15,680 --> 00:37:19,440
href values from each page so uh http

917
00:37:19,440 --> 00:37:20,800
bin.org

918
00:37:20,800 --> 00:37:24,160
seems to have the most of them in there

919
00:37:24,160 --> 00:37:28,800
including a mail to me and kenneth

920
00:37:28,800 --> 00:37:31,359
so you know we set out to make a tool

921
00:37:31,359 --> 00:37:33,599
for prototype pollution

922
00:37:33,599 --> 00:37:36,400
but actually we ended up writing

923
00:37:36,400 --> 00:37:38,320
something that was more generally

924
00:37:38,320 --> 00:37:40,960
applicable so i hope that was useful for

925
00:37:40,960 --> 00:37:41,520
you

926
00:37:41,520 --> 00:37:43,920
uh i hope you attempted to go off and

927
00:37:43,920 --> 00:37:45,359
write your own tools

928
00:37:45,359 --> 00:37:47,280
i think with a little bit of practice

929
00:37:47,280 --> 00:37:49,040
you can get quite fast at it

930
00:37:49,040 --> 00:37:51,200
i know there's a real temptation to

931
00:37:51,200 --> 00:37:53,359
think i'm going to spend more time

932
00:37:53,359 --> 00:37:55,839
automating things than i am just you

933
00:37:55,839 --> 00:37:57,839
know doing some hacking or just doing

934
00:37:57,839 --> 00:37:59,760
the task in the first place but

935
00:37:59,760 --> 00:38:01,760
you know within a matter of 20 minutes

936
00:38:01,760 --> 00:38:03,280
or so it really is

937
00:38:03,280 --> 00:38:05,920
genuinely possible to write actually

938
00:38:05,920 --> 00:38:08,040
useful tools

939
00:38:08,040 --> 00:38:11,040
thanks

