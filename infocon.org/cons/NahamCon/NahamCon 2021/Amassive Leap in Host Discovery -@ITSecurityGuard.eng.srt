1
00:00:02,159 --> 00:00:04,080
hello and welcome to my talk

2
00:00:04,080 --> 00:00:06,960
a massive leap in host discovery at na

3
00:00:06,960 --> 00:00:09,840
hong kong 2021

4
00:00:09,840 --> 00:00:11,840
let me first start with introducing

5
00:00:11,840 --> 00:00:13,120
myself

6
00:00:13,120 --> 00:00:15,360
so my name is patrick i'm a manager of

7
00:00:15,360 --> 00:00:16,640
3s services

8
00:00:16,640 --> 00:00:19,840
at hackerone i'm responsible for hiring

9
00:00:19,840 --> 00:00:21,359
into the triage team

10
00:00:21,359 --> 00:00:24,640
managing the triage team doing training

11
00:00:24,640 --> 00:00:27,840
and so on i'm also a bug hunter myself

12
00:00:27,840 --> 00:00:29,760
and i've been doing that for the past

13
00:00:29,760 --> 00:00:31,439
eight years

14
00:00:31,439 --> 00:00:34,239
about some of the bugs i found i also

15
00:00:34,239 --> 00:00:36,399
wrote them down at my blog

16
00:00:36,399 --> 00:00:38,640
and i'm also on twitter and you can find

17
00:00:38,640 --> 00:00:39,520
me there

18
00:00:39,520 --> 00:00:44,000
on at its security guard

19
00:00:44,000 --> 00:00:45,680
before we get into the main topic of

20
00:00:45,680 --> 00:00:48,239
this talk i just want to quickly ask the

21
00:00:48,239 --> 00:00:49,840
question

22
00:00:49,840 --> 00:00:53,120
we all know why recon or reconnaissance

23
00:00:53,120 --> 00:00:55,840
is important right

24
00:00:55,840 --> 00:00:57,600
for those of you that are experienced in

25
00:00:57,600 --> 00:00:59,199
the field the answer

26
00:00:59,199 --> 00:01:02,000
may be obvious but let me explain it

27
00:01:02,000 --> 00:01:02,559
quickly

28
00:01:02,559 --> 00:01:05,040
to the people that have no idea what i'm

29
00:01:05,040 --> 00:01:08,640
actually talking about right here

30
00:01:09,200 --> 00:01:11,119
whenever you are approaching a target in

31
00:01:11,119 --> 00:01:12,240
bug bounties

32
00:01:12,240 --> 00:01:14,400
you first need to find all the domains

33
00:01:14,400 --> 00:01:16,240
and subdomains that are belonging to a

34
00:01:16,240 --> 00:01:17,520
company

35
00:01:17,520 --> 00:01:20,479
and why are we doing that actually so

36
00:01:20,479 --> 00:01:21,119
obviously

37
00:01:21,119 --> 00:01:23,920
you want to be the first that finds that

38
00:01:23,920 --> 00:01:25,439
specific host

39
00:01:25,439 --> 00:01:27,040
because if you are the first you are

40
00:01:27,040 --> 00:01:29,360
more likely to be the first that also

41
00:01:29,360 --> 00:01:31,280
finds the vulnerabilities that this sub

42
00:01:31,280 --> 00:01:33,920
domain is hiding for

43
00:01:33,920 --> 00:01:36,479
we also want to find as many sub domains

44
00:01:36,479 --> 00:01:38,799
belonging to a company as possible

45
00:01:38,799 --> 00:01:41,040
because the more we find the bigger the

46
00:01:41,040 --> 00:01:43,280
attack surface gets and the bigger the

47
00:01:43,280 --> 00:01:45,759
possibility of finding a bug

48
00:01:45,759 --> 00:01:48,960
is but we also find want to find

49
00:01:48,960 --> 00:01:52,320
those exotic those hard to predict

50
00:01:52,320 --> 00:01:54,159
sub domain names the ones that

51
00:01:54,159 --> 00:01:56,399
developers use for testing their product

52
00:01:56,399 --> 00:01:58,000
the development environment

53
00:01:58,000 --> 00:01:59,840
the qa environment the staging

54
00:01:59,840 --> 00:02:01,280
environment

55
00:02:01,280 --> 00:02:04,000
and to do so we usually have two methods

56
00:02:04,000 --> 00:02:04,960
of doing so

57
00:02:04,960 --> 00:02:07,200
one of them is active scanning for

58
00:02:07,200 --> 00:02:08,000
subdomains

59
00:02:08,000 --> 00:02:09,840
meaning you have a word list and you try

60
00:02:09,840 --> 00:02:11,280
to brute force common words and

61
00:02:11,280 --> 00:02:12,720
permutations

62
00:02:12,720 --> 00:02:15,120
but there's also second one which is

63
00:02:15,120 --> 00:02:17,599
passive enumeration

64
00:02:17,599 --> 00:02:19,680
and in this talk i want to specifically

65
00:02:19,680 --> 00:02:20,959
cover this part

66
00:02:20,959 --> 00:02:24,640
because this is what i usually do

67
00:02:24,640 --> 00:02:27,920
in my bug bounty journeys

68
00:02:27,920 --> 00:02:30,720
so let me quickly explain to you what

69
00:02:30,720 --> 00:02:32,319
passive discovery is

70
00:02:32,319 --> 00:02:35,440
or how it works so usually you have

71
00:02:35,440 --> 00:02:37,840
companies like security trails census

72
00:02:37,840 --> 00:02:41,280
and spice who who collect data

73
00:02:41,280 --> 00:02:43,920
from companies day in and day out they

74
00:02:43,920 --> 00:02:45,120
store them all

75
00:02:45,120 --> 00:02:48,800
and they provide them to big

76
00:02:48,840 --> 00:02:50,000
corporations

77
00:02:50,000 --> 00:02:52,959
the big corporations use this data to

78
00:02:52,959 --> 00:02:55,519
actually map their attack surface

79
00:02:55,519 --> 00:02:58,560
and that's why it's there as you can

80
00:02:58,560 --> 00:02:59,680
already tell this

81
00:02:59,680 --> 00:03:02,239
is also pretty handy for bug bounty

82
00:03:02,239 --> 00:03:04,239
hunters because what we want to do

83
00:03:04,239 --> 00:03:07,280
is to get an overview of

84
00:03:07,280 --> 00:03:10,959
what the company actually owns

85
00:03:10,959 --> 00:03:13,519
there are actually quite some scripts

86
00:03:13,519 --> 00:03:14,080
out there

87
00:03:14,080 --> 00:03:17,200
that does exactly that they query those

88
00:03:17,200 --> 00:03:20,560
discovery those pest discovery sources

89
00:03:20,560 --> 00:03:22,560
and the tools they're using for that

90
00:03:22,560 --> 00:03:23,840
work as follows

91
00:03:23,840 --> 00:03:26,879
so you have your super recon lead tool

92
00:03:26,879 --> 00:03:30,239
and you feed it with the domain this

93
00:03:30,239 --> 00:03:32,400
tool then goes and gets all the data

94
00:03:32,400 --> 00:03:34,000
from the data sources

95
00:03:34,000 --> 00:03:37,280
sorts them all uniques them and

96
00:03:37,280 --> 00:03:38,959
prints you out the results so you can

97
00:03:38,959 --> 00:03:41,840
use them further

98
00:03:41,840 --> 00:03:43,599
so let's have a closer look into some of

99
00:03:43,599 --> 00:03:45,760
the most used tools for passive

100
00:03:45,760 --> 00:03:48,560
enumeration

101
00:03:48,799 --> 00:03:51,280
i have put together this graph who links

102
00:03:51,280 --> 00:03:54,319
the used data sources to its tool

103
00:03:54,319 --> 00:03:56,000
if you have a bit of a closer look you

104
00:03:56,000 --> 00:03:57,599
can quickly identify

105
00:03:57,599 --> 00:04:00,319
that the usage of data sources is pretty

106
00:04:00,319 --> 00:04:01,519
inconsistent

107
00:04:01,519 --> 00:04:04,720
and almost every tool there is uses a

108
00:04:04,720 --> 00:04:08,400
different set of data sources

109
00:04:08,400 --> 00:04:11,040
however by now you should also see the

110
00:04:11,040 --> 00:04:13,519
problematic part here

111
00:04:13,519 --> 00:04:15,599
if you look at the overlap that those

112
00:04:15,599 --> 00:04:17,759
tools are generating

113
00:04:17,759 --> 00:04:21,279
this is inconsistent and

114
00:04:21,279 --> 00:04:24,639
the missing coverage of this

115
00:04:24,639 --> 00:04:28,960
is a problem

116
00:04:28,960 --> 00:04:33,120
so patrick i hear you ask

117
00:04:33,120 --> 00:04:36,320
why is this such a big deal

118
00:04:36,320 --> 00:04:39,120
so in my opinion the problem here is

119
00:04:39,120 --> 00:04:42,320
that we see nowadays in so many tools

120
00:04:42,320 --> 00:04:45,280
that there is little to none consistency

121
00:04:45,280 --> 00:04:46,960
when it comes to the use

122
00:04:46,960 --> 00:04:51,280
of all available data sources

123
00:04:51,280 --> 00:04:54,880
and let's be realistic here for a moment

124
00:04:54,880 --> 00:04:58,000
ideally you want to use them all

125
00:04:58,000 --> 00:05:00,320
you don't want to miss out on any data

126
00:05:00,320 --> 00:05:01,600
sources there is

127
00:05:01,600 --> 00:05:04,080
because remember the more subdemands

128
00:05:04,080 --> 00:05:05,199
you're getting

129
00:05:05,199 --> 00:05:08,000
the higher your chances get of actually

130
00:05:08,000 --> 00:05:09,280
finding a bug

131
00:05:09,280 --> 00:05:12,479
and that's our ultimate goal

132
00:05:12,479 --> 00:05:16,080
so if you ask me there are two solutions

133
00:05:16,080 --> 00:05:16,560
here

134
00:05:16,560 --> 00:05:20,560
and i'm about to present to you both

135
00:05:20,560 --> 00:05:23,440
so the first solution that comes into

136
00:05:23,440 --> 00:05:24,000
mind

137
00:05:24,000 --> 00:05:26,160
when you think about how you can use

138
00:05:26,160 --> 00:05:28,400
those tools all together

139
00:05:28,400 --> 00:05:31,440
is obviously a solution that is

140
00:05:31,440 --> 00:05:34,800
involving bash and you can get all those

141
00:05:34,800 --> 00:05:36,000
tools from github

142
00:05:36,000 --> 00:05:39,440
clone them to your pc and write a

143
00:05:39,440 --> 00:05:40,320
wrapper

144
00:05:40,320 --> 00:05:42,800
that combines them all and does the

145
00:05:42,800 --> 00:05:45,360
magic for you

146
00:05:45,360 --> 00:05:48,080
however you will have to use a lot of

147
00:05:48,080 --> 00:05:48,720
grab

148
00:05:48,720 --> 00:05:52,400
and cat and curl and you know pipe them

149
00:05:52,400 --> 00:05:56,000
left and right and in the end it will

150
00:05:56,000 --> 00:05:58,960
potentially work and give you the

151
00:05:58,960 --> 00:06:00,880
results that you need

152
00:06:00,880 --> 00:06:03,919
but what if i tell you that there is a

153
00:06:03,919 --> 00:06:07,520
far more elegant more beautiful way of

154
00:06:07,520 --> 00:06:09,120
doing this

155
00:06:09,120 --> 00:06:12,319
and one that i just discovered a few

156
00:06:12,319 --> 00:06:13,199
months ago

157
00:06:13,199 --> 00:06:17,039
and i was completely blown away by it

158
00:06:17,039 --> 00:06:21,840
and the solution i found is

159
00:06:24,160 --> 00:06:27,520
a mess as some of you have already

160
00:06:27,520 --> 00:06:30,479
guessed from the title i reckon

161
00:06:30,479 --> 00:06:33,440
so let me give you a very short

162
00:06:33,440 --> 00:06:34,319
introduction

163
00:06:34,319 --> 00:06:37,680
about what ams is if you want to get

164
00:06:37,680 --> 00:06:40,880
more information about ames there are

165
00:06:40,880 --> 00:06:43,520
a lot of talks out there that cover this

166
00:06:43,520 --> 00:06:45,759
far more in detail than i could ever do

167
00:06:45,759 --> 00:06:46,639
that

168
00:06:46,639 --> 00:06:48,560
but for the sake of time i just give you

169
00:06:48,560 --> 00:06:51,039
a very quick introduction

170
00:06:51,039 --> 00:06:53,440
ams is an information gathering

171
00:06:53,440 --> 00:06:54,479
framework

172
00:06:54,479 --> 00:06:56,720
and the reason why i call it framework

173
00:06:56,720 --> 00:06:57,599
is because

174
00:06:57,599 --> 00:07:01,520
in comparison to other tools ams is such

175
00:07:01,520 --> 00:07:04,639
is so much more powerful

176
00:07:04,639 --> 00:07:07,120
and includes a whole tool set of

177
00:07:07,120 --> 00:07:09,280
different modules that you can use

178
00:07:09,280 --> 00:07:13,360
for your reconnaissance process

179
00:07:13,360 --> 00:07:16,160
for example amass has an intel module

180
00:07:16,160 --> 00:07:18,400
which can be used for

181
00:07:18,400 --> 00:07:20,960
intelligence to find out which ip ranges

182
00:07:20,960 --> 00:07:22,240
belong to a company

183
00:07:22,240 --> 00:07:25,680
which email addresses and you name it

184
00:07:25,680 --> 00:07:28,560
but ames also supports your basic

185
00:07:28,560 --> 00:07:30,080
subdomain discovery your

186
00:07:30,080 --> 00:07:32,639
subdomain scanning and as you can see on

187
00:07:32,639 --> 00:07:33,759
the right here

188
00:07:33,759 --> 00:07:36,160
those are the data sources that are

189
00:07:36,160 --> 00:07:37,280
supported by

190
00:07:37,280 --> 00:07:41,199
ames by default in total 42 of them

191
00:07:41,199 --> 00:07:43,680
but not only that it also is capable of

192
00:07:43,680 --> 00:07:45,120
doing brute force

193
00:07:45,120 --> 00:07:47,520
several permutations certificate

194
00:07:47,520 --> 00:07:48,560
grabbing

195
00:07:48,560 --> 00:07:52,000
and more but patrick i hear you ask

196
00:07:52,000 --> 00:07:55,039
isn't amos not just one of many

197
00:07:55,039 --> 00:07:56,960
sub-domain immigration tools that you've

198
00:07:56,960 --> 00:07:59,120
been talking about already

199
00:07:59,120 --> 00:08:01,919
and that's a great question but let me

200
00:08:01,919 --> 00:08:03,919
start by explaining why amas

201
00:08:03,919 --> 00:08:05,919
is different from everything that is out

202
00:08:05,919 --> 00:08:07,680
there right now

203
00:08:07,680 --> 00:08:09,520
so what most people don't take into

204
00:08:09,520 --> 00:08:11,199
consideration when comparing

205
00:08:11,199 --> 00:08:14,400
a mast is that

206
00:08:14,400 --> 00:08:17,520
it's not about the amount of subdomains

207
00:08:17,520 --> 00:08:19,039
that you're getting in the end

208
00:08:19,039 --> 00:08:20,879
although that although i said that in

209
00:08:20,879 --> 00:08:22,560
the beginning i have to admit

210
00:08:22,560 --> 00:08:24,400
but it's also about the amount of

211
00:08:24,400 --> 00:08:25,680
correct meaning

212
00:08:25,680 --> 00:08:28,639
resolvable subdomain a list of thousands

213
00:08:28,639 --> 00:08:30,720
subdomains is pretty useless if you need

214
00:08:30,720 --> 00:08:31,680
to further check

215
00:08:31,680 --> 00:08:34,399
if they are even resolvable and amaz

216
00:08:34,399 --> 00:08:36,479
does that all for you

217
00:08:36,479 --> 00:08:40,000
ams does post processing the results

218
00:08:40,000 --> 00:08:42,399
you're getting from ms are precise and

219
00:08:42,399 --> 00:08:43,679
ready to use for your

220
00:08:43,679 --> 00:08:46,880
future hunting before i was using ms

221
00:08:46,880 --> 00:08:50,160
this task always costed me a lot of time

222
00:08:50,160 --> 00:08:52,880
because i i i was getting results from

223
00:08:52,880 --> 00:08:53,600
tools

224
00:08:53,600 --> 00:08:56,080
but they were not accurate at all they

225
00:08:56,080 --> 00:08:57,600
included wild cards

226
00:08:57,600 --> 00:09:00,000
and most of the subdomains they found

227
00:09:00,000 --> 00:09:01,920
were not even resolvable or

228
00:09:01,920 --> 00:09:05,680
just pure trash and as a bug hunter you

229
00:09:05,680 --> 00:09:06,720
not only want to

230
00:09:06,720 --> 00:09:09,040
get the quickest results you also want

231
00:09:09,040 --> 00:09:11,760
them to be correct

232
00:09:11,760 --> 00:09:13,760
but there is something that i find even

233
00:09:13,760 --> 00:09:15,920
more exciting about ms

234
00:09:15,920 --> 00:09:17,600
and that's what i'm going to introduce

235
00:09:17,600 --> 00:09:20,160
you next

236
00:09:20,160 --> 00:09:23,360
the ms scripting engine

237
00:09:23,360 --> 00:09:26,880
so what is it in short

238
00:09:26,880 --> 00:09:29,600
a mass allows users to develop their own

239
00:09:29,600 --> 00:09:30,320
scripts

240
00:09:30,320 --> 00:09:33,279
that ms will then use in its

241
00:09:33,279 --> 00:09:35,360
reconnaissance process

242
00:09:35,360 --> 00:09:38,000
we have seen something similar already

243
00:09:38,000 --> 00:09:38,399
with

244
00:09:38,399 --> 00:09:41,920
nmap and the nse scripts

245
00:09:41,920 --> 00:09:44,560
in order to do so a mass is using a

246
00:09:44,560 --> 00:09:46,480
programming language called

247
00:09:46,480 --> 00:09:50,560
lua a mess is using those scripts to

248
00:09:50,560 --> 00:09:52,800
also implement the data sources that are

249
00:09:52,800 --> 00:09:54,240
already being present

250
00:09:54,240 --> 00:09:57,440
in the tool right now so

251
00:09:57,440 --> 00:10:00,000
let's say you have ever encountered a

252
00:10:00,000 --> 00:10:02,160
problem with a data source that ms is

253
00:10:02,160 --> 00:10:03,519
using and you're not sure if it's

254
00:10:03,519 --> 00:10:04,880
working correctly

255
00:10:04,880 --> 00:10:08,480
or they change the end point that this

256
00:10:08,480 --> 00:10:11,600
script is using you can simply go into

257
00:10:11,600 --> 00:10:14,399
the resources and the scripts folder in

258
00:10:14,399 --> 00:10:16,079
the ams directory

259
00:10:16,079 --> 00:10:19,839
and just adjust it accordingly

260
00:10:21,680 --> 00:10:23,200
but how is this useful for your bug

261
00:10:23,200 --> 00:10:25,440
hunting you may ask yourself

262
00:10:25,440 --> 00:10:27,839
and how does that solve the problem that

263
00:10:27,839 --> 00:10:29,600
i introduced earlier

264
00:10:29,600 --> 00:10:32,959
so let me explain

265
00:10:32,959 --> 00:10:36,399
okay so probably the most important

266
00:10:36,399 --> 00:10:38,480
functionality of the ma scripting

267
00:10:38,480 --> 00:10:43,519
engine is to include command line tools

268
00:10:44,079 --> 00:10:46,000
if you have a closer look at the actual

269
00:10:46,000 --> 00:10:48,000
code it is fairly simple and

270
00:10:48,000 --> 00:10:50,399
straightforward to understand

271
00:10:50,399 --> 00:10:52,959
on the right side here you can see how

272
00:10:52,959 --> 00:10:53,760
the actual

273
00:10:53,760 --> 00:10:56,160
code looks like to run a command line

274
00:10:56,160 --> 00:10:57,839
tool

275
00:10:57,839 --> 00:11:00,320
you first need to define a name for your

276
00:11:00,320 --> 00:11:01,360
extension

277
00:11:01,360 --> 00:11:04,000
in my case i was writing one for the for

278
00:11:04,000 --> 00:11:04,640
the tool

279
00:11:04,640 --> 00:11:07,040
asset finder and then you define the

280
00:11:07,040 --> 00:11:09,600
type of the script which in this case is

281
00:11:09,600 --> 00:11:12,720
an extension what do you do next is also

282
00:11:12,720 --> 00:11:14,079
pretty straightforward

283
00:11:14,079 --> 00:11:16,240
you create a function you provide it

284
00:11:16,240 --> 00:11:17,920
with the arguments and you simply

285
00:11:17,920 --> 00:11:19,680
specify the local command that the

286
00:11:19,680 --> 00:11:21,519
script will execute

287
00:11:21,519 --> 00:11:23,760
in this case i will tell the script to

288
00:11:23,760 --> 00:11:25,040
run assetfinder

289
00:11:25,040 --> 00:11:28,079
with the argument of subs only and give

290
00:11:28,079 --> 00:11:29,760
it the domain variable

291
00:11:29,760 --> 00:11:32,640
what's important to notice about command

292
00:11:32,640 --> 00:11:34,320
line tools and the scripts and if you

293
00:11:34,320 --> 00:11:35,760
want to include them

294
00:11:35,760 --> 00:11:38,720
is that the output should be only raw

295
00:11:38,720 --> 00:11:39,279
data

296
00:11:39,279 --> 00:11:42,240
and that's why i'm using the argument

297
00:11:42,240 --> 00:11:42,720
subs

298
00:11:42,720 --> 00:11:44,959
only for asset finder because that will

299
00:11:44,959 --> 00:11:46,320
give me a clean

300
00:11:46,320 --> 00:11:49,519
output of domains

301
00:11:49,519 --> 00:11:52,399
what amaz does next is it waits for the

302
00:11:52,399 --> 00:11:53,920
tool to finish

303
00:11:53,920 --> 00:11:56,240
takes all the found sub sub-domains and

304
00:11:56,240 --> 00:11:57,040
reported

305
00:11:57,040 --> 00:11:59,360
reports it back to the enumeration

306
00:11:59,360 --> 00:12:00,399
process

307
00:12:00,399 --> 00:12:03,440
as you can see here there is a simple

308
00:12:03,440 --> 00:12:04,320
for loop

309
00:12:04,320 --> 00:12:07,600
they will go through every result and

310
00:12:07,600 --> 00:12:11,040
take them and provide them to a mess

311
00:12:11,040 --> 00:12:13,519
pretty easy right but you may also

312
00:12:13,519 --> 00:12:15,519
encounter situations where a mass

313
00:12:15,519 --> 00:12:18,560
does not support a given data source or

314
00:12:18,560 --> 00:12:21,360
no tool out there supports it yet so

315
00:12:21,360 --> 00:12:22,959
what do you do about that

316
00:12:22,959 --> 00:12:27,440
i will explain to that in the next slide

317
00:12:27,440 --> 00:12:29,760
most data sources out there usually work

318
00:12:29,760 --> 00:12:30,880
on so-called res

319
00:12:30,880 --> 00:12:34,240
apis usually you either query them using

320
00:12:34,240 --> 00:12:34,880
a get

321
00:12:34,880 --> 00:12:37,680
or a post request what you see here on

322
00:12:37,680 --> 00:12:38,480
the right

323
00:12:38,480 --> 00:12:40,560
is not the entire source codes to make

324
00:12:40,560 --> 00:12:42,560
the get request happen

325
00:12:42,560 --> 00:12:45,360
but only a part of it if you want to see

326
00:12:45,360 --> 00:12:46,959
the entire source code

327
00:12:46,959 --> 00:12:49,279
i have attached the link to the github

328
00:12:49,279 --> 00:12:52,399
repository at the bottom of this slide

329
00:12:52,399 --> 00:12:54,240
but to quickly cover the most important

330
00:12:54,240 --> 00:12:56,079
aspects of this script

331
00:12:56,079 --> 00:12:58,720
first of all there is a function called

332
00:12:58,720 --> 00:12:59,440
api

333
00:12:59,440 --> 00:13:02,079
url which you have to define in order to

334
00:13:02,079 --> 00:13:03,360
get it working

335
00:13:03,360 --> 00:13:05,760
in the case of project discovery this is

336
00:13:05,760 --> 00:13:08,200
the url

337
00:13:08,200 --> 00:13:10,079
dns.projectdiscovery.io

338
00:13:10,079 --> 00:13:13,519
dns and a placeholder for the domain

339
00:13:13,519 --> 00:13:16,639
that you're looking for

340
00:13:16,959 --> 00:13:18,959
what's also important to mention is that

341
00:13:18,959 --> 00:13:20,480
the scripting engine

342
00:13:20,480 --> 00:13:23,279
supports authentication so you can

343
00:13:23,279 --> 00:13:24,800
provide your own

344
00:13:24,800 --> 00:13:28,000
api keys inside the configuration

345
00:13:28,000 --> 00:13:31,440
script once that is in there a mess will

346
00:13:31,440 --> 00:13:32,800
automatically take them

347
00:13:32,800 --> 00:13:34,800
and set the appropriate headers for the

348
00:13:34,800 --> 00:13:36,880
get request

349
00:13:36,880 --> 00:13:39,120
as a last step similar to what we've

350
00:13:39,120 --> 00:13:41,760
seen in the terminal example before

351
00:13:41,760 --> 00:13:43,760
it will take the subdomain names from

352
00:13:43,760 --> 00:13:45,279
the api response

353
00:13:45,279 --> 00:13:47,600
and report it back to the enumeration

354
00:13:47,600 --> 00:13:49,839
process of a mess

355
00:13:49,839 --> 00:13:52,399
and as a last example i want to show you

356
00:13:52,399 --> 00:13:53,839
how this can be done

357
00:13:53,839 --> 00:13:58,399
for apis that only accept a post request

358
00:13:58,399 --> 00:14:00,480
and once again this is just a part of

359
00:14:00,480 --> 00:14:01,600
the entire script

360
00:14:01,600 --> 00:14:04,000
but it will give you the very basic idea

361
00:14:04,000 --> 00:14:06,639
on how to perform a post request

362
00:14:06,639 --> 00:14:08,560
first of all we need to define the

363
00:14:08,560 --> 00:14:10,240
method and in this case

364
00:14:10,240 --> 00:14:12,079
as i mentioned before this is a post

365
00:14:12,079 --> 00:14:13,279
request

366
00:14:13,279 --> 00:14:16,560
and provided with the necessary body

367
00:14:16,560 --> 00:14:18,720
once that is done much similar as in the

368
00:14:18,720 --> 00:14:19,680
get example

369
00:14:19,680 --> 00:14:22,480
we need to define the api url which in

370
00:14:22,480 --> 00:14:23,839
this case

371
00:14:23,839 --> 00:14:28,000
is an example for the census database

372
00:14:28,000 --> 00:14:30,560
much like in the get example we can also

373
00:14:30,560 --> 00:14:32,959
easily use credentials to authenticate

374
00:14:32,959 --> 00:14:34,720
with the api

375
00:14:34,720 --> 00:14:37,279
before i show you some real life

376
00:14:37,279 --> 00:14:38,480
examples i

377
00:14:38,480 --> 00:14:41,040
just wanted to give you a quick heads up

378
00:14:41,040 --> 00:14:41,519
that

379
00:14:41,519 --> 00:14:43,360
whenever you're looking to build your

380
00:14:43,360 --> 00:14:44,639
own module

381
00:14:44,639 --> 00:14:47,920
there is there are several pages in the

382
00:14:47,920 --> 00:14:50,240
github repository of amas which already

383
00:14:50,240 --> 00:14:51,360
contain

384
00:14:51,360 --> 00:14:54,560
scripts for the most used data sources

385
00:14:54,560 --> 00:14:55,279
out there

386
00:14:55,279 --> 00:14:57,360
so if you need some sort of inspiration

387
00:14:57,360 --> 00:14:58,959
have a look in there

388
00:14:58,959 --> 00:15:02,639
and see if you know you can build

389
00:15:02,639 --> 00:15:05,120
your own data source around it it's

390
00:15:05,120 --> 00:15:08,480
pretty easy and convenient to use

391
00:15:08,480 --> 00:15:11,360
but now let's go to the fun part let's

392
00:15:11,360 --> 00:15:12,800
put this all together

393
00:15:12,800 --> 00:15:16,320
and fire up the engine so the way i'm

394
00:15:16,320 --> 00:15:17,040
doing is

395
00:15:17,040 --> 00:15:19,360
is the following i did create four

396
00:15:19,360 --> 00:15:21,279
scripts for different subdomain

397
00:15:21,279 --> 00:15:23,600
enumeration tools i found on github

398
00:15:23,600 --> 00:15:24,480
asset finder

399
00:15:24,480 --> 00:15:26,560
find domain github subdomains and

400
00:15:26,560 --> 00:15:27,519
subfinder

401
00:15:27,519 --> 00:15:29,440
i've written a script for each of them

402
00:15:29,440 --> 00:15:32,079
and put them all together in a folder

403
00:15:32,079 --> 00:15:35,040
the next step is to actually tell amaz

404
00:15:35,040 --> 00:15:37,120
how to use all of this

405
00:15:37,120 --> 00:15:40,240
and the comment for that is as follows

406
00:15:40,240 --> 00:15:43,040
so first of all we run a mess then we

407
00:15:43,040 --> 00:15:43,600
tell

408
00:15:43,600 --> 00:15:47,040
it which sub-module to use in this case

409
00:15:47,040 --> 00:15:48,959
the enumeration module

410
00:15:48,959 --> 00:15:50,560
then we tell it where the script

411
00:15:50,560 --> 00:15:52,560
location is remember

412
00:15:52,560 --> 00:15:55,519
where the ads scripts are located in my

413
00:15:55,519 --> 00:15:55,920
case

414
00:15:55,920 --> 00:15:58,639
this is slash root slash tools slash

415
00:15:58,639 --> 00:16:00,480
script

416
00:16:00,480 --> 00:16:02,240
and then we tell it whether to use the

417
00:16:02,240 --> 00:16:04,240
passive or the active mode

418
00:16:04,240 --> 00:16:07,199
and as a short explanation the passive

419
00:16:07,199 --> 00:16:09,120
mode compared to the active mode

420
00:16:09,120 --> 00:16:12,000
will not do any dns validation so it

421
00:16:12,000 --> 00:16:13,199
will simply just

422
00:16:13,199 --> 00:16:15,519
spit out the results it is getting from

423
00:16:15,519 --> 00:16:17,199
the tools

424
00:16:17,199 --> 00:16:20,560
the dash source attribute will show you

425
00:16:20,560 --> 00:16:22,160
later in the output

426
00:16:22,160 --> 00:16:25,040
which tool produced which output which

427
00:16:25,040 --> 00:16:27,040
is very handy for debugging

428
00:16:27,040 --> 00:16:30,079
the d is defined to tell

429
00:16:30,079 --> 00:16:32,639
ams which domain it is looking for in

430
00:16:32,639 --> 00:16:34,839
this example

431
00:16:34,839 --> 00:16:37,680
hacka1.com and the include

432
00:16:37,680 --> 00:16:40,079
just defines which of the scripts i

433
00:16:40,079 --> 00:16:42,399
wanted to include in my scan

434
00:16:42,399 --> 00:16:46,160
and the directory will be the directory

435
00:16:46,160 --> 00:16:50,800
where ams stores the results for me

436
00:16:50,800 --> 00:16:52,560
so now i want to give you a little

437
00:16:52,560 --> 00:16:54,240
example on how this

438
00:16:54,240 --> 00:16:57,600
looks in action

439
00:16:58,000 --> 00:17:00,880
as you can see you get a debug message

440
00:17:00,880 --> 00:17:01,759
that

441
00:17:01,759 --> 00:17:04,480
for each of the scripts that it's loaded

442
00:17:04,480 --> 00:17:05,599
it is

443
00:17:05,599 --> 00:17:08,880
saying hey i have started the script and

444
00:17:08,880 --> 00:17:11,839
in the blue brackets you can see which

445
00:17:11,839 --> 00:17:12,640
tool

446
00:17:12,640 --> 00:17:14,959
reported which sub domain and the green

447
00:17:14,959 --> 00:17:17,119
text is obviously the subdomain it has

448
00:17:17,119 --> 00:17:19,359
found

449
00:17:19,359 --> 00:17:21,280
since i'm running a little bit out of

450
00:17:21,280 --> 00:17:23,439
time i want to take a moment

451
00:17:23,439 --> 00:17:25,919
to recap the most important takeaways

452
00:17:25,919 --> 00:17:28,799
from this talk

453
00:17:28,799 --> 00:17:31,360
starting with the inconsistency problem

454
00:17:31,360 --> 00:17:33,679
that i have described in the beginning

455
00:17:33,679 --> 00:17:36,880
i now we now have solved the problem of

456
00:17:36,880 --> 00:17:39,280
the inconsistent tools by combining them

457
00:17:39,280 --> 00:17:40,000
all in

458
00:17:40,000 --> 00:17:43,039
a mess we have also found a simple way

459
00:17:43,039 --> 00:17:43,919
of including

460
00:17:43,919 --> 00:17:47,760
every tool that is out there in the amos

461
00:17:47,760 --> 00:17:50,480
environment and we have a centralized

462
00:17:50,480 --> 00:17:51,760
way of storing

463
00:17:51,760 --> 00:17:54,880
the good results plus we have the dns

464
00:17:54,880 --> 00:17:55,840
validation

465
00:17:55,840 --> 00:17:58,960
and all the other magic that amas has to

466
00:17:58,960 --> 00:18:01,039
offer

467
00:18:01,039 --> 00:18:02,960
now there's one specific part that is

468
00:18:02,960 --> 00:18:04,400
missing

469
00:18:04,400 --> 00:18:07,679
as of today ams is not supporting every

470
00:18:07,679 --> 00:18:09,679
data source that is out there

471
00:18:09,679 --> 00:18:13,760
but it is very much capable of doing so

472
00:18:13,760 --> 00:18:15,360
and that's why

473
00:18:15,360 --> 00:18:18,400
i would love to ask the community to

474
00:18:18,400 --> 00:18:20,400
contribute to the project

475
00:18:20,400 --> 00:18:23,919
and to provide as many ads scripts as

476
00:18:23,919 --> 00:18:26,320
possible so if you found this content

477
00:18:26,320 --> 00:18:27,440
helpful

478
00:18:27,440 --> 00:18:29,280
please consider to join the development

479
00:18:29,280 --> 00:18:31,200
of amaz and their tools

480
00:18:31,200 --> 00:18:32,960
you can find their github page right

481
00:18:32,960 --> 00:18:34,480
here on the slides

482
00:18:34,480 --> 00:18:36,240
and there's also a discord channel where

483
00:18:36,240 --> 00:18:37,919
you where you can join

484
00:18:37,919 --> 00:18:39,440
and have a brief chat with the core

485
00:18:39,440 --> 00:18:41,600
developers of a mask and ask the

486
00:18:41,600 --> 00:18:42,720
questions and

487
00:18:42,720 --> 00:18:45,360
whatnot i've also released a project

488
00:18:45,360 --> 00:18:46,960
called ams tools

489
00:18:46,960 --> 00:18:48,960
on my github which basically just holds

490
00:18:48,960 --> 00:18:50,559
the scripts i've been using in this

491
00:18:50,559 --> 00:18:52,160
presentation

492
00:18:52,160 --> 00:18:55,679
however i will also add more

493
00:18:55,679 --> 00:18:58,080
if i have the time to develop them so

494
00:18:58,080 --> 00:18:58,720
this is

495
00:18:58,720 --> 00:19:00,799
an ongoing project and feel free to

496
00:19:00,799 --> 00:19:01,919
contribute or

497
00:19:01,919 --> 00:19:05,600
fix any mistakes i can also highly

498
00:19:05,600 --> 00:19:07,600
recommend you to follow jeff foley

499
00:19:07,600 --> 00:19:09,600
who is the core developer of amaz on

500
00:19:09,600 --> 00:19:11,280
twitter as well

501
00:19:11,280 --> 00:19:14,480
as the official amaz channel which you

502
00:19:14,480 --> 00:19:16,240
can also see here

503
00:19:16,240 --> 00:19:20,480
because they both post amazing content

504
00:19:20,480 --> 00:19:24,000
and that's it from my side folks

505
00:19:24,000 --> 00:19:25,679
thank you very much for attending my

506
00:19:25,679 --> 00:19:28,559
talk and enjoy the rest of naham khan

507
00:19:28,559 --> 00:19:34,559
2021 bye

