1
00:00:00,240 --> 00:00:02,639
hey everyone welcome to hacking i switch

2
00:00:02,639 --> 00:00:03,919
shops

3
00:00:03,919 --> 00:00:05,600
i just want to start off by saying how

4
00:00:05,600 --> 00:00:08,720
much i enjoy hacking iis servers

5
00:00:08,720 --> 00:00:10,240
they're case insensitive which means

6
00:00:10,240 --> 00:00:12,080
that you can usually find content

7
00:00:12,080 --> 00:00:13,840
very easily as you don't have to worry

8
00:00:13,840 --> 00:00:15,599
about the case

9
00:00:15,599 --> 00:00:17,680
you can use i a short name scanner which

10
00:00:17,680 --> 00:00:19,439
lets you determine partial file names

11
00:00:19,439 --> 00:00:21,600
and folder names

12
00:00:21,600 --> 00:00:23,119
there's something called the view state

13
00:00:23,119 --> 00:00:25,359
decentralization rce gadget

14
00:00:25,359 --> 00:00:28,000
which lets you achieve rce by providing

15
00:00:28,000 --> 00:00:29,760
a malicious view state that's been

16
00:00:29,760 --> 00:00:30,480
signed

17
00:00:30,480 --> 00:00:33,120
with the machine key and there's also

18
00:00:33,120 --> 00:00:34,160
the web.config

19
00:00:34,160 --> 00:00:35,840
upload tricks which usually let you get

20
00:00:35,840 --> 00:00:38,399
a shell in tricky situations

21
00:00:38,399 --> 00:00:40,480
on top of that you've got debug mode

22
00:00:40,480 --> 00:00:42,719
sometimes enabled on.net applications

23
00:00:42,719 --> 00:00:43,680
which give you

24
00:00:43,680 --> 00:00:45,760
detailed stack traces and full paths

25
00:00:45,760 --> 00:00:47,200
which are especially useful for

26
00:00:47,200 --> 00:00:48,640
uploading shells

27
00:00:48,640 --> 00:00:50,559
and there's debugging scripts often

28
00:00:50,559 --> 00:00:52,879
deployed such as alma and trace

29
00:00:52,879 --> 00:00:55,039
which often give you session tokens or

30
00:00:55,039 --> 00:00:56,840
cookies that you can use to escalate

31
00:00:56,840 --> 00:00:58,800
privileges and lastly

32
00:00:58,800 --> 00:01:00,480
there is something called the telerik

33
00:01:00,480 --> 00:01:03,920
rce which is a compilation of maybe four

34
00:01:03,920 --> 00:01:05,760
or five cves over the last couple of

35
00:01:05,760 --> 00:01:06,560
years

36
00:01:06,560 --> 00:01:09,520
um which usually lead to rce most

37
00:01:09,520 --> 00:01:10,240
recently

38
00:01:10,240 --> 00:01:12,479
a deserialization exploit and telerik

39
00:01:12,479 --> 00:01:13,760
that led to rce

40
00:01:13,760 --> 00:01:15,439
but in the past there was also arbitrary

41
00:01:15,439 --> 00:01:17,040
file upload vulnerabilities

42
00:01:17,040 --> 00:01:20,400
through weak cryptography

43
00:01:20,400 --> 00:01:21,840
so the first thing i want to go through

44
00:01:21,840 --> 00:01:24,799
today is how you deal with http api

45
00:01:24,799 --> 00:01:28,560
2.0 assets when you've been hacking iis

46
00:01:28,560 --> 00:01:29,840
you might have come across

47
00:01:29,840 --> 00:01:31,840
something like this where you visit an

48
00:01:31,840 --> 00:01:34,479
ip address and it returns a not found

49
00:01:34,479 --> 00:01:35,119
error

50
00:01:35,119 --> 00:01:38,960
http error 404 and in this scenario you

51
00:01:38,960 --> 00:01:40,640
can see that the server header returns

52
00:01:40,640 --> 00:01:43,600
microsoft http api 2.0

53
00:01:43,600 --> 00:01:45,520
now um you might look at this and you

54
00:01:45,520 --> 00:01:47,360
might think okay there's no way to

55
00:01:47,360 --> 00:01:49,840
access a real application on this host

56
00:01:49,840 --> 00:01:52,000
but that's actually not true and it just

57
00:01:52,000 --> 00:01:53,759
requires a little bit of more work and

58
00:01:53,759 --> 00:01:54,880
investigation

59
00:01:54,880 --> 00:01:57,200
to be able to access a real.net

60
00:01:57,200 --> 00:01:59,360
application on these sort of hosts

61
00:01:59,360 --> 00:02:01,759
so in this scenario you can see in the

62
00:02:01,759 --> 00:02:03,360
screenshot that i've provided

63
00:02:03,360 --> 00:02:05,360
that there's actually an ssl certificate

64
00:02:05,360 --> 00:02:07,439
which has the subdomain listed

65
00:02:07,439 --> 00:02:10,080
in the common names for the certificate

66
00:02:10,080 --> 00:02:11,200
this is really handy

67
00:02:11,200 --> 00:02:12,319
i'm not saying that this is going to

68
00:02:12,319 --> 00:02:14,400
happen all the time when you attack iis

69
00:02:14,400 --> 00:02:15,120
servers

70
00:02:15,120 --> 00:02:17,280
but if you do find an ssl certificate

71
00:02:17,280 --> 00:02:18,319
with a sub domain

72
00:02:18,319 --> 00:02:19,599
that should be the first piece of

73
00:02:19,599 --> 00:02:22,000
information you use when you try and

74
00:02:22,000 --> 00:02:24,160
make this web server respond with an

75
00:02:24,160 --> 00:02:25,440
actual application

76
00:02:25,440 --> 00:02:29,200
instead of this http api 2.0 error

77
00:02:29,200 --> 00:02:30,959
once you've identified this something

78
00:02:30,959 --> 00:02:33,920
like a subdomain in the ssl certificate

79
00:02:33,920 --> 00:02:35,920
you might want to try the following you

80
00:02:35,920 --> 00:02:37,920
might want to think about

81
00:02:37,920 --> 00:02:41,519
like not skipping the asset first off

82
00:02:41,519 --> 00:02:43,599
and actually thinking about okay

83
00:02:43,599 --> 00:02:46,640
how do i access this application and you

84
00:02:46,640 --> 00:02:47,840
know sometimes you're not

85
00:02:47,840 --> 00:02:49,519
fortunate enough to have access to the

86
00:02:49,519 --> 00:02:51,360
full subdomain provided to you via the

87
00:02:51,360 --> 00:02:52,879
ssl certificate

88
00:02:52,879 --> 00:02:54,959
so you might need to brute force it

89
00:02:54,959 --> 00:02:57,360
however it's as simple as modifying the

90
00:02:57,360 --> 00:02:58,319
host header

91
00:02:58,319 --> 00:03:00,400
so you can see in these two requests the

92
00:03:00,400 --> 00:03:02,080
first request

93
00:03:02,080 --> 00:03:04,080
there's a 404 not found error with the

94
00:03:04,080 --> 00:03:05,360
http 2

95
00:03:05,360 --> 00:03:08,400
http api 2.0 server header

96
00:03:08,400 --> 00:03:10,080
which means that there's no application

97
00:03:10,080 --> 00:03:11,920
really responding and that's when i'm

98
00:03:11,920 --> 00:03:13,840
accessing the application directly via

99
00:03:13,840 --> 00:03:15,040
the ip address

100
00:03:15,040 --> 00:03:16,959
but you can see in the second request

101
00:03:16,959 --> 00:03:19,040
i've modified the host header to contain

102
00:03:19,040 --> 00:03:19,920
the data that i

103
00:03:19,920 --> 00:03:22,159
uh obtained from the ssl certificate the

104
00:03:22,159 --> 00:03:23,280
host name

105
00:03:23,280 --> 00:03:26,879
so really what this http api 2.0 error

106
00:03:26,879 --> 00:03:27,120
is

107
00:03:27,120 --> 00:03:29,280
is like it's just telling you that it

108
00:03:29,280 --> 00:03:31,920
can't access the virtual host

109
00:03:31,920 --> 00:03:34,159
i can't access a real application on the

110
00:03:34,159 --> 00:03:35,360
iis server

111
00:03:35,360 --> 00:03:37,840
so when you provide a host header with

112
00:03:37,840 --> 00:03:39,120
the virtual host that

113
00:03:39,120 --> 00:03:42,000
it's expecting it actually routes you to

114
00:03:42,000 --> 00:03:43,599
a valid application

115
00:03:43,599 --> 00:03:45,040
so you can see in the response in the

116
00:03:45,040 --> 00:03:48,080
second request it's turned from a 404

117
00:03:48,080 --> 00:03:49,440
into a 403

118
00:03:49,440 --> 00:03:50,959
and you can see that the server header

119
00:03:50,959 --> 00:03:53,200
has changed from http api

120
00:03:53,200 --> 00:03:56,799
to microsoft iis 8.5

121
00:03:56,799 --> 00:03:58,799
in many cases you'll find that the

122
00:03:58,799 --> 00:04:00,400
subdomain you find from the ssl

123
00:04:00,400 --> 00:04:01,360
certificate

124
00:04:01,360 --> 00:04:04,640
doesn't actually resolve to an ip

125
00:04:04,640 --> 00:04:06,560
address that you can access

126
00:04:06,560 --> 00:04:08,720
so in this scenario it's really

127
00:04:08,720 --> 00:04:10,560
important that you just add a line to

128
00:04:10,560 --> 00:04:12,400
your etc host file

129
00:04:12,400 --> 00:04:14,319
and you map the correct hostname to the

130
00:04:14,319 --> 00:04:16,000
ip address of the asset

131
00:04:16,000 --> 00:04:18,320
so in this scenario i found a subdomain

132
00:04:18,320 --> 00:04:20,798
called icc.company.com

133
00:04:20,798 --> 00:04:23,520
i would put a an addition to my hosts

134
00:04:23,520 --> 00:04:24,080
file

135
00:04:24,080 --> 00:04:26,400
which maps that subdomain to the ip

136
00:04:26,400 --> 00:04:28,080
address identified through whatever

137
00:04:28,080 --> 00:04:29,040
means

138
00:04:29,040 --> 00:04:31,040
and once you've done that you should run

139
00:04:31,040 --> 00:04:32,400
all of your scanning again

140
00:04:32,400 --> 00:04:34,479
including your enumeration through iis

141
00:04:34,479 --> 00:04:36,160
shortname scanner

142
00:04:36,160 --> 00:04:38,720
it's incredibly important to run all of

143
00:04:38,720 --> 00:04:40,080
your scanning again because you're

144
00:04:40,080 --> 00:04:42,720
basically scanning a valid application

145
00:04:42,720 --> 00:04:45,759
whereas with http api 2.0 you were

146
00:04:45,759 --> 00:04:47,759
scanning nothing

147
00:04:47,759 --> 00:04:49,040
the other thing you can do in this

148
00:04:49,040 --> 00:04:51,120
scenario is also perform v-host

149
00:04:51,120 --> 00:04:52,160
enumeration

150
00:04:52,160 --> 00:04:54,000
and brute forcing to see if there's any

151
00:04:54,000 --> 00:04:55,440
other applications that are present on

152
00:04:55,440 --> 00:04:56,720
the host

153
00:04:56,720 --> 00:04:59,280
you'll be surprised sometimes that there

154
00:04:59,280 --> 00:05:01,280
are other applications lingering around

155
00:05:01,280 --> 00:05:02,720
you just need to know the correct host

156
00:05:02,720 --> 00:05:03,280
name

157
00:05:03,280 --> 00:05:07,280
so that you can access them through iis

158
00:05:07,280 --> 00:05:09,600
if you ever come across this for other

159
00:05:09,600 --> 00:05:10,400
assets

160
00:05:10,400 --> 00:05:12,639
just repeat this methodology try and

161
00:05:12,639 --> 00:05:13,759
guess the v host

162
00:05:13,759 --> 00:05:15,600
and then provide it in the host header

163
00:05:15,600 --> 00:05:19,520
in order to access the real application

164
00:05:19,520 --> 00:05:21,759
so moving on um i want to talk a little

165
00:05:21,759 --> 00:05:23,840
bit about v host hopping

166
00:05:23,840 --> 00:05:25,280
this is something that i've been pretty

167
00:05:25,280 --> 00:05:27,199
successful with in bug bounties

168
00:05:27,199 --> 00:05:29,360
uh one example i can give you is i was

169
00:05:29,360 --> 00:05:31,759
able to access an internal admin panel

170
00:05:31,759 --> 00:05:35,680
via v host hopping they paid out 1 900

171
00:05:35,680 --> 00:05:38,400
um so i came across an asset that looks

172
00:05:38,400 --> 00:05:39,560
something like

173
00:05:39,560 --> 00:05:42,479
apply.company.com it was running iis

174
00:05:42,479 --> 00:05:44,479
and you know at that point i was quite

175
00:05:44,479 --> 00:05:46,160
curious to see if i could find any other

176
00:05:46,160 --> 00:05:47,120
virtual hosts

177
00:05:47,120 --> 00:05:49,600
for this asset so i used a large

178
00:05:49,600 --> 00:05:51,360
subdomain wordlist to bruteforce

179
00:05:51,360 --> 00:05:54,160
v hosts using burp intruder so you can

180
00:05:54,160 --> 00:05:55,759
see in this example this is kind of the

181
00:05:55,759 --> 00:05:57,600
area i brute forced

182
00:05:57,600 --> 00:05:59,759
just subdomain.company.com and i was

183
00:05:59,759 --> 00:06:01,919
brute forcing the subdomain

184
00:06:01,919 --> 00:06:04,319
and i looked at any large and different

185
00:06:04,319 --> 00:06:05,600
responses returned

186
00:06:05,600 --> 00:06:09,600
and i found mssql.company.com which was

187
00:06:09,600 --> 00:06:12,080
not accessible externally it was only

188
00:06:12,080 --> 00:06:13,360
accessible through

189
00:06:13,360 --> 00:06:16,720
v host hopping and at the end of the day

190
00:06:16,720 --> 00:06:17,919
when i looked at this

191
00:06:17,919 --> 00:06:20,639
particular vhost accessed through this

192
00:06:20,639 --> 00:06:21,840
ip address

193
00:06:21,840 --> 00:06:24,240
i found out that it was running a mssql

194
00:06:24,240 --> 00:06:25,759
database manager

195
00:06:25,759 --> 00:06:28,800
explorer a link to the sourceforge

196
00:06:28,800 --> 00:06:31,919
project which contains that explorer

197
00:06:31,919 --> 00:06:34,880
and you know often on iis servers they

198
00:06:34,880 --> 00:06:36,560
there may be internal applications

199
00:06:36,560 --> 00:06:38,400
running under a different host name

200
00:06:38,400 --> 00:06:41,440
for example in this case it was mssql um

201
00:06:41,440 --> 00:06:42,800
there could be other applications

202
00:06:42,800 --> 00:06:44,400
running as well but i may have not have

203
00:06:44,400 --> 00:06:46,080
brute force the subdomain

204
00:06:46,080 --> 00:06:47,919
however it is something that i recommend

205
00:06:47,919 --> 00:06:50,240
you do every time you come across an iis

206
00:06:50,240 --> 00:06:52,560
asset that may contain more than one

207
00:06:52,560 --> 00:06:53,759
application

208
00:06:53,759 --> 00:06:55,599
i guess building up that instinct is

209
00:06:55,599 --> 00:06:57,599
really important and understanding when

210
00:06:57,599 --> 00:06:59,919
to do these sort of brute forces

211
00:06:59,919 --> 00:07:02,880
is very important too usually every time

212
00:07:02,880 --> 00:07:04,560
i do come across an iis server that

213
00:07:04,560 --> 00:07:06,240
looks like a development or a test

214
00:07:06,240 --> 00:07:06,960
server

215
00:07:06,960 --> 00:07:09,759
i run a hostname brute force to see

216
00:07:09,759 --> 00:07:10,960
whether or not there are any other

217
00:07:10,960 --> 00:07:13,360
virtual hosts for that domain

218
00:07:13,360 --> 00:07:16,000
so in this example i just added a simple

219
00:07:16,000 --> 00:07:18,240
match and replace rule in burp

220
00:07:18,240 --> 00:07:20,919
that replaced any host header which had

221
00:07:20,919 --> 00:07:22,240
apply.company.com

222
00:07:22,240 --> 00:07:26,000
with the host header mssql.company.com

223
00:07:26,000 --> 00:07:28,080
and in return when i visited the

224
00:07:28,080 --> 00:07:30,000
subdomain you can see that it

225
00:07:30,000 --> 00:07:32,479
it prompted me with this asp.net

226
00:07:32,479 --> 00:07:34,240
enterprise manager

227
00:07:34,240 --> 00:07:37,120
now um this was really interesting and i

228
00:07:37,120 --> 00:07:38,639
i played around with a little bit got

229
00:07:38,639 --> 00:07:39,919
access to

230
00:07:39,919 --> 00:07:41,759
the post authentication part of the

231
00:07:41,759 --> 00:07:43,360
application and reported the

232
00:07:43,360 --> 00:07:44,080
vulnerability

233
00:07:44,080 --> 00:07:45,919
as i said i got paid one thousand nine

234
00:07:45,919 --> 00:07:49,120
hundred dollars for this bug

235
00:07:49,120 --> 00:07:50,960
next thing i want to go through is local

236
00:07:50,960 --> 00:07:52,960
file disclosure to dlls

237
00:07:52,960 --> 00:07:56,479
um so you can take this example of code

238
00:07:56,479 --> 00:07:57,440
which is written in

239
00:07:57,440 --> 00:08:00,639
c-sharp which is a basic local file

240
00:08:00,639 --> 00:08:02,080
disclosure vulnerability

241
00:08:02,080 --> 00:08:03,599
you can see that there's an end point

242
00:08:03,599 --> 00:08:06,080
called download category excel

243
00:08:06,080 --> 00:08:08,160
and this endpoint takes a file name as a

244
00:08:08,160 --> 00:08:09,199
parameter

245
00:08:09,199 --> 00:08:12,479
and it builds a path using the file name

246
00:08:12,479 --> 00:08:15,199
as the parameter which is vulnerable to

247
00:08:15,199 --> 00:08:16,720
directory traversal and

248
00:08:16,720 --> 00:08:19,919
arbitrary file read so you can exploit

249
00:08:19,919 --> 00:08:22,240
this endpoint and provide a file name

250
00:08:22,240 --> 00:08:24,560
which traverses back two directories and

251
00:08:24,560 --> 00:08:26,479
reads arbitrary files from the document

252
00:08:26,479 --> 00:08:28,080
root

253
00:08:28,080 --> 00:08:30,479
so that's essentially this vulnerability

254
00:08:30,479 --> 00:08:32,479
here will let you read local files from

255
00:08:32,479 --> 00:08:34,559
the system

256
00:08:34,559 --> 00:08:37,279
so in this scenario what do you do well

257
00:08:37,279 --> 00:08:39,039
i guess the the first thing to look at

258
00:08:39,039 --> 00:08:40,640
is the web.config file

259
00:08:40,640 --> 00:08:43,200
web.config is your friend here because

260
00:08:43,200 --> 00:08:44,880
it will tell you what the other files

261
00:08:44,880 --> 00:08:46,320
you need to grab from the system

262
00:08:46,320 --> 00:08:48,959
are you can follow this resource that

263
00:08:48,959 --> 00:08:50,399
i've linked here

264
00:08:50,399 --> 00:08:52,720
which is from path traversal to source

265
00:08:52,720 --> 00:08:55,519
code in asp.net mvc applications

266
00:08:55,519 --> 00:08:57,680
it's a very handy resource i've used it

267
00:08:57,680 --> 00:09:00,160
multiple times in bug bounties

268
00:09:00,160 --> 00:09:01,600
it helps you quite a bit in

269
00:09:01,600 --> 00:09:04,080
understanding how the web.config file

270
00:09:04,080 --> 00:09:06,160
and global.asax file

271
00:09:06,160 --> 00:09:09,200
actually uh actually provides this sort

272
00:09:09,200 --> 00:09:10,320
of information

273
00:09:10,320 --> 00:09:12,000
and uh you can read through it to

274
00:09:12,000 --> 00:09:13,360
understand how you can exploit this

275
00:09:13,360 --> 00:09:14,399
vulnerability

276
00:09:14,399 --> 00:09:18,880
but um but to kind of uh give you a tldr

277
00:09:18,880 --> 00:09:21,279
uh you grab the web.config file and you

278
00:09:21,279 --> 00:09:23,600
grab the global.asax file

279
00:09:23,600 --> 00:09:26,080
and inside them you'll see references to

280
00:09:26,080 --> 00:09:27,360
dll files

281
00:09:27,360 --> 00:09:30,320
so for example you can see here add

282
00:09:30,320 --> 00:09:33,760
namespace company.web.api.dll

283
00:09:33,760 --> 00:09:36,000
now this is really important you need to

284
00:09:36,000 --> 00:09:37,760
get this dll file name

285
00:09:37,760 --> 00:09:39,279
and then you can download it from the

286
00:09:39,279 --> 00:09:41,200
bin folder so you can use the same

287
00:09:41,200 --> 00:09:42,959
vulnerability the local file disclosure

288
00:09:42,959 --> 00:09:44,000
vulnerability

289
00:09:44,000 --> 00:09:46,000
to download the dll file from the

290
00:09:46,000 --> 00:09:47,279
asp.net

291
00:09:47,279 --> 00:09:51,120
mvc application once you've done that

292
00:09:51,120 --> 00:09:52,640
you can do a wide range of things such

293
00:09:52,640 --> 00:09:54,800
as reverse engineer the dll file

294
00:09:54,800 --> 00:09:56,800
and you know even debug it if you really

295
00:09:56,800 --> 00:09:58,240
want to but

296
00:09:58,240 --> 00:10:00,240
it opens up a lot of possibilities in

297
00:10:00,240 --> 00:10:01,920
finding further vulnerabilities in your

298
00:10:01,920 --> 00:10:03,200
target

299
00:10:03,200 --> 00:10:04,720
you should you should repeat this

300
00:10:04,720 --> 00:10:06,800
process for all other dll files that you

301
00:10:06,800 --> 00:10:07,279
think

302
00:10:07,279 --> 00:10:10,320
are worth grabbing um but often this

303
00:10:10,320 --> 00:10:12,240
will be a really effective way

304
00:10:12,240 --> 00:10:14,800
to show impact that look through the

305
00:10:14,800 --> 00:10:16,640
local file disclosure vulnerability i

306
00:10:16,640 --> 00:10:18,480
can read all of the source code for this

307
00:10:18,480 --> 00:10:19,360
application

308
00:10:19,360 --> 00:10:20,880
and potentially find more

309
00:10:20,880 --> 00:10:24,399
vulnerabilities within the application

310
00:10:24,399 --> 00:10:27,040
another really cool technique in iis is

311
00:10:27,040 --> 00:10:30,000
local file disclosure to rce

312
00:10:30,000 --> 00:10:31,519
and this is something that's only

313
00:10:31,519 --> 00:10:34,079
relatively recent research-wise

314
00:10:34,079 --> 00:10:36,640
um it was nominated for the pawnee award

315
00:10:36,640 --> 00:10:37,440
for most

316
00:10:37,440 --> 00:10:40,480
under-hyped research and you can read

317
00:10:40,480 --> 00:10:42,640
these two links one is the blog post

318
00:10:42,640 --> 00:10:44,800
from surosh and the second is the white

319
00:10:44,800 --> 00:10:46,399
paper from him as well

320
00:10:46,399 --> 00:10:48,560
so these two resources are absolutely

321
00:10:48,560 --> 00:10:50,079
gold and they will give you all the

322
00:10:50,079 --> 00:10:51,200
information you need

323
00:10:51,200 --> 00:10:53,279
to understand this vulnerability but

324
00:10:53,279 --> 00:10:54,800
essentially what you can do

325
00:10:54,800 --> 00:10:57,519
on iis servers is if you can read the

326
00:10:57,519 --> 00:10:58,959
web.config file

327
00:10:58,959 --> 00:11:02,399
you can almost always get rce which is

328
00:11:02,399 --> 00:11:04,800
insane like i can't think of other web

329
00:11:04,800 --> 00:11:05,839
servers where

330
00:11:05,839 --> 00:11:07,839
having one vulnerability leads to a more

331
00:11:07,839 --> 00:11:09,920
severe vulnerability reliably

332
00:11:09,920 --> 00:11:11,760
which is also one of the reasons i love

333
00:11:11,760 --> 00:11:13,200
hacking iis

334
00:11:13,200 --> 00:11:15,680
and you can see here that um you know it

335
00:11:15,680 --> 00:11:16,800
from my experience

336
00:11:16,800 --> 00:11:19,680
it's it's a very simple process you grab

337
00:11:19,680 --> 00:11:21,120
the machine key variable from the

338
00:11:21,120 --> 00:11:22,640
web.config file

339
00:11:22,640 --> 00:11:24,720
which includes the validation key and

340
00:11:24,720 --> 00:11:26,079
the decryption key

341
00:11:26,079 --> 00:11:27,839
and then you can use a tool such as

342
00:11:27,839 --> 00:11:29,680
viewgen made by

343
00:11:29,680 --> 00:11:33,040
andre or wysoserial.net

344
00:11:33,040 --> 00:11:36,240
and you can uh exploit uh the viewstate

345
00:11:36,240 --> 00:11:37,120
parameter

346
00:11:37,120 --> 00:11:39,760
so that you can sign a arbitrary view

347
00:11:39,760 --> 00:11:41,519
state which is malicious

348
00:11:41,519 --> 00:11:44,880
and you can ultimately end up at the

349
00:11:44,880 --> 00:11:45,600
sink

350
00:11:45,600 --> 00:11:47,680
of object state formatter which is

351
00:11:47,680 --> 00:11:50,399
vulnerable to deserialization

352
00:11:50,399 --> 00:11:53,360
and from there you can get rce so i i

353
00:11:53,360 --> 00:11:55,040
really recommend you read the blog post

354
00:11:55,040 --> 00:11:56,720
and the white paper it does go into much

355
00:11:56,720 --> 00:11:57,760
more detail about

356
00:11:57,760 --> 00:12:00,320
how this works but essentially if you

357
00:12:00,320 --> 00:12:02,079
have local file disclosure and you can

358
00:12:02,079 --> 00:12:03,920
read the web.config file

359
00:12:03,920 --> 00:12:05,839
it's quite likely that you can get

360
00:12:05,839 --> 00:12:09,120
remote command execution

361
00:12:09,360 --> 00:12:10,959
the other thing that i think is really

362
00:12:10,959 --> 00:12:12,399
important to know when you're hacking

363
00:12:12,399 --> 00:12:15,279
iis applications is using dnspy

364
00:12:15,279 --> 00:12:18,240
dnspy is an open source project uh you

365
00:12:18,240 --> 00:12:19,760
can grab it

366
00:12:19,760 --> 00:12:22,240
from github but let's say in this

367
00:12:22,240 --> 00:12:22,800
example

368
00:12:22,800 --> 00:12:25,600
you were targeting a dependency you were

369
00:12:25,600 --> 00:12:28,000
trying to bruteforce.net server and you

370
00:12:28,000 --> 00:12:29,800
came across this folder called

371
00:12:29,800 --> 00:12:34,079
cutesoftclient cute editor uploaded.ashx

372
00:12:34,079 --> 00:12:36,079
now you might be wondering are there any

373
00:12:36,079 --> 00:12:38,560
vulnerabilities in this uploaded.ashx

374
00:12:38,560 --> 00:12:39,279
file

375
00:12:39,279 --> 00:12:42,000
well that's really easy to solve you can

376
00:12:42,000 --> 00:12:42,880
download

377
00:12:42,880 --> 00:12:44,639
these dependencies usually from the

378
00:12:44,639 --> 00:12:46,959
internet using nuget or

379
00:12:46,959 --> 00:12:48,639
either from the directly from the

380
00:12:48,639 --> 00:12:50,639
vendor's website and once you've

381
00:12:50,639 --> 00:12:52,240
downloaded that uh

382
00:12:52,240 --> 00:12:53,920
once once you've downloaded that package

383
00:12:53,920 --> 00:12:55,839
it might contain dll files

384
00:12:55,839 --> 00:12:57,600
but sometimes it won't contain source

385
00:12:57,600 --> 00:13:00,160
code and usually to find vulnerabilities

386
00:13:00,160 --> 00:13:01,760
you want to be able to read the source

387
00:13:01,760 --> 00:13:02,320
code

388
00:13:02,320 --> 00:13:03,760
so that you can see whether or not there

389
00:13:03,760 --> 00:13:06,320
are any vulnerable components this is

390
00:13:06,320 --> 00:13:06,959
where

391
00:13:06,959 --> 00:13:09,839
dnspy comes in and it helps you analyze

392
00:13:09,839 --> 00:13:10,639
the source code

393
00:13:10,639 --> 00:13:12,800
and potentially find vulnerabilities it

394
00:13:12,800 --> 00:13:15,120
reverse engineers dll files back into

395
00:13:15,120 --> 00:13:17,120
the source code

396
00:13:17,120 --> 00:13:19,279
so you can grab dnspy from this github

397
00:13:19,279 --> 00:13:20,399
link here and

398
00:13:20,399 --> 00:13:22,800
it's capable of reversing assemblies dll

399
00:13:22,800 --> 00:13:23,440
files

400
00:13:23,440 --> 00:13:25,600
back into source code you can simply

401
00:13:25,600 --> 00:13:26,959
load the dll file and

402
00:13:26,959 --> 00:13:29,279
export the source code project so here

403
00:13:29,279 --> 00:13:31,680
is a screenshot of me loading a dll file

404
00:13:31,680 --> 00:13:34,800
cute editor.dll and then

405
00:13:34,800 --> 00:13:37,200
here's how you export it into a project

406
00:13:37,200 --> 00:13:38,959
uh that you can then read with whatever

407
00:13:38,959 --> 00:13:40,000
editor you want

408
00:13:40,000 --> 00:13:44,720
or you can even load it up in uh vs 2010

409
00:13:44,720 --> 00:13:47,279
you can also alternatively navigate

410
00:13:47,279 --> 00:13:49,199
through dnspy itself

411
00:13:49,199 --> 00:13:50,880
it's actually pretty handy it has some

412
00:13:50,880 --> 00:13:52,480
great searching functionality

413
00:13:52,480 --> 00:13:54,560
it also has live debugging functionality

414
00:13:54,560 --> 00:13:56,000
which you can dive into

415
00:13:56,000 --> 00:13:58,160
if you are having trouble understanding

416
00:13:58,160 --> 00:13:59,600
how the application operates and you

417
00:13:59,600 --> 00:14:01,360
want a more live environment

418
00:14:01,360 --> 00:14:05,600
to investigate vulnerabilities

419
00:14:06,000 --> 00:14:07,680
the next thing i want to talk about is

420
00:14:07,680 --> 00:14:10,000
complex xxe vectors

421
00:14:10,000 --> 00:14:12,079
now this is something i deal with often

422
00:14:12,079 --> 00:14:14,399
on some bounties that run.net

423
00:14:14,399 --> 00:14:17,120
servers uh let's say we have this

424
00:14:17,120 --> 00:14:18,079
scenario

425
00:14:18,079 --> 00:14:21,040
there's no outbound http traffic allowed

426
00:14:21,040 --> 00:14:22,560
the only outbound traffic

427
00:14:22,560 --> 00:14:25,920
is possible is dns your external entity

428
00:14:25,920 --> 00:14:26,240
is

429
00:14:26,240 --> 00:14:28,000
not being displayed in the response

430
00:14:28,000 --> 00:14:29,360
anywhere

431
00:14:29,360 --> 00:14:31,600
you cannot use external dtds because you

432
00:14:31,600 --> 00:14:34,800
cannot reach your external host via http

433
00:14:34,800 --> 00:14:37,519
however luckily we have stack tracers

434
00:14:37,519 --> 00:14:38,399
enabled

435
00:14:38,399 --> 00:14:40,639
and that is the only real thing that we

436
00:14:40,639 --> 00:14:42,480
have towards exploiting the

437
00:14:42,480 --> 00:14:45,519
xxe vulnerability without any outbound

438
00:14:45,519 --> 00:14:47,680
traffic other than dns it's very hard to

439
00:14:47,680 --> 00:14:48,880
prove impact

440
00:14:48,880 --> 00:14:50,240
so what do you really do in this

441
00:14:50,240 --> 00:14:52,000
scenario

442
00:14:52,000 --> 00:14:54,240
well the typical research that you can

443
00:14:54,240 --> 00:14:56,240
find on the internet

444
00:14:56,240 --> 00:14:59,680
is around exploiting xxes with local dtd

445
00:14:59,680 --> 00:15:00,480
files

446
00:15:00,480 --> 00:15:03,680
and you can see an example here of of

447
00:15:03,680 --> 00:15:04,079
that

448
00:15:04,079 --> 00:15:06,720
where we are including a local dtd file

449
00:15:06,720 --> 00:15:09,199
that's always found on windows systems

450
00:15:09,199 --> 00:15:12,560
um which is cim20.dtd in the system 32

451
00:15:12,560 --> 00:15:13,920
folders

452
00:15:13,920 --> 00:15:17,360
and then we are declaring our entity uh

453
00:15:17,360 --> 00:15:20,720
file system windows system.ini um

454
00:15:20,720 --> 00:15:23,440
and we're trying to leak that file out

455
00:15:23,440 --> 00:15:24,079
via an

456
00:15:24,079 --> 00:15:25,839
error message by requesting a

457
00:15:25,839 --> 00:15:27,360
non-existent file

458
00:15:27,360 --> 00:15:29,279
and appending the file we've retrieved

459
00:15:29,279 --> 00:15:30,560
to the end of it

460
00:15:30,560 --> 00:15:33,040
however what can often happen in this

461
00:15:33,040 --> 00:15:34,000
scenario

462
00:15:34,000 --> 00:15:36,639
is you can find that the xml parser

463
00:15:36,639 --> 00:15:38,320
might actually

464
00:15:38,320 --> 00:15:41,839
not respond with the data of the file

465
00:15:41,839 --> 00:15:43,440
you can see here that you know we've got

466
00:15:43,440 --> 00:15:45,759
our local dtd we've got our local file

467
00:15:45,759 --> 00:15:47,519
to read and we've got the side channel

468
00:15:47,519 --> 00:15:48,720
leak

469
00:15:48,720 --> 00:15:51,759
however when you run it through uh when

470
00:15:51,759 --> 00:15:53,680
you when you run that request

471
00:15:53,680 --> 00:15:55,600
you can see that the response might be

472
00:15:55,600 --> 00:15:56,880
something like this

473
00:15:56,880 --> 00:15:58,720
where it says an error occurred while

474
00:15:58,720 --> 00:16:00,079
passing entity name

475
00:16:00,079 --> 00:16:03,759
line 37 position 46 so it is reading

476
00:16:03,759 --> 00:16:05,600
some sort of data but it's not giving

477
00:16:05,600 --> 00:16:07,199
that data back to you

478
00:16:07,199 --> 00:16:09,279
the error message does not contain the

479
00:16:09,279 --> 00:16:11,440
contents of the file

480
00:16:11,440 --> 00:16:14,560
in that scenario um this is how

481
00:16:14,560 --> 00:16:17,680
i've been able to deal with it you know

482
00:16:17,680 --> 00:16:19,920
thankfully in this scenario where

483
00:16:19,920 --> 00:16:21,360
there's no data and there's a passing

484
00:16:21,360 --> 00:16:22,000
error

485
00:16:22,000 --> 00:16:24,959
there is a solution

486
00:16:25,759 --> 00:16:28,320
huge thank you to robert vulpe on

487
00:16:28,320 --> 00:16:29,440
twitter for this trick

488
00:16:29,440 --> 00:16:32,639
his twitter handle is at nitrogen

489
00:16:32,639 --> 00:16:36,959
to break this payload down you've got a

490
00:16:36,959 --> 00:16:40,079
hash after the non-existent file

491
00:16:40,079 --> 00:16:42,320
so that the file entity is a part of a

492
00:16:42,320 --> 00:16:44,160
fragment identifier

493
00:16:44,160 --> 00:16:45,920
that's the only main difference between

494
00:16:45,920 --> 00:16:48,000
the previous xc payload i showed you in

495
00:16:48,000 --> 00:16:49,120
this one

496
00:16:49,120 --> 00:16:51,839
in this payload the side channel leak

497
00:16:51,839 --> 00:16:53,360
happens because

498
00:16:53,360 --> 00:16:56,800
of this fragment identifier after the

499
00:16:56,800 --> 00:16:58,720
file is included after this fragment

500
00:16:58,720 --> 00:16:59,680
identifier

501
00:16:59,680 --> 00:17:01,920
you get a wildly different message in

502
00:17:01,920 --> 00:17:03,519
return from the stack trace

503
00:17:03,519 --> 00:17:05,520
which contains the partial contents of

504
00:17:05,520 --> 00:17:07,119
the file

505
00:17:07,119 --> 00:17:10,000
so you can see here that the error that

506
00:17:10,000 --> 00:17:11,439
we get back is

507
00:17:11,439 --> 00:17:14,880
fragment identifier and then the file's

508
00:17:14,880 --> 00:17:15,919
contents

509
00:17:15,919 --> 00:17:18,720
so the fragment identifier error and

510
00:17:18,720 --> 00:17:20,559
then the file's contents

511
00:17:20,559 --> 00:17:23,359
um at least the partial file contents

512
00:17:23,359 --> 00:17:25,119
you can see that it gets cut off at some

513
00:17:25,119 --> 00:17:26,079
point

514
00:17:26,079 --> 00:17:27,760
so it's not something that will give you

515
00:17:27,760 --> 00:17:29,600
the full file contents but at the same

516
00:17:29,600 --> 00:17:30,240
time

517
00:17:30,240 --> 00:17:32,400
it does prove impact and it does let you

518
00:17:32,400 --> 00:17:33,360
access

519
00:17:33,360 --> 00:17:35,840
some of the file contents um before

520
00:17:35,840 --> 00:17:38,480
being cut off

521
00:17:38,720 --> 00:17:40,320
another thing that i want to go through

522
00:17:40,320 --> 00:17:42,880
is partial fuzzing with short names

523
00:17:42,880 --> 00:17:44,960
um you know like if you've ever watched

524
00:17:44,960 --> 00:17:46,240
any of my videos on i

525
00:17:46,240 --> 00:17:48,240
a short name scanner this might be

526
00:17:48,240 --> 00:17:50,240
relevant to you

527
00:17:50,240 --> 00:17:52,559
you might want to run short name

528
00:17:52,559 --> 00:17:54,960
enumeration on any iis target you come

529
00:17:54,960 --> 00:17:56,480
across and you might see something like

530
00:17:56,480 --> 00:17:57,600
this

531
00:17:57,600 --> 00:17:59,200
in this example you can see that we've

532
00:17:59,200 --> 00:18:01,360
got a couple of folders that have been

533
00:18:01,360 --> 00:18:02,640
detected

534
00:18:02,640 --> 00:18:05,120
but not the full folder name has been

535
00:18:05,120 --> 00:18:07,280
detected just a partial folder name as

536
00:18:07,280 --> 00:18:09,280
is short name scanner does

537
00:18:09,280 --> 00:18:11,120
you can see that these folders are named

538
00:18:11,120 --> 00:18:12,640
lids di lids

539
00:18:12,640 --> 00:18:15,679
se lids te and then easy

540
00:18:15,679 --> 00:18:19,039
fi now um all i want to introduce to you

541
00:18:19,039 --> 00:18:19,520
today

542
00:18:19,520 --> 00:18:22,320
is just logical brute forcing um you

543
00:18:22,320 --> 00:18:24,240
just want to logically fuzz things so

544
00:18:24,240 --> 00:18:25,440
that you can detect

545
00:18:25,440 --> 00:18:28,480
what the the full folder name is and you

546
00:18:28,480 --> 00:18:30,320
know often people think they need to do

547
00:18:30,320 --> 00:18:32,559
pure brute forcing like brute forcing

548
00:18:32,559 --> 00:18:33,600
all the characters

549
00:18:33,600 --> 00:18:35,520
for four characters or five characters

550
00:18:35,520 --> 00:18:37,600
but sometimes it can be a lot more

551
00:18:37,600 --> 00:18:38,720
simple than that

552
00:18:38,720 --> 00:18:40,720
and in this example that's kind of what

553
00:18:40,720 --> 00:18:42,480
i want to demonstrate

554
00:18:42,480 --> 00:18:45,360
if you were using something like ff you

555
00:18:45,360 --> 00:18:46,240
can see here

556
00:18:46,240 --> 00:18:48,640
that i have transformed these partial

557
00:18:48,640 --> 00:18:49,679
folder names

558
00:18:49,679 --> 00:18:51,200
into what i would typically be putting

559
00:18:51,200 --> 00:18:54,320
into ff you can see that there's lids di

560
00:18:54,320 --> 00:18:56,640
which has been converted to lids fuzz

561
00:18:56,640 --> 00:18:59,360
because i believe that the partial name

562
00:18:59,360 --> 00:19:00,559
of the folder

563
00:19:00,559 --> 00:19:03,200
is lids and then there's something after

564
00:19:03,200 --> 00:19:04,960
that that could be something we could

565
00:19:04,960 --> 00:19:06,000
discover

566
00:19:06,000 --> 00:19:08,240
and the same goes for same goes for lids

567
00:19:08,240 --> 00:19:09,120
se

568
00:19:09,120 --> 00:19:11,120
the pattern between the first two is

569
00:19:11,120 --> 00:19:13,280
that they both start with the word

570
00:19:13,280 --> 00:19:16,480
lids with the letters lids

571
00:19:16,480 --> 00:19:18,080
so i'm going to fuzz everything after

572
00:19:18,080 --> 00:19:20,480
those four letters

573
00:19:20,480 --> 00:19:23,440
and then you can also see easy fi and

574
00:19:23,440 --> 00:19:25,919
that's just going to become easy fuzz

575
00:19:25,919 --> 00:19:29,120
so my typical f5 command might look

576
00:19:29,120 --> 00:19:30,799
something like this

577
00:19:30,799 --> 00:19:33,280
where i'm fuzzing the remaining

578
00:19:33,280 --> 00:19:34,720
characters

579
00:19:34,720 --> 00:19:37,200
and i'm using a prefix which is lids

580
00:19:37,200 --> 00:19:38,640
because i believe that's the common

581
00:19:38,640 --> 00:19:40,080
prefix

582
00:19:40,080 --> 00:19:41,919
and that actually leads to some really

583
00:19:41,919 --> 00:19:43,120
great results

584
00:19:43,120 --> 00:19:45,120
you can see here that we've detected

585
00:19:45,120 --> 00:19:47,120
that the full folder names

586
00:19:47,120 --> 00:19:50,080
are lids test lids display and lid

587
00:19:50,080 --> 00:19:51,120
service

588
00:19:51,120 --> 00:19:53,280
so it doesn't really require you to do

589
00:19:53,280 --> 00:19:55,200
pure brute forcing or some crazy

590
00:19:55,200 --> 00:19:56,000
technique

591
00:19:56,000 --> 00:19:57,760
it just requires you to logically think

592
00:19:57,760 --> 00:20:00,080
about what is the partial folder name

593
00:20:00,080 --> 00:20:01,039
and how can i

594
00:20:01,039 --> 00:20:03,520
brute force the rest of it which is kind

595
00:20:03,520 --> 00:20:06,960
of what i've done here for this host

596
00:20:06,960 --> 00:20:08,720
another tool that you should check out

597
00:20:08,720 --> 00:20:10,000
is crunch

598
00:20:10,000 --> 00:20:12,000
if you're ever in the situation where

599
00:20:12,000 --> 00:20:13,679
you need to do some pure brute forcing

600
00:20:13,679 --> 00:20:15,280
to determine the rest of the file or

601
00:20:15,280 --> 00:20:16,159
folder name

602
00:20:16,159 --> 00:20:18,080
you can use crunch to generate the word

603
00:20:18,080 --> 00:20:20,640
list that may be necessary to pass into

604
00:20:20,640 --> 00:20:21,360
ff

605
00:20:21,360 --> 00:20:22,880
to discover the rest of the follow-up

606
00:20:22,880 --> 00:20:24,799
order name you can provide it

607
00:20:24,799 --> 00:20:27,120
an arbitrary character set um in this

608
00:20:27,120 --> 00:20:29,200
example i've done all lowercase

609
00:20:29,200 --> 00:20:32,880
character lowercase letters and numbers

610
00:20:32,880 --> 00:20:35,280
and i'm making a word list which is from

611
00:20:35,280 --> 00:20:36,880
zero to three length

612
00:20:36,880 --> 00:20:39,039
and that generates roughly forty seven

613
00:20:39,039 --> 00:20:40,240
thousand lines

614
00:20:40,240 --> 00:20:43,039
um and then you can use that with fff um

615
00:20:43,039 --> 00:20:44,640
the link that's at the bottom of this

616
00:20:44,640 --> 00:20:45,120
slide

617
00:20:45,120 --> 00:20:47,200
uh just links to the source forge

618
00:20:47,200 --> 00:20:49,360
project which you can compile on any

619
00:20:49,360 --> 00:20:50,480
linux machine

620
00:20:50,480 --> 00:20:52,720
and start using this tool uh for brute

621
00:20:52,720 --> 00:20:53,600
forcing

622
00:20:53,600 --> 00:20:57,039
purposes and i'd just like to end this

623
00:20:57,039 --> 00:20:58,400
presentation off with some more

624
00:20:58,400 --> 00:21:00,799
resources on hacking iis

625
00:21:00,799 --> 00:21:02,720
we have a youtube channel assetnotes

626
00:21:02,720 --> 00:21:04,080
youtube channel which

627
00:21:04,080 --> 00:21:06,480
does have videos on hacking iis but will

628
00:21:06,480 --> 00:21:08,320
likely contain videos on all sorts of

629
00:21:08,320 --> 00:21:11,120
different hacking adventures that we do

630
00:21:11,120 --> 00:21:12,720
throughout our time working at asset

631
00:21:12,720 --> 00:21:14,240
note on top of that

632
00:21:14,240 --> 00:21:18,400
i really love the blog from surosh he is

633
00:21:18,400 --> 00:21:20,880
absolutely outstanding at hacking iis

634
00:21:20,880 --> 00:21:21,520
servers

635
00:21:21,520 --> 00:21:24,080
and asp.net applications he has gone

636
00:21:24,080 --> 00:21:26,080
through many techniques

637
00:21:26,080 --> 00:21:28,159
many more than i can actually discuss in

638
00:21:28,159 --> 00:21:29,600
a video like this

639
00:21:29,600 --> 00:21:31,360
so i highly recommend you check out his

640
00:21:31,360 --> 00:21:32,960
blog and you read through some of his

641
00:21:32,960 --> 00:21:33,679
articles

642
00:21:33,679 --> 00:21:36,799
that he's posted on the internet um and

643
00:21:36,799 --> 00:21:38,720
lastly there's also bit quark

644
00:21:38,720 --> 00:21:40,960
um he has done an amazing job at

645
00:21:40,960 --> 00:21:43,039
building an iis short name scanner

646
00:21:43,039 --> 00:21:44,880
he's planning to release it to the world

647
00:21:44,880 --> 00:21:46,159
at some point

648
00:21:46,159 --> 00:21:48,000
he's still working hard on it and he's

649
00:21:48,000 --> 00:21:49,520
still doing an amazing job at building

650
00:21:49,520 --> 00:21:50,799
it out

651
00:21:50,799 --> 00:21:53,039
i've had the privilege of using it over

652
00:21:53,039 --> 00:21:56,080
the last couple of weeks and it has been

653
00:21:56,080 --> 00:21:58,559
really a game changer when it comes to

654
00:21:58,559 --> 00:22:00,880
iis short name enumeration

655
00:22:00,880 --> 00:22:03,039
and lastly nitrogen who discovered the

656
00:22:03,039 --> 00:22:04,880
technique for xxe

657
00:22:04,880 --> 00:22:07,440
in order to delete partial file contents

658
00:22:07,440 --> 00:22:12,640
via fragment identifier errors

659
00:22:12,640 --> 00:22:14,080
thanks everyone for watching this

660
00:22:14,080 --> 00:22:16,000
presentation i really appreciate your

661
00:22:16,000 --> 00:22:18,400
support

