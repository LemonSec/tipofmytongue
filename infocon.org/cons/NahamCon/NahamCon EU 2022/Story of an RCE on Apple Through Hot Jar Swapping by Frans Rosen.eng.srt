1
00:00:00,719 --> 00:00:03,959
hello this is my talk for the name Con

2
00:00:03,959 --> 00:00:07,140
Europe 2022 I'll speak about an RC I

3
00:00:07,140 --> 00:00:10,139
found on Apple using hot jar swapping

4
00:00:10,139 --> 00:00:11,700
first of all let's speak about some

5
00:00:11,700 --> 00:00:13,620
prior research to this then I'll speak

6
00:00:13,620 --> 00:00:15,480
about the flows I'm trying to abuse and

7
00:00:15,480 --> 00:00:18,420
the assumptions I had while doing that

8
00:00:18,420 --> 00:00:20,460
I'll share some demo code for you on

9
00:00:20,460 --> 00:00:22,020
GitHub as well and I have some

10
00:00:22,020 --> 00:00:25,199
conclusions that I think you might enjoy

11
00:00:25,199 --> 00:00:27,359
my name is Franz Rosen I work as a

12
00:00:27,359 --> 00:00:29,519
security advisor at detectify

13
00:00:29,519 --> 00:00:31,740
I celebrate 10 years as a Bug Hunter

14
00:00:31,740 --> 00:00:33,620
this year

15
00:00:33,620 --> 00:00:36,540
I'll speak about hot jar swapping and

16
00:00:36,540 --> 00:00:38,399
you might not have heard of it before

17
00:00:38,399 --> 00:00:42,239
and it's basically made up but if you

18
00:00:42,239 --> 00:00:44,100
Google it you will see some Clues around

19
00:00:44,100 --> 00:00:46,140
what I'm trying to abuse here

20
00:00:46,140 --> 00:00:48,480
and the prior research to this is mainly

21
00:00:48,480 --> 00:00:50,640
around hacking apple and if you want to

22
00:00:50,640 --> 00:00:53,340
hack Apple there's one tip I have for

23
00:00:53,340 --> 00:00:55,520
you and that's reading one of the most

24
00:00:55,520 --> 00:00:59,280
epic blog posts there is and that's the

25
00:00:59,280 --> 00:01:01,379
we hacked Apple for three months made

26
00:01:01,379 --> 00:01:03,120
not only by the creator of this

27
00:01:03,120 --> 00:01:04,979
conference but also Sam Curry Brett

28
00:01:04,979 --> 00:01:07,439
Powerhouse Samuel Urban Thunderbirds and

29
00:01:07,439 --> 00:01:08,880
I totally recommend it because it

30
00:01:08,880 --> 00:01:11,520
contains so many different bugs so much

31
00:01:11,520 --> 00:01:14,180
information about how to approach Apple

32
00:01:14,180 --> 00:01:17,520
how to actually find bugs there and one

33
00:01:17,520 --> 00:01:19,439
of the bugs that caught my interest was

34
00:01:19,439 --> 00:01:21,180
around something called an author's

35
00:01:21,180 --> 00:01:23,220
e-publisher it's basically a website

36
00:01:23,220 --> 00:01:26,100
called authors.apple.com which allows

37
00:01:26,100 --> 00:01:29,460
you to upload epub files and while doing

38
00:01:29,460 --> 00:01:30,360
this

39
00:01:30,360 --> 00:01:32,759
Brett actually found a command injection

40
00:01:32,759 --> 00:01:36,840
by just providing a different ID to the

41
00:01:36,840 --> 00:01:38,939
the ones uploading so he was able to

42
00:01:38,939 --> 00:01:41,640
escape the the arguments in the command

43
00:01:41,640 --> 00:01:44,640
that was made into this app

44
00:01:44,640 --> 00:01:46,320
what's interesting about this app is

45
00:01:46,320 --> 00:01:48,119
that you can actually download the same

46
00:01:48,119 --> 00:01:51,659
app that runs on authors.apple.com you

47
00:01:51,659 --> 00:01:53,579
can download it and run locally as well

48
00:01:53,579 --> 00:01:55,680
and if you run it locally you will

49
00:01:55,680 --> 00:01:57,840
quickly see that it's just a wrapper to

50
00:01:57,840 --> 00:02:01,920
Java it uses basically a transporter

51
00:02:01,920 --> 00:02:04,799
launcher and itm is transported launcher

52
00:02:04,799 --> 00:02:05,840
and

53
00:02:05,840 --> 00:02:07,979
disclaimer to this is that I suck at

54
00:02:07,979 --> 00:02:10,080
Java I completely suck at Java I'm not a

55
00:02:10,080 --> 00:02:12,720
Java developer at all however I do love

56
00:02:12,720 --> 00:02:15,120
something called gdgy which is a Java

57
00:02:15,120 --> 00:02:17,760
decompiler user interface for figuring

58
00:02:17,760 --> 00:02:20,760
out how code in jar files and Wars how

59
00:02:20,760 --> 00:02:23,280
they actually work so I totally

60
00:02:23,280 --> 00:02:25,260
recommend this even though I'm I'm not a

61
00:02:25,260 --> 00:02:28,140
Java developer I can can read Java code

62
00:02:28,140 --> 00:02:30,599
and understand it so first of all when

63
00:02:30,599 --> 00:02:32,700
looking at the Java itms transport

64
00:02:32,700 --> 00:02:34,680
launcher you could see that the first

65
00:02:34,680 --> 00:02:36,660
thing it does is downloading an oski

66
00:02:36,660 --> 00:02:40,379
bootstrapper and basically it's also

67
00:02:40,379 --> 00:02:43,379
checking the sha-256 and the md5 of this

68
00:02:43,379 --> 00:02:46,140
jar file making sure that it has the

69
00:02:46,140 --> 00:02:48,840
up-to-date version of it uh and if it

70
00:02:48,840 --> 00:02:51,239
doesn't it will download a new version

71
00:02:51,239 --> 00:02:54,840
you could also see that it downloads it

72
00:02:54,840 --> 00:02:56,640
to a different directory depending on if

73
00:02:56,640 --> 00:02:59,280
you're running on Mac OS or or uh or

74
00:02:59,280 --> 00:03:01,980
Linux for example so the first step in

75
00:03:01,980 --> 00:03:04,319
the flow is that check the md5 and shaft

76
00:03:04,319 --> 00:03:07,440
256 of the husky bootstrapper in a

77
00:03:07,440 --> 00:03:09,239
specific directory depending on the

78
00:03:09,239 --> 00:03:10,980
Opera operative system that you're

79
00:03:10,980 --> 00:03:12,959
running and if it's not matching the

80
00:03:12,959 --> 00:03:14,760
remote values of the md5 and the shot

81
00:03:14,760 --> 00:03:17,819
256 you will download a new version

82
00:03:17,819 --> 00:03:21,720
now the next step of this transporter is

83
00:03:21,720 --> 00:03:25,560
that you will upload an itm SP file itm

84
00:03:25,560 --> 00:03:27,720
SP is basically a pre-generated store

85
00:03:27,720 --> 00:03:29,819
package for the iTunes Store

86
00:03:29,819 --> 00:03:34,080
and an itm SP package is if you read

87
00:03:34,080 --> 00:03:36,420
Around It basically just a zip file with

88
00:03:36,420 --> 00:03:39,120
a metadata XML together with for example

89
00:03:39,120 --> 00:03:42,239
an Epub file downloading uploading an

90
00:03:42,239 --> 00:03:45,420
ebook and the Manifest contains the

91
00:03:45,420 --> 00:03:48,180
files the size of the files and the mdfm

92
00:03:48,180 --> 00:03:50,280
making sure that all the files exists

93
00:03:50,280 --> 00:03:52,980
making also sure that the files are not

94
00:03:52,980 --> 00:03:54,780
corrupted in any way

95
00:03:54,780 --> 00:03:57,239
so you can see that the files in the itm

96
00:03:57,239 --> 00:04:00,180
SP is actually matching uh the values in

97
00:04:00,180 --> 00:04:03,599
the Manifest now what we can conclude

98
00:04:03,599 --> 00:04:05,220
now from the flow is that we have the

99
00:04:05,220 --> 00:04:07,620
Epub and the Manifest in the zip and it

100
00:04:07,620 --> 00:04:09,599
contains the md5 everything needs to

101
00:04:09,599 --> 00:04:12,360
match for its work the next step is that

102
00:04:12,360 --> 00:04:14,700
it's actually extracting the Epub file

103
00:04:14,700 --> 00:04:16,918
locally before uploading it to Apple

104
00:04:16,918 --> 00:04:19,620
servers you're actually extracting if

105
00:04:19,620 --> 00:04:21,120
you're running this command locally it

106
00:04:21,120 --> 00:04:24,000
will extract the zip file and then go

107
00:04:24,000 --> 00:04:26,340
through the the Epub file basically and

108
00:04:26,340 --> 00:04:27,960
validate it and making sure that

109
00:04:27,960 --> 00:04:31,080
everything is is as as it expects it to

110
00:04:31,080 --> 00:04:33,840
be using a validation tool

111
00:04:33,840 --> 00:04:36,180
so we know now that the Epub toolkit

112
00:04:36,180 --> 00:04:38,160
will extract the zip file before

113
00:04:38,160 --> 00:04:40,380
uploading it to Apple servers

114
00:04:40,380 --> 00:04:43,020
now the the additional flow not running

115
00:04:43,020 --> 00:04:45,660
the transporter app locally but running

116
00:04:45,660 --> 00:04:48,660
it remotely if you're uploading an Epub

117
00:04:48,660 --> 00:04:52,380
file on the authors.apple.com this one

118
00:04:52,380 --> 00:04:55,500
will basically wrap your Epub file in

119
00:04:55,500 --> 00:04:59,100
with a manifest making its own itm sp

120
00:04:59,100 --> 00:05:01,560
file and then running the transporter

121
00:05:01,560 --> 00:05:04,860
code on their server instead so when you

122
00:05:04,860 --> 00:05:06,720
start looking at the request made when

123
00:05:06,720 --> 00:05:08,880
you're uploading an apob file you will

124
00:05:08,880 --> 00:05:12,120
see that it's actually making a itm SP

125
00:05:12,120 --> 00:05:14,639
file itself and what's interesting also

126
00:05:14,639 --> 00:05:16,620
is that now we know that it's running

127
00:05:16,620 --> 00:05:18,720
the same kind of application both

128
00:05:18,720 --> 00:05:20,880
locally where you can download it and

129
00:05:20,880 --> 00:05:23,520
remotely when where you can just upload

130
00:05:23,520 --> 00:05:26,580
files to make it process them

131
00:05:26,580 --> 00:05:28,860
so this also means that if we find the

132
00:05:28,860 --> 00:05:30,840
vulnerability we can trigger it also

133
00:05:30,840 --> 00:05:33,300
remotely on Apple servers

134
00:05:33,300 --> 00:05:35,220
so this is the way you run the itms

135
00:05:35,220 --> 00:05:37,139
transporter locally it has a bunch of

136
00:05:37,139 --> 00:05:39,479
commands this is the upload one

137
00:05:39,479 --> 00:05:41,639
you're basically referring to our itm SP

138
00:05:41,639 --> 00:05:44,400
file and you're also referring to who

139
00:05:44,400 --> 00:05:46,500
you are and the user and password when

140
00:05:46,500 --> 00:05:49,380
you run this remotely on Apple servers

141
00:05:49,380 --> 00:05:51,180
they will pre-fill a bunch of things

142
00:05:51,180 --> 00:05:53,160
here and remember they are the ones

143
00:05:53,160 --> 00:05:56,160
creating the itemsp file so the zip file

144
00:05:56,160 --> 00:05:59,039
for the item SP you cannot upload item

145
00:05:59,039 --> 00:06:01,680
SP directly to Apple servers that one is

146
00:06:01,680 --> 00:06:04,639
created by their own

147
00:06:04,639 --> 00:06:07,620
like by wrapping the Epub file basically

148
00:06:07,620 --> 00:06:09,539
but we have a bunch of things here so

149
00:06:09,539 --> 00:06:11,759
let's exploit this we we know that the

150
00:06:11,759 --> 00:06:13,979
Epub file is a ZIP file we know that

151
00:06:13,979 --> 00:06:17,100
there's an XML manifest Etc let's try to

152
00:06:17,100 --> 00:06:18,979
see if we can find some ways in there

153
00:06:18,979 --> 00:06:22,560
and the thing with zip files is past

154
00:06:22,560 --> 00:06:25,340
reversal you're basically able to pack

155
00:06:25,340 --> 00:06:28,740
dot dot slash dot slash paths into a zip

156
00:06:28,740 --> 00:06:31,280
file basically meaning that if you're

157
00:06:31,280 --> 00:06:35,520
unzipping a zip file without a code

158
00:06:35,520 --> 00:06:38,220
that's actually protecting you from path

159
00:06:38,220 --> 00:06:40,860
reversing you can that basically extract

160
00:06:40,860 --> 00:06:43,259
things outside of the directory that it

161
00:06:43,259 --> 00:06:45,479
was pointing to because you have dotted

162
00:06:45,479 --> 00:06:48,060
slash in the file names so this is one

163
00:06:48,060 --> 00:06:49,440
of what's actually one of the first

164
00:06:49,440 --> 00:06:51,479
things I tried when doing this was that

165
00:06:51,479 --> 00:06:55,020
I will make an evil ePub that a zip file

166
00:06:55,020 --> 00:06:57,720
with past traversed variables in it or

167
00:06:57,720 --> 00:07:00,300
path reversed files so I created a text

168
00:07:00,300 --> 00:07:02,639
file I used the evil sit which is

169
00:07:02,639 --> 00:07:05,639
basically just a wrapper to to creating

170
00:07:05,639 --> 00:07:08,639
a zip file and used uh dot slash dot

171
00:07:08,639 --> 00:07:11,580
slash dot slash and then a directory

172
00:07:11,580 --> 00:07:14,160
that doesn't exist with a file and

173
00:07:14,160 --> 00:07:16,620
what's interesting then is that if if

174
00:07:16,620 --> 00:07:19,800
this actually works just because this

175
00:07:19,800 --> 00:07:23,000
this directory I refer to Temp temp Zed

176
00:07:23,000 --> 00:07:26,160
because that on doesn't exist a regular

177
00:07:26,160 --> 00:07:28,319
sip extract will actually fail because

178
00:07:28,319 --> 00:07:30,960
it says that this there's no such file

179
00:07:30,960 --> 00:07:33,060
or directory that that exists here so

180
00:07:33,060 --> 00:07:35,039
this is a kind of a good trick for

181
00:07:35,039 --> 00:07:38,039
testing past reversals is to point to a

182
00:07:38,039 --> 00:07:39,900
directory and then a file into that

183
00:07:39,900 --> 00:07:41,880
directory where you know that the

184
00:07:41,880 --> 00:07:44,280
directory doesn't exist because this ZIP

185
00:07:44,280 --> 00:07:46,560
file extractor won't create directories

186
00:07:46,560 --> 00:07:49,199
by itself especially not the you know

187
00:07:49,199 --> 00:07:52,080
recursive directories however when you

188
00:07:52,080 --> 00:07:54,720
get this error you can then try with TMP

189
00:07:54,720 --> 00:07:56,340
like the temp directory is something

190
00:07:56,340 --> 00:07:59,699
that mostly exists for everyone and when

191
00:07:59,699 --> 00:08:02,280
I did this I actually got no error then

192
00:08:02,280 --> 00:08:04,440
it actually worked perfectly so this

193
00:08:04,440 --> 00:08:07,380
means we can write to Temp and we can do

194
00:08:07,380 --> 00:08:10,259
a pass reverse using the Epub zip

195
00:08:10,259 --> 00:08:13,620
now there's different temp files and

196
00:08:13,620 --> 00:08:16,259
temp directories used from the

197
00:08:16,259 --> 00:08:18,180
transporter app depending on if you're

198
00:08:18,180 --> 00:08:20,520
running on Mac OS or Linux and locally

199
00:08:20,520 --> 00:08:23,520
I'm running on Mac OS so uh whenever I

200
00:08:23,520 --> 00:08:25,680
tried things I had to make like a Sim

201
00:08:25,680 --> 00:08:28,199
link locally to actually simulate what

202
00:08:28,199 --> 00:08:30,780
would happen if it was on Linux and this

203
00:08:30,780 --> 00:08:32,820
is the reason why I did that was when

204
00:08:32,820 --> 00:08:34,520
you're uploading into the author's Apple

205
00:08:34,520 --> 00:08:37,080
you will see that it's actually running

206
00:08:37,080 --> 00:08:38,820
on Linux

207
00:08:38,820 --> 00:08:41,820
also you will see that the the directory

208
00:08:41,820 --> 00:08:44,339
that they're using to download the

209
00:08:44,339 --> 00:08:46,860
settings of the oski transport the oski

210
00:08:46,860 --> 00:08:48,899
bootstrapper and all these things it's

211
00:08:48,899 --> 00:08:51,360
actually running inside the TMP folder

212
00:08:51,360 --> 00:08:54,060
which is exactly what we can write to

213
00:08:54,060 --> 00:08:56,940
when when we're trying to upload files

214
00:08:56,940 --> 00:08:58,200
to authors

215
00:08:58,200 --> 00:09:03,959
and this place where was where I spent

216
00:09:03,959 --> 00:09:06,360
most of my time this is basically like

217
00:09:06,360 --> 00:09:08,519
how can I exploit this I know I can

218
00:09:08,519 --> 00:09:12,240
write files outside of of the expected

219
00:09:12,240 --> 00:09:15,480
attempt directory for the the ebook I

220
00:09:15,480 --> 00:09:18,180
know I can write files outside of it but

221
00:09:18,180 --> 00:09:20,459
what should I overwrite and what can I

222
00:09:20,459 --> 00:09:22,560
override what can I do to you know

223
00:09:22,560 --> 00:09:25,320
trigger code or trigger a Chrome tab or

224
00:09:25,320 --> 00:09:27,720
whatever so there's two days of attempts

225
00:09:27,720 --> 00:09:30,480
trying to figure out exactly what type

226
00:09:30,480 --> 00:09:32,940
of Rights I have overwriting certain

227
00:09:32,940 --> 00:09:33,839
things

228
00:09:33,839 --> 00:09:36,959
and it became a bit of a struggle

229
00:09:36,959 --> 00:09:39,480
actually and I had some conclusions

230
00:09:39,480 --> 00:09:42,240
after these two days that I tried to

231
00:09:42,240 --> 00:09:44,700
summarize basically there's no way for

232
00:09:44,700 --> 00:09:46,519
me to run you know Chrome's or anything

233
00:09:46,519 --> 00:09:49,620
that wasn't possible however I could

234
00:09:49,620 --> 00:09:51,660
write to temp

235
00:09:51,660 --> 00:09:54,959
and we know the app is using the output

236
00:09:54,959 --> 00:09:58,080
of the author's Apple uh the the bug log

237
00:09:58,080 --> 00:10:00,240
that that you get back we know that

238
00:10:00,240 --> 00:10:01,620
they're running you know they're

239
00:10:01,620 --> 00:10:03,540
downloading the Oscar bootstrapper and

240
00:10:03,540 --> 00:10:04,980
they have the properties and the

241
00:10:04,980 --> 00:10:07,140
settings they have everything in the

242
00:10:07,140 --> 00:10:08,220
temp file

243
00:10:08,220 --> 00:10:11,160
also we also we like I kind of figure

244
00:10:11,160 --> 00:10:13,680
out that the server that hosts this is

245
00:10:13,680 --> 00:10:16,440
only running Java mainly like that's

246
00:10:16,440 --> 00:10:18,720
what it's there for it's basically

247
00:10:18,720 --> 00:10:20,700
triggering this transporter flow to

248
00:10:20,700 --> 00:10:23,160
upload this file in the proper sense up

249
00:10:23,160 --> 00:10:25,440
to Apple's iTunes Store

250
00:10:25,440 --> 00:10:28,440
and what we also know is that the flow

251
00:10:28,440 --> 00:10:30,540
happening when the oski bootstrapper and

252
00:10:30,540 --> 00:10:32,399
everything is downloaded all those

253
00:10:32,399 --> 00:10:35,040
things are happening before our ZIP is

254
00:10:35,040 --> 00:10:38,220
even touched so if they have loaded this

255
00:10:38,220 --> 00:10:41,459
jar file into memory we have no way of

256
00:10:41,459 --> 00:10:44,100
you know triggering it another time at

257
00:10:44,100 --> 00:10:45,180
all

258
00:10:45,180 --> 00:10:47,459
because it's already loaded into memory

259
00:10:47,459 --> 00:10:49,440
and I tried doing this locally and I

260
00:10:49,440 --> 00:10:51,420
couldn't make it work

261
00:10:51,420 --> 00:10:54,660
now there was one interesting Discovery

262
00:10:54,660 --> 00:10:56,339
while doing this

263
00:10:56,339 --> 00:10:58,200
and the interesting Discovery is

264
00:10:58,200 --> 00:11:01,019
basically when I try to replace the oski

265
00:11:01,019 --> 00:11:02,820
bootstrapper

266
00:11:02,820 --> 00:11:05,820
which we knew the location of because we

267
00:11:05,820 --> 00:11:08,399
saw it in the logs it was temp.itms

268
00:11:08,399 --> 00:11:11,480
transporter lib slash husky bootstrapper

269
00:11:11,480 --> 00:11:14,760
whenever I over overwritten it with

270
00:11:14,760 --> 00:11:16,399
something

271
00:11:16,399 --> 00:11:20,640
whenever that happened when whenever as

272
00:11:20,640 --> 00:11:24,000
soon as the flow of uploading a file was

273
00:11:24,000 --> 00:11:25,740
done and this was happening locally as

274
00:11:25,740 --> 00:11:27,899
soon as it was done uploading it would

275
00:11:27,899 --> 00:11:31,440
crash with a class not found exception

276
00:11:31,440 --> 00:11:34,380
and I wrote to my friends I I actually

277
00:11:34,380 --> 00:11:37,560
this was Breton and Matthias of lydian

278
00:11:37,560 --> 00:11:40,140
Broome basically I wrote to them late

279
00:11:40,140 --> 00:11:42,480
evening after two days of spending the

280
00:11:42,480 --> 00:11:45,120
time with this I wrote to them like okay

281
00:11:45,120 --> 00:11:46,920
I got it to crash this must mean

282
00:11:46,920 --> 00:11:49,200
something right I have a class not found

283
00:11:49,200 --> 00:11:51,839
it's basically happening something with

284
00:11:51,839 --> 00:11:54,540
the jar file that is causing it to

285
00:11:54,540 --> 00:11:57,959
actually crash this must mean something

286
00:11:57,959 --> 00:12:00,540
so this class not found was very

287
00:12:00,540 --> 00:12:03,540
interesting and it it created an idea in

288
00:12:03,540 --> 00:12:06,720
my head the idea is let's mimic the

289
00:12:06,720 --> 00:12:09,420
Oscar bootstrapper because it said class

290
00:12:09,420 --> 00:12:12,240
not found right so let's decompile the

291
00:12:12,240 --> 00:12:14,480
dot class in oski bootstrapper one of it

292
00:12:14,480 --> 00:12:17,640
one of the classes modify it then

293
00:12:17,640 --> 00:12:20,000
compile that one into a class file again

294
00:12:20,000 --> 00:12:23,579
then combine that class file and and

295
00:12:23,579 --> 00:12:26,880
repack it into a jar file the same oski

296
00:12:26,880 --> 00:12:29,640
bootstrapper but a bit different then

297
00:12:29,640 --> 00:12:32,279
put the jar in the Epub to replace the

298
00:12:32,279 --> 00:12:35,519
temp dot slash temp itms transported

299
00:12:35,519 --> 00:12:37,980
liboski bootstrapper basically getting

300
00:12:37,980 --> 00:12:41,120
it to find the class again just because

301
00:12:41,120 --> 00:12:43,620
the thing I replaced it with now didn't

302
00:12:43,620 --> 00:12:45,300
have the class in it

303
00:12:45,300 --> 00:12:48,120
so what I did is basically I had an

304
00:12:48,120 --> 00:12:50,160
original directory with all the dot

305
00:12:50,160 --> 00:12:52,260
classes and then I had a transporter

306
00:12:52,260 --> 00:12:54,779
with with the Java files so I could

307
00:12:54,779 --> 00:12:56,519
compile the Java files and move them

308
00:12:56,519 --> 00:12:58,620
into the class files to repack the jar

309
00:12:58,620 --> 00:13:00,600
properly after that

310
00:13:00,600 --> 00:13:02,940
and then I made like a Java compile and

311
00:13:02,940 --> 00:13:05,040
copying it over to the original just to

312
00:13:05,040 --> 00:13:07,139
be able to create this kind of Jar file

313
00:13:07,139 --> 00:13:10,079
uh using the same kind of method that

314
00:13:10,079 --> 00:13:12,180
that it looked like before

315
00:13:12,180 --> 00:13:15,120
also I then pointed it in the evil state

316
00:13:15,120 --> 00:13:17,459
to actually use this jar file so this is

317
00:13:17,459 --> 00:13:19,019
the one I'm replacing the oski

318
00:13:19,019 --> 00:13:20,279
bootstrapper with

319
00:13:20,279 --> 00:13:23,760
and I tried this out what happened was a

320
00:13:23,760 --> 00:13:25,800
zip file invalid lockheather bad

321
00:13:25,800 --> 00:13:27,959
signature that was basically the result

322
00:13:27,959 --> 00:13:30,060
of this and I started Googling and it

323
00:13:30,060 --> 00:13:31,860
says like if you have multiple classes

324
00:13:31,860 --> 00:13:34,079
loaded of one jar file

325
00:13:34,079 --> 00:13:36,660
but you have different instances of URL

326
00:13:36,660 --> 00:13:39,060
class loader and you change this jar

327
00:13:39,060 --> 00:13:41,579
file at runtime you will get an error

328
00:13:41,579 --> 00:13:43,800
the zip file invalid lockhead or bad

329
00:13:43,800 --> 00:13:45,600
signature the error might be different

330
00:13:45,600 --> 00:13:48,360
but I'm like okay this is an expected

331
00:13:48,360 --> 00:13:51,000
error that happens if you change a jar

332
00:13:51,000 --> 00:13:53,040
file using runtime especially if you're

333
00:13:53,040 --> 00:13:55,500
using the URL class loader

334
00:13:55,500 --> 00:13:58,139
and I was like okay this took me an hour

335
00:13:58,139 --> 00:14:00,959
to actually spend time with this I came

336
00:14:00,959 --> 00:14:02,399
a bit further

337
00:14:02,399 --> 00:14:04,800
but I kind of realized like this I'm

338
00:14:04,800 --> 00:14:07,200
probably screwed right I'm foiled again

339
00:14:07,200 --> 00:14:08,880
right

340
00:14:08,880 --> 00:14:11,100
but then I thought to myself like what

341
00:14:11,100 --> 00:14:12,899
does lock file what what does

342
00:14:12,899 --> 00:14:14,700
lockheather mean what does you know

343
00:14:14,700 --> 00:14:17,220
failed signature does it actually have a

344
00:14:17,220 --> 00:14:20,220
signature check on the you know the

345
00:14:20,220 --> 00:14:22,320
parts of the jar file like how advanced

346
00:14:22,320 --> 00:14:24,300
is this so I started looking at the

347
00:14:24,300 --> 00:14:27,839
actual uh you know documentation around

348
00:14:27,839 --> 00:14:30,540
these errors so what I could see is

349
00:14:30,540 --> 00:14:33,480
basically uh this function

350
00:14:33,480 --> 00:14:36,060
this function is the one triggering the

351
00:14:36,060 --> 00:14:38,700
zip file invalid lock header error and

352
00:14:38,700 --> 00:14:40,320
what you can see here is that basically

353
00:14:40,320 --> 00:14:43,560
it's using the zip file as is and then

354
00:14:43,560 --> 00:14:46,920
using offsets to read the the things

355
00:14:46,920 --> 00:14:49,139
that it wants to extract from the jar

356
00:14:49,139 --> 00:14:50,100
file

357
00:14:50,100 --> 00:14:52,980
to uh to be able to unpack it but then

358
00:14:52,980 --> 00:14:55,620
it's actually checking a header of this

359
00:14:55,620 --> 00:14:59,459
and comparing the header between what it

360
00:14:59,459 --> 00:15:02,339
had you know unpacked before and after

361
00:15:02,339 --> 00:15:05,760
just to figure out if this works so I

362
00:15:05,760 --> 00:15:07,800
was scared that what it's actually doing

363
00:15:07,800 --> 00:15:10,920
here is looking for a signature around

364
00:15:10,920 --> 00:15:14,940
uh you know crc32 or some form of real

365
00:15:14,940 --> 00:15:16,800
Sig check here

366
00:15:16,800 --> 00:15:19,019
that made me really scary because this

367
00:15:19,019 --> 00:15:21,420
is actually the validation here that it

368
00:15:21,420 --> 00:15:22,800
does

369
00:15:22,800 --> 00:15:25,980
and this happened two hours after the

370
00:15:25,980 --> 00:15:28,380
fact that I kind of realized that I was

371
00:15:28,380 --> 00:15:31,260
being you know this wasn't possible

372
00:15:31,260 --> 00:15:33,480
so we have a bunch of things to play

373
00:15:33,480 --> 00:15:36,540
with and if you unzip with LVS arguments

374
00:15:36,540 --> 00:15:39,720
you can basically see a bunch of

375
00:15:39,720 --> 00:15:42,420
parameters not only the things that

376
00:15:42,420 --> 00:15:44,160
you've you've packed in the zip file a

377
00:15:44,160 --> 00:15:46,440
jar file is a ZIP file right you could

378
00:15:46,440 --> 00:15:48,540
also see the original length of the

379
00:15:48,540 --> 00:15:50,420
files you could see the compressing

380
00:15:50,420 --> 00:15:53,459
compression rate you could also see the

381
00:15:53,459 --> 00:15:56,639
the size they end up with after the fact

382
00:15:56,639 --> 00:15:59,100
that they've been compressed in addition

383
00:15:59,100 --> 00:16:01,380
to that you're also seeing the crc32

384
00:16:01,380 --> 00:16:03,300
basically

385
00:16:03,300 --> 00:16:05,820
so when I saw this I was kind of worried

386
00:16:05,820 --> 00:16:08,339
that the crc32 had to be you know

387
00:16:08,339 --> 00:16:10,560
validated against the class files which

388
00:16:10,560 --> 00:16:12,959
meant that as soon as I replaced a class

389
00:16:12,959 --> 00:16:15,240
file it wouldn't work at all

390
00:16:15,240 --> 00:16:18,000
and remember the error that we saw

391
00:16:18,000 --> 00:16:20,820
we saw class not found exception and we

392
00:16:20,820 --> 00:16:23,519
saw a bootstrap util but we also saw a

393
00:16:23,519 --> 00:16:25,920
dollar sign and then a one

394
00:16:25,920 --> 00:16:28,980
and when we look in the in the jar file

395
00:16:28,980 --> 00:16:31,860
we actually have two dot class files for

396
00:16:31,860 --> 00:16:34,139
one of the the classes that we have the

397
00:16:34,139 --> 00:16:36,420
bootstrap util actually have two classes

398
00:16:36,420 --> 00:16:38,519
in it which is kind of interesting right

399
00:16:38,519 --> 00:16:40,920
so I started looking at this as what is

400
00:16:40,920 --> 00:16:43,920
the dollar one.class and someone wrote I

401
00:16:43,920 --> 00:16:46,380
think it was on on stack Overflow they

402
00:16:46,380 --> 00:16:49,560
said that inner classes in a class

403
00:16:49,560 --> 00:16:52,259
inside a jar file will actually break

404
00:16:52,259 --> 00:16:55,320
out into its own class file

405
00:16:55,320 --> 00:16:58,440
because the inner function is its own

406
00:16:58,440 --> 00:17:02,220
kind of anonymous class inside inside it

407
00:17:02,220 --> 00:17:04,619
and it will still break it out but what

408
00:17:04,619 --> 00:17:06,660
was interesting with the inner classes

409
00:17:06,660 --> 00:17:09,959
is this was the one uh triggering this

410
00:17:09,959 --> 00:17:11,400
error

411
00:17:11,400 --> 00:17:14,220
uh this this basically meant that even

412
00:17:14,220 --> 00:17:16,459
though the oski bootstrapper was loaded

413
00:17:16,459 --> 00:17:20,819
the dollar one class was still you know

414
00:17:20,819 --> 00:17:22,260
getting triggered

415
00:17:22,260 --> 00:17:24,660
and failed because I replaced the jar

416
00:17:24,660 --> 00:17:26,459
that was something that was extremely

417
00:17:26,459 --> 00:17:28,679
interesting here and when I looked at

418
00:17:28,679 --> 00:17:32,100
the the bootstrap util class function I

419
00:17:32,100 --> 00:17:35,039
could find the inner class being this

420
00:17:35,039 --> 00:17:36,900
simple file visitor it's basically a

421
00:17:36,900 --> 00:17:40,559
callback for going walking through a

422
00:17:40,559 --> 00:17:43,020
directory and this basically allows you

423
00:17:43,020 --> 00:17:45,360
to recursively delete a directory

424
00:17:45,360 --> 00:17:47,340
containing a bunch of files

425
00:17:47,340 --> 00:17:49,980
so when I saw this I came to the

426
00:17:49,980 --> 00:17:51,720
conclusion that okay there's something

427
00:17:51,720 --> 00:17:54,780
actually reading the jar file again even

428
00:17:54,780 --> 00:17:57,059
though the jar file is loaded and it has

429
00:17:57,059 --> 00:17:59,340
something to do with these inner classes

430
00:17:59,340 --> 00:18:05,340
and maybe we can do something in in our

431
00:18:05,340 --> 00:18:08,820
replacement jar that can make sure that

432
00:18:08,820 --> 00:18:11,160
it believes that this is the same kind

433
00:18:11,160 --> 00:18:14,700
of code so we're changing our idea a bit

434
00:18:14,700 --> 00:18:16,679
we're decompiling the class into a skip

435
00:18:16,679 --> 00:18:18,840
bootstrapper we modified the inner class

436
00:18:18,840 --> 00:18:20,640
not the outer class or the regular

437
00:18:20,640 --> 00:18:22,860
classes but the inner class and then

438
00:18:22,860 --> 00:18:25,140
compile it into the class

439
00:18:25,140 --> 00:18:27,600
we make sure the size and the

440
00:18:27,600 --> 00:18:30,000
compression is the same those things are

441
00:18:30,000 --> 00:18:32,820
variables that we can control because

442
00:18:32,820 --> 00:18:35,039
you know it's only a matter of length

443
00:18:35,039 --> 00:18:37,559
and size and and making sure that the

444
00:18:37,559 --> 00:18:39,600
compression rate stays the same then

445
00:18:39,600 --> 00:18:41,940
repacking through jar file we put the

446
00:18:41,940 --> 00:18:45,600
jar in our ePub and try to replace it

447
00:18:45,600 --> 00:18:48,059
here's a guy with a horse

448
00:18:48,059 --> 00:18:52,260
so cue the AAA basically what I did here

449
00:18:52,260 --> 00:18:55,620
is that the the zip files of a jar is

450
00:18:55,620 --> 00:18:57,720
using deflate deflate compression is

451
00:18:57,720 --> 00:19:00,840
basically very very basic algorithm of

452
00:19:00,840 --> 00:19:03,299
trying to you know find patterns that

453
00:19:03,299 --> 00:19:04,620
you can repeat and then trying to

454
00:19:04,620 --> 00:19:07,440
shorten it down this is my guess right I

455
00:19:07,440 --> 00:19:09,960
don't exactly know how it works but the

456
00:19:09,960 --> 00:19:12,240
the the end result is basically that you

457
00:19:12,240 --> 00:19:15,419
know 5as compresses more than adaf for

458
00:19:15,419 --> 00:19:17,340
example because you can say that it's

459
00:19:17,340 --> 00:19:20,100
repeating multiple times and this allows

460
00:19:20,100 --> 00:19:22,500
us to iterate when whenever we want to

461
00:19:22,500 --> 00:19:25,200
match the the compression rate and the

462
00:19:25,200 --> 00:19:27,360
the size before and after we can

463
00:19:27,360 --> 00:19:29,840
actually utilize the fact that it's

464
00:19:29,840 --> 00:19:33,600
compressing uh you know con consecutive

465
00:19:33,600 --> 00:19:35,520
letters and non-consecutive letters

466
00:19:35,520 --> 00:19:37,559
differently this this helps us into

467
00:19:37,559 --> 00:19:40,140
figuring out if if we can you know get

468
00:19:40,140 --> 00:19:42,480
the compression rate the same and we

469
00:19:42,480 --> 00:19:44,520
will actually try to exploit this using

470
00:19:44,520 --> 00:19:47,280
system alt print which allows us to you

471
00:19:47,280 --> 00:19:49,140
know get an output and because we're

472
00:19:49,140 --> 00:19:51,000
getting the log we're basically getting

473
00:19:51,000 --> 00:19:52,860
the output directly and we're able to

474
00:19:52,860 --> 00:19:56,160
see directly if we get it to work

475
00:19:56,160 --> 00:19:59,160
so my first attempt was basically to

476
00:19:59,160 --> 00:20:02,640
write some code to not you know as you

477
00:20:02,640 --> 00:20:04,980
saw with the walk file tree the only

478
00:20:04,980 --> 00:20:06,600
thing that they did was basically

479
00:20:06,600 --> 00:20:09,720
deleting files so we had a certain limit

480
00:20:09,720 --> 00:20:15,179
of how much code that was needed for for

481
00:20:15,179 --> 00:20:18,480
um for everything that was happening in

482
00:20:18,480 --> 00:20:21,900
this inner class so and I started doing

483
00:20:21,900 --> 00:20:24,179
you know a replacing also I had the

484
00:20:24,179 --> 00:20:27,360
exact same length left and then tried to

485
00:20:27,360 --> 00:20:30,480
get some form of data out as well in

486
00:20:30,480 --> 00:20:33,660
this case the path directory or the path

487
00:20:33,660 --> 00:20:36,600
environment variable for just to have

488
00:20:36,600 --> 00:20:38,700
something that could actually work

489
00:20:38,700 --> 00:20:41,940
so then I started you know making a

490
00:20:41,940 --> 00:20:44,880
comparison and in my first attempt when

491
00:20:44,880 --> 00:20:46,740
I had you know the same kind of length

492
00:20:46,740 --> 00:20:49,320
from the beginning and I tried it with

493
00:20:49,320 --> 00:20:50,840
just

494
00:20:50,840 --> 00:20:53,460
but then you know it tried to Echo the

495
00:20:53,460 --> 00:20:55,620
pass out I could see that you know the

496
00:20:55,620 --> 00:20:58,679
1649 that we see here is the same so the

497
00:20:58,679 --> 00:21:00,660
original length is exactly the same as

498
00:21:00,660 --> 00:21:02,160
before

499
00:21:02,160 --> 00:21:04,620
but and remember this is not the length

500
00:21:04,620 --> 00:21:07,020
of the Java file this is the length of

501
00:21:07,020 --> 00:21:09,600
the compiled result of the Java file so

502
00:21:09,600 --> 00:21:11,820
this doesn't look you know this AAA

503
00:21:11,820 --> 00:21:13,799
looks really long but that's because the

504
00:21:13,799 --> 00:21:16,500
you know the original file delete was

505
00:21:16,500 --> 00:21:18,600
actually creating a bunch of code in the

506
00:21:18,600 --> 00:21:21,120
compiled class file so what we could see

507
00:21:21,120 --> 00:21:23,039
here however is that the it's

508
00:21:23,039 --> 00:21:25,140
compressing too much it's it's returning

509
00:21:25,140 --> 00:21:26,940
it into six four five instead of six

510
00:21:26,940 --> 00:21:29,640
four seven so we need to make it a

511
00:21:29,640 --> 00:21:33,480
little bit worse at compressing the

512
00:21:33,480 --> 00:21:37,559
uh were like worse at compressing the

513
00:21:37,559 --> 00:21:40,500
file because it's making a too too good

514
00:21:40,500 --> 00:21:43,740
job for it uh what happens then is when

515
00:21:43,740 --> 00:21:45,900
we just insert an F somewhere is the

516
00:21:45,900 --> 00:21:47,760
basically that now it's compressing too

517
00:21:47,760 --> 00:21:49,860
little because now you've put a letter

518
00:21:49,860 --> 00:21:52,980
in there that that prevents it from

519
00:21:52,980 --> 00:21:55,919
compressing it as as good as possible I

520
00:21:55,919 --> 00:21:58,620
made a video of me you know trying to

521
00:21:58,620 --> 00:22:00,720
figure this out locally so I'm like

522
00:22:00,720 --> 00:22:02,880
running changing leather chaining

523
00:22:02,880 --> 00:22:05,100
leather chaining leather and I came to

524
00:22:05,100 --> 00:22:07,679
the end uh when trying this locally that

525
00:22:07,679 --> 00:22:10,200
okay what happens here is that if I put

526
00:22:10,200 --> 00:22:12,240
two F's in the beginning I I maintain

527
00:22:12,240 --> 00:22:14,640
the same kind of length I put two F's in

528
00:22:14,640 --> 00:22:17,640
the beginning I end up with 1649 in the

529
00:22:17,640 --> 00:22:20,460
beginning and afterwards six four seven

530
00:22:20,460 --> 00:22:24,419
and I you know two hours after I came to

531
00:22:24,419 --> 00:22:27,659
this re realization I run the the Epub

532
00:22:27,659 --> 00:22:30,720
file I'll upload the itm SP uh locally I

533
00:22:30,720 --> 00:22:33,120
run it locally and I see that I get you

534
00:22:33,120 --> 00:22:33,799
know

535
00:22:33,799 --> 00:22:37,919
all these A's out and I realize okay

536
00:22:37,919 --> 00:22:41,820
I've spent uh first of all I I realized

537
00:22:41,820 --> 00:22:46,320
it at the into 2 am but then 9 A.M I was

538
00:22:46,320 --> 00:22:48,360
able so I spent a huge amount of time

539
00:22:48,360 --> 00:22:49,919
during this night just to trying to

540
00:22:49,919 --> 00:22:52,380
figure it out so basically when I then

541
00:22:52,380 --> 00:22:55,860
uploaded this to the authors.apple.com I

542
00:22:55,860 --> 00:22:57,659
basically saw the pathfile this was

543
00:22:57,659 --> 00:22:59,220
actually working I was actually

544
00:22:59,220 --> 00:23:03,780
triggering this flow just by making sure

545
00:23:03,780 --> 00:23:05,760
that the compression rate and the size

546
00:23:05,760 --> 00:23:07,919
before and after was actually the right

547
00:23:07,919 --> 00:23:11,220
so just hit image hit an email to Apple

548
00:23:11,220 --> 00:23:13,740
reporting this RC this is a remote code

549
00:23:13,740 --> 00:23:17,220
execution on authors apple.com using the

550
00:23:17,220 --> 00:23:19,140
fact that we can replace the jar file

551
00:23:19,140 --> 00:23:21,900
within our classes if they have the same

552
00:23:21,900 --> 00:23:24,480
compression rate and length

553
00:23:24,480 --> 00:23:26,400
and I wrote to them also like this is

554
00:23:26,400 --> 00:23:28,620
one of probably top one best bug I've

555
00:23:28,620 --> 00:23:30,960
ever found because it took so much time

556
00:23:30,960 --> 00:23:33,720
to figure it out but also it was so

557
00:23:33,720 --> 00:23:35,700
amazing to actually find you know this

558
00:23:35,700 --> 00:23:38,700
way forward and I wrote to Bretton

559
00:23:38,700 --> 00:23:41,100
Matthias and like okay I was actually

560
00:23:41,100 --> 00:23:43,320
able to exploit this to run the command

561
00:23:43,320 --> 00:23:45,900
in this case I'm running you know an

562
00:23:45,900 --> 00:23:47,940
open connection to an external server

563
00:23:47,940 --> 00:23:50,580
but then I was also able to get the

564
00:23:50,580 --> 00:23:55,080
runtime and execute a curl command using

565
00:23:55,080 --> 00:23:58,200
um who am I just to figure out who the

566
00:23:58,200 --> 00:24:01,200
user is the app user what happens when I

567
00:24:01,200 --> 00:24:03,419
reported this to Apple and I when I was

568
00:24:03,419 --> 00:24:05,580
able to actually run my code on their

569
00:24:05,580 --> 00:24:08,220
servers was that the code I was sharing

570
00:24:08,220 --> 00:24:10,740
with them I shared on iCloud and

571
00:24:10,740 --> 00:24:13,380
suddenly I had a bunch of people just

572
00:24:13,380 --> 00:24:16,039
showing up sharing this code local

573
00:24:16,039 --> 00:24:19,500
internally on Apple and one day after

574
00:24:19,500 --> 00:24:22,820
they basically shut down the Epub uh the

575
00:24:22,820 --> 00:24:25,020
author.apple.com because they realized

576
00:24:25,020 --> 00:24:27,480
that we need to figure figure this out

577
00:24:27,480 --> 00:24:30,960
before you know anything else happens

578
00:24:30,960 --> 00:24:34,080
I also have an obligatory you know uh

579
00:24:34,080 --> 00:24:36,900
Matthias reaction which after I wrote

580
00:24:36,900 --> 00:24:38,520
this you know day and night trying to

581
00:24:38,520 --> 00:24:40,559
explain to them how I actually did this

582
00:24:40,559 --> 00:24:43,260
he was like okay this is pretty good

583
00:24:43,260 --> 00:24:45,419
and the demo here what I've actually

584
00:24:45,419 --> 00:24:49,799
done in the demo is I've created a

585
00:24:49,799 --> 00:24:53,100
simple simple app and it has two bash

586
00:24:53,100 --> 00:24:55,980
files one is called build and run build

587
00:24:55,980 --> 00:25:00,360
and run will load in a external jar file

588
00:25:00,360 --> 00:25:03,600
uh from a bootstrapper and then it will

589
00:25:03,600 --> 00:25:06,840
wait for you to click enter and what

590
00:25:06,840 --> 00:25:08,460
basically what happens on enter is that

591
00:25:08,460 --> 00:25:11,820
we it will invoke a method for for one

592
00:25:11,820 --> 00:25:13,860
of the load already loaded classes in

593
00:25:13,860 --> 00:25:15,600
the jar that's basically what happens

594
00:25:15,600 --> 00:25:18,900
and and then we have a A bash file

595
00:25:18,900 --> 00:25:21,179
called exploit and the exploit will

596
00:25:21,179 --> 00:25:24,720
basically replace a one jar file with

597
00:25:24,720 --> 00:25:26,580
another and run completely different

598
00:25:26,580 --> 00:25:28,980
code that was loaded from from the start

599
00:25:28,980 --> 00:25:30,659
and I'll show you a video of this

600
00:25:30,659 --> 00:25:32,520
basically I will run the build and run

601
00:25:32,520 --> 00:25:34,799
it will tell us that I've compiled

602
00:25:34,799 --> 00:25:36,480
everything I've loaded the jar right now

603
00:25:36,480 --> 00:25:39,059
and this is how it looks like it looks

604
00:25:39,059 --> 00:25:41,220
like correctly and then we have a

605
00:25:41,220 --> 00:25:44,340
malicious secondary job Java class which

606
00:25:44,340 --> 00:25:47,220
has a replaced code so we will open up a

607
00:25:47,220 --> 00:25:49,799
new tab we'll wait here and open up a

608
00:25:49,799 --> 00:25:52,320
new tab run exploit we will see that

609
00:25:52,320 --> 00:25:54,419
there's no diff in the compression so

610
00:25:54,419 --> 00:25:56,820
when I run now my replace code will run

611
00:25:56,820 --> 00:25:58,799
even though the jar file is actually

612
00:25:58,799 --> 00:26:01,559
loaded I will still be able to replace

613
00:26:01,559 --> 00:26:04,260
things and run different code in the jar

614
00:26:04,260 --> 00:26:06,659
so my conclusions to this is that this

615
00:26:06,659 --> 00:26:09,299
is absolutely exploitable elsewhere this

616
00:26:09,299 --> 00:26:11,400
has nothing to do with apple in specific

617
00:26:11,400 --> 00:26:15,539
this is also like this is like primarily

618
00:26:15,539 --> 00:26:18,299
because of URL class loader there is no

619
00:26:18,299 --> 00:26:21,659
Oscar needed there's no you know it's

620
00:26:21,659 --> 00:26:24,179
only the URL class loader that behaves

621
00:26:24,179 --> 00:26:26,760
like this and the class needs to have

622
00:26:26,760 --> 00:26:28,740
inner classes for you to actually

623
00:26:28,740 --> 00:26:30,480
replace them you can't introduce inner

624
00:26:30,480 --> 00:26:32,159
classes later there needs to have inner

625
00:26:32,159 --> 00:26:34,440
classes the jar file that you want to

626
00:26:34,440 --> 00:26:37,620
replace and the jar file the whole

627
00:26:37,620 --> 00:26:39,900
concept here is that it can and should

628
00:26:39,900 --> 00:26:41,940
have probably been loaded in the memory

629
00:26:41,940 --> 00:26:44,820
from the beginning but the the the

630
00:26:44,820 --> 00:26:47,100
important part is that you need to find

631
00:26:47,100 --> 00:26:49,980
a method or one of the classes inside

632
00:26:49,980 --> 00:26:52,440
this jar file that has not been run

633
00:26:52,440 --> 00:26:53,400
before

634
00:26:53,400 --> 00:26:55,799
so because what happens when you run a

635
00:26:55,799 --> 00:26:58,380
method in the URL class loader is that

636
00:26:58,380 --> 00:27:01,260
the class loader will not load all the

637
00:27:01,260 --> 00:27:03,840
classes directly so if you have one

638
00:27:03,840 --> 00:27:05,960
class that hasn't been running before

639
00:27:05,960 --> 00:27:08,340
that's the one that you can actually

640
00:27:08,340 --> 00:27:10,380
trigger but what's interesting here is

641
00:27:10,380 --> 00:27:12,539
that if you don't have inner classes it

642
00:27:12,539 --> 00:27:14,520
will have already loaded the existing

643
00:27:14,520 --> 00:27:16,260
one so then you cannot replace it this

644
00:27:16,260 --> 00:27:18,480
is where only works with inner classes

645
00:27:18,480 --> 00:27:22,140
on CL in their classes on inside classes

646
00:27:22,140 --> 00:27:24,659
that you haven't run before this is a

647
00:27:24,659 --> 00:27:26,880
very simple example and this is what my

648
00:27:26,880 --> 00:27:28,640
demo code on GitHub will show you

649
00:27:28,640 --> 00:27:31,679
basically everything except this part is

650
00:27:31,679 --> 00:27:34,080
happening on load when you're loading

651
00:27:34,080 --> 00:27:36,360
the build and run everything before this

652
00:27:36,360 --> 00:27:39,240
line will will run already the hello

653
00:27:39,240 --> 00:27:42,299
world.jar is loaded all the method has

654
00:27:42,299 --> 00:27:44,880
been initiated all the instances have

655
00:27:44,880 --> 00:27:48,120
been initiated but if you replace the

656
00:27:48,120 --> 00:27:51,240
jar before the invoke then you were able

657
00:27:51,240 --> 00:27:52,919
to actually run code

658
00:27:52,919 --> 00:27:56,159
uh amid the public repository on GitHub

659
00:27:56,159 --> 00:27:58,380
basically showing this example happy to

660
00:27:58,380 --> 00:28:00,179
play around for you to play around with

661
00:28:00,179 --> 00:28:03,659
and I'm I look forward to see if maybe I

662
00:28:03,659 --> 00:28:05,279
was wrong here maybe this is like an

663
00:28:05,279 --> 00:28:08,520
obvious thing I don't think it is I hope

664
00:28:08,520 --> 00:28:10,260
it's not and I do believe that there

665
00:28:10,260 --> 00:28:11,880
will be more places that you might find

666
00:28:11,880 --> 00:28:13,799
this on thank you so much my name is

667
00:28:13,799 --> 00:28:16,080
Franz I hope to see you again and thank

668
00:28:16,080 --> 00:28:17,760
you so much for having me on this

669
00:28:17,760 --> 00:28:21,140
conference thank you bye

