1
00:00:03,720 --> 00:00:05,339
hi everyone thank you so much for

2
00:00:05,339 --> 00:00:07,440
attending my talk I know it's a virtual

3
00:00:07,440 --> 00:00:09,059
event but it's always great to be able

4
00:00:09,059 --> 00:00:10,559
to share some knowledge whether it be

5
00:00:10,559 --> 00:00:12,480
through my blog post or through a

6
00:00:12,480 --> 00:00:14,580
conference like this and when Ben

7
00:00:14,580 --> 00:00:17,279
reached out to me to talk at uh speak at

8
00:00:17,279 --> 00:00:20,400
namcon uh it was just a good opportunity

9
00:00:20,400 --> 00:00:22,500
for me to share a really cool book that

10
00:00:22,500 --> 00:00:24,779
I found recently into Zoom the zoom

11
00:00:24,779 --> 00:00:27,359
application and I'm also really grateful

12
00:00:27,359 --> 00:00:29,580
to the zoom security team for approving

13
00:00:29,580 --> 00:00:30,900
disclosure so that we can talk about

14
00:00:30,900 --> 00:00:34,260
this and learn a lot from this bug so

15
00:00:34,260 --> 00:00:36,360
the title of this talk is called I hope

16
00:00:36,360 --> 00:00:38,040
this sticks analyzing clipboard event

17
00:00:38,040 --> 00:00:40,860
and listeners for xss and you might

18
00:00:40,860 --> 00:00:42,960
think oh clipboard event listeners that

19
00:00:42,960 --> 00:00:44,760
copy and paste is this a copy and paste

20
00:00:44,760 --> 00:00:46,020
xss

21
00:00:46,020 --> 00:00:48,120
well kind of but not the kind that

22
00:00:48,120 --> 00:00:50,039
you're thinking of and you'll find out

23
00:00:50,039 --> 00:00:53,640
more when I go through this talk

24
00:00:53,640 --> 00:00:56,219
so to quickly introduce myself I go by

25
00:00:56,219 --> 00:00:58,140
space Raccoon as my hacker handle I'm on

26
00:00:58,140 --> 00:01:00,239
hackowan on Twitter and I have a Blog as

27
00:01:00,239 --> 00:01:02,579
well so for the blog I'm actually going

28
00:01:02,579 --> 00:01:04,319
to post a blog post about this talk

29
00:01:04,319 --> 00:01:06,900
later on after this talk so if you want

30
00:01:06,900 --> 00:01:09,540
to like learn more just follow up and

31
00:01:09,540 --> 00:01:10,799
you know catch up on stuff that you

32
00:01:10,799 --> 00:01:12,180
might have missed doing this talk just

33
00:01:12,180 --> 00:01:16,200
go to my blog at space raccoon.dev

34
00:01:16,500 --> 00:01:18,540
so for today's talk I hope that you take

35
00:01:18,540 --> 00:01:20,400
away three things right it's kind of I'm

36
00:01:20,400 --> 00:01:21,900
going to be talking about a bug that I

37
00:01:21,900 --> 00:01:23,640
found but I think there are some

38
00:01:23,640 --> 00:01:25,020
important lessons that you can take away

39
00:01:25,020 --> 00:01:26,280
from this talk

40
00:01:26,280 --> 00:01:28,619
the first is automated JavaScript

41
00:01:28,619 --> 00:01:30,540
analysis so there are a lot of tools

42
00:01:30,540 --> 00:01:32,280
these days that help you run code scans

43
00:01:32,280 --> 00:01:36,840
for example code qls Nick Sam grab and

44
00:01:36,840 --> 00:01:39,600
while these tools might be able to kind

45
00:01:39,600 --> 00:01:42,060
of find possible vulnerabilities as a

46
00:01:42,060 --> 00:01:43,320
penetration tester you're going to use

47
00:01:43,320 --> 00:01:45,360
these tools very differently from say a

48
00:01:45,360 --> 00:01:46,799
developer that's using them in a

49
00:01:46,799 --> 00:01:49,020
continuous integration workflow right

50
00:01:49,020 --> 00:01:51,240
and you're going to have to approach

51
00:01:51,240 --> 00:01:53,820
these results that are coming out from

52
00:01:53,820 --> 00:01:56,520
the zest or this code scanning tool with

53
00:01:56,520 --> 00:01:59,159
a bit more perspective and and use it in

54
00:01:59,159 --> 00:02:00,840
a way that is actually useful for you to

55
00:02:00,840 --> 00:02:02,820
find real bugs instead of fighting with

56
00:02:02,820 --> 00:02:04,619
false positives so I'll be going through

57
00:02:04,619 --> 00:02:07,740
that this talk the second is to really

58
00:02:07,740 --> 00:02:10,020
introduce the MDM web docs as well as

59
00:02:10,020 --> 00:02:13,980
the w3tc standards uh talks docs that

60
00:02:13,980 --> 00:02:16,200
are online for you and the reason why I

61
00:02:16,200 --> 00:02:18,239
want to share this is because while we

62
00:02:18,239 --> 00:02:19,860
might think we know all about

63
00:02:19,860 --> 00:02:22,319
xss or JavaScript

64
00:02:22,319 --> 00:02:25,620
um the the field of web apis and the

65
00:02:25,620 --> 00:02:27,599
HTML stand is always growing is always

66
00:02:27,599 --> 00:02:29,640
changing and it's great that these

67
00:02:29,640 --> 00:02:31,020
documentation allows you to really

68
00:02:31,020 --> 00:02:32,879
understand in detail what's going on

69
00:02:32,879 --> 00:02:34,980
under the hood right so rather than

70
00:02:34,980 --> 00:02:37,020
trying to feel your way around say

71
00:02:37,020 --> 00:02:40,440
typescript of a specific data types the

72
00:02:40,440 --> 00:02:42,720
MDM webdocs is a fantastic tool for you

73
00:02:42,720 --> 00:02:44,400
to understand this and to build your

74
00:02:44,400 --> 00:02:46,500
payloads efficiently

75
00:02:46,500 --> 00:02:48,300
and a third kind of takeaway I hope you

76
00:02:48,300 --> 00:02:50,160
get from this talk is exotic event

77
00:02:50,160 --> 00:02:52,260
handlers right as I mentioned web apis

78
00:02:52,260 --> 00:02:54,120
is constantly growing the JavaScript web

79
00:02:54,120 --> 00:02:56,400
API the new functions you can call the

80
00:02:56,400 --> 00:02:58,739
new tools you can use so you can use

81
00:02:58,739 --> 00:03:01,319
stuff like um calling background

82
00:03:01,319 --> 00:03:03,480
handlers calling stuff like opening a

83
00:03:03,480 --> 00:03:06,360
webcam and these web apis are constantly

84
00:03:06,360 --> 00:03:09,120
being added onto and adding new attack

85
00:03:09,120 --> 00:03:11,700
surface for a penetration test so it's

86
00:03:11,700 --> 00:03:12,900
really important that you keep an eye

87
00:03:12,900 --> 00:03:16,200
out for this I know Gareth Hayes at pots

88
00:03:16,200 --> 00:03:18,000
hooker does fantastic research on new

89
00:03:18,000 --> 00:03:20,879
event handlers all the time but uku can

90
00:03:20,879 --> 00:03:22,860
also take this on whether it be by

91
00:03:22,860 --> 00:03:25,200
reading the MDM docs or just trying to

92
00:03:25,200 --> 00:03:27,720
build your own payload

93
00:03:27,720 --> 00:03:29,360
foreign

94
00:03:29,360 --> 00:03:32,220
to this talk is that I'm really

95
00:03:32,220 --> 00:03:34,200
interested in how the border between web

96
00:03:34,200 --> 00:03:37,319
and Native continues to blur in our

97
00:03:37,319 --> 00:03:38,700
applications and application Security

98
00:03:38,700 --> 00:03:41,459
today right you know back in the olden

99
00:03:41,459 --> 00:03:43,080
days we had something called rhinojs

100
00:03:43,080 --> 00:03:46,379
which is a Java uh you know a Java

101
00:03:46,379 --> 00:03:49,080
engine for JavaScript right and then you

102
00:03:49,080 --> 00:03:52,200
know not too long ago but still fairly

103
00:03:52,200 --> 00:03:54,659
long ago we had node.js right to the V8

104
00:03:54,659 --> 00:03:56,459
engine and that really changed the way

105
00:03:56,459 --> 00:03:57,959
that people use JavaScript rather than

106
00:03:57,959 --> 00:03:59,640
just being in a browser on a client site

107
00:03:59,640 --> 00:04:01,319
it's now been moved to the server side

108
00:04:01,319 --> 00:04:02,879
as well

109
00:04:02,879 --> 00:04:04,980
and then we have stuff like electron web

110
00:04:04,980 --> 00:04:07,260
assembly and Hermes so Hermes is a new

111
00:04:07,260 --> 00:04:09,599
JavaScript engine released by meta

112
00:04:09,599 --> 00:04:12,239
specifically for react native right so

113
00:04:12,239 --> 00:04:14,819
these are all new ways in which the web

114
00:04:14,819 --> 00:04:16,918
or web apis and JavaScript are being

115
00:04:16,918 --> 00:04:19,500
brought into different platforms from

116
00:04:19,500 --> 00:04:22,079
Mobile to native to desktop and it makes

117
00:04:22,079 --> 00:04:23,040
it

118
00:04:23,040 --> 00:04:24,720
um you know a lot more interesting

119
00:04:24,720 --> 00:04:27,180
because in the past you know when you're

120
00:04:27,180 --> 00:04:28,740
exploiting native applications or

121
00:04:28,740 --> 00:04:31,440
desktop applications you tend to look at

122
00:04:31,440 --> 00:04:34,560
for memory corruption or very specific

123
00:04:34,560 --> 00:04:37,560
native only vulnerabilities whereas now

124
00:04:37,560 --> 00:04:40,639
because you have stuff like electron and

125
00:04:40,639 --> 00:04:42,540
webassembly and Hermes you can kind of

126
00:04:42,540 --> 00:04:43,620
blur the line and find web

127
00:04:43,620 --> 00:04:45,540
vulnerabilities or even chain web

128
00:04:45,540 --> 00:04:47,040
vulnerabilities with memory

129
00:04:47,040 --> 00:04:48,780
vulnerabilities or desktop

130
00:04:48,780 --> 00:04:51,000
vulnerabilities

131
00:04:51,000 --> 00:04:53,460
and a big part of this is because web

132
00:04:53,460 --> 00:04:55,560
apis and standards are always growing in

133
00:04:55,560 --> 00:04:58,020
complexity so if we only look at say UI

134
00:04:58,020 --> 00:05:01,320
events right stuff that affects the UI

135
00:05:01,320 --> 00:05:04,680
of of a web page you know it's still

136
00:05:04,680 --> 00:05:06,360
being constantly updated the last being

137
00:05:06,360 --> 00:05:10,080
13 September 2022 and you know there's

138
00:05:10,080 --> 00:05:12,360
just so much complexity there this talk

139
00:05:12,360 --> 00:05:15,300
is about a very specific Handler the

140
00:05:15,300 --> 00:05:18,120
clipboard right and we look at what kind

141
00:05:18,120 --> 00:05:19,940
of interfaces available to the clipboard

142
00:05:19,940 --> 00:05:23,960
just the amount of support and the uh

143
00:05:23,960 --> 00:05:26,580
the variety of data types that you can

144
00:05:26,580 --> 00:05:29,820
put into a clipboard it really just it

145
00:05:29,820 --> 00:05:31,080
really just is a fantastic attack

146
00:05:31,080 --> 00:05:32,759
surface so it's something that I'm

147
00:05:32,759 --> 00:05:33,840
always interested in something I'm

148
00:05:33,840 --> 00:05:34,620
always trying to learn more about

149
00:05:34,620 --> 00:05:37,139
because you know instead of just trying

150
00:05:37,139 --> 00:05:38,759
to pop alert there's so many other

151
00:05:38,759 --> 00:05:40,440
things that you can do with JavaScript

152
00:05:40,440 --> 00:05:44,479
exploits in in the web

153
00:05:44,580 --> 00:05:47,160
so looking at the Target itself the

154
00:05:47,160 --> 00:05:48,840
target I was looking at was called Zoom

155
00:05:48,840 --> 00:05:50,880
whiteboard and this is a feature built

156
00:05:50,880 --> 00:05:52,800
in all the most of the zoom clients from

157
00:05:52,800 --> 00:05:55,440
web to desktop to mobile right and it

158
00:05:55,440 --> 00:05:58,380
functions kind of like a canvas a shared

159
00:05:58,380 --> 00:06:00,360
canvas where you can collaborate you can

160
00:06:00,360 --> 00:06:02,820
you know work on sticky notes you can

161
00:06:02,820 --> 00:06:04,740
add comments you can add diagrams you

162
00:06:04,740 --> 00:06:08,940
can add text boxes so think of it as

163
00:06:08,940 --> 00:06:11,160
yeah like a like a digital whiteboard

164
00:06:11,160 --> 00:06:12,600
right that you can work on during a

165
00:06:12,600 --> 00:06:15,620
meeting to discuss ideas

166
00:06:16,139 --> 00:06:18,539
and the interesting thing was that the

167
00:06:18,539 --> 00:06:19,979
zoom white boy

168
00:06:19,979 --> 00:06:21,600
um actually had the same implementation

169
00:06:21,600 --> 00:06:23,520
on both the web and desktop clients

170
00:06:23,520 --> 00:06:26,580
which is that it used react native and I

171
00:06:26,580 --> 00:06:28,919
think about react native is that because

172
00:06:28,919 --> 00:06:31,020
it's available on the web you're able to

173
00:06:31,020 --> 00:06:33,720
pull the source code very easily and

174
00:06:33,720 --> 00:06:34,800
that helps you give a better

175
00:06:34,800 --> 00:06:36,180
understanding of what's working on the

176
00:06:36,180 --> 00:06:37,979
desktop client itself rather than trying

177
00:06:37,979 --> 00:06:39,240
to go through the whole hassle of

178
00:06:39,240 --> 00:06:42,840
reverse engineering and desktop client

179
00:06:42,840 --> 00:06:45,180
and so the thing about whiteboard was

180
00:06:45,180 --> 00:06:47,039
that on the web it actually included the

181
00:06:47,039 --> 00:06:49,080
source map file so typically on the web

182
00:06:49,080 --> 00:06:50,699
say for example if you load a resource

183
00:06:50,699 --> 00:06:52,740
it ends with DOT JS you can try

184
00:06:52,740 --> 00:06:54,300
adding.map right or it might

185
00:06:54,300 --> 00:06:56,699
automatically try to load that and what

186
00:06:56,699 --> 00:06:59,460
the source map does is that it allows a

187
00:06:59,460 --> 00:07:03,240
browser or you to unpack the pack

188
00:07:03,240 --> 00:07:05,400
JavaScript back into the original

189
00:07:05,400 --> 00:07:07,919
project folder with the original source

190
00:07:07,919 --> 00:07:09,300
code so rather than inviting with

191
00:07:09,300 --> 00:07:12,419
minified code or obfuscated code you

192
00:07:12,419 --> 00:07:14,759
just get the original source code and

193
00:07:14,759 --> 00:07:15,780
there are a lot of Articles out there

194
00:07:15,780 --> 00:07:17,520
about how you can convert a source map

195
00:07:17,520 --> 00:07:19,080
file back into the original JavaScript

196
00:07:19,080 --> 00:07:22,199
but I have a tool online on my GitHub

197
00:07:22,199 --> 00:07:24,840
called webpack Exploder it's just a fun

198
00:07:24,840 --> 00:07:26,759
interface for you to just upload the

199
00:07:26,759 --> 00:07:29,039
webpack with a source map and this will

200
00:07:29,039 --> 00:07:31,080
give you back the original zip file of

201
00:07:31,080 --> 00:07:31,919
the project

202
00:07:31,919 --> 00:07:33,780
so check it out I'll use that if you can

203
00:07:33,780 --> 00:07:35,400
but you can also run it as a command

204
00:07:35,400 --> 00:07:39,198
line tool if you look at the source code

205
00:07:39,300 --> 00:07:40,319
so

206
00:07:40,319 --> 00:07:43,380
I unpack The Source map and that gave me

207
00:07:43,380 --> 00:07:46,740
the project folder of Zoom whiteboard

208
00:07:46,740 --> 00:07:48,780
and if you look at the files and the

209
00:07:48,780 --> 00:07:50,580
folders available it can tell you a lot

210
00:07:50,580 --> 00:07:52,560
of things right so you can look at the

211
00:07:52,560 --> 00:07:55,440
TSX extension that just tells you that

212
00:07:55,440 --> 00:07:58,800
it's using typescript react right if you

213
00:07:58,800 --> 00:08:01,440
dig a bit more into say store folder

214
00:08:01,440 --> 00:08:03,860
that is actually a Redux

215
00:08:03,860 --> 00:08:07,380
store that is used with react you look

216
00:08:07,380 --> 00:08:08,759
at a produce folder then you understand

217
00:08:08,759 --> 00:08:10,560
that you know there's some protobuf

218
00:08:10,560 --> 00:08:12,360
going on that allows for communication

219
00:08:12,360 --> 00:08:14,280
between a client and the server so it's

220
00:08:14,280 --> 00:08:16,139
using put a buff in the background

221
00:08:16,139 --> 00:08:18,360
and just by looking through the source

222
00:08:18,360 --> 00:08:19,680
code skimming through it I could

223
00:08:19,680 --> 00:08:20,879
understand you know why it was the web

224
00:08:20,879 --> 00:08:23,160
socket being used what third-party

225
00:08:23,160 --> 00:08:24,900
dependencies are being used and this

226
00:08:24,900 --> 00:08:27,720
gives me a general idea of the structure

227
00:08:27,720 --> 00:08:32,300
and the architecture of Zoom whiteboard

228
00:08:32,458 --> 00:08:33,899
and so when I'm faced with a huge

229
00:08:33,899 --> 00:08:36,000
project folder like this I usually like

230
00:08:36,000 --> 00:08:37,740
to write code ql for quick wins right

231
00:08:37,740 --> 00:08:39,479
cochlear versus code scanning tool that

232
00:08:39,479 --> 00:08:41,899
allows you to do multi uh file analysis

233
00:08:41,899 --> 00:08:45,000
and usually it does have some built-in

234
00:08:45,000 --> 00:08:47,339
default flows such as catching

235
00:08:47,339 --> 00:08:48,899
cross-eyed scripting

236
00:08:48,899 --> 00:08:50,820
and the thing is that you know even

237
00:08:50,820 --> 00:08:52,440
though you might seem to catch these

238
00:08:52,440 --> 00:08:54,540
cross-site scripting vulnerabilities

239
00:08:54,540 --> 00:08:56,100
um you might get some false positives

240
00:08:56,100 --> 00:08:57,839
and this was the case here right even

241
00:08:57,839 --> 00:09:00,360
though I identified what might happen to

242
00:09:00,360 --> 00:09:01,680
cross-site scripting these were actually

243
00:09:01,680 --> 00:09:03,000
false positives

244
00:09:03,000 --> 00:09:06,480
but this was not a lost cause because

245
00:09:06,480 --> 00:09:09,899
um when you analyze these uh alerts to

246
00:09:09,899 --> 00:09:11,880
kokio you get a better understanding of

247
00:09:11,880 --> 00:09:13,740
the flow of user data where the user

248
00:09:13,740 --> 00:09:15,839
inputs come from and where the yeah

249
00:09:15,839 --> 00:09:17,940
where these inputs are being converted

250
00:09:17,940 --> 00:09:20,399
into output right and this gives me a

251
00:09:20,399 --> 00:09:22,620
broad overview of where are the typical

252
00:09:22,620 --> 00:09:24,540
event handlers happening whereas user

253
00:09:24,540 --> 00:09:27,720
input coming into Zoom whiteboard

254
00:09:27,720 --> 00:09:29,640
so this was a case here where I

255
00:09:29,640 --> 00:09:31,920
identified event listener for the paste

256
00:09:31,920 --> 00:09:34,440
event so basically when someone pastes

257
00:09:34,440 --> 00:09:36,240
into the event

258
00:09:36,240 --> 00:09:39,600
and um it was passed into something

259
00:09:39,600 --> 00:09:41,220
called prepare data a function called

260
00:09:41,220 --> 00:09:43,320
prepare data and this is where it got

261
00:09:43,320 --> 00:09:44,760
interesting because I saw that it was

262
00:09:44,760 --> 00:09:47,580
trying to get mime type text HTML data

263
00:09:47,580 --> 00:09:48,980
from your clipboard

264
00:09:48,980 --> 00:09:51,360
so I didn't quite understand you know

265
00:09:51,360 --> 00:09:52,680
how he was doing this how does it

266
00:09:52,680 --> 00:09:55,140
understand whether it's a HTML or text

267
00:09:55,140 --> 00:09:58,260
data and so I had to go on to the MDM

268
00:09:58,260 --> 00:10:00,120
webdocs which explained the data

269
00:10:00,120 --> 00:10:03,000
structures and usage so for example you

270
00:10:03,000 --> 00:10:04,440
can actually set the data in your

271
00:10:04,440 --> 00:10:06,300
clipboard using JavaScript and you can

272
00:10:06,300 --> 00:10:08,220
specify the format of that data so it

273
00:10:08,220 --> 00:10:10,080
could be text or plain text or HTML

274
00:10:10,080 --> 00:10:12,240
which was the case that we saw in the

275
00:10:12,240 --> 00:10:14,459
previous function

276
00:10:14,459 --> 00:10:16,860
and you you dive a little deeper into

277
00:10:16,860 --> 00:10:19,740
what can actually be in your clipboard

278
00:10:19,740 --> 00:10:21,000
um you see something really interesting

279
00:10:21,000 --> 00:10:22,920
so on the right column you can see uh

280
00:10:22,920 --> 00:10:25,019
the box that highlighted you can drag

281
00:10:25,019 --> 00:10:27,000
text you can have links you can HTML and

282
00:10:27,000 --> 00:10:30,720
XML dragging images nodes so this is for

283
00:10:30,720 --> 00:10:32,880
the drag and drop interface right but it

284
00:10:32,880 --> 00:10:35,940
really um adds something else to your

285
00:10:35,940 --> 00:10:37,260
analysis here because then you're

286
00:10:37,260 --> 00:10:39,540
thinking okay does this help me bypass

287
00:10:39,540 --> 00:10:41,700
certain restrictions in the code does

288
00:10:41,700 --> 00:10:43,860
this help me add certain payloads that

289
00:10:43,860 --> 00:10:46,560
the developer not have anticipated

290
00:10:46,560 --> 00:10:48,600
and you keep digging you see something

291
00:10:48,600 --> 00:10:50,519
interesting here right you can have a

292
00:10:50,519 --> 00:10:52,740
text plane data type mime type you can

293
00:10:52,740 --> 00:10:55,019
have images but then for Mozilla

294
00:10:55,019 --> 00:10:56,820
specifically it has an application X

295
00:10:56,820 --> 00:10:59,760
Mozilla file type for image located on

296
00:10:59,760 --> 00:11:03,060
the disk and I didn't dig further into

297
00:11:03,060 --> 00:11:04,440
this but this is a really interesting

298
00:11:04,440 --> 00:11:06,420
angle of research I think you know if

299
00:11:06,420 --> 00:11:08,060
you start looking at the specific

300
00:11:08,060 --> 00:11:11,880
proprietary data types for these web

301
00:11:11,880 --> 00:11:13,920
apis you can actually find a ton of

302
00:11:13,920 --> 00:11:15,200
interesting things

303
00:11:15,200 --> 00:11:18,540
so this was interesting to me but

304
00:11:18,540 --> 00:11:20,399
that was kind of at the extent of my

305
00:11:20,399 --> 00:11:22,200
analysis of the source

306
00:11:22,200 --> 00:11:24,360
because after analyzing The Source I

307
00:11:24,360 --> 00:11:26,220
wanted to then track the flow of the

308
00:11:26,220 --> 00:11:28,440
user data from the source to the sync

309
00:11:28,440 --> 00:11:31,320
right and so this brought me to the PACE

310
00:11:31,320 --> 00:11:33,480
wrapper function right so after you

311
00:11:33,480 --> 00:11:36,720
paste something it's going to read your

312
00:11:36,720 --> 00:11:39,420
clipboard data into a global variable

313
00:11:39,420 --> 00:11:42,660
using this dot read and then after it's

314
00:11:42,660 --> 00:11:45,899
been read it's this Global variable it's

315
00:11:45,899 --> 00:11:47,240
going to be used in the page dot

316
00:11:47,240 --> 00:11:49,500
page.paste function where it's basically

317
00:11:49,500 --> 00:11:53,579
added to your whiteboard as HTML so

318
00:11:53,579 --> 00:11:55,200
this is kind of a high level overview

319
00:11:55,200 --> 00:11:56,940
you really want to dig into okay so

320
00:11:56,940 --> 00:11:59,100
exactly what is happening how is my

321
00:11:59,100 --> 00:12:02,880
clipboard data being passed into a zoom

322
00:12:02,880 --> 00:12:04,380
whiteboard object and how's that

323
00:12:04,380 --> 00:12:07,140
whiteboard object being passed into HTML

324
00:12:07,140 --> 00:12:08,820
on the page itself

325
00:12:08,820 --> 00:12:10,500
so on the right here you see an example

326
00:12:10,500 --> 00:12:11,760
of

327
00:12:11,760 --> 00:12:15,600
um uh passing image from your clipboard

328
00:12:15,600 --> 00:12:18,060
data so you'll create an image and you

329
00:12:18,060 --> 00:12:19,680
see that it returns an object literal

330
00:12:19,680 --> 00:12:22,560
where it has the wire type WB object

331
00:12:22,560 --> 00:12:24,000
Type image

332
00:12:24,000 --> 00:12:26,160
so that's really interesting so for me

333
00:12:26,160 --> 00:12:29,100
how do I understand what's going on

334
00:12:29,100 --> 00:12:31,380
where it reads your clipboard data and

335
00:12:31,380 --> 00:12:32,519
then it understands that oh you're

336
00:12:32,519 --> 00:12:34,620
trying to paste an image or maybe you're

337
00:12:34,620 --> 00:12:36,000
trying to paste

338
00:12:36,000 --> 00:12:37,860
um say a diagram or maybe you're trying

339
00:12:37,860 --> 00:12:39,720
just trying to paste a rich text in

340
00:12:39,720 --> 00:12:41,519
which case it would just paste a text

341
00:12:41,519 --> 00:12:45,260
box on your whiteboard

342
00:12:45,660 --> 00:12:48,600
so this brought me to the getzdc copy

343
00:12:48,600 --> 00:12:51,360
objects function and we see that it then

344
00:12:51,360 --> 00:12:54,240
passes it just takes your text from your

345
00:12:54,240 --> 00:12:56,220
clipboard and then it passes it to get

346
00:12:56,220 --> 00:12:59,399
zdc copy objects from the HTML string

347
00:12:59,399 --> 00:13:02,040
and then this function itself is this

348
00:13:02,040 --> 00:13:03,779
massive well not really massive but you

349
00:13:03,779 --> 00:13:06,480
know fairly complex uh function that I'm

350
00:13:06,480 --> 00:13:07,980
not going to go to exactly here but I'm

351
00:13:07,980 --> 00:13:10,980
going to summarize it in this slide here

352
00:13:10,980 --> 00:13:13,139
and basically by following the flow of

353
00:13:13,139 --> 00:13:14,579
the JavaScript code and analyzing and

354
00:13:14,579 --> 00:13:16,139
finally understanding exactly what was

355
00:13:16,139 --> 00:13:18,420
going on uh this was what was going on

356
00:13:18,420 --> 00:13:20,579
right it first takes your clipboard data

357
00:13:20,579 --> 00:13:22,320
so it was at the end of the day it's

358
00:13:22,320 --> 00:13:24,720
still text right but it passes it as

359
00:13:24,720 --> 00:13:27,660
HTML so it expects some kind of HTML

360
00:13:27,660 --> 00:13:29,700
string in your clipboard

361
00:13:29,700 --> 00:13:33,480
and once it has passed your HTML string

362
00:13:33,480 --> 00:13:38,040
into an actual document virtual document

363
00:13:38,040 --> 00:13:39,600
it's going to look for the first span

364
00:13:39,600 --> 00:13:42,120
element in your HTML and extract the

365
00:13:42,120 --> 00:13:44,519
value of the data meta attribute from

366
00:13:44,519 --> 00:13:46,320
that span element

367
00:13:46,320 --> 00:13:49,440
and within the data at meta attribute

368
00:13:49,440 --> 00:13:52,200
it's going to look for a specific regex

369
00:13:52,200 --> 00:13:54,600
so it looks like this is zdc data and it

370
00:13:54,600 --> 00:13:55,920
kind of like looks like a comment but

371
00:13:55,920 --> 00:13:58,320
it's not really a comment it's just a

372
00:13:58,320 --> 00:14:00,120
custom proprietary string that Zoom uses

373
00:14:00,120 --> 00:14:01,860
to identify this

374
00:14:01,860 --> 00:14:04,860
it's going to be 64 decode the inner

375
00:14:04,860 --> 00:14:06,839
match of this regex and it's going to

376
00:14:06,839 --> 00:14:09,300
URI decode the basics default decoded

377
00:14:09,300 --> 00:14:10,560
data

378
00:14:10,560 --> 00:14:12,959
so this might be a bit hard to visualize

379
00:14:12,959 --> 00:14:15,959
so here's a slide that look explains it

380
00:14:15,959 --> 00:14:18,660
right on the left is what is on your

381
00:14:18,660 --> 00:14:21,480
clipboard at the time of the pasting

382
00:14:21,480 --> 00:14:23,459
and on the right is what Zoom whiteboard

383
00:14:23,459 --> 00:14:25,139
passes it into

384
00:14:25,139 --> 00:14:28,019
and as you can see it basically passes

385
00:14:28,019 --> 00:14:30,000
that into

386
00:14:30,000 --> 00:14:33,480
um various like a custom object that

387
00:14:33,480 --> 00:14:36,360
might match uh something that is being

388
00:14:36,360 --> 00:14:38,760
pasted into Zoom whiteboard itself so

389
00:14:38,760 --> 00:14:41,220
this object that this output uh will

390
00:14:41,220 --> 00:14:44,699
then be converted into a HTML or a react

391
00:14:44,699 --> 00:14:47,940
component that's added to your page and

392
00:14:47,940 --> 00:14:49,620
we're going to more detail about how

393
00:14:49,620 --> 00:14:52,339
that happens later

394
00:14:52,380 --> 00:14:54,540
but now that I've understand you know

395
00:14:54,540 --> 00:14:56,820
from source to kind of halfway to the

396
00:14:56,820 --> 00:14:58,620
sync what's happening

397
00:14:58,620 --> 00:15:00,720
I now needed to find a vulnerable sync

398
00:15:00,720 --> 00:15:03,420
right so as I shared earlier there are

399
00:15:03,420 --> 00:15:05,279
various types that you can add to your

400
00:15:05,279 --> 00:15:06,959
whiteboard you can add like a shape you

401
00:15:06,959 --> 00:15:08,940
can add a line you can add a text a rich

402
00:15:08,940 --> 00:15:11,160
text you can add maybe a sticky note

403
00:15:11,160 --> 00:15:12,779
image or comment

404
00:15:12,779 --> 00:15:15,420
and while using Zoom whiteboard I

405
00:15:15,420 --> 00:15:17,699
noticed an interesting Behavior where

406
00:15:17,699 --> 00:15:22,380
entering say B the bow HTML tag on

407
00:15:22,380 --> 00:15:23,880
comments and sticky notes and Rich Text

408
00:15:23,880 --> 00:15:26,399
created bow tags after saving the

409
00:15:26,399 --> 00:15:27,480
document

410
00:15:27,480 --> 00:15:30,600
but accesses payloads like script or any

411
00:15:30,600 --> 00:15:34,079
other kind of value didn't work right so

412
00:15:34,079 --> 00:15:36,959
this was interesting there was some kind

413
00:15:36,959 --> 00:15:39,540
of sanitization going on

414
00:15:39,540 --> 00:15:42,240
and after analyzing the code further I

415
00:15:42,240 --> 00:15:44,699
realized that for specific whiteboard

416
00:15:44,699 --> 00:15:46,620
objects such as the sticky note or the

417
00:15:46,620 --> 00:15:48,860
comment or the rich text these were

418
00:15:48,860 --> 00:15:51,959
editable texts and what Zoom I bought

419
00:15:51,959 --> 00:15:53,519
was using was that it was using the

420
00:15:53,519 --> 00:15:56,360
react content editable package

421
00:15:56,360 --> 00:16:01,260
and before it passes the value of that

422
00:16:01,260 --> 00:16:03,420
the sticky note or the comment to

423
00:16:03,420 --> 00:16:05,699
content editable to the HTML parameter

424
00:16:05,699 --> 00:16:07,800
it actually runs the sanitize HTML

425
00:16:07,800 --> 00:16:09,180
function on it

426
00:16:09,180 --> 00:16:12,180
and why was this important well this is

427
00:16:12,180 --> 00:16:13,920
because the content editable package

428
00:16:13,920 --> 00:16:16,260
simply sets the HTML property using

429
00:16:16,260 --> 00:16:19,940
dangerously set inner HTML so if you

430
00:16:19,940 --> 00:16:22,800
have any kind of HTML value or string in

431
00:16:22,800 --> 00:16:24,180
there it's just going to paste it as is

432
00:16:24,180 --> 00:16:26,100
which is why Zoom whiteboard needed to

433
00:16:26,100 --> 00:16:28,980
sanitize it ahead of time

434
00:16:28,980 --> 00:16:32,160
so looking at sensitized HTML I found

435
00:16:32,160 --> 00:16:34,139
out that it was using Dom purify which

436
00:16:34,139 --> 00:16:36,720
is with pretty sane settings

437
00:16:36,720 --> 00:16:39,060
configurations so that wasn't really a

438
00:16:39,060 --> 00:16:41,160
way to bypass that unless you know I

439
00:16:41,160 --> 00:16:42,720
really wanted to fuzz it and find a

440
00:16:42,720 --> 00:16:46,040
bypass for don't purify

441
00:16:46,079 --> 00:16:48,480
but after checking all the

442
00:16:48,480 --> 00:16:50,880
implementations of content editable I

443
00:16:50,880 --> 00:16:53,519
realized that sticky notes use content

444
00:16:53,519 --> 00:16:55,500
editable but it didn't use the sanitized

445
00:16:55,500 --> 00:16:57,180
HTML function instead it used a

446
00:16:57,180 --> 00:16:58,740
different function called convert to

447
00:16:58,740 --> 00:17:02,160
text right and on the right you see kind

448
00:17:02,160 --> 00:17:04,280
of the function convert to text

449
00:17:04,280 --> 00:17:07,020
so if you look at a full function of

450
00:17:07,020 --> 00:17:08,220
converted text

451
00:17:08,220 --> 00:17:10,859
you might spot a mistake right so just

452
00:17:10,859 --> 00:17:12,660
to go through what it does it basically

453
00:17:12,660 --> 00:17:14,880
looks for different values using a regex

454
00:17:14,880 --> 00:17:17,819
in your string and then it replaces for

455
00:17:17,819 --> 00:17:20,459
example BR or a division or a paragraph

456
00:17:20,459 --> 00:17:22,319
with a new line which is kind of

457
00:17:22,319 --> 00:17:25,079
visually that looks the same as what the

458
00:17:25,079 --> 00:17:27,179
HTML tag would have done but for any

459
00:17:27,179 --> 00:17:29,280
other HTML tag between two angle

460
00:17:29,280 --> 00:17:31,200
brackets it's just gonna remove them

461
00:17:31,200 --> 00:17:34,679
entirely so even if you have say a

462
00:17:34,679 --> 00:17:36,900
division tag with some kind of attribute

463
00:17:36,900 --> 00:17:39,320
allows you to execute access

464
00:17:39,320 --> 00:17:42,600
since it doesn't match that division

465
00:17:42,600 --> 00:17:44,700
regex is going to match the final regex

466
00:17:44,700 --> 00:17:46,260
then it's going to be replaced and

467
00:17:46,260 --> 00:17:48,480
removed and sanitized so it looks like a

468
00:17:48,480 --> 00:17:50,179
pretty bulletproof

469
00:17:50,179 --> 00:17:53,760
vergex but there is a mistake here and

470
00:17:53,760 --> 00:17:55,500
so let's see if you can spot the mistake

471
00:17:55,500 --> 00:17:56,520
I'm going to give you a couple seconds

472
00:17:56,520 --> 00:17:58,559
to think about it maybe you can put it

473
00:17:58,559 --> 00:18:01,220
in the chat

474
00:18:11,100 --> 00:18:12,720
right so hopefully some of you have

475
00:18:12,720 --> 00:18:14,520
spotted a mistake

476
00:18:14,520 --> 00:18:16,140
um the regex was actually missing the

477
00:18:16,140 --> 00:18:18,240
multi-line flag and so what do I mean by

478
00:18:18,240 --> 00:18:19,799
that if you look at the regex at the end

479
00:18:19,799 --> 00:18:21,960
of it as the slash it adds stuff like

480
00:18:21,960 --> 00:18:25,500
gei so G is the global flag right so it

481
00:18:25,500 --> 00:18:27,480
basically replaces doesn't just replace

482
00:18:27,480 --> 00:18:29,760
one instance if it finds it in in the

483
00:18:29,760 --> 00:18:31,460
string but it replaces all instances

484
00:18:31,460 --> 00:18:34,200
right but

485
00:18:34,200 --> 00:18:36,480
is missing the m flag and what does the

486
00:18:36,480 --> 00:18:38,940
m flag do the m flag actually allows the

487
00:18:38,940 --> 00:18:42,179
regex to run across new lines

488
00:18:42,179 --> 00:18:42,780
um

489
00:18:42,780 --> 00:18:46,919
and so if you think about it then the

490
00:18:46,919 --> 00:18:48,660
following string here where we have the

491
00:18:48,660 --> 00:18:51,059
new line character in the string

492
00:18:51,059 --> 00:18:53,460
it's going to be the directions can't

493
00:18:53,460 --> 00:18:56,340
work across these new lines right so

494
00:18:56,340 --> 00:18:59,600
this allows you to inject xss payload

495
00:18:59,600 --> 00:19:02,400
that isn't sanitized right so this this

496
00:19:02,400 --> 00:19:03,780
entire

497
00:19:03,780 --> 00:19:05,520
string here it's just not going to be

498
00:19:05,520 --> 00:19:08,100
sanitized it's actually just going to be

499
00:19:08,100 --> 00:19:09,840
accepted as is with the new line and all

500
00:19:09,840 --> 00:19:12,059
but the new line is still valid HTML

501
00:19:12,059 --> 00:19:13,740
which allows you to inject your xss

502
00:19:13,740 --> 00:19:16,140
payload

503
00:19:16,140 --> 00:19:18,419
so with that I wrote a POC to generate

504
00:19:18,419 --> 00:19:19,980
the payload and add it to the user's

505
00:19:19,980 --> 00:19:22,679
clipboard and

506
00:19:22,679 --> 00:19:26,039
and so at this point you realize that

507
00:19:26,039 --> 00:19:28,380
it's not really the pasting action that

508
00:19:28,380 --> 00:19:30,840
creates the xss is the fact that this

509
00:19:30,840 --> 00:19:33,660
document is saved and when it displays

510
00:19:33,660 --> 00:19:37,140
the the saved value that you have pasted

511
00:19:37,140 --> 00:19:39,780
into the document it doesn't actually

512
00:19:39,780 --> 00:19:41,280
sanitize it properly and that's when the

513
00:19:41,280 --> 00:19:43,799
access has pops so it's not just a self

514
00:19:43,799 --> 00:19:45,960
xss but it's an exercise that is stored

515
00:19:45,960 --> 00:19:49,380
and it affects all users that view this

516
00:19:49,380 --> 00:19:51,059
whiteboard and this is interesting

517
00:19:51,059 --> 00:19:53,220
because for a whiteboard you can

518
00:19:53,220 --> 00:19:54,480
sometimes make it public you can share

519
00:19:54,480 --> 00:19:56,340
with certain users and that makes it

520
00:19:56,340 --> 00:19:58,020
more publicly accessible it's not just

521
00:19:58,020 --> 00:20:01,440
restricted to a certain set of users

522
00:20:01,440 --> 00:20:03,840
um and so the POC itself I didn't put

523
00:20:03,840 --> 00:20:05,820
the full POC here because that would be

524
00:20:05,820 --> 00:20:07,980
way too long but essentially to speed

525
00:20:07,980 --> 00:20:09,660
things up rather than setting it as a

526
00:20:09,660 --> 00:20:11,400
Proto buff from the client to the server

527
00:20:11,400 --> 00:20:14,760
to save it as a stored xss I just use

528
00:20:14,760 --> 00:20:17,940
the same kind of client logic to add the

529
00:20:17,940 --> 00:20:19,980
HTML payload to my clipboard and then I

530
00:20:19,980 --> 00:20:22,740
would just paste it into the document

531
00:20:22,740 --> 00:20:24,900
and that will create a start xss rather

532
00:20:24,900 --> 00:20:26,340
than trying to recreate that whole very

533
00:20:26,340 --> 00:20:29,780
complex chain of um put a buff

534
00:20:29,780 --> 00:20:34,260
communication that you you saw earlier

535
00:20:34,260 --> 00:20:36,960
and so for those who regularly maybe

536
00:20:36,960 --> 00:20:38,820
hunt on Zoom you might understand that

537
00:20:38,820 --> 00:20:41,220
Zoom has really strongly CSP by default

538
00:20:41,220 --> 00:20:43,080
but that actually varies depending on

539
00:20:43,080 --> 00:20:45,539
which tenant you're using

540
00:20:45,539 --> 00:20:47,520
um or which client they're using so from

541
00:20:47,520 --> 00:20:49,200
web to mobile to desktop they all use

542
00:20:49,200 --> 00:20:52,020
actually slightly different engines that

543
00:20:52,020 --> 00:20:54,299
might lead to different vulnerabilities

544
00:20:54,299 --> 00:20:56,820
so at least with the csps there's some

545
00:20:56,820 --> 00:20:59,940
ways to bypass it or not but even then

546
00:20:59,940 --> 00:21:02,340
you can also exploit by jumping from the

547
00:21:02,340 --> 00:21:06,299
JavaScript to maybe a Sandbox Escape if

548
00:21:06,299 --> 00:21:08,820
you're using an outdated inbuilt browser

549
00:21:08,820 --> 00:21:11,220
right so these all gives you

550
00:21:11,220 --> 00:21:15,120
opportunities to create a store xss over

551
00:21:15,120 --> 00:21:17,700
zoom over Zoom call which is really

552
00:21:17,700 --> 00:21:20,120
interesting

553
00:21:21,120 --> 00:21:24,179
so as I mentioned earlier like I hope

554
00:21:24,179 --> 00:21:26,220
that you got those three take takeaways

555
00:21:26,220 --> 00:21:28,140
from this talk but it also had some

556
00:21:28,140 --> 00:21:30,539
final thoughts about finding this bug

557
00:21:30,539 --> 00:21:32,760
the first is that web apis present an

558
00:21:32,760 --> 00:21:34,740
ever-growing attack surface they are

559
00:21:34,740 --> 00:21:36,120
constantly being updated their new

560
00:21:36,120 --> 00:21:38,700
features always being added to browsers

561
00:21:38,700 --> 00:21:40,559
um and you know back in the day when

562
00:21:40,559 --> 00:21:41,820
your Internet Explorer with very

563
00:21:41,820 --> 00:21:43,200
proprietary features that was a

564
00:21:43,200 --> 00:21:46,500
fantastic attack surface nowadays we do

565
00:21:46,500 --> 00:21:49,440
see more standards but we also see some

566
00:21:49,440 --> 00:21:51,179
proprietary work still being done and

567
00:21:51,179 --> 00:21:52,799
that also prevents a very interesting

568
00:21:52,799 --> 00:21:54,900
attack surface because if the

569
00:21:54,900 --> 00:21:56,400
implementation is unique to only one

570
00:21:56,400 --> 00:21:58,440
browser there's a higher chance that it

571
00:21:58,440 --> 00:21:59,760
might not have been tested as thoroughly

572
00:21:59,760 --> 00:22:01,919
as say something that's implemented

573
00:22:01,919 --> 00:22:03,659
across all browsers

574
00:22:03,659 --> 00:22:05,100
so that's something I should keep an eye

575
00:22:05,100 --> 00:22:06,780
on especially if you're looking at

576
00:22:06,780 --> 00:22:10,280
exercise bypasses or simply looking to

577
00:22:10,280 --> 00:22:13,620
you know find a new exploit

578
00:22:13,620 --> 00:22:15,600
the second is that code scanners can

579
00:22:15,600 --> 00:22:18,059
miss vulnerabilities very easily so as I

580
00:22:18,059 --> 00:22:20,280
mentioned earlier the coql scan didn't

581
00:22:20,280 --> 00:22:22,260
actually pick up this vulnerability and

582
00:22:22,260 --> 00:22:24,120
the big reason is because it flow

583
00:22:24,120 --> 00:22:26,460
through the react content editable

584
00:22:26,460 --> 00:22:28,140
package right and so that's a

585
00:22:28,140 --> 00:22:29,640
third-party dependency that wasn't

586
00:22:29,640 --> 00:22:31,620
installed in the source code that I was

587
00:22:31,620 --> 00:22:33,960
scanning if I had installed a source

588
00:22:33,960 --> 00:22:35,340
code then maybe it might have picked it

589
00:22:35,340 --> 00:22:36,780
up

590
00:22:36,780 --> 00:22:39,120
but for most developers when they run

591
00:22:39,120 --> 00:22:41,520
code scanners in their CI workflow or

592
00:22:41,520 --> 00:22:43,860
maybe even their IDE they might not

593
00:22:43,860 --> 00:22:45,720
actually have

594
00:22:45,720 --> 00:22:47,400
um the third party dependencies

595
00:22:47,400 --> 00:22:50,039
available or accessible in the source

596
00:22:50,039 --> 00:22:52,140
code and that allows you to miss certain

597
00:22:52,140 --> 00:22:55,020
things so as a pen tester actually it

598
00:22:55,020 --> 00:22:56,520
might make more sense for you to just

599
00:22:56,520 --> 00:22:58,200
install the third party dimensions in

600
00:22:58,200 --> 00:22:59,820
the project folder so that the code

601
00:22:59,820 --> 00:23:01,799
scanners are able to pick them up and

602
00:23:01,799 --> 00:23:03,299
basically run through the entire flow

603
00:23:03,299 --> 00:23:06,059
and understand if there's been a vanity

604
00:23:06,059 --> 00:23:08,100
that occurred to the misuse of a

605
00:23:08,100 --> 00:23:09,600
third-party dependency

606
00:23:09,600 --> 00:23:12,240
and this also gives something for

607
00:23:12,240 --> 00:23:13,860
developers to think about about how they

608
00:23:13,860 --> 00:23:16,140
can improve the

609
00:23:16,140 --> 00:23:18,539
where they place the code scanning job

610
00:23:18,539 --> 00:23:21,240
in their CI workflow

611
00:23:21,240 --> 00:23:23,220
and the third is just you know regex is

612
00:23:23,220 --> 00:23:25,020
so easy to get wrong

613
00:23:25,020 --> 00:23:28,100
um they are confusing they are complex

614
00:23:28,100 --> 00:23:30,780
and if you miss a single flag like that

615
00:23:30,780 --> 00:23:34,080
then your entire sanitization is

616
00:23:34,080 --> 00:23:38,100
bypassed right so no oh yes if you are a

617
00:23:38,100 --> 00:23:39,919
pen tester or you're looking for bugs

618
00:23:39,919 --> 00:23:41,880
regex's are always I think an

619
00:23:41,880 --> 00:23:43,559
interesting place to look especially if

620
00:23:43,559 --> 00:23:45,059
they're being used as a sanitization

621
00:23:45,059 --> 00:23:47,880
tool so as a pet tester you have to get

622
00:23:47,880 --> 00:23:49,980
really good with your reg access to

623
00:23:49,980 --> 00:23:52,559
understand exactly you know how might a

624
00:23:52,559 --> 00:23:55,559
certain flag behave or a certain special

625
00:23:55,559 --> 00:23:58,559
character behave in a regex and this

626
00:23:58,559 --> 00:24:00,299
will give you a lot more understanding

627
00:24:00,299 --> 00:24:02,460
of exactly how you can exploit something

628
00:24:02,460 --> 00:24:05,940
if you look at my blog I do have a blog

629
00:24:05,940 --> 00:24:10,320
post about exploiting the Amazon AWS

630
00:24:10,320 --> 00:24:13,140
simple notification service and that was

631
00:24:13,140 --> 00:24:15,659
also through regex so check it out and

632
00:24:15,659 --> 00:24:17,100
you might also learn a bit more about

633
00:24:17,100 --> 00:24:19,260
how I can exploit a regex to bypass

634
00:24:19,260 --> 00:24:22,020
certain checks

635
00:24:22,020 --> 00:24:23,940
so I hope that you've got taken away

636
00:24:23,940 --> 00:24:25,919
something useful from this talk it's a

637
00:24:25,919 --> 00:24:27,720
very kind of straightforward discussion

638
00:24:27,720 --> 00:24:29,820
of a bug that I found in Zoom but it

639
00:24:29,820 --> 00:24:32,760
also kind of brought out I think pretty

640
00:24:32,760 --> 00:24:34,380
interesting learning points about how

641
00:24:34,380 --> 00:24:36,419
you can improve your bug hunting how as

642
00:24:36,419 --> 00:24:37,559
a researcher there might be interesting

643
00:24:37,559 --> 00:24:39,600
things for you to look at and of course

644
00:24:39,600 --> 00:24:42,240
more Hands-On bypasses to specific

645
00:24:42,240 --> 00:24:45,840
regexes or sanitization workflows if you

646
00:24:45,840 --> 00:24:48,000
enjoyed this talk and you want to learn

647
00:24:48,000 --> 00:24:50,520
more I do have a Twitter that's active

648
00:24:50,520 --> 00:24:52,320
as well as a Blog where I often share a

649
00:24:52,320 --> 00:24:55,020
new blog uh new blog posts or tips and

650
00:24:55,020 --> 00:24:57,000
tricks in cyber security as well as my

651
00:24:57,000 --> 00:24:58,799
own cyber security research so check

652
00:24:58,799 --> 00:25:01,260
that out and I look forward to your

653
00:25:01,260 --> 00:25:04,679
questions or Chats on Twitter thank you

654
00:25:04,679 --> 00:25:07,100
for listening

