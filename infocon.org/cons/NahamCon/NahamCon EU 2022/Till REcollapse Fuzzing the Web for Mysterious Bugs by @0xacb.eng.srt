1
00:00:00,000 --> 00:00:02,280
what's up everyone welcome to my talk

2
00:00:02,280 --> 00:00:04,440
today I'm gonna show you how to fuss the

3
00:00:04,440 --> 00:00:07,080
web for mysterious bugs first of all I

4
00:00:07,080 --> 00:00:09,059
wanted to thank Ben and Alden I'm con

5
00:00:09,059 --> 00:00:11,519
team for having me here today so I'm

6
00:00:11,519 --> 00:00:14,759
Andre AKA oxycb AKA master of mystery

7
00:00:14,759 --> 00:00:17,400
I'm a co-founder of fiac I'm a professor

8
00:00:17,400 --> 00:00:19,500
of ethical hacking in the University of

9
00:00:19,500 --> 00:00:22,020
Porto I'm a bug Mount Leander and a

10
00:00:22,020 --> 00:00:26,220
former captain of the xsdf CTF team so

11
00:00:26,220 --> 00:00:28,019
for today we are going to take a look at

12
00:00:28,019 --> 00:00:30,599
user input validation problems regex

13
00:00:30,599 --> 00:00:33,480
quirks and then I'm gonna show you how

14
00:00:33,480 --> 00:00:36,239
to files uh regular expressions in a

15
00:00:36,239 --> 00:00:38,640
black box manner to uncover simple

16
00:00:38,640 --> 00:00:41,760
mysterious bugs and finally I'm going to

17
00:00:41,760 --> 00:00:44,219
show you some real world examples of

18
00:00:44,219 --> 00:00:45,120
this

19
00:00:45,120 --> 00:00:47,460
so it all started like three years ago

20
00:00:47,460 --> 00:00:50,340
uh we had this endpoint that would

21
00:00:50,340 --> 00:00:55,079
redirect to uh uh validated URL uh that

22
00:00:55,079 --> 00:00:57,360
needed to be part of a subdomain of

23
00:00:57,360 --> 00:01:00,420
example.com and we wanted to redirect to

24
00:01:00,420 --> 00:01:03,840
an attacker uh based domain uh evil.com

25
00:01:03,840 --> 00:01:07,200
in this case and uh we if we managed to

26
00:01:07,200 --> 00:01:10,260
do it we'll be able to exfiltrate also

27
00:01:10,260 --> 00:01:12,060
another parameter which would be a

28
00:01:12,060 --> 00:01:14,460
secret token from a user and then we

29
00:01:14,460 --> 00:01:16,860
could perform account takeover the

30
00:01:16,860 --> 00:01:18,540
problem is that the the regular

31
00:01:18,540 --> 00:01:20,460
expression in the back end was pretty

32
00:01:20,460 --> 00:01:23,700
locked down and we couldn't exploit it

33
00:01:23,700 --> 00:01:25,560
or could we

34
00:01:25,560 --> 00:01:29,700
so it all starts with user input so most

35
00:01:29,700 --> 00:01:32,220
modern web applications or apis and

36
00:01:32,220 --> 00:01:34,680
other types of applications rely on user

37
00:01:34,680 --> 00:01:37,140
input valuation and this is usually

38
00:01:37,140 --> 00:01:40,860
carried by regular expressions in this

39
00:01:40,860 --> 00:01:43,380
example we have a regular expression for

40
00:01:43,380 --> 00:01:46,079
email addresses and as you can see it

41
00:01:46,079 --> 00:01:48,479
will not match aa.com but it will match

42
00:01:48,479 --> 00:01:51,020
a ata.com

43
00:01:51,020 --> 00:01:54,000
so and then we also have sanitization

44
00:01:54,000 --> 00:01:55,740
which is basically responsible for

45
00:01:55,740 --> 00:01:58,619
escaping the user input so we can

46
00:01:58,619 --> 00:02:00,720
prevent a cross-site scripting and

47
00:02:00,720 --> 00:02:03,720
template injections and so on and we

48
00:02:03,720 --> 00:02:05,340
also have normalization which is

49
00:02:05,340 --> 00:02:07,320
basically responsible for making the

50
00:02:07,320 --> 00:02:09,959
user input consistent and avoiding

51
00:02:09,959 --> 00:02:12,720
duplicate data in most cases for example

52
00:02:12,720 --> 00:02:14,879
avoiding duplicate email addresses and

53
00:02:14,879 --> 00:02:17,040
so on and we also have different

54
00:02:17,040 --> 00:02:19,260
behaviors in different programming

55
00:02:19,260 --> 00:02:21,180
languages and libraries as you can see

56
00:02:21,180 --> 00:02:24,480
here for the same input

57
00:02:24,480 --> 00:02:26,879
uh so there are problems with validation

58
00:02:26,879 --> 00:02:29,160
uh regular expressions are widely used

59
00:02:29,160 --> 00:02:31,739
to validate the parameters as I told you

60
00:02:31,739 --> 00:02:35,340
and the developers uh are not testing

61
00:02:35,340 --> 00:02:37,800
those uh well enough uh they copy paste

62
00:02:37,800 --> 00:02:39,840
them and they don't really know uh

63
00:02:39,840 --> 00:02:42,060
regular Expressions uh they copy those

64
00:02:42,060 --> 00:02:44,879
from stack Overflow GitHub and other

65
00:02:44,879 --> 00:02:48,720
sources rfcs and so on and sometimes

66
00:02:48,720 --> 00:02:51,540
testing code exists but it's specific to

67
00:02:51,540 --> 00:02:54,420
a subset of the possible cases in terms

68
00:02:54,420 --> 00:02:57,540
of user input for instance the previous

69
00:02:57,540 --> 00:03:00,840
regular expression will accept special

70
00:03:00,840 --> 00:03:03,480
characters in the email address and that

71
00:03:03,480 --> 00:03:05,700
can lead to problems later on the

72
00:03:05,700 --> 00:03:07,980
application depending on how the email

73
00:03:07,980 --> 00:03:09,959
is processed

74
00:03:09,959 --> 00:03:13,200
and another uh recent example is GitHub

75
00:03:13,200 --> 00:03:16,260
co-pilot uh this is a function generated

76
00:03:16,260 --> 00:03:19,099
automatically by Gita co-pilot in Python

77
00:03:19,099 --> 00:03:22,440
and it's vulnerable of course uh because

78
00:03:22,440 --> 00:03:26,519
uh the URL is provided by the user and

79
00:03:26,519 --> 00:03:28,980
the domain is provided by the the

80
00:03:28,980 --> 00:03:32,040
developer for example and we have two

81
00:03:32,040 --> 00:03:34,980
possible bypasses here so the domain is

82
00:03:34,980 --> 00:03:37,319
basically formatted into the regular

83
00:03:37,319 --> 00:03:40,319
expression as example.com and the dot

84
00:03:40,319 --> 00:03:42,720
will not be the actual dot character it

85
00:03:42,720 --> 00:03:45,900
will rather match any character on on

86
00:03:45,900 --> 00:03:48,860
this position between uh basically an

87
00:03:48,860 --> 00:03:52,680
example.com the dot will let other

88
00:03:52,680 --> 00:03:55,379
characters uh go through as you can see

89
00:03:55,379 --> 00:03:58,260
in the first two examples and even if

90
00:03:58,260 --> 00:04:01,440
the dot was escaped we could also bypass

91
00:04:01,440 --> 00:04:04,019
it uh enter in the open redirect

92
00:04:04,019 --> 00:04:07,560
scenario or ssrf scenario by putting a

93
00:04:07,560 --> 00:04:09,540
Nash symbol or a question mark so all

94
00:04:09,540 --> 00:04:14,159
those you URL inputs will go through so

95
00:04:14,159 --> 00:04:17,579
basically we have the dollar sign as

96
00:04:17,579 --> 00:04:19,680
well in regular expression and in my

97
00:04:19,680 --> 00:04:22,380
research I was able to find something

98
00:04:22,380 --> 00:04:25,080
interesting so the common description of

99
00:04:25,080 --> 00:04:27,300
the dollar sign asserts a position at

100
00:04:27,300 --> 00:04:29,639
the end of the stream if it's not

101
00:04:29,639 --> 00:04:32,220
present we can basically provide an

102
00:04:32,220 --> 00:04:35,759
input and insert an arbitrary number of

103
00:04:35,759 --> 00:04:38,160
bytes after the end of the regular

104
00:04:38,160 --> 00:04:40,320
expression so it needs to be used to

105
00:04:40,320 --> 00:04:43,139
assert the end of the the string but the

106
00:04:43,139 --> 00:04:44,900
common description of the dollar sign

107
00:04:44,900 --> 00:04:48,300
also says that it also asserts a

108
00:04:48,300 --> 00:04:49,860
position at the end of the string or

109
00:04:49,860 --> 00:04:52,139
before the line Terminator right at the

110
00:04:52,139 --> 00:04:55,440
end of the string so basically it should

111
00:04:55,440 --> 00:04:57,900
mean that we can have a new line

112
00:04:57,900 --> 00:05:00,060
character right at the end of the string

113
00:05:00,060 --> 00:05:02,820
and it will still match so let's take a

114
00:05:02,820 --> 00:05:05,759
look on how the quarter libraries of uh

115
00:05:05,759 --> 00:05:07,740
well-known programming languages deal

116
00:05:07,740 --> 00:05:10,860
with this description uh so JavaScript

117
00:05:10,860 --> 00:05:14,520
has this Behavior so it will match only

118
00:05:14,520 --> 00:05:18,720
the first input you see here with 3x and

119
00:05:18,720 --> 00:05:20,460
it will not match with the new line or

120
00:05:20,460 --> 00:05:23,039
with the new line and digits after that

121
00:05:23,039 --> 00:05:24,419
for example

122
00:05:24,419 --> 00:05:28,139
and python will accept Three A's and a

123
00:05:28,139 --> 00:05:30,960
new line at the end which is rejected by

124
00:05:30,960 --> 00:05:34,380
JavaScript and Ruby it's even more

125
00:05:34,380 --> 00:05:37,199
interesting because it will match uh

126
00:05:37,199 --> 00:05:39,600
anything like it doesn't care what is

127
00:05:39,600 --> 00:05:41,580
after the new line for example it will

128
00:05:41,580 --> 00:05:44,160
still match the original input and one

129
00:05:44,160 --> 00:05:46,139
of the problems here is that the

130
00:05:46,139 --> 00:05:50,280
developers code Vista validations

131
00:05:50,280 --> 00:05:52,800
usually like this so we have these

132
00:05:52,800 --> 00:05:54,539
inputs we are going to match through a

133
00:05:54,539 --> 00:05:56,400
regular expression and then the original

134
00:05:56,400 --> 00:05:59,400
input will be processed and that's not a

135
00:05:59,400 --> 00:06:01,199
good way to do it and that could open

136
00:06:01,199 --> 00:06:04,139
the door to weird bugs because the

137
00:06:04,139 --> 00:06:05,940
developers should be extracting the

138
00:06:05,940 --> 00:06:09,419
match data you see here and then pass it

139
00:06:09,419 --> 00:06:12,560
on or through the rest of the the code

140
00:06:12,560 --> 00:06:16,199
and so to sum it up you can as you can

141
00:06:16,199 --> 00:06:18,660
see in this table we have JavaScript

142
00:06:18,660 --> 00:06:20,940
allowing only the first case and the

143
00:06:20,940 --> 00:06:23,580
Ruby allowing uh three of the four

144
00:06:23,580 --> 00:06:26,880
scenarios so let's take a look at the

145
00:06:26,880 --> 00:06:30,360
technique I call recollapse to fuzz and

146
00:06:30,360 --> 00:06:34,560
uncover these weird bugs so um it's all

147
00:06:34,560 --> 00:06:37,620
about probing the unknowns so the

148
00:06:37,620 --> 00:06:41,039
mindset here is about uh giving a lot of

149
00:06:41,039 --> 00:06:44,100
unexpected inputs into a black box so we

150
00:06:44,100 --> 00:06:45,479
don't have the code we don't know what

151
00:06:45,479 --> 00:06:48,060
regular expressions are being used in

152
00:06:48,060 --> 00:06:50,039
the backend in the front end will be

153
00:06:50,039 --> 00:06:52,259
able to access them of course but in

154
00:06:52,259 --> 00:06:55,380
terms of backend we have no access so we

155
00:06:55,380 --> 00:06:57,539
want to provide an expected inputs

156
00:06:57,539 --> 00:07:00,479
different inputs and take a look at the

157
00:07:00,479 --> 00:07:02,880
responses we get back weird Behavior

158
00:07:02,880 --> 00:07:06,060
sometimes we can try to understand what

159
00:07:06,060 --> 00:07:07,860
are the difference in terms of response

160
00:07:07,860 --> 00:07:10,740
codes what are the difference in terms

161
00:07:10,740 --> 00:07:15,180
of response times and lines and so on so

162
00:07:15,180 --> 00:07:18,180
if we do this multiple times the Black

163
00:07:18,180 --> 00:07:20,699
Box will start revealing information

164
00:07:20,699 --> 00:07:22,800
that we can use

165
00:07:22,800 --> 00:07:25,380
so the RICO apps technique is about

166
00:07:25,380 --> 00:07:29,460
identifying three key pivot positions so

167
00:07:29,460 --> 00:07:32,039
we are going to identify starting and

168
00:07:32,039 --> 00:07:34,080
termination position separated positions

169
00:07:34,080 --> 00:07:35,699
and normalization positions that I'm

170
00:07:35,699 --> 00:07:38,280
going to show you after this uh and then

171
00:07:38,280 --> 00:07:40,020
the idea is that we are going to first

172
00:07:40,020 --> 00:07:42,180
all these positions with all possible

173
00:07:42,180 --> 00:07:45,479
bytes and analyze the responses so in

174
00:07:45,479 --> 00:07:47,900
the first scenario we should

175
00:07:47,900 --> 00:07:50,400
identify the starting and termination

176
00:07:50,400 --> 00:07:53,520
positions and then we are going to try

177
00:07:53,520 --> 00:07:56,039
to understand if the rig X is basically

178
00:07:56,039 --> 00:07:58,500
asserts the the start of the string or

179
00:07:58,500 --> 00:08:01,380
the end of the string and then we are

180
00:08:01,380 --> 00:08:03,780
going to understand what are the

181
00:08:03,780 --> 00:08:05,819
separator positions and first them as

182
00:08:05,819 --> 00:08:09,360
well these usually works because those

183
00:08:09,360 --> 00:08:12,720
are key parts of regular Expressions

184
00:08:12,720 --> 00:08:17,580
that basically go to different groups of

185
00:08:17,580 --> 00:08:20,039
of matching uh different matches so

186
00:08:20,039 --> 00:08:22,319
basically the idea is to pick these

187
00:08:22,319 --> 00:08:24,960
positions around special characters

188
00:08:24,960 --> 00:08:27,960
usually and then we also have the

189
00:08:27,960 --> 00:08:31,020
normalization positions usually vowels

190
00:08:31,020 --> 00:08:34,799
work better in with most libraries but

191
00:08:34,799 --> 00:08:36,839
this doesn't mean that other characters

192
00:08:36,839 --> 00:08:40,200
could be normalized so and in fact a lot

193
00:08:40,200 --> 00:08:43,080
of characters can be normalized and I

194
00:08:43,080 --> 00:08:44,700
just launch as well a normalization

195
00:08:44,700 --> 00:08:47,640
table that you can look and apply with

196
00:08:47,640 --> 00:08:49,980
it and try to understand if your input

197
00:08:49,980 --> 00:08:53,040
is being normalized in your back Bounty

198
00:08:53,040 --> 00:08:55,980
scenarios so these positions are

199
00:08:55,980 --> 00:08:58,320
typically vowels to increase the success

200
00:08:58,320 --> 00:09:00,860
of it but we can pick other other

201
00:09:00,860 --> 00:09:04,860
characters so the idea is that okay we

202
00:09:04,860 --> 00:09:07,260
identified all these positions and now

203
00:09:07,260 --> 00:09:09,959
we are going to first all positions from

204
00:09:09,959 --> 00:09:14,880
0 to FF so we are going to try to and we

205
00:09:14,880 --> 00:09:17,339
are not going to fuzz all the positions

206
00:09:17,339 --> 00:09:19,740
at the same time that will basically

207
00:09:19,740 --> 00:09:22,800
explode the number of payloads that will

208
00:09:22,800 --> 00:09:24,779
need to to fuss with all the possible

209
00:09:24,779 --> 00:09:27,480
combinations we are going to do this one

210
00:09:27,480 --> 00:09:29,940
by one and that will reduce the the

211
00:09:29,940 --> 00:09:32,399
complexity of it

212
00:09:32,399 --> 00:09:34,680
so let's take a look at some examples

213
00:09:34,680 --> 00:09:36,779
according to the input we want to fast

214
00:09:36,779 --> 00:09:41,040
so we have URLs we have email addresses

215
00:09:41,040 --> 00:09:42,839
and usernames which are basically

216
00:09:42,839 --> 00:09:45,600
critical account identifiers and we

217
00:09:45,600 --> 00:09:47,459
usually have regular expressions for

218
00:09:47,459 --> 00:09:49,320
that because it's all about preventing

219
00:09:49,320 --> 00:09:52,260
the bad input in the first place but

220
00:09:52,260 --> 00:09:54,240
that doesn't necessarily mean that later

221
00:09:54,240 --> 00:09:57,540
on we can have uh vulnerabilities if

222
00:09:57,540 --> 00:10:00,120
inserting like special characters and so

223
00:10:00,120 --> 00:10:02,820
on was possible in the first place and

224
00:10:02,820 --> 00:10:05,100
also for HTML for example in terms of

225
00:10:05,100 --> 00:10:08,580
xss in terms of web application firewall

226
00:10:08,580 --> 00:10:11,640
bypasses we can also try to fuss with

227
00:10:11,640 --> 00:10:13,560
all the possible bytes in all these

228
00:10:13,560 --> 00:10:16,380
positions and try to understand what is

229
00:10:16,380 --> 00:10:19,019
not rejected and what goes through we

230
00:10:19,019 --> 00:10:20,820
can take a look at it and understand

231
00:10:20,820 --> 00:10:23,760
what would trigger for example an xss so

232
00:10:23,760 --> 00:10:25,620
it will always depend on the scenario

233
00:10:25,620 --> 00:10:27,839
that we are trying to exploit in the

234
00:10:27,839 --> 00:10:30,720
case of ssrf you would basically fuzz it

235
00:10:30,720 --> 00:10:33,300
and basically build listening for

236
00:10:33,300 --> 00:10:36,060
requests on your own server for example

237
00:10:36,060 --> 00:10:38,399
and try to understand what original

238
00:10:38,399 --> 00:10:42,540
input has led to to that request for

239
00:10:42,540 --> 00:10:43,860
example

240
00:10:43,860 --> 00:10:46,800
um so and to make all of these easier I

241
00:10:46,800 --> 00:10:48,839
launched the the RICO Labs tool so it's

242
00:10:48,839 --> 00:10:51,000
an apple helper tool capable of

243
00:10:51,000 --> 00:10:53,279
generating inputs according to this role

244
00:10:53,279 --> 00:10:55,680
so basically the tool won't actually

245
00:10:55,680 --> 00:10:59,100
fuzz the the endpoints it will rather

246
00:10:59,100 --> 00:11:01,500
just generate inputs according to these

247
00:11:01,500 --> 00:11:04,380
rules and you can basically use it to

248
00:11:04,380 --> 00:11:06,959
whip burp Intruder for example or other

249
00:11:06,959 --> 00:11:09,600
fuzzing tools we are we all use such as

250
00:11:09,600 --> 00:11:13,079
ffuf and others and so it's available on

251
00:11:13,079 --> 00:11:15,300
my GitHub so feel free to play with it

252
00:11:15,300 --> 00:11:17,940
and it supports multiple fuzzing sizes

253
00:11:17,940 --> 00:11:21,720
and encoding so basically let's say that

254
00:11:21,720 --> 00:11:24,540
we didn't get any result we can increase

255
00:11:24,540 --> 00:11:27,240
the size and fast like two bytes at the

256
00:11:27,240 --> 00:11:30,720
same time and that will lead to a small

257
00:11:30,720 --> 00:11:33,240
fuzzing process it's gonna take a while

258
00:11:33,240 --> 00:11:35,820
but sometimes it will result in very

259
00:11:35,820 --> 00:11:38,220
interesting scenarios that were

260
00:11:38,220 --> 00:11:40,860
supposedly impossible in terms of

261
00:11:40,860 --> 00:11:43,680
encodings you can also pick if you want

262
00:11:43,680 --> 00:11:46,320
to URL encode those bytes if you want to

263
00:11:46,320 --> 00:11:49,320
use them with json-based a body

264
00:11:49,320 --> 00:11:52,320
application Json bodies or URL encoden

265
00:11:52,320 --> 00:11:55,800
or in a raw format as well so let's take

266
00:11:55,800 --> 00:11:58,500
a look on how we can use the recollapse

267
00:11:58,500 --> 00:12:01,980
tool in a simulated scenario so this

268
00:12:01,980 --> 00:12:04,320
demo is based on a real scenario we have

269
00:12:04,320 --> 00:12:06,480
a login user that wants to log in to

270
00:12:06,480 --> 00:12:08,100
another application belonging to the

271
00:12:08,100 --> 00:12:10,920
same company with yes we take a look at

272
00:12:10,920 --> 00:12:14,040
the requests we send it to repeater and

273
00:12:14,040 --> 00:12:16,920
we try to play with it so it generates

274
00:12:16,920 --> 00:12:19,560
an authentication token for a URL

275
00:12:19,560 --> 00:12:22,440
parameter that we provide so our goal

276
00:12:22,440 --> 00:12:25,320
will be okay let's try evil.com it

277
00:12:25,320 --> 00:12:27,720
doesn't work let's try just example.com

278
00:12:27,720 --> 00:12:31,980
for example it works we can try HTTP as

279
00:12:31,980 --> 00:12:36,660
well uh it also works if we try.evil.com

280
00:12:36,660 --> 00:12:38,820
um it doesn't work we can try a net

281
00:12:38,820 --> 00:12:41,760
symbol as well like typical bypasses and

282
00:12:41,760 --> 00:12:44,220
those doesn't work so the idea about the

283
00:12:44,220 --> 00:12:46,620
RICO episode is automate this fuzzing as

284
00:12:46,620 --> 00:12:49,920
I told you and to find novel uh bypasses

285
00:12:49,920 --> 00:12:52,800
so let's try to use it and pass it like

286
00:12:52,800 --> 00:12:55,980
the the input an input that works and we

287
00:12:55,980 --> 00:12:57,540
want to fuzz it for example as a

288
00:12:57,540 --> 00:12:59,160
starting point it will generate

289
00:12:59,160 --> 00:13:01,139
something like this with all the

290
00:13:01,139 --> 00:13:02,940
possible byte combinations in multiple

291
00:13:02,940 --> 00:13:05,760
positions all right so we can also pass

292
00:13:05,760 --> 00:13:08,880
it as a word list to ffuf or other tools

293
00:13:08,880 --> 00:13:11,160
in this case we'll be excluding the 403

294
00:13:11,160 --> 00:13:14,279
Response Code and basically we'll get

295
00:13:14,279 --> 00:13:16,920
these results so the first one is not a

296
00:13:16,920 --> 00:13:19,139
good candidate because it's like a slash

297
00:13:19,139 --> 00:13:21,420
percentage to F it's slash in the end of

298
00:13:21,420 --> 00:13:23,760
example.com it will break the domain and

299
00:13:23,760 --> 00:13:26,040
we cannot redirect to a domain we own

300
00:13:26,040 --> 00:13:29,339
and then we have this one the percentage

301
00:13:29,339 --> 00:13:33,000
for zero which is the the ad symbol all

302
00:13:33,000 --> 00:13:35,160
right so let's try to go from the from

303
00:13:35,160 --> 00:13:38,940
here and put it like uh at evo.com and

304
00:13:38,940 --> 00:13:41,519
try like some variations on these to see

305
00:13:41,519 --> 00:13:45,240
uh if we can bypass these valuation and

306
00:13:45,240 --> 00:13:48,000
after a while we can see that we have

307
00:13:48,000 --> 00:13:51,320
example.com at evil

308
00:13:51,320 --> 00:13:54,060
slash.com so this is the perfect

309
00:13:54,060 --> 00:13:57,959
candidate uh because if we go here

310
00:13:57,959 --> 00:14:01,560
um it will basically uh just go to Evo

311
00:14:01,560 --> 00:14:04,980
so it will go to uh perform this

312
00:14:04,980 --> 00:14:07,760
redirect and then the host will be evil

313
00:14:07,760 --> 00:14:11,459
slash.com uh so we can leverage this at

314
00:14:11,459 --> 00:14:12,899
this point it should be pretty easy

315
00:14:12,899 --> 00:14:16,139
right because we can just pass like a

316
00:14:16,139 --> 00:14:17,339
decimal

317
00:14:17,339 --> 00:14:19,920
um IP address for example because we

318
00:14:19,920 --> 00:14:22,440
understand we we cannot have a dot in

319
00:14:22,440 --> 00:14:25,320
there so basically if we eat scent it

320
00:14:25,320 --> 00:14:27,779
will basically redirect to

321
00:14:27,779 --> 00:14:31,019
um to these host which is basically a IP

322
00:14:31,019 --> 00:14:33,420
address I control and as a web server

323
00:14:33,420 --> 00:14:35,959
and finally it will redirect to

324
00:14:35,959 --> 00:14:38,880
actualevil.com but the token will be

325
00:14:38,880 --> 00:14:41,160
already stored in the logs of my web

326
00:14:41,160 --> 00:14:44,160
server allowing me to perform an account

327
00:14:44,160 --> 00:14:46,500
takeover with interaction to victims

328
00:14:46,500 --> 00:14:50,519
that I can send these this URL all right

329
00:14:50,519 --> 00:14:53,940
so how to find mysterious bugs with this

330
00:14:53,940 --> 00:14:57,060
technique or with this tool so so

331
00:14:57,060 --> 00:14:59,579
basically we should look for anything

332
00:14:59,579 --> 00:15:03,180
that is validated it's locked down it's

333
00:15:03,180 --> 00:15:05,040
like sanitized normalized use the

334
00:15:05,040 --> 00:15:07,920
inquiries and so on so we want to find

335
00:15:07,920 --> 00:15:10,500
something that is apparently impossible

336
00:15:10,500 --> 00:15:14,339
and basically if we look into it and we

337
00:15:14,339 --> 00:15:16,980
try to apply this technique and fuzz it

338
00:15:16,980 --> 00:15:19,500
these will actually open the door to

339
00:15:19,500 --> 00:15:24,180
mysterious bugs in ordinate targets so

340
00:15:24,180 --> 00:15:26,459
the process and this is more like the

341
00:15:26,459 --> 00:15:29,399
metal methodology itself it's about

342
00:15:29,399 --> 00:15:31,500
setting a goal in the first place so

343
00:15:31,500 --> 00:15:34,500
let's say okay we want to have zero

344
00:15:34,500 --> 00:15:36,540
interaction Accounting cover on

345
00:15:36,540 --> 00:15:39,899
example.com so we are going to pick our

346
00:15:39,899 --> 00:15:42,720
Target Field that we are going to look

347
00:15:42,720 --> 00:15:45,360
for weird behaviors so let's pick the

348
00:15:45,360 --> 00:15:47,040
email address which is an account

349
00:15:47,040 --> 00:15:50,160
identifier used to log in in multiple

350
00:15:50,160 --> 00:15:52,560
endpoints or obligations or even

351
00:15:52,560 --> 00:15:54,899
subdomains of the target we are

352
00:15:54,899 --> 00:15:57,420
analyzing so we are going to identify

353
00:15:57,420 --> 00:15:59,820
all the flows that consume the email

354
00:15:59,820 --> 00:16:03,420
address and in every endpoint in every

355
00:16:03,420 --> 00:16:05,820
single domain in every flow we are going

356
00:16:05,820 --> 00:16:08,160
to use this technique we are going to

357
00:16:08,160 --> 00:16:10,800
fuzz it and then we are going to analyze

358
00:16:10,800 --> 00:16:12,600
all the response codes do we get

359
00:16:12,600 --> 00:16:14,339
anything interesting any successful

360
00:16:14,339 --> 00:16:16,440
response

361
00:16:16,440 --> 00:16:19,139
um any 500 response like internal server

362
00:16:19,139 --> 00:16:22,320
error and so on so and we can try to

363
00:16:22,320 --> 00:16:24,060
write down and answer some some

364
00:16:24,060 --> 00:16:26,100
questions so is a regular expression

365
00:16:26,100 --> 00:16:28,440
always the same in all the endpoints

366
00:16:28,440 --> 00:16:32,699
usually like even like in

367
00:16:32,699 --> 00:16:36,300
well like metal targets and iron targets

368
00:16:36,300 --> 00:16:38,940
it's actually very funny because the

369
00:16:38,940 --> 00:16:40,980
developers use different regular

370
00:16:40,980 --> 00:16:43,500
expressions in different endpoints and

371
00:16:43,500 --> 00:16:45,540
this is this could lead to very

372
00:16:45,540 --> 00:16:48,360
interesting stuff so after analyzing the

373
00:16:48,360 --> 00:16:51,060
response codes we are going to pick a

374
00:16:51,060 --> 00:16:53,459
weird byte that went through in one of

375
00:16:53,459 --> 00:16:56,579
those positions and then we'll go

376
00:16:56,579 --> 00:16:58,920
through all the flows that we identified

377
00:16:58,920 --> 00:17:01,440
in step three which is basically all the

378
00:17:01,440 --> 00:17:04,679
flows that consume this parameter so we

379
00:17:04,679 --> 00:17:06,900
can try this is just an example for

380
00:17:06,900 --> 00:17:09,839
account takeover it's recovery endpoints

381
00:17:09,839 --> 00:17:13,500
login sign up oauth single sign-on email

382
00:17:13,500 --> 00:17:15,900
change confirmation and so on so it will

383
00:17:15,900 --> 00:17:18,359
always depend on the Target Field we are

384
00:17:18,359 --> 00:17:22,919
trying to to exploit and hopefully so

385
00:17:22,919 --> 00:17:25,160
this is basically

386
00:17:25,160 --> 00:17:28,740
what I call the moment uh where when we

387
00:17:28,740 --> 00:17:32,220
find a mysterious bug so we

388
00:17:32,220 --> 00:17:34,740
obtaining an error or a weird behavior

389
00:17:34,740 --> 00:17:37,200
and then we are going to try to realize

390
00:17:37,200 --> 00:17:40,140
the impact or an attack scenario for

391
00:17:40,140 --> 00:17:43,320
that weird State we got our account into

392
00:17:43,320 --> 00:17:45,240
in this scenario or we got the

393
00:17:45,240 --> 00:17:48,240
application into in this scenario and if

394
00:17:48,240 --> 00:17:51,660
not if like nothing is like apparently a

395
00:17:51,660 --> 00:17:55,140
a buggy we are going to go back to step

396
00:17:55,140 --> 00:17:58,679
5B or one or two so we are going to pick

397
00:17:58,679 --> 00:18:01,200
another weird bite that went through and

398
00:18:01,200 --> 00:18:03,539
gave us another response on a specific

399
00:18:03,539 --> 00:18:06,120
endpoint or obviously we are going to

400
00:18:06,120 --> 00:18:09,000
change at the field or even the goal of

401
00:18:09,000 --> 00:18:10,919
course so that's that's the methodology

402
00:18:10,919 --> 00:18:15,120
to uh to uncover this type of uh weird

403
00:18:15,120 --> 00:18:17,100
weird stuff

404
00:18:17,100 --> 00:18:19,559
so let's take a look at some real world

405
00:18:19,559 --> 00:18:22,320
uh examples uh if you want to take a

406
00:18:22,320 --> 00:18:24,660
look at more examples you can go through

407
00:18:24,660 --> 00:18:27,600
my GitHub and the recollapse GitHub and

408
00:18:27,600 --> 00:18:31,500
you'll have more examples of this so the

409
00:18:31,500 --> 00:18:34,080
first one is a weird web cache deception

410
00:18:34,080 --> 00:18:36,120
that I was able to find in a while

411
00:18:36,120 --> 00:18:38,460
collaborating with the technology a few

412
00:18:38,460 --> 00:18:41,520
years back so basically we add this read

413
00:18:41,520 --> 00:18:43,679
active.com Target

414
00:18:43,679 --> 00:18:46,799
and we wanted to basically understand if

415
00:18:46,799 --> 00:18:49,380
we could trigger any sort of web cache

416
00:18:49,380 --> 00:18:52,620
deception because in this endpoint uh WP

417
00:18:52,620 --> 00:18:56,280
Json V1 user we could get an API token

418
00:18:56,280 --> 00:18:59,820
from a victim uh in this case from

419
00:18:59,820 --> 00:19:01,679
ourselves but we wanted to take it from

420
00:19:01,679 --> 00:19:05,539
a victim so of course we tried like Dot

421
00:19:05,539 --> 00:19:08,820
css.pdf.js and that could basically be

422
00:19:08,820 --> 00:19:11,820
cached uh somehow depending on the

423
00:19:11,820 --> 00:19:13,860
configuration of the the load balancer

424
00:19:13,860 --> 00:19:16,440
or the web server and so on but we got

425
00:19:16,440 --> 00:19:19,020
404 responses for that so we were

426
00:19:19,020 --> 00:19:20,700
playing with this technique and

427
00:19:20,700 --> 00:19:23,340
basically we just wanted to to to to

428
00:19:23,340 --> 00:19:26,820
fuzz it and basically we realized okay

429
00:19:26,820 --> 00:19:30,360
so caching rules are usually regex based

430
00:19:30,360 --> 00:19:33,600
and basically a static extension is not

431
00:19:33,600 --> 00:19:35,340
enough these days to perform the the

432
00:19:35,340 --> 00:19:38,820
webcash deception so we actually need to

433
00:19:38,820 --> 00:19:40,620
get the correct content type in the

434
00:19:40,620 --> 00:19:43,679
response and if we make it work

435
00:19:43,679 --> 00:19:47,640
basically we might be able to have a web

436
00:19:47,640 --> 00:19:51,059
cache deception a scenario an exfiltrate

437
00:19:51,059 --> 00:19:54,240
the cash to response from a victim so

438
00:19:54,240 --> 00:19:58,080
let's fuzz it so we tried to uh fix this

439
00:19:58,080 --> 00:20:00,900
dot extension uh in this this endpoint

440
00:20:00,900 --> 00:20:03,360
and we first did on the separator

441
00:20:03,360 --> 00:20:05,700
position before the the DOT

442
00:20:05,700 --> 00:20:09,600
so we fast from 0 to FF and also

443
00:20:09,600 --> 00:20:12,059
well-known extensions and after a while

444
00:20:12,059 --> 00:20:15,660
it returned 200 with percentages 23

445
00:20:15,660 --> 00:20:18,059
which is basically a mesh symbol and a

446
00:20:18,059 --> 00:20:20,640
question mark as well and in response we

447
00:20:20,640 --> 00:20:24,480
were able to see okay so we have an h35x

448
00:20:24,480 --> 00:20:27,539
cache eat and we noticed it because we

449
00:20:27,539 --> 00:20:30,000
have a different Response Code but also

450
00:20:30,000 --> 00:20:32,760
a different response length so we were

451
00:20:32,760 --> 00:20:35,760
able to trigger a web cache deception

452
00:20:35,760 --> 00:20:41,340
with percentage 23 or 3F dot PDF on an

453
00:20:41,340 --> 00:20:44,100
API which was like mind blown at the

454
00:20:44,100 --> 00:20:46,380
time so basically we can send a link to

455
00:20:46,380 --> 00:20:49,140
a login victim and the victim will

456
00:20:49,140 --> 00:20:51,780
request this URL and if it's logged in

457
00:20:51,780 --> 00:20:54,240
we can just access the cached content

458
00:20:54,240 --> 00:20:56,760
from another location and steal the API

459
00:20:56,760 --> 00:20:59,460
token and boom we get access to the

460
00:20:59,460 --> 00:21:01,440
victims account through webcast

461
00:21:01,440 --> 00:21:02,940
deception

462
00:21:02,940 --> 00:21:05,340
another example is a zero interaction

463
00:21:05,340 --> 00:21:08,100
account takeover through oauth so this

464
00:21:08,100 --> 00:21:09,960
one was on Shopify I'd like to thank

465
00:21:09,960 --> 00:21:12,240
Shopify for allowing me to disclose this

466
00:21:12,240 --> 00:21:15,179
one so basically Shopify offers a sign

467
00:21:15,179 --> 00:21:18,720
up login with Shopify of mechanism and

468
00:21:18,720 --> 00:21:20,580
basically the scope will include email

469
00:21:20,580 --> 00:21:22,799
address to log in in multiple

470
00:21:22,799 --> 00:21:25,440
applications and it will be consumed to

471
00:21:25,440 --> 00:21:27,360
create an account on other applications

472
00:21:27,360 --> 00:21:30,179
and one of those that was in scope for a

473
00:21:30,179 --> 00:21:32,340
specific live hiking event was taller

474
00:21:32,340 --> 00:21:35,280
dot app so the email address doesn't

475
00:21:35,280 --> 00:21:37,679
need to didn't need to actually be

476
00:21:37,679 --> 00:21:41,220
verified to create an account but if the

477
00:21:41,220 --> 00:21:43,980
email already existed we couldn't log in

478
00:21:43,980 --> 00:21:47,460
or sign up on Shopify so we needed to

479
00:21:47,460 --> 00:21:49,260
sign up on Shopify with the victims

480
00:21:49,260 --> 00:21:52,320
account and we couldn't do it so let's

481
00:21:52,320 --> 00:21:54,679
first the email change request on

482
00:21:54,679 --> 00:21:56,520
accounts.shopify.com that is basically

483
00:21:56,520 --> 00:21:59,700
responsible for allowing users to manage

484
00:21:59,700 --> 00:22:02,039
their their account so we try to change

485
00:22:02,039 --> 00:22:05,220
our email to the victims uh by using

486
00:22:05,220 --> 00:22:06,840
like new lines in the end and special

487
00:22:06,840 --> 00:22:09,059
characters and so on so no weird

488
00:22:09,059 --> 00:22:12,059
characters were allowed but on the sign

489
00:22:12,059 --> 00:22:14,340
up request and this was a slow fuzzing

490
00:22:14,340 --> 00:22:16,020
process because of you know like

491
00:22:16,020 --> 00:22:18,020
captures and so on so on

492
00:22:18,020 --> 00:22:19,919
accounts.shopify.com when we were

493
00:22:19,919 --> 00:22:23,880
signing up we could basically use these

494
00:22:23,880 --> 00:22:26,940
weird eye character for example which

495
00:22:26,940 --> 00:22:28,919
would be normalized and it will go

496
00:22:28,919 --> 00:22:32,059
through so the actual email address on

497
00:22:32,059 --> 00:22:34,320
accounts.shopify.com will be the the

498
00:22:34,320 --> 00:22:36,480
actual one like without being normalized

499
00:22:36,480 --> 00:22:39,539
but when we logged in with Shopify in

500
00:22:39,539 --> 00:22:41,299
this weird State on the third party

501
00:22:41,299 --> 00:22:44,520
application through oauth we were able

502
00:22:44,520 --> 00:22:47,280
to achieve a successful Accounting cover

503
00:22:47,280 --> 00:22:49,679
without any interaction as you can see

504
00:22:49,679 --> 00:22:51,299
on this video

505
00:22:51,299 --> 00:22:53,520
so this is the victim's account and we

506
00:22:53,520 --> 00:22:56,039
are not able to sign up on Shopify with

507
00:22:56,039 --> 00:22:58,620
the victim's email address so we open a

508
00:22:58,620 --> 00:23:00,419
new session we go to the third party

509
00:23:00,419 --> 00:23:03,299
application teller.app in this case we

510
00:23:03,299 --> 00:23:05,820
are going to sign up with Shopify then

511
00:23:05,820 --> 00:23:08,640
we are going to sign up with another an

512
00:23:08,640 --> 00:23:11,159
email which is allowed with this weird a

513
00:23:11,159 --> 00:23:14,039
character and after we create our

514
00:23:14,039 --> 00:23:16,740
account uh we will be redirected to the

515
00:23:16,740 --> 00:23:19,140
Target application and it's very simple

516
00:23:19,140 --> 00:23:21,720
we'll just be logged in in the victims

517
00:23:21,720 --> 00:23:23,100
account

518
00:23:23,100 --> 00:23:25,559
so yeah this was a fun one and simple

519
00:23:25,559 --> 00:23:27,539
one that I was able to find with the

520
00:23:27,539 --> 00:23:29,880
Fisher like two years ago and after that

521
00:23:29,880 --> 00:23:32,940
we realized that all of SEMO flows were

522
00:23:32,940 --> 00:23:36,539
basically uh passing all these critical

523
00:23:36,539 --> 00:23:38,159
account identifiers to destination

524
00:23:38,159 --> 00:23:41,640
applications and normalization is often

525
00:23:41,640 --> 00:23:44,120
used in these flows to make the input

526
00:23:44,120 --> 00:23:46,440
consistent and it makes sense the

527
00:23:46,440 --> 00:23:49,080
problem is that the the oauth provider

528
00:23:49,080 --> 00:23:50,880
application like the parent application

529
00:23:50,880 --> 00:23:53,700
the the big Target if there's like one

530
00:23:53,700 --> 00:23:57,240
endpoint that would accept like weird

531
00:23:57,240 --> 00:23:59,760
input characters that will not be

532
00:23:59,760 --> 00:24:03,000
normalized in the first place uh this

533
00:24:03,000 --> 00:24:04,500
will be pretty bad because the

534
00:24:04,500 --> 00:24:06,299
destination the the in the destination

535
00:24:06,299 --> 00:24:09,179
application we will be able to take over

536
00:24:09,179 --> 00:24:12,539
accounts without any interaction

537
00:24:12,539 --> 00:24:14,940
so some takeaways to sum it up so

538
00:24:14,940 --> 00:24:17,580
developers always test and fuzz your

539
00:24:17,580 --> 00:24:19,320
regular expressions or rely on

540
00:24:19,320 --> 00:24:21,179
well-known libraries and even well-known

541
00:24:21,179 --> 00:24:25,080
libraries like if you fuzz it just try

542
00:24:25,080 --> 00:24:27,659
to see the results and go I I I'll bet

543
00:24:27,659 --> 00:24:29,940
that you'll be surprised and simple

544
00:24:29,940 --> 00:24:31,559
modifications and this is the major

545
00:24:31,559 --> 00:24:34,260
takeaway here is that we could go

546
00:24:34,260 --> 00:24:37,080
towards complexity but the idea is that

547
00:24:37,080 --> 00:24:40,559
simple input modifications can result in

548
00:24:40,559 --> 00:24:44,220
great impact by fuzzing uh flipping or

549
00:24:44,220 --> 00:24:47,580
adding bytes basically and so Black Box

550
00:24:47,580 --> 00:24:49,980
regular expression testing is still not

551
00:24:49,980 --> 00:24:52,380
very touched it's creative and manual

552
00:24:52,380 --> 00:24:56,039
work so go for it and we you can also of

553
00:24:56,039 --> 00:24:58,380
course like automate the fuzzing part by

554
00:24:58,380 --> 00:25:02,159
relying on the recollapse tool or other

555
00:25:02,159 --> 00:25:05,159
methods and basically the regular

556
00:25:05,159 --> 00:25:07,740
expression Behavior can also reveal

557
00:25:07,740 --> 00:25:09,780
information about libraries programming

558
00:25:09,780 --> 00:25:12,000
languages at the back endpoints and so

559
00:25:12,000 --> 00:25:15,120
on so so basically the idea is that if

560
00:25:15,120 --> 00:25:17,400
something is being validated and you can

561
00:25:17,400 --> 00:25:20,039
bypass it think about the impact if it's

562
00:25:20,039 --> 00:25:22,620
not clear instantly and you'll be able

563
00:25:22,620 --> 00:25:24,779
to see the big picture

564
00:25:24,779 --> 00:25:27,480
so thank you everyone I'll like to shout

565
00:25:27,480 --> 00:25:30,000
out all of these people and teams I

566
00:25:30,000 --> 00:25:31,919
couldn't list everyone that collaborated

567
00:25:31,919 --> 00:25:34,039
with me but thank you so much everyone

568
00:25:34,039 --> 00:25:37,860
for being such a fellow good fellow

569
00:25:37,860 --> 00:25:40,980
hackers for the the past couple of years

570
00:25:40,980 --> 00:25:43,620
so thank you everyone and let me know if

571
00:25:43,620 --> 00:25:46,399
you have any questions

