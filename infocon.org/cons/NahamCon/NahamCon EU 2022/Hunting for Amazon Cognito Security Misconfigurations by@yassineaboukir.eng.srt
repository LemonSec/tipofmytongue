1
00:00:00,659 --> 00:00:03,178
hello everyone uh

2
00:00:03,179 --> 00:00:05,940
thank you so much for tuning in uh we're

3
00:00:05,940 --> 00:00:10,080
going to talk about ewe's Cognito as a

4
00:00:10,080 --> 00:00:12,000
solution for authentication and

5
00:00:12,000 --> 00:00:14,340
authorization then we're going to mainly

6
00:00:14,340 --> 00:00:16,160
go over a few common security

7
00:00:16,160 --> 00:00:18,660
misconfigurations that can affect its

8
00:00:18,660 --> 00:00:19,740
implementation

9
00:00:19,740 --> 00:00:22,320
I've chosen this topic because I've seen

10
00:00:22,320 --> 00:00:24,960
how easier it is to misconfigure it as

11
00:00:24,960 --> 00:00:26,660
well as the fact that a lot of people

12
00:00:26,660 --> 00:00:29,400
especially about hunters I think it's

13
00:00:29,400 --> 00:00:31,740
difficult to test whereas it really is

14
00:00:31,740 --> 00:00:34,559
not as long as you just understands how

15
00:00:34,559 --> 00:00:36,300
it works

16
00:00:36,300 --> 00:00:38,219
before we get into it let me introduce

17
00:00:38,219 --> 00:00:41,340
myself for those who do not know me uh

18
00:00:41,340 --> 00:00:43,800
my name is Yasin abukir I'm originally

19
00:00:43,800 --> 00:00:47,100
from Morocco based in France uh I've got

20
00:00:47,100 --> 00:00:49,920
a decade of experience in application

21
00:00:49,920 --> 00:00:52,140
security Consulting I work with

22
00:00:52,140 --> 00:00:53,960
companies that provide them with

23
00:00:53,960 --> 00:00:56,420
painters security assessments Services

24
00:00:56,420 --> 00:01:00,539
uh and that in similar regards I this

25
00:01:00,539 --> 00:01:02,100
year I joined hack one paint this

26
00:01:02,100 --> 00:01:03,840
program and I've been working with their

27
00:01:03,840 --> 00:01:05,760
clients as well so I've been doing

28
00:01:05,760 --> 00:01:07,340
background names for a very long time

29
00:01:07,340 --> 00:01:11,700
probably since late 2013 early 2014 to

30
00:01:11,700 --> 00:01:14,220
be accurate I mainly hack on hack one

31
00:01:14,220 --> 00:01:16,380
platform where I'm currently ranking in

32
00:01:16,380 --> 00:01:17,939
the top 20.

33
00:01:17,939 --> 00:01:20,340
so this year I've been fortunate I

34
00:01:20,340 --> 00:01:22,920
earned the most valuable hacker the

35
00:01:22,920 --> 00:01:25,799
image title and the first place at a

36
00:01:25,799 --> 00:01:27,840
live hacking event that took place in

37
00:01:27,840 --> 00:01:28,680
Denver

38
00:01:28,680 --> 00:01:30,600
as you can see in the picture in the

39
00:01:30,600 --> 00:01:32,820
right that's me holding the Bell looking

40
00:01:32,820 --> 00:01:35,220
like a UFC fighter there

41
00:01:35,220 --> 00:01:39,240
uh from 2017 to 2019 I had the chance to

42
00:01:39,240 --> 00:01:41,340
work for hacker one as a part of the

43
00:01:41,340 --> 00:01:43,939
triage team it was a great experience

44
00:01:43,939 --> 00:01:46,740
and I also love traveling and been doing

45
00:01:46,740 --> 00:01:48,299
it for a couple of years now as a

46
00:01:48,299 --> 00:01:50,399
digital Nomad just hacking from

47
00:01:50,399 --> 00:01:52,079
different places

48
00:01:52,079 --> 00:01:54,600
oh yeah that's it so let's get into it

49
00:01:54,600 --> 00:01:57,899
introduction to ew's Cognito uh if

50
00:01:57,899 --> 00:02:00,180
you've got any developer background you

51
00:02:00,180 --> 00:02:01,979
know that user authentication and

52
00:02:01,979 --> 00:02:04,200
authorization can be quite challenging

53
00:02:04,200 --> 00:02:06,000
when you're building a web and mobile

54
00:02:06,000 --> 00:02:06,899
app

55
00:02:06,899 --> 00:02:09,360
so the challenges like include handling

56
00:02:09,360 --> 00:02:12,060
just user data passwords token based

57
00:02:12,060 --> 00:02:15,020
authentication and managing permissions

58
00:02:15,020 --> 00:02:18,660
uh scalability Federation

59
00:02:18,660 --> 00:02:21,599
Etc so it is pretty easy to mix things

60
00:02:21,599 --> 00:02:23,700
up especially with on indications which

61
00:02:23,700 --> 00:02:25,500
is quite sensitive

62
00:02:25,500 --> 00:02:29,280
so Amazon Cognito offers like a scalable

63
00:02:29,280 --> 00:02:32,700
and complete solution to add a sign up

64
00:02:32,700 --> 00:02:34,680
and assigning features to your

65
00:02:34,680 --> 00:02:37,860
application it provides identity

66
00:02:37,860 --> 00:02:40,440
Federation makes it and makes just

67
00:02:40,440 --> 00:02:43,319
implementing security easier as long as

68
00:02:43,319 --> 00:02:45,000
you're just careful with how you're

69
00:02:45,000 --> 00:02:47,700
configuring it

70
00:02:47,700 --> 00:02:51,900
so uh Cognito allows not only managing

71
00:02:51,900 --> 00:02:54,900
authentication but it also provides a

72
00:02:54,900 --> 00:02:57,300
way to manage authorization user

73
00:02:57,300 --> 00:03:00,540
permissions which are usually time and

74
00:03:00,540 --> 00:03:04,260
resources consuming to properly build so

75
00:03:04,260 --> 00:03:07,200
when we talk about Cognito there are two

76
00:03:07,200 --> 00:03:10,260
main components on say concepts to

77
00:03:10,260 --> 00:03:11,459
distinguish

78
00:03:11,459 --> 00:03:14,340
first one is the user poll so when

79
00:03:14,340 --> 00:03:15,840
you're creating

80
00:03:15,840 --> 00:03:17,760
um when you're setting up cognitively

81
00:03:17,760 --> 00:03:20,099
you create the user pool and the user

82
00:03:20,099 --> 00:03:21,920
pool here allows authentication

83
00:03:21,920 --> 00:03:25,440
basically sign in and sign up and then

84
00:03:25,440 --> 00:03:29,400
we have the identity pool uh it refers

85
00:03:29,400 --> 00:03:32,099
it is used for authorization to allow

86
00:03:32,099 --> 00:03:36,120
users to use various AWS resources such

87
00:03:36,120 --> 00:03:41,879
as Amazon dynamodb Amazon S3 API Gateway

88
00:03:41,879 --> 00:03:44,459
Etc so these are the two main Concepts

89
00:03:44,459 --> 00:03:46,500
to remember

90
00:03:46,500 --> 00:03:50,040
this is a the architectural diagram that

91
00:03:50,040 --> 00:03:52,260
reflects a high level authentication and

92
00:03:52,260 --> 00:03:56,519
authorization flow uh so basically you

93
00:03:56,519 --> 00:03:59,819
have the user uh that authenticates to

94
00:03:59,819 --> 00:04:02,519
their account uh so when they're

95
00:04:02,519 --> 00:04:04,080
authenticated to their account they're

96
00:04:04,080 --> 00:04:07,019
checked against a user pool here and

97
00:04:07,019 --> 00:04:09,420
then the user poll will generate and

98
00:04:09,420 --> 00:04:14,060
return three GWT tokens uh ID access

99
00:04:14,060 --> 00:04:17,399
refresh token the ID token the access

100
00:04:17,399 --> 00:04:21,720
token and the refresh token and then the

101
00:04:21,720 --> 00:04:24,500
ID token is passed to the identity pool

102
00:04:24,500 --> 00:04:27,780
the user then will receive a temporary

103
00:04:27,780 --> 00:04:30,840
credentials with permissions that are

104
00:04:30,840 --> 00:04:34,199
based on the EM role that was mapped to

105
00:04:34,199 --> 00:04:36,660
the group that the user belongs to so

106
00:04:36,660 --> 00:04:38,880
the user can then make calls to various

107
00:04:38,880 --> 00:04:41,880
ew Services based on their role

108
00:04:41,880 --> 00:04:43,740
permissions assigned to their

109
00:04:43,740 --> 00:04:45,600
credentials in this case they can't

110
00:04:45,600 --> 00:04:48,540
access the dynamodp with the AWS

111
00:04:48,540 --> 00:04:51,560
credentials as you can see there

112
00:04:51,560 --> 00:04:55,080
uh all right how the question is how you

113
00:04:55,080 --> 00:04:57,900
can tell uh if an application is

114
00:04:57,900 --> 00:05:01,800
actually using Amazon Cognito so uh when

115
00:05:01,800 --> 00:05:03,780
you're doing a testing it's pretty easy

116
00:05:03,780 --> 00:05:07,500
like if you're using the the web proxy

117
00:05:07,500 --> 00:05:09,960
for example burp Suite you can just see

118
00:05:09,960 --> 00:05:12,660
that there are some API calls to Cognito

119
00:05:12,660 --> 00:05:14,639
endpoint here

120
00:05:14,639 --> 00:05:16,979
there are two different ones the yellow

121
00:05:16,979 --> 00:05:20,220
one is the request the is being made or

122
00:05:20,220 --> 00:05:22,919
being sent at user pull as we mentioned

123
00:05:22,919 --> 00:05:24,840
before when you're authenticating to

124
00:05:24,840 --> 00:05:27,360
your account the green one is sent after

125
00:05:27,360 --> 00:05:31,259
authentication to Identity pull a to

126
00:05:31,259 --> 00:05:32,880
exchange basically to exchange the ID

127
00:05:32,880 --> 00:05:36,180
token into a temporary WS credential as

128
00:05:36,180 --> 00:05:38,759
we previews previously mentioned in the

129
00:05:38,759 --> 00:05:41,280
diagram earlier so I've been personally

130
00:05:41,280 --> 00:05:43,560
playing with ews cognitive and exploring

131
00:05:43,560 --> 00:05:45,360
very security configurations in the

132
00:05:45,360 --> 00:05:47,880
console and I've concluded that it's

133
00:05:47,880 --> 00:05:49,860
quite far easier to mix things up as

134
00:05:49,860 --> 00:05:51,780
there are too many features and security

135
00:05:51,780 --> 00:05:54,900
configurations that could confuse any

136
00:05:54,900 --> 00:05:59,639
developer uh I've also came across a lot

137
00:05:59,639 --> 00:06:02,160
of these security misconfigurations both

138
00:06:02,160 --> 00:06:04,139
while doing back downies and penetration

139
00:06:04,139 --> 00:06:05,880
distance so they're actually very common

140
00:06:05,880 --> 00:06:07,620
to find

141
00:06:07,620 --> 00:06:09,479
oh okay we're gonna start with the first

142
00:06:09,479 --> 00:06:11,639
one uh the very first security

143
00:06:11,639 --> 00:06:13,979
misconfiguration is when the temporary

144
00:06:13,979 --> 00:06:17,120
AWS credentials are over permissive

145
00:06:17,120 --> 00:06:21,120
liberal credentials in a sense that the

146
00:06:21,120 --> 00:06:24,120
unintentionally allow access to or net

147
00:06:24,120 --> 00:06:26,940
to net they give you access to or

148
00:06:26,940 --> 00:06:31,500
manipulate other sensitive ewas services

149
00:06:31,500 --> 00:06:34,160
this is especially bad when

150
00:06:34,160 --> 00:06:36,840
unauthenticated roles are enabled as

151
00:06:36,840 --> 00:06:39,180
anyone without having an access to an

152
00:06:39,180 --> 00:06:41,100
account could generate these temporary

153
00:06:41,100 --> 00:06:44,580
credentials and just gain unauthorized

154
00:06:44,580 --> 00:06:47,400
access to these ew services

155
00:06:47,400 --> 00:06:49,979
so assuming we're not authenticated and

156
00:06:49,979 --> 00:06:52,259
we do not have access to an account

157
00:06:52,259 --> 00:06:55,080
there is a huge chance unauthenticated

158
00:06:55,080 --> 00:06:58,139
roles are enabled in the console by the

159
00:06:58,139 --> 00:07:00,539
developer so we basically just need to

160
00:07:00,539 --> 00:07:04,560
find the identity poll ID and AWS region

161
00:07:04,560 --> 00:07:06,240
which most

162
00:07:06,240 --> 00:07:09,000
likely are like over 80 percent of the

163
00:07:09,000 --> 00:07:10,860
time they're just hard coded somewhere

164
00:07:10,860 --> 00:07:13,500
in the source code or in a JS file

165
00:07:13,500 --> 00:07:15,419
so this is the example here as you can

166
00:07:15,419 --> 00:07:17,759
see below of a tech Bounty Target I was

167
00:07:17,759 --> 00:07:19,919
hacking on and I was able to find these

168
00:07:19,919 --> 00:07:22,080
pieces of information in a JS file that

169
00:07:22,080 --> 00:07:25,319
was being loaded by the app so it is

170
00:07:25,319 --> 00:07:29,220
mainly the user polidy the client ID the

171
00:07:29,220 --> 00:07:32,160
region and the identity pool ID the

172
00:07:32,160 --> 00:07:33,960
latter is what we're actually interested

173
00:07:33,960 --> 00:07:36,060
in and

174
00:07:36,060 --> 00:07:38,639
so you can just use burp Suite to search

175
00:07:38,639 --> 00:07:40,860
for the following keywords in order to

176
00:07:40,860 --> 00:07:44,580
find the identity pool ID but remember

177
00:07:44,580 --> 00:07:47,280
that the disclosure of this ID

178
00:07:47,280 --> 00:07:49,440
is not necessarily an issue or a

179
00:07:49,440 --> 00:07:51,660
security misconfiguration as long as the

180
00:07:51,660 --> 00:07:55,380
backend is properly configured right

181
00:07:55,380 --> 00:07:58,580
okay so actually I find the identity ID

182
00:07:58,580 --> 00:08:02,099
in the JS file or in the source code you

183
00:08:02,099 --> 00:08:05,340
can use or download the ews client which

184
00:08:05,340 --> 00:08:07,740
is widely used and just configure it

185
00:08:07,740 --> 00:08:10,440
then you can simply run the command the

186
00:08:10,440 --> 00:08:12,960
AWS command as you can see there in the

187
00:08:12,960 --> 00:08:16,099
green with the replacing the pull

188
00:08:16,099 --> 00:08:18,780
replacing the pull identity ID and the

189
00:08:18,780 --> 00:08:21,120
region so after you execute the command

190
00:08:21,120 --> 00:08:24,419
it will generate an identity ID this is

191
00:08:24,419 --> 00:08:26,580
different from the pull identity ID just

192
00:08:26,580 --> 00:08:28,940
the same name so it will generate an

193
00:08:28,940 --> 00:08:31,379
identity ID that you can see in a

194
00:08:31,379 --> 00:08:32,760
screenshot there

195
00:08:32,760 --> 00:08:35,640
and then you'll just have to copy the

196
00:08:35,640 --> 00:08:38,520
identity ID that was generated and

197
00:08:38,520 --> 00:08:40,500
execute the next command here in the

198
00:08:40,500 --> 00:08:43,440
green and this will generate temporary

199
00:08:43,440 --> 00:08:46,380
AWS credentials for you so this will

200
00:08:46,380 --> 00:08:49,140
generate an access key ID the secret key

201
00:08:49,140 --> 00:08:51,779
and decision token

202
00:08:51,779 --> 00:08:55,260
now we will check if these credentials

203
00:08:55,260 --> 00:08:57,540
the generated credentials for this an

204
00:08:57,540 --> 00:08:59,640
authenticator will have any liberal

205
00:08:59,640 --> 00:09:02,100
permissions that would allow further

206
00:09:02,100 --> 00:09:05,700
access to the app or to the their AWS

207
00:09:05,700 --> 00:09:08,580
Services there are mainly two tools that

208
00:09:08,580 --> 00:09:11,519
I recommend and I use the first one is

209
00:09:11,519 --> 00:09:14,940
enumerate aeon this is pretty this is

210
00:09:14,940 --> 00:09:16,680
this one is pretty easy to use and quite

211
00:09:16,680 --> 00:09:18,959
minimalistic as it allows enumerating

212
00:09:18,959 --> 00:09:21,180
these permissions uh there is also a

213
00:09:21,180 --> 00:09:23,279
comprehensive one called Scout Suite

214
00:09:23,279 --> 00:09:25,440
this one is more comprehensive and does

215
00:09:25,440 --> 00:09:27,240
the same thing uh you can check their

216
00:09:27,240 --> 00:09:29,880
GitHub represent rate on how you can

217
00:09:29,880 --> 00:09:32,459
configure it but in this screenshot I

218
00:09:32,459 --> 00:09:35,339
mainly used enumerate em and managed to

219
00:09:35,339 --> 00:09:38,940
enumerate some permissions uh associated

220
00:09:38,940 --> 00:09:40,920
with the credential that we generated

221
00:09:40,920 --> 00:09:43,320
but in this screenshot nothing really

222
00:09:43,320 --> 00:09:45,260
was interesting I don't have any

223
00:09:45,260 --> 00:09:47,160
screenshots so

224
00:09:47,160 --> 00:09:48,660
uh

225
00:09:48,660 --> 00:09:50,940
like sensitive services that I've had

226
00:09:50,940 --> 00:09:52,980
successfully unfortunately but as you

227
00:09:52,980 --> 00:09:55,260
can see the the idea is the same we

228
00:09:55,260 --> 00:09:57,480
enumerated some permissions like the git

229
00:09:57,480 --> 00:09:59,160
color identity this one is now

230
00:09:59,160 --> 00:10:01,560
interesting and the Dynamo described in

231
00:10:01,560 --> 00:10:03,240
Plants both are not interesting they

232
00:10:03,240 --> 00:10:05,339
just return some details first one

233
00:10:05,339 --> 00:10:07,860
details about the user or role that is

234
00:10:07,860 --> 00:10:09,959
being used and the second one is just

235
00:10:09,959 --> 00:10:12,060
the returns details about the endpoints

236
00:10:12,060 --> 00:10:15,860
of the current AWS region so

237
00:10:15,860 --> 00:10:18,120
uh so yeah unfortunately I don't have

238
00:10:18,120 --> 00:10:19,560
any screenshot for other sensitive

239
00:10:19,560 --> 00:10:21,420
permissions but in the past I've seen

240
00:10:21,420 --> 00:10:23,100
credentials with access to history

241
00:10:23,100 --> 00:10:25,920
history bucket lumped up functions even

242
00:10:25,920 --> 00:10:28,620
an access to dinner mode DB tables in

243
00:10:28,620 --> 00:10:31,620
ETC there are so many things that might

244
00:10:31,620 --> 00:10:33,060
go wrong

245
00:10:33,060 --> 00:10:37,019
all right so there is a chance that the

246
00:10:37,019 --> 00:10:39,420
honor quanticated role is explicitly

247
00:10:39,420 --> 00:10:42,240
disabled in the console so in that case

248
00:10:42,240 --> 00:10:44,399
when you attempt to generate an identity

249
00:10:44,399 --> 00:10:47,160
ID like in the previous step it will

250
00:10:47,160 --> 00:10:49,380
actually throw the following error and

251
00:10:49,380 --> 00:10:51,120
authenticated access is not supported

252
00:10:51,120 --> 00:10:54,000
for this identity poll but later in the

253
00:10:54,000 --> 00:10:55,320
talk I'll show you another

254
00:10:55,320 --> 00:10:57,180
misconfiguration that you may actually

255
00:10:57,180 --> 00:11:00,000
leverage to to obtain and to get an

256
00:11:00,000 --> 00:11:02,279
account on an application that does not

257
00:11:02,279 --> 00:11:04,920
provide any user signup or registration

258
00:11:04,920 --> 00:11:07,560
so just be patient

259
00:11:07,560 --> 00:11:11,040
all right so in in that case assuming

260
00:11:11,040 --> 00:11:13,079
that you do have an access to that

261
00:11:13,079 --> 00:11:15,660
authenticated account once you log into

262
00:11:15,660 --> 00:11:18,300
your account just keep an eye out for

263
00:11:18,300 --> 00:11:20,279
this API call that is exchanging the ID

264
00:11:20,279 --> 00:11:22,380
token as you can see in this screenshot

265
00:11:22,380 --> 00:11:24,120
and it is exchanging the ID token into

266
00:11:24,120 --> 00:11:27,300
temporary AWS credentials similarly you

267
00:11:27,300 --> 00:11:28,800
can just use the tools that I've shown

268
00:11:28,800 --> 00:11:30,839
you to fetch the permissions associated

269
00:11:30,839 --> 00:11:32,640
with these credentials and see if there

270
00:11:32,640 --> 00:11:34,320
are loads any further access to their

271
00:11:34,320 --> 00:11:36,600
AWS services

272
00:11:36,600 --> 00:11:38,040
all right let's get to the second

273
00:11:38,040 --> 00:11:40,140
misconfiguration

274
00:11:40,140 --> 00:11:42,000
uh the second one is when the

275
00:11:42,000 --> 00:11:44,160
application does not allow sign up or

276
00:11:44,160 --> 00:11:46,260
any self registration let's say you have

277
00:11:46,260 --> 00:11:49,800
a SAS app or an admin portal for which

278
00:11:49,800 --> 00:11:52,380
the user provision is only done by an

279
00:11:52,380 --> 00:11:53,700
administrator

280
00:11:53,700 --> 00:11:56,220
they might not have it implemented any

281
00:11:56,220 --> 00:11:59,459
public signup for example from but they

282
00:11:59,459 --> 00:12:01,980
have lift this sign up API action

283
00:12:01,980 --> 00:12:04,920
enabled in the deep in the AWS console

284
00:12:04,920 --> 00:12:07,920
which is misconfiguration

285
00:12:07,920 --> 00:12:11,459
uh so from my personal experience signup

286
00:12:11,459 --> 00:12:13,680
is always enabled by default uh when

287
00:12:13,680 --> 00:12:16,740
creating a user pool in the console so

288
00:12:16,740 --> 00:12:20,040
as unless you explicitly disable it an

289
00:12:20,040 --> 00:12:22,800
attacker will can Leverage The cognitive

290
00:12:22,800 --> 00:12:25,500
API endpoint in order to sign up and

291
00:12:25,500 --> 00:12:28,440
provision an account for themselves

292
00:12:28,440 --> 00:12:32,100
how we can do that so to do that to test

293
00:12:32,100 --> 00:12:34,320
against this particular misconfiguration

294
00:12:34,320 --> 00:12:37,620
you will need the application client ID

295
00:12:37,620 --> 00:12:39,779
which is usually hard-coded in the

296
00:12:39,779 --> 00:12:42,420
source code AS we've seen before and

297
00:12:42,420 --> 00:12:44,700
also you need the client ID which is

298
00:12:44,700 --> 00:12:47,279
usually sent over to Cognito API when

299
00:12:47,279 --> 00:12:49,079
you try to log in to your account so

300
00:12:49,079 --> 00:12:51,300
it's easier to find just use burpswich

301
00:12:51,300 --> 00:12:54,600
then you will simply next send an API

302
00:12:54,600 --> 00:12:57,019
call to sign up with your email address

303
00:12:57,019 --> 00:13:00,300
using the AWS client of course if the

304
00:13:00,300 --> 00:13:02,820
sign up is lift enabled misconfigured

305
00:13:02,820 --> 00:13:05,160
then you should receive E6 DJ code to

306
00:13:05,160 --> 00:13:06,899
your email address that you used for

307
00:13:06,899 --> 00:13:08,459
sign up

308
00:13:08,459 --> 00:13:12,240
so but as you can see here uh in the

309
00:13:12,240 --> 00:13:14,220
screenshot here the this is a field sign

310
00:13:14,220 --> 00:13:16,500
up below but in the middle you can see a

311
00:13:16,500 --> 00:13:19,620
successful sign up that says that we we

312
00:13:19,620 --> 00:13:22,560
should receive a code or email

313
00:13:22,560 --> 00:13:24,779
so

314
00:13:24,779 --> 00:13:27,180
oh by the way uh if you don't want to

315
00:13:27,180 --> 00:13:30,060
use AWS client you can always send just

316
00:13:30,060 --> 00:13:33,120
direct HTTP call to Cognito API endpoint

317
00:13:33,120 --> 00:13:34,620
as follow as you can see here in the

318
00:13:34,620 --> 00:13:36,600
screenshot so this is just a replacement

319
00:13:36,600 --> 00:13:39,060
if you don't want to use AWS client you

320
00:13:39,060 --> 00:13:42,000
can construct this HTTP request make

321
00:13:42,000 --> 00:13:44,040
sure you're using the upper create HTTP

322
00:13:44,040 --> 00:13:46,019
header for sign up here as you can see

323
00:13:46,019 --> 00:13:49,200
and the body is properly formatted in

324
00:13:49,200 --> 00:13:52,200
Json so this is exactly the same as

325
00:13:52,200 --> 00:13:54,540
using AWS client I prefer the AWS client

326
00:13:54,540 --> 00:13:57,600
to be honest it's pretty easy

327
00:13:57,600 --> 00:13:59,639
all right so if the email verification

328
00:13:59,639 --> 00:14:01,700
is also enabled

329
00:14:01,700 --> 00:14:04,019
you will you won't be able to access

330
00:14:04,019 --> 00:14:06,000
your the account unless you confirm it

331
00:14:06,000 --> 00:14:09,480
but that is quite easy so you can again

332
00:14:09,480 --> 00:14:12,000
leverage AWS client Again by simply

333
00:14:12,000 --> 00:14:14,760
providing the email address the client

334
00:14:14,760 --> 00:14:17,760
ID the region and the six digits that

335
00:14:17,760 --> 00:14:19,980
you received in the email once you hit

336
00:14:19,980 --> 00:14:23,639
enter it will confirm your account so

337
00:14:23,639 --> 00:14:25,019
it's pretty easy to confirm it that's

338
00:14:25,019 --> 00:14:26,880
not a problem sometimes you might be

339
00:14:26,880 --> 00:14:29,279
able to sign up you get an account but

340
00:14:29,279 --> 00:14:32,220
it doesn't have any roles any role

341
00:14:32,220 --> 00:14:34,440
assigned to it unfortunately that could

342
00:14:34,440 --> 00:14:35,579
happen

343
00:14:35,579 --> 00:14:40,920
but there is a chance that uh

344
00:14:40,920 --> 00:14:44,160
well so oh sorry

345
00:14:44,160 --> 00:14:47,100
this is the so basically if you want to

346
00:14:47,100 --> 00:14:48,600
confirm your account you can all also

347
00:14:48,600 --> 00:14:52,019
use the HTTP request here so what I was

348
00:14:52,019 --> 00:14:53,639
saying earlier is that there is a chance

349
00:14:53,639 --> 00:14:55,500
that sometimes when you sign up the user

350
00:14:55,500 --> 00:14:58,139
doesn't have any group assigned so you

351
00:14:58,139 --> 00:14:59,519
will not get any access to the

352
00:14:59,519 --> 00:15:01,440
application features or functionalities

353
00:15:01,440 --> 00:15:04,019
but this is but in this particular case

354
00:15:04,019 --> 00:15:05,699
you can still use the generated

355
00:15:05,699 --> 00:15:07,579
credentials and test them against

356
00:15:07,579 --> 00:15:10,380
liberal permissions as we've seen in the

357
00:15:10,380 --> 00:15:12,720
first misconfiguration

358
00:15:12,720 --> 00:15:14,760
all right a third misconfiguration

359
00:15:14,760 --> 00:15:17,339
another prominent one is that you can

360
00:15:17,339 --> 00:15:20,699
come across uh writable sensitive user

361
00:15:20,699 --> 00:15:22,139
attributes

362
00:15:22,139 --> 00:15:24,000
so basically when you create a user pool

363
00:15:24,000 --> 00:15:26,579
in the console it allows you to set up a

364
00:15:26,579 --> 00:15:28,560
number of standard user attributes such

365
00:15:28,560 --> 00:15:31,860
as email full name birthday phone number

366
00:15:31,860 --> 00:15:34,860
Etc these are supported by default and

367
00:15:34,860 --> 00:15:37,500
these attributes are usually writable

368
00:15:37,500 --> 00:15:39,360
which means that the user can update

369
00:15:39,360 --> 00:15:42,300
them at any given time however the

370
00:15:42,300 --> 00:15:45,060
developer has the ability to create

371
00:15:45,060 --> 00:15:48,180
custom user attributes

372
00:15:48,180 --> 00:15:49,980
as you can see here you can create

373
00:15:49,980 --> 00:15:53,639
custom attributes uh like the user role

374
00:15:53,639 --> 00:15:55,199
it's a custom attribute that I'm

375
00:15:55,199 --> 00:15:57,899
creating here in screenshot to store the

376
00:15:57,899 --> 00:16:00,779
role and level of access of the user

377
00:16:00,779 --> 00:16:02,579
which they're supposed to have but what

378
00:16:02,579 --> 00:16:05,399
can go wrong here a lot actually

379
00:16:05,399 --> 00:16:07,680
so the security issue is that developers

380
00:16:07,680 --> 00:16:10,320
often forget to set sensitive user

381
00:16:10,320 --> 00:16:12,720
attributes as readable only

382
00:16:12,720 --> 00:16:16,139
so they leave them they they leave them

383
00:16:16,139 --> 00:16:18,240
as writable which means that even if the

384
00:16:18,240 --> 00:16:21,120
application he does not allow the user

385
00:16:21,120 --> 00:16:23,399
to change its value they can always

386
00:16:23,399 --> 00:16:26,579
Leverage The cognitive API to update it

387
00:16:26,579 --> 00:16:28,980
as we've seen in earlier examples

388
00:16:28,980 --> 00:16:31,500
so a lot can go wrong since the user can

389
00:16:31,500 --> 00:16:33,120
update their role for example to an

390
00:16:33,120 --> 00:16:35,279
admin or change their membership status

391
00:16:35,279 --> 00:16:38,639
or Etc depends

392
00:16:38,639 --> 00:16:40,440
all right so how we can do that how we

393
00:16:40,440 --> 00:16:43,380
can update uh the user attribute so the

394
00:16:43,380 --> 00:16:45,360
first step is to fetch the current

395
00:16:45,360 --> 00:16:47,459
user's attribute and see if there are

396
00:16:47,459 --> 00:16:49,199
any custom ones that they are not

397
00:16:49,199 --> 00:16:50,660
supposed to update

398
00:16:50,660 --> 00:16:52,920
uh so once you're logged into your

399
00:16:52,920 --> 00:16:55,380
account you will obtain an access token

400
00:16:55,380 --> 00:16:56,759
as you can see here in the authorization

401
00:16:56,759 --> 00:16:59,339
header then you can just copy it and

402
00:16:59,339 --> 00:17:02,220
simply execute the ews command to get

403
00:17:02,220 --> 00:17:04,140
the user attributes it will look

404
00:17:04,140 --> 00:17:06,540
something like this in the screenshot so

405
00:17:06,540 --> 00:17:08,339
you can see all the user attributes that

406
00:17:08,339 --> 00:17:10,859
are supported your own you can see that

407
00:17:10,859 --> 00:17:13,079
your own information there so upper

408
00:17:13,079 --> 00:17:15,359
apart from the standard ones always look

409
00:17:15,359 --> 00:17:18,240
for the attributes that start with the

410
00:17:18,240 --> 00:17:20,400
word custom

411
00:17:20,400 --> 00:17:21,660
okay

412
00:17:21,660 --> 00:17:24,000
so you can directly all you can also

413
00:17:24,000 --> 00:17:26,640
directly call the coordinator API if you

414
00:17:26,640 --> 00:17:28,380
don't want to use the AWS client to fix

415
00:17:28,380 --> 00:17:30,419
the user attributes so you would you

416
00:17:30,419 --> 00:17:32,760
want to look out for attributes that

417
00:17:32,760 --> 00:17:35,160
start with custom as I mentioned example

418
00:17:35,160 --> 00:17:36,780
of custom error reviews that I've come

419
00:17:36,780 --> 00:17:39,480
across personally are like is admit

420
00:17:39,480 --> 00:17:43,140
custom is admin uh user role is active

421
00:17:43,140 --> 00:17:45,900
is approved access level and these are

422
00:17:45,900 --> 00:17:48,299
all sensitive as they control the user

423
00:17:48,299 --> 00:17:51,840
level of access most of the time

424
00:17:51,840 --> 00:17:55,140
and naturally the next step is to try to

425
00:17:55,140 --> 00:17:58,919
update these attributes and see if they

426
00:17:58,919 --> 00:18:01,860
are only readable or also lived as

427
00:18:01,860 --> 00:18:05,280
writable which is bad so you so uh you

428
00:18:05,280 --> 00:18:09,120
can use the AWS commands as as posted

429
00:18:09,120 --> 00:18:11,419
there or you can just use the HTTP

430
00:18:11,419 --> 00:18:15,179
request to update it so if one like if

431
00:18:15,179 --> 00:18:17,400
it succeeded see if it succeeds you will

432
00:18:17,400 --> 00:18:21,080
get a 200 okay status

433
00:18:21,539 --> 00:18:24,600
here we've been we try to update the

434
00:18:24,600 --> 00:18:27,660
user role from a standard one to an

435
00:18:27,660 --> 00:18:31,320
admin so change the value to admin and

436
00:18:31,320 --> 00:18:34,020
like yeah funny enough funny story just

437
00:18:34,020 --> 00:18:36,240
when my talk was actually announced I

438
00:18:36,240 --> 00:18:37,740
had someone from the Bad Bunny Community

439
00:18:37,740 --> 00:18:40,080
Reach Out and share the critical bug

440
00:18:40,080 --> 00:18:43,140
that they found just exactly by updating

441
00:18:43,140 --> 00:18:46,860
the their user role to Super admin and

442
00:18:46,860 --> 00:18:49,080
so basically they found in the JS file

443
00:18:49,080 --> 00:18:50,760
that there is a role called super

444
00:18:50,760 --> 00:18:54,480
adamant right and they just like hit the

445
00:18:54,480 --> 00:18:57,360
API Cognito as you can see in the

446
00:18:57,360 --> 00:19:00,720
message here uh to update their their

447
00:19:00,720 --> 00:19:03,660
role to a super admin and luckily enough

448
00:19:03,660 --> 00:19:05,280
they just became the admin of the

449
00:19:05,280 --> 00:19:07,140
platform so this is pretty common in my

450
00:19:07,140 --> 00:19:08,700
boundaries and even when you're doing

451
00:19:08,700 --> 00:19:10,380
penetration testing as well it's pretty

452
00:19:10,380 --> 00:19:11,340
common

453
00:19:11,340 --> 00:19:14,460
the last one the fourth misconfiguration

454
00:19:14,460 --> 00:19:16,620
uh I've that I've come across is when

455
00:19:16,620 --> 00:19:18,660
the application these are lows I mean

456
00:19:18,660 --> 00:19:21,000
doesn't allow updating the email address

457
00:19:21,000 --> 00:19:23,160
as you can see here in the screenshot

458
00:19:23,160 --> 00:19:25,980
but I mean there are both clients and

459
00:19:25,980 --> 00:19:28,620
even server-side checks but it is always

460
00:19:28,620 --> 00:19:30,720
again possible to change it through the

461
00:19:30,720 --> 00:19:32,340
API cognito

462
00:19:32,340 --> 00:19:34,679
so you just need to get your own access

463
00:19:34,679 --> 00:19:36,419
token when you're logged into your

464
00:19:36,419 --> 00:19:39,360
account and then execute the ews command

465
00:19:39,360 --> 00:19:42,179
to set a new email address so you can

466
00:19:42,179 --> 00:19:44,520
always change it using the API Cognito

467
00:19:44,520 --> 00:19:46,380
API

468
00:19:46,380 --> 00:19:48,299
so there are some applications that do

469
00:19:48,299 --> 00:19:50,179
not really require email verification

470
00:19:50,179 --> 00:19:53,280
because they do not expect the user to

471
00:19:53,280 --> 00:19:55,020
be able to change it in the first place

472
00:19:55,020 --> 00:19:57,960
so this can be done from the AWS console

473
00:19:57,960 --> 00:20:01,320
as you can see uh and for apps that rely

474
00:20:01,320 --> 00:20:03,780
on email domain for granting the user

475
00:20:03,780 --> 00:20:06,960
special permissions or access this will

476
00:20:06,960 --> 00:20:08,940
definitely be passed the check controls

477
00:20:08,940 --> 00:20:11,160
and result in that privilege escalation

478
00:20:11,160 --> 00:20:13,440
is pretty easy

479
00:20:13,440 --> 00:20:15,960
so even when email verification is

480
00:20:15,960 --> 00:20:18,539
indeed required uh like a lot of

481
00:20:18,539 --> 00:20:19,919
applications do actually require

482
00:20:19,919 --> 00:20:22,140
verification there is another problem

483
00:20:22,140 --> 00:20:25,080
that arises is that the email attribute

484
00:20:25,080 --> 00:20:27,720
value as you can see here is already

485
00:20:27,720 --> 00:20:30,419
changed and said to the new unverified

486
00:20:30,419 --> 00:20:32,640
email address so although the email

487
00:20:32,640 --> 00:20:35,400
verified attribute does say that the

488
00:20:35,400 --> 00:20:38,760
email is not confirmed here it is false

489
00:20:38,760 --> 00:20:40,020
but

490
00:20:40,020 --> 00:20:42,419
the best security practice is just to

491
00:20:42,419 --> 00:20:44,460
never update the email until the user

492
00:20:44,460 --> 00:20:47,039
verifies it

493
00:20:47,039 --> 00:20:50,220
so what I've noticed uh with Cognito is

494
00:20:50,220 --> 00:20:52,440
that the user would successfully still

495
00:20:52,440 --> 00:20:54,960
be able to log in with the unverified

496
00:20:54,960 --> 00:20:57,480
email address so if that the application

497
00:20:57,480 --> 00:20:59,700
is not checking the email verified

498
00:20:59,700 --> 00:21:02,700
attribute this will definitely result in

499
00:21:02,700 --> 00:21:04,860
privileged installation it's pretty easy

500
00:21:04,860 --> 00:21:07,020
so you should always check the email

501
00:21:07,020 --> 00:21:10,860
verified if it's set to true or false

502
00:21:10,860 --> 00:21:13,380
uh for this particular reason ews they

503
00:21:13,380 --> 00:21:15,299
recently introduced a new security

504
00:21:15,299 --> 00:21:18,000
configuration which is unfortunately now

505
00:21:18,000 --> 00:21:20,340
enabled by default and understanding

506
00:21:20,340 --> 00:21:22,200
it's usually still confusing to most

507
00:21:22,200 --> 00:21:25,559
people so basically uh if you enable

508
00:21:25,559 --> 00:21:27,960
this security feature uh the email

509
00:21:27,960 --> 00:21:30,720
attribute will not be updated until the

510
00:21:30,720 --> 00:21:32,880
user has verified it which is the way to

511
00:21:32,880 --> 00:21:35,280
go but most applications still have it

512
00:21:35,280 --> 00:21:37,620
disabled especially because it's new the

513
00:21:37,620 --> 00:21:39,960
configuration is new and just still not

514
00:21:39,960 --> 00:21:41,760
enabled by default from my experience

515
00:21:41,760 --> 00:21:43,740
from what I've seen

516
00:21:43,740 --> 00:21:47,400
so we'll take uh this report on hacker

517
00:21:47,400 --> 00:21:49,679
one it's public report as a quick case

518
00:21:49,679 --> 00:21:51,840
study just to illustrate this

519
00:21:51,840 --> 00:21:54,480
misconfigurations uh that I just

520
00:21:54,480 --> 00:21:57,120
mentioned so the researcher here was

521
00:21:57,120 --> 00:21:59,880
able to achieve uh E4 account takeover

522
00:21:59,880 --> 00:22:02,640
on Flickr which is uh I think it's a

523
00:22:02,640 --> 00:22:04,020
Yahoo acquisition

524
00:22:04,020 --> 00:22:06,780
so just by abusing Cognito and they paid

525
00:22:06,780 --> 00:22:09,659
him 7.5 K just for it being a critical

526
00:22:09,659 --> 00:22:11,220
bug

527
00:22:11,220 --> 00:22:13,620
so I tried to summarize everything in

528
00:22:13,620 --> 00:22:17,100
this slide here so basically we have our

529
00:22:17,100 --> 00:22:19,500
victim user with the email Jack at

530
00:22:19,500 --> 00:22:21,000
domain.com

531
00:22:21,000 --> 00:22:23,700
so Flickr app was not allowing email

532
00:22:23,700 --> 00:22:25,500
update it was not a loan user to change

533
00:22:25,500 --> 00:22:28,020
their email but the researcher as I met

534
00:22:28,020 --> 00:22:29,820
I told you before he managed to change

535
00:22:29,820 --> 00:22:32,039
it just using the cognitive API it

536
00:22:32,039 --> 00:22:33,419
doesn't matter if there is like a client

537
00:22:33,419 --> 00:22:36,299
or server side Chase as long as he you

538
00:22:36,299 --> 00:22:38,159
can always use the cognitive Epi as

539
00:22:38,159 --> 00:22:40,200
demonstrated earlier so they updated

540
00:22:40,200 --> 00:22:44,100
their email to Jack at dominion.com but

541
00:22:44,100 --> 00:22:47,100
notice that Jack with a capital J which

542
00:22:47,100 --> 00:22:49,380
is the same email as our victim but with

543
00:22:49,380 --> 00:22:52,140
a capital J remember that so here there

544
00:22:52,140 --> 00:22:54,600
are two misconfigurations first one is

545
00:22:54,600 --> 00:22:56,640
that the email address attribute was

546
00:22:56,640 --> 00:22:58,620
lift writable it was lift with the

547
00:22:58,620 --> 00:23:00,600
writable permission in the console so it

548
00:23:00,600 --> 00:23:02,940
did not matter if it was disabled in the

549
00:23:02,940 --> 00:23:04,620
app since you can always update it from

550
00:23:04,620 --> 00:23:08,159
the Cognito API and the email second one

551
00:23:08,159 --> 00:23:10,020
is the email was Lyft case sensitive

552
00:23:10,020 --> 00:23:11,580
which they could have changed to

553
00:23:11,580 --> 00:23:13,860
insensitive in the console so that one

554
00:23:13,860 --> 00:23:15,600
was that were those were two

555
00:23:15,600 --> 00:23:16,980
misconfigurations

556
00:23:16,980 --> 00:23:19,620
then the researcher managed to

557
00:23:19,620 --> 00:23:22,140
successfully log in with the unverified

558
00:23:22,140 --> 00:23:24,480
email they have not verified the email

559
00:23:24,480 --> 00:23:27,000
but they still managed to log in with it

560
00:23:27,000 --> 00:23:29,520
so two issues arise one is the email

561
00:23:29,520 --> 00:23:32,520
verified attribute was not checked if it

562
00:23:32,520 --> 00:23:35,580
was set to true and the second one is

563
00:23:35,580 --> 00:23:37,260
the previous security configuration was

564
00:23:37,260 --> 00:23:40,140
not enabled either so otherwise if they

565
00:23:40,140 --> 00:23:41,159
enabled the previous security

566
00:23:41,159 --> 00:23:43,620
configuration they mentioned the email

567
00:23:43,620 --> 00:23:46,020
value wouldn't have been updated until

568
00:23:46,020 --> 00:23:49,200
you the user verified it so the last

569
00:23:49,200 --> 00:23:52,020
piece of the puzzle was the fact that uh

570
00:23:52,020 --> 00:23:53,820
there was an email normalization

571
00:23:53,820 --> 00:23:57,179
happening uh at the application Level so

572
00:23:57,179 --> 00:23:59,880
the capital J was changed to smaller J

573
00:23:59,880 --> 00:24:02,460
so the email matched the victim's email

574
00:24:02,460 --> 00:24:04,919
and the attacker was just able to log

575
00:24:04,919 --> 00:24:07,260
into the victim's account easily as you

576
00:24:07,260 --> 00:24:09,179
can see it is pretty easy to mess up

577
00:24:09,179 --> 00:24:10,980
things when you're configuring Cognito

578
00:24:10,980 --> 00:24:13,559
so it's very important to be very

579
00:24:13,559 --> 00:24:15,059
careful

580
00:24:15,059 --> 00:24:16,980
so here I have some recommendations for

581
00:24:16,980 --> 00:24:20,460
developers uh this one I've seen so far

582
00:24:20,460 --> 00:24:22,500
these are some recommendations always

583
00:24:22,500 --> 00:24:24,539
remove sensitive details from server

584
00:24:24,539 --> 00:24:27,299
responses any unnecessary details just

585
00:24:27,299 --> 00:24:30,000
remove it if you're not using sign up if

586
00:24:30,000 --> 00:24:32,460
it's not needed disabled in the console

587
00:24:32,460 --> 00:24:34,400
as well make sure you disable

588
00:24:34,400 --> 00:24:36,659
unauthenticated roles if they are not

589
00:24:36,659 --> 00:24:39,780
required uh always review the

590
00:24:39,780 --> 00:24:42,659
permissions that are associated with the

591
00:24:42,659 --> 00:24:44,940
authenticated and unauthenticated role

592
00:24:44,940 --> 00:24:47,520
and always always ensure the least

593
00:24:47,520 --> 00:24:50,159
privileged access that like always Grant

594
00:24:50,159 --> 00:24:52,740
the user minimum privilege access

595
00:24:52,740 --> 00:24:55,500
and then evaluate will evaluate all the

596
00:24:55,500 --> 00:24:58,919
user attributes and if they do not need

597
00:24:58,919 --> 00:25:00,900
to be updated disable the writing

598
00:25:00,900 --> 00:25:02,880
permission if not necessary and remember

599
00:25:02,880 --> 00:25:05,640
that the email clean I mean the email

600
00:25:05,640 --> 00:25:08,820
attribute can always hold an unverified

601
00:25:08,820 --> 00:25:10,620
email address as we have seen in the

602
00:25:10,620 --> 00:25:14,039
report that we just mentioned

603
00:25:14,039 --> 00:25:15,960
that's it thank you so much for tuning

604
00:25:15,960 --> 00:25:18,120
in appreciate it reach out on Twitter if

605
00:25:18,120 --> 00:25:20,159
you have any questions or anything or

606
00:25:20,159 --> 00:25:22,740
just check out my website and you can

607
00:25:22,740 --> 00:25:24,299
always contact me from there as well

608
00:25:24,299 --> 00:25:27,200
thank you so much

