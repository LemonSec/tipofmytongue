1
00:00:00,399 --> 00:00:05,920
hi i'm claire vasco i'm a security

2
00:00:03,360 --> 00:00:08,160
auditor at original defensivenew

3
00:00:05,920 --> 00:00:10,559
and i love devices and protocols that

4
00:00:08,160 --> 00:00:12,400
interact with the physical world

5
00:00:10,559 --> 00:00:13,599
today i'm going to talk about one of

6
00:00:12,400 --> 00:00:16,640
these protocols

7
00:00:13,599 --> 00:00:18,560
knx and its implementation over ip which

8
00:00:16,640 --> 00:00:20,960
is mostly used in building management

9
00:00:18,560 --> 00:00:20,959
systems

10
00:00:21,760 --> 00:00:26,320
so first let's briefly introduce what

11
00:00:24,160 --> 00:00:29,359
building management systems are

12
00:00:26,320 --> 00:00:31,840
basically such systems aim at connecting

13
00:00:29,359 --> 00:00:34,480
components in a building to monitor and

14
00:00:31,840 --> 00:00:36,719
control them from a central location

15
00:00:34,480 --> 00:00:37,519
this includes for instance lighting

16
00:00:36,719 --> 00:00:40,239
shutters

17
00:00:37,520 --> 00:00:41,520
air conditioning and even access control

18
00:00:40,239 --> 00:00:44,959
safety alert

19
00:00:41,520 --> 00:00:46,320
etc from a technical point of view this

20
00:00:44,960 --> 00:00:48,640
often means that sensors

21
00:00:46,320 --> 00:00:50,000
and actuators that communicate using

22
00:00:48,640 --> 00:00:52,800
field boost protocols

23
00:00:50,000 --> 00:00:54,719
are now linked to the lan sometimes

24
00:00:52,800 --> 00:00:57,038
using devices that may be exposed on the

25
00:00:54,719 --> 00:00:58,800
internet

26
00:00:57,039 --> 00:01:00,640
from a security point of view well this

27
00:00:58,800 --> 00:01:02,959
is kind of a disaster

28
00:01:00,640 --> 00:01:03,840
as we connect fieldbus protocol to the

29
00:01:02,960 --> 00:01:05,519
outside world

30
00:01:03,840 --> 00:01:07,600
while they have clearly not been

31
00:01:05,519 --> 00:01:08,640
designed with cybersecurity concerns in

32
00:01:07,600 --> 00:01:11,119
mind

33
00:01:08,640 --> 00:01:13,200
as a result an attacker with network

34
00:01:11,119 --> 00:01:16,560
access to such systems

35
00:01:13,200 --> 00:01:18,560
may be able to interrupt or alter a

36
00:01:16,560 --> 00:01:21,840
facility's environment

37
00:01:18,560 --> 00:01:25,119
for instance one could turn on the heat

38
00:01:21,840 --> 00:01:27,680
or change the temperature thresholds

39
00:01:25,119 --> 00:01:29,680
in the data center or on the products

40
00:01:27,680 --> 00:01:31,119
and chains with specific temperature

41
00:01:29,680 --> 00:01:34,479
requirements

42
00:01:31,119 --> 00:01:37,119
and damage equipment or production or

43
00:01:34,479 --> 00:01:37,920
one could constantly trigger the fire

44
00:01:37,119 --> 00:01:40,400
alarm

45
00:01:37,920 --> 00:01:42,240
for no reason and the next time people

46
00:01:40,400 --> 00:01:45,040
would ear it they wouldn't believe

47
00:01:42,240 --> 00:01:46,880
anymore that there's a real threat

48
00:01:45,040 --> 00:01:48,159
or one could turn off the air

49
00:01:46,880 --> 00:01:50,960
conditioning

50
00:01:48,159 --> 00:01:52,159
in an office factory or over close place

51
00:01:50,960 --> 00:01:55,280
where people work

52
00:01:52,159 --> 00:01:58,159
or live degrading the air quality which

53
00:01:55,280 --> 00:02:00,320
may become really dangerous as you can

54
00:01:58,159 --> 00:02:02,960
see targeting building management system

55
00:02:00,320 --> 00:02:05,360
can have a physical impact on devices

56
00:02:02,960 --> 00:02:08,160
and on human safety

57
00:02:05,360 --> 00:02:09,919
so finally one can take advantage of

58
00:02:08,160 --> 00:02:11,920
exposed devices that are part

59
00:02:09,919 --> 00:02:13,519
of a building management system for

60
00:02:11,920 --> 00:02:15,920
further attacks

61
00:02:13,520 --> 00:02:16,800
by using vein to gain a foothold in a

62
00:02:15,920 --> 00:02:19,519
network

63
00:02:16,800 --> 00:02:21,599
or to move onto critical networks areas

64
00:02:19,520 --> 00:02:23,680
and systems

65
00:02:21,599 --> 00:02:24,799
well now that we know what we can do

66
00:02:23,680 --> 00:02:27,280
let's focus on

67
00:02:24,800 --> 00:02:29,840
one of these protocols and see how we

68
00:02:27,280 --> 00:02:29,840
can do it

69
00:02:30,800 --> 00:02:36,000
so let's talk about knx this is a common

70
00:02:33,760 --> 00:02:39,359
field boost protocol for bms for

71
00:02:36,000 --> 00:02:40,319
both industry and domestic use not the

72
00:02:39,360 --> 00:02:43,360
most common one

73
00:02:40,319 --> 00:02:47,119
as there is bacnet but still widely used

74
00:02:43,360 --> 00:02:49,040
especially in europe as you can see in

75
00:02:47,120 --> 00:02:51,599
this screenshot from shodan

76
00:02:49,040 --> 00:02:53,760
we can find a lot of devices exposing

77
00:02:51,599 --> 00:02:56,399
port 3671

78
00:02:53,760 --> 00:02:58,079
which is the port for knx net ip the

79
00:02:56,400 --> 00:03:01,360
protocol specification for

80
00:02:58,080 --> 00:03:01,360
knx over ip

81
00:03:02,239 --> 00:03:06,080
so knx net ip allows interfacing from

82
00:03:05,040 --> 00:03:09,440
lam to knx

83
00:03:06,080 --> 00:03:12,159
and vice versa as you can see in this

84
00:03:09,440 --> 00:03:14,560
typical example of network architecture

85
00:03:12,159 --> 00:03:17,040
from the knx specification

86
00:03:14,560 --> 00:03:17,680
it requires a gateway between the ip

87
00:03:17,040 --> 00:03:20,400
network

88
00:03:17,680 --> 00:03:21,680
and the fieldbus are referred to as a

89
00:03:20,400 --> 00:03:24,959
knxnet

90
00:03:21,680 --> 00:03:26,879
ip server in the standard

91
00:03:24,959 --> 00:03:28,959
typically when we want to send the

92
00:03:26,879 --> 00:03:30,640
configuration change to a device from

93
00:03:28,959 --> 00:03:33,360
the workstation

94
00:03:30,640 --> 00:03:34,640
a knx net ip frames will be sent to the

95
00:03:33,360 --> 00:03:37,760
server

96
00:03:34,640 --> 00:03:40,879
which translates it to a knx frame

97
00:03:37,760 --> 00:03:46,000
to transmit to targeted devices

98
00:03:40,879 --> 00:03:48,000
using your knx specific address topology

99
00:03:46,000 --> 00:03:50,400
the knx association provides a

100
00:03:48,000 --> 00:03:53,680
commercial software for configuration

101
00:03:50,400 --> 00:03:57,080
called the ets so i just show you

102
00:03:53,680 --> 00:04:00,239
uh an example and i use ets for

103
00:03:57,080 --> 00:04:03,280
visualization and also very nice

104
00:04:00,239 --> 00:04:06,239
tool called knx map to change the value

105
00:04:03,280 --> 00:04:10,159
of a group of objects

106
00:04:06,239 --> 00:04:14,239
so this is ets we can see on my

107
00:04:10,159 --> 00:04:17,440
knx project that

108
00:04:14,239 --> 00:04:18,320
i created a group object for alarm

109
00:04:17,440 --> 00:04:22,240
objects

110
00:04:18,320 --> 00:04:24,639
which i'll switch us uh micronx project

111
00:04:22,240 --> 00:04:26,400
is linked to a real test device

112
00:04:24,639 --> 00:04:28,080
that i will use for for this

113
00:04:26,400 --> 00:04:30,799
presentation but

114
00:04:28,080 --> 00:04:31,599
for responsible disclosure reason i

115
00:04:30,800 --> 00:04:34,400
won't tell

116
00:04:31,600 --> 00:04:34,400
which one it is

117
00:04:34,720 --> 00:04:42,400
so i run knx map under this device

118
00:04:39,280 --> 00:04:46,000
at this ip and i want to write

119
00:04:42,400 --> 00:04:50,560
to go to group address one one one so

120
00:04:46,000 --> 00:04:53,280
for my alarm objects the value one

121
00:04:50,560 --> 00:04:54,479
now the value has been changed to one

122
00:04:53,280 --> 00:04:58,000
hopefully all the

123
00:04:54,479 --> 00:04:59,199
alarms have been triggered you can see

124
00:04:58,000 --> 00:05:02,400
on wireshark that

125
00:04:59,199 --> 00:05:05,680
a lot of knxnet ip frames were exchanged

126
00:05:02,400 --> 00:05:06,719
for example this frame is a description

127
00:05:05,680 --> 00:05:09,919
request

128
00:05:06,720 --> 00:05:12,720
sent by knxmap to request the server to

129
00:05:09,919 --> 00:05:12,719
describe itself

130
00:05:13,120 --> 00:05:19,199
canik's net ip frames are usually sent

131
00:05:16,639 --> 00:05:20,560
over udp and the structure of frames is

132
00:05:19,199 --> 00:05:23,600
quite complex

133
00:05:20,560 --> 00:05:24,720
as a format order and the content of

134
00:05:23,600 --> 00:05:27,600
blocks

135
00:05:24,720 --> 00:05:29,600
and fields in the body change for each

136
00:05:27,600 --> 00:05:32,720
type of message that can be carried

137
00:05:29,600 --> 00:05:35,680
by a knx net ip frame and

138
00:05:32,720 --> 00:05:36,639
there are knx not ip specific frames

139
00:05:35,680 --> 00:05:40,639
especially for

140
00:05:36,639 --> 00:05:42,800
device discovery and knx nlp connection

141
00:05:40,639 --> 00:05:43,759
and configuration and other types of

142
00:05:42,800 --> 00:05:46,560
frames

143
00:05:43,759 --> 00:05:49,199
that embed raw knx frames to transmit

144
00:05:46,560 --> 00:05:49,199
the devices

145
00:05:51,759 --> 00:05:56,160
so here you may have noticed that i was

146
00:05:53,840 --> 00:06:00,080
able to change the value

147
00:05:56,160 --> 00:06:01,680
without authenticating in any way

148
00:06:00,080 --> 00:06:03,680
well there are a few things to say about

149
00:06:01,680 --> 00:06:06,319
canning cyber security

150
00:06:03,680 --> 00:06:08,800
the standard explicitly simply says that

151
00:06:06,319 --> 00:06:09,919
the security of knx relies on its slow

152
00:06:08,800 --> 00:06:13,280
exposure

153
00:06:09,919 --> 00:06:14,560
which is a bad idea considering knx net

154
00:06:13,280 --> 00:06:17,758
ip

155
00:06:14,560 --> 00:06:20,080
authentication is not mandatory there

156
00:06:17,759 --> 00:06:21,520
are extensions for knx net ip frame

157
00:06:20,080 --> 00:06:23,919
transport security that

158
00:06:21,520 --> 00:06:24,880
manufacturers are free to implement or

159
00:06:23,919 --> 00:06:28,000
not

160
00:06:24,880 --> 00:06:30,159
so cyber security just looks optional

161
00:06:28,000 --> 00:06:32,160
for instance my test device for the

162
00:06:30,160 --> 00:06:35,280
stock implements authentication

163
00:06:32,160 --> 00:06:36,800
but it's not enabled by default and

164
00:06:35,280 --> 00:06:38,638
apparently this is quite a command

165
00:06:36,800 --> 00:06:41,520
setting and uh

166
00:06:38,639 --> 00:06:43,280
it's this configuration does not seem to

167
00:06:41,520 --> 00:06:46,639
be changed

168
00:06:43,280 --> 00:06:49,840
so much so this means that knowing the

169
00:06:46,639 --> 00:06:53,599
ip address of a kinect and ip server

170
00:06:49,840 --> 00:06:54,479
we can directly send valid knx net ip

171
00:06:53,599 --> 00:06:58,159
frames

172
00:06:54,479 --> 00:07:01,280
to alter the connect and ip server

173
00:06:58,160 --> 00:07:04,479
and underlying sensors actuators

174
00:07:01,280 --> 00:07:07,359
and controllers behavior using automated

175
00:07:04,479 --> 00:07:10,080
tools such as knx map for instance

176
00:07:07,360 --> 00:07:10,080
please don't do it

177
00:07:11,360 --> 00:07:16,240
however doing this limits us to running

178
00:07:14,400 --> 00:07:18,719
legitimate knx commands

179
00:07:16,240 --> 00:07:19,599
and triggering legitimate functions on

180
00:07:18,720 --> 00:07:23,360
devices

181
00:07:19,599 --> 00:07:26,800
please don't do it but what if we send

182
00:07:23,360 --> 00:07:28,639
malicious frames to a knx net ip server

183
00:07:26,800 --> 00:07:30,720
we would then be able to trigger

184
00:07:28,639 --> 00:07:32,960
unexpected behavior

185
00:07:30,720 --> 00:07:35,039
gain a privilege access to a device and

186
00:07:32,960 --> 00:07:36,638
so on

187
00:07:35,039 --> 00:07:38,318
so there's a large number of known

188
00:07:36,639 --> 00:07:40,160
attacks and vulnerability

189
00:07:38,319 --> 00:07:43,520
vulnerability research projects

190
00:07:40,160 --> 00:07:46,080
targeting iot industrial and bms devices

191
00:07:43,520 --> 00:07:47,440
that rely on testing network protocol

192
00:07:46,080 --> 00:07:50,080
implementation

193
00:07:47,440 --> 00:07:51,280
often with fuzzing but i haven't found

194
00:07:50,080 --> 00:07:55,120
any targeting

195
00:07:51,280 --> 00:07:57,679
knx net ip i think this is because

196
00:07:55,120 --> 00:08:00,160
crafting frames that are valid enough

197
00:07:57,680 --> 00:08:01,199
not to be rejected by devices and

198
00:08:00,160 --> 00:08:04,160
invalid enough

199
00:08:01,199 --> 00:08:05,440
to cause unexpected behaviors is quite

200
00:08:04,160 --> 00:08:08,319
complex

201
00:08:05,440 --> 00:08:10,800
volcanic standard says it better it is

202
00:08:08,319 --> 00:08:11,680
quite unlikely that legitimate users of

203
00:08:10,800 --> 00:08:13,599
a network

204
00:08:11,680 --> 00:08:15,919
would have the mean to intercept the

205
00:08:13,599 --> 00:08:16,560
cipher and then tamper with the knx net

206
00:08:15,919 --> 00:08:18,639
ip

207
00:08:16,560 --> 00:08:20,160
without excessive study of the koenig

208
00:08:18,639 --> 00:08:26,319
specifications

209
00:08:20,160 --> 00:08:28,560
yeah indeed

210
00:08:26,319 --> 00:08:29,759
that's why we decided to write a python

211
00:08:28,560 --> 00:08:32,479
free library

212
00:08:29,759 --> 00:08:34,959
that does not necessarily require this

213
00:08:32,479 --> 00:08:38,080
excessive study of the knx specification

214
00:08:34,958 --> 00:08:41,679
to interact with knx net ip servers and

215
00:08:38,080 --> 00:08:45,040
underlying knx devices it's called buff

216
00:08:41,679 --> 00:08:45,920
for what opener framework and it can be

217
00:08:45,040 --> 00:08:48,240
used to craft

218
00:08:45,920 --> 00:08:49,680
alter and pass frames from supported

219
00:08:48,240 --> 00:08:52,839
protocol while sticking to the

220
00:08:49,680 --> 00:08:54,079
specification which is a very important

221
00:08:52,839 --> 00:08:56,320
part

222
00:08:54,080 --> 00:08:57,279
uh it's available on the orange cyber

223
00:08:56,320 --> 00:08:59,680
defense

224
00:08:57,279 --> 00:09:04,000
github page and you are free to use it

225
00:08:59,680 --> 00:09:04,000
carefully and to contribute if you want

226
00:09:04,399 --> 00:09:07,440
so how does this work we thought of

227
00:09:06,640 --> 00:09:10,640
three different

228
00:09:07,440 --> 00:09:13,600
use type of use depending

229
00:09:10,640 --> 00:09:14,319
on the user's level of knowledge about

230
00:09:13,600 --> 00:09:17,360
the protocol

231
00:09:14,320 --> 00:09:20,000
and the specifications first the

232
00:09:17,360 --> 00:09:22,640
basic usage which requires no knowledge

233
00:09:20,000 --> 00:09:25,920
about the protocol

234
00:09:22,640 --> 00:09:28,560
so you first need to import the module

235
00:09:25,920 --> 00:09:30,000
then call the discovery method with a

236
00:09:28,560 --> 00:09:33,040
knx server

237
00:09:30,000 --> 00:09:34,839
ip and then you get some information

238
00:09:33,040 --> 00:09:37,839
about the server with a user friendly

239
00:09:34,839 --> 00:09:37,839
formatting

240
00:09:38,399 --> 00:09:44,000
then then the intermediate usage

241
00:09:41,120 --> 00:09:46,320
requiring knowledge about the protocol

242
00:09:44,000 --> 00:09:48,640
but not about the specification for

243
00:09:46,320 --> 00:09:49,360
instance knowing what type of frames are

244
00:09:48,640 --> 00:09:51,519
exchanged

245
00:09:49,360 --> 00:09:52,959
but not necessarily the content of these

246
00:09:51,519 --> 00:09:55,519
frames

247
00:09:52,959 --> 00:09:57,040
so let's do the exact same requests as

248
00:09:55,519 --> 00:09:59,360
in the previous example

249
00:09:57,040 --> 00:10:01,439
but instead we clearly specify the

250
00:09:59,360 --> 00:10:04,959
different states we take

251
00:10:01,440 --> 00:10:06,720
first we connect to the server then we

252
00:10:04,959 --> 00:10:08,959
create a frame and specify

253
00:10:06,720 --> 00:10:12,160
the type of frame to send to the server

254
00:10:08,959 --> 00:10:14,560
which is a description request here

255
00:10:12,160 --> 00:10:16,880
if we print the object we will see some

256
00:10:14,560 --> 00:10:19,839
details about the structure

257
00:10:16,880 --> 00:10:21,200
we add some information in fields here

258
00:10:19,839 --> 00:10:24,320
the source ip address

259
00:10:21,200 --> 00:10:26,959
and port which is which are stored in

260
00:10:24,320 --> 00:10:28,800
the connection object

261
00:10:26,959 --> 00:10:30,239
then we send the frame and expect a

262
00:10:28,800 --> 00:10:33,680
response from the server

263
00:10:30,240 --> 00:10:36,079
here we go

264
00:10:33,680 --> 00:10:37,199
the response contains the description we

265
00:10:36,079 --> 00:10:39,439
asked for and

266
00:10:37,200 --> 00:10:42,079
we access we can access interesting

267
00:10:39,440 --> 00:10:44,399
fields directly

268
00:10:42,079 --> 00:10:45,439
actually this code is very close to the

269
00:10:44,399 --> 00:10:48,640
actual discovery

270
00:10:45,440 --> 00:10:49,440
function code as a higher level function

271
00:10:48,640 --> 00:10:53,839
in both

272
00:10:49,440 --> 00:10:53,839
are implemented using lower level ones

273
00:10:54,720 --> 00:10:58,320
and the last use case allows full

274
00:10:56,880 --> 00:10:59,920
control over frames

275
00:10:58,320 --> 00:11:01,600
and requires knowledge about the

276
00:10:59,920 --> 00:11:04,079
specification

277
00:11:01,600 --> 00:11:05,519
this is of course to me the most

278
00:11:04,079 --> 00:11:07,760
interesting part of both

279
00:11:05,519 --> 00:11:10,000
uh we'll talk more about it in the

280
00:11:07,760 --> 00:11:13,519
remainder of this presentation but

281
00:11:10,000 --> 00:11:13,519
here is a quick example

282
00:11:13,600 --> 00:11:17,519
so here we have another rewriting of the

283
00:11:15,920 --> 00:11:20,719
discovery function

284
00:11:17,519 --> 00:11:22,160
except that we really write it from

285
00:11:20,720 --> 00:11:25,040
scratch

286
00:11:22,160 --> 00:11:26,800
we can create and modify blocks and

287
00:11:25,040 --> 00:11:30,160
fields specifying their names

288
00:11:26,800 --> 00:11:31,920
length and content and then add it to

289
00:11:30,160 --> 00:11:34,319
the final frame

290
00:11:31,920 --> 00:11:35,599
we could also remove blocks and fill

291
00:11:34,320 --> 00:11:39,360
change their order

292
00:11:35,600 --> 00:11:39,360
lens content and so on

293
00:11:39,920 --> 00:11:45,360
now just to say a few things about the

294
00:11:41,600 --> 00:11:47,600
code when we receive or create a frame

295
00:11:45,360 --> 00:11:50,880
to send as a byte array every part of

296
00:11:47,600 --> 00:11:53,760
the frame is represented as objects

297
00:11:50,880 --> 00:11:56,639
frame objects embed block objects which

298
00:11:53,760 --> 00:11:59,920
are containers for other block objects

299
00:11:56,639 --> 00:12:03,360
defined by the kinect specification or

300
00:11:59,920 --> 00:12:06,479
directly containers for field objects

301
00:12:03,360 --> 00:12:07,440
or both field objects are the smallest

302
00:12:06,480 --> 00:12:11,120
part of the frame

303
00:12:07,440 --> 00:12:14,079
and they have a name to refer to them

304
00:12:11,120 --> 00:12:15,120
in the code in the scripts a size in

305
00:12:14,079 --> 00:12:19,519
number of bytes

306
00:12:15,120 --> 00:12:19,519
and a value as a byte array

307
00:12:20,560 --> 00:12:24,880
these classes are generic as we decided

308
00:12:22,959 --> 00:12:27,119
that both codes should not be bound to a

309
00:12:24,880 --> 00:12:29,839
protocol so that we can add more

310
00:12:27,120 --> 00:12:30,160
so protocol so protocol specific content

311
00:12:29,839 --> 00:12:32,639
is

312
00:12:30,160 --> 00:12:34,399
written to an external json file

313
00:12:32,639 --> 00:12:37,519
containing details about

314
00:12:34,399 --> 00:12:40,320
the existing frames block types

315
00:12:37,519 --> 00:12:40,880
with a predefined set of fields type

316
00:12:40,320 --> 00:12:45,839
codes

317
00:12:40,880 --> 00:12:45,839
etc as defined in the knx specifications

318
00:12:45,920 --> 00:12:50,959
objects in both are dynamically created

319
00:12:48,880 --> 00:12:52,079
and filled with attributes according to

320
00:12:50,959 --> 00:12:54,959
this file

321
00:12:52,079 --> 00:12:55,680
and for now the knx net ip json file

322
00:12:54,959 --> 00:12:58,959
includes

323
00:12:55,680 --> 00:12:59,920
some frame and identifiers however the

324
00:12:58,959 --> 00:13:03,279
specifications

325
00:12:59,920 --> 00:13:07,839
are really really big and complicated so

326
00:13:03,279 --> 00:13:07,839
there is still a lot of content to add

327
00:13:08,639 --> 00:13:13,200
so let's try to do the right operation

328
00:13:11,279 --> 00:13:13,600
we did in the beginning of this video

329
00:13:13,200 --> 00:13:16,880
with

330
00:13:13,600 --> 00:13:18,639
both to do so we need to establish a

331
00:13:16,880 --> 00:13:19,760
channeling connection to the group

332
00:13:18,639 --> 00:13:23,120
address

333
00:13:19,760 --> 00:13:23,120
and write the value

334
00:13:23,680 --> 00:13:28,239
here is the code to build the write

335
00:13:25,760 --> 00:13:31,680
request we define the predefined format

336
00:13:28,240 --> 00:13:34,800
of the frame and then fill in the fields

337
00:13:31,680 --> 00:13:37,279
with the appropriate values we then

338
00:13:34,800 --> 00:13:40,000
send the request and wait for the

339
00:13:37,279 --> 00:13:40,000
acknowledgement

340
00:13:42,959 --> 00:13:52,319
here this is it

341
00:13:49,360 --> 00:13:54,079
what we first wanted to do with both was

342
00:13:52,320 --> 00:13:58,240
to write a knx net ip

343
00:13:54,079 --> 00:14:01,279
frame further to tescanx netip servers

344
00:13:58,240 --> 00:14:03,680
to do so we used both to create and send

345
00:14:01,279 --> 00:14:05,680
invalid frames to a test server to

346
00:14:03,680 --> 00:14:07,120
trigger unexpected behaviors that we

347
00:14:05,680 --> 00:14:09,439
want to investigate

348
00:14:07,120 --> 00:14:12,320
to hopefully discover exploitable

349
00:14:09,440 --> 00:14:12,320
vulnerabilities

350
00:14:12,480 --> 00:14:18,399
so let's do it for this first try we

351
00:14:15,839 --> 00:14:21,360
focused on fuzzing one type of frame

352
00:14:18,399 --> 00:14:22,480
that carried that carries read and write

353
00:14:21,360 --> 00:14:25,360
orders

354
00:14:22,480 --> 00:14:28,079
interpreted or relayed by the knxnet ip

355
00:14:25,360 --> 00:14:30,000
server to the knx bus

356
00:14:28,079 --> 00:14:31,439
such orders are sent as medium

357
00:14:30,000 --> 00:14:34,000
independence kinex data

358
00:14:31,440 --> 00:14:34,560
embedded in some frames as a special

359
00:14:34,000 --> 00:14:37,680
block

360
00:14:34,560 --> 00:14:40,719
called kemi for a common external

361
00:14:37,680 --> 00:14:40,719
message interface

362
00:14:41,360 --> 00:14:44,880
the first step is the first step is to

363
00:14:43,519 --> 00:14:47,040
generate inputs

364
00:14:44,880 --> 00:14:49,519
following the format of a valid frame

365
00:14:47,040 --> 00:14:54,160
that includes a kemi block

366
00:14:49,519 --> 00:14:56,720
so our valid base frames looks like this

367
00:14:54,160 --> 00:14:58,560
which is to mutate only the chemic

368
00:14:56,720 --> 00:15:01,040
blocks fields in order to trigger

369
00:14:58,560 --> 00:15:03,359
unexpected behaviors

370
00:15:01,040 --> 00:15:06,240
as a kemi message is different for each

371
00:15:03,360 --> 00:15:10,079
type of order we decided to focus on

372
00:15:06,240 --> 00:15:12,000
property request messages and noted that

373
00:15:10,079 --> 00:15:14,560
we could have started damaging things if

374
00:15:12,000 --> 00:15:15,199
we chose to test the property write

375
00:15:14,560 --> 00:15:18,160
request

376
00:15:15,199 --> 00:15:18,160
message instead

377
00:15:18,639 --> 00:15:23,040
now for the mutation knx net ip server

378
00:15:22,720 --> 00:15:25,760
are

379
00:15:23,040 --> 00:15:27,199
very strict regarding the frames format

380
00:15:25,760 --> 00:15:29,439
and are very likely

381
00:15:27,199 --> 00:15:31,040
to reject any frame that does not match

382
00:15:29,440 --> 00:15:35,600
what they expect

383
00:15:31,040 --> 00:15:37,680
uh that's why when we mutate our frame

384
00:15:35,600 --> 00:15:38,880
our frame we need to closely stick to

385
00:15:37,680 --> 00:15:41,599
the format defined

386
00:15:38,880 --> 00:15:44,480
in defined in the specification to make

387
00:15:41,600 --> 00:15:47,120
sure that the server interprets it

388
00:15:44,480 --> 00:15:49,199
so to begin with we can mutate our frame

389
00:15:47,120 --> 00:15:51,759
by writing a random value

390
00:15:49,199 --> 00:15:52,880
to a single random field in the kemi

391
00:15:51,759 --> 00:15:55,360
block

392
00:15:52,880 --> 00:15:57,279
and later restrict the mutation to

393
00:15:55,360 --> 00:16:02,480
fields or values that triggered

394
00:15:57,279 --> 00:16:04,800
unexpected behaviors here we

395
00:16:02,480 --> 00:16:05,519
here we exclude the message code field

396
00:16:04,800 --> 00:16:08,079
because

397
00:16:05,519 --> 00:16:09,759
it has to be valid for the server to

398
00:16:08,079 --> 00:16:12,800
accept it

399
00:16:09,759 --> 00:16:14,560
so our mutation function starts from our

400
00:16:12,800 --> 00:16:17,120
valid frame

401
00:16:14,560 --> 00:16:17,599
randomly chooses a field from the kemi

402
00:16:17,120 --> 00:16:20,720
block

403
00:16:17,600 --> 00:16:21,040
except for the message code field and

404
00:16:20,720 --> 00:16:23,040
then

405
00:16:21,040 --> 00:16:25,920
write a random value to that field

406
00:16:23,040 --> 00:16:29,439
matching the field size

407
00:16:25,920 --> 00:16:37,360
we return the mutated frame switch back

408
00:16:29,440 --> 00:16:40,000
to the original frame and repeat

409
00:16:37,360 --> 00:16:41,839
each frame is sent to our target but for

410
00:16:40,000 --> 00:16:43,519
each one of them we need to follow a

411
00:16:41,839 --> 00:16:46,959
specific exchange sequence

412
00:16:43,519 --> 00:16:49,759
that you can see here with us connect

413
00:16:46,959 --> 00:16:50,638
send a configuration request wait for

414
00:16:49,759 --> 00:16:52,959
the acknowledgement

415
00:16:50,639 --> 00:16:54,880
and response and knowledge back and

416
00:16:52,959 --> 00:16:57,758
disconnect

417
00:16:54,880 --> 00:16:58,560
depending on how the server responds or

418
00:16:57,759 --> 00:17:00,240
not

419
00:16:58,560 --> 00:17:02,319
we will know if something unusual

420
00:17:00,240 --> 00:17:03,680
happened we may have one of these

421
00:17:02,320 --> 00:17:06,240
outcomes

422
00:17:03,680 --> 00:17:06,799
one everything worked fine the exchange

423
00:17:06,240 --> 00:17:10,000
occurred

424
00:17:06,799 --> 00:17:12,720
as expected two we received

425
00:17:10,000 --> 00:17:14,799
an act frame but with an error code

426
00:17:12,720 --> 00:17:17,439
meaning that the request was processed

427
00:17:14,799 --> 00:17:19,679
but with an error but an error was

428
00:17:17,439 --> 00:17:22,240
handled by the server

429
00:17:19,679 --> 00:17:24,319
three the server stops responding times

430
00:17:22,240 --> 00:17:27,120
out

431
00:17:24,319 --> 00:17:27,678
four the server ignores the frame as it

432
00:17:27,119 --> 00:17:30,639
is

433
00:17:27,679 --> 00:17:32,000
invalid but in our case we assume that

434
00:17:30,640 --> 00:17:34,160
our frame is valid

435
00:17:32,000 --> 00:17:37,039
and will not be rejected by the server

436
00:17:34,160 --> 00:17:39,840
so it would be an anomaly

437
00:17:37,039 --> 00:17:40,559
so we're interested in behaviors two and

438
00:17:39,840 --> 00:17:42,480
three

439
00:17:40,559 --> 00:17:43,600
so we want to store for further

440
00:17:42,480 --> 00:17:45,919
investigation

441
00:17:43,600 --> 00:17:46,719
frames that were processed but either

442
00:17:45,919 --> 00:17:49,200
triggered

443
00:17:46,720 --> 00:17:50,320
known errors on the server or even more

444
00:17:49,200 --> 00:17:53,919
interesting

445
00:17:50,320 --> 00:17:53,918
frames that crashed the server

446
00:17:58,320 --> 00:18:03,840
this is the final code i just code

447
00:18:01,520 --> 00:18:05,440
i just scrolled quickly through it so

448
00:18:03,840 --> 00:18:08,559
you can

449
00:18:05,440 --> 00:18:11,760
see but i you can also find it on both

450
00:18:08,559 --> 00:18:11,760
github repository

451
00:18:12,240 --> 00:18:15,440
so we can see that we have our mutation

452
00:18:14,559 --> 00:18:18,399
function

453
00:18:15,440 --> 00:18:20,480
the first function which will be which

454
00:18:18,400 --> 00:18:23,280
will reproduce the frame exchange and

455
00:18:20,480 --> 00:18:25,120
detect the different behaviors

456
00:18:23,280 --> 00:18:27,520
we store the details about the frame

457
00:18:25,120 --> 00:18:31,439
that triggered behavior in the file for

458
00:18:27,520 --> 00:18:31,440
further investigation of course

459
00:18:31,840 --> 00:18:37,840
so let's run it on my test divides and

460
00:18:34,480 --> 00:18:40,720
wait for something interesting to happen

461
00:18:37,840 --> 00:18:42,240
i just cheat a little and now we have a

462
00:18:40,720 --> 00:18:44,480
few results

463
00:18:42,240 --> 00:18:46,000
so i already ran it for quite a while

464
00:18:44,480 --> 00:18:49,600
and i currently

465
00:18:46,000 --> 00:18:52,080
have more than 30 frames to investigate

466
00:18:49,600 --> 00:18:53,760
unfortunately i thought i would have the

467
00:18:52,080 --> 00:18:56,080
time to start looking at them

468
00:18:53,760 --> 00:18:57,280
between the submission of the paper and

469
00:18:56,080 --> 00:19:00,480
this talk but

470
00:18:57,280 --> 00:19:01,678
i didn't so i guess that if i find

471
00:19:00,480 --> 00:19:04,240
something interesting

472
00:19:01,679 --> 00:19:06,240
i'll have to do another talk next year

473
00:19:04,240 --> 00:19:09,280
so see you then and

474
00:19:06,240 --> 00:19:12,720
thank you all for listening bye

475
00:19:09,280 --> 00:19:15,760
hi hi

476
00:19:12,720 --> 00:19:18,000
so i have a few questions from the irc

477
00:19:15,760 --> 00:19:19,520
first why would someone ever want to

478
00:19:18,000 --> 00:19:23,280
connect knx net

479
00:19:19,520 --> 00:19:23,280
to an ip network

480
00:19:23,520 --> 00:19:30,960
because of internet of things i guess um

481
00:19:27,280 --> 00:19:33,520
yeah people tend to want

482
00:19:30,960 --> 00:19:34,559
to connect these kind of things uh for

483
00:19:33,520 --> 00:19:37,840
for instance for

484
00:19:34,559 --> 00:19:40,240
all automation for to control from one

485
00:19:37,840 --> 00:19:43,760
central point uh

486
00:19:40,240 --> 00:19:46,000
uh uh the whole uh

487
00:19:43,760 --> 00:19:47,600
the whole building uh building uh

488
00:19:46,000 --> 00:19:51,120
features i'd like to say

489
00:19:47,600 --> 00:19:53,360
uh such as uh shutters so you

490
00:19:51,120 --> 00:19:54,719
you use your smartphone uh from one

491
00:19:53,360 --> 00:19:58,080
central location to

492
00:19:54,720 --> 00:20:01,280
just uh shut down everything

493
00:19:58,080 --> 00:20:04,399
or you just uh are in industries

494
00:20:01,280 --> 00:20:05,520
um they are used to control the power

495
00:20:04,400 --> 00:20:08,640
consumption

496
00:20:05,520 --> 00:20:11,918
for financial reasons for instance or

497
00:20:08,640 --> 00:20:14,880
for air quality measurements to uh

498
00:20:11,919 --> 00:20:16,000
trigger alerts to send automated

499
00:20:14,880 --> 00:20:19,120
messages and

500
00:20:16,000 --> 00:20:23,679
perform automated operations when

501
00:20:19,120 --> 00:20:23,678
when something is wrong also

502
00:20:24,320 --> 00:20:27,439
okay and where can those devices be

503
00:20:26,799 --> 00:20:30,559
found

504
00:20:27,440 --> 00:20:31,360
where they're used and how just just

505
00:20:30,559 --> 00:20:34,879
like i said

506
00:20:31,360 --> 00:20:38,080
in uh in uh for home automation so uh

507
00:20:34,880 --> 00:20:41,440
in uh for domestic use

508
00:20:38,080 --> 00:20:44,799
uh for industries in uh offices

509
00:20:41,440 --> 00:20:48,080
now uh in a lot of open spaces uh

510
00:20:44,799 --> 00:20:49,039
just lights are automated shutters are

511
00:20:48,080 --> 00:20:51,918
automated

512
00:20:49,039 --> 00:20:52,480
uh air conditioning is automated too and

513
00:20:51,919 --> 00:20:56,480
this is

514
00:20:52,480 --> 00:20:59,360
often knx or our bacnet

515
00:20:56,480 --> 00:21:00,400
which is which are used in in those

516
00:20:59,360 --> 00:21:01,840
cases

517
00:21:00,400 --> 00:21:03,600
so basically everywhere and it's

518
00:21:01,840 --> 00:21:04,470
connected to the internet that's nice to

519
00:21:03,600 --> 00:21:08,000
know

520
00:21:04,470 --> 00:21:10,960
[Laughter]

521
00:21:08,000 --> 00:21:12,799
another question the protocol the knx

522
00:21:10,960 --> 00:21:13,360
protocol has it been implemented in

523
00:21:12,799 --> 00:21:17,840
escape

524
00:21:13,360 --> 00:21:20,959
3k not yet

525
00:21:17,840 --> 00:21:22,158
this is uh something that uh would be a

526
00:21:20,960 --> 00:21:25,600
really cool thing to do

527
00:21:22,159 --> 00:21:28,000
so uh i don't know maybe uh

528
00:21:25,600 --> 00:21:29,439
maybe i start doing something when i

529
00:21:28,000 --> 00:21:32,880
have the time to do it

530
00:21:29,440 --> 00:21:35,840
so and uh of course if

531
00:21:32,880 --> 00:21:36,960
people are willing to to dive into knx

532
00:21:35,840 --> 00:21:40,639
uh this is not

533
00:21:36,960 --> 00:21:43,600
this is a really big problem

534
00:21:40,640 --> 00:21:44,080
i'd like to say but if someone wants to

535
00:21:43,600 --> 00:21:47,840
uh

536
00:21:44,080 --> 00:21:51,760
i think uh knx net iep in sk

537
00:21:47,840 --> 00:21:51,760
in skeptic would be a really good thing

538
00:21:52,080 --> 00:21:56,720
okay from them do you think that bof and

539
00:21:55,919 --> 00:21:59,840
exploitation

540
00:21:56,720 --> 00:21:59,840
is close

541
00:22:01,200 --> 00:22:08,640
yeah sorry

542
00:22:04,960 --> 00:22:11,280
i'm sorry is is what sorry right

543
00:22:08,640 --> 00:22:12,880
close to the exploitation how is easy to

544
00:22:11,280 --> 00:22:16,240
go from one to the other

545
00:22:12,880 --> 00:22:19,679
ah there's a lot of things left to do

546
00:22:16,240 --> 00:22:22,880
yeah um one can do the main

547
00:22:19,679 --> 00:22:26,799
thing but uh uh i think uh

548
00:22:22,880 --> 00:22:29,919
if uh it's it's uh now you can do the

549
00:22:26,799 --> 00:22:33,280
basic operation but if you want to go

550
00:22:29,919 --> 00:22:35,520
uh to do the the the whole

551
00:22:33,280 --> 00:22:36,320
um process of interaction with such

552
00:22:35,520 --> 00:22:39,280
devices

553
00:22:36,320 --> 00:22:39,280
there are still things to do

554
00:22:39,520 --> 00:22:46,799
okay did you think to attack physically

555
00:22:42,400 --> 00:22:46,799
the devices to have an easy feedback

556
00:22:46,880 --> 00:22:51,840
um yeah but

557
00:22:52,840 --> 00:22:59,360
that's well

558
00:22:55,280 --> 00:23:02,799
there are many things to do so uh

559
00:22:59,360 --> 00:23:04,879
so uh i i have to i have to do it next i

560
00:23:02,799 --> 00:23:09,120
think

561
00:23:04,880 --> 00:23:13,679
okay thank you i think that's welcome

562
00:23:09,120 --> 00:23:16,879
all no more questions is there

563
00:23:13,679 --> 00:23:20,720
no well thank you very much for tulk

564
00:23:16,880 --> 00:23:20,720
very interesting thank you

