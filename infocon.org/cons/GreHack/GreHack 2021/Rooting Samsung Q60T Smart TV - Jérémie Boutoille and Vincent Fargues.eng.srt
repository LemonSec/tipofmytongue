1
00:00:00,240 --> 00:00:02,720
okay hello everyone thanks to be there

2
00:00:02,720 --> 00:00:04,400
thanks for the students thanks people in

3
00:00:04,400 --> 00:00:07,440
the room speak people online so we'll

4
00:00:07,440 --> 00:00:09,280
start for the first session and we'll

5
00:00:09,280 --> 00:00:11,599
have two talk so the first one will be

6
00:00:11,599 --> 00:00:13,920
given by two speakers physically

7
00:00:13,920 --> 00:00:17,199
and i will talk about how to hack

8
00:00:17,199 --> 00:00:20,240
a tv a smart tv is it smart enough we'll

9
00:00:20,240 --> 00:00:22,880
see with the talk of the two speaker and

10
00:00:22,880 --> 00:00:26,080
after we'll have a second session with a

11
00:00:26,080 --> 00:00:28,320
remote talk because person cannot come

12
00:00:28,320 --> 00:00:29,199
here

13
00:00:29,199 --> 00:00:31,840
due to a coveted problem so

14
00:00:31,840 --> 00:00:33,520
we'll have the chance to have the two

15
00:00:33,520 --> 00:00:35,520
physical person who will give us the

16
00:00:35,520 --> 00:00:40,760
first talk so please the floor is yours

17
00:01:16,320 --> 00:01:20,360
and you can start to talk

18
00:01:32,000 --> 00:01:34,400
let's go

19
00:01:36,150 --> 00:01:38,079
[Laughter]

20
00:01:38,079 --> 00:01:39,280
okay so

21
00:01:39,280 --> 00:01:41,119
let's go for hot talk

22
00:01:41,119 --> 00:01:41,920
uh

23
00:01:41,920 --> 00:01:43,280
so we are

24
00:01:43,280 --> 00:01:44,640
personal

25
00:01:44,640 --> 00:01:45,920
from uh

26
00:01:45,920 --> 00:01:48,799
we are security researchers

27
00:01:48,799 --> 00:01:51,799
um

28
00:01:57,439 --> 00:02:00,159
we are almost 90 people and we are

29
00:02:00,159 --> 00:02:04,320
hiring so you can contact us if you want

30
00:02:04,320 --> 00:02:05,520
are you again

31
00:02:05,520 --> 00:02:07,360
okay

32
00:02:07,360 --> 00:02:09,440
is it working

33
00:02:09,440 --> 00:02:12,160
yeah okay

34
00:02:12,480 --> 00:02:15,040
okay um so today we are going to talk

35
00:02:15,040 --> 00:02:19,520
about the samsung q6t smart tv

36
00:02:19,520 --> 00:02:25,120
so it's a device connected to internet

37
00:02:25,360 --> 00:02:26,319
it has

38
00:02:26,319 --> 00:02:30,319
many network services sorry

39
00:02:31,360 --> 00:02:33,680
and it's based on tizen

40
00:02:33,680 --> 00:02:36,400
os so why did we look at this target

41
00:02:36,400 --> 00:02:37,519
because

42
00:02:37,519 --> 00:02:40,000
last year it was a pontron target

43
00:02:40,000 --> 00:02:43,360
with a 20 000 dollar reward

44
00:02:43,360 --> 00:02:45,200
it has been targeted multiple times at

45
00:02:45,200 --> 00:02:47,040
pontoon and

46
00:02:47,040 --> 00:02:48,800
when you want to

47
00:02:48,800 --> 00:02:51,200
search for vulnerabilities in this

48
00:02:51,200 --> 00:02:53,120
smart tv you have a problem which is

49
00:02:53,120 --> 00:02:56,080
that the firmware is encrypted and you

50
00:02:56,080 --> 00:02:58,879
cannot find any decrypted version on the

51
00:02:58,879 --> 00:03:01,120
internet so you have to find an entry

52
00:03:01,120 --> 00:03:04,000
point to start doing reverse engineering

53
00:03:04,000 --> 00:03:07,360
or vulnerability research

54
00:03:07,680 --> 00:03:08,480
so

55
00:03:08,480 --> 00:03:10,879
the us is tizen it's an open source

56
00:03:10,879 --> 00:03:12,879
multi-platform operating system but on

57
00:03:12,879 --> 00:03:14,239
linux

58
00:03:14,239 --> 00:03:16,959
it's maintained by samsung it's used on

59
00:03:16,959 --> 00:03:20,319
smartphones smart tv watches and you can

60
00:03:20,319 --> 00:03:22,959
find three types of application

61
00:03:22,959 --> 00:03:25,120
you have web application a dotnet

62
00:03:25,120 --> 00:03:27,360
application or native application

63
00:03:27,360 --> 00:03:28,560
and of course

64
00:03:28,560 --> 00:03:31,440
it uses a web browser which will be our

65
00:03:31,440 --> 00:03:33,840
entry point

66
00:03:34,560 --> 00:03:35,519
so

67
00:03:35,519 --> 00:03:37,519
the attack plan and the

68
00:03:37,519 --> 00:03:40,319
summary of our talk we will start with

69
00:03:40,319 --> 00:03:42,319
the web browser which is the entry point

70
00:03:42,319 --> 00:03:44,239
to get a shell on the device

71
00:03:44,239 --> 00:03:46,560
then we will have a privilege escalation

72
00:03:46,560 --> 00:03:47,680
uh

73
00:03:47,680 --> 00:03:49,680
by auditing some source open source code

74
00:03:49,680 --> 00:03:51,760
and uh exploiting the

75
00:03:51,760 --> 00:03:52,959
the kernel

76
00:03:52,959 --> 00:03:55,920
and last we will uh find the

77
00:03:55,920 --> 00:03:58,720
the firmware encryption key

78
00:03:58,720 --> 00:04:00,400
in order to be able to decrypt the

79
00:04:00,400 --> 00:04:02,480
firmware offline

80
00:04:02,480 --> 00:04:05,840
so jeremy will uh start by

81
00:04:05,840 --> 00:04:07,439
explaining how we explore the web

82
00:04:07,439 --> 00:04:09,840
browser

83
00:04:11,760 --> 00:04:13,040
thank you vance

84
00:04:13,040 --> 00:04:15,760
so has said the

85
00:04:15,760 --> 00:04:18,478
our entry point is a web browser so

86
00:04:18,478 --> 00:04:20,959
depending on the tv model

87
00:04:20,959 --> 00:04:22,800
the web browser could be based on

88
00:04:22,800 --> 00:04:25,199
chromium or webkits

89
00:04:25,199 --> 00:04:27,680
so in our case this is a chromium-based

90
00:04:27,680 --> 00:04:28,800
browser

91
00:04:28,800 --> 00:04:31,759
the source code is available online on

92
00:04:31,759 --> 00:04:32,560
the

93
00:04:32,560 --> 00:04:34,880
on this git repository so you have all

94
00:04:34,880 --> 00:04:38,240
the patches which samsung has

95
00:04:38,240 --> 00:04:40,160
added to the browser and this is based

96
00:04:40,160 --> 00:04:43,120
on an old version so it means that

97
00:04:43,120 --> 00:04:45,680
security patches might be must be a back

98
00:04:45,680 --> 00:04:48,240
port by samsung manually so this is not

99
00:04:48,240 --> 00:04:49,759
an easy process

100
00:04:49,759 --> 00:04:51,360
maintenance

101
00:04:51,360 --> 00:04:54,240
must be very attentive and quick and

102
00:04:54,240 --> 00:04:56,400
some commits are not marked as security

103
00:04:56,400 --> 00:05:00,320
fixes so you you must be uh

104
00:05:00,320 --> 00:05:01,039
you

105
00:05:01,039 --> 00:05:03,440
it's uh there is a lot of vulnerability

106
00:05:03,440 --> 00:05:05,520
that is not not

107
00:05:05,520 --> 00:05:08,400
patched by samsung so we form we found

108
00:05:08,400 --> 00:05:11,039
one vulnerability which is not a

109
00:05:11,039 --> 00:05:12,720
back part by samsung

110
00:05:12,720 --> 00:05:15,039
and unfortunately it's not a valid entry

111
00:05:15,039 --> 00:05:16,960
for point one because this is

112
00:05:16,960 --> 00:05:18,479
an already known

113
00:05:18,479 --> 00:05:20,560
vulnerability but this is still

114
00:05:20,560 --> 00:05:22,080
interesting for debugging purpose

115
00:05:22,080 --> 00:05:22,960
because

116
00:05:22,960 --> 00:05:26,080
we can have a shell on the tv and do do

117
00:05:26,080 --> 00:05:28,400
what we want

118
00:05:28,400 --> 00:05:30,560
so

119
00:05:30,560 --> 00:05:33,039
the vulnerability that we found is on

120
00:05:33,039 --> 00:05:34,080
the

121
00:05:34,080 --> 00:05:37,120
javascript engine and on the jit

122
00:05:37,120 --> 00:05:39,840
compiler so

123
00:05:39,840 --> 00:05:42,400
the v8 is the javascript engine of

124
00:05:42,400 --> 00:05:45,520
chromium and javascript engine is made

125
00:05:45,520 --> 00:05:47,520
of multiple components such as the

126
00:05:47,520 --> 00:05:50,080
parser which takes the javascript and

127
00:05:50,080 --> 00:05:52,880
parse it you have the interpreter which

128
00:05:52,880 --> 00:05:56,000
compile and execute to pass javascript

129
00:05:56,000 --> 00:05:59,280
into virtual machine code so every

130
00:05:59,280 --> 00:06:02,160
javascript engine has its own

131
00:06:02,160 --> 00:06:03,520
virtual machine

132
00:06:03,520 --> 00:06:06,080
and you have the drive compiler which

133
00:06:06,080 --> 00:06:07,840
takes

134
00:06:07,840 --> 00:06:10,479
the virtual machine code and compiles it

135
00:06:10,479 --> 00:06:11,280
in

136
00:06:11,280 --> 00:06:13,759
native instructions

137
00:06:13,759 --> 00:06:17,280
so in x86 or arm depending on the

138
00:06:17,280 --> 00:06:18,479
platform

139
00:06:18,479 --> 00:06:22,160
of the in which the browser is executed

140
00:06:22,160 --> 00:06:23,600
so

141
00:06:23,600 --> 00:06:25,759
while the jit compiler is compiling it

142
00:06:25,759 --> 00:06:27,840
tries to do optimization

143
00:06:27,840 --> 00:06:29,759
based on assumption

144
00:06:29,759 --> 00:06:33,199
such as the range of variable the types

145
00:06:33,199 --> 00:06:34,639
and so on

146
00:06:34,639 --> 00:06:36,160
so here

147
00:06:36,160 --> 00:06:38,880
you have the interpreter which

148
00:06:38,880 --> 00:06:41,680
takes the javascript and execute execute

149
00:06:41,680 --> 00:06:44,720
it so the compilation is very fast but

150
00:06:44,720 --> 00:06:47,360
the code execution is pretty slow

151
00:06:47,360 --> 00:06:50,639
but and when the code is a function is

152
00:06:50,639 --> 00:06:53,440
executed executed a lot of time

153
00:06:53,440 --> 00:06:56,240
the git com compiler takes it and

154
00:06:56,240 --> 00:06:58,080
compile it in native instructions so

155
00:06:58,080 --> 00:07:01,360
here just the compilation is

156
00:07:01,360 --> 00:07:03,599
pretty slow but the exact code execution

157
00:07:03,599 --> 00:07:06,160
is is a more fast

158
00:07:06,160 --> 00:07:07,199
and

159
00:07:07,199 --> 00:07:09,759
when there is a problem in the gta code

160
00:07:09,759 --> 00:07:13,680
on assumption for example the the jit

161
00:07:13,680 --> 00:07:17,840
bailout on the the interpreter

162
00:07:18,160 --> 00:07:19,280
so the

163
00:07:19,280 --> 00:07:22,319
vulnerability we exploited is

164
00:07:22,319 --> 00:07:24,319
a cv from 2020

165
00:07:24,319 --> 00:07:26,800
which has not been backpacked by samsung

166
00:07:26,800 --> 00:07:30,319
and it's a bypass of an older ceo from

167
00:07:30,319 --> 00:07:33,039
2019

168
00:07:33,680 --> 00:07:37,599
this is a type influence problem in

169
00:07:37,599 --> 00:07:38,880
in the manner

170
00:07:38,880 --> 00:07:39,840
of

171
00:07:39,840 --> 00:07:41,599
v8 under

172
00:07:41,599 --> 00:07:44,879
javascript loops and in the chromium

173
00:07:44,879 --> 00:07:47,680
issue you have a proof of concept so we

174
00:07:47,680 --> 00:07:51,440
just have to understand what's going on

175
00:07:51,440 --> 00:07:54,000
so this is a smaller snippet of code a

176
00:07:54,000 --> 00:07:56,400
javascript code

177
00:07:56,400 --> 00:07:59,680
so here in this kind of loop va tries to

178
00:07:59,680 --> 00:08:02,400
determine the range of the the key

179
00:08:02,400 --> 00:08:03,599
variable

180
00:08:03,599 --> 00:08:04,960
so here

181
00:08:04,960 --> 00:08:07,919
um start range is from zero to zero

182
00:08:07,919 --> 00:08:10,000
because it's only zero in the increment

183
00:08:10,000 --> 00:08:12,240
range is only one so the key range is

184
00:08:12,240 --> 00:08:16,240
pretty simple it's from 0 to 99

185
00:08:16,560 --> 00:08:19,680
but there is a more complicated cases

186
00:08:19,680 --> 00:08:21,840
like this one

187
00:08:21,840 --> 00:08:23,919
where the start is

188
00:08:23,919 --> 00:08:26,800
plus infinity and increment is minus

189
00:08:26,800 --> 00:08:29,440
infinity so here in this case the k

190
00:08:29,440 --> 00:08:31,680
range could be

191
00:08:31,680 --> 00:08:34,479
plus infinity or not a number because at

192
00:08:34,479 --> 00:08:37,360
the first iteration key becomes plus

193
00:08:37,360 --> 00:08:40,719
infinity but as a second iteration

194
00:08:40,719 --> 00:08:42,399
we had

195
00:08:42,399 --> 00:08:44,720
minus infinity to plus infinity and in

196
00:08:44,720 --> 00:08:48,720
javascript it gives not a number

197
00:08:49,279 --> 00:08:50,000
so

198
00:08:50,000 --> 00:08:54,480
v8 tries to determine

199
00:08:54,480 --> 00:08:57,360
those cases where adding or subtracting

200
00:08:57,360 --> 00:09:00,399
start and increment gives not a number

201
00:09:00,399 --> 00:09:01,440
so

202
00:09:01,440 --> 00:09:02,800
the

203
00:09:02,800 --> 00:09:05,279
condition to determine this range

204
00:09:05,279 --> 00:09:07,839
is to it's

205
00:09:07,839 --> 00:09:10,240
to determine if it could give not a

206
00:09:10,240 --> 00:09:13,040
number it's a start and increment must

207
00:09:13,040 --> 00:09:15,360
be integer so this is a check

208
00:09:15,360 --> 00:09:18,000
here both types are integer

209
00:09:18,000 --> 00:09:20,959
and it includes plus in plus infinity

210
00:09:20,959 --> 00:09:22,720
and minus infinity

211
00:09:22,720 --> 00:09:23,519
and

212
00:09:23,519 --> 00:09:26,720
if both types are integer

213
00:09:26,720 --> 00:09:28,880
based on the arithmetic operation which

214
00:09:28,880 --> 00:09:31,360
is done on the loop

215
00:09:31,360 --> 00:09:34,080
it takes a it's called numhad a number

216
00:09:34,080 --> 00:09:35,200
subtract

217
00:09:35,200 --> 00:09:36,480
and

218
00:09:36,480 --> 00:09:38,959
check if the resultant tip could be not

219
00:09:38,959 --> 00:09:41,120
number and if

220
00:09:41,120 --> 00:09:44,080
both types are not integer and

221
00:09:44,080 --> 00:09:46,399
or it could give a not a number the

222
00:09:46,399 --> 00:09:48,560
optimization is not done and

223
00:09:48,560 --> 00:09:51,120
there is no optimization

224
00:09:51,120 --> 00:09:53,120
but

225
00:09:53,120 --> 00:09:54,880
from this we can

226
00:09:54,880 --> 00:09:57,120
find

227
00:09:57,279 --> 00:09:59,360
there is still a way to produce not a

228
00:09:59,360 --> 00:10:00,240
number

229
00:10:00,240 --> 00:10:01,440
despite

230
00:10:01,440 --> 00:10:04,959
maybe none maybe files so here

231
00:10:04,959 --> 00:10:06,560
an example

232
00:10:06,560 --> 00:10:09,839
start range here is zero

233
00:10:09,839 --> 00:10:12,000
the increment range is minus infinity to

234
00:10:12,000 --> 00:10:14,560
plus infinity because at the middle of

235
00:10:14,560 --> 00:10:16,839
the loop increment

236
00:10:16,839 --> 00:10:20,800
change so both types integer is true

237
00:10:20,800 --> 00:10:23,200
because the integer

238
00:10:23,200 --> 00:10:24,480
range

239
00:10:24,480 --> 00:10:26,320
contains the

240
00:10:26,320 --> 00:10:27,600
infinity

241
00:10:27,600 --> 00:10:29,440
negative or positive

242
00:10:29,440 --> 00:10:32,320
and the number had the function doesn't

243
00:10:32,320 --> 00:10:34,000
determine that the range could be not a

244
00:10:34,000 --> 00:10:34,959
number

245
00:10:34,959 --> 00:10:37,040
so

246
00:10:37,040 --> 00:10:39,279
we have maybe none which is

247
00:10:39,279 --> 00:10:41,760
which state to fall so the optimization

248
00:10:41,760 --> 00:10:45,200
continue in this case and

249
00:10:45,200 --> 00:10:48,160
when the optimization continues uh va

250
00:10:48,160 --> 00:10:51,040
determines that key range could be

251
00:10:51,040 --> 00:10:54,079
any integer here because the increments

252
00:10:54,079 --> 00:10:56,320
could be positive or negative which is

253
00:10:56,320 --> 00:10:58,079
this is what is

254
00:10:58,079 --> 00:11:00,399
explained here so

255
00:11:00,399 --> 00:11:02,560
but it doesn't include not a number so

256
00:11:02,560 --> 00:11:04,320
we have a

257
00:11:04,320 --> 00:11:06,480
we are able to produce

258
00:11:06,480 --> 00:11:10,079
a key variable that the eight thinks uh

259
00:11:10,079 --> 00:11:12,399
round is an integer so

260
00:11:12,399 --> 00:11:14,720
from minus infinity to plus infinity but

261
00:11:14,720 --> 00:11:18,240
that could be also not a number

262
00:11:18,240 --> 00:11:19,760
so from this

263
00:11:19,760 --> 00:11:21,440
uh we take

264
00:11:21,440 --> 00:11:25,839
our major variable and we are doing some

265
00:11:26,240 --> 00:11:30,240
arithmetic operation and at the end we

266
00:11:30,240 --> 00:11:33,680
we have a value here that v8 thinks it

267
00:11:33,680 --> 00:11:38,240
could only be 10 but it could be also

268
00:11:38,240 --> 00:11:40,160
not number five an internal

269
00:11:40,160 --> 00:11:42,560
representation of that number which is

270
00:11:42,560 --> 00:11:45,279
in fact a big value

271
00:11:45,279 --> 00:11:46,399
so

272
00:11:46,399 --> 00:11:48,959
from this magic value

273
00:11:48,959 --> 00:11:52,079
we are going to create an array with

274
00:11:52,079 --> 00:11:53,279
this

275
00:11:53,279 --> 00:11:54,320
this code

276
00:11:54,320 --> 00:11:55,680
and

277
00:11:55,680 --> 00:11:56,880
while

278
00:11:56,880 --> 00:11:57,600
and

279
00:11:57,600 --> 00:12:00,800
va tries to optimize this call with the

280
00:12:00,800 --> 00:12:02,160
following code

281
00:12:02,160 --> 00:12:04,560
so here

282
00:12:04,560 --> 00:12:06,240
we see that if

283
00:12:06,240 --> 00:12:07,200
length

284
00:12:07,200 --> 00:12:09,279
it's a small integer

285
00:12:09,279 --> 00:12:11,120
it's

286
00:12:11,120 --> 00:12:14,320
a positive number and it's less than 16

287
00:12:14,320 --> 00:12:17,760
and in fact minus the mean value and the

288
00:12:17,760 --> 00:12:20,079
mag value are the same so it's a

289
00:12:20,079 --> 00:12:21,600
constant

290
00:12:21,600 --> 00:12:23,760
it creates it calls this function which

291
00:12:23,760 --> 00:12:25,519
creates an array

292
00:12:25,519 --> 00:12:27,839
from here it takes the capacity of the

293
00:12:27,839 --> 00:12:30,240
array which is a

294
00:12:30,240 --> 00:12:33,200
fixed value based on the length but the

295
00:12:33,200 --> 00:12:34,639
length

296
00:12:34,639 --> 00:12:37,200
still comes from the magic value which

297
00:12:37,200 --> 00:12:40,720
is very big so we can have a very big

298
00:12:40,720 --> 00:12:44,880
an array with a fixed capacity of 10

299
00:12:44,959 --> 00:12:47,360
which with a fixed capacion of 10 but

300
00:12:47,360 --> 00:12:49,839
the length it's not a number so it is a

301
00:12:49,839 --> 00:12:52,079
big value

302
00:12:52,079 --> 00:12:54,560
so here we have the the code that

303
00:12:54,560 --> 00:12:57,279
triggers it so we have the function here

304
00:12:57,279 --> 00:12:59,920
which we call which we call it a

305
00:12:59,920 --> 00:13:02,720
very high number of time so it gets

306
00:13:02,720 --> 00:13:05,680
optimized optimized by v8

307
00:13:05,680 --> 00:13:08,320
and at the end we returns

308
00:13:08,320 --> 00:13:11,040
an array which is a very big so here we

309
00:13:11,040 --> 00:13:14,000
have our array with a fixed capacity of

310
00:13:14,000 --> 00:13:18,720
10 but the length here is very very big

311
00:13:18,720 --> 00:13:20,560
so from this

312
00:13:20,560 --> 00:13:23,519
uh we modify the trigger function that

313
00:13:23,519 --> 00:13:25,120
i presented just

314
00:13:25,120 --> 00:13:26,320
just before

315
00:13:26,320 --> 00:13:28,480
and we create two arrays so we have the

316
00:13:28,480 --> 00:13:30,639
big one the big array and we have the

317
00:13:30,639 --> 00:13:32,560
victim array which is placed right after

318
00:13:32,560 --> 00:13:33,680
in memory

319
00:13:33,680 --> 00:13:34,959
and

320
00:13:34,959 --> 00:13:37,519
with big array we are going to modify

321
00:13:37,519 --> 00:13:39,040
the victim array

322
00:13:39,040 --> 00:13:40,160
to craft

323
00:13:40,160 --> 00:13:42,720
two primitives that are the basic

324
00:13:42,720 --> 00:13:44,320
primitive for any red browser

325
00:13:44,320 --> 00:13:46,839
expectation in digit

326
00:13:46,839 --> 00:13:49,120
and all right

327
00:13:49,120 --> 00:13:52,800
so the first primitive is aderov which

328
00:13:52,800 --> 00:13:54,880
given an object returns

329
00:13:54,880 --> 00:13:57,120
his address in memory so here we have

330
00:13:57,120 --> 00:14:00,240
the victim array which

331
00:14:00,560 --> 00:14:03,360
which in which we store the the object

332
00:14:03,360 --> 00:14:06,639
and from this in with the heavy array we

333
00:14:06,639 --> 00:14:08,480
are going to read the data of the victim

334
00:14:08,480 --> 00:14:11,760
one and the fakers it's given an address

335
00:14:11,760 --> 00:14:13,120
written an object so this is the

336
00:14:13,120 --> 00:14:15,199
opposite of the first function

337
00:14:15,199 --> 00:14:16,560
with a

338
00:14:16,560 --> 00:14:18,399
mod which

339
00:14:18,399 --> 00:14:20,720
use the evil array to modify the victim

340
00:14:20,720 --> 00:14:23,120
one and then we use the victim1 to

341
00:14:23,120 --> 00:14:26,000
create an object

342
00:14:26,320 --> 00:14:29,519
so from this we can craft any object

343
00:14:29,519 --> 00:14:32,880
that we want so here basically we craft

344
00:14:32,880 --> 00:14:34,720
an array buffer object

345
00:14:34,720 --> 00:14:36,880
and it's allowing us to write to read

346
00:14:36,880 --> 00:14:39,440
and write arbitrary addresses so from

347
00:14:39,440 --> 00:14:40,399
this

348
00:14:40,399 --> 00:14:43,600
we are we modify the

349
00:14:43,600 --> 00:14:44,399
the

350
00:14:44,399 --> 00:14:46,160
detailed code of the webassembly

351
00:14:46,160 --> 00:14:49,680
function because gta web assembly is

352
00:14:49,680 --> 00:14:52,240
stored in within a real write and

353
00:14:52,240 --> 00:14:54,399
executable memory area

354
00:14:54,399 --> 00:14:56,560
we just have to put our shell code here

355
00:14:56,560 --> 00:14:59,519
and then we get a

356
00:14:59,519 --> 00:15:02,160
shell on the on the tv so here we can

357
00:15:02,160 --> 00:15:04,560
see that we are not roots we have we are

358
00:15:04,560 --> 00:15:07,360
owner here we have the groups which are

359
00:15:07,360 --> 00:15:09,839
uh corresponding to the privilege of the

360
00:15:09,839 --> 00:15:12,399
web browser and we here we have the

361
00:15:12,399 --> 00:15:13,839
context

362
00:15:13,839 --> 00:15:16,800
that eventsong are going to talk about

363
00:15:16,800 --> 00:15:18,720
so we got a shell within the browser

364
00:15:18,720 --> 00:15:20,000
context

365
00:15:20,000 --> 00:15:22,079
and from this we're going to escalate

366
00:15:22,079 --> 00:15:23,680
our privilege

367
00:15:23,680 --> 00:15:26,680
and

368
00:15:28,560 --> 00:15:30,880
thank you

369
00:15:31,120 --> 00:15:33,600
um so when we

370
00:15:33,600 --> 00:15:36,480
so from now uh why we want to escalate

371
00:15:36,480 --> 00:15:38,480
our privileges um

372
00:15:38,480 --> 00:15:40,399
because we want to

373
00:15:40,399 --> 00:15:42,800
search vulnerabilities in other services

374
00:15:42,800 --> 00:15:44,079
on the browser

375
00:15:44,079 --> 00:15:46,399
so to do that it's pretty convenient to

376
00:15:46,399 --> 00:15:48,160
get a

377
00:15:48,160 --> 00:15:49,440
root

378
00:15:49,440 --> 00:15:51,680
shell on the device and to be able to

379
00:15:51,680 --> 00:15:52,959
launch a

380
00:15:52,959 --> 00:15:56,639
debugger like gdb on any binary so when

381
00:15:56,639 --> 00:15:58,959
we try to to exploit the vulnerability

382
00:15:58,959 --> 00:15:59,839
you get

383
00:15:59,839 --> 00:16:02,079
everything you need to to understand

384
00:16:02,079 --> 00:16:04,399
what is going on

385
00:16:04,399 --> 00:16:06,880
so first of all to get a privilege

386
00:16:06,880 --> 00:16:08,720
escalation we need to understand what

387
00:16:08,720 --> 00:16:11,680
are the mitigation on the device

388
00:16:11,680 --> 00:16:14,240
there's something called uop which is an

389
00:16:14,240 --> 00:16:16,399
authorized execution prevention

390
00:16:16,399 --> 00:16:17,440
and

391
00:16:17,440 --> 00:16:20,160
it's a protection that

392
00:16:20,160 --> 00:16:23,120
verifies that all the binaries

393
00:16:23,120 --> 00:16:25,680
that are run on the device are signed by

394
00:16:25,680 --> 00:16:27,120
a samsung

395
00:16:27,120 --> 00:16:30,320
it's an rsr signature verification and

396
00:16:30,320 --> 00:16:32,079
it's enforced by the kernel so it's

397
00:16:32,079 --> 00:16:33,839
performed

398
00:16:33,839 --> 00:16:36,959
any time you try to execute some code so

399
00:16:36,959 --> 00:16:39,839
when you perform exec v a system call or

400
00:16:39,839 --> 00:16:41,279
when you try to

401
00:16:41,279 --> 00:16:43,440
to load a

402
00:16:43,440 --> 00:16:45,600
library or

403
00:16:45,600 --> 00:16:49,279
all this stuff is checked by the kernel

404
00:16:49,279 --> 00:16:52,160
and then you have smack which stands for

405
00:16:52,160 --> 00:16:54,399
simplified mandatory access control in

406
00:16:54,399 --> 00:16:58,399
the kernel um it's

407
00:16:58,399 --> 00:17:00,240
like so linux you have a context you

408
00:17:00,240 --> 00:17:02,720
have context transition and every

409
00:17:02,720 --> 00:17:04,640
application on the

410
00:17:04,640 --> 00:17:07,039
on the device are the contacts so in our

411
00:17:07,039 --> 00:17:08,970
case you can see

412
00:17:08,970 --> 00:17:10,400
[Music]

413
00:17:10,400 --> 00:17:13,439
you can see the the context it's the

414
00:17:13,439 --> 00:17:17,319
tizen browser here

415
00:17:18,000 --> 00:17:19,199
um

416
00:17:19,199 --> 00:17:20,319
so

417
00:17:20,319 --> 00:17:22,000
next we will uh be looking for

418
00:17:22,000 --> 00:17:25,599
vulnerabilities in the kernel so

419
00:17:25,599 --> 00:17:26,640
when you

420
00:17:26,640 --> 00:17:29,840
use a open source code on your product

421
00:17:29,840 --> 00:17:32,799
you have to to make the the source code

422
00:17:32,799 --> 00:17:34,480
available on your website so you can

423
00:17:34,480 --> 00:17:36,960
download the samsung kernel on on the

424
00:17:36,960 --> 00:17:39,200
website you can find the address

425
00:17:39,200 --> 00:17:42,320
in the references um so what we get is

426
00:17:42,320 --> 00:17:43,039
uh

427
00:17:43,039 --> 00:17:45,200
the kernel source code many drivers as

428
00:17:45,200 --> 00:17:47,760
well and some services that run on the

429
00:17:47,760 --> 00:17:51,440
tv that use the open source software

430
00:17:51,440 --> 00:17:53,840
so you we will be able to

431
00:17:53,840 --> 00:17:56,640
to read the driver source code and to

432
00:17:56,640 --> 00:17:58,960
understand better the samsung custom

433
00:17:58,960 --> 00:18:02,400
protection added to the kernel

434
00:18:03,360 --> 00:18:05,919
so after digging in the kernel source

435
00:18:05,919 --> 00:18:08,400
code we quickly found this driver which

436
00:18:08,400 --> 00:18:10,240
is called sdpmam

437
00:18:10,240 --> 00:18:11,120
so

438
00:18:11,120 --> 00:18:12,799
this driver is accessible from the

439
00:18:12,799 --> 00:18:15,120
browser context and

440
00:18:15,120 --> 00:18:18,400
it defines a three file operation as you

441
00:18:18,400 --> 00:18:19,840
can see you can

442
00:18:19,840 --> 00:18:24,160
perform open release and map

443
00:18:24,160 --> 00:18:28,000
so when we saw this map

444
00:18:28,000 --> 00:18:31,840
function we saw it's pretty interesting

445
00:18:31,840 --> 00:18:32,960
so

446
00:18:32,960 --> 00:18:34,799
then we go straight to the vulnerability

447
00:18:34,799 --> 00:18:37,360
description which is it is in this

448
00:18:37,360 --> 00:18:39,600
function and

449
00:18:39,600 --> 00:18:41,280
in fact it's uh

450
00:18:41,280 --> 00:18:43,840
simply allows to map any physical

451
00:18:43,840 --> 00:18:46,480
address on the device

452
00:18:46,480 --> 00:18:49,520
and to get a full read write on all the

453
00:18:49,520 --> 00:18:51,760
kernel code and data section

454
00:18:51,760 --> 00:18:54,320
so there isn't any check and

455
00:18:54,320 --> 00:18:57,280
everything is mapped as a readable and

456
00:18:57,280 --> 00:18:59,840
writable

457
00:19:01,760 --> 00:19:04,480
and we talked before about access

458
00:19:04,480 --> 00:19:05,840
control

459
00:19:05,840 --> 00:19:08,080
but as you can see here

460
00:19:08,080 --> 00:19:10,400
the smart context of

461
00:19:10,400 --> 00:19:11,280
this

462
00:19:11,280 --> 00:19:14,880
driver is a star and when you look at

463
00:19:14,880 --> 00:19:17,760
the documentation of smack

464
00:19:17,760 --> 00:19:20,400
in the kernel documentation you can see

465
00:19:20,400 --> 00:19:22,880
that any access requested of an object

466
00:19:22,880 --> 00:19:26,559
labeled as star is permitted so every

467
00:19:26,559 --> 00:19:28,960
every context on the device can access

468
00:19:28,960 --> 00:19:30,880
the driver so

469
00:19:30,880 --> 00:19:33,520
it's uh it offers a full read write on

470
00:19:33,520 --> 00:19:36,400
the kernel for any code

471
00:19:36,400 --> 00:19:37,600
running on the

472
00:19:37,600 --> 00:19:39,440
on the tv

473
00:19:39,440 --> 00:19:43,120
so here is an arbitrary write example uh

474
00:19:43,120 --> 00:19:45,039
from our browser context

475
00:19:45,039 --> 00:19:47,919
um we start by opening the file

476
00:19:47,919 --> 00:19:49,679
descriptor on this driver

477
00:19:49,679 --> 00:19:51,200
and then we use a

478
00:19:51,200 --> 00:19:54,320
too because it's the way this driver

479
00:19:54,320 --> 00:19:56,080
works

480
00:19:56,080 --> 00:19:59,120
and we just use

481
00:19:59,120 --> 00:20:02,960
the pg offset to to get

482
00:20:02,960 --> 00:20:05,679
an offset on the on the address zero and

483
00:20:05,679 --> 00:20:09,520
um so pg offset is the number of page

484
00:20:09,520 --> 00:20:13,840
multiplied by uh the rx1000 and um then

485
00:20:13,840 --> 00:20:17,120
we have this the rx1000 pages that is uh

486
00:20:17,120 --> 00:20:20,000
accessible and we just write

487
00:20:20,000 --> 00:20:21,039
at the

488
00:20:21,039 --> 00:20:23,520
desired offset a value

489
00:20:23,520 --> 00:20:25,679
and we write on the on the kernel and

490
00:20:25,679 --> 00:20:29,280
then we can close the file descriptor

491
00:20:30,320 --> 00:20:31,600
so

492
00:20:31,600 --> 00:20:32,960
now we have

493
00:20:32,960 --> 00:20:34,880
we are able to read and write uh

494
00:20:34,880 --> 00:20:36,720
everything but

495
00:20:36,720 --> 00:20:39,840
we want to think about what to rewrite

496
00:20:39,840 --> 00:20:41,919
because writing to code section is

497
00:20:41,919 --> 00:20:44,080
always tricky you can have some cash

498
00:20:44,080 --> 00:20:45,200
problems

499
00:20:45,200 --> 00:20:47,280
uh you can you can rewrite code that is

500
00:20:47,280 --> 00:20:49,840
executed at the same time so it can

501
00:20:49,840 --> 00:20:53,440
pretty easily end up with kernel panic

502
00:20:53,440 --> 00:20:55,200
so we will

503
00:20:55,200 --> 00:20:57,679
much better

504
00:20:57,679 --> 00:21:02,159
prefer to rewrite some data

505
00:21:02,159 --> 00:21:02,960
some

506
00:21:02,960 --> 00:21:04,799
code in the data section

507
00:21:04,799 --> 00:21:08,159
so a good way to do this is to

508
00:21:08,159 --> 00:21:09,679
find a pointer that is stored in the

509
00:21:09,679 --> 00:21:12,640
data section and to rewrite it to first

510
00:21:12,640 --> 00:21:15,039
get an arbitrary code in the kernel

511
00:21:15,039 --> 00:21:17,200
and then from

512
00:21:17,200 --> 00:21:19,919
this arbitrary call we will use a known

513
00:21:19,919 --> 00:21:22,159
technique to get to exactly usalon

514
00:21:22,159 --> 00:21:24,720
binary

515
00:21:25,600 --> 00:21:27,600
so so first of all how to get an

516
00:21:27,600 --> 00:21:32,720
arbitrary call so um in your slash proc

517
00:21:32,720 --> 00:21:35,360
on the device you have

518
00:21:35,360 --> 00:21:38,400
many files and for each files in this

519
00:21:38,400 --> 00:21:40,320
slash proc you have a

520
00:21:40,320 --> 00:21:43,440
descriptor in the in the kernel that

521
00:21:43,440 --> 00:21:45,679
allows to to read or write this file

522
00:21:45,679 --> 00:21:47,520
depending on the file

523
00:21:47,520 --> 00:21:50,559
here we find the proc sdp version file

524
00:21:50,559 --> 00:21:52,480
which is which can be accessed by the

525
00:21:52,480 --> 00:21:54,559
browser context

526
00:21:54,559 --> 00:21:56,240
and when we

527
00:21:56,240 --> 00:21:57,840
read the source code you can see that

528
00:21:57,840 --> 00:22:01,520
there is a pointer to sap proc show sdp

529
00:22:01,520 --> 00:22:03,020
version

530
00:22:03,020 --> 00:22:04,559
[Music]

531
00:22:04,559 --> 00:22:06,799
to which is executed when you read this

532
00:22:06,799 --> 00:22:08,320
file so

533
00:22:08,320 --> 00:22:10,400
this pointer is in the data section and

534
00:22:10,400 --> 00:22:12,960
you can just we can just rewrite it with

535
00:22:12,960 --> 00:22:15,120
our vulnerability and we get an

536
00:22:15,120 --> 00:22:18,479
arbitrary call because

537
00:22:19,760 --> 00:22:22,400
okay so now we have this arbitrary call

538
00:22:22,400 --> 00:22:24,960
how to get uh how to be able to execute

539
00:22:24,960 --> 00:22:26,880
a user loan binary

540
00:22:26,880 --> 00:22:29,600
we use the function orderly power off

541
00:22:29,600 --> 00:22:31,200
which is

542
00:22:31,200 --> 00:22:35,039
in the kernel and this function

543
00:22:35,039 --> 00:22:36,400
just run

544
00:22:36,400 --> 00:22:38,799
just calls the function runcmd which is

545
00:22:38,799 --> 00:22:41,520
a wrapper for call user model

546
00:22:41,520 --> 00:22:44,320
which is a function that launch a

547
00:22:44,320 --> 00:22:45,440
binary

548
00:22:45,440 --> 00:22:48,159
in new zealand

549
00:22:48,240 --> 00:22:50,400
this function

550
00:22:50,400 --> 00:22:52,559
launched the command that is stored at

551
00:22:52,559 --> 00:22:55,200
power of cmd which is a story in the

552
00:22:55,200 --> 00:22:56,720
data section

553
00:22:56,720 --> 00:23:00,240
so our plan here is just to

554
00:23:00,240 --> 00:23:02,240
patch the power of cmd in the data

555
00:23:02,240 --> 00:23:03,919
section

556
00:23:03,919 --> 00:23:07,280
with you know example a

557
00:23:07,280 --> 00:23:10,480
busy box uh launching the netcat with uh

558
00:23:10,480 --> 00:23:11,919
remote shell

559
00:23:11,919 --> 00:23:15,039
and um and then use her arbitrary call

560
00:23:15,039 --> 00:23:18,880
to to run the orderly power off

561
00:23:18,880 --> 00:23:22,559
um last thing we need to do is to bypass

562
00:23:22,559 --> 00:23:25,919
the uap that we talked about previously

563
00:23:25,919 --> 00:23:27,039
because

564
00:23:27,039 --> 00:23:29,039
we need to

565
00:23:29,039 --> 00:23:32,240
to upload our custom busy box to

566
00:23:32,240 --> 00:23:34,000
to get a shell

567
00:23:34,000 --> 00:23:34,799
and

568
00:23:34,799 --> 00:23:37,360
how busy box is not signed so we need to

569
00:23:37,360 --> 00:23:39,600
bypass the signature check

570
00:23:39,600 --> 00:23:40,400
um

571
00:23:40,400 --> 00:23:42,240
but it was pretty easy because you have

572
00:23:42,240 --> 00:23:44,880
this convenient check in the kernel

573
00:23:44,880 --> 00:23:46,960
which

574
00:23:46,960 --> 00:23:48,159
read

575
00:23:48,159 --> 00:23:50,720
the sup status variable which is a

576
00:23:50,720 --> 00:23:53,679
global variable and uh if you set it to

577
00:23:53,679 --> 00:23:56,000
zero all signature check will return

578
00:23:56,000 --> 00:23:56,960
correct

579
00:23:56,960 --> 00:24:01,120
so we write it we write a zero and uh

580
00:24:01,120 --> 00:24:04,559
and the check is bypassed and yes before

581
00:24:04,559 --> 00:24:07,520
you we had this uh this pop-up on the tv

582
00:24:07,520 --> 00:24:09,600
uh telling us that our busy box process

583
00:24:09,600 --> 00:24:14,480
was uh was blocked but now it's bypassed

584
00:24:14,559 --> 00:24:16,720
so if we have a quick recap of what

585
00:24:16,720 --> 00:24:18,799
we've done

586
00:24:18,799 --> 00:24:20,799
the exploit starts by patching the

587
00:24:20,799 --> 00:24:22,960
europeans and we rewrite the power of

588
00:24:22,960 --> 00:24:24,880
cmd string

589
00:24:24,880 --> 00:24:27,679
and then we rewrite the pointer to

590
00:24:27,679 --> 00:24:30,559
elderly power off in the sdp proc

591
00:24:30,559 --> 00:24:33,360
entries and after reading the proc sdp

592
00:24:33,360 --> 00:24:35,440
version file from the browser context we

593
00:24:35,440 --> 00:24:38,320
can enjoy our root shell

594
00:24:38,320 --> 00:24:39,919
so

595
00:24:39,919 --> 00:24:42,640
yeah we have what we wanted and we are

596
00:24:42,640 --> 00:24:45,440
we are we are roots

597
00:24:45,440 --> 00:24:48,320
and now that we have our rachel um we

598
00:24:48,320 --> 00:24:49,760
asked

599
00:24:49,760 --> 00:24:52,240
we were thinking about uh what after

600
00:24:52,240 --> 00:24:54,720
this vulnerabilities patch we will lose

601
00:24:54,720 --> 00:24:56,159
our

602
00:24:56,159 --> 00:24:58,880
our debug environment so maybe it could

603
00:24:58,880 --> 00:25:01,919
be great to to be able to decrypt the

604
00:25:01,919 --> 00:25:04,799
firmware to still be able to

605
00:25:04,799 --> 00:25:07,200
to get all the binaries on the tv

606
00:25:07,200 --> 00:25:08,159
and to

607
00:25:08,159 --> 00:25:10,480
to perform some reverse engineering

608
00:25:10,480 --> 00:25:12,880
so now we are going to try to decrypt

609
00:25:12,880 --> 00:25:15,120
the firmware so the firmwares can be

610
00:25:15,120 --> 00:25:17,600
downloaded from the samsung site

611
00:25:17,600 --> 00:25:19,440
they are encrypted as you can see on the

612
00:25:19,440 --> 00:25:20,799
entropy graph

613
00:25:20,799 --> 00:25:21,760
and

614
00:25:21,760 --> 00:25:24,480
f-secure who has written a blog post i

615
00:25:24,480 --> 00:25:27,039
think two years ago has

616
00:25:27,039 --> 00:25:29,760
stated that the encryption the

617
00:25:29,760 --> 00:25:32,320
encryption algorithm is a aes and that

618
00:25:32,320 --> 00:25:33,120
the

619
00:25:33,120 --> 00:25:37,200
key is decrypted in the trezon so

620
00:25:37,200 --> 00:25:39,279
you can't get the key by a static

621
00:25:39,279 --> 00:25:41,039
reverse engineering you need some

622
00:25:41,039 --> 00:25:42,960
accents on the tv to

623
00:25:42,960 --> 00:25:46,080
to try to accept this key

624
00:25:46,080 --> 00:25:46,960
so

625
00:25:46,960 --> 00:25:49,279
this is a quick summary of how the

626
00:25:49,279 --> 00:25:52,640
decryption of the firmware works

627
00:25:52,640 --> 00:25:55,760
the encrypted firmware decryption key is

628
00:25:55,760 --> 00:25:58,000
stored on the file system of the tv in

629
00:25:58,000 --> 00:26:01,120
the itunes ies password encrypted.txt

630
00:26:01,120 --> 00:26:01,919
and

631
00:26:01,919 --> 00:26:04,240
when you want to decrypt the firmware

632
00:26:04,240 --> 00:26:06,240
the key is loaded in the truson or more

633
00:26:06,240 --> 00:26:07,919
precisely in

634
00:26:07,919 --> 00:26:09,760
the trusted applications in the trust

635
00:26:09,760 --> 00:26:11,039
zone

636
00:26:11,039 --> 00:26:14,799
so you load the encrypted key

637
00:26:14,960 --> 00:26:17,039
you take the encrypted key from the file

638
00:26:17,039 --> 00:26:18,000
system

639
00:26:18,000 --> 00:26:21,039
the sw standalone which is a binary

640
00:26:21,039 --> 00:26:23,679
performing the update loads it in the

641
00:26:23,679 --> 00:26:25,279
trusted application

642
00:26:25,279 --> 00:26:27,919
here the click the key is decrypted and

643
00:26:27,919 --> 00:26:30,000
stored inside the secure memory of the

644
00:26:30,000 --> 00:26:32,559
truss zone and then you can send your

645
00:26:32,559 --> 00:26:34,720
encrypted firmware and

646
00:26:34,720 --> 00:26:36,080
the

647
00:26:36,080 --> 00:26:38,080
the ies description is performed inside

648
00:26:38,080 --> 00:26:39,679
the trusted application and the

649
00:26:39,679 --> 00:26:41,679
decrypted firmware uh

650
00:26:41,679 --> 00:26:45,279
is sent back to the user so

651
00:26:45,279 --> 00:26:46,880
it allows to decrypt the firmware

652
00:26:46,880 --> 00:26:48,080
without

653
00:26:48,080 --> 00:26:50,159
giving any access to an attacker to the

654
00:26:50,159 --> 00:26:52,559
decrypted key

655
00:26:52,559 --> 00:26:55,919
so but we are going to try to bypass the

656
00:26:55,919 --> 00:26:58,720
the way it works and

657
00:26:58,720 --> 00:27:00,400
so for that our

658
00:27:00,400 --> 00:27:02,799
work environment will be performing a

659
00:27:02,799 --> 00:27:05,840
manual update using the sw standalone

660
00:27:05,840 --> 00:27:07,120
binary

661
00:27:07,120 --> 00:27:09,360
we plug a usb key with a valid firmware

662
00:27:09,360 --> 00:27:12,799
on the on the tv we launched the sw

663
00:27:12,799 --> 00:27:15,440
standalone with gdb server attached to

664
00:27:15,440 --> 00:27:16,799
the binary

665
00:27:16,799 --> 00:27:17,520
and

666
00:27:17,520 --> 00:27:19,760
we will add many breakpoints with

667
00:27:19,760 --> 00:27:22,240
commands to bypass some verification and

668
00:27:22,240 --> 00:27:23,919
try to get the key

669
00:27:23,919 --> 00:27:24,720
so

670
00:27:24,720 --> 00:27:27,440
yeah here we talk about patches but it's

671
00:27:27,440 --> 00:27:29,760
just breakpoint in gdb server

672
00:27:29,760 --> 00:27:31,600
so first of all

673
00:27:31,600 --> 00:27:33,440
we will approach this function which is

674
00:27:33,440 --> 00:27:38,399
the init option of the chosen ios engine

675
00:27:38,399 --> 00:27:39,840
there is a

676
00:27:39,840 --> 00:27:42,000
some variables that allows to

677
00:27:42,000 --> 00:27:44,799
to debug what is going on and to write

678
00:27:44,799 --> 00:27:48,159
to the file system all input output of

679
00:27:48,159 --> 00:27:49,440
ies so

680
00:27:49,440 --> 00:27:51,679
when performing trying to decrypt the

681
00:27:51,679 --> 00:27:53,679
firmware it will help us a lot to

682
00:27:53,679 --> 00:27:56,159
understand what is going on

683
00:27:56,159 --> 00:27:57,279
then

684
00:27:57,279 --> 00:27:58,080
we

685
00:27:58,080 --> 00:27:59,520
we have to

686
00:27:59,520 --> 00:28:04,240
to patch the run checkers function which

687
00:28:05,120 --> 00:28:08,000
because when we want to update the tv

688
00:28:08,000 --> 00:28:11,120
there is a check to see if the

689
00:28:11,120 --> 00:28:12,880
version of the firmware we are trying to

690
00:28:12,880 --> 00:28:13,679
launch

691
00:28:13,679 --> 00:28:14,559
is

692
00:28:14,559 --> 00:28:16,799
is already the same on the tv and if

693
00:28:16,799 --> 00:28:19,520
it's the same as the update stops

694
00:28:19,520 --> 00:28:21,600
because you don't have to update your tv

695
00:28:21,600 --> 00:28:24,240
so here we just bypass the this version

696
00:28:24,240 --> 00:28:25,679
check and

697
00:28:25,679 --> 00:28:29,360
the update goes further

698
00:28:29,360 --> 00:28:31,120
and last um

699
00:28:31,120 --> 00:28:33,360
the third patch uh in fact so you have

700
00:28:33,360 --> 00:28:35,200
this uh create

701
00:28:35,200 --> 00:28:36,960
crypt engine function

702
00:28:36,960 --> 00:28:38,960
and here we have two interesting

703
00:28:38,960 --> 00:28:41,840
parameters we have used software uh

704
00:28:41,840 --> 00:28:44,880
krypton giant and estrozone supported

705
00:28:44,880 --> 00:28:47,760
so in fact

706
00:28:47,760 --> 00:28:49,600
you can see that if there is the

707
00:28:49,600 --> 00:28:52,559
estrozone supported it states phosphorus

708
00:28:52,559 --> 00:28:55,200
will be decrypted inside cryptangine and

709
00:28:55,200 --> 00:28:57,520
in the other case decrypting phosphorus

710
00:28:57,520 --> 00:28:59,120
outside crypt engine

711
00:28:59,120 --> 00:29:00,720
so

712
00:29:00,720 --> 00:29:03,200
in fact this patch what it does

713
00:29:03,200 --> 00:29:06,240
we take the same schematic as previously

714
00:29:06,240 --> 00:29:07,120
but

715
00:29:07,120 --> 00:29:09,120
now when we send the encrypted key to

716
00:29:09,120 --> 00:29:10,799
the trusted application

717
00:29:10,799 --> 00:29:12,159
the trusted application will

718
00:29:12,159 --> 00:29:13,440
conveniently

719
00:29:13,440 --> 00:29:16,399
decrypt the key and send it back to the

720
00:29:16,399 --> 00:29:19,679
to the normal world so we can just uh

721
00:29:19,679 --> 00:29:22,799
add a last breakpoint in our gdb server

722
00:29:22,799 --> 00:29:25,360
to be able to print the the decrypted

723
00:29:25,360 --> 00:29:27,840
key

724
00:29:28,320 --> 00:29:29,919
so now

725
00:29:29,919 --> 00:29:30,880
we are

726
00:29:30,880 --> 00:29:32,640
we get to our

727
00:29:32,640 --> 00:29:35,840
breakpoint in gdb where we print the key

728
00:29:35,840 --> 00:29:36,880
and

729
00:29:36,880 --> 00:29:40,480
we get this weird ascii string and we

730
00:29:40,480 --> 00:29:41,520
are like

731
00:29:41,520 --> 00:29:43,679
what the is this uh format because

732
00:29:43,679 --> 00:29:46,799
it's ascii with backslash n and

733
00:29:46,799 --> 00:29:49,039
we weren't expecting this kind of format

734
00:29:49,039 --> 00:29:50,960
because it seems

735
00:29:50,960 --> 00:29:52,720
pretty weird that the trusted

736
00:29:52,720 --> 00:29:56,559
application uses a nas key and

737
00:29:56,559 --> 00:29:58,399
formatted like that

738
00:29:58,399 --> 00:30:00,399
so

739
00:30:00,399 --> 00:30:01,200
we

740
00:30:01,200 --> 00:30:02,320
think that

741
00:30:02,320 --> 00:30:04,240
someone that samsung

742
00:30:04,240 --> 00:30:05,520
just

743
00:30:05,520 --> 00:30:06,240
had

744
00:30:06,240 --> 00:30:08,320
some problem and put the ascii version

745
00:30:08,320 --> 00:30:10,399
of the string in the file

746
00:30:10,399 --> 00:30:12,399
that is needed to decrypt the firmware

747
00:30:12,399 --> 00:30:15,360
instead of just putting some exa

748
00:30:15,360 --> 00:30:17,279
values

749
00:30:17,279 --> 00:30:19,520
so

750
00:30:19,840 --> 00:30:22,320
now we get this but it's not the final

751
00:30:22,320 --> 00:30:25,120
ies key because uh it's a

752
00:30:25,120 --> 00:30:28,000
much longer than the

753
00:30:28,000 --> 00:30:29,600
16 or

754
00:30:29,600 --> 00:30:32,720
50 um 32 bytes so we need

755
00:30:32,720 --> 00:30:34,240
now 15

756
00:30:34,240 --> 00:30:36,320
16. sorry sorry

757
00:30:36,320 --> 00:30:38,480
so um

758
00:30:38,480 --> 00:30:40,320
if we try to use this key with the

759
00:30:40,320 --> 00:30:42,799
software decryption argument set to one

760
00:30:42,799 --> 00:30:45,279
as seen previously it doesn't work so in

761
00:30:45,279 --> 00:30:46,559
fact the

762
00:30:46,559 --> 00:30:48,640
the binary doesn't work

763
00:30:48,640 --> 00:30:50,880
if there is no ultrazone

764
00:30:50,880 --> 00:30:51,679
and

765
00:30:51,679 --> 00:30:54,159
so we want we tried to yeah we tried to

766
00:30:54,159 --> 00:30:57,440
decrypt the key uh like get the

767
00:30:57,440 --> 00:30:59,120
the x bytes

768
00:30:59,120 --> 00:31:02,480
we tried many many tries but

769
00:31:02,480 --> 00:31:04,240
we end up with writing a script in

770
00:31:04,240 --> 00:31:06,240
patent that

771
00:31:06,240 --> 00:31:09,600
that tries many formats of the key and

772
00:31:09,600 --> 00:31:12,399
that checks the aes padding to to see if

773
00:31:12,399 --> 00:31:15,120
our decryption is correct or not

774
00:31:15,120 --> 00:31:17,200
and so we end up with this solution

775
00:31:17,200 --> 00:31:19,760
which is the first phrase is ascii

776
00:31:19,760 --> 00:31:21,279
representation

777
00:31:21,279 --> 00:31:23,760
and we perform an md5 of

778
00:31:23,760 --> 00:31:25,919
this representation

779
00:31:25,919 --> 00:31:30,720
and we use that as an is key for

780
00:31:30,720 --> 00:31:32,360
for is

781
00:31:32,360 --> 00:31:35,279
128 decryption

782
00:31:35,279 --> 00:31:36,240
and then

783
00:31:36,240 --> 00:31:39,039
um so we haven't

784
00:31:39,039 --> 00:31:40,480
described the full

785
00:31:40,480 --> 00:31:43,120
file format of the update because

786
00:31:43,120 --> 00:31:45,600
we didn't get the time but in fact you

787
00:31:45,600 --> 00:31:48,559
upgrade that msd file is

788
00:31:48,559 --> 00:31:50,640
contains a list of entries

789
00:31:50,640 --> 00:31:52,000
you have a

790
00:31:52,000 --> 00:31:53,919
different iv for

791
00:31:53,919 --> 00:31:57,440
for each file you have some salt

792
00:31:57,440 --> 00:31:58,240
and

793
00:31:58,240 --> 00:31:59,679
so

794
00:31:59,679 --> 00:32:02,320
we we reverse engineer

795
00:32:02,320 --> 00:32:05,279
the the file format and uh we write

796
00:32:05,279 --> 00:32:06,480
these scripts

797
00:32:06,480 --> 00:32:08,240
that use the

798
00:32:08,240 --> 00:32:10,559
the md five

799
00:32:10,559 --> 00:32:12,799
of the key and uh and tries to decrypt

800
00:32:12,799 --> 00:32:15,360
so when we extract the

801
00:32:15,360 --> 00:32:16,880
upgrade.tmsd

802
00:32:16,880 --> 00:32:19,440
encrypted file you got

803
00:32:19,440 --> 00:32:21,679
like

804
00:32:23,200 --> 00:32:25,519
all those files

805
00:32:25,519 --> 00:32:28,080
so some of them are encrypted again like

806
00:32:28,080 --> 00:32:31,519
this one success.bin and sequestdrv.bin

807
00:32:31,519 --> 00:32:34,320
uh as is the code that is loaded in the

808
00:32:34,320 --> 00:32:38,159
trustzone but it's uh over encrypted so

809
00:32:38,159 --> 00:32:40,559
we weren't able to read

810
00:32:40,559 --> 00:32:42,799
the treson code but you get your

811
00:32:42,799 --> 00:32:45,039
your root fs you

812
00:32:45,039 --> 00:32:46,960
you get a lot of stuff to to perform

813
00:32:46,960 --> 00:32:50,240
reverse engineering later

814
00:32:54,000 --> 00:32:57,200
thank you manson uh to to conclude uh we

815
00:32:57,200 --> 00:33:00,080
get a rotate on the tv so there is a no

816
00:33:00,080 --> 00:33:02,159
more uh binary signature so we can

817
00:33:02,159 --> 00:33:04,480
execute what we want gdb server or

818
00:33:04,480 --> 00:33:06,320
whatever whatever we want

819
00:33:06,320 --> 00:33:10,000
we have access to the world system and

820
00:33:10,000 --> 00:33:12,880
we are in a very comfortable position to

821
00:33:12,880 --> 00:33:16,640
for vulnerability research and debugging

822
00:33:16,640 --> 00:33:18,799
what's what happened on the tv

823
00:33:18,799 --> 00:33:20,320
we also have a

824
00:33:20,320 --> 00:33:23,039
decrypted fimer so we can perform static

825
00:33:23,039 --> 00:33:24,080
analysis

826
00:33:24,080 --> 00:33:26,880
on further upgrades if we will after our

827
00:33:26,880 --> 00:33:29,120
shell

828
00:33:30,640 --> 00:33:32,480
we plan to publish the exploit and the

829
00:33:32,480 --> 00:33:35,360
decryption script soon so

830
00:33:35,360 --> 00:33:36,640
we don't know

831
00:33:36,640 --> 00:33:37,440
yet

832
00:33:37,440 --> 00:33:39,360
when for now

833
00:33:39,360 --> 00:33:41,039
and we would like to thank our

834
00:33:41,039 --> 00:33:43,360
colleagues for profiting everything and

835
00:33:43,360 --> 00:33:45,120
a special thanks to

836
00:33:45,120 --> 00:33:48,960
to david for help helping us a lot

837
00:33:48,960 --> 00:33:51,679
so thanks for your attention and if you

838
00:33:51,679 --> 00:33:53,919
have any questions

839
00:33:53,919 --> 00:33:55,570
please ask

840
00:33:55,570 --> 00:34:02,480
[Applause]

841
00:34:02,480 --> 00:34:04,480
thank you so much for a very interesting

842
00:34:04,480 --> 00:34:06,080
presentation

843
00:34:06,080 --> 00:34:09,199
do we have a question in the

844
00:34:09,199 --> 00:34:10,560
architecture

845
00:34:10,560 --> 00:34:12,800
somebody want to ask questions

846
00:34:12,800 --> 00:34:14,639
yeah can you can you come and you would

847
00:34:14,639 --> 00:34:16,800
ask questions live

848
00:34:16,800 --> 00:34:18,560
to prove that we have physical person in

849
00:34:18,560 --> 00:34:21,679
the room

850
00:34:21,679 --> 00:34:23,760
yes there are actually a physical

851
00:34:23,760 --> 00:34:25,440
person in the room thank you very much

852
00:34:25,440 --> 00:34:27,760
for the presentation i i would like you

853
00:34:27,760 --> 00:34:29,918
to explain us how the

854
00:34:29,918 --> 00:34:32,079
disclosure

855
00:34:32,079 --> 00:34:33,599
was was

856
00:34:33,599 --> 00:34:37,839
how was the the interaction and so on

857
00:34:39,760 --> 00:34:42,560
so the disclosure started in april i

858
00:34:42,560 --> 00:34:43,599
guess

859
00:34:43,599 --> 00:34:47,199
or maybe before or march um

860
00:34:47,199 --> 00:34:48,399
so the

861
00:34:48,399 --> 00:34:49,440
the

862
00:34:49,440 --> 00:34:52,639
v8 uh one day was pretty

863
00:34:52,639 --> 00:34:55,760
quickly fixed in the you can you can see

864
00:34:55,760 --> 00:34:57,599
it in the because you have a guitar repo

865
00:34:57,599 --> 00:34:59,760
with the tizen source code

866
00:34:59,760 --> 00:35:01,200
and

867
00:35:01,200 --> 00:35:02,240
the um

868
00:35:02,240 --> 00:35:05,599
one we don't really know if it's fixed

869
00:35:05,599 --> 00:35:07,119
we told

870
00:35:07,119 --> 00:35:09,440
samsung that we will be doing this

871
00:35:09,440 --> 00:35:11,200
presentation today

872
00:35:11,200 --> 00:35:14,320
they didn't say to us not to present so

873
00:35:14,320 --> 00:35:15,520
we

874
00:35:15,520 --> 00:35:17,040
we're not sure if it's patched or not

875
00:35:17,040 --> 00:35:18,320
but

876
00:35:18,320 --> 00:35:19,200
uh

877
00:35:19,200 --> 00:35:20,000
they

878
00:35:20,000 --> 00:35:21,359
they were

879
00:35:21,359 --> 00:35:23,599
it ran uh

880
00:35:23,599 --> 00:35:25,839
good with something they they didn't try

881
00:35:25,839 --> 00:35:27,040
to

882
00:35:27,040 --> 00:35:29,119
to stop us from doing this presentation

883
00:35:29,119 --> 00:35:31,839
so it was okay

884
00:35:33,119 --> 00:35:35,359
okay other questions

885
00:35:35,359 --> 00:35:38,880
okay maybe online question

886
00:35:38,880 --> 00:35:41,040
so

887
00:35:42,560 --> 00:35:45,599
okay many times do you

888
00:35:45,599 --> 00:35:48,079
take to to manage these attacks it's one

889
00:35:48,079 --> 00:35:50,800
day two days one month three months uh i

890
00:35:50,800 --> 00:35:51,440
don't know maybe

891
00:35:51,440 --> 00:35:53,440
[Music]

892
00:35:53,440 --> 00:35:55,040
maybe uh

893
00:35:55,040 --> 00:35:58,320
for the brother exploitation maybe

894
00:35:58,320 --> 00:36:00,079
five days

895
00:36:00,079 --> 00:36:01,839
because

896
00:36:01,839 --> 00:36:04,160
in fact there is other vulnerabilities

897
00:36:04,160 --> 00:36:06,160
which are not exploitable because of

898
00:36:06,160 --> 00:36:08,079
compilation option but

899
00:36:08,079 --> 00:36:10,079
this one was so

900
00:36:10,079 --> 00:36:10,839
so

901
00:36:10,839 --> 00:36:12,640
i

902
00:36:12,640 --> 00:36:14,799
i

903
00:36:15,040 --> 00:36:17,440
i don't know maybe yes five days and for

904
00:36:17,440 --> 00:36:18,800
the

905
00:36:18,800 --> 00:36:20,000
one person

906
00:36:20,000 --> 00:36:23,040
yes one person and for the

907
00:36:23,040 --> 00:36:25,200
privilege escalation part and

908
00:36:25,200 --> 00:36:26,960
more decryption

909
00:36:26,960 --> 00:36:30,079
i think five day more yeah five or maybe

910
00:36:30,079 --> 00:36:33,760
a little more like let's say uh 15

911
00:36:33,760 --> 00:36:35,440
days for the

912
00:36:35,440 --> 00:36:36,320
world

913
00:36:36,320 --> 00:36:39,880
stuff yes

914
00:36:42,960 --> 00:36:45,440
the second question online so does the

915
00:36:45,440 --> 00:36:50,320
firmware contain the security world code

916
00:36:50,800 --> 00:36:54,440
secure code

917
00:36:55,040 --> 00:36:57,280
it's free

918
00:36:57,280 --> 00:37:00,480
so this is what we say before the secure

919
00:37:00,480 --> 00:37:02,640
world code is here in those

920
00:37:02,640 --> 00:37:05,680
two files but it is over encrypted so we

921
00:37:05,680 --> 00:37:08,960
cannot we weren't able to access it

922
00:37:08,960 --> 00:37:11,440
to read it

923
00:37:11,440 --> 00:37:14,640
okay so maybe i will ask a last question

924
00:37:14,640 --> 00:37:16,320
everything you presented

925
00:37:16,320 --> 00:37:18,880
is it related to the tv or can

926
00:37:18,880 --> 00:37:21,599
does the attack apply to another samsung

927
00:37:21,599 --> 00:37:24,079
framework which use the same material or

928
00:37:24,079 --> 00:37:26,240
something like that because i i never

929
00:37:26,240 --> 00:37:29,359
see any any tv specification in your

930
00:37:29,359 --> 00:37:30,560
presentation

931
00:37:30,560 --> 00:37:32,720
because you just plug a usb key

932
00:37:32,720 --> 00:37:36,800
okay maybe work for different devices

933
00:37:36,800 --> 00:37:39,440
yes maybe

934
00:37:39,440 --> 00:37:41,680
other devices that your stays on our

935
00:37:41,680 --> 00:37:43,440
watches so i don't know if there is a

936
00:37:43,440 --> 00:37:46,480
browser on the watch

937
00:37:46,480 --> 00:37:49,800
either maybe

938
00:37:51,440 --> 00:37:55,450
okay so thanks again for the speakers

939
00:37:55,450 --> 00:38:00,419
[Applause]

