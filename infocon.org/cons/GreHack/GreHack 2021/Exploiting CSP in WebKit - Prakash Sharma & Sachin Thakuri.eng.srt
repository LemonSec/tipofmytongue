1
00:00:00,880 --> 00:00:01,839
hi

2
00:00:01,839 --> 00:00:04,160
hello everyone i'd first like to thank

3
00:00:04,160 --> 00:00:06,080
you all for attending our talk

4
00:00:06,080 --> 00:00:08,559
the title of our talk is exploiting csb

5
00:00:08,559 --> 00:00:10,559
in webkit to break authentication and

6
00:00:10,559 --> 00:00:12,160
authorization

7
00:00:12,160 --> 00:00:14,559
now have you ever had an access to a

8
00:00:14,559 --> 00:00:16,400
jira debug which you could possibly use

9
00:00:16,400 --> 00:00:18,080
to take over accounts on any platform

10
00:00:18,080 --> 00:00:19,279
you want

11
00:00:19,279 --> 00:00:21,840
well we kind of did today in this talk

12
00:00:21,840 --> 00:00:24,080
we'll talk about a bug that enabled us

13
00:00:24,080 --> 00:00:26,240
to take our user accounts and most of

14
00:00:26,240 --> 00:00:28,800
the web applications out there but first

15
00:00:28,800 --> 00:00:31,199
a little bit about us

16
00:00:31,199 --> 00:00:33,920
my name is sachin takuri and i am a

17
00:00:33,920 --> 00:00:35,680
co-founder and security engineer at

18
00:00:35,680 --> 00:00:38,160
threatening where i do mostly wave and

19
00:00:38,160 --> 00:00:40,480
mobile security stuff and i'm also a

20
00:00:40,480 --> 00:00:42,480
co-founder of threatcon a security

21
00:00:42,480 --> 00:00:45,839
conference based in nepal

22
00:00:47,840 --> 00:00:50,559
hi i'm prakas i'm also a co-founder and

23
00:00:50,559 --> 00:00:53,280
internet engineer at rednecks where i

24
00:00:53,280 --> 00:00:55,120
spend most of my time hacking web

25
00:00:55,120 --> 00:00:57,440
kitchens and sometimes playing itself

26
00:00:57,440 --> 00:01:00,960
script and new browser apis

27
00:01:02,719 --> 00:01:05,600
um before we move on deep into the

28
00:01:05,600 --> 00:01:06,880
presentation

29
00:01:06,880 --> 00:01:09,119
here's a quick tldr version of the talk

30
00:01:09,119 --> 00:01:11,920
um long story short today we'll discuss

31
00:01:11,920 --> 00:01:13,680
a vulnerability that was reported to

32
00:01:13,680 --> 00:01:15,680
apple that apple didn't consider severe

33
00:01:15,680 --> 00:01:17,600
enough prefix quickly

34
00:01:17,600 --> 00:01:19,280
which then after waiting for a

35
00:01:19,280 --> 00:01:21,439
significant amount of time we decided to

36
00:01:21,439 --> 00:01:23,600
exploit and learn some boundaries by

37
00:01:23,600 --> 00:01:26,479
reporting them to confounding programs

38
00:01:26,479 --> 00:01:28,479
the ball was in csp implementation of

39
00:01:28,479 --> 00:01:30,720
wiki a browser engine used by safari web

40
00:01:30,720 --> 00:01:31,680
browser

41
00:01:31,680 --> 00:01:33,439
as well as all ios web browsers

42
00:01:33,439 --> 00:01:36,159
including firefox and chrome

43
00:01:36,159 --> 00:01:38,400
the failure of webkit to adhere to w3c

44
00:01:38,400 --> 00:01:41,040
specification when a csv violation event

45
00:01:41,040 --> 00:01:42,799
is triggered leaked cross site

46
00:01:42,799 --> 00:01:44,960
destination uri while redirection from

47
00:01:44,960 --> 00:01:47,520
one origin to a different one

48
00:01:47,520 --> 00:01:49,520
combine this with common practice of

49
00:01:49,520 --> 00:01:51,759
implementing sso's cross sector directs

50
00:01:51,759 --> 00:01:54,159
to authenticate and authorize we were

51
00:01:54,159 --> 00:01:56,960
able to steal codes access token or any

52
00:01:56,960 --> 00:01:58,960
other secrets that were part of the leak

53
00:01:58,960 --> 00:01:59,920
uri

54
00:01:59,920 --> 00:02:01,439
which we could then further use

55
00:02:01,439 --> 00:02:02,799
arbitrarily

56
00:02:02,799 --> 00:02:04,960
this allowed us to carry out attacks

57
00:02:04,960 --> 00:02:06,560
including but not limited to account

58
00:02:06,560 --> 00:02:09,520
takeovers csrf and sensitive information

59
00:02:09,520 --> 00:02:10,959
disclosure

60
00:02:10,959 --> 00:02:13,599
moving on now we will discuss few

61
00:02:13,599 --> 00:02:15,680
technologies and concepts before moving

62
00:02:15,680 --> 00:02:16,560
on

63
00:02:16,560 --> 00:02:19,520
to the vulnerability itself

64
00:02:19,520 --> 00:02:21,120
sso

65
00:02:21,120 --> 00:02:23,920
um have you ever seen this buttons where

66
00:02:23,920 --> 00:02:26,000
you can log in using facebook or google

67
00:02:26,000 --> 00:02:27,599
accounts and a third party website and

68
00:02:27,599 --> 00:02:30,000
wonder how this works

69
00:02:30,000 --> 00:02:32,560
these features work through a technology

70
00:02:32,560 --> 00:02:34,239
known as sso

71
00:02:34,239 --> 00:02:36,400
single sign-on also commonly known as

72
00:02:36,400 --> 00:02:38,480
sso is a technology that provides

73
00:02:38,480 --> 00:02:41,040
centralized authentication service

74
00:02:41,040 --> 00:02:43,040
generally users are asked to provide

75
00:02:43,040 --> 00:02:45,360
their single set of credentials and

76
00:02:45,360 --> 00:02:47,280
authentication to all other applications

77
00:02:47,280 --> 00:02:48,879
are verified through a centralized

78
00:02:48,879 --> 00:02:50,560
authentication service

79
00:02:50,560 --> 00:02:52,959
it's ease of use and effectiveness has

80
00:02:52,959 --> 00:02:54,959
made sso very popular among modern

81
00:02:54,959 --> 00:02:56,160
applications

82
00:02:56,160 --> 00:02:58,000
in addition to being simple and easy to

83
00:02:58,000 --> 00:03:02,239
use sso is also considered more secure

84
00:03:02,239 --> 00:03:04,560
sso commonly works by generating an

85
00:03:04,560 --> 00:03:06,319
authentication token which is then

86
00:03:06,319 --> 00:03:07,680
passed to other applications and

87
00:03:07,680 --> 00:03:09,120
services

88
00:03:09,120 --> 00:03:11,040
authentication token then enables

89
00:03:11,040 --> 00:03:14,000
services to verify and authorize verify

90
00:03:14,000 --> 00:03:16,400
and authorize an identity which is why

91
00:03:16,400 --> 00:03:18,000
securing and making sure that

92
00:03:18,000 --> 00:03:20,560
authentication token are kept safely is

93
00:03:20,560 --> 00:03:24,000
of utmost importance

94
00:03:26,959 --> 00:03:30,319
well i assume we all know what csv is

95
00:03:30,319 --> 00:03:32,080
but let's just share with you very

96
00:03:32,080 --> 00:03:33,120
quickly

97
00:03:33,120 --> 00:03:35,599
current interior policy or csp is a set

98
00:03:35,599 --> 00:03:38,080
of policy rules defining how broadcast

99
00:03:38,080 --> 00:03:40,879
load resources like javascript css or

100
00:03:40,879 --> 00:03:43,920
images and whether to allow or deny huge

101
00:03:43,920 --> 00:03:46,400
websites it's defined using an http

102
00:03:46,400 --> 00:03:48,239
response editor called current interior

103
00:03:48,239 --> 00:03:50,799
policy like some here or you're using

104
00:03:50,799 --> 00:03:52,720
metadata with some exclusions like

105
00:03:52,720 --> 00:03:55,599
devoteeri or framancy shoes

106
00:03:55,599 --> 00:03:58,000
csv has been around since 2010 and is

107
00:03:58,000 --> 00:04:00,720
now supported by all modern browsers

108
00:04:00,720 --> 00:04:02,159
we can also see it being widely

109
00:04:02,159 --> 00:04:03,680
implemented in

110
00:04:03,680 --> 00:04:06,000
web 2.0 apps and a lot of improvements

111
00:04:06,000 --> 00:04:08,080
happening over the years

112
00:04:08,080 --> 00:04:10,080
though setting the csv fader it still

113
00:04:10,080 --> 00:04:12,000
seems to be a hard task because it

114
00:04:12,000 --> 00:04:14,480
depends on resources used by this

115
00:04:14,480 --> 00:04:16,959
particular pace or site that's really

116
00:04:16,959 --> 00:04:19,600
why there is no not something as a

117
00:04:19,600 --> 00:04:22,160
default policy

118
00:04:22,160 --> 00:04:24,000
i think it's not that uncommon to make

119
00:04:24,000 --> 00:04:25,919
mistakes while intimidating a country

120
00:04:25,919 --> 00:04:29,040
policy and for that reason we also have

121
00:04:29,040 --> 00:04:30,320
something called

122
00:04:30,320 --> 00:04:32,080
condensatory policy before the only

123
00:04:32,080 --> 00:04:33,120
error

124
00:04:33,120 --> 00:04:35,919
and what it does is instead of actually

125
00:04:35,919 --> 00:04:38,400
achieving the policy in action

126
00:04:38,400 --> 00:04:40,560
it only reports violations which makes

127
00:04:40,560 --> 00:04:42,720
it easier to debug if a policy is

128
00:04:42,720 --> 00:04:45,040
working as intended or not without

129
00:04:45,040 --> 00:04:46,639
breaking anything

130
00:04:46,639 --> 00:04:48,880
i guess we almost have seen csv errors

131
00:04:48,880 --> 00:04:50,240
in our processes

132
00:04:50,240 --> 00:04:53,280
and so on so when it comes to csp

133
00:04:53,280 --> 00:04:55,759
we always have what we call valuation

134
00:04:55,759 --> 00:04:58,080
reports because what if the user tries

135
00:04:58,080 --> 00:05:00,720
to load a restricted resource right

136
00:05:00,720 --> 00:05:03,120
in that case goes multirequest and

137
00:05:03,120 --> 00:05:05,199
dispatch evaluation report

138
00:05:05,199 --> 00:05:07,120
there are currently four ways to capture

139
00:05:07,120 --> 00:05:10,080
dispatch report cs5040ri directive

140
00:05:10,080 --> 00:05:11,360
reporter

141
00:05:11,360 --> 00:05:13,360
voting observer and security policy

142
00:05:13,360 --> 00:05:15,039
evaluation event

143
00:05:15,039 --> 00:05:16,479
throughout the talk we'll be using

144
00:05:16,479 --> 00:05:18,639
secret policy evaluation event for easy

145
00:05:18,639 --> 00:05:21,120
understanding and the report in general

146
00:05:21,120 --> 00:05:23,360
contains information on what caused the

147
00:05:23,360 --> 00:05:25,120
evaluation like validated directive

148
00:05:25,120 --> 00:05:28,560
original policy block uri the user

149
00:05:28,560 --> 00:05:32,960
or the uridge requester and so on

150
00:05:32,960 --> 00:05:36,000
yes it disposes the url these requested

151
00:05:36,000 --> 00:05:36,880
and

152
00:05:36,880 --> 00:05:38,639
try to load and and that could be

153
00:05:38,639 --> 00:05:40,800
something sensitive if it is a result of

154
00:05:40,800 --> 00:05:43,120
your redirect for example in case of in

155
00:05:43,120 --> 00:05:44,720
case of a wall

156
00:05:44,720 --> 00:05:46,160
so to avoid leaking sensitive

157
00:05:46,160 --> 00:05:48,960
information wtc recommends user essence

158
00:05:48,960 --> 00:05:50,880
only include the url of the original

159
00:05:50,880 --> 00:05:52,479
request

160
00:05:52,479 --> 00:05:54,800
the image here at the bottom is from csv

161
00:05:54,800 --> 00:05:56,720
one panel candidate recommendation from

162
00:05:56,720 --> 00:05:57,919
2012

163
00:05:57,919 --> 00:05:59,680
and even then we had source case

164
00:05:59,680 --> 00:06:01,120
discovery

165
00:06:01,120 --> 00:06:02,639
it says the evaluation of voting

166
00:06:02,639 --> 00:06:04,800
mechanism has been designed in a way to

167
00:06:04,800 --> 00:06:07,280
mitigate such the possibilities of

168
00:06:07,280 --> 00:06:09,759
probing the behavior of non-server and

169
00:06:09,759 --> 00:06:11,919
it also explains why

170
00:06:11,919 --> 00:06:14,319
that is if biology reports contain the

171
00:06:14,319 --> 00:06:15,840
full block url

172
00:06:15,840 --> 00:06:17,280
the report might contain sensitive

173
00:06:17,280 --> 00:06:19,120
information containing the redirected

174
00:06:19,120 --> 00:06:20,000
euro

175
00:06:20,000 --> 00:06:22,000
so that's the synonyms

176
00:06:22,000 --> 00:06:24,080
and that's something already said it's

177
00:06:24,080 --> 00:06:26,479
pretty common in case of essos

178
00:06:26,479 --> 00:06:28,160
for example

179
00:06:28,160 --> 00:06:30,560
however it recommends including

180
00:06:30,560 --> 00:06:31,280
the

181
00:06:31,280 --> 00:06:33,360
original block uri which is still an

182
00:06:33,360 --> 00:06:35,120
issue and we have a long history of

183
00:06:35,120 --> 00:06:37,919
reports on that

184
00:06:38,720 --> 00:06:41,039
we found a few disposable ten chromium

185
00:06:41,039 --> 00:06:43,600
tissues leaking origin of block uri in

186
00:06:43,600 --> 00:06:46,560
one way or another using csp

187
00:06:46,560 --> 00:06:49,199
all this reports share the same problem

188
00:06:49,199 --> 00:06:52,000
the leakage of crosstalk in redirect url

189
00:06:52,000 --> 00:06:53,919
thus will only talk about the first one

190
00:06:53,919 --> 00:06:56,240
from 2018 by igor marco

191
00:06:56,240 --> 00:07:00,240
when csp was still in his infancy

192
00:07:00,720 --> 00:07:02,800
he demonstrated what we could see by

193
00:07:02,800 --> 00:07:06,080
using csv block uri directly i remember

194
00:07:06,080 --> 00:07:08,880
what w3c settings recommendation

195
00:07:08,880 --> 00:07:11,039
well this has been encoded directly from

196
00:07:11,039 --> 00:07:13,360
his blog post where he says

197
00:07:13,360 --> 00:07:16,240
we can use csv3 to detect if a user has

198
00:07:16,240 --> 00:07:18,720
authorized certain apps or clients

199
00:07:18,720 --> 00:07:20,800
because all authorized apps will

200
00:07:20,800 --> 00:07:23,120
redirect to their home business instead

201
00:07:23,120 --> 00:07:25,440
of login or authorization page

202
00:07:25,440 --> 00:07:26,960
for example if you have already

203
00:07:26,960 --> 00:07:29,280
authorized instagram on your facebook

204
00:07:29,280 --> 00:07:31,039
sending a request to physical auto

205
00:07:31,039 --> 00:07:33,360
endpoint for instagram or redirect to

206
00:07:33,360 --> 00:07:36,080
instagram instead of facebook

207
00:07:36,080 --> 00:07:38,080
we also found reports linking food block

208
00:07:38,080 --> 00:07:40,800
uri in j3 and which are very similar to

209
00:07:40,800 --> 00:07:45,479
ours that we'll talk about solid

210
00:07:46,400 --> 00:07:47,280
um

211
00:07:47,280 --> 00:07:50,639
now after that history uh let's discuss

212
00:07:50,639 --> 00:07:53,520
the root cause of the vulnerability

213
00:07:53,520 --> 00:07:56,240
um we can define a csv policy in such a

214
00:07:56,240 --> 00:07:59,039
way that where whenever a redirect

215
00:07:59,039 --> 00:08:00,479
happens to a domain with different

216
00:08:00,479 --> 00:08:03,280
origin also known as crossover using

217
00:08:03,280 --> 00:08:06,160
uh csv violation occurs and a security

218
00:08:06,160 --> 00:08:08,639
policy violation event is fired

219
00:08:08,639 --> 00:08:11,000
as you can see in this figure our domain

220
00:08:11,000 --> 00:08:13,919
cm2.pw it describes csp policy makes a

221
00:08:13,919 --> 00:08:16,560
fetch request to domain1.com

222
00:08:16,560 --> 00:08:17,840
then the response header from

223
00:08:17,840 --> 00:08:20,240
domain1.com contains a location header

224
00:08:20,240 --> 00:08:22,240
that now redirects to a domain with

225
00:08:22,240 --> 00:08:24,960
different orders in domain2.com

226
00:08:24,960 --> 00:08:27,680
but due to our csp policy the request to

227
00:08:27,680 --> 00:08:30,319
domain2.com is blocked and a csv

228
00:08:30,319 --> 00:08:33,599
violation event is fired

229
00:08:34,719 --> 00:08:35,519
now

230
00:08:35,519 --> 00:08:37,760
when security policy violation event is

231
00:08:37,760 --> 00:08:40,559
fired it uses security policy violation

232
00:08:40,559 --> 00:08:42,719
even interface target with different

233
00:08:42,719 --> 00:08:44,080
attributes

234
00:08:44,080 --> 00:08:45,760
and while setting values for these

235
00:08:45,760 --> 00:08:47,920
attributes a failure by webkit to adhere

236
00:08:47,920 --> 00:08:51,440
to w3c specification resulted in leaking

237
00:08:51,440 --> 00:08:54,880
30x redirection location in document uri

238
00:08:54,880 --> 00:08:56,160
attribute

239
00:08:56,160 --> 00:08:58,720
as you can see in the example lp.com

240
00:08:58,720 --> 00:09:00,080
secret here redirects to

241
00:09:00,080 --> 00:09:02,480
facebook.comradia

242
00:09:02,480 --> 00:09:04,800
then you can see difference in values

243
00:09:04,800 --> 00:09:07,680
for attribute document uri set by safari

244
00:09:07,680 --> 00:09:10,320
and other web browsers while other

245
00:09:10,320 --> 00:09:12,320
browsers were followed specification

246
00:09:12,320 --> 00:09:15,360
mentioned by wcc seems to set value of a

247
00:09:15,360 --> 00:09:17,680
uri with values from where original

248
00:09:17,680 --> 00:09:19,360
feature push was made

249
00:09:19,360 --> 00:09:21,680
safari who failed to follow the w3c

250
00:09:21,680 --> 00:09:24,160
specification set those values with

251
00:09:24,160 --> 00:09:26,640
final redirection uri

252
00:09:26,640 --> 00:09:27,519
now

253
00:09:27,519 --> 00:09:29,839
you might be wondering how can this be

254
00:09:29,839 --> 00:09:32,800
exploited in sso

255
00:09:32,800 --> 00:09:34,720
as you can see in this figure here when

256
00:09:34,720 --> 00:09:37,680
a user loads example.com it first checks

257
00:09:37,680 --> 00:09:40,480
if the user is authenticated or not and

258
00:09:40,480 --> 00:09:42,880
if the user is not authenticated then as

259
00:09:42,880 --> 00:09:44,800
soon in the figure it will send the user

260
00:09:44,800 --> 00:09:46,640
to auth.example.com

261
00:09:46,640 --> 00:09:49,200
which is a sso domain that provides

262
00:09:49,200 --> 00:09:51,120
centralized authentication

263
00:09:51,120 --> 00:09:53,360
now after verifying the user the user is

264
00:09:53,360 --> 00:09:55,760
then redirected back to example.com with

265
00:09:55,760 --> 00:09:58,000
an authentication token

266
00:09:58,000 --> 00:10:00,000
now the general common practice while

267
00:10:00,000 --> 00:10:02,000
implementing sso is to use different

268
00:10:02,000 --> 00:10:03,920
subdomain or an entirely different

269
00:10:03,920 --> 00:10:05,839
domain which then doesn't meet the

270
00:10:05,839 --> 00:10:07,839
criteria to be defined as same audio

271
00:10:07,839 --> 00:10:10,000
scene so the final redirection that

272
00:10:10,000 --> 00:10:12,000
happens from sso domain to the final

273
00:10:12,000 --> 00:10:14,399
domain are in the case as shown in the

274
00:10:14,399 --> 00:10:16,800
figure from or as shown in the figure

275
00:10:16,800 --> 00:10:17,800
from

276
00:10:17,800 --> 00:10:20,399
odd.example.com to example.com will be

277
00:10:20,399 --> 00:10:22,560
crossover using thus allowing an

278
00:10:22,560 --> 00:10:24,640
attacker to steal the final redirection

279
00:10:24,640 --> 00:10:26,480
you are at

280
00:10:26,480 --> 00:10:28,640
in today's modern application where

281
00:10:28,640 --> 00:10:31,760
authentication and authorization are

282
00:10:31,760 --> 00:10:34,079
dependent on technologies such as oauth

283
00:10:34,079 --> 00:10:36,720
sso and jwt where secrets are passed

284
00:10:36,720 --> 00:10:38,640
through urls the leak of the final

285
00:10:38,640 --> 00:10:40,880
redirection uri made application using

286
00:10:40,880 --> 00:10:42,959
this technology is almost always

287
00:10:42,959 --> 00:10:45,959
vulnerable

288
00:10:48,720 --> 00:10:50,800
the responsible disclosure bingo had

289
00:10:50,800 --> 00:10:52,160
defaulted

290
00:10:52,160 --> 00:10:54,240
we first reported the variability to

291
00:10:54,240 --> 00:10:56,560
safari into every daydream

292
00:10:56,560 --> 00:10:58,320
and had to wait for a few weeks before

293
00:10:58,320 --> 00:11:00,160
we even received another automatic

294
00:11:00,160 --> 00:11:01,920
acknowledgement

295
00:11:01,920 --> 00:11:03,760
after two months of waiting we finally

296
00:11:03,760 --> 00:11:06,240
received a reply on every 20.

297
00:11:06,240 --> 00:11:08,640
to our entire surprise it said this

298
00:11:08,640 --> 00:11:10,560
doesn't seem to pose a threat to work to

299
00:11:10,560 --> 00:11:11,760
users

300
00:11:11,760 --> 00:11:13,839
but they further went on to explain that

301
00:11:13,839 --> 00:11:15,760
even after fixing the issue and thai

302
00:11:15,760 --> 00:11:18,079
code could gather the same information

303
00:11:18,079 --> 00:11:20,399
by monitoring webkit logs while running

304
00:11:20,399 --> 00:11:23,360
an attacker control build of web data

305
00:11:23,360 --> 00:11:25,519
to us it seemed as if they failed to

306
00:11:25,519 --> 00:11:27,040
understand the vulnerability and the

307
00:11:27,040 --> 00:11:28,480
risk it cost

308
00:11:28,480 --> 00:11:30,480
training convinced them the time went by

309
00:11:30,480 --> 00:11:32,720
but we saw no progress at all

310
00:11:32,720 --> 00:11:35,519
so in january of 2021 after waiting for

311
00:11:35,519 --> 00:11:37,760
almost a year we decided to explore

312
00:11:37,760 --> 00:11:39,680
different industry vulnerabilities in

313
00:11:39,680 --> 00:11:41,680
the world by targeting the boundary

314
00:11:41,680 --> 00:11:43,440
points

315
00:11:43,440 --> 00:11:45,680
the exploited symbol is set up a page

316
00:11:45,680 --> 00:11:48,320
with csp as shown in this slide here

317
00:11:48,320 --> 00:11:50,399
which is the domain which we are sending

318
00:11:50,399 --> 00:11:52,639
requests to add an email list for

319
00:11:52,639 --> 00:11:55,360
security policy violation and send a

320
00:11:55,360 --> 00:11:56,560
request

321
00:11:56,560 --> 00:11:58,160
sending a request to an authorization

322
00:11:58,160 --> 00:12:00,320
endpoint issues a redirect to another

323
00:12:00,320 --> 00:12:02,720
domain with code or token appended to

324
00:12:02,720 --> 00:12:04,240
the url

325
00:12:04,240 --> 00:12:06,240
which is typically the case for all

326
00:12:06,240 --> 00:12:09,040
author essays whereas the policy only

327
00:12:09,040 --> 00:12:11,680
allows loading of resources from the

328
00:12:11,680 --> 00:12:14,320
page itself and the domain stretch right

329
00:12:14,320 --> 00:12:17,120
or after example.com here

330
00:12:17,120 --> 00:12:19,440
so at sutton said earlier an attempt to

331
00:12:19,440 --> 00:12:21,760
load resources from any of the domains

332
00:12:21,760 --> 00:12:23,920
with pilot policy and trigger the

333
00:12:23,920 --> 00:12:26,639
security policy evaluation event

334
00:12:26,639 --> 00:12:28,639
the document here right and then have

335
00:12:28,639 --> 00:12:31,839
this value of the actual tri and not to

336
00:12:31,839 --> 00:12:34,560
steal a reason

337
00:12:34,560 --> 00:12:36,320
we've also prepared a playground for

338
00:12:36,320 --> 00:12:38,560
everyone to make it easier to experiment

339
00:12:38,560 --> 00:12:41,120
with the vulnerability the utilities had

340
00:12:41,120 --> 00:12:43,760
simple and pretty straightforward

341
00:12:43,760 --> 00:12:45,920
they pass in a number of parameters as

342
00:12:45,920 --> 00:12:48,079
soon as you said on the left and depends

343
00:12:48,079 --> 00:12:50,240
on sets appropriate continuity policy

344
00:12:50,240 --> 00:12:52,560
using the interventional string

345
00:12:52,560 --> 00:12:54,800
and displays the two to add sound on the

346
00:12:54,800 --> 00:12:55,920
right

347
00:12:55,920 --> 00:12:58,240
there we have added an exploit button as

348
00:12:58,240 --> 00:13:00,639
a workaround for itp which something

349
00:13:00,639 --> 00:13:02,720
will explain a little later

350
00:13:02,720 --> 00:13:05,279
and after a little bit it issues a

351
00:13:05,279 --> 00:13:07,440
requests to the url specified in the

352
00:13:07,440 --> 00:13:08,639
creator stream

353
00:13:08,639 --> 00:13:10,800
which redirects to another domain

354
00:13:10,800 --> 00:13:13,120
causing sds revision

355
00:13:13,120 --> 00:13:14,880
the even listener would then print the

356
00:13:14,880 --> 00:13:18,240
secretaries on the screen

357
00:13:18,240 --> 00:13:20,160
the source code is also available in

358
00:13:20,160 --> 00:13:23,200
gita so feel free to use edit please

359
00:13:23,200 --> 00:13:25,360
prefer click or contribute however you

360
00:13:25,360 --> 00:13:27,600
want

361
00:13:28,639 --> 00:13:30,240
um

362
00:13:30,240 --> 00:13:32,639
we have a sort demo here

363
00:13:32,639 --> 00:13:34,639
in this demo will demonstrate how an

364
00:13:34,639 --> 00:13:35,920
attacker can

365
00:13:35,920 --> 00:13:38,160
use this vulnerability to take over

366
00:13:38,160 --> 00:13:41,120
instagram accounts

367
00:13:45,519 --> 00:13:47,199
so

368
00:13:47,199 --> 00:13:49,519
the attacker will first get the oauth

369
00:13:49,519 --> 00:13:54,800
url uh to get the nonsense state values

370
00:13:57,040 --> 00:13:59,040
so basically what an attacker is trying

371
00:13:59,040 --> 00:14:01,120
to do is trying to create

372
00:14:01,120 --> 00:14:05,519
a url that will be sent to the victim

373
00:14:09,360 --> 00:14:12,160
so yeah so the attacker will copy the

374
00:14:12,160 --> 00:14:15,120
full auth input url with nonsense state

375
00:14:15,120 --> 00:14:17,040
value then

376
00:14:17,040 --> 00:14:19,360
that particular url will be sent to the

377
00:14:19,360 --> 00:14:22,360
victim

378
00:14:43,839 --> 00:14:47,920
you know whenever the victim visits

379
00:14:47,920 --> 00:14:51,959
our poc url

380
00:14:58,000 --> 00:15:00,720
whenever the victim visits our ps url

381
00:15:00,720 --> 00:15:02,079
and

382
00:15:02,079 --> 00:15:06,120
somehow interacts with it

383
00:15:12,560 --> 00:15:13,839
um the

384
00:15:13,839 --> 00:15:16,000
access tokens of that particular users

385
00:15:16,000 --> 00:15:17,440
will be linked

386
00:15:17,440 --> 00:15:20,240
that then the attacker will use

387
00:15:20,240 --> 00:15:25,240
to logging into victims account

388
00:15:37,600 --> 00:15:38,399
so

389
00:15:38,399 --> 00:15:41,279
now you can see that the attacker is

390
00:15:41,279 --> 00:15:43,199
basically logged in as

391
00:15:43,199 --> 00:15:45,839
the victim

392
00:15:53,600 --> 00:15:54,560
okay

393
00:15:54,560 --> 00:15:56,800
now

394
00:15:57,120 --> 00:15:59,199
after that demo

395
00:15:59,199 --> 00:16:01,120
let's move on

396
00:16:01,120 --> 00:16:02,079
to the

397
00:16:02,079 --> 00:16:05,279
let's move on and discuss some impact

398
00:16:05,279 --> 00:16:06,320
um

399
00:16:06,320 --> 00:16:08,560
yeah it took us a while to understand

400
00:16:08,560 --> 00:16:11,199
the full impact of vulnerability at

401
00:16:11,199 --> 00:16:13,519
um the vulnerability did not just affect

402
00:16:13,519 --> 00:16:15,680
safari browser but because of the

403
00:16:15,680 --> 00:16:18,240
apple's app store policies that states

404
00:16:18,240 --> 00:16:20,720
that apple apps that browse the web must

405
00:16:20,720 --> 00:16:22,959
use the ios webkit framework and webkit

406
00:16:22,959 --> 00:16:25,440
javascript which means that web browsers

407
00:16:25,440 --> 00:16:26,880
can implement their own rendering

408
00:16:26,880 --> 00:16:28,880
engines they must embed a version of

409
00:16:28,880 --> 00:16:31,360
safari's rendering engine which made

410
00:16:31,360 --> 00:16:34,240
browsers like firefox chrome opera in

411
00:16:34,240 --> 00:16:36,639
ios devices flight level

412
00:16:36,639 --> 00:16:39,120
and due to the nature of design of oauth

413
00:16:39,120 --> 00:16:41,759
almost every implementation of what that

414
00:16:41,759 --> 00:16:44,560
exists were plunderable using the blog

415
00:16:44,560 --> 00:16:46,800
we could take over facebook instagram

416
00:16:46,800 --> 00:16:48,480
and whatsapp accounts

417
00:16:48,480 --> 00:16:50,800
the blog also affected google's sso

418
00:16:50,800 --> 00:16:52,720
which means google products using google

419
00:16:52,720 --> 00:16:54,399
accounts central authentication were

420
00:16:54,399 --> 00:16:55,759
also vulnerable

421
00:16:55,759 --> 00:16:57,440
cryptocurrency platforms social

422
00:16:57,440 --> 00:16:59,120
networking platforms e-commerce

423
00:16:59,120 --> 00:17:01,360
platforms and more in today's modern

424
00:17:01,360 --> 00:17:03,360
application it's very rare to find an

425
00:17:03,360 --> 00:17:05,439
application not using oauth so let's

426
00:17:05,439 --> 00:17:08,000
just say the numbers were very high and

427
00:17:08,000 --> 00:17:10,400
since the vulnerability affected sso so

428
00:17:10,400 --> 00:17:12,319
it's obvious that different sso

429
00:17:12,319 --> 00:17:15,039
providers were also affected by this

430
00:17:15,039 --> 00:17:17,679
and many applications nowadays make use

431
00:17:17,679 --> 00:17:19,919
of login with third-party feature such

432
00:17:19,919 --> 00:17:22,000
as login with facebook or google to

433
00:17:22,000 --> 00:17:23,919
provide the user with easy and seamless

434
00:17:23,919 --> 00:17:26,559
authentication experience and since most

435
00:17:26,559 --> 00:17:28,720
of these features make use of what these

436
00:17:28,720 --> 00:17:30,880
applications implementing login with

437
00:17:30,880 --> 00:17:33,679
feature were also affected thus allowing

438
00:17:33,679 --> 00:17:35,360
an attacker to take over accounts of

439
00:17:35,360 --> 00:17:37,679
platforms implementing these features

440
00:17:37,679 --> 00:17:39,520
for example if you have an e-commerce

441
00:17:39,520 --> 00:17:41,200
website where you have a feature that

442
00:17:41,200 --> 00:17:42,880
allows users to log in with facebook

443
00:17:42,880 --> 00:17:45,440
account then then an attacker could

444
00:17:45,440 --> 00:17:47,440
basically take over accounts of your

445
00:17:47,440 --> 00:17:49,679
users in your e-commerce website by

446
00:17:49,679 --> 00:17:53,520
stealing facebook or tokens

447
00:17:53,520 --> 00:17:55,360
moving on um

448
00:17:55,360 --> 00:17:57,679
let's discuss some roadblocks and common

449
00:17:57,679 --> 00:18:00,000
misunderstandings that we saw among

450
00:18:00,000 --> 00:18:02,400
security teams of different bug bounty

451
00:18:02,400 --> 00:18:03,840
programs

452
00:18:03,840 --> 00:18:06,640
starting with itp itp or intelligent

453
00:18:06,640 --> 00:18:10,720
tracking prevention is a privacy feature

454
00:18:10,720 --> 00:18:14,400
developed and implemented by webkit and

455
00:18:14,400 --> 00:18:17,679
it has been in use since october 2017.

456
00:18:17,679 --> 00:18:20,000
itv uses machine learning model to

457
00:18:20,000 --> 00:18:22,080
detect cross-site tracking capabilities

458
00:18:22,080 --> 00:18:24,240
and aims to reduce them by taking

459
00:18:24,240 --> 00:18:25,679
different actions such as full

460
00:18:25,679 --> 00:18:28,080
third-party cookie blocking reducing the

461
00:18:28,080 --> 00:18:30,000
accessibility and longevity of first

462
00:18:30,000 --> 00:18:32,080
party cookies local storage capping and

463
00:18:32,080 --> 00:18:34,240
deletion downgrading third-party

464
00:18:34,240 --> 00:18:36,240
referrers and more

465
00:18:36,240 --> 00:18:38,160
due to the nature of the attack where it

466
00:18:38,160 --> 00:18:40,400
relied on making third-party requests

467
00:18:40,400 --> 00:18:42,960
itp rendered the attack unusable on

468
00:18:42,960 --> 00:18:45,679
latest versions of webkit according to

469
00:18:45,679 --> 00:18:48,240
documentation from webkit to circumvent

470
00:18:48,240 --> 00:18:50,080
it um there needs to be a user

471
00:18:50,080 --> 00:18:52,080
interaction i could it could either be a

472
00:18:52,080 --> 00:18:54,559
tab a click or a use of the keyboard

473
00:18:54,559 --> 00:18:56,960
with your website as first party

474
00:18:56,960 --> 00:18:59,760
so in a real attack scenario we open up

475
00:18:59,760 --> 00:19:02,240
a tab using window.open and then we keep

476
00:19:02,240 --> 00:19:04,000
calling the vulnerable endpoint until

477
00:19:04,000 --> 00:19:06,000
the user interacts with it

478
00:19:06,000 --> 00:19:08,400
when we started submitting this

479
00:19:08,400 --> 00:19:10,160
vulnerability to several bug bounty

480
00:19:10,160 --> 00:19:12,160
programs we noticed that a few of them

481
00:19:12,160 --> 00:19:14,960
had similar misunderstanding around them

482
00:19:14,960 --> 00:19:17,120
a common misunderstanding among security

483
00:19:17,120 --> 00:19:18,960
teams of several programs was around

484
00:19:18,960 --> 00:19:21,600
authorization code unaware about its

485
00:19:21,600 --> 00:19:24,400
capabilities and how sensitive it is the

486
00:19:24,400 --> 00:19:26,480
misunderstanding was that without the

487
00:19:26,480 --> 00:19:28,480
ability to exchange authorization code

488
00:19:28,480 --> 00:19:30,799
for access tokens the authorization code

489
00:19:30,799 --> 00:19:32,880
were useless since exchanging them

490
00:19:32,880 --> 00:19:34,880
required application id and application

491
00:19:34,880 --> 00:19:36,000
secret

492
00:19:36,000 --> 00:19:38,320
while the statement above is true in a

493
00:19:38,320 --> 00:19:39,760
case where what was used for

494
00:19:39,760 --> 00:19:41,840
authentication simply having an access

495
00:19:41,840 --> 00:19:43,679
to authorization code was enough to get

496
00:19:43,679 --> 00:19:45,679
access to victims account

497
00:19:45,679 --> 00:19:47,600
making a request to an authorization

498
00:19:47,600 --> 00:19:50,000
endpoint with stolen authorization code

499
00:19:50,000 --> 00:19:51,440
with attacker

500
00:19:51,440 --> 00:19:53,280
state or non-stanley would allow an

501
00:19:53,280 --> 00:19:55,120
attacker to authenticate into a victim's

502
00:19:55,120 --> 00:19:57,520
account and another common

503
00:19:57,520 --> 00:19:59,679
misunderstanding was with regards to

504
00:19:59,679 --> 00:20:01,440
state or nonce value and its

505
00:20:01,440 --> 00:20:03,919
capabilities to prevent attack attacks

506
00:20:03,919 --> 00:20:05,039
in earth

507
00:20:05,039 --> 00:20:07,039
while using state in what is an

508
00:20:07,039 --> 00:20:09,039
excellent way to prevent csrf attacks

509
00:20:09,039 --> 00:20:11,200
and to redirect users to where they were

510
00:20:11,200 --> 00:20:12,640
before the authentication process

511
00:20:12,640 --> 00:20:13,679
started

512
00:20:13,679 --> 00:20:15,919
apart from that the state really doesn't

513
00:20:15,919 --> 00:20:18,240
provide any additional security features

514
00:20:18,240 --> 00:20:20,559
even if the state value is bound to a

515
00:20:20,559 --> 00:20:21,520
token

516
00:20:21,520 --> 00:20:23,440
an attacker can generate a fresh state

517
00:20:23,440 --> 00:20:25,760
value which then can be attached to an

518
00:20:25,760 --> 00:20:28,159
endpoint url to center the victim the

519
00:20:28,159 --> 00:20:30,320
resulting token of the request then can

520
00:20:30,320 --> 00:20:33,200
be used by an attacker without an issue

521
00:20:33,200 --> 00:20:35,120
the same thing was also demonstrated in

522
00:20:35,120 --> 00:20:37,280
our demo above where we saw that

523
00:20:37,280 --> 00:20:39,600
non-value or state value did nothing to

524
00:20:39,600 --> 00:20:42,399
prevent the attack

525
00:20:42,720 --> 00:20:45,200
um moving on uh these are some of the

526
00:20:45,200 --> 00:20:47,200
stats based on bulk boundary programs

527
00:20:47,200 --> 00:20:49,120
and reports we made

528
00:20:49,120 --> 00:20:51,520
in total we were able to harvest more

529
00:20:51,520 --> 00:20:54,240
than 100k dollars in bounties and the

530
00:20:54,240 --> 00:20:55,840
response from the bog money programs

531
00:20:55,840 --> 00:20:58,240
were kind of mixed while some programs

532
00:20:58,240 --> 00:21:00,000
took the issue very seriously and

533
00:21:00,000 --> 00:21:01,919
applied a fix in under 21 hours which

534
00:21:01,919 --> 00:21:03,440
was really impressive

535
00:21:03,440 --> 00:21:05,440
some took months to just understand the

536
00:21:05,440 --> 00:21:07,440
blendability and some of the programs

537
00:21:07,440 --> 00:21:09,760
also relied on webkit to come up with a

538
00:21:09,760 --> 00:21:11,919
fix some programs like dropbox and

539
00:21:11,919 --> 00:21:13,919
poloniex took it one step further by

540
00:21:13,919 --> 00:21:16,240
using their contacts at apple and asking

541
00:21:16,240 --> 00:21:18,159
them to come up with a fix

542
00:21:18,159 --> 00:21:20,159
the highest single reward was given by

543
00:21:20,159 --> 00:21:22,480
coinbase which was also the fastest

544
00:21:22,480 --> 00:21:24,559
program to fix the issue

545
00:21:24,559 --> 00:21:27,120
and apple took more than a year a total

546
00:21:27,120 --> 00:21:30,799
of 457 days to come up with the fix and

547
00:21:30,799 --> 00:21:32,960
in the end decided that the box does not

548
00:21:32,960 --> 00:21:35,360
qualify to be awarded a bounty because

549
00:21:35,360 --> 00:21:37,520
it does not meet the published bounty

550
00:21:37,520 --> 00:21:40,960
categories and ironically while this bug

551
00:21:40,960 --> 00:21:43,200
in wave kit makes up made so many

552
00:21:43,200 --> 00:21:45,360
applications in the internet plunderable

553
00:21:45,360 --> 00:21:48,000
the apple's implementation of sso and

554
00:21:48,000 --> 00:21:51,840
oauth were not fundable

555
00:21:56,080 --> 00:21:58,400
we saw how we can exploit vulnerability

556
00:21:58,400 --> 00:22:00,640
and how severe it could be

557
00:22:00,640 --> 00:22:04,000
now let's discuss some fixes as well

558
00:22:04,000 --> 00:22:06,320
as a developer or a site owner we can

559
00:22:06,320 --> 00:22:08,159
use any or a combination of these

560
00:22:08,159 --> 00:22:10,159
methods to prevent such vulnerabilities

561
00:22:10,159 --> 00:22:11,679
altogether

562
00:22:11,679 --> 00:22:13,600
they're all very easy to understand and

563
00:22:13,600 --> 00:22:16,400
internet as well the first one is to use

564
00:22:16,400 --> 00:22:18,799
post message post method instead of get

565
00:22:18,799 --> 00:22:20,559
which actually aligns with the practice

566
00:22:20,559 --> 00:22:21,840
of never sending any sensitive

567
00:22:21,840 --> 00:22:24,080
information over the url

568
00:22:24,080 --> 00:22:26,799
for example saml or a security assertion

569
00:22:26,799 --> 00:22:28,799
backup language already uses post

570
00:22:28,799 --> 00:22:31,840
instead of get for transporting tokens

571
00:22:31,840 --> 00:22:33,919
the second one is to use post message

572
00:22:33,919 --> 00:22:36,720
for crosstalking communication

573
00:22:36,720 --> 00:22:39,840
these two fixes are also supported by or

574
00:22:39,840 --> 00:22:41,840
autofinite connect as can be seen in the

575
00:22:41,840 --> 00:22:43,360
image on the right

576
00:22:43,360 --> 00:22:45,440
they could be specified by a responsible

577
00:22:45,440 --> 00:22:47,120
mode as long as the authorization server

578
00:22:47,120 --> 00:22:48,480
supports

579
00:22:48,480 --> 00:22:50,799
however it's still necessary to disable

580
00:22:50,799 --> 00:22:53,120
a remote support for equity and

581
00:22:53,120 --> 00:22:55,520
frightening modes

582
00:22:55,520 --> 00:22:57,520
the most effective one in my opinion is

583
00:22:57,520 --> 00:22:59,919
the thought on sensations

584
00:22:59,919 --> 00:23:01,760
it not only protects against this

585
00:23:01,760 --> 00:23:03,440
particular vulnerability but makes

586
00:23:03,440 --> 00:23:05,120
almost all kinds of vulnerabilities in

587
00:23:05,120 --> 00:23:06,400
facebook

588
00:23:06,400 --> 00:23:07,919
since like cook is also protected quite

589
00:23:07,919 --> 00:23:10,720
a few programs in our campaign

590
00:23:10,720 --> 00:23:13,120
now similarly we have exceedfor oauth

591
00:23:13,120 --> 00:23:15,440
which makes the exploit useless because

592
00:23:15,440 --> 00:23:17,520
we also need code verifier to make the

593
00:23:17,520 --> 00:23:19,520
use of link code

594
00:23:19,520 --> 00:23:20,960
the other one is to ask for

595
00:23:20,960 --> 00:23:22,880
authorization every single time also

596
00:23:22,880 --> 00:23:25,039
supported by open id using

597
00:23:25,039 --> 00:23:27,200
using the prompt parameter

598
00:23:27,200 --> 00:23:29,760
and apple does the exact same and others

599
00:23:29,760 --> 00:23:31,039
too

600
00:23:31,039 --> 00:23:32,960
one can also use client-side redirects

601
00:23:32,960 --> 00:23:36,240
instead of 301 or 302 in combination

602
00:23:36,240 --> 00:23:38,240
with electrons on their css frame

603
00:23:38,240 --> 00:23:39,919
ancestors

604
00:23:39,919 --> 00:23:42,320
literature for example uses this method

605
00:23:42,320 --> 00:23:44,080
free to react and may

606
00:23:44,080 --> 00:23:45,679
have many programs within the

607
00:23:45,679 --> 00:23:48,320
variability to also fix this fixed issue

608
00:23:48,320 --> 00:23:49,279
using this

609
00:23:49,279 --> 00:23:50,640
approach

610
00:23:50,640 --> 00:23:53,039
the last one is to validate refer

611
00:23:53,039 --> 00:23:55,520
reason against client although we do not

612
00:23:55,520 --> 00:23:57,279
recommend using this approach as it

613
00:23:57,279 --> 00:23:59,600
suffers from the same issues as with

614
00:23:59,600 --> 00:24:03,959
cesar projection with referral

615
00:24:04,000 --> 00:24:05,440
there's also something called a short

616
00:24:05,440 --> 00:24:07,919
isolation policy which uses facebook

617
00:24:07,919 --> 00:24:10,320
editor but if unfortunately safari

618
00:24:10,320 --> 00:24:13,440
doesn't yet support them

619
00:24:13,440 --> 00:24:14,240
uh

620
00:24:14,240 --> 00:24:16,320
bras also have some mitigations in place

621
00:24:16,320 --> 00:24:18,400
to avoid athletics besides summers in

622
00:24:18,400 --> 00:24:19,840
policy

623
00:24:19,840 --> 00:24:22,880
however the strategies listed here are

624
00:24:22,880 --> 00:24:25,200
specific to csp we have something coming

625
00:24:25,200 --> 00:24:28,320
up that these strategies do not cover

626
00:24:28,320 --> 00:24:30,799
for now let's visually go over them

627
00:24:30,799 --> 00:24:32,559
the evaluation reports now include the

628
00:24:32,559 --> 00:24:35,120
url of the original request meaning we

629
00:24:35,120 --> 00:24:38,000
only get what we already know

630
00:24:38,000 --> 00:24:39,919
uh furthermore we'll just know the path

631
00:24:39,919 --> 00:24:42,640
component uh after research of the sword

632
00:24:42,640 --> 00:24:45,200
saturation if the resource being loaded

633
00:24:45,200 --> 00:24:47,120
is the result of it redirect this is

634
00:24:47,120 --> 00:24:49,440
supervillain making attack information

635
00:24:49,440 --> 00:24:51,200
which was demonstrated

636
00:24:51,200 --> 00:24:53,360
post on this week also gives an example

637
00:24:53,360 --> 00:24:55,679
of a fair easier understanding

638
00:24:55,679 --> 00:24:58,799
but we'll leave it at that

639
00:24:59,039 --> 00:25:02,480
well we plan to release it as an audi at

640
00:25:02,480 --> 00:25:04,799
back at europe but apple fixed it right

641
00:25:04,799 --> 00:25:06,240
before our talk

642
00:25:06,240 --> 00:25:07,760
and it no longer works in the latest

643
00:25:07,760 --> 00:25:10,000
version of safari but let's discuss it

644
00:25:10,000 --> 00:25:12,960
anyway along with my bosses

645
00:25:12,960 --> 00:25:15,039
ashrae reports many programs including

646
00:25:15,039 --> 00:25:16,799
facebook and coinbase and they came up

647
00:25:16,799 --> 00:25:18,640
with their own pixels

648
00:25:18,640 --> 00:25:20,960
and their fixes revolve around checking

649
00:25:20,960 --> 00:25:23,039
if the user is in each of safari and

650
00:25:23,039 --> 00:25:25,279
only if it is they would use a different

651
00:25:25,279 --> 00:25:27,679
phones for all other users and their

652
00:25:27,679 --> 00:25:29,760
workflow remains the same

653
00:25:29,760 --> 00:25:31,679
so it seemed a simple change of future

654
00:25:31,679 --> 00:25:33,679
is injured by fast effects and an

655
00:25:33,679 --> 00:25:35,919
obvious place to try it both on iphones

656
00:25:35,919 --> 00:25:37,600
or ipads since

657
00:25:37,600 --> 00:25:39,760
all browsers on ios devices must use

658
00:25:39,760 --> 00:25:42,000
webgate as denzin are all essentially

659
00:25:42,000 --> 00:25:43,679
the same

660
00:25:43,679 --> 00:25:46,799
just using chrome it didn't work but

661
00:25:46,799 --> 00:25:48,640
sending to desktop side

662
00:25:48,640 --> 00:25:50,880
however the change of user is it wasn't

663
00:25:50,880 --> 00:25:53,520
inherited in such great fetch requests

664
00:25:53,520 --> 00:25:55,679
so we tried all requests from a project

665
00:25:55,679 --> 00:25:57,919
called http3

666
00:25:57,919 --> 00:25:58,799
and

667
00:25:58,799 --> 00:26:01,360
found that i'm taping our anchor with

668
00:26:01,360 --> 00:26:04,799
being attributed to the work

669
00:26:04,799 --> 00:26:07,039
we had at another bypass but during our

670
00:26:07,039 --> 00:26:09,200
hunt for bypasses we noticed something

671
00:26:09,200 --> 00:26:10,799
particular

672
00:26:10,799 --> 00:26:12,720
after some digging we realized that

673
00:26:12,720 --> 00:26:15,919
we've already found another zero day

674
00:26:15,919 --> 00:26:19,039
and this time it wasn't csp but across

675
00:26:19,039 --> 00:26:21,840
original resource sharing occurs

676
00:26:21,840 --> 00:26:24,159
the finding was as easy as song here we

677
00:26:24,159 --> 00:26:26,400
just needed to add a cat's header to our

678
00:26:26,400 --> 00:26:28,480
best request and distribute the

679
00:26:28,480 --> 00:26:30,960
destination url

680
00:26:30,960 --> 00:26:32,559
we set our plan to disclose the

681
00:26:32,559 --> 00:26:34,559
vulnerability with apple and

682
00:26:34,559 --> 00:26:37,279
surprisingly caspex right to our dock

683
00:26:37,279 --> 00:26:39,679
without us ever being notified

684
00:26:39,679 --> 00:26:42,400
and it turns out that other researchers

685
00:26:42,400 --> 00:26:45,440
had also found the same variabilities

686
00:26:45,440 --> 00:26:47,840
our newspaper was released a few days

687
00:26:47,840 --> 00:26:50,000
back on access to leaks which also had

688
00:26:50,000 --> 00:26:53,840
its variability in their test cases

689
00:26:54,080 --> 00:26:56,640
and now the three key things to take

690
00:26:56,640 --> 00:26:59,039
away are same side cookies

691
00:26:59,039 --> 00:27:01,679
can be super helpful to prevent any

692
00:27:01,679 --> 00:27:03,440
cross advantabilities

693
00:27:03,440 --> 00:27:05,520
i use defense index to mitigate browser

694
00:27:05,520 --> 00:27:07,360
slots instead of entirely relying on

695
00:27:07,360 --> 00:27:09,520
browsers because browsers do not always

696
00:27:09,520 --> 00:27:12,320
follow the spec completely

697
00:27:12,320 --> 00:27:15,600
with that we're at the nfl presentation

698
00:27:15,600 --> 00:27:18,000
thank you for listening

699
00:27:18,000 --> 00:27:20,640
we hope you enjoyed insert detail

700
00:27:20,640 --> 00:27:22,799
thank you again

701
00:27:22,799 --> 00:27:25,279
thank you

702
00:27:28,080 --> 00:27:32,120
okay thank you

703
00:27:36,000 --> 00:27:38,000
so we're going to be taking a number of

704
00:27:38,000 --> 00:27:39,120
questions

705
00:27:39,120 --> 00:27:41,120
in the room but there are already some

706
00:27:41,120 --> 00:27:44,320
questions coming from the ierc

707
00:27:44,320 --> 00:27:45,919
so thank you for

708
00:27:45,919 --> 00:27:47,600
that um

709
00:27:47,600 --> 00:27:50,000
interesting talk

710
00:27:50,000 --> 00:27:51,679
and we got question about the

711
00:27:51,679 --> 00:27:53,679
vulnerability that you

712
00:27:53,679 --> 00:27:56,159
found in webkit is it also present in a

713
00:27:56,159 --> 00:27:57,919
gaming consoles

714
00:27:57,919 --> 00:28:00,960
such as a nintendo switch or playstation

715
00:28:00,960 --> 00:28:04,080
and uh has it been fixed

716
00:28:04,080 --> 00:28:05,200
um

717
00:28:05,200 --> 00:28:08,000
yes uh since uh the plunderability was

718
00:28:08,000 --> 00:28:12,159
in webkit uh so yeah every uh

719
00:28:12,159 --> 00:28:14,080
every gaming consoles or any other

720
00:28:14,080 --> 00:28:16,159
applications that means use of uh made

721
00:28:16,159 --> 00:28:18,000
use of that particular webkit version

722
00:28:18,000 --> 00:28:20,640
where uh vlan level but then in our test

723
00:28:20,640 --> 00:28:23,039
cases and different tests that we run we

724
00:28:23,039 --> 00:28:25,919
did not uh we did not uh check for those

725
00:28:25,919 --> 00:28:28,320
plan abilities in those gaming consoles

726
00:28:28,320 --> 00:28:30,640
so we're not uh

727
00:28:30,640 --> 00:28:32,880
so yeah uh but then uh since the new

728
00:28:32,880 --> 00:28:34,799
webkit version that was released after

729
00:28:34,799 --> 00:28:37,120
we reported uh the vulnerability to

730
00:28:37,120 --> 00:28:39,200
apple came with a fix so if those gaming

731
00:28:39,200 --> 00:28:41,200
consoles uh updated their webkit

732
00:28:41,200 --> 00:28:45,840
versions then uh the bug is fixed there

733
00:28:47,200 --> 00:28:48,159
okay

734
00:28:48,159 --> 00:28:50,559
uh so got another question about at one

735
00:28:50,559 --> 00:28:53,440
point you you mentioned that um coinbase

736
00:28:53,440 --> 00:28:57,600
and also uh facebook uh paid bounty

737
00:28:57,600 --> 00:28:59,520
maybe only convey paid ubuntu but

738
00:28:59,520 --> 00:29:02,240
facebook fix the vulnerability which

739
00:29:02,240 --> 00:29:04,559
means that they basically understood the

740
00:29:04,559 --> 00:29:08,240
vulnerability uh but if the view

741
00:29:08,240 --> 00:29:09,760
was in the browser

742
00:29:09,760 --> 00:29:11,600
were they able to fix it

743
00:29:11,600 --> 00:29:15,039
in an efficient and effective way

744
00:29:15,039 --> 00:29:17,840
yeah so uh so i think we reported uh

745
00:29:17,840 --> 00:29:20,640
this particular issue to around um

746
00:29:20,640 --> 00:29:23,360
25 to 30 different programs including

747
00:29:23,360 --> 00:29:25,360
co-invest and facebook and

748
00:29:25,360 --> 00:29:27,039
almost um

749
00:29:27,039 --> 00:29:29,360
out of 25 to 30 i guess almost 90

750
00:29:29,360 --> 00:29:31,760
percent of those programs paid bounty to

751
00:29:31,760 --> 00:29:33,360
us and then

752
00:29:33,360 --> 00:29:35,440
yeah uh the coinbase took the issue

753
00:29:35,440 --> 00:29:37,679
really seriously and uh they knew that

754
00:29:37,679 --> 00:29:40,240
the vlon was in the browser itself but

755
00:29:40,240 --> 00:29:42,399
uh there were different uh code changes

756
00:29:42,399 --> 00:29:43,760
that they could take which would

757
00:29:43,760 --> 00:29:46,000
basically allow them to fix that

758
00:29:46,000 --> 00:29:47,840
vulnerability although the plan was

759
00:29:47,840 --> 00:29:50,799
dependent on browser so yeah we uh

760
00:29:50,799 --> 00:29:53,919
suggested suggested them a few different

761
00:29:53,919 --> 00:29:55,520
approaches uh

762
00:29:55,520 --> 00:29:57,360
uh different approaches that uh

763
00:29:57,360 --> 00:30:00,559
broadcast also discussed uh in his uh

764
00:30:00,559 --> 00:30:03,279
discussed in his slides uh and yeah

765
00:30:03,279 --> 00:30:04,960
using those uh

766
00:30:04,960 --> 00:30:07,200
using those suggested fixes uh coinbase

767
00:30:07,200 --> 00:30:09,600
were able to fix the vulnerability and

768
00:30:09,600 --> 00:30:11,840
in fact uh both coinbase and facebook

769
00:30:11,840 --> 00:30:13,600
they came up with a similar approach to

770
00:30:13,600 --> 00:30:15,520
fixed up vulnerability which was to

771
00:30:15,520 --> 00:30:18,080
first check if uh the user isn't is from

772
00:30:18,080 --> 00:30:20,720
us webkit based browsers and if the uh

773
00:30:20,720 --> 00:30:22,559
if the request coming in is from

774
00:30:22,559 --> 00:30:24,799
webkit-based browsers then instead of

775
00:30:24,799 --> 00:30:27,520
doing 302 redirection they implemented a

776
00:30:27,520 --> 00:30:29,600
client-side redirection uh that

777
00:30:29,600 --> 00:30:32,559
basically fixed the issue so yeah both

778
00:30:32,559 --> 00:30:34,080
of these programs came up with their own

779
00:30:34,080 --> 00:30:35,840
fix which was quite similar to each

780
00:30:35,840 --> 00:30:37,360
other

781
00:30:37,360 --> 00:30:39,200
and they were able to fix their

782
00:30:39,200 --> 00:30:43,279
flyability in a really effective way

783
00:30:43,840 --> 00:30:46,559
okay even so if you can easily change

784
00:30:46,559 --> 00:30:49,760
the user agent

785
00:30:49,760 --> 00:30:52,159
so yeah uh so in that case so one of our

786
00:30:52,159 --> 00:30:54,480
bypasses i think uh broadcast would like

787
00:30:54,480 --> 00:30:56,960
to discuss it like uh one of those

788
00:30:56,960 --> 00:30:59,840
bypasses in mobile desktop best browsers

789
00:30:59,840 --> 00:31:03,480
i think uh broadcast

790
00:31:04,480 --> 00:31:06,880
yeah actually uh that that's where we

791
00:31:06,880 --> 00:31:09,120
you know searched for bypasses and then

792
00:31:09,120 --> 00:31:10,159
we

793
00:31:10,159 --> 00:31:12,000
found that tending to texture is

794
00:31:12,000 --> 00:31:15,120
included by positive fake impacts but uh

795
00:31:15,120 --> 00:31:17,519
it kind of required uh like uh it

796
00:31:17,519 --> 00:31:20,480
required quite an interaction so it was

797
00:31:20,480 --> 00:31:22,720
like to bypass the itv

798
00:31:22,720 --> 00:31:25,039
it already required a click and then

799
00:31:25,039 --> 00:31:26,960
it changed users and that required

800
00:31:26,960 --> 00:31:29,120
another user interaction so they decided

801
00:31:29,120 --> 00:31:31,279
not to fix it that way because it also

802
00:31:31,279 --> 00:31:32,480
depended on the

803
00:31:32,480 --> 00:31:34,960
browsers so

804
00:31:34,960 --> 00:31:36,080
though they

805
00:31:36,080 --> 00:31:38,320
didn't fix it the

806
00:31:38,320 --> 00:31:41,600
safari fixed it uh

807
00:31:41,679 --> 00:31:43,679
i think almost at the same time so they

808
00:31:43,679 --> 00:31:46,080
decided not to make any further changes

809
00:31:46,080 --> 00:31:48,399
on their implementation

810
00:31:48,399 --> 00:31:49,200
so

811
00:31:49,200 --> 00:31:52,159
yeah it's it no longer works and their

812
00:31:52,159 --> 00:31:53,600
fix is

813
00:31:53,600 --> 00:31:56,960
a perfect software i think okay

814
00:31:56,960 --> 00:31:59,039
thank you uh are there any other

815
00:31:59,039 --> 00:32:01,200
question

816
00:32:01,200 --> 00:32:05,600
apparently not so thank you again

