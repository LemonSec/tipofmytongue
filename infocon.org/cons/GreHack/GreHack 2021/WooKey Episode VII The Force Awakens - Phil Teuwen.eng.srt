1
00:00:04,560 --> 00:00:32,238
[Music]

2
00:00:32,238 --> 00:00:34,480
hello i've speed up a bit into because

3
00:00:34,480 --> 00:00:36,399
we don't have tools in front of us and

4
00:00:36,399 --> 00:00:38,480
maybe this little sound distortion will

5
00:00:38,480 --> 00:00:40,559
prevent the band from youtube copyright

6
00:00:40,559 --> 00:00:43,600
bots who knows

7
00:00:43,600 --> 00:00:46,239
i'm phil toen dugox on the internet i'm

8
00:00:46,239 --> 00:00:48,000
a team leader of the cryptography

9
00:00:48,000 --> 00:00:50,320
embedded security team at quartz lab and

10
00:00:50,320 --> 00:00:52,480
you may have heard me about me from

11
00:00:52,480 --> 00:00:54,800
various topics mixing hardware and

12
00:00:54,800 --> 00:00:56,239
software

13
00:00:56,239 --> 00:00:58,719
like gribox attacks against whitebox

14
00:00:58,719 --> 00:01:01,280
crypto tier of attacks against eeprom

15
00:01:01,280 --> 00:01:04,479
such as in rfid and nfc tags

16
00:01:04,479 --> 00:01:06,479
attacks on the titan m with some chip

17
00:01:06,479 --> 00:01:09,040
off and micro soldering

18
00:01:09,040 --> 00:01:11,040
i'm also in the nfc in the proxmog

19
00:01:11,040 --> 00:01:14,240
project i organize hardware oriented

20
00:01:14,240 --> 00:01:17,360
ctfs and i'm in the tutorial team of the

21
00:01:17,360 --> 00:01:20,000
poco gtfo if you don't know it yet i

22
00:01:20,000 --> 00:01:22,159
encourage you strongly to have a look at

23
00:01:22,159 --> 00:01:24,240
it later

24
00:01:24,240 --> 00:01:26,880
so what's the glue key wookie

25
00:01:26,880 --> 00:01:29,680
it's a secure usb master edge developed

26
00:01:29,680 --> 00:01:31,360
by the nc

27
00:01:31,360 --> 00:01:33,439
on the left you see a prototype of the

28
00:01:33,439 --> 00:01:36,000
concept on the right a development board

29
00:01:36,000 --> 00:01:39,119
with its components

30
00:01:39,119 --> 00:01:43,119
uh so it's use an encrypted sd card for

31
00:01:43,119 --> 00:01:46,240
the storage and there is a touchscreen

32
00:01:46,240 --> 00:01:48,320
with as you can see a randomized

33
00:01:48,320 --> 00:01:52,479
keyboard layout at each booty change

34
00:01:52,479 --> 00:01:54,399
and there is also

35
00:01:54,399 --> 00:01:58,240
a slot for a smart card java card

36
00:01:58,240 --> 00:01:59,119
where

37
00:01:59,119 --> 00:02:02,320
the keys needed to decrypt the storage

38
00:02:02,320 --> 00:02:05,039
are held

39
00:02:05,920 --> 00:02:09,038
so how to use it you plug it to your pc

40
00:02:09,038 --> 00:02:13,040
usb you insert the authentication token

41
00:02:13,040 --> 00:02:15,520
you type in first pin which is called

42
00:02:15,520 --> 00:02:17,040
the pet pin

43
00:02:17,040 --> 00:02:18,959
if it's correct the rookie will display

44
00:02:18,959 --> 00:02:21,280
its little pet name

45
00:02:21,280 --> 00:02:22,879
and then you can type the real pin to

46
00:02:22,879 --> 00:02:25,599
decrypt the sd card and the master edge

47
00:02:25,599 --> 00:02:27,920
will appear on your machine

48
00:02:27,920 --> 00:02:29,599
the first phase with the pet pen and

49
00:02:29,599 --> 00:02:31,920
pattern it allows you to detect an

50
00:02:31,920 --> 00:02:34,000
attempt of fishing with a fake wookie

51
00:02:34,000 --> 00:02:36,160
for example if the wookie you have in

52
00:02:36,160 --> 00:02:38,319
hand cannot show you the expected pet

53
00:02:38,319 --> 00:02:39,120
nam

54
00:02:39,120 --> 00:02:41,200
beware maybe someone is trying to steal

55
00:02:41,200 --> 00:02:43,519
your user pin and decrypt your stolen

56
00:02:43,519 --> 00:02:45,920
wookie

57
00:02:45,920 --> 00:02:48,879
a bit of context or why i'm talking

58
00:02:48,879 --> 00:02:53,200
about a few hardware hacks on the wookie

59
00:02:53,200 --> 00:02:55,040
with the nc in france which is the

60
00:02:55,040 --> 00:02:58,000
national cyber security agency it

61
00:02:58,000 --> 00:03:00,319
delivers certifications to products

62
00:03:00,319 --> 00:03:02,879
which are called cspn that's french for

63
00:03:02,879 --> 00:03:04,879
first level certificate security

64
00:03:04,879 --> 00:03:06,560
certification

65
00:03:06,560 --> 00:03:08,720
and this certification rely on security

66
00:03:08,720 --> 00:03:11,200
evaluations performed by private labs

67
00:03:11,200 --> 00:03:13,360
they are called system french

68
00:03:13,360 --> 00:03:15,120
information technology security

69
00:03:15,120 --> 00:03:16,959
evolution facility

70
00:03:16,959 --> 00:03:19,200
quartz lab is one of the cst it's a

71
00:03:19,200 --> 00:03:21,120
software ssd by opposition with the

72
00:03:21,120 --> 00:03:22,959
hardware ssd

73
00:03:22,959 --> 00:03:25,519
and and c organized regularly so called

74
00:03:25,519 --> 00:03:28,159
intercessive challenges typically on

75
00:03:28,159 --> 00:03:29,840
open source products

76
00:03:29,840 --> 00:03:33,440
to check how these labs perform

77
00:03:33,440 --> 00:03:35,360
and the last product to be audited was

78
00:03:35,360 --> 00:03:36,480
the woogie

79
00:03:36,480 --> 00:03:38,159
so it's an open source project developed

80
00:03:38,159 --> 00:03:40,400
by the nc itself they designed both the

81
00:03:40,400 --> 00:03:42,159
hardware and the software and they try

82
00:03:42,159 --> 00:03:44,720
to implement best security practice in

83
00:03:44,720 --> 00:03:46,959
all the layers of the products so really

84
00:03:46,959 --> 00:03:49,599
a good defense in-depth approach

85
00:03:49,599 --> 00:03:52,239
we settled quite large evaluation plan

86
00:03:52,239 --> 00:03:54,480
and each cst received a part of it so

87
00:03:54,480 --> 00:03:56,560
each cst looked at different portion of

88
00:03:56,560 --> 00:03:58,159
the product

89
00:03:58,159 --> 00:04:00,560
and novelty for this entire sst the

90
00:04:00,560 --> 00:04:02,640
evaluation items and the skills were

91
00:04:02,640 --> 00:04:05,519
mixed so the software sst had also to

92
00:04:05,519 --> 00:04:08,560
evaluate some hardware aspects

93
00:04:08,560 --> 00:04:11,519
and vice versa

94
00:04:11,519 --> 00:04:13,200
clearly this talk is not much about the

95
00:04:13,200 --> 00:04:15,840
wookie itself this is labeled episode 7

96
00:04:15,840 --> 00:04:18,000
for some reason i'm aware of at least

97
00:04:18,000 --> 00:04:20,000
four previous tools on the wookie so you

98
00:04:20,000 --> 00:04:22,000
can easily find online more details on

99
00:04:22,000 --> 00:04:24,880
the internals and the layers of defense

100
00:04:24,880 --> 00:04:28,320
and with episode 7 i have some imagine

101
00:04:28,320 --> 00:04:30,960
now what i want to show you is how you

102
00:04:30,960 --> 00:04:33,280
can mount hardware attacks yourself

103
00:04:33,280 --> 00:04:36,639
quite easily without expecting expensive

104
00:04:36,639 --> 00:04:38,320
equipments

105
00:04:38,320 --> 00:04:39,680
i've picked

106
00:04:39,680 --> 00:04:42,479
three topics to give you an overview how

107
00:04:42,479 --> 00:04:45,199
to mount timing attack on a java card

108
00:04:45,199 --> 00:04:46,800
or smart card

109
00:04:46,800 --> 00:04:48,960
how to automate a pin brute force by

110
00:04:48,960 --> 00:04:51,520
hijacking a user interface and how to

111
00:04:51,520 --> 00:04:53,600
set up an electromagic fault injection

112
00:04:53,600 --> 00:04:56,320
test bench at home

113
00:04:56,320 --> 00:04:58,479
so let's go for the first example the

114
00:04:58,479 --> 00:05:00,720
idea is to check if a pin validation

115
00:05:00,720 --> 00:05:02,320
doesn't make anything

116
00:05:02,320 --> 00:05:04,560
in its response delay that would give us

117
00:05:04,560 --> 00:05:05,919
information

118
00:05:05,919 --> 00:05:08,639
useful to find the correct pin

119
00:05:08,639 --> 00:05:11,120
here i show you again the cards used in

120
00:05:11,120 --> 00:05:13,199
the rookie but the same principle

121
00:05:13,199 --> 00:05:15,199
applies for example on passwords to

122
00:05:15,199 --> 00:05:17,360
unlock a microcontroller like an ecu

123
00:05:17,360 --> 00:05:20,000
secure session or on a locked gtac port

124
00:05:20,000 --> 00:05:21,120
etc

125
00:05:21,120 --> 00:05:23,120
the id is very simple you send the pin

126
00:05:23,120 --> 00:05:25,120
or the password and you measure how much

127
00:05:25,120 --> 00:05:28,479
time it takes for the card to respond

128
00:05:28,479 --> 00:05:30,240
if the pin is correct the timing will

129
00:05:30,240 --> 00:05:32,160
probably be quite different but that's

130
00:05:32,160 --> 00:05:34,400
fine that's when you know the pin the

131
00:05:34,400 --> 00:05:36,720
problem can occur if you get slightly

132
00:05:36,720 --> 00:05:38,960
different timings between a completely

133
00:05:38,960 --> 00:05:41,039
wrong pin and one

134
00:05:41,039 --> 00:05:43,280
with for example the first digit correct

135
00:05:43,280 --> 00:05:45,440
or the length correct

136
00:05:45,440 --> 00:05:48,240
so for example here

137
00:05:48,240 --> 00:05:51,039
if it's a pin one two three four

138
00:05:51,039 --> 00:05:54,240
you measure the timing for 999 and the

139
00:05:54,240 --> 00:05:57,199
timing for 1999 and maybe the timing of

140
00:05:57,199 --> 00:05:59,280
that one will be slightly longer than

141
00:05:59,280 --> 00:06:00,400
this one

142
00:06:00,400 --> 00:06:02,080
if for example

143
00:06:02,080 --> 00:06:04,800
the card is stupidly checking the digits

144
00:06:04,800 --> 00:06:06,560
one by one

145
00:06:06,560 --> 00:06:08,400
uh maybe it's reverse so it's good to

146
00:06:08,400 --> 00:06:11,680
test also the end and maybe the problem

147
00:06:11,680 --> 00:06:13,759
is on the

148
00:06:13,759 --> 00:06:16,080
length of the pin so when you try to pin

149
00:06:16,080 --> 00:06:17,600
off the correct length you will get a

150
00:06:17,600 --> 00:06:20,560
different result than when the length is

151
00:06:20,560 --> 00:06:23,440
is incorrect

152
00:06:24,080 --> 00:06:26,720
spoiler alert in the source code of the

153
00:06:26,720 --> 00:06:30,000
wookie we see they use the java cart api

154
00:06:30,000 --> 00:06:32,479
in their plat so there is nothing really

155
00:06:32,479 --> 00:06:34,960
suspicious over there but still let's

156
00:06:34,960 --> 00:06:36,560
see how we can

157
00:06:36,560 --> 00:06:39,440
mount such attack

158
00:06:39,520 --> 00:06:41,680
what do you need to mount it a logic

159
00:06:41,680 --> 00:06:44,560
analyzer a cheap one is okay because

160
00:06:44,560 --> 00:06:46,800
smart car is almost like a uart with a

161
00:06:46,800 --> 00:06:49,199
single line mixing eric's antiques and

162
00:06:49,199 --> 00:06:52,080
you can see here the pinout

163
00:06:52,080 --> 00:06:54,160
so you for one io

164
00:06:54,160 --> 00:06:56,720
which represents really what you get as

165
00:06:56,720 --> 00:07:02,080
eric's and takes on a regular reward

166
00:07:02,080 --> 00:07:03,520
and you need of course the ground to

167
00:07:03,520 --> 00:07:05,360
have a reference and you write a little

168
00:07:05,360 --> 00:07:07,599
script to do trace acquisitions and to

169
00:07:07,599 --> 00:07:09,919
send comments on the smart card

170
00:07:09,919 --> 00:07:11,759
you need to choose a target i accept

171
00:07:11,759 --> 00:07:13,520
quite some pin attempts before killing

172
00:07:13,520 --> 00:07:15,840
itself so here we modify the wookie

173
00:07:15,840 --> 00:07:16,410
applet to

174
00:07:16,410 --> 00:07:17,680
[Music]

175
00:07:17,680 --> 00:07:20,479
to be able to test the midi pins without

176
00:07:20,479 --> 00:07:22,160
triggering the contour measures that

177
00:07:22,160 --> 00:07:24,479
exist in the real

178
00:07:24,479 --> 00:07:26,960
applet of the wiki

179
00:07:26,960 --> 00:07:28,960
so how to hook on the smart cartrio

180
00:07:28,960 --> 00:07:30,880
lines

181
00:07:30,880 --> 00:07:33,440
two possibility one is to pick the lines

182
00:07:33,440 --> 00:07:35,280
directly from the reader

183
00:07:35,280 --> 00:07:38,560
if you can open the reader and modify it

184
00:07:38,560 --> 00:07:41,280
here you see i added a small pin header

185
00:07:41,280 --> 00:07:44,800
to a commercial reader and you see that

186
00:07:44,800 --> 00:07:47,680
we've got only two wires

187
00:07:47,680 --> 00:07:51,199
that go to the logic analyzer

188
00:07:52,639 --> 00:07:54,400
the other possibility if you cannot

189
00:07:54,400 --> 00:07:56,879
touch the reader is to add an extension

190
00:07:56,879 --> 00:07:59,840
with a fake card and a fake reader so

191
00:07:59,840 --> 00:08:01,919
here we have a fake card that goes to

192
00:08:01,919 --> 00:08:03,360
the wookie

193
00:08:03,360 --> 00:08:06,400
and here a cable that deports a fake

194
00:08:06,400 --> 00:08:09,840
reader just to be able to put

195
00:08:09,840 --> 00:08:10,879
the real

196
00:08:10,879 --> 00:08:14,000
card here so we have no room somewhere

197
00:08:14,000 --> 00:08:15,759
here to

198
00:08:15,759 --> 00:08:16,800
get

199
00:08:16,800 --> 00:08:18,960
the i o and ground line that we need for

200
00:08:18,960 --> 00:08:21,440
the logic analyzer

201
00:08:21,440 --> 00:08:23,520
then you record a trace when you send

202
00:08:23,520 --> 00:08:25,680
the pin to the card and you see it's

203
00:08:25,680 --> 00:08:27,599
quite straightforward

204
00:08:27,599 --> 00:08:30,400
you have only one channel to monitor

205
00:08:30,400 --> 00:08:32,958
and you see some activity which is the

206
00:08:32,958 --> 00:08:35,519
command that you send and then some

207
00:08:35,519 --> 00:08:37,360
activity which is the response of the

208
00:08:37,360 --> 00:08:40,000
card and the only thing we are

209
00:08:40,000 --> 00:08:41,440
interested in

210
00:08:41,440 --> 00:08:44,320
is the timing between the command and

211
00:08:44,320 --> 00:08:45,839
the response

212
00:08:45,839 --> 00:08:49,600
and that's what we want to watch

213
00:08:49,680 --> 00:08:50,640
um

214
00:08:50,640 --> 00:08:52,320
so you get your measures here for

215
00:08:52,320 --> 00:08:55,200
example we test for the ping length

216
00:08:55,200 --> 00:08:58,080
we set up first a pin

217
00:08:58,080 --> 00:09:00,000
of length four

218
00:09:00,000 --> 00:09:01,680
in this column

219
00:09:01,680 --> 00:09:04,080
and here a pin of length eight in this

220
00:09:04,080 --> 00:09:06,720
column and then we try pins of different

221
00:09:06,720 --> 00:09:07,600
length

222
00:09:07,600 --> 00:09:10,000
with the wrong paint like we tried to

223
00:09:10,000 --> 00:09:15,519
inject 9 then here 99 and here 999 etc

224
00:09:15,519 --> 00:09:18,560
and you see when the correct pin is sent

225
00:09:18,560 --> 00:09:21,760
the timing is very different

226
00:09:21,760 --> 00:09:23,440
now do you see

227
00:09:23,440 --> 00:09:26,480
something else interesting here

228
00:09:26,480 --> 00:09:28,240
beside the correct pin

229
00:09:28,240 --> 00:09:31,600
look at what are the longest timings

230
00:09:31,600 --> 00:09:34,240
in this list

231
00:09:35,440 --> 00:09:38,080
and yeah the longest timings are here

232
00:09:38,080 --> 00:09:39,760
and there

233
00:09:39,760 --> 00:09:41,040
and

234
00:09:41,040 --> 00:09:44,000
when your pin is of length four

235
00:09:44,000 --> 00:09:47,519
that's when you try a pin of length four

236
00:09:47,519 --> 00:09:50,320
when the ping is of length 9

237
00:09:50,320 --> 00:09:52,640
the longest timing is when you try a pin

238
00:09:52,640 --> 00:09:56,560
of line 9 oops

239
00:09:56,560 --> 00:09:58,480
so

240
00:09:58,480 --> 00:10:01,440
you see we got here

241
00:10:01,440 --> 00:10:04,560
timing dependency and we can

242
00:10:04,560 --> 00:10:07,360
find the correct pin length

243
00:10:07,360 --> 00:10:09,680
hopefully we tested it further there is

244
00:10:09,680 --> 00:10:11,680
no dependency on the first online digit

245
00:10:11,680 --> 00:10:13,760
being correct or not so you don't have a

246
00:10:13,760 --> 00:10:16,240
full timing tag against the content of

247
00:10:16,240 --> 00:10:18,880
ping but still you can discover the

248
00:10:18,880 --> 00:10:20,720
correct pin length

249
00:10:20,720 --> 00:10:23,760
via this method

250
00:10:23,760 --> 00:10:25,440
actually it's not a bug in the wookie

251
00:10:25,440 --> 00:10:27,120
applet itself and it's really in the

252
00:10:27,120 --> 00:10:29,600
java card os of the card we tested

253
00:10:29,600 --> 00:10:32,240
which were by the way our own cards as

254
00:10:32,240 --> 00:10:34,079
we were using modified version of the

255
00:10:34,079 --> 00:10:36,160
wizuki applet

256
00:10:36,160 --> 00:10:38,959
and we found that back in gcop3 and

257
00:10:38,959 --> 00:10:41,920
jacob cop 4 cards which are quite highly

258
00:10:41,920 --> 00:10:44,480
certified one is el5 plus the other one

259
00:10:44,480 --> 00:10:46,560
is an els

260
00:10:46,560 --> 00:10:48,079
again no panic

261
00:10:48,079 --> 00:10:50,000
typically the number of pin attempts

262
00:10:50,000 --> 00:10:51,600
should be very muted in most

263
00:10:51,600 --> 00:10:52,880
applications

264
00:10:52,880 --> 00:10:54,720
but still it's an information league

265
00:10:54,720 --> 00:10:57,920
that shouldn't be really there

266
00:10:57,920 --> 00:11:00,800
and it was reported to the vendor

267
00:11:00,800 --> 00:11:03,040
the second example is taking control on

268
00:11:03,040 --> 00:11:05,680
the user interface via the spi boost to

269
00:11:05,680 --> 00:11:09,200
enable some brute force on the pin

270
00:11:09,200 --> 00:11:10,800
but to explain that one i first to

271
00:11:10,800 --> 00:11:12,560
explain the cryptographic unibt in the

272
00:11:12,560 --> 00:11:14,800
wiki protocol because the pin is not

273
00:11:14,800 --> 00:11:16,640
supposed to be brute force as there is a

274
00:11:16,640 --> 00:11:19,600
limit in the number of attempts

275
00:11:19,600 --> 00:11:21,600
you remember i told about the pet pen

276
00:11:21,600 --> 00:11:23,600
and platinum

277
00:11:23,600 --> 00:11:26,079
and here is how the first phase of the

278
00:11:26,079 --> 00:11:28,800
authentication protocol works

279
00:11:28,800 --> 00:11:32,160
so from the pet pin

280
00:11:32,160 --> 00:11:35,839
where is my pencil here from the pet pin

281
00:11:35,839 --> 00:11:39,279
the wiki derives a decay

282
00:11:39,279 --> 00:11:40,720
by some

283
00:11:40,720 --> 00:11:42,800
derivation function

284
00:11:42,800 --> 00:11:45,440
and the decay is sent to the token

285
00:11:45,440 --> 00:11:48,079
then the token it has an encrypted

286
00:11:48,079 --> 00:11:51,120
keyblock called elk internally

287
00:11:51,120 --> 00:11:54,959
and it computes it decrypts the elk with

288
00:11:54,959 --> 00:11:57,839
the decay that you provide

289
00:11:57,839 --> 00:12:00,079
and it gives a kpk

290
00:12:00,079 --> 00:12:03,120
which is sent to the wookie and the kpk

291
00:12:03,120 --> 00:12:04,480
if it's correct

292
00:12:04,480 --> 00:12:07,600
it's used to decrypt the keystore

293
00:12:07,600 --> 00:12:09,519
and from there it can mount a secure

294
00:12:09,519 --> 00:12:12,000
channel with a token

295
00:12:12,000 --> 00:12:14,000
ask for the pet name to the token and

296
00:12:14,000 --> 00:12:16,320
display the pet name to the user

297
00:12:16,320 --> 00:12:17,360
so

298
00:12:17,360 --> 00:12:21,040
where is the vulnerability here

299
00:12:21,839 --> 00:12:24,399
well actually so

300
00:12:24,399 --> 00:12:27,200
you provide the dk to the card and you

301
00:12:27,200 --> 00:12:30,320
get the kpk back from the card

302
00:12:30,320 --> 00:12:32,800
so you can compute yourself the elk

303
00:12:32,800 --> 00:12:34,800
which is stored on the card because you

304
00:12:34,800 --> 00:12:36,839
just need

305
00:12:36,839 --> 00:12:38,480
to

306
00:12:38,480 --> 00:12:41,440
reverse the decryption that we get here

307
00:12:41,440 --> 00:12:43,760
and

308
00:12:44,000 --> 00:12:46,399
you can just re-encrypt the kpk that you

309
00:12:46,399 --> 00:12:49,600
got with the decay and you obtain

310
00:12:49,600 --> 00:12:53,120
back the elk

311
00:12:53,120 --> 00:12:55,600
okay but that means you need the correct

312
00:12:55,600 --> 00:12:57,519
decay which means you need the correct

313
00:12:57,519 --> 00:13:00,000
pet pin so that's not really an issue

314
00:13:00,000 --> 00:13:01,040
right

315
00:13:01,040 --> 00:13:03,600
well actually no you don't need that

316
00:13:03,600 --> 00:13:05,360
even

317
00:13:05,360 --> 00:13:06,800
because

318
00:13:06,800 --> 00:13:07,920
if you

319
00:13:07,920 --> 00:13:10,720
provide a wrong decay

320
00:13:10,720 --> 00:13:12,560
the card will happily compute a wrong

321
00:13:12,560 --> 00:13:15,200
kpk and return it

322
00:13:15,200 --> 00:13:18,079
so you can re-encrypt the wrong kpk with

323
00:13:18,079 --> 00:13:21,200
the wrong decay and you get back the

324
00:13:21,200 --> 00:13:22,560
real elk

325
00:13:22,560 --> 00:13:23,600
again

326
00:13:23,600 --> 00:13:25,440
so you can extract the l key from the

327
00:13:25,440 --> 00:13:28,160
token just like that without knowing any

328
00:13:28,160 --> 00:13:30,639
pet pin

329
00:13:30,959 --> 00:13:33,760
what can you do with that

330
00:13:33,760 --> 00:13:35,680
once you get the l key the idea is to

331
00:13:35,680 --> 00:13:38,320
create a fake card for the rookie where

332
00:13:38,320 --> 00:13:40,000
we could disable the counter measures

333
00:13:40,000 --> 00:13:42,480
present in the real token

334
00:13:42,480 --> 00:13:44,800
i told you the

335
00:13:44,800 --> 00:13:46,800
token limits the number of pins you can

336
00:13:46,800 --> 00:13:48,399
try and

337
00:13:48,399 --> 00:13:50,320
it has even an additional counter

338
00:13:50,320 --> 00:13:52,639
measure where there is an increasing

339
00:13:52,639 --> 00:13:58,240
delay every time you try a wrong pin

340
00:13:58,240 --> 00:14:00,240
this is the type of contour measure for

341
00:14:00,240 --> 00:14:02,959
example you have in some passports as

342
00:14:02,959 --> 00:14:04,959
well

343
00:14:04,959 --> 00:14:07,519
so with that fake token we can root for

344
00:14:07,519 --> 00:14:09,600
the pad pin on the wookie because there

345
00:14:09,600 --> 00:14:11,279
is no limit

346
00:14:11,279 --> 00:14:13,440
anymore on the number of trials it can

347
00:14:13,440 --> 00:14:14,720
do

348
00:14:14,720 --> 00:14:17,519
and once we got the pen pin we can

349
00:14:17,519 --> 00:14:20,079
go back to the original token put it in

350
00:14:20,079 --> 00:14:21,600
the rookie

351
00:14:21,600 --> 00:14:24,000
and unlock the pet name

352
00:14:24,000 --> 00:14:26,000
so we managed to bypass the first layer

353
00:14:26,000 --> 00:14:29,839
or altercation of the rookie by that way

354
00:14:29,839 --> 00:14:31,600
but to bridge for the pin we need some

355
00:14:31,600 --> 00:14:33,519
automation and the keypad gets

356
00:14:33,519 --> 00:14:36,240
randomized at each boot you remember

357
00:14:36,240 --> 00:14:38,480
so the idea is to sniff the spi command

358
00:14:38,480 --> 00:14:40,000
sent to the screen

359
00:14:40,000 --> 00:14:42,800
to reconstruct the keypad layout

360
00:14:42,800 --> 00:14:44,800
we don't need a graphical reconstruction

361
00:14:44,800 --> 00:14:46,480
and we just quickly fingerprint the

362
00:14:46,480 --> 00:14:48,959
sprites with some checksum to know which

363
00:14:48,959 --> 00:14:51,600
keys are displayed

364
00:14:51,600 --> 00:14:54,240
then we inject fake pressures from the

365
00:14:54,240 --> 00:14:55,519
touchscreen

366
00:14:55,519 --> 00:14:59,600
for that we hijack the touchscreen irq

367
00:14:59,600 --> 00:15:01,760
it's a line that tells to the wookie

368
00:15:01,760 --> 00:15:03,839
that there is some input someone is

369
00:15:03,839 --> 00:15:05,920
pressing the touchscreen

370
00:15:05,920 --> 00:15:07,760
and then the wiki tries to sample the

371
00:15:07,760 --> 00:15:09,680
position on touchscreen because it's a

372
00:15:09,680 --> 00:15:11,279
spi boost

373
00:15:11,279 --> 00:15:14,000
so the touchscreen cannot just send data

374
00:15:14,000 --> 00:15:16,639
like that it's to look up to the wiki to

375
00:15:16,639 --> 00:15:19,199
interrogate the touchscreen

376
00:15:19,199 --> 00:15:21,760
so the rookie is alerted via the irq

377
00:15:21,760 --> 00:15:24,079
line and then it samples the touchscreen

378
00:15:24,079 --> 00:15:26,880
to get some positions so that's at that

379
00:15:26,880 --> 00:15:28,880
moment we send fake positions in the

380
00:15:28,880 --> 00:15:31,759
response to the spi commands on the wiki

381
00:15:31,759 --> 00:15:33,839
and finally we need to keep an eye also

382
00:15:33,839 --> 00:15:35,519
on the smart card communication to see

383
00:15:35,519 --> 00:15:37,759
if the rookie tries to mount a secure

384
00:15:37,759 --> 00:15:39,920
channel if it's trying to mount it that

385
00:15:39,920 --> 00:15:43,040
means the pin is correct

386
00:15:43,759 --> 00:15:46,240
so what we need uh the fake token with

387
00:15:46,240 --> 00:15:48,560
the extracted lk

388
00:15:48,560 --> 00:15:50,880
a simple mincon controller here we use a

389
00:15:50,880 --> 00:15:54,720
tnc with some arduino code but anything

390
00:15:54,720 --> 00:15:56,399
else would do it

391
00:15:56,399 --> 00:15:58,320
a logic analyzer it's not really part of

392
00:15:58,320 --> 00:16:00,399
the setup but that's pretty useful to

393
00:16:00,399 --> 00:16:03,279
debug what's going on

394
00:16:03,279 --> 00:16:05,040
and then we need to hook some wires on

395
00:16:05,040 --> 00:16:07,120
the spi bus

396
00:16:07,120 --> 00:16:09,759
so here you see

397
00:16:09,759 --> 00:16:13,279
we got some micro solders

398
00:16:13,279 --> 00:16:16,480
on the spi lines and

399
00:16:16,480 --> 00:16:19,759
the power supply the ground

400
00:16:19,759 --> 00:16:21,360
the chip selects

401
00:16:21,360 --> 00:16:24,240
um and then we need also to hijack the

402
00:16:24,240 --> 00:16:26,800
irq line so we don't want any more the

403
00:16:26,800 --> 00:16:29,040
irq that comes from the real touchscreen

404
00:16:29,040 --> 00:16:31,680
so we cut the line somewhere here

405
00:16:31,680 --> 00:16:34,720
and we hook

406
00:16:34,720 --> 00:16:39,519
somewhere closer to the microcontroller

407
00:16:39,839 --> 00:16:41,120
but

408
00:16:41,120 --> 00:16:43,680
that setup didn't work very well

409
00:16:43,680 --> 00:16:45,199
because

410
00:16:45,199 --> 00:16:46,639
wrong things were typed on the

411
00:16:46,639 --> 00:16:49,519
touchscreen or actually so it received

412
00:16:49,519 --> 00:16:52,000
not the pin that we were intended to

413
00:16:52,000 --> 00:16:54,560
type on the screen

414
00:16:54,560 --> 00:16:56,639
so we had to investigate that a bit

415
00:16:56,639 --> 00:16:58,240
further

416
00:16:58,240 --> 00:17:00,639
and that's where the logic analyzer is

417
00:17:00,639 --> 00:17:02,800
useful by the way so actually there are

418
00:17:02,800 --> 00:17:04,400
a couple of bucks in the rookie

419
00:17:04,400 --> 00:17:07,760
implementation of the touchscreen driver

420
00:17:07,760 --> 00:17:09,919
one thing is a chip select is always

421
00:17:09,919 --> 00:17:13,359
active so the chip select is the cs line

422
00:17:13,359 --> 00:17:14,959
you get

423
00:17:14,959 --> 00:17:16,880
here

424
00:17:16,880 --> 00:17:19,760
and you can see that line is flat and

425
00:17:19,760 --> 00:17:21,439
when it goes to ground that means it's

426
00:17:21,439 --> 00:17:24,000
active so it's active all the time

427
00:17:24,000 --> 00:17:26,559
and one of the consequence is that the

428
00:17:26,559 --> 00:17:27,919
touchscreen

429
00:17:27,919 --> 00:17:30,400
is still active even when the spi is

430
00:17:30,400 --> 00:17:33,440
used more for screen activity because

431
00:17:33,440 --> 00:17:35,760
the screen and the touchscreen

432
00:17:35,760 --> 00:17:37,600
share the symbols

433
00:17:37,600 --> 00:17:40,559
and the effect you see is that there is

434
00:17:40,559 --> 00:17:45,120
some funky stuff going on on the

435
00:17:45,200 --> 00:17:47,440
iaq line of the touchscreen where

436
00:17:47,440 --> 00:17:49,360
nothing should happen over actually over

437
00:17:49,360 --> 00:17:50,880
there but

438
00:17:50,880 --> 00:17:52,160
that's fine

439
00:17:52,160 --> 00:17:54,400
the wiki is still working by chance it

440
00:17:54,400 --> 00:17:56,720
doesn't perturb too much the operations

441
00:17:56,720 --> 00:17:58,640
but that's the first issue

442
00:17:58,640 --> 00:18:01,360
the second problem is uh

443
00:18:01,360 --> 00:18:02,960
is bigger

444
00:18:02,960 --> 00:18:04,960
is that the routine to sample an average

445
00:18:04,960 --> 00:18:06,480
position

446
00:18:06,480 --> 00:18:09,200
goes on even if the finger is released

447
00:18:09,200 --> 00:18:12,160
for the touchscreen so here we have the

448
00:18:12,160 --> 00:18:14,559
iaq line of the touchscreen that tells

449
00:18:14,559 --> 00:18:16,320
if we are

450
00:18:16,320 --> 00:18:17,360
pressing

451
00:18:17,360 --> 00:18:20,320
the screen and we we see it goes low all

452
00:18:20,320 --> 00:18:21,760
the time so that means there is some

453
00:18:21,760 --> 00:18:24,160
pressure and then here the pressure is

454
00:18:24,160 --> 00:18:26,640
released

455
00:18:26,640 --> 00:18:28,320
what you see there is a touchscreen

456
00:18:28,320 --> 00:18:30,480
activity when it gets interrogated and

457
00:18:30,480 --> 00:18:32,720
indeed the issue is that uh

458
00:18:32,720 --> 00:18:34,160
here on the first line these are the

459
00:18:34,160 --> 00:18:36,720
commands sent by the controller and the

460
00:18:36,720 --> 00:18:38,480
response of the touchscreen that gives

461
00:18:38,480 --> 00:18:40,640
the position so the controller is

462
00:18:40,640 --> 00:18:42,559
sampling the position several times to

463
00:18:42,559 --> 00:18:45,039
make some average and

464
00:18:45,039 --> 00:18:46,720
remove some noise

465
00:18:46,720 --> 00:18:48,240
but the problem is that even when the

466
00:18:48,240 --> 00:18:50,160
pressure is released

467
00:18:50,160 --> 00:18:51,039
the

468
00:18:51,039 --> 00:18:53,919
mcu is still sampling a touchscreen but

469
00:18:53,919 --> 00:18:56,480
then the response it gets is zeros so of

470
00:18:56,480 --> 00:18:58,880
course if you make an average of these

471
00:18:58,880 --> 00:19:01,520
positions plus zeros then you get a

472
00:19:01,520 --> 00:19:03,679
wrong position which is shifted too much

473
00:19:03,679 --> 00:19:06,160
to the left

474
00:19:06,799 --> 00:19:08,720
so the solution

475
00:19:08,720 --> 00:19:10,799
to avoid that problem is to take that

476
00:19:10,799 --> 00:19:13,440
into account when we fake the position

477
00:19:13,440 --> 00:19:16,160
um to be sure to respect the same cycle

478
00:19:16,160 --> 00:19:19,120
of the 16 measures

479
00:19:19,120 --> 00:19:22,799
so we we drive the iq exactly for 16

480
00:19:22,799 --> 00:19:25,600
cycles of the sampling command and we

481
00:19:25,600 --> 00:19:28,080
make sure that we reply 16 times with

482
00:19:28,080 --> 00:19:30,559
the exact same position so at the end we

483
00:19:30,559 --> 00:19:32,640
get something which is even more

484
00:19:32,640 --> 00:19:34,400
reliable by hand because that block

485
00:19:34,400 --> 00:19:36,320
appear indeed when you just use the

486
00:19:36,320 --> 00:19:37,840
wookie touchscreen by your hand

487
00:19:37,840 --> 00:19:38,880
sometimes

488
00:19:38,880 --> 00:19:40,480
it types on the wrong pin

489
00:19:40,480 --> 00:19:42,320
when you know that it can erase stuff

490
00:19:42,320 --> 00:19:43,440
when

491
00:19:43,440 --> 00:19:46,320
it detects too too much error so it can

492
00:19:46,320 --> 00:19:50,320
be really a big problem on that device

493
00:19:51,039 --> 00:19:53,520
um

494
00:19:53,520 --> 00:19:56,480
so here you see the boot sequence

495
00:19:56,480 --> 00:19:59,280
and the injection of the pen pin on the

496
00:19:59,280 --> 00:20:02,320
device keyboard

497
00:20:03,760 --> 00:20:06,720
here we type the pen and then it will

498
00:20:06,720 --> 00:20:09,039
display the pet name it takes a

499
00:20:09,039 --> 00:20:10,880
bit of time to appear but it will be

500
00:20:10,880 --> 00:20:13,440
very quick

501
00:20:13,919 --> 00:20:16,400
yeah here pin okay whoopee that's a bit

502
00:20:16,400 --> 00:20:17,520
name

503
00:20:17,520 --> 00:20:19,679
pet name and then it types the user pin

504
00:20:19,679 --> 00:20:21,360
because here this is the demo board so

505
00:20:21,360 --> 00:20:23,280
we have access to both pin and we can

506
00:20:23,280 --> 00:20:24,400
show you

507
00:20:24,400 --> 00:20:26,480
how the final display is at at this

508
00:20:26,480 --> 00:20:28,240
point uh

509
00:20:28,240 --> 00:20:31,440
secure storage is mounted on the pc

510
00:20:31,440 --> 00:20:33,840
so you see all this sequence is still

511
00:20:33,840 --> 00:20:36,880
rather slow it takes about 15 seconds

512
00:20:36,880 --> 00:20:38,320
to boot

513
00:20:38,320 --> 00:20:40,720
up to the validation of the pet pin so

514
00:20:40,720 --> 00:20:42,799
brute forcing that pin

515
00:20:42,799 --> 00:20:44,799
is quite slow

516
00:20:44,799 --> 00:20:47,039
so after testing the setup on the demo

517
00:20:47,039 --> 00:20:50,400
board we try on the closed sample

518
00:20:50,400 --> 00:20:53,360
for which we don't know the pins

519
00:20:53,360 --> 00:20:55,440
and in about

520
00:20:55,440 --> 00:20:57,919
15 hours we managed to break the pet pin

521
00:20:57,919 --> 00:20:59,360
on the closed sample

522
00:20:59,360 --> 00:21:01,120
thanks to the recovered pin we could

523
00:21:01,120 --> 00:21:02,960
discover the pet name by swapping the

524
00:21:02,960 --> 00:21:04,559
card and putting the real authentication

525
00:21:04,559 --> 00:21:06,240
card on the wiki

526
00:21:06,240 --> 00:21:08,159
so the first layer of location of the

527
00:21:08,159 --> 00:21:09,600
key was bypassed which opened

528
00:21:09,600 --> 00:21:12,080
potentially the door for fishing attacks

529
00:21:12,080 --> 00:21:14,480
by presenting a fake cookie to the user

530
00:21:14,480 --> 00:21:17,120
with the correct spin pet name so he

531
00:21:17,120 --> 00:21:18,880
will trust the fake cookie and type the

532
00:21:18,880 --> 00:21:20,799
user pin and if you put for example a

533
00:21:20,799 --> 00:21:21,760
radio

534
00:21:21,760 --> 00:21:24,000
to x filter the pin in real time even if

535
00:21:24,000 --> 00:21:25,600
you realize that he cannot mount his

536
00:21:25,600 --> 00:21:26,720
data

537
00:21:26,720 --> 00:21:27,760
you

538
00:21:27,760 --> 00:21:29,520
can then decrypt

539
00:21:29,520 --> 00:21:32,799
the stolen wiki content

540
00:21:32,799 --> 00:21:34,480
now a few words on electromagnetic

541
00:21:34,480 --> 00:21:35,520
faults

542
00:21:35,520 --> 00:21:36,799
the idea here is to inject an

543
00:21:36,799 --> 00:21:38,559
electromagnetic pulse that will perturb

544
00:21:38,559 --> 00:21:40,640
the mcu inject a fault in electric

545
00:21:40,640 --> 00:21:44,000
execution like skipping execution an

546
00:21:44,000 --> 00:21:46,080
instruction sorry

547
00:21:46,080 --> 00:21:47,919
typically such attack is done in two

548
00:21:47,919 --> 00:21:48,880
phases

549
00:21:48,880 --> 00:21:50,880
first the characterization of the target

550
00:21:50,880 --> 00:21:53,200
processor by using open sample where you

551
00:21:53,200 --> 00:21:55,440
can run some sample code to observe

552
00:21:55,440 --> 00:21:57,520
easily if a foot is injected or not

553
00:21:57,520 --> 00:21:59,919
typically we put a loop counter so we

554
00:21:59,919 --> 00:22:02,080
can inject at any moment and if we see

555
00:22:02,080 --> 00:22:04,480
that the result of the contour is wrong

556
00:22:04,480 --> 00:22:08,480
we know we managed to inject a fault

557
00:22:08,559 --> 00:22:10,640
during that phase we try to find good

558
00:22:10,640 --> 00:22:12,799
parameters like

559
00:22:12,799 --> 00:22:14,880
how much voltage to inject it's about

560
00:22:14,880 --> 00:22:16,960
300 400 volts

561
00:22:16,960 --> 00:22:19,200
with which duration

562
00:22:19,200 --> 00:22:21,760
where to put a little coil on top of the

563
00:22:21,760 --> 00:22:22,960
chip

564
00:22:22,960 --> 00:22:26,080
and then we can try on the real target

565
00:22:26,080 --> 00:22:27,919
here we try it on the loader of the

566
00:22:27,919 --> 00:22:30,080
rookie where it checked the integrity of

567
00:22:30,080 --> 00:22:31,679
the firmware before executing the

568
00:22:31,679 --> 00:22:33,120
firmware

569
00:22:33,120 --> 00:22:35,440
and we simplify a bit the target we make

570
00:22:35,440 --> 00:22:36,720
sure it

571
00:22:36,720 --> 00:22:39,039
to disable the control measures like it

572
00:22:39,039 --> 00:22:41,039
won't erase itself when it detects an

573
00:22:41,039 --> 00:22:42,400
attack

574
00:22:42,400 --> 00:22:45,760
and we bring some led at the end just

575
00:22:45,760 --> 00:22:49,039
rather than running the full firmware

576
00:22:49,039 --> 00:22:51,600
the main constituents are framework

577
00:22:51,600 --> 00:22:53,840
script that will coordinate all the

578
00:22:53,840 --> 00:22:55,039
hardware

579
00:22:55,039 --> 00:22:57,280
where we will have

580
00:22:57,280 --> 00:22:59,040
something to inject

581
00:22:59,040 --> 00:23:00,320
[Music]

582
00:23:00,320 --> 00:23:03,600
high voltage pulses here i use a chip

583
00:23:03,600 --> 00:23:06,080
filter

584
00:23:06,159 --> 00:23:08,960
which is a bit costly but you can

585
00:23:08,960 --> 00:23:11,360
probably do something by yourself

586
00:23:11,360 --> 00:23:13,919
for much cheaper and you just need a

587
00:23:13,919 --> 00:23:17,440
capacitor bank and a mosfet

588
00:23:17,440 --> 00:23:19,520
the advantage here it's quite safe to

589
00:23:19,520 --> 00:23:22,159
use because if you do by yourself or

590
00:23:22,159 --> 00:23:24,880
something that handles 400 volts you've

591
00:23:24,880 --> 00:23:27,919
to be very careful what you're doing

592
00:23:27,919 --> 00:23:29,679
you need something to trigger it with a

593
00:23:29,679 --> 00:23:31,600
configurable delay

594
00:23:31,600 --> 00:23:33,840
uh there is one in the chip shelter but

595
00:23:33,840 --> 00:23:36,400
we wrote our own trigger in a small fpga

596
00:23:36,400 --> 00:23:38,400
that you see here at the bottom it's an

597
00:23:38,400 --> 00:23:40,320
ice 40 if you know it

598
00:23:40,320 --> 00:23:43,039
to get a better precision

599
00:23:43,039 --> 00:23:46,400
in the timing and the punch length

600
00:23:46,400 --> 00:23:49,279
you need some xyz table to move around

601
00:23:49,279 --> 00:23:51,600
the little call on top of the chip

602
00:23:51,600 --> 00:23:54,480
so here my xyz table was just

603
00:23:54,480 --> 00:23:56,960
my 3d printer

604
00:23:56,960 --> 00:23:58,960
but you can do that also on small cnc

605
00:23:58,960 --> 00:24:00,240
for example

606
00:24:00,240 --> 00:24:03,600
it's a bit easier

607
00:24:03,600 --> 00:24:06,480
and you need the script to to talk to

608
00:24:06,480 --> 00:24:08,880
the target and to reset it so we have

609
00:24:08,880 --> 00:24:12,159
some control here made for the target

610
00:24:12,159 --> 00:24:13,600
and you need to be able to reset the

611
00:24:13,600 --> 00:24:15,600
target but because it will probably

612
00:24:15,600 --> 00:24:17,440
crash pretty often when you try to

613
00:24:17,440 --> 00:24:18,880
inject faults

614
00:24:18,880 --> 00:24:20,320
and the script does also some

615
00:24:20,320 --> 00:24:22,559
cartography and automatic automated

616
00:24:22,559 --> 00:24:25,120
acquisition by varying parameters we've

617
00:24:25,120 --> 00:24:27,678
seen before

618
00:24:27,760 --> 00:24:30,720
here is an example of cartography

619
00:24:30,720 --> 00:24:33,440
um you see there the different

620
00:24:33,440 --> 00:24:36,000
parameters that were used and then

621
00:24:36,000 --> 00:24:37,360
we try

622
00:24:37,360 --> 00:24:40,159
to scan all the chip surface

623
00:24:40,159 --> 00:24:41,679
for a given

624
00:24:41,679 --> 00:24:43,200
height

625
00:24:43,200 --> 00:24:45,600
and we can use some colors to to see

626
00:24:45,600 --> 00:24:47,200
quickly what happens

627
00:24:47,200 --> 00:24:48,480
when it's green

628
00:24:48,480 --> 00:24:50,480
it means a

629
00:24:50,480 --> 00:24:54,000
normal behavior nothing bad happened

630
00:24:54,000 --> 00:24:55,760
here in the blue

631
00:24:55,760 --> 00:24:59,039
the the target was not responsive so we

632
00:24:59,039 --> 00:25:01,360
had to reboot it

633
00:25:01,360 --> 00:25:06,158
here in purple it rebooted itself

634
00:25:06,480 --> 00:25:08,400
so that means also the all

635
00:25:08,400 --> 00:25:10,159
cases that you have to handle in your

636
00:25:10,159 --> 00:25:11,679
script

637
00:25:11,679 --> 00:25:14,000
and the more interesting parts are here

638
00:25:14,000 --> 00:25:15,760
in yellow and

639
00:25:15,760 --> 00:25:20,080
in orange is when only a few number of

640
00:25:20,080 --> 00:25:21,840
instructions were skipped so in the

641
00:25:21,840 --> 00:25:23,919
yellow you see the number that means

642
00:25:23,919 --> 00:25:26,080
there is only only one instruction skip

643
00:25:26,080 --> 00:25:28,559
here two instructions keep here

644
00:25:28,559 --> 00:25:30,720
and with this characterography you can

645
00:25:30,720 --> 00:25:33,039
see for example that maybe that area is

646
00:25:33,039 --> 00:25:35,039
pretty interesting because we don't have

647
00:25:35,039 --> 00:25:37,919
much crash but we have

648
00:25:37,919 --> 00:25:39,120
small

649
00:25:39,120 --> 00:25:41,919
instruction skips so we can try the

650
00:25:41,919 --> 00:25:44,960
second phase only on this area for

651
00:25:44,960 --> 00:25:47,279
example

652
00:25:47,279 --> 00:25:49,120
so after the causalization to find a

653
00:25:49,120 --> 00:25:51,279
good spot and good voltage parameter we

654
00:25:51,279 --> 00:25:53,600
move to the target here the loader of

655
00:25:53,600 --> 00:25:55,279
the wiki that checked the integrity of

656
00:25:55,279 --> 00:25:57,679
the firmware before launching it

657
00:25:57,679 --> 00:25:59,919
and here are some results we got on the

658
00:25:59,919 --> 00:26:02,640
loader we got the first integrity bypass

659
00:26:02,640 --> 00:26:03,679
after

660
00:26:03,679 --> 00:26:06,240
about 5 000 attempts

661
00:26:06,240 --> 00:26:08,880
and after some fine tuning we got a

662
00:26:08,880 --> 00:26:11,279
success rate of about once every 14

663
00:26:11,279 --> 00:26:12,320
attempts

664
00:26:12,320 --> 00:26:15,120
maybe it's possible to get better but it

665
00:26:15,120 --> 00:26:16,960
needs time to explore all the parameters

666
00:26:16,960 --> 00:26:19,840
of an impulse injection

667
00:26:19,840 --> 00:26:21,840
but remember on the real wookie there is

668
00:26:21,840 --> 00:26:24,720
a really defensive depth

669
00:26:24,720 --> 00:26:26,880
as as soon as the loader fails to check

670
00:26:26,880 --> 00:26:28,720
the integrity of the firmware it erase

671
00:26:28,720 --> 00:26:30,400
everything

672
00:26:30,400 --> 00:26:31,520
so

673
00:26:31,520 --> 00:26:32,720
still hard

674
00:26:32,720 --> 00:26:34,880
to really

675
00:26:34,880 --> 00:26:35,919
get a

676
00:26:35,919 --> 00:26:36,799
full

677
00:26:36,799 --> 00:26:40,720
execution but attack parts on the wookie

678
00:26:42,080 --> 00:26:44,240
so here it was uh just to test and see

679
00:26:44,240 --> 00:26:45,770
the feasibility of the foot injection

680
00:26:45,770 --> 00:26:47,600
[Music]

681
00:26:47,600 --> 00:26:51,520
where we disable these contour measures

682
00:26:51,520 --> 00:26:53,520
uh by the way we got also some other

683
00:26:53,520 --> 00:26:55,520
funny and less funny results for the

684
00:26:55,520 --> 00:26:57,200
funny one we got portions of the

685
00:26:57,200 --> 00:26:59,200
firmware leaking on the debug uart that

686
00:26:59,200 --> 00:27:01,679
was not foreseen but

687
00:27:01,679 --> 00:27:04,400
it happened and that's really with fault

688
00:27:04,400 --> 00:27:06,720
injection like anything can help happen

689
00:27:06,720 --> 00:27:08,320
really

690
00:27:08,320 --> 00:27:10,240
hopefully the uart is disabled in

691
00:27:10,240 --> 00:27:13,120
production it's only on debug mode

692
00:27:13,120 --> 00:27:15,279
but maybe you can do something similar

693
00:27:15,279 --> 00:27:17,919
on the usb descriptors for example

694
00:27:17,919 --> 00:27:20,000
for the less funny part we also try to

695
00:27:20,000 --> 00:27:22,720
defeat the stm32ldp2

696
00:27:22,720 --> 00:27:24,000
protection

697
00:27:24,000 --> 00:27:26,640
um that's a protection physical

698
00:27:26,640 --> 00:27:29,360
protection that

699
00:27:29,440 --> 00:27:32,000
forbids you to to dump the content of

700
00:27:32,000 --> 00:27:35,120
the firmware over gtac and when we try

701
00:27:35,120 --> 00:27:37,520
to defeat it we break the dim report

702
00:27:37,520 --> 00:27:39,120
after a while

703
00:27:39,120 --> 00:27:41,760
so this is a gentle reminder

704
00:27:41,760 --> 00:27:43,760
i wanted to share with you that when i

705
00:27:43,760 --> 00:27:45,279
say anything can happen it means

706
00:27:45,279 --> 00:27:47,520
including destroying the target so

707
00:27:47,520 --> 00:27:50,240
always be very careful when playing with

708
00:27:50,240 --> 00:27:53,440
a fault injection

709
00:27:53,440 --> 00:27:55,840
i hope you enjoy these stories

710
00:27:55,840 --> 00:27:58,000
here are my conclusions hardware attacks

711
00:27:58,000 --> 00:27:59,919
are fun to do they are much more

712
00:27:59,919 --> 00:28:01,200
affordable

713
00:28:01,200 --> 00:28:03,440
than some may think

714
00:28:03,440 --> 00:28:05,279
no need for big lab to start poking

715
00:28:05,279 --> 00:28:06,480
around

716
00:28:06,480 --> 00:28:08,799
you've seen it with these stories never

717
00:28:08,799 --> 00:28:10,799
assume that you have in front of you is

718
00:28:10,799 --> 00:28:13,440
robust and try by yourself we've seen

719
00:28:13,440 --> 00:28:15,919
here issues on that thing certified java

720
00:28:15,919 --> 00:28:18,159
cards we've seen crypto protocols weaker

721
00:28:18,159 --> 00:28:19,520
than foreseen

722
00:28:19,520 --> 00:28:21,679
so it's always worth to challenge the

723
00:28:21,679 --> 00:28:24,240
things you see even if it fails at least

724
00:28:24,240 --> 00:28:26,960
you can learn something in the process

725
00:28:26,960 --> 00:28:28,720
and finally if you got a test for the

726
00:28:28,720 --> 00:28:31,200
topic i warmly welcome you to have a

727
00:28:31,200 --> 00:28:33,120
look at two books published very

728
00:28:33,120 --> 00:28:35,039
recently like

729
00:28:35,039 --> 00:28:37,120
and one or two months ago

730
00:28:37,120 --> 00:28:39,039
the first one is a nice introduction to

731
00:28:39,039 --> 00:28:43,120
the topic and the second one gives

732
00:28:43,120 --> 00:28:45,440
it goes deeper in fault injection and

733
00:28:45,440 --> 00:28:46,799
side channel

734
00:28:46,799 --> 00:28:47,600
but

735
00:28:47,600 --> 00:28:49,760
still always install

736
00:28:49,760 --> 00:28:53,039
hacking at home without big equipment

737
00:28:53,039 --> 00:28:55,600
thank you and

738
00:28:55,600 --> 00:28:59,559
i'm hearing your questions

739
00:28:59,760 --> 00:29:01,840
okay thank you phil i think we got a

740
00:29:01,840 --> 00:29:04,559
number of uh questions uh

741
00:29:04,559 --> 00:29:06,640
do you want to start first yeah sure

742
00:29:06,640 --> 00:29:08,000
thank you very much for for the

743
00:29:08,000 --> 00:29:10,159
presentation um just a quick question

744
00:29:10,159 --> 00:29:13,520
about the methodology did you try to use

745
00:29:13,520 --> 00:29:15,279
power glitch in order to to have a

746
00:29:15,279 --> 00:29:18,159
better reproducibility because em is a

747
00:29:18,159 --> 00:29:20,240
bit it's a bit difficult to get uh i

748
00:29:20,240 --> 00:29:23,120
will predictability rate

749
00:29:23,120 --> 00:29:27,039
uh you can hear me i hope

750
00:29:27,039 --> 00:29:28,480
yes perfect

751
00:29:28,480 --> 00:29:31,840
uh poor you mean voltage glitch

752
00:29:31,840 --> 00:29:34,880
it was not part of our plan as explained

753
00:29:34,880 --> 00:29:37,200
we had a huge plan to attack the rookie

754
00:29:37,200 --> 00:29:39,120
and each cesti did

755
00:29:39,120 --> 00:29:42,320
part of it and got the part attributed

756
00:29:42,320 --> 00:29:47,039
and in our part uh it was uh only em

757
00:29:47,039 --> 00:29:47,919
but

758
00:29:47,919 --> 00:29:50,320
if i remember well last year scenic

759
00:29:50,320 --> 00:29:52,880
presented this result on the voltage

760
00:29:52,880 --> 00:29:55,840
switch on the wiki

761
00:29:56,640 --> 00:29:58,670
okay thank you

762
00:29:58,670 --> 00:30:00,480
[Applause]

763
00:30:00,480 --> 00:30:02,799
okay thank you thank you phil

764
00:30:02,799 --> 00:30:05,760
i think you had a question on

765
00:30:05,760 --> 00:30:08,159
on the live about the pts update and

766
00:30:08,159 --> 00:30:10,320
when was it being done before

767
00:30:10,320 --> 00:30:11,679
verification

768
00:30:11,679 --> 00:30:15,600
or not uh would you mind repeating your

769
00:30:15,600 --> 00:30:18,240
answer uh for the rest of the audience

770
00:30:18,240 --> 00:30:20,080
who were not following that exchange

771
00:30:20,080 --> 00:30:22,240
please yeah so there was a question if

772
00:30:22,240 --> 00:30:25,360
the the pin counter check uh

773
00:30:25,360 --> 00:30:28,320
is updated correctly uh before doing the

774
00:30:28,320 --> 00:30:30,880
variation otherwise you could like uh

775
00:30:30,880 --> 00:30:33,120
try to verify the pin and and tear off

776
00:30:33,120 --> 00:30:35,120
the card very quickly before it updates

777
00:30:35,120 --> 00:30:38,320
the the counter check uh again this was

778
00:30:38,320 --> 00:30:40,799
not something that was our own plan and

779
00:30:40,799 --> 00:30:43,039
we had already quite a large plan to do

780
00:30:43,039 --> 00:30:44,480
in the

781
00:30:44,480 --> 00:30:47,279
cspn days that are forcing so that's not

782
00:30:47,279 --> 00:30:50,000
something you we looked at not that we

783
00:30:50,000 --> 00:30:52,399
didn't want but yeah we have to limit

784
00:30:52,399 --> 00:30:53,600
ourselves to

785
00:30:53,600 --> 00:30:57,039
already quite a number of things

786
00:30:57,039 --> 00:31:00,159
but i hope i assume that this correct

787
00:31:00,159 --> 00:31:02,559
this one i mean the the bug we found is

788
00:31:02,559 --> 00:31:04,159
maybe because it was something which was

789
00:31:04,159 --> 00:31:06,480
not really on the checklist

790
00:31:06,480 --> 00:31:08,320
uh for the certification labs when they

791
00:31:08,320 --> 00:31:11,519
attribute an es6 plus but i hope that on

792
00:31:11,519 --> 00:31:12,159
the

793
00:31:12,159 --> 00:31:16,000
six plus checklist at least uh the the

794
00:31:16,000 --> 00:31:19,279
check for tier of attacks

795
00:31:19,279 --> 00:31:20,399
um

796
00:31:20,399 --> 00:31:23,039
we've got uh uh last question from

797
00:31:23,039 --> 00:31:24,080
pascal

798
00:31:24,080 --> 00:31:26,320
yeah thanks for the talk and my question

799
00:31:26,320 --> 00:31:29,360
is how many hours does it take to

800
00:31:29,360 --> 00:31:32,918
solving this challenge

801
00:31:34,399 --> 00:31:37,840
here it's it was three items of our plan

802
00:31:37,840 --> 00:31:40,799
the plan was much longer and it was

803
00:31:40,799 --> 00:31:44,799
filling a full cspn which is 25 days

804
00:31:44,799 --> 00:31:46,880
plus 10 days when you have some crypto

805
00:31:46,880 --> 00:31:48,880
in it so 35 days

806
00:31:48,880 --> 00:31:49,760
uh

807
00:31:49,760 --> 00:31:53,679
but yeah that's a regular cspn including

808
00:31:53,679 --> 00:31:54,399
uh

809
00:31:54,399 --> 00:31:56,880
reporting including looking at aspects

810
00:31:56,880 --> 00:31:58,159
which are not just finding the

811
00:31:58,159 --> 00:31:59,679
vulnerabilities

812
00:31:59,679 --> 00:32:01,440
so

813
00:32:01,440 --> 00:32:04,640
just for these items um

814
00:32:04,640 --> 00:32:07,200
well the first one the the

815
00:32:07,200 --> 00:32:08,720
the timing attack that's something you

816
00:32:08,720 --> 00:32:10,640
can do in a day or in an afternoon it's

817
00:32:10,640 --> 00:32:11,760
very quick

818
00:32:11,760 --> 00:32:12,640
uh

819
00:32:12,640 --> 00:32:15,120
the one with the the instrumentation you

820
00:32:15,120 --> 00:32:17,360
you saw we had some difficulties to work

821
00:32:17,360 --> 00:32:19,519
around the box or finding what were the

822
00:32:19,519 --> 00:32:21,360
issues with the wookie so

823
00:32:21,360 --> 00:32:25,039
that one took probably like four days

824
00:32:25,039 --> 00:32:26,840
to set up

825
00:32:26,840 --> 00:32:29,600
um and the last one the

826
00:32:29,600 --> 00:32:31,039
the test bench

827
00:32:31,039 --> 00:32:31,840
uh

828
00:32:31,840 --> 00:32:34,159
actually we didn't have yet a test bench

829
00:32:34,159 --> 00:32:36,080
when we started so most of time was

830
00:32:36,080 --> 00:32:38,799
about setting up the things setting up

831
00:32:38,799 --> 00:32:40,640
and writing script and writing character

832
00:32:40,640 --> 00:32:43,200
graphics script then running the attack

833
00:32:43,200 --> 00:32:45,440
it's about i don't know one day to set

834
00:32:45,440 --> 00:32:47,440
up the stuff and then a couple of days

835
00:32:47,440 --> 00:32:50,320
to run the tests

836
00:32:50,320 --> 00:32:53,190
okay thank you very much

837
00:32:53,190 --> 00:32:56,059
[Applause]

