1
00:00:04,100 --> 00:00:10,830
so two days ago I received a message

2
00:00:07,439 --> 00:00:12,629
from Phil and then after reading the

3
00:00:10,830 --> 00:00:19,619
message I volunteer to do the ramp

4
00:00:12,630 --> 00:00:21,740
session so basically our session is

5
00:00:19,619 --> 00:00:24,749
about the grid which is a challenge

6
00:00:21,740 --> 00:00:29,729
proposed that delayed memory so has

7
00:00:24,749 --> 00:00:33,720
presented before so the challenge was

8
00:00:29,730 --> 00:00:36,960
that you it was just a reverse challenge

9
00:00:33,720 --> 00:00:39,900
and you if you go to this branch you you

10
00:00:36,960 --> 00:00:43,500
win and otherwise you you lose so if you

11
00:00:39,900 --> 00:00:45,900
if you go there but if you look at the

12
00:00:43,500 --> 00:00:48,840
string I just was presented before it

13
00:00:45,900 --> 00:00:52,050
looks really like a maze and you have to

14
00:00:48,840 --> 00:00:57,300
follow the path and get out of the maze

15
00:00:52,050 --> 00:00:59,640
to to to win and so we were three

16
00:00:57,300 --> 00:01:01,860
working at the same office and since we

17
00:00:59,640 --> 00:01:04,409
work in security we don't discuss each

18
00:01:01,860 --> 00:01:07,109
other we are not three social so we

19
00:01:04,409 --> 00:01:09,619
serve each we solve the challenge with

20
00:01:07,109 --> 00:01:14,429
three different solution the first one

21
00:01:09,619 --> 00:01:17,219
so go ahead one of our colleague was

22
00:01:14,429 --> 00:01:21,979
injured so it was looking for a solution

23
00:01:17,219 --> 00:01:21,979
involving only one hand to the challenge

24
00:01:22,130 --> 00:01:29,490
so obviously use anger I don't know if

25
00:01:26,130 --> 00:01:32,158
you know it but you just tell longer you

26
00:01:29,490 --> 00:01:34,318
want to go to this first address to find

27
00:01:32,159 --> 00:01:36,810
a dress and you want to avoid the

28
00:01:34,319 --> 00:01:39,990
address which tell you that you are out

29
00:01:36,810 --> 00:01:43,950
of the maze and if you run anger

30
00:01:39,990 --> 00:01:46,589
we've won and you will have the flag in

31
00:01:43,950 --> 00:01:49,399
eleventh second so that was the first

32
00:01:46,590 --> 00:01:49,399
solution

33
00:01:50,580 --> 00:01:54,780
well the second solution will be

34
00:01:52,500 --> 00:01:59,070
presented by Kareem but I have a

35
00:01:54,780 --> 00:02:03,479
disclaimer he will show you some Python

36
00:01:59,070 --> 00:02:05,100
code in Python 2 so if you don't feel

37
00:02:03,479 --> 00:02:08,669
good about that maybe you should leave

38
00:02:05,100 --> 00:02:10,199
the room right now just to be clear

39
00:02:08,669 --> 00:02:12,238
about that

40
00:02:10,199 --> 00:02:16,769
you have still one month to migrate to

41
00:02:12,239 --> 00:02:20,459
Python 3 so it will be duplicated in in

42
00:02:16,770 --> 00:02:21,930
January so be careful so but thinking

43
00:02:20,459 --> 00:02:26,250
can happen obviously

44
00:02:21,930 --> 00:02:29,280
so I said before the maze looks like

45
00:02:26,250 --> 00:02:33,090
this and whenever you test a character

46
00:02:29,280 --> 00:02:36,720
or valid one it will go through the maze

47
00:02:33,090 --> 00:02:42,360
with X's which is the basic ID and it

48
00:02:36,720 --> 00:02:45,720
will go up the maze until you exit so my

49
00:02:42,360 --> 00:02:48,510
solution was to use air to pipe so you

50
00:02:45,720 --> 00:02:50,580
need to load the program and what I did

51
00:02:48,510 --> 00:02:53,910
personally because we faced some

52
00:02:50,580 --> 00:02:56,579
limitation of air to pipe and we needed

53
00:02:53,910 --> 00:03:00,359
to figure it out but we had some pain

54
00:02:56,579 --> 00:03:03,209
with this basically you load the program

55
00:03:00,360 --> 00:03:04,799
with some arguments so on my side was

56
00:03:03,209 --> 00:03:10,170
loading the arguments with a dummy

57
00:03:04,799 --> 00:03:13,579
argument let's say 11 8 then you execute

58
00:03:10,170 --> 00:03:23,458
until the arguments is in the register

59
00:03:13,579 --> 00:03:28,380
API and then you you basically catch how

60
00:03:23,459 --> 00:03:31,500
many X's you have inside the memory and

61
00:03:28,380 --> 00:03:36,120
then you continue by testing one

62
00:03:31,500 --> 00:03:38,910
character after the other you have the

63
00:03:36,120 --> 00:03:42,090
number of X's and if you don't face so

64
00:03:38,910 --> 00:03:43,769
if you if you go inside the wall you

65
00:03:42,090 --> 00:03:46,769
will have a message printed

66
00:03:43,769 --> 00:03:49,769
it's the can't so you can't go there and

67
00:03:46,769 --> 00:03:51,720
if the number of X's was bigger than the

68
00:03:49,769 --> 00:03:54,510
original one this means that you have a

69
00:03:51,720 --> 00:03:56,459
valid character and if you have a nice

70
00:03:54,510 --> 00:03:59,640
inside the output this means that you

71
00:03:56,459 --> 00:04:03,900
have basically find your flag

72
00:03:59,640 --> 00:04:06,119
this takes approximately let's say it

73
00:04:03,900 --> 00:04:08,250
depends on the computer but on the same

74
00:04:06,120 --> 00:04:11,940
computer as anger it was like four

75
00:04:08,250 --> 00:04:16,589
minutes to do and so the last bit that I

76
00:04:11,940 --> 00:04:19,019
did was simple just reverse so you just

77
00:04:16,589 --> 00:04:23,580
go and you see that the character you

78
00:04:19,019 --> 00:04:26,669
give to the program is sliced in two

79
00:04:23,580 --> 00:04:29,669
bytes and for each of this slice it will

80
00:04:26,669 --> 00:04:31,469
call the same function so I thought that

81
00:04:29,669 --> 00:04:34,440
it was the move function and it is

82
00:04:31,470 --> 00:04:38,010
called with an argument which is on two

83
00:04:34,440 --> 00:04:39,600
two-bit and and then if you go to this

84
00:04:38,010 --> 00:04:42,930
function the move function you can

85
00:04:39,600 --> 00:04:45,120
clearly see that it will decide which

86
00:04:42,930 --> 00:04:48,210
direction you will go depending of the

87
00:04:45,120 --> 00:04:51,390
the value of these two bits so it was

88
00:04:48,210 --> 00:04:53,010
not really difficult to define that if

89
00:04:51,390 --> 00:04:55,409
you give zero

90
00:04:53,010 --> 00:04:56,960
he will go left if you give one we go up

91
00:04:55,410 --> 00:05:01,980
and and so on

92
00:04:56,960 --> 00:05:08,070
so for example if you take L which is 76

93
00:05:01,980 --> 00:05:11,910
or step down sis in French you will he

94
00:05:08,070 --> 00:05:15,260
will have this group of two bits and

95
00:05:11,910 --> 00:05:19,890
then it will do a sequence up left on

96
00:05:15,260 --> 00:05:22,680
left and you can play into the maze like

97
00:05:19,890 --> 00:05:26,010
this and you see the X going up to the

98
00:05:22,680 --> 00:05:27,930
maze and finally I would put the flag

99
00:05:26,010 --> 00:05:30,210
oh you if you want to have the complete

100
00:05:27,930 --> 00:05:32,070
script of this resolution we we have

101
00:05:30,210 --> 00:05:34,680
published the write-ups of feel free to

102
00:05:32,070 --> 00:05:39,349
it will be invite on to some party so

103
00:05:34,680 --> 00:05:42,470
sorry for that sorry for that thank you

104
00:05:39,350 --> 00:05:42,470
[Applause]

