1
00:00:02,520 --> 00:00:10,740
<font color="#E5E5E5">them to generate automatically</font><font color="#CCCCCC"> Europe</font>

2
00:00:05,580 --> 00:00:13,350
<font color="#CCCCCC">yes exactly so</font><font color="#E5E5E5"> hi everyone I'm very</font>

3
00:00:10,740 --> 00:00:15,510
happy to be<font color="#CCCCCC"> here and today I</font><font color="#E5E5E5"> will</font>

4
00:00:13,350 --> 00:00:17,689
present<font color="#E5E5E5"> to you a</font><font color="#CCCCCC"> rock generator</font><font color="#E5E5E5"> so it's</font>

5
00:00:15,510 --> 00:00:20,009
a tool<font color="#E5E5E5"> I developed that can</font>

6
00:00:17,690 --> 00:00:23,460
automatically build return-oriented

7
00:00:20,010 --> 00:00:24,480
programming<font color="#E5E5E5"> exploits so the talk would</font>

8
00:00:23,460 --> 00:00:27,000
go as follows

9
00:00:24,480 --> 00:00:29,210
first a quick<font color="#CCCCCC"> reminder about return</font>

10
00:00:27,000 --> 00:00:33,539
<font color="#CCCCCC">oriented programming so short named</font><font color="#E5E5E5"> Rob</font>

11
00:00:29,210 --> 00:00:35,489
<font color="#CCCCCC">I will show how a Rob</font><font color="#E5E5E5"> attack works</font><font color="#CCCCCC"> and I</font>

12
00:00:33,539 --> 00:00:38,810
will discuss the two major<font color="#CCCCCC"> problems that</font>

13
00:00:35,489 --> 00:00:42,030
<font color="#E5E5E5">attackers have when they try to use Rob</font>

14
00:00:38,810 --> 00:00:44,520
then I will talk about Rob generator and

15
00:00:42,030 --> 00:00:46,350
describe the<font color="#E5E5E5"> method that it uses in</font>

16
00:00:44,520 --> 00:00:48,989
<font color="#E5E5E5">order to automatically solve those two</font>

17
00:00:46,350 --> 00:00:51,750
<font color="#E5E5E5">problems and eventually I will provide</font>

18
00:00:48,989 --> 00:00:54,690
<font color="#E5E5E5">you</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> some results so I will compare</font>

19
00:00:51,750 --> 00:00:57,690
<font color="#E5E5E5">a generator to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> state-of-the-art stool</font>

20
00:00:54,690 --> 00:01:00,420
and<font color="#E5E5E5"> I will also make a quick demo to</font>

21
00:00:57,690 --> 00:01:02,519
<font color="#CCCCCC">show</font><font color="#E5E5E5"> how the tool can exploit the</font>

22
00:01:00,420 --> 00:01:05,880
<font color="#CCCCCC">renewable binary and bypass system</font>

23
00:01:02,520 --> 00:01:08,909
protections so let's get started<font color="#E5E5E5"> with</font>

24
00:01:05,880 --> 00:01:12,298
the<font color="#E5E5E5"> return oriented programming so how</font>

25
00:01:08,909 --> 00:01:14,490
do Rob<font color="#E5E5E5"> attack works basically I will</font>

26
00:01:12,299 --> 00:01:20,840
show it<font color="#E5E5E5"> on a buffer overflow so when you</font>

27
00:01:14,490 --> 00:01:23,399
have a<font color="#CCCCCC"> buffer overflow you can excuse me</font>

28
00:01:20,840 --> 00:01:25,529
<font color="#E5E5E5">thank</font><font color="#CCCCCC"> you</font>

29
00:01:23,399 --> 00:01:28,499
you<font color="#E5E5E5"> can override the stack with an input</font>

30
00:01:25,529 --> 00:01:30,420
<font color="#CCCCCC">so what you will do is you will replace</font>

31
00:01:28,499 --> 00:01:33,389
the return address of a<font color="#E5E5E5"> vulnerable</font>

32
00:01:30,420 --> 00:01:36,659
function with a list of gadget<font color="#E5E5E5"> addresses</font>

33
00:01:33,389 --> 00:01:39,209
<font color="#E5E5E5">a gadget is</font><font color="#CCCCCC"> a small code snippet that</font>

34
00:01:36,659 --> 00:01:41,189
you're taking a vulnerable program<font color="#E5E5E5"> so</font>

35
00:01:39,209 --> 00:01:44,399
it's a<font color="#E5E5E5"> few instructions</font><font color="#CCCCCC"> ending by a</font>

36
00:01:41,189 --> 00:01:46,098
return instruction<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> and by</font>

37
00:01:44,399 --> 00:01:48,240
<font color="#CCCCCC">chaining gadgets together</font><font color="#E5E5E5"> you will have</font>

38
00:01:46,099 --> 00:01:51,329
<font color="#E5E5E5">arbitrary code execution on the</font>

39
00:01:48,240 --> 00:01:52,679
<font color="#CCCCCC">Venerable system so how it works in</font>

40
00:01:51,329 --> 00:01:55,708
<font color="#CCCCCC">practice when you return from</font><font color="#E5E5E5"> the</font>

41
00:01:52,679 --> 00:01:57,329
<font color="#E5E5E5">vulnerable function</font><font color="#CCCCCC"> you jump to the new</font>

42
00:01:55,709 --> 00:01:59,909
return address which is the address of

43
00:01:57,329 --> 00:02:01,678
<font color="#E5E5E5">the first gadget then you execute the</font>

44
00:01:59,909 --> 00:02:05,009
instructions of the<font color="#E5E5E5"> first gadget and</font>

45
00:02:01,679 --> 00:02:06,479
when you reach a return<font color="#E5E5E5"> you jump to the</font>

46
00:02:05,009 --> 00:02:08,310
<font color="#CCCCCC">next address</font><font color="#E5E5E5"> in the stack which is the</font>

47
00:02:06,479 --> 00:02:11,280
address<font color="#E5E5E5"> of the second gadget so you jump</font>

48
00:02:08,310 --> 00:02:13,680
to<font color="#E5E5E5"> the second gadget you execute you you</font>

49
00:02:11,280 --> 00:02:15,819
reach<font color="#CCCCCC"> a return then</font><font color="#E5E5E5"> you jump to</font><font color="#CCCCCC"> the</font>

50
00:02:13,680 --> 00:02:17,739
third gadget and so on

51
00:02:15,819 --> 00:02:19,629
and so you can see that<font color="#E5E5E5"> by chaining</font>

52
00:02:17,739 --> 00:02:22,329
gadgets<font color="#CCCCCC"> so</font><font color="#E5E5E5"> creating what we call it a</font>

53
00:02:19,629 --> 00:02:24,548
rope chain<font color="#E5E5E5"> you can you can execute any</font>

54
00:02:22,329 --> 00:02:27,659
sequence<font color="#E5E5E5"> of malicious instructions in</font>

55
00:02:24,549 --> 00:02:31,120
<font color="#E5E5E5">order to compromise the</font><font color="#CCCCCC"> Venerable system</font>

56
00:02:27,659 --> 00:02:32,950
so it's a very powerful kind<font color="#E5E5E5"> of attack</font>

57
00:02:31,120 --> 00:02:34,840
but when you try to do it you<font color="#E5E5E5"> have two</font>

58
00:02:32,950 --> 00:02:37,780
main problems<font color="#E5E5E5"> the first one we call it</font>

59
00:02:34,840 --> 00:02:39,579
<font color="#E5E5E5">gadget search so it's you have your</font>

60
00:02:37,780 --> 00:02:41,799
vulnerable binary and you have a set of

61
00:02:39,579 --> 00:02:43,900
gadgets<font color="#CCCCCC"> that you can use in</font><font color="#E5E5E5"> this binary</font>

62
00:02:41,799 --> 00:02:46,480
<font color="#E5E5E5">the problem is you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do some</font>

63
00:02:43,900 --> 00:02:48,790
operation like put register<font color="#E5E5E5"> one in</font>

64
00:02:46,480 --> 00:02:50,409
register<font color="#E5E5E5"> two and you have to find the</font>

65
00:02:48,790 --> 00:02:52,989
gadget that<font color="#E5E5E5"> does it that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> the right</font>

66
00:02:50,409 --> 00:02:55,000
instruction to do it and you can have

67
00:02:52,989 --> 00:02:57,549
thousands<font color="#E5E5E5"> of gadgets in a single binary</font>

68
00:02:55,000 --> 00:02:59,560
so but you<font color="#E5E5E5"> have to look at each of them</font>

69
00:02:57,549 --> 00:03:01,930
and see<font color="#CCCCCC"> if they can do what you want or</font>

70
00:02:59,560 --> 00:03:03,849
not<font color="#E5E5E5"> so it's very time consuming it's the</font>

71
00:03:01,930 --> 00:03:05,620
first problem the<font color="#CCCCCC"> second problem</font><font color="#E5E5E5"> is</font>

72
00:03:03,849 --> 00:03:08,409
gadget chaining<font color="#E5E5E5"> and it corresponds to</font>

73
00:03:05,620 --> 00:03:10,090
the case where you don't<font color="#E5E5E5"> have you</font><font color="#CCCCCC"> don't</font>

74
00:03:08,409 --> 00:03:12,159
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a single gadget that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> do what</font>

75
00:03:10,090 --> 00:03:14,799
<font color="#CCCCCC">you want you will have to execute</font>

76
00:03:12,159 --> 00:03:18,280
several gadgets<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to like emulate</font>

77
00:03:14,799 --> 00:03:20,579
the operation that you want to do for

78
00:03:18,280 --> 00:03:23,470
<font color="#CCCCCC">example if you want</font><font color="#E5E5E5"> to put</font><font color="#CCCCCC"> EBX into EAX</font>

79
00:03:20,579 --> 00:03:26,079
<font color="#CCCCCC">you might use a gadget that</font><font color="#E5E5E5"> first moves</font>

80
00:03:23,470 --> 00:03:28,799
a<font color="#E5E5E5"> big sin to edx and then another</font><font color="#CCCCCC"> gadget</font>

81
00:03:26,079 --> 00:03:32,169
that<font color="#E5E5E5"> moves edx into EAX</font>

82
00:03:28,799 --> 00:03:34,930
so to solve those<font color="#CCCCCC"> problems</font><font color="#E5E5E5"> you already</font>

83
00:03:32,169 --> 00:03:38,439
have some tools<font color="#E5E5E5"> that exist actually</font><font color="#CCCCCC"> you</font>

84
00:03:34,930 --> 00:03:39,699
have syntactic tools<font color="#CCCCCC"> basically they list</font>

85
00:03:38,439 --> 00:03:42,220
all the gadgets<font color="#CCCCCC"> that you have in a</font>

86
00:03:39,699 --> 00:03:44,620
binary and then<font color="#E5E5E5"> you can make syntactic</font>

87
00:03:42,220 --> 00:03:46,750
queries<font color="#E5E5E5"> to find gadgets</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you think</font>

88
00:03:44,620 --> 00:03:49,810
<font color="#E5E5E5">are interesting they're very fast</font><font color="#CCCCCC"> but</font>

89
00:03:46,750 --> 00:03:52,359
they're also<font color="#E5E5E5"> not so powerful</font><font color="#CCCCCC"> because</font>

90
00:03:49,810 --> 00:03:54,040
it's difficult<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> good gadgets then</font>

91
00:03:52,359 --> 00:03:57,129
you have semantic<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> they not only</font>

92
00:03:54,040 --> 00:03:59,349
<font color="#E5E5E5">list gadgets but they also analyze their</font>

93
00:03:57,129 --> 00:04:00,489
<font color="#E5E5E5">semantics</font><font color="#CCCCCC"> to understand what they do</font><font color="#E5E5E5"> and</font>

94
00:03:59,349 --> 00:04:02,259
then you can<font color="#CCCCCC"> provide them with a</font>

95
00:04:00,489 --> 00:04:04,060
semantic query<font color="#CCCCCC"> just</font><font color="#E5E5E5"> tell them what you</font>

96
00:04:02,259 --> 00:04:07,208
<font color="#CCCCCC">want to do and they</font><font color="#E5E5E5"> will find the right</font>

97
00:04:04,060 --> 00:04:10,239
gadgets so in practice for gadget search

98
00:04:07,209 --> 00:04:12,459
<font color="#E5E5E5">finding a single gadget semantic tools</font>

99
00:04:10,239 --> 00:04:14,769
do quite<font color="#CCCCCC"> well so they</font><font color="#E5E5E5"> can be very</font>

100
00:04:12,459 --> 00:04:18,608
<font color="#E5E5E5">helpful but when it comes to gadget</font>

101
00:04:14,769 --> 00:04:20,108
chaining<font color="#CCCCCC"> you have a lot of like you</font>

102
00:04:18,608 --> 00:04:23,500
don't<font color="#CCCCCC"> really have a tool that gives you</font>

103
00:04:20,108 --> 00:04:25,719
very practical results<font color="#E5E5E5"> in reasonable</font>

104
00:04:23,500 --> 00:04:27,470
time let's say so that that was the

105
00:04:25,719 --> 00:04:29,300
motivation<font color="#E5E5E5"> to write robbed</font>

106
00:04:27,470 --> 00:04:31,190
<font color="#CCCCCC">later</font><font color="#E5E5E5"> because we wanted a tool that</font>

107
00:04:29,300 --> 00:04:35,510
<font color="#E5E5E5">could do gadget search and gadget</font>

108
00:04:31,190 --> 00:04:36,290
chaining<font color="#CCCCCC"> in an efficient manner so let's</font>

109
00:04:35,510 --> 00:04:39,140
talk about<font color="#E5E5E5"> it</font>

110
00:04:36,290 --> 00:04:40,970
<font color="#CCCCCC">rev generator I will show how how it</font>

111
00:04:39,140 --> 00:04:42,680
<font color="#E5E5E5">solves both of those problems and</font>

112
00:04:40,970 --> 00:04:45,910
briefly talk<font color="#CCCCCC"> about implementing</font><font color="#E5E5E5"> the</font>

113
00:04:42,680 --> 00:04:48,890
implementation also so gadget<font color="#E5E5E5"> search</font>

114
00:04:45,910 --> 00:04:53,300
<font color="#CCCCCC">find a single gadget that fulfills some</font>

115
00:04:48,890 --> 00:04:56,060
semantic requirements<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to be</font>

116
00:04:53,300 --> 00:04:58,880
gadget search<font color="#E5E5E5"> we decided to represent</font>

117
00:04:56,060 --> 00:05:01,220
gadgets as dependency graphs<font color="#E5E5E5"> and then</font>

118
00:04:58,880 --> 00:05:04,100
<font color="#E5E5E5">from those graphs extract the gadget</font>

119
00:05:01,220 --> 00:05:06,710
semantics and then according<font color="#CCCCCC"> to its</font>

120
00:05:04,100 --> 00:05:09,500
semantics we would add entries for<font color="#E5E5E5"> this</font>

121
00:05:06,710 --> 00:05:10,969
gadget<font color="#E5E5E5"> in a like cementing database so</font>

122
00:05:09,500 --> 00:05:13,070
<font color="#E5E5E5">that you can just query the database</font>

123
00:05:10,970 --> 00:05:17,270
with a semantic query and get<font color="#E5E5E5"> the gadget</font>

124
00:05:13,070 --> 00:05:21,710
that much is this query so here you have

125
00:05:17,270 --> 00:05:24,620
an example<font color="#E5E5E5"> of a gadget graph on the so</font>

126
00:05:21,710 --> 00:05:28,219
the gadget is push<font color="#CCCCCC"> EBX</font><font color="#E5E5E5"> then move 0</font>

127
00:05:24,620 --> 00:05:31,040
address<font color="#CCCCCC"> ESI</font><font color="#E5E5E5"> and then pop</font><font color="#CCCCCC"> X return so the</font>

128
00:05:28,220 --> 00:05:34,070
nodes of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> graph</font><font color="#E5E5E5"> are registers if you</font>

129
00:05:31,040 --> 00:05:35,750
look at ESP register for instance you

130
00:05:34,070 --> 00:05:38,630
can<font color="#E5E5E5"> see that you</font><font color="#CCCCCC"> have several nodes for</font>

131
00:05:35,750 --> 00:05:41,300
ESP so basically you have<font color="#CCCCCC"> one node</font><font color="#E5E5E5"> every</font>

132
00:05:38,630 --> 00:05:43,850
time you modify a register<font color="#E5E5E5"> so ESP</font><font color="#CCCCCC"> 0 at</font>

133
00:05:41,300 --> 00:05:46,010
the<font color="#E5E5E5"> bottom is the initial value of ESP</font>

134
00:05:43,850 --> 00:05:48,590
<font color="#E5E5E5">when you start executing the gadget and</font>

135
00:05:46,010 --> 00:05:51,380
<font color="#E5E5E5">then ESP 1 will be the value of ESP</font>

136
00:05:48,590 --> 00:05:55,580
after the push ESP - after the pop and

137
00:05:51,380 --> 00:05:57,590
ESP 3<font color="#CCCCCC"> after the return</font><font color="#E5E5E5"> the arcs and the</font>

138
00:05:55,580 --> 00:06:01,370
dependency arc in the graph represents<font color="#CCCCCC"> a</font>

139
00:05:57,590 --> 00:06:03,440
dependency between<font color="#E5E5E5"> registers so if you</font>

140
00:06:01,370 --> 00:06:05,419
assign register 2 to register<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> you will</font>

141
00:06:03,440 --> 00:06:08,630
<font color="#CCCCCC">have an arc dependency art</font><font color="#E5E5E5"> from register</font>

142
00:06:05,419 --> 00:06:10,669
1 to register 2<font color="#E5E5E5"> and this will help us</font>

143
00:06:08,630 --> 00:06:13,270
compute<font color="#E5E5E5"> the semantics of the gadgets</font>

144
00:06:10,669 --> 00:06:15,440
also I didn't<font color="#E5E5E5"> mention it but you have a</font>

145
00:06:13,270 --> 00:06:19,219
one node one single node that represents

146
00:06:15,440 --> 00:06:21,110
the memory and arcs<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the labels they</font>

147
00:06:19,220 --> 00:06:24,290
<font color="#E5E5E5">are the memory addresses where you where</font>

148
00:06:21,110 --> 00:06:26,419
you<font color="#E5E5E5"> write and read from memory</font><font color="#CCCCCC"> so other</font>

149
00:06:24,290 --> 00:06:29,030
you compute gadget semantics<font color="#CCCCCC"> in other</font>

150
00:06:26,419 --> 00:06:30,919
terms how do you express how registers

151
00:06:29,030 --> 00:06:33,919
have evolved<font color="#CCCCCC"> after execution</font><font color="#E5E5E5"> of the</font>

152
00:06:30,919 --> 00:06:36,080
gadget<font color="#E5E5E5"> so we're gonna take ESP as an</font>

153
00:06:33,919 --> 00:06:39,440
example<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> take the last value of</font>

154
00:06:36,080 --> 00:06:40,740
ESP ESP<font color="#E5E5E5"> 3 and you can</font><font color="#CCCCCC"> see in the graph</font>

155
00:06:39,440 --> 00:06:43,169
that<font color="#E5E5E5"> it's equal</font><font color="#CCCCCC"> to es</font>

156
00:06:40,740 --> 00:06:45,630
<font color="#E5E5E5">two plus four so then you will just</font>

157
00:06:43,169 --> 00:06:48,389
follow the dependency<font color="#E5E5E5"> ox in the graph</font>

158
00:06:45,630 --> 00:06:50,940
and<font color="#CCCCCC"> you replace esp-2 by its dependency</font>

159
00:06:48,389 --> 00:06:53,340
which is<font color="#CCCCCC"> esp one plus four</font><font color="#E5E5E5"> you do the</font>

160
00:06:50,940 --> 00:06:57,120
same<font color="#E5E5E5"> for</font><font color="#CCCCCC"> VSP one and then until you</font>

161
00:06:53,340 --> 00:06:59,909
reach ESP zero<font color="#E5E5E5"> so now you have SP 3</font>

162
00:06:57,120 --> 00:07:03,000
equals<font color="#CCCCCC"> p0</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> four which</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> that you</font>

163
00:06:59,910 --> 00:07:05,490
<font color="#CCCCCC">express</font><font color="#E5E5E5"> the final value of SP depending</font>

164
00:07:03,000 --> 00:07:08,970
on its first value<font color="#E5E5E5"> and the initial value</font>

165
00:07:05,490 --> 00:07:13,050
so here<font color="#E5E5E5"> you can see that this gadget is</font>

166
00:07:08,970 --> 00:07:16,409
incrementing ESP by<font color="#E5E5E5"> four</font><font color="#CCCCCC"> let's take an</font>

167
00:07:13,050 --> 00:07:17,759
example on<font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> because it depends on</font>

168
00:07:16,409 --> 00:07:19,889
<font color="#E5E5E5">memory so it's a</font><font color="#CCCCCC"> little bit more</font>

169
00:07:17,759 --> 00:07:22,949
<font color="#CCCCCC">complicated</font><font color="#E5E5E5"> so you can see in the graph</font>

170
00:07:19,889 --> 00:07:25,889
<font color="#CCCCCC">e^x is</font><font color="#E5E5E5"> equal to memory at address es p1</font>

171
00:07:22,949 --> 00:07:31,289
<font color="#E5E5E5">this comes from the pop</font><font color="#CCCCCC"> ax instruction</font>

172
00:07:25,889 --> 00:07:34,409
and what is memory of address es p1 well

173
00:07:31,289 --> 00:07:36,840
we will check all<font color="#E5E5E5"> the arcs</font><font color="#CCCCCC"> of the</font>

174
00:07:34,409 --> 00:07:38,460
dependency<font color="#CCCCCC"> acts</font><font color="#E5E5E5"> of memory so the all</font><font color="#CCCCCC"> the</font>

175
00:07:36,840 --> 00:07:41,340
write operations<font color="#CCCCCC"> there like the previous</font>

176
00:07:38,460 --> 00:07:43,138
writes operations in the memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

177
00:07:41,340 --> 00:07:48,030
<font color="#CCCCCC">can see that you wrote</font><font color="#E5E5E5"> zero in memory as</font>

178
00:07:43,139 --> 00:07:51,659
address es<font color="#E5E5E5"> a</font><font color="#CCCCCC"> zero so you</font><font color="#E5E5E5"> know that</font><font color="#CCCCCC"> ei X</font>

179
00:07:48,030 --> 00:07:54,239
will be equal<font color="#E5E5E5"> to 0 if ESP</font><font color="#CCCCCC"> one the</font>

180
00:07:51,659 --> 00:07:57,210
register<font color="#E5E5E5"> from which you the address from</font>

181
00:07:54,240 --> 00:08:00,000
issue read is equal to<font color="#E5E5E5"> es</font><font color="#CCCCCC"> i0</font><font color="#E5E5E5"> the address</font>

182
00:07:57,210 --> 00:08:02,280
from which you wrote previously<font color="#E5E5E5"> if it's</font>

183
00:08:00,000 --> 00:08:04,590
not<font color="#E5E5E5"> equal then you</font><font color="#CCCCCC"> don't know yet what</font>

184
00:08:02,280 --> 00:08:06,869
<font color="#CCCCCC">it</font><font color="#E5E5E5"> can be then you check the other</font><font color="#CCCCCC"> arc</font>

185
00:08:04,590 --> 00:08:10,619
and you can see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> ok the other value</font>

186
00:08:06,870 --> 00:08:12,900
of<font color="#CCCCCC"> e x can be eb x if es p1 equals to</font><font color="#E5E5E5"> e</font>

187
00:08:10,620 --> 00:08:16,050
<font color="#E5E5E5">SP 1 which was which will always</font><font color="#CCCCCC"> be true</font>

188
00:08:12,900 --> 00:08:18,690
<font color="#E5E5E5">and if yes but ESP</font><font color="#CCCCCC"> 1 is different than</font>

189
00:08:16,050 --> 00:08:21,210
<font color="#CCCCCC">si zero which means rewrote</font><font color="#E5E5E5"> eb x in the</font>

190
00:08:18,690 --> 00:08:25,759
stack<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we didn't overwrite it</font><font color="#E5E5E5"> with</font>

191
00:08:21,210 --> 00:08:29,068
the<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> before popping it into EAX</font>

192
00:08:25,759 --> 00:08:31,500
so once you've computed<font color="#E5E5E5"> all the</font>

193
00:08:29,069 --> 00:08:33,719
semantics for<font color="#E5E5E5"> the gadget you can just</font>

194
00:08:31,500 --> 00:08:37,828
add entry for this gadget<font color="#E5E5E5"> in the big</font>

195
00:08:33,719 --> 00:08:40,740
gadget database so for instance you have

196
00:08:37,828 --> 00:08:43,348
<font color="#E5E5E5">the dependency for the instruction</font>

197
00:08:40,740 --> 00:08:45,770
pointer<font color="#E5E5E5"> a IP is equal</font><font color="#CCCCCC"> to memory at</font>

198
00:08:43,349 --> 00:08:48,750
address<font color="#E5E5E5"> es</font><font color="#CCCCCC"> p 0 so this</font><font color="#E5E5E5"> is from the</font>

199
00:08:45,770 --> 00:08:51,430
return<font color="#CCCCCC"> instruction actually</font><font color="#E5E5E5"> and so you</font>

200
00:08:48,750 --> 00:08:55,540
will add an<font color="#CCCCCC"> entry in the</font><font color="#E5E5E5"> database for</font>

201
00:08:51,430 --> 00:08:58,510
<font color="#E5E5E5">P equals</font><font color="#CCCCCC"> two memory</font><font color="#E5E5E5"> ESP then you have</font>

202
00:08:55,540 --> 00:09:00,370
ESP<font color="#CCCCCC"> three equals two ESP</font><font color="#E5E5E5"> zero plus four</font>

203
00:08:58,510 --> 00:09:04,810
so you will add an<font color="#CCCCCC"> entry in a database</font>

204
00:09:00,370 --> 00:09:07,660
for ESP equal ESP plus four for X it's a

205
00:09:04,810 --> 00:09:09,579
little bit more complicated<font color="#CCCCCC"> you have two</font>

206
00:09:07,660 --> 00:09:11,649
possible<font color="#CCCCCC"> values so you will</font><font color="#E5E5E5"> have two</font>

207
00:09:09,580 --> 00:09:14,500
entries in the database<font color="#E5E5E5"> you have one</font>

208
00:09:11,649 --> 00:09:17,410
entry for<font color="#CCCCCC"> y is equal zero and one entry</font>

209
00:09:14,500 --> 00:09:21,279
for<font color="#E5E5E5"> X equal</font><font color="#CCCCCC"> B B</font><font color="#E5E5E5"> X and</font><font color="#CCCCCC"> you also store the</font>

210
00:09:17,410 --> 00:09:24,270
<font color="#E5E5E5">Associated preconditions you can do this</font>

211
00:09:21,279 --> 00:09:27,580
<font color="#E5E5E5">for the memory you can do this for every</font>

212
00:09:24,270 --> 00:09:29,470
every<font color="#CCCCCC"> semantics that you</font><font color="#E5E5E5"> computed and</font>

213
00:09:27,580 --> 00:09:31,000
basically after<font color="#E5E5E5"> you did</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you just</font>

214
00:09:29,470 --> 00:09:33,520
<font color="#E5E5E5">need to make a semantic query to the</font>

215
00:09:31,000 --> 00:09:36,640
database like give me a<font color="#CCCCCC"> gadget that</font><font color="#E5E5E5"> puts</font>

216
00:09:33,520 --> 00:09:42,910
<font color="#CCCCCC">EBX into EAX and you will get this</font>

217
00:09:36,640 --> 00:09:44,319
gadget the next part will be<font color="#E5E5E5"> judge</font>

218
00:09:42,910 --> 00:09:47,620
chaining<font color="#CCCCCC"> so now we can do a gadget</font>

219
00:09:44,320 --> 00:09:52,529
search in an efficient manner<font color="#E5E5E5"> let's say</font>

220
00:09:47,620 --> 00:09:56,020
so we will not do a gadget chaining so

221
00:09:52,529 --> 00:09:59,589
to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to efficiently combine</font>

222
00:09:56,020 --> 00:10:02,529
gadgets<font color="#E5E5E5"> together what we will do is we</font>

223
00:09:59,589 --> 00:10:04,900
will use the previous result that we had

224
00:10:02,529 --> 00:10:07,029
so we<font color="#CCCCCC"> will build</font><font color="#E5E5E5"> take all the available</font>

225
00:10:04,900 --> 00:10:09,520
gadgets we will build this big<font color="#E5E5E5"> database</font>

226
00:10:07,029 --> 00:10:12,570
<font color="#E5E5E5">with gadgets and then we will use it and</font>

227
00:10:09,520 --> 00:10:15,520
we will use<font color="#E5E5E5"> it with the search engine</font>

228
00:10:12,570 --> 00:10:17,680
<font color="#CCCCCC">that can look up in this</font><font color="#E5E5E5"> database with</font>

229
00:10:15,520 --> 00:10:20,829
the<font color="#E5E5E5"> semantic queries and then the</font>

230
00:10:17,680 --> 00:10:27,180
<font color="#CCCCCC">essential</font><font color="#E5E5E5"> engine has predefined</font>

231
00:10:20,830 --> 00:10:27,180
strategies in order<font color="#CCCCCC"> to combine gadgets</font>

232
00:10:28,410 --> 00:10:34,900
to combine gadgets<font color="#E5E5E5"> and emulate</font>

233
00:10:32,650 --> 00:10:38,050
operations<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it cannot achieve with a</font>

234
00:10:34,900 --> 00:10:40,300
single gadget so I don't want to dig too

235
00:10:38,050 --> 00:10:42,910
much into<font color="#E5E5E5"> like theory I think I will</font>

236
00:10:40,300 --> 00:10:44,979
<font color="#CCCCCC">just give</font><font color="#E5E5E5"> an example of how simple</font>

237
00:10:42,910 --> 00:10:49,029
<font color="#E5E5E5">chaining works so let's say the</font><font color="#CCCCCC"> user</font>

238
00:10:44,980 --> 00:10:49,540
provides<font color="#CCCCCC"> a semantic query to the search</font>

239
00:10:49,029 --> 00:10:53,260
engine

240
00:10:49,540 --> 00:10:56,050
so here it's<font color="#E5E5E5"> please put EDX into</font><font color="#CCCCCC"> EBX so</font>

241
00:10:53,260 --> 00:10:58,209
the search engine uses<font color="#E5E5E5"> a basic look up</font>

242
00:10:56,050 --> 00:11:01,689
method<font color="#E5E5E5"> to look in the database for this</font>

243
00:10:58,209 --> 00:11:03,739
<font color="#E5E5E5">semantic requirement and let's say the</font>

244
00:11:01,690 --> 00:11:05,990
database gives<font color="#E5E5E5"> no result so</font>

245
00:11:03,740 --> 00:11:08,240
the basic look<font color="#CCCCCC"> of</font><font color="#E5E5E5"> method said I didn't</font>

246
00:11:05,990 --> 00:11:10,760
find any gadget that can<font color="#CCCCCC"> do that</font><font color="#E5E5E5"> so the</font>

247
00:11:08,240 --> 00:11:13,160
search engine will<font color="#E5E5E5"> try to use one of its</font>

248
00:11:10,760 --> 00:11:15,910
strategies here we will try to use<font color="#E5E5E5"> an</font>

249
00:11:13,160 --> 00:11:18,079
intermediate register so put<font color="#E5E5E5"> EDX in some</font>

250
00:11:15,910 --> 00:11:20,750
gadget and then transfer this

251
00:11:18,080 --> 00:11:21,830
intermediate gadget into<font color="#CCCCCC"> EBX</font><font color="#E5E5E5"> so let's</font>

252
00:11:20,750 --> 00:11:24,740
try with<font color="#CCCCCC"> eax</font>

253
00:11:21,830 --> 00:11:26,720
<font color="#E5E5E5">we use the basic lookup method we query</font>

254
00:11:24,740 --> 00:11:29,330
<font color="#CCCCCC">the database and let's</font><font color="#E5E5E5"> say we find the</font>

255
00:11:26,720 --> 00:11:32,210
<font color="#E5E5E5">suitable gadget then this gadget is</font>

256
00:11:29,330 --> 00:11:34,670
returned to<font color="#E5E5E5"> the strategy and now we have</font>

257
00:11:32,210 --> 00:11:37,580
one part like<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> it's into EBX</font><font color="#E5E5E5"> but</font>

258
00:11:34,670 --> 00:11:39,829
first we won't eat<font color="#CCCCCC"> the</font><font color="#E5E5E5"> eggs into</font><font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> so</font>

259
00:11:37,580 --> 00:11:42,920
again we do a query<font color="#CCCCCC"> to the basic lookup</font>

260
00:11:39,830 --> 00:11:45,850
method we query the database<font color="#E5E5E5"> we get a</font>

261
00:11:42,920 --> 00:11:48,560
matching gadget we return it to the

262
00:11:45,850 --> 00:11:50,420
strategy function<font color="#E5E5E5"> then you have</font>

263
00:11:48,560 --> 00:11:53,089
everything<font color="#E5E5E5"> you need to build the</font><font color="#CCCCCC"> rope</font>

264
00:11:50,420 --> 00:11:56,329
chain<font color="#E5E5E5"> that can put EDX into evx so you</font>

265
00:11:53,090 --> 00:11:58,190
just reorder the gadgets<font color="#E5E5E5"> if you need to</font>

266
00:11:56,330 --> 00:12:00,530
add some padding<font color="#CCCCCC"> because you have some</font>

267
00:11:58,190 --> 00:12:02,630
side effects from instructions<font color="#E5E5E5"> things</font>

268
00:12:00,530 --> 00:12:07,060
like that you add it and<font color="#CCCCCC"> then you just</font>

269
00:12:02,630 --> 00:12:11,510
<font color="#CCCCCC">return the rope chain to the user I</font>

270
00:12:07,060 --> 00:12:13,089
don't know how much time<font color="#E5E5E5"> I have left</font><font color="#CCCCCC"> I</font>

271
00:12:11,510 --> 00:12:17,150
<font color="#CCCCCC">finished yeah</font><font color="#E5E5E5"> okay</font>

272
00:12:13,090 --> 00:12:20,600
so<font color="#E5E5E5"> I will very</font><font color="#CCCCCC"> very briefly mention the</font>

273
00:12:17,150 --> 00:12:23,510
<font color="#CCCCCC">chaining strategies that I have</font><font color="#E5E5E5"> we can</font>

274
00:12:20,600 --> 00:12:25,550
come back to it<font color="#E5E5E5"> folder questions I don't</font>

275
00:12:23,510 --> 00:12:27,410
spend too much time<font color="#E5E5E5"> on it but basically</font>

276
00:12:25,550 --> 00:12:29,359
on the left you<font color="#CCCCCC"> have all</font><font color="#E5E5E5"> the basic</font>

277
00:12:27,410 --> 00:12:32,449
semantic queries that<font color="#E5E5E5"> you can do and on</font>

278
00:12:29,360 --> 00:12:35,810
the right you have how emulates<font color="#CCCCCC"> them</font>

279
00:12:32,450 --> 00:12:37,880
with by changing different<font color="#E5E5E5"> gadgets so I</font>

280
00:12:35,810 --> 00:12:40,069
skip this part sorry<font color="#E5E5E5"> because they don't</font>

281
00:12:37,880 --> 00:12:44,180
<font color="#CCCCCC">have much time but we can come</font><font color="#E5E5E5"> back to</font>

282
00:12:40,070 --> 00:12:47,810
<font color="#CCCCCC">it later I implemented those methods</font><font color="#E5E5E5"> or</font>

283
00:12:44,180 --> 00:12:51,020
<font color="#E5E5E5">the graph representation and and</font><font color="#CCCCCC"> the</font>

284
00:12:47,810 --> 00:12:52,729
search engine in a tool Rob generator so

285
00:12:51,020 --> 00:12:55,910
it's<font color="#CCCCCC"> written in Python and</font><font color="#E5E5E5"> you can find</font>

286
00:12:52,730 --> 00:12:58,250
<font color="#E5E5E5">it on github</font><font color="#CCCCCC"> it's free the tool can</font><font color="#E5E5E5"> do</font>

287
00:12:55,910 --> 00:13:00,770
semantic search<font color="#E5E5E5"> it can chain gadgets and</font>

288
00:12:58,250 --> 00:13:05,080
you have also<font color="#E5E5E5"> more advanced exploit</font>

289
00:13:00,770 --> 00:13:07,550
strategies as we will see in the demo

290
00:13:05,080 --> 00:13:10,760
<font color="#CCCCCC">just before the demo I want</font><font color="#E5E5E5"> to talk</font>

291
00:13:07,550 --> 00:13:12,380
<font color="#CCCCCC">about the results</font><font color="#E5E5E5"> that we got so I</font>

292
00:13:10,760 --> 00:13:15,260
<font color="#E5E5E5">compared</font><font color="#CCCCCC"> a generator to a</font>

293
00:13:12,380 --> 00:13:17,080
<font color="#E5E5E5">state-of-the-art tool which is</font><font color="#CCCCCC"> called</font>

294
00:13:15,260 --> 00:13:20,319
Roper<font color="#E5E5E5"> so into the tool that has</font>

295
00:13:17,080 --> 00:13:23,340
most flexible<font color="#E5E5E5"> and the richest semantic</font>

296
00:13:20,320 --> 00:13:26,170
search features<font color="#CCCCCC"> at the moment and</font>

297
00:13:23,340 --> 00:13:31,030
basically I analyzed<font color="#E5E5E5"> the tour program</font>

298
00:13:26,170 --> 00:13:34,660
<font color="#E5E5E5">which is about seven 17,000 gadgets and</font>

299
00:13:31,030 --> 00:13:37,000
I gave<font color="#CCCCCC"> add a set of semantic queries and</font>

300
00:13:34,660 --> 00:13:39,069
I gave them<font color="#CCCCCC"> to each</font><font color="#E5E5E5"> tool and so if the</font>

301
00:13:37,000 --> 00:13:42,910
two couldn't build a matching<font color="#CCCCCC"> Rock chain</font>

302
00:13:39,070 --> 00:13:45,550
or not so<font color="#E5E5E5"> you can see that</font><font color="#CCCCCC"> Rob generator</font>

303
00:13:42,910 --> 00:13:48,490
performed much better<font color="#CCCCCC"> than</font><font color="#E5E5E5"> rocker on</font>

304
00:13:45,550 --> 00:13:52,589
queries that involve only transferring

305
00:13:48,490 --> 00:13:55,720
register values<font color="#E5E5E5"> I also gave queries</font>

306
00:13:52,590 --> 00:13:57,820
<font color="#E5E5E5">manipulating memory so putting</font><font color="#CCCCCC"> one</font>

307
00:13:55,720 --> 00:14:01,720
register<font color="#E5E5E5"> in reading or writing from</font>

308
00:13:57,820 --> 00:14:03,250
<font color="#E5E5E5">memory and again Rob generator proved to</font>

309
00:14:01,720 --> 00:14:06,940
be much more powerful

310
00:14:03,250 --> 00:14:10,000
<font color="#CCCCCC">I also</font><font color="#E5E5E5"> measure the time consumption so</font>

311
00:14:06,940 --> 00:14:12,220
for binary analysis so it's mean like

312
00:14:10,000 --> 00:14:15,190
the time you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to get all the gadgets</font>

313
00:14:12,220 --> 00:14:16,900
and analyze them and<font color="#E5E5E5"> you can see that</font>

314
00:14:15,190 --> 00:14:20,170
<font color="#CCCCCC">probe generator is actually much slower</font>

315
00:14:16,900 --> 00:14:22,329
than<font color="#CCCCCC"> Roper but still like the time</font>

316
00:14:20,170 --> 00:14:24,760
needed for<font color="#E5E5E5"> the competition is</font><font color="#CCCCCC"> really</font>

317
00:14:22,330 --> 00:14:27,070
acceptable<font color="#E5E5E5"> like</font><font color="#CCCCCC"> 2 or 3 minutes you</font><font color="#E5E5E5"> can</font>

318
00:14:24,760 --> 00:14:30,790
just get a coffee<font color="#E5E5E5"> and come back and this</font>

319
00:14:27,070 --> 00:14:33,190
<font color="#E5E5E5">is done but I also measure the time that</font>

320
00:14:30,790 --> 00:14:35,469
the tools needed to<font color="#CCCCCC"> answer a query</font><font color="#E5E5E5"> like</font>

321
00:14:33,190 --> 00:14:38,110
when you type<font color="#CCCCCC"> a semantic query and how</font>

322
00:14:35,470 --> 00:14:41,020
much that was the time before<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get an</font>

323
00:14:38,110 --> 00:14:42,970
answer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually you got almost</font>

324
00:14:41,020 --> 00:14:45,760
immediate answers with the<font color="#E5E5E5"> Rob generator</font>

325
00:14:42,970 --> 00:14:48,370
while Roper takes some time<font color="#E5E5E5"> to give you</font>

326
00:14:45,760 --> 00:14:52,080
a matching gadget or<font color="#CCCCCC"> Rob chain so I</font>

327
00:14:48,370 --> 00:14:55,270
think it's the<font color="#E5E5E5"> best trade-off because I</font>

328
00:14:52,080 --> 00:14:56,920
mean you can wait<font color="#E5E5E5"> for the analysis to</font><font color="#CCCCCC"> be</font>

329
00:14:55,270 --> 00:14:59,079
<font color="#CCCCCC">done but when you sit in front</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> your</font>

330
00:14:56,920 --> 00:15:01,540
<font color="#CCCCCC">computer</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> to exploit a program</font>

331
00:14:59,080 --> 00:15:03,550
you don't want to wait 10 15<font color="#E5E5E5"> seconds to</font>

332
00:15:01,540 --> 00:15:07,449
get an<font color="#E5E5E5"> answer</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> it's nice to have a</font>

333
00:15:03,550 --> 00:15:09,250
responsive tool so now<font color="#E5E5E5"> I will</font>

334
00:15:07,450 --> 00:15:12,040
demonstrate the tool on a vulnerable

335
00:15:09,250 --> 00:15:15,190
program so I will explode<font color="#E5E5E5"> a binary from</font>

336
00:15:12,040 --> 00:15:18,849
<font color="#E5E5E5">root me</font><font color="#CCCCCC"> so it's a challenge that is</font>

337
00:15:15,190 --> 00:15:21,940
level hard on the<font color="#E5E5E5"> site it's a 64 bytes</font>

338
00:15:18,850 --> 00:15:24,610
<font color="#CCCCCC">yell F executable and it's exploited</font>

339
00:15:21,940 --> 00:15:25,610
with the system protections activated so

340
00:15:24,610 --> 00:15:27,290
you have SLR

341
00:15:25,610 --> 00:15:30,110
you have the heap and<font color="#CCCCCC"> the stack that are</font>

342
00:15:27,290 --> 00:15:34,790
not executable<font color="#E5E5E5"> and you have read only</font>

343
00:15:30,110 --> 00:15:51,620
relocations also so I will launch the

344
00:15:34,790 --> 00:15:54,890
demo<font color="#CCCCCC"> now</font><font color="#E5E5E5"> okay so I renamed the challenge</font>

345
00:15:51,620 --> 00:15:57,800
here like challenge<font color="#CCCCCC"> x6</font><font color="#E5E5E5"> so we launched</font>

346
00:15:54,890 --> 00:16:01,130
the binary<font color="#E5E5E5"> and you can see that it wait</font>

347
00:15:57,800 --> 00:16:03,649
for<font color="#E5E5E5"> an input and it gives you the eggs</font>

348
00:16:01,130 --> 00:16:06,380
<font color="#E5E5E5">result from your</font><font color="#CCCCCC"> poem so here I try</font><font color="#E5E5E5"> to</font>

349
00:16:03,649 --> 00:16:09,170
<font color="#E5E5E5">make the program crush so I just give it</font>

350
00:16:06,380 --> 00:16:11,870
<font color="#CCCCCC">like a very</font><font color="#E5E5E5"> long string like classical</font>

351
00:16:09,170 --> 00:16:18,800
stuff and you can see that I get a sec

352
00:16:11,870 --> 00:16:22,730
<font color="#CCCCCC">fold</font><font color="#E5E5E5"> so probably it's vulnerable</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> okay</font>

353
00:16:18,800 --> 00:16:25,910
so<font color="#CCCCCC"> what I</font><font color="#E5E5E5"> will do is I the binary in the</font>

354
00:16:22,730 --> 00:16:28,519
Rob generator<font color="#E5E5E5"> and I extract all gadgets</font>

355
00:16:25,910 --> 00:16:31,339
and analyze them so here you can see

356
00:16:28,519 --> 00:16:34,070
that<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> I I fast-forwarded</font><font color="#CCCCCC"> at the</font>

357
00:16:31,339 --> 00:16:36,740
time the<font color="#E5E5E5"> analysis took about three</font>

358
00:16:34,070 --> 00:16:39,170
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> so I create the gadget database</font>

359
00:16:36,740 --> 00:16:44,000
and I initialized the semantic search

360
00:16:39,170 --> 00:16:46,490
engine<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you can see that Rob</font>

361
00:16:44,000 --> 00:16:48,500
generator has two modes<font color="#CCCCCC"> so it has the</font>

362
00:16:46,490 --> 00:16:50,149
semantic mode you give a semantic query

363
00:16:48,500 --> 00:16:52,279
and it gives you a matching<font color="#E5E5E5"> Rob chain</font>

364
00:16:50,149 --> 00:16:54,130
<font color="#E5E5E5">and then you have the exploit mode with</font>

365
00:16:52,279 --> 00:16:57,470
the<font color="#CCCCCC"> higher-level</font>

366
00:16:54,130 --> 00:16:59,660
functionalities let's say so we will<font color="#E5E5E5"> use</font>

367
00:16:57,470 --> 00:17:04,100
this mode for the challenge<font color="#E5E5E5"> and we will</font>

368
00:16:59,660 --> 00:17:08,270
use the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> poem comment</font><font color="#E5E5E5"> which aims at</font>

369
00:17:04,099 --> 00:17:10,369
building a full exploit so we will

370
00:17:08,270 --> 00:17:12,199
specify the bug bites like the<font color="#CCCCCC"> bytes we</font>

371
00:17:10,369 --> 00:17:16,010
don't want to be in the exploit<font color="#E5E5E5"> because</font>

372
00:17:12,199 --> 00:17:19,189
it will truncate<font color="#E5E5E5"> our input and and you</font>

373
00:17:16,010 --> 00:17:21,530
cannot exploit it<font color="#CCCCCC"> we tell the tool</font><font color="#E5E5E5"> that</font>

374
00:17:19,189 --> 00:17:25,370
we want<font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> to be written</font><font color="#CCCCCC"> as a</font>

375
00:17:21,530 --> 00:17:28,569
Python<font color="#CCCCCC"> script we tell him</font><font color="#E5E5E5"> that to write</font>

376
00:17:25,369 --> 00:17:32,120
it in a file so<font color="#CCCCCC"> let's say exploit dot py</font>

377
00:17:28,569 --> 00:17:34,189
we will specify the padding length<font color="#E5E5E5"> so I</font>

378
00:17:32,120 --> 00:17:38,260
like<font color="#E5E5E5"> kind of blurred it not to give the</font>

379
00:17:34,190 --> 00:17:40,690
full answer<font color="#CCCCCC"> to the challenge</font>

380
00:17:38,260 --> 00:17:44,590
so delivered shellcode is the strategy

381
00:17:40,690 --> 00:17:46,600
<font color="#CCCCCC">that that we will use</font><font color="#E5E5E5"> and the address</font>

382
00:17:44,590 --> 00:17:49,240
range<font color="#E5E5E5"> is the address range that from</font>

383
00:17:46,600 --> 00:17:51,699
generator can use to<font color="#E5E5E5"> deliver the payload</font>

384
00:17:49,240 --> 00:17:56,020
<font color="#E5E5E5">here it just corresponds to the heap of</font>

385
00:17:51,700 --> 00:17:58,390
of the program so we<font color="#E5E5E5"> you can see that</font>

386
00:17:56,020 --> 00:18:00,400
the<font color="#E5E5E5"> tool supports like you can add your</font>

387
00:17:58,390 --> 00:18:02,169
own shell codes in the tool so here are

388
00:18:00,400 --> 00:18:04,360
just<font color="#E5E5E5"> added to shell code</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> shell</font>

389
00:18:02,169 --> 00:18:07,299
storm<font color="#CCCCCC"> and then you can use them</font><font color="#E5E5E5"> with</font>

390
00:18:04,360 --> 00:18:11,080
<font color="#E5E5E5">this deliver shell code strategy so here</font>

391
00:18:07,299 --> 00:18:14,110
we will<font color="#E5E5E5"> do just exact in Asajj classical</font>

392
00:18:11,080 --> 00:18:16,659
so<font color="#CCCCCC"> do 2 bills so this is a real time</font><font color="#E5E5E5"> so</font>

393
00:18:14,110 --> 00:18:18,520
it<font color="#E5E5E5"> takes about 1 1 or 2 seconds and we</font>

394
00:18:16,660 --> 00:18:21,700
built an exploit<font color="#CCCCCC"> that is a thousand</font>

395
00:18:18,520 --> 00:18:24,910
bytes long approximatively<font color="#CCCCCC"> now we can</font>

396
00:18:21,700 --> 00:18:28,330
exit the tool did it<font color="#E5E5E5"> will indeed</font><font color="#CCCCCC"> its</font>

397
00:18:24,910 --> 00:18:31,630
work and we will briefly<font color="#E5E5E5"> check what</font>

398
00:18:28,330 --> 00:18:34,689
exploited generated by looking at the

399
00:18:31,630 --> 00:18:37,240
<font color="#E5E5E5">Python script so you have the padding</font>

400
00:18:34,690 --> 00:18:39,490
<font color="#E5E5E5">that you requested then you have a call</font>

401
00:18:37,240 --> 00:18:42,280
<font color="#CCCCCC">to M protect to make some memory</font>

402
00:18:39,490 --> 00:18:44,890
executable<font color="#CCCCCC"> then you have a rope chain</font>

403
00:18:42,280 --> 00:18:47,649
that copies<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> into the</font>

404
00:18:44,890 --> 00:18:51,250
memory and in the<font color="#E5E5E5"> end you just jump to</font>

405
00:18:47,650 --> 00:18:53,890
your<font color="#E5E5E5"> shellcode so I will add one last</font>

406
00:18:51,250 --> 00:18:57,370
line in the script<font color="#CCCCCC"> just</font><font color="#E5E5E5"> to print the the</font>

407
00:18:53,890 --> 00:18:59,080
<font color="#CCCCCC">rope chain</font><font color="#E5E5E5"> and then we will try to feed</font>

408
00:18:57,370 --> 00:19:02,320
<font color="#E5E5E5">it as an</font><font color="#CCCCCC"> e-book to the normal program</font>

409
00:18:59,080 --> 00:19:04,090
<font color="#E5E5E5">and see what</font><font color="#CCCCCC"> happens so we write it in a</font>

410
00:19:02,320 --> 00:19:08,049
file<font color="#CCCCCC"> payload and then we give</font><font color="#E5E5E5"> it as an</font>

411
00:19:04,090 --> 00:19:13,480
<font color="#E5E5E5">input to</font><font color="#CCCCCC"> the challenge</font><font color="#E5E5E5"> and hopefully we</font>

412
00:19:08,049 --> 00:19:15,520
get a shell launch it<font color="#E5E5E5"> and you can try</font>

413
00:19:13,480 --> 00:19:18,730
<font color="#CCCCCC">the LS command and you can see that</font><font color="#E5E5E5"> you</font>

414
00:19:15,520 --> 00:19:20,620
pop the shell<font color="#E5E5E5"> so this was done</font><font color="#CCCCCC"> Lima in</font>

415
00:19:18,730 --> 00:19:23,350
above like less than<font color="#CCCCCC"> 5 minutes you could</font>

416
00:19:20,620 --> 00:19:26,399
exploit the<font color="#E5E5E5"> full program and bypass the</font>

417
00:19:23,350 --> 00:19:26,399
<font color="#E5E5E5">system protections</font>

418
00:19:34,910 --> 00:19:38,069
[Applause]

419
00:19:38,420 --> 00:19:45,650
<font color="#CCCCCC">where are my slides</font><font color="#E5E5E5"> I cannot find my</font>

420
00:19:43,320 --> 00:19:45,649
slide

421
00:19:50,080 --> 00:19:57,760
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> one last slide</font><font color="#CCCCCC"> just a quick</font>

422
00:19:53,559 --> 00:19:59,889
summary<font color="#E5E5E5"> so so what we've seen</font><font color="#CCCCCC"> today in</font>

423
00:19:57,760 --> 00:20:03,010
<font color="#E5E5E5">this presentation is so we</font><font color="#CCCCCC"> describe drop</font>

424
00:19:59,890 --> 00:20:04,419
which is<font color="#E5E5E5"> a powerful class of attack but</font>

425
00:20:03,010 --> 00:20:06,700
we saw<font color="#E5E5E5"> that you have two main problems</font>

426
00:20:04,419 --> 00:20:09,039
<font color="#E5E5E5">when you try</font><font color="#CCCCCC"> to do Rob it's</font><font color="#E5E5E5"> a gadget</font>

427
00:20:06,700 --> 00:20:10,750
search and gadget chaining we saw how

428
00:20:09,039 --> 00:20:14,230
Rob generator<font color="#CCCCCC"> tries</font><font color="#E5E5E5"> to solve those</font>

429
00:20:10,750 --> 00:20:16,840
<font color="#CCCCCC">problems by using graph representations</font>

430
00:20:14,230 --> 00:20:20,260
for our gadgets and the custom search

431
00:20:16,840 --> 00:20:23,590
engine and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> I mean we could see that</font>

432
00:20:20,260 --> 00:20:26,110
the results were<font color="#E5E5E5"> quite promising</font><font color="#CCCCCC"> it's</font>

433
00:20:23,590 --> 00:20:28,658
like more powerful than<font color="#E5E5E5"> some state</font><font color="#CCCCCC"> of</font>

434
00:20:26,110 --> 00:20:31,320
the art tools actually<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> them and</font>

435
00:20:28,659 --> 00:20:34,299
the time performance is also<font color="#CCCCCC"> quite</font>

436
00:20:31,320 --> 00:20:37,480
acceptable<font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see it was</font>

437
00:20:34,299 --> 00:20:39,730
tested also<font color="#E5E5E5"> on real binaries</font><font color="#CCCCCC"> so there is</font>

438
00:20:37,480 --> 00:20:41,769
still<font color="#CCCCCC"> a lot of work to do to improve the</font>

439
00:20:39,730 --> 00:20:45,450
tool but yeah I would<font color="#CCCCCC"> say it's very</font>

440
00:20:41,769 --> 00:20:45,450
<font color="#E5E5E5">promising thank you very much</font>

441
00:20:50,840 --> 00:20:56,340
so I think<font color="#E5E5E5"> we have time for a few</font>

442
00:20:53,520 --> 00:21:04,650
questions<font color="#CCCCCC"> I think so</font>

443
00:20:56,340 --> 00:21:08,129
these are any question<font color="#E5E5E5"> Hey good stuff</font>

444
00:21:04,650 --> 00:21:10,350
<font color="#E5E5E5">is there any like upper bound for the</font>

445
00:21:08,130 --> 00:21:11,880
length of<font color="#E5E5E5"> your gadgets sorry</font>

446
00:21:10,350 --> 00:21:15,030
is there any upper bound for the length

447
00:21:11,880 --> 00:21:16,590
of<font color="#E5E5E5"> the gadgets</font><font color="#CCCCCC"> like do you cut at some</font>

448
00:21:15,030 --> 00:21:20,490
point how many<font color="#E5E5E5"> instructions won't get</font>

449
00:21:16,590 --> 00:21:22,620
just could have<font color="#CCCCCC"> or yeah yeah I I mean</font>

450
00:21:20,490 --> 00:21:24,600
it's like arbitrary<font color="#E5E5E5"> but the user can</font>

451
00:21:22,620 --> 00:21:27,000
also define it you can say the maximum

452
00:21:24,600 --> 00:21:30,149
<font color="#E5E5E5">length that you want for your rope chain</font>

453
00:21:27,000 --> 00:21:32,370
and then the<font color="#CCCCCC"> search engine can try to</font>

454
00:21:30,150 --> 00:21:34,260
find the<font color="#E5E5E5"> shortest</font><font color="#CCCCCC"> rope chain as possible</font>

455
00:21:32,370 --> 00:21:38,939
for example<font color="#CCCCCC"> okay and then in that sense</font>

456
00:21:34,260 --> 00:21:41,490
does<font color="#CCCCCC"> it also keep track about the state</font>

457
00:21:38,940 --> 00:21:43,590
of the control register so can I have

458
00:21:41,490 --> 00:21:45,600
like<font color="#CCCCCC"> chain</font><font color="#E5E5E5"> get rows with conditional</font>

459
00:21:43,590 --> 00:21:48,149
execution more or less like let's say I

460
00:21:45,600 --> 00:21:50,639
have one<font color="#CCCCCC"> gastric where stress tests</font><font color="#E5E5E5"> yeah</font>

461
00:21:48,150 --> 00:21:54,540
<font color="#CCCCCC">XCX</font><font color="#E5E5E5"> yeah and later on I have a gastric</font>

462
00:21:50,640 --> 00:21:59,820
<font color="#CCCCCC">will</font><font color="#E5E5E5"> do jump not equal but and then</font>

463
00:21:54,540 --> 00:22:03,870
we'll jump out if<font color="#CCCCCC"> view of like a set</font><font color="#E5E5E5"> the</font>

464
00:21:59,820 --> 00:22:06,330
architecture could support it<font color="#CCCCCC"> like I can</font>

465
00:22:03,870 --> 00:22:14,969
implement it but it's it's<font color="#E5E5E5"> not</font>

466
00:22:06,330 --> 00:22:17,520
implemented<font color="#E5E5E5"> yet okay cool thanks</font><font color="#CCCCCC"> I would</font>

467
00:22:14,970 --> 00:22:20,250
like<font color="#E5E5E5"> to know if you are</font><font color="#CCCCCC"> bound on the the</font>

468
00:22:17,520 --> 00:22:24,809
<font color="#E5E5E5">size of the the code you will generate</font>

469
00:22:20,250 --> 00:22:26,220
<font color="#CCCCCC">there option</font><font color="#E5E5E5"> yeah do you have a is it</font>

470
00:22:24,809 --> 00:22:28,500
complete if you<font color="#CCCCCC"> said no it's not</font>

471
00:22:26,220 --> 00:22:32,340
<font color="#CCCCCC">possible to build anything for</font><font color="#E5E5E5"> this</font>

472
00:22:28,500 --> 00:22:35,880
<font color="#E5E5E5">which</font><font color="#CCCCCC"> on one</font><font color="#E5E5E5"> query you want I would not</font>

473
00:22:32,340 --> 00:22:38,850
say it's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> turing-complete</font><font color="#CCCCCC"> but I think</font>

474
00:22:35,880 --> 00:22:41,700
it's it's the best<font color="#E5E5E5"> trade-off</font><font color="#CCCCCC"> I mean you</font>

475
00:22:38,850 --> 00:22:43,889
get<font color="#E5E5E5"> really good results</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> you could</font>

476
00:22:41,700 --> 00:22:45,809
miss some some very very like tricky

477
00:22:43,890 --> 00:22:48,000
cases<font color="#E5E5E5"> it's true because the</font>

478
00:22:45,809 --> 00:22:50,309
representation is not perfect like<font color="#E5E5E5"> I</font>

479
00:22:48,000 --> 00:22:54,120
<font color="#E5E5E5">don't use SMT or you know very powerful</font>

480
00:22:50,309 --> 00:22:56,059
solvers like other tools but I mean

481
00:22:54,120 --> 00:22:58,728
usually when when you have<font color="#CCCCCC"> a rope chain</font>

482
00:22:56,059 --> 00:23:01,039
I can I<font color="#CCCCCC"> can find it yeah</font><font color="#E5E5E5"> and second</font>

483
00:22:58,729 --> 00:23:03,200
question<font color="#E5E5E5"> what is the complexity because</font>

484
00:23:01,039 --> 00:23:06,950
you say is fast but is depending on<font color="#E5E5E5"> the</font>

485
00:23:03,200 --> 00:23:12,769
<font color="#CCCCCC">input the input is you mean the semantic</font>

486
00:23:06,950 --> 00:23:14,899
query<font color="#E5E5E5"> no support you are not writing at</font>

487
00:23:12,769 --> 00:23:19,129
<font color="#E5E5E5">the</font><font color="#CCCCCC"> premiere analyzing ah so I didn't</font>

488
00:23:14,899 --> 00:23:21,559
test it on<font color="#E5E5E5"> like 10 20 megabytes program</font>

489
00:23:19,129 --> 00:23:24,709
so those there<font color="#CCCCCC"> were about 1 megabytes</font><font color="#E5E5E5"> so</font>

490
00:23:21,559 --> 00:23:28,330
<font color="#E5E5E5">they generate around</font><font color="#CCCCCC"> the 440 thousand</font>

491
00:23:24,710 --> 00:23:31,519
gadgets<font color="#E5E5E5"> so it takes about 2</font><font color="#CCCCCC"> to 3 minutes</font>

492
00:23:28,330 --> 00:23:35,089
<font color="#CCCCCC">we have some idea to speed it up</font>

493
00:23:31,519 --> 00:23:37,219
<font color="#E5E5E5">basically like pre compute some generic</font>

494
00:23:35,089 --> 00:23:38,899
gadget signatures<font color="#E5E5E5"> and then when you have</font>

495
00:23:37,219 --> 00:23:41,359
a gadget<font color="#E5E5E5"> that matches we already have</font>

496
00:23:38,899 --> 00:23:47,529
the semantics computed<font color="#E5E5E5"> yeah thank you</font>

497
00:23:41,359 --> 00:23:47,529
<font color="#E5E5E5">thank you one</font><font color="#CCCCCC"> more question</font>

498
00:23:53,000 --> 00:23:58,759
[Music]

499
00:23:55,479 --> 00:24:01,609
hi so thanks for<font color="#E5E5E5"> the presentation</font><font color="#CCCCCC"> I just</font>

500
00:23:58,759 --> 00:24:03,200
<font color="#CCCCCC">wanted</font><font color="#E5E5E5"> to know how many architecture are</font>

501
00:24:01,609 --> 00:24:07,249
supported at the moment

502
00:24:03,200 --> 00:24:10,549
how many architecture for example x86<font color="#E5E5E5"> or</font>

503
00:24:07,249 --> 00:24:14,320
arm or<font color="#E5E5E5"> MIPS for example how many</font>

504
00:24:10,549 --> 00:24:17,899
architectures<font color="#E5E5E5"> yeah ah</font><font color="#CCCCCC"> so actually i'm</font>

505
00:24:14,320 --> 00:24:21,710
yeah i'm using a barf<font color="#E5E5E5"> in this assembly</font>

506
00:24:17,899 --> 00:24:23,209
platform to to<font color="#E5E5E5"> analyze gadgets so it</font>

507
00:24:21,710 --> 00:24:24,950
translate them in the intermediate

508
00:24:23,210 --> 00:24:31,070
<font color="#CCCCCC">representation which is</font><font color="#E5E5E5"> called the rail</font>

509
00:24:24,950 --> 00:24:34,399
and so so<font color="#CCCCCC"> far i I</font><font color="#E5E5E5"> only exploit Intel so</font>

510
00:24:31,070 --> 00:24:37,908
it's like 32 and 64 bytes<font color="#E5E5E5"> Intel</font>

511
00:24:34,399 --> 00:24:41,570
architectures the<font color="#CCCCCC"> arm support is is</font>

512
00:24:37,909 --> 00:24:44,089
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> come soon</font><font color="#CCCCCC"> and then mips we will</font>

513
00:24:41,570 --> 00:24:46,519
see<font color="#CCCCCC"> we'll see</font><font color="#E5E5E5"> you later</font><font color="#CCCCCC"> yeah I mean</font>

514
00:24:44,089 --> 00:24:48,379
basically<font color="#E5E5E5"> I depend from barf which is</font>

515
00:24:46,519 --> 00:24:56,299
the platform<font color="#E5E5E5"> I used to this assembly</font><font color="#CCCCCC"> the</font>

516
00:24:48,379 --> 00:25:01,599
gadget<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thank you there are another</font>

517
00:24:56,299 --> 00:25:01,599
question here<font color="#CCCCCC"> no</font><font color="#E5E5E5"> here in the front</font>

518
00:25:09,549 --> 00:25:15,410
<font color="#E5E5E5">Thanks is it long to generate the chain</font>

519
00:25:12,650 --> 00:25:17,150
when you don't<font color="#CCCCCC"> have a gadget to</font><font color="#E5E5E5"> do the</font>

520
00:25:15,410 --> 00:25:18,799
search<font color="#CCCCCC"> that you mentioned</font><font color="#E5E5E5"> trying to yeah</font>

521
00:25:17,150 --> 00:25:22,940
<font color="#E5E5E5">just when you don't find</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> gadget</font><font color="#CCCCCC"> and</font>

522
00:25:18,799 --> 00:25:26,960
<font color="#E5E5E5">you can iterate forever</font><font color="#CCCCCC"> I said some some</font>

523
00:25:22,940 --> 00:25:29,990
<font color="#CCCCCC">bounce</font><font color="#E5E5E5"> actually but it's it's what even</font>

524
00:25:26,960 --> 00:25:33,620
when<font color="#E5E5E5"> you don't find</font><font color="#CCCCCC"> a chain</font><font color="#E5E5E5"> it's you get</font>

525
00:25:29,990 --> 00:25:37,130
quite a fast answer yeah the difficult

526
00:25:33,620 --> 00:25:39,409
like the when it takes some time is when

527
00:25:37,130 --> 00:25:41,720
you try to optimize<font color="#E5E5E5"> the lengths of the</font>

528
00:25:39,410 --> 00:25:44,570
<font color="#E5E5E5">rock chain because basically it will do</font>

529
00:25:41,720 --> 00:25:46,400
like a<font color="#CCCCCC"> dichotomic</font><font color="#E5E5E5"> search try with say a</font>

530
00:25:44,570 --> 00:25:48,168
<font color="#E5E5E5">certain length and then half of it and</font>

531
00:25:46,400 --> 00:25:50,450
then<font color="#E5E5E5"> half of it and a half of it and if</font>

532
00:25:48,169 --> 00:25:54,080
you<font color="#E5E5E5"> don't find you will have like it's a</font>

533
00:25:50,450 --> 00:25:57,320
logarithmic number<font color="#CCCCCC"> of tries depending on</font>

534
00:25:54,080 --> 00:26:05,330
the length yeah but<font color="#E5E5E5"> uh no you get quite</font>

535
00:25:57,320 --> 00:26:10,159
a quick answer<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> just no more</font>

536
00:26:05,330 --> 00:26:13,939
question<font color="#E5E5E5"> yeah thanks for</font><font color="#CCCCCC"> the</font>

537
00:26:10,160 --> 00:26:16,340
presentation<font color="#E5E5E5"> you have also a limit in</font>

538
00:26:13,940 --> 00:26:19,730
your get research on the number<font color="#E5E5E5"> of</font>

539
00:26:16,340 --> 00:26:21,590
<font color="#CCCCCC">instructions before the</font><font color="#E5E5E5"> rate instruction</font>

540
00:26:19,730 --> 00:26:24,640
that you<font color="#CCCCCC"> analyze or do you take all</font>

541
00:26:21,590 --> 00:26:27,409
<font color="#E5E5E5">instruction</font><font color="#CCCCCC"> since the last branching</font>

542
00:26:24,640 --> 00:26:29,090
instruction no no if you take all the

543
00:26:27,410 --> 00:26:31,130
instructions<font color="#E5E5E5"> like the whole basic block</font>

544
00:26:29,090 --> 00:26:34,730
<font color="#CCCCCC">if you have too many sides effects</font>

545
00:26:31,130 --> 00:26:37,580
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> it's four or</font><font color="#E5E5E5"> five you can go to</font>

546
00:26:34,730 --> 00:26:40,040
<font color="#E5E5E5">six</font><font color="#CCCCCC"> instructions but like in practice</font>

547
00:26:37,580 --> 00:26:41,780
I very rarely see<font color="#CCCCCC"> eruption where I use</font>

548
00:26:40,040 --> 00:26:45,918
gadgets<font color="#E5E5E5"> that have with six instructions</font>

549
00:26:41,780 --> 00:26:49,160
<font color="#CCCCCC">yeah and when I do the gadget search I</font>

550
00:26:45,919 --> 00:26:52,090
like so far I use a<font color="#E5E5E5"> I interface with the</font>

551
00:26:49,160 --> 00:26:54,500
rock gadget<font color="#E5E5E5"> tool the famous tool and</font>

552
00:26:52,090 --> 00:26:55,340
it's not maintained<font color="#CCCCCC"> anymore but so I</font>

553
00:26:54,500 --> 00:26:57,860
will

554
00:26:55,340 --> 00:26:59,929
drop it<font color="#E5E5E5"> and I will use barf instead to</font>

555
00:26:57,860 --> 00:27:02,659
find gadgets<font color="#E5E5E5"> to</font><font color="#CCCCCC"> buy this assembling the</font>

556
00:26:59,930 --> 00:27:09,860
binary but<font color="#E5E5E5"> Jeff five six</font><font color="#CCCCCC"> instructions</font>

557
00:27:02,660 --> 00:27:12,260
<font color="#E5E5E5">it's it's good for me I</font><font color="#CCCCCC"> think yes</font><font color="#E5E5E5"> yeah</font>

558
00:27:09,860 --> 00:27:14,990
<font color="#E5E5E5">or if you have like a jump instruction</font>

559
00:27:12,260 --> 00:27:16,790
<font color="#E5E5E5">then you</font><font color="#CCCCCC"> stopped before right</font><font color="#E5E5E5"> but yeah</font>

560
00:27:14,990 --> 00:27:30,770
like<font color="#E5E5E5"> someone five or six I think</font><font color="#CCCCCC"> it's</font>

561
00:27:16,790 --> 00:27:33,110
fine thank you<font color="#E5E5E5"> so it's a</font><font color="#CCCCCC"> knife</font><font color="#E5E5E5"> question</font>

562
00:27:30,770 --> 00:27:36,680
but how did you<font color="#E5E5E5"> manage</font><font color="#CCCCCC"> to defeat</font><font color="#E5E5E5"> a cell</font>

563
00:27:33,110 --> 00:27:39,439
arm on your example<font color="#CCCCCC"> oh I shall</font><font color="#E5E5E5"> i it's</font>

564
00:27:36,680 --> 00:27:42,440
just<font color="#E5E5E5"> because because</font><font color="#CCCCCC"> you use</font><font color="#E5E5E5"> code that</font>

565
00:27:39,440 --> 00:27:46,070
<font color="#E5E5E5">is in the that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> they could it's the</font>

566
00:27:42,440 --> 00:27:48,260
winery<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> if the binary is compiled</font>

567
00:27:46,070 --> 00:27:49,850
that<font color="#E5E5E5"> is not compiled as a position event</font>

568
00:27:48,260 --> 00:27:52,879
independent executable<font color="#CCCCCC"> you can just</font>

569
00:27:49,850 --> 00:27:56,419
reuse<font color="#E5E5E5"> the ecology I mean if you have P</font>

570
00:27:52,880 --> 00:27:58,190
<font color="#CCCCCC">kie and V it's</font><font color="#E5E5E5"> very difficult to do</font><font color="#CCCCCC"> rope</font>

571
00:27:56,420 --> 00:28:06,340
or<font color="#E5E5E5"> you have to use</font><font color="#CCCCCC"> some library that</font>

572
00:27:58,190 --> 00:28:10,730
depends on<font color="#E5E5E5"> it yeah so I have a question</font>

573
00:28:06,340 --> 00:28:15,919
could you combine<font color="#CCCCCC"> your approach with SMT</font>

574
00:28:10,730 --> 00:28:19,820
solver to to make your queries<font color="#CCCCCC"> quicker</font>

575
00:28:15,920 --> 00:28:24,530
or to help the user<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> the right</font>

576
00:28:19,820 --> 00:28:27,169
semantics alternative get it<font color="#E5E5E5"> it's a very</font>

577
00:28:24,530 --> 00:28:30,110
good question<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> when we started</font>

578
00:28:27,170 --> 00:28:33,830
to write<font color="#E5E5E5"> the tool we used I was trying</font>

579
00:28:30,110 --> 00:28:37,580
<font color="#E5E5E5">to use SMT solvers and it turned out to</font>

580
00:28:33,830 --> 00:28:39,860
<font color="#CCCCCC">be to be not so efficient because SMT</font>

581
00:28:37,580 --> 00:28:41,510
solvers are very powerful<font color="#CCCCCC"> but the</font>

582
00:28:39,860 --> 00:28:44,780
drawback<font color="#E5E5E5"> is that they turn out</font><font color="#CCCCCC"> to be</font>

583
00:28:41,510 --> 00:28:46,760
quite<font color="#E5E5E5"> slow also and the problem is if</font>

584
00:28:44,780 --> 00:28:49,879
<font color="#E5E5E5">you want to combine gadgets and then</font>

585
00:28:46,760 --> 00:28:52,220
solve<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rope chain with the solver you</font>

586
00:28:49,880 --> 00:28:52,830
<font color="#CCCCCC">have you have a combinatory explosion</font>

587
00:28:52,220 --> 00:28:56,510
that

588
00:28:52,830 --> 00:28:59,010
the computation time<font color="#E5E5E5"> just takes too long</font>

589
00:28:56,510 --> 00:29:00,419
<font color="#CCCCCC">it's a shame because SMT solvers are</font>

590
00:28:59,010 --> 00:29:03,450
very very powerful

591
00:29:00,419 --> 00:29:07,620
I could I could<font color="#E5E5E5"> try to use</font><font color="#CCCCCC"> it for</font>

592
00:29:03,450 --> 00:29:09,539
certain<font color="#E5E5E5"> tasks only</font><font color="#CCCCCC"> but definitely them I</font>

593
00:29:07,620 --> 00:29:12,239
think<font color="#E5E5E5"> the main in architecture of the</font>

594
00:29:09,539 --> 00:29:14,129
tool should remain this one with the

595
00:29:12,240 --> 00:29:16,289
database that<font color="#E5E5E5"> you can quickly query and</font>

596
00:29:14,130 --> 00:29:20,309
not trying to brute force because other

597
00:29:16,289 --> 00:29:22,470
tools they not exactly but<font color="#E5E5E5"> they like in</font>

598
00:29:20,309 --> 00:29:24,600
some way they try to<font color="#CCCCCC"> Britt force</font><font color="#E5E5E5"> the</font>

599
00:29:22,470 --> 00:29:28,080
rope chain<font color="#E5E5E5"> just combine gadgets randomly</font>

600
00:29:24,600 --> 00:29:29,580
and see if the<font color="#CCCCCC"> rope</font><font color="#E5E5E5"> they then they solve</font>

601
00:29:28,080 --> 00:29:33,029
the rope chain and see if it does what

602
00:29:29,580 --> 00:29:35,850
they<font color="#CCCCCC"> want but it's</font><font color="#E5E5E5"> you get too too too</font>

603
00:29:33,029 --> 00:29:37,980
much computation<font color="#CCCCCC"> yeah the advantages of</font>

604
00:29:35,850 --> 00:29:42,389
<font color="#CCCCCC">this approaches is that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> already have</font>

605
00:29:37,980 --> 00:29:44,070
all the all the operations that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> that</font>

606
00:29:42,389 --> 00:29:46,529
<font color="#E5E5E5">you know exactly what the gadget does</font>

607
00:29:44,070 --> 00:29:48,658
and under what<font color="#E5E5E5"> conditions so then you</font>

608
00:29:46,529 --> 00:29:50,360
can very specifically pick the gadgets

609
00:29:48,659 --> 00:29:52,320
that<font color="#E5E5E5"> you want and combine them together</font>

610
00:29:50,360 --> 00:29:59,570
<font color="#E5E5E5">quickly you don't need to break force</font>

611
00:29:52,320 --> 00:29:59,570
anything<font color="#E5E5E5"> they think</font><font color="#CCCCCC"> is a speaker again</font>

