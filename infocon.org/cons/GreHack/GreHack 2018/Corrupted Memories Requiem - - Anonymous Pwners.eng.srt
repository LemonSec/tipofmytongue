1
00:00:02,719 --> 00:00:06,859
<font color="#CCCCCC">right okay</font><font color="#E5E5E5"> okay</font>

2
00:00:07,589 --> 00:00:16,529
the first challenge<font color="#E5E5E5"> deals with a punch</font>

3
00:00:12,030 --> 00:00:20,939
job<font color="#E5E5E5"> encoding format and there is</font><font color="#CCCCCC"> an hint</font>

4
00:00:16,529 --> 00:00:24,360
in<font color="#CCCCCC"> the subject</font><font color="#E5E5E5"> of the challenge that it</font>

5
00:00:20,940 --> 00:00:27,180
gives us an<font color="#CCCCCC"> indication and the kind of</font>

6
00:00:24,360 --> 00:00:30,450
hardware that<font color="#E5E5E5"> could be used to to</font>

7
00:00:27,180 --> 00:00:34,650
generate<font color="#CCCCCC"> such an example</font><font color="#E5E5E5"> and it could be</font>

8
00:00:30,450 --> 00:00:37,710
an IBM model 29<font color="#CCCCCC"> yep and so this is a</font>

9
00:00:34,650 --> 00:00:43,769
hardware device it was a<font color="#E5E5E5"> very popular</font>

10
00:00:37,710 --> 00:00:46,829
model<font color="#E5E5E5"> with such device</font><font color="#CCCCCC"> a character his</font>

11
00:00:43,770 --> 00:00:51,720
<font color="#CCCCCC">encoded</font><font color="#E5E5E5"> erratically by by a series of</font>

12
00:00:46,829 --> 00:00:55,440
dots along a single : and<font color="#E5E5E5"> a</font><font color="#CCCCCC"> word is</font>

13
00:00:51,720 --> 00:00:59,460
encoded from left to right using this

14
00:00:55,440 --> 00:01:02,790
much interval from<font color="#E5E5E5"> do glass joins</font>

15
00:00:59,460 --> 00:01:06,149
website<font color="#E5E5E5"> you can see the correspondence</font>

16
00:01:02,790 --> 00:01:08,639
<font color="#E5E5E5">between the whole character possible in</font>

17
00:01:06,149 --> 00:01:12,539
the<font color="#CCCCCC"> chat</font><font color="#E5E5E5"> ad on the top line and</font><font color="#CCCCCC"> the</font>

18
00:01:08,639 --> 00:01:17,908
<font color="#E5E5E5">series of dots and you obtain the</font>

19
00:01:12,539 --> 00:01:20,490
following flag you owe<font color="#E5E5E5"> the second</font>

20
00:01:17,909 --> 00:01:24,869
challenge is gone<font color="#CCCCCC"> Challenger he is a</font>

21
00:01:20,490 --> 00:01:28,979
<font color="#E5E5E5">website application written with jungle</font>

22
00:01:24,869 --> 00:01:32,459
ephemeral source code of<font color="#E5E5E5"> an Hardy</font>

23
00:01:28,979 --> 00:01:37,249
version of this<font color="#CCCCCC"> application is given to</font>

24
00:01:32,459 --> 00:01:44,029
<font color="#E5E5E5">us from the source code we find that</font>

25
00:01:37,249 --> 00:01:48,949
credentials<font color="#E5E5E5"> after</font><font color="#CCCCCC"> treason web token so</font>

26
00:01:44,029 --> 00:01:54,869
user her potente Khatib this way

27
00:01:48,950 --> 00:01:57,810
if<font color="#E5E5E5"> a client has</font><font color="#CCCCCC"> way somehow to help</font><font color="#E5E5E5"> tell</font>

28
00:01:54,869 --> 00:02:00,810
such token and to make<font color="#E5E5E5"> it accepted by</font>

29
00:01:57,810 --> 00:02:03,599
the by the server<font color="#E5E5E5"> he has been the</font>

30
00:02:00,810 --> 00:02:08,239
<font color="#CCCCCC">possibility to elevate his privileges</font>

31
00:02:03,599 --> 00:02:12,780
and to impersonate<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> registered user</font>

32
00:02:08,239 --> 00:02:15,660
one possibility<font color="#E5E5E5"> to do that can could be</font>

33
00:02:12,780 --> 00:02:18,870
for example<font color="#E5E5E5"> to reuse the secret</font>

34
00:02:15,660 --> 00:02:21,540
available from the<font color="#E5E5E5"> subscribe but well</font>

35
00:02:18,870 --> 00:02:24,450
this would not be<font color="#E5E5E5"> complicated enough so</font>

36
00:02:21,540 --> 00:02:29,390
clearly this is<font color="#CCCCCC"> not the good solution</font>

37
00:02:24,450 --> 00:02:34,619
the real vulnerability is in this<font color="#CCCCCC"> Cod</font>

38
00:02:29,390 --> 00:02:40,470
<font color="#CCCCCC">extract that validates the token</font><font color="#E5E5E5"> sent by</font>

39
00:02:34,620 --> 00:02:44,070
the client<font color="#E5E5E5"> and the question is how could</font>

40
00:02:40,470 --> 00:02:48,420
how could we<font color="#E5E5E5"> frost the server to raise</font>

41
00:02:44,070 --> 00:02:50,870
this this exception to answer this

42
00:02:48,420 --> 00:02:55,140
<font color="#CCCCCC">question</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a look at</font>

43
00:02:50,870 --> 00:03:00,390
<font color="#CCCCCC">implementation of the GWT package in</font>

44
00:02:55,140 --> 00:03:03,739
<font color="#E5E5E5">Python and we found that the only way</font>

45
00:03:00,390 --> 00:03:08,339
<font color="#CCCCCC">that doesn't depend on the format of</font>

46
00:03:03,740 --> 00:03:12,000
secret<font color="#E5E5E5"> cake itself appears to be this</font>

47
00:03:08,340 --> 00:03:17,070
<font color="#E5E5E5">case where there</font><font color="#CCCCCC"> is a test for mismatch</font>

48
00:03:12,000 --> 00:03:19,860
between the the from the<font color="#CCCCCC"> analyst format</font>

49
00:03:17,070 --> 00:03:22,799
of the algorithm used to sign the<font color="#E5E5E5"> token</font>

50
00:03:19,860 --> 00:03:27,080
and the existence of<font color="#E5E5E5"> the secret key as</font>

51
00:03:22,800 --> 00:03:31,290
<font color="#CCCCCC">the parameter</font><font color="#E5E5E5"> of the decoding function</font>

52
00:03:27,080 --> 00:03:34,380
just a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> word</font><font color="#E5E5E5"> about the way Jesus and</font>

53
00:03:31,290 --> 00:03:37,220
<font color="#CCCCCC">what tokenism</font><font color="#E5E5E5"> is built it's made in</font>

54
00:03:34,380 --> 00:03:40,890
three parts<font color="#E5E5E5"> that are separated by dots</font>

55
00:03:37,220 --> 00:03:45,270
<font color="#E5E5E5">first there is an header which enhances</font>

56
00:03:40,890 --> 00:03:48,089
<font color="#E5E5E5">the kind of help of algorithm used to</font>

57
00:03:45,270 --> 00:03:50,280
sign<font color="#E5E5E5"> the token in the second part</font><font color="#CCCCCC"> with</font>

58
00:03:48,090 --> 00:03:54,510
<font color="#E5E5E5">the payload and the signatory token is</font>

59
00:03:50,280 --> 00:03:57,870
absurd<font color="#CCCCCC"> position</font><font color="#E5E5E5"> as you can see it's</font>

60
00:03:54,510 --> 00:04:01,920
<font color="#E5E5E5">quite simple in fact to create a new</font>

61
00:03:57,870 --> 00:04:07,200
token<font color="#E5E5E5"> from scratch with no signature at</font>

62
00:04:01,920 --> 00:04:12,149
home and the third part of the token in

63
00:04:07,200 --> 00:04:15,060
fact is here is<font color="#E5E5E5"> empty</font><font color="#CCCCCC"> in this case the</font>

64
00:04:12,150 --> 00:04:19,918
server will called GWT decode function

65
00:04:15,060 --> 00:04:22,590
with our token<font color="#E5E5E5"> the algorithm is</font><font color="#CCCCCC"> known it</font>

66
00:04:19,918 --> 00:04:25,200
will<font color="#E5E5E5"> call the GWT decode fashion with</font>

67
00:04:22,590 --> 00:04:27,409
his<font color="#E5E5E5"> non-heme</font><font color="#CCCCCC"> key security it will</font>

68
00:04:25,200 --> 00:04:31,340
trigger the exception

69
00:04:27,410 --> 00:04:34,310
<font color="#E5E5E5">and it will validate the the payload</font>

70
00:04:31,340 --> 00:04:38,000
<font color="#CCCCCC">however paid</font><font color="#E5E5E5"> on the payload we provided</font>

71
00:04:34,310 --> 00:04:44,150
when we generated<font color="#CCCCCC"> her a token</font><font color="#E5E5E5"> and this</font>

72
00:04:38,000 --> 00:04:49,100
way we<font color="#E5E5E5"> can access to</font><font color="#CCCCCC"> the admin pages the</font>

73
00:04:44,150 --> 00:04:53,049
<font color="#E5E5E5">served</font><font color="#CCCCCC"> challenger is a binary made for</font>

74
00:04:49,100 --> 00:04:58,610
the hard<font color="#CCCCCC"> window and platform using</font><font color="#E5E5E5"> IV ha</font>

75
00:04:53,050 --> 00:05:02,410
<font color="#E5E5E5">microcontroller technology for this</font>

76
00:04:58,610 --> 00:05:07,810
challenge<font color="#E5E5E5"> we choose to</font><font color="#CCCCCC"> use simulation to</font>

77
00:05:02,410 --> 00:05:10,490
simulate this program<font color="#E5E5E5"> we used similar</font>

78
00:05:07,810 --> 00:05:12,550
similar<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> platform and most</font>

79
00:05:10,490 --> 00:05:16,880
specifically<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> platform there is</font>

80
00:05:12,550 --> 00:05:20,150
precisely an Arduino simulator<font color="#E5E5E5"> example</font>

81
00:05:16,880 --> 00:05:23,060
so this<font color="#E5E5E5"> is a good choice for us we run</font>

82
00:05:20,150 --> 00:05:26,359
the program<font color="#E5E5E5"> it provides us</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> sail</font>

83
00:05:23,060 --> 00:05:28,820
console so we can interact<font color="#E5E5E5"> with the</font>

84
00:05:26,360 --> 00:05:30,140
<font color="#CCCCCC">program this way when playing with</font><font color="#E5E5E5"> hit</font>

85
00:05:28,820 --> 00:05:33,130
with it

86
00:05:30,140 --> 00:05:37,760
we notice that program immediately

87
00:05:33,130 --> 00:05:39,710
<font color="#E5E5E5">returns</font><font color="#CCCCCC"> an error</font><font color="#E5E5E5"> as soon as</font><font color="#CCCCCC"> a reason</font>

88
00:05:37,760 --> 00:05:42,400
mistake in the password<font color="#CCCCCC"> without waiting</font>

89
00:05:39,710 --> 00:05:46,310
that we<font color="#CCCCCC"> hit the return key</font>

90
00:05:42,400 --> 00:05:51,469
<font color="#CCCCCC">so in this such as such circumstances</font>

91
00:05:46,310 --> 00:05:54,950
<font color="#E5E5E5">it's become trivial to to guess</font><font color="#CCCCCC"> each key</font>

92
00:05:51,470 --> 00:05:56,380
of the password by brute force in the

93
00:05:54,950 --> 00:05:59,870
<font color="#CCCCCC">badenliga</font>

94
00:05:56,380 --> 00:06:01,760
for example<font color="#CCCCCC"> which is very simple script</font>

95
00:05:59,870 --> 00:06:04,780
<font color="#E5E5E5">if the if we suppose that we already</font>

96
00:06:01,760 --> 00:06:08,390
have<font color="#E5E5E5"> found the beginning</font><font color="#CCCCCC"> of the password</font>

97
00:06:04,780 --> 00:06:10,969
we sent the next<font color="#CCCCCC"> character</font><font color="#E5E5E5"> the next</font>

98
00:06:08,390 --> 00:06:13,930
possible character in a loop to the

99
00:06:10,970 --> 00:06:17,540
<font color="#E5E5E5">serial console and we observe the output</font>

100
00:06:13,930 --> 00:06:21,800
<font color="#CCCCCC">a bad character will generate two hero</font>

101
00:06:17,540 --> 00:06:23,840
<font color="#E5E5E5">messages from the program</font><font color="#CCCCCC"> first error</font>

102
00:06:21,800 --> 00:06:28,100
messages from the bad character itself

103
00:06:23,840 --> 00:06:31,070
<font color="#E5E5E5">of of course and an error messages from</font>

104
00:06:28,100 --> 00:06:34,100
the new lines<font color="#E5E5E5"> of the echo command and</font>

105
00:06:31,070 --> 00:06:36,440
the good<font color="#CCCCCC"> character</font><font color="#E5E5E5"> in general</font><font color="#CCCCCC"> just a</font>

106
00:06:34,100 --> 00:06:38,879
single error message<font color="#E5E5E5"> so we have a way to</font>

107
00:06:36,440 --> 00:06:42,629
find<font color="#E5E5E5"> which of this character is a good</font>

108
00:06:38,879 --> 00:06:59,699
and we can iterate and find the<font color="#CCCCCC"> complete</font>

109
00:06:42,629 --> 00:07:02,279
solution<font color="#E5E5E5"> so thank you so</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> let's talk</font>

110
00:06:59,699 --> 00:07:05,429
<font color="#CCCCCC">about the fourth challenge which name</font>

111
00:07:02,279 --> 00:07:08,429
network on which<font color="#E5E5E5"> many of the</font>

112
00:07:05,429 --> 00:07:11,068
participants have been have faith to

113
00:07:08,429 --> 00:07:14,008
solve<font color="#E5E5E5"> so when you do</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> straw</font>

114
00:07:11,069 --> 00:07:17,149
<font color="#E5E5E5">board many participants are still</font><font color="#CCCCCC"> under</font>

115
00:07:14,009 --> 00:07:20,519
this challenge<font color="#E5E5E5"> so what is it</font>

116
00:07:17,149 --> 00:07:23,069
when you access<font color="#CCCCCC"> to this</font><font color="#E5E5E5"> challenge you</font>

117
00:07:20,519 --> 00:07:25,979
get<font color="#CCCCCC"> a pickup file but you can</font><font color="#E5E5E5"> open with</font>

118
00:07:23,069 --> 00:07:31,199
<font color="#CCCCCC">washout on you see a lot</font><font color="#E5E5E5"> of packets</font><font color="#CCCCCC"> with</font>

119
00:07:25,979 --> 00:07:36,419
<font color="#E5E5E5">patches or TCP packets to</font><font color="#CCCCCC"> report 443</font>

120
00:07:31,199 --> 00:07:41,399
which is TLS<font color="#E5E5E5"> and it's light someone scan</font>

121
00:07:36,419 --> 00:07:43,709
the internet for<font color="#E5E5E5"> TLS connections which</font>

122
00:07:41,399 --> 00:07:45,990
the others would do with an<font color="#E5E5E5"> S rather</font><font color="#CCCCCC"> the</font>

123
00:07:43,709 --> 00:07:48,360
certificates we have some subjects over

124
00:07:45,990 --> 00:07:52,319
certificates we see that it's a scan

125
00:07:48,360 --> 00:07:54,990
targeted to Cisco Systems<font color="#CCCCCC"> and what can</font>

126
00:07:52,319 --> 00:07:57,719
we do<font color="#E5E5E5"> with this it's either stay</font><font color="#CCCCCC"> down</font>

127
00:07:54,990 --> 00:08:00,469
<font color="#E5E5E5">roughly where we can s</font><font color="#CCCCCC"> pads</font><font color="#E5E5E5"> fins from a</font>

128
00:07:57,719 --> 00:08:02,969
<font color="#E5E5E5">bucket or it's a trip to</font><font color="#CCCCCC"> Rafi challenge</font>

129
00:08:00,469 --> 00:08:05,729
in this case it what the<font color="#CCCCCC"> second case is</font>

130
00:08:02,969 --> 00:08:07,769
<font color="#CCCCCC">a crypto challenge from</font><font color="#E5E5E5"> a certificate</font>

131
00:08:05,729 --> 00:08:10,589
which I did<font color="#CCCCCC"> approve it</font><font color="#E5E5E5"> case on what can</font>

132
00:08:07,769 --> 00:08:14,249
<font color="#E5E5E5">we do with when we have many glitches</font>

133
00:08:10,589 --> 00:08:18,139
<font color="#E5E5E5">with an</font><font color="#CCCCCC"> over loop of any abilities like</font>

134
00:08:14,249 --> 00:08:21,569
<font color="#CCCCCC">rota off in sideways</font><font color="#E5E5E5"> or you can simply</font>

135
00:08:18,139 --> 00:08:24,869
perform GCD<font color="#CCCCCC"> a greatest common</font><font color="#E5E5E5"> devisor</font>

136
00:08:21,569 --> 00:08:26,969
among with all which is with all the

137
00:08:24,869 --> 00:08:32,519
public keys which are adjusted on with

138
00:08:26,969 --> 00:08:36,448
<font color="#E5E5E5">this we can factorize five messages on</font>

139
00:08:32,519 --> 00:08:38,219
<font color="#CCCCCC">once viiia factorized</font><font color="#E5E5E5"> we can get the</font>

140
00:08:36,448 --> 00:08:41,639
private key on the trip<font color="#E5E5E5"> so here's a</font>

141
00:08:38,219 --> 00:08:42,479
sample<font color="#CCCCCC"> i tonkin to build to</font><font color="#E5E5E5"> choose from</font>

142
00:08:41,639 --> 00:08:44,430
<font color="#CCCCCC">i found</font>

143
00:08:42,479 --> 00:08:46,830
Tremonti visa

144
00:08:44,430 --> 00:08:50,910
<font color="#E5E5E5">on with the</font><font color="#CCCCCC"> cheese</font><font color="#E5E5E5"> we have a simple</font>

145
00:08:46,830 --> 00:08:54,420
t-shirt<font color="#E5E5E5"> come on Lyle</font><font color="#CCCCCC"> but John decrypt</font>

146
00:08:50,910 --> 00:09:03,360
HTTP traffic on HTTP traffic which<font color="#CCCCCC"> add</font>

147
00:08:54,420 --> 00:09:09,079
<font color="#CCCCCC">value then we have another watch me</font>

148
00:09:03,360 --> 00:09:14,220
change which is an<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> 32-bit challenge</font>

149
00:09:09,080 --> 00:09:17,010
which asked for a password<font color="#E5E5E5"> so let's open</font>

150
00:09:14,220 --> 00:09:20,399
it with either reverse it the code is

151
00:09:17,010 --> 00:09:23,550
very simple<font color="#CCCCCC"> it's you get an ash</font><font color="#E5E5E5"> you need</font>

152
00:09:20,399 --> 00:09:28,050
to track this password<font color="#E5E5E5"> well ash is</font>

153
00:09:23,550 --> 00:09:30,719
encrypted<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Ceaser</font><font color="#E5E5E5"> and if the</font>

154
00:09:28,050 --> 00:09:34,459
password is<font color="#E5E5E5"> correct</font><font color="#CCCCCC"> you get a strong</font>

155
00:09:30,720 --> 00:09:37,770
function which does a<font color="#E5E5E5"> lot of things so</font>

156
00:09:34,459 --> 00:09:43,319
we did ash we use<font color="#CCCCCC"> general Ripper the</font>

157
00:09:37,770 --> 00:09:59,220
password is winter and when we enter

158
00:09:43,320 --> 00:10:02,720
winter we get this<font color="#E5E5E5"> so it's a really nice</font>

159
00:09:59,220 --> 00:10:09,510
injustice<font color="#CCCCCC"> animation</font>

160
00:10:02,720 --> 00:10:12,600
where is editor<font color="#E5E5E5"> FS we get another crypto</font>

161
00:10:09,510 --> 00:10:17,370
challenge which is<font color="#E5E5E5"> like a final</font><font color="#CCCCCC"> paper</font>

162
00:10:12,600 --> 00:10:20,100
<font color="#E5E5E5">hmm</font><font color="#CCCCCC"> we have enough at our fire with</font><font color="#E5E5E5"> two</font>

163
00:10:17,370 --> 00:10:23,370
<font color="#E5E5E5">fights with me</font><font color="#CCCCCC"> I'm back and we're with</font>

164
00:10:20,100 --> 00:10:27,900
min describes a secure<font color="#E5E5E5"> and secrets batch</font>

165
00:10:23,370 --> 00:10:30,570
and the<font color="#CCCCCC"> either Python</font><font color="#E5E5E5"> strips which</font>

166
00:10:27,900 --> 00:10:35,750
implement to function about this secure

167
00:10:30,570 --> 00:10:39,870
and<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> and when a witness</font><font color="#CCCCCC"> i gives</font>

168
00:10:35,750 --> 00:10:42,420
<font color="#E5E5E5">well a server but</font><font color="#CCCCCC"> you can turn</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and</font>

169
00:10:39,870 --> 00:10:46,320
when you<font color="#E5E5E5"> try to a server you you can</font>

170
00:10:42,420 --> 00:10:47,310
probe with the athletes<font color="#E5E5E5"> we secrete</font>

171
00:10:46,320 --> 00:10:51,260
<font color="#CCCCCC">wizard vests</font>

172
00:10:47,310 --> 00:10:54,150
it's a secure<font color="#E5E5E5"> and so you have to secret</font>

173
00:10:51,260 --> 00:10:57,459
sensitive bits of information on the

174
00:10:54,150 --> 00:11:00,369
grower<font color="#CCCCCC"> of a secret it to compute the end</font>

175
00:10:57,459 --> 00:11:04,149
of his<font color="#CCCCCC"> to bits in a lotto to this</font><font color="#E5E5E5"> it</font>

176
00:11:00,369 --> 00:11:07,209
splits<font color="#E5E5E5"> each bit in size wits when</font><font color="#CCCCCC"> it</font>

177
00:11:04,149 --> 00:11:11,379
<font color="#CCCCCC">computes the end of two bits</font><font color="#E5E5E5"> of alpha 0</font>

178
00:11:07,209 --> 00:11:16,779
0 is a 0 and<font color="#CCCCCC"> B 0 alpha 1 0 is a 1 and</font><font color="#E5E5E5"> B</font>

179
00:11:11,379 --> 00:11:20,319
<font color="#CCCCCC">0 on one thing</font><font color="#E5E5E5"> computes</font><font color="#CCCCCC"> this 25 and in</font>

180
00:11:16,779 --> 00:11:25,029
combines them with<font color="#CCCCCC"> zoar in a specific</font>

181
00:11:20,319 --> 00:11:26,740
order<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> then it computes all the</font>

182
00:11:25,029 --> 00:11:28,899
C which<font color="#E5E5E5"> are</font><font color="#CCCCCC"> presented</font><font color="#E5E5E5"> in concurrent</font>

183
00:11:26,740 --> 00:11:29,800
events<font color="#E5E5E5"> or</font><font color="#CCCCCC"> or bases to devote to get the</font>

184
00:11:28,899 --> 00:11:33,550
final<font color="#E5E5E5"> result</font>

185
00:11:29,800 --> 00:11:38,889
why is<font color="#E5E5E5"> it doing this n in a complicated</font>

186
00:11:33,550 --> 00:11:43,109
way it's in order<font color="#CCCCCC"> to perform an N which</font>

187
00:11:38,889 --> 00:11:46,540
is<font color="#E5E5E5"> secured with</font><font color="#CCCCCC"> resist</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> four probes</font>

188
00:11:43,110 --> 00:11:49,990
with the server but<font color="#CCCCCC"> you can connect to</font>

189
00:11:46,540 --> 00:11:54,099
you can measure for<font color="#CCCCCC"> values out of</font><font color="#E5E5E5"> old</font>

190
00:11:49,990 --> 00:11:57,160
videos which<font color="#E5E5E5"> are represented</font><font color="#CCCCCC"> where a new</font>

191
00:11:54,100 --> 00:12:04,269
<font color="#CCCCCC">chant measure a B and C and the</font><font color="#E5E5E5"> war is</font>

192
00:11:57,160 --> 00:12:09,009
to get a which was well 346 bit for a

193
00:12:04,269 --> 00:12:11,829
flag which is<font color="#CCCCCC"> a 42 bytes around</font><font color="#E5E5E5"> and when</font>

194
00:12:09,009 --> 00:12:14,379
<font color="#CCCCCC">Ukraine to a server</font><font color="#E5E5E5"> you jet probes on</font>

195
00:12:11,829 --> 00:12:19,378
you get the<font color="#E5E5E5"> result of a probing for each</font>

196
00:12:14,379 --> 00:12:25,959
of<font color="#CCCCCC"> his bits why this computation</font><font color="#E5E5E5"> is done</font>

197
00:12:19,379 --> 00:12:29,079
so this would secure and this is<font color="#CCCCCC"> L thing</font>

198
00:12:25,959 --> 00:12:29,920
in<font color="#E5E5E5"> core is a way but the</font><font color="#CCCCCC"> Alpha are</font>

199
00:12:29,079 --> 00:12:34,779
combined together

200
00:12:29,920 --> 00:12:38,498
<font color="#E5E5E5">so some formulas to come to</font><font color="#CCCCCC"> DC and we</font>

201
00:12:34,779 --> 00:12:42,040
see what is not<font color="#E5E5E5"> you know why does for</font>

202
00:12:38,499 --> 00:12:44,470
<font color="#E5E5E5">example</font><font color="#CCCCCC"> C 0</font><font color="#E5E5E5"> 4 is not alpha 0 0 door</font>

203
00:12:42,040 --> 00:12:49,629
alpha 1 0 door and so on<font color="#CCCCCC"> though</font>

204
00:12:44,470 --> 00:12:52,899
<font color="#E5E5E5">alpha 4 0 what because if it was like</font>

205
00:12:49,629 --> 00:12:55,929
<font color="#CCCCCC">this it would simplify if it was at</font>

206
00:12:52,899 --> 00:12:59,769
<font color="#CCCCCC">least</font><font color="#E5E5E5"> receive</font><font color="#CCCCCC"> 0-4 will only be a though</font>

207
00:12:55,929 --> 00:13:04,509
<font color="#CCCCCC">be 0 so you will</font><font color="#E5E5E5"> only need to probe for</font>

208
00:12:59,769 --> 00:13:05,880
<font color="#E5E5E5">C 0</font><font color="#CCCCCC"> for on be 0 if</font><font color="#E5E5E5"> b 0 was 1 you will</font>

209
00:13:04,509 --> 00:13:08,610
<font color="#E5E5E5">get a</font>

210
00:13:05,880 --> 00:13:12,390
this is<font color="#CCCCCC"> reform</font><font color="#E5E5E5"> so that's why it's not</font>

211
00:13:08,610 --> 00:13:17,670
<font color="#CCCCCC">like</font><font color="#E5E5E5"> you sum up all the lines on wet on</font>

212
00:13:12,390 --> 00:13:20,670
<font color="#E5E5E5">returns on</font><font color="#CCCCCC"> you yet it's</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> egg</font><font color="#E5E5E5"> but with</font>

213
00:13:17,670 --> 00:13:24,479
this idea<font color="#E5E5E5"> you get some formulas on doing</font>

214
00:13:20,670 --> 00:13:27,300
some math<font color="#CCCCCC"> you get a simplified</font><font color="#E5E5E5"> formula</font>

215
00:13:24,480 --> 00:13:30,780
<font color="#E5E5E5">when you only need to probe three</font><font color="#CCCCCC"> values</font>

216
00:13:27,300 --> 00:13:33,300
<font color="#E5E5E5">and if when you</font><font color="#CCCCCC"> probably this will be</font>

217
00:13:30,780 --> 00:13:35,910
<font color="#E5E5E5">zero is one when you can get a bit of</font><font color="#CCCCCC"> a</font>

218
00:13:33,300 --> 00:13:40,199
<font color="#CCCCCC">flag here but it's also another way with</font>

219
00:13:35,910 --> 00:13:42,300
only two probes so basically you<font color="#E5E5E5"> can to</font>

220
00:13:40,200 --> 00:13:45,060
a server<font color="#E5E5E5"> you probe is free off to</font>

221
00:13:42,300 --> 00:13:47,579
<font color="#E5E5E5">various several times and tell until you</font>

222
00:13:45,060 --> 00:13:49,790
get all the<font color="#CCCCCC"> bits on when you can get the</font>

223
00:13:47,580 --> 00:13:49,790
flag

224
00:14:11,089 --> 00:14:16,099
hi my name is<font color="#CCCCCC"> Eva</font><font color="#E5E5E5"> Sullivan</font>

225
00:14:14,419 --> 00:14:20,839
and I'm going to<font color="#CCCCCC"> present</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> the last</font>

226
00:14:16,099 --> 00:14:26,019
three<font color="#CCCCCC"> challenges the</font><font color="#E5E5E5"> first challenge is</font>

227
00:14:20,839 --> 00:14:26,019
<font color="#E5E5E5">called be ready and is a frustrating</font><font color="#CCCCCC"> one</font>

228
00:14:26,319 --> 00:14:33,949
we are given an executable file which is

229
00:14:30,889 --> 00:14:37,039
for the risk<font color="#CCCCCC"> 5 architecture it's tiny</font>

230
00:14:33,949 --> 00:14:39,858
<font color="#E5E5E5">it's only 12 kilobytes it's not</font>

231
00:14:37,039 --> 00:14:43,489
<font color="#CCCCCC">interactive</font><font color="#E5E5E5"> actually you just have to</font>

232
00:14:39,859 --> 00:14:49,419
run<font color="#E5E5E5"> it and it will print the flag so</font>

233
00:14:43,489 --> 00:14:52,429
let's do<font color="#E5E5E5"> this this is just one problem</font>

234
00:14:49,419 --> 00:14:55,039
<font color="#E5E5E5">you're giving the current state of</font>

235
00:14:52,429 --> 00:14:58,429
tooling around the risk<font color="#E5E5E5"> 5 architecture</font>

236
00:14:55,039 --> 00:15:01,789
it turns out running this executable

237
00:14:58,429 --> 00:15:05,809
<font color="#E5E5E5">file</font><font color="#CCCCCC"> is hard</font><font color="#E5E5E5"> I don't have a risk 5</font>

238
00:15:01,789 --> 00:15:09,949
machine at<font color="#E5E5E5"> my home and my attempt at</font>

239
00:15:05,809 --> 00:15:12,499
<font color="#CCCCCC">using</font><font color="#E5E5E5"> emulators failed with</font><font color="#CCCCCC"> genii PC</font>

240
00:15:09,949 --> 00:15:17,029
compatibility issues which I don't<font color="#CCCCCC"> want</font>

241
00:15:12,499 --> 00:15:24,319
<font color="#CCCCCC">to deal with so what should we do</font>

242
00:15:17,029 --> 00:15:28,449
<font color="#CCCCCC">we hackers let's reverse it</font><font color="#E5E5E5"> it turns out</font>

243
00:15:24,319 --> 00:15:28,449
it was easier<font color="#CCCCCC"> that to them to run it so</font>

244
00:15:29,079 --> 00:15:35,508
<font color="#CCCCCC">we fire</font><font color="#E5E5E5"> up r2 and see what we are doing</font>

245
00:15:33,019 --> 00:15:38,869
but<font color="#E5E5E5"> we are dealing</font><font color="#CCCCCC"> with here</font><font color="#E5E5E5"> we already</font>

246
00:15:35,509 --> 00:15:40,999
<font color="#E5E5E5">know the program is</font><font color="#CCCCCC"> very small and we</font>

247
00:15:38,869 --> 00:15:43,369
are lucky<font color="#CCCCCC"> we have a simple table with</font>

248
00:15:40,999 --> 00:15:48,319
<font color="#E5E5E5">explicit function names like set flag</font>

249
00:15:43,369 --> 00:15:52,879
set X or table etc at this point we just

250
00:15:48,319 --> 00:15:55,968
<font color="#E5E5E5">have to open our risk 5 instruction set</font>

251
00:15:52,879 --> 00:16:01,099
manual and translate everything<font color="#CCCCCC"> into</font>

252
00:15:55,969 --> 00:16:03,259
hopefully<font color="#E5E5E5"> readable C code there's only 5</font>

253
00:16:01,099 --> 00:16:05,689
functions<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> ones are</font>

254
00:16:03,259 --> 00:16:09,219
straightforward<font color="#CCCCCC"> they just fill arrays</font>

255
00:16:05,689 --> 00:16:09,218
with fixed values

256
00:16:09,529 --> 00:16:16,839
three ones<font color="#E5E5E5"> do the actual computing as</font>

257
00:16:14,029 --> 00:16:20,600
you can see<font color="#E5E5E5"> it's artisanal encryption</font>

258
00:16:16,839 --> 00:16:24,259
<font color="#E5E5E5">one pass of patching one person X ring</font>

259
00:16:20,600 --> 00:16:28,579
and then print flag prints the flag<font color="#E5E5E5"> so</font>

260
00:16:24,259 --> 00:16:32,930
now let's just<font color="#E5E5E5"> compile and run our C</font>

261
00:16:28,579 --> 00:16:38,378
program and it works<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> bricks</font><font color="#CCCCCC"> the</font>

262
00:16:32,930 --> 00:16:38,378
flag which is<font color="#CCCCCC"> risk five no kidding</font>

263
00:16:41,949 --> 00:16:49,339
but the<font color="#E5E5E5"> next challenge is called with a</font>

264
00:16:44,720 --> 00:16:49,790
band and<font color="#CCCCCC"> has so much to say about this</font>

265
00:16:49,339 --> 00:16:51,949
one

266
00:16:49,790 --> 00:16:58,490
I'm going to skip a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of details I'm</font>

267
00:16:51,949 --> 00:16:58,998
sorry I just don't<font color="#E5E5E5"> have time</font><font color="#CCCCCC"> on the real</font>

268
00:16:58,490 --> 00:17:04,699
face

269
00:16:58,999 --> 00:17:09,289
it's a 64-bit executable file for the

270
00:17:04,699 --> 00:17:13,880
x86 architecture<font color="#E5E5E5"> it's pretty big</font><font color="#CCCCCC"> 200k</font>

271
00:17:09,289 --> 00:17:16,879
and it's<font color="#E5E5E5"> interactive and do some kind of</font>

272
00:17:13,880 --> 00:17:20,179
scanf when you run it<font color="#CCCCCC"> it asked for</font><font color="#E5E5E5"> a</font>

273
00:17:16,880 --> 00:17:22,459
string and then<font color="#CCCCCC"> prince nagging</font><font color="#E5E5E5"> or a</font>

274
00:17:20,179 --> 00:17:24,620
message to make the matter worse if you

275
00:17:22,459 --> 00:17:26,209
try<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at the import table you will</font>

276
00:17:24,619 --> 00:17:31,969
<font color="#CCCCCC">see certain simple sorts of stuff like</font>

277
00:17:26,209 --> 00:17:34,190
<font color="#E5E5E5">fork</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a gem open pipe same weight</font>

278
00:17:31,970 --> 00:17:39,340
and other<font color="#E5E5E5"> synchronization stuff which is</font>

279
00:17:34,190 --> 00:17:42,679
<font color="#E5E5E5">not</font><font color="#CCCCCC"> a good</font><font color="#E5E5E5"> sign but on the inside we</font>

280
00:17:39,340 --> 00:17:47,750
discover that the user input is<font color="#CCCCCC"> actually</font>

281
00:17:42,679 --> 00:17:50,919
a<font color="#CCCCCC"> Samba code for a</font><font color="#E5E5E5"> tiny VM this assembly</font>

282
00:17:47,750 --> 00:17:55,280
code gets assembled to<font color="#CCCCCC"> bytecode and</font><font color="#E5E5E5"> then</font>

283
00:17:50,919 --> 00:17:57,590
<font color="#CCCCCC">executes in this tiny VM which simulates</font>

284
00:17:55,280 --> 00:18:01,908
<font color="#E5E5E5">the move of a cursor on a straight</font><font color="#CCCCCC"> line</font>

285
00:17:57,590 --> 00:18:05,330
it<font color="#E5E5E5"> can move left or right there's some</font>

286
00:18:01,909 --> 00:18:08,870
limits on the count of executed

287
00:18:05,330 --> 00:18:10,939
instructions which is computed<font color="#CCCCCC"> in a way</font>

288
00:18:08,870 --> 00:18:13,850
that<font color="#CCCCCC"> I'm not going to</font><font color="#E5E5E5"> describe and the</font>

289
00:18:10,940 --> 00:18:19,049
<font color="#E5E5E5">output of this</font><font color="#CCCCCC"> VM is the final choice or</font>

290
00:18:13,850 --> 00:18:21,209
position actually things are

291
00:18:19,049 --> 00:18:25,230
complicated than that because<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font>

292
00:18:21,210 --> 00:18:27,720
<font color="#E5E5E5">two VM instances running in</font><font color="#CCCCCC"> Pali they</font>

293
00:18:25,230 --> 00:18:30,779
both run<font color="#CCCCCC"> the same program which is the</font>

294
00:18:27,720 --> 00:18:33,929
user input<font color="#CCCCCC"> of Abel's share at the same</font>

295
00:18:30,779 --> 00:18:37,590
time limit<font color="#E5E5E5"> but they start with different</font>

296
00:18:33,929 --> 00:18:41,429
<font color="#E5E5E5">initial cross opposition they are random</font>

297
00:18:37,590 --> 00:18:43,470
and<font color="#CCCCCC"> non-deterministic each time you run</font>

298
00:18:41,429 --> 00:18:46,139
<font color="#CCCCCC">the challenge</font><font color="#E5E5E5"> you will get different</font>

299
00:18:43,470 --> 00:18:49,039
initial of<font color="#E5E5E5"> supposition which makes</font>

300
00:18:46,139 --> 00:18:53,668
debugging<font color="#CCCCCC"> very</font><font color="#E5E5E5"> cool</font>

301
00:18:49,039 --> 00:18:56,850
one last<font color="#E5E5E5"> important</font><font color="#CCCCCC"> point is</font><font color="#E5E5E5"> that each VM</font>

302
00:18:53,669 --> 00:19:02,879
instance knows about the initial pure

303
00:18:56,850 --> 00:19:06,928
supposition<font color="#E5E5E5"> of the other instance our</font>

304
00:19:02,879 --> 00:19:09,480
goal is<font color="#E5E5E5"> to find some programs that will</font>

305
00:19:06,929 --> 00:19:13,019
cause<font color="#E5E5E5"> both instances to end up on the</font>

306
00:19:09,480 --> 00:19:16,049
same<font color="#CCCCCC"> yourself</font><font color="#E5E5E5"> position we also have a</font>

307
00:19:13,019 --> 00:19:17,519
<font color="#E5E5E5">constraint which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> about our program</font>

308
00:19:16,049 --> 00:19:19,559
which is<font color="#E5E5E5"> the user input meant to be</font>

309
00:19:17,519 --> 00:19:21,950
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> seven instruction long</font><font color="#E5E5E5"> this is</font>

310
00:19:19,559 --> 00:19:24,178
<font color="#CCCCCC">hard coded hard checked in the program</font>

311
00:19:21,950 --> 00:19:28,649
<font color="#E5E5E5">now let's have a look at the instruction</font>

312
00:19:24,179 --> 00:19:30,299
set it's smaller one instruction left

313
00:19:28,649 --> 00:19:33,178
<font color="#E5E5E5">move the cross off to the left right to</font>

314
00:19:30,299 --> 00:19:36,210
the right<font color="#CCCCCC"> goto and skip next deal with</font>

315
00:19:33,179 --> 00:19:39,389
the control flow<font color="#CCCCCC"> go-to is a classic</font>

316
00:19:36,210 --> 00:19:41,460
relative jump<font color="#E5E5E5"> go</font><font color="#CCCCCC"> 2-1 goes back one</font>

317
00:19:39,389 --> 00:19:46,080
instruction go<font color="#E5E5E5"> to</font><font color="#CCCCCC"> zero is an infinite</font>

318
00:19:41,460 --> 00:19:49,649
loop<font color="#CCCCCC"> and go to plus</font><font color="#E5E5E5"> one is a not skip</font>

319
00:19:46,080 --> 00:19:52,730
next<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> actual condition it will</font>

320
00:19:49,649 --> 00:19:55,379
skip the<font color="#CCCCCC"> next instruction</font><font color="#E5E5E5"> if and only if</font>

321
00:19:52,730 --> 00:19:59,549
the current<font color="#E5E5E5"> choice opposition is equal</font>

322
00:19:55,379 --> 00:20:01,230
to the initial<font color="#CCCCCC"> plus opposition or the</font>

323
00:19:59,549 --> 00:20:08,960
initial<font color="#E5E5E5"> cursor</font><font color="#CCCCCC"> position of the other</font>

324
00:20:01,230 --> 00:20:13,830
<font color="#E5E5E5">Vienna okay what do we</font><font color="#CCCCCC"> do here because</font><font color="#E5E5E5"> I</font>

325
00:20:08,960 --> 00:20:16,139
don't want to<font color="#E5E5E5"> think too much however we</font>

326
00:20:13,830 --> 00:20:17,939
know that<font color="#E5E5E5"> we must write a</font><font color="#CCCCCC"> seven</font>

327
00:20:16,139 --> 00:20:19,859
instruction long program we have a tiny

328
00:20:17,940 --> 00:20:22,679
instruction set only<font color="#CCCCCC"> for instructions</font>

329
00:20:19,859 --> 00:20:26,549
<font color="#CCCCCC">the go-to</font><font color="#E5E5E5"> takes a parameter but it's not</font>

330
00:20:22,679 --> 00:20:30,320
a lot<font color="#CCCCCC"> of values possible once</font><font color="#E5E5E5"> again we</font>

331
00:20:26,549 --> 00:20:30,320
are hackers<font color="#CCCCCC"> what should we do</font>

332
00:20:31,000 --> 00:20:39,409
let's boot<font color="#E5E5E5"> off the damn thing but not</font>

333
00:20:35,539 --> 00:20:43,330
the original<font color="#E5E5E5"> is equitable</font><font color="#CCCCCC"> I couldn't</font>

334
00:20:39,409 --> 00:20:45,679
manage<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> this it's way too slow</font><font color="#E5E5E5"> so</font>

335
00:20:43,330 --> 00:20:50,570
<font color="#E5E5E5">that's not a good way to do it</font>

336
00:20:45,679 --> 00:20:53,390
however the VM<font color="#E5E5E5"> is very simple actually</font>

337
00:20:50,570 --> 00:20:59,168
<font color="#CCCCCC">it's so simple</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> even fit a</font>

338
00:20:53,390 --> 00:20:59,169
complete similar of this VM on<font color="#E5E5E5"> a</font><font color="#CCCCCC"> slide</font>

339
00:21:01,510 --> 00:21:07,039
so at this point we have something that

340
00:21:05,149 --> 00:21:10,309
<font color="#CCCCCC">we have control</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that we can do</font>

341
00:21:07,039 --> 00:21:13,309
<font color="#CCCCCC">fuzzing</font><font color="#E5E5E5"> one and we just</font><font color="#CCCCCC"> have to put</font>

342
00:21:10,309 --> 00:21:17,440
<font color="#E5E5E5">force and hoping it will get</font><font color="#CCCCCC"> resolution</font>

343
00:21:13,309 --> 00:21:19,399
or maybe should<font color="#CCCCCC"> I say the solutions</font>

344
00:21:17,440 --> 00:21:23,330
<font color="#E5E5E5">because it turns out there are many of</font>

345
00:21:19,399 --> 00:21:26,389
<font color="#E5E5E5">em but only one will be accepted by</font><font color="#CCCCCC"> it's</font>

346
00:21:23,330 --> 00:21:29,059
<font color="#E5E5E5">agree hike website which means you had</font>

347
00:21:26,390 --> 00:21:33,289
to<font color="#E5E5E5"> find a way to compute them all and</font>

348
00:21:29,059 --> 00:21:35,658
then have the fun when trying them one

349
00:21:33,289 --> 00:21:39,429
by one<font color="#CCCCCC"> and playing capture</font><font color="#E5E5E5"> etcetera</font>

350
00:21:35,659 --> 00:21:39,429
finding pictures<font color="#E5E5E5"> of cars</font>

351
00:21:40,090 --> 00:21:47,470
<font color="#CCCCCC">I need to mention one</font><font color="#E5E5E5"> last thing about</font>

352
00:21:45,460 --> 00:21:50,230
<font color="#E5E5E5">this challenge because I want</font><font color="#CCCCCC"> to do</font>

353
00:21:47,470 --> 00:21:52,029
justice<font color="#E5E5E5"> to the big engineering work that</font>

354
00:21:50,230 --> 00:21:55,330
went behind<font color="#CCCCCC"> this challenge we've only</font>

355
00:21:52,029 --> 00:21:57,640
scratched the<font color="#CCCCCC"> surface</font><font color="#E5E5E5"> because everything</font>

356
00:21:55,330 --> 00:22:01,720
I've mentioned so far from the<font color="#E5E5E5"> bytecode</font>

357
00:21:57,640 --> 00:22:04,539
assembler<font color="#CCCCCC"> to the VM execution all of</font>

358
00:22:01,720 --> 00:22:10,240
this is not native<font color="#E5E5E5"> code it runs into</font>

359
00:22:04,539 --> 00:22:14,320
another<font color="#CCCCCC"> VMO</font><font color="#E5E5E5"> a big one which is double</font>

360
00:22:10,240 --> 00:22:18,100
cough multi-process<font color="#CCCCCC"> uses</font><font color="#E5E5E5"> shared memory</font>

361
00:22:14,320 --> 00:22:19,570
semaphores<font color="#E5E5E5"> unique signals lazily</font>

362
00:22:18,100 --> 00:22:22,418
<font color="#CCCCCC">decompresses</font><font color="#E5E5E5"> it's strange</font><font color="#CCCCCC"> its</font>

363
00:22:19,570 --> 00:22:24,700
instructions are they are executed which

364
00:22:22,419 --> 00:22:29,320
means dumping<font color="#E5E5E5"> the program is a real pain</font>

365
00:22:24,700 --> 00:22:32,309
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> neck</font><font color="#CCCCCC"> and the native code running</font>

366
00:22:29,320 --> 00:22:35,649
<font color="#E5E5E5">all of this is obfuscated with junk code</font>

367
00:22:32,309 --> 00:22:43,240
<font color="#E5E5E5">but hey at least the code is</font><font color="#CCCCCC"> not</font>

368
00:22:35,649 --> 00:22:47,860
optimized this last challenge<font color="#E5E5E5"> is an easy</font>

369
00:22:43,240 --> 00:22:49,539
one<font color="#E5E5E5"> with just one</font><font color="#CCCCCC"> furnace oddity we are</font>

370
00:22:47,860 --> 00:22:52,770
given a small text file which is a

371
00:22:49,539 --> 00:22:56,140
national<font color="#CCCCCC"> resource code for the 6502 cpu</font>

372
00:22:52,770 --> 00:23:01,750
which derivatives were used in gaming

373
00:22:56,140 --> 00:23:04,630
consoles<font color="#CCCCCC"> like</font><font color="#E5E5E5"> Atari 2600 and the NES it</font>

374
00:23:01,750 --> 00:23:07,179
takes no user input once<font color="#E5E5E5"> again you just</font>

375
00:23:04,630 --> 00:23:11,440
<font color="#E5E5E5">have to run</font><font color="#CCCCCC"> it and it</font><font color="#E5E5E5"> will compute</font><font color="#CCCCCC"> the</font>

376
00:23:07,179 --> 00:23:14,350
flag to a fixed memory location to give

377
00:23:11,440 --> 00:23:16,570
you an<font color="#E5E5E5"> idea to what assembly code for</font>

378
00:23:14,350 --> 00:23:20,740
the 6502 looks like here is an extract

379
00:23:16,570 --> 00:23:22,090
<font color="#CCCCCC">from this</font><font color="#E5E5E5"> challenge we don't need to</font>

380
00:23:20,740 --> 00:23:24,429
understand this at<font color="#E5E5E5"> this at the</font><font color="#CCCCCC"> moment</font>

381
00:23:22,090 --> 00:23:27,939
because<font color="#CCCCCC"> we just want to fire</font><font color="#E5E5E5"> up our</font>

382
00:23:24,429 --> 00:23:30,130
favorite<font color="#E5E5E5"> 6502 to</font><font color="#CCCCCC"> chain</font><font color="#E5E5E5"> assembles the</font>

383
00:23:27,940 --> 00:23:33,460
code and<font color="#E5E5E5"> then run it</font><font color="#CCCCCC"> into an emulator</font>

384
00:23:30,130 --> 00:23:37,679
and see what happens<font color="#E5E5E5"> and by</font><font color="#CCCCCC"> doing this</font>

385
00:23:33,460 --> 00:23:41,909
we<font color="#E5E5E5"> get something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like a flag</font>

386
00:23:37,679 --> 00:23:45,280
<font color="#E5E5E5">but which is</font><font color="#CCCCCC"> not accepted by the website</font>

387
00:23:41,909 --> 00:23:48,990
<font color="#E5E5E5">what did we do</font><font color="#CCCCCC"> on the website</font>

388
00:23:45,280 --> 00:23:48,990
<font color="#E5E5E5">the</font><font color="#CCCCCC"> we hack website gives us a hint</font>

389
00:23:49,860 --> 00:23:58,240
don't always trust emulators<font color="#E5E5E5"> sometimes</font>

390
00:23:53,170 --> 00:24:01,540
they<font color="#E5E5E5"> are wrong</font><font color="#CCCCCC"> okay here's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> felicity</font>

391
00:23:58,240 --> 00:24:03,510
<font color="#CCCCCC">I was talking about this challenge</font>

392
00:24:01,540 --> 00:24:06,700
source code makes an extensive use of

393
00:24:03,510 --> 00:24:09,520
indirect gems and if you<font color="#E5E5E5"> RTFM for the</font>

394
00:24:06,700 --> 00:24:14,140
jump instruction<font color="#CCCCCC"> on 6502</font><font color="#E5E5E5"> dog</font><font color="#CCCCCC"> you will</font>

395
00:24:09,520 --> 00:24:16,060
<font color="#E5E5E5">see the following an indirect jump must</font>

396
00:24:14,140 --> 00:24:20,050
never use<font color="#E5E5E5"> a victor beginning on the last</font>

397
00:24:16,060 --> 00:24:21,600
<font color="#E5E5E5">bite of a page and guess what this</font>

398
00:24:20,050 --> 00:24:25,389
challenge does exactly that

399
00:24:21,600 --> 00:24:27,939
here here if you take<font color="#CCCCCC"> a look at this</font>

400
00:24:25,390 --> 00:24:30,340
<font color="#E5E5E5">example you</font><font color="#CCCCCC"> can see that</font><font color="#E5E5E5"> the jump is</font>

401
00:24:27,940 --> 00:24:32,410
jumping<font color="#CCCCCC"> through the fcg one jump victor</font>

402
00:24:30,340 --> 00:24:34,810
which<font color="#E5E5E5"> is a two byte value to buy gem</font>

403
00:24:32,410 --> 00:24:37,240
<font color="#E5E5E5">victor</font><font color="#CCCCCC"> lagging exactly across</font><font color="#E5E5E5"> a page</font>

404
00:24:34,810 --> 00:24:38,889
<font color="#E5E5E5">boundary which</font><font color="#CCCCCC"> is forbidden you can see</font>

405
00:24:37,240 --> 00:24:41,290
that this was made on<font color="#CCCCCC"> purpose because</font><font color="#E5E5E5"> of</font>

406
00:24:38,890 --> 00:24:45,430
the of direct<font color="#E5E5E5"> Eva which forces is</font>

407
00:24:41,290 --> 00:24:48,850
invalid assignment<font color="#CCCCCC"> arrangement</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so</font>

408
00:24:45,430 --> 00:24:50,700
it's all be done but so what we want<font color="#E5E5E5"> to</font>

409
00:24:48,850 --> 00:24:54,909
know what happens on the wheel<font color="#CCCCCC"> hardware</font>

410
00:24:50,700 --> 00:24:58,120
let's have a look<font color="#E5E5E5"> let's consider the</font>

411
00:24:54,910 --> 00:25:01,570
<font color="#E5E5E5">following indirect jump here the</font>

412
00:24:58,120 --> 00:25:03,310
programmer intent<font color="#E5E5E5"> is pretty clear we</font>

413
00:25:01,570 --> 00:25:07,120
have an indirect<font color="#CCCCCC"> jump to the gem</font><font color="#E5E5E5"> Victor</font>

414
00:25:03,310 --> 00:25:10,750
30 FF which lies here so the programmer

415
00:25:07,120 --> 00:25:13,330
wanted to jump at<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> s 50 80 it's</font>

416
00:25:10,750 --> 00:25:16,690
<font color="#E5E5E5">little-endian it's a</font><font color="#CCCCCC"> 2 by</font><font color="#E5E5E5"> John vector of</font>

417
00:25:13,330 --> 00:25:19,980
50 80 however the real hardware<font color="#E5E5E5"> will</font>

418
00:25:16,690 --> 00:25:23,770
jump<font color="#CCCCCC"> to 40 80</font>

419
00:25:19,980 --> 00:25:27,940
does it bug in the 6502<font color="#E5E5E5"> which is present</font>

420
00:25:23,770 --> 00:25:31,240
in almost all consoles which makes the

421
00:25:27,940 --> 00:25:35,170
hard way fetch the<font color="#E5E5E5"> high bite of the John</font>

422
00:25:31,240 --> 00:25:42,760
<font color="#E5E5E5">Victor one page</font><font color="#CCCCCC"> too low which means it</font>

423
00:25:35,170 --> 00:25:45,880
will fetch 40 instead<font color="#CCCCCC"> of 50 so at this</font>

424
00:25:42,760 --> 00:25:48,340
point we just have<font color="#E5E5E5"> to implement this bug</font>

425
00:25:45,880 --> 00:25:52,540
into<font color="#E5E5E5"> our favorite 6502 open source</font>

426
00:25:48,340 --> 00:25:56,290
emulator and run the same<font color="#E5E5E5"> assembly code</font>

427
00:25:52,540 --> 00:25:57,270
again and<font color="#E5E5E5"> this time we</font><font color="#CCCCCC"> get a different</font>

428
00:25:56,290 --> 00:25:59,280
flag

429
00:25:57,270 --> 00:26:01,620
which is accepted<font color="#E5E5E5"> which means at this</font>

430
00:25:59,280 --> 00:26:06,240
<font color="#E5E5E5">point we have all the nine flags of this</font>

431
00:26:01,620 --> 00:26:08,909
series and<font color="#CCCCCC"> we win</font><font color="#E5E5E5"> I'd like to end by</font>

432
00:26:06,240 --> 00:26:11,520
<font color="#CCCCCC">saying</font><font color="#E5E5E5"> a big</font><font color="#CCCCCC"> thank you to the people</font><font color="#E5E5E5"> who</font>

433
00:26:08,910 --> 00:26:13,920
<font color="#CCCCCC">design</font><font color="#E5E5E5"> these challenges because it was</font>

434
00:26:11,520 --> 00:26:15,870
obviously a lot<font color="#CCCCCC"> of hard</font><font color="#E5E5E5"> work and I had a</font>

435
00:26:13,920 --> 00:26:18,680
lot of great fun<font color="#E5E5E5"> so thanks to them and</font>

436
00:26:15,870 --> 00:26:18,679
thanks for<font color="#CCCCCC"> listening</font>

