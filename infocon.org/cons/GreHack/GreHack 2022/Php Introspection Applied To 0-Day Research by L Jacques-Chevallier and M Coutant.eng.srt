1
00:00:02,820 --> 00:00:05,759
thanks for the introduction so before we

2
00:00:05,759 --> 00:00:09,300
start a huge thanks because I started I

3
00:00:09,300 --> 00:00:11,040
just got into hacking four years ago

4
00:00:11,040 --> 00:00:14,040
here so it's really heartwarming for me

5
00:00:14,040 --> 00:00:17,220
to give a talk here at black so I'm

6
00:00:17,220 --> 00:00:19,920
happy and sorry it's so early in the

7
00:00:19,920 --> 00:00:21,300
morning but that's the way they do it

8
00:00:21,300 --> 00:00:23,400
here so good luck and I hope you will

9
00:00:23,400 --> 00:00:26,699
enjoy this first talk so what is our

10
00:00:26,699 --> 00:00:29,039
journey today uh first a short

11
00:00:29,039 --> 00:00:30,840
prediction of who am I and who the guy

12
00:00:30,840 --> 00:00:34,040
that did the talk with me is uh group

13
00:00:34,040 --> 00:00:36,420
then we'll go briefly into what is

14
00:00:36,420 --> 00:00:38,340
introspection what it is how it works

15
00:00:38,340 --> 00:00:41,100
what can be achieved with it then we'll

16
00:00:41,100 --> 00:00:43,320
go into the main

17
00:00:43,320 --> 00:00:45,719
um the core of the project PHP internal

18
00:00:45,719 --> 00:00:47,879
log which is the main name we used

19
00:00:47,879 --> 00:00:49,379
during the world project and various

20
00:00:49,379 --> 00:00:52,079
duration we've done on it and then of

21
00:00:52,079 --> 00:00:55,140
course some intakes of how this project

22
00:00:55,140 --> 00:00:57,360
can be used what can be achieved with it

23
00:00:57,360 --> 00:01:00,180
and what were the already found or equal

24
00:01:00,180 --> 00:01:02,640
findings we have had and last but not

25
00:01:02,640 --> 00:01:06,019
least Kudos of course

26
00:01:06,360 --> 00:01:09,180
okay so first me it's like some of you

27
00:01:09,180 --> 00:01:11,580
may know some of you know me I'm from

28
00:01:11,580 --> 00:01:15,479
granabra and I mostly dedicated into web

29
00:01:15,479 --> 00:01:17,640
all day research or tooling for

30
00:01:17,640 --> 00:01:19,439
Automation and

31
00:01:19,439 --> 00:01:22,560
crazy devsec Cloud Ops things

32
00:01:22,560 --> 00:01:24,479
and during this project as I was

33
00:01:24,479 --> 00:01:26,759
converted to low level issues I reached

34
00:01:26,759 --> 00:01:28,560
out to a friend of mine Grump which is

35
00:01:28,560 --> 00:01:32,759
mostly an audio Dev guy but he does a

36
00:01:32,759 --> 00:01:34,560
lot of C plus plus and low level things

37
00:01:34,560 --> 00:01:37,439
so I was really happy to offer him to

38
00:01:37,439 --> 00:01:42,000
join and he joined and short

39
00:01:42,000 --> 00:01:43,860
introduction of him because he can't

40
00:01:43,860 --> 00:01:46,619
make it today for a really good reason

41
00:01:46,619 --> 00:01:49,259
hey you all sorry I won't be in

42
00:01:49,259 --> 00:01:51,540
vulnerable in time for garage I'm

43
00:01:51,540 --> 00:01:53,340
currently yeah sorry for the noise I'm

44
00:01:53,340 --> 00:01:55,680
currently at the audio defcom in London

45
00:01:55,680 --> 00:01:59,399
have a great day in my hometown have a

46
00:01:59,399 --> 00:02:01,200
great talk with LA Lucia I don't

47
00:02:01,200 --> 00:02:03,720
hesitate to get in touch if you have any

48
00:02:03,720 --> 00:02:06,780
question any question and yeah have a

49
00:02:06,780 --> 00:02:09,060
nice grow hack and continue to hack

50
00:02:09,060 --> 00:02:10,759
things

51
00:02:10,759 --> 00:02:13,500
okay so that's it that's brief but I was

52
00:02:13,500 --> 00:02:15,599
really happy that he made this because

53
00:02:15,599 --> 00:02:17,520
we will turn this project so that's

54
00:02:17,520 --> 00:02:19,800
really cool to give to pay respect for

55
00:02:19,800 --> 00:02:21,660
the work he's that he has done and also

56
00:02:21,660 --> 00:02:23,340
it's cool to see that we are not the

57
00:02:23,340 --> 00:02:25,739
only field to have conferences and

58
00:02:25,739 --> 00:02:27,420
things that are really active because

59
00:02:27,420 --> 00:02:29,400
it's really always cool even more on

60
00:02:29,400 --> 00:02:31,020
site to get in touch and meet new people

61
00:02:31,020 --> 00:02:32,459
to share projects and it's all about

62
00:02:32,459 --> 00:02:34,440
this sharing projects

63
00:02:34,440 --> 00:02:36,480
uh no introspection

64
00:02:36,480 --> 00:02:39,360
what is introspection so introduction is

65
00:02:39,360 --> 00:02:41,940
when you ask to a language to observe

66
00:02:41,940 --> 00:02:45,200
itself during runtime

67
00:02:45,720 --> 00:02:47,400
uh

68
00:02:47,400 --> 00:02:49,980
so it can be for functions objects

69
00:02:49,980 --> 00:02:53,040
methods globals everything that might be

70
00:02:53,040 --> 00:02:55,319
needed to see what's happening

71
00:02:55,319 --> 00:02:57,840
internally during a language or program

72
00:02:57,840 --> 00:02:59,640
execution

73
00:02:59,640 --> 00:03:03,120
um so a few examples

74
00:03:03,120 --> 00:03:06,239
it's really close to me a few examples

75
00:03:06,239 --> 00:03:10,319
we have in Python the basics with LP has

76
00:03:10,319 --> 00:03:12,480
a tribute type and so on there are

77
00:03:12,480 --> 00:03:13,680
pretty much equivalents in every

78
00:03:13,680 --> 00:03:15,120
language is

79
00:03:15,120 --> 00:03:16,980
almost every time grid is because some

80
00:03:16,980 --> 00:03:19,200
are already not made for introspection

81
00:03:19,200 --> 00:03:21,720
and can't really easily self-observate

82
00:03:21,720 --> 00:03:25,140
them but that's the idea why

83
00:03:25,140 --> 00:03:26,879
introspection because cool you can

84
00:03:26,879 --> 00:03:29,519
observe yourselves but why a few

85
00:03:29,519 --> 00:03:31,980
examples are the following ones so to

86
00:03:31,980 --> 00:03:34,500
the beginning purpose so some of you may

87
00:03:34,500 --> 00:03:37,260
already use ipdb for an interactive

88
00:03:37,260 --> 00:03:39,599
python debugger it's a huge time again

89
00:03:39,599 --> 00:03:41,580
to be able to just buy on a shell during

90
00:03:41,580 --> 00:03:43,620
your runtime and get some knowledge

91
00:03:43,620 --> 00:03:46,140
about about what is being executed what

92
00:03:46,140 --> 00:03:48,120
are your current variables what are the

93
00:03:48,120 --> 00:03:50,819
current uh issues bottlenecks how much

94
00:03:50,819 --> 00:03:52,379
time has spent has been spent in

95
00:03:52,379 --> 00:03:55,920
specific functions uh Hot Patch and let

96
00:03:55,920 --> 00:03:58,980
the cut continue or also on Linux there

97
00:03:58,980 --> 00:04:01,019
is the tool perf that can be used a lot

98
00:04:01,019 --> 00:04:03,480
for improving performances see where the

99
00:04:03,480 --> 00:04:06,060
code is bottlenecking and fuzzing

100
00:04:06,060 --> 00:04:08,220
purpose so there is one

101
00:04:08,220 --> 00:04:10,819
um verb infiltrator which is

102
00:04:10,819 --> 00:04:13,620
that can be pushed into your Java

103
00:04:13,620 --> 00:04:15,000
application you're trying to audit and

104
00:04:15,000 --> 00:04:17,820
this will try to internally log every

105
00:04:17,820 --> 00:04:19,620
interesting or let's say dangerous

106
00:04:19,620 --> 00:04:22,139
function that can be reached and last

107
00:04:22,139 --> 00:04:24,840
but not least Security checks there are

108
00:04:24,840 --> 00:04:27,120
values of tools or providers that can

109
00:04:27,120 --> 00:04:29,639
instrument your code during runtime and

110
00:04:29,639 --> 00:04:33,120
be really context dependent and try to

111
00:04:33,120 --> 00:04:36,780
allow our block specific values

112
00:04:36,780 --> 00:04:39,600
so what do we want

113
00:04:39,600 --> 00:04:41,400
know what the is going on inside

114
00:04:41,400 --> 00:04:42,919
PHP

115
00:04:42,919 --> 00:04:45,479
said in a more classy way we really want

116
00:04:45,479 --> 00:04:48,360
to log every interesting functions every

117
00:04:48,360 --> 00:04:50,400
interesting parameters their values

118
00:04:50,400 --> 00:04:52,380
because we are into the offensive field

119
00:04:52,380 --> 00:04:54,900
so what we want is to know what is being

120
00:04:54,900 --> 00:04:58,620
triggered where how and by whom

121
00:04:58,620 --> 00:05:01,979
and so let's go to the core so now we'll

122
00:05:01,979 --> 00:05:04,680
iterate over the values version we've

123
00:05:04,680 --> 00:05:07,020
done with PHP internal log so this is

124
00:05:07,020 --> 00:05:10,320
our approach our road and girl it was a

125
00:05:10,320 --> 00:05:14,520
hard road to iterate over the ideas we

126
00:05:14,520 --> 00:05:16,440
have and see what where the blocking

127
00:05:16,440 --> 00:05:18,900
points are the working points

128
00:05:18,900 --> 00:05:21,479
so first it's a completely dummy idea

129
00:05:21,479 --> 00:05:24,120
because it were 99 sure it will not work

130
00:05:24,120 --> 00:05:27,060
but we had to test uh on the left what

131
00:05:27,060 --> 00:05:29,039
you can see is the main test file so

132
00:05:29,039 --> 00:05:30,780
it's not exhaustive with just some PHP

133
00:05:30,780 --> 00:05:32,460
code without trying some statements

134
00:05:32,460 --> 00:05:35,100
mostly dangerous statements and I wanted

135
00:05:35,100 --> 00:05:37,740
to know if we're able to catch it or at

136
00:05:37,740 --> 00:05:40,919
least to observe it and if no then we

137
00:05:40,919 --> 00:05:42,840
fail because we want to catch these code

138
00:05:42,840 --> 00:05:45,720
executions requests to wheel rejects

139
00:05:45,720 --> 00:05:48,360
happening and everything being included

140
00:05:48,360 --> 00:05:51,479
are evil because that's the way upon PHP

141
00:05:51,479 --> 00:05:53,639
uh on the top right you can see that we

142
00:05:53,639 --> 00:05:55,919
the first the very first naive iteration

143
00:05:55,919 --> 00:05:59,100
was by using estrace and l-trace so

144
00:05:59,100 --> 00:06:01,860
library or stack Trace uh to get some

145
00:06:01,860 --> 00:06:04,440
insight so of course this yelled

146
00:06:04,440 --> 00:06:08,280
completely unusable results for the most

147
00:06:08,280 --> 00:06:12,300
part so on the left it's the uh L Trace

148
00:06:12,300 --> 00:06:14,220
I think so you see all the code to

149
00:06:14,220 --> 00:06:15,960
various libraries but not there are

150
00:06:15,960 --> 00:06:18,300
parameters so you know that something

151
00:06:18,300 --> 00:06:21,539
happened yeah fine on the right you can

152
00:06:21,539 --> 00:06:23,880
see it's a stress and it's a bit better

153
00:06:23,880 --> 00:06:26,460
because we now can get a grasp of what's

154
00:06:26,460 --> 00:06:29,039
Happening we know that some arbitrary

155
00:06:29,039 --> 00:06:31,520
path are being executed are trying to be

156
00:06:31,520 --> 00:06:35,039
read or bright or some things are being

157
00:06:35,039 --> 00:06:36,539
opened on the network we can see

158
00:06:36,539 --> 00:06:38,400
information about a few sockets so

159
00:06:38,400 --> 00:06:40,199
that's the beginning but definitely way

160
00:06:40,199 --> 00:06:41,880
too verbose for us

161
00:06:41,880 --> 00:06:46,080
so that's easy to set up that's uh fast

162
00:06:46,080 --> 00:06:48,479
enough is that always available because

163
00:06:48,479 --> 00:06:50,460
that's main Linux binaries it's just

164
00:06:50,460 --> 00:06:52,139
built-ins and we have nothing to

165
00:06:52,139 --> 00:06:53,819
maintain so that's the pros but for the

166
00:06:53,819 --> 00:06:56,460
cons of course uh it can break because

167
00:06:56,460 --> 00:06:57,780
it's

168
00:06:57,780 --> 00:06:59,699
basically plugging a debugger into your

169
00:06:59,699 --> 00:07:01,740
program and so it can have side effects

170
00:07:01,740 --> 00:07:03,840
most of the times it's okay but it can

171
00:07:03,840 --> 00:07:05,880
happen information is too low level

172
00:07:05,880 --> 00:07:08,220
we're definitely not scoping the the

173
00:07:08,220 --> 00:07:11,280
observability to the right level because

174
00:07:11,280 --> 00:07:13,319
we don't care about stack address we're

175
00:07:13,319 --> 00:07:15,780
just trying to pawn PHP maybe on the

176
00:07:15,780 --> 00:07:17,639
second conference you'll see that stack

177
00:07:17,639 --> 00:07:20,280
addresses can be useful

178
00:07:20,280 --> 00:07:21,539
um and of course it's not really

179
00:07:21,539 --> 00:07:23,880
configurable not flexible you can do

180
00:07:23,880 --> 00:07:27,599
much you just log what's happening

181
00:07:27,599 --> 00:07:30,000
um so let no for the first real

182
00:07:30,000 --> 00:07:34,139
iteration of uh PHP internal log so the

183
00:07:34,139 --> 00:07:37,080
idea on the right was to you you can see

184
00:07:37,080 --> 00:07:39,539
the first the very first line is to use

185
00:07:39,539 --> 00:07:42,780
netcat as a UDP server and so it will

186
00:07:42,780 --> 00:07:45,300
just listen for every request and then

187
00:07:45,300 --> 00:07:47,520
on the PHP core so we just actually

188
00:07:47,520 --> 00:07:50,520
forked PHP in a really dirty way and we

189
00:07:50,520 --> 00:07:53,160
purchased a UDP client into the main

190
00:07:53,160 --> 00:07:56,580
header so we could call it everywhere in

191
00:07:56,580 --> 00:07:59,099
the code and just say hey this function

192
00:07:59,099 --> 00:08:01,560
has been called hey this parameter was

193
00:08:01,560 --> 00:08:03,780
seen at this place and it was a bit

194
00:08:03,780 --> 00:08:06,900
delused to implement but I'm no I'm no

195
00:08:06,900 --> 00:08:11,039
little developer so it was messy uh the

196
00:08:11,039 --> 00:08:13,199
way it works we can see here

197
00:08:13,199 --> 00:08:15,419
um then pass parameters start and ends

198
00:08:15,419 --> 00:08:18,360
that's the way then the so PHP score and

199
00:08:18,360 --> 00:08:20,879
backend try to unpack parameters and

200
00:08:20,879 --> 00:08:22,680
what you can see just after is that we

201
00:08:22,680 --> 00:08:25,620
try to do some SN printf code to format

202
00:08:25,620 --> 00:08:27,720
the log line and we then just push it

203
00:08:27,720 --> 00:08:30,120
with the macro the local log I was the

204
00:08:30,120 --> 00:08:31,500
only one in the project but back then

205
00:08:31,500 --> 00:08:34,260
and we just push it to the udbased UDP

206
00:08:34,260 --> 00:08:36,839
server and voila you just log something

207
00:08:36,839 --> 00:08:38,940
from everywhere even if you are a node

208
00:08:38,940 --> 00:08:40,740
Docker if you even

209
00:08:40,740 --> 00:08:43,500
on a remote end it works as well

210
00:08:43,500 --> 00:08:45,899
but there are a few issues with that so

211
00:08:45,899 --> 00:08:47,880
of course now we can hook pretty much

212
00:08:47,880 --> 00:08:49,860
everything because we are doing C and

213
00:08:49,860 --> 00:08:52,019
PHP is coded in C so everything can be

214
00:08:52,019 --> 00:08:52,800
done

215
00:08:52,800 --> 00:08:55,380
it looks useful stuff because it logs

216
00:08:55,380 --> 00:08:59,160
only the things we want it to log and

217
00:08:59,160 --> 00:09:01,200
um so we are not splitting no more and

218
00:09:01,200 --> 00:09:03,660
it's UDP so you just flush it away there

219
00:09:03,660 --> 00:09:05,940
is no scenes in arc Arc or whatever you

220
00:09:05,940 --> 00:09:08,640
just send data and pray for it to arrive

221
00:09:08,640 --> 00:09:11,000
on time

222
00:09:12,380 --> 00:09:14,459
hooking everything is painful because

223
00:09:14,459 --> 00:09:17,220
you have to code printf try to unpack

224
00:09:17,220 --> 00:09:18,779
try to analyze trying to make some

225
00:09:18,779 --> 00:09:20,880
switch statement every time you want to

226
00:09:20,880 --> 00:09:23,580
log a single functions and it's PHP so

227
00:09:23,580 --> 00:09:25,620
dangerous functions are

228
00:09:25,620 --> 00:09:28,040
hundreds Legends

229
00:09:28,040 --> 00:09:31,680
and of course then we'll try we begin to

230
00:09:31,680 --> 00:09:33,120
realize that not everything is a

231
00:09:33,120 --> 00:09:34,800
function inside PHP there are a few

232
00:09:34,800 --> 00:09:37,519
statements like include eval or other

233
00:09:37,519 --> 00:09:39,899
let's say not built-ins but language

234
00:09:39,899 --> 00:09:43,560
constructions that are not things we can

235
00:09:43,560 --> 00:09:45,779
just hook the same way we do for all the

236
00:09:45,779 --> 00:09:47,820
other ones so we had to adapt a bit the

237
00:09:47,820 --> 00:09:50,399
code and our backend is literally done

238
00:09:50,399 --> 00:09:52,800
by the socket because it's just a UDP

239
00:09:52,800 --> 00:09:56,220
socket and of course for Threads as it's

240
00:09:56,220 --> 00:09:58,200
UDP we've had issues like two log lines

241
00:09:58,200 --> 00:09:59,459
being long at the same time so it's

242
00:09:59,459 --> 00:10:01,260
completely unusable content something

243
00:10:01,260 --> 00:10:03,959
you can't pass and we had to recompile

244
00:10:03,959 --> 00:10:06,600
every time a change has to be made and

245
00:10:06,600 --> 00:10:08,880
that's pretty pretty slow

246
00:10:08,880 --> 00:10:11,040
uh now for the second iteration that's

247
00:10:11,040 --> 00:10:13,740
one suggestion I have had for my former

248
00:10:13,740 --> 00:10:16,200
company which was to use xdeburg and try

249
00:10:16,200 --> 00:10:19,019
to build on top of tools that are

250
00:10:19,019 --> 00:10:20,820
already existing

251
00:10:20,820 --> 00:10:22,920
um in the community mostly for PHP

252
00:10:22,920 --> 00:10:24,300
developers I want to debug and

253
00:10:24,300 --> 00:10:26,940
troubleshoot their programs so it's

254
00:10:26,940 --> 00:10:29,040
fairly set up to install you can see a

255
00:10:29,040 --> 00:10:31,399
few one-liners or

256
00:10:31,399 --> 00:10:34,019
Snippets to have it set up in no time

257
00:10:34,019 --> 00:10:36,480
and this can be used in two main ways

258
00:10:36,480 --> 00:10:39,720
the first one is to use it as a debugger

259
00:10:39,720 --> 00:10:41,519
like interactive you just wait for it

260
00:10:41,519 --> 00:10:43,459
you just ask

261
00:10:43,459 --> 00:10:46,740
xdeback to wait for you to connect or

262
00:10:46,740 --> 00:10:48,959
you ask it to connect back and you can

263
00:10:48,959 --> 00:10:51,480
enter the actively edit variables read

264
00:10:51,480 --> 00:10:53,459
them and so on or they read the second

265
00:10:53,459 --> 00:10:55,500
mode which is the trace mode and you can

266
00:10:55,500 --> 00:10:58,380
just activate it tweak the bug that is

267
00:10:58,380 --> 00:11:03,140
in the end just a side dot so library

268
00:11:03,140 --> 00:11:06,300
that you ask him to log everything it

269
00:11:06,300 --> 00:11:08,700
can see or just a few

270
00:11:08,700 --> 00:11:11,100
um things like just function names or

271
00:11:11,100 --> 00:11:13,260
just parameters values you can tweak it

272
00:11:13,260 --> 00:11:15,920
a bit but not so much

273
00:11:15,920 --> 00:11:19,320
that's the sample output so you know

274
00:11:19,320 --> 00:11:21,899
everything that is happening under the

275
00:11:21,899 --> 00:11:22,560
hood

276
00:11:22,560 --> 00:11:25,320
as you can see every PHP statement which

277
00:11:25,320 --> 00:11:27,959
file which line how much time it took

278
00:11:27,959 --> 00:11:29,820
what are the parameters when they enter

279
00:11:29,820 --> 00:11:31,380
the functions what is the return value

280
00:11:31,380 --> 00:11:33,959
you have pretty much everything

281
00:11:33,959 --> 00:11:36,060
but we are still lacking a few things

282
00:11:36,060 --> 00:11:38,640
like what if you're trying to open a

283
00:11:38,640 --> 00:11:40,800
file that does not exist or some auto

284
00:11:40,800 --> 00:11:43,500
loading on the lower level then we will

285
00:11:43,500 --> 00:11:44,940
try we'll begin to miss some information

286
00:11:44,940 --> 00:11:48,660
but we are targeting PHP so that's good

287
00:11:48,660 --> 00:11:50,399
enough for now

288
00:11:50,399 --> 00:11:55,019
but it's slow it's so slow like uh

289
00:11:55,019 --> 00:11:57,899
for the main issues we've had

290
00:11:57,899 --> 00:11:58,680
um

291
00:11:58,680 --> 00:12:01,140
I tried to edit some specific part of

292
00:12:01,140 --> 00:12:03,480
Majin to do and the measure to do is

293
00:12:03,480 --> 00:12:07,680
generating its CSS files with PHP

294
00:12:07,680 --> 00:12:10,620
and one single get requests made a dump

295
00:12:10,620 --> 00:12:13,200
of 20 gigs

296
00:12:13,200 --> 00:12:16,620
and that's huge and so to gain some

297
00:12:16,620 --> 00:12:19,740
speed I was placing all the output of

298
00:12:19,740 --> 00:12:24,360
xdeburg inside Dev shm on Linux for

299
00:12:24,360 --> 00:12:26,339
those that don't know it's just a shared

300
00:12:26,339 --> 00:12:28,680
memory segment that is in Ram

301
00:12:28,680 --> 00:12:31,860
this means that by one single request I

302
00:12:31,860 --> 00:12:33,839
wrote 20 gigs in my Ram

303
00:12:33,839 --> 00:12:36,540
and of course I run two requests

304
00:12:36,540 --> 00:12:39,240
and my computer just shut just shut down

305
00:12:39,240 --> 00:12:41,700
it just was dying freezing

306
00:12:41,700 --> 00:12:44,700
that's a fail but but that's already

307
00:12:44,700 --> 00:12:46,740
really useful because we log everything

308
00:12:46,740 --> 00:12:49,560
that can be used we log things in a way

309
00:12:49,560 --> 00:12:51,180
that can be parsed even if it's not

310
00:12:51,180 --> 00:12:53,519
perfect it's portable because you can

311
00:12:53,519 --> 00:12:55,260
build this library for various

312
00:12:55,260 --> 00:12:56,940
environments so that's really recommend

313
00:12:56,940 --> 00:12:59,940
and it's fast easy to set up it's really

314
00:12:59,940 --> 00:13:01,620
okay if you have the right Snippets but

315
00:13:01,620 --> 00:13:03,480
back then with there was a transition

316
00:13:03,480 --> 00:13:05,279
between the version 2 and 3 the

317
00:13:05,279 --> 00:13:06,899
documentation was not really up to date

318
00:13:06,899 --> 00:13:08,639
so it was

319
00:13:08,639 --> 00:13:11,279
a bit tedious to set up but okay in the

320
00:13:11,279 --> 00:13:13,399
end

321
00:13:13,560 --> 00:13:16,699
um just a sec

322
00:13:17,730 --> 00:13:19,860
[Music]

323
00:13:19,860 --> 00:13:21,120
not better

324
00:13:21,120 --> 00:13:24,300
third version of our project

325
00:13:24,300 --> 00:13:27,380
so this is where chromef comes in place

326
00:13:27,380 --> 00:13:30,839
and try to see what I've been doing with

327
00:13:30,839 --> 00:13:34,019
the low level code and just he basically

328
00:13:34,019 --> 00:13:35,820
just gets rid of everything I did and

329
00:13:35,820 --> 00:13:37,980
starts from scratch which is a fair

330
00:13:37,980 --> 00:13:38,899
choice

331
00:13:38,899 --> 00:13:41,880
uh so where do you want to insert we are

332
00:13:41,880 --> 00:13:43,680
still on the same point the PHP function

333
00:13:43,680 --> 00:13:45,660
macro is the one that defines that

334
00:13:45,660 --> 00:13:47,579
defines every function also we will

335
00:13:47,579 --> 00:13:49,920
still start from here and for the two

336
00:13:49,920 --> 00:13:51,959
language language constriction that we

337
00:13:51,959 --> 00:13:55,079
catched so include our eval we found a

338
00:13:55,079 --> 00:13:57,839
few places that are the main uh the main

339
00:13:57,839 --> 00:13:59,820
culprits the main starting point for

340
00:13:59,820 --> 00:14:01,260
these statements

341
00:14:01,260 --> 00:14:03,779
everything that we want to log is using

342
00:14:03,779 --> 00:14:06,600
Z value because it's Zen values it's the

343
00:14:06,600 --> 00:14:09,120
way Everything is Everything variable

344
00:14:09,120 --> 00:14:11,880
related is stored within PHP score

345
00:14:11,880 --> 00:14:16,019
uh uh as far as I know at least and it's

346
00:14:16,019 --> 00:14:17,940
pretty ugly so we really wanted to get

347
00:14:17,940 --> 00:14:20,459
an abstraction layer and get as far as

348
00:14:20,459 --> 00:14:23,940
we can from PHP as soon as we can so we

349
00:14:23,940 --> 00:14:25,500
just found a way

350
00:14:25,500 --> 00:14:29,700
see Json two but two files in to add two

351
00:14:29,700 --> 00:14:31,620
files in two PHP Source curves and be

352
00:14:31,620 --> 00:14:33,959
able to dump everything as Json because

353
00:14:33,959 --> 00:14:36,000
that values are not something you want

354
00:14:36,000 --> 00:14:38,459
to work with is mostly binary if you

355
00:14:38,459 --> 00:14:40,139
have a debugger that's okay if you do

356
00:14:40,139 --> 00:14:43,019
not that's not okay anymore

357
00:14:43,019 --> 00:14:45,720
um and how to log so we wanted to

358
00:14:45,720 --> 00:14:48,300
lose some speed but gain into

359
00:14:48,300 --> 00:14:50,880
standardization because with some post

360
00:14:50,880 --> 00:14:53,639
requests and actually posting Json it

361
00:14:53,639 --> 00:14:56,040
would be way easier to pass way easier

362
00:14:56,040 --> 00:14:58,800
to standardize and build on top of these

363
00:14:58,800 --> 00:15:01,920
tools you wanted it to be not the tool

364
00:15:01,920 --> 00:15:03,660
but just a brick that can be used later

365
00:15:03,660 --> 00:15:05,760
on to automate fuzzing

366
00:15:05,760 --> 00:15:08,040
just one idea

367
00:15:08,040 --> 00:15:10,320
and of course we use the lip curl

368
00:15:10,320 --> 00:15:12,420
because we want to do Post requests so

369
00:15:12,420 --> 00:15:15,720
that's the easiest way like 3DS the

370
00:15:15,720 --> 00:15:17,760
easiest way

371
00:15:17,760 --> 00:15:19,320
um and at some point he really was

372
00:15:19,320 --> 00:15:21,199
struggling into the build system because

373
00:15:21,199 --> 00:15:24,360
it's a nightmare as he said it himself

374
00:15:24,360 --> 00:15:26,699
uh you can't really just modify a make

375
00:15:26,699 --> 00:15:28,440
file and call it today you have to

376
00:15:28,440 --> 00:15:32,220
modify a configure.ac that will be run

377
00:15:32,220 --> 00:15:34,199
by configure that will run a few

378
00:15:34,199 --> 00:15:37,320
interaction levels and at some point you

379
00:15:37,320 --> 00:15:40,860
can just add your smallish flag Dash L

380
00:15:40,860 --> 00:15:43,800
curl that will enable you to compile

381
00:15:43,800 --> 00:15:45,660
with liquor

382
00:15:45,660 --> 00:15:47,610
install

383
00:15:47,610 --> 00:15:49,800
[Music]

384
00:15:49,800 --> 00:15:51,620
voila

385
00:15:51,620 --> 00:15:55,440
and so a few details

386
00:15:55,440 --> 00:15:58,560
so the main big macro we used from now

387
00:15:58,560 --> 00:16:01,199
on is ilog functions that will try to

388
00:16:01,199 --> 00:16:04,199
automatically parse the arguments and

389
00:16:04,199 --> 00:16:06,300
recovered function names because it's

390
00:16:06,300 --> 00:16:08,940
not that easy to recover it's not a

391
00:16:08,940 --> 00:16:11,040
variable it's just the way the macros

392
00:16:11,040 --> 00:16:13,160
are being enrolled at compute time

393
00:16:13,160 --> 00:16:17,279
and we called our magic log that valve

394
00:16:17,279 --> 00:16:19,440
parameters that actually does the wall

395
00:16:19,440 --> 00:16:22,440
Json serialization and then things out

396
00:16:22,440 --> 00:16:25,440
and then we just add our magic macro

397
00:16:25,440 --> 00:16:27,300
eyelab function and the name of the

398
00:16:27,300 --> 00:16:29,220
function you want to dump and that's it

399
00:16:29,220 --> 00:16:34,639
it's done and it works should work

400
00:16:34,639 --> 00:16:36,899
and for the language Contrition we

401
00:16:36,899 --> 00:16:39,060
worked a bit earlier so we've had to

402
00:16:39,060 --> 00:16:42,120
find the the place where it's being done

403
00:16:42,120 --> 00:16:45,600
and add a few more macros but in the end

404
00:16:45,600 --> 00:16:47,279
we're not using the main macro but just

405
00:16:47,279 --> 00:16:50,220
the second level uh functions works

406
00:16:50,220 --> 00:16:52,199
pretty much the same

407
00:16:52,199 --> 00:16:54,600
it's way faster than xdeburg it's not

408
00:16:54,600 --> 00:16:56,699
writing 20 gigs of Vlog at every request

409
00:16:56,699 --> 00:16:59,579
anymore yay

410
00:16:59,579 --> 00:17:01,560
um the communication is standardized

411
00:17:01,560 --> 00:17:03,240
which means it's really way easier for

412
00:17:03,240 --> 00:17:06,000
us to build on top of it uh the back end

413
00:17:06,000 --> 00:17:09,299
is was just a python simple server but

414
00:17:09,299 --> 00:17:12,480
can be improved much more and that's it

415
00:17:12,480 --> 00:17:14,459
for the advantages but for the for the

416
00:17:14,459 --> 00:17:16,619
the issues we've had there are still

417
00:17:16,619 --> 00:17:18,720
plenty of them because it's really slow

418
00:17:18,720 --> 00:17:20,760
and by really slow what I mean is that

419
00:17:20,760 --> 00:17:24,119
every time we made a single get request

420
00:17:24,119 --> 00:17:26,819
there will be hundreds maybe thousands

421
00:17:26,819 --> 00:17:29,460
of PHP functions that will get logged

422
00:17:29,460 --> 00:17:32,460
for every function there is a post

423
00:17:32,460 --> 00:17:34,440
request so for every function there is a

424
00:17:34,440 --> 00:17:36,660
distance being created Created there is

425
00:17:36,660 --> 00:17:39,720
thin scene arc on the network and for a

426
00:17:39,720 --> 00:17:42,480
single Json blob we are sending maybe

427
00:17:42,480 --> 00:17:45,120
five six hdb headers

428
00:17:45,120 --> 00:17:48,720
that sucks in every way oh so yeah that

429
00:17:48,720 --> 00:17:50,940
was not the brightest idea we've had but

430
00:17:50,940 --> 00:17:52,919
that was something wanted to try we

431
00:17:52,919 --> 00:17:55,440
still need to recompile at every test we

432
00:17:55,440 --> 00:17:58,020
we have and of course we broke some

433
00:17:58,020 --> 00:18:00,960
tests because using some a sync or a

434
00:18:00,960 --> 00:18:02,340
request full

435
00:18:02,340 --> 00:18:05,220
um things in the PHP score is not

436
00:18:05,220 --> 00:18:07,559
something the tests uh mostly

437
00:18:07,559 --> 00:18:10,580
performance test we appreciate

438
00:18:10,580 --> 00:18:13,679
Force iteration

439
00:18:13,679 --> 00:18:16,020
so we still already know where to insert

440
00:18:16,020 --> 00:18:18,780
we'll really know how to get rid of the

441
00:18:18,780 --> 00:18:22,740
bad z-val values now we want to gain

442
00:18:22,740 --> 00:18:24,360
some speed because we because we have

443
00:18:24,360 --> 00:18:27,260
the feature but we lack the performance

444
00:18:27,260 --> 00:18:29,940
so trying to use some threading of

445
00:18:29,940 --> 00:18:33,000
course it helped so it just uh lip is

446
00:18:33,000 --> 00:18:35,580
ready because it's just one really

447
00:18:35,580 --> 00:18:39,000
battle tested library and between the

448
00:18:39,000 --> 00:18:40,620
threads we still need some communication

449
00:18:40,620 --> 00:18:43,020
so not to thread Doctrine to log at the

450
00:18:43,020 --> 00:18:44,520
same time or they're not trying to use

451
00:18:44,520 --> 00:18:45,980
the same resource

452
00:18:45,980 --> 00:18:49,200
mostly in the curl way of doing things

453
00:18:49,200 --> 00:18:52,559
so he used the lfq it with just a simple

454
00:18:52,559 --> 00:18:55,860
first and first out cue that was used to

455
00:18:55,860 --> 00:18:59,039
pass things around and avoid avoid

456
00:18:59,039 --> 00:19:02,480
um locking anything

457
00:19:02,700 --> 00:19:05,100
um then we still had to init and join

458
00:19:05,100 --> 00:19:06,539
find places to eat and join for the

459
00:19:06,539 --> 00:19:09,360
threads so the main idea here was to not

460
00:19:09,360 --> 00:19:12,600
read code we just placed the debugger uh

461
00:19:12,600 --> 00:19:15,480
run it it asked it to start at the first

462
00:19:15,480 --> 00:19:19,140
function then voila we just pick Ed the

463
00:19:19,140 --> 00:19:21,720
the main file from here and same for the

464
00:19:21,720 --> 00:19:25,080
shutdown there is a PHP sapi shutdown so

465
00:19:25,080 --> 00:19:26,940
it's recommended to have all threads

466
00:19:26,940 --> 00:19:29,460
waiting there because if we were not

467
00:19:29,460 --> 00:19:32,940
waiting for uh every log line to be sent

468
00:19:32,940 --> 00:19:34,679
before shutting down and waiting for

469
00:19:34,679 --> 00:19:37,200
Threads then what happened is that you

470
00:19:37,200 --> 00:19:39,240
will lose a lot of information because

471
00:19:39,240 --> 00:19:41,220
nothing has been sent yet and you're

472
00:19:41,220 --> 00:19:46,440
already shutting down your PHP back end

473
00:19:46,440 --> 00:19:49,500
um we wanted to improve speed again so

474
00:19:49,500 --> 00:19:51,559
this time we got rid of

475
00:19:51,559 --> 00:19:55,860
TCP and HTTP and got rid of post so we

476
00:19:55,860 --> 00:19:57,539
pretty much unthreaded everything we've

477
00:19:57,539 --> 00:20:01,140
done but we can just now use azer STD or

478
00:20:01,140 --> 00:20:04,679
the IDP the UDP client again but this

479
00:20:04,679 --> 00:20:06,720
time we still keep the Json formatting

480
00:20:06,720 --> 00:20:09,600
we just end the length the Json a length

481
00:20:09,600 --> 00:20:11,400
Json and as long as there is no

482
00:20:11,400 --> 00:20:13,620
desynchronization we are good and that's

483
00:20:13,620 --> 00:20:15,000
really efficient

484
00:20:15,000 --> 00:20:18,059
and for the leaves same as previously we

485
00:20:18,059 --> 00:20:19,799
just add the flag LP threads to be able

486
00:20:19,799 --> 00:20:21,480
to compile

487
00:20:21,480 --> 00:20:24,840
so we he used Atomic values to have

488
00:20:24,840 --> 00:20:28,559
things that work across threads uh we

489
00:20:28,559 --> 00:20:30,120
can see that the left queue is being

490
00:20:30,120 --> 00:20:32,160
initialized then we create the threads

491
00:20:32,160 --> 00:20:35,220
and of course finally we do wait for

492
00:20:35,220 --> 00:20:37,980
them to finish to have our beloved

493
00:20:37,980 --> 00:20:39,720
values

494
00:20:39,720 --> 00:20:42,000
it's way faster finally we have some

495
00:20:42,000 --> 00:20:43,620
things that can be worked with that can

496
00:20:43,620 --> 00:20:45,780
be first for a web environment of course

497
00:20:45,780 --> 00:20:47,640
for binary phasing that definitely will

498
00:20:47,640 --> 00:20:49,280
not be enough

499
00:20:49,280 --> 00:20:52,140
we do not rely on lip curl anymore so

500
00:20:52,140 --> 00:20:55,140
it's a bit lighter as well the threading

501
00:20:55,140 --> 00:20:57,059
makes it more flexible and we don't have

502
00:20:57,059 --> 00:20:59,220
sentences that are all mixed up so

503
00:20:59,220 --> 00:21:01,799
that's way better and we fix the test

504
00:21:01,799 --> 00:21:03,960
pretty much all the tests not all of

505
00:21:03,960 --> 00:21:06,539
them uh we still need to compile every

506
00:21:06,539 --> 00:21:09,600
time and just get used to it because we

507
00:21:09,600 --> 00:21:11,580
have no other charge for now but no

508
00:21:11,580 --> 00:21:14,039
other choice for now I still quite used

509
00:21:14,039 --> 00:21:16,799
to configure we made some uh changes in

510
00:21:16,799 --> 00:21:18,299
place so we can read the Json blob

511
00:21:18,299 --> 00:21:20,220
somewhere to know where we log things or

512
00:21:20,220 --> 00:21:22,440
if we write them Twisted it out or stdr

513
00:21:22,440 --> 00:21:26,940
or another file but still it's still a

514
00:21:26,940 --> 00:21:29,340
bit of work we should have broken test

515
00:21:29,340 --> 00:21:31,740
and of course we miss we still miss a

516
00:21:31,740 --> 00:21:33,419
lot of features because we still need to

517
00:21:33,419 --> 00:21:37,320
place the PHP uh the I log function

518
00:21:37,320 --> 00:21:40,740
macro everywhere we want to log so

519
00:21:40,740 --> 00:21:43,559
at for the missing Feature Part

520
00:21:43,559 --> 00:21:45,600
there is there is always a trade-off we

521
00:21:45,600 --> 00:21:48,120
have to choose you either automate and

522
00:21:48,120 --> 00:21:49,860
of course we will catch way more than

523
00:21:49,860 --> 00:21:51,960
what you need or you do it manually and

524
00:21:51,960 --> 00:21:54,299
you will catch only what you need but at

525
00:21:54,299 --> 00:21:56,700
the cost of spending a lot of time

526
00:21:56,700 --> 00:21:59,220
picking the right places

527
00:21:59,220 --> 00:22:01,440
so that's the current state of the

528
00:22:01,440 --> 00:22:04,320
project that's the we just released it a

529
00:22:04,320 --> 00:22:07,080
few weeks ago actually so this talk was

530
00:22:07,080 --> 00:22:08,700
already given a transparent but don't

531
00:22:08,700 --> 00:22:10,260
worry first the few ones that were

532
00:22:10,260 --> 00:22:12,179
already there because there is a few

533
00:22:12,179 --> 00:22:15,260
things been added

534
00:22:15,360 --> 00:22:17,159
um and so now here comes a new

535
00:22:17,159 --> 00:22:18,900
Challenger because that's the way we've

536
00:22:18,900 --> 00:22:20,940
had the project so far and at some point

537
00:22:20,940 --> 00:22:24,480
we go I go to the stack conference so

538
00:22:24,480 --> 00:22:26,100
it's not concurrent at this point it's

539
00:22:26,100 --> 00:22:28,260
just friendly uh friendly talks friendly

540
00:22:28,260 --> 00:22:31,200
conferences and I give a small ramp with

541
00:22:31,200 --> 00:22:32,520
the current state of the project back

542
00:22:32,520 --> 00:22:35,700
then it was the first UDP iteration and

543
00:22:35,700 --> 00:22:40,880
some guy iloa says yeah but like

544
00:22:42,200 --> 00:22:45,539
and I was like different from what

545
00:22:45,539 --> 00:22:48,960
what yeah yeah that's nice but uh is it

546
00:22:48,960 --> 00:22:51,419
different from snufflepagus

547
00:22:51,419 --> 00:22:52,740
yeah

548
00:22:52,740 --> 00:22:54,600
that's not what so that was really

549
00:22:54,600 --> 00:22:56,640
cringy for me but that's the way you

550
00:22:56,640 --> 00:23:00,120
learn new things uh and so I just tried

551
00:23:00,120 --> 00:23:02,220
to see what sniffle package does how it

552
00:23:02,220 --> 00:23:05,100
works who supports it maintains it and I

553
00:23:05,100 --> 00:23:07,500
was not really convinced yet and a few

554
00:23:07,500 --> 00:23:09,780
days later I meet new soft and we just

555
00:23:09,780 --> 00:23:13,080
chat and he tells me hey I know a

556
00:23:13,080 --> 00:23:14,940
sniffle Packers because I tell him about

557
00:23:14,940 --> 00:23:18,480
my stories about my my lack of

558
00:23:18,480 --> 00:23:20,340
understanding on what it is and how it

559
00:23:20,340 --> 00:23:22,440
works and he's like yeah you really

560
00:23:22,440 --> 00:23:24,539
should try to give it a look again and

561
00:23:24,539 --> 00:23:26,039
dig deeper because

562
00:23:26,039 --> 00:23:28,320
this is nice and I he knows the

563
00:23:28,320 --> 00:23:31,080
maintainer and he's nice and now I know

564
00:23:31,080 --> 00:23:34,820
she was on the maintainer and he's nice

565
00:23:34,820 --> 00:23:38,159
uh so that's the way it goes uh snuffled

566
00:23:38,159 --> 00:23:40,700
by ghost is a way for you to sideload

567
00:23:40,700 --> 00:23:44,159
one.so so once again is Charlie Ray and

568
00:23:44,159 --> 00:23:46,679
this can be used to instrument PHP byte

569
00:23:46,679 --> 00:23:50,039
code by placing a few log lines it can

570
00:23:50,039 --> 00:23:52,080
be it's already it's already there it's

571
00:23:52,080 --> 00:23:56,580
already really stable you can really

572
00:23:56,580 --> 00:23:58,919
really easily try to play with it

573
00:23:58,919 --> 00:24:01,140
because this is not like X debug with

574
00:24:01,140 --> 00:24:03,240
tons of flag you just run a few quick

575
00:24:03,240 --> 00:24:05,280
starts and you're all good to play with

576
00:24:05,280 --> 00:24:07,919
so that's three convenient and you can

577
00:24:07,919 --> 00:24:11,159
log block filter have regex on every

578
00:24:11,159 --> 00:24:12,960
function values and everything so that's

579
00:24:12,960 --> 00:24:15,000
just a tremendous work that has been

580
00:24:15,000 --> 00:24:17,940
done there so we should have a dig

581
00:24:17,940 --> 00:24:20,400
deeper before trying to code in PHP RC

582
00:24:20,400 --> 00:24:22,860
and of course that's really cool that

583
00:24:22,860 --> 00:24:25,260
conference exists and ramps exist and

584
00:24:25,260 --> 00:24:29,460
people ask a question later and you can

585
00:24:29,460 --> 00:24:32,640
interact and just be aware that could

586
00:24:32,640 --> 00:24:34,140
project exist without trying to record

587
00:24:34,140 --> 00:24:36,960
everything from scratch every time

588
00:24:36,960 --> 00:24:39,140
so on the top left there is a sample

589
00:24:39,140 --> 00:24:41,700
snufflepagus rules files so you can say

590
00:24:41,700 --> 00:24:43,740
sniffle Packers disable this function

591
00:24:43,740 --> 00:24:45,900
the function name you can sometimes use

592
00:24:45,900 --> 00:24:48,240
macros the parameters because you might

593
00:24:48,240 --> 00:24:50,280
want to block conditionally whether a

594
00:24:50,280 --> 00:24:53,120
parameter is present or not

595
00:24:53,120 --> 00:24:55,140
or depending on the name of the

596
00:24:55,140 --> 00:24:58,380
parameter or its value and drop drop

597
00:24:58,380 --> 00:25:00,480
means that you will basically drop the

598
00:25:00,480 --> 00:25:02,940
support of this function but simulation

599
00:25:02,940 --> 00:25:05,280
means that will not drop and block it

600
00:25:05,280 --> 00:25:08,460
will just actually log it so this tool

601
00:25:08,460 --> 00:25:11,820
is initially a blue team tool but by

602
00:25:11,820 --> 00:25:13,919
using this blue team tool in our

603
00:25:13,919 --> 00:25:15,720
research project we are able to log

604
00:25:15,720 --> 00:25:17,880
every dangerous function as that that

605
00:25:17,880 --> 00:25:20,400
can get called and of course if we are

606
00:25:20,400 --> 00:25:21,780
able to know how to call the address

607
00:25:21,780 --> 00:25:24,360
function it's win-win for us

608
00:25:24,360 --> 00:25:26,460
so on the top right you can see the main

609
00:25:26,460 --> 00:25:29,580
output that says this function has been

610
00:25:29,580 --> 00:25:31,799
blocked or because these are its

611
00:25:31,799 --> 00:25:34,460
arguments was

612
00:25:34,460 --> 00:25:37,320
in your potential life it's most likely

613
00:25:37,320 --> 00:25:39,120
a Valor system has been blocked because

614
00:25:39,120 --> 00:25:40,919
it contains your web shell and you're

615
00:25:40,919 --> 00:25:43,620
happy or reverse shell uh on the bottom

616
00:25:43,620 --> 00:25:45,779
is the full output of snapal pluggers so

617
00:25:45,779 --> 00:25:48,120
it's a bit variables you can do some

618
00:25:48,120 --> 00:25:50,520
parsing or bashco food try to get rid of

619
00:25:50,520 --> 00:25:53,279
the Redundant values or modify the core

620
00:25:53,279 --> 00:25:55,020
they are looking for maintainers so

621
00:25:55,020 --> 00:25:57,860
probably looking for you

622
00:25:58,320 --> 00:26:01,200
um and so let I just made a few rules

623
00:26:01,200 --> 00:26:03,539
that you can get started with it's

624
00:26:03,539 --> 00:26:05,279
definitely not blue team rules it's just

625
00:26:05,279 --> 00:26:07,440
rules that can allow you to enable

626
00:26:07,440 --> 00:26:10,140
automatically debugging variables error

627
00:26:10,140 --> 00:26:12,299
uh try to log what's happening into

628
00:26:12,299 --> 00:26:14,880
dangerous functions so if you just paste

629
00:26:14,880 --> 00:26:16,740
the quick start and use this rule you're

630
00:26:16,740 --> 00:26:19,200
all good to go to find your first cve

631
00:26:19,200 --> 00:26:22,320
fingers crossed for you

632
00:26:22,320 --> 00:26:24,659
um so what we have now we have really

633
00:26:24,659 --> 00:26:26,880
fine grained filters we have a really

634
00:26:26,880 --> 00:26:28,860
little overhead because you can either

635
00:26:28,860 --> 00:26:31,140
write to a file or purse to syslog or

636
00:26:31,140 --> 00:26:32,580
just write to STD out so that's very

637
00:26:32,580 --> 00:26:34,260
convenient

638
00:26:34,260 --> 00:26:36,120
um we don't the only thing we have to

639
00:26:36,120 --> 00:26:39,200
maintain nor know is the rules files

640
00:26:39,200 --> 00:26:42,960
it's just way easier if you have a bug

641
00:26:42,960 --> 00:26:44,940
you can either try to work it out by

642
00:26:44,940 --> 00:26:47,220
yourself or PNG wasn't he is he's really

643
00:26:47,220 --> 00:26:49,260
awesome we've just

644
00:26:49,260 --> 00:26:51,960
um by just meeting each other we spent

645
00:26:51,960 --> 00:26:54,600
two weeks during today's today's range

646
00:26:54,600 --> 00:26:56,460
you see what could be done and how this

647
00:26:56,460 --> 00:26:57,779
project could be used in a more

648
00:26:57,779 --> 00:27:00,500
offensive way and even though he is not

649
00:27:00,500 --> 00:27:03,240
his product was not done for offensive

650
00:27:03,240 --> 00:27:04,919
work he was totally willing to help and

651
00:27:04,919 --> 00:27:06,360
see what could be achieved with it so

652
00:27:06,360 --> 00:27:09,179
that's a really cool mindset too uh now

653
00:27:09,179 --> 00:27:11,220
for the cons of course it's a niche

654
00:27:11,220 --> 00:27:12,960
project so what I mean by that is that

655
00:27:12,960 --> 00:27:15,380
there is mostly to maintainer and a few

656
00:27:15,380 --> 00:27:18,960
satellites so if you have issues you're

657
00:27:18,960 --> 00:27:20,640
on your iron or you can try to reach out

658
00:27:20,640 --> 00:27:24,539
to them but they have works as well

659
00:27:24,539 --> 00:27:26,940
um it's mostly two guys so they do

660
00:27:26,940 --> 00:27:29,940
really decent work but hey it's two guys

661
00:27:29,940 --> 00:27:33,620
we all have 25 24 hours in a day

662
00:27:33,620 --> 00:27:36,419
uh the logs behavior is not yet

663
00:27:36,419 --> 00:27:38,760
standardized enough I think that we

664
00:27:38,760 --> 00:27:41,340
missed some Json or anything that can be

665
00:27:41,340 --> 00:27:44,299
passed way easily because easier because

666
00:27:44,299 --> 00:27:47,580
it's already it's not recommended to

667
00:27:47,580 --> 00:27:52,679
just try to grab Oak cut said everywhere

668
00:27:52,679 --> 00:27:54,720
and uh and that's pretty much it

669
00:27:54,720 --> 00:27:56,460
otherwise there is no red flag this

670
00:27:56,460 --> 00:27:58,679
product is gold to me

671
00:27:58,679 --> 00:28:01,380
now fourth iteration not first edition

672
00:28:01,380 --> 00:28:04,559
for sports parts uh how do you use that

673
00:28:04,559 --> 00:28:07,260
it's simple you just set up snavel Pages

674
00:28:07,260 --> 00:28:10,380
set up PHP with the way you prefer and

675
00:28:10,380 --> 00:28:13,919
then you try to find first crawl mind

676
00:28:13,919 --> 00:28:17,220
parameters try to close to to cover as

677
00:28:17,220 --> 00:28:19,140
much good path as you can because

678
00:28:19,140 --> 00:28:21,360
everything that will be triggered will

679
00:28:21,360 --> 00:28:24,299
be logged and you're just one grip

680
00:28:24,299 --> 00:28:27,779
command weight you have your main issues

681
00:28:27,779 --> 00:28:31,140
uh does this actually work yep yep yep

682
00:28:31,140 --> 00:28:34,679
it does uh so it helped me to recover

683
00:28:34,679 --> 00:28:37,860
various WordPress plugin issues so I was

684
00:28:37,860 --> 00:28:40,520
just taking small divs and trying to

685
00:28:40,520 --> 00:28:44,580
fuzz it and see if the the main cve or

686
00:28:44,580 --> 00:28:49,020
issue was catched by the logs it was uh

687
00:28:49,020 --> 00:28:52,200
yes it worked that worked as well uh

688
00:28:52,200 --> 00:28:55,200
speep of course and some custom tests

689
00:28:55,200 --> 00:28:57,600
but you will see that in a few months I

690
00:28:57,600 --> 00:28:58,500
hope

691
00:28:58,500 --> 00:29:01,440
uh and so how about well we just tried

692
00:29:01,440 --> 00:29:03,480
to just applied what we just explained

693
00:29:03,480 --> 00:29:06,000
so we tried to log every function that

694
00:29:06,000 --> 00:29:07,860
is related to things on the network or

695
00:29:07,860 --> 00:29:09,840
in the file system or on cloud

696
00:29:09,840 --> 00:29:12,720
constructs and

697
00:29:12,720 --> 00:29:16,559
and when it rings that's just one that

698
00:29:16,559 --> 00:29:20,220
just came over for them so you what I

699
00:29:20,220 --> 00:29:22,380
really advise is to set up a fuzzer to

700
00:29:22,380 --> 00:29:25,320
use Canary values just a really well

701
00:29:25,320 --> 00:29:27,480
known pattern that you can detect even

702
00:29:27,480 --> 00:29:30,179
if it's modified slightly that way you

703
00:29:30,179 --> 00:29:33,840
can just have a uh real-time

704
00:29:33,840 --> 00:29:37,020
um the logs extraction and if something

705
00:29:37,020 --> 00:29:39,000
triggers you just stopped your research

706
00:29:39,000 --> 00:29:40,559
you're done unless you want to be

707
00:29:40,559 --> 00:29:43,580
exhaustive but yeah

708
00:29:44,039 --> 00:29:46,260
um okay so this was actually from the

709
00:29:46,260 --> 00:29:49,860
confirm the talk uh 1001 rce a tale of

710
00:29:49,860 --> 00:29:53,100
exploitation so that's the first real

711
00:29:53,100 --> 00:29:55,200
issue that was found using this

712
00:29:55,200 --> 00:29:57,960
methodology so it was with speep and

713
00:29:57,960 --> 00:30:00,480
it's a post out execution but what I

714
00:30:00,480 --> 00:30:01,919
really like about this one is that it's

715
00:30:01,919 --> 00:30:05,460
it was a blind rce first I was just

716
00:30:05,460 --> 00:30:08,520
trying if the ideas we had a wire

717
00:30:08,520 --> 00:30:10,919
working with internal log so by just

718
00:30:10,919 --> 00:30:12,919
having some PHP

719
00:30:12,919 --> 00:30:16,260
code so you do the classical payload to

720
00:30:16,260 --> 00:30:18,419
just have let's say a PHP info I just

721
00:30:18,419 --> 00:30:20,220
pasted this one all around and was

722
00:30:20,220 --> 00:30:22,380
waiting for it to three waiting for it

723
00:30:22,380 --> 00:30:24,960
to trigger and it was not really

724
00:30:24,960 --> 00:30:27,240
triggering so I had no output but at

725
00:30:27,240 --> 00:30:30,179
some point in the logs I was noticed

726
00:30:30,179 --> 00:30:33,720
that this reached with not unsanitized

727
00:30:33,720 --> 00:30:36,960
values an evil statement and so oh

728
00:30:36,960 --> 00:30:38,820
it did not trigger I saw nothing on the

729
00:30:38,820 --> 00:30:41,340
page but it's there and by digging a bit

730
00:30:41,340 --> 00:30:44,220
deeper I saw that my payload was being

731
00:30:44,220 --> 00:30:45,600
broken

732
00:30:45,600 --> 00:30:48,840
before reaching the sink and moreover it

733
00:30:48,840 --> 00:30:51,480
was done in a kind of asynchronous way

734
00:30:51,480 --> 00:30:54,360
so even if it was working I would have

735
00:30:54,360 --> 00:30:58,260
had no weight no just from my browser or

736
00:30:58,260 --> 00:31:01,380
birth proxy so it was a bit Hardy idea

737
00:31:01,380 --> 00:31:04,919
you'll get it really soon

738
00:31:04,919 --> 00:31:07,980
is the following so to the most first

739
00:31:07,980 --> 00:31:10,200
without snuffle Baggers so the way this

740
00:31:10,200 --> 00:31:13,380
was first found

741
00:31:13,380 --> 00:31:15,419
and then with snufflep I guess so the

742
00:31:15,419 --> 00:31:17,279
weight will have been easier

743
00:31:17,279 --> 00:31:20,340
so what you can see from here so small

744
00:31:20,340 --> 00:31:22,799
explanation uh on the top the source

745
00:31:22,799 --> 00:31:25,320
code we don't care on the top left is

746
00:31:25,320 --> 00:31:29,760
the PHP server on the top right is

747
00:31:29,760 --> 00:31:33,840
um the the netcat UDP server so the one

748
00:31:33,840 --> 00:31:35,820
that will recover all the log line we

749
00:31:35,820 --> 00:31:38,460
try to accelerate bottom left is our

750
00:31:38,460 --> 00:31:41,059
reverse shell or reverse command Handler

751
00:31:41,059 --> 00:31:44,720
and that's it

752
00:31:44,760 --> 00:31:45,659
foreign

753
00:31:45,659 --> 00:31:48,600
so we just set up an article with our

754
00:31:48,600 --> 00:31:51,360
payload we save

755
00:31:51,360 --> 00:31:55,799
so far you so

756
00:31:56,820 --> 00:32:00,020
I missed it

757
00:32:01,400 --> 00:32:05,220
[Music]

758
00:32:05,220 --> 00:32:07,140
you can see that it blasts a lot of log

759
00:32:07,140 --> 00:32:09,360
on the top right corner but still

760
00:32:09,360 --> 00:32:11,700
nothing on the bottom left corner so we

761
00:32:11,700 --> 00:32:13,860
just wait a bit and then we change the

762
00:32:13,860 --> 00:32:16,740
article status and at some point

763
00:32:16,740 --> 00:32:20,159
whoosh it triggered so we have our ID

764
00:32:20,159 --> 00:32:22,740
that just got sent because the payload

765
00:32:22,740 --> 00:32:25,320
worked and what you can see on the top

766
00:32:25,320 --> 00:32:28,620
right so here zoomed in is that okay we

767
00:32:28,620 --> 00:32:30,899
had some includes happening then we have

768
00:32:30,899 --> 00:32:33,179
we have we've had some evil statements

769
00:32:33,179 --> 00:32:36,179
and here my payload was first broken so

770
00:32:36,179 --> 00:32:38,039
that's why I did not triggered but

771
00:32:38,039 --> 00:32:40,200
nonetheless I was able to notice that

772
00:32:40,200 --> 00:32:42,539
something uh that was going on here and

773
00:32:42,539 --> 00:32:44,159
just later on the last line you see that

774
00:32:44,159 --> 00:32:46,080
system got executed but because this

775
00:32:46,080 --> 00:32:48,899
time the payload is not broken anymore

776
00:32:48,899 --> 00:32:53,959
and voila remote Constitution which

777
00:32:57,000 --> 00:32:59,480
thanks

778
00:33:01,020 --> 00:33:03,480
and now the demo reasonable package

779
00:33:03,480 --> 00:33:06,120
because it changed quite a lot so this

780
00:33:06,120 --> 00:33:08,159
is not exactly the main speed version

781
00:33:08,159 --> 00:33:10,559
because it was quite hard to set up so I

782
00:33:10,559 --> 00:33:13,500
just took the latest and reverted only

783
00:33:13,500 --> 00:33:16,740
the patch that was uh but to indicate

784
00:33:16,740 --> 00:33:20,039
these issues so here top right reverse

785
00:33:20,039 --> 00:33:23,100
command listener reverse listener bottom

786
00:33:23,100 --> 00:33:25,620
left we have the PHP and bottom right we

787
00:33:25,620 --> 00:33:28,019
have just the sniffle package slugs that

788
00:33:28,019 --> 00:33:30,299
were written to us.log I don't really

789
00:33:30,299 --> 00:33:33,899
know why in Earth that they were there

790
00:33:33,899 --> 00:33:35,940
and so here you can see that it's way

791
00:33:35,940 --> 00:33:37,140
more variables on the bottom right

792
00:33:37,140 --> 00:33:39,360
corner and what I want to show here is

793
00:33:39,360 --> 00:33:42,179
the way the payload was broken first so

794
00:33:42,179 --> 00:33:44,340
what we will see that when I change the

795
00:33:44,340 --> 00:33:45,179
status

796
00:33:45,179 --> 00:33:46,919
we still receive nothing because the

797
00:33:46,919 --> 00:33:49,140
command did not triggered

798
00:33:49,140 --> 00:33:51,899
but when I try to look for

799
00:33:51,899 --> 00:33:55,440
my canary value if I'm not struggling

800
00:33:55,440 --> 00:33:57,960
too much what we can see is everywhere

801
00:33:57,960 --> 00:34:00,299
it was triggered so here it's mostly in

802
00:34:00,299 --> 00:34:03,059
the function called typo but there is a

803
00:34:03,059 --> 00:34:06,659
few a few here right there you have eval

804
00:34:06,659 --> 00:34:09,899
code and the PHP code that you try to to

805
00:34:09,899 --> 00:34:11,099
evaluate

806
00:34:11,099 --> 00:34:13,080
and there should be a plate somewhere

807
00:34:13,080 --> 00:34:16,260
yeah right there and so this is the way

808
00:34:16,260 --> 00:34:18,300
the payload was broken and that's not

809
00:34:18,300 --> 00:34:20,580
triggering in the back end so point is

810
00:34:20,580 --> 00:34:22,139
just the me value for what I've had

811
00:34:22,139 --> 00:34:24,719
before just trying to

812
00:34:24,719 --> 00:34:27,678
simulate it again

813
00:34:27,719 --> 00:34:29,879
and with the right values we can see

814
00:34:29,879 --> 00:34:32,820
that we are still logging the issue but

815
00:34:32,820 --> 00:34:35,580
not blocking it so it still triggers

816
00:34:35,580 --> 00:34:38,359
just as usual

817
00:34:39,119 --> 00:34:40,820
foreign

818
00:34:40,820 --> 00:34:43,619
so that's it for the demo no more videos

819
00:34:43,619 --> 00:34:46,199
for today not for this specific

820
00:34:46,199 --> 00:34:48,480
conference at least

821
00:34:48,480 --> 00:34:52,080
uh so yep it worked uh did it work on

822
00:34:52,080 --> 00:34:55,099
our beloved hacking platform yep because

823
00:34:55,099 --> 00:34:57,780
PHP but the thing is really funny

824
00:34:57,780 --> 00:34:59,460
because it worked

825
00:34:59,460 --> 00:35:02,099
and worked again and during the cleanup

826
00:35:02,099 --> 00:35:04,500
phase because they were of course aware

827
00:35:04,500 --> 00:35:06,480
that we will that I would run some tests

828
00:35:06,480 --> 00:35:09,359
I reached out beforehand

829
00:35:09,359 --> 00:35:10,980
um during the tests when they were

830
00:35:10,980 --> 00:35:13,440
trying to clean everything

831
00:35:13,440 --> 00:35:15,540
it triggered again

832
00:35:15,540 --> 00:35:18,599
and again and so that just think about

833
00:35:18,599 --> 00:35:19,920
it you're trying to clean up your

834
00:35:19,920 --> 00:35:22,220
infrastructure you're trying to

835
00:35:22,220 --> 00:35:24,780
mitigate the issue and the impact of

836
00:35:24,780 --> 00:35:26,579
your you being compromised and while

837
00:35:26,579 --> 00:35:29,940
doing the cleanup you get turned again

838
00:35:29,940 --> 00:35:33,420
that's that's that hurts

839
00:35:33,420 --> 00:35:36,240
um that being said the road is long this

840
00:35:36,240 --> 00:35:38,880
is not a final final tool this is not an

841
00:35:38,880 --> 00:35:40,859
accomplishment this is just a strength

842
00:35:40,859 --> 00:35:42,900
to put one more brick in two hours this

843
00:35:42,900 --> 00:35:46,859
road that is export research we want to

844
00:35:46,859 --> 00:35:50,339
give this project and the approach we've

845
00:35:50,339 --> 00:35:54,300
done on it but uh it's it's just to

846
00:35:54,300 --> 00:35:56,760
encourage you to try to use different

847
00:35:56,760 --> 00:35:59,040
approaches or build on top of it not use

848
00:35:59,040 --> 00:36:01,800
it as is because we're still missing so

849
00:36:01,800 --> 00:36:02,940
many things

850
00:36:02,940 --> 00:36:05,339
and of course we are playing with some

851
00:36:05,339 --> 00:36:07,500
coolish PSP Frameworks but at some point

852
00:36:07,500 --> 00:36:09,480
we will not know that there is mortaling

853
00:36:09,480 --> 00:36:11,820
and not only mine but way more tools

854
00:36:11,820 --> 00:36:13,200
that are being developed of course we'll

855
00:36:13,200 --> 00:36:18,359
try to attack way more hardened uh PHP

856
00:36:18,359 --> 00:36:19,800
back ends

857
00:36:19,800 --> 00:36:20,940
kudos

858
00:36:20,940 --> 00:36:24,540
so who do we thank today first iroa that

859
00:36:24,540 --> 00:36:26,880
asks hey is it different from the ocean

860
00:36:26,880 --> 00:36:29,760
because that's the igniter of This

861
00:36:29,760 --> 00:36:32,480
research then of course the street

862
00:36:32,480 --> 00:36:34,880
Sergeant for maintaining safal Packers

863
00:36:34,880 --> 00:36:38,160
new soft for being the Entre meter

864
00:36:38,160 --> 00:36:40,680
because he just says you should pick to

865
00:36:40,680 --> 00:36:42,359
this person and he does that all the

866
00:36:42,359 --> 00:36:43,680
time and every time there is a good

867
00:36:43,680 --> 00:36:45,540
project that just take birth from it

868
00:36:45,540 --> 00:36:49,140
thanks to PHP of course saf to the staff

869
00:36:49,140 --> 00:36:52,079
from and Greg today because the two of

870
00:36:52,079 --> 00:36:54,359
them hosted us for the conference thanks

871
00:36:54,359 --> 00:36:56,099
to groom even though he's not there and

872
00:36:56,099 --> 00:36:57,599
of course sang field of view because

873
00:36:57,599 --> 00:36:59,940
without Community there is no point of

874
00:36:59,940 --> 00:37:02,880
giving talks and thanks man that is just

875
00:37:02,880 --> 00:37:04,560
right there coming even those who don't

876
00:37:04,560 --> 00:37:06,780
really care about security

877
00:37:06,780 --> 00:37:08,700
that's it if you have any question I'm

878
00:37:08,700 --> 00:37:11,099
more than happy to answer any of them

879
00:37:11,099 --> 00:37:13,120
thank you very much

880
00:37:13,120 --> 00:37:17,330
[Applause]

881
00:37:18,320 --> 00:37:21,000
thanks for the talk and for the the

882
00:37:21,000 --> 00:37:24,480
perfect timing so and the great demo we

883
00:37:24,480 --> 00:37:25,940
have time for a couple of questions

884
00:37:25,940 --> 00:37:28,619
commands remarks if some of you have

885
00:37:28,619 --> 00:37:32,000
question remark where is your end

886
00:37:32,099 --> 00:37:34,320
okay so I will start the time you think

887
00:37:34,320 --> 00:37:35,820
for the next question

888
00:37:35,820 --> 00:37:39,599
uh in your slide you mentioned PHP 7 and

889
00:37:39,599 --> 00:37:42,300
in your demo I saw php8 is there some

890
00:37:42,300 --> 00:37:44,579
burger or some problems it's not bug

891
00:37:44,579 --> 00:37:48,540
related so first I started with php8 so

892
00:37:48,540 --> 00:37:50,579
the really first first iteration and at

893
00:37:50,579 --> 00:37:53,220
some point I realized that hey the

894
00:37:53,220 --> 00:37:54,839
framework I want to attack does not

895
00:37:54,839 --> 00:37:58,800
support php8s so that sucked so I just

896
00:37:58,800 --> 00:38:01,520
start from scratch on PHP

897
00:38:01,520 --> 00:38:04,079
7.2426 I don't remember well and that's

898
00:38:04,079 --> 00:38:06,359
the main issue we were laying way too

899
00:38:06,359 --> 00:38:08,880
much on the current code base this is

900
00:38:08,880 --> 00:38:11,280
why the snufflepackers approach is way

901
00:38:11,280 --> 00:38:12,780
better because you just siled something

902
00:38:12,780 --> 00:38:15,660
and you take into account for all the

903
00:38:15,660 --> 00:38:18,900
code you publish the version switch and

904
00:38:18,900 --> 00:38:21,000
the dependency issues so it can work on

905
00:38:21,000 --> 00:38:23,820
even Legacy uh as far as I know stable

906
00:38:23,820 --> 00:38:28,040
package works up to PHP from php5 to 8

907
00:38:28,040 --> 00:38:30,540
and so the demo reasonable diggers has

908
00:38:30,540 --> 00:38:32,520
been done on php8 because at the latest

909
00:38:32,520 --> 00:38:35,720
I installed and the one for

910
00:38:35,720 --> 00:38:38,820
HP internal log are all using seven dot

911
00:38:38,820 --> 00:38:41,099
something because that's where we tweak

912
00:38:41,099 --> 00:38:42,180
to the code base

913
00:38:42,180 --> 00:38:46,260
okay thank you for the question comments

914
00:38:46,260 --> 00:38:48,480
don't be shine we have the great

915
00:38:48,480 --> 00:38:51,060
opportunity to be all in the same rule

916
00:38:51,060 --> 00:38:53,940
raise your hand up

917
00:38:53,940 --> 00:38:57,119
yes the first rule thank you hello thank

918
00:38:57,119 --> 00:39:00,359
you for your for uh for for your work

919
00:39:00,359 --> 00:39:01,320
um

920
00:39:01,320 --> 00:39:05,460
uh all the time you you try to log

921
00:39:05,460 --> 00:39:09,660
um to a distance server uh why this

922
00:39:09,660 --> 00:39:11,820
choice and why not uh they are directly

923
00:39:11,820 --> 00:39:15,500
logging into a file

924
00:39:15,960 --> 00:39:19,440
um I work a lot with asynchronous tasks

925
00:39:19,440 --> 00:39:22,140
so if I work inside a Docker I could try

926
00:39:22,140 --> 00:39:24,119
to have a custom setup to share a volume

927
00:39:24,119 --> 00:39:26,280
that will definitely work

928
00:39:26,280 --> 00:39:29,040
um but sometimes I want to have many

929
00:39:29,040 --> 00:39:31,440
furthers running on the cloud at the

930
00:39:31,440 --> 00:39:33,420
same time so if they can just all

931
00:39:33,420 --> 00:39:36,240
exfiltrates their findings at the same

932
00:39:36,240 --> 00:39:37,920
place and I can have one single point of

933
00:39:37,920 --> 00:39:40,460
Three Ages that's way more convenient

934
00:39:40,460 --> 00:39:43,560
and when you use the snuffery packets

935
00:39:43,560 --> 00:39:45,420
did you uh

936
00:39:45,420 --> 00:39:48,720
did you try to uh to uh to have this uh

937
00:39:48,720 --> 00:39:51,660
this asynchronous tasks uh to to work or

938
00:39:51,660 --> 00:39:53,460
no yep actually this little packages

939
00:39:53,460 --> 00:39:56,099
already supports syslog and with some

940
00:39:56,099 --> 00:39:58,260
specific configuration you can have them

941
00:39:58,260 --> 00:40:01,020
first with TCP UDP or pretty much any

942
00:40:01,020 --> 00:40:02,820
other protocol you like

943
00:40:02,820 --> 00:40:04,200
thank you

944
00:40:04,200 --> 00:40:06,119
my pleasure

945
00:40:06,119 --> 00:40:10,220
time for more question comments

946
00:40:11,760 --> 00:40:14,099
okay so I maybe have a last one uh

947
00:40:14,099 --> 00:40:16,200
because I'm curious you you try many

948
00:40:16,200 --> 00:40:18,599
many tools and and for you which one is

949
00:40:18,599 --> 00:40:21,420
the most useful for to make an attack in

950
00:40:21,420 --> 00:40:23,099
all the tool you used

951
00:40:23,099 --> 00:40:25,740
uh what do you mean amount among the

952
00:40:25,740 --> 00:40:27,599
tool I mean it's the same tool with

953
00:40:27,599 --> 00:40:29,460
various version of it yeah but in the

954
00:40:29,460 --> 00:40:31,859
time you you change this version of this

955
00:40:31,859 --> 00:40:34,800
piece of inode to curl or to do

956
00:40:34,800 --> 00:40:36,119
something else each time you change

957
00:40:36,119 --> 00:40:37,680
different stuff we see in the first part

958
00:40:37,680 --> 00:40:39,480
of tutorial you have many Improvement

959
00:40:39,480 --> 00:40:41,520
and you change and you discover new

960
00:40:41,520 --> 00:40:43,560
tools and something like that so which

961
00:40:43,560 --> 00:40:47,160
one for you is the best one you to use

962
00:40:47,160 --> 00:40:49,020
to my opinion the best tool is the one

963
00:40:49,020 --> 00:40:52,079
you master so there is no best tool I

964
00:40:52,079 --> 00:40:55,140
used to have a really dummy feather for

965
00:40:55,140 --> 00:40:57,720
web requests it was really doing things

966
00:40:57,720 --> 00:41:01,200
in a simpler really naive way but as I

967
00:41:01,200 --> 00:41:03,079
made the world code base I was able to

968
00:41:03,079 --> 00:41:05,280
change everything at the right place

969
00:41:05,280 --> 00:41:07,260
when I needed to so even though if it's

970
00:41:07,260 --> 00:41:10,140
it's not the perfect tool at all like

971
00:41:10,140 --> 00:41:13,020
it was actually not that great but if

972
00:41:13,020 --> 00:41:14,579
you're able to tweak it at the right

973
00:41:14,579 --> 00:41:16,859
time in no time then you can adapt it to

974
00:41:16,859 --> 00:41:18,900
every framework or specific use case and

975
00:41:18,900 --> 00:41:21,180
it's a huge time gain so make your own

976
00:41:21,180 --> 00:41:23,820
tools and build stuff yeah so thank you

977
00:41:23,820 --> 00:41:25,619
I think it's a good conclusion thank you

978
00:41:25,619 --> 00:41:26,570
la Luca

979
00:41:26,570 --> 00:41:31,119
[Applause]

