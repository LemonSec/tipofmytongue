1
00:00:03,620 --> 00:00:07,319
uh hi I'm Tristan I work as an incident

2
00:00:07,319 --> 00:00:09,780
responder for Exact Track and today I

3
00:00:09,780 --> 00:00:12,420
will try to learn how to reverse BPF in

4
00:00:12,420 --> 00:00:14,660
three minutes

5
00:00:14,660 --> 00:00:17,820
so this test subject will be BPF door a

6
00:00:17,820 --> 00:00:20,520
small passive implant discovered last

7
00:00:20,520 --> 00:00:23,520
year and used since 2018 by your Chinese

8
00:00:23,520 --> 00:00:27,240
actor to Target telecom companies

9
00:00:27,240 --> 00:00:29,939
when we reverse the small elf we find

10
00:00:29,939 --> 00:00:32,460
something like this it creates a raw

11
00:00:32,460 --> 00:00:35,460
socket it's called a set workout with a

12
00:00:35,460 --> 00:00:37,920
so8h filter with a buffer and then

13
00:00:37,920 --> 00:00:40,500
received packet and check something and

14
00:00:40,500 --> 00:00:42,260
execute commands

15
00:00:42,260 --> 00:00:45,239
so what the is BPF BPF is very

16
00:00:45,239 --> 00:00:48,480
clear packet filter it was used by TCP

17
00:00:48,480 --> 00:00:51,420
dump when you select support protocols

18
00:00:51,420 --> 00:00:52,860
Etc

19
00:00:52,860 --> 00:00:54,719
um what does it look like it does look

20
00:00:54,719 --> 00:00:58,440
like like uh two uh three bytes on a g

21
00:00:58,440 --> 00:01:01,559
world uh it means the op code a jump if

22
00:01:01,559 --> 00:01:04,159
false jump if true and a constant

23
00:01:04,159 --> 00:01:06,479
arguments there are not many of codes

24
00:01:06,479 --> 00:01:08,760
they are documented how do we reverse

25
00:01:08,760 --> 00:01:10,680
that we take the bytecode from the

26
00:01:10,680 --> 00:01:13,560
binary we dump it with this Merit and we

27
00:01:13,560 --> 00:01:15,240
reverse it and then we enjoy Network

28
00:01:15,240 --> 00:01:18,540
Studio passing or otherwise

29
00:01:18,540 --> 00:01:20,040
um

30
00:01:20,040 --> 00:01:23,400
hitting yourself with bytes

31
00:01:23,400 --> 00:01:26,340
so how to this disassemble this you can

32
00:01:26,340 --> 00:01:28,799
use Capstone the next Branch this

33
00:01:28,799 --> 00:01:30,960
symbols bytecode but sometimes we have

34
00:01:30,960 --> 00:01:33,119
to patch it because it does not under

35
00:01:33,119 --> 00:01:34,920
all the modes

36
00:01:34,920 --> 00:01:37,200
and after you have this awesome build it

37
00:01:37,200 --> 00:01:39,840
you have to look at only a textile it's

38
00:01:39,840 --> 00:01:41,700
not really interesting

39
00:01:41,700 --> 00:01:45,900
so we can use a guide rub which does not

40
00:01:45,900 --> 00:01:48,000
design summer debate code so we have to

41
00:01:48,000 --> 00:01:50,280
re-implement the processor which is

42
00:01:50,280 --> 00:01:52,320
something fun you can see some of the

43
00:01:52,320 --> 00:01:54,540
code down there which implements the msh

44
00:01:54,540 --> 00:01:56,960
instruction

45
00:01:57,360 --> 00:01:59,280
and afterwards it looked like this a lot

46
00:01:59,280 --> 00:02:01,680
much better than text

47
00:02:01,680 --> 00:02:04,500
but the advantage of gidra it has the

48
00:02:04,500 --> 00:02:05,520
compiler

49
00:02:05,520 --> 00:02:08,038
so we now have the raw structure of the

50
00:02:08,038 --> 00:02:09,060
program

51
00:02:09,060 --> 00:02:12,360
we can see here that it checks for some

52
00:02:12,360 --> 00:02:15,840
out coded values in the packet and for

53
00:02:15,840 --> 00:02:20,580
Magics like 7255 and 5 2 93.

54
00:02:20,580 --> 00:02:24,420
so if we reverse this in one minute it

55
00:02:24,420 --> 00:02:27,000
checks for free protocols UDP icmp and

56
00:02:27,000 --> 00:02:30,959
TCP and checks for two Magics one for

57
00:02:30,959 --> 00:02:34,260
UDP and icmp and another one for TCP

58
00:02:34,260 --> 00:02:37,800
protocols and if the packets matches

59
00:02:37,800 --> 00:02:39,360
these Magics it is passed to the

60
00:02:39,360 --> 00:02:40,560
processing Loop

61
00:02:40,560 --> 00:02:42,959
and the mirror can now continue to

62
00:02:42,959 --> 00:02:46,200
execute the attackers command

63
00:02:46,200 --> 00:02:51,239
so BPF is fun to reverse uh it's uh it

64
00:02:51,239 --> 00:02:53,640
is it's used almost everywhere if you

65
00:02:53,640 --> 00:02:55,140
want to use the BPF processor we

66
00:02:55,140 --> 00:02:57,239
published it as a pull request to a

67
00:02:57,239 --> 00:02:59,700
guide Raw and there is a paper on the

68
00:02:59,700 --> 00:03:01,500
energies on the complete analysis of the

69
00:03:01,500 --> 00:03:03,420
back door

70
00:03:03,420 --> 00:03:04,440
thank you

71
00:03:04,440 --> 00:03:07,629
[Applause]

