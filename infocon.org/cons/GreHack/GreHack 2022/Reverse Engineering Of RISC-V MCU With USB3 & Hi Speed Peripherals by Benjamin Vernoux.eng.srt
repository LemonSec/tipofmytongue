1
00:00:02,820 --> 00:00:07,140
okay so I will present your reverse

2
00:00:07,140 --> 00:00:10,440
engineering on Advanced microcontroller

3
00:00:10,440 --> 00:00:13,500
with high speed peripherals especially

4
00:00:13,500 --> 00:00:17,059
USB 3 super speed

5
00:00:18,060 --> 00:00:21,779
so let's introduce me again

6
00:00:21,779 --> 00:00:24,800
so yeah I work mainly on on

7
00:00:24,800 --> 00:00:26,539
firmware

8
00:00:26,539 --> 00:00:30,080
with open source software of course

9
00:00:30,080 --> 00:00:34,980
I worked on uh I created xpi air zero L2

10
00:00:34,980 --> 00:00:36,239
and Mini

11
00:00:36,239 --> 00:00:40,219
few years ago which still are available

12
00:00:40,219 --> 00:00:44,940
and I worked with Nikola alberly on idra

13
00:00:44,940 --> 00:00:48,300
bus V1 with some extension like idrion

14
00:00:48,300 --> 00:00:49,920
FC V1 V2

15
00:00:49,920 --> 00:00:52,620
and the new hardware I will present you

16
00:00:52,620 --> 00:00:55,320
is idra USB 3

17
00:00:55,320 --> 00:00:58,800
and also I presented a few weeks ago

18
00:00:58,800 --> 00:01:02,460
with Nikola idra sea lisen which is

19
00:01:02,460 --> 00:01:04,440
special Hardware

20
00:01:04,440 --> 00:01:09,500
for a foresight Channel attacks

21
00:01:09,600 --> 00:01:11,400
Okay so

22
00:01:11,400 --> 00:01:13,500
so let's start

23
00:01:13,500 --> 00:01:16,920
and why this research engineering

24
00:01:16,920 --> 00:01:18,240
project

25
00:01:18,240 --> 00:01:21,840
so uh like everyone know since a few

26
00:01:21,840 --> 00:01:23,580
years we have some cheap shortage

27
00:01:23,580 --> 00:01:27,619
problems on a lot of or even all um

28
00:01:27,619 --> 00:01:32,580
microcontrollers so I was I was

29
00:01:32,580 --> 00:01:36,420
searching something which can be found

30
00:01:36,420 --> 00:01:39,840
okay something available and as everyone

31
00:01:39,840 --> 00:01:42,119
know which five is quite interesting

32
00:01:42,119 --> 00:01:44,119
because it's open Hardware

33
00:01:44,119 --> 00:01:48,079
so uh I I say

34
00:01:48,079 --> 00:01:51,000
what what we can't find with interesting

35
00:01:51,000 --> 00:01:53,119
features different than

36
00:01:53,119 --> 00:01:56,220
stm32 for example or an experiment

37
00:01:56,220 --> 00:01:58,200
called controller as they have always

38
00:01:58,200 --> 00:02:00,299
the same type of peripherals and

39
00:02:00,299 --> 00:02:02,640
everything is always the same on

40
00:02:02,640 --> 00:02:04,020
microcontroller

41
00:02:04,020 --> 00:02:06,659
so let's see what I have found

42
00:02:06,659 --> 00:02:14,400
so it was the wch CH 569 so it's uh it's

43
00:02:14,400 --> 00:02:16,739
known by a Chinese company

44
00:02:16,739 --> 00:02:20,580
which was owned by a Winship Ed so it's

45
00:02:20,580 --> 00:02:23,700
not working on because uh

46
00:02:23,700 --> 00:02:26,459
it's uh everything is in Chinese you

47
00:02:26,459 --> 00:02:27,900
would see after

48
00:02:27,900 --> 00:02:30,000
okay so the interesting point is the

49
00:02:30,000 --> 00:02:35,280
risk 5 in 32 bite with 120 megahertz so

50
00:02:35,280 --> 00:02:37,580
it's quite fast

51
00:02:37,580 --> 00:02:40,879
it's use a proprietary risk 5

52
00:02:40,879 --> 00:02:43,140
architecture but it's very similar to

53
00:02:43,140 --> 00:02:47,580
the open one with iMac so there is

54
00:02:47,580 --> 00:02:49,640
basically an integral restriction

55
00:02:49,640 --> 00:02:51,860
integer multiplication and division

56
00:02:51,860 --> 00:02:54,420
there it supports also Atomic

57
00:02:54,420 --> 00:02:56,180
restriction and compressed construction

58
00:02:56,180 --> 00:02:58,319
which is quite interesting to have

59
00:02:58,319 --> 00:03:01,980
compact code and a smaller binary

60
00:03:01,980 --> 00:03:04,260
so the interesting point is a fast

61
00:03:04,260 --> 00:03:06,900
interrupt which is a driven by Hardware

62
00:03:06,900 --> 00:03:10,379
to save and restore the registers using

63
00:03:10,379 --> 00:03:13,800
a non-standard attribute in GCC as they

64
00:03:13,800 --> 00:03:15,680
have done a custom

65
00:03:15,680 --> 00:03:18,300
GCC uh

66
00:03:18,300 --> 00:03:21,060
GCC Fork which is not open source today

67
00:03:21,060 --> 00:03:24,840
so we can insist on that as they must

68
00:03:24,840 --> 00:03:26,220
provide

69
00:03:26,220 --> 00:03:28,980
it's another point so it's a result of

70
00:03:28,980 --> 00:03:32,159
60 byte systick so it's a cyclic rate so

71
00:03:32,159 --> 00:03:34,739
it's also very interesting to count the

72
00:03:34,739 --> 00:03:36,239
cycles

73
00:03:36,239 --> 00:03:38,640
so now let's see uh the interesting

74
00:03:38,640 --> 00:03:42,920
point today uh is mainly USB 3 and USB 2

75
00:03:42,920 --> 00:03:46,440
file and integrated so it's quite it's

76
00:03:46,440 --> 00:03:48,420
quite rare to see such feature

77
00:03:48,420 --> 00:03:51,360
especially it really go to 5 gigabits

78
00:03:51,360 --> 00:03:54,659
per second on a microcontroller which is

79
00:03:54,659 --> 00:03:56,760
uh quite low power

80
00:03:56,760 --> 00:04:00,480
and we have also something we are I have

81
00:04:00,480 --> 00:04:02,879
never seen before in the microcontroller

82
00:04:02,879 --> 00:04:06,540
as we see often search in the fpga it's

83
00:04:06,540 --> 00:04:09,780
a service with a built-in fee also which

84
00:04:09,780 --> 00:04:13,980
can go up to 1 and 20 gigabit per second

85
00:04:13,980 --> 00:04:16,680
so it's quite fast and interesting to

86
00:04:16,680 --> 00:04:19,560
have such in microcontroller and we have

87
00:04:19,560 --> 00:04:21,358
also standard peripherals which are

88
00:04:21,358 --> 00:04:24,500
quite fast like SPI which

89
00:04:24,500 --> 00:04:28,800
exceeds 5 5 tme megahertz and you are

90
00:04:28,800 --> 00:04:30,900
too so quite fast

91
00:04:30,900 --> 00:04:32,880
and you have option to have ethernet

92
00:04:32,880 --> 00:04:34,560
Mark with gigabit

93
00:04:34,560 --> 00:04:36,660
but external fee

94
00:04:36,660 --> 00:04:39,360
and another amazing things is a

95
00:04:39,360 --> 00:04:41,540
high-speed parallel interface

96
00:04:41,540 --> 00:04:44,960
hspi which can go up to

97
00:04:44,960 --> 00:04:48,180
3.8 gigabit per second with a

98
00:04:48,180 --> 00:04:49,800
bidirectional bus

99
00:04:49,800 --> 00:04:53,940
which can be configured to 8 16 or 32

100
00:04:53,940 --> 00:04:55,080
bits

101
00:04:55,080 --> 00:04:57,540
so it's a quite amazing things also

102
00:04:57,540 --> 00:05:02,419
mainly to interface with external uh

103
00:05:02,419 --> 00:05:04,620
external world

104
00:05:04,620 --> 00:05:07,380
mainly fpga because it's it's quite

105
00:05:07,380 --> 00:05:09,240
custom

106
00:05:09,240 --> 00:05:11,820
so we have also interesting point is emm

107
00:05:11,820 --> 00:05:15,360
CSD card sdio which go up to not far

108
00:05:15,360 --> 00:05:18,900
than 100 megahertz and 8 bit

109
00:05:18,900 --> 00:05:21,720
and also I don't think about that but

110
00:05:21,720 --> 00:05:25,199
Nicola the representation it has also

111
00:05:25,199 --> 00:05:27,840
encrypt core with sm4 which is quite

112
00:05:27,840 --> 00:05:32,419
unique and Aus of course

113
00:05:33,230 --> 00:05:34,680
[Music]

114
00:05:34,680 --> 00:05:40,199
so let's see uh oh it started

115
00:05:40,199 --> 00:05:43,680
so yeah when I started to check that

116
00:05:43,680 --> 00:05:47,220
that MCU in January and in fact even

117
00:05:47,220 --> 00:05:50,880
before I was starting to check this

118
00:05:50,880 --> 00:05:52,400
amazing chip

119
00:05:52,400 --> 00:05:55,620
there was no a new one official Dev

120
00:05:55,620 --> 00:05:57,900
board available because all is in

121
00:05:57,900 --> 00:05:59,880
Chinese you see

122
00:05:59,880 --> 00:06:02,100
and there also the specification is

123
00:06:02,100 --> 00:06:04,560
quite interesting if you can decrypt

124
00:06:04,560 --> 00:06:07,320
such mess so yes it's like that it's

125
00:06:07,320 --> 00:06:10,259
full Chinese so maybe I should have

126
00:06:10,259 --> 00:06:13,139
learned Mandarin I don't know

127
00:06:13,139 --> 00:06:15,120
so let's design the board because we

128
00:06:15,120 --> 00:06:17,639
can't we cannot have anything

129
00:06:17,639 --> 00:06:19,139
okay

130
00:06:19,139 --> 00:06:22,979
so I will do my own board and also add

131
00:06:22,979 --> 00:06:25,800
some convenient things because there you

132
00:06:25,800 --> 00:06:29,340
see it's not the best and it's quite big

133
00:06:29,340 --> 00:06:32,340
so what we what I do like always I'm

134
00:06:32,340 --> 00:06:35,220
using a key card design tool which is a

135
00:06:35,220 --> 00:06:38,819
full open source and very nice uh to

136
00:06:38,819 --> 00:06:41,100
design some PCB and schematic like we

137
00:06:41,100 --> 00:06:42,060
see there

138
00:06:42,060 --> 00:06:46,860
so I I started by a Pog evaluation with

139
00:06:46,860 --> 00:06:49,620
four layer PCB because it's monetary for

140
00:06:49,620 --> 00:06:51,419
USB 3 or 3s

141
00:06:51,419 --> 00:06:55,020
to have a good signal Integrity because

142
00:06:55,020 --> 00:06:59,280
it's quite very fast so you cannot do

143
00:06:59,280 --> 00:07:02,160
that on two layers as you need also

144
00:07:02,160 --> 00:07:04,500
ambulance matching we will see that

145
00:07:04,500 --> 00:07:05,699
later

146
00:07:05,699 --> 00:07:07,680
so what I do on this reference design

147
00:07:07,680 --> 00:07:11,300
which was done in alchem okay

148
00:07:11,300 --> 00:07:16,199
as a keycard 6 even 5 I think I just

149
00:07:16,199 --> 00:07:18,360
converted the schematic

150
00:07:18,360 --> 00:07:23,280
there it's also by and I change a lot of

151
00:07:23,280 --> 00:07:25,800
things but I converted it it was quite

152
00:07:25,800 --> 00:07:28,919
nice importing and just replace some uh

153
00:07:28,919 --> 00:07:31,319
something which was not not required

154
00:07:31,319 --> 00:07:34,400
like a dcdc step down converter

155
00:07:34,400 --> 00:07:37,860
1.2 volts I remove it because it it was

156
00:07:37,860 --> 00:07:40,800
not required I don't know why they added

157
00:07:40,800 --> 00:07:44,400
but I replayed some dcdc step down

158
00:07:44,400 --> 00:07:48,739
converter by some low noise

159
00:07:51,380 --> 00:07:54,599
to to have a best

160
00:07:54,599 --> 00:07:58,380
the cleanest possible power supply

161
00:07:58,380 --> 00:08:01,520
and also use the best possible Crystal

162
00:08:01,520 --> 00:08:05,039
because it drives the USB 3 service and

163
00:08:05,039 --> 00:08:07,500
all speed bus and it's always better to

164
00:08:07,500 --> 00:08:10,160
have something clean

165
00:08:10,440 --> 00:08:14,699
okay so let's check the first board

166
00:08:14,699 --> 00:08:18,419
like you see the first board was done at

167
00:08:18,419 --> 00:08:20,580
the glcpcb

168
00:08:20,580 --> 00:08:25,139
so using their Ambience matching glc's

169
00:08:25,139 --> 00:08:26,930
7628

170
00:08:26,930 --> 00:08:28,620
[Music]

171
00:08:28,620 --> 00:08:30,780
and what was the challenge was to match

172
00:08:30,780 --> 00:08:32,458
the differential impedance of USB

173
00:08:32,458 --> 00:08:33,779
interface

174
00:08:33,779 --> 00:08:37,020
that we can see there USB 3 usb2

175
00:08:37,020 --> 00:08:39,479
everything is there

176
00:08:39,479 --> 00:08:43,380
we see as we said this also is 100 ohm

177
00:08:43,380 --> 00:08:46,020
and patents too much so it's quite short

178
00:08:46,020 --> 00:08:48,779
so it's not really big issue

179
00:08:48,779 --> 00:08:52,680
okay and at the same time lengths the

180
00:08:52,680 --> 00:08:55,200
match of the trace for the HSPA

181
00:08:55,200 --> 00:08:56,339
connector

182
00:08:56,339 --> 00:09:01,580
there so because this bus can go up to

183
00:09:01,580 --> 00:09:03,720
120 megahertz

184
00:09:03,720 --> 00:09:07,620
with 32 bits so so it should be a

185
00:09:07,620 --> 00:09:11,220
as best as possible so there we we see a

186
00:09:11,220 --> 00:09:12,680
thermal camera

187
00:09:12,680 --> 00:09:16,200
a photo to check what happens with cell

188
00:09:16,200 --> 00:09:20,160
Lu is quite odd about 40 degrees but the

189
00:09:20,160 --> 00:09:23,519
MCU like you see 33 degrees

190
00:09:23,519 --> 00:09:27,720
so it when we're running at at USB 5

191
00:09:27,720 --> 00:09:31,080
super speed at maximum data rate so it's

192
00:09:31,080 --> 00:09:35,640
quite cold 23 degrees when you have went

193
00:09:35,640 --> 00:09:38,220
25 degrees

194
00:09:38,220 --> 00:09:41,459
temperature okay

195
00:09:41,459 --> 00:09:43,440
so let's continue with the secondary

196
00:09:43,440 --> 00:09:47,519
Direction so there uh the the objectives

197
00:09:47,519 --> 00:09:50,160
the goal was to miniaturize the board

198
00:09:50,160 --> 00:09:53,040
and to add more features like you see so

199
00:09:53,040 --> 00:09:55,380
different steps so full redesign from

200
00:09:55,380 --> 00:09:57,899
scratch another board is six by six

201
00:09:57,899 --> 00:10:00,660
centimeters we stop malpin and bottom

202
00:10:00,660 --> 00:10:02,760
female pins like we see so it's very

203
00:10:02,760 --> 00:10:04,380
convenient

204
00:10:04,380 --> 00:10:06,360
to connect two boards together and to

205
00:10:06,360 --> 00:10:08,459
communicate with two boards we'll see

206
00:10:08,459 --> 00:10:09,420
after

207
00:10:09,420 --> 00:10:13,800
and there we have a SPI for example uart

208
00:10:13,800 --> 00:10:17,640
Amazon gpio and you have turns on on a

209
00:10:17,640 --> 00:10:19,980
possibility to measure the current and

210
00:10:19,980 --> 00:10:21,180
things like that

211
00:10:21,180 --> 00:10:25,860
or even to reset the the CPU there

212
00:10:25,860 --> 00:10:30,240
okay so we see the back and we see the

213
00:10:30,240 --> 00:10:32,940
final the first board

214
00:10:32,940 --> 00:10:35,100
okay

215
00:10:35,100 --> 00:10:37,500
which was working your fine at first

216
00:10:37,500 --> 00:10:39,740
time

217
00:10:40,560 --> 00:10:44,519
so we know we see the third iteration

218
00:10:44,519 --> 00:10:48,060
so it's mainly the video USB 3 like like

219
00:10:48,060 --> 00:10:49,440
it exists today

220
00:10:49,440 --> 00:10:51,899
so what I've done I have done also some

221
00:10:51,899 --> 00:10:55,380
optimization some improvements mainly on

222
00:10:55,380 --> 00:10:59,160
on ESD as you know if you have some ESD

223
00:10:59,160 --> 00:11:02,220
you can kill the CPU so I like to have

224
00:11:02,220 --> 00:11:05,240
military grade things

225
00:11:05,240 --> 00:11:09,120
yes it's more than a 15 kilovolt

226
00:11:09,120 --> 00:11:12,060
protection there and also there on the

227
00:11:12,060 --> 00:11:16,140
USB the vbsb is the power from USB

228
00:11:16,140 --> 00:11:18,360
so there is no risk to damage your

229
00:11:18,360 --> 00:11:21,360
chipset when you connect your USB cable

230
00:11:21,360 --> 00:11:24,600
inside I I have also changed some

231
00:11:24,600 --> 00:11:27,240
buttons to a more accessible

232
00:11:27,240 --> 00:11:30,420
on the border and I have adds a lot of

233
00:11:30,420 --> 00:11:33,540
ground and it's very convenient to to

234
00:11:33,540 --> 00:11:35,700
plug a logic analyzer so you can solder

235
00:11:35,700 --> 00:11:39,000
some pin there and you can spy all the

236
00:11:39,000 --> 00:11:41,100
all the PIN

237
00:11:41,100 --> 00:11:45,060
okay so the final board is there

238
00:11:45,060 --> 00:11:48,480
it's one produced today so like you see

239
00:11:48,480 --> 00:11:51,130
it was finished in a end of May

240
00:11:51,130 --> 00:11:53,540
[Music]

241
00:11:53,540 --> 00:11:57,540
so let's see a bit pin assignment

242
00:11:57,540 --> 00:12:00,540
so like you see there is huge pin there

243
00:12:00,540 --> 00:12:05,040
on G1 it was a 32-bit bus which which

244
00:12:05,040 --> 00:12:08,519
can also be configured as sp-i-1

245
00:12:08,519 --> 00:12:11,339
if you don't use some features

246
00:12:11,339 --> 00:12:15,420
on a you can use both at same time

247
00:12:15,420 --> 00:12:18,839
you have also the third s there

248
00:12:18,839 --> 00:12:22,440
you have SPI and we have some current

249
00:12:22,440 --> 00:12:25,980
module mentioned there poor lead reset

250
00:12:25,980 --> 00:12:28,160
button and the USB 3 connectors

251
00:12:28,160 --> 00:12:29,279
[Music]

252
00:12:29,279 --> 00:12:32,940
some jumper also with user button to be

253
00:12:32,940 --> 00:12:36,019
configured by software

254
00:12:36,240 --> 00:12:38,640
okay

255
00:12:38,640 --> 00:12:43,260
so let's start the hard part

256
00:12:43,260 --> 00:12:46,139
it's reverse engineering as I know a lot

257
00:12:46,139 --> 00:12:49,500
of you like to reverse engineering stuff

258
00:12:49,500 --> 00:12:52,200
so oh it starts it starts with that mess

259
00:12:52,200 --> 00:12:54,839
or in Mandarin like you see

260
00:12:54,839 --> 00:12:57,180
oh yes it's very interesting we don't

261
00:12:57,180 --> 00:12:59,579
know we don't understand anything just

262
00:12:59,579 --> 00:13:02,639
some keywords USB 3 okay it's a full

263
00:13:02,639 --> 00:13:05,760
spec there of the USB 3 you know one

264
00:13:05,760 --> 00:13:09,300
page the third s is the same and what

265
00:13:09,300 --> 00:13:11,519
they have done after because there is a

266
00:13:11,519 --> 00:13:15,420
lot of complaint by some user like me

267
00:13:15,420 --> 00:13:18,720
there was right an English data sheet

268
00:13:18,720 --> 00:13:21,180
wow very nice it's just a translation

269
00:13:21,180 --> 00:13:24,120
nothing more and you see please refer to

270
00:13:24,120 --> 00:13:27,000
and call the provided to routine library

271
00:13:27,000 --> 00:13:29,100
for specific application

272
00:13:29,100 --> 00:13:31,620
so what they say there it's only blob

273
00:13:31,620 --> 00:13:35,459
everywhere and no any documentation

274
00:13:35,459 --> 00:13:39,000
uh no details this is fine okay like

275
00:13:39,000 --> 00:13:40,920
sales dog

276
00:13:40,920 --> 00:13:44,519
so no start let's start that part

277
00:13:44,519 --> 00:13:47,339
so all to reverse engineering risk five

278
00:13:47,339 --> 00:13:49,560
and what are the tools

279
00:13:49,560 --> 00:13:52,620
so far there is Jeep comp the compare

280
00:13:52,620 --> 00:13:55,620
error never tried that because it's a

281
00:13:55,620 --> 00:13:58,380
evaluation version is quite Limited

282
00:13:58,380 --> 00:14:01,860
we have idea Pro like you know everyone

283
00:14:01,860 --> 00:14:06,060
but risk five support is quite limited

284
00:14:06,060 --> 00:14:08,040
there is not a compiler

285
00:14:08,040 --> 00:14:10,920
so it's a major point to reverse

286
00:14:10,920 --> 00:14:13,620
something because they as the objective

287
00:14:13,620 --> 00:14:16,500
is not just reverse but to rewrite the

288
00:14:16,500 --> 00:14:19,019
code so we need also to extract

289
00:14:19,019 --> 00:14:19,320
something

290
00:14:19,320 --> 00:14:20,459
[Music]

291
00:14:20,459 --> 00:14:23,700
so free alternative supporting risk 5 so

292
00:14:23,700 --> 00:14:26,700
radar too like everyone know but what's

293
00:14:26,700 --> 00:14:27,779
the problem

294
00:14:27,779 --> 00:14:29,820
not the compiler

295
00:14:29,820 --> 00:14:33,200
okay so the last solution great guidra

296
00:14:33,200 --> 00:14:36,240
11 the 10

297
00:14:36,240 --> 00:14:38,820
and its support receive the compiler so

298
00:14:38,820 --> 00:14:41,220
it's quite amazing and it's fully open

299
00:14:41,220 --> 00:14:45,420
source and it's it's created by NSA like

300
00:14:45,420 --> 00:14:48,420
everyone know since few years no

301
00:14:48,420 --> 00:14:51,420
so we have an extract of L floated and

302
00:14:51,420 --> 00:14:52,440
you see

303
00:14:52,440 --> 00:14:57,860
the code is quite nice in a pseudo say

304
00:14:58,740 --> 00:15:01,500
so for the first reverse engineering

305
00:15:01,500 --> 00:15:04,260
will be focused on Saturdays so it's a

306
00:15:04,260 --> 00:15:07,199
serializer the serializer

307
00:15:07,199 --> 00:15:09,360
it's amazing because it's only two

308
00:15:09,360 --> 00:15:12,420
Warriors and it's quite robust

309
00:15:12,420 --> 00:15:15,899
okay and what we can found online

310
00:15:15,899 --> 00:15:19,459
it's just someone we have to do a clown

311
00:15:19,459 --> 00:15:23,699
of the the repository which disappeared

312
00:15:23,699 --> 00:15:25,860
former wch

313
00:15:25,860 --> 00:15:28,019
because they are examples they remove

314
00:15:28,019 --> 00:15:30,899
the service I don't know why there was

315
00:15:30,899 --> 00:15:32,699
probably something they don't want to to

316
00:15:32,699 --> 00:15:34,260
show to everyone

317
00:15:34,260 --> 00:15:36,959
so what to do is open source everything

318
00:15:36,959 --> 00:15:40,320
and remove this creepy blob so

319
00:15:40,320 --> 00:15:43,199
statically the the provide and you don't

320
00:15:43,199 --> 00:15:44,880
know what happens inside

321
00:15:44,880 --> 00:15:47,160
and also it's quite limited we will see

322
00:15:47,160 --> 00:15:50,519
after so support as well as the

323
00:15:50,519 --> 00:15:52,199
objective is to support differential

324
00:15:52,199 --> 00:15:55,680
speed and even improve the driver and to

325
00:15:55,680 --> 00:15:57,779
have it fully open source

326
00:15:57,779 --> 00:16:02,100
so let's start with auto reverse

327
00:16:02,100 --> 00:16:06,120
with risk five so first you can you you

328
00:16:06,120 --> 00:16:08,820
have a leap server desk blob

329
00:16:08,820 --> 00:16:12,000
you can start like that and you open it

330
00:16:12,000 --> 00:16:14,519
and you search status dot o for example

331
00:16:14,519 --> 00:16:17,040
and you have the function okay you just

332
00:16:17,040 --> 00:16:20,880
have the the name and there like you can

333
00:16:20,880 --> 00:16:25,100
see so the Eric's in it for example

334
00:16:25,100 --> 00:16:27,540
code sir

335
00:16:27,540 --> 00:16:30,480
but mainly uh it's full of register and

336
00:16:30,480 --> 00:16:32,880
you don't know what happens there it's

337
00:16:32,880 --> 00:16:35,639
it's a main frustration when you see

338
00:16:35,639 --> 00:16:36,779
such

339
00:16:36,779 --> 00:16:40,100
so let's start and

340
00:16:40,100 --> 00:16:44,839
in my case I took the elf I rebuilt lib

341
00:16:44,839 --> 00:16:48,779
and with different uh

342
00:16:48,779 --> 00:16:51,660
links everything to the valve and I

343
00:16:51,660 --> 00:16:54,779
started to reverse so first problem is

344
00:16:54,779 --> 00:16:57,839
gidra is not perfect okay why because

345
00:16:57,839 --> 00:17:02,100
sometimes it means some crucial steps

346
00:17:02,100 --> 00:17:05,599
like this one you see ah it's not there

347
00:17:05,599 --> 00:17:09,119
there's no 57 there access

348
00:17:09,119 --> 00:17:11,640
so what happens it's a missing a

349
00:17:11,640 --> 00:17:13,079
peripheral access

350
00:17:13,079 --> 00:17:15,240
and such is quite monetary because you

351
00:17:15,240 --> 00:17:16,980
cannot do other access after that

352
00:17:16,980 --> 00:17:19,500
because it's like an unlock of the

353
00:17:19,500 --> 00:17:20,760
peripheral

354
00:17:20,760 --> 00:17:22,040
so okay

355
00:17:22,040 --> 00:17:26,640
so we we see that if you read carefully

356
00:17:26,640 --> 00:17:30,000
the SMB to this assembly code you can

357
00:17:30,000 --> 00:17:31,940
understand some time

358
00:17:31,940 --> 00:17:36,840
to say code is not perfect okay so we'll

359
00:17:36,840 --> 00:17:41,700
see now how to avoid that this this this

360
00:17:41,700 --> 00:17:43,740
crazy bug because you can miss a lot of

361
00:17:43,740 --> 00:17:46,860
access there there was only one that is

362
00:17:46,860 --> 00:17:48,780
quite random

363
00:17:48,780 --> 00:17:53,280
so the magic come with SVD loader as I

364
00:17:53,280 --> 00:17:55,320
don't know if you know it but it was

365
00:17:55,320 --> 00:17:58,400
originally for air

366
00:17:58,400 --> 00:18:00,080
airm

367
00:18:00,080 --> 00:18:03,720
microprocessor it it just charges sdwbd

368
00:18:03,720 --> 00:18:06,240
system view description

369
00:18:06,240 --> 00:18:09,600
so fortunately we have one it was iron

370
00:18:09,600 --> 00:18:12,600
in Moon River Studio community

371
00:18:12,600 --> 00:18:15,299
and it provides a lot of interesting

372
00:18:15,299 --> 00:18:18,179
things like you will see you have a lot

373
00:18:18,179 --> 00:18:21,360
of peripherals which are we are met so

374
00:18:21,360 --> 00:18:24,660
that will help us a bit even USB super

375
00:18:24,660 --> 00:18:26,880
speed but it's quite basic

376
00:18:26,880 --> 00:18:30,000
okay we will focus on USB super speed

377
00:18:30,000 --> 00:18:32,940
for USB 3 and third s you see there is

378
00:18:32,940 --> 00:18:33,900
also

379
00:18:33,900 --> 00:18:36,240
some range

380
00:18:36,240 --> 00:18:37,980
so after that

381
00:18:37,980 --> 00:18:41,100
what we have now so before we add such

382
00:18:41,100 --> 00:18:43,200
Mass

383
00:18:43,200 --> 00:18:47,340
um No in fact this one is a fixed

384
00:18:47,340 --> 00:18:48,980
you see the peripheral access

385
00:18:48,980 --> 00:18:50,640
[Music]

386
00:18:50,640 --> 00:18:55,380
there and I apply the the swed

387
00:18:55,380 --> 00:18:57,960
and there we have clearly something more

388
00:18:57,960 --> 00:19:00,419
interesting with peripherals with safe

389
00:19:00,419 --> 00:19:01,620
access

390
00:19:01,620 --> 00:19:04,799
with all the data and we see even a

391
00:19:04,799 --> 00:19:08,520
service analogy analog compile okay so

392
00:19:08,520 --> 00:19:11,039
the such things need to be reversed also

393
00:19:11,039 --> 00:19:13,620
because they don't provide any any

394
00:19:13,620 --> 00:19:15,510
things like about that

395
00:19:15,510 --> 00:19:18,660
[Music]

396
00:19:19,860 --> 00:19:22,020
so we will continue the reverse

397
00:19:22,020 --> 00:19:24,539
engineering on this small function that

398
00:19:24,539 --> 00:19:27,740
now is more clear as we see some access

399
00:19:27,740 --> 00:19:30,539
and the out part will be to read the

400
00:19:30,539 --> 00:19:32,880
data sheet not the datasheet because the

401
00:19:32,880 --> 00:19:34,799
original thing in the data sheet the

402
00:19:34,799 --> 00:19:36,480
header because they have provided some

403
00:19:36,480 --> 00:19:40,340
errors and we can reverse all that mess

404
00:19:40,340 --> 00:19:44,100
and to finally have this clean code at

405
00:19:44,100 --> 00:19:44,880
the end

406
00:19:44,880 --> 00:19:49,760
which an event some improvement because

407
00:19:49,760 --> 00:19:52,799
there we have a

408
00:19:52,799 --> 00:19:56,400
okay we see clearly what what happens in

409
00:19:56,400 --> 00:19:59,539
the third s control

410
00:19:59,539 --> 00:20:03,419
even there are we we know that it's a

411
00:20:03,419 --> 00:20:06,059
serious parallel we wait it's ready when

412
00:20:06,059 --> 00:20:08,780
it's configured

413
00:20:09,120 --> 00:20:12,360
okay so now let's do the same for the TX

414
00:20:12,360 --> 00:20:14,940
so the transmission

415
00:20:14,940 --> 00:20:17,580
so it's the same process reverse again

416
00:20:17,580 --> 00:20:21,960
and we reverse that x value to something

417
00:20:21,960 --> 00:20:25,620
more clear and even to as we know

418
00:20:25,620 --> 00:20:27,960
understand how it works

419
00:20:27,960 --> 00:20:30,720
okay so if you reset link reset and

420
00:20:30,720 --> 00:20:32,340
everything is quite clear

421
00:20:32,340 --> 00:20:35,880
fortunately because they have such

422
00:20:35,880 --> 00:20:39,840
Define the the avoid to remove them so

423
00:20:39,840 --> 00:20:43,200
it helped me a lot only this one is

424
00:20:43,200 --> 00:20:45,240
undocumented

425
00:20:45,240 --> 00:20:48,059
so fortunately I don't need to change it

426
00:20:48,059 --> 00:20:50,400
to change the speed we see

427
00:20:50,400 --> 00:20:54,120
after the the parallel frequency it's

428
00:20:54,120 --> 00:20:59,520
what I had as we change the the third

429
00:20:59,520 --> 00:21:00,900
speed

430
00:21:00,900 --> 00:21:02,820
to different frequency which was not

431
00:21:02,820 --> 00:21:04,620
possible with The Blob

432
00:21:04,620 --> 00:21:07,020
so there you see this as the spll flag

433
00:21:07,020 --> 00:21:09,480
which is a parameter and we can

434
00:21:09,480 --> 00:21:13,940
configure the third s from 180

435
00:21:13,940 --> 00:21:18,260
megabits per second up to one and 1.4

436
00:21:18,260 --> 00:21:21,480
gigabits even if it's out of spec it

437
00:21:21,480 --> 00:21:22,500
works

438
00:21:22,500 --> 00:21:25,260
so you see I I did also during the

439
00:21:25,260 --> 00:21:27,120
beginning a code Improvement to wait

440
00:21:27,120 --> 00:21:28,500
takes is ready

441
00:21:28,500 --> 00:21:30,720
at the end of the configuration because

442
00:21:30,720 --> 00:21:34,559
you can't have some erratic bugs after

443
00:21:34,559 --> 00:21:37,200
that if you don't wait and you try to

444
00:21:37,200 --> 00:21:41,120
send some data

445
00:21:41,400 --> 00:21:44,159
so there we we reverse also so the way

446
00:21:44,159 --> 00:21:46,980
it takes done to wait to when we have

447
00:21:46,980 --> 00:21:50,419
sent some data over to this

448
00:21:51,799 --> 00:21:55,860
erq to clear the rental flag after the

449
00:21:55,860 --> 00:21:58,559
sand it's always better

450
00:21:58,559 --> 00:22:04,860
so there uh we have default speed oops

451
00:22:04,860 --> 00:22:08,100
diff before speed of 1.2 gigabit per

452
00:22:08,100 --> 00:22:10,320
second which can be changed now

453
00:22:10,320 --> 00:22:13,919
uh so the third s is based on lvds only

454
00:22:13,919 --> 00:22:17,400
two wire it's a differential pairs with

455
00:22:17,400 --> 00:22:20,760
okay if you see there uh it's a built-in

456
00:22:20,760 --> 00:22:22,860
fee it's very interesting because you

457
00:22:22,860 --> 00:22:24,840
don't need any other components

458
00:22:24,840 --> 00:22:27,179
everything is integrated

459
00:22:27,179 --> 00:22:31,380
and it's done in the fee so 8B 10B codec

460
00:22:31,380 --> 00:22:33,480
plus 30 check

461
00:22:33,480 --> 00:22:36,900
and also it include after reverse

462
00:22:36,900 --> 00:22:39,480
engineering 32

463
00:22:39,480 --> 00:22:43,760
it's from SATA specification

464
00:22:44,880 --> 00:22:47,280
so no uh

465
00:22:47,280 --> 00:22:50,760
let's see an example okay when we have

466
00:22:50,760 --> 00:22:53,520
rewrite everything in C and the driver

467
00:22:53,520 --> 00:22:54,720
is done

468
00:22:54,720 --> 00:22:57,659
it's available on GitHub

469
00:22:57,659 --> 00:23:00,240
and also the example to use it to

470
00:23:00,240 --> 00:23:02,940
transmit or resave with two boards so

471
00:23:02,940 --> 00:23:05,039
for example you have a board with which

472
00:23:05,039 --> 00:23:08,100
do the TX this one the Eric's

473
00:23:08,100 --> 00:23:10,500
and we connect the bus

474
00:23:10,500 --> 00:23:13,440
and we can extension data at quite a

475
00:23:13,440 --> 00:23:16,340
fast speed like we see there

476
00:23:16,340 --> 00:23:20,940
we just exchanged 5a5a

477
00:23:20,940 --> 00:23:22,440
okay

478
00:23:22,440 --> 00:23:26,100
and we also see the SQL account there

479
00:23:26,100 --> 00:23:28,080
so it takes less than one week or

480
00:23:28,080 --> 00:23:30,419
seconds to send the

481
00:23:30,419 --> 00:23:32,460
search

482
00:23:32,460 --> 00:23:35,880
so reverse engineering CSS data link so

483
00:23:35,880 --> 00:23:37,980
yes because we speak only about the

484
00:23:37,980 --> 00:23:39,480
software part

485
00:23:39,480 --> 00:23:41,400
in fact it's interesting to know what

486
00:23:41,400 --> 00:23:43,080
happens before

487
00:23:43,080 --> 00:23:46,559
okay and why we we need to to know that

488
00:23:46,559 --> 00:23:48,780
the data links how it works because it's

489
00:23:48,780 --> 00:23:50,760
not documented at all

490
00:23:50,760 --> 00:23:53,340
and it's because we want to interface it

491
00:23:53,340 --> 00:23:56,460
potentially with fpga

492
00:23:56,460 --> 00:24:00,600
okay external world so there I I thanks

493
00:24:00,600 --> 00:24:03,000
uh thanks to Andrew zonenberg

494
00:24:03,000 --> 00:24:06,240
because he helped me when I provided him

495
00:24:06,240 --> 00:24:09,720
some uh some oscilloscope capture to to

496
00:24:09,720 --> 00:24:11,900
figure out it's probably serious

497
00:24:11,900 --> 00:24:14,220
specification is based

498
00:24:14,220 --> 00:24:17,340
so everything is encoded with such

499
00:24:17,340 --> 00:24:19,620
specification

500
00:24:19,620 --> 00:24:22,740
so it's interesting point

501
00:24:22,740 --> 00:24:26,700
so no let's see the other big points

502
00:24:26,700 --> 00:24:31,080
it's related to USB 3. so USB 2 was

503
00:24:31,080 --> 00:24:33,900
clearly documented with everything the

504
00:24:33,900 --> 00:24:37,200
source code no blob but usb3

505
00:24:37,200 --> 00:24:39,480
you have absolutely

506
00:24:39,480 --> 00:24:43,500
a big Big Blob so a big problem as you

507
00:24:43,500 --> 00:24:46,080
don't know what happens and even how it

508
00:24:46,080 --> 00:24:48,539
works internally and of course you

509
00:24:48,539 --> 00:24:50,280
cannot fix it because you don't know it

510
00:24:50,280 --> 00:24:51,539
works

511
00:24:51,539 --> 00:24:54,900
so uh

512
00:24:54,900 --> 00:24:58,580
so yes it's based on on

513
00:24:58,580 --> 00:25:03,480
ch372 device example provided by wsh

514
00:25:03,480 --> 00:25:06,360
to reverse it so it's mainly a USB 3

515
00:25:06,360 --> 00:25:08,100
device bulk

516
00:25:08,100 --> 00:25:10,919
it's the most important or interesting

517
00:25:10,919 --> 00:25:13,380
mod because you can interface with an

518
00:25:13,380 --> 00:25:16,799
EPC computer

519
00:25:16,799 --> 00:25:19,799
and it even support burst it's specific

520
00:25:19,799 --> 00:25:22,820
to USB 3.

521
00:25:23,240 --> 00:25:27,659
engineering about that part uh we see uh

522
00:25:27,659 --> 00:25:29,580
in the code that there were a lot of

523
00:25:29,580 --> 00:25:32,159
basic small function to reverse so the

524
00:25:32,159 --> 00:25:33,900
device you need the switch power mode

525
00:25:33,900 --> 00:25:36,659
the device set address

526
00:25:36,659 --> 00:25:40,260
etc etc all are quite easy to reverse

527
00:25:40,260 --> 00:25:42,059
like you can see

528
00:25:42,059 --> 00:25:46,260
okay so again you need to research a lot

529
00:25:46,260 --> 00:25:48,900
because you see all that mess in fact at

530
00:25:48,900 --> 00:25:51,480
the end it just SS ticks control in it

531
00:25:51,480 --> 00:25:54,480
Eric's controlling it thereafter you

532
00:25:54,480 --> 00:25:57,240
have the USB statues

533
00:25:57,240 --> 00:26:00,360
okay USB control link configuration and

534
00:26:00,360 --> 00:26:03,299
so on the value there we don't know what

535
00:26:03,299 --> 00:26:05,760
is it it's only problem

536
00:26:05,760 --> 00:26:08,460
and there we have a loop

537
00:26:08,460 --> 00:26:11,360
okay so there is quick basically the

538
00:26:11,360 --> 00:26:14,360
usp3 device in it because

539
00:26:14,360 --> 00:26:17,460
the ship set Works in two mods in osmod

540
00:26:17,460 --> 00:26:19,740
in device mode but we will focus only on

541
00:26:19,740 --> 00:26:21,900
device mode

542
00:26:21,900 --> 00:26:25,260
so no check the

543
00:26:25,260 --> 00:26:30,120
The Blob USB 3 inset for example let's

544
00:26:30,120 --> 00:26:31,500
reverse that

545
00:26:31,500 --> 00:26:34,080
so it's quite simple when you see there

546
00:26:34,080 --> 00:26:37,140
it'll be not out for instruction but

547
00:26:37,140 --> 00:26:39,900
it's quite a mess

548
00:26:39,900 --> 00:26:42,779
see there is concat and with things we

549
00:26:42,779 --> 00:26:45,600
don't really so we need to check a bit

550
00:26:45,600 --> 00:26:49,080
more and we simplify that exactly to

551
00:26:49,080 --> 00:26:52,919
that its endpoint multiply by four and

552
00:26:52,919 --> 00:26:54,659
then you do that

553
00:26:54,659 --> 00:26:58,620
it's it was quite uh the same there

554
00:26:58,620 --> 00:27:01,679
so the religious engineering is quite

555
00:27:01,679 --> 00:27:04,020
easy anyway on such function

556
00:27:04,020 --> 00:27:06,240
thanks to gidra

557
00:27:06,240 --> 00:27:10,740
so the final quest yes yes because it's

558
00:27:10,740 --> 00:27:14,340
not easy for all things and the most

559
00:27:14,340 --> 00:27:18,059
most most hardest one is this one the

560
00:27:18,059 --> 00:27:22,020
USB 3 ER field reverse engineering why

561
00:27:22,020 --> 00:27:24,960
it's complex because it's a critical

562
00:27:24,960 --> 00:27:28,159
function as it's a main State machine

563
00:27:28,159 --> 00:27:31,140
doing link management packets mainly

564
00:27:31,140 --> 00:27:34,140
some go back and the management all off

565
00:27:34,140 --> 00:27:37,080
of all endpoints like we see there a USB

566
00:27:37,080 --> 00:27:39,539
device has multiple on points so

567
00:27:39,539 --> 00:27:41,880
endpoint and point zero is a control

568
00:27:41,880 --> 00:27:45,419
pipe on all device and such other

569
00:27:45,419 --> 00:27:48,480
endpoints are user configurable and

570
00:27:48,480 --> 00:27:52,200
point to communicate and transfer data

571
00:27:52,200 --> 00:27:56,580
and Such Thing are all managed by the

572
00:27:56,580 --> 00:28:01,200
USB 3 earqandler okay especially USB 3

573
00:28:01,200 --> 00:28:03,659
standard request on standard request

574
00:28:03,659 --> 00:28:07,460
s are managed by 1.0

575
00:28:07,860 --> 00:28:09,779
so there one complete function to

576
00:28:09,779 --> 00:28:12,539
reverse many few big matching stake

577
00:28:12,539 --> 00:28:15,419
let's say no details on register only

578
00:28:15,419 --> 00:28:18,120
register name few defines a lot of

579
00:28:18,120 --> 00:28:20,340
research of course reading also the USB

580
00:28:20,340 --> 00:28:25,919
3D specification which are quite complex

581
00:28:25,919 --> 00:28:29,100
so how to factor is all that mess yes it

582
00:28:29,100 --> 00:28:30,779
took a lot of iteration with writing

583
00:28:30,779 --> 00:28:33,260
rebuilding checking the SM code

584
00:28:33,260 --> 00:28:37,320
multi-time until magically it works at

585
00:28:37,320 --> 00:28:39,480
least doing USB 3 numeration because

586
00:28:39,480 --> 00:28:42,179
when you are rewriting such type of

587
00:28:42,179 --> 00:28:43,460
function

588
00:28:43,460 --> 00:28:46,500
as it's a main function you don't have

589
00:28:46,500 --> 00:28:49,500
anything if there is one bug no USB 3

590
00:28:49,500 --> 00:28:50,880
animation

591
00:28:50,880 --> 00:28:54,179
and of course impossible to debug

592
00:28:54,179 --> 00:28:58,380
why because USB 3 is so fast that during

593
00:28:58,380 --> 00:29:01,320
enumeration you have few micro seconds

594
00:29:01,320 --> 00:29:04,020
so you cannot break or even add some

595
00:29:04,020 --> 00:29:07,020
trace on your Arts because USB immersion

596
00:29:07,020 --> 00:29:09,900
failed again so it's quite crazy to

597
00:29:09,900 --> 00:29:13,140
debug that mess and then with a USB 3

598
00:29:13,140 --> 00:29:16,159
analyzer it doesn't help at that step

599
00:29:16,159 --> 00:29:20,399
because uh when you have some bugs there

600
00:29:20,399 --> 00:29:23,760
it isn't even for example send the data

601
00:29:23,760 --> 00:29:24,600
or

602
00:29:24,600 --> 00:29:27,840
a lot of things happen so yes other

603
00:29:27,840 --> 00:29:31,260
option could have been to use hspi it's

604
00:29:31,260 --> 00:29:34,260
a it's a parallel bus or the third is to

605
00:29:34,260 --> 00:29:38,279
have some real-time DMI Trace but yes

606
00:29:38,279 --> 00:29:41,399
requiring also USB 3 to retrieve such

607
00:29:41,399 --> 00:29:45,659
trace on the PC like it's a chicken or

608
00:29:45,659 --> 00:29:47,399
the egg dilemma

609
00:29:47,399 --> 00:29:50,640
yes we cannot have both but because I

610
00:29:50,640 --> 00:29:53,340
need USB 3 working so yeah

611
00:29:53,340 --> 00:29:56,760
so let's continue on the big efq on

612
00:29:56,760 --> 00:29:57,899
layer

613
00:29:57,899 --> 00:30:00,000
like you see there it's more complex

614
00:30:00,000 --> 00:30:01,980
clearly more complex it does not even

615
00:30:01,980 --> 00:30:06,740
enter in the side and it's more than 200

616
00:30:06,740 --> 00:30:10,679
260 line of codes of pseudocode

617
00:30:10,679 --> 00:30:13,860
you see there are tons of register we

618
00:30:13,860 --> 00:30:16,020
don't know what is it

619
00:30:16,020 --> 00:30:17,640
okay

620
00:30:17,640 --> 00:30:20,159
so we will analyze I'm afraid you'll

621
00:30:20,159 --> 00:30:24,000
have to jump to the conclusion okay so

622
00:30:24,000 --> 00:30:26,700
yes we see different parts uh to to be

623
00:30:26,700 --> 00:30:28,020
analyzed

624
00:30:28,020 --> 00:30:30,480
and then when we have understood better

625
00:30:30,480 --> 00:30:32,700
how it works

626
00:30:32,700 --> 00:30:36,179
we have the final code and it works by

627
00:30:36,179 --> 00:30:37,679
like

628
00:30:37,679 --> 00:30:41,220
so yes uh it's a final uh it's a final

629
00:30:41,220 --> 00:30:44,700
word with a USB tree where you need a

630
00:30:44,700 --> 00:30:46,559
cable

631
00:30:46,559 --> 00:30:51,419
and there are also a little ins about

632
00:30:51,419 --> 00:30:53,700
when you reverse the binary

633
00:30:53,700 --> 00:30:56,039
I will check you that on the GitHub

634
00:30:56,039 --> 00:31:00,299
issue 2466 it's an important point to

635
00:31:00,299 --> 00:31:02,340
understand what is the GP

636
00:31:02,340 --> 00:31:05,190
Global pointer on risk file

637
00:31:05,190 --> 00:31:06,360
[Music]

638
00:31:06,360 --> 00:31:09,600
and the conclusion so yes so we have

639
00:31:09,600 --> 00:31:11,220
designed the board

640
00:31:11,220 --> 00:31:12,960
there because there was nothing

641
00:31:12,960 --> 00:31:15,559
available we have done full reversing

642
00:31:15,559 --> 00:31:17,880
reverse engineering on the firmware

643
00:31:17,880 --> 00:31:20,460
blobs and we whiten them in C for the

644
00:31:20,460 --> 00:31:21,659
third s

645
00:31:21,659 --> 00:31:24,360
then we are doing the same for USB 3

646
00:31:24,360 --> 00:31:24,930
debug

647
00:31:24,930 --> 00:31:26,419
[Music]

648
00:31:26,419 --> 00:31:29,760
is fully rewriting in say an open source

649
00:31:29,760 --> 00:31:30,840
of course

650
00:31:30,840 --> 00:31:32,340
and

651
00:31:32,340 --> 00:31:36,120
and we also provide the hint to to do

652
00:31:36,120 --> 00:31:37,980
the firmware reverse engineering on a

653
00:31:37,980 --> 00:31:40,270
binary Ubuntu Global printer

654
00:31:40,270 --> 00:31:42,179
[Music]

655
00:31:42,179 --> 00:31:43,980
so that's

656
00:31:43,980 --> 00:31:47,039
all thanks to contributor with that

657
00:31:47,039 --> 00:31:49,740
project which is open source there it's

658
00:31:49,740 --> 00:31:52,860
a drive USB through a tree on GitHub

659
00:31:52,860 --> 00:31:55,320
so thanks to ants buyer

660
00:31:55,320 --> 00:31:58,980
which helped on some reverse engineering

661
00:31:58,980 --> 00:32:01,679
on the bootloader I do not have

662
00:32:01,679 --> 00:32:05,279
represented there and June mazelbath

663
00:32:05,279 --> 00:32:08,880
which is here which helped a lot with

664
00:32:08,880 --> 00:32:10,919
the Flasher

665
00:32:10,919 --> 00:32:13,200
because he avoid everything at the start

666
00:32:13,200 --> 00:32:15,539
in a from scratch in SE

667
00:32:15,539 --> 00:32:18,200
from

668
00:32:19,399 --> 00:32:22,440
okay and you have the bsp there it's a

669
00:32:22,440 --> 00:32:25,100
driver in fact

670
00:32:25,440 --> 00:32:29,240
okay thank you very much

671
00:32:29,240 --> 00:32:30,950
[Applause]

672
00:32:30,950 --> 00:32:34,209
[Music]

