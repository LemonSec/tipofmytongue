1
00:00:00,000 --> 00:00:01,860
thanks for coming here i'm luca

2
00:00:01,860 --> 00:00:05,370
fulchir i work i am a

3
00:00:05,370 --> 00:00:09,660
computer consultant a systems engineer but

4
00:00:09,660 --> 00:00:13,219
what i mainly deal with is

5
00:00:13,219 --> 00:00:15,320
security in the

6
00:00:15,320 --> 00:00:20,670
telecommunications sector for those who know me for

7
00:00:20,670 --> 00:00:22,320
those who have followed talks I did yesterday i

8
00:00:22,320 --> 00:00:25,199
manage a fairly large project

9
00:00:25,199 --> 00:00:27,330
that it is  of a

10
00:00:27,330 --> 00:00:29,670
fairly low level network protocol rewrite

11
00:00:29,670 --> 00:00:33,440
type from tls advances

12
00:00:33,440 --> 00:00:35,809
and authentications this is a

13
00:00:35,809 --> 00:00:40,190
similar project a simplification of the one

14
00:00:40,190 --> 00:00:42,260
I am already working on to another

15
00:00:42,260 --> 00:00:45,920
transport protocol a tunnel to

16
00:00:45,920 --> 00:00:47,780
add error correction

17
00:00:47,780 --> 00:00:51,340
to any protocol and  it is

18
00:00:51,340 --> 00:00:53,470
and will obviously focus on the

19
00:00:53,470 --> 00:00:57,839
most commonly used ones so tcp ip

20
00:00:58,489 --> 00:01:00,870
although my focus is generally

21
00:01:00,870 --> 00:01:03,899
on security this is generally

22
00:01:03,899 --> 00:01:06,479
completely clear it is an ante

23
00:01:06,479 --> 00:01:09,720
preview in the sense that we will also see a

24
00:01:09,720 --> 00:01:10,890
few numbers of how the technology

25
00:01:10,890 --> 00:01:15,390
works but it is not not  still a building

26
00:01:15,390 --> 00:01:17,940
for which there is no one I have yet

27
00:01:17,940 --> 00:01:19,560
released public p  probably a

28
00:01:19,560 --> 00:01:22,650
couple of weeks I will be able to make it

29
00:01:22,650 --> 00:01:25,130
available to anyone

30
00:01:25,130 --> 00:01:28,200
then the first question is why we

31
00:01:28,200 --> 00:01:29,820
need

32
00:01:29,820 --> 00:01:31,760
error correction in protocols

33
00:01:31,760 --> 00:01:34,080
especially because

34
00:01:34,080 --> 00:01:36,570
additional correction we know if you know a little about

35
00:01:36,570 --> 00:01:41,040
the classic tcp protocols to the success of

36
00:01:41,040 --> 00:01:43,200
more money another eternity under

37
00:01:43,200 --> 00:01:46,650
n  'is still another and therefore only for

38
00:01:46,650 --> 00:01:49,350
this reason we should be quite sure

39
00:01:49,350 --> 00:01:51,440
of what they have been we transmit

40
00:01:51,440 --> 00:01:55,470
now the reality of this without going

41
00:01:55,470 --> 00:01:59,880
into the mathematics of the specific crc used

42
00:01:59,880 --> 00:02:00,990
in

43
00:02:00,990 --> 00:02:03,579
tcp indeed with dp instead of that of

44
00:02:03,579 --> 00:02:08,080
ethernet and which we generally say are

45
00:02:08,080 --> 00:02:11,560
simply old algorithms

46
00:02:11,560 --> 00:02:16,840
designed to detect a certain amount of

47
00:02:16,840 --> 00:02:22,360
error a handful of bytes no more

48
00:02:22,360 --> 00:02:27,220
correct even less over

49
00:02:27,220 --> 00:02:29,050
the years

50
00:02:29,050 --> 00:02:31,570
much newer and more important algorithms have obviously been developed

51
00:02:31,570 --> 00:02:33,400


52
00:02:33,400 --> 00:02:36,190
think about the mom rizzolo you use that

53
00:02:36,190 --> 00:02:39,730
caused in all cd roms and that instead

54
00:02:39,730 --> 00:02:41,410
practically no

55
00:02:41,410 --> 00:02:47,430
network protocol is implemented though  the single

56
00:02:47,430 --> 00:02:49,260
[Music]

57
00:02:49,260 --> 00:02:51,430
correcting errors in a single

58
00:02:51,430 --> 00:02:54,940
package is a problem is what

59
00:02:54,940 --> 00:02:57,940
we worked on after was trying to

60
00:02:57,940 --> 00:03:01,120
recover entire lost packages this

61
00:03:01,120 --> 00:03:03,430
is about let's talk about for words and

62
00:03:03,430 --> 00:03:07,930
error correction so why do we

63
00:03:07,930 --> 00:03:09,640
need error correction

64
00:03:09,640 --> 00:03:11,380
additional because the world has moved

65
00:03:11,380 --> 00:03:14,640
on since the seventies and because

66
00:03:14,640 --> 00:03:16,260
radio interference and all

67
00:03:16,260 --> 00:03:19,709
radio links are heavy

68
00:03:19,709 --> 00:03:21,780
we will see how even a small

69
00:03:21,780 --> 00:03:25,350
percentage of lost katy can lead to

70
00:03:25,350 --> 00:03:28,319
a large

71
00:03:28,319 --> 00:03:31,650
has a large loss of performance

72
00:03:31,650 --> 00:03:33,299
even of the most commonly protocols

73
00:03:33,299 --> 00:03:36,299
used as I said before, the correction

74
00:03:36,299 --> 00:03:39,069
of errors splits into two

75
00:03:39,069 --> 00:03:41,920
roughly the law c that everything

76
00:03:41,920 --> 00:03:43,959
you need to check roses in a

77
00:03:43,959 --> 00:03:46,480
single package and the starch for the

78
00:03:46,480 --> 00:03:49,170
road correction

79
00:03:49,170 --> 00:03:51,720
that instead works on generally only

80
00:03:51,720 --> 00:03:54,750
on recovering

81
00:03:54,750 --> 00:03:57,120
entire packages and that you  are lost

82
00:03:57,120 --> 00:03:58,920
or that if corrupted that you cannot

83
00:03:58,920 --> 00:04:01,500
recover obviously one does not exclude

84
00:04:01,500 --> 00:04:02,640
the a  ltra

85
00:04:02,640 --> 00:04:05,160
and some algorithms such as lo rizzolo

86
00:04:05,160 --> 00:04:06,720
cannot be used in both

87
00:04:06,720 --> 00:04:09,650
cases depending on how they are configured

88
00:04:09,650 --> 00:04:13,410
what I focus on is raptor

89
00:04:13,410 --> 00:04:16,079
cure because an algorithm of which I made

90
00:04:16,079 --> 00:04:19,140
a free implementation for free

91
00:04:19,140 --> 00:04:25,800
usable I did it in cp plus 11  it was

92
00:04:25,800 --> 00:04:27,990
also spent a bit to make it stable

93
00:04:27,990 --> 00:04:31,830
because I made it quite complex and

94
00:04:31,830 --> 00:04:34,650
therefore in short what I will

95
00:04:34,650 --> 00:04:38,669
focus on in reality there are

96
00:04:38,669 --> 00:04:42,720
even newer algorithms such as fulcrum that an

97
00:04:42,720 --> 00:04:44,520
improvement of ideas introduced the

98
00:04:44,520 --> 00:04:47,330
foam crime

99
00:04:47,400 --> 00:04:48,570
but behind too many patents

100
00:04:48,570 --> 00:04:51,120
so for now

101
00:04:51,120 --> 00:04:54,080
unfortunately it will be better to leave it alone for a few years

102
00:04:54,080 --> 00:04:57,720
before we talked about the ying stack of

103
00:04:57,720 --> 00:04:59,750
[Music]

104
00:04:59,750 --> 00:05:02,430
decoration of errors as we have

105
00:05:02,430 --> 00:05:06,570
the typical one 4 the one below the

106
00:05:06,570 --> 00:05:09,590
ternet given that of use 4 then it

107
00:05:09,590 --> 00:05:14,380
only concerns leather not the data itself

108
00:05:14,780 --> 00:05:17,050
is a problem  this stacking because

109
00:05:17,050 --> 00:05:21,460
generally we go to check them

110
00:05:21,460 --> 00:05:24,770
we go to check the

111
00:05:24,770 --> 00:05:25,870


112
00:05:25,870 --> 00:05:28,250
same battery several times already go to  the same

113
00:05:28,250 --> 00:05:29,920
amount of data

114
00:05:29,920 --> 00:05:39,310
so let's see if I can quickly

115
00:05:46,910 --> 00:05:51,410
and why the error decoration stacking is a problem

116
00:05:51,710 --> 00:05:53,910
because an

117
00:05:53,910 --> 00:05:56,130
error that could be recoverable

118
00:05:56,130 --> 00:06:00,500
from the top step for example of

119
00:06:00,500 --> 00:06:03,540
something introduced at the code

120
00:06:03,540 --> 00:06:05,100
level introduced at the application level in

121
00:06:05,100 --> 00:06:07,650
reality is  already blocked at the

122
00:06:07,650 --> 00:06:10,670
lowest level and this makes us throw away

123
00:06:10,670 --> 00:06:15,390
the entire package so in

124
00:06:15,390 --> 00:06:18,240
reality when we talk about

125
00:06:18,240 --> 00:06:21,270
error correction even today it is

126
00:06:21,270 --> 00:06:25,520
more about identifying errors

127
00:06:39,100 --> 00:06:42,810
that now we see if it resumes immediately

128
00:06:43,350 --> 00:06:47,980
then even despite that in whole

129
00:06:47,980 --> 00:06:50,520
that you try to combine both the

130
00:06:50,520 --> 00:06:52,360
correction plafond room of the rock

131
00:06:52,360 --> 00:06:56,400
correction the main focus of each

132
00:06:56,400 --> 00:06:58,510
of each

133
00:06:58,510 --> 00:07:01,420
undisputed algorithm of the protocol will

134
00:07:01,420 --> 00:07:03,790
still be for words correction because

135
00:07:03,790 --> 00:07:06,970
at the lowest level there are often point

136
00:07:06,970 --> 00:07:09,940
3 cech they will pull away whole entire

137
00:07:09,940 --> 00:07:13,840
packets along the whole length  the whole

138
00:07:13,840 --> 00:07:15,989
network

139
00:07:18,280 --> 00:07:22,469
we were without batteries does not start

140
00:07:47,680 --> 00:07:51,340
let's see if there is the f  come on

141
00:08:05,889 --> 00:08:08,400
here we are

142
00:08:08,930 --> 00:08:11,520
and so nothing let's give an example of

143
00:08:11,520 --> 00:08:14,039
how raptor works in general

144
00:08:14,039 --> 00:08:18,259
the whole ovendoro correction how do

145
00:08:18,259 --> 00:08:20,610
you recover packets lost the

146
00:08:20,610 --> 00:08:22,830
concept a bit what we have with

147
00:08:22,830 --> 00:08:24,449
what you already know from the raid

148
00:08:24,449 --> 00:08:26,280
we have

149
00:08:26,280 --> 00:08:28,350
disks let's say

150
00:08:28,350 --> 00:08:30,780
source packages that  contain the data that we

151
00:08:30,780 --> 00:08:33,710
send and we have other disks other

152
00:08:33,710 --> 00:08:37,440
packages that will be information

153
00:08:37,440 --> 00:08:40,049
that in themselves mean nothing

154
00:08:40,049 --> 00:08:43,919
but that recombine with each other because you

155
00:08:43,919 --> 00:08:45,300
sources manage to make us recover

156
00:08:45,300 --> 00:08:50,520
some lost data red 5 does not scale

157
00:08:50,520 --> 00:08:54,240
well because it only works with  two discs

158
00:08:54,240 --> 00:08:56,970
plus one despair there are other

159
00:08:56,970 --> 00:08:58,589
types of raids that allow you to

160
00:08:58,589 --> 00:09:01,260
have a couple of discs more but then the

161
00:09:01,260 --> 00:09:02,730
complexity really begins to

162
00:09:02,730 --> 00:09:06,089
increase and therefore when we talk about

163
00:09:06,089 --> 00:09:08,100
these generic algorithms as a rapper

164
00:09:08,100 --> 00:09:10,880
more than it allows you to have a

165
00:09:10,880 --> 00:09:14,400
configurable number of  packages or disks if

166
00:09:14,400 --> 00:09:16,890
you want to keep the source analogy and

167
00:09:16,890 --> 00:09:20,330
a potentially infinite number of

168
00:09:20,330 --> 00:09:23,900
recovery packages

169
00:09:24,300 --> 00:09:28,300
know that generally it is

170
00:09:28,300 --> 00:09:31,430
the work and with matrix generations of

171
00:09:31,430 --> 00:09:33,410
dependencies between one package and another

172
00:09:33,410 --> 00:09:35,450
so generally all the algorithms

173
00:09:35,450 --> 00:09:41,720
in this category are all on

174
00:09:41,720 --> 00:09:44,149
kubic complexity because the

175
00:09:44,149 --> 00:09:49,130
dependencies somehow you have to solve as

176
00:09:49,130 --> 00:09:50,720
follows  'example

177
00:09:50,720 --> 00:09:52,279
take your input on to

178
00:09:52,279 --> 00:09:54,579
sell in blocks each block will be

179
00:09:54,579 --> 00:09:58,010
modified and decoded completely

180
00:09:58,010 --> 00:09:59,620
independently from the others

181
00:09:59,620 --> 00:10:02,390
each block is divided into symbols and

182
00:10:02,390 --> 00:10:05,149
generally this means that for

183
00:10:05,149 --> 00:10:07,630
example not a shot example a

184
00:10:07,630 --> 00:10:11,480
symbol becomes a package the

185
00:10:11,480 --> 00:10:16,399
fixed size at this point  and

186
00:10:16,399 --> 00:10:19,279
try to figure out how much

187
00:10:19,279 --> 00:10:21,709
packets you think you are going to lose and if you have

188
00:10:21,709 --> 00:10:23,450
5 percent packets lost on

189
00:10:23,450 --> 00:10:25,279
average you know you just have to

190
00:10:25,279 --> 00:10:28,399
send 5 percent extra packets

191
00:10:28,399 --> 00:10:30,019


192
00:10:30,019 --> 00:10:31,490
the nice thing about director cue as an

193
00:10:31,490 --> 00:10:33,100
algorithm is that it's a

194
00:10:33,100 --> 00:10:34,959
[  Music]

195
00:10:34,959 --> 00:10:38,569
allows you to ship the

196
00:10:38,569 --> 00:10:40,339
original packages as they are you don't have

197
00:10:40,339 --> 00:10:42,649
need to modify them all

198
00:10:42,649 --> 00:10:44,989
together and send only

199
00:10:44,989 --> 00:10:46,459
qualified data which must be

200
00:10:46,459 --> 00:10:48,799
re-encoded afterwards this means that if

201
00:10:48,799 --> 00:10:51,499
there are no transmission problems

202
00:10:51,499 --> 00:10:53,389
you will not lose absolutely anyone

203
00:10:53,389 --> 00:10:55,009
any kind of performance because

204
00:10:55,009 --> 00:10:56,600
you do not have to do any

205
00:10:56,600 --> 00:11:00,889
client-side decoding the raptor cube problem and  which

206
00:11:00,889 --> 00:11:03,319
instead is a bit probabilistic

207
00:11:03,319 --> 00:11:07,579
I have 10 packets I lose a couple but

208
00:11:07,579 --> 00:11:09,379
another a couple of total recovery

209
00:11:09,379 --> 00:11:12,649
always 10 packets or 99 percent

210
00:11:12,649 --> 00:11:14,869
probability of being successful in

211
00:11:14,869 --> 00:11:17,119
decoding each recovery packet

212
00:11:17,119 --> 00:11:19,640
that I have in addition

213
00:11:19,640 --> 00:11:23,890
increase of 100 times the  probability of

214
00:11:23,890 --> 00:11:27,640
successfully decoding everything

215
00:11:27,640 --> 00:11:31,070
in practice this however gives a

216
00:11:31,070 --> 00:11:33,710
much more than sufficient

217
00:11:33,710 --> 00:11:36,170
probability since the probability of error is already

218
00:11:36,170 --> 00:11:38,120
low and therefore it will not

219
00:11:38,120 --> 00:11:41,000
always happen what it means to lose packets

220
00:11:41,000 --> 00:11:43,610
then this had been taken from

221
00:11:43,610 --> 00:11:46,310
tests on which I carried out  on a link

222
00:11:46,310 --> 00:11:50,930
between bertona shing in america

223
00:11:50,930 --> 00:11:52,190
and europe i

224
00:11:52,190 --> 00:11:54,860
was there  trying to understand

225
00:11:54,860 --> 00:11:56,510
how the tcp connections worked in terms

226
00:11:56,510 --> 00:12:00,080
of performance both on the basis of

227
00:12:00,080 --> 00:12:02,270
her and on the basis of the lost packets

228
00:12:02,270 --> 00:12:07,689
so you can see in the first case

229
00:12:07,930 --> 00:12:11,330
that for when we do not have

230
00:12:11,330 --> 00:12:15,230
additional forced lost packets we generally

231
00:12:15,230 --> 00:12:17,330
also reach peaks of 50

232
00:12:17,330 --> 00:12:18,880
megabits per  according to

233
00:12:18,880 --> 00:12:22,250
the link of the women chignon one hundred were

234
00:12:22,250 --> 00:12:24,560
of the 100 megabits but the transfer

235
00:12:24,560 --> 00:12:26,090
was done on a 100 megabit file

236
00:12:26,090 --> 00:12:27,770
so even advances I take a

237
00:12:27,770 --> 00:12:30,230
moment before and then the average

238
00:12:30,230 --> 00:12:33,530
returns back there around the total 50 megabits

239
00:12:33,530 --> 00:12:36,440
for that you do not see the peak of the

240
00:12:36,440 --> 00:12:37,700
announcement  I should have tried with

241
00:12:37,700 --> 00:12:40,250
much longer transfers problem

242
00:12:40,250 --> 00:12:44,620
I did not do it because by switching to

243
00:12:44,620 --> 00:12:46,730
increasing the percentage of

244
00:12:46,730 --> 00:12:49,750


245
00:12:49,750 --> 00:12:55,670


246
00:12:55,670 --> 00:12:57,080


247
00:12:57,080 --> 00:12:57,680


248
00:12:57,680 --> 00:13:01,490


249
00:13:01,490 --> 00:13:03,100
packets per  control

250
00:13:03,100 --> 00:13:07,850
we go from 5 megabits down to 10

251
00:13:07,850 --> 00:13:09,800
percent of lost packets and you are already

252
00:13:09,800 --> 00:13:11,290
lucky if  get to

253
00:13:11,290 --> 00:13:15,850
megabits per second this instead is

254
00:13:15,850 --> 00:13:18,730
what the correction form can do

255
00:13:18,730 --> 00:13:19,420
for you

256
00:13:19,420 --> 00:13:24,190
this is a link of transmissions in pure

257
00:13:24,190 --> 00:13:28,660
dp where you can see between yourself how much

258
00:13:28,660 --> 00:13:30,550
lost packets

259
00:13:30,550 --> 00:13:32,920
you see that even in 20 percent of

260
00:13:32,920 --> 00:13:34,720
lost packets  however we reach

261
00:13:34,720 --> 00:13:36,639
25 megabits per second

262
00:13:36,639 --> 00:13:42,279
in short for radio links for things

263
00:13:42,279 --> 00:13:43,899
like this

264
00:13:43,899 --> 00:13:46,750
the performance of the ones we are

265
00:13:46,750 --> 00:13:50,079
talking about change among other things this experiment

266
00:13:50,079 --> 00:13:51,610
was done when the library

267
00:13:51,610 --> 00:13:54,100
still had a couple of bugs so

268
00:13:54,100 --> 00:13:56,949
probably now performance

269
00:13:56,949 --> 00:14:02,230
has increased this again  it is the introduction

270
00:14:02,230 --> 00:14:04,870
on the technology used what I am trying

271
00:14:04,870 --> 00:14:08,699
to do with tir is to create a tunnel

272
00:14:08,699 --> 00:14:11,139
returns classics are those like the vpn

273
00:14:11,139 --> 00:14:14,709
we take our pilot hair eder

274
00:14:14,709 --> 00:14:19,269
we hope inside another eder the

275
00:14:19,269 --> 00:14:21,519
pipers our server this means

276
00:14:21,519 --> 00:14:24,550
that both entities must for  force

277
00:14:24,550 --> 00:14:26,769
talk to each other the same protocol have the

278
00:14:26,769 --> 00:14:29,110
same tuna as when you have a pm

279
00:14:29,110 --> 00:14:31,449
client server what i'm trying to

280
00:14:31,449 --> 00:14:34,029
to do instead is to divide the thing into three

281
00:14:34,029 --> 00:14:36,860
phases to decrease

282
00:14:36,860 --> 00:14:39,080
as little as possible and it is she

283
00:14:39,080 --> 00:14:42,360
in the first phase for words the

284
00:14:42,360 --> 00:14:45,240
packets as they are with a bit of connection

285
00:14:45,240 --> 00:14:46,130
between those in the middle

286
00:14:46,130 --> 00:14:48,660
in the second part at the same time as

287
00:14:48,660 --> 00:14:51,060
when I detect an outgoing connection

288
00:14:51,060 --> 00:14:54,240
I try to  check my

289
00:14:54,240 --> 00:14:56,640
protocol with the other endpoint

290
00:14:56,640 --> 00:15:00,180
czech selen is successful identify the

291
00:15:00,180 --> 00:15:02,550
connection and simply

292
00:15:02,550 --> 00:15:04,590
jack it and everything that came

293
00:15:04,590 --> 00:15:06,330
together before for war data instead comes

294
00:15:06,330 --> 00:15:09,980
in the past on

295
00:15:09,980 --> 00:15:11,990
the error correction protocol

296
00:15:11,990 --> 00:15:14,070
this means once again that

297
00:15:14,070 --> 00:15:16,170
we don't have from her for the

298
00:15:16,170 --> 00:15:20,610
initial connection establishment that everything

299
00:15:20,610 --> 00:15:22,530
works even if the other endpoint ca

300
00:15:22,530 --> 00:15:29,700
n't stand supported one if you

301
00:15:29,700 --> 00:15:31,080
think about it for a moment you realize that

302
00:15:31,080 --> 00:15:32,280
there are several

303
00:15:32,280 --> 00:15:34,410
connection tracing problems because in

304
00:15:34,410 --> 00:15:36,040
reality

305
00:15:36,040 --> 00:15:39,680
you cannot trust things  as

306
00:15:39,680 --> 00:15:41,930
source and destination lipids because

307
00:15:41,930 --> 00:15:44,450
both server and client could

308
00:15:44,450 --> 00:15:46,460
be behind nat che  it means

309
00:15:46,460 --> 00:15:50,230
that the ports also do what they want

310
00:15:50,420 --> 00:15:52,970
even if you want then you can somebody

311
00:15:52,970 --> 00:15:54,830
could just play with

312
00:15:54,830 --> 00:15:57,170
port forwarding

313
00:15:57,170 --> 00:15:59,240
so the external port is not the

314
00:15:59,240 --> 00:16:02,269
port your damon sees is pretty much

315
00:16:02,269 --> 00:16:05,420
the only way i have found for

316
00:16:05,420 --> 00:16:06,980
now to identify  the individual

317
00:16:06,980 --> 00:16:10,610
connections uznach extremely fast

318
00:16:10,610 --> 00:16:12,260
in this case xx sec

319
00:16:12,260 --> 00:16:17,630
64 of the contents of

320
00:16:17,630 --> 00:16:21,350
the ripped packet of all

321
00:16:21,350 --> 00:16:25,060
destination sources i.e. they are etc.

322
00:16:25,060 --> 00:16:28,600


323
00:16:28,600 --> 00:16:31,279


324
00:16:31,279 --> 00:16:32,480


325
00:16:32,480 --> 00:16:34,750
the server

326
00:16:34,750 --> 00:16:37,190
recognizes them simply it will

327
00:16:37,190 --> 00:16:40,750
answer yes then start

328
00:16:40,750 --> 00:16:43,639
sending everything through the tunnel and two

329
00:16:43,639 --> 00:16:46,130
will start to log in to the

330
00:16:46,130 --> 00:16:51,320
connection for those who have already used it xx

331
00:16:51,320 --> 00:16:54,589
accent a 4 is not a cryptographic nas

332
00:16:54,589 --> 00:16:57,260
valid mind they do not really

333
00:16:57,260 --> 00:16:59,000
care  because we are not protecting

334
00:16:59,000 --> 00:17:04,490
data we have a bit of a bit of clash

335
00:17:04,490 --> 00:17:07,220
not a big deal why not

336
00:17:07,220 --> 00:17:09,530
we still identify the connection

337
00:17:09,530 --> 00:17:11,900
from a single packet but I'm

338
00:17:11,900 --> 00:17:14,000
still trying to figure out how many why you

339
00:17:14,000 --> 00:17:15,559
need it to identify it but for now I

340
00:17:15,559 --> 00:17:18,380
'm on a dozen packets

341
00:17:18,380 --> 00:17:20,449
trying to identify the single

342
00:17:20,449 --> 00:17:24,349
connection other problems

343
00:17:24,349 --> 00:17:27,349
I'm still working on understand when too much

344
00:17:27,349 --> 00:17:31,629
correction too much actually  because

345
00:17:32,100 --> 00:17:34,090
as I said before the algorithm to the

346
00:17:34,090 --> 00:17:35,710
public it can take some time

347
00:17:35,710 --> 00:17:38,679
to regenerate the lost packets there

348
00:17:38,679 --> 00:17:41,500
may be some transmission to make

349
00:17:41,500 --> 00:17:43,570
sure you also have enough

350
00:17:43,570 --> 00:17:47,920
recovery packets so if I try

351
00:17:47,920 --> 00:17:49,990
to forcefully recover all the

352
00:17:49,990 --> 00:17:51,490
packets  lost

353
00:17:51,490 --> 00:17:55,120
i end up generating huge backlog of

354
00:17:55,120 --> 00:18:00,220
things to decode i am seen that to

355
00:18:00,220 --> 00:18:03,460
heal but still heavy enough i

356
00:18:03,460 --> 00:18:07,960
throw all load on the cpu and in the middle

357
00:18:07,960 --> 00:18:10,720
maybe i'm on a tcp connection that

358
00:18:10,720 --> 00:18:13,000
has already done the retro smith in ack

359
00:18:13,000 --> 00:18:15,250
so for now the two solutions are

360
00:18:15,250 --> 00:18:17,140
simply  keep a

361
00:18:17,140 --> 00:18:20,640
rather low number of blocks

362
00:18:20,900 --> 00:18:24,120
to be encoded at the max  imo and in the future

363
00:18:24,120 --> 00:18:27,090
I simply was simply I will try

364
00:18:27,090 --> 00:18:29,100
to understand programmatically what

365
00:18:29,100 --> 00:18:32,070
is the time out of the tcp connections for

366
00:18:32,070 --> 00:18:35,300
the ck on the various operating systems and

367
00:18:35,300 --> 00:18:37,680
embed this time out directly

368
00:18:37,680 --> 00:18:41,280
in the daemon so that at least for the

369
00:18:41,280 --> 00:18:43,880
tcp it makes no sense to wait too long

370
00:18:43,880 --> 00:18:46,290
c  'it is the ck that has already done the work for

371
00:18:46,290 --> 00:18:52,140
us all this works on p because

372
00:18:52,140 --> 00:18:53,790
because we have to go through

373
00:18:53,790 --> 00:18:55,110
firewalls

374
00:18:55,110 --> 00:18:58,590
we do not need to control other

375
00:18:58,590 --> 00:19:00,760
things because

376
00:19:00,760 --> 00:19:05,260
this is already given by the protocols that

377
00:19:05,260 --> 00:19:08,410
we are conveying if they

378
00:19:08,410 --> 00:19:10,900
do not send on these protocols  packages

379
00:19:10,900 --> 00:19:13,900
we also do not send it destroyed

380
00:19:13,900 --> 00:19:16,420
we let the tunnel go into theme

381
00:19:16,420 --> 00:19:23,320
or the sheikh is automatically destroyed

382
00:19:23,320 --> 00:19:24,250


383
00:19:24,250 --> 00:19:26,230
as you can see quite simple

384
00:19:26,230 --> 00:19:29,080
the only thing of notes that if not I

385
00:19:29,080 --> 00:19:32,800
was careful to manage it so that

386
00:19:32,800 --> 00:19:35,740
it is not the protocol does not  usable for

387
00:19:35,740 --> 00:19:37,210
the classic amplification attacks

388
00:19:37,210 --> 00:19:39,490
that because as we have already seen in the

389
00:19:39,490 --> 00:19:41,140
case of the dns dns sec

390
00:19:41,140 --> 00:19:43,630
in short we have  o already enough

391
00:19:43,630 --> 00:19:47,730
these there are some

392
00:19:47,730 --> 00:19:51,910
additional optimizations for pc plus dp where I had

393
00:19:51,910 --> 00:19:54,450
mentioned before we do a strip of

394
00:19:54,450 --> 00:19:59,510
the jackson ports all the way and

395
00:19:59,510 --> 00:20:02,720
will try for time problems

396
00:20:02,720 --> 00:20:06,480
the thing is still quite static

397
00:20:06,480 --> 00:20:11,610
on the increase of on the

398
00:20:11,610 --> 00:20:14,730
connection splice reached  of

399
00:20:14,730 --> 00:20:16,260
recovery packets so an average of

400
00:20:16,260 --> 00:20:20,840
5 percent is arriving so dry in the future

401
00:20:20,840 --> 00:20:22,980
will try to understand I don't know yet if I

402
00:20:22,980 --> 00:20:25,610
will start to track

403
00:20:25,610 --> 00:20:28,110
internet connections cp to understand

404
00:20:28,110 --> 00:20:29,700
how much I am doing transmission or not

405
00:20:29,700 --> 00:20:34,650
but probably not this as I have

406
00:20:34,650 --> 00:20:38,790
told you everything  end to end for obviously from

407
00:20:38,790 --> 00:20:44,000
here to make a classic vpn tunnel in which

408
00:20:44,000 --> 00:20:47,070
you must necessarily have in which everything that

409
00:20:47,070 --> 00:20:48,840
is cooled from one side to the other

410
00:20:48,840 --> 00:20:51,210
is a moment so obviously

411
00:20:51,210 --> 00:20:56,430
that too will be supported the project is

412
00:20:56,430 --> 00:20:59,190
written in cp plus 17 developed before

413
00:20:59,190 --> 00:21:03,540
on linux one part all very done

414
00:21:03,540 --> 00:21:05,010
so that the only part that is

415
00:21:05,010 --> 00:21:07,830
really needed bring

416
00:21:07,830 --> 00:21:10,169
the interface of the interfacemen  to the

417
00:21:10,169 --> 00:21:12,929
network interfaces of the system which in

418
00:21:12,929 --> 00:21:14,640
any case are quite standard because

419
00:21:14,640 --> 00:21:17,669
I am generally using only some I know that it

420
00:21:17,669 --> 00:21:20,549
finds the driver of a which then in the

421
00:21:20,549 --> 00:21:25,950
end it also uses in the end also pupi n obviously like

422
00:21:25,950 --> 00:21:28,500
all protocols to its own series

423
00:21:28,500 --> 00:21:30,120
of messages and  control

424
00:21:30,120 --> 00:21:32,130
inside is still evolving learned

425
00:21:32,130 --> 00:21:35,100
that quite new but we are towards the

426
00:21:35,100 --> 00:21:38,149
end you have not seen even before the tests

427
00:21:38,149 --> 00:21:40,080
confirm that somewhere is

428
00:21:40,080 --> 00:21:42,260
going

429
00:21:43,110 --> 00:21:54,469
and this is how much questions about 10

430
00:22:01,520 --> 00:22:04,500
and all against the control package

431
00:22:04,500 --> 00:22:07,710
the big as the blocks  for now not

432
00:22:07,710 --> 00:22:10,470
because, however, being clear, the

433
00:22:10,470 --> 00:22:13,010
stop is right or still making

434
00:22:13,010 --> 00:22:15,510
the control

435
00:22:15,510 --> 00:22:19,290
management out of the error decoration management

436
00:22:19,290 --> 00:22:22,020
this because it is simply easier

437
00:22:22,020 --> 00:22:24,139
and more efficient to

438
00:22:24,269 --> 00:22:27,370
manage the user's data traffic in

439
00:22:27,370 --> 00:22:30,309
this way problems questions

440
00:22:30,309 --> 00:22:33,940
racing performance  that is, if to understand how much it

441
00:22:33,940 --> 00:22:35,740
costs to put more control packages

442
00:22:35,740 --> 00:22:38,970
than from the beginning of if there are only real

443
00:22:38,970 --> 00:22:41,139
green in more encores  everybody

444
00:22:41,139 --> 00:22:44,019
simply understand how much it makes sense to

445
00:22:44,019 --> 00:22:47,830
exchange information about the sent

446
00:22:47,830 --> 00:22:50,019
like a hundred packets from the other side

447
00:22:50,019 --> 00:22:53,200
70 did not arrive so we lost

448
00:22:53,200 --> 00:22:57,309
30 this is important the

449
00:22:57,309 --> 00:22:59,289
more I do not send and the more I can do an

450
00:22:59,289 --> 00:23:02,980
adaptive protocol the less I send

451
00:23:02,980 --> 00:23:05,019
obviously more risk of  do

452
00:23:05,019 --> 00:23:10,350
direct overhead the total management

453
00:23:17,280 --> 00:23:19,890
[Music]

454
00:23:19,890 --> 00:23:22,990
the symbols prepared are the packages

455
00:23:22,990 --> 00:23:25,600
must all have the same size

456
00:23:25,600 --> 00:23:28,390
I seemed to understand this is how

457
00:23:28,390 --> 00:23:29,920
natural it is in the flow of

458
00:23:29,920 --> 00:23:32,800
communication that must replace you

459
00:23:32,800 --> 00:23:35,350
can think of having packages all there is

460
00:23:35,350 --> 00:23:37,480
one  big transfer are all

461
00:23:37,480 --> 00:23:37,900
full

462
00:23:37,900 --> 00:23:42,100
but if it is a

463
00:23:42,100 --> 00:23:44,980
dialogue negotiation interaction still the risk of having to

464
00:23:44,980 --> 00:23:47,260
fill general movie packets and dvds

465
00:23:47,260 --> 00:23:49,580


466
00:23:49,580 --> 00:23:53,030
the negotiation dialogue broadcasts

467
00:23:53,030 --> 00:23:54,810
are still at the beginning

468
00:23:54,810 --> 00:23:58,410
so it is easy that we are still in

469
00:23:58,410 --> 00:24:01,560
the check in phase

470
00:24:01,560 --> 00:24:06,139
so  maybe it does not concern us too much

471
00:24:06,950 --> 00:24:12,450
but nothing prevents us from having the fork having

472
00:24:12,450 --> 00:24:15,240
the dimension of the fixed symbol  ata is a

473
00:24:15,240 --> 00:24:19,320
problem mostly for the

474
00:24:19,320 --> 00:24:21,000
packet recovery because those will be

475
00:24:21,000 --> 00:24:23,070
a fixed size

476
00:24:23,070 --> 00:24:26,310
and if the user sends a packet with

477
00:24:26,310 --> 00:24:27,690
10 bytes

478
00:24:27,690 --> 00:24:29,850
I simply give myself the size

479
00:24:29,850 --> 00:24:32,070
length 10 bytes packet da vinci

480
00:24:32,070 --> 00:24:33,690
bytes then the rest is put on the page

481
00:24:33,690 --> 00:24:36,380
zero for example so

482
00:24:36,380 --> 00:24:40,430
so it's not a big deal anyway

483
00:24:40,430 --> 00:24:44,410
here the kernel does work for us because

484
00:24:44,410 --> 00:24:47,480
tcp is just a data stream unless

485
00:24:47,480 --> 00:24:49,310
the programmer has been careful to

486
00:24:49,310 --> 00:24:51,940
use specific options the kernel

487
00:24:51,940 --> 00:24:54,380
generally waits a while to

488
00:24:54,380 --> 00:24:56,570
fill the packet  before sending it

489
00:24:56,570 --> 00:25:00,080
in any case so to answer the

490
00:25:00,080 --> 00:25:03,500
question in a simple way the quantity

491
00:25:03,500 --> 00:25:05,120
of packages is generally

492
00:25:05,120 --> 00:25:08,350
not low enough

493
00:25:13,570 --> 00:25:16,720
to place if there are no other questions

494
00:25:16,720 --> 00:25:17,800
thank you

495
00:25:17,800 --> 00:25:25,129
[Applause]

