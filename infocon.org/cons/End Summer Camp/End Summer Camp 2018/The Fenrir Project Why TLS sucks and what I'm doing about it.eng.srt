1
00:00:00,000 --> 00:00:03,929
this is a remake of a lecture

2
00:00:03,929 --> 00:00:08,099
i had always done here in 2016 bland

3
00:00:08,099 --> 00:00:11,300
of a project i have been working

4
00:00:11,300 --> 00:00:15,259
on for some time

5
00:00:15,420 --> 00:00:18,260
is something i started at

6
00:00:18,260 --> 00:00:20,490
university as a master's thesis

7
00:00:20,490 --> 00:00:23,849
abstract of an

8
00:00:23,849 --> 00:00:27,230
encryption security transport protocol.  authentication

9
00:00:27,230 --> 00:00:31,110
is a work in progress still the work

10
00:00:31,110 --> 00:00:33,120
that needs to be done behind it if still a

11
00:00:33,120 --> 00:00:39,660
lot but before judo since

12
00:00:39,660 --> 00:00:40,980
this is an impromptu conference

13
00:00:40,980 --> 00:00:42,690
let's see if I still remember what

14
00:00:42,690 --> 00:00:45,230
this whole presentation includes

15
00:00:45,230 --> 00:00:49,260
then what it is

16
00:00:49,260 --> 00:00:51,420
like I told you before  it is a

17
00:00:51,420 --> 00:00:52,500
transport protocol

18
00:00:52,500 --> 00:00:54,510
we are trying to take

19
00:00:54,510 --> 00:00:59,180
everything you feel cp

20
00:00:59,180 --> 00:01:03,410
or even more and authentications such as

21
00:01:03,410 --> 00:01:05,510
kerberos for example and put them in a

22
00:01:05,510 --> 00:01:07,730
single package see what comes out

23
00:01:07,730 --> 00:01:12,500
is what the result of all this is

24
00:01:12,500 --> 00:01:18,260
a very compact tool thought

25
00:01:18,260 --> 00:01:23,350
to focus on safety it is

26
00:01:23,350 --> 00:01:25,820
extremely efficient

27
00:01:25,820 --> 00:01:28,330
the problem is a bit that we are going to

28
00:01:28,330 --> 00:01:31,430
break what is the classic pilla

29
00:01:31,430 --> 00:01:33,500
of pr  otocolli iso osi you are

30
00:01:33,500 --> 00:01:36,170
used to then classic

31
00:01:36,170 --> 00:01:40,970
transport protocol layer of sessions etc.

32
00:01:40,970 --> 00:01:46,580
maybe we will see better later in these

33
00:01:46,580 --> 00:01:47,800
are the topics that we will

34
00:01:47,800 --> 00:01:52,910
mainly deal with the focus of this

35
00:01:52,910 --> 00:01:54,890
project is to completely detach

36
00:01:54,890 --> 00:01:58,880
the authentication of the application

37
00:01:58,880 --> 00:02:02,229
from the management of its security

38
00:02:02,229 --> 00:02:05,930
as you can see all in all after

39
00:02:05,930 --> 00:02:08,179
all the authentication done in

40
00:02:08,179 --> 00:02:11,090
a completely federated way the first

41
00:02:11,090 --> 00:02:13,670
question is we seriously

42
00:02:13,670 --> 00:02:15,920
need a transport protocol in we have

43
00:02:15,920 --> 00:02:20,710
several batteries we have less

44
00:02:20,710 --> 00:02:23,950
so let

45
00:02:28,719 --> 00:02:37,900
's try to reconnect density

46
00:02:49,700 --> 00:02:53,400
I was hoping to have more battery but here it is

47
00:02:53,400 --> 00:02:56,330
old  it doesn't last long

48
00:03:06,860 --> 00:03:09,700
since you can

49
00:03:12,519 --> 00:03:16,370
continue the topic the

50
00:03:16,370 --> 00:03:18,760
transport protocol commonly used you all

51
00:03:18,760 --> 00:03:21,670
know a little bit there is the tc pilot of

52
00:03:21,670 --> 00:03:22,720
p

53
00:03:22,720 --> 00:03:24,760
how many of you know a little

54
00:03:24,760 --> 00:03:30,370
more advanced protocols such as sctp or ccp ever

55
00:03:30,370 --> 00:03:40,900
heard are are pro toga we are

56
00:03:40,900 --> 00:03:43,200
speaking of transport protocol,

57
00:03:43,200 --> 00:03:46,959
think about those born in 2001 for themselves

58
00:03:46,959 --> 00:03:51,159
ctp 2006 for  of ccp have not taken

59
00:03:51,159 --> 00:03:53,349
much hold because being protocols

60
00:03:53,349 --> 00:03:57,840
that are above ip they have the problem of

61
00:03:57,840 --> 00:04:00,389
[Music]

62
00:04:00,389 --> 00:04:03,069
a problem of going through

63
00:04:03,069 --> 00:04:04,780
firewalls do it generally they make you

64
00:04:04,780 --> 00:04:07,079
pass just what ethics most dp

65
00:04:07,079 --> 00:04:09,989
notice what they can the rest they

66
00:04:09,989 --> 00:04:14,609
throw it away and  enough but

67
00:04:15,400 --> 00:04:17,449
sctp a very

68
00:04:17,449 --> 00:04:20,358
interesting protocol because introduced the

69
00:04:20,358 --> 00:04:24,110
concept introduced two things the concept

70
00:04:24,110 --> 00:04:26,690
of multi streaming that is being able to

71
00:04:26,690 --> 00:04:28,430
have multiple data streams within

72
00:04:28,430 --> 00:04:31,940
the same connection is power and the

73
00:04:31,940 --> 00:04:35,920
power to decide whether that

74
00:04:35,920 --> 00:04:38,950
rai hubble transmission stream then tcp style

75
00:04:38,950 --> 00:04:41,950
or completely  areas liable therefore

76
00:04:41,950 --> 00:04:45,220
dp style and not to the mechanisms of 10 k behind

77
00:04:45,220 --> 00:04:48,700
to recover packets valeee if you have

78
00:04:48,700 --> 00:04:50,230
followed

79
00:04:50,230 --> 00:04:52,960
I imagine the evolutions of other

80
00:04:52,960 --> 00:04:55,870
protocols plus 9 minimum week type the

81
00:04:55,870 --> 00:04:59,530
team are protocols that try

82
00:04:59,530 --> 00:05:04,180
to bring minimal fan a focus more

83
00:05:04,180 --> 00:05:06,580
on security here than instead  others

84
00:05:06,580 --> 00:05:13,410
focus on more performance on

85
00:05:13,410 --> 00:05:17,320
trying to put tcp and tls together in

86
00:05:17,320 --> 00:05:19,180
one  only package they don't make a

87
00:05:19,180 --> 00:05:20,740
completely new protocol we are

88
00:05:20,740 --> 00:05:23,050
on ud ip to be able to pass

89
00:05:23,050 --> 00:05:31,030
through firewalls much easier and and

90
00:05:31,030 --> 00:05:35,260
it is used a lot now about the

91
00:05:35,260 --> 00:05:37,810
last figure 60 percent of

92
00:05:37,810 --> 00:05:39,100
traffic to youtube

93
00:05:39,100 --> 00:05:44,410
is now all about which however  a

94
00:05:44,410 --> 00:05:45,910
constantly evolving protocol also

95
00:05:45,910 --> 00:05:47,980
this quite new managed

96
00:05:47,980 --> 00:05:51,120
completely by google

97
00:05:52,700 --> 00:05:56,550
as encryption we have classic tls here

98
00:05:56,550 --> 00:05:59,190
which actually takes up minimal tls it is

99
00:05:59,190 --> 00:06:03,510
made by dj b if you know very famous

100
00:06:03,510 --> 00:06:08,790
cryptographer a focus purely on

101
00:06:08,790 --> 00:06:12,300
key encryption the ittic much

102
00:06:12,300 --> 00:06:15,290
more static not  it is flexible so with

103
00:06:15,290 --> 00:06:18,510
we can change it is not like pls where you

104
00:06:18,510 --> 00:06:20,190
can change ciphers etc. but it is

105
00:06:20,190 --> 00:06:22,650
very interesting if you want to

106
00:06:22,650 --> 00:06:23,570
take a look

107
00:06:23,570 --> 00:06:26,100
and then as authentication we have the

108
00:06:26,100 --> 00:06:28,919
classic kerberos which has

109
00:06:28,919 --> 00:06:30,840
clock synchronization problems

110
00:06:30,840 --> 00:06:33,960
as you know in kerberos if one self two

111
00:06:33,960 --> 00:06:36,870
computers  users try cassin

112
00:06:36,870 --> 00:06:40,530
kerberos hand schedules that are more than

113
00:06:40,530 --> 00:06:43,440
five minutes fuo  re one of

114
00:06:43,440 --> 00:06:46,790
the other the authentication does not work or out

115
00:06:46,790 --> 00:06:50,930
unfortunately for him I like very little and

116
00:06:50,930 --> 00:06:54,660
speed that by now as Italians you will know

117
00:06:54,660 --> 00:06:57,229
quite well has followed a bit of

118
00:06:57,229 --> 00:07:04,320
the evolution from the beginning so of

119
00:07:04,320 --> 00:07:06,960
various the various alternatives and we have

120
00:07:06,960 --> 00:07:09,919
however  already done that we have to choose

121
00:07:09,919 --> 00:07:13,200
between the many alternatives it is a problem

122
00:07:13,200 --> 00:07:16,400
for developers there is

123
00:07:16,400 --> 00:07:20,570
not a single protocol that brings us

124
00:07:20,570 --> 00:07:23,960
all together and put us on tlc limits

125
00:07:23,960 --> 00:07:27,199
to having for example connections all

126
00:07:27,199 --> 00:07:29,300
all liable therefore all style

127
00:07:29,300 --> 00:07:31,100
advances  we can not use anything

128
00:07:31,100 --> 00:07:33,680
ubp style and if we want to have something a

129
00:07:33,680 --> 00:07:36,350
little flexible we have a stack of 56

130
00:07:36,350 --> 00:07:39,050
different protocols plus all the

131
00:07:39,050 --> 00:07:41,990
problems that it carries with it or out

132
00:07:41,990 --> 00:07:44,750
where you never try to make

133
00:07:44,750 --> 00:07:46,400
your own implementation because you

134
00:07:46,400 --> 00:07:48,320
will be wrong wrong google

135
00:07:48,320 --> 00:07:52,039
wrong facebook  wrong it seems that

136
00:07:52,039 --> 00:07:52,780
twitter

137
00:07:52,780 --> 00:07:55,330
the implementation brought with them

138
00:07:55,330 --> 00:07:57,639
several security bugs not

139
00:07:57,639 --> 00:08:08,870
indifferent at the beginning ok then

140
00:08:08,870 --> 00:08:10,880
we talked before the canvas  some

141
00:08:10,880 --> 00:08:15,470
protocols yes by josie here you have more or

142
00:08:15,470 --> 00:08:17,900
less the classic stack of protocols that

143
00:08:17,900 --> 00:08:21,080
caused in web applications and with the

144
00:08:21,080 --> 00:08:23,380
temptation o out tls for encryption

145
00:08:23,380 --> 00:08:24,770
that

146
00:08:24,770 --> 00:08:26,720
you actually see that it has no

147
00:08:26,720 --> 00:08:31,550
direct consideration on the stack and you don't know

148
00:08:31,550 --> 00:08:33,260
where it should be  secure

149
00:08:33,260 --> 00:08:37,309
could be at level between 45 a little

150
00:08:37,309 --> 00:08:40,370
earlier even on the level of similar bisex picks

151
00:08:40,370 --> 00:08:46,100
but problem is that following

152
00:08:46,100 --> 00:08:47,840
this

153
00:08:47,840 --> 00:08:50,270
according to this classic stack you see that

154
00:08:50,270 --> 00:08:52,130
there are several protocols that

155
00:08:52,130 --> 00:08:53,720
implement for example the

156
00:08:53,720 --> 00:08:55,370
session level we have a tct session

157
00:08:55,370 --> 00:08:57,890
an obsession  tls a session for the

158
00:08:57,890 --> 00:09:00,500
cookies of our web applications a

159
00:09:00,500 --> 00:09:03,350
session but out in the middle we have http

160
00:09:03,350 --> 00:09:09,110
that does not usually manage

161
00:09:09,110 --> 00:09:11,600
everything in your application a nice

162
00:09:11,600 --> 00:09:13,750
mess

163
00:09:14,410 --> 00:09:17,170
gets worse as we said before if you want to

164
00:09:17,170 --> 00:09:20,330
start using multi stack to

165
00:09:20,330 --> 00:09:22,520
manage

166
00:09:22,520 --> 00:09:26,030
I don't know audio video stream  stuff

167
00:09:26,030 --> 00:09:28,100
like that for multicast you have to do them

168
00:09:28,100 --> 00:09:30,650
all love security including there is

169
00:09:30,650 --> 00:09:33,940
absolutely nothing  you who saved you

170
00:09:33,940 --> 00:09:38,680
we were talking about biotech speed

171
00:09:38,680 --> 00:09:47,460
here is what it does here then ok

172
00:09:47,460 --> 00:09:48,740
[Music]

173
00:09:48,740 --> 00:09:50,780
the problem is always in the layer here that

174
00:09:50,780 --> 00:09:52,820
mini minds try to put together

175
00:09:52,820 --> 00:09:55,870
tcp and tls

176
00:09:56,380 --> 00:10:00,980
or auto is always above

177
00:10:00,980 --> 00:10:02,570
all the applications you find today

178
00:10:02,570 --> 00:10:05,030
anyway  they do not use the

179
00:10:05,030 --> 00:10:07,520
authentication that you can find

180
00:10:07,520 --> 00:10:11,660
in tls because problematic to manage

181
00:10:11,660 --> 00:10:16,400
you have to pass it to me from prs august

182
00:10:16,400 --> 00:10:18,980
web browser to big excuse web server that afterwards

183
00:10:18,980 --> 00:10:23,180
has to pass to the application there are a

184
00:10:23,180 --> 00:10:24,740
few steps in the means they are not in the

185
00:10:24,740 --> 00:10:26,510
middle nobody uses it

186
00:10:26,510 --> 00:10:28,370
the  main problem of these

187
00:10:28,370 --> 00:10:30,550
indications is that they are not

188
00:10:30,550 --> 00:10:34,880
even federated or out that when you see the

189
00:10:34,880 --> 00:10:37,430
facebook login button then

190
00:10:37,430 --> 00:10:41,660
google always all out is a

191
00:10:41,660 --> 00:10:47,260
semi-federated system in the sense that as

192
00:10:47,260 --> 00:10:50,540
long as my site trusts

193
00:10:50,540 --> 00:10:50,990
google

194
00:10:50,990 --> 00:10:52,970
I have to explicitly put  dl

195
00:10:52,970 --> 00:10:56,420
google login button, however, since

196
00:10:56,420 --> 00:10:58,130
the car works with web pages

197
00:10:58,130 --> 00:11:00,640
the authentication on a certain web page

198
00:11:00,640 --> 00:11:04,640
each implementer a page

199
00:11:04,640 --> 00:11:07,160
different web which among other things

200
00:11:07,160 --> 00:11:09,140
slightly different parameters and therefore either you have

201
00:11:09,140 --> 00:11:11,810
the implementation for google for

202
00:11:11,810 --> 00:11:16,250
facebook for twitter or you don't

203
00:11:16,250 --> 00:11:19,010
have an authentication so a

204
00:11:19,010 --> 00:11:21,050
semi-federated system because we have

205
00:11:21,050 --> 00:11:22,610
different federations google facebook

206
00:11:22,610 --> 00:11:25,600
etc. but they don't talk to each other  of them

207
00:11:25,600 --> 00:11:28,310
as we described before the layering

208
00:11:28,310 --> 00:11:30,529
c

209
00:11:30,529 --> 00:11:33,230
leads us to manage security at

210
00:11:33,230 --> 00:11:37,120
the application level so

211
00:11:37,120 --> 00:11:40,249
we took a problem that we had to

212
00:11:40,249 --> 00:11:42,459
manage at the tls level we

213
00:11:42,459 --> 00:11:46,220
postponed it each time a higher layer and

214
00:11:46,220 --> 00:11:48,199
so it's all stuff that has to manage  the

215
00:11:48,199 --> 00:11:51,379
programmer programmer in reality if he

216
00:11:51,379 --> 00:11:53,300
had a tool that could

217
00:11:53,300 --> 00:11:56,389
manage authentication and security for

218
00:11:56,389 --> 00:11:59,180
his own he would use as they try to do now

219
00:11:59,180 --> 00:12:05,569
with libraries for however high end is

220
00:12:05,569 --> 00:12:09,610
again everything I have out speed etc.

221
00:12:09,610 --> 00:12:14,240
is managed via http that a

222
00:12:14,240 --> 00:12:16,689
efficiency level is crap

223
00:12:16,689 --> 00:12:20,540
we have seven eight hour direct series

224
00:12:20,540 --> 00:12:23,180
in the middle we go through two divers web browsers

225
00:12:23,180 --> 00:12:27,430
i as we see for use shaun below

226
00:12:27,430 --> 00:12:30,759
this is taken directly from the

227
00:12:30,759 --> 00:12:32,329
speed specifications

228
00:12:32,329 --> 00:12:35,509
i am not explaining it was a lot but you can

229
00:12:35,509 --> 00:12:38,019
imagine how problematic it is also

230
00:12:38,019 --> 00:12:40,670
having to manage the radars and why this

231
00:12:40,670 --> 00:12:42,649
means that your applications

232
00:12:42,649 --> 00:12:45,350
actually every time you use or car they

233
00:12:45,350 --> 00:12:48,079
need  of an internal web server then

234
00:12:48,079 --> 00:12:50,420
other things that can go wrong

235
00:12:50,420 --> 00:12:52,579
the other added complexity is moved

236
00:12:52,579 --> 00:12:56,809
to the application level so to

237
00:12:56,809 --> 00:12:58,490
solve everything and what

238
00:12:58,490 --> 00:13:00,529
we take the federation at the kerberos level we

239
00:13:00,529 --> 00:13:04,759
perform the 44 roles that

240
00:13:04,759 --> 00:13:06,170
can be had

241
00:13:06,170 --> 00:13:10,860
we have the application the manager who

242
00:13:10,860 --> 00:13:16,530
the let's say the

243
00:13:16,530 --> 00:13:21,180
client-side kerberos server that you use for example active

244
00:13:21,180 --> 00:13:24,120
directory that simply

245
00:13:24,120 --> 00:13:25,980
an application that will manage you after

246
00:13:25,980 --> 00:13:29,730
your your authentications

247
00:13:29,730 --> 00:13:31,830
forced then security

248
00:13:31,830 --> 00:13:33,420
the authentication server that the

249
00:13:33,420 --> 00:13:35,160
counterpart from the server side the service

250
00:13:35,160 --> 00:13:41,190
that can be web pages or

251
00:13:41,190 --> 00:13:43,280
anything else

252
00:13:43,280 --> 00:13:46,800
this leads to a sharp separation

253
00:13:46,800 --> 00:13:51,210
of goals  therefore we can

254
00:13:51,210 --> 00:13:52,440
make sure that applications and

255
00:13:52,440 --> 00:13:54,480
services do not have access to each

256
00:13:54,480 --> 00:13:58,170
other have no excuse we

257
00:13:58,170 --> 00:14:01,530
do not have access to

258
00:14:01,530 --> 00:14:03,660
the user authentication database to tokens

259
00:14:03,660 --> 00:14:06,240
that instead with out you have to manage all of

260
00:14:06,240 --> 00:14:09,060
you who have to save the token of

261
00:14:09,060 --> 00:14:11,860
that user if  a replay itself

262
00:14:11,860 --> 00:14:14,500
there are libraries that give you

263
00:14:14,500 --> 00:14:17,760
a hand a little but up to a certain point

264
00:14:18,269 --> 00:14:22,170
by dryly separating these two things

265
00:14:22,170 --> 00:14:25,990
we will practically have a kind of

266
00:14:25,990 --> 00:14:29,829
blackbird kerberos tls that will manage the claim

267
00:14:29,829 --> 00:14:32,019
manager the authentic shaun server and

268
00:14:32,019 --> 00:14:33,610
your application apart from loading

269
00:14:33,610 --> 00:14:35,050
that library will not have to see

270
00:14:35,050 --> 00:14:36,610
absolutely anything because even that

271
00:14:36,610 --> 00:14:38,820
library itself will not have access to

272
00:14:38,820 --> 00:14:44,890
authentication information with respect

273
00:14:44,890 --> 00:14:50,579
to kerberos the novelties are that it

274
00:14:50,579 --> 00:14:54,010
uses tokens as like kerberos so

275
00:14:54,010 --> 00:14:57,070
after a first use of your

276
00:14:57,070 --> 00:14:59,500
passwords to verify that it is

277
00:14:59,500 --> 00:15:04,630
really you you pass  finger use that

278
00:15:04,630 --> 00:15:07,750
generated instantly that can

279
00:15:07,750 --> 00:15:10,089
be tracked and erased

280
00:15:10,089 --> 00:15:14,410
instantly that can track you

281
00:15:14,410 --> 00:15:15,640
are built in such a way that they track you

282
00:15:15,640 --> 00:15:20,440
not only not only

283
00:15:20,440 --> 00:15:23,320
the application but also the device on which

284
00:15:23,320 --> 00:15:25,420
it was indicating so I don't know for

285
00:15:25,420 --> 00:15:27,600
example lose to the mobile phone

286
00:15:27,600 --> 00:15:29,890
unlock everything for the mobile phone

287
00:15:29,890 --> 00:15:31,920
until you have found it again or

288
00:15:31,920 --> 00:15:34,630
definitively  delete the token you have

289
00:15:34,630 --> 00:15:40,029
seen upset and fine because there is a

290
00:15:40,029 --> 00:15:43,329
management of the dl also touches on the

291
00:15:43,329 --> 00:15:47,649
server side that allows you to do this the

292
00:15:47,649 --> 00:15:50,440
services are in turn identified

293
00:15:50,440 --> 00:15:52,290
by tokens

294
00:15:52,290 --> 00:15:54,959
and this allows us to

295
00:15:54,959 --> 00:15:57,570
completely detach from the identification

296
00:15:57,570 --> 00:16:01,550
of the service  as simply dupla of

297
00:16:01,550 --> 00:16:05,160
protocol ports tiple web server gp80

298
00:16:05,160 --> 00:16:10,290
tcp 443 if I want to use sl it is a

299
00:16:10,290 --> 00:16:12,000
very nice thing that allows us to do is

300
00:16:12,000 --> 00:16:14,339
that it allows us to put any

301
00:16:14,339 --> 00:16:18,029
service on any set of ports or or

302
00:16:18,029 --> 00:16:23,399
other that allows us to get out

303
00:16:23,399 --> 00:16:29,069
of the dl problem  manage the two

304
00:16:29,069 --> 00:16:32,279
problems, one of virtual hosting and

305
00:16:32,279 --> 00:16:35,209
two that of the fact that ports

306
00:16:35,209 --> 00:16:37,620
less than 1024 are

307
00:16:37,620 --> 00:16:39,300
therefore privileged ports  theoretically only

308
00:16:39,300 --> 00:16:41,490
broken pay it so we are

309
00:16:41,490 --> 00:16:43,709
even moving all the management of the

310
00:16:43,709 --> 00:16:45,660
applications completely in the user

311
00:16:45,660 --> 00:16:49,589
themselves in short, it is one more thing always

312
00:16:49,589 --> 00:16:54,870
for security as before it is one we are

313
00:16:54,870 --> 00:16:56,430
talking about federated authentication and

314
00:16:56,430 --> 00:16:59,730
therefore you could have your

315
00:16:59,730 --> 00:17:01,230
authentication server for the domain you

316
00:17:01,230 --> 00:17:04,459
prefer  you, however, the federation is

317
00:17:04,459 --> 00:17:10,890
built within

318
00:17:10,890 --> 00:17:12,750
the protocol so I my

319
00:17:12,750 --> 00:17:16,500
authentication server, ideally google

320
00:17:16,500 --> 00:17:18,449
would have them able to speak

321
00:17:18,449 --> 00:17:20,540
automatically whatever mine

322
00:17:20,540 --> 00:17:24,409
is, we don't need to agree with

323
00:17:24,409 --> 00:17:28,250
additional trusts for

324
00:17:28,250 --> 00:17:32,010
I don't know with  how it happens, however, that

325
00:17:32,010 --> 00:17:34,140
the button for google for facebook must have,

326
00:17:34,140 --> 00:17:39,540
however, you as a client

327
00:17:39,540 --> 00:17:41,550
will have to rely on your

328
00:17:41,550 --> 00:17:43,320
authentication server so again you can

329
00:17:43,320 --> 00:17:46,110
study your normal domain up

330
00:17:46,110 --> 00:17:47,910
to a certain point in reality because for

331
00:17:47,910 --> 00:17:51,870
how it is built all that unfortunately

332
00:17:51,870 --> 00:17:53,310
we do not have  time to go into very

333
00:17:53,310 --> 00:17:56,280
good details but  if your

334
00:17:56,280 --> 00:18:00,260
authentication server is also punctured

335
00:18:00,260 --> 00:18:06,710
the attacker will not be able to impersonate them

336
00:18:06,710 --> 00:18:09,600
within the services you live on

337
00:18:09,600 --> 00:18:12,390
authenticate which instead on auto

338
00:18:12,390 --> 00:18:13,890
still happens yes obu with

339
00:18:13,890 --> 00:18:15,630
application server or out

340
00:18:15,630 --> 00:18:22,050
I have control of all of all

341
00:18:22,050 --> 00:18:28,290
users  that the workflow is a bit

342
00:18:28,290 --> 00:18:31,140
classic as we said before we have the

343
00:18:31,140 --> 00:18:33,450
separation 3 4 roles the application

344
00:18:33,450 --> 00:18:35,130
that connects to the train manager simply tells him

345
00:18:35,130 --> 00:18:37,650
I want to authenticate here

346
00:18:37,650 --> 00:18:40,920
it also tells him with which user the club

347
00:18:40,920 --> 00:18:44,780
manager will then ask the user with which

348
00:18:44,780 --> 00:18:47,070
account  wants to authenticate in that

349
00:18:47,070 --> 00:18:49,680
service will manage all the

350
00:18:49,680 --> 00:18:52,110
authentication part and then it will

351
00:18:52,110 --> 00:18:57,480
simply be said service that there is a

352
00:18:57,480 --> 00:19:00,090
new user connected and this generates the

353
00:19:00,090 --> 00:19:01,530
encryption keys that will be

354
00:19:01,530 --> 00:19:02,990
sent back all the application

355
00:19:02,990 --> 00:19:05,700
of new realities there is security in the

356
00:19:05,700 --> 00:19:09,150
means by which the authentication server,

357
00:19:09,150 --> 00:19:10,920
despite making a for

358
00:19:10,920 --> 00:19:12,510
words of the authentication key,

359
00:19:12,510 --> 00:19:16,340
cannot encrypt it, cannot use  le to

360
00:19:16,340 --> 00:19:21,080
decrypt the data in transit etc.

361
00:19:21,440 --> 00:19:24,410
which also leads us to have

362
00:19:24,410 --> 00:19:27,240
connections after authenticated

363
00:19:27,240 --> 00:19:30,960
that are without additional round trips

364
00:19:30,960 --> 00:19:34,700
for data etc.

365
00:19:34,700 --> 00:19:39,780
we talked about the efficiency of

366
00:19:39,780 --> 00:19:41,280
the packet management

367
00:19:41,280 --> 00:19:46,830
here you can see the structure in

368
00:19:46,830 --> 00:19:49,440
byte of what there  it is used for a

369
00:19:49,440 --> 00:19:52,970
tcp connection with tls and we are still

370
00:19:52,970 --> 00:19:55,530
ignoring the whole part in http because

371
00:19:55,530 --> 00:19:58,679
now everything must run in http and they

372
00:19:58,679 --> 00:20:03,450
are with you see several huts in reality

373
00:20:03,450 --> 00:20:05,210
going into details there are again

374
00:20:05,210 --> 00:20:07,980
several repeated parts that

375
00:20:07,980 --> 00:20:12,570
would not serve to infer the only one instead

376
00:20:12,570 --> 00:20:15,750
what in clear is the

377
00:20:15,750 --> 00:20:18,330
connection of a header for encryption

378
00:20:18,330 --> 00:20:20,400
because you need a minimum to be able to

379
00:20:20,400 --> 00:20:24,240
decrypt the single packet in

380
00:20:24,240 --> 00:20:27,330
its own right and then everything else encrypted you can

381
00:20:27,330 --> 00:20:29,120
see absolutely nothing

382
00:20:29,120 --> 00:20:32,730
while even with tls you see what

383
00:20:32,730 --> 00:20:35,570
as version

384
00:20:35,600 --> 00:20:38,850
also type that identifies the

385
00:20:38,850 --> 00:20:41,940
date type and other data type and other

386
00:20:41,940 --> 00:20:43,890
small things may be in the clear but

387
00:20:43,890 --> 00:20:45,630
the worst part is that the whole  apart from

388
00:20:45,630 --> 00:20:48,870
tcp and clear so I could

389
00:20:48,870 --> 00:20:51,150
reset the connections of those who want

390
00:20:51,150 --> 00:20:53,430
this on vacation in reality it is not

391
00:20:53,430 --> 00:20:58,500
possible again as we have seen the

392
00:20:58,500 --> 00:21:00,780
part in green

393
00:21:00,780 --> 00:21:03,930
sure the repeatable part of paddling

394
00:21:03,930 --> 00:21:05,850
so I can have more streams of

395
00:21:05,850 --> 00:21:08,100
connections in even a  single

396
00:21:08,100 --> 00:21:10,590
packet that can decide in each

397
00:21:10,590 --> 00:21:13,680
streams do it three lai a bollore liable

398
00:21:13,680 --> 00:21:15,450
whether to enable

399
00:21:15,450 --> 00:21:17,510
retransmission mechanisms for packet loss

400
00:21:17,510 --> 00:21:21,540
ordered or not if I want to give you

401
00:21:21,540 --> 00:21:23,160
ordered or not in reception

402
00:21:23,160 --> 00:21:25,590
of the application if they want it to data

403
00:21:25,590 --> 00:21:26,730
stream data g

404
00:21:26,730 --> 00:21:29,010
that is if I want it with  a stream of

405
00:21:29,010 --> 00:21:31,400
data in a structured tcp style and after

406
00:21:31,400 --> 00:21:33,390
you manage there it starts at the end of

407
00:21:33,390 --> 00:21:36,870
the messages or if su

408
00:21:36,870 --> 00:21:39,060
directly manages the protocol at the beginning and

409
00:21:39,060 --> 00:21:45,000
at the end the nice thing about having the

410
00:21:45,000 --> 00:21:50,280
dry connection lines so generated

411
00:21:50,280 --> 00:21:57,030
for not having  the classic the classic on

412
00:21:57,030 --> 00:21:59,460
sport destination port we have

413
00:21:59,460 --> 00:22:03,540
free things like the multi homing roaming

414
00:22:03,540 --> 00:22:05,230
station

415
00:22:05,230 --> 00:22:09,050
so simply I cell phone put

416
00:22:09,050 --> 00:22:10,940
with wifi networks after a while I move to

417
00:22:10,940 --> 00:22:12,950
another wifi network the connection auction

418
00:22:12,950 --> 00:22:16,880
on regardless of

419
00:22:16,880 --> 00:22:20,000
who manages the two wifi networks to

420
00:22:20,000 --> 00:22:21,380
new things that we can also manage the

421
00:22:21,380 --> 00:22:26,990
multicast we need a bit again to

422
00:22:26,990 --> 00:22:28,850
go back to the public key encryption

423
00:22:28,850 --> 00:22:31,610
private we cannot purely stay on

424
00:22:31,610 --> 00:22:33,559
the symmetrical one because we need

425
00:22:33,559 --> 00:22:36,110
to identify who is sending the packet

426
00:22:36,110 --> 00:22:37,880
otherwise there are some

427
00:22:37,880 --> 00:22:40,970
possible ailments in the middle but this would be

428
00:22:40,970 --> 00:22:43,960
the first protocol that manages to give

429
00:22:43,960 --> 00:22:48,500
multicast reliable because it uses another

430
00:22:48,500 --> 00:22:51,410
error decoration library where

431
00:22:51,410 --> 00:22:54,800
substantially  I send but of my data

432
00:22:54,800 --> 00:22:57,850
I send an additional data stream to

433
00:22:57,850 --> 00:23:00,620
allow me to recover any

434
00:23:00,620 --> 00:23:02,510
number of lost packets I just have to

435
00:23:02,510 --> 00:23:05,140
decide how much more stuff to send I

436
00:23:05,140 --> 00:23:07,670
add another stream

437
00:23:07,670 --> 00:23:10,460
juni cast for why single clients

438
00:23:10,460 --> 00:23:12,110
can ask from traditional

439
00:23:12,110 --> 00:23:14,690
this way I have something that is a lot

440
00:23:14,690 --> 00:23:18,170
similar to a multicast quite relae

441
00:23:18,170 --> 00:23:24,080
ball going on like like yes  love

442
00:23:24,080 --> 00:23:28,760
careful the other speaker has arrived

443
00:23:28,760 --> 00:23:30,830
ok then I will try to detail very

444
00:23:30,830 --> 00:23:33,790
very short

445
00:23:35,630 --> 00:23:38,809
we talked about authentication and the

446
00:23:38,809 --> 00:23:39,980
main problem of authentication

447
00:23:39,980 --> 00:23:43,190
is always where the trust comes from ssl

448
00:23:43,190 --> 00:23:45,320
certificate certificates need

449
00:23:45,320 --> 00:23:47,510
a certificate authority we have seen

450
00:23:47,510 --> 00:23:49,490
the mess that is  possible with in the

451
00:23:49,490 --> 00:23:51,620
past years with all the

452
00:23:51,620 --> 00:23:54,890
certificate authorities all certificates have also

453
00:23:54,890 --> 00:23:58,370
been generated also for

454
00:23:58,370 --> 00:23:59,900
fraudulently even for entities such as

455
00:23:59,900 --> 00:24:01,880
google.com

456
00:24:01,880 --> 00:24:04,850
so I decided to throw away all the

457
00:24:04,850 --> 00:24:07,190
management of certificates and to move

458
00:24:07,190 --> 00:24:09,400
the authentication directly to dns  sec

459
00:24:09,400 --> 00:24:12,440
that the secure version of bns where

460
00:24:12,440 --> 00:24:14,120
we simply put

461
00:24:14,120 --> 00:24:16,340
our public churches in a structured way

462
00:24:16,340 --> 00:24:18,380
directly there we have control

463
00:24:18,380 --> 00:24:22,340
of the business and this allows

464
00:24:22,340 --> 00:24:24,740
us to manage the renewal of the keys

465
00:24:24,740 --> 00:24:26,060
of anything else

466
00:24:26,060 --> 00:24:29,300
directly from us we have no other

467
00:24:29,300 --> 00:24:32,780
intermediaries in the middle  not to mention

468
00:24:32,780 --> 00:24:36,320
all the complexity in parsing 5  09

469
00:24:36,320 --> 00:24:38,480
I just tell you that in minutes and reads I think there

470
00:24:38,480 --> 00:24:41,660
are 35,000 lines of code just for

471
00:24:41,660 --> 00:24:47,780
parsing the certificates let's skip pollein

472
00:24:47,780 --> 00:24:51,730
sheikh just say that there

473
00:24:51,730 --> 00:24:57,260
are several different types of reeds available

474
00:24:57,260 --> 00:24:59,600
that depending on how efficient

475
00:24:59,600 --> 00:25:02,270
we want to have it for obviously more

476
00:25:02,270 --> 00:25:03,560
efficient there  we have it there is at least

477
00:25:03,560 --> 00:25:06,950
entangled we have and the more we risk

478
00:25:06,950 --> 00:25:09,530
something in security even if we

479
00:25:09,530 --> 00:25:11,570
generally speak only of god it is

480
00:25:11,570 --> 00:25:16,220
if possible also this we can

481
00:25:16,220 --> 00:25:19,100
substantially skip there are

482
00:25:19,100 --> 00:25:21,350
seven additional secrets between client and

483
00:25:21,350 --> 00:25:23,510
authentication server and

484
00:25:23,510 --> 00:25:27,410
final services for which like  I said before even

485
00:25:27,410 --> 00:25:29,150
if the authentic shaun server pierces

486
00:25:29,150 --> 00:25:34,220
me and I am forced to regenerate

487
00:25:34,220 --> 00:25:36,730
these certificates

488
00:25:36,770 --> 00:25:39,590
the attacker cannot use the hotel the

489
00:25:39,590 --> 00:25:41,000
data of the authentic shaun server

490
00:25:41,000 --> 00:25:43,070
mathematically precisely to impersonate

491
00:25:43,070 --> 00:25:45,180


492
00:25:45,180 --> 00:25:48,030
my users from the various services where there

493
00:25:48,030 --> 00:25:50,220
are  a house where there are many

494
00:25:50,220 --> 00:25:54,570
cati and in fact once I regenerate

495
00:25:54,570 --> 00:25:56,370
these certificates I am automatically

496
00:25:56,370 --> 00:25:59,430
declaring  r by all users this not

497
00:25:59,430 --> 00:26:00,690
these certificates these secrets

498
00:26:00,690 --> 00:26:02,940
shared automatically declaring

499
00:26:02,940 --> 00:26:05,010
all users that my server

500
00:26:05,010 --> 00:26:07,710
has been pierced and that they check

501
00:26:07,710 --> 00:26:11,750
before re-authentication

502
00:26:11,750 --> 00:26:17,550
subsequent will ensure final novelty

503
00:26:17,550 --> 00:26:24,720
we have an authentication graph where

504
00:26:24,720 --> 00:26:27,180
we can define in a structured way

505
00:26:27,180 --> 00:26:33,990
a hierarchy of  possible of the

506
00:26:33,990 --> 00:26:36,840
possible permissions that a con

507
00:26:36,840 --> 00:26:38,580
klein can have these permissions

508
00:26:38,580 --> 00:26:43,200
are forcing the

509
00:26:43,200 --> 00:26:45,850
authentication server side on the

510
00:26:45,850 --> 00:26:49,419
frank manager side so I can say for

511
00:26:49,419 --> 00:26:53,440
example my mobile phone will only have

512
00:26:53,440 --> 00:26:55,809


513
00:26:55,809 --> 00:26:58,090
read-only authorization for this service and then

514
00:26:58,090 --> 00:27:00,820
maybe from a mobile phone

515
00:27:00,820 --> 00:27:03,340
further limit if there was something under

516
00:27:03,340 --> 00:27:07,750
read-only for that service is

517
00:27:07,750 --> 00:27:09,730
again this is completely separate

518
00:27:09,730 --> 00:27:11,350
from the application management so

519
00:27:11,350 --> 00:27:13,059
the application is with one type of

520
00:27:13,059 --> 00:27:15,760
authorization and you keep that

521
00:27:15,760 --> 00:27:19,390
then unless you have bugs or something else inside

522
00:27:19,390 --> 00:27:24,640
the  service e  the application is

523
00:27:24,640 --> 00:27:27,760
limited by the protocol to that level

524
00:27:27,760 --> 00:27:32,200
of authorization this final data

525
00:27:32,200 --> 00:27:35,890
the user must never use his

526
00:27:35,890 --> 00:27:36,789
username and

527
00:27:36,789 --> 00:27:38,679
password apart from the very first time onwards false

528
00:27:38,679 --> 00:27:40,960
tap of the clan manager because then everything

529
00:27:40,960 --> 00:27:43,890
else is managed tokens and that's it  give

530
00:27:43,890 --> 00:27:48,429
the service an authentication confirmation

531
00:27:48,429 --> 00:27:50,260
so my web application

532
00:27:50,260 --> 00:27:52,840
for example does not see authentication

533
00:27:52,840 --> 00:27:56,559
data authentication does not even see the

534
00:27:56,559 --> 00:28:00,580
client side counterpart and a new one

535
00:28:00,580 --> 00:28:03,010
we have limits from the protocol

536
00:28:03,010 --> 00:28:04,990
managed by separate applications so

537
00:28:04,990 --> 00:28:07,900
it is not the single application that is

538
00:28:07,900 --> 00:28:09,880
strive to stay jean ping on

539
00:28:09,880 --> 00:28:14,400
reading as he says no we said before

540
00:28:15,059 --> 00:28:16,900
simply it was the project

541
00:28:16,900 --> 00:28:18,340
we have error correction libraries

542
00:28:18,340 --> 00:28:20,570
now unstable

543
00:28:20,570 --> 00:28:23,779
ferrer instead as a protocol

544
00:28:23,779 --> 00:28:28,720
still quite in development

545
00:28:29,139 --> 00:28:31,220
I think I have gone a little further in

546
00:28:31,220 --> 00:28:32,929
time so if you have some

547
00:28:32,929 --> 00:28:35,539
quick questions if  no, let's immediately leave

548
00:28:35,539 --> 00:28:37,639
the floor to the next speaker for

549
00:28:37,639 --> 00:28:40,059
blender

550
00:28:49,330 --> 00:28:57,050
if you want silo as axis to talk out

551
00:28:57,050 --> 00:28:59,649
as much as you want

552
00:29:01,640 --> 00:29:04,700
to agree then we will get back

553
00:29:04,700 --> 00:29:06,500
to agreement and we will see if it can be put back

554
00:29:06,500 --> 00:29:10,070
or maybe even in the lineup so

555
00:29:10,070 --> 00:29:13,450
they also see other

556
00:29:17,210 --> 00:29:20,880
thanks for your attention but their

557
00:29:20,880 --> 00:29:23,180
people

558
00:29:23,810 --> 00:29:27,069
[Applause]

