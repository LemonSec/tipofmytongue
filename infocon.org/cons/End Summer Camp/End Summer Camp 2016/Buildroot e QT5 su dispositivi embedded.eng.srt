1
00:00:00,000 --> 00:00:02,399
hi everyone i am giovanni marchetto

2
00:00:02,399 --> 00:00:05,700
and i am here to present boyd router or qt

3
00:00:05,700 --> 00:00:10,530
5 on embedded devices this

4
00:00:10,530 --> 00:00:12,360
presentation i will give an hour for a quick

5
00:00:12,360 --> 00:00:16,710
look at bild ruth associated with

6
00:00:16,710 --> 00:00:21,060
points 5 to create embedded devices

7
00:00:21,060 --> 00:00:23,250
that can be used

8
00:00:23,250 --> 00:00:28,890
on various machines and  heterogeneous let

9
00:00:28,890 --> 00:00:30,390
's define for a moment what are the

10
00:00:30,390 --> 00:00:34,309
embedded linux systems are systems that

11
00:00:34,309 --> 00:00:36,480
substantially have limited

12
00:00:36,480 --> 00:00:39,660
computing power even if in the last

13
00:00:39,660 --> 00:00:43,140
period we say it is not really true

14
00:00:43,140 --> 00:00:46,140
in the sense that there has been a significant

15
00:00:46,140 --> 00:00:48,360
increase in power on

16
00:00:48,360 --> 00:00:52,230
embedded processors and normally  were

17
00:00:52,230 --> 00:00:54,840
used for specific projects so it

18
00:00:54,840 --> 00:00:58,829
will be a specific design

19
00:00:58,829 --> 00:01:00,930
based on the role that the device had to adopt

20
00:01:00,930 --> 00:01:05,610
have reduced consumption and

21
00:01:05,610 --> 00:01:08,130


22
00:01:08,130 --> 00:01:11,220
very light and optimized linux operating systems or similar must be adopted

23
00:01:11,220 --> 00:01:13,409
because precisely the resources to

24
00:01:13,409 --> 00:01:14,970
be managed inside the device

25
00:01:14,970 --> 00:01:21,810
are  limited for our project

26
00:01:21,810 --> 00:01:24,420
we have true  After a moment all the

27
00:01:24,420 --> 00:01:26,000
solutions that were present on the market

28
00:01:26,000 --> 00:01:29,100
and among which we also tested a

29
00:01:29,100 --> 00:01:33,570
module a sum called acqua a 5

30
00:01:33,570 --> 00:01:35,850
this sleep and produced by the acme

31
00:01:35,850 --> 00:01:38,880
system which is a company in rome mounts

32
00:01:38,880 --> 00:01:45,149
a cpu sama 5 of 31 to 536 makers as

33
00:01:45,149 --> 00:01:49,350
a 256 and 512 mega of ram has integrated

34
00:01:49,350 --> 00:01:53,369
a micro sd and optionally 256

35
00:01:53,369 --> 00:01:56,040
megabytes of flash on board as you can see

36
00:01:56,040 --> 00:02:00,689
from the diagram some interfaces

37
00:02:00,689 --> 00:02:04,710
aspire to up to six serial ports some

38
00:02:04,710 --> 00:02:09,330
usb ports audio output and

39
00:02:09,330 --> 00:02:11,780
the bug interface integrated on the card

40
00:02:11,780 --> 00:02:15,270
combined with  this is an

41
00:02:15,270 --> 00:02:18,960
evaluation board called open at 5 which

42
00:02:18,960 --> 00:02:23,310
is available with a 4.3 5 7 inch lcd display

43
00:02:23,310 --> 00:02:25,800
with resistive touchscreen which in

44
00:02:25,800 --> 00:02:28,200
this case if it were to be used

45
00:02:28,200 --> 00:02:30,570
as a proposed operator is excellent because it

46
00:02:30,570 --> 00:02:33,960
does not need the capacitive of the

47
00:02:33,960 --> 00:02:35,460
need to eventually take off the

48
00:02:35,460 --> 00:02:38,460
gloves adopts an ethernet 10 100

49
00:02:38,460 --> 00:02:41,640
integrated two usb ports has precisely the

50
00:02:41,640 --> 00:02:42,890
support

51
00:02:42,890 --> 00:02:46,080
in short here at 5 directly in the piggy

52
00:02:46,080 --> 00:02:48,750
back and all the lines do not  n used of

53
00:02:48,750 --> 00:02:51,570
sleep are displayed on the peace pads of

54
00:02:51,570 --> 00:02:54,260
100 mills

55
00:02:55,230 --> 00:02:59,340
let's see a moment at 45 bis versus the

56
00:02:59,340 --> 00:03:01,470
other cards let's say general purpose

57
00:03:01,470 --> 00:03:04,440
embedded there are dozens of them are

58
00:03:04,440 --> 00:03:07,620
really coming out like never before in

59
00:03:07,620 --> 00:03:10,290
this period there is the ras gharib i 123

60
00:03:10,290 --> 00:03:12,780
the banana stack beagle bonn which have

61
00:03:12,780 --> 00:03:14,730
much higher performance

62
00:03:14,730 --> 00:03:17,400
than water have great

63
00:03:17,400 --> 00:03:20,010
community support but also

64
00:03:20,010 --> 00:03:21,570
have disadvantages

65
00:03:21,570 --> 00:03:23,610
if we have to adopt these types

66
00:03:23,610 --> 00:03:26,400
of cards for a long-

67
00:03:26,400 --> 00:03:28,739
term project they cannot be considered

68
00:03:28,739 --> 00:03:32,190
because no one gives the certainty of how much

69
00:03:32,190 --> 00:03:35,310
are produced in terms of time and

70
00:03:35,310 --> 00:03:37,170
therefore you may find yourself

71
00:03:37,170 --> 00:03:39,420
in the event that you have developed a

72
00:03:39,420 --> 00:03:40,980
project and then the board that you have to

73
00:03:40,980 --> 00:03:42,570
use that you have to

74
00:03:42,570 --> 00:03:44,430
use for this project is perhaps no

75
00:03:44,430 --> 00:03:46,590
longer available or they have made

76
00:03:46,590 --> 00:03:48,360
changes in hardware and therefore is no longer

77
00:03:48,360 --> 00:03:51,150
compatible  with what you have

78
00:03:51,150 --> 00:03:54,150
developed up to

79
00:03:54,150 --> 00:03:56,989
now, water 5 also supports

80
00:03:56,989 --> 00:04:00,780
the extension  and temperatures therefore at

81
00:04:00,780 --> 00:04:02,610
an extended temperature range of

82
00:04:02,610 --> 00:04:05,580
house use dedicated technical port

83
00:04:05,580 --> 00:04:07,319
I had a great time with this

84
00:04:07,319 --> 00:04:07,770
company

85
00:04:07,770 --> 00:04:09,540
when I had problems with the

86
00:04:09,540 --> 00:04:12,090
interfaces and in fact it has the dev kit

87
00:04:12,090 --> 00:04:15,900
which is the beta 5 with even all the

88
00:04:15,900 --> 00:04:17,760
high un projects available  so in

89
00:04:17,760 --> 00:04:20,100
this case if you have to take it as

90
00:04:20,100 --> 00:04:22,100
a starting point for your project

91
00:04:22,100 --> 00:04:24,930
let's say it is excellent because

92
00:04:24,930 --> 00:04:28,280
you have all the altium projects available

93
00:04:28,280 --> 00:04:31,350
now let's analyze bild root

94
00:04:31,350 --> 00:04:34,020
first of all because it was chosen to

95
00:04:34,020 --> 00:04:35,790
use bild ruth because if we

96
00:04:35,790 --> 00:04:37,919
used a

97
00:04:37,919 --> 00:04:43,919
general purpose linux distribution  we will arrive

98
00:04:43,919 --> 00:04:46,919
we will have a system that is not

99
00:04:46,919 --> 00:04:49,470
properly optimized for the board,

100
00:04:49,470 --> 00:04:52,080
perhaps rich in packaging that in reality

101
00:04:52,080 --> 00:04:55,290
are not necessary for our purposes and

102
00:04:55,290 --> 00:04:58,380
therefore would be used in the space

103
00:04:58,380 --> 00:05:01,410
that perhaps even limited we go to

104
00:05:01,410 --> 00:05:03,540
add perhaps unwanted vulnerabilities

105
00:05:03,540 --> 00:05:05,850
sup is  which in reality may not be

106
00:05:05,850 --> 00:05:09,630
used for quests  or precisely

107
00:05:09,630 --> 00:05:12,569
bild ruth has been adopted because

108
00:05:12,569 --> 00:05:16,339
in reality it is also a system

109
00:05:16,339 --> 00:05:18,809
improperly called firmware generator

110
00:05:18,809 --> 00:05:21,899
because it allows those who use it to

111
00:05:21,899 --> 00:05:24,990
create

112
00:05:24,990 --> 00:05:29,759
custom linux distributions suitable for the

113
00:05:29,759 --> 00:05:31,949
card and with the packages necessary for the

114
00:05:31,949 --> 00:05:34,679
purpose that we have set ourselves in a very easy way is  easy

115
00:05:34,679 --> 00:05:36,869
to configure because to use menu

116
00:05:36,869 --> 00:05:39,419
config defeat their internal we

117
00:05:39,419 --> 00:05:42,029
can go to select packages

118
00:05:42,029 --> 00:05:43,469
that interest us

119
00:05:43,469 --> 00:05:46,490
is fast and there are already 1600 because

120
00:05:46,490 --> 00:05:48,930
available and therefore at that point there we

121
00:05:48,930 --> 00:05:51,330
have no problems when we go to

122
00:05:51,330 --> 00:05:52,680
select a package rather than

123
00:05:52,680 --> 00:05:55,649
another  of unsatisfied dependencies

124
00:05:55,649 --> 00:05:57,089
rather than other problems that arise

125
00:05:57,089 --> 00:05:59,339
when you compile

126
00:05:59,339 --> 00:06:01,709
systems manually and precisely highly

127
00:06:01,709 --> 00:06:04,830
configurable the community is very very

128
00:06:04,830 --> 00:06:07,830
active and since 2005 this project is

129
00:06:07,830 --> 00:06:12,800
active therefore in a nice background

130
00:06:13,259 --> 00:06:16,139
to note precisely that bild root

131
00:06:16,139 --> 00:06:19,409
against some things  it doesn't have a package

132
00:06:19,409 --> 00:06:21,509
manager so at this point when  we are

133
00:06:21,509 --> 00:06:24,199
going to create the root fs that will be

134
00:06:24,199 --> 00:06:28,110
installed on the sd let's say at that point

135
00:06:28,110 --> 00:06:30,360
there we can not as we are perhaps

136
00:06:30,360 --> 00:06:32,369
used to apt get download

137
00:06:32,369 --> 00:06:34,550
packages that we eventually lack

138
00:06:34,550 --> 00:06:37,889
also does not have a compilers ul on the

139
00:06:37,889 --> 00:06:38,789
target machine

140
00:06:38,789 --> 00:06:41,999
so when we

141
00:06:41,999 --> 00:06:44,789
need a possible  addition within

142
00:06:44,789 --> 00:06:45,509
our project

143
00:06:45,509 --> 00:06:48,740
we have to recover let's say bild ruth

144
00:06:48,740 --> 00:06:51,269
go and select the new packages

145
00:06:51,269 --> 00:06:53,430
that interest us and start with the

146
00:06:53,430 --> 00:06:56,519
meic and then re-create the file system ruta

147
00:06:56,519 --> 00:07:00,719
fs on the sd supports a myriad of

148
00:07:00,719 --> 00:07:03,469
architectures for that supports arm and x86

149
00:07:03,469 --> 00:07:05,759
mix  and powerpc

150
00:07:05,759 --> 00:07:07,409
also there are others that I

151
00:07:07,409 --> 00:07:09,729
have not described

152
00:07:09,729 --> 00:07:11,589
the control logic was done

153
00:07:11,589 --> 00:07:14,499
entirely in make and are about 1000

154
00:07:14,499 --> 00:07:16,689
leagues of code with 230 lines of

155
00:07:16,689 --> 00:07:18,309
comments so also easy and

156
00:07:18,309 --> 00:07:21,370
understandable if someone

157
00:07:21,370 --> 00:07:23,319
should eventually make changes or want to

158
00:07:23,319 --> 00:07:25,389
adopt it more  the purposes it

159
00:07:25,389 --> 00:07:29,169
has set itself as we see here from the

160
00:07:29,169 --> 00:07:32,110
figure, make menu config Ades is launched  I know

161
00:07:32,110 --> 00:07:35,050
you don't see so well there are all

162
00:07:35,050 --> 00:07:38,830
the various and the various options that can

163
00:07:38,830 --> 00:07:42,039
be selected as the target the

164
00:07:42,039 --> 00:07:44,259
build options the tool chains because in

165
00:07:44,259 --> 00:07:48,099
reality he is able to create

166
00:07:48,099 --> 00:07:50,649
the root and fs but in reality he also offers himself

167
00:07:50,649 --> 00:07:53,189
the possibility of thanks of the tool james

168
00:07:53,189 --> 00:07:55,389
compile the bootloader and

169
00:07:55,389 --> 00:07:59,139
everything behind it we say everything

170
00:07:59,139 --> 00:08:01,960
that is done after giving the

171
00:08:01,960 --> 00:08:04,719
meic is shot out on a folder

172
00:08:04,719 --> 00:08:07,089
that outputs email

173
00:08:07,089 --> 00:08:10,029
at that point in there we have a

174
00:08:10,029 --> 00:08:13,300
calibrated zip pad file let's say it is  such a point z

175
00:08:13,300 --> 00:08:16,240
with the root fs that then it will be copied

176
00:08:16,240 --> 00:08:18,990
on the route file system

177
00:08:20,399 --> 00:08:25,060
io with water sin art 5 or adopted a

178
00:08:25,060 --> 00:08:27,279
policy let's say a little particular in the

179
00:08:27,279 --> 00:08:29,770
sense that the board needs the

180
00:08:29,770 --> 00:08:32,919
patches on the kernel and on bild root to

181
00:08:32,919 --> 00:08:35,380
be fully supported then

182
00:08:35,380 --> 00:08:38,380
we decided to compile kernel and

183
00:08:38,380 --> 00:08:43,500
bootloader separately and use

184
00:08:43,500 --> 00:08:47,260
bild ruth only for creating the ruth

185
00:08:47,260 --> 00:08:49,600
file system with all the packages that interest us

186
00:08:49,600 --> 00:08:51,240


187
00:08:51,240 --> 00:08:56,010
as we have as you can  here by

188
00:08:56,350 --> 00:08:59,889
associating bild ruth acute 5 on an

189
00:08:59,889 --> 00:09:01,899
embedded system we have the

190
00:09:01,899 --> 00:09:04,440
possibility to create

191
00:09:04,440 --> 00:09:07,650
an interactive human system

192
00:09:07,650 --> 00:09:10,050
in machine quotes in a very

193
00:09:10,050 --> 00:09:13,520
simple way because all 5 is an application

194
00:09:13,520 --> 00:09:16,460
framework used for the development of

195
00:09:16,460 --> 00:09:19,970
user interface graphics and cross platform

196
00:09:19,970 --> 00:09:23,490
uses yes more blue  as a base language

197
00:09:23,490 --> 00:09:26,130
and a very large number of libraries

198
00:09:26,130 --> 00:09:27,920
available,

199
00:09:27,920 --> 00:09:31,170
moreover being the

200
00:09:31,170 --> 00:09:32,730
native combination for the architecture

201
00:09:32,730 --> 00:09:35,840
used in addition, and therefore we do not say

202
00:09:35,840 --> 00:09:38,040
performance problems because we can

203
00:09:38,040 --> 00:09:40,860
exploit the center I present the

204
00:09:40,860 --> 00:09:44,160
target machine also we also have

205
00:09:44,160 --> 00:09:47,490
vt5 together give you a  designer that qt

206
00:09:47,490 --> 00:09:50,010
designer that is great for use in

207
00:09:50,010 --> 00:09:54,030
cross compiler and direct deploy on the

208
00:09:54,030 --> 00:09:55,500
embedded device we are

209
00:09:55,500 --> 00:09:59,430
adopting let's see a moment bill of root

210
00:09:59,430 --> 00:10:02,640
and qt 5 bild and ruth

211
00:10:02,640 --> 00:10:06,630
integrated inside the pec aziz qt 5 so

212
00:10:06,630 --> 00:10:08,760
practically it is enough just and

213
00:10:08,760 --> 00:10:11,310
only select that packages

214
00:10:11,310 --> 00:10:13,260
he will automatically create and rut  h file

215
00:10:13,260 --> 00:10:15,470
system call which t5 integrated without

216
00:10:15,470 --> 00:10:18,110
any kind of problem

217
00:10:18,110 --> 00:10:20,790
also selecting in this case drop

218
00:10:20,790 --> 00:10:24,120
bier ssh in such a way as to be able to

219
00:10:24,120 --> 00:10:26,610
connect on the sleep directly in

220
00:10:26,610 --> 00:10:29,280
ssh it is possible to easily

221
00:10:29,280 --> 00:10:30,800
carry out the development of the project

222
00:10:30,800 --> 00:10:36,620
directly in qt designer on a pc

223
00:10:36,620 --> 00:10:38,940
carry out the cross  compilation

224
00:10:38,940 --> 00:10:42,900
through the compiler and internal to the

225
00:10:42,900 --> 00:10:44,610
machine and then perform the deploy

226
00:10:44,610 --> 00:10:46,920
directly on the target machine which

227
00:10:46,920 --> 00:10:49,050
in this case is the embedded device

228
00:10:49,050 --> 00:10:51,750
this is no small advantage

229
00:10:51,750 --> 00:10:55,500
because in this way we avoid

230
00:10:55,500 --> 00:10:57,420
using distributions

231
00:10:57,420 --> 00:10:59,900
inside the target machine with

232
00:10:59,900 --> 00:11:01,720
compilers

233
00:11:01,720 --> 00:11:04,329
that take a lifetime to compile because

234
00:11:04,329 --> 00:11:06,790
obviously the computing power, although

235
00:11:06,790 --> 00:11:08,230
it has increased in recent years, is however

236
00:11:08,230 --> 00:11:09,879
limited compared to the

237
00:11:09,879 --> 00:11:12,939
computing power that we can adopt on a pc

238
00:11:12,939 --> 00:11:15,970
that we can find on a pc and with

239
00:11:15,970 --> 00:11:18,459
all the problems that it entails for

240
00:11:18,459 --> 00:11:20,379
active development let's say  on the

241
00:11:20,379 --> 00:11:22,389
platform that we are in bad that we are

242
00:11:22,389 --> 00:11:28,269
s  developing therefore we are going to

243
00:11:28,269 --> 00:11:32,199
talk about the advantages with build root and qt

244
00:11:32,199 --> 00:11:35,920
5 we can generate ruth file systems

245
00:11:35,920 --> 00:11:38,199
tailored to the

246
00:11:38,199 --> 00:11:39,790
specific needs of the project we are

247
00:11:39,790 --> 00:11:43,540
adopting we can develop

248
00:11:43,540 --> 00:11:46,509
applications with

249
00:11:46,509 --> 00:11:48,759
very attractive but at the same time

250
00:11:48,759 --> 00:11:51,279
very performing graphic interfaces because they are

251
00:11:51,279 --> 00:11:53,170
compiled natively on the

252
00:11:53,170 --> 00:11:56,350
target machine and through the cross compilation

253
00:11:56,350 --> 00:11:58,839
as I said earlier it is possible to

254
00:11:58,839 --> 00:12:00,939
develop the whole application on a PC they

255
00:12:00,939 --> 00:12:02,980
are comfortably calm on a nice

256
00:12:02,980 --> 00:12:04,990
display without any kind of problem

257
00:12:04,990 --> 00:12:08,290
with obviously high speeds and

258
00:12:08,290 --> 00:12:10,149
directly deploy from qt designer

259
00:12:10,149 --> 00:12:13,589
on the target  of destination

260
00:12:14,100 --> 00:12:17,459
here is enough here there are the references of the

261
00:12:17,459 --> 00:12:22,410
water 5 of pil of all and all

262
00:12:22,839 --> 00:12:26,290
if you have some questions very happy to

263
00:12:26,290 --> 00:12:28,500
answer

264
00:12:29,790 --> 00:12:32,790
please

265
00:12:36,579 --> 00:12:45,600
I saw I saw that you have chosen to

266
00:12:45,600 --> 00:12:48,249
compile the kernel differently because

267
00:12:48,249 --> 00:12:50,549
because it said that there were patches from

268
00:12:50,549 --> 00:12:53,649
Cesena  but why not because you didn't

269
00:12:53,649 --> 00:12:55,920
use the system  but of pecs by will gluck

270
00:12:55,920 --> 00:12:59,860
because basically this

271
00:12:59,860 --> 00:13:02,350
strategy was adopted more than anything else not so much

272
00:13:02,350 --> 00:13:03,910
because bild ruth does not offer you the

273
00:13:03,910 --> 00:13:06,220
possibility of using the

274
00:13:06,220 --> 00:13:09,639
integrated pec system of pieces but because the

275
00:13:09,639 --> 00:13:12,610
manufacturer of the sum dl

276
00:13:12,610 --> 00:13:14,019
advised us since he did  also

277
00:13:14,019 --> 00:13:16,860
some guides to compile the kernel

278
00:13:16,860 --> 00:13:19,239
separately with the patches that they

279
00:13:19,239 --> 00:13:20,619
had given us because they found

280
00:13:20,619 --> 00:13:22,839
the simplest thing for us to not get

281
00:13:22,839 --> 00:13:24,069
complicated

282
00:13:24,069 --> 00:13:26,319
we further say life on a

283
00:13:26,319 --> 00:13:28,149
road that was already trodden in this

284
00:13:28,149 --> 00:13:29,709
case rather than finding one of

285
00:13:29,709 --> 00:13:32,379
our own we have decided  to

286
00:13:32,379 --> 00:13:34,449
keep on that path,

287
00:13:34,449 --> 00:13:37,779
moreover, this was also dictated by the

288
00:13:37,779 --> 00:13:40,029
fact that at the beginning it was not that

289
00:13:40,029 --> 00:13:43,730
we had no problem because

290
00:13:43,730 --> 00:13:47,860
the bild ruth uses the

291
00:13:47,860 --> 00:13:50,600
device trees and related flesh and we needed

292
00:13:50,600 --> 00:13:54,170
to use the spa interface but the

293
00:13:54,170 --> 00:13:58,459
devices  three of the spies was wrong and

294
00:13:58,459 --> 00:14:01,670
there will be planted there we could no

295
00:14:01,670 --> 00:14:03,290
longer solve the problem because the

296
00:14:03,290 --> 00:14:05,690
tris devices with a  bit difficult

297
00:14:05,690 --> 00:14:07,850
there is not a lot of documentation

298
00:14:07,850 --> 00:14:10,970
about it in short it was also a

299
00:14:10,970 --> 00:14:12,949
soft custom that this

300
00:14:12,949 --> 00:14:16,040
company produces so we lost a lot of

301
00:14:16,040 --> 00:14:18,260
time debugging on that

302
00:14:18,260 --> 00:14:23,889
area, in short, nothing

303
00:14:24,970 --> 00:14:33,649
please the patches you named those

304
00:14:33,649 --> 00:14:36,800
who  were needed the producer of the sum

305
00:14:36,800 --> 00:14:39,980
is working to

306
00:14:39,980 --> 00:14:43,760
stream these patches or if they are already

307
00:14:43,760 --> 00:14:44,720
available

308
00:14:44,720 --> 00:14:47,510
now I don't know if

309
00:14:47,510 --> 00:14:51,380
the streaming app is already working I honestly do not know

310
00:14:51,380 --> 00:14:54,250
but keep in mind that in any case the company

311
00:14:54,250 --> 00:14:57,050
as a core business precisely the development

312
00:14:57,050 --> 00:15:00,319
of  these boards I have no

313
00:15:00,319 --> 00:15:03,230
commercial interest let's say to propose

314
00:15:03,230 --> 00:15:05,600
this type of solution rather than

315
00:15:05,600 --> 00:15:06,949
other solutions

316
00:15:06,949 --> 00:15:09,319
only that I have noticed that precisely when

317
00:15:09,319 --> 00:15:12,960
you play with some

318
00:15:12,960 --> 00:15:15,900
emb boards it is of the raspberry type rather

319
00:15:15,900 --> 00:15:18,620
than orange glimmer beagle bon black

320
00:15:18,620 --> 00:15:23,190
then then working on it is really general

321
00:15:23,190 --> 00:15:25,410
purpose  they offer a myriad of

322
00:15:25,410 --> 00:15:27,330
possibilities they have a very

323
00:15:27,330 --> 00:15:30,150
active community behind however where you are

324
00:15:30,150 --> 00:15:33,720
you need a professional bad system

325
00:15:33,720 --> 00:15:35,700
with a long-term support that does not

326
00:15:35,700 --> 00:15:38,250
vary over the years availability of a

327
00:15:38,250 --> 00:15:40,290
high number of cards perhaps in a

328
00:15:40,290 --> 00:15:42,870
short time and with a technical support that does not

329
00:15:42,870 --> 00:15:44,490
depend solely and exclusively on the

330
00:15:44,490 --> 00:15:45,410
community

331
00:15:45,410 --> 00:15:47,730
from our point of view with it is

332
00:15:47,730 --> 00:15:50,820
precisely to adopt  solutions like these,

333
00:15:50,820 --> 00:15:52,650
although in terms of performance they are

334
00:15:52,650 --> 00:15:55,200
significantly lower than an

335
00:15:55,200 --> 00:16:01,010
aion barry pio orange to parry open

336
00:16:01,010 --> 00:16:13,160
as sorry the costs are higher

337
00:16:13,160 --> 00:16:16,380
per hour are slightly higher in the

338
00:16:16,380 --> 00:16:19,260
sense that sleep costs 39 euros plus VAT

339
00:16:19,260 --> 00:16:22,080
and then there is  it is the dev kit but it has the

340
00:16:22,080 --> 00:16:24,120
advantage that precisely with the dark it they

341
00:16:24,120 --> 00:16:26,250
offer you all the

342
00:16:26,250 --> 00:16:29,370
ready-made altium projects but the support is paid

343
00:16:29,370 --> 00:16:32,730
no no no tyrant support

344
00:16:32,730 --> 00:16:35,280
I personally tested it and basically they

345
00:16:35,280 --> 00:16:37,350
give you support even if you buy one

346
00:16:37,350 --> 00:16:39,920
card obviously they

347
00:16:39,920 --> 00:16:42,440
will also have priorities

348
00:16:42,440 --> 00:16:44,149
basically that is, if one orders

349
00:16:44,149 --> 00:16:46,850
a thousand cards obviously it is only as a

350
00:16:46,850 --> 00:16:49,279
priority year mac and maybe n  and ordered

351
00:16:49,279 --> 00:16:51,950
one but basically they give

352
00:16:51,950 --> 00:16:53,959
very good support they are available by

353
00:16:53,959 --> 00:16:56,389
telephone so on projects a little

354
00:16:56,389 --> 00:16:58,160
more in serious quotes that maybe

355
00:16:58,160 --> 00:17:00,260
have to go into production also because they

356
00:17:00,260 --> 00:17:02,180
give you the certification of the board

357
00:17:02,180 --> 00:17:06,290
in short, on those areas we say them the

358
00:17:06,290 --> 00:17:07,400
game is worth the candle

359
00:17:07,400 --> 00:17:09,349
if after one wants to see  pure performances

360
00:17:09,349 --> 00:17:11,900
and they don't give a damn about any

361
00:17:11,900 --> 00:17:13,819
other type of constraint such as that in two

362
00:17:13,819 --> 00:17:15,349
years it will no longer be produced rather

363
00:17:15,349 --> 00:17:17,119
than change or more rather than the

364
00:17:17,119 --> 00:17:18,589
community does not respond to you in time

365
00:17:18,589 --> 00:17:20,240
cagliari then at that point it is better to

366
00:17:20,240 --> 00:17:22,099
go to more traditional cards like

367
00:17:22,099 --> 00:17:54,080
the raspberry or similar stuff that is it does not make

368
00:17:54,080 --> 00:17:56,120
me family worries the question because there

369
00:17:56,120 --> 00:17:59,780
cannot be one thing that there was that

370
00:17:59,780 --> 00:18:03,890
of the bit packages that have a license

371
00:18:03,890 --> 00:18:08,660
that requires you to provide the sources to

372
00:18:08,660 --> 00:18:11,929
whoever received the compiled there was an

373
00:18:11,929 --> 00:18:16,490
automated way automated way

374
00:18:16,490 --> 00:18:21,350
to  getting a plaque looks

375
00:18:21,350 --> 00:18:24,049
honestly not being that the problem

376
00:18:24,049 --> 00:18:25,250
I

377
00:18:25,250 --> 00:18:26,900
have not encountered  I would not know how to

378
00:18:26,900 --> 00:18:29,870
answer you exhaustively I think there

379
00:18:29,870 --> 00:18:31,910
is a possibility we among other things had

380
00:18:31,910 --> 00:18:34,340
also taken a look at

381
00:18:34,340 --> 00:18:36,620
yocto project which you will probably

382
00:18:36,620 --> 00:18:41,960
know but let's say the

383
00:18:41,960 --> 00:18:45,490
learning curve of yocto is definitely

384
00:18:45,490 --> 00:18:48,380
steeper and longer in the sense that it is

385
00:18:48,380 --> 00:18:52,160
too much  for projects I don't say

386
00:18:52,160 --> 00:18:54,950
domestic but in any case

387
00:18:54,950 --> 00:18:57,230
small-scale projects because there really with

388
00:18:57,230 --> 00:18:59,690
the 8 offers a myriad of

389
00:18:59,690 --> 00:19:03,530
more possibilities but certainly the key point

390
00:19:03,530 --> 00:19:05,240
is not simplicity in the sense that

391
00:19:05,240 --> 00:19:06,770
you must freely have a team of

392
00:19:06,770 --> 00:19:08,650
engineers who give you a hand because

393
00:19:08,650 --> 00:19:13,190
you start training at the

394
00:19:13,190 --> 00:19:15,320
first few difficulties it is too extensive as a

395
00:19:15,320 --> 00:19:20,320
project so bild ruth is more let's say

396
00:19:20,320 --> 00:19:23,000
user friendly albeit with

397
00:19:23,000 --> 00:19:24,770
limitations that for example even when

398
00:19:24,770 --> 00:19:27,680
you go to remove the packages you have to

399
00:19:27,680 --> 00:19:29,330
do the clip because he is

400
00:19:29,330 --> 00:19:31,070
leaving them in you is not intelligent  if you want to

401
00:19:31,070 --> 00:19:32,390
add there is no problem that is

402
00:19:32,390 --> 00:19:35,360
to remove they become can be

403
00:19:35,360 --> 00:19:39,100
precisely there can be pr  Problems

404
00:19:42,760 --> 00:19:50,110
yes that yes but it depends on how it will be

405
00:19:50,110 --> 00:19:53,570
distributed and under which them without and what

406
00:19:53,570 --> 00:20:01,490
we are going to use even if you have to

407
00:20:01,490 --> 00:20:04,630
if only yes

408
00:20:25,389 --> 00:20:29,019
after a qt 5 let's say the version more

409
00:20:29,019 --> 00:20:30,969
united me and in addition also another problem

410
00:20:30,969 --> 00:20:33,549
that I realized that  we are still

411
00:20:33,549 --> 00:20:36,070
trying to solve why qt 5 on

412
00:20:36,070 --> 00:20:36,759
this card

413
00:20:36,759 --> 00:20:39,879
we do not understand why, however, with the shares and the

414
00:20:39,879 --> 00:20:42,759
slow aib raris, loading even a

415
00:20:42,759 --> 00:20:45,820
very small piece and adopting the

416
00:20:45,820 --> 00:20:48,729
static libraries with qt 5 is not

417
00:20:48,729 --> 00:20:50,829
possible without violating the

418
00:20:50,829 --> 00:20:54,369
terms of use so there is  it is still a

419
00:20:54,369 --> 00:20:57,609
little bit to verify to work

420
00:20:57,609 --> 00:20:59,739
now we are still on development

421
00:20:59,739 --> 00:21:02,009
so

422
00:21:12,310 --> 00:21:15,810
beirut and with a system of continuous

423
00:21:15,810 --> 00:21:20,550
integration so but I commit them

424
00:21:20,550 --> 00:21:23,230
automatically a server

425
00:21:23,230 --> 00:21:27,760
compiles me the image you don't know if it is

426
00:21:27,760 --> 00:21:30,460
possible to do such a thing without

427
00:21:30,460 --> 00:21:33,450
putting too

428
00:21:33,450 --> 00:21:37,750
sincere  ie possible

429
00:21:37,750 --> 00:21:39,370
it is probably possible this will

430
00:21:39,370 --> 00:21:42,010
probably involve a lot of

431
00:21:42,010 --> 00:21:43,930
work on your part so you have to

432
00:21:43,930 --> 00:21:46,230
see without then it is worth  the candle

433
00:21:46,230 --> 00:21:49,300
is not possible even possible but if you

434
00:21:49,300 --> 00:21:51,130
start from scratch they are still in

435
00:21:51,130 --> 00:21:52,540
those two or three hours of compilation

436
00:21:52,540 --> 00:21:56,940
because the

437
00:21:57,250 --> 00:22:00,790
exact part is however if you can start from

438
00:22:00,790 --> 00:22:02,410
a shared state in which all the

439
00:22:02,410 --> 00:22:05,410
libraries are already inhabited maybe

440
00:22:05,410 --> 00:22:05,830
there is  do

441
00:22:05,830 --> 00:22:09,330
live on the car application

442
00:22:24,620 --> 00:22:27,699
thank you very much for your attention

