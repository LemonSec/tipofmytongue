1
00:00:00,199 --> 00:00:03,720
hi all i am andrea

2
00:00:03,720 --> 00:00:06,690
easy work on youtube some software and

3
00:00:06,690 --> 00:00:08,700
today's presentation on

4
00:00:08,700 --> 00:00:11,309
france reconstruction of ntfs when

5
00:00:11,309 --> 00:00:13,530
metadata is partially damaged

6
00:00:13,530 --> 00:00:16,139
that the work i did as

7
00:00:16,139 --> 00:00:19,699
master thesis so i am going to explain today

8
00:00:19,699 --> 00:00:24,090
when i started doing this this

9
00:00:24,090 --> 00:00:25,949
work I got the idea to take care

10
00:00:25,949 --> 00:00:28,019
of this I actually thought

11
00:00:28,019 --> 00:00:32,549
how important it is to know something not

12
00:00:32,549 --> 00:00:34,559
only about the content of the files but also

13
00:00:34,559 --> 00:00:37,530
its metadata that is the names of the files

14
00:00:37,530 --> 00:00:40,170
or the dates on which they were

15
00:00:40,170 --> 00:00:42,120
modified or their content

16
00:00:42,120 --> 00:00:45,890
and I  actually asked there

17
00:00:45,890 --> 00:00:49,920
are examples where this was important

18
00:00:49,920 --> 00:00:52,170
actually there are and I wanted to

19
00:00:52,170 --> 00:00:56,280
present some cases for example in

20
00:00:56,280 --> 00:00:57,930
2014

21
00:00:57,930 --> 00:00:59,340
alberto stasi that you will probably

22
00:00:59,340 --> 00:01:01,020
know for another very

23
00:01:01,020 --> 00:01:03,930
famous case and was acquitted of

24
00:01:03,930 --> 00:01:05,659
possession of child pornography material

25
00:01:05,659 --> 00:01:10,909
that had been found on the  computer is

26
00:01:10,909 --> 00:01:13,799
in the first time

27
00:01:13,799 --> 00:01:16,439
the defendant had suffered a

28
00:01:16,439 --> 00:01:19,080
thirty-day sentence of imprisonment  ion which were then

29
00:01:19,080 --> 00:01:22,530
converted into a fine, however in the

30
00:01:22,530 --> 00:01:24,600
decision of the cassation it was

31
00:01:24,600 --> 00:01:27,869
underlined in several points how it was

32
00:01:27,869 --> 00:01:31,740
important to know the specific

33
00:01:31,740 --> 00:01:33,540
folder in which certain files are located in order

34
00:01:33,540 --> 00:01:35,400
to understand the meaning that

35
00:01:35,400 --> 00:01:38,280
those files had and the fact that they were

36
00:01:38,280 --> 00:01:39,990
files found in  of the unallocated clusters

37
00:01:39,990 --> 00:01:41,700
there were files that had

38
00:01:41,700 --> 00:01:43,490
been deleted they did not directly

39
00:01:43,490 --> 00:01:47,220
access and also the fact that the

40
00:01:47,220 --> 00:01:48,990
names of these fragments did not understand

41
00:01:48,990 --> 00:01:54,240
the content of the child pornography of

42
00:01:54,240 --> 00:01:57,149
these multimedia file appointments

43
00:01:57,149 --> 00:01:58,649
all these elements were

44
00:01:58,649 --> 00:02:00,930
fundamental and have  allowed to

45
00:02:00,930 --> 00:02:02,790
prove that for this crime alberto

46
00:02:02,790 --> 00:02:04,590
stasi was innocent and therefore was

47
00:02:04,590 --> 00:02:08,399
acquitted of a risk of 30 days

48
00:02:08,399 --> 00:02:10,380
in prison or a fine

49
00:02:10,380 --> 00:02:12,930
but it did not end there because a few years

50
00:02:12,930 --> 00:02:15,750
earlier you did not exist united in 2008 in

51
00:02:15,750 --> 00:02:17,370
massachusetts

52
00:02:17,370 --> 00:02:20,550
michael viola who was an employee  for

53
00:02:20,550 --> 00:02:24,510
a public company in massachusetts he

54
00:02:24,510 --> 00:02:28,440
lost his job because on the

55
00:02:28,440 --> 00:02:30,600
corporate laptop  and

56
00:02:30,600 --> 00:02:35,030
traces of child pornography material were found

57
00:02:35,030 --> 00:02:38,070
at first no one had

58
00:02:38,070 --> 00:02:40,140
believed that this person

59
00:02:40,140 --> 00:02:42,180
had no idea that there were these

60
00:02:42,180 --> 00:02:46,530
documents but later it was

61
00:02:46,530 --> 00:02:49,170
possible to verify that there was

62
00:02:49,170 --> 00:02:51,870
malware installed on the laptop that

63
00:02:51,870 --> 00:02:54,990
dealt with  visit up to 40 sites per

64
00:02:54,990 --> 00:02:58,170
minute with child pornography content

65
00:02:58,170 --> 00:03:00,660
so in this case the timing of

66
00:03:00,660 --> 00:03:03,180
saving the files made it possible to

67
00:03:03,180 --> 00:03:04,770
demonstrate that it could not be a

68
00:03:04,770 --> 00:03:08,910
human being who saved in the

69
00:03:08,910 --> 00:03:11,700
browser cache or in any case in the

70
00:03:11,700 --> 00:03:14,670
file folders so quickly but it had to

71
00:03:14,670 --> 00:03:18,110
be  necessarily a program

72
00:03:18,110 --> 00:03:20,930
this person was then found

73
00:03:20,930 --> 00:03:23,400
not guilty

74
00:03:23,400 --> 00:03:25,290
after losing his job he had lost his

75
00:03:25,290 --> 00:03:28,560
pension having spent 250 thousand dollars in

76
00:03:28,560 --> 00:03:30,480
the lawsuit having made a second

77
00:03:30,480 --> 00:03:32,730
mortgage having sold the car and

78
00:03:32,730 --> 00:03:36,300
risked 30 months in prison

79
00:03:36,300 --> 00:03:39,510
so you understand that it is  then year and he and his

80
00:03:39,510 --> 00:03:41,640
wife suffered

81
00:03:41,640 --> 00:03:43,650
health problems from stress

82
00:03:43,650 --> 00:03:46,140
on  process you understand well that in this

83
00:03:46,140 --> 00:03:50,310
case it is also the metadata such as the

84
00:03:50,310 --> 00:03:51,750
modification access time were

85
00:03:51,750 --> 00:03:55,080
decisive but it can even get worse

86
00:03:55,080 --> 00:03:57,830
than that because he risked 30 months

87
00:03:57,830 --> 00:04:00,480
a teacher in 2008 always in

88
00:04:00,480 --> 00:04:03,840
connecticut and her name is giulia mero to

89
00:04:03,840 --> 00:04:06,390
was teaching  as a substitute teacher in a

90
00:04:06,390 --> 00:04:10,830
class in which he had done he had

91
00:04:10,830 --> 00:04:12,510
logged in the official teacher

92
00:04:12,510 --> 00:04:14,970
let's say supported on the

93
00:04:14,970 --> 00:04:16,769
school computer because he had to show

94
00:04:16,769 --> 00:04:18,060
content to the students

95
00:04:18,060 --> 00:04:20,790
and while he was browsing on sites

96
00:04:20,790 --> 00:04:22,560
suitable for children, pop ups came out

97
00:04:22,560 --> 00:04:23,760


98
00:04:23,760 --> 00:04:25,680
visit with content  pornographic

99
00:04:25,680 --> 00:04:28,590
therefore not even child pornography but

100
00:04:28,590 --> 00:04:29,960
simply pornographic files

101
00:04:29,960 --> 00:04:32,910
rightly since they were not

102
00:04:32,910 --> 00:04:36,030
child pornographic files they were simple pop

103
00:04:36,030 --> 00:04:37,950
ups but some boys were seen did not

104
00:04:37,950 --> 00:04:40,020
risk 30 months in slave prison 40

105
00:04:40,020 --> 00:04:41,970
years of imprisonment because the

106
00:04:41,970 --> 00:04:46,410
Americans up like this and therefore this person

107
00:04:46,410 --> 00:04:49,740
risked 40  years of imprisonment

108
00:04:49,740 --> 00:04:53,840
because malware was installed on the computer e

109
00:04:53,840 --> 00:04:57,210
it was possible to determine this

110
00:04:57,210 --> 00:04:58,050


111
00:04:58,050 --> 00:05:00,360
only thanks also in this case to the

112
00:05:00,360 --> 00:05:02,700
display of the timing of the

113
00:05:02,700 --> 00:05:05,430
files and the government

114
00:05:05,430 --> 00:05:07,440
were observed in the browser cache in the

115
00:05:07,440 --> 00:05:09,150
meantime carlo was checked

116
00:05:09,150 --> 00:05:14,280
for the files opened with the browser and then it

117
00:05:14,280 --> 00:05:15,980
was indicated that the timing

118
00:05:15,980 --> 00:05:19,140
they were not possible so it could not

119
00:05:19,140 --> 00:05:21,350
have been a person who had

120
00:05:21,350 --> 00:05:24,990
manually navigated between sites but that the pop ups

121
00:05:24,990 --> 00:05:26,370
had come out all together

122
00:05:26,370 --> 00:05:28,500
exactly as

123
00:05:28,500 --> 00:05:32,550
the defendant said and then after a few years of

124
00:05:32,550 --> 00:05:39,930
trials she was, let's say, acquitted

125
00:05:39,930 --> 00:05:41,900
she did not do these  years in prison

126
00:05:41,900 --> 00:05:44,040
words have revoked the

127
00:05:44,040 --> 00:05:46,140
teacher's license because rightly in the

128
00:05:46,140 --> 00:05:48,810
meantime we consider the guilty ones but you

129
00:05:48,810 --> 00:05:51,240
understand that it is very important in this

130
00:05:51,240 --> 00:05:53,910
case it is not so much the content of the files

131
00:05:53,910 --> 00:05:57,210
alone but the metadata that is the

132
00:05:57,210 --> 00:06:00,030
content of the files is important but to

133
00:06:00,030 --> 00:06:01,800
understand that  meaning they must

134
00:06:01,800 --> 00:06:04,980
also understand the context there is because a

135
00:06:04,980 --> 00:06:07,170
file is located a certain approx  rtella as

136
00:06:07,170 --> 00:06:11,250
a certain modification date because a

137
00:06:11,250 --> 00:06:12,770
certain name etc.

138
00:06:12,770 --> 00:06:17,430
so these are all the information

139
00:06:17,430 --> 00:06:21,450
that we would not want to lose when

140
00:06:21,450 --> 00:06:23,640
perhaps data is extradited from a hard

141
00:06:23,640 --> 00:06:26,520
disk but it can also happen that it

142
00:06:26,520 --> 00:06:28,590
deals with a damaged hard disk and

143
00:06:28,590 --> 00:06:31,440
therefore  some information is not

144
00:06:31,440 --> 00:06:34,740
available it is important to

145
00:06:34,740 --> 00:06:36,120
reconstruct everything

146
00:06:36,120 --> 00:06:37,000
available

147
00:06:37,000 --> 00:06:40,410
and get it out

148
00:06:40,810 --> 00:06:42,490
but there is a problem as

149
00:06:42,490 --> 00:06:44,620
banking wrote in its

150
00:06:44,620 --> 00:06:47,980
file system forensic analysis book that there is

151
00:06:47,980 --> 00:06:50,560
very little published on the

152
00:06:50,560 --> 00:06:53,380
recovery procedures when the  metadata is

153
00:06:53,380 --> 00:06:56,500
absent or damaged and therefore I

154
00:06:56,500 --> 00:06:58,620
decided to study this type

155
00:06:58,620 --> 00:07:01,870
of reconstruction recovery and I decided to

156
00:07:01,870 --> 00:07:07,870
do it on ntfs in particular very

157
00:07:07,870 --> 00:07:09,669
interesting ntfs for two reasons the first is

158
00:07:09,669 --> 00:07:12,130
that it is very widespread because

159
00:07:12,130 --> 00:07:17,190
there is practically one in every house  of course

160
00:07:17,190 --> 00:07:20,590
you can find it on external hard drives or

161
00:07:20,590 --> 00:07:23,340
all computers that use windows

162
00:07:23,340 --> 00:07:30,160
windows is in the picture and then ntfs has a

163
00:07:30,160 --> 00:07:32,140
structure v  ariable

164
00:07:32,140 --> 00:07:34,990
if you take two ntfs file systems

165
00:07:34,990 --> 00:07:36,430
you should not expect to always find

166
00:07:36,430 --> 00:07:38,080
in the same point

167
00:07:38,080 --> 00:07:40,690
the table that contains the list of

168
00:07:40,690 --> 00:07:44,229
files or the file that represents the

169
00:07:44,229 --> 00:07:46,630
bad sectors etc.

170
00:07:46,630 --> 00:07:49,390
however the pieces are those but you always find them

171
00:07:49,390 --> 00:07:50,830
in different points so it is

172
00:07:50,830 --> 00:07:56,550
important to succeed  to understand how to

173
00:07:56,550 --> 00:07:59,970
access even if some references

174
00:07:59,970 --> 00:08:03,120
information are not available here

175
00:08:03,120 --> 00:08:05,560
to do this we essentially

176
00:08:05,560 --> 00:08:08,169
go to look on our hard drive for

177
00:08:08,169 --> 00:08:11,229
what tracks are and there

178
00:08:11,229 --> 00:08:15,540
are three types of main elements

179
00:08:15,540 --> 00:08:17,560
these are characteristic pressure

180
00:08:17,560 --> 00:08:20,610
characteristic for ntfs the first type is

181
00:08:20,610 --> 00:08:24,550
the  boot sector if you find this is very

182
00:08:24,550 --> 00:08:26,290
convenient because it essentially

183
00:08:26,290 --> 00:08:28,840
represents you where the partition begins and

184
00:08:28,840 --> 00:08:31,120
in addition it also contains the

185
00:08:31,120 --> 00:08:33,159
size of the partition which is useful

186
00:08:33,159 --> 00:08:37,390
up to a certain point but above all it

187
00:08:37,390 --> 00:08:39,429
indicates a parameter that I will then

188
00:08:39,429 --> 00:08:42,219
explain in detail that says how much

189
00:08:42,219 --> 00:08:43,630
large are the clusters and we need this

190
00:08:43,630 --> 00:08:44,640
later

191
00:08:44,640 --> 00:08:47,140
but there may also no longer be the

192
00:08:47,140 --> 00:08:48,790
boot sector and not even the backup copy

193
00:08:48,790 --> 00:08:50,580
and we see it later

194
00:08:50,580 --> 00:08:53,140
then there are the file record of file record

195
00:08:53,140 --> 00:08:56,470
are a series of rows let's say of a

196
00:08:56,470 --> 00:08:59,770
table called mfp masterfile

197
00:08:59,770 --> 00:09:03,430
table and these rows are one or more

198
00:09:03,430 --> 00:09:06,130
lines for each file and for each folder

199
00:09:06,130 --> 00:09:08,710
and therefore there is written for example

200
00:09:08,710 --> 00:09:11,290
the file name and the modification access dates

201
00:09:11,290 --> 00:09:15,880
a directory there are also

202
00:09:15,880 --> 00:09:18,370
links to other records which are

203
00:09:18,370 --> 00:09:21,150
called index records the index records

204
00:09:21,150 --> 00:09:23,860
instead contain the  list of all the

205
00:09:23,860 --> 00:09:24,970
children

206
00:09:24,970 --> 00:09:27,550
so we call a directory so

207
00:09:27,550 --> 00:09:28,660
all the files that are contained

208
00:09:28,660 --> 00:09:30,070
within

209
00:09:30,070 --> 00:09:32,940
and this is useful for us to do what

210
00:09:32,940 --> 00:09:36,940
is the final goal that I

211
00:09:36,940 --> 00:09:38,440
proposed at the beginning which was to

212
00:09:38,440 --> 00:09:41,260
reconstruct a tree structure  i.e.

213
00:09:41,260 --> 00:09:45,430
starting from a disk extract the tracks

214
00:09:45,430 --> 00:09:48,370
that are there analyze them in a world that

215
00:09:48,370 --> 00:09:50,290
I will explain shortly

216
00:09:50,290 --> 00:09:54,370
and at the end reconstruct the

217
00:09:54,370 --> 00:09:57,280
most accurate tree structure possible of the files

218
00:09:57,280 --> 00:09:59,890
that are inside more in addition  to

219
00:09:59,890 --> 00:10:02,650
those said about as a red mark

220
00:10:02,650 --> 00:10:04,570
maybe of the files that had been

221
00:10:04,570 --> 00:10:05,380
deleted

222
00:10:05,380 --> 00:10:09,300
or somehow we can

223
00:10:09,300 --> 00:10:12,780
understand that there were in the past if there are

224
00:10:12,780 --> 00:10:15,310
still traces that allow us

225
00:10:15,310 --> 00:10:18,570
to identify them then

226
00:10:18,570 --> 00:10:20,430
the first thing to do is scan the

227
00:10:20,430 --> 00:10:23,960
disk is to find all the file records but

228
00:10:23,960 --> 00:10:26,670
there is a problem because when we

229
00:10:26,670 --> 00:10:28,740
find the file records

230
00:10:28,740 --> 00:10:30,800
we have scanned an entire disk

231
00:10:30,800 --> 00:10:33,540
we do not know whether there was only one

232
00:10:33,540 --> 00:10:36,200
partition on the disk of type ntfs

233
00:10:36,200 --> 00:10:39,780
even if maybe some tracks are from

234
00:10:39,780 --> 00:10:41,610
one partition  previous one that has been

235
00:10:41,610 --> 00:10:44,670
overwritten with another partition more

236
00:10:44,670 --> 00:10:46,830
or less in the same place so some

237
00:10:46,830 --> 00:10:49,550
records have overwritten and others have not

238
00:10:49,550 --> 00:10:54,450
then there is a very practical method to

239
00:10:54,450 --> 00:10:57,240
first filter these files and

240
00:10:57,240 --> 00:11:00,630
go and divide them into parts in the

241
00:11:00,630 --> 00:11:02,340
diagram I put  on the slide

242
00:11:02,340 --> 00:11:04,740
you can see for example the first file at

243
00:11:04,740 --> 00:11:07,590
a number which is 29 the next

244
00:11:07,590 --> 00:11:08,610
30

245
00:11:08,610 --> 00:11:11,450
then I'm going to see each

246
00:11:11,450 --> 00:11:15,090
element knowing how big where it would be  the

247
00:11:15,090 --> 00:11:17,130
position of the number zero would be in a

248
00:11:17,130 --> 00:11:18,870
certain point

249
00:11:18,870 --> 00:11:20,370
I repeat this process also for the

250
00:11:20,370 --> 00:11:22,320
second file and I realize that

251
00:11:22,320 --> 00:11:23,760
actually these two files must

252
00:11:23,760 --> 00:11:25,800
belong to the same partition because

253
00:11:25,800 --> 00:11:27,120
they have the same offset with respect

254
00:11:27,120 --> 00:11:30,120
to element 0 also the third is like this

255
00:11:30,120 --> 00:11:32,070
but the fourth  you see that it breaks the

256
00:11:32,070 --> 00:11:34,470
sequence so the fourth belongs to

257
00:11:34,470 --> 00:11:37,800
another partition I have to remember

258
00:11:37,800 --> 00:11:39,270
that I have to admit this somewhere else

259
00:11:39,270 --> 00:11:40,650


260
00:11:40,650 --> 00:11:43,770
then it happens like this again and again I

261
00:11:43,770 --> 00:11:45,900
find a file that instead belonged to

262
00:11:45,900 --> 00:11:49,470
the previous partition and I can

263
00:11:49,470 --> 00:11:52,890
do this thanks to the  starting offset of

264
00:11:52,890 --> 00:11:55,050
in this case it would be practically where

265
00:11:55,050 --> 00:11:57,180
the m lt starts not the partition but the

266
00:11:57,180 --> 00:11:59,910
file table if instead I had

267
00:11:59,910 --> 00:12:02,010
simply looked at where the numbers

268
00:12:02,010 --> 00:12:04,980
jump I would have found three groups and not

269
00:12:04,980 --> 00:12:05,400
two

270
00:12:05,400 --> 00:12:07,920
so I would have been wrong and in this case

271
00:12:07,920 --> 00:12:09,330
also analyzed four because  there are

272
00:12:09,330 --> 00:12:13,230
three jumps so there are 44 discontinuities

273
00:12:13,230 --> 00:12:17,610
but in reality there are two groups of files

274
00:12:17,610 --> 00:12:20,940
now I have done the la scre  mature and / or

275
00:12:20,940 --> 00:12:23,160
split the record files into two

276
00:12:23,160 --> 00:12:25,740
partitions that I do not know yet what

277
00:12:25,740 --> 00:12:27,200
structure year

278
00:12:27,200 --> 00:12:31,310
but I can work separately on

279
00:12:31,310 --> 00:12:34,209
these types of records

280
00:12:34,280 --> 00:12:36,530
the final goal was to build a

281
00:12:36,530 --> 00:12:41,090
tree here this is the color of the two

282
00:12:41,090 --> 00:12:43,880
partitions the final goal was this one

283
00:12:43,880 --> 00:12:46,880
a tree  how normally a

284
00:12:46,880 --> 00:12:48,830
file system works is an operating system that

285
00:12:48,830 --> 00:12:51,050
exists of the file system the operating system

286
00:12:51,050 --> 00:12:53,890
reads the tree starting from the root

287
00:12:53,890 --> 00:12:58,340
then starts from the main node that

288
00:12:58,340 --> 00:13:01,070
maybe on windows it can call us or other

289
00:13:01,070 --> 00:13:06,350
letters and then goes down using the pointers

290
00:13:06,350 --> 00:13:09,260
to the various children  and it reads the

291
00:13:09,260 --> 00:13:11,150
next folders then the path is explored

292
00:13:11,150 --> 00:13:12,170
from top to bottom

293
00:13:12,170 --> 00:13:14,930
but what happens in this case if a

294
00:13:14,930 --> 00:13:17,120
node for some reason has been

295
00:13:17,120 --> 00:13:19,100
deleted or the track has been lost

296
00:13:19,100 --> 00:13:22,400
because the disk is ruined it happens that

297
00:13:22,400 --> 00:13:23,960
all the subtree then  all the

298
00:13:23,960 --> 00:13:26,750
underlying elements disappear and it

299
00:13:26,750 --> 00:13:28,790
may also be that I do not

300
00:13:28,790 --> 00:13:32,450
realize in some circumstances that there was

301
00:13:32,450 --> 00:13:35,600
or was in the past a  folder

302
00:13:35,600 --> 00:13:40,310
that was in there then let's start again for

303
00:13:40,310 --> 00:13:43,100
a moment from our elements that

304
00:13:43,100 --> 00:13:46,460
we found scattered on ours on

305
00:13:46,460 --> 00:13:47,440
our memory

306
00:13:47,440 --> 00:13:50,990
instead of thinking like a

307
00:13:50,990 --> 00:13:53,390
normal operating system let's try

308
00:13:53,390 --> 00:13:55,370
to think backwards what happens if we

309
00:13:55,370 --> 00:13:57,800
think from the bottom up if we

310
00:13:57,800 --> 00:14:00,290
take  for each known

311
00:14:00,290 --> 00:14:01,000
parent

312
00:14:01,000 --> 00:14:04,880
at this point we have already

313
00:14:04,880 --> 00:14:07,210
rebuilt a good part of the tree

314
00:14:07,210 --> 00:14:09,920
and for these two files that have been lost

315
00:14:09,920 --> 00:14:13,310
these two files do not already have a

316
00:14:13,310 --> 00:14:14,630
parent but

317
00:14:14,630 --> 00:14:16,100
we have not found this parent

318
00:14:16,100 --> 00:14:18,020
anywhere.  'it was no trace

319
00:14:18,020 --> 00:14:20,930
no record relating to that parent but

320
00:14:20,930 --> 00:14:23,930
we know how to say the lead and I

321
00:14:23,930 --> 00:14:26,420
the numeric of the parents of these two

322
00:14:26,420 --> 00:14:30,350
elements so we can know ok there was

323
00:14:30,350 --> 00:14:33,500
a folder that contained two fouls

324
00:14:33,500 --> 00:14:35,330
I don't know what it's called

325
00:14:35,330 --> 00:14:38,230
I don't know what date it had  I know that that was

326
00:14:38,230 --> 00:14:39,680
a folder

327
00:14:39,680 --> 00:14:41,690
that contained two items so

328
00:14:41,690 --> 00:14:43,430
I'm not going to mix them with the others

329
00:14:43,430 --> 00:14:45,430
at this point what I do simple  mind

330
00:14:45,430 --> 00:14:48,770
I miss a piece because I do not know that

331
00:14:48,770 --> 00:14:51,710
folder that parent has in this case

332
00:14:51,710 --> 00:14:53,600
it associates them with a folder called

333
00:14:53,600 --> 00:14:59,260
lost files in this way I have rebuilt the

334
00:14:59,260 --> 00:15:02,240
whole directory structure and

335
00:15:02,240 --> 00:15:04,940
this is an example on a very small

336
00:15:04,940 --> 00:15:06,529
anti-reflective and true partition with

337
00:15:06,529 --> 00:15:09,200
very few files inside  this is the output

338
00:15:09,200 --> 00:15:12,350
of the program in the sense that the

339
00:15:12,350 --> 00:15:15,040
milk code that throws it out of the program and

340
00:15:15,040 --> 00:15:18,170
as you can see the first are

341
00:15:18,170 --> 00:15:20,240
system files that have the dollar in front of them

342
00:15:20,240 --> 00:15:21,980
are ntfs files that you find on

343
00:15:21,980 --> 00:15:24,830
all healthy partitions then there are red files

344
00:15:24,830 --> 00:15:28,250
one  which was already a file that

345
00:15:28,250 --> 00:15:30,140
I found but which was marked with me

346
00:15:30,140 --> 00:15:32,839
simply deleted then there are

347
00:15:32,839 --> 00:15:34,490
blue files that I called ghost files

348
00:15:34,490 --> 00:15:37,550
which are files of which I have not found

349
00:15:37,550 --> 00:15:40,250
the record directly but indirectly

350
00:15:40,250 --> 00:15:42,560
I understood that they existed thanks to

351
00:15:42,560 --> 00:15:46,100
example to their children or to the

352
00:15:46,100 --> 00:15:47,870
index records that still contained a

353
00:15:47,870 --> 00:15:51,410
track not supported by the fesr record and

354
00:15:51,410 --> 00:15:52,820
this was the first result of the

355
00:15:52,820 --> 00:15:57,170
my reconstruction work is beautiful

356
00:15:57,170 --> 00:15:58,820
very satisfactory but actually

357
00:15:58,820 --> 00:16:01,100
up to here we have forgotten a

358
00:16:01,100 --> 00:16:05,120
fundamental detail that I have only

359
00:16:05,120 --> 00:16:06,980
found the tree structure of the file

360
00:16:06,980 --> 00:16:07,400
system

361
00:16:07,400 --> 00:16:08,959
I have not found anything regarding

362
00:16:08,959 --> 00:16:11,390
the contents of the files and I have to

363
00:16:11,390 --> 00:16:12,830
recover the contents of the  file there is

364
00:16:12,830 --> 00:16:18,080
another problem that disks use a

365
00:16:18,080 --> 00:16:20,660
geometry in sectors event fs a

366
00:16:20,660 --> 00:16:23,089
geometry in cluster clusters is a

367
00:16:23,089 --> 00:16:25,520
group of sectors which could be

368
00:16:25,520 --> 00:16:28,190
two could be four we don't

369
00:16:28,190 --> 00:16:29,900
know because each ntfs file system

370
00:16:29,900 --> 00:16:33,470
uses a different power of two up  at

371
00:16:33,470 --> 00:16:35,570
128 it seems to me

372
00:16:35,570 --> 00:16:37,520
some are more frequent others less but in

373
00:16:37,520 --> 00:16:40,279
any case we know it is so far so

374
00:16:40,279 --> 00:16:42,140
we have not found where the

375
00:16:42,140 --> 00:16:45,079
partition begins that hekla space nor the

376
00:16:45,079 --> 00:16:47,209
sectors per cluster

377
00:16:47,209 --> 00:16:49,279
parameter without these two parameters there is

378
00:16:49,279 --> 00:16:51,800
only us that we recover the contents

379
00:16:51,800 --> 00:16:53,149
of the partition

380
00:16:53,149 --> 00:16:56,880
because  all references to

381
00:16:56,880 --> 00:17:00,240
file contents are clustered from where

382
00:17:00,240 --> 00:17:02,240
the file system begins

383
00:17:02,240 --> 00:17:04,770
f  so far we don't know how big

384
00:17:04,770 --> 00:17:07,589
class and how slow it is towards the file

385
00:17:07,589 --> 00:17:08,040


386
00:17:08,040 --> 00:17:10,500
system unless we have found the boot

387
00:17:10,500 --> 00:17:13,079
sector that specifies these two

388
00:17:13,079 --> 00:17:15,119
parameters but that's the simple case

389
00:17:15,119 --> 00:17:21,270
let's say and then at that moment one

390
00:17:21,270 --> 00:17:22,770
says but why not  I did the

391
00:17:22,770 --> 00:17:26,189
computer vision thesis in which I find the photos

392
00:17:26,189 --> 00:17:31,160
I find the points and and when you point them

393
00:17:31,160 --> 00:17:32,940
what happens I

394
00:17:32,940 --> 00:17:34,850
attach the photos and make a nice panorama it

395
00:17:34,850 --> 00:17:38,580
would have been much easier but in

396
00:17:38,580 --> 00:17:41,220
reality what I did here was

397
00:17:41,220 --> 00:17:43,860
find where I had to place the  photo

398
00:17:43,860 --> 00:17:46,169
is how much I had to distort it to make it

399
00:17:46,169 --> 00:17:48,960
match with the other photo that you look

400
00:17:48,960 --> 00:17:50,940
a bit is something that can also be done

401
00:17:50,940 --> 00:17:54,540
here because what happens if we find

402
00:17:54,540 --> 00:18:00,510
that the partition lists me a series

403
00:18:00,510 --> 00:18:06,530
of and read directories which point

404
00:18:06,530 --> 00:18:09,660
to  indications expressed in

405
00:18:09,660 --> 00:18:13,620
clusters to their vector indices and a says

406
00:18:13,620 --> 00:18:16,230
jol index my index is

407
00:18:16,230 --> 00:18:18,660
cluster 0 that zero is impossible but they are

408
00:18:18,660 --> 00:18:22,080
still an uncertain example cluster the

409
00:18:22,080 --> 00:18:23,520
directory b lithium but  my index

410
00:18:23,520 --> 00:18:27,120
cluster 1a director idc of what I at

411
00:18:27,120 --> 00:18:29,370
number 3 what happens I have

412
00:18:29,370 --> 00:18:30,690
a vague idea of how the partition is made

413
00:18:30,690 --> 00:18:32,910
because I realize that it

414
00:18:32,910 --> 00:18:35,940
had at least four clusters ok okay well

415
00:18:35,940 --> 00:18:39,090
in the first there was an index record  of a

416
00:18:39,090 --> 00:18:42,179
folder knows that at a certain number

417
00:18:42,179 --> 00:18:45,330
in the second cluster there is a

418
00:18:45,330 --> 00:18:48,419
rugby index record and in the fourth that is that of the

419
00:18:48,419 --> 00:18:49,650
directory c

420
00:18:49,650 --> 00:18:52,500
obviously provided that some of these

421
00:18:52,500 --> 00:18:53,910
have not been deleted or

422
00:18:53,910 --> 00:18:57,320
damaged by for other reasons

423
00:18:57,600 --> 00:19:01,770
at this point I have a  'idea of how

424
00:19:01,770 --> 00:19:05,710
the cluster partition is made

425
00:19:05,710 --> 00:19:08,169
who is already something compared to before

426
00:19:08,169 --> 00:19:09,010
more

427
00:19:09,010 --> 00:19:10,179
always remember that we have

428
00:19:10,179 --> 00:19:13,360
scanned the disk sectors so

429
00:19:13,360 --> 00:19:15,610
we know that in certain sectors there are

430
00:19:15,610 --> 00:19:17,590
index records of these index records

431
00:19:17,590 --> 00:19:21,000
we find the

432
00:19:21,000 --> 00:19:23,830
corresponding directory  reading the

433
00:19:23,830 --> 00:19:26,409
file list because if that ten file list

434
00:19:26,409 --> 00:19:28,419
and all these ten files say my

435
00:19:28,419 --> 00:19:31,990
parent at number 4 ok then that

436
00:19:31,990 --> 00:19:33,850
is directory index record number

437
00:19:33,850 --> 00:19:36,520
four for f  orza because otherwise they would

438
00:19:36,520 --> 00:19:39,970
all be randomly placed but I don't know

439
00:19:39,970 --> 00:19:42,190
yet how big a cluster is so

440
00:19:42,190 --> 00:19:46,390
I can only try and try with a

441
00:19:46,390 --> 00:19:49,320
sector per cluster what happens if

442
00:19:49,320 --> 00:19:52,149
I put a sector per class it happens that

443
00:19:52,149 --> 00:19:53,529
it is wrong because this is not the

444
00:19:53,529 --> 00:19:57,370
right parameter you see not  there is no

445
00:19:57,370 --> 00:19:59,890
match so climbed for cluster

446
00:19:59,890 --> 00:20:01,480
equal 1 is not valid for this

447
00:20:01,480 --> 00:20:04,059
partition but now what if I try

448
00:20:04,059 --> 00:20:06,669
with sector cluster equal 2

449
00:20:06,669 --> 00:20:11,460
in this case it happens that it was right

450
00:20:11,460 --> 00:20:14,230
thanks to the index record of the pointers and

451
00:20:14,230 --> 00:20:15,880
the index records that are in the file

452
00:20:15,880 --> 00:20:18,760
records  I found both the

453
00:20:18,760 --> 00:20:20,169
cluster value bass that is where the

454
00:20:20,169 --> 00:20:23,970
partition starts and the size of the sectors

455
00:20:23,970 --> 00:20:27,909
all this without the boot record because

456
00:20:27,909 --> 00:20:31,330
there was therefore no

457
00:20:31,330 --> 00:20:32,770
reference of where nice the

458
00:20:32,770 --> 00:20:34,510
hollaback partition of the back up the good doctor

459
00:20:34,510 --> 00:20:36,700
dear where it ends  that I have found

460
00:20:36,700 --> 00:20:39,399
everything I need this works with

461
00:20:39,399 --> 00:20:41,500
an approximate matching so you

462
00:20:41,500 --> 00:20:45,520
can do it even if there are some

463
00:20:45,520 --> 00:20:47,830
discrepancies  and because in the end on

464
00:20:47,830 --> 00:20:49,990
hundreds or thousands of records it is

465
00:20:49,990 --> 00:20:53,740
enough to do a vote and I see that it

466
00:20:53,740 --> 00:20:56,200
matches for 85 to 90 percent

467
00:20:56,200 --> 00:20:58,059
anyway I have found the

468
00:20:58,059 --> 00:21:00,789
correct position it is not important that it is one

469
00:21:00,789 --> 00:21:02,080
hundred percent you can use

470
00:21:02,080 --> 00:21:03,760
approximate sting matching techniques

471
00:21:03,760 --> 00:21:05,770
in fact this matching is done in the

472
00:21:05,770 --> 00:21:09,100
software using string matching so

473
00:21:09,100 --> 00:21:11,770
I have two strings optimized in a certain

474
00:21:11,770 --> 00:21:13,360
way because they have a lot of the ebook in the

475
00:21:13,360 --> 00:21:15,250
middle but let's say I call the strings

476
00:21:15,250 --> 00:21:17,350
are actually lists and then

477
00:21:17,350 --> 00:21:18,640
the matching is done so

478
00:21:18,640 --> 00:21:21,790
at this point I first  I had found the

479
00:21:21,790 --> 00:21:24,220
tree structure of the file system

480
00:21:24,220 --> 00:21:26,650
now I also found where the file

481
00:21:26,650 --> 00:21:31,060
system starts and how big the clusters are

482
00:21:31,060 --> 00:21:33,250
what does it mean that in theory

483
00:21:33,250 --> 00:21:37,480
I know everything I know all the references to the

484
00:21:37,480 --> 00:21:39,460
contents of fi and be able to recover the

485
00:21:39,460 --> 00:21:41,910
files

486
00:21:42,400 --> 00:21:45,310
then I put myself  to try I

487
00:21:45,310 --> 00:21:50,890
tried a very small disk made a

488
00:21:50,890 --> 00:21:53,740
case on purpose where I created a

489
00:21:53,740 --> 00:21:56,860
partition of fs in the middle let's say with a

490
00:21:56,860 --> 00:21:59,470
parameter no  n conventional which was 16

491
00:21:59,470 --> 00:22:01,210
sectors per cluster which quite rare

492
00:22:01,210 --> 00:22:05,710
and I put a lot of files in it

493
00:22:05,710 --> 00:22:09,010
after which it is also 45 directories

494
00:22:09,010 --> 00:22:12,700
after which I deleted the

495
00:22:12,700 --> 00:22:15,010
initial boot sector the final boot sector so

496
00:22:15,010 --> 00:22:16,270
there was no trace of where

497
00:22:16,270 --> 00:22:18,780
the table of start  partitions

498
00:22:18,780 --> 00:22:21,820
that however we have never used here and

499
00:22:21,820 --> 00:22:25,690
I have also deleted all the file records

500
00:22:25,690 --> 00:22:28,150
of the system files then mf tmt mirror

501
00:22:28,150 --> 00:22:29,880
log file etc.

502
00:22:29,880 --> 00:22:32,920


503
00:22:32,920 --> 00:22:34,930


504
00:22:34,930 --> 00:22:36,580


505
00:22:36,580 --> 00:22:39,400
he tells me I have not

506
00:22:39,400 --> 00:22:44,140
found any partitions and therefore

507
00:22:44,140 --> 00:22:47,920
enough that is I am not going to do them

508
00:22:47,920 --> 00:22:50,500
we open with auto psi maybe autop you do

509
00:22:50,500 --> 00:22:52,750
some more work auto psi they

510
00:22:52,750 --> 00:22:54,310
will not let me import the fai in the

511
00:22:54,310 --> 00:22:56,680
case so I will not be able to try any more

512
00:22:56,680 --> 00:22:58,750
work, not even carving  it will jump because

513
00:22:58,750 --> 00:23:00,310
autoxy crashes it tells me no this

514
00:23:00,310 --> 00:23:03,280
disk is not recognized ok I did not

515
00:23:03,280 --> 00:23:05,350
expect it so I was expecting another

516
00:23:05,350 --> 00:23:07,920
error just  well and then nothing

517
00:23:07,920 --> 00:23:09,940
then I said let's try with

518
00:23:09,940 --> 00:23:12,850
recoverable my software I started

519
00:23:12,850 --> 00:23:15,250
it a compact do the analysis and

520
00:23:15,250 --> 00:23:18,850
the bus and in the end it found 517

521
00:23:18,850 --> 00:23:24,580
files about 240 megabytes of content

522
00:23:24,580 --> 00:23:28,030
including all the photographs that are not yes

523
00:23:28,030 --> 00:23:29,620
they see a lot however they are

524
00:23:29,620 --> 00:23:31,049
viewable

525
00:23:31,049 --> 00:23:34,110
they can be opened they are exactly

526
00:23:34,110 --> 00:23:38,309
identical to what was the original content

527
00:23:38,309 --> 00:23:38,759


528
00:23:38,759 --> 00:23:43,230
then you can also export

529
00:23:43,230 --> 00:23:47,669
csv files for example with all the files the

530
00:23:47,669 --> 00:23:51,059
modification dates and the size of the files

531
00:23:51,059 --> 00:23:54,629
the containing directory etc. and

532
00:23:54,629 --> 00:23:57,419
therefore one can also  analyze the

533
00:23:57,419 --> 00:24:00,179
creation access modification dates you

534
00:24:00,179 --> 00:24:01,559
can export a file called body

535
00:24:01,559 --> 00:24:04,019
file that is used by a tool

536
00:24:04,019 --> 00:24:06,960
called time to make a pipe line of the

537
00:24:06,960 --> 00:24:08,940
modification dates and then one sees in

538
00:24:08,940 --> 00:24:11,759
what order the files have been modified and

539
00:24:11,759 --> 00:24:15,210
this  it was done on a hard disk that

540
00:24:15,210 --> 00:24:17,460
no longer had the beginning the partition at the

541
00:24:17,460 --> 00:24:20,899
end is not even the system files of ntfs

542
00:24:20,899 --> 00:24:23,059
all the parameters were taken

543
00:24:23,059 --> 00:24:25,769
from  the traces found and it has been

544
00:24:25,769 --> 00:24:27,359
rebuilt to the

545
00:24:27,359 --> 00:24:29,100
directory structure that you can see in this

546
00:24:29,100 --> 00:24:32,309
preview a little bit small and it is

547
00:24:32,309 --> 00:24:33,989
exactly how I expected to

548
00:24:33,989 --> 00:24:36,090
find it because I created the case

549
00:24:36,090 --> 00:24:38,759
so I knew the head file

550
00:24:38,759 --> 00:24:40,470
I knew which structure had to drink and  it

551
00:24:40,470 --> 00:24:43,429
was found here

552
00:24:43,679 --> 00:24:46,679
well this was more or less the whole

553
00:24:46,679 --> 00:24:50,489
reconstruction process and I wanted to

554
00:24:50,489 --> 00:24:53,340
tell you a couple of things that I had in mind

555
00:24:53,340 --> 00:24:56,669
to do in the future as ideas that

556
00:24:56,669 --> 00:24:59,249
could be developed from here to

557
00:24:59,249 --> 00:25:01,830
improve recoverable for example one

558
00:25:01,830 --> 00:25:03,149
could be add a '  graphical

559
00:25:03,149 --> 00:25:06,629
interface because maybe someone may

560
00:25:06,629 --> 00:25:08,159
also like to have the possibility to

561
00:25:08,159 --> 00:25:11,159
select single files to recover

562
00:25:11,159 --> 00:25:14,399
instead of all of them or common to

563
00:25:14,399 --> 00:25:16,470
exclude deleted files or

564
00:25:16,470 --> 00:25:18,659
recover only deleted files other

565
00:25:18,659 --> 00:25:20,369
things that are much more practical to do

566
00:25:20,369 --> 00:25:22,659
on a graphical interface

567
00:25:22,659 --> 00:25:25,179
compared to a command line 21

568
00:25:25,179 --> 00:25:29,889
maybe it inscribes some commands then it would be

569
00:25:29,889 --> 00:25:31,509
interesting to add other modules

570
00:25:31,509 --> 00:25:32,649
one thing that I did not mention and that

571
00:25:32,649 --> 00:25:35,379
the structure is completely recoverable the

572
00:25:35,379 --> 00:25:38,289
tree reconstruction

573
00:25:38,289 --> 00:25:39,580
can be done independently of the file

574
00:25:39,580 --> 00:25:41,739
systems there is that procedure that

575
00:25:41,739 --> 00:25:44,349
he explained is very simple because it

576
00:25:44,349 --> 00:25:47,109
works independently of the file

577
00:25:47,109 --> 00:25:50,320
systems you just need to know a list of

578
00:25:50,320 --> 00:25:52,840
files  that somehow I found this on the

579
00:25:52,840 --> 00:25:56,590
disk the scan depends on the

580
00:25:56,590 --> 00:25:58,149
type of file system but the

581
00:25:58,149 --> 00:26:00,340
final concept here is a list of files this

582
00:26:00,340 --> 00:26:02,440
list of files each file to its

583
00:26:02,440 --> 00:26:04,809
parent I do the

584
00:26:04,809 --> 00:26:06,549
tree reconstruction regardless of the file

585
00:26:06,549 --> 00:26:07,899
systems so also to make a

586
00:26:07,899 --> 00:26:10,299
gari system  in which I could not for some

587
00:26:10,299 --> 00:26:12,820
reason and roads content can extract

588
00:26:12,820 --> 00:26:16,479
however the tree structure and then you

589
00:26:16,479 --> 00:26:19,359
can add them obviously

590
00:26:19,359 --> 00:26:21,700
depends also on the type of file system you

591
00:26:21,700 --> 00:26:24,129
can add specific modules in

592
00:26:24,129 --> 00:26:26,889
which he passed the sectors one at a time and

593
00:26:26,889 --> 00:26:31,149
how the module  ntfs does its own

594
00:26:31,149 --> 00:26:33,820
math to figure out how to come up with

595
00:26:33,820 --> 00:26:35,889
files for other file systems  your

596
00:26:35,889 --> 00:26:37,869
module once implemented

597
00:26:37,869 --> 00:26:41,590
could do the calculations and equally

598
00:26:41,590 --> 00:26:44,710
another thing is that many of you will probably

599
00:26:44,710 --> 00:26:45,999
know kane which is an

600
00:26:45,999 --> 00:26:47,440
Italian distribution one of the two

601
00:26:47,440 --> 00:26:49,599
Italian distributions of which deals

602
00:26:49,599 --> 00:26:52,389
with forensics and developed by nanni

603
00:26:52,389 --> 00:26:54,279
bassetti in the next release of kane

604
00:26:54,279 --> 00:26:56,109
you can also find bit recovery inside

605
00:26:56,109 --> 00:26:58,269
so among the many tools that are

606
00:26:58,269 --> 00:27:00,489
inside you will also find this if you want to

607
00:27:00,489 --> 00:27:03,039
try it anyway you can download it

608
00:27:03,039 --> 00:27:05,919
freely because a free software and

609
00:27:05,919 --> 00:27:10,889
then you can find it in practice I

610
00:27:10,889 --> 00:27:12,729
basically explained everything if they

611
00:27:12,729 --> 00:27:14,229
are a last thing to say

612
00:27:14,229 --> 00:27:18,220
yesterday I was looking at  the slides I

613
00:27:18,220 --> 00:27:22,409
asked myself but actually in addition to the

614
00:27:22,409 --> 00:27:24,999
laptop or the desktop

615
00:27:24,999 --> 00:27:29,379
what we often use and I thought for a

616
00:27:29,379 --> 00:27:31,289
moment and I gave myself this answer here

617
00:27:31,289 --> 00:27:33,040
that it is

618
00:27:33,040 --> 00:27:36,940
an android tablet or an

619
00:27:36,940 --> 00:27:38,230


620
00:27:38,230 --> 00:27:40,440
android device they said it but it would be interesting to

621
00:27:40,440 --> 00:27:45,700
try to make  work recoverable on

622
00:27:45,700 --> 00:27:48,250
android actually works

623
00:27:48,250 --> 00:27:49,870
perfect  by

624
00:27:49,870 --> 00:27:52,440
modifying two lines of a file and

625
00:27:52,440 --> 00:27:54,670
installing a simple python package

626
00:27:54,670 --> 00:27:57,820
for android it was possible to execute

627
00:27:57,820 --> 00:27:59,860
the exact same code on an

628
00:27:59,860 --> 00:28:01,750
image file on the vote in the memory card

629
00:28:01,750 --> 00:28:03,070
in my internal memory of the

630
00:28:03,070 --> 00:28:06,130
device and do the whole process of

631
00:28:06,130 --> 00:28:10,420
analysis reconstruction and extraction on

632
00:28:10,420 --> 00:28:14,920
android  and then one explores the files

633
00:28:14,920 --> 00:28:17,740
with the application he prefers so

634
00:28:17,740 --> 00:28:20,320
I think it is the first tool that does

635
00:28:20,320 --> 00:28:22,120
reconstruction in iraq and party running on

636
00:28:22,120 --> 00:28:24,250
android I think it may be that I'm wrong

637
00:28:24,250 --> 00:28:25,920
but I think it is so

638
00:28:25,920 --> 00:28:30,720
here or I start thanks years

