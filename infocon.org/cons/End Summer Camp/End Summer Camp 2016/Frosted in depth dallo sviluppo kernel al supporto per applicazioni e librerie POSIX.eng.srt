1
00:00:00,000 --> 00:00:02,550
friends of the band welcome to the second

2
00:00:02,550 --> 00:00:05,339
part of the frost prescription where

3
00:00:05,339 --> 00:00:08,010
we will go into a little more detail of how

4
00:00:08,010 --> 00:00:12,750
the system has been implemented, how

5
00:00:12,750 --> 00:00:14,910
we have implemented some

6
00:00:14,910 --> 00:00:17,150
features and where I would like to

7
00:00:17,150 --> 00:00:18,690
talk to you

8
00:00:18,690 --> 00:00:21,570
at the end of the talk to know what you

9
00:00:21,570 --> 00:00:23,910
think of the  architectural choices and if

10
00:00:23,910 --> 00:00:26,970
you have any advice to give us or

11
00:00:26,970 --> 00:00:31,260
questions that I cannot answer frosted

12
00:00:31,260 --> 00:00:35,250
is not ionix bini but we hope to

13
00:00:35,250 --> 00:00:36,899
get as close as possible because as

14
00:00:36,899 --> 00:00:38,790
I said yesterday I do not know which of you

15
00:00:38,790 --> 00:00:42,680
among you and re was not here at the talk

16
00:00:42,680 --> 00:00:46,649
ok really briefly frost of a

17
00:00:46,649 --> 00:00:52,710
free gtl operating system designed

18
00:00:52,710 --> 00:00:55,590
for very small embedded systems where

19
00:00:55,590 --> 00:00:59,039
linux would not run much in synthesis the

20
00:00:59,039 --> 00:01:01,800
systems without mmo stamping of arm

21
00:01:01,800 --> 00:01:06,060
cortex m which however tends to maintain

22
00:01:06,060 --> 00:01:09,000
posix interfaces such as the

23
00:01:09,000 --> 00:01:12,510
laces col interface in such a way that it is  easy

24
00:01:12,510 --> 00:01:14,780
for everyone

25
00:01:15,210 --> 00:01:18,270
for all who a family

26
00:01:18,270 --> 00:01:20,920
with programming in linux

27
00:01:20,920 --> 00:01:24,850
and unix and unix like to write

28
00:01:24,850 --> 00:01:27,700
applications  ions for embedded systems in an

29
00:01:27,700 --> 00:01:31,240
environment in many process with a

30
00:01:31,240 --> 00:01:33,580
space separation force that in the

31
00:01:33,580 --> 00:01:37,330
memory protection space and with the

32
00:01:37,330 --> 00:01:41,950
possibility of protecting in particular the stack

33
00:01:41,950 --> 00:01:44,200
of the other processes while the

34
00:01:44,200 --> 00:01:47,380
processes are running so we said frost it

35
00:01:47,380 --> 00:01:51,040
was not me knicks but you get closer  a lot

36
00:01:51,040 --> 00:01:54,550
we hope as much as possible since the

37
00:01:54,550 --> 00:01:57,660
basis of everything are the posix specifications

38
00:01:57,660 --> 00:02:00,490
so we have a virtual file system

39
00:02:00,490 --> 00:02:03,640
we have processes we have terminals

40
00:02:03,640 --> 00:02:06,370
we have our devices that are in

41
00:02:06,370 --> 00:02:10,810
dub and we have sections with standards and

42
00:02:10,810 --> 00:02:16,300
customers so I point for us on other

43
00:02:16,300 --> 00:02:18,580
operating systems a lot  more populated

44
00:02:18,580 --> 00:02:20,800
processes can be interrupted at

45
00:02:20,800 --> 00:02:25,270
any time and interrupts are almost

46
00:02:25,270 --> 00:02:28,600
always on let's say we can assume

47
00:02:28,600 --> 00:02:31,720
interest always on except when

48
00:02:31,720 --> 00:02:35,020
at the moment when an integer of

49
00:02:35,020 --> 00:02:38,080
higher priority is running because arm has the

50
00:02:38,080 --> 00:02:40,150
possibility to find it on the

51
00:02:40,150 --> 00:02:43,450
internet and therefore we say in  this

52
00:02:43,450 --> 00:02:45,160
fair way of the drivers can

53
00:02:45,160 --> 00:02:46,930
specify that an in  terrotta a

54
00:02:46,930 --> 00:02:49,390
higher priority than the others and

55
00:02:49,390 --> 00:02:51,550
in that case the other internet are

56
00:02:51,550 --> 00:02:52,630
put to the north

57
00:02:52,630 --> 00:02:56,220
until the inter waits no return

58
00:02:56,370 --> 00:02:59,560
normally inter wait however they

59
00:02:59,560 --> 00:03:01,890
are

60
00:03:02,410 --> 00:03:06,170
performed very very quickly and

61
00:03:06,170 --> 00:03:08,360
this gives us the possibility of having

62
00:03:08,360 --> 00:03:11,450
very small users even the

63
00:03:11,450 --> 00:03:13,100
operations in  kernels can be

64
00:03:13,100 --> 00:03:17,180
suspended by the scheduler to allow

65
00:03:17,180 --> 00:03:22,760
the execution of a task in some in

66
00:03:22,760 --> 00:03:24,230
some issues where that is

67
00:03:24,230 --> 00:03:26,630
required and even the system calls

68
00:03:26,630 --> 00:03:29,270
can be interrupted

69
00:03:29,270 --> 00:03:32,870
this in fact causes frosted to be

70
00:03:32,870 --> 00:03:37,790
realtime this was already true more or less

71
00:03:37,790 --> 00:03:40,040
yesterday evening today and  us even more

72
00:03:40,040 --> 00:03:42,230
because I fixed a bug this morning

73
00:03:42,230 --> 00:03:47,780
in the skater and in particular that

74
00:03:47,780 --> 00:03:49,910
I brought with me a riser logic I

75
00:03:49,910 --> 00:03:53,330
was able to prove that the latency

76
00:03:53,330 --> 00:04:00,950
is actually fixed let's say pre-

77
00:04:00,950 --> 00:04:03,590
calculable is the fact that the

78
00:04:03,590 --> 00:04:07,760
realtime processes react to the inter  out

79
00:04:07,760 --> 00:04:11,300
which is

80
00:04:11,300 --> 00:04:14,420
pertaining to it in relatively small time fractions measured in 23

81
00:04:14,420 --> 00:04:20,839
microseconds when when  it happens that an

82
00:04:20,839 --> 00:04:24,130
interrupt that affects the process

83
00:04:24,130 --> 00:04:26,570
wakes up the process stopping all the

84
00:04:26,570 --> 00:04:29,360
others if the process is obviously put

85
00:04:29,360 --> 00:04:31,280
in priority the suit

86
00:04:31,280 --> 00:04:33,800
there are different priority levels such as

87
00:04:33,800 --> 00:04:36,200
new knicks we use the value of nice

88
00:04:36,200 --> 00:04:38,930
so in payments to how much a

89
00:04:38,930 --> 00:04:40,310
process and nice

90
00:04:40,310 --> 00:04:43,490
we have priority and  we count from minus 20 to

91
00:04:43,490 --> 00:04:45,980
plus 20 where minus 20 is exactly the

92
00:04:45,980 --> 00:04:48,590
priority level for

93
00:04:48,590 --> 00:04:51,590
realtime processes the important thing that even the

94
00:04:51,590 --> 00:04:54,260
kernel can stop is not

95
00:04:54,260 --> 00:04:57,050
that the kernel has a special priority

96
00:04:57,050 --> 00:05:00,710
within the scheduler but let's say

97
00:05:00,710 --> 00:05:03,700
in case  a realtime event occurs

98
00:05:03,700 --> 00:05:05,710
that affects a process

99
00:05:05,710 --> 00:05:08,060
against ita minus 20

100
00:05:08,060 --> 00:05:09,590
even the kernel can be a

101
00:05:09,590 --> 00:05:14,300
customer in that case this is a

102
00:05:14,300 --> 00:05:17,410
rather big claim let's say that frost and it is

103
00:05:17,410 --> 00:05:19,520
sufficiently safe in the sense of

104
00:05:19,520 --> 00:05:25,160
safety and not of security because a memory

105
00:05:25,160 --> 00:05:28,130
pool separated for between  meat of user

106
00:05:28,130 --> 00:05:30,250
spaces this is one of the

107
00:05:30,250 --> 00:05:32,870
features kernel memory is completely

108
00:05:32,870 --> 00:05:36,130
protected alt memory  re processes

109
00:05:36,130 --> 00:05:38,780
is not accessible for me not the stack

110
00:05:38,780 --> 00:05:42,290
is not accessible the ip is still

111
00:05:42,290 --> 00:05:44,090
accessible between one project and another

112
00:05:44,090 --> 00:05:46,520
at the moment there are some things that are

113
00:05:46,520 --> 00:05:49,130
prohibited such as freeing

114
00:05:49,130 --> 00:05:50,600
an area of memory that was leased

115
00:05:50,600 --> 00:05:53,750
by  another process is however we say

116
00:05:53,750 --> 00:05:57,170
that it is good practice in

117
00:05:57,170 --> 00:06:00,250
embedded applications that they must be sure to

118
00:06:00,250 --> 00:06:02,540
use the least possible

119
00:06:02,540 --> 00:06:06,680
dynamic allocation especially if the device

120
00:06:06,680 --> 00:06:09,140
the system we are going to

121
00:06:09,140 --> 00:06:11,690
program has functions the

122
00:06:11,690 --> 00:06:15,970
critical index so the processes cannot

123
00:06:15,970 --> 00:06:20,180
access those areas  of memory that

124
00:06:20,180 --> 00:06:23,630
are not allowed is

125
00:06:23,630 --> 00:06:26,600
unlike other realtime operating systems

126
00:06:26,600 --> 00:06:27,890
for embedded

127
00:06:27,890 --> 00:06:29,690
it is not possible for processes for

128
00:06:29,690 --> 00:06:31,550
example to turn on a led move

129
00:06:31,550 --> 00:06:33,410
the gp and york or go to access a

130
00:06:33,410 --> 00:06:35,780
cpu register which normally

131
00:06:35,780 --> 00:06:39,460
with objects such as free artus  you are

132
00:06:39,460 --> 00:06:44,260
quietly authorized to do so

133
00:06:44,260 --> 00:06:47,600
any so-called system operation or

134
00:06:47,600 --> 00:06:52,160
which is in any case the responsibility of the kernel can

135
00:06:52,160 --> 00:06:57,670
be realized in user space by

136
00:06:57,670 --> 00:07:00,410
calling an assist with the uncoupled

137
00:07:00,410 --> 00:07:01,670
as we will see shortly in the

138
00:07:01,670 --> 00:07:05,750
interrupt description changes the context and passes from

139
00:07:05,750 --> 00:07:07,850
a user execution context

140
00:07:07,850 --> 00:07:09,800
exactly as you are used to the 6

141
00:07:09,800 --> 00:07:12,410
million xvi is an execution forum

142
00:07:12,410 --> 00:07:14,230
immunity

143
00:07:14,230 --> 00:07:17,520
that arm in arms is called supervisor

144
00:07:17,520 --> 00:07:20,020
this makes it possible to execute system operations within the

145
00:07:20,020 --> 00:07:22,870
system of the invention where, for

146
00:07:22,870 --> 00:07:24,460
example, the code of the

147
00:07:24,460 --> 00:07:27,970
drivers of the other sub-systems is

148
00:07:27,970 --> 00:07:32,050
executed,

149
00:07:32,050 --> 00:07:34,290
which however are actually

150
00:07:34,290 --> 00:07:36,820
controlled by the kernel also weighs the

151
00:07:36,820 --> 00:07:38,490
validity of the arguments of the  colle is

152
00:07:38,490 --> 00:07:42,860
checked when the cisco

153
00:07:42,860 --> 00:07:47,060
is awakened let's say that this here is

154
00:07:47,060 --> 00:07:51,500
a bit of the description of the components that

155
00:07:51,500 --> 00:07:56,319
comes into play in the whole frost system

156
00:07:56,319 --> 00:07:59,629
this red line here we say the

157
00:07:59,629 --> 00:08:04,879
separation between curling space starting

158
00:08:04,879 --> 00:08:05,780
from the bottom

159
00:08:05,780 --> 00:08:09,620
let's say the only component more  whether or not

160
00:08:09,620 --> 00:08:13,520
it accesses the hardware directly is

161
00:08:13,520 --> 00:08:16,789
the library hay only remix which is a

162
00:08:16,789 --> 00:08:19,509
fork  di lippo credo entry and as

163
00:08:19,509 --> 00:08:23,710
explained yesterday it is used as

164
00:08:23,710 --> 00:08:26,930
a hardware distraction interface so

165
00:08:26,930 --> 00:08:30,529
we say the final goal of the only

166
00:08:30,529 --> 00:08:33,649
remix that we say with respect to the project is

167
00:08:33,649 --> 00:08:36,070
young has only a couple of months of life

168
00:08:36,070 --> 00:08:41,529
is to provide a common api

169
00:08:41,529 --> 00:08:43,880
independent of the

170
00:08:43,880 --> 00:08:47,750
from the manufacturer for example of the hardware

171
00:08:47,750 --> 00:08:50,790
that is able to access the functionality

172
00:08:50,790 --> 00:08:55,770
of the underlying devices we do

173
00:08:55,770 --> 00:09:00,330
for example a reading from a

174
00:09:00,330 --> 00:09:04,740
serial from ewart there must be the

175
00:09:04,740 --> 00:09:08,000
same the same front end interface

176
00:09:08,000 --> 00:09:12,029
ewart and rex is valid both for

177
00:09:12,029 --> 00:09:15,000
microelectronics processors and / or for  the

178
00:09:15,000 --> 00:09:19,080
annex pil cards fixed and from the same

179
00:09:19,080 --> 00:09:20,910
result we say the same

180
00:09:20,910 --> 00:09:23,910
behavior when viewed

181
00:09:23,910 --> 00:09:29,100
from above this operation is still in

182
00:09:29,100 --> 00:09:29,910
progress

183
00:09:29,910 --> 00:09:32,209
that is why there is a small asterisk here

184
00:09:32,209 --> 00:09:37,500
because it effects the state in which book

185
00:09:37,500 --> 00:09:39,930
thought and three was previously

186
00:09:39,930 --> 00:09:44,250
our fork not  effectively guaranteed

187
00:09:44,250 --> 00:09:47,520
this uniqueness of these Jewish plans

188
00:09:47,520 --> 00:09:49,589
are they are in a process of

189
00:09:49,589 --> 00:09:52,470
unification for the  at the moment only some

190
00:09:52,470 --> 00:09:55,709
architectures have the same ones as for

191
00:09:55,709 --> 00:09:58,980
the rest let's say that the frost drivers

192
00:09:58,980 --> 00:10:02,130
and that they talk to with the hardware

193
00:10:02,130 --> 00:10:05,580
selection layer are adapted according to the

194
00:10:05,580 --> 00:10:07,800
architecture so there is still a

195
00:10:07,800 --> 00:10:11,640
bit of work in progress let's say this

196
00:10:11,640 --> 00:10:14,780
level  here to establish

197
00:10:14,780 --> 00:10:19,170
the bees with which it must be speak with

198
00:10:19,170 --> 00:10:23,220
her or underlying abduction in

199
00:10:23,220 --> 00:10:25,050
the upper level there are the

200
00:10:25,050 --> 00:10:29,250
specific device drivers of frost and which we

201
00:10:29,250 --> 00:10:33,990
will analyze in particular to understand

202
00:10:33,990 --> 00:10:37,040
how to carry out blocking operations for example

203
00:10:37,040 --> 00:10:42,330
and then obviously there is a part

204
00:10:42,330 --> 00:10:46,530
of specific code for the board that in the

205
00:10:46,530 --> 00:10:50,340
case of well-known boards such as

206
00:10:50,340 --> 00:10:52,940
evaluation boards that are available

207
00:10:52,940 --> 00:10:56,540
retail nowadays

208
00:10:56,540 --> 00:11:00,420
let's say there are already predefined ports

209
00:11:00,420 --> 00:11:02,940
in case you want to build

210
00:11:02,940 --> 00:11:09,140
build your pc b with a cortex m

211
00:11:09,140 --> 00:11:15,000
let's say it is a  ad hoc layout customized

212
00:11:15,000 --> 00:11:17,180
for your needs

213
00:11:17,180 --> 00:11:19,470
this is the file you will have to

214
00:11:19,470 --> 00:11:25,440
write for your board to be able

215
00:11:25,440 --> 00:11:27,930
to initialize yes as it is tr

216
00:11:27,930 --> 00:11:29,790
almost always equipped with

217
00:11:29,790 --> 00:11:34,099
initialization and ping functions muck singh

218
00:11:34,230 --> 00:11:36,640
initialize yes in such a way as to

219
00:11:36,640 --> 00:11:38,770
be able to boot correct

220
00:11:38,770 --> 00:11:42,100
correctly above there are all

221
00:11:42,100 --> 00:11:45,010
the subsystems we have implemented

222
00:11:45,010 --> 00:11:49,930
so far there is a core that takes care

223
00:11:49,930 --> 00:11:54,600
of providing abstractions of lateral structures

224
00:11:54,600 --> 00:11:56,490
of the kernel and specifications that it cannot

225
00:11:56,490 --> 00:11:58,920
see shortly there is a round

226
00:11:58,920 --> 00:12:03,060
robin scheduler which however has the characteristics we

227
00:12:03,060 --> 00:12:07,709
have listed so it is first of all real

228
00:12:07,709 --> 00:12:12,870
time web there is a tcp ip stack developed

229
00:12:12,870 --> 00:12:14,610
more or less by the same authors in

230
00:12:14,610 --> 00:12:17,690
contexts and times  different

231
00:12:17,690 --> 00:12:20,899
specifically it is pico tcp

232
00:12:20,899 --> 00:12:24,930
which we consider very suitable for

233
00:12:24,930 --> 00:12:30,050
aid applications because ipv6 support

234
00:12:30,050 --> 00:12:35,160
fan can do routing between

235
00:12:35,160 --> 00:12:38,250
different interfaces and a series of protocols already

236
00:12:38,250 --> 00:12:41,759
implemented and moreover it

237
00:12:41,759 --> 00:12:44,310
can be easily integrated with the higher level

238
00:12:44,310 --> 00:12:48,910
therefore with the posix interfaces

239
00:12:48,910 --> 00:12:53,470
of barclay bsd  sockets that

240
00:12:53,470 --> 00:12:55,329


241
00:12:55,329 --> 00:12:59,549
unit or posix programmers normally use to access

242
00:12:59,549 --> 00:13:03,670
virtual network resources  file

243
00:13:03,670 --> 00:13:07,959
system that we say acts as a collector to

244
00:13:07,959 --> 00:13:12,040
all the file systems that are exposed

245
00:13:12,040 --> 00:13:14,079
in different directories just like it

246
00:13:14,079 --> 00:13:17,319
happens on your linux machine is

247
00:13:17,319 --> 00:13:19,629
the memory manager and memory history

248
00:13:19,629 --> 00:13:27,449
which obviously resides in the kernel because

249
00:13:27,449 --> 00:13:29,529
it has to deal with all the

250
00:13:29,529 --> 00:13:31,629
operations related to the sorting

251
00:13:31,629 --> 00:13:35,499
calls to the various pools and many

252
00:13:35,499 --> 00:13:39,399
times it happens that these in these c more

253
00:13:39,399 --> 00:13:42,850
rigorously are segmented into different

254
00:13:42,850 --> 00:13:46,959
physical areas and therefore we say the mallock that

255
00:13:46,959 --> 00:13:50,579
you go to call from userspace

256
00:13:50,579 --> 00:13:52,839
hides this further

257
00:13:52,839 --> 00:13:54,879
complexity of the

258
00:13:54,879 --> 00:13:57,509
hardware structure in such a way as to

259
00:13:57,509 --> 00:14:01,540
allow you to say  to obtain the

260
00:14:01,540 --> 00:14:03,149
behavior that you

261
00:14:03,149 --> 00:14:05,949
normally expect from the dynamic location

262
00:14:05,949 --> 00:14:09,579
of the memory i nip what happens

263
00:14:09,579 --> 00:14:11,439
that above these ours, as I said,

264
00:14:11,439 --> 00:14:14,949
the only possible interface to

265
00:14:14,949 --> 00:14:17,529
access the system functions from applications or

266
00:14:17,529 --> 00:14:21,009
user code are

267
00:14:21,009 --> 00:14:22,269
precisely the system calls

268
00:14:22,269 --> 00:14:25,480
at the moment about seventy s have been implemented

269
00:14:25,480 --> 00:14:28,899
systems with therefore we say a

270
00:14:28,899 --> 00:14:30,939
large part of the application we have

271
00:14:30,939 --> 00:14:33,089
tried

272
00:14:33,089 --> 00:14:35,589
we say that they come from the

273
00:14:35,589 --> 00:14:36,730
world of units

274
00:14:36,730 --> 00:14:37,929
more in particular small applications

275
00:14:37,929 --> 00:14:43,029
for linux can be compiled without

276
00:14:43,029 --> 00:14:45,249
problems and runs and runs safely

277
00:14:45,249 --> 00:14:47,889
even on frost and what it is possible to

278
00:14:47,889 --> 00:14:53,829
do is the  separation between all

279
00:14:53,829 --> 00:14:56,139
that is standard si standard libraries

280
00:14:56,139 --> 00:14:59,049
cie that are these level here

281
00:14:59,049 --> 00:15:01,449
instead is all that they are for

282
00:15:01,449 --> 00:15:03,970
example to your libraries as it can

283
00:15:03,970 --> 00:15:05,379
be for example they made a

284
00:15:05,379 --> 00:15:09,240
wolf ssl port which is a similar ssl library

285
00:15:09,240 --> 00:15:12,600
let's say as an open ssl interface

286
00:15:12,600 --> 00:15:15,399
that allows you to open I know that tls

287
00:15:15,399 --> 00:15:21,179
or to carry out encryption of payloads

288
00:15:21,179 --> 00:15:25,959
using symmetric keys

289
00:15:25,959 --> 00:15:30,100
or do I don't know all those

290
00:15:30,100 --> 00:15:34,119
things you do type of helman generation

291
00:15:34,119 --> 00:15:36,610
of keys etc. etc.

292
00:15:36,610 --> 00:15:38,470
I said these applications here

293
00:15:38,470 --> 00:15:41,980
normally expect that there is a

294
00:15:41,980 --> 00:15:44,619
posix interface l  posix interface

295
00:15:44,619 --> 00:15:48,100
is not only composed of system calls but

296
00:15:48,100 --> 00:15:50,259
contains a  Even all those

297
00:15:50,259 --> 00:15:53,199
system functions that are normally done in

298
00:15:53,199 --> 00:15:56,019
linux for example by judgments these

299
00:15:56,019 --> 00:15:57,639
functions are increased for example

300
00:15:57,639 --> 00:16:00,459
pressure on the strings or rather than

301
00:16:00,459 --> 00:16:03,069
processing of the arguments before

302
00:16:03,069 --> 00:16:06,819
the passage of the ssis col are

303
00:16:06,819 --> 00:16:09,759
normally done in the gp yes by us in the

304
00:16:09,759 --> 00:16:12,710
prosthesis library

305
00:16:12,710 --> 00:16:16,160
is  a fork of new book the

306
00:16:16,160 --> 00:16:17,720
important thing also of this

307
00:16:17,720 --> 00:16:20,450
olive fort which has a permissive license unlike the kernel

308
00:16:20,450 --> 00:16:22,700
so as

309
00:16:22,700 --> 00:16:24,640
I said yesterday it is possible to compile

310
00:16:24,640 --> 00:16:27,380
proprietary applications as well as

311
00:16:27,380 --> 00:16:30,140
applications with different licenses not

312
00:16:30,140 --> 00:16:33,980
compatible with the gpl example patches that

313
00:16:33,980 --> 00:16:35,780
can run  however on this

314
00:16:35,780 --> 00:16:37,580
system because they are not directly

315
00:16:37,580 --> 00:16:40,310
linked with

316
00:16:40,310 --> 00:16:44,360
with the kernel binary which instead is

317
00:16:44,360 --> 00:16:46,820
below is a bit what happens for

318
00:16:46,820 --> 00:16:49,430
example in linux

319
00:16:49,430 --> 00:16:53,090
where you have different possibilities for

320
00:16:53,090 --> 00:16:56,180
example you can replace the lipsi with

321
00:16:56,180 --> 00:16:58,640
with another implementation like muesli

322
00:16:58,640 --> 00:17:01,370
for example new  look itself or if

323
00:17:01,370 --> 00:17:03,470
you have an android phone

324
00:17:03,470 --> 00:17:05,689
normally this layer here is

325
00:17:05,689 --> 00:17:08,329
occupied by bionic which are the 10 books

326
00:17:08,329 --> 00:17:12,560
of google to make

327
00:17:12,560 --> 00:17:16,150
applications work on android systems

328
00:17:16,150 --> 00:17:18,380
so at this point these

329
00:17:18,380 --> 00:17:20,060
sensitive applications that violate you here

330
00:17:20,060 --> 00:17:23,060
have the possibility to access

331
00:17:23,060 --> 00:17:25,670
an interface that is well defined that

332
00:17:25,670 --> 00:17:29,360
you already know man page pages 2 3

333
00:17:29,360 --> 00:17:33,880
explains how to access these interfaces

334
00:17:33,880 --> 00:17:36,440
we have tried to keep as

335
00:17:36,440 --> 00:17:39,170
close as possible to what

336
00:17:39,170 --> 00:17:41,510
the implementation that is a user an

337
00:17:41,510 --> 00:17:44,990
application programmer

338
00:17:44,990 --> 00:17:49,010
expects from the system and for which this

339
00:17:49,010 --> 00:17:53,240
completes the architecture let's say  these

340
00:17:53,240 --> 00:17:56,340
are the components that we have developed

341
00:17:56,340 --> 00:18:01,059
to date it must be said that some of

342
00:18:01,059 --> 00:18:02,590
these applications even the most

343
00:18:02,590 --> 00:18:04,570
trivial ones such as carteles etc.

344
00:18:04,570 --> 00:18:08,350
we preferred to rewrite them in a

345
00:18:08,350 --> 00:18:10,840
more banal way is small possible in

346
00:18:10,840 --> 00:18:14,080
such a way as to save some space

347
00:18:14,080 --> 00:18:15,880
on the flash

348
00:18:15,880 --> 00:18:19,130
perhaps by removing  some some features

349
00:18:19,130 --> 00:18:23,270
at the various podiums system but let's say there is

350
00:18:23,270 --> 00:18:25,400
such a flexibility that if you

351
00:18:25,400 --> 00:18:28,550
you have the sources of the minutes of a

352
00:18:28,550 --> 00:18:30,650
linux distribution or an open tablet

353
00:18:30,650 --> 00:18:33,980
that you can still try to

354
00:18:33,980 --> 00:18:38,320
compile them based on the recipe

355
00:18:38,320 --> 00:18:43,070
is made available how the

356
00:18:43,070 --> 00:18:50,210
flash works the kernel is compiled and is

357
00:18:50,210 --> 00:18:54,320
put in an image file that as

358
00:18:54,320 --> 00:18:58,870
we said yesterday is  the flat version

359
00:19:00,460 --> 00:19:04,580
of the kernel executable to this

360
00:19:04,580 --> 00:19:07,190
kernel reached a pub bing to

361
00:19:07,190 --> 00:19:12,440
get up to the limit which is defined

362
00:19:12,440 --> 00:19:14,750
at kernel size and which of the size is

363
00:19:14,750 --> 00:19:16,820
configurable of the config menu when

364
00:19:16,820 --> 00:19:18,710
asking carrell why did you do this to me

365
00:19:18,710 --> 00:19:21,200
because protection  memory

366
00:19:21,200 --> 00:19:23,330
only works in blocks that are 2

367
00:19:23,330 --> 00:19:26,780
bit multiples in this way here it is

368
00:19:26,780 --> 00:19:32,570
possible to separate the flash from the user

369
00:19:32,570 --> 00:19:38,480
space and also allows us to have a

370
00:19:38,480 --> 00:19:43,420
fixed entry point where we

371
00:19:43,420 --> 00:19:46,190
usually say we go to put an

372
00:19:46,190 --> 00:19:51,400
image xip fs xip fs is a

373
00:19:51,460 --> 00:19:55,250
ridoli filesystem made on purpose  to be mounted

374
00:19:55,250 --> 00:19:57,350
start up and deal is mounted in slice

375
00:19:57,350 --> 00:19:58,730
bean

376
00:19:58,730 --> 00:20:01,550
so when the system boots it looks for

377
00:20:01,550 --> 00:20:03,560
that address there it is  defined by the

378
00:20:03,560 --> 00:20:06,500
size that there is a partition xip fs

379
00:20:06,500 --> 00:20:09,260
in the flash where the binaries

380
00:20:09,260 --> 00:20:11,750
with descriptors are contained in the

381
00:20:11,750 --> 00:20:15,200
location table for which all the binaries that

382
00:20:15,200 --> 00:20:17,180
are contained in sip fs are

383
00:20:17,180 --> 00:20:22,750
compacted let's say linked in the

384
00:20:22,750 --> 00:20:24,170
bean directory

385
00:20:24,170 --> 00:20:28,080
so if you then start frost

386
00:20:28,080 --> 00:20:31,350
and  from a shell enter bean and do them

387
00:20:31,350 --> 00:20:35,640
s you will see all the binaries that you have

388
00:20:35,640 --> 00:20:39,299
compiled in userland end up in the

389
00:20:39,299 --> 00:20:40,140
bienne directory

390
00:20:40,140 --> 00:20:42,330
this obviously only one of the file

391
00:20:42,330 --> 00:20:44,640
systems are supported but it is the most

392
00:20:44,640 --> 00:20:47,100
important one because it allows us to have

393
00:20:47,100 --> 00:20:50,159
a series of binaries in space when the

394
00:20:50,159 --> 00:20:51,840
system  part because obviously this

395
00:20:51,840 --> 00:20:54,809
part expects after having

396
00:20:54,809 --> 00:20:56,850
obviously done the initialization of the

397
00:20:56,850 --> 00:20:59,010
hardware realization of the various

398
00:20:59,010 --> 00:21:05,039
reference file systems and edf expects

399
00:21:05,039 --> 00:21:08,779
to find a binary to run

400
00:21:08,779 --> 00:21:13,200
with next to one that normally as in

401
00:21:13,200 --> 00:21:17,519
all other born systems we have

402
00:21:17,519 --> 00:21:19,139
also thought  to put systems of and

403
00:21:19,139 --> 00:21:22,039
then we said and we have to drink less

404
00:21:22,039 --> 00:21:25,230
so nothing we are at the old m  anera

405
00:21:25,230 --> 00:21:28,860
as supini nyt tasks 1

406
00:21:28,860 --> 00:21:31,200
let's say that is the process that

407
00:21:31,200 --> 00:21:33,389
deals with initializing the system from

408
00:21:33,389 --> 00:21:35,279
the josé space point of view this is

409
00:21:35,279 --> 00:21:37,440
dinka in before it comes later the

410
00:21:37,440 --> 00:21:41,970
neets are the following things we said

411
00:21:41,970 --> 00:21:45,899
the file systems are mounted is

412
00:21:45,899 --> 00:21:47,789
used sneijder's slash

413
00:21:47,789 --> 00:21:50,190
depends on the hits on how

414
00:21:50,190 --> 00:21:51,990
the hardware is initialized if

415
00:21:51,990 --> 00:21:55,139
for example you have defined a number of

416
00:21:55,139 --> 00:21:58,950
ewart interfaces in the past

417
00:21:58,950 --> 00:22:01,320
each of these or for example you have

418
00:22:01,320 --> 00:22:04,590
exposed pins because to drive

419
00:22:04,590 --> 00:22:07,559
buttons or god of the LEDs

420
00:22:07,559 --> 00:22:10,740
each of these will be  exposed in slang

421
00:22:10,740 --> 00:22:14,010
step such as for example slash of slash tt

422
00:22:14,010 --> 00:22:16,470
wiese zero is the first

423
00:22:16,470 --> 00:22:19,100
serial interface that you have declared

424
00:22:19,100 --> 00:22:21,110
in the kernel configuration then

425
00:22:21,110 --> 00:22:25,429
always the juve 6 of the board and

426
00:22:25,429 --> 00:22:28,690
therefore this allows for example

427
00:22:28,690 --> 00:22:31,280
to immediately run

428
00:22:31,280 --> 00:22:33,350
programs that  they line them in standard

429
00:22:33,350 --> 00:22:40,940
input and output from to serial itself and

430
00:22:40,940 --> 00:22:43,130
all these devices are put in

431
00:22:43,130 --> 00:22:46,850
dead we see slices versys looks like

432
00:22:46,850 --> 00:22:48,830
mo  lto more to slash proc

433
00:22:48,830 --> 00:22:50,380
in the systems you are used to

434
00:22:50,380 --> 00:22:53,000
we have decided that three letters are

435
00:22:53,000 --> 00:22:54,470
average of 4

436
00:22:54,470 --> 00:22:56,539
we put a series of files in

437
00:22:56,539 --> 00:23:00,890
some are more or less similar to those

438
00:23:00,890 --> 00:23:02,830
exposed by linux

439
00:23:02,830 --> 00:23:05,990
but for example we have slices lessmann

440
00:23:05,990 --> 00:23:08,960
which allows you to see the  'use of

441
00:23:08,960 --> 00:23:14,360
the ram memory in the respective pools at

442
00:23:14,360 --> 00:23:17,210
any time runtime let's say that the

443
00:23:17,210 --> 00:23:22,159
ssis is a bit of a user to carry space

444
00:23:22,159 --> 00:23:27,640
communications as it is pro that fes

445
00:23:27,669 --> 00:23:30,820
for example there is

446
00:23:30,820 --> 00:23:34,230
a file sis tusk

447
00:23:34,230 --> 00:23:37,830
where if you make cup of cissè  tax you see

448
00:23:37,830 --> 00:23:40,110
a list similar to the output for

449
00:23:40,110 --> 00:23:41,669
example of ps on your

450
00:23:41,669 --> 00:23:44,070
linux machine then you see all the tasks the

451
00:23:44,070 --> 00:23:48,240
priorities their pid the hard name of

452
00:23:48,240 --> 00:23:51,080
zero

453
00:23:51,080 --> 00:23:53,549
etc. an initialization of

454
00:23:53,549 --> 00:23:57,299
what are board specific interfaces is done

455
00:23:57,299 --> 00:23:59,130
so for example if you have  of the

456
00:23:59,130 --> 00:24:02,160
ethernet interfaces or if in your

457
00:24:02,160 --> 00:24:04,919
on-board file you have specified that you want to

458
00:24:04,919 --> 00:24:08,429
use one of the usb ports as a host

459
00:24:08,429 --> 00:24:11,640
or as a guest and with whom and profile in

460
00:24:11,640 --> 00:24:16,020
will be exposed etc. etc.

461
00:24:16,020 --> 00:24:17,910
machine function in it that takes care

462
00:24:17,910 --> 00:24:20,059
of initializing all these subsystems it

463
00:24:20,059 --> 00:24:24,030
is true you do not create two lists a

464
00:24:24,030 --> 00:24:26,790
timer list is a tusk list the ex now

465
00:24:26,790 --> 00:24:28,590
as we will see in a while the execution of the

466
00:24:28,590 --> 00:24:33,200
kernel is based only on executing

467
00:24:33,200 --> 00:24:38,750
the handlers  of timers is the age of scripts that

468
00:24:38,750 --> 00:24:41,850
are scheduled by other components

469
00:24:41,850 --> 00:24:43,710
in the kernel

470
00:24:43,710 --> 00:24:46,860
at different times of execution

471
00:24:46,860 --> 00:24:47,970
so we say everything the

472
00:24:47,970 --> 00:24:51,720
kernel does and every time it is

473
00:24:51,720 --> 00:24:55,289
written check these lists here

474
00:24:55,289 --> 00:24:59,549
and figure out which procedures which callbacks

475
00:24:59,549 --> 00:25:01,980
need to be executed  in the time flies

476
00:25:01,980 --> 00:25:03,990
of the kernel itself we say

477
00:25:03,990 --> 00:25:06,500
in the scheduled execution of the tr

478
00:25:06,500 --> 00:25:10,980
obviously the rest of the kernel code takes

479
00:25:10,980 --> 00:25:13,799
place either inside the t pockets

480
00:25:13,799 --> 00:25:16,830
inside the timer handler or very

481
00:25:16,830 --> 00:25:18,570
briefly inside

482
00:25:18,570 --> 00:25:22,190
nothing of the internet tenders

483
00:25:22,190 --> 00:25:25,289
the initialization of the  m more memory

484
00:25:25,289 --> 00:25:28,140
products protection unit which unfortunately

485
00:25:28,140 --> 00:25:30,059
is not available in the whole range of the

486
00:25:30,059 --> 00:25:34,700
cortex m but where it is possible

487
00:25:34,700 --> 00:25:37,620
especially in all  i the f 4e in all

488
00:25:37,620 --> 00:25:41,250
the m4 in very many put perhaps almost

489
00:25:41,250 --> 00:25:45,149
all the m 7 and this is the

490
00:25:45,149 --> 00:25:49,530
main component that allows to

491
00:25:49,530 --> 00:25:51,750
obtain that separation between

492
00:25:51,750 --> 00:25:55,260
kernel memory process memories and the disconnections

493
00:25:55,260 --> 00:25:58,680
of the various processes in such a way that

494
00:25:58,680 --> 00:26:01,880
unauthorized access to  user level

495
00:26:01,880 --> 00:26:08,640
of a memory area a

496
00:26:08,640 --> 00:26:11,820
hbt memory foam type interup is triggered which in

497
00:26:11,820 --> 00:26:14,880
turn will light the foot of the

498
00:26:14,880 --> 00:26:17,790
current process and will send the eleven o'clock delivery

499
00:26:17,790 --> 00:26:21,090
which is not blockable and therefore will die the

500
00:26:21,090 --> 00:26:25,860
front segmentation process

501
00:26:25,860 --> 00:26:29,580
the first kick is given  al sisti which is

502
00:26:29,580 --> 00:26:33,120
the whole system that allows us to

503
00:26:33,120 --> 00:26:35,790
count the time is based on the

504
00:26:35,790 --> 00:26:39,870
internal time on the pll of the cpi are

505
00:26:39,870 --> 00:26:44,130
mounted and built in the file system

506
00:26:44,130 --> 00:26:46,980
so we have less fs which looks like ram

507
00:26:46,980 --> 00:26:49,710
is fess so initially empty it

508
00:26:49,710 --> 00:26:52,670
put me  in slash man

509
00:26:53,490 --> 00:26:56,890
let's say you can have fun

510
00:26:56,890 --> 00:26:58,840
creating files etc. but obviously

511
00:26:58,840 --> 00:27:00,940
when the bordian is reset as it

512
00:27:00,940 --> 00:27:04,990
is in the ram these do here are lost

513
00:27:04,990 --> 00:27:08,620
and it is mon  tato xvi for fest in b as

514
00:27:08,620 --> 00:27:10,900
we explained before at this point the

515
00:27:10,900 --> 00:27:16,870
carl goes to execute vien enit come

516
00:27:16,870 --> 00:27:19,870
starts the execution of the

517
00:27:19,870 --> 00:27:21,730
real system boot then the kernel and on it

518
00:27:21,730 --> 00:27:24,490
starts following directly from xip

519
00:27:24,490 --> 00:27:27,220
flash you think it is called xip maybe because

520
00:27:27,220 --> 00:27:30,160
stands for execution in place the binaries that

521
00:27:30,160 --> 00:27:32,020
are created in the

522
00:27:32,020 --> 00:27:35,800
compilation phase of essere land are not elf

523
00:27:35,800 --> 00:27:38,590
but are converted into flac format

524
00:27:38,590 --> 00:27:41,710
this because in this way it is

525
00:27:41,710 --> 00:27:44,470
possible to execute them directly from where

526
00:27:44,470 --> 00:27:46,780
they were fixed rather than having to

527
00:27:46,780 --> 00:27:50,190
reload in memory decode

528
00:27:50,190 --> 00:27:57,980
in placing  let's say the procedures

529
00:27:57,980 --> 00:28:00,629
in memory in the ram memory then so

530
00:28:00,629 --> 00:28:03,600
instead the results are performed

531
00:28:03,600 --> 00:28:07,679
directly from the flash in place so

532
00:28:07,679 --> 00:28:10,019
normally what happens that is

533
00:28:10,019 --> 00:28:12,059
performed in it points sh that you have to

534
00:28:12,059 --> 00:28:14,179
think of it as a kind of unitab

535
00:28:14,179 --> 00:28:17,309
or as I do not know a sort of aut

536
00:28:17,309 --> 00:28:19,860
extech a  very simplified thing

537
00:28:19,860 --> 00:28:21,990
we say to say we have a

538
00:28:21,990 --> 00:28:24,710
system script because we say we

539
00:28:24,710 --> 00:28:27,990
wrote qu  This small shell

540
00:28:27,990 --> 00:28:33,450
called fresh for frost and shell that has

541
00:28:33,450 --> 00:28:36,110
several

542
00:28:36,110 --> 00:28:39,060
features available including

543
00:28:39,060 --> 00:28:40,590
running processes for example in the

544
00:28:40,590 --> 00:28:42,680
background

545
00:28:42,680 --> 00:28:48,570
or running entire scripts sel in

546
00:28:48,570 --> 00:28:54,270
without real shell emulation pretensions

547
00:28:54,270 --> 00:28:57,200
that is without operators

548
00:28:57,200 --> 00:29:02,220
without let's say it's more  a box of commands

549
00:29:02,220 --> 00:29:04,280
that are executed flight after the other

550
00:29:04,280 --> 00:29:08,400
if in Italy that is present for example

551
00:29:08,400 --> 00:29:12,690
contains lines including aisling which

552
00:29:12,690 --> 00:29:15,060
is a process that does nothing but make

553
00:29:15,060 --> 00:29:19,410
the leds missing or for example can

554
00:29:19,410 --> 00:29:24,180
start the tennet servers  archetypes

555
00:29:24,180 --> 00:29:27,360
automatically at startup and can do

556
00:29:27,360 --> 00:29:28,800
other operations such as

557
00:29:28,800 --> 00:29:31,340
calling mount to mount the slicks hard

558
00:29:31,340 --> 00:29:37,280
in Venetian slices or wherever you want

559
00:29:38,130 --> 00:29:43,310
and then at the end it will start the

560
00:29:43,310 --> 00:29:46,020
interactive flash that is the interactive shell

561
00:29:46,020 --> 00:29:49,560
attached to your tim wiese zero or

562
00:29:49,560 --> 00:29:52,320
to the tt why  which you prefer if you have

563
00:29:52,320 --> 00:29:54,720
configured it at more than 16 years that saccà

564
00:29:54,720 --> 00:29:55,800
is not present

565
00:29:55,800 --> 00:29:58,470
you skip everything in you go

566
00:29:58,470 --> 00:30:01,560
directly to the execution from enit to f

567
00:30:01,560 --> 00:30:04,650
resh food art its 0 that we say that the

568
00:30:04,650 --> 00:30:07,320
default safe boot so if it does not

569
00:30:07,320 --> 00:30:11,090
put tin.it sh nel

570
00:30:11,090 --> 00:30:16,290
in the express file system by default it will be

571
00:30:16,290 --> 00:30:19,410
executed from the shell the

572
00:30:19,410 --> 00:30:24,420
facebook shell as I told you

573
00:30:24,420 --> 00:30:27,000
our goal is to

574
00:30:27,000 --> 00:30:30,210
run any  application written

575
00:30:30,210 --> 00:30:36,000
for linux or bsd on a very

576
00:30:36,000 --> 00:30:39,690
small machine obviously there are big

577
00:30:39,690 --> 00:30:42,540
limitations the first of all it must

578
00:30:42,540 --> 00:30:44,400
also be said is that of the resources

579
00:30:44,400 --> 00:30:47,060
that is, do not think about starting

580
00:30:47,060 --> 00:30:50,400
a java virtue I do not know maxino

581
00:30:50,400 --> 00:30:51,720
your server web app ass

582
00:30:51,720 --> 00:30:57,150
because in short  with 250k of ram which by

583
00:30:57,150 --> 00:30:59,010
the way you are also sharing with the

584
00:30:59,010 --> 00:31:02,850
kernel it would be very difficult but if

585
00:31:02,850 --> 00:31:08,790
you have a nice daemon that reads

586
00:31:08,790 --> 00:31:11,040
nemea from a serial and makes them

587
00:31:11,040 --> 00:31:13,490
available on an association hicks

588
00:31:13,490 --> 00:31:16,110
probably a program of a few

589
00:31:16,110 --> 00:31:17,340
hundred lines that  you

590
00:31:17,340 --> 00:31:18,990
can safely compile

591
00:31:18,990 --> 00:31:23,730
run up on frost actually there are

592
00:31:23,730 --> 00:31:27,420
other limitations some of the

593
00:31:27,420 --> 00:31:29,250
at least popular tenco ssis have not yet

594
00:31:29,250 --> 00:31:31,830
been imp  lementate in lipsi so every

595
00:31:31,830 --> 00:31:33,840
now and then it can happen that you try to

596
00:31:33,840 --> 00:31:36,030
do something is the compiler s

597
00:31:36,030 --> 00:31:41,010
saying I have no idea what cat

598
00:31:41,010 --> 00:31:44,820
lane info is for example at that point to

599
00:31:44,820 --> 00:31:48,180
have two possibilities or make sure that

600
00:31:48,180 --> 00:31:49,950
your application can do without it

601
00:31:49,950 --> 00:31:52,590
or  go to implement this

602
00:31:52,590 --> 00:31:55,650
library call inside the libraries

603
00:31:55,650 --> 00:31:59,420
in the books that are one of the repositories

604
00:31:59,420 --> 00:32:02,040
that make up let's say the prof ecosystem

605
00:32:02,040 --> 00:32:02,900


606
00:32:02,900 --> 00:32:07,560
if the library function is missing and it is

607
00:32:07,560 --> 00:32:08,850
a library function that is those you

608
00:32:08,850 --> 00:32:11,130
find in the manual so to speak on

609
00:32:11,130 --> 00:32:15,300
page 3 you can stop  there if the

610
00:32:15,300 --> 00:32:16,890
function is actually a

611
00:32:16,890 --> 00:32:18,860
masses col interface

612
00:32:18,860 --> 00:32:22,620
in that case there if you want to go ahead

613
00:32:22,620 --> 00:32:27,210
and implement it the kernel needs to

614
00:32:27,210 --> 00:32:30,120
add this to the list

615
00:32:30,120 --> 00:32:32,730
of systems it supports is obviously there is

616
00:32:32,730 --> 00:32:34,740
a handler that when that

617
00:32:34,740 --> 00:32:37,890
is  scordino woke up has its own

618
00:32:37,890 --> 00:32:40,080
corresponding kernel for the execution

619
00:32:40,080 --> 00:32:44,910
of the same thing so in these

620
00:32:44,910 --> 00:32:48,780
rare cases where one of these things that

621
00:32:48,780 --> 00:32:51,720
maybe not  they are widely

622
00:32:51,720 --> 00:32:54,000
used but some programs ca

623
00:32:54,000 --> 00:32:56,700
n't do without them they are not implemented in the

624
00:32:56,700 --> 00:32:58,740
kernel then you have to put

625
00:32:58,740 --> 00:33:03,270
another imitation and obviously

626
00:33:03,270 --> 00:33:06,480
the fork the fork cannot be

627
00:33:06,480 --> 00:33:09,300
realized the systems without memeo and

628
00:33:09,300 --> 00:33:11,460
this is written in the posix specification

629
00:33:11,460 --> 00:33:12,990
that is  it is not a thing that you know anything about

630
00:33:12,990 --> 00:33:18,680
us posix says the force exists if you can

631
00:33:18,680 --> 00:33:21,810
cheat and direct processes that

632
00:33:21,810 --> 00:33:23,160
are running in that

633
00:33:23,160 --> 00:33:24,750
memory air that the same as before but in

634
00:33:24,750 --> 00:33:27,120
reality it is a somewhere else is a

635
00:33:27,120 --> 00:33:30,390
couple a wright  of the parent process if

636
00:33:30,390 --> 00:33:32,450
you can't do

637
00:33:32,450 --> 00:33:37,040
virtual memory relocation this

638
00:33:37,040 --> 00:33:39,020
thing here is impossible then there is a

639
00:33:39,020 --> 00:33:42,440
non-member version of the fork which is

640
00:33:42,440 --> 00:33:45,950
standard posix which is called fork and

641
00:33:45,950 --> 00:33:47,900
from the same syntax and does the exact

642
00:33:47,900 --> 00:33:48,890
same thing

643
00:33:48,890 --> 00:33:52,460
except for a  small detail in

644
00:33:52,460 --> 00:33:55,010
the parent process when I have that after he

645
00:33:55,010 --> 00:33:58,910
summons buffon canvas in this spade he

646
00:33:58,910 --> 00:34:01,380
cannot perform

647
00:34:01,380 --> 00:34:04,560
anything until the child process has

648
00:34:04,560 --> 00:34:09,300
called I have an ex hac or an exi  t there is in

649
00:34:09,300 --> 00:34:10,940
practice

650
00:34:10,940 --> 00:34:14,730
we say that the v fork is a way to

651
00:34:14,730 --> 00:34:17,429
create a new process

652
00:34:17,429 --> 00:34:19,590
but taking into account that

653
00:34:19,590 --> 00:34:21,510
until the child process has not

654
00:34:21,510 --> 00:34:23,429
fully developed its

655
00:34:23,429 --> 00:34:26,790
address space or has not discarded it

656
00:34:26,790 --> 00:34:28,800
cannot overwrite on the same area

657
00:34:28,800 --> 00:34:31,260
of  physical memory because it should

658
00:34:31,260 --> 00:34:32,879
be to write on, for example,

659
00:34:32,879 --> 00:34:36,449
on the stack of the parent process

660
00:34:36,449 --> 00:34:37,980
so let's say that an imitation that

661
00:34:37,980 --> 00:34:41,250
is widely explained if you go to the

662
00:34:41,250 --> 00:34:45,750
value of the v fork is that, however, from a

663
00:34:45,750 --> 00:34:48,330
certain point of view, melodies use

664
00:34:48,330 --> 00:34:50,300
a little naïve force

665
00:34:50,300 --> 00:34:53,940
this  is a limitation that can be

666
00:34:53,940 --> 00:34:57,810
say triplat to just adding a

667
00:34:57,810 --> 00:35:00,660
v to your fork calls because ha will

668
00:35:00,660 --> 00:35:02,550
most likely your

669
00:35:02,550 --> 00:35:06,630
fork calls will be followed normally by an

670
00:35:06,630 --> 00:35:11,340
ex hac or where you should

671
00:35:11,340 --> 00:35:15,240
do so that the process fi the

672
00:35:15,240 --> 00:35:17,460
code the child process is  in a

673
00:35:17,460 --> 00:35:19,200
separate module so that you

674
00:35:19,200 --> 00:35:23,240
can immediately after the loud

675
00:35:23,240 --> 00:35:27,990
call a high tech changing

676
00:35:27,990 --> 00:35:30,750
completely the text section of

677
00:35:30,750 --> 00:35:33,930
the current process there are no more threads

678
00:35:33,930 --> 00:35:36,680
for the moment this was let's say

679
00:35:36,680 --> 00:35:39,550
a choice

680
00:35:39,550 --> 00:35:41,860
for the right moment to not

681
00:35:41,860 --> 00:35:44,680
burden the interface since we

682
00:35:44,680 --> 00:35:48,270
still have the processes but in the future

683
00:35:48,270 --> 00:35:50,590
we plan to put a p3 interface

684
00:35:50,590 --> 00:35:54,910
where the stack too  of the two tasks is

685
00:35:54,910 --> 00:35:58,780
shared but if you then have to see how to

686
00:35:58,780 --> 00:36:00,490
implement some details such

687
00:36:00,490 --> 00:36:04,540
as the thread modifier of the

688
00:36:04,540 --> 00:36:07,300
variables in such a way that every 3 and

689
00:36:07,300 --> 00:36:09,730
has a copy of that variable but

690
00:36:09,730 --> 00:36:11,170
in general we do not

691
00:36:11,170 --> 00:36:14,260
feel much lack of it because

692
00:36:14,260 --> 00:36:16,960
we know  that semantically what we

693
00:36:16,960 --> 00:36:19,030
can do with the three threads

694
00:36:19,030 --> 00:36:21,280
we can also do with processes and

695
00:36:21,280 --> 00:36:25,490
indeed eliminates the possibility of having

696
00:36:25,490 --> 00:36:28,640
logging problems as long as all

697
00:36:28,640 --> 00:36:31,580
the PCs had implemented PCs that

698
00:36:31,580 --> 00:36:33,650
in any case are in frost we have the

699
00:36:33,650 --> 00:36:37,880
pipe we have the  socket ionix the memory

700
00:36:37,880 --> 00:36:39,680
is shared by default the one

701
00:36:39,680 --> 00:36:42,940
dynamically located so let's say we

702
00:36:42,940 --> 00:36:47,170
have for the mome  nto a system

703
00:36:47,170 --> 00:36:49,450
sufficiently capable of executing

704
00:36:49,450 --> 00:36:55,150
multi-pocket applications without

705
00:36:55,150 --> 00:36:57,770
the aid of pit reds,

706
00:36:57,770 --> 00:37:02,560
obviously, however, to have a

707
00:37:02,560 --> 00:37:07,970
greater compliance or in any case closer to

708
00:37:07,970 --> 00:37:11,180
full pence of rests, sooner or later

709
00:37:11,180 --> 00:37:13,100
the p3 interface will have to be

710
00:37:13,100 --> 00:37:18,680
implemented as mentioned the format is

711
00:37:18,680 --> 00:37:21,830
different it is not about elf for the

712
00:37:21,830 --> 00:37:23,570
reasons I explained before it is

713
00:37:23,570 --> 00:37:26,720
about b flat and beauties I am informed that

714
00:37:26,720 --> 00:37:28,460
we did not invent it was already

715
00:37:28,460 --> 00:37:33,530
something that we are able to do with a

716
00:37:33,530 --> 00:37:35,930
tool that is usually provided by the

717
00:37:35,930 --> 00:37:38,810
toolchain that  it is called the flat site

718
00:37:38,810 --> 00:37:41,930
is able to transform into a

719
00:37:41,930 --> 00:37:45,470
flat application which is also reducible i.e.

720
00:37:45,470 --> 00:37:49,940
practically we say as if it were

721
00:37:49,940 --> 00:37:51,410
an independent position even if it is not

722
00:37:51,410 --> 00:37:54,410
so for which

723
00:37:54,410 --> 00:37:58,350
all the positions of all the functions

724
00:37:58,350 --> 00:38:02,910
are relative to an address which is

725
00:38:02,910 --> 00:38:05,610
the initial one of the  text and which is

726
00:38:05,610 --> 00:38:07,980
still saved in the 9 o'clock register

727
00:38:07,980 --> 00:38:10,530
when the application is running in

728
00:38:10,530 --> 00:38:12,600
such a way that all brands with

729
00:38:12,600 --> 00:38:16,230
different functions are

730
00:38:16,230 --> 00:38:19,290
autom  atically compiled to take

731
00:38:19,290 --> 00:38:26,220
into account the offset for this reason

732
00:38:26,220 --> 00:38:28,950
here and also for the reason of including

733
00:38:28,950 --> 00:38:30,960
as I said the new leagues in the

734
00:38:30,960 --> 00:38:31,920
compilation

735
00:38:31,920 --> 00:38:34,440
the automatic resolution of the include

736
00:38:34,440 --> 00:38:36,240
part etc.

737
00:38:36,240 --> 00:38:37,980
we have decided to create our own

738
00:38:37,980 --> 00:38:40,200
toolchain that is able to compile

739
00:38:40,200 --> 00:38:45,600
the executables  directly in bis lett

740
00:38:45,600 --> 00:38:47,550
ready to be performed on

741
00:38:47,550 --> 00:38:50,430
frosted for example if they are inserted

742
00:38:50,430 --> 00:38:53,880
in the fs chip they can be behind while

743
00:38:53,880 --> 00:38:57,180
following this the flags we use in

744
00:38:57,180 --> 00:39:01,010
complication position dependent goal

745
00:39:01,010 --> 00:39:05,250
not goal if not common single place joke

746
00:39:05,250 --> 00:39:07,080
and these are the links air flags that  we use

747
00:39:07,080 --> 00:39:11,900
in in the linking phase in particular

748
00:39:11,900 --> 00:39:15,390
this is the flag that tells the compiler

749
00:39:15,390 --> 00:39:21,060
to create the final binary in

750
00:39:21,060 --> 00:39:24,470
elf mode which is however supported by the pool j

751
00:39:24,470 --> 00:39:27,450
to get an idea of what is

752
00:39:27,450 --> 00:39:31,530
generated or how it is generated there is

753
00:39:31,530 --> 00:39:34,290
userland repository  which is a san mode

754
00:39:34,290 --> 00:39:36,540
of positive kernels where you can

755
00:39:36,540 --> 00:39:39,060
go to see there is the mac file where more

756
00:39:39,060 --> 00:39:41,220
or less there are these flags is I come  no

757
00:39:41,220 --> 00:39:44,820
binaries turned in an output directory the

758
00:39:44,820 --> 00:39:46,950
output directory contains only

759
00:39:46,950 --> 00:39:50,910
flat binaries without symbols where the gtb symbols

760
00:39:50,910 --> 00:39:53,160
are automatically months from the

761
00:39:53,160 --> 00:39:55,080
compiler in another file with the

762
00:39:55,080 --> 00:39:57,780
extension gdp this allows you to

763
00:39:57,780 --> 00:40:01,490
have let's say a symbol map

764
00:40:01,490 --> 00:40:05,180
within the single

765
00:40:05,390 --> 00:40:08,180
application so  such as to be able to compete the

766
00:40:08,180 --> 00:40:12,560
individual applications at runtime by loading

767
00:40:12,560 --> 00:40:16,790
the map into gdb the points file gdb itself

768
00:40:16,790 --> 00:40:20,480
that which has a correspondence with the

769
00:40:20,480 --> 00:40:23,450
addresses of the procedures and

770
00:40:23,450 --> 00:40:28,880
sections of the file stairs the situation the

771
00:40:28,880 --> 00:40:29,830
contexts

772
00:40:29,830 --> 00:40:33,380
occurs so the process executes in its

773
00:40:33,380 --> 00:40:34,820
context

774
00:40:34,820 --> 00:40:37,910
this is  the stack this this line

775
00:40:37,910 --> 00:40:43,100
therefore is the separation between

776
00:40:43,100 --> 00:40:45,710
clear memory the user mood the only

777
00:40:45,710 --> 00:40:49,190
kernel memory fragment that the process

778
00:40:49,190 --> 00:40:53,090
is authorized to access and precisely

779
00:40:53,090 --> 00:40:55,880
its own staff because the stacks in the

780
00:40:55,880 --> 00:40:59,390
processes are managed in kernel memory

781
00:40:59,390 --> 00:41:03,020
and in  a separate pool that grows in

782
00:41:03,020 --> 00:41:05,240
this direction ie when the clear

783
00:41:05,240 --> 00:41:05,810
and boot

784
00:41:05,810 --> 00:41:08,570
the first thing it creates is the su  or the same

785
00:41:08,570 --> 00:41:12,610
is that the size of the stacks is

786
00:41:12,610 --> 00:41:17,320
fixed and is established at moments in the

787
00:41:17,320 --> 00:41:19,660
compilation of the carnet itself you are

788
00:41:19,660 --> 00:41:21,710
told if

789
00:41:21,710 --> 00:41:26,920
you want a stack of 12 48 kg bytes

790
00:41:26,920 --> 00:41:31,430
obviously choosing a smaller stack

791
00:41:31,430 --> 00:41:33,710
means that some applications

792
00:41:33,710 --> 00:41:38,420
may not compile because the

793
00:41:38,420 --> 00:41:40,010
compiler  realizes that there is this

794
00:41:40,010 --> 00:41:45,589
stack limit if it is exceeded in

795
00:41:45,589 --> 00:41:47,330
the compilation phase

796
00:41:47,330 --> 00:41:50,630
the application a compile chooses a

797
00:41:50,630 --> 00:41:52,760
stack that is too large it

798
00:41:52,760 --> 00:41:55,520
means that you are limited in

799
00:41:55,520 --> 00:41:57,590
the use of kernel boredom if you have chosen

800
00:41:57,590 --> 00:42:00,740
for example to use 64 kg bytes

801
00:42:00,740 --> 00:42:03,610
as  kernel memory is to leave the rest

802
00:42:03,610 --> 00:42:08,150
to the user space it means that you are

803
00:42:08,150 --> 00:42:11,780
limited in the number of new processes to be

804
00:42:11,780 --> 00:42:13,870
created in the number of strong to call

805
00:42:13,870 --> 00:42:16,530
before running out of

806
00:42:16,530 --> 00:42:19,590
kernel memory in this direction

807
00:42:19,590 --> 00:42:21,840
because every time a new

808
00:42:21,840 --> 00:42:25,780
process is created a new stack will be created

809
00:42:25,780 --> 00:42:29,710
at  previous to the last st created

810
00:42:29,710 --> 00:42:31,660
then starting from here

811
00:42:31,660 --> 00:42:33,520
this is created then this is created etcetera

812
00:42:33,520 --> 00:42:34,090
etcetera

813
00:42:34,090 --> 00:42:38,200
on the other side the ip of the k  ernel because

814
00:42:38,200 --> 00:42:41,910
the kernel has a function that mallock

815
00:42:42,660 --> 00:42:45,010
will grow in this direction here so

816
00:42:45,010 --> 00:42:47,650
every time you go to allocate

817
00:42:47,650 --> 00:42:50,230
something in the kernel i.e. with the kernel the

818
00:42:50,230 --> 00:42:53,080
drivers but don't miss something it will

819
00:42:53,080 --> 00:42:56,490
add up in this direction from here

820
00:42:56,490 --> 00:42:59,590
so you see here is a  collision it is

821
00:42:59,590 --> 00:43:05,550
possible that it is however, let's say it

822
00:43:05,700 --> 00:43:10,090
is detected in time that is if it is

823
00:43:10,090 --> 00:43:12,100
detected when you called it

824
00:43:12,100 --> 00:43:14,440
call it cremano that fails it returns

825
00:43:14,440 --> 00:43:18,010
nothing does not over commit if it is

826
00:43:18,010 --> 00:43:20,050
detected during the fork if there is not

827
00:43:20,050 --> 00:43:21,790
enough space to create the stack

828
00:43:21,790 --> 00:43:23,980
of the next process is  the strong to

829
00:43:23,980 --> 00:43:26,910
fail as not 1 returns in oman

830
00:43:26,910 --> 00:43:32,500
from here on there are two users it can

831
00:43:32,500 --> 00:43:35,080
be 12 hip it normally depends on

832
00:43:35,080 --> 00:43:37,840
how it is structured memory of a

833
00:43:37,840 --> 00:43:39,730
specific processor for example in the former

834
00:43:39,730 --> 00:43:43,480
plp cc are normally two separate two

835
00:43:43,480 --> 00:43:47,560
pieces separate dies  27 by 32 gigabytes

836
00:43:47,560 --> 00:43:49,510
that you can use separately

837
00:43:49,510 --> 00:43:53,140
but are not contiguous in

838
00:43:53,140 --> 00:43:55,750
address space is this complexity of

839
00:43:55,750 --> 00:43:58,240
course  it is hidden by the mallock

840
00:43:58,240 --> 00:44:01,900
in the phase of giving that aunt of memory i.e.

841
00:44:01,900 --> 00:44:04,090
if it does not enter this we will go to

842
00:44:04,090 --> 00:44:06,390
start a local lap etc.

843
00:44:06,390 --> 00:44:08,950
obviously there is a bit of fragmentation

844
00:44:08,950 --> 00:44:10,870
we have tried to keep the trade off

845
00:44:10,870 --> 00:44:13,050
as small as possible for example to

846
00:44:13,050 --> 00:44:15,840
protect the  ip would have meant

847
00:44:15,840 --> 00:44:20,110
using mm more inside the ip which

848
00:44:20,110 --> 00:44:23,830
would have forced us to also use memory

849
00:44:23,830 --> 00:44:27,790
with powers of two and let say

850
00:44:27,790 --> 00:44:30,550
some slams not located in the memory and

851
00:44:30,550 --> 00:44:32,350
empty holes windows

852
00:44:32,350 --> 00:44:36,790
inside oria while we say that the

853
00:44:36,790 --> 00:44:38,220
overall memory is made

854
00:44:38,220 --> 00:44:43,530
using merge splace during free games

855
00:44:43,530 --> 00:44:45,880
somehow we have a trade off

856
00:44:45,880 --> 00:44:49,650
between performance

857
00:44:49,650 --> 00:44:51,690
the fragmentation of the memory itself

858
00:44:51,690 --> 00:44:53,970
with an eye of course

859
00:44:53,970 --> 00:44:55,950
the fact that we are always talking about

860
00:44:55,950 --> 00:44:58,680
machines that follow with a number with

861
00:44:58,680 --> 00:45:00,680
with a

862
00:45:00,680 --> 00:45:05,640
relatively relatively small amount of memory  the

863
00:45:05,640 --> 00:45:07,289
parts in green therefore for the

864
00:45:07,289 --> 00:45:09,420
current process are those that are

865
00:45:09,420 --> 00:45:11,099
freely accessible when the

866
00:45:11,099 --> 00:45:13,859
pr  if he tries to access the kernel hip he

867
00:45:13,859 --> 00:45:19,619
is shot on the spot how

868
00:45:19,619 --> 00:45:22,400
basic interart systems work

869
00:45:22,400 --> 00:45:26,279
at start up you don't have to do any

870
00:45:26,279 --> 00:45:29,579
16 and 32 bit voodoo rite of passage

871
00:45:29,579 --> 00:45:31,890
or anything

872
00:45:31,890 --> 00:45:35,099
the system starts directly in arm

873
00:45:35,099 --> 00:45:36,720
as a 32 bit system

874
00:45:36,720 --> 00:45:39,000
not c  'it is nothing to configure and it will

875
00:45:39,000 --> 00:45:42,529
directly follow the

876
00:45:42,529 --> 00:45:46,020
internet vector address related to the ri set

877
00:45:46,020 --> 00:45:50,609
which is put in the zero position so

878
00:45:50,609 --> 00:45:53,099
at the beginning of the flash itself we are the

879
00:45:53,099 --> 00:45:56,970
flash of the card here red think that the

880
00:45:56,970 --> 00:46:00,000
first very small slice refers

881
00:46:00,000 --> 00:46:03,059
to the  vector of the internet where there are all

882
00:46:03,059 --> 00:46:06,619
the pointers to the

883
00:46:06,619 --> 00:46:11,839
system rq procedures and also of the peripheral for which

884
00:46:11,839 --> 00:46:13,930
the boys have performed the start up

885
00:46:13,930 --> 00:46:22,249
when the process comes is that the

886
00:46:22,249 --> 00:46:24,289
process and and a memory that

887
00:46:24,289 --> 00:46:27,859
is not possible comes occurs man fault

888
00:46:27,859 --> 00:46:29,779
every time  the system time expires,

889
00:46:29,779 --> 00:46:32,240
every time

890
00:46:32,240 --> 00:46:34,009
the system call has called me, the

891
00:46:34,009 --> 00:46:36,859
supervisor is present with

892
00:46:36,859 --> 00:46:39,319
the ker every time the beach is called  in it goes to

893
00:46:39,319 --> 00:46:41,829
write on the register that trigger a the

894
00:46:41,829 --> 00:46:44,809
panning supervisor with which is the one who

895
00:46:44,809 --> 00:46:47,089
is responsible for making the switch of

896
00:46:47,089 --> 00:46:52,339
the complicated processes more beautiful put so

897
00:46:52,339 --> 00:46:57,230
let's say and press the button or the

898
00:46:57,230 --> 00:46:59,749
current is followed by the reset sandler

899
00:46:59,749 --> 00:47:01,670
makes the initialization of the  hardware

900
00:47:01,670 --> 00:47:04,279
the kernel starts in a loop and

901
00:47:04,279 --> 00:47:06,079
executes hits from this point on

902
00:47:06,079 --> 00:47:08,869
or a process hit one at any

903
00:47:08,869 --> 00:47:11,720
time any process that calls

904
00:47:11,720 --> 00:47:12,589
forward sc

905
00:47:12,589 --> 00:47:18,069
the system library calls

906
00:47:18,069 --> 00:47:22,599
an asset instruction of sdc which

907
00:47:22,599 --> 00:47:25,069
practically triggers an interrupt at

908
00:47:25,069 --> 00:47:27,289
level  kernel and then at that point the

909
00:47:27,289 --> 00:47:29,960
kernel is able to make the spaces of the system

910
00:47:29,960 --> 00:47:34,339
by running the back end inside the

911
00:47:34,339 --> 00:47:37,069
carnet itself when a process

912
00:47:37,069 --> 00:47:39,230
asking for a used memory is

913
00:47:39,230 --> 00:47:40,460
shot

914
00:47:40,460 --> 00:47:44,869
when the system that expires the gitis variable

915
00:47:44,869 --> 00:47:46,789
is increased i.e. the

916
00:47:46,789 --> 00:47:48,619
gifi scount variable  to the mini seconds

917
00:47:48,619 --> 00:47:51,170
that have elapsed since system startup

918
00:47:51,170 --> 00:47:52,789


919
00:47:52,789 --> 00:47:56,450
if practically the scheduler scheduler a

920
00:47:56,450 --> 00:47:59,239
sees that the process has expired  uto

921
00:47:59,239 --> 00:48:00,880
at that moment there

922
00:48:00,880 --> 00:48:02,500
and the thesis between them of the process expired,

923
00:48:02,500 --> 00:48:04,960
the next process will be scheduled and

924
00:48:04,960 --> 00:48:08,020
then I will go to call the beach that

925
00:48:08,020 --> 00:48:10,720
goes to write on that register that triggers

926
00:48:10,720 --> 00:48:13,300
this other special interart that

927
00:48:13,300 --> 00:48:15,190
deals with changing the process so

928
00:48:15,190 --> 00:48:19,660
we normally say yes  stop here but

929
00:48:19,660 --> 00:48:21,820
let's say every 25 milliseconds there are

930
00:48:21,820 --> 00:48:25,030
all openness 0 triggered in slices I call

931
00:48:25,030 --> 00:48:27,280
the schedules and then I change process and

932
00:48:27,280 --> 00:48:29,590
then we move on to the next process but

933
00:48:29,590 --> 00:48:32,380
these are the basic vectors

934
00:48:32,380 --> 00:48:35,350
of the system limbs that are executed the

935
00:48:35,350 --> 00:48:39,070
kernel performs standing 0  can't make

936
00:48:39,070 --> 00:48:41,260
tusk can't do strong can't do

937
00:48:41,260 --> 00:48:42,640
any of this

938
00:48:42,640 --> 00:48:46,360
the only thing it does is

939
00:48:46,360 --> 00:48:55,000
juggle pockets and it's internet timers

940
00:48:55,000 --> 00:48:57,190
interact timers actually run at

941
00:48:57,190 --> 00:49:00,040
this level here when you stick

942
00:49:00,040 --> 00:49:04,660
it goes wild the pockets can  be

943
00:49:04,660 --> 00:49:06,880
inserted into the list anywhere in

944
00:49:06,880 --> 00:49:10,210
the kernel including

945
00:49:10,210 --> 00:49:15,250
device internet and only run

946
00:49:15,250 --> 00:49:17,650
when the schedule is following

947
00:49:17,650 --> 00:49:20,080
the ker  in then that is following the

948
00:49:20,080 --> 00:49:23,560
p zero all logging i.e what

949
00:49:23,560 --> 00:49:25,960
are semaphores mutex etc that

950
00:49:25,960 --> 00:49:28,570
normally works as like

951
00:49:28,570 --> 00:49:30,760
blocking calls as we would do little in the

952
00:49:30,760 --> 00:49:33,040
processes in the barrel and the function in spin

953
00:49:33,040 --> 00:49:33,460
loc

954
00:49:33,460 --> 00:49:35,380
this means that as long as the resource is not

955
00:49:35,380 --> 00:49:37,479


956
00:49:37,479 --> 00:49:42,529
unlocked the  waiter to do spin loc

957
00:49:42,529 --> 00:49:46,069
until it comes back so

958
00:49:46,069 --> 00:49:48,380
what happens the kernel never sleeps

959
00:49:48,380 --> 00:49:49,729


960
00:49:49,729 --> 00:49:51,920
but when there is really nothing to

961
00:49:51,920 --> 00:49:52,670
do it

962
00:49:52,670 --> 00:49:55,339
will go and call the destruction arm from

963
00:49:55,339 --> 00:49:59,959
two rows which simply says go go

964
00:49:59,959 --> 00:50:01,940
to sleep until it activates  the

965
00:50:01,940 --> 00:50:05,660
next internet and this we say to

966
00:50:05,660 --> 00:50:08,299
ensure that the system consumes as little

967
00:50:08,299 --> 00:50:10,069
resources as possible when there are

968
00:50:10,069 --> 00:50:11,719
scheduled processes they are all

969
00:50:11,719 --> 00:50:14,140
nightingale who had a lot to do

970
00:50:14,140 --> 00:50:17,930
because because it can be like as

971
00:50:17,930 --> 00:50:20,680
we say customers

972
00:50:20,680 --> 00:50:23,829
so at any point of execution

973
00:50:23,829 --> 00:50:26,200
even the inside of the pockets  etcetera

974
00:50:26,200 --> 00:50:27,280
etc

975
00:50:27,280 --> 00:50:30,099
can be interrupted

976
00:50:30,099 --> 00:50:33,569
to execute an entire tandler or to

977
00:50:33,569 --> 00:50:35,950
execute a task that has a priority

978
00:50:35,950 --> 00:50:39,220
ma  ggiore the scheduler is based on two

979
00:50:39,220 --> 00:50:42,430
linked lists one of processes other in

980
00:50:42,430 --> 00:50:46,059
the running processes we have a list of

981
00:50:46,059 --> 00:50:48,900
sling because

982
00:50:48,900 --> 00:50:51,660
let's talk about the processes that are

983
00:50:51,660 --> 00:50:54,360
waiting for example for an inter that do not

984
00:50:54,360 --> 00:50:56,340
have to be scheduled at this time

985
00:50:56,340 --> 00:50:59,070
and that therefore simply remain

986
00:50:59,070 --> 00:51:01,140
asleep  until they are

987
00:51:01,140 --> 00:51:02,700
awakened again for example a process calls

988
00:51:02,700 --> 00:51:05,550
a slip goes into aisling pulls out

989
00:51:05,550 --> 00:51:07,620
a kernel timer the clear that when

990
00:51:07,620 --> 00:51:09,510
the timer expires has woken up a new

991
00:51:09,510 --> 00:51:10,440
process the process

992
00:51:10,440 --> 00:51:13,020
goes back to the same thing happens with

993
00:51:13,020 --> 00:51:15,060
blocking calls such as the reed or as

994
00:51:15,060 --> 00:51:18,020
the weight

995
00:51:18,420 --> 00:51:20,970
the keys can make

996
00:51:20,970 --> 00:51:23,700
a prince inside the kernel a volunteer which

997
00:51:23,700 --> 00:51:25,290
means that when you call

998
00:51:25,290 --> 00:51:27,750
school months if you drain it inside it calls the

999
00:51:27,750 --> 00:51:30,990
task spend the process moves from

1000
00:51:30,990 --> 00:51:34,680
dada running to raiding vice versa when

1001
00:51:34,680 --> 00:51:37,590
an entertainer could awaken a

1002
00:51:37,590 --> 00:51:41,760
process that loves a task resume is the

1003
00:51:41,760 --> 00:51:44,240
process is immediately put back

1004
00:51:44,240 --> 00:51:47,510
in the frog ball executable mode

1005
00:51:47,510 --> 00:51:50,130
when the p  realtime process this

1006
00:51:50,130 --> 00:51:52,080
happens even faster and let's say

1007
00:51:52,080 --> 00:51:54,150
read the few microseconds the process

1008
00:51:54,150 --> 00:51:57,030
will be immediately put back to being

1009
00:51:57,030 --> 00:51:59,970
professor hunding and therefore the latency

1010
00:51:59,970 --> 00:52:03,600
of the realtime process in this way is

1011
00:52:03,600 --> 00:52:08,300
predictable and let's say it is 23 microseconds

1012
00:52:08,300 --> 00:52:11,550
so this is more or less the

1013
00:52:11,550 --> 00:52:13,050
display what just  said

1014
00:52:13,050 --> 00:52:15,990
there is a pointer to current ask which is the

1015
00:52:15,990 --> 00:52:17,640
tas you are following at this moment

1016
00:52:17,640 --> 00:52:19,410
that at this moment from the cpu each

1017
00:52:19,410 --> 00:52:21,840
pocket has the trace of the property in

1018
00:52:21,840 --> 00:52:25,720
slice and when slice runs

1019
00:52:25,720 --> 00:52:29,470
out we move on to the next process to

1020
00:52:29,470 --> 00:52:32,410
pass a process from aisling  running

1021
00:52:32,410 --> 00:52:34,270
is called transcripts usually

1022
00:52:34,270 --> 00:52:36,490
this is done in entry easing to

1023
00:52:36,490 --> 00:52:38,619
pass a process from running to

1024
00:52:38,619 --> 00:52:41,109
housing the process can do the

1025
00:52:41,109 --> 00:52:44,349
pre emption will pass roped off stand is

1026
00:52:44,349 --> 00:52:48,190
in a state of aisling practical example

1027
00:52:48,190 --> 00:52:49,900
of how this is

1028
00:52:49,900 --> 00:52:52,180
done samb weight la  it follows from the book is

1029
00:52:52,180 --> 00:52:53,920
that function that you create a

1030
00:52:53,920 --> 00:52:54,460
semaphore

1031
00:52:54,460 --> 00:52:58,510
the semaphore is zero the assembly yes

1032
00:52:58,510 --> 00:53:00,609
puts there and waits until there is a

1033
00:53:00,609 --> 00:53:02,770
value in the semaphore other than zero

1034
00:53:02,770 --> 00:53:05,070
it decrements it at that point and comes back

1035
00:53:05,070 --> 00:53:08,880
otherwise went up to sleep this let's say

1036
00:53:08,880 --> 00:53:12,609
normal blood you are used to as it

1037
00:53:12,609 --> 00:53:17,080
is implemented in frost and this is

1038
00:53:17,080 --> 00:53:18,670
the call if weight

1039
00:53:18,670 --> 00:53:22,270
enters and does  calls a procedure that iter

1040
00:53:22,270 --> 00:53:24,730
assembles that the semaphore between the waits which

1041
00:53:24,730 --> 00:53:26,560
obviously to the instruction that in a

1042
00:53:26,560 --> 00:53:27,790
single instruction allows to

1043
00:53:27,790 --> 00:53:30,640
decrement and check the counter

1044
00:53:30,640 --> 00:53:34,510
if this success immediately

1045
00:53:34,510 --> 00:53:38,020
returns if last rites fails it means

1046
00:53:38,020 --> 00:53:40,690
that the semaphore is still zero so

1047
00:53:40,690 --> 00:53:43,380
the project  it will be put the spend button

1048
00:53:43,380 --> 00:53:45,490
after the process is put in taxi

1049
00:53:45,490 --> 00:53:48,550
suspend the task the field of the tas which

1050
00:53:48,550 --> 00:53:52,000
is added to a list of blacklists

1051
00:53:52,000 --> 00:53:54,220
that are in the internal structure of the

1052
00:53:54,220 --> 00:53:56,680
semaphore itself so there may be

1053
00:53:56,680 --> 00:53:58,839
more processes that have called the

1054
00:53:58,839 --> 00:54:01,240
trawel semaphore and  I'm

1055
00:54:01,240 --> 00:54:03,849
in this situation right now here and

1056
00:54:03,849 --> 00:54:05,830
right now so I'm inside a

1057
00:54:05,830 --> 00:54:08,310
cisco and I have to

1058
00:54:08,310 --> 00:54:11,080
stay there  sk spende just moved me to

1059
00:54:11,080 --> 00:54:11,980
hyde the ing

1060
00:54:11,980 --> 00:54:14,320
but i'm still running at this

1061
00:54:14,320 --> 00:54:17,320
point i call the anses connect i come back

1062
00:54:17,320 --> 00:54:19,510
from cisco i call return the

1063
00:54:19,510 --> 00:54:21,880
special value disconnects the special value

1064
00:54:21,880 --> 00:54:24,839
disconnects practically says ali

1065
00:54:24,839 --> 00:54:28,109
this uncouples has blocked and the

1066
00:54:28,109 --> 00:54:30,259
next to the tattoo you will have to call

1067
00:54:30,259 --> 00:54:32,420
it back that is I should call it immediately

1068
00:54:32,420 --> 00:54:36,269
to see if it can actually follow

1069
00:54:36,269 --> 00:54:38,430
so both from the pockets it had not gone

1070
00:54:38,430 --> 00:54:41,749
into suspend this would be a continuous loop

1071
00:54:41,749 --> 00:54:44,280


1072
00:54:44,280 --> 00:54:48,060
that would continually call the

1073
00:54:48,060 --> 00:54:49,830
inter vector but since we were born in

1074
00:54:49,830 --> 00:54:52,500
suspend right now here while  the

1075
00:54:52,500 --> 00:54:54,980
carrer is returning from the entire tender he

1076
00:54:54,980 --> 00:54:58,680
sees that the process is no longer runner

1077
00:54:58,680 --> 00:55:00,330
ball so that the scheduler

1078
00:55:00,330 --> 00:55:03,360
immediately has another one and in this way

1079
00:55:03,360 --> 00:55:06,630
the process stops executing and vice

1080
00:55:06,630 --> 00:55:10,530
liping that is, it waits until a tasker e

1081
00:55:10,530 --> 00:55:12,210
sul is called by someone else

1082
00:55:12,210 --> 00:55:13,320
to say this country you have to wake up

1083
00:55:13,320 --> 00:55:15,990
the Sumerian pocket called when

1084
00:55:15,990 --> 00:55:18,390
another process calls sam post the

1085
00:55:18,390 --> 00:55:20,990
semaphore p  For example, he wants zero value

1086
00:55:20,990 --> 00:55:23,310
, the post traffic light is made which

1087
00:55:23,310 --> 00:55:26,940
obviously does not stop and calls the

1088
00:55:26,940 --> 00:55:29,280
task risum to all blacklists for which

1089
00:55:29,280 --> 00:55:31,500
a daily star the first one who wakes up

1090
00:55:31,500 --> 00:55:33,210
is in that situation

1091
00:55:33,210 --> 00:55:36,090
where the truth is I cisco the gangs and re-enter

1092
00:55:36,090 --> 00:55:37,830
the  silhouette does the same again

1093
00:55:37,830 --> 00:55:40,320
only one of the coaches will obviously be able

1094
00:55:40,320 --> 00:55:41,520
to call it tri gate

1095
00:55:41,520 --> 00:55:43,440
because then the traffic lights mentally after it

1096
00:55:43,440 --> 00:55:45,150
is zero and what will be the process

1097
00:55:45,150 --> 00:55:47,550
that will continue to execute when returning

1098
00:55:47,550 --> 00:55:49,950
from the sis with the others instead they will

1099
00:55:49,950 --> 00:55:51,390
resume waiting

1100
00:55:51,390 --> 00:55:53,400
let's say if we have many lists  in the south

1101
00:55:53,400 --> 00:55:56,010
on the same semaphore and this is more or

1102
00:55:56,010 --> 00:55:59,250
less describes how I implemented

1103
00:55:59,250 --> 00:56:01,650
blocking calls the same way

1104
00:56:01,650 --> 00:56:05,220
we did for device drivers device

1105
00:56:05,220 --> 00:56:08,580
driver has a split interface extract

1106
00:56:08,580 --> 00:56:12,369
summer module vice may

1107
00:56:12,369 --> 00:56:15,069
have some matches in the file

1108
00:56:15,069 --> 00:56:16,839
system idea for  example

1109
00:56:16,839 --> 00:56:20,680
plastic stress 0 s1 s2 all refer to the

1110
00:56:20,680 --> 00:56:24,200
same module as the ewart module

1111
00:56:24,200 --> 00:56:27,020
so when the mod is used  ulo

1112
00:56:27,020 --> 00:56:29,240
ewart if you have configured 3 serials

1113
00:56:29,240 --> 00:56:31,400
3 fano will be called creates

1114
00:56:31,400 --> 00:56:34,520
that whoever creates train tris inside the

1115
00:56:34,520 --> 00:56:38,089
bird filesystem the module is

1116
00:56:38,089 --> 00:56:40,880
associated as as owner of

1117
00:56:40,880 --> 00:56:42,770
that file descriptor and the operation files

1118
00:56:42,770 --> 00:56:47,180
are defined by

1119
00:56:47,180 --> 00:56:50,779
module so let's say that when

1120
00:56:50,779 --> 00:56:53,059
when the cisco lrit is called on

1121
00:56:53,059 --> 00:56:54,589
that file yen you go to see who is

1122
00:56:54,589 --> 00:56:56,900
loughner he is called a rizzo del tt

1123
00:56:56,900 --> 00:56:59,839
wiese 0 loughner is the driver of the serious

1124
00:56:59,839 --> 00:57:02,719
the serial complaints to his open

1125
00:57:02,719 --> 00:57:06,729
action read file that will be called

1126
00:57:06,729 --> 00:57:08,719
within the call  unglue

1127
00:57:08,719 --> 00:57:11,259
itself inside the driver

1128
00:57:11,259 --> 00:57:14,929
each module can define

1129
00:57:14,929 --> 00:57:17,179
standard file operations such as open reed bright

1130
00:57:17,179 --> 00:57:19,429
falls etc. etc.

1131
00:57:19,429 --> 00:57:21,099
socket operation then receive

1132
00:57:21,099 --> 00:57:25,489
guru artist etc.

1133
00:57:25,489 --> 00:57:30,319
terminal operations then attributes or places of

1134
00:57:30,319 --> 00:57:34,969
chad or the two block operations for

1135
00:57:34,969 --> 00:57:37,789
action for example this is that  which

1136
00:57:37,789 --> 00:57:42,229
exposes dell sd 0 which is the driver of the

1137
00:57:42,229 --> 00:57:45,890
sd card so that you can

1138
00:57:45,890 --> 00:57:50,959
copy a sy file  stem fat for example and

1139
00:57:50,959 --> 00:57:54,079
in fact mount fs a partition on the

1140
00:57:54,079 --> 00:57:55,549
sd card

1141
00:57:55,549 --> 00:57:57,579
the file system expects to find

1142
00:57:57,579 --> 00:58:03,589
these two functions in the del interface

1143
00:58:03,589 --> 00:58:08,010
of the sd card and the modules can

1144
00:58:08,010 --> 00:58:10,380
be combined attached to the set systems

1145
00:58:10,380 --> 00:58:13,319
to other modules or associated with file

1146
00:58:13,319 --> 00:58:16,430
entries through  her the file operations

1147
00:58:16,430 --> 00:58:19,589
for example the artwork defines these

1148
00:58:19,589 --> 00:58:21,990
functions to open read write

1149
00:58:21,990 --> 00:58:26,670
paul tt woe to traces when you

1150
00:58:26,670 --> 00:58:29,519
start the system 22

1151
00:58:29,519 --> 00:58:32,609
antri tt rs rs 1 are created for example when

1152
00:58:32,609 --> 00:58:34,319
an application that wants to open

1153
00:58:34,319 --> 00:58:36,359
reports calls cisco lauper la cisco

1154
00:58:36,359 --> 00:58:38,970
laupen calls the open of the serial the

1155
00:58:38,970 --> 00:58:41,250
saddle for the serial actually

1156
00:58:41,250 --> 00:58:43,740
associates the file descriptor to the

1157
00:58:43,740 --> 00:58:46,619
serial itself and then you have to use read

1158
00:58:46,619 --> 00:58:49,380
write paul select to access the

1159
00:58:49,380 --> 00:58:55,660
operations there is the open wing

1160
00:58:55,660 --> 00:58:59,269
connects the task all f north through

1161
00:58:59,269 --> 00:59:02,660
an association  of file descriptor the

1162
00:59:02,660 --> 00:59:04,940
owner of the modes is the driver

1163
00:59:04,940 --> 00:59:07,940
itself when the arid is called the

1164
00:59:07,940 --> 00:59:10,849
wright the driver operations are called

1165
00:59:10,849 --> 00:59:15,529
and and is  the driver itself to

1166
00:59:15,529 --> 00:59:18,890
have to implement the blocking logic

1167
00:59:18,890 --> 00:59:22,519
of returning circle again is to put

1168
00:59:22,519 --> 00:59:24,979
the process in spender key while

1169
00:59:24,979 --> 00:59:27,769
when the pole is called

1170
00:59:27,769 --> 00:59:29,239
as it can be called

1171
00:59:29,239 --> 00:59:30,799
simultaneously the subjects

1172
00:59:30,799 --> 00:59:32,930
different type for example on a serial and on the

1173
00:59:32,930 --> 00:59:38,050
unix bags a socket types  and ipv6

1174
00:59:38,050 --> 00:59:40,660
in that case there is no need to

1175
00:59:40,660 --> 00:59:42,850
implement blocking logic because

1176
00:59:42,850 --> 00:59:45,010
that logic is done at the

1177
00:59:45,010 --> 00:59:47,050
system level is the only thing we need to

1178
00:59:47,050 --> 00:59:50,080
tell the kernel in that case there from the point

1179
00:59:50,080 --> 00:59:52,390
of view the driver is this device

1180
00:59:52,390 --> 00:59:54,910
in  this moment is able to read

1181
00:59:54,910 --> 00:59:57,670
and write or give an error and are

1182
00:59:57,670 --> 00:59:59,770
the three flags that are passed

1183
00:59:59,770 --> 01:00:01,900
through interfaces the pole is

1184
01:00:01,900 --> 01:00:04,750
clearly the select is implemented

1185
01:00:04,750 --> 01:00:06,640
as it misunderstands the pole at that point there

1186
01:00:06,640 --> 01:00:09,070
so which select are equivalent from the

1187
01:00:09,070 --> 01:00:10,150
point of view  functional

1188
01:00:10,150 --> 01:00:12,040
just implement the pole in the rows and

1189
01:00:12,040 --> 01:00:14,200
in the parishes and in that case there if

1190
01:00:14,200 --> 01:00:16,090
we do not return zero and also the other

1191
01:00:16,090 --> 01:00:20,350
two sonic drivers  s return 0

1192
01:00:20,350 --> 01:00:23,380
simultaneously the ball will take care of

1193
01:00:23,380 --> 01:00:26,380
sleeping with the time out without

1194
01:00:26,380 --> 01:00:28,230
depending on how it was invoked by userspace

1195
01:00:28,230 --> 01:00:32,100
exactly as per the manual

1196
01:00:32,680 --> 01:00:34,090
when it is called for the first

1197
01:00:34,090 --> 01:00:36,970
time is is the serial buffer empty

1198
01:00:36,970 --> 01:00:38,890
i.e. there are no characters to  read and

1199
01:00:38,890 --> 01:00:41,500
there the case in which we have to block is

1200
01:00:41,500 --> 01:00:43,540
the same thing applies to wright if the

1201
01:00:43,540 --> 01:00:46,360
output buffer and price plan must

1202
01:00:46,360 --> 01:00:49,090
suspend until all the

1203
01:00:49,090 --> 01:00:50,700
local characters have been

1204
01:00:50,700 --> 01:00:53,860
transmitted for which it is the

1205
01:00:53,860 --> 01:00:55,600
responsible driver as we said to call

1206
01:00:55,600 --> 01:00:57,520
cisco  leggen and to make us wake up by the

1207
01:00:57,520 --> 01:01:00,040
irc wendler and then let's say

1208
01:01:00,040 --> 01:01:02,530
the same thing happens as for the

1209
01:01:02,530 --> 01:01:06,820
blood that is when the laugh is called the

1210
01:01:06,820 --> 01:01:09,070
first time if the buffer is empty

1211
01:01:09,070 --> 01:01:13,030
we try to copy neither bites if the

1212
01:01:13,030 --> 01:01:14,350
couple is successful

1213
01:01:14,350 --> 01:01:17,170
we return n otherwise we  we put the

1214
01:01:17,170 --> 01:01:19,510
sections of it is spent and we return it

1215
01:01:19,510 --> 01:01:22,030
disconnects end at that point the serial and

1216
01:01:22,030 --> 01:01:25,150
you will have an interart the inter art the inter

1217
01:01:25,150 --> 01:01:27,940
awaits will only have

1218
01:01:27,940 --> 01:01:31,300
the function of filling the b

1219
01:01:31,300 --> 01:01:33,460
Device driver officer starting from the filef

1220
01:01:33,460 --> 01:01:35,920
of the same evening and of call

1221
01:01:35,920 --> 01:01:40,470
wrote on the tusk that it had been

1222
01:01:40,470 --> 01:01:42,359
what should be called larynx on the

1223
01:01:42,359 --> 01:01:44,400
serial previously but in this way

1224
01:01:44,400 --> 01:01:46,590
we can do

1225
01:01:46,590 --> 01:01:49,109
blocking functions starting from the interface of the

1226
01:01:49,109 --> 01:01:52,260
system with level  of device drivers

1227
01:01:52,260 --> 01:01:55,260
we say that this is one of the most important things

1228
01:01:55,260 --> 01:01:56,310


1229
01:01:56,310 --> 01:01:59,580
in the booklet because it obviously allows us

1230
01:01:59,580 --> 01:02:02,880
to have a shot of the ingv air and not

1231
01:02:02,880 --> 01:02:05,670
to stand there constantly stamping

1232
01:02:05,670 --> 01:02:08,810
our resources but to have

1233
01:02:08,810 --> 01:02:12,080
an organization of events compared

1234
01:02:12,080 --> 01:02:14,420
to what  posix interface that

1235
01:02:14,420 --> 01:02:17,210
the user expects in such a way that

1236
01:02:17,210 --> 01:02:21,410
the events are synchronized to what

1237
01:02:21,410 --> 01:02:25,330
it is that the application expects

1238
01:02:25,330 --> 01:02:29,330
the calls themselves and therefore let's say

1239
01:02:29,330 --> 01:02:35,160
these are a bit of the

1240
01:02:35,160 --> 01:02:39,920
architectural choices we made

1241
01:02:39,920 --> 01:02:43,980
let's say in developing frost and more

1242
01:02:43,980 --> 01:02:45,120
information  you will

1243
01:02:45,120 --> 01:02:49,999
surely find in our tab

1244
01:02:49,999 --> 01:02:53,700
or swyer page you know

1245
01:02:53,700 --> 01:02:56,920
questions or questions or proposals whatever

1246
01:02:56,920 --> 01:03:01,480
we say s  We are always

1247
01:03:01,480 --> 01:03:04,530
looking for new developers so if

1248
01:03:04,530 --> 01:03:08,200
your curiosity is stimulated

1249
01:03:08,200 --> 01:03:10,840
I would be very happy we would be very

1250
01:03:10,840 --> 01:03:16,720
happy to welcome you to the

1251
01:03:16,720 --> 01:03:17,230
trim

1252
01:03:17,230 --> 01:03:20,160
otherwise even a star sauces tab

1253
01:03:20,160 --> 01:03:24,910
is a gesture of love thank you very

1254
01:03:24,910 --> 01:03:41,530
much thanks to how nice 14 I

1255
01:03:41,530 --> 01:03:46,090
did not know time  for all the link I will try

1256
01:03:46,090 --> 01:03:50,230
to limit and what is the footprint sorry if

1257
01:03:50,230 --> 01:03:53,950
maybe you already said or maybe yesterday the a

1258
01:03:53,950 --> 01:03:58,420
level of flash defends itself a

1259
01:03:58,420 --> 01:04:01,990
lot from how many drivers with very

1260
01:04:01,990 --> 01:04:03,400
flexible

1261
01:04:03,400 --> 01:04:06,310
let's say that we can run from a

1262
01:04:06,310 --> 01:04:09,710
minimum of thirty k up

1263
01:04:09,710 --> 01:04:13,780
to a sixty 70

1264
01:04:14,060 --> 01:04:16,210
no maybe more if in spirits credits

1265
01:04:16,210 --> 01:04:18,950
we can give you a try I say it

1266
01:04:18,950 --> 01:04:21,710
well the good even from the flags etcetera

1267
01:04:21,710 --> 01:04:27,349
but let's say between 30 30k there should

1268
01:04:27,349 --> 01:04:29,599
be a minimal carnet congratulations

1269
01:04:29,599 --> 01:04:31,400
I have to pass someone else I can do

1270
01:04:31,400 --> 01:04:38,470
the other  as you like

1271
01:04:38,470 --> 01:04:40,970
how many developers are there and how much

1272
01:04:40,970 --> 01:04:44,000
time is there for now the project in

1273
01:04:44,000 --> 01:04:49,070
one year and three months and we are 12 contributions

1274
01:04:49,070 --> 01:04:51,410
in all of which now  as now there was

1275
01:04:51,410 --> 01:04:54,220
45 active in total

1276
01:04:54,220 --> 01:04:57,220
thank

1277
01:05:04,200 --> 01:05:10,570
you young you are confronted with for example

1278
01:05:10,570 --> 01:05:18,610
I know that then you want a petition of

1279
01:05:18,610 --> 01:05:20,710
yesterday a little bit but the thing very

1280
01:05:20,710 --> 01:05:23,890
briefly there are systems you see linux

1281
01:05:23,890 --> 01:05:26,940
that are able to run without mmo but

1282
01:05:26,940 --> 01:05:30,070
only some cortex m  they have the resources

1283
01:05:30,070 --> 01:05:32,380
suitable for this because the

1284
01:05:32,380 --> 01:05:34,810
linux kernel tends to grow

1285
01:05:34,810 --> 01:05:37,119
dramatically

1286
01:05:37,119 --> 01:05:40,599
the device to do to throw

1287
01:05:40,599 --> 01:05:43,059
notions there need at least a month and a

1288
01:05:43,059 --> 01:05:46,960
half of flash at the beginning it is deal I do not know

1289
01:05:46,960 --> 01:05:49,839
how much ram anyway several just

1290
01:05:49,839 --> 01:05:52,059
to do  starting the neet

1291
01:05:52,059 --> 01:05:54,279
we made some efforts before

1292
01:05:54,279 --> 01:05:57,099
starting frost and in the direction of yoox

1293
01:05:57,099 --> 01:06:00,069
kernel means action including the

1294
01:06:00,069 --> 01:06:03,460
attempt to change the tcp ip stack

1295
01:06:03,460 --> 01:06:06,759
to the kernel the same team had brought

1296
01:06:06,759 --> 01:06:11,980
a 2015 alfons project related

1297
01:06:11,980 --> 01:06:14,460
to the

1298
01:06:15,480 --> 01:06:19,210
reduction of the ppe sais  of

1299
01:06:19,210 --> 01:06:20,440
linux

1300
01:06:20,440 --> 01:06:23,380
there were some movements in that of

1301
01:06:23,380 --> 01:06:25,570
in that direction there after which

1302
01:06:25,570 --> 01:06:27,160
we tried to do a

1303
01:06:27,160 --> 01:06:30,340
different approach also to include  re those

1304
01:06:30,340 --> 01:06:32,200
devices to put where the

1305
01:06:32,200 --> 01:06:33,160
resources are really few

1306
01:06:33,160 --> 01:06:35,210
we are talking about

1307
01:06:35,210 --> 01:06:38,759
less than a hundred kd flash or 128k

1308
01:06:38,759 --> 01:06:40,440
of flash 64k of ram

1309
01:06:40,440 --> 01:06:44,999
there still we have to do with my question it is

1310
01:06:44,999 --> 01:06:48,420
much more trivial your

1311
01:06:48,420 --> 01:06:54,869
toolchain you have exhausted it if the  your

1312
01:06:54,869 --> 01:06:57,599
toolchain yes and upstream in tone you sent me

1313
01:06:57,599 --> 01:06:59,819
stream it is just a page fold on gigi

1314
01:06:59,819 --> 01:07:02,220
then then it is a combination of many

1315
01:07:02,220 --> 01:07:05,930
components including crosspool angie

1316
01:07:05,930 --> 01:07:10,079
health flat new book in which we use the

1317
01:07:10,079 --> 01:07:14,749
fulcrum on the modified thomas pettazzoni engi

1318
01:07:14,749 --> 01:07:16,619
and it's all on a trip

1319
01:07:16,619 --> 01:07:18,630
in the ecosystem that I was saying before

1320
01:07:18,630 --> 01:07:20,640
after which every time we make a

1321
01:07:20,640 --> 01:07:23,130
comet by sarah jenkins it has generated the

1322
01:07:23,130 --> 01:07:25,349
general cia tuchel because as mentioned

1323
01:07:25,349 --> 01:07:27,900
yesterday it takes us half an hour and 50 minutes

1324
01:07:27,900 --> 01:07:29,670
to take the general

1325
01:07:29,670 --> 01:07:31,079
toolchain machine so an operation that

1326
01:07:31,079 --> 01:07:33,150
we preferred to automate and  this

1327
01:07:33,150 --> 01:07:37,279
of the nightly builds of the releases

1328
01:07:42,469 --> 01:07:46,259
is not yet possible but in reality

1329
01:07:46,259 --> 01:07:49,739
the thing is wanted because there are too many

1330
01:07:49,739 --> 01:07:51,809
changes to be made and you have to build  auto

1331
01:07:51,809 --> 01:07:54,630
chen from scratch using g costume to

1332
01:07:54,630 --> 01:07:56,279
have the right combination of

1333
01:07:56,279 --> 01:07:59,029
components

1334
01:08:02,540 --> 01:08:05,540
thanks

