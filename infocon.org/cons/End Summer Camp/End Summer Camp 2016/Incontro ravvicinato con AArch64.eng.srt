1
00:00:00,560 --> 00:00:03,899
perfect good morning everyone

2
00:00:03,899 --> 00:00:06,150
thank you for being more my talk who

3
00:00:06,150 --> 00:00:08,039
I am I am the vine bettio things what

4
00:00:08,039 --> 00:00:10,620
I do I deal with embedded systems

5
00:00:10,620 --> 00:00:13,860
among other things and above all for

6
00:00:13,860 --> 00:00:18,660
work and today I will talk about art sixty

7
00:00:18,660 --> 00:00:21,930
four what is art sixty  four is because he

8
00:00:21,930 --> 00:00:24,000
talks about it today art sixty four

9
00:00:24,000 --> 00:00:29,279
essentially 64-bit arm said in

10
00:00:29,279 --> 00:00:31,560
a brutal way and because he talks about it today is

11
00:00:31,560 --> 00:00:34,380
very simple essentially despite

12
00:00:34,380 --> 00:00:36,840
this architecture has been on the

13
00:00:36,840 --> 00:00:39,960
market for some time

14
00:00:39,960 --> 00:00:42,750
only recently it begins to be

15
00:00:42,750 --> 00:00:46,079
easily available especially without

16
00:00:46,079 --> 00:00:48,030
having to take an android mobile phone

17
00:00:48,030 --> 00:00:50,579
essentially the first

18
00:00:50,579 --> 00:00:53,610
devices that came out with 64-

19
00:00:53,610 --> 00:00:55,440
bit air arm us the

20
00:00:55,440 --> 00:00:58,020
iphone now there are also various

21
00:00:58,020 --> 00:01:01,250
boards including the raspberry pi i three which

22
00:01:01,250 --> 00:01:07,950
has a cpu arm v8 a cpi whistled arm

23
00:01:07,950 --> 00:01:14,610
cortex sticazzi which is  arm v8 short

24
00:01:14,610 --> 00:01:17,280
history of arm what is arm is

25
00:01:17,280 --> 00:01:21,210
an architecture of processors that is

26
00:01:21,210 --> 00:01:25,700
outdated in reality it was born for

27
00:01:25,700 --> 00:01:30,329
the bbc computers in the 85

28
00:01:30,329 --> 00:01:33,030
initials  t and the computers b of the bbc bbc

29
00:01:33,030 --> 00:01:35,460
micro had coprocessor module support

30
00:01:35,460 --> 00:01:37,890
in which processors were placed

31
00:01:37,890 --> 00:01:40,799
to make extra pockets or

32
00:01:40,799 --> 00:01:42,270
run operating systems not

33
00:01:42,270 --> 00:01:44,820
supported by the micro bbc one of these

34
00:01:44,820 --> 00:01:48,210
modules were produced by accor

35
00:01:48,210 --> 00:01:51,869
in the company that those who produced the

36
00:01:51,869 --> 00:01:55,259
arm start and  together another company and the

37
00:01:55,259 --> 00:01:59,549
arma was born because also because those who

38
00:01:59,549 --> 00:02:02,189
dealt with the development of these things

39
00:02:02,189 --> 00:02:04,790
were fascinated by some papers

40
00:02:04,790 --> 00:02:07,259
of the time on the design of the

41
00:02:07,259 --> 00:02:09,030
rc processors because let us remember that we were in

42
00:02:09,030 --> 00:02:11,610
an era in which the normality were

43
00:02:11,610 --> 00:02:13,620
processors type  the motorola 68

44
00:02:13,620 --> 00:02:15,930
thousand who were monsters with a

45
00:02:15,930 --> 00:02:17,519
subject of education in amara of

46
00:02:17,519 --> 00:02:19,950
transistors dedicated to programming

47
00:02:19,950 --> 00:02:23,900
microcode to the tables of anything else

48
00:02:23,900 --> 00:02:25,860
someone was fascinated by the

49
00:02:25,860 --> 00:02:28,379
possibility of making the design to make

50
00:02:28,379 --> 00:02:32,129
these simplified designs this this

51
00:02:32,129 --> 00:02:35,430
is an advantage that turned out

52
00:02:35,430 --> 00:02:39,120
especially later because arm punto was

53
00:02:39,120 --> 00:02:42,329
initially born as a processor for mini

54
00:02:42,329 --> 00:02:45,269
personal computer com  puter of the time

55
00:02:45,269 --> 00:02:47,790
and was trained in the

56
00:02:47,790 --> 00:02:52,109
reference architecture for all handled systems

57
00:02:52,109 --> 00:02:55,799
or anything else in general systems m is one

58
00:02:55,799 --> 00:02:58,760
of the most significant steps forward was

59
00:02:58,760 --> 00:03:03,900
made thanks to apple that in 92 created

60
00:03:03,900 --> 00:03:07,890
their pil pd and iker all  apple newton

61
00:03:07,890 --> 00:03:10,079
needed a device and

62
00:03:10,079 --> 00:03:14,549
end all precisely a pd that they used point

63
00:03:14,549 --> 00:03:17,299
and develop you can use it

64
00:03:17,299 --> 00:03:22,340
the processors arm sylar of tour arm you are

65
00:03:22,340 --> 00:03:26,370
ok it seems continuing short story

66
00:03:26,370 --> 00:03:28,859
and now just to understand there was a

67
00:03:28,859 --> 00:03:31,709
bit a short internal past is a  mess

68
00:03:31,709 --> 00:03:34,530
in the development in the sense that they have made

69
00:03:34,530 --> 00:03:36,540
a completely crazy nomenclature

70
00:03:36,540 --> 00:03:39,840
at least to understand it is completely out

71
00:03:39,840 --> 00:03:42,019
of the point of view that it is not exactly

72
00:03:42,019 --> 00:03:44,190
linear and understand what we are talking about

73
00:03:44,190 --> 00:03:47,160
in the sense that as you can see we can

74
00:03:47,160 --> 00:03:51,480
talk about arm v6 and then refer to

75
00:03:51,480 --> 00:03:55,739
lisa supported by arm 11 cores so it's

76
00:03:55,739 --> 00:03:57,780
a snap to mess up anyway

77
00:03:57,780 --> 00:03:59,639
essentially this the story

78
00:03:59,639 --> 00:04:01,560
at this point arm v2 which was the

79
00:04:01,560 --> 00:04:05,040
first evolution arm it v3 which would be

80
00:04:05,040 --> 00:04:08,310
l  isa with lecce plus armor 6 art shake

81
00:04:08,310 --> 00:04:10,859
were those found in pd and

82
00:04:10,859 --> 00:04:12,090
apple newtons

83
00:04:12,090 --> 00:04:18,120
then came to v iv tlc plus arm7 tdm aie

84
00:04:18,120 --> 00:04:21,478
arm9 tdm later which are the more c's

85
00:04:21,478 --> 00:04:23,729
that can be found this is c more

86
00:04:23,729 --> 00:04:25,620
than for example  it is commonly found in the

87
00:04:25,620 --> 00:04:26,340


88
00:04:26,340 --> 00:04:28,800
old game boy advance this is the

89
00:04:28,800 --> 00:04:33,780
gpu found in the nintendo ds and those were

90
00:04:33,780 --> 00:04:35,030
other evolutions

91
00:04:35,030 --> 00:04:37,530
this was then this is very

92
00:04:37,530 --> 00:04:38,610
important because at some point they

93
00:04:38,610 --> 00:04:40,850
introduced samb which I will talk about later

94
00:04:40,850 --> 00:04:44,040
with weapons v5 started to be available

95
00:04:44,040 --> 00:04:46,860
the effe più because until before leffe

96
00:04:46,860 --> 00:04:50,990
più was a separate component then came

97
00:04:50,990 --> 00:04:55,320
arm v6 or arm11 which is what

98
00:04:55,320 --> 00:04:57,840
neither raspberry pi is used for the area and among

99
00:04:57,840 --> 00:05:00,240
the various possibilities there is support for

100
00:05:00,240 --> 00:05:02,130
multi core hines introduced

101
00:05:02,130 --> 00:05:06,060
instructions  with which it was possible to make

102
00:05:06,060 --> 00:05:09,510
atomic 7 flags and anything else harlow

103
00:05:09,510 --> 00:05:12,710
setter the most widespread one currently

104
00:05:12,710 --> 00:05:14,880
which is the one found in

105
00:05:14,880 --> 00:05:18,810
most phones and in fact the family

106
00:05:18,810 --> 00:05:20,910
and gpu was renamed in arm

107
00:05:20,910 --> 00:05:24,960
cortex and then precisely I arrive at v8 this

108
00:05:24,960 --> 00:05:28,080
is then let's get confused a little

109
00:05:28,080 --> 00:05:30,419
more let's talk a little about what happened in

110
00:05:30,419 --> 00:05:32,760
everything are all the acronyms essentially

111
00:05:32,760 --> 00:05:37,700
as I said with then are let's

112
00:05:37,700 --> 00:05:40,260
go back for a moment then the

113
00:05:40,260 --> 00:05:43,500
problems of the gpu risk is that they have

114
00:05:43,500 --> 00:05:45,270
some  very simple instructions are the

115
00:05:45,270 --> 00:05:48,090
instructions that do little and do

116
00:05:48,090 --> 00:05:50,550
only that and you need a lot of them so it's

117
00:05:50,550 --> 00:05:52,820
not like on the six that there is an instruction

118
00:05:52,820 --> 00:05:57,090
that does what I know does plus the setup of the

119
00:05:57,090 --> 00:05:59,610
stack there is a little little instruction

120
00:05:59,610 --> 00:06:02,610
that does  i am a little thing there is no

121
00:06:02,610 --> 00:06:05,070
instruction tv push pop what else there

122
00:06:05,070 --> 00:06:06,720
are instructions to do it

123
00:06:06,720 --> 00:06:08,490
educational stores are instructions to do it

124
00:06:08,490 --> 00:06:10,889
didactic in the stations to move

125
00:06:10,889 --> 00:06:13,380
only things in the registers what

126
00:06:13,380 --> 00:06:16,320
happens among the various loses forever

127
00:06:16,320 --> 00:06:19,889
for the simple design of the  'architecture

128
00:06:19,889 --> 00:06:21,120
all institutions not a

129
00:06:21,120 --> 00:06:23,460
fixed size of four bytes

130
00:06:23,460 --> 00:06:25,349
this leads to a terrible problem

131
00:06:25,349 --> 00:06:27,450
or especially when you have little

132
00:06:27,450 --> 00:06:30,150
cash for solutions l  a cache gets saturated

133
00:06:30,150 --> 00:06:31,710
faster there is little stuff

134
00:06:31,710 --> 00:06:34,080
at this point realizing that

135
00:06:34,080 --> 00:06:35,550
executables tend to be pretty big

136
00:06:35,550 --> 00:06:38,240
as they fill up the cache quickly they

137
00:06:38,240 --> 00:06:39,660
introduced

138
00:06:39,660 --> 00:06:43,970
samb essentially a set of instructions

139
00:06:43,970 --> 00:06:47,600
with two byte worlds each

140
00:06:47,600 --> 00:06:50,430
essentially increased the compactness

141
00:06:50,430 --> 00:06:53,130
of all the software  and this made

142
00:06:53,130 --> 00:06:55,140
the executions quite faster

143
00:06:55,140 --> 00:06:57,660
as there was much more code in the

144
00:06:57,660 --> 00:07:01,640
cache than a rather scarce resource

145
00:07:01,640 --> 00:07:04,350
later and this was introduced

146
00:07:04,350 --> 00:07:07,140
precisely with the arms 7 in fact the t stands

147
00:07:07,140 --> 00:07:09,150
for fab

148
00:07:09,150 --> 00:07:12,300
and then it was extended later in the

149
00:07:12,300 --> 00:07:17,010
meantime then came to  9 with islam 5

150
00:07:17,010 --> 00:07:19,530
point in which vfp is introduced which

151
00:07:19,530 --> 00:07:22,620
stands for vector the floating point

152
00:07:22,620 --> 00:07:26,940
version 2 which is one that is an extension

153
00:07:26,940 --> 00:07:28,530
that the extension precisely for the f plus the

154
00:07:28,530 --> 00:07:31,050
name quite misleading because vector

155
00:07:31,050 --> 00:07:33,000
dnon and hector in the sense that  there is

156
00:07:33,000 --> 00:07:35,820
no such operation in between don't

157
00:07:35,820 --> 00:07:37,650
ask me why because I have no

158
00:07:37,650 --> 00:07:39,120
idea why it was given such a name

159
00:07:39,120 --> 00:07:43,770
unhappy finally came arm 11 11 they

160
00:07:43,770 --> 00:07:46,880
realized that the instructions printed

161
00:07:46,880 --> 00:07:49,770
limited and added added

162
00:07:49,770 --> 00:07:51,570
extensions essentially

163
00:07:51,570 --> 00:07:55,710
reached 32 bit worlds here and there and

164
00:07:55,710 --> 00:07:57,720
this also made the variable size thumb code

165
00:07:57,720 --> 00:08:00,140


166
00:08:00,140 --> 00:08:02,910
small brackets how you do it how

167
00:08:02,910 --> 00:08:05,580
you do it  did you realize if you were how

168
00:08:05,580 --> 00:08:07,169
you got into fan mode

169
00:08:07,169 --> 00:08:09,210
as you noticed that it is neither samp mode

170
00:08:09,210 --> 00:08:11,730
trivially when it is in fam mode

171
00:08:11,730 --> 00:08:14,130
you can find that the counter program

172
00:08:14,130 --> 00:08:16,050
finds an address multiple of two

173
00:08:16,050 --> 00:08:17,700
instead when it is in classic ahram mode

174
00:08:17,700 --> 00:08:20,310
it is always on a multiple of 4

175
00:08:20,310 --> 00:08:22,200
closed parenthesis

176
00:08:22,200 --> 00:08:28,230
last evolution with arm v7 then

177
00:08:28,230 --> 00:08:30,270
all the cortex arrives in neon and

178
00:08:30,270 --> 00:08:33,030
finally we have the simd instructions

179
00:08:33,030 --> 00:08:36,299
then on real vector instructions with

180
00:08:36,299 --> 00:08:38,580
which to do those cute things with which

181
00:08:38,580 --> 00:08:43,490
intel had accustomed us with ss for years

182
00:08:43,490 --> 00:08:47,190
then  i think things were

183
00:08:47,190 --> 00:08:48,900
quite simple when

184
00:08:48,900 --> 00:08:51,840
cortex arrived they said

185
00:08:51,840 --> 00:08:54,540
we follow everything in three different profiles

186
00:08:54,540 --> 00:08:56,490
here  li are these profiles when you hear

187
00:08:56,490 --> 00:08:59,820
about cortex armm stands for

188
00:08:59,820 --> 00:09:02,880
integrated devices

189
00:09:02,880 --> 00:09:05,490
r stands for always integrated devices

190
00:09:05,490 --> 00:09:08,700
but realtime like using the cortex r

191
00:09:08,700 --> 00:09:10,380
could be inside

192
00:09:10,380 --> 00:09:14,010
a disk controller and then finally there is cortex arm

193
00:09:14,010 --> 00:09:17,010
cortex a essentially the  aci more from

194
00:09:17,010 --> 00:09:19,560
phone what you find the

195
00:09:19,560 --> 00:09:24,150
applications and on cortex m generally you

196
00:09:24,150 --> 00:09:26,760
run samb code and have a number of

197
00:09:26,760 --> 00:09:29,940
limitations for example missing the mm

198
00:09:29,940 --> 00:09:33,270
sometimes you can have more lemme and there are

199
00:09:33,270 --> 00:09:34,920
a number of other limitations how much

200
00:09:34,920 --> 00:09:37,470
memory you can address  anything else

201
00:09:37,470 --> 00:09:39,510
in short, they are quite small, however,

202
00:09:39,510 --> 00:09:41,460
they have a low consumption cortex and

203
00:09:41,460 --> 00:09:43,800
instead they are for phones that have

204
00:09:43,800 --> 00:09:45,870
undergone a continuous growth precisely

205
00:09:45,870 --> 00:09:47,880
also in the type of hardware they

206
00:09:47,880 --> 00:09:50,250
support we have gone from the first

207
00:09:50,250 --> 00:09:52,950
phones with cortex to a few megs

208
00:09:52,950 --> 00:09:55,020
of memory and  we arrived at the

209
00:09:55,020 --> 00:09:58,200
current phones that do not go of a gig of memory and

210
00:09:58,200 --> 00:10:00,210
what happens is since we have

211
00:10:00,210 --> 00:10:03,150
complicated everything with various acronyms of

212
00:10:03,150 --> 00:10:05,280
various types right  to diversify

213
00:10:05,280 --> 00:10:08,760
things we add total madness total madness

214
00:10:08,760 --> 00:10:10,410
we decided at some point

215
00:10:10,410 --> 00:10:12,810
they decided well to all

216
00:10:12,810 --> 00:10:14,490
applications are compiled with the certain

217
00:10:14,490 --> 00:10:17,820
abi that it was or a b realized that oa

218
00:10:17,820 --> 00:10:20,040
b wasn't that great in embedded systems

219
00:10:20,040 --> 00:10:22,530
they thought we do  another

220
00:10:22,530 --> 00:10:25,980
ab incompatible and it will be and abn ab

221
00:10:25,980 --> 00:10:29,660
but since leffe più was not always

222
00:10:29,660 --> 00:10:33,060
optional what did they think we do

223
00:10:33,060 --> 00:10:35,040
two skilled so let's complicate

224
00:10:35,040 --> 00:10:36,180
things even more

225
00:10:36,180 --> 00:10:38,400
what happens we have the compiled binaries

226
00:10:38,400 --> 00:10:44,010
and abi softlook and abi artshot to

227
00:10:44,010 --> 00:10:46,650
complicate everything there  is the fact that

228
00:10:46,650 --> 00:10:50,820
sof fruit binaries don't necessarily use

229
00:10:50,820 --> 00:10:53,370
leffe instructions anymore it's simply

230
00:10:53,370 --> 00:10:55,500
a matter of calin convention so

231
00:10:55,500 --> 00:10:57,420
we could have binaries compiled in

232
00:10:57,420 --> 00:11:00,030
soft float but inside them they use

233
00:11:00,030 --> 00:11:03,180
leffe more then the functions are passed

234
00:11:03,180 --> 00:11:04,360
in floating point

235
00:11:04,360 --> 00:11:06,700
the  soft float way internally they

236
00:11:06,700 --> 00:11:10,060
could use the fpi and therefore you have to

237
00:11:10,060 --> 00:11:11,560
be very careful about this thing

238
00:11:11,560 --> 00:11:14,800
especially when compiling for arm v5

239
00:11:14,800 --> 00:11:17,649
this  it may happen that you are

240
00:11:17,649 --> 00:11:20,230
not careful enough you may find some

241
00:11:20,230 --> 00:11:22,480
code with the effe more inside also you are

242
00:11:22,480 --> 00:11:25,720
compiling the sense and soft float and

243
00:11:25,720 --> 00:11:27,640
therefore we find ourselves a nice variety

244
00:11:27,640 --> 00:11:29,589
so we are in fact with three hubs

245
00:11:29,589 --> 00:11:31,600
to support

246
00:11:31,600 --> 00:11:33,399
so each binary could be

247
00:11:33,399 --> 00:11:35,260
compiled in  three different ways for a

248
00:11:35,260 --> 00:11:38,950
different user space in brackets these

249
00:11:38,950 --> 00:11:41,950
two ab work with the same car in

250
00:11:41,950 --> 00:11:44,410
93 skill nothing in the flesh or skillful

251
00:11:44,410 --> 00:11:46,390
even requires to live now is

252
00:11:46,390 --> 00:11:48,100
that we new the ab support when

253
00:11:48,100 --> 00:11:50,290
before it was contrary to go to the blick toia

254
00:11:50,290 --> 00:11:52,149
b then have will be

255
00:11:52,149 --> 00:11:53,680
things of the time are quite complicated because in

256
00:11:53,680 --> 00:11:56,320
fact they had a fairly

257
00:11:56,320 --> 00:11:59,050
rapid and not always linear development throughout

258
00:11:59,050 --> 00:12:00,670
this year what they did

259
00:12:00,670 --> 00:12:03,490
have a small

260
00:12:03,490 --> 00:12:05,890
nomenclature scheme so you understand what every

261
00:12:05,890 --> 00:12:08,589
now and then you find these quite

262
00:12:08,589 --> 00:12:11,920
incomprehensible strings like armus at t nhl

263
00:12:11,920 --> 00:12:13,899
this string what it means  they don't

264
00:12:13,899 --> 00:12:15,610
mean we have a

265
00:12:15,610 --> 00:12:20,230
compiled binary for isa arm v7 for con

266
00:12:20,230 --> 00:12:23,140
afam support la n is because the fact

267
00:12:23,140 --> 00:12:24,910
that the student binaries compiled

268
00:12:24,910 --> 00:12:28,630
with nyon and hl support means that the

269
00:12:28,630 --> 00:12:32,050
beerschot are not completely standard abbreviations they

270
00:12:32,050 --> 00:12:34,149
are quite common

271
00:12:34,149 --> 00:12:37,570
for example use the strings armel

272
00:12:37,570 --> 00:12:40,390
pare mi and arma caf to identify these

273
00:12:40,390 --> 00:12:43,540
two architectures in parentheses debian

274
00:12:43,540 --> 00:12:46,019
by their choice does not support multiple

275
00:12:46,019 --> 00:12:50,589
revisions of the isa supports the latest for

276
00:12:50,589 --> 00:12:54,449
in soft the last hotel in upload so

277
00:12:54,449 --> 00:12:58,029
everything must not be supported in fact for

278
00:12:58,029 --> 00:13:00,940
barry then there is a nod to the distribution

279
00:13:00,940 --> 00:13:02,620
on purpose to make mistakes also seem to

280
00:13:02,620 --> 00:13:05,800
this reason here the raspberry appears to be

281
00:13:05,800 --> 00:13:09,579
arm v6 l normally the binaries for the

282
00:13:09,579 --> 00:13:11,649
raspberry appear to be compiled in soft

283
00:13:11,649 --> 00:13:14,220
law and are compiled precisely for

284
00:13:14,220 --> 00:13:17,830
lizard v6 which is equipped with df more

285
00:13:17,830 --> 00:13:21,460
and that's it and just now what happened

286
00:13:21,460 --> 00:13:25,150
has arrived arm v8 year we have to  do yes

287
00:13:25,150 --> 00:13:27,070
as now we have these these

288
00:13:27,070 --> 00:13:30,970
systems in our pockets that have top gb of ram

289
00:13:30,970 --> 00:13:33,010
we have huge applications then maybe

290
00:13:33,010 --> 00:13:35,080
we would like to enter the mer too

291
00:13:35,080 --> 00:13:38,050
the servers realized that they too

292
00:13:38,050 --> 00:13:40,180
cannot make the switch to a

293
00:13:40,180 --> 00:13:41,710
64-bit architecture

294
00:13:41,710 --> 00:13:44,140
at this point they took advantage they

295
00:13:44,140 --> 00:13:47,290
said why you just extend

296
00:13:47,290 --> 00:13:48,630
the architecture when we can

297
00:13:48,630 --> 00:13:52,090
rethink it as much as possible while

298
00:13:52,090 --> 00:13:53,320
remaining similar to what we did

299
00:13:53,320 --> 00:13:56,230
in the points  positive but let's rethink things

300
00:13:56,230 --> 00:13:58,930
in a better way and they have decided to

301
00:13:58,930 --> 00:14:00,700
make a single they have killed you

302
00:14:00,700 --> 00:14:03,070
support for all the apps so as not to

303
00:14:03,070 --> 00:14:05,860
complicate people's lives the effe

304
00:14:05,860 --> 00:14:09,190
more from this v8 weapon that precisely

305
00:14:09,190 --> 00:14:11,830
introduced 64 bit weapon  it is mandatory

306
00:14:11,830 --> 00:14:14,170
so it no longer makes sense to ask the

307
00:14:14,170 --> 00:14:16,360
problem of compiling with or without

308
00:14:16,360 --> 00:14:20,800
fp neon support that the

309
00:14:20,800 --> 00:14:24,070
vector instruction set are always

310
00:14:24,070 --> 00:14:28,090
there and samb has been excluded hunger has

311
00:14:28,090 --> 00:14:29,350
been excluded because essentially

312
00:14:29,350 --> 00:14:31,180
they have decided to simplify

313
00:14:31,180 --> 00:14:33,670
there too they have removed  fans and they are

314
00:14:33,670 --> 00:14:37,390
concentrated in good

315
00:14:37,390 --> 00:14:40,300
4 byte instruction set and have changed the

316
00:14:40,300 --> 00:14:46,960
instruction encoding point and ok then so  a not

317
00:14:46,960 --> 00:14:49,000
done and then just said that they

318
00:14:49,000 --> 00:14:50,740
changed the encoding the instructions

319
00:14:50,740 --> 00:14:53,890
essentially made some

320
00:14:53,890 --> 00:14:56,890
important changes first they

321
00:14:56,890 --> 00:15:00,130
decided to remove then on the arm the

322
00:15:00,130 --> 00:15:01,990
thing was a nice thing at the time but

323
00:15:01,990 --> 00:15:04,870
then if the indicator turned out to be

324
00:15:04,870 --> 00:15:07,720
something  problematic and on arm it is possible to

325
00:15:07,720 --> 00:15:09,070
condition quilt any

326
00:15:09,070 --> 00:15:10,630
instruction it is possible to put a flag

327
00:15:10,630 --> 00:15:13,210
and make it conditional so we can

328
00:15:13,210 --> 00:15:15,220
that I know have a conditional sum

329
00:15:15,220 --> 00:15:18,910
based on the flags that are set

330
00:15:18,910 --> 00:15:19,800
we can have

331
00:15:19,800 --> 00:15:21,340
conditional multiplication we can have the

332
00:15:21,340 --> 00:15:23,170
conditional situation access the

333
00:15:23,170 --> 00:15:25,360
conditional evil all  conditionable

334
00:15:25,360 --> 00:15:27,630
we care because each instruction had

335
00:15:27,630 --> 00:15:30,970
top bits dedicated to the conditional

336
00:15:30,970 --> 00:15:33,910
the instructions secondarily not only did we

337
00:15:33,910 --> 00:15:35,860
lose some bits to condition

338
00:15:35,860 --> 00:15:38,439
an instruction that maybe was not so

339
00:15:38,439 --> 00:15:40,360
used in conditional form but

340
00:15:40,360 --> 00:15:42,160
even complicated the design of the

341
00:15:42,160 --> 00:15:43,779
pipeline because essentially in the pipe

342
00:15:43,779 --> 00:15:45,339
line they found themselves  of the instructions  that

343
00:15:45,339 --> 00:15:46,660
it was not said that they were then executed

344
00:15:46,660 --> 00:15:48,910
they decided to simplify everything

345
00:15:48,910 --> 00:15:52,089
to kill this feature they said

346
00:15:52,089 --> 00:15:53,259
only some institutions are

347
00:15:53,259 --> 00:15:55,480
conditioned the rest no so we have

348
00:15:55,480 --> 00:15:58,000
saved some bits and these bits use

349
00:15:58,000 --> 00:16:02,410
said since the registers on 32-bit arm are

350
00:16:02,410 --> 00:16:02,860


351
00:16:02,860 --> 00:16:06,009
in fact  16 the registers in

352
00:16:06,009 --> 00:16:08,110
which there is the program counter anything else

353
00:16:08,110 --> 00:16:11,589
net we use these these bt more to

354
00:16:11,589 --> 00:16:14,889
give an extra bit in the for each single

355
00:16:14,889 --> 00:16:17,800
field of each register operand and therefore

356
00:16:17,800 --> 00:16:19,870
we have 5 bits to identify the

357
00:16:19,870 --> 00:16:21,610
register so we have 32

358
00:16:21,610 --> 00:16:24,339
possible registers and in fact the instructions have

359
00:16:24,339 --> 00:16:26,860
remained as previously always between

360
00:16:26,860 --> 00:16:31,439
operands for instruction generally and

361
00:16:31,439 --> 00:16:33,730
you who have introduced all other changes in fact

362
00:16:33,730 --> 00:16:36,189
all new registers

363
00:16:36,189 --> 00:16:37,420
there too have decided to make some

364
00:16:37,420 --> 00:16:39,639
important changes the program

365
00:16:39,639 --> 00:16:42,579
counter on 64-bit arm is no longer

366
00:16:42,579 --> 00:16:47,319
accessible essentially  on 32-bit arm it

367
00:16:47,319 --> 00:16:50,079
was possible for example a

368
00:16:50,079 --> 00:16:52,870
classic thing is when returning from a

369
00:16:52,870 --> 00:16:56,949
function instead  to do a jump or a rap

370
00:16:56,949 --> 00:17:00,009
like x6 trivially what you do

371
00:17:00,009 --> 00:17:01,809
there is a register it is called link director

372
00:17:01,809 --> 00:17:04,480
that practically sees the address of

373
00:17:04,480 --> 00:17:07,150
where the caller is he had affirmed himself

374
00:17:07,150 --> 00:17:09,579
when it was done trivially he did

375
00:17:09,579 --> 00:17:14,709
mob pc comma lr which means take

376
00:17:14,709 --> 00:17:17,169
content  and link register the

377
00:17:17,169 --> 00:17:19,030
counter program is thus a

378
00:17:19,030 --> 00:17:21,909
factual leap was made allowing free access

379
00:17:21,909 --> 00:17:24,640
to the register the

380
00:17:24,640 --> 00:17:26,500
counter program treating it as a director and a

381
00:17:26,500 --> 00:17:29,559
bit general purpose a bit and this that

382
00:17:29,559 --> 00:17:31,210
I had problems structure to manage the

383
00:17:31,210 --> 00:17:33,370
pipe line as well as then we wasted  one

384
00:17:33,370 --> 00:17:35,140
more register that we could use it for

385
00:17:35,140 --> 00:17:38,890
something else and always following this

386
00:17:38,890 --> 00:17:42,130
logic they also decided to remove

387
00:17:42,130 --> 00:17:44,500


388
00:17:44,500 --> 00:17:46,780
the stack pointer from the general purpose registers the stack pointer is no

389
00:17:46,780 --> 00:17:49,840
longer a general purpose register but in

390
00:17:49,840 --> 00:17:54,190
fact it is in registers xx 31 that we

391
00:17:54,190 --> 00:17:55,090
must here however  be very careful

392
00:17:55,090 --> 00:17:56,710
because they made a choice that is

393
00:17:56,710 --> 00:17:58,600
shape but if you are not careful you

394
00:17:58,600 --> 00:18:01,090
can get hurt register 21 is also a

395
00:18:01,090 --> 00:18:05,410
hard wire register  from zero or with ii

396
00:18:05,410 --> 00:18:06,760
of which some instructions are used

397
00:18:06,760 --> 00:18:08,890
depending on which instruction it draws

398
00:18:08,890 --> 00:18:10,720
or refers to the start point or

399
00:18:10,720 --> 00:18:13,210
could refer to a register

400
00:18:13,210 --> 00:18:14,920
that every time it is elected is equal to

401
00:18:14,920 --> 00:18:17,020
zero and every time you write to it the

402
00:18:17,020 --> 00:18:21,850
writing is ignored  and production of on 31

403
00:18:21,850 --> 00:18:24,760
then in fact link registration was

404
00:18:24,760 --> 00:18:26,650
simply moved on of tricks

405
00:18:26,650 --> 00:18:29,820
30 and on the former 29 we have the frame pointer

406
00:18:29,820 --> 00:18:33,520
and we go on with what has changed and or

407
00:18:33,520 --> 00:18:37,030
what has remained the same as I said weapon

408
00:18:37,030 --> 00:18:38,830
point as I promised initially is

409
00:18:38,830 --> 00:18:40,300
a red architecture  one of the

410
00:18:40,300 --> 00:18:42,310
peculiarities of risk

411
00:18:42,310 --> 00:18:44,410
architectures unlike sisqt architectures such as

412
00:18:44,410 --> 00:18:47,950
x86 is that all accesses in memory

413
00:18:47,950 --> 00:18:51,400
occur through two instructions with

414
00:18:51,400 --> 00:18:53,920
their variants a praise store it is not

415
00:18:53,920 --> 00:18:56,680
possible to move direct accesses

416
00:18:56,680 --> 00:19:00,540
memories anything else so what happens

417
00:19:00,540 --> 00:19:03,700
are these two ancient institutions  load

418
00:19:03,700 --> 00:19:07,090
is store and they made an

419
00:19:07,090 --> 00:19:10,000
important change that also here and harms carried

420
00:19:10,000 --> 00:19:12,040
a thing that was mo  lto convenient when

421
00:19:12,040 --> 00:19:15,010
writing software, however, it will have a

422
00:19:15,010 --> 00:19:16,870
problematic location multiple stores

423
00:19:16,870 --> 00:19:19,240
multiple stores or you can

424
00:19:19,240 --> 00:19:21,430
also decide what I know to store 8

425
00:19:21,430 --> 00:19:23,950
registers starting from a certain one in certain

426
00:19:23,950 --> 00:19:25,630
memory addresses this was quite

427
00:19:25,630 --> 00:19:27,580
problematic in the organization of the

428
00:19:27,580 --> 00:19:30,790
pipeline and therefore they have  decided to

429
00:19:30,790 --> 00:19:33,850
discard these instructions two

430
00:19:33,850 --> 00:19:36,880
nice new instructions which are led to store

431
00:19:36,880 --> 00:19:40,570
for essentially possible with in arc

432
00:19:40,570 --> 00:19:44,410
sixty four save two registers at a

433
00:19:44,410 --> 00:19:46,030
time this can be useful if the

434
00:19:46,030 --> 00:19:48,060
registers for example we are using them to

435
00:19:48,060 --> 00:19:51,700
keep the inter ia 128 bit for example

436
00:19:51,700 --> 00:19:55,630
and  then they made some sims

437
00:19:55,630 --> 00:19:57,639
small simplifications even

438
00:19:57,639 --> 00:20:01,389
in the access modalities the

439
00:20:01,389 --> 00:20:03,669
contaldo off sets but roughly it remained the

440
00:20:03,669 --> 00:20:06,279
same precisely they removed the store and

441
00:20:06,279 --> 00:20:10,419
praise multiplex tor multiplex

442
00:20:10,419 --> 00:20:12,190
let's do a bit of example just as

443
00:20:12,190 --> 00:20:15,879
I said move pcl is no longer feasible  there is

444
00:20:15,879 --> 00:20:17,979
a beautiful straight statement all the

445
00:20:17,979 --> 00:20:21,369
magic for us then it is precisely and we try

446
00:20:21,369 --> 00:20:24,099
counter not  it's more accessible how do

447
00:20:24,099 --> 00:20:26,169
they have introduced a pretty

448
00:20:26,169 --> 00:20:27,779
pretty instruction it's called adr essentially

449
00:20:27,779 --> 00:20:31,599
this instruction computes us 11 and an

450
00:20:31,599 --> 00:20:34,570
address relative to the current program counter

451
00:20:34,570 --> 00:20:36,729
essentially what we need

452
00:20:36,729 --> 00:20:39,489
to load literals that are

453
00:20:39,489 --> 00:20:42,489
stored around in the code not

454
00:20:42,489 --> 00:20:44,829
too far from where it's coming from

455
00:20:44,829 --> 00:20:49,450
executed and there is also a of two on trendy

456
00:20:49,450 --> 00:20:50,889
of slightly different because

457
00:20:50,889 --> 00:20:53,259
essentially they allow to have

458
00:20:53,259 --> 00:20:55,479
offsets and with respect to the program counter

459
00:20:55,479 --> 00:20:56,739
of different sizes essentially

460
00:20:56,739 --> 00:20:59,889
this to of the offsets and allows to

461
00:20:59,889 --> 00:21:03,279
refer only aligned things and 4 kb

462
00:21:03,279 --> 00:21:05,139
but at the same time there  allows you to

463
00:21:05,139 --> 00:21:07,329
go further up to an even gigabyte

464
00:21:07,329 --> 00:21:11,649
min of memory and precisely as a symbol

465
00:21:11,649 --> 00:21:12,849
of the store they have also made another

466
00:21:12,849 --> 00:21:14,320
small change

467
00:21:14,320 --> 00:21:17,079
as the 64-bit architecture but it can

468
00:21:17,079 --> 00:21:19,570
be useful to work with portions of the

469
00:21:19,570 --> 00:21:21,879
register so to load for example

470
00:21:21,879 --> 00:21:26,349
32 bits  it is possible to do things like l drv

471
00:21:26,349 --> 00:21:30,249
0 0 not indicate 64-bit but only the

472
00:21:30,249 --> 00:21:32,829
32-bit portion  bit of the register everything

473
00:21:32,829 --> 00:21:36,700
else is never pacted at 0 you have to be

474
00:21:36,700 --> 00:21:38,469
very careful because just once

475
00:21:38,469 --> 00:21:41,709
on arm you used to do no doing

476
00:21:41,709 --> 00:21:44,979
just as I know I never remember there was

477
00:21:44,979 --> 00:21:49,269
a pall mall walls of on the register on

478
00:21:49,269 --> 00:21:51,429
itself you have to be careful  even if

479
00:21:51,429 --> 00:21:53,320
you do that instructions that way there

480
00:21:53,320 --> 00:21:54,940
you risk you parsi a piece of

481
00:21:54,940 --> 00:21:58,749
register it is precisely this is an example

482
00:21:58,749 --> 00:22:01,899
of how zamparo symbols and a couple of

483
00:22:01,899 --> 00:22:05,700
registers spx larix x1

484
00:22:05,700 --> 00:22:08,309
this is the register containing

485
00:22:08,309 --> 00:22:10,559
the memory address with respect to where

486
00:22:10,559 --> 00:22:13,110
we want  saving these two registers is

487
00:22:13,110 --> 00:22:16,919
precisely this is the offset this

488
00:22:16,919 --> 00:22:19,440
of the offset then precisely harman

489
00:22:19,440 --> 00:22:21,870
also supports other very nice things such as and

490
00:22:21,870 --> 00:22:24,570
have not been eliminated as precisely the auto

491
00:22:24,570 --> 00:22:26,639
increase and decrease in this way

492
00:22:26,639 --> 00:22:28,590
you do not necessarily have to increase a

493
00:22:28,590 --> 00:22:30,539
register gradually  we hunt

494
00:22:30,539 --> 00:22:34,830
memory impulses and so on and I was just saying

495
00:22:34,830 --> 00:22:36,990
that they have eliminated

496
00:22:36,990 --> 00:22:38,370
conditional instructions but some

497
00:22:38,370 --> 00:22:40,919
important strategic conditional institutions have

498
00:22:40,919 --> 00:22:43,649
remained  of these or introduced one

499
00:22:43,649 --> 00:22:46,860
of these c salci sel allows us on the

500
00:22:46,860 --> 00:22:49,500
basis of the condition to assign to a

501
00:22:49,500 --> 00:22:52,440
certain destination director

502
00:22:52,440 --> 00:22:54,539
a value that must be found in the

503
00:22:54,539 --> 00:22:57,269
register or in the bit register depending on whether

504
00:22:57,269 --> 00:22:59,580
the complied condition is not and also for

505
00:22:59,580 --> 00:23:00,960
example

506
00:23:00,960 --> 00:23:03,120
the  conditional increment 15 are

507
00:23:03,120 --> 00:23:05,190
however a certain number of instructions

508
00:23:05,190 --> 00:23:06,690
that actually useful to have

509
00:23:06,690 --> 00:23:12,690
conditional ok another interesting thing to

510
00:23:12,690 --> 00:23:15,659
see what is the calling

511
00:23:15,659 --> 00:23:18,690
convention on 64-bit arm since one

512
00:23:18,690 --> 00:23:20,070
of the most important things then when you

513
00:23:20,070 --> 00:23:23,360
smile the assemblies then

514
00:23:23,360 --> 00:23:27,500
first of all the first eight registers are

515
00:23:27,500 --> 00:23:30,299
used for the parameters or as a result

516
00:23:30,299 --> 00:23:34,320
to the function then we have x8 x8 is

517
00:23:34,320 --> 00:23:37,919
used as a register where a

518
00:23:37,919 --> 00:23:40,260
memory pointer is kept in case there are

519
00:23:40,260 --> 00:23:42,470
functions ct we pass structures

520
00:23:42,470 --> 00:23:47,970
x6 gx 17 can be used for the plt

521
00:23:47,970 --> 00:23:49,679
for the location issues of the

522
00:23:49,679 --> 00:23:52,370
executables  or as temporary register

523
00:23:52,370 --> 00:23:57,779
x18 it is true in action platform

524
00:23:57,779 --> 00:23:59,789
specific register but in fact it is temporary register

525
00:23:59,789 --> 00:24:01,169
ale o sorry as a

526
00:24:01,169 --> 00:24:04,620
temporary director and then the call in convention

527
00:24:04,620 --> 00:24:07,950
finally wants that xd director ex 19x 28

528
00:24:07,950 --> 00:24:09,899
are saved saved by the caller

529
00:24:09,899 --> 00:24:13,850
because they are otherwise they are lost

530
00:24:13,879 --> 00:24:17,480
this is an example of

531
00:24:17,480 --> 00:24:21,540
64 bit weapon code as you see it is not too

532
00:24:21,540 --> 00:24:24,150
dissimilar from conceptually from

533
00:24:24,150 --> 00:24:26,670
what  there was before with constipation changes

534
00:24:26,670 --> 00:24:29,880
what is this is a simple function that

535
00:24:29,880 --> 00:24:34,200
the compiled dl of an l word that

536
00:24:34,200 --> 00:24:36,900
uses put to print the word from the video

537
00:24:36,900 --> 00:24:38,309
I have not shown you in full why it

538
00:24:38,309 --> 00:24:40,740
took that mess because it

539
00:24:40,740 --> 00:24:42,059
is a  functional with the honor of

540
00:24:42,059 --> 00:24:45,720
variable arguments is simply

541
00:24:45,720 --> 00:24:48,930
which at the beginning the phallus preamble

542
00:24:48,930 --> 00:24:50,990
of the summer the stack

543
00:24:50,990 --> 00:24:54,900
then the first from that beautiful thing

544
00:24:54,900 --> 00:24:58,400
immediately following that below here is

545
00:24:58,400 --> 00:25:02,160
practically loaded using a drp as

546
00:25:02,160 --> 00:25:07,370
I said before literal load containing

547
00:25:07,370 --> 00:25:10,530
the address of the  string of string

548
00:25:10,530 --> 00:25:15,000
l world makes it find on register x0

549
00:25:15,000 --> 00:25:20,760
with bl we jump with brunch and

550
00:25:20,760 --> 00:25:23,130
link registered

551
00:25:23,130 --> 00:25:26,100
high but the address is saved in the

552
00:25:26,100 --> 00:25:29,670
link regis  trato at the address where

553
00:25:29,670 --> 00:25:37,650
there is alps elect of put after ddl with

554
00:25:37,650 --> 00:25:39,510
sorry I did not say bld done with

555
00:25:39,510 --> 00:25:42,780
because precisely he goes well who knows for

556
00:25:42,780 --> 00:25:46,800
brand that makes the jump and b is there that is

557
00:25:46,800 --> 00:25:50,309
brunch link makes the brand goes with  while doing

558
00:25:50,309 --> 00:25:52,230
the brent copy the program counter

559
00:25:52,230 --> 00:25:55,830
inside link register is a

560
00:25:55,830 --> 00:25:58,590
simple proposal also clean I have to say and then

561
00:25:58,590 --> 00:26:02,550
precisely when it comes out we do not enjoy

562
00:26:02,550 --> 00:26:05,340
the values of return and 90 because

563
00:26:05,340 --> 00:26:07,350
essentially the main has been

564
00:26:07,350 --> 00:26:09,270
declared as in the main which

565
00:26:09,270 --> 00:26:12,120
will return to the system  the value

566
00:26:12,120 --> 00:26:13,890
with which the application exits is operational novero exit

567
00:26:13,890 --> 00:26:17,940
saxes texas ev 0 because it is an integer

568
00:26:17,940 --> 00:26:20,580
so in fact we are only interested in the

569
00:26:20,580 --> 00:26:22,040
first 32 bits

570
00:26:22,040 --> 00:26:25,080
because an integer and therefore we have 90 of the

571
00:26:25,080 --> 00:26:29,570
value zero and finally there

572
00:26:29,570 --> 00:26:30,759
we

573
00:26:30,759 --> 00:26:33,669
finish with the setup  of the stack and away

574
00:26:33,669 --> 00:26:35,320
we go out of the direct function point is

575
00:26:35,320 --> 00:26:37,449
to exit the function to reset

576
00:26:37,449 --> 00:26:39,279
the program counter that value

577
00:26:39,279 --> 00:26:44,379
contained in the link register other

578
00:26:44,379 --> 00:26:47,019
example is a call of a cisco the

579
00:26:47,019 --> 00:26:48,909
call of cisco do not excessively

580
00:26:48,909 --> 00:26:53,070
change  ata and we do the usual move we

581
00:26:53,070 --> 00:26:57,279
load this is a macro of

582
00:26:57,279 --> 00:27:00,179
our assembler essentially c

583
00:27:00,179 --> 00:27:02,949
luigi of the instructions that allow us

584
00:27:02,949 --> 00:27:05,979
to find ourselves in x1 is the clue of allo

585
00:27:05,979 --> 00:27:09,459
string and after which this year it will have a

586
00:27:09,459 --> 00:27:12,429
simple wright then we put

587
00:27:12,429 --> 00:27:14,679
a number of  byte we want to print the

588
00:27:14,679 --> 00:27:18,940
string and svc and call a service

589
00:27:18,940 --> 00:27:20,349
of the operating system in

590
00:27:20,349 --> 00:27:24,759
classical schools brackets I make an aside on

591
00:27:24,759 --> 00:27:27,159
this thing here that this is a bit of a

592
00:27:27,159 --> 00:27:30,209
reorganization that they have done and have

593
00:27:30,209 --> 00:27:33,339
introduced four modes of

594
00:27:33,339 --> 00:27:36,309
operation within arm v8

595
00:27:36,309 --> 00:27:40,179
then premise  and arm it all

596
00:27:40,179 --> 00:27:43,209
architectures before arm year have

597
00:27:43,209 --> 00:27:45,459
added various pieces of

598
00:27:45,459 --> 00:27:47,289
execution mode they have added trust zone for

599
00:27:47,289 --> 00:27:49,539
example that the mode for the bucket

600
00:27:49,539 --> 00:27:51,339
the monitor which is used for various

601
00:27:51,339 --> 00:27:53,799
things is another thing they have introduced

602
00:27:53,799 --> 00:27:55,889
are some extensions to virtualize

603
00:27:55,889 --> 00:27:59,649
and  they made a few years later of

604
00:27:59,649 --> 00:28:01,929
patches here and there is another thing that has

605
00:28:01,929 --> 00:28:02,940
always been quite unhappy

606
00:28:02,940 --> 00:28:05,319
d  in the arm architecture because it was born

607
00:28:05,319 --> 00:28:07,389
with the need to manage the internet

608
00:28:07,389 --> 00:28:10,809
very quickly it was that of the

609
00:28:10,809 --> 00:28:13,119
royal bank registers essentially

610
00:28:13,119 --> 00:28:14,769
when you entered the quality

611
00:28:14,769 --> 00:28:17,109
of interact management some

612
00:28:17,109 --> 00:28:19,659
hidden video directors you access

613
00:28:19,659 --> 00:28:21,759
other directors directors who are

614
00:28:21,759 --> 00:28:24,669
nominated directors  and this this model is

615
00:28:24,669 --> 00:28:26,469
quite complicated when you want to

616
00:28:26,469 --> 00:28:29,499
write a handler for an integer

617
00:28:29,499 --> 00:28:31,119
and here are a substantial change

618
00:28:31,119 --> 00:28:34,329
point about how things are handled and

619
00:28:34,329 --> 00:28:36,789
just I was telling you there are four

620
00:28:36,789 --> 00:28:38,069
modes of operation

621
00:28:38,069 --> 00:28:40,989
and then the level where the

622
00:28:40,989 --> 00:28:43,080
applications come

623
00:28:43,080 --> 00:28:48,510
zeros are executed l0 is practically what is the

624
00:28:48,510 --> 00:28:52,260
user space ring essentially

625
00:28:52,260 --> 00:28:54,179
you can't do big things in the system

626
00:28:54,179 --> 00:28:59,279
el 1 instead haring the kernel inside a

627
00:28:59,279 --> 00:29:04,549
hypervisor and almost a small asterisk

628
00:29:04,700 --> 00:29:07,309
l2 dot l year of the hypervisor

629
00:29:07,309 --> 00:29:10,890
normally when doing a  boot we

630
00:29:10,890 --> 00:29:14,700
can find that the system itself is in

631
00:29:14,700 --> 00:29:18,510
l2 means that the system is capable of

632
00:29:18,510 --> 00:29:20,730
booting  are a hypervisor but not always so

633
00:29:20,730 --> 00:29:22,409
you have to check if you are

634
00:29:22,409 --> 00:29:24,750
writing code to start the

635
00:29:24,750 --> 00:29:29,120
imber metal system and because essentially if

636
00:29:29,120 --> 00:29:32,580
we find the same yes we find that we are

637
00:29:32,580 --> 00:29:36,360
in mode the two say that we are

638
00:29:36,360 --> 00:29:38,220
authors our flesh can

639
00:29:38,220 --> 00:29:40,019
eventually virtualize so if a  linux kernel

640
00:29:40,019 --> 00:29:41,760
eventually initialize the part

641
00:29:41,760 --> 00:29:44,909
of kvm to make virtualization

642
00:29:44,909 --> 00:29:46,919
if we are inside l 1 it means that

643
00:29:46,919 --> 00:29:48,960
for some reason we

644
00:29:48,960 --> 00:29:51,179
cannot virtualize or we are inside

645
00:29:51,179 --> 00:29:53,419
a virtual virtualization road

646
00:29:53,419 --> 00:29:57,299
and therefore we are inside a hypervisor and

647
00:29:57,299 --> 00:29:59,399
then there  it is another layer point there is precisely

648
00:29:59,399 --> 00:30:02,610
the hypervisor layer and finally there is ll between

649
00:30:02,610 --> 00:30:05,940
which is the beauty of the execution of the tra

650
00:30:05,940 --> 00:30:06,659
stone

651
00:30:06,659 --> 00:30:09,450
so the inside of the device

652
00:30:09,450 --> 00:30:11,909
may already be running a

653
00:30:11,909 --> 00:30:15,870
monitor monitor that is there that offers us

654
00:30:15,870 --> 00:30:18,289
some services it

655
00:30:18,289 --> 00:30:21,799
seems  that the thing there are 16 is initials

656
00:30:21,799 --> 00:30:24,539
smm in theory that it is indeed possible

657
00:30:24,539 --> 00:30:26,250
to always have the code running for

658
00:30:26,250 --> 00:30:30,240
now in the system between the  various things

659
00:30:30,240 --> 00:30:32,100
cannot be interesting we can ask

660
00:30:32,100 --> 00:30:34,230
other questions we can also ask ourselves

661
00:30:34,230 --> 00:30:36,929
about the fact that we take a

662
00:30:36,929 --> 00:30:38,760
device we think we have

663
00:30:38,760 --> 00:30:40,740
total control over this device but in

664
00:30:40,740 --> 00:30:42,240
reality it may be that there is a

665
00:30:42,240 --> 00:30:44,159
firmware and in destitution on our

666
00:30:44,159 --> 00:30:51,029
cpi that does the  comfortable and each level

667
00:30:51,029 --> 00:30:52,860
can call functions in the upper level

668
00:30:52,860 --> 00:30:55,590


669
00:30:55,590 --> 00:30:58,650
and then l0 relaunching there is the slides

670
00:30:58,650 --> 00:31:01,950
first can call the fars schael to

671
00:31:01,950 --> 00:31:07,919
the kernel via sv c is l 1 can make

672
00:31:07,919 --> 00:31:11,210
calls to the hypervisor via

673
00:31:11,210 --> 00:31:15,210
an instruction calls hvc and hypervisor

674
00:31:15,210 --> 00:31:17,760
can make calls to the monitor bucket

675
00:31:17,760 --> 00:31:21,049
via mvc there is this thing more levels

676
00:31:21,049 --> 00:31:26,070
and thirsty what was and axes

677
00:31:26,070 --> 00:31:27,240
obviously when a call is made

678
00:31:27,240 --> 00:31:29,309
from the tv svc what happens

679
00:31:29,309 --> 00:31:32,580
is that an interrupt is generated and

680
00:31:32,580 --> 00:31:34,080
then passes our

681
00:31:34,080 --> 00:31:37,620
distribution state passes by  and at 0 and 1

682
00:31:37,620 --> 00:31:40,380
we pass directly to the takhar arm in

683
00:31:40,380 --> 00:31:43,110
when this happens there is no longer that

684
00:31:43,110 --> 00:31:44,460
mess that I anticipated before

685
00:31:44,460 --> 00:31:47,039
the king's banks  gisters but we have a

686
00:31:47,039 --> 00:31:49,710
high-chair series of registers accessible

687
00:31:49,710 --> 00:31:54,149
with well-defined names and there are for

688
00:31:54,149 --> 00:31:56,340
each level of execution there are

689
00:31:56,340 --> 00:31:59,190
some registers are duplicated and they are

690
00:31:59,190 --> 00:32:01,520
recognizable because they are called

691
00:32:01,520 --> 00:32:04,860
register name underscore and at zero

692
00:32:04,860 --> 00:32:08,789
strand escor numbers l 1 and  what else then

693
00:32:08,789 --> 00:32:11,549
let's see what else to specify about this

694
00:32:11,549 --> 00:32:15,960
thing and caine we are affixed to this

695
00:32:15,960 --> 00:32:18,049
thing

696
00:32:20,429 --> 00:32:22,830
next slide and we now arrive towards

697
00:32:22,830 --> 00:32:26,279
the end of the talk how to start an

698
00:32:26,279 --> 00:32:31,860
arm v8 system and then it can

699
00:32:31,860 --> 00:32:34,470
always be that classic you but possible

700
00:32:34,470 --> 00:32:37,799
to boot with you  but it could be

701
00:32:37,799 --> 00:32:39,809
that we find that the system starts with

702
00:32:39,809 --> 00:32:44,190
fast boot or otherwise and

703
00:32:44,190 --> 00:32:48,260
the official specifications of arm also talk about it and

704
00:32:48,260 --> 00:32:51,929
there could be web and we are

705
00:32:51,929 --> 00:32:56,630
also on arm devices but what

706
00:32:56,630 --> 00:32:59,700
can then be that your

707
00:32:59,700 --> 00:33:02,370
system has launched from  a beautiful guelphs and

708
00:33:02,370 --> 00:33:03,690
the bootloader could be a

709
00:33:03,690 --> 00:33:08,190
beautiful exe file and they also the

710
00:33:08,190 --> 00:33:11,850
parenthesis commander to use wefi but

711
00:33:11,850 --> 00:33:14,490
so far I have not yet seen  o hardware with

712
00:33:14,490 --> 00:33:16,889
wefi probably the hardware on

713
00:33:16,889 --> 00:33:20,429
with wefi will be used on windows phones

714
00:33:20,429 --> 00:33:23,760
and servers so what you see

715
00:33:23,760 --> 00:33:25,380
around because you can

716
00:33:25,380 --> 00:33:27,840
find commercially generally fast

717
00:33:27,840 --> 00:33:31,110
boot that many might be

718
00:33:31,110 --> 00:33:34,970
familiar with if you work with android and

719
00:33:34,970 --> 00:33:38,460
that's it in reality  non profit with the

720
00:33:38,460 --> 00:33:39,840
presentation of her it cannot be

721
00:33:39,840 --> 00:33:50,070
also the questions you can of a bit of things

722
00:33:50,070 --> 00:33:52,080
in reality but that's ok let's start with

723
00:33:52,080 --> 00:33:58,639
one you said that when

724
00:33:58,639 --> 00:34:00,360
practically there are instructions

725
00:34:00,360 --> 00:34:03,179
to do what now I am talking about

726
00:34:03,179 --> 00:34:05,820
76 so  forgive me the jumps are

727
00:34:05,820 --> 00:34:08,819
managed through basically

728
00:34:08,819 --> 00:34:14,699
the relative jumps right

729
00:34:14,699 --> 00:34:17,909
yes ok yes there are actually what you do is

730
00:34:17,909 --> 00:34:20,339
that it is possible to make the jump

731
00:34:20,339 --> 00:34:23,159
has an address saved on a register

732
00:34:23,159 --> 00:34:26,250
point will also jumper staton offset

733
00:34:26,250 --> 00:34:29,399
here is  is a jumper with respect to nov yes ok in the

734
00:34:29,399 --> 00:34:31,440
perspective of a track pie therefore with

735
00:34:31,440 --> 00:34:34,109
position independent closed which is in

736
00:34:34,109 --> 00:34:35,369
theory a protection that should

737
00:34:35,369 --> 00:34:36,899
avoid p  roprio the possibility of

738
00:34:36,899 --> 00:34:39,449
knowing a priori the addresses in which

739
00:34:39,449 --> 00:34:40,918
certain functions are found in order

740
00:34:40,918 --> 00:34:42,480
to jump over rock

741
00:34:42,480 --> 00:34:45,149
and in your opinion this does not have a

742
00:34:45,149 --> 00:34:47,040
negative impact on the safety

743
00:34:47,040 --> 00:34:50,520
of executable binaries you mean the point the

744
00:34:50,520 --> 00:34:54,089
problem of the jump slr and

745
00:34:54,089 --> 00:34:55,980
basically randomized pai  the

746
00:34:55,980 --> 00:34:58,470
position of the offset of which is found

747
00:34:58,470 --> 00:35:00,089
in the image of the memory binary so

748
00:35:00,089 --> 00:35:01,560
that if you do not know where a

749
00:35:01,560 --> 00:35:03,060
certain code is in theory you cannot

750
00:35:03,060 --> 00:35:05,400
jump over it, however

751
00:35:05,400 --> 00:35:08,130
the relative to that point i with respect

752
00:35:08,130 --> 00:35:09,900
to the position in which they are always if they

753
00:35:09,900 --> 00:35:12,330
are  i bytes back hicks biden

754
00:35:12,330 --> 00:35:14,430
ok I understand the point but the question

755
00:35:14,430 --> 00:35:16,260
also in question simplicity in the sense

756
00:35:16,260 --> 00:35:20,130
that having a relative jump allows us

757
00:35:20,130 --> 00:35:21,690
to have within a single apcom

758
00:35:21,690 --> 00:35:24,120
without running other machine cycles to

759
00:35:24,120 --> 00:35:26,340
load the address indirectly make

760
00:35:26,340 --> 00:35:28,440
a jump to a  nearby thing

761
00:35:28,440 --> 00:35:30,150
otherwise where to load the address

762
00:35:30,150 --> 00:35:32,880
you will have to jump also maybe for

763
00:35:32,880 --> 00:35:35,940
inside the function and then to that

764
00:35:35,940 --> 00:35:37,410
point could jump

765
00:35:37,410 --> 00:35:39,240
I hope it remains cycles is an

766
00:35:39,240 --> 00:35:48,680
efficiency option I understand the link in link

767
00:35:53,750 --> 00:36:00,270
register another plane the

768
00:36:00,270 --> 00:36:04,230
registered link can write in it

769
00:36:04,230 --> 00:36:06,960
is very accessible so let's say that

770
00:36:06,960 --> 00:36:10,470
if I can write link directors and then

771
00:36:10,470 --> 00:36:12,450
I can return the same thing that I will do

772
00:36:12,450 --> 00:36:16,860
a  musa link recorded one 2

773
00:36:16,860 --> 00:36:18,510
instructions to do the same thing in

774
00:36:18,510 --> 00:36:21,900
one and ninth I don't understand the observation

775
00:36:21,900 --> 00:36:25,740
that is when we do the bull lr in the pool

776
00:36:25,740 --> 00:36:26,730
at 6 sets

777
00:36:26,730 --> 00:36:28,980
the same thing we can do in two

778
00:36:28,980 --> 00:36:32,520
instructions by changing the air

779
00:36:32,520 --> 00:36:35,430
essentially to ok it's clear  but in

780
00:36:35,430 --> 00:36:37,950
reality we are interested in

781
00:36:37,950 --> 00:36:39,660
simply returning to the caller

782
00:36:39,660 --> 00:36:42,810
if we are directly the address

783
00:36:42,810 --> 00:36:45,740
where on where to go back into the link

784
00:36:45,740 --> 00:36:51,000
reacted care the link record other

785
00:36:51,000 --> 00:36:54,060
calls within that function but then

786
00:36:54,060 --> 00:36:55,980
we just need to go back with

787
00:36:55,980 --> 00:36:57,840
wright is another thing  I wanted to

788
00:36:57,840 --> 00:37:01,320
ask for said that arm v7 are we

789
00:37:01,320 --> 00:37:03,390
hope completely incompatible with a

790
00:37:03,390 --> 00:37:05,070
rubrichette means there is no

791
00:37:05,070 --> 00:37:09,570
salles dis  tructions such as in x86 64 in which

792
00:37:09,570 --> 00:37:13,290
the gloomy execute the 386 for example that is

793
00:37:13,290 --> 00:37:17,089
you cannot have a 32-bit subset inside

794
00:37:17,089 --> 00:37:20,099
essentially it happens that the more

795
00:37:20,099 --> 00:37:22,650
then the c more supports both

796
00:37:22,650 --> 00:37:24,690
the thumb and d instructions to the colleagues and

797
00:37:24,690 --> 00:37:27,390
coordinate the arm instructions at 32  bit if

798
00:37:27,390 --> 00:37:28,849
the echo worthy of the new instructions

799
00:37:28,849 --> 00:37:32,250
when it is, however, what happens there is

800
00:37:32,250 --> 00:37:34,589
no inter working i.e. I cannot

801
00:37:34,589 --> 00:37:38,130
freely jump from 32 bit arona

802
00:37:38,130 --> 00:37:40,230
codes to bit arbitrator codes

803
00:37:40,230 --> 00:37:42,960
there must be a kontek switch executed

804
00:37:42,960 --> 00:37:45,210
by the operating system what  it happens

805
00:37:45,210 --> 00:37:47,670
is that the part of the coding is

806
00:37:47,670 --> 00:37:49,289
really changed into wine theory and

807
00:37:49,289 --> 00:37:52,619
just turned off on the silicon so it

808
00:37:52,619 --> 00:37:54,390
should not consume evin

809
00:37:54,390 --> 00:37:59,970
normally run rip you 64 bit 2 cat and

810
00:37:59,970 --> 00:38:02,670
quickly the stack then interesting

811
00:38:02,670 --> 00:38:05,789
dual there is one for mode use one

812
00:38:05,789 --> 00:38:09,990
for when against  the bits are off and the sky

813
00:38:09,990 --> 00:38:13,440
is then musician pointer usable and

814
00:38:13,440 --> 00:38:15,930
from user processes then there is precisely the

815
00:38:15,930 --> 00:38:18,270
stack pointer that we hear first tv

816
00:38:18,270 --> 00:38:19,799
is that it is useful when today some

817
00:38:19,799 --> 00:38:21,539
interruptions  ni and back from the internet

818
00:38:21,539 --> 00:38:24,150
again the magical values and there is no more

819
00:38:24,150 --> 00:38:27,809
mobs pc all'air it seems to me that it was that

820
00:38:27,809 --> 00:38:31,260
but there is and rec and rec characters and

821
00:38:31,260 --> 00:38:31,799
basements

822
00:38:31,799 --> 00:38:34,410
exactly the country the ecology jim it seems that

823
00:38:34,410 --> 00:38:37,970
once it was done  by setting a beat

824
00:38:37,970 --> 00:38:40,740
drawing inside the mod

825
00:38:40,740 --> 00:38:44,849
yes yes yes there are three in the v7 weapon there were

826
00:38:44,849 --> 00:38:47,640
three types of different values to be

827
00:38:47,640 --> 00:38:51,210
returned yes no not simplified one of the

828
00:38:51,210 --> 00:38:52,920
best and really big was the

829
00:38:52,920 --> 00:38:54,720
management of the whole they just have it both

830
00:38:54,720 --> 00:38:57,240
mythized and year there are

831
00:38:57,240 --> 00:39:01,200
obviously limitations further south of team ways

832
00:39:01,200 --> 00:39:03,349
in which you can work

833
00:39:03,349 --> 00:39:05,309
obviously it is not possible to have

834
00:39:05,309 --> 00:39:08,539
64 bit matched if the 32 bit carnet

835
00:39:08,539 --> 00:39:13,319
and it is not possible even if it is in

836
00:39:13,319 --> 00:39:15,029
what their called bucket and s

837
00:39:15,029 --> 00:39:18,690
have  a hypervisor running i.e.

838
00:39:18,690 --> 00:39:20,099
you can have cure monitor and have a

839
00:39:20,099 --> 00:39:22,170
hypervisor scroll the if closed

840
00:39:22,170 --> 00:39:26,279
inside a hypervisor and the rest has been

841
00:39:26,279 --> 00:39:29,370
done enough reordering and you can have the

842
00:39:29,370 --> 00:39:32,070
upper year there is 64 bits you can

843
00:39:32,070 --> 00:39:34,290
have it in any lower layer the

844
00:39:34,290 --> 00:39:38,490
code 32  bit and indeed more the parenthesis

845
00:39:38,490 --> 00:39:40,740
I was saying before that they have not made too many

846
00:39:40,740 --> 00:39:43,770
messes with the abi actually in the draft

847
00:39:43,770 --> 00:39:48,540
of their a beach is the support of the

848
00:39:48,540 --> 00:39:51,840
modes what type you are in arm 64 but in

849
00:39:51,840 --> 00:39:54,840
reality it is using long 32 bit

850
00:39:54,840 --> 00:39:57,030
pointer 32 bit I think  that

851
00:39:57,030 --> 00:39:58,620
the room that wants to ape east

852
00:39:58,620 --> 00:40:02,040
x32 is something but in fact I have never seen it

853
00:40:02,040 --> 00:40:03,720
around and currently to document in

854
00:40:03,720 --> 00:40:05,490
beta I do not know if the thing has evolved and

855
00:40:05,490 --> 00:40:16,950
someone was really interested I

856
00:40:16,950 --> 00:40:21,600
could know at a security level and at a

857
00:40:21,600 --> 00:40:23,370
level  support of the operating system

858
00:40:23,370 --> 00:40:24,960


859
00:40:24,960 --> 00:40:27,120
what can be problems or

860
00:40:27,120 --> 00:40:30,740
even possibly advantages

861
00:40:30,740 --> 00:40:33,930
compared to other architecture to the notaries

862
00:40:33,930 --> 00:40:38,520
palate of trust john and also of pa

863
00:40:38,520 --> 00:40:41,820
weisz there is at the level of

864
00:40:41,820 --> 00:40:46,050
free software if it has something to do and finally

865
00:40:46,050 --> 00:40:50,760
you also had  talked about a firmware that

866
00:40:50,760 --> 00:40:56,280
could turn that a movie that could

867
00:40:56,280 --> 00:40:58,789
shoot but

868
00:40:58,789 --> 00:41:01,910
not secretly and therefore I don't know how to spy or

869
00:41:01,910 --> 00:41:06,199
anything else then what is the situation of

870
00:41:06,199 --> 00:41:09,949
free software on arm v8 well apart from

871
00:41:09,949 --> 00:41:12,439
karma v  uoto I said to myself initially it has

872
00:41:12,439 --> 00:41:14,179
already been out for some time and now in

873
00:41:14,179 --> 00:41:16,549
fact large mass is available etc.

874
00:41:16,549 --> 00:41:20,059


875
00:41:20,059 --> 00:41:22,519


876
00:41:22,519 --> 00:41:24,979


877
00:41:24,979 --> 00:41:26,779


878
00:41:26,779 --> 00:41:28,179
well

879
00:41:28,179 --> 00:41:31,309
obviously if one wanted to make

880
00:41:31,309 --> 00:41:35,539
well-located hardware it is not

881
00:41:35,539 --> 00:41:37,729
overly complicated in the sense that it

882
00:41:37,729 --> 00:41:40,729
is possible to decide that in the money

883
00:41:40,729 --> 00:41:42,410
let's say that there is a less sympathetic manufacturer who

884
00:41:42,410 --> 00:41:45,049
made las barry paim style cards

885
00:41:45,049 --> 00:41:47,059
a little less city that could

886
00:41:47,059 --> 00:41:50,689
decide to say tie you to a level  el

887
00:41:50,689 --> 00:41:54,229
1 and he could have access for the rest

888
00:41:54,229 --> 00:41:57,589
on the hardware in brackets and all

889
00:41:57,589 --> 00:41:59,569
this execution hierarchy

890
00:41:59,569 --> 00:42:02,929
also allows you to route interrupts

891
00:42:02,929 --> 00:42:05,140
from one level to another so a

892
00:42:05,140 --> 00:42:08,179
possible that a level

893
00:42:08,179 --> 00:42:11,329
takes on some interruptions and doesn't

894
00:42:11,329 --> 00:42:13,429
do them  transpire at levels below the

895
00:42:13,429 --> 00:42:16,069
less privileged ones or even it can

896
00:42:16,069 --> 00:42:18,589
emulate hardware and cause

897
00:42:18,589 --> 00:42:20,959
vir interruptions  tuals that seem not to be

898
00:42:20,959 --> 00:42:22,729
generated on the hardware less

899
00:42:22,729 --> 00:42:26,059
privileged levels this is a bit the

900
00:42:26,059 --> 00:42:28,519
producers' imagination what will happen is

901
00:42:28,519 --> 00:42:31,729
soon Guelph point there is also t

902
00:42:31,729 --> 00:42:32,839
year core it seems to me that it is

903
00:42:32,839 --> 00:42:34,880
a free implementation and therefore it is

904
00:42:34,880 --> 00:42:35,809
a new lecithin just

905
00:42:35,809 --> 00:42:37,849
particularly  web can also use

906
00:42:37,849 --> 00:42:39,829
lettiano with in brackets it seems to me that

907
00:42:39,829 --> 00:42:44,329
linaro fee enough year runs then it did not

908
00:42:44,329 --> 00:42:46,339
cost its use

909
00:42:46,339 --> 00:42:49,549
but in fact it is more likely that you see

910
00:42:49,549 --> 00:42:52,519
on servers or devices such as windows

911
00:42:52,519 --> 00:42:53,719
phone

912
00:42:53,719 --> 00:42:55,039
I am not an expert windows phone it may

913
00:42:55,039 --> 00:42:56,150
also be that it is not  true so

914
00:42:56,150 --> 00:43:01,170
what corrects me the rest

915
00:43:01,170 --> 00:43:04,079
are not armored in a particular way

916
00:43:04,079 --> 00:43:08,030
currently destructive of circulation it

917
00:43:18,680 --> 00:43:22,950
is however it is supported by linux being

918
00:43:22,950 --> 00:43:24,569
however also one thing is sponsored

919
00:43:24,569 --> 00:43:27,359
the di naro have taken care to

920
00:43:27,359 --> 00:43:30,660
support well also wefi in brackets

921
00:43:30,660 --> 00:43:33,059
in reality it is the work of

922
00:43:33,059 --> 00:43:36,420
linux support was done thanks to the help of

923
00:43:36,420 --> 00:43:38,849
arm who immediately started working on

924
00:43:38,849 --> 00:43:40,589
g cc they started right away and the

925
00:43:40,589 --> 00:43:43,470
they

926
00:43:43,470 --> 00:43:45,420
had already been working on the

927
00:43:45,420 --> 00:43:47,670
kernel before there was any

928
00:43:47,670 --> 00:43:49,619
hardware available in

929
00:43:49,619 --> 00:43:51,510
circulation and they had also

930
00:43:51,510 --> 00:43:53,609
made available at

931
00:43:53,609 --> 00:43:55,140
the time things like the fondation model which

932
00:43:55,140 --> 00:43:56,750
was mindless their

933
00:43:56,750 --> 00:43:58,349
official emulator  with which it was possible to

934
00:43:58,349 --> 00:44:01,049
reproduce one of them there can

935
00:44:01,049 --> 00:44:03,660
therefore in reality there is a good

936
00:44:03,660 --> 00:44:05,069
intention however to support ours

937
00:44:05,069 --> 00:44:09,480
that actually most of

938
00:44:09,480 --> 00:44:12,210
the arm processors mind you are being

939
00:44:12,210 --> 00:44:15,270
used with linux around

940
00:44:15,270 --> 00:44:16,980
so there is no intention to

941
00:44:16,980 --> 00:44:19,500
hinder the  adoption of linux on these

942
00:44:19,500 --> 00:44:21,780
systems is more a question an interest

943
00:44:21,780 --> 00:44:24,540
on I want to do material things and what

944
00:44:24,540 --> 00:44:36,089
can I do with a v8 still exists trans

945
00:44:36,089 --> 00:44:43,079
zone you can be beautiful and l3 because from

946
00:44:43,079 --> 00:44:45,210
what I understand it worked a little

947
00:44:45,210 --> 00:44:47,819
different at least from a documentation that

948
00:44:47,819 --> 00:44:50,099
I was able to read about it let's

949
00:44:50,099 --> 00:44:52,349
say as if it were a parallel thing

950
00:44:52,349 --> 00:44:55,079
not above which lives on its own but

951
00:44:55,079 --> 00:44:57,480
which could not be c  call from

952
00:44:57,480 --> 00:45:00,660
everything else is no offers i want a call

953
00:45:00,660 --> 00:45:02,880
no this is well documented

954
00:45:02,880 --> 00:45:05,270
there was a very specific call that

955
00:45:05,270 --> 00:45:08,069
allows layers below to call

956
00:45:08,069 --> 00:45:10,589
trust features don i think a

957
00:45:10,589 --> 00:45:12,869
trash implementation could

958
00:45:12,869 --> 00:45:13,990
be to

959
00:45:13,990 --> 00:45:17,020
save i know keys  password anything else in

960
00:45:17,020 --> 00:45:19,990
a dedicated area of the hardware then the

961
00:45:19,990 --> 00:45:22,470
operating system that there is a running

962
00:45:22,470 --> 00:45:24,790
called season to do those things

963
00:45:24,790 --> 00:45:27,460
that must be trust and the

964
00:45:27,460 --> 00:45:29,920
fire season the tasks is not a thing that lives

965
00:45:29,920 --> 00:45:32,140
on its own

966
00:45:32,140 --> 00:45:35,010
certain if there  it was someone who did

967
00:45:35,010 --> 00:45:38,380
the malicious hardware that wants us to steal

968
00:45:38,380 --> 00:45:40,600
data pro in mind rhinestone area is a good

969
00:45:40,600 --> 00:45:43,210
starting point for or not this is not

970
00:45:43,210 --> 00:45:45,820
a peculiarity of arm and even on

971
00:45:45,820 --> 00:45:46,810
intel systems

972
00:45:46,810 --> 00:45:51,000
the thing is spreading enough

