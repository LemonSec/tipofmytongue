1
00:00:00,920 --> 00:00:03,449
good day everyone are the

2
00:00:03,449 --> 00:00:07,140
goals and I deal in the life of

3
00:00:07,140 --> 00:00:09,269
embedded distributions and I contribute to the

4
00:00:09,269 --> 00:00:12,300
project that I am here to talk to you

5
00:00:12,300 --> 00:00:14,969
about systems that many of you may

6
00:00:14,969 --> 00:00:17,220
not like but in reality we can see

7
00:00:17,220 --> 00:00:18,539
how we could like it

8
00:00:18,539 --> 00:00:21,449
because it has so many  nice features then

9
00:00:21,449 --> 00:00:24,570
first of all let's start on why

10
00:00:24,570 --> 00:00:27,990
system di system was born a simple paradigm was born

11
00:00:27,990 --> 00:00:30,480
start less and

12
00:00:30,480 --> 00:00:33,360
more in parallel

13
00:00:33,360 --> 00:00:35,790
the fundamental idea is that often when

14
00:00:35,790 --> 00:00:38,430
we make system c

15
00:00:38,430 --> 00:00:41,239
10,000 services participated that maybe we will never use

16
00:00:41,239 --> 00:00:44,340
maybe it could start that  I know on

17
00:00:44,340 --> 00:00:47,610
our laptop the ssh server when

18
00:00:47,610 --> 00:00:49,350
maybe we will never ssh our

19
00:00:49,350 --> 00:00:51,500
laptop and we do it once every

20
00:00:51,500 --> 00:00:57,239
two months is another thing that with this

21
00:00:57,239 --> 00:01:00,719
system b thought is that to replace the

22
00:01:00,719 --> 00:01:03,359
startup scripts because currently when

23
00:01:03,359 --> 00:01:05,939
a system with the  old classic

24
00:01:05,939 --> 00:01:08,549
part neet system starts launching

25
00:01:08,549 --> 00:01:11,330
a series of bash scripts that invoke

26
00:01:11,330 --> 00:01:15,299
100,000 times cup fed cup and quant'al

27
00:01:15,299 --> 00:01:17,520
tro to start

28
00:01:17,520 --> 00:01:20,610
and in fact if we look at a comparison

29
00:01:20,610 --> 00:01:24,390
between mac osx and linux we notice that when

30
00:01:24,390 --> 00:01:26,159
meco stern has finished starting the first

31
00:01:26,159 --> 00:01:29,520
pid the 150 is active while in the meantime

32
00:01:29,520 --> 00:01:31,470
more or less 2 thousand processes have already started,

33
00:01:31,470 --> 00:01:33,119
which may have already

34
00:01:33,119 --> 00:01:35,100
ended during  the boot of the linux machine

35
00:01:35,100 --> 00:01:35,630


36
00:01:35,630 --> 00:01:39,390
then in all this they also had

37
00:01:39,390 --> 00:01:41,100
some other nice ideas for example the

38
00:01:41,100 --> 00:01:43,409
possibility of creating dica the template

39
00:01:43,409 --> 00:01:46,520
and with templates and for example we can

40
00:01:46,520 --> 00:01:49,320
use the sense configuration file and

41
00:01:49,320 --> 00:01:52,470
make days in link template the data in

42
00:01:52,470 --> 00:01:54,329
order to  example to use the same

43
00:01:54,329 --> 00:01:56,130
configuration file for all virtual terminals

44
00:01:56,130 --> 00:01:58,619
that there are a machine in

45
00:01:58,619 --> 00:02:00,719
this way for example we can

46
00:02:00,719 --> 00:02:03,540
easily obtain for example the various

47
00:02:03,540 --> 00:02:05,310
ghettos start only when you

48
00:02:05,310 --> 00:02:07,229
switch and the terminal on a certain

49
00:02:07,229 --> 00:02:09,090
terminal does not start at  boot right away

50
00:02:09,090 --> 00:02:12,209
consuming memory and then visa systems

51
00:02:12,209 --> 00:02:13,500
also thought

52
00:02:13,500 --> 00:02:16,980
with transactions dependencies in mind and

53
00:02:16,980 --> 00:02:19,050
therefore virtually every service v  it

54
00:02:19,050 --> 00:02:21,090
is done with is started is

55
00:02:21,090 --> 00:02:22,650
part of its dependencies

56
00:02:22,650 --> 00:02:24,750
if it is started with

57
00:02:24,750 --> 00:02:26,070
a view to a transaction it has been the station

58
00:02:26,070 --> 00:02:30,470
is badly dumped and so on

59
00:02:30,470 --> 00:02:34,170
then system di is controllable via

60
00:02:34,170 --> 00:02:36,840
basketball loosening the

61
00:02:36,840 --> 00:02:39,390
increasingly preferred pc system also for

62
00:02:39,390 --> 00:02:43,320
its comfort and then re-hooking ourselves to

63
00:02:43,320 --> 00:02:45,450
what we said before system di

64
00:02:45,450 --> 00:02:49,170
has a small core and very numerous and there

65
00:02:49,170 --> 00:02:51,209
are really many in fact many

66
00:02:51,209 --> 00:02:52,860
think that the system of is a

67
00:02:52,860 --> 00:02:55,410
gigantic monster in reality it is not a

68
00:02:55,410 --> 00:02:58,350
small core and then there is a  suite is a suite

69
00:02:58,350 --> 00:03:01,980
of el for numerous and in any case in any

70
00:03:01,980 --> 00:03:04,140
case it also supports the old scripts yes

71
00:03:04,140 --> 00:03:07,980
xvi and therefore not so if we

72
00:03:07,980 --> 00:03:10,140
still have legacy things we can

73
00:03:10,140 --> 00:03:12,000
start them without problems

74
00:03:12,000 --> 00:03:13,590
I do not know if he mentioned it precisely on demand

75
00:03:13,590 --> 00:03:16,110
another of the nice features  and then and

76
00:03:16,110 --> 00:03:18,090
I will also talk about the socket bassac tv

77
00:03:18,090 --> 00:03:20,880
shows let's go on

78
00:03:20,880 --> 00:03:22,470
false myths there are also some false myths

79
00:03:22,470 --> 00:03:24,299
that I veil on the system precisely that is

80
00:03:24,299 --> 00:03:27,660
a single monstrous blog is not true  I am

81
00:03:27,660 --> 00:03:29,730
a big recco kit that then once

82
00:03:29,730 --> 00:03:32,790
compiled generated executable kisses and

83
00:03:32,790 --> 00:03:34,739
its libraries and the configuration file

84
00:03:34,739 --> 00:03:36,780
on the binary mot I read somewhere

85
00:03:36,780 --> 00:03:38,280
someone thought of cooperation are

86
00:03:38,280 --> 00:03:40,080
binaries that in reality they are not very

87
00:03:40,080 --> 00:03:42,299
simple files to edit to pass

88
00:03:42,299 --> 00:03:44,340
have a structure  similar to the

89
00:03:44,340 --> 00:03:46,110
desktop point that vaguely recalls that

90
00:03:46,110 --> 00:03:49,620
of the ini file system say

91
00:03:49,620 --> 00:03:50,519
network management impediments

92
00:03:50,519 --> 00:03:54,329
yes and no in the sense that if you use a

93
00:03:54,329 --> 00:03:56,250
redhat type system they also have to their

94
00:03:56,250 --> 00:03:57,930
network configuration system

95
00:03:57,930 --> 00:03:59,519
they have also rewritten between the

96
00:03:59,519 --> 00:04:02,489
management part but we are not  forced to

97
00:04:02,489 --> 00:04:04,920
use his yes sanges and the network can be

98
00:04:04,920 --> 00:04:06,570
used for example network manager or

99
00:04:06,570 --> 00:04:10,920
that thing that uses debian and then

100
00:04:10,920 --> 00:04:12,120
reads what point you stand for is not

101
00:04:12,120 --> 00:04:14,010
compatible with scripts yes xvi it is

102
00:04:14,010 --> 00:04:14,700
nothing true

103
00:04:14,700 --> 00:04:17,380
indeed even if it is present  a

104
00:04:17,380 --> 00:04:21,040
i leader chk borders red hat even

105
00:04:21,040 --> 00:04:23,170
b tries to do the parallel start-up

106
00:04:23,170 --> 00:04:26,290
so I also support quite well then

107
00:04:26,290 --> 00:04:28,360
the rumor turns around false myth  that

108
00:04:28,360 --> 00:04:30,910
systems prevent you from using daemons this is

109
00:04:30,910 --> 00:04:33,150
love

110
00:04:33,780 --> 00:04:37,240
is not true because system of a

111
00:04:37,240 --> 00:04:40,090
logging system that journal of but you

112
00:04:40,090 --> 00:04:43,260
can flank ar dislocates anything else

113
00:04:43,260 --> 00:04:46,360
and then also rumors that it felt

114
00:04:46,360 --> 00:04:48,340
good only on desktops what  which is

115
00:04:48,340 --> 00:04:50,260
nothing true because if you go to see the

116
00:04:50,260 --> 00:04:51,940
documentation an average of features

117
00:04:51,940 --> 00:04:54,910
dedicated to the configuration of apparmor

118
00:04:54,910 --> 00:04:58,330
selinux and so on, so it is

119
00:04:58,330 --> 00:05:01,030
also good for the server it is even better it is

120
00:05:01,030 --> 00:05:03,730
good for embedded systems as you

121
00:05:03,730 --> 00:05:06,220
can dedicate each process  a certain

122
00:05:06,220 --> 00:05:09,810
amount of resources and so on

123
00:05:09,810 --> 00:05:12,280
then I do not know if other false myths come to mind

124
00:05:12,280 --> 00:05:14,430
but that we talk about them after

125
00:05:14,430 --> 00:05:18,430
types of existing units introduces

126
00:05:18,430 --> 00:05:20,920
its own terminology in the sense

127
00:05:20,920 --> 00:05:22,660
that what once

128
00:05:22,660 --> 00:05:24,700
these scripts were have been replaced by

129
00:05:24,700 --> 00:05:26,860
various files of  configuration and

130
00:05:26,860 --> 00:05:29,380
the extension to the final in the name

131
00:05:29,380 --> 00:05:31,330
indicates what it is

132
00:05:31,330 --> 00:05:33,850
we have the system also almost

133
00:05:33,850 --> 00:05:36,100
hereditary as if it were object-oriented

134
00:05:36,100 --> 00:05:39,310
programming and the first thing is the units

135
00:05:39,310 --> 00:05:41,740
all that follows then are units in

136
00:05:41,740 --> 00:05:44,260
turn the units and describe the

137
00:05:44,260 --> 00:05:47,020
basic properties of something that invites

138
00:05:47,020 --> 00:05:49,180
managed by systems then we have the

139
00:05:49,180 --> 00:05:51,370
services the services are the services that

140
00:05:51,370 --> 00:05:53,020
are normally made to start at

141
00:05:53,020 --> 00:05:57,340
boot of the machine and therefore have

142
00:05:57,340 --> 00:05:58,990
the property type  of which executable they

143
00:05:58,990 --> 00:06:01,450
invoke they have the property to decide

144
00:06:01,450 --> 00:06:03,760
if type vote me have not immediately

145
00:06:03,760 --> 00:06:07,450
remain persistent and anything else then

146
00:06:07,450 --> 00:06:09,610
we have the point socket i.so which

147
00:06:09,610 --> 00:06:13,270
indicate a service that is activated

148
00:06:13,270 --> 00:06:15,400
through activations via socket in the sense

149
00:06:15,400 --> 00:06:16,560
that

150
00:06:16,560 --> 00:06:20,250
ssh of point socket is fine  it means that it

151
00:06:20,250 --> 00:06:22,350
is similarly as ynet did of that

152
00:06:22,350 --> 00:06:24,150
when traffic arrives on port

153
00:06:24,150 --> 00:06:28,400
22 ssh is activated then we have the six

154
00:06:28,400 --> 00:06:32,850
in mount mounts are the mount points

155
00:06:32,850 --> 00:06:35,700
managed by the system of f stub has not

156
00:06:35,700 --> 00:06:38,100
been abolished but is joined by

157
00:06:38,100 --> 00:06:40,889
these mounts essentially for  each

158
00:06:40,889 --> 00:06:43,770
amount point there is a description file

159
00:06:43,770 --> 00:06:44,940
with its options

160
00:06:44,940 --> 00:06:48,570
then we have the auto mounts that inherit

161
00:06:48,570 --> 00:06:50,790
Ottoman checkers one more property  that

162
00:06:50,790 --> 00:06:52,620
essentially the mount is performed

163
00:06:52,620 --> 00:06:54,419
at the first time the service is

164
00:06:54,419 --> 00:06:57,270
accessed at the mount point so the

165
00:06:57,270 --> 00:06:59,100
mount does not take place during boot but

166
00:06:59,100 --> 00:07:01,410
is sent back only when needed

167
00:07:01,410 --> 00:07:04,080
and then we have the targets the targets

168
00:07:04,080 --> 00:07:06,900
conceptually represent

169
00:07:06,900 --> 00:07:10,260
something similar revel multi user precisely

170
00:07:10,260 --> 00:07:12,330
target is  the target that is reached

171
00:07:12,330 --> 00:07:14,370
by the system of the system when we have

172
00:07:14,370 --> 00:07:17,540
between a multi-user input

173
00:07:18,000 --> 00:07:19,820
now we pass a bit

174
00:07:19,820 --> 00:07:21,930
to the system administration with an

175
00:07:21,930 --> 00:07:25,530
important public system is system ctl

176
00:07:25,530 --> 00:07:29,130
system ctl goes to interact with

177
00:07:29,130 --> 00:07:31,500
system systems to the user and allows us to

178
00:07:31,500 --> 00:07:34,430
operate on services  and on the various units

179
00:07:34,430 --> 00:07:36,600
trivially to see the status the

180
00:07:36,600 --> 00:07:39,300
system you can use cta l systems without

181
00:07:39,300 --> 00:07:42,479
any arguments and he will print a

182
00:07:42,479 --> 00:07:44,400
nice screen with all the

183
00:07:44,400 --> 00:07:47,160
services status with written in red what has

184
00:07:47,160 --> 00:07:50,190
failed and why etc.

185
00:07:50,190 --> 00:07:51,690
then if you want to investigate some

186
00:07:51,690 --> 00:07:55,610
specific service  you can use system

187
00:07:55,610 --> 00:07:59,430
ctl systems ctl status not me services but

188
00:07:59,430 --> 00:08:00,500
then we will see later

189
00:08:00,500 --> 00:08:03,780
if we want it does  r starting a service the

190
00:08:03,780 --> 00:08:05,340
fairly trivial thing just do

191
00:08:05,340 --> 00:08:08,910
the ctl start system was point service and the

192
00:08:08,910 --> 00:08:12,030
brand service in invoked you have to

193
00:08:12,030 --> 00:08:13,410
pay attention that you must always put

194
00:08:13,410 --> 00:08:14,740
the extension

195
00:08:14,740 --> 00:08:16,690
of the type so if in fact

196
00:08:16,690 --> 00:08:21,610
starting apache it will be ctl start system

197
00:08:21,610 --> 00:08:24,970
capacity point service or http point

198
00:08:24,970 --> 00:08:26,530
service in

199
00:08:26,530 --> 00:08:28,030
addition to this between status if

200
00:08:28,030 --> 00:08:30,370
other commands are not available such as stop

201
00:08:30,370 --> 00:08:33,099
reload re start between the re start that

202
00:08:33,099 --> 00:08:35,860
respectively stops in the lo

203
00:08:35,860 --> 00:08:38,200
killah no service request reloading the

204
00:08:38,200 --> 00:08:41,020
configuration request reloading

205
00:08:41,020 --> 00:08:42,458
the configuration and if it is not

206
00:08:42,458 --> 00:08:44,410
possible to re start or try to

207
00:08:44,410 --> 00:08:46,870
stop and  so on there are numerous

208
00:08:46,870 --> 00:08:47,950
there is also a nice one that I have not

209
00:08:47,950 --> 00:08:50,110
indicated here which islands it that

210
00:08:50,110 --> 00:08:52,510
essentially terminates all the services

211
00:08:52,510 --> 00:08:54,459
that are not essential to make

212
00:08:54,459 --> 00:08:56,080
a certain service go by isolating the

213
00:08:56,080 --> 00:08:59,220
system from that service

214
00:08:59,220 --> 00:09:03,040
then instead for the diagnostics we have

215
00:09:03,040 --> 00:09:04,990
precisely systems ctl status

216
00:09:04,990 --> 00:09:08,470
if we do system ctl status point sa

217
00:09:08,470 --> 00:09:11,230
tuscus service appoint  o view the

218
00:09:11,230 --> 00:09:12,640
status of the service for example if the

219
00:09:12,640 --> 00:09:15,720
service has terminated badly tc vera

220
00:09:15,720 --> 00:09:19,270
will open feild and maybe the status with which it

221
00:09:19,270 --> 00:09:21,029
came out and also maybe a line

222
00:09:21,029 --> 00:09:23,140
of the last line that they appeared in the

223
00:09:23,140 --> 00:09:24,880
system log

224
00:09:24,880 --> 00:09:26,589
if just as I said before if we want to

225
00:09:26,589 --> 00:09:27,910
view  the state of the whole

226
00:09:27,910 --> 00:09:30,190
system we use system ctl annoys

227
00:09:30,190 --> 00:09:34,630
arguments when instead we want to

228
00:09:34,630 --> 00:09:37,089
analyze things more we have

229
00:09:37,089 --> 00:09:39,370
journal ctl that goes to interrogate the

230
00:09:39,370 --> 00:09:41,920
system journal that this this

231
00:09:41,920 --> 00:09:45,940
thing that joins the neet system

232
00:09:45,940 --> 00:09:48,640
is then what was said and

233
00:09:48,640 --> 00:09:50,500
then many writings  cano journal about

234
00:09:50,500 --> 00:09:53,110
why it uses binary logs and this

235
00:09:53,110 --> 00:09:54,790
somewhat unpleasant thing is actually

236
00:09:54,790 --> 00:09:57,579
understandable but if you go and see

237
00:09:57,579 --> 00:09:59,260
all the options it

238
00:09:59,260 --> 00:10:01,360
offers if you realize that the

239
00:10:01,360 --> 00:10:04,450
reason for choosing the ordinary to

240
00:10:04,450 --> 00:10:06,490
allow you to make then advanced to the

241
00:10:06,490 --> 00:10:11,200
log for example here we have for example the

242
00:10:11,200 --> 00:10:14,079
first we can do basic basic

243
00:10:14,079 --> 00:10:16,240
we can do less f to do as

244
00:10:16,240 --> 00:10:19,329
you will do the less f on  a log then we can

245
00:10:19,329 --> 00:10:21,640
do so saying since he until

246
00:10:21,640 --> 00:10:24,459
so you can say like show me all the

247
00:10:24,459 --> 00:10:26,370
logs from yesterday to today

248
00:10:26,370 --> 00:10:29,400
the logs from two weeks ago

249
00:10:29,400 --> 00:10:32,100
last week and he goes queer ial to the

250
00:10:32,100 --> 00:10:34,790
journal and displays the shift I need

251
00:10:34,790 --> 00:10:37,529
then  I do then for units like

252
00:10:37,529 --> 00:10:39,420
us united so I can see for example

253
00:10:39,420 --> 00:10:43,170
all the logs relating to birds of prey and

254
00:10:43,170 --> 00:10:45,150
can even combine more units

255
00:10:45,150 --> 00:10:47,040
together so I can see together like

256
00:10:47,040 --> 00:10:50,760
a peaces and the ftp lfp server and I want to

257
00:10:50,760 --> 00:10:53,880
see for example the log together  between

258
00:10:53,880 --> 00:10:54,930
them

259
00:10:54,930 --> 00:10:56,880
then we can change the

260
00:10:56,880 --> 00:10:59,580
output format of the blog among which there are also

261
00:10:59,580 --> 00:11:01,410
even choose to make it

262
00:11:01,410 --> 00:11:03,390
in jayson to analyze it with other

263
00:11:03,390 --> 00:11:05,580
tools that for rapists

264
00:11:05,580 --> 00:11:07,820
could be very convenient as what

265
00:11:07,820 --> 00:11:11,820
we can then go to interrogate by

266
00:11:11,820 --> 00:11:13,860
priority for example we could decide  to

267
00:11:13,860 --> 00:11:15,810
display only the errors or only

268
00:11:15,810 --> 00:11:19,410
warnings then we can also do here for

269
00:11:19,410 --> 00:11:22,920
example see what is related to the

270
00:11:22,920 --> 00:11:25,170
kernel that how to do resigned vivamen  they

271
00:11:25,170 --> 00:11:27,900
will do you therefore for the type of transport

272
00:11:27,900 --> 00:11:30,360
or we can see all

273
00:11:30,360 --> 00:11:35,279
the services that newspapers know here is

274
00:11:35,279 --> 00:11:38,640
a bit of an example of here there is for example

275
00:11:38,640 --> 00:11:41,100
we can as I am doing an example

276
00:11:41,100 --> 00:11:43,500
we can see with the first here

277
00:11:43,500 --> 00:11:46,770
regional ctl minus bpr we can see

278
00:11:46,770 --> 00:11:48,839
all the errors occurred during

279
00:11:48,839 --> 00:11:52,010
the last bhutto or we can

280
00:11:52,010 --> 00:11:54,180
query everything about

281
00:11:54,180 --> 00:11:57,779
http di and see everything that

282
00:11:57,779 --> 00:12:00,180
happened from midnight until 9 am

283
00:12:00,180 --> 00:12:01,440


284
00:12:01,440 --> 00:12:03,360
or we could make a purchase

285
00:12:03,360 --> 00:12:05,300
everything related to the

286
00:12:05,300 --> 00:12:10,650
sdc device for example we can do was born  re

287
00:12:10,650 --> 00:12:15,390
on the services and daemons of vpn and

288
00:12:15,390 --> 00:12:18,900
dhcp we can therefore do even a little more

289
00:12:18,900 --> 00:12:21,180
sophisticated for example because journal

290
00:12:21,180 --> 00:12:22,500
also allows you to collect

291
00:12:22,500 --> 00:12:27,270
information from other hosts like they will

292
00:12:27,270 --> 00:12:30,900
then do on lost name sweet and also on the

293
00:12:30,900 --> 00:12:34,920
service and what I did not say in the

294
00:12:34,920 --> 00:12:37,079
journal  of which among the various features in

295
00:12:37,079 --> 00:12:39,400
addition to the classic lines

296
00:12:39,400 --> 00:12:41,830
can have tags attributed to these

297
00:12:41,830 --> 00:12:44,850
log lines these tags can  be

298
00:12:44,850 --> 00:12:48,250
chosen by who writes the daemon

299
00:12:48,250 --> 00:12:49,900
programmers have a

300
00:12:49,900 --> 00:12:52,330
library to which they can link and they

301
00:12:52,330 --> 00:12:53,830
can use this library to

302
00:12:53,830 --> 00:12:55,660
send detailed information

303
00:12:55,660 --> 00:12:58,600
assistants so for example if I were

304
00:12:58,600 --> 00:13:01,300
a programmer I would like

305
00:13:01,300 --> 00:13:02,800
to insert information that needs useful you can for

306
00:13:02,800 --> 00:13:04,840
example reach tags  to indicate,

307
00:13:04,840 --> 00:13:07,810
for example, the point in the file where

308
00:13:07,810 --> 00:13:10,450
a certain error has been raised and this can

309
00:13:10,450 --> 00:13:13,830
be of no use in the debugging phase,

310
00:13:13,830 --> 00:13:16,210
I would say that now to continue

311
00:13:16,210 --> 00:13:19,420
this quick overview and back to

312
00:13:19,420 --> 00:13:22,420
the configuration for a moment there are various

313
00:13:22,420 --> 00:13:24,100
directories in which the

314
00:13:24,100 --> 00:13:26,800
system configuration of and also

315
00:13:26,800 --> 00:13:29,230
systems of itself then the book system

316
00:13:29,230 --> 00:13:33,190
of we find all hell for are a

317
00:13:33,190 --> 00:13:34,780
series is not a plethora of executables

318
00:13:34,780 --> 00:13:37,240
that do a lot of tasks that

319
00:13:37,240 --> 00:13:40,330
are used to help systems of in your

320
00:13:40,330 --> 00:13:42,370
work for example you are there because  it goes

321
00:13:42,370 --> 00:13:45,520
down to party and it is a party that to

322
00:13:45,520 --> 00:13:50,080
all but a transient point then as a

323
00:13:50,080 --> 00:13:51,460
sub directory we have  the directory

324
00:13:51,460 --> 00:13:53,740
system inside the system

325
00:13:53,740 --> 00:13:57,610
contains all the serious files all the files

326
00:13:57,610 --> 00:14:00,280
one service and anything else

327
00:14:00,280 --> 00:14:03,370
global system by system that does not necessarily

328
00:14:03,370 --> 00:14:05,260
start the system startup are

329
00:14:05,260 --> 00:14:06,670
there that we can start

330
00:14:06,670 --> 00:14:07,470
manually

331
00:14:07,470 --> 00:14:10,630
if we want something to be

332
00:14:10,630 --> 00:14:11,950
started at system startup

333
00:14:11,950 --> 00:14:14,200
we have to create in it for example multi

334
00:14:14,200 --> 00:14:18,060
user target point once which represents

335
00:14:18,060 --> 00:14:20,350
the system in the multi user state

336
00:14:20,350 --> 00:14:22,000
we symlink all the

337
00:14:22,000 --> 00:14:25,350
services we need so

338
00:14:25,350 --> 00:14:29,400
that the multi user target is considered satisfied

339
00:14:29,400 --> 00:14:32,650
these are the directories dedicated to whom

340
00:14:32,650 --> 00:14:34,150
provides us to the distribution we

341
00:14:34,150 --> 00:14:36,340
can add other local things

342
00:14:36,340 --> 00:14:38,680
for the ntc machine for example then

343
00:14:38,680 --> 00:14:41,410
have other services of other services in

344
00:14:41,410 --> 00:14:46,570
ethical system of system also a

345
00:14:46,570 --> 00:14:48,550
very nice thing about systems of is that not

346
00:14:48,550 --> 00:14:50,200
only does it allow you to boot

347
00:14:50,200 --> 00:14:53,410
the system but it allows  also to

348
00:14:53,410 --> 00:14:56,980
start the user session

349
00:14:56,980 --> 00:14:59,590
we can have in user the ip

350
00:14:59,590 --> 00:15:02,980
user systems all the services of the  the various

351
00:15:02,980 --> 00:15:03,730
user sessions

352
00:15:03,730 --> 00:15:05,980
so you can use systems of

353
00:15:05,980 --> 00:15:07,450
for example to start a desktop that

354
00:15:07,450 --> 00:15:10,330
god does not while now for example that god

355
00:15:10,330 --> 00:15:14,050
does not use what type he uses that

356
00:15:14,050 --> 00:15:16,690
in it which is a mini dignity system that

357
00:15:16,690 --> 00:15:18,870
makes all the demons of the  tv that

358
00:15:18,870 --> 00:15:22,300
you can use in its place system di and

359
00:15:22,300 --> 00:15:25,930
systems will start for the

360
00:15:25,930 --> 00:15:28,000
section ask all the necessary daemons

361
00:15:28,000 --> 00:15:30,430
you will understand why it is

362
00:15:30,430 --> 00:15:33,480
very useful as featured let's

363
00:15:33,480 --> 00:15:35,740
deepen in the meantime how a unit is made

364
00:15:35,740 --> 00:15:40,300
a unit can have these properties

365
00:15:40,300 --> 00:15:44,190
re which quiles what he needs

366
00:15:44,190 --> 00:15:48,550
requisit what the which yes

367
00:15:48,550 --> 00:15:51,630
what are the requirements next comes to mind

368
00:15:51,630 --> 00:15:56,650
once is what he needs but it is

369
00:15:56,650 --> 00:15:57,670
optional

370
00:15:57,670 --> 00:16:01,180
bean stu and everything that is

371
00:16:01,180 --> 00:16:05,620
stopped is also stopped parto of

372
00:16:05,620 --> 00:16:07,690
serve to indicate  that a service is

373
00:16:07,690 --> 00:16:11,500
part of a set of conflict services,

374
00:16:11,500 --> 00:16:13,420
for example, to allow mutually exclusive services to be obtained

375
00:16:13,420 --> 00:16:15,160


376
00:16:15,160 --> 00:16:18,550
before after allow you to

377
00:16:18,550 --> 00:16:21,760
decide an order between is  services but

378
00:16:21,760 --> 00:16:23,620
not necessarily if one if there is something in

379
00:16:23,620 --> 00:16:26,800
before and after he par and he

380
00:16:26,800 --> 00:16:28,450
starts with the thing he simply says

381
00:16:28,450 --> 00:16:32,080
after before it is a positioning then she

382
00:16:32,080 --> 00:16:34,150
joined also allow you to specify

383
00:16:34,150 --> 00:16:37,660
to start other services of failure then

384
00:16:37,660 --> 00:16:39,940
you can specify  that to

385
00:16:39,940 --> 00:16:41,440
make that thing work you need

386
00:16:41,440 --> 00:16:46,060
paths on certain mound points or you

387
00:16:46,060 --> 00:16:52,000
can tell it to stop it when you

388
00:16:52,000 --> 00:16:54,580
can you can stop it when something not

389
00:16:54,580 --> 00:16:56,950
when it is no longer needed let's imagine that

390
00:16:56,950 --> 00:16:58,810
service is only needed for other services

391
00:16:58,810 --> 00:17:00,850
then when those other services

392
00:17:00,850 --> 00:17:02,380
minister more simply than  it says

393
00:17:02,380 --> 00:17:08,829
stop it when it is no longer needed and another

394
00:17:08,829 --> 00:17:10,900
nice thing that it is possible to alter the

395
00:17:10,900 --> 00:17:13,990
configuration of the units through the

396
00:17:13,990 --> 00:17:15,730
configuration directories

397
00:17:15,730 --> 00:17:17,949
so whoever supplies us with the system c

398
00:17:17,949 --> 00:17:21,669
with provides his all his units but

399
00:17:21,669 --> 00:17:24,010
we can add details

400
00:17:24,010 --> 00:17:26,949
for example let's imagine that  debian

401
00:17:26,949 --> 00:17:31,660
provides us with its a paci tu service for example

402
00:17:31,660 --> 00:17:33,880
but we can add

403
00:17:33,880 --> 00:17:35,799
further details of  configuration for

404
00:17:35,799 --> 00:17:38,049
example we can decide to limit

405
00:17:38,049 --> 00:17:43,390
what you can do to peace and here

406
00:17:43,390 --> 00:17:46,450
we come to the service service an example

407
00:17:46,450 --> 00:17:47,620
of service ians

408
00:17:47,620 --> 00:17:49,900
indeed as we can see there is the

409
00:17:49,900 --> 00:17:52,030
unit section that I described before and then there is the

410
00:17:52,030 --> 00:17:55,330
service section we know  quite

411
00:17:55,330 --> 00:17:58,450
minimal that shows how you can have

412
00:17:58,450 --> 00:18:01,780
something like symbol which then is

413
00:18:01,780 --> 00:18:03,640
limited to starting an executable and

414
00:18:03,640 --> 00:18:06,340
specifying the executable with this file

415
00:18:06,340 --> 00:18:07,840
we have a service that talks to us that

416
00:18:07,840 --> 00:18:09,400
we can start at startup we follow

417
00:18:09,400 --> 00:18:12,640
symlink for simple simple systems

418
00:18:12,640 --> 00:18:14,440
then  we can complicate it to our

419
00:18:14,440 --> 00:18:15,610
liking

420
00:18:15,610 --> 00:18:18,250
for example I could decide to replace

421
00:18:18,250 --> 00:18:22,480
type simple with for example fork and therefore

422
00:18:22,480 --> 00:18:24,970
system di fa will take care of the

423
00:18:24,970 --> 00:18:27,070
service in a particular way in the case

424
00:18:27,070 --> 00:18:30,730
that it is a service that does double fork and

425
00:18:30,730 --> 00:18:32,890
or we can specify low

426
00:18:32,890 --> 00:18:36,760
at that point system di  bases its

427
00:18:36,760 --> 00:18:39,220
activation and the service life cycle

428
00:18:39,220 --> 00:18:42,370
knowing that it will find it will be able to

429
00:18:42,370 --> 00:18:43,990
contact the service with respect to a

430
00:18:43,990 --> 00:18:47,620
certain path  or bass we can put

431
00:18:47,620 --> 00:18:49,659
one shot which means that our

432
00:18:49,659 --> 00:18:51,970
service will not stay alive forever

433
00:18:51,970 --> 00:18:54,130
but maybe we just need to invoke it

434
00:18:54,130 --> 00:18:57,840
once the start and then it ends immediately

435
00:18:58,590 --> 00:19:01,630
then we can add other things

436
00:19:01,630 --> 00:19:03,940
again for example if our service

437
00:19:03,940 --> 00:19:06,250
is particularly important  we could

438
00:19:06,250 --> 00:19:09,250
decide that there is a watch dog and

439
00:19:09,250 --> 00:19:11,860
then the daemon implements a

440
00:19:11,860 --> 00:19:12,950
watchdog logic

441
00:19:12,950 --> 00:19:15,440
will form every few seconds system of which is

442
00:19:15,440 --> 00:19:18,140
still alive and systems of itself will see that

443
00:19:18,140 --> 00:19:20,270
it will not come will not see if it no longer sees

444
00:19:20,270 --> 00:19:22,490
any notification of the watchdog it will take

445
00:19:22,490 --> 00:19:26,390
care to restart  he will take

446
00:19:26,390 --> 00:19:27,830
care of restarting the

447
00:19:27,830 --> 00:19:28,430
service

448
00:19:28,430 --> 00:19:30,710
so if it is excellent if we want to

449
00:19:30,710 --> 00:19:31,790
ensure that an indispensable service

450
00:19:31,790 --> 00:19:34,550
remains alive we can add other

451
00:19:34,550 --> 00:19:36,920
additional logics for example I could

452
00:19:36,920 --> 00:19:41,240
decide that if he stops responding to the

453
00:19:41,240 --> 00:19:43,820
boss just to restart it but he

454
00:19:43,820 --> 00:19:45,560
can even decide that  both of

455
00:19:45,560 --> 00:19:48,080
services for example continues to crash

456
00:19:48,080 --> 00:19:50,690
or even grow we can decide

457
00:19:50,690 --> 00:19:52,990
that for example it can  restart ten

458
00:19:52,990 --> 00:19:54,830
consecutive times in a minute

459
00:19:54,830 --> 00:19:56,270
if the service continues to grow

460
00:19:56,270 --> 00:19:59,270
freeze and restart more than 10

461
00:19:59,270 --> 00:20:00,530
times in a minute

462
00:20:00,530 --> 00:20:01,550
we can decide to

463
00:20:01,550 --> 00:20:03,200
take an action that

464
00:20:03,200 --> 00:20:05,540
could lead to flight in the node such as

465
00:20:05,540 --> 00:20:07,880
trying to restart it to see if the

466
00:20:07,880 --> 00:20:10,220
restart of the  system the system will be in

467
00:20:10,220 --> 00:20:13,130
a more stable condition this

468
00:20:13,130 --> 00:20:14,540
could be very convenient example if

469
00:20:14,540 --> 00:20:16,340
we have a machine somewhere on

470
00:20:16,340 --> 00:20:18,440
which it is not possible to do maintenance and

471
00:20:18,440 --> 00:20:20,480
we want the service to be as much as

472
00:20:20,480 --> 00:20:22,630
possible online

473
00:20:22,630 --> 00:20:25,430
then we can further complicate

474
00:20:25,430 --> 00:20:28,700
everything by adding for example how much

475
00:20:28,700 --> 00:20:31,040
quantity of  c the more we can dedicate the

476
00:20:31,040 --> 00:20:33,860
thing for example we would not want

477
00:20:33,860 --> 00:20:35,600
more than 10 percent to be dedicated to

478
00:20:35,600 --> 00:20:37,520
ours we can decide for

479
00:20:37,520 --> 00:20:39,860
example during the start up it has a

480
00:20:39,860 --> 00:20:41,810
peak of 50 percent that I know

481
00:20:41,810 --> 00:20:43,940
we can also dedicate to real

482
00:20:43,940 --> 00:20:46,040
limited memory resources  therefore

483
00:20:46,040 --> 00:20:48,080
we can say that a service must not

484
00:20:48,080 --> 00:20:51,050
occupy more than 500 megs in memory or per

485
00:20:51,050 --> 00:20:54,080
ese  mpio decide that it has a

486
00:20:54,080 --> 00:20:58,160
disk access of at most 20 mag per second I have

487
00:20:58,160 --> 00:21:00,800
a certain percentage like 10

488
00:21:00,800 --> 00:21:03,740
% of the bandwidth towards the disk in

489
00:21:03,740 --> 00:21:06,560
this way we can

490
00:21:06,560 --> 00:21:09,260
significantly limit a service and here for

491
00:21:09,260 --> 00:21:10,580
example what could be useful

492
00:21:10,580 --> 00:21:11,820
system of a

493
00:21:11,820 --> 00:21:14,160
in a desktop environment, for example,

494
00:21:14,160 --> 00:21:15,900
they often provide us with the desktop environment of

495
00:21:15,900 --> 00:21:18,450
our daemon that indexes everything I

496
00:21:18,450 --> 00:21:20,010
find it quite traumatic as a thing

497
00:21:20,010 --> 00:21:22,080
because sometimes the machine is almost

498
00:21:22,080 --> 00:21:24,860
planted by the in tg by the indexing

499
00:21:24,860 --> 00:21:27,960
if this is started yes stars

500
00:21:27,960 --> 00:21:29,820
we give indexing  from systems

501
00:21:29,820 --> 00:21:31,530
we can for example decide to

502
00:21:31,530 --> 00:21:33,990
limit its resources in order to make sure

503
00:21:33,990 --> 00:21:37,530
that the user never has the feeling

504
00:21:37,530 --> 00:21:42,300
that the system is unresponsive then what

505
00:21:42,300 --> 00:21:45,420
can we do the interesting change

506
00:21:45,420 --> 00:21:48,150
assign a user a group or

507
00:21:48,150 --> 00:21:52,020
environment variables and  we can also

508
00:21:52,020 --> 00:21:55,050
improve the security of the service for

509
00:21:55,050 --> 00:21:57,000
example we can block access to

510
00:21:57,000 --> 00:21:58,710
certain directories we can decide that it will

511
00:21:58,710 --> 00:22:00,860
accer  The directories are absolutely

512
00:22:00,860 --> 00:22:03,180
important and private and the service

513
00:22:03,180 --> 00:22:05,810
must not access them we can even

514
00:22:05,810 --> 00:22:09,000
tell them to have to create them a separate slash must

515
00:22:09,000 --> 00:22:11,460
only for him only with

516
00:22:11,460 --> 00:22:14,430
some devices we can for example

517
00:22:14,430 --> 00:22:19,290
create a tmp directory only

518
00:22:19,290 --> 00:22:21,900
for him on the namespace and lawn we can

519
00:22:21,900 --> 00:22:24,330
block from writing usero  o making

520
00:22:24,330 --> 00:22:26,340
the home or even

521
00:22:26,340 --> 00:22:27,660
systems inaccessible also allows us to

522
00:22:27,660 --> 00:22:32,400
set a take to ruth even we

523
00:22:32,400 --> 00:22:34,080
take for the descriptions

524
00:22:34,080 --> 00:22:37,200
we can create a namespace the

525
00:22:37,200 --> 00:22:39,309
separate network with

526
00:22:39,309 --> 00:22:42,100
here so the daemon remains offline

527
00:22:42,100 --> 00:22:44,529
with respect to the network or on one place and

528
00:22:44,529 --> 00:22:47,350
bess we can reduce  the capabilities

529
00:22:47,350 --> 00:22:49,929
filter the small lists and so on

530
00:22:49,929 --> 00:22:52,809
so we can really improve the

531
00:22:52,809 --> 00:22:55,960
security of the system and then we change the

532
00:22:55,960 --> 00:22:56,350
subject

533
00:22:56,350 --> 00:22:58,539
we move on to a new type which are

534
00:22:58,539 --> 00:23:02,049
the sockets as I mentioned it is

535
00:23:02,049 --> 00:23:04,749
possible there it is possible to activate a

536
00:23:04,749 --> 00:23:06,309
service for example only when it comes

537
00:23:06,309 --> 00:23:08,019
from traffic  on the a22

538
00:23:08,019 --> 00:23:09,850
this is how it is done  the socket

539
00:23:09,850 --> 00:23:12,879
for ssh of essentially when he

540
00:23:12,879 --> 00:23:15,070
is listening at 22 when the

541
00:23:15,070 --> 00:23:17,320
traffic arrives pull up ssh services then

542
00:23:17,320 --> 00:23:19,830
assis h is not started album

543
00:23:19,830 --> 00:23:22,899
we can also have the servos in

544
00:23:22,899 --> 00:23:26,049
mount this is its syntax we can

545
00:23:26,049 --> 00:23:27,759
and must be careful that if we make a

546
00:23:27,759 --> 00:23:30,309
mistake  type something here or the disk is not

547
00:23:30,309 --> 00:23:30,909
available

548
00:23:30,909 --> 00:23:34,990
the mount fails and

549
00:23:34,990 --> 00:23:36,629
you do not have to do a manual intervention

550
00:23:36,629 --> 00:23:38,740
to start its problem just

551
00:23:38,740 --> 00:23:43,360
put no fail in the options and with

552
00:23:43,360 --> 00:23:45,399
this I would say that I am nearing the end

553
00:23:45,399 --> 00:23:48,610
what is the future the future and will be  even

554
00:23:48,610 --> 00:23:51,129
the low ones because currently low

555
00:23:51,129 --> 00:23:54,309
to its daemon activation system

556
00:23:54,309 --> 00:23:57,070
for example when like mounting

557
00:23:57,070 --> 00:23:59,289
disks mounting digital day you

558
00:23:59,289 --> 00:24:01,869
think you disk is invoked

559
00:24:01,869 --> 00:24:02,860
and started only when there is

560
00:24:02,860 --> 00:24:05,590
an application that needs it  with di

561
00:24:05,590 --> 00:24:07,869
bust inside the kernel it will be systems of to

562
00:24:07,869 --> 00:24:09,119
do this thing

563
00:24:09,119 --> 00:24:12,070
and moreover of systems it will speak just

564
00:24:12,070 --> 00:24:14,710
using the of enough inside the kernel then

565
00:24:14,710 --> 00:24:16,779
the future s  For example, it will have systems

566
00:24:16,779 --> 00:24:18,639
to start all the services of which from there

567
00:24:18,639 --> 00:24:21,279
or not is another interesting thing

568
00:24:21,279 --> 00:24:23,169
that awaits us in the future

569
00:24:23,169 --> 00:24:26,980
ltc regenerable at boot or we can

570
00:24:26,980 --> 00:24:29,169
create type images on a file

571
00:24:29,169 --> 00:24:33,369
system read only or empty and if then

572
00:24:33,369 --> 00:24:36,220
all  'startup comes the eti civine populated in

573
00:24:36,220 --> 00:24:38,049
this way non conte does not contain

574
00:24:38,049 --> 00:24:39,669
any specific configuration the

575
00:24:39,669 --> 00:24:43,149
machine and therefore we can do

576
00:24:43,149 --> 00:24:45,200
some sort of fact

577
00:24:45,200 --> 00:24:48,710
provide it with predefined images and with

578
00:24:48,710 --> 00:24:50,059
this I am finished

579
00:24:50,059 --> 00:24:51,799
sorry for the ride but there were many

580
00:24:51,799 --> 00:25:01,909
stories and many concepts questions  what is

581
00:25:01,909 --> 00:25:04,159
currently then the latest entry and

582
00:25:04,159 --> 00:25:18,880
debian and www debian and debian then there is

583
00:25:18,880 --> 00:25:21,679
ubuntu from the next release

584
00:25:21,679 --> 00:25:27,610
apparently befed now we use arc when it seems

585
00:25:27,610 --> 00:25:29,750
historically one of the first users

586
00:25:29,750 --> 00:25:32,419
was a friend and then now merse the fish what

587
00:25:32,419 --> 00:25:34,700
else  in the embedded field then

588
00:25:34,700 --> 00:25:50,740
we see and gentoo and gentoo is ok questions

589
00:25:52,240 --> 00:25:54,980
yes it is I have not shown but one of the

590
00:25:54,980 --> 00:25:57,650
properties for either you put it in the south in the

591
00:25:57,650 --> 00:26:00,380
right target or if it is a script to

592
00:26:00,380 --> 00:26:01,910
run q  when a certain service is stopped

593
00:26:01,910 --> 00:26:03,890
just reach it

594
00:26:03,890 --> 00:26:06,980
when the property like stop learn ex

595
00:26:06,980 --> 00:26:09,020
ex top essentially is invoked

596
00:26:09,020 --> 00:26:11,840
when that service itself pulled down

597
00:26:11,840 --> 00:26:17,060
what is the point of creating a text file or

598
00:26:17,060 --> 00:26:18,920
adding a line to a text file

599
00:26:18,920 --> 00:26:29,050
and a lot  easy other questions

600
00:26:42,960 --> 00:26:46,180
and supported a boot chart there is a

601
00:26:46,180 --> 00:26:47,950
utility do not ask me the precise name

602
00:26:47,950 --> 00:26:50,800
either type boot chart and print a

603
00:26:50,800 --> 00:26:53,200
complete boot chart with aki

604
00:26:53,200 --> 00:26:56,160
relative boot times

605
00:27:21,130 --> 00:27:23,650
let's say then which ones you can measure

606
00:27:23,650 --> 00:27:25,360
reliably enough what

607
00:27:25,360 --> 00:27:28,770
affects the  startup time

608
00:27:56,000 --> 00:27:58,610
more questions if there is still time

609
00:27:58,610 --> 00:28:01,610
yes

610
00:28:20,420 --> 00:28:23,550
i don't think that's the

611
00:28:23,550 --> 00:28:31,580
perfect intent i'd say we're okay

