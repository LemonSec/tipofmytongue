1
00:00:01,520 --> 00:00:05,920
hello and welcome everybody to my talk

2
00:00:03,760 --> 00:00:07,199
an overview of the botnet simulation

3
00:00:05,920 --> 00:00:09,440
framework

4
00:00:07,200 --> 00:00:10,639
my name is leon burke and i'm a third

5
00:00:09,440 --> 00:00:12,559
year phd student

6
00:00:10,639 --> 00:00:14,079
at the technician universitat of

7
00:00:12,559 --> 00:00:16,160
darmstadt germany

8
00:00:14,080 --> 00:00:18,160
this work has been worked on by me and

9
00:00:16,160 --> 00:00:22,640
my colleagues shankar karupaya max

10
00:00:18,160 --> 00:00:25,519
milosa and emmanuel vasilo manolakis

11
00:00:22,640 --> 00:00:27,199
so what i want to talk about today is

12
00:00:25,519 --> 00:00:30,080
first and foremost

13
00:00:27,199 --> 00:00:31,760
why somebody would want to use a botnet

14
00:00:30,080 --> 00:00:34,480
simulation framework

15
00:00:31,760 --> 00:00:36,160
then some in-depth on peer-to-peer

16
00:00:34,480 --> 00:00:39,680
botnets

17
00:00:36,160 --> 00:00:42,879
then an overview of bsf in its

18
00:00:39,680 --> 00:00:44,640
functionality then another section on

19
00:00:42,879 --> 00:00:47,199
pcap injection

20
00:00:44,640 --> 00:00:49,440
and then followed by an evaluation and a

21
00:00:47,200 --> 00:00:53,680
conclusion

22
00:00:49,440 --> 00:00:55,519
so why would anyone want to use bsf

23
00:00:53,680 --> 00:00:57,440
first and foremost it can be used to

24
00:00:55,520 --> 00:00:58,079
build better systems for tracking

25
00:00:57,440 --> 00:01:01,199
peer-to-peer

26
00:00:58,079 --> 00:01:03,760
botnets so it is an environment

27
00:01:01,199 --> 00:01:04,879
to experiment and simulate peer-to-peer

28
00:01:03,760 --> 00:01:07,200
botnets

29
00:01:04,879 --> 00:01:08,000
peer-to-peer botnet tracking mechanisms

30
00:01:07,200 --> 00:01:10,240
and also

31
00:01:08,000 --> 00:01:11,119
anti-tracking mechanisms that try to

32
00:01:10,240 --> 00:01:13,280
avoid

33
00:01:11,119 --> 00:01:15,360
these tracking mechanisms implemented by

34
00:01:13,280 --> 00:01:18,960
botmasters

35
00:01:15,360 --> 00:01:22,479
and it can also be used to detect

36
00:01:18,960 --> 00:01:24,639
possibly unknown peer-to-peer botnets by

37
00:01:22,479 --> 00:01:26,159
creating synthetic network traces of

38
00:01:24,640 --> 00:01:29,600
simulated botnets

39
00:01:26,159 --> 00:01:31,840
and injecting these into real pcaps

40
00:01:29,600 --> 00:01:34,158
to then test botnet detection systems or

41
00:01:31,840 --> 00:01:37,600
intrusion detection systems

42
00:01:34,159 --> 00:01:40,799
in the real world so

43
00:01:37,600 --> 00:01:42,479
why peer-to-peer botnet so most of you

44
00:01:40,799 --> 00:01:43,360
are probably familiar with centralized

45
00:01:42,479 --> 00:01:45,759
botnets

46
00:01:43,360 --> 00:01:46,799
where a bot master sets up a server that

47
00:01:45,759 --> 00:01:49,280
commandeers and

48
00:01:46,799 --> 00:01:50,399
forwards commands to the infected

49
00:01:49,280 --> 00:01:52,720
machines

50
00:01:50,399 --> 00:01:53,759
it has a simple setup uses common

51
00:01:52,720 --> 00:01:55,840
protocols

52
00:01:53,759 --> 00:01:57,680
that many programmers are familiar with

53
00:01:55,840 --> 00:01:59,200
such as https

54
00:01:57,680 --> 00:02:00,960
and it's simple to set up because of

55
00:01:59,200 --> 00:02:02,719
that most of the time

56
00:02:00,960 --> 00:02:04,640
but it has a single point of failure in

57
00:02:02,719 --> 00:02:05,600
the centralized server which if it's

58
00:02:04,640 --> 00:02:08,080
taken down

59
00:02:05,600 --> 00:02:10,160
completely disables the control of the

60
00:02:08,080 --> 00:02:12,879
peer-to-peer botnet

61
00:02:10,160 --> 00:02:15,040
contrary peer-to-peer botnet is a little

62
00:02:12,879 --> 00:02:17,760
more complex to implement

63
00:02:15,040 --> 00:02:18,959
and probably because of that less common

64
00:02:17,760 --> 00:02:21,440
in the world

65
00:02:18,959 --> 00:02:22,879
but it's highly resilient because every

66
00:02:21,440 --> 00:02:24,640
single infected peer

67
00:02:22,879 --> 00:02:27,120
can be used to forward botmaster

68
00:02:24,640 --> 00:02:28,480
commands and keep the botnet alive and

69
00:02:27,120 --> 00:02:32,319
the communication and control

70
00:02:28,480 --> 00:02:35,440
structure alive so

71
00:02:32,319 --> 00:02:37,200
here's a quick view of how we

72
00:02:35,440 --> 00:02:38,560
see peer-to-peer botnets in a graph

73
00:02:37,200 --> 00:02:40,799
representation

74
00:02:38,560 --> 00:02:42,080
and how they function in maintaining the

75
00:02:40,800 --> 00:02:44,879
overlay

76
00:02:42,080 --> 00:02:46,160
so starting with about zero here it has

77
00:02:44,879 --> 00:02:48,160
enabled list

78
00:02:46,160 --> 00:02:49,519
of other bots their ip addresses and

79
00:02:48,160 --> 00:02:51,680
parts usually

80
00:02:49,519 --> 00:02:53,760
with which it can communicate and

81
00:02:51,680 --> 00:02:56,239
exchange messages

82
00:02:53,760 --> 00:02:58,239
and we can represent these contents of a

83
00:02:56,239 --> 00:03:01,599
neighbor list as a directed graph

84
00:02:58,239 --> 00:03:02,800
as it is shown here then we have the

85
00:03:01,599 --> 00:03:05,679
botmaster

86
00:03:02,800 --> 00:03:06,480
that can come in at any point of this

87
00:03:05,680 --> 00:03:09,040
network

88
00:03:06,480 --> 00:03:11,280
try to inject their commands and even if

89
00:03:09,040 --> 00:03:13,599
we as defenders are capable of blocking

90
00:03:11,280 --> 00:03:15,040
this the bot master can just switch to

91
00:03:13,599 --> 00:03:17,200
another

92
00:03:15,040 --> 00:03:19,280
infected machine and inject the commands

93
00:03:17,200 --> 00:03:21,440
there which are then passed around in

94
00:03:19,280 --> 00:03:23,519
the network in a gossip fashion

95
00:03:21,440 --> 00:03:25,680
reaching eventually all the infected

96
00:03:23,519 --> 00:03:28,319
machines

97
00:03:25,680 --> 00:03:29,519
so over time machines may go offline

98
00:03:28,319 --> 00:03:32,640
come back online

99
00:03:29,519 --> 00:03:34,959
the botnet changes and evolves

100
00:03:32,640 --> 00:03:36,480
and in order to keep track of that most

101
00:03:34,959 --> 00:03:38,319
peer-to-peer botnets

102
00:03:36,480 --> 00:03:40,560
exchange messages frequently in a

103
00:03:38,319 --> 00:03:43,679
so-called membership management interval

104
00:03:40,560 --> 00:03:45,840
in which they just check in if their

105
00:03:43,680 --> 00:03:47,120
neighbors maybe have new updates if they

106
00:03:45,840 --> 00:03:49,440
are still available

107
00:03:47,120 --> 00:03:51,519
and generally to remain connected within

108
00:03:49,440 --> 00:03:53,680
the overlay

109
00:03:51,519 --> 00:03:55,200
at some point in time a bot may actually

110
00:03:53,680 --> 00:03:58,879
go offline like in this case

111
00:03:55,200 --> 00:04:00,000
bot b2 and if b0 tries to probe b2 it

112
00:03:58,879 --> 00:04:03,518
will not get a reply

113
00:04:00,000 --> 00:04:06,560
from it and continuous probing will fail

114
00:04:03,519 --> 00:04:09,439
in fail again which leads to beat

115
00:04:06,560 --> 00:04:10,080
0 removing b2 from its neighbor list and

116
00:04:09,439 --> 00:04:12,000
then

117
00:04:10,080 --> 00:04:14,080
actively looking for additional entries

118
00:04:12,000 --> 00:04:16,000
by sending these messages to its other

119
00:04:14,080 --> 00:04:18,720
neighbors like b1 here

120
00:04:16,000 --> 00:04:22,079
to then establish a connection to b6 as

121
00:04:18,720 --> 00:04:22,079
a replacement for b2

122
00:04:23,360 --> 00:04:26,960
this last mechanism that i talked about

123
00:04:25,600 --> 00:04:29,440
can be used by us

124
00:04:26,960 --> 00:04:31,520
researchers and defenders to actually

125
00:04:29,440 --> 00:04:33,280
monitor or crawl the botnet

126
00:04:31,520 --> 00:04:36,240
so we can implement a crawler that

127
00:04:33,280 --> 00:04:38,719
speaks parts or all of the protocol

128
00:04:36,240 --> 00:04:40,000
and then send these messages to discover

129
00:04:38,720 --> 00:04:43,040
additional bots

130
00:04:40,000 --> 00:04:44,479
to an entry bot and from there crawl our

131
00:04:43,040 --> 00:04:46,960
way through the entire network

132
00:04:44,479 --> 00:04:49,758
iteratively discovering the infected

133
00:04:46,960 --> 00:04:52,080
machines in the network

134
00:04:49,759 --> 00:04:53,280
a similar tool but more passive are

135
00:04:52,080 --> 00:04:55,758
sensor nodes

136
00:04:53,280 --> 00:04:57,919
which are also participating in the

137
00:04:55,759 --> 00:05:00,080
overlay of the peer-to-peer botnet

138
00:04:57,919 --> 00:05:01,599
waiting for incoming connections to then

139
00:05:00,080 --> 00:05:03,359
track the spots that

140
00:05:01,600 --> 00:05:04,880
establish a connection to the sensor

141
00:05:03,360 --> 00:05:08,080
instead of actively establishing

142
00:05:04,880 --> 00:05:08,080
connections to the bots

143
00:05:09,199 --> 00:05:13,600
so how do we recreate this in our

144
00:05:12,479 --> 00:05:17,039
simulation

145
00:05:13,600 --> 00:05:17,360
framework first and foremost our focus

146
00:05:17,039 --> 00:05:19,440
is

147
00:05:17,360 --> 00:05:21,520
on the network overlay as shown in the

148
00:05:19,440 --> 00:05:24,560
top left of this diagram

149
00:05:21,520 --> 00:05:26,960
where we simulate the interaction

150
00:05:24,560 --> 00:05:29,759
between bots crawlers sensors and any

151
00:05:26,960 --> 00:05:32,000
other node you can think of

152
00:05:29,759 --> 00:05:33,199
underneath this is a network underlay

153
00:05:32,000 --> 00:05:36,720
that is a star

154
00:05:33,199 --> 00:05:37,360
network with a router that connects all

155
00:05:36,720 --> 00:05:40,160
the nodes

156
00:05:37,360 --> 00:05:40,880
present in the network such as bots

157
00:05:40,160 --> 00:05:43,600
crawlers

158
00:05:40,880 --> 00:05:45,199
and sensors and then we have a few

159
00:05:43,600 --> 00:05:48,479
global components

160
00:05:45,199 --> 00:05:50,960
that are used to inject or track

161
00:05:48,479 --> 00:05:53,440
the progress of the simulation outside

162
00:05:50,960 --> 00:05:55,198
of the overlay such as the bogmaster

163
00:05:53,440 --> 00:05:57,440
which is a component that could inject a

164
00:05:55,199 --> 00:06:00,000
new command at any point in the network

165
00:05:57,440 --> 00:06:02,000
a churn generator that is responsible

166
00:06:00,000 --> 00:06:05,360
for sending bots online and sending

167
00:06:02,000 --> 00:06:07,199
new bots old bots offline we have a

168
00:06:05,360 --> 00:06:10,560
network analyzer that is

169
00:06:07,199 --> 00:06:12,639
used to extract

170
00:06:10,560 --> 00:06:15,360
the information about the simulation

171
00:06:12,639 --> 00:06:19,039
state such as the graph representation

172
00:06:15,360 --> 00:06:20,960
or the message traces of the simulation

173
00:06:19,039 --> 00:06:23,599
and a global note list to keep track of

174
00:06:20,960 --> 00:06:26,080
all the bots present in the network

175
00:06:23,600 --> 00:06:28,319
and lastly we have configuration files

176
00:06:26,080 --> 00:06:29,039
which we inherit from the omniplus plus

177
00:06:28,319 --> 00:06:30,560
simulator

178
00:06:29,039 --> 00:06:32,159
on top of which botnet simulation

179
00:06:30,560 --> 00:06:35,440
framework was built

180
00:06:32,160 --> 00:06:40,080
which allows us to easily configure the

181
00:06:35,440 --> 00:06:42,000
simulations without changing the code

182
00:06:40,080 --> 00:06:44,479
so to give you a little more detail on

183
00:06:42,000 --> 00:06:46,639
the on the components of bsf

184
00:06:44,479 --> 00:06:48,240
we have an implementation of a bot

185
00:06:46,639 --> 00:06:50,720
called simplebot

186
00:06:48,240 --> 00:06:52,479
and its purpose is to be a default

187
00:06:50,720 --> 00:06:54,479
implementation of a peer-to-peer botnet

188
00:06:52,479 --> 00:06:56,080
that follows the patterns of

189
00:06:54,479 --> 00:06:57,599
various unstructured peer-to-peer

190
00:06:56,080 --> 00:06:59,199
botnets that we have observed in the

191
00:06:57,599 --> 00:07:01,360
wild

192
00:06:59,199 --> 00:07:02,319
and it is highly configurable allowing

193
00:07:01,360 --> 00:07:05,039
you to

194
00:07:02,319 --> 00:07:06,639
run simulations on botnets by just

195
00:07:05,039 --> 00:07:08,240
changing the initialization files

196
00:07:06,639 --> 00:07:10,720
instead of the code

197
00:07:08,240 --> 00:07:11,520
among its features are enablelist that

198
00:07:10,720 --> 00:07:13,919
maintains

199
00:07:11,520 --> 00:07:14,880
other known bots then the membership

200
00:07:13,919 --> 00:07:18,159
management

201
00:07:14,880 --> 00:07:19,919
which steers the frequent communication

202
00:07:18,160 --> 00:07:21,280
with its neighbors to check if they're

203
00:07:19,919 --> 00:07:23,520
still available

204
00:07:21,280 --> 00:07:25,359
and update the stale connections and

205
00:07:23,520 --> 00:07:27,359
optionally it can also be used to

206
00:07:25,360 --> 00:07:29,199
forward botmaster commands

207
00:07:27,360 --> 00:07:32,479
or implement countermeasures against

208
00:07:29,199 --> 00:07:34,800
tracking such as crawlers

209
00:07:32,479 --> 00:07:36,318
talking about crawlers we also have a

210
00:07:34,800 --> 00:07:39,280
simple crawler implementation

211
00:07:36,319 --> 00:07:40,960
in bsf right now that can be extended or

212
00:07:39,280 --> 00:07:42,880
one could implement their own crawlers

213
00:07:40,960 --> 00:07:46,318
and sensors if they wanted to

214
00:07:42,880 --> 00:07:49,599
and the purpose of this is to track bots

215
00:07:46,319 --> 00:07:51,759
iteratively in the network extract the

216
00:07:49,599 --> 00:07:53,199
information export this information

217
00:07:51,759 --> 00:07:55,360
which can then later be

218
00:07:53,199 --> 00:07:56,479
compared against the ground truth

219
00:07:55,360 --> 00:08:00,080
exported by

220
00:07:56,479 --> 00:08:01,758
the statistics modules of bsf

221
00:08:00,080 --> 00:08:03,599
and among its features are a

222
00:08:01,759 --> 00:08:06,080
configurable crawl interval

223
00:08:03,599 --> 00:08:07,120
so should it crawl every second or every

224
00:08:06,080 --> 00:08:10,639
hour

225
00:08:07,120 --> 00:08:10,639
and log these results

226
00:08:11,199 --> 00:08:15,919
then i have hinted towards the churn

227
00:08:13,680 --> 00:08:18,160
within a peer-to-peer botnet already

228
00:08:15,919 --> 00:08:19,359
and this is a very crucial factor within

229
00:08:18,160 --> 00:08:21,599
the simulation

230
00:08:19,360 --> 00:08:23,120
because apart from the protocol itself

231
00:08:21,599 --> 00:08:25,599
this determines

232
00:08:23,120 --> 00:08:27,599
how the overlay is constructed and

233
00:08:25,599 --> 00:08:28,719
therefore how quick a message spreads

234
00:08:27,599 --> 00:08:30,639
within the network

235
00:08:28,720 --> 00:08:31,840
how resilient the network is to node

236
00:08:30,639 --> 00:08:34,080
failures how

237
00:08:31,840 --> 00:08:36,399
resilient the network may be to take

238
00:08:34,080 --> 00:08:39,519
down attempts or sinkholding attempts

239
00:08:36,399 --> 00:08:40,000
by defenders so the purpose is to

240
00:08:39,519 --> 00:08:41,679
recreate

241
00:08:40,000 --> 00:08:43,760
realistic churn behavior as it would

242
00:08:41,679 --> 00:08:45,920
appear in the real world

243
00:08:43,760 --> 00:08:47,920
while still maintaining and giving us

244
00:08:45,920 --> 00:08:50,880
the opportunity to specify

245
00:08:47,920 --> 00:08:52,880
a desired active population so if you

246
00:08:50,880 --> 00:08:54,080
want to run an analysis on a botnet that

247
00:08:52,880 --> 00:08:56,560
has 5000 bots

248
00:08:54,080 --> 00:08:57,279
active at any point in time you can

249
00:08:56,560 --> 00:08:59,920
specify

250
00:08:57,279 --> 00:09:01,279
this and the churn generator and the

251
00:08:59,920 --> 00:09:04,079
logic behind it will take

252
00:09:01,279 --> 00:09:04,880
care of giving you an average around

253
00:09:04,080 --> 00:09:08,560
5000

254
00:09:04,880 --> 00:09:11,680
active bots so how does this work

255
00:09:08,560 --> 00:09:13,439
um it sends off a cent bot online or

256
00:09:11,680 --> 00:09:15,359
offline based on probability

257
00:09:13,440 --> 00:09:16,480
distributions namely the lifetime

258
00:09:15,360 --> 00:09:19,040
distribution

259
00:09:16,480 --> 00:09:20,399
which if what comes online it draws from

260
00:09:19,040 --> 00:09:22,640
that distribution

261
00:09:20,399 --> 00:09:23,600
a value which specifies for how long the

262
00:09:22,640 --> 00:09:26,000
bot will stay

263
00:09:23,600 --> 00:09:27,760
online in the simulation and then we

264
00:09:26,000 --> 00:09:30,240
have the inter-arrival distribution

265
00:09:27,760 --> 00:09:32,640
which specifies after which time a new

266
00:09:30,240 --> 00:09:36,240
bot will join the network from the

267
00:09:32,640 --> 00:09:38,240
amount of currently inactive bots so

268
00:09:36,240 --> 00:09:40,160
to visualize this i have this image on

269
00:09:38,240 --> 00:09:42,320
the right with the faucet

270
00:09:40,160 --> 00:09:44,640
pouring water at a constant rate into a

271
00:09:42,320 --> 00:09:46,800
bucket which the bucket is our

272
00:09:44,640 --> 00:09:47,680
simulation and then there's holes in the

273
00:09:46,800 --> 00:09:49,519
bucket

274
00:09:47,680 --> 00:09:51,599
where water is flowing out which is the

275
00:09:49,519 --> 00:09:53,760
bots leaving the network

276
00:09:51,600 --> 00:09:54,880
so the faucet is running at a constant

277
00:09:53,760 --> 00:09:57,920
rate in our case

278
00:09:54,880 --> 00:09:58,880
of the simulation which means bots draw

279
00:09:57,920 --> 00:10:01,360
always from the same

280
00:09:58,880 --> 00:10:02,560
inter-arrival distribution to join the

281
00:10:01,360 --> 00:10:05,440
network

282
00:10:02,560 --> 00:10:07,279
so what happens here is that joining

283
00:10:05,440 --> 00:10:08,480
they all draw a lifetime which when it

284
00:10:07,279 --> 00:10:10,399
comes to an end they will

285
00:10:08,480 --> 00:10:11,920
so to say leave the bucket through one

286
00:10:10,399 --> 00:10:14,800
of the holes

287
00:10:11,920 --> 00:10:16,800
however as more bots join the bucket the

288
00:10:14,800 --> 00:10:18,319
likelihood of any of these

289
00:10:16,800 --> 00:10:21,040
coming to the end of their lifetime

290
00:10:18,320 --> 00:10:24,240
increases and the amount of bots

291
00:10:21,040 --> 00:10:25,120
leaving increases as well the fuller the

292
00:10:24,240 --> 00:10:26,399
bucket is or

293
00:10:25,120 --> 00:10:29,279
the more bots are active in the

294
00:10:26,399 --> 00:10:31,920
population and this leads to a

295
00:10:29,279 --> 00:10:34,640
somewhat oscillating effect around the

296
00:10:31,920 --> 00:10:37,120
specified and desired active population

297
00:10:34,640 --> 00:10:39,199
with still a realistic behavior of bots

298
00:10:37,120 --> 00:10:42,240
coming online and going offline

299
00:10:39,200 --> 00:10:44,640
as we would see it in the real world and

300
00:10:42,240 --> 00:10:48,000
the distributions we have chosen

301
00:10:44,640 --> 00:10:49,120
are so that they can be fed from real

302
00:10:48,000 --> 00:10:50,640
world measurements

303
00:10:49,120 --> 00:10:53,519
that we have taken for example for the

304
00:10:50,640 --> 00:10:55,839
sality botnet or the zero access botnet

305
00:10:53,519 --> 00:10:57,040
and recreate that term pattern that we

306
00:10:55,839 --> 00:11:00,399
have observed in

307
00:10:57,040 --> 00:11:02,160
real world botnets before and if you

308
00:11:00,399 --> 00:11:05,120
want to have more details on this maybe

309
00:11:02,160 --> 00:11:05,839
have a look at our paper from raid 2018

310
00:11:05,120 --> 00:11:10,240
where we

311
00:11:05,839 --> 00:11:12,160
explain the churn in greater detail

312
00:11:10,240 --> 00:11:14,079
lastly i want to talk about the

313
00:11:12,160 --> 00:11:16,880
configuration files

314
00:11:14,079 --> 00:11:19,279
so there are these configuration files

315
00:11:16,880 --> 00:11:21,279
that can be used to simply specify how

316
00:11:19,279 --> 00:11:22,560
to run a simulation for example set the

317
00:11:21,279 --> 00:11:24,480
size of the botnet

318
00:11:22,560 --> 00:11:26,560
set the types of the bots that you want

319
00:11:24,480 --> 00:11:27,440
such as simple bot or a more specific

320
00:11:26,560 --> 00:11:30,800
implementation

321
00:11:27,440 --> 00:11:32,640
of for example sality or zero access

322
00:11:30,800 --> 00:11:34,079
you could set the number of crawlers

323
00:11:32,640 --> 00:11:35,279
that you want to have present in the

324
00:11:34,079 --> 00:11:38,319
simulation

325
00:11:35,279 --> 00:11:39,839
and choose a churn model that recreates

326
00:11:38,320 --> 00:11:43,519
the desired term behavior

327
00:11:39,839 --> 00:11:46,320
and many more

328
00:11:43,519 --> 00:11:46,959
as a second part of bsf i want to talk

329
00:11:46,320 --> 00:11:50,320
about the

330
00:11:46,959 --> 00:11:52,800
pcap injection so psf itself

331
00:11:50,320 --> 00:11:53,760
only looks at the overlay communication

332
00:11:52,800 --> 00:11:56,240
and

333
00:11:53,760 --> 00:11:58,079
how messages are exchanged between bots

334
00:11:56,240 --> 00:12:00,160
abstracting from the underlay so there

335
00:11:58,079 --> 00:12:03,120
are no real packets no udp

336
00:12:00,160 --> 00:12:03,519
protocol no tcp protocol underlying it

337
00:12:03,120 --> 00:12:05,839
but

338
00:12:03,519 --> 00:12:08,160
just plain and simple messages exchanged

339
00:12:05,839 --> 00:12:11,440
in the simulation

340
00:12:08,160 --> 00:12:12,959
however we might want to use the

341
00:12:11,440 --> 00:12:14,800
simulated botnets to

342
00:12:12,959 --> 00:12:16,560
test botnet detection systems or

343
00:12:14,800 --> 00:12:18,240
intrusion detection systems

344
00:12:16,560 --> 00:12:20,000
to check if they could detect these

345
00:12:18,240 --> 00:12:22,959
types of botnets

346
00:12:20,000 --> 00:12:24,720
so we leverage a second tool called id2t

347
00:12:22,959 --> 00:12:25,680
or the intrusion detection dataset

348
00:12:24,720 --> 00:12:28,160
toolkit

349
00:12:25,680 --> 00:12:29,839
which is capable of transforming the

350
00:12:28,160 --> 00:12:30,959
overlay communication from our

351
00:12:29,839 --> 00:12:33,279
simulation

352
00:12:30,959 --> 00:12:34,239
into real packets and inject them into

353
00:12:33,279 --> 00:12:37,519
any given

354
00:12:34,240 --> 00:12:39,440
pcap file that may be taken from

355
00:12:37,519 --> 00:12:42,959
an office environment a home environment

356
00:12:39,440 --> 00:12:42,959
or other network

357
00:12:43,360 --> 00:12:46,639
so how does this work in a little

358
00:12:45,360 --> 00:12:50,160
greater detail

359
00:12:46,639 --> 00:12:51,279
id2t gets two inputs one is an existing

360
00:12:50,160 --> 00:12:53,600
pcap file

361
00:12:51,279 --> 00:12:55,519
the second one is a communication trace

362
00:12:53,600 --> 00:12:56,560
exported from the button simulation

363
00:12:55,519 --> 00:12:58,720
framework

364
00:12:56,560 --> 00:12:59,920
and then a set of injection parameters

365
00:12:58,720 --> 00:13:03,279
that tell id2t

366
00:12:59,920 --> 00:13:06,240
how to combine these two input sources

367
00:13:03,279 --> 00:13:07,200
and the output of id2t would then be a

368
00:13:06,240 --> 00:13:09,360
pcap file

369
00:13:07,200 --> 00:13:11,440
including all the original traffic

370
00:13:09,360 --> 00:13:14,160
overlaid with the injector peer-to-peer

371
00:13:11,440 --> 00:13:18,079
botnet traffic on top of it

372
00:13:14,160 --> 00:13:20,000
or just a plain pcap file containing

373
00:13:18,079 --> 00:13:23,920
only the injected peer-to-peer botnet

374
00:13:20,000 --> 00:13:23,920
traffic deleting the original input

375
00:13:25,519 --> 00:13:30,720
to evaluate our bond simulation

376
00:13:28,560 --> 00:13:31,040
framework we first want to showcase the

377
00:13:30,720 --> 00:13:33,600
run

378
00:13:31,040 --> 00:13:35,360
time performance of bsf itself to give

379
00:13:33,600 --> 00:13:36,880
you an idea of what can

380
00:13:35,360 --> 00:13:40,079
and what cannot be done within the

381
00:13:36,880 --> 00:13:41,920
simulation in reasonable time

382
00:13:40,079 --> 00:13:43,680
so to do this we simulate three

383
00:13:41,920 --> 00:13:46,399
different botnets namely the game over

384
00:13:43,680 --> 00:13:47,839
zeus zelity and hide and seek parameters

385
00:13:46,399 --> 00:13:50,480
using the simple bot and its

386
00:13:47,839 --> 00:13:54,639
configuration parameters

387
00:13:50,480 --> 00:13:57,040
and the most crucial parameters

388
00:13:54,639 --> 00:13:58,800
regarding to run time of the simulation

389
00:13:57,040 --> 00:14:01,120
are the neighborless size

390
00:13:58,800 --> 00:14:02,000
which the higher it is the more messages

391
00:14:01,120 --> 00:14:03,839
are sent by each

392
00:14:02,000 --> 00:14:06,240
bot in every membership management

393
00:14:03,839 --> 00:14:07,680
interval increasing the amount of events

394
00:14:06,240 --> 00:14:08,959
that need to be simulated by the

395
00:14:07,680 --> 00:14:10,800
simulator

396
00:14:08,959 --> 00:14:12,800
similarly the membership management

397
00:14:10,800 --> 00:14:14,880
interval the lower it is

398
00:14:12,800 --> 00:14:16,479
the more often a bot checks if its

399
00:14:14,880 --> 00:14:18,480
neighbors are online

400
00:14:16,480 --> 00:14:20,079
and again increasing the overall number

401
00:14:18,480 --> 00:14:22,240
of messages exchanged

402
00:14:20,079 --> 00:14:24,880
and therefore the events and the runtime

403
00:14:22,240 --> 00:14:28,079
of the simulation

404
00:14:24,880 --> 00:14:30,320
and then also the total or active bots

405
00:14:28,079 --> 00:14:32,079
of the simulated botnets have the same

406
00:14:30,320 --> 00:14:34,320
effect as the more bots

407
00:14:32,079 --> 00:14:35,680
the more messages again and again a

408
00:14:34,320 --> 00:14:37,839
higher run time

409
00:14:35,680 --> 00:14:39,680
and the same accounts for the duration

410
00:14:37,839 --> 00:14:41,040
so if you want to simulate about it for

411
00:14:39,680 --> 00:14:43,680
example 10 days

412
00:14:41,040 --> 00:14:44,240
in each of these three cases this has an

413
00:14:43,680 --> 00:14:47,439
impact

414
00:14:44,240 --> 00:14:49,760
on the runtime as well so

415
00:14:47,440 --> 00:14:51,920
showing you here some of the results as

416
00:14:49,760 --> 00:14:54,560
you can see the cell t simulation

417
00:14:51,920 --> 00:14:57,120
of 10 days took the longest whereas the

418
00:14:54,560 --> 00:14:59,518
game over in hide and seek simulation

419
00:14:57,120 --> 00:15:01,680
took lesser than that with an average of

420
00:14:59,519 --> 00:15:03,120
two hours versus an average of 13 and a

421
00:15:01,680 --> 00:15:05,680
half hours

422
00:15:03,120 --> 00:15:07,839
why is this the case the sality botnet

423
00:15:05,680 --> 00:15:09,599
has a very large enable list size and as

424
00:15:07,839 --> 00:15:10,720
i explained earlier the larger the

425
00:15:09,600 --> 00:15:12,639
neighborless size

426
00:15:10,720 --> 00:15:15,120
the more messages need to be exchanged

427
00:15:12,639 --> 00:15:17,120
increasing the runtime

428
00:15:15,120 --> 00:15:18,560
a second observation is that game over

429
00:15:17,120 --> 00:15:20,480
zeus and hide and seek

430
00:15:18,560 --> 00:15:22,399
seem to have the same runtime even

431
00:15:20,480 --> 00:15:23,519
though their neighborless size and

432
00:15:22,399 --> 00:15:25,360
membership management

433
00:15:23,519 --> 00:15:26,800
interval are different with hide and

434
00:15:25,360 --> 00:15:28,720
seek having a very short

435
00:15:26,800 --> 00:15:30,160
membership management interval which

436
00:15:28,720 --> 00:15:32,000
should increase the runtime of the

437
00:15:30,160 --> 00:15:33,680
simulation significantly

438
00:15:32,000 --> 00:15:35,680
but then if we look at the total on

439
00:15:33,680 --> 00:15:37,359
active bots specified for each of these

440
00:15:35,680 --> 00:15:40,079
botnets in the simulation

441
00:15:37,360 --> 00:15:40,560
game over zeus has 10 times more the

442
00:15:40,079 --> 00:15:43,920
bots

443
00:15:40,560 --> 00:15:46,239
simulated and still just takes the same

444
00:15:43,920 --> 00:15:47,519
amount of an average of two hours for

445
00:15:46,240 --> 00:15:49,519
simulation

446
00:15:47,519 --> 00:15:51,759
so again here the low membership

447
00:15:49,519 --> 00:15:54,240
management interval of hide and seek

448
00:15:51,759 --> 00:15:54,959
decrease the capabilities of bots that

449
00:15:54,240 --> 00:15:58,320
we can

450
00:15:54,959 --> 00:15:59,920
simulate in reasonable time frame

451
00:15:58,320 --> 00:16:01,360
nevertheless we want to point out that

452
00:15:59,920 --> 00:16:04,000
if you have a strong

453
00:16:01,360 --> 00:16:05,680
processor and a lot of time you could

454
00:16:04,000 --> 00:16:07,920
simulate even hide and seek

455
00:16:05,680 --> 00:16:09,279
with more bots than that but it might

456
00:16:07,920 --> 00:16:10,319
degrade to the point where the

457
00:16:09,279 --> 00:16:12,800
simulation actually

458
00:16:10,320 --> 00:16:15,120
takes longer than real time so 50 days

459
00:16:12,800 --> 00:16:18,399
of simulation might take 70 days

460
00:16:15,120 --> 00:16:18,399
of real time

461
00:16:19,199 --> 00:16:22,479
secondly i would like to show you an

462
00:16:21,440 --> 00:16:26,079
experimental

463
00:16:22,480 --> 00:16:29,120
setup for the traffic injection of

464
00:16:26,079 --> 00:16:30,160
bsf tracers into a real pcap and to do

465
00:16:29,120 --> 00:16:33,759
this

466
00:16:30,160 --> 00:16:37,360
we took a real sality trace taken from

467
00:16:33,759 --> 00:16:41,199
the stratosphere labs ctu data set

468
00:16:37,360 --> 00:16:42,880
and we use wireshark to extract all the

469
00:16:41,199 --> 00:16:45,359
conversation statistics

470
00:16:42,880 --> 00:16:48,160
of that sality peer-to-peer traffic

471
00:16:45,360 --> 00:16:50,320
located in the p-cap

472
00:16:48,160 --> 00:16:52,079
and then we also use a random pcap from

473
00:16:50,320 --> 00:16:54,160
which we will delete the original

474
00:16:52,079 --> 00:16:57,599
content with id2t

475
00:16:54,160 --> 00:16:59,199
and use id2t to inject a simulation of

476
00:16:57,600 --> 00:17:02,800
the seletybotnet

477
00:16:59,199 --> 00:17:02,800
into that original pcap

478
00:17:02,839 --> 00:17:08,000
sorry and

479
00:17:05,599 --> 00:17:09,918
this results in a picab mimicking cell

480
00:17:08,000 --> 00:17:11,119
at peer-to-peer traffic based on our

481
00:17:09,919 --> 00:17:13,120
simulation

482
00:17:11,119 --> 00:17:15,039
and then again we use wireshark to

483
00:17:13,119 --> 00:17:15,599
extract the conversation statistics from

484
00:17:15,039 --> 00:17:17,359
this

485
00:17:15,599 --> 00:17:21,520
to compare it against the conversation

486
00:17:17,359 --> 00:17:24,559
statistics of the real sality trace

487
00:17:21,520 --> 00:17:26,079
and the results can be seen here where

488
00:17:24,559 --> 00:17:28,079
we have

489
00:17:26,079 --> 00:17:29,918
a difference in the conversation of the

490
00:17:28,079 --> 00:17:30,879
real sality and memory activity so that

491
00:17:29,919 --> 00:17:32,799
means the

492
00:17:30,880 --> 00:17:35,280
bot in the real sality talked to only

493
00:17:32,799 --> 00:17:36,000
621 other hosts whereas the mimic one

494
00:17:35,280 --> 00:17:40,480
talked to

495
00:17:36,000 --> 00:17:42,240
1059 other hosts and looking into this

496
00:17:40,480 --> 00:17:44,080
this wasn't expected because celerity

497
00:17:42,240 --> 00:17:46,160
has an ableist size of a thousand so we

498
00:17:44,080 --> 00:17:47,520
would have expected the real sality to

499
00:17:46,160 --> 00:17:50,559
communicate to at least

500
00:17:47,520 --> 00:17:52,480
a thousand other peers but looking

501
00:17:50,559 --> 00:17:53,520
deeper into the sample that was

502
00:17:52,480 --> 00:17:56,960
presented

503
00:17:53,520 --> 00:17:58,960
it only had 740 bootstrap peers

504
00:17:56,960 --> 00:18:00,080
and we assumed that in the contained

505
00:17:58,960 --> 00:18:02,480
environment where it was

506
00:18:00,080 --> 00:18:03,199
executed it was not able to find

507
00:18:02,480 --> 00:18:05,520
additional

508
00:18:03,200 --> 00:18:06,799
peers and add them to its neighbor list

509
00:18:05,520 --> 00:18:10,559
having it at such a

510
00:18:06,799 --> 00:18:10,559
lower number than expected

511
00:18:10,880 --> 00:18:15,440
similarly if we look at the bytes and

512
00:18:12,640 --> 00:18:17,760
the packets for the real salary we have

513
00:18:15,440 --> 00:18:19,600
a higher number of bytes and higher

514
00:18:17,760 --> 00:18:22,400
number of average packets exchange in

515
00:18:19,600 --> 00:18:26,159
each of these conversations

516
00:18:22,400 --> 00:18:28,080
but then again because of the salary

517
00:18:26,160 --> 00:18:29,600
sample not having a full neighbor list

518
00:18:28,080 --> 00:18:31,360
it will probably

519
00:18:29,600 --> 00:18:33,039
probe a lot of its neighbors with

520
00:18:31,360 --> 00:18:35,439
additional messages checking

521
00:18:33,039 --> 00:18:36,640
and to find additional peers to fill up

522
00:18:35,440 --> 00:18:38,320
its neighbor list

523
00:18:36,640 --> 00:18:40,960
increasing the number of packets and

524
00:18:38,320 --> 00:18:43,360
bytes exchanged for each conversation

525
00:18:40,960 --> 00:18:45,360
so if we normalize by dividing the

526
00:18:43,360 --> 00:18:48,399
number of bytes by the number of packets

527
00:18:45,360 --> 00:18:50,639
we get much more similar results of 60

528
00:18:48,400 --> 00:18:52,320
76 bytes per packet for the real 70 and

529
00:18:50,640 --> 00:18:55,200
73 bytes per packet

530
00:18:52,320 --> 00:18:56,240
for the mimic facility again the

531
00:18:55,200 --> 00:18:59,200
duration

532
00:18:56,240 --> 00:19:00,559
seems off for both of these samples but

533
00:18:59,200 --> 00:19:03,039
this is actually

534
00:19:00,559 --> 00:19:05,280
related to how the membership management

535
00:19:03,039 --> 00:19:08,320
interval functions every 40 minutes

536
00:19:05,280 --> 00:19:09,039
and if we cut the pcap at a certain

537
00:19:08,320 --> 00:19:11,200
point

538
00:19:09,039 --> 00:19:12,480
we will get these discrepancies in the

539
00:19:11,200 --> 00:19:15,760
duration

540
00:19:12,480 --> 00:19:15,760
of the conversations

541
00:19:16,559 --> 00:19:20,480
again for the packets exchange between a

542
00:19:18,720 --> 00:19:21,440
and b and b and a are just a little more

543
00:19:20,480 --> 00:19:25,360
detailed than

544
00:19:21,440 --> 00:19:29,200
the aforementioned overall averages

545
00:19:25,360 --> 00:19:30,959
so to conclude the botnet simulation

546
00:19:29,200 --> 00:19:32,480
framework can be used to simulate

547
00:19:30,960 --> 00:19:33,440
various peer-to-peer botnets and

548
00:19:32,480 --> 00:19:36,240
experiment with

549
00:19:33,440 --> 00:19:38,720
tracking and anti-tracking mechanisms it

550
00:19:36,240 --> 00:19:40,000
can be used in conjunction with id2t to

551
00:19:38,720 --> 00:19:43,679
inject botnet traffic

552
00:19:40,000 --> 00:19:45,200
into pcaps and we foresee that this

553
00:19:43,679 --> 00:19:47,440
could be used in the following cases

554
00:19:45,200 --> 00:19:49,520
such as generating communication traces

555
00:19:47,440 --> 00:19:51,520
to test intrusion detection systems and

556
00:19:49,520 --> 00:19:53,280
botnet detection mechanisms

557
00:19:51,520 --> 00:19:54,960
on botnets that we haven't seen in the

558
00:19:53,280 --> 00:19:58,000
wild before without

559
00:19:54,960 --> 00:20:00,240
releasing another botnet

560
00:19:58,000 --> 00:20:02,240
then the dynamic analysis of botnet

561
00:20:00,240 --> 00:20:04,480
resilience so in the past

562
00:20:02,240 --> 00:20:05,360
botnet resilience was oftentimes viewed

563
00:20:04,480 --> 00:20:08,320
as a

564
00:20:05,360 --> 00:20:10,080
frozen snapshot of the network and we

565
00:20:08,320 --> 00:20:11,840
could change this by

566
00:20:10,080 --> 00:20:13,280
trying sinkhole attacks or takedown

567
00:20:11,840 --> 00:20:16,000
attempts in

568
00:20:13,280 --> 00:20:17,678
the simulation while it still maintains

569
00:20:16,000 --> 00:20:18,320
its membership management and tries to

570
00:20:17,679 --> 00:20:20,320
recover

571
00:20:18,320 --> 00:20:21,678
during the process of attacking it

572
00:20:20,320 --> 00:20:23,678
leading us to

573
00:20:21,679 --> 00:20:25,200
eventually even be able to test take

574
00:20:23,679 --> 00:20:28,559
down strategies before they are

575
00:20:25,200 --> 00:20:29,200
deployed in the wild i want to leave you

576
00:20:28,559 --> 00:20:32,080
with some

577
00:20:29,200 --> 00:20:33,039
previous works that use bsf in case you

578
00:20:32,080 --> 00:20:35,520
are interested

579
00:20:33,039 --> 00:20:37,120
in looking into the capabilities even

580
00:20:35,520 --> 00:20:39,200
more and i would like you

581
00:20:37,120 --> 00:20:40,959
to thank you very much for your

582
00:20:39,200 --> 00:20:44,000
attention and i'm looking forward to

583
00:20:40,960 --> 00:20:44,000
answering your questions

584
00:20:45,720 --> 00:20:48,720
thanks

