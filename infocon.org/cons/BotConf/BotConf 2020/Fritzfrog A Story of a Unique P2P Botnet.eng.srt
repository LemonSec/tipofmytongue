1
00:00:02,080 --> 00:00:05,359
hi everyone

2
00:00:03,120 --> 00:00:07,440
thank you for joining my talk in the

3
00:00:05,359 --> 00:00:08,800
next 25 minutes i will talk to you about

4
00:00:07,440 --> 00:00:10,800
the fritz frog campaign

5
00:00:08,800 --> 00:00:13,040
which is a fascinating campaign we

6
00:00:10,800 --> 00:00:15,839
uncovered in guardicord labs

7
00:00:13,040 --> 00:00:17,359
around three months ago in august a

8
00:00:15,839 --> 00:00:19,600
couple of words about myself

9
00:00:17,359 --> 00:00:20,480
i'm a security researcher at guardicore

10
00:00:19,600 --> 00:00:22,880
labs

11
00:00:20,480 --> 00:00:24,560
i do malware analysis and reverse

12
00:00:22,880 --> 00:00:27,119
engineering and i enjoy

13
00:00:24,560 --> 00:00:28,880
learning and practicing low level topics

14
00:00:27,119 --> 00:00:32,399
like operating systems

15
00:00:28,880 --> 00:00:34,960
binary exploitation and more i wrote an

16
00:00:32,399 --> 00:00:36,880
online tutorial which is also free

17
00:00:34,960 --> 00:00:38,640
for whoever wishes to start reverse

18
00:00:36,880 --> 00:00:38,960
engineering you're welcome to give it a

19
00:00:38,640 --> 00:00:41,200
shot

20
00:00:38,960 --> 00:00:42,960
and tell me what you think and you're

21
00:00:41,200 --> 00:00:44,079
also welcome to follow me on twitter

22
00:00:42,960 --> 00:00:46,719
this is my handle

23
00:00:44,079 --> 00:00:46,719
my full name

24
00:00:47,760 --> 00:00:53,199
when did we first meet fritz frog

25
00:00:50,800 --> 00:00:54,718
so around april we started seeing attack

26
00:00:53,199 --> 00:00:56,800
incidents in our sensors

27
00:00:54,719 --> 00:00:58,719
i will talk a little about them in the

28
00:00:56,800 --> 00:01:01,519
end of this talk

29
00:00:58,719 --> 00:01:02,320
all attack incidents bear the same

30
00:01:01,520 --> 00:01:04,479
format

31
00:01:02,320 --> 00:01:05,519
so the attacker breached our sensors

32
00:01:04,479 --> 00:01:08,960
over ssh

33
00:01:05,519 --> 00:01:10,560
using brute force then two files were

34
00:01:08,960 --> 00:01:13,759
downloaded and executed

35
00:01:10,560 --> 00:01:15,439
if config and nginx the two were

36
00:01:13,760 --> 00:01:16,320
actually the same file with the same

37
00:01:15,439 --> 00:01:18,720
hash

38
00:01:16,320 --> 00:01:20,080
it was a golang binary which which was

39
00:01:18,720 --> 00:01:22,798
not recognized by

40
00:01:20,080 --> 00:01:24,560
any engine such as virustotal viruspay

41
00:01:22,799 --> 00:01:27,680
etc

42
00:01:24,560 --> 00:01:28,320
the process started scanning multiple ip

43
00:01:27,680 --> 00:01:31,200
addresses

44
00:01:28,320 --> 00:01:33,919
over ssh ports and also started

45
00:01:31,200 --> 00:01:36,400
listening on port 1234

46
00:01:33,920 --> 00:01:38,560
the fact that the malware file was

47
00:01:36,400 --> 00:01:40,880
unknown

48
00:01:38,560 --> 00:01:42,880
made it quite interesting for us so we

49
00:01:40,880 --> 00:01:44,000
signed this campaign based on the

50
00:01:42,880 --> 00:01:47,920
process names

51
00:01:44,000 --> 00:01:50,399
and we started monitoring its activity

52
00:01:47,920 --> 00:01:51,040
and we found a campaign on the rise

53
00:01:50,399 --> 00:01:54,479
actually

54
00:01:51,040 --> 00:01:57,920
it started in january of 2020

55
00:01:54,479 --> 00:01:59,360
and it just uh very rapidly

56
00:01:57,920 --> 00:02:01,360
it was increasing in the number of

57
00:01:59,360 --> 00:02:03,439
attacks we saw hundreds and even

58
00:02:01,360 --> 00:02:05,840
thousands of attacks per day

59
00:02:03,439 --> 00:02:07,039
only on our sensors so there were

60
00:02:05,840 --> 00:02:10,080
probably many more

61
00:02:07,040 --> 00:02:10,879
attacks going on and we figure this must

62
00:02:10,080 --> 00:02:14,400
be

63
00:02:10,878 --> 00:02:14,399
a huge scale campaign

64
00:02:15,440 --> 00:02:19,280
so we decided to take a deeper look into

65
00:02:18,160 --> 00:02:22,239
both the malware

66
00:02:19,280 --> 00:02:22,879
and the attack chain itself and looking

67
00:02:22,239 --> 00:02:25,680
at

68
00:02:22,879 --> 00:02:27,679
the flow in the incident in our sensor

69
00:02:25,680 --> 00:02:31,360
we notice this unusual command

70
00:02:27,680 --> 00:02:33,360
the netcat localhost1234 if you remember

71
00:02:31,360 --> 00:02:35,200
the malware itself was listening on this

72
00:02:33,360 --> 00:02:37,680
port

73
00:02:35,200 --> 00:02:39,760
so so something was trying to connect to

74
00:02:37,680 --> 00:02:40,800
the malware which acted as some kind of

75
00:02:39,760 --> 00:02:44,000
server

76
00:02:40,800 --> 00:02:46,879
and the malware responded with a base64

77
00:02:44,000 --> 00:02:47,840
string i looked at different attack

78
00:02:46,879 --> 00:02:51,200
incidents and

79
00:02:47,840 --> 00:02:53,440
this response was different every time

80
00:02:51,200 --> 00:02:55,119
of course i tried to decode the string

81
00:02:53,440 --> 00:02:57,359
and it resulted with

82
00:02:55,120 --> 00:02:59,120
nothing readable so this was probably

83
00:02:57,360 --> 00:03:03,120
binary data

84
00:02:59,120 --> 00:03:04,720
encoded this seemed very interesting to

85
00:03:03,120 --> 00:03:06,879
me i wanted to understand what this

86
00:03:04,720 --> 00:03:09,280
netcat command line was about

87
00:03:06,879 --> 00:03:10,159
and the base64 seemed like a good entry

88
00:03:09,280 --> 00:03:12,959
point

89
00:03:10,159 --> 00:03:15,840
so i took the malware file i debugged it

90
00:03:12,959 --> 00:03:18,959
i put a breakpoint on the base64

91
00:03:15,840 --> 00:03:21,120
function and i let the malware execute

92
00:03:18,959 --> 00:03:23,440
while in a separate terminal i ran

93
00:03:21,120 --> 00:03:26,239
netcat localhost 1234

94
00:03:23,440 --> 00:03:27,440
and the malware luckily immediately hit

95
00:03:26,239 --> 00:03:29,280
the breakpoint

96
00:03:27,440 --> 00:03:31,200
resulting in this beautiful call stack

97
00:03:29,280 --> 00:03:34,239
that you see right here

98
00:03:31,200 --> 00:03:35,599
so the base64 function was actually

99
00:03:34,239 --> 00:03:38,959
called from within

100
00:03:35,599 --> 00:03:41,440
a diffie-hellman key exchange function

101
00:03:38,959 --> 00:03:42,239
which was in turn called by functions

102
00:03:41,440 --> 00:03:45,359
named crypt

103
00:03:42,239 --> 00:03:46,720
new crypto communication from buffer or

104
00:03:45,360 --> 00:03:49,680
connection

105
00:03:46,720 --> 00:03:51,840
and at the top of this execution chain

106
00:03:49,680 --> 00:03:54,560
there was a function called worker

107
00:03:51,840 --> 00:03:55,760
and it had no parents so i figured this

108
00:03:54,560 --> 00:03:58,640
was executed

109
00:03:55,760 --> 00:03:58,640
as a go routine

110
00:03:59,360 --> 00:04:02,720
reverse engineering the flow a bit

111
00:04:01,280 --> 00:04:04,879
deeper i understood

112
00:04:02,720 --> 00:04:06,080
that the communication sequence was as

113
00:04:04,879 --> 00:04:08,480
follows

114
00:04:06,080 --> 00:04:11,040
the client connecting to the malware was

115
00:04:08,480 --> 00:04:13,518
expected to send its public key

116
00:04:11,040 --> 00:04:14,400
basics before encoded and the malware

117
00:04:13,519 --> 00:04:17,040
responded

118
00:04:14,400 --> 00:04:19,199
its own public key also base64 encoded

119
00:04:17,040 --> 00:04:21,759
which is exactly what we saw here

120
00:04:19,199 --> 00:04:23,280
this is a public key of the malware

121
00:04:21,759 --> 00:04:25,520
which is encoded and returned

122
00:04:23,280 --> 00:04:26,799
to the client according to the

123
00:04:25,520 --> 00:04:28,880
diffie-hellman protocol

124
00:04:26,800 --> 00:04:30,240
the two sides now derive their own

125
00:04:28,880 --> 00:04:32,880
shared secret

126
00:04:30,240 --> 00:04:33,759
which in our case is an aes encryption

127
00:04:32,880 --> 00:04:35,680
key

128
00:04:33,759 --> 00:04:37,840
and from now on communication is

129
00:04:35,680 --> 00:04:41,440
encrypted using the symmetric key

130
00:04:37,840 --> 00:04:43,440
so the client can send uh its command

131
00:04:41,440 --> 00:04:45,360
encrypted with the symmetric key and

132
00:04:43,440 --> 00:04:47,199
again base64 encoded

133
00:04:45,360 --> 00:04:49,759
and the malware sends the response in

134
00:04:47,199 --> 00:04:52,720
the same manner

135
00:04:49,759 --> 00:04:53,120
this was really nice but of course my

136
00:04:52,720 --> 00:04:55,440
next

137
00:04:53,120 --> 00:04:56,720
question was what is it for why do we

138
00:04:55,440 --> 00:04:59,280
exchange keys why do we start

139
00:04:56,720 --> 00:05:02,400
communication and what are the commands

140
00:04:59,280 --> 00:05:04,320
that are supported in this

141
00:05:02,400 --> 00:05:06,880
type of traffic what is the malware

142
00:05:04,320 --> 00:05:08,560
expecting to receive

143
00:05:06,880 --> 00:05:10,159
i went to the worker function in the

144
00:05:08,560 --> 00:05:13,440
disassembly this is

145
00:05:10,160 --> 00:05:15,120
cutter this is radar gui and the key

146
00:05:13,440 --> 00:05:17,680
exchange appears exactly where

147
00:05:15,120 --> 00:05:19,120
the arrow points after the key exchange

148
00:05:17,680 --> 00:05:21,840
takes place

149
00:05:19,120 --> 00:05:22,320
as we said before the client sends its

150
00:05:21,840 --> 00:05:25,440
command

151
00:05:22,320 --> 00:05:28,639
encrypted command the malware decrypts

152
00:05:25,440 --> 00:05:31,759
this input and then compares it to

153
00:05:28,639 --> 00:05:33,759
several different strings each

154
00:05:31,759 --> 00:05:35,199
branch here in this function corresponds

155
00:05:33,759 --> 00:05:37,600
to a command

156
00:05:35,199 --> 00:05:38,240
that the malware supports and dispatches

157
00:05:37,600 --> 00:05:41,680
further

158
00:05:38,240 --> 00:05:45,199
to another function so i zoomed in

159
00:05:41,680 --> 00:05:47,039
on each branch and i kind of

160
00:05:45,199 --> 00:05:48,800
constructed a set of commands that the

161
00:05:47,039 --> 00:05:51,840
malware supports

162
00:05:48,800 --> 00:05:53,759
and this was a resulting set i tried to

163
00:05:51,840 --> 00:05:54,638
classify the commands into several

164
00:05:53,759 --> 00:05:57,680
categories

165
00:05:54,639 --> 00:05:59,520
database payloads and administration

166
00:05:57,680 --> 00:06:00,960
each one of them had some interesting

167
00:05:59,520 --> 00:06:03,198
artifacts

168
00:06:00,960 --> 00:06:05,599
so the database operations taught me

169
00:06:03,199 --> 00:06:07,919
that the malware could

170
00:06:05,600 --> 00:06:08,960
send and receive databases either zipped

171
00:06:07,919 --> 00:06:11,359
or not

172
00:06:08,960 --> 00:06:13,359
and there was also some kind of target

173
00:06:11,360 --> 00:06:15,520
management the malware could push

174
00:06:13,360 --> 00:06:17,120
and receive targets and also force

175
00:06:15,520 --> 00:06:21,280
targets on other

176
00:06:17,120 --> 00:06:22,400
instances maybe with regards to payload

177
00:06:21,280 --> 00:06:24,159
operation

178
00:06:22,400 --> 00:06:25,758
there were capabilities of running

179
00:06:24,160 --> 00:06:27,840
scripts running

180
00:06:25,759 --> 00:06:29,680
different binary payloads and sharing

181
00:06:27,840 --> 00:06:32,880
files

182
00:06:29,680 --> 00:06:33,280
and actually the most intriguing part

183
00:06:32,880 --> 00:06:35,440
was

184
00:06:33,280 --> 00:06:36,559
in the administration operations where

185
00:06:35,440 --> 00:06:39,199
we saw

186
00:06:36,560 --> 00:06:40,639
get blob stats get peer stats and get

187
00:06:39,199 --> 00:06:44,080
vote stats

188
00:06:40,639 --> 00:06:46,000
and this terminology the the term peers

189
00:06:44,080 --> 00:06:47,359
i was not very used to seeing that

190
00:06:46,000 --> 00:06:49,919
frequently in

191
00:06:47,360 --> 00:06:53,039
my investigations of botnets so this

192
00:06:49,919 --> 00:06:55,919
kind of raised my eyebrows

193
00:06:53,039 --> 00:06:57,199
so i tried to look at the bigger picture

194
00:06:55,919 --> 00:06:59,520
there was no

195
00:06:57,199 --> 00:07:00,240
single command and control server being

196
00:06:59,520 --> 00:07:02,318
connected to

197
00:07:00,240 --> 00:07:04,319
and actually there was not even a set of

198
00:07:02,319 --> 00:07:06,800
different c2s

199
00:07:04,319 --> 00:07:08,639
connected to by the malware there was

200
00:07:06,800 --> 00:07:11,039
peer functionality going on

201
00:07:08,639 --> 00:07:12,240
with database exchanging and file

202
00:07:11,039 --> 00:07:14,479
sharing as well

203
00:07:12,240 --> 00:07:17,360
and there was massive ssh scans that you

204
00:07:14,479 --> 00:07:19,599
saw yourself at the beginning

205
00:07:17,360 --> 00:07:20,400
all this led me to understand that fritz

206
00:07:19,599 --> 00:07:22,880
frog was

207
00:07:20,400 --> 00:07:24,080
two things first it was a peer-to-peer

208
00:07:22,880 --> 00:07:27,759
botnet

209
00:07:24,080 --> 00:07:28,400
every node was its own c2 being able to

210
00:07:27,759 --> 00:07:31,520
receive

211
00:07:28,400 --> 00:07:35,840
and send commands to other nodes no

212
00:07:31,520 --> 00:07:38,080
single point of infrastructure

213
00:07:35,840 --> 00:07:39,440
and the second thing fritz frog was is

214
00:07:38,080 --> 00:07:41,758
an ssh worm

215
00:07:39,440 --> 00:07:43,280
so we try to replicate the malware to

216
00:07:41,759 --> 00:07:45,360
other ssh servers

217
00:07:43,280 --> 00:07:46,638
thus expanding the whole peer-to-peer

218
00:07:45,360 --> 00:07:50,720
network

219
00:07:46,639 --> 00:07:50,720
to other machines in the internet

220
00:07:52,160 --> 00:07:56,560
with this understanding actually the

221
00:07:54,240 --> 00:07:57,199
research process became somewhat easier

222
00:07:56,560 --> 00:07:59,680
because

223
00:07:57,199 --> 00:08:00,479
suddenly the module name started to

224
00:07:59,680 --> 00:08:02,800
click

225
00:08:00,479 --> 00:08:04,318
and uh the sequences started to make

226
00:08:02,800 --> 00:08:08,000
sense and really this

227
00:08:04,319 --> 00:08:10,639
this helped us get out our way through

228
00:08:08,000 --> 00:08:10,639
the malware

229
00:08:11,280 --> 00:08:15,919
first before we get into the the

230
00:08:13,599 --> 00:08:17,520
specific details of fritz frog

231
00:08:15,919 --> 00:08:19,359
what are the benefits of a peer-to-peer

232
00:08:17,520 --> 00:08:22,400
network so

233
00:08:19,360 --> 00:08:24,080
perhaps many of you uh can guess but a

234
00:08:22,400 --> 00:08:28,159
decentralized infrastructure

235
00:08:24,080 --> 00:08:30,080
is harder to attribute and take down

236
00:08:28,160 --> 00:08:31,360
and actually all the data is shared

237
00:08:30,080 --> 00:08:33,519
among the network so

238
00:08:31,360 --> 00:08:35,200
there's always backup you could see

239
00:08:33,519 --> 00:08:37,039
yourself that nodes can exchange

240
00:08:35,200 --> 00:08:40,000
databases and files

241
00:08:37,039 --> 00:08:41,439
so there's always backup and there's no

242
00:08:40,000 --> 00:08:44,560
single point of failure

243
00:08:41,440 --> 00:08:47,440
if one node fails to execute others will

244
00:08:44,560 --> 00:08:47,439
take over instead

245
00:08:47,839 --> 00:08:51,279
at some point we were able to intercept

246
00:08:50,080 --> 00:08:54,399
the traffic i will

247
00:08:51,279 --> 00:08:56,800
elaborate on that later on but

248
00:08:54,399 --> 00:08:57,920
the thing with peer-to-peer is you you

249
00:08:56,800 --> 00:09:00,000
can't really understand

250
00:08:57,920 --> 00:09:01,760
where commands are coming from in the

251
00:09:00,000 --> 00:09:03,519
first place so you can see commands

252
00:09:01,760 --> 00:09:05,519
being sent in the network but

253
00:09:03,519 --> 00:09:07,040
we couldn't really attribute the

254
00:09:05,519 --> 00:09:11,600
commands to

255
00:09:07,040 --> 00:09:11,599
the first node initiating them

256
00:09:12,480 --> 00:09:16,560
and now let's dig deeper into the

257
00:09:14,720 --> 00:09:18,800
infection process

258
00:09:16,560 --> 00:09:20,640
so we used to call instances running the

259
00:09:18,800 --> 00:09:22,800
malware we call them frogs

260
00:09:20,640 --> 00:09:23,920
so let's imagine a frog in the network

261
00:09:22,800 --> 00:09:26,719
we can also

262
00:09:23,920 --> 00:09:29,439
refer to it as an attacker node this

263
00:09:26,720 --> 00:09:31,440
attacker node brute forces ssh servers

264
00:09:29,440 --> 00:09:33,680
and tries to breach them

265
00:09:31,440 --> 00:09:36,000
once it manages to find a successful

266
00:09:33,680 --> 00:09:39,040
pair of username and password

267
00:09:36,000 --> 00:09:39,839
it establishes a ssh session with the

268
00:09:39,040 --> 00:09:41,920
new victim

269
00:09:39,839 --> 00:09:43,920
and copies runs the malware on the

270
00:09:41,920 --> 00:09:46,640
remote host

271
00:09:43,920 --> 00:09:47,680
using the same ssh session the attacker

272
00:09:46,640 --> 00:09:50,800
node establishes

273
00:09:47,680 --> 00:09:53,519
another peer-to-peer channel not the ssh

274
00:09:50,800 --> 00:09:55,519
one but one over port one two three four

275
00:09:53,519 --> 00:09:57,760
and it does that by running netcat

276
00:09:55,519 --> 00:09:58,480
localhost one two three four the command

277
00:09:57,760 --> 00:10:02,720
we saw

278
00:09:58,480 --> 00:10:04,560
at the very beginning of the slide deck

279
00:10:02,720 --> 00:10:06,079
if we want to see that see that more

280
00:10:04,560 --> 00:10:07,359
visually let's take a look at this

281
00:10:06,079 --> 00:10:09,519
graphic

282
00:10:07,360 --> 00:10:11,600
initially we have only the attacker node

283
00:10:09,519 --> 00:10:13,760
with the malware running on it

284
00:10:11,600 --> 00:10:16,240
the attacker node manages to breach a

285
00:10:13,760 --> 00:10:18,720
new ssh server in the internet

286
00:10:16,240 --> 00:10:20,880
and it copies the malware onto the new

287
00:10:18,720 --> 00:10:23,440
victim and runs it there

288
00:10:20,880 --> 00:10:24,160
now there is an active ssh session going

289
00:10:23,440 --> 00:10:27,360
on between

290
00:10:24,160 --> 00:10:29,760
the two ends and over this session

291
00:10:27,360 --> 00:10:31,440
the attacker node runs netcat localhost

292
00:10:29,760 --> 00:10:33,839
one two three four

293
00:10:31,440 --> 00:10:36,160
so what i want to emphasize here is that

294
00:10:33,839 --> 00:10:39,519
the netcat client

295
00:10:36,160 --> 00:10:40,240
actually runs on the remote victim so it

296
00:10:39,519 --> 00:10:42,160
connects

297
00:10:40,240 --> 00:10:43,360
to whoever listens on port one two three

298
00:10:42,160 --> 00:10:46,880
four on the victim

299
00:10:43,360 --> 00:10:49,279
which is the malware now at this point

300
00:10:46,880 --> 00:10:51,200
the attacker node can send any command

301
00:10:49,279 --> 00:10:53,439
that we saw from the command set before

302
00:10:51,200 --> 00:10:55,279
it can send get log it's status get peer

303
00:10:53,440 --> 00:10:58,800
stats get blob stats

304
00:10:55,279 --> 00:11:00,880
and this will uh reach the netcat client

305
00:10:58,800 --> 00:11:02,079
it will actually be the input of this

306
00:11:00,880 --> 00:11:04,399
netcat client

307
00:11:02,079 --> 00:11:07,199
and then directed to the malware over

308
00:11:04,399 --> 00:11:10,399
port one two three four

309
00:11:07,200 --> 00:11:10,800
so the thing i like uh you to notice

310
00:11:10,399 --> 00:11:13,279
here

311
00:11:10,800 --> 00:11:15,120
is that if i'm a firewall here standing

312
00:11:13,279 --> 00:11:18,800
right here in the middle

313
00:11:15,120 --> 00:11:21,680
all i see is standard ssh traffic

314
00:11:18,800 --> 00:11:22,800
i don't see any traffic being done over

315
00:11:21,680 --> 00:11:25,680
port 1234

316
00:11:22,800 --> 00:11:28,160
because this traffic only takes place on

317
00:11:25,680 --> 00:11:30,000
the victim node on the local host

318
00:11:28,160 --> 00:11:32,560
interface

319
00:11:30,000 --> 00:11:34,480
so this is a really nice way to kind of

320
00:11:32,560 --> 00:11:35,920
evade firewalls and there are basic

321
00:11:34,480 --> 00:11:40,839
rules

322
00:11:35,920 --> 00:11:42,079
assuming that this firewall allows stage

323
00:11:40,839 --> 00:11:45,680
traffic

324
00:11:42,079 --> 00:11:46,239
this was zoom in on a single infection

325
00:11:45,680 --> 00:11:48,479
process

326
00:11:46,240 --> 00:11:49,839
but it's important to remember that the

327
00:11:48,480 --> 00:11:53,360
whole network

328
00:11:49,839 --> 00:11:55,519
is engaged in this brute force uh effort

329
00:11:53,360 --> 00:11:56,880
and the attack force is much bigger this

330
00:11:55,519 --> 00:11:58,800
way

331
00:11:56,880 --> 00:12:01,120
now what's interesting about fritz frog

332
00:11:58,800 --> 00:12:01,839
is that it's very intelligent in the way

333
00:12:01,120 --> 00:12:05,360
that it

334
00:12:01,839 --> 00:12:08,480
manages this attack force we notice that

335
00:12:05,360 --> 00:12:10,320
no two nodes ever target

336
00:12:08,480 --> 00:12:12,880
the same ip address there is no

337
00:12:10,320 --> 00:12:14,959
intersection between the target lists of

338
00:12:12,880 --> 00:12:16,320
two nodes in the network

339
00:12:14,959 --> 00:12:18,399
and we suspect that the module

340
00:12:16,320 --> 00:12:21,200
responsible for this very smart

341
00:12:18,399 --> 00:12:22,959
management is cast votes module

342
00:12:21,200 --> 00:12:25,200
this module is responsible for

343
00:12:22,959 --> 00:12:28,239
maintaining a voting system

344
00:12:25,200 --> 00:12:29,839
where eventually it reaches a consensus

345
00:12:28,240 --> 00:12:32,720
about a winner node

346
00:12:29,839 --> 00:12:33,600
in the in the p2p network and this

347
00:12:32,720 --> 00:12:35,440
winner node

348
00:12:33,600 --> 00:12:37,680
becomes responsible for target

349
00:12:35,440 --> 00:12:41,200
distribution it tells each node

350
00:12:37,680 --> 00:12:41,199
which targets to attack

351
00:12:41,600 --> 00:12:47,519
this is a kind of a macro look at

352
00:12:44,720 --> 00:12:47,920
the brute force attempt but even at the

353
00:12:47,519 --> 00:12:50,880
node

354
00:12:47,920 --> 00:12:52,079
level every node runs multiple threads

355
00:12:50,880 --> 00:12:55,519
of the cracker module

356
00:12:52,079 --> 00:12:58,638
which is the brute forcer so fritz rock

357
00:12:55,519 --> 00:13:01,600
really puts a lot of effort into using

358
00:12:58,639 --> 00:13:04,079
a lot of resources for this brute force

359
00:13:01,600 --> 00:13:04,079
attacks

360
00:13:04,880 --> 00:13:10,800
you can see here a piece of uh

361
00:13:08,560 --> 00:13:11,760
fritz frog logs where we see different

362
00:13:10,800 --> 00:13:13,760
cracker threads

363
00:13:11,760 --> 00:13:15,920
performing brute force on various

364
00:13:13,760 --> 00:13:18,160
targets

365
00:13:15,920 --> 00:13:20,560
another interesting aspect of the fritz

366
00:13:18,160 --> 00:13:23,680
frog network is the way in which

367
00:13:20,560 --> 00:13:26,000
it transfers files between the nodes so

368
00:13:23,680 --> 00:13:27,199
it uses a torrent like file transfer

369
00:13:26,000 --> 00:13:29,600
mechanism

370
00:13:27,200 --> 00:13:30,880
where files are never transferred in

371
00:13:29,600 --> 00:13:33,440
their entirety

372
00:13:30,880 --> 00:13:35,279
they're transferred in blobs and blobs

373
00:13:33,440 --> 00:13:39,920
are pieces of binary data

374
00:13:35,279 --> 00:13:42,240
which comprise a binary file as a whole

375
00:13:39,920 --> 00:13:44,639
now each node keeps a mapping between

376
00:13:42,240 --> 00:13:47,680
the nodes that it has available to it

377
00:13:44,639 --> 00:13:48,160
and their hashes and when it wishes to

378
00:13:47,680 --> 00:13:50,880
run

379
00:13:48,160 --> 00:13:51,439
a file it needs to make sure first that

380
00:13:50,880 --> 00:13:53,920
it has

381
00:13:51,440 --> 00:13:55,760
all the necessary blobs and then a

382
00:13:53,920 --> 00:13:56,880
special designated module called

383
00:13:55,760 --> 00:13:59,040
assemble

384
00:13:56,880 --> 00:14:00,079
takes all these blobs concatenates them

385
00:13:59,040 --> 00:14:02,800
in memory

386
00:14:00,079 --> 00:14:03,599
dumps them in onto a file executes this

387
00:14:02,800 --> 00:14:07,040
file

388
00:14:03,600 --> 00:14:08,480
and deletes it immediately

389
00:14:07,040 --> 00:14:10,800
what you see here at the bottom of the

390
00:14:08,480 --> 00:14:11,440
slide is the blobs available to a

391
00:14:10,800 --> 00:14:14,719
certain

392
00:14:11,440 --> 00:14:19,199
node in the network which we gathered by

393
00:14:14,720 --> 00:14:19,199
sending this node the getdb command

394
00:14:21,199 --> 00:14:26,800
a nice use of the the assemble module

395
00:14:23,839 --> 00:14:29,440
can be seen in the cryptominer module

396
00:14:26,800 --> 00:14:31,599
fritz frog runs a monero cryptominer a

397
00:14:29,440 --> 00:14:33,600
compiled version of xmric

398
00:14:31,600 --> 00:14:35,839
and the module responsible for the

399
00:14:33,600 --> 00:14:38,480
crypto mining is called lib exec

400
00:14:35,839 --> 00:14:40,320
i just want to emphasize that this

401
00:14:38,480 --> 00:14:42,639
module is capable of running basically

402
00:14:40,320 --> 00:14:46,800
any binary file the miner is

403
00:14:42,639 --> 00:14:50,000
not hard coded to the fritz frog malware

404
00:14:46,800 --> 00:14:53,760
what you see here on the right is a loop

405
00:14:50,000 --> 00:14:53,760
where a symbol file is called

406
00:14:53,839 --> 00:14:58,880
repeatedly to assemble the whole crypto

407
00:14:56,800 --> 00:15:00,639
cryptominer binary file

408
00:14:58,880 --> 00:15:02,560
eventually like i mentioned before it

409
00:15:00,639 --> 00:15:05,600
dumps it onto a file

410
00:15:02,560 --> 00:15:08,399
executes and deletes it and also with

411
00:15:05,600 --> 00:15:11,040
regards to malware

412
00:15:08,399 --> 00:15:13,440
very similarly to other malware families

413
00:15:11,040 --> 00:15:16,240
fritz frog is also quite competitive

414
00:15:13,440 --> 00:15:18,160
so it's not sharing the local machines

415
00:15:16,240 --> 00:15:19,839
resources with others

416
00:15:18,160 --> 00:15:22,240
there is a designated module called

417
00:15:19,839 --> 00:15:24,639
antivirus which periodically checks

418
00:15:22,240 --> 00:15:25,760
for the process list and sees if there

419
00:15:24,639 --> 00:15:28,959
are any

420
00:15:25,760 --> 00:15:30,160
cpu demanding processes running if

421
00:15:28,959 --> 00:15:33,119
there's

422
00:15:30,160 --> 00:15:34,560
such a process which also has the xmric

423
00:15:33,120 --> 00:15:36,160
substring in it

424
00:15:34,560 --> 00:15:38,638
then this process is terminated

425
00:15:36,160 --> 00:15:40,719
immediately and

426
00:15:38,639 --> 00:15:43,839
first frog keeps the cpu computing

427
00:15:40,720 --> 00:15:43,839
resources to itself

428
00:15:45,199 --> 00:15:50,959
now to the fun part of the research

429
00:15:48,240 --> 00:15:51,920
at that point we could uh we understood

430
00:15:50,959 --> 00:15:54,319
the whole command

431
00:15:51,920 --> 00:15:55,759
set of the malware we could mimic the

432
00:15:54,320 --> 00:15:59,199
key exchange process

433
00:15:55,759 --> 00:16:01,519
and we could basically uh perform

434
00:15:59,199 --> 00:16:02,639
communication with frogs in the wild

435
00:16:01,519 --> 00:16:06,000
from

436
00:16:02,639 --> 00:16:06,959
end to end so we thought with that

437
00:16:06,000 --> 00:16:10,240
knowledge and keep

438
00:16:06,959 --> 00:16:12,160
an ability we could understand

439
00:16:10,240 --> 00:16:14,240
the scope of the campaign how many

440
00:16:12,160 --> 00:16:15,600
targets there were how many actual

441
00:16:14,240 --> 00:16:18,720
infected nodes

442
00:16:15,600 --> 00:16:20,959
and this is what we set out to do

443
00:16:18,720 --> 00:16:22,240
we decided to write our own tool that we

444
00:16:20,959 --> 00:16:25,439
named frogger

445
00:16:22,240 --> 00:16:25,759
and we used golang of course to speak to

446
00:16:25,440 --> 00:16:28,880
the

447
00:16:25,759 --> 00:16:29,600
attacker in their own language we also

448
00:16:28,880 --> 00:16:31,759
used

449
00:16:29,600 --> 00:16:33,360
the same libraries that they now were

450
00:16:31,759 --> 00:16:35,920
used and

451
00:16:33,360 --> 00:16:37,600
fortunately we have these in the golang

452
00:16:35,920 --> 00:16:38,880
binary because they're statically linked

453
00:16:37,600 --> 00:16:42,560
and their files

454
00:16:38,880 --> 00:16:45,920
their file names and paths are saved

455
00:16:42,560 --> 00:16:48,638
quite clearly so we use the same

456
00:16:45,920 --> 00:16:49,360
formatting libraries as you can see here

457
00:16:48,639 --> 00:16:51,600
we use the same

458
00:16:49,360 --> 00:16:52,399
diffie-hellman key exchange library

459
00:16:51,600 --> 00:16:55,839
which is of course

460
00:16:52,399 --> 00:16:57,839
also open source but we also had to

461
00:16:55,839 --> 00:16:58,880
use the same representations and the

462
00:16:57,839 --> 00:17:01,040
same

463
00:16:58,880 --> 00:17:02,880
data structures that the malware was

464
00:17:01,040 --> 00:17:06,159
using

465
00:17:02,880 --> 00:17:09,359
one of the things we wanted to do was to

466
00:17:06,160 --> 00:17:10,640
inject our own ssh server to the fritz

467
00:17:09,359 --> 00:17:13,918
frog network

468
00:17:10,640 --> 00:17:15,039
and to do that we had to kind of tell

469
00:17:13,919 --> 00:17:18,799
one of the nodes

470
00:17:15,039 --> 00:17:22,240
that there's a new breached ssh server

471
00:17:18,799 --> 00:17:22,879
which can be infected to understand how

472
00:17:22,240 --> 00:17:26,079
such

473
00:17:22,880 --> 00:17:26,720
nodes or such victims were presented we

474
00:17:26,079 --> 00:17:29,120
sent a

475
00:17:26,720 --> 00:17:30,000
get db command to one of the nodes in

476
00:17:29,120 --> 00:17:33,039
the wild

477
00:17:30,000 --> 00:17:35,440
and in return we got the full database

478
00:17:33,039 --> 00:17:36,480
part of which was the representation of

479
00:17:35,440 --> 00:17:39,760
deploy

480
00:17:36,480 --> 00:17:42,480
entities a deploy entity is a

481
00:17:39,760 --> 00:17:44,840
successfully breached ssh server

482
00:17:42,480 --> 00:17:47,360
which was not yet infected with the

483
00:17:44,840 --> 00:17:52,080
malware

484
00:17:47,360 --> 00:17:55,760
we took this data structure and

485
00:17:52,080 --> 00:17:58,320
integrated it into our code of course we

486
00:17:55,760 --> 00:18:00,879
replaced all the members with our own

487
00:17:58,320 --> 00:18:03,918
machine details and eventually

488
00:18:00,880 --> 00:18:04,960
we sent a put deploy command to one of

489
00:18:03,919 --> 00:18:08,480
the frogs

490
00:18:04,960 --> 00:18:09,919
with our own server in the payload

491
00:18:08,480 --> 00:18:11,520
and this was actually one of the most

492
00:18:09,919 --> 00:18:14,720
exciting moments of the research

493
00:18:11,520 --> 00:18:16,080
because just seconds or minutes after we

494
00:18:14,720 --> 00:18:19,919
did that

495
00:18:16,080 --> 00:18:22,639
i saw the malware process running on our

496
00:18:19,919 --> 00:18:23,600
ssh vm which meant the process was

497
00:18:22,640 --> 00:18:26,640
successful

498
00:18:23,600 --> 00:18:30,559
and we managed to inject ourselves

499
00:18:26,640 --> 00:18:30,559
ourselves into the network

500
00:18:36,640 --> 00:18:40,720
now regarding targets being able to talk

501
00:18:39,360 --> 00:18:43,039
to other nodes

502
00:18:40,720 --> 00:18:44,720
allowed us to understand the scope of

503
00:18:43,039 --> 00:18:47,440
the campaign

504
00:18:44,720 --> 00:18:48,320
so we took all the nodes we knew of and

505
00:18:47,440 --> 00:18:50,960
we asked

506
00:18:48,320 --> 00:18:52,000
each of them for their target list and

507
00:18:50,960 --> 00:18:55,120
we constructed

508
00:18:52,000 --> 00:18:56,640
this enormous target list with millions

509
00:18:55,120 --> 00:18:59,280
of targets around the world

510
00:18:56,640 --> 00:19:01,039
and put it on a map as you can see here

511
00:18:59,280 --> 00:19:04,320
the targets are mostly in the us

512
00:19:01,039 --> 00:19:05,360
in europe india and south korea and the

513
00:19:04,320 --> 00:19:08,840
sectors

514
00:19:05,360 --> 00:19:11,918
also vary we saw targets

515
00:19:08,840 --> 00:19:14,639
uh in the educational sector

516
00:19:11,919 --> 00:19:16,000
many universities around the world the

517
00:19:14,640 --> 00:19:19,760
financial sector

518
00:19:16,000 --> 00:19:19,760
and even healthcare organizations

519
00:19:20,640 --> 00:19:24,000
apart from targets we also wanted to

520
00:19:22,640 --> 00:19:26,160
know how many of them

521
00:19:24,000 --> 00:19:27,120
were actually breached how many nodes

522
00:19:26,160 --> 00:19:30,480
actually ran

523
00:19:27,120 --> 00:19:32,719
the malware at some point or another

524
00:19:30,480 --> 00:19:34,320
so we took all the ip addresses that

525
00:19:32,720 --> 00:19:37,280
attacked our sensors

526
00:19:34,320 --> 00:19:38,080
there were i think about 100 of them we

527
00:19:37,280 --> 00:19:40,000
also looked

528
00:19:38,080 --> 00:19:41,760
on showdown for machines listening on

529
00:19:40,000 --> 00:19:45,200
port 1234

530
00:19:41,760 --> 00:19:48,640
and we fine-grained our search to

531
00:19:45,200 --> 00:19:51,039
only 124 bytes responses because

532
00:19:48,640 --> 00:19:54,559
this was the response length from fritz

533
00:19:51,039 --> 00:19:57,200
frog malware the public key base64

534
00:19:54,559 --> 00:19:57,760
and then we took this initial set and we

535
00:19:57,200 --> 00:20:00,480
asked

536
00:19:57,760 --> 00:20:01,919
each node for its peer list and then we

537
00:20:00,480 --> 00:20:03,679
did this recursively

538
00:20:01,919 --> 00:20:06,720
so we ended up crawling the whole

539
00:20:03,679 --> 00:20:08,559
network and one of our more successful

540
00:20:06,720 --> 00:20:12,080
days we managed to produce this

541
00:20:08,559 --> 00:20:13,600
cluster of around 80 nodes but overall

542
00:20:12,080 --> 00:20:14,559
we saw from the beginning of the

543
00:20:13,600 --> 00:20:18,559
campaign

544
00:20:14,559 --> 00:20:20,480
around 500 infected nodes in total

545
00:20:18,559 --> 00:20:21,918
there's always a possibility that there

546
00:20:20,480 --> 00:20:24,080
were even more nodes

547
00:20:21,919 --> 00:20:26,640
and that we were simply not able to

548
00:20:24,080 --> 00:20:29,280
reach other clusters

549
00:20:26,640 --> 00:20:30,880
so there might have been even more

550
00:20:29,280 --> 00:20:34,879
infected ssh servers

551
00:20:30,880 --> 00:20:37,360
that we did not spot

552
00:20:34,880 --> 00:20:39,919
one last thing i want to show you that

553
00:20:37,360 --> 00:20:43,280
we were able to do with our frogger tool

554
00:20:39,919 --> 00:20:46,559
was to see the representation

555
00:20:43,280 --> 00:20:48,799
of file availability in the network

556
00:20:46,559 --> 00:20:51,200
so for example here we take a frog in

557
00:20:48,799 --> 00:20:52,158
the wild and we send the get blob stats

558
00:20:51,200 --> 00:20:54,720
command

559
00:20:52,159 --> 00:20:56,240
we first connect to this frog over port

560
00:20:54,720 --> 00:20:59,679
1234 which is

561
00:20:56,240 --> 00:21:03,840
the peer-to-peer port and we send the

562
00:20:59,679 --> 00:21:03,840
get blob stats

563
00:21:04,000 --> 00:21:07,919
in return we get this beautiful matrix

564
00:21:06,720 --> 00:21:10,400
where every column

565
00:21:07,919 --> 00:21:11,840
is actually a file you can see here the

566
00:21:10,400 --> 00:21:14,000
list of

567
00:21:11,840 --> 00:21:16,240
file names many of them are just the

568
00:21:14,000 --> 00:21:17,280
malware binary compiled for different

569
00:21:16,240 --> 00:21:19,840
platforms

570
00:21:17,280 --> 00:21:21,200
but this one is the lib exec file is the

571
00:21:19,840 --> 00:21:23,840
crypto miner

572
00:21:21,200 --> 00:21:25,200
so for example we have a breached node

573
00:21:23,840 --> 00:21:27,918
here we have appear

574
00:21:25,200 --> 00:21:29,280
in the network its credentials our t-box

575
00:21:27,919 --> 00:21:32,000
t-box

576
00:21:29,280 --> 00:21:34,080
and in the column that corresponds to

577
00:21:32,000 --> 00:21:34,960
the cryptal minor it has only three out

578
00:21:34,080 --> 00:21:37,360
of four

579
00:21:34,960 --> 00:21:38,080
blobs so it cannot really run the minor

580
00:21:37,360 --> 00:21:40,080
and if it

581
00:21:38,080 --> 00:21:42,559
wishes to run the crypto miner it needs

582
00:21:40,080 --> 00:21:43,039
to first ask its peers for the missing

583
00:21:42,559 --> 00:21:46,399
blob

584
00:21:43,039 --> 00:21:50,640
and then assemble all the blobs using

585
00:21:46,400 --> 00:21:50,640
a symbol module and run it locally

586
00:21:51,440 --> 00:21:54,720
so these were the technicalities of

587
00:21:53,679 --> 00:21:57,280
fritz frog

588
00:21:54,720 --> 00:21:57,840
but one might wonder what makes it

589
00:21:57,280 --> 00:22:01,678
special

590
00:21:57,840 --> 00:22:03,840
because fritz frog is not the first p2p

591
00:22:01,679 --> 00:22:05,280
botnet scene in the wild and it's not

592
00:22:03,840 --> 00:22:07,840
even the first one

593
00:22:05,280 --> 00:22:10,080
to be used for crypto mining so what

594
00:22:07,840 --> 00:22:11,760
makes it special

595
00:22:10,080 --> 00:22:13,120
i think fritz frog is special compared

596
00:22:11,760 --> 00:22:16,799
to other

597
00:22:13,120 --> 00:22:18,879
botnets in in the fact that it combines

598
00:22:16,799 --> 00:22:21,280
several characteristics

599
00:22:18,880 --> 00:22:22,320
that no other botnet combined in the

600
00:22:21,280 --> 00:22:25,120
past

601
00:22:22,320 --> 00:22:27,200
and these are those characteristics

602
00:22:25,120 --> 00:22:27,760
first of all the peer-to-peer protocol

603
00:22:27,200 --> 00:22:30,480
itself

604
00:22:27,760 --> 00:22:30,879
is written from scratch we did not see

605
00:22:30,480 --> 00:22:33,200
any

606
00:22:30,880 --> 00:22:35,520
code reviews we did not see any existing

607
00:22:33,200 --> 00:22:36,720
libraries being used or even existing

608
00:22:35,520 --> 00:22:40,799
protocols

609
00:22:36,720 --> 00:22:42,799
this looked like a very very new

610
00:22:40,799 --> 00:22:44,400
protocol being developed by very

611
00:22:42,799 --> 00:22:47,679
talented people or maybe

612
00:22:44,400 --> 00:22:50,159
person from scratch

613
00:22:47,679 --> 00:22:51,120
second thing is that the malware is sort

614
00:22:50,159 --> 00:22:53,600
of fileless

615
00:22:51,120 --> 00:22:55,918
it's not completely fileless but it does

616
00:22:53,600 --> 00:22:58,320
write files on the file system but it

617
00:22:55,919 --> 00:22:59,360
makes sure to delete them very very

618
00:22:58,320 --> 00:23:02,720
immediately

619
00:22:59,360 --> 00:23:04,158
so there's no long term traces on the

620
00:23:02,720 --> 00:23:06,840
file system

621
00:23:04,159 --> 00:23:08,240
showing that fritz frog was actually

622
00:23:06,840 --> 00:23:10,480
there

623
00:23:08,240 --> 00:23:11,679
also there is no working directory in

624
00:23:10,480 --> 00:23:14,640
the sense that

625
00:23:11,679 --> 00:23:15,039
logs are not saved locally but always

626
00:23:14,640 --> 00:23:18,400
kept

627
00:23:15,039 --> 00:23:20,640
in memory the brute force attempts are

628
00:23:18,400 --> 00:23:23,440
aggressive compared to other botnets

629
00:23:20,640 --> 00:23:24,080
some of you may know ddg it's a quite

630
00:23:23,440 --> 00:23:25,919
famous

631
00:23:24,080 --> 00:23:28,399
peer-to-peer bot that used for crypto

632
00:23:25,919 --> 00:23:29,600
mining and even ddg which is very

633
00:23:28,400 --> 00:23:33,039
powerful

634
00:23:29,600 --> 00:23:35,199
it only targets the root username

635
00:23:33,039 --> 00:23:38,000
fritz frog uses dozens of different

636
00:23:35,200 --> 00:23:39,360
usernames you could see some of them

637
00:23:38,000 --> 00:23:41,520
in the screenshot from a couple of

638
00:23:39,360 --> 00:23:43,439
slides ago and it uses

639
00:23:41,520 --> 00:23:44,559
countless of passwords so its brute

640
00:23:43,440 --> 00:23:48,159
force attempts are

641
00:23:44,559 --> 00:23:52,000
are much more aggressive however

642
00:23:48,159 --> 00:23:54,000
it still is efficient in its brute force

643
00:23:52,000 --> 00:23:55,679
attempt and in the way that it

644
00:23:54,000 --> 00:23:57,440
distributes targets and we've talked

645
00:23:55,679 --> 00:24:00,320
quite a lot about that before

646
00:23:57,440 --> 00:24:02,240
but really you can tell how much fritz

647
00:24:00,320 --> 00:24:02,879
frog cares about the resources that it

648
00:24:02,240 --> 00:24:05,200
has

649
00:24:02,880 --> 00:24:06,799
and it's making sure not to waste these

650
00:24:05,200 --> 00:24:08,240
resources and really make very

651
00:24:06,799 --> 00:24:10,639
intelligent use

652
00:24:08,240 --> 00:24:10,640
of them

653
00:24:13,600 --> 00:24:16,799
one last thing i want to talk about is

654
00:24:15,760 --> 00:24:18,559
the ultimate goal

655
00:24:16,799 --> 00:24:21,120
of fritz rock now this is kind of a

656
00:24:18,559 --> 00:24:23,840
personal note my personal thoughts on

657
00:24:21,120 --> 00:24:25,199
fritz brock's goals i have to say that

658
00:24:23,840 --> 00:24:27,840
by looking at

659
00:24:25,200 --> 00:24:29,360
the number of wallets used and the money

660
00:24:27,840 --> 00:24:31,840
made of this campaign

661
00:24:29,360 --> 00:24:33,120
it looks as if crypto mining is not the

662
00:24:31,840 --> 00:24:36,559
focal point

663
00:24:33,120 --> 00:24:39,279
of the malware authors here what i think

664
00:24:36,559 --> 00:24:39,760
is that a group of people developed a

665
00:24:39,279 --> 00:24:42,480
very

666
00:24:39,760 --> 00:24:44,799
very complex system which is a

667
00:24:42,480 --> 00:24:47,600
peer-to-peer as a service platform

668
00:24:44,799 --> 00:24:48,799
that they can offer to other attack

669
00:24:47,600 --> 00:24:51,279
groups and gangs

670
00:24:48,799 --> 00:24:53,120
for their own purposes so this

671
00:24:51,279 --> 00:24:54,960
peer-to-peer as a service can be used

672
00:24:53,120 --> 00:24:58,158
for malware deployment

673
00:24:54,960 --> 00:24:59,679
ransomware ddos and of course just

674
00:24:58,159 --> 00:25:04,240
gaining access to ssh

675
00:24:59,679 --> 00:25:04,240
servers which is also profitable today

676
00:25:04,480 --> 00:25:10,000
these are just my thoughts if you wish

677
00:25:08,000 --> 00:25:11,520
to learn more about how we collect

678
00:25:10,000 --> 00:25:13,440
information on threats

679
00:25:11,520 --> 00:25:15,600
what are the insights that we gathered

680
00:25:13,440 --> 00:25:16,400
from looking at data center targeting

681
00:25:15,600 --> 00:25:18,719
threats

682
00:25:16,400 --> 00:25:20,559
you can watch actually look at the

683
00:25:18,720 --> 00:25:23,039
slides from

684
00:25:20,559 --> 00:25:24,960
last year vodka where daniel goldberg

685
00:25:23,039 --> 00:25:27,520
and myself gave a talk

686
00:25:24,960 --> 00:25:29,200
also i invite you to take a look at our

687
00:25:27,520 --> 00:25:32,400
botnet encyclopedia

688
00:25:29,200 --> 00:25:35,360
this is quite a recent project that we

689
00:25:32,400 --> 00:25:36,320
put up and this is where we share

690
00:25:35,360 --> 00:25:38,799
information about

691
00:25:36,320 --> 00:25:39,600
new and past botanic campaigns that we

692
00:25:38,799 --> 00:25:41,600
see

693
00:25:39,600 --> 00:25:43,199
so we will be very happy to hear from

694
00:25:41,600 --> 00:25:45,600
you collaborate

695
00:25:43,200 --> 00:25:48,559
hear some feedback and just talk about

696
00:25:45,600 --> 00:25:48,559
these threats

697
00:25:48,640 --> 00:25:52,000
i'd like to thank you once again for

698
00:25:50,400 --> 00:25:53,600
your time and attention

699
00:25:52,000 --> 00:25:55,679
this is the time for questions if you

700
00:25:53,600 --> 00:26:02,080
want you can ask now or later

701
00:25:55,679 --> 00:26:02,080
on twitter so thank you

