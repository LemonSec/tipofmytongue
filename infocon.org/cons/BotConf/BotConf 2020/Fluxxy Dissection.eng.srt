1
00:00:02,480 --> 00:00:07,359
presentation is about

2
00:00:04,240 --> 00:00:10,000
a bulletproof roster uh named flexi uh

3
00:00:07,359 --> 00:00:11,920
flexi is actually a botnet a fast flag

4
00:00:10,000 --> 00:00:14,400
spot net that supports that

5
00:00:11,920 --> 00:00:15,360
bulletproof roasting but first thing

6
00:00:14,400 --> 00:00:18,320
first

7
00:00:15,360 --> 00:00:19,359
um i'm part of the technical collection

8
00:00:18,320 --> 00:00:22,720
and research

9
00:00:19,359 --> 00:00:24,480
team at monday's intelligence what we do

10
00:00:22,720 --> 00:00:26,080
is we collect four intellections

11
00:00:24,480 --> 00:00:30,400
directly from

12
00:00:26,080 --> 00:00:34,239
adversary infrastructure one of our main

13
00:00:30,400 --> 00:00:37,680
way to do that is to emulate botnets so

14
00:00:34,239 --> 00:00:40,718
we request botnets create emulators

15
00:00:37,680 --> 00:00:43,120
and use the simulators to either uh

16
00:00:40,719 --> 00:00:45,920
collect information from common controls

17
00:00:43,120 --> 00:00:49,440
or directly for the botnet

18
00:00:45,920 --> 00:00:51,039
um what kind of information we collect

19
00:00:49,440 --> 00:00:53,199
from that

20
00:00:51,039 --> 00:00:55,280
obviously we get indicators high

21
00:00:53,199 --> 00:00:58,320
confidence indicators because

22
00:00:55,280 --> 00:00:59,680
when you have emulator that use a botnet

23
00:00:58,320 --> 00:01:03,039
protocol and

24
00:00:59,680 --> 00:01:04,159
successfully connect to a server using

25
00:01:03,039 --> 00:01:05,920
that protocol

26
00:01:04,159 --> 00:01:09,200
that means that that server is

27
00:01:05,920 --> 00:01:12,560
differently related to that button

28
00:01:09,200 --> 00:01:13,280
also we we get um things like web

29
00:01:12,560 --> 00:01:15,360
injects

30
00:01:13,280 --> 00:01:18,320
so web injects are small scripts that

31
00:01:15,360 --> 00:01:21,840
are injected into browsers to collect

32
00:01:18,320 --> 00:01:26,320
um user credentials and

33
00:01:21,840 --> 00:01:29,759
those crypts also use what we call uh

34
00:01:26,320 --> 00:01:32,559
ats dota secondary controllers for

35
00:01:29,759 --> 00:01:34,079
to which the intercepted credentials are

36
00:01:32,560 --> 00:01:37,520
sent to

37
00:01:34,079 --> 00:01:38,479
for spambots what we get you see our

38
00:01:37,520 --> 00:01:42,960
spam template

39
00:01:38,479 --> 00:01:46,079
that is whenever a new spam campaign

40
00:01:42,960 --> 00:01:48,079
is pushed to the bots user usually

41
00:01:46,079 --> 00:01:50,960
received

42
00:01:48,079 --> 00:01:52,158
a spam template that is a template to

43
00:01:50,960 --> 00:01:55,679
generate

44
00:01:52,159 --> 00:01:58,719
emails to send for the campaign

45
00:01:55,680 --> 00:02:02,000
for other kind of botnets but network

46
00:01:58,719 --> 00:02:04,079
um the owner sells some part

47
00:02:02,000 --> 00:02:06,840
the botnet that could be a compromised

48
00:02:04,079 --> 00:02:08,239
machine see what it does it it sells

49
00:02:06,840 --> 00:02:10,720
access and

50
00:02:08,239 --> 00:02:11,840
for that kind of product what we see is

51
00:02:10,720 --> 00:02:15,280
usually

52
00:02:11,840 --> 00:02:18,319
secondary payloads for example when

53
00:02:15,280 --> 00:02:21,120
the owner of the botnet sell a bot uh

54
00:02:18,319 --> 00:02:22,720
to another actor that actor might deploy

55
00:02:21,120 --> 00:02:26,239
steerer

56
00:02:22,720 --> 00:02:26,640
we can to run somewhere this is the kind

57
00:02:26,239 --> 00:02:28,879
of

58
00:02:26,640 --> 00:02:30,640
activity we can detect that button

59
00:02:28,879 --> 00:02:33,760
animation

60
00:02:30,640 --> 00:02:37,440
we also have some dedicated trackers

61
00:02:33,760 --> 00:02:39,760
for example for bulletproof foster

62
00:02:37,440 --> 00:02:41,200
because bulletproof foster are

63
00:02:39,760 --> 00:02:45,120
interesting for us

64
00:02:41,200 --> 00:02:48,720
um many botnets

65
00:02:45,120 --> 00:02:50,959
use controllers behind bulletproof

66
00:02:48,720 --> 00:02:52,640
and that sometimes blurs the lines uh

67
00:02:50,959 --> 00:02:55,599
between the different actors and

68
00:02:52,640 --> 00:02:57,359
if you can track the blade professor and

69
00:02:55,599 --> 00:03:00,640
the infrastructure behind

70
00:02:57,360 --> 00:03:02,800
you are able to do a better breakdown

71
00:03:00,640 --> 00:03:05,359
over the different actors in the

72
00:03:02,800 --> 00:03:07,760
different products

73
00:03:05,360 --> 00:03:08,640
so to do that we support about 60

74
00:03:07,760 --> 00:03:11,920
families

75
00:03:08,640 --> 00:03:13,119
uh the most famous one are immorted

76
00:03:11,920 --> 00:03:17,920
trick bot

77
00:03:13,120 --> 00:03:21,440
jack about selenite so yeah about 60.

78
00:03:17,920 --> 00:03:24,640
so what about flex so flux c

79
00:03:21,440 --> 00:03:25,200
is a fast flux spot next that is used as

80
00:03:24,640 --> 00:03:29,599
a

81
00:03:25,200 --> 00:03:33,040
protection layer to hide the back ends

82
00:03:29,599 --> 00:03:36,159
so it does bus um

83
00:03:33,040 --> 00:03:39,840
dns service that is resolving

84
00:03:36,159 --> 00:03:42,239
um domain names

85
00:03:39,840 --> 00:03:43,519
to eyepiece to that or to that

86
00:03:42,239 --> 00:03:47,120
protection layer

87
00:03:43,519 --> 00:03:48,959
and content delivery that is once that

88
00:03:47,120 --> 00:03:50,159
domain name must be resolved to the

89
00:03:48,959 --> 00:03:53,760
protection layer

90
00:03:50,159 --> 00:03:55,120
the protection layer act as a proxy

91
00:03:53,760 --> 00:03:59,040
between the back end

92
00:03:55,120 --> 00:04:00,959
that is hidden and the customer or the

93
00:03:59,040 --> 00:04:05,120
client

94
00:04:00,959 --> 00:04:08,159
um so that that's a real business um

95
00:04:05,120 --> 00:04:11,200
we know about two actors uh selling

96
00:04:08,159 --> 00:04:14,319
the fluxy service on the underground

97
00:04:11,200 --> 00:04:15,839
one is cc web cc uh directly is a

98
00:04:14,319 --> 00:04:17,839
protection layer that is

99
00:04:15,840 --> 00:04:20,238
provides you with a panel uh to

100
00:04:17,839 --> 00:04:23,119
configure your backend

101
00:04:20,238 --> 00:04:24,960
and the domain names you want to to to

102
00:04:23,120 --> 00:04:29,440
point to that backend

103
00:04:24,960 --> 00:04:32,080
and it

104
00:04:29,440 --> 00:04:33,919
it sells you that that service where the

105
00:04:32,080 --> 00:04:36,159
protection layer would be

106
00:04:33,919 --> 00:04:38,159
configured between the backend and the

107
00:04:36,160 --> 00:04:41,280
domain name

108
00:04:38,160 --> 00:04:44,880
uh seoul hosts um provide

109
00:04:41,280 --> 00:04:46,880
a similar service but directly vps that

110
00:04:44,880 --> 00:04:50,000
is already configured behind

111
00:04:46,880 --> 00:04:51,759
that protection layer actually we don't

112
00:04:50,000 --> 00:04:55,520
know if cc web

113
00:04:51,759 --> 00:04:57,840
and sol hosts are 200 for the same actor

114
00:04:55,520 --> 00:04:58,560
but we definitely know that both are

115
00:04:57,840 --> 00:05:02,719
selling

116
00:04:58,560 --> 00:05:06,240
the service associated to flexi

117
00:05:02,720 --> 00:05:09,600
um that amount of money for

118
00:05:06,240 --> 00:05:11,919
for bulletproof oscar is pretty high

119
00:05:09,600 --> 00:05:15,039
compared to competitors such as

120
00:05:11,919 --> 00:05:18,639
lachinda braziers uh

121
00:05:15,039 --> 00:05:19,599
thing is uh fluxy really seek for high

122
00:05:18,639 --> 00:05:22,080
end consumers

123
00:05:19,600 --> 00:05:23,199
a customer that can pay that amount of

124
00:05:22,080 --> 00:05:25,199
money

125
00:05:23,199 --> 00:05:26,880
for example we saw gun crab when it was

126
00:05:25,199 --> 00:05:30,160
still active 9mm

127
00:05:26,880 --> 00:05:33,840
fin 11 distribution um

128
00:05:30,160 --> 00:05:36,960
many crowding forums

129
00:05:33,840 --> 00:05:37,359
that is for marketplaces where you can

130
00:05:36,960 --> 00:05:40,479
buy

131
00:05:37,360 --> 00:05:43,680
stolen credit cards or stolen

132
00:05:40,479 --> 00:05:46,400
access stolen credentials

133
00:05:43,680 --> 00:05:48,720
obviously for that kind of business you

134
00:05:46,400 --> 00:05:52,479
want to hide your backend

135
00:05:48,720 --> 00:05:56,800
um so this summarize what i

136
00:05:52,479 --> 00:05:59,840
explained that is um

137
00:05:56,800 --> 00:06:03,840
when you uh want to access

138
00:05:59,840 --> 00:06:04,880
um a server that is hosted on flexi

139
00:06:03,840 --> 00:06:07,919
first thing

140
00:06:04,880 --> 00:06:11,280
you resolve a domain name

141
00:06:07,919 --> 00:06:13,039
associated to the to that server

142
00:06:11,280 --> 00:06:14,559
uh you resolve that domain name of your

143
00:06:13,039 --> 00:06:19,199
public dns

144
00:06:14,560 --> 00:06:22,160
obviously the public dns such as quad 81

145
00:06:19,199 --> 00:06:23,199
would forward the request to the

146
00:06:22,160 --> 00:06:25,520
associated name

147
00:06:23,199 --> 00:06:27,660
server that net server is actually

148
00:06:25,520 --> 00:06:28,880
posted on flexi

149
00:06:27,660 --> 00:06:32,560
[Music]

150
00:06:28,880 --> 00:06:33,360
flexi would reply with a dozen ip

151
00:06:32,560 --> 00:06:36,800
addresses

152
00:06:33,360 --> 00:06:39,919
that point back to the flexible net then

153
00:06:36,800 --> 00:06:41,600
for example if you do http you would

154
00:06:39,919 --> 00:06:44,639
contact that ip address

155
00:06:41,600 --> 00:06:45,039
with the associated host and the flexi

156
00:06:44,639 --> 00:06:48,080
node

157
00:06:45,039 --> 00:06:51,280
would forward the request to a back end

158
00:06:48,080 --> 00:06:54,159
and act as a proxy between uh the client

159
00:06:51,280 --> 00:06:54,960
and the back end so it's a fast flexbot

160
00:06:54,160 --> 00:06:58,639
yes

161
00:06:54,960 --> 00:07:01,039
because the ip uh that are provided by

162
00:06:58,639 --> 00:07:02,240
botnet for domain name change about

163
00:07:01,039 --> 00:07:04,719
every 15 minutes

164
00:07:02,240 --> 00:07:08,160
and that's the same for to the name so

165
00:07:04,720 --> 00:07:08,160
associated name zero

166
00:07:08,560 --> 00:07:12,720
actually there is a secondary botnet

167
00:07:11,199 --> 00:07:17,280
that is named 14.

168
00:07:12,720 --> 00:07:20,400
there are few analyses about 13 malware

169
00:07:17,280 --> 00:07:23,599
so 14 is actually just a loader

170
00:07:20,400 --> 00:07:26,638
that and the first in botnet acts

171
00:07:23,599 --> 00:07:27,440
as an infection pool for flexi so

172
00:07:26,639 --> 00:07:29,599
whenever

173
00:07:27,440 --> 00:07:31,520
the operators want to replace the flexi

174
00:07:29,599 --> 00:07:34,880
node because it is burning

175
00:07:31,520 --> 00:07:36,159
or because it got infected they select

176
00:07:34,880 --> 00:07:38,719
the thirteen node

177
00:07:36,160 --> 00:07:41,280
checked it's legit uh running a few

178
00:07:38,720 --> 00:07:44,319
tests on it

179
00:07:41,280 --> 00:07:48,000
and promote it to flexi that is loading

180
00:07:44,319 --> 00:07:51,120
the flexi binary and

181
00:07:48,000 --> 00:07:53,840
mapping the bot id to

182
00:07:51,120 --> 00:07:55,280
production network we know that both

183
00:07:53,840 --> 00:07:58,159
networks are related

184
00:07:55,280 --> 00:07:59,679
because they share controllers so pretty

185
00:07:58,160 --> 00:08:03,599
good indicator to

186
00:07:59,680 --> 00:08:07,680
to tell that both networks are related

187
00:08:03,599 --> 00:08:11,039
um so what we want to do

188
00:08:07,680 --> 00:08:14,319
is to collect information from the

189
00:08:11,039 --> 00:08:15,680
adversary infrastructure here uh so the

190
00:08:14,319 --> 00:08:18,080
first thing to do that

191
00:08:15,680 --> 00:08:19,120
is to understand how the flux networks

192
00:08:18,080 --> 00:08:22,240
communicate with

193
00:08:19,120 --> 00:08:25,680
its control so flexi

194
00:08:22,240 --> 00:08:27,840
use uh what we name dns become

195
00:08:25,680 --> 00:08:29,520
that is you take the message you want to

196
00:08:27,840 --> 00:08:30,719
send to a controller you encode that

197
00:08:29,520 --> 00:08:32,718
into a domain

198
00:08:30,720 --> 00:08:33,760
you append that domain to a master

199
00:08:32,719 --> 00:08:36,399
domain

200
00:08:33,760 --> 00:08:37,120
and you send that big domain for

201
00:08:36,399 --> 00:08:41,760
resolution

202
00:08:37,120 --> 00:08:43,279
for pb dns obviously the public dns

203
00:08:41,760 --> 00:08:47,600
infrastructure will

204
00:08:43,279 --> 00:08:51,200
forward that domain name to

205
00:08:47,600 --> 00:08:54,240
the associated name server and

206
00:08:51,200 --> 00:08:57,120
the flux operators typically

207
00:08:54,240 --> 00:08:58,480
control either to associate an m server

208
00:08:57,120 --> 00:09:01,760
or control a gateway

209
00:08:58,480 --> 00:09:07,120
between the public dns

210
00:09:01,760 --> 00:09:10,160
exits and the configured name zero

211
00:09:07,120 --> 00:09:10,399
so this is not new technologies there

212
00:09:10,160 --> 00:09:13,600
are

213
00:09:10,399 --> 00:09:16,800
many malwares that use

214
00:09:13,600 --> 00:09:20,480
that kind of beacon however

215
00:09:16,800 --> 00:09:22,160
um when a malware use that kind of

216
00:09:20,480 --> 00:09:25,519
technology usually

217
00:09:22,160 --> 00:09:29,920
the dns becomes that is the domain names

218
00:09:25,519 --> 00:09:33,040
and up on passive dns databases

219
00:09:29,920 --> 00:09:36,240
um and flux operators know that

220
00:09:33,040 --> 00:09:39,040
so say and they don't want or become to

221
00:09:36,240 --> 00:09:39,519
be located into passive dns so what they

222
00:09:39,040 --> 00:09:42,719
do

223
00:09:39,519 --> 00:09:45,760
is that on all dns requests

224
00:09:42,720 --> 00:09:49,360
they reply with a server fail

225
00:09:45,760 --> 00:09:52,800
uh and that that's that's amazing that

226
00:09:49,360 --> 00:09:55,440
tells you that dns

227
00:09:52,800 --> 00:09:56,000
resolution just failed because the

228
00:09:55,440 --> 00:10:00,160
server

229
00:09:56,000 --> 00:10:01,360
did not answer so so that that's usually

230
00:10:00,160 --> 00:10:04,480
enough for

231
00:10:01,360 --> 00:10:09,120
to prevent dns resolution

232
00:10:04,480 --> 00:10:12,160
request to be logged in passive dns

233
00:10:09,120 --> 00:10:16,839
but back in 2013

234
00:10:12,160 --> 00:10:21,439
there was an outage that and

235
00:10:16,839 --> 00:10:24,959
several uh public dns servers

236
00:10:21,440 --> 00:10:28,160
um were failing and resolved

237
00:10:24,959 --> 00:10:28,800
all domain names to the to the same ip

238
00:10:28,160 --> 00:10:33,040
address

239
00:10:28,800 --> 00:10:36,079
this was documented on teknet

240
00:10:33,040 --> 00:10:38,800
and one of the fluxy master

241
00:10:36,079 --> 00:10:40,560
was part of that heritage so for a short

242
00:10:38,800 --> 00:10:43,680
period of time

243
00:10:40,560 --> 00:10:46,239
all dns requests to that master

244
00:10:43,680 --> 00:10:47,040
actually result to a valid ip address

245
00:10:46,240 --> 00:10:50,079
and

246
00:10:47,040 --> 00:10:53,599
the dns resolution and

247
00:10:50,079 --> 00:10:54,399
on passive dns databases so that's an

248
00:10:53,600 --> 00:10:59,120
example of

249
00:10:54,399 --> 00:11:02,160
a fluxy become you can find on

250
00:10:59,120 --> 00:11:04,160
passive dns so that big domain with the

251
00:11:02,160 --> 00:11:07,839
word on part of the beginning

252
00:11:04,160 --> 00:11:10,959
uh is actually the message and the last

253
00:11:07,839 --> 00:11:17,040
part masters.labs.com

254
00:11:10,959 --> 00:11:17,040
is uh a master a flexi master domain

255
00:11:17,360 --> 00:11:23,360
so um no we have that beacon and what we

256
00:11:20,800 --> 00:11:26,640
want to do is to decode it

257
00:11:23,360 --> 00:11:29,839
so um that's

258
00:11:26,640 --> 00:11:32,880
where it gets a bit more difficult um

259
00:11:29,839 --> 00:11:35,600
flexi binaries use a

260
00:11:32,880 --> 00:11:37,360
a library a simple space library that is

261
00:11:35,600 --> 00:11:40,560
named crypto pp

262
00:11:37,360 --> 00:11:41,600
uh it's a library where all public

263
00:11:40,560 --> 00:11:45,518
algorithms

264
00:11:41,600 --> 00:11:47,920
are encoded or with the same template it

265
00:11:45,519 --> 00:11:51,120
is say all coded with sampling template

266
00:11:47,920 --> 00:11:53,439
lsa elliptic curve

267
00:11:51,120 --> 00:11:55,040
all those public algorithms are encoded

268
00:11:53,440 --> 00:11:58,320
with the same template because

269
00:11:55,040 --> 00:11:59,760
say most most of them relies on on the

270
00:11:58,320 --> 00:12:02,480
same primitive

271
00:11:59,760 --> 00:12:02,880
as the same cryptographic primitive and

272
00:12:02,480 --> 00:12:05,279
what

273
00:12:02,880 --> 00:12:07,200
change is how you do an addition how you

274
00:12:05,279 --> 00:12:10,480
do an exponentiation

275
00:12:07,200 --> 00:12:13,760
how how you do that that kind of thing

276
00:12:10,480 --> 00:12:16,959
and so that that to

277
00:12:13,760 --> 00:12:21,279
reverse uh that kind

278
00:12:16,959 --> 00:12:21,760
of code when all symbols repeat you

279
00:12:21,279 --> 00:12:25,439
really

280
00:12:21,760 --> 00:12:26,079
need to know how the different algorithm

281
00:12:25,440 --> 00:12:29,360
works

282
00:12:26,079 --> 00:12:31,519
so yeah i made it for flexi and i was

283
00:12:29,360 --> 00:12:34,800
able to identify that fluxie

284
00:12:31,519 --> 00:12:38,160
uh used algama so algamal is a pretty

285
00:12:34,800 --> 00:12:39,519
simple algorithm so the idea is that you

286
00:12:38,160 --> 00:12:43,199
have a field

287
00:12:39,519 --> 00:12:46,160
generated by a prime and generator

288
00:12:43,200 --> 00:12:47,040
so here it's three uh your public key

289
00:12:46,160 --> 00:12:49,279
just

290
00:12:47,040 --> 00:12:50,639
a number in that in that field that you

291
00:12:49,279 --> 00:12:53,360
exponentiate

292
00:12:50,639 --> 00:12:54,399
uh that is you take three and you

293
00:12:53,360 --> 00:12:57,680
exponentiate

294
00:12:54,399 --> 00:13:00,560
three with um your private key

295
00:12:57,680 --> 00:13:01,680
you obtain a public key and you use that

296
00:13:00,560 --> 00:13:05,199
public key to

297
00:13:01,680 --> 00:13:08,638
encrypt new messages uh so

298
00:13:05,200 --> 00:13:11,680
obviously uh it is difficult

299
00:13:08,639 --> 00:13:14,079
to come to the private key from the

300
00:13:11,680 --> 00:13:17,680
public key because this quick logarithm

301
00:13:14,079 --> 00:13:19,359
is a difficult operation however you you

302
00:13:17,680 --> 00:13:22,719
can notice that

303
00:13:19,360 --> 00:13:24,880
probably that public key is pretty small

304
00:13:22,720 --> 00:13:27,040
and if you have the right to link such

305
00:13:24,880 --> 00:13:30,720
as schedule nfs

306
00:13:27,040 --> 00:13:33,680
you can actually compute the logarithm

307
00:13:30,720 --> 00:13:34,000
and obtain the private key so this is

308
00:13:33,680 --> 00:13:37,040
what

309
00:13:34,000 --> 00:13:40,800
i did here so uh

310
00:13:37,040 --> 00:13:44,639
k1fs is pretty simple to use

311
00:13:40,800 --> 00:13:48,000
you use a dlp option put that big number

312
00:13:44,639 --> 00:13:52,720
and it will compute a discrete logarithm

313
00:13:48,000 --> 00:13:56,000
however and this is a principle of the

314
00:13:52,720 --> 00:13:59,199
field saving you you

315
00:13:56,000 --> 00:14:02,399
you don't know which base that logarithm

316
00:13:59,199 --> 00:14:04,079
is computed from it is it can be any

317
00:14:02,399 --> 00:14:06,720
base and what we want

318
00:14:04,079 --> 00:14:09,120
is the logarithm on base three three

319
00:14:06,720 --> 00:14:12,720
being the generator of the field

320
00:14:09,120 --> 00:14:16,320
so uh once you have the result from

321
00:14:12,720 --> 00:14:19,519
um keto and fs you just need to

322
00:14:16,320 --> 00:14:22,639
divide that result uh

323
00:14:19,519 --> 00:14:24,000
by the luxury logarithm that is also

324
00:14:22,639 --> 00:14:27,600
provided by

325
00:14:24,000 --> 00:14:32,480
k2nfs so that that is those few lines of

326
00:14:27,600 --> 00:14:32,480
python uh sure how to compute

327
00:14:34,000 --> 00:14:40,720
that final logarithm

328
00:14:37,680 --> 00:14:43,760
and you open that private key five

329
00:14:40,720 --> 00:14:46,000
eight six four five so on

330
00:14:43,760 --> 00:14:47,839
so once you have that private key you

331
00:14:46,000 --> 00:14:51,600
can decode that message

332
00:14:47,839 --> 00:14:54,000
it just you just need to to decrypt with

333
00:14:51,600 --> 00:14:54,959
elgamal with the provided favorite key

334
00:14:54,000 --> 00:14:58,240
and what you get

335
00:14:54,959 --> 00:15:01,760
is protocol version here it's one

336
00:14:58,240 --> 00:15:04,800
the current protocol version is 12.

337
00:15:01,760 --> 00:15:07,920
uh the node ib that

338
00:15:04,800 --> 00:15:11,760
that is the ip address of

339
00:15:07,920 --> 00:15:14,160
of the victim machine a few facts

340
00:15:11,760 --> 00:15:16,800
that tell you if the machine is vm if

341
00:15:14,160 --> 00:15:18,959
it's a stretch one loaded stage one is

342
00:15:16,800 --> 00:15:20,160
the first team binary i told you about

343
00:15:18,959 --> 00:15:23,680
before

344
00:15:20,160 --> 00:15:25,279
um and if it has firewall activated or

345
00:15:23,680 --> 00:15:28,719
not

346
00:15:25,279 --> 00:15:31,519
um then you get uptime the

347
00:15:28,720 --> 00:15:32,079
the uptime is used to you know select

348
00:15:31,519 --> 00:15:34,639
the nodes

349
00:15:32,079 --> 00:15:36,638
that are put into production if you have

350
00:15:34,639 --> 00:15:40,399
enough time that is too short you

351
00:15:36,639 --> 00:15:43,440
in staging 18 until you're obtained

352
00:15:40,399 --> 00:15:44,160
growing up to to to know that the

353
00:15:43,440 --> 00:15:46,240
machine is

354
00:15:44,160 --> 00:15:47,360
variable enough to to be put in

355
00:15:46,240 --> 00:15:50,959
production

356
00:15:47,360 --> 00:15:53,759
and finally the bot id so that's

357
00:15:50,959 --> 00:15:56,160
the really important part so i told you

358
00:15:53,759 --> 00:15:59,360
about that selection process

359
00:15:56,160 --> 00:16:00,560
where you have first team node promoted

360
00:15:59,360 --> 00:16:03,839
to flexi

361
00:16:00,560 --> 00:16:04,719
when they do that promotion they record

362
00:16:03,839 --> 00:16:07,759
the bot id

363
00:16:04,720 --> 00:16:09,839
as part of the production network the

364
00:16:07,759 --> 00:16:13,759
flexi production network

365
00:16:09,839 --> 00:16:16,480
and if you become with a random bot id

366
00:16:13,759 --> 00:16:17,360
that i don't know you generate it under

367
00:16:16,480 --> 00:16:19,519
me

368
00:16:17,360 --> 00:16:22,320
you won't get any reply you won't get

369
00:16:19,519 --> 00:16:25,040
any config you won't get in

370
00:16:22,320 --> 00:16:26,399
into the network actually you really

371
00:16:25,040 --> 00:16:29,519
need to use

372
00:16:26,399 --> 00:16:33,440
a bot id that has been selected

373
00:16:29,519 --> 00:16:35,759
to be able to receive configuration from

374
00:16:33,440 --> 00:16:38,880
the flexi network

375
00:16:35,759 --> 00:16:42,000
so this is why being able to take

376
00:16:38,880 --> 00:16:44,959
to intercept first those beacons

377
00:16:42,000 --> 00:16:45,360
and to be able to decrypt those beacons

378
00:16:44,959 --> 00:16:46,880
is

379
00:16:45,360 --> 00:16:50,399
really important what you want to

380
00:16:46,880 --> 00:16:53,680
collect information from the botnet

381
00:16:50,399 --> 00:16:54,800
so that what i just presented was

382
00:16:53,680 --> 00:16:58,279
actually the

383
00:16:54,800 --> 00:17:01,120
flux protocol until end

384
00:16:58,279 --> 00:17:04,240
2019 in 2019

385
00:17:01,120 --> 00:17:05,280
they released a new binary that i named

386
00:17:04,240 --> 00:17:08,559
flexi ffp

387
00:17:05,280 --> 00:17:09,439
ffp being a reference uh in in the fluxy

388
00:17:08,559 --> 00:17:14,079
binary

389
00:17:09,439 --> 00:17:14,079
and it stands for fast flux proxy

390
00:17:14,400 --> 00:17:18,720
when that deployment of that new version

391
00:17:17,439 --> 00:17:21,360
of flexi happened

392
00:17:18,720 --> 00:17:22,079
a couple researchers noticed that and

393
00:17:21,359 --> 00:17:25,359
saw that

394
00:17:22,079 --> 00:17:28,879
a new fast flex board that was emerging

395
00:17:25,359 --> 00:17:32,159
actually he and one of the name kavin

396
00:17:28,880 --> 00:17:34,160
gave was sound defects

397
00:17:32,160 --> 00:17:36,080
and actually it's really the same but

398
00:17:34,160 --> 00:17:40,240
that it's just flexible

399
00:17:36,080 --> 00:17:41,120
where new uh new binary were deployed

400
00:17:40,240 --> 00:17:44,640
and sys

401
00:17:41,120 --> 00:17:47,918
those binary features new capabilities

402
00:17:44,640 --> 00:17:51,679
uh so resulting about that looked

403
00:17:47,919 --> 00:17:55,679
a bit different um

404
00:17:51,679 --> 00:17:59,520
so again what we what you have to do

405
00:17:55,679 --> 00:18:02,640
when you track adversary infrastructure

406
00:17:59,520 --> 00:18:04,240
and there's new deployment of binary yet

407
00:18:02,640 --> 00:18:07,840
you need to reverse it and to

408
00:18:04,240 --> 00:18:11,200
understand again to the protocol

409
00:18:07,840 --> 00:18:13,520
so what they did here is they really

410
00:18:11,200 --> 00:18:15,679
improved that enrollment process you

411
00:18:13,520 --> 00:18:16,559
know i told you about that thirteen part

412
00:18:15,679 --> 00:18:19,520
well

413
00:18:16,559 --> 00:18:21,440
they're promoted uh notes to flexi and

414
00:18:19,520 --> 00:18:25,520
also you have additional checks

415
00:18:21,440 --> 00:18:28,960
on on once in production so

416
00:18:25,520 --> 00:18:32,240
um that that new protocol

417
00:18:28,960 --> 00:18:35,440
uh don't use dns bitcoin anymore

418
00:18:32,240 --> 00:18:38,280
uh what they do is uh first they

419
00:18:35,440 --> 00:18:39,919
check um a master domain here

420
00:18:38,280 --> 00:18:43,918
assassin.com

421
00:18:39,919 --> 00:18:46,240
and uh fetch to associate the txt record

422
00:18:43,919 --> 00:18:48,400
so it takes a record is just a text

423
00:18:46,240 --> 00:18:48,799
associated to a domain name and store it

424
00:18:48,400 --> 00:18:52,559
on

425
00:18:48,799 --> 00:18:53,918
public dns infrastructures and that txt

426
00:18:52,559 --> 00:18:58,480
record is actually

427
00:18:53,919 --> 00:18:58,480
an rc signature and

428
00:18:58,720 --> 00:19:03,760
to access binary into the

429
00:19:01,840 --> 00:19:04,879
hardcoded public key and if that

430
00:19:03,760 --> 00:19:08,320
signature match

431
00:19:04,880 --> 00:19:10,080
the recipient then go to the binding

432
00:19:08,320 --> 00:19:11,600
data

433
00:19:10,080 --> 00:19:13,918
they coded it further there is an

434
00:19:11,600 --> 00:19:18,320
additional rc4 there

435
00:19:13,919 --> 00:19:23,280
and anterior for the resulting data

436
00:19:18,320 --> 00:19:26,559
as ipr races so for example on the 512

437
00:19:23,280 --> 00:19:31,120
hour signature you have about 12

438
00:19:26,559 --> 00:19:33,200
bytes of binding data um

439
00:19:31,120 --> 00:19:35,120
so once you have decoded the padding

440
00:19:33,200 --> 00:19:37,919
data into an iep address

441
00:19:35,120 --> 00:19:38,479
you take your become message you encrypt

442
00:19:37,919 --> 00:19:40,880
it with

443
00:19:38,480 --> 00:19:41,520
elliptic curve again publicly escorted

444
00:19:40,880 --> 00:19:45,120
into the

445
00:19:41,520 --> 00:19:48,559
in the sample and uh

446
00:19:45,120 --> 00:19:52,799
you send that beacon

447
00:19:48,559 --> 00:19:56,320
blindly on any udp portal any icmp

448
00:19:52,799 --> 00:19:58,000
id associated to that ip address

449
00:19:56,320 --> 00:19:59,678
and you do that blind that if you send

450
00:19:58,000 --> 00:20:02,240
the backend at all you don't

451
00:19:59,679 --> 00:20:03,039
expect any reply you don't even know if

452
00:20:02,240 --> 00:20:06,240
the packet

453
00:20:03,039 --> 00:20:08,480
reached the ip address but

454
00:20:06,240 --> 00:20:11,360
if you do that correctly and if you pass

455
00:20:08,480 --> 00:20:14,400
a few checks they'll do on

456
00:20:11,360 --> 00:20:18,719
on the node you'll receive a new config

457
00:20:14,400 --> 00:20:23,440
with new master domain new crypto keys

458
00:20:18,720 --> 00:20:25,919
new dgs a whole new configuration

459
00:20:23,440 --> 00:20:28,000
uh and you do that again that is you

460
00:20:25,919 --> 00:20:29,600
have a new master refer to txt record go

461
00:20:28,000 --> 00:20:30,559
to the padding data decode the type

462
00:20:29,600 --> 00:20:33,760
adding data get

463
00:20:30,559 --> 00:20:37,600
ip addresses and again do blind

464
00:20:33,760 --> 00:20:41,200
becomes to those ip addresses or udps

465
00:20:37,600 --> 00:20:44,559
icmp in the meantime

466
00:20:41,200 --> 00:20:47,840
so they say say no control node

467
00:20:44,559 --> 00:20:49,200
with that staging configuration and then

468
00:20:47,840 --> 00:20:50,559
we'll test the node and we'll test the

469
00:20:49,200 --> 00:20:52,799
boundaries and we'll

470
00:20:50,559 --> 00:20:53,760
test the running processes they will

471
00:20:52,799 --> 00:20:54,879
test um

472
00:20:53,760 --> 00:20:58,240
[Music]

473
00:20:54,880 --> 00:21:01,280
the attached devices um so

474
00:20:58,240 --> 00:21:03,840
so that they're sure that that node

475
00:21:01,280 --> 00:21:04,879
can be put into production it is legit

476
00:21:03,840 --> 00:21:08,158
it is

477
00:21:04,880 --> 00:21:11,280
okay to to use so if you pass

478
00:21:08,159 --> 00:21:14,400
all those stages just all those tests

479
00:21:11,280 --> 00:21:16,559
and if you do the beginning correctly

480
00:21:14,400 --> 00:21:18,159
at some point you would receive a final

481
00:21:16,559 --> 00:21:20,559
prediction configuration

482
00:21:18,159 --> 00:21:21,440
from the flexi network and this is how

483
00:21:20,559 --> 00:21:23,918
you know that

484
00:21:21,440 --> 00:21:24,880
binary is completely related to flexi

485
00:21:23,919 --> 00:21:27,520
because

486
00:21:24,880 --> 00:21:28,480
the the source of the of the conflict

487
00:21:27,520 --> 00:21:31,840
would be

488
00:21:28,480 --> 00:21:31,840
a flexi sub network

489
00:21:32,240 --> 00:21:38,880
this is for example the

490
00:21:35,360 --> 00:21:39,840
uh the rss signature that is associated

491
00:21:38,880 --> 00:21:43,520
to accessing the

492
00:21:39,840 --> 00:21:48,158
moon.com and uh

493
00:21:43,520 --> 00:21:51,200
the uh aerospace public key that is uh

494
00:21:48,159 --> 00:21:54,080
the modulus actually that modulus is

495
00:21:51,200 --> 00:21:54,480
is weak that is you can factor it uh

496
00:21:54,080 --> 00:21:57,360
into

497
00:21:54,480 --> 00:21:57,360
two primes

498
00:21:57,600 --> 00:22:01,840
that fact would be important for what's

499
00:22:00,000 --> 00:22:05,520
coming next

500
00:22:01,840 --> 00:22:06,799
so now what's interesting with that new

501
00:22:05,520 --> 00:22:13,039
version of flexing

502
00:22:06,799 --> 00:22:16,720
is the ways i manage um bots

503
00:22:13,039 --> 00:22:19,760
so you can push configuration

504
00:22:16,720 --> 00:22:23,120
to to board that is that would include

505
00:22:19,760 --> 00:22:26,320
crypto keys um there's a

506
00:22:23,120 --> 00:22:29,600
master domains dg configuration

507
00:22:26,320 --> 00:22:33,678
ssl certificates because the node

508
00:22:29,600 --> 00:22:34,559
will act as a as a proxy for content

509
00:22:33,679 --> 00:22:38,320
delivery

510
00:22:34,559 --> 00:22:41,840
and that can be over sensor

511
00:22:38,320 --> 00:22:44,960
and you can also push new binaries or

512
00:22:41,840 --> 00:22:48,399
send commands but those needs to be

513
00:22:44,960 --> 00:22:51,760
signed with much larger um

514
00:22:48,400 --> 00:22:55,760
rsa key i believe if i remember

515
00:22:51,760 --> 00:22:58,879
correctly it's 2048 bits key

516
00:22:55,760 --> 00:23:02,720
so that one i won't be able to crack but

517
00:22:58,880 --> 00:23:06,400
anyway but what's interesting there

518
00:23:02,720 --> 00:23:08,640
is that all that configuration you can

519
00:23:06,400 --> 00:23:11,919
push to node you cannot read it back

520
00:23:08,640 --> 00:23:15,280
that is by design the the

521
00:23:11,919 --> 00:23:15,600
the flux developer uh made it difficult

522
00:23:15,280 --> 00:23:18,080
to

523
00:23:15,600 --> 00:23:19,360
to read back the configuration of a node

524
00:23:18,080 --> 00:23:20,639
so that

525
00:23:19,360 --> 00:23:22,399
they know that if they push

526
00:23:20,640 --> 00:23:25,120
configuration to a node

527
00:23:22,400 --> 00:23:26,240
themselves they cannot read it back so

528
00:23:25,120 --> 00:23:28,239
they know that

529
00:23:26,240 --> 00:23:30,240
security researcher won't be able to

530
00:23:28,240 --> 00:23:34,320
with information

531
00:23:30,240 --> 00:23:37,760
those interesting information for a node

532
00:23:34,320 --> 00:23:40,158
what you however what you can do or

533
00:23:37,760 --> 00:23:42,158
what you can read from a node are

534
00:23:40,159 --> 00:23:44,720
process running process names

535
00:23:42,159 --> 00:23:45,919
no telemetry data to check that the node

536
00:23:44,720 --> 00:23:49,039
is okay

537
00:23:45,919 --> 00:23:50,640
uh attached devices to check that the

538
00:23:49,039 --> 00:23:53,279
notice legit and not

539
00:23:50,640 --> 00:23:54,159
you know security research or virtual

540
00:23:53,279 --> 00:23:58,000
machine

541
00:23:54,159 --> 00:23:59,760
um some statistics uh and telemetry on

542
00:23:58,000 --> 00:24:04,400
the unborn data that is

543
00:23:59,760 --> 00:24:06,879
uh what ip addresses um

544
00:24:04,400 --> 00:24:08,559
or a client for content delivery or dns

545
00:24:06,880 --> 00:24:10,799
requests

546
00:24:08,559 --> 00:24:12,158
about check let's say that web chat you

547
00:24:10,799 --> 00:24:15,520
you just send a message

548
00:24:12,159 --> 00:24:16,159
and the flexi binary would take a memory

549
00:24:15,520 --> 00:24:19,440
dump of

550
00:24:16,159 --> 00:24:20,159
its own process and send that memory

551
00:24:19,440 --> 00:24:23,360
dump

552
00:24:20,159 --> 00:24:27,039
to uh the controller the controller

553
00:24:23,360 --> 00:24:30,240
being the ip address that was decoded

554
00:24:27,039 --> 00:24:34,559
from the rsa signature

555
00:24:30,240 --> 00:24:38,799
in the binding data so if you control

556
00:24:34,559 --> 00:24:42,080
signature you would be able to encode

557
00:24:38,799 --> 00:24:43,440
an ip address there and if you trigger a

558
00:24:42,080 --> 00:24:46,639
bulk tank

559
00:24:43,440 --> 00:24:50,000
then you can get my rhythm and wait the

560
00:24:46,640 --> 00:24:53,279
not configuration so yeah it's

561
00:24:50,000 --> 00:24:57,039
not easy but that's way and

562
00:24:53,279 --> 00:25:00,559
another interesting point with flatty

563
00:24:57,039 --> 00:25:02,080
is it's dns server because it's

564
00:25:00,559 --> 00:25:05,120
completely custom

565
00:25:02,080 --> 00:25:06,000
for example it supports a subset of dns

566
00:25:05,120 --> 00:25:08,320
records

567
00:25:06,000 --> 00:25:09,039
it has some motor tuning capabilities

568
00:25:08,320 --> 00:25:12,799
that is

569
00:25:09,039 --> 00:25:13,200
um typically a subdomain would raise up

570
00:25:12,799 --> 00:25:15,760
to

571
00:25:13,200 --> 00:25:17,760
to the same ips master domain if you

572
00:25:15,760 --> 00:25:20,240
take a dot a dot a dot a

573
00:25:17,760 --> 00:25:21,760
dot flexi domain you would get the same

574
00:25:20,240 --> 00:25:24,960
ip addresses

575
00:25:21,760 --> 00:25:28,400
as the flexi domain so this is not

576
00:25:24,960 --> 00:25:31,919
usual behavior for dns error and

577
00:25:28,400 --> 00:25:35,039
this is a way to identify flexi

578
00:25:31,919 --> 00:25:37,760
domains uh similarly the

579
00:25:35,039 --> 00:25:39,520
soa is auto generated on the requested

580
00:25:37,760 --> 00:25:42,960
domain so if you do

581
00:25:39,520 --> 00:25:46,240
a dot a dot a dot a you get an soe

582
00:25:42,960 --> 00:25:49,520
generated on that b domain which is

583
00:25:46,240 --> 00:25:51,840
completely unusual

584
00:25:49,520 --> 00:25:53,120
so it's it's a really good way to figure

585
00:25:51,840 --> 00:25:55,760
print dna

586
00:25:53,120 --> 00:25:57,199
dns infrastructure supported by 30 or

587
00:25:55,760 --> 00:26:01,039
dns domains

588
00:25:57,200 --> 00:26:01,039
all the flux dns domains

589
00:26:01,679 --> 00:26:09,600
another interesting feature is they can

590
00:26:06,080 --> 00:26:10,000
implement whitelist and blacklist on on

591
00:26:09,600 --> 00:26:12,959
the

592
00:26:10,000 --> 00:26:14,240
dna server so if you're blacklisted so

593
00:26:12,960 --> 00:26:17,760
dns error won't

594
00:26:14,240 --> 00:26:21,200
reply to your dns requests

595
00:26:17,760 --> 00:26:22,879
although they have a masquerade list

596
00:26:21,200 --> 00:26:24,720
that is if you are on the master at

597
00:26:22,880 --> 00:26:28,559
least the

598
00:26:24,720 --> 00:26:29,279
dns would reply with other ip addresses

599
00:26:28,559 --> 00:26:33,039
that

600
00:26:29,279 --> 00:26:33,679
decoy ip addresses ah i'm not sure how

601
00:26:33,039 --> 00:26:37,200
they

602
00:26:33,679 --> 00:26:38,880
use that but yeah my my belief is that

603
00:26:37,200 --> 00:26:41,520
they use that to

604
00:26:38,880 --> 00:26:43,200
you know to blur lines and to make

605
00:26:41,520 --> 00:26:44,400
security companies or security

606
00:26:43,200 --> 00:26:47,039
researchers think that

607
00:26:44,400 --> 00:26:48,080
the domain is legit because it does not

608
00:26:47,039 --> 00:26:51,520
result to

609
00:26:48,080 --> 00:26:54,720
bad ipl races uh

610
00:26:51,520 --> 00:26:54,720
finally there is a

611
00:26:55,679 --> 00:26:58,880
a default domain that is configured on

612
00:26:58,159 --> 00:27:01,679
all nodes

613
00:26:58,880 --> 00:27:02,080
and that domain is derived from the bot

614
00:27:01,679 --> 00:27:04,400
id

615
00:27:02,080 --> 00:27:07,678
so if you have the bot id you can check

616
00:27:04,400 --> 00:27:10,960
that the node

617
00:27:07,679 --> 00:27:14,559
is is actually live and

618
00:27:10,960 --> 00:27:17,200
a flexi node all those can be used to

619
00:27:14,559 --> 00:27:20,399
figure print flexi nodes

620
00:27:17,200 --> 00:27:23,120
uh also flexi does contain delivery

621
00:27:20,399 --> 00:27:23,520
and that's an example of a configuration

622
00:27:23,120 --> 00:27:26,639
of

623
00:27:23,520 --> 00:27:30,158
content delivery so i believe that was a

624
00:27:26,640 --> 00:27:33,279
progression for dreamworld

625
00:27:30,159 --> 00:27:37,360
so all those domains all those

626
00:27:33,279 --> 00:27:40,640
domains used as host for http proxy

627
00:27:37,360 --> 00:27:44,639
would be and the data would be forwarded

628
00:27:40,640 --> 00:27:47,520
to that ip address on port 80.

629
00:27:44,640 --> 00:27:48,080
that mapping that proxy mapping is

630
00:27:47,520 --> 00:27:50,960
associated

631
00:27:48,080 --> 00:27:51,918
to blacklist they also use blacklist and

632
00:27:50,960 --> 00:27:55,440
whitelist for

633
00:27:51,919 --> 00:27:56,880
content delivery and uh what you can see

634
00:27:55,440 --> 00:28:00,720
tcp

635
00:27:56,880 --> 00:28:01,440
bl ash is actually the hash of the

636
00:28:00,720 --> 00:28:03,279
blacklist

637
00:28:01,440 --> 00:28:06,240
and to get the actual blacklist you need

638
00:28:03,279 --> 00:28:09,919
to query a pure flux node

639
00:28:06,240 --> 00:28:13,200
for for the blacklist with ash

640
00:28:09,919 --> 00:28:17,039
and also that mapping is actually

641
00:28:13,200 --> 00:28:19,120
bound to ssl and the ssl session is

642
00:28:17,039 --> 00:28:20,720
ended on the flexi node that's

643
00:28:19,120 --> 00:28:22,320
interesting because the traffic between

644
00:28:20,720 --> 00:28:24,399
the node and

645
00:28:22,320 --> 00:28:25,760
the back end is actually in click clear

646
00:28:24,399 --> 00:28:29,279
text and

647
00:28:25,760 --> 00:28:31,520
so the node receive the certificate and

648
00:28:29,279 --> 00:28:33,919
prove a key for the certificate to do

649
00:28:31,520 --> 00:28:37,679
the ssl termination

650
00:28:33,919 --> 00:28:39,760
um but this is just an example

651
00:28:37,679 --> 00:28:41,760
say they also have also configuration

652
00:28:39,760 --> 00:28:44,960
where the the traffic is actually

653
00:28:41,760 --> 00:28:45,600
encrypted uh end to end and not point to

654
00:28:44,960 --> 00:28:49,279
point

655
00:28:45,600 --> 00:28:52,639
like this one uh they have that that

656
00:28:49,279 --> 00:28:55,360
protocol that actually looks like true

657
00:28:52,640 --> 00:28:56,080
uh protocol when they can you know

658
00:28:55,360 --> 00:28:58,000
encrypt

659
00:28:56,080 --> 00:29:00,240
the traffic at the entry node and

660
00:28:58,000 --> 00:29:03,279
decrypt the traffic at the exit node

661
00:29:00,240 --> 00:29:05,200
and in the middle the traffic is is

662
00:29:03,279 --> 00:29:07,360
encrypted so if you control the exit

663
00:29:05,200 --> 00:29:10,399
node you would be able to see

664
00:29:07,360 --> 00:29:12,479
the the reply click and if you control

665
00:29:10,399 --> 00:29:15,600
the entry node you can see the

666
00:29:12,480 --> 00:29:17,520
occurring clear text which is actually

667
00:29:15,600 --> 00:29:18,959
the same as store if you control exit

668
00:29:17,520 --> 00:29:20,639
there or

669
00:29:18,960 --> 00:29:22,399
exit nodes you can you can see some

670
00:29:20,640 --> 00:29:25,679
ultimate traffic

671
00:29:22,399 --> 00:29:28,399
um and that's all for today and

672
00:29:25,679 --> 00:29:32,240
i hope you liked the presentation if you

673
00:29:28,399 --> 00:29:32,239
have any questions i'm happy to answer

674
00:29:34,679 --> 00:29:37,679
them

