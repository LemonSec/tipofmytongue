1
00:00:03,679 --> 00:00:09,040
welcome to our talk a detailed look

2
00:00:05,759 --> 00:00:10,960
into the mosi peer-to-peer imt botnet

3
00:00:09,040 --> 00:00:12,959
my name is chris dietrich and we will

4
00:00:10,960 --> 00:00:14,559
present joint work with andreas klopsch

5
00:00:12,960 --> 00:00:16,320
and rafa edgefinger

6
00:00:14,559 --> 00:00:18,160
we are all affiliated with the institute

7
00:00:16,320 --> 00:00:19,600
for internet security at the westphalian

8
00:00:18,160 --> 00:00:21,439
university in germany

9
00:00:19,600 --> 00:00:23,359
where i am professor for computer

10
00:00:21,439 --> 00:00:25,680
security

11
00:00:23,359 --> 00:00:28,720
from a research perspective we focus on

12
00:00:25,680 --> 00:00:30,320
tracking botnets that target iot devices

13
00:00:28,720 --> 00:00:31,919
and here's our motivation why we looked

14
00:00:30,320 --> 00:00:33,680
at mosi

15
00:00:31,920 --> 00:00:34,960
the set of malware families can be

16
00:00:33,680 --> 00:00:37,440
grouped in

17
00:00:34,960 --> 00:00:38,480
four categories and this is not aiming

18
00:00:37,440 --> 00:00:41,519
for completeness

19
00:00:38,480 --> 00:00:43,279
but rather one way to structure it with

20
00:00:41,520 --> 00:00:45,520
mirai in 2016

21
00:00:43,280 --> 00:00:47,280
financially motivated actors entered the

22
00:00:45,520 --> 00:00:49,200
iot stage

23
00:00:47,280 --> 00:00:51,360
miradai received a lot of media

24
00:00:49,200 --> 00:00:52,719
attention due to significant impact of

25
00:00:51,360 --> 00:00:55,760
events such as

26
00:00:52,719 --> 00:00:58,239
ddosing a dying a large dns provider or

27
00:00:55,760 --> 00:01:00,079
taking down craps on security

28
00:00:58,239 --> 00:01:01,599
probably in an act of despair the

29
00:01:00,079 --> 00:01:04,080
original authors of miui

30
00:01:01,600 --> 00:01:05,920
published their source code probably to

31
00:01:04,080 --> 00:01:08,640
mislead investigations

32
00:01:05,920 --> 00:01:09,439
but as a result we have all kinds of

33
00:01:08,640 --> 00:01:12,000
offsprings

34
00:01:09,439 --> 00:01:14,960
even appearing today which reuse parts

35
00:01:12,000 --> 00:01:18,159
of the original mirai code

36
00:01:14,960 --> 00:01:18,720
since 2018 with a publication of vpn

37
00:01:18,159 --> 00:01:21,200
filter

38
00:01:18,720 --> 00:01:23,520
we know that iot botnets are also

39
00:01:21,200 --> 00:01:26,240
subject to espionage tooling

40
00:01:23,520 --> 00:01:27,280
most likely used in nation state backed

41
00:01:26,240 --> 00:01:29,679
activities

42
00:01:27,280 --> 00:01:30,960
at least given the fbi's attribution of

43
00:01:29,680 --> 00:01:34,000
apn filter to

44
00:01:30,960 --> 00:01:36,158
fancy bear the third group is composed

45
00:01:34,000 --> 00:01:39,840
of destructive botnets

46
00:01:36,159 --> 00:01:42,799
that means actors aiming for sabotage

47
00:01:39,840 --> 00:01:44,880
and both brickabot and silex are two

48
00:01:42,799 --> 00:01:47,280
examples of this group

49
00:01:44,880 --> 00:01:49,119
and finally we have botnets that have

50
00:01:47,280 --> 00:01:51,680
been active for quite some time

51
00:01:49,119 --> 00:01:52,320
occasionally even years where we still

52
00:01:51,680 --> 00:01:55,840
don't know

53
00:01:52,320 --> 00:01:56,479
the actor's intent these are the known

54
00:01:55,840 --> 00:01:58,880
unknowns

55
00:01:56,479 --> 00:02:00,560
if you will and mosey is part of this

56
00:01:58,880 --> 00:02:02,719
category

57
00:02:00,560 --> 00:02:04,880
hajime for example also belongs to this

58
00:02:02,719 --> 00:02:05,679
category and while it has existed for

59
00:02:04,880 --> 00:02:08,318
years

60
00:02:05,680 --> 00:02:10,640
the motivation of the actors behind it

61
00:02:08,318 --> 00:02:13,679
are still not fully understood

62
00:02:10,639 --> 00:02:17,519
with mozy it kind of felt similar to us

63
00:02:13,680 --> 00:02:17,520
so we wanted to take a closer look

64
00:02:18,319 --> 00:02:24,160
what is mosey mosey is a malware that

65
00:02:21,040 --> 00:02:26,400
targets linux-based iot devices

66
00:02:24,160 --> 00:02:28,319
by far the majority of infected devices

67
00:02:26,400 --> 00:02:30,959
have a mips processor

68
00:02:28,319 --> 00:02:32,720
but we also see arm power pc and there's

69
00:02:30,959 --> 00:02:36,000
a strong indication that

70
00:02:32,720 --> 00:02:38,239
there's some x86 as well

71
00:02:36,000 --> 00:02:39,680
all our analysis is based on reverse

72
00:02:38,239 --> 00:02:42,239
engineering mips and

73
00:02:39,680 --> 00:02:44,640
arm samples and tracking the botnet's

74
00:02:42,239 --> 00:02:46,400
command control activity

75
00:02:44,640 --> 00:02:48,000
speaking of command control mosi

76
00:02:46,400 --> 00:02:48,959
exhibits a pretty unique command and

77
00:02:48,000 --> 00:02:51,120
control

78
00:02:48,959 --> 00:02:52,640
where the bittorrent distributed hash

79
00:02:51,120 --> 00:02:54,560
table protocol

80
00:02:52,640 --> 00:02:56,879
serves as a carrier protocol for command

81
00:02:54,560 --> 00:02:59,599
control

82
00:02:56,879 --> 00:03:00,480
now this may sound somewhat similar to

83
00:02:59,599 --> 00:03:03,040
hajime

84
00:03:00,480 --> 00:03:04,000
which also used the bittorrent dht but

85
00:03:03,040 --> 00:03:06,799
mozy clearly

86
00:03:04,000 --> 00:03:08,560
differs in many regards and we will

87
00:03:06,800 --> 00:03:10,720
outline some of them here

88
00:03:08,560 --> 00:03:13,360
the name mosi is based on file names

89
00:03:10,720 --> 00:03:16,560
used in propagation

90
00:03:13,360 --> 00:03:18,800
mosi was first seen in september 2019

91
00:03:16,560 --> 00:03:20,159
and initially publicly described by two

92
00:03:18,800 --> 00:03:23,920
researchers from

93
00:03:20,159 --> 00:03:26,399
uh chinese 360 in december 2019 so

94
00:03:23,920 --> 00:03:27,839
roughly one year ago and it's still

95
00:03:26,400 --> 00:03:30,080
actively being developed

96
00:03:27,840 --> 00:03:30,959
and most recently had a significant

97
00:03:30,080 --> 00:03:34,959
outbreak in

98
00:03:30,959 --> 00:03:37,440
september 2020. if we take a look at the

99
00:03:34,959 --> 00:03:39,040
binaries of the malware samples they

100
00:03:37,440 --> 00:03:40,560
arrive at statically linked health

101
00:03:39,040 --> 00:03:43,040
binaries

102
00:03:40,560 --> 00:03:45,040
linked to the microc ellipses which is a

103
00:03:43,040 --> 00:03:48,319
small

104
00:03:45,040 --> 00:03:52,400
c library and they use a custom

105
00:03:48,319 --> 00:03:54,879
upx unpacker where the header fields are

106
00:03:52,400 --> 00:03:56,319
some header fields are zeroed out as has

107
00:03:54,879 --> 00:03:59,359
been previously documented by

108
00:03:56,319 --> 00:04:02,000
last while in born let's take a look at

109
00:03:59,360 --> 00:04:05,360
the commander control mechanism

110
00:04:02,000 --> 00:04:07,840
botnets using bittorrent are not new

111
00:04:05,360 --> 00:04:09,840
but mozi uses the bittorrent dht in a

112
00:04:07,840 --> 00:04:12,400
pretty unique way

113
00:04:09,840 --> 00:04:13,280
so each node in the bittorrent dht has a

114
00:04:12,400 --> 00:04:16,000
20 byte

115
00:04:13,280 --> 00:04:17,358
node id and typically the whole id is

116
00:04:16,000 --> 00:04:20,000
chosen randomly

117
00:04:17,358 --> 00:04:20,959
however for mosi the id consists of a

118
00:04:20,000 --> 00:04:24,240
prefix

119
00:04:20,959 --> 00:04:27,120
typically 8888

120
00:04:24,240 --> 00:04:28,560
and 14 randomly chosen bytes in the

121
00:04:27,120 --> 00:04:30,560
regular dht

122
00:04:28,560 --> 00:04:32,880
an xor metric is used to compute the

123
00:04:30,560 --> 00:04:34,960
distance between two such hashes

124
00:04:32,880 --> 00:04:36,320
but mosey does not really make use of

125
00:04:34,960 --> 00:04:39,680
that

126
00:04:36,320 --> 00:04:40,560
in fact while the regular dht forms a

127
00:04:39,680 --> 00:04:42,639
structured

128
00:04:40,560 --> 00:04:44,240
peer-to-peer network the most

129
00:04:42,639 --> 00:04:45,040
peer-to-peer network must rather be

130
00:04:44,240 --> 00:04:47,199
considered

131
00:04:45,040 --> 00:04:49,199
an unstructured peer-to-peer network

132
00:04:47,199 --> 00:04:51,840
that just happens to be implemented on

133
00:04:49,199 --> 00:04:55,759
top of the bittorrent dht

134
00:04:51,840 --> 00:04:58,080
the malware uses two message types

135
00:04:55,759 --> 00:04:59,759
namely the pls request and the

136
00:04:58,080 --> 00:05:01,919
corresponding response

137
00:04:59,759 --> 00:05:02,960
to crawl the peer-to-peer network and

138
00:05:01,919 --> 00:05:06,719
look for further

139
00:05:02,960 --> 00:05:09,840
mosi peers and the ping message type to

140
00:05:06,720 --> 00:05:12,000
check for liveliness of

141
00:05:09,840 --> 00:05:13,119
given that all mosi nodes use the same

142
00:05:12,000 --> 00:05:15,759
prefix

143
00:05:13,120 --> 00:05:16,639
they kind of gravitate around the node

144
00:05:15,759 --> 00:05:19,759
id prefix

145
00:05:16,639 --> 00:05:21,440
in the peer-to-peer network now let's

146
00:05:19,759 --> 00:05:22,400
say we have an established peer-to-peer

147
00:05:21,440 --> 00:05:26,560
network

148
00:05:22,400 --> 00:05:31,280
shown by these nodes down here

149
00:05:26,560 --> 00:05:33,919
how does mosi crawl the network

150
00:05:31,280 --> 00:05:34,638
if it crawls a regular bittorrent dht

151
00:05:33,919 --> 00:05:37,840
node

152
00:05:34,639 --> 00:05:41,199
that means it sends a peerless request

153
00:05:37,840 --> 00:05:42,320
for a target id which has the same

154
00:05:41,199 --> 00:05:46,800
prefix

155
00:05:42,320 --> 00:05:49,520
and some randomly chosen bytes

156
00:05:46,800 --> 00:05:50,560
a regular dht node will respond with a

157
00:05:49,520 --> 00:05:53,680
set of nodes

158
00:05:50,560 --> 00:05:58,479
in the network say node c

159
00:05:53,680 --> 00:06:02,160
d and f and this set may contain both

160
00:05:58,479 --> 00:06:05,758
mosi nodes and non-mosi nodes

161
00:06:02,160 --> 00:06:08,880
however when it crawls a mosi node

162
00:06:05,759 --> 00:06:08,880
let's say node c

163
00:06:09,039 --> 00:06:12,880
then there are two ways that c can

164
00:06:12,160 --> 00:06:15,039
respond

165
00:06:12,880 --> 00:06:16,800
it can either respond with a peerless

166
00:06:15,039 --> 00:06:19,520
response

167
00:06:16,800 --> 00:06:20,960
that is a set of peers but in this case

168
00:06:19,520 --> 00:06:23,599
the set of peers are

169
00:06:20,960 --> 00:06:24,880
only mosi nodes let's say just the node

170
00:06:23,600 --> 00:06:27,600
f

171
00:06:24,880 --> 00:06:27,919
or it can respond with a config that is

172
00:06:27,600 --> 00:06:30,639
just

173
00:06:27,919 --> 00:06:31,840
masqueraded as a pls response and the

174
00:06:30,639 --> 00:06:35,039
interesting part here

175
00:06:31,840 --> 00:06:35,679
is that the choice is made at random so

176
00:06:35,039 --> 00:06:39,120
with a

177
00:06:35,680 --> 00:06:40,720
33 choice on average c will return a

178
00:06:39,120 --> 00:06:43,280
peerless response

179
00:06:40,720 --> 00:06:44,639
consisting of further mozi nodes and

180
00:06:43,280 --> 00:06:47,840
with a 66

181
00:06:44,639 --> 00:06:50,800
chance it will return a

182
00:06:47,840 --> 00:06:53,119
and this is actually quite clever the

183
00:06:50,800 --> 00:06:53,759
code that is used to implement the php

184
00:06:53,120 --> 00:06:55,919
component

185
00:06:53,759 --> 00:06:57,199
is largely based but completely but

186
00:06:55,919 --> 00:07:00,639
largely

187
00:06:57,199 --> 00:07:04,639
on open source code called dht bootstrap

188
00:07:00,639 --> 00:07:06,960
that was initially published in 2009

189
00:07:04,639 --> 00:07:08,639
let's take a look at the config and the

190
00:07:06,960 --> 00:07:10,479
capabilities

191
00:07:08,639 --> 00:07:13,440
and i don't really want to go into too

192
00:07:10,479 --> 00:07:13,440
much detail here

193
00:07:13,840 --> 00:07:17,280
but mosey can be instructed to take part

194
00:07:16,080 --> 00:07:18,719
in ddos attacks

195
00:07:17,280 --> 00:07:20,719
you can download and execute signed

196
00:07:18,720 --> 00:07:24,960
binaries that's not really

197
00:07:20,720 --> 00:07:28,840
new but by the way the whole conflict is

198
00:07:24,960 --> 00:07:31,919
ecdsa signed so yeah it's

199
00:07:28,840 --> 00:07:32,960
protected and a pretty interesting

200
00:07:31,919 --> 00:07:36,240
capability

201
00:07:32,960 --> 00:07:38,799
is the network traffic manipulation

202
00:07:36,240 --> 00:07:39,599
mosi binds a raw socket to bridge

203
00:07:38,800 --> 00:07:42,639
devices

204
00:07:39,599 --> 00:07:43,520
and manipulates dns and plain text http

205
00:07:42,639 --> 00:07:46,080
packets

206
00:07:43,520 --> 00:07:48,000
for dns we believe it can inst can be

207
00:07:46,080 --> 00:07:50,960
instructed to

208
00:07:48,000 --> 00:07:52,639
modify dns resolutions that means to

209
00:07:50,960 --> 00:07:53,039
redirect the domain you know somewhere

210
00:07:52,639 --> 00:07:56,000
else

211
00:07:53,039 --> 00:07:59,120
have it point to a different ip rest and

212
00:07:56,000 --> 00:08:02,160
with plaintext http it is able to inject

213
00:07:59,120 --> 00:08:04,160
javascript however

214
00:08:02,160 --> 00:08:06,720
we have not observed any of their

215
00:08:04,160 --> 00:08:09,039
functionalities of neither the details

216
00:08:06,720 --> 00:08:10,160
activity nor the network traffic

217
00:08:09,039 --> 00:08:13,520
manipulation

218
00:08:10,160 --> 00:08:16,800
in the wild yet

219
00:08:13,520 --> 00:08:18,240
um let's look at the population right i

220
00:08:16,800 --> 00:08:20,000
mean that's what everybody's interested

221
00:08:18,240 --> 00:08:22,160
in how big is it

222
00:08:20,000 --> 00:08:23,199
while we've tracked it um since the end

223
00:08:22,160 --> 00:08:25,680
of last year

224
00:08:23,199 --> 00:08:26,879
we only showed data since may in this

225
00:08:25,680 --> 00:08:30,160
graph

226
00:08:26,879 --> 00:08:32,560
notice that the y-axis has a log scale

227
00:08:30,160 --> 00:08:33,360
and up until september 9th we typically

228
00:08:32,559 --> 00:08:35,279
measured

229
00:08:33,360 --> 00:08:36,880
something between two to four thousand

230
00:08:35,279 --> 00:08:40,799
unique node ids

231
00:08:36,880 --> 00:08:44,080
or ipv4 addresses per 24 hour interval

232
00:08:40,799 --> 00:08:47,439
possibly with a few small peaks

233
00:08:44,080 --> 00:08:50,080
however on september 10th mosey grew

234
00:08:47,440 --> 00:08:52,320
significantly and reached up to 80 to

235
00:08:50,080 --> 00:08:54,560
100 000 node ids

236
00:08:52,320 --> 00:08:56,480
before going slightly back down to where

237
00:08:54,560 --> 00:09:01,839
it remains now at roughly

238
00:08:56,480 --> 00:09:04,240
uh 30 000 notes uh in a 24-hour interval

239
00:09:01,839 --> 00:09:04,880
which brings us to the obvious next

240
00:09:04,240 --> 00:09:08,640
question

241
00:09:04,880 --> 00:09:10,800
um what happened on september 10th right

242
00:09:08,640 --> 00:09:12,959
and to understand that we need to take a

243
00:09:10,800 --> 00:09:16,479
look at the propagation methods

244
00:09:12,959 --> 00:09:19,599
of mozi mozi can propagate

245
00:09:16,480 --> 00:09:23,200
in two ways it comes with

246
00:09:19,600 --> 00:09:24,880
14 http based exploits or web interfaces

247
00:09:23,200 --> 00:09:27,920
of iot devices

248
00:09:24,880 --> 00:09:29,120
and that set of exploit has not changed

249
00:09:27,920 --> 00:09:31,519
over time

250
00:09:29,120 --> 00:09:33,120
the second mechanism is via talent

251
00:09:31,519 --> 00:09:35,120
credentials

252
00:09:33,120 --> 00:09:36,320
so it has a hardcore list of login

253
00:09:35,120 --> 00:09:40,320
prompt patterns

254
00:09:36,320 --> 00:09:43,760
checks a set of usernames and passwords

255
00:09:40,320 --> 00:09:46,800
and that set has has changed

256
00:09:43,760 --> 00:09:49,279
over time we specifically looked

257
00:09:46,800 --> 00:09:51,439
at the changes in the binaries

258
00:09:49,279 --> 00:09:53,519
surrounding september 10th

259
00:09:51,440 --> 00:09:55,839
the day of the massive increase and we

260
00:09:53,519 --> 00:09:58,720
only found three differences

261
00:09:55,839 --> 00:10:00,160
two of them affect the login prompts

262
00:09:58,720 --> 00:10:02,720
those are matched before

263
00:10:00,160 --> 00:10:04,719
usernames and passwords are even tried

264
00:10:02,720 --> 00:10:05,760
and one was an additional password that

265
00:10:04,720 --> 00:10:07,839
was added

266
00:10:05,760 --> 00:10:10,079
which you see on the right the brahmos

267
00:10:07,839 --> 00:10:11,680
at 15.

268
00:10:10,079 --> 00:10:14,079
now we were not familiar with the term

269
00:10:11,680 --> 00:10:17,279
brahmas but this is a

270
00:10:14,079 --> 00:10:20,640
medium-range cruise missile developed

271
00:10:17,279 --> 00:10:24,480
by a russian indian joint venture which

272
00:10:20,640 --> 00:10:26,959
certainly might raise a few eyebrows now

273
00:10:24,480 --> 00:10:28,560
don't get us wrong we can prove that the

274
00:10:26,959 --> 00:10:31,439
addition of this password

275
00:10:28,560 --> 00:10:33,119
caused the massive increase but we just

276
00:10:31,440 --> 00:10:35,200
say that the only difference that we

277
00:10:33,120 --> 00:10:37,760
were able to find in the binaries

278
00:10:35,200 --> 00:10:39,680
between pre-september 10th and post

279
00:10:37,760 --> 00:10:42,000
september 10th

280
00:10:39,680 --> 00:10:43,760
is this change with regard to

281
00:10:42,000 --> 00:10:46,240
propagation

282
00:10:43,760 --> 00:10:47,120
by the way that massive increase is also

283
00:10:46,240 --> 00:10:50,160
mirrored in

284
00:10:47,120 --> 00:10:52,240
third-party measurements as well

285
00:10:50,160 --> 00:10:53,760
let's take a look at the botnet

286
00:10:52,240 --> 00:10:56,320
population shift

287
00:10:53,760 --> 00:10:58,079
over time and there are two aspects that

288
00:10:56,320 --> 00:11:01,600
i would like to highlight here

289
00:10:58,079 --> 00:11:03,040
this graph shows the number of distinct

290
00:11:01,600 --> 00:11:06,160
node ids

291
00:11:03,040 --> 00:11:06,719
aggregated per week by country for the

292
00:11:06,160 --> 00:11:09,519
five

293
00:11:06,720 --> 00:11:10,800
most prevalent countries first on

294
00:11:09,519 --> 00:11:13,440
september 10th

295
00:11:10,800 --> 00:11:14,800
we observe that india has the majority

296
00:11:13,440 --> 00:11:18,079
of infections

297
00:11:14,800 --> 00:11:20,640
while previously china suffer from the

298
00:11:18,079 --> 00:11:23,519
most infections

299
00:11:20,640 --> 00:11:24,319
now given that in the nexus of the

300
00:11:23,519 --> 00:11:27,200
brahmos

301
00:11:24,320 --> 00:11:28,560
password this may be worth taking

302
00:11:27,200 --> 00:11:30,720
another look

303
00:11:28,560 --> 00:11:33,599
second and i think that's far less

304
00:11:30,720 --> 00:11:37,519
obvious i'd like to point out a small

305
00:11:33,600 --> 00:11:41,040
increase in mid-july here

306
00:11:37,519 --> 00:11:44,320
georgia the country not to say

307
00:11:41,040 --> 00:11:47,519
accounts for about as many infections

308
00:11:44,320 --> 00:11:50,720
as all of china and notice that the y

309
00:11:47,519 --> 00:11:53,279
axis is not log scale but linear again

310
00:11:50,720 --> 00:11:54,320
and i mean georgia a country of about i

311
00:11:53,279 --> 00:11:55,040
think three and a half million

312
00:11:54,320 --> 00:11:59,279
inhabitants

313
00:11:55,040 --> 00:12:01,599
um you know that's somewhat uncommon um

314
00:11:59,279 --> 00:12:03,279
we don't really have an explanation here

315
00:12:01,600 --> 00:12:04,480
but you know in general i think rapid

316
00:12:03,279 --> 00:12:07,760
infection increases

317
00:12:04,480 --> 00:12:10,000
especially in certain countries um only

318
00:12:07,760 --> 00:12:11,439
are somewhat atypical especially for

319
00:12:10,000 --> 00:12:13,839
apartments whose population

320
00:12:11,440 --> 00:12:15,279
otherwise seems to follow the

321
00:12:13,839 --> 00:12:17,360
distribution of

322
00:12:15,279 --> 00:12:18,880
vulnerable devices that you know it can

323
00:12:17,360 --> 00:12:21,120
affect

324
00:12:18,880 --> 00:12:22,959
however we were not able to find any

325
00:12:21,120 --> 00:12:26,160
further indication for

326
00:12:22,959 --> 00:12:26,719
targeted activity in that sense and with

327
00:12:26,160 --> 00:12:28,719
that

328
00:12:26,720 --> 00:12:30,320
i would like to hand over to andreas who

329
00:12:28,720 --> 00:12:32,560
is going to take you through the final

330
00:12:30,320 --> 00:12:32,560
part

331
00:12:35,839 --> 00:12:40,880
hello everybody my name is andreas

332
00:12:38,000 --> 00:12:43,120
klobsch and i will take over from now

333
00:12:40,880 --> 00:12:44,880
so during our research we developed a

334
00:12:43,120 --> 00:12:46,959
service which assisted us in our

335
00:12:44,880 --> 00:12:47,920
analysis which i would like to present

336
00:12:46,959 --> 00:12:50,399
to you

337
00:12:47,920 --> 00:12:52,000
as already mentioned by chris dietrich

338
00:12:50,399 --> 00:12:54,560
mosey's packed with the custom

339
00:12:52,000 --> 00:12:57,519
upx packer and has to be unpacked first

340
00:12:54,560 --> 00:12:59,760
in order to obtain the malicious payload

341
00:12:57,519 --> 00:13:00,639
if you take a look at the windows world

342
00:12:59,760 --> 00:13:03,439
unpacking p

343
00:13:00,639 --> 00:13:04,959
binaries is well researched and

344
00:13:03,440 --> 00:13:07,519
practically solved

345
00:13:04,959 --> 00:13:09,760
solutions already exist if you take a

346
00:13:07,519 --> 00:13:11,760
look at unpack.me for example where you

347
00:13:09,760 --> 00:13:15,600
can upload your pe binary

348
00:13:11,760 --> 00:13:17,760
and obtain it back in an unpacked form

349
00:13:15,600 --> 00:13:18,639
however packing appears more more

350
00:13:17,760 --> 00:13:21,200
popular

351
00:13:18,639 --> 00:13:23,360
in the iot malware world too so we

352
00:13:21,200 --> 00:13:24,720
focused on providing a service or

353
00:13:23,360 --> 00:13:27,279
creating a service

354
00:13:24,720 --> 00:13:30,000
to dynamically unpack elf binaries

355
00:13:27,279 --> 00:13:31,920
targeting the arm architecture

356
00:13:30,000 --> 00:13:34,720
the goal is to have the service up and

357
00:13:31,920 --> 00:13:38,079
running at iot.if

358
00:13:34,720 --> 00:13:40,480
by the end of 2020 for everybody to use

359
00:13:38,079 --> 00:13:42,319
so how does this service look like and

360
00:13:40,480 --> 00:13:44,800
work on the inside

361
00:13:42,320 --> 00:13:45,760
well you could divide it into two phases

362
00:13:44,800 --> 00:13:49,920
execution

363
00:13:45,760 --> 00:13:52,319
and rebuilding the input is as already

364
00:13:49,920 --> 00:13:54,560
mentioned a statically linked f binary

365
00:13:52,320 --> 00:13:58,079
targeting the arm architecture

366
00:13:54,560 --> 00:13:59,920
so in the first phase we will emulate or

367
00:13:58,079 --> 00:14:03,439
execute the sample in a

368
00:13:59,920 --> 00:14:05,599
armv7 virtual machine emulated by the

369
00:14:03,440 --> 00:14:08,800
qmu emulator

370
00:14:05,600 --> 00:14:11,440
during execution the sample will unpack

371
00:14:08,800 --> 00:14:12,719
itself and the unpacked code will lie in

372
00:14:11,440 --> 00:14:14,880
memory

373
00:14:12,720 --> 00:14:16,000
we will take advantage of this and dump

374
00:14:14,880 --> 00:14:19,279
the volatile memory

375
00:14:16,000 --> 00:14:21,519
during execution and with volatile

376
00:14:19,279 --> 00:14:22,800
memory extraction the first phase is

377
00:14:21,519 --> 00:14:25,040
completed

378
00:14:22,800 --> 00:14:26,399
so now we have a memory dump where the

379
00:14:25,040 --> 00:14:29,439
unpacked code is

380
00:14:26,399 --> 00:14:31,839
inside somewhere the second phase will

381
00:14:29,440 --> 00:14:32,320
be focused on rebuilding the binary

382
00:14:31,839 --> 00:14:34,639
again

383
00:14:32,320 --> 00:14:36,399
so first we identify the target process

384
00:14:34,639 --> 00:14:37,600
which would be the mosi process for

385
00:14:36,399 --> 00:14:41,199
example

386
00:14:37,600 --> 00:14:44,240
and we extract

387
00:14:41,199 --> 00:14:47,120
the pages of this malicious process so

388
00:14:44,240 --> 00:14:48,639
extracting pages means that we are

389
00:14:47,120 --> 00:14:50,959
translating its

390
00:14:48,639 --> 00:14:52,320
virtual addresses into the corresponding

391
00:14:50,959 --> 00:14:56,160
physical addresses

392
00:14:52,320 --> 00:14:58,240
and dump them afterwards so

393
00:14:56,160 --> 00:14:59,360
yeah first of all in order for this to

394
00:14:58,240 --> 00:15:03,040
work

395
00:14:59,360 --> 00:15:06,399
the the service needs additional files

396
00:15:03,040 --> 00:15:08,240
so these additional files are either

397
00:15:06,399 --> 00:15:10,800
debugging symbols from the

398
00:15:08,240 --> 00:15:11,839
kernel source code or manual files and

399
00:15:10,800 --> 00:15:14,880
they are needed

400
00:15:11,839 --> 00:15:16,399
in order to pass these these structures

401
00:15:14,880 --> 00:15:18,399
from volatile memory

402
00:15:16,399 --> 00:15:19,760
if you're using this service by the end

403
00:15:18,399 --> 00:15:21,440
of 2020

404
00:15:19,760 --> 00:15:23,279
you don't need to bother about them

405
00:15:21,440 --> 00:15:24,959
because we are already providing them

406
00:15:23,279 --> 00:15:27,439
for you

407
00:15:24,959 --> 00:15:28,160
so the final step is to locate the l

408
00:15:27,440 --> 00:15:30,560
feather

409
00:15:28,160 --> 00:15:33,199
inside the process dump and rebuild it

410
00:15:30,560 --> 00:15:35,199
to an on disk form by concatenating the

411
00:15:33,199 --> 00:15:38,560
pages in the right order again

412
00:15:35,199 --> 00:15:41,279
afterwards you can you can

413
00:15:38,560 --> 00:15:43,279
further process these these unpacked

414
00:15:41,279 --> 00:15:44,480
samples for example to load it into

415
00:15:43,279 --> 00:15:48,240
either or gydra

416
00:15:44,480 --> 00:15:52,000
and do static analysis on them

417
00:15:48,240 --> 00:15:55,120
so as already mentioned we plan to to

418
00:15:52,000 --> 00:15:56,639
to let the service run at the end of by

419
00:15:55,120 --> 00:16:00,079
the end of 2020

420
00:15:56,639 --> 00:16:02,079
at iot.efis.net where you will be able

421
00:16:00,079 --> 00:16:02,880
to upload your samples and we will send

422
00:16:02,079 --> 00:16:06,800
it back to you

423
00:16:02,880 --> 00:16:08,240
in an unpacked form in the final part of

424
00:16:06,800 --> 00:16:10,560
this presentation

425
00:16:08,240 --> 00:16:11,519
and given our limited limited time we

426
00:16:10,560 --> 00:16:14,399
would like to

427
00:16:11,519 --> 00:16:16,079
address at least two open issues first

428
00:16:14,399 --> 00:16:19,440
of all we did not observe

429
00:16:16,079 --> 00:16:23,359
any attack so far which could be because

430
00:16:19,440 --> 00:16:25,360
our visibility limits us or that

431
00:16:23,360 --> 00:16:27,680
specific nodes may be tasked

432
00:16:25,360 --> 00:16:30,639
individually and we don't

433
00:16:27,680 --> 00:16:30,959
we don't see this the third reason could

434
00:16:30,639 --> 00:16:34,160
be

435
00:16:30,959 --> 00:16:35,599
that the configs are marked to not

436
00:16:34,160 --> 00:16:39,199
propagate so

437
00:16:35,600 --> 00:16:42,160
if they are marked not to propagate we

438
00:16:39,199 --> 00:16:44,399
we our chances to obtain them by simply

439
00:16:42,160 --> 00:16:48,319
crawling the peer-to-peer botnets

440
00:16:44,399 --> 00:16:51,199
are very slim the second open

441
00:16:48,320 --> 00:16:52,480
issue is that mosey is still in ongoing

442
00:16:51,199 --> 00:16:55,359
development

443
00:16:52,480 --> 00:16:56,639
so in september 2020 for example we

444
00:16:55,360 --> 00:16:59,279
spotted a variant of

445
00:16:56,639 --> 00:17:01,360
mosi which implements a module to

446
00:16:59,279 --> 00:17:04,640
manipulate network traffic

447
00:17:01,360 --> 00:17:06,559
on a very low level and

448
00:17:04,640 --> 00:17:08,000
all in all it can be said that the

449
00:17:06,559 --> 00:17:10,480
possibility that

450
00:17:08,000 --> 00:17:11,839
the actors continue developing mozi

451
00:17:10,480 --> 00:17:13,919
exists

452
00:17:11,839 --> 00:17:16,000
so these are the open issues we wanted

453
00:17:13,919 --> 00:17:20,400
to address and that's also it with

454
00:17:16,000 --> 00:17:22,640
the with the product presentation and

455
00:17:20,400 --> 00:17:24,959
finally we would like to thank the

456
00:17:22,640 --> 00:17:27,360
listed organization and people

457
00:17:24,959 --> 00:17:31,120
for assisting us and supporting us in

458
00:17:27,359 --> 00:17:33,199
our analysis and then our research

459
00:17:31,120 --> 00:17:37,520
and if there are any open questions you

460
00:17:33,200 --> 00:17:37,520
can issue them now

