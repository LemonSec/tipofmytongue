1
00:00:00,960 --> 00:00:04,240
hi botconf and thank you for listening

2
00:00:02,639 --> 00:00:04,960
to our presentation from the comfort of

3
00:00:04,240 --> 00:00:07,120
your home

4
00:00:04,960 --> 00:00:09,360
today we're presenting about apk catch

5
00:00:07,120 --> 00:00:10,879
me if you can uncovering obfuscation as

6
00:00:09,360 --> 00:00:11,920
a service for malicious android

7
00:00:10,880 --> 00:00:13,679
applications

8
00:00:11,920 --> 00:00:15,120
this presentation is the result of a

9
00:00:13,679 --> 00:00:17,760
partnership with

10
00:00:15,120 --> 00:00:19,198
zambera from china micro myself masahapa

11
00:00:17,760 --> 00:00:21,920
klusten from go secure

12
00:00:19,199 --> 00:00:23,680
as well as maria jose ergiaga and

13
00:00:21,920 --> 00:00:25,439
sebastian garcia from the stratosphere

14
00:00:23,680 --> 00:00:26,960
laboratory

15
00:00:25,439 --> 00:00:28,720
today we're presenting the results of a

16
00:00:26,960 --> 00:00:30,480
unique opportunity we faced while being

17
00:00:28,720 --> 00:00:31,840
confined at home during the first wave

18
00:00:30,480 --> 00:00:33,280
of the covet pandemic

19
00:00:31,840 --> 00:00:34,960
and it was this was related to

20
00:00:33,280 --> 00:00:36,559
investigating an obfuscation as a

21
00:00:34,960 --> 00:00:37,520
service platform for android

22
00:00:36,559 --> 00:00:39,199
applications

23
00:00:37,520 --> 00:00:41,600
we felt this was a unique opportunity to

24
00:00:39,200 --> 00:00:42,320
be able to uncover the service usage its

25
00:00:41,600 --> 00:00:44,399
efficiency

26
00:00:42,320 --> 00:00:46,640
its obfuscation technique how efficient

27
00:00:44,399 --> 00:00:48,160
it is and the like

28
00:00:46,640 --> 00:00:49,680
the presentation today is divided in

29
00:00:48,160 --> 00:00:52,078
three sections the first one

30
00:00:49,680 --> 00:00:53,920
is about the story so how we uncovered

31
00:00:52,079 --> 00:00:55,360
the platform and what was our strategy

32
00:00:53,920 --> 00:00:56,719
to investigate it

33
00:00:55,360 --> 00:00:58,320
then we'll go over the reverse

34
00:00:56,719 --> 00:01:00,000
engineering results so what were the

35
00:00:58,320 --> 00:01:01,680
obfuscation techniques

36
00:01:00,000 --> 00:01:03,680
and lastly the third part is about

37
00:01:01,680 --> 00:01:04,799
service usage efficiency and potential

38
00:01:03,680 --> 00:01:06,799
profitability

39
00:01:04,799 --> 00:01:08,320
which basically provides a better

40
00:01:06,799 --> 00:01:10,000
understanding of the context in which

41
00:01:08,320 --> 00:01:13,520
the operators behind the platform

42
00:01:10,000 --> 00:01:17,040
operate so let's start with the story

43
00:01:13,520 --> 00:01:19,119
it all started um when the stratosphere

44
00:01:17,040 --> 00:01:21,520
laboratory and myself partnered together

45
00:01:19,119 --> 00:01:23,360
and they shared to me the chat log

46
00:01:21,520 --> 00:01:25,200
containing discussions among operators

47
00:01:23,360 --> 00:01:26,080
of an android banking button at duke

48
00:01:25,200 --> 00:01:28,000
just

49
00:01:26,080 --> 00:01:29,280
and we wanted to work together and try

50
00:01:28,000 --> 00:01:30,640
to understand better what were the

51
00:01:29,280 --> 00:01:33,600
motivations

52
00:01:30,640 --> 00:01:35,840
behind the actors contributing to the

53
00:01:33,600 --> 00:01:38,559
android banking botnet

54
00:01:35,840 --> 00:01:40,880
and while we were doing this we ended up

55
00:01:38,560 --> 00:01:43,920
encountering an interesting conversation

56
00:01:40,880 --> 00:01:46,079
where one of the operator

57
00:01:43,920 --> 00:01:49,280
mentioned do you remember the link for

58
00:01:46,079 --> 00:01:51,439
the crypt and crypt is kind of a

59
00:01:49,280 --> 00:01:54,000
bad translation from russian you say

60
00:01:51,439 --> 00:01:56,240
crypting obfuscating or protection

61
00:01:54,000 --> 00:01:58,479
and then a person shared the link and

62
00:01:56,240 --> 00:01:59,679
we're not putting the link in clear here

63
00:01:58,479 --> 00:02:01,520
just because we don't want to tip off

64
00:01:59,680 --> 00:02:04,479
the administrators that we found

65
00:02:01,520 --> 00:02:05,280
or that we've stripped naked their their

66
00:02:04,479 --> 00:02:07,119
service

67
00:02:05,280 --> 00:02:08,800
but if you want to or if any malware

68
00:02:07,119 --> 00:02:09,919
analyst wants to go and deep dive you

69
00:02:08,800 --> 00:02:11,680
can do a wrap 13

70
00:02:09,919 --> 00:02:13,040
of this link and you'll find the true

71
00:02:11,680 --> 00:02:16,239
link of the service

72
00:02:13,040 --> 00:02:18,319
however it's down right now

73
00:02:16,239 --> 00:02:20,000
so seeing this link what we ended up

74
00:02:18,319 --> 00:02:21,920
doing is go on the platform

75
00:02:20,000 --> 00:02:23,599
and we ended up seeing that you could

76
00:02:21,920 --> 00:02:26,238
log in or register and then

77
00:02:23,599 --> 00:02:27,519
potentially obfuscate or crypt

78
00:02:26,239 --> 00:02:29,599
applications

79
00:02:27,520 --> 00:02:31,360
notice that it says protect so it

80
00:02:29,599 --> 00:02:33,440
doesn't say obfuscate so protect

81
00:02:31,360 --> 00:02:34,480
against anti-virus detection in this

82
00:02:33,440 --> 00:02:36,480
case

83
00:02:34,480 --> 00:02:38,238
and to be able to register you need to

84
00:02:36,480 --> 00:02:38,640
have a code so we couldn't do it right

85
00:02:38,239 --> 00:02:41,200
away

86
00:02:38,640 --> 00:02:43,279
creating a crea barriers of entry for

87
00:02:41,200 --> 00:02:45,359
curious individuals like us

88
00:02:43,280 --> 00:02:47,519
however lucky luckily for us we had

89
00:02:45,360 --> 00:02:49,680
access to flare systems and six skill

90
00:02:47,519 --> 00:02:51,599
two dart net monitoring platforms from

91
00:02:49,680 --> 00:02:53,519
which we searched for the platform and

92
00:02:51,599 --> 00:02:54,799
we ended up finding lots of ads

93
00:02:53,519 --> 00:02:57,040
where the administrators of this

94
00:02:54,800 --> 00:03:00,000
platform were actually advertising their

95
00:02:57,040 --> 00:03:02,000
service encouraging people to register

96
00:03:00,000 --> 00:03:03,680
so here we give you an example of one ad

97
00:03:02,000 --> 00:03:05,599
that was on hack forums

98
00:03:03,680 --> 00:03:06,800
and as you can see it says automated

99
00:03:05,599 --> 00:03:09,599
service for the protection

100
00:03:06,800 --> 00:03:10,959
of android applications and it there's a

101
00:03:09,599 --> 00:03:14,238
coupon code available

102
00:03:10,959 --> 00:03:14,879
in the advertisement which allowed us to

103
00:03:14,239 --> 00:03:18,000
log in

104
00:03:14,879 --> 00:03:20,239
the service here we just give you the

105
00:03:18,000 --> 00:03:22,159
prices but we could go and see you know

106
00:03:20,239 --> 00:03:24,000
how to upgrade apks you could upload

107
00:03:22,159 --> 00:03:24,879
them automatically once your balance was

108
00:03:24,000 --> 00:03:27,120
there

109
00:03:24,879 --> 00:03:29,359
updated and do it without having to talk

110
00:03:27,120 --> 00:03:31,120
to the administrators of the platform

111
00:03:29,360 --> 00:03:33,760
as you can see in the prices it's quite

112
00:03:31,120 --> 00:03:36,480
expensive twenty dollars for one apk

113
00:03:33,760 --> 00:03:37,280
or a hundred dollars for 10 apks and if

114
00:03:36,480 --> 00:03:39,840
you wanted to

115
00:03:37,280 --> 00:03:40,720
skate many many apks you could use 30

116
00:03:39,840 --> 00:03:43,519
days

117
00:03:40,720 --> 00:03:45,280
unlimited access with an api for 850

118
00:03:43,519 --> 00:03:46,799
dollars

119
00:03:45,280 --> 00:03:49,200
so we thought we had a unique

120
00:03:46,799 --> 00:03:50,480
opportunity obfuscate apks and compare

121
00:03:49,200 --> 00:03:52,000
the obfuscated version with the

122
00:03:50,480 --> 00:03:54,159
non-obfuscated one

123
00:03:52,000 --> 00:03:56,159
however we knew that the geosplutnet

124
00:03:54,159 --> 00:03:56,798
operators had used the obfuscation

125
00:03:56,159 --> 00:03:58,640
service

126
00:03:56,799 --> 00:04:00,000
and we knew that the geos apks were

127
00:03:58,640 --> 00:04:02,319
heavily obfuscated

128
00:04:00,000 --> 00:04:05,040
because with zambera for chen micro had

129
00:04:02,319 --> 00:04:06,798
already reverse engineered geos dpks

130
00:04:05,040 --> 00:04:08,079
and published on them on a trend micro

131
00:04:06,799 --> 00:04:09,840
blog

132
00:04:08,080 --> 00:04:11,680
so we thought it'd be interesting to ask

133
00:04:09,840 --> 00:04:13,599
vid if he'd want to join the project

134
00:04:11,680 --> 00:04:16,079
because he had already lots of knowledge

135
00:04:13,599 --> 00:04:17,519
on the obfuscation techniques that were

136
00:04:16,079 --> 00:04:20,160
used and luckily for us

137
00:04:17,519 --> 00:04:21,840
he accepted so we've been together

138
00:04:20,160 --> 00:04:23,759
working together ever since

139
00:04:21,839 --> 00:04:25,840
the first thing we did is an automated

140
00:04:23,759 --> 00:04:27,919
analysis using msf

141
00:04:25,840 --> 00:04:30,479
so we compare the results from the

142
00:04:27,919 --> 00:04:33,120
original file and the obfuscated file

143
00:04:30,479 --> 00:04:34,639
basically notice first that the cvss

144
00:04:33,120 --> 00:04:36,080
score is different for the original file

145
00:04:34,639 --> 00:04:37,840
and the obfuscated one

146
00:04:36,080 --> 00:04:39,599
which means that the obfuscation worked

147
00:04:37,840 --> 00:04:41,280
at hiding the vulnerabilities found in

148
00:04:39,600 --> 00:04:43,120
the original file

149
00:04:41,280 --> 00:04:45,679
which resulted in an increase in the

150
00:04:43,120 --> 00:04:47,919
security score for the obfuscated file

151
00:04:45,680 --> 00:04:49,280
notice also that the package name and

152
00:04:47,919 --> 00:04:51,198
main activity

153
00:04:49,280 --> 00:04:53,039
changed so for the original file it's

154
00:04:51,199 --> 00:04:54,800
normal words whereas for the obfuscated

155
00:04:53,040 --> 00:04:57,040
one it's long random strings

156
00:04:54,800 --> 00:04:58,560
which may look more malicious for a

157
00:04:57,040 --> 00:05:00,400
malware analyst

158
00:04:58,560 --> 00:05:02,400
and lastly we want you to see that

159
00:05:00,400 --> 00:05:04,799
activities and number of services

160
00:05:02,400 --> 00:05:06,400
changed so for the original file the

161
00:05:04,800 --> 00:05:08,479
number of activities with two was two

162
00:05:06,400 --> 00:05:10,080
and for the obfuscated 110 which shows

163
00:05:08,479 --> 00:05:12,479
that the obfuscated file

164
00:05:10,080 --> 00:05:14,479
seems to be more complex and then the

165
00:05:12,479 --> 00:05:15,840
number of services for the original file

166
00:05:14,479 --> 00:05:17,840
went from one to three

167
00:05:15,840 --> 00:05:19,440
illustrating that the obfuscated file

168
00:05:17,840 --> 00:05:20,400
may have more tasks running in the

169
00:05:19,440 --> 00:05:22,560
background

170
00:05:20,400 --> 00:05:24,560
which may look more suspicious so

171
00:05:22,560 --> 00:05:27,280
overall we think that based on this data

172
00:05:24,560 --> 00:05:29,039
the obfuscation file the obfuscated file

173
00:05:27,280 --> 00:05:30,159
seems more malicious than the original

174
00:05:29,039 --> 00:05:32,159
file

175
00:05:30,160 --> 00:05:33,440
but let's look now at the results of the

176
00:05:32,160 --> 00:05:37,840
reverse engineering

177
00:05:33,440 --> 00:05:41,120
of the obfuscated application with vit

178
00:05:37,840 --> 00:05:44,719
everyone now i will share some details

179
00:05:41,120 --> 00:05:47,039
about the obfuscated sample of local apk

180
00:05:44,720 --> 00:05:48,160
there will be few examples of the code

181
00:05:47,039 --> 00:05:51,199
extracted from

182
00:05:48,160 --> 00:05:52,720
analyzed sample and you don't need to

183
00:05:51,199 --> 00:05:54,320
read them in detail

184
00:05:52,720 --> 00:05:57,280
they are mentioned for illustration

185
00:05:54,320 --> 00:05:57,280
purposes only

186
00:05:57,600 --> 00:06:01,520
after the compilation of classes dex

187
00:05:59,520 --> 00:06:03,359
file there are hundreds of

188
00:06:01,520 --> 00:06:04,560
similar classes like you see on the

189
00:06:03,360 --> 00:06:07,280
slide

190
00:06:04,560 --> 00:06:07,919
symbol of obfuscation can be expected

191
00:06:07,280 --> 00:06:09,758
here

192
00:06:07,919 --> 00:06:13,520
are randomly generated strengths of

193
00:06:09,759 --> 00:06:16,160
length 6 to 12 characters

194
00:06:13,520 --> 00:06:17,919
but what is this green garbage stored in

195
00:06:16,160 --> 00:06:21,199
string variables

196
00:06:17,919 --> 00:06:23,039
can it be some kind of encoding i have

197
00:06:21,199 --> 00:06:25,759
tried frequency analysis

198
00:06:23,039 --> 00:06:26,960
entropy analysis but this gave me no

199
00:06:25,759 --> 00:06:30,080
clue

200
00:06:26,960 --> 00:06:34,080
and no reasonable java code can be found

201
00:06:30,080 --> 00:06:36,560
in those classes

202
00:06:34,080 --> 00:06:37,840
classes contain something like this it

203
00:06:36,560 --> 00:06:40,880
is a java code

204
00:06:37,840 --> 00:06:43,280
but it does not make much sense

205
00:06:40,880 --> 00:06:45,440
as it was discovered lately that code

206
00:06:43,280 --> 00:06:47,840
marked by red boxes is a junk code

207
00:06:45,440 --> 00:06:50,960
inserted to make reading difficult

208
00:06:47,840 --> 00:06:52,318
you can find boolean integer string

209
00:06:50,960 --> 00:06:54,719
variables assigned

210
00:06:52,319 --> 00:06:55,759
with randomly generated laterals and

211
00:06:54,720 --> 00:06:58,800
also

212
00:06:55,759 --> 00:07:01,599
if then else switch case and try and

213
00:06:58,800 --> 00:07:04,160
catch construction

214
00:07:01,599 --> 00:07:07,919
go to gems and even randomly edit

215
00:07:04,160 --> 00:07:07,919
methods and method parameters

216
00:07:08,400 --> 00:07:12,000
and here is another example using switch

217
00:07:10,960 --> 00:07:14,719
command

218
00:07:12,000 --> 00:07:15,120
as you can see understanding of such

219
00:07:14,720 --> 00:07:18,479
code

220
00:07:15,120 --> 00:07:21,360
is difficult here

221
00:07:18,479 --> 00:07:22,080
are tools i have used for analysis

222
00:07:21,360 --> 00:07:24,160
injected

223
00:07:22,080 --> 00:07:25,758
junk code made the compilation task

224
00:07:24,160 --> 00:07:29,280
difficult even for

225
00:07:25,759 --> 00:07:31,520
all well-known java compilers especially

226
00:07:29,280 --> 00:07:33,119
nested exception blocks in combination

227
00:07:31,520 --> 00:07:36,400
with goto instructions

228
00:07:33,120 --> 00:07:38,800
very very hard obstacles for them

229
00:07:36,400 --> 00:07:40,960
so final decompiled code had to be

230
00:07:38,800 --> 00:07:43,440
combined together from different tool

231
00:07:40,960 --> 00:07:46,318
outputs

232
00:07:43,440 --> 00:07:47,199
best results gave me jeoptec compiler

233
00:07:46,319 --> 00:07:50,800
which is a

234
00:07:47,199 --> 00:07:53,199
commercial product on the opposite side

235
00:07:50,800 --> 00:07:53,919
was getting the compiler which has been

236
00:07:53,199 --> 00:07:57,039
struggling

237
00:07:53,919 --> 00:07:59,840
even with simple parts of code

238
00:07:57,039 --> 00:08:01,919
manual smalley to javadi compilation has

239
00:07:59,840 --> 00:08:04,400
been used in a few cases

240
00:08:01,919 --> 00:08:06,000
because all the compilers failed in this

241
00:08:04,400 --> 00:08:08,159
task

242
00:08:06,000 --> 00:08:10,840
there is still a space for improvement

243
00:08:08,160 --> 00:08:12,000
mainly for open source java compilation

244
00:08:10,840 --> 00:08:15,119
tools

245
00:08:12,000 --> 00:08:17,360
python interpreter is mentioned here as

246
00:08:15,120 --> 00:08:20,560
it has been used for byte array to

247
00:08:17,360 --> 00:08:20,560
strings decryption

248
00:08:21,280 --> 00:08:24,878
when digging through heaps of nonsense

249
00:08:23,360 --> 00:08:28,400
code this piece

250
00:08:24,879 --> 00:08:31,759
draws my attention it looked

251
00:08:28,400 --> 00:08:35,199
quite familiar to me can it be a piece

252
00:08:31,759 --> 00:08:35,200
of rc4 code

253
00:08:35,440 --> 00:08:38,959
after symbol of escalation and junk code

254
00:08:38,080 --> 00:08:43,120
removal

255
00:08:38,958 --> 00:08:47,760
the same method looks like this

256
00:08:43,120 --> 00:08:47,760
here are corresponding parts of code

257
00:08:50,080 --> 00:08:54,000
the rc4 algorithm has been split by

258
00:08:53,200 --> 00:08:56,560
others

259
00:08:54,000 --> 00:08:58,480
between several methods to make itself

260
00:08:56,560 --> 00:09:02,079
less recognizable

261
00:08:58,480 --> 00:09:02,080
here are some of them

262
00:09:02,160 --> 00:09:09,839
most important for us is this method

263
00:09:05,600 --> 00:09:09,839
containing an encryption key

264
00:09:10,880 --> 00:09:14,080
one rc4 decryption method has been

265
00:09:13,120 --> 00:09:16,240
revealed

266
00:09:14,080 --> 00:09:20,240
it was clear there is a lot of byte

267
00:09:16,240 --> 00:09:22,560
arrays encrypted with rc4 algorithm

268
00:09:20,240 --> 00:09:23,680
they are used as a string constructor

269
00:09:22,560 --> 00:09:28,079
argument

270
00:09:23,680 --> 00:09:30,640
here is one example in original code

271
00:09:28,080 --> 00:09:31,839
the reason is that java diffraction

272
00:09:30,640 --> 00:09:34,880
library methods

273
00:09:31,839 --> 00:09:37,040
are used and names of methods and their

274
00:09:34,880 --> 00:09:39,760
parameters needs to be hidden

275
00:09:37,040 --> 00:09:41,599
otherwise it would be too obvious what

276
00:09:39,760 --> 00:09:44,240
the code is doing

277
00:09:41,600 --> 00:09:46,800
so i did a small python program for

278
00:09:44,240 --> 00:09:48,880
decryption of those by the arrays

279
00:09:46,800 --> 00:09:50,959
then i replaced decryption method

280
00:09:48,880 --> 00:09:53,279
calling by resulted strings directly in

281
00:09:50,959 --> 00:09:55,518
the source code

282
00:09:53,279 --> 00:09:56,640
and here is the same code after string

283
00:09:55,519 --> 00:09:59,680
decryption

284
00:09:56,640 --> 00:09:59,680
and code cleanup

285
00:10:01,440 --> 00:10:04,480
after junk code removal strings

286
00:10:03,440 --> 00:10:06,880
decryption

287
00:10:04,480 --> 00:10:07,839
reflection methods named the obfuscation

288
00:10:06,880 --> 00:10:10,399
we could guess

289
00:10:07,839 --> 00:10:12,000
what could be other metals doing and

290
00:10:10,399 --> 00:10:14,000
what could be their names before

291
00:10:12,000 --> 00:10:16,839
offication

292
00:10:14,000 --> 00:10:18,320
here is the core of the apk executable

293
00:10:16,839 --> 00:10:20,399
code

294
00:10:18,320 --> 00:10:22,800
i will shortly describe what this method

295
00:10:20,399 --> 00:10:26,800
is doing

296
00:10:22,800 --> 00:10:29,920
there is a file stored in the apk

297
00:10:26,800 --> 00:10:32,800
this method opens the file decrypts it

298
00:10:29,920 --> 00:10:35,920
using the same rc4 algorithm and key

299
00:10:32,800 --> 00:10:37,040
as strings before saves it with a

300
00:10:35,920 --> 00:10:39,519
different name

301
00:10:37,040 --> 00:10:40,319
and then loads it as a dex module and

302
00:10:39,519 --> 00:10:43,440
finally

303
00:10:40,320 --> 00:10:44,079
deletes both files and the locker is

304
00:10:43,440 --> 00:10:47,440
loaded

305
00:10:44,079 --> 00:10:49,040
and activated now so this code played a

306
00:10:47,440 --> 00:10:53,600
role of a trojan horse

307
00:10:49,040 --> 00:10:53,599
for a malicious android application

308
00:10:54,640 --> 00:10:58,319
when looking into apk you can find a

309
00:10:57,440 --> 00:11:01,519
directory

310
00:10:58,320 --> 00:11:04,000
named tracks it contains

311
00:11:01,519 --> 00:11:05,360
several files with randomly generated

312
00:11:04,000 --> 00:11:07,519
names

313
00:11:05,360 --> 00:11:09,760
i did not analyze their contents but

314
00:11:07,519 --> 00:11:12,959
they are not used in the code

315
00:11:09,760 --> 00:11:14,000
so it doesn't really matter the only

316
00:11:12,959 --> 00:11:17,119
important file

317
00:11:14,000 --> 00:11:21,200
is the radio awk which contains

318
00:11:17,120 --> 00:11:21,200
encrypted second stage index file

319
00:11:21,760 --> 00:11:25,360
and here we have the resulting locker

320
00:11:23,920 --> 00:11:28,800
code after decryption

321
00:11:25,360 --> 00:11:30,800
and the compilation the only obfuscation

322
00:11:28,800 --> 00:11:33,760
method used in second stage

323
00:11:30,800 --> 00:11:35,439
is symbol name application for symbols

324
00:11:33,760 --> 00:11:37,760
which are referenced in the manifest

325
00:11:35,440 --> 00:11:40,959
file

326
00:11:37,760 --> 00:11:43,519
in comparison jio's did also

327
00:11:40,959 --> 00:11:45,920
encrypted strings even in the second

328
00:11:43,519 --> 00:11:45,920
stage

329
00:11:47,760 --> 00:11:52,800
i'm not sure if it's a joke or

330
00:11:51,040 --> 00:11:54,639
attempt to distract attention of the

331
00:11:52,800 --> 00:11:57,040
analyst but

332
00:11:54,639 --> 00:11:58,800
there has been always part of code with

333
00:11:57,040 --> 00:12:01,760
unificated and

334
00:11:58,800 --> 00:12:05,120
attractive symbol names but always in a

335
00:12:01,760 --> 00:12:08,319
part of code which is never executed

336
00:12:05,120 --> 00:12:11,839
this is an example of a sql

337
00:12:08,320 --> 00:12:11,839
like code

338
00:12:13,120 --> 00:12:21,279
so the result of the analysis is

339
00:12:17,839 --> 00:12:24,160
the java code is a dropper trojanizing

340
00:12:21,279 --> 00:12:25,839
malicious android application it is

341
00:12:24,160 --> 00:12:28,319
heavily obfuscated

342
00:12:25,839 --> 00:12:29,920
and the only task it has is to decrypt

343
00:12:28,320 --> 00:12:33,040
second stage dex file

344
00:12:29,920 --> 00:12:35,279
and launch it it is difficult to perform

345
00:12:33,040 --> 00:12:38,959
automated analysis of the dropper

346
00:12:35,279 --> 00:12:39,839
but it's not impossible to decompile

347
00:12:38,959 --> 00:12:42,079
second stage

348
00:12:39,839 --> 00:12:43,120
you need to find a class with rc4

349
00:12:42,079 --> 00:12:46,000
algorithm

350
00:12:43,120 --> 00:12:48,000
within hundreds of junk code classes

351
00:12:46,000 --> 00:12:50,480
then you have to recognize a method

352
00:12:48,000 --> 00:12:50,480
containing

353
00:12:50,839 --> 00:12:56,000
rc4k

354
00:12:52,240 --> 00:12:59,120
hint is the key by the array is assigned

355
00:12:56,000 --> 00:13:01,839
to a byte array variable the rest of

356
00:12:59,120 --> 00:13:05,360
byte arrays are used in place of the

357
00:13:01,839 --> 00:13:05,360
string constructor parameter

358
00:13:05,440 --> 00:13:10,320
a key has been different in each analog

359
00:13:07,920 --> 00:13:12,319
sample

360
00:13:10,320 --> 00:13:13,519
then you can decrypt and decompile the

361
00:13:12,320 --> 00:13:17,279
second stage

362
00:13:13,519 --> 00:13:20,000
file embedded in the apk be careful

363
00:13:17,279 --> 00:13:21,040
the opera code is evolving in earlier

364
00:13:20,000 --> 00:13:23,440
versions

365
00:13:21,040 --> 00:13:26,160
a file carrying second stage contained

366
00:13:23,440 --> 00:13:28,800
only the encrypted x file

367
00:13:26,160 --> 00:13:30,639
in later version a simple header

368
00:13:28,800 --> 00:13:34,880
containing the length of the file

369
00:13:30,639 --> 00:13:37,360
encoded in 4 bytes has been added

370
00:13:34,880 --> 00:13:39,279
side effect of this kind of obfuscation

371
00:13:37,360 --> 00:13:44,320
was increased in size

372
00:13:39,279 --> 00:13:48,800
of the original apk about 32 times

373
00:13:44,320 --> 00:13:51,279
mainly due to inserted chunk code

374
00:13:48,800 --> 00:13:53,439
and this is all from short overview

375
00:13:51,279 --> 00:13:55,519
about analyzing such sample

376
00:13:53,440 --> 00:13:56,560
total time needed to complete the

377
00:13:55,519 --> 00:13:59,199
application

378
00:13:56,560 --> 00:14:00,079
of first jail sample was about three

379
00:13:59,199 --> 00:14:02,800
weeks

380
00:14:00,079 --> 00:14:05,760
but consecutive analysis has been done

381
00:14:02,800 --> 00:14:05,760
in about an hour

382
00:14:07,839 --> 00:14:11,839
okay so i'm back for the service usage

383
00:14:10,000 --> 00:14:14,560
efficiency and potential profitability

384
00:14:11,839 --> 00:14:16,079
the third part of our presentation

385
00:14:14,560 --> 00:14:17,359
so let's start with service usage we

386
00:14:16,079 --> 00:14:19,279
wanted to know whether or not the

387
00:14:17,360 --> 00:14:20,639
obfuscation service was used by a load

388
00:14:19,279 --> 00:14:22,959
of actor

389
00:14:20,639 --> 00:14:23,680
so the first question we asked was are

390
00:14:22,959 --> 00:14:25,680
there

391
00:14:23,680 --> 00:14:26,800
files currently submitted on virustotal

392
00:14:25,680 --> 00:14:30,000
that are apk

393
00:14:26,800 --> 00:14:31,760
zip or jar with radio.org file and

394
00:14:30,000 --> 00:14:33,440
luckily for us there were there were

395
00:14:31,760 --> 00:14:37,040
about 3057

396
00:14:33,440 --> 00:14:38,800
apks that fitted this fingerprint

397
00:14:37,040 --> 00:14:40,160
so just to validate that we didn't find

398
00:14:38,800 --> 00:14:42,399
any false positive

399
00:14:40,160 --> 00:14:44,000
we decompiled all applications and

400
00:14:42,399 --> 00:14:46,160
automatically fetched information from

401
00:14:44,000 --> 00:14:48,480
them and we noticed that all manifest

402
00:14:46,160 --> 00:14:50,000
files had package name main activity

403
00:14:48,480 --> 00:14:52,079
activity and service names that were

404
00:14:50,000 --> 00:14:53,680
long random strings just like in our own

405
00:14:52,079 --> 00:14:55,760
obfuscated apks

406
00:14:53,680 --> 00:14:58,000
and we also noticed that the radio.og

407
00:14:55,760 --> 00:14:59,680
file for all apks was stored in the

408
00:14:58,000 --> 00:15:02,160
tracks folder so

409
00:14:59,680 --> 00:15:04,079
this kind of allowed us to conclude with

410
00:15:02,160 --> 00:15:07,600
great confidence that the apks we found

411
00:15:04,079 --> 00:15:10,000
were related to the obfuscation service

412
00:15:07,600 --> 00:15:12,720
so here we give you a plot through time

413
00:15:10,000 --> 00:15:14,160
from may 2020 to october 2020 on a

414
00:15:12,720 --> 00:15:15,839
number of applications that have been

415
00:15:14,160 --> 00:15:17,439
submitted on virustotal

416
00:15:15,839 --> 00:15:19,120
the flat line in between that you can

417
00:15:17,440 --> 00:15:20,320
see in the graph is basically just the

418
00:15:19,120 --> 00:15:22,800
pause in between the two

419
00:15:20,320 --> 00:15:24,480
retro hunk jobs that we did what you can

420
00:15:22,800 --> 00:15:26,639
see is that there's files that are being

421
00:15:24,480 --> 00:15:30,240
submitted daily on virustotal that are

422
00:15:26,639 --> 00:15:30,240
related to the obfuscation service

423
00:15:30,560 --> 00:15:35,279
the other question we had was well based

424
00:15:32,800 --> 00:15:36,800
on this are all apks found on virustotal

425
00:15:35,279 --> 00:15:39,199
from the same group

426
00:15:36,800 --> 00:15:40,079
and i ended up investigating and taking

427
00:15:39,199 --> 00:15:42,319
quite a lot of time

428
00:15:40,079 --> 00:15:44,160
trying to cluster these apks together

429
00:15:42,320 --> 00:15:46,000
without having any results for example

430
00:15:44,160 --> 00:15:47,839
clustering the number of permissions the

431
00:15:46,000 --> 00:15:50,000
kind of permissions or the

432
00:15:47,839 --> 00:15:51,199
let's say the tags that were given by

433
00:15:50,000 --> 00:15:53,440
antivirus engines

434
00:15:51,199 --> 00:15:54,719
without any results however i didn't

435
00:15:53,440 --> 00:15:56,160
give up and i continued

436
00:15:54,720 --> 00:15:58,639
and i ended up finding something quite

437
00:15:56,160 --> 00:16:00,319
interesting in the res values folders of

438
00:15:58,639 --> 00:16:02,480
the obfuscated applications

439
00:16:00,320 --> 00:16:04,279
there was leaked information especially

440
00:16:02,480 --> 00:16:07,519
in the strings.xml and the

441
00:16:04,279 --> 00:16:08,320
ids.xml files so here i give you an

442
00:16:07,519 --> 00:16:09,600
example

443
00:16:08,320 --> 00:16:11,759
for example you see that the string

444
00:16:09,600 --> 00:16:13,770
names in the string.xml file here

445
00:16:11,759 --> 00:16:14,959
is obfuscated so like it's random

446
00:16:13,770 --> 00:16:17,439
[Music]

447
00:16:14,959 --> 00:16:19,758
random strings but you notice as well

448
00:16:17,440 --> 00:16:22,639
that the string is not so it's in clear

449
00:16:19,759 --> 00:16:24,079
it says add up flash player so basically

450
00:16:22,639 --> 00:16:26,320
from this finding we could group

451
00:16:24,079 --> 00:16:28,800
apks together based on if they had the

452
00:16:26,320 --> 00:16:30,759
same first strings in strings.xml

453
00:16:28,800 --> 00:16:32,880
or if they had the same structure in

454
00:16:30,759 --> 00:16:35,519
ids.xml or both

455
00:16:32,880 --> 00:16:36,240
and this yielded interesting results we

456
00:16:35,519 --> 00:16:39,040
found seven

457
00:16:36,240 --> 00:16:41,920
groups that were that had the same

458
00:16:39,040 --> 00:16:43,839
strings at xml or ids.xml

459
00:16:41,920 --> 00:16:46,000
and these groups were quite different so

460
00:16:43,839 --> 00:16:47,600
what i did to analyze them and see

461
00:16:46,000 --> 00:16:48,800
whether or not the apks within each

462
00:16:47,600 --> 00:16:50,639
group were similar

463
00:16:48,800 --> 00:16:52,160
is i took a dozen of them from each

464
00:16:50,639 --> 00:16:54,639
group and inputted them

465
00:16:52,160 --> 00:16:56,480
in the apklab.iotool which is a tool

466
00:16:54,639 --> 00:16:58,320
developed by avas that allows

467
00:16:56,480 --> 00:16:59,600
that does dynamic analysis of

468
00:16:58,320 --> 00:17:01,440
applications

469
00:16:59,600 --> 00:17:02,720
and what i noticed is that most of the

470
00:17:01,440 --> 00:17:04,400
apks from each group

471
00:17:02,720 --> 00:17:07,280
behave the same way and connected to

472
00:17:04,400 --> 00:17:10,079
similar domains or the same domains

473
00:17:07,280 --> 00:17:11,918
so for example here group one apks were

474
00:17:10,079 --> 00:17:12,399
faked as flash player and instagram

475
00:17:11,919 --> 00:17:15,199
shared

476
00:17:12,400 --> 00:17:17,039
and they all all the apks i investigated

477
00:17:15,199 --> 00:17:20,400
communicated with dns address

478
00:17:17,039 --> 00:17:23,280
right here another example is um

479
00:17:20,400 --> 00:17:25,679
the group four all samples like all the

480
00:17:23,280 --> 00:17:27,399
apks that are inputted in apk lab.io

481
00:17:25,679 --> 00:17:28,720
like communicated with the domain

482
00:17:27,400 --> 00:17:30,720
hakkasan.who

483
00:17:28,720 --> 00:17:31,919
which is known to be like which seems to

484
00:17:30,720 --> 00:17:34,400
be related to the flex

485
00:17:31,919 --> 00:17:35,440
malware helping me to confirm that it

486
00:17:34,400 --> 00:17:37,919
was most likely

487
00:17:35,440 --> 00:17:40,799
the same group and that the grouping was

488
00:17:37,919 --> 00:17:42,880
uh accurate

489
00:17:40,799 --> 00:17:45,120
you notice also maybe that group two

490
00:17:42,880 --> 00:17:45,679
three and six all have turkish names

491
00:17:45,120 --> 00:17:49,199
like

492
00:17:45,679 --> 00:17:51,280
in their name of apk

493
00:17:49,200 --> 00:17:52,240
we could have concluded that it was the

494
00:17:51,280 --> 00:17:54,399
same group

495
00:17:52,240 --> 00:17:56,000
who were targeting russian citizens but

496
00:17:54,400 --> 00:17:57,120
it was hard for us to do that just

497
00:17:56,000 --> 00:17:59,200
because

498
00:17:57,120 --> 00:18:00,959
these three groups didn't connect the

499
00:17:59,200 --> 00:18:02,320
same domains and they didn't didn't

500
00:18:00,960 --> 00:18:04,080
behave the same way

501
00:18:02,320 --> 00:18:05,760
based on the dozens of applications that

502
00:18:04,080 --> 00:18:07,439
i investigated from each group

503
00:18:05,760 --> 00:18:08,879
so from that we decided to keep them

504
00:18:07,440 --> 00:18:10,320
separate because we didn't know if it

505
00:18:08,880 --> 00:18:11,520
was the same group or not even though

506
00:18:10,320 --> 00:18:14,879
there was turkish

507
00:18:11,520 --> 00:18:16,879
in the application's name lastly we had

508
00:18:14,880 --> 00:18:17,440
others so about 60 apks we couldn't

509
00:18:16,880 --> 00:18:19,840
group

510
00:18:17,440 --> 00:18:22,160
and luckily for us we also found our

511
00:18:19,840 --> 00:18:23,840
android lockers adware and sms dealer in

512
00:18:22,160 --> 00:18:26,640
the data as well

513
00:18:23,840 --> 00:18:28,639
so let's look at service efficiency our

514
00:18:26,640 --> 00:18:30,240
question was are the obfuscated apks

515
00:18:28,640 --> 00:18:32,880
found on virustotal detected by

516
00:18:30,240 --> 00:18:34,880
antiviruses and our response was yes

517
00:18:32,880 --> 00:18:36,880
we took two strategies we looked first

518
00:18:34,880 --> 00:18:38,400
our obfuscated apks and compare them

519
00:18:36,880 --> 00:18:40,080
with the original ones

520
00:18:38,400 --> 00:18:42,000
and then we also looked at the apks we

521
00:18:40,080 --> 00:18:44,159
found on virustotal our sample of about

522
00:18:42,000 --> 00:18:45,919
3000 apks and asks whether or not these

523
00:18:44,160 --> 00:18:49,039
apks were detected

524
00:18:45,919 --> 00:18:51,600
so let's look at our own files for now

525
00:18:49,039 --> 00:18:53,760
so look here you can see that for the

526
00:18:51,600 --> 00:18:54,240
android locker and sms dealer are two

527
00:18:53,760 --> 00:18:55,919
highly

528
00:18:54,240 --> 00:18:58,080
malicious applications the number of

529
00:18:55,919 --> 00:19:00,559
detection decreased

530
00:18:58,080 --> 00:19:01,520
however for the adware apk so the less

531
00:19:00,559 --> 00:19:03,840
malicious one

532
00:19:01,520 --> 00:19:05,039
the number of detection increased so

533
00:19:03,840 --> 00:19:06,959
this made us wonder

534
00:19:05,039 --> 00:19:08,799
we wonder if this was an outlier and we

535
00:19:06,960 --> 00:19:11,039
wanted to test whether or not

536
00:19:08,799 --> 00:19:12,720
a bending apk with no detection would

537
00:19:11,039 --> 00:19:13,919
see a detection rate increase with the

538
00:19:12,720 --> 00:19:16,000
obfuscation

539
00:19:13,919 --> 00:19:17,360
so what we did is we obfuscated a hello

540
00:19:16,000 --> 00:19:20,000
world apk

541
00:19:17,360 --> 00:19:20,559
and that apk once obfuscated went from

542
00:19:20,000 --> 00:19:23,440
zero

543
00:19:20,559 --> 00:19:24,879
uh detection all the way up to eight so

544
00:19:23,440 --> 00:19:26,400
that confirmed that

545
00:19:24,880 --> 00:19:28,400
the obfuscation service could be

546
00:19:26,400 --> 00:19:30,080
interesting for actors who have highly

547
00:19:28,400 --> 00:19:31,679
malicious applications

548
00:19:30,080 --> 00:19:33,439
because the obfuscation service would

549
00:19:31,679 --> 00:19:34,480
then decrease the detection rate of

550
00:19:33,440 --> 00:19:36,480
these applications

551
00:19:34,480 --> 00:19:37,600
but if somebody had a binding apk or an

552
00:19:36,480 --> 00:19:39,360
apk that wasn't

553
00:19:37,600 --> 00:19:40,639
detected then using the obfuscation

554
00:19:39,360 --> 00:19:42,159
service would not be

555
00:19:40,640 --> 00:19:44,160
efficient because they would see their

556
00:19:42,160 --> 00:19:46,000
detection increase

557
00:19:44,160 --> 00:19:48,000
we then looked at our sample on virus

558
00:19:46,000 --> 00:19:50,160
total the 3000 apks

559
00:19:48,000 --> 00:19:52,080
here we give you the distribution and

560
00:19:50,160 --> 00:19:53,840
the number of detections

561
00:19:52,080 --> 00:19:55,120
for the whole sample and what you can

562
00:19:53,840 --> 00:19:58,080
see is

563
00:19:55,120 --> 00:19:59,760
that they were all minimally detected by

564
00:19:58,080 --> 00:20:01,360
at least eight antiviruses

565
00:19:59,760 --> 00:20:03,600
then we wonder if this was different in

566
00:20:01,360 --> 00:20:05,360
terms of groups so we plotted

567
00:20:03,600 --> 00:20:07,439
the number of detections based on each

568
00:20:05,360 --> 00:20:09,439
group and

569
00:20:07,440 --> 00:20:11,200
we also computed a series of tests on

570
00:20:09,440 --> 00:20:13,200
mean differences and we found that there

571
00:20:11,200 --> 00:20:13,919
was significant mean differences in each

572
00:20:13,200 --> 00:20:16,320
groups

573
00:20:13,919 --> 00:20:17,120
so some groups were more detected than

574
00:20:16,320 --> 00:20:19,840
others

575
00:20:17,120 --> 00:20:21,520
thus giving more confirmation to our

576
00:20:19,840 --> 00:20:24,320
idea that these were different types of

577
00:20:21,520 --> 00:20:24,320
apks as well

578
00:20:24,480 --> 00:20:28,880
and lastly we looked at the service

579
00:20:25,919 --> 00:20:30,640
potential revenue

580
00:20:28,880 --> 00:20:33,039
our question was considering the

581
00:20:30,640 --> 00:20:35,200
obfuscated apks found on varys total

582
00:20:33,039 --> 00:20:37,280
approximately how much heavy platform

583
00:20:35,200 --> 00:20:39,120
administrator made with them

584
00:20:37,280 --> 00:20:40,639
so we took the prices that we found on

585
00:20:39,120 --> 00:20:42,959
the platform

586
00:20:40,640 --> 00:20:44,240
and we developed two strategies first

587
00:20:42,960 --> 00:20:46,400
strategy was

588
00:20:44,240 --> 00:20:48,720
for all groups with hundreds of apks

589
00:20:46,400 --> 00:20:50,960
scattered through time we consider they

590
00:20:48,720 --> 00:20:52,880
bought an api price of 850

591
00:20:50,960 --> 00:20:54,559
a month and for the remaining groups we

592
00:20:52,880 --> 00:20:57,280
considered that the highest price

593
00:20:54,559 --> 00:20:58,879
of twenty dollars per apk and that

594
00:20:57,280 --> 00:21:00,480
yielded the results of all the apks

595
00:20:58,880 --> 00:21:01,760
found on virustotal

596
00:21:00,480 --> 00:21:03,360
the administrators would have made

597
00:21:01,760 --> 00:21:05,200
twenty two thousand and four hundred and

598
00:21:03,360 --> 00:21:06,879
ninety dollars

599
00:21:05,200 --> 00:21:08,640
then our second strategy was to not

600
00:21:06,880 --> 00:21:10,240
consider the groups and rather consider

601
00:21:08,640 --> 00:21:12,400
the highest and the lowest price for

602
00:21:10,240 --> 00:21:14,840
each apk fund on virus total

603
00:21:12,400 --> 00:21:16,559
and here we give you uh the potential

604
00:21:14,840 --> 00:21:19,280
cumulative

605
00:21:16,559 --> 00:21:22,158
revenue in u.s and what you can see if

606
00:21:19,280 --> 00:21:24,559
it was only one group obfuscating apks

607
00:21:22,159 --> 00:21:25,919
within these six months of investigation

608
00:21:24,559 --> 00:21:26,960
the operators would have made five

609
00:21:25,919 --> 00:21:29,919
thousand dollars

610
00:21:26,960 --> 00:21:31,440
and if it was all um apks that were paid

611
00:21:29,919 --> 00:21:32,320
at the highest price of twenty dollars

612
00:21:31,440 --> 00:21:34,080
per apk

613
00:21:32,320 --> 00:21:35,918
the operators would have made sixty one

614
00:21:34,080 --> 00:21:37,760
thousand dollars

615
00:21:35,919 --> 00:21:39,840
so the first strategy yields a lower

616
00:21:37,760 --> 00:21:42,559
bounce a little bit less than

617
00:21:39,840 --> 00:21:44,559
the middle between the two interval and

618
00:21:42,559 --> 00:21:45,600
we think this is probably a better or a

619
00:21:44,559 --> 00:21:47,760
more accurate

620
00:21:45,600 --> 00:21:49,918
estimation of the profit or the revenue

621
00:21:47,760 --> 00:21:53,280
that these individuals made

622
00:21:49,919 --> 00:21:55,840
is 22 and 490 dollars

623
00:21:53,280 --> 00:21:57,360
a lot it probably depends on where the

624
00:21:55,840 --> 00:21:59,039
operators are hosted

625
00:21:57,360 --> 00:22:00,879
and located in the world so if it's in a

626
00:21:59,039 --> 00:22:02,960
low income country it might be

627
00:22:00,880 --> 00:22:04,720
really interesting if it's a high income

628
00:22:02,960 --> 00:22:07,280
country then this

629
00:22:04,720 --> 00:22:09,120
wouldn't represent a high salary lastly

630
00:22:07,280 --> 00:22:11,520
we looked at the competitors using the

631
00:22:09,120 --> 00:22:13,678
sixgill and flair systems platforms

632
00:22:11,520 --> 00:22:14,720
i ended up finding six competitors

633
00:22:13,679 --> 00:22:16,559
advertising

634
00:22:14,720 --> 00:22:18,400
during the year 2020 on different

635
00:22:16,559 --> 00:22:19,120
underground forums for obfuscation as a

636
00:22:18,400 --> 00:22:21,600
service

637
00:22:19,120 --> 00:22:25,120
for android applications notice forums

638
00:22:21,600 --> 00:22:26,639
like xss dark market hack forums

639
00:22:25,120 --> 00:22:28,479
notice as well that the prices are

640
00:22:26,640 --> 00:22:30,000
slightly higher than the one that we

641
00:22:28,480 --> 00:22:31,919
investigated

642
00:22:30,000 --> 00:22:33,600
none of these competitors offered a

643
00:22:31,919 --> 00:22:35,919
platform with an api

644
00:22:33,600 --> 00:22:37,840
and all of them said that purchases

645
00:22:35,919 --> 00:22:38,799
happened via private message on jabra or

646
00:22:37,840 --> 00:22:40,480
telegram

647
00:22:38,799 --> 00:22:42,400
so our hypothesis is that these

648
00:22:40,480 --> 00:22:43,520
competitors are probably doing manual

649
00:22:42,400 --> 00:22:46,159
obfuscation

650
00:22:43,520 --> 00:22:47,600
thus the higher prices and our the one

651
00:22:46,159 --> 00:22:49,679
that we investigated

652
00:22:47,600 --> 00:22:51,280
was offering an api and automatic

653
00:22:49,679 --> 00:22:52,799
obfuscation which could have been a

654
00:22:51,280 --> 00:22:54,000
competitive edge in the market in

655
00:22:52,799 --> 00:22:55,840
conclusion we believe

656
00:22:54,000 --> 00:22:58,240
that the service we investigated is a

657
00:22:55,840 --> 00:23:00,320
medium quality obfuscation service

658
00:22:58,240 --> 00:23:02,240
a lot of work has been put in automating

659
00:23:00,320 --> 00:23:03,918
the process but al that also makes it

660
00:23:02,240 --> 00:23:05,520
easier to fingerprint

661
00:23:03,919 --> 00:23:06,960
we believe that the clientele for this

662
00:23:05,520 --> 00:23:08,720
service are individuals developing

663
00:23:06,960 --> 00:23:10,640
highly malicious applications

664
00:23:08,720 --> 00:23:12,640
so these individuals would want to see

665
00:23:10,640 --> 00:23:14,240
the obfuscated version

666
00:23:12,640 --> 00:23:16,400
have lower detection rates thus

667
00:23:14,240 --> 00:23:17,600
potentially increasing their infection

668
00:23:16,400 --> 00:23:18,880
rate

669
00:23:17,600 --> 00:23:20,480
and we wanted to mention that the

670
00:23:18,880 --> 00:23:21,679
platform has been offline since august

671
00:23:20,480 --> 00:23:24,799
2020

672
00:23:21,679 --> 00:23:27,120
yet we still see apks being submitted on

673
00:23:24,799 --> 00:23:29,600
virustotal as of november 2020.

674
00:23:27,120 --> 00:23:31,439
so either these apks are just apks that

675
00:23:29,600 --> 00:23:32,320
were obfuscated before and still caught

676
00:23:31,440 --> 00:23:34,720
in the wild

677
00:23:32,320 --> 00:23:36,480
or the administrators are still active

678
00:23:34,720 --> 00:23:39,120
without the platform so without

679
00:23:36,480 --> 00:23:41,120
accepting new clients potentially

680
00:23:39,120 --> 00:23:42,639
and we wanted to say props to the good

681
00:23:41,120 --> 00:23:44,479
job done by the security community in

682
00:23:42,640 --> 00:23:46,000
the past years because definitely

683
00:23:44,480 --> 00:23:48,240
it's not that easy to create an

684
00:23:46,000 --> 00:23:49,919
automated obfuscation as a service

685
00:23:48,240 --> 00:23:51,760
so we wanted to say good job because

686
00:23:49,919 --> 00:23:53,360
sharing the data as we're doing

687
00:23:51,760 --> 00:23:55,679
we have been doing in the past years

688
00:23:53,360 --> 00:23:55,678
works

689
00:23:55,919 --> 00:23:58,799
so we also wanted to mention that

690
00:23:57,360 --> 00:24:00,320
there'll be upcoming blogs and data

691
00:23:58,799 --> 00:24:02,400
sharing during butkoff

692
00:24:00,320 --> 00:24:04,000
uh so if you're interested in digging

693
00:24:02,400 --> 00:24:04,960
further there'll be more details in each

694
00:24:04,000 --> 00:24:06,559
of them and it'll be

695
00:24:04,960 --> 00:24:09,039
they will be available on each of our

696
00:24:06,559 --> 00:24:13,200
websites so thank you about conf and

697
00:24:09,039 --> 00:24:13,200
we'll be here if you have any questions

