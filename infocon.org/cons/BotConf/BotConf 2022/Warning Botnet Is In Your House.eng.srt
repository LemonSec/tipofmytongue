1
00:00:02,639 --> 00:00:06,000
you have the floor thank you

2
00:00:09,120 --> 00:00:11,440
hi everyone we hope you had a good break

3
00:00:11,440 --> 00:00:13,440
and that you now have new energies for

4
00:00:13,440 --> 00:00:14,639
our session

5
00:00:14,639 --> 00:00:16,400
in this talk we'll explore our journey

6
00:00:16,400 --> 00:00:18,880
into detecting botnets we'll start by

7
00:00:18,880 --> 00:00:20,800
taking down the rabbit hole into one

8
00:00:20,800 --> 00:00:22,800
exotic botnet

9
00:00:22,800 --> 00:00:24,160
from the initial

10
00:00:24,160 --> 00:00:26,240
discovery till take down and then we'll

11
00:00:26,240 --> 00:00:28,080
explore and share some detection

12
00:00:28,080 --> 00:00:30,560
techniques and mitigations in order to

13
00:00:30,560 --> 00:00:32,880
apply in your house

14
00:00:32,880 --> 00:00:34,719
but first let me introduce myself my

15
00:00:34,719 --> 00:00:36,239
name is sarit and i'm a security

16
00:00:36,239 --> 00:00:38,320
researcher at imperva for the last 11

17
00:00:38,320 --> 00:00:40,480
years i mainly focus on application

18
00:00:40,480 --> 00:00:42,559
security and i develop algorithms to

19
00:00:42,559 --> 00:00:46,239
detect and protect against attacks

20
00:00:47,120 --> 00:00:49,680
hi everyone my name is vitali i'm a

21
00:00:49,680 --> 00:00:52,320
security research manager at imperva i'm

22
00:00:52,320 --> 00:00:54,239
really interested in application and

23
00:00:54,239 --> 00:00:56,960
data security love teaching and play

24
00:00:56,960 --> 00:00:58,079
etfs

25
00:00:58,079 --> 00:01:02,239
and we are located in israel

26
00:01:04,239 --> 00:01:06,000
we'll start with with our research and

27
00:01:06,000 --> 00:01:08,000
its goals

28
00:01:08,000 --> 00:01:10,479
so when we stumble across an operation

29
00:01:10,479 --> 00:01:12,799
that looks like a botnet we usually want

30
00:01:12,799 --> 00:01:15,840
to answer three main questions

31
00:01:15,840 --> 00:01:17,680
how the bonnet operates

32
00:01:17,680 --> 00:01:20,080
what is the purpose of the botnet and

33
00:01:20,080 --> 00:01:22,720
when it all started of course we're also

34
00:01:22,720 --> 00:01:24,799
interested in understanding how to

35
00:01:24,799 --> 00:01:27,040
detect and stop the botnet and we will

36
00:01:27,040 --> 00:01:30,079
elaborate on that later on

37
00:01:30,079 --> 00:01:32,640
now our research started as part of a

38
00:01:32,640 --> 00:01:33,920
trend study

39
00:01:33,920 --> 00:01:35,119
that

40
00:01:35,119 --> 00:01:36,799
in application security that we

41
00:01:36,799 --> 00:01:38,320
periodically do

42
00:01:38,320 --> 00:01:40,400
we observed around 9 million attack

43
00:01:40,400 --> 00:01:42,880
attempts exploiting php unit remote code

44
00:01:42,880 --> 00:01:44,079
execution

45
00:01:44,079 --> 00:01:46,640
and we were wondering why is this cv so

46
00:01:46,640 --> 00:01:48,560
popular among attackers

47
00:01:48,560 --> 00:01:50,640
to understand this hype we started to

48
00:01:50,640 --> 00:01:53,040
analyze data from our data lake with our

49
00:01:53,040 --> 00:01:55,360
different ips using the same payload

50
00:01:55,360 --> 00:01:57,520
over and over again attacking different

51
00:01:57,520 --> 00:02:01,040
customers which remind us about behavior

52
00:02:01,040 --> 00:02:04,159
so we decided to dive in

53
00:02:04,159 --> 00:02:05,759
but first for for those who aren't

54
00:02:05,759 --> 00:02:08,399
familiar with php on it so pitch punit

55
00:02:08,399 --> 00:02:10,160
is a widely used testing framework for

56
00:02:10,160 --> 00:02:13,360
php it is used to perform unit tests in

57
00:02:13,360 --> 00:02:16,239
the application development cycle

58
00:02:16,239 --> 00:02:18,800
it is used in a variety of content

59
00:02:18,800 --> 00:02:20,720
management systems like wordpress

60
00:02:20,720 --> 00:02:24,080
prestashop drupal etc and also in many

61
00:02:24,080 --> 00:02:27,200
modules and developed by third parties

62
00:02:27,200 --> 00:02:31,120
in 2017 a new vulnerability remote code

63
00:02:31,120 --> 00:02:33,680
execution in php was discovered and

64
00:02:33,680 --> 00:02:36,160
released and the button that we are

65
00:02:36,160 --> 00:02:38,879
about to talk about is using this uh

66
00:02:38,879 --> 00:02:41,200
vulnerability in order to spread

67
00:02:41,200 --> 00:02:42,959
now this is why the effect of such a

68
00:02:42,959 --> 00:02:45,440
vulnerability can be quite wide uh

69
00:02:45,440 --> 00:02:47,200
similar to the log for shell and the

70
00:02:47,200 --> 00:02:49,200
spring for shell and that we recently

71
00:02:49,200 --> 00:02:51,680
witnessed

72
00:02:51,680 --> 00:02:54,400
uh let's see how the botnet operates

73
00:02:54,400 --> 00:02:56,879
so we started with the initial request

74
00:02:56,879 --> 00:02:59,040
that we saw in our data and here is a

75
00:02:59,040 --> 00:03:01,760
post request to the evaluating

76
00:03:01,760 --> 00:03:02,720
which is

77
00:03:02,720 --> 00:03:05,040
located under the php

78
00:03:05,040 --> 00:03:08,080
folder in the victims server

79
00:03:08,080 --> 00:03:10,720
now the post body contains a php code

80
00:03:10,720 --> 00:03:12,959
that downloads a perl script and

81
00:03:12,959 --> 00:03:15,840
executes it then it deletes it and also

82
00:03:15,840 --> 00:03:18,560
deletes the terminal history to remove

83
00:03:18,560 --> 00:03:20,319
traces

84
00:03:20,319 --> 00:03:21,920
the next step we took

85
00:03:21,920 --> 00:03:25,040
was to download the perl script

86
00:03:25,040 --> 00:03:26,640
now we can see that the attacker defines

87
00:03:26,640 --> 00:03:28,879
a parameter that represents a current up

88
00:03:28,879 --> 00:03:29,840
task

89
00:03:29,840 --> 00:03:32,319
this task is scheduled to run every five

90
00:03:32,319 --> 00:03:33,680
minutes

91
00:03:33,680 --> 00:03:35,840
and it includes several imports and

92
00:03:35,840 --> 00:03:38,560
basic c4 encoding to obfuscate his

93
00:03:38,560 --> 00:03:40,239
malicious payload

94
00:03:40,239 --> 00:03:42,239
now the output of this task will be sent

95
00:03:42,239 --> 00:03:46,560
to devnow so no logs will be saved

96
00:03:46,560 --> 00:03:48,640
and one interesting thing to note here

97
00:03:48,640 --> 00:03:50,560
is that the attacker was using the

98
00:03:50,560 --> 00:03:52,720
combination of pair and python which are

99
00:03:52,720 --> 00:03:54,560
both installed out of the box in many

100
00:03:54,560 --> 00:03:56,000
linux systems

101
00:03:56,000 --> 00:03:58,000
and this increase

102
00:03:58,000 --> 00:03:59,280
this increase the probability of a

103
00:03:59,280 --> 00:04:01,120
successful infection

104
00:04:01,120 --> 00:04:03,280
now the next step uh

105
00:04:03,280 --> 00:04:05,840
we took is of course understanding what

106
00:04:05,840 --> 00:04:08,080
this base64 and coded string is all

107
00:04:08,080 --> 00:04:10,560
about what is this python script

108
00:04:10,560 --> 00:04:13,280
and this uh this python script is

109
00:04:13,280 --> 00:04:14,480
actually doing

110
00:04:14,480 --> 00:04:15,439
so

111
00:04:15,439 --> 00:04:18,399
here is the decoded code

112
00:04:18,399 --> 00:04:21,199
we can see that um to stay undetected

113
00:04:21,199 --> 00:04:23,280
the script creates a unique and deep

114
00:04:23,280 --> 00:04:25,919
path under the temp folder

115
00:04:25,919 --> 00:04:29,360
it creates several hidden folders inside

116
00:04:29,360 --> 00:04:32,240
and then he downloads a css file which

117
00:04:32,240 --> 00:04:34,880
is actually a zip file containing a

118
00:04:34,880 --> 00:04:37,680
script called update py

119
00:04:37,680 --> 00:04:40,560
this is the structure of the

120
00:04:40,560 --> 00:04:42,639
zip file

121
00:04:42,639 --> 00:04:44,720
there is a lib directory that includes

122
00:04:44,720 --> 00:04:47,440
several libraries in python that the

123
00:04:47,440 --> 00:04:49,199
the python script needs in order to run

124
00:04:49,199 --> 00:04:51,120
successfully without external

125
00:04:51,120 --> 00:04:52,479
dependencies

126
00:04:52,479 --> 00:04:54,479
now in addition there is a the python

127
00:04:54,479 --> 00:04:56,400
module py

128
00:04:56,400 --> 00:04:58,240
a custom console one that the attacker

129
00:04:58,240 --> 00:05:01,520
was using as part of this communication

130
00:05:01,520 --> 00:05:03,759
now from now on we'll call the location

131
00:05:03,759 --> 00:05:07,360
of the update py script as repository a

132
00:05:07,360 --> 00:05:10,880
now let's see what wpy is doing

133
00:05:10,880 --> 00:05:13,440
so here is a partial screenshot of the

134
00:05:13,440 --> 00:05:16,160
code of the updpy script which sends

135
00:05:16,160 --> 00:05:20,720
http request to repository bsd

136
00:05:20,720 --> 00:05:23,600
now to understand what the purpose of

137
00:05:23,600 --> 00:05:26,160
object py we mimic the request

138
00:05:26,160 --> 00:05:28,400
and you can see here that

139
00:05:28,400 --> 00:05:31,919
user agent it has a special

140
00:05:31,919 --> 00:05:35,280
phrase archer ghost 8 and without it

141
00:05:35,280 --> 00:05:36,800
no response

142
00:05:36,800 --> 00:05:39,120
will be received

143
00:05:39,120 --> 00:05:41,600
now as a response to a request a good

144
00:05:41,600 --> 00:05:44,960
request with this header and the victim

145
00:05:44,960 --> 00:05:47,199
and in this case it was us will get the

146
00:05:47,199 --> 00:05:48,800
following json

147
00:05:48,800 --> 00:05:50,960
and this json contains three keys the

148
00:05:50,960 --> 00:05:53,120
first one the script

149
00:05:53,120 --> 00:05:55,520
contains commands to download and

150
00:05:55,520 --> 00:05:57,199
execute a python script

151
00:05:57,199 --> 00:05:59,600
the next one the payload contains a list

152
00:05:59,600 --> 00:06:02,880
of sites and the last one rgv contains

153
00:06:02,880 --> 00:06:04,720
the ip or hostname

154
00:06:04,720 --> 00:06:06,800
now at this point

155
00:06:06,800 --> 00:06:08,479
we didn't fully understand what the

156
00:06:08,479 --> 00:06:10,479
purpose of this json file but we just

157
00:06:10,479 --> 00:06:11,759
could assume

158
00:06:11,759 --> 00:06:14,479
that the victim is using it in order to

159
00:06:14,479 --> 00:06:18,400
infect new and attack new victims

160
00:06:18,400 --> 00:06:20,800
now after we analyze the update py

161
00:06:20,800 --> 00:06:23,520
script the custom python module and

162
00:06:23,520 --> 00:06:25,520
performed several requests

163
00:06:25,520 --> 00:06:27,039
we came to the conclusion that

164
00:06:27,039 --> 00:06:30,720
repository bsd must be the cnc

165
00:06:30,720 --> 00:06:32,160
now notice

166
00:06:32,160 --> 00:06:36,880
and this is the login screen of the cnc

167
00:06:36,880 --> 00:06:39,520
now don't notice this uh phrase adelia

168
00:06:39,520 --> 00:06:43,360
putri uh we saw it earlier in the

169
00:06:43,360 --> 00:06:45,520
in the downloader zip it was used as a

170
00:06:45,520 --> 00:06:47,360
password to extract

171
00:06:47,360 --> 00:06:49,599
the files inside and we'll talk about it

172
00:06:49,599 --> 00:06:52,960
later on in the presentation

173
00:06:53,280 --> 00:06:55,280
now i know that we saw a lot of codes so

174
00:06:55,280 --> 00:06:56,800
i just want to make sure that you are

175
00:06:56,800 --> 00:06:58,000
all with me

176
00:06:58,000 --> 00:06:59,360
so let's recap

177
00:06:59,360 --> 00:07:01,680
so we had a victim that is being

178
00:07:01,680 --> 00:07:04,080
exploited by using php unit remote code

179
00:07:04,080 --> 00:07:05,360
execution

180
00:07:05,360 --> 00:07:08,720
then um the victim downloads and a

181
00:07:08,720 --> 00:07:11,360
trapper pl script which creates a cron

182
00:07:11,360 --> 00:07:13,680
job it is scheduled to run every five

183
00:07:13,680 --> 00:07:16,560
minutes to download the downloader zip

184
00:07:16,560 --> 00:07:20,080
this zip contains the update py script

185
00:07:20,080 --> 00:07:22,400
which communicate with cnc to receive

186
00:07:22,400 --> 00:07:24,560
json files and let's call them attack

187
00:07:24,560 --> 00:07:27,360
instructions now moving on to vitaly to

188
00:07:27,360 --> 00:07:31,280
talk about the attack instructions

189
00:07:31,280 --> 00:07:32,960
thank you siri

190
00:07:32,960 --> 00:07:33,680
so

191
00:07:33,680 --> 00:07:36,560
after we saw it we automated the process

192
00:07:36,560 --> 00:07:39,120
and fetched as much attack instruction

193
00:07:39,120 --> 00:07:40,720
as possible

194
00:07:40,720 --> 00:07:43,440
after that we parsed them and found out

195
00:07:43,440 --> 00:07:46,080
that there are multiple css files which

196
00:07:46,080 --> 00:07:48,479
are what we showed are actually zip

197
00:07:48,479 --> 00:07:49,680
files

198
00:07:49,680 --> 00:07:52,400
and from now on i will call the location

199
00:07:52,400 --> 00:07:56,319
of the css files as repository b

200
00:07:56,319 --> 00:07:58,080
so here is an example of one of the

201
00:07:58,080 --> 00:08:01,360
repositories uh it's a legitimate site

202
00:08:01,360 --> 00:08:04,080
that was classified as an educational

203
00:08:04,080 --> 00:08:07,120
website it's located in indonesia

204
00:08:07,120 --> 00:08:08,560
as you can see

205
00:08:08,560 --> 00:08:11,199
it stores many bundles so we are calling

206
00:08:11,199 --> 00:08:14,240
those css files uh bundles

207
00:08:14,240 --> 00:08:18,080
and it's located under the css path with

208
00:08:18,080 --> 00:08:20,560
other legitimate css files

209
00:08:20,560 --> 00:08:23,440
and they all have the same prefix which

210
00:08:23,440 --> 00:08:25,440
is the in memory

211
00:08:25,440 --> 00:08:26,400
and

212
00:08:26,400 --> 00:08:29,120
then we mentioned there are zip files we

213
00:08:29,120 --> 00:08:31,919
discovered more than 70

214
00:08:31,919 --> 00:08:34,000
repositories which are basically all

215
00:08:34,000 --> 00:08:36,240
hacked websites

216
00:08:36,240 --> 00:08:39,039
now let's look at one of the bundles and

217
00:08:39,039 --> 00:08:42,080
so we chose the v bulletin bundle if not

218
00:08:42,080 --> 00:08:44,480
familiar view bulletin is a framework

219
00:08:44,480 --> 00:08:48,800
for forums that is written in php

220
00:08:48,800 --> 00:08:51,279
it contains four main parts

221
00:08:51,279 --> 00:08:53,760
uh so the leap folder we already saw it

222
00:08:53,760 --> 00:08:56,320
in the downloader zip

223
00:08:56,320 --> 00:08:57,519
um

224
00:08:57,519 --> 00:09:00,000
and from now on we will show you a lot

225
00:09:00,000 --> 00:09:03,040
of code snippets we don't expect you to

226
00:09:03,040 --> 00:09:05,040
to read it they are here for reference

227
00:09:05,040 --> 00:09:07,279
for what we found

228
00:09:07,279 --> 00:09:08,399
okay so

229
00:09:08,399 --> 00:09:12,560
um the initial script will run from a vb

230
00:09:12,560 --> 00:09:13,440
pi

231
00:09:13,440 --> 00:09:16,160
uh vb pi is present in the attack

232
00:09:16,160 --> 00:09:18,080
instructions in one of the attack

233
00:09:18,080 --> 00:09:19,519
instructions

234
00:09:19,519 --> 00:09:20,720
and

235
00:09:20,720 --> 00:09:23,519
it received two arguments the first one

236
00:09:23,519 --> 00:09:25,760
is a file with the list of domains to

237
00:09:25,760 --> 00:09:26,720
attack

238
00:09:26,720 --> 00:09:28,959
and the second one is the ip or the

239
00:09:28,959 --> 00:09:31,920
hostname hostname that those sites are

240
00:09:31,920 --> 00:09:34,240
hosted

241
00:09:34,839 --> 00:09:39,200
on um for each uh um

242
00:09:39,200 --> 00:09:42,640
for each domain a new executor will run

243
00:09:42,640 --> 00:09:46,160
this executor is contains all the many

244
00:09:46,160 --> 00:09:48,560
vulnerabilities that are related to the

245
00:09:48,560 --> 00:09:52,880
v bulletin and for each url a vulnerable

246
00:09:52,880 --> 00:09:55,440
url and for each domain

247
00:09:55,440 --> 00:09:59,040
a new exploit with a payload will run so

248
00:09:59,040 --> 00:10:01,200
it's create like a tree

249
00:10:01,200 --> 00:10:02,079
and

250
00:10:02,079 --> 00:10:04,640
inside the export folder we can find the

251
00:10:04,640 --> 00:10:06,160
the payload

252
00:10:06,160 --> 00:10:08,160
the logic to check for successful

253
00:10:08,160 --> 00:10:09,680
exploitation

254
00:10:09,680 --> 00:10:13,360
and the reporting back to the cnc

255
00:10:13,360 --> 00:10:15,600
so this is how the reporting looks like

256
00:10:15,600 --> 00:10:18,399
on a successful exploitation a post

257
00:10:18,399 --> 00:10:21,680
request with a json body will be sent

258
00:10:21,680 --> 00:10:24,880
the json body will contain the module

259
00:10:24,880 --> 00:10:26,560
the bundle that was used in the

260
00:10:26,560 --> 00:10:27,920
exploitation

261
00:10:27,920 --> 00:10:31,279
and the domain that was infected

262
00:10:31,279 --> 00:10:34,399
um so what about the payloads so almost

263
00:10:34,399 --> 00:10:37,200
all payloads for the uh

264
00:10:37,200 --> 00:10:39,040
bundles contain

265
00:10:39,040 --> 00:10:40,000
the same

266
00:10:40,000 --> 00:10:43,040
the same payload is basically a php

267
00:10:43,040 --> 00:10:45,600
script that will allow further upload of

268
00:10:45,600 --> 00:10:47,920
additional files

269
00:10:47,920 --> 00:10:48,959
however

270
00:10:48,959 --> 00:10:51,360
we also discovered a different bundle

271
00:10:51,360 --> 00:10:54,720
and that its purpose is to brute force

272
00:10:54,720 --> 00:10:56,800
wordpress login sites

273
00:10:56,800 --> 00:10:59,040
and we suspect that this module was used

274
00:10:59,040 --> 00:10:59,920
to

275
00:10:59,920 --> 00:11:01,440
enrich

276
00:11:01,440 --> 00:11:05,920
the repository b's that we seen before

277
00:11:05,920 --> 00:11:07,120
and

278
00:11:07,120 --> 00:11:08,399
totally we

279
00:11:08,399 --> 00:11:11,600
found 17 bundles so each bundle will

280
00:11:11,600 --> 00:11:13,839
target a different framework that is

281
00:11:13,839 --> 00:11:15,920
written in php

282
00:11:15,920 --> 00:11:18,160
and and most of them will export

283
00:11:18,160 --> 00:11:20,079
vulnerabilities that are related to

284
00:11:20,079 --> 00:11:22,480
remote code execution file upload and

285
00:11:22,480 --> 00:11:24,240
remote file inclusion

286
00:11:24,240 --> 00:11:26,560
and two main payloads that basically

287
00:11:26,560 --> 00:11:29,760
lead to persistency on the victims

288
00:11:29,760 --> 00:11:32,480
so after a successful exploitation

289
00:11:32,480 --> 00:11:35,519
uh the boatmaster can connect and

290
00:11:35,519 --> 00:11:38,160
expand its activity

291
00:11:38,160 --> 00:11:40,000
and now back to saree to talk about the

292
00:11:40,000 --> 00:11:43,000
purpose

293
00:11:44,560 --> 00:11:46,560
okay so now at this point we're

294
00:11:46,560 --> 00:11:50,079
wondering why what is that that what are

295
00:11:50,079 --> 00:11:51,200
the initial

296
00:11:51,200 --> 00:11:53,360
actions the bottom master will do with

297
00:11:53,360 --> 00:11:55,680
this newly infected victims

298
00:11:55,680 --> 00:11:57,040
and what is the main purpose of the

299
00:11:57,040 --> 00:11:58,320
botnet

300
00:11:58,320 --> 00:12:00,240
so in order to understand what the

301
00:12:00,240 --> 00:12:02,720
purpose of the of those victims we had

302
00:12:02,720 --> 00:12:04,639
to become a victim ourself

303
00:12:04,639 --> 00:12:07,040
so we created a cms honeypot with the

304
00:12:07,040 --> 00:12:09,519
vulnerable plug-in and attacked it with

305
00:12:09,519 --> 00:12:10,959
a fake bot

306
00:12:10,959 --> 00:12:13,360
then we reported to the cnc of a

307
00:12:13,360 --> 00:12:15,920
successful infection and by that our

308
00:12:15,920 --> 00:12:18,800
honeypot because became a bot

309
00:12:18,800 --> 00:12:21,279
uh in the botnet waiting for the aborted

310
00:12:21,279 --> 00:12:23,279
master to approach and change its

311
00:12:23,279 --> 00:12:24,800
purpose

312
00:12:24,800 --> 00:12:26,959
now it took the attacker one and a half

313
00:12:26,959 --> 00:12:29,519
hours to connect our honeypot

314
00:12:29,519 --> 00:12:31,279
and which is kind of oppressive as it

315
00:12:31,279 --> 00:12:33,279
was very quickly

316
00:12:33,279 --> 00:12:35,440
now i want to add here that the

317
00:12:35,440 --> 00:12:37,920
honeypotted world that we created and

318
00:12:37,920 --> 00:12:39,920
was in a dockerized environment and we

319
00:12:39,920 --> 00:12:43,200
had some sort of log inside

320
00:12:43,200 --> 00:12:45,360
and we could see what the attacker was

321
00:12:45,360 --> 00:12:47,519
doing there like and which files they

322
00:12:47,519 --> 00:12:50,399
added or modified and which are commands

323
00:12:50,399 --> 00:12:53,200
around inside so we saw that attacker

324
00:12:53,200 --> 00:12:56,399
was adding a second web shell with

325
00:12:56,399 --> 00:12:58,560
command execution capabilities

326
00:12:58,560 --> 00:13:00,639
now offered after that he ran several

327
00:13:00,639 --> 00:13:03,920
commands and escalated his privileges

328
00:13:03,920 --> 00:13:06,480
and by that he got complete control over

329
00:13:06,480 --> 00:13:08,800
the server

330
00:13:08,800 --> 00:13:11,920
now we saw four purposes for the bots

331
00:13:11,920 --> 00:13:14,320
the first one was a result of our cms

332
00:13:14,320 --> 00:13:15,519
honeypot

333
00:13:15,519 --> 00:13:17,680
which was converted into a click-bait

334
00:13:17,680 --> 00:13:19,600
site when we tried to access the

335
00:13:19,600 --> 00:13:22,079
honeypot login screen we were redirected

336
00:13:22,079 --> 00:13:25,279
to one of many clickbait sites

337
00:13:25,279 --> 00:13:27,600
now an exciting purpose we observed was

338
00:13:27,600 --> 00:13:29,519
a cryptominer that mines for monero

339
00:13:29,519 --> 00:13:30,959
coins

340
00:13:30,959 --> 00:13:33,120
as part of the code analysis we did we

341
00:13:33,120 --> 00:13:35,200
got access to the hacker's payment

342
00:13:35,200 --> 00:13:36,880
address and we could see his balance in

343
00:13:36,880 --> 00:13:38,399
real time

344
00:13:38,399 --> 00:13:40,240
now the other two purposes are related

345
00:13:40,240 --> 00:13:42,560
to the mission of the newly bought

346
00:13:42,560 --> 00:13:45,199
that were added to the botnet and let me

347
00:13:45,199 --> 00:13:46,959
elaborate on that

348
00:13:46,959 --> 00:13:49,360
so if you all remember the initial

349
00:13:49,360 --> 00:13:51,839
attack that started this whole research

350
00:13:51,839 --> 00:13:54,800
is a payload related to phpunit

351
00:13:54,800 --> 00:13:57,519
now once a victim server was attacked it

352
00:13:57,519 --> 00:13:59,680
was added to the botnet as a spreading

353
00:13:59,680 --> 00:14:02,399
bot and why do i call it a spreading bot

354
00:14:02,399 --> 00:14:04,959
this is because this bot constantly

355
00:14:04,959 --> 00:14:06,720
communicated with the cnc to receive

356
00:14:06,720 --> 00:14:09,199
attack instructions telling him who to

357
00:14:09,199 --> 00:14:12,000
attack and how

358
00:14:12,000 --> 00:14:13,920
and the bot is used to infect new

359
00:14:13,920 --> 00:14:16,959
machines and expand the botnet now a

360
00:14:16,959 --> 00:14:18,720
victim that was infected by the

361
00:14:18,720 --> 00:14:20,880
spreading bot can become one of two a

362
00:14:20,880 --> 00:14:23,680
spreading bot himself or a pending bot

363
00:14:23,680 --> 00:14:25,839
so let's talk about the pending bot

364
00:14:25,839 --> 00:14:28,240
so a pending bot as i just said is a

365
00:14:28,240 --> 00:14:30,079
victim side that was attacked by

366
00:14:30,079 --> 00:14:33,120
spreading bot and now sits in idle

367
00:14:33,120 --> 00:14:34,240
waiting for the

368
00:14:34,240 --> 00:14:36,639
bot net master to approach and change

369
00:14:36,639 --> 00:14:38,000
its purpose

370
00:14:38,000 --> 00:14:40,000
and this is why we named it pending bot

371
00:14:40,000 --> 00:14:42,000
it just sit and wait it doesn't initiate

372
00:14:42,000 --> 00:14:45,120
communication with the cnc now i just

373
00:14:45,120 --> 00:14:47,760
want to add that we said that

374
00:14:47,760 --> 00:14:49,839
the pills that are being used um the

375
00:14:49,839 --> 00:14:51,199
attacker has

376
00:14:51,199 --> 00:14:53,360
remote code execution on the servers and

377
00:14:53,360 --> 00:14:55,519
also file uploads so basically he can do

378
00:14:55,519 --> 00:14:59,839
whatever he wants we saw those purposes

379
00:14:59,839 --> 00:15:02,560
now until now we cover the full flow

380
00:15:02,560 --> 00:15:04,880
from the initial infection of a victim

381
00:15:04,880 --> 00:15:07,040
to become a body in the botnet to the

382
00:15:07,040 --> 00:15:10,160
time where it infects other victims by

383
00:15:10,160 --> 00:15:12,720
demand by the cnc now let's see the

384
00:15:12,720 --> 00:15:14,560
entities that play around this massive

385
00:15:14,560 --> 00:15:16,399
operation

386
00:15:16,399 --> 00:15:17,279
so

387
00:15:17,279 --> 00:15:19,040
when looking at the botnet entities we

388
00:15:19,040 --> 00:15:21,040
can split them into three groups the

389
00:15:21,040 --> 00:15:23,040
budget infrastructure the button and

390
00:15:23,040 --> 00:15:25,120
third party services and the botnet

391
00:15:25,120 --> 00:15:27,040
actors

392
00:15:27,040 --> 00:15:28,720
under the botnet infrastructure we have

393
00:15:28,720 --> 00:15:30,720
the cnc which is responsible for the

394
00:15:30,720 --> 00:15:32,240
entire operation

395
00:15:32,240 --> 00:15:34,240
and is used to supply attack

396
00:15:34,240 --> 00:15:36,160
instructions to other bots

397
00:15:36,160 --> 00:15:38,320
we have repository a which stores the

398
00:15:38,320 --> 00:15:40,800
update py script and we have repository

399
00:15:40,800 --> 00:15:45,199
b which stores the bundles the css files

400
00:15:45,199 --> 00:15:47,759
um i just want to add that repository a

401
00:15:47,759 --> 00:15:49,920
and b are um

402
00:15:49,920 --> 00:15:50,639
are

403
00:15:50,639 --> 00:15:52,880
legitimate sites that were hacked

404
00:15:52,880 --> 00:15:55,759
and are used by the botnet master

405
00:15:55,759 --> 00:15:57,839
now under the third party services we

406
00:15:57,839 --> 00:15:59,839
have github and paceman that the

407
00:15:59,839 --> 00:16:01,519
attacker was using as part of the

408
00:16:01,519 --> 00:16:02,720
infection

409
00:16:02,720 --> 00:16:04,000
and

410
00:16:04,000 --> 00:16:06,000
there were several

411
00:16:06,000 --> 00:16:08,240
files there among them payloads for

412
00:16:08,240 --> 00:16:09,920
example the

413
00:16:09,920 --> 00:16:13,440
file upload and the crypto miner

414
00:16:13,440 --> 00:16:15,519
and last we have the botnet actors we

415
00:16:15,519 --> 00:16:18,160
have the victim and we have depending

416
00:16:18,160 --> 00:16:20,480
what we which is uh but it seats and

417
00:16:20,480 --> 00:16:21,759
wait to

418
00:16:21,759 --> 00:16:23,199
for the abundant master to approach and

419
00:16:23,199 --> 00:16:25,040
change its purpose and we have the

420
00:16:25,040 --> 00:16:27,519
spreading one which

421
00:16:27,519 --> 00:16:30,079
asks for has a concept communication

422
00:16:30,079 --> 00:16:31,519
with the cnc to receive attack

423
00:16:31,519 --> 00:16:34,160
instructions

424
00:16:35,360 --> 00:16:37,279
okay so until now we covered two

425
00:16:37,279 --> 00:16:38,399
questions

426
00:16:38,399 --> 00:16:41,440
what how the how the botnet operates and

427
00:16:41,440 --> 00:16:43,600
what is the purpose of the botnet now

428
00:16:43,600 --> 00:16:45,519
let's continue and talk about

429
00:16:45,519 --> 00:16:47,519
when it all started

430
00:16:47,519 --> 00:16:50,399
so we named the botnet

431
00:16:50,399 --> 00:16:52,639
kashmir black and why is this the

432
00:16:52,639 --> 00:16:54,000
selected name

433
00:16:54,000 --> 00:16:56,480
so during the cod analysis we did we

434
00:16:56,480 --> 00:16:58,639
bumped into a github repository called

435
00:16:58,639 --> 00:17:00,800
kashmir black and

436
00:17:00,800 --> 00:17:01,600
it

437
00:17:01,600 --> 00:17:03,839
included several files and among them

438
00:17:03,839 --> 00:17:04,559
the

439
00:17:04,559 --> 00:17:06,319
um

440
00:17:06,319 --> 00:17:09,280
the cryptominer and the web shell

441
00:17:09,280 --> 00:17:12,000
and also during the code analysis we did

442
00:17:12,000 --> 00:17:15,359
we saw many times this phrase and here

443
00:17:15,359 --> 00:17:18,880
is an example of one of them

444
00:17:18,880 --> 00:17:20,880
now let's go and talk about the activity

445
00:17:20,880 --> 00:17:22,640
timeline of the botnet

446
00:17:22,640 --> 00:17:24,480
so we said that the first time that we

447
00:17:24,480 --> 00:17:27,119
noticed the abundant activity was during

448
00:17:27,119 --> 00:17:28,160
um

449
00:17:28,160 --> 00:17:30,559
was a result of a trend study that we

450
00:17:30,559 --> 00:17:32,960
periodically do and this happened on

451
00:17:32,960 --> 00:17:34,880
january 2020

452
00:17:34,880 --> 00:17:37,600
then we checked our data leak and so

453
00:17:37,600 --> 00:17:42,160
request back from november 2019

454
00:17:42,160 --> 00:17:44,240
after the cotton eyes we did we saw

455
00:17:44,240 --> 00:17:46,799
several comments inside and we saw that

456
00:17:46,799 --> 00:17:51,520
it was uh from may 2016.

457
00:17:51,520 --> 00:17:54,480
now on october 2020 we released two

458
00:17:54,480 --> 00:17:56,799
blogs related to the botnet operation

459
00:17:56,799 --> 00:17:58,480
and we also

460
00:17:58,480 --> 00:17:59,600
approached

461
00:17:59,600 --> 00:18:01,200
the law enforcement

462
00:18:01,200 --> 00:18:03,440
and the site owners of all the

463
00:18:03,440 --> 00:18:05,200
repositories

464
00:18:05,200 --> 00:18:06,480
and told them about the malicious

465
00:18:06,480 --> 00:18:10,400
activity that the sites have been doing

466
00:18:10,640 --> 00:18:12,960
now the last evidence that we saw of the

467
00:18:12,960 --> 00:18:15,200
botnet of updating

468
00:18:15,200 --> 00:18:17,039
was in one of the repositories we saw

469
00:18:17,039 --> 00:18:19,039
the modification date of the bundles

470
00:18:19,039 --> 00:18:22,000
from june 2021

471
00:18:22,000 --> 00:18:24,160
now you're probably wondering what is

472
00:18:24,160 --> 00:18:26,240
the current state of this uh of this

473
00:18:26,240 --> 00:18:27,360
botnet

474
00:18:27,360 --> 00:18:30,880
so as we can see the botnet operation

475
00:18:30,880 --> 00:18:33,200
was for about five years

476
00:18:33,200 --> 00:18:34,320
and

477
00:18:34,320 --> 00:18:36,320
after we reported the site owners and

478
00:18:36,320 --> 00:18:38,640
the law enforcement we checked our data

479
00:18:38,640 --> 00:18:41,840
and we couldn't see additional requests

480
00:18:41,840 --> 00:18:44,720
on our customers what we believe that it

481
00:18:44,720 --> 00:18:46,960
doesn't mean that the operation stopped

482
00:18:46,960 --> 00:18:49,520
completely

483
00:18:49,600 --> 00:18:52,640
now back to you vitali

484
00:18:52,640 --> 00:18:54,160
thanks

485
00:18:54,160 --> 00:18:56,720
and okay so now we'll talk about the

486
00:18:56,720 --> 00:18:58,960
kashmir black evolution

487
00:18:58,960 --> 00:19:01,679
and we had the research data for about

488
00:19:01,679 --> 00:19:03,039
one year

489
00:19:03,039 --> 00:19:06,960
and this is the first uh phase of the

490
00:19:06,960 --> 00:19:09,200
botnet and i will just recap how it

491
00:19:09,200 --> 00:19:12,640
operates so we have the php remote code

492
00:19:12,640 --> 00:19:14,160
execution

493
00:19:14,160 --> 00:19:16,799
being exported on the victim

494
00:19:16,799 --> 00:19:19,200
then the victim downloads trouble pl

495
00:19:19,200 --> 00:19:21,760
script from the cnc

496
00:19:21,760 --> 00:19:24,160
and after that it will approach

497
00:19:24,160 --> 00:19:26,400
repository a which contains the update

498
00:19:26,400 --> 00:19:27,440
py

499
00:19:27,440 --> 00:19:30,080
and it will run every five minutes to

500
00:19:30,080 --> 00:19:33,360
fetch attack instructions from the cnc

501
00:19:33,360 --> 00:19:35,360
once the attack instruction

502
00:19:35,360 --> 00:19:37,760
is received uh from one of the

503
00:19:37,760 --> 00:19:39,679
repository b's

504
00:19:39,679 --> 00:19:42,640
the victim will attacked

505
00:19:42,640 --> 00:19:44,080
new victims

506
00:19:44,080 --> 00:19:46,000
so this is the initial stage at this

507
00:19:46,000 --> 00:19:48,799
stage if you can see we have only one

508
00:19:48,799 --> 00:19:51,200
bundle in memory.css

509
00:19:51,200 --> 00:19:54,400
and this bundle contains all the exploit

510
00:19:54,400 --> 00:19:56,160
for

511
00:19:56,160 --> 00:20:00,400
the entire framework for php

512
00:20:00,400 --> 00:20:02,799
now the second phase we called it

513
00:20:02,799 --> 00:20:04,480
spreading the bundles

514
00:20:04,480 --> 00:20:06,960
in this stage the attacker introduced

515
00:20:06,960 --> 00:20:09,600
many more repository b's it gave him

516
00:20:09,600 --> 00:20:11,039
agility

517
00:20:11,039 --> 00:20:12,480
um

518
00:20:12,480 --> 00:20:13,360
and

519
00:20:13,360 --> 00:20:15,280
now he also

520
00:20:15,280 --> 00:20:18,480
split up the in-memory css bundle so

521
00:20:18,480 --> 00:20:21,840
instead of having one single css

522
00:20:21,840 --> 00:20:22,880
bundle

523
00:20:22,880 --> 00:20:26,000
he will have multiple in-memory css each

524
00:20:26,000 --> 00:20:29,440
one of them will target a different php

525
00:20:29,440 --> 00:20:30,640
framework

526
00:20:30,640 --> 00:20:33,520
so as you can see uh now he has a

527
00:20:33,520 --> 00:20:36,159
an infrastructure like plug-and-play he

528
00:20:36,159 --> 00:20:37,919
can find more vulnerabilities just

529
00:20:37,919 --> 00:20:39,280
create a

530
00:20:39,280 --> 00:20:41,440
css replicate it across

531
00:20:41,440 --> 00:20:42,960
his repositories

532
00:20:42,960 --> 00:20:44,640
and

533
00:20:44,640 --> 00:20:47,600
respond with a new attack instruction

534
00:20:47,600 --> 00:20:48,720
now

535
00:20:48,720 --> 00:20:52,240
the third step is load balancing and

536
00:20:52,240 --> 00:20:54,320
hiding the cnc

537
00:20:54,320 --> 00:20:57,039
so in this stage he introduced a new

538
00:20:57,039 --> 00:20:58,720
hacked

539
00:20:58,720 --> 00:20:59,919
web server

540
00:20:59,919 --> 00:21:02,640
which will hold the trouble pl so now

541
00:21:02,640 --> 00:21:04,960
the victim will not approach

542
00:21:04,960 --> 00:21:08,480
the cnc but he will approach the hacked

543
00:21:08,480 --> 00:21:09,840
website

544
00:21:09,840 --> 00:21:12,720
he moved the update py to one of the

545
00:21:12,720 --> 00:21:16,000
repositories so now repository a and b

546
00:21:16,000 --> 00:21:18,400
are joined into one and

547
00:21:18,400 --> 00:21:19,440
um

548
00:21:19,440 --> 00:21:21,520
and because they joined as one he needed

549
00:21:21,520 --> 00:21:24,559
to add a load balancer so on each so

550
00:21:24,559 --> 00:21:26,320
when he wants to pull the update py

551
00:21:26,320 --> 00:21:28,320
which is the communication script he

552
00:21:28,320 --> 00:21:29,280
need to

553
00:21:29,280 --> 00:21:32,080
let the victim know where it's located

554
00:21:32,080 --> 00:21:33,360
another thing

555
00:21:33,360 --> 00:21:35,120
here he reduced the time of the crown

556
00:21:35,120 --> 00:21:38,720
job from five minutes to three

557
00:21:38,720 --> 00:21:39,760
and

558
00:21:39,760 --> 00:21:40,640
he

559
00:21:40,640 --> 00:21:43,200
to cut all communication with the cnc he

560
00:21:43,200 --> 00:21:46,080
introduced another server we called it

561
00:21:46,080 --> 00:21:48,480
instruction server so as the name

562
00:21:48,480 --> 00:21:51,120
implies it only uh fetches in flat

563
00:21:51,120 --> 00:21:53,520
instructions and reports back

564
00:21:53,520 --> 00:21:56,799
and at this point you can see

565
00:21:56,799 --> 00:21:59,919
the victim never directly talks to the

566
00:21:59,919 --> 00:22:02,400
cnc

567
00:22:02,480 --> 00:22:05,200
now the last step that we observed was

568
00:22:05,200 --> 00:22:08,720
adding dropbox so instead of the

569
00:22:08,720 --> 00:22:11,520
instructions server he replaced it with

570
00:22:11,520 --> 00:22:13,039
dropbox

571
00:22:13,039 --> 00:22:15,840
for getting the attack instructions and

572
00:22:15,840 --> 00:22:18,559
reporting on successful exploitation

573
00:22:18,559 --> 00:22:21,039
so this is a big change it

574
00:22:21,039 --> 00:22:23,200
completely um

575
00:22:23,200 --> 00:22:25,200
masks the communication so i think

576
00:22:25,200 --> 00:22:26,799
everybody here using dropbox and

577
00:22:26,799 --> 00:22:29,280
organization also so

578
00:22:29,280 --> 00:22:31,120
you will not be suspicious of any

579
00:22:31,120 --> 00:22:33,678
activity

580
00:22:34,000 --> 00:22:36,720
now let's dive into dropbox so it was an

581
00:22:36,720 --> 00:22:39,280
interesting one so because we had the

582
00:22:39,280 --> 00:22:42,080
code for all the bundles and we can

583
00:22:42,080 --> 00:22:44,000
track we found

584
00:22:44,000 --> 00:22:46,159
this request to fetch attack

585
00:22:46,159 --> 00:22:48,880
instructions and as you can see we got

586
00:22:48,880 --> 00:22:51,679
the authorization key to access

587
00:22:51,679 --> 00:22:53,360
the dropbox account

588
00:22:53,360 --> 00:22:55,440
so we thought to ourselves why not poke

589
00:22:55,440 --> 00:22:58,159
around and see what we can find

590
00:22:58,159 --> 00:22:59,360
so

591
00:22:59,360 --> 00:23:01,280
here we could find a root directory

592
00:23:01,280 --> 00:23:03,520
called adelia p

593
00:23:03,520 --> 00:23:07,280
so if you remember we already see adelia

594
00:23:07,280 --> 00:23:09,520
in multiple places it was the password

595
00:23:09,520 --> 00:23:11,280
for the zip file it was in a couple of

596
00:23:11,280 --> 00:23:12,400
urls

597
00:23:12,400 --> 00:23:14,880
and you might be wondering what what

598
00:23:14,880 --> 00:23:17,840
does it what it means a delia p so the

599
00:23:17,840 --> 00:23:20,960
full name is adelia putri putri in

600
00:23:20,960 --> 00:23:23,039
indonesian is princess

601
00:23:23,039 --> 00:23:25,280
so after we analyzed the code and the

602
00:23:25,280 --> 00:23:27,520
request we came to the conclusion that

603
00:23:27,520 --> 00:23:30,880
this is an indonesian hacking group

604
00:23:30,880 --> 00:23:33,200
and its name is phantom ghost

605
00:23:33,200 --> 00:23:36,080
and inside the root directory we had

606
00:23:36,080 --> 00:23:38,559
another directory called payloads it

607
00:23:38,559 --> 00:23:41,760
contained more 400 000 attack

608
00:23:41,760 --> 00:23:43,679
instructions

609
00:23:43,679 --> 00:23:47,120
another folder is the loot folder

610
00:23:47,120 --> 00:23:50,159
inside the loot folder we had a sub

611
00:23:50,159 --> 00:23:52,320
directory called nosql

612
00:23:52,320 --> 00:23:55,120
nosql was the last bundle that we saw

613
00:23:55,120 --> 00:23:57,440
that the attacker used this bundle

614
00:23:57,440 --> 00:24:01,919
contained multiple exploit 4 sql nosql

615
00:24:01,919 --> 00:24:04,559
databases to deliver the payload

616
00:24:04,559 --> 00:24:07,200
inside we found only one report of

617
00:24:07,200 --> 00:24:09,279
successful exploitation

618
00:24:09,279 --> 00:24:10,559
and we think

619
00:24:10,559 --> 00:24:13,120
the attacker was in the middle of

620
00:24:13,120 --> 00:24:15,440
transitioning and testing this option of

621
00:24:15,440 --> 00:24:19,120
using dropbox as the attack instruction

622
00:24:19,120 --> 00:24:20,159
and

623
00:24:20,159 --> 00:24:22,480
now let's see the communication changes

624
00:24:22,480 --> 00:24:24,000
that happened

625
00:24:24,000 --> 00:24:26,320
following the infrastructure changes

626
00:24:26,320 --> 00:24:28,400
so this was the first request to

627
00:24:28,400 --> 00:24:33,400
repository bsd which is the cnc

628
00:24:33,440 --> 00:24:36,480
the second step was added as we believe

629
00:24:36,480 --> 00:24:39,279
after we created our honeypot so

630
00:24:39,279 --> 00:24:41,279
maybe the attacker was suspicious of our

631
00:24:41,279 --> 00:24:42,480
request

632
00:24:42,480 --> 00:24:45,840
and now he added two new headers

633
00:24:45,840 --> 00:24:47,919
to report back to the cnc

634
00:24:47,919 --> 00:24:49,919
the first one is the ip header and the

635
00:24:49,919 --> 00:24:51,760
second one is the country

636
00:24:51,760 --> 00:24:54,240
so we suspect that it's a security

637
00:24:54,240 --> 00:24:55,840
mechanism that

638
00:24:55,840 --> 00:24:58,240
the hacker are used so that only

639
00:24:58,240 --> 00:25:02,799
infected bots can can talk to the cnc

640
00:25:02,799 --> 00:25:06,000
and the next change was

641
00:25:06,000 --> 00:25:08,799
removing connections entirely

642
00:25:08,799 --> 00:25:13,279
to the cnc so now we have a third

643
00:25:13,520 --> 00:25:16,240
attack instruction and

644
00:25:16,240 --> 00:25:17,200
server

645
00:25:17,200 --> 00:25:19,600
and the last one is the dropbox so here

646
00:25:19,600 --> 00:25:21,440
you can see the request to fetch attack

647
00:25:21,440 --> 00:25:23,840
instructions that are inside

648
00:25:23,840 --> 00:25:26,240
the txt file

649
00:25:26,240 --> 00:25:28,799
and another change uh we don't know

650
00:25:28,799 --> 00:25:32,000
why he chose to do it but is to add an

651
00:25:32,000 --> 00:25:33,360
notification

652
00:25:33,360 --> 00:25:36,480
so basically um after he uploaded the

653
00:25:36,480 --> 00:25:38,080
the php file

654
00:25:38,080 --> 00:25:41,919
um he also tried to deface some of the

655
00:25:41,919 --> 00:25:43,200
of the servers

656
00:25:43,200 --> 00:25:46,159
and on a successful defacement

657
00:25:46,159 --> 00:25:50,880
he sent back a notification to the cnc

658
00:25:50,880 --> 00:25:54,320
now at this point we tried to estimate

659
00:25:54,320 --> 00:25:57,600
the size of the of kashmir black

660
00:25:57,600 --> 00:26:01,279
we believe it has exponential uh growth

661
00:26:01,279 --> 00:26:02,480
um

662
00:26:02,480 --> 00:26:05,600
so i will start with some numbers um so

663
00:26:05,600 --> 00:26:08,960
we observed 285 bots attacking our

664
00:26:08,960 --> 00:26:12,480
customers and our route around a of

665
00:26:12,480 --> 00:26:14,320
course it's only portion of the traffic

666
00:26:14,320 --> 00:26:15,919
because we don't see the whole traffic

667
00:26:15,919 --> 00:26:18,480
of the botnet and i will round this to

668
00:26:18,480 --> 00:26:21,760
300 just to make calculation easier

669
00:26:21,760 --> 00:26:25,520
so we know that uh every bot will co

670
00:26:25,520 --> 00:26:27,200
communicate with the scenes every three

671
00:26:27,200 --> 00:26:28,159
minutes

672
00:26:28,159 --> 00:26:31,679
so each boat will carry out 480 attacks

673
00:26:31,679 --> 00:26:32,960
per day

674
00:26:32,960 --> 00:26:36,080
so 300 bots will

675
00:26:36,080 --> 00:26:37,480
generate a

676
00:26:37,480 --> 00:26:40,559
140 000 attacks per day

677
00:26:40,559 --> 00:26:43,120
so if only half percent of them are

678
00:26:43,120 --> 00:26:44,480
successful

679
00:26:44,480 --> 00:26:47,279
in the next day we will have 1 000 new

680
00:26:47,279 --> 00:26:48,320
bots

681
00:26:48,320 --> 00:26:51,840
by day 7 we can have 1 million

682
00:26:51,840 --> 00:26:53,840
so of course it's only a theory because

683
00:26:53,840 --> 00:26:56,640
in reality we have limited

684
00:26:56,640 --> 00:26:59,200
number of targets and the exponential

685
00:26:59,200 --> 00:27:00,480
growth

686
00:27:00,480 --> 00:27:02,799
will stop at some point

687
00:27:02,799 --> 00:27:04,080
back to you sorry to talk about

688
00:27:04,080 --> 00:27:07,559
detection and mitigations

689
00:27:09,120 --> 00:27:11,200
okay so until now you saw the analysis

690
00:27:11,200 --> 00:27:13,120
of the cashmere black botnet

691
00:27:13,120 --> 00:27:15,200
and as you all know in the last couple

692
00:27:15,200 --> 00:27:17,760
of months and we saw two new high and

693
00:27:17,760 --> 00:27:20,080
new profile vulnerabilities related to

694
00:27:20,080 --> 00:27:22,640
the lock for shell and spring for shell

695
00:27:22,640 --> 00:27:24,640
and that attackers are using now to

696
00:27:24,640 --> 00:27:26,720
create new botnets and we started to

697
00:27:26,720 --> 00:27:28,000
analyze them

698
00:27:28,000 --> 00:27:29,840
and we would like to share with you some

699
00:27:29,840 --> 00:27:31,600
detection and mitigation techniques that

700
00:27:31,600 --> 00:27:32,799
you can

701
00:27:32,799 --> 00:27:35,520
apply at your house

702
00:27:35,520 --> 00:27:36,240
so

703
00:27:36,240 --> 00:27:38,399
i just want to to show some six bullets

704
00:27:38,399 --> 00:27:39,840
that you that you need to that you

705
00:27:39,840 --> 00:27:42,159
should apply and i will elaborate on

706
00:27:42,159 --> 00:27:44,640
them later and then in the next slide

707
00:27:44,640 --> 00:27:46,480
so we have the patch management file

708
00:27:46,480 --> 00:27:48,720
extension cron jobs reduce attack

709
00:27:48,720 --> 00:27:50,720
surface step directory and third party

710
00:27:50,720 --> 00:27:52,000
services

711
00:27:52,000 --> 00:27:54,559
let's start with the first time

712
00:27:54,559 --> 00:27:57,600
so patch management attackers are using

713
00:27:57,600 --> 00:28:00,320
known cves to create botnets

714
00:28:00,320 --> 00:28:04,000
and basically it's very easy to take

715
00:28:04,000 --> 00:28:06,880
a plc out there that uh just published

716
00:28:06,880 --> 00:28:10,240
take it use it and use it uh to automate

717
00:28:10,240 --> 00:28:13,039
uh the exploitation phase now you have

718
00:28:13,039 --> 00:28:16,559
two options here the first one is update

719
00:28:16,559 --> 00:28:19,520
your software and the vulnerable

720
00:28:19,520 --> 00:28:21,520
framework that you are using

721
00:28:21,520 --> 00:28:22,720
and patch it

722
00:28:22,720 --> 00:28:23,600
but

723
00:28:23,600 --> 00:28:26,320
as we all know it's uh sometimes it's

724
00:28:26,320 --> 00:28:29,440
very hard to find and locate all these

725
00:28:29,440 --> 00:28:31,919
uh frameworks and applications like in

726
00:28:31,919 --> 00:28:33,520
the log4 shell

727
00:28:33,520 --> 00:28:36,640
and that um that was recently

728
00:28:36,640 --> 00:28:37,600
happened

729
00:28:37,600 --> 00:28:40,000
and sometimes even the server is in

730
00:28:40,000 --> 00:28:42,799
production phase and you cannot just

731
00:28:42,799 --> 00:28:45,360
patch it now you need to schedule it and

732
00:28:45,360 --> 00:28:47,360
talk to the developers so you have

733
00:28:47,360 --> 00:28:48,799
another um

734
00:28:48,799 --> 00:28:51,919
another way to to to tackle this one and

735
00:28:51,919 --> 00:28:54,799
you can do virtual patching for example

736
00:28:54,799 --> 00:28:56,399
deploy waff

737
00:28:56,399 --> 00:28:58,320
to block specific user agents or

738
00:28:58,320 --> 00:29:00,480
something like that

739
00:29:00,480 --> 00:29:03,120
next we have file extensions

740
00:29:03,120 --> 00:29:06,000
um hackers camouflage the files and with

741
00:29:06,000 --> 00:29:08,000
legitimate extensions like we saw in the

742
00:29:08,000 --> 00:29:10,799
kashmir black and the hacker was using

743
00:29:10,799 --> 00:29:14,559
the dot css instead of the zip file

744
00:29:14,559 --> 00:29:16,320
and we also saw yesterday

745
00:29:16,320 --> 00:29:18,640
some bot that was using the dot gif

746
00:29:18,640 --> 00:29:22,559
instead to hide his dll file

747
00:29:22,559 --> 00:29:25,039
now you can run a simple python script

748
00:29:25,039 --> 00:29:27,360
that detects such an anomalies just

749
00:29:27,360 --> 00:29:29,840
check what is the extension of the file

750
00:29:29,840 --> 00:29:33,440
and then run the file command to see

751
00:29:33,440 --> 00:29:36,159
what this is really about

752
00:29:36,159 --> 00:29:39,440
and we wrote some uh sasha script if you

753
00:29:39,440 --> 00:29:42,880
want we can share it with you

754
00:29:43,520 --> 00:29:45,919
next is crane jobs so cronjobs are very

755
00:29:45,919 --> 00:29:48,240
popular among system administrator to

756
00:29:48,240 --> 00:29:51,760
automate tasks and hackers use them to

757
00:29:51,760 --> 00:29:54,240
to automate their deployment and the

758
00:29:54,240 --> 00:29:56,799
communication of the operation

759
00:29:56,799 --> 00:29:58,480
now um

760
00:29:58,480 --> 00:30:00,080
and also to

761
00:30:00,080 --> 00:30:02,159
make sure that their their infection

762
00:30:02,159 --> 00:30:04,000
will continue and run over and over

763
00:30:04,000 --> 00:30:06,720
again in case the victim server

764
00:30:06,720 --> 00:30:08,799
booted or restarted

765
00:30:08,799 --> 00:30:11,120
now it's funny but you can create a cron

766
00:30:11,120 --> 00:30:13,200
job to check your cron jobs

767
00:30:13,200 --> 00:30:15,760
uh and see if there is a crown that was

768
00:30:15,760 --> 00:30:18,880
using something fishy for example uh

769
00:30:18,880 --> 00:30:22,159
some basic c4 encoded functions

770
00:30:22,159 --> 00:30:24,159
and you can also add to this the same

771
00:30:24,159 --> 00:30:26,960
cron and the final mismatch script from

772
00:30:26,960 --> 00:30:30,559
the previous slide just

773
00:30:30,559 --> 00:30:32,720
run them together and send you a

774
00:30:32,720 --> 00:30:34,399
notification

775
00:30:34,399 --> 00:30:37,279
or a slack or email something like that

776
00:30:37,279 --> 00:30:39,360
and it will run over and over again on

777
00:30:39,360 --> 00:30:42,240
your server server and to see if someone

778
00:30:42,240 --> 00:30:44,320
took over it

779
00:30:44,320 --> 00:30:47,600
next is reduce attack surface so hackers

780
00:30:47,600 --> 00:30:49,840
love using lol bins which are leave of

781
00:30:49,840 --> 00:30:51,679
the lens binaries

782
00:30:51,679 --> 00:30:53,679
those of software that are present in

783
00:30:53,679 --> 00:30:55,840
the server like python

784
00:30:55,840 --> 00:30:58,080
apparel git

785
00:30:58,080 --> 00:30:59,279
wget

786
00:30:59,279 --> 00:31:01,440
something like that that the hackers are

787
00:31:01,440 --> 00:31:02,880
using to

788
00:31:02,880 --> 00:31:04,960
enable their operation

789
00:31:04,960 --> 00:31:07,039
now we recommend to remove them

790
00:31:07,039 --> 00:31:08,720
completely impossible

791
00:31:08,720 --> 00:31:10,559
but if it's not possible you should

792
00:31:10,559 --> 00:31:13,600
create a dedicated user that will use

793
00:31:13,600 --> 00:31:16,080
those specific

794
00:31:16,080 --> 00:31:18,159
binaries

795
00:31:18,159 --> 00:31:20,320
and this will definitely reduce the

796
00:31:20,320 --> 00:31:23,439
possibility of fair attack

797
00:31:23,519 --> 00:31:26,000
now the term directory hackers love the

798
00:31:26,000 --> 00:31:28,799
temp directory you should monitor it

799
00:31:28,799 --> 00:31:31,120
the temp directory is one of the folders

800
00:31:31,120 --> 00:31:33,440
that has execution permissions for

801
00:31:33,440 --> 00:31:36,240
everyone and hackers use it to hide

802
00:31:36,240 --> 00:31:39,120
their scripts uh to hide additional

803
00:31:39,120 --> 00:31:42,000
files like we saw even also yesterday if

804
00:31:42,000 --> 00:31:43,679
you if you remember

805
00:31:43,679 --> 00:31:46,240
this is a great folder to use so you

806
00:31:46,240 --> 00:31:49,440
should monitor it and you can use a

807
00:31:49,440 --> 00:31:52,159
python with a watchdog package

808
00:31:52,159 --> 00:31:54,320
to run and track changes and you can

809
00:31:54,320 --> 00:31:58,799
also add it to the cron job from before

810
00:31:58,799 --> 00:32:01,760
and last one third-party services so the

811
00:32:01,760 --> 00:32:04,240
button that we saw both kashmir black

812
00:32:04,240 --> 00:32:06,000
and the one for look for shell and

813
00:32:06,000 --> 00:32:07,440
spring for shell

814
00:32:07,440 --> 00:32:09,760
using common services to carry out their

815
00:32:09,760 --> 00:32:11,039
operation

816
00:32:11,039 --> 00:32:13,519
now if your server doesn't initiate

817
00:32:13,519 --> 00:32:15,840
communication with dropbox discord

818
00:32:15,840 --> 00:32:17,120
github

819
00:32:17,120 --> 00:32:18,720
and etc

820
00:32:18,720 --> 00:32:21,600
you should just block the igor's traffic

821
00:32:21,600 --> 00:32:23,919
for those services from your server

822
00:32:23,919 --> 00:32:26,840
by using for example

823
00:32:26,840 --> 00:32:29,279
firewalls you very much for listening to

824
00:32:29,279 --> 00:32:31,760
our talk feel free to contact us if you

825
00:32:31,760 --> 00:32:37,399
have any additional questions thank you

826
00:32:40,170 --> 00:32:44,099
[Applause]

827
00:32:51,600 --> 00:32:52,640
okay

828
00:32:52,640 --> 00:32:56,039
any questions

829
00:33:00,559 --> 00:33:03,039
sleeping

830
00:33:07,039 --> 00:33:09,679
i was sorting out

831
00:33:09,679 --> 00:33:12,399
come on guys

832
00:33:24,640 --> 00:33:27,039
hello uh thank you uh

833
00:33:27,039 --> 00:33:29,679
do you have any idea uh how the botnet

834
00:33:29,679 --> 00:33:33,039
is distributed geographically

835
00:33:33,039 --> 00:33:36,080
like the jail distribution of the botnet

836
00:33:36,080 --> 00:33:38,640
yeah actually as part of the

837
00:33:38,640 --> 00:33:40,320
milking like we took all the attack

838
00:33:40,320 --> 00:33:43,200
instructions we go over the the location

839
00:33:43,200 --> 00:33:45,440
of the victims and we saw that they're

840
00:33:45,440 --> 00:33:46,960
spread over at

841
00:33:46,960 --> 00:33:51,440
30 countries but mainly focus in the u.s

842
00:33:51,440 --> 00:33:53,840
thank you

843
00:33:56,240 --> 00:34:00,519
thank you another question

844
00:34:06,320 --> 00:34:08,399
don't be don't be afraid

845
00:34:08,399 --> 00:34:11,118
they don't bite

846
00:34:11,520 --> 00:34:13,918
over there

847
00:34:14,480 --> 00:34:16,800
so did you do any further work on the

848
00:34:16,800 --> 00:34:18,399
attribution side because i think there

849
00:34:18,399 --> 00:34:20,159
is some kind of like instagram account

850
00:34:20,159 --> 00:34:23,280
linked to the adelia putri stuff or or

851
00:34:23,280 --> 00:34:25,440
maybe it's just some kind of false flag

852
00:34:25,440 --> 00:34:27,839
i don't know

853
00:34:29,440 --> 00:34:32,239
no so so we haven't

854
00:34:32,239 --> 00:34:36,159
but if you when we found like the the

855
00:34:36,159 --> 00:34:38,560
scripts inside if you look for example

856
00:34:38,560 --> 00:34:40,639
at google at phantom goals so it's a

857
00:34:40,639 --> 00:34:42,960
known crew indonesia

858
00:34:42,960 --> 00:34:43,760
that

859
00:34:43,760 --> 00:34:46,079
that is performing some attacks

860
00:34:46,079 --> 00:34:48,000
but we didn't do any further research

861
00:34:48,000 --> 00:34:50,239
there

862
00:34:53,679 --> 00:34:56,079
when you did your estimation for the

863
00:34:56,079 --> 00:34:58,880
exponential spread of the malware

864
00:34:58,880 --> 00:35:01,440
did you have any basis for the number

865
00:35:01,440 --> 00:35:03,280
the 0.5

866
00:35:03,280 --> 00:35:05,760
chance of spreading or is it like pulled

867
00:35:05,760 --> 00:35:07,920
after nowhere yeah

868
00:35:07,920 --> 00:35:09,200
it's a

869
00:35:09,200 --> 00:35:12,079
hypothesis because we only can see

870
00:35:12,079 --> 00:35:14,720
the traffic for our customers and

871
00:35:14,720 --> 00:35:16,320
of course the security company we

872
00:35:16,320 --> 00:35:18,160
blocked most of the

873
00:35:18,160 --> 00:35:19,839
all of the attacks

874
00:35:19,839 --> 00:35:21,359
so it just was an

875
00:35:21,359 --> 00:35:24,078
hypothesis

876
00:35:26,000 --> 00:35:28,480
hi um did you manage to find a way to

877
00:35:28,480 --> 00:35:29,920
fingerprint

878
00:35:29,920 --> 00:35:31,920
compromised servers that were sleeping

879
00:35:31,920 --> 00:35:33,839
so you could scan the internet and

880
00:35:33,839 --> 00:35:36,000
figure out exactly the botnet size and

881
00:35:36,000 --> 00:35:38,800
who the victims are

882
00:35:39,440 --> 00:35:42,720
so we did it for

883
00:35:42,720 --> 00:35:45,760
the repositories which are also hacks

884
00:35:45,760 --> 00:35:48,800
website because you can like browse to

885
00:35:48,800 --> 00:35:52,400
the css and find the in-memory prefix

886
00:35:52,400 --> 00:35:55,359
some of the repositories are still alive

887
00:35:55,359 --> 00:35:58,160
and but we didn't find we i mean we

888
00:35:58,160 --> 00:36:00,240
don't have any access to

889
00:36:00,240 --> 00:36:02,480
to the attacked

890
00:36:02,480 --> 00:36:04,960
domains

891
00:36:05,119 --> 00:36:06,960
um question are we getting the the

892
00:36:06,960 --> 00:36:09,760
package itself i can understand that uh

893
00:36:09,760 --> 00:36:11,280
um

894
00:36:11,280 --> 00:36:13,280
if they it can be reused by other

895
00:36:13,280 --> 00:36:15,680
attackers if they discover do you see it

896
00:36:15,680 --> 00:36:17,040
being propagated and used by other

897
00:36:17,040 --> 00:36:19,280
criminals um that's maybe first part of

898
00:36:19,280 --> 00:36:21,119
the question the second is have you seen

899
00:36:21,119 --> 00:36:23,359
any similar offering on the

900
00:36:23,359 --> 00:36:25,839
underground forums maybe offering this

901
00:36:25,839 --> 00:36:27,599
as a solution as a tool

902
00:36:27,599 --> 00:36:30,160
or maybe as a service as well

903
00:36:30,160 --> 00:36:31,760
in the package

904
00:36:31,760 --> 00:36:33,760
that has been sold

905
00:36:33,760 --> 00:36:34,880
yeah so

906
00:36:34,880 --> 00:36:37,760
as we mentioned dementia spreading was

907
00:36:37,760 --> 00:36:40,000
the use the exploitation of php and

908
00:36:40,000 --> 00:36:41,760
remote code execution

909
00:36:41,760 --> 00:36:44,480
so we did see for the past several

910
00:36:44,480 --> 00:36:46,800
months against some threat actor

911
00:36:46,800 --> 00:36:49,280
leverage that because for some reason

912
00:36:49,280 --> 00:36:51,440
developers does not page that because

913
00:36:51,440 --> 00:36:53,680
it's a testing framework so they don't

914
00:36:53,680 --> 00:36:55,599
think it can be exposed

915
00:36:55,599 --> 00:36:58,480
and we haven't seen like the use of

916
00:36:58,480 --> 00:37:01,839
these bundles that we saw so only by

917
00:37:01,839 --> 00:37:05,920
this actor and the second question was

918
00:37:06,400 --> 00:37:11,839
ah hacking forms uh no no we haven't so

919
00:37:13,760 --> 00:37:17,440
okay no more questions

920
00:37:18,079 --> 00:37:20,720
one two

921
00:37:20,720 --> 00:37:23,610
three okay thank you

922
00:37:23,610 --> 00:37:31,030
[Applause]

