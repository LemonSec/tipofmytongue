1
00:00:00,320 --> 00:00:03,280
i give the floor to uh sway

2
00:00:03,280 --> 00:00:04,640
um

3
00:00:04,640 --> 00:00:07,520
how do you say swail

4
00:00:07,520 --> 00:00:10,400
yeah okay swale

5
00:00:10,400 --> 00:00:12,240
on private loader we've had a number of

6
00:00:12,240 --> 00:00:15,839
talks on loaders during this spot conf

7
00:00:15,839 --> 00:00:18,160
and it's actually a topic of interest

8
00:00:18,160 --> 00:00:20,880
this year you have the floor thank you

9
00:00:20,880 --> 00:00:23,840
so hi everyone uh i'm suhail very happy

10
00:00:23,840 --> 00:00:25,920
to be presenting here this year about

11
00:00:25,920 --> 00:00:29,039
golf so i work as a malware bus engineer

12
00:00:29,039 --> 00:00:31,039
with intel 471

13
00:00:31,039 --> 00:00:32,479
today i'm going to be talking about

14
00:00:32,479 --> 00:00:33,840
private loader

15
00:00:33,840 --> 00:00:35,680
malware behind have a curriculum paper

16
00:00:35,680 --> 00:00:38,320
install service so we first start by

17
00:00:38,320 --> 00:00:40,879
introducing paper install services

18
00:00:40,879 --> 00:00:42,559
we'll talk about

19
00:00:42,559 --> 00:00:44,480
the discovery of private loader will

20
00:00:44,480 --> 00:00:46,160
take an in-depth look at

21
00:00:46,160 --> 00:00:48,640
the malware itself its modules

22
00:00:48,640 --> 00:00:51,280
uh its communication protocol and then

23
00:00:51,280 --> 00:00:53,600
we'll talk about our tracking of private

24
00:00:53,600 --> 00:00:56,000
loader um what

25
00:00:56,000 --> 00:00:58,160
uh what malware families was it drop in

26
00:00:58,160 --> 00:00:59,840
how did we track it and then we'll

27
00:00:59,840 --> 00:01:02,320
finish with a conclusion

28
00:01:02,320 --> 00:01:03,120
so

29
00:01:03,120 --> 00:01:05,840
these paper install services are allow

30
00:01:05,840 --> 00:01:08,240
to monetize wide distribution of malware

31
00:01:08,240 --> 00:01:10,960
and potentially unwanted applications so

32
00:01:10,960 --> 00:01:13,200
these providers will offer a way for

33
00:01:13,200 --> 00:01:15,360
malware operators to offload uh the

34
00:01:15,360 --> 00:01:17,280
malware distribution to them and then

35
00:01:17,280 --> 00:01:19,200
they offer them a couple more options

36
00:01:19,200 --> 00:01:21,680
like geotargeted installs so they can

37
00:01:21,680 --> 00:01:24,400
purchase these installs also named loads

38
00:01:24,400 --> 00:01:26,400
in exchange for money especially

39
00:01:26,400 --> 00:01:28,799
cryptocurrency so a malware operator

40
00:01:28,799 --> 00:01:30,560
will purchase a number of installs and

41
00:01:30,560 --> 00:01:32,320
this service will work to guarantee that

42
00:01:32,320 --> 00:01:35,200
same number of infected bots so these

43
00:01:35,200 --> 00:01:36,880
services are mainly used by low to

44
00:01:36,880 --> 00:01:38,960
material actors distribute commodity

45
00:01:38,960 --> 00:01:41,680
malware like downloaders infostealers

46
00:01:41,680 --> 00:01:43,600
remote access trojans but there were

47
00:01:43,600 --> 00:01:45,680
also some exceptions which

48
00:01:45,680 --> 00:01:49,200
we'll look at at this talk

49
00:01:49,200 --> 00:01:51,840
so there are multiple public and private

50
00:01:51,840 --> 00:01:54,320
install services uh public ones are

51
00:01:54,320 --> 00:01:55,840
accessible through the clearnet or

52
00:01:55,840 --> 00:01:57,600
darknet i think one of them was

53
00:01:57,600 --> 00:01:59,040
introduced during a previous

54
00:01:59,040 --> 00:02:01,680
presentation install shop uh there are

55
00:02:01,680 --> 00:02:03,759
others like install best so usually just

56
00:02:03,759 --> 00:02:06,640
create an account uh deposit some uh

57
00:02:06,640 --> 00:02:08,479
cryptocurrency into a wallet and then

58
00:02:08,479 --> 00:02:10,560
start

59
00:02:10,560 --> 00:02:12,720
providing urls and payloads

60
00:02:12,720 --> 00:02:15,599
then your the service will work to

61
00:02:15,599 --> 00:02:16,959
distribute these

62
00:02:16,959 --> 00:02:20,239
there are also some private

63
00:02:20,239 --> 00:02:22,319
advertisements for these in in

64
00:02:22,319 --> 00:02:24,720
underground forums where individuals uh

65
00:02:24,720 --> 00:02:27,680
will offer these services uh as well and

66
00:02:27,680 --> 00:02:29,840
these forums were

67
00:02:29,840 --> 00:02:32,400
provide escrow services to ensure proper

68
00:02:32,400 --> 00:02:35,200
transactions between other parties these

69
00:02:35,200 --> 00:02:38,160
generally go for prices uh cheap too

70
00:02:38,160 --> 00:02:40,560
expensive depending on some constraints

71
00:02:40,560 --> 00:02:42,959
which we'll examine in a bit

72
00:02:42,959 --> 00:02:45,680
so these paper install services will

73
00:02:45,680 --> 00:02:47,280
most of them will use some in-house

74
00:02:47,280 --> 00:02:49,840
custom loader for payload delivery so

75
00:02:49,840 --> 00:02:51,440
the methods of distribution that these

76
00:02:51,440 --> 00:02:53,200
services will use will

77
00:02:53,200 --> 00:02:55,040
work to deliver this custom loader to

78
00:02:55,040 --> 00:02:56,640
victims so they're just delivering a

79
00:02:56,640 --> 00:02:58,480
single payload this loader will

80
00:02:58,480 --> 00:03:00,560
generally connect to a c2 server and

81
00:03:00,560 --> 00:03:02,720
then retrieve all these pillows to

82
00:03:02,720 --> 00:03:05,680
install and this loader must tell the c2

83
00:03:05,680 --> 00:03:07,599
something about that these builds were

84
00:03:07,599 --> 00:03:09,599
installed so it will communicate back

85
00:03:09,599 --> 00:03:12,159
information or statistics or logs uh to

86
00:03:12,159 --> 00:03:14,239
confirm these installs as proof

87
00:03:14,239 --> 00:03:16,080
this information usually will cost money

88
00:03:16,080 --> 00:03:18,080
because it is proved to the client that

89
00:03:18,080 --> 00:03:20,879
the payload was successfully installed

90
00:03:20,879 --> 00:03:22,959
so these people usually care about

91
00:03:22,959 --> 00:03:24,879
quantity more than quality so they don't

92
00:03:24,879 --> 00:03:26,000
care if your

93
00:03:26,000 --> 00:03:27,760
machine is in a high value enterprise

94
00:03:27,760 --> 00:03:30,000
environment or if it's a virtual machine

95
00:03:30,000 --> 00:03:31,440
even so

96
00:03:31,440 --> 00:03:33,120
they will infect as many bots as they

97
00:03:33,120 --> 00:03:34,560
can because they have

98
00:03:34,560 --> 00:03:36,640
multiple installs that they should uh be

99
00:03:36,640 --> 00:03:38,879
able to guarantee so an infected bot

100
00:03:38,879 --> 00:03:41,519
will uh and can be used multiple times

101
00:03:41,519 --> 00:03:44,239
reused multiple times to keep this flow

102
00:03:44,239 --> 00:03:47,519
of payloads in so for popular um paper

103
00:03:47,519 --> 00:03:48,959
installed services like private loader

104
00:03:48,959 --> 00:03:51,599
for example uh which delivers uh tens to

105
00:03:51,599 --> 00:03:53,439
hundreds of malicious payloads it will

106
00:03:53,439 --> 00:03:56,560
create like a clutter on malware on a

107
00:03:56,560 --> 00:03:58,959
clutter of malware on the victim machine

108
00:03:58,959 --> 00:04:01,120
which can even reach hundreds of of

109
00:04:01,120 --> 00:04:03,920
payloads uh at one a single time running

110
00:04:03,920 --> 00:04:05,680
on the machine which renders uh the

111
00:04:05,680 --> 00:04:08,400
system uh unusable

112
00:04:08,400 --> 00:04:10,799
so a typical paper installed transaction

113
00:04:10,799 --> 00:04:13,200
will will go like this so the operator

114
00:04:13,200 --> 00:04:14,879
will provide upfront payment in

115
00:04:14,879 --> 00:04:16,880
cryptocurrency the malicious payload or

116
00:04:16,880 --> 00:04:18,720
pills to distribute the number of

117
00:04:18,720 --> 00:04:20,399
installs they want these usually go in

118
00:04:20,399 --> 00:04:22,720
the hundreds or thousands and then uh

119
00:04:22,720 --> 00:04:25,040
geotargeting preferences uh this could

120
00:04:25,040 --> 00:04:28,160
be a continent a region country for

121
00:04:28,160 --> 00:04:29,680
example

122
00:04:29,680 --> 00:04:32,000
and they also offer this option called

123
00:04:32,000 --> 00:04:33,919
mixed geographic locations this this

124
00:04:33,919 --> 00:04:36,560
usually goes for cheap because uh it

125
00:04:36,560 --> 00:04:38,240
involves countries from all over the

126
00:04:38,240 --> 00:04:41,120
world and uh the paper install service

127
00:04:41,120 --> 00:04:44,080
have some some kind of leeway with with

128
00:04:44,080 --> 00:04:45,840
with which machines they they could

129
00:04:45,840 --> 00:04:47,840
infect but uh

130
00:04:47,840 --> 00:04:49,680
more restrictive options will go for

131
00:04:49,680 --> 00:04:51,919
more expensive prices because uh getting

132
00:04:51,919 --> 00:04:53,919
these bots in these specific geographic

133
00:04:53,919 --> 00:04:56,560
locations uh could be a bit challenging

134
00:04:56,560 --> 00:04:58,400
so on the other hand the service

135
00:04:58,400 --> 00:05:00,560
operators will provide uh payload

136
00:05:00,560 --> 00:05:02,479
distribution of course it was offloaded

137
00:05:02,479 --> 00:05:05,680
to them uh they do this in many ways so

138
00:05:05,680 --> 00:05:07,680
they could use botmasters they could

139
00:05:07,680 --> 00:05:10,160
themselves be bob masters or procure

140
00:05:10,160 --> 00:05:13,520
these services from

141
00:05:13,520 --> 00:05:16,560
people who are advertising themselves

142
00:05:16,560 --> 00:05:18,320
that they want to monetize their large

143
00:05:18,320 --> 00:05:19,759
bot nets so

144
00:05:19,759 --> 00:05:21,199
this can be used

145
00:05:21,199 --> 00:05:23,360
another popular option is the use of

146
00:05:23,360 --> 00:05:24,560
affiliates so

147
00:05:24,560 --> 00:05:26,479
they will outsource the malware delivery

148
00:05:26,479 --> 00:05:27,440
to

149
00:05:27,440 --> 00:05:29,680
affiliates who will get paid a share of

150
00:05:29,680 --> 00:05:32,240
the cut if they uh successfully deliver

151
00:05:32,240 --> 00:05:34,880
these payloads so the ttps of these

152
00:05:34,880 --> 00:05:36,639
affiliates will change because most of

153
00:05:36,639 --> 00:05:39,039
them will use their own way to deliver

154
00:05:39,039 --> 00:05:42,080
these payloads because the goal is to

155
00:05:42,080 --> 00:05:44,320
disseminate the malware as much as

156
00:05:44,320 --> 00:05:46,160
possible

157
00:05:46,160 --> 00:05:49,120
another option is a use of other ppi

158
00:05:49,120 --> 00:05:51,120
services which is a bit absurd

159
00:05:51,120 --> 00:05:52,720
because

160
00:05:52,720 --> 00:05:56,160
for example ppi service x will buy loads

161
00:05:56,160 --> 00:05:59,120
from a better ppi service why to deliver

162
00:05:59,120 --> 00:06:01,680
their custom order through the other

163
00:06:01,680 --> 00:06:03,600
paper install service but still generate

164
00:06:03,600 --> 00:06:04,960
a profit because

165
00:06:04,960 --> 00:06:06,639
what they're doing is they is they're

166
00:06:06,639 --> 00:06:08,639
delivering a single payload that will

167
00:06:08,639 --> 00:06:10,479
download multiple other payloads that

168
00:06:10,479 --> 00:06:12,880
will already paid for uh by their

169
00:06:12,880 --> 00:06:14,000
clients

170
00:06:14,000 --> 00:06:14,880
uh

171
00:06:14,880 --> 00:06:17,280
so we've seen this in in the real world

172
00:06:17,280 --> 00:06:19,280
for example g clear paper install

173
00:06:19,280 --> 00:06:21,600
service was using private loader for its

174
00:06:21,600 --> 00:06:23,919
own delivery

175
00:06:23,919 --> 00:06:24,720
so

176
00:06:24,720 --> 00:06:27,120
and of course the last point is

177
00:06:27,120 --> 00:06:28,240
they should

178
00:06:28,240 --> 00:06:30,720
provide the payload delivery to infected

179
00:06:30,720 --> 00:06:32,880
hosts

180
00:06:32,880 --> 00:06:34,560
so we first became aware of private

181
00:06:34,560 --> 00:06:37,440
loader in late july 2021 we believe that

182
00:06:37,440 --> 00:06:39,680
it has been active at least since uh may

183
00:06:39,680 --> 00:06:41,039
of that same year

184
00:06:41,039 --> 00:06:43,039
this is a private paper install service

185
00:06:43,039 --> 00:06:46,000
the service itself and its operators

186
00:06:46,000 --> 00:06:48,160
are unknown they managed to stay under

187
00:06:48,160 --> 00:06:49,520
the radar for

188
00:06:49,520 --> 00:06:51,440
uh for a long time even though their

189
00:06:51,440 --> 00:06:54,000
malware is very noisy so

190
00:06:54,000 --> 00:06:56,720
uh what first got our attention to this

191
00:06:56,720 --> 00:06:58,639
was is that we were seeing some samples

192
00:06:58,639 --> 00:07:00,880
of aristotle that were downloading a lot

193
00:07:00,880 --> 00:07:02,560
of malware so

194
00:07:02,560 --> 00:07:04,720
this variety of the payload and large

195
00:07:04,720 --> 00:07:06,800
amount of them uh caught our attention

196
00:07:06,800 --> 00:07:08,800
and we started uh working on this

197
00:07:08,800 --> 00:07:10,880
malware family so it was programmed c

198
00:07:10,880 --> 00:07:13,360
plus plus choose http for c2

199
00:07:13,360 --> 00:07:15,360
communication uh choose some

200
00:07:15,360 --> 00:07:17,759
anti-analysis stuff like encrypted

201
00:07:17,759 --> 00:07:19,919
strings like in certain uh random

202
00:07:19,919 --> 00:07:22,400
arithmetic operations uh in form of junk

203
00:07:22,400 --> 00:07:25,759
code um but the most uh overhaul uh the

204
00:07:25,759 --> 00:07:27,840
most uh the major overhaul that it

205
00:07:27,840 --> 00:07:30,560
underwent was in august 2021

206
00:07:30,560 --> 00:07:31,599
where it

207
00:07:31,599 --> 00:07:33,840
android some changes from being a

208
00:07:33,840 --> 00:07:36,240
monolithic malware to becoming a modular

209
00:07:36,240 --> 00:07:38,560
malware with multiple modules so we

210
00:07:38,560 --> 00:07:40,639
believe that private loader is the

211
00:07:40,639 --> 00:07:42,880
internal name of the project because in

212
00:07:42,880 --> 00:07:44,960
earlier builds we saw some

213
00:07:44,960 --> 00:07:47,120
debug pads that included the the

214
00:07:47,120 --> 00:07:50,800
directory name private loader

215
00:07:51,039 --> 00:07:53,360
so private loader is uh distributed

216
00:07:53,360 --> 00:07:55,360
through a network of malicious website

217
00:07:55,360 --> 00:07:57,680
that will offer cracked software so

218
00:07:57,680 --> 00:08:00,639
these are seo optimized so if you uh

219
00:08:00,639 --> 00:08:02,639
search for software name plus download

220
00:08:02,639 --> 00:08:04,879
crack or download serial usually you

221
00:08:04,879 --> 00:08:07,919
will find uh these results in the top of

222
00:08:07,919 --> 00:08:10,240
of the search engine results

223
00:08:10,240 --> 00:08:12,240
navigating to the page uh you'll see a

224
00:08:12,240 --> 00:08:13,840
download crack button this one is

225
00:08:13,840 --> 00:08:15,919
retrieved from a remote server and then

226
00:08:15,919 --> 00:08:18,080
when clicked the user will be redirected

227
00:08:18,080 --> 00:08:20,319
multiple times and at the end download a

228
00:08:20,319 --> 00:08:22,479
password-protected archive with either a

229
00:08:22,479 --> 00:08:25,280
setup file or a self-extracting archive

230
00:08:25,280 --> 00:08:28,879
so this infrastructure has been tied to

231
00:08:28,879 --> 00:08:30,720
a known affiliate paper install service

232
00:08:30,720 --> 00:08:33,360
called install ust by researchers from

233
00:08:33,360 --> 00:08:36,240
sofoslabs and it does the same thing

234
00:08:36,240 --> 00:08:38,320
the affiliates will get the javascript

235
00:08:38,320 --> 00:08:40,479
to include on their websites and on

236
00:08:40,479 --> 00:08:42,159
their blogs and and

237
00:08:42,159 --> 00:08:44,800
and eventually get paid for uh installs

238
00:08:44,800 --> 00:08:45,920
that they get

239
00:08:45,920 --> 00:08:47,120
uh this

240
00:08:47,120 --> 00:08:48,800
is the main distribution method for

241
00:08:48,800 --> 00:08:50,480
private loader we haven't seen it uh

242
00:08:50,480 --> 00:08:52,959
being distributed any other way so

243
00:08:52,959 --> 00:08:55,279
either the guys behind private loaner

244
00:08:55,279 --> 00:08:57,440
actually the ones behind this service or

245
00:08:57,440 --> 00:08:59,440
are merely paying another paper install

246
00:08:59,440 --> 00:09:01,920
service to deliver their own uh service

247
00:09:01,920 --> 00:09:05,439
is is a big question mark

248
00:09:05,760 --> 00:09:08,800
so as we said the the the life cycle of

249
00:09:08,800 --> 00:09:10,560
a private loader infection will start

250
00:09:10,560 --> 00:09:12,880
with uh the download of

251
00:09:12,880 --> 00:09:14,959
of a malicious setup file so this setup

252
00:09:14,959 --> 00:09:17,120
file itself will bundle multiple malware

253
00:09:17,120 --> 00:09:18,560
families that are dropped to disk and

254
00:09:18,560 --> 00:09:21,040
executed like smoke loader redline

255
00:09:21,040 --> 00:09:23,519
g-cleaner etc but one of the payloads

256
00:09:23,519 --> 00:09:25,680
could be uh the private loader loader

257
00:09:25,680 --> 00:09:28,080
module so this loader module's sole

258
00:09:28,080 --> 00:09:30,000
purpose is to download and execute the

259
00:09:30,000 --> 00:09:32,320
core module which has the the actual

260
00:09:32,320 --> 00:09:34,560
core functionality of the malware so the

261
00:09:34,560 --> 00:09:36,560
car module will communicate with the

262
00:09:36,560 --> 00:09:38,480
with the paper install service backend

263
00:09:38,480 --> 00:09:40,640
retrieve the installs execute them and

264
00:09:40,640 --> 00:09:42,160
then clutter the machine with even more

265
00:09:42,160 --> 00:09:45,040
malware so one of these payloads can be

266
00:09:45,040 --> 00:09:47,200
a service module or what you call what

267
00:09:47,200 --> 00:09:49,360
we call a persistence module so this

268
00:09:49,360 --> 00:09:51,760
module will schedule itself to run at

269
00:09:51,760 --> 00:09:54,000
regular intervals it will check for self

270
00:09:54,000 --> 00:09:56,720
updates but also download another loader

271
00:09:56,720 --> 00:10:00,080
uh and execute it to keep the the uh the

272
00:10:00,080 --> 00:10:02,880
infected bot always part of of the

273
00:10:02,880 --> 00:10:05,839
botnet and always keep receiving these

274
00:10:05,839 --> 00:10:07,760
downloads so these guys don't care about

275
00:10:07,760 --> 00:10:10,320
the quality only the quantity

276
00:10:10,320 --> 00:10:12,720
so loader module is the first stage

277
00:10:12,720 --> 00:10:14,560
includes multiple order c2s that are

278
00:10:14,560 --> 00:10:17,120
used to retrieve the main configuration

279
00:10:17,120 --> 00:10:18,880
it includes multiple urls that are

280
00:10:18,880 --> 00:10:20,959
requested with a get request and these

281
00:10:20,959 --> 00:10:22,880
responses can either contain encoded

282
00:10:22,880 --> 00:10:24,720
encrypted or plain text main c2

283
00:10:24,720 --> 00:10:26,240
configurations for example the

284
00:10:26,240 --> 00:10:28,079
configuration we see there

285
00:10:28,079 --> 00:10:31,200
so taking a look at a single endpoint of

286
00:10:31,200 --> 00:10:33,760
these we see the one called proxies.txt

287
00:10:33,760 --> 00:10:35,600
this could easily be mistaken for a list

288
00:10:35,600 --> 00:10:39,279
of proxies but uh these uh lines are uh

289
00:10:39,279 --> 00:10:40,720
most of them are

290
00:10:40,720 --> 00:10:42,720
are just decoys and the only interesting

291
00:10:42,720 --> 00:10:46,320
line is line 119 where the actual ip of

292
00:10:46,320 --> 00:10:50,640
the c2 address is is encoded there so it

293
00:10:50,640 --> 00:10:53,120
the i the ips just is taken the port is

294
00:10:53,120 --> 00:10:55,519
discarded and then it is rearranged so

295
00:10:55,519 --> 00:11:00,399
so from 145 60 133 it becomes 45 133

296
00:11:00,399 --> 00:11:02,160
160.

297
00:11:02,160 --> 00:11:04,240
so this is the main c2 address and it is

298
00:11:04,240 --> 00:11:06,480
used to retrieve a configuration to

299
00:11:06,480 --> 00:11:09,200
download uh the encrypted call module so

300
00:11:09,200 --> 00:11:10,800
when we send a request to this endpoint

301
00:11:10,800 --> 00:11:12,720
we respond with an encrypted response

302
00:11:12,720 --> 00:11:14,800
with a with a one byte x or key that is

303
00:11:14,800 --> 00:11:16,480
hard coded in the sample so the

304
00:11:16,480 --> 00:11:18,079
decrypted response is a download

305
00:11:18,079 --> 00:11:19,760
configuration for the encrypted core

306
00:11:19,760 --> 00:11:22,240
module it is usually uh stored on the

307
00:11:22,240 --> 00:11:25,760
discord cdn with the bmp uh extension

308
00:11:25,760 --> 00:11:27,360
but lately we've seen that they can use

309
00:11:27,360 --> 00:11:29,200
some private infrastructure to hold this

310
00:11:29,200 --> 00:11:31,360
as well

311
00:11:31,360 --> 00:11:33,040
so the loader module will decrypt the

312
00:11:33,040 --> 00:11:35,120
effectively load the core module dll and

313
00:11:35,120 --> 00:11:37,519
then it will build a parameter buffer

314
00:11:37,519 --> 00:11:39,200
that will supply to the core modules

315
00:11:39,200 --> 00:11:41,200
entry point so this parameter buffer is

316
00:11:41,200 --> 00:11:43,600
a context buffer to help the core module

317
00:11:43,600 --> 00:11:46,399
uh uh get all the information it needs

318
00:11:46,399 --> 00:11:48,880
to start getting the install so what two

319
00:11:48,880 --> 00:11:50,800
important fields are a region code

320
00:11:50,800 --> 00:11:52,639
integer that is hard coded inside the

321
00:11:52,639 --> 00:11:54,240
loader module for example number two

322
00:11:54,240 --> 00:11:56,000
we'll look at this one shortly and then

323
00:11:56,000 --> 00:11:58,000
the main c2 host that was retrieved by

324
00:11:58,000 --> 00:11:59,680
the loader and which is used by the core

325
00:11:59,680 --> 00:12:01,760
module for communication

326
00:12:01,760 --> 00:12:03,680
so the core module likes to run with

327
00:12:03,680 --> 00:12:05,920
elevated privileges so either the setup

328
00:12:05,920 --> 00:12:07,120
file that was retrieved from the

329
00:12:07,120 --> 00:12:09,279
delivery network will prompt the user to

330
00:12:09,279 --> 00:12:11,760
run it with elevated privileges or

331
00:12:11,760 --> 00:12:13,839
if that's not the case it will use a

332
00:12:13,839 --> 00:12:16,480
widely documented technique to perform a

333
00:12:16,480 --> 00:12:18,320
user access control by passing windows

334
00:12:18,320 --> 00:12:20,720
10 that involves the system executable

335
00:12:20,720 --> 00:12:22,480
computerdefaults.exe

336
00:12:22,480 --> 00:12:24,399
so when it gets these privileges it will

337
00:12:24,399 --> 00:12:26,399
disable windows defender by directly

338
00:12:26,399 --> 00:12:28,959
right into the registry this is done to

339
00:12:28,959 --> 00:12:31,040
of course uh avoid detection when

340
00:12:31,040 --> 00:12:32,800
installs are retrieved and then executed

341
00:12:32,800 --> 00:12:35,200
on the infected host

342
00:12:35,200 --> 00:12:38,320
so back to the region code so when this

343
00:12:38,320 --> 00:12:40,399
configuration is read by the core module

344
00:12:40,399 --> 00:12:42,320
from uh by the call module from that

345
00:12:42,320 --> 00:12:44,240
parameter buffer this region code

346
00:12:44,240 --> 00:12:46,320
integer is converted to a string using

347
00:12:46,320 --> 00:12:48,079
using a conversion table or more

348
00:12:48,079 --> 00:12:50,320
technically a switch statement so this

349
00:12:50,320 --> 00:12:53,600
table is frequently updated and

350
00:12:53,600 --> 00:12:56,079
now we have 32 region code in current

351
00:12:56,079 --> 00:12:58,639
samples so for example for region code 4

352
00:12:58,639 --> 00:13:01,040
it will be translated for ww underscore

353
00:13:01,040 --> 00:13:03,839
2. ww stands for worldwide and is

354
00:13:03,839 --> 00:13:06,480
actually that mixed geographic option

355
00:13:06,480 --> 00:13:09,920
that we talked about that includes

356
00:13:10,000 --> 00:13:12,320
bots from all over the world

357
00:13:12,320 --> 00:13:14,320
so since this region code is hard coded

358
00:13:14,320 --> 00:13:16,000
inside the loader we believe that the

359
00:13:16,000 --> 00:13:18,000
proper samples are funneled to targeted

360
00:13:18,000 --> 00:13:20,079
geolocation by the delivery network

361
00:13:20,079 --> 00:13:22,320
distributing private loader itself so

362
00:13:22,320 --> 00:13:24,639
for example a user in the eu region will

363
00:13:24,639 --> 00:13:26,800
be guaranteed not to get a region code

364
00:13:26,800 --> 00:13:28,240
that is

365
00:13:28,240 --> 00:13:31,760
dedicated to someone in the in usa so

366
00:13:31,760 --> 00:13:33,600
this region code is of course important

367
00:13:33,600 --> 00:13:36,240
because it is the main definer of which

368
00:13:36,240 --> 00:13:38,880
payloads to deliver uh two bots

369
00:13:38,880 --> 00:13:40,399
other attributes are of course used

370
00:13:40,399 --> 00:13:43,680
which we'll examine a bit later

371
00:13:43,680 --> 00:13:45,519
so another interesting thing that this

372
00:13:45,519 --> 00:13:47,600
core module does is what we call target

373
00:13:47,600 --> 00:13:49,839
fingerprinting so it will search for

374
00:13:49,839 --> 00:13:51,839
cryptocurrency wallet software and

375
00:13:51,839 --> 00:13:54,240
browser login data for multiple websites

376
00:13:54,240 --> 00:13:56,480
related to banking crypto currency and

377
00:13:56,480 --> 00:13:58,800
e-commerce so these searches are grouped

378
00:13:58,800 --> 00:14:01,199
by category each with a specific target

379
00:14:01,199 --> 00:14:02,959
code words browser wallets banking

380
00:14:02,959 --> 00:14:04,959
websites etc

381
00:14:04,959 --> 00:14:07,120
so when a target is identified this

382
00:14:07,120 --> 00:14:09,519
category is marked as present so this

383
00:14:09,519 --> 00:14:11,120
information is not exfiltrated or

384
00:14:11,120 --> 00:14:13,680
anything it just marked that that it

385
00:14:13,680 --> 00:14:16,240
exists on on on the infected hose so

386
00:14:16,240 --> 00:14:18,240
this can be used by operators that can

387
00:14:18,240 --> 00:14:20,079
set an option to serve payloads only

388
00:14:20,079 --> 00:14:22,399
when a target for a certain category was

389
00:14:22,399 --> 00:14:24,399
identified on the infected host so for

390
00:14:24,399 --> 00:14:26,639
example an actor that wants to deliver a

391
00:14:26,639 --> 00:14:28,560
steeler and only interested in crypto

392
00:14:28,560 --> 00:14:31,120
wallets will check if this category is

393
00:14:31,120 --> 00:14:32,880
present on the on the on the infected

394
00:14:32,880 --> 00:14:35,279
hosts before delivering uh their

395
00:14:35,279 --> 00:14:37,199
payloads this avoids delivering the

396
00:14:37,199 --> 00:14:38,959
pillow to all the botnet and only to

397
00:14:38,959 --> 00:14:41,199
interesting targets

398
00:14:41,199 --> 00:14:43,839
so the core module will communicate

399
00:14:43,839 --> 00:14:46,639
using http post requests it uses a more

400
00:14:46,639 --> 00:14:48,240
robust algorithm and actually makes

401
00:14:48,240 --> 00:14:49,440
sense because this is the core

402
00:14:49,440 --> 00:14:51,680
functionality other modules are using

403
00:14:51,680 --> 00:14:52,639
simple

404
00:14:52,639 --> 00:14:55,199
xor algorithms so it will rely on

405
00:14:55,199 --> 00:14:56,959
password-based key derivation function

406
00:14:56,959 --> 00:14:59,680
aes and hmac validation the password

407
00:14:59,680 --> 00:15:00,720
used for

408
00:15:00,720 --> 00:15:02,959
the password-based key revision function

409
00:15:02,959 --> 00:15:04,480
has been the same since

410
00:15:04,480 --> 00:15:06,560
the inception of private loader and it

411
00:15:06,560 --> 00:15:09,120
is used to generate the as and hmac

412
00:15:09,120 --> 00:15:12,639
validation keys so um the resulting

413
00:15:12,639 --> 00:15:14,720
packet will be base64 encoded before

414
00:15:14,720 --> 00:15:16,720
being transmitted over the network so

415
00:15:16,720 --> 00:15:18,399
the c2 will have all the information

416
00:15:18,399 --> 00:15:20,800
including the password uh to actually

417
00:15:20,800 --> 00:15:22,480
derive the proper keys validate the

418
00:15:22,480 --> 00:15:25,040
message and then decrypt the cipher text

419
00:15:25,040 --> 00:15:27,839
and get the contents of the message

420
00:15:27,839 --> 00:15:29,600
so private loader supports the

421
00:15:29,600 --> 00:15:31,839
deployment of two types of payloads uh

422
00:15:31,839 --> 00:15:34,240
windows direct executables and browser

423
00:15:34,240 --> 00:15:36,160
extensions so browser extensions are

424
00:15:36,160 --> 00:15:38,000
installed silently by

425
00:15:38,000 --> 00:15:41,120
modifying the chromium

426
00:15:41,120 --> 00:15:43,120
configuration files uh

427
00:15:43,120 --> 00:15:45,199
to load the the extension in the next

428
00:15:45,199 --> 00:15:46,639
run so

429
00:15:46,639 --> 00:15:49,199
the request messages used to to retrieve

430
00:15:49,199 --> 00:15:51,839
these download urls are get extensions

431
00:15:51,839 --> 00:15:54,720
and get links so both accept the same uh

432
00:15:54,720 --> 00:15:56,639
parameters uh the region code which we

433
00:15:56,639 --> 00:15:58,639
talked about earlier and then the exit

434
00:15:58,639 --> 00:16:01,040
country of the bot and then an unknown

435
00:16:01,040 --> 00:16:02,800
value of 10 which we couldn't figure out

436
00:16:02,800 --> 00:16:05,360
uh what it was but we think it's it's it

437
00:16:05,360 --> 00:16:06,880
could be a version could be something

438
00:16:06,880 --> 00:16:09,440
else but it's always hard-coded uh in

439
00:16:09,440 --> 00:16:11,839
the in the messages

440
00:16:11,839 --> 00:16:15,120
so for an example uh request like this

441
00:16:15,120 --> 00:16:18,000
uh we have a response containing the

442
00:16:18,000 --> 00:16:20,639
urls uh arguments and ids of the

443
00:16:20,639 --> 00:16:23,680
payloads uh i removed most uh most of

444
00:16:23,680 --> 00:16:25,440
the pillows and kept only two elements

445
00:16:25,440 --> 00:16:28,240
in the json list because usually we we

446
00:16:28,240 --> 00:16:30,399
will get uh dozens or a couple dozen of

447
00:16:30,399 --> 00:16:32,800
payloads uh to execute to download and

448
00:16:32,800 --> 00:16:35,680
execute so the id here like you see the

449
00:16:35,680 --> 00:16:37,920
id minus one this one denotes the

450
00:16:37,920 --> 00:16:40,880
service module and the id 11 is a

451
00:16:40,880 --> 00:16:43,440
payload that is uh downloaded and

452
00:16:43,440 --> 00:16:44,880
executed

453
00:16:44,880 --> 00:16:46,800
so of course the core module must relay

454
00:16:46,800 --> 00:16:48,399
information back regarding the installed

455
00:16:48,399 --> 00:16:50,959
payloads to the c2 so the clients will

456
00:16:50,959 --> 00:16:53,440
have proof of execution so it uses the

457
00:16:53,440 --> 00:16:55,600
ad logger stat message followed by a

458
00:16:55,600 --> 00:16:56,880
flattened

459
00:16:56,880 --> 00:17:00,800
json dictionary so it will only

460
00:17:00,800 --> 00:17:02,720
report back the ids of the payloads that

461
00:17:02,720 --> 00:17:04,880
were executed for for example here the

462
00:17:04,880 --> 00:17:07,039
id minus one for the service module and

463
00:17:07,039 --> 00:17:11,359
id 11 for the rather executable

464
00:17:11,359 --> 00:17:14,079
so lastly the service module uh so this

465
00:17:14,079 --> 00:17:16,720
module will ensure persistence

466
00:17:16,720 --> 00:17:18,880
it will ensure persistence at logon

467
00:17:18,880 --> 00:17:21,199
first so it does this in two ways either

468
00:17:21,199 --> 00:17:23,199
using a windows service or using a

469
00:17:23,199 --> 00:17:25,039
scheduled task and this is determined by

470
00:17:25,039 --> 00:17:27,679
a boolean value that is hard-coded

471
00:17:27,679 --> 00:17:29,760
inside the service module and then it

472
00:17:29,760 --> 00:17:32,799
will set up a scheduled task that is uh

473
00:17:32,799 --> 00:17:36,080
that executes every hour and the the

474
00:17:36,080 --> 00:17:38,480
uh the persistent location is the

475
00:17:38,480 --> 00:17:40,559
program files directory so it will

476
00:17:40,559 --> 00:17:42,960
communicate with the main c2 as well uh

477
00:17:42,960 --> 00:17:44,880
using the service communication.php

478
00:17:44,880 --> 00:17:46,880
endpoint and as we said before it will

479
00:17:46,880 --> 00:17:48,720
update itself and it will receive a

480
00:17:48,720 --> 00:17:51,039
download url to execute another loader

481
00:17:51,039 --> 00:17:53,520
module and private lower uh for private

482
00:17:53,520 --> 00:17:56,400
loans always keep running

483
00:17:56,400 --> 00:17:58,320
so we have started tracking private loan

484
00:17:58,320 --> 00:18:00,960
in early september 2021 the goal was to

485
00:18:00,960 --> 00:18:02,960
automate the whole life cycle of an

486
00:18:02,960 --> 00:18:05,039
infection for each sample so we start

487
00:18:05,039 --> 00:18:07,360
from a loader component and then we want

488
00:18:07,360 --> 00:18:09,200
to get installs and get the service

489
00:18:09,200 --> 00:18:12,320
module i repeat this for each sample so

490
00:18:12,320 --> 00:18:13,840
we have done this replication using

491
00:18:13,840 --> 00:18:15,919
config extractors and network protocol

492
00:18:15,919 --> 00:18:18,400
emulation and the goal is to create bots

493
00:18:18,400 --> 00:18:20,799
from various countries so we can milk uh

494
00:18:20,799 --> 00:18:23,120
the botnet as much as we can and get as

495
00:18:23,120 --> 00:18:26,320
much spells as we can so we opted to use

496
00:18:26,320 --> 00:18:28,320
passive bots because we want to avoid

497
00:18:28,320 --> 00:18:30,880
raising any alarms on on on the operator

498
00:18:30,880 --> 00:18:33,360
side because uh if you if we send

499
00:18:33,360 --> 00:18:35,600
statistics back for example uh there

500
00:18:35,600 --> 00:18:37,360
will be some concerns on the client on

501
00:18:37,360 --> 00:18:39,919
the ppi client side which

502
00:18:39,919 --> 00:18:42,400
may introduce some countermeasures that

503
00:18:42,400 --> 00:18:45,360
will inhibit our our abilities to to

504
00:18:45,360 --> 00:18:47,760
keep track in private loader so

505
00:18:47,760 --> 00:18:49,600
the last goal is to classify as many

506
00:18:49,600 --> 00:18:51,039
malware families

507
00:18:51,039 --> 00:18:52,960
as we can that were

508
00:18:52,960 --> 00:18:55,679
dropped by this malware family

509
00:18:55,679 --> 00:18:58,559
so this is how it works so we get a load

510
00:18:58,559 --> 00:19:00,799
a loader module from virustotal we

511
00:19:00,799 --> 00:19:02,640
extract the loader c2s and the region

512
00:19:02,640 --> 00:19:05,360
code integer integer and then we spawn

513
00:19:05,360 --> 00:19:07,600
an emulated loader bot loaderbot will

514
00:19:07,600 --> 00:19:10,000
download the core module it will extract

515
00:19:10,000 --> 00:19:11,840
whatever necessary from there but also

516
00:19:11,840 --> 00:19:14,000
map the region code integer to the

517
00:19:14,000 --> 00:19:16,400
appropriate string and then we will use

518
00:19:16,400 --> 00:19:18,480
the main c2 that was

519
00:19:18,480 --> 00:19:20,400
retrieved from the emulated loader bot

520
00:19:20,400 --> 00:19:24,160
so the core module will spawn itself

521
00:19:24,160 --> 00:19:26,320
multiple emulators from multiple exit

522
00:19:26,320 --> 00:19:28,799
countries that will probe the main c2 to

523
00:19:28,799 --> 00:19:31,360
retrieve the installs so these installs

524
00:19:31,360 --> 00:19:33,360
will be retrieved and then will be fed

525
00:19:33,360 --> 00:19:35,840
to our malware intelligence system that

526
00:19:35,840 --> 00:19:38,720
will classify known families of these

527
00:19:38,720 --> 00:19:41,200
payloads

528
00:19:41,200 --> 00:19:42,880
so this allowed us to gather some

529
00:19:42,880 --> 00:19:45,360
statistics so these statistics are from

530
00:19:45,360 --> 00:19:48,080
september 2021 to mid-december

531
00:19:48,080 --> 00:19:50,559
of the same year so we see here the

532
00:19:50,559 --> 00:19:52,799
unique hashes downloaded by the region

533
00:19:52,799 --> 00:19:53,919
code

534
00:19:53,919 --> 00:19:56,720
we noticed that mostly the worldwide

535
00:19:56,720 --> 00:19:58,720
region code is used and this makes sense

536
00:19:58,720 --> 00:20:01,200
because it's the cheapest option and it

537
00:20:01,200 --> 00:20:03,679
will offer operators most coverage

538
00:20:03,679 --> 00:20:06,559
possible on around the globe and we see

539
00:20:06,559 --> 00:20:11,200
uh basically uh little or uh or no usage

540
00:20:11,200 --> 00:20:14,480
of of of targeted

541
00:20:14,480 --> 00:20:16,799
geo locations

542
00:20:16,799 --> 00:20:18,559
so in this other graph we have the

543
00:20:18,559 --> 00:20:20,799
unique hashes that were downloaded by

544
00:20:20,799 --> 00:20:23,039
country code of our emulators so we see

545
00:20:23,039 --> 00:20:24,640
here more or less of

546
00:20:24,640 --> 00:20:26,320
a less

547
00:20:26,320 --> 00:20:28,400
disparate

548
00:20:28,400 --> 00:20:30,799
distribution uh of these because it

549
00:20:30,799 --> 00:20:32,960
makes sense actually because multiple uh

550
00:20:32,960 --> 00:20:36,880
uh region codes are are for worldwide uh

551
00:20:36,880 --> 00:20:40,320
target so uh we could we we could see uh

552
00:20:40,320 --> 00:20:43,520
the the um

553
00:20:43,679 --> 00:20:46,240
so basically we see like uh

554
00:20:46,240 --> 00:20:48,880
for example uh the most popular country

555
00:20:48,880 --> 00:20:51,520
is the us and least popular country

556
00:20:51,520 --> 00:20:54,080
countries are mexico and new zealand so

557
00:20:54,080 --> 00:20:55,840
the difference here is four thousand

558
00:20:55,840 --> 00:20:58,720
hashes and this could be explained uh by

559
00:20:58,720 --> 00:21:01,360
either that these regions the worldwide

560
00:21:01,360 --> 00:21:03,919
reasons do not include uh countries like

561
00:21:03,919 --> 00:21:06,400
this or uh could be explained by an

562
00:21:06,400 --> 00:21:07,679
option that we know exists in the

563
00:21:07,679 --> 00:21:10,159
private lower back end that allows uh

564
00:21:10,159 --> 00:21:12,720
operators to restrict even more uh the

565
00:21:12,720 --> 00:21:15,039
number of countries uh that pills are

566
00:21:15,039 --> 00:21:17,440
delivered for even in this in these

567
00:21:17,440 --> 00:21:19,520
worldwide regions

568
00:21:19,520 --> 00:21:22,080
so here uh our results from our malware

569
00:21:22,080 --> 00:21:24,320
classification system for payloads that

570
00:21:24,320 --> 00:21:27,120
were downloaded by uh private loader so

571
00:21:27,120 --> 00:21:28,960
we see here the unique downloaded hashes

572
00:21:28,960 --> 00:21:31,200
per malware family the most popular

573
00:21:31,200 --> 00:21:32,640
build which takes the big part of the

574
00:21:32,640 --> 00:21:34,480
cake is smoke loader and then it's

575
00:21:34,480 --> 00:21:36,080
followed by a redline

576
00:21:36,080 --> 00:21:39,120
vidar raccoon g-cleaner etc so we see

577
00:21:39,120 --> 00:21:42,000
here what we most expect from a paper

578
00:21:42,000 --> 00:21:44,159
install service a lot of commodity

579
00:21:44,159 --> 00:21:45,520
malware

580
00:21:45,520 --> 00:21:48,159
but to our surprise uh tracking private

581
00:21:48,159 --> 00:21:51,280
loader allowed us to see some unusual uh

582
00:21:51,280 --> 00:21:54,080
deliver malware deliveries that is

583
00:21:54,080 --> 00:21:56,400
dropping for from terra actors that are

584
00:21:56,400 --> 00:21:58,400
usually interested in performing banking

585
00:21:58,400 --> 00:22:01,039
fraud or deploying ransomware on

586
00:22:01,039 --> 00:22:03,280
high-value targets so it was deploying

587
00:22:03,280 --> 00:22:05,440
banking trojans and uh the first

588
00:22:05,440 --> 00:22:07,679
instance of this was an indirect one so

589
00:22:07,679 --> 00:22:09,679
we saw smoke loader sample delivered

590
00:22:09,679 --> 00:22:11,760
from private loader that delivered the

591
00:22:11,760 --> 00:22:14,240
cubot banking trojan so this revealed

592
00:22:14,240 --> 00:22:16,960
the new botanic id star one so uh there

593
00:22:16,960 --> 00:22:18,640
was a talk yesterday about smoke loader

594
00:22:18,640 --> 00:22:21,520
and qrbot was there but this is not a

595
00:22:21,520 --> 00:22:24,080
usual delivery mechanism uh

596
00:22:24,080 --> 00:22:27,440
for cubot so fast forward a few days on

597
00:22:27,440 --> 00:22:29,600
october 31st private loans dropped

598
00:22:29,600 --> 00:22:32,000
directly the chronos bank interrogation

599
00:22:32,000 --> 00:22:34,720
on november 1st uh it dropped danabot

600
00:22:34,720 --> 00:22:37,600
with affiliate id40 drydex the 10444

601
00:22:37,600 --> 00:22:40,159
botnet and trick bot with multiple gtags

602
00:22:40,159 --> 00:22:42,799
so uh it's also dropped this for a

603
00:22:42,799 --> 00:22:44,400
single day so all of these were dropped

604
00:22:44,400 --> 00:22:46,960
for 24 hours and then they stopped so

605
00:22:46,960 --> 00:22:48,880
then about drydex and trickbot were

606
00:22:48,880 --> 00:22:50,720
often bundled together in the same file

607
00:22:50,720 --> 00:22:51,440
so

608
00:22:51,440 --> 00:22:53,679
we were wondering if it's possible that

609
00:22:53,679 --> 00:22:55,600
the same actor is operating all these

610
00:22:55,600 --> 00:22:57,919
botnets and using private loader to

611
00:22:57,919 --> 00:22:59,760
deliver these files because of course

612
00:22:59,760 --> 00:23:02,240
derivative in a single file is much

613
00:23:02,240 --> 00:23:03,919
cheaper than delivering three separate

614
00:23:03,919 --> 00:23:07,120
files so uh we were wondering if they

615
00:23:07,120 --> 00:23:08,559
opted for that

616
00:23:08,559 --> 00:23:11,280
also these short outbirths of activity

617
00:23:11,280 --> 00:23:13,520
like in 24 hours and then they stop they

618
00:23:13,520 --> 00:23:15,679
deliver nothing afterward never see the

619
00:23:15,679 --> 00:23:18,159
families wondering if these operators

620
00:23:18,159 --> 00:23:19,919
are actually testing this paper install

621
00:23:19,919 --> 00:23:20,880
service

622
00:23:20,880 --> 00:23:25,120
as another way for malware delivery

623
00:23:25,120 --> 00:23:26,559
a few days

624
00:23:26,559 --> 00:23:28,799
after that on november 14th we started

625
00:23:28,799 --> 00:23:30,799
seeing uh private loaner dropping

626
00:23:30,799 --> 00:23:33,919
danabots with affiliate id also id4 also

627
00:23:33,919 --> 00:23:35,440
for a single day

628
00:23:35,440 --> 00:23:38,320
uh but uh starting late february 2022

629
00:23:38,320 --> 00:23:40,000
the new version of the dynabot banking

630
00:23:40,000 --> 00:23:43,679
trojan uh uh uh belonging to affiliate

631
00:23:43,679 --> 00:23:47,279
id5 uh started being uh being delivered

632
00:23:47,279 --> 00:23:50,080
through private loader in in in very big

633
00:23:50,080 --> 00:23:52,000
amounts and and they're actually still

634
00:23:52,000 --> 00:23:53,919
using it so i think they really like the

635
00:23:53,919 --> 00:23:56,720
service and using it for for as a main

636
00:23:56,720 --> 00:23:58,559
distribution method or one of the main

637
00:23:58,559 --> 00:24:00,480
distribution methods for their banking

638
00:24:00,480 --> 00:24:02,720
trojan

639
00:24:02,720 --> 00:24:04,799
so ransomware so

640
00:24:04,799 --> 00:24:06,400
paper install services will advise

641
00:24:06,400 --> 00:24:08,640
against installing ransomware because uh

642
00:24:08,640 --> 00:24:10,320
ransomware will render the machines

643
00:24:10,320 --> 00:24:12,640
unusable so if an operator the pros

644
00:24:12,640 --> 00:24:14,159
aren't somewhere all the machines are

645
00:24:14,159 --> 00:24:15,760
encrypted another one will deploy

646
00:24:15,760 --> 00:24:17,600
information sealer information studio

647
00:24:17,600 --> 00:24:19,520
won't get anything bad reputation for

648
00:24:19,520 --> 00:24:20,559
the service

649
00:24:20,559 --> 00:24:21,360
so

650
00:24:21,360 --> 00:24:23,760
uh however the uh

651
00:24:23,760 --> 00:24:26,000
the cyber criminals were not respectable

652
00:24:26,000 --> 00:24:29,360
so uh we see ransomware although uh very

653
00:24:29,360 --> 00:24:31,679
rarely so ransomware that we saw from

654
00:24:31,679 --> 00:24:33,760
private loader were lock bit

655
00:24:33,760 --> 00:24:35,440
this one was dropped in the same time

656
00:24:35,440 --> 00:24:37,760
frame where we saw the banking trojans

657
00:24:37,760 --> 00:24:40,960
uh and then the stop deja vu ransomware

658
00:24:40,960 --> 00:24:41,760
which

659
00:24:41,760 --> 00:24:45,120
which it has been dropping

660
00:24:45,360 --> 00:24:47,039
uh um uh

661
00:24:47,039 --> 00:24:50,320
all its lifetime basically

662
00:24:50,320 --> 00:24:52,480
so trucking private loader allowed us to

663
00:24:52,480 --> 00:24:55,279
discover some some new malware families

664
00:24:55,279 --> 00:24:57,279
uh a few of them are

665
00:24:57,279 --> 00:24:58,880
for example the rice pro stealer which

666
00:24:58,880 --> 00:25:00,720
we discovered recently

667
00:25:00,720 --> 00:25:03,279
it appeared in december 2021 programmed

668
00:25:03,279 --> 00:25:05,120
in c plus plus and it's from the same

669
00:25:05,120 --> 00:25:07,760
developers of private loader so we know

670
00:25:07,760 --> 00:25:09,279
about this because there are striking

671
00:25:09,279 --> 00:25:11,120
code similarities tracking behind

672
00:25:11,120 --> 00:25:14,000
behavioral similarities between rise pro

673
00:25:14,000 --> 00:25:15,840
and private loader and they also went

674
00:25:15,840 --> 00:25:17,440
from being on a

675
00:25:17,440 --> 00:25:20,000
monolithic malware to transforming and

676
00:25:20,000 --> 00:25:24,000
becoming a modular malware including a

677
00:25:24,000 --> 00:25:25,919
loader and a core module that operates

678
00:25:25,919 --> 00:25:29,520
in the same way as private loader so

679
00:25:29,520 --> 00:25:31,120
this dealer includes some download and

680
00:25:31,120 --> 00:25:32,880
execute functionality but until now

681
00:25:32,880 --> 00:25:34,159
we've only seen

682
00:25:34,159 --> 00:25:36,640
crypto miners delivered

683
00:25:36,640 --> 00:25:39,120
another interesting loader was disco

684
00:25:39,120 --> 00:25:41,440
loader so we called it that way because

685
00:25:41,440 --> 00:25:44,240
it's using uh the discord cdn uh as a

686
00:25:44,240 --> 00:25:47,200
main uh this as a main host for for its

687
00:25:47,200 --> 00:25:49,039
payload and it will usually chunk the

688
00:25:49,039 --> 00:25:51,840
payloads in in

689
00:25:51,840 --> 00:25:53,760
a few chunks and then concatenate them

690
00:25:53,760 --> 00:25:55,919
in memory and execute them so this is of

691
00:25:55,919 --> 00:25:58,000
course in.net and we have been able to

692
00:25:58,000 --> 00:26:00,320
find multiple dot net loaders and add

693
00:26:00,320 --> 00:26:02,080
coverage for them thanks to private

694
00:26:02,080 --> 00:26:03,600
loader

695
00:26:03,600 --> 00:26:04,960
so to conclude

696
00:26:04,960 --> 00:26:06,720
paper install services have been around

697
00:26:06,720 --> 00:26:08,799
for a long time they are an accessible

698
00:26:08,799 --> 00:26:11,520
and affordable way for malware operators

699
00:26:11,520 --> 00:26:13,919
to offload their malware delivery to

700
00:26:13,919 --> 00:26:16,159
a third party and actually focus on the

701
00:26:16,159 --> 00:26:18,159
development of their own malware so

702
00:26:18,159 --> 00:26:20,159
these services are often overlooked when

703
00:26:20,159 --> 00:26:21,840
it comes to installed payloads and

704
00:26:21,840 --> 00:26:23,679
rightfully so because they're only

705
00:26:23,679 --> 00:26:26,400
delivering commodity malware nothing too

706
00:26:26,400 --> 00:26:28,880
interesting but if we take private loan

707
00:26:28,880 --> 00:26:31,600
as an example it could be proof that

708
00:26:31,600 --> 00:26:33,840
these operators have some ties or have

709
00:26:33,840 --> 00:26:36,880
some connections to more advanced crews

710
00:26:36,880 --> 00:26:39,520
and this warrants more research into the

711
00:26:39,520 --> 00:26:40,720
area

712
00:26:40,720 --> 00:26:42,240
and last thing please don't download

713
00:26:42,240 --> 00:26:45,520
correct software thank you

714
00:26:45,760 --> 00:26:48,240
thank you

715
00:26:51,360 --> 00:26:52,640
okay wow

716
00:26:52,640 --> 00:26:54,960
okay

717
00:27:02,400 --> 00:27:04,320
uh hello mail from netcraft great

718
00:27:04,320 --> 00:27:05,760
presentation

719
00:27:05,760 --> 00:27:08,240
i was wondering if you had

720
00:27:08,240 --> 00:27:10,799
done any allow analysis on the cracked

721
00:27:10,799 --> 00:27:12,880
uh on the website that allowed you to

722
00:27:12,880 --> 00:27:14,480
download this crack software so if you

723
00:27:14,480 --> 00:27:15,760
try to

724
00:27:15,760 --> 00:27:17,279
download some binaries using different

725
00:27:17,279 --> 00:27:18,960
ip addresses or you mentioned a lot of

726
00:27:18,960 --> 00:27:20,720
redirects if you had done like any

727
00:27:20,720 --> 00:27:22,320
analysis on those

728
00:27:22,320 --> 00:27:24,960
yeah so basically what we did was uh at

729
00:27:24,960 --> 00:27:26,720
first we started navigating to these

730
00:27:26,720 --> 00:27:28,559
websites and trying to download these

731
00:27:28,559 --> 00:27:31,200
these setup files but we found out that

732
00:27:31,200 --> 00:27:32,799
most of them will get eventually

733
00:27:32,799 --> 00:27:34,799
uploaded to virustotal and we can just

734
00:27:34,799 --> 00:27:37,039
collect them from there and our model

735
00:27:37,039 --> 00:27:39,679
for emulating will enable us to

736
00:27:39,679 --> 00:27:41,600
extract all of these and get the

737
00:27:41,600 --> 00:27:43,039
different uh

738
00:27:43,039 --> 00:27:45,120
region codes for them so it was

739
00:27:45,120 --> 00:27:47,279
basically easy for us to just

740
00:27:47,279 --> 00:27:49,520
get get them from from virustotal but

741
00:27:49,520 --> 00:27:51,440
there is great research from sofoslabs

742
00:27:51,440 --> 00:27:54,080
that actually goes into it goes behind

743
00:27:54,080 --> 00:27:56,320
this infrastructures and infrastructure

744
00:27:56,320 --> 00:27:59,760
and explains uh how it

745
00:28:00,840 --> 00:28:04,080
works hi jose here blue

746
00:28:04,080 --> 00:28:06,880
nice talk really nice research um i was

747
00:28:06,880 --> 00:28:08,960
wondering did you manage to have a

748
00:28:08,960 --> 00:28:12,799
relation between the malware and any

749
00:28:12,799 --> 00:28:15,520
advertisement in any forum related to

750
00:28:15,520 --> 00:28:18,480
the service the pay-per-install service

751
00:28:18,480 --> 00:28:20,799
we do have some leads but the tlp of

752
00:28:20,799 --> 00:28:22,080
this talk

753
00:28:22,080 --> 00:28:24,320
cannot allow it to cannot allow us to

754
00:28:24,320 --> 00:28:26,320
share that information but

755
00:28:26,320 --> 00:28:30,840
but yeah we do have an idea yeah

756
00:28:39,039 --> 00:28:41,279
okay any other question

757
00:28:41,279 --> 00:28:45,000
yes in front

758
00:28:47,760 --> 00:28:49,600
i got a question about disco loader

759
00:28:49,600 --> 00:28:51,440
because um as always when we're looking

760
00:28:51,440 --> 00:28:52,880
at net things and trying to come up with

761
00:28:52,880 --> 00:28:55,039
names for them i know i've got a net

762
00:28:55,039 --> 00:28:56,440
loader that's loaded quite a lot from

763
00:28:56,440 --> 00:28:58,240
cdn.discord app as well and i'm

764
00:28:58,240 --> 00:29:00,159
wondering if it's the same one

765
00:29:00,159 --> 00:29:02,960
and does it download reversed um well

766
00:29:02,960 --> 00:29:04,880
they pretend to be image files but

767
00:29:04,880 --> 00:29:06,880
they're often a reverse dll

768
00:29:06,880 --> 00:29:08,480
uh that's another one we found through

769
00:29:08,480 --> 00:29:10,799
private loader as well but the discord

770
00:29:10,799 --> 00:29:13,760
order one will usually have

771
00:29:13,760 --> 00:29:14,640
an up

772
00:29:14,640 --> 00:29:16,080
an uppercase

773
00:29:16,080 --> 00:29:19,039
hexadecimal find m dot gpg but it's not

774
00:29:19,039 --> 00:29:22,640
reversed no yeah

775
00:29:23,919 --> 00:29:24,840
thank

776
00:29:24,840 --> 00:29:29,360
you the final question

777
00:29:30,559 --> 00:29:35,720
one two three okay thank you very much

