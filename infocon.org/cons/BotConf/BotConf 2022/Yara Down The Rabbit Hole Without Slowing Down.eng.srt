1
00:00:00,080 --> 00:00:00,880
uh

2
00:00:00,880 --> 00:00:02,720
taking up uh the challenge of teaching

3
00:00:02,720 --> 00:00:06,160
you about yara in uh 30 minutes

4
00:00:06,160 --> 00:00:08,559
or less actually

5
00:00:08,559 --> 00:00:09,840
um

6
00:00:09,840 --> 00:00:11,679
so it's a short workshop and actually

7
00:00:11,679 --> 00:00:12,920
the idea was to share about

8
00:00:12,920 --> 00:00:14,240
[Music]

9
00:00:14,240 --> 00:00:16,960
how how you can learn yara

10
00:00:16,960 --> 00:00:18,320
exactly

11
00:00:18,320 --> 00:00:20,320
you have the floor thank you very much

12
00:00:20,320 --> 00:00:22,160
so hello everyone my name is dominic

13
00:00:22,160 --> 00:00:24,560
kargetsiova and i would like to

14
00:00:24,560 --> 00:00:26,800
share with you some of my knowledge and

15
00:00:26,800 --> 00:00:29,840
experience with yara

16
00:00:29,840 --> 00:00:32,960
few words about me i am a researcher at

17
00:00:32,960 --> 00:00:34,000
avast

18
00:00:34,000 --> 00:00:37,520
and i'm also a phd student

19
00:00:37,520 --> 00:00:38,559
at

20
00:00:38,559 --> 00:00:42,480
bernard university of technology in brno

21
00:00:42,480 --> 00:00:44,800
my research includes formal models

22
00:00:44,800 --> 00:00:48,960
languages and their use in security

23
00:00:48,960 --> 00:00:50,239
i'm also

24
00:00:50,239 --> 00:00:53,039
interested in pattern matching

25
00:00:53,039 --> 00:00:55,680
and also sometimes i'm working with

26
00:00:55,680 --> 00:00:57,840
blockchain technology

27
00:00:57,840 --> 00:01:00,800
during my projects at the university i

28
00:01:00,800 --> 00:01:03,600
also worked and i'm or i'm working with

29
00:01:03,600 --> 00:01:06,640
essa european space agency and czech

30
00:01:06,640 --> 00:01:09,040
police

31
00:01:10,240 --> 00:01:13,439
what to expect from this talk

32
00:01:13,439 --> 00:01:16,960
we will shortly talk about what exactly

33
00:01:16,960 --> 00:01:17,920
is

34
00:01:17,920 --> 00:01:22,240
even though i believe most of you

35
00:01:22,240 --> 00:01:24,799
is well aware of it

36
00:01:24,799 --> 00:01:25,600
but

37
00:01:25,600 --> 00:01:29,119
later on i will talk more about

38
00:01:29,119 --> 00:01:31,759
some specific and mostly

39
00:01:31,759 --> 00:01:34,240
practical like details that could be

40
00:01:34,240 --> 00:01:36,159
really useful for you

41
00:01:36,159 --> 00:01:38,799
if you are using cara

42
00:01:38,799 --> 00:01:40,720
in your company

43
00:01:40,720 --> 00:01:42,399
and your business

44
00:01:42,399 --> 00:01:44,399
i would also

45
00:01:44,399 --> 00:01:47,759
like to share with you some information

46
00:01:47,759 --> 00:01:50,640
about my changes in era

47
00:01:50,640 --> 00:01:53,759
that i proposed and also changes

48
00:01:53,759 --> 00:01:58,320
that were done by my colleagues at avast

49
00:01:58,320 --> 00:02:01,040
so let's talk about yara

50
00:02:01,040 --> 00:02:04,159
you probably know that tierra is

51
00:02:04,159 --> 00:02:05,840
amazing tool

52
00:02:05,840 --> 00:02:06,719
for

53
00:02:06,719 --> 00:02:10,000
mostly matching malware

54
00:02:10,000 --> 00:02:14,800
based on statical and dynamical analysis

55
00:02:14,800 --> 00:02:17,920
it was created by company virus total

56
00:02:17,920 --> 00:02:21,040
you i think heard about them by the way

57
00:02:21,040 --> 00:02:23,599
next talk is about verse total i'm

58
00:02:23,599 --> 00:02:27,200
looking forward to it so don't skip it i

59
00:02:27,200 --> 00:02:29,120
recommend it to stay here

60
00:02:29,120 --> 00:02:30,800
uh

61
00:02:30,800 --> 00:02:35,120
and it's widely used uh it's even the

62
00:02:35,120 --> 00:02:38,160
company was bought by google which also

63
00:02:38,160 --> 00:02:40,480
means something for me

64
00:02:40,480 --> 00:02:42,400
uh and you can

65
00:02:42,400 --> 00:02:45,920
meet the era basically everywhere

66
00:02:45,920 --> 00:02:48,640
more specifically about uh yeah it's the

67
00:02:48,640 --> 00:02:51,040
tool but also language

68
00:02:51,040 --> 00:02:54,640
where the basic syntax you need is

69
00:02:54,640 --> 00:02:56,480
so-called rule

70
00:02:56,480 --> 00:02:59,840
rule has name you can imagine it as a

71
00:02:59,840 --> 00:03:01,360
name of the function

72
00:03:01,360 --> 00:03:04,319
or something like that and it's usually

73
00:03:04,319 --> 00:03:07,280
it's contains usually three parts meta

74
00:03:07,280 --> 00:03:10,239
information which is like description uh

75
00:03:10,239 --> 00:03:12,560
name of outros etc

76
00:03:12,560 --> 00:03:14,959
strings this is like for the static

77
00:03:14,959 --> 00:03:16,640
analysis

78
00:03:16,640 --> 00:03:21,280
meaning we want to find these strings in

79
00:03:21,280 --> 00:03:23,280
files we can

80
00:03:23,280 --> 00:03:25,760
declare text string as you can see the

81
00:03:25,760 --> 00:03:27,519
first case

82
00:03:27,519 --> 00:03:31,440
we are searching cmd dot exam

83
00:03:31,440 --> 00:03:34,879
or you can define regular expressions or

84
00:03:34,879 --> 00:03:36,720
hexadecimal strings

85
00:03:36,720 --> 00:03:38,319
i will talk about

86
00:03:38,319 --> 00:03:40,720
the option behind the string ask say

87
00:03:40,720 --> 00:03:43,680
white no case a little bit later

88
00:03:43,680 --> 00:03:46,799
then you have part condition that has to

89
00:03:46,799 --> 00:03:47,680
be

90
00:03:47,680 --> 00:03:50,959
evaluated as true

91
00:03:50,959 --> 00:03:52,319
to

92
00:03:52,319 --> 00:03:55,680
found a match in a file

93
00:03:55,680 --> 00:03:58,400
so this is like boolean expression

94
00:03:58,400 --> 00:04:01,439
basically i have here i want to match

95
00:04:01,439 --> 00:04:02,799
both

96
00:04:02,799 --> 00:04:05,920
text string and regular expression and i

97
00:04:05,920 --> 00:04:09,120
also calling some function from modules

98
00:04:09,120 --> 00:04:11,120
here has several modules that you can

99
00:04:11,120 --> 00:04:12,159
use

100
00:04:12,159 --> 00:04:13,120
like

101
00:04:13,120 --> 00:04:15,920
for example for google module so you are

102
00:04:15,920 --> 00:04:18,238
passing google

103
00:04:18,238 --> 00:04:19,440
reports

104
00:04:19,440 --> 00:04:22,800
or in this case i'm using module math

105
00:04:22,800 --> 00:04:26,240
where i calculating entropy of file size

106
00:04:26,240 --> 00:04:28,400
from giving offset

107
00:04:28,400 --> 00:04:31,919
and you can also access specific offset

108
00:04:31,919 --> 00:04:33,360
of the file

109
00:04:33,360 --> 00:04:37,680
and you can change check the value there

110
00:04:37,680 --> 00:04:41,440
this is just simple like rule as example

111
00:04:41,440 --> 00:04:43,840
um you can see it's

112
00:04:43,840 --> 00:04:46,960
called a bootcamp malware so nothing

113
00:04:46,960 --> 00:04:48,240
real so

114
00:04:48,240 --> 00:04:50,880
you can try to use it but it will

115
00:04:50,880 --> 00:04:52,880
probably

116
00:04:52,880 --> 00:04:56,479
it won't probably find anything useful

117
00:04:56,479 --> 00:04:57,199
but

118
00:04:57,199 --> 00:05:00,160
this is actually a great example

119
00:05:00,160 --> 00:05:02,320
to my talk today

120
00:05:02,320 --> 00:05:06,639
because if we use this rule on some data

121
00:05:06,639 --> 00:05:08,800
i selected random

122
00:05:08,800 --> 00:05:12,000
directory in in my system

123
00:05:12,000 --> 00:05:15,360
that has around six gigabytes of data

124
00:05:15,360 --> 00:05:18,479
with around 40 000 files

125
00:05:18,479 --> 00:05:21,440
we found out we have a little bit of

126
00:05:21,440 --> 00:05:23,280
problem

127
00:05:23,280 --> 00:05:26,880
why firstly uh yara will generate free

128
00:05:26,880 --> 00:05:28,240
warnings

129
00:05:28,240 --> 00:05:30,160
if you are one of my students you can

130
00:05:30,160 --> 00:05:32,400
say hahaha okay warnings that's not

131
00:05:32,400 --> 00:05:34,800
problem right if it's not error that's

132
00:05:34,800 --> 00:05:35,840
who cares

133
00:05:35,840 --> 00:05:39,840
but in practice their system for example

134
00:05:39,840 --> 00:05:43,360
by virus total that limited the use of

135
00:05:43,360 --> 00:05:46,000
rules with warnings so you actually want

136
00:05:46,000 --> 00:05:47,440
to avoid them

137
00:05:47,440 --> 00:05:48,960
and also

138
00:05:48,960 --> 00:05:50,479
they are usually

139
00:05:50,479 --> 00:05:53,199
quite meaningful they can be like

140
00:05:53,199 --> 00:05:56,479
persistent but they

141
00:05:56,479 --> 00:05:59,199
tell you that your rule could be a

142
00:05:59,199 --> 00:06:00,720
little bit better

143
00:06:00,720 --> 00:06:03,360
in this case it's saying that

144
00:06:03,360 --> 00:06:05,360
a rule is matching

145
00:06:05,360 --> 00:06:06,960
too many things

146
00:06:06,960 --> 00:06:09,759
so it's basically saying maybe you are

147
00:06:09,759 --> 00:06:10,800
searching

148
00:06:10,800 --> 00:06:12,960
for basically everything are you sure

149
00:06:12,960 --> 00:06:13,759
it's

150
00:06:13,759 --> 00:06:16,160
what are you like looking for

151
00:06:16,160 --> 00:06:17,759
maybe check it out

152
00:06:17,759 --> 00:06:18,720
also

153
00:06:18,720 --> 00:06:22,479
uh there's like more specific warning

154
00:06:22,479 --> 00:06:24,160
we will talk about that a little bit

155
00:06:24,160 --> 00:06:25,039
later

156
00:06:25,039 --> 00:06:28,400
and the final one which was also like

157
00:06:28,400 --> 00:06:30,240
the motivation for the speech and my

158
00:06:30,240 --> 00:06:32,000
research in general

159
00:06:32,000 --> 00:06:33,280
uh the

160
00:06:33,280 --> 00:06:34,400
rule

161
00:06:34,400 --> 00:06:36,400
may slow down scanning and this is

162
00:06:36,400 --> 00:06:38,000
problem because

163
00:06:38,000 --> 00:06:40,479
uh when you need to scan

164
00:06:40,479 --> 00:06:42,800
um basically data

165
00:06:42,800 --> 00:06:45,199
get the answer very quickly

166
00:06:45,199 --> 00:06:47,520
this could be really painful

167
00:06:47,520 --> 00:06:51,120
and as you can see from the last uh last

168
00:06:51,120 --> 00:06:52,400
line

169
00:06:52,400 --> 00:06:53,280
yes

170
00:06:53,280 --> 00:06:54,639
only

171
00:06:54,639 --> 00:06:57,440
like in uh

172
00:06:57,440 --> 00:07:00,240
just like i really want like for example

173
00:07:00,240 --> 00:07:03,360
it's like only six gigabytes took

174
00:07:03,360 --> 00:07:07,360
45 minutes to we scan by era which is

175
00:07:07,360 --> 00:07:10,000
bad like this is really bad we don't

176
00:07:10,000 --> 00:07:12,880
want to use these rules in practice

177
00:07:12,880 --> 00:07:14,000
because

178
00:07:14,000 --> 00:07:15,599
otherwise we cannot detect basically

179
00:07:15,599 --> 00:07:19,440
anything so what we can do with it

180
00:07:19,520 --> 00:07:21,759
which is the very topic of this talk

181
00:07:21,759 --> 00:07:24,639
yara performance

182
00:07:24,639 --> 00:07:27,520
to understand what's uh went wrong with

183
00:07:27,520 --> 00:07:29,520
the rule i will quickly summarize

184
00:07:29,520 --> 00:07:32,400
something but don't worry i will not go

185
00:07:32,400 --> 00:07:35,360
into too much detail because i think

186
00:07:35,360 --> 00:07:38,160
it's better to read some information

187
00:07:38,160 --> 00:07:40,800
like this i will share the presentation

188
00:07:40,800 --> 00:07:43,840
with you don't worry and i also have a

189
00:07:43,840 --> 00:07:47,199
paper that you can read early larger

190
00:07:47,199 --> 00:07:49,599
explanation and long explanation about

191
00:07:49,599 --> 00:07:51,759
basically everything i will talk about

192
00:07:51,759 --> 00:07:52,960
here

193
00:07:52,960 --> 00:07:54,240
but shortly

194
00:07:54,240 --> 00:07:57,120
yara does not search

195
00:07:57,120 --> 00:08:01,440
like whole strength advance

196
00:08:01,599 --> 00:08:04,800
yara will select substring of statical

197
00:08:04,800 --> 00:08:06,639
part of the strings

198
00:08:06,639 --> 00:08:08,240
based on

199
00:08:08,240 --> 00:08:09,840
some heuristics

200
00:08:09,840 --> 00:08:10,879
these

201
00:08:10,879 --> 00:08:14,960
substrings or atoms are 0 to 4

202
00:08:14,960 --> 00:08:16,400
characters

203
00:08:16,400 --> 00:08:17,440
and

204
00:08:17,440 --> 00:08:19,759
basically it will search the file for

205
00:08:19,759 --> 00:08:23,039
potential matches so in the end it has

206
00:08:23,039 --> 00:08:26,319
like okay there are four places or ten

207
00:08:26,319 --> 00:08:28,080
places where the match can be

208
00:08:28,080 --> 00:08:30,560
potentially found and then later it will

209
00:08:30,560 --> 00:08:33,279
check if the match is really there or

210
00:08:33,279 --> 00:08:34,640
not

211
00:08:34,640 --> 00:08:36,159
what does it mean

212
00:08:36,159 --> 00:08:36,958
you

213
00:08:36,958 --> 00:08:39,839
should think about it while defining

214
00:08:39,839 --> 00:08:43,360
your strengths because if you choose

215
00:08:43,360 --> 00:08:46,320
two general strengths that mean

216
00:08:46,320 --> 00:08:48,720
that yara will slow down because it

217
00:08:48,720 --> 00:08:50,160
needs

218
00:08:50,160 --> 00:08:54,880
deeply examinate every byte of your file

219
00:08:54,880 --> 00:08:56,160
for example

220
00:08:56,160 --> 00:08:57,920
i have some

221
00:08:57,920 --> 00:09:00,959
examples here the first first regret

222
00:09:00,959 --> 00:09:03,279
expression is

223
00:09:03,279 --> 00:09:06,399
kinda okay there are there is one atom

224
00:09:06,399 --> 00:09:08,560
wavelength of three characters which is

225
00:09:08,560 --> 00:09:10,000
kind of nice

226
00:09:10,000 --> 00:09:12,720
also in binaries and stuff it's probably

227
00:09:12,720 --> 00:09:15,920
quite unique so this can work as well

228
00:09:15,920 --> 00:09:18,800
the second one is also okay we have even

229
00:09:18,800 --> 00:09:20,480
four characters

230
00:09:20,480 --> 00:09:24,880
be aware that uh the one or two prefixes

231
00:09:24,880 --> 00:09:26,959
will be checked later during the

232
00:09:26,959 --> 00:09:28,560
matching process

233
00:09:28,560 --> 00:09:30,399
uh the third one is excellent

234
00:09:30,399 --> 00:09:31,760
demonstrating

235
00:09:31,760 --> 00:09:34,560
we have four characters but

236
00:09:34,560 --> 00:09:37,680
be careful about the zeros in general in

237
00:09:37,680 --> 00:09:40,959
rules because as you can imagine

238
00:09:40,959 --> 00:09:43,040
there's lots of files that contains

239
00:09:43,040 --> 00:09:45,360
large section sections of

240
00:09:45,360 --> 00:09:47,360
of zero bytes

241
00:09:47,360 --> 00:09:49,040
and

242
00:09:49,040 --> 00:09:52,000
in one version of the area it was even

243
00:09:52,000 --> 00:09:54,480
possible to search for

244
00:09:54,480 --> 00:09:58,320
uh zero bytes in atoms we actually from

245
00:09:58,320 --> 00:10:01,200
from my company proposed a change during

246
00:10:01,200 --> 00:10:04,240
this because the slowing down was really

247
00:10:04,240 --> 00:10:06,320
really significant

248
00:10:06,320 --> 00:10:07,839
the

249
00:10:07,839 --> 00:10:10,399
next example is a little bit worse

250
00:10:10,399 --> 00:10:13,279
because uh liera in first step will work

251
00:10:13,279 --> 00:10:14,480
only with

252
00:10:14,480 --> 00:10:17,519
basically two symbols like c and d

253
00:10:17,519 --> 00:10:20,000
which uh can

254
00:10:20,000 --> 00:10:23,120
took some time to check all files

255
00:10:23,120 --> 00:10:25,920
and if you can see the trend you

256
00:10:25,920 --> 00:10:28,480
basically want to specif be specific as

257
00:10:28,480 --> 00:10:31,279
possible the last one is like the worst

258
00:10:31,279 --> 00:10:34,240
idea because firstly

259
00:10:34,240 --> 00:10:36,399
zero rank atom is selected which

260
00:10:36,399 --> 00:10:37,839
basically mean

261
00:10:37,839 --> 00:10:40,720
that every byte of the file is checked

262
00:10:40,720 --> 00:10:42,800
more deeply if

263
00:10:42,800 --> 00:10:45,120
the regular expression is matching the

264
00:10:45,120 --> 00:10:47,600
part of the string which is very slow

265
00:10:47,600 --> 00:10:51,040
and also it's very generic like you can

266
00:10:51,040 --> 00:10:51,760
see

267
00:10:51,760 --> 00:10:53,920
okay there has to be some alpha number

268
00:10:53,920 --> 00:10:56,720
uh symbol then we can have basically

269
00:10:56,720 --> 00:10:59,279
everything and lastly there is one

270
00:10:59,279 --> 00:11:01,519
number

271
00:11:01,519 --> 00:11:03,200
basically what are you searching with

272
00:11:03,200 --> 00:11:07,600
this thing you should always think that

273
00:11:07,600 --> 00:11:10,240
it if it's too generic

274
00:11:10,240 --> 00:11:12,560
you maybe don't want to search for it at

275
00:11:12,560 --> 00:11:13,440
all

276
00:11:13,440 --> 00:11:14,959
we will see

277
00:11:14,959 --> 00:11:16,880
also i talked about

278
00:11:16,880 --> 00:11:19,600
or i mentioned modificators before

279
00:11:19,600 --> 00:11:22,560
you can use it for both

280
00:11:22,560 --> 00:11:26,480
text strings and regular expressions

281
00:11:26,480 --> 00:11:29,040
there are some basic options asking

282
00:11:29,040 --> 00:11:31,279
there is basically like the natural

283
00:11:31,279 --> 00:11:33,760
regime for yara to work with

284
00:11:33,760 --> 00:11:36,640
uh there is support for like byte option

285
00:11:36,640 --> 00:11:38,000
which is

286
00:11:38,000 --> 00:11:38,880
it's

287
00:11:38,880 --> 00:11:42,079
something like utf-16 but not really

288
00:11:42,079 --> 00:11:45,279
because the first byte is actually just

289
00:11:45,279 --> 00:11:46,240
zero

290
00:11:46,240 --> 00:11:50,000
and the second byte is from ascii so be

291
00:11:50,000 --> 00:11:54,399
aware of it it's not the true utf-16 as

292
00:11:54,399 --> 00:11:55,519
you can

293
00:11:55,519 --> 00:11:58,480
or you could expect

294
00:11:58,480 --> 00:12:00,320
or you can use both

295
00:12:00,320 --> 00:12:02,720
but also be aware that

296
00:12:02,720 --> 00:12:05,360
uh you should know if

297
00:12:05,360 --> 00:12:08,240
it's really the case if and if you

298
00:12:08,240 --> 00:12:10,240
really need it

299
00:12:10,240 --> 00:12:12,320
you don't don't use it and your rule

300
00:12:12,320 --> 00:12:13,440
will be

301
00:12:13,440 --> 00:12:16,320
just just a little bit faster

302
00:12:16,320 --> 00:12:19,279
okay sensitive modificators it's a big

303
00:12:19,279 --> 00:12:22,320
debate in the air community

304
00:12:22,320 --> 00:12:24,560
in moocs cases

305
00:12:24,560 --> 00:12:26,800
using no case option

306
00:12:26,800 --> 00:12:30,399
it's quite okay but if you have a big

307
00:12:30,399 --> 00:12:32,320
rule set that mean

308
00:12:32,320 --> 00:12:35,279
you are scanning with multiple rules at

309
00:12:35,279 --> 00:12:38,800
the same time it can

310
00:12:38,800 --> 00:12:40,000
it can have

311
00:12:40,000 --> 00:12:42,800
effect on on your speed what you can do

312
00:12:42,800 --> 00:12:45,040
instead and which is actually a little

313
00:12:45,040 --> 00:12:48,639
bit like faster is to specific just

314
00:12:48,639 --> 00:12:51,519
uh for example one first letter that you

315
00:12:51,519 --> 00:12:54,160
want to match both

316
00:12:54,160 --> 00:12:57,200
upper and lower case and be dead you can

317
00:12:57,200 --> 00:12:59,839
get actually better result just quick

318
00:12:59,839 --> 00:13:02,880
note don't forget to escape the dot

319
00:13:02,880 --> 00:13:06,000
i think this is very like common mistake

320
00:13:06,000 --> 00:13:08,399
it's easily forgotten right and then you

321
00:13:08,399 --> 00:13:09,760
will match

322
00:13:09,760 --> 00:13:11,519
a different thing so

323
00:13:11,519 --> 00:13:14,000
be careful about it in regular

324
00:13:14,000 --> 00:13:16,639
expression you need to escape dot to

325
00:13:16,639 --> 00:13:19,040
match actually dot and not everything

326
00:13:19,040 --> 00:13:21,360
everything else

327
00:13:21,360 --> 00:13:23,200
again be specific as possible this is

328
00:13:23,200 --> 00:13:26,079
like the main message of this talk uh so

329
00:13:26,079 --> 00:13:29,200
be be careful about that uh

330
00:13:29,200 --> 00:13:31,760
of course it's very hard i know i work

331
00:13:31,760 --> 00:13:34,480
with a malware analyst and they will

332
00:13:34,480 --> 00:13:37,040
come to me and say hey i really need to

333
00:13:37,040 --> 00:13:40,240
specify this more in more general way

334
00:13:40,240 --> 00:13:42,639
but yara is telling me no please don't

335
00:13:42,639 --> 00:13:46,000
use it so what's the solution

336
00:13:46,000 --> 00:13:49,440
social is basically just try to find the

337
00:13:49,440 --> 00:13:50,800
middle ground

338
00:13:50,800 --> 00:13:53,120
when your rules is working like you need

339
00:13:53,120 --> 00:13:56,720
it but also the era is like happy and

340
00:13:56,720 --> 00:13:59,600
does not generate warnings for example

341
00:13:59,600 --> 00:14:03,440
you can specify uh the the range of how

342
00:14:03,440 --> 00:14:05,600
many symbols you want to match

343
00:14:05,600 --> 00:14:07,360
the star the path symbol that is

344
00:14:07,360 --> 00:14:10,560
matching like zero or one two basically

345
00:14:10,560 --> 00:14:13,120
infinite number of letters is not useful

346
00:14:13,120 --> 00:14:15,519
for errors so be a little bit more

347
00:14:15,519 --> 00:14:16,720
specific

348
00:14:16,720 --> 00:14:19,760
what can be surprising for you

349
00:14:19,760 --> 00:14:24,079
is that yara really likes fixed prefixes

350
00:14:24,079 --> 00:14:26,880
what i mean that if you are matching

351
00:14:26,880 --> 00:14:29,440
something and you know the start of the

352
00:14:29,440 --> 00:14:31,680
string or regular expression

353
00:14:31,680 --> 00:14:32,720
use it

354
00:14:32,720 --> 00:14:34,079
because

355
00:14:34,079 --> 00:14:36,000
yara will then

356
00:14:36,000 --> 00:14:37,279
found

357
00:14:37,279 --> 00:14:38,240
more

358
00:14:38,240 --> 00:14:41,279
the largest or longest match possible

359
00:14:41,279 --> 00:14:43,839
and is much quicker than the other way

360
00:14:43,839 --> 00:14:46,639
around so you have suffix the end for

361
00:14:46,639 --> 00:14:49,199
example here i have something

362
00:14:49,199 --> 00:14:50,560
and tom

363
00:14:50,560 --> 00:14:53,680
that's not the ideal for the the yara

364
00:14:53,680 --> 00:14:54,720
because

365
00:14:54,720 --> 00:14:58,639
then it will find every possible match

366
00:14:58,639 --> 00:15:00,560
because

367
00:15:00,560 --> 00:15:03,680
the prefix is not fixed basically so in

368
00:15:03,680 --> 00:15:06,800
our case uh with regular expression for

369
00:15:06,800 --> 00:15:09,519
example we want to match some some file

370
00:15:09,519 --> 00:15:13,680
path so if we know that the path start

371
00:15:13,680 --> 00:15:15,279
with let us see

372
00:15:15,279 --> 00:15:16,880
with disk c

373
00:15:16,880 --> 00:15:20,800
then we can use it and uh yara will be

374
00:15:20,800 --> 00:15:23,760
very happy for us

375
00:15:23,760 --> 00:15:26,480
too many matches this is a very

376
00:15:26,480 --> 00:15:28,480
troublesome problem

377
00:15:28,480 --> 00:15:30,720
we are dealing with it at about

378
00:15:30,720 --> 00:15:33,759
basically every day

379
00:15:33,759 --> 00:15:37,440
it means that your your rule is too

380
00:15:37,440 --> 00:15:40,160
too generic and some files can trigger

381
00:15:40,160 --> 00:15:42,639
like over one million

382
00:15:42,639 --> 00:15:43,759
matches

383
00:15:43,759 --> 00:15:47,519
on it which is the cause of this warning

384
00:15:47,519 --> 00:15:50,160
previously it was even error so you

385
00:15:50,160 --> 00:15:52,560
couldn't actually like really use it at

386
00:15:52,560 --> 00:15:53,360
all

387
00:15:53,360 --> 00:15:54,639
now

388
00:15:54,639 --> 00:15:57,360
it's only warning but still the result

389
00:15:57,360 --> 00:16:00,160
can be like invalid because

390
00:16:00,160 --> 00:16:03,360
uh yeah cannot store all the matches

391
00:16:03,360 --> 00:16:06,720
in their in their system

392
00:16:06,800 --> 00:16:09,440
what we can do with this there is no one

393
00:16:09,440 --> 00:16:11,759
simple solution for this problem

394
00:16:11,759 --> 00:16:13,440
unfortunately

395
00:16:13,440 --> 00:16:16,399
but i have collected some hints that

396
00:16:16,399 --> 00:16:19,360
could help you what is behind this

397
00:16:19,360 --> 00:16:22,000
problem first of all the quantifiers

398
00:16:22,000 --> 00:16:23,279
like

399
00:16:23,279 --> 00:16:26,720
dot star dot plus dot

400
00:16:26,720 --> 00:16:29,279
star even like question mark

401
00:16:29,279 --> 00:16:31,839
is basically matching everything so

402
00:16:31,839 --> 00:16:34,880
uh don't use it

403
00:16:34,880 --> 00:16:36,720
until

404
00:16:36,720 --> 00:16:39,920
when it's not really necessary

405
00:16:39,920 --> 00:16:43,360
because sierra really can

406
00:16:43,360 --> 00:16:45,120
cause a problem and even with

407
00:16:45,120 --> 00:16:47,040
combination with

408
00:16:47,040 --> 00:16:48,639
unfixed prefix

409
00:16:48,639 --> 00:16:50,880
you can easily get over one million

410
00:16:50,880 --> 00:16:53,360
matches in one file

411
00:16:53,360 --> 00:16:54,560
then

412
00:16:54,560 --> 00:16:57,199
whatever doesn't like as well is

413
00:16:57,199 --> 00:16:59,920
quantifiers without upper bound so say

414
00:16:59,920 --> 00:17:01,920
okay i want to match at least for

415
00:17:01,920 --> 00:17:04,880
example 14 10 on whatever

416
00:17:04,880 --> 00:17:07,760
characters but i don't mind too much

417
00:17:07,760 --> 00:17:10,079
more this is also a problem because here

418
00:17:10,079 --> 00:17:12,480
i will try to find the longest match so

419
00:17:12,480 --> 00:17:14,559
it can even match the whole thing like

420
00:17:14,559 --> 00:17:16,799
whole file which is not probably what

421
00:17:16,799 --> 00:17:18,480
you want

422
00:17:18,480 --> 00:17:19,679
large

423
00:17:19,679 --> 00:17:22,959
two large arranges are also problem just

424
00:17:22,959 --> 00:17:25,359
keep it minimal what you really need to

425
00:17:25,359 --> 00:17:27,280
match basically

426
00:17:27,280 --> 00:17:28,880
uh it has

427
00:17:28,880 --> 00:17:31,679
i'm sorry hexadecimal strings you can

428
00:17:31,679 --> 00:17:35,280
use so-called gems jumps so you can skip

429
00:17:35,280 --> 00:17:37,760
a large part of files

430
00:17:37,760 --> 00:17:40,960
this is useful but again be careful how

431
00:17:40,960 --> 00:17:43,200
you use it because if you skip for

432
00:17:43,200 --> 00:17:46,320
example almost whole file then it should

433
00:17:46,320 --> 00:17:48,720
be probably used in different way and

434
00:17:48,720 --> 00:17:52,080
you can for example use the function

435
00:17:52,080 --> 00:17:55,360
that check specific uh specific like

436
00:17:55,360 --> 00:17:58,320
offset of the file

437
00:17:58,320 --> 00:18:00,960
white cars characters like dot and etc

438
00:18:00,960 --> 00:18:01,919
also

439
00:18:01,919 --> 00:18:04,080
uh can

440
00:18:04,080 --> 00:18:05,039
really

441
00:18:05,039 --> 00:18:07,520
uh increase the time necessary for

442
00:18:07,520 --> 00:18:08,640
scanning

443
00:18:08,640 --> 00:18:11,520
so maybe even consider to split your

444
00:18:11,520 --> 00:18:14,000
strings into two or maybe even more

445
00:18:14,000 --> 00:18:15,440
version

446
00:18:15,440 --> 00:18:17,360
so you are just

447
00:18:17,360 --> 00:18:20,640
matching the parts of it and the things

448
00:18:20,640 --> 00:18:23,760
between are just left behind

449
00:18:23,760 --> 00:18:26,640
alternation era unfortunately doesn't

450
00:18:26,640 --> 00:18:29,520
work very well with alternations

451
00:18:29,520 --> 00:18:30,320
so

452
00:18:30,320 --> 00:18:32,960
even though the readability is important

453
00:18:32,960 --> 00:18:34,480
of course

454
00:18:34,480 --> 00:18:38,799
maybe try to split if you have

455
00:18:38,799 --> 00:18:41,600
multiple alternations in one string

456
00:18:41,600 --> 00:18:43,440
split them into more

457
00:18:43,440 --> 00:18:46,080
definition you can find out that the

458
00:18:46,080 --> 00:18:48,080
speed actually

459
00:18:48,080 --> 00:18:51,039
increase and the rule works better that

460
00:18:51,039 --> 00:18:52,400
way

461
00:18:52,400 --> 00:18:55,679
and also even though i was saying before

462
00:18:55,679 --> 00:18:58,240
be careful with options like white no

463
00:18:58,240 --> 00:19:01,039
case etc there are options that could be

464
00:19:01,039 --> 00:19:03,760
actually useful for example food world

465
00:19:03,760 --> 00:19:05,280
that is

466
00:19:05,280 --> 00:19:06,160
like

467
00:19:06,160 --> 00:19:08,559
we are saying that has to be

468
00:19:08,559 --> 00:19:11,440
white space around the match which is

469
00:19:11,440 --> 00:19:14,160
also useful for yara because it will

470
00:19:14,160 --> 00:19:16,559
actually

471
00:19:16,559 --> 00:19:19,039
it will eliminate some cases of

472
00:19:19,039 --> 00:19:22,000
potential matches

473
00:19:22,000 --> 00:19:24,640
conditions conditions as i said before

474
00:19:24,640 --> 00:19:28,480
are there like boolean expression and

475
00:19:28,480 --> 00:19:31,039
the main part of the rule when we are

476
00:19:31,039 --> 00:19:34,240
calling uh some other functions and we

477
00:19:34,240 --> 00:19:36,400
are working with previously defined

478
00:19:36,400 --> 00:19:38,160
strings

479
00:19:38,160 --> 00:19:41,520
what is not the the best i think the

480
00:19:41,520 --> 00:19:44,080
evolution evaluation of static part of

481
00:19:44,080 --> 00:19:45,280
rules

482
00:19:45,280 --> 00:19:47,919
is done before the conditions

483
00:19:47,919 --> 00:19:50,559
so if for example you have like you want

484
00:19:50,559 --> 00:19:54,320
to eliminate the input and said okay i'm

485
00:19:54,320 --> 00:19:57,039
carrying only about files

486
00:19:57,039 --> 00:19:59,840
where the file size is less than for

487
00:19:59,840 --> 00:20:02,799
example 100

488
00:20:03,360 --> 00:20:07,120
it won't help you because the for

489
00:20:07,120 --> 00:20:09,679
example very expensive frequencies or

490
00:20:09,679 --> 00:20:12,320
complicated hexadecimal strings will be

491
00:20:12,320 --> 00:20:14,960
evaluated first and then

492
00:20:14,960 --> 00:20:17,840
here i will search oh okay this file

493
00:20:17,840 --> 00:20:20,960
actually has like 10 billions gigabytes

494
00:20:20,960 --> 00:20:22,559
oops sorry

495
00:20:22,559 --> 00:20:23,679
so

496
00:20:23,679 --> 00:20:26,000
this is problem we were also talking

497
00:20:26,000 --> 00:20:28,960
with auto sofia about it it's basically

498
00:20:28,960 --> 00:20:31,600
work in progress maybe in the future

499
00:20:31,600 --> 00:20:35,120
it will be rotated a bit differently but

500
00:20:35,120 --> 00:20:37,440
please for now keep it in mind that this

501
00:20:37,440 --> 00:20:39,280
is a

502
00:20:39,280 --> 00:20:41,919
thing that will not influence your your

503
00:20:41,919 --> 00:20:45,679
rules what you can do instead uh use

504
00:20:45,679 --> 00:20:47,520
short circuit evaluation there is

505
00:20:47,520 --> 00:20:49,039
already in error

506
00:20:49,039 --> 00:20:50,559
and basically

507
00:20:50,559 --> 00:20:54,240
it means that the functions and other

508
00:20:54,240 --> 00:20:57,360
stuff besides the static parts

509
00:20:57,360 --> 00:20:59,840
you can change the order and actually

510
00:20:59,840 --> 00:21:01,600
improve your speed

511
00:21:01,600 --> 00:21:03,679
in previous version of the rule i was

512
00:21:03,679 --> 00:21:06,080
calculated entropy first and then i

513
00:21:06,080 --> 00:21:08,640
checked the first like

514
00:21:08,640 --> 00:21:10,880
bytes of the file

515
00:21:10,880 --> 00:21:13,760
entropy as you probably know is quite

516
00:21:13,760 --> 00:21:18,080
expensive operation so if i switch the

517
00:21:18,080 --> 00:21:21,120
the condition and the order of this

518
00:21:21,120 --> 00:21:23,520
the speed will also increase because

519
00:21:23,520 --> 00:21:26,000
it's very simple to check first bytes

520
00:21:26,000 --> 00:21:28,320
versus to calculate entropy of the file

521
00:21:28,320 --> 00:21:29,360
size

522
00:21:29,360 --> 00:21:33,039
what is also nice is the last point here

523
00:21:33,039 --> 00:21:33,840
uh

524
00:21:33,840 --> 00:21:37,039
jara has integer loop optimization

525
00:21:37,039 --> 00:21:39,360
which means that if you are using for

526
00:21:39,360 --> 00:21:41,520
off or for any

527
00:21:41,520 --> 00:21:42,880
first case

528
00:21:42,880 --> 00:21:44,480
that breaks

529
00:21:44,480 --> 00:21:46,400
the condition

530
00:21:46,400 --> 00:21:49,200
in in case for all its first like

531
00:21:49,200 --> 00:21:50,640
false

532
00:21:50,640 --> 00:21:52,400
false

533
00:21:52,400 --> 00:21:56,000
expression in case for for any it's true

534
00:21:56,000 --> 00:21:59,039
expression the loop will stop it writing

535
00:21:59,039 --> 00:22:02,159
so this is basically work done

536
00:22:02,159 --> 00:22:04,480
for you by era

537
00:22:04,480 --> 00:22:07,520
now we have a little bit modify a rule

538
00:22:07,520 --> 00:22:08,720
uh here

539
00:22:08,720 --> 00:22:11,280
we are not longer using no case but we

540
00:22:11,280 --> 00:22:13,600
are specific that we

541
00:22:13,600 --> 00:22:15,600
have regular expression just with one

542
00:22:15,600 --> 00:22:16,559
class

543
00:22:16,559 --> 00:22:20,240
where c can be both upper and lower case

544
00:22:20,240 --> 00:22:21,280
uh we

545
00:22:21,280 --> 00:22:23,360
also play it a little bit with regular

546
00:22:23,360 --> 00:22:25,520
expression again this is not like

547
00:22:25,520 --> 00:22:27,360
general solution

548
00:22:27,360 --> 00:22:30,400
but if you try for example on your data

549
00:22:30,400 --> 00:22:32,480
set or your examples

550
00:22:32,480 --> 00:22:33,919
to find

551
00:22:33,919 --> 00:22:34,880
some

552
00:22:34,880 --> 00:22:37,200
more specific strength that still works

553
00:22:37,200 --> 00:22:38,720
for you

554
00:22:38,720 --> 00:22:41,840
the better and i changed the order in

555
00:22:41,840 --> 00:22:45,840
condition so the the bytes

556
00:22:45,840 --> 00:22:47,520
at the beginning of file are checked

557
00:22:47,520 --> 00:22:49,919
first and the result

558
00:22:49,919 --> 00:22:50,799
we

559
00:22:50,799 --> 00:22:52,400
can now scan

560
00:22:52,400 --> 00:22:56,240
all the data just in three seconds so

561
00:22:56,240 --> 00:22:59,039
i'm not sure if you remember firstly we

562
00:22:59,039 --> 00:23:02,400
it took uh 45 minutes and now we only

563
00:23:02,400 --> 00:23:04,320
need three seconds which is i think

564
00:23:04,320 --> 00:23:06,799
quite good right

565
00:23:06,799 --> 00:23:08,960
additional tips i will be very quick

566
00:23:08,960 --> 00:23:10,880
because i'm running on the time

567
00:23:10,880 --> 00:23:12,080
uh

568
00:23:12,080 --> 00:23:14,320
one i think i would say it's really

569
00:23:14,320 --> 00:23:17,360
great uh yara has now option

570
00:23:17,360 --> 00:23:22,080
skip larger which is it's said that

571
00:23:22,080 --> 00:23:25,679
files on over some size will be skipped

572
00:23:25,679 --> 00:23:28,080
entirely which also can drastically

573
00:23:28,080 --> 00:23:30,960
improve your scanning so check it out i

574
00:23:30,960 --> 00:23:33,440
have some more resources here of course

575
00:23:33,440 --> 00:23:36,880
github pages documentation maybe you

576
00:23:36,880 --> 00:23:39,039
know

577
00:23:39,039 --> 00:23:41,760
florian wrote we worked together a

578
00:23:41,760 --> 00:23:43,520
little bit uh

579
00:23:43,520 --> 00:23:46,480
on guidelines how to improve your rules

580
00:23:46,480 --> 00:23:49,039
so check it out and also if you are

581
00:23:49,039 --> 00:23:50,559
using era

582
00:23:50,559 --> 00:23:53,760
i would strongly recommend to

583
00:23:53,760 --> 00:23:55,600
use key base

584
00:23:55,600 --> 00:23:58,400
channel yara friends where you can

585
00:23:58,400 --> 00:24:01,200
discuss possible improvements into

586
00:24:01,200 --> 00:24:04,000
future versions and generally ask for

587
00:24:04,000 --> 00:24:05,279
help

588
00:24:05,279 --> 00:24:07,840
in some specific cases

589
00:24:07,840 --> 00:24:10,080
just very quickly

590
00:24:10,080 --> 00:24:12,159
our changes because i

591
00:24:12,159 --> 00:24:14,159
speak a little bit longer than i

592
00:24:14,159 --> 00:24:15,840
expected

593
00:24:15,840 --> 00:24:17,520
motivation

594
00:24:17,520 --> 00:24:18,720
we again

595
00:24:18,720 --> 00:24:21,360
work with warning slowing down scanning

596
00:24:21,360 --> 00:24:24,000
it's really really everywhere and we

597
00:24:24,000 --> 00:24:25,440
wanted to

598
00:24:25,440 --> 00:24:26,799
basically

599
00:24:26,799 --> 00:24:29,760
match bitcoin addresses which are yes

600
00:24:29,760 --> 00:24:31,919
regular expression but it's very

601
00:24:31,919 --> 00:24:36,320
specific format so we try to find a way

602
00:24:36,320 --> 00:24:38,000
how to work with it

603
00:24:38,000 --> 00:24:40,400
i propose the solution that changes

604
00:24:40,400 --> 00:24:42,240
basically every step

605
00:24:42,240 --> 00:24:45,039
of the static evaluation

606
00:24:45,039 --> 00:24:47,279
i would recommend check my paper that i

607
00:24:47,279 --> 00:24:49,919
wrote with my colleagues uh just some

608
00:24:49,919 --> 00:24:52,640
highlights the bitcoin addresses in our

609
00:24:52,640 --> 00:24:56,080
version are 10 times faster than in

610
00:24:56,080 --> 00:24:58,640
upstream version and scanning with no

611
00:24:58,640 --> 00:25:01,440
case option is about

612
00:25:01,440 --> 00:25:05,200
27 percent faster

613
00:25:05,200 --> 00:25:07,919
i'm not going into details

614
00:25:07,919 --> 00:25:10,400
i don't want to give you headache but

615
00:25:10,400 --> 00:25:13,279
you can read the paper i'm saying and

616
00:25:13,279 --> 00:25:15,600
there's more uh avast is very active in

617
00:25:15,600 --> 00:25:18,000
your community so we are posting bug

618
00:25:18,000 --> 00:25:22,320
fixes our new like additional functions

619
00:25:22,320 --> 00:25:24,799
and etc so you can actually watch our

620
00:25:24,799 --> 00:25:27,520
twitter and you can see like many many

621
00:25:27,520 --> 00:25:31,120
many changes and in the future we are

622
00:25:31,120 --> 00:25:32,159
planning

623
00:25:32,159 --> 00:25:33,919
more

624
00:25:33,919 --> 00:25:36,960
other resources my paper and also i have

625
00:25:36,960 --> 00:25:40,400
to request in upstream i promise i will

626
00:25:40,400 --> 00:25:42,880
update it soon because it started like

627
00:25:42,880 --> 00:25:44,080
tons of

628
00:25:44,080 --> 00:25:46,240
match conflicts and etc

629
00:25:46,240 --> 00:25:48,320
i hoped i will

630
00:25:48,320 --> 00:25:52,400
done it before this conference but like

631
00:25:52,400 --> 00:25:54,480
you probably know like to the list is

632
00:25:54,480 --> 00:25:55,520
too long

633
00:25:55,520 --> 00:25:59,919
and etc so i will update it soon and

634
00:25:59,919 --> 00:26:02,000
for conclusion you can follow me on

635
00:26:02,000 --> 00:26:04,400
twitter and link it

636
00:26:04,400 --> 00:26:07,120
in next like uh

637
00:26:07,120 --> 00:26:09,840
years or months

638
00:26:09,840 --> 00:26:12,159
dealing now with more like behavioral

639
00:26:12,159 --> 00:26:13,679
analysis

640
00:26:13,679 --> 00:26:15,840
under my teeth generation of yara rules

641
00:26:15,840 --> 00:26:18,320
and i'm also working with google modules

642
00:26:18,320 --> 00:26:19,840
so you can

643
00:26:19,840 --> 00:26:21,360
look forward to it

644
00:26:21,360 --> 00:26:24,400
and if you have any question please

645
00:26:24,400 --> 00:26:28,080
ask them now or later for example during

646
00:26:28,080 --> 00:26:29,520
the lunch

647
00:26:29,520 --> 00:26:32,000
thank you very much for

648
00:26:32,000 --> 00:26:34,320
your time

649
00:26:34,320 --> 00:26:36,720
thank you

650
00:26:39,600 --> 00:26:41,440
thank you dominica

651
00:26:41,440 --> 00:26:47,080
any questions any year anna's yes

652
00:26:53,039 --> 00:26:54,880
thank you for the presentation um i'm

653
00:26:54,880 --> 00:26:57,360
also a yara contributor so from time to

654
00:26:57,360 --> 00:26:59,279
time great for you

655
00:26:59,279 --> 00:27:02,400
there for us everyone

656
00:27:02,400 --> 00:27:05,360
slide 14 i had a question

657
00:27:05,360 --> 00:27:08,320
if you can go back

658
00:27:09,440 --> 00:27:10,640
if you

659
00:27:10,640 --> 00:27:13,840
take the condition on second line

660
00:27:13,840 --> 00:27:16,400
to check the first byte if you

661
00:27:16,400 --> 00:27:19,279
push it up before the strings evaluation

662
00:27:19,279 --> 00:27:20,799
does it change anything

663
00:27:20,799 --> 00:27:23,039
no unfortunately no this is actually

664
00:27:23,039 --> 00:27:25,279
like the the line here

665
00:27:25,279 --> 00:27:27,840
uh the strings are checked first and

666
00:27:27,840 --> 00:27:30,000
then here i will search okay what the

667
00:27:30,000 --> 00:27:31,600
condition actually is

668
00:27:31,600 --> 00:27:36,158
okay thank you i wasn't sure okay

669
00:27:43,360 --> 00:27:46,840
there's a yara test before the gala

670
00:27:46,840 --> 00:27:49,919
tonight i was looking at the net module

671
00:27:49,919 --> 00:27:52,399
recently and uh wondering quite whether

672
00:27:52,399 --> 00:27:55,360
evaluating some of the um

673
00:27:55,360 --> 00:27:57,440
parameters you can extract with that is

674
00:27:57,440 --> 00:27:58,480
slow

675
00:27:58,480 --> 00:28:00,399
or whether it's uh um

676
00:28:00,399 --> 00:28:02,799
well do you think about it

677
00:28:02,799 --> 00:28:06,000
yeah yeah i understand they're actually

678
00:28:06,000 --> 00:28:08,000
the thing about modules they are very

679
00:28:08,000 --> 00:28:11,440
useful but as you said in most cases

680
00:28:11,440 --> 00:28:14,320
they are very slow uh my colleagues are

681
00:28:14,320 --> 00:28:17,360
working on the on that module and we are

682
00:28:17,360 --> 00:28:20,240
trying to improve it uh

683
00:28:20,240 --> 00:28:22,240
my specifically i'm working on cuckoo

684
00:28:22,240 --> 00:28:25,039
module which is also quite slow

685
00:28:25,039 --> 00:28:26,559
so in the future

686
00:28:26,559 --> 00:28:29,039
i i cannot promise you but

687
00:28:29,039 --> 00:28:32,240
hopefully it will be better but yes but

688
00:28:32,240 --> 00:28:33,200
also

689
00:28:33,200 --> 00:28:35,840
i would ask if you have some problem

690
00:28:35,840 --> 00:28:38,640
with yara and you want to improve some

691
00:28:38,640 --> 00:28:40,480
some stuff

692
00:28:40,480 --> 00:28:43,120
a contribute that's the best option or

693
00:28:43,120 --> 00:28:46,799
at least be asked for it because the

694
00:28:46,799 --> 00:28:49,279
main entrance are very active but also

695
00:28:49,279 --> 00:28:52,000
very busy people and if you will push it

696
00:28:52,000 --> 00:28:54,559
like hey i really need this they will

697
00:28:54,559 --> 00:28:56,640
make time for it and maybe in next

698
00:28:56,640 --> 00:29:00,320
version it will be solved so please be

699
00:29:00,320 --> 00:29:04,559
active it's very helpful for everyone

700
00:29:06,399 --> 00:29:10,760
thank you another question

701
00:29:12,640 --> 00:29:15,600
up there yeah

702
00:29:19,039 --> 00:29:22,159
uh i have a question about the strings

703
00:29:22,159 --> 00:29:24,720
which are evaluated first

704
00:29:24,720 --> 00:29:27,279
is this a scheduled improvement to

705
00:29:27,279 --> 00:29:29,840
evaluate the things in the order of the

706
00:29:29,840 --> 00:29:31,279
condition

707
00:29:31,279 --> 00:29:32,159
i mean

708
00:29:32,159 --> 00:29:35,440
the person writing the yara rule

709
00:29:35,440 --> 00:29:38,159
would know the

710
00:29:38,159 --> 00:29:40,720
the expected uh things that would be

711
00:29:40,720 --> 00:29:43,279
slow or fast and make the condition in

712
00:29:43,279 --> 00:29:45,760
the right exactly yeah yeah we are

713
00:29:45,760 --> 00:29:48,000
actually discussing this with virus

714
00:29:48,000 --> 00:29:51,120
total uh to be honest they have some

715
00:29:51,120 --> 00:29:55,360
reason why they implemented it this way

716
00:29:55,360 --> 00:29:58,399
they need uh some specific features in

717
00:29:58,399 --> 00:30:00,240
various total like

718
00:30:00,240 --> 00:30:01,760
their platform

719
00:30:01,760 --> 00:30:03,679
where they're scanning like

720
00:30:03,679 --> 00:30:06,880
unbelievably large amounts of data but

721
00:30:06,880 --> 00:30:08,960
for us uh

722
00:30:08,960 --> 00:30:11,120
is not always the best solution so we

723
00:30:11,120 --> 00:30:13,679
are trying to find the middle ground and

724
00:30:13,679 --> 00:30:16,320
yes this is uh one topic we are

725
00:30:16,320 --> 00:30:18,399
actually discussing with them so maybe

726
00:30:18,399 --> 00:30:20,399
in the future there will be some option

727
00:30:20,399 --> 00:30:23,559
for that

728
00:30:24,720 --> 00:30:28,559
okay a last question over there

729
00:30:31,600 --> 00:30:35,000
morning jogging

730
00:30:38,480 --> 00:30:40,720
hi thanks for the talk a quick question

731
00:30:40,720 --> 00:30:42,320
did you evaluate the

732
00:30:42,320 --> 00:30:45,039
performance of the new modifiers such as

733
00:30:45,039 --> 00:30:48,640
base64 or xor modifiers for the strings

734
00:30:48,640 --> 00:30:51,440
yeah we are working with them as well

735
00:30:51,440 --> 00:30:53,919
i just didn't want to complicate the

736
00:30:53,919 --> 00:30:57,360
presentation even more

737
00:30:57,600 --> 00:31:00,159
i would say in generally

738
00:31:00,159 --> 00:31:02,640
be careful with them because they were

739
00:31:02,640 --> 00:31:04,880
also discussing

740
00:31:04,880 --> 00:31:06,720
how many things you can match with them

741
00:31:06,720 --> 00:31:07,840
and

742
00:31:07,840 --> 00:31:08,640
the

743
00:31:08,640 --> 00:31:10,799
main object of these new features

744
00:31:10,799 --> 00:31:11,919
obviously

745
00:31:11,919 --> 00:31:16,080
he also was quite worried that

746
00:31:16,080 --> 00:31:17,760
two general

747
00:31:17,760 --> 00:31:21,360
would actually really slow down error so

748
00:31:21,360 --> 00:31:22,159
yes

749
00:31:22,159 --> 00:31:24,480
use them if necessary but be careful

750
00:31:24,480 --> 00:31:27,519
about them because they will generate

751
00:31:27,519 --> 00:31:28,880
many like

752
00:31:28,880 --> 00:31:32,399
options that ya is searching for and

753
00:31:32,399 --> 00:31:34,880
this is again this can be really really

754
00:31:34,880 --> 00:31:36,000
slow

755
00:31:36,000 --> 00:31:38,080
thank you

756
00:31:38,080 --> 00:31:40,080
okay thank you very much

757
00:31:40,080 --> 00:31:44,279
thank you have a nice day

758
00:31:47,200 --> 00:31:49,760
thank you

