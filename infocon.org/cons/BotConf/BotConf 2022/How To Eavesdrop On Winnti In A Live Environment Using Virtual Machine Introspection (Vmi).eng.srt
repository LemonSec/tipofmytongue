1
00:00:00,880 --> 00:00:04,400
now philip and sebastian are monitoring

2
00:00:04,400 --> 00:00:06,080
uh

3
00:00:06,080 --> 00:00:09,120
windy uh and you have the floor thank

4
00:00:09,120 --> 00:00:10,320
you

5
00:00:10,320 --> 00:00:11,920
okay

6
00:00:11,920 --> 00:00:14,080
so um hello everyone and thank you for

7
00:00:14,080 --> 00:00:15,599
attending our talk

8
00:00:15,599 --> 00:00:17,600
about how to eavesdrop on vinti in a

9
00:00:17,600 --> 00:00:19,039
live environment

10
00:00:19,039 --> 00:00:21,119
using virtual machine introspection i am

11
00:00:21,119 --> 00:00:22,880
the best an item next to me is for the

12
00:00:22,880 --> 00:00:24,080
bottle

13
00:00:24,080 --> 00:00:24,880
and

14
00:00:24,880 --> 00:00:26,560
we will start with

15
00:00:26,560 --> 00:00:27,760
looking

16
00:00:27,760 --> 00:00:30,880
on at our motivation and our goals for

17
00:00:30,880 --> 00:00:32,399
this project

18
00:00:32,399 --> 00:00:33,280
so

19
00:00:33,280 --> 00:00:35,200
we at cyber's technology

20
00:00:35,200 --> 00:00:36,719
developed

21
00:00:36,719 --> 00:00:39,440
a malware analysis tool called tyco and

22
00:00:39,440 --> 00:00:41,760
we wanted to see whether this tool

23
00:00:41,760 --> 00:00:44,480
is really capable of analyzing real

24
00:00:44,480 --> 00:00:45,360
world

25
00:00:45,360 --> 00:00:47,120
area

26
00:00:47,120 --> 00:00:51,199
so as an example we chose windy because

27
00:00:51,199 --> 00:00:53,760
it has been around for a long time so it

28
00:00:53,760 --> 00:00:55,199
is

29
00:00:55,199 --> 00:00:58,640
it is well researched and it is really

30
00:00:58,640 --> 00:01:00,960
successful when it comes to attacking

31
00:01:00,960 --> 00:01:01,840
big

32
00:01:01,840 --> 00:01:03,680
big corporations

33
00:01:03,680 --> 00:01:06,560
and so the goals for this project were

34
00:01:06,560 --> 00:01:09,040
to detect an infection with windy we

35
00:01:09,040 --> 00:01:11,920
wanted to eavesdrop on the malware and

36
00:01:11,920 --> 00:01:14,240
remaining completely staff while doing

37
00:01:14,240 --> 00:01:15,280
that

38
00:01:15,280 --> 00:01:17,119
and for that we wrote the windy

39
00:01:17,119 --> 00:01:19,360
detective

40
00:01:19,360 --> 00:01:22,240
so today i will start off with

41
00:01:22,240 --> 00:01:24,880
introducing ourselves and cyborgs

42
00:01:24,880 --> 00:01:26,799
then i will talk about virtual machine

43
00:01:26,799 --> 00:01:29,600
introspection and after that philip will

44
00:01:29,600 --> 00:01:31,439
talk about vindy and the windy

45
00:01:31,439 --> 00:01:33,920
detectives

46
00:01:33,920 --> 00:01:36,880
okay okay at first about cyborgs so

47
00:01:36,880 --> 00:01:38,960
cybos is a small and rather young

48
00:01:38,960 --> 00:01:42,479
company it was founded in 2017 and has

49
00:01:42,479 --> 00:01:44,960
about 25 employees now

50
00:01:44,960 --> 00:01:47,200
and cyborgs is specialized in

51
00:01:47,200 --> 00:01:49,520
virtualization technology and secure

52
00:01:49,520 --> 00:01:51,119
workstations

53
00:01:51,119 --> 00:01:53,280
and just as a side note maybe if you

54
00:01:53,280 --> 00:01:55,680
heard about cyrus before we were

55
00:01:55,680 --> 00:01:57,600
involved in the discovery of the marital

56
00:01:57,600 --> 00:02:00,399
inspector cpu vulnerabilities

57
00:02:00,399 --> 00:02:02,960
so if you heard about us

58
00:02:02,960 --> 00:02:04,640
it was most likely in connection with

59
00:02:04,640 --> 00:02:08,160
those two vulnerabilities

60
00:02:08,160 --> 00:02:10,399
okay philip is a student employee at

61
00:02:10,399 --> 00:02:11,599
cyberos

62
00:02:11,599 --> 00:02:13,360
he studies cyber crime and cyber

63
00:02:13,360 --> 00:02:16,160
security with a focus on malware and he

64
00:02:16,160 --> 00:02:18,720
worked on on vending analysis and on

65
00:02:18,720 --> 00:02:22,560
this project for six months

66
00:02:22,560 --> 00:02:24,640
i finished studying

67
00:02:24,640 --> 00:02:27,599
computer science about two months ago

68
00:02:27,599 --> 00:02:29,520
and i was

69
00:02:29,520 --> 00:02:31,680
specialized on operating systems and

70
00:02:31,680 --> 00:02:33,680
virtualization technology

71
00:02:33,680 --> 00:02:36,879
and after studying i joined cyprus full

72
00:02:36,879 --> 00:02:38,239
time

73
00:02:38,239 --> 00:02:39,920
and the other two guys that worked on

74
00:02:39,920 --> 00:02:42,560
this project were the best 10 months he

75
00:02:42,560 --> 00:02:44,560
also studies cyber crime and cyber

76
00:02:44,560 --> 00:02:46,959
security and donor house he is one of

77
00:02:46,959 --> 00:02:49,760
the founders of cyber technology and he

78
00:02:49,760 --> 00:02:51,840
guided us in

79
00:02:51,840 --> 00:02:54,720
in building the windy detective and in

80
00:02:54,720 --> 00:02:57,200
this whole project

81
00:02:57,200 --> 00:02:59,360
so let's talk about virtual machine

82
00:02:59,360 --> 00:03:02,159
introspection

83
00:03:02,400 --> 00:03:04,319
a butcher machine introspection system

84
00:03:04,319 --> 00:03:06,800
is a category of intrusion detection

85
00:03:06,800 --> 00:03:09,440
system that means the the systems

86
00:03:09,440 --> 00:03:11,040
collect sensor information from

87
00:03:11,040 --> 00:03:13,200
different sources and they use those

88
00:03:13,200 --> 00:03:15,280
information to detect neighbor

89
00:03:15,280 --> 00:03:20,239
signatures or identify abnormal behavior

90
00:03:23,040 --> 00:03:25,760
there are two main categories of

91
00:03:25,760 --> 00:03:27,680
intrusion detection systems the

92
00:03:27,680 --> 00:03:30,159
host-based ids

93
00:03:30,159 --> 00:03:31,920
is a system where the intrusion

94
00:03:31,920 --> 00:03:34,080
detection mechanism resides on the same

95
00:03:34,080 --> 00:03:36,319
system they are designed to protect this

96
00:03:36,319 --> 00:03:38,560
means they have a high visibility so

97
00:03:38,560 --> 00:03:40,159
they can monitor

98
00:03:40,159 --> 00:03:43,200
events on the system and they can

99
00:03:43,200 --> 00:03:45,599
so they can look into the system very

100
00:03:45,599 --> 00:03:48,400
well but they have a low resistance

101
00:03:48,400 --> 00:03:50,480
because malware or attackers can corrupt

102
00:03:50,480 --> 00:03:53,120
the intrusion detection mechanism

103
00:03:53,120 --> 00:03:56,000
which renders the mechanism useless

104
00:03:56,000 --> 00:03:58,080
and a network-based intuition detection

105
00:03:58,080 --> 00:03:59,439
system

106
00:03:59,439 --> 00:04:01,920
pulls this intuition detection mechanism

107
00:04:01,920 --> 00:04:04,480
out of the of the victim pc

108
00:04:04,480 --> 00:04:06,239
and this increases

109
00:04:06,239 --> 00:04:07,280
the

110
00:04:07,280 --> 00:04:10,959
resistance but lowers the visibility

111
00:04:10,959 --> 00:04:12,239
and with

112
00:04:12,239 --> 00:04:13,760
virtual machine introspection you can

113
00:04:13,760 --> 00:04:16,399
get the best of both worlds so you have

114
00:04:16,399 --> 00:04:19,279
the visibility of an host-based ids and

115
00:04:19,279 --> 00:04:22,000
the resistance of a network-based ids

116
00:04:22,000 --> 00:04:26,000
and now i will show you how this works

117
00:04:26,000 --> 00:04:28,160
so this is how your system looks

118
00:04:28,160 --> 00:04:30,639
normally you have your hardware so your

119
00:04:30,639 --> 00:04:33,680
laptop or something and on this one's

120
00:04:33,680 --> 00:04:35,600
your operating system so you have an

121
00:04:35,600 --> 00:04:38,000
operating system kernel and some user

122
00:04:38,000 --> 00:04:40,880
applications that run in user space

123
00:04:40,880 --> 00:04:43,680
and virtualization adds a layer between

124
00:04:43,680 --> 00:04:45,520
between your hardware and your virtual

125
00:04:45,520 --> 00:04:47,199
or your operating system which then

126
00:04:47,199 --> 00:04:49,040
becomes a virtual machine

127
00:04:49,040 --> 00:04:49,919
and

128
00:04:49,919 --> 00:04:51,919
in this virtualization layer you find

129
00:04:51,919 --> 00:04:53,840
the hypervisor and the virtual machine

130
00:04:53,840 --> 00:04:55,280
monitor

131
00:04:55,280 --> 00:04:58,080
when you read about virtualization or

132
00:04:58,080 --> 00:04:59,680
when you hear about virtualization you

133
00:04:59,680 --> 00:05:02,000
will often only hear the hypervisor or

134
00:05:02,000 --> 00:05:03,759
the virtual machine monitor

135
00:05:03,759 --> 00:05:06,320
but because of the architecture of our

136
00:05:06,320 --> 00:05:08,479
virtualization layer we at cyber was

137
00:05:08,479 --> 00:05:10,080
distinguished between between the

138
00:05:10,080 --> 00:05:11,840
hypervisor and the virtual machine

139
00:05:11,840 --> 00:05:13,759
monitor

140
00:05:13,759 --> 00:05:16,080
so now we are in a spot between the

141
00:05:16,080 --> 00:05:17,919
hardware and the operating system and

142
00:05:17,919 --> 00:05:20,400
this is a really powerful spot

143
00:05:20,400 --> 00:05:23,440
because on the one hand we can control

144
00:05:23,440 --> 00:05:25,280
and inspect the hardware so on the left

145
00:05:25,280 --> 00:05:27,039
hand side you can see we can read

146
00:05:27,039 --> 00:05:30,240
arbitrary memory addresses and we can

147
00:05:30,240 --> 00:05:31,199
also

148
00:05:31,199 --> 00:05:33,840
monitor events from the from the virtual

149
00:05:33,840 --> 00:05:34,880
machine

150
00:05:34,880 --> 00:05:36,400
for example when the virtual machine

151
00:05:36,400 --> 00:05:38,639
does in system systemcoil we can look

152
00:05:38,639 --> 00:05:41,360
into the cpu registers and read those

153
00:05:41,360 --> 00:05:43,199
values

154
00:05:43,199 --> 00:05:45,039
but as you can see

155
00:05:45,039 --> 00:05:46,080
so

156
00:05:46,080 --> 00:05:48,800
being able to read bits and bytes is is

157
00:05:48,800 --> 00:05:52,320
nice but it doesn't it isn't too helpful

158
00:05:52,320 --> 00:05:54,960
because you have to make sense of these

159
00:05:54,960 --> 00:05:56,240
information

160
00:05:56,240 --> 00:05:58,400
and this data between those bits and

161
00:05:58,400 --> 00:06:00,240
bytes that you can read and the

162
00:06:00,240 --> 00:06:02,560
information or the interpretation of

163
00:06:02,560 --> 00:06:05,120
those bits and bytes is a semantic gap

164
00:06:05,120 --> 00:06:07,520
and to bridge this semantic app you have

165
00:06:07,520 --> 00:06:08,639
to

166
00:06:08,639 --> 00:06:10,400
give your virtualization layer some

167
00:06:10,400 --> 00:06:12,960
information about the virtual machine

168
00:06:12,960 --> 00:06:15,199
so if we now turn the virtualization

169
00:06:15,199 --> 00:06:17,280
layer this is a windows machine and we

170
00:06:17,280 --> 00:06:19,280
give them the data structures and

171
00:06:19,280 --> 00:06:22,000
offsets of some kernel structures

172
00:06:22,000 --> 00:06:24,160
or the information in the signatures of

173
00:06:24,160 --> 00:06:25,759
the system called

174
00:06:25,759 --> 00:06:27,199
the virtualization layer can

175
00:06:27,199 --> 00:06:29,199
interoperate those information

176
00:06:29,199 --> 00:06:31,600
and now we can see okay this is an

177
00:06:31,600 --> 00:06:34,160
e-process data structure and this is an

178
00:06:34,160 --> 00:06:35,840
anti-create process

179
00:06:35,840 --> 00:06:37,360
system call

180
00:06:37,360 --> 00:06:39,120
so here you can see we have the

181
00:06:39,120 --> 00:06:41,199
visibility of a host-based intrusion

182
00:06:41,199 --> 00:06:43,600
detection system because we can

183
00:06:43,600 --> 00:06:46,080
basically see everything but we pulled

184
00:06:46,080 --> 00:06:48,479
the intrusion detection mechanism out of

185
00:06:48,479 --> 00:06:49,919
the virtual machine

186
00:06:49,919 --> 00:06:52,400
so we increase the resistance and now we

187
00:06:52,400 --> 00:06:54,080
have the resistance of the network-based

188
00:06:54,080 --> 00:06:56,880
intuition detection system

189
00:06:56,880 --> 00:06:59,440
and tyco can do all that

190
00:06:59,440 --> 00:07:03,599
so this is a setup of uh so this is a

191
00:07:03,599 --> 00:07:05,919
normal tycoon setup so on the left hand

192
00:07:05,919 --> 00:07:08,720
side you can see um a small computer

193
00:07:08,720 --> 00:07:12,720
this is a victim pc on this pc we reboot

194
00:07:12,720 --> 00:07:15,280
our virtualization stack and on top of

195
00:07:15,280 --> 00:07:19,520
that and affected in infected windows

196
00:07:19,520 --> 00:07:22,000
and this pc is connected to the analyst

197
00:07:22,000 --> 00:07:25,199
pc via serial in this case it's serial

198
00:07:25,199 --> 00:07:28,479
overland and then the analyst can use a

199
00:07:28,479 --> 00:07:31,120
python api to

200
00:07:31,120 --> 00:07:34,160
connect to tyco and to program taiko and

201
00:07:34,160 --> 00:07:36,240
send commands to taiko

202
00:07:36,240 --> 00:07:37,280
and

203
00:07:37,280 --> 00:07:38,720
yeah so

204
00:07:38,720 --> 00:07:41,360
some of those

205
00:07:41,360 --> 00:07:43,520
commands for taigo

206
00:07:43,520 --> 00:07:45,759
for example we can attach to a process

207
00:07:45,759 --> 00:07:48,319
so here we tell taiko to attach to a

208
00:07:48,319 --> 00:07:50,560
kayak.exe process

209
00:07:50,560 --> 00:07:51,599
and then

210
00:07:51,599 --> 00:07:54,319
when when tycho finds this process or

211
00:07:54,319 --> 00:07:56,800
tycho waits until this process starts

212
00:07:56,800 --> 00:07:58,639
and now we get an object and with this

213
00:07:58,639 --> 00:08:02,160
object we can do all sorts of things

214
00:08:02,160 --> 00:08:04,479
for example we can manipulate this

215
00:08:04,479 --> 00:08:07,280
process so we can stop processes we can

216
00:08:07,280 --> 00:08:09,039
resume them later

217
00:08:09,039 --> 00:08:11,440
and we can inspect those processes for

218
00:08:11,440 --> 00:08:14,160
example we can read the linear also the

219
00:08:14,160 --> 00:08:17,039
memory in this process

220
00:08:17,039 --> 00:08:19,440
and another thing that tycho can do as i

221
00:08:19,440 --> 00:08:20,240
said

222
00:08:20,240 --> 00:08:21,280
we can

223
00:08:21,280 --> 00:08:23,759
so we can use system called breakpoints

224
00:08:23,759 --> 00:08:26,639
so for example we can tell tycho to stop

225
00:08:26,639 --> 00:08:28,879
a process when it does for example an

226
00:08:28,879 --> 00:08:31,520
antiquate process or an antiquate file

227
00:08:31,520 --> 00:08:32,880
system call

228
00:08:32,880 --> 00:08:35,360
and then tycho can interpret those

229
00:08:35,360 --> 00:08:37,919
system calls for us so we can

230
00:08:37,919 --> 00:08:40,799
see the addresses of the buffers the the

231
00:08:40,799 --> 00:08:42,479
system call users

232
00:08:42,479 --> 00:08:44,720
and stuff like that

233
00:08:44,720 --> 00:08:47,360
so um yeah taiko as you can see is a

234
00:08:47,360 --> 00:08:48,880
really powerful

235
00:08:48,880 --> 00:08:49,680
um

236
00:08:49,680 --> 00:08:52,320
tool and now philip will tell you

237
00:08:52,320 --> 00:08:54,399
something about vinti and how we use

238
00:08:54,399 --> 00:08:55,440
tyco

239
00:08:55,440 --> 00:08:56,240
to

240
00:08:56,240 --> 00:08:59,920
to eavesdrop on windy

241
00:09:01,120 --> 00:09:04,399
yes right so first we are going to talk

242
00:09:04,399 --> 00:09:06,880
a little bit about what windy and the

243
00:09:06,880 --> 00:09:09,279
threat actors behind that group actually

244
00:09:09,279 --> 00:09:12,480
is they're presumably a state-sponsored

245
00:09:12,480 --> 00:09:14,880
chinese threat actor as i said and they

246
00:09:14,880 --> 00:09:16,800
have been deploying their remote access

247
00:09:16,800 --> 00:09:19,839
to also called winty

248
00:09:19,839 --> 00:09:21,920
according to asset security they have

249
00:09:21,920 --> 00:09:24,399
been around since

250
00:09:24,399 --> 00:09:27,040
at least 2012 and they are still going

251
00:09:27,040 --> 00:09:29,120
strong today

252
00:09:29,120 --> 00:09:31,839
deploying newer generations of this

253
00:09:31,839 --> 00:09:37,080
remote access trojan by now obviously

254
00:09:37,120 --> 00:09:38,399
if you

255
00:09:38,399 --> 00:09:40,480
take a look at the path

256
00:09:40,480 --> 00:09:42,320
of the malware

257
00:09:42,320 --> 00:09:44,959
and which companies have been targeted

258
00:09:44,959 --> 00:09:46,640
you can see that there are

259
00:09:46,640 --> 00:09:49,519
some very big companies in there siemens

260
00:09:49,519 --> 00:09:51,760
and thurston group buyer brsf for

261
00:09:51,760 --> 00:09:53,040
example

262
00:09:53,040 --> 00:09:54,560
and

263
00:09:54,560 --> 00:09:57,040
i found a very nice quote from a german

264
00:09:57,040 --> 00:10:00,000
public television

265
00:10:00,160 --> 00:10:02,240
article where they they interviewed an

266
00:10:02,240 --> 00:10:04,640
i.t security expert who said any dax

267
00:10:04,640 --> 00:10:06,399
corporation that hasn't been attacked by

268
00:10:06,399 --> 00:10:08,720
windy must have done something wrong

269
00:10:08,720 --> 00:10:09,680
so

270
00:10:09,680 --> 00:10:12,560
you can see they they really

271
00:10:12,560 --> 00:10:17,360
focused on espionage in this case

272
00:10:17,360 --> 00:10:19,600
but that's enough for windy in general

273
00:10:19,600 --> 00:10:21,440
let's talk about how it works so that

274
00:10:21,440 --> 00:10:23,519
you can later understand the approach

275
00:10:23,519 --> 00:10:24,640
that we took

276
00:10:24,640 --> 00:10:26,800
in this picture you can see in the top

277
00:10:26,800 --> 00:10:28,720
left

278
00:10:28,720 --> 00:10:30,640
that's the attacker the command control

279
00:10:30,640 --> 00:10:33,200
server which is communicating

280
00:10:33,200 --> 00:10:34,480
to the

281
00:10:34,480 --> 00:10:36,800
infected host machine

282
00:10:36,800 --> 00:10:39,519
obviously over the internet down here we

283
00:10:39,519 --> 00:10:42,560
have a very simplified look at a fully

284
00:10:42,560 --> 00:10:45,200
deployed windy on the machine

285
00:10:45,200 --> 00:10:49,040
um as is the infected host

286
00:10:49,040 --> 00:10:50,560
winter consists

287
00:10:50,560 --> 00:10:52,959
in two components on the machine a

288
00:10:52,959 --> 00:10:55,040
driver and a worker component

289
00:10:55,040 --> 00:10:57,519
communicating over

290
00:10:57,519 --> 00:10:59,519
or via that

291
00:10:59,519 --> 00:11:00,640
a

292
00:11:00,640 --> 00:11:02,480
memory region here

293
00:11:02,480 --> 00:11:04,640
the sole purpose of the driver component

294
00:11:04,640 --> 00:11:06,399
is to establish communication with the

295
00:11:06,399 --> 00:11:09,200
commander control server it does that by

296
00:11:09,200 --> 00:11:12,000
intercepting incoming tcp traffic and

297
00:11:12,000 --> 00:11:14,240
looking for a windy specific magic

298
00:11:14,240 --> 00:11:16,720
string in the header and once it finds

299
00:11:16,720 --> 00:11:19,680
this it will place the incoming and

300
00:11:19,680 --> 00:11:22,880
encrypted package into the memory

301
00:11:22,880 --> 00:11:25,279
for the worker to find

302
00:11:25,279 --> 00:11:27,920
it also post this memory region for

303
00:11:27,920 --> 00:11:30,320
answers that the worker has come up with

304
00:11:30,320 --> 00:11:32,079
to send back to the commander control

305
00:11:32,079 --> 00:11:34,479
server

306
00:11:34,720 --> 00:11:37,279
the more interesting part for us is the

307
00:11:37,279 --> 00:11:40,680
worker though

308
00:11:42,240 --> 00:11:44,240
during in fact

309
00:11:44,240 --> 00:11:46,560
during infection the worker has its code

310
00:11:46,560 --> 00:11:50,479
injected into a service host exit

311
00:11:50,880 --> 00:11:52,240
which will be

312
00:11:52,240 --> 00:11:55,120
very interesting for us later on

313
00:11:55,120 --> 00:11:57,920
the worker is always pulling this region

314
00:11:57,920 --> 00:12:00,000
to look for new orders

315
00:12:00,000 --> 00:12:03,600
from the attacker to process

316
00:12:03,600 --> 00:12:05,600
it does that by pulling the region

317
00:12:05,600 --> 00:12:07,839
reading what is inside decrypting the

318
00:12:07,839 --> 00:12:10,560
message processing the order coming up

319
00:12:10,560 --> 00:12:12,880
with an answer for that and it then

320
00:12:12,880 --> 00:12:15,600
writes the re-encrypted answer back into

321
00:12:15,600 --> 00:12:18,639
memory for it to be sent out

322
00:12:18,639 --> 00:12:20,800
what's really interesting for us here

323
00:12:20,800 --> 00:12:23,600
are those two arrows because

324
00:12:23,600 --> 00:12:26,079
what they actually mean is the system

325
00:12:26,079 --> 00:12:29,600
calls that the worker uses in this case

326
00:12:29,600 --> 00:12:31,519
and as we have said before we can

327
00:12:31,519 --> 00:12:34,560
interpret these system calls and that is

328
00:12:34,560 --> 00:12:36,720
what we did later on

329
00:12:36,720 --> 00:12:39,680
but first as i said everything we're

330
00:12:39,680 --> 00:12:41,040
reading here

331
00:12:41,040 --> 00:12:43,120
we could read here is always encrypted

332
00:12:43,120 --> 00:12:45,120
as the worker does the decryption and

333
00:12:45,120 --> 00:12:47,360
encryption of new packages so we are

334
00:12:47,360 --> 00:12:48,959
going to take a look at the encryption

335
00:12:48,959 --> 00:12:51,440
that when he uses

336
00:12:51,440 --> 00:12:53,760
let's say you have an unencrypted

337
00:12:53,760 --> 00:12:55,600
message

338
00:12:55,600 --> 00:12:57,440
in order to decrypt it windy would

339
00:12:57,440 --> 00:13:00,399
generate a 4 byte random key and just

340
00:13:00,399 --> 00:13:03,519
xor it block wise over the message

341
00:13:03,519 --> 00:13:05,279
and send it out

342
00:13:05,279 --> 00:13:07,200
decryption obviously is a little bit

343
00:13:07,200 --> 00:13:09,120
harder because the receiving

344
00:13:09,120 --> 00:13:11,920
communication partner could not possibly

345
00:13:11,920 --> 00:13:13,600
know the random key that has been

346
00:13:13,600 --> 00:13:15,120
generated before

347
00:13:15,120 --> 00:13:17,360
therefore it uses a static key as a

348
00:13:17,360 --> 00:13:19,279
specific offset both communication

349
00:13:19,279 --> 00:13:21,440
partners obviously know where the static

350
00:13:21,440 --> 00:13:23,600
key is and what it is

351
00:13:23,600 --> 00:13:25,440
therefore by knowing that

352
00:13:25,440 --> 00:13:28,079
the receiving communication partner can

353
00:13:28,079 --> 00:13:29,279
xor

354
00:13:29,279 --> 00:13:31,360
the static key over the offset to

355
00:13:31,360 --> 00:13:34,720
calculate the random key

356
00:13:34,720 --> 00:13:36,800
and use the random key to decrypt the

357
00:13:36,800 --> 00:13:39,279
message

358
00:13:40,800 --> 00:13:43,839
now let's talk about the detective

359
00:13:43,839 --> 00:13:45,760
the detective

360
00:13:45,760 --> 00:13:48,079
consists of three phases a detector

361
00:13:48,079 --> 00:13:51,519
phase detector phase and the decrypter

362
00:13:51,519 --> 00:13:54,480
what the detector does is it's it

363
00:13:54,480 --> 00:13:57,360
looks for the infected server source

364
00:13:57,360 --> 00:13:58,399
process

365
00:13:58,399 --> 00:14:00,560
the detective then

366
00:14:00,560 --> 00:14:01,600
has to

367
00:14:01,600 --> 00:14:04,560
differentiate between the actual service

368
00:14:04,560 --> 00:14:07,120
host functionality and the malicious

369
00:14:07,120 --> 00:14:08,560
winter usage

370
00:14:08,560 --> 00:14:11,360
extract the data from the system calls

371
00:14:11,360 --> 00:14:14,240
and then the decrypter decrypts it

372
00:14:14,240 --> 00:14:16,959
a closer look at the

373
00:14:16,959 --> 00:14:18,560
detector shows

374
00:14:18,560 --> 00:14:19,839
that

375
00:14:19,839 --> 00:14:23,440
we first get a list of all process ids

376
00:14:23,440 --> 00:14:25,279
of the service hosts that are running on

377
00:14:25,279 --> 00:14:27,680
the machine

378
00:14:27,680 --> 00:14:30,240
and then we are going through these one

379
00:14:30,240 --> 00:14:31,360
by one

380
00:14:31,360 --> 00:14:34,399
we pause the first one on our list dump

381
00:14:34,399 --> 00:14:37,360
its memory via serial onto our analyst

382
00:14:37,360 --> 00:14:40,000
pc use the java rule that we have

383
00:14:40,000 --> 00:14:41,839
written

384
00:14:41,839 --> 00:14:44,399
to detect an infection

385
00:14:44,399 --> 00:14:47,760
and therefore determine if the if

386
00:14:47,760 --> 00:14:52,480
this process is in fact infected or not

387
00:14:52,480 --> 00:14:53,360
if

388
00:14:53,360 --> 00:14:55,920
that's not the case we would cycle back

389
00:14:55,920 --> 00:14:58,480
go to the next

390
00:14:58,480 --> 00:15:01,920
process id in our list of service hosts

391
00:15:01,920 --> 00:15:04,240
or maybe just abort if there is no

392
00:15:04,240 --> 00:15:06,720
infection that can be found if we have

393
00:15:06,720 --> 00:15:07,920
found

394
00:15:07,920 --> 00:15:10,240
the infected process id

395
00:15:10,240 --> 00:15:12,720
this process id is then given to the

396
00:15:12,720 --> 00:15:15,279
detective

397
00:15:15,519 --> 00:15:18,160
the detective as i said

398
00:15:18,160 --> 00:15:20,720
then has to differentiate between all

399
00:15:20,720 --> 00:15:23,279
the noise that the service host is

400
00:15:23,279 --> 00:15:25,440
creating by its genuine functionality

401
00:15:25,440 --> 00:15:28,399
what windows intends it to do

402
00:15:28,399 --> 00:15:30,639
and the malicious

403
00:15:30,639 --> 00:15:33,519
windy usage

404
00:15:34,240 --> 00:15:37,920
as i said we know that when t

405
00:15:37,920 --> 00:15:41,360
the worker reads and writes data to this

406
00:15:41,360 --> 00:15:44,000
memory region via system calls it does

407
00:15:44,000 --> 00:15:46,959
that using anti-deviceo control file

408
00:15:46,959 --> 00:15:48,480
that's the name of it

409
00:15:48,480 --> 00:15:50,800
and this system call can do

410
00:15:50,800 --> 00:15:53,440
various amounts of things for windows

411
00:15:53,440 --> 00:15:55,759
and that's why windows uses i o control

412
00:15:55,759 --> 00:15:57,440
codes

413
00:15:57,440 --> 00:16:00,320
to further define what it's supposed to

414
00:16:00,320 --> 00:16:02,320
what the system call is supposed to do

415
00:16:02,320 --> 00:16:05,360
and winte actually brings its own ioctl

416
00:16:05,360 --> 00:16:07,759
codes for

417
00:16:07,759 --> 00:16:10,320
the read and write

418
00:16:10,320 --> 00:16:13,040
action in this case meaning whenever the

419
00:16:13,040 --> 00:16:16,639
worker would read something

420
00:16:16,639 --> 00:16:20,079
we can detect this iotl code from the

421
00:16:20,079 --> 00:16:22,079
system call that we have intercepted and

422
00:16:22,079 --> 00:16:23,759
interpreted

423
00:16:23,759 --> 00:16:26,639
and then we could look into the

424
00:16:26,639 --> 00:16:27,519
out

425
00:16:27,519 --> 00:16:28,560
buffer

426
00:16:28,560 --> 00:16:30,639
the output buffer of the system call

427
00:16:30,639 --> 00:16:31,680
because it

428
00:16:31,680 --> 00:16:32,959
since it's

429
00:16:32,959 --> 00:16:34,480
trying to read it

430
00:16:34,480 --> 00:16:37,120
that is the um

431
00:16:37,120 --> 00:16:39,759
out buffer

432
00:16:39,759 --> 00:16:42,079
where the data would be found and for

433
00:16:42,079 --> 00:16:44,160
writing it's the input

434
00:16:44,160 --> 00:16:46,959
buffer but as i said we're also only

435
00:16:46,959 --> 00:16:49,040
reading encrypted communication data

436
00:16:49,040 --> 00:16:53,040
here therefore we would have to decrypt

437
00:16:53,040 --> 00:16:56,160
it first for us to actually make sense

438
00:16:56,160 --> 00:16:58,880
of the data that we are seeing

439
00:16:58,880 --> 00:17:01,519
but as i said encryption and windy is

440
00:17:01,519 --> 00:17:04,640
really easy so we are not going to dive

441
00:17:04,640 --> 00:17:07,119
deeper into that

442
00:17:07,119 --> 00:17:10,160
we are going to take a look at how we

443
00:17:10,160 --> 00:17:11,919
proved our concept

444
00:17:11,919 --> 00:17:13,439
thus the

445
00:17:13,439 --> 00:17:15,439
detective actually worked

446
00:17:15,439 --> 00:17:17,039
for that we used a twosome twist

447
00:17:17,039 --> 00:17:19,439
encrypts

448
00:17:19,760 --> 00:17:22,000
and crop script

449
00:17:22,000 --> 00:17:24,559
that's an nmap scripting engine script

450
00:17:24,559 --> 00:17:26,720
which basically does

451
00:17:26,720 --> 00:17:29,200
the handshake with the malware it's it

452
00:17:29,200 --> 00:17:31,280
simulates being a commander control

453
00:17:31,280 --> 00:17:33,760
server sends a hello and a get query

454
00:17:33,760 --> 00:17:36,400
host information package

455
00:17:36,400 --> 00:17:39,039
and malware would answer

456
00:17:39,039 --> 00:17:40,240
supplying

457
00:17:40,240 --> 00:17:42,960
information about the host name and the

458
00:17:42,960 --> 00:17:45,919
windy specific id that is that this

459
00:17:45,919 --> 00:17:48,960
malware sample has

460
00:17:50,559 --> 00:17:51,679
we

461
00:17:51,679 --> 00:17:54,080
used this nmap script

462
00:17:54,080 --> 00:17:55,200
to

463
00:17:55,200 --> 00:17:57,039
together these two packages for the

464
00:17:57,039 --> 00:17:58,640
handshake

465
00:17:58,640 --> 00:18:01,280
and then we replayed attacked it to the

466
00:18:01,280 --> 00:18:02,559
malware

467
00:18:02,559 --> 00:18:04,080
um

468
00:18:04,080 --> 00:18:06,160
because we have to trigger the worker

469
00:18:06,160 --> 00:18:08,559
into actually reading and writing data

470
00:18:08,559 --> 00:18:11,039
into thinking that it's communicating to

471
00:18:11,039 --> 00:18:12,559
commander control server because

472
00:18:12,559 --> 00:18:15,600
otherwise we are not seeing these

473
00:18:15,600 --> 00:18:19,200
system calls even being generated

474
00:18:19,200 --> 00:18:21,280
and at the end we used wireshark on our

475
00:18:21,280 --> 00:18:24,240
analyst pc to see

476
00:18:24,240 --> 00:18:26,799
to look at the tcp data that's coming in

477
00:18:26,799 --> 00:18:28,880
to see if we can find

478
00:18:28,880 --> 00:18:31,200
the get the winter's answer to the get

479
00:18:31,200 --> 00:18:33,760
query host information package

480
00:18:33,760 --> 00:18:36,000
and as you can see here on the top side

481
00:18:36,000 --> 00:18:37,360
you're seeing

482
00:18:37,360 --> 00:18:39,440
the wireshark

483
00:18:39,440 --> 00:18:41,520
recording

484
00:18:41,520 --> 00:18:44,080
and down below a screenshot of what we

485
00:18:44,080 --> 00:18:47,840
have extracted from the system call

486
00:18:48,400 --> 00:18:50,320
these bits and bytes that you see up

487
00:18:50,320 --> 00:18:54,160
here are obviously encrypted

488
00:18:54,160 --> 00:18:56,880
but it's the same that we have extracted

489
00:18:56,880 --> 00:18:59,200
from within the input buffer of this

490
00:18:59,200 --> 00:19:00,880
write system call

491
00:19:00,880 --> 00:19:01,760
um

492
00:19:01,760 --> 00:19:04,960
and if we decrypt it it would say nuke

493
00:19:04,960 --> 00:19:06,559
pc which was

494
00:19:06,559 --> 00:19:09,039
the host name of our little internack

495
00:19:09,039 --> 00:19:12,240
that we used to infect there

496
00:19:12,240 --> 00:19:14,240
and the next part of it

497
00:19:14,240 --> 00:19:16,720
is to win the id and then together with

498
00:19:16,720 --> 00:19:20,559
some more stuff about the host machine

499
00:19:21,440 --> 00:19:24,160
now one might ask what's the difference

500
00:19:24,160 --> 00:19:26,720
between our approach and

501
00:19:26,720 --> 00:19:29,120
that nmap script because obviously the

502
00:19:29,120 --> 00:19:31,679
nmap script can also decrypt

503
00:19:31,679 --> 00:19:33,600
messages and

504
00:19:33,600 --> 00:19:38,199
say the machine is infected or not

505
00:19:38,960 --> 00:19:40,640
the main difference

506
00:19:40,640 --> 00:19:41,360
is

507
00:19:41,360 --> 00:19:42,799
that we

508
00:19:42,799 --> 00:19:45,919
do this without without being detected

509
00:19:45,919 --> 00:19:48,160
whenever the nmap script would connect

510
00:19:48,160 --> 00:19:49,919
to the machine

511
00:19:49,919 --> 00:19:53,200
it would always reset any current

512
00:19:53,200 --> 00:19:57,600
connection that there is if there is any

513
00:19:57,600 --> 00:19:59,280
on our case that is

514
00:19:59,280 --> 00:20:01,440
in our case that's not possible because

515
00:20:01,440 --> 00:20:04,159
we are not sending actual

516
00:20:04,159 --> 00:20:06,320
packages to the malware only for this

517
00:20:06,320 --> 00:20:08,559
demonstrator we did but in the wild in

518
00:20:08,559 --> 00:20:12,000
the life scenario we would not

519
00:20:12,000 --> 00:20:13,760
also

520
00:20:13,760 --> 00:20:16,159
if the communication protocol of the

521
00:20:16,159 --> 00:20:18,240
malware would change for further

522
00:20:18,240 --> 00:20:21,280
generations of it the nmap script had

523
00:20:21,280 --> 00:20:23,760
would have to be adapted

524
00:20:23,760 --> 00:20:26,960
um a lot for that to still work to still

525
00:20:26,960 --> 00:20:29,600
show an infection whereas

526
00:20:29,600 --> 00:20:32,799
ours would still be our

527
00:20:32,799 --> 00:20:35,440
solution would still be able to

528
00:20:35,440 --> 00:20:38,080
show the communication data that's going

529
00:20:38,080 --> 00:20:39,679
in and out

530
00:20:39,679 --> 00:20:42,640
from the worker and obviously we can see

531
00:20:42,640 --> 00:20:45,120
a lot more than just these two

532
00:20:45,120 --> 00:20:46,799
hello and get curry host information

533
00:20:46,799 --> 00:20:49,120
packages we could see every

534
00:20:49,120 --> 00:20:50,480
communication

535
00:20:50,480 --> 00:20:54,320
the attacker would have with the malware

536
00:20:54,400 --> 00:20:55,840
so now

537
00:20:55,840 --> 00:20:59,600
let's take a look at a

538
00:20:59,760 --> 00:21:02,960
little demonstration of it

539
00:21:02,960 --> 00:21:05,919
on the right hand side you can see

540
00:21:05,919 --> 00:21:08,480
the nmap script just for comparison

541
00:21:08,480 --> 00:21:11,679
we infected the machine using a

542
00:21:11,679 --> 00:21:13,200
live sample

543
00:21:13,200 --> 00:21:14,840
it's it

544
00:21:14,840 --> 00:21:16,799
doesn't

545
00:21:16,799 --> 00:21:20,960
follow the usual infection chain

546
00:21:20,960 --> 00:21:24,480
we installed this using run dll32

547
00:21:24,480 --> 00:21:25,520
but

548
00:21:25,520 --> 00:21:28,720
as you can see it did

549
00:21:28,720 --> 00:21:31,520
end up in this genuine infection of the

550
00:21:31,520 --> 00:21:33,840
male word because the nmap script also

551
00:21:33,840 --> 00:21:35,360
has found it

552
00:21:35,360 --> 00:21:36,640
and down here

553
00:21:36,640 --> 00:21:40,000
you can see a split of the

554
00:21:40,000 --> 00:21:42,000
string that i've just showed you on the

555
00:21:42,000 --> 00:21:44,080
left side

556
00:21:44,080 --> 00:21:45,600
will be the output from our windy

557
00:21:45,600 --> 00:21:49,439
detective we are supplying the

558
00:21:49,760 --> 00:21:52,000
the ip address as well here because as i

559
00:21:52,000 --> 00:21:52,960
said

560
00:21:52,960 --> 00:21:56,240
for the demonstrator we had to

561
00:21:56,240 --> 00:21:59,520
send this replay attack packages just to

562
00:21:59,520 --> 00:22:02,320
trigger the worker into action this

563
00:22:02,320 --> 00:22:05,280
would obviously not be needed in a real

564
00:22:05,280 --> 00:22:08,080
life scenario

565
00:22:08,080 --> 00:22:12,480
so when we run it here we can see the

566
00:22:12,480 --> 00:22:14,799
detector starting to

567
00:22:14,799 --> 00:22:17,120
dump virtual address space

568
00:22:17,120 --> 00:22:22,159
process id 900 is a service host

569
00:22:22,159 --> 00:22:23,440
and

570
00:22:23,440 --> 00:22:25,520
for this first process it could not find

571
00:22:25,520 --> 00:22:29,520
any infection so it goes to the next one

572
00:22:29,520 --> 00:22:30,400
this

573
00:22:30,400 --> 00:22:33,840
took um seven minutes here in this case

574
00:22:33,840 --> 00:22:36,320
that is because we have to get all the

575
00:22:36,320 --> 00:22:39,280
data from our infected machine

576
00:22:39,280 --> 00:22:42,799
via serial onto our analyst pc to use

577
00:22:42,799 --> 00:22:45,280
the java rule here

578
00:22:45,280 --> 00:22:47,760
we are developing a solution where you

579
00:22:47,760 --> 00:22:49,360
could supply the java rule to your

580
00:22:49,360 --> 00:22:52,240
virtual machine introspector

581
00:22:52,240 --> 00:22:54,400
to does to do all that

582
00:22:54,400 --> 00:22:56,320
um over there because that would be way

583
00:22:56,320 --> 00:22:58,159
faster but as i said it's still in

584
00:22:58,159 --> 00:23:00,480
development and this is all uh also

585
00:23:00,480 --> 00:23:01,679
ultimately

586
00:23:01,679 --> 00:23:04,159
the reason why why we have decided

587
00:23:04,159 --> 00:23:06,640
against the live demonstration

588
00:23:06,640 --> 00:23:09,120
and for a video because the live

589
00:23:09,120 --> 00:23:11,600
demonstration gremlin would surely

590
00:23:11,600 --> 00:23:13,760
place the infected service host at the

591
00:23:13,760 --> 00:23:15,120
very end

592
00:23:15,120 --> 00:23:17,919
of the list and that could take up to 30

593
00:23:17,919 --> 00:23:22,679
minutes just to detect the infection

594
00:23:22,720 --> 00:23:24,720
so let's resume here

595
00:23:24,720 --> 00:23:25,520
and

596
00:23:25,520 --> 00:23:28,480
see what it's about to do

597
00:23:28,480 --> 00:23:29,840
it will

598
00:23:29,840 --> 00:23:32,080
detect the infection in this process in

599
00:23:32,080 --> 00:23:33,600
in this case

600
00:23:33,600 --> 00:23:35,840
and then you can will be able to see

601
00:23:35,840 --> 00:23:38,240
that the commander control script our c2

602
00:23:38,240 --> 00:23:41,360
script is going to start

603
00:23:41,360 --> 00:23:43,520
here in just a second then it's sending

604
00:23:43,520 --> 00:23:46,000
packages

605
00:23:46,000 --> 00:23:47,840
and we can also see

606
00:23:47,840 --> 00:23:50,720
that there are already system calls

607
00:23:50,720 --> 00:23:52,880
being intercepted

608
00:23:52,880 --> 00:23:54,510
these are

609
00:23:54,510 --> 00:23:55,919
[Music]

610
00:23:55,919 --> 00:23:57,120
the worker

611
00:23:57,120 --> 00:24:00,159
reading right now

612
00:24:00,159 --> 00:24:02,559
meaning it's traffic coming from the

613
00:24:02,559 --> 00:24:04,799
driver to the worker

614
00:24:04,799 --> 00:24:07,600
and down below you can see the encrypted

615
00:24:07,600 --> 00:24:10,559
data that the worker has read here for

616
00:24:10,559 --> 00:24:14,080
the demonstrator we only showed

617
00:24:14,080 --> 00:24:17,360
encrypted data and we also only showed

618
00:24:17,360 --> 00:24:19,919
it whenever it's

619
00:24:19,919 --> 00:24:22,720
a piece of data was discovered first

620
00:24:22,720 --> 00:24:24,880
because it would just say the same stuff

621
00:24:24,880 --> 00:24:26,080
down here

622
00:24:26,080 --> 00:24:28,159
yet again

623
00:24:28,159 --> 00:24:30,320
this demonstrator is because it's not

624
00:24:30,320 --> 00:24:32,559
communicating with a real commander

625
00:24:32,559 --> 00:24:33,840
control server

626
00:24:33,840 --> 00:24:36,799
it's not reading any human readable data

627
00:24:36,799 --> 00:24:38,799
because the hello and the get query host

628
00:24:38,799 --> 00:24:40,559
information package aren't human

629
00:24:40,559 --> 00:24:43,760
readable that's why we didn't decrypt it

630
00:24:43,760 --> 00:24:47,520
but we did decrypt the writing

631
00:24:47,520 --> 00:24:48,880
because the

632
00:24:48,880 --> 00:24:50,480
malware is about

633
00:24:50,480 --> 00:24:51,919
to send

634
00:24:51,919 --> 00:24:53,200
these

635
00:24:53,200 --> 00:24:54,640
this information

636
00:24:54,640 --> 00:24:56,480
here

637
00:24:56,480 --> 00:24:58,720
what we can see here

638
00:24:58,720 --> 00:25:02,400
is the cryptid answer to the hello this

639
00:25:02,400 --> 00:25:05,039
is what we would be able to see if we

640
00:25:05,039 --> 00:25:07,120
decrypted the stuff up here

641
00:25:07,120 --> 00:25:09,679
but um the most important

642
00:25:09,679 --> 00:25:12,880
line is this one this is

643
00:25:12,880 --> 00:25:14,400
the answer to

644
00:25:14,400 --> 00:25:16,320
the get query host information package

645
00:25:16,320 --> 00:25:18,159
this is where we can see

646
00:25:18,159 --> 00:25:20,799
um that string

647
00:25:20,799 --> 00:25:21,760
that

648
00:25:21,760 --> 00:25:24,080
the testing crypt script has also

649
00:25:24,080 --> 00:25:24,960
seen

650
00:25:24,960 --> 00:25:27,760
this is the answer of the malware as we

651
00:25:27,760 --> 00:25:31,120
can see it from within the system call

652
00:25:31,120 --> 00:25:33,200
and we're also able to decrypt it

653
00:25:33,200 --> 00:25:36,400
meaning at this point

654
00:25:36,640 --> 00:25:39,120
we showed that we can in the live

655
00:25:39,120 --> 00:25:40,960
environment eavesdrop on the malware

656
00:25:40,960 --> 00:25:43,600
without it having any chance to know

657
00:25:43,600 --> 00:25:45,679
that it that it's being spied on the

658
00:25:45,679 --> 00:25:47,440
attacker would never know

659
00:25:47,440 --> 00:25:49,279
because we are just

660
00:25:49,279 --> 00:25:50,480
below

661
00:25:50,480 --> 00:25:54,679
the operating system

662
00:25:58,159 --> 00:26:00,000
yeah

663
00:26:00,000 --> 00:26:01,279
okay

664
00:26:01,279 --> 00:26:03,679
so as i said

665
00:26:03,679 --> 00:26:06,240
just as a quick summary we used virtual

666
00:26:06,240 --> 00:26:09,120
machine introspection to show

667
00:26:09,120 --> 00:26:10,799
what is possible

668
00:26:10,799 --> 00:26:12,159
we took a

669
00:26:12,159 --> 00:26:14,880
very well known malware because it would

670
00:26:14,880 --> 00:26:16,880
be would be well studied and that's

671
00:26:16,880 --> 00:26:18,720
ideal for our

672
00:26:18,720 --> 00:26:20,320
use case here

673
00:26:20,320 --> 00:26:23,360
and then we leveraged everything that

674
00:26:23,360 --> 00:26:24,880
tycho offers

675
00:26:24,880 --> 00:26:26,720
to

676
00:26:26,720 --> 00:26:28,640
to show

677
00:26:28,640 --> 00:26:30,320
how you can

678
00:26:30,320 --> 00:26:32,240
listen in on what the malware is doing

679
00:26:32,240 --> 00:26:35,760
at any given time basically

680
00:26:35,840 --> 00:26:36,559
so

681
00:26:36,559 --> 00:26:40,480
that would be it from our side here

682
00:26:40,760 --> 00:26:49,520
[Applause]

683
00:26:49,520 --> 00:26:53,480
thank you that was

684
00:26:55,840 --> 00:26:57,840
are there any questions are there any

685
00:26:57,840 --> 00:27:01,439
questions yes here whoa

686
00:27:02,480 --> 00:27:04,000
okay

687
00:27:04,000 --> 00:27:07,120
thanks for the talk um first i have two

688
00:27:07,120 --> 00:27:08,400
questions

689
00:27:08,400 --> 00:27:09,279
uh

690
00:27:09,279 --> 00:27:11,520
how many environments you support

691
00:27:11,520 --> 00:27:13,919
because it's not the same windows 7

692
00:27:13,919 --> 00:27:17,120
windows 8 with 10 by the kernel or

693
00:27:17,120 --> 00:27:18,799
change into the structure by the

694
00:27:18,799 --> 00:27:20,720
cementing gap that you

695
00:27:20,720 --> 00:27:22,000
you told

696
00:27:22,000 --> 00:27:24,480
maybe that's one for you so so

697
00:27:24,480 --> 00:27:26,640
the question is uh how many operating

698
00:27:26,640 --> 00:27:29,600
systems we yes generally i mean

699
00:27:29,600 --> 00:27:32,880
yeah so um at the moment only so at

700
00:27:32,880 --> 00:27:35,520
first um tycho is at the moment not

701
00:27:35,520 --> 00:27:37,679
active as a so we don't develop it at

702
00:27:37,679 --> 00:27:38,960
the moment

703
00:27:38,960 --> 00:27:39,210
um

704
00:27:39,210 --> 00:27:40,320
[Music]

705
00:27:40,320 --> 00:27:41,760
but um

706
00:27:41,760 --> 00:27:43,200
when we

707
00:27:43,200 --> 00:27:46,480
um when we worked on this project so as

708
00:27:46,480 --> 00:27:50,000
you said um the offsets and for the data

709
00:27:50,000 --> 00:27:52,559
structures change with

710
00:27:52,559 --> 00:27:55,279
nearly every windows version

711
00:27:55,279 --> 00:27:56,320
so

712
00:27:56,320 --> 00:27:58,159
for every new windows version you have

713
00:27:58,159 --> 00:28:01,039
to create those offsets and stuff like

714
00:28:01,039 --> 00:28:04,000
that but i think it was at the moment

715
00:28:04,000 --> 00:28:06,720
like 30 windows 7 versions but no

716
00:28:06,720 --> 00:28:09,039
windows 10 versions

717
00:28:09,039 --> 00:28:11,679
okay and the other question is that

718
00:28:11,679 --> 00:28:13,600
i think that was very interesting the

719
00:28:13,600 --> 00:28:14,880
example

720
00:28:14,880 --> 00:28:17,600
in that moment you are hooking uh i mean

721
00:28:17,600 --> 00:28:20,159
in some way you know in real time the

722
00:28:20,159 --> 00:28:22,320
windy you know and

723
00:28:22,320 --> 00:28:23,279
maybe

724
00:28:23,279 --> 00:28:26,000
doing an snapshot okay for example from

725
00:28:26,000 --> 00:28:28,080
the memory and running recall or

726
00:28:28,080 --> 00:28:29,600
volatility

727
00:28:29,600 --> 00:28:32,240
because at the end you are checking the

728
00:28:32,240 --> 00:28:33,039
the

729
00:28:33,039 --> 00:28:34,559
cp host

730
00:28:34,559 --> 00:28:37,120
to have the same results or

731
00:28:37,120 --> 00:28:39,520
or not

732
00:28:40,320 --> 00:28:42,720
i'm not quite sure if i understand your

733
00:28:42,720 --> 00:28:45,120
question correctly um

734
00:28:45,120 --> 00:28:46,799
no because you are dumping the the

735
00:28:46,799 --> 00:28:49,679
process no you are freezing the

736
00:28:49,679 --> 00:28:51,679
virtual machine or the

737
00:28:51,679 --> 00:28:54,080
the sandbox and you are dumping the all

738
00:28:54,080 --> 00:28:56,159
the process the memory regions

739
00:28:56,159 --> 00:28:58,559
and you are running ayarano uh yes

740
00:28:58,559 --> 00:29:01,039
looking for winty right and

741
00:29:01,039 --> 00:29:04,880
it's very it's only that maybe the same

742
00:29:04,880 --> 00:29:07,120
task can you do with uh dumping the

743
00:29:07,120 --> 00:29:09,440
memory directly from all the

744
00:29:09,440 --> 00:29:11,760
the virtual machine and run running

745
00:29:11,760 --> 00:29:14,960
volatility or recall that and traversing

746
00:29:14,960 --> 00:29:17,039
all the processes in this case and

747
00:29:17,039 --> 00:29:18,960
running the i mean that is the same

748
00:29:18,960 --> 00:29:22,000
result yes yes so um

749
00:29:22,000 --> 00:29:24,880
i actually also did that before

750
00:29:24,880 --> 00:29:26,780
where we used taiko to

751
00:29:26,780 --> 00:29:28,640
[Music]

752
00:29:28,640 --> 00:29:31,120
do complete dumps of the machine and

753
00:29:31,120 --> 00:29:32,399
then you could

754
00:29:32,399 --> 00:29:35,039
use volatility as you said for example

755
00:29:35,039 --> 00:29:37,200
to analyze the machine as well

756
00:29:37,200 --> 00:29:39,520
yes that would

757
00:29:39,520 --> 00:29:42,080
result in the same

758
00:29:42,080 --> 00:29:44,559
um but in this case we only needed the

759
00:29:44,559 --> 00:29:48,000
service hosts because we knew the the

760
00:29:48,000 --> 00:29:50,159
winty sample that we analyzed was always

761
00:29:50,159 --> 00:29:51,840
going to be

762
00:29:51,840 --> 00:29:54,640
injected into a service host

763
00:29:54,640 --> 00:29:57,360
so that was just faster as for us as i

764
00:29:57,360 --> 00:29:58,960
said there are limitations for the

765
00:29:58,960 --> 00:30:02,000
system right now which can make it take

766
00:30:02,000 --> 00:30:03,440
some time

767
00:30:03,440 --> 00:30:06,799
so that's why we didn't do a full dump

768
00:30:06,799 --> 00:30:08,720
of the system but that's totally

769
00:30:08,720 --> 00:30:09,919
possible

770
00:30:09,919 --> 00:30:12,320
okay thanks

771
00:30:12,320 --> 00:30:13,919
i think there's one next to you yeah

772
00:30:13,919 --> 00:30:15,279
right hi

773
00:30:15,279 --> 00:30:16,799
um

774
00:30:16,799 --> 00:30:18,960
constantine here i would be interested

775
00:30:18,960 --> 00:30:22,000
if you've been able to use tyco in an

776
00:30:22,000 --> 00:30:24,320
incident case or like

777
00:30:24,320 --> 00:30:26,640
got data from an incident case and then

778
00:30:26,640 --> 00:30:28,799
test your

779
00:30:28,799 --> 00:30:31,520
tool if it worked with

780
00:30:31,520 --> 00:30:34,080
real data

781
00:30:34,080 --> 00:30:36,000
so i'm

782
00:30:36,000 --> 00:30:38,559
as far as i know it has

783
00:30:38,559 --> 00:30:41,039
not yet been used in a real case

784
00:30:41,039 --> 00:30:44,159
scenario in a real incident

785
00:30:44,159 --> 00:30:46,320
um but we did use

786
00:30:46,320 --> 00:30:50,240
real samples and everything where we

787
00:30:50,240 --> 00:30:52,480
try it out

788
00:30:52,480 --> 00:30:55,200
but as i said i don't think it was so

789
00:30:55,200 --> 00:30:57,600
far be used in a

790
00:30:57,600 --> 00:31:01,440
real case incident response scenario

791
00:31:01,440 --> 00:31:04,240
thank you because it was really amazing

792
00:31:04,240 --> 00:31:07,200
presentation and i was thinking it could

793
00:31:07,200 --> 00:31:08,960
speed up time for

794
00:31:08,960 --> 00:31:10,960
for incident cases

795
00:31:10,960 --> 00:31:13,360
thank you

796
00:31:14,240 --> 00:31:17,360
hello uh thank you for the presentation

797
00:31:17,360 --> 00:31:20,799
my question is about your introspection

798
00:31:20,799 --> 00:31:24,080
uh technique so

799
00:31:24,080 --> 00:31:27,120
it is true that your

800
00:31:27,120 --> 00:31:29,679
solution will

801
00:31:29,679 --> 00:31:33,279
allow not detecting uh the mechanism

802
00:31:33,279 --> 00:31:36,559
itself that is used uh to

803
00:31:36,559 --> 00:31:38,320
kind of intercept

804
00:31:38,320 --> 00:31:40,320
uh winning ti's traffic but it seems to

805
00:31:40,320 --> 00:31:42,559
me that the more common problem by most

806
00:31:42,559 --> 00:31:45,039
commodity malware would

807
00:31:45,039 --> 00:31:45,679
um be

808
00:31:45,679 --> 00:31:48,240
detection of the malware of the

809
00:31:48,240 --> 00:31:51,200
environment at which it it runs

810
00:31:51,200 --> 00:31:53,200
um in the sense that

811
00:31:53,200 --> 00:31:54,960
it would detect that it runs in a

812
00:31:54,960 --> 00:31:57,200
virtual machine and then would cease to

813
00:31:57,200 --> 00:32:00,799
run afterwards my question is whether

814
00:32:00,799 --> 00:32:04,080
your introspection technique

815
00:32:04,080 --> 00:32:06,320
allows intercepting

816
00:32:06,320 --> 00:32:08,320
instruction level

817
00:32:08,320 --> 00:32:09,279
um

818
00:32:09,279 --> 00:32:11,519
evasions for example a cpu id

819
00:32:11,519 --> 00:32:14,399
instruction or a read timestamp counter

820
00:32:14,399 --> 00:32:15,519
instruction

821
00:32:15,519 --> 00:32:18,559
and instrumenting it so as to kind of

822
00:32:18,559 --> 00:32:20,399
hide the fact that

823
00:32:20,399 --> 00:32:22,640
that image is running within a virtual

824
00:32:22,640 --> 00:32:23,519
machine

825
00:32:23,519 --> 00:32:26,720
yeah and tyco was developed with staff

826
00:32:26,720 --> 00:32:30,640
in mind so yeah we can do so at first

827
00:32:30,640 --> 00:32:31,600
when

828
00:32:31,600 --> 00:32:32,559
the

829
00:32:32,559 --> 00:32:35,679
operating system wants cpuid for example

830
00:32:35,679 --> 00:32:39,039
to get the cpu

831
00:32:39,039 --> 00:32:42,320
tyco will just report the cpu so um

832
00:32:42,320 --> 00:32:44,640
kreiko reports at no point that there's

833
00:32:44,640 --> 00:32:47,200
a virtual machine running so yeah we had

834
00:32:47,200 --> 00:32:49,039
that in mind that

835
00:32:49,039 --> 00:32:51,919
the the operating system and malware

836
00:32:51,919 --> 00:32:54,320
cannot detect the virtual machine that

837
00:32:54,320 --> 00:32:57,840
was the idea of tyco

838
00:32:59,919 --> 00:33:02,080
thanks a lot for the presentation

839
00:33:02,080 --> 00:33:05,039
um i really like that sweet spot between

840
00:33:05,039 --> 00:33:08,399
the hypervisor and the os and

841
00:33:08,399 --> 00:33:11,200
knowing the fact that windows kernel is

842
00:33:11,200 --> 00:33:14,480
less and less open for the hook in

843
00:33:14,480 --> 00:33:17,360
kernel level um i think this is a great

844
00:33:17,360 --> 00:33:19,919
project can be can be used for that

845
00:33:19,919 --> 00:33:23,039
but what about the

846
00:33:23,039 --> 00:33:26,799
not there no virtual machines the

847
00:33:26,799 --> 00:33:29,039
the normal laptops and workstation are

848
00:33:29,039 --> 00:33:32,080
there any research to have this layer

849
00:33:32,080 --> 00:33:34,720
for this workstation and laptops as well

850
00:33:34,720 --> 00:33:37,120
to be able to use this tool for for

851
00:33:37,120 --> 00:33:40,000
security security purposes

852
00:33:40,000 --> 00:33:41,120
um

853
00:33:41,120 --> 00:33:43,519
so the reason why we don't actively

854
00:33:43,519 --> 00:33:45,600
develop taiko at the moment is that just

855
00:33:45,600 --> 00:33:47,600
nobody wants to buy it

856
00:33:47,600 --> 00:33:49,120
and

857
00:33:49,120 --> 00:33:52,080
so at the moment so

858
00:33:52,080 --> 00:33:54,480
yeah the idea is right so we could use

859
00:33:54,480 --> 00:33:56,720
tyco and this technology

860
00:33:56,720 --> 00:33:58,159
to

861
00:33:58,159 --> 00:34:01,200
introspect running machines on laptops

862
00:34:01,200 --> 00:34:03,279
and and computers

863
00:34:03,279 --> 00:34:06,720
and be able to detect infections

864
00:34:06,720 --> 00:34:09,280
so yeah that would work

865
00:34:09,280 --> 00:34:12,320
but somebody has to pay for the

866
00:34:12,320 --> 00:34:15,520
for the development of that

867
00:34:17,760 --> 00:34:19,679
there are

868
00:34:19,679 --> 00:34:21,918
as far as i know there are a lot of

869
00:34:21,918 --> 00:34:23,520
thoughts around

870
00:34:23,520 --> 00:34:24,639
the same

871
00:34:24,639 --> 00:34:26,000
thing that you're

872
00:34:26,000 --> 00:34:28,079
talking about right now

873
00:34:28,079 --> 00:34:29,359
but

874
00:34:29,359 --> 00:34:30,560
there's

875
00:34:30,560 --> 00:34:32,399
just no time for this right now in our

876
00:34:32,399 --> 00:34:33,918
hands

877
00:34:33,918 --> 00:34:34,879
also

878
00:34:34,879 --> 00:34:37,119
seeing as the points that sebastian has

879
00:34:37,119 --> 00:34:39,919
pointed out so

880
00:34:40,960 --> 00:34:44,639
okay another question

881
00:34:47,440 --> 00:34:49,839
italy

882
00:35:01,359 --> 00:35:04,560
uh sorry i just didn't dare to ask first

883
00:35:04,560 --> 00:35:05,760
don't worry

884
00:35:05,760 --> 00:35:07,680
yeah cool project well i first

885
00:35:07,680 --> 00:35:09,599
questions like tycho is it available in

886
00:35:09,599 --> 00:35:12,800
some in some way to the community um to

887
00:35:12,800 --> 00:35:14,640
try and play with this or suggest your

888
00:35:14,640 --> 00:35:16,560
in-house project that you

889
00:35:16,560 --> 00:35:18,400
use internally only because i'm just not

890
00:35:18,400 --> 00:35:20,480
familiar with this and maybe second

891
00:35:20,480 --> 00:35:22,880
question is um i notice that you monitor

892
00:35:22,880 --> 00:35:25,680
this is calls cool but can you somehow

893
00:35:25,680 --> 00:35:27,280
drill down to the user space and see

894
00:35:27,280 --> 00:35:31,839
which api caused that call in the kernel

895
00:35:32,160 --> 00:35:32,960
so

896
00:35:32,960 --> 00:35:35,200
as for your first question

897
00:35:35,200 --> 00:35:35,790
um

898
00:35:35,790 --> 00:35:38,000
[Music]

899
00:35:38,000 --> 00:35:40,079
damn i was already thinking about the

900
00:35:40,079 --> 00:35:42,400
second one

901
00:35:42,400 --> 00:35:44,720
is it available in some form yeah yeah

902
00:35:44,720 --> 00:35:46,400
right

903
00:35:46,400 --> 00:35:47,920
sorry

904
00:35:47,920 --> 00:35:50,400
so um as far as i know right now it's

905
00:35:50,400 --> 00:35:52,560
not open source because of the

906
00:35:52,560 --> 00:35:55,920
underlying virtualization platform

907
00:35:55,920 --> 00:35:57,200
um

908
00:35:57,200 --> 00:35:59,440
unfortunately

909
00:35:59,440 --> 00:36:02,000
um as for the second question

910
00:36:02,000 --> 00:36:04,079
um i think there are actually thoughts

911
00:36:04,079 --> 00:36:07,440
about um doing this stack tracing as you

912
00:36:07,440 --> 00:36:08,480
said

913
00:36:08,480 --> 00:36:10,960
to to see where the system call is

914
00:36:10,960 --> 00:36:13,839
coming from

915
00:36:15,440 --> 00:36:18,000
excuse me

916
00:36:18,000 --> 00:36:21,520
which virtualization machine

917
00:36:22,480 --> 00:36:23,520
what would

918
00:36:23,520 --> 00:36:26,320
on what virtualization machine on our

919
00:36:26,320 --> 00:36:28,880
own virtualization that we developed for

920
00:36:28,880 --> 00:36:31,040
this

921
00:36:31,760 --> 00:36:33,200
so

922
00:36:33,200 --> 00:36:35,440
as i said we have a or we distinguish

923
00:36:35,440 --> 00:36:36,880
between the hypervisor and the virtual

924
00:36:36,880 --> 00:36:39,680
machine monitor and the hypervisor is a

925
00:36:39,680 --> 00:36:43,599
project from the university in dustin

926
00:36:43,599 --> 00:36:44,400
um

927
00:36:44,400 --> 00:36:47,200
so we took that and

928
00:36:47,200 --> 00:36:48,400
we

929
00:36:48,400 --> 00:36:51,119
yeah we did some modifications to it

930
00:36:51,119 --> 00:36:52,800
and but the virtual machine monitor and

931
00:36:52,800 --> 00:36:54,960
the introspection module was developed

932
00:36:54,960 --> 00:36:56,640
at cyborgs

933
00:36:56,640 --> 00:36:59,279
from scratch

934
00:37:02,079 --> 00:37:04,079
okay

935
00:37:04,079 --> 00:37:07,640
a last question

936
00:37:09,920 --> 00:37:11,359
one

937
00:37:11,359 --> 00:37:12,960
two

938
00:37:12,960 --> 00:37:17,800
three okay thank you very much

939
00:37:20,930 --> 00:37:22,560
[Applause]

940
00:37:22,560 --> 00:37:24,640
i

