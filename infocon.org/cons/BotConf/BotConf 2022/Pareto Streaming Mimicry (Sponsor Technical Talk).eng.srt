1
00:00:02,080 --> 00:00:04,720
um so we're we're back on the mobile

2
00:00:04,720 --> 00:00:06,480
platforms

3
00:00:06,480 --> 00:00:07,680
you have the floor

4
00:00:07,680 --> 00:00:08,960
okay

5
00:00:08,960 --> 00:00:11,120
uh hello everyone my name is ina

6
00:00:11,120 --> 00:00:13,360
vasileva i'm a reverse engineer and

7
00:00:13,360 --> 00:00:15,360
malware analyst at human

8
00:00:15,360 --> 00:00:18,160
i today i'm going to present you uh some

9
00:00:18,160 --> 00:00:21,119
insights about the predatory botnet and

10
00:00:21,119 --> 00:00:22,960
i think you already heard about the

11
00:00:22,960 --> 00:00:24,960
prairie principle in the morning so i

12
00:00:24,960 --> 00:00:26,400
won't um

13
00:00:26,400 --> 00:00:28,560
stop so now you have the real

14
00:00:28,560 --> 00:00:31,359
application of the principle

15
00:00:31,359 --> 00:00:33,680
in the cyber security world

16
00:00:33,680 --> 00:00:36,160
uh solely the summary of the operator

17
00:00:36,160 --> 00:00:38,719
botnet is the

18
00:00:38,719 --> 00:00:40,480
operation of the most sophisticated

19
00:00:40,480 --> 00:00:43,280
schemes uncovered in the connected tv

20
00:00:43,280 --> 00:00:45,440
ecosystem to date

21
00:00:45,440 --> 00:00:48,160
it was nearly a million infected android

22
00:00:48,160 --> 00:00:50,480
devices pretending to be millions of

23
00:00:50,480 --> 00:00:53,600
people watching ads on smart tvs

24
00:00:53,600 --> 00:00:54,960
and

25
00:00:54,960 --> 00:00:56,399
other devices

26
00:00:56,399 --> 00:00:58,399
specifically streaming that causing

27
00:00:58,399 --> 00:01:00,079
invalid traffic on the streaming

28
00:01:00,079 --> 00:01:03,520
platforms and we encourage the traffic

29
00:01:03,520 --> 00:01:06,400
for the average of 650 million beats uh

30
00:01:06,400 --> 00:01:09,760
bid requests per a day

31
00:01:09,760 --> 00:01:10,840
uh

32
00:01:10,840 --> 00:01:13,200
so me and my team

33
00:01:13,200 --> 00:01:16,799
were found the 29 android apps as well

34
00:01:16,799 --> 00:01:19,119
as 36 rocket channel apps that were

35
00:01:19,119 --> 00:01:22,000
spoofing more than 600 6 000

36
00:01:22,000 --> 00:01:24,400
ctv apps including

37
00:01:24,400 --> 00:01:28,159
apps from the chromecast fire tv uh

38
00:01:28,159 --> 00:01:31,840
apple tv lg smart tv as well as roku

39
00:01:31,840 --> 00:01:34,799
uh several of the android apps uh were

40
00:01:34,799 --> 00:01:36,320
available only on third-party

41
00:01:36,320 --> 00:01:39,280
marketplaces and pareto

42
00:01:39,280 --> 00:01:41,360
exploited uh many organizations and

43
00:01:41,360 --> 00:01:43,040
components from the uh streaming

44
00:01:43,040 --> 00:01:46,079
ecosystem and technology as well as uh

45
00:01:46,079 --> 00:01:48,159
platforms and they have this separate

46
00:01:48,159 --> 00:01:50,320
roku operation that is a little bit more

47
00:01:50,320 --> 00:01:52,000
smaller than the adword android

48
00:01:52,000 --> 00:01:54,880
component of the botnet

49
00:01:54,880 --> 00:01:56,240
and

50
00:01:56,240 --> 00:01:58,479
they both share the same comment and

51
00:01:58,479 --> 00:02:00,560
control as well as the configurations

52
00:02:00,560 --> 00:02:01,520
and

53
00:02:01,520 --> 00:02:04,640
do the same productivity of spoofing our

54
00:02:04,640 --> 00:02:06,840
smart tv and consume

55
00:02:06,840 --> 00:02:08,399
streaming

56
00:02:08,399 --> 00:02:11,038
devices and added branches

57
00:02:11,038 --> 00:02:12,080
and

58
00:02:12,080 --> 00:02:14,000
the most important question how did it

59
00:02:14,000 --> 00:02:15,520
work

60
00:02:15,520 --> 00:02:17,520
so

61
00:02:17,520 --> 00:02:18,319
the

62
00:02:18,319 --> 00:02:21,440
whole botnet is over one bill 1 million

63
00:02:21,440 --> 00:02:23,040
uh android phones

64
00:02:23,040 --> 00:02:26,319
uh strong and each phone was pretended

65
00:02:26,319 --> 00:02:30,160
of has multiple identities of

66
00:02:30,160 --> 00:02:33,519
to mimic or mask of the streaming

67
00:02:33,519 --> 00:02:34,800
devices

68
00:02:34,800 --> 00:02:35,760
and

69
00:02:35,760 --> 00:02:38,239
so it's over than one million uh because

70
00:02:38,239 --> 00:02:40,879
one uh phone can be uh represent a few

71
00:02:40,879 --> 00:02:42,879
identities at the same time

72
00:02:42,879 --> 00:02:46,160
uh to consume uh ads and uh streaming

73
00:02:46,160 --> 00:02:48,080
our

74
00:02:48,080 --> 00:02:49,519
tv as well

75
00:02:49,519 --> 00:02:53,519
and the bot operators was using um that

76
00:02:53,519 --> 00:02:56,400
kind of a huge scale of the botnet to

77
00:02:56,400 --> 00:02:57,440
render

78
00:02:57,440 --> 00:03:00,000
ads as well as

79
00:03:00,000 --> 00:03:01,519
on the higher prices for the ctv

80
00:03:01,519 --> 00:03:02,720
advertisement

81
00:03:02,720 --> 00:03:04,959
to cash in a lot of money

82
00:03:04,959 --> 00:03:06,159
as a result

83
00:03:06,159 --> 00:03:08,000
and uh

84
00:03:08,000 --> 00:03:10,800
towards the 30 days about like 30 days

85
00:03:10,800 --> 00:03:13,840
uh when we took down the botnet we uh

86
00:03:13,840 --> 00:03:16,159
saw the average of the 650 million bit

87
00:03:16,159 --> 00:03:18,400
requests per day

88
00:03:18,400 --> 00:03:20,560
and if we go more

89
00:03:20,560 --> 00:03:23,599
to the technical side of the

90
00:03:23,599 --> 00:03:24,720
apps

91
00:03:24,720 --> 00:03:26,400
the android app forces in fact the

92
00:03:26,400 --> 00:03:28,799
devices visit urls

93
00:03:28,799 --> 00:03:30,879
specified by the operator

94
00:03:30,879 --> 00:03:34,159
in the specific sdk named toptop sdk

95
00:03:34,159 --> 00:03:37,120
uh for the simplicity i will use this

96
00:03:37,120 --> 00:03:39,440
flashlight analyte app and the newest

97
00:03:39,440 --> 00:03:41,840
version of the sdk that is available on

98
00:03:41,840 --> 00:03:43,280
the marketplace

99
00:03:43,280 --> 00:03:47,120
um the toptop sdk matured for the

100
00:03:47,120 --> 00:03:48,959
multiple stages of

101
00:03:48,959 --> 00:03:50,640
how the

102
00:03:50,640 --> 00:03:51,519
button

103
00:03:51,519 --> 00:03:52,879
campaign was

104
00:03:52,879 --> 00:03:53,920
um

105
00:03:53,920 --> 00:03:55,920
handling everything so it started with

106
00:03:55,920 --> 00:03:59,120
this simple clicker with the user agent

107
00:03:59,120 --> 00:04:00,400
spoofing and

108
00:04:00,400 --> 00:04:02,799
it blew uh to the

109
00:04:02,799 --> 00:04:03,760
full

110
00:04:03,760 --> 00:04:06,239
ssl emulation stack

111
00:04:06,239 --> 00:04:08,400
they topped up sdk included in several

112
00:04:08,400 --> 00:04:11,360
apps not all of them and we found a lot

113
00:04:11,360 --> 00:04:13,439
of apps that are still available on the

114
00:04:13,439 --> 00:04:15,920
google play store and most of them are

115
00:04:15,920 --> 00:04:18,560
gaming and some basic functionality like

116
00:04:18,560 --> 00:04:20,320
a flashlight

117
00:04:20,320 --> 00:04:23,120
for example this flashlight analyte app

118
00:04:23,120 --> 00:04:24,080
are

119
00:04:24,080 --> 00:04:26,400
claimed to be ad-free but when we

120
00:04:26,400 --> 00:04:28,160
examined on the dynamic analysis as well

121
00:04:28,160 --> 00:04:30,080
as static analysis we saw in the

122
00:04:30,080 --> 00:04:32,560
background in the traffic there was a

123
00:04:32,560 --> 00:04:36,400
huge load of traffic stated with ads

124
00:04:36,400 --> 00:04:39,040
but mostly fake ad impressions to cash

125
00:04:39,040 --> 00:04:40,800
in the money but not actually rendering

126
00:04:40,800 --> 00:04:43,520
any ads on the display so it was all

127
00:04:43,520 --> 00:04:45,919
fake ad impressions

128
00:04:45,919 --> 00:04:47,680
the top type sdk there is the two

129
00:04:47,680 --> 00:04:50,080
versions of sdk the older version is

130
00:04:50,080 --> 00:04:52,479
more open as you can see all the strings

131
00:04:52,479 --> 00:04:54,560
and methods and classes are more open

132
00:04:54,560 --> 00:04:57,680
are easy to search on and to connect the

133
00:04:57,680 --> 00:04:59,680
dots the newest version is more

134
00:04:59,680 --> 00:05:01,440
obfuscated

135
00:05:01,440 --> 00:05:04,240
there's only two

136
00:05:04,240 --> 00:05:06,080
classes were open

137
00:05:06,080 --> 00:05:07,680
as you can see on the earlier version

138
00:05:07,680 --> 00:05:10,240
there is a click url service this is in

139
00:05:10,240 --> 00:05:13,280
the flashlight so why the flashlight app

140
00:05:13,280 --> 00:05:16,320
needs to click urls

141
00:05:16,320 --> 00:05:18,080
in the new sdk there is like two

142
00:05:18,080 --> 00:05:20,160
services they start service receiver and

143
00:05:20,160 --> 00:05:23,759
they run run task service um

144
00:05:23,759 --> 00:05:26,400
if we go back to the uh stat service

145
00:05:26,400 --> 00:05:28,960
receiver it's basically the extension

146
00:05:28,960 --> 00:05:31,039
android extension of the broad cast

147
00:05:31,039 --> 00:05:34,080
receiver that essentially triggers the

148
00:05:34,080 --> 00:05:38,000
uh automatic c2 um communication and

149
00:05:38,000 --> 00:05:40,960
pinning the c2 on boot

150
00:05:40,960 --> 00:05:43,039
this behaves like a persistent mechanism

151
00:05:43,039 --> 00:05:46,560
to um allow the apps to get new batch

152
00:05:46,560 --> 00:05:49,520
off job as well as the payload

153
00:05:49,520 --> 00:05:53,759
and work for every 30 seconds and

154
00:05:53,759 --> 00:05:56,400
yeah so here like every 30 seconds

155
00:05:56,400 --> 00:05:57,840
um

156
00:05:57,840 --> 00:05:58,639
that

157
00:05:58,639 --> 00:06:00,800
it will pin to the c2

158
00:06:00,800 --> 00:06:02,639
and

159
00:06:02,639 --> 00:06:05,280
so deeper in the app code there is we

160
00:06:05,280 --> 00:06:06,479
can find the

161
00:06:06,479 --> 00:06:09,520
uh base64 encoded string which is points

162
00:06:09,520 --> 00:06:13,120
to the master c2 url and it also

163
00:06:13,120 --> 00:06:16,240
initialize the shear references property

164
00:06:16,240 --> 00:06:18,319
with the default values for

165
00:06:18,319 --> 00:06:19,680
spoofing

166
00:06:19,680 --> 00:06:22,400
of various ctv devices

167
00:06:22,400 --> 00:06:24,960
as you can see there's like raku apple

168
00:06:24,960 --> 00:06:28,479
chromecast fire tv apple tv etc uh

169
00:06:28,479 --> 00:06:30,639
basically all that involved in the

170
00:06:30,639 --> 00:06:34,319
botnet campaign uh the older version uh

171
00:06:34,319 --> 00:06:37,600
doesn't uh has that much encoding uh

172
00:06:37,600 --> 00:06:40,639
it's also used the base64 algorithm but

173
00:06:40,639 --> 00:06:42,720
it's only in newer version they only

174
00:06:42,720 --> 00:06:45,360
tried to hide these c2s but not

175
00:06:45,360 --> 00:06:47,039
uh it was more like on the plane side

176
00:06:47,039 --> 00:06:50,639
rather than the encoding uh and

177
00:06:50,639 --> 00:06:51,599
go back

178
00:06:51,599 --> 00:06:54,240
uh the master studio contains two fields

179
00:06:54,240 --> 00:06:56,319
of additional configuration for cypher

180
00:06:56,319 --> 00:06:58,160
spoofing as well as the separate c2

181
00:06:58,160 --> 00:07:00,240
endpoints from which all the apps are in

182
00:07:00,240 --> 00:07:02,880
the operation can pull work uh so both

183
00:07:02,880 --> 00:07:06,160
surface and uh data fields require us to

184
00:07:06,160 --> 00:07:08,400
do the custom solutions so we remove the

185
00:07:08,400 --> 00:07:10,240
first 10 bytes

186
00:07:10,240 --> 00:07:13,360
of the screen in order to make it 64

187
00:07:13,360 --> 00:07:16,639
a base64 compliant and when you decode

188
00:07:16,639 --> 00:07:19,199
the um

189
00:07:19,199 --> 00:07:20,080
string

190
00:07:20,080 --> 00:07:22,400
you can see um there is

191
00:07:22,400 --> 00:07:24,800
data fields that at least apps as well

192
00:07:24,800 --> 00:07:28,080
as respective endpoints and based on the

193
00:07:28,080 --> 00:07:30,160
information we receive from the file the

194
00:07:30,160 --> 00:07:32,319
team

195
00:07:32,319 --> 00:07:34,800
of me included was able to identify the

196
00:07:34,800 --> 00:07:36,880
apps that contain

197
00:07:36,880 --> 00:07:39,199
top top sdk as well as libraries not all

198
00:07:39,199 --> 00:07:41,520
of the apps were containing any

199
00:07:41,520 --> 00:07:44,240
references to to it but there is like uh

200
00:07:44,240 --> 00:07:45,840
definitely communication going to the

201
00:07:45,840 --> 00:07:49,120
same situ but what we think it was is

202
00:07:49,120 --> 00:07:51,520
that the attackers and fraudsters on the

203
00:07:51,520 --> 00:07:54,319
botnet were testing the waters how the

204
00:07:54,319 --> 00:07:56,639
google play store will defend against

205
00:07:56,639 --> 00:07:58,960
that kind of fraud

206
00:07:58,960 --> 00:08:01,520
and it turns out google plays don't have

207
00:08:01,520 --> 00:08:03,759
any defense on that rod

208
00:08:03,759 --> 00:08:05,360
so they just continue to use the same

209
00:08:05,360 --> 00:08:08,160
sdk as well as loading apps with the

210
00:08:08,160 --> 00:08:10,479
newer version with more obfuscation to

211
00:08:10,479 --> 00:08:13,280
avoid deduction and also if we re

212
00:08:13,280 --> 00:08:15,520
visiting the urls and covered in the two

213
00:08:15,520 --> 00:08:18,720
fields uh json uh that is also not

214
00:08:18,720 --> 00:08:21,039
logical for by default so it's various

215
00:08:21,039 --> 00:08:23,280
by the device

216
00:08:23,280 --> 00:08:24,800
uh

217
00:08:24,800 --> 00:08:26,960
instead we all

218
00:08:26,960 --> 00:08:30,080
created the customize solution decrypter

219
00:08:30,080 --> 00:08:32,240
that um

220
00:08:32,240 --> 00:08:36,240
basically um custom decryption routine

221
00:08:36,240 --> 00:08:37,919
what you can see is a simple

222
00:08:37,919 --> 00:08:41,760
implementation of is cbc encryption with

223
00:08:41,760 --> 00:08:43,919
the hard-coded key

224
00:08:43,919 --> 00:08:45,839
and decryption requires

225
00:08:45,839 --> 00:08:46,640
us

226
00:08:46,640 --> 00:08:49,440
so as you can see here with some padding

227
00:08:49,440 --> 00:08:50,720
um

228
00:08:50,720 --> 00:08:52,399
the question requires pulling the

229
00:08:52,399 --> 00:08:54,800
snippet out and running it over json

230
00:08:54,800 --> 00:08:57,519
response uh from the receipt from the

231
00:08:57,519 --> 00:08:59,920
server

232
00:09:01,279 --> 00:09:04,640
okay so because we were able to

233
00:09:04,640 --> 00:09:07,839
uncover the urls visiting urls uh was

234
00:09:07,839 --> 00:09:10,480
not giving us any note for worthy or

235
00:09:10,480 --> 00:09:13,120
interesting insights so instead we what

236
00:09:13,120 --> 00:09:15,920
we did is we dynamically forced a

237
00:09:15,920 --> 00:09:20,880
detonation of the sample to uncover more

238
00:09:20,880 --> 00:09:24,320
insights from dynamic and static point

239
00:09:24,320 --> 00:09:26,399
and for the further static analysis

240
00:09:26,399 --> 00:09:29,200
revealed that uh there is a

241
00:09:29,200 --> 00:09:31,760
glimpse of what we can expect as the

242
00:09:31,760 --> 00:09:34,560
response from the c2 and

243
00:09:34,560 --> 00:09:36,240
even though it's a little bit hard-coded

244
00:09:36,240 --> 00:09:37,440
like um

245
00:09:37,440 --> 00:09:40,080
hardcore for the flashlight app uh they

246
00:09:40,080 --> 00:09:42,000
leveraged the custom

247
00:09:42,000 --> 00:09:46,000
tls um stack and http client they also

248
00:09:46,000 --> 00:09:48,959
used um full header and cypher control

249
00:09:48,959 --> 00:09:51,600
for the communication and uh towards the

250
00:09:51,600 --> 00:09:55,440
end they also spoof the device's

251
00:09:55,440 --> 00:09:58,399
configurations and uh characteristics

252
00:09:58,399 --> 00:10:00,880
such as windows dimensions because since

253
00:10:00,880 --> 00:10:04,320
all of this is on android phones but

254
00:10:04,320 --> 00:10:06,320
they were spoofing these ctv devices

255
00:10:06,320 --> 00:10:08,399
like tvs so they need to know the

256
00:10:08,399 --> 00:10:11,040
dimension of the windows to make it

257
00:10:11,040 --> 00:10:13,360
seem like it's actual tv not the android

258
00:10:13,360 --> 00:10:14,320
phone

259
00:10:14,320 --> 00:10:17,200
um so initially all of these were done

260
00:10:17,200 --> 00:10:20,880
through the fine control of the http 3

261
00:10:20,880 --> 00:10:23,920
library and as time passed attackers got

262
00:10:23,920 --> 00:10:25,680
more sophisticated

263
00:10:25,680 --> 00:10:27,360
they increased their

264
00:10:27,360 --> 00:10:29,839
capabilities and to avoid deduction and

265
00:10:29,839 --> 00:10:32,640
they started to work on their own https

266
00:10:32,640 --> 00:10:34,959
client and as you can see on the

267
00:10:34,959 --> 00:10:37,360
screenshots here

268
00:10:37,360 --> 00:10:40,000
there is the current

269
00:10:40,000 --> 00:10:41,839
code with the custom https

270
00:10:41,839 --> 00:10:44,800
implementation and on this slide you can

271
00:10:44,800 --> 00:10:48,240
see the features of the owned cipher uh

272
00:10:48,240 --> 00:10:50,079
implementation as well as uh protocol

273
00:10:50,079 --> 00:10:52,560
customization and this is all the setup

274
00:10:52,560 --> 00:10:56,560
for these uh software and the protocols

275
00:10:56,560 --> 00:10:58,320
in-app

276
00:10:58,320 --> 00:11:00,079
and since the workbook from the server

277
00:11:00,079 --> 00:11:02,160
gets uh routed through the libraries of

278
00:11:02,160 --> 00:11:03,360
the custom

279
00:11:03,360 --> 00:11:07,040
http 3 uh implementation uh depending on

280
00:11:07,040 --> 00:11:09,680
the device um as you can see here the

281
00:11:09,680 --> 00:11:10,560
from

282
00:11:10,560 --> 00:11:14,160
fromcast or the apple tv it will pull

283
00:11:14,160 --> 00:11:16,880
the needed information and it will be

284
00:11:16,880 --> 00:11:20,000
different cipher for each device

285
00:11:20,000 --> 00:11:21,760
and will be a different configuration as

286
00:11:21,760 --> 00:11:22,640
well

287
00:11:22,640 --> 00:11:25,519
the device string gets routed to

288
00:11:25,519 --> 00:11:27,680
the backed switch statement uh that

289
00:11:27,680 --> 00:11:32,000
needs to um go to the okay uh okay okay

290
00:11:32,000 --> 00:11:35,600
http connection spec and in uh this is

291
00:11:35,600 --> 00:11:37,440
done in order to

292
00:11:37,440 --> 00:11:39,600
make sure that there it's uh there is no

293
00:11:39,600 --> 00:11:42,000
um

294
00:11:42,000 --> 00:11:44,240
compatibility of the software that will

295
00:11:44,240 --> 00:11:46,800
be used later on in and

296
00:11:46,800 --> 00:11:47,440
the

297
00:11:47,440 --> 00:11:50,240
the cipher that library needs to um

298
00:11:50,240 --> 00:11:52,000
introduce later on

299
00:11:52,000 --> 00:11:56,480
uh and if you look here uh the um while

300
00:11:56,480 --> 00:11:59,839
the default um

301
00:11:59,839 --> 00:12:02,959
http connect connection spec uh was not

302
00:12:02,959 --> 00:12:05,920
modified at all they did tampered with

303
00:12:05,920 --> 00:12:08,240
the default interceptor

304
00:12:08,240 --> 00:12:10,880
for the soccer level in order to um add

305
00:12:10,880 --> 00:12:14,959
more roku edge uh apps and cases and uh

306
00:12:14,959 --> 00:12:17,920
the extra rocobytes were um not sent

307
00:12:17,920 --> 00:12:20,160
over the socket in the vanilla library

308
00:12:20,160 --> 00:12:22,959
uh through the android but while it was

309
00:12:22,959 --> 00:12:24,399
tempered version they

310
00:12:24,399 --> 00:12:26,079
took a little bit more extra work and

311
00:12:26,079 --> 00:12:28,240
extra steps to make sure that it's the

312
00:12:28,240 --> 00:12:30,560
emulation of the behavior it's as close

313
00:12:30,560 --> 00:12:32,880
as possible to the real devices

314
00:12:32,880 --> 00:12:36,959
uh and as you can note in here the c

315
00:12:36,959 --> 00:12:39,120
zero 75 f socket

316
00:12:39,120 --> 00:12:41,440
uh they uh they use the socket object

317
00:12:41,440 --> 00:12:43,760
inside of the interceptor and this is

318
00:12:43,760 --> 00:12:46,480
essentially an extension of the socket

319
00:12:46,480 --> 00:12:49,760
uh they use to spoof the um tls traffic

320
00:12:49,760 --> 00:12:52,800
on various ctb devices and by batching

321
00:12:52,800 --> 00:12:54,480
the aug http

322
00:12:54,480 --> 00:12:57,279
client and implement interceptor

323
00:12:57,279 --> 00:12:59,839
and the library of the tcp traffic

324
00:12:59,839 --> 00:13:02,320
block level control over

325
00:13:02,320 --> 00:13:04,240
flow of the data

326
00:13:04,240 --> 00:13:05,519
we can say

327
00:13:05,519 --> 00:13:08,079
the inside the implementation of various

328
00:13:08,079 --> 00:13:11,279
ciphers as see you can see here

329
00:13:11,279 --> 00:13:14,399
uh that are precisely used among the uh

330
00:13:14,399 --> 00:13:16,560
ctv devices

331
00:13:16,560 --> 00:13:19,600
the c2 server has the ability to dictate

332
00:13:19,600 --> 00:13:22,959
uh how the android centered uh

333
00:13:22,959 --> 00:13:25,920
phones present itself to the ad server

334
00:13:25,920 --> 00:13:29,040
so it will mimic as possible

335
00:13:29,040 --> 00:13:30,399
as

336
00:13:30,399 --> 00:13:33,760
it could to make sure that it's

337
00:13:33,760 --> 00:13:35,839
present to its server as the streaming

338
00:13:35,839 --> 00:13:38,639
uh tv device not the android phone uh

339
00:13:38,639 --> 00:13:41,199
and uh this was possible through these

340
00:13:41,199 --> 00:13:43,920
all those million of noise uh uh no

341
00:13:43,920 --> 00:13:45,680
knots in of the

342
00:13:45,680 --> 00:13:46,720
phones

343
00:13:46,720 --> 00:13:48,720
uh to pretend to be a consumer of the

344
00:13:48,720 --> 00:13:50,959
stream products and the co-chose the

345
00:13:50,959 --> 00:13:54,240
operator of the botnet also uh modified

346
00:13:54,240 --> 00:13:57,279
the security parameters to make it um

347
00:13:57,279 --> 00:13:59,600
configurable and they want to ensure the

348
00:13:59,600 --> 00:14:01,760
all the android

349
00:14:01,760 --> 00:14:04,720
generated traffic correctly impersonate

350
00:14:04,720 --> 00:14:07,839
on the popular streaming tv platforms

351
00:14:07,839 --> 00:14:09,199
um so

352
00:14:09,199 --> 00:14:11,360
the nearly 1 million

353
00:14:11,360 --> 00:14:13,600
android phones were pinning every 30

354
00:14:13,600 --> 00:14:15,440
seconds to the c2

355
00:14:15,440 --> 00:14:18,320
using the top top sdk inside of them and

356
00:14:18,320 --> 00:14:21,120
acting as notes of the botnet um they

357
00:14:21,120 --> 00:14:24,240
were also uh impersonating a lot of fun

358
00:14:24,240 --> 00:14:26,079
identities inside of it so for example

359
00:14:26,079 --> 00:14:27,680
one phone can have

360
00:14:27,680 --> 00:14:29,120
apple tv

361
00:14:29,120 --> 00:14:31,600
lg smart tv or others

362
00:14:31,600 --> 00:14:33,120
and

363
00:14:33,120 --> 00:14:34,639
the

364
00:14:34,639 --> 00:14:37,519
rather than show the ad the top top sdk

365
00:14:37,519 --> 00:14:38,720
will

366
00:14:38,720 --> 00:14:39,760
spoof

367
00:14:39,760 --> 00:14:42,639
the device it will merely

368
00:14:42,639 --> 00:14:45,040
reported apis that were chosen for the

369
00:14:45,040 --> 00:14:46,959
uh this precise ad

370
00:14:46,959 --> 00:14:49,600
and uh it will fake the um

371
00:14:49,600 --> 00:14:52,800
impression of the advertisement and will

372
00:14:52,800 --> 00:14:55,519
say that is shown but in reality no ads

373
00:14:55,519 --> 00:14:57,360
were displayed or shown at all so it

374
00:14:57,360 --> 00:14:59,600
will just a response for that the ads

375
00:14:59,600 --> 00:15:01,760
were shown and get the money from the

376
00:15:01,760 --> 00:15:03,120
advertisement

377
00:15:03,120 --> 00:15:04,160
um

378
00:15:04,160 --> 00:15:06,880
and also the um

379
00:15:06,880 --> 00:15:08,959
botnet apparatus took a little extra

380
00:15:08,959 --> 00:15:11,440
step for the security so all of this was

381
00:15:11,440 --> 00:15:12,720
um

382
00:15:12,720 --> 00:15:15,040
uh

383
00:15:15,360 --> 00:15:18,800
dynamically configurable uh on the um

384
00:15:18,800 --> 00:15:21,920
life so whatever uh they see um that

385
00:15:21,920 --> 00:15:24,240
there is imbalance of the like what's uh

386
00:15:24,240 --> 00:15:26,079
streaming devices they are spoofing they

387
00:15:26,079 --> 00:15:28,720
will adjust the settings so all the uh

388
00:15:28,720 --> 00:15:30,320
to avoid deductions so they will adjust

389
00:15:30,320 --> 00:15:31,839
the settings to make sure that it's not

390
00:15:31,839 --> 00:15:35,279
detected at all and they will make sure

391
00:15:35,279 --> 00:15:38,720
that some of the phones will do xyz

392
00:15:38,720 --> 00:15:39,680
streaming

393
00:15:39,680 --> 00:15:41,759
services the other ones do the other one

394
00:15:41,759 --> 00:15:44,000
as well as the configuration and the

395
00:15:44,000 --> 00:15:48,079
settings of the device to make sure that

396
00:15:48,079 --> 00:15:51,040
nobody will get it caught

397
00:15:51,040 --> 00:15:53,199
well basically balance it out

398
00:15:53,199 --> 00:15:56,880
and also they took an extra step of the

399
00:15:56,880 --> 00:15:59,440
fraud deduction

400
00:15:59,440 --> 00:16:01,600
verification providers

401
00:16:01,600 --> 00:16:04,160
so if you check the

402
00:16:04,160 --> 00:16:07,120
most popular fraud verification

403
00:16:07,120 --> 00:16:10,399
systems it will not detect plato apps as

404
00:16:10,399 --> 00:16:12,480
defraud

405
00:16:12,480 --> 00:16:16,240
and about rocofoco separation

406
00:16:16,240 --> 00:16:18,560
it's

407
00:16:18,959 --> 00:16:21,279
pinning to the same situ as the android

408
00:16:21,279 --> 00:16:24,160
base as you can see here the uh amina

409
00:16:24,160 --> 00:16:26,480
day.com is the same situ that is used

410
00:16:26,480 --> 00:16:28,880
for the android apps and the developer

411
00:16:28,880 --> 00:16:31,680
that stayed for the um

412
00:16:31,680 --> 00:16:33,680
developed the roku focused

413
00:16:33,680 --> 00:16:37,040
operation and apps is the patio and in

414
00:16:37,040 --> 00:16:40,160
their privacy policy they reference the

415
00:16:40,160 --> 00:16:42,880
top top media which is the brand behind

416
00:16:42,880 --> 00:16:46,079
the top top sdk

417
00:16:46,240 --> 00:16:47,360
and

418
00:16:47,360 --> 00:16:49,279
yeah they also share the configuration

419
00:16:49,279 --> 00:16:51,680
with the android centered

420
00:16:51,680 --> 00:16:54,638
part of the botnet

421
00:16:55,600 --> 00:16:57,600
of course it's the um

422
00:16:57,600 --> 00:16:59,759
i can't share a lot of the for the

423
00:16:59,759 --> 00:17:01,120
attribution because it's ongoing

424
00:17:01,120 --> 00:17:03,279
investigation and we took a illegal

425
00:17:03,279 --> 00:17:05,520
action against the threat actors but

426
00:17:05,520 --> 00:17:06,640
what i can

427
00:17:06,640 --> 00:17:09,199
share today is that

428
00:17:09,199 --> 00:17:11,039
the top top media brand

429
00:17:11,039 --> 00:17:13,839
is responsible for the development of

430
00:17:13,839 --> 00:17:17,119
the toptop sdk as well as the

431
00:17:17,119 --> 00:17:18,559
stays behind the

432
00:17:18,559 --> 00:17:22,240
palladium raku developer and there is a

433
00:17:22,240 --> 00:17:24,480
solid evidence in the traffic as well as

434
00:17:24,480 --> 00:17:26,720
the uh encode

435
00:17:26,720 --> 00:17:29,200
the references of to the either top top

436
00:17:29,200 --> 00:17:31,919
media or their reference or shorter name

437
00:17:31,919 --> 00:17:34,080
as ttm as you can see here in the

438
00:17:34,080 --> 00:17:37,679
traffic or of here in sdk

439
00:17:37,679 --> 00:17:39,039
and

440
00:17:39,039 --> 00:17:39,840
to

441
00:17:39,840 --> 00:17:41,200
happy news

442
00:17:41,200 --> 00:17:43,840
we took down the botnet

443
00:17:43,840 --> 00:17:44,640
and

444
00:17:44,640 --> 00:17:47,280
the takeaway as we develop algorithm how

445
00:17:47,280 --> 00:17:49,520
to protect our customers as well as

446
00:17:49,520 --> 00:17:50,559
partners

447
00:17:50,559 --> 00:17:51,679
and we

448
00:17:51,679 --> 00:17:54,080
notified both google and raw cost stores

449
00:17:54,080 --> 00:17:56,400
to remove all the apps from these stores

450
00:17:56,400 --> 00:17:59,360
and to adjust their defenses against the

451
00:17:59,360 --> 00:18:01,520
unprecedented attacks on these ctv

452
00:18:01,520 --> 00:18:04,480
devices and we shared in all his finest

453
00:18:04,480 --> 00:18:06,720
with the law enforcement to uh

454
00:18:06,720 --> 00:18:09,679
persecuted threat actors behind that and

455
00:18:09,679 --> 00:18:12,480
we also enhanced the

456
00:18:12,480 --> 00:18:14,160
standards for the uh device

457
00:18:14,160 --> 00:18:16,320
manufacturers impacted by the pareto so

458
00:18:16,320 --> 00:18:18,720
they uh have more um like better

459
00:18:18,720 --> 00:18:21,280
defenses against uh such attacks and uh

460
00:18:21,280 --> 00:18:23,280
including predator as well

461
00:18:23,280 --> 00:18:24,240
and

462
00:18:24,240 --> 00:18:26,559
um if you're curious about the ioc as

463
00:18:26,559 --> 00:18:28,880
well as the white paper uh there is two

464
00:18:28,880 --> 00:18:31,360
blog posts on our website you can check

465
00:18:31,360 --> 00:18:33,520
it out where there is no malware you can

466
00:18:33,520 --> 00:18:37,120
see you can safely scan the code and uh

467
00:18:37,120 --> 00:18:38,960
yeah that's it there you can find me on

468
00:18:38,960 --> 00:18:42,480
linkedin and um open for the questions

469
00:18:42,480 --> 00:18:43,210
thank you

470
00:18:43,210 --> 00:18:49,679
[Applause]

471
00:18:49,679 --> 00:18:50,640
okay

472
00:18:50,640 --> 00:18:54,320
there's a question in the back

473
00:18:55,280 --> 00:18:57,679
hello very okay presentation i've got a

474
00:18:57,679 --> 00:19:00,480
question on the tls kind of spoofing

475
00:19:00,480 --> 00:19:01,919
that has been done

476
00:19:01,919 --> 00:19:03,840
in this malware

477
00:19:03,840 --> 00:19:06,400
do you know if from a network standpoint

478
00:19:06,400 --> 00:19:08,840
of the gs3 signature

479
00:19:08,840 --> 00:19:10,400
of

480
00:19:10,400 --> 00:19:13,120
the client has been modified to mimic

481
00:19:13,120 --> 00:19:14,160
the

482
00:19:14,160 --> 00:19:16,240
the one they want to spoof

483
00:19:16,240 --> 00:19:17,039
yes

484
00:19:17,039 --> 00:19:19,600
so they try to make it as close to real

485
00:19:19,600 --> 00:19:21,600
devices as possible so they do they did

486
00:19:21,600 --> 00:19:23,600
modify the data as well the fourth

487
00:19:23,600 --> 00:19:25,919
practical

488
00:19:25,919 --> 00:19:28,080
so basically that's the reason how they

489
00:19:28,080 --> 00:19:30,240
were not under not deducted by the

490
00:19:30,240 --> 00:19:32,799
providers

491
00:19:34,160 --> 00:19:37,640
another question

492
00:19:38,880 --> 00:19:42,000
another question

493
00:19:45,360 --> 00:19:48,080
okay thank you very much

494
00:19:48,080 --> 00:19:52,640
[Applause]

495
00:19:52,640 --> 00:19:54,720
you

