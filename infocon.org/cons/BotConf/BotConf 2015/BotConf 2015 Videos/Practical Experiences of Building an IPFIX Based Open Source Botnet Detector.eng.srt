1
00:00:00,000 --> 00:00:03,120
okay we're going to start again for the

2
00:00:03,120 --> 00:00:06,180
last session of the the afternoon with

3
00:00:06,180 --> 00:00:10,849
mark gray hem on IP fix based detection

4
00:00:10,849 --> 00:00:20,130
you have the floor okay so yeah we're

5
00:00:20,130 --> 00:00:23,100
into the last session and I don't want

6
00:00:23,100 --> 00:00:24,630
to disappoint everybody but I have no

7
00:00:24,630 --> 00:00:28,800
IDE a pro I have no DGA I have no mobile

8
00:00:28,800 --> 00:00:31,019
botnets I have a tiny little bit about

9
00:00:31,019 --> 00:00:33,750
DNS but I have a lot about network

10
00:00:33,750 --> 00:00:36,450
management protocols so what I know

11
00:00:36,450 --> 00:00:39,329
taught you today is about a testbed that

12
00:00:39,329 --> 00:00:41,059
we've been building to see whether

13
00:00:41,059 --> 00:00:44,010
network management protocols can have

14
00:00:44,010 --> 00:00:46,530
any reasonable impact on botnet

15
00:00:46,530 --> 00:00:50,879
detection so a quick summary of what

16
00:00:50,879 --> 00:00:52,199
we're going to talk about our likes to

17
00:00:52,199 --> 00:00:54,210
outline the research problem that we've

18
00:00:54,210 --> 00:00:55,469
been looking at we're looking at cloud

19
00:00:55,469 --> 00:00:57,690
provider networks I'll explain why in a

20
00:00:57,690 --> 00:01:00,149
moment I'm gonna talk quite a little bit

21
00:01:00,149 --> 00:01:04,500
about IP fix and flow hands up who's

22
00:01:04,500 --> 00:01:08,040
heard of IP fix ok good that's more than

23
00:01:08,040 --> 00:01:08,850
I was expecting

24
00:01:08,850 --> 00:01:12,330
ok hands up if you had a net flow yeah

25
00:01:12,330 --> 00:01:15,810
good ok lots of people are ok so we'll

26
00:01:15,810 --> 00:01:17,700
talk about the differences there and

27
00:01:17,700 --> 00:01:18,869
we'll then we'll talk a little bit about

28
00:01:18,869 --> 00:01:20,720
the build environment that we've created

29
00:01:20,720 --> 00:01:22,799
then I'll talk to you about some of the

30
00:01:22,799 --> 00:01:24,360
results that we've started to get and

31
00:01:24,360 --> 00:01:26,250
provide in those time at the end we'll

32
00:01:26,250 --> 00:01:30,750
talk about some conclusions so I'm a PhD

33
00:01:30,750 --> 00:01:32,970
student Anglia Ruskin University in

34
00:01:32,970 --> 00:01:35,250
Cambridge I'm just about to enter my

35
00:01:35,250 --> 00:01:37,409
final year so it's all getting very

36
00:01:37,409 --> 00:01:40,320
exciting for me and I'm studying botnet

37
00:01:40,320 --> 00:01:42,570
detection within virtual environments so

38
00:01:42,570 --> 00:01:44,520
this is a talk really about some of the

39
00:01:44,520 --> 00:01:45,869
work we're doing and how that fits into

40
00:01:45,869 --> 00:01:47,430
some of the bigger plans around V Ruskin

41
00:01:47,430 --> 00:01:49,040
University

42
00:01:49,040 --> 00:01:53,549
so the problem botnet detection within

43
00:01:53,549 --> 00:01:57,030
cloud service provider networks so just

44
00:01:57,030 --> 00:01:58,860
to be clear before we start I'm talking

45
00:01:58,860 --> 00:02:01,310
about cloud service providers such as

46
00:02:01,310 --> 00:02:04,740
Amazon AWS so we're talking about

47
00:02:04,740 --> 00:02:07,409
infrastructure as a service platform as

48
00:02:07,409 --> 00:02:09,389
a service software as a service I'm not

49
00:02:09,389 --> 00:02:11,970
talking about internet service providers

50
00:02:11,970 --> 00:02:13,440
you guys have already gone

51
00:02:13,440 --> 00:02:15,120
great DNS tools that you use for

52
00:02:15,120 --> 00:02:16,860
bottleneck takedown I'm not going to

53
00:02:16,860 --> 00:02:17,940
talk about that I'm going to talk about

54
00:02:17,940 --> 00:02:19,230
what we could possibly do for cloud

55
00:02:19,230 --> 00:02:24,300
service providers so why do we even want

56
00:02:24,300 --> 00:02:25,920
to look at cloud service provider in

57
00:02:25,920 --> 00:02:27,600
virus what's so special about these well

58
00:02:27,600 --> 00:02:30,090
um you know we're all being told that

59
00:02:30,090 --> 00:02:31,920
we're about to start down this journey

60
00:02:31,920 --> 00:02:33,990
down the internet of things or the

61
00:02:33,990 --> 00:02:36,000
internet of long abilities is probably

62
00:02:36,000 --> 00:02:38,400
going to turn out to be cool but for the

63
00:02:38,400 --> 00:02:39,600
Internet of Things we're gonna need

64
00:02:39,600 --> 00:02:41,970
somewhere to store our data that's

65
00:02:41,970 --> 00:02:43,980
central that we can easily receive it

66
00:02:43,980 --> 00:02:45,510
and we can easily store it and we can do

67
00:02:45,510 --> 00:02:47,340
all that good stuff so my belief is that

68
00:02:47,340 --> 00:02:49,440
the cloud is going to be that place the

69
00:02:49,440 --> 00:02:51,540
cloud is going to be very important

70
00:02:51,540 --> 00:02:52,530
building block for the Internet of

71
00:02:52,530 --> 00:02:55,380
Things and we'll talk about this a

72
00:02:55,380 --> 00:02:56,820
little bit at the moment but we've seen

73
00:02:56,820 --> 00:02:59,880
the cloud can be a platform from which

74
00:02:59,880 --> 00:03:01,770
to launch attacks so we've seen attacks

75
00:03:01,770 --> 00:03:04,800
from AWS amongst other cloud providers

76
00:03:04,800 --> 00:03:07,320
but cloud itself is what's so vulnerable

77
00:03:07,320 --> 00:03:09,630
and move we will talk about that so

78
00:03:09,630 --> 00:03:12,810
we've got quite we've got you know

79
00:03:12,810 --> 00:03:14,460
trying to build our platform we're

80
00:03:14,460 --> 00:03:16,200
trying to replicate what's in a cloud

81
00:03:16,200 --> 00:03:19,910
provider we've got two very tricky

82
00:03:19,910 --> 00:03:22,739
criteria that we've got to take into

83
00:03:22,739 --> 00:03:24,690
consideration so the first one is 10 and

84
00:03:24,690 --> 00:03:28,890
isolation so if I'm if I start up a VM

85
00:03:28,890 --> 00:03:34,290
on AWS it's almost guaranteed that I'm

86
00:03:34,290 --> 00:03:37,050
sharing a server with someone I don't

87
00:03:37,050 --> 00:03:39,750
know ok it's certainly sharing a data

88
00:03:39,750 --> 00:03:41,670
center with other tenants that I don't

89
00:03:41,670 --> 00:03:43,320
know and I don't trust so we need to

90
00:03:43,320 --> 00:03:44,850
provide some level of isolation between

91
00:03:44,850 --> 00:03:47,580
10 and a and 10 of B and we do that

92
00:03:47,580 --> 00:03:48,989
everybody knows we do that with

93
00:03:48,989 --> 00:03:52,530
virtualization we also have a privacy

94
00:03:52,530 --> 00:03:55,769
issue a potential privacy issue and I

95
00:03:55,769 --> 00:03:56,580
was having a very interesting

96
00:03:56,580 --> 00:03:57,630
conversation

97
00:03:57,630 --> 00:04:00,209
lunchtime about this and some

98
00:04:00,209 --> 00:04:02,519
legislations may Liam be changing but

99
00:04:02,519 --> 00:04:03,660
you know I'm going to talk about the

100
00:04:03,660 --> 00:04:06,810
privacy how this might impact a botnet

101
00:04:06,810 --> 00:04:09,330
detector and you know I think they

102
00:04:09,330 --> 00:04:10,500
raised some very interesting questions

103
00:04:10,500 --> 00:04:15,919
so in terms of privacy if I have a

104
00:04:15,919 --> 00:04:19,470
virtual environment I don't necessarily

105
00:04:19,470 --> 00:04:21,510
want that cloud provider to put some

106
00:04:21,510 --> 00:04:23,190
kind of detection device some kind of

107
00:04:23,190 --> 00:04:25,080
probe within my environment as far as

108
00:04:25,080 --> 00:04:27,370
I'm concerned that's my environment

109
00:04:27,370 --> 00:04:29,290
can do what I want to do in that if I

110
00:04:29,290 --> 00:04:32,050
proprietor I may be put in antivirus

111
00:04:32,050 --> 00:04:34,449
software I might be hosting a botnet I

112
00:04:34,449 --> 00:04:36,130
might not want antivirus software in

113
00:04:36,130 --> 00:04:37,960
there I certainly don't want a probe

114
00:04:37,960 --> 00:04:40,060
where the network provider is capturing

115
00:04:40,060 --> 00:04:41,949
my data because who knows what they're

116
00:04:41,949 --> 00:04:43,300
going to do with that they might want to

117
00:04:43,300 --> 00:04:46,540
sell that information to governments

118
00:04:46,540 --> 00:04:49,780
advertisers whoever so privacy within

119
00:04:49,780 --> 00:04:51,280
the environment we're talking about

120
00:04:51,280 --> 00:04:53,260
being able to create and some kind of

121
00:04:53,260 --> 00:04:55,120
detector mechanism outside of the

122
00:04:55,120 --> 00:05:03,190
virtual environment so over the past few

123
00:05:03,190 --> 00:05:06,810
years we have started to see attacks on

124
00:05:06,810 --> 00:05:09,160
cloud service providers we had a great

125
00:05:09,160 --> 00:05:11,620
talk yesterday about sandboxes and how

126
00:05:11,620 --> 00:05:13,690
malware can detect whether it's in a

127
00:05:13,690 --> 00:05:15,280
sandbox environment or not but there is

128
00:05:15,280 --> 00:05:17,260
actually malware out there that actively

129
00:05:17,260 --> 00:05:19,750
looks at virtual environments we can

130
00:05:19,750 --> 00:05:20,919
with the vulnerabilities in virtual

131
00:05:20,919 --> 00:05:22,539
environments so that it can attack them

132
00:05:22,539 --> 00:05:27,910
so we have a couple of entry points in a

133
00:05:27,910 --> 00:05:29,530
cloud service provider so malware could

134
00:05:29,530 --> 00:05:31,630
enter through the internet now I could

135
00:05:31,630 --> 00:05:32,830
enter through one of the virtual

136
00:05:32,830 --> 00:05:35,260
machines and if we have a disgruntled

137
00:05:35,260 --> 00:05:37,930
employee malware could enter via the lab

138
00:05:37,930 --> 00:05:40,900
so we've seen in the wild three types of

139
00:05:40,900 --> 00:05:42,610
attack luckily these have only been

140
00:05:42,610 --> 00:05:44,470
individual attacks and we haven't yet

141
00:05:44,470 --> 00:05:46,539
seen all these attacks combined but

142
00:05:46,539 --> 00:05:48,900
we've seen malware going from the lab

143
00:05:48,900 --> 00:05:53,110
into a server hypervisor exploiting the

144
00:05:53,110 --> 00:05:55,300
hypervisor we've seen malware jumping

145
00:05:55,300 --> 00:05:57,880
from one tenant VM into another tenant

146
00:05:57,880 --> 00:06:00,250
VM and we've also seemed malware jumping

147
00:06:00,250 --> 00:06:02,800
from the hypervisor back onto the land

148
00:06:02,800 --> 00:06:04,750
so that means now I could enter our

149
00:06:04,750 --> 00:06:07,030
network it could attack another tenant

150
00:06:07,030 --> 00:06:10,000
or I could even run a botnet from here

151
00:06:10,000 --> 00:06:11,650
and maybe denial of service on the

152
00:06:11,650 --> 00:06:13,690
storage network as well so you know

153
00:06:13,690 --> 00:06:17,080
clouds are going to become if they

154
00:06:17,080 --> 00:06:18,310
aren't already they're going to become

155
00:06:18,310 --> 00:06:20,560
victims as the Internet of Things starts

156
00:06:20,560 --> 00:06:25,210
to take off so flow okay so a few of you

157
00:06:25,210 --> 00:06:29,349
heard of IP fix probably most of you too

158
00:06:29,349 --> 00:06:30,550
young to remember this but back in the

159
00:06:30,550 --> 00:06:33,060
1980s simple network management protocol

160
00:06:33,060 --> 00:06:38,349
that got replaced by syslog syslog was a

161
00:06:38,349 --> 00:06:40,780
great network management protocol for

162
00:06:40,780 --> 00:06:41,110
Linux

163
00:06:41,110 --> 00:06:44,860
environments and it was a very efficient

164
00:06:44,860 --> 00:06:46,900
protocol but the downside of syslog was

165
00:06:46,900 --> 00:06:48,580
it not very doesn't give you a very

166
00:06:48,580 --> 00:06:50,350
structured data so it makes it quite

167
00:06:50,350 --> 00:06:52,600
difficult to actually query that data so

168
00:06:52,600 --> 00:06:56,260
in the late 19th and like 1990s cisco

169
00:06:56,260 --> 00:06:57,580
started to look into providing

170
00:06:57,580 --> 00:07:00,070
alternative network management protocols

171
00:07:00,070 --> 00:07:01,570
and they came up with the concept of net

172
00:07:01,570 --> 00:07:04,990
flow they the first commercial release

173
00:07:04,990 --> 00:07:08,830
was net 5 version 5 in 2009 they

174
00:07:08,830 --> 00:07:11,080
enhanced this to NetFlow version 9 and

175
00:07:11,080 --> 00:07:17,350
then in 2013 the IETF took NetFlow

176
00:07:17,350 --> 00:07:19,990
version 9 and transferred that made some

177
00:07:19,990 --> 00:07:21,490
made some changes to that and made that

178
00:07:21,490 --> 00:07:23,800
into the standard so the standard for

179
00:07:23,800 --> 00:07:27,400
network flow is IP fix and that could be

180
00:07:27,400 --> 00:07:30,040
found in RFC 7:01 one two seven zero one

181
00:07:30,040 --> 00:07:39,730
five so what is it about flow that we

182
00:07:39,730 --> 00:07:41,410
could potentially use in this type of

183
00:07:41,410 --> 00:07:42,880
environment so the first thing I want to

184
00:07:42,880 --> 00:07:44,050
say if we jump to the bottom of the

185
00:07:44,050 --> 00:07:47,680
slide is what I'm proposing we do isn't

186
00:07:47,680 --> 00:07:50,440
really new people have been using net

187
00:07:50,440 --> 00:07:54,670
flow 5 with some kind of peek at packet

188
00:07:54,670 --> 00:07:58,870
information since about 2007 so if you

189
00:07:58,870 --> 00:08:00,460
go onto Google Scholar and you put in

190
00:08:00,460 --> 00:08:02,050
something like bot hunter butt sniffer

191
00:08:02,050 --> 00:08:04,630
bot cop there's there's 2030 of these

192
00:08:04,630 --> 00:08:06,490
different detection techniques out there

193
00:08:06,490 --> 00:08:09,160
and what they do is they're using flow

194
00:08:09,160 --> 00:08:11,770
algorithm a flow protocol to capture

195
00:08:11,770 --> 00:08:13,840
fields that they're then going to put

196
00:08:13,840 --> 00:08:15,370
into their algorithms then go do some

197
00:08:15,370 --> 00:08:17,800
clustering some correlation and decide

198
00:08:17,800 --> 00:08:20,260
whether there's a botnet of botnets on

199
00:08:20,260 --> 00:08:24,820
the network from that information so you

200
00:08:24,820 --> 00:08:26,260
know this isn't new it's been around for

201
00:08:26,260 --> 00:08:29,170
a while we're looking at whether we I P

202
00:08:29,170 --> 00:08:32,110
fix has been designed to improve upon

203
00:08:32,110 --> 00:08:34,539
net flow therefore what extra benefits

204
00:08:34,539 --> 00:08:36,130
is IP fix going to give us in a type of

205
00:08:36,130 --> 00:08:40,840
environment so what is flow and how does

206
00:08:40,840 --> 00:08:43,570
it differ to things like pcap so

207
00:08:43,570 --> 00:08:46,090
everyone here I'm sure knows about P

208
00:08:46,090 --> 00:08:47,770
Kappa we've all used Wireshark we all

209
00:08:47,770 --> 00:08:49,750
know that when we have P cap we have the

210
00:08:49,750 --> 00:08:51,730
header information and we also have the

211
00:08:51,730 --> 00:08:54,430
payload so the fact that we have the

212
00:08:54,430 --> 00:08:55,420
payload means that

213
00:08:55,420 --> 00:08:57,370
we've got some kind of deep packet

214
00:08:57,370 --> 00:08:59,139
inspection or potential for deep packet

215
00:08:59,139 --> 00:09:01,180
inspection so again this goes back to

216
00:09:01,180 --> 00:09:02,050
what we're talking about the beginning

217
00:09:02,050 --> 00:09:04,720
of the talking and privacy the way that

218
00:09:04,720 --> 00:09:07,420
flow works is flow is just the header

219
00:09:07,420 --> 00:09:09,279
information so we don't care about the

220
00:09:09,279 --> 00:09:11,940
the payload that's kind of the the the

221
00:09:11,940 --> 00:09:16,180
metadata I guess if you like so we did

222
00:09:16,180 --> 00:09:17,800
an experiment first of all on our

223
00:09:17,800 --> 00:09:19,930
network to download a foot to transfer a

224
00:09:19,930 --> 00:09:22,389
file between two servers and that file

225
00:09:22,389 --> 00:09:24,699
was two point nine gigabits and we we

226
00:09:24,699 --> 00:09:26,350
captured that with Wireshark and that

227
00:09:26,350 --> 00:09:28,510
was 3.1 Giga bits of data because we had

228
00:09:28,510 --> 00:09:30,579
some background traffic we captured

229
00:09:30,579 --> 00:09:32,380
exactly the same amount of DOE there

230
00:09:32,380 --> 00:09:34,990
exactly the same information in IP fix

231
00:09:34,990 --> 00:09:38,079
in 43 kilobytes not megabytes kilobytes

232
00:09:38,079 --> 00:09:41,380
so for cloud service providers that have

233
00:09:41,380 --> 00:09:42,850
thousands of flows on their network

234
00:09:42,850 --> 00:09:45,430
every day that is a massive saving in

235
00:09:45,430 --> 00:09:48,850
terms of storage space and and potential

236
00:09:48,850 --> 00:09:51,399
analysis of that data later on so in

237
00:09:51,399 --> 00:09:54,540
summary we normally equate pcap to a

238
00:09:54,540 --> 00:09:57,670
phone call so between two people pcap is

239
00:09:57,670 --> 00:09:59,320
the content that phone call

240
00:09:59,320 --> 00:10:03,339
whereas flow tends to be equated to the

241
00:10:03,339 --> 00:10:05,079
phone bill so who called where who

242
00:10:05,079 --> 00:10:07,060
called who when they did it and for how

243
00:10:07,060 --> 00:10:09,279
long so pretty much the same information

244
00:10:09,279 --> 00:10:18,339
but without the the payload so as I said

245
00:10:18,339 --> 00:10:22,089
earlier cisco invented the protocol net

246
00:10:22,089 --> 00:10:26,019
flow and IP fix was developed to address

247
00:10:26,019 --> 00:10:28,000
some of the drawbacks of net flow now I

248
00:10:28,000 --> 00:10:29,380
know we have some guys from Cisco here

249
00:10:29,380 --> 00:10:32,199
so I apologize for some of the things I

250
00:10:32,199 --> 00:10:33,370
might say about net flow it's a great

251
00:10:33,370 --> 00:10:35,949
protocol but IP fix was developed to to

252
00:10:35,949 --> 00:10:37,750
address some of the the issues that we

253
00:10:37,750 --> 00:10:39,699
had with net flow one of the biggest

254
00:10:39,699 --> 00:10:43,870
issues is that flow is proprietary so

255
00:10:43,870 --> 00:10:46,750
Cisco have a version of net flow who are

256
00:10:46,750 --> 00:10:50,079
we have a version of net flow HP have a

257
00:10:50,079 --> 00:10:52,779
version etcetera etcetera etc okay so

258
00:10:52,779 --> 00:10:56,500
every version of net flow is is slightly

259
00:10:56,500 --> 00:10:58,930
different and we're almost back to the

260
00:10:58,930 --> 00:11:01,149
old days of in the Cisco network we had

261
00:11:01,149 --> 00:11:04,240
did you use tac-x do you use radius well

262
00:11:04,240 --> 00:11:05,649
if you have a Cisco network you can

263
00:11:05,649 --> 00:11:07,730
probably use net flow version

264
00:11:07,730 --> 00:11:09,560
if you have a multi vendor environment

265
00:11:09,560 --> 00:11:11,450
really you need to be looking at IP fix

266
00:11:11,450 --> 00:11:12,529
and certainly the environments that

267
00:11:12,529 --> 00:11:14,510
we're talking about is going to be multi

268
00:11:14,510 --> 00:11:17,089
vendor so IP fix gives us vendor

269
00:11:17,089 --> 00:11:21,410
neutrality IP fix is also extensible and

270
00:11:21,410 --> 00:11:25,360
what that means is you can create

271
00:11:25,360 --> 00:11:27,410
templates for what you want to capture

272
00:11:27,410 --> 00:11:30,140
so the way that NetFlow version 5 works

273
00:11:30,140 --> 00:11:34,190
is you have a net flow exporter and that

274
00:11:34,190 --> 00:11:37,279
captures the packet that takes field

275
00:11:37,279 --> 00:11:38,630
information from there from the head of

276
00:11:38,630 --> 00:11:40,010
the template information from the

277
00:11:40,010 --> 00:11:41,930
headers that converts it into net flow

278
00:11:41,930 --> 00:11:43,820
or IP fixed and that sends it to a

279
00:11:43,820 --> 00:11:45,290
collector somewhere else on the network

280
00:11:45,290 --> 00:11:46,850
which stores this data and we analyze

281
00:11:46,850 --> 00:11:49,820
that data after so net flow version five

282
00:11:49,820 --> 00:11:54,050
had a fixed template that had 18 fields

283
00:11:54,050 --> 00:11:56,060
in this template which included things

284
00:11:56,060 --> 00:12:00,700
like source destination IP address port

285
00:12:00,700 --> 00:12:03,080
protocol numbers that whatever you'd

286
00:12:03,080 --> 00:12:05,570
expect within a packet header but it

287
00:12:05,570 --> 00:12:07,010
also had stuff that you may not

288
00:12:07,010 --> 00:12:09,790
necessarily want to use like VLAN ID

289
00:12:09,790 --> 00:12:12,080
class of service those kind of things

290
00:12:12,080 --> 00:12:14,240
and because NetFlow version 5 is fixed

291
00:12:14,240 --> 00:12:16,400
you capture this information whether you

292
00:12:16,400 --> 00:12:17,180
want it or not

293
00:12:17,180 --> 00:12:19,250
ok so you have for every single flow you

294
00:12:19,250 --> 00:12:22,250
capture a 48 by PDE which doesn't sound

295
00:12:22,250 --> 00:12:24,050
like a lot but again scale that up to

296
00:12:24,050 --> 00:12:24,740
several million

297
00:12:24,740 --> 00:12:27,050
you've got potentially a lot of wasted

298
00:12:27,050 --> 00:12:28,700
data there that you you're capturing

299
00:12:28,700 --> 00:12:31,010
because you have no choice so net flow

300
00:12:31,010 --> 00:12:34,339
version 9 decided that we that they

301
00:12:34,339 --> 00:12:36,560
would add some kind of ability to create

302
00:12:36,560 --> 00:12:38,230
some templates you could start to choose

303
00:12:38,230 --> 00:12:40,940
from 79 different fields what you could

304
00:12:40,940 --> 00:12:43,339
actually capture an IP fix took that one

305
00:12:43,339 --> 00:12:45,800
stage further and said we've got 433

306
00:12:45,800 --> 00:12:47,570
fields that you can capture and guess

307
00:12:47,570 --> 00:12:48,740
what if there's anything else you want

308
00:12:48,740 --> 00:12:50,600
to capture as well you can write plugins

309
00:12:50,600 --> 00:12:53,990
to do that so IP fixes a lot more

310
00:12:53,990 --> 00:12:56,450
flexibility in what you can capture to

311
00:12:56,450 --> 00:13:00,560
report back to time allows for data net

312
00:13:00,560 --> 00:13:03,770
flow runs on UDP whereas IP fix runs

313
00:13:03,770 --> 00:13:06,320
astir by default on TCP but it also

314
00:13:06,320 --> 00:13:08,000
includes a lot of things good things

315
00:13:08,000 --> 00:13:10,550
like stream congestion control and those

316
00:13:10,550 --> 00:13:12,709
kind of things as well so it's it's a

317
00:13:12,709 --> 00:13:18,770
more robust protocol net flow didn't

318
00:13:18,770 --> 00:13:20,300
wasn't designed when net flow was

319
00:13:20,300 --> 00:13:21,260
designed they didn't

320
00:13:21,260 --> 00:13:23,570
take any security into consideration so

321
00:13:23,570 --> 00:13:25,700
IP fix has been designed with security

322
00:13:25,700 --> 00:13:27,500
from the beginning so that includes

323
00:13:27,500 --> 00:13:29,240
things like data obfuscation which

324
00:13:29,240 --> 00:13:31,280
NetFlow doesn't have so if you're

325
00:13:31,280 --> 00:13:32,960
sending stuff across a network there is

326
00:13:32,960 --> 00:13:34,820
a potential that someone can intercept

327
00:13:34,820 --> 00:13:36,380
that packets and if that patio will

328
00:13:36,380 --> 00:13:38,390
change that packet with IP fix we can

329
00:13:38,390 --> 00:13:39,950
encrypt the packet so we know that

330
00:13:39,950 --> 00:13:41,030
what's being sent

331
00:13:41,030 --> 00:13:42,470
we hope what's being sent to the other

332
00:13:42,470 --> 00:13:47,120
end is legit and also IP fix offers next

333
00:13:47,120 --> 00:13:50,030
generation support such as ipv6 MPLS

334
00:13:50,030 --> 00:13:53,870
multicast etc so the want of obsessing

335
00:13:53,870 --> 00:13:54,890
the Cisco guys here

336
00:13:54,890 --> 00:13:57,830
NetFlow 9 does support most of these

337
00:13:57,830 --> 00:14:00,410
things ok but as it said earlier NetFlow

338
00:14:00,410 --> 00:14:02,240
9 will support them in a proprietary

339
00:14:02,240 --> 00:14:04,940
mode we're talking about supporting this

340
00:14:04,940 --> 00:14:12,710
as an open standard so we started to set

341
00:14:12,710 --> 00:14:15,410
about building our data capture element

342
00:14:15,410 --> 00:14:17,300
and just to be clear what I'm what we're

343
00:14:17,300 --> 00:14:19,670
trying to do is emphasis on the data

344
00:14:19,670 --> 00:14:20,810
capture okay

345
00:14:20,810 --> 00:14:22,750
I mentioned earlier there's all these

346
00:14:22,750 --> 00:14:24,680
experiments if you go to Google Scholar

347
00:14:24,680 --> 00:14:27,650
is a lot of academic research using that

348
00:14:27,650 --> 00:14:29,390
flow version 5 they have their own

349
00:14:29,390 --> 00:14:32,450
algorithms for detecting botnets ok

350
00:14:32,450 --> 00:14:34,190
we're not actually looking at creating

351
00:14:34,190 --> 00:14:35,900
an algorithm we're just looking at the

352
00:14:35,900 --> 00:14:37,940
data capture mechanism and then we'll

353
00:14:37,940 --> 00:14:40,100
feed that into some kind of algorithm at

354
00:14:40,100 --> 00:14:41,990
a later stage so all we're talking about

355
00:14:41,990 --> 00:14:43,700
now is capturing an old technique for

356
00:14:43,700 --> 00:14:46,400
capturing that data so we wanted to

357
00:14:46,400 --> 00:14:48,470
build this system using off-the-shelf

358
00:14:48,470 --> 00:14:50,690
equipment as much as possible and we

359
00:14:50,690 --> 00:14:52,880
wanted to keep it open source because we

360
00:14:52,880 --> 00:14:54,650
might need to write some code to link

361
00:14:54,650 --> 00:14:56,170
various bits and pieces together so

362
00:14:56,170 --> 00:14:58,160
keeping it open source would allow us to

363
00:14:58,160 --> 00:15:05,030
do that so in order to create a clouds

364
00:15:05,030 --> 00:15:08,270
provide a type of environment we had to

365
00:15:08,270 --> 00:15:11,600
pick some kind of hypervisor to surround

366
00:15:11,600 --> 00:15:13,310
our virtual environment on and we also

367
00:15:13,310 --> 00:15:14,990
looked at software switches as opposed

368
00:15:14,990 --> 00:15:17,660
to Hardware switches so we had a bunch

369
00:15:17,660 --> 00:15:19,160
of hypervisors that we could have look

370
00:15:19,160 --> 00:15:20,450
we could have used we looked at all of

371
00:15:20,450 --> 00:15:23,570
them and we decided to go with Zen in

372
00:15:23,570 --> 00:15:25,070
the end Citrix M because it's

373
00:15:25,070 --> 00:15:27,590
open-source but it's also quite a common

374
00:15:27,590 --> 00:15:30,410
hypervisor in cloud providers certainly

375
00:15:30,410 --> 00:15:32,960
used in our Amazon AWS it's within the

376
00:15:32,960 --> 00:15:34,610
OpenStack is within clouds

377
00:15:34,610 --> 00:15:36,290
it's it's used quite a lot in this in

378
00:15:36,290 --> 00:15:38,660
its area likewise with the open switch

379
00:15:38,660 --> 00:15:40,820
it with the software switches we had

380
00:15:40,820 --> 00:15:42,290
various choices that we could have used

381
00:15:42,290 --> 00:15:44,300
and we decided to go for open V switch

382
00:15:44,300 --> 00:15:46,880
it's open sources clues in the name

383
00:15:46,880 --> 00:15:49,160
and it also sits very well with Xen

384
00:15:49,160 --> 00:15:51,769
hypervisor so where you see Xen you tend

385
00:15:51,769 --> 00:15:53,480
to say open V switch so that's the

386
00:15:53,480 --> 00:15:56,180
reason for choosing those two for our

387
00:15:56,180 --> 00:16:04,370
platform ok so we started to to build

388
00:16:04,370 --> 00:16:06,019
the platform and as you can see this is

389
00:16:06,019 --> 00:16:08,660
number one it wasn't quite as easy as we

390
00:16:08,660 --> 00:16:11,600
thought it was going to be so first of

391
00:16:11,600 --> 00:16:14,029
all we oh we went to Citrix and we

392
00:16:14,029 --> 00:16:16,850
downloaded a copy of Zen server which

393
00:16:16,850 --> 00:16:20,420
includes Linnet Santos operating system

394
00:16:20,420 --> 00:16:22,820
it includes a Zen hypervisor it includes

395
00:16:22,820 --> 00:16:25,790
a GUI for creating or destroying or

396
00:16:25,790 --> 00:16:28,310
migrating VMs and it also includes open

397
00:16:28,310 --> 00:16:30,019
V switch so everything we wanted in one

398
00:16:30,019 --> 00:16:33,290
package we setup on a server

399
00:16:33,290 --> 00:16:36,920
we put Zeus into one VM we infected

400
00:16:36,920 --> 00:16:39,350
another VM and we managed to see the the

401
00:16:39,350 --> 00:16:42,170
the infection process and the keepalive

402
00:16:42,170 --> 00:16:44,060
processes and any data transfer between

403
00:16:44,060 --> 00:16:47,240
the t vm is in that flow version 5 ok

404
00:16:47,240 --> 00:16:49,940
that was easy simple get my PhD done

405
00:16:49,940 --> 00:16:53,060
within a week at this rate little did I

406
00:16:53,060 --> 00:16:56,540
know ok so and there were some issues

407
00:16:56,540 --> 00:17:00,399
that we hear Zen Center the the GUI for

408
00:17:00,399 --> 00:17:03,709
Citrix XenServer doesn't support IP fix

409
00:17:03,709 --> 00:17:05,809
ok that's not really a massive problem

410
00:17:05,809 --> 00:17:07,189
because there's a command line we can

411
00:17:07,189 --> 00:17:10,790
use in order to run open V switch on

412
00:17:10,790 --> 00:17:13,579
sorry in order to run IP fix on open V

413
00:17:13,579 --> 00:17:14,780
switch and what we're doing here is

414
00:17:14,780 --> 00:17:16,579
we're having the switch acting is the

415
00:17:16,579 --> 00:17:18,919
collect as the exporter so the switch is

416
00:17:18,919 --> 00:17:20,900
capturing the data putting it into an IP

417
00:17:20,900 --> 00:17:22,459
fix packet and sending that somewhere

418
00:17:22,459 --> 00:17:25,040
else to our network to be analyzed we

419
00:17:25,040 --> 00:17:28,429
needed version 110 of sis of open V

420
00:17:28,429 --> 00:17:33,260
switch it ships with 1.4.6 ok some more

421
00:17:33,260 --> 00:17:34,880
upgrading today we can probably cope

422
00:17:34,880 --> 00:17:38,330
with that not a problem a problem that

423
00:17:38,330 --> 00:17:40,220
we did have is versions open V switch

424
00:17:40,220 --> 00:17:44,780
version 1.10 requires 64-bit CentOS

425
00:17:44,780 --> 00:17:47,430
operating system

426
00:17:47,430 --> 00:17:50,690
XenServer ships with 5.4 CentOS 5.5

427
00:17:50,690 --> 00:17:55,800
32-bit okay another upgrade that's when

428
00:17:55,800 --> 00:17:57,300
we start to hit problems okay

429
00:17:57,300 --> 00:17:59,880
out of the box XenServer are the dom

430
00:17:59,880 --> 00:18:02,970
zero ships with 40 fluid with four

431
00:18:02,970 --> 00:18:06,360
gigabytes capacity 3.8 gigabits of

432
00:18:06,360 --> 00:18:09,480
witches Xen point 2 gigabits which tends

433
00:18:09,480 --> 00:18:11,280
to be the sent us a way so that doesn't

434
00:18:11,280 --> 00:18:13,020
leave us with a lot of room to do some

435
00:18:13,020 --> 00:18:16,290
operating so some some upgrading so you

436
00:18:16,290 --> 00:18:18,300
know hands up I'm not Citrix expert

437
00:18:18,300 --> 00:18:20,040
maybe some guys from Citrix could have

438
00:18:20,040 --> 00:18:22,050
upgraded this but there was no way I

439
00:18:22,050 --> 00:18:26,250
could upgrade CentOS and 5.5 is an old

440
00:18:26,250 --> 00:18:27,870
version I think CentOS is now on version

441
00:18:27,870 --> 00:18:29,220
10 or something like that so this is an

442
00:18:29,220 --> 00:18:30,930
old version I could not get this

443
00:18:30,930 --> 00:18:35,040
upgraded ok phd's not quite going to

444
00:18:35,040 --> 00:18:39,660
whelming right so about a year down the

445
00:18:39,660 --> 00:18:40,910
line

446
00:18:40,910 --> 00:18:44,400
Citrix released a new version of Zen

447
00:18:44,400 --> 00:18:48,720
server version 6.5 so it runs on a Linux

448
00:18:48,720 --> 00:18:52,320
on a CentOS Linux OS 64-bit brilliant

449
00:18:52,320 --> 00:18:54,270
that's what we want we have Xen

450
00:18:54,270 --> 00:18:57,360
hypervisor 64-bit again another massive

451
00:18:57,360 --> 00:18:59,460
tick and it also comes packaged with

452
00:18:59,460 --> 00:19:01,290
open V switch so really everything that

453
00:19:01,290 --> 00:19:04,050
I want in one package my prayers are

454
00:19:04,050 --> 00:19:05,610
answered great I can start collecting

455
00:19:05,610 --> 00:19:09,090
some data now because version 2.1 not to

456
00:19:09,090 --> 00:19:12,540
open V switch supports IP fix so they

457
00:19:12,540 --> 00:19:15,290
said ok what it doesn't support is

458
00:19:15,290 --> 00:19:18,680
aggregation and timestamps so when you

459
00:19:18,680 --> 00:19:21,600
capture IP fix data or net flow data for

460
00:19:21,600 --> 00:19:24,240
that matter one of the benefits of using

461
00:19:24,240 --> 00:19:26,040
it you to aggregate similar flows so if

462
00:19:26,040 --> 00:19:27,390
you have flows that all have a similar

463
00:19:27,390 --> 00:19:29,460
IP addresses similar port address or

464
00:19:29,460 --> 00:19:31,500
whatever they aggregate those into one

465
00:19:31,500 --> 00:19:35,010
flow what IP fix is doing on open V

466
00:19:35,010 --> 00:19:37,290
switch was it was doing for every single

467
00:19:37,290 --> 00:19:39,570
packet it was sending an IP for every

468
00:19:39,570 --> 00:19:41,340
single packet it was sending an IP fix

469
00:19:41,340 --> 00:19:43,800
flow so we were getting thousands and

470
00:19:43,800 --> 00:19:45,900
thousands and thousands of flows also

471
00:19:45,900 --> 00:19:48,240
these flows had no timestamp so I

472
00:19:48,240 --> 00:19:49,620
couldn't actually picture what was

473
00:19:49,620 --> 00:19:51,180
happening on my network I just had a

474
00:19:51,180 --> 00:19:53,370
load of data which autumn later data

475
00:19:53,370 --> 00:19:55,020
transfer I didn't know what was

476
00:19:55,020 --> 00:19:57,870
happening or when so oK we've got

477
00:19:57,870 --> 00:19:59,490
another problem

478
00:19:59,490 --> 00:20:02,710
I'm not an open V switch expert I spoke

479
00:20:02,710 --> 00:20:04,690
to open V switch they said it works I

480
00:20:04,690 --> 00:20:06,100
said no it doesn't they said yes it does

481
00:20:06,100 --> 00:20:07,660
I said how they said talk to somebody

482
00:20:07,660 --> 00:20:11,320
else you know great ok so I couldn't get

483
00:20:11,320 --> 00:20:13,240
it to support open thief open fight II

484
00:20:13,240 --> 00:20:16,600
fix so we went right back to the drawing

485
00:20:16,600 --> 00:20:18,400
board and we had marks bespoke build

486
00:20:18,400 --> 00:20:22,780
version 1.0 we had a an operating system

487
00:20:22,780 --> 00:20:24,970
that we actually know how to use a case

488
00:20:24,970 --> 00:20:27,490
and tofs didn't even include the yum

489
00:20:27,490 --> 00:20:29,320
command okay you had to download

490
00:20:29,320 --> 00:20:31,419
everything manually i've got apps

491
00:20:31,419 --> 00:20:33,010
getting still now with ubuntu I know

492
00:20:33,010 --> 00:20:35,500
what I'm doing we went to the Zen

493
00:20:35,500 --> 00:20:37,600
project which is a standalone version of

494
00:20:37,600 --> 00:20:40,179
the Citrix 10 hypervisor and we

495
00:20:40,179 --> 00:20:43,240
downloaded 4.4 that comes with a fairly

496
00:20:43,240 --> 00:20:48,760
basic tool stat a fairly basic API so we

497
00:20:48,760 --> 00:20:50,130
downloaded something a little bit more

498
00:20:50,130 --> 00:20:53,500
useful the zappy tool stack we also

499
00:20:53,500 --> 00:20:55,960
downgraded open V switch back down to

500
00:20:55,960 --> 00:20:58,240
version 2.0 too because we're not going

501
00:20:58,240 --> 00:21:00,700
to use open V switch now to export the

502
00:21:00,700 --> 00:21:03,070
IP fix data we can use open V switch to

503
00:21:03,070 --> 00:21:04,690
do what it's both to do virtual

504
00:21:04,690 --> 00:21:07,660
switching so we we downloaded whatever

505
00:21:07,660 --> 00:21:09,520
was on the available on the website at

506
00:21:09,520 --> 00:21:12,549
that time and that was 2.0 dot 2 so now

507
00:21:12,549 --> 00:21:15,130
we need to have some kind of probe on

508
00:21:15,130 --> 00:21:17,770
our network that's going to capture the

509
00:21:17,770 --> 00:21:19,960
data export the data to a collector

510
00:21:19,960 --> 00:21:21,010
somewhere else on our network and we

511
00:21:21,010 --> 00:21:22,240
looked at a whole different bunch of

512
00:21:22,240 --> 00:21:26,470
probes and two two probes stood out net

513
00:21:26,470 --> 00:21:28,929
probe and a product called Yap and we

514
00:21:28,929 --> 00:21:31,240
decided to go for net probe simply

515
00:21:31,240 --> 00:21:32,700
because it was the easiest one to use

516
00:21:32,700 --> 00:21:35,169
okay it has some other benefits as well

517
00:21:35,169 --> 00:21:37,929
but to create an IP fix template and

518
00:21:37,929 --> 00:21:40,809
probe stood above everybody else it was

519
00:21:40,809 --> 00:21:46,120
dead simple to use so here's a contact

520
00:21:46,120 --> 00:21:49,240
that we created as you can see it

521
00:21:49,240 --> 00:21:52,929
supports NetFlow v net flow 9 an IP fix

522
00:21:52,929 --> 00:21:55,150
so we can start to do some comparison

523
00:21:55,150 --> 00:21:58,090
between the different protocols and also

524
00:21:58,090 --> 00:21:59,650
within our stack we put something on

525
00:21:59,650 --> 00:22:02,160
there called neo4j anyone use neo4j

526
00:22:02,160 --> 00:22:06,240
yeah ok good so that's a graph database

527
00:22:06,240 --> 00:22:08,409
package and I'll talk a little bit about

528
00:22:08,409 --> 00:22:10,299
that later on

529
00:22:10,299 --> 00:22:12,730
so this is showing us the

530
00:22:12,730 --> 00:22:15,970
an example of a server where we have a

531
00:22:15,970 --> 00:22:18,510
bunch of virtual machines in user space

532
00:22:18,510 --> 00:22:20,980
open V switch sits between the user

533
00:22:20,980 --> 00:22:24,100
space and the hypervisor and we also

534
00:22:24,100 --> 00:22:26,680
have a probe now this probe could be

535
00:22:26,680 --> 00:22:28,510
anywhere but what this shows here is

536
00:22:28,510 --> 00:22:30,520
this probe is not within the virtual

537
00:22:30,520 --> 00:22:32,380
environment which is one of the criteria

538
00:22:32,380 --> 00:22:34,810
we set out to to try and achieve and

539
00:22:34,810 --> 00:22:39,040
we'll talk about probes now so a

540
00:22:39,040 --> 00:22:41,860
simplified network simplified network of

541
00:22:41,860 --> 00:22:44,770
a cloud provider and the pcs in black

542
00:22:44,770 --> 00:22:47,590
are potential places we could put our

543
00:22:47,590 --> 00:22:50,290
probes so we can put our probes within

544
00:22:50,290 --> 00:22:52,660
the the tenant virtual environment we

545
00:22:52,660 --> 00:22:56,470
could put our probe on the network we

546
00:22:56,470 --> 00:22:58,450
could hang our probe off a device such

547
00:22:58,450 --> 00:23:00,520
as a server we could even put it on a

548
00:23:00,520 --> 00:23:02,680
firewall or the IP fix collector

549
00:23:02,680 --> 00:23:04,600
wherever we wanted to choose it there's

550
00:23:04,600 --> 00:23:06,790
multiple places we can put this probe so

551
00:23:06,790 --> 00:23:11,200
we wanted to find out how can we create

552
00:23:11,200 --> 00:23:13,540
the least number of probes with the

553
00:23:13,540 --> 00:23:15,100
maximum visibility because the more

554
00:23:15,100 --> 00:23:16,690
probes you have you have to start

555
00:23:16,690 --> 00:23:20,500
coordinating all the probe data and also

556
00:23:20,500 --> 00:23:22,570
the probes themselves are open to attack

557
00:23:22,570 --> 00:23:24,370
so if you've got more probes they could

558
00:23:24,370 --> 00:23:27,750
potentially become a victim of attack so

559
00:23:27,750 --> 00:23:30,310
we've started off even though we said

560
00:23:30,310 --> 00:23:31,450
we're not going to do this we wanted the

561
00:23:31,450 --> 00:23:33,280
baseline and we said let's put the

562
00:23:33,280 --> 00:23:36,100
probes in the tenant virtual environment

563
00:23:36,100 --> 00:23:39,580
so what this diagram is showing is the

564
00:23:39,580 --> 00:23:44,260
red lines are successful pings so pings

565
00:23:44,260 --> 00:23:46,090
between this device and this device this

566
00:23:46,090 --> 00:23:47,890
device and this device but it's red

567
00:23:47,890 --> 00:23:50,640
because the probe wasn't picking that up

568
00:23:50,640 --> 00:23:55,210
okay so put a probe in the ve in the

569
00:23:55,210 --> 00:23:57,100
customers virtual environment we saw no

570
00:23:57,100 --> 00:23:59,380
data at all on the network and anyone

571
00:23:59,380 --> 00:24:04,330
guess what it might be ok well it works

572
00:24:04,330 --> 00:24:06,970
in the same way as Wireshark we didn't

573
00:24:06,970 --> 00:24:08,980
have these networking interfaces in

574
00:24:08,980 --> 00:24:10,990
promiscuous mode we weren't using any

575
00:24:10,990 --> 00:24:13,540
span ports and mirroring ports so unless

576
00:24:13,540 --> 00:24:16,810
the IP address source of destination

577
00:24:16,810 --> 00:24:18,760
address was to one of these probes we

578
00:24:18,760 --> 00:24:21,700
won't see in that traffic ok so we move

579
00:24:21,700 --> 00:24:23,160
the probe out of the virtual environment

580
00:24:23,160 --> 00:24:25,900
put it on the lan again

581
00:24:25,900 --> 00:24:27,460
exactly the same thing we might have

582
00:24:27,460 --> 00:24:28,900
more control over putting some of this

583
00:24:28,900 --> 00:24:31,690
equipment into promiscuous mode where we

584
00:24:31,690 --> 00:24:32,920
probably don't have in virtual

585
00:24:32,920 --> 00:24:35,350
environments but out of the box we're

586
00:24:35,350 --> 00:24:38,020
not capturing any data by putting our

587
00:24:38,020 --> 00:24:40,270
probe on the land so we've got a bit of

588
00:24:40,270 --> 00:24:42,490
a problem again another problem had a

589
00:24:42,490 --> 00:24:47,050
few problems so we thought well what

590
00:24:47,050 --> 00:24:50,110
about the open feast which sits between

591
00:24:50,110 --> 00:24:54,010
the user domain and the hypervisor

592
00:24:54,010 --> 00:24:56,560
domain what about if we installed the

593
00:24:56,560 --> 00:24:59,230
probe on top of the hypervisor so that

594
00:24:59,230 --> 00:25:01,170
it's sitting right next to open V switch

595
00:25:01,170 --> 00:25:03,730
open V switch will then send any

596
00:25:03,730 --> 00:25:07,360
information to the probe and and that's

597
00:25:07,360 --> 00:25:10,510
what we saw we saw that the green lines

598
00:25:10,510 --> 00:25:12,370
are showing pings that we successfully

599
00:25:12,370 --> 00:25:14,320
picked up on the probe and as you can

600
00:25:14,320 --> 00:25:16,270
see because every packet is going

601
00:25:16,270 --> 00:25:18,400
through our our server with open V

602
00:25:18,400 --> 00:25:21,910
switch on we had good visibility of the

603
00:25:21,910 --> 00:25:24,640
data across the network with our probe

604
00:25:24,640 --> 00:25:27,100
on one server what we don't see is

605
00:25:27,100 --> 00:25:29,380
traffic in another server

606
00:25:29,380 --> 00:25:30,880
we talked earlier we talked at the

607
00:25:30,880 --> 00:25:32,590
beginning about mal whether it might be

608
00:25:32,590 --> 00:25:35,050
a third jump between VMs we can see that

609
00:25:35,050 --> 00:25:36,820
traffic between VMs because it's going

610
00:25:36,820 --> 00:25:38,440
through this server but if these two

611
00:25:38,440 --> 00:25:40,840
guys are talking to each other we're not

612
00:25:40,840 --> 00:25:41,980
going to see that because we don't have

613
00:25:41,980 --> 00:25:44,260
a probe on that server so we went to the

614
00:25:44,260 --> 00:25:46,420
extreme of putting a probe on absolutely

615
00:25:46,420 --> 00:25:49,570
everything and we got full visibility of

616
00:25:49,570 --> 00:25:51,490
the network but as I said to you we

617
00:25:51,490 --> 00:25:54,190
don't want to have an overkill on probes

618
00:25:54,190 --> 00:25:56,770
so for this since for our environment

619
00:25:56,770 --> 00:25:59,920
we've left the probes out on the on the

620
00:25:59,920 --> 00:26:01,810
land we've kept the probes on the server

621
00:26:01,810 --> 00:26:05,680
we have no probes within the virtual

622
00:26:05,680 --> 00:26:07,240
environment so actually we are seeing

623
00:26:07,240 --> 00:26:09,340
traffic coming within a virtual

624
00:26:09,340 --> 00:26:11,020
environment between a virtual

625
00:26:11,020 --> 00:26:12,340
environment or from a virtual

626
00:26:12,340 --> 00:26:17,170
environment out onto the lab so we were

627
00:26:17,170 --> 00:26:18,760
quite but we're able to show that

628
00:26:18,760 --> 00:26:20,680
installing our probes on top of the

629
00:26:20,680 --> 00:26:22,900
hypervisor gave us maximum visibility of

630
00:26:22,900 --> 00:26:29,740
traffic ok so that's most of the work

631
00:26:29,740 --> 00:26:31,300
we've done so far has been set in the

632
00:26:31,300 --> 00:26:32,890
network up and getting these probes in

633
00:26:32,890 --> 00:26:35,380
place what we're looking at now is what

634
00:26:35,380 --> 00:26:38,950
can we do with this IP fixed template in

635
00:26:38,950 --> 00:26:42,639
terms of botnet detection so we've

636
00:26:42,639 --> 00:26:45,130
managed to get something like we've

637
00:26:45,130 --> 00:26:46,990
we've analyzed something in the region

638
00:26:46,990 --> 00:26:51,130
of ten million packets which equates to

639
00:26:51,130 --> 00:26:55,210
about million a half flows and using

640
00:26:55,210 --> 00:26:56,919
some kind of some statistics and some

641
00:26:56,919 --> 00:26:59,230
correlation we've come up with what we

642
00:26:59,230 --> 00:27:02,409
believe is the minimum Templar done if

643
00:27:02,409 --> 00:27:04,120
you can see that I was quite small but

644
00:27:04,120 --> 00:27:07,149
the minimum template for the information

645
00:27:07,149 --> 00:27:09,580
that we need to capture on the land to

646
00:27:09,580 --> 00:27:11,230
be able to recognize a bottleneck so

647
00:27:11,230 --> 00:27:15,580
it's flow start times flow n times some

648
00:27:15,580 --> 00:27:17,710
information about bytes interestingly

649
00:27:17,710 --> 00:27:20,669
enough our data said we only need

650
00:27:20,669 --> 00:27:22,899
destination IP address not necessary

651
00:27:22,899 --> 00:27:26,260
port IP address but we need both port

652
00:27:26,260 --> 00:27:28,779
and source and destination ports and

653
00:27:28,779 --> 00:27:33,130
also protocol so and also the direction

654
00:27:33,130 --> 00:27:34,630
of which the traffic is going so that as

655
00:27:34,630 --> 00:27:36,940
an absolute minimum of what we what we

656
00:27:36,940 --> 00:27:40,840
need to capture now the PDU size of this

657
00:27:40,840 --> 00:27:43,389
works out as 22 bytes I said earlier

658
00:27:43,389 --> 00:27:45,490
that net flow version 5 works out as 48

659
00:27:45,490 --> 00:27:47,830
bytes so we can capture pretty much the

660
00:27:47,830 --> 00:27:50,049
same useful information in less than

661
00:27:50,049 --> 00:27:51,880
half the bytes ok but what you will

662
00:27:51,880 --> 00:27:54,490
notice on there is that this is just

663
00:27:54,490 --> 00:27:56,769
traffic information there's no PDU

664
00:27:56,769 --> 00:27:59,919
information yeah and hands up anyone in

665
00:27:59,919 --> 00:28:01,090
the room that thinks we can detect

666
00:28:01,090 --> 00:28:05,049
botnet without HTTP or DNS I don't think

667
00:28:05,049 --> 00:28:06,970
we can can we ok

668
00:28:06,970 --> 00:28:08,740
I'm gonna skip that one sorry avian

669
00:28:08,740 --> 00:28:12,149
we'll come back to that if we have time

670
00:28:12,149 --> 00:28:15,760
ok so I mentioned neo4j earlier as a

671
00:28:15,760 --> 00:28:18,220
graph database package so what we've

672
00:28:18,220 --> 00:28:21,159
managed to do is replicate the traffic

673
00:28:21,159 --> 00:28:24,039
communication within graph database in

674
00:28:24,039 --> 00:28:26,019
our graph databases use a lot in network

675
00:28:26,019 --> 00:28:28,269
security I couldn't find a lot of work

676
00:28:28,269 --> 00:28:30,429
about using these to visualize botnets

677
00:28:30,429 --> 00:28:32,830
so we tried it on botnets and what we

678
00:28:32,830 --> 00:28:35,639
can see here this is a very simplified

679
00:28:35,639 --> 00:28:39,850
view but we had a server in gray here

680
00:28:39,850 --> 00:28:42,130
and this is the communication between

681
00:28:42,130 --> 00:28:44,889
the other devices so if we look at this

682
00:28:44,889 --> 00:28:47,679
picture here something's going on with

683
00:28:47,679 --> 00:28:50,889
PC seven lots of people are talking to

684
00:28:50,889 --> 00:28:52,600
the server as you expect piece

685
00:28:52,600 --> 00:28:54,340
seven as far as we know as a simple it's

686
00:28:54,340 --> 00:28:56,380
a normal PC why is all this traffic

687
00:28:56,380 --> 00:28:58,900
going to that device as it happens we

688
00:28:58,900 --> 00:29:00,970
have Zeus come on a control center in

689
00:29:00,970 --> 00:29:02,140
there that's why everybody else was

690
00:29:02,140 --> 00:29:04,180
talking to it now if we narrow that down

691
00:29:04,180 --> 00:29:06,550
start looking at different protocols if

692
00:29:06,550 --> 00:29:10,090
we look at HTTP we can represent the the

693
00:29:10,090 --> 00:29:12,190
amount of traffic the thick of the bar

694
00:29:12,190 --> 00:29:13,990
the more traffic so now we get a better

695
00:29:13,990 --> 00:29:16,420
picture that okay there's a lot of HTTP

696
00:29:16,420 --> 00:29:20,050
traffic going to this device I'm not

697
00:29:20,050 --> 00:29:21,640
saying that this is a botnet I'm not

698
00:29:21,640 --> 00:29:23,260
saying that sit shut that PC down

699
00:29:23,260 --> 00:29:24,910
straight away there's a problem I'm

700
00:29:24,910 --> 00:29:27,370
saying at this stages we've got some

701
00:29:27,370 --> 00:29:29,050
some Intel that might be an interesting

702
00:29:29,050 --> 00:29:30,970
device to go and look at so at some

703
00:29:30,970 --> 00:29:32,410
stage we need to implement some kind of

704
00:29:32,410 --> 00:29:36,100
algorithm and what graph theory will

705
00:29:36,100 --> 00:29:38,110
allow you to do is is look at the number

706
00:29:38,110 --> 00:29:39,700
of nodes coming in and the size of the

707
00:29:39,700 --> 00:29:42,640
nose to start comparing them with with

708
00:29:42,640 --> 00:29:45,340
with signatures so that's that's future

709
00:29:45,340 --> 00:29:46,240
work and that's something that we've

710
00:29:46,240 --> 00:29:48,760
started to work on and I think it's

711
00:29:48,760 --> 00:29:49,870
quite an interesting why I've actually

712
00:29:49,870 --> 00:29:52,080
displaying the data that we're capturing

713
00:29:52,080 --> 00:30:00,910
oops okay so I think there's very

714
00:30:00,910 --> 00:30:03,400
interesting questions been raised by

715
00:30:03,400 --> 00:30:05,020
around this research and it's the intro

716
00:30:05,020 --> 00:30:07,860
it's the kind of the concept of privacy

717
00:30:07,860 --> 00:30:11,340
we decided at the beginning by using

718
00:30:11,340 --> 00:30:14,200
flow protocols that we'd sacrifice the

719
00:30:14,200 --> 00:30:18,040
payload into it for privacy of the

720
00:30:18,040 --> 00:30:19,570
tenant now of course whenever you

721
00:30:19,570 --> 00:30:21,670
sacrifice a payload that comes at some

722
00:30:21,670 --> 00:30:26,260
kind of cost okay so I said this earlier

723
00:30:26,260 --> 00:30:27,970
can you detect botnets without some kind

724
00:30:27,970 --> 00:30:30,700
of packet information probably not what

725
00:30:30,700 --> 00:30:32,680
net or IP fix allows you to do that net

726
00:30:32,680 --> 00:30:34,810
flow doesn't allow you to do is to

727
00:30:34,810 --> 00:30:38,620
create your own plugins to take

728
00:30:38,620 --> 00:30:40,750
information out of the packet that may

729
00:30:40,750 --> 00:30:42,370
not necessarily be within the standard

730
00:30:42,370 --> 00:30:45,940
template so we've developed a IP fix

731
00:30:45,940 --> 00:30:48,250
extended template if you like that can

732
00:30:48,250 --> 00:30:53,710
capture HTTP dns smtp IRC information if

733
00:30:53,710 --> 00:30:54,880
there's something else you wanted to

734
00:30:54,880 --> 00:30:56,740
capture we could probably write a pro a

735
00:30:56,740 --> 00:31:00,570
plugin to to capture that as well but

736
00:31:00,570 --> 00:31:02,950
that comes at the cost of privacy you

737
00:31:02,950 --> 00:31:04,840
know we said the tenant doesn't want a

738
00:31:04,840 --> 00:31:06,020
probe in the network

739
00:31:06,020 --> 00:31:07,640
okay we put our probe outside then

740
00:31:07,640 --> 00:31:10,090
Network so they don't need it but also

741
00:31:10,090 --> 00:31:12,500
the the tenant could potentially

742
00:31:12,500 --> 00:31:15,110
question what why are you capturing my

743
00:31:15,110 --> 00:31:16,520
information anyway do we tell them that

744
00:31:16,520 --> 00:31:17,750
we're going to capture that information

745
00:31:17,750 --> 00:31:20,270
does the cloud provider state that in

746
00:31:20,270 --> 00:31:21,530
their terms and conditions that we may

747
00:31:21,530 --> 00:31:24,470
capture the certain HTTP GET

748
00:31:24,470 --> 00:31:26,750
informational DNS information at the

749
00:31:26,750 --> 00:31:28,970
benefit of providing them with security

750
00:31:28,970 --> 00:31:30,980
I don't know what the answer to that is

751
00:31:30,980 --> 00:31:32,750
yeah I'm I'm device I'm developing this

752
00:31:32,750 --> 00:31:34,130
tool the tool can provide this

753
00:31:34,130 --> 00:31:36,530
technology but we've got some some

754
00:31:36,530 --> 00:31:38,240
issues some regulations to sort out

755
00:31:38,240 --> 00:31:40,100
around privacy and I think that's

756
00:31:40,100 --> 00:31:42,110
potentially a whole different debate but

757
00:31:42,110 --> 00:31:50,060
that issue is there this slide for those

758
00:31:50,060 --> 00:31:53,930
who can't see it is showing our extended

759
00:31:53,930 --> 00:31:57,290
IP fix template so we have four DNS

760
00:31:57,290 --> 00:32:00,530
parameters that we're capturing ID TTL

761
00:32:00,530 --> 00:32:03,200
query name IP address and a bunch of

762
00:32:03,200 --> 00:32:06,980
HTTP parameters as well so you know you

763
00:32:06,980 --> 00:32:11,030
could say the HTTP GET HTTP referer IP

764
00:32:11,030 --> 00:32:14,390
DNS IP address DP DNS query name

765
00:32:14,390 --> 00:32:16,040
that's quite intrusive traffic that

766
00:32:16,040 --> 00:32:18,140
we're capturing there but the technology

767
00:32:18,140 --> 00:32:19,730
will allow us to do that if that's what

768
00:32:19,730 --> 00:32:22,280
we decide to do so using a combination

769
00:32:22,280 --> 00:32:24,260
of this template and the other template

770
00:32:24,260 --> 00:32:26,090
that we've written we should be able to

771
00:32:26,090 --> 00:32:30,350
capture significant information to

772
00:32:30,350 --> 00:32:32,060
detect botnets in the environment that

773
00:32:32,060 --> 00:32:33,440
we're looking at so I'm trying to detect

774
00:32:33,440 --> 00:32:37,700
them which brings me on to testing my

775
00:32:37,700 --> 00:32:40,250
network and I'm not proud I'm going to

776
00:32:40,250 --> 00:32:42,830
start begging in front of everybody I've

777
00:32:42,830 --> 00:32:44,720
tested this with a really old version of

778
00:32:44,720 --> 00:32:47,320
Zeus Zeus

779
00:32:48,250 --> 00:32:50,930
I've also tested this with spy ID but I

780
00:32:50,930 --> 00:32:52,580
really need to test this now with

781
00:32:52,580 --> 00:32:54,890
ideally something like GAMEOVER Zeus and

782
00:32:54,890 --> 00:32:57,770
Peter peanut and botnet and IRC botnets

783
00:32:57,770 --> 00:32:59,030
so I'm reaching out to you guys and if

784
00:32:59,030 --> 00:33:00,650
you've got bear in mind I need the

785
00:33:00,650 --> 00:33:03,950
builders not just the the executables if

786
00:33:03,950 --> 00:33:06,830
anyone can help me here happily

787
00:33:06,830 --> 00:33:08,300
reference you in any of the papers I'm

788
00:33:08,300 --> 00:33:10,280
writing in the work I do so please if

789
00:33:10,280 --> 00:33:11,480
you've got anything that can help me

790
00:33:11,480 --> 00:33:16,070
this talk tonight or whenever

791
00:33:16,070 --> 00:33:21,929
so conclusions I think we managed to

792
00:33:21,929 --> 00:33:26,039
create an IP fix capture traffic capture

793
00:33:26,039 --> 00:33:28,320
mechanism using off-the-shelf technology

794
00:33:28,320 --> 00:33:32,669
eventually cloud service providers about

795
00:33:32,669 --> 00:33:34,559
80 percent of cloud service providers

796
00:33:34,559 --> 00:33:38,549
already use Flo in some form shape be it

797
00:33:38,549 --> 00:33:41,940
net flow 5 be it net flow 9 via IP fix

798
00:33:41,940 --> 00:33:43,889
so this is not new technology to them

799
00:33:43,889 --> 00:33:45,119
this is technology that they're already

800
00:33:45,119 --> 00:33:46,830
comfortable with or at least they should

801
00:33:46,830 --> 00:33:48,809
know a little bit about we've also shown

802
00:33:48,809 --> 00:33:50,039
that if we put the probe on the

803
00:33:50,039 --> 00:33:54,619
hypervisor we get good visibility of

804
00:33:54,619 --> 00:33:57,989
traffic and we've also created what I

805
00:33:57,989 --> 00:34:00,059
believe is probably the first IP fix

806
00:34:00,059 --> 00:34:02,879
template for botnet detection I'll stand

807
00:34:02,879 --> 00:34:04,289
corrected there if anyone knows

808
00:34:04,289 --> 00:34:05,429
otherwise but I haven't found any

809
00:34:05,429 --> 00:34:07,379
information that says that there's

810
00:34:07,379 --> 00:34:09,119
anything out there so yeah this is I

811
00:34:09,119 --> 00:34:10,530
still have a year to go I've still got a

812
00:34:10,530 --> 00:34:12,530
whole bunch of testing to do but

813
00:34:12,530 --> 00:34:15,059
hopefully I think I've made some some

814
00:34:15,059 --> 00:34:20,010
nice progress who cares what is what

815
00:34:20,010 --> 00:34:22,260
does this mean to anybody other said

816
00:34:22,260 --> 00:34:23,969
right the very beginning clouds are

817
00:34:23,969 --> 00:34:25,168
going to host the internet of

818
00:34:25,168 --> 00:34:26,489
vulnerabilities they are going to host

819
00:34:26,489 --> 00:34:29,489
smart cities the cloud is a platform

820
00:34:29,489 --> 00:34:31,469
that we've seen it being used as a

821
00:34:31,469 --> 00:34:33,089
breeding ground for botnet so it's

822
00:34:33,089 --> 00:34:35,489
already a platform for attack it will be

823
00:34:35,489 --> 00:34:39,329
at a platform of itself being attacked

824
00:34:39,329 --> 00:34:41,520
for attack on storage other 10s or in

825
00:34:41,520 --> 00:34:43,199
virtual environments so so hopefully

826
00:34:43,199 --> 00:34:46,049
what we've created it's by no means the

827
00:34:46,049 --> 00:34:48,629
end tool it's by no means the only tool

828
00:34:48,629 --> 00:34:50,879
I but I think it's at least a step in

829
00:34:50,879 --> 00:34:53,280
the direction to look at detecting

830
00:34:53,280 --> 00:34:55,619
botnets within a LAN environment let's

831
00:34:55,619 --> 00:34:58,079
not just leave that just to cloud

832
00:34:58,079 --> 00:35:00,630
service providers but we take a campus

833
00:35:00,630 --> 00:35:03,299
like a university this probably has a

834
00:35:03,299 --> 00:35:04,920
similar application in an environment

835
00:35:04,920 --> 00:35:09,829
like that as well and that's me

836
00:35:16,030 --> 00:35:23,930
okay any questions stop silence over

837
00:35:23,930 --> 00:35:26,140
there

838
00:35:30,720 --> 00:35:36,240
so is this listening um yeah and so you

839
00:35:36,240 --> 00:35:39,060
seem to have built a somewhat heavy

840
00:35:39,060 --> 00:35:42,050
weight I guess a system for doing your

841
00:35:42,050 --> 00:35:45,569
experimenting did you look at using any

842
00:35:45,569 --> 00:35:49,440
simulation tools like NS 2 or op net or

843
00:35:49,440 --> 00:35:51,420
anything like that where you have

844
00:35:51,420 --> 00:35:53,940
complete control over network

845
00:35:53,940 --> 00:35:56,010
infrastructure and people have already

846
00:35:56,010 --> 00:36:00,000
built simulations of malgor networks

847
00:36:00,000 --> 00:36:01,380
such as peer-to-peer networks and stuff

848
00:36:01,380 --> 00:36:03,420
like that which would you know allow you

849
00:36:03,420 --> 00:36:05,520
to quickly perform your experiments in a

850
00:36:05,520 --> 00:36:07,410
controlled environment and you know

851
00:36:07,410 --> 00:36:10,170
scale it up as much as you want it yeah

852
00:36:10,170 --> 00:36:12,990
okay the the the easiest simple cell

853
00:36:12,990 --> 00:36:15,829
size no we didn't we wanted to actually

854
00:36:15,829 --> 00:36:20,220
rather than simulate I mean I don't need

855
00:36:20,220 --> 00:36:23,099
to tell you guys the botnet research is

856
00:36:23,099 --> 00:36:25,380
pretty difficult because you often made

857
00:36:25,380 --> 00:36:27,660
the Builder as well as the sample so it

858
00:36:27,660 --> 00:36:28,950
would have been a lot easier to just

859
00:36:28,950 --> 00:36:32,099
simulate a network and maybe simulate a

860
00:36:32,099 --> 00:36:33,540
peer-to-peer button over the top of that

861
00:36:33,540 --> 00:36:34,680
but we actually wanted to try and

862
00:36:34,680 --> 00:36:39,329
physically build something something

863
00:36:39,329 --> 00:36:41,280
tangible that hallelujah we can use

864
00:36:41,280 --> 00:36:42,920
off-the-shelf information use real

865
00:36:42,920 --> 00:36:45,000
equipment use real-world equipment and

866
00:36:45,000 --> 00:36:45,810
try and actually build something

867
00:36:45,810 --> 00:36:47,760
physical so good question yeah that

868
00:36:47,760 --> 00:36:49,650
could have saved us a lot of time but

869
00:36:49,650 --> 00:36:51,510
the the end goal if you like was to

870
00:36:51,510 --> 00:36:56,190
actually have a real detection system at

871
00:36:56,190 --> 00:36:59,579
the end of it so no we didn't is this

872
00:36:59,579 --> 00:37:02,210
your answer to that

873
00:37:07,410 --> 00:37:10,920
another question

874
00:37:11,710 --> 00:37:15,860
no more questions one two three okay

875
00:37:15,860 --> 00:37:18,850
thank you mark

