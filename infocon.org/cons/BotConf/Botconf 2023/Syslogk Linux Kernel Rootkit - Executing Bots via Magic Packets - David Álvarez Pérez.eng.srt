1
00:00:00,599 --> 00:00:04,319
well my name is David or David and I

2
00:00:04,319 --> 00:00:07,379
work at a vast gen as Margaret analyst

3
00:00:07,379 --> 00:00:09,840
and I'm currently focusing in iot and

4
00:00:09,840 --> 00:00:11,120
Lino streets

5
00:00:11,120 --> 00:00:13,740
let's talk about assist local rootkit

6
00:00:13,740 --> 00:00:16,560
version 2 and about that it hides

7
00:00:16,560 --> 00:00:19,500
seasonal K is divided in two components

8
00:00:19,500 --> 00:00:21,600
the kernel rootkit and the user mode

9
00:00:21,600 --> 00:00:23,699
board the corner rootkit has the

10
00:00:23,699 --> 00:00:26,160
following features it hides the the

11
00:00:26,160 --> 00:00:29,580
kernel module and updates a flag

12
00:00:29,580 --> 00:00:32,520
accordingly with true or false depending

13
00:00:32,520 --> 00:00:34,320
if it is hidden or not but in this case

14
00:00:34,320 --> 00:00:36,960
it's hiding and it has directories

15
00:00:36,960 --> 00:00:39,239
processes about process but also

16
00:00:39,239 --> 00:00:40,860
malicious processes

17
00:00:40,860 --> 00:00:44,579
it has it has the network traffic and it

18
00:00:44,579 --> 00:00:46,920
also implements a magic packets that are

19
00:00:46,920 --> 00:00:49,700
relatively complex those magic packets

20
00:00:49,700 --> 00:00:52,140
uses different keys and different

21
00:00:52,140 --> 00:00:55,820
encryption algorithms per sample and it

22
00:00:55,820 --> 00:00:59,940
can execute about in different modes and

23
00:00:59,940 --> 00:01:01,920
it also implements its all its own

24
00:01:01,920 --> 00:01:04,379
payload by executing arbitrary comments

25
00:01:04,379 --> 00:01:07,860
in user mode space from kernel space and

26
00:01:07,860 --> 00:01:09,479
on the other hand the user mode both

27
00:01:09,479 --> 00:01:12,780
that is hidden by the rootkit implements

28
00:01:12,780 --> 00:01:15,500
a different protocols or different

29
00:01:15,500 --> 00:01:18,240
Services per sample allowing the

30
00:01:18,240 --> 00:01:21,479
attacker to connect to it and it can run

31
00:01:21,479 --> 00:01:23,159
in different modes as we already

32
00:01:23,159 --> 00:01:26,400
mentioned it it can run in normal mode I

33
00:01:26,400 --> 00:01:29,159
mean it simply handles a comment from

34
00:01:29,159 --> 00:01:30,299
the attacker

35
00:01:30,299 --> 00:01:33,900
it can run in callback mode I mean it

36
00:01:33,900 --> 00:01:36,540
gets subscribed with a callback to the

37
00:01:36,540 --> 00:01:39,000
socket and in case the socket changes is

38
00:01:39,000 --> 00:01:43,140
a state it gets the the command and

39
00:01:43,140 --> 00:01:45,060
executes the command in a loop so so in

40
00:01:45,060 --> 00:01:47,220
callback mode it's executed multiple

41
00:01:47,220 --> 00:01:50,340
commands and it also allows to be

42
00:01:50,340 --> 00:01:53,939
executed in proxy mode I mean it it can

43
00:01:53,939 --> 00:01:56,640
send the a the bot can send also magic

44
00:01:56,640 --> 00:01:58,979
packets to to other computers acting as

45
00:01:58,979 --> 00:02:00,360
a process between the attacker and the

46
00:02:00,360 --> 00:02:02,759
other computer and the magic package

47
00:02:02,759 --> 00:02:06,420
fakes a normal traffic or legitimate

48
00:02:06,420 --> 00:02:08,699
traffic like Mozilla Firefox traffic and

49
00:02:08,699 --> 00:02:12,840
Apache 2 traffic and the user mode of of

50
00:02:12,840 --> 00:02:16,319
course implements a two payloads one is

51
00:02:16,319 --> 00:02:18,840
to spawn a reversal for the attacker and

52
00:02:18,840 --> 00:02:22,080
the other kill kill its own execution

53
00:02:22,080 --> 00:02:26,000
let's talk about the kernel rootkit

54
00:02:27,300 --> 00:02:29,220
they're going to look at we found it in

55
00:02:29,220 --> 00:02:32,580
in virus total so uh if we take a look

56
00:02:32,580 --> 00:02:34,020
at the model info section we can see

57
00:02:34,020 --> 00:02:36,660
that it was compiled in a Redcat 7.6

58
00:02:36,660 --> 00:02:39,540
environment and if we take a look at the

59
00:02:39,540 --> 00:02:42,360
magic of the of the of the version of

60
00:02:42,360 --> 00:02:44,459
the governor we can see that it can be

61
00:02:44,459 --> 00:02:50,519
also loaded in a Centos 7.9 distro that

62
00:02:50,519 --> 00:02:54,420
has a very little different kernel so it

63
00:02:54,420 --> 00:02:55,739
is possible to load it in this

64
00:02:55,739 --> 00:02:57,300
distribution with the advantage that

65
00:02:57,300 --> 00:03:00,500
this is a free distribution

66
00:03:00,920 --> 00:03:04,260
are the following it allows to hide

67
00:03:04,260 --> 00:03:06,540
Itself by removing itself from the list

68
00:03:06,540 --> 00:03:08,879
of models in the in the system

69
00:03:08,879 --> 00:03:11,819
and it has the user mode bot that is not

70
00:03:11,819 --> 00:03:14,459
continuously running it is Magic packet

71
00:03:14,459 --> 00:03:16,980
sense but yeah by the attacker

72
00:03:16,980 --> 00:03:21,239
so a the user mode bought a hooks the

73
00:03:21,239 --> 00:03:24,540
reader read the the function I I mean it

74
00:03:24,540 --> 00:03:27,060
it replaces the pointer in the in the

75
00:03:27,060 --> 00:03:30,599
virtual file system for uh the Red Deer

76
00:03:30,599 --> 00:03:33,239
operation such that if if you take a

77
00:03:33,239 --> 00:03:36,000
look at the at the either a disassembly

78
00:03:36,000 --> 00:03:38,340
you can see the string the substring

79
00:03:38,340 --> 00:03:40,080
that in case it matches with the

80
00:03:40,080 --> 00:03:42,959
directory the directory is hiding there

81
00:03:42,959 --> 00:03:47,940
is also um it also hides the TCP for

82
00:03:47,940 --> 00:03:52,500
um events from the from the host uh in

83
00:03:52,500 --> 00:03:56,280
case in case the the sequential file for

84
00:03:56,280 --> 00:03:59,700
tcp4 events matches the the port of the

85
00:03:59,700 --> 00:04:03,120
of the bot those uh those lines are

86
00:04:03,120 --> 00:04:06,599
filtered and finally it also implements

87
00:04:06,599 --> 00:04:09,540
a hook in the product filter function

88
00:04:09,540 --> 00:04:14,700
such that if the if it if it

89
00:04:14,700 --> 00:04:17,579
if the if in the proc directory of Linux

90
00:04:17,579 --> 00:04:19,680
appears a file with the with the

91
00:04:19,680 --> 00:04:22,860
processes in the in the list of bits bit

92
00:04:22,860 --> 00:04:27,440
IDs or or some malicious processes those

93
00:04:27,440 --> 00:04:30,600
are also High then

94
00:04:30,600 --> 00:04:35,360
the way that uh Cislo K hooks the the

95
00:04:35,360 --> 00:04:38,940
functions are using this dependency and

96
00:04:38,940 --> 00:04:42,780
x86 and X 8664 dependency this is

97
00:04:42,780 --> 00:04:44,460
important because this rookie will not

98
00:04:44,460 --> 00:04:47,280
work in other architectures because of

99
00:04:47,280 --> 00:04:48,960
this dependency

100
00:04:48,960 --> 00:04:51,120
and you you can see that it performs in

101
00:04:51,120 --> 00:04:52,680
line hooking with this disassembly

102
00:04:52,680 --> 00:04:54,780
dependency it disassembles the first

103
00:04:54,780 --> 00:04:57,120
instruction of the binary in case the

104
00:04:57,120 --> 00:04:59,220
first instruction indicates that the

105
00:04:59,220 --> 00:05:00,960
function is not a built-in function I

106
00:05:00,960 --> 00:05:03,360
mean it is already hooked it escapes the

107
00:05:03,360 --> 00:05:05,759
the function and don'ts performs hook on

108
00:05:05,759 --> 00:05:09,060
it but otherwise it copies the original

109
00:05:09,060 --> 00:05:10,860
byte

110
00:05:10,860 --> 00:05:14,460
and then places the hooks based in a HKS

111
00:05:14,460 --> 00:05:15,919
structure

112
00:05:15,919 --> 00:05:19,800
which contains entries with pairs of the

113
00:05:19,800 --> 00:05:24,419
original function plus the hook

114
00:05:24,419 --> 00:05:26,580
and of course it implements magic

115
00:05:26,580 --> 00:05:28,680
packets

116
00:05:28,680 --> 00:05:30,960
the magic package Works in this way the

117
00:05:30,960 --> 00:05:33,000
attacker sends a magic packet to the

118
00:05:33,000 --> 00:05:35,340
computer and in the computer since

119
00:05:35,340 --> 00:05:38,039
locate places three

120
00:05:38,039 --> 00:05:41,300
um three hooks three Net filter hooks

121
00:05:41,300 --> 00:05:44,759
that are anything and if out at an nfm

122
00:05:44,759 --> 00:05:46,259
Pro

123
00:05:46,259 --> 00:05:49,080
anything is the purpose of any of the

124
00:05:49,080 --> 00:05:51,840
anything Hook is to get the the port of

125
00:05:51,840 --> 00:05:54,479
the boat in in order to hide it

126
00:05:54,479 --> 00:05:59,580
the the purpose of the NFL Hook is for

127
00:05:59,580 --> 00:06:02,699
the outgoing traffic for a placing the

128
00:06:02,699 --> 00:06:04,919
values that are able to to load the

129
00:06:04,919 --> 00:06:07,199
attacker with other computers using the

130
00:06:07,199 --> 00:06:10,860
proxy mode this is for proxy mode and

131
00:06:10,860 --> 00:06:14,580
anything Pro is the is the net filter

132
00:06:14,580 --> 00:06:17,340
hook that parses the bucket and in case

133
00:06:17,340 --> 00:06:20,039
the packet fits the requirements execute

134
00:06:20,039 --> 00:06:23,520
the commands in the in the system

135
00:06:23,520 --> 00:06:26,639
so in the in the bottom of the screen

136
00:06:26,639 --> 00:06:28,800
you can see the um at this at this

137
00:06:28,800 --> 00:06:31,680
assembly in either that that shows you

138
00:06:31,680 --> 00:06:34,740
how uh it uh how this is located

139
00:06:34,740 --> 00:06:37,380
registers the hooks for anything nfm Pro

140
00:06:37,380 --> 00:06:39,720
and NFL and on the top of it you can see

141
00:06:39,720 --> 00:06:43,860
a table that indicates all the structure

142
00:06:43,860 --> 00:06:46,139
of those hooks

143
00:06:46,139 --> 00:06:46,979
um

144
00:06:46,979 --> 00:06:49,080
if you take a look at the at the column

145
00:06:49,080 --> 00:06:51,660
priority you can see that nfm Pro

146
00:06:51,660 --> 00:06:55,319
contains is has the int Max priority I

147
00:06:55,319 --> 00:06:57,840
mean it will be executed at last

148
00:06:57,840 --> 00:07:00,000
but on the other hand any Fout and

149
00:07:00,000 --> 00:07:03,080
anything has a the has

150
00:07:03,080 --> 00:07:06,000
mean priority meaning that it will be

151
00:07:06,000 --> 00:07:08,880
those will be executed at first

152
00:07:08,880 --> 00:07:11,639
the hook number indicates something that

153
00:07:11,639 --> 00:07:14,280
is evident on the on the name of the

154
00:07:14,280 --> 00:07:16,979
hooks that is that anything Pro and

155
00:07:16,979 --> 00:07:20,280
anything applies to incoming traffic and

156
00:07:20,280 --> 00:07:23,699
NF out applies to outgoing traffic and I

157
00:07:23,699 --> 00:07:25,500
think that is important for us is that

158
00:07:25,500 --> 00:07:29,580
those hooks applies to a IP version 4

159
00:07:29,580 --> 00:07:34,219
according to the PF number which is two

160
00:07:34,380 --> 00:07:36,120
well if we take a look at the

161
00:07:36,120 --> 00:07:40,440
disassembly of the nfm pro a hook on a

162
00:07:40,440 --> 00:07:42,539
signal filter hook we can see that it

163
00:07:42,539 --> 00:07:45,360
passes the magic packets and in case the

164
00:07:45,360 --> 00:07:48,180
magic packet fits some requirements will

165
00:07:48,180 --> 00:07:50,759
execute the statistic function that you

166
00:07:50,759 --> 00:07:52,259
can see at the right margin of the

167
00:07:52,259 --> 00:07:53,220
screen

168
00:07:53,220 --> 00:07:54,480
and

169
00:07:54,480 --> 00:07:54,660
[Music]

170
00:07:54,660 --> 00:07:55,699
um

171
00:07:55,699 --> 00:07:58,259
what this function does is to it

172
00:07:58,259 --> 00:08:00,419
receives in in the AC register of the

173
00:08:00,419 --> 00:08:03,240
processor the command ID to of the of

174
00:08:03,240 --> 00:08:05,660
the command to be executed in the system

175
00:08:05,660 --> 00:08:09,419
and and it executes the this command in

176
00:08:09,419 --> 00:08:12,060
in user mode space if you take a look at

177
00:08:12,060 --> 00:08:13,860
the table we you can see that there are

178
00:08:13,860 --> 00:08:16,080
three commands that executes the bot

179
00:08:16,080 --> 00:08:18,660
command 0 command 1 and command two

180
00:08:18,660 --> 00:08:20,460
and finally there is an additional

181
00:08:20,460 --> 00:08:23,039
command that is the command 99 it what

182
00:08:23,039 --> 00:08:25,560
it does is to execute arbitrary commands

183
00:08:25,560 --> 00:08:28,379
in user mode space so it can start the

184
00:08:28,379 --> 00:08:30,180
bot but also has its own payload

185
00:08:30,180 --> 00:08:32,339
executing commands in user mode space

186
00:08:32,339 --> 00:08:36,120
command 0 executes the the vote in

187
00:08:36,120 --> 00:08:39,179
callback mode uh command one executes

188
00:08:39,179 --> 00:08:41,640
the board in normal mode I mean without

189
00:08:41,640 --> 00:08:44,399
parameters and command two executes the

190
00:08:44,399 --> 00:08:45,779
bot in

191
00:08:45,779 --> 00:08:48,420
proxy mode

192
00:08:48,420 --> 00:08:51,680
of course a one command one and two

193
00:08:51,680 --> 00:08:54,959
updates some internal variables comma 0

194
00:08:54,959 --> 00:08:57,720
is not fully implemented and it contains

195
00:08:57,720 --> 00:09:01,260
bugs so the common common one and common

196
00:09:01,260 --> 00:09:02,580
two updates for instance the login

197
00:09:02,580 --> 00:09:06,959
information this uh this uh these values

198
00:09:06,959 --> 00:09:10,380
that appear in in the login info are for

199
00:09:10,380 --> 00:09:12,120
a login the attacker when the attacker

200
00:09:12,120 --> 00:09:15,899
starts about some values are stored in

201
00:09:15,899 --> 00:09:19,800
in this structure and will use a later

202
00:09:19,800 --> 00:09:24,480
for a allowing or denying other magic

203
00:09:24,480 --> 00:09:27,600
packets I mean those are for for logging

204
00:09:27,600 --> 00:09:30,300
the attacker with the rootkit and there

205
00:09:30,300 --> 00:09:32,160
is also a field for the port for the

206
00:09:32,160 --> 00:09:34,080
poor boat or the variable for the port

207
00:09:34,080 --> 00:09:35,880
vote

208
00:09:35,880 --> 00:09:39,360
that is filled by the nfm pro net filter

209
00:09:39,360 --> 00:09:42,300
hook and it allows the rootkit for to

210
00:09:42,300 --> 00:09:46,920
hide the the level the port of the boat

211
00:09:46,920 --> 00:09:49,800
there is also a passing State variable I

212
00:09:49,800 --> 00:09:53,040
mean it checks a if the if the magic

213
00:09:53,040 --> 00:09:56,339
packets are are going well or or those

214
00:09:56,339 --> 00:09:58,620
don't fit their requirements and finally

215
00:09:58,620 --> 00:10:00,300
there is a state that indicates is the

216
00:10:00,300 --> 00:10:03,180
what if the bot is running is is not

217
00:10:03,180 --> 00:10:05,880
running if it is zero if it is running

218
00:10:05,880 --> 00:10:08,760
in normal mode if it is one and if it is

219
00:10:08,760 --> 00:10:11,399
loaded in proxy mode in case the value

220
00:10:11,399 --> 00:10:13,380
is two

221
00:10:13,380 --> 00:10:16,200
according to the to the commands that

222
00:10:16,200 --> 00:10:18,600
allows to start the vote we were able to

223
00:10:18,600 --> 00:10:22,500
find the the boat in in virus total also

224
00:10:22,500 --> 00:10:24,959
and if we take a look at the at the vote

225
00:10:24,959 --> 00:10:27,600
obviously it implements the same in the

226
00:10:27,600 --> 00:10:28,500
same

227
00:10:28,500 --> 00:10:31,019
um comments as we already saw starting

228
00:10:31,019 --> 00:10:33,360
about without parameters with callback

229
00:10:33,360 --> 00:10:37,880
mode or proxy mode but it allows also to

230
00:10:37,880 --> 00:10:42,779
add a port a com a port argument that

231
00:10:42,779 --> 00:10:46,200
that allows to fix the boat to abort to

232
00:10:46,200 --> 00:10:48,660
at least an import instead of running it

233
00:10:48,660 --> 00:10:51,540
in a random port

234
00:10:51,540 --> 00:10:54,360
and they both also implements the

235
00:10:54,360 --> 00:10:57,180
Payless Spanish reversion and also

236
00:10:57,180 --> 00:10:58,860
killing the boat you can see the the

237
00:10:58,860 --> 00:11:01,740
variable PID initialized to minus one

238
00:11:01,740 --> 00:11:03,420
which is

239
00:11:03,420 --> 00:11:04,019
um

240
00:11:04,019 --> 00:11:09,260
which allows to kill later the the what

241
00:11:09,779 --> 00:11:12,180
well let's see let's see how the the

242
00:11:12,180 --> 00:11:15,720
magic packets how the proxy mode works

243
00:11:15,720 --> 00:11:18,240
the attacker sends the the magic packet

244
00:11:18,240 --> 00:11:22,019
to the infected computer and since in

245
00:11:22,019 --> 00:11:23,940
this case it the attacker is using the

246
00:11:23,940 --> 00:11:25,079
step one

247
00:11:25,079 --> 00:11:28,260
it starts the proxy in the proxy mode

248
00:11:28,260 --> 00:11:30,600
Step One is how it appears in the code

249
00:11:30,600 --> 00:11:34,620
and how it appears also uh encrypted and

250
00:11:34,620 --> 00:11:36,600
also encoded in the in the magic packet

251
00:11:36,600 --> 00:11:38,880
and of course the attacker gets login

252
00:11:38,880 --> 00:11:42,000
with the rootkit

253
00:11:42,000 --> 00:11:44,519
then the attacker can send a comment to

254
00:11:44,519 --> 00:11:46,560
the bot which is already started in

255
00:11:46,560 --> 00:11:50,160
proxy mode and this is called a step two

256
00:11:50,160 --> 00:11:53,579
so they both sends a magic packet to the

257
00:11:53,579 --> 00:11:56,220
to the computer that is indicated in the

258
00:11:56,220 --> 00:11:58,680
command and the command gets executed in

259
00:11:58,680 --> 00:12:01,140
the remote computer and attack it in the

260
00:12:01,140 --> 00:12:02,820
attacker gets logged in in both

261
00:12:02,820 --> 00:12:04,680
computers

262
00:12:04,680 --> 00:12:07,079
there is also other possibility which

263
00:12:07,079 --> 00:12:09,540
consists in that the attacker sends um

264
00:12:09,540 --> 00:12:12,959
sends a magic packet to the to the proxy

265
00:12:12,959 --> 00:12:14,940
computer

266
00:12:14,940 --> 00:12:17,399
and this is called as the step three so

267
00:12:17,399 --> 00:12:19,920
the attacker can update the login the

268
00:12:19,920 --> 00:12:22,740
login information using step three but

269
00:12:22,740 --> 00:12:24,899
if there is other computer in proxy mode

270
00:12:24,899 --> 00:12:26,579
it is possible for the attacker to send

271
00:12:26,579 --> 00:12:29,519
a comment and that the boat sends also

272
00:12:29,519 --> 00:12:30,959
step 3 for updating the login

273
00:12:30,959 --> 00:12:35,040
information in other computer

274
00:12:35,040 --> 00:12:37,560
let's take a look on how to analyze

275
00:12:37,560 --> 00:12:40,440
magic packets or or how I analyze it

276
00:12:40,440 --> 00:12:41,820
because there are more possible

277
00:12:41,820 --> 00:12:45,120
solutions so uh if we take a look at the

278
00:12:45,120 --> 00:12:49,500
at the at the rectangle we have there a

279
00:12:49,500 --> 00:12:53,519
python code that uh that that contains

280
00:12:53,519 --> 00:12:55,800
the the IP here and the TCP header of

281
00:12:55,800 --> 00:12:57,660
the of the packet so if you take a look

282
00:12:57,660 --> 00:13:00,420
at the TCP here at the first byte it is

283
00:13:00,420 --> 00:13:04,560
45 and it means 40 because this is IP

284
00:13:04,560 --> 00:13:06,959
version 4. as you already saw in the

285
00:13:06,959 --> 00:13:10,380
table of the net filter hooks that have

286
00:13:10,380 --> 00:13:12,899
the PF number set to two that indicates

287
00:13:12,899 --> 00:13:16,260
that it is a hooks for IP version 4. and

288
00:13:16,260 --> 00:13:19,500
you can see also the the the

289
00:13:19,500 --> 00:13:22,620
the the the five number that indicates

290
00:13:22,620 --> 00:13:26,459
the size of the IP header in the words

291
00:13:26,459 --> 00:13:29,399
and on the top of the of the screen you

292
00:13:29,399 --> 00:13:31,560
can see a disassembly neither

293
00:13:31,560 --> 00:13:35,279
and you can you can attach that are

294
00:13:35,279 --> 00:13:38,760
12 is is pointing to the IP either plus

295
00:13:38,760 --> 00:13:41,519
nine offset is pointing to the protocol

296
00:13:41,519 --> 00:13:43,139
and you can see the comparison against

297
00:13:43,139 --> 00:13:46,139
six and if you take the look at the for

298
00:13:46,139 --> 00:13:47,639
instance the source code of Linux you

299
00:13:47,639 --> 00:13:50,880
can see that 6 means TCP protocol so we

300
00:13:50,880 --> 00:13:54,120
can understand the the template for our

301
00:13:54,120 --> 00:13:58,279
our magic packet to TCP

302
00:13:59,480 --> 00:14:02,339
it is recommended it is recommended to

303
00:14:02,339 --> 00:14:06,540
to to patch the boat for for not hiding

304
00:14:06,540 --> 00:14:09,360
itself so what I do for instance is to

305
00:14:09,360 --> 00:14:13,500
put a return return instruction uh after

306
00:14:13,500 --> 00:14:17,100
the call that that the

307
00:14:17,100 --> 00:14:19,620
um that the compiler does for profiling

308
00:14:19,620 --> 00:14:22,620
so in in the in the height model such

309
00:14:22,620 --> 00:14:24,620
that it does nothing

310
00:14:24,620 --> 00:14:29,220
and well this way we can list the the

311
00:14:29,220 --> 00:14:31,380
the modules because this model is not

312
00:14:31,380 --> 00:14:33,360
hiding anymore and we can see that in

313
00:14:33,360 --> 00:14:35,399
this case it's not syslok K they change

314
00:14:35,399 --> 00:14:37,740
the name to disk SC

315
00:14:37,740 --> 00:14:40,199
and then we can also print the Base

316
00:14:40,199 --> 00:14:44,599
address of the of the module

317
00:14:44,699 --> 00:14:47,399
So based on that on the Base address we

318
00:14:47,399 --> 00:14:51,899
we can place uh breakpoints on it and

319
00:14:51,899 --> 00:14:55,500
also we can trace symbols I'm doing K

320
00:14:55,500 --> 00:14:57,720
probes for this a facility of Linux for

321
00:14:57,720 --> 00:15:00,560
for tracing

322
00:15:00,720 --> 00:15:03,899
and in this in this part you can see an

323
00:15:03,899 --> 00:15:08,160
implementation of uh of uh K probe that

324
00:15:08,160 --> 00:15:11,279
I was using that simply gets the their

325
00:15:11,279 --> 00:15:14,459
the registers that are available when

326
00:15:14,459 --> 00:15:17,699
when the breakpoint hits and it prints

327
00:15:17,699 --> 00:15:19,980
the the value for the protocol and

328
00:15:19,980 --> 00:15:22,740
comparison to six to check that it fits

329
00:15:22,740 --> 00:15:24,839
the requirements and with the research

330
00:15:24,839 --> 00:15:28,560
received a byte of the TCP alert us to

331
00:15:28,560 --> 00:15:30,180
see that it fits the requirements and so

332
00:15:30,180 --> 00:15:31,980
on

333
00:15:31,980 --> 00:15:34,380
so let's take a look on how to analyze

334
00:15:34,380 --> 00:15:37,800
the common 99 I mean the the the magic

335
00:15:37,800 --> 00:15:39,540
packet that allows to execute arbitrary

336
00:15:39,540 --> 00:15:42,899
commands in user mode space

337
00:15:42,899 --> 00:15:45,600
we start with the 45 because of the IP

338
00:15:45,600 --> 00:15:48,660
version 4 plus the five day words in

339
00:15:48,660 --> 00:15:52,139
length of the IP here there we add the

340
00:15:52,139 --> 00:15:54,540
the value for the protocol in which in

341
00:15:54,540 --> 00:15:57,139
this case is TCP which is

342
00:15:57,139 --> 00:16:00,779
and and then we start with the TCP with

343
00:16:00,779 --> 00:16:02,820
the comparisons in the TCP here that you

344
00:16:02,820 --> 00:16:05,360
can see that our 13 is pointing to the

345
00:16:05,360 --> 00:16:10,500
TCP theater plus d in offset starting

346
00:16:10,500 --> 00:16:12,899
account by zero we can see that it

347
00:16:12,899 --> 00:16:16,199
points to the flags which are compared

348
00:16:16,199 --> 00:16:18,660
by the constant two

349
00:16:18,660 --> 00:16:22,199
so we put a two in our template

350
00:16:22,199 --> 00:16:24,779
and then you can see that it gets the

351
00:16:24,779 --> 00:16:28,560
higher level of of with of a byte that

352
00:16:28,560 --> 00:16:30,660
is five but what it does is the

353
00:16:30,660 --> 00:16:33,300
following r13 is pointing to the TCP

354
00:16:33,300 --> 00:16:37,920
here plus C it points to the to the byte

355
00:16:37,920 --> 00:16:42,540
at the C offset but in with the sh ER

356
00:16:42,540 --> 00:16:43,630
are

357
00:16:43,630 --> 00:16:44,279
[Music]

358
00:16:44,279 --> 00:16:45,380
um

359
00:16:45,380 --> 00:16:49,860
assembly instruction it if it shifts 4

360
00:16:49,860 --> 00:16:53,339
bit this byte to the right such that it

361
00:16:53,339 --> 00:16:54,839
gets five

362
00:16:54,839 --> 00:16:58,860
since 5 multiplied by 4 is 20 this is

363
00:16:58,860 --> 00:17:01,139
exactly the size of the TCP here that

364
00:17:01,139 --> 00:17:03,959
you can see this in the layer or layer

365
00:17:03,959 --> 00:17:05,000
instruction

366
00:17:05,000 --> 00:17:08,520
in Assembly Language which is a moving

367
00:17:08,520 --> 00:17:10,919
the address the address of the data of

368
00:17:10,919 --> 00:17:13,740
the packet to the RDI register of the

369
00:17:13,740 --> 00:17:15,599
processor

370
00:17:15,599 --> 00:17:18,359
well we are done with the IP header and

371
00:17:18,359 --> 00:17:20,459
the DCP header if it's the requirement

372
00:17:20,459 --> 00:17:23,760
so now let's focus in the data

373
00:17:23,760 --> 00:17:26,160
we can see the value one one two two

374
00:17:26,160 --> 00:17:28,799
three three four four and since we will

375
00:17:28,799 --> 00:17:30,600
send it to the network we need to place

376
00:17:30,600 --> 00:17:32,340
it in reverse order

377
00:17:32,340 --> 00:17:35,340
and you can see that the next that the

378
00:17:35,340 --> 00:17:37,679
next instruction is a call to a function

379
00:17:37,679 --> 00:17:40,020
that I rename to Magic check flip last

380
00:17:40,020 --> 00:17:42,900
bit and what it does is to take take the

381
00:17:42,900 --> 00:17:44,940
wall data and flip

382
00:17:44,940 --> 00:17:49,020
it the last bit for each byte

383
00:17:49,020 --> 00:17:53,100
and then compare this this magic value

384
00:17:53,100 --> 00:17:56,178
that needs too much

385
00:17:57,360 --> 00:17:59,520
you can see here the comparison that

386
00:17:59,520 --> 00:18:02,160
that checks the length of the data

387
00:18:02,160 --> 00:18:06,720
so it needs to be at least 292 I will

388
00:18:06,720 --> 00:18:10,740
use the value 293 and subtract the

389
00:18:10,740 --> 00:18:13,380
length of the magic value to be presses

390
00:18:13,380 --> 00:18:17,460
and and put 293 bytes of data

391
00:18:17,460 --> 00:18:21,840
you can see also the RBI RBX register of

392
00:18:21,840 --> 00:18:24,660
the processor pointing to the data plus

393
00:18:24,660 --> 00:18:28,080
the offset four it escapes the magic

394
00:18:28,080 --> 00:18:32,880
value so it is pointing to to a data

395
00:18:32,880 --> 00:18:35,220
which is expected to be an unterminated

396
00:18:35,220 --> 00:18:40,080
key you can see that I add this key with

397
00:18:40,080 --> 00:18:43,200
the with the null value and also adjust

398
00:18:43,200 --> 00:18:45,539
the padding for this

399
00:18:45,539 --> 00:18:48,179
and finally you can see the arbitrary

400
00:18:48,179 --> 00:18:50,400
command we reached the basic block that

401
00:18:50,400 --> 00:18:52,679
that we was looking for

402
00:18:52,679 --> 00:18:57,179
RBX is pointing to the data plus 24

403
00:18:57,179 --> 00:18:58,039
um

404
00:18:58,039 --> 00:19:01,620
bytes in in hexadecimal we need to place

405
00:19:01,620 --> 00:19:03,600
there the arbitrary command and then

406
00:19:03,600 --> 00:19:06,660
adjust the padding

407
00:19:06,660 --> 00:19:10,500
this is how a k probes looks like when

408
00:19:10,500 --> 00:19:13,440
when when we execute this this python

409
00:19:13,440 --> 00:19:16,200
code we have in the left screen in the

410
00:19:16,200 --> 00:19:17,820
left part of the screen you have the

411
00:19:17,820 --> 00:19:20,039
shell that is executing the sending a

412
00:19:20,039 --> 00:19:22,260
magic packet and on the other hand you

413
00:19:22,260 --> 00:19:25,500
can see a terminal that is printing the

414
00:19:25,500 --> 00:19:29,940
the the output of of our Tracer using K

415
00:19:29,940 --> 00:19:32,280
probes and you can see that it executes

416
00:19:32,280 --> 00:19:35,340
our arbitrary command

417
00:19:35,340 --> 00:19:38,220
well I will not go with all the details

418
00:19:38,220 --> 00:19:40,980
and all the comparisons with all the

419
00:19:40,980 --> 00:19:43,440
magic packets but I will tell you all

420
00:19:43,440 --> 00:19:45,480
the relevant information for the rest of

421
00:19:45,480 --> 00:19:48,059
the magic packets command 1 executes the

422
00:19:48,059 --> 00:19:50,160
bot without parameters I mean in normal

423
00:19:50,160 --> 00:19:54,360
mode and uh got it what it does is to

424
00:19:54,360 --> 00:19:55,440
check

425
00:19:55,440 --> 00:19:59,640
um the the valid ER that the the packet

426
00:19:59,640 --> 00:20:01,919
contains the the

427
00:20:01,919 --> 00:20:05,100
one identity identification of of the

428
00:20:05,100 --> 00:20:08,940
lead of of the list of valid IDs and one

429
00:20:08,940 --> 00:20:12,600
value of of a valid six that that are

430
00:20:12,600 --> 00:20:14,580
the sequence number for the DCP here

431
00:20:14,580 --> 00:20:16,879
there

432
00:20:17,280 --> 00:20:19,799
well what when when the what sends it in

433
00:20:19,799 --> 00:20:22,440
in proxy mode it it chooses one value at

434
00:20:22,440 --> 00:20:25,380
random and well there is an additional

435
00:20:25,380 --> 00:20:27,840
version of command one that allows to

436
00:20:27,840 --> 00:20:30,120
kill previous instances before executing

437
00:20:30,120 --> 00:20:32,520
the vote and what it does is to use the

438
00:20:32,520 --> 00:20:34,620
magic value zero zero zero zero zero

439
00:20:34,620 --> 00:20:36,539
zero two c

440
00:20:36,539 --> 00:20:39,840
this means killing before executing

441
00:20:39,840 --> 00:20:43,200
and the the there is also the

442
00:20:43,200 --> 00:20:44,580
possibility of executing the bottom

443
00:20:44,580 --> 00:20:47,760
proxy mode what what what we need to do

444
00:20:47,760 --> 00:20:49,919
for the Imagine value for the for the

445
00:20:49,919 --> 00:20:52,200
magic packet is to place the string step

446
00:20:52,200 --> 00:20:56,880
one encrypted with as AES encounter mode

447
00:20:56,880 --> 00:21:00,000
using the appropriate key plus and

448
00:21:00,000 --> 00:21:03,000
prepending the the length to it of the

449
00:21:03,000 --> 00:21:06,660
of these encrypted data using numeric

450
00:21:06,660 --> 00:21:09,360
characters and finally all of this data

451
00:21:09,360 --> 00:21:13,320
encoded in basis using basis default

452
00:21:13,320 --> 00:21:15,179
encoding

453
00:21:15,179 --> 00:21:16,880
foreign

454
00:21:16,880 --> 00:21:19,080
this is not the only the only place

455
00:21:19,080 --> 00:21:21,660
where encryption is is used you can see

456
00:21:21,660 --> 00:21:24,720
that it uses AES encryption and this is

457
00:21:24,720 --> 00:21:26,400
the implementation this GitHub

458
00:21:26,400 --> 00:21:28,080
repository

459
00:21:28,080 --> 00:21:32,720
you can see that it uses an one xor key

460
00:21:32,720 --> 00:21:35,220
that is an alternative solution to the

461
00:21:35,220 --> 00:21:37,740
magic value that we was using one one

462
00:21:37,740 --> 00:21:39,720
two two three three four four and there

463
00:21:39,720 --> 00:21:41,520
are also more keys that are not being

464
00:21:41,520 --> 00:21:43,500
used by this sample with other functions

465
00:21:43,500 --> 00:21:46,020
that are not being used by this sample

466
00:21:46,020 --> 00:21:48,780
but those can be used in other samples

467
00:21:48,780 --> 00:21:51,360
in other samples and you can see that it

468
00:21:51,360 --> 00:21:54,980
also contains code with our

469
00:21:54,980 --> 00:21:57,140
rc4

470
00:21:57,140 --> 00:22:00,059
encryption with with the keys and the

471
00:22:00,059 --> 00:22:02,580
IBS and all the parameters with other

472
00:22:02,580 --> 00:22:04,740
functions that are also not used in the

473
00:22:04,740 --> 00:22:06,840
sample but maybe in other samples those

474
00:22:06,840 --> 00:22:08,460
are used

475
00:22:08,460 --> 00:22:10,559
and there is also a variant on command

476
00:22:10,559 --> 00:22:14,280
id2 that again allows to run the proxy

477
00:22:14,280 --> 00:22:17,220
mode but killing previous instances and

478
00:22:17,220 --> 00:22:19,320
it again consists into sending a magic

479
00:22:19,320 --> 00:22:23,520
value zero zero zero zero zero zero to C

480
00:22:23,520 --> 00:22:25,860
well and of course it is possible to

481
00:22:25,860 --> 00:22:27,360
update the login information when the

482
00:22:27,360 --> 00:22:30,780
attacker gets logged in in with the with

483
00:22:30,780 --> 00:22:32,700
the rootkit it is also possible to

484
00:22:32,700 --> 00:22:36,840
update those values using these these

485
00:22:36,840 --> 00:22:39,240
other comment that is step three and it

486
00:22:39,240 --> 00:22:41,640
is encrypted with AES in Contour mode

487
00:22:41,640 --> 00:22:43,320
prepending the length and finally

488
00:22:43,320 --> 00:22:46,200
encoding it with base64 and you can see

489
00:22:46,200 --> 00:22:48,960
that it must be it checks that the state

490
00:22:48,960 --> 00:22:52,620
is two I mean running in proxy mode and

491
00:22:52,620 --> 00:22:54,960
this is just after running the proxy

492
00:22:54,960 --> 00:22:57,179
mode because of the variable three that

493
00:22:57,179 --> 00:22:59,100
can that indicates that that the the

494
00:22:59,100 --> 00:23:02,400
proxy mode was executed successfully

495
00:23:02,400 --> 00:23:04,799
you can see that the Callback mode is

496
00:23:04,799 --> 00:23:09,000
not enabled in the rootkit because it

497
00:23:09,000 --> 00:23:11,340
doesn't work you can see that our cross

498
00:23:11,340 --> 00:23:14,280
references to the statistic function but

499
00:23:14,280 --> 00:23:18,320
only with the other common IDs

500
00:23:18,320 --> 00:23:21,419
hard-coded as a constant in the SC

501
00:23:21,419 --> 00:23:24,360
register of the processor

502
00:23:24,360 --> 00:23:28,559
if you run the if you run the the if if

503
00:23:28,559 --> 00:23:31,799
you run the Callback mode in in the bot

504
00:23:31,799 --> 00:23:34,559
manually it it consumes a lot of

505
00:23:34,559 --> 00:23:37,620
resources and it is not working but the

506
00:23:37,620 --> 00:23:41,820
logic can be understood

507
00:23:41,820 --> 00:23:44,280
we can see that it reduces the the code

508
00:23:44,280 --> 00:23:46,620
from another NG for the for the hooks it

509
00:23:46,620 --> 00:23:49,980
hooks the virtual file system and in

510
00:23:49,980 --> 00:23:51,419
this way it is able to hide the

511
00:23:51,419 --> 00:23:53,100
direction the directory with the

512
00:23:53,100 --> 00:23:55,020
malicious stuff

513
00:23:55,020 --> 00:23:57,240
and we can see that it performs inline

514
00:23:57,240 --> 00:24:00,539
hooking using the you you this 86

515
00:24:00,539 --> 00:24:02,960
disassembly dependency

516
00:24:02,960 --> 00:24:06,440
with the

517
00:24:06,600 --> 00:24:09,480
proc filter for hiding processes that

518
00:24:09,480 --> 00:24:13,080
matches a list of piece but also the the

519
00:24:13,080 --> 00:24:16,380
those strings the the bus process sh

520
00:24:16,380 --> 00:24:18,900
process and also the about processes

521
00:24:18,900 --> 00:24:24,059
which has this name as M1 and so on

522
00:24:24,059 --> 00:24:27,480
it also hides the malicious traffic of

523
00:24:27,480 --> 00:24:30,240
the boat and what it does is to store

524
00:24:30,240 --> 00:24:32,640
the the part of the boat in an internal

525
00:24:32,640 --> 00:24:36,000
variable and then filter the events for

526
00:24:36,000 --> 00:24:39,840
the sequence file the the that stores

527
00:24:39,840 --> 00:24:44,899
the events for IP version 4.

528
00:24:47,039 --> 00:24:49,080
well let's let's take a look at the at

529
00:24:49,080 --> 00:24:51,000
the boat itself

530
00:24:51,000 --> 00:24:53,039
sorry

531
00:24:53,039 --> 00:24:56,940
it the bot exposes different services or

532
00:24:56,940 --> 00:24:58,860
protocols to the attacker for connecting

533
00:24:58,860 --> 00:25:01,080
to it

534
00:25:01,080 --> 00:25:04,320
for instance an example is is the SMTP

535
00:25:04,320 --> 00:25:06,600
fake protocol and you can see that it is

536
00:25:06,600 --> 00:25:10,679
that it is hard-coded the the value for

537
00:25:10,679 --> 00:25:13,500
so depending on on which values are

538
00:25:13,500 --> 00:25:15,740
coded in the in the sample it will

539
00:25:15,740 --> 00:25:20,539
expose one service or another

540
00:25:21,720 --> 00:25:24,419
again the the comparison against F4 with

541
00:25:24,419 --> 00:25:26,880
the fake SMTP server and if we take a

542
00:25:26,880 --> 00:25:28,919
look at the code of the SMTP server we

543
00:25:28,919 --> 00:25:31,679
cannotize a typo on it that allows us to

544
00:25:31,679 --> 00:25:33,720
go to the to the source code on Internet

545
00:25:33,720 --> 00:25:38,299
that is for a 2017.

546
00:25:38,299 --> 00:25:41,039
uh well this is the code that they they

547
00:25:41,039 --> 00:25:43,740
use for implementing the SMTP server

548
00:25:43,740 --> 00:25:45,659
we can see that depending on the on the

549
00:25:45,659 --> 00:25:47,900
protocol they have a

550
00:25:47,900 --> 00:25:51,900
function that handles both TTP TCP or

551
00:25:51,900 --> 00:25:54,299
SSL and depending on the protocol that

552
00:25:54,299 --> 00:25:56,159
is being implemented

553
00:25:56,159 --> 00:25:59,220
so we transported from the developer's

554
00:25:59,220 --> 00:26:00,299
perspective

555
00:26:00,299 --> 00:26:04,860
and in case it uses SSL it will rely in

556
00:26:04,860 --> 00:26:08,039
this certificate that way they was using

557
00:26:08,039 --> 00:26:10,799
also in seasonal K version one which is

558
00:26:10,799 --> 00:26:13,980
interesting for hunting new samples

559
00:26:13,980 --> 00:26:17,460
and the magic packages that the both

560
00:26:17,460 --> 00:26:20,400
sense are not evident I mean those fakes

561
00:26:20,400 --> 00:26:22,700
Apache to

562
00:26:22,700 --> 00:26:26,340
a legitimate Apache to a service and

563
00:26:26,340 --> 00:26:30,059
Mozilla Firefox application

564
00:26:30,059 --> 00:26:32,460
you can see in the right margin of this

565
00:26:32,460 --> 00:26:36,260
table how it

566
00:26:36,260 --> 00:26:40,260
structures the the code of the of this

567
00:26:40,260 --> 00:26:43,640
fake applications

568
00:26:43,640 --> 00:26:47,580
and of course the steps and also other

569
00:26:47,580 --> 00:26:49,919
values that that are that can be

570
00:26:49,919 --> 00:26:53,400
encrypted and then and then encoded are

571
00:26:53,400 --> 00:26:57,360
performed in this function in the in the

572
00:26:57,360 --> 00:27:00,059
in the bot

573
00:27:00,059 --> 00:27:02,760
and those values the step the step two

574
00:27:02,760 --> 00:27:05,340
and the step three goes in the cookie ID

575
00:27:05,340 --> 00:27:07,980
this is the reason why they use base64

576
00:27:07,980 --> 00:27:10,460
they want to make it

577
00:27:10,460 --> 00:27:13,940
more realistic

578
00:27:14,039 --> 00:27:17,580
and you can see the dependencies that

579
00:27:17,580 --> 00:27:21,720
they use for uh for um performing the

580
00:27:21,720 --> 00:27:24,240
the con the connections what they rely

581
00:27:24,240 --> 00:27:26,299
they realize in this

582
00:27:26,299 --> 00:27:29,400
dependency which is part of a course

583
00:27:29,400 --> 00:27:32,159
from here from France the cool Cruiser

584
00:27:32,159 --> 00:27:33,659
at communication

585
00:27:33,659 --> 00:27:37,320
and it is a network toolkit

586
00:27:37,320 --> 00:27:39,600
we can see also a more specific

587
00:27:39,600 --> 00:27:42,360
dependency which allows to implement a

588
00:27:42,360 --> 00:27:44,460
magic packets the the craft the magic

589
00:27:44,460 --> 00:27:47,580
packets in user mode space this they

590
00:27:47,580 --> 00:27:51,120
used this this called as an iPad for

591
00:27:51,120 --> 00:27:55,559
setting the IP address sorry the the IP

592
00:27:55,559 --> 00:27:58,020
the IP here the values and the TCP here

593
00:27:58,020 --> 00:28:01,158
their values

594
00:28:01,620 --> 00:28:05,460
and well that's all as conclusion we can

595
00:28:05,460 --> 00:28:07,980
see that linear streets are getting more

596
00:28:07,980 --> 00:28:11,039
and more complex that a net filter can

597
00:28:11,039 --> 00:28:13,320
be abused in different ways for instance

598
00:28:13,320 --> 00:28:16,440
it can implement multi-pockets but it

599
00:28:16,440 --> 00:28:19,980
can also escape the firewall in case in

600
00:28:19,980 --> 00:28:23,340
case because iptable relies in in net

601
00:28:23,340 --> 00:28:24,299
filter

602
00:28:24,299 --> 00:28:27,480
and the combination of traditional root

603
00:28:27,480 --> 00:28:29,820
kit techniques that we can see in in

604
00:28:29,820 --> 00:28:32,039
GitHub and so on and fake services and

605
00:28:32,039 --> 00:28:34,440
Magic packets makers of cislope K

606
00:28:34,440 --> 00:28:37,140
version 2 and an interesting and

607
00:28:37,140 --> 00:28:39,240
Powerful rootkit that can Inspire others

608
00:28:39,240 --> 00:28:43,220
to to implement botnets

609
00:28:43,260 --> 00:28:44,800
that's all from my site

610
00:28:44,800 --> 00:28:53,760
[Applause]

611
00:28:53,760 --> 00:28:56,760
what questions

612
00:28:56,760 --> 00:28:58,440
you have a chat open

613
00:28:58,440 --> 00:29:01,820
up okay

614
00:29:03,539 --> 00:29:07,279
yeah okay I go over there first

615
00:29:16,740 --> 00:29:18,860
thank you

616
00:29:18,899 --> 00:29:21,360
thank you for the presentation

617
00:29:21,360 --> 00:29:23,220
um did you check on Showdown or

618
00:29:23,220 --> 00:29:25,200
equivalent tools if some fake services

619
00:29:25,200 --> 00:29:27,539
are Exposed on the internet maybe

620
00:29:27,539 --> 00:29:29,120
through the SL

621
00:29:29,120 --> 00:29:31,620
public certificate

622
00:29:31,620 --> 00:29:35,580
well uh no I I didn't check it in in in

623
00:29:35,580 --> 00:29:39,299
in Shoreland we was looking in in our

624
00:29:39,299 --> 00:29:42,000
telemetry but

625
00:29:42,000 --> 00:29:43,919
um it seems that that these malware is

626
00:29:43,919 --> 00:29:46,500
under the under development as you can

627
00:29:46,500 --> 00:29:48,299
see the Callback mode for instance is

628
00:29:48,299 --> 00:29:53,399
not uh is not fully implemented and it

629
00:29:53,399 --> 00:29:55,340
seems that they are

630
00:29:55,340 --> 00:29:57,419
implementing the the rootkit and from

631
00:29:57,419 --> 00:29:59,220
time to time submitting samples from

632
00:29:59,220 --> 00:30:01,140
from virus total I want to be

633
00:30:01,140 --> 00:30:04,140
transparent we found it in varus total

634
00:30:04,140 --> 00:30:06,860
thank you thanks

635
00:30:15,539 --> 00:30:17,760
hi I was wondering how you actually

636
00:30:17,760 --> 00:30:19,799
found the sample that you started

637
00:30:19,799 --> 00:30:21,360
investigating in the first place how did

638
00:30:21,360 --> 00:30:23,220
you find it and how did you figure it

639
00:30:23,220 --> 00:30:24,360
was going to be interesting enough to

640
00:30:24,360 --> 00:30:26,159
start investigating it

641
00:30:26,159 --> 00:30:27,659
sorry can you can you repeat the

642
00:30:27,659 --> 00:30:28,620
question why did you actually come

643
00:30:28,620 --> 00:30:30,480
across the sample in the first place how

644
00:30:30,480 --> 00:30:32,460
do you how did you find it and then how

645
00:30:32,460 --> 00:30:33,480
did you decide it was going to be

646
00:30:33,480 --> 00:30:35,000
interesting enough to start looking into

647
00:30:35,000 --> 00:30:40,320
well uh I'm I'm always hunting files in

648
00:30:40,320 --> 00:30:41,520
different

649
00:30:41,520 --> 00:30:43,200
um

650
00:30:43,200 --> 00:30:45,899
services and one of them is is virus

651
00:30:45,899 --> 00:30:48,299
total and and well by writing their

652
00:30:48,299 --> 00:30:53,100
rules and so on we was able to find it

653
00:30:53,100 --> 00:30:55,520
yes

654
00:30:58,679 --> 00:31:01,399
thank you

655
00:31:02,159 --> 00:31:04,940
thank you very much very for research

656
00:31:04,940 --> 00:31:08,460
and my question is did you find like any

657
00:31:08,460 --> 00:31:11,460
life infections in your Telemetry in

658
00:31:11,460 --> 00:31:15,059
your data and also how far back this

659
00:31:15,059 --> 00:31:18,419
rootkit goes is it very recent and and

660
00:31:18,419 --> 00:31:20,399
also you didn't know mention any

661
00:31:20,399 --> 00:31:23,580
obfuscation so there was no obscation in

662
00:31:23,580 --> 00:31:26,700
the root kit so three questions well

663
00:31:26,700 --> 00:31:29,279
um there is no obfuscation in the in the

664
00:31:29,279 --> 00:31:31,320
in the sample it's not it's not

665
00:31:31,320 --> 00:31:34,919
obfuscated and and well we don't find

666
00:31:34,919 --> 00:31:39,440
data on it and we also don't so

667
00:31:39,440 --> 00:31:42,720
others publishing anything about it

668
00:31:42,720 --> 00:31:46,260
but what we are doing is looking for

669
00:31:46,260 --> 00:31:49,679
this we first look for for theaters that

670
00:31:49,679 --> 00:31:52,200
we know that root Keys tend to use and

671
00:31:52,200 --> 00:31:54,720
we count samples this way with different

672
00:31:54,720 --> 00:31:56,820
sources and

673
00:31:56,820 --> 00:31:58,020
um

674
00:31:58,020 --> 00:32:01,740
and well it matches our our rules and we

675
00:32:01,740 --> 00:32:03,840
was able to find it

676
00:32:03,840 --> 00:32:07,279
thank you Nikita for the question

677
00:32:08,220 --> 00:32:10,399
okay

678
00:32:16,860 --> 00:32:17,520
um

679
00:32:17,520 --> 00:32:19,440
did you try to different with net filter

680
00:32:19,440 --> 00:32:22,500
business filter attack like managed to

681
00:32:22,500 --> 00:32:24,419
build some Fireball rule that can block

682
00:32:24,419 --> 00:32:26,539
this magic packet

683
00:32:26,539 --> 00:32:29,340
sorry are you are you asking if if I

684
00:32:29,340 --> 00:32:31,500
found other samples no no no no I'm

685
00:32:31,500 --> 00:32:35,220
asking did you can you use some iptable

686
00:32:35,220 --> 00:32:38,100
or inevitable rules that could block the

687
00:32:38,100 --> 00:32:40,679
magic packets because basically they

688
00:32:40,679 --> 00:32:42,240
seem clearly defined so we couldn't

689
00:32:42,240 --> 00:32:44,460
could just block them on a firewall

690
00:32:44,460 --> 00:32:47,880
before it reached the server well uh I

691
00:32:47,880 --> 00:32:49,679
know I'm not probably not the

692
00:32:49,679 --> 00:32:51,720
appropriate person for for asking for

693
00:32:51,720 --> 00:32:53,039
asking this for replying this question

694
00:32:53,039 --> 00:32:56,880
because I I simply find a malware that

695
00:32:56,880 --> 00:33:00,240
is that is new but even if I create

696
00:33:00,240 --> 00:33:02,100
detections and so on there are other

697
00:33:02,100 --> 00:33:05,299
other groups other other

698
00:33:05,299 --> 00:33:07,799
departments that are responsible of

699
00:33:07,799 --> 00:33:10,080
creating the technology and so on and

700
00:33:10,080 --> 00:33:13,980
maybe a day know more about it

701
00:33:13,980 --> 00:33:16,700
thank you

702
00:33:17,159 --> 00:33:19,980
hello uh thanks for the talk uh I wonder

703
00:33:19,980 --> 00:33:22,980
if you have any ideas on detection

704
00:33:22,980 --> 00:33:25,740
sorry I wonder if you have any ideas on

705
00:33:25,740 --> 00:33:29,539
the detection like here on the execution

706
00:33:29,539 --> 00:33:34,700
stage or later when it's already running

707
00:33:34,919 --> 00:33:36,960
well uh there are there are a lot of

708
00:33:36,960 --> 00:33:39,299
points when when you where you can see

709
00:33:39,299 --> 00:33:42,360
you can see the files that it creates

710
00:33:42,360 --> 00:33:45,600
you can see the the net filter hooks

711
00:33:45,600 --> 00:33:49,380
that it that it places and well you can

712
00:33:49,380 --> 00:33:51,240
see that it also hides itself that it

713
00:33:51,240 --> 00:33:54,120
reduces code from other NG so there are

714
00:33:54,120 --> 00:33:55,860
a lot of places when where you can

715
00:33:55,860 --> 00:33:58,019
create detections for it

716
00:33:58,019 --> 00:34:00,179
yes thank you

717
00:34:00,179 --> 00:34:03,370
okay thank you very much thank you

718
00:34:03,370 --> 00:34:06,489
[Applause]

