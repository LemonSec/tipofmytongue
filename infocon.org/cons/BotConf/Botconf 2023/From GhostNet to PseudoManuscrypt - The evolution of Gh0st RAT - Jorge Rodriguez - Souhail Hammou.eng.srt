1
00:00:02,040 --> 00:00:04,799
thank you very much for

2
00:00:04,799 --> 00:00:06,779
um thank you everyone and thank you for

3
00:00:06,779 --> 00:00:07,500
the

4
00:00:07,500 --> 00:00:09,480
opportunity to be here today we are

5
00:00:09,480 --> 00:00:12,360
super excited this is our second podcast

6
00:00:12,360 --> 00:00:15,660
of hopefully many more to come

7
00:00:15,660 --> 00:00:18,600
and today we wanted to share some

8
00:00:18,600 --> 00:00:21,900
research we have done on ghostrad and

9
00:00:21,900 --> 00:00:24,960
save the manuscript withdrawal

10
00:00:24,960 --> 00:00:28,140
first let us introduce ourselves my name

11
00:00:28,140 --> 00:00:29,939
is Jorge Rodriguez I am the marble

12
00:00:29,939 --> 00:00:32,040
research team lead in the malware

13
00:00:32,040 --> 00:00:35,760
intelligence team at intel471

14
00:00:35,760 --> 00:00:37,079
um we are mainly

15
00:00:37,079 --> 00:00:39,719
tracking malware through automated

16
00:00:39,719 --> 00:00:42,239
extraction of artifacts which then we

17
00:00:42,239 --> 00:00:47,300
leverage for Bond net emulation

18
00:00:48,260 --> 00:00:50,579
I'm a senior malware reverse engineer

19
00:00:50,579 --> 00:00:53,940
with intel471 my main duties include a

20
00:00:53,940 --> 00:00:55,440
reverse engineer malware writing

21
00:00:55,440 --> 00:00:58,140
comprehensive reports coding extractors

22
00:00:58,140 --> 00:00:59,940
and emulators to track malware and

23
00:00:59,940 --> 00:01:02,399
botnet activities

24
00:01:02,399 --> 00:01:05,099
so the agenda we have for today is

25
00:01:05,099 --> 00:01:08,159
mainly focus on Save the manuscript we

26
00:01:08,159 --> 00:01:10,500
are going to do a deep dive later in the

27
00:01:10,500 --> 00:01:13,320
second part of the talk but before doing

28
00:01:13,320 --> 00:01:15,659
so we are going to

29
00:01:15,659 --> 00:01:19,140
set ourselves in a proper context on the

30
00:01:19,140 --> 00:01:21,900
coast route the you know table variance

31
00:01:21,900 --> 00:01:23,939
and so on history

32
00:01:23,939 --> 00:01:26,400
on it

33
00:01:26,400 --> 00:01:28,200
the

34
00:01:28,200 --> 00:01:30,299
save the manuscript rat was spot by

35
00:01:30,299 --> 00:01:34,259
Kaspersky in 2021 it was mainly

36
00:01:34,259 --> 00:01:36,840
delivered by fake crack websites and

37
00:01:36,840 --> 00:01:39,060
malware loaders

38
00:01:39,060 --> 00:01:42,780
lately later in August 2022

39
00:01:42,780 --> 00:01:46,680
bitside Telemetry from their sinkholes

40
00:01:46,680 --> 00:01:51,180
so that this board net has around 50k

41
00:01:51,180 --> 00:01:53,040
Bots

42
00:01:53,040 --> 00:01:55,200
which is now being increased because

43
00:01:55,200 --> 00:01:57,720
this operation is ongoing as we speak is

44
00:01:57,720 --> 00:01:59,220
still relevant

45
00:01:59,220 --> 00:02:02,220
today

46
00:02:03,180 --> 00:02:06,420
we had to look deeper into it because we

47
00:02:06,420 --> 00:02:09,179
noticed the operation was rather active

48
00:02:09,179 --> 00:02:12,360
so that's when so he'll realize this

49
00:02:12,360 --> 00:02:14,700
save the manuscript rat was actually one

50
00:02:14,700 --> 00:02:17,879
of the latest Forks of the infamous

51
00:02:17,879 --> 00:02:20,599
Crossroad

52
00:02:20,940 --> 00:02:24,959
which dates back from 20 in 2008 so go

53
00:02:24,959 --> 00:02:27,060
start is still hunting

54
00:02:27,060 --> 00:02:30,120
it was open source that very same year

55
00:02:30,120 --> 00:02:33,060
and was mainly operated by Chinese

56
00:02:33,060 --> 00:02:35,400
actors

57
00:02:35,400 --> 00:02:36,959
many

58
00:02:36,959 --> 00:02:39,540
protector groups both financially

59
00:02:39,540 --> 00:02:42,680
motivated and based in

60
00:02:42,680 --> 00:02:45,540
Espionage were incorporating these

61
00:02:45,540 --> 00:02:50,099
modified Forks into their Arsenal and

62
00:02:50,099 --> 00:02:55,379
it's still relevant 15 years later

63
00:02:55,379 --> 00:02:57,840
about the original developers of

64
00:02:57,840 --> 00:03:00,120
coastrat the sea roofer security team

65
00:03:00,120 --> 00:03:02,700
also known as Great Wall security team

66
00:03:02,700 --> 00:03:08,239
or CRST it was mostly active between

67
00:03:08,239 --> 00:03:12,599
2006 and 2009 they had around 12 plus

68
00:03:12,599 --> 00:03:16,920
members and they had this romantic ideas

69
00:03:16,920 --> 00:03:19,620
of themselves they pull the plane they

70
00:03:19,620 --> 00:03:21,360
were passionate Security Professionals

71
00:03:21,360 --> 00:03:23,519
they encourage pure technical

72
00:03:23,519 --> 00:03:25,980
discussions and they wanted to keep the

73
00:03:25,980 --> 00:03:26,940
internet

74
00:03:26,940 --> 00:03:28,500
clean place

75
00:03:28,500 --> 00:03:31,140
they actively developed construct

76
00:03:31,140 --> 00:03:35,940
between 2007 and 2009 were multiple

77
00:03:35,940 --> 00:03:38,940
variants were released some of them to

78
00:03:38,940 --> 00:03:42,299
the general public if we put this

79
00:03:42,299 --> 00:03:44,459
information on a timeline it would look

80
00:03:44,459 --> 00:03:47,519
like something like this on January 2008

81
00:03:47,519 --> 00:03:50,819
we had the first stable release March

82
00:03:50,819 --> 00:03:54,239
2008 the first open source release for

83
00:03:54,239 --> 00:03:57,560
the 2.5 percent

84
00:03:57,560 --> 00:04:00,480
this releases have some internal

85
00:04:00,480 --> 00:04:03,780
comments from the developer cool Dyer

86
00:04:03,780 --> 00:04:06,659
and we could read some comments in the

87
00:04:06,659 --> 00:04:08,640
fashion after internal discussion with

88
00:04:08,640 --> 00:04:10,439
the team we have decided to make this

89
00:04:10,439 --> 00:04:13,980
version open source or then later the

90
00:04:13,980 --> 00:04:16,199
last known open source release from

91
00:04:16,199 --> 00:04:17,399
ghostrad

92
00:04:17,399 --> 00:04:19,798
version 3.6 beta

93
00:04:19,798 --> 00:04:22,740
they claim I can't believe it 3.6 will

94
00:04:22,740 --> 00:04:25,880
be open source

95
00:04:27,600 --> 00:04:30,240
only one month later the inevitable

96
00:04:30,240 --> 00:04:31,380
happens

97
00:04:31,380 --> 00:04:34,440
costnet campaigns are fast spotted in

98
00:04:34,440 --> 00:04:35,460
the wild

99
00:04:35,460 --> 00:04:37,800
they were targeting government office in

100
00:04:37,800 --> 00:04:39,900
more than 100 countries and these

101
00:04:39,900 --> 00:04:41,580
attacks were attributed to Chinese

102
00:04:41,580 --> 00:04:44,699
speaking threat actors later that year

103
00:04:44,699 --> 00:04:47,360
December 2008

104
00:04:47,360 --> 00:04:51,419
the last official release in a closed

105
00:04:51,419 --> 00:04:55,560
Source format we have cost 1.0 the Alpha

106
00:04:55,560 --> 00:04:57,800
version

107
00:04:57,840 --> 00:04:59,460
so it goes to becoming a notorious

108
00:04:59,460 --> 00:05:01,560
thread back in the day in forward

109
00:05:01,560 --> 00:05:03,240
monitor release the investigation

110
00:05:03,240 --> 00:05:06,540
reporting corporate in March 2009 and

111
00:05:06,540 --> 00:05:10,020
the team behind closade was attracting

112
00:05:10,020 --> 00:05:12,419
lots of attention

113
00:05:12,419 --> 00:05:15,259
zero for security team activity Reduce

114
00:05:15,259 --> 00:05:18,300
by that time but the development

115
00:05:18,300 --> 00:05:20,699
possibly continued in private Beyond

116
00:05:20,699 --> 00:05:24,479
this person 1.0 Alpha

117
00:05:24,479 --> 00:05:25,080
um

118
00:05:25,080 --> 00:05:28,460
actually there were comments in

119
00:05:28,460 --> 00:05:32,419
subsequent variance from the same

120
00:05:32,419 --> 00:05:36,180
developer mentioning the the chain block

121
00:05:36,180 --> 00:05:38,699
basically and from here we move into

122
00:05:38,699 --> 00:05:43,020
some features from the original ghostrad

123
00:05:43,020 --> 00:05:44,280
thank you

124
00:05:44,280 --> 00:05:47,039
so both the panel and the Bots and go

125
00:05:47,039 --> 00:05:49,380
start were written in C plus plus uh

126
00:05:49,380 --> 00:05:51,419
it's all right so it offers full-fledged

127
00:05:51,419 --> 00:05:53,400
control over the infected host and

128
00:05:53,400 --> 00:05:55,500
persists as a Windows service dll that

129
00:05:55,500 --> 00:05:57,660
runs as part of the Network Services

130
00:05:57,660 --> 00:06:00,840
Group its protocol is a custom TCP

131
00:06:00,840 --> 00:06:02,880
communication protocol and the packet

132
00:06:02,880 --> 00:06:05,220
header starts with a special flag and in

133
00:06:05,220 --> 00:06:06,720
this case it's ghosts in other variants

134
00:06:06,720 --> 00:06:09,780
it's can be another value and this is

135
00:06:09,780 --> 00:06:11,759
followed by the packet size including

136
00:06:11,759 --> 00:06:13,560
the header the size the uncompressed

137
00:06:13,560 --> 00:06:15,360
packet so that the Bots can allocate the

138
00:06:15,360 --> 00:06:17,940
necessary memory to decompress the

139
00:06:17,940 --> 00:06:21,300
following deadlift compress data

140
00:06:21,300 --> 00:06:24,479
so features are implemented in separate

141
00:06:24,479 --> 00:06:27,360
components called managers each manager

142
00:06:27,360 --> 00:06:30,600
would inherit from C manager class and

143
00:06:30,600 --> 00:06:32,639
new instances would get a new socket

144
00:06:32,639 --> 00:06:34,259
that is already connected to the command

145
00:06:34,259 --> 00:06:37,039
control server so to code a manager

146
00:06:37,039 --> 00:06:39,240
basically have to implement an abstract

147
00:06:39,240 --> 00:06:41,520
on receive method Constructor of course

148
00:06:41,520 --> 00:06:44,880
and this on received method will

149
00:06:44,880 --> 00:06:46,380
generally Implement a switch case

150
00:06:46,380 --> 00:06:49,500
statement to handle commands

151
00:06:49,500 --> 00:06:52,139
so the main manager in ghostrad is

152
00:06:52,139 --> 00:06:54,419
called the kernel manager so its mission

153
00:06:54,419 --> 00:06:57,000
is to spawn new managers but also to

154
00:06:57,000 --> 00:06:58,500
handle miscellaneous commands such as

155
00:06:58,500 --> 00:06:59,940
installing the bot download and

156
00:06:59,940 --> 00:07:03,300
executing uh follow-up malware but it

157
00:07:03,300 --> 00:07:05,520
also has other managers that like the

158
00:07:05,520 --> 00:07:07,139
file manager for example the shell

159
00:07:07,139 --> 00:07:09,600
manager screen manager to spy on the

160
00:07:09,600 --> 00:07:11,940
screen video on audio managers to spy on

161
00:07:11,940 --> 00:07:15,300
the camera and microphone keyboard

162
00:07:15,300 --> 00:07:19,919
manager access keylogger and others

163
00:07:19,919 --> 00:07:24,060
so between the latest open source

164
00:07:24,060 --> 00:07:26,160
release and the latest closed Source

165
00:07:26,160 --> 00:07:28,020
release there are a couple major

166
00:07:28,020 --> 00:07:30,660
differences so first of all the panel

167
00:07:30,660 --> 00:07:32,819
user interface was overhauled to use a

168
00:07:32,819 --> 00:07:35,039
more newish

169
00:07:35,039 --> 00:07:38,520
xtp library for the user interface of

170
00:07:38,520 --> 00:07:40,919
the panel some class names were also

171
00:07:40,919 --> 00:07:43,500
changed probably for easier readability

172
00:07:43,500 --> 00:07:45,599
for example the audio manager who tends

173
00:07:45,599 --> 00:07:47,460
to be the voice manager and this is

174
00:07:47,460 --> 00:07:49,259
actually a nice change because if we

175
00:07:49,259 --> 00:07:51,539
look at a variant and we find a class

176
00:07:51,539 --> 00:07:54,360
name that is a camera manager that would

177
00:07:54,360 --> 00:07:56,580
probably indicate that it was based on

178
00:07:56,580 --> 00:08:00,240
this newer Fork of ghost track audio and

179
00:08:00,240 --> 00:08:02,099
video compression also were introduced

180
00:08:02,099 --> 00:08:04,259
and the kernel manager's on receive

181
00:08:04,259 --> 00:08:07,620
method was changed to handle commands

182
00:08:07,620 --> 00:08:09,300
using a callback table instead of a

183
00:08:09,300 --> 00:08:12,139
switch case statement

184
00:08:12,180 --> 00:08:15,479
so these open source releases coming

185
00:08:15,479 --> 00:08:17,880
from the ghost track team uh spawned

186
00:08:17,880 --> 00:08:19,620
lots of variants in the Wilds like

187
00:08:19,620 --> 00:08:22,919
hundreds of them so to investigate this

188
00:08:22,919 --> 00:08:24,419
a little bit and familiarize ourselves

189
00:08:24,419 --> 00:08:26,819
with ghost we collected 22 open source

190
00:08:26,819 --> 00:08:30,060
forks from various sources and our main

191
00:08:30,060 --> 00:08:32,219
goal was to link prominent traits of

192
00:08:32,219 --> 00:08:33,779
these notable variants like sudo

193
00:08:33,779 --> 00:08:35,399
manuscripts for example to these

194
00:08:35,399 --> 00:08:37,679
available Forks that are open source so

195
00:08:37,679 --> 00:08:39,179
this would allow us to gain insight into

196
00:08:39,179 --> 00:08:41,580
the origins of each variant and its

197
00:08:41,580 --> 00:08:43,320
developers motivations

198
00:08:43,320 --> 00:08:46,020
but like any evolutionary story there

199
00:08:46,020 --> 00:08:48,080
has to be missing links so

200
00:08:48,080 --> 00:08:50,100
these open source variants in our

201
00:08:50,100 --> 00:08:51,959
collection that share one or more new

202
00:08:51,959 --> 00:08:54,720
traits with ghost 1.0 Alpha which is

203
00:08:54,720 --> 00:08:57,720
cloud Source by the way they all retain

204
00:08:57,720 --> 00:09:01,380
all trades from 3.6 beta for example the

205
00:09:01,380 --> 00:09:03,540
old class names are still used and the

206
00:09:03,540 --> 00:09:05,399
old kernel manager relying on switch

207
00:09:05,399 --> 00:09:07,680
case statement is also there so this

208
00:09:07,680 --> 00:09:09,120
could indicate that there were some

209
00:09:09,120 --> 00:09:11,820
possible leaks that are unknown to us of

210
00:09:11,820 --> 00:09:13,560
intermediate releases that happen

211
00:09:13,560 --> 00:09:16,740
between 3.6 and 1.0 which we call

212
00:09:16,740 --> 00:09:19,459
ghostax

213
00:09:19,560 --> 00:09:23,399
so to get more insight into this and to

214
00:09:23,399 --> 00:09:25,140
be more on the ground so we conducted

215
00:09:25,140 --> 00:09:27,300
analysis of some closed Source variants

216
00:09:27,300 --> 00:09:30,000
that are used by distinct uh terractor

217
00:09:30,000 --> 00:09:31,980
groups and we try to establish and

218
00:09:31,980 --> 00:09:33,420
understand connections with other

219
00:09:33,420 --> 00:09:35,399
variants in our collection

220
00:09:35,399 --> 00:09:37,920
so the first one was Ghost times which

221
00:09:37,920 --> 00:09:40,380
was first documented by Japan cert in

222
00:09:40,380 --> 00:09:43,019
2020 it was seen in attacks by blacktech

223
00:09:43,019 --> 00:09:45,839
apt they Stripped Away most features of

224
00:09:45,839 --> 00:09:48,420
ghost 3.6 beta only left a few managers

225
00:09:48,420 --> 00:09:50,279
but they improved the communication

226
00:09:50,279 --> 00:09:52,860
protocol added water notification

227
00:09:52,860 --> 00:09:55,560
authentification rc4 encryption they

228
00:09:55,560 --> 00:09:58,040
also implemented two new classes

229
00:09:58,040 --> 00:10:00,779
a manager called the ultra Port map

230
00:10:00,779 --> 00:10:02,279
manager which does port forwarding

231
00:10:02,279 --> 00:10:04,440
basically turning the bot into a gateway

232
00:10:04,440 --> 00:10:07,019
to connect to internal service and also

233
00:10:07,019 --> 00:10:09,720
a port map manager which is a proxy

234
00:10:09,720 --> 00:10:11,399
feature

235
00:10:11,399 --> 00:10:13,200
so these broad map managers are

236
00:10:13,200 --> 00:10:15,120
interesting because they have a similar

237
00:10:15,120 --> 00:10:16,980
but not the same implementation of an

238
00:10:16,980 --> 00:10:19,019
open source tool called Z export map

239
00:10:19,019 --> 00:10:21,720
which is common among Chinese speaking

240
00:10:21,720 --> 00:10:24,540
thread actors and apt groups so in this

241
00:10:24,540 --> 00:10:27,000
case uh the transform one mode of this

242
00:10:27,000 --> 00:10:28,500
tool which implements the port

243
00:10:28,500 --> 00:10:30,300
forwarding maps to the ultraport map

244
00:10:30,300 --> 00:10:32,580
manager in ghost times and the transfer

245
00:10:32,580 --> 00:10:34,980
2 and transfer 3 mode which work in

246
00:10:34,980 --> 00:10:36,200
tandem

247
00:10:36,200 --> 00:10:38,580
they they correspond to the port map

248
00:10:38,580 --> 00:10:40,620
manager proxy

249
00:10:40,620 --> 00:10:42,899
so this same name is seen in other

250
00:10:42,899 --> 00:10:45,600
variants of ghost for example in BBS rat

251
00:10:45,600 --> 00:10:47,820
that is operated by the Roman tiger

252
00:10:47,820 --> 00:10:50,820
group and also in sudo manuscript these

253
00:10:50,820 --> 00:10:52,620
are all similar but distinct

254
00:10:52,620 --> 00:10:54,959
implementations

255
00:10:54,959 --> 00:10:57,300
so the second group we saw was gambling

256
00:10:57,300 --> 00:10:59,700
puppet which is a sophisticated apt

257
00:10:59,700 --> 00:11:02,700
uncovered by Trend Micro in 2022 they're

258
00:11:02,700 --> 00:11:04,380
targeting online gambling businesses

259
00:11:04,380 --> 00:11:08,180
operating plugx ghostrad and other uh

260
00:11:08,180 --> 00:11:11,640
malware they use multiple modified Forks

261
00:11:11,640 --> 00:11:13,079
of course thread that all seem to

262
00:11:13,079 --> 00:11:15,360
originate from that ghost x variant we

263
00:11:15,360 --> 00:11:16,320
talked about

264
00:11:16,320 --> 00:11:20,040
so we analyzed these samples and we saw

265
00:11:20,040 --> 00:11:22,140
that they actually share some traits

266
00:11:22,140 --> 00:11:24,360
with forks in our collection

267
00:11:24,360 --> 00:11:26,399
so the first trade was a unique chat

268
00:11:26,399 --> 00:11:28,920
manager called ctex chat which we found

269
00:11:28,920 --> 00:11:30,660
in only in one variant in our collection

270
00:11:30,660 --> 00:11:33,300
which allows us like the the operator to

271
00:11:33,300 --> 00:11:35,399
chat with the victim

272
00:11:35,399 --> 00:11:39,480
second one is a couple of functions that

273
00:11:39,480 --> 00:11:41,160
allow to play with the victim a little

274
00:11:41,160 --> 00:11:43,740
bit like open the CD tray swap Mouse

275
00:11:43,740 --> 00:11:46,980
buttons and this was found in a variant

276
00:11:46,980 --> 00:11:49,680
called Terminator Platinum

277
00:11:49,680 --> 00:11:52,920
in addition this malware hasn't had an

278
00:11:52,920 --> 00:11:55,320
improved version of the ghost MBR killer

279
00:11:55,320 --> 00:11:58,079
which is shared by two variants

280
00:11:58,079 --> 00:11:59,760
Terminator Platinum mentioned in the

281
00:11:59,760 --> 00:12:01,740
previous slide another variant called

282
00:12:01,740 --> 00:12:04,320
fell VIP 3.0 and it's actually

283
00:12:04,320 --> 00:12:06,959
interesting because the ghost 1.0 Alpha

284
00:12:06,959 --> 00:12:08,880
version does not have

285
00:12:08,880 --> 00:12:11,640
um an MBR killer

286
00:12:11,640 --> 00:12:13,920
so the presence of code overlap with

287
00:12:13,920 --> 00:12:17,160
multiple variants in this samp in this

288
00:12:17,160 --> 00:12:19,800
uh in these samples used by the APT

289
00:12:19,800 --> 00:12:23,399
indicates a complex origin we saw uh or

290
00:12:23,399 --> 00:12:25,200
we saw code originated from multiple

291
00:12:25,200 --> 00:12:27,180
variants and it's really difficult to

292
00:12:27,180 --> 00:12:29,880
trace it back to a single source so we

293
00:12:29,880 --> 00:12:31,200
think they probably cherry-picked

294
00:12:31,200 --> 00:12:33,660
features from various projects as it's

295
00:12:33,660 --> 00:12:35,399
super easy to do that just take the

296
00:12:35,399 --> 00:12:39,000
manager class and you're good to go

297
00:12:39,000 --> 00:12:41,760
and I'm going to hand it over to Jorge

298
00:12:41,760 --> 00:12:44,279
so now that we have a proper context on

299
00:12:44,279 --> 00:12:46,200
where this

300
00:12:46,200 --> 00:12:48,660
latest variant set of manuscript is a

301
00:12:48,660 --> 00:12:49,860
steaming from

302
00:12:49,860 --> 00:12:53,339
we have the history of goshrad already

303
00:12:53,339 --> 00:12:56,160
present now let's delve into these

304
00:12:56,160 --> 00:12:59,639
latest form as we mentioned before it

305
00:12:59,639 --> 00:13:04,200
was first spot by Kaspersky July 2021

306
00:13:04,200 --> 00:13:06,839
they reported some similarities with the

307
00:13:06,839 --> 00:13:09,360
manuscript malware operated by Lazarus

308
00:13:09,360 --> 00:13:12,240
but since the malware wasn't really the

309
00:13:12,240 --> 00:13:15,300
same and there were uncertain whether

310
00:13:15,300 --> 00:13:16,920
the Developers

311
00:13:16,920 --> 00:13:18,899
behind both projects were the same or

312
00:13:18,899 --> 00:13:21,839
not they coined the moniker set of

313
00:13:21,839 --> 00:13:22,860
manuscript

314
00:13:22,860 --> 00:13:24,779
Worth to mention here we are not

315
00:13:24,779 --> 00:13:27,540
attributing this one to Lazarus in any

316
00:13:27,540 --> 00:13:28,380
way

317
00:13:28,380 --> 00:13:31,680
it was brought to our attention in 2022

318
00:13:31,680 --> 00:13:34,620
and later that year in October we

319
00:13:34,620 --> 00:13:37,560
started tracking it and very soon after

320
00:13:37,560 --> 00:13:40,500
we put our Tools in place we realized

321
00:13:40,500 --> 00:13:41,459
this

322
00:13:41,459 --> 00:13:45,180
thread was rather active with motivate

323
00:13:45,180 --> 00:13:48,060
which motivated us to have a proper and

324
00:13:48,060 --> 00:13:51,240
deeper look to improve our tracking

325
00:13:51,240 --> 00:13:54,240
collection and

326
00:13:54,240 --> 00:13:58,139
the data we were collecting from it and

327
00:13:58,139 --> 00:14:01,260
that's where when to heal realized the

328
00:14:01,260 --> 00:14:03,120
the gospel connection

329
00:14:03,120 --> 00:14:04,860
leading to This research we are

330
00:14:04,860 --> 00:14:06,839
presenting today

331
00:14:06,839 --> 00:14:10,620
again this is an ongoing situation the

332
00:14:10,620 --> 00:14:13,680
group is still active as we speak they

333
00:14:13,680 --> 00:14:15,660
are trying to grow the botnet and for

334
00:14:15,660 --> 00:14:18,540
doing so they are mainly using two

335
00:14:18,540 --> 00:14:21,000
delivery methods the first one of them

336
00:14:21,000 --> 00:14:24,600
is fake cracked rubber where you will

337
00:14:24,600 --> 00:14:27,360
turn to your search engine of choice try

338
00:14:27,360 --> 00:14:30,600
to look for some activator or some crack

339
00:14:30,600 --> 00:14:34,260
tool to save a few bucks but in Turn You

340
00:14:34,260 --> 00:14:36,899
Are running malware as a volunteer on

341
00:14:36,899 --> 00:14:38,100
your own

342
00:14:38,100 --> 00:14:40,440
and the other one is install Services

343
00:14:40,440 --> 00:14:43,440
that's why we claim here they are

344
00:14:43,440 --> 00:14:45,660
following us pray and pray approach for

345
00:14:45,660 --> 00:14:47,820
distribution

346
00:14:47,820 --> 00:14:50,399
we haven't observed any targeted

347
00:14:50,399 --> 00:14:53,940
campaigns towards any business or sector

348
00:14:53,940 --> 00:14:58,800
or country or region for that matter

349
00:14:58,800 --> 00:15:00,420
since

350
00:15:00,420 --> 00:15:01,980
they are using this spray and pray

351
00:15:01,980 --> 00:15:04,500
approach the initably in the back end

352
00:15:04,500 --> 00:15:07,320
and if I were certain bodies coming from

353
00:15:07,320 --> 00:15:09,600
and that's why they have this campaign

354
00:15:09,600 --> 00:15:12,300
identifier which is composed of four

355
00:15:12,300 --> 00:15:15,959
numbers like 3003 and they are bright in

356
00:15:15,959 --> 00:15:20,100
this value in the registry and the SEO

357
00:15:20,100 --> 00:15:22,560
ID key

358
00:15:22,560 --> 00:15:26,220
so this will allow them ideally in the

359
00:15:26,220 --> 00:15:29,339
back end of track infections

360
00:15:29,339 --> 00:15:34,380
moving on into the install Services when

361
00:15:34,380 --> 00:15:36,660
we started tracking This Thread they

362
00:15:36,660 --> 00:15:40,440
were only using one install service the

363
00:15:40,440 --> 00:15:43,500
one which the actors from private loader

364
00:15:43,500 --> 00:15:46,380
offer we are also certain they are not

365
00:15:46,380 --> 00:15:50,160
targeting any specific region

366
00:15:50,160 --> 00:15:53,399
when it comes to delivery because they

367
00:15:53,399 --> 00:15:54,680
are using

368
00:15:54,680 --> 00:15:58,279
the install service

369
00:15:58,279 --> 00:16:00,899
of the business which allows them to

370
00:16:00,899 --> 00:16:02,699
spread the binaries to any country in

371
00:16:02,699 --> 00:16:04,620
the world for example some of these

372
00:16:04,620 --> 00:16:07,279
install services offer installs to

373
00:16:07,279 --> 00:16:10,680
worldwide locations or

374
00:16:10,680 --> 00:16:13,800
only Europe or only the USA which are

375
00:16:13,800 --> 00:16:16,079
more expensive than the worldwide and

376
00:16:16,079 --> 00:16:21,240
this one issues in the worldwide option

377
00:16:21,240 --> 00:16:25,139
we think they are also learning as they

378
00:16:25,139 --> 00:16:27,420
continue their operation because when we

379
00:16:27,420 --> 00:16:29,760
started tracking it they were only using

380
00:16:29,760 --> 00:16:33,720
private loader for delivery

381
00:16:33,720 --> 00:16:36,000
my guess here is that at some point they

382
00:16:36,000 --> 00:16:38,639
realize that using the same install

383
00:16:38,639 --> 00:16:41,279
service again again and again

384
00:16:41,279 --> 00:16:44,279
will lead their payloads to be executed

385
00:16:44,279 --> 00:16:46,079
on the very very same computers again

386
00:16:46,079 --> 00:16:47,220
again and again

387
00:16:47,220 --> 00:16:51,620
that's why in late 2022 they started

388
00:16:51,620 --> 00:16:54,060
diversifying the install service they

389
00:16:54,060 --> 00:16:54,839
use

390
00:16:54,839 --> 00:16:57,240
they start a good one and nowadays they

391
00:16:57,240 --> 00:17:00,300
are using at least four as far as we can

392
00:17:00,300 --> 00:17:02,880
see and it's interesting because it

393
00:17:02,880 --> 00:17:05,520
looks like they tried another install

394
00:17:05,520 --> 00:17:08,459
service with another actor offers

395
00:17:08,459 --> 00:17:11,280
through an amade botnet also they have a

396
00:17:11,280 --> 00:17:14,160
test at another service which some other

397
00:17:14,160 --> 00:17:15,660
actor offers through a smoke loader

398
00:17:15,660 --> 00:17:17,040
botnet

399
00:17:17,040 --> 00:17:19,260
perhaps it didn't pay off very well they

400
00:17:19,260 --> 00:17:21,179
went back to their religions private

401
00:17:21,179 --> 00:17:25,140
loader but then they they fund the key

402
00:17:25,140 --> 00:17:28,319
to delivery and they started using a

403
00:17:28,319 --> 00:17:30,660
different service every two days so

404
00:17:30,660 --> 00:17:32,220
every two days they will switch from

405
00:17:32,220 --> 00:17:34,200
amade to private loader to a smoke

406
00:17:34,200 --> 00:17:37,020
loader to a Google loader to start again

407
00:17:37,020 --> 00:17:40,500
the the very next week hopefully getting

408
00:17:40,500 --> 00:17:43,980
a wider read and grow in their podnet as

409
00:17:43,980 --> 00:17:46,260
much as they can

410
00:17:46,260 --> 00:17:48,299
foreign

411
00:17:48,299 --> 00:17:50,039
so the infection chain of

412
00:17:50,039 --> 00:17:52,020
pseudomanuscript starts with the

413
00:17:52,020 --> 00:17:54,480
download obviously of the downloader

414
00:17:54,480 --> 00:17:57,179
component either from the soft software

415
00:17:57,179 --> 00:17:59,580
delivery Network for fake cracks or from

416
00:17:59,580 --> 00:18:01,500
a malware loader as we saw so the

417
00:18:01,500 --> 00:18:03,419
downloader component first will restart

418
00:18:03,419 --> 00:18:05,580
itself elevate it and then we download

419
00:18:05,580 --> 00:18:08,220
two files so the first file is a PNG

420
00:18:08,220 --> 00:18:11,520
image with a show called loader dll that

421
00:18:11,520 --> 00:18:14,220
is encrypted in its overlay data so this

422
00:18:14,220 --> 00:18:17,039
dll name db.dll will be dropped to the

423
00:18:17,039 --> 00:18:19,260
user's temporary directory the second

424
00:18:19,260 --> 00:18:22,320
file is a binary file with an HTML

425
00:18:22,320 --> 00:18:25,260
extension with its name being set to the

426
00:18:25,260 --> 00:18:27,900
campaign ID so this is saved in the

427
00:18:27,900 --> 00:18:31,260
temporary directory as well as as a

428
00:18:31,260 --> 00:18:34,020
db.dat file so the downloader component

429
00:18:34,020 --> 00:18:39,179
would run the Run dll 32 executable with

430
00:18:39,179 --> 00:18:41,580
the db.dlo and revoke a special export

431
00:18:41,580 --> 00:18:45,360
called open and the db.dll would read

432
00:18:45,360 --> 00:18:47,460
the encrypted shell codes from the

433
00:18:47,460 --> 00:18:49,740
dp.dhp file

434
00:18:49,740 --> 00:18:53,760
so this file stores 32-bit and 64-bit

435
00:18:53,760 --> 00:18:57,059
shell codes each preceded with its

436
00:18:57,059 --> 00:18:59,419
length with the

437
00:18:59,419 --> 00:19:02,340
encoded by adding a simple value which

438
00:19:02,340 --> 00:19:04,440
was always the same since the Inception

439
00:19:04,440 --> 00:19:06,539
of sudo manuscript and at this stage

440
00:19:06,539 --> 00:19:10,020
only the 32-bit shock code is used

441
00:19:10,020 --> 00:19:12,120
so this shortcode is decrypted in two

442
00:19:12,120 --> 00:19:15,600
rounds first round involving X or

443
00:19:15,600 --> 00:19:18,059
um with the key depending on the index

444
00:19:18,059 --> 00:19:20,580
of uh of the bytes in the in the file

445
00:19:20,580 --> 00:19:22,740
and then the second round involver

446
00:19:22,740 --> 00:19:25,080
involves the reverse xor algorithm where

447
00:19:25,080 --> 00:19:27,660
the first byte is the last bytes key and

448
00:19:27,660 --> 00:19:29,940
each bytes is then its previous key

449
00:19:29,940 --> 00:19:32,039
until reaching the the beginning of the

450
00:19:32,039 --> 00:19:34,679
file so this Shell Code itself being

451
00:19:34,679 --> 00:19:37,799
decrypted will decrypt and load and

452
00:19:37,799 --> 00:19:39,419
invoke the core module of sudo

453
00:19:39,419 --> 00:19:41,820
manuscript which is embedded in the

454
00:19:41,820 --> 00:19:43,919
Shell Code and encrypted with a one byte

455
00:19:43,919 --> 00:19:46,740
X or key and is compressed with the LZ

456
00:19:46,740 --> 00:19:49,940
nt1 algorithm

457
00:19:49,980 --> 00:19:52,620
so at this stage the core module is

458
00:19:52,620 --> 00:19:55,140
running inside the Run dll 32 instance

459
00:19:55,140 --> 00:19:58,740
in its first execution and this time it

460
00:19:58,740 --> 00:20:00,840
would process the appropriate Shell Code

461
00:20:00,840 --> 00:20:03,780
uh for the system systems architecture

462
00:20:03,780 --> 00:20:06,419
uh in the registry so it will read the

463
00:20:06,419 --> 00:20:09,240
db.d DHE file encrypt the proper Shell

464
00:20:09,240 --> 00:20:11,100
Code and then persist it and then it

465
00:20:11,100 --> 00:20:13,320
would inject a remote thread into the

466
00:20:13,320 --> 00:20:16,260
currently running SVC host instance for

467
00:20:16,260 --> 00:20:18,140
the net Services Group

468
00:20:18,140 --> 00:20:21,780
and this instance would read that

469
00:20:21,780 --> 00:20:24,299
persisted showcode inject it via process

470
00:20:24,299 --> 00:20:27,059
hollowing into a new SVC host SVC host

471
00:20:27,059 --> 00:20:29,039
instance which will be the main instance

472
00:20:29,039 --> 00:20:31,320
of sudo manuscript and this instance is

473
00:20:31,320 --> 00:20:33,299
the one responsible for talking with the

474
00:20:33,299 --> 00:20:35,460
command and control server so these two

475
00:20:35,460 --> 00:20:37,260
instances would actually monitor each

476
00:20:37,260 --> 00:20:39,419
other so if one of them is terminated

477
00:20:39,419 --> 00:20:43,200
the other would start would start it

478
00:20:43,200 --> 00:20:46,200
so persistence here is performed only

479
00:20:46,200 --> 00:20:49,320
during system shutdown by registering a

480
00:20:49,320 --> 00:20:51,720
callback using this control you can set

481
00:20:51,720 --> 00:20:55,320
console control Handler API so this

482
00:20:55,320 --> 00:20:58,760
function would be invoked

483
00:20:58,760 --> 00:21:01,200
when a lot of events happen including

484
00:21:01,200 --> 00:21:03,240
the system shutdown so this

485
00:21:03,240 --> 00:21:05,220
automatically means that an unexpected

486
00:21:05,220 --> 00:21:06,840
shutdown for example due to a blue

487
00:21:06,840 --> 00:21:08,820
screen of death means that sudo

488
00:21:08,820 --> 00:21:10,320
manuscript will not persist on the

489
00:21:10,320 --> 00:21:11,100
system

490
00:21:11,100 --> 00:21:14,400
so this persistence is done using a

491
00:21:14,400 --> 00:21:16,500
service DLo that is embedded inside the

492
00:21:16,500 --> 00:21:19,320
core module this dll is copied to the

493
00:21:19,320 --> 00:21:22,980
system32 directory and then a new

494
00:21:22,980 --> 00:21:25,020
service group is registered in the

495
00:21:25,020 --> 00:21:26,820
register in the registry that is called

496
00:21:26,820 --> 00:21:29,460
uh app service so this service would

497
00:21:29,460 --> 00:21:32,520
start after the system reboot it will

498
00:21:32,520 --> 00:21:34,200
read the persisted shock code from the

499
00:21:34,200 --> 00:21:38,159
registry and then inject it into SVC

500
00:21:38,159 --> 00:21:39,620
host.xz

501
00:21:39,620 --> 00:21:42,480
the net Services Group instance and then

502
00:21:42,480 --> 00:21:44,100
the infection would go on from there

503
00:21:44,100 --> 00:21:47,600
like we saw on the previous slide

504
00:21:47,640 --> 00:21:50,100
so the malware configuration is stored

505
00:21:50,100 --> 00:21:51,600
in the data section of the core

506
00:21:51,600 --> 00:21:53,400
component there are two configuration

507
00:21:53,400 --> 00:21:56,159
buffers a primary one which is always

508
00:21:56,159 --> 00:21:59,340
used and then a secondary one that is

509
00:21:59,340 --> 00:22:01,260
only used when a special command is

510
00:22:01,260 --> 00:22:02,460
received from the command and control

511
00:22:02,460 --> 00:22:04,980
server to switch so when this command is

512
00:22:04,980 --> 00:22:07,320
received so the manuscript would create

513
00:22:07,320 --> 00:22:11,100
a new file extension Association in the

514
00:22:11,100 --> 00:22:13,340
registry to

515
00:22:13,340 --> 00:22:15,960
switch to this to this other

516
00:22:15,960 --> 00:22:17,940
configuration so when it runs the next

517
00:22:17,940 --> 00:22:19,980
time it will check if this Association

518
00:22:19,980 --> 00:22:22,020
exists if it does it will use the

519
00:22:22,020 --> 00:22:24,539
secondary configuration

520
00:22:24,539 --> 00:22:27,780
so the configuration format starts with

521
00:22:27,780 --> 00:22:30,380
the main and fallback protocols to use

522
00:22:30,380 --> 00:22:33,900
the value one is for TCP and value 2 is

523
00:22:33,900 --> 00:22:37,080
for UDP and in all cases we've seen that

524
00:22:37,080 --> 00:22:39,659
UDP is used as the main protocol so

525
00:22:39,659 --> 00:22:41,460
these two fields are followed by the

526
00:22:41,460 --> 00:22:44,520
ports to use so Port 53 will be used for

527
00:22:44,520 --> 00:22:47,520
the main protocol which is UDP and Port

528
00:22:47,520 --> 00:22:50,640
443 for the fallback protocol TCP

529
00:22:50,640 --> 00:22:53,220
so the next field is the primary command

530
00:22:53,220 --> 00:22:54,799
and control server

531
00:22:54,799 --> 00:22:58,260
followed by the DGA parameters in case

532
00:22:58,260 --> 00:23:01,799
this server is unreached so the fallback

533
00:23:01,799 --> 00:23:03,720
domain generation algorithm see string

534
00:23:03,720 --> 00:23:06,720
follows it's equal to API key and then

535
00:23:06,720 --> 00:23:09,480
domain generation algorithms top level

536
00:23:09,480 --> 00:23:12,120
domain which is.com in this case and the

537
00:23:12,120 --> 00:23:14,820
last field is an integer that determines

538
00:23:14,820 --> 00:23:16,980
the maximum numbers of domains to

539
00:23:16,980 --> 00:23:19,080
generate before trying again and

540
00:23:19,080 --> 00:23:22,020
communicating with the main C2

541
00:23:22,020 --> 00:23:26,340
so the dja works by taking a domain seed

542
00:23:26,340 --> 00:23:28,559
and the string seed so the main seed at

543
00:23:28,559 --> 00:23:30,419
first is the main C2 it will be

544
00:23:30,419 --> 00:23:32,880
concatenated with the API key using a

545
00:23:32,880 --> 00:23:36,120
comma md5 hashed and then 10 characters

546
00:23:36,120 --> 00:23:38,760
in the middle would be taken uh

547
00:23:38,760 --> 00:23:40,559
converted to uppercase and then they

548
00:23:40,559 --> 00:23:42,600
would undergo a small transformation

549
00:23:42,600 --> 00:23:46,440
that would yield a lowercase string that

550
00:23:46,440 --> 00:23:48,419
will be concatenated with the top level

551
00:23:48,419 --> 00:23:50,880
domain in this case.com that would give

552
00:23:50,880 --> 00:23:52,460
the

553
00:23:52,460 --> 00:23:56,820
domain that is to be conducted so if

554
00:23:56,820 --> 00:24:00,120
communication fails with this domain the

555
00:24:00,120 --> 00:24:03,299
the algorithm would use use it as a seed

556
00:24:03,299 --> 00:24:05,760
for the next domain and so on until that

557
00:24:05,760 --> 00:24:07,200
maximum number we talked about is

558
00:24:07,200 --> 00:24:09,620
reached

559
00:24:10,380 --> 00:24:12,780
so the communication protocol relies on

560
00:24:12,780 --> 00:24:15,360
the open source HP socket C plus plus

561
00:24:15,360 --> 00:24:17,700
framework developed by Chinese

562
00:24:17,700 --> 00:24:20,820
developers it is a high performance TCP

563
00:24:20,820 --> 00:24:22,799
UDP HTTP communication framework that's

564
00:24:22,799 --> 00:24:25,760
offering clients and server capabilities

565
00:24:25,760 --> 00:24:29,820
the framework uses the kcp protocol when

566
00:24:29,820 --> 00:24:33,240
communicating with UDP uh when uh

567
00:24:33,240 --> 00:24:35,100
automatic repeat request error control

568
00:24:35,100 --> 00:24:38,460
is used so kcp is a custom protocol also

569
00:24:38,460 --> 00:24:41,039
developed by a Chinese developer that is

570
00:24:41,039 --> 00:24:43,440
described as being 30 percent to 40

571
00:24:43,440 --> 00:24:46,320
percent faster than TCP so so the

572
00:24:46,320 --> 00:24:48,780
manuscript as we saw uses UDP as its

573
00:24:48,780 --> 00:24:51,360
main communication protocol uh which in

574
00:24:51,360 --> 00:24:55,260
this case kcp and TCP as a fallback so

575
00:24:55,260 --> 00:24:58,799
this use of kcp in sudo manuscript can

576
00:24:58,799 --> 00:25:00,659
be attributed to the capabilities of the

577
00:25:00,659 --> 00:25:03,179
library itself rather than being a

578
00:25:03,179 --> 00:25:05,220
deliberate design Choice by the

579
00:25:05,220 --> 00:25:07,700
Developers

580
00:25:07,980 --> 00:25:10,440
so the packet header here starts with

581
00:25:10,440 --> 00:25:12,299
the header magic which this time is only

582
00:25:12,299 --> 00:25:15,900
one byte which is always ox43 it's

583
00:25:15,900 --> 00:25:17,640
followed by a transformation type that

584
00:25:17,640 --> 00:25:20,640
dictates the format of the packet data

585
00:25:20,640 --> 00:25:23,460
so this transformation type can have

586
00:25:23,460 --> 00:25:26,159
multiple values the data can be in plain

587
00:25:26,159 --> 00:25:29,400
text sword sadly compressed

588
00:25:29,400 --> 00:25:32,039
Etc but the most popular one we saw we

589
00:25:32,039 --> 00:25:34,020
see in multiple commands is the zlip

590
00:25:34,020 --> 00:25:36,360
plus xor algorithm and if you remember

591
00:25:36,360 --> 00:25:39,900
ghostrad uses zlib for compression so

592
00:25:39,900 --> 00:25:42,840
the other two fields are kind of similar

593
00:25:42,840 --> 00:25:44,520
to what we saw in Gold Strat the packet

594
00:25:44,520 --> 00:25:46,380
size including the header size and then

595
00:25:46,380 --> 00:25:50,840
the size of the untransformed packet

596
00:25:50,880 --> 00:25:53,940
so pseudom manuscript was directly based

597
00:25:53,940 --> 00:25:56,760
on ghostrad or some variants that it's

598
00:25:56,760 --> 00:25:59,220
directly linked to because it's misses

599
00:25:59,220 --> 00:26:01,799
changes uh that we see in later variants

600
00:26:01,799 --> 00:26:04,260
uh it also doesn't include any audio or

601
00:26:04,260 --> 00:26:07,080
video compression and it only shares a

602
00:26:07,080 --> 00:26:09,240
few attributes with open source variants

603
00:26:09,240 --> 00:26:10,980
that are in our collection for example

604
00:26:10,980 --> 00:26:14,220
it has a similar but uh more advanced

605
00:26:14,220 --> 00:26:16,919
service manager to a variant uh called

606
00:26:16,919 --> 00:26:19,880
Bobo remote control

607
00:26:20,039 --> 00:26:22,620
so sudo manuscripts developers improved

608
00:26:22,620 --> 00:26:25,440
on existing Managers from ghostrad but

609
00:26:25,440 --> 00:26:28,860
also added new ones for example in the

610
00:26:28,860 --> 00:26:30,720
second version I think they added the

611
00:26:30,720 --> 00:26:35,520
hidden VNC manager which was a fork of

612
00:26:35,520 --> 00:26:37,679
tiny nuke hidden VNC which they broke

613
00:26:37,679 --> 00:26:39,659
down into multiple commands and then

614
00:26:39,659 --> 00:26:41,760
they also added bi-directional clipboard

615
00:26:41,760 --> 00:26:44,159
sharing between the operators machine

616
00:26:44,159 --> 00:26:46,980
and the infected host there's also the

617
00:26:46,980 --> 00:26:48,720
board map manager which implements the

618
00:26:48,720 --> 00:26:52,440
TCP proxy a netstat manager allowing

619
00:26:52,440 --> 00:26:54,960
exfiltration and to close UDP and TCP

620
00:26:54,960 --> 00:26:57,539
connections services manager we talked

621
00:26:57,539 --> 00:27:00,960
about and then uh a registry editor

622
00:27:00,960 --> 00:27:02,820
basically

623
00:27:02,820 --> 00:27:04,919
so so the manuscript also supports

624
00:27:04,919 --> 00:27:07,440
plugins which are always requested after

625
00:27:07,440 --> 00:27:10,320
the first check-in so the C2 will answer

626
00:27:10,320 --> 00:27:12,779
with a list of entries from which

627
00:27:12,779 --> 00:27:15,000
interesting fields are the plugin hash

628
00:27:15,000 --> 00:27:18,120
in md5 the start type either if it wants

629
00:27:18,120 --> 00:27:21,059
to start a Plugin or uninstall it and

630
00:27:21,059 --> 00:27:23,640
the plugin type if it's an executable or

631
00:27:23,640 --> 00:27:26,700
dll but we've only seen dll dlls up to

632
00:27:26,700 --> 00:27:28,919
this point so the bot will follow up

633
00:27:28,919 --> 00:27:30,900
with requests to only receive new

634
00:27:30,900 --> 00:27:33,720
plugins that it doesn't have stored into

635
00:27:33,720 --> 00:27:36,260
registry

636
00:27:36,539 --> 00:27:38,880
so the first one is a clipper plugin

637
00:27:38,880 --> 00:27:41,520
which would monitor clipboard data for

638
00:27:41,520 --> 00:27:43,500
wallet addresses that are copied by the

639
00:27:43,500 --> 00:27:46,440
victim patch them on the fly to operator

640
00:27:46,440 --> 00:27:49,380
controlled wallets and these addresses

641
00:27:49,380 --> 00:27:51,120
these attacker control addresses are

642
00:27:51,120 --> 00:27:53,220
hard-coded and are the same across all

643
00:27:53,220 --> 00:27:55,620
campaigns giving credit to the idea that

644
00:27:55,620 --> 00:27:57,840
there's probably one group behind this

645
00:27:57,840 --> 00:27:59,700
thread

646
00:27:59,700 --> 00:28:01,620
so we've taken a look at this wallet

647
00:28:01,620 --> 00:28:04,860
addresses and tallied up a sum that is

648
00:28:04,860 --> 00:28:08,820
equal to 187 dollars currently in these

649
00:28:08,820 --> 00:28:11,460
wallets and pretty much of it is still

650
00:28:11,460 --> 00:28:13,679
there actually

651
00:28:13,679 --> 00:28:16,320
so the next plugin is a key logger

652
00:28:16,320 --> 00:28:18,299
plugin that will complement the existing

653
00:28:18,299 --> 00:28:20,520
keylogger implemented in the keyboard

654
00:28:20,520 --> 00:28:23,400
manager so unlike the keyboard manager

655
00:28:23,400 --> 00:28:25,020
which needs a special command to be

656
00:28:25,020 --> 00:28:27,059
activated this keylogger would

657
00:28:27,059 --> 00:28:28,620
immediately start monitoring the

658
00:28:28,620 --> 00:28:31,500
foreground window for substrings that

659
00:28:31,500 --> 00:28:34,500
are related to cryptocurrency and these

660
00:28:34,500 --> 00:28:36,659
logs are will be forwarded in real time

661
00:28:36,659 --> 00:28:38,400
they won't be written to any files they

662
00:28:38,400 --> 00:28:40,860
will be forwarded to real time in real

663
00:28:40,860 --> 00:28:43,500
time to the C2 using a callback that is

664
00:28:43,500 --> 00:28:46,020
provided by the core module at plugin

665
00:28:46,020 --> 00:28:48,679
initialization

666
00:28:49,080 --> 00:28:52,020
so the other plugin we see is a man in

667
00:28:52,020 --> 00:28:54,600
the middle plugin called set proxy so

668
00:28:54,600 --> 00:28:56,520
what it does it it's it will allow

669
00:28:56,520 --> 00:28:58,440
interception of secure browser TLS

670
00:28:58,440 --> 00:29:00,419
traffic for specific websites so what it

671
00:29:00,419 --> 00:29:02,640
will do is First add a root certificate

672
00:29:02,640 --> 00:29:05,520
to the trusted Authority search store so

673
00:29:05,520 --> 00:29:07,679
this certificate is long-lived and will

674
00:29:07,679 --> 00:29:10,260
stay valid until 2032.

675
00:29:10,260 --> 00:29:13,080
uh what it then does is it will add a

676
00:29:13,080 --> 00:29:15,299
proxy Auto configuration script to the

677
00:29:15,299 --> 00:29:16,860
global proxy settings of the system

678
00:29:16,860 --> 00:29:19,740
which are inherited by all browsers and

679
00:29:19,740 --> 00:29:21,659
this will point to a URL that will

680
00:29:21,659 --> 00:29:23,760
download a file called Javascript file

681
00:29:23,760 --> 00:29:26,880
called win.pac so when the user

682
00:29:26,880 --> 00:29:29,940
navigates to a website uh the browser

683
00:29:29,940 --> 00:29:31,980
will download this file cache it and

684
00:29:31,980 --> 00:29:35,460
then match our request hosts on on this

685
00:29:35,460 --> 00:29:38,700
using this this script so here it will

686
00:29:38,700 --> 00:29:41,220
match cryptocurrency websites and then

687
00:29:41,220 --> 00:29:43,740
if there is a match it will forward the

688
00:29:43,740 --> 00:29:47,820
traffic to the the proxy in red

689
00:29:47,820 --> 00:29:49,860
so what this proxy does it will provide

690
00:29:49,860 --> 00:29:51,960
a fixed certificate that is generated by

691
00:29:51,960 --> 00:29:54,539
the malicious certification Authority

692
00:29:54,539 --> 00:29:57,960
and then this malicious proxy can be

693
00:29:57,960 --> 00:29:59,880
used by the actors to intercept TLS

694
00:29:59,880 --> 00:30:03,240
traffic and get access to credit user

695
00:30:03,240 --> 00:30:05,840
credentials

696
00:30:06,059 --> 00:30:09,360
so the next plugin is still plugin that

697
00:30:09,360 --> 00:30:11,940
is focused on stealing cookies and saved

698
00:30:11,940 --> 00:30:15,000
credentials from various browsers it

699
00:30:15,000 --> 00:30:16,880
does extensive targeting for Instagram

700
00:30:16,880 --> 00:30:19,380
possibly to compromise account with

701
00:30:19,380 --> 00:30:22,559
accounts with a high follow count also

702
00:30:22,559 --> 00:30:24,659
targets Facebook and Facebook's ads

703
00:30:24,659 --> 00:30:26,700
manager in a similar way that fabuki

704
00:30:26,700 --> 00:30:29,039
does but we didn't see any we couldn't

705
00:30:29,039 --> 00:30:31,380
establish any code relationships between

706
00:30:31,380 --> 00:30:35,279
the two so Facebook's ad manager uh come

707
00:30:35,279 --> 00:30:38,100
from compromising would uh let the

708
00:30:38,100 --> 00:30:40,860
actors run advertising campaigns for

709
00:30:40,860 --> 00:30:43,679
example in this case distiller

710
00:30:43,679 --> 00:30:46,200
communicates with a different C2 over

711
00:30:46,200 --> 00:30:49,020
https but it's still sending the

712
00:30:49,020 --> 00:30:53,039
campaign ID and the Bots ID to this to

713
00:30:53,039 --> 00:30:56,220
this command and control server

714
00:30:56,220 --> 00:30:58,080
so what's interesting is that our

715
00:30:58,080 --> 00:31:00,419
emulated Bots receive no commands

716
00:31:00,419 --> 00:31:02,520
besides to download and start plugins

717
00:31:02,520 --> 00:31:04,740
and to update the bot to a new version

718
00:31:04,740 --> 00:31:07,440
so this led us to think that this is

719
00:31:07,440 --> 00:31:09,240
probably a plug-in oriented operation

720
00:31:09,240 --> 00:31:12,960
because uh all plugins we see are

721
00:31:12,960 --> 00:31:15,000
oriented towards harvesting credentials

722
00:31:15,000 --> 00:31:17,279
and stealing cryptocurrency and possibly

723
00:31:17,279 --> 00:31:20,159
the corebot commands could only be used

724
00:31:20,159 --> 00:31:23,880
for interesting Bots for example uh they

725
00:31:23,880 --> 00:31:27,480
they would open a hidden VNC session to

726
00:31:27,480 --> 00:31:28,799
the to the host when they want to

727
00:31:28,799 --> 00:31:32,480
impersonate the user

728
00:31:32,820 --> 00:31:34,260
so

729
00:31:34,260 --> 00:31:37,860
we concluded that this was a financially

730
00:31:37,860 --> 00:31:40,679
motivated group there were likely

731
00:31:40,679 --> 00:31:42,899
chinese-speaking actors because of some

732
00:31:42,899 --> 00:31:45,240
patterns we saw for example the trend of

733
00:31:45,240 --> 00:31:48,539
14 ghost trap uh the use of libraries

734
00:31:48,539 --> 00:31:50,399
that were developed by Chinese

735
00:31:50,399 --> 00:31:52,559
developers such as the HP socket

736
00:31:52,559 --> 00:31:54,899
framework they're also using a Chinese

737
00:31:54,899 --> 00:31:57,779
panel called Pagoda panel to operate

738
00:31:57,779 --> 00:32:00,899
some infrastructure but also their old

739
00:32:00,899 --> 00:32:04,140
infrastructure was hosted in the Eastern

740
00:32:04,140 --> 00:32:07,020
Asian region

741
00:32:07,020 --> 00:32:10,020
so to conclude uh ghostride is an old

742
00:32:10,020 --> 00:32:12,059
thread that is still a Potential Threat

743
00:32:12,059 --> 00:32:14,039
actors possibly because of its

744
00:32:14,039 --> 00:32:17,039
well-designed and modular structure we

745
00:32:17,039 --> 00:32:19,080
saw that sudo manuscript is an advanced

746
00:32:19,080 --> 00:32:21,779
variant that is currently financially

747
00:32:21,779 --> 00:32:24,779
successful and is ever growing so it is

748
00:32:24,779 --> 00:32:26,360
actually more relevant than ever

749
00:32:26,360 --> 00:32:28,679
especially since operators are

750
00:32:28,679 --> 00:32:30,539
diversifying and ramping up their

751
00:32:30,539 --> 00:32:33,059
distribution and given the botnet size

752
00:32:33,059 --> 00:32:35,279
which is pretty big it can already be

753
00:32:35,279 --> 00:32:37,140
used as spyware to spy on victims

754
00:32:37,140 --> 00:32:38,760
because the functionality is already

755
00:32:38,760 --> 00:32:41,399
there for example we saw that it's

756
00:32:41,399 --> 00:32:44,399
exfiltrating the that it can exfiltrate

757
00:32:44,399 --> 00:32:47,159
the tencent QQ number which would which

758
00:32:47,159 --> 00:32:48,600
could be used to spy on Chinese

759
00:32:48,600 --> 00:32:51,840
Nationals outside of China seeing that

760
00:32:51,840 --> 00:32:54,720
they they're infecting victims from all

761
00:32:54,720 --> 00:32:57,120
over the world but it also had has other

762
00:32:57,120 --> 00:33:00,000
spyware functionalities and that's it

763
00:33:00,000 --> 00:33:01,490
for us thank you

764
00:33:01,490 --> 00:33:05,220
[Applause]

765
00:33:09,179 --> 00:33:11,120
yeah

766
00:33:11,120 --> 00:33:15,860
okay time for questions

767
00:33:25,559 --> 00:33:29,418
you know everything now already

768
00:33:32,880 --> 00:33:36,320
they're all sleeping in

769
00:33:41,220 --> 00:33:43,679
Eric you don't have a detection question

770
00:33:43,679 --> 00:33:46,039
or

771
00:33:51,419 --> 00:33:54,240
one two three

772
00:33:54,240 --> 00:33:57,980
okay thank you very much

773
00:33:58,120 --> 00:34:02,659
[Applause]

