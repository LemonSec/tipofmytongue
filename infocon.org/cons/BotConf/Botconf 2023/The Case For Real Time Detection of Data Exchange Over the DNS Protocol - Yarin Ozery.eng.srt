1
00:00:00,060 --> 00:00:02,940
uh hi everyone my name is Jerry noseri I

2
00:00:02,940 --> 00:00:04,319
am a software engineer and security

3
00:00:04,319 --> 00:00:07,020
researcher at Akamai today I will be

4
00:00:07,020 --> 00:00:09,960
talking about to you about my recent

5
00:00:09,960 --> 00:00:11,820
work on real-time DNS expiration

6
00:00:11,820 --> 00:00:14,040
detection

7
00:00:14,040 --> 00:00:16,920
um so we already talked about me so our

8
00:00:16,920 --> 00:00:20,340
agenda for the talk is to introduce the

9
00:00:20,340 --> 00:00:23,480
topic of DNS tunneling and expectoration

10
00:00:23,480 --> 00:00:27,560
then I will proceed to discuss some

11
00:00:27,560 --> 00:00:29,900
detection methods

12
00:00:29,900 --> 00:00:33,120
their limitations and my proposed

13
00:00:33,120 --> 00:00:35,700
solution and now IT addresses those

14
00:00:35,700 --> 00:00:36,920
limitations

15
00:00:36,920 --> 00:00:40,020
we'll continue with an evaluation of the

16
00:00:40,020 --> 00:00:41,879
method comparing it against three

17
00:00:41,879 --> 00:00:44,219
state-of-the-art methods and we'll end

18
00:00:44,219 --> 00:00:45,480
within

19
00:00:45,480 --> 00:00:48,320
um with a discussion

20
00:00:48,320 --> 00:00:51,300
so the installing is basically the

21
00:00:51,300 --> 00:00:53,640
exploitation of the DNS protocol to

22
00:00:53,640 --> 00:00:55,920
Tunnel malware data and other kind of

23
00:00:55,920 --> 00:00:59,160
data through a client server model in a

24
00:00:59,160 --> 00:01:01,199
manner that violates the network

25
00:01:01,199 --> 00:01:03,180
security policies

26
00:01:03,180 --> 00:01:05,939
uh the main use cases as I mentioned is

27
00:01:05,939 --> 00:01:08,880
the data situation but it can also be

28
00:01:08,880 --> 00:01:12,200
used for C2

29
00:01:12,200 --> 00:01:13,760
procedure

30
00:01:13,760 --> 00:01:16,860
communication between botnets and the

31
00:01:16,860 --> 00:01:20,040
botmaster as well as bypassing captive

32
00:01:20,040 --> 00:01:22,500
portals

33
00:01:22,500 --> 00:01:25,020
um so there are also some benign use

34
00:01:25,020 --> 00:01:29,420
cases mainly for uh anti-virus agents to

35
00:01:29,420 --> 00:01:34,860
send signatures to scan to their server

36
00:01:34,860 --> 00:01:37,860
uh in practice all of this required is

37
00:01:37,860 --> 00:01:41,220
to register a domain name or multiple

38
00:01:41,220 --> 00:01:43,979
set an authoritative name server for

39
00:01:43,979 --> 00:01:46,380
this domain registered domain name

40
00:01:46,380 --> 00:01:48,720
and basically after that the malware

41
00:01:48,720 --> 00:01:52,500
main code data within DNS packets

42
00:01:52,500 --> 00:01:56,600
are there also in abundance

43
00:01:56,600 --> 00:01:58,619
tunneling tools that are freely

44
00:01:58,619 --> 00:01:59,520
available

45
00:01:59,520 --> 00:02:02,460
which makes it a very easy to set up

46
00:02:02,460 --> 00:02:04,280
attack

47
00:02:04,280 --> 00:02:08,780
you may encode the DNS excreted data

48
00:02:08,780 --> 00:02:13,140
with within the DNS domain to be

49
00:02:13,140 --> 00:02:16,379
resolved you can also encode a modest

50
00:02:16,379 --> 00:02:18,599
amount of data within the resource

51
00:02:18,599 --> 00:02:21,239
record to be resolved type to two bytes

52
00:02:21,239 --> 00:02:23,280
per packet and you may also use the

53
00:02:23,280 --> 00:02:27,120
timing data

54
00:02:27,720 --> 00:02:30,420
I'll continue with the demonstration of

55
00:02:30,420 --> 00:02:33,660
this expectation attack

56
00:02:33,660 --> 00:02:36,599
um so in this case uh the host is being

57
00:02:36,599 --> 00:02:39,000
compromised

58
00:02:39,000 --> 00:02:42,180
by downloading a malware by malicious

59
00:02:42,180 --> 00:02:43,940
attachment

60
00:02:43,940 --> 00:02:47,400
and there after that the

61
00:02:47,400 --> 00:02:48,860
um more

62
00:02:48,860 --> 00:02:52,500
accelerates data within uh the DNS query

63
00:02:52,500 --> 00:02:55,400
name to be resolved as a prefix

64
00:02:55,400 --> 00:03:00,540
and then via the DNS protocol the packet

65
00:03:00,540 --> 00:03:03,540
which is the authoritative name server

66
00:03:03,540 --> 00:03:06,720
of the attacker.com Zone which is as

67
00:03:06,720 --> 00:03:08,700
mentioned controlled by the attacker the

68
00:03:08,700 --> 00:03:12,659
data which assume and them and the

69
00:03:12,659 --> 00:03:16,080
attacker May encode a response

70
00:03:16,080 --> 00:03:19,760
which is then propagated back to the

71
00:03:19,760 --> 00:03:23,159
malware and Main include the additional

72
00:03:23,159 --> 00:03:25,400
comments

73
00:03:25,400 --> 00:03:27,959
so if I haven't convinced you it yet

74
00:03:27,959 --> 00:03:31,140
this is a threat there is

75
00:03:31,140 --> 00:03:33,980
many cases of

76
00:03:33,980 --> 00:03:38,340
apts using DNS expectation DNS tunneling

77
00:03:38,340 --> 00:03:41,700
as well as Marvel reduced it to

78
00:03:41,700 --> 00:03:45,980
exfiltrate private data

79
00:03:47,040 --> 00:03:49,319
um so there's a lot of research

80
00:03:49,319 --> 00:03:51,000
conducted on the topic

81
00:03:51,000 --> 00:03:55,159
uh there are two main types of DNS

82
00:03:55,159 --> 00:03:58,019
exploitation detection one of them is

83
00:03:58,019 --> 00:04:01,200
the payload-based methods which

84
00:04:01,200 --> 00:04:02,700
basically are based on inspecting

85
00:04:02,700 --> 00:04:06,179
singular queries

86
00:04:07,440 --> 00:04:10,439
and the other one is traffic base where

87
00:04:10,439 --> 00:04:13,799
um the entire volume is inspected and

88
00:04:13,799 --> 00:04:15,979
features are extracted

89
00:04:15,979 --> 00:04:19,639
most of the research in recent years

90
00:04:19,639 --> 00:04:23,100
based on DNS on a machine learning

91
00:04:23,100 --> 00:04:24,680
Solutions

92
00:04:24,680 --> 00:04:28,340
mostly unsupervised ones

93
00:04:28,340 --> 00:04:31,979
so the features that are being used

94
00:04:31,979 --> 00:04:34,919
um are usually based on the length of

95
00:04:34,919 --> 00:04:38,120
the DNS query and information based

96
00:04:38,120 --> 00:04:41,580
features which is make sense as it's

97
00:04:41,580 --> 00:04:45,180
usually long and encrypted and encoded

98
00:04:45,180 --> 00:04:48,919
kind of traffic but also the DNS

99
00:04:48,919 --> 00:04:51,560
resource record type

100
00:04:51,560 --> 00:04:55,620
may also be used because there are some

101
00:04:55,620 --> 00:04:58,139
uncommon query types like null and txt

102
00:04:58,139 --> 00:05:01,979
which allow more data to be sent back in

103
00:05:01,979 --> 00:05:04,940
the DNS response

104
00:05:06,060 --> 00:05:09,479
um so one method

105
00:05:09,479 --> 00:05:12,300
um is the one presented by Vern Paxton

106
00:05:12,300 --> 00:05:16,380
atal they're basically their method is

107
00:05:16,380 --> 00:05:18,060
basically based on information theory

108
00:05:18,060 --> 00:05:20,940
for every pair of source client AP and

109
00:05:20,940 --> 00:05:22,280
destination

110
00:05:22,280 --> 00:05:24,660
registered domain other method

111
00:05:24,660 --> 00:05:27,180
Aggregates the subdomains on a daily

112
00:05:27,180 --> 00:05:29,340
basis they compress them with General

113
00:05:29,340 --> 00:05:32,280
papers general purpose compassion

114
00:05:32,280 --> 00:05:34,800
algorithm and take the output as the

115
00:05:34,800 --> 00:05:37,220
information quantity

116
00:05:37,220 --> 00:05:39,539
this quantity is then compared against

117
00:05:39,539 --> 00:05:43,380
some threshold and if it existed the

118
00:05:43,380 --> 00:05:46,520
method raises an alert

119
00:05:46,520 --> 00:05:49,020
the second method which is based on

120
00:05:49,020 --> 00:05:52,259
unsupervised machine learning

121
00:05:52,259 --> 00:05:52,919
um

122
00:05:52,919 --> 00:05:56,600
is based on the isolation Forest

123
00:05:56,600 --> 00:06:00,960
isolation forced model

124
00:06:00,960 --> 00:06:03,960
so in this query in this method queries

125
00:06:03,960 --> 00:06:08,460
are collected in a similar manner there

126
00:06:08,699 --> 00:06:13,259
the features are generated on uh per in

127
00:06:13,259 --> 00:06:16,979
a sliding window manner

128
00:06:16,979 --> 00:06:18,900
um the main features are the longest

129
00:06:18,900 --> 00:06:21,479
meaningful world so they calculate for

130
00:06:21,479 --> 00:06:24,539
each query the the longest English world

131
00:06:24,539 --> 00:06:28,979
world encoded within the query and they

132
00:06:28,979 --> 00:06:32,300
take this average over a period of time

133
00:06:32,300 --> 00:06:35,360
as well as average entropy

134
00:06:35,360 --> 00:06:39,180
as you can read it it can be quite slow

135
00:06:39,180 --> 00:06:42,180
after six hours May pass by the time of

136
00:06:42,180 --> 00:06:43,199
detection

137
00:06:43,199 --> 00:06:45,840
but it also can detect very slow

138
00:06:45,840 --> 00:06:48,900
um DNS exploitation events

139
00:06:48,900 --> 00:06:53,100
and the final one which is a payload

140
00:06:53,100 --> 00:06:56,220
based supervised method

141
00:06:56,220 --> 00:06:59,100
so features are actually extracted on a

142
00:06:59,100 --> 00:07:02,240
per query base

143
00:07:02,240 --> 00:07:05,340
it is essentially a true real-time

144
00:07:05,340 --> 00:07:07,979
solution although its scalability is

145
00:07:07,979 --> 00:07:10,819
quite questionable because the amount of

146
00:07:10,819 --> 00:07:15,020
features that are needed to be extracted

147
00:07:15,199 --> 00:07:18,120
so this leads us to what I consider the

148
00:07:18,120 --> 00:07:20,599
limitations of the existing methods

149
00:07:20,599 --> 00:07:23,039
they mostly focused on improving

150
00:07:23,039 --> 00:07:27,620
accuracy and efficacy but as a result

151
00:07:27,620 --> 00:07:30,539
they the most of the research was

152
00:07:30,539 --> 00:07:33,860
dedicated to offline

153
00:07:33,860 --> 00:07:36,240
methods in nature

154
00:07:36,240 --> 00:07:39,120
uh which allows for a lot of data to be

155
00:07:39,120 --> 00:07:42,020
expected by the time of detection

156
00:07:42,020 --> 00:07:45,660
so the solution is to propose a method

157
00:07:45,660 --> 00:07:48,660
which can classify DNS queries as they

158
00:07:48,660 --> 00:07:50,460
are being resolved

159
00:07:50,460 --> 00:07:53,160
and preferably directly on the DNS

160
00:07:53,160 --> 00:07:55,440
resolver

161
00:07:55,440 --> 00:07:59,520
so this leads us to My Method

162
00:07:59,520 --> 00:08:01,979
um the idea it's it is it's inspired by

163
00:08:01,979 --> 00:08:06,240
the work of Pakistan uh the way I do the

164
00:08:06,240 --> 00:08:09,780
information estimation is by

165
00:08:09,780 --> 00:08:14,840
is by is by um

166
00:08:14,840 --> 00:08:17,280
collecting the

167
00:08:17,280 --> 00:08:19,620
um so the idea is to quantify the amount

168
00:08:19,620 --> 00:08:21,840
of information that is transmitted to

169
00:08:21,840 --> 00:08:24,360
the registered domains based on the

170
00:08:24,360 --> 00:08:26,240
unique subdomains

171
00:08:26,240 --> 00:08:29,099
and raise an alert if the amount is

172
00:08:29,099 --> 00:08:32,479
exceeds some predefined pressure

173
00:08:32,479 --> 00:08:35,279
these kind of domains are called

174
00:08:35,279 --> 00:08:37,580
information heavy heaters

175
00:08:37,580 --> 00:08:39,958
which is based on the idea of

176
00:08:39,958 --> 00:08:42,599
information of every leader detection in

177
00:08:42,599 --> 00:08:44,880
streams

178
00:08:44,880 --> 00:08:48,839
um so the issue with this solution is

179
00:08:48,839 --> 00:08:51,839
that in order to provide accurate uh

180
00:08:51,839 --> 00:08:56,100
quantity quantity estimation uh I will

181
00:08:56,100 --> 00:08:58,940
need I need to collect the entire

182
00:08:58,940 --> 00:09:02,580
queries over the DNS query stream which

183
00:09:02,580 --> 00:09:05,160
requires memory that is linear linearly

184
00:09:05,160 --> 00:09:07,620
dependent in the DNA stream size which

185
00:09:07,620 --> 00:09:10,860
can be quite large for this we in we

186
00:09:10,860 --> 00:09:12,480
introduce the use of sketching

187
00:09:12,480 --> 00:09:13,940
algorithms

188
00:09:13,940 --> 00:09:17,100
uh sketch algorithms if you're not aware

189
00:09:17,100 --> 00:09:18,500
is

190
00:09:18,500 --> 00:09:23,640
basically allows basically uh provides

191
00:09:23,640 --> 00:09:25,500
you with a compressor presentation of a

192
00:09:25,500 --> 00:09:26,760
data stream

193
00:09:26,760 --> 00:09:29,100
uh there's a solution from the Big Data

194
00:09:29,100 --> 00:09:30,260
world

195
00:09:30,260 --> 00:09:35,180
for real-time analytics performance

196
00:09:35,180 --> 00:09:37,500
they allow but they basically allow us

197
00:09:37,500 --> 00:09:40,080
to provide very accurate estimations of

198
00:09:40,080 --> 00:09:42,860
tasks that are difficult to do without

199
00:09:42,860 --> 00:09:46,100
inspecting the entire stream

200
00:09:46,100 --> 00:09:50,760
there are many uh okay and many examples

201
00:09:50,760 --> 00:09:52,860
of such algorithms

202
00:09:52,860 --> 00:09:55,320
like them can't mean sketch and the

203
00:09:55,320 --> 00:09:58,320
Apple clock which provides you within

204
00:09:58,320 --> 00:10:00,779
I'm very accurate approximation of the

205
00:10:00,779 --> 00:10:02,880
number of distinct elements in the

206
00:10:02,880 --> 00:10:03,980
Stream

207
00:10:03,980 --> 00:10:07,980
they were the hypervelope was used in

208
00:10:07,980 --> 00:10:10,680
previous research for load balancing

209
00:10:10,680 --> 00:10:13,880
and DDOS protection

210
00:10:13,880 --> 00:10:17,820
so in our case we modeled the DNS query

211
00:10:17,820 --> 00:10:19,080
stream is

212
00:10:19,080 --> 00:10:22,320
a stream of domain subdomain pairs so

213
00:10:22,320 --> 00:10:26,580
for which DNS query I we split it to the

214
00:10:26,580 --> 00:10:28,680
subdomain which is the prefix and the

215
00:10:28,680 --> 00:10:31,579
register domain

216
00:10:31,820 --> 00:10:34,740
maintains a fixed case size for this

217
00:10:34,740 --> 00:10:36,360
execution

218
00:10:36,360 --> 00:10:38,940
we can allow us to we can allow to only

219
00:10:38,940 --> 00:10:41,180
hold a fixed

220
00:10:41,180 --> 00:10:44,700
cache by incorporating weighted sampling

221
00:10:44,700 --> 00:10:45,860
techniques

222
00:10:45,860 --> 00:10:48,959
which with very high probability allow

223
00:10:48,959 --> 00:10:50,000
us to

224
00:10:50,000 --> 00:10:54,540
detect the heavy heater domains

225
00:10:54,540 --> 00:10:55,680
um

226
00:10:55,680 --> 00:10:59,600
so I and in addition I incorporate a

227
00:10:59,600 --> 00:11:02,040
evaluation of the Apple log log which

228
00:11:02,040 --> 00:11:04,320
instead of counting distinct information

229
00:11:04,320 --> 00:11:08,640
is able to give a kind of weight to the

230
00:11:08,640 --> 00:11:10,500
distinct

231
00:11:10,500 --> 00:11:12,740
um to the distinct

232
00:11:12,740 --> 00:11:14,779
query

233
00:11:14,779 --> 00:11:19,079
where the rate is the length of this of

234
00:11:19,079 --> 00:11:21,740
the subdomain

235
00:11:21,740 --> 00:11:24,839
uh so given the way that the ibh

236
00:11:24,839 --> 00:11:28,200
algorithm Works uh popular domains with

237
00:11:28,200 --> 00:11:31,019
many sub-domains are very likely to be

238
00:11:31,019 --> 00:11:34,140
included in the cache uh we therefore

239
00:11:34,140 --> 00:11:36,959
incorporate an allow list based on

240
00:11:36,959 --> 00:11:41,420
popularity based lists to reduce this

241
00:11:41,420 --> 00:11:43,760
unwanted effect

242
00:11:43,760 --> 00:11:47,060
so now we proceed with

243
00:11:47,060 --> 00:11:50,839
what's a demonstration of how ibh

244
00:11:50,839 --> 00:11:54,180
Works in actuality

245
00:11:54,180 --> 00:11:56,760
so

246
00:11:56,760 --> 00:11:59,100
in this case we have a compromised host

247
00:11:59,100 --> 00:12:01,380
and you can see it tries to exfiltrate

248
00:12:01,380 --> 00:12:03,680
some data

249
00:12:03,680 --> 00:12:07,260
the Enterprise DNS Gateway

250
00:12:07,260 --> 00:12:08,180
um

251
00:12:08,180 --> 00:12:11,100
updates the information count of the

252
00:12:11,100 --> 00:12:12,260
mile.com

253
00:12:12,260 --> 00:12:18,300
based on the length of the subdomain

254
00:12:18,839 --> 00:12:23,399
um yeah so the iPhone log instance is at

255
00:12:23,399 --> 00:12:25,560
the subdomain

256
00:12:25,560 --> 00:12:29,279
the information increases

257
00:12:29,579 --> 00:12:32,339
but given that it didn't it didn't

258
00:12:32,339 --> 00:12:35,820
exceed the detection threshold the DNS

259
00:12:35,820 --> 00:12:38,220
query is allowed to propagate

260
00:12:38,220 --> 00:12:42,240
now dim our accelerates another one this

261
00:12:42,240 --> 00:12:44,760
time the amount of information exceeds

262
00:12:44,760 --> 00:12:46,760
the detection threshold

263
00:12:46,760 --> 00:12:49,920
the query is blocked and an alert is

264
00:12:49,920 --> 00:12:52,560
waste for the Enterprise sock team

265
00:12:52,560 --> 00:12:55,079
and all of this happens right on the DNS

266
00:12:55,079 --> 00:12:56,880
resolver

267
00:12:56,880 --> 00:12:59,820
so for experiments we collected 50 over

268
00:12:59,820 --> 00:13:03,540
50 billion queries the targeted at more

269
00:13:03,540 --> 00:13:06,360
than 40 million distinct registered

270
00:13:06,360 --> 00:13:08,220
domains over the course of eight days

271
00:13:08,220 --> 00:13:10,820
from Enterprise

272
00:13:10,820 --> 00:13:13,740
organizations that are monitored by by

273
00:13:13,740 --> 00:13:16,519
Akamai

274
00:13:16,519 --> 00:13:21,079
so we take this data we inject into it

275
00:13:21,079 --> 00:13:24,899
malicious traffic with over 13 13 under

276
00:13:24,899 --> 00:13:26,700
distinct domains

277
00:13:26,700 --> 00:13:30,000
we simulate different scenarios the

278
00:13:30,000 --> 00:13:32,579
first is web browsing or with the iodine

279
00:13:32,579 --> 00:13:36,180
tool the second is the expectation of

280
00:13:36,180 --> 00:13:38,300
credit card details out of point of sale

281
00:13:38,300 --> 00:13:41,660
similar to the framework point of sale

282
00:13:41,660 --> 00:13:44,399
malware which was used in several such

283
00:13:44,399 --> 00:13:46,860
campaigns and the third is backdoor

284
00:13:46,860 --> 00:13:49,079
Dennis which simulates CTO C2

285
00:13:49,079 --> 00:13:51,680
communication

286
00:13:51,779 --> 00:13:54,000
um we we trained the

287
00:13:54,000 --> 00:13:56,700
um the methods and we measure the tpr

288
00:13:56,700 --> 00:13:58,440
and fpr

289
00:13:58,440 --> 00:14:00,420
based on the number of registered

290
00:14:00,420 --> 00:14:02,459
domains that are being alerted

291
00:14:02,459 --> 00:14:05,100
and we apply the peace time allow list

292
00:14:05,100 --> 00:14:07,019
the Tranquil allow list for all the

293
00:14:07,019 --> 00:14:08,700
methods

294
00:14:08,700 --> 00:14:11,940
so for the results

295
00:14:11,940 --> 00:14:16,320
um so you can see that the ivhh is

296
00:14:16,320 --> 00:14:17,880
competitive

297
00:14:17,880 --> 00:14:20,720
in pretty much every setting

298
00:14:20,720 --> 00:14:23,880
you can see that in the final one it

299
00:14:23,880 --> 00:14:25,279
much

300
00:14:25,279 --> 00:14:29,880
surpasses the other real-time solution

301
00:14:29,880 --> 00:14:33,060
and it provides very competitive results

302
00:14:33,060 --> 00:14:38,540
to the offline methods across the board

303
00:14:38,959 --> 00:14:41,279
so we proceed with a real world

304
00:14:41,279 --> 00:14:44,040
evaluation we essentially executed the

305
00:14:44,040 --> 00:14:46,920
ibh algorithm over the course of a map

306
00:14:46,920 --> 00:14:51,060
in a test environment with real data

307
00:14:51,060 --> 00:14:54,980
um with different detection thresholds

308
00:14:54,980 --> 00:14:59,040
so in this presentation I will talk

309
00:14:59,040 --> 00:15:02,040
about the alerts we saw for the case

310
00:15:02,040 --> 00:15:03,839
where we use the detection threshold of

311
00:15:03,839 --> 00:15:07,079
15 bytes per second

312
00:15:07,079 --> 00:15:07,740
um

313
00:15:07,740 --> 00:15:11,040
there were three two positives and

314
00:15:11,040 --> 00:15:15,139
four uh false positive

315
00:15:15,139 --> 00:15:18,720
so the first example of real DNS

316
00:15:18,720 --> 00:15:21,180
acceleration that we or it will more

317
00:15:21,180 --> 00:15:24,360
likely done the installing is uh we had

318
00:15:24,360 --> 00:15:25,740
a case of

319
00:15:25,740 --> 00:15:30,000
of iodine we can conclude its iodine

320
00:15:30,000 --> 00:15:33,779
based on the responses

321
00:15:33,779 --> 00:15:35,220
um

322
00:15:35,220 --> 00:15:40,019
yeah the second one is a base 64 kind of

323
00:15:40,019 --> 00:15:43,079
tunnel that we spotted

324
00:15:43,079 --> 00:15:45,180
and the final one which we couldn't

325
00:15:45,180 --> 00:15:47,360
really conclude if it's

326
00:15:47,360 --> 00:15:50,399
Diana's tunneling or not but it looks

327
00:15:50,399 --> 00:15:54,199
like a x encoded data

328
00:15:54,199 --> 00:15:55,800
yeah

329
00:15:55,800 --> 00:15:58,380
so these are the samples that we

330
00:15:58,380 --> 00:15:59,940
observed

331
00:15:59,940 --> 00:16:03,620
in terms of performance so we simulated

332
00:16:03,620 --> 00:16:07,380
DNS queries streams with about 35

333
00:16:07,380 --> 00:16:10,639
million queries and we tested the

334
00:16:10,639 --> 00:16:14,040
computational and memory use of the

335
00:16:14,040 --> 00:16:16,320
different methods

336
00:16:16,320 --> 00:16:19,560
um so ibh and the other real-time one

337
00:16:19,560 --> 00:16:22,320
use the least amount of data which is

338
00:16:22,320 --> 00:16:23,519
expected

339
00:16:23,519 --> 00:16:25,920
but the difference in time is very

340
00:16:25,920 --> 00:16:29,279
significant even between ibhs and the

341
00:16:29,279 --> 00:16:32,399
other real-time solution about 20 times

342
00:16:32,399 --> 00:16:33,720
faster

343
00:16:33,720 --> 00:16:36,540
which makes it much more suitable for

344
00:16:36,540 --> 00:16:39,839
large-scale deployments like the one in

345
00:16:39,839 --> 00:16:42,680
Akamai

346
00:16:42,860 --> 00:16:45,060
so now we'll discuss some of the

347
00:16:45,060 --> 00:16:46,519
limitations

348
00:16:46,519 --> 00:16:50,040
so the main so the first limitation is

349
00:16:50,040 --> 00:16:53,660
that we can only so ibiz can only detect

350
00:16:53,660 --> 00:16:57,060
expectation if it's based on the query

351
00:16:57,060 --> 00:17:00,000
the query name field this isn't really

352
00:17:00,000 --> 00:17:01,980
unique to Heritage because most of the

353
00:17:01,980 --> 00:17:04,640
methods are designed like that

354
00:17:04,640 --> 00:17:07,939
except for Paxon I guess

355
00:17:07,939 --> 00:17:10,260
the second one is that it is very

356
00:17:10,260 --> 00:17:13,619
unlikely to detectoration campaigns if

357
00:17:13,619 --> 00:17:16,160
it does spread across many domains

358
00:17:16,160 --> 00:17:19,859
this is because we detect domain heavy

359
00:17:19,859 --> 00:17:22,079
eaters so we on account information

360
00:17:22,079 --> 00:17:25,140
based on the registered domain based on

361
00:17:25,140 --> 00:17:28,679
the target register domain

362
00:17:28,679 --> 00:17:30,840
um an idea how to address this is to

363
00:17:30,840 --> 00:17:33,660
which I haven't verified yet is instead

364
00:17:33,660 --> 00:17:36,059
of accumulating the information per

365
00:17:36,059 --> 00:17:40,260
register domain do it per Source client

366
00:17:40,260 --> 00:17:42,120
IP

367
00:17:42,120 --> 00:17:43,980
um that way it doesn't matter which

368
00:17:43,980 --> 00:17:46,860
which are the target destination domains

369
00:17:46,860 --> 00:17:48,840
but as long as the amount of information

370
00:17:48,840 --> 00:17:50,820
is

371
00:17:50,820 --> 00:17:54,000
um a normally large for the specific

372
00:17:54,000 --> 00:17:57,419
soil Source it can be detected

373
00:17:57,419 --> 00:18:00,299
uh so the third one is that it cannot

374
00:18:00,299 --> 00:18:03,080
detect uh it it cannot operate on

375
00:18:03,080 --> 00:18:05,700
encrypted data if it doesn't if it

376
00:18:05,700 --> 00:18:07,160
cannot uh

377
00:18:07,160 --> 00:18:11,039
inspect the packet itself because it's

378
00:18:11,039 --> 00:18:14,600
it relies on being able to inspect the

379
00:18:14,600 --> 00:18:18,179
query the DNS query

380
00:18:18,179 --> 00:18:20,880
and the final one is that the

381
00:18:20,880 --> 00:18:22,860
information counting is based only on

382
00:18:22,860 --> 00:18:27,360
Unix subdomains so this is both a pro as

383
00:18:27,360 --> 00:18:29,100
it allows us to reduce the false

384
00:18:29,100 --> 00:18:31,980
positive alerts but it also means that

385
00:18:31,980 --> 00:18:34,380
if for example the attacker uses a

386
00:18:34,380 --> 00:18:36,020
limited size of

387
00:18:36,020 --> 00:18:39,179
messages for example the main core data

388
00:18:39,179 --> 00:18:43,220
within with only three kinds of messages

389
00:18:43,260 --> 00:18:43,860
um

390
00:18:43,860 --> 00:18:46,980
so we we won't be able to detect such an

391
00:18:46,980 --> 00:18:47,820
attack

392
00:18:47,820 --> 00:18:50,280
this is also a limitation for the amount

393
00:18:50,280 --> 00:18:53,400
of data that the attacker May accelerate

394
00:18:53,400 --> 00:18:55,500
because you can only encode very few

395
00:18:55,500 --> 00:18:57,960
beats per message and it makes it very

396
00:18:57,960 --> 00:19:02,160
uh unreliable method

397
00:19:02,160 --> 00:19:07,440
so to conclude I presented ibh a symbol

398
00:19:07,440 --> 00:19:11,039
yet effective DNS expectation detection

399
00:19:11,039 --> 00:19:14,039
that is algorithm that is

400
00:19:14,039 --> 00:19:17,460
that can be deployed right on DNS

401
00:19:17,460 --> 00:19:18,980
resolvers

402
00:19:18,980 --> 00:19:23,340
I've shown a very competitive results

403
00:19:23,340 --> 00:19:25,260
for it

404
00:19:25,260 --> 00:19:29,400
real world detections with minimal false

405
00:19:29,400 --> 00:19:31,160
positive alerts

406
00:19:31,160 --> 00:19:34,280
as a future work I mean it's already

407
00:19:34,280 --> 00:19:38,120
being done but we plan on deploying it

408
00:19:38,120 --> 00:19:42,179
right on Akamai DNS resolvers it's

409
00:19:42,179 --> 00:19:45,000
currently in very late test stages

410
00:19:45,000 --> 00:19:47,760
and I believe that's it if you have any

411
00:19:47,760 --> 00:19:51,320
question you may ask me

412
00:19:59,220 --> 00:20:03,080
okay we have time for one question

413
00:20:04,860 --> 00:20:07,580
be shy

414
00:20:09,600 --> 00:20:12,860
okay one question

415
00:20:18,600 --> 00:20:20,640
thank you thank you for the presentation

416
00:20:20,640 --> 00:20:23,700
I have a little question regarding

417
00:20:23,700 --> 00:20:26,100
um the qualification of

418
00:20:26,100 --> 00:20:28,860
um the alerts so you you have some false

419
00:20:28,860 --> 00:20:32,880
positives uh so few but

420
00:20:32,880 --> 00:20:35,340
how do you proceed to qualify this kind

421
00:20:35,340 --> 00:20:37,860
of uh of detection to know if it is a

422
00:20:37,860 --> 00:20:40,020
false positive or not because it is a

423
00:20:40,020 --> 00:20:41,940
bit difficult to investigate this kind

424
00:20:41,940 --> 00:20:44,100
of event yeah it's based on manual

425
00:20:44,100 --> 00:20:46,919
inspection that's how we determine it we

426
00:20:46,919 --> 00:20:49,740
have analysts which inspect the

427
00:20:49,740 --> 00:20:50,340
um

428
00:20:50,340 --> 00:20:53,299
the alerts

429
00:20:53,299 --> 00:20:55,740
this is one difficulty with DNS

430
00:20:55,740 --> 00:20:57,360
tunneling you cannot really distinguish

431
00:20:57,360 --> 00:21:00,200
between benign and malicious

432
00:21:00,200 --> 00:21:05,160
between Miranda and malicious tunnels

433
00:21:05,340 --> 00:21:07,200
um I don't think there's any method that

434
00:21:07,200 --> 00:21:09,500
can really handle it without

435
00:21:09,500 --> 00:21:12,360
manual inspection and using the use of a

436
00:21:12,360 --> 00:21:15,900
low list you don't yet have uh some kind

437
00:21:15,900 --> 00:21:20,480
of manual but process that conduct

438
00:21:20,480 --> 00:21:24,720
easily to know and fast fastly if it is

439
00:21:24,720 --> 00:21:26,460
a false positive or not

440
00:21:26,460 --> 00:21:30,179
remain a deep deep analysis of the alert

441
00:21:30,179 --> 00:21:32,880
I mean you can you can like maybe use

442
00:21:32,880 --> 00:21:36,120
some rule of thumbs like you can maybe

443
00:21:36,120 --> 00:21:38,700
inspect the I can only take into account

444
00:21:38,700 --> 00:21:40,620
like the date of registration of the

445
00:21:40,620 --> 00:21:43,740
domain and how long it has been used

446
00:21:43,740 --> 00:21:44,400
um

447
00:21:44,400 --> 00:21:47,820
so yeah we use it for example also too

448
00:21:47,820 --> 00:21:52,080
so there are many uh antivirus engines

449
00:21:52,080 --> 00:21:55,280
that use DNS for the file

450
00:21:55,280 --> 00:22:00,600
for looking uh for looking up

451
00:22:00,600 --> 00:22:05,539
um file hashes of files to be

452
00:22:05,539 --> 00:22:07,760
to be scanned

453
00:22:07,760 --> 00:22:10,380
so that's how you can know you know

454
00:22:10,380 --> 00:22:11,880
based on

455
00:22:11,880 --> 00:22:13,799
some rule of thumbs but we can maybe

456
00:22:13,799 --> 00:22:16,940
discuss order if you want

457
00:22:17,340 --> 00:22:19,170
okay thank you very much

458
00:22:19,170 --> 00:22:27,279
[Applause]

