1
00:00:00,599 --> 00:00:02,520
okay thank you

2
00:00:02,520 --> 00:00:06,719
I I'm Alec I think maybe more of you

3
00:00:06,720 --> 00:00:08,760
probably know my co-presenter here at

4
00:00:08,760 --> 00:00:11,880
wukish and as you said we're from the

5
00:00:11,880 --> 00:00:15,500
Android malware research team at Google

6
00:00:16,440 --> 00:00:18,180
uh so yeah so we're here today to talk

7
00:00:18,180 --> 00:00:19,380
to you about

8
00:00:19,380 --> 00:00:21,779
OTAs uh which I'll explain a little bit

9
00:00:21,779 --> 00:00:23,160
more what those are if you're not

10
00:00:23,160 --> 00:00:24,840
familiar but basically they're the

11
00:00:24,840 --> 00:00:27,840
system updators on Android devices so

12
00:00:27,840 --> 00:00:29,820
over the past couple years Lucas and I

13
00:00:29,820 --> 00:00:32,960
have been primarily kind of focusing on

14
00:00:32,960 --> 00:00:35,460
pre-installed security threats on

15
00:00:35,460 --> 00:00:37,620
Android devices

16
00:00:37,620 --> 00:00:39,059
um so we're taking a look at like the

17
00:00:39,059 --> 00:00:41,700
device firmware and all the system apps

18
00:00:41,700 --> 00:00:44,420
and everything else that comes

19
00:00:44,420 --> 00:00:47,940
pre-installed on a device out of the box

20
00:00:47,940 --> 00:00:48,539
um

21
00:00:48,539 --> 00:00:49,920
because unfortunately a lot of times

22
00:00:49,920 --> 00:00:51,960
there still is malware

23
00:00:51,960 --> 00:00:54,300
uh in this space

24
00:00:54,300 --> 00:00:57,199
so we'll talk today about some examples

25
00:00:57,199 --> 00:01:00,480
some case studies including you know why

26
00:01:00,480 --> 00:01:03,300
is this actually a Target and what is

27
00:01:03,300 --> 00:01:06,199
Google doing about it

28
00:01:06,840 --> 00:01:08,159
so just to give a little bit of

29
00:01:08,159 --> 00:01:11,400
background first on the whole space that

30
00:01:11,400 --> 00:01:13,380
we're talking about here and where OTAs

31
00:01:13,380 --> 00:01:16,920
fit in the supply chain for Android can

32
00:01:16,920 --> 00:01:19,140
get kind of complicated part of this is

33
00:01:19,140 --> 00:01:20,580
because there's just a lot of different

34
00:01:20,580 --> 00:01:22,259
devices that might run Android you know

35
00:01:22,259 --> 00:01:24,180
most people might think of it as a phone

36
00:01:24,180 --> 00:01:27,720
operating system but it's also used for

37
00:01:27,720 --> 00:01:30,960
cars for televisions tablets and a

38
00:01:30,960 --> 00:01:33,380
million other different iot devices

39
00:01:33,380 --> 00:01:37,880
so in the production of any one device

40
00:01:37,880 --> 00:01:39,540
there's going to be a lot of different

41
00:01:39,540 --> 00:01:41,060
companies involved

42
00:01:41,060 --> 00:01:44,280
and the boundaries between these

43
00:01:44,280 --> 00:01:45,360
companies that you might see here in

44
00:01:45,360 --> 00:01:48,119
this chart get blurred a lot so for

45
00:01:48,119 --> 00:01:50,820
example you might think of mediatek as a

46
00:01:50,820 --> 00:01:53,100
you know chipset producer but for

47
00:01:53,100 --> 00:01:55,079
Android devices a lot of times they

48
00:01:55,079 --> 00:01:56,759
might even make things like you know

49
00:01:56,759 --> 00:02:00,479
music or media players or messaging apps

50
00:02:00,479 --> 00:02:01,079
um

51
00:02:01,079 --> 00:02:03,299
Sometimes some devices are just a

52
00:02:03,299 --> 00:02:05,460
re-licensing of a device that already

53
00:02:05,460 --> 00:02:07,459
existed from another company

54
00:02:07,459 --> 00:02:10,199
and depending on different use cases the

55
00:02:10,199 --> 00:02:11,640
company might not have a lot of

56
00:02:11,640 --> 00:02:14,220
expertise in that domain so they might

57
00:02:14,220 --> 00:02:15,720
uh

58
00:02:15,720 --> 00:02:18,020
contract out certain parts of the device

59
00:02:18,020 --> 00:02:21,540
one of those things being OTAs

60
00:02:21,540 --> 00:02:24,720
so OTA just stands for over the air it's

61
00:02:24,720 --> 00:02:26,580
over-the-air updates so basically the

62
00:02:26,580 --> 00:02:29,099
system update when a new version of the

63
00:02:29,099 --> 00:02:31,920
operating system or when new versions

64
00:02:31,920 --> 00:02:33,720
applications security patches things

65
00:02:33,720 --> 00:02:36,540
like that you know probably that button

66
00:02:36,540 --> 00:02:37,560
that you're always clicking ignore

67
00:02:37,560 --> 00:02:38,760
because you don't want to restart your

68
00:02:38,760 --> 00:02:39,599
device

69
00:02:39,599 --> 00:02:41,580
I know I do it sometimes I'm guilty of

70
00:02:41,580 --> 00:02:42,900
it

71
00:02:42,900 --> 00:02:46,099
but on Android this process is actually

72
00:02:46,099 --> 00:02:48,540
pretty straightforward for developers to

73
00:02:48,540 --> 00:02:50,819
implement all it requires is just

74
00:02:50,819 --> 00:02:51,959
downloading

75
00:02:51,959 --> 00:02:54,000
the new system image that you want to

76
00:02:54,000 --> 00:02:56,340
install on the device and then there is

77
00:02:56,340 --> 00:02:58,519
a single API call

78
00:02:58,519 --> 00:03:01,560
in the recovery system API that actually

79
00:03:01,560 --> 00:03:04,200
verifies the signature installs it and

80
00:03:04,200 --> 00:03:05,900
then you reboot the device

81
00:03:05,900 --> 00:03:08,940
it's very straightforward

82
00:03:08,940 --> 00:03:11,519
I

83
00:03:11,519 --> 00:03:13,500
one reason they cannot be

84
00:03:13,500 --> 00:03:17,159
straightforward though is as a device

85
00:03:17,159 --> 00:03:19,200
manufacturer there might be a lot of

86
00:03:19,200 --> 00:03:20,519
customization you want to do in this

87
00:03:20,519 --> 00:03:22,980
space so if you have a pre-installed app

88
00:03:22,980 --> 00:03:26,300
you might want to update it out of band

89
00:03:26,300 --> 00:03:28,260
you know it doesn't make sense that

90
00:03:28,260 --> 00:03:30,060
every time you want to update your

91
00:03:30,060 --> 00:03:31,980
settings app you have to do a full

92
00:03:31,980 --> 00:03:33,780
system update and reboot the device

93
00:03:33,780 --> 00:03:35,400
right maybe you want to do just update

94
00:03:35,400 --> 00:03:37,940
that one app or maybe you want to update

95
00:03:37,940 --> 00:03:40,920
some system properties or you know

96
00:03:40,920 --> 00:03:42,659
change the server that it connects to

97
00:03:42,659 --> 00:03:45,299
just small changes

98
00:03:45,299 --> 00:03:46,319
um

99
00:03:46,319 --> 00:03:47,580
some other things that might cause

100
00:03:47,580 --> 00:03:49,680
complications are you know you know

101
00:03:49,680 --> 00:03:50,900
where you're actually going to host

102
00:03:50,900 --> 00:03:54,720
these big files for download maybe it's

103
00:03:54,720 --> 00:03:58,080
something that's too expensive for you

104
00:03:58,080 --> 00:04:00,659
so that's uh

105
00:04:00,659 --> 00:04:02,819
kind of why these end up being a target

106
00:04:02,819 --> 00:04:04,680
for abuse is that they're frequently

107
00:04:04,680 --> 00:04:07,620
contracted out to other companies other

108
00:04:07,620 --> 00:04:09,299
companies will develop these whole tools

109
00:04:09,299 --> 00:04:11,519
that allow you to manage you know which

110
00:04:11,519 --> 00:04:13,439
devices are going to get updates when

111
00:04:13,439 --> 00:04:15,900
they get updates depending on a variety

112
00:04:15,900 --> 00:04:18,000
of factors like region mobile carrier

113
00:04:18,000 --> 00:04:19,699
things like that

114
00:04:19,699 --> 00:04:21,779
another reason that they're a main

115
00:04:21,779 --> 00:04:23,880
target for abuse is that they're very

116
00:04:23,880 --> 00:04:26,160
privileged apps on the device

117
00:04:26,160 --> 00:04:29,280
so they automatically are expected to

118
00:04:29,280 --> 00:04:30,720
have access to a lot of sensitive

119
00:04:30,720 --> 00:04:31,680
permissions

120
00:04:31,680 --> 00:04:34,080
and they run as a more privileged user

121
00:04:34,080 --> 00:04:36,120
on the device usually so they actually

122
00:04:36,120 --> 00:04:38,540
run with the shared user ID

123
00:04:38,540 --> 00:04:41,160
which is basically like running as a

124
00:04:41,160 --> 00:04:43,979
privileged Linux user that run that the

125
00:04:43,979 --> 00:04:46,199
rest of the operating system runs as the

126
00:04:46,199 --> 00:04:48,900
Android system user and it gets access

127
00:04:48,900 --> 00:04:51,600
to a whole variety of extra permissions

128
00:04:51,600 --> 00:04:53,699
that user space or user installed apps

129
00:04:53,699 --> 00:04:56,000
don't usually have access to

130
00:04:56,000 --> 00:05:00,440
and uh as well as a bunch of other apis

131
00:05:00,440 --> 00:05:04,080
in addition this these are apps that you

132
00:05:04,080 --> 00:05:05,759
would expect to be downloading other

133
00:05:05,759 --> 00:05:08,160
applications so if you're looking at

134
00:05:08,160 --> 00:05:10,560
your device and you see that this you

135
00:05:10,560 --> 00:05:12,900
know system updater app is installing

136
00:05:12,900 --> 00:05:15,120
other applications on your device that's

137
00:05:15,120 --> 00:05:17,040
not immediately suspicious

138
00:05:17,040 --> 00:05:19,740
so it's a great opportunity

139
00:05:19,740 --> 00:05:22,320
for someone who wants to sell access to

140
00:05:22,320 --> 00:05:23,820
your device download a bunch of malware

141
00:05:23,820 --> 00:05:26,100
to just kind of slip things in

142
00:05:26,100 --> 00:05:27,500
occasionally

143
00:05:27,500 --> 00:05:31,560
so we end up seeing sometimes OTAs will

144
00:05:31,560 --> 00:05:33,419
do just that they'll sell access to

145
00:05:33,419 --> 00:05:35,460
devices create a botnet start

146
00:05:35,460 --> 00:05:37,320
downloading you know add fraud modules

147
00:05:37,320 --> 00:05:39,240
and just running them whenever they feel

148
00:05:39,240 --> 00:05:41,460
like it

149
00:05:41,460 --> 00:05:43,560
so the first instance we'll talk about

150
00:05:43,560 --> 00:05:46,259
is digitime

151
00:05:46,259 --> 00:05:47,820
so this is something that has been

152
00:05:47,820 --> 00:05:51,419
discussed by others already externally I

153
00:05:51,419 --> 00:05:54,120
think it first made headlines with a

154
00:05:54,120 --> 00:05:56,699
Malwarebytes article that was

155
00:05:56,699 --> 00:05:58,280
specifically talking about

156
00:05:58,280 --> 00:06:02,759
some budget phones that were

157
00:06:02,759 --> 00:06:04,860
being distributed by a program through

158
00:06:04,860 --> 00:06:07,400
the US government

159
00:06:07,440 --> 00:06:08,460
um

160
00:06:08,460 --> 00:06:10,560
in with a company called Assurance

161
00:06:10,560 --> 00:06:12,240
Wireless

162
00:06:12,240 --> 00:06:14,520
um some more technical details were also

163
00:06:14,520 --> 00:06:16,199
posted on this blog which there's a link

164
00:06:16,199 --> 00:06:19,199
to here I'll talk about all that

165
00:06:19,199 --> 00:06:21,300
information that's already public but in

166
00:06:21,300 --> 00:06:22,680
addition today we're going to talk about

167
00:06:22,680 --> 00:06:25,380
uh some other things that haven't really

168
00:06:25,380 --> 00:06:27,900
been published yet like what were the

169
00:06:27,900 --> 00:06:29,039
apps that they were actually downloading

170
00:06:29,039 --> 00:06:31,740
and then other versions

171
00:06:31,740 --> 00:06:33,600
after they realize that they've been

172
00:06:33,600 --> 00:06:36,080
detected

173
00:06:36,300 --> 00:06:39,120
so the initial version was being

174
00:06:39,120 --> 00:06:41,699
distributed on a variety of android

175
00:06:41,699 --> 00:06:45,180
devices I think it was ended up they had

176
00:06:45,180 --> 00:06:47,039
like a few dozen customers in the

177
00:06:47,039 --> 00:06:49,259
Android space oems and carriers and

178
00:06:49,259 --> 00:06:50,460
things like that

179
00:06:50,460 --> 00:06:53,699
where did you time was the

180
00:06:53,699 --> 00:06:57,800
standard OTA or system update provider

181
00:06:57,800 --> 00:07:01,380
the actual application looked pretty

182
00:07:01,380 --> 00:07:04,080
basic uh it just did like the basic

183
00:07:04,080 --> 00:07:05,639
system update you know it's a pretty

184
00:07:05,639 --> 00:07:08,280
small application but there was like two

185
00:07:08,280 --> 00:07:11,580
lines in the Java code that launched a

186
00:07:11,580 --> 00:07:13,020
Lua interpreter

187
00:07:13,020 --> 00:07:16,860
and the Lua interpreter I had a Java to

188
00:07:16,860 --> 00:07:18,240
Lua interface

189
00:07:18,240 --> 00:07:20,340
and so if you looked in the asset files

190
00:07:20,340 --> 00:07:21,599
that were included in the application

191
00:07:21,599 --> 00:07:23,639
there were these two files called

192
00:07:23,639 --> 00:07:26,160
license one and license three that were

193
00:07:26,160 --> 00:07:27,360
actually

194
00:07:27,360 --> 00:07:29,759
compiled Lua code and they contained

195
00:07:29,759 --> 00:07:31,380
this whole

196
00:07:31,380 --> 00:07:34,680
uh command and control

197
00:07:34,680 --> 00:07:37,020
module that would connect to a server

198
00:07:37,020 --> 00:07:39,479
and do things like it could check in and

199
00:07:39,479 --> 00:07:41,880
update itself I

200
00:07:41,880 --> 00:07:44,940
it would also have the ability to

201
00:07:44,940 --> 00:07:46,440
download other modules in Lua and

202
00:07:46,440 --> 00:07:47,460
execute them

203
00:07:47,460 --> 00:07:50,340
and it would just basically repeatedly

204
00:07:50,340 --> 00:07:52,460
check in over and over again self update

205
00:07:52,460 --> 00:07:56,460
and I all this Lua code was running with

206
00:07:56,460 --> 00:07:58,860
the elevated permissions of this system

207
00:07:58,860 --> 00:08:01,460
application

208
00:08:01,680 --> 00:08:04,199
so when you take a look at how it was

209
00:08:04,199 --> 00:08:05,520
communicating with the back end the

210
00:08:05,520 --> 00:08:06,840
first thing it would do is just check in

211
00:08:06,840 --> 00:08:10,380
you know identify itself as a new user

212
00:08:10,380 --> 00:08:13,860
device and download and update to the

213
00:08:13,860 --> 00:08:16,680
Lua code and so you can see all the URLs

214
00:08:16,680 --> 00:08:17,880
that they would use here for their

215
00:08:17,880 --> 00:08:19,220
backend servers

216
00:08:19,220 --> 00:08:22,620
were all things that looked kind of like

217
00:08:22,620 --> 00:08:25,440
they could be legitimate my favorite one

218
00:08:25,440 --> 00:08:28,080
here is Android security team.club I

219
00:08:28,080 --> 00:08:28,919
don't know who they thought they were

220
00:08:28,919 --> 00:08:31,020
fooling there

221
00:08:31,020 --> 00:08:32,520
uh and I also thought this was

222
00:08:32,520 --> 00:08:33,779
interesting because it's not something I

223
00:08:33,779 --> 00:08:35,339
normally see in Android malware where

224
00:08:35,339 --> 00:08:37,740
they're trying to blend traffic in

225
00:08:37,740 --> 00:08:38,640
um

226
00:08:38,640 --> 00:08:40,380
normally

227
00:08:40,380 --> 00:08:42,299
you would just see them using one URL

228
00:08:42,299 --> 00:08:43,919
and when it gets burned they just throw

229
00:08:43,919 --> 00:08:46,140
in another one but these applications

230
00:08:46,140 --> 00:08:49,140
were actually uh

231
00:08:49,140 --> 00:08:51,420
really frequently updating their command

232
00:08:51,420 --> 00:08:53,459
and control servers Sometimes using

233
00:08:53,459 --> 00:08:56,040
multiple at a time and so I just thought

234
00:08:56,040 --> 00:08:58,019
that was something I'd normally seen you

235
00:08:58,019 --> 00:08:59,820
know more with like Windows or Linux

236
00:08:59,820 --> 00:09:03,560
malware not not very typical

237
00:09:04,440 --> 00:09:05,279
um

238
00:09:05,279 --> 00:09:06,600
one of the things that it would

239
00:09:06,600 --> 00:09:08,279
initially update with once it was

240
00:09:08,279 --> 00:09:10,680
convinced that you know you weren't an

241
00:09:10,680 --> 00:09:11,700
emulator

242
00:09:11,700 --> 00:09:15,540
was that it would run these modules that

243
00:09:15,540 --> 00:09:17,640
allowed them to launch applications by

244
00:09:17,640 --> 00:09:21,420
specifying the uh the actual component

245
00:09:21,420 --> 00:09:22,800
name that I wanted to launch so it could

246
00:09:22,800 --> 00:09:24,420
launch an activity in another Android

247
00:09:24,420 --> 00:09:27,660
app or a service or send something to a

248
00:09:27,660 --> 00:09:30,240
broadcast receiver

249
00:09:30,240 --> 00:09:32,519
so the uh

250
00:09:32,519 --> 00:09:33,959
the applications that they were

251
00:09:33,959 --> 00:09:36,300
downloading were frequently

252
00:09:36,300 --> 00:09:38,160
these applications that actually had no

253
00:09:38,160 --> 00:09:40,200
user interface they were only able to be

254
00:09:40,200 --> 00:09:41,399
launched

255
00:09:41,399 --> 00:09:42,839
uh

256
00:09:42,839 --> 00:09:47,100
automatically buy these OTA applications

257
00:09:47,100 --> 00:09:50,640
so they would frequently contain code

258
00:09:50,640 --> 00:09:52,740
from families that we've seen uh you

259
00:09:52,740 --> 00:09:55,140
know on play store or

260
00:09:55,140 --> 00:09:55,980
um

261
00:09:55,980 --> 00:09:58,320
through other side loaded user space

262
00:09:58,320 --> 00:09:59,880
applications

263
00:09:59,880 --> 00:10:00,959
um some other some of the families we

264
00:10:00,959 --> 00:10:02,519
noticed that we've talked about before

265
00:10:02,519 --> 00:10:06,600
were things like snow fox and chamois

266
00:10:06,600 --> 00:10:08,660
um

267
00:10:09,240 --> 00:10:10,920
but in this case they would just take

268
00:10:10,920 --> 00:10:13,200
those sdks put them in a custom

269
00:10:13,200 --> 00:10:17,220
application that the user would never

270
00:10:17,220 --> 00:10:19,680
even see didn't have anything user

271
00:10:19,680 --> 00:10:20,660
facing

272
00:10:20,660 --> 00:10:23,600
but they all had these

273
00:10:23,600 --> 00:10:26,240
service or activity names

274
00:10:26,240 --> 00:10:30,300
that were all formatted the same way so

275
00:10:30,300 --> 00:10:31,560
you could you could tell these

276
00:10:31,560 --> 00:10:33,720
applications were all being distributed

277
00:10:33,720 --> 00:10:36,500
by the same person

278
00:10:40,200 --> 00:10:41,580
and so when you take a look at the code

279
00:10:41,580 --> 00:10:43,800
some of the things they would normally

280
00:10:43,800 --> 00:10:45,240
be doing would be like clicking on

281
00:10:45,240 --> 00:10:48,959
applications showing visible ads uh

282
00:10:48,959 --> 00:10:52,140
also doing install referrer fraud

283
00:10:52,140 --> 00:10:53,940
basically trying to take credit for when

284
00:10:53,940 --> 00:10:56,040
an application was installed

285
00:10:56,040 --> 00:10:57,779
even if they weren't the one who

286
00:10:57,779 --> 00:11:00,620
actually downloaded it

287
00:11:03,240 --> 00:11:05,880
another uh interesting thing that kind

288
00:11:05,880 --> 00:11:07,680
of came along

289
00:11:07,680 --> 00:11:09,660
as a side effect of this whole campaign

290
00:11:09,660 --> 00:11:13,140
was that OEM started introducing new

291
00:11:13,140 --> 00:11:14,519
framework code into the Android

292
00:11:14,519 --> 00:11:17,220
operating system on their builds and so

293
00:11:17,220 --> 00:11:19,980
they added a system service

294
00:11:19,980 --> 00:11:21,779
that could be called by applications

295
00:11:21,779 --> 00:11:24,860
that did all these

296
00:11:24,860 --> 00:11:27,959
privileged API calls and normally these

297
00:11:27,959 --> 00:11:30,060
are all things that would be guarded by

298
00:11:30,060 --> 00:11:31,620
sensitive permissions and are only

299
00:11:31,620 --> 00:11:34,560
accessible by pre-installed system

300
00:11:34,560 --> 00:11:37,019
applications but in this case any app

301
00:11:37,019 --> 00:11:38,579
could call them including the apps that

302
00:11:38,579 --> 00:11:40,440
they were downloading without requesting

303
00:11:40,440 --> 00:11:43,140
any of those custom permissions

304
00:11:43,140 --> 00:11:45,180
so this include things like the ability

305
00:11:45,180 --> 00:11:46,800
to install and uninstall other

306
00:11:46,800 --> 00:11:49,860
applications you could automatically

307
00:11:49,860 --> 00:11:51,360
Grant all the permissions that they were

308
00:11:51,360 --> 00:11:54,899
requesting you could

309
00:11:54,899 --> 00:11:57,360
enable individual components of an

310
00:11:57,360 --> 00:11:59,579
application or disable applications

311
00:11:59,579 --> 00:12:01,079
altogether

312
00:12:01,079 --> 00:12:05,220
and do things like access all of the

313
00:12:05,220 --> 00:12:06,660
system files that were written onto the

314
00:12:06,660 --> 00:12:07,620
device

315
00:12:07,620 --> 00:12:09,300
uh so we actually ended up reporting

316
00:12:09,300 --> 00:12:11,880
this as a vulnerability and disclosing

317
00:12:11,880 --> 00:12:13,320
this publicly so you can go to the link

318
00:12:13,320 --> 00:12:16,260
here and find more details about it and

319
00:12:16,260 --> 00:12:17,519
another thing that was interesting about

320
00:12:17,519 --> 00:12:19,920
this was that we started seeing this

321
00:12:19,920 --> 00:12:22,560
system service on applications that

322
00:12:22,560 --> 00:12:24,839
weren't even using the digitime OTA

323
00:12:24,839 --> 00:12:27,600
so some oems were introducing this

324
00:12:27,600 --> 00:12:30,000
higher up in their source code and then

325
00:12:30,000 --> 00:12:31,200
it just ended up being on all their

326
00:12:31,200 --> 00:12:32,339
devices

327
00:12:32,339 --> 00:12:35,640
so this system service ended up being on

328
00:12:35,640 --> 00:12:38,579
you know like a few hundred uh different

329
00:12:38,579 --> 00:12:40,560
device models

330
00:12:40,560 --> 00:12:42,180
um probably about four or five times

331
00:12:42,180 --> 00:12:43,740
more device models than we're actually

332
00:12:43,740 --> 00:12:47,180
using the digitime OTA

333
00:12:50,579 --> 00:12:52,680
once they noticed that we were actually

334
00:12:52,680 --> 00:12:56,639
detecting them they updated

335
00:12:56,639 --> 00:12:59,459
their whole framework to add a bunch of

336
00:12:59,459 --> 00:13:01,139
anti-analysis a bunch of debugging and

337
00:13:01,139 --> 00:13:02,399
unpacking

338
00:13:02,399 --> 00:13:05,339
so whereas before they just had this Lua

339
00:13:05,339 --> 00:13:06,720
framework that was packaged into the

340
00:13:06,720 --> 00:13:09,540
class that was all moved out of the

341
00:13:09,540 --> 00:13:11,399
application and elsewhere into the

342
00:13:11,399 --> 00:13:12,600
operating system

343
00:13:12,600 --> 00:13:15,240
so now the new applications would just

344
00:13:15,240 --> 00:13:18,480
call to a custom uh

345
00:13:18,480 --> 00:13:21,300
Android Java API that was in the

346
00:13:21,300 --> 00:13:22,560
framework code

347
00:13:22,560 --> 00:13:26,220
that would call over jni

348
00:13:26,220 --> 00:13:29,700
to a native library that was stored

349
00:13:29,700 --> 00:13:31,920
somewhere on the device usually they'd

350
00:13:31,920 --> 00:13:33,300
piggyback on something that was already

351
00:13:33,300 --> 00:13:35,399
existing so it'd be something like a

352
00:13:35,399 --> 00:13:37,980
mediatek or a Qualcomm library and they

353
00:13:37,980 --> 00:13:40,200
would add in some uh

354
00:13:40,200 --> 00:13:43,380
jni methods in there

355
00:13:43,380 --> 00:13:45,980
and then that would do probably the most

356
00:13:45,980 --> 00:13:49,019
emulator detection I've ever seen in one

357
00:13:49,019 --> 00:13:51,959
application or in one malware sample it

358
00:13:51,959 --> 00:13:53,399
checked for basically everything that

359
00:13:53,399 --> 00:13:55,440
you can find anywhere on GitHub or on

360
00:13:55,440 --> 00:13:57,600
the Internet on any you know blog post

361
00:13:57,600 --> 00:13:58,980
checking all the different possible

362
00:13:58,980 --> 00:14:01,639
system properties checking the chipset

363
00:14:01,639 --> 00:14:05,820
uh checking for things like Frida or

364
00:14:05,820 --> 00:14:07,220
exposed

365
00:14:07,220 --> 00:14:09,899
checking for virtualbox basically doing

366
00:14:09,899 --> 00:14:11,579
anything they could possibly check to

367
00:14:11,579 --> 00:14:14,279
see is this a real device or not

368
00:14:14,279 --> 00:14:17,399
once they were satisfied

369
00:14:17,399 --> 00:14:20,279
finally they would actually unpack some

370
00:14:20,279 --> 00:14:22,139
encrypted Dex file

371
00:14:22,139 --> 00:14:25,320
from uh from library and they would

372
00:14:25,320 --> 00:14:28,800
actually save it to the cache the Dex

373
00:14:28,800 --> 00:14:31,500
execute or the Java executable cache on

374
00:14:31,500 --> 00:14:33,779
the device so something that's not even

375
00:14:33,779 --> 00:14:37,160
normally accessible to apps

376
00:14:37,980 --> 00:14:42,360
and then finally that from would decrypt

377
00:14:42,360 --> 00:14:44,579
and execute the original Lua code that

378
00:14:44,579 --> 00:14:48,500
we saw so they would generate this key

379
00:14:48,540 --> 00:14:51,240
and then sorry generate this key and

380
00:14:51,240 --> 00:14:54,899
then do xor decryption of uh the Lua

381
00:14:54,899 --> 00:14:57,120
code and end up executing

382
00:14:57,120 --> 00:14:59,899
the same package that we saw before

383
00:14:59,899 --> 00:15:02,160
so this was interesting because we

384
00:15:02,160 --> 00:15:03,420
actually reached out to digitime

385
00:15:03,420 --> 00:15:05,699
originally for the first version and the

386
00:15:05,699 --> 00:15:07,320
answer we got was oh this is actually a

387
00:15:07,320 --> 00:15:09,240
module for our customers so any apps

388
00:15:09,240 --> 00:15:10,620
that you're seeing are being downloaded

389
00:15:10,620 --> 00:15:13,260
by the oems which obviously was not true

390
00:15:13,260 --> 00:15:16,380
because all this apps were the same

391
00:15:16,380 --> 00:15:18,779
across all devices and the oems had no

392
00:15:18,779 --> 00:15:20,040
knowledge of this

393
00:15:20,040 --> 00:15:22,199
but for some reason people kept

394
00:15:22,199 --> 00:15:25,019
partnering with them and I

395
00:15:25,019 --> 00:15:27,060
went on to keep using this next version

396
00:15:27,060 --> 00:15:29,760
of this app but I think so far we have

397
00:15:29,760 --> 00:15:32,940
not seen a version three so okay

398
00:15:32,940 --> 00:15:34,440
I'll pass it over to Luke I should talk

399
00:15:34,440 --> 00:15:36,839
about the second case study

400
00:15:36,839 --> 00:15:38,040
thanks

401
00:15:38,040 --> 00:15:40,860
um I'm slowly losing my voice so think

402
00:15:40,860 --> 00:15:44,040
of it as a built-in talk ending point

403
00:15:44,040 --> 00:15:47,060
when I lose my voice completely but

404
00:15:47,060 --> 00:15:50,100
I will talk about the second OTA app

405
00:15:50,100 --> 00:15:52,980
that is not connected to the first case

406
00:15:52,980 --> 00:15:55,079
study at all it's just

407
00:15:55,079 --> 00:15:58,920
it was built for the same purpose but uh

408
00:15:58,920 --> 00:16:00,420
by a completely different company and

409
00:16:00,420 --> 00:16:03,300
using completely different methods so

410
00:16:03,300 --> 00:16:06,480
um this one for this one we only had one

411
00:16:06,480 --> 00:16:08,459
external report that we are aware of

412
00:16:08,459 --> 00:16:12,180
this was by Malwarebytes

413
00:16:12,180 --> 00:16:16,500
um and uh it dealt with some mobile

414
00:16:16,500 --> 00:16:19,500
phones in Germany specifically that had

415
00:16:19,500 --> 00:16:21,839
the previous told Auto installer they

416
00:16:21,839 --> 00:16:23,519
call it an auto installer but it's a

417
00:16:23,519 --> 00:16:27,180
part of the OTA app so again same story

418
00:16:27,180 --> 00:16:29,760
there's the OTA path that updates the

419
00:16:29,760 --> 00:16:32,040
system image and that's fairly

420
00:16:32,040 --> 00:16:34,620
straightforward in the year and it's

421
00:16:34,620 --> 00:16:36,120
handled by the Android operating system

422
00:16:36,120 --> 00:16:38,339
but there's additional functionality

423
00:16:38,339 --> 00:16:42,000
that downloads apps both updates and

424
00:16:42,000 --> 00:16:43,860
malware

425
00:16:43,860 --> 00:16:46,800
uh and in this case the Malwarebytes

426
00:16:46,800 --> 00:16:49,380
blog post uh presented just one case we

427
00:16:49,380 --> 00:16:50,579
were able to find three different

428
00:16:50,579 --> 00:16:52,079
versions so I will talk about three

429
00:16:52,079 --> 00:16:54,480
different versions of the same uh of the

430
00:16:54,480 --> 00:16:57,240
same malware so the first version uh it

431
00:16:57,240 --> 00:16:59,880
had an ad framework and that dropper by

432
00:16:59,880 --> 00:17:01,860
that I mean that the ad framework was

433
00:17:01,860 --> 00:17:04,500
built into the OTA app it wasn't dropped

434
00:17:04,500 --> 00:17:07,020
but it also had the ability to drop

435
00:17:07,020 --> 00:17:10,500
other apps and uh instantly run even

436
00:17:10,500 --> 00:17:13,459
more stuff so you can see that there is

437
00:17:13,459 --> 00:17:17,059
a really weird file in assets called

438
00:17:17,059 --> 00:17:22,260
input default 4.0 for 10. and this is

439
00:17:22,260 --> 00:17:25,500
the default jar file that will have that

440
00:17:25,500 --> 00:17:27,240
ad framework and also with the

441
00:17:27,240 --> 00:17:30,000
functionality of a dropper so this was

442
00:17:30,000 --> 00:17:31,919
loaded and then

443
00:17:31,919 --> 00:17:34,980
it had methods to download more decks

444
00:17:34,980 --> 00:17:38,520
code download jars install apps but also

445
00:17:38,520 --> 00:17:41,280
display ads so it was fairly

446
00:17:41,280 --> 00:17:42,840
self-contained

447
00:17:42,840 --> 00:17:45,840
um apart from that it had the update

448
00:17:45,840 --> 00:17:47,780
functionality so it could update itself

449
00:17:47,780 --> 00:17:51,480
obviously to a newer version so fairly

450
00:17:51,480 --> 00:17:53,220
basic and you can see that the method

451
00:17:53,220 --> 00:17:55,880
names are um well

452
00:17:55,880 --> 00:17:58,440
self-describing really I didn't change

453
00:17:58,440 --> 00:18:00,600
the names uh so this is these are the

454
00:18:00,600 --> 00:18:03,840
names that they've used when they

455
00:18:03,840 --> 00:18:07,200
um compiled this next file the features

456
00:18:07,200 --> 00:18:09,419
were kind of interesting so the first

457
00:18:09,419 --> 00:18:11,580
feature was that they have a very

458
00:18:11,580 --> 00:18:14,160
opportunistic use of SEO so they didn't

459
00:18:14,160 --> 00:18:15,539
try to root the phone they didn't have

460
00:18:15,539 --> 00:18:18,120
exploits they didn't install Su if Su

461
00:18:18,120 --> 00:18:20,220
was there so if you had your phone

462
00:18:20,220 --> 00:18:22,919
rooted and you had an Su binary they

463
00:18:22,919 --> 00:18:25,260
would use it but they wouldn't try to do

464
00:18:25,260 --> 00:18:27,299
it themselves so we can see there are

465
00:18:27,299 --> 00:18:29,700
two paths on the right hand side one is

466
00:18:29,700 --> 00:18:32,940
the regular path that installs an app so

467
00:18:32,940 --> 00:18:35,160
it will trigger a regular install flow

468
00:18:35,160 --> 00:18:37,919
and user would be aware of that so it

469
00:18:37,919 --> 00:18:40,559
wasn't very fancy in that way

470
00:18:40,559 --> 00:18:43,860
um but if if it found the Su by binary

471
00:18:43,860 --> 00:18:46,320
there is a second path and you can see

472
00:18:46,320 --> 00:18:49,919
it just invokes PM install so if the

473
00:18:49,919 --> 00:18:51,780
phone is rooted and has the Su binary

474
00:18:51,780 --> 00:18:54,380
user won't see the install happening

475
00:18:54,380 --> 00:18:56,880
another interesting feature was a

476
00:18:56,880 --> 00:18:59,460
complete lack of TLS validation so they

477
00:18:59,460 --> 00:19:03,240
connected over https or TLS and they

478
00:19:03,240 --> 00:19:06,059
didn't validate the the server

479
00:19:06,059 --> 00:19:07,740
certificate in any way so you could just

480
00:19:07,740 --> 00:19:09,660
connect to any other server and

481
00:19:09,660 --> 00:19:12,120
intercept the traffic it didn't have to

482
00:19:12,120 --> 00:19:14,400
be signed by a known CA or anything like

483
00:19:14,400 --> 00:19:15,720
that

484
00:19:15,720 --> 00:19:18,600
um which is fairly interesting but it's

485
00:19:18,600 --> 00:19:20,720
also a fairly

486
00:19:20,720 --> 00:19:23,520
common mistake that some developers do

487
00:19:23,520 --> 00:19:25,740
that they don't bother to validate the

488
00:19:25,740 --> 00:19:29,400
certificate when they connect over TLS

489
00:19:29,400 --> 00:19:32,460
so then uh when we started detecting V1

490
00:19:32,460 --> 00:19:35,580
same with digitime they noticed that we

491
00:19:35,580 --> 00:19:37,200
were detecting them and they changed the

492
00:19:37,200 --> 00:19:39,900
version the interesting thing about this

493
00:19:39,900 --> 00:19:41,520
particular malware is that it had three

494
00:19:41,520 --> 00:19:43,799
versions and all three versions are

495
00:19:43,799 --> 00:19:45,780
completely different it's like that you

496
00:19:45,780 --> 00:19:47,580
rewrote the thing from scratch or at

497
00:19:47,580 --> 00:19:49,679
least I cannot find a like very common

498
00:19:49,679 --> 00:19:51,120
patterns

499
00:19:51,120 --> 00:19:53,880
um they use similar CNC so that part

500
00:19:53,880 --> 00:19:56,100
stays the same but the code is like we

501
00:19:56,100 --> 00:19:58,140
abandon all of it and we will write it

502
00:19:58,140 --> 00:20:00,780
again from scratch which makes the

503
00:20:00,780 --> 00:20:02,820
detection very difficult and it's also

504
00:20:02,820 --> 00:20:04,380
something that you don't often see with

505
00:20:04,380 --> 00:20:07,820
malware at least they try to you know

506
00:20:07,820 --> 00:20:09,900
retain some of the code they already

507
00:20:09,900 --> 00:20:12,840
wrote to have less work but this one was

508
00:20:12,840 --> 00:20:15,120
just oh we will start again

509
00:20:15,120 --> 00:20:16,679
um so this one had a bit more

510
00:20:16,679 --> 00:20:19,620
obfuscation you can see the class names

511
00:20:19,620 --> 00:20:22,559
using are using UTF characters so it's

512
00:20:22,559 --> 00:20:25,860
not so easy to reference them

513
00:20:25,860 --> 00:20:28,080
um the names are also obfuscated so it

514
00:20:28,080 --> 00:20:29,700
wasn't as easy as the previous this

515
00:20:29,700 --> 00:20:31,200
version whether you could basically

516
00:20:31,200 --> 00:20:32,880
guess what the method is doing based on

517
00:20:32,880 --> 00:20:34,640
the method name

518
00:20:34,640 --> 00:20:37,980
and the app dropper functionality also

519
00:20:37,980 --> 00:20:40,080
got updated so we can now install apps

520
00:20:40,080 --> 00:20:42,000
using an intent and you can see there's

521
00:20:42,000 --> 00:20:43,500
a package name version version code

522
00:20:43,500 --> 00:20:46,500
download URL so we can pass everything

523
00:20:46,500 --> 00:20:48,900
you want to that app and it will do the

524
00:20:48,900 --> 00:20:50,700
install the download and installation

525
00:20:50,700 --> 00:20:53,960
for you again because it's an OTA app

526
00:20:53,960 --> 00:20:57,299
it's supposed to install apps because

527
00:20:57,299 --> 00:20:59,460
it's supposed to install app updates

528
00:20:59,460 --> 00:21:02,400
right this is what you expect from an

529
00:21:02,400 --> 00:21:06,000
OTA app so it's using the existing

530
00:21:06,000 --> 00:21:07,620
permission that it has for different

531
00:21:07,620 --> 00:21:10,440
reasons to install apps

532
00:21:10,440 --> 00:21:13,320
to install malware apps that users don't

533
00:21:13,320 --> 00:21:15,980
want to not only system updates but also

534
00:21:15,980 --> 00:21:17,960
also malware

535
00:21:17,960 --> 00:21:21,059
they retain some of the features the the

536
00:21:21,059 --> 00:21:23,039
most prominent one that you retained is

537
00:21:23,039 --> 00:21:25,380
the complete lack of validation of the

538
00:21:25,380 --> 00:21:28,620
TLs certificate so this kind of stays

539
00:21:28,620 --> 00:21:31,740
the same alongside the versions they

540
00:21:31,740 --> 00:21:33,480
might have actually copied the code here

541
00:21:33,480 --> 00:21:36,299
so yeah it doesn't do anything

542
00:21:36,299 --> 00:21:40,080
um the other thing they did is they

543
00:21:40,080 --> 00:21:43,980
encoded the CNC URLs as base64

544
00:21:43,980 --> 00:21:45,900
um and this screenshots all screenshot

545
00:21:45,900 --> 00:21:48,299
always reminds me of a kind of useless

546
00:21:48,299 --> 00:21:50,880
knowledge that I keep in my mind and I'm

547
00:21:50,880 --> 00:21:52,559
pretty sure a lot of you keep in your

548
00:21:52,559 --> 00:21:57,720
minds so when you see ahr uh you will

549
00:21:57,720 --> 00:22:00,900
probably think of HTTP or https because

550
00:22:00,900 --> 00:22:03,780
that's how the URLs URLs start and it's

551
00:22:03,780 --> 00:22:06,299
just by 64 there isn't any fancy thing

552
00:22:06,299 --> 00:22:08,520
so if you debase 60 for it you will find

553
00:22:08,520 --> 00:22:10,799
the CNC address and there are several of

554
00:22:10,799 --> 00:22:11,880
them

555
00:22:11,880 --> 00:22:14,000
so that they can use backups

556
00:22:14,000 --> 00:22:16,260
interestingly it also starts activities

557
00:22:16,260 --> 00:22:19,980
so the problem with installing an app is

558
00:22:19,980 --> 00:22:21,960
whenever you install a new app on

559
00:22:21,960 --> 00:22:25,020
Android it won't start automatically

560
00:22:25,020 --> 00:22:28,260
and it has the app itself has no way of

561
00:22:28,260 --> 00:22:30,539
starting automatically at least then I'm

562
00:22:30,539 --> 00:22:33,240
I'm aware of so first time you install

563
00:22:33,240 --> 00:22:35,039
it you have to click on an icon usually

564
00:22:35,039 --> 00:22:37,140
that's what users do to start the app

565
00:22:37,140 --> 00:22:41,100
and then the app starts itself so in in

566
00:22:41,100 --> 00:22:43,260
order to install the app successfully

567
00:22:43,260 --> 00:22:46,440
Redstone uh OTA not only had to download

568
00:22:46,440 --> 00:22:50,900
it and install it it also

569
00:22:50,900 --> 00:22:54,840
was supposed to start it so it got the

570
00:22:54,840 --> 00:22:57,179
activity name for the thing it has to

571
00:22:57,179 --> 00:22:58,799
start

572
00:22:58,799 --> 00:23:02,640
um and then when we started detecting V2

573
00:23:02,640 --> 00:23:04,760
obviously they went

574
00:23:04,760 --> 00:23:08,460
they rewrote the whole thing again and

575
00:23:08,460 --> 00:23:13,679
we got the V3 V3 had a custom decks

576
00:23:13,679 --> 00:23:17,039
obfuscated format or APK obfuscated

577
00:23:17,039 --> 00:23:20,159
format and you can see that the class

578
00:23:20,159 --> 00:23:22,919
names are still Unicode characters so

579
00:23:22,919 --> 00:23:24,780
it's difficult to

580
00:23:24,780 --> 00:23:29,340
um to reference them the thing that

581
00:23:29,340 --> 00:23:31,440
really stands out and I forgot to

582
00:23:31,440 --> 00:23:33,299
mention it with previous versions but it

583
00:23:33,299 --> 00:23:35,700
stayed consistent along all the versions

584
00:23:35,700 --> 00:23:38,100
is that you have this part of the code

585
00:23:38,100 --> 00:23:40,500
that is that looks very clean right has

586
00:23:40,500 --> 00:23:42,480
proper names and all that that's the top

587
00:23:42,480 --> 00:23:44,640
part and this is the part responsible

588
00:23:44,640 --> 00:23:46,860
for the OTA and for the system updates

589
00:23:46,860 --> 00:23:49,080
and for everything that they were

590
00:23:49,080 --> 00:23:51,360
supposed to do and then you have a

591
00:23:51,360 --> 00:23:55,080
separate part that is obfuscated and is

592
00:23:55,080 --> 00:23:57,780
doing the malware stuff so obfuscation

593
00:23:57,780 --> 00:24:00,780
is good but also when you see an app

594
00:24:00,780 --> 00:24:02,880
that has a clean part and the obfuscater

595
00:24:02,880 --> 00:24:05,159
part your brain goes what's the

596
00:24:05,159 --> 00:24:07,200
obfuscated part about right why isn't it

597
00:24:07,200 --> 00:24:09,419
all clean code with proper function

598
00:24:09,419 --> 00:24:11,640
names and and class names

599
00:24:11,640 --> 00:24:13,700
but they kept this scheme of having

600
00:24:13,700 --> 00:24:16,980
proper part legitimate part and having

601
00:24:16,980 --> 00:24:19,200
the malicious part kind of separate

602
00:24:19,200 --> 00:24:20,820
obviously there has to be some kind of

603
00:24:20,820 --> 00:24:23,340
an overlap but it's mostly separate and

604
00:24:23,340 --> 00:24:25,740
in this case the the format was kind was

605
00:24:25,740 --> 00:24:27,720
also interesting so it started with the

606
00:24:27,720 --> 00:24:31,320
Magic The Magic was cortex one or cortex

607
00:24:31,320 --> 00:24:35,940
two just in ASCII and then you had the

608
00:24:35,940 --> 00:24:37,559
file size

609
00:24:37,559 --> 00:24:41,100
um and then you had the sort APK so the

610
00:24:41,100 --> 00:24:43,740
obfuscation method was just starting

611
00:24:43,740 --> 00:24:47,100
and as far as I can tell the difference

612
00:24:47,100 --> 00:24:49,320
between cortex one and cortex 2 was the

613
00:24:49,320 --> 00:24:50,940
sore key

614
00:24:50,940 --> 00:24:52,140
um I'm not sure if there was any other

615
00:24:52,140 --> 00:24:55,500
difference and when you unpacked it or

616
00:24:55,500 --> 00:24:58,020
the obfuscated it

617
00:24:58,020 --> 00:25:01,620
um then you get this code with classes

618
00:25:01,620 --> 00:25:03,360
that decks and manifests so we got the

619
00:25:03,360 --> 00:25:06,059
kind of an APK file and inside of it it

620
00:25:06,059 --> 00:25:08,340
was there was classes the decks and you

621
00:25:08,340 --> 00:25:10,020
can see that the method names here are

622
00:25:10,020 --> 00:25:13,679
well they are non-descriptive

623
00:25:13,679 --> 00:25:15,840
um you still have a class that's named a

624
00:25:15,840 --> 00:25:18,419
but they don't use the same obfuscation

625
00:25:18,419 --> 00:25:20,760
that the code that loaded the decks used

626
00:25:20,760 --> 00:25:23,059
so they don't use Unicode they just use

627
00:25:23,059 --> 00:25:25,279
a regular

628
00:25:25,279 --> 00:25:28,760
names for that

629
00:25:29,340 --> 00:25:31,919
um and this is what the CNC sends back

630
00:25:31,919 --> 00:25:36,299
so one of the cnc's uh in one case we

631
00:25:36,299 --> 00:25:38,640
were able to uh get the traffic that

632
00:25:38,640 --> 00:25:41,279
came from the U.S from the CNC to the

633
00:25:41,279 --> 00:25:44,400
device and you have the package name so

634
00:25:44,400 --> 00:25:47,100
this is the app name that was installed

635
00:25:47,100 --> 00:25:48,840
and you can see there is a bunch of apps

636
00:25:48,840 --> 00:25:51,120
that were installed here then you have

637
00:25:51,120 --> 00:25:55,740
an action action is when the app has to

638
00:25:55,740 --> 00:26:00,539
be started so the OTA was responsible

639
00:26:00,539 --> 00:26:03,480
for making the app persist on the device

640
00:26:03,480 --> 00:26:06,360
or run persistently but also reinstall

641
00:26:06,360 --> 00:26:09,120
it when the app was removed so in most

642
00:26:09,120 --> 00:26:11,159
cases you have something like user

643
00:26:11,159 --> 00:26:14,580
present or screen on which means that

644
00:26:14,580 --> 00:26:16,799
the user is kind of engaging with the

645
00:26:16,799 --> 00:26:19,860
phone and that's when you start the the

646
00:26:19,860 --> 00:26:22,260
main activity it's similar to digit time

647
00:26:22,260 --> 00:26:25,020
and similar to what Alex said the apps

648
00:26:25,020 --> 00:26:28,260
are had less there's no

649
00:26:28,260 --> 00:26:28,799
um

650
00:26:28,799 --> 00:26:31,980
user interface to speak of users cannot

651
00:26:31,980 --> 00:26:34,799
really interact with the app in any way

652
00:26:34,799 --> 00:26:37,140
except for maybe when it displays the

653
00:26:37,140 --> 00:26:40,740
ads but you wouldn't see an icon or

654
00:26:40,740 --> 00:26:42,960
activity this was all done

655
00:26:42,960 --> 00:26:44,820
programmatically

656
00:26:44,820 --> 00:26:48,480
um so um yeah I just want to repeat

657
00:26:48,480 --> 00:26:50,580
again there's a bunch of apps here so

658
00:26:50,580 --> 00:26:52,559
it's it's really

659
00:26:52,559 --> 00:26:55,200
um it's really a lot it's not it's not

660
00:26:55,200 --> 00:26:57,779
just one and since we're talking about

661
00:26:57,779 --> 00:26:59,100
the apps

662
00:26:59,100 --> 00:27:01,919
the payload generally falls in the same

663
00:27:01,919 --> 00:27:04,200
category as with digit times so it will

664
00:27:04,200 --> 00:27:06,419
be some kind of an ad fraud whether it's

665
00:27:06,419 --> 00:27:08,340
a click fraud so clicking on the ads

666
00:27:08,340 --> 00:27:11,460
without user interaction

667
00:27:11,460 --> 00:27:13,919
um ad spam which means that the users

668
00:27:13,919 --> 00:27:16,679
will just see ads

669
00:27:16,679 --> 00:27:20,279
um all the time or um or very very often

670
00:27:20,279 --> 00:27:24,620
there are hidden ads these are meant to

671
00:27:24,620 --> 00:27:27,900
come get impressions from users without

672
00:27:27,900 --> 00:27:29,700
actually displaying the ad to the user

673
00:27:29,700 --> 00:27:34,200
so it's meant to trick The Advertiser to

674
00:27:34,200 --> 00:27:36,299
think that the ad was displayed to the

675
00:27:36,299 --> 00:27:38,580
user and the ad isn't displayed to the

676
00:27:38,580 --> 00:27:40,940
user so it's usually like a

677
00:27:40,940 --> 00:27:44,600
unseen activity or transparent activity

678
00:27:44,600 --> 00:27:47,100
and there's also disruptive advertising

679
00:27:47,100 --> 00:27:48,900
this means that when the user is doing

680
00:27:48,900 --> 00:27:51,179
something is trying to browse the

681
00:27:51,179 --> 00:27:53,220
internet or whatever whenever you have

682
00:27:53,220 --> 00:27:55,020
the user attention you're going to

683
00:27:55,020 --> 00:27:57,179
display the ad which is a terrible

684
00:27:57,179 --> 00:27:58,860
experience for users you're just trying

685
00:27:58,860 --> 00:28:01,200
to to I don't know launch a web browser

686
00:28:01,200 --> 00:28:03,740
and the first thing you see is an ad

687
00:28:03,740 --> 00:28:06,419
and this is an example of a click fraud

688
00:28:06,419 --> 00:28:08,460
app that was heavily using randomization

689
00:28:08,460 --> 00:28:10,500
so if you have a click fraud that tries

690
00:28:10,500 --> 00:28:11,880
to click on an ad without user

691
00:28:11,880 --> 00:28:14,940
interaction you would usually have

692
00:28:14,940 --> 00:28:17,820
some kind of randomization because

693
00:28:17,820 --> 00:28:20,279
otherwise the server side can easily

694
00:28:20,279 --> 00:28:23,700
detect that the app is clicking on on

695
00:28:23,700 --> 00:28:26,400
the ad user will usually click in

696
00:28:26,400 --> 00:28:28,740
different places on the ad the user

697
00:28:28,740 --> 00:28:30,480
usually won't click on the center of the

698
00:28:30,480 --> 00:28:33,779
ad every single time that's just not how

699
00:28:33,779 --> 00:28:36,240
users click on ads

700
00:28:36,240 --> 00:28:38,039
um so you have to use some kind of

701
00:28:38,039 --> 00:28:39,260
randomization

702
00:28:39,260 --> 00:28:41,700
don't tell that to anyone but the users

703
00:28:41,700 --> 00:28:44,820
also don't randomly click on ads which

704
00:28:44,820 --> 00:28:46,740
when you see that there are random

705
00:28:46,740 --> 00:28:48,360
clicks you can you can actually do

706
00:28:48,360 --> 00:28:50,039
something about that

707
00:28:50,039 --> 00:28:51,059
um

708
00:28:51,059 --> 00:28:52,440
so

709
00:28:52,440 --> 00:28:56,640
um they had a really interesting tricks

710
00:28:56,640 --> 00:28:59,880
um these are tricks from the payload so

711
00:28:59,880 --> 00:29:02,340
most likely

712
00:29:02,340 --> 00:29:05,159
um even though I don't know that for

713
00:29:05,159 --> 00:29:07,440
sure but most likely the apps that were

714
00:29:07,440 --> 00:29:09,480
downloaded were written by someone else

715
00:29:09,480 --> 00:29:11,640
and they just paid for instance right so

716
00:29:11,640 --> 00:29:13,380
it's not necessarily the same developer

717
00:29:13,380 --> 00:29:16,860
and the payload apps the apps that did

718
00:29:16,860 --> 00:29:19,080
some kind of an advert had really

719
00:29:19,080 --> 00:29:21,480
interesting tricks in them so the thing

720
00:29:21,480 --> 00:29:23,240
that you can see on their upper right

721
00:29:23,240 --> 00:29:28,140
it's not only an icon this PNG file has

722
00:29:28,140 --> 00:29:30,419
also embedded a jar file which is sort

723
00:29:30,419 --> 00:29:32,940
using a key that's also in the PNG file

724
00:29:32,940 --> 00:29:36,419
so it displays the wrench but if you try

725
00:29:36,419 --> 00:29:38,340
to parse it you can get a DEX file out

726
00:29:38,340 --> 00:29:40,640
of it as well

727
00:29:40,640 --> 00:29:45,179
this is I guess a method to

728
00:29:45,179 --> 00:29:48,240
make us not reverse engineer the app I

729
00:29:48,240 --> 00:29:49,679
never understood this because the PNG

730
00:29:49,679 --> 00:29:52,260
file list is huge for a range

731
00:29:52,260 --> 00:29:54,720
um for an image of a range but um

732
00:29:54,720 --> 00:29:57,779
yeah and there are counters that make

733
00:29:57,779 --> 00:29:59,820
sure that the ads aren't displayed too

734
00:29:59,820 --> 00:30:01,380
often

735
00:30:01,380 --> 00:30:02,460
um

736
00:30:02,460 --> 00:30:05,279
I would like to think it's for user

737
00:30:05,279 --> 00:30:07,620
experience it's probably more that the

738
00:30:07,620 --> 00:30:09,899
server will throttle you and detect that

739
00:30:09,899 --> 00:30:11,220
you're doing out front if you display

740
00:30:11,220 --> 00:30:14,940
ads too often right so not single device

741
00:30:14,940 --> 00:30:17,880
shooting display in hundreds of ads per

742
00:30:17,880 --> 00:30:20,340
minute right it's just not how ads work

743
00:30:20,340 --> 00:30:23,039
so they make sure that they stay under

744
00:30:23,039 --> 00:30:26,000
the radar and are not easily detected by

745
00:30:26,000 --> 00:30:28,320
the other networks that they are trying

746
00:30:28,320 --> 00:30:29,580
to abuse

747
00:30:29,580 --> 00:30:32,220
but the most interesting thing to me was

748
00:30:32,220 --> 00:30:34,020
the way that you were trying to get the

749
00:30:34,020 --> 00:30:35,820
top activity

750
00:30:35,820 --> 00:30:38,159
um in recent Android versions

751
00:30:38,159 --> 00:30:40,640
um almost every

752
00:30:40,640 --> 00:30:45,000
version that that's that was released

753
00:30:45,000 --> 00:30:47,100
recently

754
00:30:47,100 --> 00:30:48,840
um you cannot get the top activity

755
00:30:48,840 --> 00:30:50,640
that's running you cannot get the top up

756
00:30:50,640 --> 00:30:53,100
that user is interacting with if you're

757
00:30:53,100 --> 00:30:55,919
not the top Hub itself

758
00:30:55,919 --> 00:30:59,059
um so they will try to get it

759
00:30:59,059 --> 00:31:02,220
to figure out what the user is doing so

760
00:31:02,220 --> 00:31:04,260
that they can display ads right so if

761
00:31:04,260 --> 00:31:06,960
the user is opening a browser they can

762
00:31:06,960 --> 00:31:08,760
obviously display ads because the user

763
00:31:08,760 --> 00:31:10,620
is trying to engage with the phone so

764
00:31:10,620 --> 00:31:13,200
they know that and getting the top

765
00:31:13,200 --> 00:31:16,140
activity is just the thing that for the

766
00:31:16,140 --> 00:31:19,140
Upstream to are trying to do and the way

767
00:31:19,140 --> 00:31:21,059
they were trying to circumvent that

768
00:31:21,059 --> 00:31:22,980
there's no API call that allows you to

769
00:31:22,980 --> 00:31:25,380
do that is they first

770
00:31:25,380 --> 00:31:28,440
start the PS command then they dipped

771
00:31:28,440 --> 00:31:31,260
the list from the previous PS command so

772
00:31:31,260 --> 00:31:33,419
they had to do it twice so they were

773
00:31:33,419 --> 00:31:34,919
looking for a new process that was

774
00:31:34,919 --> 00:31:37,740
started then they removed all the

775
00:31:37,740 --> 00:31:39,299
processes with names that are not

776
00:31:39,299 --> 00:31:41,520
starting with com dot

777
00:31:41,520 --> 00:31:43,140
um this is to get rid of system

778
00:31:43,140 --> 00:31:45,419
processes although

779
00:31:45,419 --> 00:31:47,820
Android packages don't always start with

780
00:31:47,820 --> 00:31:50,700
com dot especially if you're not in the

781
00:31:50,700 --> 00:31:53,419
US or English-speaking country

782
00:31:53,419 --> 00:31:56,640
then they had hard-coded list of

783
00:31:56,640 --> 00:31:58,440
processes that they didn't want to see

784
00:31:58,440 --> 00:32:00,600
so they removed them of the list as well

785
00:32:00,600 --> 00:32:03,419
and then they get get got the process

786
00:32:03,419 --> 00:32:06,000
with the highest process ID because you

787
00:32:06,000 --> 00:32:07,679
know the highest processor ID means it

788
00:32:07,679 --> 00:32:09,500
was recently started

789
00:32:09,500 --> 00:32:12,720
and as a homework to all of you you can

790
00:32:12,720 --> 00:32:15,000
all figure out why this goes wrong so

791
00:32:15,000 --> 00:32:17,580
many times in so many cases and you

792
00:32:17,580 --> 00:32:19,559
cannot really get the top activity out

793
00:32:19,559 --> 00:32:21,059
of that

794
00:32:21,059 --> 00:32:24,360
um but yeah they were at least trying

795
00:32:24,360 --> 00:32:26,340
um or copied it over from the internet I

796
00:32:26,340 --> 00:32:27,659
don't know

797
00:32:27,659 --> 00:32:31,440
um okay so uh last couple of minutes I

798
00:32:31,440 --> 00:32:33,539
will tell you how we are dealing with

799
00:32:33,539 --> 00:32:36,840
these OTA apps so Oda apps are usually

800
00:32:36,840 --> 00:32:39,120
pre-installed and the thing with OTA

801
00:32:39,120 --> 00:32:41,220
apps is that they have these two paths

802
00:32:41,220 --> 00:32:42,899
right so users still want to get system

803
00:32:42,899 --> 00:32:44,340
updates obviously they want to get

804
00:32:44,340 --> 00:32:46,500
security updates and always updates but

805
00:32:46,500 --> 00:32:49,020
they don't want to get malware with it

806
00:32:49,020 --> 00:32:50,580
so

807
00:32:50,580 --> 00:32:54,240
um we we scan all the devices that have

808
00:32:54,240 --> 00:32:56,399
Google Apps before the device or an

809
00:32:56,399 --> 00:32:59,580
update today to that device is released

810
00:32:59,580 --> 00:33:02,159
they are scanned using

811
00:33:02,159 --> 00:33:04,559
a bunch of tests which are done either

812
00:33:04,559 --> 00:33:06,360
on device or on the system image it

813
00:33:06,360 --> 00:33:08,059
depends on the test type

814
00:33:08,059 --> 00:33:12,059
and the tests are not necessarily only

815
00:33:12,059 --> 00:33:14,700
for security reasons some of them are

816
00:33:14,700 --> 00:33:17,100
for compatibility reasons so they are

817
00:33:17,100 --> 00:33:18,899
testing different things whether the API

818
00:33:18,899 --> 00:33:20,460
is working correctly whether the

819
00:33:20,460 --> 00:33:22,919
hardware is working correctly but the

820
00:33:22,919 --> 00:33:24,899
one that's most interesting to us at

821
00:33:24,899 --> 00:33:27,539
least is BTS which stands for build test

822
00:33:27,539 --> 00:33:30,000
suite and that's the test Suite that

823
00:33:30,000 --> 00:33:32,000
scans for malware

824
00:33:32,000 --> 00:33:34,799
and we scan the system images not only

825
00:33:34,799 --> 00:33:37,140
by scanning the apps but we also scan

826
00:33:37,140 --> 00:33:38,820
the binaries and everything else is on

827
00:33:38,820 --> 00:33:41,580
the system image and then when the test

828
00:33:41,580 --> 00:33:44,039
or the scan is done then the device can

829
00:33:44,039 --> 00:33:46,919
be launched so it has to pass all of

830
00:33:46,919 --> 00:33:49,200
these tests including a test for malware

831
00:33:49,200 --> 00:33:52,440
and this is how we detect OTA so if it

832
00:33:52,440 --> 00:33:53,460
has the

833
00:33:53,460 --> 00:33:55,740
OTA that we deem to be malicious that

834
00:33:55,740 --> 00:33:58,260
device cannot be released and we need a

835
00:33:58,260 --> 00:34:01,080
second system image with either a clean

836
00:34:01,080 --> 00:34:04,500
version of the OTA or without that app

837
00:34:04,500 --> 00:34:06,240
at all

838
00:34:06,240 --> 00:34:09,418
and finally some stats for you for the

839
00:34:09,418 --> 00:34:12,899
last calendar year so we protect over 3

840
00:34:12,899 --> 00:34:15,839
billion devices uh Android devices that

841
00:34:15,839 --> 00:34:17,699
have Google Play on them have a thing

842
00:34:17,699 --> 00:34:19,379
called Google Play protect which scans

843
00:34:19,379 --> 00:34:23,099
the apps and removes malware or asks you

844
00:34:23,099 --> 00:34:24,619
to remove malware

845
00:34:24,619 --> 00:34:27,179
in the last calendar year we scanned

846
00:34:27,179 --> 00:34:29,339
over 4 million pre-installed apps that

847
00:34:29,339 --> 00:34:32,899
were on I over 170 000 system images

848
00:34:32,899 --> 00:34:35,399
when I say system image I mean both the

849
00:34:35,399 --> 00:34:38,219
update and the and the first system

850
00:34:38,219 --> 00:34:41,879
image so this is the these are the

851
00:34:41,879 --> 00:34:43,500
numbers that we're dealing with when we

852
00:34:43,500 --> 00:34:45,780
are trying to look for malware and

853
00:34:45,780 --> 00:34:48,780
system images and in launch devices and

854
00:34:48,780 --> 00:34:51,060
we have five minutes I believe for

855
00:34:51,060 --> 00:34:53,418
questions so thank you

856
00:34:53,418 --> 00:34:56,739
my voice made it to the end

857
00:34:56,739 --> 00:35:06,289
[Applause]

858
00:35:18,420 --> 00:35:21,780
hi really cool presentation I have a

859
00:35:21,780 --> 00:35:23,880
question about the PS trick I know that

860
00:35:23,880 --> 00:35:26,460
in the latest versions of Android you

861
00:35:26,460 --> 00:35:28,320
can no longer get the full process tree

862
00:35:28,320 --> 00:35:31,020
are they that dumb or I am missing

863
00:35:31,020 --> 00:35:32,040
something

864
00:35:32,040 --> 00:35:34,040
foreign

865
00:35:34,040 --> 00:35:36,599
I think they were just targeting older

866
00:35:36,599 --> 00:35:39,180
versions or they didn't didn't get the

867
00:35:39,180 --> 00:35:41,880
memo that it doesn't work anymore

868
00:35:41,880 --> 00:35:46,880
um yeah it never really worked anyway so

869
00:35:56,280 --> 00:35:58,859
I didn't quite get hold of the gtime

870
00:35:58,859 --> 00:36:00,720
application gets on the front of the

871
00:36:00,720 --> 00:36:02,339
first page like is there like a legal

872
00:36:02,339 --> 00:36:04,680
company selling this application and if

873
00:36:04,680 --> 00:36:07,500
so how come you get a V2 I mean

874
00:36:07,500 --> 00:36:10,099
yeah

875
00:36:10,440 --> 00:36:14,339
yeah so for both of these cases

876
00:36:14,339 --> 00:36:16,619
um yeah they're developed by

877
00:36:16,619 --> 00:36:19,920
we'll say legit companies but basically

878
00:36:19,920 --> 00:36:22,619
uh yeah companies that the OEM or some

879
00:36:22,619 --> 00:36:24,839
other person in the distribution chain

880
00:36:24,839 --> 00:36:27,720
partners with to contract out the OTA

881
00:36:27,720 --> 00:36:30,180
part of the operating system

882
00:36:30,180 --> 00:36:32,359
so yeah the company names were actually

883
00:36:32,359 --> 00:36:36,599
digitime and Redstone uh it just kind of

884
00:36:36,599 --> 00:36:38,880
seems that sometimes people

885
00:36:38,880 --> 00:36:40,980
add these features on the side and say

886
00:36:40,980 --> 00:36:42,359
you know we're going to be on all these

887
00:36:42,359 --> 00:36:44,220
devices we're really privileged let's

888
00:36:44,220 --> 00:36:47,299
make a little money on the side

889
00:36:47,400 --> 00:36:48,720
um basically anytime I think we've

890
00:36:48,720 --> 00:36:50,579
reached out it's you know a rogue

891
00:36:50,579 --> 00:36:53,420
developer so

892
00:37:12,599 --> 00:37:15,240
so building on the last question how

893
00:37:15,240 --> 00:37:16,859
many times do they get to fool you

894
00:37:16,859 --> 00:37:18,780
before You Yank their key or revoke

895
00:37:18,780 --> 00:37:20,160
their signatures

896
00:37:20,160 --> 00:37:21,599
so

897
00:37:21,599 --> 00:37:24,119
do you mind yeah sure

898
00:37:24,119 --> 00:37:26,180
um

899
00:37:26,180 --> 00:37:29,339
the problem is that it's as Alex said

900
00:37:29,339 --> 00:37:33,480
these are subcontractors they they are

901
00:37:33,480 --> 00:37:36,480
not companies that make phones

902
00:37:36,480 --> 00:37:38,579
themselves it's the companies that are

903
00:37:38,579 --> 00:37:41,579
hired by the companies that make phones

904
00:37:41,579 --> 00:37:45,300
right so it's kind of this chain of of

905
00:37:45,300 --> 00:37:47,099
companies

906
00:37:47,099 --> 00:37:49,740
um and they are usually signed by the

907
00:37:49,740 --> 00:37:51,839
oems themselves the apps are signed by

908
00:37:51,839 --> 00:37:53,579
the oems themselves the apps are inside

909
00:37:53,579 --> 00:37:55,800
by the developer

910
00:37:55,800 --> 00:37:58,920
um so it's um you know that the phone

911
00:37:58,920 --> 00:38:01,260
making company I don't want to use the

912
00:38:01,260 --> 00:38:02,820
word manufacturer because it's more

913
00:38:02,820 --> 00:38:04,920
complicated than that but the company

914
00:38:04,920 --> 00:38:06,720
that makes phones subcontract someone

915
00:38:06,720 --> 00:38:10,800
else and asks them for some code right

916
00:38:10,800 --> 00:38:13,980
in this case an OTA app and then they

917
00:38:13,980 --> 00:38:16,380
include it in their system image

918
00:38:16,380 --> 00:38:18,960
um as a kind of their code in a way so

919
00:38:18,960 --> 00:38:22,079
it's signed so we really don't have

920
00:38:22,079 --> 00:38:26,700
a way other than telling the OEM not to

921
00:38:26,700 --> 00:38:28,380
work with that company and we don't have

922
00:38:28,380 --> 00:38:31,680
any other method of doing that and to be

923
00:38:31,680 --> 00:38:32,599
honest

924
00:38:32,599 --> 00:38:35,160
the company can just change a name and

925
00:38:35,160 --> 00:38:37,079
pretend to be someone else for the next

926
00:38:37,079 --> 00:38:40,560
time right so

927
00:38:41,780 --> 00:38:48,780
yeah so we we can ban a company from

928
00:38:48,780 --> 00:38:50,900
contributing to the system image

929
00:38:50,900 --> 00:38:53,040
but it's more complicated than that

930
00:38:53,040 --> 00:38:55,020
because it's not as simple as we have a

931
00:38:55,020 --> 00:38:56,339
relationship with that company and we

932
00:38:56,339 --> 00:38:58,320
can just break the relationship it's not

933
00:38:58,320 --> 00:39:01,079
our relationship to the company it's the

934
00:39:01,079 --> 00:39:02,940
phone manufacturer's relationship to the

935
00:39:02,940 --> 00:39:03,900
company

936
00:39:03,900 --> 00:39:08,480
we can talk more about that later

937
00:39:09,359 --> 00:39:12,680
a last question

938
00:39:16,020 --> 00:39:20,060
sure yeah okay

939
00:39:30,480 --> 00:39:33,480
cool presentation thank you out of the

940
00:39:33,480 --> 00:39:36,240
stats you presented you did not speak

941
00:39:36,240 --> 00:39:39,300
about the malware you actually find

942
00:39:39,300 --> 00:39:41,040
before

943
00:39:41,040 --> 00:39:43,520
and if you have any idea of the estimate

944
00:39:43,520 --> 00:39:46,940
percent of malware that escaped this

945
00:39:46,940 --> 00:39:50,240
validation Escape

946
00:39:50,700 --> 00:39:52,760
so

947
00:39:52,760 --> 00:39:55,920
no okay so we have two questions

948
00:39:55,920 --> 00:39:59,339
actually first one is we didn't say how

949
00:39:59,339 --> 00:40:00,859
much malware we find

950
00:40:00,859 --> 00:40:03,420
and I don't have that off the top of my

951
00:40:03,420 --> 00:40:05,640
head so I won't even guess

952
00:40:05,640 --> 00:40:07,560
um I just didn't include that the second

953
00:40:07,560 --> 00:40:09,359
question was how much malware we don't

954
00:40:09,359 --> 00:40:10,680
find

955
00:40:10,680 --> 00:40:12,000
um

956
00:40:12,000 --> 00:40:14,780
yeah

957
00:40:14,780 --> 00:40:18,980
I don't know how to measure that

958
00:40:24,540 --> 00:40:26,940
how did you find it

959
00:40:26,940 --> 00:40:30,780
um so it's well

960
00:40:30,780 --> 00:40:33,960
I can say how we kind of discovered

961
00:40:33,960 --> 00:40:37,500
Redstone it's it has the second part

962
00:40:37,500 --> 00:40:39,420
that's obfuscated that's really

963
00:40:39,420 --> 00:40:42,420
different from the first part so when we

964
00:40:42,420 --> 00:40:44,520
started looking at the OTA apps it's

965
00:40:44,520 --> 00:40:48,839
stood out to us but the way we usually

966
00:40:48,839 --> 00:40:51,480
approach this kind of things is we try

967
00:40:51,480 --> 00:40:53,339
to look at apps that are

968
00:40:53,339 --> 00:40:55,800
particularly privileged privileged like

969
00:40:55,800 --> 00:40:58,200
OTAs or other apps that have lots of

970
00:40:58,200 --> 00:41:00,300
Privileges and we are trying to go

971
00:41:00,300 --> 00:41:03,300
through them and find if they are having

972
00:41:03,300 --> 00:41:05,040
any kind of obfuscated code or weird

973
00:41:05,040 --> 00:41:07,380
code or additional code that's not in

974
00:41:07,380 --> 00:41:12,740
ausp or that's not expected to be there

975
00:41:13,920 --> 00:41:16,320
okay I think we're finished thank you

976
00:41:16,320 --> 00:41:17,870
thank you very much thank you

977
00:41:17,870 --> 00:41:26,150
[Applause]

