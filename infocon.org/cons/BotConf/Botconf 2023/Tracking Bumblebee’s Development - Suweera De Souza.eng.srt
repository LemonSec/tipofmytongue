1
00:00:01,740 --> 00:00:03,720
um it's a good day everyone thank you

2
00:00:03,720 --> 00:00:07,440
Boko for having me I'm really excited to

3
00:00:07,440 --> 00:00:09,900
share my research on tracking bumblebees

4
00:00:09,900 --> 00:00:10,920
development

5
00:00:10,920 --> 00:00:13,259
so my name is Sue and I'm a security

6
00:00:13,259 --> 00:00:16,020
researcher at crowdstrike

7
00:00:16,020 --> 00:00:18,660
so talk today will be quite technical in

8
00:00:18,660 --> 00:00:22,020
nature we're going to look at timelines

9
00:00:22,020 --> 00:00:23,640
on the development of different

10
00:00:23,640 --> 00:00:25,740
bumblebee components

11
00:00:25,740 --> 00:00:28,260
and what we'll notice is that the

12
00:00:28,260 --> 00:00:30,359
developers they like to focus on a lot

13
00:00:30,359 --> 00:00:33,420
of EDR evasion techniques some of which

14
00:00:33,420 --> 00:00:35,579
are worth mentioning so we'll look at

15
00:00:35,579 --> 00:00:37,559
them as well

16
00:00:37,559 --> 00:00:39,840
and then finally we'll conclude drawing

17
00:00:39,840 --> 00:00:43,020
a conclusion based on observing these

18
00:00:43,020 --> 00:00:45,000
timelines what can we learn about

19
00:00:45,000 --> 00:00:47,399
Bumblebee's developers what does that

20
00:00:47,399 --> 00:00:48,960
tell us

21
00:00:48,960 --> 00:00:51,660
I also want to note that crowdstrike's

22
00:00:51,660 --> 00:00:53,940
name for the malware in the used in

23
00:00:53,940 --> 00:00:57,059
reporting is actually shindig but I will

24
00:00:57,059 --> 00:00:58,920
continue to use bumblebee throughout

25
00:00:58,920 --> 00:01:02,059
this presentation

26
00:01:02,399 --> 00:01:04,260
so before we look at development

27
00:01:04,260 --> 00:01:05,880
timelines you might as well look at a

28
00:01:05,880 --> 00:01:07,680
really short history timeline on

29
00:01:07,680 --> 00:01:10,260
bumblebee it'll also help us to follow

30
00:01:10,260 --> 00:01:12,600
the presentation better I believe

31
00:01:12,600 --> 00:01:15,119
so bumblebee started was actually first

32
00:01:15,119 --> 00:01:17,760
reported in March 2022 as you see here

33
00:01:17,760 --> 00:01:20,520
it was reported by Google tag the

34
00:01:20,520 --> 00:01:22,140
researchers they observed this new

35
00:01:22,140 --> 00:01:25,380
loader being used by Affiliates who were

36
00:01:25,380 --> 00:01:27,840
previously associated with conti and

37
00:01:27,840 --> 00:01:30,080
that is also how they gave it its name

38
00:01:30,080 --> 00:01:33,060
the Bumblebee string was used in the

39
00:01:33,060 --> 00:01:35,400
user agent header when it made requests

40
00:01:35,400 --> 00:01:36,540
to the server

41
00:01:36,540 --> 00:01:39,299
now the same Affiliates used a similar

42
00:01:39,299 --> 00:01:42,180
loader when they were targeting a cve in

43
00:01:42,180 --> 00:01:45,780
a campaign back in August 2021 Microsoft

44
00:01:45,780 --> 00:01:48,540
reported that incident in September of

45
00:01:48,540 --> 00:01:51,720
that year but that loader was mainly

46
00:01:51,720 --> 00:01:54,180
used for Distributing Cobalt strike it

47
00:01:54,180 --> 00:01:55,740
didn't have the bot like capabilities

48
00:01:55,740 --> 00:01:58,140
that we see Bumblebee having right now

49
00:01:58,140 --> 00:02:00,420
so when we're looking at the timelines

50
00:02:00,420 --> 00:02:02,700
we are going to focus on bumblebee when

51
00:02:02,700 --> 00:02:05,040
it started off as a bot and we believe

52
00:02:05,040 --> 00:02:09,300
that day to be 31st of Jan 2022.

53
00:02:09,300 --> 00:02:12,000
so shortly after the first report there

54
00:02:12,000 --> 00:02:14,760
was an uptick in activity there was

55
00:02:14,760 --> 00:02:16,379
started spreading more and more in fact

56
00:02:16,379 --> 00:02:18,540
it started off with three major

57
00:02:18,540 --> 00:02:21,720
Affiliates using the malware and they

58
00:02:21,720 --> 00:02:23,099
were more Affiliates over this craft

59
00:02:23,099 --> 00:02:24,959
just shows the major ones and

60
00:02:24,959 --> 00:02:27,000
subsequently down the line more and more

61
00:02:27,000 --> 00:02:29,760
Affiliates joined the program the

62
00:02:29,760 --> 00:02:32,120
developers as well went on two different

63
00:02:32,120 --> 00:02:35,520
hiatuses and they're seen distributed by

64
00:02:35,520 --> 00:02:38,160
the likes of smokebot and bath loader to

65
00:02:38,160 --> 00:02:40,500
name a few

66
00:02:40,500 --> 00:02:41,099
um

67
00:02:41,099 --> 00:02:44,220
so what is the malware like when it

68
00:02:44,220 --> 00:02:45,780
infects the system I thought I might as

69
00:02:45,780 --> 00:02:47,940
well give a high level overview because

70
00:02:47,940 --> 00:02:50,879
then it will and you'll like more or

71
00:02:50,879 --> 00:02:52,500
less follow the timeline better from

72
00:02:52,500 --> 00:02:55,379
this as with most e-crime malware it

73
00:02:55,379 --> 00:02:57,000
starts off with the loader that is

74
00:02:57,000 --> 00:02:59,340
packed and encrypted it will unpack our

75
00:02:59,340 --> 00:03:01,980
malware in Bumblebee's case it is always

76
00:03:01,980 --> 00:03:05,459
a dll file so once unpacked bumblebee

77
00:03:05,459 --> 00:03:07,260
communicates with the server to receive

78
00:03:07,260 --> 00:03:10,080
commands they refer to them as tasks

79
00:03:10,080 --> 00:03:12,060
they are abbreviated three letter

80
00:03:12,060 --> 00:03:15,180
strings hopefully you can see that so as

81
00:03:15,180 --> 00:03:17,459
you see here like taking for instance s

82
00:03:17,459 --> 00:03:20,700
i j stands for Shell Code injection I

83
00:03:20,700 --> 00:03:22,800
won't go through this list quite yet

84
00:03:22,800 --> 00:03:24,959
because we are going to talk on tasks on

85
00:03:24,959 --> 00:03:27,000
much later in the talk

86
00:03:27,000 --> 00:03:30,000
also the unpacked file has a hook module

87
00:03:30,000 --> 00:03:31,920
that's used in conjunction with two of

88
00:03:31,920 --> 00:03:33,140
the tasks

89
00:03:33,140 --> 00:03:36,120
bumblebee 2 is modular in nature it can

90
00:03:36,120 --> 00:03:39,300
run plug-ins simultaneously and those

91
00:03:39,300 --> 00:03:41,640
plugins as well can communicate with the

92
00:03:41,640 --> 00:03:43,019
server

93
00:03:43,019 --> 00:03:45,239
so from this image you might as well

94
00:03:45,239 --> 00:03:46,799
mention the timelines we're going to

95
00:03:46,799 --> 00:03:49,379
look at is the development of the loader

96
00:03:49,379 --> 00:03:52,019
and the main dll a second timeline would

97
00:03:52,019 --> 00:03:55,379
be changes made to the C2 comms and then

98
00:03:55,379 --> 00:03:59,099
finally the tasks

99
00:03:59,099 --> 00:04:02,220
so here's a first Gan timeline analysis

100
00:04:02,220 --> 00:04:03,299
chart

101
00:04:03,299 --> 00:04:05,760
quick show of hands cool here is aware

102
00:04:05,760 --> 00:04:09,260
of what a Gantt timeline is

103
00:04:10,140 --> 00:04:12,780
okay a few of you so I might as well

104
00:04:12,780 --> 00:04:15,060
just give a quick description on it so

105
00:04:15,060 --> 00:04:17,820
again timeline it is uh as you can tell

106
00:04:17,820 --> 00:04:19,918
it is a timeline chart it's so from the

107
00:04:19,918 --> 00:04:22,440
left to the right in Bumble in this case

108
00:04:22,440 --> 00:04:24,900
it starts off at 31st of Jan and it'll

109
00:04:24,900 --> 00:04:27,780
end until uh first of March this year

110
00:04:27,780 --> 00:04:30,720
that's what the research is based on and

111
00:04:30,720 --> 00:04:32,699
then from top to bottom you see the

112
00:04:32,699 --> 00:04:35,100
techniques or the that the malware was

113
00:04:35,100 --> 00:04:37,199
using so what they've initially used and

114
00:04:37,199 --> 00:04:39,479
dropped and you can see the duration of

115
00:04:39,479 --> 00:04:40,860
how long those techniques were being

116
00:04:40,860 --> 00:04:43,380
used I didn't add every possible

117
00:04:43,380 --> 00:04:45,720
technique here because it would not fit

118
00:04:45,720 --> 00:04:48,240
a slide I added what I thought would be

119
00:04:48,240 --> 00:04:50,460
more interesting for the talk

120
00:04:50,460 --> 00:04:52,860
so in the very beginning when bumblebee

121
00:04:52,860 --> 00:04:54,199
started

122
00:04:54,199 --> 00:04:56,699
it didn't have a loader it was very

123
00:04:56,699 --> 00:05:00,300
simple I I think it was a tactic by the

124
00:05:00,300 --> 00:05:02,460
Developers for testing out the bot they

125
00:05:02,460 --> 00:05:04,800
were not even Distributing it so the

126
00:05:04,800 --> 00:05:06,780
loader actually started getting used

127
00:05:06,780 --> 00:05:09,780
around the time that activity was

128
00:05:09,780 --> 00:05:11,580
picking up for the malware

129
00:05:11,580 --> 00:05:13,500
before we look at some of these

130
00:05:13,500 --> 00:05:16,199
techniques I want to mention that

131
00:05:16,199 --> 00:05:18,840
Bumblebee's Main dll and plugins

132
00:05:18,840 --> 00:05:22,380
uses a lot of code from the function bar

133
00:05:22,380 --> 00:05:25,139
from boost Library boost is an open

134
00:05:25,139 --> 00:05:28,860
source C plus plus Library it is header

135
00:05:28,860 --> 00:05:31,320
based that means any program that uses

136
00:05:31,320 --> 00:05:33,780
boost ends up statically compiling a lot

137
00:05:33,780 --> 00:05:36,360
of these functions within the binary and

138
00:05:36,360 --> 00:05:38,460
this is why bumblebees files are quite

139
00:05:38,460 --> 00:05:40,680
big in size

140
00:05:40,680 --> 00:05:42,960
so despite in the beginning being new

141
00:05:42,960 --> 00:05:45,419
and you know being tested it did have

142
00:05:45,419 --> 00:05:48,600
what we believe to be an EDR evasion

143
00:05:48,600 --> 00:05:50,820
technique this was where the malware

144
00:05:50,820 --> 00:05:53,940
would hook the API RTL exit user process

145
00:05:53,940 --> 00:05:56,280
it was only hooked if there was an AV

146
00:05:56,280 --> 00:05:59,280
hook present on it that was to make sure

147
00:05:59,280 --> 00:06:01,020
so the trampoline code will make sure

148
00:06:01,020 --> 00:06:02,940
that bumblebee finished its execution

149
00:06:02,940 --> 00:06:06,180
before it went the control went back to

150
00:06:06,180 --> 00:06:09,000
the antivirus hook likely to prevent the

151
00:06:09,000 --> 00:06:11,520
antivirus from analyzing the process any

152
00:06:11,520 --> 00:06:14,520
further and flagging it as malicious

153
00:06:14,520 --> 00:06:17,520
they did though drop this For Thread

154
00:06:17,520 --> 00:06:21,180
execution hijacking by end of June I

155
00:06:21,180 --> 00:06:23,819
believe which in my opinion is a much

156
00:06:23,819 --> 00:06:27,060
better EDR Vision I'll talk on that on a

157
00:06:27,060 --> 00:06:28,919
later slide

158
00:06:28,919 --> 00:06:31,440
now when the loader was introduced it

159
00:06:31,440 --> 00:06:33,419
wasn't only used for packing the malware

160
00:06:33,419 --> 00:06:36,900
it too had an EDR evasion called remote

161
00:06:36,900 --> 00:06:39,300
Library injection and we'll talk on that

162
00:06:39,300 --> 00:06:42,000
too in a later slide

163
00:06:42,000 --> 00:06:44,400
the developers as well played with a

164
00:06:44,400 --> 00:06:47,460
different format of the loader they when

165
00:06:47,460 --> 00:06:49,080
they came back from their first Hiatus

166
00:06:49,080 --> 00:06:51,479
they started using power sploits

167
00:06:51,479 --> 00:06:54,479
reflective dll injection so not only is

168
00:06:54,479 --> 00:06:56,759
the loader now a Powershell file it also

169
00:06:56,759 --> 00:06:59,580
has another EDR on top of the remote

170
00:06:59,580 --> 00:07:02,880
Library injection right now we've seen

171
00:07:02,880 --> 00:07:05,759
mostly in campaigns for SEO poisoning

172
00:07:05,759 --> 00:07:08,400
and malvertising

173
00:07:08,400 --> 00:07:12,000
finally I have to mention alcazer alcazo

174
00:07:12,000 --> 00:07:14,400
came about it's actually a repository on

175
00:07:14,400 --> 00:07:16,500
GitHub by the way it came about

176
00:07:16,500 --> 00:07:19,440
mid-april also around the time a lot

177
00:07:19,440 --> 00:07:21,180
more public reports were starting to

178
00:07:21,180 --> 00:07:23,880
come out on bumblebee this repository

179
00:07:23,880 --> 00:07:26,940
contains different anti-analysis checks

180
00:07:26,940 --> 00:07:30,060
one can run on a machine so the malware

181
00:07:30,060 --> 00:07:32,639
used exclusively all of these checks at

182
00:07:32,639 --> 00:07:34,800
the beginning of execution it made sense

183
00:07:34,800 --> 00:07:38,580
you know to prevent analysis like us to

184
00:07:38,580 --> 00:07:41,160
you know study the malware any further

185
00:07:41,160 --> 00:07:43,680
they did though interestingly drop it

186
00:07:43,680 --> 00:07:46,319
before going on their second break it

187
00:07:46,319 --> 00:07:49,440
wasn't really clear why I thought it was

188
00:07:49,440 --> 00:07:51,539
interesting but they introduced it back

189
00:07:51,539 --> 00:07:52,800
after coming

190
00:07:52,800 --> 00:07:54,660
from the break and in a completely

191
00:07:54,660 --> 00:07:57,120
different context so we'll see that more

192
00:07:57,120 --> 00:08:00,960
when we talk on the C2 communication

193
00:08:00,960 --> 00:08:03,060
so now let's look at the EDR evasion

194
00:08:03,060 --> 00:08:06,240
first off we have is the remote Library

195
00:08:06,240 --> 00:08:08,580
injection so this is the EDR evasion

196
00:08:08,580 --> 00:08:10,620
used by the loader

197
00:08:10,620 --> 00:08:13,500
now the purpose of this technique is to

198
00:08:13,500 --> 00:08:17,099
masquerade mobile bumblebees main dll to

199
00:08:17,099 --> 00:08:20,099
appear running as a legitimate dll in

200
00:08:20,099 --> 00:08:22,259
this screenshot it's a process Explorer

201
00:08:22,259 --> 00:08:24,180
you can see the active threads of

202
00:08:24,180 --> 00:08:26,940
bumblebees process one of those threads

203
00:08:26,940 --> 00:08:29,099
is pointing to this Library called dim's

204
00:08:29,099 --> 00:08:32,580
room it's a Windows system Library so if

205
00:08:32,580 --> 00:08:34,200
you were to analyze the malware you'd

206
00:08:34,200 --> 00:08:36,360
think oh dimm's room is running but in

207
00:08:36,360 --> 00:08:38,640
fact it's Bumblebee the One giveaway

208
00:08:38,640 --> 00:08:40,979
here is you can see referencing the

209
00:08:40,979 --> 00:08:44,099
export function set path that belongs to

210
00:08:44,099 --> 00:08:45,480
the malware

211
00:08:45,480 --> 00:08:47,580
now the way this technique can achieve

212
00:08:47,580 --> 00:08:51,540
it is it hooks apis used by ntdll for

213
00:08:51,540 --> 00:08:53,959
mapping and loading libraries in memory

214
00:08:53,959 --> 00:08:56,640
generally that operation is performed on

215
00:08:56,640 --> 00:08:59,339
a physical file on disk but by hooking

216
00:08:59,339 --> 00:09:01,260
the API they can

217
00:09:01,260 --> 00:09:03,540
use that same operation against an

218
00:09:03,540 --> 00:09:07,560
unpacked file in memory now this proof

219
00:09:07,560 --> 00:09:10,140
of concept is not new it was released in

220
00:09:10,140 --> 00:09:11,519
2004

221
00:09:11,519 --> 00:09:13,920
but interestingly enough the only other

222
00:09:13,920 --> 00:09:16,500
malware scene used in it is ramnet as

223
00:09:16,500 --> 00:09:19,500
was pointed out by IBM in one of their

224
00:09:19,500 --> 00:09:22,680
blogs and this is an even interesting

225
00:09:22,680 --> 00:09:25,800
part one of ramnet's loaders matches

226
00:09:25,800 --> 00:09:28,620
exactly that with bumblebees loader when

227
00:09:28,620 --> 00:09:30,300
used in conjunction with power sploit

228
00:09:30,300 --> 00:09:32,220
and it's quite interesting given after

229
00:09:32,220 --> 00:09:35,540
the remnant talk by clarify

230
00:09:35,540 --> 00:09:38,399
given that ramnet also was seen using

231
00:09:38,399 --> 00:09:41,339
powersploit so so it's not to say that

232
00:09:41,339 --> 00:09:43,200
developers necessarily avoid aware of

233
00:09:43,200 --> 00:09:45,540
this technique or with the same group

234
00:09:45,540 --> 00:09:49,980
but definitely a lot of board code here

235
00:09:49,980 --> 00:09:52,620
next stuff we have is thread execution

236
00:09:52,620 --> 00:09:56,760
hijacking the EDR Aviation used by the

237
00:09:56,760 --> 00:10:00,240
main dll now this technique masquerades

238
00:10:00,240 --> 00:10:02,700
Bumblebee's offset in memory to appear

239
00:10:02,700 --> 00:10:05,580
under a decoy offset and that Decoy

240
00:10:05,580 --> 00:10:07,860
offset belongs to this long named API

241
00:10:07,860 --> 00:10:10,019
part of ntdll

242
00:10:10,019 --> 00:10:12,300
again we have a screenshot of process

243
00:10:12,300 --> 00:10:14,339
Explorer you can see the active thread

244
00:10:14,339 --> 00:10:17,580
and it looks like the API is running but

245
00:10:17,580 --> 00:10:20,160
as you can guess it is Bumblebee

246
00:10:20,160 --> 00:10:23,220
now this technique can do this by first

247
00:10:23,220 --> 00:10:26,040
it creates the API as in a suspended

248
00:10:26,040 --> 00:10:28,019
thread mode so when the thread is

249
00:10:28,019 --> 00:10:30,600
suspended it can modify the thread's

250
00:10:30,600 --> 00:10:32,700
context structure within the structure

251
00:10:32,700 --> 00:10:35,399
is a field which specifies the offset

252
00:10:35,399 --> 00:10:37,980
the start offset it just swaps the api's

253
00:10:37,980 --> 00:10:40,680
address with that of Bumblebee

254
00:10:40,680 --> 00:10:43,019
generally this technique is used for

255
00:10:43,019 --> 00:10:45,540
process injection there's a good entry

256
00:10:45,540 --> 00:10:48,120
of that in miter attack I was trying to

257
00:10:48,120 --> 00:10:51,300
find something similar like a POC or had

258
00:10:51,300 --> 00:10:53,760
no luck the closest I could come to was

259
00:10:53,760 --> 00:10:56,820
this blog that talks about Cozy Bear's

260
00:10:56,820 --> 00:10:59,279
Dropbox loader using this very exact

261
00:10:59,279 --> 00:11:02,760
same technique and funny enough the same

262
00:11:02,760 --> 00:11:06,480
API name as a decoy so again you know

263
00:11:06,480 --> 00:11:10,140
coincidence maybe or not but not new and

264
00:11:10,140 --> 00:11:13,079
a lot of borrower code

265
00:11:13,079 --> 00:11:15,480
so finally that brings us to the C2

266
00:11:15,480 --> 00:11:17,459
communication

267
00:11:17,459 --> 00:11:19,860
right now bumblebee uses a websocket

268
00:11:19,860 --> 00:11:22,140
protocol it creates messages in Json

269
00:11:22,140 --> 00:11:25,680
format the rc4 encrypted before sending

270
00:11:25,680 --> 00:11:28,260
as a request or receiving as a response

271
00:11:28,260 --> 00:11:31,079
the keys in the main dll file

272
00:11:31,079 --> 00:11:33,360
this uh here as you can see as a

273
00:11:33,360 --> 00:11:35,700
truncated version of what those messages

274
00:11:35,700 --> 00:11:37,740
look like it would be it's not possible

275
00:11:37,740 --> 00:11:39,779
to give the entire version since it

276
00:11:39,779 --> 00:11:42,360
would be quite small on the slides uh

277
00:11:42,360 --> 00:11:44,339
I've also labeled them as ping hits and

278
00:11:44,339 --> 00:11:47,820
tasks just to explain the flow better

279
00:11:47,820 --> 00:11:50,339
now these messages they get sent in a

280
00:11:50,339 --> 00:11:53,579
loop bumblebee has a beaconing style

281
00:11:53,579 --> 00:11:55,920
communication and that's you see that

282
00:11:55,920 --> 00:11:58,079
quite common these days with e-crime and

283
00:11:58,079 --> 00:12:00,120
especially if you read dfir reports

284
00:12:00,120 --> 00:12:02,220
you've noticed that you know a lot of

285
00:12:02,220 --> 00:12:04,200
them tend to Beacon and the payload gets

286
00:12:04,200 --> 00:12:06,600
delivered after you know an undetermined

287
00:12:06,600 --> 00:12:08,480
amount of time

288
00:12:08,480 --> 00:12:11,540
so uh now let's talk about the messages

289
00:12:11,540 --> 00:12:13,860
so the whole point for the pink message

290
00:12:13,860 --> 00:12:17,160
is to send across the Bots ID in turn it

291
00:12:17,160 --> 00:12:20,040
receives a session ID from the server

292
00:12:20,040 --> 00:12:22,200
and the session ID is used in throughout

293
00:12:22,200 --> 00:12:24,120
the other request messages and that's

294
00:12:24,120 --> 00:12:26,640
likely for their backend to track what

295
00:12:26,640 --> 00:12:28,740
the messages are and then finally it

296
00:12:28,740 --> 00:12:31,260
ends up with the task response that will

297
00:12:31,260 --> 00:12:33,120
relate the tasks or commands and

298
00:12:33,120 --> 00:12:35,640
potential payloads for the malware

299
00:12:35,640 --> 00:12:37,680
what about this hit

300
00:12:37,680 --> 00:12:41,100
this is where alcazer comes into play so

301
00:12:41,100 --> 00:12:43,860
like on the first timeline we saw alcaza

302
00:12:43,860 --> 00:12:45,600
was used all those checks were used at

303
00:12:45,600 --> 00:12:48,060
the beginning of execution bumblebee

304
00:12:48,060 --> 00:12:50,399
dropped that and now it's only run when

305
00:12:50,399 --> 00:12:52,459
it receives a command from the server

306
00:12:52,459 --> 00:12:55,260
that command is in the Ping's response

307
00:12:55,260 --> 00:12:56,880
there's a Boolean field in there called

308
00:12:56,880 --> 00:13:00,240
Hit if that's set to as true then it

309
00:13:00,240 --> 00:13:03,000
will run all these checks it is it puts

310
00:13:03,000 --> 00:13:04,560
all those checks in a really long Json

311
00:13:04,560 --> 00:13:07,139
file different Boolean field values and

312
00:13:07,139 --> 00:13:09,720
sends it to the server the developers

313
00:13:09,720 --> 00:13:12,180
then only settle with using alcazer

314
00:13:12,180 --> 00:13:14,339
checks they use some of their own things

315
00:13:14,339 --> 00:13:16,620
like what are the current active

316
00:13:16,620 --> 00:13:19,440
processes running on the system and plus

317
00:13:19,440 --> 00:13:23,160
this field here binary DB it is it

318
00:13:23,160 --> 00:13:26,339
contains a base64 encoded SQL database

319
00:13:26,339 --> 00:13:29,279
of browsing history from chrome and

320
00:13:29,279 --> 00:13:31,380
Microsoft Edge so what are the better

321
00:13:31,380 --> 00:13:33,959
way of telling if the system is indeed a

322
00:13:33,959 --> 00:13:36,720
victim or not or a Sandbox and also to

323
00:13:36,720 --> 00:13:39,180
get a bit more contact on who the victim

324
00:13:39,180 --> 00:13:40,380
is

325
00:13:40,380 --> 00:13:42,899
I also have to mention um in case the

326
00:13:42,899 --> 00:13:44,880
malware receives tasks they do send a

327
00:13:44,880 --> 00:13:47,040
task result type request which is just

328
00:13:47,040 --> 00:13:49,320
relays any potential error or any

329
00:13:49,320 --> 00:13:51,540
information that's exfiltrated as a

330
00:13:51,540 --> 00:13:54,600
result of running the tasks

331
00:13:54,600 --> 00:13:56,940
now looking through the development

332
00:13:56,940 --> 00:13:58,980
there's been quite a fair bit of changes

333
00:13:58,980 --> 00:14:01,019
over time it's harder to kind of

334
00:14:01,019 --> 00:14:02,760
understand it and I found that by

335
00:14:02,760 --> 00:14:04,680
grouping them on based on certain

336
00:14:04,680 --> 00:14:06,420
properties it helps us understand the

337
00:14:06,420 --> 00:14:08,040
flow better

338
00:14:08,040 --> 00:14:09,959
so you know in the very beginning at the

339
00:14:09,959 --> 00:14:13,320
start uh bumblebee used https protocol

340
00:14:13,320 --> 00:14:15,839
of course there are Infamous user agent

341
00:14:15,839 --> 00:14:18,240
string Bumblebee the only messages sent

342
00:14:18,240 --> 00:14:20,639
across was the task we didn't see Pingo

343
00:14:20,639 --> 00:14:23,399
hit and they didn't rc4 encrypt those

344
00:14:23,399 --> 00:14:25,500
messages there was a client version

345
00:14:25,500 --> 00:14:28,500
number there one that was used in the

346
00:14:28,500 --> 00:14:31,500
task request and the URLs endpoint

347
00:14:31,500 --> 00:14:34,860
string was called gate now by mid-april

348
00:14:34,860 --> 00:14:36,360
you know around the time as I mentioned

349
00:14:36,360 --> 00:14:37,920
when there was more public reporting

350
00:14:37,920 --> 00:14:40,980
they decided to randomize the user agent

351
00:14:40,980 --> 00:14:43,019
pattern I know trying to make it less

352
00:14:43,019 --> 00:14:45,899
suspicious that it's bumblebee but that

353
00:14:45,899 --> 00:14:48,120
was clearly short-lived and then they

354
00:14:48,120 --> 00:14:51,060
changed it further and yeah they

355
00:14:51,060 --> 00:14:53,579
randomized the usage and even more they

356
00:14:53,579 --> 00:14:55,800
started using rc4 key to encrypt the

357
00:14:55,800 --> 00:14:56,820
messages

358
00:14:56,820 --> 00:15:00,300
uh the URL string change from gate to

359
00:15:00,300 --> 00:15:02,820
gate S as maybe their way of saying

360
00:15:02,820 --> 00:15:04,220
secure

361
00:15:04,220 --> 00:15:06,899
and then okay a month after they came

362
00:15:06,899 --> 00:15:09,120
back from their first Hiatus they

363
00:15:09,120 --> 00:15:10,860
switched the protocol all together and

364
00:15:10,860 --> 00:15:13,199
that's uh websocket the client version

365
00:15:13,199 --> 00:15:15,720
number also reflected that too and then

366
00:15:15,720 --> 00:15:18,600
point string from gate s to gate W as we

367
00:15:18,600 --> 00:15:21,060
can guess what w means this is where

368
00:15:21,060 --> 00:15:23,639
they introduce the Ping message too

369
00:15:23,639 --> 00:15:26,699
and right now where we are at uh is you

370
00:15:26,699 --> 00:15:28,560
know the Ping hitting task messages we

371
00:15:28,560 --> 00:15:32,279
saw earlier and and this in the very

372
00:15:32,279 --> 00:15:34,260
bottom of the screen is the user agent

373
00:15:34,260 --> 00:15:35,940
string they're using now it's always the

374
00:15:35,940 --> 00:15:38,040
same string and I think it's just their

375
00:15:38,040 --> 00:15:40,139
way of trying to make traffic look a bit

376
00:15:40,139 --> 00:15:42,920
more legitimate

377
00:15:43,079 --> 00:15:47,279
now this brings us to our tasks on the

378
00:15:47,279 --> 00:15:49,019
left hand side here you can see a

379
00:15:49,019 --> 00:15:52,019
description of what those tasks mean and

380
00:15:52,019 --> 00:15:56,339
on the right hand side a really high

381
00:15:56,339 --> 00:15:58,620
level overview on how those tasks are

382
00:15:58,620 --> 00:16:00,180
executed

383
00:16:00,180 --> 00:16:02,399
so our first four oops sorry that's not

384
00:16:02,399 --> 00:16:04,740
what I wanted okay our first four tasks

385
00:16:04,740 --> 00:16:07,019
are what's responsible for running the

386
00:16:07,019 --> 00:16:09,480
payloads the first three of which uh

387
00:16:09,480 --> 00:16:11,339
inject the payloads in the process they

388
00:16:11,339 --> 00:16:14,519
use apcq code injection because it is

389
00:16:14,519 --> 00:16:17,639
also a EDR evasion type technique I will

390
00:16:17,639 --> 00:16:20,660
talk on that technique on a later slide

391
00:16:20,660 --> 00:16:23,220
so they are able to inject shell codes

392
00:16:23,220 --> 00:16:26,660
they also can inject dlls two types

393
00:16:26,660 --> 00:16:30,060
secondary payloads that in dll form or

394
00:16:30,060 --> 00:16:31,920
their plugins which are also in the dll

395
00:16:31,920 --> 00:16:35,040
form and if it's dlls it's injected

396
00:16:35,040 --> 00:16:37,380
along with the hook module the hook

397
00:16:37,380 --> 00:16:40,440
module also has an EDR evasion role and

398
00:16:40,440 --> 00:16:43,800
I'll talk about two in a later slide

399
00:16:43,800 --> 00:16:46,380
Bumblebee as well has an option for just

400
00:16:46,380 --> 00:16:48,060
directly executing the payload through

401
00:16:48,060 --> 00:16:49,279
Dex

402
00:16:49,279 --> 00:16:52,680
gdt get data allows the malware to run

403
00:16:52,680 --> 00:16:55,380
bash commands on the system now instead

404
00:16:55,380 --> 00:16:58,320
of directly invoking it via command.xc

405
00:16:58,320 --> 00:17:01,160
they pass those bash commands to

406
00:17:01,160 --> 00:17:03,660
command.xc standard input output via

407
00:17:03,660 --> 00:17:06,480
named pipes this is actually quite a

408
00:17:06,480 --> 00:17:09,720
common Programming type technique so

409
00:17:09,720 --> 00:17:12,419
it's not entirely malicious then there's

410
00:17:12,419 --> 00:17:14,280
ins for install which creates

411
00:17:14,280 --> 00:17:17,400
persistence the malware uses wmi and

412
00:17:17,400 --> 00:17:20,160
finally sdl silent delete the malware

413
00:17:20,160 --> 00:17:23,640
uses Powershell to delete itself

414
00:17:23,640 --> 00:17:27,179
and a final Gantt chart for today so

415
00:17:27,179 --> 00:17:30,320
let's start off with the ins task

416
00:17:30,320 --> 00:17:33,960
this task before they use wmi that shift

417
00:17:33,960 --> 00:17:36,840
was made early may they were using

418
00:17:36,840 --> 00:17:39,179
regular win32 apis things like create

419
00:17:39,179 --> 00:17:41,820
directory and stuff so you could see the

420
00:17:41,820 --> 00:17:43,380
process actually creating these

421
00:17:43,380 --> 00:17:46,080
artifacts the shift to wmi is actually

422
00:17:46,080 --> 00:17:48,960
quite smart because any process that

423
00:17:48,960 --> 00:17:51,960
gets created with wmi ends up showing as

424
00:17:51,960 --> 00:17:55,140
a child process of the wmi parent so

425
00:17:55,140 --> 00:17:58,140
there's a like an unintentional parent

426
00:17:58,140 --> 00:18:00,299
PID spoofing you do not see the child

427
00:18:00,299 --> 00:18:03,000
parent process creation so it's harder

428
00:18:03,000 --> 00:18:06,840
to track what the malware is doing

429
00:18:06,840 --> 00:18:09,720
so continuing with that same task the

430
00:18:09,720 --> 00:18:12,840
way it's implemented deferred based on

431
00:18:12,840 --> 00:18:14,820
what loader was being used

432
00:18:14,820 --> 00:18:16,620
so as in the beginning I showed they

433
00:18:16,620 --> 00:18:18,360
were using either power sploit or it

434
00:18:18,360 --> 00:18:21,299
started off as a regular packed file so

435
00:18:21,299 --> 00:18:23,520
if it is powersploit you know the file

436
00:18:23,520 --> 00:18:26,400
is a Powershell file the malware in this

437
00:18:26,400 --> 00:18:28,559
case would use Windows data protection

438
00:18:28,559 --> 00:18:32,520
API this technique allows to encrypt the

439
00:18:32,520 --> 00:18:35,100
file using system encryption that's

440
00:18:35,100 --> 00:18:37,620
likely to prevent antivirus as they scan

441
00:18:37,620 --> 00:18:39,600
the file from reading the contents and

442
00:18:39,600 --> 00:18:42,240
likely flagging it as malicious and

443
00:18:42,240 --> 00:18:44,100
accordingly the malware will create a

444
00:18:44,100 --> 00:18:46,440
schedule task that executes a script

445
00:18:46,440 --> 00:18:48,780
which uses DP API to decrypt the

446
00:18:48,780 --> 00:18:50,880
contents back before running it

447
00:18:50,880 --> 00:18:54,000
now if it came and packed dll form it

448
00:18:54,000 --> 00:18:55,440
was already encrypted it was already

449
00:18:55,440 --> 00:18:58,140
packed there was no need for using DP

450
00:18:58,140 --> 00:19:01,020
API so they just used the living of the

451
00:19:01,020 --> 00:19:05,900
land binary odbc conf to execute the dll

452
00:19:05,900 --> 00:19:08,900
gdt so that was introduced early May

453
00:19:08,900 --> 00:19:11,460
when they introduced it it had a very

454
00:19:11,460 --> 00:19:13,980
simple implementation here's a funny

455
00:19:13,980 --> 00:19:17,160
part it matches exactly that with msdn's

456
00:19:17,160 --> 00:19:20,480
documentation on how one can pass

457
00:19:20,480 --> 00:19:23,280
input to a process a child process

458
00:19:23,280 --> 00:19:26,280
created by parent process I thought it

459
00:19:26,280 --> 00:19:27,960
was quite clever because it creates

460
00:19:27,960 --> 00:19:30,419
Anonymous name pipes which are harder to

461
00:19:30,419 --> 00:19:33,179
track what those commands are but they

462
00:19:33,179 --> 00:19:34,980
were clearly just testing the technique

463
00:19:34,980 --> 00:19:37,620
it doesn't allow to asynchronously

464
00:19:37,620 --> 00:19:39,740
execute as many commands as you'd like

465
00:19:39,740 --> 00:19:43,020
so by I think two weeks later or so they

466
00:19:43,020 --> 00:19:45,000
just switched to using the boosts

467
00:19:45,000 --> 00:19:47,820
Library framework on it so boost.asio

468
00:19:47,820 --> 00:19:50,160
which allows for asynchronously running

469
00:19:50,160 --> 00:19:54,600
as many programs I mean commands

470
00:19:54,600 --> 00:19:57,900
um so here is a screenshot of the pipe

471
00:19:57,900 --> 00:20:00,059
names that get created as a result of

472
00:20:00,059 --> 00:20:03,020
using this Library it is not necessarily

473
00:20:03,020 --> 00:20:05,400
malicious because you know boost is open

474
00:20:05,400 --> 00:20:07,200
source but it's a great way for hunting

475
00:20:07,200 --> 00:20:10,020
and also at the end of the name or pipe

476
00:20:10,020 --> 00:20:12,299
name is you can see a numeral value

477
00:20:12,299 --> 00:20:14,940
that's the process PID so the resulting

478
00:20:14,940 --> 00:20:18,900
process that created this name pipe

479
00:20:18,900 --> 00:20:21,900
finally um I want to mention about plg

480
00:20:21,900 --> 00:20:25,380
so plg is what allows which is the task

481
00:20:25,380 --> 00:20:27,600
responsible for executing bumblebees

482
00:20:27,600 --> 00:20:30,360
plugins that was introduced around the

483
00:20:30,360 --> 00:20:32,940
time they switched to websocket uh

484
00:20:32,940 --> 00:20:34,620
protocol and I guess they decided to

485
00:20:34,620 --> 00:20:37,080
make the malware more modular in nature

486
00:20:37,080 --> 00:20:39,660
so when they introduced it they needed a

487
00:20:39,660 --> 00:20:42,000
way to communicate with the plugins and

488
00:20:42,000 --> 00:20:45,600
so they use RPC they created an RPC

489
00:20:45,600 --> 00:20:48,120
endpoint via named pipes and this allows

490
00:20:48,120 --> 00:20:50,820
for inter-process communication again

491
00:20:50,820 --> 00:20:53,039
not entirely malicious but a common

492
00:20:53,039 --> 00:20:57,000
programming technique currently what so

493
00:20:57,000 --> 00:20:59,940
when the plugin uses communicates to the

494
00:20:59,940 --> 00:21:02,820
bot main bot via this pipe they can

495
00:21:02,820 --> 00:21:05,700
access what is the active C2 server IP

496
00:21:05,700 --> 00:21:07,799
address and the active Port that the bot

497
00:21:07,799 --> 00:21:10,320
is communicating with and so once it

498
00:21:10,320 --> 00:21:12,419
requires it can separately communicate

499
00:21:12,419 --> 00:21:15,720
with the same server

500
00:21:15,720 --> 00:21:18,320
so now we have the asynchronous

501
00:21:18,320 --> 00:21:22,200
procedure called Q code injection that

502
00:21:22,200 --> 00:21:23,640
was quite long

503
00:21:23,640 --> 00:21:25,919
um so okay this technique is getting

504
00:21:25,919 --> 00:21:29,220
very popular as injection uh as a

505
00:21:29,220 --> 00:21:31,380
process injection technique there's a

506
00:21:31,380 --> 00:21:33,299
miter attack entry on it where you can

507
00:21:33,299 --> 00:21:36,659
see other malware using it so this one

508
00:21:36,659 --> 00:21:39,179
to give a short description is malware

509
00:21:39,179 --> 00:21:42,960
they take advantage of APC by forcing

510
00:21:42,960 --> 00:21:46,919
another process thread to execute code

511
00:21:46,919 --> 00:21:50,580
injected into a process that's been

512
00:21:50,580 --> 00:21:53,039
added to that threads APC queue so every

513
00:21:53,039 --> 00:21:56,220
thread has an apcq and when the thread

514
00:21:56,220 --> 00:21:58,740
is in an alertable state it ends up

515
00:21:58,740 --> 00:22:00,960
executing whatever has been added to

516
00:22:00,960 --> 00:22:04,320
that queue so in Bumblebee's case

517
00:22:04,320 --> 00:22:06,480
um what bumblebee does okay so they

518
00:22:06,480 --> 00:22:09,419
create the process and they in suspended

519
00:22:09,419 --> 00:22:12,059
mode they inject the payload and before

520
00:22:12,059 --> 00:22:15,240
injecting it they also modify the entry

521
00:22:15,240 --> 00:22:17,340
point of the process with they Place

522
00:22:17,340 --> 00:22:19,559
different instructions in there and in

523
00:22:19,559 --> 00:22:21,240
this case the instructions are it ends

524
00:22:21,240 --> 00:22:24,480
up calling the API sleep X in a loop so

525
00:22:24,480 --> 00:22:28,380
sleepex is what allows the thread to be

526
00:22:28,380 --> 00:22:30,600
in an alertable state so when the pro

527
00:22:30,600 --> 00:22:34,140
when the process is resumed sleepex gets

528
00:22:34,140 --> 00:22:36,419
called and the resulting injected code

529
00:22:36,419 --> 00:22:39,120
is run so in the Shell codes case just a

530
00:22:39,120 --> 00:22:41,760
shell code for dll injection there's a

531
00:22:41,760 --> 00:22:44,039
loader stub that gets run first that

532
00:22:44,039 --> 00:22:45,600
will load the hook module the hook

533
00:22:45,600 --> 00:22:47,820
module does its job and finally it'll

534
00:22:47,820 --> 00:22:50,760
run the payload so it's uh this is quite

535
00:22:50,760 --> 00:22:53,940
stealthy because APC injection is not

536
00:22:53,940 --> 00:22:56,460
necessarily malicious it is quite common

537
00:22:56,460 --> 00:22:58,980
in asynchronous programming this is more

538
00:22:58,980 --> 00:23:01,799
that it makes it harder to monitor so

539
00:23:01,799 --> 00:23:03,720
you need I guess different types of

540
00:23:03,720 --> 00:23:05,780
detection logic which

541
00:23:05,780 --> 00:23:08,520
miter attack does list something but it

542
00:23:08,520 --> 00:23:10,080
is still quite hard

543
00:23:10,080 --> 00:23:12,659
and on top of it bumblebee doesn't just

544
00:23:12,659 --> 00:23:16,440
inject the payloads into any process it

545
00:23:16,440 --> 00:23:18,539
injects it into processes created with

546
00:23:18,539 --> 00:23:21,840
wmi as we know that creates a parent PID

547
00:23:21,840 --> 00:23:26,039
spoof spoofing so bam we have two

548
00:23:26,039 --> 00:23:28,620
stealth and one here

549
00:23:28,620 --> 00:23:31,140
finally the hook module

550
00:23:31,140 --> 00:23:34,020
hook module is quite simple it removes

551
00:23:34,020 --> 00:23:37,740
any input any EDR hooks on apis it

552
00:23:37,740 --> 00:23:39,960
actually comes with a hard-coded list of

553
00:23:39,960 --> 00:23:42,900
different apis that it looks for so it

554
00:23:42,900 --> 00:23:46,380
does this by first comparing the api's

555
00:23:46,380 --> 00:23:49,140
instructions in memory to that of its

556
00:23:49,140 --> 00:23:50,940
instructions in the physical file on

557
00:23:50,940 --> 00:23:54,179
disk because a hook is only Pro present

558
00:23:54,179 --> 00:23:56,760
when it's in memory rather than on the

559
00:23:56,760 --> 00:23:59,640
disk it does the comparison using a

560
00:23:59,640 --> 00:24:02,400
function called a length disassembler a

561
00:24:02,400 --> 00:24:04,340
length disassembler essentially

562
00:24:04,340 --> 00:24:08,159
disassembles the instructions and then

563
00:24:08,159 --> 00:24:10,559
it also to get the exact length of

564
00:24:10,559 --> 00:24:12,840
instruction and it also compares the

565
00:24:12,840 --> 00:24:15,059
prefix now if either the length or the

566
00:24:15,059 --> 00:24:16,980
prefix is different it's likely it's

567
00:24:16,980 --> 00:24:19,260
been modified it's hooked in which case

568
00:24:19,260 --> 00:24:21,840
it just copies the instructions from the

569
00:24:21,840 --> 00:24:24,960
physical file to the instructor api's

570
00:24:24,960 --> 00:24:27,900
instructions in memory

571
00:24:27,900 --> 00:24:29,880
and then yeah finally it uses a remote

572
00:24:29,880 --> 00:24:32,039
Library injection this was the EDR

573
00:24:32,039 --> 00:24:34,380
evasion used by the loader uses the same

574
00:24:34,380 --> 00:24:36,780
technique to load the payload dll to

575
00:24:36,780 --> 00:24:39,600
appear running as a legitimate dll

576
00:24:39,600 --> 00:24:41,760
I do want to expand though on that

577
00:24:41,760 --> 00:24:44,700
length disassembler in Bumblebee's case

578
00:24:44,700 --> 00:24:47,159
it that lead and disassembler matches

579
00:24:47,159 --> 00:24:49,380
exactly that with this open source

580
00:24:49,380 --> 00:24:51,299
Library called lib splice it's present

581
00:24:51,299 --> 00:24:54,539
on GitHub it's also that same libraries

582
00:24:54,539 --> 00:24:57,240
seen commonly used by ramnet trickbots

583
00:24:57,240 --> 00:24:59,340
some of trickbot's modules have used it

584
00:24:59,340 --> 00:25:02,520
botbots proxy modules a lot of game

585
00:25:02,520 --> 00:25:04,919
cheats you see it referenced in a lot of

586
00:25:04,919 --> 00:25:07,500
forums a lot of hackers out there tend

587
00:25:07,500 --> 00:25:10,620
to reference it in you know in our I

588
00:25:10,620 --> 00:25:12,539
guess in the industry we tend to call it

589
00:25:12,539 --> 00:25:16,559
inline hooking this technique but in the

590
00:25:16,559 --> 00:25:18,480
hacking Community they call it splicing

591
00:25:18,480 --> 00:25:20,760
so it's not something entirely new in

592
00:25:20,760 --> 00:25:24,140
fact this library is almost a decade old

593
00:25:24,140 --> 00:25:27,600
but so it's interesting that they use it

594
00:25:27,600 --> 00:25:29,159
um you know clearly all the other

595
00:25:29,159 --> 00:25:31,919
malware use it so why you know use

596
00:25:31,919 --> 00:25:33,140
anything different

597
00:25:33,140 --> 00:25:35,880
when something out there Works already

598
00:25:35,880 --> 00:25:38,580
for your case

599
00:25:38,580 --> 00:25:40,860
now that brings us to a conclusion so

600
00:25:40,860 --> 00:25:43,440
now from all these timelines what it

601
00:25:43,440 --> 00:25:46,020
helps us is is it helps us to map

602
00:25:46,020 --> 00:25:49,200
activity to what Bumblebee's software

603
00:25:49,200 --> 00:25:53,100
development life cycle looks like

604
00:25:53,100 --> 00:25:53,640
um

605
00:25:53,640 --> 00:25:56,400
so clearly they seem to have an agile

606
00:25:56,400 --> 00:25:58,860
methodology about how they develop the

607
00:25:58,860 --> 00:26:01,860
malware so the very beginning when we

608
00:26:01,860 --> 00:26:05,400
saw bumblebee being tested out you know

609
00:26:05,400 --> 00:26:08,159
it was quite simple in agile terms you

610
00:26:08,159 --> 00:26:11,100
would call that as MVP a minimal viable

611
00:26:11,100 --> 00:26:15,299
product in fact in a lot of these forums

612
00:26:15,299 --> 00:26:17,520
where malware authors try to promote

613
00:26:17,520 --> 00:26:20,100
their loaders they tend to say beta

614
00:26:20,100 --> 00:26:23,100
version or this is my MVP loader

615
00:26:23,100 --> 00:26:24,900
um it's almost like it's a very startup

616
00:26:24,900 --> 00:26:27,179
culture like it's a kind of like they're

617
00:26:27,179 --> 00:26:30,900
getting funding for their project so

618
00:26:30,900 --> 00:26:32,580
clearly they were testing out between

619
00:26:32,580 --> 00:26:35,340
that period and then phase two started

620
00:26:35,340 --> 00:26:37,380
off you know end of March the same time

621
00:26:37,380 --> 00:26:40,080
the loader was introduced and also where

622
00:26:40,080 --> 00:26:43,799
they included more EDR evasion EDR

623
00:26:43,799 --> 00:26:45,779
evasion is definitely big for a lot of

624
00:26:45,779 --> 00:26:47,580
the loaders a lot of these Affiliates

625
00:26:47,580 --> 00:26:49,500
they're more worried they don't want

626
00:26:49,500 --> 00:26:52,679
their payloads to get detected so they

627
00:26:52,679 --> 00:26:54,720
just want a reliable loader that will

628
00:26:54,720 --> 00:26:56,700
bypass EDR

629
00:26:56,700 --> 00:26:59,400
so apart from this uh we also noticed

630
00:26:59,400 --> 00:27:02,460
that the developers seem to focus on the

631
00:27:02,460 --> 00:27:05,880
C2 infrastructure on during the Hiatus

632
00:27:05,880 --> 00:27:06,720
period

633
00:27:06,720 --> 00:27:08,640
and in our heads I guess when we think

634
00:27:08,640 --> 00:27:11,100
of Hiatus we think the developers are on

635
00:27:11,100 --> 00:27:13,500
a break but uh in this case they are not

636
00:27:13,500 --> 00:27:15,059
they're more on a break from

637
00:27:15,059 --> 00:27:17,460
distribution now this makes sense

638
00:27:17,460 --> 00:27:18,960
because if you're going to change your

639
00:27:18,960 --> 00:27:21,059
back end you want to be able to

640
00:27:21,059 --> 00:27:22,860
distribute a malware that can

641
00:27:22,860 --> 00:27:24,480
communicate with your backend

642
00:27:24,480 --> 00:27:26,940
infrastructure so they're still quite

643
00:27:26,940 --> 00:27:29,340
active uh you know and even though

644
00:27:29,340 --> 00:27:31,200
they're on the highest period and it's

645
00:27:31,200 --> 00:27:33,720
also a flag for us when the malware goes

646
00:27:33,720 --> 00:27:36,539
quiet because then we are like oh they

647
00:27:36,539 --> 00:27:39,379
are up to something

648
00:27:39,720 --> 00:27:42,840
these developers too seem to step out of

649
00:27:42,840 --> 00:27:44,640
the norm in how they've gone about

650
00:27:44,640 --> 00:27:48,179
developing the malware we don't see them

651
00:27:48,179 --> 00:27:51,059
using API hashing or string obfuscation

652
00:27:51,059 --> 00:27:54,480
I I guess not yet it wasn't clear why so

653
00:27:54,480 --> 00:27:56,340
I kind of gambled on why this could be

654
00:27:56,340 --> 00:28:00,240
the case maybe it's a result on how they

655
00:28:00,240 --> 00:28:03,120
are using these EDR Vision techniques so

656
00:28:03,120 --> 00:28:05,100
as we saw with the loader and with the

657
00:28:05,100 --> 00:28:08,039
main dll those techniques they make it

658
00:28:08,039 --> 00:28:10,919
appear as if it's a system dll running

659
00:28:10,919 --> 00:28:13,320
or if it's an api's address in memory

660
00:28:13,320 --> 00:28:16,140
running so if an antivirus you know it's

661
00:28:16,140 --> 00:28:18,299
less likely to scan something that it

662
00:28:18,299 --> 00:28:21,419
doesn't believe to be part of the actual

663
00:28:21,419 --> 00:28:23,059
process

664
00:28:23,059 --> 00:28:26,039
you know address or the actual process

665
00:28:26,039 --> 00:28:29,220
itself so in this case it you know Yara

666
00:28:29,220 --> 00:28:31,080
rules would be quite useless in trying

667
00:28:31,080 --> 00:28:33,659
to detect the malware in memory

668
00:28:33,659 --> 00:28:36,900
uh finally the developers they seem to

669
00:28:36,900 --> 00:28:39,320
have some mature Dev practices

670
00:28:39,320 --> 00:28:41,760
especially the fact that they use boost

671
00:28:41,760 --> 00:28:44,100
and you know it's used for communicating

672
00:28:44,100 --> 00:28:46,980
with the C2 it's used in the gdt task

673
00:28:46,980 --> 00:28:50,100
when it needs to run commands

674
00:28:50,100 --> 00:28:53,159
asynchronously boost is not really

675
00:28:53,159 --> 00:28:55,500
common not quite common among malware it

676
00:28:55,500 --> 00:28:56,880
is there are some families out there

677
00:28:56,880 --> 00:28:59,100
that do use it it makes it quite bulky

678
00:28:59,100 --> 00:29:02,039
but the fact that they use it means um

679
00:29:02,039 --> 00:29:04,260
you know they they do not need to bother

680
00:29:04,260 --> 00:29:07,140
about what win32 apis they need to use

681
00:29:07,140 --> 00:29:09,600
end of the day they can use a library

682
00:29:09,600 --> 00:29:11,039
that works

683
00:29:11,039 --> 00:29:13,860
and also the fact that they're using uh

684
00:29:13,860 --> 00:29:16,260
really common library for splicing lip

685
00:29:16,260 --> 00:29:18,240
splice you know they want to make sure

686
00:29:18,240 --> 00:29:20,580
especially when you're modifying an API

687
00:29:20,580 --> 00:29:22,980
instruction in memory you want to make

688
00:29:22,980 --> 00:29:24,480
sure that you modify it properly

689
00:29:24,480 --> 00:29:27,020
otherwise your payloads won't run

690
00:29:27,020 --> 00:29:31,380
and yeah so hopefully you enjoyed the

691
00:29:31,380 --> 00:29:33,360
talk you've learned something about what

692
00:29:33,360 --> 00:29:35,760
goes behind developing malware what that

693
00:29:35,760 --> 00:29:37,440
looks like and I look forward to any

694
00:29:37,440 --> 00:29:39,520
questions

695
00:29:39,520 --> 00:29:42,720
[Applause]

696
00:29:45,140 --> 00:29:48,140
thank you

697
00:29:50,880 --> 00:29:53,840
questions

698
00:30:00,480 --> 00:30:02,899
okay

699
00:30:11,220 --> 00:30:13,080
thanks for the presentation a great

700
00:30:13,080 --> 00:30:15,539
research thank you and

701
00:30:15,539 --> 00:30:17,460
I have a short comment about boost

702
00:30:17,460 --> 00:30:19,679
actually the Boost library is used by

703
00:30:19,679 --> 00:30:22,440
the developers like normal developers so

704
00:30:22,440 --> 00:30:24,720
maybe they hired somebody experienced on

705
00:30:24,720 --> 00:30:26,100
the team

706
00:30:26,100 --> 00:30:30,120
and another one did you see how it's

707
00:30:30,120 --> 00:30:32,820
being delivered like through fishing or

708
00:30:32,820 --> 00:30:35,820
and anything else

709
00:30:35,820 --> 00:30:37,320
um yeah so I didn't talk too much about

710
00:30:37,320 --> 00:30:38,840
the campaign because

711
00:30:38,840 --> 00:30:41,640
which focuses a lot on the distribution

712
00:30:41,640 --> 00:30:45,179
techniques but it's usually spam and

713
00:30:45,179 --> 00:30:48,260
they use you know ever since the

714
00:30:48,260 --> 00:30:50,880
macros were disabled they started using

715
00:30:50,880 --> 00:30:53,840
things like isos container files

716
00:30:53,840 --> 00:30:57,600
vhds and now SEO poisoning is quite

717
00:30:57,600 --> 00:31:01,140
common so they start off with MSI

718
00:31:01,140 --> 00:31:03,419
installers

719
00:31:03,419 --> 00:31:05,880
the MSI installers here usually has the

720
00:31:05,880 --> 00:31:09,000
Powershell file I have seen them use the

721
00:31:09,000 --> 00:31:11,039
executable file so there's dll side

722
00:31:11,039 --> 00:31:12,779
loading

723
00:31:12,779 --> 00:31:14,039
um

724
00:31:14,039 --> 00:31:16,080
I think that's what comes to mind

725
00:31:16,080 --> 00:31:18,299
there's probably some more out there

726
00:31:18,299 --> 00:31:21,419
yeah but mostly spam you know if I made

727
00:31:21,419 --> 00:31:24,539
one more so uh and did you detect many

728
00:31:24,539 --> 00:31:27,260
of infections throughout your like

729
00:31:27,260 --> 00:31:31,080
Telemetry of the company like searching

730
00:31:31,080 --> 00:31:33,059
for the stuff

731
00:31:33,059 --> 00:31:35,760
did I take what yeah detect any live

732
00:31:35,760 --> 00:31:38,340
detections after you started researching

733
00:31:38,340 --> 00:31:41,460
it and you know feed the feedback to the

734
00:31:41,460 --> 00:31:43,919
systems did you did you see many

735
00:31:43,919 --> 00:31:46,020
infections or

736
00:31:46,020 --> 00:31:47,240
um

737
00:31:47,240 --> 00:31:49,380
that's an interesting question I don't

738
00:31:49,380 --> 00:31:53,539
know if I'm quite allowed to talk about

739
00:31:53,539 --> 00:31:56,220
infections within the company but we can

740
00:31:56,220 --> 00:31:58,740
talk about it later I just saw it on the

741
00:31:58,740 --> 00:32:01,640
air of caution here

742
00:32:04,020 --> 00:32:06,260
okay thank you

743
00:32:06,260 --> 00:32:11,740
[Applause]

