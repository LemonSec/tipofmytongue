1
00:00:09,300 --> 00:00:32,280
[Music]

2
00:00:34,370 --> 00:00:40,949
okay thanks of us okay so hi Reuben

3
00:00:38,190 --> 00:00:43,440
thanks for joining us my name is Maureen

4
00:00:40,950 --> 00:00:46,050
I'm a senior software and I might be

5
00:00:43,440 --> 00:00:47,940
start with me today we'll be talking

6
00:00:46,050 --> 00:00:50,580
about securing no dias applications in

7
00:00:47,940 --> 00:00:53,339
2n just to give you a quick intro a

8
00:00:50,580 --> 00:00:57,660
quick intro to you about us okay I need

9
00:00:53,340 --> 00:01:01,170
to turn it on okay let's see okay good

10
00:00:57,660 --> 00:01:03,839
okay so a quick intro about us both of

11
00:01:01,170 --> 00:01:06,410
us are part of Tallis we are part of its

12
00:01:03,840 --> 00:01:10,009
cloud prediction and licensing division

13
00:01:06,410 --> 00:01:12,600
originally we were from gemalto but

14
00:01:10,009 --> 00:01:15,180
Telus recently acquired gemalto earlier

15
00:01:12,600 --> 00:01:16,679
this year both Alice and gemalto not

16
00:01:15,180 --> 00:01:18,330
sure if many of you heard about that

17
00:01:16,680 --> 00:01:20,850
because it's not a household product

18
00:01:18,330 --> 00:01:23,190
name most of our products are Enterprise

19
00:01:20,850 --> 00:01:25,470
focus they are more b2b as opposed to

20
00:01:23,190 --> 00:01:27,300
consumer focused currently we are

21
00:01:25,470 --> 00:01:29,250
working on a product called safe net

22
00:01:27,300 --> 00:01:31,289
tested excess which is essentially an

23
00:01:29,250 --> 00:01:33,720
identity and access management product

24
00:01:31,290 --> 00:01:36,119
and it's a distributive product with her

25
00:01:33,720 --> 00:01:37,470
which has lot of micro services some of

26
00:01:36,119 --> 00:01:40,619
our micro services are built using

27
00:01:37,470 --> 00:01:42,569
node.js and since thallus is a security

28
00:01:40,619 --> 00:01:45,119
company we have a strict set of

29
00:01:42,569 --> 00:01:47,160
requirements that we need to it there's

30
00:01:45,119 --> 00:01:49,259
strong emphasis on security first so we

31
00:01:47,160 --> 00:01:51,840
have strong strict requirements in terms

32
00:01:49,259 --> 00:01:53,130
of their predefined activities that need

33
00:01:51,840 --> 00:01:55,050
to be performed while you're doing

34
00:01:53,130 --> 00:01:56,610
developing the application or when you

35
00:01:55,050 --> 00:02:00,240
are before you ship those to production

36
00:01:56,610 --> 00:02:02,130
so purpose of our talk today is to share

37
00:02:00,240 --> 00:02:04,050
some of those mechanisms available in

38
00:02:02,130 --> 00:02:05,699
node.js which you can use to address

39
00:02:04,050 --> 00:02:07,709
some of the most common security issues

40
00:02:05,700 --> 00:02:10,890
in your applications so hopefully that

41
00:02:07,709 --> 00:02:13,349
would be helpful so before I talk about

42
00:02:10,889 --> 00:02:14,970
the agenda I wanted to know the audience

43
00:02:13,349 --> 00:02:17,190
a bit better so that we can pace our

44
00:02:14,970 --> 00:02:18,540
talk accordingly can we do a quick show

45
00:02:17,190 --> 00:02:21,780
of friends to see how many of you are

46
00:02:18,540 --> 00:02:23,609
developers here okay good

47
00:02:21,780 --> 00:02:27,060
what about architects do we have any

48
00:02:23,610 --> 00:02:28,470
architects here okay do we have anyone

49
00:02:27,060 --> 00:02:31,440
here who has been using node.js

50
00:02:28,470 --> 00:02:34,200
professionally okay quite a few that

51
00:02:31,440 --> 00:02:37,770
that expected good good to know okay so

52
00:02:34,200 --> 00:02:39,660
what we'll do is we'll only go over the

53
00:02:37,770 --> 00:02:40,290
we'll do a very quick overview of the

54
00:02:39,660 --> 00:02:42,989
node.js

55
00:02:40,290 --> 00:02:45,420
won't go into details we'll try to focus

56
00:02:42,989 --> 00:02:48,120
more on the security aspects of it so

57
00:02:45,420 --> 00:02:50,760
once in always done will directly jump

58
00:02:48,120 --> 00:02:52,560
to the different security shoes the

59
00:02:50,760 --> 00:02:54,629
common ones at least and would see how

60
00:02:52,560 --> 00:02:55,980
they can be addressed in node.js and

61
00:02:54,629 --> 00:02:58,048
towards the end I'm sure we'll have

62
00:02:55,980 --> 00:03:00,959
enough time to take your questions and

63
00:02:58,049 --> 00:03:07,019
we'll address those at that point so

64
00:03:00,959 --> 00:03:09,319
let's start with the overview so know

65
00:03:07,019 --> 00:03:13,109
Jace is a JavaScript runtime built on

66
00:03:09,319 --> 00:03:16,819
the Chrome's v8 engine a single-threaded

67
00:03:13,109 --> 00:03:18,540
has a asynchronous event live in

68
00:03:16,819 --> 00:03:21,530
architecture which makes it very

69
00:03:18,540 --> 00:03:24,569
performant when it comes to passing

70
00:03:21,530 --> 00:03:26,519
concurrent tasks we use it for anything

71
00:03:24,569 --> 00:03:29,578
from a server-side scripting to

72
00:03:26,519 --> 00:03:33,599
server-side web development making big

73
00:03:29,579 --> 00:03:36,060
rest api's it is cross-platform so what

74
00:03:33,599 --> 00:03:37,290
we can do is we develop on Windows and

75
00:03:36,060 --> 00:03:41,280
deploy in Linux when it goes to

76
00:03:37,290 --> 00:03:42,989
production it has a package manager NPM

77
00:03:41,280 --> 00:03:44,970
which has many libraries one of the

78
00:03:42,989 --> 00:03:48,000
things that makes note very popular

79
00:03:44,970 --> 00:03:50,430
developers as many libraries and MIT

80
00:03:48,000 --> 00:03:52,349
that have seen I'm free to use it's a

81
00:03:50,430 --> 00:03:56,510
used by some of the biggest companies

82
00:03:52,349 --> 00:03:59,668
Dallas Netflix and LinkedIn

83
00:03:56,510 --> 00:04:02,448
along with Express there's a very

84
00:03:59,669 --> 00:04:06,299
popular web application framework called

85
00:04:02,449 --> 00:04:09,329
along with node Express it is we mainly

86
00:04:06,299 --> 00:04:11,250
use it to do REST API s which also it

87
00:04:09,329 --> 00:04:13,530
also comes with many middlewares

88
00:04:11,250 --> 00:04:16,620
middleware is a software that sits

89
00:04:13,530 --> 00:04:20,310
between HTTP module and you controller

90
00:04:16,620 --> 00:04:23,789
let your augment your your code to add

91
00:04:20,310 --> 00:04:26,280
security to add any kind of passing that

92
00:04:23,789 --> 00:04:30,270
you can give off to third-party

93
00:04:26,280 --> 00:04:33,210
libraries so this is example a hello

94
00:04:30,270 --> 00:04:37,139
world example using Express and node you

95
00:04:33,210 --> 00:04:40,198
pretty much create new Express instance

96
00:04:37,139 --> 00:04:41,849
attach it to the server you create a

97
00:04:40,199 --> 00:04:44,310
controller in this case that returns

98
00:04:41,849 --> 00:04:46,590
hello world and then you start listening

99
00:04:44,310 --> 00:04:51,090
on port 8080 and that's pretty much how

100
00:04:46,590 --> 00:04:53,580
you can create the hello world another

101
00:04:51,090 --> 00:04:57,060
that we have a choice out of the way

102
00:04:53,580 --> 00:05:00,419
topic is TLS so what the point that you

103
00:04:57,060 --> 00:05:03,000
can do to secure your web application is

104
00:05:00,420 --> 00:05:06,330
to use HTTPS there's a common

105
00:05:03,000 --> 00:05:08,970
misconception that your clients

106
00:05:06,330 --> 00:05:12,240
connecting to your web application go

107
00:05:08,970 --> 00:05:13,350
through either load balancer or a web

108
00:05:12,240 --> 00:05:16,200
application firewall

109
00:05:13,350 --> 00:05:18,990
we're wofe so you can have your TLS

110
00:05:16,200 --> 00:05:21,180
terminate at the wofe but in actuality

111
00:05:18,990 --> 00:05:24,150
we should follow that defense-in-depth

112
00:05:21,180 --> 00:05:27,480
concept and encrypt communication within

113
00:05:24,150 --> 00:05:29,820
our servers so if we have your web

114
00:05:27,480 --> 00:05:32,310
application communicating with the Redis

115
00:05:29,820 --> 00:05:34,680
or with your database or whatever other

116
00:05:32,310 --> 00:05:39,330
services you have you should have a

117
00:05:34,680 --> 00:05:43,530
tailored communication between those so

118
00:05:39,330 --> 00:05:45,750
after you enable TLS or HTTP

119
00:05:43,530 --> 00:05:48,929
communication some of these you can do

120
00:05:45,750 --> 00:05:50,940
you should do is if you're disabled in

121
00:05:48,930 --> 00:05:52,620
secure protocols in this example

122
00:05:50,940 --> 00:05:55,170
enlisted as thyself

123
00:05:52,620 --> 00:05:57,000
SSL version 3 TLS one and tell us 1.1

124
00:05:55,170 --> 00:05:59,160
and you have to keep them up to date to

125
00:05:57,000 --> 00:06:02,100
make sure that the insecure outdated

126
00:05:59,160 --> 00:06:04,200
protocols are disabled also that

127
00:06:02,100 --> 00:06:06,600
insecure ciphers as an example here are

128
00:06:04,200 --> 00:06:09,570
C for md5 if it's not really disabled by

129
00:06:06,600 --> 00:06:10,770
the bye-bye node or about your sister

130
00:06:09,570 --> 00:06:14,730
that you using you should make sure to

131
00:06:10,770 --> 00:06:16,680
disable it listed two tools here one

132
00:06:14,730 --> 00:06:19,610
tool you can download from test SSL that

133
00:06:16,680 --> 00:06:21,440
Sh another application provided by

134
00:06:19,610 --> 00:06:24,720
ssl.com

135
00:06:21,440 --> 00:06:28,140
which will connect to your application

136
00:06:24,720 --> 00:06:30,720
and we'll test that if you have any

137
00:06:28,140 --> 00:06:34,909
insecure protocols or insecure ciphers

138
00:06:30,720 --> 00:06:39,830
are enabled on your HTTPS connection

139
00:06:34,910 --> 00:06:43,760
here ample of how to enable HTTPS a node

140
00:06:39,830 --> 00:06:46,950
basically instead of using HTTP module

141
00:06:43,760 --> 00:06:49,430
use HTTP module and you pass it a

142
00:06:46,950 --> 00:06:52,409
conditional object you just provide a

143
00:06:49,430 --> 00:06:54,780
key a certificate for the key and a

144
00:06:52,410 --> 00:06:58,050
passphrase that connect that secures the

145
00:06:54,780 --> 00:07:00,390
key if you notice the we don't have us

146
00:06:58,050 --> 00:07:03,030
the passphrase as a string in the code

147
00:07:00,390 --> 00:07:06,120
it stored securely in past securely to

148
00:07:03,030 --> 00:07:07,229
your application we also pass secure

149
00:07:06,120 --> 00:07:11,130
options

150
00:07:07,230 --> 00:07:13,890
to disable SSL version 3 and TLS 1 and

151
00:07:11,130 --> 00:07:15,180
also pass a ciphers which sets which

152
00:07:13,890 --> 00:07:20,250
surface we're gonna use and which

153
00:07:15,180 --> 00:07:24,000
surface we are disabled like I said

154
00:07:20,250 --> 00:07:27,230
before you should use TLS for your

155
00:07:24,000 --> 00:07:30,510
downstream services so if you have many

156
00:07:27,230 --> 00:07:32,520
services especially even if you have

157
00:07:30,510 --> 00:07:35,880
that many you might not want to have a

158
00:07:32,520 --> 00:07:38,580
public key certificate signed by plug

159
00:07:35,880 --> 00:07:41,969
public CA which we can be expensive what

160
00:07:38,580 --> 00:07:46,310
you can do is sorry what you can do is

161
00:07:41,970 --> 00:07:49,260
you can use privately signed a

162
00:07:46,310 --> 00:07:53,520
certificate signed by a private CA but

163
00:07:49,260 --> 00:07:56,730
then use a custom trust or like so here

164
00:07:53,520 --> 00:07:59,370
we have a public certificates side map

165
00:07:56,730 --> 00:08:02,730
by a private CA we just pass it to the

166
00:07:59,370 --> 00:08:06,570
global options CA you can use TLS even

167
00:08:02,730 --> 00:08:08,970
in the the intra services interest

168
00:08:06,570 --> 00:08:12,690
servers without having an expensive

169
00:08:08,970 --> 00:08:14,760
certificates okay so when you are trying

170
00:08:12,690 --> 00:08:16,530
to secure your web applications there

171
00:08:14,760 --> 00:08:18,330
are many things to consider but probably

172
00:08:16,530 --> 00:08:19,979
one of the easiest way to start is by

173
00:08:18,330 --> 00:08:22,380
looking at your HTTP security headers

174
00:08:19,980 --> 00:08:23,820
with because they provide you another

175
00:08:22,380 --> 00:08:26,219
security layer which helps you mitigate

176
00:08:23,820 --> 00:08:28,050
some of the security issues in generally

177
00:08:26,220 --> 00:08:29,730
speaking irrespective of what technology

178
00:08:28,050 --> 00:08:32,159
you are using they are also very easy to

179
00:08:29,730 --> 00:08:34,710
configure and nodejs is no exception to

180
00:08:32,159 --> 00:08:36,659
that we have a package called helmet in

181
00:08:34,710 --> 00:08:38,520
node.js which let's zoom it with lets

182
00:08:36,659 --> 00:08:40,978
you manipulate all those quixote headers

183
00:08:38,520 --> 00:08:42,600
very easily and it's very easy to

184
00:08:40,979 --> 00:08:44,730
configure you just install the helmet

185
00:08:42,600 --> 00:08:46,800
package and then you can attach that as

186
00:08:44,730 --> 00:08:50,910
a middleware with with your express

187
00:08:46,800 --> 00:08:54,300
application so ok I saw somebody was

188
00:08:50,910 --> 00:08:56,069
taking the picture ok ok so helmet is

189
00:08:54,300 --> 00:08:58,229
essentially a collection of lot of

190
00:08:56,070 --> 00:08:59,850
middlewares they each of those metal

191
00:08:58,230 --> 00:09:05,010
layers let you manipulate different

192
00:08:59,850 --> 00:09:06,810
security headers one thing in I'm not

193
00:09:05,010 --> 00:09:08,730
going to cover all of those here I just

194
00:09:06,810 --> 00:09:11,729
destroyed them as a reference I'll try

195
00:09:08,730 --> 00:09:13,110
to focus on more the key ones but one

196
00:09:11,730 --> 00:09:16,260
thing which I would want to highlight is

197
00:09:13,110 --> 00:09:18,270
when you use the helmet the way I did in

198
00:09:16,260 --> 00:09:19,860
the last slide it automatically enable

199
00:09:18,270 --> 00:09:22,470
some of those middlewares by default

200
00:09:19,860 --> 00:09:25,080
which you can see in the last column but

201
00:09:22,470 --> 00:09:27,330
having said that you can also disable or

202
00:09:25,080 --> 00:09:29,520
enable additional middle waves if you

203
00:09:27,330 --> 00:09:31,080
want to those metal wires which gets

204
00:09:29,520 --> 00:09:32,819
added they get said it with the default

205
00:09:31,080 --> 00:09:34,800
configuration if you want to modify that

206
00:09:32,820 --> 00:09:36,630
you can also do it there's another way

207
00:09:34,800 --> 00:09:38,579
of using the element is rather than

208
00:09:36,630 --> 00:09:40,320
using them little weird like I did you

209
00:09:38,580 --> 00:09:42,690
can individually use those little wheels

210
00:09:40,320 --> 00:09:44,130
if you want to so all in my next

211
00:09:42,690 --> 00:09:45,630
examples I'll be showing those

212
00:09:44,130 --> 00:09:47,520
individual little ways just for the sake

213
00:09:45,630 --> 00:09:50,130
of it but you can use both approaches

214
00:09:47,520 --> 00:09:51,060
that that's up to you so let's start

215
00:09:50,130 --> 00:09:53,070
with the strict Transport Security

216
00:09:51,060 --> 00:09:55,859
header so that's a security header which

217
00:09:53,070 --> 00:09:57,390
which enforces the browser to always use

218
00:09:55,860 --> 00:09:59,060
cure to keep chains of communication

219
00:09:57,390 --> 00:10:01,740
with your web server

220
00:09:59,060 --> 00:10:03,599
the benefit of that is if an attacker

221
00:10:01,740 --> 00:10:06,300
tries to downgrade your protocol to use

222
00:10:03,600 --> 00:10:09,030
unsecure channel like HTTP the browser

223
00:10:06,300 --> 00:10:10,949
will reject that so the good thing about

224
00:10:09,030 --> 00:10:13,470
this it's voted by most of the browsers

225
00:10:10,950 --> 00:10:15,720
one thing though you want to look into

226
00:10:13,470 --> 00:10:18,210
is it's only supported from I 11 onwards

227
00:10:15,720 --> 00:10:21,240
what it means that is even if you are

228
00:10:18,210 --> 00:10:22,980
setting this Quixote headers the and if

229
00:10:21,240 --> 00:10:26,370
your users are using older version of ie

230
00:10:22,980 --> 00:10:29,280
it won't do any good for them so so what

231
00:10:26,370 --> 00:10:30,720
you but what it signifies is that just

232
00:10:29,280 --> 00:10:32,310
setting those quixote headers are not

233
00:10:30,720 --> 00:10:34,500
enough to mitigate those security issues

234
00:10:32,310 --> 00:10:38,160
you also want to augment that with some

235
00:10:34,500 --> 00:10:40,620
other mitigation approaches so using

236
00:10:38,160 --> 00:10:41,040
that it's very simple again simply use

237
00:10:40,620 --> 00:10:43,830
the H

238
00:10:41,040 --> 00:10:45,660
helmet's HSTs middleware and Here I am

239
00:10:43,830 --> 00:10:48,000
just using one configuration but you can

240
00:10:45,660 --> 00:10:50,250
use more configurations which are

241
00:10:48,000 --> 00:10:52,410
available here basically I'm just

242
00:10:50,250 --> 00:10:55,380
setting the max age to 60 days in this

243
00:10:52,410 --> 00:10:57,300
case so X promotions is another

244
00:10:55,380 --> 00:10:58,860
important security header which helps

245
00:10:57,300 --> 00:11:01,680
you prevent against the click tracking

246
00:10:58,860 --> 00:11:03,690
attack by letting you define which are

247
00:11:01,680 --> 00:11:06,959
the which are the applications which can

248
00:11:03,690 --> 00:11:08,520
embed your application as an iframe by

249
00:11:06,960 --> 00:11:10,620
default when you use helmet it would

250
00:11:08,520 --> 00:11:12,750
deny that for all the applications but

251
00:11:10,620 --> 00:11:14,070
for for some reason like if there are

252
00:11:12,750 --> 00:11:16,440
business requirements and you won't

253
00:11:14,070 --> 00:11:19,470
allow that you can explicitly whitelist

254
00:11:16,440 --> 00:11:21,560
those host is as an application which

255
00:11:19,470 --> 00:11:24,180
can embed your application is iframe

256
00:11:21,560 --> 00:11:25,609
again good thing is it's supported by

257
00:11:24,180 --> 00:11:28,530
most of the modern browsers

258
00:11:25,610 --> 00:11:30,030
I forgot I 11 as well yes so it

259
00:11:28,530 --> 00:11:30,870
supported by modern browsers as well as

260
00:11:30,030 --> 00:11:34,329
11 is

261
00:11:30,870 --> 00:11:36,430
so to use that it's simple again use the

262
00:11:34,330 --> 00:11:38,500
frame guard metal beer here if you look

263
00:11:36,430 --> 00:11:42,219
at the example I'm explicitly allowing

264
00:11:38,500 --> 00:11:44,470
it to use and explicitly allowing my

265
00:11:42,220 --> 00:11:46,870
application to be added embedded is s

266
00:11:44,470 --> 00:11:48,010
part example comm if you look at the

267
00:11:46,870 --> 00:11:50,110
bottom of the slide there are two

268
00:11:48,010 --> 00:11:52,870
versions of that header I'm showing one

269
00:11:50,110 --> 00:11:55,000
is where wait deny the second one is

270
00:11:52,870 --> 00:11:57,880
much closer to what my example is should

271
00:11:55,000 --> 00:11:59,890
they are up in the code so let's talk

272
00:11:57,880 --> 00:12:01,330
about the content security policy in my

273
00:11:59,890 --> 00:12:04,060
opinion that's one of the most important

274
00:12:01,330 --> 00:12:06,010
one because it helps you prevent against

275
00:12:04,060 --> 00:12:08,589
the it helps you protect against the

276
00:12:06,010 --> 00:12:10,270
excesses attacks and again I'm sure

277
00:12:08,590 --> 00:12:13,240
since we're at less con you are guys

278
00:12:10,270 --> 00:12:16,000
familiar with with AWS it accesses

279
00:12:13,240 --> 00:12:17,200
always feature in or stopped in and I

280
00:12:16,000 --> 00:12:19,000
was reading the latest stats

281
00:12:17,200 --> 00:12:20,530
it seems they are 2/3 of the

282
00:12:19,000 --> 00:12:23,050
applications were vulnerable to this

283
00:12:20,530 --> 00:12:24,880
attack as part of their last analysis so

284
00:12:23,050 --> 00:12:27,640
the beauty of this content security

285
00:12:24,880 --> 00:12:29,560
policy is it helps you protect against

286
00:12:27,640 --> 00:12:32,350
excesses as well as some other injection

287
00:12:29,560 --> 00:12:34,719
attacks by letting you define the white

288
00:12:32,350 --> 00:12:36,580
it lets you why place the sources from

289
00:12:34,720 --> 00:12:39,010
the content can be downloaded from your

290
00:12:36,580 --> 00:12:40,390
website just to illustrate that point a

291
00:12:39,010 --> 00:12:43,630
bit further if you look at the example

292
00:12:40,390 --> 00:12:45,370
down there I have an exam website where

293
00:12:43,630 --> 00:12:47,800
the content security policies can figure

294
00:12:45,370 --> 00:12:51,130
in a way where the anything from

295
00:12:47,800 --> 00:12:53,140
example.com is a valid source what it

296
00:12:51,130 --> 00:12:54,880
means that when the browser would be

297
00:12:53,140 --> 00:12:57,640
asked to download the JavaScript or CSS

298
00:12:54,880 --> 00:13:00,520
from example.com the browser would allow

299
00:12:57,640 --> 00:13:02,710
that but when you would try to download

300
00:13:00,520 --> 00:13:04,420
the something from malicious comm which

301
00:13:02,710 --> 00:13:06,220
could be because of an XSS attack or

302
00:13:04,420 --> 00:13:08,680
whatever the browser would ultimately

303
00:13:06,220 --> 00:13:10,270
reject that because that is not part of

304
00:13:08,680 --> 00:13:12,040
the white listed white sources over

305
00:13:10,270 --> 00:13:13,840
there

306
00:13:12,040 --> 00:13:16,630
again good thing is it's quoted by most

307
00:13:13,840 --> 00:13:19,540
of the browsers one thing to notice it's

308
00:13:16,630 --> 00:13:22,270
only spoiled from i-10 onwards again to

309
00:13:19,540 --> 00:13:23,620
use that again same same convention use

310
00:13:22,270 --> 00:13:26,199
the helmets content security policy

311
00:13:23,620 --> 00:13:29,110
middleware here I'm just using couple of

312
00:13:26,200 --> 00:13:30,880
directives but CSP has lot of directives

313
00:13:29,110 --> 00:13:33,670
so if you are not familiar with that I

314
00:13:30,880 --> 00:13:36,550
see list CST encourage you to go and

315
00:13:33,670 --> 00:13:38,380
check those middle layers look into

316
00:13:36,550 --> 00:13:40,300
those content security policy Saints

317
00:13:38,380 --> 00:13:41,980
it's protects you against the excesses

318
00:13:40,300 --> 00:13:42,400
attack so it's definitely worth looking

319
00:13:41,980 --> 00:13:43,880
into

320
00:13:42,400 --> 00:13:45,530
so he'll be seeking the exam

321
00:13:43,880 --> 00:13:47,900
what I'm doing is and defining the

322
00:13:45,530 --> 00:13:50,660
whitelisted I'm by defining the valid

323
00:13:47,900 --> 00:13:52,670
sources for my scripts as well as for my

324
00:13:50,660 --> 00:13:56,050
style sheets and for everything else

325
00:13:52,670 --> 00:13:58,939
like your images fonts free iframes and

326
00:13:56,050 --> 00:14:00,400
defining the I'm saying only allow those

327
00:13:58,940 --> 00:14:05,900
things to be downloaded from my website

328
00:14:00,400 --> 00:14:08,590
reject everything else so the next one

329
00:14:05,900 --> 00:14:11,120
is the XSS protection so this one is

330
00:14:08,590 --> 00:14:12,440
basically there there are few browsers a

331
00:14:11,120 --> 00:14:15,530
couple of browser which has some

332
00:14:12,440 --> 00:14:19,700
built-in support for XSS protection in

333
00:14:15,530 --> 00:14:21,970
this header lets you enable that one

334
00:14:19,700 --> 00:14:24,020
thing important to understand is these

335
00:14:21,970 --> 00:14:26,240
browsers don't provide you complete

336
00:14:24,020 --> 00:14:31,180
coverage they only give you protection

337
00:14:26,240 --> 00:14:33,980
against some simple excesses attacks so

338
00:14:31,180 --> 00:14:35,390
but the and you can see it from also

339
00:14:33,980 --> 00:14:38,810
from the browser support it's supported

340
00:14:35,390 --> 00:14:42,050
across chrome ie8 and Safari but it's

341
00:14:38,810 --> 00:14:44,900
not supported on Firefox or edge for

342
00:14:42,050 --> 00:14:46,339
example but the thing is that if you as

343
00:14:44,900 --> 00:14:48,590
long as your website is implementing

344
00:14:46,340 --> 00:14:52,040
content curative policy you really don't

345
00:14:48,590 --> 00:14:54,260
care because you already have the CSP

346
00:14:52,040 --> 00:14:57,469
gives you better coverage of the against

347
00:14:54,260 --> 00:15:00,319
XSS so one question I probably would ask

348
00:14:57,470 --> 00:15:03,080
is if my website is on only implementing

349
00:15:00,320 --> 00:15:05,150
content security policy then why even I

350
00:15:03,080 --> 00:15:09,380
am discussing that do I really care

351
00:15:05,150 --> 00:15:11,930
about this if CSP is implemented do I

352
00:15:09,380 --> 00:15:14,689
need to implement that my answer to that

353
00:15:11,930 --> 00:15:17,839
is yes you need that can anyone answer

354
00:15:14,690 --> 00:15:24,830
that why I'm saying it anyone in the

355
00:15:17,840 --> 00:15:26,630
audience okay so the answer is CSP

356
00:15:24,830 --> 00:15:29,530
policies only supported from IE 10

357
00:15:26,630 --> 00:15:32,540
onwards okay whereas this one is

358
00:15:29,530 --> 00:15:34,339
supported from IE it as well so you want

359
00:15:32,540 --> 00:15:36,140
to combine both those things together so

360
00:15:34,340 --> 00:15:36,590
that at least for the older version of

361
00:15:36,140 --> 00:15:39,080
ie

362
00:15:36,590 --> 00:15:40,760
you have some coverage there okay

363
00:15:39,080 --> 00:15:42,590
another thing which I want to highlight

364
00:15:40,760 --> 00:15:44,180
is even if you implement both Quixote

365
00:15:42,590 --> 00:15:47,570
headers will it give you the complete

366
00:15:44,180 --> 00:15:49,459
protection against XSS it won't so you

367
00:15:47,570 --> 00:15:51,080
want to implement again as I said

368
00:15:49,460 --> 00:15:52,610
earlier you want to implement other

369
00:15:51,080 --> 00:15:54,530
mitigations to give you complete

370
00:15:52,610 --> 00:15:56,210
coverage so the better way of doing it

371
00:15:54,530 --> 00:15:56,600
other than these security headers you

372
00:15:56,210 --> 00:15:58,610
won't

373
00:15:56,600 --> 00:16:00,620
limit input validation as well so that

374
00:15:58,610 --> 00:16:02,000
that gives you more coverage more

375
00:16:00,620 --> 00:16:03,440
protection against the celebrity

376
00:16:02,000 --> 00:16:07,610
okay so we'll be talking about that a

377
00:16:03,440 --> 00:16:10,519
bit more later in the slides expounded

378
00:16:07,610 --> 00:16:12,110
an option type type options is that's a

379
00:16:10,519 --> 00:16:14,569
security header which tells the browser

380
00:16:12,110 --> 00:16:16,730
that it should not try to guess the the

381
00:16:14,569 --> 00:16:19,849
mime type of the file returned by the

382
00:16:16,730 --> 00:16:21,410
server so just so you know that mime

383
00:16:19,850 --> 00:16:23,660
type is basically a way of server

384
00:16:21,410 --> 00:16:26,569
telling the browser what's the type of

385
00:16:23,660 --> 00:16:29,149
the file it's looking at for example for

386
00:16:26,569 --> 00:16:31,279
a PNG file it would be image image slash

387
00:16:29,149 --> 00:16:33,680
PNG for JSON file it could be

388
00:16:31,279 --> 00:16:35,449
application slash JSON what happens is

389
00:16:33,680 --> 00:16:38,120
there are a couple of browsers what they

390
00:16:35,449 --> 00:16:40,579
do is rather than relying on the mime

391
00:16:38,120 --> 00:16:42,680
type returned by the server they try to

392
00:16:40,579 --> 00:16:45,319
look into the content of the files and

393
00:16:42,680 --> 00:16:47,060
try to guess the content out of that so

394
00:16:45,319 --> 00:16:48,649
now and that could lead into some of the

395
00:16:47,060 --> 00:16:51,109
security vulnerabilities so imagine a

396
00:16:48,649 --> 00:16:54,949
scenario where the image file got

397
00:16:51,110 --> 00:16:57,709
uploaded there is the and it has an

398
00:16:54,949 --> 00:16:59,258
extension PNG which is fine but the

399
00:16:57,709 --> 00:17:02,060
content of that file is actually an HTML

400
00:16:59,259 --> 00:17:05,689
now when you go to that image in the web

401
00:17:02,060 --> 00:17:08,000
site that means you that the HTML which

402
00:17:05,689 --> 00:17:09,530
could contain some malicious code so

403
00:17:08,000 --> 00:17:11,659
what you want to do is that's where this

404
00:17:09,530 --> 00:17:13,428
quixote header comes very handy that you

405
00:17:11,659 --> 00:17:16,280
want to tell the browser okay don't try

406
00:17:13,429 --> 00:17:17,689
to guess the content of the file rely on

407
00:17:16,280 --> 00:17:19,639
whatever the server is telling you is

408
00:17:17,689 --> 00:17:21,799
the file type okay so that that's where

409
00:17:19,640 --> 00:17:24,559
this this would be handy over there

410
00:17:21,799 --> 00:17:27,230
okay the last QT editor that I want to

411
00:17:24,559 --> 00:17:29,178
talk about is X powered by so far all

412
00:17:27,230 --> 00:17:30,679
the security areas that I talked about I

413
00:17:29,179 --> 00:17:32,750
was saying okay you need to add this

414
00:17:30,679 --> 00:17:34,669
Quixote header to improve this Quixote

415
00:17:32,750 --> 00:17:37,250
of your application but in this case

416
00:17:34,669 --> 00:17:40,010
what our solution is either to move this

417
00:17:37,250 --> 00:17:41,320
Quixote header completely or change its

418
00:17:40,010 --> 00:17:43,520
default value to something else

419
00:17:41,320 --> 00:17:45,559
generally speaking this Quixote headers

420
00:17:43,520 --> 00:17:49,850
tells you what is the what is the

421
00:17:45,559 --> 00:17:52,158
technology being used to serve the to

422
00:17:49,850 --> 00:17:53,539
serve the web server over there and this

423
00:17:52,159 --> 00:17:55,909
is an information which attackers can

424
00:17:53,539 --> 00:17:58,520
you use for the advantage they can be

425
00:17:55,909 --> 00:18:00,380
more targeted in their attacks so what

426
00:17:58,520 --> 00:18:03,379
you can do is either remove that

427
00:18:00,380 --> 00:18:05,210
completely from from the response or

428
00:18:03,380 --> 00:18:08,360
change it to something else like PHP

429
00:18:05,210 --> 00:18:09,740
let let fool the attackers over there

430
00:18:08,360 --> 00:18:11,809
let them target their

431
00:18:09,740 --> 00:18:13,820
on PHP specific attacks which will

432
00:18:11,809 --> 00:18:20,410
hopefully wanted trouble your

433
00:18:13,820 --> 00:18:22,850
application so if you have a

434
00:18:20,410 --> 00:18:26,059
authenticated sessions then it means you

435
00:18:22,850 --> 00:18:27,740
have a session to manage a strong

436
00:18:26,059 --> 00:18:30,678
password or two factor authentication

437
00:18:27,740 --> 00:18:34,280
would be useless if an attacker can get

438
00:18:30,679 --> 00:18:37,160
access to your active sessions so we

439
00:18:34,280 --> 00:18:40,820
must protect this session so one of the

440
00:18:37,160 --> 00:18:43,220
ways to protect your user session is to

441
00:18:40,820 --> 00:18:45,740
make sure the session cookie is not sent

442
00:18:43,220 --> 00:18:48,020
over HTTP what you have to do is just

443
00:18:45,740 --> 00:18:51,350
set the session cookie to be only sent

444
00:18:48,020 --> 00:18:52,820
over HTTP there was a case in 2016 where

445
00:18:51,350 --> 00:18:55,659
Facebook had the user session being

446
00:18:52,820 --> 00:18:58,850
hijacked as it turns out the users were

447
00:18:55,660 --> 00:19:01,910
connected to Facebook allocated to HTTPS

448
00:18:58,850 --> 00:19:05,540
but then downgrading to http what at the

449
00:19:01,910 --> 00:19:07,610
same time using a coffee shop Wi-Fi or

450
00:19:05,540 --> 00:19:09,820
any unsecured Wi-Fi what the hackers

451
00:19:07,610 --> 00:19:12,169
were doing they would sniff the network

452
00:19:09,820 --> 00:19:13,960
captured the session cookie and then

453
00:19:12,170 --> 00:19:16,280
take over their account

454
00:19:13,960 --> 00:19:18,860
second thing you should make sure the

455
00:19:16,280 --> 00:19:21,220
cookie is not accessible by javascript

456
00:19:18,860 --> 00:19:23,120
in the browser when I think says

457
00:19:21,220 --> 00:19:24,890
JavaScript running on the browser has no

458
00:19:23,120 --> 00:19:27,280
need to for the to access the session

459
00:19:24,890 --> 00:19:31,160
cookie - if you have XSS vulnerability

460
00:19:27,280 --> 00:19:33,678
and your cookie that such a cookie is

461
00:19:31,160 --> 00:19:36,559
accessible in the JavaScript browser in

462
00:19:33,679 --> 00:19:38,030
the browser the exercise can capture the

463
00:19:36,559 --> 00:19:38,540
session cookie and pass it on to

464
00:19:38,030 --> 00:19:42,260
attacker

465
00:19:38,540 --> 00:19:44,750
third is to change the cookie name to

466
00:19:42,260 --> 00:19:46,940
some custom values so attacker won't be

467
00:19:44,750 --> 00:19:51,470
able to fingerprint the system you're

468
00:19:46,940 --> 00:19:54,290
using to manage the session so here we

469
00:19:51,470 --> 00:19:58,250
have an example of how we use express

470
00:19:54,290 --> 00:20:02,600
session to manage our cookie the secret

471
00:19:58,250 --> 00:20:05,900
it's a it's a value used to sign the

472
00:20:02,600 --> 00:20:09,350
session cookie which prevents an

473
00:20:05,900 --> 00:20:11,990
attacker from creating a fake session

474
00:20:09,350 --> 00:20:14,719
cookie especially important in the case

475
00:20:11,990 --> 00:20:16,760
when you have the client the session

476
00:20:14,720 --> 00:20:18,350
cookie stored in the client-side the

477
00:20:16,760 --> 00:20:20,929
entire session is stored in the client

478
00:20:18,350 --> 00:20:22,918
side then attacker can make his own

479
00:20:20,929 --> 00:20:25,799
assuming you secret this week or here

480
00:20:22,919 --> 00:20:27,359
access to it the name we set it to a

481
00:20:25,799 --> 00:20:28,739
math machine ID which prevents

482
00:20:27,359 --> 00:20:32,100
fingerprinting it's not a generic name

483
00:20:28,739 --> 00:20:35,070
that everybody else uses the cookie

484
00:20:32,100 --> 00:20:36,269
sucker cuckoo flag lets the cook make

485
00:20:35,070 --> 00:20:39,689
let a brother know that the cookie

486
00:20:36,269 --> 00:20:41,609
should not be sent over HTTP after you

487
00:20:39,690 --> 00:20:44,639
authenticate if you do downgrade

488
00:20:41,609 --> 00:20:49,350
connection from HTTP to HTTPS cookie

489
00:20:44,639 --> 00:20:51,149
will not be sent HTTP only flag lets us

490
00:20:49,350 --> 00:20:52,918
know that JavaScript running on the

491
00:20:51,149 --> 00:20:59,549
browser should not have access to the

492
00:20:52,919 --> 00:21:00,299
session cookie your users intentionally

493
00:20:59,549 --> 00:21:02,600
unintentionally

494
00:21:00,299 --> 00:21:06,779
consent to many requests to your system

495
00:21:02,600 --> 00:21:09,748
normally this brute force or denial of

496
00:21:06,779 --> 00:21:13,580
service is handled on your web

497
00:21:09,749 --> 00:21:15,989
application firewall but you can augment

498
00:21:13,580 --> 00:21:19,230
the protection that's given by the woth

499
00:21:15,989 --> 00:21:21,769
on your specific API by adding either

500
00:21:19,230 --> 00:21:26,909
throttling or rate limiting

501
00:21:21,769 --> 00:21:29,970
so throttling with just delayed response

502
00:21:26,909 --> 00:21:32,190
from requests in order to slow down

503
00:21:29,970 --> 00:21:33,480
clients that sends fast too many

504
00:21:32,190 --> 00:21:36,889
requests out of giving them another time

505
00:21:33,480 --> 00:21:40,100
and rate limiting outright rejects

506
00:21:36,889 --> 00:21:44,609
clients that send too many requests

507
00:21:40,100 --> 00:21:46,230
normally slow down would create a lot of

508
00:21:44,609 --> 00:21:49,739
operations if you have too many

509
00:21:46,230 --> 00:21:52,019
slowdowns happening and a user can cause

510
00:21:49,739 --> 00:21:54,029
a dot on your system by creating a lot

511
00:21:52,019 --> 00:21:57,299
of connections and keeping them open so

512
00:21:54,029 --> 00:22:01,470
we can do usually is to pair throttling

513
00:21:57,299 --> 00:22:04,139
and rate limiting in order to slow down

514
00:22:01,470 --> 00:22:08,129
clients but for up to a given limit

515
00:22:04,139 --> 00:22:10,408
after which you start dying requests so

516
00:22:08,129 --> 00:22:12,320
here we have example of throttling and

517
00:22:10,409 --> 00:22:15,570
really limiting beings at the same time

518
00:22:12,320 --> 00:22:19,168
we create a slow down configuration that

519
00:22:15,570 --> 00:22:21,989
allows a five requests in a 15-minute

520
00:22:19,169 --> 00:22:24,509
window after which animal second delay

521
00:22:21,989 --> 00:22:26,460
is added which means the sixth request

522
00:22:24,509 --> 00:22:31,349
would take a hundred millisecond delay

523
00:22:26,460 --> 00:22:34,070
the seventh 208th 308 cetera and then we

524
00:22:31,349 --> 00:22:36,629
create a rate limiting configuration

525
00:22:34,070 --> 00:22:40,260
that allow me allows

526
00:22:36,630 --> 00:22:42,060
ten requests in a 15-minute window when

527
00:22:40,260 --> 00:22:44,790
we pay them up what will happen is a

528
00:22:42,060 --> 00:22:48,230
user that sense too many requests will

529
00:22:44,790 --> 00:22:50,310
be delayed by a hundred 200 300

530
00:22:48,230 --> 00:22:52,290
milliseconds all the way up to the tenth

531
00:22:50,310 --> 00:23:00,540
request after which the request will be

532
00:22:52,290 --> 00:23:02,639
denied with a 429 or okay C serve or

533
00:23:00,540 --> 00:23:04,710
cross-site request forgery as you all

534
00:23:02,640 --> 00:23:05,730
know is it's also one of the common

535
00:23:04,710 --> 00:23:08,460
vulnerabilities found in the web

536
00:23:05,730 --> 00:23:10,410
applications I remember it used to be

537
00:23:08,460 --> 00:23:13,290
part of the host of 10 but I was

538
00:23:10,410 --> 00:23:15,270
surprised it was not part of anymore

539
00:23:13,290 --> 00:23:17,100
it turned out that since a lot of

540
00:23:15,270 --> 00:23:19,770
application frameworks are providing

541
00:23:17,100 --> 00:23:21,330
support for that out of the box and with

542
00:23:19,770 --> 00:23:23,129
the uses of those application frameworks

543
00:23:21,330 --> 00:23:24,510
and built-in support the number of

544
00:23:23,130 --> 00:23:27,810
applications found vulnerable to this

545
00:23:24,510 --> 00:23:29,280
attack got reduced so key takeaway for

546
00:23:27,810 --> 00:23:31,889
me is okay let's make sure we keep on

547
00:23:29,280 --> 00:23:33,210
using those built-in functionalities

548
00:23:31,890 --> 00:23:36,360
over there so that it does not show up

549
00:23:33,210 --> 00:23:37,560
in the next or stop them so those who

550
00:23:36,360 --> 00:23:39,870
are not familiar the cross-site request

551
00:23:37,560 --> 00:23:42,060
forgery it is basically an attack where

552
00:23:39,870 --> 00:23:44,580
the attacker forces the user to perform

553
00:23:42,060 --> 00:23:46,770
some unwanted actions on on the website

554
00:23:44,580 --> 00:23:49,169
where they are late logged in a very

555
00:23:46,770 --> 00:23:51,000
classic example of that is a user is all

556
00:23:49,170 --> 00:23:52,830
logged into the bank website and the

557
00:23:51,000 --> 00:23:54,390
attacker forces you to transfer some of

558
00:23:52,830 --> 00:23:58,439
the cash from your account to the

559
00:23:54,390 --> 00:23:59,880
attackers account as I said applications

560
00:23:58,440 --> 00:24:02,570
are providing out-of-the-box support for

561
00:23:59,880 --> 00:24:05,400
this as no Jase is no exception to that

562
00:24:02,570 --> 00:24:07,110
there is a sea surf there's a middle

563
00:24:05,400 --> 00:24:08,310
wave called sea surf so you install that

564
00:24:07,110 --> 00:24:10,139
once you configure it with your

565
00:24:08,310 --> 00:24:12,000
application it would ottoman ate a

566
00:24:10,140 --> 00:24:14,490
randoms he surf token for you would

567
00:24:12,000 --> 00:24:16,620
write that in a cookie and then after

568
00:24:14,490 --> 00:24:19,740
that it expects that token to be present

569
00:24:16,620 --> 00:24:23,250
as part of every post port or delete

570
00:24:19,740 --> 00:24:25,290
requests coming from the browser and

571
00:24:23,250 --> 00:24:27,150
then over there what it does is the

572
00:24:25,290 --> 00:24:28,649
middle way would automatic the existence

573
00:24:27,150 --> 00:24:31,800
of a valid token is part of the request

574
00:24:28,650 --> 00:24:33,090
by default it would look into the as a

575
00:24:31,800 --> 00:24:35,220
body attribute it would look for

576
00:24:33,090 --> 00:24:36,990
underscore C surf and there are a couple

577
00:24:35,220 --> 00:24:38,940
of headers a way it would look for that

578
00:24:36,990 --> 00:24:40,110
again these are the default values but

579
00:24:38,940 --> 00:24:42,360
you can obviously change that if you

580
00:24:40,110 --> 00:24:45,120
want to just to show you an example of

581
00:24:42,360 --> 00:24:47,550
that is if you'll notice here I'm using

582
00:24:45,120 --> 00:24:49,229
a C surf protection middleware and I'm

583
00:24:47,550 --> 00:24:51,570
telling it to use the cookie

584
00:24:49,230 --> 00:24:54,090
equal to to use the cookie option what

585
00:24:51,570 --> 00:24:55,710
it means that is it should rain the sea

586
00:24:54,090 --> 00:24:58,529
surf token and write that in a cookie

587
00:24:55,710 --> 00:25:00,330
and to do that I also need to use the

588
00:24:58,529 --> 00:25:02,130
another middleware which is called

589
00:25:00,330 --> 00:25:03,809
cookie parser which is letting my

590
00:25:02,130 --> 00:25:05,700
application which is helping my

591
00:25:03,809 --> 00:25:08,610
application to manipulate the cookies

592
00:25:05,700 --> 00:25:10,470
over there once that is done I can now

593
00:25:08,610 --> 00:25:12,600
configure this middleware with all the

594
00:25:10,470 --> 00:25:16,740
routes where I want to use that here I'm

595
00:25:12,600 --> 00:25:19,709
using it explicitly ports ISA for / form

596
00:25:16,740 --> 00:25:21,299
as well as / process here I'm explicitly

597
00:25:19,710 --> 00:25:23,070
specifying that for each of the routes

598
00:25:21,299 --> 00:25:25,559
but if you want to you can very easily

599
00:25:23,070 --> 00:25:27,539
sent Li define that use by using the

600
00:25:25,559 --> 00:25:29,668
regex you can cently define it in

601
00:25:27,539 --> 00:25:31,139
mention all that out where you want to

602
00:25:29,669 --> 00:25:33,510
apply that so that you don't need to

603
00:25:31,139 --> 00:25:35,129
worry about that for each endpoint now

604
00:25:33,510 --> 00:25:37,500
if you look at this / process endpoint

605
00:25:35,130 --> 00:25:39,990
one thing important to highlight here is

606
00:25:37,500 --> 00:25:41,970
this middleware the Caesar protection

607
00:25:39,990 --> 00:25:44,760
would automatic for the existence of a

608
00:25:41,970 --> 00:25:46,830
valid C surf token if it's there only

609
00:25:44,760 --> 00:25:48,929
then it will proceed otherwise it will

610
00:25:46,830 --> 00:25:50,340
reject the request automatically so from

611
00:25:48,929 --> 00:25:52,260
the developer perspective it's making

612
00:25:50,340 --> 00:25:53,730
our life very easy in terms of we don't

613
00:25:52,260 --> 00:25:56,070
need to worry about that handling it for

614
00:25:53,730 --> 00:25:58,080
each method that this middleware is

615
00:25:56,070 --> 00:25:59,730
going to take care of it for us and the

616
00:25:58,080 --> 00:26:02,820
other thing is as part of / form

617
00:25:59,730 --> 00:26:04,440
endpoint I am also passing the CFO can

618
00:26:02,820 --> 00:26:07,049
explicitly right now to the model

619
00:26:04,440 --> 00:26:08,850
attributes so let's look into the to the

620
00:26:07,049 --> 00:26:11,429
UI code of that and that will make more

621
00:26:08,850 --> 00:26:14,189
sense so if if you look at over here is

622
00:26:11,429 --> 00:26:15,720
the I'm assuming itself I am showing a

623
00:26:14,190 --> 00:26:19,260
very very simplified version of the

624
00:26:15,720 --> 00:26:19,620
example where it's a HTML form and Here

625
00:26:19,260 --> 00:26:22,740
I am

626
00:26:19,620 --> 00:26:24,418
I haven't hidden input field and this is

627
00:26:22,740 --> 00:26:26,880
where I'm using the CF token pass from

628
00:26:24,419 --> 00:26:28,230
the controller and one the form when the

629
00:26:26,880 --> 00:26:31,279
form would be submitted this value would

630
00:26:28,230 --> 00:26:34,740
be part of the the request as well now

631
00:26:31,279 --> 00:26:36,210
technically speaking okay there is one

632
00:26:34,740 --> 00:26:37,980
issue that I see with this approach that

633
00:26:36,210 --> 00:26:39,899
what it means that for every request

634
00:26:37,980 --> 00:26:41,840
every page Whitney should be tender now

635
00:26:39,899 --> 00:26:43,799
you need to pass the CF token over there

636
00:26:41,840 --> 00:26:45,809
technically speaking you don't need to

637
00:26:43,799 --> 00:26:48,029
do that because you already have the CC

638
00:26:45,809 --> 00:26:50,370
of token as part of your cookie so what

639
00:26:48,029 --> 00:26:52,679
you can do is you can technically

640
00:26:50,370 --> 00:26:54,809
speaking ultimately extract the token

641
00:26:52,679 --> 00:26:56,669
from the cookie and have something

642
00:26:54,809 --> 00:26:59,250
middleware or something written on the

643
00:26:56,669 --> 00:27:00,809
on your JavaScript or H UI side to

644
00:26:59,250 --> 00:27:02,880
automatically pass that as part of the

645
00:27:00,809 --> 00:27:05,460
request and this is a

646
00:27:02,880 --> 00:27:06,929
let me complete that and it is that so

647
00:27:05,460 --> 00:27:08,730
and there is something which some of the

648
00:27:06,929 --> 00:27:09,960
middle viewers are are doing it sorry

649
00:27:08,730 --> 00:27:12,269
some of the single paid application

650
00:27:09,960 --> 00:27:15,419
frameworks are only doing it like

651
00:27:12,269 --> 00:27:17,399
angular that's one of them is it already

652
00:27:15,419 --> 00:27:20,850
supports this mechanism where it reads

653
00:27:17,399 --> 00:27:23,750
the the the value from the cookie and

654
00:27:20,850 --> 00:27:27,570
then inject that as part the request

655
00:27:23,750 --> 00:27:29,370
benefit of that approach is the it makes

656
00:27:27,570 --> 00:27:31,769
it very seamless for the developer even

657
00:27:29,370 --> 00:27:32,689
on the UI side so both on the UI in back

658
00:27:31,769 --> 00:27:35,820
and you don't need to worry about

659
00:27:32,690 --> 00:27:38,279
explicitly managing the see surfed open

660
00:27:35,820 --> 00:27:39,899
for every request the UI needs to send

661
00:27:38,279 --> 00:27:41,759
or at the back end you need to validate

662
00:27:39,899 --> 00:27:45,389
I was not saying that you should verify

663
00:27:41,759 --> 00:27:47,669
the cookie okay let me go back to this

664
00:27:45,389 --> 00:27:50,039
slide okay here I am not checking the

665
00:27:47,669 --> 00:27:51,929
cookie for so what I'm expecting the

666
00:27:50,039 --> 00:27:53,460
value of the token should be part of the

667
00:27:51,929 --> 00:27:55,139
request headers or the body

668
00:27:53,460 --> 00:27:57,659
I'm not verifying it based on the cookie

669
00:27:55,139 --> 00:28:00,000
the cookie is only being sent to the UI

670
00:27:57,659 --> 00:28:01,980
so that you I can extract the token out

671
00:28:00,000 --> 00:28:04,289
of that but it is still send that as far

672
00:28:01,980 --> 00:28:05,669
as the request headers or body okay yes

673
00:28:04,289 --> 00:28:07,230
so make sense he we should not be

674
00:28:05,669 --> 00:28:08,779
relying on the cookie to verify that

675
00:28:07,230 --> 00:28:14,669
obviously that defeats the purpose right

676
00:28:08,779 --> 00:28:19,799
so good question okay just the question

677
00:28:14,669 --> 00:28:22,019
for validation so injection is number

678
00:28:19,799 --> 00:28:25,019
one you know our top ten vulnerabilities

679
00:28:22,019 --> 00:28:26,960
and the best way you can prevent

680
00:28:25,019 --> 00:28:29,700
injection is one of the best ways to be

681
00:28:26,960 --> 00:28:32,159
prevent injections to do improv

682
00:28:29,700 --> 00:28:35,789
validation injection is any unattended

683
00:28:32,159 --> 00:28:37,500
execution of code it can it can happen

684
00:28:35,789 --> 00:28:39,149
from any input coming from the user so

685
00:28:37,500 --> 00:28:41,940
any input coming from the user should be

686
00:28:39,149 --> 00:28:48,719
suspect and should be validated it can

687
00:28:41,940 --> 00:28:49,679
cause data loss data diversion and one

688
00:28:48,720 --> 00:28:50,070
of the most damaging things that can

689
00:28:49,679 --> 00:28:52,919
happen

690
00:28:50,070 --> 00:28:55,259
unlike XSS which can affect one of you

691
00:28:52,919 --> 00:28:58,399
users injection affects your entire

692
00:28:55,259 --> 00:29:01,470
system on all the users in your system

693
00:28:58,399 --> 00:29:03,629
so one of the things to do is you have

694
00:29:01,470 --> 00:29:06,000
to validate your input early in the

695
00:29:03,629 --> 00:29:08,939
controller before you waste any CPU

696
00:29:06,000 --> 00:29:11,519
cycles on the data before it gets to any

697
00:29:08,940 --> 00:29:14,549
of your business logic you should log

698
00:29:11,519 --> 00:29:16,260
your input validation failures because

699
00:29:14,549 --> 00:29:20,220
that's the only way you can tell

700
00:29:16,260 --> 00:29:22,350
if you have any false negatives and or

701
00:29:20,220 --> 00:29:25,410
have any ongoing attacks that are

702
00:29:22,350 --> 00:29:27,860
happening in production like I was

703
00:29:25,410 --> 00:29:34,350
saying any input coming from the user

704
00:29:27,860 --> 00:29:36,809
could cause a injection header query

705
00:29:34,350 --> 00:29:40,649
parameter for example have said here

706
00:29:36,809 --> 00:29:43,860
normally the the browser controls the

707
00:29:40,650 --> 00:29:48,150
header and the cookie but a malicious

708
00:29:43,860 --> 00:29:50,870
user can modify these to cause a dick

709
00:29:48,150 --> 00:29:55,890
shock on your system alternative to

710
00:29:50,870 --> 00:29:57,870
rejecting bad inputs is to sanitize so

711
00:29:55,890 --> 00:29:59,580
that you can keep the values okay and

712
00:29:57,870 --> 00:30:02,070
keep all the rest

713
00:29:59,580 --> 00:30:05,340
here an example of how we validate and

714
00:30:02,070 --> 00:30:08,070
put using XPath validator we use the

715
00:30:05,340 --> 00:30:11,909
accessibility middleware and then in our

716
00:30:08,070 --> 00:30:13,860
controller we checked ID param and name

717
00:30:11,910 --> 00:30:17,309
query the ID is checked to make sure

718
00:30:13,860 --> 00:30:20,360
it's a base64 and the name is checks to

719
00:30:17,309 --> 00:30:23,280
make sure it's between length 10 and 128

720
00:30:20,360 --> 00:30:26,610
after which if there's any errors we

721
00:30:23,280 --> 00:30:31,470
return with a 400 along with the errors

722
00:30:26,610 --> 00:30:33,360
found in order to sanitize we just

723
00:30:31,470 --> 00:30:36,510
congest the element a previous example

724
00:30:33,360 --> 00:30:40,020
by calling the whitelist function what

725
00:30:36,510 --> 00:30:41,850
we do is from the name value it would

726
00:30:40,020 --> 00:30:43,950
ship all the characters they are not

727
00:30:41,850 --> 00:30:46,350
within a given list and then you can

728
00:30:43,950 --> 00:30:51,570
instead of rejecting you can keep the

729
00:30:46,350 --> 00:30:53,610
value okay so so far we talked about

730
00:30:51,570 --> 00:30:55,520
different mechanisms which you can use

731
00:30:53,610 --> 00:30:57,899
to make your code more secure in node.js

732
00:30:55,520 --> 00:31:00,570
but generally speaking our applications

733
00:30:57,900 --> 00:31:02,250
have lot of dependencies in node.js what

734
00:31:00,570 --> 00:31:04,409
about those do you feel that your

735
00:31:02,250 --> 00:31:05,730
dependencies are secure

736
00:31:04,410 --> 00:31:08,880
what about your dependencies of

737
00:31:05,730 --> 00:31:10,679
dependencies ok this reminds me that

738
00:31:08,880 --> 00:31:12,090
since I'm at less con and I believe I

739
00:31:10,679 --> 00:31:13,679
was leading the speaker agreement

740
00:31:12,090 --> 00:31:16,610
somewhere that I need to bring up almost

741
00:31:13,679 --> 00:31:19,320
every 10 minutes so that's the time now

742
00:31:16,610 --> 00:31:22,080
so yes the using the components with the

743
00:31:19,320 --> 00:31:24,299
normal empties is also one of the as

744
00:31:22,080 --> 00:31:27,960
part of also one of the top 10 issues of

745
00:31:24,299 --> 00:31:29,520
Oz and when you use a component with

746
00:31:27,960 --> 00:31:30,040
normal entities that can also impact the

747
00:31:29,520 --> 00:31:32,710
security of

748
00:31:30,040 --> 00:31:33,340
application so as this other thing at

749
00:31:32,710 --> 00:31:36,820
the start

750
00:31:33,340 --> 00:31:38,139
NPM has a great repository which

751
00:31:36,820 --> 00:31:40,240
provides a lot of things out of the box

752
00:31:38,140 --> 00:31:42,070
and that makes our life very easy as

753
00:31:40,240 --> 00:31:43,900
developers that we can more focused on

754
00:31:42,070 --> 00:31:45,669
the business requirements rather than

755
00:31:43,900 --> 00:31:46,630
implementing on those common

756
00:31:45,670 --> 00:31:48,670
functionalities which are already

757
00:31:46,630 --> 00:31:51,760
available there but that comes at a cost

758
00:31:48,670 --> 00:31:53,410
that if those components have some

759
00:31:51,760 --> 00:31:55,300
security vulnerabilities that can affect

760
00:31:53,410 --> 00:31:56,980
your application as well and some of

761
00:31:55,300 --> 00:31:59,200
those vulnerabilities are unintentional

762
00:31:56,980 --> 00:32:00,700
which are most of the cases but some of

763
00:31:59,200 --> 00:32:03,700
the those could be intentional as well

764
00:32:00,700 --> 00:32:05,290
there are some cases where some of the

765
00:32:03,700 --> 00:32:07,660
contributors end up committing malicious

766
00:32:05,290 --> 00:32:10,389
code on purpose so just to give an

767
00:32:07,660 --> 00:32:12,970
example of that is those who have used

768
00:32:10,390 --> 00:32:14,680
node Ria's at not sure if you are

769
00:32:12,970 --> 00:32:16,450
familiar with this but it's an

770
00:32:14,680 --> 00:32:17,650
interesting thing to be aware of so

771
00:32:16,450 --> 00:32:21,250
there's a package called even stream

772
00:32:17,650 --> 00:32:22,630
it's a very common package it's

773
00:32:21,250 --> 00:32:24,460
basically a toolkit which lets you

774
00:32:22,630 --> 00:32:27,070
manipulate the data streams very easily

775
00:32:24,460 --> 00:32:28,630
and it's it's a very popular package I

776
00:32:27,070 --> 00:32:32,800
last week I checked it was still getting

777
00:32:28,630 --> 00:32:34,420
like 1.5 million weekly downloads in its

778
00:32:32,800 --> 00:32:36,639
its dependency or one of the very common

779
00:32:34,420 --> 00:32:38,440
packages like go which those who are

780
00:32:36,640 --> 00:32:40,600
using node.js are familiar must be

781
00:32:38,440 --> 00:32:44,380
friendiy with it helps you automate some

782
00:32:40,600 --> 00:32:45,760
of your development workflows so what

783
00:32:44,380 --> 00:32:47,550
happened last year there was a new

784
00:32:45,760 --> 00:32:49,990
version of this package got released and

785
00:32:47,550 --> 00:32:51,940
the contributor end up adding a new

786
00:32:49,990 --> 00:32:55,090
dependency called flatmap stream ok

787
00:32:51,940 --> 00:32:56,830
nothing unusual well it turned out the

788
00:32:55,090 --> 00:32:58,449
modified code was stealing the Bitcoin

789
00:32:56,830 --> 00:33:00,399
from the developers machine it was

790
00:32:58,450 --> 00:33:02,020
reportedly being transferring those

791
00:33:00,400 --> 00:33:05,500
funds to a server located in Kuala

792
00:33:02,020 --> 00:33:08,020
Lumpur and the crazy part for me is this

793
00:33:05,500 --> 00:33:09,520
remain undetected for two months for two

794
00:33:08,020 --> 00:33:11,740
months nobody was able to figure it out

795
00:33:09,520 --> 00:33:14,650
and the main reason was the flat machine

796
00:33:11,740 --> 00:33:16,480
code was encrypted over there so nobody

797
00:33:14,650 --> 00:33:18,250
was a per ticket out until I destroyed

798
00:33:16,480 --> 00:33:20,860
was able to get into that and figure it

799
00:33:18,250 --> 00:33:22,720
out so what what should we do as

800
00:33:20,860 --> 00:33:24,399
developers should we forget about all

801
00:33:22,720 --> 00:33:26,590
the packages which are there in the in

802
00:33:24,400 --> 00:33:28,810
the NPM repository in start writing

803
00:33:26,590 --> 00:33:31,030
everything from scratch ok obviously

804
00:33:28,810 --> 00:33:32,530
doesn't make sense right so what you

805
00:33:31,030 --> 00:33:36,340
want to do is you want to invest in some

806
00:33:32,530 --> 00:33:38,080
180 scanning tools and they are bunch of

807
00:33:36,340 --> 00:33:40,179
those available I just get listed few of

808
00:33:38,080 --> 00:33:42,509
those there are few free tools available

809
00:33:40,180 --> 00:33:45,029
few commercial tools available as well I

810
00:33:42,509 --> 00:33:46,769
mainly focusing on NPM audit but there

811
00:33:45,029 --> 00:33:49,289
are few commercial tools I listed which

812
00:33:46,769 --> 00:33:51,690
I found seems to be most famous one

813
00:33:49,289 --> 00:33:53,099
again I'm not endorsing any of those and

814
00:33:51,690 --> 00:33:55,559
I want to be very clear I'm not gonna

815
00:33:53,099 --> 00:33:57,599
get any cut out of their sales so up to

816
00:33:55,559 --> 00:34:00,629
you guys to try it out

817
00:33:57,599 --> 00:34:02,489
so for NPM audit a quick history on that

818
00:34:00,629 --> 00:34:05,039
there is you stream a product called

819
00:34:02,489 --> 00:34:07,320
node security platform and it's means

820
00:34:05,039 --> 00:34:09,538
mean responsibility was to check your

821
00:34:07,320 --> 00:34:12,058
installed node modules and look for

822
00:34:09,539 --> 00:34:13,829
known vulnerabilities in against an open

823
00:34:12,059 --> 00:34:15,960
source TV database

824
00:34:13,829 --> 00:34:20,339
what NPM did it ended buying that

825
00:34:15,960 --> 00:34:22,079
product and then it it shipped that as

826
00:34:20,339 --> 00:34:24,058
part of the NPM style shipping it as

827
00:34:22,079 --> 00:34:25,529
part the NPM out of the box so as the

828
00:34:24,059 --> 00:34:27,419
developer it was very good for me when

829
00:34:25,529 --> 00:34:29,639
I'm installing my packages it was

830
00:34:27,418 --> 00:34:31,440
already checking the the vulnerabilities

831
00:34:29,639 --> 00:34:33,029
for my packages over there as far the

832
00:34:31,440 --> 00:34:34,889
NPM install I don't need to do something

833
00:34:33,029 --> 00:34:37,049
separately it was already telling me

834
00:34:34,889 --> 00:34:38,579
okay once the packet is installed how

835
00:34:37,049 --> 00:34:41,069
many of those have the liberties over

836
00:34:38,579 --> 00:34:42,059
there so that was telling you

837
00:34:41,069 --> 00:34:44,219
out-of-the-box you don't need to do

838
00:34:42,059 --> 00:34:46,409
something extra for that what they did

839
00:34:44,219 --> 00:34:48,268
even better they went one step ahead and

840
00:34:46,409 --> 00:34:50,190
they introduced a command-line utility

841
00:34:48,268 --> 00:34:53,158
to even fix those vulnerabilities for

842
00:34:50,190 --> 00:34:55,470
you so just to show you an example I'd

843
00:34:53,159 --> 00:34:57,990
end this tool on my one of my simple

844
00:34:55,469 --> 00:35:01,019
project it identified there 135 or

845
00:34:57,990 --> 00:35:03,538
liberties with hundred plus is high my

846
00:35:01,019 --> 00:35:05,220
liberties one critical and again keep in

847
00:35:03,539 --> 00:35:07,140
mind I'm just showing you this summarize

848
00:35:05,220 --> 00:35:08,730
we over here when you would run that you

849
00:35:07,140 --> 00:35:10,078
would see there's a big output there

850
00:35:08,730 --> 00:35:11,579
telling you for each of the

851
00:35:10,079 --> 00:35:14,789
vulnerabilities what's the path over

852
00:35:11,579 --> 00:35:16,859
there in which version this is patch etc

853
00:35:14,789 --> 00:35:18,990
so it would give you more details now

854
00:35:16,859 --> 00:35:20,578
when you run the NPR moderate fix it was

855
00:35:18,990 --> 00:35:22,529
ultimately able to update four of my

856
00:35:20,579 --> 00:35:25,500
packages and if you not sure if you can

857
00:35:22,529 --> 00:35:27,000
see it it was able to fix more than 50%

858
00:35:25,500 --> 00:35:29,130
of the vulnerabilities it found in the

859
00:35:27,000 --> 00:35:30,690
first place and for other three pack it

860
00:35:29,130 --> 00:35:32,130
is it said okay that those three

861
00:35:30,690 --> 00:35:34,140
packages are available which should fix

862
00:35:32,130 --> 00:35:36,089
the issue but they contain some of the

863
00:35:34,140 --> 00:35:38,098
breaking changes and mainly the breaking

864
00:35:36,089 --> 00:35:40,920
changes the criteria for them is if

865
00:35:38,099 --> 00:35:42,720
there is a minor version upgrade they

866
00:35:40,920 --> 00:35:43,589
would upgrade that automatically for any

867
00:35:42,720 --> 00:35:45,118
major update

868
00:35:43,589 --> 00:35:46,980
they won't update that automatically

869
00:35:45,119 --> 00:35:48,329
would tell you that it's available you

870
00:35:46,980 --> 00:35:50,609
can upgrade that menu and try it out

871
00:35:48,329 --> 00:35:52,349
there is an option to force the update

872
00:35:50,609 --> 00:35:54,328
as well in that case again that's not

873
00:35:52,349 --> 00:35:55,410
recommended because you want to be when

874
00:35:54,329 --> 00:35:56,880
you are trying to figure

875
00:35:55,410 --> 00:35:59,069
the breaking changes you want to

876
00:35:56,880 --> 00:36:00,869
probably update them one by one a bleed

877
00:35:59,069 --> 00:36:02,700
one verified still working for you then

878
00:36:00,869 --> 00:36:04,049
try to update the second one so that if

879
00:36:02,700 --> 00:36:10,439
there is some breaking changes you can

880
00:36:04,049 --> 00:36:12,900
identify that easily so in addition to

881
00:36:10,440 --> 00:36:15,720
the recommend already made some of these

882
00:36:12,900 --> 00:36:18,299
you want to do is you want to make sure

883
00:36:15,720 --> 00:36:20,189
you're not storing any secrets in code

884
00:36:18,299 --> 00:36:22,230
or in clear anywhere it could be your

885
00:36:20,190 --> 00:36:23,880
passphrase or a key they should not be

886
00:36:22,230 --> 00:36:25,710
in clear anywhere in your system should

887
00:36:23,880 --> 00:36:27,930
be encrypted you should also not store

888
00:36:25,710 --> 00:36:30,480
it along with your code in your repo

889
00:36:27,930 --> 00:36:32,730
what you can do you can use vault or an

890
00:36:30,480 --> 00:36:34,470
orchestrated managed system the store

891
00:36:32,730 --> 00:36:37,849
securely and also get it to your running

892
00:36:34,470 --> 00:36:40,618
application you should catch exceptions

893
00:36:37,849 --> 00:36:43,829
especially in the case of node since

894
00:36:40,619 --> 00:36:46,049
it's a single track until single

895
00:36:43,829 --> 00:36:48,269
threaded application exceptions that

896
00:36:46,049 --> 00:36:52,200
bubble up to the top can cause your

897
00:36:48,269 --> 00:36:53,490
application to fail and any user input

898
00:36:52,200 --> 00:36:55,769
that can make your application

899
00:36:53,490 --> 00:36:58,258
consistently crash can cause a denial

900
00:36:55,769 --> 00:37:00,990
service on your system you should make

901
00:36:58,259 --> 00:37:05,160
sure your stack trace is that's sent to

902
00:37:00,990 --> 00:37:07,439
the user if a user can see how your the

903
00:37:05,160 --> 00:37:09,118
internals of your system is you can hone

904
00:37:07,440 --> 00:37:13,039
our attacks to your system and make it

905
00:37:09,119 --> 00:37:15,690
easier to take it down you should log a

906
00:37:13,039 --> 00:37:18,509
lot of issued ID logging to your system

907
00:37:15,690 --> 00:37:20,569
and you also monitor it in production if

908
00:37:18,509 --> 00:37:23,130
you don't log it then you cannot tell

909
00:37:20,569 --> 00:37:25,950
any issues are going on it makes it very

910
00:37:23,130 --> 00:37:27,720
difficult to trace any issues on top of

911
00:37:25,950 --> 00:37:29,129
that if you don't monitor it you will

912
00:37:27,720 --> 00:37:31,140
not be able to detect any ongoing

913
00:37:29,130 --> 00:37:37,680
attacks or issues you might have a new

914
00:37:31,140 --> 00:37:40,769
system so to summarize you should use

915
00:37:37,680 --> 00:37:42,779
end-to-end encryption in your system you

916
00:37:40,769 --> 00:37:44,669
should configure your HTTP security

917
00:37:42,779 --> 00:37:47,730
headers to utilize the security provided

918
00:37:44,670 --> 00:37:49,619
by browsers if you have authenticated

919
00:37:47,730 --> 00:37:51,839
sessions then you must secure those

920
00:37:49,619 --> 00:37:55,289
active sessions otherwise will be that

921
00:37:51,839 --> 00:37:58,619
easy entry point for attackers user

922
00:37:55,289 --> 00:38:00,259
argument das protection provided by you

923
00:37:58,619 --> 00:38:02,700
off by adding

924
00:38:00,259 --> 00:38:07,319
throttling or rate limiting to your

925
00:38:02,700 --> 00:38:08,939
specific api's if you have put the lead

926
00:38:07,319 --> 00:38:12,150
post or any

927
00:38:08,940 --> 00:38:13,350
side effect end points that cost hide

928
00:38:12,150 --> 00:38:16,650
effect on your system you should add

929
00:38:13,350 --> 00:38:18,450
CSRF protection to them improve our

930
00:38:16,650 --> 00:38:20,820
diction is one of the best ways to

931
00:38:18,450 --> 00:38:23,700
prevent injection attacks on your system

932
00:38:20,820 --> 00:38:26,310
last but not least you just check

933
00:38:23,700 --> 00:38:28,890
third-party dependencies owner abilities

934
00:38:26,310 --> 00:38:30,570
because any vulnerability and therapy

935
00:38:28,890 --> 00:38:34,680
and libraries that you use can cause

936
00:38:30,570 --> 00:38:37,440
security holes in your system thank you

937
00:38:34,680 --> 00:38:42,759
now it's time for questions

938
00:38:37,440 --> 00:38:42,760
[Applause]

939
00:38:48,930 --> 00:38:50,990
you

