1
00:00:11,940 --> 00:00:32,278
[Music]

2
00:00:34,390 --> 00:00:46,670
thank you all right so thank you for

3
00:00:39,110 --> 00:00:50,540
calling this is a talk so the top is on

4
00:00:46,670 --> 00:00:54,470
a reversing light side JavaScript using

5
00:00:50,540 --> 00:00:58,239
the chrome dev tools protocol and will

6
00:00:54,470 --> 00:00:59,920
see what I mean by that in just a moment

7
00:00:58,239 --> 00:01:03,979
should be fun

8
00:00:59,920 --> 00:01:05,689
hopefully so I'm a father and husband

9
00:01:03,979 --> 00:01:08,990
my senior apprehensions cubicles whole

10
00:01:05,689 --> 00:01:13,699
turn and envision basically repeating

11
00:01:08,990 --> 00:01:17,390
stuff security engineer for a sec ops

12
00:01:13,700 --> 00:01:19,700
team I work doing a familias a developer

13
00:01:17,390 --> 00:01:22,220
before that working on the net angular

14
00:01:19,700 --> 00:01:24,140
and other stuff was consulting as a

15
00:01:22,220 --> 00:01:27,289
developer so it's a bunch of different

16
00:01:24,140 --> 00:01:27,979
stuff did other stuff before that really

17
00:01:27,290 --> 00:01:30,680
help desk

18
00:01:27,979 --> 00:01:35,030
boring stuff I'm a fan of the gold

19
00:01:30,680 --> 00:01:36,920
language and I like messing with fancy

20
00:01:35,030 --> 00:01:41,510
frameworks like angular things like that

21
00:01:36,920 --> 00:01:43,490
and also Microsoft stuff so some

22
00:01:41,510 --> 00:01:44,090
disclaimers nothing in this demo is

23
00:01:43,490 --> 00:01:47,589
illegal

24
00:01:44,090 --> 00:01:50,180
I don't think so anyway hope it isn't

25
00:01:47,590 --> 00:01:53,120
it's just front end behavior they'll be

26
00:01:50,180 --> 00:01:55,280
playing with and messing with known

27
00:01:53,120 --> 00:01:57,890
modifying server requests I'm not doing

28
00:01:55,280 --> 00:02:00,400
any sort of exploitation just exploring

29
00:01:57,890 --> 00:02:07,250
code and exploring front-end

30
00:02:00,400 --> 00:02:09,590
functionality cool so myself kind of we

31
00:02:07,250 --> 00:02:12,220
are talking about refreshing javascript

32
00:02:09,590 --> 00:02:17,720
since there's no like we're you know

33
00:02:12,220 --> 00:02:20,989
running a immunity or disassembling a

34
00:02:17,720 --> 00:02:23,239
binary so what I mean it's basically

35
00:02:20,989 --> 00:02:26,330
conducting in-depth reviews of front-end

36
00:02:23,239 --> 00:02:29,090
code of different applications in order

37
00:02:26,330 --> 00:02:31,909
to infer that it is necessary to a lot

38
00:02:29,090 --> 00:02:34,790
of times to understand minify or web pop

39
00:02:31,909 --> 00:02:39,048
code that can be very difficult to make

40
00:02:34,790 --> 00:02:41,298
sense out of this can be accomplished

41
00:02:39,049 --> 00:02:44,670
through dynamic volume in the chrome

42
00:02:41,299 --> 00:02:48,590
console and one of the things that

43
00:02:44,670 --> 00:02:52,530
to do to you as well to help me explore

44
00:02:48,590 --> 00:02:54,510
JavaScript applications was to inject a

45
00:02:52,530 --> 00:02:56,760
JavaScript code and helper functions

46
00:02:54,510 --> 00:02:59,340
this is something that I found that I

47
00:02:56,760 --> 00:03:03,179
wanted to mess with when I was doing

48
00:02:59,340 --> 00:03:05,959
different types of penetration testing

49
00:03:03,180 --> 00:03:09,240
assessments for applications where

50
00:03:05,959 --> 00:03:12,300
basically I would look at the front end

51
00:03:09,240 --> 00:03:14,819
code and then think or have a suspicion

52
00:03:12,300 --> 00:03:16,920
that something is just being handled on

53
00:03:14,819 --> 00:03:19,170
the front end and then if I could bypass

54
00:03:16,920 --> 00:03:20,899
certain validations there I could see

55
00:03:19,170 --> 00:03:23,070
more functionality and things to that

56
00:03:20,900 --> 00:03:27,590
just because they were not doing maybe

57
00:03:23,070 --> 00:03:27,590
the sufficient work on the back end so

58
00:03:27,680 --> 00:03:33,360
also wanted to modify just JavaScript

59
00:03:30,480 --> 00:03:36,209
code on page loads and inject my own

60
00:03:33,360 --> 00:03:40,110
helper functions and set breakpoints

61
00:03:36,209 --> 00:03:43,320
based on several requests calls and

62
00:03:40,110 --> 00:03:46,110
things of that and in doing so then you

63
00:03:43,320 --> 00:03:48,000
are basically getting an understanding

64
00:03:46,110 --> 00:03:52,489
of how an application works from the

65
00:03:48,000 --> 00:03:56,400
front-end be able to see the code in a

66
00:03:52,489 --> 00:03:58,620
more clear manner and then from there

67
00:03:56,400 --> 00:04:00,000
you can explore different functionality

68
00:03:58,620 --> 00:04:05,519
and try to see what interesting things

69
00:04:00,000 --> 00:04:07,950
you can do so all the times I have been

70
00:04:05,519 --> 00:04:12,140
out of penetration tester for

71
00:04:07,950 --> 00:04:15,530
applications primarily I open a

72
00:04:12,140 --> 00:04:18,478
application if it is completely dynamic

73
00:04:15,530 --> 00:04:20,430
the assessment meaning I don't get the

74
00:04:18,478 --> 00:04:23,370
code for doing any sort of static

75
00:04:20,430 --> 00:04:27,210
analysis then this is what you usually

76
00:04:23,370 --> 00:04:31,410
get so what the newer applications have

77
00:04:27,210 --> 00:04:33,299
older JavaScript code minified at the

78
00:04:31,410 --> 00:04:38,160
very least if not they're just using

79
00:04:33,300 --> 00:04:40,289
webpack to just basically bundle every

80
00:04:38,160 --> 00:04:43,229
single javascript file that's being used

81
00:04:40,289 --> 00:04:45,630
into one nice compressed file and that

82
00:04:43,229 --> 00:04:49,380
makes it kind of hard or very difficult

83
00:04:45,630 --> 00:04:53,010
if you want to do in-depth reviews of

84
00:04:49,380 --> 00:04:55,250
front-end code so then the goal was to

85
00:04:53,010 --> 00:04:58,090
understand how from an application

86
00:04:55,250 --> 00:05:01,170
functions the code level

87
00:04:58,090 --> 00:05:04,270
modify code as needed test client-side

88
00:05:01,170 --> 00:05:06,130
vulnerabilities and to test for missing

89
00:05:04,270 --> 00:05:06,789
functional functional level access

90
00:05:06,130 --> 00:05:10,480
control

91
00:05:06,790 --> 00:05:12,010
at the backend level doing this by

92
00:05:10,480 --> 00:05:14,650
eliminating client-side restrictions

93
00:05:12,010 --> 00:05:17,940
through modification of code and things

94
00:05:14,650 --> 00:05:22,570
of that that do things like validation

95
00:05:17,940 --> 00:05:24,820
and apply security by cutie - so meaning

96
00:05:22,570 --> 00:05:27,520
maybe there are front-end controls are

97
00:05:24,820 --> 00:05:29,110
preventing you from seeing admin

98
00:05:27,520 --> 00:05:31,030
functionality but then that's all that's

99
00:05:29,110 --> 00:05:38,470
in place is just front-end stuff that

100
00:05:31,030 --> 00:05:40,150
you should be able to bypass so what do

101
00:05:38,470 --> 00:05:42,370
we want to mess with another step

102
00:05:40,150 --> 00:05:46,989
fronting code anyway so what more more

103
00:05:42,370 --> 00:05:48,550
applications are using fancy or first of

104
00:05:46,990 --> 00:05:50,560
all they're relying on full stack

105
00:05:48,550 --> 00:05:53,350
developers who can write several client

106
00:05:50,560 --> 00:05:56,560
code sometimes this makes it easier to

107
00:05:53,350 --> 00:05:58,780
write box by a million server but per

108
00:05:56,560 --> 00:06:00,340
minute some security measures the

109
00:05:58,780 --> 00:06:02,590
ability to examine fronting code in

110
00:06:00,340 --> 00:06:05,530
depth can find out it's flying at this

111
00:06:02,590 --> 00:06:08,020
kind of box and that's a developer app

112
00:06:05,530 --> 00:06:11,229
make dumb mistakes myself so I know that

113
00:06:08,020 --> 00:06:13,510
there are things that mistakes are easy

114
00:06:11,230 --> 00:06:18,640
to make as a developer on a full stack

115
00:06:13,510 --> 00:06:20,800
developer also many front-end frameworks

116
00:06:18,640 --> 00:06:24,340
can be complicated at the end of solve

117
00:06:20,800 --> 00:06:25,000
like razor or jQuery as far as client

118
00:06:24,340 --> 00:06:28,030
side stuff

119
00:06:25,000 --> 00:06:30,400
hey tracer complicated J's frameworks

120
00:06:28,030 --> 00:06:31,020
can easily mash very accidental security

121
00:06:30,400 --> 00:06:33,460
bugs

122
00:06:31,020 --> 00:06:35,650
yeah like I said I have written such

123
00:06:33,460 --> 00:06:38,049
accidental bugs because you're jumping

124
00:06:35,650 --> 00:06:42,700
between front end stuff like writing

125
00:06:38,050 --> 00:06:45,010
angular and going back to the net for

126
00:06:42,700 --> 00:06:48,930
instance and jumping back and forth and

127
00:06:45,010 --> 00:06:51,520
that you might miss something and a half

128
00:06:48,930 --> 00:06:53,350
and also figure will be fun to find this

129
00:06:51,520 --> 00:06:58,810
box by reversed in front of

130
00:06:53,350 --> 00:07:00,640
functionality so I kind of gave up with

131
00:06:58,810 --> 00:07:04,110
the idea of doing anything interesting

132
00:07:00,640 --> 00:07:06,159
there I just continue doing my typical

133
00:07:04,110 --> 00:07:07,630
appendage work and then I saw this

134
00:07:06,160 --> 00:07:10,360
article that I thought was pretty

135
00:07:07,630 --> 00:07:11,620
interesting by a guy whose name I should

136
00:07:10,360 --> 00:07:16,270
I probably remember

137
00:07:11,620 --> 00:07:18,190
but I suck at names so his name I don't

138
00:07:16,270 --> 00:07:19,750
know where this it's right there the

139
00:07:18,190 --> 00:07:22,360
username it's the article is

140
00:07:19,750 --> 00:07:25,480
intercepting modifying responses with

141
00:07:22,360 --> 00:07:27,910
chrome be adaptive protocol so human

142
00:07:25,480 --> 00:07:30,540
cycle explain Kyle in his company shape

143
00:07:27,910 --> 00:07:32,920
security I believe for this they use

144
00:07:30,540 --> 00:07:36,790
this thing called the chrome dev tools

145
00:07:32,920 --> 00:07:40,480
protocol to modify requests and

146
00:07:36,790 --> 00:07:42,330
responses from applications and they do

147
00:07:40,480 --> 00:07:45,910
this a lot of times when they're doing

148
00:07:42,330 --> 00:07:48,130
things like IR incident response and

149
00:07:45,910 --> 00:07:50,350
trying to look up malicious

150
00:07:48,130 --> 00:07:55,060
functionality that might be embedded in

151
00:07:50,350 --> 00:07:59,200
the code in legitimate functionality of

152
00:07:55,060 --> 00:08:03,160
web applications so I started looking

153
00:07:59,200 --> 00:08:04,750
into this and then I so I learned about

154
00:08:03,160 --> 00:08:07,480
the chrome dev tools protocol which I

155
00:08:04,750 --> 00:08:09,910
thought was really cool and awesome that

156
00:08:07,480 --> 00:08:12,370
I hadn't heard about it before so it

157
00:08:09,910 --> 00:08:15,190
allows you to for tools to instrument

158
00:08:12,370 --> 00:08:17,380
this is for the definition of their site

159
00:08:15,190 --> 00:08:22,750
was for tools to instrument inspect

160
00:08:17,380 --> 00:08:24,400
about improv chromium in oral link based

161
00:08:22,750 --> 00:08:27,070
browsers that I don't know sure what

162
00:08:24,400 --> 00:08:28,929
that means but also from the project

163
00:08:27,070 --> 00:08:30,760
basically this instrumentation is

164
00:08:28,930 --> 00:08:33,430
divided into different domains the main

165
00:08:30,760 --> 00:08:35,189
ones being long did bugger network niche

166
00:08:33,429 --> 00:08:37,719
domains to find a number of comments

167
00:08:35,190 --> 00:08:41,140
basically an API and in supports events

168
00:08:37,720 --> 00:08:45,340
in different events as far as that that

169
00:08:41,140 --> 00:08:48,699
yeah that you can hook to and do things

170
00:08:45,340 --> 00:08:51,610
like intercept requests modify responses

171
00:08:48,700 --> 00:08:54,130
inject code and things like that so

172
00:08:51,610 --> 00:08:55,600
projects like puppeteer another hell is

173
00:08:54,130 --> 00:08:58,689
chrome tools leverage the chrome

174
00:08:55,600 --> 00:09:01,360
developers dev tools protocol puppeteer

175
00:08:58,690 --> 00:09:05,530
is a tool that for developers to test

176
00:09:01,360 --> 00:09:07,540
and debug their applications the front

177
00:09:05,530 --> 00:09:10,089
end level so running things like

178
00:09:07,540 --> 00:09:12,579
automated actions that a user will go

179
00:09:10,090 --> 00:09:16,900
through to and then test whether an

180
00:09:12,580 --> 00:09:21,670
event happens or not for instance using

181
00:09:16,900 --> 00:09:24,240
a typically headless chrome instance

182
00:09:21,670 --> 00:09:27,449
so Brad slickest anxious for inspecting

183
00:09:24,240 --> 00:09:31,000
javascript for JavaScript framework

184
00:09:27,450 --> 00:09:32,740
usually leverage this as well so things

185
00:09:31,000 --> 00:09:35,500
like if you have ever worked with

186
00:09:32,740 --> 00:09:38,550
angular or react and you install one of

187
00:09:35,500 --> 00:09:41,770
those inspector tools that are available

188
00:09:38,550 --> 00:09:45,089
for Chrome or you open it and it tells

189
00:09:41,770 --> 00:09:49,630
you things like the angular services or

190
00:09:45,090 --> 00:09:51,880
react components and things like that so

191
00:09:49,630 --> 00:09:54,460
I think I'm quite not use is for pen

192
00:09:51,880 --> 00:09:58,480
testing and bug hunting so that's

193
00:09:54,460 --> 00:10:00,100
written a little bit more about the dev

194
00:09:58,480 --> 00:10:02,800
tools protocol domains these are the

195
00:10:00,100 --> 00:10:08,830
main domains that we can work with we

196
00:10:02,800 --> 00:10:11,349
can basically hook into the data that's

197
00:10:08,830 --> 00:10:14,470
being sent and received

198
00:10:11,350 --> 00:10:15,940
by Crom so there's a network domain that

199
00:10:14,470 --> 00:10:18,400
allows for tracking network activities

200
00:10:15,940 --> 00:10:20,860
on the page and gives you information

201
00:10:18,400 --> 00:10:24,329
about HTTP protocols being used when I

202
00:10:20,860 --> 00:10:27,700
request is being sent headers the

203
00:10:24,330 --> 00:10:31,420
content of a year requires time in

204
00:10:27,700 --> 00:10:33,820
etcetera the page domain which is based

205
00:10:31,420 --> 00:10:36,339
on actions and events related to you the

206
00:10:33,820 --> 00:10:38,890
inspector page and a runtime domain that

207
00:10:36,340 --> 00:10:41,680
exposes JavaScript runtime by means of

208
00:10:38,890 --> 00:10:45,040
remote evaluation and the objects so

209
00:10:41,680 --> 00:10:48,370
remain has its own set of methods so the

210
00:10:45,040 --> 00:10:53,020
idea was is to basically use this as a

211
00:10:48,370 --> 00:10:55,630
way to dig deeper into applications then

212
00:10:53,020 --> 00:10:58,900
I brought this tool called orb which is

213
00:10:55,630 --> 00:11:00,850
a dumb name but this is what it is it's

214
00:10:58,900 --> 00:11:02,410
a plugin based goal and framework and

215
00:11:00,850 --> 00:11:05,590
I'll explain a little bit more about

216
00:11:02,410 --> 00:11:07,510
that in a neck next couple slides uses

217
00:11:05,590 --> 00:11:10,510
the chrome developer protocols to

218
00:11:07,510 --> 00:11:12,130
multiply application behavior automates

219
00:11:10,510 --> 00:11:15,510
research tasks that can be painful to

220
00:11:12,130 --> 00:11:18,790
conduct with perp so and hopefully

221
00:11:15,510 --> 00:11:20,920
outlier I can clarify that later

222
00:11:18,790 --> 00:11:24,969
success will be a plugins meaning go

223
00:11:20,920 --> 00:11:26,439
plugins uses go so concurrency it's

224
00:11:24,970 --> 00:11:30,270
pretty easy if you need to write

225
00:11:26,440 --> 00:11:32,980
concurrency in your plugins or code and

226
00:11:30,270 --> 00:11:34,799
I mean wondering whether as you call it

227
00:11:32,980 --> 00:11:38,649
core instead

228
00:11:34,799 --> 00:11:40,989
but you know then didn't I'll be worried

229
00:11:38,649 --> 00:11:43,779
about it too as well so anyways how does

230
00:11:40,989 --> 00:11:45,819
it work so it's a basically a gonna face

231
00:11:43,779 --> 00:11:48,639
up each end up inside chrome instance

232
00:11:45,819 --> 00:11:51,849
with two taps all requests and responses

233
00:11:48,639 --> 00:11:53,679
are received that I received are sent

234
00:11:51,850 --> 00:11:56,379
and received are captured you sent the

235
00:11:53,679 --> 00:12:02,199
poor debugger so it's at the barber

236
00:11:56,379 --> 00:12:04,239
engine in a region ago so once a

237
00:12:02,199 --> 00:12:06,639
response is received to surprise past

238
00:12:04,239 --> 00:12:09,730
two processors or that are actually

239
00:12:06,639 --> 00:12:11,619
plugins in a sequential manner they also

240
00:12:09,730 --> 00:12:12,369
sent to you this other plugin type

241
00:12:11,619 --> 00:12:15,189
called

242
00:12:12,369 --> 00:12:17,619
inspector in a non blocking manner so

243
00:12:15,189 --> 00:12:20,319
you can inspect scripts for instance

244
00:12:17,619 --> 00:12:23,619
interesting information

245
00:12:20,319 --> 00:12:25,689
it also load custom scripts scripts on

246
00:12:23,619 --> 00:12:29,769
every page load within the context of

247
00:12:25,689 --> 00:12:33,069
the application scripts so basically you

248
00:12:29,769 --> 00:12:35,529
can load JavaScript code that messes

249
00:12:33,069 --> 00:12:36,910
with the 16 functionality of the

250
00:12:35,529 --> 00:12:40,470
application that you're loading in your

251
00:12:36,910 --> 00:12:42,910
browser and it sets event based

252
00:12:40,470 --> 00:12:48,730
breakpoints told us to the park

253
00:12:42,910 --> 00:12:51,600
applications this is a without and give

254
00:12:48,730 --> 00:12:56,919
us t-shirt to anybody but this is the

255
00:12:51,600 --> 00:13:01,209
basic architecture fireworks so there's

256
00:12:56,919 --> 00:13:04,980
this is core uses different plugins

257
00:13:01,209 --> 00:13:08,829
which are compiled as goal plugins and

258
00:13:04,980 --> 00:13:11,019
uses that as modules and then everything

259
00:13:08,829 --> 00:13:13,118
is being sent and received by the

260
00:13:11,019 --> 00:13:15,249
debugger and then from there we can do

261
00:13:13,119 --> 00:13:18,160
any kind of manipulation of the request

262
00:13:15,249 --> 00:13:25,860
using the plugins this is that the API

263
00:13:18,160 --> 00:13:28,179
that it uses for just common tasks so

264
00:13:25,860 --> 00:13:32,019
it's a lot of fun talking here we'll get

265
00:13:28,179 --> 00:13:33,988
to Devon soon the gold plugins are

266
00:13:32,019 --> 00:13:38,110
essentially modules that you can modify

267
00:13:33,989 --> 00:13:39,459
to order web responses there are no

268
00:13:38,110 --> 00:13:41,199
plugins so it's easy to extend

269
00:13:39,459 --> 00:13:44,609
functionality so basically go has this

270
00:13:41,199 --> 00:13:44,609
thing that you can write a

271
00:13:45,720 --> 00:13:51,660
a few functions for instance and then

272
00:13:48,440 --> 00:13:54,050
you just compile that as a go plugin

273
00:13:51,660 --> 00:13:56,670
each pass when you compile your go

274
00:13:54,050 --> 00:13:59,250
program you pass it certain flags to

275
00:13:56,670 --> 00:14:01,890
compile it as a fluttering and then your

276
00:13:59,250 --> 00:14:04,110
code can leverage those plugins in

277
00:14:01,890 --> 00:14:06,060
whichever manner as long as you know

278
00:14:04,110 --> 00:14:07,980
what functions are being implemented

279
00:14:06,060 --> 00:14:11,430
there so they just have to implement an

280
00:14:07,980 --> 00:14:13,560
interface that you define for them are

281
00:14:11,430 --> 00:14:17,790
two types of plugins that processors

282
00:14:13,560 --> 00:14:19,170
wish which alter their response before

283
00:14:17,790 --> 00:14:20,880
its render in the browser

284
00:14:19,170 --> 00:14:24,089
this can be useful for things like

285
00:14:20,880 --> 00:14:26,550
modifying JavaScript code changing HTML

286
00:14:24,090 --> 00:14:30,450
directives or hiding elements thanks to

287
00:14:26,550 --> 00:14:33,329
that and inspectors conduct analysis on

288
00:14:30,450 --> 00:14:35,100
responses concurrently so for instance

289
00:14:33,330 --> 00:14:38,670
if we want to record all references to

290
00:14:35,100 --> 00:14:40,620
API calls made by the applications then

291
00:14:38,670 --> 00:14:43,099
the responses to get passed through

292
00:14:40,620 --> 00:14:45,480
inspector so inspectors I look for API

293
00:14:43,100 --> 00:14:51,750
references and then record those in a

294
00:14:45,480 --> 00:14:55,620
file in the I gave a similar

295
00:14:51,750 --> 00:14:58,380
presentation to this in besides this

296
00:14:55,620 --> 00:15:00,470
year here in Austin this is one of the

297
00:14:58,380 --> 00:15:03,450
main things that I added it's there

298
00:15:00,470 --> 00:15:06,450
added a corporate entity bugger's which

299
00:15:03,450 --> 00:15:08,040
allows you to run into a custom code for

300
00:15:06,450 --> 00:15:10,470
dynamic manipulation of application

301
00:15:08,040 --> 00:15:14,520
variables and functions so if you have

302
00:15:10,470 --> 00:15:16,890
always wanted to instead of having to

303
00:15:14,520 --> 00:15:19,470
copy and paste code into the chrome

304
00:15:16,890 --> 00:15:20,939
console you can just have a file with

305
00:15:19,470 --> 00:15:22,820
all your JavaScript code that you're

306
00:15:20,940 --> 00:15:25,590
gonna run within an application context

307
00:15:22,820 --> 00:15:30,690
and then it will be executed on page

308
00:15:25,590 --> 00:15:34,290
load also HTTP request based breakpoints

309
00:15:30,690 --> 00:15:41,490
and other breakpoint options are working

310
00:15:34,290 --> 00:15:45,540
progress this is the repo so it's just

311
00:15:41,490 --> 00:15:47,250
Dharma code slash Corp has a little bit

312
00:15:45,540 --> 00:15:49,230
about documentation I try to keep up

313
00:15:47,250 --> 00:15:53,040
with that sometimes I'm lazy I'm trying

314
00:15:49,230 --> 00:15:57,750
to add more documentation so this is how

315
00:15:53,040 --> 00:15:58,810
I work you basically create a a config

316
00:15:57,750 --> 00:16:03,970
file

317
00:15:58,810 --> 00:16:07,268
that's a young config file then you

318
00:16:03,970 --> 00:16:10,180
select which ever processors plugins you

319
00:16:07,269 --> 00:16:15,790
want or whichever inspectors you give it

320
00:16:10,180 --> 00:16:17,739
a path and then you run it and then if

321
00:16:15,790 --> 00:16:19,810
you are writing your own plugins for

322
00:16:17,740 --> 00:16:22,209
this tool then you can just compile them

323
00:16:19,810 --> 00:16:27,420
running some of these options are here

324
00:16:22,209 --> 00:16:31,719
from Google or just wrong Corp tack key

325
00:16:27,420 --> 00:16:33,128
all right there's some demos and lower

326
00:16:31,720 --> 00:16:39,970
your expectations there was a lot of

327
00:16:33,129 --> 00:16:42,579
talking so the first demo is it's one of

328
00:16:39,970 --> 00:16:44,920
the most useful ways in which have used

329
00:16:42,579 --> 00:16:48,370
this tool before it needs to force

330
00:16:44,920 --> 00:16:51,969
angular 2 and above applications to run

331
00:16:48,370 --> 00:16:54,339
it development mode why I wanted what do

332
00:16:51,970 --> 00:16:57,910
I want to do this well I've learned to

333
00:16:54,339 --> 00:16:59,170
plus apps are loaded usually is their

334
00:16:57,910 --> 00:17:02,319
production apps they're loading in

335
00:16:59,170 --> 00:17:04,119
production mode apps loading in the

336
00:17:02,319 --> 00:17:06,928
bottom mode I easy to reverse from the

337
00:17:04,119 --> 00:17:10,000
console on like angular 2 like

338
00:17:06,929 --> 00:17:12,669
productions or applications loaded in

339
00:17:10,000 --> 00:17:14,140
production mode so and that's because

340
00:17:12,669 --> 00:17:16,390
the debunking elementtree

341
00:17:14,140 --> 00:17:17,829
for angular it's only available for

342
00:17:16,390 --> 00:17:20,980
applications running and development

343
00:17:17,829 --> 00:17:23,168
mode they don't run on applications

344
00:17:20,980 --> 00:17:27,400
running in production mode because that

345
00:17:23,169 --> 00:17:29,530
it's additional processes that will be

346
00:17:27,400 --> 00:17:34,000
running in behind the scenes in your

347
00:17:29,530 --> 00:17:36,990
application if you see now there's only

348
00:17:34,000 --> 00:17:39,549
one specific function that once you run

349
00:17:36,990 --> 00:17:45,159
your you load an application and the

350
00:17:39,549 --> 00:17:47,908
browser that's running an angular 5 the

351
00:17:45,159 --> 00:17:50,169
there's one single function that enables

352
00:17:47,909 --> 00:17:54,240
production mode for an application and

353
00:17:50,169 --> 00:17:54,240
that's this

354
00:17:57,950 --> 00:18:04,860
this is from the angular repo and all it

355
00:18:02,550 --> 00:18:07,320
is is basically this one function that

356
00:18:04,860 --> 00:18:10,350
just says enable problem and that gets

357
00:18:07,320 --> 00:18:13,679
run as soon as your application loads in

358
00:18:10,350 --> 00:18:17,669
the browser so and it prevents us from

359
00:18:13,680 --> 00:18:19,560
being able to the bug and understand an

360
00:18:17,670 --> 00:18:21,570
application and see how it's written

361
00:18:19,560 --> 00:18:22,970
from the console and we'll see that in

362
00:18:21,570 --> 00:18:28,080
just a moment

363
00:18:22,970 --> 00:18:31,830
so then what the plugin does run button

364
00:18:28,080 --> 00:18:33,689
is to look for that function what if I

365
00:18:31,830 --> 00:18:35,879
said so it does nothing

366
00:18:33,690 --> 00:18:37,620
that way the applications that you load

367
00:18:35,880 --> 00:18:40,380
in the browser are loaded loaded in

368
00:18:37,620 --> 00:18:43,620
development mode we just hijacked and

369
00:18:40,380 --> 00:18:46,680
revised the function the same will stay

370
00:18:43,620 --> 00:18:51,300
on to our bugging tree now you can do

371
00:18:46,680 --> 00:18:53,430
this manually using burp so you can just

372
00:18:51,300 --> 00:18:55,440
capture your request search for that

373
00:18:53,430 --> 00:18:58,050
string cannot enable problematized apply

374
00:18:55,440 --> 00:19:00,450
them on a platform set up in the

375
00:18:58,050 --> 00:19:03,840
minimize code you'll okay the function

376
00:19:00,450 --> 00:19:06,480
in the code you capture it in burp you

377
00:19:03,840 --> 00:19:09,709
rewrite it and you release it but that's

378
00:19:06,480 --> 00:19:13,560
a little work so that's one of the

379
00:19:09,710 --> 00:19:16,410
things that the plugin automates you

380
00:19:13,560 --> 00:19:21,629
just have to add the plug-in to the

381
00:19:16,410 --> 00:19:24,720
config file and then and this is the

382
00:19:21,630 --> 00:19:27,780
demo I just realized and that's pretty

383
00:19:24,720 --> 00:19:33,510
small so we'll see how this works but

384
00:19:27,780 --> 00:19:35,280
basically this is just me running make

385
00:19:33,510 --> 00:19:40,910
sure to play it this is just me running

386
00:19:35,280 --> 00:19:44,430
Gorp the tool to mess with office calm

387
00:19:40,910 --> 00:19:46,880
which has a bug bounty so I'm sure this

388
00:19:44,430 --> 00:19:46,880
is okay

389
00:19:47,470 --> 00:19:55,700
so basically when you office use this

390
00:19:51,679 --> 00:19:58,910
angular I forgot seven in that case when

391
00:19:55,700 --> 00:20:00,440
I made this video and then what we

392
00:19:58,910 --> 00:20:03,860
should be able to do it's basically

393
00:20:00,440 --> 00:20:06,760
obtain a variable that holds this that

394
00:20:03,860 --> 00:20:09,379
holds the state for the application

395
00:20:06,760 --> 00:20:13,760
using this function ng probe that's

396
00:20:09,380 --> 00:20:16,370
super little I'm realizing as well but

397
00:20:13,760 --> 00:20:18,200
we get null because the application is

398
00:20:16,370 --> 00:20:19,939
loading in production note we don't have

399
00:20:18,200 --> 00:20:24,320
all the debugging functions available

400
00:20:19,940 --> 00:20:28,580
for us so we just create a configuration

401
00:20:24,320 --> 00:20:32,270
file for Gorp that has includes the prod

402
00:20:28,580 --> 00:20:35,809
mode hijacker plugin and we enter it in

403
00:20:32,270 --> 00:20:38,450
the config file you can get the

404
00:20:35,809 --> 00:20:42,260
definition for what the plugin does if

405
00:20:38,450 --> 00:20:48,350
you want and then like I said you are in

406
00:20:42,260 --> 00:20:52,370
your config yamo file then you just run

407
00:20:48,350 --> 00:20:56,600
it the tool and then like I said that

408
00:20:52,370 --> 00:20:59,570
launches a chrome instance and this

409
00:20:56,600 --> 00:21:04,309
distance is hooked to the go code for

410
00:20:59,570 --> 00:21:06,230
port so then we're trying to see if the

411
00:21:04,309 --> 00:21:08,330
function got hijacked you didn't get

412
00:21:06,230 --> 00:21:12,350
hijacked in this case that's because

413
00:21:08,330 --> 00:21:15,530
there are some there's some cash that we

414
00:21:12,350 --> 00:21:17,600
need to clear because we need to reload

415
00:21:15,530 --> 00:21:19,760
those scripts so we just reload

416
00:21:17,600 --> 00:21:21,760
office.com and then we get this nine

417
00:21:19,760 --> 00:21:24,250
message nice message that says the

418
00:21:21,760 --> 00:21:26,809
animal pro mode function was hijacked

419
00:21:24,250 --> 00:21:28,160
and you so the end result is at the

420
00:21:26,809 --> 00:21:35,059
application restoring and development

421
00:21:28,160 --> 00:21:39,950
mode and at this point we can then

422
00:21:35,059 --> 00:21:43,340
obtain using dollar sign zero that

423
00:21:39,950 --> 00:21:45,800
selects a currently selected element

424
00:21:43,340 --> 00:21:48,740
that we selected an inspector then we

425
00:21:45,800 --> 00:21:51,379
can obtain more information with ng

426
00:21:48,740 --> 00:21:54,559
probe taking advantage of the debugging

427
00:21:51,380 --> 00:21:57,980
abilities that are included as part of

428
00:21:54,559 --> 00:21:58,580
angular so then that gives us for

429
00:21:57,980 --> 00:22:02,419
instance

430
00:21:58,580 --> 00:22:04,399
this case we can get first of all in the

431
00:22:02,419 --> 00:22:07,220
grammar component this is an angular

432
00:22:04,399 --> 00:22:08,570
component and then just by using the

433
00:22:07,220 --> 00:22:09,830
console we can get a better

434
00:22:08,570 --> 00:22:13,970
understanding of how the application

435
00:22:09,830 --> 00:22:16,250
works behind the same so here we get all

436
00:22:13,970 --> 00:22:19,010
the services that office.com uses and

437
00:22:16,250 --> 00:22:21,559
then we get different things that we can

438
00:22:19,010 --> 00:22:23,510
leverage from the console which wouldn't

439
00:22:21,559 --> 00:22:27,139
be possible if angular had run in

440
00:22:23,510 --> 00:22:33,679
production mode so in this case for

441
00:22:27,140 --> 00:22:36,230
instance we get the user base key and

442
00:22:33,679 --> 00:22:39,409
then we can modify it then we run a

443
00:22:36,230 --> 00:22:42,649
couple other functions to apply the

444
00:22:39,409 --> 00:22:44,330
modifications in angular and then from

445
00:22:42,649 --> 00:22:45,860
there we just basically continue playing

446
00:22:44,330 --> 00:22:48,740
with the different variables in the

447
00:22:45,860 --> 00:22:54,379
application to see what changes we can

448
00:22:48,740 --> 00:22:56,210
cause from a client side standpoint so

449
00:22:54,380 --> 00:22:59,149
we can put in it for instance change the

450
00:22:56,210 --> 00:23:06,549
tenant ID and see if we can prom the

451
00:22:59,149 --> 00:23:09,289
application to do anything interesting -

452
00:23:06,549 --> 00:23:17,090
yeah we just changed it to a different

453
00:23:09,289 --> 00:23:19,730
tenant all right next one is nope I'm

454
00:23:17,090 --> 00:23:21,949
not to do the next one yet so I'm not

455
00:23:19,730 --> 00:23:25,580
gonna run this demo just cuz the last

456
00:23:21,950 --> 00:23:28,130
one seemed to play okay I might go back

457
00:23:25,580 --> 00:23:32,658
to that one if the next thing that I'm

458
00:23:28,130 --> 00:23:34,460
gonna do doesn't work so in that demo

459
00:23:32,659 --> 00:23:37,279
there was a load of me going back to a

460
00:23:34,460 --> 00:23:41,000
vicious 2d code and copy and functions

461
00:23:37,279 --> 00:23:42,860
to help me to bug the code and that was

462
00:23:41,000 --> 00:23:44,720
a lot of work so I wanted to leverage

463
00:23:42,860 --> 00:23:45,830
custom code rather than having to copy

464
00:23:44,720 --> 00:23:48,169
and paste all the time

465
00:23:45,830 --> 00:23:50,689
custom coding the console I wanted to

466
00:23:48,169 --> 00:23:53,960
run that on every page load and I wanted

467
00:23:50,690 --> 00:23:57,649
my code to be my custom JavaScript code

468
00:23:53,960 --> 00:23:59,539
to be aware and work with the other

469
00:23:57,649 --> 00:24:00,830
functions that are loaded as part of the

470
00:23:59,539 --> 00:24:05,029
application that I'm loading in the

471
00:24:00,830 --> 00:24:09,250
browser so what we can do basically to

472
00:24:05,029 --> 00:24:11,930
do that and I'll end this for now and

473
00:24:09,250 --> 00:24:19,040
I'm gonna do an interactive

474
00:24:11,930 --> 00:24:25,670
so hopefully this wasn't a bad idea so

475
00:24:19,040 --> 00:24:33,870
we go to the config file and make this

476
00:24:25,670 --> 00:24:35,840
crazy bigger no breakpoints please and

477
00:24:33,870 --> 00:24:38,300
then we can do a couple things

478
00:24:35,840 --> 00:24:41,810
one thing that we can do it set

479
00:24:38,300 --> 00:24:44,129
breakpoints base on post and get calls

480
00:24:41,810 --> 00:24:46,980
so you basically tell it set a

481
00:24:44,130 --> 00:24:50,640
breakpoint whenever a get or post call

482
00:24:46,980 --> 00:24:52,560
is made to be one slash logs and I'll

483
00:24:50,640 --> 00:24:57,090
just keep that one there but you can add

484
00:24:52,560 --> 00:25:00,480
other break points based on the path for

485
00:24:57,090 --> 00:25:03,590
a get or post request for in this case

486
00:25:00,480 --> 00:25:06,840
we're just gonna keep v1 slash logs and

487
00:25:03,590 --> 00:25:10,409
then the other thing that we do is we

488
00:25:06,840 --> 00:25:15,750
pass it up a file with our custom

489
00:25:10,410 --> 00:25:18,390
JavaScript scripts in functions and we

490
00:25:15,750 --> 00:25:24,200
tell it to keep a watch for that file

491
00:25:18,390 --> 00:25:31,140
for new changes so then that pile is

492
00:25:24,200 --> 00:25:33,060
this one on the side then what would you

493
00:25:31,140 --> 00:25:35,870
basically Swit define a function call

494
00:25:33,060 --> 00:25:39,450
court that Court is going to look for

495
00:25:35,870 --> 00:25:42,510
and then in there we can register all of

496
00:25:39,450 --> 00:25:44,580
our custom functions and in this case

497
00:25:42,510 --> 00:25:47,900
all I have is basically some functions

498
00:25:44,580 --> 00:25:50,340
to help me mess with angular code and

499
00:25:47,900 --> 00:25:55,550
then I'm defined them as variables first

500
00:25:50,340 --> 00:25:57,959
and then I define their function

501
00:25:55,550 --> 00:26:01,950
depending on whether it is an angular 1

502
00:25:57,960 --> 00:26:04,710
application or angular 2 so I have my

503
00:26:01,950 --> 00:26:07,790
custom code ready and then I can just go

504
00:26:04,710 --> 00:26:07,790
from the tool

505
00:26:11,830 --> 00:26:25,970
and this opens a new instance of Chrome

506
00:26:20,710 --> 00:26:28,220
just making a bigger now and then all

507
00:26:25,970 --> 00:26:32,929
every everything that we enter here it's

508
00:26:28,220 --> 00:26:37,039
gonna be processed by port so if you go

509
00:26:32,929 --> 00:26:42,340
here this is another application that

510
00:26:37,039 --> 00:26:42,340
has I above bounty so should be okay

511
00:26:42,399 --> 00:26:55,100
so I'm gonna look in with this login

512
00:26:45,980 --> 00:26:59,659
that I'll born after this cool and then

513
00:26:55,100 --> 00:27:01,279
here the code that I wrote in JavaScript

514
00:26:59,659 --> 00:27:02,509
was able to detect that this is say yeah

515
00:27:01,279 --> 00:27:05,960
angular one point seven point eight

516
00:27:02,509 --> 00:27:08,480
application and it makes these functions

517
00:27:05,960 --> 00:27:11,299
available for us get all services

518
00:27:08,480 --> 00:27:14,299
supplied chinches and get specific

519
00:27:11,299 --> 00:27:16,759
service these are the variables and all

520
00:27:14,299 --> 00:27:22,269
this is because of the code that we had

521
00:27:16,759 --> 00:27:24,679
oh the custom code that we had here so

522
00:27:22,269 --> 00:27:26,179
now let's say that we want to get all

523
00:27:24,679 --> 00:27:33,019
the angular services that are running

524
00:27:26,179 --> 00:27:37,190
for this application so will you do just

525
00:27:33,019 --> 00:27:39,379
gonna just do not mess things up the

526
00:27:37,190 --> 00:27:42,080
good declare a variable called ulcer as

527
00:27:39,379 --> 00:27:44,209
we see and we call the function get all

528
00:27:42,080 --> 00:27:46,149
services I'm passing it the name of the

529
00:27:44,210 --> 00:27:50,740
application which in this case is lob

530
00:27:46,149 --> 00:27:54,289
which I know by inspecting the code here

531
00:27:50,740 --> 00:27:58,309
this should be an NG app equal lob or

532
00:27:54,289 --> 00:28:02,960
here you go so then that gives us all

533
00:27:58,309 --> 00:28:04,850
the services that are available for this

534
00:28:02,960 --> 00:28:10,309
application and then the first thing

535
00:28:04,850 --> 00:28:13,070
that we notice is that we get for for

536
00:28:10,309 --> 00:28:15,408
every service there is a service in

537
00:28:13,070 --> 00:28:18,950
angular typically used to call your API

538
00:28:15,409 --> 00:28:22,400
as well and in this case we have a URLs

539
00:28:18,950 --> 00:28:26,090
for basically one URLs for every service

540
00:28:22,400 --> 00:28:28,190
and that URL corresponds to an API

541
00:28:26,090 --> 00:28:30,980
endpoint so that makes it interesting i

542
00:28:28,190 --> 00:28:33,530
were able to examine even though the

543
00:28:30,980 --> 00:28:35,600
code is minified and we cannot make too

544
00:28:33,530 --> 00:28:39,470
much sense out of it we can start

545
00:28:35,600 --> 00:28:46,159
exploring how things work from here so

546
00:28:39,470 --> 00:28:49,550
we can just write a quick since we have

547
00:28:46,160 --> 00:28:53,330
all the services store in this variable

548
00:28:49,550 --> 00:28:55,970
we can just run a quick script just to

549
00:28:53,330 --> 00:28:58,850
see if we get the list of all the

550
00:28:55,970 --> 00:29:00,860
endpoints now of course you can get this

551
00:28:58,850 --> 00:29:04,820
type of information by exploring an

552
00:29:00,860 --> 00:29:06,760
application and capturing API endpoints

553
00:29:04,820 --> 00:29:09,530
in burp and it started messing with us

554
00:29:06,760 --> 00:29:11,330
but it can take some time so for

555
00:29:09,530 --> 00:29:15,020
instance if it's an angular app and you

556
00:29:11,330 --> 00:29:16,580
just run this custom functions then you

557
00:29:15,020 --> 00:29:19,840
can very quickly get a list of things

558
00:29:16,580 --> 00:29:23,080
that you want to start attacking or

559
00:29:19,840 --> 00:29:25,699
checking or assessing in your

560
00:29:23,080 --> 00:29:28,639
application test or assessment or

561
00:29:25,700 --> 00:29:29,960
whatever you want to call it so the

562
00:29:28,640 --> 00:29:35,180
other thing that we can do from here

563
00:29:29,960 --> 00:29:36,530
it's again we can print functions and be

564
00:29:35,180 --> 00:29:41,800
able to better understand them rather

565
00:29:36,530 --> 00:29:46,990
than look for them in the source of

566
00:29:41,800 --> 00:29:52,700
Chrome so we can just simply just print

567
00:29:46,990 --> 00:29:54,470
the definitions of the two of functions

568
00:29:52,700 --> 00:29:57,920
and this case we're printing the

569
00:29:54,470 --> 00:30:00,170
definition of verify email and then we

570
00:29:57,920 --> 00:30:02,120
can read how that looks like and then we

571
00:30:00,170 --> 00:30:04,550
can also make modifications as needed so

572
00:30:02,120 --> 00:30:08,709
if we needed to do things like well

573
00:30:04,550 --> 00:30:11,540
services that user verification that

574
00:30:08,710 --> 00:30:16,510
verify and we can just rewrite it of

575
00:30:11,540 --> 00:30:16,510
course without caps on

576
00:30:17,090 --> 00:30:23,360
so that's the ability to inject code and

577
00:30:21,649 --> 00:30:27,219
how that helps in the work in an

578
00:30:23,360 --> 00:30:33,649
application in this specific case in

579
00:30:27,220 --> 00:30:37,429
angular angular 1 application so if we

580
00:30:33,649 --> 00:30:41,959
go to you in this case I also have the

581
00:30:37,429 --> 00:30:44,960
pro mode hijacker code enabled this is

582
00:30:41,960 --> 00:30:47,779
again the one that I just demo or showed

583
00:30:44,960 --> 00:30:51,710
in a moment ago if we go to a page like

584
00:30:47,779 --> 00:30:54,850
Delta comm and then in this case you

585
00:30:51,710 --> 00:30:57,289
detected that it was firstly removed the

586
00:30:54,850 --> 00:31:00,320
now it's running in development mode

587
00:30:57,289 --> 00:31:01,820
because we have that plug-in enable we

588
00:31:00,320 --> 00:31:03,950
get this message which actually comes

589
00:31:01,820 --> 00:31:05,600
for an angular telling knows that hey

590
00:31:03,950 --> 00:31:07,940
this is running a development mode why

591
00:31:05,600 --> 00:31:10,759
did you polish an app in development

592
00:31:07,940 --> 00:31:12,619
mode then it's also tells us that it's a

593
00:31:10,759 --> 00:31:15,590
good run in angular 2 and it gives us a

594
00:31:12,619 --> 00:31:18,889
set of functions that we can also use to

595
00:31:15,590 --> 00:31:20,149
select the different or started the

596
00:31:18,889 --> 00:31:22,039
ballgame the application and being able

597
00:31:20,149 --> 00:31:24,080
to understand the code and do similar

598
00:31:22,039 --> 00:31:26,570
things like with the ones we did a

599
00:31:24,080 --> 00:31:33,980
moment ago with the angular 1 point

600
00:31:26,570 --> 00:31:38,509
something application through so let's

601
00:31:33,980 --> 00:31:42,789
continue here that was me crossing

602
00:31:38,509 --> 00:31:42,789
fingers for the demo I just showed

603
00:31:48,440 --> 00:31:52,520
another thing that you can do it's

604
00:31:49,820 --> 00:31:55,280
hijack functions so basically you find

605
00:31:52,520 --> 00:31:58,250
the function and that it's loaded for an

606
00:31:55,280 --> 00:31:59,780
application and you can modify the

607
00:31:58,250 --> 00:32:02,299
content which is something that I've

608
00:31:59,780 --> 00:32:06,350
found useful in some applications it's

609
00:32:02,299 --> 00:32:09,379
usually in just a cab yet or just

610
00:32:06,350 --> 00:32:11,510
something to note I guess is that I

611
00:32:09,380 --> 00:32:14,179
don't use this for every assessment that

612
00:32:11,510 --> 00:32:16,340
I do just use it for applications that I

613
00:32:14,179 --> 00:32:19,429
have a lot of time to spend messing with

614
00:32:16,340 --> 00:32:24,379
or applications where I don't have the

615
00:32:19,429 --> 00:32:26,510
code for and applications that I like

616
00:32:24,380 --> 00:32:29,030
for instance a part of a bug bug bounty

617
00:32:26,510 --> 00:32:32,770
so I can just spend time playing with

618
00:32:29,030 --> 00:32:32,770
the application as much as I want Oh

619
00:32:32,830 --> 00:32:38,090
back to this so hijacking functions as a

620
00:32:36,380 --> 00:32:39,740
different plugin you just basically add

621
00:32:38,090 --> 00:32:42,350
these options here you put it the

622
00:32:39,740 --> 00:32:45,890
function name in the config file and

623
00:32:42,350 --> 00:32:48,709
then you declare a new body I find that

624
00:32:45,890 --> 00:32:51,830
function given that hint that we gave it

625
00:32:48,710 --> 00:32:53,450
here in this case it's logged in it's

626
00:32:51,830 --> 00:32:56,270
useful to test missing for sure level

627
00:32:53,450 --> 00:32:59,059
access control vulnerabilities can be

628
00:32:56,270 --> 00:33:01,429
used to skip validation buried inside

629
00:32:59,059 --> 00:33:03,260
multiple function calls can be used to

630
00:33:01,429 --> 00:33:06,140
force apps to think that they are logged

631
00:33:03,260 --> 00:33:09,379
in or have admin rights useful when you

632
00:33:06,140 --> 00:33:15,400
need to verify requests formats and let

633
00:33:09,380 --> 00:33:21,410
me actually plus here for a second and

634
00:33:15,400 --> 00:33:23,360
go back here and I'm gonna go back to

635
00:33:21,410 --> 00:33:29,860
lob TOCOM there's something I forgot to

636
00:33:23,360 --> 00:33:38,439
mention let me see if I am logged in

637
00:33:29,860 --> 00:33:41,750
yeah dashboard so we said that xhr base

638
00:33:38,440 --> 00:33:46,400
breakpoint so that makes it so that when

639
00:33:41,750 --> 00:33:49,760
we call oh yeah so when we go to API

640
00:33:46,400 --> 00:33:55,100
logs in the menu then it was a call to

641
00:33:49,760 --> 00:33:58,250
the be one slash logs important API

642
00:33:55,100 --> 00:33:59,480
endpoint and this basically because we

643
00:33:58,250 --> 00:34:01,550
told it to stop when

644
00:33:59,480 --> 00:34:04,310
a call is made to that then it makes the

645
00:34:01,550 --> 00:34:10,130
sets the breakpoint and then from there

646
00:34:04,310 --> 00:34:14,960
we can examine the the call stack we can

647
00:34:10,130 --> 00:34:16,850
examine the variables are part that are

648
00:34:14,960 --> 00:34:20,030
loaded the local variables and things of

649
00:34:16,850 --> 00:34:20,889
that and their contents and there are

650
00:34:20,030 --> 00:34:24,940
some things that are not working

651
00:34:20,889 --> 00:34:24,940
perfectly right now but you get the idea

652
00:34:25,449 --> 00:34:32,870
so the function hijacker plugin this is

653
00:34:30,469 --> 00:34:37,719
basically what it does you just open

654
00:34:32,870 --> 00:34:43,460
this so in this case I'm just using a

655
00:34:37,719 --> 00:34:45,819
juice shop which is just a part of the

656
00:34:43,460 --> 00:34:50,449
always project for intentional

657
00:34:45,820 --> 00:34:52,850
attentional vulnerable application so in

658
00:34:50,449 --> 00:34:53,750
this case is just a login page we don't

659
00:34:52,850 --> 00:34:56,929
know where to start

660
00:34:53,750 --> 00:34:59,330
what email address to either even input

661
00:34:56,929 --> 00:35:02,299
but we want want to see what is

662
00:34:59,330 --> 00:35:04,299
available to an admin that we cannot see

663
00:35:02,300 --> 00:35:07,430
or even just somebody that's logged in

664
00:35:04,300 --> 00:35:10,430
so what we can do here

665
00:35:07,430 --> 00:35:15,560
it's basically we locate the path for

666
00:35:10,430 --> 00:35:18,319
the JavaScript file that we want to look

667
00:35:15,560 --> 00:35:20,270
for functions and modify but what we're

668
00:35:18,320 --> 00:35:23,060
gonna do it's basically here's the

669
00:35:20,270 --> 00:35:25,370
function is locked in and it's locked in

670
00:35:23,060 --> 00:35:29,450
basically just checks whether we have a

671
00:35:25,370 --> 00:35:31,970
token a JWT token to indicate to the

672
00:35:29,450 --> 00:35:35,210
clients ICO that we are logged in it's a

673
00:35:31,970 --> 00:35:36,950
very common logic used for by

674
00:35:35,210 --> 00:35:39,710
applications like angular and anything

675
00:35:36,950 --> 00:35:44,109
that just uses GWT tokens and an API to

676
00:35:39,710 --> 00:35:49,250
you for an application so we just

677
00:35:44,110 --> 00:35:54,140
basically add the option in the config

678
00:35:49,250 --> 00:35:55,670
file to enable that plugin and what

679
00:35:54,140 --> 00:35:59,799
we're gonna do is not just multiply a

680
00:35:55,670 --> 00:36:02,510
function we want to replace the entire

681
00:35:59,800 --> 00:36:08,880
javascript file with one that has our

682
00:36:02,510 --> 00:36:16,910
own custom code so we go here

683
00:36:08,880 --> 00:36:19,739
and that's taken awhile rather than a

684
00:36:16,910 --> 00:36:23,279
and then we give it a new body for the

685
00:36:19,739 --> 00:36:25,739
function is logged in give it a

686
00:36:23,279 --> 00:36:32,180
consultant log for is logged in that

687
00:36:25,739 --> 00:36:35,789
just says wood in this case so up above

688
00:36:32,180 --> 00:36:38,788
and we return true just so it tells it

689
00:36:35,789 --> 00:36:41,910
that hey yes the user is logged in

690
00:36:38,789 --> 00:36:45,749
please show him or her everything

691
00:36:41,910 --> 00:36:47,368
we're on Corp in this case is not the

692
00:36:45,749 --> 00:36:49,078
one that we're modifying the entire file

693
00:36:47,369 --> 00:36:50,849
they'll be a different demo in just a

694
00:36:49,079 --> 00:36:55,559
second but we're just modifying one

695
00:36:50,849 --> 00:36:57,660
function here then we load Gousha again

696
00:36:55,559 --> 00:36:59,249
and then there is logged in function

697
00:36:57,660 --> 00:37:01,440
that gets called by the application but

698
00:36:59,249 --> 00:37:03,238
because we modify it it then we'll get

699
00:37:01,440 --> 00:37:06,599
all the console the log messages that we

700
00:37:03,239 --> 00:37:09,749
inject it and then we get all this other

701
00:37:06,599 --> 00:37:14,430
menu functionality that we can start

702
00:37:09,749 --> 00:37:15,930
messing with directly because we trick

703
00:37:14,430 --> 00:37:25,129
the application into thinking that we

704
00:37:15,930 --> 00:37:28,828
are logged in there's also a injector

705
00:37:25,130 --> 00:37:32,489
plugin this I won't have a demo for but

706
00:37:28,829 --> 00:37:34,019
basically it allows you to inject

707
00:37:32,489 --> 00:37:35,640
additional code within a specific

708
00:37:34,019 --> 00:37:37,919
function you just pass it the function

709
00:37:35,640 --> 00:37:40,140
name and then you pass it additional

710
00:37:37,920 --> 00:37:43,229
content that you want to attack at the

711
00:37:40,140 --> 00:37:46,469
end of that function so it's a helpful

712
00:37:43,229 --> 00:37:48,660
one you want to test when a function is

713
00:37:46,469 --> 00:37:52,349
called the console the log messages for

714
00:37:48,660 --> 00:37:55,739
instance there's also a inspector plugin

715
00:37:52,349 --> 00:37:58,589
that allows you to record references to

716
00:37:55,739 --> 00:38:01,710
API strings in J's code and save them to

717
00:37:58,589 --> 00:38:04,160
a desired file so for instance go back

718
00:38:01,710 --> 00:38:04,160
here

719
00:38:09,039 --> 00:38:15,980
so I had the inspector plugin for the IP

720
00:38:14,210 --> 00:38:21,260
I find there already enable and then

721
00:38:15,980 --> 00:38:23,869
that makes it so that our API and your

722
00:38:21,260 --> 00:38:27,500
strings within content within code is

723
00:38:23,869 --> 00:38:31,940
entered here in this file that gives us

724
00:38:27,500 --> 00:38:34,059
a idea that there's a possible this is

725
00:38:31,940 --> 00:38:37,599
me testing account or export so come

726
00:38:34,059 --> 00:38:40,460
with an account that I don't really own

727
00:38:37,599 --> 00:38:43,369
so basically we get some ideas of the

728
00:38:40,460 --> 00:38:45,760
different api's are being called within

729
00:38:43,369 --> 00:38:45,760
the code

730
00:38:50,360 --> 00:38:55,980
so I can do an API find their demo but

731
00:38:53,450 --> 00:38:59,490
it's just pretty simple you just launch

732
00:38:55,980 --> 00:39:02,880
a Gorp and then you add that plugin

733
00:38:59,490 --> 00:39:04,950
navigate different sites and then as API

734
00:39:02,880 --> 00:39:09,510
endpoints are found or located within

735
00:39:04,950 --> 00:39:13,500
code this will be saved to this file or

736
00:39:09,510 --> 00:39:18,770
the file that you specify the next one

737
00:39:13,500 --> 00:39:21,120
is a titer this is just basically

738
00:39:18,770 --> 00:39:24,900
reveals elements not removed from my

739
00:39:21,120 --> 00:39:28,049
clock on page load by angular be ing F +

740
00:39:24,900 --> 00:39:35,280
ng F these are basically angular 1 and

741
00:39:28,050 --> 00:39:38,970
angular 2 and above and there's a final

742
00:39:35,280 --> 00:39:41,430
replace plugin you just find give it a

743
00:39:38,970 --> 00:39:43,020
string just simple find replace give it

744
00:39:41,430 --> 00:39:47,220
a string of things to find in code and

745
00:39:43,020 --> 00:39:51,440
replace it with I could do a demo for

746
00:39:47,220 --> 00:39:55,859
that but and actually in this case

747
00:39:51,440 --> 00:40:00,060
rather than just giving it a we just

748
00:39:55,860 --> 00:40:02,490
make this bigger what the plugin does in

749
00:40:00,060 --> 00:40:07,549
addition to you being able to pass it a

750
00:40:02,490 --> 00:40:12,029
string and a final string is to also

751
00:40:07,550 --> 00:40:17,580
give it a complete file so like if you

752
00:40:12,030 --> 00:40:21,480
an application is loading react X or Y

753
00:40:17,580 --> 00:40:24,060
and you wanted to run use react with

754
00:40:21,480 --> 00:40:29,430
Zeta Y you can just give it a path of

755
00:40:24,060 --> 00:40:31,320
the file for the file that is being

756
00:40:29,430 --> 00:40:33,029
loaded in the application and the path

757
00:40:31,320 --> 00:40:35,030
for a local file that you're storing

758
00:40:33,030 --> 00:40:37,470
locally in your computer that has

759
00:40:35,030 --> 00:40:41,040
possibly a vulnerable version of react

760
00:40:37,470 --> 00:40:42,209
or code that you have modified to trick

761
00:40:41,040 --> 00:40:48,450
the application in to do and different

762
00:40:42,210 --> 00:40:49,950
things so in this case we just go to the

763
00:40:48,450 --> 00:40:54,330
file while all the scripts are being

764
00:40:49,950 --> 00:40:59,970
loaded we get the path so complete the

765
00:40:54,330 --> 00:41:03,720
link address we paste it in the URL for

766
00:40:59,970 --> 00:41:06,240
where the file is located we

767
00:41:03,720 --> 00:41:07,950
give it then the path for a local file

768
00:41:06,240 --> 00:41:12,209
that has all this custom code where I

769
00:41:07,950 --> 00:41:13,680
enter as bogus username so the

770
00:41:12,210 --> 00:41:18,750
application is always thinking that I'm

771
00:41:13,680 --> 00:41:21,660
logged in no matter what so I changed it

772
00:41:18,750 --> 00:41:26,780
everywhere just to make juicy up thing

773
00:41:21,660 --> 00:41:32,759
that I am logged in that's a lot of

774
00:41:26,780 --> 00:41:35,369
pointing but cool so then we can copy

775
00:41:32,760 --> 00:41:38,520
the path for that we created as part of

776
00:41:35,369 --> 00:41:42,859
the options for the plugin and then we

777
00:41:38,520 --> 00:41:47,400
run the tool there we go

778
00:41:42,859 --> 00:41:49,910
so then when we load Juche up again then

779
00:41:47,400 --> 00:41:53,340
you shop it's gonna use our own custom

780
00:41:49,910 --> 00:41:55,740
JavaScript file rather than the one that

781
00:41:53,340 --> 00:41:57,150
their developers Road and then this

782
00:41:55,740 --> 00:42:00,689
allows us to see the oldest order

783
00:41:57,150 --> 00:42:02,520
functionality that's up there it assumes

784
00:42:00,690 --> 00:42:05,430
now that we're logged in so even if we

785
00:42:02,520 --> 00:42:07,170
go here or to contact us it's going to

786
00:42:05,430 --> 00:42:12,149
show the username that I selected by the

787
00:42:07,170 --> 00:42:14,839
folding I put in the code so that's that

788
00:42:12,150 --> 00:42:14,839
working

789
00:42:16,820 --> 00:42:23,780
you can also write your own core plugins

790
00:42:19,550 --> 00:42:26,960
pretty easy yeah but I haven't seen

791
00:42:23,780 --> 00:42:29,870
anybody do it yet but basically you have

792
00:42:26,960 --> 00:42:33,980
to if you are into writing go and you

793
00:42:29,870 --> 00:42:36,830
just write a processor or a code file

794
00:42:33,980 --> 00:42:38,420
that adheres to these interfaces so if

795
00:42:36,830 --> 00:42:40,340
it is a processor you have to implement

796
00:42:38,420 --> 00:42:44,090
these methods if it is an inspector you

797
00:42:40,340 --> 00:42:48,310
have to implement these methods every

798
00:42:44,090 --> 00:42:51,740
plugin gets passed this what data

799
00:42:48,310 --> 00:42:54,799
structure or object has a body headers

800
00:42:51,740 --> 00:42:56,240
the type of the request method so it

801
00:42:54,800 --> 00:42:58,190
will tell you what there is a post or a

802
00:42:56,240 --> 00:43:03,080
get and based on that you can do

803
00:42:58,190 --> 00:43:04,720
different logic and that's it for now so

804
00:43:03,080 --> 00:43:07,310
I'm working on additional plugins

805
00:43:04,720 --> 00:43:08,959
focusing on code debugging and being

806
00:43:07,310 --> 00:43:14,320
able to further understand applications

807
00:43:08,960 --> 00:43:17,570
from the frontal side of things and

808
00:43:14,320 --> 00:43:20,960
pretty bad is interested the code it's

809
00:43:17,570 --> 00:43:24,510
out there it's just a fun project so

810
00:43:20,960 --> 00:43:32,199
that's it for any questions let me know

811
00:43:24,510 --> 00:43:32,199
[Applause]

812
00:43:37,260 --> 00:43:39,320
you

