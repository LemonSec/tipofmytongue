1
00:00:09,300 --> 00:00:32,280
[Music]

2
00:00:35,600 --> 00:00:44,070
get started everyone welcome thanks for

3
00:00:39,720 --> 00:00:46,140
coming so we're in a stratagem on

4
00:00:44,070 --> 00:00:48,480
strategy this is really about rolling

5
00:00:46,140 --> 00:00:50,370
security testing into existing product

6
00:00:48,480 --> 00:00:53,339
testing we'll explain obviously through

7
00:00:50,370 --> 00:00:56,489
this what that means so quick

8
00:00:53,340 --> 00:00:59,850
introductions of Kevin Feliz Josh Wallis

9
00:00:56,489 --> 00:01:02,760
we're both with UI or instant young both

10
00:00:59,850 --> 00:01:04,259
been in AB sec for a while this is the

11
00:01:02,760 --> 00:01:06,090
second time that we're co-presenting at

12
00:01:04,259 --> 00:01:07,470
last con this is my sixth time

13
00:01:06,090 --> 00:01:10,200
presenting here it's an awesome

14
00:01:07,470 --> 00:01:16,229
conference with great barbecue so keep

15
00:01:10,200 --> 00:01:18,450
coming back I like to try to think of

16
00:01:16,229 --> 00:01:22,200
security as an enabler for development

17
00:01:18,450 --> 00:01:24,300
and therefore I like to try to keep

18
00:01:22,200 --> 00:01:26,729
myself informed on what's happening on

19
00:01:24,300 --> 00:01:28,110
the development side and that extends

20
00:01:26,729 --> 00:01:31,530
now into sort of infrastructure as code

21
00:01:28,110 --> 00:01:32,789
side so I do multi domains I'm

22
00:01:31,530 --> 00:01:34,740
interested in in everything that goes

23
00:01:32,790 --> 00:01:36,720
into sort of product development and I

24
00:01:34,740 --> 00:01:37,979
think the more that we can merge all

25
00:01:36,720 --> 00:01:39,479
those together and work collaboratively

26
00:01:37,979 --> 00:01:43,410
the better off we'll be

27
00:01:39,479 --> 00:01:46,110
so I'm all about unicorns and green

28
00:01:43,410 --> 00:01:47,550
fields and rainbows and I try to make

29
00:01:46,110 --> 00:01:50,670
that sort of the vision of where

30
00:01:47,550 --> 00:01:53,250
security should be headed towards right

31
00:01:50,670 --> 00:01:57,899
of just let's move towards the ideal as

32
00:01:53,250 --> 00:01:59,940
much as we can relatively the same for

33
00:01:57,899 --> 00:02:01,830
me been doing this a long time I started

34
00:01:59,940 --> 00:02:04,380
off as a developer you know moved into

35
00:02:01,830 --> 00:02:07,319
application security and finally into

36
00:02:04,380 --> 00:02:09,568
consulting so I've seen this from all

37
00:02:07,319 --> 00:02:11,910
sites you know kind of seen the pros and

38
00:02:09,568 --> 00:02:14,130
cons from from all perspectives you know

39
00:02:11,910 --> 00:02:15,810
really passionate about def sec ops and

40
00:02:14,130 --> 00:02:17,549
you know mostly just coming out to

41
00:02:15,810 --> 00:02:19,709
people like you and trying to change

42
00:02:17,550 --> 00:02:21,810
your perception on you know how to do

43
00:02:19,709 --> 00:02:23,580
security testing can give you some new

44
00:02:21,810 --> 00:02:26,040
ideas and some different things to try

45
00:02:23,580 --> 00:02:29,280
it was opposed to automating static

46
00:02:26,040 --> 00:02:31,349
analysis and things like that kind of

47
00:02:29,280 --> 00:02:33,060
odd for a consultant I am married I do

48
00:02:31,349 --> 00:02:35,760
have three kids they're getting very

49
00:02:33,060 --> 00:02:37,680
owed my daughter is almost 15 and is

50
00:02:35,760 --> 00:02:39,720
starting to talk about driving so I'm a

51
00:02:37,680 --> 00:02:41,220
little nervous about that you know and

52
00:02:39,720 --> 00:02:44,109
Kevin didn't mention it but he likes

53
00:02:41,220 --> 00:02:45,970
well a lot and our gauges totally

54
00:02:44,110 --> 00:02:52,450
so if anybody's playing ArcheAge

55
00:02:45,970 --> 00:02:55,390
unchanged let me know so so as I

56
00:02:52,450 --> 00:02:58,299
mentioned we're going to talk about QA

57
00:02:55,390 --> 00:03:00,010
here Quality Assurance what that means

58
00:02:58,300 --> 00:03:02,290
we're going to talk about security

59
00:03:00,010 --> 00:03:04,329
assurance what that means how the two

60
00:03:02,290 --> 00:03:05,760
are similar how they're different how we

61
00:03:04,330 --> 00:03:09,010
can sort of move them closer together

62
00:03:05,760 --> 00:03:10,600
and we we took basically the the key

63
00:03:09,010 --> 00:03:12,549
takeaways like our themes for the

64
00:03:10,600 --> 00:03:14,200
presentation and just move them up to

65
00:03:12,550 --> 00:03:15,880
the front and we'll talk about them

66
00:03:14,200 --> 00:03:17,260
again later we'll hit on them later but

67
00:03:15,880 --> 00:03:19,150
just so you have sort of a perspective

68
00:03:17,260 --> 00:03:21,130
of where we're where we're heading

69
00:03:19,150 --> 00:03:24,370
towards and what we want to take aways

70
00:03:21,130 --> 00:03:26,530
from this to be QA right now is really

71
00:03:24,370 --> 00:03:28,000
valued in most organizations that are

72
00:03:26,530 --> 00:03:29,920
doing software development it's sort of

73
00:03:28,000 --> 00:03:31,660
a given that you're going to do a QA

74
00:03:29,920 --> 00:03:33,160
that you're going to do it well that

75
00:03:31,660 --> 00:03:34,900
it's going to be a very disciplined

76
00:03:33,160 --> 00:03:36,579
process that you're going to have

77
00:03:34,900 --> 00:03:38,230
measures you're going to have metrics

78
00:03:36,580 --> 00:03:39,430
and you're going to have measures for

79
00:03:38,230 --> 00:03:41,380
what is your test coverage

80
00:03:39,430 --> 00:03:42,940
what percentage of tests are passing and

81
00:03:41,380 --> 00:03:44,829
failing how are you meeting your

82
00:03:42,940 --> 00:03:47,650
requirements or not and all of those are

83
00:03:44,830 --> 00:03:50,500
generally pretty strictly gates to being

84
00:03:47,650 --> 00:03:53,019
able to release a product because the

85
00:03:50,500 --> 00:03:55,000
customer experience is valued and most

86
00:03:53,019 --> 00:03:56,890
organizations will recognize that if the

87
00:03:55,000 --> 00:03:58,690
customer experience is not good right if

88
00:03:56,890 --> 00:04:00,910
there are bugs if the software is not

89
00:03:58,690 --> 00:04:02,769
easy to use then you'll probably lose

90
00:04:00,910 --> 00:04:05,290
customers we're on the security side

91
00:04:02,769 --> 00:04:07,420
since Security's often not really seen

92
00:04:05,290 --> 00:04:09,700
as much and customers don't really know

93
00:04:07,420 --> 00:04:11,470
if the application is secure or not and

94
00:04:09,700 --> 00:04:13,329
you can just say we follow you know

95
00:04:11,470 --> 00:04:15,400
industry-leading practices and use bank

96
00:04:13,330 --> 00:04:17,230
level encryption customers will

97
00:04:15,400 --> 00:04:18,640
generally be okay with that even if

98
00:04:17,230 --> 00:04:20,890
there's no actual security under the

99
00:04:18,640 --> 00:04:22,120
hood and so security is valued in

100
00:04:20,890 --> 00:04:24,610
organizations because it's not as

101
00:04:22,120 --> 00:04:28,990
visible so how can we make security more

102
00:04:24,610 --> 00:04:30,130
visible and more consistent to increase

103
00:04:28,990 --> 00:04:32,470
the perception of value within

104
00:04:30,130 --> 00:04:35,530
organizations to improve investment and

105
00:04:32,470 --> 00:04:37,720
actually move security forward that's

106
00:04:35,530 --> 00:04:39,789
what we want to get to here so this is

107
00:04:37,720 --> 00:04:41,590
an opportunity to learn about QA and to

108
00:04:39,790 --> 00:04:43,270
learn about how security can be a little

109
00:04:41,590 --> 00:04:45,130
more disciplined and move closer to QA

110
00:04:43,270 --> 00:04:46,960
to add more value and hopefully

111
00:04:45,130 --> 00:04:50,880
ultimately get you more from a program

112
00:04:46,960 --> 00:04:50,880
perspective more money to do more things

113
00:04:51,220 --> 00:04:55,009
all right so let's talk a little bit

114
00:04:53,270 --> 00:04:58,508
about what security looks like today

115
00:04:55,009 --> 00:05:00,940
need everybody a good baseline so

116
00:04:58,509 --> 00:05:03,110
security is generally measured by

117
00:05:00,940 --> 00:05:05,509
maturity if any of you are a on a

118
00:05:03,110 --> 00:05:07,460
security team you probably have several

119
00:05:05,509 --> 00:05:09,830
maturity models that you've used you've

120
00:05:07,460 --> 00:05:11,719
probably hired consultants like us you

121
00:05:09,830 --> 00:05:14,270
know to come out and tell you how mature

122
00:05:11,720 --> 00:05:16,759
you are you know maybe your security

123
00:05:14,270 --> 00:05:18,590
program for app sex started as part of

124
00:05:16,759 --> 00:05:20,270
an audit where some auditor came out and

125
00:05:18,590 --> 00:05:22,008
said hey you don't have access but you

126
00:05:20,270 --> 00:05:24,560
have all these firewalls maybe you

127
00:05:22,009 --> 00:05:26,300
should start off with you know doing a

128
00:05:24,560 --> 00:05:28,550
pin test once a year or something like

129
00:05:26,300 --> 00:05:30,139
that and you get some kind of curve you

130
00:05:28,550 --> 00:05:32,090
know to improve your your level of

131
00:05:30,139 --> 00:05:34,250
maturity but you know at the high end

132
00:05:32,090 --> 00:05:36,739
you know mature security assurance

133
00:05:34,250 --> 00:05:39,020
programs generally take a risk-based

134
00:05:36,740 --> 00:05:41,659
approach we know at least a little bit

135
00:05:39,020 --> 00:05:44,240
about our applications we know which of

136
00:05:41,659 --> 00:05:47,030
our applications are putting money on

137
00:05:44,240 --> 00:05:48,889
the wire you know we you know which ones

138
00:05:47,030 --> 00:05:50,869
can cause the biggest impact to our

139
00:05:48,889 --> 00:05:52,970
business right we probably have some

140
00:05:50,870 --> 00:05:54,889
sort of a business impact analysis that

141
00:05:52,970 --> 00:05:57,080
tells us that and our security

142
00:05:54,889 --> 00:05:59,300
activities are generally tailored to

143
00:05:57,080 --> 00:06:01,669
that right our critical programs get

144
00:05:59,300 --> 00:06:03,860
more testing they get more pin tests

145
00:06:01,669 --> 00:06:05,870
they get more dynamic and static

146
00:06:03,860 --> 00:06:07,669
analysis done maybe we're doing threat

147
00:06:05,870 --> 00:06:09,919
modeling on them right we're throwing

148
00:06:07,669 --> 00:06:11,630
the whole the whole kitchen sink of

149
00:06:09,919 --> 00:06:13,580
security activities at those

150
00:06:11,630 --> 00:06:16,099
applications we're going to say maybe

151
00:06:13,580 --> 00:06:18,590
you know an internal brochure where type

152
00:06:16,099 --> 00:06:24,050
of site is getting very little if any

153
00:06:18,590 --> 00:06:25,698
security activities where is that we

154
00:06:24,050 --> 00:06:28,370
move over to the less mature programs

155
00:06:25,699 --> 00:06:30,050
and really the biggest indicator here is

156
00:06:28,370 --> 00:06:32,060
that everything's getting treated with

157
00:06:30,050 --> 00:06:34,280
the same level of security you know

158
00:06:32,060 --> 00:06:36,229
whether that be a lot of testing or very

159
00:06:34,280 --> 00:06:39,049
little right generally our applications

160
00:06:36,229 --> 00:06:42,110
are treated the same generally still

161
00:06:39,050 --> 00:06:43,940
doing you know SAS tasks etc you know in

162
00:06:42,110 --> 00:06:44,390
our manual penetration testing is

163
00:06:43,940 --> 00:06:49,070
general

164
00:06:44,390 --> 00:06:50,390
happening for compliance reasons so

165
00:06:49,070 --> 00:06:51,469
there's there's a big difference between

166
00:06:50,390 --> 00:06:54,680
mature and immature

167
00:06:51,470 --> 00:06:57,410
OPSEC programs right in general so does

168
00:06:54,680 --> 00:07:01,070
this resonate to do you all agree that

169
00:06:57,410 --> 00:07:02,510
you have a steep maturity curve sort of

170
00:07:01,070 --> 00:07:03,890
in the app sect world to say that

171
00:07:02,510 --> 00:07:05,150
there's a big difference between a

172
00:07:03,890 --> 00:07:08,630
mature and immature program

173
00:07:05,150 --> 00:07:09,620
show of hands sort yes yes okay I'm

174
00:07:08,630 --> 00:07:10,969
assuming the people who didn't raise

175
00:07:09,620 --> 00:07:16,510
their hands just aren't engaged and you

176
00:07:10,970 --> 00:07:19,640
agree so quality assurance we find

177
00:07:16,510 --> 00:07:21,800
pretty much exactly the opposite right a

178
00:07:19,640 --> 00:07:25,789
high maturity quality assurance program

179
00:07:21,800 --> 00:07:28,760
looks very similar to one that is low

180
00:07:25,790 --> 00:07:31,700
maturity and just starting out right a

181
00:07:28,760 --> 00:07:34,520
mature program has you know various

182
00:07:31,700 --> 00:07:36,530
various activities right we're defining

183
00:07:34,520 --> 00:07:39,890
in our strategy architecture scope

184
00:07:36,530 --> 00:07:42,369
dependencies etc we have formalized test

185
00:07:39,890 --> 00:07:45,289
plans we're using test case management

186
00:07:42,370 --> 00:07:47,570
in a less mature program we're doing all

187
00:07:45,290 --> 00:07:49,820
of those very same things you know

188
00:07:47,570 --> 00:07:53,540
really where we we differentiate between

189
00:07:49,820 --> 00:07:55,849
the two is more in the scale right you

190
00:07:53,540 --> 00:07:57,950
know an immature program who's maybe

191
00:07:55,850 --> 00:08:00,470
they've been doing QA testing for the

192
00:07:57,950 --> 00:08:02,539
last year maybe they have I'm just

193
00:08:00,470 --> 00:08:05,240
making up numbers right you know a dozen

194
00:08:02,540 --> 00:08:07,460
two dozen test cases something like that

195
00:08:05,240 --> 00:08:09,620
whereas maybe a more mature program

196
00:08:07,460 --> 00:08:12,020
that's been doing it a long time has you

197
00:08:09,620 --> 00:08:14,360
know hundreds or thousands of test cases

198
00:08:12,020 --> 00:08:16,340
but at the end of the day the process is

199
00:08:14,360 --> 00:08:17,600
that they're following are the same

200
00:08:16,340 --> 00:08:19,909
right they're following the same

201
00:08:17,600 --> 00:08:22,460
standards the same workflows the same

202
00:08:19,910 --> 00:08:23,930
processes yeah so this I mean this is

203
00:08:22,460 --> 00:08:25,460
really demonstrates the value right

204
00:08:23,930 --> 00:08:27,740
because if you're standing up whether

205
00:08:25,460 --> 00:08:28,969
it's a start-up or a large organization

206
00:08:27,740 --> 00:08:31,210
and you're gonna start doing some

207
00:08:28,970 --> 00:08:32,990
software development there are core

208
00:08:31,210 --> 00:08:34,789
foundational things that you're going to

209
00:08:32,990 --> 00:08:36,530
build into your program regardless of

210
00:08:34,789 --> 00:08:37,880
how much invent like its you're going to

211
00:08:36,530 --> 00:08:39,228
get investment to do it because it's

212
00:08:37,880 --> 00:08:41,450
assumed that these things need to be

213
00:08:39,229 --> 00:08:42,260
done we're on the security side that

214
00:08:41,450 --> 00:08:44,330
doesn't really happen

215
00:08:42,260 --> 00:08:45,890
you know I'll go to clients and I'll say

216
00:08:44,330 --> 00:08:47,510
you know you should be embedding

217
00:08:45,890 --> 00:08:49,910
security resources into your development

218
00:08:47,510 --> 00:08:51,680
teams to help review stories and

219
00:08:49,910 --> 00:08:53,719
identify risks and and identifies

220
00:08:51,680 --> 00:08:55,670
required security controls and you know

221
00:08:53,720 --> 00:08:57,200
continue that thread and the response

222
00:08:55,670 --> 00:08:58,130
I'll get is yeah that's that's great but

223
00:08:57,200 --> 00:08:59,630
that's where a man

224
00:08:58,130 --> 00:09:01,399
more mature program we're not quite

225
00:08:59,630 --> 00:09:03,170
there yet but you don't get that on the

226
00:09:01,399 --> 00:09:04,399
QA side right on the QA side it's

227
00:09:03,170 --> 00:09:06,229
assumed that you're gonna have test

228
00:09:04,399 --> 00:09:07,819
engineers embedded with the teams that

229
00:09:06,230 --> 00:09:09,319
you're gonna have a lead test engineer

230
00:09:07,819 --> 00:09:11,660
who is helping to build the security

231
00:09:09,319 --> 00:09:13,630
stats strategy and maintain consistency

232
00:09:11,660 --> 00:09:15,680
across all of your software development

233
00:09:13,630 --> 00:09:17,240
so it really comes down to sort of the

234
00:09:15,680 --> 00:09:19,819
perception of what's the value of

235
00:09:17,240 --> 00:09:22,850
security what's the value of QA QA is is

236
00:09:19,819 --> 00:09:27,430
valued whereas security on paper is but

237
00:09:22,850 --> 00:09:27,430
in practice is not really at least yet

238
00:09:28,000 --> 00:09:33,199
all right so quick summary like security

239
00:09:30,769 --> 00:09:35,930
versus quality assurance you know so are

240
00:09:33,199 --> 00:09:38,240
security assurance is relying on tools

241
00:09:35,930 --> 00:09:40,790
that are designed to test the baseline

242
00:09:38,240 --> 00:09:43,060
security of applications out of the box

243
00:09:40,790 --> 00:09:45,500
and our testing is really driven by

244
00:09:43,060 --> 00:09:47,689
vulnerability detection and

245
00:09:45,500 --> 00:09:49,639
identification right so a majority of

246
00:09:47,690 --> 00:09:51,769
the apps X programs that we see are very

247
00:09:49,639 --> 00:09:53,839
vulnerability based right you know

248
00:09:51,769 --> 00:09:56,569
organizations are pretty good at hey

249
00:09:53,839 --> 00:09:59,509
we've got 20,000 vulnerabilities you

250
00:09:56,569 --> 00:10:01,459
know 10,000 of those are critical we're

251
00:09:59,509 --> 00:10:03,589
getting better at finding them last year

252
00:10:01,459 --> 00:10:07,069
we only had 10,000 you know so obviously

253
00:10:03,589 --> 00:10:08,569
our our program is getting worse we're

254
00:10:07,069 --> 00:10:10,790
also generally tracking them as

255
00:10:08,569 --> 00:10:13,399
individual vulnerabilities you know

256
00:10:10,790 --> 00:10:15,439
rather than anti-patterns and individual

257
00:10:13,399 --> 00:10:17,000
problems right you know if you take you

258
00:10:15,439 --> 00:10:18,920
know any of these security tools or

259
00:10:17,000 --> 00:10:21,560
whatever or even the results of a pen

260
00:10:18,920 --> 00:10:23,689
test you know it's gonna say things like

261
00:10:21,560 --> 00:10:25,550
hey you know we found you know X number

262
00:10:23,689 --> 00:10:28,040
of cross-site scripting vulnerabilities

263
00:10:25,550 --> 00:10:30,109
in your application now hey developers

264
00:10:28,040 --> 00:10:32,509
here's a big report go out and you need

265
00:10:30,110 --> 00:10:34,850
to fix X number of cross-site scripting

266
00:10:32,509 --> 00:10:36,709
vulnerabilities without taking into your

267
00:10:34,850 --> 00:10:39,110
regard that those - those tooling and

268
00:10:36,709 --> 00:10:40,910
testing techniques probably missed a

269
00:10:39,110 --> 00:10:44,509
whole lot of vulnerabilities that you're

270
00:10:40,910 --> 00:10:46,189
not going to fix then Quality Assurance

271
00:10:44,509 --> 00:10:49,310
really the big difference here is

272
00:10:46,189 --> 00:10:52,670
testing is driven by requirements and

273
00:10:49,310 --> 00:10:56,420
controls validation so you're you're

274
00:10:52,670 --> 00:10:58,459
defining what your requirements are in

275
00:10:56,420 --> 00:11:02,300
any QH strategy right - then you're

276
00:10:58,459 --> 00:11:05,029
identifying controls that will satisfy

277
00:11:02,300 --> 00:11:06,829
satisfy those requirements and then

278
00:11:05,029 --> 00:11:07,850
you're testing for presence and

279
00:11:06,829 --> 00:11:10,189
effectiveness

280
00:11:07,850 --> 00:11:12,649
those controls and then reporting back

281
00:11:10,190 --> 00:11:15,829
essentially on whether that requirement

282
00:11:12,649 --> 00:11:17,720
was met or not you know for anybody that

283
00:11:15,829 --> 00:11:19,489
does QA testing I think that's pretty

284
00:11:17,720 --> 00:11:21,829
much a given you know because that's

285
00:11:19,490 --> 00:11:23,750
just how it's done right but security

286
00:11:21,829 --> 00:11:25,638
that's not how we think about things

287
00:11:23,750 --> 00:11:27,649
right we think about things and in terms

288
00:11:25,639 --> 00:11:29,060
of vulnerabilities because that's what

289
00:11:27,649 --> 00:11:32,930
our tools and techniques are good at

290
00:11:29,060 --> 00:11:35,060
detecting right so if we were to pull

291
00:11:32,930 --> 00:11:38,180
the room I would suspect that across

292
00:11:35,060 --> 00:11:40,160
your organization's you probably have 10

293
00:11:38,180 --> 00:11:42,079
15 different languages that are being

294
00:11:40,160 --> 00:11:44,149
used you know in the room different

295
00:11:42,079 --> 00:11:46,399
frameworks different architectures micro

296
00:11:44,149 --> 00:11:48,310
services web apps mobile apps right so

297
00:11:46,399 --> 00:11:50,509
all different types of applications and

298
00:11:48,310 --> 00:11:52,758
you're all probably using the same tools

299
00:11:50,509 --> 00:11:54,440
right to test them which are and they're

300
00:11:52,759 --> 00:11:56,149
all being designed that it's an industry

301
00:11:54,440 --> 00:11:58,130
problem don't mean to like imply fault

302
00:11:56,149 --> 00:11:59,569
on anyone right that that these tools we

303
00:11:58,130 --> 00:12:00,889
buy them out of the box and we expect

304
00:11:59,569 --> 00:12:02,269
them to work on all of these different

305
00:12:00,889 --> 00:12:03,769
architectures and languages and

306
00:12:02,269 --> 00:12:05,209
frameworks and we expect the tool

307
00:12:03,769 --> 00:12:07,490
vendors to figure out how to do that

308
00:12:05,209 --> 00:12:09,170
it's just not reasonable right your

309
00:12:07,490 --> 00:12:11,050
applications are all custom built for a

310
00:12:09,170 --> 00:12:12,860
reason because they provide custom

311
00:12:11,050 --> 00:12:14,990
functionality that that meets your

312
00:12:12,860 --> 00:12:16,970
business's needs on the QA side they

313
00:12:14,990 --> 00:12:19,009
don't have that expectation they by

314
00:12:16,970 --> 00:12:20,899
testing frameworks right like you've

315
00:12:19,009 --> 00:12:23,810
probably heard like selenium right or

316
00:12:20,899 --> 00:12:26,000
j-unit or right these tools that are

317
00:12:23,810 --> 00:12:27,979
frameworks that enable you to write your

318
00:12:26,000 --> 00:12:30,199
own tests to test things that are

319
00:12:27,980 --> 00:12:31,910
important to you based on your languages

320
00:12:30,199 --> 00:12:33,680
based on your frameworks but based on

321
00:12:31,910 --> 00:12:35,600
your tech stack and so that there's just

322
00:12:33,680 --> 00:12:37,910
sort of a difference in our expectations

323
00:12:35,600 --> 00:12:40,670
of vendors and the more mature industry

324
00:12:37,910 --> 00:12:42,740
which is QA is not they're not following

325
00:12:40,670 --> 00:12:44,540
the same same patterns that we are of

326
00:12:42,740 --> 00:12:47,089
thinking that vendors can sort of

327
00:12:44,540 --> 00:12:51,170
produce these out-of-the-box solutions

328
00:12:47,089 --> 00:12:53,120
that work across the board all right so

329
00:12:51,170 --> 00:12:56,930
let's look at a very basic basic you

330
00:12:53,120 --> 00:12:58,279
know QA testing framework so you know

331
00:12:56,930 --> 00:12:59,899
generally starts with requirements

332
00:12:58,279 --> 00:13:02,689
gathering and you see that kind of flows

333
00:12:59,899 --> 00:13:05,839
all the way to to test reporting but

334
00:13:02,689 --> 00:13:07,610
generally your QA is embedded inside of

335
00:13:05,839 --> 00:13:11,000
your product teams you know they're

336
00:13:07,610 --> 00:13:12,589
involved from product inception you know

337
00:13:11,000 --> 00:13:14,630
to sprint planning you know all the

338
00:13:12,589 --> 00:13:16,610
releases all the way up to your final

339
00:13:14,630 --> 00:13:19,100
release and then some is the product

340
00:13:16,610 --> 00:13:20,689
continues to evolve you know they're

341
00:13:19,100 --> 00:13:21,420
reviewing you know all the requirements

342
00:13:20,689 --> 00:13:23,219
all

343
00:13:21,420 --> 00:13:25,349
the user stories they're helping to

344
00:13:23,220 --> 00:13:27,630
identify them you know and then they're

345
00:13:25,350 --> 00:13:29,850
building a test strategy based on that

346
00:13:27,630 --> 00:13:32,790
so they're using that information to

347
00:13:29,850 --> 00:13:33,900
then come up with a test plan you know

348
00:13:32,790 --> 00:13:35,849
which is where they start well you know

349
00:13:33,900 --> 00:13:37,500
we'll have some slides on this later but

350
00:13:35,850 --> 00:13:40,620
you know they start writing you know the

351
00:13:37,500 --> 00:13:42,600
Gherkin you know type of scripts you

352
00:13:40,620 --> 00:13:44,280
know to put out in plain English

353
00:13:42,600 --> 00:13:46,890
you know what that test should look like

354
00:13:44,280 --> 00:13:48,449
and what it should perform you know test

355
00:13:46,890 --> 00:13:51,300
development is where you know a

356
00:13:48,450 --> 00:13:53,040
developer or a QA analyst you know is

357
00:13:51,300 --> 00:13:54,990
actually writing the code you know

358
00:13:53,040 --> 00:13:57,719
behind the Gherkin that's actually doing

359
00:13:54,990 --> 00:13:59,820
the test execution at some point we

360
00:13:57,720 --> 00:14:02,430
execute the test likely repeatedly as

361
00:13:59,820 --> 00:14:04,050
part of our key our build or our release

362
00:14:02,430 --> 00:14:06,359
process you know a lot of times you know

363
00:14:04,050 --> 00:14:08,280
these are you know gates that we have to

364
00:14:06,360 --> 00:14:10,170
pass to release our code and then

365
00:14:08,280 --> 00:14:11,730
finally we have reporting right and the

366
00:14:10,170 --> 00:14:13,709
important thing here is that our

367
00:14:11,730 --> 00:14:15,420
requirements feed back into our

368
00:14:13,710 --> 00:14:18,420
reporting the reports that come out of

369
00:14:15,420 --> 00:14:20,430
this are specific to those requirements

370
00:14:18,420 --> 00:14:22,709
so we have direct line-of-sight and

371
00:14:20,430 --> 00:14:25,920
traceability you know going all the way

372
00:14:22,710 --> 00:14:28,020
from our requirements to the reporting

373
00:14:25,920 --> 00:14:29,670
which is which is very important here in

374
00:14:28,020 --> 00:14:34,260
a key part of our message that will

375
00:14:29,670 --> 00:14:36,719
hopefully come out security is really

376
00:14:34,260 --> 00:14:38,580
only doing those middle three right the

377
00:14:36,720 --> 00:14:40,710
test planning test development and test

378
00:14:38,580 --> 00:14:42,510
execution I actually had a long

379
00:14:40,710 --> 00:14:44,730
conversation with Kevin about this last

380
00:14:42,510 --> 00:14:46,650
night I would even argue that Security's

381
00:14:44,730 --> 00:14:49,350
doing the first two of those you know

382
00:14:46,650 --> 00:14:51,000
pretty pretty poorly right you know a

383
00:14:49,350 --> 00:14:53,070
lot of us say hey we need to have a pen

384
00:14:51,000 --> 00:14:55,500
test because we have to or because we're

385
00:14:53,070 --> 00:14:58,740
gonna have a release right and our scope

386
00:14:55,500 --> 00:15:01,860
is gonna be you know this application

387
00:14:58,740 --> 00:15:04,050
don't leave the sub-domain there you go

388
00:15:01,860 --> 00:15:05,810
give me your report back all right we

389
00:15:04,050 --> 00:15:08,189
don't put a whole lot of thought into

390
00:15:05,810 --> 00:15:09,750
the planning you know even even when we

391
00:15:08,190 --> 00:15:11,880
start talking about tools right it's

392
00:15:09,750 --> 00:15:13,800
just hey let's you know let's let's

393
00:15:11,880 --> 00:15:15,689
stage up our favorite tool and let's

394
00:15:13,800 --> 00:15:18,000
scan all of our applications and let's

395
00:15:15,690 --> 00:15:19,860
scan this app right oh crap it has

396
00:15:18,000 --> 00:15:21,450
authentication so it didn't get past the

397
00:15:19,860 --> 00:15:23,760
first page so I've got to configure

398
00:15:21,450 --> 00:15:26,220
authentication hey great I've planned

399
00:15:23,760 --> 00:15:27,689
out my test right and then it runs for

400
00:15:26,220 --> 00:15:30,070
four days and then you get you know

401
00:15:27,690 --> 00:15:31,780
twenty thousand vulnerabilities

402
00:15:30,070 --> 00:15:33,760
you know so the important thing is we

403
00:15:31,780 --> 00:15:36,069
want it we want to shift this you know

404
00:15:33,760 --> 00:15:37,450
to where security is doing everything

405
00:15:36,070 --> 00:15:39,330
right we're doing thorough planning

406
00:15:37,450 --> 00:15:42,100
tests development requirements gathering

407
00:15:39,330 --> 00:15:46,750
reporting and we'll circle back and show

408
00:15:42,100 --> 00:15:47,560
you how you can do all of that so you

409
00:15:46,750 --> 00:15:48,970
know what I'm going to kind of give you

410
00:15:47,560 --> 00:15:50,589
an example here of what we're talking

411
00:15:48,970 --> 00:15:54,070
about because I know this is all kind of

412
00:15:50,590 --> 00:15:55,690
you know fluffy and high-level so far so

413
00:15:54,070 --> 00:15:57,660
you're not gonna give you a two examples

414
00:15:55,690 --> 00:16:00,670
right the first one is clickjacking

415
00:15:57,660 --> 00:16:05,560
everybody relatively familiar with what

416
00:16:00,670 --> 00:16:08,500
clickjacking is okay no there were some

417
00:16:05,560 --> 00:16:10,119
knows yep all right well so cliff

418
00:16:08,500 --> 00:16:11,980
jacking is it's an application level

419
00:16:10,120 --> 00:16:13,990
vulnerability this feels like a test now

420
00:16:11,980 --> 00:16:15,250
click jacking is an application level

421
00:16:13,990 --> 00:16:18,250
vulnerability where essentially you're

422
00:16:15,250 --> 00:16:20,350
able to insert a frame basically another

423
00:16:18,250 --> 00:16:23,050
application on top of the application

424
00:16:20,350 --> 00:16:25,090
the user is using and so when they click

425
00:16:23,050 --> 00:16:26,050
on something that they think they're

426
00:16:25,090 --> 00:16:27,430
clicking on one thing but they're

427
00:16:26,050 --> 00:16:30,069
actually clicking on the application on

428
00:16:27,430 --> 00:16:31,540
top of it so the prototypical very old

429
00:16:30,070 --> 00:16:34,000
example is you you know you put a

430
00:16:31,540 --> 00:16:36,339
banking application on top of a little

431
00:16:34,000 --> 00:16:37,750
game where the user has to click on a

432
00:16:36,340 --> 00:16:39,340
bunch of buttons and then put in some

433
00:16:37,750 --> 00:16:40,780
really big numbers and what they're

434
00:16:39,340 --> 00:16:41,980
actually doing it looks to them like

435
00:16:40,780 --> 00:16:44,770
that's what they're doing but there's a

436
00:16:41,980 --> 00:16:46,450
transparent frame or application on top

437
00:16:44,770 --> 00:16:47,770
of that application and they're actually

438
00:16:46,450 --> 00:16:49,750
transferring a whole bunch of money

439
00:16:47,770 --> 00:16:51,189
right because their banking application

440
00:16:49,750 --> 00:16:52,930
is sitting on top and they're logged in

441
00:16:51,190 --> 00:16:58,780
so the session is there that type of

442
00:16:52,930 --> 00:17:00,579
thing yeah I mean that's that's a it's a

443
00:16:58,780 --> 00:17:02,620
perfect Segway right there right cuz we

444
00:17:00,580 --> 00:17:04,360
have this guy here on the left right you

445
00:17:02,620 --> 00:17:07,060
get your pen test report back you run a

446
00:17:04,359 --> 00:17:08,800
tool whatever it says hey you've got a

447
00:17:07,060 --> 00:17:10,569
quick jacking vulnerability right

448
00:17:08,800 --> 00:17:12,069
precisely what this guy's saying hearing

449
00:17:10,569 --> 00:17:14,710
what the hell is clickjacking yeah

450
00:17:12,069 --> 00:17:16,869
that's a very security centric term that

451
00:17:14,710 --> 00:17:18,190
means something very specific you know

452
00:17:16,869 --> 00:17:20,109
and especially when we take one of these

453
00:17:18,190 --> 00:17:21,480
reports and give it to our developers

454
00:17:20,109 --> 00:17:23,530
and tell them to fix a clickjacking

455
00:17:21,480 --> 00:17:25,180
vulnerability right again that's a

456
00:17:23,530 --> 00:17:27,190
security centric term they might not

457
00:17:25,180 --> 00:17:28,870
have any idea you know what that

458
00:17:27,190 --> 00:17:32,170
actually means right and if we read

459
00:17:28,870 --> 00:17:34,300
through the description here it's not

460
00:17:32,170 --> 00:17:35,800
all that more obvious right it was

461
00:17:34,300 --> 00:17:37,570
observed that the application does not

462
00:17:35,800 --> 00:17:40,149
explicitly prevent or deny clickjacking

463
00:17:37,570 --> 00:17:42,040
style attacks also known as aue redress

464
00:17:40,150 --> 00:17:45,070
attack

465
00:17:42,040 --> 00:17:47,920
right that's not helpful

466
00:17:45,070 --> 00:17:49,990
also you know the key thing here is to

467
00:17:47,920 --> 00:17:51,520
say if we do pay for a pen test you have

468
00:17:49,990 --> 00:17:53,650
some really smart people come out try to

469
00:17:51,520 --> 00:17:55,360
break your application and the final

470
00:17:53,650 --> 00:17:57,580
report that they give you doesn't have a

471
00:17:55,360 --> 00:17:59,080
clickjacking vulnerability on it or say

472
00:17:57,580 --> 00:18:01,510
you're run a scan and it doesn't have a

473
00:17:59,080 --> 00:18:03,340
clickjacking vulnerability that doesn't

474
00:18:01,510 --> 00:18:05,200
necessarily mean that you don't have a

475
00:18:03,340 --> 00:18:07,840
click jacking vulnerability in your

476
00:18:05,200 --> 00:18:09,790
application it just means that it wasn't

477
00:18:07,840 --> 00:18:12,399
discovered you know with the testing

478
00:18:09,790 --> 00:18:14,740
techniques or you know within the scope

479
00:18:12,400 --> 00:18:19,870
or time box that the test was performed

480
00:18:14,740 --> 00:18:21,400
right so it's a false negative Ryan over

481
00:18:19,870 --> 00:18:22,989
here on the right you know it's more so

482
00:18:21,400 --> 00:18:25,240
you know what we're proposing today

483
00:18:22,990 --> 00:18:26,230
where we're gonna take a more QA type of

484
00:18:25,240 --> 00:18:31,270
approach to this

485
00:18:26,230 --> 00:18:33,220
so our requirement is right doesn't say

486
00:18:31,270 --> 00:18:35,260
anything about clickjacking is the first

487
00:18:33,220 --> 00:18:38,650
thing right but X frame options header

488
00:18:35,260 --> 00:18:41,230
shall be set to denied on all HTTP

489
00:18:38,650 --> 00:18:44,620
responses it has recommended this be

490
00:18:41,230 --> 00:18:46,240
performed by the load balancer so a

491
00:18:44,620 --> 00:18:47,919
couple of important things here right so

492
00:18:46,240 --> 00:18:49,350
again first of all we didn't mention

493
00:18:47,920 --> 00:18:52,900
clickjacking at all

494
00:18:49,350 --> 00:18:55,120
second of all the developer now knows if

495
00:18:52,900 --> 00:18:58,870
they're reading this requirement they

496
00:18:55,120 --> 00:19:00,610
know exactly what they need to do right

497
00:18:58,870 --> 00:19:02,949
they know that they have a setter that

498
00:19:00,610 --> 00:19:05,469
there are a header that they need to set

499
00:19:02,950 --> 00:19:08,080
in their application or ideally on the

500
00:19:05,470 --> 00:19:10,420
load balancer to do this for them right

501
00:19:08,080 --> 00:19:13,090
they know what the requirement is they

502
00:19:10,420 --> 00:19:16,420
know what the security control is and

503
00:19:13,090 --> 00:19:18,340
then they also know the answer to the

504
00:19:16,420 --> 00:19:21,520
test that they're going to be given

505
00:19:18,340 --> 00:19:23,800
right so that when this the test case

506
00:19:21,520 --> 00:19:29,440
for this is running they know how to

507
00:19:23,800 --> 00:19:31,870
pass it also it's implemented right the

508
00:19:29,440 --> 00:19:34,960
first time and if it's not do they have

509
00:19:31,870 --> 00:19:36,639
very clear guidance right so if again a

510
00:19:34,960 --> 00:19:38,770
pen tester comes out tells you have a

511
00:19:36,640 --> 00:19:40,270
clickjacking vulnerability I mean one of

512
00:19:38,770 --> 00:19:42,610
the things that we do frequently is

513
00:19:40,270 --> 00:19:44,320
retest you know if we do a vulnerability

514
00:19:42,610 --> 00:19:46,629
because we tell developers things like

515
00:19:44,320 --> 00:19:48,490
go fix this click jacking vulnerability

516
00:19:46,630 --> 00:19:50,380
let us know after you fixed it will do a

517
00:19:48,490 --> 00:19:54,250
retest and will tell you if it's at

518
00:19:50,380 --> 00:19:56,200
she fixed a large portion of the time we

519
00:19:54,250 --> 00:19:58,090
go back out there and we retest it and

520
00:19:56,200 --> 00:20:00,220
they still have the same vulnerability

521
00:19:58,090 --> 00:20:01,959
because they only partially found it or

522
00:20:00,220 --> 00:20:04,650
they went to Stack Overflow because

523
00:20:01,960 --> 00:20:07,990
that's how developers write code and

524
00:20:04,650 --> 00:20:11,080
they didn't implement the solution right

525
00:20:07,990 --> 00:20:13,030
to the first time also it's very few

526
00:20:11,080 --> 00:20:15,639
false positives right because we can

527
00:20:13,030 --> 00:20:18,750
write a test case that will test

528
00:20:15,640 --> 00:20:21,400
specifically for the correct

529
00:20:18,750 --> 00:20:24,040
implementation and configuration of that

530
00:20:21,400 --> 00:20:25,990
header and more importantly we get that

531
00:20:24,040 --> 00:20:28,030
traceability back again it's not you

532
00:20:25,990 --> 00:20:30,400
have a clickjacking finding it is we

533
00:20:28,030 --> 00:20:32,590
have a security requirement that you

534
00:20:30,400 --> 00:20:35,650
will implement this header in this way

535
00:20:32,590 --> 00:20:37,990
that security requirement felt so so to

536
00:20:35,650 --> 00:20:39,880
give a different example I like to talk

537
00:20:37,990 --> 00:20:42,820
about cross-site scripting with this

538
00:20:39,880 --> 00:20:44,110
just because I hate you know scanners

539
00:20:42,820 --> 00:20:46,750
and tools that are testing for

540
00:20:44,110 --> 00:20:48,310
cross-site scripting you know very so

541
00:20:46,750 --> 00:20:51,310
generally the way these tools will work

542
00:20:48,310 --> 00:20:52,659
is you'll point them at your application

543
00:20:51,310 --> 00:20:55,179
they're gonna go out they're gonna do a

544
00:20:52,660 --> 00:20:56,980
crawl they're gonna map out all of your

545
00:20:55,180 --> 00:20:59,500
application all your get requests all

546
00:20:56,980 --> 00:21:01,990
your post requests all of the responses

547
00:20:59,500 --> 00:21:04,180
etc it's gonna find all of the user

548
00:21:01,990 --> 00:21:05,920
input write all of your cookies all of

549
00:21:04,180 --> 00:21:08,620
your query strings all your post body

550
00:21:05,920 --> 00:21:11,640
parameters etc and then it's gonna

551
00:21:08,620 --> 00:21:14,199
inject approximately a half a bajillion

552
00:21:11,640 --> 00:21:15,430
you know malformed inputs into their

553
00:21:14,200 --> 00:21:18,340
right you know you've all seen you know

554
00:21:15,430 --> 00:21:20,290
the less than script alert etc you know

555
00:21:18,340 --> 00:21:23,980
and then there's just an infinite amount

556
00:21:20,290 --> 00:21:25,960
of payloads so the scanner is gonna do

557
00:21:23,980 --> 00:21:27,970
that to all of the inputs to your

558
00:21:25,960 --> 00:21:30,100
application which is time consuming I

559
00:21:27,970 --> 00:21:31,630
mean if any of you have ever run dynamic

560
00:21:30,100 --> 00:21:33,219
analysis especially on a large

561
00:21:31,630 --> 00:21:35,680
application you know you might have

562
00:21:33,220 --> 00:21:38,230
found that it takes sometimes days to

563
00:21:35,680 --> 00:21:40,390
run and that's part of why right because

564
00:21:38,230 --> 00:21:41,950
it's creating all of those payloads it's

565
00:21:40,390 --> 00:21:44,380
actually changing the payloads every

566
00:21:41,950 --> 00:21:47,020
time each test might have a different

567
00:21:44,380 --> 00:21:49,600
set of arbitrary payloads well if we

568
00:21:47,020 --> 00:21:51,490
change the approach from you know hey

569
00:21:49,600 --> 00:21:53,469
thou shalt not have cross-site scripting

570
00:21:51,490 --> 00:21:56,500
in your application which we can never

571
00:21:53,470 --> 00:21:58,629
guarantee anyway right instead we say

572
00:21:56,500 --> 00:22:00,309
our security requirement is

573
00:21:58,629 --> 00:22:01,448
I'm gonna make something up right you

574
00:22:00,309 --> 00:22:03,039
don't have to follow this don't write

575
00:22:01,449 --> 00:22:06,609
this down you know something like hey

576
00:22:03,039 --> 00:22:09,820
you should use a wasp a sappy framework

577
00:22:06,609 --> 00:22:12,339
you know configured an ex way to prevent

578
00:22:09,820 --> 00:22:14,289
cross-site scripting vulnerabilities and

579
00:22:12,339 --> 00:22:17,168
all of our custom developed applications

580
00:22:14,289 --> 00:22:18,820
right now we can write a test case you

581
00:22:17,169 --> 00:22:21,249
know that will look at your you know

582
00:22:18,820 --> 00:22:24,218
your web config file or wherever in your

583
00:22:21,249 --> 00:22:27,639
application and you'll look for the

584
00:22:24,219 --> 00:22:31,029
presence and proper configuration of a

585
00:22:27,639 --> 00:22:33,399
wasp isapi and then we can say we are

586
00:22:31,029 --> 00:22:35,769
meeting our requirement and we are

587
00:22:33,399 --> 00:22:38,079
following the company standard for

588
00:22:35,769 --> 00:22:39,940
preventing cross-site scripting

589
00:22:38,079 --> 00:22:41,979
vulnerabilities inside of our

590
00:22:39,940 --> 00:22:44,349
application and then when we put that on

591
00:22:41,979 --> 00:22:47,109
a report you know back to our C cells

592
00:22:44,349 --> 00:22:48,789
right we can never ever you know no

593
00:22:47,109 --> 00:22:50,769
matter what our management wants to

594
00:22:48,789 --> 00:22:52,419
think right we could never guarantee

595
00:22:50,769 --> 00:22:55,629
that we're free of cross-site scripting

596
00:22:52,419 --> 00:22:58,389
but we can guarantee that the control

597
00:22:55,629 --> 00:23:01,029
that we outlined is in place and working

598
00:22:58,389 --> 00:23:06,369
properly and mitigating it you'd have a

599
00:23:01,029 --> 00:23:09,940
base on our requirement that was a lot

600
00:23:06,369 --> 00:23:11,349
I'm sorry so so what does this

601
00:23:09,940 --> 00:23:12,909
practically look like we're gonna get

602
00:23:11,349 --> 00:23:15,519
more and more practical we're gonna get

603
00:23:12,909 --> 00:23:18,669
to an example to sort of try to solidify

604
00:23:15,519 --> 00:23:21,309
this in a minute but test strategies is

605
00:23:18,669 --> 00:23:23,019
sort of the first step so we talked

606
00:23:21,309 --> 00:23:25,269
about this a little bit earlier in the

607
00:23:23,019 --> 00:23:26,889
process you know security generally

608
00:23:25,269 --> 00:23:29,559
doesn't have much of a test strategy we

609
00:23:26,889 --> 00:23:31,029
might have requirements we might take a

610
00:23:29,559 --> 00:23:33,039
risk-based approach and we might treat

611
00:23:31,029 --> 00:23:35,349
applications differently and say that

612
00:23:33,039 --> 00:23:37,479
these applications need manual pen tests

613
00:23:35,349 --> 00:23:38,678
and these ones need threat models and

614
00:23:37,479 --> 00:23:41,049
architecture reviews and with this

615
00:23:38,679 --> 00:23:43,359
frequency but we don't really go to the

616
00:23:41,049 --> 00:23:46,029
same level of documentation and

617
00:23:43,359 --> 00:23:47,978
granularity especially at the product or

618
00:23:46,029 --> 00:23:50,019
application level that QA does right

619
00:23:47,979 --> 00:23:52,509
we're still looking for sort of program

620
00:23:50,019 --> 00:23:53,859
or enterprise-wide solutions and that

621
00:23:52,509 --> 00:23:55,479
there are various reasons for that one

622
00:23:53,859 --> 00:23:57,908
of which is staffing right we typically

623
00:23:55,479 --> 00:24:00,549
don't have the numbers to really embed

624
00:23:57,909 --> 00:24:03,639
and go to the to the level of looking at

625
00:24:00,549 --> 00:24:05,289
every application and so again that goes

626
00:24:03,639 --> 00:24:08,559
back to value which hopefully eventually

627
00:24:05,289 --> 00:24:10,629
would be resolved but test strategy is

628
00:24:08,559 --> 00:24:12,389
the first step that QA tip takes and

629
00:24:10,629 --> 00:24:14,520
they look at the application it's

630
00:24:12,390 --> 00:24:16,080
and for every product or application

631
00:24:14,520 --> 00:24:17,730
that they build they write a test

632
00:24:16,080 --> 00:24:19,740
strategy which in my experience is

633
00:24:17,730 --> 00:24:22,920
usually a hundred plus pages and

634
00:24:19,740 --> 00:24:24,960
describes the scope of what testing will

635
00:24:22,920 --> 00:24:26,220
be it describes the environments where

636
00:24:24,960 --> 00:24:30,510
we're going to test we're going to test

637
00:24:26,220 --> 00:24:32,790
in UAE testing or si T or integration

638
00:24:30,510 --> 00:24:33,990
testing units at like what types of

639
00:24:32,790 --> 00:24:35,670
testing are we gonna do what are the

640
00:24:33,990 --> 00:24:36,930
environments we're gonna test in what

641
00:24:35,670 --> 00:24:39,030
are the roles and responsibilities for

642
00:24:36,930 --> 00:24:40,770
testing so I've gotten it's like sort of

643
00:24:39,030 --> 00:24:42,570
some of these another slide but there's

644
00:24:40,770 --> 00:24:45,570
a whole lot of detail that's determined

645
00:24:42,570 --> 00:24:47,730
upfront that's built in collaboration

646
00:24:45,570 --> 00:24:49,230
with the product teams so that everyone

647
00:24:47,730 --> 00:24:52,560
is on the same page there's knowledge

648
00:24:49,230 --> 00:24:54,090
sharing about what we're going to do to

649
00:24:52,560 --> 00:24:56,940
make sure that this application or this

650
00:24:54,090 --> 00:24:59,010
product is ready for our customers and

651
00:24:56,940 --> 00:25:01,110
that's that's really important because

652
00:24:59,010 --> 00:25:03,060
you have now a centralized knowledge

653
00:25:01,110 --> 00:25:04,409
share where if you have QA team members

654
00:25:03,060 --> 00:25:05,970
who come on the project go off the

655
00:25:04,410 --> 00:25:07,320
project developers join leave the

656
00:25:05,970 --> 00:25:09,390
project you get a new product owner

657
00:25:07,320 --> 00:25:11,639
right you have a centralized knowledge

658
00:25:09,390 --> 00:25:13,650
share of this is our approach this is

659
00:25:11,640 --> 00:25:15,900
what we're doing and it makes sure that

660
00:25:13,650 --> 00:25:18,630
there's consistency between you might

661
00:25:15,900 --> 00:25:20,790
you might have multiple QA testers or QA

662
00:25:18,630 --> 00:25:22,290
engineers within the product teams now

663
00:25:20,790 --> 00:25:24,510
you have consistency that they're all

664
00:25:22,290 --> 00:25:26,250
following the same methodology they're

665
00:25:24,510 --> 00:25:27,450
all on the same page right I don't think

666
00:25:26,250 --> 00:25:30,000
we have that from a security perspective

667
00:25:27,450 --> 00:25:30,810
right if I pen test an application well

668
00:25:30,000 --> 00:25:32,460
I'm not going to find anything because

669
00:25:30,810 --> 00:25:34,710
I'm not very good at pen testing but if

670
00:25:32,460 --> 00:25:36,120
Josh pen tests the same application he

671
00:25:34,710 --> 00:25:38,520
might find more because he's better at

672
00:25:36,120 --> 00:25:39,899
it right that's that's an inconsistent

673
00:25:38,520 --> 00:25:41,370
process and we're not delivering

674
00:25:39,900 --> 00:25:43,560
consistency we're not really delivering

675
00:25:41,370 --> 00:25:45,300
our value QA is much better at this

676
00:25:43,560 --> 00:25:47,210
because they get granular and define

677
00:25:45,300 --> 00:25:51,149
exactly what they're going to be doing

678
00:25:47,210 --> 00:25:54,020
so I think we got dependencies and

679
00:25:51,150 --> 00:25:56,130
constraints roles and responsibilities a

680
00:25:54,020 --> 00:25:57,570
lot of these will have architecture

681
00:25:56,130 --> 00:26:00,150
diagrams that come out of the design

682
00:25:57,570 --> 00:26:01,679
phase and the testing plans and testing

683
00:26:00,150 --> 00:26:03,540
strategies are built based on that I

684
00:26:01,680 --> 00:26:05,340
think we would really benefit from that

685
00:26:03,540 --> 00:26:07,560
from a security perspective like how

686
00:26:05,340 --> 00:26:09,300
many how often do you go into a pen test

687
00:26:07,560 --> 00:26:11,940
or a code review or an architecture

688
00:26:09,300 --> 00:26:14,070
review and you've got really no inputs

689
00:26:11,940 --> 00:26:16,050
except for like a running application or

690
00:26:14,070 --> 00:26:18,570
the source code right that wouldn't work

691
00:26:16,050 --> 00:26:20,760
for QA they go in understanding what is

692
00:26:18,570 --> 00:26:22,020
what is the core business value of the

693
00:26:20,760 --> 00:26:23,910
application what is it trying to

694
00:26:22,020 --> 00:26:25,158
accomplish who are the users what are

695
00:26:23,910 --> 00:26:26,330
the roles what if the

696
00:26:25,159 --> 00:26:28,159
architecture look like all the

697
00:26:26,330 --> 00:26:30,470
components how do they connect and they

698
00:26:28,159 --> 00:26:34,509
can build their tests based on that so

699
00:26:30,470 --> 00:26:34,509
we're sort of at a disadvantage yes

700
00:26:41,790 --> 00:26:48,139
yeah yeah

701
00:26:53,310 --> 00:26:57,870
yeah yeah and what I mean that so that

702
00:26:55,920 --> 00:26:59,970
will be one of our our takeaways later

703
00:26:57,870 --> 00:27:01,260
is exactly that is right security should

704
00:26:59,970 --> 00:27:03,930
be part of this process from the

705
00:27:01,260 --> 00:27:05,879
beginning so the the programs that I

706
00:27:03,930 --> 00:27:07,290
like to work on we're part of P I

707
00:27:05,880 --> 00:27:08,520
playing the programming increment

708
00:27:07,290 --> 00:27:10,110
planning that happens before sprint

709
00:27:08,520 --> 00:27:11,639
planning right and we're part of sprint

710
00:27:10,110 --> 00:27:14,040
planning and so as stories are being

711
00:27:11,640 --> 00:27:16,830
developed and prioritized we're there to

712
00:27:14,040 --> 00:27:18,420
hear them to figure out sort of on the

713
00:27:16,830 --> 00:27:19,620
fly what are the potential risks and

714
00:27:18,420 --> 00:27:21,900
what they're describing they want to do

715
00:27:19,620 --> 00:27:23,909
and to tell them here are some

716
00:27:21,900 --> 00:27:25,560
considerations and controls that you

717
00:27:23,910 --> 00:27:26,610
need to make sure are part of that and

718
00:27:25,560 --> 00:27:28,169
we'll show you what that looks like

719
00:27:26,610 --> 00:27:30,469
we're gonna we're gonna go there in a

720
00:27:28,170 --> 00:27:32,460
minute and show you a feature with

721
00:27:30,470 --> 00:27:33,840
functional requirements and then what

722
00:27:32,460 --> 00:27:35,430
the security requirements will look like

723
00:27:33,840 --> 00:27:37,080
tagged to that and if you do it that way

724
00:27:35,430 --> 00:27:38,880
you're right there's there's no tension

725
00:27:37,080 --> 00:27:40,409
because you're part of the process the

726
00:27:38,880 --> 00:27:41,610
problem is when security comes in later

727
00:27:40,410 --> 00:27:43,830
and says well now we're going to run a

728
00:27:41,610 --> 00:27:45,479
test a scan and and you don't really

729
00:27:43,830 --> 00:27:46,649
know what that scan is doing but if we

730
00:27:45,480 --> 00:27:50,190
find vulnerabilities you're gonna have

731
00:27:46,650 --> 00:27:52,350
to fix them right it's it's a very it's

732
00:27:50,190 --> 00:27:55,290
not a great process is that is that sort

733
00:27:52,350 --> 00:27:56,580
of what you meant yeah and feel free

734
00:27:55,290 --> 00:27:58,590
please anyone else if you have questions

735
00:27:56,580 --> 00:28:02,179
please raise your hand or just call out

736
00:27:58,590 --> 00:28:04,500
that's fine I appreciate that thank you

737
00:28:02,180 --> 00:28:05,880
right and then so what's and what's the

738
00:28:04,500 --> 00:28:07,080
acceptance criteria how do we know if

739
00:28:05,880 --> 00:28:09,420
this application can go to production

740
00:28:07,080 --> 00:28:11,990
this is this is an interesting one from

741
00:28:09,420 --> 00:28:13,890
a security perspective because our our

742
00:28:11,990 --> 00:28:15,870
elevation criteria is often very

743
00:28:13,890 --> 00:28:17,610
arbitrary right like you can't have any

744
00:28:15,870 --> 00:28:20,159
medium or higher findings you can't have

745
00:28:17,610 --> 00:28:22,439
any critical findings you can't have any

746
00:28:20,160 --> 00:28:24,090
authentication findings so we're session

747
00:28:22,440 --> 00:28:25,740
management right but it's like what what

748
00:28:24,090 --> 00:28:28,649
is the objectivity what's the basis for

749
00:28:25,740 --> 00:28:30,810
how we've determined this there is none

750
00:28:28,650 --> 00:28:32,460
it's entirely subjective it's based on

751
00:28:30,810 --> 00:28:34,950
leading practices that were you know

752
00:28:32,460 --> 00:28:36,930
developed over time without without the

753
00:28:34,950 --> 00:28:38,700
discipline that's present typically in

754
00:28:36,930 --> 00:28:40,440
in QA and that's what we want to move

755
00:28:38,700 --> 00:28:42,390
closer to if we can if we can link back

756
00:28:40,440 --> 00:28:43,560
to requirements then we can determine

757
00:28:42,390 --> 00:28:45,480
what's the threat model of the

758
00:28:43,560 --> 00:28:47,070
application what are their real what are

759
00:28:45,480 --> 00:28:49,230
the real risks to us being able to

760
00:28:47,070 --> 00:28:51,360
conduct business using this product and

761
00:28:49,230 --> 00:28:52,710
then we can prioritize those risks and

762
00:28:51,360 --> 00:28:54,449
determine these are the risks that we

763
00:28:52,710 --> 00:28:56,520
can't go to production if they exist in

764
00:28:54,450 --> 00:28:57,900
our application and these ones we can

765
00:28:56,520 --> 00:28:59,879
live with for a short time and we'll fix

766
00:28:57,900 --> 00:29:02,520
them eventually right we're trying to

767
00:28:59,880 --> 00:29:04,680
add more objectivity and discipline so

768
00:29:02,520 --> 00:29:06,450
just we'll move on but just want to ask

769
00:29:04,680 --> 00:29:06,600
that question does anyone currently do

770
00:29:06,450 --> 00:29:07,950
the

771
00:29:06,600 --> 00:29:09,418
does anyone currently contribute to a

772
00:29:07,950 --> 00:29:12,150
test strategy within their organization

773
00:29:09,419 --> 00:29:14,809
from a security perspective you do yeah

774
00:29:12,150 --> 00:29:14,809
that's fantastic

775
00:30:07,309 --> 00:30:12,178
yeah so that's a good point so I'm not

776
00:30:10,289 --> 00:30:14,279
expecting QA to be doing this security

777
00:30:12,179 --> 00:30:15,960
testing and some tests won't be

778
00:30:14,279 --> 00:30:17,370
automated they will be manual but that

779
00:30:15,960 --> 00:30:19,590
doesn't mean you still can't define what

780
00:30:17,370 --> 00:30:22,289
the tests are beforehand it is more work

781
00:30:19,590 --> 00:30:23,850
it is more time-consuming and one of the

782
00:30:22,289 --> 00:30:25,408
biggest issues and security teams is

783
00:30:23,850 --> 00:30:27,418
resource constraints that you don't have

784
00:30:25,409 --> 00:30:29,070
enough people to actually do all of that

785
00:30:27,419 --> 00:30:30,389
and scale it but you have to start

786
00:30:29,070 --> 00:30:31,559
somewhere right so if you can if you

787
00:30:30,389 --> 00:30:33,809
could say all right let's pilot this

788
00:30:31,559 --> 00:30:35,970
with one team try it out prove it out

789
00:30:33,809 --> 00:30:38,009
and then we'll show the value this was a

790
00:30:35,970 --> 00:30:40,080
we reduced the tension with the product

791
00:30:38,009 --> 00:30:41,279
teams and we have measurable security

792
00:30:40,080 --> 00:30:43,710
coverage that we can show you that this

793
00:30:41,279 --> 00:30:45,389
is secure I think this is the road the

794
00:30:43,710 --> 00:30:48,179
long road right we're talking five ten

795
00:30:45,389 --> 00:30:50,309
years who knows to to show the value of

796
00:30:48,179 --> 00:30:52,740
security of how security can be embedded

797
00:30:50,309 --> 00:30:55,350
transparently with more discipline like

798
00:30:52,740 --> 00:30:57,059
QA to eventually get the investment and

799
00:30:55,350 --> 00:30:58,379
get those additional resources this is

800
00:30:57,059 --> 00:31:00,658
not a problem that gets solved overnight

801
00:30:58,379 --> 00:31:02,850
this is a very long road that requires a

802
00:31:00,659 --> 00:31:05,309
culture change and process changes and

803
00:31:02,850 --> 00:31:08,370
and skillset changes within the security

804
00:31:05,309 --> 00:31:09,779
teams to better understand development

805
00:31:08,370 --> 00:31:15,350
to better understand a jewel if you're

806
00:31:09,779 --> 00:31:15,350
doing agile with that process and yeah

807
00:31:37,149 --> 00:31:39,718
now

808
00:31:44,950 --> 00:31:48,910
there's there's a lot of strategies on

809
00:31:47,080 --> 00:31:50,889
how to scale security as a whole I mean

810
00:31:48,910 --> 00:31:52,630
yet absolutely if you can leverage QA

811
00:31:50,890 --> 00:31:54,610
that's really helpful being friendly

812
00:31:52,630 --> 00:31:56,890
with them that's one of our like next

813
00:31:54,610 --> 00:31:58,959
steps at the end is get to know your QA

814
00:31:56,890 --> 00:32:02,170
person there's you can you can work with

815
00:31:58,960 --> 00:32:03,670
security champion programs you can have

816
00:32:02,170 --> 00:32:05,140
developers we've we've had developers

817
00:32:03,670 --> 00:32:07,150
who write security test integration

818
00:32:05,140 --> 00:32:08,650
tests end-to-end test unit tests but it

819
00:32:07,150 --> 00:32:11,830
requires a culture change it requires

820
00:32:08,650 --> 00:32:13,840
flexibility and a commitment from for

821
00:32:11,830 --> 00:32:15,429
everyone that we're going to invest a

822
00:32:13,840 --> 00:32:17,500
little bit here to change the processes

823
00:32:15,430 --> 00:32:19,510
to change the norm for though for the

824
00:32:17,500 --> 00:32:22,950
long-term betterment of our organization

825
00:32:19,510 --> 00:32:22,950
did you have a question

826
00:32:33,110 --> 00:32:35,770
yeah

827
00:32:36,130 --> 00:32:40,419
so I would I would phrase it differently

828
00:32:38,200 --> 00:32:41,980
because I don't I don't think it comes

829
00:32:40,419 --> 00:32:43,690
from personally I don't think it comes

830
00:32:41,980 --> 00:32:45,850
from training and you sorry you want to

831
00:32:43,690 --> 00:32:47,710
speak up too I don't think it comes from

832
00:32:45,850 --> 00:32:49,600
training as much as in its informing

833
00:32:47,710 --> 00:32:51,460
them it's awareness of these are the

834
00:32:49,600 --> 00:32:53,530
things that we're expecting from you so

835
00:32:51,460 --> 00:32:54,910
if you try to tell someone you know this

836
00:32:53,530 --> 00:32:56,590
is what cross-site scripting is and

837
00:32:54,910 --> 00:32:58,960
generally how you prevent it that's

838
00:32:56,590 --> 00:33:01,600
helpful but if you tell them you should

839
00:32:58,960 --> 00:33:03,910
you need to use input validation using a

840
00:33:01,600 --> 00:33:06,909
zappy using a sapis input validator or

841
00:33:03,910 --> 00:33:08,530
using this particular library and you

842
00:33:06,910 --> 00:33:11,020
give them very prescriptive clear

843
00:33:08,530 --> 00:33:12,399
guidance that's that's really how you

844
00:33:11,020 --> 00:33:14,710
make sure that it's there and that gives

845
00:33:12,400 --> 00:33:16,240
you the away the ability to verify later

846
00:33:14,710 --> 00:33:18,340
that they're meeting those requirements

847
00:33:16,240 --> 00:33:20,080
but you're right everyone through this

848
00:33:18,340 --> 00:33:21,699
process needs to be better informed and

849
00:33:20,080 --> 00:33:24,280
there has to be better knowledge here I

850
00:33:21,700 --> 00:33:26,350
just personally don't believe that you

851
00:33:24,280 --> 00:33:28,240
know training use this room as an

852
00:33:26,350 --> 00:33:29,320
example right six months from now how

853
00:33:28,240 --> 00:33:31,120
much of what we're talking about today

854
00:33:29,320 --> 00:33:32,710
are you gonna remember you're consuming

855
00:33:31,120 --> 00:33:34,870
a lot of information between now and six

856
00:33:32,710 --> 00:33:36,250
months from now so I don't I don't think

857
00:33:34,870 --> 00:33:38,489
people generally have the retention

858
00:33:36,250 --> 00:33:40,659
unless it's very prescriptive and and

859
00:33:38,490 --> 00:33:43,360
specific that's my personal viewpoint

860
00:33:40,659 --> 00:33:45,820
though so although everything I say is

861
00:33:43,360 --> 00:33:47,789
so and I think we've been proving for

862
00:33:45,820 --> 00:33:51,100
about the last twenty years or so that

863
00:33:47,789 --> 00:33:52,629
security training is not working right

864
00:33:51,100 --> 00:33:54,908
you know simple example like sequel

865
00:33:52,630 --> 00:33:56,919
injection a very simple fix right any

866
00:33:54,909 --> 00:33:58,570
developer that comes out of school today

867
00:33:56,919 --> 00:34:01,809
you know should understand how to write

868
00:33:58,570 --> 00:34:04,870
a prepared statement but it's it's still

869
00:34:01,809 --> 00:34:06,668
our biggest most critical vulnerability

870
00:34:04,870 --> 00:34:09,219
right where we're making very little

871
00:34:06,669 --> 00:34:11,530
progress and getting developers to fix

872
00:34:09,219 --> 00:34:12,790
security issues and you know a large

873
00:34:11,530 --> 00:34:14,230
part of that I think is what you're

874
00:34:12,790 --> 00:34:16,270
gonna talk about in a minute you know

875
00:34:14,230 --> 00:34:18,550
and it really comes down to you know the

876
00:34:16,270 --> 00:34:20,649
friendliness you know but also just the

877
00:34:18,550 --> 00:34:22,570
language barriers right because you know

878
00:34:20,649 --> 00:34:23,618
going back to the previous example you

879
00:34:22,570 --> 00:34:25,149
know there's a big difference between

880
00:34:23,619 --> 00:34:27,100
clicking you know training them on

881
00:34:25,149 --> 00:34:29,049
clickjacking you know and teaching them

882
00:34:27,100 --> 00:34:31,839
exactly what it is and how it can be

883
00:34:29,050 --> 00:34:34,270
exploited and you know all of the common

884
00:34:31,840 --> 00:34:36,399
you know industry accepted ways of

885
00:34:34,270 --> 00:34:38,020
preventing that vulnerability and hoping

886
00:34:36,399 --> 00:34:40,719
they don't copy/paste something wrong

887
00:34:38,020 --> 00:34:43,239
you know and explicitly telling them hey

888
00:34:40,719 --> 00:34:44,678
set this header this way right they

889
00:34:43,239 --> 00:34:46,928
don't necessarily it's great if they

890
00:34:44,679 --> 00:34:48,159
understand why you know but but they

891
00:34:46,929 --> 00:34:49,250
don't they don't need to have any

892
00:34:48,159 --> 00:34:51,679
understanding

893
00:34:49,250 --> 00:34:52,879
all of clickjacking here right they just

894
00:34:51,679 --> 00:34:55,639
have to know that what they're going to

895
00:34:52,879 --> 00:35:00,130
be graded on is did I set this header

896
00:34:55,639 --> 00:35:00,130
right and then they pass or fail to test

897
00:35:07,580 --> 00:35:11,930
so I agree developers have a lot to

898
00:35:10,310 --> 00:35:13,460
learn right that like okay that didn't

899
00:35:11,930 --> 00:35:14,990
come out right developer developers have

900
00:35:13,460 --> 00:35:17,570
a lot of information that they need to

901
00:35:14,990 --> 00:35:19,430
that they need to pick up and maintain

902
00:35:17,570 --> 00:35:21,740
and turn into action right they need to

903
00:35:19,430 --> 00:35:23,390
learn new languages and frameworks new

904
00:35:21,740 --> 00:35:23,899
algorithms new ways of doing things all

905
00:35:23,390 --> 00:35:25,850
the time

906
00:35:23,900 --> 00:35:27,410
I don't think it's realistic to say see

907
00:35:25,850 --> 00:35:28,790
developer you also need to know

908
00:35:27,410 --> 00:35:30,410
everything about security right

909
00:35:28,790 --> 00:35:32,360
just like I wouldn't expect it to be

910
00:35:30,410 --> 00:35:33,740
like you don't need to know all of the

911
00:35:32,360 --> 00:35:35,210
sorting algorithms and the searching

912
00:35:33,740 --> 00:35:36,950
algorithms and which ones to use in

913
00:35:35,210 --> 00:35:39,080
various cases that's not your core

914
00:35:36,950 --> 00:35:41,720
competency it's our job as security

915
00:35:39,080 --> 00:35:43,460
professionals to enable the developers

916
00:35:41,720 --> 00:35:45,290
to build secure applications and to

917
00:35:43,460 --> 00:35:47,150
verify that they're secure but it's not

918
00:35:45,290 --> 00:35:49,130
necessarily their responsibility to know

919
00:35:47,150 --> 00:35:50,540
everything about security as long as

920
00:35:49,130 --> 00:35:51,770
they're doing what needs to be done in

921
00:35:50,540 --> 00:35:54,890
building their applications securely

922
00:35:51,770 --> 00:35:56,930
they're doing their job so there are

923
00:35:54,890 --> 00:35:59,779
various ways to do it right but I don't

924
00:35:56,930 --> 00:36:01,250
I don't think they need to I if they

925
00:35:59,780 --> 00:36:02,600
understand clickjacking that's great

926
00:36:01,250 --> 00:36:03,830
but if they don't understand it and

927
00:36:02,600 --> 00:36:07,330
they're still meeting the requirement

928
00:36:03,830 --> 00:36:07,330
then who cares if they know what it is

929
00:36:29,960 --> 00:36:40,470
right right and that will happen if

930
00:36:39,240 --> 00:36:41,848
you're integrated with QA because

931
00:36:40,470 --> 00:36:43,049
they're doing regression testing to

932
00:36:41,849 --> 00:36:44,670
making sure that every to make sure

933
00:36:43,050 --> 00:36:46,410
everything is still working right so

934
00:36:44,670 --> 00:36:48,780
you'll you'll find those problems early

935
00:36:46,410 --> 00:36:50,129
on right away maybe on the developer

936
00:36:48,780 --> 00:36:52,230
workstation before any code is checked

937
00:36:50,130 --> 00:36:57,510
in or worst case in like an integration

938
00:36:52,230 --> 00:37:05,390
environment so yes yes that's a whole

939
00:36:57,510 --> 00:37:05,390
nother problem yes yes yes wait

940
00:37:54,090 --> 00:37:59,710
you're right we have to keep our attack

941
00:37:57,570 --> 00:38:02,110
requirements up to date as technology

942
00:37:59,710 --> 00:38:03,880
changes and developers and everyone it's

943
00:38:02,110 --> 00:38:05,350
human nature right to take the path of

944
00:38:03,880 --> 00:38:07,480
least resistance the easiest path so

945
00:38:05,350 --> 00:38:09,279
making it the default the only way to do

946
00:38:07,480 --> 00:38:10,330
something also the secure way it's

947
00:38:09,280 --> 00:38:13,630
definitely what we want to encourage

948
00:38:10,330 --> 00:38:14,710
yeah so just to be a little bit more

949
00:38:13,630 --> 00:38:16,000
concrete and thank you for all the

950
00:38:14,710 --> 00:38:18,370
collaboration I appreciate it I think

951
00:38:16,000 --> 00:38:19,570
it's more valuable for everyone to make

952
00:38:18,370 --> 00:38:21,970
it a little bit more concrete this is

953
00:38:19,570 --> 00:38:23,440
just an example of snippet from a

954
00:38:21,970 --> 00:38:26,500
security strategy that we've

955
00:38:23,440 --> 00:38:28,270
collaborated in and I wanted to just you

956
00:38:26,500 --> 00:38:30,130
know when you go and look at security

957
00:38:28,270 --> 00:38:31,630
strategies this is sort of some of the

958
00:38:30,130 --> 00:38:33,190
places that you might start right to

959
00:38:31,630 --> 00:38:36,160
security want to contribute to what's

960
00:38:33,190 --> 00:38:37,570
the scope of testing overall what is the

961
00:38:36,160 --> 00:38:39,730
approach of testing what's the

962
00:38:37,570 --> 00:38:42,430
automation strategy so these are just

963
00:38:39,730 --> 00:38:45,340
some common sections in a Sakina test

964
00:38:42,430 --> 00:38:47,740
strategy and where you might be able to

965
00:38:45,340 --> 00:38:49,480
contribute or add value from a security

966
00:38:47,740 --> 00:38:51,069
perspective on the right you could see

967
00:38:49,480 --> 00:38:53,050
this is component integration testing

968
00:38:51,070 --> 00:38:56,740
this is so this is the description of

969
00:38:53,050 --> 00:38:58,750
what that type of testing is who's

970
00:38:56,740 --> 00:39:00,279
responsible what the approach is and you

971
00:38:58,750 --> 00:39:03,520
could see that the exit criteria to

972
00:39:00,280 --> 00:39:04,810
leave integration testing it includes

973
00:39:03,520 --> 00:39:06,100
that we're testing for security

974
00:39:04,810 --> 00:39:08,049
vulnerabilities and adherence to

975
00:39:06,100 --> 00:39:09,790
security requirements that may or may

976
00:39:08,050 --> 00:39:11,230
not be part of your existing test

977
00:39:09,790 --> 00:39:13,029
strategies and you may want to provide

978
00:39:11,230 --> 00:39:14,980
feedback that it should be or you can be

979
00:39:13,030 --> 00:39:17,020
more detailed right here but the point

980
00:39:14,980 --> 00:39:18,670
is that we should probably be making

981
00:39:17,020 --> 00:39:20,410
sure that security testing is part of

982
00:39:18,670 --> 00:39:22,360
these and not just some sort of an

983
00:39:20,410 --> 00:39:24,670
add-on that's not really documented that

984
00:39:22,360 --> 00:39:27,070
people don't know about

985
00:39:24,670 --> 00:39:28,390
this is also the Test rata G is also a

986
00:39:27,070 --> 00:39:30,130
really good place to establish a common

987
00:39:28,390 --> 00:39:31,810
taxonomy this is a problem in a lot of

988
00:39:30,130 --> 00:39:33,400
organizations where just someone says

989
00:39:31,810 --> 00:39:34,779
authorization someone else's access

990
00:39:33,400 --> 00:39:36,910
control are they talking about the same

991
00:39:34,780 --> 00:39:38,560
thing are they not right so using the

992
00:39:36,910 --> 00:39:40,750
same language in here defining your

993
00:39:38,560 --> 00:39:42,279
terms gives everyone from development

994
00:39:40,750 --> 00:39:44,140
testing everyone who's using this

995
00:39:42,280 --> 00:39:47,400
document a common place to look and

996
00:39:44,140 --> 00:39:47,400
understand what everyone's talking about

997
00:39:49,860 --> 00:39:55,960
did you wanna talk about this

998
00:39:51,990 --> 00:39:57,759
so QA is a valued mature function in

999
00:39:55,960 --> 00:39:59,740
most organizations is well understood by

1000
00:39:57,760 --> 00:40:01,150
developers and clearly demonstrates test

1001
00:39:59,740 --> 00:40:02,589
coverage these are the things that we

1002
00:40:01,150 --> 00:40:03,610
had on our opening slide that we said

1003
00:40:02,590 --> 00:40:06,420
are sort of our key themes

1004
00:40:03,610 --> 00:40:08,620
we're just revisiting them to sort of

1005
00:40:06,420 --> 00:40:10,810
make sure that that we're communicating

1006
00:40:08,620 --> 00:40:12,009
what we want to communicate this is what

1007
00:40:10,810 --> 00:40:14,950
we these are what we want the key

1008
00:40:12,010 --> 00:40:16,420
takeaways to be in the presentation we

1009
00:40:14,950 --> 00:40:17,799
are going to again go a little bit more

1010
00:40:16,420 --> 00:40:20,110
concrete in more detail in the next

1011
00:40:17,800 --> 00:40:22,030
slide but security generally does not

1012
00:40:20,110 --> 00:40:23,290
provide a measure of test coverage we

1013
00:40:22,030 --> 00:40:24,910
all in agreement there does anyone think

1014
00:40:23,290 --> 00:40:30,580
security measures test coverage really

1015
00:40:24,910 --> 00:40:32,589
well no are any of you a pen tester yeah

1016
00:40:30,580 --> 00:40:36,220
okay one of the challenges I recently

1017
00:40:32,590 --> 00:40:38,740
had was oddly enough you know a CSO was

1018
00:40:36,220 --> 00:40:40,899
on a readout call that I did for a pen

1019
00:40:38,740 --> 00:40:42,640
test and one of the things that he told

1020
00:40:40,900 --> 00:40:47,100
us he wanted to know but you know on the

1021
00:40:42,640 --> 00:40:49,509
call was well what exactly did you test

1022
00:40:47,100 --> 00:40:51,490
right and for everybody who's ever read

1023
00:40:49,510 --> 00:40:53,590
a pen test report or done a pen test

1024
00:40:51,490 --> 00:40:55,600
that's not something we answer right we

1025
00:40:53,590 --> 00:40:57,670
have a general scope we say we're gonna

1026
00:40:55,600 --> 00:40:59,230
test I don't know the old wasa top ten

1027
00:40:57,670 --> 00:41:01,780
controls right we're gonna test these

1028
00:40:59,230 --> 00:41:04,240
broad security categories we're gonna

1029
00:41:01,780 --> 00:41:06,580
take a wide swap and try to hit whatever

1030
00:41:04,240 --> 00:41:09,549
we can in your application we might hit

1031
00:41:06,580 --> 00:41:10,960
twenty five out of a hundred screens you

1032
00:41:09,550 --> 00:41:12,310
know maybe we hit all hundred maybe

1033
00:41:10,960 --> 00:41:14,050
there's 50 more that you didn't tell us

1034
00:41:12,310 --> 00:41:16,660
about that we don't know it existed

1035
00:41:14,050 --> 00:41:19,300
maybe we didn't test every input but the

1036
00:41:16,660 --> 00:41:21,879
point is that you know on that call you

1037
00:41:19,300 --> 00:41:23,980
know see so asking this you could not

1038
00:41:21,880 --> 00:41:25,600
explain you know outside of well you

1039
00:41:23,980 --> 00:41:27,820
know we we tested all of the common

1040
00:41:25,600 --> 00:41:30,460
security controls we tested for common

1041
00:41:27,820 --> 00:41:33,460
security weaknesses but could not give

1042
00:41:30,460 --> 00:41:35,050
him you know a prescription of every

1043
00:41:33,460 --> 00:41:37,090
individual thing that we

1044
00:41:35,050 --> 00:41:42,430
tested and did not test because that's

1045
00:41:37,090 --> 00:41:44,260
not how we operate security today so QA

1046
00:41:42,430 --> 00:41:46,180
does though obviously right that's the

1047
00:41:44,260 --> 00:41:47,950
theme here is that they provide they can

1048
00:41:46,180 --> 00:41:50,140
give you a discrete measure of coverage

1049
00:41:47,950 --> 00:41:51,640
of this is the percentage of the

1050
00:41:50,140 --> 00:41:52,900
application covered these are the

1051
00:41:51,640 --> 00:41:55,270
functions we looked at these are the

1052
00:41:52,900 --> 00:41:56,560
lines of code that were tested and it

1053
00:41:55,270 --> 00:41:58,480
would be nice if security can get to

1054
00:41:56,560 --> 00:42:00,279
that point security is confusing to

1055
00:41:58,480 --> 00:42:01,750
people outside of security right we use

1056
00:42:00,280 --> 00:42:04,080
different taxonomy different language

1057
00:42:01,750 --> 00:42:06,460
different terms for describing things

1058
00:42:04,080 --> 00:42:09,160
which is reasonable but we have to find

1059
00:42:06,460 --> 00:42:11,080
a better way of communicating and this

1060
00:42:09,160 --> 00:42:13,600
is an opportunity right for security to

1061
00:42:11,080 --> 00:42:15,190
better integrate into QA by really

1062
00:42:13,600 --> 00:42:16,930
understanding what they do and this is

1063
00:42:15,190 --> 00:42:19,090
really what DevOps is about right is

1064
00:42:16,930 --> 00:42:20,560
we're all working together this is where

1065
00:42:19,090 --> 00:42:22,360
rainbows and unicorns and green fields

1066
00:42:20,560 --> 00:42:25,240
come we're all working together and

1067
00:42:22,360 --> 00:42:26,950
collaborating where we have cross skills

1068
00:42:25,240 --> 00:42:28,270
trained so I know a little bit about QA

1069
00:42:26,950 --> 00:42:30,129
QA knows a little bit about security

1070
00:42:28,270 --> 00:42:32,160
developer knows about each of them we

1071
00:42:30,130 --> 00:42:35,380
all know a little bit about Ops and

1072
00:42:32,160 --> 00:42:37,330
we're working together for a common goal

1073
00:42:35,380 --> 00:42:38,710
using common methodologies and there's

1074
00:42:37,330 --> 00:42:41,170
consistency across how we're doing

1075
00:42:38,710 --> 00:42:42,340
things so this is very I'm sort of

1076
00:42:41,170 --> 00:42:43,870
spoiling because we have a slide later

1077
00:42:42,340 --> 00:42:46,150
about is this compatible with EV ops but

1078
00:42:43,870 --> 00:42:49,540
yes this is this is really fits in well

1079
00:42:46,150 --> 00:42:50,920
with DevOps and really what DevOps is

1080
00:42:49,540 --> 00:42:52,390
about so let's get a little bit more

1081
00:42:50,920 --> 00:42:53,410
practical just to again give you

1082
00:42:52,390 --> 00:42:57,100
something more concrete

1083
00:42:53,410 --> 00:42:59,740
to work with so we're gonna do this one

1084
00:42:57,100 --> 00:43:01,900
yep so you just kind of what I'm going

1085
00:42:59,740 --> 00:43:04,060
to dump you all into an imaginary

1086
00:43:01,900 --> 00:43:05,680
scenario and you know for those of you

1087
00:43:04,060 --> 00:43:07,690
who are familiar with crypto currencies

1088
00:43:05,680 --> 00:43:09,490
just feel free to to laugh at this

1089
00:43:07,690 --> 00:43:11,530
because we know it's a little silly but

1090
00:43:09,490 --> 00:43:14,169
imagine you work for a large financial

1091
00:43:11,530 --> 00:43:16,390
services organization you know your CEO

1092
00:43:14,170 --> 00:43:18,730
whomever in your organization has

1093
00:43:16,390 --> 00:43:22,000
started to realize that hey these crypto

1094
00:43:18,730 --> 00:43:23,650
currencies are getting big right and you

1095
00:43:22,000 --> 00:43:26,260
know customers aren't just paying with

1096
00:43:23,650 --> 00:43:30,100
with cash anymore right you know we have

1097
00:43:26,260 --> 00:43:32,080
you know venimos we have Bitcoin we have

1098
00:43:30,100 --> 00:43:34,240
you know all these other different ways

1099
00:43:32,080 --> 00:43:37,750
of making payments and transferring

1100
00:43:34,240 --> 00:43:40,330
monies now so you know CEO gets this

1101
00:43:37,750 --> 00:43:44,380
this big idea of well let's let

1102
00:43:40,330 --> 00:43:50,229
customers use our banking application to

1103
00:43:44,380 --> 00:43:52,749
you know pay somebody with bitcoins make

1104
00:43:50,229 --> 00:43:54,519
sense so because we can all exchange US

1105
00:43:52,749 --> 00:43:56,558
dollars to bitcoins right that's that's

1106
00:43:54,519 --> 00:43:58,269
a conversion so that's what we want to

1107
00:43:56,559 --> 00:44:00,309
build is a new feature to a lot of users

1108
00:43:58,269 --> 00:44:02,379
this first step of allowing users to

1109
00:44:00,309 --> 00:44:04,329
exchange u.s. dollars to bitcoins that's

1110
00:44:02,380 --> 00:44:06,400
what we're gonna build here it's

1111
00:44:04,329 --> 00:44:08,940
something very simple so if you're not

1112
00:44:06,400 --> 00:44:11,680
familiar with the sort of like the agile

1113
00:44:08,940 --> 00:44:14,049
terminology usually epics and then you

1114
00:44:11,680 --> 00:44:15,578
have features and stories and and there

1115
00:44:14,049 --> 00:44:17,109
are other things but we're gonna just

1116
00:44:15,579 --> 00:44:18,940
really talk about features and stories

1117
00:44:17,109 --> 00:44:21,578
so we have a feature that we want to

1118
00:44:18,940 --> 00:44:23,229
develop which is to allow our ability

1119
00:44:21,579 --> 00:44:25,779
our users to exchange u.s. dollars for

1120
00:44:23,229 --> 00:44:27,399
bitcoin and so we have an ID for that

1121
00:44:25,779 --> 00:44:28,960
feature and then we're gonna create

1122
00:44:27,400 --> 00:44:30,609
stories oh sorry the idea is for the

1123
00:44:28,960 --> 00:44:32,759
story we want to create stories in that

1124
00:44:30,609 --> 00:44:35,410
so the feature is what do we want the

1125
00:44:32,759 --> 00:44:36,670
users to be able to do and then the

1126
00:44:35,410 --> 00:44:39,940
stories go a little bit more granular

1127
00:44:36,670 --> 00:44:42,609
into what are they going to do right so

1128
00:44:39,940 --> 00:44:44,739
as a user I want to exchange US dollars

1129
00:44:42,609 --> 00:44:46,359
in my account to Bitcoin that's a that's

1130
00:44:44,739 --> 00:44:48,880
a user story in agile so you might store

1131
00:44:46,359 --> 00:44:50,499
this in something like JIRA and then

1132
00:44:48,880 --> 00:44:53,259
we'll define some acceptance criteria so

1133
00:44:50,499 --> 00:44:53,769
we need a conversion webpage and form to

1134
00:44:53,259 --> 00:44:55,479
exist

1135
00:44:53,769 --> 00:44:57,598
we need an endpoint because this is

1136
00:44:55,479 --> 00:44:59,979
going to be a micro service API driven

1137
00:44:57,599 --> 00:45:03,249
application we're gonna have a swagger

1138
00:44:59,979 --> 00:45:04,899
API file for for the micro service we

1139
00:45:03,249 --> 00:45:07,029
wouldn't the conversion endpoint that's

1140
00:45:04,900 --> 00:45:09,190
able to convert US dollars to Bitcoin

1141
00:45:07,029 --> 00:45:10,660
we need the conversion web page is able

1142
00:45:09,190 --> 00:45:12,519
to invoke the conversion endpoint with

1143
00:45:10,660 --> 00:45:14,348
user provided inputs this is again part

1144
00:45:12,519 --> 00:45:16,299
of this this is what it might actually

1145
00:45:14,349 --> 00:45:17,410
look like but also I just wanted to

1146
00:45:16,299 --> 00:45:19,420
illustrate again like even on the

1147
00:45:17,410 --> 00:45:21,279
development side they're pretty detailed

1148
00:45:19,420 --> 00:45:22,839
in exactly what needs to be done right

1149
00:45:21,279 --> 00:45:25,059
this is not something that security

1150
00:45:22,839 --> 00:45:29,319
would do is to define exactly what we're

1151
00:45:25,059 --> 00:45:33,069
going to do so here's a QA test that you

1152
00:45:29,319 --> 00:45:35,380
might build for that right so we have a

1153
00:45:33,069 --> 00:45:37,210
description exchanging US dollars to

1154
00:45:35,380 --> 00:45:38,680
Bitcoin correctly adjust the Bitcoin and

1155
00:45:37,210 --> 00:45:41,349
u.s. dollar balances in the users

1156
00:45:38,680 --> 00:45:43,660
account that's what we want to verify is

1157
00:45:41,349 --> 00:45:45,190
happening we have related requirements

1158
00:45:43,660 --> 00:45:47,200
or tests so now we have it this is a

1159
00:45:45,190 --> 00:45:48,759
test case that we're going to link back

1160
00:45:47,200 --> 00:45:50,979
to the requirement that we just define

1161
00:45:48,759 --> 00:45:53,289
which is the user story to say that as a

1162
00:45:50,979 --> 00:45:55,569
user I want to exchange US dollars in my

1163
00:45:53,289 --> 00:45:56,600
account to Bitcoin so now we know why

1164
00:45:55,569 --> 00:45:58,850
are we testing this

1165
00:45:56,600 --> 00:46:00,560
there's a user story for it we don't

1166
00:45:58,850 --> 00:46:02,630
have any remote remarks or notes for

1167
00:46:00,560 --> 00:46:03,860
this particular test case but we do have

1168
00:46:02,630 --> 00:46:05,810
a gherkin script and this is where we

1169
00:46:03,860 --> 00:46:08,960
define what what are we going to test

1170
00:46:05,810 --> 00:46:13,520
and so if you're not familiar with

1171
00:46:08,960 --> 00:46:16,940
gherkin it's a language that's usually

1172
00:46:13,520 --> 00:46:21,110
written in English words that has a

1173
00:46:16,940 --> 00:46:24,620
particular syntax of given some

1174
00:46:21,110 --> 00:46:27,350
precondition when something happens then

1175
00:46:24,620 --> 00:46:29,170
you expect a particular outcome right so

1176
00:46:27,350 --> 00:46:32,630
you have a given that sets up the stage

1177
00:46:29,170 --> 00:46:35,360
when the thing is going to actually be

1178
00:46:32,630 --> 00:46:37,490
executed then this is our acceptance

1179
00:46:35,360 --> 00:46:38,900
criteria that you want to validate we

1180
00:46:37,490 --> 00:46:40,819
could talk through this here so this is

1181
00:46:38,900 --> 00:46:42,560
very commonly used by testing teams it's

1182
00:46:40,820 --> 00:46:45,320
used by developers with tools like

1183
00:46:42,560 --> 00:46:46,970
cucumber we use it all the time so given

1184
00:46:45,320 --> 00:46:49,070
the US dollar to Bitcoin conversion web

1185
00:46:46,970 --> 00:46:50,509
page means that in a test the first

1186
00:46:49,070 --> 00:46:53,090
thing I need to do is open up the

1187
00:46:50,510 --> 00:46:54,890
Bitcoin the USD to conversion web page

1188
00:46:53,090 --> 00:46:56,450
right that means that it exists whether

1189
00:46:54,890 --> 00:46:58,759
it's as manual or automated that's the

1190
00:46:56,450 --> 00:47:00,649
first step and a user account containing

1191
00:46:58,760 --> 00:47:01,970
zero Bitcoin and nine thousand US

1192
00:47:00,650 --> 00:47:03,470
dollars means that I have to have it

1193
00:47:01,970 --> 00:47:06,279
sorry I have to have an account

1194
00:47:03,470 --> 00:47:09,439
available that that meets that criteria

1195
00:47:06,280 --> 00:47:11,210
and be be logged into that account when

1196
00:47:09,440 --> 00:47:14,150
the user types nine thousand into the

1197
00:47:11,210 --> 00:47:16,370
USD box and click convert so if you have

1198
00:47:14,150 --> 00:47:17,690
selenium script executing this it would

1199
00:47:16,370 --> 00:47:19,310
type nine thousand into the box and

1200
00:47:17,690 --> 00:47:21,140
click the convert button or if you have

1201
00:47:19,310 --> 00:47:22,610
a person executing this the person would

1202
00:47:21,140 --> 00:47:25,339
type nine thousand dollars into the box

1203
00:47:22,610 --> 00:47:27,140
and click convert then this is what we

1204
00:47:25,340 --> 00:47:28,670
expect to happen this tells us whether

1205
00:47:27,140 --> 00:47:30,650
or not the test is going to pass or fail

1206
00:47:28,670 --> 00:47:33,500
then the users account page should be

1207
00:47:30,650 --> 00:47:35,120
displayed so that that convert page will

1208
00:47:33,500 --> 00:47:37,400
go away users account page will pop up

1209
00:47:35,120 --> 00:47:38,839
and the users account should contain

1210
00:47:37,400 --> 00:47:40,940
zero US dollars because we've

1211
00:47:38,840 --> 00:47:43,130
transferred it all the Bitcoin and one

1212
00:47:40,940 --> 00:47:46,370
Bitcoin because that was what I'd like

1213
00:47:43,130 --> 00:47:48,170
Bitcoin to be worth so that's so that

1214
00:47:46,370 --> 00:47:50,870
tells us if the test passes or fails so

1215
00:47:48,170 --> 00:47:52,400
now I've we have an indicator at the

1216
00:47:50,870 --> 00:47:54,080
bottom here is this manual or automated

1217
00:47:52,400 --> 00:47:56,540
this wouldn't be a very difficult test

1218
00:47:54,080 --> 00:47:58,220
to automate in particular I mean if you

1219
00:47:56,540 --> 00:48:00,290
if you are familiar with webdriver

1220
00:47:58,220 --> 00:48:02,450
selenium which most cute teams QA teams

1221
00:48:00,290 --> 00:48:03,890
are this would be a pretty easy test to

1222
00:48:02,450 --> 00:48:05,930
automate assuming that the the

1223
00:48:03,890 --> 00:48:07,640
environment exists so we would automate

1224
00:48:05,930 --> 00:48:09,169
this test and it would run in our

1225
00:48:07,640 --> 00:48:09,379
integration environment potentially

1226
00:48:09,170 --> 00:48:12,470
other

1227
00:48:09,380 --> 00:48:14,810
environments every time code is checked

1228
00:48:12,470 --> 00:48:19,580
in or every every time that those tests

1229
00:48:14,810 --> 00:48:22,009
are run to validate that functionally we

1230
00:48:19,580 --> 00:48:24,770
are able to convert work exchange u.s.

1231
00:48:22,010 --> 00:48:28,040
dollars to Bitcoin hopefully that makes

1232
00:48:24,770 --> 00:48:29,900
sense from the security side we're gonna

1233
00:48:28,040 --> 00:48:31,490
follow a very similar layout from a test

1234
00:48:29,900 --> 00:48:32,090
case perspective Josh do you want to

1235
00:48:31,490 --> 00:48:34,250
talk about it

1236
00:48:32,090 --> 00:48:36,650
yeah let's cover it really quick because

1237
00:48:34,250 --> 00:48:37,760
I know we're getting incredibly tight on

1238
00:48:36,650 --> 00:48:40,010
time

1239
00:48:37,760 --> 00:48:43,310
everything here is really the same as

1240
00:48:40,010 --> 00:48:45,050
the non-security story but right you see

1241
00:48:43,310 --> 00:48:47,930
in our remarks notes we really what

1242
00:48:45,050 --> 00:48:51,440
we're testing here is for the presence

1243
00:48:47,930 --> 00:48:54,169
of TLS 1.2 right yes our core security

1244
00:48:51,440 --> 00:48:56,990
requirement is that we have to have TLS

1245
00:48:54,170 --> 00:48:59,000
1.2 so we have additional test cases are

1246
00:48:56,990 --> 00:49:01,189
required to validate other TLS

1247
00:48:59,000 --> 00:49:02,930
requirements that's important here right

1248
00:49:01,190 --> 00:49:04,610
we're getting to a really small unit of

1249
00:49:02,930 --> 00:49:08,509
work the only thing we're testing in

1250
00:49:04,610 --> 00:49:10,640
this test case is is TLS 1.2 you know

1251
00:49:08,510 --> 00:49:13,940
enabled and working right so you we're

1252
00:49:10,640 --> 00:49:18,100
not testing you know as TLS 1.1 disabled

1253
00:49:13,940 --> 00:49:22,130
is SSL v3 nuked into oblivion are we

1254
00:49:18,100 --> 00:49:24,680
using only certain ciphers right we're

1255
00:49:22,130 --> 00:49:26,750
very very specific right and on our

1256
00:49:24,680 --> 00:49:28,669
gherkin script here is very similar you

1257
00:49:26,750 --> 00:49:31,100
know given the same webpage given the

1258
00:49:28,670 --> 00:49:32,930
same account balances the users still

1259
00:49:31,100 --> 00:49:35,299
typing in you know nine thousand dollars

1260
00:49:32,930 --> 00:49:38,450
into the USD box they're still clicking

1261
00:49:35,300 --> 00:49:40,160
convert right so all of these all of the

1262
00:49:38,450 --> 00:49:42,620
code behind that makes the magic happen

1263
00:49:40,160 --> 00:49:45,049
here that the QA team or the developers

1264
00:49:42,620 --> 00:49:46,910
or whomever has already written we're

1265
00:49:45,050 --> 00:49:48,860
reusing that same code right our

1266
00:49:46,910 --> 00:49:51,170
whoever's writing our security test case

1267
00:49:48,860 --> 00:49:53,360
doesn't need to reinvent the will and

1268
00:49:51,170 --> 00:49:55,370
rewrite that because it already exists

1269
00:49:53,360 --> 00:49:58,100
the only thing they have to create is

1270
00:49:55,370 --> 00:50:01,730
the less step which is then the HTTP

1271
00:49:58,100 --> 00:50:04,220
request should be sent with TLS 1.2 and

1272
00:50:01,730 --> 00:50:07,010
again it's a test that's pretty easy to

1273
00:50:04,220 --> 00:50:09,049
automate if you know we take a look at

1274
00:50:07,010 --> 00:50:11,390
you know the server end point and

1275
00:50:09,050 --> 00:50:14,360
basically TLS 1.2 is enabled

1276
00:50:11,390 --> 00:50:17,150
or it's not if it's not the test fails

1277
00:50:14,360 --> 00:50:18,710
the requirement fails and then re report

1278
00:50:17,150 --> 00:50:22,790
back that the application does not

1279
00:50:18,710 --> 00:50:24,590
support TLS 1.2 and just if you're not

1280
00:50:22,790 --> 00:50:26,560
familiar there's various ways to to

1281
00:50:24,590 --> 00:50:30,050
actually implement those tests

1282
00:50:26,560 --> 00:50:32,390
technically so a cucumber can execute

1283
00:50:30,050 --> 00:50:34,670
things like j-unit if you haven't heard

1284
00:50:32,390 --> 00:50:38,000
of BDD security is an OAuth project that

1285
00:50:34,670 --> 00:50:40,160
uses gherkin that drives a wasp's app

1286
00:50:38,000 --> 00:50:42,350
and some other tools I think selenium

1287
00:50:40,160 --> 00:50:44,509
also to execute security tests so this

1288
00:50:42,350 --> 00:50:45,920
is you don't have to build this on your

1289
00:50:44,510 --> 00:50:48,380
own from scratch you can look into

1290
00:50:45,920 --> 00:50:52,100
existing solutions and frameworks and

1291
00:50:48,380 --> 00:50:53,330
and build on them this is just another

1292
00:50:52,100 --> 00:50:55,490
example I don't know if we have a lot of

1293
00:50:53,330 --> 00:50:56,779
time to go through it we don't but I

1294
00:50:55,490 --> 00:50:58,459
think it's important to at least cover

1295
00:50:56,780 --> 00:50:59,780
it at a high level because you know in

1296
00:50:58,460 --> 00:51:02,030
this one we're covering input validation

1297
00:50:59,780 --> 00:51:03,830
you know right because um you know

1298
00:51:02,030 --> 00:51:05,000
hopefully one of the first things you

1299
00:51:03,830 --> 00:51:06,799
all thought you know when we gave the

1300
00:51:05,000 --> 00:51:09,260
example of typing nine thousand dollars

1301
00:51:06,800 --> 00:51:11,420
into that boxes well what happens if I

1302
00:51:09,260 --> 00:51:13,940
type some other values into that what if

1303
00:51:11,420 --> 00:51:15,500
I put some script tags or something else

1304
00:51:13,940 --> 00:51:18,110
right hopefully you have some security

1305
00:51:15,500 --> 00:51:19,430
controls in place to prevent that but

1306
00:51:18,110 --> 00:51:22,460
basically what we want to do here is

1307
00:51:19,430 --> 00:51:25,399
validate that the user input defined you

1308
00:51:22,460 --> 00:51:26,930
know matches a whitelist criterion so

1309
00:51:25,400 --> 00:51:28,490
you know we want them to have a number

1310
00:51:26,930 --> 00:51:30,680
that's you know what they need to enter

1311
00:51:28,490 --> 00:51:32,779
US dollars that's you know less than or

1312
00:51:30,680 --> 00:51:34,879
equal to their account balance shouldn't

1313
00:51:32,780 --> 00:51:36,530
be a negative number we want it to be

1314
00:51:34,880 --> 00:51:42,130
whole numbers only so there shouldn't be

1315
00:51:36,530 --> 00:51:44,480
decibels it should be a numeric only etc

1316
00:51:42,130 --> 00:51:47,210
so if we look at the Gherkin script you

1317
00:51:44,480 --> 00:51:49,460
know again first two boxes are the same

1318
00:51:47,210 --> 00:51:50,960
given that we have the webpage you know

1319
00:51:49,460 --> 00:51:53,030
given that they have an account balance

1320
00:51:50,960 --> 00:51:57,380
with zero Bitcoin and nine thousand

1321
00:51:53,030 --> 00:51:59,660
dollars now we want to validate against

1322
00:51:57,380 --> 00:52:02,630
a list of input right so we provide a

1323
00:51:59,660 --> 00:52:04,460
list of essentially tests to run here

1324
00:52:02,630 --> 00:52:06,050
all right so negative I don't know how

1325
00:52:04,460 --> 00:52:10,340
many zeros that is you know a bajillion

1326
00:52:06,050 --> 00:52:11,990
dollars negative 100 negative 125

1327
00:52:10,340 --> 00:52:13,460
thousand and one right assuming we have

1328
00:52:11,990 --> 00:52:14,990
an account balance of twenty five

1329
00:52:13,460 --> 00:52:16,670
thousand dollars we want to provide

1330
00:52:14,990 --> 00:52:19,459
something that's outside of our account

1331
00:52:16,670 --> 00:52:21,500
balance we've got PI there as a decimal

1332
00:52:19,460 --> 00:52:23,210
number and we have a string input of

1333
00:52:21,500 --> 00:52:26,240
just dollars

1334
00:52:23,210 --> 00:52:28,220
so the expected results should be that

1335
00:52:26,240 --> 00:52:31,098
when the conversion page is displayed

1336
00:52:28,220 --> 00:52:33,200
right they should have an error message

1337
00:52:31,099 --> 00:52:35,869
right the error message filled should

1338
00:52:33,200 --> 00:52:41,118
State Police transfer a valid quantity

1339
00:52:35,869 --> 00:52:43,940
of US dollars so if any of any of these

1340
00:52:41,119 --> 00:52:46,040
inputs are sent to our input point and

1341
00:52:43,940 --> 00:52:47,720
it comes back and says hey congrats

1342
00:52:46,040 --> 00:52:49,040
you've been given some Bitcoin or

1343
00:52:47,720 --> 00:52:52,129
something to that effect

1344
00:52:49,040 --> 00:52:54,770
this test would fail right because that

1345
00:52:52,130 --> 00:52:57,740
input did not match our whitelist

1346
00:52:54,770 --> 00:52:59,300
criteria this comes down to being very

1347
00:52:57,740 --> 00:53:00,740
granular in your requirements right we

1348
00:52:59,300 --> 00:53:03,079
need to know exactly what's gonna happen

1349
00:53:00,740 --> 00:53:05,629
but if we if we do that then we can test

1350
00:53:03,079 --> 00:53:07,609
very well with with basically zero false

1351
00:53:05,630 --> 00:53:09,230
positives that were their meeting

1352
00:53:07,609 --> 00:53:10,460
security requirements so we've we've

1353
00:53:09,230 --> 00:53:11,930
only got a couple slides but I think

1354
00:53:10,460 --> 00:53:14,510
we're maybe over on time so we're gonna

1355
00:53:11,930 --> 00:53:16,069
speed through them you have to reinvent

1356
00:53:14,510 --> 00:53:17,599
the wheel work with reporting if you use

1357
00:53:16,069 --> 00:53:19,339
existing QA tools they're already

1358
00:53:17,599 --> 00:53:20,420
generating reports and they're already

1359
00:53:19,339 --> 00:53:22,700
generating them and sort of the

1360
00:53:20,420 --> 00:53:25,220
pass/fail language which is what we

1361
00:53:22,700 --> 00:53:27,828
would recommend you do and so this is

1362
00:53:25,220 --> 00:53:30,049
just a screenshot directly from like the

1363
00:53:27,829 --> 00:53:32,450
JIRA or from the xray website which is a

1364
00:53:30,049 --> 00:53:34,069
test case management add-on for JIRA but

1365
00:53:32,450 --> 00:53:36,319
I just wanted to illustrate that they

1366
00:53:34,069 --> 00:53:38,930
show if you're using gherkin you can see

1367
00:53:36,319 --> 00:53:41,000
right they have this test this part of

1368
00:53:38,930 --> 00:53:42,680
this step past this step past this step

1369
00:53:41,000 --> 00:53:44,540
failed so for each of those lines we had

1370
00:53:42,680 --> 00:53:46,160
it will show you exactly where you

1371
00:53:44,540 --> 00:53:48,500
passed and failed so if you have

1372
00:53:46,160 --> 00:53:50,240
multiple criteria for a test you'll know

1373
00:53:48,500 --> 00:53:51,770
which ones passed and which ones aren't

1374
00:53:50,240 --> 00:53:53,779
this is very prescriptive and telling

1375
00:53:51,770 --> 00:53:56,180
you what to fix you can also get various

1376
00:53:53,780 --> 00:53:58,069
other types of reports and dashboards at

1377
00:53:56,180 --> 00:54:00,020
different levels from existing tools

1378
00:53:58,069 --> 00:54:01,250
whether it's Europe or another tool so

1379
00:54:00,020 --> 00:54:03,799
you know you don't necessarily need to

1380
00:54:01,250 --> 00:54:04,430
reinvent recording is this compatible

1381
00:54:03,799 --> 00:54:06,200
with devops

1382
00:54:04,430 --> 00:54:07,700
sort of spoiled this earlier we think

1383
00:54:06,200 --> 00:54:09,319
it's very compatible with devops we're

1384
00:54:07,700 --> 00:54:11,180
doing this right now for a very large

1385
00:54:09,319 --> 00:54:13,490
power and utilities organization it's

1386
00:54:11,180 --> 00:54:16,040
working very well happy to talk more

1387
00:54:13,490 --> 00:54:17,598
about that afterwards we'll take a

1388
00:54:16,040 --> 00:54:19,849
little more work upfront but you get

1389
00:54:17,599 --> 00:54:22,430
really great returns on that moving

1390
00:54:19,849 --> 00:54:25,190
downstream and the best return is better

1391
00:54:22,430 --> 00:54:27,859
relationships as I think the man left

1392
00:54:25,190 --> 00:54:29,150
but as write is less less tension better

1393
00:54:27,859 --> 00:54:31,160
relationships with the product teams

1394
00:54:29,150 --> 00:54:33,530
better relationships with QA that leads

1395
00:54:31,160 --> 00:54:34,848
to better collaboration and working

1396
00:54:33,530 --> 00:54:36,440
together will hopefully better

1397
00:54:34,849 --> 00:54:37,940
demonstrate value and get you

1398
00:54:36,440 --> 00:54:40,130
more money and I would even take that

1399
00:54:37,940 --> 00:54:43,520
one step further and say that it works

1400
00:54:40,130 --> 00:54:45,260
better and DevOps you know because again

1401
00:54:43,520 --> 00:54:46,660
you know kind of getting back to the

1402
00:54:45,260 --> 00:54:48,470
point of this slide where now

1403
00:54:46,660 --> 00:54:50,779
everything's green right you know

1404
00:54:48,470 --> 00:54:52,490
security is testing right there embedded

1405
00:54:50,780 --> 00:54:54,470
into the requirements gathering all the

1406
00:54:52,490 --> 00:54:56,990
way through reporting we have direct

1407
00:54:54,470 --> 00:54:59,750
traceability from our requirements to

1408
00:54:56,990 --> 00:55:03,649
our you know controls validation all the

1409
00:54:59,750 --> 00:55:05,930
way to our our reports you know where we

1410
00:55:03,650 --> 00:55:08,089
see a lot of organizations struggle as

1411
00:55:05,930 --> 00:55:11,210
trying to take their existing mature

1412
00:55:08,089 --> 00:55:13,130
security programs from waterfall and try

1413
00:55:11,210 --> 00:55:14,660
to force them to work in agile and

1414
00:55:13,130 --> 00:55:16,849
DevOps right you know we try to take

1415
00:55:14,660 --> 00:55:19,399
these you know these slow cumbersome

1416
00:55:16,849 --> 00:55:21,740
tools that take a long time to run they

1417
00:55:19,400 --> 00:55:25,339
require manual analysis they take

1418
00:55:21,740 --> 00:55:27,439
expertise to to review you know I have a

1419
00:55:25,339 --> 00:55:30,619
client in particular that can take up to

1420
00:55:27,440 --> 00:55:34,670
seven weeks you know to do a triage of a

1421
00:55:30,619 --> 00:55:37,099
static analysis scan right you can't

1422
00:55:34,670 --> 00:55:38,869
embed that into agile or DevOps right

1423
00:55:37,099 --> 00:55:41,210
that there's there's no way you can make

1424
00:55:38,869 --> 00:55:42,800
that work right so so I would argue you

1425
00:55:41,210 --> 00:55:46,609
know to Kevin's point not only does this

1426
00:55:42,800 --> 00:55:48,859
work with DevOps it works better and ten

1427
00:55:46,609 --> 00:55:51,020
seconds just next steps here well what

1428
00:55:48,859 --> 00:55:53,029
do we want you to do figure out who the

1429
00:55:51,020 --> 00:55:54,589
QA leads in your organization are get to

1430
00:55:53,030 --> 00:55:55,730
know them take them out for a beer what

1431
00:55:54,589 --> 00:55:57,589
are their processes what are their

1432
00:55:55,730 --> 00:55:59,569
artifacts what are they doing how can

1433
00:55:57,589 --> 00:56:01,009
you better integrate security into what

1434
00:55:59,569 --> 00:56:03,650
they're doing we recommend you try to do

1435
00:56:01,010 --> 00:56:05,630
that build a repository of reusable

1436
00:56:03,650 --> 00:56:09,050
actionable security requirements that

1437
00:56:05,630 --> 00:56:11,329
you can tag to stories and features

1438
00:56:09,050 --> 00:56:12,650
things like that and then sit and sprint

1439
00:56:11,329 --> 00:56:13,970
planning get to know the product teams

1440
00:56:12,650 --> 00:56:16,069
what they're doing how they work and

1441
00:56:13,970 --> 00:56:18,859
contribute feedback as they're

1442
00:56:16,069 --> 00:56:20,450
developing their plans and then write

1443
00:56:18,859 --> 00:56:21,650
your first security test case as we said

1444
00:56:20,450 --> 00:56:22,430
this is not you're not going to get this

1445
00:56:21,650 --> 00:56:24,589
done overnight

1446
00:56:22,430 --> 00:56:27,848
start with one and do it over the next X

1447
00:56:24,589 --> 00:56:30,730
number of years until you know winning

1448
00:56:27,849 --> 00:56:32,790
thank you everyone

1449
00:56:30,730 --> 00:56:32,790
you

1450
00:56:39,940 --> 00:56:42,000
you

