1
00:00:11,940 --> 00:00:38,220
[Music]

2
00:00:34,490 --> 00:00:40,290
all right hello everyone today I'm gonna

3
00:00:38,220 --> 00:00:42,570
present to you about the kubernetes

4
00:00:40,290 --> 00:00:44,280
ingress controller specifically the

5
00:00:42,570 --> 00:00:46,940
supported ingress controller which is

6
00:00:44,280 --> 00:00:49,020
based off of engine X which is the only

7
00:00:46,940 --> 00:00:51,300
kubernetes supported ingress controller

8
00:00:49,020 --> 00:00:54,480
right now and I'm gonna talk a little

9
00:00:51,300 --> 00:00:56,610
bit about the security features so first

10
00:00:54,480 --> 00:01:00,330
I was going to introduce myself but I've

11
00:00:56,610 --> 00:01:02,370
already been introduced so I don't need

12
00:01:00,330 --> 00:01:05,309
to do that anymore

13
00:01:02,370 --> 00:01:07,350
so you can find my Twitter if you want

14
00:01:05,309 --> 00:01:09,600
to take pictures and tweet out the

15
00:01:07,350 --> 00:01:11,039
session and you know and what you enjoy

16
00:01:09,600 --> 00:01:12,300
and if you have any questions later on

17
00:01:11,040 --> 00:01:15,090
you can have my contact information

18
00:01:12,300 --> 00:01:16,740
there and then you know I can help out

19
00:01:15,090 --> 00:01:18,420
so so right now I'm working as a

20
00:01:16,740 --> 00:01:20,100
Technical Marketing Manager so I'm

21
00:01:18,420 --> 00:01:22,530
promoting all of get labs tools

22
00:01:20,100 --> 00:01:25,649
especially those focused and centered

23
00:01:22,530 --> 00:01:27,930
around security and ingress is one of

24
00:01:25,649 --> 00:01:29,820
the components that I've specialized in

25
00:01:27,930 --> 00:01:34,950
so I'm gonna take the initiative and

26
00:01:29,820 --> 00:01:38,609
kind of you know showcase that oh and

27
00:01:34,950 --> 00:01:42,270
also the Hat funny story the brand Neff

28
00:01:38,610 --> 00:01:45,060
I like that brand because one time

29
00:01:42,270 --> 00:01:46,890
someone asked me what brand is that so I

30
00:01:45,060 --> 00:01:49,110
just had pointed an F and they told me

31
00:01:46,890 --> 00:01:49,920
makes ants so so I do like things that

32
00:01:49,110 --> 00:01:55,740
make sense

33
00:01:49,920 --> 00:01:59,850
little fun fact so there's a QR code and

34
00:01:55,740 --> 00:02:03,658
uh yeah and a link to I get lab

35
00:01:59,850 --> 00:02:05,490
repository that has like little tidbits

36
00:02:03,659 --> 00:02:07,470
and the ammo files that you can deploy

37
00:02:05,490 --> 00:02:09,539
on your own kubernetes cluster so I've

38
00:02:07,470 --> 00:02:14,010
links there to making a google cloud

39
00:02:09,539 --> 00:02:15,239
kubernetes engine cluster and llamó so

40
00:02:14,010 --> 00:02:18,328
that way you can actually deploy this

41
00:02:15,239 --> 00:02:20,910
yourself later on so and if so I also

42
00:02:18,329 --> 00:02:22,860
added the slide deck to the presentation

43
00:02:20,910 --> 00:02:24,209
so if you go to last con and so you

44
00:02:22,860 --> 00:02:25,920
don't have to like Russian take pictures

45
00:02:24,209 --> 00:02:30,930
but there on the slide the slide decks

46
00:02:25,920 --> 00:02:34,350
posted as well so what am I gonna go

47
00:02:30,930 --> 00:02:37,440
over so so show of hands how many of you

48
00:02:34,350 --> 00:02:40,410
have worked with kubernetes before and

49
00:02:37,440 --> 00:02:42,920
how many of you have worked with ingress

50
00:02:40,410 --> 00:02:46,700
and deployed and grossed controller okay

51
00:02:42,920 --> 00:02:48,290
quite a few quite a few so I'm gonna go

52
00:02:46,700 --> 00:02:50,269
over just just kind of like the basics

53
00:02:48,290 --> 00:02:51,980
as a little refresher and then I'm going

54
00:02:50,270 --> 00:02:54,980
to talk about different authentication

55
00:02:51,980 --> 00:02:56,660
schemes that can be applied the Web

56
00:02:54,980 --> 00:02:59,480
Application Firewall which is mod

57
00:02:56,660 --> 00:03:00,799
security within the ingress controller

58
00:02:59,480 --> 00:03:02,929
and then just different ways of actually

59
00:03:00,800 --> 00:03:04,280
securing thinker's controller and

60
00:03:02,930 --> 00:03:06,320
different rules that you might want to

61
00:03:04,280 --> 00:03:08,270
apply it to your application and then

62
00:03:06,320 --> 00:03:10,820
I'll go over to some basics that you

63
00:03:08,270 --> 00:03:12,230
know you might want to also secure on

64
00:03:10,820 --> 00:03:12,620
the app side before actually even the

65
00:03:12,230 --> 00:03:16,040
point

66
00:03:12,620 --> 00:03:18,080
and troubleshooting as well so how to

67
00:03:16,040 --> 00:03:22,190
troubleshoot you know an issue within

68
00:03:18,080 --> 00:03:24,110
the ingress controller so what is

69
00:03:22,190 --> 00:03:26,540
ingress pretty much an ingress means

70
00:03:24,110 --> 00:03:29,630
going in like an entrance to something

71
00:03:26,540 --> 00:03:32,810
so think of the ingress controller as

72
00:03:29,630 --> 00:03:35,900
the front door so the front door to your

73
00:03:32,810 --> 00:03:37,550
applications so within that there's it's

74
00:03:35,900 --> 00:03:39,410
essentially a bunch of networking rules

75
00:03:37,550 --> 00:03:42,850
that are going to be that are going to

76
00:03:39,410 --> 00:03:46,100
lead you towards your application so and

77
00:03:42,850 --> 00:03:48,049
the whole flow there it's the whole

78
00:03:46,100 --> 00:03:50,600
ingress flow there's there's a

79
00:03:48,049 --> 00:03:53,420
composition of several objects which are

80
00:03:50,600 --> 00:03:54,950
the the deployment the ingress resource

81
00:03:53,420 --> 00:03:58,250
and the services and all that's

82
00:03:54,950 --> 00:04:02,078
controlled by an ingress controller so

83
00:03:58,250 --> 00:04:05,360
just to kind of give a quick nice clean

84
00:04:02,079 --> 00:04:07,670
very basic diagram on what's going on

85
00:04:05,360 --> 00:04:10,280
the traffic comes in hits the load

86
00:04:07,670 --> 00:04:11,720
balancer and then the load balancer what

87
00:04:10,280 --> 00:04:14,060
it does is from the outside world that

88
00:04:11,720 --> 00:04:16,548
routes it to your to your ingress

89
00:04:14,060 --> 00:04:18,070
controller so it does that by exposing a

90
00:04:16,548 --> 00:04:20,750
load balancer server so a load balancer

91
00:04:18,070 --> 00:04:22,520
service just pretty much says hey

92
00:04:20,750 --> 00:04:24,710
everything coming in through the load

93
00:04:22,520 --> 00:04:27,440
balancer let's send it to the ingress

94
00:04:24,710 --> 00:04:29,000
Controller so essentially once

95
00:04:27,440 --> 00:04:30,560
everything reaches the ingress control

96
00:04:29,000 --> 00:04:32,810
of the ingress Controller has a set of

97
00:04:30,560 --> 00:04:34,970
rules that are applied via the ingress

98
00:04:32,810 --> 00:04:37,400
resources so this right here would be

99
00:04:34,970 --> 00:04:39,169
the ingress resource and the ingress

100
00:04:37,400 --> 00:04:42,890
resource says like hey if I have the

101
00:04:39,169 --> 00:04:45,409
path like slash cat or slash dog let's

102
00:04:42,890 --> 00:04:48,440
point that towards a service and the

103
00:04:45,410 --> 00:04:51,550
service what that does is it exposes the

104
00:04:48,440 --> 00:04:55,129
application so service is essentially

105
00:04:51,550 --> 00:04:57,979
you know there's like a cluster IP

106
00:04:55,129 --> 00:05:00,199
and so these these will be exposed

107
00:04:57,979 --> 00:05:02,748
within the cluster to themselves and the

108
00:05:00,199 --> 00:05:05,869
service will point towards the different

109
00:05:02,749 --> 00:05:07,279
application so so I mean it follows a

110
00:05:05,869 --> 00:05:09,219
little quick if I was losing anyone if

111
00:05:07,279 --> 00:05:15,619
anyone has any questions at this point

112
00:05:09,219 --> 00:05:22,219
yeah essentially it could be layer 7

113
00:05:15,619 --> 00:05:27,679
layer 3 4 as well yeah so so those are

114
00:05:22,219 --> 00:05:29,779
those are those are the basics and so

115
00:05:27,679 --> 00:05:33,018
the ingress controller monitors the the

116
00:05:29,779 --> 00:05:37,219
ingress path and kubernetes so anytime

117
00:05:33,019 --> 00:05:39,469
you do a cube CTO apply ingress you know

118
00:05:37,219 --> 00:05:41,179
any ingress what it does is and I'll

119
00:05:39,469 --> 00:05:42,379
show and I'll give some demos I'll

120
00:05:41,179 --> 00:05:45,229
probably start demos off to this slide

121
00:05:42,379 --> 00:05:47,029
but as soon as you apply an ingress

122
00:05:45,229 --> 00:05:50,329
resource what it does is it builds an

123
00:05:47,029 --> 00:05:53,389
engine X configuration which adds that

124
00:05:50,329 --> 00:05:56,389
rule so it also if I do meow / meow

125
00:05:53,389 --> 00:05:57,889
it'll create the rule like / meow and

126
00:05:56,389 --> 00:06:07,129
then everything that goes along with

127
00:05:57,889 --> 00:06:10,159
that rule so yeah ok so one thing to do

128
00:06:07,129 --> 00:06:11,779
is to deploy the ingress controller what

129
00:06:10,159 --> 00:06:14,329
a lot of people do is they deployed via

130
00:06:11,779 --> 00:06:16,308
helm so I get lab once you have a

131
00:06:14,329 --> 00:06:18,740
cluster set up you can just quickly

132
00:06:16,309 --> 00:06:20,389
install Hellman tiller and then with a

133
00:06:18,740 --> 00:06:22,399
click you can install your ingress

134
00:06:20,389 --> 00:06:25,939
controller and then you'll be assigned

135
00:06:22,399 --> 00:06:27,349
an endpoint so usually that's the whole

136
00:06:25,939 --> 00:06:29,179
flow of things what you what you would

137
00:06:27,349 --> 00:06:31,308
do is you would have your kubernetes

138
00:06:29,179 --> 00:06:32,299
cluster and then you just deploy your

139
00:06:31,309 --> 00:06:34,999
ingress controlling it's just a

140
00:06:32,300 --> 00:06:36,889
deployment that runs on you know you can

141
00:06:34,999 --> 00:06:38,779
set it up for two of them to run or want

142
00:06:36,889 --> 00:06:40,339
to run so just make a pod with the

143
00:06:38,779 --> 00:06:44,479
ingress controller on it that listens

144
00:06:40,339 --> 00:06:46,669
and on the ingress path and yeah there's

145
00:06:44,479 --> 00:06:51,979
there's many ways to deploy it I think

146
00:06:46,669 --> 00:06:54,409
the most common one is via helm and so I

147
00:06:51,979 --> 00:06:56,990
deployed mine using Auto DevOps and

148
00:06:54,409 --> 00:06:58,909
gillip so it's just essentially you

149
00:06:56,990 --> 00:07:00,709
build a project and what it does is

150
00:06:58,909 --> 00:07:02,240
it'll go ahead and build the whole

151
00:07:00,709 --> 00:07:04,610
pipeline for you based off the files

152
00:07:02,240 --> 00:07:06,559
that are there so the build job will go

153
00:07:04,610 --> 00:07:08,940
ahead and build the actual docker image

154
00:07:06,559 --> 00:07:11,400
and then once it'll test everything

155
00:07:08,940 --> 00:07:14,160
then once it hits production it'll

156
00:07:11,400 --> 00:07:17,099
actually deploy the service the ingress

157
00:07:14,160 --> 00:07:19,740
resource and the actual application

158
00:07:17,100 --> 00:07:23,670
deployment so so I did that pretty

159
00:07:19,740 --> 00:07:27,270
easily and then there's two things that

160
00:07:23,670 --> 00:07:28,740
two ways that you can configure you know

161
00:07:27,270 --> 00:07:31,020
ingress rules one of them is via

162
00:07:28,740 --> 00:07:32,640
annotations and one of them is via

163
00:07:31,020 --> 00:07:37,890
configuration map so the configuration

164
00:07:32,640 --> 00:07:41,130
map applies globally and the annotations

165
00:07:37,890 --> 00:07:42,180
apply just per rule so so those are two

166
00:07:41,130 --> 00:07:45,600
ways so if you just want to apply

167
00:07:42,180 --> 00:07:50,490
something on slash me out on that route

168
00:07:45,600 --> 00:07:53,280
like w WM / me i'll it apply all those

169
00:07:50,490 --> 00:07:54,750
rules on just that route based off of

170
00:07:53,280 --> 00:07:57,239
the annotation but if it were a

171
00:07:54,750 --> 00:08:01,770
configuration map it applied to all the

172
00:07:57,240 --> 00:08:06,840
routes within a host and let me show you

173
00:08:01,770 --> 00:08:08,729
an example so if I go over to my

174
00:08:06,840 --> 00:08:09,810
terminal which I hope you can see that I

175
00:08:08,730 --> 00:08:12,660
don't know if I can make it much bigger

176
00:08:09,810 --> 00:08:14,610
yeah it's as large as I can make it so

177
00:08:12,660 --> 00:08:21,930
what I'm going to do is I'm going to

178
00:08:14,610 --> 00:08:25,440
apply my mail deployment so it's going

179
00:08:21,930 --> 00:08:30,180
to make a set of of pods so if I do keep

180
00:08:25,440 --> 00:08:34,229
CTL go odds so you can see that there's

181
00:08:30,180 --> 00:08:40,280
two meowww applications then I'm gonna

182
00:08:34,229 --> 00:08:40,280
expose them for your service

183
00:08:55,510 --> 00:08:59,910
so you can see that it obtained the

184
00:08:57,730 --> 00:09:02,920
cluster EPI so if in the cluster if I

185
00:08:59,910 --> 00:09:05,880
sum of the requests to this IP I'll be

186
00:09:02,920 --> 00:09:13,599
able to access my mail application and

187
00:09:05,880 --> 00:09:16,420
then what I'm going to do is I will

188
00:09:13,600 --> 00:09:21,339
apply my ingress resource so you can see

189
00:09:16,420 --> 00:09:24,160
cube CTL gets ingress and what I will do

190
00:09:21,339 --> 00:09:26,199
is I'll show you what it looks like so

191
00:09:24,160 --> 00:09:28,860
it's just saying on the host male comm

192
00:09:26,199 --> 00:09:32,769
we're going to hit the service meow

193
00:09:28,860 --> 00:09:35,800
service the mail service hits the actual

194
00:09:32,769 --> 00:09:39,720
application within the mail pods on port

195
00:09:35,800 --> 00:09:46,569
80 so essentially now if I send a curl

196
00:09:39,720 --> 00:09:49,630
so let me print environment so this is

197
00:09:46,570 --> 00:09:52,060
my load balancer IP so essentially if I

198
00:09:49,630 --> 00:09:54,220
sent a curl and I'm gonna pass the host

199
00:09:52,060 --> 00:09:56,170
header that way since mail.com is an

200
00:09:54,220 --> 00:10:00,069
actual site and I just want to use the

201
00:09:56,170 --> 00:10:02,469
site on on my cluster and I want to do

202
00:10:00,069 --> 00:10:06,069
some virtual routing I'll just somebody

203
00:10:02,470 --> 00:10:11,110
here so me I'll calm and then I will do

204
00:10:06,069 --> 00:10:14,290
my load balancer IP and then you should

205
00:10:11,110 --> 00:10:16,089
see that there is essentially the

206
00:10:14,290 --> 00:10:17,319
application so the application just just

207
00:10:16,089 --> 00:10:19,300
prints out the request and some

208
00:10:17,319 --> 00:10:22,810
information the request so that's that's

209
00:10:19,300 --> 00:10:25,500
how routing works if I were to just curl

210
00:10:22,810 --> 00:10:27,760
the load balancer IP since there's no

211
00:10:25,500 --> 00:10:30,970
actual route set up for just a load

212
00:10:27,760 --> 00:10:36,130
balancer IP it'll just give me a 404 so

213
00:10:30,970 --> 00:10:39,550
you can see there so so yeah that's

214
00:10:36,130 --> 00:10:42,579
that's when it's the basic so now I'm

215
00:10:39,550 --> 00:10:44,589
gonna go ahead and show you how to

216
00:10:42,579 --> 00:10:46,689
configure that same application with

217
00:10:44,589 --> 00:10:48,970
basic authentication so basic

218
00:10:46,690 --> 00:10:50,860
authentication is pretty much just

219
00:10:48,970 --> 00:10:59,339
authenticating using a username and

220
00:10:50,860 --> 00:10:59,339
password via HTTP so let's go back okay

221
00:11:01,970 --> 00:11:08,759
so I am going to buy okay

222
00:11:06,899 --> 00:11:16,649
basic authentication by animals so let's

223
00:11:08,759 --> 00:11:21,119
show you what that looks like so what I

224
00:11:16,649 --> 00:11:23,189
did here is I added annotations so this

225
00:11:21,119 --> 00:11:25,829
will only apply to the slash meow path

226
00:11:23,189 --> 00:11:28,469
so I added annotations that will tell me

227
00:11:25,829 --> 00:11:32,269
what what the auth type is what the off

228
00:11:28,470 --> 00:11:34,379
secret is and what the author ohm is so

229
00:11:32,269 --> 00:11:36,839
essentially there's going to be a secret

230
00:11:34,379 --> 00:11:39,449
that contains the base64 encoded

231
00:11:36,839 --> 00:11:43,649
username and password and it'll use that

232
00:11:39,449 --> 00:11:46,319
secret to go ahead and authenticate

233
00:11:43,649 --> 00:11:51,449
against so let me see it do it hey - I

234
00:11:46,319 --> 00:11:53,069
have those secrets in there okay I don't

235
00:11:51,449 --> 00:12:02,219
have that secret there so I'm gonna go

236
00:11:53,069 --> 00:12:04,920
ahead and create it so let's make okay

237
00:12:02,220 --> 00:12:07,860
so now I should have a file names off

238
00:12:04,920 --> 00:12:16,139
yeah so what I'm gonna do is I'm going

239
00:12:07,860 --> 00:12:17,759
to create the secret okay so there

240
00:12:16,139 --> 00:12:19,499
should be a secret called basic auth

241
00:12:17,759 --> 00:12:24,629
great law I got quiet with when the AC

242
00:12:19,499 --> 00:12:28,290
turned on okay so now if I perform a

243
00:12:24,629 --> 00:12:37,290
curl I should get I shouldn't get that

244
00:12:28,290 --> 00:12:40,349
though I think since the secret didn't

245
00:12:37,290 --> 00:12:43,819
exist before it's probably that I need

246
00:12:40,350 --> 00:12:43,819
to recreate the ingress resource

247
00:12:59,630 --> 00:13:06,560
okay so that's what I should get for one

248
00:13:02,449 --> 00:13:14,630
on another's thank you she required so

249
00:13:06,560 --> 00:13:19,279
now what I can do is I can pass in the

250
00:13:14,630 --> 00:13:20,389
username and the password that I created

251
00:13:19,279 --> 00:13:28,279
I can't remember

252
00:13:20,389 --> 00:13:30,800
oh yeah so now once I send that yeah

253
00:13:28,279 --> 00:13:32,930
should be authenticated if I were to

254
00:13:30,800 --> 00:13:35,750
send them the wrong password I'll still

255
00:13:32,930 --> 00:13:38,060
get the 401 so it uses the kubernetes

256
00:13:35,750 --> 00:13:41,300
secret to load the username and password

257
00:13:38,060 --> 00:13:43,160
so that that's that's one way of

258
00:13:41,300 --> 00:13:45,229
securing it it's not the recommended way

259
00:13:43,160 --> 00:13:46,399
but like the most recommended way but at

260
00:13:45,230 --> 00:13:50,120
least if you want to have some type of

261
00:13:46,399 --> 00:13:52,029
basic auth implemented that that's one

262
00:13:50,120 --> 00:14:00,430
easy way of doing it

263
00:13:52,029 --> 00:14:03,019
there's also external authentication so

264
00:14:00,430 --> 00:14:06,079
external authentication allows you to

265
00:14:03,019 --> 00:14:08,240
use an outside source so it can be used

266
00:14:06,079 --> 00:14:11,420
for basic auth that lives somewhere else

267
00:14:08,240 --> 00:14:13,550
it could be used for OAuth which the the

268
00:14:11,420 --> 00:14:15,259
OAuth way it can be used with any othe

269
00:14:13,550 --> 00:14:18,589
provider that does the the auth flow

270
00:14:15,259 --> 00:14:20,480
essentially so there's lots of ways on

271
00:14:18,589 --> 00:14:23,930
on configuring that and I'll write a

272
00:14:20,480 --> 00:14:25,639
blog on that soon since it's not super

273
00:14:23,930 --> 00:14:27,079
trivial there's a lot of things that

274
00:14:25,639 --> 00:14:28,730
need to go in and and that's one

275
00:14:27,079 --> 00:14:31,609
enhancement that needs to be make made

276
00:14:28,730 --> 00:14:39,769
into the ingress documentation but I can

277
00:14:31,610 --> 00:14:49,160
show you so I will show you the external

278
00:14:39,769 --> 00:14:51,290
authentication so now you can see that

279
00:14:49,160 --> 00:14:55,819
what I did is I just added an author URL

280
00:14:51,290 --> 00:14:59,569
and I just went to I just added basic

281
00:14:55,819 --> 00:15:01,339
off from HTTP bin and all that's it just

282
00:14:59,569 --> 00:15:03,860
expects a certain username and password

283
00:15:01,339 --> 00:15:10,839
and then it'll authenticate you that way

284
00:15:03,860 --> 00:15:10,839
so so now if I sent a curl

285
00:15:11,100 --> 00:15:18,449
I'm gonna get 401 unauthorized but if I

286
00:15:13,860 --> 00:15:21,410
do so this should still feel okay so

287
00:15:18,449 --> 00:15:31,609
it'll be the one that is expected by

288
00:15:21,410 --> 00:15:34,490
HTTP bin which I think it was yeah so

289
00:15:31,610 --> 00:15:36,660
this is just what the API expects and

290
00:15:34,490 --> 00:15:38,160
then there I have access to my

291
00:15:36,660 --> 00:15:40,410
application so it's just using an

292
00:15:38,160 --> 00:15:43,380
external source and if anyone's

293
00:15:40,410 --> 00:15:44,910
interested after I'll I'll post more

294
00:15:43,380 --> 00:15:48,959
information on how to set up this

295
00:15:44,910 --> 00:15:50,730
authentication flow flow off and and let

296
00:15:48,959 --> 00:15:52,949
you know you know through an email list

297
00:15:50,730 --> 00:15:55,790
once I write up a blog on that since

298
00:15:52,949 --> 00:15:55,790
it's not super trivial

299
00:15:57,470 --> 00:16:03,660
okay another another fun one is mutual

300
00:16:01,980 --> 00:16:07,019
authentication so who here has worked

301
00:16:03,660 --> 00:16:09,149
with mutual authentication before so

302
00:16:07,019 --> 00:16:13,079
client certificate authentication it

303
00:16:09,149 --> 00:16:15,480
basically means that the client

304
00:16:13,079 --> 00:16:16,920
certificate and that the client and the

305
00:16:15,480 --> 00:16:19,440
server both have to be signed by the

306
00:16:16,920 --> 00:16:20,310
same CA so that way they can verify and

307
00:16:19,440 --> 00:16:23,430
trust each other

308
00:16:20,310 --> 00:16:26,699
so that's that it you can also implement

309
00:16:23,430 --> 00:16:29,069
that within ingress nginx that way you

310
00:16:26,699 --> 00:16:31,199
would need to pass in a valid client

311
00:16:29,069 --> 00:16:33,060
certificate to be able to authenticate

312
00:16:31,199 --> 00:16:42,660
with a certain application a certain

313
00:16:33,060 --> 00:16:44,160
path so so so they're so they're

314
00:16:42,660 --> 00:16:45,899
authenticating essentially against a

315
00:16:44,160 --> 00:16:48,209
third service because of the certificate

316
00:16:45,899 --> 00:16:50,220
authority so certificate authority signs

317
00:16:48,209 --> 00:16:51,779
the server certificate and also signs

318
00:16:50,220 --> 00:16:53,850
the client certificate so in the client

319
00:16:51,779 --> 00:16:56,760
and the server communicate with each

320
00:16:53,850 --> 00:16:58,800
other but they are but every but they

321
00:16:56,760 --> 00:17:01,220
validate their authenticity based off of

322
00:16:58,800 --> 00:17:04,168
their their own certificates via the CA

323
00:17:01,220 --> 00:17:06,870
yeah so I have a another diagram that

324
00:17:04,169 --> 00:17:09,480
kind of shows it here so if you see here

325
00:17:06,869 --> 00:17:11,639
so you can see that it will request the

326
00:17:09,480 --> 00:17:13,290
resource and it will present the server

327
00:17:11,640 --> 00:17:15,360
certificate it will validate the server

328
00:17:13,290 --> 00:17:16,980
certificate against the CA it will

329
00:17:15,359 --> 00:17:19,139
validate the client certificate against

330
00:17:16,980 --> 00:17:21,209
the CA and then if that's valid then

331
00:17:19,140 --> 00:17:25,750
it'll go ahead and

332
00:17:21,209 --> 00:17:28,990
so one thing a lot of people don't know

333
00:17:25,750 --> 00:17:29,889
is about the common names so and it kind

334
00:17:28,990 --> 00:17:32,379
of takes some wrapping around the

335
00:17:29,889 --> 00:17:34,178
playing of certificates a lot so common

336
00:17:32,379 --> 00:17:36,189
names for the service certificate have

337
00:17:34,179 --> 00:17:38,710
to be have to match with actual host

338
00:17:36,190 --> 00:17:40,299
name and then the certificate authority

339
00:17:38,710 --> 00:17:42,190
is usually the name of the certificate

340
00:17:40,299 --> 00:17:44,470
authority that's saved in your keychain

341
00:17:42,190 --> 00:17:46,450
and the browser and the operating system

342
00:17:44,470 --> 00:17:50,559
and there's a lot of different valid CAS

343
00:17:46,450 --> 00:17:53,110
that that are trusted essentially I'm in

344
00:17:50,559 --> 00:17:54,610
my example I use a self-signed CA so

345
00:17:53,110 --> 00:17:57,519
it's not essentially trusted it's one

346
00:17:54,610 --> 00:17:58,928
that I just auto-generated and then the

347
00:17:57,519 --> 00:18:06,370
client certificate is usually the name

348
00:17:58,929 --> 00:18:15,370
of the user or the client so let me go

349
00:18:06,370 --> 00:18:21,149
back to demo mode so they're just okay

350
00:18:15,370 --> 00:18:21,149
so I'm going to keep city

351
00:18:33,809 --> 00:18:40,668
okay so in this you can see I'm using

352
00:18:36,389 --> 00:18:40,668
annotations as well and

353
00:18:46,590 --> 00:18:51,330
okay you can see that I'm pointing

354
00:18:49,019 --> 00:18:54,779
towards a secret and the secret contains

355
00:18:51,330 --> 00:18:56,668
my certificates and I'm telling that to

356
00:18:54,779 --> 00:18:58,830
verify the client so I'm telling it to

357
00:18:56,669 --> 00:19:01,350
make sure that you're getting a valid

358
00:18:58,830 --> 00:19:04,460
client certificate so let me show you

359
00:19:01,350 --> 00:19:04,459
what the secret looks like

360
00:19:11,070 --> 00:19:20,399
so essentially it is base64-encoded see

361
00:19:16,410 --> 00:19:25,110
a certificate and base64-encoded server

362
00:19:20,400 --> 00:19:26,070
certificate so so that's what you're

363
00:19:25,110 --> 00:19:30,870
seeing there so these are just the

364
00:19:26,070 --> 00:19:42,419
certificates that I generated and I'll

365
00:19:30,870 --> 00:19:46,489
show you what they look like so

366
00:19:42,420 --> 00:19:46,490
essentially it's just just a certificate

367
00:19:46,670 --> 00:19:53,790
so now what I'm going to do is I'm going

368
00:19:50,430 --> 00:19:55,590
to it's easier to copy and paste the

369
00:19:53,790 --> 00:20:02,570
command sorry if I'm moving back and

370
00:19:55,590 --> 00:20:02,570
forth a lot so what I'm going to do is

371
00:20:03,560 --> 00:20:07,370
what's my Ezio's

372
00:20:09,920 --> 00:20:15,050
so I get okay so uh so added me I'll

373
00:20:12,800 --> 00:20:20,050
come to my Etsy hosts just to make it

374
00:20:15,050 --> 00:20:20,050
simpler so if I curl y'all calm

375
00:20:25,010 --> 00:20:33,020
oh sorry that's actually gonna mail calm

376
00:20:29,120 --> 00:20:37,600
I have to do it HTTP so so here's one I

377
00:20:33,020 --> 00:20:40,010
guess one good thing I can show so if I

378
00:20:37,600 --> 00:20:43,429
show you my ingress resource if you have

379
00:20:40,010 --> 00:20:46,879
TLS enabled that means that that me I'll

380
00:20:43,430 --> 00:20:48,860
calm host will be via TLS so it'll be if

381
00:20:46,880 --> 00:20:51,560
I'm going through HTTP it'll route me

382
00:20:48,860 --> 00:20:53,330
towards my rule but if not it'll route

383
00:20:51,560 --> 00:20:55,550
Ritter it's gonna wrap me towards just

384
00:20:53,330 --> 00:21:04,370
the real mail calm since I only have it

385
00:20:55,550 --> 00:21:06,950
enabled via HTTP so well from HD so I

386
00:21:04,370 --> 00:21:11,179
it'll have to be through SSL so HTTP

387
00:21:06,950 --> 00:21:12,950
will go to a port 80 huh yeah so I'll

388
00:21:11,180 --> 00:21:15,140
see like if I Chrome mail comm I wants

389
00:21:12,950 --> 00:21:19,700
to send me to like mail calm but if I

390
00:21:15,140 --> 00:21:23,270
curl HTTP right it's gonna tell me it's

391
00:21:19,700 --> 00:21:26,690
gonna curl to my to my cluster so that's

392
00:21:23,270 --> 00:21:28,010
why it'll say 400 no required SSL

393
00:21:26,690 --> 00:21:30,350
certificate was saying because I have

394
00:21:28,010 --> 00:21:34,370
the mutual authentication enabled so

395
00:21:30,350 --> 00:21:45,040
then what I would have to do in this

396
00:21:34,370 --> 00:21:47,929
case is - - sure I believe it was see ya

397
00:21:45,040 --> 00:21:51,050
so now I'm plus passing my client

398
00:21:47,930 --> 00:21:52,940
certificate in key and there you go I

399
00:21:51,050 --> 00:21:55,220
should not be able to authenticate so

400
00:21:52,940 --> 00:21:58,010
and in the project and the repository

401
00:21:55,220 --> 00:21:59,270
there'll be some information on

402
00:21:58,010 --> 00:22:00,290
generating the key so I have a script

403
00:21:59,270 --> 00:22:03,940
there that you can just generate the

404
00:22:00,290 --> 00:22:03,940
keys and play with it yourself

405
00:22:07,730 --> 00:22:16,700
okay what's next okay so Web Application

406
00:22:12,649 --> 00:22:18,350
Firewall so again just a sample of the

407
00:22:16,700 --> 00:22:22,460
audience who's used the web application

408
00:22:18,350 --> 00:22:26,840
firewall and out of those who's used mod

409
00:22:22,460 --> 00:22:29,929
security specifically okay so

410
00:22:26,840 --> 00:22:32,418
essentially it's just mod security that

411
00:22:29,929 --> 00:22:34,519
deploys into the ingress controller so

412
00:22:32,419 --> 00:22:35,899
episode by default the ingress

413
00:22:34,519 --> 00:22:38,750
controller already loads the mod

414
00:22:35,899 --> 00:22:41,750
security module and what it does is it

415
00:22:38,750 --> 00:22:44,929
kind of logs and views all your HTTP

416
00:22:41,750 --> 00:22:47,330
traffic coming in and it'll log it you

417
00:22:44,929 --> 00:22:49,130
can add rules to block the traffic you

418
00:22:47,330 --> 00:22:51,110
can you know limit traffic from certain

419
00:22:49,130 --> 00:22:52,220
places you can just view kind of

420
00:22:51,110 --> 00:22:54,889
everything that's going on in the system

421
00:22:52,220 --> 00:22:58,010
you can add rules to detect scanners to

422
00:22:54,889 --> 00:22:59,990
detect you know any hackers trying to

423
00:22:58,010 --> 00:23:02,000
expose a vulnerability like a sequel

424
00:22:59,990 --> 00:23:03,830
injection or anything like that and you

425
00:23:02,000 --> 00:23:05,779
can choose what type of modes you want

426
00:23:03,830 --> 00:23:07,250
so you can choose if you actually want

427
00:23:05,779 --> 00:23:09,019
to block certain things if you want to

428
00:23:07,250 --> 00:23:11,720
just log certain things and have an

429
00:23:09,019 --> 00:23:16,279
in-depth analysis on what's going on in

430
00:23:11,720 --> 00:23:18,080
to your application specifically so yeah

431
00:23:16,279 --> 00:23:23,990
and it's used in the ingress on genetics

432
00:23:18,080 --> 00:23:26,449
controller by default so another another

433
00:23:23,990 --> 00:23:28,820
part of it is there's the OAuth or rule

434
00:23:26,450 --> 00:23:30,769
set so it there are rules that already

435
00:23:28,820 --> 00:23:32,418
provided by OAuth that provide against

436
00:23:30,769 --> 00:23:34,460
the OAuth top ten security

437
00:23:32,419 --> 00:23:36,740
vulnerabilities and a lot more different

438
00:23:34,460 --> 00:23:39,500
you know one or believes that attacks

439
00:23:36,740 --> 00:23:41,360
that you'd find out there so I added a

440
00:23:39,500 --> 00:23:43,340
whole bunch of lists I'm not gonna talk

441
00:23:41,360 --> 00:23:44,539
about them all but but essentially these

442
00:23:43,340 --> 00:23:46,309
are some of the things that you get off

443
00:23:44,539 --> 00:23:48,260
the bat with the OAuth score rule set

444
00:23:46,309 --> 00:23:51,559
and there's different paranoia levels

445
00:23:48,260 --> 00:23:55,158
that you can set that add you know a lot

446
00:23:51,559 --> 00:23:56,418
more a lot more rules and a lot more you

447
00:23:55,159 --> 00:23:58,340
know they either make them blocking or

448
00:23:56,419 --> 00:24:00,950
they log more so it just depends what

449
00:23:58,340 --> 00:24:04,549
you want and then added a picture of the

450
00:24:00,950 --> 00:24:06,139
wasps and wasp you know it has a wasp

451
00:24:04,549 --> 00:24:07,519
but I'm kind of like worried about those

452
00:24:06,139 --> 00:24:08,959
animals cuz every time I go outside my

453
00:24:07,519 --> 00:24:12,590
backyard they just come and bite me in

454
00:24:08,960 --> 00:24:16,570
the neck so I just wanted to say I get

455
00:24:12,590 --> 00:24:20,240
bitten by those things yeah pretty much

456
00:24:16,570 --> 00:24:21,330
so so in a good lab we do provide that

457
00:24:20,240 --> 00:24:23,810
as well we

458
00:24:21,330 --> 00:24:26,129
provide the the wife out-of-the-box

459
00:24:23,810 --> 00:24:28,470
configured and then this is kind of a

460
00:24:26,130 --> 00:24:30,150
little road map as to what's happening I

461
00:24:28,470 --> 00:24:32,160
think one big problem with the wife is

462
00:24:30,150 --> 00:24:34,290
that the this just dumps a bunch of logs

463
00:24:32,160 --> 00:24:36,570
to a file and ingress right now and

464
00:24:34,290 --> 00:24:38,790
there's some you know challenges around

465
00:24:36,570 --> 00:24:40,230
visualizing that data and actually

466
00:24:38,790 --> 00:24:41,460
making the logs useful and really

467
00:24:40,230 --> 00:24:44,190
examining them there's different tools

468
00:24:41,460 --> 00:24:45,960
out there but in ingress nginx right now

469
00:24:44,190 --> 00:24:48,030
it's not really easy to deploy so that's

470
00:24:45,960 --> 00:24:50,330
one thing that you know I'm working on

471
00:24:48,030 --> 00:24:54,480
to try to make that that information

472
00:24:50,330 --> 00:24:55,919
visual easy to visualize and to show

473
00:24:54,480 --> 00:24:58,590
statistics on it and different things

474
00:24:55,920 --> 00:25:02,880
like that so and with that said I'm I

475
00:24:58,590 --> 00:25:07,560
will give a quick little demo on unmod

476
00:25:02,880 --> 00:25:10,590
security so essentially every

477
00:25:07,560 --> 00:25:13,470
application that I already have mod

478
00:25:10,590 --> 00:25:15,540
security running within my cluster so

479
00:25:13,470 --> 00:25:19,170
what I am going to do is I'm just going

480
00:25:15,540 --> 00:25:21,360
to send a request with a user agent of a

481
00:25:19,170 --> 00:25:22,980
potential scanner so there's a scanner

482
00:25:21,360 --> 00:25:24,780
called absinthe I'm not sure if it's

483
00:25:22,980 --> 00:25:26,820
still really relevant these days but

484
00:25:24,780 --> 00:25:30,230
what it does is it tries to send sequel

485
00:25:26,820 --> 00:25:33,240
injection attacks into your system and

486
00:25:30,230 --> 00:25:34,530
and it uses the user agent absinthe so

487
00:25:33,240 --> 00:25:37,050
there's a bunch of user different user

488
00:25:34,530 --> 00:25:38,610
agents that will be applied like if like

489
00:25:37,050 --> 00:25:40,830
an SS can is run it or use a specific

490
00:25:38,610 --> 00:25:43,290
user agent a bunch of different

491
00:25:40,830 --> 00:25:45,720
vulnerability you know scanning tools so

492
00:25:43,290 --> 00:25:47,580
so essentially what what this test will

493
00:25:45,720 --> 00:25:52,520
do with mod security is it'll pick up

494
00:25:47,580 --> 00:25:57,270
the the user agent and their log it so

495
00:25:52,520 --> 00:26:01,850
let me just apply the standard cat file

496
00:25:57,270 --> 00:26:01,850
the standard meowing gross so

497
00:26:05,820 --> 00:26:16,840
vacation yes okay so now let's send the

498
00:26:12,340 --> 00:26:25,659
request okay so now I'm going to go

499
00:26:16,840 --> 00:26:27,070
ahead and examine the log so here's what

500
00:26:25,660 --> 00:26:28,930
I was saying that the logs are not

501
00:26:27,070 --> 00:26:30,639
really easy to see they're in audit log

502
00:26:28,930 --> 00:26:33,370
so you would have to add you know

503
00:26:30,640 --> 00:26:35,530
something like kibana or something or

504
00:26:33,370 --> 00:26:37,239
some type of log DNA or log aggregator

505
00:26:35,530 --> 00:26:38,820
to that file and then view it from there

506
00:26:37,240 --> 00:26:40,960
and have some way of reporting on that

507
00:26:38,820 --> 00:26:42,550
that would be the essential practice you

508
00:26:40,960 --> 00:26:43,720
don't really get that out of the box but

509
00:26:42,550 --> 00:26:45,970
you those are things that you would need

510
00:26:43,720 --> 00:26:47,980
to add so that way you can alert on a

511
00:26:45,970 --> 00:26:49,960
certain vulnerability that's found or

512
00:26:47,980 --> 00:26:51,640
you know something that mod security

513
00:26:49,960 --> 00:26:55,540
picks up would be the best practice

514
00:26:51,640 --> 00:26:58,540
around that so now I'm going into the

515
00:26:55,540 --> 00:27:01,710
ingress Controller and I'm going to view

516
00:26:58,540 --> 00:27:05,800
that file to see what's on there so now

517
00:27:01,710 --> 00:27:08,950
if I view the file and I just tailed it

518
00:27:05,800 --> 00:27:11,200
you can see that it'll say found user

519
00:27:08,950 --> 00:27:17,440
agent associated with a security scanner

520
00:27:11,200 --> 00:27:19,330
and the user agent was absent and it

521
00:27:17,440 --> 00:27:21,580
gives us a severe d-level so and all

522
00:27:19,330 --> 00:27:23,169
these things can be fine-tuned a lot of

523
00:27:21,580 --> 00:27:25,090
a lot of people add custom

524
00:27:23,170 --> 00:27:26,830
configurations for things that that they

525
00:27:25,090 --> 00:27:28,570
find so that different severity levels

526
00:27:26,830 --> 00:27:30,250
and these are things you can use to

527
00:27:28,570 --> 00:27:32,950
actually alert and things that you can

528
00:27:30,250 --> 00:27:34,990
monitor on and depending on how critical

529
00:27:32,950 --> 00:27:38,020
or what the servery level is you can

530
00:27:34,990 --> 00:27:39,580
have paid your duty send an email you

531
00:27:38,020 --> 00:27:41,080
know different things like that so these

532
00:27:39,580 --> 00:27:43,570
things are highly configurable and

533
00:27:41,080 --> 00:27:45,669
highly tuneable this is just like a

534
00:27:43,570 --> 00:27:48,730
simple example that I was able to come

535
00:27:45,670 --> 00:27:51,330
up with so and you can fine tune a lot

536
00:27:48,730 --> 00:27:51,330
of different things

537
00:28:01,040 --> 00:28:06,260
so another another thing that can be

538
00:28:03,930 --> 00:28:08,610
implemented is rate limiting

539
00:28:06,260 --> 00:28:10,290
so the ingress controller does support

540
00:28:08,610 --> 00:28:12,360
different rate limiting configurations

541
00:28:10,290 --> 00:28:14,580
per application so you can limit

542
00:28:12,360 --> 00:28:16,860
connections the rate per second rate per

543
00:28:14,580 --> 00:28:18,990
minute you can have a whitelist if it's

544
00:28:16,860 --> 00:28:20,699
like one of your own internal services

545
00:28:18,990 --> 00:28:23,220
accessing it so this was just kind of

546
00:28:20,700 --> 00:28:25,440
like a little basic you know this is one

547
00:28:23,220 --> 00:28:27,510
another way of securing different things

548
00:28:25,440 --> 00:28:34,440
and you can just do a per application or

549
00:28:27,510 --> 00:28:36,680
per route and then there's there's a lot

550
00:28:34,440 --> 00:28:39,120
of different things that should be tuned

551
00:28:36,680 --> 00:28:41,340
within the ingress controller so it's

552
00:28:39,120 --> 00:28:45,810
not just not solely about nginx

553
00:28:41,340 --> 00:28:47,340
directives you know like like the the

554
00:28:45,810 --> 00:28:48,960
things that we've spoken about there's a

555
00:28:47,340 --> 00:28:55,830
lot of different things like the bucket

556
00:28:48,960 --> 00:28:58,260
size redirecting to HTTPS you know cores

557
00:28:55,830 --> 00:28:59,580
implementing cores there's so many

558
00:28:58,260 --> 00:29:01,140
different things that you can configure

559
00:28:59,580 --> 00:29:03,240
pretty much essentially anything that

560
00:29:01,140 --> 00:29:04,740
you can configure with nginx you could

561
00:29:03,240 --> 00:29:07,790
configure within the ingress controller

562
00:29:04,740 --> 00:29:10,170
since it runs nginx has its back-end so

563
00:29:07,790 --> 00:29:12,450
so there's different configuration set

564
00:29:10,170 --> 00:29:15,180
should just be applied by default that

565
00:29:12,450 --> 00:29:17,010
that are not the standard security

566
00:29:15,180 --> 00:29:19,860
configurations that will make the system

567
00:29:17,010 --> 00:29:22,470
more secure so that's one thing to look

568
00:29:19,860 --> 00:29:23,879
at and also occur kernel parameters you

569
00:29:22,470 --> 00:29:28,080
can apply what's called an init

570
00:29:23,880 --> 00:29:29,460
container that will run on the noter or

571
00:29:28,080 --> 00:29:31,350
actually not another in a container

572
00:29:29,460 --> 00:29:32,880
daemon set which will run on all the

573
00:29:31,350 --> 00:29:35,340
nodes and the demons that can run

574
00:29:32,880 --> 00:29:37,770
systemctl calls and they can tune the

575
00:29:35,340 --> 00:29:41,159
kernel parameter so so it's good to look

576
00:29:37,770 --> 00:29:42,360
into the different you know kernel

577
00:29:41,160 --> 00:29:43,290
parameters and what should be tuned

578
00:29:42,360 --> 00:29:44,820
depending on the needs of your

579
00:29:43,290 --> 00:29:46,710
application so that that's also a very

580
00:29:44,820 --> 00:29:48,629
important consideration because just

581
00:29:46,710 --> 00:29:51,150
because it's applied in ingress nginx

582
00:29:48,630 --> 00:29:53,300
doesn't mean that that certain things

583
00:29:51,150 --> 00:30:00,480
are applied automatically to the kernel

584
00:29:53,300 --> 00:30:02,430
and you can just show real quick there's

585
00:30:00,480 --> 00:30:04,770
just a variety of so many different

586
00:30:02,430 --> 00:30:08,670
annotations for configuring cookie rules

587
00:30:04,770 --> 00:30:10,150
and and cores ages and you know all

588
00:30:08,670 --> 00:30:13,180
kinds of different

589
00:30:10,150 --> 00:30:16,660
so I would encourage you to kind of go

590
00:30:13,180 --> 00:30:18,640
go ahead and look at the documentation

591
00:30:16,660 --> 00:30:21,010
for an ingress enginex

592
00:30:18,640 --> 00:30:23,890
just to see what you can tune and then

593
00:30:21,010 --> 00:30:27,070
even aside from that you can you can

594
00:30:23,890 --> 00:30:28,480
using the server snippets and location

595
00:30:27,070 --> 00:30:31,899
snippets you can tune pretty much

596
00:30:28,480 --> 00:30:33,310
anything that you can find within nginx

597
00:30:31,900 --> 00:30:36,370
so you can add your own custom

598
00:30:33,310 --> 00:30:45,700
directives and and and it's highly

599
00:30:36,370 --> 00:30:47,290
configurable and highly tuneable okay

600
00:30:45,700 --> 00:30:50,710
and then what happens if things go wrong

601
00:30:47,290 --> 00:30:53,280
you know how do i how do I verify you

602
00:30:50,710 --> 00:30:58,780
know what what's essentially going wrong

603
00:30:53,280 --> 00:31:02,410
so to do that what you can do is you can

604
00:30:58,780 --> 00:31:10,270
exec so first of all let's get ODS

605
00:31:02,410 --> 00:31:12,160
session and so the ingress scan so I

606
00:31:10,270 --> 00:31:14,800
have the ingress controller running on a

607
00:31:12,160 --> 00:31:25,050
private namespace that I have and what

608
00:31:14,800 --> 00:31:25,050
I'm going to do is I'm going to exec

609
00:31:26,720 --> 00:31:31,040
okay into this

610
00:31:39,790 --> 00:31:46,659
so I'm going to go into this into the

611
00:31:43,420 --> 00:32:01,420
container and what I'm going to do is

612
00:31:46,660 --> 00:32:05,020
now I can go into it okay so if in so if

613
00:32:01,420 --> 00:32:07,570
in the nginx folder you have nginx comm

614
00:32:05,020 --> 00:32:09,280
which is the file so pretty essentially

615
00:32:07,570 --> 00:32:11,620
every time that you apply any ingress

616
00:32:09,280 --> 00:32:13,990
rule it just keeps appending different

617
00:32:11,620 --> 00:32:17,409
different rules and different directives

618
00:32:13,990 --> 00:32:20,050
to the nginx comm so what what you can

619
00:32:17,410 --> 00:32:23,410
do to troubleshoot is see first see if

620
00:32:20,050 --> 00:32:26,169
the nginx Kampf was actually updated and

621
00:32:23,410 --> 00:32:28,620
go through it and see what rules exactly

622
00:32:26,170 --> 00:32:31,750
are running so you can see that when I

623
00:32:28,620 --> 00:32:34,030
created me I'll calm you can see the

624
00:32:31,750 --> 00:32:36,280
server name you can see what it's what

625
00:32:34,030 --> 00:32:39,580
port it's listening on you can see what

626
00:32:36,280 --> 00:32:41,379
service it's pointing to you can see you

627
00:32:39,580 --> 00:32:44,980
know what mod security configuration

628
00:32:41,380 --> 00:32:46,660
file it's running on it's applying you

629
00:32:44,980 --> 00:32:48,640
can pretty much see all the information

630
00:32:46,660 --> 00:32:50,650
that you need on that path and how it's

631
00:32:48,640 --> 00:32:52,630
being built so that's a good way of

632
00:32:50,650 --> 00:32:54,820
seeing hey our magnetization being

633
00:32:52,630 --> 00:32:56,740
applied correctly what's going on and

634
00:32:54,820 --> 00:32:57,970
and and taking a look at that so that

635
00:32:56,740 --> 00:33:00,130
would that would essentially so if I

636
00:32:57,970 --> 00:33:02,560
were to make another one called wolf

637
00:33:00,130 --> 00:33:04,450
comm then it would add another server

638
00:33:02,560 --> 00:33:06,280
directive with everything in it so and

639
00:33:04,450 --> 00:33:07,740
then you can go ahead and go through all

640
00:33:06,280 --> 00:33:10,510
these different all these different

641
00:33:07,740 --> 00:33:11,860
directives and you can you know kind of

642
00:33:10,510 --> 00:33:13,690
search through nginx what they're for

643
00:33:11,860 --> 00:33:14,770
and what exactly they're doing and make

644
00:33:13,690 --> 00:33:18,960
sure that everything's been applied

645
00:33:14,770 --> 00:33:21,730
right so that's one way of looking and

646
00:33:18,960 --> 00:33:29,380
then at the same time you can actually

647
00:33:21,730 --> 00:33:34,360
also do keep CTL log logs and then you

648
00:33:29,380 --> 00:33:35,890
can see all the logs that are going out

649
00:33:34,360 --> 00:33:37,689
so I usually do you probably grep out

650
00:33:35,890 --> 00:33:40,570
things that are relevant and you can see

651
00:33:37,690 --> 00:33:43,030
what's going on and and you know every

652
00:33:40,570 --> 00:33:45,720
single request is logged every single

653
00:33:43,030 --> 00:33:47,500
error involving secrets and different

654
00:33:45,720 --> 00:33:49,180
you know different components were

655
00:33:47,500 --> 00:33:52,570
logged so for example the first time

656
00:33:49,180 --> 00:33:53,200
where we had the error where the basic

657
00:33:52,570 --> 00:33:55,809
office don't work

658
00:33:53,200 --> 00:33:58,389
give me a 503 if I would have looked at

659
00:33:55,809 --> 00:34:00,850
the logs right after that you can see

660
00:33:58,389 --> 00:34:03,760
that that the reason that the 503 had

661
00:34:00,850 --> 00:34:05,230
occurred was because it had issues

662
00:34:03,760 --> 00:34:07,720
reading the secret so I didn't actually

663
00:34:05,230 --> 00:34:09,240
apply the the service and so it didn't

664
00:34:07,720 --> 00:34:11,619
actually apply the ingress rule because

665
00:34:09,239 --> 00:34:13,598
the secret didn't exist so I didn't have

666
00:34:11,619 --> 00:34:19,720
anything to actually generate the basic

667
00:34:13,599 --> 00:34:22,240
authentication and then verify that your

668
00:34:19,719 --> 00:34:24,009
deployments are running verify that your

669
00:34:22,239 --> 00:34:26,529
that your backends are actually running

670
00:34:24,010 --> 00:34:31,899
so you can actually SSH into the ingress

671
00:34:26,530 --> 00:34:36,159
controller so how we so you can do keep

672
00:34:31,899 --> 00:34:40,598
CTL get SBC and then oh you can see that

673
00:34:36,159 --> 00:34:42,250
the closer IP is this and then what I

674
00:34:40,599 --> 00:34:45,730
can do is I can executive the ingress

675
00:34:42,250 --> 00:34:47,440
controller and then I can see if I don't

676
00:34:45,730 --> 00:34:50,379
know if curls installed I can see if

677
00:34:47,440 --> 00:34:53,290
it's actually reaching it via my my

678
00:34:50,379 --> 00:34:55,179
cluster IP so then you can see that hey

679
00:34:53,290 --> 00:34:56,560
so as those so ingress and genetics are

680
00:34:55,179 --> 00:34:59,560
actually able to communicate with my

681
00:34:56,560 --> 00:35:01,210
application there must be something else

682
00:34:59,560 --> 00:35:03,160
wrong why I can't communicate through

683
00:35:01,210 --> 00:35:05,470
the outside so then you check your your

684
00:35:03,160 --> 00:35:07,990
actual load balancer and you check the

685
00:35:05,470 --> 00:35:11,560
nodes and check the health of nodes and

686
00:35:07,990 --> 00:35:17,649
different things there's also a thing

687
00:35:11,560 --> 00:35:19,240
called crew and crew gives you a bunch

688
00:35:17,650 --> 00:35:21,160
of debug tools so it's pretty much a

689
00:35:19,240 --> 00:35:24,069
package manager for kubernetes and

690
00:35:21,160 --> 00:35:25,720
there's a lot of debug tools that you

691
00:35:24,069 --> 00:35:27,759
can run that essentially perform the

692
00:35:25,720 --> 00:35:30,549
commands a lot quicker so you can

693
00:35:27,760 --> 00:35:32,890
install the ingress nginx crew plugin

694
00:35:30,550 --> 00:35:36,700
and then all you would do is run ingress

695
00:35:32,890 --> 00:35:38,319
nginx you know lint and it'll go through

696
00:35:36,700 --> 00:35:40,480
all your deployments all your services

697
00:35:38,319 --> 00:35:42,130
everything and it will go ahead and give

698
00:35:40,480 --> 00:35:45,690
you like you know statistics of the

699
00:35:42,130 --> 00:35:45,690
health of all those of all those items

700
00:35:49,849 --> 00:35:56,119
and then last last thing would be so

701
00:35:54,499 --> 00:35:57,558
I've secured my ingress I know

702
00:35:56,119 --> 00:36:00,709
everything about ingress and all that

703
00:35:57,559 --> 00:36:03,949
what do I do one thing you would want to

704
00:36:00,709 --> 00:36:06,529
do is probably go ahead and secure your

705
00:36:03,949 --> 00:36:08,569
application you know ahead of time

706
00:36:06,529 --> 00:36:10,670
before actually deploying so one thing

707
00:36:08,569 --> 00:36:12,019
one thing I would recommend is like

708
00:36:10,670 --> 00:36:13,749
ingress is not going to be your only

709
00:36:12,019 --> 00:36:17,089
secure point your actual application

710
00:36:13,749 --> 00:36:18,738
should be secure beforehand so so

711
00:36:17,089 --> 00:36:21,109
there's a lot of different tools that

712
00:36:18,739 --> 00:36:23,959
you can do to do that you can do some

713
00:36:21,109 --> 00:36:26,269
static you know testing of your

714
00:36:23,959 --> 00:36:27,759
application check the static code you

715
00:36:26,269 --> 00:36:30,529
can see if you have any expose secrets

716
00:36:27,759 --> 00:36:32,449
or anything that's been updated or

717
00:36:30,529 --> 00:36:35,299
insecure and and make sure you always

718
00:36:32,449 --> 00:36:36,349
scan your your container images you know

719
00:36:35,299 --> 00:36:38,390
there's there's a lot of container

720
00:36:36,349 --> 00:36:40,579
images out there that are prone to

721
00:36:38,390 --> 00:36:45,578
Bitcoin mining and different things I've

722
00:36:40,579 --> 00:36:48,529
heard a lot of that so so yeah with that

723
00:36:45,579 --> 00:36:50,930
Jeff just any questions anyone has and I

724
00:36:48,529 --> 00:36:53,390
have some stickers and stuff so I'll go

725
00:36:50,930 --> 00:36:59,649
ahead and pass those out yeah pretty

726
00:36:53,390 --> 00:36:59,650
much thank you

727
00:37:00,970 --> 00:37:03,029
you

728
00:37:09,270 --> 00:37:11,330
you

