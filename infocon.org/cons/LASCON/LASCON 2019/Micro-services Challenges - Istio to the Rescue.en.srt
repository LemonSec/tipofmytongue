1
00:00:11,940 --> 00:00:32,278
[Music]

2
00:00:34,210 --> 00:00:41,269
thanks everybody attending I know gasps

3
00:00:37,160 --> 00:00:43,339
competition with lunch right now so so

4
00:00:41,269 --> 00:00:46,129
my name is Benoit femme Shaw and this is

5
00:00:43,340 --> 00:00:48,379
my colleague Ron enjoy our first

6
00:00:46,129 --> 00:00:52,210
presenter or nijem is traveling and

7
00:00:48,379 --> 00:00:54,739
could not be here so we are working on

8
00:00:52,210 --> 00:00:57,320
identity access management and

9
00:00:54,739 --> 00:01:00,559
authentication in the cloud Protection

10
00:00:57,320 --> 00:01:05,299
Division of Gemalto telesales company

11
00:01:00,559 --> 00:01:09,490
and over the years we've been migrating

12
00:01:05,299 --> 00:01:13,130
our application and working from like

13
00:01:09,490 --> 00:01:16,610
legacy big monolithic application into

14
00:01:13,130 --> 00:01:19,039
micro service using agile methodologies

15
00:01:16,610 --> 00:01:22,369
and then transitioning our teams to

16
00:01:19,040 --> 00:01:24,590
DevOps and dev cycles and as part of is

17
00:01:22,369 --> 00:01:27,710
continues transformation and evolution

18
00:01:24,590 --> 00:01:31,369
we are always looking at ways to ease

19
00:01:27,710 --> 00:01:34,610
our deployment and to simplify lives of

20
00:01:31,369 --> 00:01:38,330
developers operations and DevOps and

21
00:01:34,610 --> 00:01:42,260
Desa cops so in this talk we are going

22
00:01:38,330 --> 00:01:44,810
to talk about what not we're gonna

23
00:01:42,260 --> 00:01:47,150
present some of changes brought by micro

24
00:01:44,810 --> 00:01:51,049
Theory season and our awesome solution

25
00:01:47,150 --> 00:01:53,420
like SEO can help address whose so the

26
00:01:51,049 --> 00:01:56,930
objective during the talk is to present

27
00:01:53,420 --> 00:02:00,830
some specific use cases in order to

28
00:01:56,930 --> 00:02:02,450
address those challenges and see how we

29
00:02:00,830 --> 00:02:07,250
can resolve them with solution like I

30
00:02:02,450 --> 00:02:10,098
kissed you so first let's do a quick

31
00:02:07,250 --> 00:02:12,830
look at the agenda so we'll cover some

32
00:02:10,098 --> 00:02:16,518
of micro services or challenges and dig

33
00:02:12,830 --> 00:02:18,739
into some specific use cases and then

34
00:02:16,519 --> 00:02:23,090
we'll do a quick introduction of what

35
00:02:18,739 --> 00:02:25,909
SEO is some of its architecture and look

36
00:02:23,090 --> 00:02:27,590
at three specific areas that we'll be

37
00:02:25,909 --> 00:02:30,019
matching some of the challenges of micro

38
00:02:27,590 --> 00:02:33,140
services so the traffic management is

39
00:02:30,019 --> 00:02:35,560
one of them security and policies is a

40
00:02:33,140 --> 00:02:38,029
second one and the third one is

41
00:02:35,560 --> 00:02:39,709
observability trauma tree and we'll get

42
00:02:38,030 --> 00:02:41,930
into more detail of each of this area

43
00:02:39,709 --> 00:02:45,069
and along the way we'll have some cool

44
00:02:41,930 --> 00:02:45,069
demos to show you guys

45
00:02:47,739 --> 00:02:52,819
micro-service are great everybody loves

46
00:02:50,209 --> 00:02:55,370
micro-service right we have allow us to

47
00:02:52,819 --> 00:02:59,599
break a big monolithic application into

48
00:02:55,370 --> 00:03:04,579
small dedicated functional pcs we have

49
00:02:59,599 --> 00:03:07,129
hours to get some better scalability now

50
00:03:04,579 --> 00:03:10,069
no that's nice we are these five little

51
00:03:07,129 --> 00:03:13,280
micro services we may have a couple of

52
00:03:10,069 --> 00:03:15,530
programming language used for who's it's

53
00:03:13,280 --> 00:03:17,629
manageable it's it's pretty cool but

54
00:03:15,530 --> 00:03:21,349
then other application gets more

55
00:03:17,629 --> 00:03:23,959
complicated and more complex so does our

56
00:03:21,349 --> 00:03:29,328
say micro services also and we can

57
00:03:23,959 --> 00:03:33,109
become a real mess or mesh as we move

58
00:03:29,329 --> 00:03:36,409
into basically management of more

59
00:03:33,109 --> 00:03:40,040
complex application or infrastructure

60
00:03:36,409 --> 00:03:42,469
then we run into some issues like now I

61
00:03:40,040 --> 00:03:45,349
don't have any more just one language

62
00:03:42,469 --> 00:03:48,019
I'm using maybe some not amazing some

63
00:03:45,349 --> 00:03:50,750
Java some dotnet depending on which

64
00:03:48,019 --> 00:03:54,470
technology or features I'm going to use

65
00:03:50,750 --> 00:03:56,829
in my application and I have to deploy

66
00:03:54,470 --> 00:03:59,299
my secret in all those different

67
00:03:56,829 --> 00:04:03,199
components so imagine I have to deploy

68
00:03:59,299 --> 00:04:05,829
my certificates very very aware I have

69
00:04:03,199 --> 00:04:08,540
to implement in each of MIS microservice

70
00:04:05,829 --> 00:04:12,590
maybe some functionality for my

71
00:04:08,540 --> 00:04:16,250
underlying logging monitoring's and and

72
00:04:12,590 --> 00:04:18,590
you name it so quite some some changes

73
00:04:16,250 --> 00:04:20,750
so now my colleague Ronnie is going to

74
00:04:18,589 --> 00:04:23,869
go into more detail about some of the

75
00:04:20,750 --> 00:04:31,849
certain challenges and some specific use

76
00:04:23,870 --> 00:04:34,699
cases focus okay so yes as well benoit

77
00:04:31,849 --> 00:04:36,860
mentioned micro services are great but

78
00:04:34,699 --> 00:04:39,590
many when you have lot of micro services

79
00:04:36,860 --> 00:04:43,759
it needs to communicate each other to

80
00:04:39,590 --> 00:04:45,799
solve your particular business need

81
00:04:43,759 --> 00:04:49,729
it comes with lot of challenges let's

82
00:04:45,800 --> 00:04:50,570
look at some of them and then we'll deep

83
00:04:49,729 --> 00:04:54,320
dive into our

84
00:04:50,570 --> 00:04:56,659
hto how each tier can help in in these

85
00:04:54,320 --> 00:04:58,070
situations so how do you manage your

86
00:04:56,659 --> 00:04:59,810
time out so marriage

87
00:04:58,070 --> 00:05:03,860
communication between this micro service

88
00:04:59,810 --> 00:05:06,830
is Israeli challenging also you know how

89
00:05:03,860 --> 00:05:08,690
do you make sure that you have a timeout

90
00:05:06,830 --> 00:05:11,770
in place you have three try mechanism in

91
00:05:08,690 --> 00:05:13,310
place when you talk to a pea ice or

92
00:05:11,770 --> 00:05:15,320
load-balancing or sort of key to

93
00:05:13,310 --> 00:05:18,080
breaking let's say that you want you

94
00:05:15,320 --> 00:05:19,790
have a unhealthy instance and you don't

95
00:05:18,080 --> 00:05:21,859
know you don't want to forward request

96
00:05:19,790 --> 00:05:25,280
to that unhealthy instance you want to

97
00:05:21,860 --> 00:05:29,120
break the circuit so in those cases hto

98
00:05:25,280 --> 00:05:31,250
can help us also the communication

99
00:05:29,120 --> 00:05:34,370
security so how do you secure your

100
00:05:31,250 --> 00:05:36,620
communication like for example if you

101
00:05:34,370 --> 00:05:38,150
want to share some sensitive information

102
00:05:36,620 --> 00:05:41,500
between microservices

103
00:05:38,150 --> 00:05:47,750
you probably need encryption transport

104
00:05:41,500 --> 00:05:50,870
TLS encryption also zero downtime

105
00:05:47,750 --> 00:05:54,170
deployments so how do you manage zero

106
00:05:50,870 --> 00:05:56,060
downtime deployment monitor

107
00:05:54,170 --> 00:05:59,390
communication logging collecting metrics

108
00:05:56,060 --> 00:06:03,500
from your service tracing all these

109
00:05:59,390 --> 00:06:06,770
areas is is challenging in micro service

110
00:06:03,500 --> 00:06:09,110
edit field so all these leads to code

111
00:06:06,770 --> 00:06:11,180
duplication so you may have to put in

112
00:06:09,110 --> 00:06:14,240
your application layer application code

113
00:06:11,180 --> 00:06:18,460
you have to add logic or you have to add

114
00:06:14,240 --> 00:06:21,560
code to overcome these challenges so

115
00:06:18,460 --> 00:06:24,710
let's look at quickly what this is do

116
00:06:21,560 --> 00:06:27,290
and how each tier can help with all

117
00:06:24,710 --> 00:06:29,659
these challenges so each tier is open

118
00:06:27,290 --> 00:06:33,230
source it's developed from teams from

119
00:06:29,660 --> 00:06:36,290
Google and IBM with the help of lift

120
00:06:33,230 --> 00:06:38,270
team who developed the Android proxy so

121
00:06:36,290 --> 00:06:42,550
my proxies the high performance proxy

122
00:06:38,270 --> 00:06:44,599
which is used in each tier that's and

123
00:06:42,550 --> 00:06:47,540
it's platform-independent

124
00:06:44,600 --> 00:06:49,430
so what that means is that it's designed

125
00:06:47,540 --> 00:06:51,830
to be platform independent so it can

126
00:06:49,430 --> 00:06:54,500
support multiple or container

127
00:06:51,830 --> 00:06:56,419
orchestration platforms so small as of

128
00:06:54,500 --> 00:06:58,940
one point three of history or release it

129
00:06:56,420 --> 00:07:01,330
supports kubernetes

130
00:06:58,940 --> 00:07:06,260
it support console it support no med

131
00:07:01,330 --> 00:07:08,659
container orchestration platforms and

132
00:07:06,260 --> 00:07:11,119
it's essentially a service mesh it does

133
00:07:08,660 --> 00:07:14,020
all the things what service Enosh doing

134
00:07:11,119 --> 00:07:16,969
manages your communication it

135
00:07:14,020 --> 00:07:19,789
load-balancing a service discovery all

136
00:07:16,969 --> 00:07:22,699
those things on top of that it provides

137
00:07:19,789 --> 00:07:26,300
fine-grained traffic management where it

138
00:07:22,699 --> 00:07:28,490
can base with a configuration you don't

139
00:07:26,300 --> 00:07:31,429
have to write any code in your in your

140
00:07:28,490 --> 00:07:33,349
application layer you you can manage

141
00:07:31,429 --> 00:07:36,739
that with your with the amel

142
00:07:33,349 --> 00:07:39,770
configurations security and policy

143
00:07:36,740 --> 00:07:44,029
enforcement this is another area it can

144
00:07:39,770 --> 00:07:46,669
help with with the configuration again

145
00:07:44,029 --> 00:07:48,800
you don't have to put code in your lodge

146
00:07:46,669 --> 00:07:50,508
in your application layer so with the

147
00:07:48,800 --> 00:07:53,689
with the simple configuration you can

148
00:07:50,509 --> 00:07:56,319
enable TLS you can have into user

149
00:07:53,689 --> 00:07:58,550
authentication things like that

150
00:07:56,319 --> 00:08:02,149
telemetry collections it can collect

151
00:07:58,550 --> 00:08:06,740
metrics from each of the services it can

152
00:08:02,149 --> 00:08:13,719
also help help you with distributed

153
00:08:06,740 --> 00:08:13,719
I mean tracing and application logging

154
00:08:18,669 --> 00:08:23,479
okay so now we are going to look at the

155
00:08:21,469 --> 00:08:26,779
eye level architecture and logical

156
00:08:23,479 --> 00:08:31,068
components of east your part so is joy

157
00:08:26,779 --> 00:08:33,679
composed of two main area one is were on

158
00:08:31,069 --> 00:08:36,250
the top part the data plane which has

159
00:08:33,679 --> 00:08:39,468
proxies and the mixer and basically

160
00:08:36,250 --> 00:08:41,958
we'll get into the detail of this miss

161
00:08:39,469 --> 00:08:45,139
element but that's a core part of SEO

162
00:08:41,958 --> 00:08:47,899
and then we have a control plane at the

163
00:08:45,139 --> 00:08:50,829
top bottom part is basically where all

164
00:08:47,899 --> 00:08:55,160
the configuration gets define an

165
00:08:50,829 --> 00:08:58,130
interaction with security components so

166
00:08:55,160 --> 00:09:00,829
let's look at the data plane first so in

167
00:08:58,130 --> 00:09:03,410
your traditional theory season you will

168
00:09:00,829 --> 00:09:05,029
in traditional let's say deployment or

169
00:09:03,410 --> 00:09:09,079
infrastructure you have Siri start

170
00:09:05,029 --> 00:09:11,060
talking to to each other directly in the

171
00:09:09,079 --> 00:09:14,209
case of visco it's a little it's a

172
00:09:11,060 --> 00:09:16,638
little different so you may wonder what

173
00:09:14,209 --> 00:09:18,109
why this picture so I was told I have to

174
00:09:16,639 --> 00:09:20,180
put some picture at the entire cat

175
00:09:18,110 --> 00:09:21,290
picture so I put this one so let me

176
00:09:20,180 --> 00:09:22,949
explain a little about that

177
00:09:21,290 --> 00:09:26,430
so the

178
00:09:22,950 --> 00:09:28,830
this is like a bike with next to it

179
00:09:26,430 --> 00:09:30,839
there's a little platform is called a

180
00:09:28,830 --> 00:09:35,160
sidecar so that's a very important

181
00:09:30,840 --> 00:09:37,680
concept for for Easter and this one is a

182
00:09:35,160 --> 00:09:39,959
high-performance sidecar which really

183
00:09:37,680 --> 00:09:43,650
relates twister with a very small

184
00:09:39,960 --> 00:09:46,410
platform East so in Easter you have a

185
00:09:43,650 --> 00:09:47,810
same concept of sidecar so for each of

186
00:09:46,410 --> 00:09:51,660
your services

187
00:09:47,810 --> 00:09:55,229
longer it is deployed a proxy which is

188
00:09:51,660 --> 00:09:58,230
Versailles car it's a small footprint

189
00:09:55,230 --> 00:10:01,020
component that is basically going to

190
00:09:58,230 --> 00:10:04,110
manage all the traffic coming in and out

191
00:10:01,020 --> 00:10:05,640
of your service and your service now are

192
00:10:04,110 --> 00:10:07,620
not going to communicate directly to

193
00:10:05,640 --> 00:10:11,640
each other we will connect to each other

194
00:10:07,620 --> 00:10:14,190
through the proxy server proxy is a

195
00:10:11,640 --> 00:10:18,290
high-performance distributed component

196
00:10:14,190 --> 00:10:21,410
for each job it is called and volume and

197
00:10:18,290 --> 00:10:24,780
it has some advanced load balancing

198
00:10:21,410 --> 00:10:27,300
features as well as capability to be

199
00:10:24,780 --> 00:10:33,060
dynamically configurable through APs and

200
00:10:27,300 --> 00:10:36,030
hot really and this component is going

201
00:10:33,060 --> 00:10:38,670
to be basically and forcing the

202
00:10:36,030 --> 00:10:44,400
communication and also collecting data

203
00:10:38,670 --> 00:10:48,079
so all you communication between

204
00:10:44,400 --> 00:10:51,150
services on the proxy is able to gather

205
00:10:48,080 --> 00:10:53,280
basically data from the request as well

206
00:10:51,150 --> 00:10:55,439
as the environment of a request in order

207
00:10:53,280 --> 00:10:57,750
to collect them and to send them to

208
00:10:55,440 --> 00:11:00,750
another component which is called the

209
00:10:57,750 --> 00:11:03,050
mixer service this component is a

210
00:11:00,750 --> 00:11:06,180
component that is gathering all the data

211
00:11:03,050 --> 00:11:10,439
from the proxy and is also a component

212
00:11:06,180 --> 00:11:13,560
that can enforce policies so as kind of

213
00:11:10,440 --> 00:11:16,170
a level of data plane so it's important

214
00:11:13,560 --> 00:11:18,390
there is basically that we have a proxy

215
00:11:16,170 --> 00:11:22,170
that enabled the issue of functionality

216
00:11:18,390 --> 00:11:25,620
and the very important point also there

217
00:11:22,170 --> 00:11:28,469
is that this proxy allowed to deploy SEO

218
00:11:25,620 --> 00:11:31,610
without having you to modify your

219
00:11:28,470 --> 00:11:31,610
application code

220
00:11:34,490 --> 00:11:40,319
the second part of a second area is the

221
00:11:38,160 --> 00:11:43,199
control plane so we count up rain as

222
00:11:40,319 --> 00:11:46,199
three main components will go quickly

223
00:11:43,199 --> 00:11:49,050
proven so the pilot copilot which is

224
00:11:46,199 --> 00:11:51,779
basically a traffic management component

225
00:11:49,050 --> 00:11:55,649
it's in charge of a service discovery

226
00:11:51,779 --> 00:11:58,829
and also the routing and control of a

227
00:11:55,649 --> 00:12:01,009
traffic then we have a galley which is

228
00:11:58,829 --> 00:12:04,138
basically taking care of configuration

229
00:12:01,009 --> 00:12:07,290
management and abstracting the user

230
00:12:04,139 --> 00:12:09,600
configuration underneath and the Citadel

231
00:12:07,290 --> 00:12:12,360
which is a key and certificate

232
00:12:09,600 --> 00:12:14,759
management component and it's also a

233
00:12:12,360 --> 00:12:20,220
component that enable the service to

234
00:12:14,759 --> 00:12:21,959
service and user authentication part so

235
00:12:20,220 --> 00:12:25,769
that cannot give you a quick idea of

236
00:12:21,959 --> 00:12:28,888
what the issue I level architecture is

237
00:12:25,769 --> 00:12:33,540
now what we are going to go do is look

238
00:12:28,889 --> 00:12:36,029
at three specific area so and for this

239
00:12:33,540 --> 00:12:38,819
first specific area we are going to see

240
00:12:36,029 --> 00:12:40,889
with some demos are we can address some

241
00:12:38,819 --> 00:12:44,069
of the pain points and some of the

242
00:12:40,889 --> 00:12:46,610
issues from the deployment of micro

243
00:12:44,069 --> 00:12:46,610
services

244
00:12:53,670 --> 00:12:58,329
so is to use the first point we are

245
00:12:57,340 --> 00:13:00,850
going to talk about the traffic

246
00:12:58,330 --> 00:13:03,430
management so it lets you control

247
00:13:00,850 --> 00:13:06,730
traffic between your API between your

248
00:13:03,430 --> 00:13:10,660
services each team can control the

249
00:13:06,730 --> 00:13:14,650
timeouts for an API or retry circuit

250
00:13:10,660 --> 00:13:17,230
breakers with a simple configuration and

251
00:13:14,650 --> 00:13:18,910
it can also help you with staged

252
00:13:17,230 --> 00:13:22,330
rollouts like personal space traffic

253
00:13:18,910 --> 00:13:23,829
split so for example if you want to you

254
00:13:22,330 --> 00:13:26,140
know if you want to deploy a new version

255
00:13:23,830 --> 00:13:28,780
of your micro service you initially

256
00:13:26,140 --> 00:13:29,890
divert some traffic to it and see how it

257
00:13:28,780 --> 00:13:33,100
performing in a production environment

258
00:13:29,890 --> 00:13:35,080
and then once you're comfortable you you

259
00:13:33,100 --> 00:13:37,750
change the whole traffic to that new

260
00:13:35,080 --> 00:13:39,910
micro service portion so that's a staged

261
00:13:37,750 --> 00:13:42,120
rollout so if Steve can help you with

262
00:13:39,910 --> 00:13:44,890
that with simple configurations and

263
00:13:42,120 --> 00:13:46,480
candidate rollouts so we will see in

264
00:13:44,890 --> 00:13:48,850
much detail we have a demo for this

265
00:13:46,480 --> 00:13:50,530
candidate all out we'll see what is

266
00:13:48,850 --> 00:13:54,580
candidate all-out also in the next few

267
00:13:50,530 --> 00:13:56,350
slides so we have okay so this is our

268
00:13:54,580 --> 00:13:58,630
demo so let's see what is can of a

269
00:13:56,350 --> 00:14:00,630
deployment so let's say that you have

270
00:13:58,630 --> 00:14:04,839
enough you have two microservice in your

271
00:14:00,630 --> 00:14:07,150
production environment a and B B has a

272
00:14:04,839 --> 00:14:09,580
version one so let's assume that you

273
00:14:07,150 --> 00:14:11,949
have a new version of B version two

274
00:14:09,580 --> 00:14:14,650
which you want to deploy in production

275
00:14:11,950 --> 00:14:16,480
you tested this version a two in all

276
00:14:14,650 --> 00:14:18,430
your environments where every possibly

277
00:14:16,480 --> 00:14:21,210
you can test it but you still want to

278
00:14:18,430 --> 00:14:24,489
make sure that it works in production

279
00:14:21,210 --> 00:14:26,320
without any trouble so so what you do at

280
00:14:24,490 --> 00:14:28,990
the beginning is that you die what some

281
00:14:26,320 --> 00:14:31,810
traffic to it to the version two that

282
00:14:28,990 --> 00:14:33,670
traffic is only like test traffic so if

283
00:14:31,810 --> 00:14:35,920
you were if your organization tests

284
00:14:33,670 --> 00:14:38,110
people log in it goes to the version two

285
00:14:35,920 --> 00:14:40,360
otherwise it all the other users will

286
00:14:38,110 --> 00:14:42,580
still using in all the other production

287
00:14:40,360 --> 00:14:44,980
users still using the original version

288
00:14:42,580 --> 00:14:47,260
one and once you're comfortable you

289
00:14:44,980 --> 00:14:50,410
switch the whole traffic to version 2

290
00:14:47,260 --> 00:14:54,220
and that's excited that's what cannery

291
00:14:50,410 --> 00:14:57,310
deployment we can see we could see a

292
00:14:54,220 --> 00:15:01,000
demo very quickly so in this demo we

293
00:14:57,310 --> 00:15:03,520
have three so this demo we have taken

294
00:15:01,000 --> 00:15:06,850
from east you you know nothing we have

295
00:15:03,520 --> 00:15:09,759
built it's it's all from history

296
00:15:06,850 --> 00:15:10,629
so in this particular demo we have three

297
00:15:09,759 --> 00:15:15,160
micro-services

298
00:15:10,629 --> 00:15:17,049
the one is product page which is written

299
00:15:15,160 --> 00:15:19,809
in Python and then the review space

300
00:15:17,049 --> 00:15:22,660
which is written in Java and then there

301
00:15:19,809 --> 00:15:25,839
is a details details micro-service which

302
00:15:22,660 --> 00:15:27,689
is written in ruby so these two three

303
00:15:25,839 --> 00:15:31,299
microservices

304
00:15:27,689 --> 00:15:34,719
actually together shows a in a book in

305
00:15:31,299 --> 00:15:37,089
for application where it shows book

306
00:15:34,720 --> 00:15:41,319
information and details and the reviews

307
00:15:37,089 --> 00:15:42,850
for that particular book okay so what we

308
00:15:41,319 --> 00:15:45,339
are going to do is that we have a new

309
00:15:42,850 --> 00:15:48,429
version of review service which is

310
00:15:45,339 --> 00:15:50,079
version 2 which also utilized the rating

311
00:15:48,429 --> 00:15:52,478
service and our user can rate a

312
00:15:50,079 --> 00:15:54,899
particular book they can also review as

313
00:15:52,479 --> 00:15:57,910
well as rate so that's the new version

314
00:15:54,899 --> 00:15:59,889
so initially you as we discussed before

315
00:15:57,910 --> 00:16:03,969
we are going to flow only the test

316
00:15:59,889 --> 00:16:06,789
traffic to review service version 2 and

317
00:16:03,970 --> 00:16:09,129
once we are comfortable we switch all

318
00:16:06,789 --> 00:16:16,919
the traffic to version 2 and then

319
00:16:09,129 --> 00:16:20,379
version 1 is out of the picture ok so

320
00:16:16,919 --> 00:16:23,889
let's see the demo so I'll try to

321
00:16:20,379 --> 00:16:26,829
explain so I have created scripts to

322
00:16:23,889 --> 00:16:29,709
make the demo easier so I'll try to

323
00:16:26,829 --> 00:16:32,949
explain us as we go analytics explain

324
00:16:29,709 --> 00:16:35,228
what that script contains ok so my first

325
00:16:32,949 --> 00:16:37,839
script is I'm going to create this

326
00:16:35,229 --> 00:16:45,369
application in our in my Cuban latest

327
00:16:37,839 --> 00:16:47,889
cluster so so this will create the 3

328
00:16:45,369 --> 00:16:55,569
micro services which we need so at this

329
00:16:47,889 --> 00:16:58,839
point if I go back and see now you can

330
00:16:55,569 --> 00:17:02,488
see the now you can see the book info

331
00:16:58,839 --> 00:17:05,589
application here the book details shows

332
00:17:02,489 --> 00:17:08,110
what is that book and then there is

333
00:17:05,589 --> 00:17:10,418
review details so this is the very

334
00:17:08,109 --> 00:17:12,878
simple application now if you try to log

335
00:17:10,419 --> 00:17:16,839
in I have two different users so let's

336
00:17:12,878 --> 00:17:20,099
say that a normal user Jason he locks in

337
00:17:16,839 --> 00:17:25,428
he sees say he still see the same

338
00:17:20,099 --> 00:17:30,959
reviews you know and I have a test user

339
00:17:25,429 --> 00:17:33,299
just who so he see you see the same

340
00:17:30,960 --> 00:17:36,540
review so at this book reviews you can

341
00:17:33,299 --> 00:17:38,580
see only reviews there is no rating okay

342
00:17:36,540 --> 00:17:49,860
so what we're going to do is that we are

343
00:17:38,580 --> 00:17:51,389
going to deploy our new so at this point

344
00:17:49,860 --> 00:17:55,199
we're going to deploy the version two of

345
00:17:51,390 --> 00:17:55,679
the application and only test user can't

346
00:17:55,200 --> 00:18:02,130
see it

347
00:17:55,679 --> 00:18:03,799
so let's go back here I'm gonna sign out

348
00:18:02,130 --> 00:18:07,440
from here

349
00:18:03,799 --> 00:18:09,210
okay so this is a normal you know I'm

350
00:18:07,440 --> 00:18:11,340
some someone comes to this page without

351
00:18:09,210 --> 00:18:15,960
any user information they just he just

352
00:18:11,340 --> 00:18:22,260
see the same old review service let's

353
00:18:15,960 --> 00:18:23,910
say that I sign in as test user so when

354
00:18:22,260 --> 00:18:25,740
I sign in as a test you story you can

355
00:18:23,910 --> 00:18:28,830
see that along with the reviews I can

356
00:18:25,740 --> 00:18:31,380
see the ratings as well so that means

357
00:18:28,830 --> 00:18:34,230
that this traffic this test traffic is

358
00:18:31,380 --> 00:18:37,049
actually devoted to the version two of

359
00:18:34,230 --> 00:18:45,630
the review service so let's sign out and

360
00:18:37,049 --> 00:18:47,850
log in as Jason a normal user he still

361
00:18:45,630 --> 00:18:50,010
see the version one so what this means

362
00:18:47,850 --> 00:18:51,389
is that it's only available the version

363
00:18:50,010 --> 00:18:54,120
two is there in production it's only

364
00:18:51,390 --> 00:18:55,790
available to our test users and they can

365
00:18:54,120 --> 00:18:59,969
comfortably test it and make sure that

366
00:18:55,790 --> 00:19:02,250
everything works and finally let's say

367
00:18:59,970 --> 00:19:06,870
that they approve it finally we can

368
00:19:02,250 --> 00:19:09,450
search all the traffic to the version

369
00:19:06,870 --> 00:19:12,600
two so this in this rule I'm saying that

370
00:19:09,450 --> 00:19:17,100
okay now such every traffic to use the

371
00:19:12,600 --> 00:19:20,760
version two so if i refresh this page

372
00:19:17,100 --> 00:19:22,799
again I can see that as a normal user I

373
00:19:20,760 --> 00:19:25,679
mean anybody comes to this page I can

374
00:19:22,799 --> 00:19:28,290
see the review service version two which

375
00:19:25,679 --> 00:19:33,620
improves the rating service okay if I

376
00:19:28,290 --> 00:19:33,620
sign in Jason I still see the same thing

377
00:19:33,690 --> 00:19:39,050
okay if I sign in test user just to show

378
00:19:41,780 --> 00:19:47,910
ya so this is the demo for Kennedy

379
00:19:46,080 --> 00:19:51,419
downloads Benoit is going to explain

380
00:19:47,910 --> 00:19:55,860
what we did the configurations to

381
00:19:51,420 --> 00:19:58,320
achieve this thanksfully so basically

382
00:19:55,860 --> 00:20:02,550
now let's look a little bit at what has

383
00:19:58,320 --> 00:20:05,429
happened underneath so during Visa Visa

384
00:20:02,550 --> 00:20:08,310
Visa demo what we show is our we can

385
00:20:05,430 --> 00:20:10,500
deploy a new version in production while

386
00:20:08,310 --> 00:20:13,740
being able to test it without disrupting

387
00:20:10,500 --> 00:20:14,850
the current production traffic and then

388
00:20:13,740 --> 00:20:17,070
once we are comfortable with the

389
00:20:14,850 --> 00:20:22,169
application basically to change to

390
00:20:17,070 --> 00:20:24,840
change that so then in the initial setup

391
00:20:22,170 --> 00:20:27,630
we had all the traffic for a review

392
00:20:24,840 --> 00:20:32,610
service that was directing and directed

393
00:20:27,630 --> 00:20:36,510
sorry to version 1 once we introduce a

394
00:20:32,610 --> 00:20:39,439
version 2 so what we did is we added a

395
00:20:36,510 --> 00:20:42,240
specific rules in order to direct

396
00:20:39,440 --> 00:20:45,660
specific traffic in our case it was

397
00:20:42,240 --> 00:20:48,120
traffic for end user of test that would

398
00:20:45,660 --> 00:20:50,160
be directly to review version to the

399
00:20:48,120 --> 00:20:52,679
rest of the traffic remaining unchanged

400
00:20:50,160 --> 00:20:55,620
and all the default traffic going to the

401
00:20:52,680 --> 00:20:59,220
version 1 once we had tested that so

402
00:20:55,620 --> 00:21:01,110
that that rules gets away and we just go

403
00:20:59,220 --> 00:21:03,570
directly to version 2 and change that to

404
00:21:01,110 --> 00:21:06,540
version 2 so that's kind of a little

405
00:21:03,570 --> 00:21:11,850
quick view of what possibility we have

406
00:21:06,540 --> 00:21:15,300
there now another interesting set of

407
00:21:11,850 --> 00:21:19,199
configuration is in your overall system

408
00:21:15,300 --> 00:21:20,970
how can you manage globally some of all

409
00:21:19,200 --> 00:21:25,560
small things that can happen so for

410
00:21:20,970 --> 00:21:27,630
example you can have some turnout or

411
00:21:25,560 --> 00:21:29,760
some delays because some services are

412
00:21:27,630 --> 00:21:32,130
taking too much time to process some of

413
00:21:29,760 --> 00:21:34,620
your data or overloaded so you can

414
00:21:32,130 --> 00:21:38,670
define globally in your infrastructure

415
00:21:34,620 --> 00:21:40,520
or add specific sets of services some

416
00:21:38,670 --> 00:21:44,370
time out thanks to a proxy

417
00:21:40,520 --> 00:21:45,970
configurability also you can define the

418
00:21:44,370 --> 00:21:48,008
Armenia retry so let's say

419
00:21:45,970 --> 00:21:51,700
you application is gonna call an API

420
00:21:48,009 --> 00:21:53,710
first time maybe gets failure to controi

421
00:21:51,700 --> 00:21:55,929
try once twice at which point we decide

422
00:21:53,710 --> 00:21:59,200
that this is a complete failure so you

423
00:21:55,929 --> 00:22:01,750
can also get that managed by proxy so

424
00:21:59,200 --> 00:22:03,100
you your application logic doesn't have

425
00:22:01,750 --> 00:22:05,230
to be modified you don't have to

426
00:22:03,100 --> 00:22:08,889
implement that in each of your service

427
00:22:05,230 --> 00:22:11,889
in all the various language the third

428
00:22:08,889 --> 00:22:14,590
part as it's basically circuit breaker

429
00:22:11,889 --> 00:22:16,059
or max number of connections so in some

430
00:22:14,590 --> 00:22:18,820
of the talks earlier where are some

431
00:22:16,059 --> 00:22:21,129
description on that and some mention so

432
00:22:18,820 --> 00:22:23,559
if you want to let's say protect some of

433
00:22:21,129 --> 00:22:26,529
your application or your application or

434
00:22:23,559 --> 00:22:28,658
services can only handle maybe a certain

435
00:22:26,529 --> 00:22:31,029
load that basically the things you want

436
00:22:28,659 --> 00:22:32,620
to do to say okay I can only accept 10

437
00:22:31,029 --> 00:22:34,409
concurrent connection and then after

438
00:22:32,620 --> 00:22:36,340
that I'll just discount

439
00:22:34,409 --> 00:22:39,129
once you have set up all your

440
00:22:36,340 --> 00:22:40,928
configuration and your policy there's

441
00:22:39,129 --> 00:22:43,990
also a capability in easier to be able

442
00:22:40,929 --> 00:22:47,799
to to test them so you can insert for

443
00:22:43,990 --> 00:22:51,129
example some delays in order to verify

444
00:22:47,799 --> 00:22:53,529
for example time also you can also have

445
00:22:51,129 --> 00:22:55,870
some error that are created to simulate

446
00:22:53,529 --> 00:22:59,769
basically failure to connect to some

447
00:22:55,870 --> 00:23:03,610
api's and another interesting things to

448
00:22:59,769 --> 00:23:05,950
mention is a capability to shadow of a

449
00:23:03,610 --> 00:23:08,559
traffic or basically to duplicate the

450
00:23:05,950 --> 00:23:11,440
traffic so you can for example duplicate

451
00:23:08,559 --> 00:23:13,629
your production traffic to an hour

452
00:23:11,440 --> 00:23:16,059
version of maybe some of your

453
00:23:13,629 --> 00:23:17,949
application it will not disrupt your

454
00:23:16,059 --> 00:23:21,519
production traffic you are duplicated

455
00:23:17,950 --> 00:23:23,320
traffic will be only sending the traffic

456
00:23:21,519 --> 00:23:25,179
but the response will be discarded but

457
00:23:23,320 --> 00:23:28,090
it can allow you for example to see

458
00:23:25,179 --> 00:23:29,980
awesomeeee over the ocean or application

459
00:23:28,090 --> 00:23:34,809
are performing with the same kind of

460
00:23:29,980 --> 00:23:38,169
production traffic now we are going to

461
00:23:34,809 --> 00:23:40,149
switch to a different to a second area

462
00:23:38,169 --> 00:23:42,210
which is basically a security under

463
00:23:40,149 --> 00:23:45,189
policies

464
00:23:42,210 --> 00:23:48,789
ok same like traffic management if you

465
00:23:45,190 --> 00:23:52,179
can help you with security and policy

466
00:23:48,789 --> 00:23:53,889
enforcement so like if since there are a

467
00:23:52,179 --> 00:23:54,429
lot more communication channel is now

468
00:23:53,889 --> 00:23:56,379
open

469
00:23:54,429 --> 00:23:59,350
how do you

470
00:23:56,380 --> 00:24:02,350
do mutual authentication so HTA can help

471
00:23:59,350 --> 00:24:04,179
with mutual TLS it can also help with

472
00:24:02,350 --> 00:24:06,639
you know if you want to expose your

473
00:24:04,180 --> 00:24:09,070
service outside with Giottos indication

474
00:24:06,640 --> 00:24:13,150
so it can it can use it can help you

475
00:24:09,070 --> 00:24:16,000
with that also auditing tools who did

476
00:24:13,150 --> 00:24:18,850
what time you know what they modified

477
00:24:16,000 --> 00:24:23,800
all those things it can help you with

478
00:24:18,850 --> 00:24:29,830
that so as a security it can help all

479
00:24:23,800 --> 00:24:32,770
those areas now the policy enforcement

480
00:24:29,830 --> 00:24:35,740
so sometimes you want to make sure that

481
00:24:32,770 --> 00:24:38,950
you know you whitelist some of the IP

482
00:24:35,740 --> 00:24:41,590
addresses or blacklist some of the IP

483
00:24:38,950 --> 00:24:45,340
address or restrict access to certain

484
00:24:41,590 --> 00:24:48,490
services or dynamically limit traffic to

485
00:24:45,340 --> 00:24:50,620
a service so those kind of stuff or you

486
00:24:48,490 --> 00:24:52,120
can even have custom policies to policy

487
00:24:50,620 --> 00:24:54,399
adapters so there is a policy attacks

488
00:24:52,120 --> 00:25:00,639
and I press post and you can have custom

489
00:24:54,400 --> 00:25:05,800
policies based on your needs so let's

490
00:25:00,640 --> 00:25:08,950
look at cutely a demo for mutual TLS it

491
00:25:05,800 --> 00:25:12,090
helps you to transfer you know some of

492
00:25:08,950 --> 00:25:15,130
the so if you want to share some some

493
00:25:12,090 --> 00:25:19,360
sensitive data you know it has to be

494
00:25:15,130 --> 00:25:22,210
mutual TLS so let's look at that so in

495
00:25:19,360 --> 00:25:25,179
our demo we have four different micro

496
00:25:22,210 --> 00:25:27,550
services the first one is the front end

497
00:25:25,180 --> 00:25:30,580
and then it calls API one two and three

498
00:25:27,550 --> 00:25:32,139
so API one and two is managed by hto

499
00:25:30,580 --> 00:25:34,600
that's why you can see that there is

500
00:25:32,140 --> 00:25:36,850
smallish to your logo there may be a one

501
00:25:34,600 --> 00:25:40,449
and two but a pay please legacy it's not

502
00:25:36,850 --> 00:25:42,570
managed history oh so right now

503
00:25:40,450 --> 00:25:46,630
front-end communicates to API one and to

504
00:25:42,570 --> 00:25:48,580
non TLS plaintext but let's say let's

505
00:25:46,630 --> 00:25:51,040
assume that you want to you have to

506
00:25:48,580 --> 00:25:53,860
transfer some of some sensitive

507
00:25:51,040 --> 00:25:55,360
information between this micro services

508
00:25:53,860 --> 00:25:57,939
so you want to make sure that it's

509
00:25:55,360 --> 00:26:02,350
communicate mutual TLS and you know

510
00:25:57,940 --> 00:26:05,280
encryption all those things so we are

511
00:26:02,350 --> 00:26:07,360
going to show so the first rule is that

512
00:26:05,280 --> 00:26:09,450
the first rule we are going to apply is

513
00:26:07,360 --> 00:26:12,969
that

514
00:26:09,450 --> 00:26:15,220
and force all the micro surveys will

515
00:26:12,970 --> 00:26:17,680
accept only TLS communication so it will

516
00:26:15,220 --> 00:26:20,050
reject by default any plaintext

517
00:26:17,680 --> 00:26:21,970
communication coming to it so that's the

518
00:26:20,050 --> 00:26:25,240
number one rule we will apply so that

519
00:26:21,970 --> 00:26:27,550
way friend then try to talk to API 1 & 2

520
00:26:25,240 --> 00:26:30,370
in non TLS it will just reject it

521
00:26:27,550 --> 00:26:32,320
ok but but it can still communicate to

522
00:26:30,370 --> 00:26:38,709
API 3 because it's legacy it still

523
00:26:32,320 --> 00:26:42,460
accepted ok and now that we our second

524
00:26:38,710 --> 00:26:46,120
rule is that each to your rule says ok

525
00:26:42,460 --> 00:26:48,640
now it all the communication you know

526
00:26:46,120 --> 00:26:53,320
from your container from your micro

527
00:26:48,640 --> 00:26:55,450
service will only a TLS it will only

528
00:26:53,320 --> 00:26:57,610
start TLS communication to other micro

529
00:26:55,450 --> 00:27:00,190
services so in that way

530
00:26:57,610 --> 00:27:03,310
now friend and tried to talk to API 1

531
00:27:00,190 --> 00:27:06,970
and API to with TLS so that way it will

532
00:27:03,310 --> 00:27:08,950
get accepted by API 1 & 2 but the

533
00:27:06,970 --> 00:27:13,060
problem is now legacy try to talk to

534
00:27:08,950 --> 00:27:18,190
legacy with TLS it won't understand so

535
00:27:13,060 --> 00:27:19,899
it will just reject that request but we

536
00:27:18,190 --> 00:27:23,500
can have a special rule for legacy

537
00:27:19,900 --> 00:27:27,700
systems we can say that ok if friend and

538
00:27:23,500 --> 00:27:30,880
try to talk to API 3 then use plain text

539
00:27:27,700 --> 00:27:34,170
communication just to show that how can

540
00:27:30,880 --> 00:27:39,700
we exclude to have a rule to exclude

541
00:27:34,170 --> 00:27:42,060
traffic ok so let's quickly jump into

542
00:27:39,700 --> 00:27:42,060
the demo

543
00:27:54,950 --> 00:28:06,660
so in this I'm plating those services

544
00:27:58,290 --> 00:28:08,970
which we talked about and so I'm just

545
00:28:06,660 --> 00:28:10,520
executing a script to check their

546
00:28:08,970 --> 00:28:14,760
communication now you can see that

547
00:28:10,520 --> 00:28:18,750
friend then can talk to the API one API

548
00:28:14,760 --> 00:28:21,180
- and API 3 so it's all status 200 so at

549
00:28:18,750 --> 00:28:21,960
this point it's talking each other in

550
00:28:21,180 --> 00:28:27,330
plain text

551
00:28:21,960 --> 00:28:30,630
so my first rule is so mesh wide I'm

552
00:28:27,330 --> 00:28:32,939
going to enable the accept all ETLs so

553
00:28:30,630 --> 00:28:35,070
all the services in this mesh will only

554
00:28:32,940 --> 00:28:37,440
accept Els communication after executing

555
00:28:35,070 --> 00:28:41,220
this rule I can quickly show you this

556
00:28:37,440 --> 00:28:52,110
rule but Ben Y is going to cover more

557
00:28:41,220 --> 00:28:55,770
detail sorry so it's very simple you can

558
00:28:52,110 --> 00:28:59,280
see that it's kind mesh policy and name

559
00:28:55,770 --> 00:29:02,129
and then peers MPLS that's all it is

560
00:28:59,280 --> 00:29:05,730
so the lolly acts at the MPLS mutual

561
00:29:02,130 --> 00:29:09,540
mutual TLS after this after executing

562
00:29:05,730 --> 00:29:12,320
this though okay so let's see what

563
00:29:09,540 --> 00:29:12,320
happens at this point

564
00:29:15,550 --> 00:29:21,000
okay so it's still getting applying okay

565
00:29:18,160 --> 00:29:21,000
one second

566
00:29:25,080 --> 00:29:36,009
maybe okay so at this point you can see

567
00:29:33,970 --> 00:29:40,090
that friend and try to communicate to a

568
00:29:36,009 --> 00:29:42,730
PA one at a PA - with in plain text and

569
00:29:40,090 --> 00:29:45,668
you can see it service unavailable 503

570
00:29:42,730 --> 00:29:48,250
for those two but it's can still friend

571
00:29:45,669 --> 00:29:56,130
and can still communicate to legacy API

572
00:29:48,250 --> 00:29:56,130
3 in plain text okay so my next rule is

573
00:29:59,429 --> 00:30:06,039
mesh wide service in Shaler so

574
00:30:02,559 --> 00:30:08,200
essentially this rule will is saying

575
00:30:06,039 --> 00:30:10,750
that when you initiate a communication

576
00:30:08,200 --> 00:30:14,490
all the containers all the micro service

577
00:30:10,750 --> 00:30:17,409
use only TLS so after applying this rule

578
00:30:14,490 --> 00:30:22,480
friend end will start talk try to talk

579
00:30:17,409 --> 00:30:26,889
to api's with mutual TLS so let's look

580
00:30:22,480 --> 00:30:30,639
at what happens now now you can see that

581
00:30:26,889 --> 00:30:33,820
it's 200 when it talks to a PA 1 & 2

582
00:30:30,639 --> 00:30:36,850
because it's mutual it's it's using TLS

583
00:30:33,820 --> 00:30:39,899
communication but when it's try to talk

584
00:30:36,850 --> 00:30:44,799
to API 3 it's 503 because it's tried to

585
00:30:39,899 --> 00:30:47,199
send a TLS communication to API 3 which

586
00:30:44,799 --> 00:30:54,429
is this northern understand so it just

587
00:30:47,200 --> 00:30:57,340
simply reject that okay but we can you

588
00:30:54,429 --> 00:31:01,870
know have an exception for legacy

589
00:30:57,340 --> 00:31:04,120
systems as always so we can say skip TLS

590
00:31:01,870 --> 00:31:06,459
for legacy system so at this point if we

591
00:31:04,120 --> 00:31:10,809
try to communicate if I execute the same

592
00:31:06,460 --> 00:31:12,909
thing it's all 200 you know just to

593
00:31:10,809 --> 00:31:16,870
remember in this case friend in talks

594
00:31:12,909 --> 00:31:20,590
with API 1 in TLS API to TLS the other

595
00:31:16,870 --> 00:31:23,939
one it's plain text API 3 let me clear

596
00:31:20,590 --> 00:31:28,178
it quickly before I hand it over to

597
00:31:23,940 --> 00:31:31,379
anyone so in this demo basically we've

598
00:31:28,179 --> 00:31:35,379
seen how we can enforce mesh wide

599
00:31:31,379 --> 00:31:37,280
security so now let's have a quick look

600
00:31:35,379 --> 00:31:39,590
at what has really happened underneath

601
00:31:37,280 --> 00:31:43,330
what configuration we use so as Ronnie

602
00:31:39,590 --> 00:31:46,610
mentioned in our first example we

603
00:31:43,330 --> 00:31:49,580
started from non TLS communication

604
00:31:46,610 --> 00:31:52,490
across all the components and by adding

605
00:31:49,580 --> 00:31:56,480
a visual basically we say that ok at the

606
00:31:52,490 --> 00:31:59,030
mesh wide policy we are deploying a TLS

607
00:31:56,480 --> 00:32:04,240
so that means that every endpoint now in

608
00:31:59,030 --> 00:32:04,240
our issue will only accept TLS traffic

609
00:32:04,480 --> 00:32:10,970
but that's not enough we wanted also to

610
00:32:07,820 --> 00:32:14,870
make sure that all the traffic initiated

611
00:32:10,970 --> 00:32:16,850
by our services is also basically TLS

612
00:32:14,870 --> 00:32:19,280
traffic so that that was a second rule

613
00:32:16,850 --> 00:32:23,929
that was applied which was basically to

614
00:32:19,280 --> 00:32:27,710
say that in our issue in our East to

615
00:32:23,930 --> 00:32:30,320
measure now we want to enforce each to a

616
00:32:27,710 --> 00:32:32,090
TLS mutual authentication so that was

617
00:32:30,320 --> 00:32:33,290
the second rule that we applied but as

618
00:32:32,090 --> 00:32:35,959
we've seen it has broken the

619
00:32:33,290 --> 00:32:38,870
communication with the legacy system so

620
00:32:35,960 --> 00:32:40,880
now we had to apply a third rule which

621
00:32:38,870 --> 00:32:43,429
was basically more narrow down to a

622
00:32:40,880 --> 00:32:47,750
specific service in our case it was the

623
00:32:43,430 --> 00:32:50,330
API 3 and for that specific API TLS was

624
00:32:47,750 --> 00:32:53,630
a disabled obviously we don't recommend

625
00:32:50,330 --> 00:32:56,330
disabling TLS at all but just an example

626
00:32:53,630 --> 00:32:58,580
to see how you can apply specific rules

627
00:32:56,330 --> 00:33:00,649
for specific services based on needs

628
00:32:58,580 --> 00:33:04,399
that you may have or not so it's you can

629
00:33:00,650 --> 00:33:06,980
go from a mesh wide policy and go narrow

630
00:33:04,400 --> 00:33:09,550
it down to like specific API so it's

631
00:33:06,980 --> 00:33:09,550
very flexible

632
00:33:10,750 --> 00:33:16,280
now Ron is going to talk about

633
00:33:12,760 --> 00:33:20,120
authorization and authentication ok so

634
00:33:16,280 --> 00:33:22,250
our third and last demo is George how

635
00:33:20,120 --> 00:33:27,199
can we enable George authentication for

636
00:33:22,250 --> 00:33:29,930
a specific micro service so in this case

637
00:33:27,200 --> 00:33:32,570
we have three micro services front end

638
00:33:29,930 --> 00:33:34,990
again front end and API one so let's say

639
00:33:32,570 --> 00:33:38,210
that we want to expose ap I want to

640
00:33:34,990 --> 00:33:41,030
outside and another friend that needs to

641
00:33:38,210 --> 00:33:44,300
access the API want so at the beginning

642
00:33:41,030 --> 00:33:47,260
you know so let me quickly explain what

643
00:33:44,300 --> 00:33:51,080
is dot I hope everybody knows Todd but

644
00:33:47,260 --> 00:33:55,279
it's a string it has three parts

645
00:33:51,080 --> 00:33:57,439
. so the first one is header and payload

646
00:33:55,279 --> 00:33:59,239
and signature so header is basically

647
00:33:57,440 --> 00:34:02,720
contains it just the metadata

648
00:33:59,239 --> 00:34:05,720
information about that token it contains

649
00:34:02,720 --> 00:34:09,710
the algorithm type those kind of stuff

650
00:34:05,720 --> 00:34:11,510
it's again the job token it's a base64

651
00:34:09,710 --> 00:34:14,059
encoded so if you can just decode it and

652
00:34:11,510 --> 00:34:16,250
see what is the content inside it and

653
00:34:14,059 --> 00:34:20,179
the payload is the second part

654
00:34:16,250 --> 00:34:22,668
it contains user information so in this

655
00:34:20,179 --> 00:34:25,540
case subject name issue that so issue

656
00:34:22,668 --> 00:34:28,940
that can be used to if you want to

657
00:34:25,540 --> 00:34:30,589
expire your token you know after like 10

658
00:34:28,940 --> 00:34:32,960
minutes you want to expire your token so

659
00:34:30,589 --> 00:34:36,290
server can see that when is it issued

660
00:34:32,960 --> 00:34:37,309
and then it can expire it and the

661
00:34:36,290 --> 00:34:39,109
signature part this is the most

662
00:34:37,309 --> 00:34:41,299
important part it verifies the content

663
00:34:39,109 --> 00:34:44,750
is not tampered with the shared secret

664
00:34:41,299 --> 00:34:46,879
so as long as the secret is when a

665
00:34:44,750 --> 00:34:50,949
server can verify with the secret that

666
00:34:46,879 --> 00:34:57,618
any information in this token is

667
00:34:50,949 --> 00:35:02,629
tampered with ok so now at the beginning

668
00:34:57,619 --> 00:35:05,270
the API want can be accessible but no

669
00:35:02,630 --> 00:35:09,589
control so anybody can access if they

670
00:35:05,270 --> 00:35:12,829
have a URL and the then we enforce the

671
00:35:09,589 --> 00:35:16,910
controls so only the with a valid

672
00:35:12,829 --> 00:35:21,710
dot so with the valid jort can access

673
00:35:16,910 --> 00:35:23,299
this service ok and then with a valid

674
00:35:21,710 --> 00:35:24,980
jot you should be able to access the

675
00:35:23,299 --> 00:35:28,089
service so that's the that's the demo

676
00:35:24,980 --> 00:35:28,089
which I'm going to show

677
00:35:34,509 --> 00:35:44,989
so in this case I'm creating those

678
00:35:36,979 --> 00:35:47,499
services required and need to create the

679
00:35:44,989 --> 00:35:53,719
latest gateways to expose that to

680
00:35:47,499 --> 00:35:57,229
outside so let's see from postman so in

681
00:35:53,719 --> 00:35:59,479
this case I have three requests my first

682
00:35:57,229 --> 00:36:01,968
request is no jot so I'm not passing any

683
00:35:59,479 --> 00:36:05,118
jort information in the header and let's

684
00:36:01,969 --> 00:36:07,369
see that service is accessible okay so

685
00:36:05,119 --> 00:36:08,329
it's just a simple HTTP bin service oh

686
00:36:07,369 --> 00:36:10,249
yeah

687
00:36:08,329 --> 00:36:15,829
it's accessible without any

688
00:36:10,249 --> 00:36:18,788
authentication requirements now now

689
00:36:15,829 --> 00:36:29,509
let's say let's enforce the short

690
00:36:18,789 --> 00:36:31,940
authentication so in this we are I'll

691
00:36:29,509 --> 00:36:32,329
show you what is this role looks like in

692
00:36:31,940 --> 00:36:36,289
a minute

693
00:36:32,329 --> 00:36:38,900
so in this we are going to apply dot

694
00:36:36,289 --> 00:36:42,459
requirements for this API so let's

695
00:36:38,900 --> 00:36:42,459
quickly look at what is that

696
00:36:48,780 --> 00:36:52,830
so ignore the HDTV bayonets the target

697
00:36:51,450 --> 00:36:56,580
name is yeah

698
00:36:52,830 --> 00:36:59,940
so it requires jock and it has to be

699
00:36:56,580 --> 00:37:04,020
from a particular ratio and this is the

700
00:36:59,940 --> 00:37:08,940
job verification URL so JW KSU our URL

701
00:37:04,020 --> 00:37:12,090
so and so this this is that rule it

702
00:37:08,940 --> 00:37:15,530
simply says if this target requires

703
00:37:12,090 --> 00:37:20,700
short authentication with this specific

704
00:37:15,530 --> 00:37:24,540
issuer so let's go back to access this

705
00:37:20,700 --> 00:37:26,569
service without any chart now you can

706
00:37:24,540 --> 00:37:29,820
see that origin authentication failed

707
00:37:26,570 --> 00:37:34,710
now let's access with chart so I have

708
00:37:29,820 --> 00:37:37,260
jot this is my chart and the

709
00:37:34,710 --> 00:37:41,460
authorization let me send this so it

710
00:37:37,260 --> 00:37:44,580
except with that jot I have another

711
00:37:41,460 --> 00:37:46,560
request you know we just saw that it's a

712
00:37:44,580 --> 00:37:51,450
valid job but it has a different issue

713
00:37:46,560 --> 00:37:53,520
ok so let's send that it won't accept

714
00:37:51,450 --> 00:37:55,859
because we specified in the rule that it

715
00:37:53,520 --> 00:37:58,220
only acts of the job with a specific

716
00:37:55,860 --> 00:37:58,220
issue

717
00:37:59,630 --> 00:38:08,360
ok let me yeah give it back to Bill

718
00:38:11,830 --> 00:38:18,259
okay so in this example now we've seen

719
00:38:14,750 --> 00:38:20,060
that after securing the service to

720
00:38:18,260 --> 00:38:23,510
service communication we can also

721
00:38:20,060 --> 00:38:26,390
unforce the authorization of you protect

722
00:38:23,510 --> 00:38:29,630
the access to a savvy season so let's go

723
00:38:26,390 --> 00:38:32,118
quick look at the configuration so as as

724
00:38:29,630 --> 00:38:35,390
mentioned in this example with a key

725
00:38:32,119 --> 00:38:38,090
from a target named API or 1 so we are

726
00:38:35,390 --> 00:38:40,609
enforcing to basically a polarization

727
00:38:38,090 --> 00:38:43,700
using a job and this job have to be

728
00:38:40,609 --> 00:38:47,150
issue from that specific issue so that

729
00:38:43,700 --> 00:38:50,060
any traffic coming to API 1 will only be

730
00:38:47,150 --> 00:38:52,100
authorized if it has a job that is valid

731
00:38:50,060 --> 00:38:54,890
basically from that and that issue are

732
00:38:52,100 --> 00:38:57,259
so that kind of give you little ideas of

733
00:38:54,890 --> 00:39:00,859
our second area that we discussed the

734
00:38:57,260 --> 00:39:04,090
policy and the security now further area

735
00:39:00,859 --> 00:39:07,160
that we are gonna cover quickly today is

736
00:39:04,090 --> 00:39:10,609
observability and telemetry so thanks to

737
00:39:07,160 --> 00:39:14,060
the Envoy proxies that are deployed

738
00:39:10,609 --> 00:39:16,990
along each of your application we are

739
00:39:14,060 --> 00:39:20,600
able or is - is about basically together

740
00:39:16,990 --> 00:39:25,040
matrix both at the proxy level and also

741
00:39:20,600 --> 00:39:27,770
at the service level and also it's able

742
00:39:25,040 --> 00:39:32,090
to gather a matrix of its own component

743
00:39:27,770 --> 00:39:37,430
for like self monitoring for example a

744
00:39:32,090 --> 00:39:42,740
second part is a capability also to be

745
00:39:37,430 --> 00:39:46,009
able to investigate issue by distributed

746
00:39:42,740 --> 00:39:49,729
tracing so that you can across all your

747
00:39:46,010 --> 00:39:51,530
services basically be able to follow and

748
00:39:49,730 --> 00:39:53,630
trace your request in order to figure

749
00:39:51,530 --> 00:39:55,790
out what does fail Eve as an issue for

750
00:39:53,630 --> 00:39:57,740
example because now in our mesh of

751
00:39:55,790 --> 00:39:59,869
services it's gonna be difficult some

752
00:39:57,740 --> 00:40:01,879
time to pinpoint out which was the

753
00:39:59,869 --> 00:40:05,930
original services that created a failure

754
00:40:01,880 --> 00:40:08,570
along along the way so that capability

755
00:40:05,930 --> 00:40:11,210
that is coming from the Envoy proxy

756
00:40:08,570 --> 00:40:14,300
Allah - pretty nice pretty nice swing

757
00:40:11,210 --> 00:40:16,490
and a further aspect ok access lock so

758
00:40:14,300 --> 00:40:19,460
basically us capable to generate and

759
00:40:16,490 --> 00:40:22,609
format various type of access log yards

760
00:40:19,460 --> 00:40:27,470
know so let's go

761
00:40:22,609 --> 00:40:31,670
into more detail on one specific item

762
00:40:27,470 --> 00:40:33,558
which is a the adapter terminal so the

763
00:40:31,670 --> 00:40:37,400
mixer is a component that gathering all

764
00:40:33,559 --> 00:40:41,059
this data and telemetry and it's also a

765
00:40:37,400 --> 00:40:44,480
plug-in model so it's able to interface

766
00:40:41,059 --> 00:40:49,519
with external back-end and external

767
00:40:44,480 --> 00:40:52,700
software in order to transmit or pass

768
00:40:49,519 --> 00:40:56,779
some of those telemetry data that can be

769
00:40:52,700 --> 00:41:00,799
used for example for building monitoring

770
00:40:56,779 --> 00:41:03,230
logging any type of application or type

771
00:41:00,799 --> 00:41:07,190
of external application you might you

772
00:41:03,230 --> 00:41:10,099
might need so let's say for example you

773
00:41:07,190 --> 00:41:12,920
would like to monitor for example the

774
00:41:10,099 --> 00:41:15,650
duration request of some of your some of

775
00:41:12,920 --> 00:41:18,230
your queries so what you can define in

776
00:41:15,650 --> 00:41:19,940
in there you can define some specific

777
00:41:18,230 --> 00:41:23,119
rules that says that I want to collect

778
00:41:19,940 --> 00:41:26,869
this requested duration and for my

779
00:41:23,119 --> 00:41:29,720
specific monitoring users I would like

780
00:41:26,869 --> 00:41:32,329
to get good data and ship them to my

781
00:41:29,720 --> 00:41:34,910
external monitoring services for example

782
00:41:32,329 --> 00:41:38,269
so that's a very easy and convenient way

783
00:41:34,910 --> 00:41:41,779
to to plug in and to use a external

784
00:41:38,269 --> 00:41:46,129
external component or bacons in your in

785
00:41:41,779 --> 00:41:49,640
your system and one example of plug-in

786
00:41:46,130 --> 00:41:52,309
is a Calliope plugin that if you recall

787
00:41:49,640 --> 00:41:55,578
the first demonstration with book

788
00:41:52,309 --> 00:41:58,480
writing system so that plug-in allows

789
00:41:55,579 --> 00:42:00,829
you for example to visualize your

790
00:41:58,480 --> 00:42:02,869
services so it shows like you know the

791
00:42:00,829 --> 00:42:06,380
different services that we had and also

792
00:42:02,869 --> 00:42:08,299
it can show you a version and it's quite

793
00:42:06,380 --> 00:42:11,839
quite nice so that's just an example of

794
00:42:08,299 --> 00:42:14,680
plugins that can be added and used with

795
00:42:11,839 --> 00:42:14,680
with you

796
00:42:18,410 --> 00:42:24,819
okay so in the beginning of the talk we

797
00:42:22,100 --> 00:42:27,650
talked about some of the challenges and

798
00:42:24,820 --> 00:42:30,380
to overcome those challenges we end up

799
00:42:27,650 --> 00:42:32,960
having duplicate code in our micro

800
00:42:30,380 --> 00:42:35,480
services so every micro service has to

801
00:42:32,960 --> 00:42:38,210
have return logics you know

802
00:42:35,480 --> 00:42:41,270
communication secure community the TLS

803
00:42:38,210 --> 00:42:43,250
logics all those things like logging

804
00:42:41,270 --> 00:42:44,600
everything has to be in place in your

805
00:42:43,250 --> 00:42:49,000
micro services so that getting

806
00:42:44,600 --> 00:42:52,940
duplicated in every micro service so

807
00:42:49,000 --> 00:42:56,420
with a steal you can with the traffic

808
00:42:52,940 --> 00:42:59,090
management you can actually have this

809
00:42:56,420 --> 00:43:01,250
retried logic you can have load balancer

810
00:42:59,090 --> 00:43:06,410
logic all this logic traffic management

811
00:43:01,250 --> 00:43:10,850
you can you know usage tío to manage all

812
00:43:06,410 --> 00:43:12,589
the traffic management rules or you know

813
00:43:10,850 --> 00:43:14,450
with the security module you can

814
00:43:12,590 --> 00:43:16,400
actually secure that you know

815
00:43:14,450 --> 00:43:19,819
communication between the micro services

816
00:43:16,400 --> 00:43:21,740
or interior authentication you know zero

817
00:43:19,820 --> 00:43:23,900
downtime again you can use traffic

818
00:43:21,740 --> 00:43:26,799
management we saw that how the cannery

819
00:43:23,900 --> 00:43:30,620
deployment can be done very easily with

820
00:43:26,800 --> 00:43:32,510
with few settings and monitoring

821
00:43:30,620 --> 00:43:36,319
communication again the telemetry

822
00:43:32,510 --> 00:43:40,700
collection module for hto will collect

823
00:43:36,320 --> 00:43:43,730
the service level metrics or access logs

824
00:43:40,700 --> 00:43:47,899
or distributed tracing so that will help

825
00:43:43,730 --> 00:43:51,750
you to avoid code duplication in your

826
00:43:47,900 --> 00:43:57,659
micro services Thanks

827
00:43:51,750 --> 00:43:57,659
[Applause]

828
00:44:02,510 --> 00:44:04,570
you

