1
00:00:11,940 --> 00:00:32,280
[Music]

2
00:00:34,680 --> 00:00:41,170
so running fast with scissors so we've

3
00:00:39,820 --> 00:00:43,180
got to hurtle this I've got a long

4
00:00:41,170 --> 00:00:44,440
background I can actually get all of my

5
00:00:43,180 --> 00:00:45,910
weight high enough off the ground to

6
00:00:44,440 --> 00:00:48,370
break two boards at once I did that in

7
00:00:45,910 --> 00:00:50,860
April I still have knees which amazes me

8
00:00:48,370 --> 00:00:53,169
this was my second degree black belt in

9
00:00:50,860 --> 00:00:55,410
tongue pseudo me GU Kwan in April that

10
00:00:53,170 --> 00:00:57,970
I've tested and passed that was quite

11
00:00:55,410 --> 00:00:59,709
rigorous and interesting hallelujah I

12
00:00:57,970 --> 00:01:00,760
got it done and you already heard my

13
00:00:59,710 --> 00:01:02,080
background I'm not going to repeat all

14
00:01:00,760 --> 00:01:03,250
that stuff the other project that I'm a

15
00:01:02,080 --> 00:01:06,730
highly involved in him you'll see a

16
00:01:03,250 --> 00:01:09,430
little bit of it today is defect dojo so

17
00:01:06,730 --> 00:01:11,620
not everything about completing a goal

18
00:01:09,430 --> 00:01:13,600
is sunshine and roses like this is a

19
00:01:11,620 --> 00:01:15,159
sexy shot right this is what's gonna be

20
00:01:13,600 --> 00:01:17,140
on Twitter like look at the cool thing I

21
00:01:15,159 --> 00:01:20,590
did but you know behind that cool thing

22
00:01:17,140 --> 00:01:23,080
was a boatload of these kind of days and

23
00:01:20,590 --> 00:01:27,220
if you can't realize it I'm bloody tired

24
00:01:23,080 --> 00:01:28,720
there so I'm gonna show you some cool

25
00:01:27,220 --> 00:01:30,760
stuff and I'm not gonna lie to you

26
00:01:28,720 --> 00:01:32,560
there's some work behind it right so I

27
00:01:30,760 --> 00:01:34,030
think these things will help you but I

28
00:01:32,560 --> 00:01:36,790
don't want to sell you the magic box

29
00:01:34,030 --> 00:01:39,369
this is what you'll see in the vendor

30
00:01:36,790 --> 00:01:43,210
pitches but honestly there's always

31
00:01:39,369 --> 00:01:45,969
gonna be some of this so what is

32
00:01:43,210 --> 00:01:48,520
serverless right well at the end of the

33
00:01:45,969 --> 00:01:50,919
day it's someone else's computer right

34
00:01:48,520 --> 00:01:53,920
if you're a longtime Linux person you

35
00:01:50,920 --> 00:01:55,960
might remember Zion a D or X I net D if

36
00:01:53,920 --> 00:01:58,750
you don't know that old-time Linux

37
00:01:55,960 --> 00:02:00,369
service it was a service that let you

38
00:01:58,750 --> 00:02:02,890
took a binary that wasn't used to

39
00:02:00,369 --> 00:02:04,930
answering to network and let it answer

40
00:02:02,890 --> 00:02:06,609
to network design at D would go and

41
00:02:04,930 --> 00:02:09,190
handle the network e stuff for you and

42
00:02:06,609 --> 00:02:10,449
then pass down to your application your

43
00:02:09,190 --> 00:02:11,829
application would run to do its thing

44
00:02:10,449 --> 00:02:13,299
and it would handle all the closing and

45
00:02:11,830 --> 00:02:15,880
opening of all the TCP stuff for you

46
00:02:13,300 --> 00:02:17,980
that's kind of what surplice is you

47
00:02:15,880 --> 00:02:19,540
write some code and your function as a

48
00:02:17,980 --> 00:02:23,590
service or lambda or whatever you want

49
00:02:19,540 --> 00:02:25,540
to call it provider handles the rest the

50
00:02:23,590 --> 00:02:26,980
whole idea is to move boilerplate of

51
00:02:25,540 --> 00:02:29,709
this handling connection stuff which is

52
00:02:26,980 --> 00:02:30,220
kinda the same every single time to the

53
00:02:29,710 --> 00:02:33,070
provider

54
00:02:30,220 --> 00:02:35,859
give me the HTTP and what I got in and

55
00:02:33,070 --> 00:02:37,570
the minutes my problem right and ideally

56
00:02:35,860 --> 00:02:40,989
you're focusing on business value rather

57
00:02:37,570 --> 00:02:43,209
than doing a whole bunch of boilerplate

58
00:02:40,989 --> 00:02:44,769
code that doesn't buy you anything and

59
00:02:43,209 --> 00:02:46,989
in in my case

60
00:02:44,769 --> 00:02:50,769
I want to focus on solving security

61
00:02:46,989 --> 00:02:52,930
problems and serverless so if you think

62
00:02:50,769 --> 00:02:55,510
of serverless it's really functions

63
00:02:52,930 --> 00:02:57,099
where you do the work there's events

64
00:02:55,510 --> 00:02:58,870
that trigger these functions these could

65
00:02:57,099 --> 00:03:00,939
be a time-based event or this could be a

66
00:02:58,870 --> 00:03:02,980
trigger because some change happened

67
00:03:00,939 --> 00:03:04,629
external to the system and then you have

68
00:03:02,980 --> 00:03:07,238
some sort of managed services that make

69
00:03:04,629 --> 00:03:08,560
those two things work for you right that

70
00:03:07,239 --> 00:03:12,340
could be lambda that could be Google

71
00:03:08,560 --> 00:03:15,430
functions that could be whatever so a

72
00:03:12,340 --> 00:03:17,530
pretty picture diagram to get an idea of

73
00:03:15,430 --> 00:03:19,690
the difference right as a developer you

74
00:03:17,530 --> 00:03:21,040
have the black items and as the vendor

75
00:03:19,690 --> 00:03:22,659
they have the green items so if you're

76
00:03:21,040 --> 00:03:25,659
doing traditional infrastructure as a

77
00:03:22,659 --> 00:03:27,940
service most of it is your problem right

78
00:03:25,659 --> 00:03:29,679
and a little bit the infrastructure is

79
00:03:27,940 --> 00:03:31,930
handled by the vendor when you move to

80
00:03:29,680 --> 00:03:34,120
pass now you've handed off operating

81
00:03:31,930 --> 00:03:36,159
system and runtime to the vendor and you

82
00:03:34,120 --> 00:03:37,810
just have the application and functions

83
00:03:36,159 --> 00:03:41,920
and then obviously for functions of the

84
00:03:37,810 --> 00:03:43,359
service or server lists all of the stack

85
00:03:41,920 --> 00:03:45,790
goes to the vendor and you're just

86
00:03:43,359 --> 00:03:48,250
really writing some bits of code that

87
00:03:45,790 --> 00:03:52,679
could called automatically via the

88
00:03:48,250 --> 00:03:52,680
whatever usually API calls command

89
00:03:52,799 --> 00:03:57,819
common uses they're usually fronted with

90
00:03:55,329 --> 00:04:00,069
rest api's micro services those kind of

91
00:03:57,819 --> 00:04:01,929
things we have one function per method

92
00:04:00,069 --> 00:04:03,190
and some kind of API gateway that sits

93
00:04:01,930 --> 00:04:05,739
in front of it that brokers those

94
00:04:03,190 --> 00:04:07,060
connections in and out you can also do

95
00:04:05,739 --> 00:04:09,760
data pipelines where you have some kind

96
00:04:07,060 --> 00:04:11,680
of event you have one or more function

97
00:04:09,760 --> 00:04:13,168
munge that have that data in some sort

98
00:04:11,680 --> 00:04:18,280
of way and then push it off to a final

99
00:04:13,169 --> 00:04:19,810
receiver gotchas there both of these

100
00:04:18,279 --> 00:04:21,159
services have trigger URLs which are

101
00:04:19,810 --> 00:04:22,449
really handy you have to when you're

102
00:04:21,159 --> 00:04:23,949
trying to like debug and run these

103
00:04:22,449 --> 00:04:25,630
things you kind of have to put him up on

104
00:04:23,949 --> 00:04:27,909
the service and run them because it's

105
00:04:25,630 --> 00:04:29,560
sort of hard in most cases to do

106
00:04:27,909 --> 00:04:31,479
debugging and testing and stuff locally

107
00:04:29,560 --> 00:04:33,880
because you're using AWS lambda or

108
00:04:31,479 --> 00:04:35,830
something else observability is super

109
00:04:33,880 --> 00:04:39,520
important because if you remember back

110
00:04:35,830 --> 00:04:41,830
here this is black box to you so almost

111
00:04:39,520 --> 00:04:43,900
the entire stack is outside of your

112
00:04:41,830 --> 00:04:45,190
visibility so observability in your code

113
00:04:43,900 --> 00:04:47,710
the little bit of function code you

114
00:04:45,190 --> 00:04:49,000
write is really important you can get

115
00:04:47,710 --> 00:04:50,650
bit if you have a traditional mindset

116
00:04:49,000 --> 00:04:52,300
about development with DB connections

117
00:04:50,650 --> 00:04:54,580
because these things come up and get

118
00:04:52,300 --> 00:04:55,930
killed rapidly and in your mind if you

119
00:04:54,580 --> 00:04:58,210
have a connection pool of three or four

120
00:04:55,930 --> 00:04:59,979
connections well your service is getting

121
00:04:58,210 --> 00:05:01,030
and down killed and then three

122
00:04:59,979 --> 00:05:02,229
connections three connections three

123
00:05:01,030 --> 00:05:04,539
connections three connections all of us

124
00:05:02,229 --> 00:05:05,710
in the database pool of pool is full so

125
00:05:04,539 --> 00:05:09,580
you really need to wire those down to

126
00:05:05,710 --> 00:05:10,900
one and set low time outs and these are

127
00:05:09,580 --> 00:05:12,490
cattle not pets right these things

128
00:05:10,900 --> 00:05:13,989
should just be run and thrown away you

129
00:05:12,490 --> 00:05:15,550
you don't shouldn't have some warm

130
00:05:13,990 --> 00:05:16,930
lovely feeling about these functions

131
00:05:15,550 --> 00:05:20,919
they just run to do their work and then

132
00:05:16,930 --> 00:05:24,610
you kill them so should you be scared of

133
00:05:20,919 --> 00:05:27,340
serverless well what's the traditional

134
00:05:24,610 --> 00:05:30,310
answer to new tech from security people

135
00:05:27,340 --> 00:05:30,698
what's what's that it's er should you be

136
00:05:30,310 --> 00:05:35,500
scared

137
00:05:30,699 --> 00:05:38,050
I say no you shouldn't be scared right

138
00:05:35,500 --> 00:05:39,610
now yes the traditional answer is no the

139
00:05:38,050 --> 00:05:41,440
church and hassle feels like this this

140
00:05:39,610 --> 00:05:44,380
was a flight I was landing in Detroit

141
00:05:41,440 --> 00:05:46,930
and we got followed by fire trucks as we

142
00:05:44,380 --> 00:05:48,639
were to actually land and then come back

143
00:05:46,930 --> 00:05:50,050
it was rather interesting a bit of smell

144
00:05:48,639 --> 00:05:51,759
of smoke in the plane it was a little

145
00:05:50,050 --> 00:05:53,229
bit of high drama but this is kind of

146
00:05:51,759 --> 00:05:54,759
how it feels when you find out that all

147
00:05:53,229 --> 00:05:56,620
of a sudden that dev group is gonna do

148
00:05:54,759 --> 00:05:58,900
this new weird tech thing and you've got

149
00:05:56,620 --> 00:06:03,419
no clue about it I survived that event

150
00:05:58,900 --> 00:06:05,948
you'll survive this event it's okay and

151
00:06:03,419 --> 00:06:07,419
you can make mistakes and be stupid in

152
00:06:05,949 --> 00:06:09,880
any programming language or with any

153
00:06:07,419 --> 00:06:11,830
technology like it doesn't matter like

154
00:06:09,880 --> 00:06:13,479
there's nothing inherently wrong about

155
00:06:11,830 --> 00:06:15,370
serverless that makes it risky or unn

156
00:06:13,479 --> 00:06:17,139
riskier it's how you use it you give a

157
00:06:15,370 --> 00:06:19,000
craftsmen a hammer he can build you an

158
00:06:17,139 --> 00:06:22,599
awesome house you can also smash the

159
00:06:19,000 --> 00:06:23,590
hell of his thumb right and the

160
00:06:22,599 --> 00:06:24,969
structure is run by the provider

161
00:06:23,590 --> 00:06:27,219
hopefully they're doing it at least as

162
00:06:24,970 --> 00:06:29,650
good if not better than you you're

163
00:06:27,220 --> 00:06:31,860
writing a lot less code so if nothing

164
00:06:29,650 --> 00:06:34,388
else the bug count should be less and

165
00:06:31,860 --> 00:06:36,400
the easy path like if you're trying to

166
00:06:34,389 --> 00:06:37,870
do automation this is an easy easy path

167
00:06:36,400 --> 00:06:39,219
to get you from these like one-off

168
00:06:37,870 --> 00:06:40,930
little scripts that you ran into

169
00:06:39,220 --> 00:06:43,030
something much more industrial-strength

170
00:06:40,930 --> 00:06:45,099
right if you are running these little

171
00:06:43,030 --> 00:06:46,539
one-off code things those things could

172
00:06:45,099 --> 00:06:48,699
live in a serverless function and

173
00:06:46,539 --> 00:06:50,620
actually be managed and maintained by

174
00:06:48,699 --> 00:06:55,930
whatever provider you have or whatever

175
00:06:50,620 --> 00:07:00,070
infrastructures in place so the big

176
00:06:55,930 --> 00:07:01,810
picture thinking and serverless I love

177
00:07:00,070 --> 00:07:03,219
exploded diagrams I don't know why I'm

178
00:07:01,810 --> 00:07:04,860
and I've just been fascinated them

179
00:07:03,220 --> 00:07:07,690
forever

180
00:07:04,860 --> 00:07:09,130
this to me they really speak to me and I

181
00:07:07,690 --> 00:07:10,570
love the fact you can sort of see all

182
00:07:09,130 --> 00:07:11,580
the pieces and how they fit together

183
00:07:10,570 --> 00:07:13,680
and

184
00:07:11,580 --> 00:07:16,289
they are individually and if you think

185
00:07:13,680 --> 00:07:18,240
about serverless that's really what you

186
00:07:16,289 --> 00:07:20,280
want to do you want to take down you

187
00:07:18,240 --> 00:07:22,620
know to take apart rather those

188
00:07:20,280 --> 00:07:25,198
processes that you do as a certain

189
00:07:22,620 --> 00:07:27,479
security person and break them up into

190
00:07:25,199 --> 00:07:29,759
the pieces that constitute the workflow

191
00:07:27,479 --> 00:07:31,680
you want right so some kind of something

192
00:07:29,759 --> 00:07:34,169
happens I have a deploy to you a tee a

193
00:07:31,680 --> 00:07:37,110
code some code gets committed to a repo

194
00:07:34,169 --> 00:07:39,180
that's an event right you take some

195
00:07:37,110 --> 00:07:40,770
action based on that event maybe I'm

196
00:07:39,180 --> 00:07:43,650
gonna run sassed against that recent

197
00:07:40,770 --> 00:07:45,419
code commit maybe I'm gonna go do a base

198
00:07:43,650 --> 00:07:47,940
security baseline to check that new

199
00:07:45,419 --> 00:07:49,859
deploy to you eighty that's a function

200
00:07:47,940 --> 00:07:51,870
right and then you inform the product

201
00:07:49,860 --> 00:07:53,580
team right you maybe you drop a message

202
00:07:51,870 --> 00:07:55,289
into slack that says hey this commits

203
00:07:53,580 --> 00:07:57,240
one two three four five and get on this

204
00:07:55,289 --> 00:07:58,680
app has this problem on this line

205
00:07:57,240 --> 00:08:00,659
because I ran the SAS tools

206
00:07:58,680 --> 00:08:03,090
hey we looked at you and you eighty you

207
00:08:00,659 --> 00:08:04,830
forgot to turn on those headers whatever

208
00:08:03,090 --> 00:08:06,599
you want right but this is sort of the

209
00:08:04,830 --> 00:08:08,370
big idea of what my idea of using

210
00:08:06,599 --> 00:08:10,620
serverless right all these little checks

211
00:08:08,370 --> 00:08:13,319
that you might do manually automate them

212
00:08:10,620 --> 00:08:14,849
make them callable over HTTP and then

213
00:08:13,319 --> 00:08:16,289
this can just get done very easily you

214
00:08:14,849 --> 00:08:20,279
can kind of make an easy button out of

215
00:08:16,289 --> 00:08:23,128
these checks you want to do so how do we

216
00:08:20,279 --> 00:08:24,690
use these powers for good and I just

217
00:08:23,129 --> 00:08:27,419
have to put this in here because I love

218
00:08:24,690 --> 00:08:29,460
this cartoon Thank You sweet Jesus boo

219
00:08:27,419 --> 00:08:31,440
that's not honey you're eating InfoSec

220
00:08:29,460 --> 00:08:38,968
propaganda machine learning cyber

221
00:08:31,440 --> 00:08:40,500
blockchain hacker sis right so there's

222
00:08:38,969 --> 00:08:42,329
an example of how to explode your

223
00:08:40,500 --> 00:08:44,519
process think about the oauth testing

224
00:08:42,328 --> 00:08:47,239
guide right that is i can't remember how

225
00:08:44,519 --> 00:08:49,920
many 60 some-odd different tests in it

226
00:08:47,240 --> 00:08:51,480
right how could you turn those things

227
00:08:49,920 --> 00:08:53,069
into functions because really if you

228
00:08:51,480 --> 00:08:54,630
think about when you're doing it like a

229
00:08:53,070 --> 00:08:57,240
web app assessment you're gonna do so

230
00:08:54,630 --> 00:08:58,380
many sort of checks as you go how many

231
00:08:57,240 --> 00:08:59,850
of those things can you turn into

232
00:08:58,380 --> 00:09:02,220
something that's just an automatically

233
00:08:59,850 --> 00:09:04,980
running function well search ended

234
00:09:02,220 --> 00:09:07,170
discovery in recon info one of the

235
00:09:04,980 --> 00:09:09,089
testing guide write functions to do your

236
00:09:07,170 --> 00:09:11,729
favorite Google doors that's not a

237
00:09:09,089 --> 00:09:13,410
really hard thing to do to automate

238
00:09:11,730 --> 00:09:14,880
we're talking small lines of code but

239
00:09:13,410 --> 00:09:16,890
that gets you some really interesting

240
00:09:14,880 --> 00:09:19,110
value and now that it's a function you

241
00:09:16,890 --> 00:09:21,360
can call it all the time right call it

242
00:09:19,110 --> 00:09:23,670
regularly and look at diff figure

243
00:09:21,360 --> 00:09:24,840
printing a web server right pull the X

244
00:09:23,670 --> 00:09:26,490
power buy headers do

245
00:09:24,840 --> 00:09:29,720
you need to understand what that server

246
00:09:26,490 --> 00:09:32,190
is running review server metadata's

247
00:09:29,720 --> 00:09:34,830
write a function to pull robots.txt

248
00:09:32,190 --> 00:09:38,120
across the main text that XML sitemap to

249
00:09:34,830 --> 00:09:40,620
XML check those files for problems right

250
00:09:38,120 --> 00:09:42,480
you can even do dips like if you know

251
00:09:40,620 --> 00:09:43,110
that the last two times you pulled

252
00:09:42,480 --> 00:09:45,930
cross-domain

253
00:09:43,110 --> 00:09:48,360
not xml it had this these values in it

254
00:09:45,930 --> 00:09:50,160
if you get a new value you can react to

255
00:09:48,360 --> 00:09:52,620
that diff right these are amazing you

256
00:09:50,160 --> 00:09:54,079
can automate sort of caching changes you

257
00:09:52,620 --> 00:09:56,610
can check headers you can check method

258
00:09:54,080 --> 00:09:59,700
TLS is an easy thing to automate as a

259
00:09:56,610 --> 00:10:01,170
function right if you have custom checks

260
00:09:59,700 --> 00:10:03,120
for your apps maybe you want to your a

261
00:10:01,170 --> 00:10:04,290
dotnet shop and you have certain

262
00:10:03,120 --> 00:10:06,450
settings you have to have in your web

263
00:10:04,290 --> 00:10:09,030
config according to policy that's a

264
00:10:06,450 --> 00:10:10,890
really simple grip of a web config why

265
00:10:09,030 --> 00:10:12,900
isn't that a function right every time

266
00:10:10,890 --> 00:10:14,520
you commit code that function calls and

267
00:10:12,900 --> 00:10:17,130
you know you're not regressing at least

268
00:10:14,520 --> 00:10:22,650
in the baseline security calls of your

269
00:10:17,130 --> 00:10:24,450
dotnet app in that case what else could

270
00:10:22,650 --> 00:10:28,470
you do this with it goes beyond app sec

271
00:10:24,450 --> 00:10:30,810
right if you're doing DF I our reverse

272
00:10:28,470 --> 00:10:32,670
IP lookup by people you tation blacklist

273
00:10:30,810 --> 00:10:34,829
domain reputation these are all things

274
00:10:32,670 --> 00:10:37,469
you do when you have some funny IP

275
00:10:34,830 --> 00:10:39,600
traffic on your network but if you're in

276
00:10:37,470 --> 00:10:41,790
an incident response role you're gonna

277
00:10:39,600 --> 00:10:44,340
do all of these kind of checks and these

278
00:10:41,790 --> 00:10:46,110
are fairly simple easy checks but they

279
00:10:44,340 --> 00:10:48,300
have to be done every time you have a

280
00:10:46,110 --> 00:10:50,310
hinky IP show up why aren't these

281
00:10:48,300 --> 00:10:51,780
functions why can't I call the one

282
00:10:50,310 --> 00:10:53,670
function that calls all these functions

283
00:10:51,780 --> 00:10:56,130
sums up all the data and ships it to my

284
00:10:53,670 --> 00:10:57,930
analyst and now in a minute or two he

285
00:10:56,130 --> 00:10:59,820
has a a slate of information about that

286
00:10:57,930 --> 00:11:02,189
funny IP that showed up on his console

287
00:10:59,820 --> 00:11:03,660
rather than going out running an NS look

288
00:11:02,190 --> 00:11:06,540
up and running a tool and running a tool

289
00:11:03,660 --> 00:11:10,770
than running a tool right big big

290
00:11:06,540 --> 00:11:13,140
time-saving bonus so building blocks

291
00:11:10,770 --> 00:11:14,210
right what are the building blocks of

292
00:11:13,140 --> 00:11:18,569
serverless

293
00:11:14,210 --> 00:11:21,360
well there's a dubious lambda sure IBM

294
00:11:18,570 --> 00:11:23,040
Oracle and Google all have functions or

295
00:11:21,360 --> 00:11:25,260
cloud functions it's all basically the

296
00:11:23,040 --> 00:11:27,240
same thing there's an awesome project

297
00:11:25,260 --> 00:11:29,189
called open phase you can run on pram or

298
00:11:27,240 --> 00:11:31,230
you can actually buy it from that

299
00:11:29,190 --> 00:11:32,510
project as well there's a ton of

300
00:11:31,230 --> 00:11:34,890
different frameworks

301
00:11:32,510 --> 00:11:36,870
there's serverless or Sparta there's

302
00:11:34,890 --> 00:11:37,769
Furness there's whatever programming

303
00:11:36,870 --> 00:11:39,600
language you have there's

304
00:11:37,769 --> 00:11:41,489
framework for you so you shouldn't be

305
00:11:39,600 --> 00:11:43,199
limited by the fact that like I do Java

306
00:11:41,489 --> 00:11:44,790
but there isn't a Java thing or I do

307
00:11:43,199 --> 00:11:48,508
Python and there isn't a Python thing

308
00:11:44,790 --> 00:11:49,829
there is like people it's not hard to

309
00:11:48,509 --> 00:11:53,249
get into this if you have the desire to

310
00:11:49,829 --> 00:11:54,979
write a little bit of code and if you

311
00:11:53,249 --> 00:11:57,929
haven't seen this the cloud native

312
00:11:54,980 --> 00:11:59,670
alliance or CNCs will say that the cloud

313
00:11:57,929 --> 00:12:02,339
native found it wait cloud native

314
00:11:59,670 --> 00:12:05,279
computing foundation there we go at s

315
00:12:02,339 --> 00:12:07,019
dot C and F dot IO has this awesome

316
00:12:05,279 --> 00:12:09,899
interactive map of all these different

317
00:12:07,019 --> 00:12:11,670
cloud technologies so that if you want

318
00:12:09,899 --> 00:12:13,170
to know about hosted options here your

319
00:12:11,670 --> 00:12:14,399
hosted options if you want to know about

320
00:12:13,170 --> 00:12:16,290
installable options here's your

321
00:12:14,399 --> 00:12:18,149
installable options here's a bunch of

322
00:12:16,290 --> 00:12:19,769
different frameworks there's a bunch of

323
00:12:18,149 --> 00:12:22,350
different tools there's some security

324
00:12:19,769 --> 00:12:25,559
stuff you can do that is a super handy

325
00:12:22,350 --> 00:12:27,059
resource highly recommend that it's kind

326
00:12:25,559 --> 00:12:28,829
of all of the stuff is in one web page

327
00:12:27,059 --> 00:12:30,360
and then all of these little squares you

328
00:12:28,829 --> 00:12:33,378
can click on em and they expand and it's

329
00:12:30,360 --> 00:12:36,600
dynamic it's pretty pretty sweet

330
00:12:33,379 --> 00:12:45,509
picture-taking done good nope oops I'm

331
00:12:36,600 --> 00:12:47,069
gonna vamp for a minute perfect so I'm

332
00:12:45,509 --> 00:12:51,209
gonna have a special shout-out to open

333
00:12:47,069 --> 00:12:53,939
faz I particularly like that project

334
00:12:51,209 --> 00:12:56,069
it's an open source project it consists

335
00:12:53,939 --> 00:12:57,899
of an API gateway and a watchdog it has

336
00:12:56,069 --> 00:13:00,118
built in prometheus you can run it in

337
00:12:57,899 --> 00:13:01,619
kubernetes or swarm and the nice thing

338
00:13:00,119 --> 00:13:04,049
is these functions are basically just

339
00:13:01,619 --> 00:13:06,209
docker containers you make a container

340
00:13:04,049 --> 00:13:08,369
that does a thing for you and they turn

341
00:13:06,209 --> 00:13:10,739
it into a callable resource over HTTP

342
00:13:08,369 --> 00:13:12,269
which is really pretty cool because it's

343
00:13:10,740 --> 00:13:14,189
not that hard to top your eyes something

344
00:13:12,269 --> 00:13:16,439
and once you have that now you have a

345
00:13:14,189 --> 00:13:23,519
resource that's callable over HTTP or

346
00:13:16,439 --> 00:13:26,639
HTTPS really the idea with open faz you

347
00:13:23,519 --> 00:13:28,740
make a rest call in to the Gateway it

348
00:13:26,639 --> 00:13:30,569
will store some stuff in prometheus and

349
00:13:28,740 --> 00:13:32,399
as an alert manager really it's gonna

350
00:13:30,569 --> 00:13:35,610
call the the provider that can either be

351
00:13:32,399 --> 00:13:37,379
kubernetes or docker swarm swarm is nice

352
00:13:35,610 --> 00:13:40,199
for laptop I would do kubernetes if I

353
00:13:37,379 --> 00:13:42,419
was doing it for real I could go out and

354
00:13:40,199 --> 00:13:44,368
call whatever functions right that'll

355
00:13:42,419 --> 00:13:46,290
open up docker images that you specify

356
00:13:44,369 --> 00:13:47,850
all this stuff has sort of managed

357
00:13:46,290 --> 00:13:48,390
secrets and deployments and services

358
00:13:47,850 --> 00:13:50,340
managed by

359
00:13:48,390 --> 00:13:51,780
kubernetes it's just a really

360
00:13:50,340 --> 00:13:53,250
interesting system and it's a zero

361
00:13:51,780 --> 00:13:55,439
dollar cost system if you want to run

362
00:13:53,250 --> 00:13:59,490
something on print which is nice where

363
00:13:55,440 --> 00:14:02,160
it works great on a laptop so demo time

364
00:13:59,490 --> 00:14:08,540
I have three demos because I don't like

365
00:14:02,160 --> 00:14:14,219
myself we're gonna try this out okay oh

366
00:14:08,540 --> 00:14:15,900
I should say so that worked maybe this

367
00:14:14,220 --> 00:14:17,370
will work cuz I actually stuck my

368
00:14:15,900 --> 00:14:18,390
dishwasher in my trashcan and they

369
00:14:17,370 --> 00:14:20,610
actually picked it up I was really

370
00:14:18,390 --> 00:14:23,189
shocked my kid took a picture of it

371
00:14:20,610 --> 00:14:25,500
looks like it fits like they should take

372
00:14:23,190 --> 00:14:27,480
it right and they did good trash company

373
00:14:25,500 --> 00:14:30,690
so this is the first one I'm gonna talk

374
00:14:27,480 --> 00:14:33,270
about gasp doctor it's an open source

375
00:14:30,690 --> 00:14:36,210
project I have up on github the idea

376
00:14:33,270 --> 00:14:38,160
what gasp docker is it's an it's a way

377
00:14:36,210 --> 00:14:40,790
to sort of specify one or more tools

378
00:14:38,160 --> 00:14:43,189
that you can run against the target a

379
00:14:40,790 --> 00:14:45,930
target being either a dynamic

380
00:14:43,190 --> 00:14:48,690
application that's running or source

381
00:14:45,930 --> 00:14:51,150
code in some repo somewhere and it get

382
00:14:48,690 --> 00:14:53,640
repo so you make a specification that

383
00:14:51,150 --> 00:14:56,040
says hey when this event happens I want

384
00:14:53,640 --> 00:14:58,140
you to fire off these three doctors to

385
00:14:56,040 --> 00:15:00,329
run these three tests against it take

386
00:14:58,140 --> 00:15:02,850
all those results ship them back and

387
00:15:00,330 --> 00:15:04,770
leave them in defect dojo defect dojo is

388
00:15:02,850 --> 00:15:08,430
a vulnerability management platform it

389
00:15:04,770 --> 00:15:11,280
takes in dynamic static infrastructure

390
00:15:08,430 --> 00:15:13,380
container it reads in sixty nine

391
00:15:11,280 --> 00:15:15,209
different tools right now and it import

392
00:15:13,380 --> 00:15:18,300
them and normalize them and do it a nice

393
00:15:15,210 --> 00:15:19,290
data model and so what what can you do

394
00:15:18,300 --> 00:15:22,560
with this kind of a thing and that's

395
00:15:19,290 --> 00:15:25,620
demo one is this readable mostly to

396
00:15:22,560 --> 00:15:27,510
people hopefully so we're gonna run the

397
00:15:25,620 --> 00:15:30,420
Gaspee demo because this is a demo in

398
00:15:27,510 --> 00:15:32,130
this one as a startup function and by

399
00:15:30,420 --> 00:15:33,930
the way there's three ideas of the gasp

400
00:15:32,130 --> 00:15:36,060
pipeline or app site pipelines in

401
00:15:33,930 --> 00:15:37,650
general you have a start up function

402
00:15:36,060 --> 00:15:39,780
that does some sort of pre work to set

403
00:15:37,650 --> 00:15:41,459
up an environment for testing pipeline

404
00:15:39,780 --> 00:15:42,839
actually does a testing and then final

405
00:15:41,460 --> 00:15:44,220
is either do and clean up pushing

406
00:15:42,840 --> 00:15:46,650
results to somewhere or something like

407
00:15:44,220 --> 00:15:50,670
that so in this demo we're gonna run git

408
00:15:46,650 --> 00:15:53,189
and clone a repo we're gonna run bandit

409
00:15:50,670 --> 00:15:56,640
which is a Python static analysis tool

410
00:15:53,190 --> 00:15:58,080
against it with the all profile and then

411
00:15:56,640 --> 00:16:00,660
I'm going to run the defect dojo docker

412
00:15:58,080 --> 00:16:01,890
which is really just a shim that takes

413
00:16:00,660 --> 00:16:06,019
the results that happened

414
00:16:01,890 --> 00:16:06,019
and shoves the ball into defect dojo

415
00:16:06,110 --> 00:16:12,269
there's the second ya know file called

416
00:16:08,430 --> 00:16:14,969
the pipeline config and you basically

417
00:16:12,269 --> 00:16:17,550
define for the Bandit tool here's some

418
00:16:14,970 --> 00:16:21,029
metadata importantly there's the doctor

419
00:16:17,550 --> 00:16:22,199
that's going to run and then commands

420
00:16:21,029 --> 00:16:25,320
that you can send to it and then

421
00:16:22,200 --> 00:16:27,000
profiles which are different ways to run

422
00:16:25,320 --> 00:16:28,649
that doctor these are basically command

423
00:16:27,000 --> 00:16:31,709
line arguments that get sent in to that

424
00:16:28,649 --> 00:16:33,360
docker to specify how it runs so you

425
00:16:31,709 --> 00:16:36,989
have like a consistent way to rerun a

426
00:16:33,360 --> 00:16:40,410
doctor by giving it a profile and I have

427
00:16:36,990 --> 00:16:54,209
the same thing for defect dojo and git

428
00:16:40,410 --> 00:16:57,029
as well you get an idea oh let me we go

429
00:16:54,209 --> 00:16:58,859
I have defect dojo up and running right

430
00:16:57,029 --> 00:17:00,209
this is defect Ojo it manages your

431
00:16:58,860 --> 00:17:02,910
vulnerabilities like I was saying

432
00:17:00,209 --> 00:17:08,250
earlier if I can drive over my shoulder

433
00:17:02,910 --> 00:17:11,490
so I have a bunch of just Nintendo

434
00:17:08,250 --> 00:17:12,959
products in my real life defect dojo and

435
00:17:11,490 --> 00:17:15,120
if you look in here you can drill into

436
00:17:12,959 --> 00:17:19,350
these things like for instance Donkey

437
00:17:15,119 --> 00:17:21,359
Kong has had an engagement so here's two

438
00:17:19,349 --> 00:17:23,899
different or three different engagements

439
00:17:21,359 --> 00:17:27,839
where we've interacted with that product

440
00:17:23,900 --> 00:17:31,860
if we go back we're gonna actually do

441
00:17:27,839 --> 00:17:33,149
this to mario bombs away right and so

442
00:17:31,860 --> 00:17:35,549
Buchan notice there's no vulnerabilities

443
00:17:33,150 --> 00:17:41,130
there's no findings if we view

444
00:17:35,549 --> 00:17:48,929
engagements there are no engagements let

445
00:17:41,130 --> 00:17:55,470
us go back to our terminal yes and I am

446
00:17:48,929 --> 00:17:56,730
going to yes just so you can see it

447
00:17:55,470 --> 00:17:59,150
because the command line is not short

448
00:17:56,730 --> 00:18:01,710
for gasp I'm gonna run gasp docker

449
00:17:59,150 --> 00:18:03,990
wearing the profile that's - P of gasps

450
00:18:01,710 --> 00:18:05,790
demo this is for the last con demo the

451
00:18:03,990 --> 00:18:08,720
get URL I'm pulling an old copy of

452
00:18:05,790 --> 00:18:11,190
defect dojo I'm dropping that that

453
00:18:08,720 --> 00:18:13,890
source code check out into op op site

454
00:18:11,190 --> 00:18:14,580
pipeline source and then those dojo

455
00:18:13,890 --> 00:18:16,529
commands are

456
00:18:14,580 --> 00:18:19,559
different ways this it this is what the

457
00:18:16,529 --> 00:18:22,260
dojo doctor needs to talk into the API

458
00:18:19,559 --> 00:18:27,840
the key the location what product it is

459
00:18:22,260 --> 00:18:34,710
and where to find reports so if we run

460
00:18:27,840 --> 00:18:37,740
this thing indict vamp for a few seconds

461
00:18:34,710 --> 00:18:39,779
last time I well you know conference

462
00:18:37,740 --> 00:18:42,659
Wi-Fi so right now it's going and

463
00:18:39,779 --> 00:18:44,370
pulling from github a copy of the defect

464
00:18:42,659 --> 00:18:47,100
or a source an older copy of the defect

465
00:18:44,370 --> 00:18:54,178
bill Joe source I have in my repo come

466
00:18:47,100 --> 00:18:55,379
on slow Network usually is thirty I ran

467
00:18:54,179 --> 00:18:56,940
this last night in the hotel and I got

468
00:18:55,380 --> 00:18:58,200
41 seconds we'll see what it goes so

469
00:18:56,940 --> 00:19:00,210
good we're in the second stage now on

470
00:18:58,200 --> 00:19:01,620
the pipeline stage it's actually taking

471
00:19:00,210 --> 00:19:03,120
the bandit doctor and running against

472
00:19:01,620 --> 00:19:07,139
the source code it checked out in this

473
00:19:03,120 --> 00:19:09,870
step once that step is done there we go

474
00:19:07,139 --> 00:19:11,519
it's running the defect dojo doctor now

475
00:19:09,870 --> 00:19:13,889
taking the results from bandit and

476
00:19:11,519 --> 00:19:17,659
shipping them into the defect dojo API

477
00:19:13,889 --> 00:19:20,158
and hopefully in a few more seconds

478
00:19:17,659 --> 00:19:23,070
it'll come back 45 seconds so it's not

479
00:19:20,159 --> 00:19:25,019
too bad so we checked out of git we ran

480
00:19:23,070 --> 00:19:26,760
a static analysis tool against it and

481
00:19:25,019 --> 00:19:28,590
now have those results in defect dojo in

482
00:19:26,760 --> 00:19:30,510
45 seconds over a crappy conference

483
00:19:28,590 --> 00:19:31,289
Wi-Fi on a laptop that's actually it's a

484
00:19:30,510 --> 00:19:34,399
pretty nice laptop

485
00:19:31,289 --> 00:19:39,590
I shouldn't dog my laptop I just got it

486
00:19:34,399 --> 00:19:44,850
if we refresh here you will see we have

487
00:19:39,590 --> 00:19:47,459
findings if we view engagements we have

488
00:19:44,850 --> 00:19:49,980
a the profile that I used automatically

489
00:19:47,460 --> 00:19:51,029
opens and closes the engagement when it

490
00:19:49,980 --> 00:19:52,590
Smiths them there's a whole bunch of

491
00:19:51,029 --> 00:19:57,809
other options you can do but this is our

492
00:19:52,590 --> 00:19:59,539
engagement if we drill into that guy we

493
00:19:57,809 --> 00:20:03,389
can see that we had a bandit scan ran

494
00:19:59,539 --> 00:20:04,830
and if he drill them to that guy we can

495
00:20:03,389 --> 00:20:06,899
see all the findings and then we can

496
00:20:04,830 --> 00:20:08,129
drill into one of the findings and see

497
00:20:06,899 --> 00:20:10,139
what's wrong with the effect dojo at

498
00:20:08,130 --> 00:20:11,850
least this old copy of defect dojo so

499
00:20:10,139 --> 00:20:13,229
that's this idea like you can do this

500
00:20:11,850 --> 00:20:15,269
kind of thing by just building up a

501
00:20:13,230 --> 00:20:17,309
bunch of simple functions and wiring

502
00:20:15,269 --> 00:20:20,190
them together and if you want to play

503
00:20:17,309 --> 00:20:21,779
with defect or at the gas pipeline it's

504
00:20:20,190 --> 00:20:23,250
up on github it's written and go so it

505
00:20:21,779 --> 00:20:25,950
runs on Mac Windows and Linux and you

506
00:20:23,250 --> 00:20:27,050
just need docker it basically stubs out

507
00:20:25,950 --> 00:20:29,720
to docker

508
00:20:27,050 --> 00:20:31,190
oh yeah and this is where gasp Dockery's

509
00:20:29,720 --> 00:20:32,420
I also have all the doctor files for the

510
00:20:31,190 --> 00:20:34,880
doctor tools that are in there as well

511
00:20:32,420 --> 00:20:40,460
up on github also under the apps like

512
00:20:34,880 --> 00:20:42,770
pipeline repo Oh oops oh yeah

513
00:20:40,460 --> 00:20:45,260
open faz it's open fast is the next

514
00:20:42,770 --> 00:20:47,570
thing I'm gonna show you it's up on

515
00:20:45,260 --> 00:20:49,250
github it's forget how its license this

516
00:20:47,570 --> 00:20:54,889
open-source license it's BSD or

517
00:20:49,250 --> 00:20:57,560
something like that let me go to the

518
00:20:54,890 --> 00:21:00,950
right place so one of the nice things

519
00:20:57,560 --> 00:21:03,409
about open faz where's my pointer here's

520
00:21:00,950 --> 00:21:08,240
the website but even better here it is

521
00:21:03,410 --> 00:21:11,690
running locally on my laptop that was

522
00:21:08,240 --> 00:21:13,100
testing some stuff earlier so these are

523
00:21:11,690 --> 00:21:15,530
just different functions which basically

524
00:21:13,100 --> 00:21:17,060
mapped to containers that are sitting in

525
00:21:15,530 --> 00:21:19,010
this install that's running on my laptop

526
00:21:17,060 --> 00:21:20,540
but I can call in anyway they

527
00:21:19,010 --> 00:21:23,300
automatically give you a UI and a

528
00:21:20,540 --> 00:21:25,490
Prometheus to monitor the usage of it

529
00:21:23,300 --> 00:21:26,870
which is pretty nice and you can do

530
00:21:25,490 --> 00:21:28,250
things like let's see if this one works

531
00:21:26,870 --> 00:21:32,620
for me this was being really slow

532
00:21:28,250 --> 00:21:35,270
earlier today so if bill at

533
00:21:32,620 --> 00:21:37,489
microsoft.com wants to know if he got

534
00:21:35,270 --> 00:21:40,250
pwned because we're this is the I got a

535
00:21:37,490 --> 00:21:45,800
type Microsoft correctly actually I

536
00:21:40,250 --> 00:21:53,240
saved myself this trouble I didn't come

537
00:21:45,800 --> 00:21:55,550
on me okay bill at I want to see if bill

538
00:21:53,240 --> 00:21:57,230
at Microsoft top con has been poned we

539
00:21:55,550 --> 00:21:59,270
can invoke it through this UI and

540
00:21:57,230 --> 00:22:00,890
apparently three different instances

541
00:21:59,270 --> 00:22:03,650
were found in the have i been poned

542
00:22:00,890 --> 00:22:05,510
database just as a silly little example

543
00:22:03,650 --> 00:22:09,680
of the things you can do so there is

544
00:22:05,510 --> 00:22:15,500
this nice UI if you like you eyes there

545
00:22:09,680 --> 00:22:18,170
is also so do I have that there do ya

546
00:22:15,500 --> 00:22:22,460
you can do things like run and map from

547
00:22:18,170 --> 00:22:27,800
this guy I'm just gonna end that myself

548
00:22:22,460 --> 00:22:30,920
so it's quick well fire up that

549
00:22:27,800 --> 00:22:32,090
container and give your results back the

550
00:22:30,920 --> 00:22:37,490
nice thing is that that's basically

551
00:22:32,090 --> 00:22:39,500
taking taking those Dockers and turning

552
00:22:37,490 --> 00:22:41,630
them into callable resources over HTTP

553
00:22:39,500 --> 00:22:47,710
which is pretty sweet

554
00:22:41,630 --> 00:22:52,269
there's also a fast tool and open faz f

555
00:22:47,710 --> 00:22:52,269
yes there we go

556
00:22:52,460 --> 00:23:02,870
open faz has a built-in store I type

557
00:23:02,029 --> 00:23:04,580
that correctly yes

558
00:23:02,870 --> 00:23:08,600
so these are ones that are just default

559
00:23:04,580 --> 00:23:11,120
to come with open faz you can do things

560
00:23:08,600 --> 00:23:13,668
like if piglet is a command-line tool

561
00:23:11,120 --> 00:23:17,299
that takes text that makes it into ASCII

562
00:23:13,669 --> 00:23:19,580
art ish stuff so if I wanted to deploy

563
00:23:17,299 --> 00:23:22,730
that to my current open faz it's

564
00:23:19,580 --> 00:23:26,389
literally just fast or deploy and that's

565
00:23:22,730 --> 00:23:32,090
it oh yes I got it okay to to accept yes

566
00:23:26,389 --> 00:23:36,080
yay right done another nice thing if you

567
00:23:32,090 --> 00:23:38,720
are programming against open Fez is they

568
00:23:36,080 --> 00:23:45,799
have a ton of pre-built templates for a

569
00:23:38,720 --> 00:23:47,179
bunch of different languages so these

570
00:23:45,799 --> 00:23:48,918
are all languages which they have

571
00:23:47,179 --> 00:23:50,450
stubbed frameworks for you to make

572
00:23:48,919 --> 00:23:52,250
doctors out of so if you're a Python

573
00:23:50,450 --> 00:23:54,250
program or you want to write know do you

574
00:23:52,250 --> 00:23:56,950
want to write go or C sharp or whatever

575
00:23:54,250 --> 00:23:59,480
they give you these stubs and you can do

576
00:23:56,950 --> 00:24:00,590
faz I can't remember the exact command

577
00:23:59,480 --> 00:24:02,690
but there's a command line that'll

578
00:24:00,590 --> 00:24:05,389
actually put give you a stub of code

579
00:24:02,690 --> 00:24:07,549
that you just run stick into a docker

580
00:24:05,389 --> 00:24:09,019
there's a yamo configuration you push

581
00:24:07,549 --> 00:24:13,269
that into your open faz and you're done

582
00:24:09,019 --> 00:24:13,269
it's really it's pretty stinkin simple

583
00:24:14,740 --> 00:24:22,070
so as an example I have a yam bowl I

584
00:24:19,580 --> 00:24:27,139
created for a mask the loss of mass it's

585
00:24:22,070 --> 00:24:29,990
a DNS enumeration tool that's actually

586
00:24:27,139 --> 00:24:34,158
pretty cool so here's a very simple

587
00:24:29,990 --> 00:24:36,679
little gamma file configuration that's

588
00:24:34,159 --> 00:24:38,240
gonna grab em to sorrow amass 302 seven

589
00:24:36,679 --> 00:24:46,399
that's my doctor that I created with the

590
00:24:38,240 --> 00:24:49,610
amass tool if I want to actually deploy

591
00:24:46,399 --> 00:24:51,408
that to my local there we go you just do

592
00:24:49,610 --> 00:24:53,590
fast up and then point out that yeah

593
00:24:51,409 --> 00:24:53,590
Mille

594
00:24:55,119 --> 00:25:03,769
it's already now up and running if I

595
00:24:57,559 --> 00:25:07,158
flop over to Firefox you will see I now

596
00:25:03,769 --> 00:25:08,869
have a mass installed it's just that

597
00:25:07,159 --> 00:25:10,909
easy if you do a new docker it's just a

598
00:25:08,869 --> 00:25:13,639
matter of updating the image reference

599
00:25:10,909 --> 00:25:15,139
on that ya mole and doing faz up again

600
00:25:13,639 --> 00:25:19,488
and boom you have a new docker it's

601
00:25:15,139 --> 00:25:22,998
pretty amazing and the interesting thing

602
00:25:19,489 --> 00:25:24,830
is that for things that are normally

603
00:25:22,999 --> 00:25:30,289
sort of command line II I can now do

604
00:25:24,830 --> 00:25:33,519
interesting HTTP things you clear this

605
00:25:30,289 --> 00:25:33,519
so I get up to the top of the screen

606
00:25:34,749 --> 00:25:41,389
very good so I'm just calling curl to my

607
00:25:39,019 --> 00:25:44,599
open fast endpoint and running nmap on

608
00:25:41,389 --> 00:25:46,129
my localhost and boom so you can take

609
00:25:44,599 --> 00:25:48,379
tools that you don't really have to run

610
00:25:46,129 --> 00:25:50,299
you know on your laptop or in a server

611
00:25:48,379 --> 00:25:54,799
somewhere and turn them into web calls

612
00:25:50,299 --> 00:25:58,460
which is really pretty powerful the next

613
00:25:54,799 --> 00:26:01,369
lab I was going to show you or not lab

614
00:25:58,460 --> 00:26:04,129
next demo I was gonna show you is Alfred

615
00:26:01,369 --> 00:26:06,799
which is not the mac os/x Alfred or the

616
00:26:04,129 --> 00:26:09,709
432 other things on github that are

617
00:26:06,799 --> 00:26:10,969
named Alfred if I found this out by

618
00:26:09,710 --> 00:26:12,619
telling a friend about this and then

619
00:26:10,969 --> 00:26:13,909
he'd it's like I'm looking at github but

620
00:26:12,619 --> 00:26:16,218
I can't find it and I'm like oh it's

621
00:26:13,909 --> 00:26:19,039
just this but there's like 87 different

622
00:26:16,219 --> 00:26:21,739
Alfred's unfortunately it's a really

623
00:26:19,039 --> 00:26:24,080
nice very simple yamo based pass brunner

624
00:26:21,739 --> 00:26:27,109
so you can define these simple tasks in

625
00:26:24,080 --> 00:26:29,119
the amyl and then it will go and run

626
00:26:27,109 --> 00:26:30,889
them and you can stack them you can have

627
00:26:29,119 --> 00:26:32,928
groupings you can have whatever you want

628
00:26:30,889 --> 00:26:34,399
so it's a very nice way to sort of take

629
00:26:32,929 --> 00:26:37,879
what would be command lines and just

630
00:26:34,399 --> 00:26:41,089
make them simple little calls so if we

631
00:26:37,879 --> 00:26:42,468
jump over here now for command when you

632
00:26:41,089 --> 00:26:44,989
just run out for by itself it'll tell

633
00:26:42,469 --> 00:26:47,109
you all of the pre-configured tasks it

634
00:26:44,989 --> 00:26:50,059
has so I have a cert expired sir traW

635
00:26:47,109 --> 00:26:51,320
hoster which does host names you can

636
00:26:50,059 --> 00:26:52,940
define all these things that come out

637
00:26:51,320 --> 00:26:54,589
when you run

638
00:26:52,940 --> 00:26:55,999
Alfred so it's just a nice kind of

639
00:26:54,589 --> 00:26:59,539
convenient little way to sort of wrap up

640
00:26:55,999 --> 00:27:01,839
these things in a easy to call method so

641
00:26:59,539 --> 00:27:01,839
if I do

642
00:27:05,609 --> 00:27:13,029
if I do Alfred's scan localhost it's got

643
00:27:11,019 --> 00:27:14,909
a call up to Alfred it's gonna run that

644
00:27:13,029 --> 00:27:16,929
nmap container that's up an open faz

645
00:27:14,909 --> 00:27:20,700
against localhost just like I did before

646
00:27:16,929 --> 00:27:23,289
now it's just a simple call

647
00:27:20,700 --> 00:27:35,529
you could also accept arguments which is

648
00:27:23,289 --> 00:27:37,570
really nice right so I just ran scan

649
00:27:35,529 --> 00:27:40,059
localhost this top one that's hard-coded

650
00:27:37,570 --> 00:27:42,700
to only scan one 27001 obviously a trite

651
00:27:40,059 --> 00:27:45,489
example but you can do an nmap scan and

652
00:27:42,700 --> 00:27:47,230
just do index args 0 and pull in command

653
00:27:45,489 --> 00:27:49,299
line are so now you can do pass command

654
00:27:47,230 --> 00:27:50,619
line arms into your commands and just

655
00:27:49,299 --> 00:27:52,629
have it all sort of work so you can make

656
00:27:50,619 --> 00:27:55,119
these more dynamic commands you can also

657
00:27:52,629 --> 00:27:59,320
do groupings like this one we'll call

658
00:27:55,119 --> 00:28:00,639
these two different already set up tasks

659
00:27:59,320 --> 00:28:02,019
so you can sort of do groupings and

660
00:28:00,639 --> 00:28:04,779
multiple tasks so you can sort of build

661
00:28:02,019 --> 00:28:06,100
up an arsenal of little tasks and stack

662
00:28:04,779 --> 00:28:08,710
them together and any sort of way you

663
00:28:06,100 --> 00:28:09,668
want and there's a zillion other

664
00:28:08,710 --> 00:28:14,739
features obviously it's pretty

665
00:28:09,669 --> 00:28:18,309
surprisingly full-featured so let's run

666
00:28:14,739 --> 00:28:22,869
an nmap scan using Alfred and set

667
00:28:18,309 --> 00:28:26,049
passing in a command-line argument like

668
00:28:22,869 --> 00:28:28,149
this so here's me running it now this is

669
00:28:26,049 --> 00:28:29,859
kind of nice but it's also kind of

670
00:28:28,149 --> 00:28:30,969
annoying because I have these logs which

671
00:28:29,859 --> 00:28:32,799
are sort of nice when you're debugging

672
00:28:30,970 --> 00:28:35,080
but if I just want the output it's sort

673
00:28:32,799 --> 00:28:38,350
of not so awesome so I don't want that

674
00:28:35,080 --> 00:28:39,970
output and I did a little bit of

675
00:28:38,350 --> 00:28:41,080
cheating because that's what you do when

676
00:28:39,970 --> 00:28:50,289
you need to make stuff work the way you

677
00:28:41,080 --> 00:28:55,269
want it to at the tail end of my bash RC

678
00:28:50,289 --> 00:28:56,559
I'm aliasing automate - Alfred - no

679
00:28:55,269 --> 00:28:58,299
formatting which gets rid of that

680
00:28:56,559 --> 00:28:59,379
logging stuff which is nice when you're

681
00:28:58,299 --> 00:29:00,789
trying to figure out how these things

682
00:28:59,379 --> 00:29:03,129
work but it's kind of annoying when you

683
00:29:00,789 --> 00:29:07,419
just want to see the results so let's

684
00:29:03,129 --> 00:29:09,009
automate that in maps can we do there

685
00:29:07,419 --> 00:29:12,249
right so this just looks like a dead

686
00:29:09,009 --> 00:29:13,809
match scan right I just in any kind of

687
00:29:12,249 --> 00:29:16,749
arguments you tack on the end of there -

688
00:29:13,809 --> 00:29:18,129
T for whatever that will just happen now

689
00:29:16,749 --> 00:29:19,809
you could also if you want to

690
00:29:18,130 --> 00:29:21,039
Harco those in a doctor if you want to

691
00:29:19,809 --> 00:29:23,020
sort of have a standard way that you

692
00:29:21,039 --> 00:29:24,429
scan say internal resources with the

693
00:29:23,020 --> 00:29:26,020
nmap or any other tool for that matter

694
00:29:24,429 --> 00:29:28,150
you could have hard code those into the

695
00:29:26,020 --> 00:29:30,070
doctor and now every time it runs you're

696
00:29:28,150 --> 00:29:31,510
getting a consistent run the other

697
00:29:30,070 --> 00:29:35,168
interesting thing about turning these

698
00:29:31,510 --> 00:29:36,549
tools into HTTP calls is now wherever my

699
00:29:35,169 --> 00:29:39,520
open fast lives

700
00:29:36,549 --> 00:29:42,160
that's the originating IP of my call not

701
00:29:39,520 --> 00:29:44,950
my laptop so if this open faz was deep

702
00:29:42,160 --> 00:29:46,990
to buried into a VPN defied VPC

703
00:29:44,950 --> 00:29:48,220
something where I could still run

704
00:29:46,990 --> 00:29:50,260
commands inside of there

705
00:29:48,220 --> 00:29:52,809
from my laptop just brokered through a

706
00:29:50,260 --> 00:29:55,629
VPN connection to the HTTP front-end of

707
00:29:52,809 --> 00:29:57,610
open faz and now my source is inside of

708
00:29:55,630 --> 00:30:00,130
that secure area so it's a sort of a

709
00:29:57,610 --> 00:30:01,090
nice way to bring tooling into

710
00:30:00,130 --> 00:30:02,710
environments that are otherwise

711
00:30:01,090 --> 00:30:05,080
constrained which has been I've had

712
00:30:02,710 --> 00:30:06,610
other times in my past were trying to

713
00:30:05,080 --> 00:30:08,289
test environments and asking them to

714
00:30:06,610 --> 00:30:11,139
poke holes and firewalls it's not so

715
00:30:08,289 --> 00:30:17,408
awesome maybe a single hole for a 443

716
00:30:11,140 --> 00:30:19,809
isn't so bad and then last but not least

717
00:30:17,409 --> 00:30:29,409
showing that grouping and automating you

718
00:30:19,809 --> 00:30:31,270
can do so this one is gonna resolve the

719
00:30:29,409 --> 00:30:32,860
host for last cotton org and then it's

720
00:30:31,270 --> 00:30:36,190
gonna take a while because it's gonna do

721
00:30:32,860 --> 00:30:38,620
a nmap scan of Laska or gonna come back

722
00:30:36,190 --> 00:30:40,150
with the results luckily originating

723
00:30:38,620 --> 00:30:44,080
from the conference IP and not my laptop

724
00:30:40,150 --> 00:30:45,880
IP cough cough this is the this will

725
00:30:44,080 --> 00:30:47,590
take a while it took a while earlier but

726
00:30:45,880 --> 00:30:48,789
the idea here is you can combine and mix

727
00:30:47,590 --> 00:30:50,020
these things now right you have it

728
00:30:48,789 --> 00:30:52,000
several functions that you've created

729
00:30:50,020 --> 00:30:54,129
you've put them into Dockers and now you

730
00:30:52,000 --> 00:30:55,990
can just mix and match them now Alfred

731
00:30:54,130 --> 00:30:58,030
is a fun little tool to play with on

732
00:30:55,990 --> 00:31:00,130
your laptop if I was doing this for real

733
00:30:58,030 --> 00:31:01,270
I probably wouldn't use Alfred in a you

734
00:31:00,130 --> 00:31:02,679
know production environment but

735
00:31:01,270 --> 00:31:05,530
certainly for automation of tooling

736
00:31:02,679 --> 00:31:06,730
local to your computer it's great things

737
00:31:05,530 --> 00:31:09,100
you can do well there we go we're back

738
00:31:06,730 --> 00:31:12,429
done all right so now we just and mapped

739
00:31:09,100 --> 00:31:19,120
Alaska Oregon resolve this IP right by

740
00:31:12,429 --> 00:31:22,830
combining those two doctors thank you

741
00:31:19,120 --> 00:31:25,658
that's Alfred Wow all my demos worked

742
00:31:22,830 --> 00:31:28,178
that's like spooky that's three demos on

743
00:31:25,659 --> 00:31:29,980
film and they all worked I'm almost like

744
00:31:28,179 --> 00:31:31,899
afraid

745
00:31:29,980 --> 00:31:34,510
so what are we getting with the server

746
00:31:31,899 --> 00:31:36,610
less security automation it's not

747
00:31:34,510 --> 00:31:38,169
in-depth testing this is not going to

748
00:31:36,610 --> 00:31:39,219
replace your pen testers this is not

749
00:31:38,169 --> 00:31:40,960
going to replace your security

750
00:31:39,220 --> 00:31:42,429
professionals but it is going to make

751
00:31:40,960 --> 00:31:44,440
your security professionals move a lot

752
00:31:42,429 --> 00:31:46,809
faster because some of that dumb rote

753
00:31:44,440 --> 00:31:49,120
repetitive work you can containerize

754
00:31:46,809 --> 00:31:51,879
standardize and just make them calls and

755
00:31:49,120 --> 00:31:54,070
yes this isn't like leap hacks or has

756
00:31:51,880 --> 00:31:56,019
spent a week poking at your thing

757
00:31:54,070 --> 00:31:58,090
but this is that you must be this high

758
00:31:56,019 --> 00:32:00,120
to ride the ride and the other nice

759
00:31:58,090 --> 00:32:02,260
thing is once you've turned these into

760
00:32:00,120 --> 00:32:04,840
containers and easily repeatable

761
00:32:02,260 --> 00:32:07,330
functions you can do things like run

762
00:32:04,840 --> 00:32:09,760
that same tool across all of the repos

763
00:32:07,330 --> 00:32:11,439
you have eighty-four repos if you had to

764
00:32:09,760 --> 00:32:13,990
do that manually you're talking days and

765
00:32:11,440 --> 00:32:14,470
days of like git clone I want to kill

766
00:32:13,990 --> 00:32:17,049
myself

767
00:32:14,470 --> 00:32:19,389
no just point this tool at it feed it a

768
00:32:17,049 --> 00:32:21,580
series of git URLs and off to the races

769
00:32:19,389 --> 00:32:24,010
right so now you can do this baseline

770
00:32:21,580 --> 00:32:26,230
you can actually get an idea across the

771
00:32:24,010 --> 00:32:27,940
suite of your applications what the

772
00:32:26,230 --> 00:32:30,250
security state looks like from a static

773
00:32:27,940 --> 00:32:32,590
or a dynamic perspective just depends on

774
00:32:30,250 --> 00:32:34,240
what tool you run right so this is where

775
00:32:32,590 --> 00:32:35,830
it gets really cool and powerful because

776
00:32:34,240 --> 00:32:37,630
now I can get breadth which was always

777
00:32:35,830 --> 00:32:40,449
kind of a problem it's not super deep

778
00:32:37,630 --> 00:32:42,279
breath but I can get breadth and then I

779
00:32:40,450 --> 00:32:43,929
can have my people work on getting depth

780
00:32:42,279 --> 00:32:45,820
of the applications that need it because

781
00:32:43,929 --> 00:32:47,470
maybe this one that feels low risk is a

782
00:32:45,820 --> 00:32:49,779
basket case and by the way it's publicly

783
00:32:47,470 --> 00:32:51,760
exposed so I might want to actually put

784
00:32:49,779 --> 00:32:53,830
some resources on that that I wouldn't

785
00:32:51,760 --> 00:32:55,360
do until I knew it was a basket case

786
00:32:53,830 --> 00:32:57,668
right but if I'm just looking at raw

787
00:32:55,360 --> 00:32:59,110
sort of risky things and then one

788
00:32:57,669 --> 00:33:00,460
doesn't do much it's not that important

789
00:32:59,110 --> 00:33:02,110
to the business we don't drive revenue

790
00:33:00,460 --> 00:33:05,529
from that thing I'm not gonna look at it

791
00:33:02,110 --> 00:33:07,330
right and it falls off the back so

792
00:33:05,529 --> 00:33:09,279
welcome to the world of service

793
00:33:07,330 --> 00:33:13,178
automation it's all rainbows and

794
00:33:09,279 --> 00:33:14,679
unicorns I swear not really but you know

795
00:33:13,179 --> 00:33:17,799
Batman does right do you incur from time

796
00:33:14,679 --> 00:33:18,639
to time with this dolphin friends and

797
00:33:17,799 --> 00:33:20,440
that's kind of it

798
00:33:18,639 --> 00:33:21,879
this took this is way faster than I

799
00:33:20,440 --> 00:33:23,950
thought it was gonna be I'm happy to

800
00:33:21,880 --> 00:33:26,950
answer questions also I have some other

801
00:33:23,950 --> 00:33:29,200
slides by the way of different versions

802
00:33:26,950 --> 00:33:31,750
of this kind of idea this is the high

803
00:33:29,200 --> 00:33:34,210
level apps like pipeline and this is

804
00:33:31,750 --> 00:33:35,950
more as a global program I would say the

805
00:33:34,210 --> 00:33:37,630
server list tooling kind of fits in here

806
00:33:35,950 --> 00:33:40,179
where you're automating tooling as

807
00:33:37,630 --> 00:33:42,029
opposed to the full sort of workflow of

808
00:33:40,179 --> 00:33:44,009
an app tech program

809
00:33:42,029 --> 00:33:46,769
this stuff's up on github in the Absalon

810
00:33:44,009 --> 00:33:48,809
project as well um this this certainly

811
00:33:46,769 --> 00:33:50,369
this ping is but the idea here is that

812
00:33:48,809 --> 00:33:52,349
you start over here with will have a

813
00:33:50,369 --> 00:33:54,779
laser pointer you start over here with

814
00:33:52,349 --> 00:33:57,359
requests that come in I do some kind of

815
00:33:54,779 --> 00:33:59,669
triaging I hopefully run a whole bunch

816
00:33:57,359 --> 00:34:00,809
of tools in an automated fashion I dump

817
00:33:59,669 --> 00:34:03,809
everything into a vulnerability

818
00:34:00,809 --> 00:34:05,879
repository like defect dojo I can push

819
00:34:03,809 --> 00:34:08,869
things to defect trackers do metrics and

820
00:34:05,879 --> 00:34:12,899
sort of feed all those downstream

821
00:34:08,869 --> 00:34:16,230
constituencies here's an example of the

822
00:34:12,899 --> 00:34:18,808
first one I did at Pearson where we went

823
00:34:16,230 --> 00:34:20,069
I think I have numbers but the this one

824
00:34:18,809 --> 00:34:23,039
mistake we made and I'll tell you this

825
00:34:20,069 --> 00:34:25,379
you don't make this mistake we had a to

826
00:34:23,039 --> 00:34:26,549
handle triage an intake and we had an

827
00:34:25,379 --> 00:34:29,159
application to handle all the

828
00:34:26,549 --> 00:34:32,009
vulnerabilities stuff that was painful

829
00:34:29,159 --> 00:34:33,389
because apps in here and their IDs had

830
00:34:32,010 --> 00:34:36,240
to be synced with apps in here and

831
00:34:33,389 --> 00:34:37,799
having to really didn't bias much so in

832
00:34:36,239 --> 00:34:40,558
future route versions I just smashed

833
00:34:37,799 --> 00:34:42,509
everything into defect dojo but using

834
00:34:40,559 --> 00:34:43,950
this setup I think I'm doing I don't

835
00:34:42,510 --> 00:34:46,919
have numbers I thought ID numbers in

836
00:34:43,949 --> 00:34:49,980
those loops I don't have numbers but in

837
00:34:46,918 --> 00:34:53,399
this setup Pearson went from 44

838
00:34:49,980 --> 00:34:56,730
assessments in year one two years later

839
00:34:53,399 --> 00:34:59,490
we got to 400 assessments and we lost

840
00:34:56,730 --> 00:35:02,130
three people on the team so we lost

841
00:34:59,490 --> 00:35:03,990
people and went faster and a lot of it

842
00:35:02,130 --> 00:35:05,520
was just a ton of little blue code to

843
00:35:03,990 --> 00:35:07,828
cut off the rough edges that busted

844
00:35:05,520 --> 00:35:12,119
knuckles of the security team so you can

845
00:35:07,829 --> 00:35:13,529
get crazy crazy ROI on this stuff this

846
00:35:12,119 --> 00:35:15,510
is what we talked about doing a toss you

847
00:35:13,529 --> 00:35:18,809
never got done for OWASP this is just

848
00:35:15,510 --> 00:35:21,779
another idea of I pull code out of a

849
00:35:18,809 --> 00:35:24,960
project run into some kind of Automator

850
00:35:21,779 --> 00:35:26,910
like Jenkins launching Dockers the push

851
00:35:24,960 --> 00:35:29,039
stuff to find findings in a defect dojo

852
00:35:26,910 --> 00:35:31,259
you can shove validated findings from

853
00:35:29,039 --> 00:35:33,990
dojo into JIRA and optionally drop

854
00:35:31,260 --> 00:35:34,579
things in it's like channels for project

855
00:35:33,990 --> 00:35:37,169
teams

856
00:35:34,579 --> 00:35:39,630
here's another instance of the pipeline

857
00:35:37,170 --> 00:35:41,609
that Aaron Weaver might co-lead on the

858
00:35:39,630 --> 00:35:45,059
app psych pipeline did he was a very

859
00:35:41,609 --> 00:35:48,150
Atlassian shop developer checks in code

860
00:35:45,059 --> 00:35:50,119
at code with the web hook tell us the

861
00:35:48,150 --> 00:35:52,380
pipeline hey we had some code checked in

862
00:35:50,119 --> 00:35:54,680
launches a bunch of Dockers - look at

863
00:35:52,380 --> 00:35:57,290
that takes those results saves them

864
00:35:54,680 --> 00:35:58,759
dojo gives a summary to the slack

865
00:35:57,290 --> 00:36:00,380
channel fee we just ran all these tools

866
00:35:58,760 --> 00:36:03,020
and here's what we found - the developer

867
00:36:00,380 --> 00:36:04,070
team and then puts findings into JIRA so

868
00:36:03,020 --> 00:36:06,490
they could have something to work on

869
00:36:04,070 --> 00:36:08,840
like right drop it into their backlog

870
00:36:06,490 --> 00:36:11,689
for that pipeline he actually was smart

871
00:36:08,840 --> 00:36:15,080
it took numbers he had 15 repos over

872
00:36:11,690 --> 00:36:17,780
four months he ran it 5000 100 times for

873
00:36:15,080 --> 00:36:19,220
over 25,000 container executions this is

874
00:36:17,780 --> 00:36:20,930
what I mean by making an easy button

875
00:36:19,220 --> 00:36:23,029
like doing these things becomes like

876
00:36:20,930 --> 00:36:24,649
don't get happens don't get happens it

877
00:36:23,030 --> 00:36:26,600
makes it really easy and you can run

878
00:36:24,650 --> 00:36:28,640
these things all the time you can do

879
00:36:26,600 --> 00:36:30,950
really interesting things I had another

880
00:36:28,640 --> 00:36:33,799
instance that I did this we did a github

881
00:36:30,950 --> 00:36:36,319
commit hook on their Enterprise github

882
00:36:33,800 --> 00:36:38,750
that would run a bunch of static tools

883
00:36:36,320 --> 00:36:40,910
whenever they drop code into the repo

884
00:36:38,750 --> 00:36:43,490
and did a commit take those results and

885
00:36:40,910 --> 00:36:46,069
drop a message into the slack channel of

886
00:36:43,490 --> 00:36:48,379
the dev team so now you have a few

887
00:36:46,070 --> 00:36:50,750
minutes from I committed code to I get

888
00:36:48,380 --> 00:36:52,940
at referenced in slack that said by the

889
00:36:50,750 --> 00:36:54,740
way Jimmy you submitted some code and on

890
00:36:52,940 --> 00:36:56,690
line 47 here's an issue we should talk

891
00:36:54,740 --> 00:36:58,790
about it right it's not like the

892
00:36:56,690 --> 00:37:00,890
quarterly assessment it's the five ten

893
00:36:58,790 --> 00:37:03,500
minutes ago assessment which is really

894
00:37:00,890 --> 00:37:05,299
nice and this is another version of it

895
00:37:03,500 --> 00:37:06,830
oh there's the numbers I knew I had

896
00:37:05,300 --> 00:37:09,350
numbers there's the numbers if you want

897
00:37:06,830 --> 00:37:11,569
to see real numbers that was a delta we

898
00:37:09,350 --> 00:37:13,940
had we lost three and a half and then

899
00:37:11,570 --> 00:37:15,650
two people so we went down over time but

900
00:37:13,940 --> 00:37:17,380
increased our speed and that was mostly

901
00:37:15,650 --> 00:37:20,030
really just getting rid of paper cuts

902
00:37:17,380 --> 00:37:24,410
that's all yeah but over over two years

903
00:37:20,030 --> 00:37:26,180
it was almost a 10x just open fast come

904
00:37:24,410 --> 00:37:28,490
with security like no way of security

905
00:37:26,180 --> 00:37:31,580
the APS or it's an assumption is your

906
00:37:28,490 --> 00:37:33,709
local yeah my install right now is crap

907
00:37:31,580 --> 00:37:35,779
because it's on my laptop but at least

908
00:37:33,710 --> 00:37:37,700
like I've been playing with it for about

909
00:37:35,780 --> 00:37:40,190
a year and in that year they went from

910
00:37:37,700 --> 00:37:42,290
having a wide open HTTP by default to

911
00:37:40,190 --> 00:37:45,320
they make you have a they force you to

912
00:37:42,290 --> 00:37:46,670
have a credential login and then if you

913
00:37:45,320 --> 00:37:48,830
set it up with HTTPS you have a

914
00:37:46,670 --> 00:37:50,420
credential blog and over HTTP so yes you

915
00:37:48,830 --> 00:37:52,220
can do a lot of security stuff on it my

916
00:37:50,420 --> 00:37:53,810
laptop right now it's just a demo that's

917
00:37:52,220 --> 00:37:55,580
crappy but yeah yes there's a whole

918
00:37:53,810 --> 00:38:02,390
bunch of authentication authorization

919
00:37:55,580 --> 00:38:05,460
you can do in front of it yes thanks any

920
00:38:02,390 --> 00:38:09,279
other questions yes

921
00:38:05,460 --> 00:38:11,950
okay you'll comment on the status of a

922
00:38:09,280 --> 00:38:13,300
defect dojo sure yeah it's not really a

923
00:38:11,950 --> 00:38:17,470
defect dojo talk but I'm the maintainer

924
00:38:13,300 --> 00:38:19,480
so I know this summer we had three no

925
00:38:17,470 --> 00:38:21,609
two students that were google Summer of

926
00:38:19,480 --> 00:38:23,140
Code and we also paid a college guy to

927
00:38:21,610 --> 00:38:26,380
do some work for us as well so we had an

928
00:38:23,140 --> 00:38:28,660
intern sort of we did a conversion from

929
00:38:26,380 --> 00:38:31,570
Python two to three so there were no

930
00:38:28,660 --> 00:38:33,940
longer subject to the Python to dying in

931
00:38:31,570 --> 00:38:35,650
January which is kind of nice and the

932
00:38:33,940 --> 00:38:40,450
other focus of the google Summer of Code

933
00:38:35,650 --> 00:38:42,040
was writing a whole ton of unit tests so

934
00:38:40,450 --> 00:38:44,740
that there's I don't have it on the

935
00:38:42,040 --> 00:38:46,840
screen but we have a sample files repo

936
00:38:44,740 --> 00:38:49,839
so we have samples of the 69 different

937
00:38:46,840 --> 00:38:51,700
tools that dojo can ingest in a repo and

938
00:38:49,840 --> 00:38:54,040
the unit tests will pull those files out

939
00:38:51,700 --> 00:38:55,359
and run them through dojo to make sure

940
00:38:54,040 --> 00:38:57,930
we don't have any breakage of tool

941
00:38:55,360 --> 00:39:00,460
import is a bunch a whole bunch of other

942
00:38:57,930 --> 00:39:02,080
whole bunch of other tests internally to

943
00:39:00,460 --> 00:39:03,820
make sure that dojo is consistent

944
00:39:02,080 --> 00:39:06,549
because one of the problems we faced as

945
00:39:03,820 --> 00:39:08,380
a project is that the popularity of dojo

946
00:39:06,550 --> 00:39:10,210
is really skyrocketed in the last year

947
00:39:08,380 --> 00:39:11,620
and we're getting lots of PRS which is

948
00:39:10,210 --> 00:39:14,110
really cool but we're getting lots of

949
00:39:11,620 --> 00:39:15,580
PRS which is also scary so we really

950
00:39:14,110 --> 00:39:17,230
wanted to shore up the testing side of

951
00:39:15,580 --> 00:39:19,900
things so that those PRS are easier to

952
00:39:17,230 --> 00:39:21,370
accept without bringing in breakage and

953
00:39:19,900 --> 00:39:23,530
then the other thing that I'm working on

954
00:39:21,370 --> 00:39:25,750
currently is I'm rewriting the installer

955
00:39:23,530 --> 00:39:27,910
because I hate myself and I wrote twelve

956
00:39:25,750 --> 00:39:29,920
hundred lines of bash to do the first

957
00:39:27,910 --> 00:39:32,470
version of the installer I'm rewriting

958
00:39:29,920 --> 00:39:34,960
that and go and the nice part about that

959
00:39:32,470 --> 00:39:36,250
will be it's a standalone binary that

960
00:39:34,960 --> 00:39:38,950
knows how to pull it straight out of

961
00:39:36,250 --> 00:39:42,250
github drop it onto your box and I also

962
00:39:38,950 --> 00:39:46,149
set up a it's set up to either pull from

963
00:39:42,250 --> 00:39:49,030
a tag a tag release a particular head of

964
00:39:46,150 --> 00:39:52,680
branch or a specific commit and then

965
00:39:49,030 --> 00:39:55,150
there's a hundred and 70 some-odd

966
00:39:52,680 --> 00:39:56,620
configurable things at a mo file that

967
00:39:55,150 --> 00:39:58,120
you can either accept the defaults or

968
00:39:56,620 --> 00:40:00,009
override them with in variable

969
00:39:58,120 --> 00:40:02,319
environmental variables or change the

970
00:40:00,010 --> 00:40:04,000
amyl so it's like super configurable

971
00:40:02,320 --> 00:40:06,880
installer and some of that's driven

972
00:40:04,000 --> 00:40:08,320
because our installers not awesome and I

973
00:40:06,880 --> 00:40:10,210
wrote it so I can say that I guess and

974
00:40:08,320 --> 00:40:11,860
some of its driven because we're having

975
00:40:10,210 --> 00:40:13,450
to do testing for people like AI have

976
00:40:11,860 --> 00:40:15,700
this issue well to repeat it oh you're

977
00:40:13,450 --> 00:40:18,310
using like twelve commits back from

978
00:40:15,700 --> 00:40:18,730
master I need to do an install of that

979
00:40:18,310 --> 00:40:19,869
and so

980
00:40:18,730 --> 00:40:24,310
will allow us to do those kind of

981
00:40:19,869 --> 00:40:25,109
testings a lot quicker as well yep no

982
00:40:24,310 --> 00:40:28,509
problem

983
00:40:25,109 --> 00:40:29,370
any other questions well thank you very

984
00:40:28,510 --> 00:40:35,860
much

985
00:40:29,370 --> 00:40:35,859
[Applause]

986
00:40:41,140 --> 00:40:43,200
you

