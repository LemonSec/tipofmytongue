1
00:00:09,300 --> 00:00:37,939
[Music]

2
00:00:39,620 --> 00:00:47,160
morning so we're gonna be talking about

3
00:00:44,090 --> 00:00:48,930
static analysis today who just first

4
00:00:47,160 --> 00:00:52,949
show of hands who here is familiar with

5
00:00:48,930 --> 00:00:55,250
static analysis that's what I got okay

6
00:00:52,950 --> 00:00:57,600
so you guys have heard a bit about me

7
00:00:55,250 --> 00:00:59,400
new product development systems

8
00:00:57,600 --> 00:01:03,360
engineering software systems is what

9
00:00:59,400 --> 00:01:05,309
what my experiences in worked with

10
00:01:03,360 --> 00:01:07,650
secure decisions one of the things we

11
00:01:05,309 --> 00:01:09,600
are known for is transitioning our

12
00:01:07,650 --> 00:01:10,920
research so one of the research projects

13
00:01:09,600 --> 00:01:12,270
that started a long time it was a

14
00:01:10,920 --> 00:01:15,479
Department of Homeland Security

15
00:01:12,270 --> 00:01:17,880
separates called and that is now its own

16
00:01:15,479 --> 00:01:20,160
company called kodiak's and it sponsored

17
00:01:17,880 --> 00:01:23,820
this conference and I also wanted to

18
00:01:20,160 --> 00:01:25,590
mention grama Tech so the work that I'm

19
00:01:23,820 --> 00:01:27,449
here talking about today is funded by

20
00:01:25,590 --> 00:01:31,740
Department of Homeland Security Science

21
00:01:27,450 --> 00:01:33,649
and Technology and on a program called

22
00:01:31,740 --> 00:01:35,850
stamp so that stands for static analysis

23
00:01:33,649 --> 00:01:38,610
modernization program government's full

24
00:01:35,850 --> 00:01:40,740
of acronyms and then the prime

25
00:01:38,610 --> 00:01:42,390
contractor on that so the people who won

26
00:01:40,740 --> 00:01:45,060
directly to the government as gramma

27
00:01:42,390 --> 00:01:47,610
Tech and then us that secured decisions

28
00:01:45,060 --> 00:01:48,869
are working on a subcontract to them on

29
00:01:47,610 --> 00:01:54,810
this work that I'm going to talk about

30
00:01:48,869 --> 00:01:56,459
today so an overview of the talk first

31
00:01:54,810 --> 00:01:57,569
we're going to just go over static

32
00:01:56,459 --> 00:01:58,800
analysis sounds like everybody's

33
00:01:57,569 --> 00:02:01,860
familiar and I don't need to convince

34
00:01:58,800 --> 00:02:04,709
you of its merits but we're gonna do

35
00:02:01,860 --> 00:02:06,869
that and then part twos the real the

36
00:02:04,709 --> 00:02:10,590
main part of the talk so it serves two

37
00:02:06,869 --> 00:02:12,720
purposes one is it covers all the things

38
00:02:10,590 --> 00:02:15,420
you need to look at in a static analyzer

39
00:02:12,720 --> 00:02:17,160
and that sort of doubles for the set of

40
00:02:15,420 --> 00:02:19,708
information that we're capturing in the

41
00:02:17,160 --> 00:02:22,109
system called compare that I'm basically

42
00:02:19,709 --> 00:02:24,690
presenting about and then the part three

43
00:02:22,110 --> 00:02:25,920
it's a it's a short section and so

44
00:02:24,690 --> 00:02:27,810
there's this system that we're

45
00:02:25,920 --> 00:02:29,700
developing called compare we're really

46
00:02:27,810 --> 00:02:31,860
just getting underway we've got kind of

47
00:02:29,700 --> 00:02:33,750
the initial prototype built and we're

48
00:02:31,860 --> 00:02:35,340
spending the next 12 months really

49
00:02:33,750 --> 00:02:37,230
building that out in those capabilities

50
00:02:35,340 --> 00:02:41,190
and that's a set of technologies hotel

51
00:02:37,230 --> 00:02:44,890
talk more about so Indus Teta can alysus

52
00:02:41,190 --> 00:02:46,930
so static analysis is basically a way of

53
00:02:44,890 --> 00:02:50,049
looking at programs without running them

54
00:02:46,930 --> 00:02:51,610
and learning about how how well they

55
00:02:50,050 --> 00:02:54,880
work and if there are problems or other

56
00:02:51,610 --> 00:02:57,160
things like that they work on different

57
00:02:54,880 --> 00:03:00,010
inputs so some work on source code some

58
00:02:57,160 --> 00:03:02,260
work on compiled binaries really they're

59
00:03:00,010 --> 00:03:03,760
all there to help find quality problems

60
00:03:02,260 --> 00:03:06,340
right and that's a broad category of

61
00:03:03,760 --> 00:03:08,380
problems and they're both open source

62
00:03:06,340 --> 00:03:09,940
analyzers that are freely available and

63
00:03:08,380 --> 00:03:12,819
you can get their code and there are

64
00:03:09,940 --> 00:03:14,890
also commercial and proprietary tools

65
00:03:12,819 --> 00:03:18,609
right so people who sell their software

66
00:03:14,890 --> 00:03:20,290
and one of the ways I like to think

67
00:03:18,610 --> 00:03:22,150
about static analysis is it's like a

68
00:03:20,290 --> 00:03:24,400
security expert sitting over your

69
00:03:22,150 --> 00:03:26,560
shoulder right and this expert has like

70
00:03:24,400 --> 00:03:28,600
a hundred thousand hours of experience

71
00:03:26,560 --> 00:03:30,760
and unfailing attention because it's a

72
00:03:28,600 --> 00:03:32,980
computer program right but a lot of

73
00:03:30,760 --> 00:03:35,079
people have written all these checks

74
00:03:32,980 --> 00:03:36,609
into these analyzers and when you're

75
00:03:35,080 --> 00:03:38,349
running that on your code you're getting

76
00:03:36,610 --> 00:03:40,450
the benefit of that collective wisdom of

77
00:03:38,349 --> 00:03:43,988
all these people like 50 years of

78
00:03:40,450 --> 00:03:46,109
research and so static analysis is

79
00:03:43,989 --> 00:03:48,069
really good at finding basically

80
00:03:46,110 --> 00:03:50,470
implementation issues right it's

81
00:03:48,069 --> 00:03:52,149
probably not gonna find design problems

82
00:03:50,470 --> 00:03:55,030
there are actually some forms of static

83
00:03:52,150 --> 00:03:57,430
analysis that attempt to find those but

84
00:03:55,030 --> 00:04:01,030
most static analysis is finding things

85
00:03:57,430 --> 00:04:03,760
like lower level programming for

86
00:04:01,030 --> 00:04:06,160
programming mistakes right so do you

87
00:04:03,760 --> 00:04:08,108
have hard if you're working in the cloud

88
00:04:06,160 --> 00:04:10,180
and you're doing secret's management if

89
00:04:08,109 --> 00:04:12,040
you have secrets hard-coded in your code

90
00:04:10,180 --> 00:04:13,989
that's not a good practice there are

91
00:04:12,040 --> 00:04:16,870
checkers that will look for those types

92
00:04:13,989 --> 00:04:20,200
of API tokens and things that you've are

93
00:04:16,870 --> 00:04:23,550
not stored in a secret store when you're

94
00:04:20,200 --> 00:04:26,530
doing C applications right your memory

95
00:04:23,550 --> 00:04:28,720
management is a real problem right so

96
00:04:26,530 --> 00:04:30,549
doing buffer overruns and overruns and

97
00:04:28,720 --> 00:04:33,160
those problems of you know modern

98
00:04:30,550 --> 00:04:34,840
languages have sort of obviated a lot of

99
00:04:33,160 --> 00:04:36,400
those but if you're writing C you you

100
00:04:34,840 --> 00:04:37,599
need help finding those types of

101
00:04:36,400 --> 00:04:40,989
mistakes because they're really hard to

102
00:04:37,600 --> 00:04:42,610
catch so there's literally thousands of

103
00:04:40,990 --> 00:04:46,690
things that static analysis can check

104
00:04:42,610 --> 00:04:48,930
for and there's a big list and using

105
00:04:46,690 --> 00:04:52,030
analyzers has just been demonstrated to

106
00:04:48,930 --> 00:04:53,979
really benefit code quality right and

107
00:04:52,030 --> 00:04:55,090
it's cost effective to that's that's an

108
00:04:53,979 --> 00:04:56,560
important thing so there's a lot of

109
00:04:55,090 --> 00:04:58,299
things that we could do that are really

110
00:04:56,560 --> 00:05:00,700
good but there

111
00:04:58,300 --> 00:05:03,100
in practical terms static analysis is

112
00:05:00,700 --> 00:05:04,690
actually practically feasible to so Nora

113
00:05:03,100 --> 00:05:07,840
tells done studies where they showed

114
00:05:04,690 --> 00:05:10,270
that it's economical Google has built a

115
00:05:07,840 --> 00:05:13,869
big system for building static analysis

116
00:05:10,270 --> 00:05:15,640
into all of the a it's a system that

117
00:05:13,870 --> 00:05:18,420
checks all of the code in that pipeline

118
00:05:15,640 --> 00:05:21,820
before it reaches any form of production

119
00:05:18,420 --> 00:05:24,250
Facebook wrote their own analyzer and

120
00:05:21,820 --> 00:05:26,260
then Coverity is a commercial vendor and

121
00:05:24,250 --> 00:05:29,800
they have a published research on their

122
00:05:26,260 --> 00:05:31,980
experience with building and deploying

123
00:05:29,800 --> 00:05:35,440
that product over the last 20 years

124
00:05:31,980 --> 00:05:36,910
let's assign me up you know you've

125
00:05:35,440 --> 00:05:38,680
convinced me standing and else is great

126
00:05:36,910 --> 00:05:40,750
I've got a job application it's about

127
00:05:38,680 --> 00:05:41,170
this long I'm using maven wait what

128
00:05:40,750 --> 00:05:42,520
should I do

129
00:05:41,170 --> 00:05:44,440
right maybe even you're ahead of the

130
00:05:42,520 --> 00:05:49,510
curve like I need to find me some sequel

131
00:05:44,440 --> 00:05:53,110
injection what analyser should I use so

132
00:05:49,510 --> 00:05:55,710
just you know and the today the

133
00:05:53,110 --> 00:05:58,420
state-of-the-art is pretty much right

134
00:05:55,710 --> 00:06:00,549
you know you see people on the OS flash

135
00:05:58,420 --> 00:06:02,560
channel like asking the room like you

136
00:06:00,550 --> 00:06:04,750
know what can I get right and the

137
00:06:02,560 --> 00:06:06,910
reality is that there's just not really

138
00:06:04,750 --> 00:06:09,550
a good source of information out there

139
00:06:06,910 --> 00:06:13,000
right which is I think why you're all at

140
00:06:09,550 --> 00:06:16,180
this talk and so what we're trying to do

141
00:06:13,000 --> 00:06:18,130
is build basically like a consumer

142
00:06:16,180 --> 00:06:19,780
reports for static analyzers so we want

143
00:06:18,130 --> 00:06:21,190
to catalog them so you know which ones

144
00:06:19,780 --> 00:06:23,289
are available and then we want to

145
00:06:21,190 --> 00:06:25,270
document properties of those analyzers

146
00:06:23,290 --> 00:06:28,180
as well as and measure some of their

147
00:06:25,270 --> 00:06:33,190
performance and so we're calling that

148
00:06:28,180 --> 00:06:36,640
system compare and the got one of

149
00:06:33,190 --> 00:06:38,860
they're basically two main goals one is

150
00:06:36,640 --> 00:06:41,530
really just driving adoption right so I

151
00:06:38,860 --> 00:06:43,480
don't have a dog in this race but my

152
00:06:41,530 --> 00:06:45,039
goal is to help improve the quality of

153
00:06:43,480 --> 00:06:47,440
software in the world right that is that

154
00:06:45,040 --> 00:06:49,300
is the bigger goal and I think that you

155
00:06:47,440 --> 00:06:52,060
know getting software analysis tools

156
00:06:49,300 --> 00:06:54,610
better and use is a way to achieve that

157
00:06:52,060 --> 00:06:56,140
goal and in order for people to use the

158
00:06:54,610 --> 00:06:57,190
tools I have to know they exist and what

159
00:06:56,140 --> 00:07:01,479
they're good at and which ones they

160
00:06:57,190 --> 00:07:02,650
should be using right so that's the

161
00:07:01,480 --> 00:07:05,500
left-hand side and then on the

162
00:07:02,650 --> 00:07:07,090
right-hand side there's some nuance here

163
00:07:05,500 --> 00:07:09,430
with the proprietary and the open source

164
00:07:07,090 --> 00:07:10,979
analyzers the proprietary of makers of

165
00:07:09,430 --> 00:07:13,090
analyzers

166
00:07:10,979 --> 00:07:14,770
don't always allow you to publish

167
00:07:13,090 --> 00:07:17,049
information about their tools so if I

168
00:07:14,770 --> 00:07:21,130
can improve market transparency and

169
00:07:17,050 --> 00:07:24,610
create pressure on them to make better

170
00:07:21,130 --> 00:07:26,770
informed customers right that's a that's

171
00:07:24,610 --> 00:07:28,630
a secondary goal and so I think most of

172
00:07:26,770 --> 00:07:30,479
the people in the room here fit into

173
00:07:28,630 --> 00:07:33,880
this top category there's some other

174
00:07:30,479 --> 00:07:36,610
people who might find this capability

175
00:07:33,880 --> 00:07:39,300
that we're building useful and like I

176
00:07:36,610 --> 00:07:42,720
said our goal really is to just improve

177
00:07:39,300 --> 00:07:49,570
the security and reliability of software

178
00:07:42,720 --> 00:07:51,940
so let's get into part two here there

179
00:07:49,570 --> 00:07:53,199
we've identified seven broad categories

180
00:07:51,940 --> 00:07:54,490
of analyzers that you should pay

181
00:07:53,199 --> 00:07:56,710
attention to when you're making an

182
00:07:54,490 --> 00:07:58,510
acquisition decision so I'm basically

183
00:07:56,710 --> 00:08:04,180
going to go through each of these in

184
00:07:58,510 --> 00:08:06,280
pretty good detail and those slides like

185
00:08:04,180 --> 00:08:07,449
if you read into like what what's in

186
00:08:06,280 --> 00:08:09,039
these slides that's the type of

187
00:08:07,449 --> 00:08:14,650
information that we're capturing in this

188
00:08:09,039 --> 00:08:16,599
compare system okay so it's started off

189
00:08:14,650 --> 00:08:20,650
with the basic information so this is

190
00:08:16,599 --> 00:08:22,240
just like it just says so one of the

191
00:08:20,650 --> 00:08:24,190
things that you need to know when you're

192
00:08:22,240 --> 00:08:27,699
looking at a tool whether it's up to

193
00:08:24,190 --> 00:08:29,889
date and so when it was released

194
00:08:27,699 --> 00:08:31,479
most recently right if that was five

195
00:08:29,889 --> 00:08:33,310
years ago maybe that tool is not being

196
00:08:31,479 --> 00:08:36,429
actively maintained and maybe it's not

197
00:08:33,309 --> 00:08:38,848
as reliable as it should be against

198
00:08:36,429 --> 00:08:41,620
modern frameworks and things like that

199
00:08:38,849 --> 00:08:42,940
so we collect you should we'll be

200
00:08:41,620 --> 00:08:44,620
looking at when it was first released

201
00:08:42,940 --> 00:08:46,660
and if it's been maintained and it's got

202
00:08:44,620 --> 00:08:52,480
a track record and then when the latest

203
00:08:46,660 --> 00:08:54,250
release was where you run it so matters

204
00:08:52,480 --> 00:08:56,589
a lot to a lot of organizations maybe

205
00:08:54,250 --> 00:08:58,510
you don't want to be sending your source

206
00:08:56,589 --> 00:09:02,980
code up to some outside provider right

207
00:08:58,510 --> 00:09:06,370
and a SAS model so you will be looking

208
00:09:02,980 --> 00:09:08,470
for self hosted tools which and if you

209
00:09:06,370 --> 00:09:10,720
are self hosting you know the platforms

210
00:09:08,470 --> 00:09:13,240
that you are adaptive running like what

211
00:09:10,720 --> 00:09:15,730
does it support there are licensing

212
00:09:13,240 --> 00:09:18,339
models whether you have to pay for it or

213
00:09:15,730 --> 00:09:20,079
whether it's free and then you know you

214
00:09:18,339 --> 00:09:23,579
should have be able to go and get more

215
00:09:20,079 --> 00:09:23,579
information from the tool itself

216
00:09:23,810 --> 00:09:27,739
so process integration is one of the

217
00:09:25,670 --> 00:09:30,199
most important categories that I'm going

218
00:09:27,740 --> 00:09:31,790
to talk about that's that I think maybe

219
00:09:30,199 --> 00:09:37,310
people don't pay as much attention to

220
00:09:31,790 --> 00:09:39,410
and so Google's got some in their

221
00:09:37,310 --> 00:09:42,619
published papers and Facebook as well

222
00:09:39,410 --> 00:09:44,569
they basically talked about how really

223
00:09:42,620 --> 00:09:46,310
utterly important it is to integrate

224
00:09:44,569 --> 00:09:49,250
these tools and developer workflow as

225
00:09:46,310 --> 00:09:50,779
well right so if people have to come out

226
00:09:49,250 --> 00:09:52,880
of where they're working and go into the

227
00:09:50,779 --> 00:09:54,709
static analysis tool you know getting

228
00:09:52,880 --> 00:09:56,630
people to adopt that and use it in

229
00:09:54,709 --> 00:09:59,689
practice is you're gonna be facing an

230
00:09:56,630 --> 00:10:01,220
uphill battle so that's that's a lot of

231
00:09:59,690 --> 00:10:03,560
the insights and so you really need to

232
00:10:01,220 --> 00:10:05,720
bake it into the processes and you can't

233
00:10:03,560 --> 00:10:07,430
just consider a static analysis tool in

234
00:10:05,720 --> 00:10:10,100
isolation right like that's not how it

235
00:10:07,430 --> 00:10:11,839
works we have environments where you're

236
00:10:10,100 --> 00:10:13,370
doing development and the static

237
00:10:11,839 --> 00:10:16,009
analysis is going to fit in this

238
00:10:13,370 --> 00:10:19,329
environment right so here we've got a

239
00:10:16,009 --> 00:10:21,079
simple diagram where we've got

240
00:10:19,329 --> 00:10:23,329
developers writing code down here

241
00:10:21,079 --> 00:10:24,949
checking it into version control maybe

242
00:10:23,329 --> 00:10:28,008
it's getting automatically built for

243
00:10:24,949 --> 00:10:30,019
them and you've got artifact

244
00:10:28,009 --> 00:10:33,110
repositories and testing taking place

245
00:10:30,019 --> 00:10:35,870
right so in this system there are there

246
00:10:33,110 --> 00:10:38,300
are multiple stakeholders who need to

247
00:10:35,870 --> 00:10:41,389
look at the results and use it Oh

248
00:10:38,300 --> 00:10:43,069
actually broke this down and forgot so

249
00:10:41,389 --> 00:10:46,870
first let's look at where it needs to

250
00:10:43,069 --> 00:10:49,279
run right so the analyzer needs to run

251
00:10:46,870 --> 00:10:50,870
it can run in different places so

252
00:10:49,279 --> 00:10:53,240
there's actually different levels of

253
00:10:50,870 --> 00:10:55,009
analysis some actually you can run right

254
00:10:53,240 --> 00:10:57,740
in the developers IDE or on their

255
00:10:55,009 --> 00:10:59,779
workstation some might need a separate

256
00:10:57,740 --> 00:11:02,720
standalone server with more compute that

257
00:10:59,779 --> 00:11:05,269
you can dedicate and maybe some run

258
00:11:02,720 --> 00:11:09,110
right in the build server itself and

259
00:11:05,269 --> 00:11:11,660
then there's different features within

260
00:11:09,110 --> 00:11:14,779
each of these deployments right so is it

261
00:11:11,660 --> 00:11:16,610
can it analyzer handle live coding

262
00:11:14,779 --> 00:11:17,959
updates is it giving live feedback or do

263
00:11:16,610 --> 00:11:21,350
I need to kind of kick it off on a

264
00:11:17,959 --> 00:11:23,268
pre-commit hook things like that on the

265
00:11:21,350 --> 00:11:25,220
sketch on the standalone server maybe it

266
00:11:23,269 --> 00:11:27,019
takes a long time to run maybe you want

267
00:11:25,220 --> 00:11:29,480
to run that nightly do I have the

268
00:11:27,019 --> 00:11:31,730
ability to schedule it these are these

269
00:11:29,480 --> 00:11:33,920
are capabilities that all analyzers

270
00:11:31,730 --> 00:11:34,769
offer that you should be looking at to

271
00:11:33,920 --> 00:11:40,679
see if there

272
00:11:34,769 --> 00:11:45,360
me meet your needs what inputs does it

273
00:11:40,679 --> 00:11:47,610
require so different analyzers require

274
00:11:45,360 --> 00:11:50,610
different inputs and so that's gonna be

275
00:11:47,610 --> 00:11:52,739
related to the deployment location and

276
00:11:50,610 --> 00:11:54,839
maybe you know some of these things

277
00:11:52,739 --> 00:11:56,730
maybe you want to run static analysis on

278
00:11:54,839 --> 00:11:58,230
third-party libraries that you've

279
00:11:56,730 --> 00:12:00,660
acquired that you don't have access to

280
00:11:58,230 --> 00:12:01,860
the source so if the analyzer requires

281
00:12:00,660 --> 00:12:03,540
source code you're not going to be able

282
00:12:01,860 --> 00:12:05,879
to use that analyzer right so you need

283
00:12:03,540 --> 00:12:07,319
to be looking at the types of analyzers

284
00:12:05,879 --> 00:12:09,899
and the inputs that you can provide that

285
00:12:07,319 --> 00:12:13,618
analyzer in order to to make it all work

286
00:12:09,899 --> 00:12:17,249
and then the stakeholders that I

287
00:12:13,619 --> 00:12:19,799
mentioned managers have different

288
00:12:17,249 --> 00:12:22,110
information needs than developers then

289
00:12:19,799 --> 00:12:24,809
security and audit staff right and all

290
00:12:22,110 --> 00:12:28,799
of them are interested and often in the

291
00:12:24,809 --> 00:12:29,999
outputs of static analysis just talking

292
00:12:28,799 --> 00:12:34,410
a little bit about these API

293
00:12:29,999 --> 00:12:36,269
integrations so one common way one

294
00:12:34,410 --> 00:12:38,399
common thing that you need to do with an

295
00:12:36,269 --> 00:12:40,709
analyzer is get information out of the

296
00:12:38,399 --> 00:12:42,839
analyzers and you can do that with

297
00:12:40,709 --> 00:12:44,819
things like the Seraph format which is a

298
00:12:42,839 --> 00:12:48,179
static analysis results interchange

299
00:12:44,819 --> 00:12:49,740
format or just APL or you know json and

300
00:12:48,179 --> 00:12:52,290
things like that

301
00:12:49,740 --> 00:12:55,439
a lot of the tools actually have their

302
00:12:52,290 --> 00:12:59,490
own dedicated integrations with things

303
00:12:55,439 --> 00:13:02,248
like issue trackers and systems like

304
00:12:59,490 --> 00:13:04,079
that right we're tracking systems and

305
00:13:02,249 --> 00:13:05,819
and then there's also vulnerability

306
00:13:04,079 --> 00:13:09,059
management systems so as you start using

307
00:13:05,819 --> 00:13:10,860
more analyzers oftentimes you'll find

308
00:13:09,059 --> 00:13:12,600
that it's challenging to manage all

309
00:13:10,860 --> 00:13:14,670
those the results from all those

310
00:13:12,600 --> 00:13:16,499
different tools so you want a tool that

311
00:13:14,670 --> 00:13:19,349
can correlate and normalize all that

312
00:13:16,499 --> 00:13:22,150
tools and the one common system and

313
00:13:19,350 --> 00:13:24,070
there are tools for that

314
00:13:22,150 --> 00:13:26,110
okay that was the process integration

315
00:13:24,070 --> 00:13:27,339
slide that was on there's a lot of

316
00:13:26,110 --> 00:13:28,930
things to pay attention to when you're

317
00:13:27,339 --> 00:13:32,050
thinking about process integration right

318
00:13:28,930 --> 00:13:34,620
people technologies all and tying in

319
00:13:32,050 --> 00:13:37,180
with all the things that you've got

320
00:13:34,620 --> 00:13:38,830
speed and scalability so this is pretty

321
00:13:37,180 --> 00:13:41,650
much like can it do the things you need

322
00:13:38,830 --> 00:13:44,890
it to do and the things that you needed

323
00:13:41,650 --> 00:13:46,270
to do people usually think of time and

324
00:13:44,890 --> 00:13:50,470
they think of static analysis but

325
00:13:46,270 --> 00:13:54,939
there's code base size or code base

326
00:13:50,470 --> 00:13:59,380
complexity right these are the these are

327
00:13:54,940 --> 00:14:01,029
the things here so some analyzers will

328
00:13:59,380 --> 00:14:03,400
exhaust memory if like you've got a

329
00:14:01,029 --> 00:14:05,410
really complex problem right a big

330
00:14:03,400 --> 00:14:08,199
application and you try to do it all at

331
00:14:05,410 --> 00:14:10,329
once so how much of the code base you

332
00:14:08,200 --> 00:14:12,339
can analyze at any one time is something

333
00:14:10,330 --> 00:14:13,900
you need to pay attention to how many

334
00:14:12,339 --> 00:14:15,820
projects can be scanned maybe that's

335
00:14:13,900 --> 00:14:17,160
just a licensing constraint but it's

336
00:14:15,820 --> 00:14:19,450
something you need to pay attention to

337
00:14:17,160 --> 00:14:20,860
and how long it takes to work so there

338
00:14:19,450 --> 00:14:22,360
are a lot of different checkers written

339
00:14:20,860 --> 00:14:23,710
into analyzers and analyzers have

340
00:14:22,360 --> 00:14:25,089
there's a bunch of different underlying

341
00:14:23,710 --> 00:14:31,060
technologies and they all work in

342
00:14:25,089 --> 00:14:34,150
different ways some of those analyses

343
00:14:31,060 --> 00:14:36,130
take lots of hours other forms of

344
00:14:34,150 --> 00:14:39,490
analyses are really quick like sub

345
00:14:36,130 --> 00:14:41,290
second or couple seconds right there

346
00:14:39,490 --> 00:14:42,790
just because it's a couple second check

347
00:14:41,290 --> 00:14:45,579
doesn't actually mean it's inferior

348
00:14:42,790 --> 00:14:47,349
sometimes you get just as good

349
00:14:45,580 --> 00:14:48,850
performance if not better out of these

350
00:14:47,350 --> 00:14:51,820
quick checks than you do the really

351
00:14:48,850 --> 00:14:53,529
in-depth ones where they're building big

352
00:14:51,820 --> 00:14:56,640
complex internal representations of your

353
00:14:53,529 --> 00:14:58,839
programs execution right so

354
00:14:56,640 --> 00:15:01,390
understanding how long it worked how

355
00:14:58,839 --> 00:15:05,080
long it takes and which checks are being

356
00:15:01,390 --> 00:15:07,740
run is important and then low-level

357
00:15:05,080 --> 00:15:10,029
things like does it have the ability to

358
00:15:07,740 --> 00:15:11,800
parallel lies like am I going to be able

359
00:15:10,029 --> 00:15:15,610
to deploy this in a way where it can

360
00:15:11,800 --> 00:15:17,410
scale up to the needs that I have Andrew

361
00:15:15,610 --> 00:15:19,120
and reporting here so getting the

362
00:15:17,410 --> 00:15:20,949
information out of the analyzer right

363
00:15:19,120 --> 00:15:23,080
the analyzer finds that learns all this

364
00:15:20,950 --> 00:15:27,610
stuff about your software and then you

365
00:15:23,080 --> 00:15:30,130
want to learn about it so does it have

366
00:15:27,610 --> 00:15:32,110
its own dedicated user interface right

367
00:15:30,130 --> 00:15:36,600
or is it just spitting out stuff onto

368
00:15:32,110 --> 00:15:39,040
the command line or an XML file right

369
00:15:36,600 --> 00:15:43,030
reporting so when you're having audit

370
00:15:39,040 --> 00:15:44,800
teams come in later being able to report

371
00:15:43,030 --> 00:15:46,630
or management being able to come in and

372
00:15:44,800 --> 00:15:49,060
look does it have hierarchical reporting

373
00:15:46,630 --> 00:15:54,400
can I roll up like divisions findings

374
00:15:49,060 --> 00:15:56,709
and put it into some review do I have

375
00:15:54,400 --> 00:15:58,090
role based access in that product so do

376
00:15:56,710 --> 00:16:01,980
auditors see different things than

377
00:15:58,090 --> 00:16:05,680
developers see than security staff

378
00:16:01,980 --> 00:16:08,200
suppression is a popular feature once

379
00:16:05,680 --> 00:16:09,670
you've looked at an issue that's called

380
00:16:08,200 --> 00:16:11,950
a triage process where you're going

381
00:16:09,670 --> 00:16:15,880
through the findings not all the issues

382
00:16:11,950 --> 00:16:17,140
are always real they're not necessarily

383
00:16:15,880 --> 00:16:19,990
a false positive but maybe you just

384
00:16:17,140 --> 00:16:21,910
don't care about them right so and it

385
00:16:19,990 --> 00:16:25,390
gets complicated when you care about a

386
00:16:21,910 --> 00:16:27,400
check in one place but not another

387
00:16:25,390 --> 00:16:30,010
so you basically you don't want to just

388
00:16:27,400 --> 00:16:31,120
turn off the whole rule you just don't

389
00:16:30,010 --> 00:16:32,860
want to know about it in this one

390
00:16:31,120 --> 00:16:35,500
instance right and that's called

391
00:16:32,860 --> 00:16:36,880
suppression and so you can there's

392
00:16:35,500 --> 00:16:38,770
different strategies for suppressing

393
00:16:36,880 --> 00:16:40,990
findings but basically you're telling

394
00:16:38,770 --> 00:16:42,790
that analyzed are like hey stop telling

395
00:16:40,990 --> 00:16:43,120
me about this I know I don't care

396
00:16:42,790 --> 00:16:46,180
anymore

397
00:16:43,120 --> 00:16:49,089
right that's an important capability and

398
00:16:46,180 --> 00:16:51,550
then showing differences understanding

399
00:16:49,089 --> 00:16:53,500
how things are evolving and then last

400
00:16:51,550 --> 00:16:57,520
category here before I get into the some

401
00:16:53,500 --> 00:16:59,680
of the meteor ones support so does the

402
00:16:57,520 --> 00:17:01,210
analyzer have documentation on how to

403
00:16:59,680 --> 00:17:06,119
use it how to integrate it into your

404
00:17:01,210 --> 00:17:09,400
environment and the project health so

405
00:17:06,119 --> 00:17:14,919
what we found for the project helped so

406
00:17:09,400 --> 00:17:17,050
it's it's important to a lot of the

407
00:17:14,920 --> 00:17:19,420
times you might want to analyzer that's

408
00:17:17,050 --> 00:17:21,099
supported right so maybe the tool does

409
00:17:19,420 --> 00:17:22,720
exactly what you need and it's going to

410
00:17:21,099 --> 00:17:25,389
be fine and you don't really need it to

411
00:17:22,720 --> 00:17:27,910
evolve but usually technology is moving

412
00:17:25,390 --> 00:17:30,820
around at a pace where you want that you

413
00:17:27,910 --> 00:17:32,470
want an active community so that as your

414
00:17:30,820 --> 00:17:34,720
framework changes and some breaking

415
00:17:32,470 --> 00:17:36,610
thing happens that community is going to

416
00:17:34,720 --> 00:17:39,040
be there to fix the analyzer and make it

417
00:17:36,610 --> 00:17:42,459
work on your new framework or whatever

418
00:17:39,040 --> 00:17:45,670
right measuring open source project

419
00:17:42,460 --> 00:17:47,770
health is its own thing there's a Linux

420
00:17:45,670 --> 00:17:50,770
Foundation chaos system that'll do

421
00:17:47,770 --> 00:17:53,950
Blackduck has their open hub measures

422
00:17:50,770 --> 00:17:55,450
that's a publicly public website so we

423
00:17:53,950 --> 00:17:56,650
found it's better just to link to those

424
00:17:55,450 --> 00:17:59,170
because there are a lot of different

425
00:17:56,650 --> 00:18:01,750
measures of community how big it is the

426
00:17:59,170 --> 00:18:03,400
commit frequency the I know there's a

427
00:18:01,750 --> 00:18:06,550
bunch of metrics you can look up on

428
00:18:03,400 --> 00:18:09,250
those so now getting into some of the

429
00:18:06,550 --> 00:18:11,440
more technical measures of analyzers

430
00:18:09,250 --> 00:18:14,470
performance these next two categories

431
00:18:11,440 --> 00:18:16,600
are coverage and results quality so

432
00:18:14,470 --> 00:18:18,640
coverage is really important and it's

433
00:18:16,600 --> 00:18:19,899
the extent to which and an analyzer can

434
00:18:18,640 --> 00:18:23,170
actually look for things in your

435
00:18:19,900 --> 00:18:25,929
software and that's really about two

436
00:18:23,170 --> 00:18:27,880
questions so first of all we'll work on

437
00:18:25,929 --> 00:18:30,160
the software that I have right so if I

438
00:18:27,880 --> 00:18:32,590
have C you know Java analyzer is not

439
00:18:30,160 --> 00:18:36,250
gonna be so good for you and if I have

440
00:18:32,590 --> 00:18:38,559
source code or binaries right it's gotta

441
00:18:36,250 --> 00:18:40,929
accept those inputs and then the second

442
00:18:38,559 --> 00:18:43,270
one is is much more thorny right and

443
00:18:40,929 --> 00:18:48,160
it's about can the analyzer find the

444
00:18:43,270 --> 00:18:51,250
issues that matter to you and so we know

445
00:18:48,160 --> 00:18:53,200
from NSA research that analyzers one

446
00:18:51,250 --> 00:18:56,440
anyone to analyze our own average is

447
00:18:53,200 --> 00:18:59,679
only going to find about 14% of all the

448
00:18:56,440 --> 00:19:01,270
types of problems that we know to check

449
00:18:59,679 --> 00:19:03,820
for right the static analyzers are

450
00:19:01,270 --> 00:19:06,340
capable of checking for one of them is

451
00:19:03,820 --> 00:19:07,510
not gonna find very many of those so

452
00:19:06,340 --> 00:19:12,309
that's sort of suggest you're going to

453
00:19:07,510 --> 00:19:15,550
need multiple analyzers but there's this

454
00:19:12,309 --> 00:19:17,500
idea of coverage and it's specifically

455
00:19:15,550 --> 00:19:19,389
its weakness coverage like the types of

456
00:19:17,500 --> 00:19:22,600
weaknesses that exist in your code that

457
00:19:19,390 --> 00:19:25,300
you want to be able to find and then

458
00:19:22,600 --> 00:19:27,399
results quality which is how well it can

459
00:19:25,300 --> 00:19:30,490
detect those issues and then how useful

460
00:19:27,400 --> 00:19:34,600
those issues are to the people who need

461
00:19:30,490 --> 00:19:36,640
to consume them and so this also breaks

462
00:19:34,600 --> 00:19:38,320
down into two questions so can the

463
00:19:36,640 --> 00:19:40,780
people who are reading the results of

464
00:19:38,320 --> 00:19:45,450
the analyzer understand it and do useful

465
00:19:40,780 --> 00:19:45,450
things like fix the problem right or or

466
00:19:45,840 --> 00:19:51,280
determine if there's enough risk there

467
00:19:47,740 --> 00:19:53,800
that they want to worry about it so a

468
00:19:51,280 --> 00:19:55,690
lot of these analyzers you know have

469
00:19:53,800 --> 00:19:58,570
explanations that are paired with their

470
00:19:55,690 --> 00:20:00,750
output sometimes they can give you a

471
00:19:58,570 --> 00:20:02,399
confidence so it's not necessary

472
00:20:00,750 --> 00:20:04,020
deterministic that there's a problem but

473
00:20:02,400 --> 00:20:07,770
they can tell you like I'm pretty sure

474
00:20:04,020 --> 00:20:09,930
you know maybe not and then a lot of the

475
00:20:07,770 --> 00:20:11,700
context so one of the things that's

476
00:20:09,930 --> 00:20:13,560
helpful to a human who's trying to

477
00:20:11,700 --> 00:20:15,390
understand the result is where it is in

478
00:20:13,560 --> 00:20:17,850
the codebase where it is in the data

479
00:20:15,390 --> 00:20:20,160
flow or the control flow and understand

480
00:20:17,850 --> 00:20:23,520
why that analyzes are kind of thinks

481
00:20:20,160 --> 00:20:26,070
about that right helps you under helps

482
00:20:23,520 --> 00:20:28,350
you basically check that you agree with

483
00:20:26,070 --> 00:20:30,030
the result and then how well does it

484
00:20:28,350 --> 00:20:31,949
detect issues so the technical

485
00:20:30,030 --> 00:20:35,639
performance measures so we're looking at

486
00:20:31,950 --> 00:20:37,500
here things like the ability of the

487
00:20:35,640 --> 00:20:44,400
analyzer to do the recall on that

488
00:20:37,500 --> 00:20:46,470
coverage right so basically like how

489
00:20:44,400 --> 00:20:49,740
many different types of issues can the

490
00:20:46,470 --> 00:20:52,140
analyzer find and of the things that it

491
00:20:49,740 --> 00:20:53,790
can find how often does it tell you

492
00:20:52,140 --> 00:20:56,370
something that's true versus something

493
00:20:53,790 --> 00:20:59,760
that's false so if it's giving you a

494
00:20:56,370 --> 00:21:01,409
warning oftentimes a lot of those

495
00:20:59,760 --> 00:21:03,900
warnings are actually not really

496
00:21:01,410 --> 00:21:06,030
problems right so we can that's that's

497
00:21:03,900 --> 00:21:07,740
you can measure that with metrics like

498
00:21:06,030 --> 00:21:09,120
precision and accuracy they're all

499
00:21:07,740 --> 00:21:12,450
subtly different but they get it the

500
00:21:09,120 --> 00:21:14,040
same idea so those are the things that

501
00:21:12,450 --> 00:21:16,500
you should be paying attention to when

502
00:21:14,040 --> 00:21:17,610
you're looking at analyzers and so now I

503
00:21:16,500 --> 00:21:21,240
want to tell you about the compare

504
00:21:17,610 --> 00:21:22,889
platform so compare is actually much

505
00:21:21,240 --> 00:21:24,570
more than just the website that's the

506
00:21:22,890 --> 00:21:26,160
public face of it it's actually the set

507
00:21:24,570 --> 00:21:27,720
of technologies that we're using to

508
00:21:26,160 --> 00:21:30,510
gather all the information about these

509
00:21:27,720 --> 00:21:33,840
analyzers and then also do benchmarking

510
00:21:30,510 --> 00:21:36,360
to get at some of that results quality

511
00:21:33,840 --> 00:21:38,149
information about false positive rates

512
00:21:36,360 --> 00:21:40,800
and things like that that I mentioned

513
00:21:38,150 --> 00:21:42,680
and so a big part of this is going to be

514
00:21:40,800 --> 00:21:46,710
getting the right test Suites in place

515
00:21:42,680 --> 00:21:49,020
that's a challenge but it's a it's an

516
00:21:46,710 --> 00:21:51,390
important one so we will use these test

517
00:21:49,020 --> 00:21:53,730
Suites to run the analyzers against them

518
00:21:51,390 --> 00:21:56,820
see how long they take to run and then

519
00:21:53,730 --> 00:21:58,230
also whether they're actually finding

520
00:21:56,820 --> 00:21:59,820
things which types of things they're

521
00:21:58,230 --> 00:22:01,020
finding and we're probably going to be

522
00:21:59,820 --> 00:22:05,100
measuring that against the claimed

523
00:22:01,020 --> 00:22:07,620
coverage right so it doesn't really make

524
00:22:05,100 --> 00:22:09,510
sense to dock somebody points if they're

525
00:22:07,620 --> 00:22:12,330
not even trying to find it right so if

526
00:22:09,510 --> 00:22:14,640
we can capture in our model of a tool

527
00:22:12,330 --> 00:22:16,439
what it's trying to go after then

528
00:22:14,640 --> 00:22:18,120
we can measure how well it's going after

529
00:22:16,440 --> 00:22:19,950
what it's claiming right

530
00:22:18,120 --> 00:22:24,229
it's like billiards it's like calling

531
00:22:19,950 --> 00:22:24,230
your shot yeah

532
00:22:39,410 --> 00:22:44,270
yeah they're gonna be there we're gonna

533
00:22:41,820 --> 00:22:47,790
we're gonna extend existing open-source

534
00:22:44,270 --> 00:22:51,960
test Suites so National Institutes of

535
00:22:47,790 --> 00:22:55,620
Standards and Technology NIST has test

536
00:22:51,960 --> 00:22:58,890
Suites for largely C C++ and Java so

537
00:22:55,620 --> 00:23:01,560
there's one test suite for c c++ called

538
00:22:58,890 --> 00:23:03,540
juliet that's those are artificially

539
00:23:01,560 --> 00:23:05,610
constructed test cases so it's it's a

540
00:23:03,540 --> 00:23:09,570
custom written code that's there to

541
00:23:05,610 --> 00:23:12,000
illustrate a problem people have some

542
00:23:09,570 --> 00:23:16,560
problems with the artificial test cases

543
00:23:12,000 --> 00:23:21,180
right wasp has a benchmark for java and

544
00:23:16,560 --> 00:23:23,580
then there are also whole code bases

545
00:23:21,180 --> 00:23:24,810
like asterisk is one and there's a

546
00:23:23,580 --> 00:23:27,120
couple others that I don't remember

547
00:23:24,810 --> 00:23:29,370
offhand that actually were we've got the

548
00:23:27,120 --> 00:23:30,810
C V's disclosed against them and so if

549
00:23:29,370 --> 00:23:33,570
you pick an own version of an

550
00:23:30,810 --> 00:23:35,580
application we can basically scan those

551
00:23:33,570 --> 00:23:37,679
applications and the real applications

552
00:23:35,580 --> 00:23:39,659
open-source applications we can scan

553
00:23:37,680 --> 00:23:42,270
them and then we know where there are

554
00:23:39,660 --> 00:23:44,460
specific weaknesses of a specific type

555
00:23:42,270 --> 00:23:46,230
in a code location right and then we can

556
00:23:44,460 --> 00:23:48,620
see if the analyzers are going to attack

557
00:23:46,230 --> 00:23:51,420
them or not and use that to generate

558
00:23:48,620 --> 00:23:54,260
metrics so I'd answer your question

559
00:23:51,420 --> 00:23:54,260
about the test Suites

560
00:24:07,800 --> 00:24:13,149
yeah the the test Suites is always a

561
00:24:10,240 --> 00:24:16,000
sticky issue and the particulars of it

562
00:24:13,150 --> 00:24:18,010
I think our perspective is that

563
00:24:16,000 --> 00:24:21,880
something is better than nothing so they

564
00:24:18,010 --> 00:24:25,510
might not be perfect but you know I

565
00:24:21,880 --> 00:24:27,760
could write a I could write yeah I write

566
00:24:25,510 --> 00:24:29,410
analyzers that's full disclosure but I

567
00:24:27,760 --> 00:24:31,090
could write an analyzer that gets a

568
00:24:29,410 --> 00:24:34,840
perfect hundred percents or I would just

569
00:24:31,090 --> 00:24:36,580
always warn right but that's not

570
00:24:34,840 --> 00:24:39,639
practically useful so it's it's a much

571
00:24:36,580 --> 00:24:40,870
more complicated answer like but what

572
00:24:39,640 --> 00:24:42,580
we're going to be trying to do is

573
00:24:40,870 --> 00:24:45,330
distill the information all that lower

574
00:24:42,580 --> 00:24:47,850
level information about coverage and

575
00:24:45,330 --> 00:24:50,260
precision recall things like that and

576
00:24:47,850 --> 00:24:52,120
distill that up into something where you

577
00:24:50,260 --> 00:24:54,490
can look at it maybe it has a score or a

578
00:24:52,120 --> 00:24:56,409
few scores and so we're really going to

579
00:24:54,490 --> 00:25:00,460
be working to distill that information

580
00:24:56,410 --> 00:25:01,870
and make it useful and so we'll be so

581
00:25:00,460 --> 00:25:04,390
we're going to be open sourcing all the

582
00:25:01,870 --> 00:25:06,040
test Suites that we use we're probably

583
00:25:04,390 --> 00:25:07,720
going to not write most of them

584
00:25:06,040 --> 00:25:10,060
ourselves we'll probably extend in or

585
00:25:07,720 --> 00:25:12,880
modify existing ones and they're all

586
00:25:10,060 --> 00:25:15,790
open-source already and then we are

587
00:25:12,880 --> 00:25:17,350
going to have orchestration to run that

588
00:25:15,790 --> 00:25:18,909
we're going to build automation to run

589
00:25:17,350 --> 00:25:22,000
these analyzers against those test

590
00:25:18,910 --> 00:25:24,730
Suites and generate that results quality

591
00:25:22,000 --> 00:25:26,380
information so there's and then there's

592
00:25:24,730 --> 00:25:28,360
automation that you need to label the

593
00:25:26,380 --> 00:25:30,190
results and give them credit give their

594
00:25:28,360 --> 00:25:31,719
analyzers credit for finding things are

595
00:25:30,190 --> 00:25:34,120
not finding things and there's actually

596
00:25:31,720 --> 00:25:36,220
difficulties in there because there's

597
00:25:34,120 --> 00:25:38,350
multiple valid reportable locations for

598
00:25:36,220 --> 00:25:41,440
any type of defect right so if you think

599
00:25:38,350 --> 00:25:45,399
about a within a method right you've got

600
00:25:41,440 --> 00:25:47,740
maybe a statement where you you

601
00:25:45,400 --> 00:25:49,480
dereference a null I'm just gonna do C

602
00:25:47,740 --> 00:25:51,480
cuz it's easier for me okay you

603
00:25:49,480 --> 00:25:54,790
dereference a null pointer right

604
00:25:51,480 --> 00:25:57,100
you could you could basically validly

605
00:25:54,790 --> 00:25:58,629
say like maybe it's that the method

606
00:25:57,100 --> 00:26:00,100
level you want to declare that like in

607
00:25:58,630 --> 00:26:01,600
this method like there's an all day

608
00:26:00,100 --> 00:26:04,030
reference or maybe you want to declare

609
00:26:01,600 --> 00:26:05,980
it back when the the variable got

610
00:26:04,030 --> 00:26:07,600
instantiated like this thing's gonna go

611
00:26:05,980 --> 00:26:09,310
no or where it actually gets to

612
00:26:07,600 --> 00:26:11,199
reference this may be the problem right

613
00:26:09,310 --> 00:26:13,000
but those are all kind of you showed

614
00:26:11,200 --> 00:26:14,890
those all to a developer they might not

615
00:26:13,000 --> 00:26:16,180
there and be like yeah I see what you're

616
00:26:14,890 --> 00:26:18,580
getting at and these are all valid

617
00:26:16,180 --> 00:26:20,410
reportable locations right and so for

618
00:26:18,580 --> 00:26:22,510
from the giving the result given

619
00:26:20,410 --> 00:26:25,570
analyzers credit standpoint makes her

620
00:26:22,510 --> 00:26:28,240
life very difficult because if an

621
00:26:25,570 --> 00:26:30,159
analyzer tells me something and it

622
00:26:28,240 --> 00:26:31,810
doesn't exactly match to the line number

623
00:26:30,160 --> 00:26:33,190
that I was expecting I'm not gonna give

624
00:26:31,810 --> 00:26:34,899
it credit but maybe it should have

625
00:26:33,190 --> 00:26:37,060
gotten credit right so that's one of the

626
00:26:34,900 --> 00:26:38,620
issues that there is when it comes to

627
00:26:37,060 --> 00:26:40,570
benchmarking these things so that's

628
00:26:38,620 --> 00:26:42,820
something we're gonna work through I

629
00:26:40,570 --> 00:26:44,290
think we have an approach I don't have

630
00:26:42,820 --> 00:26:46,439
the details but we're gonna be

631
00:26:44,290 --> 00:26:48,399
publishing all our methodologies and

632
00:26:46,440 --> 00:26:50,620
that's actually one of the reasons I'm

633
00:26:48,400 --> 00:26:52,900
here is to get feedback so if people

634
00:26:50,620 --> 00:26:54,939
have opinions on how to do this or

635
00:26:52,900 --> 00:26:57,010
they've tried to do this already please

636
00:26:54,940 --> 00:26:59,710
come up and talk to me afterward I would

637
00:26:57,010 --> 00:27:01,300
love to hear your approaches and then

638
00:26:59,710 --> 00:27:02,590
there's also on the right hand side here

639
00:27:01,300 --> 00:27:04,780
all the collecting of that information

640
00:27:02,590 --> 00:27:07,110
so there are a lot of analyzers out

641
00:27:04,780 --> 00:27:09,850
there so we've identified about 600

642
00:27:07,110 --> 00:27:11,919
which is surprising I had no idea there

643
00:27:09,850 --> 00:27:13,620
were there many and a lot of them are

644
00:27:11,920 --> 00:27:16,000
really tiny and we probably won't

645
00:27:13,620 --> 00:27:18,610
catalog them we're gonna try to focus on

646
00:27:16,000 --> 00:27:20,200
ones that have good coverage over the

647
00:27:18,610 --> 00:27:23,320
weaknesses that we care about in the

648
00:27:20,200 --> 00:27:25,180
languages that are popular and get the

649
00:27:23,320 --> 00:27:27,760
most popular ones first and then work

650
00:27:25,180 --> 00:27:32,050
our way down but collecting all that

651
00:27:27,760 --> 00:27:34,060
information is what work and so here's

652
00:27:32,050 --> 00:27:36,730
just a block diagram view of the system

653
00:27:34,060 --> 00:27:40,090
so we have the top left corner is

654
00:27:36,730 --> 00:27:44,050
basically the website right everybody in

655
00:27:40,090 --> 00:27:45,909
this room would interface with we're

656
00:27:44,050 --> 00:27:48,669
thinking about having ratings and

657
00:27:45,910 --> 00:27:50,800
reviews so a lot of the license terms

658
00:27:48,670 --> 00:27:52,810
from the proprietary vendors our

659
00:27:50,800 --> 00:27:54,430
proprietary analyzers don't allow us to

660
00:27:52,810 --> 00:27:56,530
publish that results quality information

661
00:27:54,430 --> 00:27:58,600
I was talking about so we might use

662
00:27:56,530 --> 00:28:01,110
ratings from reviews as a surrogate we

663
00:27:58,600 --> 00:28:03,699
have other strategies to where we might

664
00:28:01,110 --> 00:28:05,949
support bake-offs internally within

665
00:28:03,700 --> 00:28:08,230
organizations so they have the

666
00:28:05,950 --> 00:28:11,380
evaluation licenses they're using our

667
00:28:08,230 --> 00:28:15,610
technology inside for the automation and

668
00:28:11,380 --> 00:28:17,230
running the bake-off and that way they

669
00:28:15,610 --> 00:28:18,909
have access to license they're only

670
00:28:17,230 --> 00:28:21,240
viewing the results for themselves and

671
00:28:18,910 --> 00:28:24,800
we don't have any disclosure problems

672
00:28:21,240 --> 00:28:30,350
databases the benchmarking

673
00:28:24,800 --> 00:28:32,389
and so today this says May so we were

674
00:28:30,350 --> 00:28:34,730
working under contract and then some

675
00:28:32,390 --> 00:28:36,860
funding things happened and we took a

676
00:28:34,730 --> 00:28:40,160
vacation for the summer and we just

677
00:28:36,860 --> 00:28:41,689
started beginning of September again so

678
00:28:40,160 --> 00:28:44,600
we're just just getting ramped up here

679
00:28:41,690 --> 00:28:46,010
or September 30 sorry so we're just in

680
00:28:44,600 --> 00:28:48,439
the first couple weeks of getting ramped

681
00:28:46,010 --> 00:28:51,320
back up but what we've built so far is

682
00:28:48,440 --> 00:28:53,930
this site here so we've got a landing

683
00:28:51,320 --> 00:28:57,230
page we've got a list of the analyzers

684
00:28:53,930 --> 00:28:58,820
that weari catalog and you can do some

685
00:28:57,230 --> 00:29:00,950
filtering on that so you can filter by

686
00:28:58,820 --> 00:29:03,230
programming language or actually any of

687
00:29:00,950 --> 00:29:05,720
the attributes that we store so there's

688
00:29:03,230 --> 00:29:07,430
a filtering control at the top of that

689
00:29:05,720 --> 00:29:09,950
list and it just drinks right down as

690
00:29:07,430 --> 00:29:11,660
you add criteria so you could filter for

691
00:29:09,950 --> 00:29:13,220
open source or free tools you could

692
00:29:11,660 --> 00:29:16,280
filter on the language whatever you want

693
00:29:13,220 --> 00:29:19,130
and then here we've got the details page

694
00:29:16,280 --> 00:29:21,020
so if you click on any one analyzer you

695
00:29:19,130 --> 00:29:22,850
can see it's it's details so we've got

696
00:29:21,020 --> 00:29:25,810
the seven categories and all the

697
00:29:22,850 --> 00:29:29,090
informations catalogued in there and

698
00:29:25,810 --> 00:29:31,340
then first a couple of the tools so

699
00:29:29,090 --> 00:29:34,909
clang is one that's the clang static

700
00:29:31,340 --> 00:29:37,419
analyzer we have benchmarking data from

701
00:29:34,910 --> 00:29:40,460
an older version of it courtesy of NIST

702
00:29:37,420 --> 00:29:42,770
and we present that information here

703
00:29:40,460 --> 00:29:44,870
some of those metrics about how well

704
00:29:42,770 --> 00:29:46,580
it's doing so here you can kind of see

705
00:29:44,870 --> 00:29:51,070
it's like a little grid there are a

706
00:29:46,580 --> 00:29:53,419
hundred circles there and it's finding I

707
00:29:51,070 --> 00:29:55,669
don't know what it was it's like three

708
00:29:53,420 --> 00:29:57,050
six nine it's like ten of ten of 100

709
00:29:55,670 --> 00:30:01,220
right so it's got about ten percent

710
00:29:57,050 --> 00:30:04,460
coverage of the types of weaknesses and

711
00:30:01,220 --> 00:30:07,220
then it's throwing one false positive

712
00:30:04,460 --> 00:30:09,490
out of those ten so we had a visual

713
00:30:07,220 --> 00:30:14,600
representation of that performance there

714
00:30:09,490 --> 00:30:17,000
so we've got the 73 catalogued and one

715
00:30:14,600 --> 00:30:18,709
of the things that we've got built in so

716
00:30:17,000 --> 00:30:20,960
you can't really see in the screenshot

717
00:30:18,710 --> 00:30:22,580
but oftentimes we have missing

718
00:30:20,960 --> 00:30:24,230
information for analyzers so we've done

719
00:30:22,580 --> 00:30:25,790
our best job to go and get the

720
00:30:24,230 --> 00:30:27,440
information it's not always publicly

721
00:30:25,790 --> 00:30:29,360
available we've been doing outreach to

722
00:30:27,440 --> 00:30:33,380
the makers of them they're not always

723
00:30:29,360 --> 00:30:34,969
super responsive but in order to

724
00:30:33,380 --> 00:30:37,059
prioritize our efforts

725
00:30:34,970 --> 00:30:38,860
you know feedback from what

726
00:30:37,059 --> 00:30:40,799
people are interested in we built this

727
00:30:38,860 --> 00:30:44,320
little feature so you click it and

728
00:30:40,799 --> 00:30:46,179
registers on the back end for us hey I'd

729
00:30:44,320 --> 00:30:48,428
really love to see information here

730
00:30:46,179 --> 00:30:50,850
right so basically for each of the

731
00:30:48,429 --> 00:30:54,100
sections if it's missing you can vote

732
00:30:50,850 --> 00:30:55,658
and we get we see that on the back end

733
00:30:54,100 --> 00:30:58,990
right and we can use that to prioritize

734
00:30:55,659 --> 00:31:00,190
our efforts for data collection so some

735
00:30:58,990 --> 00:31:03,070
of the challenges I think I've talked

736
00:31:00,190 --> 00:31:04,480
through a lot of these collecting

737
00:31:03,070 --> 00:31:08,950
information by analyzer is a time

738
00:31:04,480 --> 00:31:10,659
consuming the benchmarking is is tricky

739
00:31:08,950 --> 00:31:14,169
so getting the right test suites in

740
00:31:10,659 --> 00:31:18,960
place giving those analyzers credit for

741
00:31:14,169 --> 00:31:21,159
detecting the real issues and really

742
00:31:18,960 --> 00:31:24,369
just getting this whole thing student

743
00:31:21,159 --> 00:31:26,139
right so it's it's a whole organization

744
00:31:24,369 --> 00:31:27,549
we're trying to stand up so we or the

745
00:31:26,139 --> 00:31:29,289
technical system right so we got to

746
00:31:27,549 --> 00:31:30,730
collect the information got to be able

747
00:31:29,289 --> 00:31:33,759
to generate benchmarking information

748
00:31:30,730 --> 00:31:36,940
publish it and then figure out how to

749
00:31:33,759 --> 00:31:38,919
make all this self-sustaining and so

750
00:31:36,940 --> 00:31:42,249
with that I'm gonna leave you with some

751
00:31:38,919 --> 00:31:45,519
URLs so there's the the website itself

752
00:31:42,249 --> 00:31:48,730
we've also got a couple surveys so the

753
00:31:45,519 --> 00:31:50,499
top survey is where anybody can come and

754
00:31:48,730 --> 00:31:53,110
just tell us like you know you should

755
00:31:50,499 --> 00:31:55,499
really know about whatever analyzer and

756
00:31:53,110 --> 00:31:57,908
I'd love to get it in the catalogue

757
00:31:55,499 --> 00:32:01,090
that's a very quick survey it takes like

758
00:31:57,909 --> 00:32:05,320
10 seconds to fill out the if you are

759
00:32:01,090 --> 00:32:06,999
the maker or vendor of an analyzer we

760
00:32:05,320 --> 00:32:09,939
have a much more detailed survey which

761
00:32:06,999 --> 00:32:12,309
basically for all those categories of

762
00:32:09,940 --> 00:32:14,950
information we have a forum where you

763
00:32:12,309 --> 00:32:16,899
can input the answers and then we can

764
00:32:14,950 --> 00:32:19,389
take that and put that into the catalog

765
00:32:16,899 --> 00:32:22,709
so that it'll display on the website so

766
00:32:19,389 --> 00:32:25,689
that's the detailed survey and then we

767
00:32:22,710 --> 00:32:27,429
if you are curious about the analyzers

768
00:32:25,690 --> 00:32:29,740
that we've found we have a Trello board

769
00:32:27,429 --> 00:32:32,080
where we sort of been using that to keep

770
00:32:29,740 --> 00:32:34,179
track of which analyzers we've collected

771
00:32:32,080 --> 00:32:36,249
information for so there's you'll see

772
00:32:34,179 --> 00:32:36,700
there are about six columns in there

773
00:32:36,249 --> 00:32:39,009
right

774
00:32:36,700 --> 00:32:40,360
so analyzers we know that exist but

775
00:32:39,009 --> 00:32:44,380
haven't gone and collected information

776
00:32:40,360 --> 00:32:46,360
for and then we have analyzers

777
00:32:44,380 --> 00:32:48,190
the collection we have like a little

778
00:32:46,360 --> 00:32:49,659
review an internal review process so

779
00:32:48,190 --> 00:32:51,850
there's a couple of those in process

780
00:32:49,660 --> 00:32:54,370
columns and then we have three columns

781
00:32:51,850 --> 00:32:56,439
on the right that basically amount to

782
00:32:54,370 --> 00:32:59,049
how much information we collected so

783
00:32:56,440 --> 00:33:02,049
just a little bit right like we just

784
00:32:59,049 --> 00:33:04,090
have the URL and of language and few

785
00:33:02,049 --> 00:33:06,970
other things versus we have a much more

786
00:33:04,090 --> 00:33:08,320
complete picture of that analyzer so

787
00:33:06,970 --> 00:33:09,970
we're trying to keep track of that and

788
00:33:08,320 --> 00:33:12,189
so we'll be building out that back-end

789
00:33:09,970 --> 00:33:14,110
technology for ourselves to manage that

790
00:33:12,190 --> 00:33:18,520
but for now we're using that trout low

791
00:33:14,110 --> 00:33:19,899
blood and so if anybody wants to email

792
00:33:18,520 --> 00:33:23,840
us that's we have that's our email

793
00:33:19,900 --> 00:33:30,710
address and that's the my talk

794
00:33:23,840 --> 00:33:30,709
[Applause]

795
00:33:36,120 --> 00:33:38,179
you

