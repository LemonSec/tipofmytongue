1
00:00:11,940 --> 00:00:32,278
[Music]

2
00:00:34,120 --> 00:00:39,468
as he said my name is Greg castle

3
00:00:36,590 --> 00:00:41,420
today's talks on baited Canaries this

4
00:00:39,469 --> 00:00:43,340
talk is a little bit on the shore set so

5
00:00:41,420 --> 00:00:49,670
we'll get you out of here and over to

6
00:00:43,340 --> 00:00:51,199
the bull-riding fairly quickly the team

7
00:00:49,670 --> 00:00:54,229
I'm responsible for over indeed is your

8
00:00:51,199 --> 00:00:55,579
typical AB sec variety collection of

9
00:00:54,229 --> 00:00:57,860
things red team's bug bounty

10
00:00:55,579 --> 00:00:59,559
vulnerability assessments design fees as

11
00:00:57,860 --> 00:01:04,330
he mentioned outside of work I do enjoy

12
00:00:59,559 --> 00:01:06,890
aquaponics beekeeping gaming etc so

13
00:01:04,330 --> 00:01:09,860
indeed purpose is to help people get

14
00:01:06,890 --> 00:01:12,080
jobs and we've been pretty successful at

15
00:01:09,860 --> 00:01:15,039
it so successful that deeds currently

16
00:01:12,080 --> 00:01:17,750
the number one job set in the world but

17
00:01:15,040 --> 00:01:18,650
running a successful site on the

18
00:01:17,750 --> 00:01:21,409
Internet

19
00:01:18,650 --> 00:01:23,659
comes with some downsides for today's

20
00:01:21,409 --> 00:01:25,880
talk or we'll be covering two different

21
00:01:23,659 --> 00:01:27,860
common attack scenarios that you might

22
00:01:25,880 --> 00:01:30,470
run across and how you can use Canaries

23
00:01:27,860 --> 00:01:32,119
in those attacks to gain more

24
00:01:30,470 --> 00:01:34,130
information about who's attacking your

25
00:01:32,119 --> 00:01:39,350
systems as well as identifying what

26
00:01:34,130 --> 00:01:41,600
users may have been attacked but before

27
00:01:39,350 --> 00:01:43,970
we get to those snares let's define

28
00:01:41,600 --> 00:01:46,039
Canaries real quick historically

29
00:01:43,970 --> 00:01:49,460
speaking Canaries are an allusion to a

30
00:01:46,040 --> 00:01:52,190
caged birds that miners would take into

31
00:01:49,460 --> 00:01:54,229
mines with them if dangerous gases such

32
00:01:52,190 --> 00:01:56,210
as carbon dioxide were present in the

33
00:01:54,229 --> 00:01:58,250
mine the gases would kill the bird first

34
00:01:56,210 --> 00:01:59,779
thus alerting the miners that

35
00:01:58,250 --> 00:02:02,479
something's wrong and they hightail it

36
00:01:59,780 --> 00:02:04,970
out there as quickly as possible with an

37
00:02:02,479 --> 00:02:07,549
InfoSec they can be thought of as a type

38
00:02:04,970 --> 00:02:09,019
of honeypot typically used with the

39
00:02:07,549 --> 00:02:12,709
production systems rather than a

40
00:02:09,019 --> 00:02:14,420
simulated system and they also usually

41
00:02:12,709 --> 00:02:19,189
utilize some sort of canary token to

42
00:02:14,420 --> 00:02:21,980
track compromised canary and honey

43
00:02:19,189 --> 00:02:24,379
tokens are just some unique bits of

44
00:02:21,980 --> 00:02:26,959
string that should only ever exist in a

45
00:02:24,379 --> 00:02:29,480
single location and if you ever find

46
00:02:26,959 --> 00:02:31,390
those tokens in any other location at

47
00:02:29,480 --> 00:02:35,000
all you know someone's been tampering

48
00:02:31,390 --> 00:02:37,189
around in your stuff you don't necessary

49
00:02:35,000 --> 00:02:41,090
necessarily know who or when they did

50
00:02:37,189 --> 00:02:43,420
that active Canaries just take that

51
00:02:41,090 --> 00:02:46,240
single-use signal and

52
00:02:43,420 --> 00:02:51,519
did use something more intelligent or

53
00:02:46,240 --> 00:02:53,650
persistent that's what an active K in

54
00:02:51,520 --> 00:02:54,760
general what you know why do Canaries

55
00:02:53,650 --> 00:02:56,800
work at all

56
00:02:54,760 --> 00:02:59,290
attackers aren't perfect like most

57
00:02:56,800 --> 00:03:04,150
people with present company excluded I'm

58
00:02:59,290 --> 00:03:06,760
sure and you know they may not realize

59
00:03:04,150 --> 00:03:09,459
that the the data they're taking or

60
00:03:06,760 --> 00:03:14,140
these systems they're accessing might be

61
00:03:09,459 --> 00:03:16,660
telling on them so to speak so for a

62
00:03:14,140 --> 00:03:19,179
first attack scenario I'm sure you're

63
00:03:16,660 --> 00:03:23,380
familiar with phishing sites being used

64
00:03:19,180 --> 00:03:26,170
to steal users credentials in our case

65
00:03:23,380 --> 00:03:28,209
an attacker might spin up a indeed calm

66
00:03:26,170 --> 00:03:31,119
look-alike domain to target both our

67
00:03:28,209 --> 00:03:32,890
jobseekers and employers beyond just

68
00:03:31,120 --> 00:03:35,650
connect collecting credentials that can

69
00:03:32,890 --> 00:03:37,690
be reused anywhere else our accounts

70
00:03:35,650 --> 00:03:43,140
themselves have values have value to the

71
00:03:37,690 --> 00:03:46,390
attackers the for example with

72
00:03:43,140 --> 00:03:49,238
compromised employer accounts attacker

73
00:03:46,390 --> 00:03:51,760
can reliably scam job seekers through

74
00:03:49,239 --> 00:03:53,709
various iterations of like fake check

75
00:03:51,760 --> 00:03:57,578
cashing schemes or just stealing their

76
00:03:53,709 --> 00:04:00,760
their information for user identity

77
00:03:57,579 --> 00:04:02,739
theft later or with even just with a job

78
00:04:00,760 --> 00:04:04,328
seeker account they can use that to

79
00:04:02,739 --> 00:04:07,780
attack employers themselves by

80
00:04:04,329 --> 00:04:10,720
submitting malicious resumes outside of

81
00:04:07,780 --> 00:04:15,160
our normal resume flow or just as in

82
00:04:10,720 --> 00:04:18,010
spam unfortunately protecting the trust

83
00:04:15,160 --> 00:04:21,668
and safety of our users is difficult

84
00:04:18,010 --> 00:04:23,169
when they aren't even on our site we

85
00:04:21,668 --> 00:04:25,750
might not even find out about the

86
00:04:23,169 --> 00:04:27,310
fishing until long after the attacker

87
00:04:25,750 --> 00:04:32,440
has collected a bunch of credentials and

88
00:04:27,310 --> 00:04:34,570
access to a ton of accounts the typical

89
00:04:32,440 --> 00:04:38,860
way you might find out about a phishing

90
00:04:34,570 --> 00:04:40,719
campaign is either through a user email

91
00:04:38,860 --> 00:04:42,039
saying hey I clicked on a site and

92
00:04:40,720 --> 00:04:44,380
submitted my creds I think it was a

93
00:04:42,039 --> 00:04:46,330
phishing site or maybe you've got some

94
00:04:44,380 --> 00:04:48,580
automated tools that kind of look for

95
00:04:46,330 --> 00:04:51,250
some look-alike domains that exist at my

96
00:04:48,580 --> 00:04:55,599
internet but neither those are ideal

97
00:04:51,250 --> 00:04:56,840
scenarios it's very much like closing

98
00:04:55,599 --> 00:04:59,360
the barn door after the

99
00:04:56,840 --> 00:05:03,859
horses bolted so what can we do about

100
00:04:59,360 --> 00:05:07,460
this well the basic idea is to include a

101
00:05:03,860 --> 00:05:09,560
piece of JavaScript or even CSS on pages

102
00:05:07,460 --> 00:05:12,979
that attackers are likely to clone for

103
00:05:09,560 --> 00:05:15,139
their phishing attacks this beacon can

104
00:05:12,979 --> 00:05:19,760
provide information about what domains

105
00:05:15,139 --> 00:05:21,440
that JavaScript is then posted on as

106
00:05:19,760 --> 00:05:24,039
well as what users are submitting

107
00:05:21,440 --> 00:05:26,000
information through the fake login form

108
00:05:24,040 --> 00:05:29,780
so let's dig into some of those

109
00:05:26,000 --> 00:05:32,389
implementation details so Freck

110
00:05:29,780 --> 00:05:34,729
exfiltration DNS is still a fantastic

111
00:05:32,389 --> 00:05:39,440
option especially when you work in

112
00:05:34,729 --> 00:05:41,479
browser land you don't typically focus

113
00:05:39,440 --> 00:05:44,389
on anything other than the HTTP requests

114
00:05:41,479 --> 00:05:45,979
going back and forth and may not be

115
00:05:44,389 --> 00:05:49,039
breaking out Wireshark to see what sort

116
00:05:45,979 --> 00:05:53,210
of DNS requests are going out from this

117
00:05:49,039 --> 00:05:55,130
site you've cloned to ship the DNS

118
00:05:53,210 --> 00:05:57,289
requests themselves from JavaScript

119
00:05:55,130 --> 00:05:58,940
there are a few different options to

120
00:05:57,289 --> 00:06:03,229
choose from but the most straightforward

121
00:05:58,940 --> 00:06:05,210
is probably DNS prefetch the legitimate

122
00:06:03,229 --> 00:06:10,639
use case for this is just to pre cached

123
00:06:05,210 --> 00:06:16,969
DNS mapping but we will use it to ship

124
00:06:10,639 --> 00:06:18,500
information via the subdomain itself do

125
00:06:16,970 --> 00:06:20,960
keep in mind that DNS has some

126
00:06:18,500 --> 00:06:23,840
constraints or some gotchas that you

127
00:06:20,960 --> 00:06:25,820
should keep in mind it is case

128
00:06:23,840 --> 00:06:28,250
insensitive so normal encoding schemes

129
00:06:25,820 --> 00:06:30,770
such as base64 need to be modified or

130
00:06:28,250 --> 00:06:32,810
exchanged for something else and there

131
00:06:30,770 --> 00:06:36,440
are various length restrictions on both

132
00:06:32,810 --> 00:06:40,610
the URL the length of each subdomain or

133
00:06:36,440 --> 00:06:43,490
even the number of subdomains since this

134
00:06:40,610 --> 00:06:45,919
piece of JavaScript will be hosted on

135
00:06:43,490 --> 00:06:48,080
one of our production sites we will want

136
00:06:45,919 --> 00:06:50,299
to avoid triggering billions of

137
00:06:48,080 --> 00:06:51,710
legitimate pageviews that we see per

138
00:06:50,300 --> 00:06:55,070
month so we need to add some sort of

139
00:06:51,710 --> 00:06:57,770
check around our canary so it only

140
00:06:55,070 --> 00:07:00,110
triggers on an unexpected domain in this

141
00:06:57,770 --> 00:07:04,639
example this canary might be hosted on

142
00:07:00,110 --> 00:07:07,400
dub dub dub decom and if it sees any

143
00:07:04,639 --> 00:07:11,380
domain that isn't that then it'll go and

144
00:07:07,400 --> 00:07:11,380
continue it's alerting service

145
00:07:11,920 --> 00:07:19,100
optionally if detecting what victims

146
00:07:15,470 --> 00:07:21,560
fall prey to to fishers you could add an

147
00:07:19,100 --> 00:07:26,300
event listener on the forum submit so

148
00:07:21,560 --> 00:07:28,790
that you know exactly which users submit

149
00:07:26,300 --> 00:07:31,430
information through the fake login form

150
00:07:28,790 --> 00:07:36,650
and if you care about Internet Explorer

151
00:07:31,430 --> 00:07:40,250
users you can add that catch clause so

152
00:07:36,650 --> 00:07:41,388
at its simplest a passive canary may end

153
00:07:40,250 --> 00:07:43,910
up looking something like this

154
00:07:41,389 --> 00:07:46,430
you've got your domain check at the very

155
00:07:43,910 --> 00:07:49,820
start wrapping everything you create

156
00:07:46,430 --> 00:07:52,940
your DNS prefetch element and you add

157
00:07:49,820 --> 00:07:55,070
your domain where the payload is the

158
00:07:52,940 --> 00:07:56,840
information you want to ship off at the

159
00:07:55,070 --> 00:07:59,780
moment you append that to the body the

160
00:07:56,840 --> 00:08:01,609
DNS request goes out and as long as

161
00:07:59,780 --> 00:08:03,919
you've said in a set up and appropriate

162
00:08:01,610 --> 00:08:09,290
listener for that DNS request you will

163
00:08:03,919 --> 00:08:11,930
get that payload into your systems if

164
00:08:09,290 --> 00:08:14,300
you want to implement a more active

165
00:08:11,930 --> 00:08:16,370
canary your payload should likely

166
00:08:14,300 --> 00:08:20,630
include a few more elements to ensure

167
00:08:16,370 --> 00:08:22,910
reliable transmission and collection as

168
00:08:20,630 --> 00:08:26,810
an example this is close to something we

169
00:08:22,910 --> 00:08:29,660
use at the very beginning is some sort

170
00:08:26,810 --> 00:08:31,640
of random nonce - for the most part

171
00:08:29,660 --> 00:08:34,640
cache bus to make sure your your

172
00:08:31,640 --> 00:08:36,710
requests reliably go out but it also

173
00:08:34,640 --> 00:08:40,640
serves as a semi unique identifier for

174
00:08:36,710 --> 00:08:42,650
stitching together Multi multi part

175
00:08:40,640 --> 00:08:44,449
packets because keep in mind you can

176
00:08:42,650 --> 00:08:46,150
only ship so much information for DNS

177
00:08:44,450 --> 00:08:48,950
requests

178
00:08:46,150 --> 00:08:51,230
speaking of multi-part packets this is

179
00:08:48,950 --> 00:08:54,530
just the way we use to signify which

180
00:08:51,230 --> 00:08:56,060
packet of the set this this is coming in

181
00:08:54,530 --> 00:08:58,699
this is saying this is back at one of

182
00:08:56,060 --> 00:09:00,859
five on the system on the back end and

183
00:08:58,700 --> 00:09:02,270
can then take that take that semi unique

184
00:09:00,860 --> 00:09:05,230
identifier and just stitch those back

185
00:09:02,270 --> 00:09:09,380
together and get your entire payload

186
00:09:05,230 --> 00:09:11,150
collected into a single blob and then

187
00:09:09,380 --> 00:09:14,180
for the information you actually want to

188
00:09:11,150 --> 00:09:18,220
ship back itself since base64 is not an

189
00:09:14,180 --> 00:09:20,420
option makes 32 works base 32 is just

190
00:09:18,220 --> 00:09:22,760
base64 with half the symbols dope to

191
00:09:20,420 --> 00:09:23,729
work with but you can it's enough

192
00:09:22,760 --> 00:09:29,550
symbols to share

193
00:09:23,730 --> 00:09:34,760
through DNS and the way you encode your

194
00:09:29,550 --> 00:09:34,760
data is up to you we just went with some

195
00:09:34,820 --> 00:09:39,720
JSON and Kony encoding and then wrapped

196
00:09:37,470 --> 00:09:41,550
that in base 32 chopped it up into

197
00:09:39,720 --> 00:09:45,110
appropriate sizes and then shipped it

198
00:09:41,550 --> 00:09:48,510
out in the necessary number of packets

199
00:09:45,110 --> 00:09:50,880
and then finally for the domain use

200
00:09:48,510 --> 00:09:53,540
whatever domain you liked as long as you

201
00:09:50,880 --> 00:09:56,430
can control it and you can point your

202
00:09:53,540 --> 00:09:58,829
custom bind server or pointed at your

203
00:09:56,430 --> 00:10:04,229
custom bind server so you actually get

204
00:09:58,829 --> 00:10:06,149
those D and request DNS requests so to

205
00:10:04,230 --> 00:10:08,850
review how this baited canary helps us

206
00:10:06,149 --> 00:10:12,990
let's look at the typical timeline for a

207
00:10:08,850 --> 00:10:14,459
phishing attack it can be kind of

208
00:10:12,990 --> 00:10:16,380
thought of in five different steps

209
00:10:14,459 --> 00:10:17,790
you've got planning where the attacker

210
00:10:16,380 --> 00:10:18,810
is actually figuring it you know who

211
00:10:17,790 --> 00:10:20,579
they want to attack how they won't

212
00:10:18,810 --> 00:10:23,388
attack them staging where they actually

213
00:10:20,579 --> 00:10:25,469
set up the phishing site as well as any

214
00:10:23,389 --> 00:10:28,079
communication mechanisms they need in

215
00:10:25,470 --> 00:10:30,480
place then they go and advertise their

216
00:10:28,079 --> 00:10:33,359
fake phishing phishing page via Twitter

217
00:10:30,480 --> 00:10:34,769
direct Lengths forms whatever's finally

218
00:10:33,360 --> 00:10:36,839
they will harvest the victims

219
00:10:34,769 --> 00:10:41,699
credentials and then or use those

220
00:10:36,839 --> 00:10:42,300
credentials however they choose without

221
00:10:41,699 --> 00:10:43,859
a canary

222
00:10:42,300 --> 00:10:45,719
the usual way to learn about phishing

223
00:10:43,860 --> 00:10:49,680
attacks gets your users simply to hear

224
00:10:45,720 --> 00:10:54,199
about from fishing reports or outside of

225
00:10:49,680 --> 00:10:56,660
that if you've got some decent

226
00:10:54,199 --> 00:10:58,680
suspicious login logic you can

227
00:10:56,660 --> 00:11:00,480
potentially identify compromised

228
00:10:58,680 --> 00:11:04,769
accounts when they try to log in that

229
00:11:00,480 --> 00:11:07,550
way but don't neither those signals are

230
00:11:04,769 --> 00:11:11,490
great and then with the canary in place

231
00:11:07,550 --> 00:11:14,010
you shift left you you get a clear

232
00:11:11,490 --> 00:11:16,740
signal the second a cloned login page is

233
00:11:14,010 --> 00:11:18,329
hosted even on the attackers machine

234
00:11:16,740 --> 00:11:20,160
because the moment they cloned the page

235
00:11:18,329 --> 00:11:22,888
maybe they run it on a localhost or

236
00:11:20,160 --> 00:11:24,899
maybe they're running it on the on their

237
00:11:22,889 --> 00:11:27,290
test domain but you will get this sick

238
00:11:24,899 --> 00:11:31,290
the signal immediately before any

239
00:11:27,290 --> 00:11:33,569
victims visit the site and if you add

240
00:11:31,290 --> 00:11:35,819
additional logic on form Schmitt you can

241
00:11:33,569 --> 00:11:36,510
also just collect the list of users who

242
00:11:35,819 --> 00:11:39,660
are

243
00:11:36,510 --> 00:11:42,240
compromised so it just allows you to

244
00:11:39,660 --> 00:11:47,360
take some pre-emptive actions much

245
00:11:42,240 --> 00:11:51,360
quicker than without the canary for our

246
00:11:47,360 --> 00:11:52,949
second attack scenario is about

247
00:11:51,360 --> 00:11:56,420
third-party is misusing G suite

248
00:11:52,949 --> 00:12:00,719
permissions because it is hard to know

249
00:11:56,420 --> 00:12:03,740
ng Sweetland exactly what plugins or

250
00:12:00,720 --> 00:12:06,060
services are using the information

251
00:12:03,740 --> 00:12:08,250
appropriately into the users desire or

252
00:12:06,060 --> 00:12:11,638
if they're doing more more malicious

253
00:12:08,250 --> 00:12:15,870
things information it's kind of a hard

254
00:12:11,639 --> 00:12:18,029
problem to get at but as an example some

255
00:12:15,870 --> 00:12:20,279
of you may remember a Google Doc fishing

256
00:12:18,029 --> 00:12:23,310
event that affected about a million

257
00:12:20,279 --> 00:12:26,550
accounts a couple years ago the basic

258
00:12:23,310 --> 00:12:29,339
problem was that since people were used

259
00:12:26,550 --> 00:12:32,729
to trusting whatever access an app

260
00:12:29,339 --> 00:12:35,579
requested within Google's OAuth when a

261
00:12:32,730 --> 00:12:38,639
malicious app came along people approved

262
00:12:35,579 --> 00:12:46,010
access no problem and this spread pretty

263
00:12:38,639 --> 00:12:50,130
crazy fast it is this one was kind of

264
00:12:46,010 --> 00:12:51,660
easier to identify in hindsight but the

265
00:12:50,130 --> 00:12:53,370
thing to keep in mind is with a lot of

266
00:12:51,660 --> 00:12:55,829
malicious apps you may not even have

267
00:12:53,370 --> 00:12:59,420
these signals to go on for how it's

268
00:12:55,829 --> 00:12:59,420
misusing information you're granting it

269
00:12:59,899 --> 00:13:07,199
so how can Canaries help here well since

270
00:13:05,819 --> 00:13:09,209
that event Google has actually come a

271
00:13:07,199 --> 00:13:12,449
long way with some of their auditing

272
00:13:09,209 --> 00:13:16,170
features and one of them can be used to

273
00:13:12,449 --> 00:13:17,609
set up some canary like alerts there's

274
00:13:16,170 --> 00:13:19,889
still some gaps that make it a little

275
00:13:17,610 --> 00:13:24,949
tricky but we'll walk through how you

276
00:13:19,889 --> 00:13:27,240
can set up those alerts fairly quickly

277
00:13:24,949 --> 00:13:30,029
first step is you generate some bait

278
00:13:27,240 --> 00:13:31,260
files named anything that you think an

279
00:13:30,029 --> 00:13:34,790
attacker might find interesting

280
00:13:31,260 --> 00:13:36,899
mergers and acquisition plans 2020 or

281
00:13:34,790 --> 00:13:39,540
finance credit card copies

282
00:13:36,899 --> 00:13:41,040
you know just anything that is likely

283
00:13:39,540 --> 00:13:44,069
someone's going to search for if they're

284
00:13:41,040 --> 00:13:47,610
trying to get juicy information from a G

285
00:13:44,069 --> 00:13:50,769
sweet account you take those bait files

286
00:13:47,610 --> 00:13:53,810
and you add them to use this drives

287
00:13:50,769 --> 00:13:55,639
again you're naming choice may be

288
00:13:53,810 --> 00:13:57,079
important here maybe you you don't want

289
00:13:55,639 --> 00:14:00,589
the name to be very interesting at all

290
00:13:57,079 --> 00:14:03,589
because the attacker may just be sucking

291
00:14:00,589 --> 00:14:05,540
off all files and so you may want to

292
00:14:03,589 --> 00:14:06,980
choose a name that's very uninteresting

293
00:14:05,540 --> 00:14:08,810
just so that the legitimate user doesn't

294
00:14:06,980 --> 00:14:10,819
for whatever reason go through there in

295
00:14:08,810 --> 00:14:14,540
the entirety of the G suite files and

296
00:14:10,819 --> 00:14:17,029
see what they have in there and then

297
00:14:14,540 --> 00:14:19,040
once you've got the files added within

298
00:14:17,029 --> 00:14:23,389
Google's admin console you'll create an

299
00:14:19,040 --> 00:14:25,219
alert around access to that file so

300
00:14:23,389 --> 00:14:28,009
within Google admin there's a button for

301
00:14:25,220 --> 00:14:30,199
reports if you click through into there

302
00:14:28,009 --> 00:14:32,990
and do a filter for the files you've

303
00:14:30,199 --> 00:14:35,449
added there's a button for setting alert

304
00:14:32,990 --> 00:14:39,410
you set the alert name to whatever you

305
00:14:35,449 --> 00:14:40,910
like the event typically you'd set that

306
00:14:39,410 --> 00:14:42,399
to view but if you want some other event

307
00:14:40,910 --> 00:14:45,050
to trigger the alert that's fine as well

308
00:14:42,399 --> 00:14:48,380
add an email that you want these alerts

309
00:14:45,050 --> 00:14:50,660
to syphon to probably not your personal

310
00:14:48,380 --> 00:14:52,430
email maybe you want to set up a group

311
00:14:50,660 --> 00:14:54,589
that's got a tie in to the rest you're

312
00:14:52,430 --> 00:14:56,750
alerting systems at your company so you

313
00:14:54,589 --> 00:15:02,230
don't those alerts don't get lost and

314
00:14:56,750 --> 00:15:08,930
when you save you're good to go once you

315
00:15:02,230 --> 00:15:10,819
once that alerts set you may want the

316
00:15:08,930 --> 00:15:11,719
message it gives you isn't very

317
00:15:10,819 --> 00:15:14,630
enlightening

318
00:15:11,720 --> 00:15:16,459
it'll tell you an IP and a time but not

319
00:15:14,630 --> 00:15:25,720
much else if you want to dig deeper you

320
00:15:16,459 --> 00:15:28,399
go into the the OAuth token audit log

321
00:15:25,720 --> 00:15:30,949
this is really hard to see a loom in a

322
00:15:28,399 --> 00:15:33,189
little bit here and also somewhat

323
00:15:30,949 --> 00:15:35,630
redacted but the idea is it gives you

324
00:15:33,189 --> 00:15:38,180
what token is actually seeing exactly

325
00:15:35,630 --> 00:15:41,810
what permission on behalf of what user

326
00:15:38,180 --> 00:15:43,969
as well as from what IP and at what time

327
00:15:41,810 --> 00:15:45,888
and the application name that's

328
00:15:43,970 --> 00:15:47,959
associated with and so using that

329
00:15:45,889 --> 00:15:53,269
complete set of information you can have

330
00:15:47,959 --> 00:15:55,430
a much better idea of what application

331
00:15:53,269 --> 00:15:58,029
isn't as misbehaving and accessing files

332
00:15:55,430 --> 00:16:02,400
that you would not expect it to access

333
00:15:58,029 --> 00:16:04,529
so to review you create a bate file

334
00:16:02,400 --> 00:16:08,579
add them to use this drives create a

335
00:16:04,529 --> 00:16:13,860
filter in your Google admin audit view

336
00:16:08,580 --> 00:16:15,420
and set an alert on that view ideally

337
00:16:13,860 --> 00:16:19,550
this gives you the ability to detect

338
00:16:15,420 --> 00:16:21,839
certain misbehaving G Suite apps

339
00:16:19,550 --> 00:16:23,810
hopefully little bit you were able to

340
00:16:21,839 --> 00:16:26,760
get a few ideas of other ways to use

341
00:16:23,810 --> 00:16:29,819
active Canaries as you think about the

342
00:16:26,760 --> 00:16:32,520
various pads attackers take could take

343
00:16:29,820 --> 00:16:33,930
in your systems you may find there a ton

344
00:16:32,520 --> 00:16:36,029
of different contexts that active

345
00:16:33,930 --> 00:16:40,020
Canaries could be useful and could apply

346
00:16:36,029 --> 00:16:42,420
the same methods to good effect special

347
00:16:40,020 --> 00:16:43,500
thanks to Christina Adi for working

348
00:16:42,420 --> 00:16:46,680
creating debugging some of these

349
00:16:43,500 --> 00:16:50,510
implementations so the question was why

350
00:16:46,680 --> 00:16:56,040
DNS and not just use I get over HTTP I

351
00:16:50,510 --> 00:16:58,500
mentioned it briefly but when you clone

352
00:16:56,040 --> 00:17:00,390
a page if you want to do some due

353
00:16:58,500 --> 00:17:02,370
diligence to make sure it's not sending

354
00:17:00,390 --> 00:17:06,150
out login information about yourself

355
00:17:02,370 --> 00:17:09,720
you'll typically look at the requests

356
00:17:06,150 --> 00:17:12,600
that go out in your browser and the

357
00:17:09,720 --> 00:17:14,939
requests that you can see within your

358
00:17:12,599 --> 00:17:18,300
browser's console are just HTTP requests

359
00:17:14,939 --> 00:17:20,400
or maybe some WebSocket requests but it

360
00:17:18,300 --> 00:17:22,438
doesn't show DNS requests within your

361
00:17:20,400 --> 00:17:24,900
your web view the same is true for any

362
00:17:22,439 --> 00:17:28,050
web proxy they'll be set up to show

363
00:17:24,900 --> 00:17:31,040
basically everything but DNS requests so

364
00:17:28,050 --> 00:17:34,290
DNS was just used because it's one step

365
00:17:31,040 --> 00:17:37,409
harder to see and so slightly less

366
00:17:34,290 --> 00:17:38,670
likely that the attacker will figure out

367
00:17:37,410 --> 00:17:41,010
where that's coming from and remove it

368
00:17:38,670 --> 00:17:45,260
the second thing you can add to it

369
00:17:41,010 --> 00:17:47,160
though is the request itself can be

370
00:17:45,260 --> 00:17:49,770
disguised to look like something

371
00:17:47,160 --> 00:17:54,270
legitimate so for example if your domain

372
00:17:49,770 --> 00:17:56,760
looks like indeed CDN com then that's

373
00:17:54,270 --> 00:17:59,940
something you'd probably expect an

374
00:17:56,760 --> 00:18:01,890
indeed.com site to utilize in their own

375
00:17:59,940 --> 00:18:04,500
usage for example if you're talking

376
00:18:01,890 --> 00:18:06,450
about PDFs docx those are those are

377
00:18:04,500 --> 00:18:08,400
active file types and actually run

378
00:18:06,450 --> 00:18:10,170
JavaScript directly and so you can just

379
00:18:08,400 --> 00:18:14,550
dump the same thing into those file

380
00:18:10,170 --> 00:18:16,670
types as well otherwise it depends on

381
00:18:14,550 --> 00:18:19,379
the file depends on the file type and

382
00:18:16,670 --> 00:18:22,230
what kind of things might be running

383
00:18:19,380 --> 00:18:23,600
that file free--free aside the the

384
00:18:22,230 --> 00:18:28,230
management's usually the biggest cost

385
00:18:23,600 --> 00:18:29,969
the reason I have a strong distaste

386
00:18:28,230 --> 00:18:32,760
towards third third parties handling

387
00:18:29,970 --> 00:18:35,660
canary tokens is one of the big big

388
00:18:32,760 --> 00:18:38,670
features of canary tokens should be that

389
00:18:35,660 --> 00:18:40,470
that token should only ever exist in a

390
00:18:38,670 --> 00:18:42,960
single place and if you have a third

391
00:18:40,470 --> 00:18:44,790
party helping you create and manage and

392
00:18:42,960 --> 00:18:47,340
place those tokens you've already failed

393
00:18:44,790 --> 00:18:49,200
because now the third party and that

394
00:18:47,340 --> 00:18:50,939
place have the token and so if that

395
00:18:49,200 --> 00:18:52,440
token is ever triggered you don't know

396
00:18:50,940 --> 00:18:54,510
if it was you that was compromised or

397
00:18:52,440 --> 00:18:57,570
the third party was compromised now it's

398
00:18:54,510 --> 00:18:59,190
possible the third party service has a

399
00:18:57,570 --> 00:19:01,850
way to ensure that they never actually

400
00:18:59,190 --> 00:19:04,860
touched the token themselves but I

401
00:19:01,850 --> 00:19:08,428
haven't run across with it that goes

402
00:19:04,860 --> 00:19:11,370
that route there's layers you can add

403
00:19:08,429 --> 00:19:13,050
for example there's CSS based Canaries

404
00:19:11,370 --> 00:19:16,469
you can use as well but they're less

405
00:19:13,050 --> 00:19:19,169
feature full but you could layer a CSS

406
00:19:16,470 --> 00:19:21,270
canary just to watch the whether or not

407
00:19:19,170 --> 00:19:23,760
the JavaScript canary fires off if the

408
00:19:21,270 --> 00:19:26,550
JavaScript canary fails to fire off then

409
00:19:23,760 --> 00:19:28,500
the CSS canary fires off instead so you

410
00:19:26,550 --> 00:19:31,320
could do some tricks like that but

411
00:19:28,500 --> 00:19:33,720
otherwise it's kind of hard to know who

412
00:19:31,320 --> 00:19:36,780
successfully finds your your alert rips

413
00:19:33,720 --> 00:19:37,430
it out cool all right thank you all for

414
00:19:36,780 --> 00:19:44,129
coming up

415
00:19:37,430 --> 00:19:44,130
[Applause]

416
00:19:49,059 --> 00:19:51,120
you

