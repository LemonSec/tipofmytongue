1
00:00:11,940 --> 00:00:32,280
[Music]

2
00:00:34,510 --> 00:00:39,410
yeah here we are talking about securing

3
00:00:37,940 --> 00:00:41,830
modern API and micro services

4
00:00:39,410 --> 00:00:44,390
applications

5
00:00:41,830 --> 00:00:46,579
Jonathan gave me a great introduction so

6
00:00:44,390 --> 00:00:48,290
I'll just skip this slide here this

7
00:00:46,579 --> 00:00:49,820
presentation is supposed to provide you

8
00:00:48,290 --> 00:00:52,730
with an overview of this subject matter

9
00:00:49,820 --> 00:00:54,710
and architectural takeaways I'm just out

10
00:00:52,730 --> 00:00:56,209
of curiosity how many of you are working

11
00:00:54,710 --> 00:00:58,610
in a security engineering position

12
00:00:56,210 --> 00:00:59,140
dealing with API security and that sort

13
00:00:58,610 --> 00:01:01,610
of thing

14
00:00:59,140 --> 00:01:04,610
cool fair number of people that's great

15
00:01:01,610 --> 00:01:06,560
and and so yeah the material in here is

16
00:01:04,610 --> 00:01:08,060
the result of about four years or so of

17
00:01:06,560 --> 00:01:10,340
me working on this stuff as I was

18
00:01:08,060 --> 00:01:11,990
working with HSBC globally and they were

19
00:01:10,340 --> 00:01:14,210
you know moving from monolithic

20
00:01:11,990 --> 00:01:15,740
application application architectures

21
00:01:14,210 --> 00:01:17,990
and service-oriented architectures and

22
00:01:15,740 --> 00:01:20,509
going into you know micro services and

23
00:01:17,990 --> 00:01:22,009
opening things up with api's we know we

24
00:01:20,510 --> 00:01:23,510
there was a lot of learning involved and

25
00:01:22,010 --> 00:01:26,000
it was fairly new territory especially

26
00:01:23,510 --> 00:01:28,220
for a bank so during that time I learned

27
00:01:26,000 --> 00:01:30,200
a lot and I know we ended up creating a

28
00:01:28,220 --> 00:01:31,460
lot of architectures and somewhat some

29
00:01:30,200 --> 00:01:34,640
of them are fairly complex as it can

30
00:01:31,460 --> 00:01:36,798
appreciate in it I know I thirds HSBC

31
00:01:34,640 --> 00:01:39,950
the third largest bank in the world at

32
00:01:36,799 --> 00:01:42,020
the time they had a fairly heterogeneous

33
00:01:39,950 --> 00:01:44,060
environment with lots of applications of

34
00:01:42,020 --> 00:01:45,219
all kinds of shapes and sizes and having

35
00:01:44,060 --> 00:01:47,749
to make all these things work together

36
00:01:45,219 --> 00:01:49,490
across different lines of businesses it

37
00:01:47,749 --> 00:01:51,079
was a challenge but there was a lot of

38
00:01:49,490 --> 00:01:53,839
lessons learnt and I'm hoping that I can

39
00:01:51,079 --> 00:01:55,249
share some of that with you so what are

40
00:01:53,840 --> 00:01:57,259
we going to talk about this is our

41
00:01:55,249 --> 00:01:58,729
agenda for this presentation we're gonna

42
00:01:57,259 --> 00:01:59,990
start just sort of level setting right I

43
00:01:58,729 --> 00:02:01,640
don't want to just draw it jump right

44
00:01:59,990 --> 00:02:03,829
into the security side of things because

45
00:02:01,640 --> 00:02:05,659
often I find that some of these topics

46
00:02:03,829 --> 00:02:07,398
are not well understood and there's a

47
00:02:05,659 --> 00:02:09,050
lot of confusion especially especially

48
00:02:07,399 --> 00:02:10,699
when it comes to what is a micro service

49
00:02:09,050 --> 00:02:11,960
the difference between a service and a

50
00:02:10,699 --> 00:02:14,269
micro service what's a service-oriented

51
00:02:11,960 --> 00:02:16,760
architecture you know what is an API

52
00:02:14,270 --> 00:02:19,040
right people that have sort of started

53
00:02:16,760 --> 00:02:20,720
in this field recently the you know

54
00:02:19,040 --> 00:02:22,940
there's also a fair bit of confusion in

55
00:02:20,720 --> 00:02:25,670
that area so I want a level set on those

56
00:02:22,940 --> 00:02:27,050
topics and then we get into the the nuts

57
00:02:25,670 --> 00:02:29,510
and bolts of what this subject is about

58
00:02:27,050 --> 00:02:31,580
so then we start talking about how API

59
00:02:29,510 --> 00:02:33,290
gateways can help you in this post

60
00:02:31,580 --> 00:02:35,510
monolithic world we're gonna talk about

61
00:02:33,290 --> 00:02:37,549
why it's important to have user level

62
00:02:35,510 --> 00:02:39,470
security context and then to end trust

63
00:02:37,550 --> 00:02:41,060
across the entire journey because once

64
00:02:39,470 --> 00:02:42,410
you break things up there's functions

65
00:02:41,060 --> 00:02:44,260
are all spread all over the place and

66
00:02:42,410 --> 00:02:45,819
you need to ensure that you maintain

67
00:02:44,260 --> 00:02:47,709
that trust across the function calls

68
00:02:45,819 --> 00:02:49,569
we're going to quickly talk about why

69
00:02:47,709 --> 00:02:50,920
you need authorization and we're going

70
00:02:49,569 --> 00:02:52,689
to talk about what authentication and

71
00:02:50,920 --> 00:02:54,369
authorization protocols you can use find

72
00:02:52,689 --> 00:02:57,400
also there's a lot of confusion in that

73
00:02:54,370 --> 00:02:59,680
spaces we also want to discuss that then

74
00:02:57,400 --> 00:03:01,239
we talk about how you an invocation by

75
00:02:59,680 --> 00:03:02,709
external applications so that's great

76
00:03:01,239 --> 00:03:04,299
you broke an application into a bunch of

77
00:03:02,709 --> 00:03:07,090
micro services how do you deal with

78
00:03:04,299 --> 00:03:08,530
other micro services calling your micro

79
00:03:07,090 --> 00:03:10,480
service outside of your trust boundary

80
00:03:08,530 --> 00:03:12,549
then we'll talk about what other

81
00:03:10,480 --> 00:03:13,689
security concerns should you care about

82
00:03:12,549 --> 00:03:15,819
aside from authentication and

83
00:03:13,689 --> 00:03:18,790
authorization and and in addition to

84
00:03:15,819 --> 00:03:19,988
that you know other important things log

85
00:03:18,790 --> 00:03:22,239
logging and monitoring and detection

86
00:03:19,989 --> 00:03:24,220
controls that are still important in

87
00:03:22,239 --> 00:03:26,139
this in this world of micro services or

88
00:03:24,220 --> 00:03:27,940
modern applications and then of course

89
00:03:26,139 --> 00:03:30,040
the importance of Group Policy and then

90
00:03:27,940 --> 00:03:33,099
we'll finish up with some takeaway

91
00:03:30,040 --> 00:03:34,750
considerations some summary of you know

92
00:03:33,099 --> 00:03:36,369
when you leave here what should you be

93
00:03:34,750 --> 00:03:40,959
thinking about and how you can action on

94
00:03:36,370 --> 00:03:42,700
some of these items so what are micro

95
00:03:40,959 --> 00:03:44,349
services so I always like to throw a

96
00:03:42,700 --> 00:03:46,720
Wikipedia definition to start the

97
00:03:44,349 --> 00:03:48,638
conversation so as Wikipedia says quote

98
00:03:46,720 --> 00:03:50,680
micro services our software development

99
00:03:48,639 --> 00:03:52,060
technique a variant of the

100
00:03:50,680 --> 00:03:54,459
service-oriented architecture

101
00:03:52,060 --> 00:03:56,769
architectural style that structures an

102
00:03:54,459 --> 00:03:59,379
application as a collection of loosely

103
00:03:56,769 --> 00:04:01,060
coupled services in a micro services

104
00:03:59,379 --> 00:04:02,828
architecture services are fine-grained

105
00:04:01,060 --> 00:04:05,109
and protocols are lightweight right so

106
00:04:02,829 --> 00:04:07,329
that's the Wikipedia definition so let's

107
00:04:05,109 --> 00:04:08,739
dive into that a little bit so you're

108
00:04:07,329 --> 00:04:10,419
hopefully familiar with monolithic

109
00:04:08,739 --> 00:04:11,769
applications right monolithic

110
00:04:10,419 --> 00:04:13,720
applications everything is tightly

111
00:04:11,769 --> 00:04:16,060
coupled together inside one application

112
00:04:13,720 --> 00:04:17,289
trust zone and essentially they don't

113
00:04:16,060 --> 00:04:19,358
scale very well right all your functions

114
00:04:17,289 --> 00:04:22,029
are together if one of those functions

115
00:04:19,358 --> 00:04:23,948
is more used more often used than others

116
00:04:22,029 --> 00:04:24,940
well you you can't it's not separated

117
00:04:23,949 --> 00:04:26,650
they're all together so you have to

118
00:04:24,940 --> 00:04:28,900
deploy when you're scaling you have

119
00:04:26,650 --> 00:04:30,429
multiple copies of all of that stuff not

120
00:04:28,900 --> 00:04:32,049
so good for scalability especially when

121
00:04:30,430 --> 00:04:33,940
different components have different

122
00:04:32,050 --> 00:04:35,860
resource requirements and often

123
00:04:33,940 --> 00:04:37,930
monolithic applications can get really

124
00:04:35,860 --> 00:04:39,520
large and complex to be understood by

125
00:04:37,930 --> 00:04:40,659
one developer right so you kind of one

126
00:04:39,520 --> 00:04:41,889
person looks at it is usually often

127
00:04:40,659 --> 00:04:43,719
hundreds of people work on these

128
00:04:41,889 --> 00:04:45,760
applications and they grow to be fairly

129
00:04:43,720 --> 00:04:47,710
large and they don't protect components

130
00:04:45,760 --> 00:04:49,900
from other components issues so inside

131
00:04:47,710 --> 00:04:52,090
that a bit if there's a vulnerability

132
00:04:49,900 --> 00:04:53,739
inside one one set of functions or

133
00:04:52,090 --> 00:04:55,000
component inside that application it

134
00:04:53,740 --> 00:04:56,889
might impact others because they're all

135
00:04:55,000 --> 00:04:59,349
tightly coupled in a monolith and

136
00:04:56,889 --> 00:05:01,659
difficulty rewrites if you if you need

137
00:04:59,349 --> 00:05:03,729
it to adopt a new framework so lots of

138
00:05:01,659 --> 00:05:06,460
issues with them so the general move in

139
00:05:03,729 --> 00:05:08,169
in the modern times is to react at Tech

140
00:05:06,460 --> 00:05:10,479
we architect these traditional model

141
00:05:08,169 --> 00:05:13,090
with services and applications right and

142
00:05:10,479 --> 00:05:14,949
essentially applications of services are

143
00:05:13,090 --> 00:05:17,560
decomposed into smaller micro services

144
00:05:14,949 --> 00:05:18,789
so here on the left we see a monolithic

145
00:05:17,560 --> 00:05:20,560
application where you've got six

146
00:05:18,789 --> 00:05:22,900
different functions or services all

147
00:05:20,560 --> 00:05:23,979
tightly coupled in one trust boundary

148
00:05:22,900 --> 00:05:26,258
and then they're talking to a data

149
00:05:23,979 --> 00:05:28,180
source and then on the other side here

150
00:05:26,259 --> 00:05:29,620
we've got micro services based

151
00:05:28,180 --> 00:05:31,810
application where we took similar

152
00:05:29,620 --> 00:05:34,000
functions functions and we broke them up

153
00:05:31,810 --> 00:05:35,710
into micro services typically hosted in

154
00:05:34,000 --> 00:05:37,900
containers it doesn't have to be but

155
00:05:35,710 --> 00:05:40,060
that's typically the model in the modern

156
00:05:37,900 --> 00:05:41,500
applications you break them up and then

157
00:05:40,060 --> 00:05:43,900
you put them in in containers and they

158
00:05:41,500 --> 00:05:48,610
also have their own data stores that

159
00:05:43,900 --> 00:05:50,318
they deal with so sir you know in the in

160
00:05:48,610 --> 00:05:52,000
the late 90s there was this whole talk

161
00:05:50,319 --> 00:05:53,620
about service-oriented architectures I

162
00:05:52,000 --> 00:05:56,289
got kind of involved with SOA in like

163
00:05:53,620 --> 00:05:58,389
the mid to late 2000s but the whole idea

164
00:05:56,289 --> 00:06:00,580
was that you had used essentially you

165
00:05:58,389 --> 00:06:02,229
you take enterprise applications and you

166
00:06:00,580 --> 00:06:04,029
look across the enterprise and you find

167
00:06:02,229 --> 00:06:05,258
hey I have like this application over

168
00:06:04,029 --> 00:06:07,089
here and I have this other application

169
00:06:05,259 --> 00:06:08,259
over here and they seem to repeat

170
00:06:07,089 --> 00:06:10,629
business functions write an application

171
00:06:08,259 --> 00:06:12,189
one in the bank you know we had some CRM

172
00:06:10,629 --> 00:06:13,810
functionality and some sales solution

173
00:06:12,189 --> 00:06:15,370
functionality and some other stuff and

174
00:06:13,810 --> 00:06:17,020
then we had another application here

175
00:06:15,370 --> 00:06:19,240
that had the similar like ID also had a

176
00:06:17,020 --> 00:06:20,589
CRM Pisa there was a lot of repetition

177
00:06:19,240 --> 00:06:22,779
and I think IBM was one of the first

178
00:06:20,589 --> 00:06:24,310
companies that did an analysis across

179
00:06:22,779 --> 00:06:25,839
all their enterprise applications and

180
00:06:24,310 --> 00:06:27,219
they had thousands of applications and

181
00:06:25,839 --> 00:06:29,409
they found that across all those

182
00:06:27,219 --> 00:06:31,419
applications there were only 40 services

183
00:06:29,409 --> 00:06:33,460
40 business services that and those

184
00:06:31,419 --> 00:06:35,469
services were often repeated amongst all

185
00:06:33,460 --> 00:06:37,120
these other monolith monolithic

186
00:06:35,469 --> 00:06:39,099
applications in their organization so

187
00:06:37,120 --> 00:06:41,469
they started to say ok well what if we

188
00:06:39,099 --> 00:06:43,628
just made 40 services and then leveraged

189
00:06:41,469 --> 00:06:45,879
little services to create - to create

190
00:06:43,629 --> 00:06:47,500
new applications and and then be able to

191
00:06:45,879 --> 00:06:49,599
service different channels and that's

192
00:06:47,500 --> 00:06:52,000
where the SOA movement gained a lot of

193
00:06:49,599 --> 00:06:53,830
momentum in the early and mid 2000s when

194
00:06:52,000 --> 00:06:56,050
web services and other technologies came

195
00:06:53,830 --> 00:06:58,060
about but typically in SOA architecture

196
00:06:56,050 --> 00:07:00,310
you had services communicating using an

197
00:06:58,060 --> 00:07:02,289
enterprise message bus and using the

198
00:07:00,310 --> 00:07:05,469
soap and XML and soap and XML are fairly

199
00:07:02,289 --> 00:07:07,060
heavy for those of you who've been lucky

200
00:07:05,469 --> 00:07:08,949
or unlucky to have that in that world

201
00:07:07,060 --> 00:07:09,950
you'll know that you have large sam'l

202
00:07:08,949 --> 00:07:11,810
tokens

203
00:07:09,950 --> 00:07:13,460
complexity and it was fine for

204
00:07:11,810 --> 00:07:15,320
enterprise environments but once you

205
00:07:13,460 --> 00:07:16,760
went to the Internet that wasn't you

206
00:07:15,320 --> 00:07:18,500
know that wasn't so acceptable you have

207
00:07:16,760 --> 00:07:19,969
to have lighter weight protocols and you

208
00:07:18,500 --> 00:07:21,920
can't have these large sam'l tokens they

209
00:07:19,970 --> 00:07:23,630
don't even fit in the HTTP header so you

210
00:07:21,920 --> 00:07:26,210
had to go towards there was a move

211
00:07:23,630 --> 00:07:27,680
towards lighter light of micro services

212
00:07:26,210 --> 00:07:30,320
so the micro services architectures

213
00:07:27,680 --> 00:07:31,790
they're also made up of loosely coupled

214
00:07:30,320 --> 00:07:33,920
components similar to service-oriented

215
00:07:31,790 --> 00:07:35,390
architectures but the composition is a

216
00:07:33,920 --> 00:07:37,220
little bit more granular so where as a

217
00:07:35,390 --> 00:07:39,409
service you might have a messaging

218
00:07:37,220 --> 00:07:41,150
service right in a service-oriented

219
00:07:39,410 --> 00:07:42,620
architecture you could further take that

220
00:07:41,150 --> 00:07:44,659
messaging service and break down as

221
00:07:42,620 --> 00:07:46,520
functions like sending a message or

222
00:07:44,660 --> 00:07:48,290
queueing a message or doing some other

223
00:07:46,520 --> 00:07:50,810
functions within that messaging service

224
00:07:48,290 --> 00:07:52,460
or if you had a CRM function a crm

225
00:07:50,810 --> 00:07:54,020
service and there so a architecture you

226
00:07:52,460 --> 00:07:56,479
could break that CRM service into

227
00:07:54,020 --> 00:07:58,849
smaller functions within a CRM it could

228
00:07:56,480 --> 00:08:00,650
be like user management and contact

229
00:07:58,850 --> 00:08:02,390
management and company management or and

230
00:08:00,650 --> 00:08:05,690
and lead management and that kind of

231
00:08:02,390 --> 00:08:07,430
stuff so each micro service delivers a

232
00:08:05,690 --> 00:08:09,530
specific function it's more fine-grained

233
00:08:07,430 --> 00:08:11,090
than SOA and they typically also they

234
00:08:09,530 --> 00:08:13,280
may typically communicate using an API

235
00:08:11,090 --> 00:08:17,869
gateway and HTTP as opposed to the

236
00:08:13,280 --> 00:08:19,099
heavier soap and sam'l so here are a few

237
00:08:17,870 --> 00:08:20,660
things about micro services they're

238
00:08:19,100 --> 00:08:22,190
they're typically hosted inside

239
00:08:20,660 --> 00:08:23,900
containers again they don't have to be

240
00:08:22,190 --> 00:08:26,330
but typically they are and containers of

241
00:08:23,900 --> 00:08:28,669
lightweight and and they don't have a

242
00:08:26,330 --> 00:08:31,190
lot of overhead and typically these

243
00:08:28,670 --> 00:08:33,110
things are exposed by a api's and either

244
00:08:31,190 --> 00:08:35,030
directly or by api gateways a lot of

245
00:08:33,110 --> 00:08:36,919
clients that we deal with they seem to

246
00:08:35,030 --> 00:08:37,970
just expose things directly but as we

247
00:08:36,919 --> 00:08:41,630
can see there are a lot of advantages

248
00:08:37,970 --> 00:08:43,790
for leveraging api gateways and and they

249
00:08:41,630 --> 00:08:45,770
use library protocols like HTTP and JSON

250
00:08:43,789 --> 00:08:47,630
and not all Mike micro services are

251
00:08:45,770 --> 00:08:49,400
exposed by API so you it's a false

252
00:08:47,630 --> 00:08:50,630
assumption that just because other micro

253
00:08:49,400 --> 00:08:52,370
service is going to be in a container

254
00:08:50,630 --> 00:08:53,990
it's gonna have an API you could have

255
00:08:52,370 --> 00:08:55,610
micro services that aren't exposed by

256
00:08:53,990 --> 00:08:57,680
api's that are still micro service and

257
00:08:55,610 --> 00:08:59,000
they deal internally that are dealt with

258
00:08:57,680 --> 00:09:00,920
internally they're not exposed using an

259
00:08:59,000 --> 00:09:02,840
external API I should say and each one

260
00:09:00,920 --> 00:09:04,189
can be independent it has its own

261
00:09:02,840 --> 00:09:07,190
database as we saw in the previous

262
00:09:04,190 --> 00:09:08,660
diagram and that allows decoupling from

263
00:09:07,190 --> 00:09:11,270
the other services that is well-suited

264
00:09:08,660 --> 00:09:13,760
for agile and CI CD environments due to

265
00:09:11,270 --> 00:09:14,720
its lightweight nature requirements but

266
00:09:13,760 --> 00:09:16,760
it brings a new set of challenges

267
00:09:14,720 --> 00:09:18,680
because you get as you can appreciate

268
00:09:16,760 --> 00:09:20,240
once you tie you know loosely when you

269
00:09:18,680 --> 00:09:22,609
take loosely coupled monoliths and you

270
00:09:20,240 --> 00:09:23,329
break them into tightly a sorry once you

271
00:09:22,610 --> 00:09:25,309
break the

272
00:09:23,329 --> 00:09:28,699
a couple monoliths and into loosely

273
00:09:25,309 --> 00:09:30,559
coupled micro-services you get the

274
00:09:28,699 --> 00:09:32,329
distributive systems complexities and

275
00:09:30,559 --> 00:09:34,129
maintenance of data consistency across

276
00:09:32,329 --> 00:09:36,049
micro-services becomes an issue because

277
00:09:34,129 --> 00:09:37,249
now each year micro-services has got its

278
00:09:36,049 --> 00:09:39,379
own data store how do you make sure that

279
00:09:37,249 --> 00:09:41,449
you know if you've got a the the the

280
00:09:39,379 --> 00:09:43,189
account management micro service in your

281
00:09:41,449 --> 00:09:44,988
CRM and then you've got like your lead

282
00:09:43,189 --> 00:09:46,639
management micro service the two of them

283
00:09:44,989 --> 00:09:48,350
oftentimes will need to information

284
00:09:46,639 --> 00:09:50,209
across the different micro services so

285
00:09:48,350 --> 00:09:53,209
data consistency becomes a problem and

286
00:09:50,209 --> 00:09:54,469
and deployment is also a challenge and

287
00:09:53,209 --> 00:09:56,179
increased memory consumption because

288
00:09:54,470 --> 00:09:58,429
before all those functions were inside a

289
00:09:56,179 --> 00:09:59,689
tightly coupled space they shared the

290
00:09:58,429 --> 00:10:01,730
memory now you're breaking them up into

291
00:09:59,689 --> 00:10:04,129
individual services that might you know

292
00:10:01,730 --> 00:10:06,040
Inc that increases memory consumption so

293
00:10:04,129 --> 00:10:08,480
those are just additional challenges

294
00:10:06,040 --> 00:10:09,738
what about api's right api's have been

295
00:10:08,480 --> 00:10:11,629
around forever i mean i've been

296
00:10:09,739 --> 00:10:12,769
programming since the late 80s and you

297
00:10:11,629 --> 00:10:14,660
know if you guys are new not a new

298
00:10:12,769 --> 00:10:16,610
concept right api simply just means it's

299
00:10:14,660 --> 00:10:18,799
an application again back to wikipedia

300
00:10:16,610 --> 00:10:20,629
in general terms is a set of clearly

301
00:10:18,799 --> 00:10:23,749
defined methods of communication among

302
00:10:20,629 --> 00:10:25,639
various components a good API makes it

303
00:10:23,749 --> 00:10:27,170
easier to develop a computer program by

304
00:10:25,639 --> 00:10:28,999
providing all the building blocks which

305
00:10:27,170 --> 00:10:30,649
are then put together by programmer

306
00:10:28,999 --> 00:10:32,929
right so my first exposure to

307
00:10:30,649 --> 00:10:34,819
programming with C and C++ and you know

308
00:10:32,929 --> 00:10:36,350
of course you know you you had API is

309
00:10:34,819 --> 00:10:38,389
right you exposed it's all about

310
00:10:36,350 --> 00:10:40,069
abstraction layers right even in in in

311
00:10:38,389 --> 00:10:42,139
telecommunications world where I spent

312
00:10:40,069 --> 00:10:43,639
years doing application development you

313
00:10:42,139 --> 00:10:45,350
have abstraction layers and then each

314
00:10:43,639 --> 00:10:47,269
layer exposes this functionality to the

315
00:10:45,350 --> 00:10:48,980
next layer through an API now

316
00:10:47,269 --> 00:10:50,720
unfortunately people that are sort of

317
00:10:48,980 --> 00:10:51,949
new to this field that have only been

318
00:10:50,720 --> 00:10:53,779
doing this for the last few years they

319
00:10:51,949 --> 00:10:56,179
just if they automatically associate API

320
00:10:53,779 --> 00:10:58,669
is with the web technologies but API is

321
00:10:56,179 --> 00:11:00,290
just a generalized concept so now how do

322
00:10:58,669 --> 00:11:01,339
we take that into the into the edge of

323
00:11:00,290 --> 00:11:03,769
what we're talking about

324
00:11:01,339 --> 00:11:05,839
so it's API is used by software

325
00:11:03,769 --> 00:11:07,610
components to communicate been around

326
00:11:05,839 --> 00:11:09,499
for a long time and can be used to build

327
00:11:07,610 --> 00:11:10,910
components that work together in a

328
00:11:09,499 --> 00:11:12,709
working knowledge of other components is

329
00:11:10,910 --> 00:11:14,719
not required right so you just expose

330
00:11:12,709 --> 00:11:15,768
your API and this is one of these are

331
00:11:14,720 --> 00:11:17,239
the methods and these are the attributes

332
00:11:15,769 --> 00:11:18,379
and that's all the other user needs to

333
00:11:17,239 --> 00:11:20,389
know they don't need to know what is

334
00:11:18,379 --> 00:11:22,790
happening inside that particular

335
00:11:20,389 --> 00:11:24,110
component and you only need to know what

336
00:11:22,790 --> 00:11:25,579
functions are exposed and that's good

337
00:11:24,110 --> 00:11:28,069
separation so here you can see that

338
00:11:25,579 --> 00:11:32,319
service you know service a is consuming

339
00:11:28,069 --> 00:11:34,429
the API that is exposed by service B and

340
00:11:32,319 --> 00:11:36,630
many modern applications are web-based

341
00:11:34,429 --> 00:11:39,029
in 2019 and

342
00:11:36,630 --> 00:11:41,339
they expose web api is using HTTP and

343
00:11:39,029 --> 00:11:42,959
JSON typically restful but you know

344
00:11:41,339 --> 00:11:44,610
again 90% of clients that we work with

345
00:11:42,959 --> 00:11:46,229
when I say hey are using a REST API

346
00:11:44,610 --> 00:11:47,670
they're not yeah kind of right and what

347
00:11:46,230 --> 00:11:50,250
they mean is they're not fully arrest

348
00:11:47,670 --> 00:11:52,439
compliant you know they are using HTTP

349
00:11:50,250 --> 00:11:53,850
and JSON but the rest of it is sort of

350
00:11:52,440 --> 00:11:55,649
up up in the air right like I mean to be

351
00:11:53,850 --> 00:11:58,380
fully restful you have to support push

352
00:11:55,649 --> 00:12:00,300
put post you know gatun and all those

353
00:11:58,380 --> 00:12:02,130
kinds of things but the verbs that have

354
00:12:00,300 --> 00:12:03,750
to be a HTTP compliant but these the

355
00:12:02,130 --> 00:12:05,579
companies often come up with their own

356
00:12:03,750 --> 00:12:07,800
verbs and nouns and all that kind of

357
00:12:05,579 --> 00:12:09,420
stuff but Web API czar it can be

358
00:12:07,800 --> 00:12:10,889
typically restful and follow a resource

359
00:12:09,420 --> 00:12:12,959
oriented architecture and they can be

360
00:12:10,889 --> 00:12:14,220
used to communicate to other components

361
00:12:12,959 --> 00:12:16,500
or functions either it could be

362
00:12:14,220 --> 00:12:18,680
interactions so if you have application

363
00:12:16,500 --> 00:12:21,120
one or two that could be communicating

364
00:12:18,680 --> 00:12:23,339
between them or interest so it could be

365
00:12:21,120 --> 00:12:25,139
sort of interpretation within that

366
00:12:23,339 --> 00:12:28,589
application or across external

367
00:12:25,139 --> 00:12:30,360
components or functions so what is an

368
00:12:28,589 --> 00:12:32,010
api gateway how does it help us and how

369
00:12:30,360 --> 00:12:36,180
does it fit into this post monolithic

370
00:12:32,010 --> 00:12:37,649
world that we live in so monolithic

371
00:12:36,180 --> 00:12:39,870
applications as we talked about they all

372
00:12:37,649 --> 00:12:41,790
all the functions live inside the same

373
00:12:39,870 --> 00:12:43,500
walled garden right so you have a little

374
00:12:41,790 --> 00:12:44,760
walled garden and you've got all your

375
00:12:43,500 --> 00:12:46,649
functions inside they're all happily

376
00:12:44,760 --> 00:12:48,089
living together and then the users

377
00:12:46,649 --> 00:12:49,320
authenticate through the front door of

378
00:12:48,089 --> 00:12:50,550
this walled garden and once they're

379
00:12:49,320 --> 00:12:51,690
authenticated then they just float

380
00:12:50,550 --> 00:12:53,640
around the functions call each other

381
00:12:51,690 --> 00:12:54,899
because you're assuming that this you

382
00:12:53,640 --> 00:12:56,370
know they add the walled garden is

383
00:12:54,899 --> 00:12:58,230
keeping all the functions securely

384
00:12:56,370 --> 00:13:00,149
inside and that's great for a monolithic

385
00:12:58,230 --> 00:13:01,470
application is protected by a single

386
00:13:00,149 --> 00:13:03,360
point of entry once you enter through

387
00:13:01,470 --> 00:13:04,829
that you make function calls across and

388
00:13:03,360 --> 00:13:06,899
user journey typically doesn't require

389
00:13:04,829 --> 00:13:09,300
further authentication now there are

390
00:13:06,899 --> 00:13:10,949
exceptions like in Java you can enforce

391
00:13:09,300 --> 00:13:12,060
additional you know authentication

392
00:13:10,949 --> 00:13:13,290
authorization requirements within

393
00:13:12,060 --> 00:13:15,510
function calls but in general as a

394
00:13:13,290 --> 00:13:16,920
generality with a monolithic application

395
00:13:15,510 --> 00:13:18,569
you enters the walled garden and then

396
00:13:16,920 --> 00:13:19,949
you're inside and then everybody you

397
00:13:18,570 --> 00:13:21,870
know you're inside that trust zone the

398
00:13:19,949 --> 00:13:23,490
application trust zone and functions

399
00:13:21,870 --> 00:13:24,569
aside cannot be invoked by the outsiders

400
00:13:23,490 --> 00:13:27,120
typically because you don't expose them

401
00:13:24,569 --> 00:13:29,279
and an authorization can happen at the

402
00:13:27,120 --> 00:13:30,959
gate or at the functional level with

403
00:13:29,279 --> 00:13:32,310
micro services there's no more there's

404
00:13:30,959 --> 00:13:34,138
normal wall with a single point of entry

405
00:13:32,310 --> 00:13:35,339
right you took that wall guard and

406
00:13:34,139 --> 00:13:37,110
you're removed it you took all those

407
00:13:35,339 --> 00:13:38,490
functions and now you kind of put them

408
00:13:37,110 --> 00:13:40,050
all on their own in their own containers

409
00:13:38,490 --> 00:13:41,790
and these functions before they were

410
00:13:40,050 --> 00:13:44,189
protected by the entry point of the

411
00:13:41,790 --> 00:13:45,209
application they need protection so what

412
00:13:44,190 --> 00:13:46,769
do you do are you going to get the user

413
00:13:45,209 --> 00:13:48,359
to authenticate every time they're

414
00:13:46,769 --> 00:13:49,529
trying to access one of the micro

415
00:13:48,360 --> 00:13:51,749
services that just doesn't

416
00:13:49,529 --> 00:13:53,910
any sense right so you need new ways of

417
00:13:51,749 --> 00:13:55,589
doing things that still sort of create

418
00:13:53,910 --> 00:13:57,029
that virtual walled garden so that these

419
00:13:55,589 --> 00:13:58,949
micro services that belong to the

420
00:13:57,029 --> 00:14:00,120
application there's still a sense of yes

421
00:13:58,949 --> 00:14:02,248
these things all belong to the same

422
00:14:00,120 --> 00:14:03,569
application and you can enforce similar

423
00:14:02,249 --> 00:14:05,670
policies when it comes to authentication

424
00:14:03,569 --> 00:14:08,459
and authorization and other security

425
00:14:05,670 --> 00:14:09,899
requirements and each in the micro

426
00:14:08,459 --> 00:14:11,878
services world each of those can be

427
00:14:09,899 --> 00:14:14,550
accessed by its API and you need to

428
00:14:11,879 --> 00:14:16,860
ensure that there are users authentic

429
00:14:14,550 --> 00:14:18,089
without full authentication and I tend

430
00:14:16,860 --> 00:14:20,189
to use the term heavy authentication

431
00:14:18,089 --> 00:14:21,990
that's when the user has to provide the

432
00:14:20,189 --> 00:14:24,870
username and password and go through all

433
00:14:21,990 --> 00:14:26,339
that stuff right and so you need to make

434
00:14:24,870 --> 00:14:27,540
sure that you can do that without having

435
00:14:26,339 --> 00:14:29,879
to go through that heavy authentication

436
00:14:27,540 --> 00:14:31,019
for each micro service so you're just a

437
00:14:29,879 --> 00:14:32,790
picture you can see you have different

438
00:14:31,019 --> 00:14:34,920
channels you have the mobile clients a

439
00:14:32,790 --> 00:14:36,599
desktop client you know other external

440
00:14:34,920 --> 00:14:38,878
services they go through an API gateway

441
00:14:36,600 --> 00:14:40,079
and there's several micro services each

442
00:14:38,879 --> 00:14:41,699
with their own database and you can even

443
00:14:40,079 --> 00:14:45,180
have further granularity if you wanted

444
00:14:41,699 --> 00:14:47,758
to so what are the security benefits of

445
00:14:45,180 --> 00:14:48,989
using an API gateway well it acts as a

446
00:14:47,759 --> 00:14:51,240
single point of entry so it kind of

447
00:14:48,990 --> 00:14:52,889
emulates that walled garden single entry

448
00:14:51,240 --> 00:14:54,569
point that we had before right so we

449
00:14:52,889 --> 00:14:56,490
kind of now broken things up but we like

450
00:14:54,569 --> 00:14:58,709
the fact that before our application had

451
00:14:56,490 --> 00:15:01,230
this wall protecting it so we put a

452
00:14:58,709 --> 00:15:03,149
single point of entry by using we could

453
00:15:01,230 --> 00:15:04,410
leverage an API gateway for that so it

454
00:15:03,149 --> 00:15:05,639
acts as a central enforcement of

455
00:15:04,410 --> 00:15:08,430
security policies like authentication

456
00:15:05,639 --> 00:15:10,350
authorization and it guards your API so

457
00:15:08,430 --> 00:15:12,239
microservices now you know you again

458
00:15:10,350 --> 00:15:13,350
you've put this guard around them and

459
00:15:12,240 --> 00:15:15,209
what you got to do though is you got to

460
00:15:13,350 --> 00:15:16,740
make sure that you know you in order to

461
00:15:15,209 --> 00:15:18,359
make that guard complete you got to make

462
00:15:16,740 --> 00:15:19,620
sure that those micro services for

463
00:15:18,360 --> 00:15:21,180
someone to access them they have gone

464
00:15:19,620 --> 00:15:22,500
through that API gateway that there's an

465
00:15:21,180 --> 00:15:23,939
indication they've got a token or

466
00:15:22,500 --> 00:15:25,379
something that says hey I went through

467
00:15:23,939 --> 00:15:26,790
the API gateway and I got this token and

468
00:15:25,379 --> 00:15:28,800
now I can come to this talk to this

469
00:15:26,790 --> 00:15:31,649
function and that's how you emulate the

470
00:15:28,800 --> 00:15:33,750
previous walled garden and and you can

471
00:15:31,649 --> 00:15:36,449
issue a API gateway can issue tokens

472
00:15:33,750 --> 00:15:37,350
once security policies are met so you

473
00:15:36,449 --> 00:15:38,939
know once you go through that gateway

474
00:15:37,350 --> 00:15:40,350
it's like okay these are the policies

475
00:15:38,939 --> 00:15:43,139
you have to have multi-factor

476
00:15:40,350 --> 00:15:45,300
authentication you have to you know it

477
00:15:43,139 --> 00:15:46,350
applies JSON threat protection or XML

478
00:15:45,300 --> 00:15:48,029
threat protection or whatever those

479
00:15:46,350 --> 00:15:49,559
policies are once you pass those

480
00:15:48,029 --> 00:15:51,870
policies then you do the heavy

481
00:15:49,559 --> 00:15:53,309
authentication and then you get a token

482
00:15:51,870 --> 00:15:54,720
so you should use an identity and access

483
00:15:53,309 --> 00:15:56,790
management service to properly handle

484
00:15:54,720 --> 00:15:58,559
authentication authorization I see often

485
00:15:56,790 --> 00:16:00,269
times people just use nginx as a river

486
00:15:58,559 --> 00:16:02,519
proxy and they kind of use that as a

487
00:16:00,269 --> 00:16:03,370
pseudo API gateway and and try to do

488
00:16:02,519 --> 00:16:04,930
some of the authentication

489
00:16:03,370 --> 00:16:07,360
luckily it's a good idea to tie that in

490
00:16:04,930 --> 00:16:10,709
to an actual I am service whatever that

491
00:16:07,360 --> 00:16:12,760
may be if you want to use third-party

492
00:16:10,710 --> 00:16:14,890
service management or identity provider

493
00:16:12,760 --> 00:16:17,020
services to do that that would be great

494
00:16:14,890 --> 00:16:19,180
and tokens that then the tokens are

495
00:16:17,020 --> 00:16:21,400
issued for that can be used for light

496
00:16:19,180 --> 00:16:23,140
authentication and authorization when

497
00:16:21,400 --> 00:16:25,329
accessing those micro services so at the

498
00:16:23,140 --> 00:16:27,100
gateway you know the request arrives

499
00:16:25,330 --> 00:16:29,230
they're the gateway it talks to an

500
00:16:27,100 --> 00:16:31,000
identity provider and I am service says

501
00:16:29,230 --> 00:16:33,670
hey this is Farshad he's trying to

502
00:16:31,000 --> 00:16:35,890
access this micro service and do XYZ and

503
00:16:33,670 --> 00:16:37,689
then you know if you pass the policies

504
00:16:35,890 --> 00:16:39,699
and everything is ok you're given a

505
00:16:37,690 --> 00:16:41,589
token that can be your token that can be

506
00:16:39,700 --> 00:16:44,080
used downstream for light authentication

507
00:16:41,589 --> 00:16:45,640
and accessing those so ie for example ID

508
00:16:44,080 --> 00:16:47,589
token an access token and open ID

509
00:16:45,640 --> 00:16:49,930
connects can act as those Lite

510
00:16:47,589 --> 00:16:51,400
authentication tokens and it lowers the

511
00:16:49,930 --> 00:16:53,469
exposure of long term credentials right

512
00:16:51,400 --> 00:16:55,240
so you're not passing the username and

513
00:16:53,470 --> 00:16:56,890
password all the way downstream for

514
00:16:55,240 --> 00:16:58,360
every function call you're taking that

515
00:16:56,890 --> 00:17:00,430
token that token is short-lived right

516
00:16:58,360 --> 00:17:01,660
the access token should typically be you

517
00:17:00,430 --> 00:17:03,370
know short-lived for you know 20 minutes

518
00:17:01,660 --> 00:17:04,720
or whatever it is and then that gets

519
00:17:03,370 --> 00:17:06,220
used downstream and then you're not

520
00:17:04,720 --> 00:17:08,110
exposing the username and password all

521
00:17:06,220 --> 00:17:09,760
the way I have worked I am actually

522
00:17:08,109 --> 00:17:11,409
working with a client right now that you

523
00:17:09,760 --> 00:17:12,819
see that they are passing the username

524
00:17:11,410 --> 00:17:14,530
and password with every function all the

525
00:17:12,819 --> 00:17:15,699
way down the function call do not do

526
00:17:14,530 --> 00:17:17,859
that right not a good idea

527
00:17:15,699 --> 00:17:19,510
exchange that for an access token that's

528
00:17:17,859 --> 00:17:22,149
short-lived and then use that for your

529
00:17:19,510 --> 00:17:23,800
light authentication downstream but

530
00:17:22,150 --> 00:17:26,589
there are also non Security benefits API

531
00:17:23,800 --> 00:17:28,629
gateway is not just for security API

532
00:17:26,589 --> 00:17:31,090
gateways can expose different api's for

533
00:17:28,630 --> 00:17:33,010
each client they can route requests to

534
00:17:31,090 --> 00:17:34,809
different micro services so you could

535
00:17:33,010 --> 00:17:36,879
have desktop versus mobile versions of

536
00:17:34,809 --> 00:17:38,980
stuff and API gateways can help you with

537
00:17:36,880 --> 00:17:41,230
that and they can create mashups using

538
00:17:38,980 --> 00:17:43,360
multiple micro services for example you

539
00:17:41,230 --> 00:17:45,490
might have a you know a transaction

540
00:17:43,360 --> 00:17:47,709
summary micro service but then in order

541
00:17:45,490 --> 00:17:49,450
to show that the user or sorry about

542
00:17:47,710 --> 00:17:50,920
account balance summary but you might

543
00:17:49,450 --> 00:17:52,030
have checking accounts and credit cards

544
00:17:50,920 --> 00:17:54,070
and those are serviced by different

545
00:17:52,030 --> 00:17:56,590
micro services so your account balance

546
00:17:54,070 --> 00:17:58,389
micro service can fan out and you know

547
00:17:56,590 --> 00:18:00,280
go to those different micro services one

548
00:17:58,390 --> 00:18:01,870
on the credit card system and one on the

549
00:18:00,280 --> 00:18:03,790
you know core banking system and be able

550
00:18:01,870 --> 00:18:07,239
to aggregate that and do a mash up and

551
00:18:03,790 --> 00:18:08,260
provide you with with with one set of

552
00:18:07,240 --> 00:18:10,929
data that can be used by your

553
00:18:08,260 --> 00:18:12,760
application and it can abstract service

554
00:18:10,929 --> 00:18:14,650
instances of their location as well it

555
00:18:12,760 --> 00:18:16,549
can hide service partitioning from

556
00:18:14,650 --> 00:18:17,749
clients which is really nice

557
00:18:16,549 --> 00:18:20,239
that can change over time and it

558
00:18:17,749 --> 00:18:24,289
provides protocol translation which is

559
00:18:20,239 --> 00:18:25,879
also handy so I just want to talk about

560
00:18:24,289 --> 00:18:26,929
user level security context and

561
00:18:25,879 --> 00:18:29,149
end-to-end trust because that's quite

562
00:18:26,929 --> 00:18:31,429
important and in this world when we're

563
00:18:29,149 --> 00:18:34,039
using tokens that's we need to think

564
00:18:31,429 --> 00:18:36,019
about those those those concepts so in a

565
00:18:34,039 --> 00:18:37,609
traditional system users authenticate to

566
00:18:36,019 --> 00:18:39,349
an external endpoints so you have your

567
00:18:37,609 --> 00:18:40,939
application if you know your typical

568
00:18:39,349 --> 00:18:42,918
three-tier application right you have

569
00:18:40,940 --> 00:18:44,239
your presentation layer your logic layer

570
00:18:42,919 --> 00:18:46,279
and your data layer right the user

571
00:18:44,239 --> 00:18:48,019
usually authenticates the the first

572
00:18:46,279 --> 00:18:49,820
layer and then you know the your logic

573
00:18:48,019 --> 00:18:51,320
layer just has a service account that

574
00:18:49,820 --> 00:18:53,269
connects to the database right it

575
00:18:51,320 --> 00:18:55,309
doesn't carry that user contacts

576
00:18:53,269 --> 00:18:56,719
downstream the user authenticates to the

577
00:18:55,309 --> 00:18:58,519
front the first layer and the first

578
00:18:56,719 --> 00:19:00,379
layer it knows that you're you but when

579
00:18:58,519 --> 00:19:01,940
that that layers talking downstream it's

580
00:19:00,379 --> 00:19:04,009
using a service account connecting to

581
00:19:01,940 --> 00:19:05,570
the database and that that that logic

582
00:19:04,009 --> 00:19:07,339
layer could technically act on behalf of

583
00:19:05,570 --> 00:19:09,439
any user so it could query the data for

584
00:19:07,339 --> 00:19:11,119
any users data that's not not great you

585
00:19:09,440 --> 00:19:13,039
need to carry that user level security

586
00:19:11,119 --> 00:19:15,408
context that authentication context all

587
00:19:13,039 --> 00:19:16,999
the way down across the call change so

588
00:19:15,409 --> 00:19:19,070
that every every component that

589
00:19:16,999 --> 00:19:20,899
servicing that call is looking and

590
00:19:19,070 --> 00:19:22,609
acting based on the user level security

591
00:19:20,899 --> 00:19:24,829
context so that you don't provide the

592
00:19:22,609 --> 00:19:26,299
opportunity for someone for if someone

593
00:19:24,829 --> 00:19:29,450
compromises the logic layer for example

594
00:19:26,299 --> 00:19:30,859
they can't just go query data for every

595
00:19:29,450 --> 00:19:32,719
user that there'll be this additional

596
00:19:30,859 --> 00:19:34,218
protection through user level security

597
00:19:32,719 --> 00:19:36,320
contacts so that's the problem is that

598
00:19:34,219 --> 00:19:38,029
you get access to all data what to

599
00:19:36,320 --> 00:19:40,070
through that service account it's too

600
00:19:38,029 --> 00:19:42,139
permissive and that's against one of our

601
00:19:40,070 --> 00:19:43,129
favorite you know principles of security

602
00:19:42,139 --> 00:19:44,718
which is the principle of least

603
00:19:43,129 --> 00:19:47,570
privilege right you don't want to you

604
00:19:44,719 --> 00:19:49,309
don't want to break that and you can't

605
00:19:47,570 --> 00:19:51,019
do comprehensive auditing of specific

606
00:19:49,309 --> 00:19:53,359
actions related to a user either because

607
00:19:51,019 --> 00:19:55,339
every every every action from that

608
00:19:53,359 --> 00:19:57,468
that's a logic layer to the data layer

609
00:19:55,339 --> 00:19:58,940
for example would be using that service

610
00:19:57,469 --> 00:20:01,309
account so you don't really know who

611
00:19:58,940 --> 00:20:03,320
they were they were acting on behalf of

612
00:20:01,309 --> 00:20:07,299
there's no user level security context

613
00:20:03,320 --> 00:20:09,559
for more granular comprehensive auditing

614
00:20:07,299 --> 00:20:10,999
so you should establish user level

615
00:20:09,559 --> 00:20:12,678
security context before allowing access

616
00:20:10,999 --> 00:20:14,989
and that should be carried end-to-end

617
00:20:12,679 --> 00:20:16,039
which is this concept of concept of

618
00:20:14,989 --> 00:20:18,079
end-to-end trust that we're talking

619
00:20:16,039 --> 00:20:20,149
about and a security token can be used

620
00:20:18,079 --> 00:20:21,859
for that to determine the security

621
00:20:20,149 --> 00:20:23,689
context before servicing that request as

622
00:20:21,859 --> 00:20:25,600
I mentioned earlier so when you go to

623
00:20:23,690 --> 00:20:27,160
that API gateway you say you do

624
00:20:25,600 --> 00:20:28,870
have the authentication and the policies

625
00:20:27,160 --> 00:20:31,090
are checked then then you get a token

626
00:20:28,870 --> 00:20:32,860
that token is granted based on the scope

627
00:20:31,090 --> 00:20:34,030
and based on the resource you trying to

628
00:20:32,860 --> 00:20:35,409
access and all those kinds of things

629
00:20:34,030 --> 00:20:36,820
which we're going to talk about and then

630
00:20:35,410 --> 00:20:38,289
that should be carried downstream I'm

631
00:20:36,820 --> 00:20:40,200
gonna give you some examples we're gonna

632
00:20:38,289 --> 00:20:42,789
talk about that a bit more as well and

633
00:20:40,200 --> 00:20:44,380
security token can be used before

634
00:20:42,789 --> 00:20:45,549
servicing and the tokens must be signed

635
00:20:44,380 --> 00:20:47,530
and also encrypted if there's a

636
00:20:45,549 --> 00:20:48,940
confidentiality concern so if you don't

637
00:20:47,530 --> 00:20:50,440
sign those tokens that any attacker

638
00:20:48,940 --> 00:20:51,789
inside the the system could just

639
00:20:50,440 --> 00:20:54,220
generate their own token right so

640
00:20:51,789 --> 00:20:55,690
signing is quite important oftentimes

641
00:20:54,220 --> 00:20:57,010
these tokens don't need to be encrypted

642
00:20:55,690 --> 00:20:58,330
because you might have things that's

643
00:20:57,010 --> 00:20:59,408
just like a claimed ID or scope that

644
00:20:58,330 --> 00:21:01,689
might not have confidentiality

645
00:20:59,409 --> 00:21:02,950
requirements but if there were data

646
00:21:01,690 --> 00:21:04,809
elements that you are including that

647
00:21:02,950 --> 00:21:06,309
token for whatever reason that you

648
00:21:04,809 --> 00:21:09,070
require confidentiality then you should

649
00:21:06,309 --> 00:21:11,379
also consider encrypting them an API

650
00:21:09,070 --> 00:21:13,090
invocation may involve calls across

651
00:21:11,380 --> 00:21:14,799
several downstream microservices right

652
00:21:13,090 --> 00:21:15,970
so if you have a simple application the

653
00:21:14,799 --> 00:21:18,100
user is just going through the Gateway

654
00:21:15,970 --> 00:21:19,210
they're calling one function but in the

655
00:21:18,100 --> 00:21:19,870
example that I gave when you have a

656
00:21:19,210 --> 00:21:21,490
mashup

657
00:21:19,870 --> 00:21:23,260
micro service that micro service is

658
00:21:21,490 --> 00:21:24,880
going to call two other micro services

659
00:21:23,260 --> 00:21:26,230
right so your application and the

660
00:21:24,880 --> 00:21:28,900
presentation layer is saying hey you

661
00:21:26,230 --> 00:21:30,700
know show me all the account balances

662
00:21:28,900 --> 00:21:32,200
for every account that I have that first

663
00:21:30,700 --> 00:21:33,909
micro service receives that request but

664
00:21:32,200 --> 00:21:36,010
that needs to fan that out to more micro

665
00:21:33,909 --> 00:21:39,039
services downstream so in order to do

666
00:21:36,010 --> 00:21:41,710
that you need to you need to ensure that

667
00:21:39,039 --> 00:21:43,750
the authenticated users security context

668
00:21:41,710 --> 00:21:47,020
is communicated and to end which is the

669
00:21:43,750 --> 00:21:48,490
end-to-end trust concept with that in to

670
00:21:47,020 --> 00:21:50,408
end trust concept you communicate the

671
00:21:48,490 --> 00:21:51,850
authenticated users security context to

672
00:21:50,409 --> 00:21:54,130
all parties across the journey and in

673
00:21:51,850 --> 00:21:56,199
each party can take appropriate action

674
00:21:54,130 --> 00:21:58,360
based on the user's current context and

675
00:21:56,200 --> 00:22:00,549
you can exchange that you can use a

676
00:21:58,360 --> 00:22:01,719
token exchange endpoint or end-to-end

677
00:22:00,549 --> 00:22:04,270
trust tokens and we're gonna talk about

678
00:22:01,720 --> 00:22:06,400
that as well and you but don't forget

679
00:22:04,270 --> 00:22:09,389
that you also need service level mutual

680
00:22:06,400 --> 00:22:11,740
authentication in addition to that and

681
00:22:09,390 --> 00:22:13,990
the thing is that a lot of people say ok

682
00:22:11,740 --> 00:22:15,250
great I've you know in the old model we

683
00:22:13,990 --> 00:22:16,690
were using service level authentication

684
00:22:15,250 --> 00:22:18,429
right you had your logic layer

685
00:22:16,690 --> 00:22:19,840
communicating to the data using a

686
00:22:18,429 --> 00:22:21,220
service account everyone's familiar with

687
00:22:19,840 --> 00:22:23,139
that rights you know ODBC connections

688
00:22:21,220 --> 00:22:24,610
JDBC connections so that was not that

689
00:22:23,140 --> 00:22:26,830
great as we talked about because there's

690
00:22:24,610 --> 00:22:28,059
no user contacts now I'm seeing what's

691
00:22:26,830 --> 00:22:29,199
happening is the opposite everyone's

692
00:22:28,059 --> 00:22:31,299
like oh great I got an access token

693
00:22:29,200 --> 00:22:33,429
let's just do away with that user level

694
00:22:31,299 --> 00:22:34,929
security the service level security

695
00:22:33,429 --> 00:22:36,669
layer that we had that's also not that

696
00:22:34,929 --> 00:22:37,720
great that's that's fine the argument is

697
00:22:36,669 --> 00:22:39,100
like well you know if you don't have a

698
00:22:37,720 --> 00:22:41,200
token the service won't service

699
00:22:39,100 --> 00:22:42,639
request but the the counter-argument to

700
00:22:41,200 --> 00:22:44,380
that is without talking me stolen and if

701
00:22:42,639 --> 00:22:46,000
anyone captures that token they can talk

702
00:22:44,380 --> 00:22:48,909
to that service so you still want to

703
00:22:46,000 --> 00:22:50,019
make limit which other components in

704
00:22:48,909 --> 00:22:51,730
your application can talk to that

705
00:22:50,019 --> 00:22:53,980
service first right so you first need to

706
00:22:51,730 --> 00:22:55,419
go here I've got a service here which of

707
00:22:53,980 --> 00:22:57,549
other services are allowed to talk to

708
00:22:55,419 --> 00:22:59,139
the service and then then we establish

709
00:22:57,549 --> 00:23:00,789
service level trust and then you go okay

710
00:22:59,139 --> 00:23:01,990
cool your your this other component

711
00:23:00,789 --> 00:23:03,639
you're allowed to talk to me now give me

712
00:23:01,990 --> 00:23:05,019
a token right you shouldn't just accept

713
00:23:03,639 --> 00:23:06,610
that token from anybody on the network

714
00:23:05,019 --> 00:23:07,990
because if that tokens got that access

715
00:23:06,610 --> 00:23:10,149
token is compromised anyone can play

716
00:23:07,990 --> 00:23:11,590
that back so that can be handled that

717
00:23:10,149 --> 00:23:13,600
can be mitigated by using overlay

718
00:23:11,590 --> 00:23:16,120
networking like the X lands a lot of

719
00:23:13,600 --> 00:23:18,039
these these container container

720
00:23:16,120 --> 00:23:20,289
ecosystems support that like kubernetes

721
00:23:18,039 --> 00:23:21,610
it can creates clusters and and tightens

722
00:23:20,289 --> 00:23:23,408
the networking amongst your different

723
00:23:21,610 --> 00:23:25,539
different micro services you can also

724
00:23:23,409 --> 00:23:27,159
implement mutual mutual TLS but it's not

725
00:23:25,539 --> 00:23:28,299
for the faint of heart because as you

726
00:23:27,159 --> 00:23:29,470
can imagine what you're gonna have all

727
00:23:28,299 --> 00:23:31,600
these components and you have to do all

728
00:23:29,470 --> 00:23:33,730
kinds of complicated PKI and you know

729
00:23:31,600 --> 00:23:35,199
you need that you need a public private

730
00:23:33,730 --> 00:23:37,179
key for each of your micro services and

731
00:23:35,200 --> 00:23:38,889
try to manage them we I tried to go down

732
00:23:37,179 --> 00:23:40,509
that path but it was like kind of scary

733
00:23:38,889 --> 00:23:41,949
and we kind of quickly we toured it and

734
00:23:40,509 --> 00:23:44,320
again one of the nice things about

735
00:23:41,950 --> 00:23:45,850
kubernetes and these modern container

736
00:23:44,320 --> 00:23:47,559
orchestration and management systems is

737
00:23:45,850 --> 00:23:49,149
that they provide some of this for you

738
00:23:47,559 --> 00:23:51,129
so that you can create these map overlay

739
00:23:49,149 --> 00:23:53,439
networks and and tighten things and you

740
00:23:51,129 --> 00:23:55,418
can also use your service securement TLS

741
00:23:53,440 --> 00:23:57,100
as long as you accomplish the objective

742
00:23:55,419 --> 00:23:58,690
right it's always about the what

743
00:23:57,100 --> 00:24:00,699
objective are we trying to accomplish

744
00:23:58,690 --> 00:24:01,899
the objective is having these micro

745
00:24:00,700 --> 00:24:03,730
services that belong to this application

746
00:24:01,899 --> 00:24:05,529
should only be talking to each other you

747
00:24:03,730 --> 00:24:07,000
shouldn't have a random rogue service

748
00:24:05,529 --> 00:24:08,320
try to talk to them and you'd our

749
00:24:07,000 --> 00:24:09,879
different mechanisms but don't forget

750
00:24:08,320 --> 00:24:12,158
about service level authentication

751
00:24:09,879 --> 00:24:13,240
because you have a token now write that

752
00:24:12,159 --> 00:24:16,059
in that that's the message that I'm

753
00:24:13,240 --> 00:24:17,980
trying to convey so there's two

754
00:24:16,059 --> 00:24:19,299
different ways you can do this and you

755
00:24:17,980 --> 00:24:22,840
can ensure that there's end-to-end trust

756
00:24:19,299 --> 00:24:24,190
across your call of call chain one is to

757
00:24:22,840 --> 00:24:26,110
use it took the next exchange endpoint

758
00:24:24,190 --> 00:24:27,909
this is the preferred method so services

759
00:24:26,110 --> 00:24:29,500
exchange a token for another one so you

760
00:24:27,909 --> 00:24:31,629
go through your API gateway you reach

761
00:24:29,500 --> 00:24:33,070
your account balance micro service this

762
00:24:31,629 --> 00:24:34,899
account balance micro service now needs

763
00:24:33,070 --> 00:24:36,129
to go to two other micro services so

764
00:24:34,899 --> 00:24:37,570
then in this account balance micro

765
00:24:36,129 --> 00:24:39,789
service can take it took in that ascott

766
00:24:37,570 --> 00:24:41,439
go to token exchange endpoint say hey i

767
00:24:39,789 --> 00:24:43,419
need to make a downstream call to the

768
00:24:41,440 --> 00:24:45,190
you know the credit card balance micro

769
00:24:43,419 --> 00:24:47,110
service what do i do and this is the

770
00:24:45,190 --> 00:24:49,090
resource i'm trying to my scope is i

771
00:24:47,110 --> 00:24:50,879
just want to do read-only and you know

772
00:24:49,090 --> 00:24:53,250
this is who the user is and you

773
00:24:50,880 --> 00:24:54,840
and the protocol downstream is XYZ then

774
00:24:53,250 --> 00:24:56,820
you get a new token that's suitable for

775
00:24:54,840 --> 00:24:59,270
that protocol and suitable for that next

776
00:24:56,820 --> 00:25:01,770
the net the next call in that call chain

777
00:24:59,270 --> 00:25:03,210
this limits the amount of access granted

778
00:25:01,770 --> 00:25:04,590
and allows for heterogeneous protocol

779
00:25:03,210 --> 00:25:06,840
use right it's really nice because if

780
00:25:04,590 --> 00:25:08,669
the protocol down streams happen if you

781
00:25:06,840 --> 00:25:10,139
if the upstream protocol was like let's

782
00:25:08,670 --> 00:25:12,600
say you were doing a you know it was

783
00:25:10,140 --> 00:25:13,770
restful with Jason and HTTP but the next

784
00:25:12,600 --> 00:25:16,409
micro service was an old one that

785
00:25:13,770 --> 00:25:18,450
supported you know it needed I needed a

786
00:25:16,410 --> 00:25:19,890
sam'l token the token exchange point can

787
00:25:18,450 --> 00:25:21,930
handle the handle that for you right you

788
00:25:19,890 --> 00:25:23,310
can go like okay here's a token that I

789
00:25:21,930 --> 00:25:25,110
got but I need to talk to this guy who

790
00:25:23,310 --> 00:25:26,520
needs a sam'l token that took an

791
00:25:25,110 --> 00:25:27,750
exchange endpoint can generate one for

792
00:25:26,520 --> 00:25:30,750
you and let you go about your business

793
00:25:27,750 --> 00:25:32,340
and and this may be also handled by the

794
00:25:30,750 --> 00:25:34,140
same endpoint that issues the initial

795
00:25:32,340 --> 00:25:35,580
security token so it depends on your

796
00:25:34,140 --> 00:25:37,140
architecture you could have a separate

797
00:25:35,580 --> 00:25:38,939
security token exchange endpoint and

798
00:25:37,140 --> 00:25:40,350
then another one that API gateway deals

799
00:25:38,940 --> 00:25:41,850
with initially for that first token

800
00:25:40,350 --> 00:25:44,550
generation or you could have a service

801
00:25:41,850 --> 00:25:47,850
that provides both token token

802
00:25:44,550 --> 00:25:49,470
functionality and each micro service

803
00:25:47,850 --> 00:25:51,659
verifies that hook in and provides

804
00:25:49,470 --> 00:25:52,920
access based on the context and claim

805
00:25:51,660 --> 00:25:54,540
and scope so when you have this new

806
00:25:52,920 --> 00:25:55,590
token then it goes to the next micro

807
00:25:54,540 --> 00:25:57,840
service they kind of look at these

808
00:25:55,590 --> 00:25:59,879
attributes and then they if the tokens

809
00:25:57,840 --> 00:26:01,409
valid they provide access you can also

810
00:25:59,880 --> 00:26:02,760
use end-to-end trust tokens I've seen

811
00:26:01,410 --> 00:26:04,770
some architectures that do that it's a

812
00:26:02,760 --> 00:26:06,360
bit limiting those things you can

813
00:26:04,770 --> 00:26:08,400
generate an end-to-end trust open at the

814
00:26:06,360 --> 00:26:09,689
gateway after the initial set of

815
00:26:08,400 --> 00:26:11,580
policies are enforced so when the user

816
00:26:09,690 --> 00:26:13,620
passes whatever the security guard and

817
00:26:11,580 --> 00:26:15,300
the Gateway is enforcing then you get

818
00:26:13,620 --> 00:26:16,800
this token but the problem with that is

819
00:26:15,300 --> 00:26:19,230
all your downstream services need to

820
00:26:16,800 --> 00:26:20,580
have the same scope or scope with

821
00:26:19,230 --> 00:26:22,890
protocol right because you've generated

822
00:26:20,580 --> 00:26:24,360
a you've generated a jot token well

823
00:26:22,890 --> 00:26:25,830
everybody needs to accept okay so if you

824
00:26:24,360 --> 00:26:27,179
have one service that using sam'l in

825
00:26:25,830 --> 00:26:30,600
that call chain that's not going to work

826
00:26:27,180 --> 00:26:32,790
so it really requires a homogeneous set

827
00:26:30,600 --> 00:26:34,770
of services and also requires policy

828
00:26:32,790 --> 00:26:36,270
knowledge because now you're not you

829
00:26:34,770 --> 00:26:37,770
don't have this a token Exchange

830
00:26:36,270 --> 00:26:39,600
endpoint that looks at the policies and

831
00:26:37,770 --> 00:26:41,280
looks at what this service wants to do

832
00:26:39,600 --> 00:26:42,990
and then it grants the token you're not

833
00:26:41,280 --> 00:26:44,340
doing that so each micro service has to

834
00:26:42,990 --> 00:26:45,870
have that policy knowledge okay while

835
00:26:44,340 --> 00:26:47,550
what who is this guy what is the policy

836
00:26:45,870 --> 00:26:49,590
what do I need to do and then and then

837
00:26:47,550 --> 00:26:52,430
enforce it so you're moving that from a

838
00:26:49,590 --> 00:26:56,850
centralized policy knowledge and policy

839
00:26:52,430 --> 00:26:58,440
store into more of a distributed one so

840
00:26:56,850 --> 00:27:00,300
here you can see an architecture with a

841
00:26:58,440 --> 00:27:02,610
security token service and a token

842
00:27:00,300 --> 00:27:03,010
exchange service so you have your API

843
00:27:02,610 --> 00:27:04,479
key

844
00:27:03,010 --> 00:27:06,669
where you have your user interface the

845
00:27:04,480 --> 00:27:08,350
user makes the call here you would go

846
00:27:06,669 --> 00:27:10,240
into your security token service or your

847
00:27:08,350 --> 00:27:11,980
identity access management you do the

848
00:27:10,240 --> 00:27:13,510
heavy authentication you get that

849
00:27:11,980 --> 00:27:15,370
initial token you go to micro service

850
00:27:13,510 --> 00:27:17,379
one when micro service one needs to talk

851
00:27:15,370 --> 00:27:19,059
to Mike the service two it can go to the

852
00:27:17,380 --> 00:27:20,890
token exchange service and get a new

853
00:27:19,059 --> 00:27:22,990
token and come back and fire it off at

854
00:27:20,890 --> 00:27:28,870
micro service too that's for that

855
00:27:22,990 --> 00:27:30,669
architecture so user level internet

856
00:27:28,870 --> 00:27:32,320
trust is established among micro

857
00:27:30,669 --> 00:27:34,390
services of the same application or

858
00:27:32,320 --> 00:27:36,280
service right so we had this monolithic

859
00:27:34,390 --> 00:27:37,690
application right before they were all

860
00:27:36,280 --> 00:27:38,950
inside this walled garden all the

861
00:27:37,690 --> 00:27:40,870
different functions lived happily ever

862
00:27:38,950 --> 00:27:41,950
after together you broke these out but

863
00:27:40,870 --> 00:27:43,809
they still belong to the same

864
00:27:41,950 --> 00:27:45,100
application they can be used by other

865
00:27:43,809 --> 00:27:46,990
applications but technically they're in

866
00:27:45,100 --> 00:27:48,939
that you know they're trying to perform

867
00:27:46,990 --> 00:27:51,309
functions that ultimately roll out to

868
00:27:48,940 --> 00:27:52,750
this application and and they're all in

869
00:27:51,309 --> 00:27:54,160
the same app we call it an application

870
00:27:52,750 --> 00:27:56,860
trust zone so they use the same identity

871
00:27:54,160 --> 00:27:58,120
provider and the same policies right

872
00:27:56,860 --> 00:27:59,740
because they aren't part of that

873
00:27:58,120 --> 00:28:01,389
application but what if you need to

874
00:27:59,740 --> 00:28:02,440
access micro services in another trust

875
00:28:01,390 --> 00:28:04,419
zone right you got a bunch of other

876
00:28:02,440 --> 00:28:06,220
micro services and they belong to

877
00:28:04,419 --> 00:28:07,480
another application or service but the

878
00:28:06,220 --> 00:28:08,799
whole point of breaking these micro

879
00:28:07,480 --> 00:28:10,150
services out is that you should allow

880
00:28:08,799 --> 00:28:12,129
reuse right I mean that's one of the

881
00:28:10,150 --> 00:28:14,470
beautiful things about breaking things

882
00:28:12,130 --> 00:28:16,030
into a sort of loosely coupled

883
00:28:14,470 --> 00:28:17,470
architecture is that perhaps there's a

884
00:28:16,030 --> 00:28:18,399
function in that other application that

885
00:28:17,470 --> 00:28:20,380
would be useful to you

886
00:28:18,400 --> 00:28:22,360
right but that function that sits in a

887
00:28:20,380 --> 00:28:23,530
different trust zone guarded by a

888
00:28:22,360 --> 00:28:25,299
different identity provider in a

889
00:28:23,530 --> 00:28:27,100
different set of policies so how do you

890
00:28:25,299 --> 00:28:29,110
cross how does one micro service from

891
00:28:27,100 --> 00:28:30,399
one call another so you need to go

892
00:28:29,110 --> 00:28:31,750
through an API gateway if you are

893
00:28:30,400 --> 00:28:33,490
hopefully using that for that micro

894
00:28:31,750 --> 00:28:36,400
service so essentially this might your

895
00:28:33,490 --> 00:28:38,650
micro services is guarded by your trust

896
00:28:36,400 --> 00:28:39,549
zone and your identity provider you're

897
00:28:38,650 --> 00:28:41,200
going to call this other one you're

898
00:28:39,549 --> 00:28:43,540
gonna have to go through their policy

899
00:28:41,200 --> 00:28:44,890
enforcement and their API gateway so you

900
00:28:43,540 --> 00:28:45,909
can armed you can accept the security

901
00:28:44,890 --> 00:28:48,429
token if there's a trust relationship

902
00:28:45,910 --> 00:28:50,080
right so similar to you know how we do

903
00:28:48,429 --> 00:28:51,370
things in like an Active Directory or we

904
00:28:50,080 --> 00:28:52,540
create domains of trust between two

905
00:28:51,370 --> 00:28:54,668
different domain controllers right

906
00:28:52,540 --> 00:28:56,470
similar idea here you can establish

907
00:28:54,669 --> 00:28:58,090
trust between those those different

908
00:28:56,470 --> 00:28:59,890
identity providers and then trust

909
00:28:58,090 --> 00:29:02,020
end-to-end trust okay so they need to be

910
00:28:59,890 --> 00:29:04,630
reissued because they carry specific

911
00:29:02,020 --> 00:29:06,400
contexts and specific resources that

912
00:29:04,630 --> 00:29:09,100
they're permitted so but you can you

913
00:29:06,400 --> 00:29:10,750
could if you have the the the trust

914
00:29:09,100 --> 00:29:12,520
relationship established between the two

915
00:29:10,750 --> 00:29:14,290
different identity providers at least

916
00:29:12,520 --> 00:29:16,300
the identity context or the user level

917
00:29:14,290 --> 00:29:17,740
security context could be

918
00:29:16,300 --> 00:29:19,750
transferred without having to go through

919
00:29:17,740 --> 00:29:21,640
the heavy authentication again again

920
00:29:19,750 --> 00:29:22,930
very similar concept we have domain

921
00:29:21,640 --> 00:29:27,250
trust and Active Directory and things

922
00:29:22,930 --> 00:29:29,500
like that so let's talk a little bit

923
00:29:27,250 --> 00:29:30,730
about authorization we've kind of

924
00:29:29,500 --> 00:29:33,250
touched on this but I wanted to just

925
00:29:30,730 --> 00:29:35,110
delve in it a little bit deeper each

926
00:29:33,250 --> 00:29:36,490
micro service may have specific

927
00:29:35,110 --> 00:29:38,080
authorization requirements right so when

928
00:29:36,490 --> 00:29:39,640
you get down to the bottom line you

929
00:29:38,080 --> 00:29:40,929
might have like general authorization

930
00:29:39,640 --> 00:29:43,270
requirements at the gateway say hey you

931
00:29:40,930 --> 00:29:44,530
need to enforce XML threat protection or

932
00:29:43,270 --> 00:29:46,210
JSON threat protection you might have

933
00:29:44,530 --> 00:29:47,770
rate limiting you might have a

934
00:29:46,210 --> 00:29:50,260
two-factor authentication those are like

935
00:29:47,770 --> 00:29:51,190
your application level policies but that

936
00:29:50,260 --> 00:29:52,990
get enforced and there's some

937
00:29:51,190 --> 00:29:55,690
authorization but it's sort of that the

938
00:29:52,990 --> 00:29:57,580
Gateway is very you know high level when

939
00:29:55,690 --> 00:29:59,560
you get into each micro service for

940
00:29:57,580 --> 00:30:01,689
example a bank account micro service to

941
00:29:59,560 --> 00:30:03,370
only allow read operations to checking

942
00:30:01,690 --> 00:30:04,780
account for a specific user that has

943
00:30:03,370 --> 00:30:06,850
authenticated with basic authentication

944
00:30:04,780 --> 00:30:10,600
but if that if they you want to actually

945
00:30:06,850 --> 00:30:11,949
do some readwrite functionality to

946
00:30:10,600 --> 00:30:13,719
change that balance you might need to of

947
00:30:11,950 --> 00:30:15,790
two-factor authentication right so there

948
00:30:13,720 --> 00:30:17,260
are different in this example there are

949
00:30:15,790 --> 00:30:19,960
different authorization requirements

950
00:30:17,260 --> 00:30:21,700
based on based on what what you're

951
00:30:19,960 --> 00:30:24,010
trying to achieve and a security token

952
00:30:21,700 --> 00:30:25,570
service can issue a token based on the

953
00:30:24,010 --> 00:30:27,340
resource requested so it could say hey

954
00:30:25,570 --> 00:30:30,100
I'm trying to access this particular

955
00:30:27,340 --> 00:30:31,659
endpoint this is the scope so my scope

956
00:30:30,100 --> 00:30:33,760
has read write or it's read or whatever

957
00:30:31,660 --> 00:30:35,290
that might be and the users security

958
00:30:33,760 --> 00:30:37,480
contacts so it could take all of those

959
00:30:35,290 --> 00:30:39,250
things into account and based on those

960
00:30:37,480 --> 00:30:40,780
factors it could give you a token and

961
00:30:39,250 --> 00:30:42,220
that token can then be given to that

962
00:30:40,780 --> 00:30:43,899
micro Service and if the micro Service

963
00:30:42,220 --> 00:30:45,880
verifies the signature so yep I accept

964
00:30:43,900 --> 00:30:48,070
this token then it allows permission

965
00:30:45,880 --> 00:30:50,170
based on that based on the attributes

966
00:30:48,070 --> 00:30:53,350
that are inside that particular security

967
00:30:50,170 --> 00:30:55,510
token and the tokens claim can include

968
00:30:53,350 --> 00:30:58,120
things like end user an issue is

969
00:30:55,510 --> 00:30:59,920
identity right it can include identities

970
00:30:58,120 --> 00:31:01,719
of specific consumers hey this this

971
00:30:59,920 --> 00:31:03,040
token can only be used by this consumer

972
00:31:01,720 --> 00:31:05,080
or not by everybody right so if someone

973
00:31:03,040 --> 00:31:07,510
stole that token maybe that would be a

974
00:31:05,080 --> 00:31:10,110
good mitigation for that and also

975
00:31:07,510 --> 00:31:12,730
expiration time in there as well and

976
00:31:10,110 --> 00:31:14,169
each micro service verifies the

977
00:31:12,730 --> 00:31:15,820
authenticity of the token first as I

978
00:31:14,170 --> 00:31:18,550
mentioned and then access is provided

979
00:31:15,820 --> 00:31:20,350
based on valid authorized claims and

980
00:31:18,550 --> 00:31:21,970
scopes that are specified in that token

981
00:31:20,350 --> 00:31:23,110
the micro service itself doesn't have to

982
00:31:21,970 --> 00:31:24,760
go and do the policy it doesn't even

983
00:31:23,110 --> 00:31:27,040
have a policy info right it says yeah I

984
00:31:24,760 --> 00:31:28,770
was able to the signature match this is

985
00:31:27,040 --> 00:31:30,629
good it was issued by token exchange

986
00:31:28,770 --> 00:31:32,700
point I'm gonna just trust that I can

987
00:31:30,630 --> 00:31:33,930
service this user for this read request

988
00:31:32,700 --> 00:31:35,310
or read/write request right

989
00:31:33,930 --> 00:31:36,540
the opposite of that would have been if

990
00:31:35,310 --> 00:31:37,980
you weren't using it token exchange

991
00:31:36,540 --> 00:31:39,360
endpoint then you would have it have to

992
00:31:37,980 --> 00:31:40,740
have your own policy story at your micro

993
00:31:39,360 --> 00:31:42,780
service level and figure out ok well

994
00:31:40,740 --> 00:31:45,120
it's Farshad and he wants to do read

995
00:31:42,780 --> 00:31:46,379
read write operation on this and then

996
00:31:45,120 --> 00:31:47,489
you know you'd have to go to a policy

997
00:31:46,380 --> 00:31:49,410
store to figure out whether that's

998
00:31:47,490 --> 00:31:51,090
allowed or not so it's you can do that

999
00:31:49,410 --> 00:31:54,750
centrally by using that token exchange

1000
00:31:51,090 --> 00:31:56,280
endpoint and so using a single entrant

1001
00:31:54,750 --> 00:31:57,990
Rustica and each micro service needs to

1002
00:31:56,280 --> 00:31:59,460
handle their own authorization and it

1003
00:31:57,990 --> 00:32:00,450
requires policy information at that

1004
00:31:59,460 --> 00:32:02,340
level and becomes a more difficult

1005
00:32:00,450 --> 00:32:04,920
becomes a bit more difficult to manage

1006
00:32:02,340 --> 00:32:06,510
and the token exchange service can be

1007
00:32:04,920 --> 00:32:07,710
used to obtain a new token for

1008
00:32:06,510 --> 00:32:11,400
downstream calls and it allows more

1009
00:32:07,710 --> 00:32:13,200
flexibility and better access control so

1010
00:32:11,400 --> 00:32:16,320
what about authentication and

1011
00:32:13,200 --> 00:32:19,230
authorization protocols that that you

1012
00:32:16,320 --> 00:32:20,340
can use so sam'l is one that you know a

1013
00:32:19,230 --> 00:32:22,200
lot of people have heard about it's been

1014
00:32:20,340 --> 00:32:23,730
around for quite a while and it's used

1015
00:32:22,200 --> 00:32:24,900
for authentication and authorization so

1016
00:32:23,730 --> 00:32:27,570
you can do both of those with sam'l

1017
00:32:24,900 --> 00:32:29,820
right it's a protocol that uses XML and

1018
00:32:27,570 --> 00:32:31,320
it's XML based that it you know the use

1019
00:32:29,820 --> 00:32:33,710
of sam'l tokens and the soap protocol

1020
00:32:31,320 --> 00:32:36,240
it's very heavy as we mentioned earlier

1021
00:32:33,710 --> 00:32:37,860
and then when the the web world was

1022
00:32:36,240 --> 00:32:39,440
gaining traction and people wanted to do

1023
00:32:37,860 --> 00:32:41,969
these kinds of central authentication

1024
00:32:39,440 --> 00:32:45,060
open I became about right open ID though

1025
00:32:41,970 --> 00:32:46,560
is is no longer it's been it's been

1026
00:32:45,060 --> 00:32:48,629
deprecated it's now been replaced by

1027
00:32:46,560 --> 00:32:50,310
open ie connect and it only did off

1028
00:32:48,630 --> 00:32:52,020
medication so there's a lot of confusion

1029
00:32:50,310 --> 00:32:53,820
about open ID and OAuth and open ID

1030
00:32:52,020 --> 00:32:55,379
connects and I'm hoping that at least

1031
00:32:53,820 --> 00:32:56,850
through this one slide I can kind of

1032
00:32:55,380 --> 00:32:58,260
clarify that because I work with a lot

1033
00:32:56,850 --> 00:32:59,520
of developers they're like yeah we're

1034
00:32:58,260 --> 00:33:01,350
doing authentication we're using auth

1035
00:32:59,520 --> 00:33:03,150
I'm like is not an authentication

1036
00:33:01,350 --> 00:33:05,490
protocol or off the supposed to use for

1037
00:33:03,150 --> 00:33:06,840
delegated access you know if you're

1038
00:33:05,490 --> 00:33:09,360
tight you should be using Open ID

1039
00:33:06,840 --> 00:33:10,530
Connect so but this is like 80% of the

1040
00:33:09,360 --> 00:33:12,149
clients we work with they totally have

1041
00:33:10,530 --> 00:33:14,100
this wrong and even if they say that

1042
00:33:12,150 --> 00:33:15,150
they're in plenty open ID Connect they

1043
00:33:14,100 --> 00:33:16,409
don't really know what they're doing

1044
00:33:15,150 --> 00:33:17,670
they've got an access token to putting

1045
00:33:16,410 --> 00:33:19,290
in the wrong place

1046
00:33:17,670 --> 00:33:20,430
they don't they've got refresh tokens

1047
00:33:19,290 --> 00:33:22,080
they're not sure what to do with it the

1048
00:33:20,430 --> 00:33:22,980
Refresh token an access token are sent

1049
00:33:22,080 --> 00:33:25,439
to the same endpoint

1050
00:33:22,980 --> 00:33:27,300
tons and tons of confusion which results

1051
00:33:25,440 --> 00:33:28,530
in a lot of vulnerable applications so I

1052
00:33:27,300 --> 00:33:30,330
want to make sure that at least you guys

1053
00:33:28,530 --> 00:33:32,070
that are in here you could one of the

1054
00:33:30,330 --> 00:33:33,330
takeaways can be that you understand

1055
00:33:32,070 --> 00:33:35,250
when to use one of these and then you

1056
00:33:33,330 --> 00:33:36,210
can go and read further about them and

1057
00:33:35,250 --> 00:33:37,920
make sure that you're using them

1058
00:33:36,210 --> 00:33:40,580
correctly because incorrect using these

1059
00:33:37,920 --> 00:33:41,600
incorrectly I think in the Olas top ten

1060
00:33:40,580 --> 00:33:43,100
the authentication and session

1061
00:33:41,600 --> 00:33:44,449
management related issues are like some

1062
00:33:43,100 --> 00:33:46,520
of the top ones and for good reason and

1063
00:33:44,450 --> 00:33:49,010
we see that we see those issues across a

1064
00:33:46,520 --> 00:33:52,129
lot of our clients so Oh

1065
00:33:49,010 --> 00:33:53,480
latest versions 2.0 it's authorization

1066
00:33:52,130 --> 00:33:55,310
only right so the unique get that access

1067
00:33:53,480 --> 00:33:57,740
token it's supposed to be used for

1068
00:33:55,310 --> 00:33:59,300
access delegation right the real you

1069
00:33:57,740 --> 00:34:00,560
know the intention of it was that you

1070
00:33:59,300 --> 00:34:02,750
had a service and you had another

1071
00:34:00,560 --> 00:34:04,370
service Farshad would grant access to

1072
00:34:02,750 --> 00:34:05,780
this service so that it could call the

1073
00:34:04,370 --> 00:34:09,440
other service on your behalf that's what

1074
00:34:05,780 --> 00:34:11,150
waswas designed for and you can use you

1075
00:34:09,440 --> 00:34:13,610
can use Jatakas if you want to the

1076
00:34:11,150 --> 00:34:15,530
original the original spec only used

1077
00:34:13,610 --> 00:34:17,630
bearer tokens they're no big bearer

1078
00:34:15,530 --> 00:34:19,160
tokens but the there are extensions to

1079
00:34:17,630 --> 00:34:22,580
that that allow you to use a joke and

1080
00:34:19,159 --> 00:34:23,839
put more stuff in there and then came

1081
00:34:22,580 --> 00:34:25,130
open ID connect because people were like

1082
00:34:23,840 --> 00:34:26,840
what we really I mean it's great that

1083
00:34:25,130 --> 00:34:28,580
you have authorization and you know you

1084
00:34:26,840 --> 00:34:31,040
your grant access Farshad gives access

1085
00:34:28,580 --> 00:34:33,440
for LinkedIn to go to his gmail account

1086
00:34:31,040 --> 00:34:34,820
and suck all my contacts and email them

1087
00:34:33,440 --> 00:34:36,560
all and add them to LinkedIn right if I

1088
00:34:34,820 --> 00:34:39,830
permit primitive to do so that's one of

1089
00:34:36,560 --> 00:34:41,420
the use cases but but what about the

1090
00:34:39,830 --> 00:34:42,650
authentication so you need the nude the

1091
00:34:41,420 --> 00:34:44,360
full package right as we mentioned

1092
00:34:42,650 --> 00:34:45,590
earlier you know authentication needs to

1093
00:34:44,360 --> 00:34:47,419
happen first so that you establish

1094
00:34:45,590 --> 00:34:48,919
identity like that first shot is who

1095
00:34:47,418 --> 00:34:51,199
they say they are and then once I say

1096
00:34:48,918 --> 00:34:53,089
I'm Farshad and that's proven then we go

1097
00:34:51,199 --> 00:34:54,770
to that access delegation part right so

1098
00:34:53,090 --> 00:34:56,120
open ID Connect was designed to solve

1099
00:34:54,770 --> 00:34:58,640
that exact problem to do both

1100
00:34:56,120 --> 00:35:00,339
authentication and authorization so it's

1101
00:34:58,640 --> 00:35:02,420
an extension of our 2.0 so all the

1102
00:35:00,340 --> 00:35:03,830
authorization code flow and implicit

1103
00:35:02,420 --> 00:35:05,630
flow and all those things that you have

1104
00:35:03,830 --> 00:35:07,460
in in auth you have them in open ID

1105
00:35:05,630 --> 00:35:09,200
connect it just adds that extra couple

1106
00:35:07,460 --> 00:35:11,330
of steps to do the authentication and

1107
00:35:09,200 --> 00:35:12,950
then you have this nice ID token that

1108
00:35:11,330 --> 00:35:15,049
proves your identity and it's got your

1109
00:35:12,950 --> 00:35:16,310
claims yeah this is a jaw token and you

1110
00:35:15,050 --> 00:35:17,360
know here's your identity and so on and

1111
00:35:16,310 --> 00:35:20,210
so forth in and you can go about your

1112
00:35:17,360 --> 00:35:23,780
business so it supports ID and access

1113
00:35:20,210 --> 00:35:26,270
tokens as such what about invocation by

1114
00:35:23,780 --> 00:35:27,500
external applications and services so so

1115
00:35:26,270 --> 00:35:29,120
far we've been talking about all these

1116
00:35:27,500 --> 00:35:30,770
micro services talking to each other and

1117
00:35:29,120 --> 00:35:33,020
everything within a call chain within

1118
00:35:30,770 --> 00:35:35,860
that within that application or service

1119
00:35:33,020 --> 00:35:38,900
space but what if we want to have other

1120
00:35:35,860 --> 00:35:41,960
external applications or services call

1121
00:35:38,900 --> 00:35:44,060
our micro services so api's may be

1122
00:35:41,960 --> 00:35:46,730
invoked by services outside the trust

1123
00:35:44,060 --> 00:35:48,500
boundary of that of that application so

1124
00:35:46,730 --> 00:35:49,850
as I mentioned earlier you need to

1125
00:35:48,500 --> 00:35:51,740
establish trust between the two domains

1126
00:35:49,850 --> 00:35:53,990
and verify the authenticity of the

1127
00:35:51,740 --> 00:35:54,288
user's security contacts presented by

1128
00:35:53,990 --> 00:35:56,928
the

1129
00:35:54,289 --> 00:35:58,969
they give to you and the API gateway can

1130
00:35:56,929 --> 00:36:00,619
then issue a new security token for

1131
00:35:58,969 --> 00:36:02,660
downstream communication and and

1132
00:36:00,619 --> 00:36:04,069
security policies it cost the two

1133
00:36:02,660 --> 00:36:06,739
applications may be different as you can

1134
00:36:04,069 --> 00:36:08,119
appreciate and so you should not accept

1135
00:36:06,739 --> 00:36:10,160
security tokens from another service

1136
00:36:08,119 --> 00:36:12,140
without reinforcing your application or

1137
00:36:10,160 --> 00:36:13,910
your micro services set of policies

1138
00:36:12,140 --> 00:36:16,069
before you allow access

1139
00:36:13,910 --> 00:36:17,569
so should only be issued if appropriate

1140
00:36:16,069 --> 00:36:19,160
security policies pass and without

1141
00:36:17,569 --> 00:36:20,959
central handling each micro service we

1142
00:36:19,160 --> 00:36:22,640
need a trust relationship with external

1143
00:36:20,959 --> 00:36:24,319
consumers exclamation mark right that

1144
00:36:22,640 --> 00:36:25,819
makes it a bit of a nightmare to try to

1145
00:36:24,319 --> 00:36:27,079
have you got all these micro services if

1146
00:36:25,819 --> 00:36:28,729
you don't have a central enforcement

1147
00:36:27,079 --> 00:36:30,049
point how are they going to all live

1148
00:36:28,729 --> 00:36:33,769
happily together and it's going to be a

1149
00:36:30,049 --> 00:36:35,329
challenge so what about other other

1150
00:36:33,769 --> 00:36:37,939
security issues right what else should

1151
00:36:35,329 --> 00:36:38,929
you care about so it all we've talked

1152
00:36:37,939 --> 00:36:40,578
about so far as an authentication

1153
00:36:38,929 --> 00:36:41,929
authorization which is quite important

1154
00:36:40,579 --> 00:36:43,519
but there are other important things

1155
00:36:41,929 --> 00:36:45,349
that API gateways can help you with and

1156
00:36:43,519 --> 00:36:47,089
you need to take into consideration when

1157
00:36:45,349 --> 00:36:49,099
you're building your API oriented micro

1158
00:36:47,089 --> 00:36:50,449
service oriented architect application

1159
00:36:49,099 --> 00:36:53,119
and one of the top ones is rate limiting

1160
00:36:50,449 --> 00:36:54,559
right it's in the ASVs if you look at

1161
00:36:53,119 --> 00:36:55,640
the old wasp ASP as they recommend you

1162
00:36:54,559 --> 00:36:56,239
know there's several different controls

1163
00:36:55,640 --> 00:36:58,189
in ASVs

1164
00:36:56,239 --> 00:37:00,349
that are related to rate limiting you

1165
00:36:58,189 --> 00:37:03,589
have JSON and XML threat protections you

1166
00:37:00,349 --> 00:37:04,729
know you get an XML injections and those

1167
00:37:03,589 --> 00:37:06,529
types of attacks can be mitigated

1168
00:37:04,729 --> 00:37:08,239
through those policies and you can also

1169
00:37:06,529 --> 00:37:10,640
create your own custom policies to

1170
00:37:08,239 --> 00:37:12,079
address other security attacks or

1171
00:37:10,640 --> 00:37:13,308
specific needs right that's the beauty

1172
00:37:12,079 --> 00:37:15,049
of doing things centrally because you

1173
00:37:13,309 --> 00:37:16,969
can create these these policies and then

1174
00:37:15,049 --> 00:37:18,589
roll them out to your developers and you

1175
00:37:16,969 --> 00:37:19,999
provide built-in policies to developers

1176
00:37:18,589 --> 00:37:22,699
which eases the development process and

1177
00:37:19,999 --> 00:37:24,529
avoids the learning curve right so when

1178
00:37:22,699 --> 00:37:25,789
I work to the bank we had like thousands

1179
00:37:24,529 --> 00:37:27,499
of different applications and all these

1180
00:37:25,789 --> 00:37:29,029
different developers and you know we had

1181
00:37:27,499 --> 00:37:30,738
a few security people trying to help all

1182
00:37:29,029 --> 00:37:32,299
these guys right and if you don't if you

1183
00:37:30,739 --> 00:37:33,589
know if you leave that up to them to

1184
00:37:32,299 --> 00:37:34,729
build their own security policies and

1185
00:37:33,589 --> 00:37:36,140
figure it out they're all gonna do it

1186
00:37:34,729 --> 00:37:37,879
differently right and they know at some

1187
00:37:36,140 --> 00:37:39,529
point you create security patterns and

1188
00:37:37,880 --> 00:37:40,579
architecture patterns and you give them

1189
00:37:39,529 --> 00:37:41,599
those patterns but also when they

1190
00:37:40,579 --> 00:37:43,640
implement the patterns they may not

1191
00:37:41,599 --> 00:37:45,109
implement them property but if you just

1192
00:37:43,640 --> 00:37:46,848
have a central policy and first my point

1193
00:37:45,109 --> 00:37:48,140
and you work with the security team

1194
00:37:46,849 --> 00:37:50,029
works with them and you develop that

1195
00:37:48,140 --> 00:37:51,140
once and you put that in there then the

1196
00:37:50,029 --> 00:37:53,630
developers don't have to worry about

1197
00:37:51,140 --> 00:37:55,549
that day what will focus on building the

1198
00:37:53,630 --> 00:37:57,259
business functionality and then you go

1199
00:37:55,549 --> 00:37:58,759
okay I'm deploying my application into

1200
00:37:57,259 --> 00:38:00,289
this technical plan into this platform

1201
00:37:58,759 --> 00:38:01,729
and there's an API gateway and it's

1202
00:38:00,289 --> 00:38:03,319
application type one the policy has

1203
00:38:01,729 --> 00:38:04,759
already been approved by the security

1204
00:38:03,319 --> 00:38:06,499
team you just roll that out there's a

1205
00:38:04,759 --> 00:38:07,430
bunch of policies that they can select

1206
00:38:06,499 --> 00:38:10,129
from it makes

1207
00:38:07,430 --> 00:38:12,919
really easy hopefully that's why I said

1208
00:38:10,130 --> 00:38:14,420
hopefully but not always so you can

1209
00:38:12,920 --> 00:38:16,130
avoid learning curve and mistakes by the

1210
00:38:14,420 --> 00:38:17,109
developers by doing it once and having

1211
00:38:16,130 --> 00:38:19,430
it approved

1212
00:38:17,109 --> 00:38:20,660
there's also logging and monitoring and

1213
00:38:19,430 --> 00:38:22,069
detection controls that you shouldn't

1214
00:38:20,660 --> 00:38:24,200
forget in this in this modern world

1215
00:38:22,069 --> 00:38:25,759
right I mean this is this as always

1216
00:38:24,200 --> 00:38:29,598
these are always important security

1217
00:38:25,760 --> 00:38:31,490
controls and considerations API should

1218
00:38:29,599 --> 00:38:32,930
long important events including security

1219
00:38:31,490 --> 00:38:35,419
events so logs should be centrally

1220
00:38:32,930 --> 00:38:36,890
aggregated correlated and monitored you

1221
00:38:35,420 --> 00:38:38,359
know goes without saying this is nothing

1222
00:38:36,890 --> 00:38:41,390
unique to this particular architecture

1223
00:38:38,359 --> 00:38:43,848
these concepts are important across all

1224
00:38:41,390 --> 00:38:45,230
of the domains of security and success

1225
00:38:43,849 --> 00:38:47,059
or failure policy checks should be

1226
00:38:45,230 --> 00:38:48,799
logged right so if you are enforcing

1227
00:38:47,059 --> 00:38:50,089
them say at the API gateway if you're

1228
00:38:48,799 --> 00:38:51,140
getting a lot of failures it's like well

1229
00:38:50,089 --> 00:38:52,369
that may be someone's attacking your

1230
00:38:51,140 --> 00:38:56,900
application so you should definitely be

1231
00:38:52,369 --> 00:38:58,549
logging your policy failures and weather

1232
00:38:56,900 --> 00:38:59,900
info that's useful in add or not other

1233
00:38:58,549 --> 00:39:01,038
info can be useful in a denial of

1234
00:38:59,900 --> 00:39:02,839
service protections and better

1235
00:39:01,039 --> 00:39:05,059
understanding and profiling the system

1236
00:39:02,839 --> 00:39:06,980
for example how many API invocations per

1237
00:39:05,059 --> 00:39:08,809
second what was the response time so

1238
00:39:06,980 --> 00:39:10,400
those that those will also help you use

1239
00:39:08,809 --> 00:39:13,430
some analysis and better a better

1240
00:39:10,400 --> 00:39:15,380
protect yourself API logs can help with

1241
00:39:13,430 --> 00:39:17,569
fraud prevention as well so for example

1242
00:39:15,380 --> 00:39:19,579
providing info about which consuming

1243
00:39:17,569 --> 00:39:21,920
devices and location that can be sent to

1244
00:39:19,579 --> 00:39:23,809
a fraud analysis engine and if that is

1245
00:39:21,920 --> 00:39:28,069
if that is a concern and further

1246
00:39:23,809 --> 00:39:29,720
analyzed and group policy and this is

1247
00:39:28,069 --> 00:39:31,130
not a new concept right like those of

1248
00:39:29,720 --> 00:39:33,230
you have been like windows admins or

1249
00:39:31,130 --> 00:39:35,539
done that kind of stuff it's like you

1250
00:39:33,230 --> 00:39:37,369
never assigned you never assign access

1251
00:39:35,539 --> 00:39:38,450
to per user right you never do that

1252
00:39:37,369 --> 00:39:41,180
that's just a bad thing you create

1253
00:39:38,450 --> 00:39:42,618
groups and roles you assign access based

1254
00:39:41,180 --> 00:39:44,118
on groups and then that kind of stuff

1255
00:39:42,619 --> 00:39:45,650
and that there's no exception here

1256
00:39:44,119 --> 00:39:47,510
either right you took your monolith and

1257
00:39:45,650 --> 00:39:48,920
they're all living in this walled garden

1258
00:39:47,510 --> 00:39:50,329
and they had the same policies apply to

1259
00:39:48,920 --> 00:39:51,859
them now you're breaking them up right

1260
00:39:50,329 --> 00:39:54,049
so what are you gonna do you're gonna go

1261
00:39:51,859 --> 00:39:54,950
assign policies individually to each one

1262
00:39:54,049 --> 00:39:56,480
of them no that's like assigning

1263
00:39:54,950 --> 00:39:57,799
policies to each user in your Active

1264
00:39:56,480 --> 00:39:59,599
Directory right you don't do that you

1265
00:39:57,799 --> 00:40:00,799
create a group and you apply policies

1266
00:39:59,599 --> 00:40:02,089
centrally so that's one of the nice

1267
00:40:00,799 --> 00:40:03,799
things that here you should do as well

1268
00:40:02,089 --> 00:40:06,859
you should group objects and micro

1269
00:40:03,799 --> 00:40:09,349
services together and consistently apply

1270
00:40:06,859 --> 00:40:10,819
the policies and by doing that you can

1271
00:40:09,349 --> 00:40:11,960
meet the particular business business

1272
00:40:10,819 --> 00:40:14,480
needs for a function or group from a

1273
00:40:11,960 --> 00:40:15,740
security perspective and you provide the

1274
00:40:14,480 --> 00:40:17,240
group's to developers along with a

1275
00:40:15,740 --> 00:40:20,740
service plan and set of policies that

1276
00:40:17,240 --> 00:40:22,629
they can consistently enforce and so

1277
00:40:20,740 --> 00:40:25,029
purity token should be ticket issued

1278
00:40:22,630 --> 00:40:26,530
should be valid only for api's in that

1279
00:40:25,030 --> 00:40:27,970
group right those of you who like seen

1280
00:40:26,530 --> 00:40:29,770
Apogee Apogee does that really well

1281
00:40:27,970 --> 00:40:31,899
right they've got this concept we can

1282
00:40:29,770 --> 00:40:33,369
take your micro services that are

1283
00:40:31,900 --> 00:40:35,260
related to a particular application you

1284
00:40:33,369 --> 00:40:37,000
group them and then you apply that sort

1285
00:40:35,260 --> 00:40:38,710
of group level micro service policy and

1286
00:40:37,000 --> 00:40:39,760
I've used mule soft as long enough

1287
00:40:38,710 --> 00:40:40,990
doesn't quite do it that way that's

1288
00:40:39,760 --> 00:40:43,390
where Apogee is really nice because it

1289
00:40:40,990 --> 00:40:45,669
allows you to easily group and apply

1290
00:40:43,390 --> 00:40:47,049
things at that level and you'll freeze

1291
00:40:45,670 --> 00:40:48,880
so for example if you have an account

1292
00:40:47,050 --> 00:40:51,040
servicing application that might be an

1293
00:40:48,880 --> 00:40:52,750
internal and that might be an internal

1294
00:40:51,040 --> 00:40:55,390
application used by your internal users

1295
00:40:52,750 --> 00:40:57,250
that need to you know enforce Active

1296
00:40:55,390 --> 00:40:59,379
Directory policy and you know it's an

1297
00:40:57,250 --> 00:41:01,240
XML based application and it's internal

1298
00:40:59,380 --> 00:41:02,590
and so your policy would be ad

1299
00:41:01,240 --> 00:41:04,450
authentication XML threat protection

1300
00:41:02,590 --> 00:41:05,680
late rate limiting from an internal

1301
00:41:04,450 --> 00:41:08,169
perspective and the rates would be

1302
00:41:05,680 --> 00:41:10,299
different for as if you were dealing

1303
00:41:08,170 --> 00:41:12,310
with a shopping site where it was an

1304
00:41:10,300 --> 00:41:15,100
external application JSON based and used

1305
00:41:12,310 --> 00:41:17,290
LDAP for user as a user repository for

1306
00:41:15,100 --> 00:41:19,029
and for identity and in that case you

1307
00:41:17,290 --> 00:41:21,610
divorce in LDAP authentication

1308
00:41:19,030 --> 00:41:23,470
authorization based control jason threat

1309
00:41:21,610 --> 00:41:25,119
protection and and rate limiting that's

1310
00:41:23,470 --> 00:41:30,250
designed to protect it from an external

1311
00:41:25,119 --> 00:41:31,780
point of view so what are some of the

1312
00:41:30,250 --> 00:41:32,920
takeaway considerations when you leave

1313
00:41:31,780 --> 00:41:34,480
here right there's a lot of things we

1314
00:41:32,920 --> 00:41:36,430
talked about but if you were to you know

1315
00:41:34,480 --> 00:41:38,680
take one picture one slide with you this

1316
00:41:36,430 --> 00:41:40,600
would be the one right so the message

1317
00:41:38,680 --> 00:41:42,279
here is that you should maintain user

1318
00:41:40,600 --> 00:41:44,410
level and Trust across the entire

1319
00:41:42,280 --> 00:41:45,970
journey right it shouldn't be this thing

1320
00:41:44,410 --> 00:41:48,009
where you just sort of authenticate the

1321
00:41:45,970 --> 00:41:49,750
user in the front and then behind there

1322
00:41:48,010 --> 00:41:51,700
these layers are talking to each other

1323
00:41:49,750 --> 00:41:54,760
without really you know taking that

1324
00:41:51,700 --> 00:41:57,069
users the users contacts into

1325
00:41:54,760 --> 00:41:58,660
consideration and you should enforce

1326
00:41:57,070 --> 00:42:00,400
authorization at the right place with

1327
00:41:58,660 --> 00:42:01,810
the right level of granularity right I

1328
00:42:00,400 --> 00:42:03,280
mean it's not enough to say well I did

1329
00:42:01,810 --> 00:42:04,630
you know they came to the Gateway and I

1330
00:42:03,280 --> 00:42:06,190
checked some authorization but what if

1331
00:42:04,630 --> 00:42:08,109
you had more granular authorization

1332
00:42:06,190 --> 00:42:09,670
requirements at the micro service level

1333
00:42:08,109 --> 00:42:11,799
right that that aren't necessarily

1334
00:42:09,670 --> 00:42:12,850
related to the other micro services you

1335
00:42:11,800 --> 00:42:14,350
wouldn't want to just enforce all the

1336
00:42:12,850 --> 00:42:16,390
authorization requirements for every one

1337
00:42:14,350 --> 00:42:18,130
of your micro services at the front door

1338
00:42:16,390 --> 00:42:19,750
it's better to distribute them and

1339
00:42:18,130 --> 00:42:22,480
handle it with the right level of

1340
00:42:19,750 --> 00:42:24,040
granularity quite important right group

1341
00:42:22,480 --> 00:42:25,690
your API is to apply configurable

1342
00:42:24,040 --> 00:42:27,490
policies consistently right the

1343
00:42:25,690 --> 00:42:29,410
consistent is the operative word there

1344
00:42:27,490 --> 00:42:31,569
and use an API gateway to centrally

1345
00:42:29,410 --> 00:42:34,319
enforce those policies consistently and

1346
00:42:31,570 --> 00:42:35,640
and don't forget to log monitored

1347
00:42:34,319 --> 00:42:37,439
right again this is nothing new and

1348
00:42:35,640 --> 00:42:40,469
special but it's quite important in this

1349
00:42:37,439 --> 00:42:42,089
sort of loosely coupled world that that

1350
00:42:40,469 --> 00:42:44,189
we live in and and of course always

1351
00:42:42,089 --> 00:42:46,319
follow a defense-in-depth strategy right

1352
00:42:44,189 --> 00:42:48,269
that's like one of the you know that the

1353
00:42:46,319 --> 00:42:50,459
ten commandments of security you know

1354
00:42:48,269 --> 00:42:51,899
put defenses everywhere that you can and

1355
00:42:50,459 --> 00:42:53,489
build security into the service

1356
00:42:51,900 --> 00:42:54,989
architecture and design I'm a big fan of

1357
00:42:53,489 --> 00:42:56,849
security by design I'm all about

1358
00:42:54,989 --> 00:42:58,650
security by design if you put security

1359
00:42:56,849 --> 00:42:59,459
when you're designing stuff there's less

1360
00:42:58,650 --> 00:43:00,929
problems later on

1361
00:42:59,459 --> 00:43:03,029
so really build that into your

1362
00:43:00,929 --> 00:43:05,249
architecture and and unfortunately like

1363
00:43:03,029 --> 00:43:06,929
and this is an unfortunate part of a lot

1364
00:43:05,249 --> 00:43:08,788
of these agile and and organized

1365
00:43:06,929 --> 00:43:10,049
organizations that I work with they they

1366
00:43:08,789 --> 00:43:11,249
throw out the architecture and they

1367
00:43:10,049 --> 00:43:12,509
start building stuff and then they get

1368
00:43:11,249 --> 00:43:14,218
to a point where they're like oh I built

1369
00:43:12,509 --> 00:43:15,539
this monster and then I'm like well

1370
00:43:14,219 --> 00:43:16,799
there's been no consideration giving to

1371
00:43:15,539 --> 00:43:17,759
this and you have to kind of go back and

1372
00:43:16,799 --> 00:43:19,919
fix a lot of things right

1373
00:43:17,759 --> 00:43:22,049
so I Jolla that's great I'm a huge fan

1374
00:43:19,919 --> 00:43:23,848
you know follow it quite a bit but also

1375
00:43:22,049 --> 00:43:25,349
architecture is really important so they

1376
00:43:23,849 --> 00:43:26,489
go hand in hand you don't have to throw

1377
00:43:25,349 --> 00:43:28,229
one out because you implemented the

1378
00:43:26,489 --> 00:43:30,150
other do that sort of architectural

1379
00:43:28,229 --> 00:43:31,618
considerations of what is your what am i

1380
00:43:30,150 --> 00:43:32,819
building right I mean yeah it's gonna be

1381
00:43:31,619 --> 00:43:34,259
agile and each sprint you're gonna build

1382
00:43:32,819 --> 00:43:35,969
different things and those functions and

1383
00:43:34,259 --> 00:43:37,469
user stories can be discuss but if

1384
00:43:35,969 --> 00:43:39,329
you're building an example that I always

1385
00:43:37,469 --> 00:43:41,159
give is if you're building a 50-story

1386
00:43:39,329 --> 00:43:42,599
building you know okay cool you know

1387
00:43:41,159 --> 00:43:43,859
start building if you're doing agile you

1388
00:43:42,599 --> 00:43:45,209
build level by level and you kind of go

1389
00:43:43,859 --> 00:43:46,979
up right but if you don't give

1390
00:43:45,209 --> 00:43:48,839
consideration into the fact that you're

1391
00:43:46,979 --> 00:43:50,669
gonna need an alarm system and maybe two

1392
00:43:48,839 --> 00:43:52,049
elevators and you don't build those the

1393
00:43:50,669 --> 00:43:53,400
shaft for a second elevator and you

1394
00:43:52,049 --> 00:43:54,749
don't put that conduits if you built

1395
00:43:53,400 --> 00:43:56,579
that 50-story building in an agile

1396
00:43:54,749 --> 00:43:57,598
method then you like oh shoot I don't

1397
00:43:56,579 --> 00:43:59,880
have enough elevators you gonna have to

1398
00:43:57,599 --> 00:44:01,469
go and dig another shaft for another

1399
00:43:59,880 --> 00:44:03,359
elevator and put another conduit right

1400
00:44:01,469 --> 00:44:04,769
so those architectural considerations

1401
00:44:03,359 --> 00:44:06,299
particularly when it comes to security

1402
00:44:04,769 --> 00:44:07,589
no matter what you're doing agile or

1403
00:44:06,299 --> 00:44:09,599
waterfall they should be done upfront

1404
00:44:07,589 --> 00:44:11,308
how many elevators am I gonna need am I

1405
00:44:09,599 --> 00:44:13,229
gonna need a conduit for my alarm system

1406
00:44:11,309 --> 00:44:14,849
right how do I figure that out then go

1407
00:44:13,229 --> 00:44:16,499
build it iteratively that's totally fine

1408
00:44:14,849 --> 00:44:17,969
you know maybe maybe the business

1409
00:44:16,499 --> 00:44:19,379
changes their mind about the color of a

1410
00:44:17,969 --> 00:44:20,969
particular floor what kind of doors they

1411
00:44:19,380 --> 00:44:22,289
want those aren't important they can be

1412
00:44:20,969 --> 00:44:24,059
changed and that's what agile is great

1413
00:44:22,289 --> 00:44:25,559
for but the security things particularly

1414
00:44:24,059 --> 00:44:27,959
from an architecture perspective they

1415
00:44:25,559 --> 00:44:29,909
need to be dealt with upfront so that

1416
00:44:27,959 --> 00:44:32,489
brings me to the end of this I apologize

1417
00:44:29,909 --> 00:44:33,869
if I've talked really fast the content

1418
00:44:32,489 --> 00:44:36,329
of this material if you're interested in

1419
00:44:33,869 --> 00:44:38,849
I wrote an article is a two-part that's

1420
00:44:36,329 --> 00:44:40,439
a two-part article for IBM developer

1421
00:44:38,849 --> 00:44:42,719
journal you can find it off you just

1422
00:44:40,439 --> 00:44:44,939
google the title of this talk the IBM

1423
00:44:42,719 --> 00:44:46,439
article will appear you know it's easy

1424
00:44:44,939 --> 00:44:47,490
to find and if you have any questions

1425
00:44:46,439 --> 00:44:49,470
feel free to reach out

1426
00:44:47,490 --> 00:44:51,180
I am really passionate about the subject

1427
00:44:49,470 --> 00:44:52,259
and I've done a lot of work on it and

1428
00:44:51,180 --> 00:44:53,910
I'm happy to share that and have

1429
00:44:52,260 --> 00:44:55,800
conversations with people that are

1430
00:44:53,910 --> 00:44:58,170
interested so you can tag y'all you can

1431
00:44:55,800 --> 00:45:00,810
reach me a reach out on Twitter or by

1432
00:44:58,170 --> 00:45:02,900
email cool well if there's no questions

1433
00:45:00,810 --> 00:45:06,049
thank you very much and have a great

1434
00:45:02,900 --> 00:45:06,050
great day

1435
00:45:16,230 --> 00:45:18,290
you

