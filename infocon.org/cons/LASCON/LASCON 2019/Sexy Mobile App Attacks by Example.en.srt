1
00:00:09,300 --> 00:00:32,280
[Music]

2
00:00:35,000 --> 00:00:40,739
okay so thank you for coming this is

3
00:00:38,310 --> 00:00:42,540
going to be a very practical talk

4
00:00:40,739 --> 00:00:44,879
I don't like kind of quote unquote

5
00:00:42,540 --> 00:00:47,940
 talk so it's all going to be

6
00:00:44,880 --> 00:00:49,830
like examples and all practical and

7
00:00:47,940 --> 00:00:52,019
hopefully something that you can apply

8
00:00:49,830 --> 00:00:56,129
when you go back to work on Monday if

9
00:00:52,020 --> 00:00:57,750
you know what I mean and yeah so let's

10
00:00:56,129 --> 00:01:00,360
get started I'm the director of an

11
00:00:57,750 --> 00:01:02,640
insecurity there's some public reports I

12
00:01:00,360 --> 00:01:04,349
wrote a practical web defense course for

13
00:01:02,640 --> 00:01:07,050
a little security some time ago about

14
00:01:04,349 --> 00:01:08,160
hacking and then fixing well

15
00:01:07,050 --> 00:01:10,350
applications

16
00:01:08,160 --> 00:01:13,080
I'm the always one of the most

17
00:01:10,350 --> 00:01:15,330
probability F project leaders one of the

18
00:01:13,080 --> 00:01:17,520
OS flagship projects the Sam

19
00:01:15,330 --> 00:01:20,720
presentations and I was a developer

20
00:01:17,520 --> 00:01:23,570
first then I switched to security so

21
00:01:20,720 --> 00:01:25,740
yeah have a bit of background on both

22
00:01:23,570 --> 00:01:27,720
and if you're interested in this talk

23
00:01:25,740 --> 00:01:29,250
you might like to check some of the

24
00:01:27,720 --> 00:01:31,619
public pen test reports where there's

25
00:01:29,250 --> 00:01:33,960
like a lot of mobile app vulnerabilities

26
00:01:31,619 --> 00:01:36,090
as well so these are just some of the

27
00:01:33,960 --> 00:01:38,610
direct links but you just go to to the

28
00:01:36,090 --> 00:01:40,619
website and it's all there so this is

29
00:01:38,610 --> 00:01:42,149
going to be a very practical work

30
00:01:40,619 --> 00:01:45,509
through and we're going to play a game

31
00:01:42,149 --> 00:01:47,550
if you want so this is kind of the types

32
00:01:45,509 --> 00:01:51,569
of attacks we're going to see and this

33
00:01:47,550 --> 00:01:52,890
is the game so if you I'm going to like

34
00:01:51,569 --> 00:01:54,119
in the middle of the presentation I'm

35
00:01:52,890 --> 00:01:58,080
going to ask what is the vulnerability

36
00:01:54,119 --> 00:02:00,149
or what is this attack if somebody gets

37
00:01:58,080 --> 00:02:02,039
it right then I'm going to give you an

38
00:02:00,149 --> 00:02:05,220
invite people were very nice to me here

39
00:02:02,039 --> 00:02:06,110
in Austin so I want to do something nice

40
00:02:05,220 --> 00:02:09,179
for you

41
00:02:06,110 --> 00:02:10,709
so I'll give you like a free pass for

42
00:02:09,179 --> 00:02:13,950
the course and of course because some of

43
00:02:10,709 --> 00:02:17,910
my students here from the two-day course

44
00:02:13,950 --> 00:02:20,489
that I gave on Wednesday now on Tuesday

45
00:02:17,910 --> 00:02:22,170
and Wednesday this week if you get the

46
00:02:20,490 --> 00:02:23,700
question right then I'll give you the

47
00:02:22,170 --> 00:02:27,208
past for the third day that you didn't

48
00:02:23,700 --> 00:02:28,679
get okay so I give like a small

49
00:02:27,209 --> 00:02:32,819
incentive for everybody to participate

50
00:02:28,680 --> 00:02:35,010
so let's get started so some

51
00:02:32,819 --> 00:02:38,160
denial-of-service just to warm up a bit

52
00:02:35,010 --> 00:02:42,320
so this was tracking library where

53
00:02:38,160 --> 00:02:42,320
anybody knows what these command does

54
00:02:45,710 --> 00:03:04,980
no listener yes and what does it do yes

55
00:02:56,360 --> 00:03:06,600
and yeah well it's it's tool to do the

56
00:03:04,980 --> 00:03:09,420
but yeah you were a close enough so if

57
00:03:06,600 --> 00:03:11,910
you want a pass for the for a mobile

58
00:03:09,420 --> 00:03:13,230
course you can I give you a card and

59
00:03:11,910 --> 00:03:17,780
then at the end I'll tell you what to do

60
00:03:13,230 --> 00:03:21,989
so you can come and take it if you want

61
00:03:17,780 --> 00:03:27,090
okay so yeah you're right so basically

62
00:03:21,990 --> 00:03:29,730
this is a listener and what it does is

63
00:03:27,090 --> 00:03:31,560
if we the connection is closed within

64
00:03:29,730 --> 00:03:34,140
zero seconds so immediately is going to

65
00:03:31,560 --> 00:03:37,500
start the listener again encryption is

66
00:03:34,140 --> 00:03:39,839
off it's listening on port 80 without

67
00:03:37,500 --> 00:03:41,550
resolving DNS and it it's executing the

68
00:03:39,840 --> 00:03:43,740
yes command so what we want to do here

69
00:03:41,550 --> 00:03:46,110
is to cross the service so we're doing a

70
00:03:43,740 --> 00:03:48,060
selective man-in-the-middle so we're

71
00:03:46,110 --> 00:03:50,760
doing VNA spoofing with the tracking

72
00:03:48,060 --> 00:03:54,390
service that the app is using and we're

73
00:03:50,760 --> 00:03:58,440
trying to crash it so the yes command is

74
00:03:54,390 --> 00:03:59,970
going to like create out of stuff it's

75
00:03:58,440 --> 00:04:02,940
basically just saying yes yes yes all

76
00:03:59,970 --> 00:04:06,180
the time so this is the memory

77
00:04:02,940 --> 00:04:09,800
allocation back right so this is how

78
00:04:06,180 --> 00:04:11,820
thank you this is how it looks on the

79
00:04:09,800 --> 00:04:13,500
simulator so this would be like the

80
00:04:11,820 --> 00:04:15,450
normal memory usage and this is like

81
00:04:13,500 --> 00:04:17,959
after the crash and this is the crash

82
00:04:15,450 --> 00:04:20,729
itself not the project was killed so

83
00:04:17,959 --> 00:04:22,230
consider using another library I'm going

84
00:04:20,730 --> 00:04:24,210
to skip over a little bit of the fixes

85
00:04:22,230 --> 00:04:26,010
but I want the slides to be useful like

86
00:04:24,210 --> 00:04:29,280
if somebody reads them without watching

87
00:04:26,010 --> 00:04:31,680
the talk so yeah this will be like some

88
00:04:29,280 --> 00:04:34,409
some of the mitigation so now let's move

89
00:04:31,680 --> 00:04:38,160
on to the SD card right so in Android

90
00:04:34,410 --> 00:04:40,260
the SD card is a little bit of of the

91
00:04:38,160 --> 00:04:42,990
Wild West so any app can read and write

92
00:04:40,260 --> 00:04:45,990
there you can punch somebody in the face

93
00:04:42,990 --> 00:04:47,370
and take the SD card out and and read

94
00:04:45,990 --> 00:04:48,990
like everything that is there because

95
00:04:47,370 --> 00:04:51,210
there's no encryption you don't need to

96
00:04:48,990 --> 00:04:54,240
know the unlock pattern off the phone so

97
00:04:51,210 --> 00:04:56,469
anytime anything sensitive is saved into

98
00:04:54,240 --> 00:05:00,770
the SD card

99
00:04:56,470 --> 00:05:03,289
that could be a problem right so so yeah

100
00:05:00,770 --> 00:05:08,080
saving sensitive stuff in the SD card so

101
00:05:03,289 --> 00:05:10,669
this was a whistle-blower application so

102
00:05:08,080 --> 00:05:13,880
like somebody would like report some

103
00:05:10,669 --> 00:05:16,669
human right violations website and they

104
00:05:13,880 --> 00:05:19,610
were storing the human rights violation

105
00:05:16,669 --> 00:05:22,639
in XML format in the SD card so this was

106
00:05:19,610 --> 00:05:24,319
really bad because this was like from

107
00:05:22,639 --> 00:05:28,400
one of these like oppressive kind of

108
00:05:24,319 --> 00:05:31,099
governments if why police would stop

109
00:05:28,400 --> 00:05:32,780
somebody having this in the SD card they

110
00:05:31,099 --> 00:05:35,330
could like get killed or go to prison or

111
00:05:32,780 --> 00:05:37,219
something bad like this right so this

112
00:05:35,330 --> 00:05:40,090
was quite bad so now another scenario

113
00:05:37,220 --> 00:05:44,930
text files loaded from the SD card and

114
00:05:40,090 --> 00:05:47,179
anybody sees the vulnerability here text

115
00:05:44,930 --> 00:05:49,039
files loaded from the SD card the text

116
00:05:47,180 --> 00:05:54,699
file content is embedded into HTML later

117
00:05:49,039 --> 00:05:54,699
and this is the code what's the problem

118
00:05:56,560 --> 00:06:09,220
you already got the past leave the

119
00:05:58,729 --> 00:06:14,240
others yeah it's cross-site scripting

120
00:06:09,220 --> 00:06:16,550
yeah yeah that could be okay okay yeah

121
00:06:14,240 --> 00:06:20,930
that would be a valid answer so if you

122
00:06:16,550 --> 00:06:22,460
want I give you a pass well so come on

123
00:06:20,930 --> 00:06:25,490
take it so yeah that would be one

124
00:06:22,460 --> 00:06:28,070
scenario another would be a malicious

125
00:06:25,490 --> 00:06:31,610
app right into the SD card and then

126
00:06:28,070 --> 00:06:34,370
getting execution on the with privileges

127
00:06:31,610 --> 00:06:36,289
of the other application right so the

128
00:06:34,370 --> 00:06:39,500
text file is loaded from the SD card

129
00:06:36,289 --> 00:06:41,389
then this is saved into into a variable

130
00:06:39,500 --> 00:06:44,240
and then this is concatenated into HTML

131
00:06:41,389 --> 00:06:46,039
so you get XSS and then what this means

132
00:06:44,240 --> 00:06:49,190
is a malicious application could write

133
00:06:46,039 --> 00:06:51,979
into the text into a text file and run

134
00:06:49,190 --> 00:06:55,219
JavaScript right so once you can run

135
00:06:51,979 --> 00:06:58,190
JavaScript I really like this website

136
00:06:55,219 --> 00:07:01,639
from my friend Garrett Hayes exercise

137
00:06:58,190 --> 00:07:03,370
comfo master so if you go to this

138
00:07:01,639 --> 00:07:07,699
website you have like all these handy

139
00:07:03,370 --> 00:07:10,279
things to like doing partial encoding of

140
00:07:07,699 --> 00:07:11,959
things so just so that is readable

141
00:07:10,279 --> 00:07:15,609
the slides this is what the payload was

142
00:07:11,959 --> 00:07:18,469
so you could like read like any any

143
00:07:15,609 --> 00:07:21,019
database from the from the storage of

144
00:07:18,469 --> 00:07:22,819
the app and then you can like get access

145
00:07:21,019 --> 00:07:25,069
and you could like forward these to to

146
00:07:22,819 --> 00:07:27,169
an attacker right and these you needed

147
00:07:25,069 --> 00:07:28,669
to encode this so that there's like no

148
00:07:27,169 --> 00:07:31,639
single or double quotes or anything

149
00:07:28,669 --> 00:07:33,169
inside of the script itself so that the

150
00:07:31,639 --> 00:07:34,669
application would not break and you

151
00:07:33,169 --> 00:07:36,318
could still get the payload to execute

152
00:07:34,669 --> 00:07:39,589
so you get like stream from shark or the

153
00:07:36,319 --> 00:07:41,029
men all all the characters there but

154
00:07:39,589 --> 00:07:43,549
this would be like the readable format

155
00:07:41,029 --> 00:07:45,319
so this would confirm with the alert

156
00:07:43,549 --> 00:07:48,739
that we get access to the sequel Lite

157
00:07:45,319 --> 00:07:50,899
database this would be the fix I'm going

158
00:07:48,739 --> 00:07:53,808
to skip over a bit because we have like

159
00:07:50,899 --> 00:07:57,319
a lot of stuff to go so now sexy

160
00:07:53,809 --> 00:08:00,229
copy-paste attacks so the background

161
00:07:57,319 --> 00:08:05,829
here is crypto vault

162
00:08:00,229 --> 00:08:05,829
so anybody knows what this attack is

163
00:08:19,070 --> 00:08:29,330
nobody okay so we CSS you can say like

164
00:08:26,300 --> 00:08:31,940
these tags that I'm showing here this

165
00:08:29,330 --> 00:08:35,900
you cannot copy it right and this other

166
00:08:31,940 --> 00:08:39,280
text that is like hidden right there

167
00:08:35,900 --> 00:08:41,510
putting in like below you can copy it

168
00:08:39,280 --> 00:08:44,089
but you cannot see it because the other

169
00:08:41,510 --> 00:08:47,450
text is on top right so with CSS you can

170
00:08:44,090 --> 00:08:49,070
do like this kind of messy stuff so the

171
00:08:47,450 --> 00:08:51,200
way it would look on the phone is just

172
00:08:49,070 --> 00:08:53,120
select all these texts and copy-paste it

173
00:08:51,200 --> 00:08:54,650
so you would copy it and then when you

174
00:08:53,120 --> 00:08:57,620
paste it is completely something else

175
00:08:54,650 --> 00:08:59,150
now in mobile applications because

176
00:08:57,620 --> 00:09:01,250
there's like small space on the screen

177
00:08:59,150 --> 00:09:03,980
when you paste it you could get it like

178
00:09:01,250 --> 00:09:05,840
to like show something like looks like

179
00:09:03,980 --> 00:09:07,780
non minutiae not non-malicious but in

180
00:09:05,840 --> 00:09:10,730
reality like you're doing something else

181
00:09:07,780 --> 00:09:14,720
and then with this we would be able to

182
00:09:10,730 --> 00:09:17,540
overwrite like arbitrary files on the on

183
00:09:14,720 --> 00:09:19,730
the application so this was on the

184
00:09:17,540 --> 00:09:21,890
export log functionality so it'll say

185
00:09:19,730 --> 00:09:23,450
log sport X successfully and then it

186
00:09:21,890 --> 00:09:26,810
would like break the app because we are

187
00:09:23,450 --> 00:09:29,390
over writing the the database of the

188
00:09:26,810 --> 00:09:33,140
application and then invert the entire

189
00:09:29,390 --> 00:09:34,819
vault containing like all the keys was

190
00:09:33,140 --> 00:09:36,290
like killed rightly it was like the way

191
00:09:34,820 --> 00:09:37,940
though it was corrupted so this is like

192
00:09:36,290 --> 00:09:40,040
one of the public reports if you want to

193
00:09:37,940 --> 00:09:41,780
read more about it this would be the

194
00:09:40,040 --> 00:09:45,560
mitigation I'm going to skip over

195
00:09:41,780 --> 00:09:47,900
because there's a lot now spoofing so

196
00:09:45,560 --> 00:09:49,819
one thing that you can do is to show one

197
00:09:47,900 --> 00:09:51,860
URL but then when the user clicks on it

198
00:09:49,820 --> 00:09:54,530
they actually go in somewhere else so

199
00:09:51,860 --> 00:09:57,560
one way to achieve this is with left to

200
00:09:54,530 --> 00:10:00,290
right and like to write characters so

201
00:09:57,560 --> 00:10:02,630
this was a the example thrown from the

202
00:10:00,290 --> 00:10:05,270
pen test so you send a link like this

203
00:10:02,630 --> 00:10:08,330
with these characters here and then the

204
00:10:05,270 --> 00:10:11,180
victims is this URL but they actually go

205
00:10:08,330 --> 00:10:13,550
to this other URL right so this can be

206
00:10:11,180 --> 00:10:15,949
useful when you're testing like email

207
00:10:13,550 --> 00:10:19,689
applications or chat applications things

208
00:10:15,950 --> 00:10:22,040
like this now content providers

209
00:10:19,690 --> 00:10:26,600
background browser application with a

210
00:10:22,040 --> 00:10:29,839
custom URL handler so this will be the

211
00:10:26,600 --> 00:10:31,450
the URI of the content provider right

212
00:10:29,840 --> 00:10:33,730
and then

213
00:10:31,450 --> 00:10:36,940
parse it and then this you had like the

214
00:10:33,730 --> 00:10:38,530
fake news like you know president

215
00:10:36,940 --> 00:10:41,980
disappears after entering police

216
00:10:38,530 --> 00:10:44,290
whatever and then just like all the the

217
00:10:41,980 --> 00:10:47,140
content programmed one insert and you

218
00:10:44,290 --> 00:10:49,150
would be able to to insert like fake

219
00:10:47,140 --> 00:10:51,400
news this was like a news application so

220
00:10:49,150 --> 00:10:53,230
there was like a content provider that

221
00:10:51,400 --> 00:10:55,569
didn't have like any text any

222
00:10:53,230 --> 00:10:58,480
permissions and you you were able to do

223
00:10:55,570 --> 00:11:01,870
this abuse so another type of funny kind

224
00:10:58,480 --> 00:11:04,240
of attack right so yeah do not export

225
00:11:01,870 --> 00:11:05,920
content provider cell is needed if you

226
00:11:04,240 --> 00:11:08,050
must export it at least protected with a

227
00:11:05,920 --> 00:11:10,870
permission that requires the signature

228
00:11:08,050 --> 00:11:13,810
of the same developer right so this with

229
00:11:10,870 --> 00:11:15,190
the mitigation now local server attacks

230
00:11:13,810 --> 00:11:17,739
right like when you're testing a mobile

231
00:11:15,190 --> 00:11:19,480
app like who thinks about a local server

232
00:11:17,740 --> 00:11:20,740
right like you're looking at the

233
00:11:19,480 --> 00:11:24,070
manifest you're looking at the

234
00:11:20,740 --> 00:11:27,670
info.plist on iOS but who looks at the

235
00:11:24,070 --> 00:11:28,930
local server attack a local server for

236
00:11:27,670 --> 00:11:30,729
attacks and I'm putting here school

237
00:11:28,930 --> 00:11:35,770
because I saw a lot here so I found that

238
00:11:30,730 --> 00:11:38,260
interesting so this was a Cordova

239
00:11:35,770 --> 00:11:40,840
application if you stop plugging that to

240
00:11:38,260 --> 00:11:45,850
get around some limitations it was

241
00:11:40,840 --> 00:11:47,350
running a local server so you could like

242
00:11:45,850 --> 00:11:51,760
and the local server have a pass

243
00:11:47,350 --> 00:11:53,920
traversal so you could like get the Etsy

244
00:11:51,760 --> 00:11:56,680
password like this so this way this was

245
00:11:53,920 --> 00:11:58,839
like an HTML file right and in here we

246
00:11:56,680 --> 00:12:00,189
have two iframes one is like getting the

247
00:11:58,840 --> 00:12:02,860
Etsy password and the other is getting

248
00:12:00,190 --> 00:12:06,640
the the files from the app itself like

249
00:12:02,860 --> 00:12:09,930
doing dot dot slash here so this is how

250
00:12:06,640 --> 00:12:12,130
it was looking like on the phone itself

251
00:12:09,930 --> 00:12:14,290
when you when we were checking this

252
00:12:12,130 --> 00:12:16,990
right so it's another kind of

253
00:12:14,290 --> 00:12:19,270
interesting floor and then of course an

254
00:12:16,990 --> 00:12:21,790
app in the background could do the

255
00:12:19,270 --> 00:12:23,140
equivalent of this kind of shell command

256
00:12:21,790 --> 00:12:25,810
which would be like for each of the

257
00:12:23,140 --> 00:12:28,290
files that I want to get just do a loop

258
00:12:25,810 --> 00:12:30,819
and what W get of that and just dump it

259
00:12:28,290 --> 00:12:33,910
and then you would get like all the all

260
00:12:30,820 --> 00:12:36,460
the files dumped like that so this will

261
00:12:33,910 --> 00:12:38,410
be the mitigation do not run a local

262
00:12:36,460 --> 00:12:41,770
server on your phone and all these kind

263
00:12:38,410 --> 00:12:44,810
of things so now let's take your i

264
00:12:41,770 --> 00:12:48,110
schemes so

265
00:12:44,810 --> 00:12:50,959
anybody sees what the problem is so this

266
00:12:48,110 --> 00:12:55,250
is a browser is it was the onion

267
00:12:50,959 --> 00:12:59,768
browsers to use a browser to use tor and

268
00:12:55,250 --> 00:12:59,769
then you navigate to a website right

269
00:13:00,069 --> 00:13:04,790
when let's say when while you're

270
00:13:02,899 --> 00:13:06,769
navigating the website these code runs

271
00:13:04,790 --> 00:13:09,009
right so does anybody see any problem

272
00:13:06,769 --> 00:13:09,009
here

273
00:13:18,110 --> 00:13:20,920
not with you

274
00:13:26,320 --> 00:13:30,519
okay I don't worry there's a lot more

275
00:13:28,930 --> 00:13:33,880
question so you'll get some like

276
00:13:30,519 --> 00:13:38,320
something right later so the problem is

277
00:13:33,880 --> 00:13:40,420
is checking that if there's like a force

278
00:13:38,320 --> 00:13:43,240
quit right so it had like this custom

279
00:13:40,420 --> 00:13:45,040
URL on your browser so you could like

280
00:13:43,240 --> 00:13:46,990
for example happen image in your page

281
00:13:45,040 --> 00:13:48,339
and just and just close the browser so

282
00:13:46,990 --> 00:13:50,620
somebody visits your place and applause

283
00:13:48,339 --> 00:13:52,839
the browser closed earlier like what so

284
00:13:50,620 --> 00:13:54,490
it's it was funny like you could and

285
00:13:52,839 --> 00:13:56,230
this is just one of the examples you

286
00:13:54,490 --> 00:13:58,089
could also like all like other functions

287
00:13:56,230 --> 00:14:01,180
through the URL so if you have like a

288
00:13:58,089 --> 00:14:03,370
custom URL handler this is some of the

289
00:14:01,180 --> 00:14:04,569
possible attacks right like a website

290
00:14:03,370 --> 00:14:08,560
that you're visiting could like all

291
00:14:04,569 --> 00:14:10,810
things in the app right so yeah this

292
00:14:08,560 --> 00:14:14,758
will be the mitigation I'm going to skip

293
00:14:10,810 --> 00:14:18,508
over a bit because we are behind so now

294
00:14:14,759 --> 00:14:22,589
logic by logic backs right these are

295
00:14:18,509 --> 00:14:25,290
usually hard to find automated tools

296
00:14:22,589 --> 00:14:28,259
really don't do a good job with this and

297
00:14:25,290 --> 00:14:31,029
yeah they often subtle issues right so

298
00:14:28,259 --> 00:14:32,230
let's look at this example javascript is

299
00:14:31,029 --> 00:14:34,300
disabled by default

300
00:14:32,230 --> 00:14:36,279
right that's how the application was

301
00:14:34,300 --> 00:14:38,410
supposed to work so this would be like

302
00:14:36,279 --> 00:14:40,209
the settings of the application and this

303
00:14:38,410 --> 00:14:46,740
is the code does anybody see a problem

304
00:14:40,209 --> 00:14:46,739
with this just one line of code come on

305
00:14:48,839 --> 00:14:54,810
yeah but but where's the problem in the

306
00:14:52,630 --> 00:14:54,810
code

307
00:15:04,499 --> 00:15:18,639
yeah yeah yeah that would be yeah that

308
00:15:15,249 --> 00:15:22,269
would be a valid answer so you get a

309
00:15:18,639 --> 00:15:25,959
pass to the course but basically what

310
00:15:22,269 --> 00:15:29,589
happened was the setting itself was not

311
00:15:25,959 --> 00:15:32,018
set so this is saying if you cannot get

312
00:15:29,589 --> 00:15:33,970
the setting just defaulted to true right

313
00:15:32,019 --> 00:15:35,649
so that is there that is the problem so

314
00:15:33,970 --> 00:15:37,449
it's getting the preference and if the

315
00:15:35,649 --> 00:15:39,220
preference is not set its setting it to

316
00:15:37,449 --> 00:15:41,139
true so this is the proof of concept

317
00:15:39,220 --> 00:15:43,660
just to demonstrate that you could run

318
00:15:41,139 --> 00:15:46,389
like a lot of JavaScript and here you

319
00:15:43,660 --> 00:15:50,139
could get like all these all this stuff

320
00:15:46,389 --> 00:15:54,999
right so it wasn't working now a fix for

321
00:15:50,139 --> 00:15:56,559
this would be to ensure the preference

322
00:15:54,999 --> 00:15:58,209
is already set in the preference file

323
00:15:56,559 --> 00:16:01,868
and then instead of default to through

324
00:15:58,209 --> 00:16:04,179
default to false right so now URL

325
00:16:01,869 --> 00:16:09,149
validation very common problem in mobile

326
00:16:04,179 --> 00:16:12,790
apps so yeah so what this is doing is if

327
00:16:09,149 --> 00:16:16,689
it's just well yeah so what this is

328
00:16:12,790 --> 00:16:19,389
doing is if it finds the dot onion

329
00:16:16,689 --> 00:16:22,209
somewhere on the URL right then it's

330
00:16:19,389 --> 00:16:25,389
going to ignore SSL warnings so what can

331
00:16:22,209 --> 00:16:27,878
we do with this right because it is not

332
00:16:25,389 --> 00:16:30,160
checking that the end of the URL is not

333
00:16:27,879 --> 00:16:32,769
onion right it's checking just like

334
00:16:30,160 --> 00:16:35,529
anywhere in the location we can register

335
00:16:32,769 --> 00:16:37,600
like a subdomain as we need in the test

336
00:16:35,529 --> 00:16:38,499
right you can do paypal.com dot onion

337
00:16:37,600 --> 00:16:41,189
that's something else

338
00:16:38,499 --> 00:16:44,170
point you to Google so it's a completely

339
00:16:41,189 --> 00:16:45,490
invalid certificate so you open this on

340
00:16:44,170 --> 00:16:48,009
a normal browser is going to show you

341
00:16:45,490 --> 00:16:49,839
security warnings but on the own in

342
00:16:48,009 --> 00:16:52,389
browser there were no warnings at all

343
00:16:49,839 --> 00:16:56,589
because it had that onion somewhere in

344
00:16:52,389 --> 00:16:58,360
the in the in the host so it's not in

345
00:16:56,589 --> 00:17:01,149
the URL Suri's on the host right on

346
00:16:58,360 --> 00:17:04,149
there it had to be on the host part so

347
00:17:01,149 --> 00:17:05,349
the host contains the onion so no

348
00:17:04,148 --> 00:17:07,879
warnings and you could like

349
00:17:05,349 --> 00:17:09,980
man-in-the-middle that like without any

350
00:17:07,880 --> 00:17:11,299
any SSL warnings right so this was the

351
00:17:09,980 --> 00:17:11,959
the problem and this is the public

352
00:17:11,299 --> 00:17:16,730
report

353
00:17:11,959 --> 00:17:19,910
so yeah this we fix now let's look at

354
00:17:16,730 --> 00:17:23,990
mine in the middle attacks so secure

355
00:17:19,910 --> 00:17:26,390
messenger messenger app this was the

356
00:17:23,990 --> 00:17:28,339
attack so it was we were trying to do

357
00:17:26,390 --> 00:17:32,210
like XMPP man in the middle this is a

358
00:17:28,339 --> 00:17:35,510
protocol for kind of job or chat kind

359
00:17:32,210 --> 00:17:38,840
ofit a tough kind of applications right

360
00:17:35,510 --> 00:17:40,700
so while we try is we are going to

361
00:17:38,840 --> 00:17:42,918
disable all the authentication

362
00:17:40,700 --> 00:17:45,260
mechanisms and live only playing right

363
00:17:42,919 --> 00:17:46,909
so that only play the plaintext is the

364
00:17:45,260 --> 00:17:49,370
only authentication option with this

365
00:17:46,909 --> 00:17:51,500
XMPP server that we are trying to use to

366
00:17:49,370 --> 00:17:53,479
man in the middle right and then this

367
00:17:51,500 --> 00:17:55,400
made the application try to log in

368
00:17:53,480 --> 00:17:57,200
because it was the only option and

369
00:17:55,400 --> 00:17:58,880
instead of showing an error to the user

370
00:17:57,200 --> 00:18:01,220
which would be like the correct way to

371
00:17:58,880 --> 00:18:03,049
proceed if it's send the credentials in

372
00:18:01,220 --> 00:18:06,620
clear text which were these credentials

373
00:18:03,049 --> 00:18:09,980
right so yeah this would be the fix but

374
00:18:06,620 --> 00:18:11,330
it was an interesting so always these

375
00:18:09,980 --> 00:18:14,270
these four bytes right like that's the

376
00:18:11,330 --> 00:18:16,039
server support SSL now then we fall back

377
00:18:14,270 --> 00:18:19,280
to clear text right so this is one of

378
00:18:16,039 --> 00:18:22,460
the attack patterns that we found so

379
00:18:19,280 --> 00:18:25,010
another thing is update checks so does

380
00:18:22,460 --> 00:18:37,270
anybody see the problem with this is

381
00:18:25,010 --> 00:18:44,440
very easy yes but what is the problem

382
00:18:37,270 --> 00:18:47,620
exactly I think I think she was first so

383
00:18:44,440 --> 00:18:47,620
you get

384
00:18:52,180 --> 00:19:00,730
sorry second yeah it's just kind of is

385
00:18:57,330 --> 00:19:05,379
well it's a kind of censored from the

386
00:19:00,730 --> 00:19:09,850
original path so this was their response

387
00:19:05,380 --> 00:19:11,470
right so we can change its HTTP so we

388
00:19:09,850 --> 00:19:14,320
can man in the middle like any anybody

389
00:19:11,470 --> 00:19:15,970
can man in the middle this and we can

390
00:19:14,320 --> 00:19:18,280
change the response from not found to

391
00:19:15,970 --> 00:19:21,730
this is version 2 of the application

392
00:19:18,280 --> 00:19:23,080
it's a forced update and the URL to get

393
00:19:21,730 --> 00:19:26,980
this update is this telephone number

394
00:19:23,080 --> 00:19:30,010
right so the user would get this dialog

395
00:19:26,980 --> 00:19:32,110
and then when they hit update it will

396
00:19:30,010 --> 00:19:33,550
drink like a potential premium number

397
00:19:32,110 --> 00:19:36,990
right so this is an attack vector

398
00:19:33,550 --> 00:19:40,600
against mobile apps right that can be

399
00:19:36,990 --> 00:19:43,060
useful so this with a mitigation of

400
00:19:40,600 --> 00:19:44,590
course validate the URL use that URL are

401
00:19:43,060 --> 00:19:48,550
not a phone number and all these things

402
00:19:44,590 --> 00:19:51,129
right now another scenario was a

403
00:19:48,550 --> 00:19:53,409
third-party zip file retrieval

404
00:19:51,130 --> 00:19:55,530
so that's anybody see a problem with

405
00:19:53,410 --> 00:19:55,530
this

406
00:20:01,900 --> 00:20:17,890
this is the iOS configuration info.plist

407
00:20:07,180 --> 00:20:19,830
of the iOS app second you are thinking

408
00:20:17,890 --> 00:20:28,960
in the right direction but is not

409
00:20:19,830 --> 00:20:33,370
exactly bad yeah it allows insecure

410
00:20:28,960 --> 00:20:41,410
loads but what does it mean to allow

411
00:20:33,370 --> 00:20:47,379
insecure loads you are yeah yeah that's

412
00:20:41,410 --> 00:20:51,160
it you were there so you get a free pass

413
00:20:47,380 --> 00:20:53,800
so yeah so that's the problem

414
00:20:51,160 --> 00:20:58,240
this is the app Transport Security since

415
00:20:53,800 --> 00:21:01,000
iOS 9 clear taxes TCP connections are

416
00:20:58,240 --> 00:21:03,100
disabled by default but developers can

417
00:21:01,000 --> 00:21:04,780
override this in the info police

418
00:21:03,100 --> 00:21:07,449
configuration you can set exception

419
00:21:04,780 --> 00:21:11,590
domain so in this case this domain is

420
00:21:07,450 --> 00:21:14,550
set to allow clear text HTTP right so

421
00:21:11,590 --> 00:21:16,959
what can we do with this we can change

422
00:21:14,550 --> 00:21:20,250
because this is clear text we can

423
00:21:16,960 --> 00:21:24,160
provide any zip file we want of course

424
00:21:20,250 --> 00:21:27,820
we can get the app to unzip this file so

425
00:21:24,160 --> 00:21:29,850
we can override any any kind of local

426
00:21:27,820 --> 00:21:32,919
files that the app has right with this

427
00:21:29,850 --> 00:21:36,309
with this vulnerability so this would be

428
00:21:32,920 --> 00:21:38,860
the way to fix it had no exceptions and

429
00:21:36,309 --> 00:21:41,410
use the penalties that you secure TLS

430
00:21:38,860 --> 00:21:47,050
communications so now let's look at

431
00:21:41,410 --> 00:21:49,179
another one this is this is a multi-part

432
00:21:47,050 --> 00:21:52,809
question so just pay attention we have

433
00:21:49,179 --> 00:21:54,760
an application when there's a

434
00:21:52,809 --> 00:21:58,389
certificate exception it will prompt the

435
00:21:54,760 --> 00:22:00,460
user this is the prompt except unknown

436
00:21:58,390 --> 00:22:05,140
certificate you can say always once or

437
00:22:00,460 --> 00:22:07,920
abort then to process the answer the

438
00:22:05,140 --> 00:22:11,530
application registers broadcast receiver

439
00:22:07,920 --> 00:22:13,960
right then start the activity well this

440
00:22:11,530 --> 00:22:15,860
would be the activity that opens this

441
00:22:13,960 --> 00:22:19,100
dialog

442
00:22:15,860 --> 00:22:22,159
wait eventually when it gets the answer

443
00:22:19,100 --> 00:22:24,740
it and registers the receiver right and

444
00:22:22,160 --> 00:22:26,330
this is how it processes the it

445
00:22:24,740 --> 00:22:28,010
processes the input from the broadcast

446
00:22:26,330 --> 00:22:31,040
receiver it gets the decision it gets

447
00:22:28,010 --> 00:22:33,320
the choice if it's always if it's only

448
00:22:31,040 --> 00:22:37,250
this time and then it stores the

449
00:22:33,320 --> 00:22:46,210
certificate so what's the problem with

450
00:22:37,250 --> 00:22:46,210
that anybody back here

451
00:22:56,470 --> 00:23:20,990
yeah but no so can you speak a little

452
00:23:11,750 --> 00:23:25,990
bit louder yes but that is not the the

453
00:23:20,990 --> 00:23:28,340
problem itself the problem is more about

454
00:23:25,990 --> 00:23:33,940
bypassing this prompt without user

455
00:23:28,340 --> 00:23:37,699
interaction so does anybody see without

456
00:23:33,940 --> 00:23:43,370
user interaction how can we get get

457
00:23:37,700 --> 00:23:47,030
these say always or something with the

458
00:23:43,370 --> 00:23:50,270
problem well I don't know how many games

459
00:23:47,030 --> 00:23:57,110
I can give you let's go into way more

460
00:23:50,270 --> 00:24:02,230
questions so anybody else has or or if

461
00:23:57,110 --> 00:24:02,229
you want to keep trying you're close but

462
00:24:03,010 --> 00:24:08,690
it is it is a forever choice so it's

463
00:24:05,780 --> 00:24:12,320
towards the certificate yes but what is

464
00:24:08,690 --> 00:24:14,720
the problem because if the user says

465
00:24:12,320 --> 00:24:16,429
always it's the user saying always so

466
00:24:14,720 --> 00:24:38,350
that's the users choice so that's not a

467
00:24:16,430 --> 00:24:44,780
problem right that's it that's it

468
00:24:38,350 --> 00:24:47,149
you get you get the third day man that's

469
00:24:44,780 --> 00:24:48,800
it so it's setting is doing is

470
00:24:47,150 --> 00:24:50,810
implementing this functionality with a

471
00:24:48,800 --> 00:24:54,260
broadcast receiver so any app can call

472
00:24:50,810 --> 00:24:56,840
this that's the problem right I mean if

473
00:24:54,260 --> 00:24:58,460
it was a local receiver then only the

474
00:24:56,840 --> 00:25:00,970
app itself would be able to call it

475
00:24:58,460 --> 00:25:03,620
right but the problem here is the

476
00:25:00,970 --> 00:25:08,060
receiver is something that any app can

477
00:25:03,620 --> 00:25:11,179
call so you can say in an ADB shell and

478
00:25:08,060 --> 00:25:13,280
pass the decision right and set the

479
00:25:11,180 --> 00:25:14,720
choice to accept the certificate always

480
00:25:13,280 --> 00:25:18,590
and an app can do this in the background

481
00:25:14,720 --> 00:25:20,840
and get get to bypass these SSL prompt

482
00:25:18,590 --> 00:25:25,179
right so that's the problem okay so

483
00:25:20,840 --> 00:25:31,340
let's move on man in the middle of XMPP

484
00:25:25,180 --> 00:25:33,830
so to bypass to do a XMPP SSL man in the

485
00:25:31,340 --> 00:25:36,379
middle without warnings useful for this

486
00:25:33,830 --> 00:25:38,899
is using prosody which is a tool that

487
00:25:36,380 --> 00:25:41,380
where you can implement by your own XMPP

488
00:25:38,900 --> 00:25:44,270
server so you can like DNS spoof by the

489
00:25:41,380 --> 00:25:46,610
the domain so for example chat

490
00:25:44,270 --> 00:25:51,260
facebook.com and point it an IP you

491
00:25:46,610 --> 00:25:53,449
control and then we got just doing this

492
00:25:51,260 --> 00:25:56,690
we got the application to accept the

493
00:25:53,450 --> 00:25:59,930
default self sign processes certificate

494
00:25:56,690 --> 00:26:01,820
by default so it's just funny but yeah

495
00:25:59,930 --> 00:26:04,550
so if you need to money in the middle

496
00:26:01,820 --> 00:26:05,810
XMPP a prosody can be can be useful and

497
00:26:04,550 --> 00:26:10,450
yeah we got that

498
00:26:05,810 --> 00:26:13,970
so now let's look at another clear text

499
00:26:10,450 --> 00:26:16,540
HTTP example so does anybody see a

500
00:26:13,970 --> 00:26:16,540
problem with this

501
00:26:25,950 --> 00:26:30,360
anybody that doesn't already have our

502
00:26:28,060 --> 00:26:30,360
card

503
00:26:35,590 --> 00:26:40,899
it's HTTP okay that's part of the

504
00:26:38,260 --> 00:26:48,310
problem and but what can you do with

505
00:26:40,900 --> 00:26:51,760
that who said that say that again I will

506
00:26:48,310 --> 00:26:57,700
do it yeah that is correct that is

507
00:26:51,760 --> 00:27:01,000
correct so you can you get the pass so

508
00:26:57,700 --> 00:27:03,820
yeah you could override our try

509
00:27:01,000 --> 00:27:06,490
arbitrary files but in this case you

510
00:27:03,820 --> 00:27:10,389
could even go a step further so you can

511
00:27:06,490 --> 00:27:12,670
change the XML set a file name that does

512
00:27:10,390 --> 00:27:15,610
like a pass traversal where you override

513
00:27:12,670 --> 00:27:17,590
the preference file and then you can set

514
00:27:15,610 --> 00:27:20,379
you could say like the download URL of

515
00:27:17,590 --> 00:27:22,419
this preference file to be an XML that

516
00:27:20,380 --> 00:27:27,220
the attacker controls right and then

517
00:27:22,420 --> 00:27:29,290
this first file would be a file where

518
00:27:27,220 --> 00:27:32,320
the server URL would be like an attacker

519
00:27:29,290 --> 00:27:35,080
controlled server URL so this was an

520
00:27:32,320 --> 00:27:37,240
application to like a kind of

521
00:27:35,080 --> 00:27:39,340
whistleblower application so this would

522
00:27:37,240 --> 00:27:40,870
mean like all day like human right

523
00:27:39,340 --> 00:27:43,179
violations and stuff would go to the

524
00:27:40,870 --> 00:27:46,989
attacker right so if like a malicious or

525
00:27:43,180 --> 00:27:49,090
kind of oppressive government was like

526
00:27:46,990 --> 00:27:51,430
doing this attack they would get the

527
00:27:49,090 --> 00:27:54,209
submissions instead of the human right

528
00:27:51,430 --> 00:27:56,800
activist right so this was a really bad

529
00:27:54,210 --> 00:27:58,930
attack because it could in among other

530
00:27:56,800 --> 00:28:02,290
things get people killed right ending in

531
00:27:58,930 --> 00:28:04,900
those countries so in the in locket

532
00:28:02,290 --> 00:28:06,940
right you would say like hey this file

533
00:28:04,900 --> 00:28:09,130
has been deleted first and then it was

534
00:28:06,940 --> 00:28:12,070
saying started downloading into the SD

535
00:28:09,130 --> 00:28:14,620
card and then copied over from the SD

536
00:28:12,070 --> 00:28:16,600
card and the traversal goes into the app

537
00:28:14,620 --> 00:28:19,659
internal storage and overrides the

538
00:28:16,600 --> 00:28:24,580
Preferences file so this was the day

539
00:28:19,660 --> 00:28:27,880
attack this would be the mitigation kind

540
00:28:24,580 --> 00:28:32,110
of super short on time so anybody sees a

541
00:28:27,880 --> 00:28:34,590
problem with this so the application

542
00:28:32,110 --> 00:28:39,860
gets a CSS file from the server

543
00:28:34,590 --> 00:28:39,860
and then it W it does this with the CSS

544
00:28:48,769 --> 00:28:57,929
nobody okay so of course the problem is

545
00:28:53,190 --> 00:28:59,880
it's using clear text HTTP again so we

546
00:28:57,929 --> 00:29:01,710
can change the CSS file to close the

547
00:28:59,880 --> 00:29:04,289
style tag so because this is like a

548
00:29:01,710 --> 00:29:06,779
string concatenation right which getting

549
00:29:04,289 --> 00:29:09,870
the server provided you a CSS and

550
00:29:06,779 --> 00:29:11,970
concatenate into the HTML so it's

551
00:29:09,870 --> 00:29:13,949
closing the style tag and then you can

552
00:29:11,970 --> 00:29:15,480
do like script and load your JavaScript

553
00:29:13,950 --> 00:29:17,490
and it's going to load this JavaScript

554
00:29:15,480 --> 00:29:20,519
forever because these CSS file was

555
00:29:17,490 --> 00:29:22,830
cached on the application itself so then

556
00:29:20,519 --> 00:29:25,320
the exercise is going to run every time

557
00:29:22,830 --> 00:29:26,580
the user reads an article so the next

558
00:29:25,320 --> 00:29:28,168
question is what can you do with this

559
00:29:26,580 --> 00:29:30,600
because developers always want you to

560
00:29:28,169 --> 00:29:33,600
demonstrate right so this is what you

561
00:29:30,600 --> 00:29:35,879
could do with it so you could like do an

562
00:29:33,600 --> 00:29:39,240
XML HTTP request you can get like the

563
00:29:35,880 --> 00:29:41,880
cookies the location the title the HTML

564
00:29:39,240 --> 00:29:46,230
of the what the user is reading so you

565
00:29:41,880 --> 00:29:47,610
would see like all the as the user is

566
00:29:46,230 --> 00:29:49,710
reading the news because this was a

567
00:29:47,610 --> 00:29:52,019
newsreader you could see like the IP of

568
00:29:49,710 --> 00:29:54,419
the user which user agent the cookies

569
00:29:52,019 --> 00:29:56,940
the URL they're visiting the HTML of the

570
00:29:54,419 --> 00:29:58,110
news they were reading but of course we

571
00:29:56,940 --> 00:30:01,470
can go a little bit further than that

572
00:29:58,110 --> 00:30:05,519
right so with this we could also when

573
00:30:01,470 --> 00:30:09,570
the user 5/5 rated the article it would

574
00:30:05,519 --> 00:30:11,580
be saved as a local file right so we

575
00:30:09,570 --> 00:30:13,260
have a check here like if if the

576
00:30:11,580 --> 00:30:16,168
protocol is not filed and don't try to

577
00:30:13,260 --> 00:30:18,330
read local files but if not try to read

578
00:30:16,169 --> 00:30:19,860
the files right so there was a list of

579
00:30:18,330 --> 00:30:21,269
sensitive files and we would look

580
00:30:19,860 --> 00:30:24,570
through this and try to get the

581
00:30:21,269 --> 00:30:26,519
sensitive files from the phone so with

582
00:30:24,570 --> 00:30:28,289
this I think I have a screenshot yeah

583
00:30:26,519 --> 00:30:30,120
you could we could get like the call

584
00:30:28,289 --> 00:30:32,760
history of the phone and stuff like this

585
00:30:30,120 --> 00:30:36,750
right we with these accesses so this was

586
00:30:32,760 --> 00:30:39,799
a very cool attack ok to get the the

587
00:30:36,750 --> 00:30:41,970
call they call history from the phone

588
00:30:39,799 --> 00:30:43,799
yeah and another thing that you could do

589
00:30:41,970 --> 00:30:46,620
is get the local files from the app

590
00:30:43,799 --> 00:30:49,679
itself because in iOS you have this

591
00:30:46,620 --> 00:30:51,600
token we could get the token from from

592
00:30:49,679 --> 00:30:53,399
the location itself actually so it was

593
00:30:51,600 --> 00:30:56,580
like we did like path replace and with

594
00:30:53,399 --> 00:30:58,379
these we can get the token so and once

595
00:30:56,580 --> 00:31:00,449
you got the token then you can get like

596
00:30:58,379 --> 00:31:02,039
all the all the local files

597
00:31:00,450 --> 00:31:04,619
because you know like the full path to

598
00:31:02,039 --> 00:31:07,289
to get the files right so this will be

599
00:31:04,619 --> 00:31:10,168
the fix now let's look at data

600
00:31:07,289 --> 00:31:16,850
exfiltration with browsing functionality

601
00:31:10,169 --> 00:31:19,889
so we have an exported activity right

602
00:31:16,850 --> 00:31:22,230
the app expects other apps to send urls

603
00:31:19,889 --> 00:31:25,649
to it it opens those URLs and shows them

604
00:31:22,230 --> 00:31:29,700
to the user so this is the exported

605
00:31:25,649 --> 00:31:33,449
activity this is the intent extra

606
00:31:29,700 --> 00:31:36,059
processing so it's getting this search

607
00:31:33,450 --> 00:31:39,269
query in turn x-ray search it into a URL

608
00:31:36,059 --> 00:31:41,100
and then it tries to handle it so does

609
00:31:39,269 --> 00:31:43,679
anybody see a problem with this we have

610
00:31:41,100 --> 00:31:45,928
an exporting activity we have an intent

611
00:31:43,679 --> 00:31:47,669
extra query and this is the URL

612
00:31:45,929 --> 00:31:55,019
validation does anybody see a problem

613
00:31:47,669 --> 00:31:57,259
with this URL validation it's a regular

614
00:31:55,019 --> 00:31:57,259
expression

615
00:32:02,899 --> 00:32:13,039
come on seriously nobody

616
00:32:16,990 --> 00:32:21,710
No

617
00:32:19,429 --> 00:32:25,639
so of course the problem is it's

618
00:32:21,710 --> 00:32:28,549
accepting file URLs so it's opening the

619
00:32:25,639 --> 00:32:30,080
URL that you pass to it so if what kind

620
00:32:28,549 --> 00:32:32,629
of malicious up do it is right so you

621
00:32:30,080 --> 00:32:34,580
can write to the SD card your own HTML

622
00:32:32,629 --> 00:32:38,599
file as a malicious application then you

623
00:32:34,580 --> 00:32:41,359
can send a final URL to this file that

624
00:32:38,599 --> 00:32:42,979
you wrote on the on the SD card because

625
00:32:41,359 --> 00:32:43,580
the SD card is the Wild West demons

626
00:32:42,979 --> 00:32:46,399
right right

627
00:32:43,580 --> 00:32:50,299
so the browser app goes to this HTML

628
00:32:46,399 --> 00:32:54,498
file that we are selling as a query URL

629
00:32:50,299 --> 00:32:57,469
and then with this we can like get like

630
00:32:54,499 --> 00:32:59,299
file access to the to the files from the

631
00:32:57,469 --> 00:33:01,279
app itself right so we can get this data

632
00:32:59,299 --> 00:33:04,158
data storage from the application that

633
00:33:01,279 --> 00:33:05,779
normally would be protected by Android

634
00:33:04,159 --> 00:33:08,179
itself right so we can bypass this

635
00:33:05,779 --> 00:33:11,359
restriction in the permission model in

636
00:33:08,179 --> 00:33:13,519
Android so yeah with this we could

637
00:33:11,359 --> 00:33:15,978
confirm Lam with an alert like we are

638
00:33:13,519 --> 00:33:19,339
able to read these files from data data

639
00:33:15,979 --> 00:33:22,279
from the app so this was quite bad this

640
00:33:19,339 --> 00:33:27,320
would be the mitigation disabled file

641
00:33:22,279 --> 00:33:31,149
access and all these things yeah and

642
00:33:27,320 --> 00:33:33,678
this yeah but now a chat application so

643
00:33:31,149 --> 00:33:34,939
please I'm just skipping over because

644
00:33:33,679 --> 00:33:38,690
I'm running out of time I have some

645
00:33:34,940 --> 00:33:41,419
insight so permanent accesses with data

646
00:33:38,690 --> 00:33:44,719
exfiltration so we had a chat

647
00:33:41,419 --> 00:33:48,229
application in iOS where it was output

648
00:33:44,719 --> 00:33:51,409
encoding correctly the the messages that

649
00:33:48,229 --> 00:33:54,499
were coming from one user to another but

650
00:33:51,409 --> 00:33:57,739
it was not escaping the messages that

651
00:33:54,499 --> 00:33:59,929
you put in the chat yourself right so a

652
00:33:57,739 --> 00:34:01,489
way around this would be like to try to

653
00:33:59,929 --> 00:34:03,830
fool the user that is receiving the

654
00:34:01,489 --> 00:34:06,049
message to paste a message into the chat

655
00:34:03,830 --> 00:34:07,728
so you can say can you copy place this

656
00:34:06,049 --> 00:34:09,139
message into the chat it seems like

657
00:34:07,729 --> 00:34:11,690
something's not working for me thank you

658
00:34:09,139 --> 00:34:13,460
I'm then script worker and then if the

659
00:34:11,690 --> 00:34:15,470
user copied this and pasted it into the

660
00:34:13,460 --> 00:34:21,589
chat then you will get the exercise

661
00:34:15,469 --> 00:34:23,270
right so it was a little bit interesting

662
00:34:21,589 --> 00:34:25,129
as well so with this you we could of

663
00:34:23,270 --> 00:34:28,099
course again like read like files from

664
00:34:25,129 --> 00:34:30,469
the phone and we can like confirm like

665
00:34:28,099 --> 00:34:32,299
access to to these files with with

666
00:34:30,469 --> 00:34:33,290
alerts like we are able to read these

667
00:34:32,299 --> 00:34:35,000
files like this

668
00:34:33,290 --> 00:34:40,279
very history and all the other stuff

669
00:34:35,000 --> 00:34:42,679
right so yeah this would be the fix to

670
00:34:40,280 --> 00:34:44,480
sell it ASIS input from all sources not

671
00:34:42,679 --> 00:34:46,250
only what's what is coming from outside

672
00:34:44,480 --> 00:34:48,260
but what is coming from inside like the

673
00:34:46,250 --> 00:34:50,389
same user trying to exercise himself is

674
00:34:48,260 --> 00:34:52,700
also like a potential vector with

675
00:34:50,389 --> 00:34:55,540
copy/paste and stuff now let's look at

676
00:34:52,699 --> 00:34:59,990
crypto right we got a crypto messenger

677
00:34:55,540 --> 00:35:04,070
does anybody see a problem with this the

678
00:34:59,990 --> 00:35:07,479
app receives encrypted files and this is

679
00:35:04,070 --> 00:35:07,480
how an encrypted file is processed

680
00:35:12,430 --> 00:35:20,870
nobody okay there's going to be still

681
00:35:18,920 --> 00:35:22,640
more there's going to be still more

682
00:35:20,870 --> 00:35:25,339
questions so the problem is it's using

683
00:35:22,640 --> 00:35:28,390
the original file name so the file name

684
00:35:25,340 --> 00:35:32,440
that the user used to encrypt the file

685
00:35:28,390 --> 00:35:35,180
as the target file right so with this

686
00:35:32,440 --> 00:35:36,650
what can we do of course we have a past

687
00:35:35,180 --> 00:35:38,810
reversal because we control the file

688
00:35:36,650 --> 00:35:41,150
name so we can do the adoptive slash

689
00:35:38,810 --> 00:35:43,400
sequence and we can overwrite like any

690
00:35:41,150 --> 00:35:47,390
file we want as the user is decrypting

691
00:35:43,400 --> 00:35:50,660
this right now another one this is very

692
00:35:47,390 --> 00:35:54,230
cool okay does anybody see the problem

693
00:35:50,660 --> 00:35:57,470
with this these are very cool at one of

694
00:35:54,230 --> 00:36:01,700
the finest in this presentation in my

695
00:35:57,470 --> 00:36:02,680
opinion biased opinion does anybody see

696
00:36:01,700 --> 00:36:08,020
the problem here

697
00:36:02,680 --> 00:36:11,540
so we have a PHP sorry a PGP email

698
00:36:08,020 --> 00:36:14,870
application and it's implementing PGP in

699
00:36:11,540 --> 00:36:18,320
JavaScript right so you send an email

700
00:36:14,870 --> 00:36:20,960
that is PGP encrypted to somebody else

701
00:36:18,320 --> 00:36:23,530
this would handle like the decryption of

702
00:36:20,960 --> 00:36:23,530
these message

703
00:36:28,569 --> 00:36:35,029
yes yes so that is moving in the right

704
00:36:32,029 --> 00:36:39,200
direction so I'll give you a pass for

705
00:36:35,029 --> 00:36:42,319
that so yeah the problem is it is

706
00:36:39,200 --> 00:36:46,249
concatenating the HTML message into the

707
00:36:42,319 --> 00:36:50,749
message variable so we get XSS on the

708
00:36:46,249 --> 00:36:54,200
HTML of the of the email so we can close

709
00:36:50,749 --> 00:36:56,450
the quote and put anything we want here

710
00:36:54,200 --> 00:37:00,259
like sent to the attacker the passphrase

711
00:36:56,450 --> 00:37:03,229
and close the quote so we can steal the

712
00:37:00,259 --> 00:37:05,180
passphrase and we could also like steal

713
00:37:03,229 --> 00:37:06,939
the private key of the user right

714
00:37:05,180 --> 00:37:08,749
because these are available as

715
00:37:06,940 --> 00:37:10,819
JavaScript variables where we have

716
00:37:08,749 --> 00:37:13,218
private private key we have passphrase

717
00:37:10,819 --> 00:37:14,808
so this is just an example to send the

718
00:37:13,219 --> 00:37:18,140
passphrase but we could also get the

719
00:37:14,809 --> 00:37:20,390
private key so you could steal both with

720
00:37:18,140 --> 00:37:22,038
just sending an email to a target user

721
00:37:20,390 --> 00:37:25,219
and you get a private key and the

722
00:37:22,039 --> 00:37:26,809
passphrase so it was really cool very

723
00:37:25,219 --> 00:37:29,059
scary but very cool at the same time you

724
00:37:26,809 --> 00:37:30,529
know what I mean so yeah you could set

725
00:37:29,059 --> 00:37:31,009
up a listener and you would get like the

726
00:37:30,529 --> 00:37:35,180
passphrase

727
00:37:31,009 --> 00:37:38,119
like this yeah I'm one way to fix this

728
00:37:35,180 --> 00:37:40,759
would be to pay 60 for user input before

729
00:37:38,119 --> 00:37:42,859
concatenating it into JavaScript and of

730
00:37:40,759 --> 00:37:45,920
course encode user input properly in

731
00:37:42,859 --> 00:37:47,808
JavaScript so now let's let's talk a bit

732
00:37:45,920 --> 00:37:50,479
about some application of this very

733
00:37:47,809 --> 00:37:53,599
close to my heart smart Sheriff we had a

734
00:37:50,479 --> 00:37:55,879
lot of fun with this one so it was

735
00:37:53,599 --> 00:37:57,890
nominated in South Korea the first time

736
00:37:55,880 --> 00:38:04,670
we tested it it wasn't using SSL at all

737
00:37:57,890 --> 00:38:07,700
so you have clear types HTTP then the

738
00:38:04,670 --> 00:38:12,769
second time we tested it it started

739
00:38:07,700 --> 00:38:15,439
using HTTPS right so what is the problem

740
00:38:12,769 --> 00:38:17,390
here now this one the people who talk

741
00:38:15,440 --> 00:38:20,059
Mike who took my course they know it so

742
00:38:17,390 --> 00:38:21,739
you are kind of excluded for this but

743
00:38:20,059 --> 00:38:29,499
anybody from the rest things a problem

744
00:38:21,739 --> 00:38:29,499
with this you only have to read

745
00:38:29,950 --> 00:38:36,200
say who was that sorry ignore the error

746
00:38:33,650 --> 00:38:44,000
okay so it ignores with what kind of

747
00:38:36,200 --> 00:38:46,910
error SSL okay okay so you get a path so

748
00:38:44,000 --> 00:38:49,160
this was this was the problem right so

749
00:38:46,910 --> 00:38:54,350
we have Khan received SSL error proceed

750
00:38:49,160 --> 00:38:56,149
and if the hostname verifier is is wrong

751
00:38:54,350 --> 00:38:57,620
it's going to return true as well so

752
00:38:56,150 --> 00:38:58,910
that's all the code so whatever happens

753
00:38:57,620 --> 00:39:02,299
it's going to return truth is always

754
00:38:58,910 --> 00:39:03,350
valid right so we get mine in the middle

755
00:39:02,300 --> 00:39:09,110
as a Salma in the middle without

756
00:39:03,350 --> 00:39:11,180
warnings but that's more so now this is

757
00:39:09,110 --> 00:39:15,020
still smarter if we have a function that

758
00:39:11,180 --> 00:39:17,390
is encrypt decrypt this is the code we

759
00:39:15,020 --> 00:39:21,380
have as input this and this is the

760
00:39:17,390 --> 00:39:23,450
output and if we put this as input we

761
00:39:21,380 --> 00:39:25,580
get this as output now does this ring

762
00:39:23,450 --> 00:39:28,750
any bells to anybody does anybody know

763
00:39:25,580 --> 00:39:28,750
what the problem is here

764
00:39:30,430 --> 00:39:41,810
what crypto algorithm can be used to

765
00:39:34,130 --> 00:39:44,110
encrypt and decrypt yes but what is that

766
00:39:41,810 --> 00:39:46,220
what is the problem

767
00:39:44,110 --> 00:39:54,010
symmetrical crypto yes but the problem

768
00:39:46,220 --> 00:39:54,009
is I heard rumors but I don't know

769
00:39:55,000 --> 00:40:04,720
anybody he's doing an excerpt yes with

770
00:40:08,870 --> 00:40:16,430
with yeah well it's yeah okay I'm going

771
00:40:12,300 --> 00:40:21,920
to give that did I give you a card

772
00:40:16,430 --> 00:40:26,549
who has who has that so that's for you

773
00:40:21,920 --> 00:40:30,600
okay so it's a hard coded key here right

774
00:40:26,550 --> 00:40:35,430
so you can get the hard coded key from

775
00:40:30,600 --> 00:40:37,470
the phone and of course anybody with

776
00:40:35,430 --> 00:40:39,750
access to the app can get the key so you

777
00:40:37,470 --> 00:40:41,730
can encrypt and decrypt as their best so

778
00:40:39,750 --> 00:40:45,900
this offers like no protection at all

779
00:40:41,730 --> 00:40:49,200
right so we have a hard-coded xor key so

780
00:40:45,900 --> 00:40:50,550
I'm going to skip over now the remaining

781
00:40:49,200 --> 00:40:52,200
questions because otherwise we're not

782
00:40:50,550 --> 00:40:54,810
going to make it so this was the XOR a

783
00:40:52,200 --> 00:40:56,430
proof of concept script so you could

784
00:40:54,810 --> 00:40:59,730
like in Python we wrote the script for

785
00:40:56,430 --> 00:41:01,740
this this was the hard coded key it had

786
00:40:59,730 --> 00:41:04,230
new characters maybe so that when you

787
00:41:01,740 --> 00:41:06,540
use like strings against against the app

788
00:41:04,230 --> 00:41:08,760
you wouldn't get the key as easily

789
00:41:06,540 --> 00:41:11,550
because they knew the nulls are going to

790
00:41:08,760 --> 00:41:14,340
break out the strings in C right so you

791
00:41:11,550 --> 00:41:16,170
got the hard coded key xor with

792
00:41:14,340 --> 00:41:18,780
ciphertext and you get the plaintext

793
00:41:16,170 --> 00:41:22,650
right or the other way around

794
00:41:18,780 --> 00:41:26,070
now this was the version 2 of the of

795
00:41:22,650 --> 00:41:27,480
their solution right so now we get I'm

796
00:41:26,070 --> 00:41:29,400
just going to skip to the solution so

797
00:41:27,480 --> 00:41:32,730
this is the string and he's getting a

798
00:41:29,400 --> 00:41:34,740
fixed a fixed string from the app itself

799
00:41:32,730 --> 00:41:36,990
right so he's getting in this case

800
00:41:34,740 --> 00:41:40,229
they're using AES OAS is good there's

801
00:41:36,990 --> 00:41:44,520
nothing wrong again as a yes for now but

802
00:41:40,230 --> 00:41:47,100
it's a hard coded key again so we have

803
00:41:44,520 --> 00:41:49,470
like the ciphertext is doing AES of this

804
00:41:47,100 --> 00:41:51,150
right and you can use it like to encrypt

805
00:41:49,470 --> 00:41:53,490
or decrypt because it's symmetric

806
00:41:51,150 --> 00:41:56,760
encryption and this was the hard coded

807
00:41:53,490 --> 00:41:58,200
key so we have a useless AES with static

808
00:41:56,760 --> 00:42:00,390
layers so putting together all these

809
00:41:58,200 --> 00:42:03,779
vulnerabilities in smart Sheriff we have

810
00:42:00,390 --> 00:42:06,120
first hard-coded XOR key so we have the

811
00:42:03,780 --> 00:42:07,470
phone number becomes this thing but it's

812
00:42:06,120 --> 00:42:09,240
hard-coded in the phone so anybody can

813
00:42:07,470 --> 00:42:12,240
reverse that it offers no protection at

814
00:42:09,240 --> 00:42:14,910
all then we have an aes layer on top of

815
00:42:12,240 --> 00:42:17,100
this with another hard-coded key so also

816
00:42:14,910 --> 00:42:19,140
no protection at all with this it's

817
00:42:17,100 --> 00:42:20,000
sending the request but it's ignoring

818
00:42:19,140 --> 00:42:23,750
the S

819
00:42:20,000 --> 00:42:26,090
that we saw right so it's way less SL is

820
00:42:23,750 --> 00:42:27,290
it the worst no at all because anybody

821
00:42:26,090 --> 00:42:28,790
can money in the middle that I'm with

822
00:42:27,290 --> 00:42:31,040
that you get the response so it was like

823
00:42:28,790 --> 00:42:33,290
the catastrophe summary of this

824
00:42:31,040 --> 00:42:35,150
application right we finally like so

825
00:42:33,290 --> 00:42:38,440
funny like having like all these useless

826
00:42:35,150 --> 00:42:40,760
crypto and stuff so yeah this would be

827
00:42:38,440 --> 00:42:44,720
usually that and I just really want to

828
00:42:40,760 --> 00:42:45,980
cover this so let me try so this was a

829
00:42:44,720 --> 00:42:51,439
CRM application with Google

830
00:42:45,980 --> 00:42:55,130
authentication so this we have an

831
00:42:51,440 --> 00:42:57,050
activity that is exported we have this

832
00:42:55,130 --> 00:43:02,030
activity calling called

833
00:42:57,050 --> 00:43:04,880
logging webview is saving the Google

834
00:43:02,030 --> 00:43:06,380
authentication token right so and this

835
00:43:04,880 --> 00:43:08,410
is the code where it finished so of

836
00:43:06,380 --> 00:43:13,190
course we have here sequel injection

837
00:43:08,410 --> 00:43:15,319
right and what we could do is to

838
00:43:13,190 --> 00:43:17,330
simulate an attack from a malicious app

839
00:43:15,320 --> 00:43:21,560
first right so attack variant variant

840
00:43:17,330 --> 00:43:24,590
one malicious app attack is we go to the

841
00:43:21,560 --> 00:43:27,980
data storage of another app we say if

842
00:43:24,590 --> 00:43:29,870
this like test dot has all file and we

843
00:43:27,980 --> 00:43:32,360
set it to permissions for everybody so

844
00:43:29,870 --> 00:43:37,660
that other apps can read this this file

845
00:43:32,360 --> 00:43:39,950
right so with this we are proving that

846
00:43:37,660 --> 00:43:42,290
the app can read from this storage

847
00:43:39,950 --> 00:43:44,779
because anybody is able to read with

848
00:43:42,290 --> 00:43:48,500
these permissions and we're sending an

849
00:43:44,780 --> 00:43:51,620
intent calling this activity calling the

850
00:43:48,500 --> 00:43:53,240
URL handler with a token that is not

851
00:43:51,620 --> 00:43:54,290
really a token but is like exploiting

852
00:43:53,240 --> 00:43:57,379
the SQL injection

853
00:43:54,290 --> 00:44:00,590
so this will make more sense here where

854
00:43:57,380 --> 00:44:03,830
it's decoded so in in locket we can see

855
00:44:00,590 --> 00:44:07,970
a sickle cyber cypher database equal a

856
00:44:03,830 --> 00:44:10,819
decryption DL open failed has bad elf

857
00:44:07,970 --> 00:44:14,750
magic right so this means that it's

858
00:44:10,820 --> 00:44:16,910
trying to run it right so it's not just

859
00:44:14,750 --> 00:44:18,350
sequel injection which you can see here

860
00:44:16,910 --> 00:44:21,080
the sequel injection itself but it's

861
00:44:18,350 --> 00:44:23,029
also code execution because it's trying

862
00:44:21,080 --> 00:44:25,130
to run the binary that we can a binary

863
00:44:23,030 --> 00:44:27,260
that we control right so it's like super

864
00:44:25,130 --> 00:44:31,220
cool attack one of the finest in this

865
00:44:27,260 --> 00:44:33,530
presentation in my biased opinion so and

866
00:44:31,220 --> 00:44:35,689
then attack very untrue

867
00:44:33,530 --> 00:44:37,970
very cool because the activity was a

868
00:44:35,690 --> 00:44:39,890
browsable activity this means the

869
00:44:37,970 --> 00:44:44,390
activity can also be called from our

870
00:44:39,890 --> 00:44:48,290
website so if the user is visiting an

871
00:44:44,390 --> 00:44:51,470
attacker control website we could first

872
00:44:48,290 --> 00:44:55,009
force the download of a fake test of soo

873
00:44:51,470 --> 00:44:57,470
binary and then call this binary right

874
00:44:55,010 --> 00:44:59,869
so what the fake page is doing is this

875
00:44:57,470 --> 00:45:03,589
encoding the well is is this is the

876
00:44:59,869 --> 00:45:06,740
payload right and then it calls with

877
00:45:03,590 --> 00:45:08,720
first with an iframe this previews page

878
00:45:06,740 --> 00:45:11,080
right that is doing the download in the

879
00:45:08,720 --> 00:45:14,060
in the background so we have an iframe

880
00:45:11,080 --> 00:45:16,250
download in the test so file the binary

881
00:45:14,060 --> 00:45:19,070
and then we are setting the iframe

882
00:45:16,250 --> 00:45:21,680
source of the trigger iframe which is

883
00:45:19,070 --> 00:45:23,390
you can see the snow source here we are

884
00:45:21,680 --> 00:45:25,129
setting it with JavaScript five seconds

885
00:45:23,390 --> 00:45:28,609
later so this like enough time to

886
00:45:25,130 --> 00:45:31,250
download the binary and then this will

887
00:45:28,609 --> 00:45:33,830
trigger the Dakota execution again right

888
00:45:31,250 --> 00:45:34,550
so it was very cool to do it in both

889
00:45:33,830 --> 00:45:38,569
ways right

890
00:45:34,550 --> 00:45:40,700
so with this let's try API attacks

891
00:45:38,570 --> 00:45:43,480
really quick so retrieving files from

892
00:45:40,700 --> 00:45:45,919
the server very typical example right

893
00:45:43,480 --> 00:45:48,200
because of course it's mobile but mobile

894
00:45:45,920 --> 00:45:49,550
applications also have API so it would

895
00:45:48,200 --> 00:45:51,140
be incomplete this presentation with

896
00:45:49,550 --> 00:45:54,080
some kind of server fun

897
00:45:51,140 --> 00:45:56,540
so this is retrieving a file from the

898
00:45:54,080 --> 00:45:57,740
server this is the code going to skip

899
00:45:56,540 --> 00:45:59,990
for the solution because we are short on

900
00:45:57,740 --> 00:46:04,160
time so this doing a three replace

901
00:45:59,990 --> 00:46:05,930
classic filter right in anybody's mind

902
00:46:04,160 --> 00:46:08,420
like this make sense to replace those

903
00:46:05,930 --> 00:46:10,520
last with nothing but what happens is

904
00:46:08,420 --> 00:46:16,240
you can do this right so when you

905
00:46:10,520 --> 00:46:18,859
replace dot dot dot dot slash slash

906
00:46:16,240 --> 00:46:20,810
right if somebody gives you this and you

907
00:46:18,859 --> 00:46:22,940
replace this it set it to nothing then

908
00:46:20,810 --> 00:46:25,670
you get this right so you can supply

909
00:46:22,940 --> 00:46:27,740
this and still get the path traversal so

910
00:46:25,670 --> 00:46:29,980
this kind of filter is wrong right it

911
00:46:27,740 --> 00:46:34,879
doesn't work like you can get around it

912
00:46:29,980 --> 00:46:36,920
so ways to fix this use the file Basin

913
00:46:34,880 --> 00:46:38,780
get the base name of the path get the

914
00:46:36,920 --> 00:46:41,990
real path check if the path is where

915
00:46:38,780 --> 00:46:44,480
you're supposed to forget it and reject

916
00:46:41,990 --> 00:46:47,180
the dot sequences some mitigation now

917
00:46:44,480 --> 00:46:50,480
uploading files to the server

918
00:46:47,180 --> 00:46:52,970
skip into the solution again user files

919
00:46:50,480 --> 00:46:55,999
right we get a parameter from the user

920
00:46:52,970 --> 00:46:58,069
PHP fingerprint run command then this is

921
00:46:55,999 --> 00:47:02,419
doing a joint so it's concatenating the

922
00:46:58,069 --> 00:47:03,799
strings so a Python list is concatenated

923
00:47:02,420 --> 00:47:05,749
into a single string and then it's

924
00:47:03,799 --> 00:47:08,749
running this through suppressants be

925
00:47:05,749 --> 00:47:11,240
open with shell equal true so this means

926
00:47:08,749 --> 00:47:13,339
we can run like any command on the

927
00:47:11,240 --> 00:47:15,769
server now again hack vector super

928
00:47:13,339 --> 00:47:19,058
useful tool only using your browser you

929
00:47:15,769 --> 00:47:21,470
can like encode and decode like a lot of

930
00:47:19,059 --> 00:47:24,740
using a lot of algorithms it's I

931
00:47:21,470 --> 00:47:25,999
recommend it super handy and this also

932
00:47:24,740 --> 00:47:27,769
makes the slides a little bit more

933
00:47:25,999 --> 00:47:29,839
readable so we get URL encode of this

934
00:47:27,769 --> 00:47:32,839
this was the payload so we are doing a

935
00:47:29,839 --> 00:47:34,279
pipe double you get Who am I and you can

936
00:47:32,839 --> 00:47:37,999
basically run any comments which you

937
00:47:34,279 --> 00:47:40,369
want so this would be the payload so we

938
00:47:37,999 --> 00:47:42,759
get we set up a listener we set up a

939
00:47:40,369 --> 00:47:46,460
reverse shell one-liner

940
00:47:42,759 --> 00:47:48,799
you can google this reversal one-liners

941
00:47:46,460 --> 00:47:51,079
and this like a few ways to do this and

942
00:47:48,799 --> 00:47:53,150
then you just send the payload and we of

943
00:47:51,079 --> 00:47:57,470
course got the shell back so it was

944
00:47:53,150 --> 00:48:00,079
really cool yeah so this will be the fix

945
00:47:57,470 --> 00:48:05,140
avoid this string concatenation escape

946
00:48:00,079 --> 00:48:07,999
user input and all this now API leaks so

947
00:48:05,140 --> 00:48:11,299
from SMERSH if we had a bully what we

948
00:48:07,999 --> 00:48:13,368
affectionately calls the bully API so

949
00:48:11,299 --> 00:48:14,900
imagine this really bad kid in the class

950
00:48:13,369 --> 00:48:17,239
he wants to mess with all the children

951
00:48:14,900 --> 00:48:19,789
this was an app mandated in the entire

952
00:48:17,239 --> 00:48:22,609
country of South Korea so any parent and

953
00:48:19,789 --> 00:48:25,700
child was forced to install this app and

954
00:48:22,609 --> 00:48:27,348
then of course a bully who likes to mess

955
00:48:25,700 --> 00:48:30,200
with all the children in the class right

956
00:48:27,349 --> 00:48:31,819
so just knowing the phone number of

957
00:48:30,200 --> 00:48:33,919
another child from the class it would

958
00:48:31,819 --> 00:48:36,109
ask the API of Marshall if hey I want to

959
00:48:33,920 --> 00:48:38,839
mess with this kid I said Marshall it

960
00:48:36,109 --> 00:48:40,670
will tell you like this this API right

961
00:48:38,839 --> 00:48:41,930
will say ok sure this is the parent

962
00:48:40,670 --> 00:48:44,420
phone number so with that you can

963
00:48:41,930 --> 00:48:46,609
already do some damage but as the bully

964
00:48:44,420 --> 00:48:48,410
a guy you really want more because the

965
00:48:46,609 --> 00:48:50,779
login page require the parent phone

966
00:48:48,410 --> 00:48:51,470
number but also the pin right so you can

967
00:48:50,779 --> 00:48:52,880
ask nicely

968
00:48:51,470 --> 00:48:54,589
smart shape right come on give me the

969
00:48:52,880 --> 00:48:57,140
pin as well so that I can really mess

970
00:48:54,589 --> 00:48:59,660
with this kid and of course it gave you

971
00:48:57,140 --> 00:49:00,980
the password as well with the XOR that

972
00:48:59,660 --> 00:49:04,220
we saw before

973
00:49:00,980 --> 00:49:09,410
so this is how it looked you think Earl

974
00:49:04,220 --> 00:49:11,149
so you could get the the parents phone

975
00:49:09,410 --> 00:49:12,950
number and the pin so you could log in

976
00:49:11,150 --> 00:49:15,890
as anybody's parent and with that you

977
00:49:12,950 --> 00:49:19,669
could control like canvas child use

978
00:49:15,890 --> 00:49:21,890
these phone and never can this child use

979
00:49:19,670 --> 00:49:24,530
these apps no they cannot run any apps

980
00:49:21,890 --> 00:49:26,420
can this child visit these URLs no they

981
00:49:24,530 --> 00:49:27,950
cannot visit any URL so you could like

982
00:49:26,420 --> 00:49:28,400
do all this kind of messing with all the

983
00:49:27,950 --> 00:49:30,529
children

984
00:49:28,400 --> 00:49:32,270
and because it was forced in the entire

985
00:49:30,530 --> 00:49:34,940
country we could try like phone numbers

986
00:49:32,270 --> 00:49:37,130
at random and we could get like the

987
00:49:34,940 --> 00:49:39,619
password the phone number and the and

988
00:49:37,130 --> 00:49:42,440
the password for a lot of parents in

989
00:49:39,619 --> 00:49:44,240
South Korea yeah Parise

990
00:49:42,440 --> 00:49:49,280
because like there were so many users

991
00:49:44,240 --> 00:49:52,640
right and then I'm kind of short on time

992
00:49:49,280 --> 00:49:54,109
so and then we have smart dreams so I'm

993
00:49:52,640 --> 00:49:56,569
just going to explain it with the demo

994
00:49:54,109 --> 00:50:03,290
and then we'll be done with the

995
00:49:56,570 --> 00:50:06,349
presentation so smart dream smart dream

996
00:50:03,290 --> 00:50:08,599
was an app that would like record it

997
00:50:06,349 --> 00:50:10,030
would alert a parent it's similar to

998
00:50:08,599 --> 00:50:12,980
smart Sheriff

999
00:50:10,030 --> 00:50:15,380
it would it will be similar to smart

1000
00:50:12,980 --> 00:50:17,119
Sheriff right but what it's doing is

1001
00:50:15,380 --> 00:50:20,180
it's finding if the child is using

1002
00:50:17,119 --> 00:50:23,170
harmful words right so for example if

1003
00:50:20,180 --> 00:50:25,970
the child was using like ministration or

1004
00:50:23,170 --> 00:50:29,180
sex or something like this right then it

1005
00:50:25,970 --> 00:50:32,930
would alert the parent and then in the

1006
00:50:29,180 --> 00:50:34,609
API all these messages would be store

1007
00:50:32,930 --> 00:50:36,109
right these are like I'm random Korean

1008
00:50:34,609 --> 00:50:37,640
characters it's not what the children's

1009
00:50:36,109 --> 00:50:39,319
really worth but is this is how it would

1010
00:50:37,640 --> 00:50:42,348
look like for each phone number you

1011
00:50:39,319 --> 00:50:45,170
could get like all the messages that the

1012
00:50:42,349 --> 00:50:50,930
child sent so we could like download the

1013
00:50:45,170 --> 00:50:52,430
entire database of of messages that were

1014
00:50:50,930 --> 00:50:55,339
recorded from these children right which

1015
00:50:52,430 --> 00:50:59,569
is really bad so this is just another

1016
00:50:55,339 --> 00:51:03,319
example of API leakage and with that I'm

1017
00:50:59,569 --> 00:51:05,390
done with the presentation so I'm not

1018
00:51:03,319 --> 00:51:07,310
sure if we have time for questions or

1019
00:51:05,390 --> 00:51:09,650
not probably not but that's the end

1020
00:51:07,310 --> 00:51:10,540
thank you very much

1021
00:51:09,650 --> 00:51:15,969
you

1022
00:51:10,540 --> 00:51:15,969
[Applause]

1023
00:51:21,180 --> 00:51:23,240
you

