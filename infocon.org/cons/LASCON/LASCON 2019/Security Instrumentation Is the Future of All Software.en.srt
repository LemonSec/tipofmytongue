1
00:00:09,300 --> 00:00:32,280
[Music]

2
00:00:34,790 --> 00:00:41,370
everybody really glad to be here so I'm

3
00:00:39,900 --> 00:00:48,690
gonna start today with a little bit of

4
00:00:41,370 --> 00:00:52,500
tough love these are statistics from

5
00:00:48,690 --> 00:00:54,420
September on application-layer attacks

6
00:00:52,500 --> 00:00:56,600
and I was like to start up my talks with

7
00:00:54,420 --> 00:00:58,559
this to give people a real feel for what

8
00:00:56,600 --> 00:01:01,260
applications security really looks like

9
00:00:58,559 --> 00:01:03,540
you can see your your chances of getting

10
00:01:01,260 --> 00:01:06,929
attacked with path reversal or sequel

11
00:01:03,540 --> 00:01:08,460
injection or XSS or better than half the

12
00:01:06,930 --> 00:01:11,220
number of applications that were not

13
00:01:08,460 --> 00:01:12,899
attacked and this is across tens of

14
00:01:11,220 --> 00:01:17,880
thousands of applications that we

15
00:01:12,899 --> 00:01:20,340
monitor your chance of if of any one

16
00:01:17,880 --> 00:01:22,500
application being attacked is a hundred

17
00:01:20,340 --> 00:01:25,170
percent we saw no applications that

18
00:01:22,500 --> 00:01:28,470
weren't attacked in September and it's

19
00:01:25,170 --> 00:01:31,740
pretty much the same every month so this

20
00:01:28,470 --> 00:01:33,360
is a little grim that's quite a lot of

21
00:01:31,740 --> 00:01:40,589
attack traffic across a lot of different

22
00:01:33,360 --> 00:01:42,330
categories of attacks and we've been

23
00:01:40,590 --> 00:01:45,179
trying to do something about the

24
00:01:42,330 --> 00:01:50,369
vulnerability side of the equation for a

25
00:01:45,179 --> 00:01:51,780
long time back in the early 2000s I was

26
00:01:50,369 --> 00:01:53,369
doing a lot of pen testing and code

27
00:01:51,780 --> 00:01:55,590
review I started a consulting company

28
00:01:53,369 --> 00:01:57,110
called aspect security and we averaged

29
00:01:55,590 --> 00:02:01,590
about twenty six point seven

30
00:01:57,110 --> 00:02:03,240
vulnerabilities per app shortly

31
00:02:01,590 --> 00:02:06,569
thereafter I wrote the first person they

32
00:02:03,240 --> 00:02:11,280
lost top ten and captured those

33
00:02:06,569 --> 00:02:12,450
vulnerabilities today average number of

34
00:02:11,280 --> 00:02:14,670
vulnerabilities per app is almost

35
00:02:12,450 --> 00:02:17,459
exactly the same twenty six point seven

36
00:02:14,670 --> 00:02:21,869
vulnerabilities per app that is a

37
00:02:17,459 --> 00:02:23,849
terrifying number if you were building

38
00:02:21,870 --> 00:02:26,550
airplanes and every time you did a

39
00:02:23,849 --> 00:02:28,799
safety check you came up with twenty six

40
00:02:26,550 --> 00:02:34,130
point seven safety problems an airplane

41
00:02:28,800 --> 00:02:37,590
you never fly but we trust applications

42
00:02:34,130 --> 00:02:41,579
almost without any reason to trust them

43
00:02:37,590 --> 00:02:44,560
who here banks online okay I see a bunch

44
00:02:41,580 --> 00:02:47,120
of hands the rest of your lies

45
00:02:44,560 --> 00:02:50,900
how much do you really know about the

46
00:02:47,120 --> 00:02:52,550
application that you're using to do your

47
00:02:50,900 --> 00:02:56,420
online banking that you've trusted with

48
00:02:52,550 --> 00:02:58,340
your money do you know who wrote it or

49
00:02:56,420 --> 00:03:00,380
how they were trained or what libraries

50
00:02:58,340 --> 00:03:02,720
they used or what security mechanisms

51
00:03:00,380 --> 00:03:05,480
are there or how they tested it what

52
00:03:02,720 --> 00:03:08,030
tools they used to test it what do you

53
00:03:05,480 --> 00:03:09,859
know you don't know anything about that

54
00:03:08,030 --> 00:03:12,260
thing but you trust it with all your

55
00:03:09,860 --> 00:03:14,270
money and you trust web applications

56
00:03:12,260 --> 00:03:16,910
with your health care your government

57
00:03:14,270 --> 00:03:20,600
your defense almost everything your

58
00:03:16,910 --> 00:03:21,950
social whatever almost everything is on

59
00:03:20,600 --> 00:03:23,239
the web these days and we're trusting

60
00:03:21,950 --> 00:03:26,209
these applications that we have no

61
00:03:23,240 --> 00:03:28,850
reason to trust the evidence is pretty

62
00:03:26,210 --> 00:03:30,980
clear that the app web applications and

63
00:03:28,850 --> 00:03:34,640
web api's are not tremendously secure in

64
00:03:30,980 --> 00:03:38,119
fact we stink at writing web apps I

65
00:03:34,640 --> 00:03:41,899
helped to start a wasp in 2000 and you

66
00:03:38,120 --> 00:03:43,430
know it's one in 2002 and we were

67
00:03:41,900 --> 00:03:45,560
struggling with the same problems but

68
00:03:43,430 --> 00:03:49,220
and now it's been you know it's coming

69
00:03:45,560 --> 00:03:51,410
up on 20 years and nothing's changed and

70
00:03:49,220 --> 00:03:54,980
so I wanted I wanted to give a little

71
00:03:51,410 --> 00:03:59,109
bit of history into this problem way

72
00:03:54,980 --> 00:04:01,130
back in you know the early 80s

73
00:03:59,110 --> 00:04:02,750
government was working on government

74
00:04:01,130 --> 00:04:04,579
security standards they were wrestling

75
00:04:02,750 --> 00:04:07,130
with these same problems if you look at

76
00:04:04,580 --> 00:04:09,080
the orange book they're looking at the

77
00:04:07,130 --> 00:04:11,000
problem how do we generate assurance in

78
00:04:09,080 --> 00:04:12,920
the systems that were building my first

79
00:04:11,000 --> 00:04:14,840
job was with a navy contract where we

80
00:04:12,920 --> 00:04:18,500
build a high assurance system for the US

81
00:04:14,840 --> 00:04:19,880
Navy and we started with a formal model

82
00:04:18,500 --> 00:04:22,760
of what security was supposed to look

83
00:04:19,880 --> 00:04:25,280
like we had traceability to requirements

84
00:04:22,760 --> 00:04:29,599
and a top level spec in a detailed spec

85
00:04:25,280 --> 00:04:31,039
all the way through to test cases and we

86
00:04:29,600 --> 00:04:33,590
don't have anywhere near that level of

87
00:04:31,040 --> 00:04:35,600
assurance today in the systems that

88
00:04:33,590 --> 00:04:37,489
we're building so in a lot of ways

89
00:04:35,600 --> 00:04:39,200
things are going backwards then along

90
00:04:37,490 --> 00:04:40,850
over the years I worked on a number of

91
00:04:39,200 --> 00:04:42,260
different things I worked on something

92
00:04:40,850 --> 00:04:44,990
called the system security engineering

93
00:04:42,260 --> 00:04:48,409
CMM which was a maturity model for

94
00:04:44,990 --> 00:04:50,350
helping to build secure systems didn't

95
00:04:48,410 --> 00:04:52,760
change

96
00:04:50,350 --> 00:04:54,430
keep going forward I wrote the OS top

97
00:04:52,760 --> 00:04:57,460
ten 2002

98
00:04:54,430 --> 00:04:58,180
got a lot of awareness didn't change a

99
00:04:57,460 --> 00:05:00,549
damn thing

100
00:04:58,180 --> 00:05:02,830
hola stop ten today still has the same

101
00:05:00,550 --> 00:05:07,870
stuff in it that was in it in 2002

102
00:05:02,830 --> 00:05:09,719
basically been through pen testing and

103
00:05:07,870 --> 00:05:13,870
code review and static analysis and

104
00:05:09,720 --> 00:05:15,520
laughs and besom and open Sam things

105
00:05:13,870 --> 00:05:18,820
like that now we're moving into deficit

106
00:05:15,520 --> 00:05:20,950
cops okay great I'm not super optimistic

107
00:05:18,820 --> 00:05:23,590
I love DevOps and I like the idea of

108
00:05:20,950 --> 00:05:24,789
deficit cops but I'm not super

109
00:05:23,590 --> 00:05:27,280
optimistic about whether we're gonna

110
00:05:24,790 --> 00:05:30,250
make a change because nothing has

111
00:05:27,280 --> 00:05:35,080
changed really

112
00:05:30,250 --> 00:05:37,480
I blame what I call tool soup we don't

113
00:05:35,080 --> 00:05:40,240
have enough resources to do the job of

114
00:05:37,480 --> 00:05:41,830
application security manually I love

115
00:05:40,240 --> 00:05:43,270
manual code of view and pen testing I

116
00:05:41,830 --> 00:05:46,419
actually really like code review I'm

117
00:05:43,270 --> 00:05:48,099
weird that way but I find it super

118
00:05:46,420 --> 00:05:51,520
effective at finding really critical

119
00:05:48,100 --> 00:05:54,430
vulnerabilities but it doesn't scale at

120
00:05:51,520 --> 00:05:55,810
all so we've got to automate if we want

121
00:05:54,430 --> 00:05:57,190
to get out of this problem we got to

122
00:05:55,810 --> 00:06:00,280
automate it there's no other way

123
00:05:57,190 --> 00:06:02,980
possible you know there's something like

124
00:06:00,280 --> 00:06:05,109
21 million developers in the world all

125
00:06:02,980 --> 00:06:06,490
writing code and a tiny handful of

126
00:06:05,110 --> 00:06:08,890
security folks that are actually working

127
00:06:06,490 --> 00:06:11,350
on securing that code will never get

128
00:06:08,890 --> 00:06:13,510
will never get that fixed but we use all

129
00:06:11,350 --> 00:06:16,300
these these kinds of tools and to run a

130
00:06:13,510 --> 00:06:18,190
modern apps tech program you kind of

131
00:06:16,300 --> 00:06:19,990
have to do all these things right

132
00:06:18,190 --> 00:06:21,130
you gotta run SAS and got to do tests

133
00:06:19,990 --> 00:06:22,180
you got to do pen testing you gotta do

134
00:06:21,130 --> 00:06:23,740
code review gotta run software

135
00:06:22,180 --> 00:06:26,680
composition analysis you got to do

136
00:06:23,740 --> 00:06:30,910
fuzzing you got to do laughs and ng webs

137
00:06:26,680 --> 00:06:32,470
an IPS and so on no one no organization

138
00:06:30,910 --> 00:06:34,570
can effectively run all these tools

139
00:06:32,470 --> 00:06:37,690
because they're all disconnected and

140
00:06:34,570 --> 00:06:41,349
frankly they all have a ton of errors

141
00:06:37,690 --> 00:06:44,860
anybody have false positives in their

142
00:06:41,350 --> 00:06:47,710
security scan results yeah they're super

143
00:06:44,860 --> 00:06:49,990
frustrating you probably also have a ton

144
00:06:47,710 --> 00:06:51,549
of false negatives that you just can't

145
00:06:49,990 --> 00:06:53,110
see because the false negative is not

146
00:06:51,550 --> 00:06:57,100
something that shows up in your face

147
00:06:53,110 --> 00:07:00,040
it's just not found so these tools make

148
00:06:57,100 --> 00:07:01,540
errors on both sides of false positives

149
00:07:00,040 --> 00:07:02,830
and false negatives because they don't

150
00:07:01,540 --> 00:07:05,080
have complete information

151
00:07:02,830 --> 00:07:05,909
static tools can only see the source

152
00:07:05,080 --> 00:07:07,919
code that's

153
00:07:05,910 --> 00:07:10,770
one weird lens of looking at an

154
00:07:07,920 --> 00:07:12,390
application dynamic tools can only see

155
00:07:10,770 --> 00:07:14,760
HTTP traffic so they get a different

156
00:07:12,390 --> 00:07:16,770
view of the application very different

157
00:07:14,760 --> 00:07:18,210
in fact I think you'll find your static

158
00:07:16,770 --> 00:07:23,010
tools and your dynamic tools are finding

159
00:07:18,210 --> 00:07:25,620
totally different stuff library analysis

160
00:07:23,010 --> 00:07:26,969
tools or SCA tools they can only see the

161
00:07:25,620 --> 00:07:28,290
libraries they can't see anything else

162
00:07:26,970 --> 00:07:29,700
of how this application works so you

163
00:07:28,290 --> 00:07:33,240
don't know if those vulnerabilities are

164
00:07:29,700 --> 00:07:34,920
real all these tools have a different

165
00:07:33,240 --> 00:07:37,500
view of the application that's why they

166
00:07:34,920 --> 00:07:39,450
make so many mistakes and because they

167
00:07:37,500 --> 00:07:41,970
make so many mistakes we have to have

168
00:07:39,450 --> 00:07:44,940
experts involved because only experts

169
00:07:41,970 --> 00:07:47,520
can really resolve those problems and if

170
00:07:44,940 --> 00:07:50,280
you have experts involved guess what you

171
00:07:47,520 --> 00:07:53,299
can't scale because there's not enough

172
00:07:50,280 --> 00:07:57,210
experts so we're fundamentally stuck I

173
00:07:53,300 --> 00:08:00,720
call this oh I want to look at one other

174
00:07:57,210 --> 00:08:03,599
thing quick so I want you to think about

175
00:08:00,720 --> 00:08:05,730
the cost in your organization to assess

176
00:08:03,600 --> 00:08:08,100
one application and your numbers might

177
00:08:05,730 --> 00:08:11,280
vary slightly but if you're gonna run

178
00:08:08,100 --> 00:08:12,990
SAST and DAST and SCA you're gonna have

179
00:08:11,280 --> 00:08:15,150
a significant amount of cost every time

180
00:08:12,990 --> 00:08:16,650
you run a scan there's gonna be a bunch

181
00:08:15,150 --> 00:08:18,390
of work to run the scan and a bunch to

182
00:08:16,650 --> 00:08:19,620
work with triage it and if you want to

183
00:08:18,390 --> 00:08:21,570
count the work to remediate those

184
00:08:19,620 --> 00:08:23,130
vulnerabilities you can count that but

185
00:08:21,570 --> 00:08:25,770
there's a ton of work and not just

186
00:08:23,130 --> 00:08:30,390
license cost of a tool but the cost to

187
00:08:25,770 --> 00:08:33,360
run that thing is 80% of the cost of

188
00:08:30,390 --> 00:08:35,069
that and so look if you're doing scans

189
00:08:33,360 --> 00:08:38,310
once a year you're gonna have one big

190
00:08:35,070 --> 00:08:40,740
bump of cost when you run that scan for

191
00:08:38,309 --> 00:08:42,089
that app if you're doing scans every

192
00:08:40,740 --> 00:08:43,560
month you're gonna have a different

193
00:08:42,090 --> 00:08:44,610
model it's you know you've slightly less

194
00:08:43,559 --> 00:08:46,589
work because hopefully you'll get a

195
00:08:44,610 --> 00:08:48,300
little bit more efficient at it but

196
00:08:46,590 --> 00:08:49,950
you're gonna add up cost and if you're

197
00:08:48,300 --> 00:08:51,180
doing weekly scans I don't really know

198
00:08:49,950 --> 00:08:52,800
anybody who's doing daily scans

199
00:08:51,180 --> 00:08:55,560
effectively because the cost is too much

200
00:08:52,800 --> 00:08:57,540
you could possibly triage all the output

201
00:08:55,560 --> 00:08:59,930
from those tools that fast but the cost

202
00:08:57,540 --> 00:09:02,969
goes up as you increase the velocity of

203
00:08:59,930 --> 00:09:05,000
software and guess what everybody's

204
00:09:02,970 --> 00:09:07,490
increasing the velocity of software

205
00:09:05,000 --> 00:09:10,410
we're rollin I mean I work for a DevOps

206
00:09:07,490 --> 00:09:14,690
organization we do six or seven releases

207
00:09:10,410 --> 00:09:16,790
a day so you know we don't have the

208
00:09:14,690 --> 00:09:19,100
the time to run those tools as part of

209
00:09:16,790 --> 00:09:24,259
our standard pipeline so we're kind of

210
00:09:19,100 --> 00:09:26,779
stuck and the outcomes that we're

211
00:09:24,259 --> 00:09:28,610
generating are really ridiculously weak

212
00:09:26,779 --> 00:09:31,399
and I want you to focus on the outcomes

213
00:09:28,610 --> 00:09:34,040
of app sec because focusing on the

214
00:09:31,399 --> 00:09:36,170
processes just means you're doing a

215
00:09:34,040 --> 00:09:38,170
whole bunch of stuff right and you guys

216
00:09:36,170 --> 00:09:40,969
are probably doing training and

217
00:09:38,170 --> 00:09:44,389
requirements and architecture reviews

218
00:09:40,970 --> 00:09:46,610
and pen testing code review all this all

219
00:09:44,389 --> 00:09:48,889
these activities but what really matters

220
00:09:46,610 --> 00:09:51,500
is the outcomes and here's how I

221
00:09:48,889 --> 00:09:53,240
visualize it so on the Left dimension is

222
00:09:51,500 --> 00:09:55,550
your application inventory I usually

223
00:09:53,240 --> 00:09:57,800
think it at an organization scale

224
00:09:55,550 --> 00:10:00,229
because anybody can come in and do some

225
00:09:57,800 --> 00:10:01,550
work on one application and go home and

226
00:10:00,230 --> 00:10:02,720
feel good like I found some

227
00:10:01,550 --> 00:10:05,779
vulnerabilities I made the world a

228
00:10:02,720 --> 00:10:08,529
better place today but I want you to

229
00:10:05,779 --> 00:10:11,660
focus on the whole portfolio because

230
00:10:08,529 --> 00:10:14,959
most organizations are only looking at a

231
00:10:11,660 --> 00:10:16,879
small subset of the portfolio anybody's

232
00:10:14,959 --> 00:10:18,469
organization prioritize their portfolio

233
00:10:16,879 --> 00:10:19,639
like you've got the critical apps and

234
00:10:18,470 --> 00:10:21,889
then a bunch of others that never get

235
00:10:19,639 --> 00:10:24,829
looked at most organizations are only

236
00:10:21,889 --> 00:10:26,180
looking at like 10% of their portfolio I

237
00:10:24,829 --> 00:10:29,209
was talking a major financial

238
00:10:26,180 --> 00:10:31,339
organization see so in on Wall Street

239
00:10:29,209 --> 00:10:32,839
and I asked about that he said well

240
00:10:31,339 --> 00:10:34,759
we're doing about 10% I was like well

241
00:10:32,839 --> 00:10:35,899
what about the other ninety he goes well

242
00:10:34,759 --> 00:10:40,730
they're one click away from the Wall

243
00:10:35,899 --> 00:10:42,560
Street Journal that's the risk so I feel

244
00:10:40,730 --> 00:10:44,569
like we really need to look at the whole

245
00:10:42,560 --> 00:10:47,779
portfolio at some level all of those

246
00:10:44,569 --> 00:10:50,360
applications are potential gateway into

247
00:10:47,779 --> 00:10:52,220
your enterprise and a lot of the

248
00:10:50,360 --> 00:10:53,389
breaches that we've read about target

249
00:10:52,220 --> 00:10:56,060
and so on

250
00:10:53,389 --> 00:10:58,160
they're not through the critical apps

251
00:10:56,060 --> 00:11:00,138
they're through some little web

252
00:10:58,160 --> 00:11:03,490
application that gets compromised and

253
00:11:00,139 --> 00:11:06,050
becomes a gateway into your enterprise

254
00:11:03,490 --> 00:11:08,360
so on the left is like how much of the

255
00:11:06,050 --> 00:11:12,170
portfolio are you covering and at the

256
00:11:08,360 --> 00:11:13,970
bottom is have you covered all the

257
00:11:12,170 --> 00:11:16,399
vulnerabilities that you can find in dev

258
00:11:13,970 --> 00:11:17,870
and then in production what are you

259
00:11:16,399 --> 00:11:19,100
doing in a production to make sure that

260
00:11:17,870 --> 00:11:21,190
you can see who's attack

261
00:11:19,100 --> 00:11:23,630
you and prevent them from exploiting you

262
00:11:21,190 --> 00:11:27,130
there's a lot of talk about DevOps and

263
00:11:23,630 --> 00:11:29,900
dev sack ops and almost all of it just

264
00:11:27,130 --> 00:11:33,260
focuses on death people talking about

265
00:11:29,900 --> 00:11:34,600
shift left that's weird to me because we

266
00:11:33,260 --> 00:11:37,100
definitely this shift left but

267
00:11:34,600 --> 00:11:40,220
organizations need to shift right as

268
00:11:37,100 --> 00:11:42,350
well or extend right because in

269
00:11:40,220 --> 00:11:44,840
operations that's where you can see

270
00:11:42,350 --> 00:11:47,030
attacks and prevent attacks and we're

271
00:11:44,840 --> 00:11:48,830
really weak there so when I look at what

272
00:11:47,030 --> 00:11:50,300
most organizations are doing I see you

273
00:11:48,830 --> 00:11:52,820
know some manual pen testing and code

274
00:11:50,300 --> 00:11:54,979
review on the critical apps and then

275
00:11:52,820 --> 00:11:57,080
some automated scanning of some

276
00:11:54,980 --> 00:11:59,330
percentage of the portfolio you can draw

277
00:11:57,080 --> 00:12:02,360
your box as big as it should be but

278
00:11:59,330 --> 00:12:03,860
those scans are pretty weak and the pen

279
00:12:02,360 --> 00:12:05,830
tests don't get applied very broadly and

280
00:12:03,860 --> 00:12:08,030
frankly they test for the same stuff

281
00:12:05,830 --> 00:12:10,400
because they're not accurate right you

282
00:12:08,030 --> 00:12:12,740
want to scan for pet for I don't know

283
00:12:10,400 --> 00:12:14,150
sequel injection or something but then

284
00:12:12,740 --> 00:12:16,670
you need to come back into a pen test

285
00:12:14,150 --> 00:12:18,920
for sequel injection too because your

286
00:12:16,670 --> 00:12:20,329
scans weren't really very accurate so

287
00:12:18,920 --> 00:12:22,430
we're wasting effort up here because

288
00:12:20,330 --> 00:12:25,250
we're duplicating stuff and then there's

289
00:12:22,430 --> 00:12:27,050
a ton of space that's just missed these

290
00:12:25,250 --> 00:12:30,680
are the outcomes that were generating

291
00:12:27,050 --> 00:12:32,180
this whole thing should be green that's

292
00:12:30,680 --> 00:12:35,630
really the outcome that you want to

293
00:12:32,180 --> 00:12:36,949
generate is green all your all your

294
00:12:35,630 --> 00:12:38,960
vulnerabilities are detected and dev

295
00:12:36,950 --> 00:12:41,390
across your portfolio and in production

296
00:12:38,960 --> 00:12:44,990
you've got protection against all those

297
00:12:41,390 --> 00:12:46,580
applications being exploited and you

298
00:12:44,990 --> 00:12:49,040
might say well Jeff why don't we have to

299
00:12:46,580 --> 00:12:51,770
do both of those things if I'm to fund

300
00:12:49,040 --> 00:12:53,349
creating secure code who cares

301
00:12:51,770 --> 00:12:55,819
in production like why do I need

302
00:12:53,350 --> 00:12:58,430
identify attackers I'm secure already

303
00:12:55,820 --> 00:12:59,930
and maybe vice versa you might say hey

304
00:12:58,430 --> 00:13:01,910
if I'm protected against me exploit in

305
00:12:59,930 --> 00:13:04,609
production maybe I'll just write code

306
00:13:01,910 --> 00:13:06,439
however the hell I want but that's not

307
00:13:04,610 --> 00:13:08,060
how the real world works it's important

308
00:13:06,440 --> 00:13:11,720
for a number of reasons to do both of

309
00:13:08,060 --> 00:13:13,369
these things and there are a number of

310
00:13:11,720 --> 00:13:16,280
scenarios where you just can't respond

311
00:13:13,370 --> 00:13:17,800
back and fast enough and library

312
00:13:16,280 --> 00:13:20,270
vulnerabilities are a good example

313
00:13:17,800 --> 00:13:24,620
anybody got insecure libraries in any of

314
00:13:20,270 --> 00:13:26,360
their apps that is the simplest problem

315
00:13:24,620 --> 00:13:27,980
in app stack it was actually very

316
00:13:26,360 --> 00:13:30,240
controversial when I added that to the

317
00:13:27,980 --> 00:13:33,250
ah stop ten

318
00:13:30,240 --> 00:13:34,990
but it seems like the simplest thing in

319
00:13:33,250 --> 00:13:37,000
the world don't use libraries that have

320
00:13:34,990 --> 00:13:39,190
known vulnerabilities in them don't use

321
00:13:37,000 --> 00:13:41,620
a gas tank in your car that explodes

322
00:13:39,190 --> 00:13:44,529
instantly yeah

323
00:13:41,620 --> 00:13:46,300
well keeping that open source up to date

324
00:13:44,529 --> 00:13:47,589
and using versions of libraries that

325
00:13:46,300 --> 00:13:48,878
don't have vulnerabilities should be the

326
00:13:47,589 --> 00:13:50,139
easiest thing in the world it's a lot

327
00:13:48,879 --> 00:13:52,089
easier than some of the other problems

328
00:13:50,139 --> 00:13:53,529
we have to tackle in a sec but it's

329
00:13:52,089 --> 00:14:00,279
still a challenge for a lot of

330
00:13:53,529 --> 00:14:04,569
organizations so when i zoom out on this

331
00:14:00,279 --> 00:14:06,459
problem i think the economics are broken

332
00:14:04,569 --> 00:14:08,259
and i want you to think about this not

333
00:14:06,459 --> 00:14:11,829
just for your own organization but for

334
00:14:08,259 --> 00:14:15,430
the world in general like we are

335
00:14:11,829 --> 00:14:19,000
building code and a incredible rate and

336
00:14:15,430 --> 00:14:22,239
it's far outstripping the ability you

337
00:14:19,000 --> 00:14:24,220
know our security abilities and until we

338
00:14:22,240 --> 00:14:25,540
fix these economics nothing's going to

339
00:14:24,220 --> 00:14:28,240
get better we got to do something

340
00:14:25,540 --> 00:14:32,379
dramatic to change this these economics

341
00:14:28,240 --> 00:14:33,189
or we're cooked and things are just

342
00:14:32,379 --> 00:14:41,319
going to stay the way they are for

343
00:14:33,189 --> 00:14:44,620
another 20 years so I have this idea

344
00:14:41,319 --> 00:14:46,180
that what we're really trying to do in a

345
00:14:44,620 --> 00:14:48,040
lot of our activities like all the

346
00:14:46,180 --> 00:14:49,779
things that we do in the SDLC and all

347
00:14:48,040 --> 00:14:52,240
the testing and scanning all the things

348
00:14:49,779 --> 00:14:55,240
we do eventually we have to get

349
00:14:52,240 --> 00:14:56,290
development to do something right we

350
00:14:55,240 --> 00:14:57,399
have to get them to change the code

351
00:14:56,290 --> 00:14:59,349
somehow to either take out

352
00:14:57,399 --> 00:15:00,790
vulnerabilities or put in security

353
00:14:59,350 --> 00:15:03,250
controls or whatever so we're trying to

354
00:15:00,790 --> 00:15:05,469
take all this stuff that we do to

355
00:15:03,250 --> 00:15:08,380
influence development to make the code

356
00:15:05,470 --> 00:15:09,670
more secure right and it's not really

357
00:15:08,380 --> 00:15:11,800
working we're only getting a tiny

358
00:15:09,670 --> 00:15:12,969
percentage of what we want actually into

359
00:15:11,800 --> 00:15:14,670
production I would love to see

360
00:15:12,970 --> 00:15:17,350
applications that have some assurance

361
00:15:14,670 --> 00:15:20,199
like before I use a web application I'd

362
00:15:17,350 --> 00:15:23,980
love to know hey how was this thing

363
00:15:20,199 --> 00:15:25,809
tested why should I trust you you know

364
00:15:23,980 --> 00:15:27,279
my investment advisor why should I trust

365
00:15:25,809 --> 00:15:29,649
your online application

366
00:15:27,279 --> 00:15:32,050
I'd like some evidence about that but we

367
00:15:29,649 --> 00:15:33,639
don't have it today and we're not going

368
00:15:32,050 --> 00:15:35,319
to get it because we're trying to make

369
00:15:33,639 --> 00:15:37,329
development do all these things that

370
00:15:35,319 --> 00:15:39,719
frankly they're not really inclined to

371
00:15:37,329 --> 00:15:39,719
do so

372
00:15:40,700 --> 00:15:45,660
there's a lot of talk in the dev sack

373
00:15:43,470 --> 00:15:49,500
ops community about security as code

374
00:15:45,660 --> 00:15:52,050
anybody heard that yeah the idea is that

375
00:15:49,500 --> 00:15:55,020
we take the things that we do in

376
00:15:52,050 --> 00:15:56,939
security in app sack specifically and

377
00:15:55,020 --> 00:15:59,579
turn them into codes so that we can run

378
00:15:56,940 --> 00:16:02,820
them at some point either part of our

379
00:15:59,580 --> 00:16:06,240
pipeline or part of the application and

380
00:16:02,820 --> 00:16:07,440
automate them effectively and when I

381
00:16:06,240 --> 00:16:09,090
think about it you know there's

382
00:16:07,440 --> 00:16:10,500
development that's working on business

383
00:16:09,090 --> 00:16:11,850
code they're working on functions and

384
00:16:10,500 --> 00:16:14,130
features that are part of the app in

385
00:16:11,850 --> 00:16:15,510
them there's security code that we want

386
00:16:14,130 --> 00:16:17,550
to run and some of that security code is

387
00:16:15,510 --> 00:16:20,189
defenses some of that security code is

388
00:16:17,550 --> 00:16:23,910
testing code and some of that is

389
00:16:20,190 --> 00:16:26,820
monitoring in production that's code

390
00:16:23,910 --> 00:16:29,280
that we need to get into the application

391
00:16:26,820 --> 00:16:31,020
into our software but we're trying to

392
00:16:29,280 --> 00:16:32,610
take that code and we're trying push it

393
00:16:31,020 --> 00:16:34,230
in development or make development do it

394
00:16:32,610 --> 00:16:36,360
and it hasn't ever been very effective

395
00:16:34,230 --> 00:16:38,640
so it occurred to me what if there was a

396
00:16:36,360 --> 00:16:40,530
way that we could get that security code

397
00:16:38,640 --> 00:16:43,860
into production without going through

398
00:16:40,530 --> 00:16:47,160
development a different path for getting

399
00:16:43,860 --> 00:16:48,540
that security code into our apps it's

400
00:16:47,160 --> 00:16:50,040
worth thinking about right because we're

401
00:16:48,540 --> 00:16:52,079
pretty terrible at getting it's not

402
00:16:50,040 --> 00:16:54,900
working the way we're doing it so maybe

403
00:16:52,080 --> 00:16:56,700
there's an alternative idea so I want to

404
00:16:54,900 --> 00:16:59,189
tell you about security instrumentation

405
00:16:56,700 --> 00:17:00,570
and I'm going to use a pen testing

406
00:16:59,190 --> 00:17:03,840
example to start and then we'll get into

407
00:17:00,570 --> 00:17:05,339
details of instrumentation you know how

408
00:17:03,840 --> 00:17:06,870
to you guys know how to pen test write

409
00:17:05,339 --> 00:17:08,490
someone wants to scribe pen testing to

410
00:17:06,869 --> 00:17:11,280
me is looking up the showerhead to find

411
00:17:08,490 --> 00:17:16,829
a problem in the water heater and it's

412
00:17:11,280 --> 00:17:19,410
like that you've got your tools may be

413
00:17:16,829 --> 00:17:21,780
using zap or burp or something and your

414
00:17:19,410 --> 00:17:22,920
pen testing web application you're

415
00:17:21,780 --> 00:17:26,040
trying to see if there's no nura

416
00:17:22,920 --> 00:17:28,170
bilities in there and all you can see is

417
00:17:26,040 --> 00:17:30,120
the request that you send to the app and

418
00:17:28,170 --> 00:17:32,790
then the response that comes back from

419
00:17:30,120 --> 00:17:34,409
that application and you know sometimes

420
00:17:32,790 --> 00:17:35,610
it's going to come back with a 500 error

421
00:17:34,410 --> 00:17:36,990
sometimes it's going to come back with a

422
00:17:35,610 --> 00:17:38,340
stack trace sometimes you're gonna

423
00:17:36,990 --> 00:17:40,410
actually get a vulnerability and you'll

424
00:17:38,340 --> 00:17:41,399
see something in your browser like you

425
00:17:40,410 --> 00:17:44,160
know you steal the data out of the

426
00:17:41,400 --> 00:17:46,200
database whatever but often it's very

427
00:17:44,160 --> 00:17:47,760
difficult to tell even if you've found a

428
00:17:46,200 --> 00:17:52,080
vulnerability and you got to poke around

429
00:17:47,760 --> 00:17:53,410
forever to do it so this problem doesn't

430
00:17:52,080 --> 00:17:55,480
really scale very well it

431
00:17:53,410 --> 00:17:58,330
wires experts it's not super accurate

432
00:17:55,480 --> 00:18:01,900
and doesn't generate great coverage and

433
00:17:58,330 --> 00:18:05,470
it's slow so once you imagine how that

434
00:18:01,900 --> 00:18:07,030
changes if you can get a an agent inside

435
00:18:05,470 --> 00:18:09,970
the application like imagine you had a

436
00:18:07,030 --> 00:18:12,310
buddy that was inside the application as

437
00:18:09,970 --> 00:18:15,420
it's running they could observe what

438
00:18:12,310 --> 00:18:17,230
you're doing from inside the application

439
00:18:15,420 --> 00:18:18,520
instead of less so if you're thinking in

440
00:18:17,230 --> 00:18:20,500
the real world like if you're a pen

441
00:18:18,520 --> 00:18:22,900
tester of a bank and you're throwing

442
00:18:20,500 --> 00:18:27,730
rocks at the outside of the bank and

443
00:18:22,900 --> 00:18:29,230
you're trying to hit the safe it would

444
00:18:27,730 --> 00:18:31,000
really help if you had someone inside

445
00:18:29,230 --> 00:18:33,370
the bank to watch where your rocks were

446
00:18:31,000 --> 00:18:39,520
going tell you what the reaction is and

447
00:18:33,370 --> 00:18:41,260
so on so imagine if you had someone

448
00:18:39,520 --> 00:18:43,629
inside you wouldn't even really mean to

449
00:18:41,260 --> 00:18:46,930
do security testing you could just use

450
00:18:43,630 --> 00:18:49,210
the application normally and you could

451
00:18:46,930 --> 00:18:50,440
see what's going on inside the

452
00:18:49,210 --> 00:18:52,690
application you could see where things

453
00:18:50,440 --> 00:18:55,180
are misconfigured you could see where

454
00:18:52,690 --> 00:18:59,050
sequel queries aren't properly

455
00:18:55,180 --> 00:19:01,120
parameterised you could see where tokens

456
00:18:59,050 --> 00:19:07,149
aren't used to protect transactions and

457
00:19:01,120 --> 00:19:09,850
so on so for example you could see if a

458
00:19:07,150 --> 00:19:11,080
query was taking untrusted data and

459
00:19:09,850 --> 00:19:13,060
putting it into the query without

460
00:19:11,080 --> 00:19:16,090
escaping it or prioritizing it you could

461
00:19:13,060 --> 00:19:17,770
just see that and report it back so you

462
00:19:16,090 --> 00:19:19,540
wouldn't have to be an expert tester you

463
00:19:17,770 --> 00:19:22,030
could just be you know a normal

464
00:19:19,540 --> 00:19:23,770
developer and you can get all the

465
00:19:22,030 --> 00:19:24,639
details of that vulnerability back from

466
00:19:23,770 --> 00:19:26,379
your buddy

467
00:19:24,640 --> 00:19:28,900
inside the application he could send you

468
00:19:26,380 --> 00:19:31,540
hey on this exact line of code with

469
00:19:28,900 --> 00:19:34,180
these parameters this stack trace all

470
00:19:31,540 --> 00:19:36,129
the details of that vulnerability this

471
00:19:34,180 --> 00:19:38,140
URL this HTTP request all that stuff

472
00:19:36,130 --> 00:19:39,490
could come back the same thing for you

473
00:19:38,140 --> 00:19:41,650
know weak encryption algorithms and

474
00:19:39,490 --> 00:19:44,170
other things so this idea of getting

475
00:19:41,650 --> 00:19:46,390
inside the application is really

476
00:19:44,170 --> 00:19:48,460
powerful it's kind of what we're trying

477
00:19:46,390 --> 00:19:50,080
to do when we're doing pen testing and

478
00:19:48,460 --> 00:19:52,000
code review at the same time you're

479
00:19:50,080 --> 00:19:54,550
trying to imagine what's going on inside

480
00:19:52,000 --> 00:19:58,740
the application but what if we could

481
00:19:54,550 --> 00:20:00,760
just be there so want to talk about

482
00:19:58,740 --> 00:20:03,390
instrumentation generally

483
00:20:00,760 --> 00:20:06,370
instrumentation is the idea of adding

484
00:20:03,390 --> 00:20:09,220
measuring devices to

485
00:20:06,370 --> 00:20:11,590
complex system and we instrument complex

486
00:20:09,220 --> 00:20:14,200
things in our world we instrument cars

487
00:20:11,590 --> 00:20:16,449
and airplanes and factories and space

488
00:20:14,200 --> 00:20:18,010
shuttles like crazy because they're

489
00:20:16,450 --> 00:20:20,530
super complicated and there's no other

490
00:20:18,010 --> 00:20:22,390
way to know what's going inside them but

491
00:20:20,530 --> 00:20:25,660
software which is arguably the most

492
00:20:22,390 --> 00:20:28,420
complex thing man has ever created has

493
00:20:25,660 --> 00:20:30,880
terrible instrumentation log files give

494
00:20:28,420 --> 00:20:34,210
you almost no visibility to what's going

495
00:20:30,880 --> 00:20:35,160
on inside or running application that's

496
00:20:34,210 --> 00:20:39,429
nuts

497
00:20:35,160 --> 00:20:42,309
so this whole talk is about how we can

498
00:20:39,429 --> 00:20:44,290
use instrumentation to get better

499
00:20:42,309 --> 00:20:45,910
visibility inside the software that

500
00:20:44,290 --> 00:20:47,500
we're running and I think it's really

501
00:20:45,910 --> 00:20:52,360
the key to doing applications security

502
00:20:47,500 --> 00:20:55,720
better my first experiments in

503
00:20:52,360 --> 00:21:00,189
instrumentation were as back in 2009 or

504
00:20:55,720 --> 00:21:04,000
so and I wrote an instrumented version

505
00:21:00,190 --> 00:21:05,800
of the my sequel driver in Java and this

506
00:21:04,000 --> 00:21:08,920
is an example all I did was I just added

507
00:21:05,800 --> 00:21:12,280
some code to simply tell me when people

508
00:21:08,920 --> 00:21:14,980
were using non parameterised queries and

509
00:21:12,280 --> 00:21:16,840
I recompile the driver deployed it with

510
00:21:14,980 --> 00:21:19,990
any application you want I was using

511
00:21:16,840 --> 00:21:21,730
webgoat or something but when you deploy

512
00:21:19,990 --> 00:21:23,230
with this driver all of a sudden you

513
00:21:21,730 --> 00:21:25,960
just use the application normally and

514
00:21:23,230 --> 00:21:29,980
you get a detailed list of every single

515
00:21:25,960 --> 00:21:32,290
query that's using that's not properly

516
00:21:29,980 --> 00:21:34,840
parameterised now not all of these were

517
00:21:32,290 --> 00:21:39,100
vulnerable but they might be against

518
00:21:34,840 --> 00:21:40,389
your standard but these are all it's

519
00:21:39,100 --> 00:21:41,678
interesting and you can get a ton of

520
00:21:40,390 --> 00:21:43,570
information you can get the full stack

521
00:21:41,679 --> 00:21:45,550
trace you can get the HTTP request that

522
00:21:43,570 --> 00:21:47,139
caused this to happen you can get the

523
00:21:45,550 --> 00:21:49,090
currently logged in user you can get a

524
00:21:47,140 --> 00:21:51,040
ton of stuff just by instrumenting a

525
00:21:49,090 --> 00:21:52,178
driver like this and if the kind of

526
00:21:51,040 --> 00:21:53,230
light switch flipped on I was like wow

527
00:21:52,179 --> 00:21:54,970
this is fantastic

528
00:21:53,230 --> 00:21:56,500
I just want to instrument my app to get

529
00:21:54,970 --> 00:21:58,179
the information I need so they don't

530
00:21:56,500 --> 00:22:00,640
have to waste so much damn time code

531
00:21:58,179 --> 00:22:02,710
reviewing and pen testing and so I

532
00:22:00,640 --> 00:22:05,530
started heading down that road and I

533
00:22:02,710 --> 00:22:07,809
discovered there are libraries that

534
00:22:05,530 --> 00:22:09,580
allow you to do this so binary

535
00:22:07,809 --> 00:22:10,809
instrumentation is been around for a

536
00:22:09,580 --> 00:22:13,178
long time

537
00:22:10,809 --> 00:22:15,970
instead of instrumenting the source code

538
00:22:13,179 --> 00:22:17,920
which requires you to recompile things

539
00:22:15,970 --> 00:22:19,700
and redeploy things you can instrument

540
00:22:17,920 --> 00:22:21,140
the binaries directly

541
00:22:19,700 --> 00:22:23,570
so it's just sort of a one-time

542
00:22:21,140 --> 00:22:26,630
translation and here's an example of

543
00:22:23,570 --> 00:22:28,700
that in this case I use ASM alot I use

544
00:22:26,630 --> 00:22:31,370
Java sift Java cysts in the beginning

545
00:22:28,700 --> 00:22:34,280
but you can add the same kind of code to

546
00:22:31,370 --> 00:22:35,419
your application just by analyzing the

547
00:22:34,280 --> 00:22:36,680
binder and then you have to recompile

548
00:22:35,420 --> 00:22:38,660
you can just run everything through one

549
00:22:36,680 --> 00:22:40,370
big compile step and there's a ton of

550
00:22:38,660 --> 00:22:44,000
libraries to this this is the exact

551
00:22:40,370 --> 00:22:45,530
technique that tools like app dynamics

552
00:22:44,000 --> 00:22:48,470
and New Relic use for performance

553
00:22:45,530 --> 00:22:51,710
security is really late to this party by

554
00:22:48,470 --> 00:22:54,050
the way doing instrumentation for

555
00:22:51,710 --> 00:22:55,070
security purposes and then the last step

556
00:22:54,050 --> 00:22:56,240
here so we did source code

557
00:22:55,070 --> 00:22:57,950
instrumentation we did binary

558
00:22:56,240 --> 00:23:00,800
instrumentation but the last step here

559
00:22:57,950 --> 00:23:03,530
is doing dynamic binary instrumentation

560
00:23:00,800 --> 00:23:05,450
and this was actually really easy

561
00:23:03,530 --> 00:23:06,800
there are api's like there's the java

562
00:23:05,450 --> 00:23:08,390
instrumentation API I'm gonna show you a

563
00:23:06,800 --> 00:23:11,030
second there's also a dotnet profiler

564
00:23:08,390 --> 00:23:12,710
API there's various approaches to this

565
00:23:11,030 --> 00:23:16,760
in different languages but the whole

566
00:23:12,710 --> 00:23:19,760
idea here is you can hook the loading

567
00:23:16,760 --> 00:23:22,370
process so that as the code loads from

568
00:23:19,760 --> 00:23:25,520
disk into memory you can hook that

569
00:23:22,370 --> 00:23:26,780
process and add sensors to that code you

570
00:23:25,520 --> 00:23:29,240
can actually do whatever you want to

571
00:23:26,780 --> 00:23:30,980
that code but I think it's safest to

572
00:23:29,240 --> 00:23:32,840
just add passive sensors that allow you

573
00:23:30,980 --> 00:23:37,130
to observe the application as it runs

574
00:23:32,840 --> 00:23:39,290
and then as that code is being used it

575
00:23:37,130 --> 00:23:42,140
can send interesting data to some

576
00:23:39,290 --> 00:23:44,120
analysis engine that allow you to

577
00:23:42,140 --> 00:23:46,490
identify patterns of code behavior that

578
00:23:44,120 --> 00:23:48,560
you don't want to see so for example if

579
00:23:46,490 --> 00:23:50,660
you wanted to see sequel injection you

580
00:23:48,560 --> 00:23:52,220
might look for untrusted data coming

581
00:23:50,660 --> 00:23:54,740
from a call like request not get

582
00:23:52,220 --> 00:23:57,260
parameter then flowing through the

583
00:23:54,740 --> 00:23:59,330
application and being added to a query

584
00:23:57,260 --> 00:24:01,520
without being properly escaped or

585
00:23:59,330 --> 00:24:05,840
parameterised you could see that whole

586
00:24:01,520 --> 00:24:07,550
pattern using instrumentation and so

587
00:24:05,840 --> 00:24:09,470
your application could almost tell you

588
00:24:07,550 --> 00:24:12,889
where the vulnerabilities are as it's

589
00:24:09,470 --> 00:24:15,590
running this is a really powerful way of

590
00:24:12,890 --> 00:24:18,140
thinking about app sack and because it's

591
00:24:15,590 --> 00:24:21,500
inside the running application it's much

592
00:24:18,140 --> 00:24:23,720
more accurate it's got a ton of context

593
00:24:21,500 --> 00:24:25,520
so instead of having you know a separate

594
00:24:23,720 --> 00:24:27,260
static analysis tool and a dynamic

595
00:24:25,520 --> 00:24:29,180
analysis tool and a software composition

596
00:24:27,260 --> 00:24:31,490
analysis tool imagine you could take all

597
00:24:29,180 --> 00:24:32,930
those shove them down into a small

598
00:24:31,490 --> 00:24:34,220
instrumentation agent

599
00:24:32,930 --> 00:24:37,940
and deploy them as part of the

600
00:24:34,220 --> 00:24:42,910
application okay so there's a powerful

601
00:24:37,940 --> 00:24:46,010
concept this is how the Java

602
00:24:42,910 --> 00:24:49,430
instrumentation API works you write a

603
00:24:46,010 --> 00:24:51,110
little jar file in this case agent jar

604
00:24:49,430 --> 00:24:53,240
and when you run java you just add that

605
00:24:51,110 --> 00:24:55,250
flag that's a standard Java deployment

606
00:24:53,240 --> 00:24:58,780
option and what that does is it

607
00:24:55,250 --> 00:25:01,700
registers this transformation engine

608
00:24:58,780 --> 00:25:03,649
with the class loader so that now all

609
00:25:01,700 --> 00:25:05,600
the classes that are loaded they go

610
00:25:03,650 --> 00:25:07,490
through the class loader you've

611
00:25:05,600 --> 00:25:10,310
registered this transformer you

612
00:25:07,490 --> 00:25:12,260
transform the bytes in that class file

613
00:25:10,310 --> 00:25:14,210
and then that is what actually gets

614
00:25:12,260 --> 00:25:17,120
loaded and then you end up running in

615
00:25:14,210 --> 00:25:18,470
production with instrumented bytecode so

616
00:25:17,120 --> 00:25:20,149
this is really cool I don't have to make

617
00:25:18,470 --> 00:25:21,590
any changes to the way that I'm all my

618
00:25:20,150 --> 00:25:23,120
source code I don't have to change

619
00:25:21,590 --> 00:25:24,679
anything about the way I build tests or

620
00:25:23,120 --> 00:25:26,510
diploma application I can just add this

621
00:25:24,680 --> 00:25:29,150
flag and I get an instrumented

622
00:25:26,510 --> 00:25:30,620
application that is now just telling me

623
00:25:29,150 --> 00:25:31,850
tons of security information about

624
00:25:30,620 --> 00:25:34,399
what's going on inside the running

625
00:25:31,850 --> 00:25:36,740
application ok so this is my little

626
00:25:34,400 --> 00:25:38,810
buddy that's helping me inside the

627
00:25:36,740 --> 00:25:44,030
running application it can help me with

628
00:25:38,810 --> 00:25:45,830
security so what can we do with that

629
00:25:44,030 --> 00:25:47,930
well so that my first experiment was ten

630
00:25:45,830 --> 00:25:49,909
years ago and in the intervening ten

631
00:25:47,930 --> 00:25:51,380
years there's been a lot of progress in

632
00:25:49,910 --> 00:25:53,420
this space so I want to take a minute

633
00:25:51,380 --> 00:25:54,770
and tell you about the three

634
00:25:53,420 --> 00:25:56,060
technologies that are using this today

635
00:25:54,770 --> 00:25:59,180
and then we'll talk about what is

636
00:25:56,060 --> 00:26:01,280
possible tomorrow the first is I asked

637
00:25:59,180 --> 00:26:05,210
anybody heard of interactive application

638
00:26:01,280 --> 00:26:08,510
security testing okay so this I asked

639
00:26:05,210 --> 00:26:11,410
uses this technique to get inside the

640
00:26:08,510 --> 00:26:14,629
application and find vulnerabilities and

641
00:26:11,410 --> 00:26:16,550
it's got a number of advantages when you

642
00:26:14,630 --> 00:26:18,560
deploy I asked it runs in the background

643
00:26:16,550 --> 00:26:20,180
and analyzes your application while you

644
00:26:18,560 --> 00:26:21,560
do your normal work so developers don't

645
00:26:20,180 --> 00:26:23,180
have to change anything about how they

646
00:26:21,560 --> 00:26:25,700
do their job and they don't need any

647
00:26:23,180 --> 00:26:27,320
security expertise because when I asked

648
00:26:25,700 --> 00:26:29,900
reports of vulnerability it reports

649
00:26:27,320 --> 00:26:32,629
exactly what it observed in the running

650
00:26:29,900 --> 00:26:37,510
application so it's got that huge

651
00:26:32,630 --> 00:26:40,760
advantage in terms of accuracy and I

652
00:26:37,510 --> 00:26:42,110
asked runs in real time so as you're

653
00:26:40,760 --> 00:26:43,580
developing and testing your application

654
00:26:42,110 --> 00:26:44,719
you can just give you instant feedback

655
00:26:43,580 --> 00:26:47,689
on the app okay

656
00:26:44,720 --> 00:26:52,010
and developers can fix it in real-time

657
00:26:47,690 --> 00:26:54,260
and check in clean code now notice that

658
00:26:52,010 --> 00:26:56,629
different that is that fundamentally

659
00:26:54,260 --> 00:27:00,250
changes the economics of application

660
00:26:56,630 --> 00:27:02,630
security if developers can just get

661
00:27:00,250 --> 00:27:04,940
accurate security information as they're

662
00:27:02,630 --> 00:27:06,470
coding they can fix it and check in

663
00:27:04,940 --> 00:27:09,110
clean code you notice there was no

664
00:27:06,470 --> 00:27:10,520
security expert in that loop you don't

665
00:27:09,110 --> 00:27:11,449
need a security expert to run that tool

666
00:27:10,520 --> 00:27:13,220
you don't need a security expert to

667
00:27:11,450 --> 00:27:16,430
triage the result so you can just fix it

668
00:27:13,220 --> 00:27:18,950
and check in clean so that's how we can

669
00:27:16,430 --> 00:27:21,980
leverage the big machinery of software

670
00:27:18,950 --> 00:27:25,280
development to do the work that has to

671
00:27:21,980 --> 00:27:27,700
get done by using better security

672
00:27:25,280 --> 00:27:29,810
technologies another thing that

673
00:27:27,700 --> 00:27:33,590
instrumentation can do is it can do that

674
00:27:29,810 --> 00:27:36,050
library analysis so instrumentation can

675
00:27:33,590 --> 00:27:38,449
see all the libraries that are in use in

676
00:27:36,050 --> 00:27:40,790
your application and the actual ones not

677
00:27:38,450 --> 00:27:43,160
the ones that are listed in the pom not

678
00:27:40,790 --> 00:27:44,750
the ones that are in your your repo but

679
00:27:43,160 --> 00:27:46,700
the ones that actually get loaded at

680
00:27:44,750 --> 00:27:48,530
runtime in your application which are

681
00:27:46,700 --> 00:27:50,480
often different if you if your

682
00:27:48,530 --> 00:27:52,490
application does dependency injection or

683
00:27:50,480 --> 00:27:54,470
it's loading plugins or riot-- of other

684
00:27:52,490 --> 00:27:56,810
things you could end up with code that's

685
00:27:54,470 --> 00:27:58,160
very different than what it looks like

686
00:27:56,810 --> 00:28:02,060
if you're just looking at a source code

687
00:27:58,160 --> 00:28:04,130
repo or something so dynamic software

688
00:28:02,060 --> 00:28:06,710
composition analysis analyzes how you

689
00:28:04,130 --> 00:28:08,270
use libraries at runtime and probably

690
00:28:06,710 --> 00:28:10,820
the most important thing that it can do

691
00:28:08,270 --> 00:28:12,950
is it can tell you exactly how you're

692
00:28:10,820 --> 00:28:15,800
using those libraries it turns out in

693
00:28:12,950 --> 00:28:20,420
Java applications 72 percent of the

694
00:28:15,800 --> 00:28:23,810
libraries are never invoked that

695
00:28:20,420 --> 00:28:25,580
hopefully surprises some of you because

696
00:28:23,810 --> 00:28:28,040
if your tool is just scanning the repo

697
00:28:25,580 --> 00:28:30,800
and saying hey you've got you know 15

698
00:28:28,040 --> 00:28:33,050
libraries that are out of date or have

699
00:28:30,800 --> 00:28:34,639
known vulnerabilities you probably want

700
00:28:33,050 --> 00:28:36,260
to know which of those really needs to

701
00:28:34,640 --> 00:28:38,060
be replaced and which one is just along

702
00:28:36,260 --> 00:28:39,350
for the ride because it's a dependency

703
00:28:38,060 --> 00:28:42,310
of some other dependency of some other

704
00:28:39,350 --> 00:28:44,209
dependency that never gets called so

705
00:28:42,310 --> 00:28:46,070
today I'm Akay SIA has that advantage

706
00:28:44,210 --> 00:28:47,690
and it can cut out a ton of the work

707
00:28:46,070 --> 00:28:49,760
associated with keeping libraries up to

708
00:28:47,690 --> 00:28:52,040
date and then the last thing is called

709
00:28:49,760 --> 00:28:54,800
rasp or runtime application self

710
00:28:52,040 --> 00:28:56,210
protection and well the first two things

711
00:28:54,800 --> 00:28:57,280
are things that you might use in

712
00:28:56,210 --> 00:28:58,630
development

713
00:28:57,280 --> 00:29:01,180
grass was something to use in production

714
00:28:58,630 --> 00:29:02,800
and it uses this instrumentation based

715
00:29:01,180 --> 00:29:05,470
technique to not identify

716
00:29:02,800 --> 00:29:09,820
vulnerabilities but to identify attacks

717
00:29:05,470 --> 00:29:11,260
against those vulnerabilities so just

718
00:29:09,820 --> 00:29:13,330
just to be totally clear for you in the

719
00:29:11,260 --> 00:29:16,720
room with a vulnerability to me is like

720
00:29:13,330 --> 00:29:18,100
an open window an attack is somebody

721
00:29:16,720 --> 00:29:20,440
crawling through that window and

722
00:29:18,100 --> 00:29:23,530
stealing your stuff and so they're very

723
00:29:20,440 --> 00:29:25,090
related right it's the same almost the

724
00:29:23,530 --> 00:29:26,290
same kind of thing attacks you actually

725
00:29:25,090 --> 00:29:28,419
get a little bit more information

726
00:29:26,290 --> 00:29:32,170
because there's someone trying to

727
00:29:28,420 --> 00:29:35,680
exploit that problem so as a rasp can

728
00:29:32,170 --> 00:29:38,830
actually see that exploit as it's

729
00:29:35,680 --> 00:29:40,570
happening in context inside the code so

730
00:29:38,830 --> 00:29:43,840
one should imagine a sequel injection

731
00:29:40,570 --> 00:29:46,600
attack attacker sends in like you know

732
00:29:43,840 --> 00:29:48,820
single tick or one equals one that data

733
00:29:46,600 --> 00:29:52,419
flows through the app ends up in a

734
00:29:48,820 --> 00:29:56,320
sequel query and rat can actually see

735
00:29:52,420 --> 00:29:58,960
that whole query and analyze and say hey

736
00:29:56,320 --> 00:30:02,590
that attackers data actually changed the

737
00:29:58,960 --> 00:30:04,210
semantics of that query that's the

738
00:30:02,590 --> 00:30:06,699
definition of sequel injection and

739
00:30:04,210 --> 00:30:08,290
that's when rasp intervenes and prevents

740
00:30:06,700 --> 00:30:10,300
that attack from going to the database

741
00:30:08,290 --> 00:30:12,399
so this is very different than like a

742
00:30:10,300 --> 00:30:14,680
laugh or something that sits in front of

743
00:30:12,400 --> 00:30:17,890
your application and can only see HTTP

744
00:30:14,680 --> 00:30:19,840
traffic if you can only see HTTP it's

745
00:30:17,890 --> 00:30:21,400
really impossible to tell whether

746
00:30:19,840 --> 00:30:24,040
something is actually an attack or not

747
00:30:21,400 --> 00:30:26,050
in fact every HTTP request these days

748
00:30:24,040 --> 00:30:28,060
looks like both sequel injection and

749
00:30:26,050 --> 00:30:31,180
cross-site scripting because it's all

750
00:30:28,060 --> 00:30:34,000
full of JSON and single ticks and equal

751
00:30:31,180 --> 00:30:35,260
signs and so on so it gets really

752
00:30:34,000 --> 00:30:38,020
complicated to tell whether it's

753
00:30:35,260 --> 00:30:40,840
actually an attack or not but rasp can

754
00:30:38,020 --> 00:30:41,860
see how that data is used rat or wefts

755
00:30:40,840 --> 00:30:45,750
don't really know what they're

756
00:30:41,860 --> 00:30:48,370
protecting so they make tons of mistakes

757
00:30:45,750 --> 00:30:50,380
rasp on the other hand is in the

758
00:30:48,370 --> 00:30:52,929
transaction itself and so it can tell

759
00:30:50,380 --> 00:30:57,910
whether it's a real attack attempt or

760
00:30:52,930 --> 00:30:59,590
not so I want to just give a a graphical

761
00:30:57,910 --> 00:31:00,910
description of how I asked in rasp works

762
00:30:59,590 --> 00:31:02,020
so we can understand so the first thing

763
00:31:00,910 --> 00:31:07,450
that happens when your application

764
00:31:02,020 --> 00:31:08,800
starts up the instrumentation adds a

765
00:31:07,450 --> 00:31:09,910
bunch of different kinds of sensors to

766
00:31:08,800 --> 00:31:11,560
the app

767
00:31:09,910 --> 00:31:13,870
these sensors allow the application to

768
00:31:11,560 --> 00:31:15,970
see the HTTP traffic to see the code to

769
00:31:13,870 --> 00:31:20,080
see the data flow see the libraries and

770
00:31:15,970 --> 00:31:23,350
so on and then as you use the

771
00:31:20,080 --> 00:31:26,169
application like let's say you're just a

772
00:31:23,350 --> 00:31:28,030
developer and you're testing your

773
00:31:26,170 --> 00:31:29,410
application you don't have to exploit it

774
00:31:28,030 --> 00:31:32,950
you could I could just type in the word

775
00:31:29,410 --> 00:31:35,620
Jeff into a form field and that word

776
00:31:32,950 --> 00:31:37,900
Jeff maybe it's in a header or in a form

777
00:31:35,620 --> 00:31:39,939
or something that where Jeff would flow

778
00:31:37,900 --> 00:31:42,460
through the application maybe it gets

779
00:31:39,940 --> 00:31:44,130
added to some other data or substring or

780
00:31:42,460 --> 00:31:47,590
transformed in some way but eventually

781
00:31:44,130 --> 00:31:51,250
that data would make it to some sink

782
00:31:47,590 --> 00:31:54,429
maybe it's commands you know run timed

783
00:31:51,250 --> 00:31:56,400
out exactly it's parsing an XML document

784
00:31:54,430 --> 00:31:58,300
maybe it's evaluating an expression

785
00:31:56,400 --> 00:31:59,950
whatever it is there's a million of

786
00:31:58,300 --> 00:32:00,490
different ways that that could be a

787
00:31:59,950 --> 00:32:06,640
problem

788
00:32:00,490 --> 00:32:09,160
but at the end this I asked can look

789
00:32:06,640 --> 00:32:11,110
back at that path and say hey I know

790
00:32:09,160 --> 00:32:13,420
data can flow through this path because

791
00:32:11,110 --> 00:32:15,580
I watch data flow through this path and

792
00:32:13,420 --> 00:32:17,020
it can say and I know it didn't that

793
00:32:15,580 --> 00:32:20,050
path didn't have the right security

794
00:32:17,020 --> 00:32:23,080
controls on it and that's the definition

795
00:32:20,050 --> 00:32:24,460
of those vulnerabilities right if we see

796
00:32:23,080 --> 00:32:25,659
that data flow throw and it didn't go

797
00:32:24,460 --> 00:32:27,100
through the right controls then we know

798
00:32:25,660 --> 00:32:28,810
it's exploitable and so we got a

799
00:32:27,100 --> 00:32:30,939
confirmed vulnerability that's very

800
00:32:28,810 --> 00:32:32,200
different than you know a scanner tool

801
00:32:30,940 --> 00:32:33,490
that can just sort of suggest well

802
00:32:32,200 --> 00:32:38,050
there's a vulnerability that's possible

803
00:32:33,490 --> 00:32:39,370
and rasp works almost the same way so

804
00:32:38,050 --> 00:32:41,050
imagine that same thing but now we've

805
00:32:39,370 --> 00:32:42,760
been attacking it and I did this before

806
00:32:41,050 --> 00:32:45,190
the data flows through it ends up in the

807
00:32:42,760 --> 00:32:47,410
query and we can see that that that

808
00:32:45,190 --> 00:32:49,890
attack actually changed the semantics of

809
00:32:47,410 --> 00:32:52,090
the query and so then we can intervene

810
00:32:49,890 --> 00:32:54,790
typically what raster tools - as they

811
00:32:52,090 --> 00:32:56,800
throw an exception just like as if that

812
00:32:54,790 --> 00:32:58,629
query had failed somehow like maybe the

813
00:32:56,800 --> 00:33:00,250
query timed out or something we can

814
00:32:58,630 --> 00:33:02,830
throw a security exception that says hey

815
00:33:00,250 --> 00:33:04,480
that sequel query is no good it's about

816
00:33:02,830 --> 00:33:06,399
to get explained we can prevent it from

817
00:33:04,480 --> 00:33:08,880
exploiting our applications so that's

818
00:33:06,400 --> 00:33:11,920
the thing getting inside the application

819
00:33:08,880 --> 00:33:13,570
makes App sack more accurate and be more

820
00:33:11,920 --> 00:33:15,640
accurate means you don't have to have

821
00:33:13,570 --> 00:33:17,050
security experts and having getting the

822
00:33:15,640 --> 00:33:19,120
security experts out of the loop and

823
00:33:17,050 --> 00:33:21,370
this may be hard for some of you if your

824
00:33:19,120 --> 00:33:22,360
security experts but getting you out of

825
00:33:21,370 --> 00:33:24,010
the loop is the

826
00:33:22,360 --> 00:33:25,928
the only way that we're going to change

827
00:33:24,010 --> 00:33:28,269
the economics of applications security

828
00:33:25,929 --> 00:33:30,549
and that was a tough realization for me

829
00:33:28,269 --> 00:33:35,200
after years consulting in this space

830
00:33:30,549 --> 00:33:39,279
realizing that I'm the problem so God

831
00:33:35,200 --> 00:33:41,440
will become tool Smiths and coaches

832
00:33:39,279 --> 00:33:42,970
rather than the last line of defense

833
00:33:41,440 --> 00:33:47,409
against sequel injection and cross-site

834
00:33:42,970 --> 00:33:49,390
scripting and so on okay so that was all

835
00:33:47,409 --> 00:33:51,580
for one application right that's how I

836
00:33:49,390 --> 00:33:53,080
think about securing one app but it's

837
00:33:51,580 --> 00:34:00,580
really important to think at portfolio

838
00:33:53,080 --> 00:34:03,279
scale so I want to zoom out I want you

839
00:34:00,580 --> 00:34:06,010
to imagine instrumenting a whole

840
00:34:03,279 --> 00:34:08,918
portfolio of applications so that little

841
00:34:06,010 --> 00:34:10,719
box represents our instrumentation agent

842
00:34:08,918 --> 00:34:12,969
right that's our buddy

843
00:34:10,719 --> 00:34:14,678
on the inside we're going to take that

844
00:34:12,969 --> 00:34:17,080
agent and we're going to make it part of

845
00:34:14,679 --> 00:34:19,179
our standard app server built whether

846
00:34:17,080 --> 00:34:21,580
we're deploying in cloud or containers

847
00:34:19,179 --> 00:34:26,639
or VMs or in a data center or I don't

848
00:34:21,580 --> 00:34:26,639
care how add that agent to that platform

849
00:34:27,599 --> 00:34:33,070
so that it's in development environments

850
00:34:30,909 --> 00:34:36,129
in your C sed environment in your

851
00:34:33,070 --> 00:34:38,740
production environments that agents now

852
00:34:36,129 --> 00:34:40,418
observing the application and detecting

853
00:34:38,739 --> 00:34:44,799
both vulnerabilities library problems

854
00:34:40,418 --> 00:34:47,408
into tax and as you do your normal job

855
00:34:44,800 --> 00:34:49,419
your normal development process building

856
00:34:47,409 --> 00:34:51,550
code testing code deploying code the

857
00:34:49,418 --> 00:34:54,310
agents there and it's reporting that

858
00:34:51,550 --> 00:34:56,889
telemetry to some console somewhere so

859
00:34:54,310 --> 00:35:00,040
you've got visibility into a portfolio

860
00:34:56,889 --> 00:35:03,550
of applications in real time I think how

861
00:35:00,040 --> 00:35:06,250
different that is normally app SEC teams

862
00:35:03,550 --> 00:35:07,720
go app by app they test one move on to

863
00:35:06,250 --> 00:35:10,810
the next one test another one maybe they

864
00:35:07,720 --> 00:35:12,939
do a couple in parallel but it's not you

865
00:35:10,810 --> 00:35:14,650
know it's basically a serial operation

866
00:35:12,940 --> 00:35:15,820
and then you know depending on how far

867
00:35:14,650 --> 00:35:17,560
you want to go maybe you go all the way

868
00:35:15,820 --> 00:35:18,940
through the criticals nobody really goes

869
00:35:17,560 --> 00:35:20,650
all the way to the end of the portfolio

870
00:35:18,940 --> 00:35:22,359
but then you cycle around and you start

871
00:35:20,650 --> 00:35:25,690
over again you do the same thing again

872
00:35:22,359 --> 00:35:27,310
and it ends up being pretty painful but

873
00:35:25,690 --> 00:35:28,930
imagine if all those applications are

874
00:35:27,310 --> 00:35:31,420
essentially testing themselves and

875
00:35:28,930 --> 00:35:34,149
you've got up-to-date information on

876
00:35:31,420 --> 00:35:36,010
every application in your portfolio you

877
00:35:34,150 --> 00:35:38,589
know where all the vulnerabilities

878
00:35:36,010 --> 00:35:39,520
you know all the libraries that aren't

879
00:35:38,589 --> 00:35:41,650
up to date and have known

880
00:35:39,520 --> 00:35:44,079
vulnerabilities and you see attack

881
00:35:41,650 --> 00:35:46,000
traffic and you know who's attacking you

882
00:35:44,079 --> 00:35:49,180
what kind of attack techniques they're

883
00:35:46,000 --> 00:35:51,069
using you know which systems they're

884
00:35:49,180 --> 00:35:53,558
targeting and you've prevented those

885
00:35:51,069 --> 00:35:55,569
attacks from exploiting you you can take

886
00:35:53,559 --> 00:35:57,040
that data and feed it back into the

887
00:35:55,569 --> 00:35:58,869
development teams so that's this

888
00:35:57,040 --> 00:36:00,910
feedback loop you know take this

889
00:35:58,869 --> 00:36:02,829
information and get it to the people

890
00:36:00,910 --> 00:36:05,170
that need it through the tools they're

891
00:36:02,829 --> 00:36:06,790
already using and the cool thing about

892
00:36:05,170 --> 00:36:09,970
instrumentation is that this whole

893
00:36:06,790 --> 00:36:13,150
feedback loop takes about one second as

894
00:36:09,970 --> 00:36:16,089
soon as a developer makes an error they

895
00:36:13,150 --> 00:36:17,800
test their code it gets detected they

896
00:36:16,089 --> 00:36:19,119
get alerted through whatever means they

897
00:36:17,800 --> 00:36:21,880
want like you could give them a slack

898
00:36:19,119 --> 00:36:23,410
alert or a JIRA ticket or email message

899
00:36:21,880 --> 00:36:25,359
or however they work you can give it to

900
00:36:23,410 --> 00:36:27,490
them right through their IDE they can

901
00:36:25,359 --> 00:36:31,569
get an alert they can fix it and check

902
00:36:27,490 --> 00:36:33,640
in clean code this is a very different

903
00:36:31,569 --> 00:36:37,450
way of thinking about app SEC than

904
00:36:33,640 --> 00:36:40,058
having a team of people that tests a ton

905
00:36:37,450 --> 00:36:41,618
of applications piles up a pile of

906
00:36:40,059 --> 00:36:45,250
vulnerabilities and never gets anything

907
00:36:41,619 --> 00:36:48,819
fixed I know a number of organizations

908
00:36:45,250 --> 00:36:51,790
that have risk registers or you know bug

909
00:36:48,819 --> 00:36:53,829
trackers that have 30,000 40,000

910
00:36:51,790 --> 00:36:59,049
vulnerabilities in them that they're not

911
00:36:53,829 --> 00:37:00,369
fixing because that's how the process

912
00:36:59,049 --> 00:37:03,009
that we're using for apps like today

913
00:37:00,369 --> 00:37:04,690
that's what it does is it generates a

914
00:37:03,010 --> 00:37:06,099
big pile of vulnerabilities that don't

915
00:37:04,690 --> 00:37:07,030
get fixed and we're not improving the

916
00:37:06,099 --> 00:37:09,250
situation at all

917
00:37:07,030 --> 00:37:16,180
this way we can actually improve the

918
00:37:09,250 --> 00:37:19,480
situation so talk a little bit about how

919
00:37:16,180 --> 00:37:22,779
instrumentation affects the SDLC so in

920
00:37:19,480 --> 00:37:25,750
development the goal is to get

921
00:37:22,780 --> 00:37:27,190
developers to commit secure code right

922
00:37:25,750 --> 00:37:28,630
that'll be great if the developers were

923
00:37:27,190 --> 00:37:30,250
all producing secure code on their own

924
00:37:28,630 --> 00:37:31,690
then there wouldn't be a ton of

925
00:37:30,250 --> 00:37:35,140
downstream work to do

926
00:37:31,690 --> 00:37:38,140
so that's our goal here is we want you

927
00:37:35,140 --> 00:37:41,020
know to empower developers to write and

928
00:37:38,140 --> 00:37:43,109
commit secure code without pissing them

929
00:37:41,020 --> 00:37:43,109
off

930
00:37:44,110 --> 00:37:48,170
and just a brief aside here I know you

931
00:37:46,460 --> 00:37:49,430
look I did a lot of pen testing for a

932
00:37:48,170 --> 00:37:51,170
lot of years and I was really proud of

933
00:37:49,430 --> 00:37:53,870
the work that I did but frankly when you

934
00:37:51,170 --> 00:37:57,740
deliver it to development teams you're

935
00:37:53,870 --> 00:37:59,390
delivering a turd and you're proud of it

936
00:37:57,740 --> 00:38:03,399
like my child when he was little he was

937
00:37:59,390 --> 00:38:06,020
super proud of what he had produced but

938
00:38:03,400 --> 00:38:08,320
it's not viewed that way by development

939
00:38:06,020 --> 00:38:10,640
teams you're walking in with a you know

940
00:38:08,320 --> 00:38:11,840
present for the development teams and

941
00:38:10,640 --> 00:38:14,839
then they had let's just work for them

942
00:38:11,840 --> 00:38:17,930
that they have to go fix so this is a

943
00:38:14,840 --> 00:38:19,670
way of supporting developers and doing

944
00:38:17,930 --> 00:38:26,720
their own security then they don't have

945
00:38:19,670 --> 00:38:30,050
to get beat up in QA we get different

946
00:38:26,720 --> 00:38:31,490
goals for security here we want to make

947
00:38:30,050 --> 00:38:34,960
sure that everything's been thoroughly

948
00:38:31,490 --> 00:38:36,830
tested people talk about shifting left

949
00:38:34,960 --> 00:38:39,020
mostly when people talk about shifting

950
00:38:36,830 --> 00:38:40,910
left they're talking about taking expert

951
00:38:39,020 --> 00:38:43,100
security tools and pushing them down on

952
00:38:40,910 --> 00:38:44,990
development teams that aren't trained or

953
00:38:43,100 --> 00:38:51,680
qualified to use those tools that's

954
00:38:44,990 --> 00:38:53,560
 left what we want to do here is

955
00:38:51,680 --> 00:38:55,879
we want to make sure that we keep that

956
00:38:53,560 --> 00:38:57,920
testing before we go into production so

957
00:38:55,880 --> 00:39:00,590
we have assurance and if you remember

958
00:38:57,920 --> 00:39:02,120
you know back in the in the 80s when I

959
00:39:00,590 --> 00:39:04,100
was working on a highly secure project

960
00:39:02,120 --> 00:39:07,009
our goal was to build high assurance

961
00:39:04,100 --> 00:39:09,110
systems ultimately that's what we need

962
00:39:07,010 --> 00:39:11,090
to get back to that's what we can do in

963
00:39:09,110 --> 00:39:12,800
QA here with using instrumentation we

964
00:39:11,090 --> 00:39:14,780
run our normal QA tests we get assurance

965
00:39:12,800 --> 00:39:17,060
that everything was tested and that it's

966
00:39:14,780 --> 00:39:21,110
safe to go into production and then in

967
00:39:17,060 --> 00:39:22,670
operations again we want to know about

968
00:39:21,110 --> 00:39:25,490
who's attacking us what kind of attacks

969
00:39:22,670 --> 00:39:29,080
are using and prevent those attacks from

970
00:39:25,490 --> 00:39:31,399
exploiting us so those are kind of the

971
00:39:29,080 --> 00:39:33,230
the goals of each of these activities

972
00:39:31,400 --> 00:39:35,500
and I want to show you how we can build

973
00:39:33,230 --> 00:39:39,140
a pipeline that supports those goals so

974
00:39:35,500 --> 00:39:41,270
this is a simple pipeline for spring pet

975
00:39:39,140 --> 00:39:43,759
clinic if you're interested in this I've

976
00:39:41,270 --> 00:39:45,980
got a video online that shows exactly

977
00:39:43,760 --> 00:39:50,150
how to build this whole thing but you

978
00:39:45,980 --> 00:39:52,240
can clone the pet clinic repo and you

979
00:39:50,150 --> 00:39:54,910
can build it and push it into deployment

980
00:39:52,240 --> 00:39:57,939
using this pipeline the first step to

981
00:39:54,910 --> 00:40:01,089
getting security done here is to add an

982
00:39:57,940 --> 00:40:03,190
instrumentation agent to the development

983
00:40:01,090 --> 00:40:05,920
environment and that just it sits in the

984
00:40:03,190 --> 00:40:07,600
background it does its job it finds

985
00:40:05,920 --> 00:40:09,730
vulnerabilities when as the developers

986
00:40:07,600 --> 00:40:12,549
are building this app and their reports

987
00:40:09,730 --> 00:40:14,410
them through eclipse and slack and so on

988
00:40:12,550 --> 00:40:15,580
and gives them instant feedback on the

989
00:40:14,410 --> 00:40:18,730
code that they're writing so that they

990
00:40:15,580 --> 00:40:22,390
can commit it clean in QA we've got that

991
00:40:18,730 --> 00:40:25,000
same instrumentation agent now it's

992
00:40:22,390 --> 00:40:26,470
running on the test server so as you do

993
00:40:25,000 --> 00:40:28,660
your automated tests as you do your

994
00:40:26,470 --> 00:40:31,290
manual tests that agent is in the

995
00:40:28,660 --> 00:40:36,640
background looking for vulnerabilities

996
00:40:31,290 --> 00:40:38,980
we also want to run our rasp here in the

997
00:40:36,640 --> 00:40:41,020
test environment anybody know why we

998
00:40:38,980 --> 00:40:42,160
want to put our rasp agent in our test

999
00:40:41,020 --> 00:40:45,480
environment I mean nobody's going to be

1000
00:40:42,160 --> 00:40:45,480
attacking tests right

1001
00:40:45,840 --> 00:40:52,630
so again well why not his good point

1002
00:40:50,100 --> 00:40:54,790
actually the point of this is to give

1003
00:40:52,630 --> 00:40:57,640
everybody confidence that the

1004
00:40:54,790 --> 00:40:59,320
application works with full blocking

1005
00:40:57,640 --> 00:41:00,879
turned on right you can't really do this

1006
00:40:59,320 --> 00:41:04,150
with a wife because it's so painful to

1007
00:41:00,880 --> 00:41:06,880
set up but with rafter you can easily

1008
00:41:04,150 --> 00:41:11,560
add this to your application environment

1009
00:41:06,880 --> 00:41:13,330
and you can get instant confirmation

1010
00:41:11,560 --> 00:41:15,190
that your application works with

1011
00:41:13,330 --> 00:41:17,020
security all enabled and then in

1012
00:41:15,190 --> 00:41:19,810
operations that's when you can go it's

1013
00:41:17,020 --> 00:41:21,130
just rasp like you just turn on rasp you

1014
00:41:19,810 --> 00:41:22,420
don't need to run I ask there you don't

1015
00:41:21,130 --> 00:41:23,440
want to discover vulnerabilities in

1016
00:41:22,420 --> 00:41:26,410
production you want to discover

1017
00:41:23,440 --> 00:41:27,700
vulnerabilities in death unless you've

1018
00:41:26,410 --> 00:41:29,740
got a bunch of legacy apps out there

1019
00:41:27,700 --> 00:41:32,290
that nobody's got a dev environment for

1020
00:41:29,740 --> 00:41:35,790
they're just running you can add I asked

1021
00:41:32,290 --> 00:41:37,840
there and get feedback on libraries and

1022
00:41:35,790 --> 00:41:40,840
vulnerabilities and then you can decide

1023
00:41:37,840 --> 00:41:42,790
what to do about it so this kind of

1024
00:41:40,840 --> 00:41:44,830
pipeline notice that this doesn't make

1025
00:41:42,790 --> 00:41:47,170
any changes to the way this team builds

1026
00:41:44,830 --> 00:41:51,250
or tests or deploys their code it's like

1027
00:41:47,170 --> 00:41:53,320
a security layer it adds on top of this

1028
00:41:51,250 --> 00:41:56,580
pipeline and it's easy you can do this

1029
00:41:53,320 --> 00:41:56,580
in 30 minutes

1030
00:41:58,690 --> 00:42:03,590
so instrumentation is not just limited

1031
00:42:01,550 --> 00:42:05,540
to app sex I've been talking all about I

1032
00:42:03,590 --> 00:42:07,370
asked and rasp which are kind of

1033
00:42:05,540 --> 00:42:09,680
instrumentation at the application layer

1034
00:42:07,370 --> 00:42:11,420
but I want you to compare this to how we

1035
00:42:09,680 --> 00:42:12,919
you know used to do security with

1036
00:42:11,420 --> 00:42:15,770
scanning and firewalls which are kind of

1037
00:42:12,920 --> 00:42:18,650
outside in and super noisy because

1038
00:42:15,770 --> 00:42:22,640
they're far away from the actual code

1039
00:42:18,650 --> 00:42:24,560
the actual running application today we

1040
00:42:22,640 --> 00:42:27,080
can do security instrumentation that

1041
00:42:24,560 --> 00:42:29,270
attaches directly to the layer of the

1042
00:42:27,080 --> 00:42:31,549
stack that we're interested in so at the

1043
00:42:29,270 --> 00:42:33,380
application layer that's is NR ASP but

1044
00:42:31,550 --> 00:42:35,860
at other layers like the container layer

1045
00:42:33,380 --> 00:42:38,360
you may want to add an instrumentation

1046
00:42:35,860 --> 00:42:40,820
technology there something like aqua

1047
00:42:38,360 --> 00:42:42,380
twistlock at the operating system layer

1048
00:42:40,820 --> 00:42:44,360
maybe you need to use a product that

1049
00:42:42,380 --> 00:42:46,760
gets inside the application like carbon

1050
00:42:44,360 --> 00:42:48,080
black or something in the cloud maybe

1051
00:42:46,760 --> 00:42:50,150
you've got something like threat stack

1052
00:42:48,080 --> 00:42:53,360
that's directly monitoring that layer

1053
00:42:50,150 --> 00:42:55,070
and this when you put it all together

1054
00:42:53,360 --> 00:42:57,110
you can see this is a fundamentally

1055
00:42:55,070 --> 00:42:58,910
different approach to security than

1056
00:42:57,110 --> 00:43:03,200
trying to do these outside and perimeter

1057
00:42:58,910 --> 00:43:04,430
based kind of approaches and I think

1058
00:43:03,200 --> 00:43:06,410
that's the transformation that we're

1059
00:43:04,430 --> 00:43:08,779
seeing in the market is people move to

1060
00:43:06,410 --> 00:43:11,990
cloud as people move to DevOps all of a

1061
00:43:08,780 --> 00:43:13,940
sudden everything software driven the

1062
00:43:11,990 --> 00:43:15,200
advantage of doing this scanning and

1063
00:43:13,940 --> 00:43:17,740
firewall based approaches that you can

1064
00:43:15,200 --> 00:43:20,210
centralize security in one place that

1065
00:43:17,740 --> 00:43:22,490
used to be the easy way of doing things

1066
00:43:20,210 --> 00:43:24,470
we'll just put a firewall there we'll

1067
00:43:22,490 --> 00:43:27,350
create a perimeter and we can control

1068
00:43:24,470 --> 00:43:33,470
security from that one point anybody

1069
00:43:27,350 --> 00:43:35,990
think that works anymore no so we can do

1070
00:43:33,470 --> 00:43:37,939
this distributed approach to security if

1071
00:43:35,990 --> 00:43:40,279
you get a chance there's a guy named EDM

1072
00:43:37,940 --> 00:43:42,980
Errol so he used to be the CEO of AT&T

1073
00:43:40,280 --> 00:43:47,300
he talks about this paradigm where he

1074
00:43:42,980 --> 00:43:49,610
says what we need to do is explode which

1075
00:43:47,300 --> 00:43:52,670
means blow up your monoliths move them

1076
00:43:49,610 --> 00:43:54,320
to the cloud the moving to the cloud

1077
00:43:52,670 --> 00:43:56,030
part that's offloading so take your

1078
00:43:54,320 --> 00:43:58,730
workload split them up move it to the

1079
00:43:56,030 --> 00:44:01,750
cloud and then he says reload which

1080
00:43:58,730 --> 00:44:04,220
means take technologies like this and

1081
00:44:01,750 --> 00:44:06,410
instrument the application those

1082
00:44:04,220 --> 00:44:08,430
workloads for security so you've got now

1083
00:44:06,410 --> 00:44:11,490
instead of having one big parameter

1084
00:44:08,430 --> 00:44:16,169
now you've got a whole bunch of stacks

1085
00:44:11,490 --> 00:44:17,729
out there that are all defended using

1086
00:44:16,170 --> 00:44:20,010
the instrumentation technique and he

1087
00:44:17,730 --> 00:44:22,559
actually he makes it comparison to a

1088
00:44:20,010 --> 00:44:24,510
botnet he's like we should control our

1089
00:44:22,559 --> 00:44:27,390
applications security like we own the

1090
00:44:24,510 --> 00:44:31,910
botnet and your own infrastructure

1091
00:44:27,390 --> 00:44:34,970
becomes that community control system so

1092
00:44:31,910 --> 00:44:37,259
what's next

1093
00:44:34,970 --> 00:44:38,399
we are just scratching the surface of

1094
00:44:37,260 --> 00:44:40,680
what we can do with security

1095
00:44:38,400 --> 00:44:44,430
instrumentation I talked about I asked

1096
00:44:40,680 --> 00:44:46,799
and DSCA and rasp but there are a ton of

1097
00:44:44,430 --> 00:44:49,759
other interesting things that we can do

1098
00:44:46,799 --> 00:44:52,470
with software security instrumentation

1099
00:44:49,760 --> 00:44:57,299
for instance we can automatically add

1100
00:44:52,470 --> 00:44:58,078
defenses to applications right now if

1101
00:44:57,299 --> 00:44:59,670
you want to add

1102
00:44:58,079 --> 00:45:01,619
I don't know access control or input

1103
00:44:59,670 --> 00:45:04,200
validation or encryption to an

1104
00:45:01,619 --> 00:45:06,809
application your development team has to

1105
00:45:04,200 --> 00:45:08,520
go write that stuff and implement it in

1106
00:45:06,809 --> 00:45:11,329
the application what if we could weave

1107
00:45:08,520 --> 00:45:13,440
it into the application automatically

1108
00:45:11,329 --> 00:45:16,619
what if what if the instrumentation

1109
00:45:13,440 --> 00:45:19,559
could identify hey this is sensor data

1110
00:45:16,619 --> 00:45:22,260
coming in we need to encrypt that before

1111
00:45:19,559 --> 00:45:24,480
it goes into any storage well that's the

1112
00:45:22,260 --> 00:45:27,210
kind of rule that we can automate and

1113
00:45:24,480 --> 00:45:29,069
then notice we're not relying on on

1114
00:45:27,210 --> 00:45:32,819
developers to do that we've got

1115
00:45:29,069 --> 00:45:34,619
automation that works every time so

1116
00:45:32,819 --> 00:45:36,150
we're consistently applying these

1117
00:45:34,619 --> 00:45:37,950
security controls we do the same thing

1118
00:45:36,150 --> 00:45:40,140
with access control maybe you want to

1119
00:45:37,950 --> 00:45:42,509
make sure every API has an access

1120
00:45:40,140 --> 00:45:44,670
control check well why not weave it in

1121
00:45:42,510 --> 00:45:48,329
as opposed to relying on development to

1122
00:45:44,670 --> 00:45:51,240
code it in access controls probably the

1123
00:45:48,329 --> 00:45:53,640
least tested area of security that's

1124
00:45:51,240 --> 00:45:55,078
where I mean not specialized in that I

1125
00:45:53,640 --> 00:45:56,670
love testing access control schemes

1126
00:45:55,079 --> 00:45:58,260
because they're always broken because

1127
00:45:56,670 --> 00:45:59,400
everyone writes their own custom access

1128
00:45:58,260 --> 00:46:02,520
control scheme in every single

1129
00:45:59,400 --> 00:46:05,010
application and nobody can get it right

1130
00:46:02,520 --> 00:46:06,599
but automation can get it right so we

1131
00:46:05,010 --> 00:46:09,029
can do these things we can add defenses

1132
00:46:06,599 --> 00:46:11,609
we could actually harden or enable

1133
00:46:09,029 --> 00:46:13,289
existing defenses you know many of

1134
00:46:11,609 --> 00:46:15,480
platforms that people are using have

1135
00:46:13,289 --> 00:46:16,340
defenses built in for things like CSRF

1136
00:46:15,480 --> 00:46:19,790
and

1137
00:46:16,340 --> 00:46:22,280
I don't know verb verb tampering and so

1138
00:46:19,790 --> 00:46:23,690
on we could enable those in applications

1139
00:46:22,280 --> 00:46:27,860
that don't have them the instrumentation

1140
00:46:23,690 --> 00:46:29,480
could just turn them on we could anybody

1141
00:46:27,860 --> 00:46:33,770
doesn't like threat modeling or

1142
00:46:29,480 --> 00:46:36,290
architecture review you get a pile of

1143
00:46:33,770 --> 00:46:40,250
PDF papers from like five years ago that

1144
00:46:36,290 --> 00:46:42,440
don't match the system at all we could

1145
00:46:40,250 --> 00:46:45,140
automatically generate that kind of

1146
00:46:42,440 --> 00:46:48,980
diagrams and information directly from

1147
00:46:45,140 --> 00:46:51,560
the running application we do a little

1148
00:46:48,980 --> 00:46:52,880
bit of this today and it's terrifying

1149
00:46:51,560 --> 00:46:54,650
the back end connections that

1150
00:46:52,880 --> 00:46:56,750
applications make there's always a

1151
00:46:54,650 --> 00:46:58,910
surprise there it's reaching out to some

1152
00:46:56,750 --> 00:47:00,440
internet system there's there's always

1153
00:46:58,910 --> 00:47:02,810
connections that the development team

1154
00:47:00,440 --> 00:47:04,690
has no idea are there we can do that

1155
00:47:02,810 --> 00:47:06,500
automatically we could even use

1156
00:47:04,690 --> 00:47:08,300
instrumentation to dynamically adjust

1157
00:47:06,500 --> 00:47:10,520
the security level of an application

1158
00:47:08,300 --> 00:47:13,040
like hey what if you know all of a

1159
00:47:10,520 --> 00:47:15,640
sudden we noticed some attacks coming in

1160
00:47:13,040 --> 00:47:20,630
and we want to switch to like DEFCON 3

1161
00:47:15,640 --> 00:47:21,799
and now while you're in DEFCON 3 people

1162
00:47:20,630 --> 00:47:23,450
have to go through an extra

1163
00:47:21,800 --> 00:47:25,400
authentication step before they can

1164
00:47:23,450 --> 00:47:27,830
perform a transaction you know did step

1165
00:47:25,400 --> 00:47:30,380
up authentication kind of rules we can

1166
00:47:27,830 --> 00:47:31,940
do that kind of thing automatically with

1167
00:47:30,380 --> 00:47:34,700
instrumentation all without changing a

1168
00:47:31,940 --> 00:47:41,360
single out of code we can weave it into

1169
00:47:34,700 --> 00:47:44,299
applications automatically so this is

1170
00:47:41,360 --> 00:47:46,430
not all about technology some of this is

1171
00:47:44,300 --> 00:47:48,740
about how do we get development and

1172
00:47:46,430 --> 00:47:53,540
security working together productively

1173
00:47:48,740 --> 00:47:55,580
and you know you can say well it's you

1174
00:47:53,540 --> 00:47:57,230
know culture is the most important thing

1175
00:47:55,580 --> 00:47:59,390
or process is the most important thing

1176
00:47:57,230 --> 00:48:01,520
but frankly they're all tied together

1177
00:47:59,390 --> 00:48:04,100
people process and technology and if

1178
00:48:01,520 --> 00:48:07,520
you've got better technology your

1179
00:48:04,100 --> 00:48:11,360
processes and people aspects can be

1180
00:48:07,520 --> 00:48:13,330
different they can change and so to me

1181
00:48:11,360 --> 00:48:16,970
instrumentation is really a platform

1182
00:48:13,330 --> 00:48:19,130
that allows development and security to

1183
00:48:16,970 --> 00:48:20,509
work together productively in a way that

1184
00:48:19,130 --> 00:48:22,880
they don't work together productively

1185
00:48:20,510 --> 00:48:24,950
now at all most of the organizations I

1186
00:48:22,880 --> 00:48:26,870
go into you know security teams have a

1187
00:48:24,950 --> 00:48:28,160
lot of trouble getting things done and

1188
00:48:26,870 --> 00:48:30,049
there's friction with devel

1189
00:48:28,160 --> 00:48:32,810
teams who just want to push out code and

1190
00:48:30,050 --> 00:48:35,090
we've got a very negative culture around

1191
00:48:32,810 --> 00:48:36,860
security but if you show up with

1192
00:48:35,090 --> 00:48:40,400
instrumentation to development teams and

1193
00:48:36,860 --> 00:48:42,080
say hey just do this this little thing

1194
00:48:40,400 --> 00:48:45,290
add this little agent to your

1195
00:48:42,080 --> 00:48:47,630
applications and then you're in control

1196
00:48:45,290 --> 00:48:49,460
of security and as long as you're clean

1197
00:48:47,630 --> 00:48:50,870
as long as you don't have custom code

1198
00:48:49,460 --> 00:48:51,950
vulnerabilities as long as you don't

1199
00:48:50,870 --> 00:48:54,440
have libraries with known

1200
00:48:51,950 --> 00:48:56,720
vulnerabilities as long as you you know

1201
00:48:54,440 --> 00:48:58,670
your testing shows that you've got good

1202
00:48:56,720 --> 00:49:00,589
coverage over the application then

1203
00:48:58,670 --> 00:49:02,960
you're cleared to go into production at

1204
00:49:00,590 --> 00:49:05,060
whatever velocity you want to go they're

1205
00:49:02,960 --> 00:49:07,970
like yes thank you for coming I love you

1206
00:49:05,060 --> 00:49:11,360
security and that's not the way it works

1207
00:49:07,970 --> 00:49:14,240
today so really that I believe that in

1208
00:49:11,360 --> 00:49:15,590
order to harmonize development of

1209
00:49:14,240 --> 00:49:17,839
security we've got to use different

1210
00:49:15,590 --> 00:49:19,760
technology now sometimes given people

1211
00:49:17,840 --> 00:49:23,120
shovels just isn't enough you got to

1212
00:49:19,760 --> 00:49:25,760
come with a bulldozer so that's the kind

1213
00:49:23,120 --> 00:49:29,000
of change that I want to see if you want

1214
00:49:25,760 --> 00:49:32,270
to try it we've made a version of AI a

1215
00:49:29,000 --> 00:49:34,340
Strassmann DSCA free for anybody it's

1216
00:49:32,270 --> 00:49:36,740
totally full strength it's not time

1217
00:49:34,340 --> 00:49:39,740
limited it's just for one application

1218
00:49:36,740 --> 00:49:42,259
and we're trying to empower you know all

1219
00:49:39,740 --> 00:49:43,850
the little companies in the world that

1220
00:49:42,260 --> 00:49:46,790
will never be able to afford expensive

1221
00:49:43,850 --> 00:49:48,650
applications security tools we want them

1222
00:49:46,790 --> 00:49:50,509
to use this technology to protect

1223
00:49:48,650 --> 00:49:54,110
themselves because we can raise the bar

1224
00:49:50,510 --> 00:49:56,600
for you know the other 94% of developers

1225
00:49:54,110 --> 00:49:58,220
in the world that don't have access to

1226
00:49:56,600 --> 00:50:00,950
you know all the products that are in

1227
00:49:58,220 --> 00:50:02,720
the other room we're making it free for

1228
00:50:00,950 --> 00:50:05,149
them so they can raise the bar on

1229
00:50:02,720 --> 00:50:06,980
security it's for Java and.net right now

1230
00:50:05,150 --> 00:50:10,240
but very soon we'll be releasing node

1231
00:50:06,980 --> 00:50:14,210
and Python and Ruby as well

1232
00:50:10,240 --> 00:50:19,479
so with that I'll stop we got a few

1233
00:50:14,210 --> 00:50:19,480
minutes for questions if anybody has any

1234
00:50:19,570 --> 00:50:25,840
yeah

1235
00:50:22,280 --> 00:50:28,880
oh yeah it's a great question so

1236
00:50:25,840 --> 00:50:32,420
serverless platforms don't yet have a

1237
00:50:28,880 --> 00:50:34,610
good instrumentation API we're working

1238
00:50:32,420 --> 00:50:37,220
really hard to figure out the best way

1239
00:50:34,610 --> 00:50:38,390
to instrument serverless apps and you

1240
00:50:37,220 --> 00:50:43,759
know our goal is to be there before

1241
00:50:38,390 --> 00:50:47,180
service gets really huge but it's it's

1242
00:50:43,760 --> 00:50:49,220
still kind of an RD area right now but

1243
00:50:47,180 --> 00:50:50,779
ultimately I believe that all software

1244
00:50:49,220 --> 00:50:55,399
in the world will be instrumented for

1245
00:50:50,780 --> 00:50:59,300
security it it's crazy to me that it's

1246
00:50:55,400 --> 00:51:01,130
not actually but whether it's software

1247
00:50:59,300 --> 00:51:03,320
that's in your car or your blender or

1248
00:51:01,130 --> 00:51:05,360
the Space Shuttle or whatever it needs

1249
00:51:03,320 --> 00:51:06,290
to be instrumented so we can see what's

1250
00:51:05,360 --> 00:51:09,530
going on in there

1251
00:51:06,290 --> 00:51:11,270
so that's yeah it'll be there it comes

1252
00:51:09,530 --> 00:51:12,800
with a really large set of built-in

1253
00:51:11,270 --> 00:51:14,420
rules like if you imagine like kind of

1254
00:51:12,800 --> 00:51:16,580
all the things that SAS can do and all

1255
00:51:14,420 --> 00:51:19,610
the things that desk can do you know we

1256
00:51:16,580 --> 00:51:20,810
we're a superset of that but I feel

1257
00:51:19,610 --> 00:51:24,020
pretty strongly that you should be able

1258
00:51:20,810 --> 00:51:26,060
to add custom rules because you know

1259
00:51:24,020 --> 00:51:31,130
most of what comes with tools or what I

1260
00:51:26,060 --> 00:51:32,330
call negative rules they detect behavior

1261
00:51:31,130 --> 00:51:33,190
in an application that should never

1262
00:51:32,330 --> 00:51:36,080
happen

1263
00:51:33,190 --> 00:51:40,460
I'm much it's much more assurance if you

1264
00:51:36,080 --> 00:51:42,319
say this is the only way that we access

1265
00:51:40,460 --> 00:51:43,490
the database in this or this is the only

1266
00:51:42,320 --> 00:51:46,040
way that we should do an access control

1267
00:51:43,490 --> 00:51:47,990
check and so you know enabling those

1268
00:51:46,040 --> 00:51:51,920
positive rules is part of it

1269
00:51:47,990 --> 00:51:54,049
yeah but I'll tell you this most people

1270
00:51:51,920 --> 00:51:55,580
don't build custom rules whether they're

1271
00:51:54,050 --> 00:51:58,550
for dynamic tools or static tools or

1272
00:51:55,580 --> 00:52:01,310
contrast most people don't do it I think

1273
00:51:58,550 --> 00:52:03,050
until you until you dig out from that

1274
00:52:01,310 --> 00:52:05,570
backlog of security vulnerabilities that

1275
00:52:03,050 --> 00:52:06,980
you got piled up in the corner then it

1276
00:52:05,570 --> 00:52:08,630
doesn't make a ton of sense to start

1277
00:52:06,980 --> 00:52:10,480
raising the bar and doing more custom

1278
00:52:08,630 --> 00:52:14,180
things at least for most organizations

1279
00:52:10,480 --> 00:52:17,360
the good news is that instrumentation is

1280
00:52:14,180 --> 00:52:21,080
a really good match for API and micro

1281
00:52:17,360 --> 00:52:24,020
services where static and dynamic tools

1282
00:52:21,080 --> 00:52:25,279
really flounder for a variety of reasons

1283
00:52:24,020 --> 00:52:26,210
that I'd be happy to go into but they

1284
00:52:25,280 --> 00:52:29,180
don't work very well on those

1285
00:52:26,210 --> 00:52:30,270
technologies but for instrumentation it

1286
00:52:29,180 --> 00:52:31,649
works

1287
00:52:30,270 --> 00:52:33,480
naturally because it's you know we just

1288
00:52:31,650 --> 00:52:37,100
see it from the inside it looks a lot

1289
00:52:33,480 --> 00:52:40,320
like any other kind of app yeah yeah

1290
00:52:37,100 --> 00:52:43,110
look I love AI I tried to major in AI in

1291
00:52:40,320 --> 00:52:45,090
college many years ago but it's not

1292
00:52:43,110 --> 00:52:50,520
really appropriate for this set of

1293
00:52:45,090 --> 00:52:51,720
problems and I'll tell you why for the

1294
00:52:50,520 --> 00:52:53,790
things that we know about like we've

1295
00:52:51,720 --> 00:52:56,310
known about sequel injection for 25

1296
00:52:53,790 --> 00:52:58,740
years XSS and CRF and all those things

1297
00:52:56,310 --> 00:53:00,450
they're well understood we know exactly

1298
00:52:58,740 --> 00:53:02,490
the pattern of behavior that we want to

1299
00:53:00,450 --> 00:53:04,680
prevent and so for those things AI is

1300
00:53:02,490 --> 00:53:07,589
dumb because it's much better to write a

1301
00:53:04,680 --> 00:53:09,690
rule that we absolutely crystal-clear

1302
00:53:07,590 --> 00:53:10,830
understand rather than training some ml

1303
00:53:09,690 --> 00:53:12,090
thing that we don't really understand

1304
00:53:10,830 --> 00:53:14,130
how it works right so that's four things

1305
00:53:12,090 --> 00:53:15,660
that we know but you might say hey why

1306
00:53:14,130 --> 00:53:18,030
don't we use AI for the we don't

1307
00:53:15,660 --> 00:53:19,950
know about new attacks and stuff the

1308
00:53:18,030 --> 00:53:22,760
problem there is there's no data set

1309
00:53:19,950 --> 00:53:24,750
every application security attack looks

1310
00:53:22,760 --> 00:53:26,400
different from the stuff that came

1311
00:53:24,750 --> 00:53:29,310
before and if you want to have AI you

1312
00:53:26,400 --> 00:53:31,320
got if a big data set to train the AI to

1313
00:53:29,310 --> 00:53:33,270
identify it and we don't have that for

1314
00:53:31,320 --> 00:53:34,890
new stuff so that leaves you in this

1315
00:53:33,270 --> 00:53:36,630
weird no-man's land where AI isn't good

1316
00:53:34,890 --> 00:53:37,799
for stuff that we know about and it's

1317
00:53:36,630 --> 00:53:41,070
not good for stuff we don't know about

1318
00:53:37,800 --> 00:53:42,450
so to me it's like screw it I'm sorry

1319
00:53:41,070 --> 00:53:45,480
it's like a solution looking for a

1320
00:53:42,450 --> 00:53:47,310
problem so there's not that much mystery

1321
00:53:45,480 --> 00:53:49,320
I mean there's like maybe one new class

1322
00:53:47,310 --> 00:53:50,370
of security attacks you know security

1323
00:53:49,320 --> 00:53:53,490
vulnerabilities that comes out every

1324
00:53:50,370 --> 00:53:56,279
year and it's better to just study it

1325
00:53:53,490 --> 00:53:59,100
and you know figure out what is the

1326
00:53:56,280 --> 00:54:01,590
exact rule that we want to prevent it's

1327
00:53:59,100 --> 00:54:04,049
it's the further you get away from the

1328
00:54:01,590 --> 00:54:05,700
code and the data the more AI sounds

1329
00:54:04,050 --> 00:54:07,350
like a good idea because it's it's much

1330
00:54:05,700 --> 00:54:08,939
messier like if you're gonna laugh all

1331
00:54:07,350 --> 00:54:10,110
of a sudden you know maybe it's like

1332
00:54:08,940 --> 00:54:11,430
well we'll just we can't write or

1333
00:54:10,110 --> 00:54:12,540
crystal clear rule so we'll just write

1334
00:54:11,430 --> 00:54:14,520
this fuzzy rule that tries to

1335
00:54:12,540 --> 00:54:18,990
approximate good but it's never gonna

1336
00:54:14,520 --> 00:54:20,220
work yeah well I think I'm out of time

1337
00:54:18,990 --> 00:54:21,330
thank you very much there's a booth out

1338
00:54:20,220 --> 00:54:24,200
there I'm gonna be standing there for a

1339
00:54:21,330 --> 00:54:24,200
while so please come talk

1340
00:54:24,300 --> 00:54:26,360
you

1341
00:54:33,750 --> 00:54:35,810
you

