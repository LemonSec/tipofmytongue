1
00:00:03,200 --> 00:00:18,240
[Music]

2
00:00:18,240 --> 00:00:21,119
okay hi everyone we're here to talk

3
00:00:21,119 --> 00:00:23,760
about ssl health and how to get out of

4
00:00:23,760 --> 00:00:26,480
that hill using tools like cert manager

5
00:00:26,480 --> 00:00:29,679
to automate your certificate management

6
00:00:29,679 --> 00:00:31,359
so as promised i'm going to say a little

7
00:00:31,359 --> 00:00:33,360
bit about ourselves i'm gal with me i

8
00:00:33,360 --> 00:00:35,120
have jeong and ajam

9
00:00:35,120 --> 00:00:37,120
the three of us work for talis and our

10
00:00:37,120 --> 00:00:40,239
cpl department it's down stands for

11
00:00:40,239 --> 00:00:42,879
cloud protections and licensing

12
00:00:42,879 --> 00:00:44,800
previously we previously we all worked

13
00:00:44,800 --> 00:00:47,280
for gemalto and a few years ago gemalto

14
00:00:47,280 --> 00:00:49,200
was acquired by talus

15
00:00:49,200 --> 00:00:51,280
both talus and gemato might not be

16
00:00:51,280 --> 00:00:53,280
household names and the reason for that

17
00:00:53,280 --> 00:00:55,280
is because we're business focused

18
00:00:55,280 --> 00:00:57,440
products and not consumer focused we do

19
00:00:57,440 --> 00:01:00,000
mainly business to business

20
00:01:00,000 --> 00:01:01,840
that being said both companies have a

21
00:01:01,840 --> 00:01:03,920
rich history of developing digital

22
00:01:03,920 --> 00:01:06,479
security solutions these solutions are

23
00:01:06,479 --> 00:01:08,799
used by banks enterprises

24
00:01:08,799 --> 00:01:11,360
telecom operators governments and

25
00:01:11,360 --> 00:01:14,640
departments of defenses

26
00:01:14,640 --> 00:01:16,080
the three of us work on a product that's

27
00:01:16,080 --> 00:01:18,080
called staff that stands for safenet

28
00:01:18,080 --> 00:01:19,840
trusted access it's an identity

29
00:01:19,840 --> 00:01:21,680
management solution and it's deployed

30
00:01:21,680 --> 00:01:25,280
both both on aws and on gcp

31
00:01:25,280 --> 00:01:27,759
it's a pretty complex solution it has

32
00:01:27,759 --> 00:01:31,200
many micro servers micro services and

33
00:01:31,200 --> 00:01:34,240
backend servers and we have

34
00:01:34,240 --> 00:01:36,079
security certificates deployed on all of

35
00:01:36,079 --> 00:01:39,119
them and we have faced issues

36
00:01:39,119 --> 00:01:42,560
made on our staging environment

37
00:01:42,560 --> 00:01:43,840
that were caused because of

38
00:01:43,840 --> 00:01:46,000
misconfigured certificates

39
00:01:46,000 --> 00:01:48,079
and expired certificates we needed to

40
00:01:48,079 --> 00:01:49,920
find a better solution on how to manage

41
00:01:49,920 --> 00:01:52,720
these certificates

42
00:01:53,439 --> 00:01:54,960
so let's go over let's go over our

43
00:01:54,960 --> 00:01:57,200
agenda for today we're first going to

44
00:01:57,200 --> 00:01:58,719
look at the problem what the problem

45
00:01:58,719 --> 00:02:00,479
actually is then we're going to look at

46
00:02:00,479 --> 00:02:02,240
acme protocol

47
00:02:02,240 --> 00:02:04,079
at let's encrypt and a demo with let's

48
00:02:04,079 --> 00:02:06,479
encrypt a cert manager and a demo with

49
00:02:06,479 --> 00:02:07,840
short manager

50
00:02:07,840 --> 00:02:09,840
issues and limitations that we have and

51
00:02:09,840 --> 00:02:13,360
we're going to have some time for q a

52
00:02:14,560 --> 00:02:16,640
so what is the problem or the hell we're

53
00:02:16,640 --> 00:02:18,879
talking about so all of us know that we

54
00:02:18,879 --> 00:02:20,959
need to encrypt our data in transit we

55
00:02:20,959 --> 00:02:23,280
need that both for security issues

56
00:02:23,280 --> 00:02:25,760
and for compliances but in order to

57
00:02:25,760 --> 00:02:28,319
encrypt our data we need security

58
00:02:28,319 --> 00:02:29,680
security certificate or sign

59
00:02:29,680 --> 00:02:30,800
certificates

60
00:02:30,800 --> 00:02:32,480
and these certificates have to be

61
00:02:32,480 --> 00:02:34,800
renewed if we forget to renew one of

62
00:02:34,800 --> 00:02:37,120
these certificates or you misconfigure

63
00:02:37,120 --> 00:02:39,840
them we might have an outage

64
00:02:39,840 --> 00:02:41,680
and the manual certificate lifecycle

65
00:02:41,680 --> 00:02:43,840
management it really adds a lot of

66
00:02:43,840 --> 00:02:46,640
overhead to do it if you do it manually

67
00:02:46,640 --> 00:02:48,879
in 2021 this year state of the machine

68
00:02:48,879 --> 00:02:50,480
identity management

69
00:02:50,480 --> 00:02:53,040
did a survey and then that survey 40 of

70
00:02:53,040 --> 00:02:54,560
the respondents

71
00:02:54,560 --> 00:02:56,319
said that they still manage their

72
00:02:56,319 --> 00:02:58,560
certificates using spreadsheets on

73
00:02:58,560 --> 00:03:00,720
average each of these companies

74
00:03:00,720 --> 00:03:02,640
had three outages that were caused

75
00:03:02,640 --> 00:03:05,599
because of expired certificates

76
00:03:05,599 --> 00:03:08,480
in the last three years

77
00:03:09,360 --> 00:03:11,040
so let's take a look at one of these

78
00:03:11,040 --> 00:03:12,319
outages

79
00:03:12,319 --> 00:03:15,040
this year in april epic games had an

80
00:03:15,040 --> 00:03:16,800
outage that was caused because of

81
00:03:16,800 --> 00:03:18,400
expired certificate

82
00:03:18,400 --> 00:03:19,920
instead of hiding this data they

83
00:03:19,920 --> 00:03:21,440
actually

84
00:03:21,440 --> 00:03:23,200
published a play-by-play of what

85
00:03:23,200 --> 00:03:24,239
happened

86
00:03:24,239 --> 00:03:25,840
and they're using it as a lesson learned

87
00:03:25,840 --> 00:03:28,319
example so let's take a look at at that

88
00:03:28,319 --> 00:03:31,519
timeline that they they published

89
00:03:31,519 --> 00:03:33,760
at 12 p.m one of their

90
00:03:33,760 --> 00:03:36,720
wild card certificates expired

91
00:03:36,720 --> 00:03:39,680
this this wild card was used at hundreds

92
00:03:39,680 --> 00:03:41,920
of their backend servers

93
00:03:41,920 --> 00:03:44,560
and the outage was really widespread it

94
00:03:44,560 --> 00:03:47,120
was in fortify rocket league their

95
00:03:47,120 --> 00:03:48,720
online services

96
00:03:48,720 --> 00:03:52,400
and on their in their game play store

97
00:03:52,400 --> 00:03:54,239
the good thing is that it took

98
00:03:54,239 --> 00:03:56,799
operations relatively a quick time

99
00:03:56,799 --> 00:03:58,640
almost 12 minutes to realize the cause

100
00:03:58,640 --> 00:04:01,040
of the outage they realized that it was

101
00:04:01,040 --> 00:04:02,959
the expired ticket

102
00:04:02,959 --> 00:04:05,040
the moment they realized it they started

103
00:04:05,040 --> 00:04:08,159
renewing the ticket and started

104
00:04:08,159 --> 00:04:10,239
rolling out the renewed ticket to all

105
00:04:10,239 --> 00:04:12,799
their backend servers by 12 37 they

106
00:04:12,799 --> 00:04:14,480
already started the process of of

107
00:04:14,480 --> 00:04:16,880
rolling out their certificate

108
00:04:16,880 --> 00:04:18,798
at this time they already had 25 people

109
00:04:18,798 --> 00:04:20,639
that were directly involved involved in

110
00:04:20,639 --> 00:04:21,759
the issue

111
00:04:21,759 --> 00:04:23,680
and many more that were observing or

112
00:04:23,680 --> 00:04:25,199
handling small fires that are up to

113
00:04:25,199 --> 00:04:28,080
because of that outage

114
00:04:28,080 --> 00:04:30,639
1246 they already managed to roll out

115
00:04:30,639 --> 00:04:32,479
their expiration their expired

116
00:04:32,479 --> 00:04:35,120
certificate to all of their servers but

117
00:04:35,120 --> 00:04:38,000
the initial outage exposed a bunch of

118
00:04:38,000 --> 00:04:40,800
infrastructure issues they had

119
00:04:40,800 --> 00:04:43,440
and the whole outage um ended up in a

120
00:04:43,440 --> 00:04:46,080
five and a half hour outage

121
00:04:46,080 --> 00:04:48,080
since then epic games has actually been

122
00:04:48,080 --> 00:04:51,280
a very loud advocate about automating

123
00:04:51,280 --> 00:04:54,400
your man your certificate management

124
00:04:54,400 --> 00:04:56,560
epic games is not the only company that

125
00:04:56,560 --> 00:04:58,960
suffered outages because of expired

126
00:04:58,960 --> 00:05:00,560
certificates other examples are

127
00:05:00,560 --> 00:05:02,240
microsoft teams

128
00:05:02,240 --> 00:05:05,919
azure id and google voice

129
00:05:07,520 --> 00:05:09,280
so let's take a look why it's so

130
00:05:09,280 --> 00:05:11,600
complicated to manage your certificates

131
00:05:11,600 --> 00:05:13,680
the traditional way

132
00:05:13,680 --> 00:05:15,280
let's say let's say you're a server

133
00:05:15,280 --> 00:05:16,960
admin and you want to add a signed

134
00:05:16,960 --> 00:05:19,759
certificate to yours to your server the

135
00:05:19,759 --> 00:05:22,080
first step you want to gonna do

136
00:05:22,080 --> 00:05:24,720
is create a csr or a certificate signing

137
00:05:24,720 --> 00:05:25,759
request

138
00:05:25,759 --> 00:05:28,400
this csr will include some identifying

139
00:05:28,400 --> 00:05:30,960
data things like your company name

140
00:05:30,960 --> 00:05:33,280
your domain name and

141
00:05:33,280 --> 00:05:35,120
and your location and a public key as

142
00:05:35,120 --> 00:05:36,560
well

143
00:05:36,560 --> 00:05:38,720
once you created your csr you can you

144
00:05:38,720 --> 00:05:41,600
can send the csr to rca or certificate

145
00:05:41,600 --> 00:05:43,199
authority

146
00:05:43,199 --> 00:05:44,320
the first thing that you're going to

147
00:05:44,320 --> 00:05:46,800
have to the ca is going to want is for

148
00:05:46,800 --> 00:05:48,960
you to prove ownership of your domain

149
00:05:48,960 --> 00:05:52,000
this might sound like a very simple step

150
00:05:52,000 --> 00:05:54,400
but imagine a situation when you have

151
00:05:54,400 --> 00:05:56,319
many back-end servers

152
00:05:56,319 --> 00:05:58,479
and many domains you might actually not

153
00:05:58,479 --> 00:06:00,639
even have access to the email that you

154
00:06:00,639 --> 00:06:03,680
need in order to to prove your ownership

155
00:06:03,680 --> 00:06:05,360
once you've overcome this hurdle that

156
00:06:05,360 --> 00:06:06,960
seems small

157
00:06:06,960 --> 00:06:08,880
the ca can

158
00:06:08,880 --> 00:06:10,240
issue your signed certificate and you

159
00:06:10,240 --> 00:06:12,319
can obtain it from the server yeah you

160
00:06:12,319 --> 00:06:15,039
got you've got your ticket

161
00:06:15,039 --> 00:06:16,960
once you have it in your hand you want

162
00:06:16,960 --> 00:06:18,400
to the next step you want to do is

163
00:06:18,400 --> 00:06:20,319
update your server key store to use the

164
00:06:20,319 --> 00:06:22,560
retrieved sign certificate

165
00:06:22,560 --> 00:06:23,680
then you're going to go from the

166
00:06:23,680 --> 00:06:25,440
situation when you have this annoying

167
00:06:25,440 --> 00:06:28,080
your connection is not private message

168
00:06:28,080 --> 00:06:29,680
to everything is okay everything is

169
00:06:29,680 --> 00:06:30,880
signed

170
00:06:30,880 --> 00:06:33,280
but you have to repeat this process with

171
00:06:33,280 --> 00:06:34,960
every sign certificate you want you want

172
00:06:34,960 --> 00:06:36,639
to issue and whenever

173
00:06:36,639 --> 00:06:40,080
your signed certificate expires

174
00:06:41,280 --> 00:06:43,039
so obviously what are the disadvantages

175
00:06:43,039 --> 00:06:44,960
of this approach it's time consuming and

176
00:06:44,960 --> 00:06:47,600
it has many complex tasks

177
00:06:47,600 --> 00:06:50,000
and steps and because of that it's human

178
00:06:50,000 --> 00:06:52,240
error prone and you have to remember

179
00:06:52,240 --> 00:06:54,000
remember those spreadsheets you have to

180
00:06:54,000 --> 00:06:55,680
remember to renew every one of your

181
00:06:55,680 --> 00:06:58,400
certificate before it expires

182
00:06:58,400 --> 00:07:00,560
and if you have a system that has a lot

183
00:07:00,560 --> 00:07:02,639
of micro services it's an addition

184
00:07:02,639 --> 00:07:04,240
overhead because you have to deploy your

185
00:07:04,240 --> 00:07:06,080
ticket your certificates to every one of

186
00:07:06,080 --> 00:07:08,080
your microservices and it's a big

187
00:07:08,080 --> 00:07:10,000
overhead

188
00:07:10,000 --> 00:07:11,840
so here comes our first

189
00:07:11,840 --> 00:07:12,639
first

190
00:07:12,639 --> 00:07:14,240
first tool to the rescue it's called

191
00:07:14,240 --> 00:07:17,199
acme protocol and it provides a simple a

192
00:07:17,199 --> 00:07:19,440
simplified way to process and obtaining

193
00:07:19,440 --> 00:07:22,880
your your certificates

194
00:07:23,759 --> 00:07:25,840
what does the acme actually stand for

195
00:07:25,840 --> 00:07:28,080
it's automated certificate management

196
00:07:28,080 --> 00:07:29,919
environment and is primarily used to

197
00:07:29,919 --> 00:07:32,800
obtain domain validated certificates

198
00:07:32,800 --> 00:07:34,800
the whole idea behind it as i said is to

199
00:07:34,800 --> 00:07:37,039
minimize human intervention

200
00:07:37,039 --> 00:07:39,039
it's been developed and used by let's

201
00:07:39,039 --> 00:07:41,440
encrypt which is an open source

202
00:07:41,440 --> 00:07:44,639
and it's been a standard since 2019. i'm

203
00:07:44,639 --> 00:07:46,319
going to pass it to work john that's

204
00:07:46,319 --> 00:07:48,240
going to show you some examples of acme

205
00:07:48,240 --> 00:07:49,759
protocol and how to use it and let's

206
00:07:49,759 --> 00:07:51,759
encrypt

207
00:07:51,759 --> 00:07:54,080
thank you

208
00:07:56,000 --> 00:07:58,639
so there are two parts two key parts of

209
00:07:58,639 --> 00:08:00,960
acme protocol one is solver and the

210
00:08:00,960 --> 00:08:05,199
other client so acme server is

211
00:08:05,199 --> 00:08:07,840
a certificate authority uh

212
00:08:07,840 --> 00:08:08,800
which

213
00:08:08,800 --> 00:08:10,879
is capable of issuing signed certificate

214
00:08:10,879 --> 00:08:14,319
automatically so let's encrypt bypass

215
00:08:14,319 --> 00:08:17,039
and zero ssl those are the famous uh

216
00:08:17,039 --> 00:08:19,599
providers of acme solver

217
00:08:19,599 --> 00:08:22,000
and ethnic client typically runs on a

218
00:08:22,000 --> 00:08:25,759
web server and it proves to acme solver

219
00:08:25,759 --> 00:08:27,520
that this domain

220
00:08:27,520 --> 00:08:29,680
on the web server

221
00:08:29,680 --> 00:08:32,159
this web server is really having a

222
00:08:32,159 --> 00:08:35,120
control over the domain which it needs

223
00:08:35,120 --> 00:08:35,919
to

224
00:08:35,919 --> 00:08:40,399
get the search sign certificate for

225
00:08:40,399 --> 00:08:42,719
so we'll have a look at the flow of acme

226
00:08:42,719 --> 00:08:44,880
protocol with comparing with the

227
00:08:44,880 --> 00:08:46,880
previous traditional certificate

228
00:08:46,880 --> 00:08:49,200
management model so if you remember it

229
00:08:49,200 --> 00:08:51,120
was this software admin who is

230
00:08:51,120 --> 00:08:53,279
initiating

231
00:08:53,279 --> 00:08:55,920
the certificate request

232
00:08:55,920 --> 00:08:58,240
and who is responsible for renewing the

233
00:08:58,240 --> 00:09:01,519
certificate upon is expired

234
00:09:01,519 --> 00:09:02,640
in this case

235
00:09:02,640 --> 00:09:05,040
uh with acme protocol it will be the

236
00:09:05,040 --> 00:09:06,399
acme client

237
00:09:06,399 --> 00:09:09,279
who is initiating the certificate uh

238
00:09:09,279 --> 00:09:11,600
request

239
00:09:11,600 --> 00:09:14,880
by sending out

240
00:09:16,240 --> 00:09:18,000
the process with

241
00:09:18,000 --> 00:09:19,600
a key pair

242
00:09:19,600 --> 00:09:23,040
with a key pair so that request will

243
00:09:23,040 --> 00:09:24,800
contain

244
00:09:24,800 --> 00:09:27,920
the account creation request

245
00:09:27,920 --> 00:09:30,720
and an optional email address that will

246
00:09:30,720 --> 00:09:32,959
be used for later

247
00:09:32,959 --> 00:09:36,160
for the issued signed certificate for

248
00:09:36,160 --> 00:09:38,320
its expiry or renewal

249
00:09:38,320 --> 00:09:40,080
and it will contain

250
00:09:40,080 --> 00:09:42,480
the domain information and public key

251
00:09:42,480 --> 00:09:44,959
signed by private key

252
00:09:44,959 --> 00:09:46,959
so once it is sent

253
00:09:46,959 --> 00:09:48,880
the admin server will be able to

254
00:09:48,880 --> 00:09:51,760
identify the acme client

255
00:09:51,760 --> 00:09:54,480
and acme solver will

256
00:09:54,480 --> 00:09:57,279
send out the challenge

257
00:09:57,279 --> 00:09:59,600
to the client

258
00:09:59,600 --> 00:10:02,560
so that it can verify the ownership of

259
00:10:02,560 --> 00:10:06,160
the domain so it would ask

260
00:10:06,160 --> 00:10:07,440
provision

261
00:10:07,440 --> 00:10:09,440
a specific contents in a specific

262
00:10:09,440 --> 00:10:12,160
location of the web server

263
00:10:12,160 --> 00:10:14,079
so it will be something like

264
00:10:14,079 --> 00:10:16,479
domain

265
00:10:17,120 --> 00:10:18,800
cf www.acmedemo.cf.

266
00:10:18,800 --> 00:10:22,640
wellness acme challenge slash nonce

267
00:10:22,640 --> 00:10:24,959
or it would ask

268
00:10:24,959 --> 00:10:26,720
for provisioning

269
00:10:26,720 --> 00:10:29,120
the dns record with the specific

270
00:10:29,120 --> 00:10:32,079
contents

271
00:10:32,079 --> 00:10:33,920
so once

272
00:10:33,920 --> 00:10:36,959
those contents are provided provisioned

273
00:10:36,959 --> 00:10:38,800
by the acme client

274
00:10:38,800 --> 00:10:41,680
then acme server will fetch

275
00:10:41,680 --> 00:10:42,959
the content

276
00:10:42,959 --> 00:10:45,600
in order to verify the ownership of the

277
00:10:45,600 --> 00:10:47,839
domain and once

278
00:10:47,839 --> 00:10:49,360
that is done

279
00:10:49,360 --> 00:10:52,160
acne server finally able to issuing the

280
00:10:52,160 --> 00:10:55,040
science certificate for the domain

281
00:10:55,040 --> 00:10:57,360
and most of all the good thing over here

282
00:10:57,360 --> 00:10:59,519
is if you remember in the previous

283
00:10:59,519 --> 00:11:02,000
example with the traditional model it

284
00:11:02,000 --> 00:11:03,839
was if our admin

285
00:11:03,839 --> 00:11:05,120
needs to

286
00:11:05,120 --> 00:11:07,680
repeat this process again and again for

287
00:11:07,680 --> 00:11:09,279
the certificates

288
00:11:09,279 --> 00:11:11,040
that is expiring

289
00:11:11,040 --> 00:11:13,519
but in this case once this chain has

290
00:11:13,519 --> 00:11:16,480
built then it doesn't need to be

291
00:11:16,480 --> 00:11:19,120
repeated again and again

292
00:11:19,120 --> 00:11:21,680
and also in addition you can see how

293
00:11:21,680 --> 00:11:24,959
many steps has got dropped out so it

294
00:11:24,959 --> 00:11:28,240
became much simplified

295
00:11:28,240 --> 00:11:30,320
so we're going to have a look at the

296
00:11:30,320 --> 00:11:33,600
demo with using the let's encrypt that i

297
00:11:33,600 --> 00:11:35,920
mentioned briefly in the previous slide

298
00:11:35,920 --> 00:11:38,880
so they are most well-known acme server

299
00:11:38,880 --> 00:11:40,560
implementation

300
00:11:40,560 --> 00:11:43,839
since they invented the acme protocol

301
00:11:43,839 --> 00:11:44,720
and

302
00:11:44,720 --> 00:11:47,360
they are also providing the ethnic

303
00:11:47,360 --> 00:11:48,959
client which is third book the

304
00:11:48,959 --> 00:11:51,279
certificate management agent

305
00:11:51,279 --> 00:11:53,760
that can be run on many types of web

306
00:11:53,760 --> 00:11:56,720
server on the operating system

307
00:11:56,720 --> 00:11:59,360
you name it so i'm going to use those

308
00:11:59,360 --> 00:12:00,399
two

309
00:12:00,399 --> 00:12:02,240
for my demo

310
00:12:02,240 --> 00:12:05,920
so let's have a look at the demo

311
00:12:05,920 --> 00:12:09,120
and i'll present you first with the full

312
00:12:09,120 --> 00:12:10,560
automated

313
00:12:10,560 --> 00:12:13,920
case scenario first

314
00:12:16,880 --> 00:12:20,000
so for this demo i am running the simple

315
00:12:20,000 --> 00:12:23,600
nginx web server running on my domain

316
00:12:23,600 --> 00:12:25,680
which is acmedemo.cf

317
00:12:25,680 --> 00:12:27,120
and as you can see

318
00:12:27,120 --> 00:12:28,800
it doesn't have the secured connection

319
00:12:28,800 --> 00:12:30,800
yet since i haven't got the ssl

320
00:12:30,800 --> 00:12:32,480
certificate yet

321
00:12:32,480 --> 00:12:33,440
so

322
00:12:33,440 --> 00:12:35,920
on the web server i'm going to install

323
00:12:35,920 --> 00:12:38,720
the sort book agent the acme client

324
00:12:38,720 --> 00:12:39,600
first

325
00:12:39,600 --> 00:12:41,200
and i'm going to

326
00:12:41,200 --> 00:12:43,519
execute this sort book

327
00:12:43,519 --> 00:12:45,680
automated

328
00:12:45,680 --> 00:12:47,760
executing command

329
00:12:47,760 --> 00:12:49,200
so once i

330
00:12:49,200 --> 00:12:51,680
execute the search both command it will

331
00:12:51,680 --> 00:12:54,320
be asked your email address

332
00:12:54,320 --> 00:12:57,040
that will be used for account creation

333
00:12:57,040 --> 00:12:59,760
and you can get the information of the

334
00:12:59,760 --> 00:13:02,240
signed certificate issued later on for

335
00:13:02,240 --> 00:13:06,240
its renewal process or rebook

336
00:13:06,240 --> 00:13:08,560
and

337
00:13:09,040 --> 00:13:10,240
you're going to

338
00:13:10,240 --> 00:13:13,200
accept its terms of service agreement

339
00:13:13,200 --> 00:13:15,519
and then

340
00:13:15,519 --> 00:13:17,920
most importantly you need to give the

341
00:13:17,920 --> 00:13:19,600
domain

342
00:13:19,600 --> 00:13:22,079
to this client

343
00:13:22,079 --> 00:13:24,720
and once the domain is given then it

344
00:13:24,720 --> 00:13:26,480
will going to

345
00:13:26,480 --> 00:13:29,040
communicate with acme client between

346
00:13:29,040 --> 00:13:30,639
acme client and the server they will

347
00:13:30,639 --> 00:13:32,720
exchange

348
00:13:32,720 --> 00:13:34,959
the challenges and the verification

349
00:13:34,959 --> 00:13:37,040
automatically

350
00:13:37,040 --> 00:13:38,480
so

351
00:13:38,480 --> 00:13:40,160
i'll wait for

352
00:13:40,160 --> 00:13:43,279
the command executed

353
00:13:46,639 --> 00:13:49,839
and in a few minutes you will see

354
00:13:49,839 --> 00:13:52,320
the certificate has been received and

355
00:13:52,320 --> 00:13:53,839
the keys are

356
00:13:53,839 --> 00:13:56,800
stored in the in your web server and the

357
00:13:56,800 --> 00:13:59,680
certificate has successfully deployed

358
00:13:59,680 --> 00:14:02,639
and once this is done i'll go back to my

359
00:14:02,639 --> 00:14:04,079
web browser

360
00:14:04,079 --> 00:14:06,959
and i'll refresh the page

361
00:14:06,959 --> 00:14:09,360
and voila you can see

362
00:14:09,360 --> 00:14:11,920
now the connection is secured and the

363
00:14:11,920 --> 00:14:14,160
certificate was provided by let's

364
00:14:14,160 --> 00:14:15,680
encrypt

365
00:14:15,680 --> 00:14:18,720
so this was a

366
00:14:18,720 --> 00:14:21,360
full automated scenario so for your

367
00:14:21,360 --> 00:14:23,600
information i'll give you another look

368
00:14:23,600 --> 00:14:25,839
at the manual configuration case in

369
00:14:25,839 --> 00:14:28,720
detail the first case will be the http

370
00:14:28,720 --> 00:14:31,720
challenge

371
00:14:32,959 --> 00:14:34,560
so in order to

372
00:14:34,560 --> 00:14:36,959
have the http challenge you need to

373
00:14:36,959 --> 00:14:38,959
update your web server

374
00:14:38,959 --> 00:14:41,519
your configuration and specifying the

375
00:14:41,519 --> 00:14:44,480
location where you want to have the

376
00:14:44,480 --> 00:14:45,760
provisioned

377
00:14:45,760 --> 00:14:48,560
data for

378
00:14:50,079 --> 00:14:51,920
and then you are running the search

379
00:14:51,920 --> 00:14:54,160
board command with preferred challenge

380
00:14:54,160 --> 00:14:56,639
type as http

381
00:14:56,639 --> 00:14:59,120
and it will give you

382
00:14:59,120 --> 00:15:01,040
the instructions of

383
00:15:01,040 --> 00:15:03,199
uh giving you

384
00:15:03,199 --> 00:15:05,519
the domain and once the domain is given

385
00:15:05,519 --> 00:15:08,480
then you will be asked to create

386
00:15:08,480 --> 00:15:10,399
a file

387
00:15:10,399 --> 00:15:12,639
with the contents

388
00:15:12,639 --> 00:15:15,440
on a specific location on the web server

389
00:15:15,440 --> 00:15:17,440
so i'm going to create

390
00:15:17,440 --> 00:15:20,240
the file with the contents

391
00:15:20,240 --> 00:15:24,079
for the domain verification so that

392
00:15:24,079 --> 00:15:26,880
provision data will be fetched by acme

393
00:15:26,880 --> 00:15:28,000
solver

394
00:15:28,000 --> 00:15:30,000
and that will be used for its

395
00:15:30,000 --> 00:15:32,320
verification

396
00:15:32,320 --> 00:15:35,120
so i'll give you uh

397
00:15:35,120 --> 00:15:37,920
i'm going to have the same process for

398
00:15:37,920 --> 00:15:40,279
my another domain given

399
00:15:40,279 --> 00:15:44,079
www.acme demo.cf as well so in this case

400
00:15:44,079 --> 00:15:47,920
i gave the option of driverun since

401
00:15:47,920 --> 00:15:49,120
i already

402
00:15:49,120 --> 00:15:51,759
created the ssl certificate for my

403
00:15:51,759 --> 00:15:54,800
domain in my previous example

404
00:15:54,800 --> 00:15:57,120
so you are not going to see

405
00:15:57,120 --> 00:16:00,399
the actual certificate is redeployed but

406
00:16:00,399 --> 00:16:01,680
if

407
00:16:01,680 --> 00:16:04,240
would have been asked if you want to

408
00:16:04,240 --> 00:16:06,000
revoke the certificate or renew the

409
00:16:06,000 --> 00:16:10,160
certificate without the dry run option

410
00:16:10,160 --> 00:16:12,399
so

411
00:16:13,680 --> 00:16:14,560
here

412
00:16:14,560 --> 00:16:17,199
is the

413
00:16:17,199 --> 00:16:18,800
wizard of

414
00:16:18,800 --> 00:16:20,839
the run

415
00:16:20,839 --> 00:16:22,399
and

416
00:16:22,399 --> 00:16:25,680
also i'll give you some detail for dns

417
00:16:25,680 --> 00:16:27,279
challenge as well

418
00:16:27,279 --> 00:16:29,199
so the scenario will be

419
00:16:29,199 --> 00:16:30,480
the similar

420
00:16:30,480 --> 00:16:32,800
and

421
00:16:32,800 --> 00:16:34,320
the commands

422
00:16:34,320 --> 00:16:36,560
will be the similar except for the

423
00:16:36,560 --> 00:16:39,759
preferred challenge option to dns

424
00:16:39,759 --> 00:16:42,880
samely once you give those domains and

425
00:16:42,880 --> 00:16:46,079
you will be asked to provision

426
00:16:46,079 --> 00:16:47,279
the data

427
00:16:47,279 --> 00:16:49,759
on the dns record

428
00:16:49,759 --> 00:16:53,360
so as you can see once i give

429
00:16:53,360 --> 00:16:55,680
the domain and it will be asked to

430
00:16:55,680 --> 00:16:57,360
create a dns

431
00:16:57,360 --> 00:16:59,600
record

432
00:16:59,600 --> 00:17:02,000
with the contents

433
00:17:02,000 --> 00:17:05,000
so

434
00:17:05,119 --> 00:17:07,520
i edit the record set

435
00:17:07,520 --> 00:17:08,319
and

436
00:17:08,319 --> 00:17:12,240
record type as a text

437
00:17:12,959 --> 00:17:15,599
and create it

438
00:17:15,599 --> 00:17:16,959
and that will be

439
00:17:16,959 --> 00:17:19,039
do the same thing and

440
00:17:19,039 --> 00:17:21,679
also those record will be fetched by

441
00:17:21,679 --> 00:17:23,919
acme solver and

442
00:17:23,919 --> 00:17:26,480
once that is verified then administrator

443
00:17:26,480 --> 00:17:28,559
will be able to issue the signed

444
00:17:28,559 --> 00:17:31,039
certificate for the domain

445
00:17:31,039 --> 00:17:33,440
okay

446
00:17:33,440 --> 00:17:36,480
so as you can see there are uh lots of

447
00:17:36,480 --> 00:17:39,360
benefits out of using the acme

448
00:17:39,360 --> 00:17:42,880
so as you saw on the demo video there

449
00:17:42,880 --> 00:17:47,120
are lots of steps that has been done by

450
00:17:47,120 --> 00:17:49,440
server admin traditionally and those

451
00:17:49,440 --> 00:17:51,840
steps are now

452
00:17:51,840 --> 00:17:53,679
gone

453
00:17:53,679 --> 00:17:56,960
also it is providing the

454
00:17:56,960 --> 00:18:00,880
automation process of issuing the trust

455
00:18:00,880 --> 00:18:03,440
certificate and it will keep track of

456
00:18:03,440 --> 00:18:05,440
the certificate expiration

457
00:18:05,440 --> 00:18:07,440
and it will give you the option for

458
00:18:07,440 --> 00:18:09,840
renewal or bulking the certificate when

459
00:18:09,840 --> 00:18:11,840
it is required

460
00:18:11,840 --> 00:18:14,160
and most of all it is offering you the

461
00:18:14,160 --> 00:18:18,080
best of breed tls and certificate

462
00:18:18,080 --> 00:18:21,600
pki best security best practices

463
00:18:21,600 --> 00:18:23,919
and it is supported by the open source

464
00:18:23,919 --> 00:18:26,480
community which means that it will

465
00:18:26,480 --> 00:18:28,960
be evolving on and on and it will have

466
00:18:28,960 --> 00:18:31,679
the enhancement

467
00:18:33,280 --> 00:18:35,679
and it will also give you the locals of

468
00:18:35,679 --> 00:18:38,960
certificate management cycle

469
00:18:38,960 --> 00:18:41,200
in terms of the human effort and the

470
00:18:41,200 --> 00:18:44,320
time wise as well

471
00:18:44,720 --> 00:18:46,480
and cherry on top

472
00:18:46,480 --> 00:18:48,799
this is free if you are using with the

473
00:18:48,799 --> 00:18:50,320
less encrypt

474
00:18:50,320 --> 00:18:54,240
acme software so now najam will come

475
00:18:54,240 --> 00:18:55,760
and

476
00:18:55,760 --> 00:18:59,840
give a talk for the start manager

477
00:19:01,039 --> 00:19:03,440
thank you

478
00:19:05,919 --> 00:19:09,200
so thank you and he covered you know how

479
00:19:09,200 --> 00:19:11,760
we could sort of use tools

480
00:19:11,760 --> 00:19:12,799
to

481
00:19:12,799 --> 00:19:15,360
uh you know automate the process now we

482
00:19:15,360 --> 00:19:17,039
take it to the next level right so how

483
00:19:17,039 --> 00:19:18,480
do you scale it

484
00:19:18,480 --> 00:19:19,200
right

485
00:19:19,200 --> 00:19:21,679
uh with with third board you have to

486
00:19:21,679 --> 00:19:23,919
integrate it with you know each of your

487
00:19:23,919 --> 00:19:26,160
micro services what if you have tens

488
00:19:26,160 --> 00:19:28,640
hundreds of micro services how how do

489
00:19:28,640 --> 00:19:30,799
you scale it and there comes cert

490
00:19:30,799 --> 00:19:33,440
manager you know search manager it's um

491
00:19:33,440 --> 00:19:35,440
it's a kubernetes add-on

492
00:19:35,440 --> 00:19:37,760
which you know facilitates uh the

493
00:19:37,760 --> 00:19:40,160
automation of the certificate issuance

494
00:19:40,160 --> 00:19:41,520
and uh

495
00:19:41,520 --> 00:19:44,000
the renewal right she uses the acme

496
00:19:44,000 --> 00:19:46,960
protocol and uh integrates the white

497
00:19:46,960 --> 00:19:49,520
with wide variety of dns providers and

498
00:19:49,520 --> 00:19:50,720
that's what

499
00:19:50,720 --> 00:19:53,760
we saw you know that two

500
00:19:53,760 --> 00:19:55,679
parts usually with cert manager it's

501
00:19:55,679 --> 00:19:57,760
easier to do it with integration with

502
00:19:57,760 --> 00:20:00,799
the dns provider

503
00:20:02,720 --> 00:20:04,720
so with search manager there are

504
00:20:04,720 --> 00:20:07,520
a few things that it handles right one

505
00:20:07,520 --> 00:20:10,080
is the integration with communities

506
00:20:10,080 --> 00:20:13,200
right so over there there are basically

507
00:20:13,200 --> 00:20:15,919
uh in kubernetes are three parts to it

508
00:20:15,919 --> 00:20:18,320
uh first part is the

509
00:20:18,320 --> 00:20:19,200
you know

510
00:20:19,200 --> 00:20:21,200
having a web hook that

511
00:20:21,200 --> 00:20:23,679
kubernetes with will call back into cert

512
00:20:23,679 --> 00:20:24,880
manager

513
00:20:24,880 --> 00:20:27,200
when a resource

514
00:20:27,200 --> 00:20:29,600
that has to be handled by a search

515
00:20:29,600 --> 00:20:31,440
manager is created right a certificate

516
00:20:31,440 --> 00:20:34,320
resource is created so the advantage of

517
00:20:34,320 --> 00:20:35,600
that is

518
00:20:35,600 --> 00:20:38,240
in your deployment you're just defining

519
00:20:38,240 --> 00:20:39,840
a manifest

520
00:20:39,840 --> 00:20:40,720
and then

521
00:20:40,720 --> 00:20:43,679
uh cuban kubernetes is going to invoke

522
00:20:43,679 --> 00:20:46,559
that web book and handle it to the

523
00:20:46,559 --> 00:20:48,880
search manager to get take it from there

524
00:20:48,880 --> 00:20:50,480
so the other part is actually

525
00:20:50,480 --> 00:20:52,320
integrating with the

526
00:20:52,320 --> 00:20:54,880
certificate providers and the

527
00:20:54,880 --> 00:20:57,039
dns providers right

528
00:20:57,039 --> 00:20:59,600
and the third is once the certificate is

529
00:20:59,600 --> 00:21:02,320
available is to make that certificate

530
00:21:02,320 --> 00:21:04,320
available to

531
00:21:04,320 --> 00:21:06,240
the uh you know

532
00:21:06,240 --> 00:21:08,320
the containers that are running via

533
00:21:08,320 --> 00:21:10,879
secrets

534
00:21:12,159 --> 00:21:13,760
so next we're going to

535
00:21:13,760 --> 00:21:15,360
have a look at a

536
00:21:15,360 --> 00:21:17,840
demo

537
00:21:17,919 --> 00:21:20,240
okay

538
00:21:21,039 --> 00:21:23,440
playing okay

539
00:21:23,440 --> 00:21:27,120
so uh in a cluster as

540
00:21:27,120 --> 00:21:29,120
saying first let's look at a deployment

541
00:21:29,120 --> 00:21:32,159
right so we've deployed

542
00:21:32,159 --> 00:21:34,880
search manager we can see the three

543
00:21:34,880 --> 00:21:36,799
components that i talked about right so

544
00:21:36,799 --> 00:21:38,240
there's the

545
00:21:38,240 --> 00:21:39,760
search manager itself that will

546
00:21:39,760 --> 00:21:41,600
integrate with

547
00:21:41,600 --> 00:21:44,799
the ca provided c certificate provider

548
00:21:44,799 --> 00:21:47,919
and uh the dns provider and then we have

549
00:21:47,919 --> 00:21:50,720
the web hook and the the injector that

550
00:21:50,720 --> 00:21:51,360
will

551
00:21:51,360 --> 00:21:53,360
get the certain inject into a secret

552
00:21:53,360 --> 00:21:54,240
right

553
00:21:54,240 --> 00:21:56,880
that's just to see that the the pods are

554
00:21:56,880 --> 00:21:59,280
running so first thing we are looking

555
00:21:59,280 --> 00:22:01,600
we're going to look at is an issuer

556
00:22:01,600 --> 00:22:03,520
right so you could have an issue

557
00:22:03,520 --> 00:22:06,320
configure an issuer or a cluster issuer

558
00:22:06,320 --> 00:22:08,159
the difference is an issuer is of a

559
00:22:08,159 --> 00:22:11,280
specific name space cluster issuer is

560
00:22:11,280 --> 00:22:13,919
across the kubernetes cluster

561
00:22:13,919 --> 00:22:17,440
so an issuer is is basically

562
00:22:17,440 --> 00:22:20,559
and we'll look at an example of issuer

563
00:22:20,559 --> 00:22:22,159
so an issuer

564
00:22:22,159 --> 00:22:24,880
uh what you can configure in in an

565
00:22:24,880 --> 00:22:27,919
issuer i wonder if you could read this

566
00:22:27,919 --> 00:22:29,360
too small

567
00:22:29,360 --> 00:22:32,559
yeah so what but what you configure is

568
00:22:32,559 --> 00:22:35,600
one is what type of uh acme server you

569
00:22:35,600 --> 00:22:38,080
are integrating it with the ca provider

570
00:22:38,080 --> 00:22:40,320
that you are integrating it and then the

571
00:22:40,320 --> 00:22:41,120
other

572
00:22:41,120 --> 00:22:44,400
is the setup for your dns integration

573
00:22:44,400 --> 00:22:46,640
here we are using an acme

574
00:22:46,640 --> 00:22:51,280
akamai dns for this demo right so

575
00:22:51,280 --> 00:22:52,640
these are the two things that are

576
00:22:52,640 --> 00:22:54,559
provided and you have your you know

577
00:22:54,559 --> 00:22:57,200
tokens and

578
00:22:57,440 --> 00:22:59,039
stuff to authenticate with the yakima

579
00:22:59,039 --> 00:23:01,039
idns so this

580
00:23:01,039 --> 00:23:03,200
uh and once you do this then you have

581
00:23:03,200 --> 00:23:04,480
the

582
00:23:04,480 --> 00:23:07,440
uh the name of the cluster issuer which

583
00:23:07,440 --> 00:23:09,200
could be used by

584
00:23:09,200 --> 00:23:09,919
the

585
00:23:09,919 --> 00:23:11,679
you know applications then the second

586
00:23:11,679 --> 00:23:14,159
part is for each of your microservices

587
00:23:14,159 --> 00:23:15,760
containers then you can define a

588
00:23:15,760 --> 00:23:18,400
certificate resource right and if you

589
00:23:18,400 --> 00:23:20,799
can see if it's visible the the search

590
00:23:20,799 --> 00:23:22,400
manager you know the api

591
00:23:22,400 --> 00:23:24,480
insertmanager.io right

592
00:23:24,480 --> 00:23:25,679
so here

593
00:23:25,679 --> 00:23:26,559
we

594
00:23:26,559 --> 00:23:28,080
define the

595
00:23:28,080 --> 00:23:30,320
uh the dns

596
00:23:30,320 --> 00:23:32,400
the fqdn that you want the the domain

597
00:23:32,400 --> 00:23:34,840
that you want the cert for uh the

598
00:23:34,840 --> 00:23:36,080
duration so

599
00:23:36,080 --> 00:23:40,080
90 days that's the max for let's encrypt

600
00:23:40,080 --> 00:23:42,400
how much before do you want to renew

601
00:23:42,400 --> 00:23:44,480
this was for 15 days before it will

602
00:23:44,480 --> 00:23:45,600
renew

603
00:23:45,600 --> 00:23:48,559
uh the issuer that you want to reference

604
00:23:48,559 --> 00:23:51,840
for this uh certificate

605
00:23:51,840 --> 00:23:54,000
and then finally the most important

606
00:23:54,000 --> 00:23:55,600
thing is once the certificate is there

607
00:23:55,600 --> 00:23:57,919
where do you want let's encrypt to save

608
00:23:57,919 --> 00:23:59,039
it and then

609
00:23:59,039 --> 00:24:00,000
we are

610
00:24:00,000 --> 00:24:03,120
specifying a secret name

611
00:24:03,120 --> 00:24:05,840
where uh let's encrypt it with save it

612
00:24:05,840 --> 00:24:07,679
and one thing which was not obvious is

613
00:24:07,679 --> 00:24:10,240
now you this the certificate resource

614
00:24:10,240 --> 00:24:11,039
you are

615
00:24:11,039 --> 00:24:13,360
defining in a specific name space a

616
00:24:13,360 --> 00:24:15,200
cluster was in a separate name space

617
00:24:15,200 --> 00:24:15,919
where

618
00:24:15,919 --> 00:24:18,559
you know the the other users might

619
00:24:18,559 --> 00:24:21,360
should not have access to

620
00:24:21,360 --> 00:24:23,360
so just for this example you see that

621
00:24:23,360 --> 00:24:24,880
the secret is not there and then i'm

622
00:24:24,880 --> 00:24:26,799
going to create the

623
00:24:26,799 --> 00:24:29,279
uh kubernetes certificate resource k

624
00:24:29,279 --> 00:24:30,799
over here is just an alias to make it

625
00:24:30,799 --> 00:24:33,760
easy right once i run that

626
00:24:33,760 --> 00:24:35,919
the request will go to

627
00:24:35,919 --> 00:24:38,159
search manager and the certs are issued

628
00:24:38,159 --> 00:24:40,159
so we see over here that the last one

629
00:24:40,159 --> 00:24:42,880
demo that secret has been created right

630
00:24:42,880 --> 00:24:44,799
and we're going to look at the

631
00:24:44,799 --> 00:24:48,080
um look at the content you know quickly

632
00:24:48,080 --> 00:24:49,440
with with uh

633
00:24:49,440 --> 00:24:50,880
uh with a

634
00:24:50,880 --> 00:24:53,440
command to see that it was you know

635
00:24:53,440 --> 00:24:54,880
issued by

636
00:24:54,880 --> 00:24:57,919
uh let's encrypt to see that the

637
00:24:57,919 --> 00:25:02,159
um you know uh the validity periods the

638
00:25:02,159 --> 00:25:05,360
domain it was issued to

639
00:25:05,360 --> 00:25:06,480
uh

640
00:25:06,480 --> 00:25:08,640
in a bit here this is just a command to

641
00:25:08,640 --> 00:25:10,480
pass the secret

642
00:25:10,480 --> 00:25:11,360
and

643
00:25:11,360 --> 00:25:14,159
you know use open ssl to inspect a

644
00:25:14,159 --> 00:25:16,690
simple text

645
00:25:16,690 --> 00:25:19,779
[Music]

646
00:25:21,039 --> 00:25:24,320
okay here again if you look top we see

647
00:25:24,320 --> 00:25:26,559
that this has been issued by let's

648
00:25:26,559 --> 00:25:28,400
encrypt

649
00:25:28,400 --> 00:25:31,120
we see the validity dates you know the

650
00:25:31,120 --> 00:25:32,720
public key

651
00:25:32,720 --> 00:25:35,279
a little bit down we see

652
00:25:35,279 --> 00:25:37,919
you know the

653
00:25:38,240 --> 00:25:40,240
it was a multi-domain certificate so you

654
00:25:40,240 --> 00:25:42,960
can see the sans you could also you you

655
00:25:42,960 --> 00:25:45,200
know specify a wildcard certificate in

656
00:25:45,200 --> 00:25:47,600
here let's encrypt supports that too you

657
00:25:47,600 --> 00:25:49,440
can have all your

658
00:25:49,440 --> 00:25:51,440
you know different uh subject alternate

659
00:25:51,440 --> 00:25:53,520
names that you want to use right

660
00:25:53,520 --> 00:25:54,320
so

661
00:25:54,320 --> 00:25:56,640
once

662
00:25:56,640 --> 00:25:58,960
you have this certificate now the next

663
00:25:58,960 --> 00:26:01,520
part is basically what do you do how do

664
00:26:01,520 --> 00:26:03,600
you integrate it with your application

665
00:26:03,600 --> 00:26:05,919
right so in this case i was

666
00:26:05,919 --> 00:26:08,320
this was just to dis demonstrate getting

667
00:26:08,320 --> 00:26:10,480
the certificate i was using another

668
00:26:10,480 --> 00:26:12,480
you know certificate request which was

669
00:26:12,480 --> 00:26:14,400
the the other one us

670
00:26:14,400 --> 00:26:18,159
lab tls that we used to integrate with

671
00:26:18,159 --> 00:26:21,760
gke ingress right and that is very easy

672
00:26:21,760 --> 00:26:22,960
so the way

673
00:26:22,960 --> 00:26:25,840
uh and also just quickly to show the

674
00:26:25,840 --> 00:26:28,159
details of of this

675
00:26:28,159 --> 00:26:29,120
you know

676
00:26:29,120 --> 00:26:32,799
this request to demonstrate that

677
00:26:32,799 --> 00:26:35,440
by default uh you know

678
00:26:35,440 --> 00:26:38,640
search manager will create a tls

679
00:26:38,640 --> 00:26:40,159
type secret

680
00:26:40,159 --> 00:26:41,120
uh

681
00:26:41,120 --> 00:26:43,120
just the certificates are in pem format

682
00:26:43,120 --> 00:26:45,440
you know the cert and the key file but

683
00:26:45,440 --> 00:26:46,640
you can also

684
00:26:46,640 --> 00:26:49,679
let let's encrypt no to uh you know

685
00:26:49,679 --> 00:26:52,880
create a java key store or a p12 file so

686
00:26:52,880 --> 00:26:54,960
based on what your application needs are

687
00:26:54,960 --> 00:26:57,679
you can specify that right so here again

688
00:26:57,679 --> 00:26:58,720
you can

689
00:26:58,720 --> 00:27:01,200
see that we've specified

690
00:27:01,200 --> 00:27:03,360
that to create a java key store with and

691
00:27:03,360 --> 00:27:05,520
also use a specific

692
00:27:05,520 --> 00:27:07,919
you know secret for protecting the

693
00:27:07,919 --> 00:27:09,120
keystone

694
00:27:09,120 --> 00:27:11,840
password and same for the p1 right so

695
00:27:11,840 --> 00:27:12,960
using a

696
00:27:12,960 --> 00:27:16,400
a secret that we specify

697
00:27:16,400 --> 00:27:18,559
to use as a password to to

698
00:27:18,559 --> 00:27:20,960
protect the p12 file right

699
00:27:20,960 --> 00:27:23,120
and what we specify is the secret name

700
00:27:23,120 --> 00:27:25,520
where uh

701
00:27:25,520 --> 00:27:28,000
search manager is going to store the the

702
00:27:28,000 --> 00:27:29,360
certificate

703
00:27:29,360 --> 00:27:30,960
it's just to again to look at the

704
00:27:30,960 --> 00:27:33,200
certificate it was a wildcard cert that

705
00:27:33,200 --> 00:27:35,520
we wanted to issue

706
00:27:35,520 --> 00:27:37,200
okay now

707
00:27:37,200 --> 00:27:38,640
how do we configure it with the

708
00:27:38,640 --> 00:27:40,320
application it's quite simple right

709
00:27:40,320 --> 00:27:42,000
application needs to support a tls

710
00:27:42,000 --> 00:27:44,320
secret type over here you see at the

711
00:27:44,320 --> 00:27:45,440
bottom

712
00:27:45,440 --> 00:27:48,000
just highlight it just give the secret

713
00:27:48,000 --> 00:27:50,320
name and the secret name is the same

714
00:27:50,320 --> 00:27:52,720
name that we referenced earlier right

715
00:27:52,720 --> 00:27:54,880
and this could be in the same

716
00:27:54,880 --> 00:27:58,159
uh you know manifest now we go this is

717
00:27:58,159 --> 00:28:00,799
just to go at a site that was

718
00:28:00,799 --> 00:28:02,640
you know expose through that ingress and

719
00:28:02,640 --> 00:28:04,000
see that the

720
00:28:04,000 --> 00:28:05,919
uh it's a wild card sir that has been

721
00:28:05,919 --> 00:28:09,520
issued by let's encrypt

722
00:28:11,440 --> 00:28:14,000
uh and also you know you could go i will

723
00:28:14,000 --> 00:28:15,520
look at the

724
00:28:15,520 --> 00:28:18,559
cert manager documentation

725
00:28:18,559 --> 00:28:21,039
it's quite good a lot of examples and

726
00:28:21,039 --> 00:28:25,440
lists all the dns that it supports

727
00:28:25,440 --> 00:28:28,320
integration with

728
00:28:28,320 --> 00:28:30,640
so now what we have seen right now if

729
00:28:30,640 --> 00:28:32,960
you have i mean think if you have

730
00:28:32,960 --> 00:28:34,720
a

731
00:28:34,720 --> 00:28:37,600
a kubernetes cluster you have hundreds

732
00:28:37,600 --> 00:28:40,320
of application you want to configure

733
00:28:40,320 --> 00:28:42,320
search for all of those applications

734
00:28:42,320 --> 00:28:44,559
what you need to do is just define

735
00:28:44,559 --> 00:28:46,320
a certificate resource for their

736
00:28:46,320 --> 00:28:48,159
deployment however you have health chart

737
00:28:48,159 --> 00:28:50,000
or however you're deploying it

738
00:28:50,000 --> 00:28:50,799
right

739
00:28:50,799 --> 00:28:53,600
you can integrate with multiple uh dns

740
00:28:53,600 --> 00:28:55,279
providers right so you can create

741
00:28:55,279 --> 00:28:57,919
separate issuers for whatever right

742
00:28:57,919 --> 00:29:00,480
every company you will see we use even

743
00:29:00,480 --> 00:29:02,720
in the same product we're using

744
00:29:02,720 --> 00:29:05,120
akamai and route 53

745
00:29:05,120 --> 00:29:07,279
and easy dns because operation at

746
00:29:07,279 --> 00:29:09,360
different times just you know wherever

747
00:29:09,360 --> 00:29:12,240
the the whichever dns we are using so

748
00:29:12,240 --> 00:29:14,480
with with this you can have multiple

749
00:29:14,480 --> 00:29:15,520
issuers

750
00:29:15,520 --> 00:29:18,159
uh created integrating with different

751
00:29:18,159 --> 00:29:20,559
dns providers and then

752
00:29:20,559 --> 00:29:22,480
there it is you know

753
00:29:22,480 --> 00:29:24,240
just set it up

754
00:29:24,240 --> 00:29:24,960
and

755
00:29:24,960 --> 00:29:28,159
the as long as it's running the search

756
00:29:28,159 --> 00:29:30,240
obviously the automation is not only

757
00:29:30,240 --> 00:29:32,159
about the issuance of the serve more

758
00:29:32,159 --> 00:29:33,520
importantly

759
00:29:33,520 --> 00:29:35,279
it's going to renew the search for you

760
00:29:35,279 --> 00:29:38,640
right and the third thing is with with

761
00:29:38,640 --> 00:29:40,799
ingress the ingress gq

762
00:29:40,799 --> 00:29:43,520
it supports hot update of the

763
00:29:43,520 --> 00:29:44,480
uh

764
00:29:44,480 --> 00:29:46,480
secret so once the secret is updated

765
00:29:46,480 --> 00:29:49,120
it's mounted into the con into the

766
00:29:49,120 --> 00:29:50,880
containers uh

767
00:29:50,880 --> 00:29:53,679
it will you know reload it if your

768
00:29:53,679 --> 00:29:56,000
application supports that it'll reload

769
00:29:56,000 --> 00:29:57,360
you if not then you'll have to do a

770
00:29:57,360 --> 00:29:59,600
rolling restart to basically refresh

771
00:29:59,600 --> 00:30:01,039
that certificate so you'll have to take

772
00:30:01,039 --> 00:30:04,158
care of that

773
00:30:05,120 --> 00:30:06,799
finally

774
00:30:06,799 --> 00:30:08,480
you know looking at some issues and

775
00:30:08,480 --> 00:30:10,640
limitations one which is not listed over

776
00:30:10,640 --> 00:30:12,880
here is search manager is a kubernetes

777
00:30:12,880 --> 00:30:15,120
add-on so if you're not using kubernetes

778
00:30:15,120 --> 00:30:18,080
then you should use kubernetes

779
00:30:18,080 --> 00:30:18,960
or

780
00:30:18,960 --> 00:30:21,600
or you can have other options using cert

781
00:30:21,600 --> 00:30:24,320
bot or other forms of integration

782
00:30:24,320 --> 00:30:27,520
so that is one limitation the other is

783
00:30:27,520 --> 00:30:30,559
you saw i mean it's putting the the

784
00:30:30,559 --> 00:30:32,640
it's creating a tls secret type that

785
00:30:32,640 --> 00:30:34,320
means that this private key is also

786
00:30:34,320 --> 00:30:36,159
there so how do you protect that private

787
00:30:36,159 --> 00:30:39,440
key like anybody who has access now to

788
00:30:39,440 --> 00:30:41,679
that secret can get access to the

789
00:30:41,679 --> 00:30:43,679
private key and then you know it's a

790
00:30:43,679 --> 00:30:45,679
it's an issue that you need to see how

791
00:30:45,679 --> 00:30:47,919
you how to protect that

792
00:30:47,919 --> 00:30:48,840
and

793
00:30:48,840 --> 00:30:52,720
the most importantly

794
00:30:52,720 --> 00:30:54,720
uh it doesn't mean that you know you're

795
00:30:54,720 --> 00:30:56,640
done with it that's it forget and you

796
00:30:56,640 --> 00:30:58,240
know the certificate no you have to

797
00:30:58,240 --> 00:31:00,640
monitor that cert manager is running

798
00:31:00,640 --> 00:31:02,960
right on your cluster if cert manager

799
00:31:02,960 --> 00:31:05,200
fails for any it's just another software

800
00:31:05,200 --> 00:31:06,880
which is running if it fails your

801
00:31:06,880 --> 00:31:08,399
certificates are not going to get

802
00:31:08,399 --> 00:31:11,279
renewed right you need to keep you know

803
00:31:11,279 --> 00:31:13,600
you need to have monitoring in place you

804
00:31:13,600 --> 00:31:15,279
know it supports integration with

805
00:31:15,279 --> 00:31:17,440
different uh you know

806
00:31:17,440 --> 00:31:19,679
providers data dog whatnots where you

807
00:31:19,679 --> 00:31:23,039
can get alerts and stuff so

808
00:31:23,039 --> 00:31:25,600
to to to make sure

809
00:31:25,600 --> 00:31:28,320
that search manager is running and also

810
00:31:28,320 --> 00:31:31,360
to make sure that it is renewing

811
00:31:31,360 --> 00:31:33,120
renewing the certificate we ran into

812
00:31:33,120 --> 00:31:35,519
some issue still involving getting

813
00:31:35,519 --> 00:31:37,919
better but i mean it wasn't renewing the

814
00:31:37,919 --> 00:31:40,000
certificate there was a bug so you need

815
00:31:40,000 --> 00:31:42,960
to keep upgrading and and

816
00:31:42,960 --> 00:31:45,600
so so the idea is you still need to but

817
00:31:45,600 --> 00:31:48,080
but the amount of work that we you have

818
00:31:48,080 --> 00:31:50,799
to do now is a lot less right compared

819
00:31:50,799 --> 00:31:51,679
to

820
00:31:51,679 --> 00:31:54,240
and also it's scalable right you can go

821
00:31:54,240 --> 00:31:56,320
have thousands of certificates

822
00:31:56,320 --> 00:31:57,600
however

823
00:31:57,600 --> 00:31:59,200
if you're using let's encrypt there's

824
00:31:59,200 --> 00:32:00,960
another limitation that is there is the

825
00:32:00,960 --> 00:32:03,279
number of certificates that

826
00:32:03,279 --> 00:32:05,919
it will issue it will allow you to get

827
00:32:05,919 --> 00:32:09,039
per registered domain i think the limit

828
00:32:09,039 --> 00:32:12,080
is 50. now 50 seems like a big number

829
00:32:12,080 --> 00:32:14,000
but it's per registered domain so if you

830
00:32:14,000 --> 00:32:16,559
have a lot of sub domains they all count

831
00:32:16,559 --> 00:32:17,760
in the same

832
00:32:17,760 --> 00:32:19,279
right and

833
00:32:19,279 --> 00:32:21,120
unfortunately if you have your

834
00:32:21,120 --> 00:32:24,080
production and your test and your

835
00:32:24,080 --> 00:32:27,039
staging under the same registered domain

836
00:32:27,039 --> 00:32:27,840
then

837
00:32:27,840 --> 00:32:30,640
your 50 per week are going to run out

838
00:32:30,640 --> 00:32:32,799
pretty quickly so this is something you

839
00:32:32,799 --> 00:32:34,480
need to to

840
00:32:34,480 --> 00:32:36,480
keep

841
00:32:36,480 --> 00:32:38,080
keep in mind

842
00:32:38,080 --> 00:32:40,320
and

843
00:32:40,399 --> 00:32:44,719
that is pretty much it uh questions

844
00:32:47,600 --> 00:32:49,679
so the search manager is branched from

845
00:32:49,679 --> 00:32:51,919
the same same machine issuing the

846
00:32:51,919 --> 00:32:54,080
certificate or the same container

847
00:32:54,080 --> 00:32:55,840
issuing the

848
00:32:55,840 --> 00:32:59,360
no search manager is is running so it's

849
00:32:59,360 --> 00:33:01,760
running in kubernetes right so that

850
00:33:01,760 --> 00:33:03,360
at the beginning i showed you the parts

851
00:33:03,360 --> 00:33:04,799
that were running so it's running its

852
00:33:04,799 --> 00:33:06,320
own containers

853
00:33:06,320 --> 00:33:08,000
cert manager doesn't

854
00:33:08,000 --> 00:33:08,880
you know

855
00:33:08,880 --> 00:33:11,360
talk directly with your containers right

856
00:33:11,360 --> 00:33:13,039
cert manager there are containers that

857
00:33:13,039 --> 00:33:14,080
are running

858
00:33:14,080 --> 00:33:14,880
uh

859
00:33:14,880 --> 00:33:17,200
kubernetes invokes that

860
00:33:17,200 --> 00:33:18,480
and cert manager will get the

861
00:33:18,480 --> 00:33:20,159
certificate and and

862
00:33:20,159 --> 00:33:22,799
put it in in community secrets and

863
00:33:22,799 --> 00:33:24,480
that's from where from there your

864
00:33:24,480 --> 00:33:26,559
application will use it right so if i

865
00:33:26,559 --> 00:33:27,360
have

866
00:33:27,360 --> 00:33:29,200
a machine that doesn't have internet

867
00:33:29,200 --> 00:33:30,960
access uh it doesn't matter because

868
00:33:30,960 --> 00:33:32,480
search manager is in a different

869
00:33:32,480 --> 00:33:34,960
container and that no no you need you

870
00:33:34,960 --> 00:33:37,679
need your cert it needs internet access

871
00:33:37,679 --> 00:33:39,360
it needs access to your certificate

872
00:33:39,360 --> 00:33:41,600
provider right let's encrypt in this

873
00:33:41,600 --> 00:33:45,039
case so if if it can't get to let's

874
00:33:45,039 --> 00:33:47,039
encrypt or the dns provider then it

875
00:33:47,039 --> 00:33:49,120
cannot review the server right

876
00:33:49,120 --> 00:33:51,600
wherever the container is running in

877
00:33:51,600 --> 00:33:53,600
case you have internet access but

878
00:33:53,600 --> 00:33:56,159
issuing to another machine

879
00:33:56,159 --> 00:33:58,159
yes yes so if you have network policies

880
00:33:58,159 --> 00:34:00,960
in place in kubernetes you know limiting

881
00:34:00,960 --> 00:34:02,159
access

882
00:34:02,159 --> 00:34:04,720
in your you know namespaces or for your

883
00:34:04,720 --> 00:34:06,159
application that would work yes cert

884
00:34:06,159 --> 00:34:08,320
manager whatever name space is running

885
00:34:08,320 --> 00:34:09,918
it needs access to the internet from

886
00:34:09,918 --> 00:34:12,078
there

887
00:34:12,800 --> 00:34:15,679
so other questions

888
00:34:18,800 --> 00:34:21,670
thank you thank you

889
00:34:21,670 --> 00:34:27,110
[Applause]

