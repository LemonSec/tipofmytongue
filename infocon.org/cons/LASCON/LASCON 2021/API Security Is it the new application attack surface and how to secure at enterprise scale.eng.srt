1
00:00:17,920 --> 00:00:20,960
it's great to be uh back at an in-person

2
00:00:20,960 --> 00:00:23,039
conference after a while

3
00:00:23,039 --> 00:00:25,359
i've been at lascon for

4
00:00:25,359 --> 00:00:26,240
probably

5
00:00:26,240 --> 00:00:28,080
four years now and this is my second

6
00:00:28,080 --> 00:00:30,320
time talking so it's really great to be

7
00:00:30,320 --> 00:00:31,760
here

8
00:00:31,760 --> 00:00:33,440
i'll talk about

9
00:00:33,440 --> 00:00:36,160
api security today um that's the topic

10
00:00:36,160 --> 00:00:37,920
of the day

11
00:00:37,920 --> 00:00:39,040
and just

12
00:00:39,040 --> 00:00:40,559
an intro

13
00:00:40,559 --> 00:00:42,320
i been

14
00:00:42,320 --> 00:00:44,000
working in security for more than a

15
00:00:44,000 --> 00:00:46,719
decade i started as a developer um and

16
00:00:46,719 --> 00:00:47,760
made by

17
00:00:47,760 --> 00:00:49,840
way through developing uh security

18
00:00:49,840 --> 00:00:51,680
products and went into application

19
00:00:51,680 --> 00:00:54,079
security designing um

20
00:00:54,079 --> 00:00:56,800
defense for large organizations and i

21
00:00:56,800 --> 00:00:58,719
have the privilege to lead a product

22
00:00:58,719 --> 00:01:00,239
security team

23
00:01:00,239 --> 00:01:03,600
at babylon today advancing their mission

24
00:01:03,600 --> 00:01:06,400
uh to have an accessible health care in

25
00:01:06,400 --> 00:01:08,720
the hands of every person on earth i'm

26
00:01:08,720 --> 00:01:10,560
really excited about it

27
00:01:10,560 --> 00:01:12,000
and i'm a

28
00:01:12,000 --> 00:01:14,240
defensive person at heart a core

29
00:01:14,240 --> 00:01:17,360
defensive engineer um i like to design

30
00:01:17,360 --> 00:01:20,159
for security problems so um you know if

31
00:01:20,159 --> 00:01:22,240
there is a hack or uh if there is a

32
00:01:22,240 --> 00:01:24,400
vulnerability that's out there i'll be

33
00:01:24,400 --> 00:01:25,840
the first person in the room thinking

34
00:01:25,840 --> 00:01:27,520
about how to solve for it and prevent

35
00:01:27,520 --> 00:01:28,400
for it

36
00:01:28,400 --> 00:01:31,360
in the future so along the way i filed

37
00:01:31,360 --> 00:01:34,079
multiple patterns on some of the

38
00:01:34,079 --> 00:01:37,280
ideas i solved for uh you know in

39
00:01:37,280 --> 00:01:40,079
security in different security domains

40
00:01:40,079 --> 00:01:43,360
and i've had the opportunity to speak at

41
00:01:43,360 --> 00:01:46,240
conferences across the globe

42
00:01:46,240 --> 00:01:46,960
i

43
00:01:46,960 --> 00:01:49,439
have speaking all across

44
00:01:49,439 --> 00:01:50,799
the globe and

45
00:01:50,799 --> 00:01:51,759
last

46
00:01:51,759 --> 00:01:53,600
last time i was in south korea speaking

47
00:01:53,600 --> 00:01:55,759
to an audience with the translator which

48
00:01:55,759 --> 00:01:58,159
was really good uh the audience were

49
00:01:58,159 --> 00:02:00,000
amazing so i've had different

50
00:02:00,000 --> 00:02:03,680
experiences and then i really cherish it

51
00:02:03,680 --> 00:02:06,240
with that i'll go to the agenda so i'll

52
00:02:06,240 --> 00:02:08,560
talk about um

53
00:02:08,560 --> 00:02:12,239
how api and api security is different

54
00:02:12,239 --> 00:02:15,200
um you know it's not something new right

55
00:02:15,200 --> 00:02:17,680
there have been apis um all the way

56
00:02:17,680 --> 00:02:21,360
along uh but i think uh it's been you

57
00:02:21,360 --> 00:02:23,599
know becoming more and more distinct in

58
00:02:23,599 --> 00:02:26,560
the way how uh we think of security uh

59
00:02:26,560 --> 00:02:28,720
in an api first world so we'll talk

60
00:02:28,720 --> 00:02:30,959
about that what are the key differences

61
00:02:30,959 --> 00:02:33,040
how what are the security implications

62
00:02:33,040 --> 00:02:35,200
and then i'll talk about uh the api

63
00:02:35,200 --> 00:02:37,120
threat landscape

64
00:02:37,120 --> 00:02:39,599
as you all know it's all over the news

65
00:02:39,599 --> 00:02:42,640
today api uh related vulnerabilities so

66
00:02:42,640 --> 00:02:45,040
we'll just see a couple of them to

67
00:02:45,040 --> 00:02:46,879
you know set the stage

68
00:02:46,879 --> 00:02:48,800
and i'll talk about what i think would

69
00:02:48,800 --> 00:02:52,160
be a good protection strategy

70
00:02:52,160 --> 00:02:54,640
it's really complex so i want to take a

71
00:02:54,640 --> 00:02:56,800
high level view um and i'll give you an

72
00:02:56,800 --> 00:02:59,120
overview of how i think about api

73
00:02:59,120 --> 00:03:00,959
protection uh

74
00:03:00,959 --> 00:03:04,879
in general um so let's start with uh

75
00:03:04,879 --> 00:03:07,040
the difference right so if you look at

76
00:03:07,040 --> 00:03:08,159
the

77
00:03:08,159 --> 00:03:10,400
top most diagram that's kind of the

78
00:03:10,400 --> 00:03:12,480
monolithic architecture where you have

79
00:03:12,480 --> 00:03:14,640
the traditional web app serving a web

80
00:03:14,640 --> 00:03:18,000
page so if you think of let's say

81
00:03:18,000 --> 00:03:19,200
a health

82
00:03:19,200 --> 00:03:21,360
application right so the application is

83
00:03:21,360 --> 00:03:23,040
going to make a call for a health

84
00:03:23,040 --> 00:03:25,280
dashboard and then the server will query

85
00:03:25,280 --> 00:03:27,360
the database and return back

86
00:03:27,360 --> 00:03:30,480
all the data in a html view right it's

87
00:03:30,480 --> 00:03:32,879
all in a single call but if you look at

88
00:03:32,879 --> 00:03:36,640
uh the current application it's uh you

89
00:03:36,640 --> 00:03:39,440
know defined as spa in a single page

90
00:03:39,440 --> 00:03:42,080
application so they make a number of api

91
00:03:42,080 --> 00:03:43,760
calls to the backend so if you want to

92
00:03:43,760 --> 00:03:45,920
pull up a health dashboard it's going to

93
00:03:45,920 --> 00:03:47,280
probably

94
00:03:47,280 --> 00:03:49,760
make a call to get

95
00:03:49,760 --> 00:03:51,200
your height

96
00:03:51,200 --> 00:03:53,200
another call to get your weight another

97
00:03:53,200 --> 00:03:55,599
call to get your pulse rate and then it

98
00:03:55,599 --> 00:03:56,799
all sends

99
00:03:56,799 --> 00:03:58,879
the data in the form of a json a raw

100
00:03:58,879 --> 00:04:00,799
data to the front end and the front end

101
00:04:00,799 --> 00:04:03,040
has javascript to kind of put it

102
00:04:03,040 --> 00:04:05,599
together and give a nice view of it

103
00:04:05,599 --> 00:04:07,920
and it gives a lot of advantages i mean

104
00:04:07,920 --> 00:04:09,920
the ui is really cool and you can do a

105
00:04:09,920 --> 00:04:11,680
lot of things uh in the front end

106
00:04:11,680 --> 00:04:13,280
without without having to call the

107
00:04:13,280 --> 00:04:16,478
backend which is going to save time um

108
00:04:16,478 --> 00:04:19,279
you know improve user experience

109
00:04:19,279 --> 00:04:22,880
and at the bottom um you see server to

110
00:04:22,880 --> 00:04:25,040
server calls right so you can insert off

111
00:04:25,040 --> 00:04:27,360
the client making a call you can have

112
00:04:27,360 --> 00:04:29,199
another server your partner making a

113
00:04:29,199 --> 00:04:31,280
call to get that data and they can use

114
00:04:31,280 --> 00:04:34,080
the data to display it in their app or

115
00:04:34,080 --> 00:04:37,680
process it in the way they want so

116
00:04:37,680 --> 00:04:38,560
uh

117
00:04:38,560 --> 00:04:42,880
if i break it down right uh and and if

118
00:04:42,880 --> 00:04:44,880
you look at what's happening behind the

119
00:04:44,880 --> 00:04:45,840
scenes

120
00:04:45,840 --> 00:04:47,840
uh there are these uh

121
00:04:47,840 --> 00:04:49,199
elements right so if you look at the

122
00:04:49,199 --> 00:04:52,160
data queries earlier it used to be a sql

123
00:04:52,160 --> 00:04:54,400
query probably or no sql query that's f

124
00:04:54,400 --> 00:04:56,880
that's switching your data and then uh

125
00:04:56,880 --> 00:04:58,960
there is going to be html page that's

126
00:04:58,960 --> 00:05:01,280
returned um and then the filtering

127
00:05:01,280 --> 00:05:03,440
happens at the database level so if you

128
00:05:03,440 --> 00:05:06,639
want to fetch five uh you know profiles

129
00:05:06,639 --> 00:05:09,120
you would say you write a sql query and

130
00:05:09,120 --> 00:05:11,759
you'll worry about sql injection how to

131
00:05:11,759 --> 00:05:13,680
you know protect against it but today

132
00:05:13,680 --> 00:05:16,560
it's all uh api so if you want to uh get

133
00:05:16,560 --> 00:05:18,720
file file profiles you can write a query

134
00:05:18,720 --> 00:05:21,440
param in your api to filter the data and

135
00:05:21,440 --> 00:05:23,039
then

136
00:05:23,039 --> 00:05:25,759
and the processing happens on the server

137
00:05:25,759 --> 00:05:28,880
side so instead of the sql uh you know

138
00:05:28,880 --> 00:05:30,800
processing the data you'll have server

139
00:05:30,800 --> 00:05:33,520
process and return it and and

140
00:05:33,520 --> 00:05:35,600
you know the data processing before the

141
00:05:35,600 --> 00:05:37,520
data is returned to the front end

142
00:05:37,520 --> 00:05:40,639
happens uh on the server side right so

143
00:05:40,639 --> 00:05:42,880
if you look at a traditional app it will

144
00:05:42,880 --> 00:05:44,800
probably be a loop if you're doing

145
00:05:44,800 --> 00:05:46,880
object oriented programming to take five

146
00:05:46,880 --> 00:05:49,039
profiles and return it

147
00:05:49,039 --> 00:05:50,880
for modern web apps it's on the client

148
00:05:50,880 --> 00:05:52,960
side right so the clients control which

149
00:05:52,960 --> 00:05:55,199
profile you want to uh display i mean

150
00:05:55,199 --> 00:05:57,120
the data is already there on the client

151
00:05:57,120 --> 00:05:59,840
side and the client can you know write a

152
00:05:59,840 --> 00:06:01,759
javascript and you know it can run the

153
00:06:01,759 --> 00:06:04,639
javascript to decide what to display

154
00:06:04,639 --> 00:06:07,360
so the the main point here is i mean the

155
00:06:07,360 --> 00:06:11,600
data source uh has shifted left so the

156
00:06:11,600 --> 00:06:13,840
source of data is

157
00:06:13,840 --> 00:06:15,759
of course it's stored in your database

158
00:06:15,759 --> 00:06:18,080
but then how it's controlled and the way

159
00:06:18,080 --> 00:06:20,960
it is returned to the client it has

160
00:06:20,960 --> 00:06:23,440
shifted right it's it's with the api so

161
00:06:23,440 --> 00:06:26,720
it's running on the server logic

162
00:06:26,720 --> 00:06:28,960
so what are the uh security implications

163
00:06:28,960 --> 00:06:30,479
right so we talked about

164
00:06:30,479 --> 00:06:32,960
having a lot of different endpoints so

165
00:06:32,960 --> 00:06:34,720
what does it mean from a security

166
00:06:34,720 --> 00:06:36,400
perspective right

167
00:06:36,400 --> 00:06:38,080
basically you know if you're a security

168
00:06:38,080 --> 00:06:39,199
engineer

169
00:06:39,199 --> 00:06:41,680
you know it really looks cool from a

170
00:06:41,680 --> 00:06:43,759
development standpoint but if you look

171
00:06:43,759 --> 00:06:46,400
at it it presents a wider attack surface

172
00:06:46,400 --> 00:06:48,800
right instead of uh having to secure one

173
00:06:48,800 --> 00:06:50,960
end point having to worry about what is

174
00:06:50,960 --> 00:06:52,880
returned from that end point you how now

175
00:06:52,880 --> 00:06:55,199
have maybe 10 different endpoints for

176
00:06:55,199 --> 00:06:57,039
the same use case right

177
00:06:57,039 --> 00:06:58,960
and things are broken down into

178
00:06:58,960 --> 00:07:01,039
microservices so it's not just the

179
00:07:01,039 --> 00:07:03,280
endpoints it can get integrated with

180
00:07:03,280 --> 00:07:05,199
different other microservices that can

181
00:07:05,199 --> 00:07:06,080
serve

182
00:07:06,080 --> 00:07:08,479
uh multiple other use cases so it's hard

183
00:07:08,479 --> 00:07:10,800
to nail down what use case this data is

184
00:07:10,800 --> 00:07:13,840
uh being served for um and we'll go into

185
00:07:13,840 --> 00:07:15,840
detail on what that is

186
00:07:15,840 --> 00:07:17,919
in the later slides right and then the

187
00:07:17,919 --> 00:07:20,319
data is object-based

188
00:07:20,319 --> 00:07:23,919
so any data you access is an object

189
00:07:23,919 --> 00:07:26,880
and indirect object reference is a more

190
00:07:26,880 --> 00:07:29,840
common vulnerability if you look at apis

191
00:07:29,840 --> 00:07:30,800
because

192
00:07:30,800 --> 00:07:32,080
risk

193
00:07:32,080 --> 00:07:35,199
endpoints the developers developing it

194
00:07:35,199 --> 00:07:37,280
want to make it work want to present the

195
00:07:37,280 --> 00:07:39,120
data but

196
00:07:39,120 --> 00:07:41,360
you know before presenting the data we

197
00:07:41,360 --> 00:07:43,360
need to do a couple of checks right

198
00:07:43,360 --> 00:07:44,639
before fetching an object from the

199
00:07:44,639 --> 00:07:47,919
database we need to understand if the

200
00:07:47,919 --> 00:07:50,639
client really needs that data and is

201
00:07:50,639 --> 00:07:53,919
authorized to fetch that data

202
00:07:53,919 --> 00:07:55,440
there could be cases where there are two

203
00:07:55,440 --> 00:07:57,199
clients one

204
00:07:57,199 --> 00:07:59,440
with access to that resource another

205
00:07:59,440 --> 00:08:01,280
without access to that resource so that

206
00:08:01,280 --> 00:08:02,400
needs to

207
00:08:02,400 --> 00:08:04,479
be checked which doesn't happen often

208
00:08:04,479 --> 00:08:05,360
and then

209
00:08:05,360 --> 00:08:08,319
returning the data to the user is again

210
00:08:08,319 --> 00:08:10,000
based on the use case so you don't want

211
00:08:10,000 --> 00:08:12,560
to return everything you get just as you

212
00:08:12,560 --> 00:08:14,240
get to the user

213
00:08:14,240 --> 00:08:17,520
so that's again a big gap that that goes

214
00:08:17,520 --> 00:08:20,639
unnoticed in some of the apis

215
00:08:20,639 --> 00:08:23,120
the third part is filtering right just

216
00:08:23,120 --> 00:08:24,479
like any

217
00:08:24,479 --> 00:08:26,479
web application you need to do security

218
00:08:26,479 --> 00:08:28,879
filtering input validation sanitization

219
00:08:28,879 --> 00:08:31,039
make sure all the input and output are

220
00:08:31,039 --> 00:08:34,958
clean um going in and out and it's just

221
00:08:34,958 --> 00:08:35,679
uh

222
00:08:35,679 --> 00:08:37,760
more to do with apis because you have a

223
00:08:37,760 --> 00:08:39,360
lot of parameters there are a lot of

224
00:08:39,360 --> 00:08:41,039
query parameters that come in that needs

225
00:08:41,039 --> 00:08:42,719
to be allowed

226
00:08:42,719 --> 00:08:44,959
and security filtering is hard i mean

227
00:08:44,959 --> 00:08:47,440
just in a web app you know how filtering

228
00:08:47,440 --> 00:08:50,160
happens it's more like a swiss cheese um

229
00:08:50,160 --> 00:08:52,000
kind of a model where things get you

230
00:08:52,000 --> 00:08:54,640
know allow listed multiple uh

231
00:08:54,640 --> 00:08:56,959
places right so so yeah these are

232
00:08:56,959 --> 00:08:58,720
high-level security implications and if

233
00:08:58,720 --> 00:09:00,399
you look at the threat landscape it's

234
00:09:00,399 --> 00:09:03,440
very clear right gartner predicted uh

235
00:09:03,440 --> 00:09:05,200
apis to be the number one attack vector

236
00:09:05,200 --> 00:09:07,200
sometime back and long backward almost

237
00:09:07,200 --> 00:09:10,399
in 2022 it's just two more months and i

238
00:09:10,399 --> 00:09:12,080
think this is

239
00:09:12,080 --> 00:09:13,920
uh being seen widely i was reading

240
00:09:13,920 --> 00:09:16,320
x-force report like couple of days back

241
00:09:16,320 --> 00:09:17,200
um

242
00:09:17,200 --> 00:09:18,240
and

243
00:09:18,240 --> 00:09:21,200
in that report the the cloud breaches um

244
00:09:21,200 --> 00:09:24,080
are reported to be increased by 170

245
00:09:24,080 --> 00:09:26,640
percent and then almost two thirds of it

246
00:09:26,640 --> 00:09:29,279
is related to how apas are being

247
00:09:29,279 --> 00:09:31,040
configured how they are being deployed

248
00:09:31,040 --> 00:09:33,040
and run so i think it's it's becoming

249
00:09:33,040 --> 00:09:35,440
more and more critical

250
00:09:35,440 --> 00:09:38,320
and oowasp released uh

251
00:09:38,320 --> 00:09:42,160
an api top 10 uh how many of you

252
00:09:42,160 --> 00:09:44,320
know yeah okay good

253
00:09:44,320 --> 00:09:47,200
awesome yeah so this is really cool i

254
00:09:47,200 --> 00:09:49,920
really like that project um i just

255
00:09:49,920 --> 00:09:52,640
wanted to put it here to uh kind of

256
00:09:52,640 --> 00:09:54,560
drive the point that

257
00:09:54,560 --> 00:09:56,880
there are similarities in the way that

258
00:09:56,880 --> 00:09:59,519
web app vulnerabilities and uh you know

259
00:09:59,519 --> 00:10:01,040
the apa vulnerabilities are seen but

260
00:10:01,040 --> 00:10:02,560
there are also differences if you look

261
00:10:02,560 --> 00:10:03,680
at the

262
00:10:03,680 --> 00:10:05,440
bolded text

263
00:10:05,440 --> 00:10:07,760
there are some key differences right for

264
00:10:07,760 --> 00:10:10,160
example rate limiting becomes very

265
00:10:10,160 --> 00:10:12,320
important you cannot have

266
00:10:12,320 --> 00:10:14,240
people calling your apa and getting your

267
00:10:14,240 --> 00:10:16,800
data for any number of time

268
00:10:16,800 --> 00:10:19,600
it's not just protected and then

269
00:10:19,600 --> 00:10:21,760
um some of the things like cross-site

270
00:10:21,760 --> 00:10:24,720
scripting is a little irrelevant when it

271
00:10:24,720 --> 00:10:26,880
comes to apis it's not to say that you

272
00:10:26,880 --> 00:10:29,440
don't have to do sanitization or

273
00:10:29,440 --> 00:10:31,839
you know input validation it's just that

274
00:10:31,839 --> 00:10:34,399
you know it's not in one of the top tens

275
00:10:34,399 --> 00:10:36,640
right and if you look at uh attacks like

276
00:10:36,640 --> 00:10:40,079
csrf like uh crosstalk request forgery

277
00:10:40,079 --> 00:10:42,720
uh that may not be applicable depending

278
00:10:42,720 --> 00:10:45,440
on how you set up your apis apis

279
00:10:45,440 --> 00:10:47,519
by design they are stateless if you're

280
00:10:47,519 --> 00:10:50,079
running an api and if it's a server to

281
00:10:50,079 --> 00:10:51,440
server call

282
00:10:51,440 --> 00:10:53,360
you don't have any state you don't

283
00:10:53,360 --> 00:10:55,760
probably have to worry about csrf

284
00:10:55,760 --> 00:10:57,680
so yeah so there are some key

285
00:10:57,680 --> 00:10:59,440
differences to note

286
00:10:59,440 --> 00:11:03,440
we'll look at the breaches in h121 these

287
00:11:03,440 --> 00:11:04,800
are not

288
00:11:04,800 --> 00:11:07,680
something that i uh personally did i

289
00:11:07,680 --> 00:11:09,760
just wanted to showcase this as an

290
00:11:09,760 --> 00:11:11,519
example so we can you know look at a

291
00:11:11,519 --> 00:11:13,120
live example of what happened to a

292
00:11:13,120 --> 00:11:15,200
company right

293
00:11:15,200 --> 00:11:17,360
facebook is great i really like facebook

294
00:11:17,360 --> 00:11:19,519
as a company earlier in the year they

295
00:11:19,519 --> 00:11:20,720
had

296
00:11:20,720 --> 00:11:24,480
500 plus million profiles leak

297
00:11:24,480 --> 00:11:25,839
in their api

298
00:11:25,839 --> 00:11:29,440
so what went wrong was they had an api

299
00:11:29,440 --> 00:11:33,120
so the the intention was good uh the api

300
00:11:33,120 --> 00:11:33,920
uh

301
00:11:33,920 --> 00:11:36,480
allowed you as an user to search for

302
00:11:36,480 --> 00:11:38,000
your friends with

303
00:11:38,000 --> 00:11:40,160
your friend's contact

304
00:11:40,160 --> 00:11:42,000
number phone number right so basically a

305
00:11:42,000 --> 00:11:44,720
good use case well-intentioned use case

306
00:11:44,720 --> 00:11:47,519
um but what was wrong was you know you

307
00:11:47,519 --> 00:11:50,399
it allowed you to submit any number of

308
00:11:50,399 --> 00:11:52,560
uh phone numbers i mean there was no

309
00:11:52,560 --> 00:11:55,200
rate limiting you can just enumerate and

310
00:11:55,200 --> 00:11:57,680
you know just do a brute force guess

311
00:11:57,680 --> 00:11:59,360
work on

312
00:11:59,360 --> 00:12:00,720
you know whoever you want to find

313
00:12:00,720 --> 00:12:03,680
basically and and the scary part was it

314
00:12:03,680 --> 00:12:06,079
returned too much data right it just did

315
00:12:06,079 --> 00:12:08,880
not give you the name of that person so

316
00:12:08,880 --> 00:12:10,880
that you can connect and learn more it

317
00:12:10,880 --> 00:12:13,040
gave you pretty much their email address

318
00:12:13,040 --> 00:12:14,959
phone number and

319
00:12:14,959 --> 00:12:17,920
their physical address to it i think so

320
00:12:17,920 --> 00:12:20,240
it was a lot of information that was

321
00:12:20,240 --> 00:12:22,880
unnecessary that was returned and i

322
00:12:22,880 --> 00:12:24,800
think even though this was well

323
00:12:24,800 --> 00:12:25,839
intentioned

324
00:12:25,839 --> 00:12:28,160
if i relate it to some of the wasps

325
00:12:28,160 --> 00:12:30,639
opt-in attack it it kind of

326
00:12:30,639 --> 00:12:32,639
didn't have the object level

327
00:12:32,639 --> 00:12:34,000
authorization

328
00:12:34,000 --> 00:12:36,320
so when a call is made you have to check

329
00:12:36,320 --> 00:12:39,519
whether the resource that is accessed

330
00:12:39,519 --> 00:12:40,480
is

331
00:12:40,480 --> 00:12:42,000
you know privileged to access that

332
00:12:42,000 --> 00:12:44,079
resource that check not happen and there

333
00:12:44,079 --> 00:12:46,320
was excessive data exposure of course it

334
00:12:46,320 --> 00:12:47,920
returned a lot of data that it didn't

335
00:12:47,920 --> 00:12:49,760
have to and then

336
00:12:49,760 --> 00:12:52,000
rate limiting was you know completely

337
00:12:52,000 --> 00:12:53,760
lacking rate you wouldn't expect someone

338
00:12:53,760 --> 00:12:56,000
to just keep bunching in the number or

339
00:12:56,000 --> 00:12:57,279
you know

340
00:12:57,279 --> 00:12:58,959
hundreds or phone numbers to get the

341
00:12:58,959 --> 00:13:02,320
data out of the server

342
00:13:02,320 --> 00:13:04,639
so how to fix it i think going back to

343
00:13:04,639 --> 00:13:07,519
the attack map fix the authorization

344
00:13:07,519 --> 00:13:09,839
any call that comes in

345
00:13:09,839 --> 00:13:10,959
not just

346
00:13:10,959 --> 00:13:13,519
you know authenticate their call but

347
00:13:13,519 --> 00:13:16,000
authorize the traffic and and see if the

348
00:13:16,000 --> 00:13:18,399
resource can be accessed

349
00:13:18,399 --> 00:13:20,079
and then defined rate limits i think

350
00:13:20,079 --> 00:13:23,279
this is the trickiest aspect right um if

351
00:13:23,279 --> 00:13:27,360
your business case uh is to allow um

352
00:13:27,360 --> 00:13:30,639
access for one record for um let's say

353
00:13:30,639 --> 00:13:32,720
24 hours that needs to be defined but

354
00:13:32,720 --> 00:13:34,639
it's not well thought out or defined in

355
00:13:34,639 --> 00:13:36,320
a lot of cases because

356
00:13:36,320 --> 00:13:38,079
it is

357
00:13:38,079 --> 00:13:40,240
it is kind of tricky to define it you

358
00:13:40,240 --> 00:13:42,399
don't know how many uh calls you will

359
00:13:42,399 --> 00:13:44,720
get in the first place so it's probably

360
00:13:44,720 --> 00:13:47,360
easier to monitor for anomalies

361
00:13:47,360 --> 00:13:49,279
understand what the behavior is for an

362
00:13:49,279 --> 00:13:52,720
api and then baseline it based on that

363
00:13:52,720 --> 00:13:55,360
and then define the data to be returned

364
00:13:55,360 --> 00:13:57,199
again a very critical

365
00:13:57,199 --> 00:13:59,120
point that ties back to the use case if

366
00:13:59,120 --> 00:14:00,839
your use cases to

367
00:14:00,839 --> 00:14:03,120
serve a name just serve that right you

368
00:14:03,120 --> 00:14:04,959
don't have to send everything to the

369
00:14:04,959 --> 00:14:07,760
client and believe that the client will

370
00:14:07,760 --> 00:14:09,120
filter it for you because there are

371
00:14:09,120 --> 00:14:10,880
going to be attackers who can attack you

372
00:14:10,880 --> 00:14:12,480
from a different vector and get that

373
00:14:12,480 --> 00:14:14,240
data

374
00:14:14,240 --> 00:14:16,480
and implement monitoring i think that's

375
00:14:16,480 --> 00:14:18,880
that's going to be across the board

376
00:14:18,880 --> 00:14:22,800
um a second example uh just style again

377
00:14:22,800 --> 00:14:26,000
a great company it's a company in india

378
00:14:26,000 --> 00:14:29,760
um which is uh a local uh

379
00:14:29,760 --> 00:14:33,519
search company it exposed 100 million

380
00:14:33,519 --> 00:14:36,320
users personal data right so what

381
00:14:36,320 --> 00:14:38,880
happened was in 2019

382
00:14:38,880 --> 00:14:42,880
justile had a production database and a

383
00:14:42,880 --> 00:14:45,199
staging server

384
00:14:45,199 --> 00:14:47,519
and they did this you know they did the

385
00:14:47,519 --> 00:14:48,880
connection between the production

386
00:14:48,880 --> 00:14:50,639
database and the stating server so that

387
00:14:50,639 --> 00:14:52,639
they could test a few things and run a

388
00:14:52,639 --> 00:14:55,040
few tests but they accidentally exposed

389
00:14:55,040 --> 00:14:57,600
the staging server outside

390
00:14:57,600 --> 00:15:00,399
there was no uh inventory of what the

391
00:15:00,399 --> 00:15:03,600
apis and that staging where there was no

392
00:15:03,600 --> 00:15:05,519
cataloging of why it need to be

393
00:15:05,519 --> 00:15:08,000
connected why it need to be exposed to

394
00:15:08,000 --> 00:15:09,760
the internet

395
00:15:09,760 --> 00:15:12,480
and it was just left asses right after

396
00:15:12,480 --> 00:15:15,760
the testing is done people just uh

397
00:15:15,760 --> 00:15:18,560
ignored it and a clever security

398
00:15:18,560 --> 00:15:20,880
researcher found the way in and he was

399
00:15:20,880 --> 00:15:24,079
able to access all the users data again

400
00:15:24,079 --> 00:15:25,279
along with

401
00:15:25,279 --> 00:15:27,600
email phone number gender date of birth

402
00:15:27,600 --> 00:15:30,560
a lot of sensitive data

403
00:15:30,560 --> 00:15:32,800
so going back to the attack map again

404
00:15:32,800 --> 00:15:35,600
you know this relates to improper assets

405
00:15:35,600 --> 00:15:37,199
management so you need to manage your

406
00:15:37,199 --> 00:15:39,360
assets just like your web assets you

407
00:15:39,360 --> 00:15:41,600
need to categorize catalog you know what

408
00:15:41,600 --> 00:15:43,279
apis you are exposing what are the

409
00:15:43,279 --> 00:15:44,959
sensitive apis what are your

410
00:15:44,959 --> 00:15:46,880
non-sensitive apis what are on the

411
00:15:46,880 --> 00:15:48,720
internet and what are not on the

412
00:15:48,720 --> 00:15:51,199
internet and have a clear control on

413
00:15:51,199 --> 00:15:52,480
that and then

414
00:15:52,480 --> 00:15:55,680
anything that's exposed uh should have

415
00:15:55,680 --> 00:15:57,440
authentication right that's that's the

416
00:15:57,440 --> 00:16:00,720
baseline so broken user authentication

417
00:16:00,720 --> 00:16:03,360
um i think we we talked about some of

418
00:16:03,360 --> 00:16:06,320
the fix uh one thing to highlight would

419
00:16:06,320 --> 00:16:07,839
be to

420
00:16:07,839 --> 00:16:09,920
you know keep an eye on shadow api

421
00:16:09,920 --> 00:16:12,000
straight so if you have an api

422
00:16:12,000 --> 00:16:14,639
that's no longer in use or

423
00:16:14,639 --> 00:16:18,320
you know that has a newer version of it

424
00:16:18,320 --> 00:16:20,399
it needs to be closely monitored and

425
00:16:20,399 --> 00:16:22,800
deprecated we don't have to have

426
00:16:22,800 --> 00:16:25,440
loopholes that allow attackers to come

427
00:16:25,440 --> 00:16:27,519
in and take the data

428
00:16:27,519 --> 00:16:30,160
and implement strong authorization and

429
00:16:30,160 --> 00:16:32,000
you know authentication

430
00:16:32,000 --> 00:16:34,000
that's that's key across all the

431
00:16:34,000 --> 00:16:36,480
microservices

432
00:16:36,480 --> 00:16:38,240
so that i'll

433
00:16:38,240 --> 00:16:41,680
swiftly go into the protection strategy

434
00:16:41,680 --> 00:16:43,279
and when we talk about protection

435
00:16:43,279 --> 00:16:45,600
strategy i want to start with the

436
00:16:45,600 --> 00:16:47,839
classification because we need to know

437
00:16:47,839 --> 00:16:50,320
what we are building the protection for

438
00:16:50,320 --> 00:16:51,519
um

439
00:16:51,519 --> 00:16:54,240
it's it's not uh you know set in stone

440
00:16:54,240 --> 00:16:57,120
but the va look at the apis it could be

441
00:16:57,120 --> 00:16:59,920
classified in a couple of different ways

442
00:16:59,920 --> 00:17:02,800
so there are internal apis there are

443
00:17:02,800 --> 00:17:04,559
business business-to-business external

444
00:17:04,559 --> 00:17:07,199
api basically the apis that allow your

445
00:17:07,199 --> 00:17:09,599
partner to connect to you and get data

446
00:17:09,599 --> 00:17:11,839
and use it the way they want

447
00:17:11,839 --> 00:17:13,919
and then there is business to consumer

448
00:17:13,919 --> 00:17:18,079
external api um these are apis that are

449
00:17:18,079 --> 00:17:20,559
front you know back into your mobile app

450
00:17:20,559 --> 00:17:22,959
or web app that allows your customers

451
00:17:22,959 --> 00:17:24,799
and consumers to connect and consume the

452
00:17:24,799 --> 00:17:26,160
data

453
00:17:26,160 --> 00:17:29,200
and then there are two third-party apis

454
00:17:29,200 --> 00:17:30,000
and

455
00:17:30,000 --> 00:17:32,640
third-party apis or apis that get

456
00:17:32,640 --> 00:17:34,720
consumed so you have an api that

457
00:17:34,720 --> 00:17:37,120
consumes a third-party api and then

458
00:17:37,120 --> 00:17:39,200
there are apis that could come in from

459
00:17:39,200 --> 00:17:41,520
merger and acquisition

460
00:17:41,520 --> 00:17:43,360
which could be hosted somewhere else

461
00:17:43,360 --> 00:17:45,360
right so if i look at it from a security

462
00:17:45,360 --> 00:17:47,679
perspective clearly uh

463
00:17:47,679 --> 00:17:50,799
there is a box where some apis are

464
00:17:50,799 --> 00:17:53,039
internet facing which are going to be uh

465
00:17:53,039 --> 00:17:54,080
more

466
00:17:54,080 --> 00:17:56,160
attack prone and some are internally

467
00:17:56,160 --> 00:17:58,240
facing and then

468
00:17:58,240 --> 00:18:00,880
the data sensitivity could vary you can

469
00:18:00,880 --> 00:18:04,640
have apis that are internal with uh you

470
00:18:04,640 --> 00:18:08,559
know sensitive pii phi data uh there

471
00:18:08,559 --> 00:18:11,360
could be external apis without any

472
00:18:11,360 --> 00:18:14,080
sensitivity or with sensitive data so

473
00:18:14,080 --> 00:18:16,880
you can classify that acro accordingly i

474
00:18:16,880 --> 00:18:18,880
think that runs across the board as a

475
00:18:18,880 --> 00:18:21,360
horizontal

476
00:18:21,360 --> 00:18:22,559
um

477
00:18:22,559 --> 00:18:25,840
so so it's good we have a box right but

478
00:18:25,840 --> 00:18:27,039
if you look at

479
00:18:27,039 --> 00:18:29,760
things in a real world it doesn't really

480
00:18:29,760 --> 00:18:33,840
work in a particular box for example

481
00:18:33,840 --> 00:18:35,600
you know i've seen this across

482
00:18:35,600 --> 00:18:37,600
organizations where

483
00:18:37,600 --> 00:18:41,039
developers develop apis and it's usually

484
00:18:41,039 --> 00:18:43,600
homegrown to solve for a particular use

485
00:18:43,600 --> 00:18:44,720
case

486
00:18:44,720 --> 00:18:47,600
so they look at a use case they want to

487
00:18:47,600 --> 00:18:50,320
have it automated they develop an api so

488
00:18:50,320 --> 00:18:52,559
that it makes their life easier and then

489
00:18:52,559 --> 00:18:54,880
what happens is after six months or

490
00:18:54,880 --> 00:18:57,039
within a period of six months the word

491
00:18:57,039 --> 00:18:59,840
gets spread within the company through

492
00:18:59,840 --> 00:19:02,640
your all hands or showcase and

493
00:19:02,640 --> 00:19:04,640
developers like to showcase their apis

494
00:19:04,640 --> 00:19:06,480
and then the other developer

495
00:19:06,480 --> 00:19:09,200
is like hey this is really cool i have a

496
00:19:09,200 --> 00:19:11,840
similar use case can i just plug in your

497
00:19:11,840 --> 00:19:13,840
api and then use it right which which

498
00:19:13,840 --> 00:19:14,720
seems

499
00:19:14,720 --> 00:19:17,919
um really uh nice and developers are

500
00:19:17,919 --> 00:19:19,919
always happy that their product is

501
00:19:19,919 --> 00:19:22,720
getting used um so they enable it right

502
00:19:22,720 --> 00:19:23,600
and then

503
00:19:23,600 --> 00:19:26,000
after a few months uh

504
00:19:26,000 --> 00:19:28,000
you know there is a customer there is a

505
00:19:28,000 --> 00:19:30,160
product manager who sees a customer with

506
00:19:30,160 --> 00:19:32,960
the same use case and then he's like uh

507
00:19:32,960 --> 00:19:35,120
can we use this can we test this with

508
00:19:35,120 --> 00:19:37,840
our partners and then again i think you

509
00:19:37,840 --> 00:19:39,679
know the management and developers are

510
00:19:39,679 --> 00:19:43,039
very happy to enable a quick poc to to

511
00:19:43,039 --> 00:19:46,080
that uh api and get that tested and then

512
00:19:46,080 --> 00:19:48,400
before you know they they really you

513
00:19:48,400 --> 00:19:50,080
know like the product

514
00:19:50,080 --> 00:19:51,679
and they want to make it commercial

515
00:19:51,679 --> 00:19:55,440
right and this is where usually i or you

516
00:19:55,440 --> 00:19:57,280
know the security professionals get

517
00:19:57,280 --> 00:19:58,480
involved

518
00:19:58,480 --> 00:20:01,039
they have a need to commercialize this

519
00:20:01,039 --> 00:20:03,440
api they come and ask hey

520
00:20:03,440 --> 00:20:05,600
ravi is this good are we good to go we

521
00:20:05,600 --> 00:20:07,520
need to go live tomorrow right

522
00:20:07,520 --> 00:20:09,520
uh that that puts

523
00:20:09,520 --> 00:20:13,120
me and everyone in odd situation right

524
00:20:13,120 --> 00:20:16,400
so i and when i look at it i i find

525
00:20:16,400 --> 00:20:18,320
problems right and i immediately see a

526
00:20:18,320 --> 00:20:20,400
lot of vulnerabilities and my problem

527
00:20:20,400 --> 00:20:23,440
with that is that's been there all the

528
00:20:23,440 --> 00:20:26,720
way since the api was developed

529
00:20:26,720 --> 00:20:28,720
and and it drives me crazy and you can

530
00:20:28,720 --> 00:20:30,240
imagine how that

531
00:20:30,240 --> 00:20:32,880
discussion goes between the teams right

532
00:20:32,880 --> 00:20:35,200
but i think there should be a better way

533
00:20:35,200 --> 00:20:39,200
to uh have things more consumable um in

534
00:20:39,200 --> 00:20:40,799
in the fast-paced world we need to

535
00:20:40,799 --> 00:20:44,799
embrace automation and velocity so think

536
00:20:44,799 --> 00:20:47,039
uh

537
00:20:47,120 --> 00:20:49,520
not to ignore the boxes but i think as a

538
00:20:49,520 --> 00:20:51,760
building block we can talk about a few

539
00:20:51,760 --> 00:20:55,120
controls right any api that is developed

540
00:20:55,120 --> 00:20:57,600
i think these are some of the key

541
00:20:57,600 --> 00:21:00,000
security capabilities that the apis will

542
00:21:00,000 --> 00:21:01,200
need

543
00:21:01,200 --> 00:21:03,679
so you'll need an authentication like we

544
00:21:03,679 --> 00:21:07,039
talked about it can be mutual tls

545
00:21:07,039 --> 00:21:09,919
or hmac token based authentication and

546
00:21:09,919 --> 00:21:11,520
it definitely needs to have

547
00:21:11,520 --> 00:21:14,159
authorization to have very defined

548
00:21:14,159 --> 00:21:16,960
object base access policies

549
00:21:16,960 --> 00:21:17,840
um

550
00:21:17,840 --> 00:21:18,880
and then

551
00:21:18,880 --> 00:21:20,640
api key lifecycle management so if

552
00:21:20,640 --> 00:21:22,480
you're having visual tls you need to

553
00:21:22,480 --> 00:21:25,039
rotate the keys if you have hmac based

554
00:21:25,039 --> 00:21:27,600
keys again needs to be revoked replaced

555
00:21:27,600 --> 00:21:28,960
rotated

556
00:21:28,960 --> 00:21:30,799
in a period of time

557
00:21:30,799 --> 00:21:33,360
and then rate limiting should be well

558
00:21:33,360 --> 00:21:34,799
thought out

559
00:21:34,799 --> 00:21:37,200
from the initial design even from from

560
00:21:37,200 --> 00:21:39,200
when you have use case defined i think

561
00:21:39,200 --> 00:21:41,440
it's important to put your brains on how

562
00:21:41,440 --> 00:21:43,520
it can be abused and come up with rate

563
00:21:43,520 --> 00:21:46,480
limits that you can apply

564
00:21:46,480 --> 00:21:47,440
and then

565
00:21:47,440 --> 00:21:49,679
transport layer confidentiality and

566
00:21:49,679 --> 00:21:52,000
payload encryption goes kind of hand in

567
00:21:52,000 --> 00:21:56,159
hand if you have sensitive data you need

568
00:21:56,159 --> 00:21:58,000
you know payload encryption you probably

569
00:21:58,000 --> 00:21:59,440
need payload encryption because

570
00:21:59,440 --> 00:22:01,760
transport layer confidentiality can uh

571
00:22:01,760 --> 00:22:04,720
help you to a point if you have a cdn

572
00:22:04,720 --> 00:22:07,280
that's going to uh do your tls

573
00:22:07,280 --> 00:22:09,919
decryption uh your data gets exposed

574
00:22:09,919 --> 00:22:12,559
right so you need to have end-to-end

575
00:22:12,559 --> 00:22:15,280
payload encryption for very critical uh

576
00:22:15,280 --> 00:22:16,880
and sensitive data

577
00:22:16,880 --> 00:22:17,919
and then

578
00:22:17,919 --> 00:22:20,400
secrets management and data at rest

579
00:22:20,400 --> 00:22:23,360
protection i think it's stable stakes

580
00:22:23,360 --> 00:22:25,120
you need to have it across the board if

581
00:22:25,120 --> 00:22:27,360
you're developing api or web app or

582
00:22:27,360 --> 00:22:28,640
whatnot

583
00:22:28,640 --> 00:22:31,520
you can store the secrets in a secure

584
00:22:31,520 --> 00:22:34,240
wall protect your data at rest with

585
00:22:34,240 --> 00:22:37,840
secure key management practices

586
00:22:37,840 --> 00:22:40,480
and then automated bot detection

587
00:22:40,480 --> 00:22:43,360
is again very important control i think

588
00:22:43,360 --> 00:22:45,200
that they need to be

589
00:22:45,200 --> 00:22:47,520
monitoring uh

590
00:22:47,520 --> 00:22:49,919
that's across the apis

591
00:22:49,919 --> 00:22:53,039
to monitor for your use cases baseline

592
00:22:53,039 --> 00:22:55,440
the behavioral aspects of your use cases

593
00:22:55,440 --> 00:22:57,919
and detect anomalies because you could

594
00:22:57,919 --> 00:23:00,799
be good at you know defining rate limits

595
00:23:00,799 --> 00:23:03,840
but the practicality is you may not be

596
00:23:03,840 --> 00:23:06,400
able to define it in a way that's

597
00:23:06,400 --> 00:23:09,120
more restrictive or conservative

598
00:23:09,120 --> 00:23:11,360
so you need to have a more in line

599
00:23:11,360 --> 00:23:13,120
detective tool that can analyze the

600
00:23:13,120 --> 00:23:15,200
behavior and alert you for anomalies

601
00:23:15,200 --> 00:23:16,640
that you can look for

602
00:23:16,640 --> 00:23:19,360
and detect for breaches

603
00:23:19,360 --> 00:23:22,400
content inspection and validation this

604
00:23:22,400 --> 00:23:24,720
goes back to the security filtering

605
00:23:24,720 --> 00:23:27,840
point you need to have a clear

606
00:23:27,840 --> 00:23:30,400
inspection point where you can take the

607
00:23:30,400 --> 00:23:33,120
data inspect sanitize if you need to

608
00:23:33,120 --> 00:23:35,919
before accepting it and then logging i

609
00:23:35,919 --> 00:23:37,760
think is pretty standard file upload

610
00:23:37,760 --> 00:23:39,600
protection is important i talked a

611
00:23:39,600 --> 00:23:41,919
couple of years ago and last con on why

612
00:23:41,919 --> 00:23:44,880
it is important especially in the um it

613
00:23:44,880 --> 00:23:47,840
off apis because things are automated if

614
00:23:47,840 --> 00:23:49,600
you look at malware small versus

615
00:23:49,600 --> 00:23:52,159
becoming uh more fileless so it's easy

616
00:23:52,159 --> 00:23:56,000
to automate and you know just

617
00:23:56,480 --> 00:23:59,200
send a malware into your environment

618
00:23:59,200 --> 00:24:02,320
apis right so it's it can impact you in

619
00:24:02,320 --> 00:24:04,480
any number of ways so that needs to be

620
00:24:04,480 --> 00:24:07,440
guarded um and then the last point is

621
00:24:07,440 --> 00:24:10,000
really perform um

622
00:24:10,000 --> 00:24:11,760
value-driven threat modeling i think

623
00:24:11,760 --> 00:24:15,039
this this uh term was coined by avi who

624
00:24:15,039 --> 00:24:15,919
who

625
00:24:15,919 --> 00:24:16,960
uh

626
00:24:16,960 --> 00:24:19,600
came or maybe came up with this approach

627
00:24:19,600 --> 00:24:22,320
um you know the idea is if you have an

628
00:24:22,320 --> 00:24:25,679
api it's not enough to find that you

629
00:24:25,679 --> 00:24:27,760
have an excesses uh you have to think

630
00:24:27,760 --> 00:24:30,799
about what it really means right so if

631
00:24:30,799 --> 00:24:32,400
you have an exercise maybe

632
00:24:32,400 --> 00:24:34,400
it's a stored exercise that goes into

633
00:24:34,400 --> 00:24:36,799
your database allows you to add a user

634
00:24:36,799 --> 00:24:39,440
and do a cache transfer right so that

635
00:24:39,440 --> 00:24:42,000
type of thinking needs to happen when

636
00:24:42,000 --> 00:24:43,760
you're defining the

637
00:24:43,760 --> 00:24:45,039
you know the sprints when you're

638
00:24:45,039 --> 00:24:47,200
defining the use cases the abuse cases

639
00:24:47,200 --> 00:24:50,000
need to be thought of and i'll um

640
00:24:50,000 --> 00:24:53,120
quickly you know shift to this slide and

641
00:24:53,120 --> 00:24:56,000
then i'll talk more about what questions

642
00:24:56,000 --> 00:24:57,279
we should ask

643
00:24:57,279 --> 00:24:58,840
in that area right

644
00:24:58,840 --> 00:25:01,840
so it's good to

645
00:25:01,840 --> 00:25:03,840
break and implement these building

646
00:25:03,840 --> 00:25:04,799
blocks

647
00:25:04,799 --> 00:25:08,480
but i think when it comes to risk-based

648
00:25:08,480 --> 00:25:10,799
controls you would need to

649
00:25:10,799 --> 00:25:12,400
optimize it

650
00:25:12,400 --> 00:25:15,039
across the board across the circle so

651
00:25:15,039 --> 00:25:18,159
you need to discover the apis catalog

652
00:25:18,159 --> 00:25:20,480
and identify the sensitive ones

653
00:25:20,480 --> 00:25:22,559
and depending on which ones are

654
00:25:22,559 --> 00:25:24,640
sensitive you would have a strategy to

655
00:25:24,640 --> 00:25:26,720
secure them from a security testing and

656
00:25:26,720 --> 00:25:28,880
security review process

657
00:25:28,880 --> 00:25:31,200
you don't have to really threat model

658
00:25:31,200 --> 00:25:33,600
all your internal apis for example if

659
00:25:33,600 --> 00:25:35,200
they don't have sensitive data they're

660
00:25:35,200 --> 00:25:37,679
not going to be exposed to anyone

661
00:25:37,679 --> 00:25:39,919
that's going to be very time consuming

662
00:25:39,919 --> 00:25:42,799
and maybe not uh valuable

663
00:25:42,799 --> 00:25:44,960
so just focus on the ones that you need

664
00:25:44,960 --> 00:25:47,360
to secure based on the sensitivity uh

665
00:25:47,360 --> 00:25:50,640
have test cases to find api related

666
00:25:50,640 --> 00:25:53,200
attacks like i said you know don't just

667
00:25:53,200 --> 00:25:54,400
look for

668
00:25:54,400 --> 00:25:57,279
accesses run a book to find

669
00:25:57,279 --> 00:25:58,559
you know

670
00:25:58,559 --> 00:26:01,360
basic attacks right so look for ap

671
00:26:01,360 --> 00:26:03,600
attacks and also apply policies there

672
00:26:03,600 --> 00:26:05,360
are security policies that can be

673
00:26:05,360 --> 00:26:08,000
applied at uh web application firewall

674
00:26:08,000 --> 00:26:10,640
level to rate limit or at your api

675
00:26:10,640 --> 00:26:12,080
gateway level

676
00:26:12,080 --> 00:26:13,840
so you need to apply the right policies

677
00:26:13,840 --> 00:26:17,360
for the right set of apis otherwise um i

678
00:26:17,360 --> 00:26:19,919
think it's it's an open gate

679
00:26:19,919 --> 00:26:22,080
and then have a clear

680
00:26:22,080 --> 00:26:24,080
monitoring path to detect anonymous i

681
00:26:24,080 --> 00:26:25,760
think we we touched on this point a

682
00:26:25,760 --> 00:26:28,480
number of times

683
00:26:29,200 --> 00:26:32,320
so yeah with that i'll

684
00:26:32,320 --> 00:26:34,720
go to some closing thoughts

685
00:26:34,720 --> 00:26:37,120
again these related relate to the

686
00:26:37,120 --> 00:26:40,400
value-based model that i talked about

687
00:26:40,400 --> 00:26:42,960
whenever the api is designed i think

688
00:26:42,960 --> 00:26:45,360
security needs to be thought out

689
00:26:45,360 --> 00:26:48,320
from the initial phase

690
00:26:48,320 --> 00:26:51,039
so if you're designing an api to

691
00:26:51,039 --> 00:26:54,400
let's say enable cache transfer

692
00:26:54,400 --> 00:26:56,559
you need to think about what's the worst

693
00:26:56,559 --> 00:26:58,640
possible thing that can happen

694
00:26:58,640 --> 00:27:01,360
is it an xss if it's a stored exercise

695
00:27:01,360 --> 00:27:03,039
can somebody

696
00:27:03,039 --> 00:27:04,159
you know

697
00:27:04,159 --> 00:27:06,320
get into the system and transfer the

698
00:27:06,320 --> 00:27:07,600
cash

699
00:27:07,600 --> 00:27:10,640
and i think document the abuse cases

700
00:27:10,640 --> 00:27:13,760
up front and and try to tackle it

701
00:27:13,760 --> 00:27:15,520
and then the second part is about the

702
00:27:15,520 --> 00:27:16,880
data

703
00:27:16,880 --> 00:27:19,279
this relates to the excessive data

704
00:27:19,279 --> 00:27:21,279
exposure aspect

705
00:27:21,279 --> 00:27:23,760
anytime you develop an api you need to

706
00:27:23,760 --> 00:27:26,080
think about what data the api is

707
00:27:26,080 --> 00:27:28,640
exposing to the outside world

708
00:27:28,640 --> 00:27:31,360
and what what will happen if hackers get

709
00:27:31,360 --> 00:27:34,000
it if our competitors get it what what

710
00:27:34,000 --> 00:27:36,640
advantage that it gives to them right um

711
00:27:36,640 --> 00:27:39,200
it can be a well-intentioned api but if

712
00:27:39,200 --> 00:27:40,960
it's just exposing too much data it's

713
00:27:40,960 --> 00:27:43,440
it's a big security risk

714
00:27:43,440 --> 00:27:46,159
and and then you need to think about

715
00:27:46,159 --> 00:27:49,440
whether it is uh appropriate and whether

716
00:27:49,440 --> 00:27:52,320
it is necessary to collect this data um

717
00:27:52,320 --> 00:27:54,000
and then number two would be whether

718
00:27:54,000 --> 00:27:56,320
it's important to expose this data to

719
00:27:56,320 --> 00:27:58,480
the api call right i think

720
00:27:58,480 --> 00:28:00,720
like we saw on the facebook

721
00:28:00,720 --> 00:28:04,559
example it's important to clearly define

722
00:28:04,559 --> 00:28:08,000
what data to be uh exposed to what api

723
00:28:08,000 --> 00:28:08,880
calls

724
00:28:08,880 --> 00:28:11,440
otherwise we're going to expose a lot of

725
00:28:11,440 --> 00:28:13,200
data that's not

726
00:28:13,200 --> 00:28:16,559
needed or probably that goes into uh

727
00:28:16,559 --> 00:28:18,720
hands off uh hackers

728
00:28:18,720 --> 00:28:21,520
um the third would be who are our apa

729
00:28:21,520 --> 00:28:23,360
consumers and that's a difficult

730
00:28:23,360 --> 00:28:26,159
question um so your ap consumer today

731
00:28:26,159 --> 00:28:27,279
could be

732
00:28:27,279 --> 00:28:29,679
an internal api but tomorrow like like

733
00:28:29,679 --> 00:28:31,840
we discussed it could be easily an

734
00:28:31,840 --> 00:28:35,360
external partner so at any point in time

735
00:28:35,360 --> 00:28:37,840
of your apa journey clearly defining

736
00:28:37,840 --> 00:28:40,720
that consumer is very important you need

737
00:28:40,720 --> 00:28:42,880
to know who you are exposing this data

738
00:28:42,880 --> 00:28:44,640
and if that's changing that's going to

739
00:28:44,640 --> 00:28:46,080
change

740
00:28:46,080 --> 00:28:48,320
you know all our modeling to our

741
00:28:48,320 --> 00:28:49,840
previous questions right do we need to

742
00:28:49,840 --> 00:28:51,760
expose this data

743
00:28:51,760 --> 00:28:53,360
do we need to collect this data and

744
00:28:53,360 --> 00:28:55,120
whatnot

745
00:28:55,120 --> 00:28:57,760
and then the security testing strategies

746
00:28:57,760 --> 00:29:00,399
uh i think

747
00:29:00,399 --> 00:29:01,760
these are

748
00:29:01,760 --> 00:29:04,080
good for traditional application assets

749
00:29:04,080 --> 00:29:06,480
today but you know you need to have a

750
00:29:06,480 --> 00:29:08,960
testing strategy that suits your api

751
00:29:08,960 --> 00:29:10,480
right so the

752
00:29:10,480 --> 00:29:12,559
penetration test and then some of the

753
00:29:12,559 --> 00:29:15,200
other tests need to be defined so that

754
00:29:15,200 --> 00:29:17,840
you test specifically your api and see

755
00:29:17,840 --> 00:29:20,399
if it breaks or if it maps to some of

756
00:29:20,399 --> 00:29:24,559
the attacks in the oasp apa top ten

757
00:29:24,720 --> 00:29:27,120
and the last one um of course monitoring

758
00:29:27,120 --> 00:29:29,360
for anomalies i think we touched up on

759
00:29:29,360 --> 00:29:32,320
this uh aspect a lot of times um i think

760
00:29:32,320 --> 00:29:34,399
these are common ground um there could

761
00:29:34,399 --> 00:29:36,399
be multiple other questions that you may

762
00:29:36,399 --> 00:29:39,039
want to um you know run on apis but i

763
00:29:39,039 --> 00:29:41,600
think the important point here is

764
00:29:41,600 --> 00:29:43,440
you need to define this as you are

765
00:29:43,440 --> 00:29:46,240
developing uh your api right as you're

766
00:29:46,240 --> 00:29:47,840
coming up with this use case as you're

767
00:29:47,840 --> 00:29:49,919
bringing the use case from uh your

768
00:29:49,919 --> 00:29:52,320
product backlog into your sprint that's

769
00:29:52,320 --> 00:29:54,399
when you need to think about it not when

770
00:29:54,399 --> 00:29:57,679
you are exposing this to your partner

771
00:29:57,679 --> 00:30:00,080
so i think with that i'll maybe just

772
00:30:00,080 --> 00:30:03,200
give a big quick plug we are hiring if

773
00:30:03,200 --> 00:30:05,679
you're excited just contact me i posted

774
00:30:05,679 --> 00:30:08,159
the job in the job board i think babylon

775
00:30:08,159 --> 00:30:10,399
is an amazing company

776
00:30:10,399 --> 00:30:13,040
that i thank you for your patience

777
00:30:13,040 --> 00:30:19,149
[Applause]

