1
00:00:17,920 --> 00:00:20,560
hello good afternoon everyone hopefully

2
00:00:20,560 --> 00:00:21,760
you all enjoyed lunch and you're ready

3
00:00:21,760 --> 00:00:23,119
to go so let me know if you can't hear

4
00:00:23,119 --> 00:00:24,640
me just like maybe do like this or

5
00:00:24,640 --> 00:00:26,640
something so speak louder

6
00:00:26,640 --> 00:00:28,560
and my talk is on manual javascript

7
00:00:28,560 --> 00:00:30,880
analysis is a bug i've given this talk

8
00:00:30,880 --> 00:00:32,800
before but this is like a more i gave it

9
00:00:32,800 --> 00:00:34,719
back in 2018 before you know the one

10
00:00:34,719 --> 00:00:36,960
wonderful world of kobit so

11
00:00:36,960 --> 00:00:38,320
i've had some time to think about like

12
00:00:38,320 --> 00:00:39,680
how this could be improved and there are

13
00:00:39,680 --> 00:00:43,040
some various improvements to the talk

14
00:00:43,040 --> 00:00:45,039
so just a small little bit about me i'm

15
00:00:45,039 --> 00:00:47,840
a lead i just recently joined

16
00:00:47,840 --> 00:00:49,680
yeah let's get this closer just recently

17
00:00:49,680 --> 00:00:51,600
joined salesforce a month ago and i

18
00:00:51,600 --> 00:00:54,000
joined as a lead security engineer and

19
00:00:54,000 --> 00:00:55,680
i'm working on a team called redscar

20
00:00:55,680 --> 00:00:57,199
which essentially

21
00:00:57,199 --> 00:00:58,960
works at trying to help reduce

22
00:00:58,960 --> 00:01:00,559
vulnerabilities at scale from things

23
00:01:00,559 --> 00:01:03,600
like guardrails automation etc

24
00:01:03,600 --> 00:01:05,119
i don't have any like fancy plugs or

25
00:01:05,119 --> 00:01:06,479
anything but we are hiring if you are

26
00:01:06,479 --> 00:01:09,119
looking for a job uh we are you know

27
00:01:09,119 --> 00:01:11,600
us and other you know realms around the

28
00:01:11,600 --> 00:01:12,560
world

29
00:01:12,560 --> 00:01:14,640
i'm also one of the owasp san francisco

30
00:01:14,640 --> 00:01:16,960
organizers um i've been doing that for

31
00:01:16,960 --> 00:01:18,320
quite a while haven't really been in the

32
00:01:18,320 --> 00:01:21,280
bay area that much recently but still

33
00:01:21,280 --> 00:01:24,080
try and help out when i can

34
00:01:24,080 --> 00:01:26,000
i did a degree in ethical hacking and

35
00:01:26,000 --> 00:01:27,600
during that time i had a lot of fun like

36
00:01:27,600 --> 00:01:29,200
being the president of the ethical

37
00:01:29,200 --> 00:01:31,119
hacking society and at leads in in the

38
00:01:31,119 --> 00:01:32,479
united kingdom

39
00:01:32,479 --> 00:01:34,560
uh more recently i have been running a

40
00:01:34,560 --> 00:01:36,320
security and crumpets podcast which i'm

41
00:01:36,320 --> 00:01:38,960
very proud of under the youtube handle

42
00:01:38,960 --> 00:01:41,040
and twitch handle carl baskin it's a

43
00:01:41,040 --> 00:01:43,439
long story ask me about it later

44
00:01:43,439 --> 00:01:45,360
i have and also the twitter handle

45
00:01:45,360 --> 00:01:48,240
security and tnc and it basically brings

46
00:01:48,240 --> 00:01:49,439
various people from different

47
00:01:49,439 --> 00:01:51,280
backgrounds in the realm of application

48
00:01:51,280 --> 00:01:53,520
security and information security and

49
00:01:53,520 --> 00:01:54,640
basically just ask them about the

50
00:01:54,640 --> 00:01:57,040
background do different tooling

51
00:01:57,040 --> 00:01:58,320
some of the stuff you'll see today i've

52
00:01:58,320 --> 00:01:59,920
had the people that are like are like

53
00:01:59,920 --> 00:02:01,439
the lead people that are building those

54
00:02:01,439 --> 00:02:03,119
tools etc on it's been pretty

55
00:02:03,119 --> 00:02:05,520
fascinating so far

56
00:02:05,520 --> 00:02:07,680
so today i'm going to have a bit of an

57
00:02:07,680 --> 00:02:08,720
agenda

58
00:02:08,720 --> 00:02:10,318
so first we're going to dive into what

59
00:02:10,318 --> 00:02:12,800
is ebook manual work is a bug and what

60
00:02:12,800 --> 00:02:14,319
do i mean by that

61
00:02:14,319 --> 00:02:15,920
we're then going to like dive into what

62
00:02:15,920 --> 00:02:17,599
can and should we automate because a lot

63
00:02:17,599 --> 00:02:19,360
of the things that we do on a day-to-day

64
00:02:19,360 --> 00:02:21,440
basis technically can be automated and

65
00:02:21,440 --> 00:02:25,599
should be part of our workflows

66
00:02:27,840 --> 00:02:29,840
and obviously you know i'll show some of

67
00:02:29,840 --> 00:02:31,440
the things that exist today some of them

68
00:02:31,440 --> 00:02:33,200
are in a commercial sense some of them

69
00:02:33,200 --> 00:02:35,200
are in a free sense and i'll try and

70
00:02:35,200 --> 00:02:37,120
make sure that i talk about those uh

71
00:02:37,120 --> 00:02:38,800
interchangeably so you can get an

72
00:02:38,800 --> 00:02:40,160
understanding of what you can use today

73
00:02:40,160 --> 00:02:42,000
and what you might have to pay for

74
00:02:42,000 --> 00:02:44,160
and also a free proof of concept app

75
00:02:44,160 --> 00:02:46,080
that i've been working on on and off for

76
00:02:46,080 --> 00:02:48,000
two years uh took a bit of a hiatus

77
00:02:48,000 --> 00:02:50,000
between covert but hopefully i can get

78
00:02:50,000 --> 00:02:53,360
the momentum to continue it

79
00:02:53,760 --> 00:02:56,400
so this is quite an interesting um kind

80
00:02:56,400 --> 00:02:58,879
of philosophy there's a wonderful paper

81
00:02:58,879 --> 00:03:02,000
from a person called lemus thomas a

82
00:03:02,000 --> 00:03:04,239
lemoncelli which is a great last name it

83
00:03:04,239 --> 00:03:05,760
reminds me of lemoncello and lemoncello

84
00:03:05,760 --> 00:03:07,200
is delightful so

85
00:03:07,200 --> 00:03:09,120
that's pretty great but he wrote a

86
00:03:09,120 --> 00:03:10,400
really interesting article that

87
00:03:10,400 --> 00:03:12,080
basically was titled manual work as a

88
00:03:12,080 --> 00:03:14,080
bug and he goes into detail about these

89
00:03:14,080 --> 00:03:15,519
two engineers

90
00:03:15,519 --> 00:03:17,519
these two engineers both have the same

91
00:03:17,519 --> 00:03:19,440
type of skill set but one of them was

92
00:03:19,440 --> 00:03:21,599
deemed more successful in the field for

93
00:03:21,599 --> 00:03:22,800
some reason

94
00:03:22,800 --> 00:03:24,080
and the reason why even though they were

95
00:03:24,080 --> 00:03:25,840
equally as talented the person that was

96
00:03:25,840 --> 00:03:27,760
deemed more successful was because of

97
00:03:27,760 --> 00:03:30,640
their iterative process of automation

98
00:03:30,640 --> 00:03:32,080
you know automation isn't always a

99
00:03:32,080 --> 00:03:34,239
lifesaver sometimes you do a task once

100
00:03:34,239 --> 00:03:36,319
and then you walk away that's perfectly

101
00:03:36,319 --> 00:03:38,400
fine uh but for a lot of the work that

102
00:03:38,400 --> 00:03:40,080
we do in application security we really

103
00:03:40,080 --> 00:03:41,599
want to think about how can we automate

104
00:03:41,599 --> 00:03:43,200
those things to

105
00:03:43,200 --> 00:03:44,640
be able to like challenge ourselves and

106
00:03:44,640 --> 00:03:47,280
do find more issues that we may have not

107
00:03:47,280 --> 00:03:48,720
found due to like trying to just do the

108
00:03:48,720 --> 00:03:50,640
repetitive tasks

109
00:03:50,640 --> 00:03:51,599
but the

110
00:03:51,599 --> 00:03:53,360
the blog post goes into a lot of detail

111
00:03:53,360 --> 00:03:55,280
about how you would document and go down

112
00:03:55,280 --> 00:03:57,519
that process now the first thing

113
00:03:57,519 --> 00:03:59,200
is basically document the steps and this

114
00:03:59,200 --> 00:04:00,480
is like your brain

115
00:04:00,480 --> 00:04:01,840
just writing it down from your brain

116
00:04:01,840 --> 00:04:03,040
into paper

117
00:04:03,040 --> 00:04:04,480
and this basically is where you are the

118
00:04:04,480 --> 00:04:06,400
cpu and you're writing step-by-step

119
00:04:06,400 --> 00:04:08,560
guides on what needs to happen and a few

120
00:04:08,560 --> 00:04:10,000
examples of this this could be very

121
00:04:10,000 --> 00:04:12,000
basic to begin with it could be

122
00:04:12,000 --> 00:04:13,840
um basically you're searching for domex

123
00:04:13,840 --> 00:04:15,280
success and you want to look for these

124
00:04:15,280 --> 00:04:16,399
particular

125
00:04:16,399 --> 00:04:18,399
patterns

126
00:04:18,399 --> 00:04:20,160
then you want to create the automation

127
00:04:20,160 --> 00:04:22,079
process or the equivalence and that

128
00:04:22,079 --> 00:04:23,759
basically could be snippets of code or

129
00:04:23,759 --> 00:04:25,120
it could even just be simple command

130
00:04:25,120 --> 00:04:27,040
line arguments for a tool that you run

131
00:04:27,040 --> 00:04:29,360
on a day-to-day basis like nmap

132
00:04:29,360 --> 00:04:31,199
but from a let's just keep the domex

133
00:04:31,199 --> 00:04:33,520
success scenario like let's say the

134
00:04:33,520 --> 00:04:35,199
starting the automation process you were

135
00:04:35,199 --> 00:04:36,960
manually searching for these particular

136
00:04:36,960 --> 00:04:38,639
payloads now you might want to start

137
00:04:38,639 --> 00:04:40,720
building static analysis rules to try

138
00:04:40,720 --> 00:04:42,400
and identify

139
00:04:42,400 --> 00:04:45,120
those locations for you

140
00:04:45,120 --> 00:04:46,320
and then you basically want to create

141
00:04:46,320 --> 00:04:47,840
the automation so you let's start

142
00:04:47,840 --> 00:04:49,600
leveraging the tool to try and identify

143
00:04:49,600 --> 00:04:51,840
those issues you know like rather than

144
00:04:51,840 --> 00:04:53,680
looking for it manually and scanning

145
00:04:53,680 --> 00:04:55,040
individual code you just kind of code

146
00:04:55,040 --> 00:04:57,199
base and try and find those bugs

147
00:04:57,199 --> 00:04:58,720
and then finally you want to get to self

148
00:04:58,720 --> 00:05:00,800
automation or a standalone tool where

149
00:05:00,800 --> 00:05:03,120
you can automatically like even give it

150
00:05:03,120 --> 00:05:04,320
a url

151
00:05:04,320 --> 00:05:06,160
like to try and find domex assess via

152
00:05:06,160 --> 00:05:08,240
headless browsing with like things like

153
00:05:08,240 --> 00:05:09,360
burp suite

154
00:05:09,360 --> 00:05:11,280
or automatically try and find domex

155
00:05:11,280 --> 00:05:12,800
assessment iterative improve those

156
00:05:12,800 --> 00:05:14,720
static analysis rules over time as

157
00:05:14,720 --> 00:05:16,800
either a self-service or as like an

158
00:05:16,800 --> 00:05:19,600
autonomous system

159
00:05:20,880 --> 00:05:23,680
now one of my good friends paseo wrote a

160
00:05:23,680 --> 00:05:25,039
blog about this and his name isn't

161
00:05:25,039 --> 00:05:26,639
actually parsley a hacker man it's hiker

162
00:05:26,639 --> 00:05:28,240
man but i mean he dressed up as

163
00:05:28,240 --> 00:05:29,680
hackerman for halloween once and i'm

164
00:05:29,680 --> 00:05:31,520
sticking with that so

165
00:05:31,520 --> 00:05:33,360
um he basically wrote a blog post which

166
00:05:33,360 --> 00:05:34,639
i would highly recommend you checking

167
00:05:34,639 --> 00:05:36,080
out if you're interested in this kind of

168
00:05:36,080 --> 00:05:37,120
realm

169
00:05:37,120 --> 00:05:38,560
it basically goes into a lot of

170
00:05:38,560 --> 00:05:40,080
reflections about like automating

171
00:05:40,080 --> 00:05:41,919
everything you can everything is just a

172
00:05:41,919 --> 00:05:43,280
series of manual steps in your

173
00:05:43,280 --> 00:05:45,039
documentation with a bunch of code

174
00:05:45,039 --> 00:05:46,639
snippets that your mind be the cpu

175
00:05:46,639 --> 00:05:48,080
follow these directions and improve them

176
00:05:48,080 --> 00:05:50,000
when you can and in his blog post it

177
00:05:50,000 --> 00:05:51,680
goes into detail about like

178
00:05:51,680 --> 00:05:53,440
every time you think of a new idea or a

179
00:05:53,440 --> 00:05:56,160
new update to like your process

180
00:05:56,160 --> 00:05:57,600
update that immediately otherwise you

181
00:05:57,600 --> 00:05:59,280
won't do it um

182
00:05:59,280 --> 00:06:01,199
but i have a pretty fun backstory about

183
00:06:01,199 --> 00:06:03,360
parseya and we both used to work at a

184
00:06:03,360 --> 00:06:05,280
company called sigil that eventually got

185
00:06:05,280 --> 00:06:06,960
acquired by synopsis

186
00:06:06,960 --> 00:06:10,400
um and basically um whenever someone had

187
00:06:10,400 --> 00:06:12,319
a question about thick clients or like

188
00:06:12,319 --> 00:06:14,160
kind of testing like java applications

189
00:06:14,160 --> 00:06:16,800
for example you always ask the question

190
00:06:16,800 --> 00:06:17,600
like

191
00:06:17,600 --> 00:06:19,919
um you know how do you do x y and z and

192
00:06:19,919 --> 00:06:21,680
normal normally the response to most

193
00:06:21,680 --> 00:06:23,919
consultants was have you asked past year

194
00:06:23,919 --> 00:06:25,919
and that's because parcel internally was

195
00:06:25,919 --> 00:06:27,280
working on this thing called the parsia

196
00:06:27,280 --> 00:06:28,880
clone and the past year clone was

197
00:06:28,880 --> 00:06:30,639
basically he wanted to make himself

198
00:06:30,639 --> 00:06:32,319
redundant he didn't really want to you

199
00:06:32,319 --> 00:06:33,120
know

200
00:06:33,120 --> 00:06:34,560
basically always answer the question so

201
00:06:34,560 --> 00:06:36,000
he built this past year clone which was

202
00:06:36,000 --> 00:06:38,560
basically a wiki trying to clone himself

203
00:06:38,560 --> 00:06:40,560
for like things like how to use a tool

204
00:06:40,560 --> 00:06:42,639
how to intercept you know traffic in a

205
00:06:42,639 --> 00:06:44,960
fixed client how to add certificates to

206
00:06:44,960 --> 00:06:47,680
your java store etc and obviously

207
00:06:47,680 --> 00:06:49,280
writing down the ways to do that you can

208
00:06:49,280 --> 00:06:50,479
obviously eventually start to build

209
00:06:50,479 --> 00:06:52,160
automation into your pipelines to try

210
00:06:52,160 --> 00:06:54,160
and do that yourself

211
00:06:54,160 --> 00:06:56,560
and so that's basically where that kind

212
00:06:56,560 --> 00:06:58,960
of site came from and this is my own

213
00:06:58,960 --> 00:07:00,560
personal philosophy

214
00:07:00,560 --> 00:07:02,000
the more things that you can automate

215
00:07:02,000 --> 00:07:04,160
will allow you to spend time looking at

216
00:07:04,160 --> 00:07:05,840
you know more interesting bugs in my

217
00:07:05,840 --> 00:07:07,199
opinion so

218
00:07:07,199 --> 00:07:08,639
automation will allow you to look for

219
00:07:08,639 --> 00:07:10,639
like business logic flaws that allow you

220
00:07:10,639 --> 00:07:12,720
to atta identify more attack chains as

221
00:07:12,720 --> 00:07:14,720
well because if you're that there have

222
00:07:14,720 --> 00:07:16,160
been a lot of scenarios where i talked

223
00:07:16,160 --> 00:07:17,599
to a lot of consultants and i see their

224
00:07:17,599 --> 00:07:18,960
reports when i used to work in

225
00:07:18,960 --> 00:07:20,160
consulting

226
00:07:20,160 --> 00:07:21,599
and a lot of the time they would found

227
00:07:21,599 --> 00:07:23,759
like 17 instances of xss and they did

228
00:07:23,759 --> 00:07:25,199
that manually you know they were testing

229
00:07:25,199 --> 00:07:26,560
it dynamically et cetera and that's

230
00:07:26,560 --> 00:07:28,160
great but they could have spent a lot

231
00:07:28,160 --> 00:07:30,000
more time like finding a few instances

232
00:07:30,000 --> 00:07:31,520
or trying to automate finding all the

233
00:07:31,520 --> 00:07:33,599
instances and spending more time finding

234
00:07:33,599 --> 00:07:36,719
other bugs so

235
00:07:37,440 --> 00:07:39,039
now let's move on to the fun stuff what

236
00:07:39,039 --> 00:07:40,240
are the types of things that we should

237
00:07:40,240 --> 00:07:42,400
automate or what we you know can but

238
00:07:42,400 --> 00:07:46,560
technically should or already are there

239
00:07:49,520 --> 00:07:50,720
so

240
00:07:50,720 --> 00:07:52,800
i have quite a few gifts in this or as

241
00:07:52,800 --> 00:07:55,039
someone said earlier gifs i still i'm

242
00:07:55,039 --> 00:07:57,360
okay with both interchangeably

243
00:07:57,360 --> 00:08:00,400
um i think a good place to start with is

244
00:08:00,400 --> 00:08:02,240
that we shouldn't have to with inside

245
00:08:02,240 --> 00:08:04,720
web applications from both a dynamic and

246
00:08:04,720 --> 00:08:06,960
also static analysis perspective these

247
00:08:06,960 --> 00:08:08,479
days we shouldn't have to try and look

248
00:08:08,479 --> 00:08:10,720
for basic sources and syncs

249
00:08:10,720 --> 00:08:12,479
obviously if you're not if this is a new

250
00:08:12,479 --> 00:08:14,639
concept for you uh that's fine a source

251
00:08:14,639 --> 00:08:16,479
is basically anything a user has control

252
00:08:16,479 --> 00:08:18,400
over and a sync is anything where

253
00:08:18,400 --> 00:08:21,199
malicious input can contain can cause

254
00:08:21,199 --> 00:08:23,120
undesirable effects like cross-site

255
00:08:23,120 --> 00:08:25,120
scripting

256
00:08:25,120 --> 00:08:26,720
when we think about the javascript land

257
00:08:26,720 --> 00:08:28,000
you know there's many

258
00:08:28,000 --> 00:08:29,680
common sources that can come from places

259
00:08:29,680 --> 00:08:31,599
such as response.txt

260
00:08:31,599 --> 00:08:33,200
which basically when you perform a

261
00:08:33,200 --> 00:08:35,279
cross-origin resource sharing or xhr

262
00:08:35,279 --> 00:08:36,479
request

263
00:08:36,479 --> 00:08:38,159
you basically get this response text and

264
00:08:38,159 --> 00:08:40,479
that technically could contain user data

265
00:08:40,479 --> 00:08:41,919
you have event data from things like

266
00:08:41,919 --> 00:08:43,760
post messages you have the window

267
00:08:43,760 --> 00:08:45,360
location.hash which obviously is

268
00:08:45,360 --> 00:08:47,600
controllable by a user and obviously you

269
00:08:47,600 --> 00:08:49,360
have things like cookies locate like

270
00:08:49,360 --> 00:08:52,000
local storage uh indexeddb all of those

271
00:08:52,000 --> 00:08:54,480
wonderful things in the browser and

272
00:08:54,480 --> 00:08:55,920
obviously a common sync would be things

273
00:08:55,920 --> 00:08:58,240
like dynamic evaluation of javascript

274
00:08:58,240 --> 00:09:01,680
such as you know eval etc in html window

275
00:09:01,680 --> 00:09:04,480
location href obviously allows you to

276
00:09:04,480 --> 00:09:05,920
even though it technically

277
00:09:05,920 --> 00:09:08,360
can be sometimes the source too but

278
00:09:08,360 --> 00:09:10,320
window.location.href obviously can lead

279
00:09:10,320 --> 00:09:13,519
to like things like javascript uris

280
00:09:13,519 --> 00:09:14,240
so

281
00:09:14,240 --> 00:09:15,760
in reality we shouldn't have to look at

282
00:09:15,760 --> 00:09:17,040
these things at least from either a

283
00:09:17,040 --> 00:09:19,200
detection and also a you know trying to

284
00:09:19,200 --> 00:09:21,760
find vulnerability state

285
00:09:21,760 --> 00:09:24,640
now today's modern world obviously um i

286
00:09:24,640 --> 00:09:26,320
my personal recommendations are to

287
00:09:26,320 --> 00:09:28,000
leverage things like some grep and burp

288
00:09:28,000 --> 00:09:29,360
suite

289
00:09:29,360 --> 00:09:32,080
so you can also use um obviously zap zap

290
00:09:32,080 --> 00:09:34,480
is a free os project it's very good in

291
00:09:34,480 --> 00:09:36,480
its own right but there are a few things

292
00:09:36,480 --> 00:09:37,839
that it lacks and that's why i'm

293
00:09:37,839 --> 00:09:39,440
recommending you know burp suite today

294
00:09:39,440 --> 00:09:41,200
you should use them interchangeably i

295
00:09:41,200 --> 00:09:43,600
think ultimately zap's headless mode is

296
00:09:43,600 --> 00:09:45,279
abso you know really good for a lot of

297
00:09:45,279 --> 00:09:47,279
teams i think the crawling aspect for

298
00:09:47,279 --> 00:09:50,080
most modern websites is the hardest part

299
00:09:50,080 --> 00:09:51,440
but for detecting issues i would

300
00:09:51,440 --> 00:09:54,480
recommend semgrep and bupsuite so

301
00:09:54,480 --> 00:09:56,800
when we think about semgrep iclaster has

302
00:09:56,800 --> 00:09:58,640
the go-to tool for making sure that code

303
00:09:58,640 --> 00:10:00,240
issues are squashed before you make them

304
00:10:00,240 --> 00:10:02,880
into a repository it's very flexible and

305
00:10:02,880 --> 00:10:04,160
that's what makes it really good like a

306
00:10:04,160 --> 00:10:06,079
lot of the time static analysis tools

307
00:10:06,079 --> 00:10:08,160
and sorry if i'm speaking fast i'll slow

308
00:10:08,160 --> 00:10:10,320
it down a bit a lot of the time static

309
00:10:10,320 --> 00:10:12,720
analysis tools tend to

310
00:10:12,720 --> 00:10:14,399
um

311
00:10:14,399 --> 00:10:15,920
tend to be quite problematic in the

312
00:10:15,920 --> 00:10:17,200
sense that they're really hard to

313
00:10:17,200 --> 00:10:18,880
understand from writing a rule like your

314
00:10:18,880 --> 00:10:20,240
own personal rule

315
00:10:20,240 --> 00:10:23,120
uh or they're over complex or they don't

316
00:10:23,120 --> 00:10:24,800
allow it so there's some companies that

317
00:10:24,800 --> 00:10:26,480
think that the vendor themselves should

318
00:10:26,480 --> 00:10:27,760
be the golden source of truth for

319
00:10:27,760 --> 00:10:30,160
finding bugs which obviously

320
00:10:30,160 --> 00:10:31,440
a lot of people probably don't agree

321
00:10:31,440 --> 00:10:33,760
with myself included

322
00:10:33,760 --> 00:10:35,279
from that's from the static analysis

323
00:10:35,279 --> 00:10:37,760
perspective

324
00:10:40,720 --> 00:10:43,200
yeah it's it's similar so it basically

325
00:10:43,200 --> 00:10:45,279
can obviously pass on an abstract syntax

326
00:10:45,279 --> 00:10:47,440
tree it uses an open source tool called

327
00:10:47,440 --> 00:10:50,000
tree sitter which basically allows you

328
00:10:50,000 --> 00:10:51,920
to get like the language specifications

329
00:10:51,920 --> 00:10:53,680
for a language and you can easily build

330
00:10:53,680 --> 00:10:54,880
on top of that

331
00:10:54,880 --> 00:10:57,120
and so it is using open source tools

332
00:10:57,120 --> 00:10:58,720
obviously it's an open source product so

333
00:10:58,720 --> 00:11:00,079
you can take a look at all of the code

334
00:11:00,079 --> 00:11:01,839
apart from maybe some of the private

335
00:11:01,839 --> 00:11:03,120
repository stuff and like their

336
00:11:03,120 --> 00:11:05,120
commercial aspects which technically

337
00:11:05,120 --> 00:11:07,120
that's just like if you want to have all

338
00:11:07,120 --> 00:11:09,279
of your data going into like a dashboard

339
00:11:09,279 --> 00:11:11,200
and stuff

340
00:11:11,200 --> 00:11:13,440
yep completely free obviously burp suite

341
00:11:13,440 --> 00:11:15,440
has a community version and i'm going to

342
00:11:15,440 --> 00:11:18,880
talk about some of those components too

343
00:11:18,880 --> 00:11:19,839
so

344
00:11:19,839 --> 00:11:22,000
for me like uh the one way i generally

345
00:11:22,000 --> 00:11:24,320
try to find um issues now in today's

346
00:11:24,320 --> 00:11:25,839
code is basically leveraging the same

347
00:11:25,839 --> 00:11:26,800
grip

348
00:11:26,800 --> 00:11:28,560
and i would class it as a swiss army

349
00:11:28,560 --> 00:11:30,079
knife because you can extract out

350
00:11:30,079 --> 00:11:31,600
information regarding an application

351
00:11:31,600 --> 00:11:33,440
which i think is very valuable because

352
00:11:33,440 --> 00:11:35,040
you can use that and put it into other

353
00:11:35,040 --> 00:11:36,399
tools

354
00:11:36,399 --> 00:11:38,480
um you know you can use it to identify

355
00:11:38,480 --> 00:11:40,240
security issues in source code you could

356
00:11:40,240 --> 00:11:42,240
even use it for quality issues and other

357
00:11:42,240 --> 00:11:44,320
aspects too and even like missing like

358
00:11:44,320 --> 00:11:46,079
authorization checks you know in your

359
00:11:46,079 --> 00:11:48,880
code base which i think is very valuable

360
00:11:48,880 --> 00:11:50,720
um and you know you can combine it with

361
00:11:50,720 --> 00:11:52,000
other software

362
00:11:52,000 --> 00:11:53,760
so as you can see here like the rules

363
00:11:53,760 --> 00:11:55,360
are really simple in nice simple

364
00:11:55,360 --> 00:11:56,639
language

365
00:11:56,639 --> 00:11:58,720
i'll be the rockstar um so obviously you

366
00:11:58,720 --> 00:12:00,320
have things like you you can define a

367
00:12:00,320 --> 00:12:02,079
rule it's all in yaml you basically

368
00:12:02,079 --> 00:12:04,000
define your id with what kind of message

369
00:12:04,000 --> 00:12:05,600
you want this can contain like meta

370
00:12:05,600 --> 00:12:07,680
variables and stuff you define your

371
00:12:07,680 --> 00:12:09,360
languages it can be many languages it

372
00:12:09,360 --> 00:12:11,279
could be like regex it could be html it

373
00:12:11,279 --> 00:12:13,600
could be javascript it could be go etc

374
00:12:13,600 --> 00:12:14,959
and then you build patterns and this is

375
00:12:14,959 --> 00:12:17,440
all just the same language and the same

376
00:12:17,440 --> 00:12:19,279
coding that you would generally see so i

377
00:12:19,279 --> 00:12:21,440
think like a lot of tools kind of are

378
00:12:21,440 --> 00:12:23,040
super complex and it's really hard to

379
00:12:23,040 --> 00:12:24,480
write the rules

380
00:12:24,480 --> 00:12:25,839
but personally for me i think it's one

381
00:12:25,839 --> 00:12:27,440
of the easiest ways to get started

382
00:12:27,440 --> 00:12:30,639
trying to find bugs

383
00:12:30,639 --> 00:12:32,720
now another way is basically leveraging

384
00:12:32,720 --> 00:12:34,639
something like the burp automatic

385
00:12:34,639 --> 00:12:36,240
scanner which obviously is a paid

386
00:12:36,240 --> 00:12:38,320
product realistically you could use the

387
00:12:38,320 --> 00:12:40,000
zap version too zap has its own

388
00:12:40,000 --> 00:12:41,519
automatic scanner for trying to find

389
00:12:41,519 --> 00:12:44,160
like domex assess but i still think the

390
00:12:44,160 --> 00:12:45,760
the burp scanner is a little bit more

391
00:12:45,760 --> 00:12:48,000
ahead of head of the game realistically

392
00:12:48,000 --> 00:12:49,600
because it basically allows you to

393
00:12:49,600 --> 00:12:51,839
identify the sources and sinks which

394
00:12:51,839 --> 00:12:54,800
obviously is very valuable

395
00:12:54,800 --> 00:12:56,800
so the one and obviously the two types

396
00:12:56,800 --> 00:12:58,480
of things that identifies is normally

397
00:12:58,480 --> 00:13:00,480
basically um

398
00:13:00,480 --> 00:13:03,279
javascript injection so you already have

399
00:13:03,279 --> 00:13:05,440
basically the ability you're inside a

400
00:13:05,440 --> 00:13:06,800
javascript function and you have

401
00:13:06,800 --> 00:13:08,720
execution there or there's things like

402
00:13:08,720 --> 00:13:10,240
inner html assignments where you're

403
00:13:10,240 --> 00:13:12,639
taking over the html property which

404
00:13:12,639 --> 00:13:16,160
allows you to inject malicious code

405
00:13:16,160 --> 00:13:18,079
now something that's like super new and

406
00:13:18,079 --> 00:13:19,760
super interesting from my perspective is

407
00:13:19,760 --> 00:13:22,320
the dom invader um it's nothing kinky i

408
00:13:22,320 --> 00:13:24,320
swear

409
00:13:24,320 --> 00:13:25,920
you know the browser realistically

410
00:13:25,920 --> 00:13:28,079
should be leveraged to detect different

411
00:13:28,079 --> 00:13:30,320
types of document object model issues

412
00:13:30,320 --> 00:13:31,920
and this is my personal philosophy

413
00:13:31,920 --> 00:13:34,160
because the browser knows how to render

414
00:13:34,160 --> 00:13:36,160
things the browser is easy to like

415
00:13:36,160 --> 00:13:37,920
iterate over you can interact with the

416
00:13:37,920 --> 00:13:40,720
dom at runtime and if you don't leverage

417
00:13:40,720 --> 00:13:42,959
you know things within the browser you

418
00:13:42,959 --> 00:13:45,199
will miss a lot of bugs so anything like

419
00:13:45,199 --> 00:13:47,839
post message evaluation anything like

420
00:13:47,839 --> 00:13:50,399
you know dom based assignments variable

421
00:13:50,399 --> 00:13:52,000
assignments etc

422
00:13:52,000 --> 00:13:55,279
you can find this all in in the world

423
00:13:55,279 --> 00:13:57,279
of of the browser now what a lot of

424
00:13:57,279 --> 00:13:58,560
people have done

425
00:13:58,560 --> 00:14:01,120
is leverage things like this so

426
00:14:01,120 --> 00:14:03,120
as you can see here what burps we have

427
00:14:03,120 --> 00:14:04,639
done and this is also in the free

428
00:14:04,639 --> 00:14:05,920
version so you can use it in the

429
00:14:05,920 --> 00:14:07,920
community version so you shouldn't have

430
00:14:07,920 --> 00:14:10,399
to manually go and look for you know

431
00:14:10,399 --> 00:14:12,480
arbitrary you know sources and sinks

432
00:14:12,480 --> 00:14:14,399
when what you're seeing here is that you

433
00:14:14,399 --> 00:14:16,480
have the location.search and the url

434
00:14:16,480 --> 00:14:18,639
params that is you know things which are

435
00:14:18,639 --> 00:14:20,959
in the query string which are going into

436
00:14:20,959 --> 00:14:22,320
like what we classed as syncs like

437
00:14:22,320 --> 00:14:25,760
document.write so as you can see here

438
00:14:25,760 --> 00:14:28,160
you can add canaries and the canaries

439
00:14:28,160 --> 00:14:30,160
are basically used to try and identify

440
00:14:30,160 --> 00:14:32,160
where things go from a source into a

441
00:14:32,160 --> 00:14:34,320
sink and you can choose like inject

442
00:14:34,320 --> 00:14:38,079
canary into url into forms etc

443
00:14:38,079 --> 00:14:38,880
so

444
00:14:38,880 --> 00:14:40,240
it tries to automatically and

445
00:14:40,240 --> 00:14:42,560
automatically try and find where those

446
00:14:42,560 --> 00:14:45,839
sources and sinks interconnect

447
00:14:45,920 --> 00:14:47,120
hopefully i can make it back to my

448
00:14:47,120 --> 00:14:48,560
presentation

449
00:14:48,560 --> 00:14:50,800
cool

450
00:14:52,720 --> 00:14:55,199
so the reason why i still recommend burp

451
00:14:55,199 --> 00:14:57,279
to be one of the best kind of things is

452
00:14:57,279 --> 00:14:58,880
because it also detects out-of-bound

453
00:14:58,880 --> 00:15:00,079
responses

454
00:15:00,079 --> 00:15:01,760
and there's only you can't really do

455
00:15:01,760 --> 00:15:03,120
this without having an automation

456
00:15:03,120 --> 00:15:04,320
pipeline

457
00:15:04,320 --> 00:15:06,000
so when i think when you think about

458
00:15:06,000 --> 00:15:08,160
out-of-bound responses it's like you

459
00:15:08,160 --> 00:15:10,720
have you inject some data into a

460
00:15:10,720 --> 00:15:13,440
back-end service like an admin portal

461
00:15:13,440 --> 00:15:14,800
or like something which you generally

462
00:15:14,800 --> 00:15:16,560
don't see like a customer support portal

463
00:15:16,560 --> 00:15:18,000
or something like that which a user

464
00:15:18,000 --> 00:15:19,680
would not see

465
00:15:19,680 --> 00:15:21,600
now you know you can find like different

466
00:15:21,600 --> 00:15:23,360
types of vulnerabilities that then can

467
00:15:23,360 --> 00:15:25,040
be leveraged to ping back to your own

468
00:15:25,040 --> 00:15:27,279
systems and burp suite has something

469
00:15:27,279 --> 00:15:29,759
called the collaborator which allows you

470
00:15:29,759 --> 00:15:31,440
to identify

471
00:15:31,440 --> 00:15:33,120
um different types of vulnerabilities

472
00:15:33,120 --> 00:15:35,120
such as like xxe server side request

473
00:15:35,120 --> 00:15:38,560
forgery blind xss and you know blind sql

474
00:15:38,560 --> 00:15:40,160
injection for example because it may

475
00:15:40,160 --> 00:15:42,000
happen and you might be able to like use

476
00:15:42,000 --> 00:15:46,320
that sql query to make outbound calls

477
00:15:46,320 --> 00:15:48,880
so and this is like really interesting

478
00:15:48,880 --> 00:15:50,160
so

479
00:15:50,160 --> 00:15:51,680
one of the things that i think is kind

480
00:15:51,680 --> 00:15:53,839
of like underappreciated in in the world

481
00:15:53,839 --> 00:15:56,320
of um application security is basically

482
00:15:56,320 --> 00:15:58,560
detecting out-of-bound responses such as

483
00:15:58,560 --> 00:16:00,079
like blind xss

484
00:16:00,079 --> 00:16:01,680
and this is this this is of course when

485
00:16:01,680 --> 00:16:03,440
you find a cross-site scripting

486
00:16:03,440 --> 00:16:06,320
injection that ultimately leads to

487
00:16:06,320 --> 00:16:07,759
um

488
00:16:07,759 --> 00:16:09,600
execution inside a context that you

489
00:16:09,600 --> 00:16:10,880
can't see

490
00:16:10,880 --> 00:16:12,959
and then it ends up coming back um you

491
00:16:12,959 --> 00:16:15,199
know to to your server later

492
00:16:15,199 --> 00:16:17,680
so burp collaborator does detect blind

493
00:16:17,680 --> 00:16:19,040
xss

494
00:16:19,040 --> 00:16:20,160
however

495
00:16:20,160 --> 00:16:22,399
it only has a couple of payloads

496
00:16:22,399 --> 00:16:24,800
and into today's modern web applications

497
00:16:24,800 --> 00:16:26,399
you have various different frameworks

498
00:16:26,399 --> 00:16:28,800
that render html properties different

499
00:16:28,800 --> 00:16:30,639
such as like angularjs

500
00:16:30,639 --> 00:16:32,639
and you know those and like vue.js for

501
00:16:32,639 --> 00:16:34,720
example they take mustache templates

502
00:16:34,720 --> 00:16:37,279
they take um you know html properties

503
00:16:37,279 --> 00:16:38,959
that like could be evaluated in

504
00:16:38,959 --> 00:16:42,079
javascript this is known as a

505
00:16:42,079 --> 00:16:43,519
it'll come back to me

506
00:16:43,519 --> 00:16:45,360
but anyway so the first

507
00:16:45,360 --> 00:16:47,199
uh our initial tool that was used for

508
00:16:47,199 --> 00:16:49,600
blind xss was technically a project from

509
00:16:49,600 --> 00:16:52,480
netflix and it was called sleepy poppy

510
00:16:52,480 --> 00:16:55,199
um that got deprecated a long time ago

511
00:16:55,199 --> 00:16:57,199
and then basically exorcist hunter was

512
00:16:57,199 --> 00:16:59,279
made by matthew bryan who

513
00:16:59,279 --> 00:17:01,519
i believe works at google may have left

514
00:17:01,519 --> 00:17:03,759
it used to work at snapchat too

515
00:17:03,759 --> 00:17:05,520
his name is matt on tw on twitter he's

516
00:17:05,520 --> 00:17:07,919
mandatory programmer and also on github

517
00:17:07,919 --> 00:17:10,079
uh he created a project called exercise

518
00:17:10,079 --> 00:17:12,400
hunter that allows you to like set up

519
00:17:12,400 --> 00:17:14,720
your own subdomain on the you know

520
00:17:14,720 --> 00:17:15,839
website

521
00:17:15,839 --> 00:17:17,520
and then basically copy all the payloads

522
00:17:17,520 --> 00:17:19,439
and then use those to try and find blind

523
00:17:19,439 --> 00:17:21,599
xss and it will automatically

524
00:17:21,599 --> 00:17:24,880
tell you about the blind xss issues

525
00:17:24,880 --> 00:17:27,119
then i also the reason why i said top

526
00:17:27,119 --> 00:17:29,039
dog and hotdog is because i created the

527
00:17:29,039 --> 00:17:31,760
second one which is basically vxss it

528
00:17:31,760 --> 00:17:34,000
basically tried to go that extra step

529
00:17:34,000 --> 00:17:36,720
further to be like super or automatic

530
00:17:36,720 --> 00:17:39,360
and um in the sense of like it will try

531
00:17:39,360 --> 00:17:42,480
and identify a well-known dot security

532
00:17:42,480 --> 00:17:44,240
text which allows you to like retrieve

533
00:17:44,240 --> 00:17:46,080
that information and then automatically

534
00:17:46,080 --> 00:17:48,400
send an email address and an email

535
00:17:48,400 --> 00:17:50,080
containing the payload to that security

536
00:17:50,080 --> 00:17:52,080
contact which i thought was like pretty

537
00:17:52,080 --> 00:17:54,240
interesting and also added text message

538
00:17:54,240 --> 00:17:56,240
support slack support

539
00:17:56,240 --> 00:17:57,760
and all the other things like teams

540
00:17:57,760 --> 00:17:59,200
which

541
00:17:59,200 --> 00:18:01,679
the passing of um

542
00:18:01,679 --> 00:18:03,919
markdown is horrific there

543
00:18:03,919 --> 00:18:05,520
so yeah so i would highly recommend like

544
00:18:05,520 --> 00:18:07,360
leveraging you know things like xss

545
00:18:07,360 --> 00:18:10,160
hunter or pxss to try and find

546
00:18:10,160 --> 00:18:12,559
out of bound responses

547
00:18:12,559 --> 00:18:13,840
and again as i said you want to make

548
00:18:13,840 --> 00:18:17,039
these things automatic so initially um

549
00:18:17,039 --> 00:18:19,039
the sleepy puppy team created a burp

550
00:18:19,039 --> 00:18:20,480
extension that would like look for

551
00:18:20,480 --> 00:18:23,200
initial initial payloads

552
00:18:23,200 --> 00:18:24,960
but i basically hacked it together so

553
00:18:24,960 --> 00:18:26,400
you could define your own you know

554
00:18:26,400 --> 00:18:28,400
payloads and also like the domain

555
00:18:28,400 --> 00:18:29,760
because otherwise it was always trying

556
00:18:29,760 --> 00:18:31,280
to link back to theirs

557
00:18:31,280 --> 00:18:33,919
so it's still a it i wrote it a couple

558
00:18:33,919 --> 00:18:35,840
of years ago it will still work but it

559
00:18:35,840 --> 00:18:38,000
could use some tlc

560
00:18:38,000 --> 00:18:40,080
um but what it does is you can define

561
00:18:40,080 --> 00:18:42,000
your domain and then you have a list of

562
00:18:42,000 --> 00:18:44,640
payloads so you have like different you

563
00:18:44,640 --> 00:18:46,880
know base href which bypasses a lot of

564
00:18:46,880 --> 00:18:49,280
csp policies you have like all these

565
00:18:49,280 --> 00:18:51,120
different things like you know mustache

566
00:18:51,120 --> 00:18:53,120
templates for bypassing things like vue

567
00:18:53,120 --> 00:18:53,919
and

568
00:18:53,919 --> 00:18:55,440
angularjs

569
00:18:55,440 --> 00:18:57,520
but what i would recommend if anyone

570
00:18:57,520 --> 00:19:00,000
wants to take on a project is to go to

571
00:19:00,000 --> 00:19:02,400
the portswiggers web security crosstalk

572
00:19:02,400 --> 00:19:04,160
scripting cheat sheet

573
00:19:04,160 --> 00:19:05,360
and build a project that will

574
00:19:05,360 --> 00:19:07,840
arbitrarily make blind excess payloads

575
00:19:07,840 --> 00:19:10,160
for everything that exists there because

576
00:19:10,160 --> 00:19:12,720
it's a very exhaustive list people still

577
00:19:12,720 --> 00:19:16,559
use deny listing in like admin pages etc

578
00:19:16,559 --> 00:19:18,720
like and also a loud listing and you

579
00:19:18,720 --> 00:19:20,559
might be able to like find a bypass by

580
00:19:20,559 --> 00:19:24,520
leveraging some of those payloads

581
00:19:27,360 --> 00:19:29,678
okay

582
00:19:30,000 --> 00:19:31,840
we also shouldn't have to manually

583
00:19:31,840 --> 00:19:34,480
identify urls and assets that exist with

584
00:19:34,480 --> 00:19:36,320
inside an application

585
00:19:36,320 --> 00:19:38,080
i don't want to be looking at minified

586
00:19:38,080 --> 00:19:39,919
javascript for the rest of my life and

587
00:19:39,919 --> 00:19:42,880
like searching for https pages etc

588
00:19:42,880 --> 00:19:44,559
and you know because and the reason why

589
00:19:44,559 --> 00:19:45,760
you want to do that and it's very

590
00:19:45,760 --> 00:19:47,679
important is because you can find

591
00:19:47,679 --> 00:19:50,400
unauthenticated or admin apis

592
00:19:50,400 --> 00:19:52,080
you can find other domains which might

593
00:19:52,080 --> 00:19:54,400
be accessible from either

594
00:19:54,400 --> 00:19:56,320
an external presence or if you find

595
00:19:56,320 --> 00:19:57,760
server side request forgery in your

596
00:19:57,760 --> 00:19:59,600
current application you might be able to

597
00:19:59,600 --> 00:20:01,600
leverage that to query some of those

598
00:20:01,600 --> 00:20:03,280
domains that you found

599
00:20:03,280 --> 00:20:04,320
um

600
00:20:04,320 --> 00:20:06,000
so there are obviously a lot of various

601
00:20:06,000 --> 00:20:07,840
ways that you can do this and the first

602
00:20:07,840 --> 00:20:09,919
one that i would recommend is it's

603
00:20:09,919 --> 00:20:12,240
basically called endpoint discovery so

604
00:20:12,240 --> 00:20:14,159
it's a js link finder

605
00:20:14,159 --> 00:20:16,080
and basically you can use it to pull out

606
00:20:16,080 --> 00:20:18,159
from all the javascript files you know

607
00:20:18,159 --> 00:20:20,000
different like endpoints and this was

608
00:20:20,000 --> 00:20:23,280
just i went to a random aol aol website

609
00:20:23,280 --> 00:20:25,120
and obviously it pulled out all of the

610
00:20:25,120 --> 00:20:27,120
admin pages it pulled out the developer

611
00:20:27,120 --> 00:20:30,000
portals etc so i would highly recommend

612
00:20:30,000 --> 00:20:32,159
if you're ever like doing a pen test and

613
00:20:32,159 --> 00:20:34,000
you have you know your scope defined or

614
00:20:34,000 --> 00:20:36,559
if you're looking for hunting for bugs

615
00:20:36,559 --> 00:20:38,080
you really want to take a look at what's

616
00:20:38,080 --> 00:20:40,400
on those javascript pages and what links

617
00:20:40,400 --> 00:20:41,840
exist in them because they'll have dev

618
00:20:41,840 --> 00:20:43,679
instances they'll have like various

619
00:20:43,679 --> 00:20:45,280
different instances that could be used

620
00:20:45,280 --> 00:20:48,000
to gain extra attack holds into that

621
00:20:48,000 --> 00:20:52,000
application and also that organization

622
00:20:52,320 --> 00:20:54,080
so that's from like when you're browsing

623
00:20:54,080 --> 00:20:55,840
with like burp suite i couldn't find a

624
00:20:55,840 --> 00:20:58,480
zap alternative i don't think it exists

625
00:20:58,480 --> 00:21:00,400
but if you do find one please let me

626
00:21:00,400 --> 00:21:01,679
know because i would love to update this

627
00:21:01,679 --> 00:21:03,840
slide

628
00:21:04,320 --> 00:21:06,080
so that was from the dynamic presence

629
00:21:06,080 --> 00:21:08,080
because it's doing it via its proxy and

630
00:21:08,080 --> 00:21:09,200
like when it's like loading all the

631
00:21:09,200 --> 00:21:11,760
pages via a proxy with burp suite but

632
00:21:11,760 --> 00:21:13,280
you can also do this with source code as

633
00:21:13,280 --> 00:21:15,600
well so a lot of the time you want to

634
00:21:15,600 --> 00:21:17,919
find like the interesting urls etc and

635
00:21:17,919 --> 00:21:19,360
the one way to do this is to use

636
00:21:19,360 --> 00:21:21,120
something like semgrip

637
00:21:21,120 --> 00:21:23,360
some rep is the reason why you don't

638
00:21:23,360 --> 00:21:24,720
just want to use arbitrary grep is

639
00:21:24,720 --> 00:21:26,480
because you can really filter out the

640
00:21:26,480 --> 00:21:28,880
types of things that you want to find so

641
00:21:28,880 --> 00:21:30,480
as you can see here we're saying we want

642
00:21:30,480 --> 00:21:34,159
to find any http or https request inside

643
00:21:34,159 --> 00:21:36,080
literal strings and as you can see it

644
00:21:36,080 --> 00:21:38,080
only flagged one and two it didn't flag

645
00:21:38,080 --> 00:21:39,600
the comment which i think is super

646
00:21:39,600 --> 00:21:40,559
important

647
00:21:40,559 --> 00:21:42,240
from a um

648
00:21:42,240 --> 00:21:45,720
an attack perspective

649
00:21:46,880 --> 00:21:48,559
and a lot of the time when you're

650
00:21:48,559 --> 00:21:50,320
reviewing applications you know

651
00:21:50,320 --> 00:21:52,559
especially in production you get access

652
00:21:52,559 --> 00:21:54,720
to the bundled files which you're not

653
00:21:54,720 --> 00:21:56,000
going to be able to read it would take

654
00:21:56,000 --> 00:21:57,679
forever to reverse engineer it to be

655
00:21:57,679 --> 00:22:00,159
able to actually manually review it

656
00:22:00,159 --> 00:22:02,159
and so a lot of the time in production

657
00:22:02,159 --> 00:22:05,120
it have it's very useful for developers

658
00:22:05,120 --> 00:22:07,039
to have access to the source map and the

659
00:22:07,039 --> 00:22:09,039
source map is essentially a you know

660
00:22:09,039 --> 00:22:11,280
it's basically the reference points to

661
00:22:11,280 --> 00:22:13,280
the original code that was used before

662
00:22:13,280 --> 00:22:15,600
it was bundled up for performance etc

663
00:22:15,600 --> 00:22:17,280
because you don't you normally want to

664
00:22:17,280 --> 00:22:19,039
expose those but a lot of people do

665
00:22:19,039 --> 00:22:21,360
expose those on the internet

666
00:22:21,360 --> 00:22:23,600
and it's obviously used for like

667
00:22:23,600 --> 00:22:25,600
performance and obviously there's many

668
00:22:25,600 --> 00:22:26,640
different

669
00:22:26,640 --> 00:22:28,799
minification processes that exist like

670
00:22:28,799 --> 00:22:31,039
webpack roll-up and parcel

671
00:22:31,039 --> 00:22:32,880
um

672
00:22:32,880 --> 00:22:34,480
but obviously you don't want to look at

673
00:22:34,480 --> 00:22:35,919
like this miniature code right you want

674
00:22:35,919 --> 00:22:37,360
to be able to get back to the original

675
00:22:37,360 --> 00:22:38,840
content

676
00:22:38,840 --> 00:22:41,600
thankfully like the the browser is one

677
00:22:41,600 --> 00:22:43,440
of the most useful tools you'll ever use

678
00:22:43,440 --> 00:22:45,600
in a application security testing

679
00:22:45,600 --> 00:22:47,200
experience if you're not leveraging the

680
00:22:47,200 --> 00:22:48,640
developer tools

681
00:22:48,640 --> 00:22:50,320
and and you're trying to do application

682
00:22:50,320 --> 00:22:51,440
security

683
00:22:51,440 --> 00:22:53,120
i would recommend that you invest some

684
00:22:53,120 --> 00:22:54,960
time in getting really down into the

685
00:22:54,960 --> 00:22:56,480
weeds about how the developer console

686
00:22:56,480 --> 00:22:57,760
works and how to leverage its

687
00:22:57,760 --> 00:22:59,840
capabilities through its debugger

688
00:22:59,840 --> 00:23:02,159
capabilities etc

689
00:23:02,159 --> 00:23:04,400
99 of the time you can just go to a

690
00:23:04,400 --> 00:23:07,520
website and you can find the

691
00:23:07,520 --> 00:23:09,120
bundled sources and get back to the

692
00:23:09,120 --> 00:23:11,440
original source map which allows you to

693
00:23:11,440 --> 00:23:13,760
see like the actual like coffee script

694
00:23:13,760 --> 00:23:16,559
or javascript that actually was or you

695
00:23:16,559 --> 00:23:19,360
know typescript original definitions

696
00:23:19,360 --> 00:23:21,200
and there are many sources you can do

697
00:23:21,200 --> 00:23:23,280
that normally in the browser when i've

698
00:23:23,280 --> 00:23:25,200
done like pen tests for clients back in

699
00:23:25,200 --> 00:23:26,240
the day

700
00:23:26,240 --> 00:23:27,679
and there were a lot of times where

701
00:23:27,679 --> 00:23:30,880
webpack was a bit weird and the browser

702
00:23:30,880 --> 00:23:32,320
couldn't quite understand it so it

703
00:23:32,320 --> 00:23:33,280
couldn't

704
00:23:33,280 --> 00:23:35,440
de-pack it for you so you can leverage

705
00:23:35,440 --> 00:23:37,200
these other tools such as like the

706
00:23:37,200 --> 00:23:40,799
mozilla source map or the um

707
00:23:40,799 --> 00:23:43,360
then source mapper that's written in go

708
00:23:43,360 --> 00:23:45,279
appear to be the most accurate one to

709
00:23:45,279 --> 00:23:46,240
actually

710
00:23:46,240 --> 00:23:49,360
um be able to and do this

711
00:23:49,360 --> 00:23:51,600
and a good thing if you're if you are

712
00:23:51,600 --> 00:23:54,080
using burp suite and there is a

713
00:23:54,080 --> 00:23:56,080
piper script so a custom piper script

714
00:23:56,080 --> 00:23:57,679
which basically the piper scripts are

715
00:23:57,679 --> 00:24:00,159
basically used to try and find relevant

716
00:24:00,159 --> 00:24:02,799
information about an application

717
00:24:02,799 --> 00:24:04,320
and they basically have this thing

718
00:24:04,320 --> 00:24:06,720
called extract spa low-hanging fruits

719
00:24:06,720 --> 00:24:08,320
and that will automatically tell you if

720
00:24:08,320 --> 00:24:10,240
it finds the reference to a source map

721
00:24:10,240 --> 00:24:12,480
which you then could then use to either

722
00:24:12,480 --> 00:24:14,720
open the developer console try and you

723
00:24:14,720 --> 00:24:16,720
know get back to the original source or

724
00:24:16,720 --> 00:24:19,600
use the unhacker

725
00:24:23,440 --> 00:24:24,640
and of course

726
00:24:24,640 --> 00:24:26,320
when you're testing applications you

727
00:24:26,320 --> 00:24:29,520
want to test it correctly

728
00:24:31,120 --> 00:24:32,640
a lot of the time if you're testing like

729
00:24:32,640 --> 00:24:34,720
a angularjs application or a react

730
00:24:34,720 --> 00:24:37,279
application or review application

731
00:24:37,279 --> 00:24:38,400
there's going to be different things

732
00:24:38,400 --> 00:24:40,080
that you look for right so like if

733
00:24:40,080 --> 00:24:41,360
you're just looking at

734
00:24:41,360 --> 00:24:42,880
trying to attack it like a vanilla

735
00:24:42,880 --> 00:24:44,559
javascript like an original javascript

736
00:24:44,559 --> 00:24:46,159
application you're probably going to

737
00:24:46,159 --> 00:24:48,159
fail to find a lot of things

738
00:24:48,159 --> 00:24:50,159
so i would highly recommend leveraging

739
00:24:50,159 --> 00:24:52,000
extensions i actually found one for zap

740
00:24:52,000 --> 00:24:54,240
so it is free and the wapalizer

741
00:24:54,240 --> 00:24:56,240
extension for zap allows you to

742
00:24:56,240 --> 00:24:57,279
basically

743
00:24:57,279 --> 00:24:59,520
identify different javascript frameworks

744
00:24:59,520 --> 00:25:02,000
like if it's been bundled with webpack

745
00:25:02,000 --> 00:25:03,440
what kind of javascript libraries are

746
00:25:03,440 --> 00:25:05,840
being used like jquery etc

747
00:25:05,840 --> 00:25:07,840
you can also use burp suite's asset

748
00:25:07,840 --> 00:25:09,840
discovery package to find these types of

749
00:25:09,840 --> 00:25:10,960
things

750
00:25:10,960 --> 00:25:12,640
and obviously there are browser

751
00:25:12,640 --> 00:25:14,320
extensions like the wapalizer browser

752
00:25:14,320 --> 00:25:15,520
extension

753
00:25:15,520 --> 00:25:17,679
and then there's also um javascript

754
00:25:17,679 --> 00:25:18,559
obviously if you're looking at the

755
00:25:18,559 --> 00:25:20,000
source code you have access to the

756
00:25:20,000 --> 00:25:22,640
package.json file the bauer json file

757
00:25:22,640 --> 00:25:24,400
and all these different things that

758
00:25:24,400 --> 00:25:25,520
allow you to see what kind of

759
00:25:25,520 --> 00:25:27,279
dependencies are being used that

760
00:25:27,279 --> 00:25:29,200
obviously allow you to understand the

761
00:25:29,200 --> 00:25:31,200
technology that's being leveraged

762
00:25:31,200 --> 00:25:33,440
with inside that application so this

763
00:25:33,440 --> 00:25:34,799
sometimes allows you to understand

764
00:25:34,799 --> 00:25:37,440
they're using s3 as a hosting provider

765
00:25:37,440 --> 00:25:39,520
it allows you to find you know maybe if

766
00:25:39,520 --> 00:25:41,679
it's powered by with the x header what

767
00:25:41,679 --> 00:25:43,279
kind of technologies like angular so

768
00:25:43,279 --> 00:25:44,960
like if i knew they were using angular i

769
00:25:44,960 --> 00:25:46,960
knew i would be looking for like you

770
00:25:46,960 --> 00:25:48,720
know bypass security trust if it was

771
00:25:48,720 --> 00:25:50,320
angular if it was angularjs i knew i'd

772
00:25:50,320 --> 00:25:52,720
be looking for

773
00:25:52,720 --> 00:25:54,320
basically anything to do with jquery

774
00:25:54,320 --> 00:25:55,760
because that leads to

775
00:25:55,760 --> 00:25:59,039
issues and also anything to do with

776
00:25:59,039 --> 00:26:01,039
the embedded apis that exists like trust

777
00:26:01,039 --> 00:26:04,200
as html

778
00:26:11,760 --> 00:26:14,240
we also you know in today like

779
00:26:14,240 --> 00:26:15,919
the reason why in javascript

780
00:26:15,919 --> 00:26:17,120
specifically

781
00:26:17,120 --> 00:26:18,799
um this is like one of the more

782
00:26:18,799 --> 00:26:20,240
dangerous vulnerabilities is that we

783
00:26:20,240 --> 00:26:22,640
shouldn't have to manually find hungry

784
00:26:22,640 --> 00:26:24,480
regular expressions

785
00:26:24,480 --> 00:26:26,799
and you know the va engine javascript

786
00:26:26,799 --> 00:26:28,400
itself is basically a single threaded

787
00:26:28,400 --> 00:26:29,440
platform

788
00:26:29,440 --> 00:26:31,039
if you block that through things like

789
00:26:31,039 --> 00:26:31,840
you know

790
00:26:31,840 --> 00:26:33,679
like encryption or like doing large

791
00:26:33,679 --> 00:26:35,840
iterations for like password hashing

792
00:26:35,840 --> 00:26:38,080
using use using a high iterations of

793
00:26:38,080 --> 00:26:39,840
those things you can slow down your

794
00:26:39,840 --> 00:26:41,200
application because normally those

795
00:26:41,200 --> 00:26:42,960
happen in a synchronous way

796
00:26:42,960 --> 00:26:44,799
and they're also happening in the sense

797
00:26:44,799 --> 00:26:46,799
that it's single threaded which means it

798
00:26:46,799 --> 00:26:48,559
blocks the event loop and you never

799
00:26:48,559 --> 00:26:49,919
really want to get to the point where

800
00:26:49,919 --> 00:26:52,880
you can block the event loop the problem

801
00:26:52,880 --> 00:26:54,080
with

802
00:26:54,080 --> 00:26:56,880
common javascript applications

803
00:26:56,880 --> 00:26:58,880
this can happen both from a client side

804
00:26:58,880 --> 00:27:01,039
perspective and also from a node.js

805
00:27:01,039 --> 00:27:02,240
perspective

806
00:27:02,240 --> 00:27:03,520
this is because

807
00:27:03,520 --> 00:27:04,400
you know there was actually a

808
00:27:04,400 --> 00:27:06,480
vulnerability in angularjs that led to

809
00:27:06,480 --> 00:27:08,080
something called angularjs where you

810
00:27:08,080 --> 00:27:10,240
could provide like a malicious or a

811
00:27:10,240 --> 00:27:11,919
vulnerable regex that would actually

812
00:27:11,919 --> 00:27:14,000
hang the entire solution

813
00:27:14,000 --> 00:27:15,840
via user input

814
00:27:15,840 --> 00:27:17,440
there was also

815
00:27:17,440 --> 00:27:19,600
obviously on the node.js side if you are

816
00:27:19,600 --> 00:27:21,279
doing like a regular expression to test

817
00:27:21,279 --> 00:27:23,279
things you could lead to ultimately

818
00:27:23,279 --> 00:27:25,440
finding um

819
00:27:25,440 --> 00:27:26,799
you know that your application ends up

820
00:27:26,799 --> 00:27:28,640
just grinding to a hole

821
00:27:28,640 --> 00:27:29,840
so

822
00:27:29,840 --> 00:27:31,440
we shouldn't have to manually find the

823
00:27:31,440 --> 00:27:32,880
instances of

824
00:27:32,880 --> 00:27:34,720
regular expressions and there are tools

825
00:27:34,720 --> 00:27:37,200
today that exist that can help us find

826
00:27:37,200 --> 00:27:39,440
vulnerable regular expressions so in

827
00:27:39,440 --> 00:27:41,200
this case you can see that this is a

828
00:27:41,200 --> 00:27:43,360
very simple piece of code we define a

829
00:27:43,360 --> 00:27:45,520
regular expression we're testing again

830
00:27:45,520 --> 00:27:48,080
against a string and ultimately because

831
00:27:48,080 --> 00:27:50,000
the way that that regular expression is

832
00:27:50,000 --> 00:27:51,919
written it's basically doing like a lot

833
00:27:51,919 --> 00:27:53,679
of quantifiers with the plus

834
00:27:53,679 --> 00:27:55,760
if if those two are used in conjunction

835
00:27:55,760 --> 00:27:57,760
it basically makes that string

836
00:27:57,760 --> 00:28:00,080
um you know take a lot more steps than

837
00:28:00,080 --> 00:28:01,679
it probably should have done if it was

838
00:28:01,679 --> 00:28:03,039
written correctly

839
00:28:03,039 --> 00:28:04,559
so obviously that would lead to regular

840
00:28:04,559 --> 00:28:07,840
expression denial of service

841
00:28:07,840 --> 00:28:10,320
so there is a wonderful amount of

842
00:28:10,320 --> 00:28:12,559
resources in today's ecosystem that you

843
00:28:12,559 --> 00:28:14,399
can use for automation for detecting

844
00:28:14,399 --> 00:28:15,760
these things

845
00:28:15,760 --> 00:28:17,760
so if you've never looked at the usenix

846
00:28:17,760 --> 00:28:20,000
and post before i'd highly recommend it

847
00:28:20,000 --> 00:28:22,159
and but there are a bunch of open source

848
00:28:22,159 --> 00:28:23,760
tools that you can leverage today to

849
00:28:23,760 --> 00:28:25,520
find different types of regular

850
00:28:25,520 --> 00:28:27,919
expression vulnerabilities

851
00:28:27,919 --> 00:28:29,360
um

852
00:28:29,360 --> 00:28:32,799
let the gentleman take a photo first

853
00:28:32,799 --> 00:28:34,480
and then

854
00:28:34,480 --> 00:28:37,039
this is my personal approach so

855
00:28:37,039 --> 00:28:38,799
the way that i do it and the way that i

856
00:28:38,799 --> 00:28:40,080
you know i don't do that much pen

857
00:28:40,080 --> 00:28:41,520
testing these days but the way that i

858
00:28:41,520 --> 00:28:43,919
would personally do it is basically

859
00:28:43,919 --> 00:28:45,679
extract those regular expressions with

860
00:28:45,679 --> 00:28:47,279
some grip so

861
00:28:47,279 --> 00:28:49,039
review an application find all of the

862
00:28:49,039 --> 00:28:51,039
instances of the regular expression

863
00:28:51,039 --> 00:28:52,720
usage

864
00:28:52,720 --> 00:28:54,399
pass those expressions that were found

865
00:28:54,399 --> 00:28:56,399
from semgrep into

866
00:28:56,399 --> 00:28:58,080
the recheck tool which is one of the

867
00:28:58,080 --> 00:28:59,520
ones that i

868
00:28:59,520 --> 00:29:00,960
mentioned on a slide the slides are

869
00:29:00,960 --> 00:29:03,120
going to be available online don't worry

870
00:29:03,120 --> 00:29:05,440
and basically then combine the output

871
00:29:05,440 --> 00:29:07,600
from those two things so you can define

872
00:29:07,600 --> 00:29:09,360
that you know exactly where the code

873
00:29:09,360 --> 00:29:11,679
where the issue is you know which line

874
00:29:11,679 --> 00:29:13,760
that vulnerability is on what is the

875
00:29:13,760 --> 00:29:16,480
regex and what is the status

876
00:29:16,480 --> 00:29:18,640
i actually tested this on with the node

877
00:29:18,640 --> 00:29:20,720
modules enabled and i kind of

878
00:29:20,720 --> 00:29:21,840
went a bit

879
00:29:21,840 --> 00:29:24,080
it kind of went a bit over the top so i

880
00:29:24,080 --> 00:29:25,600
have the

881
00:29:25,600 --> 00:29:28,399
wrong one over here

882
00:29:28,399 --> 00:29:30,880
uh and it found like a in a node module

883
00:29:30,880 --> 00:29:32,960
the actual um

884
00:29:32,960 --> 00:29:34,640
you know you can see it there like one

885
00:29:34,640 --> 00:29:36,640
one of those is a node module and it

886
00:29:36,640 --> 00:29:38,240
actually found a vulnerable potentially

887
00:29:38,240 --> 00:29:39,600
vulnerable regular expression doesn't

888
00:29:39,600 --> 00:29:42,159
mean it is vulnerable but

889
00:29:42,159 --> 00:29:43,200
okay

890
00:29:43,200 --> 00:29:46,399
i'll show you that at the end

891
00:29:48,320 --> 00:29:50,240
so yeah that's what i recommend using

892
00:29:50,240 --> 00:29:51,840
same grip and also recheck you can

893
00:29:51,840 --> 00:29:53,440
obviously use various different things

894
00:29:53,440 --> 00:29:55,440
you could just use grep if you wanted to

895
00:29:55,440 --> 00:29:56,880
there are many different ways to do it

896
00:29:56,880 --> 00:30:00,080
this is my personal approach

897
00:30:00,960 --> 00:30:02,480
you know there are many services that we

898
00:30:02,480 --> 00:30:05,120
interact with as developers and also you

899
00:30:05,120 --> 00:30:07,039
know applications that are leveraging

900
00:30:07,039 --> 00:30:09,360
services like being able to access your

901
00:30:09,360 --> 00:30:12,000
github repository you know

902
00:30:12,000 --> 00:30:14,559
rsa tokens or rsc keys for like you know

903
00:30:14,559 --> 00:30:16,320
being able to encrypt data

904
00:30:16,320 --> 00:30:17,919
you know passwords to interact with

905
00:30:17,919 --> 00:30:19,360
services where you're either logging

906
00:30:19,360 --> 00:30:21,360
information or interacting with a

907
00:30:21,360 --> 00:30:23,840
service to get more information

908
00:30:23,840 --> 00:30:25,200
and obviously you'll see now on like

909
00:30:25,200 --> 00:30:27,279
github.com they automatically scan for

910
00:30:27,279 --> 00:30:29,520
these types of things but obviously

911
00:30:29,520 --> 00:30:31,200
there is you know always going to be

912
00:30:31,200 --> 00:30:33,039
that issue where it might have a

913
00:30:33,039 --> 00:30:34,480
different naming convention it might

914
00:30:34,480 --> 00:30:36,320
look a little bit different and so we

915
00:30:36,320 --> 00:30:37,760
can still find

916
00:30:37,760 --> 00:30:40,320
automatically secrets

917
00:30:40,320 --> 00:30:41,200
and there

918
00:30:41,200 --> 00:30:42,960
are an abundance of libraries that you

919
00:30:42,960 --> 00:30:45,039
can leverage to find secrets so one of

920
00:30:45,039 --> 00:30:46,320
these things like one of the more

921
00:30:46,320 --> 00:30:48,480
popular ones is like truffle hob truffle

922
00:30:48,480 --> 00:30:51,919
hog and the ed overflow blog post

923
00:30:51,919 --> 00:30:53,520
basically goes into a lot of detail

924
00:30:53,520 --> 00:30:55,600
about using rip grip rip grip and get

925
00:30:55,600 --> 00:30:57,679
secrets so regret

926
00:30:57,679 --> 00:30:59,519
uh but my recommendation today is

927
00:30:59,519 --> 00:31:00,640
obviously

928
00:31:00,640 --> 00:31:03,039
because i'm probably a semgrep fanboy i

929
00:31:03,039 --> 00:31:04,399
do not work for them

930
00:31:04,399 --> 00:31:05,760
is to probably leverage stem grep

931
00:31:05,760 --> 00:31:07,279
secrets and as you can see like at the

932
00:31:07,279 --> 00:31:08,080
top

933
00:31:08,080 --> 00:31:10,159
that's the output from leveraging some

934
00:31:10,159 --> 00:31:13,120
grips secrets

935
00:31:15,679 --> 00:31:17,200
we also shouldn't have to manually

936
00:31:17,200 --> 00:31:19,279
identify known security issues in third

937
00:31:19,279 --> 00:31:21,519
party libraries and

938
00:31:21,519 --> 00:31:23,840
there's also always those wonderful um

939
00:31:23,840 --> 00:31:26,720
images where here's your application and

940
00:31:26,720 --> 00:31:28,080
here's actually the code that lives in

941
00:31:28,080 --> 00:31:29,600
it and ninety percent of the time it's

942
00:31:29,600 --> 00:31:30,399
like

943
00:31:30,399 --> 00:31:32,880
node node modules is like 80 of your app

944
00:31:32,880 --> 00:31:34,880
versus that 20 which actually is your

945
00:31:34,880 --> 00:31:36,399
code

946
00:31:36,399 --> 00:31:38,880
so obviously today we have an abundance

947
00:31:38,880 --> 00:31:40,799
of ways that we can

948
00:31:40,799 --> 00:31:42,880
identify different issues with those

949
00:31:42,880 --> 00:31:44,399
third-party dependencies that we

950
00:31:44,399 --> 00:31:47,039
leverage with and it's

951
00:31:47,039 --> 00:31:48,399
obviously there are like commercial

952
00:31:48,399 --> 00:31:49,600
products and i don't want to get into

953
00:31:49,600 --> 00:31:51,760
all of that which you can use snick test

954
00:31:51,760 --> 00:31:53,039
on open source

955
00:31:53,039 --> 00:31:54,399
obviously it has a commercial offering

956
00:31:54,399 --> 00:31:57,120
there's also synopsis black dock etc but

957
00:31:57,120 --> 00:31:58,480
if you're just starting out and you just

958
00:31:58,480 --> 00:31:59,679
want to see what your application

959
00:31:59,679 --> 00:32:01,760
ecosystem might look like you can use

960
00:32:01,760 --> 00:32:03,679
the free sort the free applications such

961
00:32:03,679 --> 00:32:06,000
as npm audit and also yarn order the

962
00:32:06,000 --> 00:32:08,080
confined vulnerabilities in your

963
00:32:08,080 --> 00:32:09,360
application

964
00:32:09,360 --> 00:32:11,679
there's also like retire.js which you

965
00:32:11,679 --> 00:32:13,760
can use part of your burp suite pipeline

966
00:32:13,760 --> 00:32:14,880
sorry

967
00:32:14,880 --> 00:32:15,919
you know there was someone taking a

968
00:32:15,919 --> 00:32:19,760
picture um there's also like the

969
00:32:19,760 --> 00:32:22,480
retire.js which i would say it's a good

970
00:32:22,480 --> 00:32:24,480
thing but it doesn't have a big resource

971
00:32:24,480 --> 00:32:26,080
obviously that's why commercial products

972
00:32:26,080 --> 00:32:28,159
exist today with a lot of vc funding to

973
00:32:28,159 --> 00:32:31,360
be able to pump out those databases but

974
00:32:31,360 --> 00:32:32,720
these are like really good starting

975
00:32:32,720 --> 00:32:34,000
points if you're ever starting to look

976
00:32:34,000 --> 00:32:35,440
at an application so you can use

977
00:32:35,440 --> 00:32:37,679
retire.js in the burp suite sense

978
00:32:37,679 --> 00:32:39,360
obviously you can use npm audit on the

979
00:32:39,360 --> 00:32:41,440
command line to try and find different

980
00:32:41,440 --> 00:32:42,960
vulnerabilities

981
00:32:42,960 --> 00:32:44,640
you don't want to manually go ahead and

982
00:32:44,640 --> 00:32:46,240
go through every single one and try and

983
00:32:46,240 --> 00:32:47,279
find

984
00:32:47,279 --> 00:32:49,120
in the snick online website to see if

985
00:32:49,120 --> 00:32:51,760
it's vulnerable that's too much time you

986
00:32:51,760 --> 00:32:56,039
want to go fast in these types of things

987
00:33:00,960 --> 00:33:03,279
this will all make sense in a second um

988
00:33:03,279 --> 00:33:04,320
so

989
00:33:04,320 --> 00:33:06,159
as a someone who used to do a lot a lot

990
00:33:06,159 --> 00:33:07,440
of pen testing a lot of security

991
00:33:07,440 --> 00:33:08,480
auditing

992
00:33:08,480 --> 00:33:10,720
for for a consultancy you know it would

993
00:33:10,720 --> 00:33:13,519
be kind of awesome if you give your

994
00:33:13,519 --> 00:33:15,039
colleagues or

995
00:33:15,039 --> 00:33:16,080
testers

996
00:33:16,080 --> 00:33:18,240
and basically a tool that could go these

997
00:33:18,240 --> 00:33:19,840
are the kind of things that you want to

998
00:33:19,840 --> 00:33:21,919
test but in code

999
00:33:21,919 --> 00:33:23,440
so what if you could basically take a

1000
00:33:23,440 --> 00:33:26,240
look at the package.json file and build

1001
00:33:26,240 --> 00:33:28,000
out a list of things

1002
00:33:28,000 --> 00:33:29,519
or you know or it could even be for

1003
00:33:29,519 --> 00:33:31,360
python it could be requirements.txt it

1004
00:33:31,360 --> 00:33:34,159
could be a maven.com it can be anything

1005
00:33:34,159 --> 00:33:35,679
but like

1006
00:33:35,679 --> 00:33:37,440
what if you could get to the point where

1007
00:33:37,440 --> 00:33:39,840
you for a particular very popular

1008
00:33:39,840 --> 00:33:42,320
repositories inside your organization

1009
00:33:42,320 --> 00:33:44,080
uh you know as a pen test or as someone

1010
00:33:44,080 --> 00:33:45,519
who's doing on the security side or the

1011
00:33:45,519 --> 00:33:48,000
red team side or blue team side um what

1012
00:33:48,000 --> 00:33:49,200
are the types of things you might want

1013
00:33:49,200 --> 00:33:51,440
to do in a review so you could build an

1014
00:33:51,440 --> 00:33:53,919
internal or maybe leverage some resource

1015
00:33:53,919 --> 00:33:57,120
somewhere to basically build a um

1016
00:33:57,120 --> 00:33:59,519
potential configuration list for some of

1017
00:33:59,519 --> 00:34:01,919
the popular dependencies that you use so

1018
00:34:01,919 --> 00:34:03,679
one of those things could be like you're

1019
00:34:03,679 --> 00:34:06,559
using the sql native driver obviously

1020
00:34:06,559 --> 00:34:07,919
you'd probably want to look for sql

1021
00:34:07,919 --> 00:34:09,599
injection these are the same grip

1022
00:34:09,599 --> 00:34:10,960
patterns or these are the patterns you

1023
00:34:10,960 --> 00:34:12,960
might want to use to try and find

1024
00:34:12,960 --> 00:34:14,960
different types of vulnerabilities

1025
00:34:14,960 --> 00:34:16,239
um

1026
00:34:16,239 --> 00:34:17,520
but obviously

1027
00:34:17,520 --> 00:34:19,440
this is what i think the output might

1028
00:34:19,440 --> 00:34:20,800
look like

1029
00:34:20,800 --> 00:34:21,918
so

1030
00:34:21,918 --> 00:34:24,079
if you have basically like a list of

1031
00:34:24,079 --> 00:34:25,760
different things that you want to check

1032
00:34:25,760 --> 00:34:27,280
for an assessment obviously this is

1033
00:34:27,280 --> 00:34:28,719
manual review

1034
00:34:28,719 --> 00:34:30,320
but at least it's going to give you the

1035
00:34:30,320 --> 00:34:32,399
things that you need up front rather

1036
00:34:32,399 --> 00:34:34,000
than having to go and dig for it

1037
00:34:34,000 --> 00:34:35,280
manually

1038
00:34:35,280 --> 00:34:37,040
so imagine if we were looking at express

1039
00:34:37,040 --> 00:34:38,239
session

1040
00:34:38,239 --> 00:34:39,440
there's many things that you want to

1041
00:34:39,440 --> 00:34:42,000
look for so this is what express session

1042
00:34:42,000 --> 00:34:43,760
looks like you have a bunch of things

1043
00:34:43,760 --> 00:34:45,440
that you need to be worried about like

1044
00:34:45,440 --> 00:34:47,679
not storing the secret in source code

1045
00:34:47,679 --> 00:34:49,280
making sure that those secure flags are

1046
00:34:49,280 --> 00:34:51,679
there for your application so like you

1047
00:34:51,679 --> 00:34:53,280
could do things like

1048
00:34:53,280 --> 00:34:54,480
you know never store the secret in

1049
00:34:54,480 --> 00:34:56,159
source code that's you know from a

1050
00:34:56,159 --> 00:34:58,720
config file or a runtime environment

1051
00:34:58,720 --> 00:35:00,720
variable

1052
00:35:00,720 --> 00:35:02,400
you obviously want to make sure that the

1053
00:35:02,400 --> 00:35:04,320
browser only allows the cookies to be

1054
00:35:04,320 --> 00:35:06,400
sent over a secure channel so you can

1055
00:35:06,400 --> 00:35:08,800
use the host flag which requires secured

1056
00:35:08,800 --> 00:35:10,560
set to be true

1057
00:35:10,560 --> 00:35:12,079
and you also need to define the path to

1058
00:35:12,079 --> 00:35:14,640
be the root path which means cookies are

1059
00:35:14,640 --> 00:35:16,160
never going to get sent anywhere else

1060
00:35:16,160 --> 00:35:17,680
they have to be sent over a secure

1061
00:35:17,680 --> 00:35:18,720
channel

1062
00:35:18,720 --> 00:35:20,160
for every single path in your

1063
00:35:20,160 --> 00:35:22,720
application

1064
00:35:22,880 --> 00:35:25,119
and you also obviously want to prevent

1065
00:35:25,119 --> 00:35:26,400
you know things like cross-site request

1066
00:35:26,400 --> 00:35:28,240
forgery so you would want to prevent

1067
00:35:28,240 --> 00:35:30,160
inclusion across site request requests

1068
00:35:30,160 --> 00:35:31,280
so you would want to define things like

1069
00:35:31,280 --> 00:35:32,880
the same site policy

1070
00:35:32,880 --> 00:35:34,800
so you won't want to include same site

1071
00:35:34,800 --> 00:35:36,960
to be strict

1072
00:35:36,960 --> 00:35:38,240
there's obviously there's lacks and

1073
00:35:38,240 --> 00:35:39,359
strict there's like different

1074
00:35:39,359 --> 00:35:41,680
definitions one is like you allow like i

1075
00:35:41,680 --> 00:35:43,040
believe like get requests and then

1076
00:35:43,040 --> 00:35:44,560
strict is like we don't allow pretty

1077
00:35:44,560 --> 00:35:46,720
much anything without um passing

1078
00:35:46,720 --> 00:35:49,280
cross-origin resource sharing

1079
00:35:49,280 --> 00:35:50,960
and of course if you just had the

1080
00:35:50,960 --> 00:35:53,440
default definition you could potentially

1081
00:35:53,440 --> 00:35:54,560
lead to like

1082
00:35:54,560 --> 00:35:56,240
memory exhaustion because you're storing

1083
00:35:56,240 --> 00:35:57,440
everything in memory so you'd want to

1084
00:35:57,440 --> 00:35:59,599
use like a database or a different store

1085
00:35:59,599 --> 00:36:01,599
somewhere

1086
00:36:01,599 --> 00:36:03,359
and then you could like take that output

1087
00:36:03,359 --> 00:36:05,040
that you've generated from your tool and

1088
00:36:05,040 --> 00:36:07,280
go like yeah it uses a config file it

1089
00:36:07,280 --> 00:36:10,079
uses http only it uses secure etc and

1090
00:36:10,079 --> 00:36:11,280
this would be a good way to have a

1091
00:36:11,280 --> 00:36:12,800
checkbook even though like this is a

1092
00:36:12,800 --> 00:36:14,880
manual review you would still at least

1093
00:36:14,880 --> 00:36:16,800
have a better definition of the types of

1094
00:36:16,800 --> 00:36:18,160
things

1095
00:36:18,160 --> 00:36:20,720
uh you'd be doing

1096
00:36:20,720 --> 00:36:21,839
so

1097
00:36:21,839 --> 00:36:23,359
this is my favorite gif on the internet

1098
00:36:23,359 --> 00:36:25,920
so i just had to include it so like what

1099
00:36:25,920 --> 00:36:27,359
obviously i've talked a lot about a lot

1100
00:36:27,359 --> 00:36:29,040
of different things a lot of different

1101
00:36:29,040 --> 00:36:31,359
analysis potentials from a static and

1102
00:36:31,359 --> 00:36:32,800
dynamic presence

1103
00:36:32,800 --> 00:36:34,160
but like what if you had a tool that

1104
00:36:34,160 --> 00:36:35,920
combines all of those open source

1105
00:36:35,920 --> 00:36:39,200
projects that can help you find you know

1106
00:36:39,200 --> 00:36:41,040
applications uh application

1107
00:36:41,040 --> 00:36:42,640
vulnerabilities and also points of

1108
00:36:42,640 --> 00:36:44,160
interest

1109
00:36:44,160 --> 00:36:46,480
so for this i created a very simple uh

1110
00:36:46,480 --> 00:36:48,720
proof of concept application still very

1111
00:36:48,720 --> 00:36:51,200
experimental so bear bear with it

1112
00:36:51,200 --> 00:36:53,280
and but it's basically a meta-analysis

1113
00:36:53,280 --> 00:36:55,200
approach to basically trying to find

1114
00:36:55,200 --> 00:36:57,760
different vulnerabilities uh using open

1115
00:36:57,760 --> 00:36:59,440
source tools so everything is obviously

1116
00:36:59,440 --> 00:37:01,920
free to use and will always be free

1117
00:37:01,920 --> 00:37:02,800
so

1118
00:37:02,800 --> 00:37:04,800
the functionality obviously has that

1119
00:37:04,800 --> 00:37:06,800
help drive secure development based

1120
00:37:06,800 --> 00:37:08,880
through the package.json file it just

1121
00:37:08,880 --> 00:37:10,960
has the express express session

1122
00:37:10,960 --> 00:37:12,480
definition but if that was extended

1123
00:37:12,480 --> 00:37:15,040
further i think it would be very useful

1124
00:37:15,040 --> 00:37:17,839
it runs npm audit it runs yarn audit if

1125
00:37:17,839 --> 00:37:19,760
it finds the package json file or a lock

1126
00:37:19,760 --> 00:37:21,200
file or something

1127
00:37:21,200 --> 00:37:23,520
it looks for secrets using semgrep it

1128
00:37:23,520 --> 00:37:26,400
looks for redos leveraging the semgrep

1129
00:37:26,400 --> 00:37:28,079
into recheck

1130
00:37:28,079 --> 00:37:30,720
it performs it doesn't perform security

1131
00:37:30,720 --> 00:37:32,480
linting anymore it actually does static

1132
00:37:32,480 --> 00:37:34,800
analysis it used to use eslint did not

1133
00:37:34,800 --> 00:37:36,720
fix that slide my bad

1134
00:37:36,720 --> 00:37:38,880
but it also now uses some grip to find

1135
00:37:38,880 --> 00:37:41,119
uh issues against an application

1136
00:37:41,119 --> 00:37:43,359
and there are some wonderful like npm

1137
00:37:43,359 --> 00:37:46,560
packages like uh the electronic

1138
00:37:46,560 --> 00:37:48,160
i can't even say it but the do you sec

1139
00:37:48,160 --> 00:37:50,720
tool which basically looks for various

1140
00:37:50,720 --> 00:37:53,599
different electron vulnerabilities

1141
00:37:53,599 --> 00:37:55,040
so let's just take a look at a quick

1142
00:37:55,040 --> 00:37:56,800
demo

1143
00:37:56,800 --> 00:37:59,200
if i can

1144
00:38:01,200 --> 00:38:03,200
and let's get rid of this horrible one

1145
00:38:03,200 --> 00:38:05,280
if i can find the

1146
00:38:05,280 --> 00:38:07,280
mouse all right so i'm going to run it

1147
00:38:07,280 --> 00:38:08,560
hopefully i'm still connected to my

1148
00:38:08,560 --> 00:38:09,520
phone

1149
00:38:09,520 --> 00:38:11,119
and but basically what it's doing is

1150
00:38:11,119 --> 00:38:12,720
it's pulling from the sungrip registry

1151
00:38:12,720 --> 00:38:14,800
at the moment but basically it's looking

1152
00:38:14,800 --> 00:38:16,640
it looks at the package.json file it

1153
00:38:16,640 --> 00:38:19,359
begins an order um it then basically

1154
00:38:19,359 --> 00:38:21,680
checks the database for potential issues

1155
00:38:21,680 --> 00:38:23,760
with the definition definition list sort

1156
00:38:23,760 --> 00:38:26,400
of express session etc it looks for

1157
00:38:26,400 --> 00:38:27,520
redos

1158
00:38:27,520 --> 00:38:29,119
as you can see it found that vulnerable

1159
00:38:29,119 --> 00:38:32,400
expression inside my test code it run

1160
00:38:32,400 --> 00:38:34,400
because i had the npm package electron

1161
00:38:34,400 --> 00:38:36,560
it looked for electron issues nothing

1162
00:38:36,560 --> 00:38:37,760
existed

1163
00:38:37,760 --> 00:38:40,480
it also used seven rep to search for you

1164
00:38:40,480 --> 00:38:42,640
know general patterns and in that code i

1165
00:38:42,640 --> 00:38:44,960
had the reference to you know the amazon

1166
00:38:44,960 --> 00:38:46,640
aws id

1167
00:38:46,640 --> 00:38:48,240
and also account number which obviously

1168
00:38:48,240 --> 00:38:49,359
is fake

1169
00:38:49,359 --> 00:38:50,560
in this sense

1170
00:38:50,560 --> 00:38:52,320
it's now also like scanning the

1171
00:38:52,320 --> 00:38:54,240
repository for vulnerabilities using

1172
00:38:54,240 --> 00:38:55,440
sendgrid

1173
00:38:55,440 --> 00:38:56,160
so

1174
00:38:56,160 --> 00:38:58,480
obviously i already have the output

1175
00:38:58,480 --> 00:39:00,880
up here which might break when it's

1176
00:39:00,880 --> 00:39:02,400
coming down but as you can see here we

1177
00:39:02,400 --> 00:39:06,160
found the reference to um domex assess

1178
00:39:06,160 --> 00:39:07,760
it found to the reference to some

1179
00:39:07,760 --> 00:39:10,400
sandbox type issues in node.js so i

1180
00:39:10,400 --> 00:39:12,079
personally think like if you have a tool

1181
00:39:12,079 --> 00:39:14,400
like mega so i just found it as well

1182
00:39:14,400 --> 00:39:16,480
so i personally think like if you have a

1183
00:39:16,480 --> 00:39:18,320
tool like this like metasec js like

1184
00:39:18,320 --> 00:39:19,680
running part of your pipeline or at

1185
00:39:19,680 --> 00:39:21,520
least in your like auditing process for

1186
00:39:21,520 --> 00:39:23,839
a manual order i think it's really going

1187
00:39:23,839 --> 00:39:25,599
to speed up a lot of things obviously

1188
00:39:25,599 --> 00:39:27,760
it's not a silver bullet it doesn't find

1189
00:39:27,760 --> 00:39:28,960
everything

1190
00:39:28,960 --> 00:39:30,720
but it's very extensible you can write

1191
00:39:30,720 --> 00:39:33,200
sembrep rules however you wish from like

1192
00:39:33,200 --> 00:39:35,440
detection pulling out information

1193
00:39:35,440 --> 00:39:37,520
leveraging it and other things

1194
00:39:37,520 --> 00:39:39,520
and so like i can just quickly show the

1195
00:39:39,520 --> 00:39:40,880
code for that because i know we're about

1196
00:39:40,880 --> 00:39:44,480
to be we have like 20 minutes um

1197
00:39:44,480 --> 00:39:46,880
sorry sped through this talk i got rid

1198
00:39:46,880 --> 00:39:49,760
of a bunch of slides

1199
00:39:51,359 --> 00:39:53,359
i can't

1200
00:39:53,359 --> 00:39:54,400
tell you what i'm just going to go to

1201
00:39:54,400 --> 00:39:57,800
windowed mode

1202
00:40:00,320 --> 00:40:03,359
oh it's over there isn't it

1203
00:40:03,359 --> 00:40:05,839
how do we

1204
00:40:06,800 --> 00:40:09,359
okay we're back everyone right so just

1205
00:40:09,359 --> 00:40:11,520
to

1206
00:40:12,160 --> 00:40:13,520
show you what this might look like in

1207
00:40:13,520 --> 00:40:15,599
code so it's like some grip is very

1208
00:40:15,599 --> 00:40:17,839
extensible in my opinion so you can just

1209
00:40:17,839 --> 00:40:19,920
like write but very basic rules that

1210
00:40:19,920 --> 00:40:21,280
look like this

1211
00:40:21,280 --> 00:40:23,680
let's close this so as you can see here

1212
00:40:23,680 --> 00:40:25,839
all i'm doing for this code example is

1213
00:40:25,839 --> 00:40:28,720
basically taking you know any assignment

1214
00:40:28,720 --> 00:40:30,560
into the regex and then taking that

1215
00:40:30,560 --> 00:40:32,480
regular expression value and then you

1216
00:40:32,480 --> 00:40:34,079
can use that as the message or you could

1217
00:40:34,079 --> 00:40:35,599
take the meta variables and then

1218
00:40:35,599 --> 00:40:37,440
leverage that with inside your

1219
00:40:37,440 --> 00:40:38,720
application

1220
00:40:38,720 --> 00:40:40,319
so you could do that for a various you

1221
00:40:40,319 --> 00:40:42,319
know degree of things

1222
00:40:42,319 --> 00:40:44,400
um but yeah hopefully that has been

1223
00:40:44,400 --> 00:40:46,560
helpful

1224
00:40:46,560 --> 00:40:49,560
so

1225
00:40:52,880 --> 00:40:55,440
screens

1226
00:40:56,480 --> 00:40:58,640
i'm normally a windows fanboy so this is

1227
00:40:58,640 --> 00:41:02,160
showing my age hang on

1228
00:41:03,599 --> 00:41:05,599
all right cool so in conclusion

1229
00:41:05,599 --> 00:41:07,280
automation really helps streamline a

1230
00:41:07,280 --> 00:41:08,960
work like a word process in like a

1231
00:41:08,960 --> 00:41:10,720
testing capability

1232
00:41:10,720 --> 00:41:12,640
and to get the best results you want to

1233
00:41:12,640 --> 00:41:14,480
automate from both a static and dynamic

1234
00:41:14,480 --> 00:41:16,079
presence you know

1235
00:41:16,079 --> 00:41:18,480
do it in the browser do it via a proxy

1236
00:41:18,480 --> 00:41:21,040
tool do it via source code

1237
00:41:21,040 --> 00:41:22,800
and obviously automation especially in

1238
00:41:22,800 --> 00:41:24,400
the javascript space can definitely help

1239
00:41:24,400 --> 00:41:26,960
you identify issues so automate and be

1240
00:41:26,960 --> 00:41:29,040
awesome

1241
00:41:29,040 --> 00:41:31,700
hopefully you enjoyed the talk

1242
00:41:31,700 --> 00:41:37,280
[Applause]

1243
00:41:37,280 --> 00:41:39,920
any questions

1244
00:41:41,200 --> 00:41:43,440
what what's kind of your threshold when

1245
00:41:43,440 --> 00:41:45,520
you decide like um you're okay doing

1246
00:41:45,520 --> 00:41:47,760
something manually versus like okay i'm

1247
00:41:47,760 --> 00:41:50,319
tired of doing this i'm gonna start

1248
00:41:50,319 --> 00:41:51,920
writing it all up

1249
00:41:51,920 --> 00:41:53,920
was there a threshold like

1250
00:41:53,920 --> 00:41:55,839
what you tip over there

1251
00:41:55,839 --> 00:41:57,440
that's uh one of the hardest questions

1252
00:41:57,440 --> 00:41:58,319
you can

1253
00:41:58,319 --> 00:41:59,920
because i think no i think it's a really

1254
00:41:59,920 --> 00:42:01,200
important question so the question was

1255
00:42:01,200 --> 00:42:03,119
around um like when do you kind of

1256
00:42:03,119 --> 00:42:04,480
basically stop when like trying to

1257
00:42:04,480 --> 00:42:06,079
assess something like because a lot of

1258
00:42:06,079 --> 00:42:07,440
the times you would like i think there's

1259
00:42:07,440 --> 00:42:09,280
an issue here haven't quite understood

1260
00:42:09,280 --> 00:42:11,200
it my recommendation is write a

1261
00:42:11,200 --> 00:42:13,599
potential a finding saying like there

1262
00:42:13,599 --> 00:42:15,520
looks like to be something there and

1263
00:42:15,520 --> 00:42:17,119
then move on because realistically for

1264
00:42:17,119 --> 00:42:19,520
me like you could spend two days finally

1265
00:42:19,520 --> 00:42:21,119
get it but then you've wasted a lot of

1266
00:42:21,119 --> 00:42:23,760
opportunity elsewhere like obviously

1267
00:42:23,760 --> 00:42:25,200
we used to have a lot of pretty good

1268
00:42:25,200 --> 00:42:27,920
partnerships with the the

1269
00:42:27,920 --> 00:42:29,520
with the organizations we are working

1270
00:42:29,520 --> 00:42:31,040
with and we normally could ask them to

1271
00:42:31,040 --> 00:42:32,960
show us the code or like show us the

1272
00:42:32,960 --> 00:42:34,640
code snippets that were lying behind

1273
00:42:34,640 --> 00:42:36,560
that production application obviously

1274
00:42:36,560 --> 00:42:38,079
from like a pen testing or like a bug

1275
00:42:38,079 --> 00:42:39,599
bounty perspective you're not going to

1276
00:42:39,599 --> 00:42:41,040
get that level of stuff so you would

1277
00:42:41,040 --> 00:42:42,800
have to like smash through it but from

1278
00:42:42,800 --> 00:42:44,319
like a consulting or like an actual

1279
00:42:44,319 --> 00:42:45,680
internal look like

1280
00:42:45,680 --> 00:42:47,920
a member of an organization

1281
00:42:47,920 --> 00:42:49,119
you know you want to leverage what you

1282
00:42:49,119 --> 00:42:50,720
can see so

1283
00:42:50,720 --> 00:42:52,160
you know obviously and then the way that

1284
00:42:52,160 --> 00:42:54,240
i would approach that is you you finally

1285
00:42:54,240 --> 00:42:56,160
figure it out go to some rep rule or

1286
00:42:56,160 --> 00:42:57,359
like a pattern because it's probably

1287
00:42:57,359 --> 00:42:59,680
going to be exposed you could use coql

1288
00:42:59,680 --> 00:43:01,440
which is also free you know there's but

1289
00:43:01,440 --> 00:43:03,119
it's very a lot it's a bigger learning

1290
00:43:03,119 --> 00:43:04,560
curve compared to like something like

1291
00:43:04,560 --> 00:43:05,599
sungrip

1292
00:43:05,599 --> 00:43:07,359
um and then like leverage that to try

1293
00:43:07,359 --> 00:43:09,200
and find different variants of the same

1294
00:43:09,200 --> 00:43:10,000
thing

1295
00:43:10,000 --> 00:43:12,960
um in bases but for europe think i would

1296
00:43:12,960 --> 00:43:14,480
basically if it's just a pen test or

1297
00:43:14,480 --> 00:43:16,000
like something like that i would just

1298
00:43:16,000 --> 00:43:19,680
write up a potential finding and move on

1299
00:43:27,359 --> 00:43:29,200
so one of my friends said if you have to

1300
00:43:29,200 --> 00:43:31,359
do something more than three times a day

1301
00:43:31,359 --> 00:43:34,160
he said a lot of me

1302
00:43:34,160 --> 00:43:36,480
i mean technically yeah i mean like if

1303
00:43:36,480 --> 00:43:37,680
you have to do it more than once a day i

1304
00:43:37,680 --> 00:43:39,520
would say automate it

1305
00:43:39,520 --> 00:43:41,280
but i mean like if you're doing it once

1306
00:43:41,280 --> 00:43:43,200
you probably don't need to uh if you're

1307
00:43:43,200 --> 00:43:44,400
doing it twice

1308
00:43:44,400 --> 00:43:45,760
probably it depends how long the task

1309
00:43:45,760 --> 00:43:47,839
takes to like some things you might have

1310
00:43:47,839 --> 00:43:49,599
to have like sometimes you can do

1311
00:43:49,599 --> 00:43:51,200
partial automation so you can get half

1312
00:43:51,200 --> 00:43:53,040
the way there and do the rest manual it

1313
00:43:53,040 --> 00:43:54,560
could be like transforming data in a way

1314
00:43:54,560 --> 00:43:56,720
to put into a report or it could be you

1315
00:43:56,720 --> 00:43:58,480
know something of that nature to get to

1316
00:43:58,480 --> 00:44:01,040
the you know the information to manually

1317
00:44:01,040 --> 00:44:03,040
assess um

1318
00:44:03,040 --> 00:44:05,760
but yeah i realistically there's i think

1319
00:44:05,760 --> 00:44:07,280
people probably have better definitions

1320
00:44:07,280 --> 00:44:08,640
of this but i feel like if you have to

1321
00:44:08,640 --> 00:44:10,160
do it more than twice

1322
00:44:10,160 --> 00:44:12,079
and it's happening on a daily basis 100

1323
00:44:12,079 --> 00:44:13,920
try and automate that either like

1324
00:44:13,920 --> 00:44:16,079
submissions of jury tickets you know

1325
00:44:16,079 --> 00:44:17,359
you know submission of bug bounty

1326
00:44:17,359 --> 00:44:19,040
reports anything of those types of

1327
00:44:19,040 --> 00:44:23,240
things i would try and automate

1328
00:44:24,720 --> 00:44:28,000
so any other questions

1329
00:44:29,520 --> 00:44:31,440
i'll be around with my mask on so if you

1330
00:44:31,440 --> 00:44:35,440
have any questions come speak

1331
00:44:35,440 --> 00:44:40,989
[Applause]

1332
00:44:41,200 --> 00:44:43,279
you

