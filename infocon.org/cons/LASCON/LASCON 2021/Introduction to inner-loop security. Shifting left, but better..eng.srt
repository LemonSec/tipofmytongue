1
00:00:03,200 --> 00:00:18,080
[Music]

2
00:00:18,080 --> 00:00:19,600
welcome everybody thanks for coming i

3
00:00:19,600 --> 00:00:21,199
know it's lunchtime um hopefully we'll

4
00:00:21,199 --> 00:00:22,960
get a few more people in here but if not

5
00:00:22,960 --> 00:00:25,119
we'll still have fun so

6
00:00:25,119 --> 00:00:27,439
welcome to my talk uh quick overview of

7
00:00:27,439 --> 00:00:28,560
what we're going to be talking about

8
00:00:28,560 --> 00:00:30,720
today

9
00:00:30,720 --> 00:00:32,558
a little bit about me uh it's my third

10
00:00:32,558 --> 00:00:34,239
time presenting at last con one of my

11
00:00:34,239 --> 00:00:36,079
favorite conferences so super excited to

12
00:00:36,079 --> 00:00:38,000
be here been doing this some way shape

13
00:00:38,000 --> 00:00:39,920
or form for about 17 years started off

14
00:00:39,920 --> 00:00:42,320
as a full stack developer 17 years ago

15
00:00:42,320 --> 00:00:43,840
we didn't call him that just meant i did

16
00:00:43,840 --> 00:00:46,000
everything from fortran to delphi to

17
00:00:46,000 --> 00:00:48,399
databases to middleware and everything

18
00:00:48,399 --> 00:00:49,360
else

19
00:00:49,360 --> 00:00:52,320
super passionate about appsec devsecops

20
00:00:52,320 --> 00:00:54,000
you know everything that i do kind of

21
00:00:54,000 --> 00:00:56,000
core to my philosophy on appsec and

22
00:00:56,000 --> 00:00:58,320
devsecops what this talk will be all

23
00:00:58,320 --> 00:01:00,640
about today is developer enablement

24
00:01:00,640 --> 00:01:03,199
i'm a big believer that when the secure

25
00:01:03,199 --> 00:01:05,040
path is the easy path

26
00:01:05,040 --> 00:01:06,960
it's the path that will be followed and

27
00:01:06,960 --> 00:01:08,720
i always joke that we have to make

28
00:01:08,720 --> 00:01:09,840
security

29
00:01:09,840 --> 00:01:11,840
easier than going to stack overflow

30
00:01:11,840 --> 00:01:13,600
because we all know how well any of us

31
00:01:13,600 --> 00:01:16,400
can develop without stack overflow

32
00:01:16,400 --> 00:01:18,560
a couple of fun facts married my high

33
00:01:18,560 --> 00:01:20,479
school sweetheart still with her three

34
00:01:20,479 --> 00:01:22,560
lovely kids i love hiking playing video

35
00:01:22,560 --> 00:01:25,119
games play guitar i'm super excited

36
00:01:25,119 --> 00:01:27,680
right now big final fantasy 14 fan we've

37
00:01:27,680 --> 00:01:29,520
got a big expansion drop it in a couple

38
00:01:29,520 --> 00:01:32,000
of weeks and amazon is finally launching

39
00:01:32,000 --> 00:01:34,159
the tv series for will of time so if we

40
00:01:34,159 --> 00:01:36,479
have any big fantasy book nerds i'm

41
00:01:36,479 --> 00:01:39,600
super excited about that

42
00:01:39,680 --> 00:01:41,840
so my thesis for today and this kind of

43
00:01:41,840 --> 00:01:43,200
ties in a little bit to what jeff

44
00:01:43,200 --> 00:01:44,880
williams talked about earlier i'm

45
00:01:44,880 --> 00:01:46,479
convinced he stole a little bit of this

46
00:01:46,479 --> 00:01:48,560
from me um

47
00:01:48,560 --> 00:01:50,479
believe that shift left is an outdated

48
00:01:50,479 --> 00:01:54,159
sentiment um and it's no longer relevant

49
00:01:54,159 --> 00:01:56,880
it has developed into a culture that

50
00:01:56,880 --> 00:02:00,399
primarily exists to punish developers

51
00:02:00,399 --> 00:02:02,399
i'm a big fan of this for champions as

52
00:02:02,399 --> 00:02:04,640
well right i'm thoroughly convinced that

53
00:02:04,640 --> 00:02:07,600
appsec champions is just a way to punish

54
00:02:07,600 --> 00:02:09,360
developers for taking an interest in

55
00:02:09,360 --> 00:02:11,038
security and i think there has to be a

56
00:02:11,038 --> 00:02:12,160
better way and that's what we're going

57
00:02:12,160 --> 00:02:14,640
to talk about today

58
00:02:14,640 --> 00:02:16,560
so i guess just show of hands right how

59
00:02:16,560 --> 00:02:19,760
many of you all are developers

60
00:02:20,319 --> 00:02:22,239
ish one okay how many of you are on a

61
00:02:22,239 --> 00:02:24,800
security or appstack team

62
00:02:24,800 --> 00:02:27,360
okay all right so hopefully everybody

63
00:02:27,360 --> 00:02:28,959
knows what the software development life

64
00:02:28,959 --> 00:02:31,200
cycle is right there there are many like

65
00:02:31,200 --> 00:02:33,440
it this one is mine um you know we've

66
00:02:33,440 --> 00:02:35,360
seen a hundred different variations they

67
00:02:35,360 --> 00:02:37,440
all say somewhat the same thing right

68
00:02:37,440 --> 00:02:38,879
it's everything from requirements to

69
00:02:38,879 --> 00:02:41,120
design to coding testing deployment

70
00:02:41,120 --> 00:02:43,440
maintenance etc i mean we've tried to do

71
00:02:43,440 --> 00:02:45,440
a pretty good job as we move to agile

72
00:02:45,440 --> 00:02:48,640
and devops of creating new sdlcs right

73
00:02:48,640 --> 00:02:50,400
and we've all seen the little infinity

74
00:02:50,400 --> 00:02:52,800
signs and we try to wrap security around

75
00:02:52,800 --> 00:02:54,800
it and many of us have probably even

76
00:02:54,800 --> 00:02:57,200
created some of those in our careers but

77
00:02:57,200 --> 00:02:58,800
at the end of the day right we end up

78
00:02:58,800 --> 00:03:00,959
usually representing it linearly just

79
00:03:00,959 --> 00:03:05,360
because it's easier to to talk about it

80
00:03:05,360 --> 00:03:06,480
so

81
00:03:06,480 --> 00:03:07,840
let's talk a little bit about shift

82
00:03:07,840 --> 00:03:09,360
shift left right let's make sure we all

83
00:03:09,360 --> 00:03:11,599
start on the same page

84
00:03:11,599 --> 00:03:13,280
traditionally where many of us start

85
00:03:13,280 --> 00:03:16,000
with appsec is with penetration testing

86
00:03:16,000 --> 00:03:17,440
and that's still where the market

87
00:03:17,440 --> 00:03:19,920
largely sits today in order to

88
00:03:19,920 --> 00:03:22,000
penetration test our applications

89
00:03:22,000 --> 00:03:24,480
generally have to be live um many of

90
00:03:24,480 --> 00:03:26,799
them have existed for many many years

91
00:03:26,799 --> 00:03:29,519
are very much in the maintenance phase

92
00:03:29,519 --> 00:03:31,920
of the sdlc and so right we've all seen

93
00:03:31,920 --> 00:03:34,159
the scary pictures and the slides of how

94
00:03:34,159 --> 00:03:34,959
much

95
00:03:34,959 --> 00:03:36,799
more it cost us to find and fix

96
00:03:36,799 --> 00:03:38,560
vulnerabilities when the app's already

97
00:03:38,560 --> 00:03:40,720
deployed versus finding and fixing them

98
00:03:40,720 --> 00:03:43,360
early on right so this whole shift left

99
00:03:43,360 --> 00:03:45,360
thing is really all about how do we get

100
00:03:45,360 --> 00:03:48,000
from doing security mostly pin testing

101
00:03:48,000 --> 00:03:50,560
here in the maintenance to ideally doing

102
00:03:50,560 --> 00:03:52,799
security over here in the requirement

103
00:03:52,799 --> 00:03:53,760
space

104
00:03:53,760 --> 00:03:55,599
and having you know secure requirements

105
00:03:55,599 --> 00:03:57,280
right i'm a big believer that security

106
00:03:57,280 --> 00:03:59,519
as code is going to save the world

107
00:03:59,519 --> 00:04:01,120
but right everything we normally talk

108
00:04:01,120 --> 00:04:03,680
about is all how do we do security at

109
00:04:03,680 --> 00:04:06,720
the requirements phase

110
00:04:07,680 --> 00:04:09,599
so i mean this kind of ties into what

111
00:04:09,599 --> 00:04:11,200
jeff said a little bit earlier too as

112
00:04:11,200 --> 00:04:13,840
part of this talk i decided to go out

113
00:04:13,840 --> 00:04:15,680
and just research you know where did

114
00:04:15,680 --> 00:04:18,000
this whole shift left thing

115
00:04:18,000 --> 00:04:20,560
come from uh what are its origins what's

116
00:04:20,560 --> 00:04:22,800
its history and what i found was it was

117
00:04:22,800 --> 00:04:25,840
introduced by larry smith in 2001 and a

118
00:04:25,840 --> 00:04:28,720
little article which i've listed here

119
00:04:28,720 --> 00:04:30,479
i was really surprised when i looked

120
00:04:30,479 --> 00:04:33,199
this up right i thought that i was going

121
00:04:33,199 --> 00:04:35,680
to find an article about pen testing and

122
00:04:35,680 --> 00:04:38,080
getting security into the requirements

123
00:04:38,080 --> 00:04:40,400
phase right we've all seen our vendors

124
00:04:40,400 --> 00:04:42,400
talk they all talk about hey we give you

125
00:04:42,400 --> 00:04:44,400
an ide plug-in right this is shifting

126
00:04:44,400 --> 00:04:46,080
left we're giving it to the developers

127
00:04:46,080 --> 00:04:47,680
and that's really what we talked about

128
00:04:47,680 --> 00:04:50,080
today was security same thing even if we

129
00:04:50,080 --> 00:04:52,160
talk agile and defsec ups right it's all

130
00:04:52,160 --> 00:04:54,720
about how do we take x tool and how do

131
00:04:54,720 --> 00:04:57,759
we put it into our devops or our ci cd

132
00:04:57,759 --> 00:05:00,080
pipeline and it's focused purely on

133
00:05:00,080 --> 00:05:01,360
automation

134
00:05:01,360 --> 00:05:04,800
well this this paper really surprised me

135
00:05:04,800 --> 00:05:06,720
because it wasn't about pin testing at

136
00:05:06,720 --> 00:05:10,639
all it was written by a qa guy who was

137
00:05:10,639 --> 00:05:13,680
talking in 2001 20 years ago about

138
00:05:13,680 --> 00:05:15,680
taking qa tests

139
00:05:15,680 --> 00:05:18,560
and doing security testing

140
00:05:18,560 --> 00:05:22,160
via qa testing and doing them earlier in

141
00:05:22,160 --> 00:05:24,240
the software development life cycle

142
00:05:24,240 --> 00:05:25,919
right and this is a direct quote from

143
00:05:25,919 --> 00:05:27,680
this guy bugs are cheap when caught

144
00:05:27,680 --> 00:05:29,759
young you can catch bugs earlier by

145
00:05:29,759 --> 00:05:32,000
making qa a part of your development not

146
00:05:32,000 --> 00:05:34,320
just part of the release process right

147
00:05:34,320 --> 00:05:35,280
you know

148
00:05:35,280 --> 00:05:37,840
go to any devsecops talk today right and

149
00:05:37,840 --> 00:05:40,000
that's what people like me are going to

150
00:05:40,000 --> 00:05:41,360
be telling you so again this really

151
00:05:41,360 --> 00:05:43,919
surprised me 20 years ago we had this

152
00:05:43,919 --> 00:05:45,520
idea

153
00:05:45,520 --> 00:05:47,680
right so you know where did we go so

154
00:05:47,680 --> 00:05:49,360
wrong

155
00:05:49,360 --> 00:05:51,120
um you know this is another quote you

156
00:05:51,120 --> 00:05:53,120
know directly from this article by by

157
00:05:53,120 --> 00:05:55,600
this larry guy uh i'm not gonna read all

158
00:05:55,600 --> 00:05:58,080
of this but you know it's

159
00:05:58,080 --> 00:05:59,919
he's saying that there's downsides to

160
00:05:59,919 --> 00:06:02,720
this method and that your security work

161
00:06:02,720 --> 00:06:05,520
is going to go away it's going to look

162
00:06:05,520 --> 00:06:07,759
like you're doing nothing and you need

163
00:06:07,759 --> 00:06:09,759
to level set with management first to

164
00:06:09,759 --> 00:06:12,000
make sure that you don't get fired for

165
00:06:12,000 --> 00:06:14,720
being so good at your job

166
00:06:14,720 --> 00:06:17,840
which again is absolutely phenomenal how

167
00:06:17,840 --> 00:06:19,919
closely this ties in you know to what we

168
00:06:19,919 --> 00:06:23,758
talk about today with devsecops

169
00:06:24,479 --> 00:06:27,280
so josh everybody loves shift left why

170
00:06:27,280 --> 00:06:29,520
do you hate it so much

171
00:06:29,520 --> 00:06:30,479
well

172
00:06:30,479 --> 00:06:32,720
primarily first bullet here security

173
00:06:32,720 --> 00:06:34,800
responsibilities are giving to

174
00:06:34,800 --> 00:06:37,759
developers without any thought regarding

175
00:06:37,759 --> 00:06:40,240
the impact right so we take complicated

176
00:06:40,240 --> 00:06:42,160
security tools that are designed for

177
00:06:42,160 --> 00:06:44,319
security people and then we give them to

178
00:06:44,319 --> 00:06:46,639
the developers and we expect them to to

179
00:06:46,639 --> 00:06:49,039
use that right we go out and we buy

180
00:06:49,039 --> 00:06:50,960
training right i kind of got booed a

181
00:06:50,960 --> 00:06:52,560
little bit here two years ago at last

182
00:06:52,560 --> 00:06:54,960
con because i made the boat statement of

183
00:06:54,960 --> 00:06:58,639
uh appsec training is not working right

184
00:06:58,639 --> 00:07:00,240
you know sql injection we were writing

185
00:07:00,240 --> 00:07:03,599
books on sql injection in 1995 i've

186
00:07:03,599 --> 00:07:05,919
given countless developer training

187
00:07:05,919 --> 00:07:09,039
classes we're still making the same very

188
00:07:09,039 --> 00:07:11,759
very basic mistakes right i kind of

189
00:07:11,759 --> 00:07:13,520
chuckled in jeff's talk yesterday for

190
00:07:13,520 --> 00:07:14,720
those of you that were there when he was

191
00:07:14,720 --> 00:07:16,479
talking about instrumentation

192
00:07:16,479 --> 00:07:18,319
right and he did the sql injection

193
00:07:18,319 --> 00:07:19,759
example where he said okay if you're

194
00:07:19,759 --> 00:07:21,759
using this method this method and this

195
00:07:21,759 --> 00:07:24,400
method that's bad let's flag it let's

196
00:07:24,400 --> 00:07:26,000
block it right and then he made the

197
00:07:26,000 --> 00:07:27,599
statement of if you're using a prepared

198
00:07:27,599 --> 00:07:30,319
statement let's let that through because

199
00:07:30,319 --> 00:07:32,240
you're secure if you're using a prepared

200
00:07:32,240 --> 00:07:34,000
statement

201
00:07:34,000 --> 00:07:36,319
that's not true we could use a prepared

202
00:07:36,319 --> 00:07:38,880
statement and we could use it improperly

203
00:07:38,880 --> 00:07:41,440
i've seen countless times where you know

204
00:07:41,440 --> 00:07:44,080
developers just take a dynamic sql query

205
00:07:44,080 --> 00:07:45,599
and they just wrap it in a prepared

206
00:07:45,599 --> 00:07:46,800
statement and they don't actually

207
00:07:46,800 --> 00:07:49,039
parameterize any of the queries well

208
00:07:49,039 --> 00:07:51,199
guess what you have zero of your

209
00:07:51,199 --> 00:07:53,520
protections at that point and you might

210
00:07:53,520 --> 00:07:55,520
as well just be executing just a normal

211
00:07:55,520 --> 00:07:57,120
query

212
00:07:57,120 --> 00:07:59,840
um shift left in my opinion has been

213
00:07:59,840 --> 00:08:01,520
poorly implemented

214
00:08:01,520 --> 00:08:03,599
we're punishing our developers right you

215
00:08:03,599 --> 00:08:05,120
know for those of you in security i'm

216
00:08:05,120 --> 00:08:06,960
sure you've gotten pushed back from your

217
00:08:06,960 --> 00:08:08,720
developers plenty of times you know why

218
00:08:08,720 --> 00:08:10,720
should i fix that hey what the hell does

219
00:08:10,720 --> 00:08:12,639
c surf actually mean can you even

220
00:08:12,639 --> 00:08:15,039
describe it to me um this tool is really

221
00:08:15,039 --> 00:08:18,000
hard for me to use it's um

222
00:08:18,000 --> 00:08:20,319
you know i love to pick on

223
00:08:20,319 --> 00:08:22,400
like secure assist and similar tools

224
00:08:22,400 --> 00:08:24,560
right because to security people they

225
00:08:24,560 --> 00:08:27,680
sound absolutely perfect on paper hey we

226
00:08:27,680 --> 00:08:30,160
can prevent vulnerabilities as the

227
00:08:30,160 --> 00:08:32,399
developer is writing them

228
00:08:32,399 --> 00:08:34,719
and just squash them in their tracks

229
00:08:34,719 --> 00:08:37,279
right but the end result of that what we

230
00:08:37,279 --> 00:08:39,519
don't think about is that impact to the

231
00:08:39,519 --> 00:08:41,839
developer in that we are preventing them

232
00:08:41,839 --> 00:08:43,519
from writing code

233
00:08:43,519 --> 00:08:45,360
i spent many years working for ernst

234
00:08:45,360 --> 00:08:48,080
young and we had this study that was all

235
00:08:48,080 --> 00:08:50,720
about multitasking and the whole idea

236
00:08:50,720 --> 00:08:53,200
was nobody can multitask

237
00:08:53,200 --> 00:08:55,600
and every interruption that we have that

238
00:08:55,600 --> 00:08:58,000
takes us off of a focused task

239
00:08:58,000 --> 00:09:00,880
it takes the human mind 22 minutes on

240
00:09:00,880 --> 00:09:04,640
average to refocus on a particular task

241
00:09:04,640 --> 00:09:06,480
so you know every email we read right

242
00:09:06,480 --> 00:09:08,640
we're losing 22 minutes of focus this is

243
00:09:08,640 --> 00:09:10,800
why we all have add now

244
00:09:10,800 --> 00:09:13,200
and so when we have these type of tools

245
00:09:13,200 --> 00:09:15,519
right every time we stop the developer

246
00:09:15,519 --> 00:09:17,920
from writing code we're effectively

247
00:09:17,920 --> 00:09:21,519
eliminating 22 minutes of productivity

248
00:09:21,519 --> 00:09:24,640
so again getting back to this message of

249
00:09:24,640 --> 00:09:27,200
we're punishing our developers

250
00:09:27,200 --> 00:09:30,800
whether we're instead of enabling them

251
00:09:30,800 --> 00:09:32,560
and then right developer performance

252
00:09:32,560 --> 00:09:34,640
reviews do not include security right we

253
00:09:34,640 --> 00:09:37,279
want we love champions we talk about

254
00:09:37,279 --> 00:09:39,680
scaling our appsec program by taking

255
00:09:39,680 --> 00:09:41,760
developers and again you know punishing

256
00:09:41,760 --> 00:09:44,720
them and part of that is we very rarely

257
00:09:44,720 --> 00:09:47,360
make security part of how they're scored

258
00:09:47,360 --> 00:09:49,440
and graded on their performance so we

259
00:09:49,440 --> 00:09:51,360
want to tell them hey you know you need

260
00:09:51,360 --> 00:09:53,440
to take instead of doing 100 of your

261
00:09:53,440 --> 00:09:55,519
time on development and writing features

262
00:09:55,519 --> 00:09:57,200
and doing this cool stuff you're not

263
00:09:57,200 --> 00:09:59,120
going to spend 75 percent of your time

264
00:09:59,120 --> 00:10:02,320
on that and 25 doing security but oh by

265
00:10:02,320 --> 00:10:03,680
the way we're not going to give you a

266
00:10:03,680 --> 00:10:05,279
cool title we're not going to give you a

267
00:10:05,279 --> 00:10:07,120
pay increase i mean we're not going to

268
00:10:07,120 --> 00:10:08,320
change how you're reviewed in your

269
00:10:08,320 --> 00:10:10,720
performance criteria so you know good

270
00:10:10,720 --> 00:10:12,320
luck meeting all your targets but now

271
00:10:12,320 --> 00:10:16,160
you have 75 of your time

272
00:10:16,320 --> 00:10:18,720
so long story short right i think shift

273
00:10:18,720 --> 00:10:21,440
left is great uh conceptually but i

274
00:10:21,440 --> 00:10:22,720
think you know in getting back to larry

275
00:10:22,720 --> 00:10:25,120
smith's article right we had it right 20

276
00:10:25,120 --> 00:10:28,320
years ago but just went incredibly wrong

277
00:10:28,320 --> 00:10:30,720
along the

278
00:10:30,839 --> 00:10:33,200
way that's all great let's talk about

279
00:10:33,200 --> 00:10:34,959
solutions

280
00:10:34,959 --> 00:10:36,240
um

281
00:10:36,240 --> 00:10:38,399
i first ran across this concept of the

282
00:10:38,399 --> 00:10:40,160
inner loop a few years ago this was

283
00:10:40,160 --> 00:10:42,160
actually brought to me by one of my

284
00:10:42,160 --> 00:10:45,120
financial services clients um who had in

285
00:10:45,120 --> 00:10:48,160
my opinion a very great idea but again

286
00:10:48,160 --> 00:10:50,079
they kind of translated it to shift left

287
00:10:50,079 --> 00:10:52,640
and and went really wrong with it so uh

288
00:10:52,640 --> 00:10:54,079
inner loop you know inner loop outer

289
00:10:54,079 --> 00:10:56,079
loop is something you can google right

290
00:10:56,079 --> 00:10:58,240
um you know a lot of this content came

291
00:10:58,240 --> 00:11:01,279
from mitch denney who was a developer

292
00:11:01,279 --> 00:11:03,200
from microsoft and in his original

293
00:11:03,200 --> 00:11:05,519
article this link won't actually work

294
00:11:05,519 --> 00:11:07,519
you'll have to use the wayback machine

295
00:11:07,519 --> 00:11:10,079
because the site's no longer live but he

296
00:11:10,079 --> 00:11:12,000
wrote a blog post that was talking about

297
00:11:12,000 --> 00:11:14,560
how they write code at microsoft

298
00:11:14,560 --> 00:11:17,519
and using this concept of the inner loop

299
00:11:17,519 --> 00:11:19,360
now the inner loop is it's nothing i

300
00:11:19,360 --> 00:11:21,519
created it's nothing microsoft created

301
00:11:21,519 --> 00:11:23,839
it's been used for a very long time

302
00:11:23,839 --> 00:11:25,519
everything from software development

303
00:11:25,519 --> 00:11:27,120
project planning automobile

304
00:11:27,120 --> 00:11:29,440
manufacturing the list goes on and on

305
00:11:29,440 --> 00:11:31,200
and on right you know the only novel

306
00:11:31,200 --> 00:11:33,200
thing we've done here today is we've

307
00:11:33,200 --> 00:11:35,680
adapted it to work for application

308
00:11:35,680 --> 00:11:38,239
security

309
00:11:39,120 --> 00:11:41,440
so what is the inner loop essentially

310
00:11:41,440 --> 00:11:43,360
and you'll have to forgive my uh my

311
00:11:43,360 --> 00:11:45,519
graphics i don't work at ey anymore so i

312
00:11:45,519 --> 00:11:47,200
don't have cool designers so i have to

313
00:11:47,200 --> 00:11:48,560
work on

314
00:11:48,560 --> 00:11:50,639
what the powerpoint designer builds for

315
00:11:50,639 --> 00:11:51,680
me so

316
00:11:51,680 --> 00:11:53,040
it's basically

317
00:11:53,040 --> 00:11:55,760
all of the activities that occur

318
00:11:55,760 --> 00:11:57,920
from the time the developer starts

319
00:11:57,920 --> 00:11:59,440
developing

320
00:11:59,440 --> 00:12:02,959
until they commit their code to a local

321
00:12:02,959 --> 00:12:06,000
get repository so everything that occurs

322
00:12:06,000 --> 00:12:08,800
after that push to the local get is

323
00:12:08,800 --> 00:12:11,440
considered the outer loop so basically

324
00:12:11,440 --> 00:12:14,399
you can think of this as the developer's

325
00:12:14,399 --> 00:12:18,079
local development cycle

326
00:12:18,399 --> 00:12:20,079
so to kind of help you you see this

327
00:12:20,079 --> 00:12:22,320
visually right you know we

328
00:12:22,320 --> 00:12:23,920
kind of break this down into a software

329
00:12:23,920 --> 00:12:26,800
development life cycle we have lots of

330
00:12:26,800 --> 00:12:28,000
inner loops

331
00:12:28,000 --> 00:12:30,720
and one outer loop so here on the left

332
00:12:30,720 --> 00:12:32,160
right so i guess first of all we've got

333
00:12:32,160 --> 00:12:34,000
preview steps right because there are

334
00:12:34,000 --> 00:12:36,560
security things that happen before we

335
00:12:36,560 --> 00:12:38,320
start developing we talked about you

336
00:12:38,320 --> 00:12:40,079
know doing security in the requirements

337
00:12:40,079 --> 00:12:42,320
phase you know threat modeling

338
00:12:42,320 --> 00:12:44,240
architecture reviews things like that

339
00:12:44,240 --> 00:12:46,720
that happen prior to development right

340
00:12:46,720 --> 00:12:48,399
we want to be clear that those are kind

341
00:12:48,399 --> 00:12:50,240
of out of scope for this conversation

342
00:12:50,240 --> 00:12:52,720
because they happen prior to any of the

343
00:12:52,720 --> 00:12:54,880
development actually starting

344
00:12:54,880 --> 00:12:56,480
on the left-hand side we've got the

345
00:12:56,480 --> 00:12:58,160
actual inner loop which is what we'll be

346
00:12:58,160 --> 00:13:00,639
focusing on today the inner loop

347
00:13:00,639 --> 00:13:02,639
consists of coding

348
00:13:02,639 --> 00:13:03,519
building

349
00:13:03,519 --> 00:13:07,360
testing and committing right nothing

350
00:13:07,360 --> 00:13:08,800
crazy here we're not setting the world

351
00:13:08,800 --> 00:13:11,440
on fire um you know here in the middle

352
00:13:11,440 --> 00:13:13,440
right we've got a pull request

353
00:13:13,440 --> 00:13:16,000
to push our code out to

354
00:13:16,000 --> 00:13:17,440
you know some other source code

355
00:13:17,440 --> 00:13:20,639
repository into our bucket or azure or

356
00:13:20,639 --> 00:13:22,560
wherever we're storing our source code

357
00:13:22,560 --> 00:13:24,560
right and once it goes there we enter

358
00:13:24,560 --> 00:13:27,360
what we call the outer loop

359
00:13:27,360 --> 00:13:28,800
and then within the outer loop right you

360
00:13:28,800 --> 00:13:30,160
know again you know just to kind of try

361
00:13:30,160 --> 00:13:32,160
to simplify this a little bit right

362
00:13:32,160 --> 00:13:34,399
there could be lots of inner loops right

363
00:13:34,399 --> 00:13:36,560
we're not writing waterfall you know

364
00:13:36,560 --> 00:13:38,480
type code anymore we've got a lot of

365
00:13:38,480 --> 00:13:40,320
developers writing and pushing a lot of

366
00:13:40,320 --> 00:13:42,240
code so typically we're going to have

367
00:13:42,240 --> 00:13:44,880
you know many many many inner loops that

368
00:13:44,880 --> 00:13:46,720
are going to be pushing code into this

369
00:13:46,720 --> 00:13:49,040
outer loop

370
00:13:49,040 --> 00:13:50,480
and if we look at it a little bit more

371
00:13:50,480 --> 00:13:52,079
linearly

372
00:13:52,079 --> 00:13:53,519
you know you've probably seen similar

373
00:13:53,519 --> 00:13:55,760
diagrams to this before right and i'm

374
00:13:55,760 --> 00:13:59,519
just trying to take a you know kind of a

375
00:13:59,519 --> 00:14:02,240
kind of an apsec architecture here and

376
00:14:02,240 --> 00:14:04,320
just kind of draw the line on where the

377
00:14:04,320 --> 00:14:06,160
inner loop and the outer loop actually

378
00:14:06,160 --> 00:14:08,160
is so again you know nothing novel here

379
00:14:08,160 --> 00:14:09,519
right we've got you know our user

380
00:14:09,519 --> 00:14:11,360
stories and sprints up here in the top

381
00:14:11,360 --> 00:14:13,279
left right once we've got our stories

382
00:14:13,279 --> 00:14:15,120
which hopefully we have security stories

383
00:14:15,120 --> 00:14:17,360
too we go into our threat modeling and

384
00:14:17,360 --> 00:14:18,800
architecture reviews hopefully we're

385
00:14:18,800 --> 00:14:20,720
doing that before we write code then we

386
00:14:20,720 --> 00:14:22,079
get to coding

387
00:14:22,079 --> 00:14:23,440
then we get to pushing our code to

388
00:14:23,440 --> 00:14:25,440
source control right then we get to our

389
00:14:25,440 --> 00:14:27,760
build system which is where we do all of

390
00:14:27,760 --> 00:14:29,199
these other things that we hear about

391
00:14:29,199 --> 00:14:31,040
everything from static analysis right

392
00:14:31,040 --> 00:14:32,480
we've got all of our automated testing

393
00:14:32,480 --> 00:14:33,760
this is what your vendors are telling

394
00:14:33,760 --> 00:14:35,519
you to do hey let's take all of our

395
00:14:35,519 --> 00:14:37,600
tools let's put them in your pipeline

396
00:14:37,600 --> 00:14:39,760
let's create bottlenecks to your release

397
00:14:39,760 --> 00:14:41,519
all of this good stuff but right we've

398
00:14:41,519 --> 00:14:44,160
got our sass or dash or is security is

399
00:14:44,160 --> 00:14:46,880
code qa testing you know whatever

400
00:14:46,880 --> 00:14:48,800
acronym it is you're using for all your

401
00:14:48,800 --> 00:14:51,279
security testing this is probably where

402
00:14:51,279 --> 00:14:53,040
it lifts today right after you've pushed

403
00:14:53,040 --> 00:14:55,199
your code into your build system and

404
00:14:55,199 --> 00:14:57,680
then it flows and right your flow

405
00:14:57,680 --> 00:14:59,120
probably looks a little bit different

406
00:14:59,120 --> 00:15:01,120
but some sort of change management to

407
00:15:01,120 --> 00:15:02,880
get the code out there all of these

408
00:15:02,880 --> 00:15:05,360
defects hopefully go to some sort of

409
00:15:05,360 --> 00:15:07,600
vulnerability management you know maybe

410
00:15:07,600 --> 00:15:10,000
even jira and given that information

411
00:15:10,000 --> 00:15:12,000
back to the developers short feedback

412
00:15:12,000 --> 00:15:14,240
loops all of that good stuff

413
00:15:14,240 --> 00:15:15,600
right so

414
00:15:15,600 --> 00:15:17,279
right here this green box at source

415
00:15:17,279 --> 00:15:18,639
control where we've done that pull

416
00:15:18,639 --> 00:15:20,880
request to push our code

417
00:15:20,880 --> 00:15:22,399
that's where the outer loop starts right

418
00:15:22,399 --> 00:15:24,240
you know if we get back to you know this

419
00:15:24,240 --> 00:15:25,920
slide here once we've got the pull

420
00:15:25,920 --> 00:15:28,560
request we're entering the outer loop

421
00:15:28,560 --> 00:15:31,199
so so really the key takeaway here

422
00:15:31,199 --> 00:15:32,480
is

423
00:15:32,480 --> 00:15:35,199
probably most if not all of any security

424
00:15:35,199 --> 00:15:37,120
testing that you're doing today is

425
00:15:37,120 --> 00:15:38,160
happening

426
00:15:38,160 --> 00:15:38,959
here

427
00:15:38,959 --> 00:15:40,480
and it's happening in what we're

428
00:15:40,480 --> 00:15:44,000
referring to is the outer loop

429
00:15:44,639 --> 00:15:47,040
right and so what i want to convince you

430
00:15:47,040 --> 00:15:48,880
is to do security testing in the inner

431
00:15:48,880 --> 00:15:51,120
loop

432
00:15:51,279 --> 00:15:52,880
so how do we do this right there's a

433
00:15:52,880 --> 00:15:54,240
couple of things that you need to

434
00:15:54,240 --> 00:15:56,560
understand about this inner loop model

435
00:15:56,560 --> 00:15:58,079
first right and this is where we tie

436
00:15:58,079 --> 00:16:00,480
this back to that developer enablement

437
00:16:00,480 --> 00:16:03,120
right so some key tenants of the inner

438
00:16:03,120 --> 00:16:05,759
loop right that have to hold true

439
00:16:05,759 --> 00:16:06,639
first

440
00:16:06,639 --> 00:16:09,440
is the inner loop execution has to be

441
00:16:09,440 --> 00:16:11,759
fast as possible

442
00:16:11,759 --> 00:16:14,240
right raise your hand if you think any

443
00:16:14,240 --> 00:16:16,000
of our security testing tools we have

444
00:16:16,000 --> 00:16:19,639
today are fast

445
00:16:22,800 --> 00:16:25,599
all right all right

446
00:16:25,759 --> 00:16:27,839
and what tool is that

447
00:16:27,839 --> 00:16:30,079
now secure okay all right

448
00:16:30,079 --> 00:16:32,160
for this we do what we call smoke test

449
00:16:32,160 --> 00:16:34,320
okay so it's designed to

450
00:16:34,320 --> 00:16:36,880
in five

451
00:16:37,680 --> 00:16:38,720
okay

452
00:16:38,720 --> 00:16:41,040
that's that's a fair argument

453
00:16:41,040 --> 00:16:45,399
all right and the second key tenant yeah

454
00:16:47,680 --> 00:16:50,880
[Music]

455
00:16:55,920 --> 00:16:57,040
one of the things that we'll talk about

456
00:16:57,040 --> 00:16:59,040
is the qa testing aspect of that which

457
00:16:59,040 --> 00:17:00,880
is where the smoke testing comes in you

458
00:17:00,880 --> 00:17:02,399
know and kind of how that fits into both

459
00:17:02,399 --> 00:17:04,079
the inner and outer loop and that is one

460
00:17:04,079 --> 00:17:05,439
of the things that we can do in the

461
00:17:05,439 --> 00:17:07,760
inner loop is a minor spoiler

462
00:17:07,760 --> 00:17:10,000
so the second key tenant is feedback

463
00:17:10,000 --> 00:17:13,359
time should be minimized but quality

464
00:17:13,359 --> 00:17:15,039
optimized all right so again right

465
00:17:15,039 --> 00:17:16,400
you've all heard about the developer

466
00:17:16,400 --> 00:17:18,160
feedback loop and you know the amount of

467
00:17:18,160 --> 00:17:20,160
time from the time we test until we tell

468
00:17:20,160 --> 00:17:21,760
developers there's a problem to the

469
00:17:21,760 --> 00:17:24,079
amount of time that it's actually fixed

470
00:17:24,079 --> 00:17:26,240
right what jeff referred to as the mean

471
00:17:26,240 --> 00:17:28,319
time to resolution

472
00:17:28,319 --> 00:17:29,919
then finally

473
00:17:29,919 --> 00:17:32,720
tax should be minimized waste should be

474
00:17:32,720 --> 00:17:34,160
eliminated

475
00:17:34,160 --> 00:17:36,160
right what is tax what is waste well

476
00:17:36,160 --> 00:17:37,679
there's some handy definitions here that

477
00:17:37,679 --> 00:17:40,559
you can read but essentially tax is any

478
00:17:40,559 --> 00:17:42,799
activity that does not provide um

479
00:17:42,799 --> 00:17:45,440
customer value or feedback right it's a

480
00:17:45,440 --> 00:17:48,559
necessary evil right it's something that

481
00:17:48,559 --> 00:17:50,880
we have to do but we need to minimize

482
00:17:50,880 --> 00:17:54,480
that and waste is just like tax except

483
00:17:54,480 --> 00:17:57,919
they're arguably unnecessary activities

484
00:17:57,919 --> 00:18:00,160
so you know if we think about those four

485
00:18:00,160 --> 00:18:01,919
phases of the interlude coding building

486
00:18:01,919 --> 00:18:04,240
testing committee there's only one of

487
00:18:04,240 --> 00:18:07,760
these that actually builds any business

488
00:18:07,760 --> 00:18:09,679
or customer value

489
00:18:09,679 --> 00:18:11,200
that's coding

490
00:18:11,200 --> 00:18:13,039
right everything else building testing

491
00:18:13,039 --> 00:18:15,120
committing is just supporting that right

492
00:18:15,120 --> 00:18:17,520
it's not adding any value to to what we

493
00:18:17,520 --> 00:18:18,240
do

494
00:18:18,240 --> 00:18:20,080
but building and testing we have to do

495
00:18:20,080 --> 00:18:21,760
and they provide feedback to us right if

496
00:18:21,760 --> 00:18:23,440
we try to build our code and it doesn't

497
00:18:23,440 --> 00:18:25,280
build well our compiler gives us

498
00:18:25,280 --> 00:18:27,360
feedback and says dude something went

499
00:18:27,360 --> 00:18:29,679
wrong you've got an error on line 157

500
00:18:29,679 --> 00:18:31,520
you need to fix it right same thing with

501
00:18:31,520 --> 00:18:33,120
testing right testing is all about

502
00:18:33,120 --> 00:18:35,520
giving us feedback about the code that

503
00:18:35,520 --> 00:18:37,039
we wrote

504
00:18:37,039 --> 00:18:38,080
committing

505
00:18:38,080 --> 00:18:40,480
is a necessary evil right it doesn't

506
00:18:40,480 --> 00:18:42,160
give us feedback it doesn't really

507
00:18:42,160 --> 00:18:44,559
provide value it's just a way for us to

508
00:18:44,559 --> 00:18:47,200
get our code from point a to point b and

509
00:18:47,200 --> 00:18:49,200
it's something that we have to do right

510
00:18:49,200 --> 00:18:51,120
and the inner loop model would argue

511
00:18:51,120 --> 00:18:53,840
that that's a waste

512
00:18:53,840 --> 00:18:54,880
so

513
00:18:54,880 --> 00:18:56,880
my argument here is that conventional

514
00:18:56,880 --> 00:19:00,320
appsec tooling introduces large amounts

515
00:19:00,320 --> 00:19:03,520
of tax and waste

516
00:19:03,520 --> 00:19:05,840
and just like real life right you don't

517
00:19:05,840 --> 00:19:07,840
want to pay a whole bunch of taxes

518
00:19:07,840 --> 00:19:10,400
right same thing an inner loop right so

519
00:19:10,400 --> 00:19:11,600
how can we

520
00:19:11,600 --> 00:19:14,320
do appsec without creating

521
00:19:14,320 --> 00:19:16,720
a bunch of tax and waste

522
00:19:16,720 --> 00:19:18,240
so what i'd like to do now is just kind

523
00:19:18,240 --> 00:19:19,600
of have some thought

524
00:19:19,600 --> 00:19:21,600
exercises and you know when we started

525
00:19:21,600 --> 00:19:24,160
building this at ui you know this is we

526
00:19:24,160 --> 00:19:26,320
had a lot of conversations around this

527
00:19:26,320 --> 00:19:28,640
because you know a bunch of smart people

528
00:19:28,640 --> 00:19:30,880
uh people who've been consulting for 10

529
00:19:30,880 --> 00:19:33,440
20 years right many of us uh you know so

530
00:19:33,440 --> 00:19:35,120
actually you know many of us came from

531
00:19:35,120 --> 00:19:37,280
aspect security you know working with

532
00:19:37,280 --> 00:19:39,200
you know bright minds like jeff williams

533
00:19:39,200 --> 00:19:42,320
and dave wickers um you know ey actually

534
00:19:42,320 --> 00:19:46,080
bought aspect security in 2017 um and we

535
00:19:46,080 --> 00:19:48,799
built out ey zapsec program so a lot of

536
00:19:48,799 --> 00:19:51,600
just very smart you know founders of oh

537
00:19:51,600 --> 00:19:53,679
wasp and such you know working on this

538
00:19:53,679 --> 00:19:55,280
and just kind of thinking okay well

539
00:19:55,280 --> 00:19:57,520
let's start taking some of these things

540
00:19:57,520 --> 00:19:59,760
we do in apsec and just try to answer

541
00:19:59,760 --> 00:20:01,440
the question of

542
00:20:01,440 --> 00:20:04,240
is it a good inner loop activity so

543
00:20:04,240 --> 00:20:05,840
instead of saying right because the

544
00:20:05,840 --> 00:20:08,480
difference here is today we say all

545
00:20:08,480 --> 00:20:10,960
right well how do we shift left

546
00:20:10,960 --> 00:20:12,799
cool well let's take um pick your

547
00:20:12,799 --> 00:20:14,960
favorite or least favorite sass product

548
00:20:14,960 --> 00:20:17,440
um that has a developer ide integration

549
00:20:17,440 --> 00:20:18,559
so we're going to give it to our

550
00:20:18,559 --> 00:20:21,919
developers good job we've shifted left

551
00:20:21,919 --> 00:20:23,760
we wrote a wiki for our developers that

552
00:20:23,760 --> 00:20:25,919
they're never going to read good job

553
00:20:25,919 --> 00:20:27,760
we've shifted left but have we really

554
00:20:27,760 --> 00:20:29,760
actually moved the needle

555
00:20:29,760 --> 00:20:31,280
we haven't right

556
00:20:31,280 --> 00:20:34,640
we've really just burdened developers

557
00:20:34,640 --> 00:20:37,039
so let's talk about static analysis so

558
00:20:37,039 --> 00:20:39,600
um love to have some interaction here

559
00:20:39,600 --> 00:20:41,679
right so you know using the concepts of

560
00:20:41,679 --> 00:20:43,280
tax and waste and the things that we've

561
00:20:43,280 --> 00:20:45,120
introduced today

562
00:20:45,120 --> 00:20:47,360
do you think static analysis would be a

563
00:20:47,360 --> 00:20:51,120
good activity for the inner loop

564
00:20:52,000 --> 00:20:55,360
any any thoughts if it was fast enough

565
00:20:55,360 --> 00:20:58,400
if it was fast enough okay

566
00:20:58,400 --> 00:21:00,480
any other thoughts or opinions

567
00:21:00,480 --> 00:21:03,039
it generates a fair lack of false

568
00:21:03,039 --> 00:21:05,840
positive false negatives

569
00:21:05,840 --> 00:21:08,080
all right

570
00:21:09,600 --> 00:21:11,600
i wouldn't in its current form because

571
00:21:11,600 --> 00:21:13,760
the majority of sac analysis focuses on

572
00:21:13,760 --> 00:21:16,480
finding lots of things all at the same

573
00:21:16,480 --> 00:21:17,440
time

574
00:21:17,440 --> 00:21:18,240
if

575
00:21:18,240 --> 00:21:20,080
from a conceptual standpoint if you

576
00:21:20,080 --> 00:21:21,760
could look for one thing really

577
00:21:21,760 --> 00:21:24,240
accurately in that interlude

578
00:21:24,240 --> 00:21:24,960
and

579
00:21:24,960 --> 00:21:26,720
and do it then it would make sense to do

580
00:21:26,720 --> 00:21:28,320
that one thing that's not really how any

581
00:21:28,320 --> 00:21:30,640
of the commercials are structured

582
00:21:30,640 --> 00:21:31,679
they're structured in an

583
00:21:31,679 --> 00:21:33,760
assessment-centric approach if you could

584
00:21:33,760 --> 00:21:35,520
do it in an atomic approach where you're

585
00:21:35,520 --> 00:21:37,760
looking for one thing and you want to

586
00:21:37,760 --> 00:21:40,320
eradicate that one thing at a time uh

587
00:21:40,320 --> 00:21:41,679
then then that would make sense for the

588
00:21:41,679 --> 00:21:43,120
interview but i don't think any of the

589
00:21:43,120 --> 00:21:44,159
tools today

590
00:21:44,159 --> 00:21:46,240
are organized that way to make it make

591
00:21:46,240 --> 00:21:47,840
sense

592
00:21:47,840 --> 00:21:50,400
yeah yeah i'd agree with pretty much all

593
00:21:50,400 --> 00:21:52,000
of that right so and again there's no

594
00:21:52,000 --> 00:21:53,600
right or wrong answers to any of this

595
00:21:53,600 --> 00:21:56,240
this is really just thought exercises so

596
00:21:56,240 --> 00:21:58,880
uh i would argue static analysis is not

597
00:21:58,880 --> 00:22:01,120
a good inner loop tool right because the

598
00:22:01,120 --> 00:22:03,360
long scan times lead to

599
00:22:03,360 --> 00:22:04,559
tax

600
00:22:04,559 --> 00:22:08,320
false positives are an absolute waste

601
00:22:08,320 --> 00:22:10,480
um you know it takes considerable

602
00:22:10,480 --> 00:22:12,720
expertise to actually run the tools and

603
00:22:12,720 --> 00:22:14,480
configure them properly which is an

604
00:22:14,480 --> 00:22:16,400
additional tax we have the scan

605
00:22:16,400 --> 00:22:19,120
configuration itself which is even more

606
00:22:19,120 --> 00:22:21,280
tax right so if we measure the amount of

607
00:22:21,280 --> 00:22:23,039
tax and waste that this tool would

608
00:22:23,039 --> 00:22:25,840
generate um you know i believe that it's

609
00:22:25,840 --> 00:22:29,439
not a good fit for the inner loop

610
00:22:30,240 --> 00:22:32,080
what about dast

611
00:22:32,080 --> 00:22:36,199
any any thoughts on dust

612
00:22:42,880 --> 00:22:44,960
it's kind of the same thing right

613
00:22:44,960 --> 00:22:47,360
so you'd have dest

614
00:22:47,360 --> 00:22:49,760
first of all it has to be a web app and

615
00:22:49,760 --> 00:22:51,440
it has to be running

616
00:22:51,440 --> 00:22:53,679
right we can't just pull a rip cord on a

617
00:22:53,679 --> 00:22:55,679
source code repository or something and

618
00:22:55,679 --> 00:22:57,440
have it go out or take a look at our

619
00:22:57,440 --> 00:23:00,240
pull request the app has to be deployed

620
00:23:00,240 --> 00:23:03,440
and configured and running right i

621
00:23:03,440 --> 00:23:06,480
love picking on das tools just because i

622
00:23:06,480 --> 00:23:07,360
hate

623
00:23:07,360 --> 00:23:09,840
the messaging uh around them and the way

624
00:23:09,840 --> 00:23:12,000
the vendors present them right i've been

625
00:23:12,000 --> 00:23:13,520
doing this long enough i'm jaded on just

626
00:23:13,520 --> 00:23:17,679
about every tool but um

627
00:23:17,760 --> 00:23:19,520
when i talk about defsec ops right and

628
00:23:19,520 --> 00:23:20,720
this is another talk right i think i

629
00:23:20,720 --> 00:23:22,240
talked about this here three years ago

630
00:23:22,240 --> 00:23:23,600
right i always frame it i used to frame

631
00:23:23,600 --> 00:23:26,159
it as comms right now i'm a big fan of

632
00:23:26,159 --> 00:23:28,720
the calmer methodology from the scaled

633
00:23:28,720 --> 00:23:31,360
agile framework of culture automation

634
00:23:31,360 --> 00:23:34,640
lean measurement and what is it recovery

635
00:23:34,640 --> 00:23:38,000
um and to me i believe that all five of

636
00:23:38,000 --> 00:23:41,200
those key pillars apply to devsecops and

637
00:23:41,200 --> 00:23:44,559
appsec at scale as well right and so if

638
00:23:44,559 --> 00:23:46,320
the only thing that we're doing with our

639
00:23:46,320 --> 00:23:48,720
tooling is automating it which is what

640
00:23:48,720 --> 00:23:50,640
many of our vendors are doing then we're

641
00:23:50,640 --> 00:23:52,640
only hitting one of those five key

642
00:23:52,640 --> 00:23:55,600
pillars of devops or devsecops right and

643
00:23:55,600 --> 00:23:57,200
again getting back to this message of

644
00:23:57,200 --> 00:23:59,520
not adding a lot of value and every das

645
00:23:59,520 --> 00:24:01,600
tool out there today now has an

646
00:24:01,600 --> 00:24:03,440
integration into

647
00:24:03,440 --> 00:24:05,520
the build pipelines right and they all

648
00:24:05,520 --> 00:24:07,600
advertise that it's a def sec ops tool

649
00:24:07,600 --> 00:24:09,760
because we can scan your application as

650
00:24:09,760 --> 00:24:12,720
part of your deployment process well

651
00:24:12,720 --> 00:24:14,240
most of the organizations that i've

652
00:24:14,240 --> 00:24:16,640
worked with in my consulting career are

653
00:24:16,640 --> 00:24:19,679
not at a devops level of maturity

654
00:24:19,679 --> 00:24:21,679
where they can do an automated

655
00:24:21,679 --> 00:24:24,640
deployment to an ephemeral server

656
00:24:24,640 --> 00:24:26,960
you know and configure authentication

657
00:24:26,960 --> 00:24:29,200
and access control and things of that

658
00:24:29,200 --> 00:24:30,880
nature right and if you're not at a

659
00:24:30,880 --> 00:24:33,120
level of maturity where you can do that

660
00:24:33,120 --> 00:24:35,200
it really doesn't make sense to have das

661
00:24:35,200 --> 00:24:38,000
even in your pipeline at all because

662
00:24:38,000 --> 00:24:39,440
otherwise you're still just doing the

663
00:24:39,440 --> 00:24:41,919
same thing which is you know configuring

664
00:24:41,919 --> 00:24:43,840
it to run against a static host with

665
00:24:43,840 --> 00:24:46,000
static credentials or something of that

666
00:24:46,000 --> 00:24:47,600
nature

667
00:24:47,600 --> 00:24:50,880
um we do have you know compared to sas

668
00:24:50,880 --> 00:24:53,279
less waste in our output

669
00:24:53,279 --> 00:24:56,559
because the results of dast are more

670
00:24:56,559 --> 00:24:58,799
accurate right so so that is kind of a

671
00:24:58,799 --> 00:25:01,279
small plus to it we do have varying scan

672
00:25:01,279 --> 00:25:03,120
times right you know i've worked with

673
00:25:03,120 --> 00:25:05,919
clients that had scan times of a week

674
00:25:05,919 --> 00:25:07,679
with das tools right and that doesn't

675
00:25:07,679 --> 00:25:09,360
make sense in anybody who says they're

676
00:25:09,360 --> 00:25:11,600
doing agile and the resource can results

677
00:25:11,600 --> 00:25:13,360
can be inconsistent right that's another

678
00:25:13,360 --> 00:25:15,279
common flaw with these tools is you run

679
00:25:15,279 --> 00:25:17,200
a report once and you get a set of

680
00:25:17,200 --> 00:25:19,039
findings and you run it again and the

681
00:25:19,039 --> 00:25:20,799
findings don't match from report a to

682
00:25:20,799 --> 00:25:23,120
report b because they're dynamically

683
00:25:23,120 --> 00:25:25,279
generating you know the malicious input

684
00:25:25,279 --> 00:25:27,679
that it's sending into the http request

685
00:25:27,679 --> 00:25:29,760
so sometimes you hit these edge cases

686
00:25:29,760 --> 00:25:31,840
right or maybe one time you know it

687
00:25:31,840 --> 00:25:33,760
sends that perfect cross-site scripting

688
00:25:33,760 --> 00:25:36,000
test and gets a result but the next five

689
00:25:36,000 --> 00:25:37,760
scans it doesn't and it looks like you

690
00:25:37,760 --> 00:25:40,720
fixed the problem but you really didn't

691
00:25:40,720 --> 00:25:42,559
and so even if tax and waste were

692
00:25:42,559 --> 00:25:43,919
minimized

693
00:25:43,919 --> 00:25:45,440
we've got to have the app deployed so

694
00:25:45,440 --> 00:25:47,200
typically that's going to put us into

695
00:25:47,200 --> 00:25:50,320
the outer loop with dast

696
00:25:50,559 --> 00:25:53,760
all right manual pin testing

697
00:25:53,760 --> 00:25:56,320
no right it's uh we're not anywhere

698
00:25:56,320 --> 00:26:00,080
close with manual pin testing um

699
00:26:00,080 --> 00:26:02,400
what about software composition analysis

700
00:26:02,400 --> 00:26:04,799
any any thoughts on software composition

701
00:26:04,799 --> 00:26:07,799
analysis

702
00:26:10,880 --> 00:26:13,279
good the best time to identify a poor

703
00:26:13,279 --> 00:26:15,120
choice is right after you made it not

704
00:26:15,120 --> 00:26:18,559
two months after you started using it

705
00:26:20,000 --> 00:26:20,799
yeah

706
00:26:20,799 --> 00:26:22,720
so

707
00:26:22,720 --> 00:26:24,720
uh kind of when we wrap this up here in

708
00:26:24,720 --> 00:26:26,320
a little bit right we'll see software

709
00:26:26,320 --> 00:26:29,039
composition analysis is an item that can

710
00:26:29,039 --> 00:26:31,520
exist in the inner loop my problem with

711
00:26:31,520 --> 00:26:33,520
it is that's not how most people are

712
00:26:33,520 --> 00:26:35,600
using it right most of the tools that we

713
00:26:35,600 --> 00:26:37,919
have today right they're being deployed

714
00:26:37,919 --> 00:26:39,760
in kind of a scanning mode you know

715
00:26:39,760 --> 00:26:42,159
where once a day or once a week or when

716
00:26:42,159 --> 00:26:44,960
a new cve comes out right we configure

717
00:26:44,960 --> 00:26:46,960
white source sunotype black duck or

718
00:26:46,960 --> 00:26:49,120
whatever to go scan a bunch of our

719
00:26:49,120 --> 00:26:51,200
applications and tell us if it found

720
00:26:51,200 --> 00:26:52,960
that particular thing right it's if

721
00:26:52,960 --> 00:26:56,880
we're running them very uh reactively

722
00:26:56,880 --> 00:26:58,799
another big thing with with the sky

723
00:26:58,799 --> 00:27:01,039
tools is it's difficult to determine the

724
00:27:01,039 --> 00:27:03,200
actual impact uh and i hate to keep

725
00:27:03,200 --> 00:27:04,960
referring back to jeff williams talk but

726
00:27:04,960 --> 00:27:06,559
he made a lot of great points right and

727
00:27:06,559 --> 00:27:08,480
especially in my high maturity clients

728
00:27:08,480 --> 00:27:10,240
particularly in the financial services

729
00:27:10,240 --> 00:27:11,279
space

730
00:27:11,279 --> 00:27:13,919
right they they push back against these

731
00:27:13,919 --> 00:27:15,919
type of tools because their developers

732
00:27:15,919 --> 00:27:18,399
have been doing apsec for a long time

733
00:27:18,399 --> 00:27:20,399
and so when security comes in and says

734
00:27:20,399 --> 00:27:22,159
hey did you know this library that

735
00:27:22,159 --> 00:27:24,480
you're implemented has a cv it has a

736
00:27:24,480 --> 00:27:27,360
cvss score of 10 in the cve in it you

737
00:27:27,360 --> 00:27:28,880
need to update that

738
00:27:28,880 --> 00:27:31,039
well developers are generally smart they

739
00:27:31,039 --> 00:27:32,960
don't say okay cool let me go take a

740
00:27:32,960 --> 00:27:35,120
month and re-architect my app or however

741
00:27:35,120 --> 00:27:36,559
long they say

742
00:27:36,559 --> 00:27:39,200
well am i actually using the vulnerable

743
00:27:39,200 --> 00:27:40,559
library

744
00:27:40,559 --> 00:27:42,640
um they're the vulnerable code right and

745
00:27:42,640 --> 00:27:44,240
how many of you in this room have read a

746
00:27:44,240 --> 00:27:46,399
cve before

747
00:27:46,399 --> 00:27:49,360
right almost everybody

748
00:27:49,360 --> 00:27:51,679
most the time a cve does not tell you

749
00:27:51,679 --> 00:27:54,240
how to reproduce the vulnerability

750
00:27:54,240 --> 00:27:56,000
and it doesn't tell you where the

751
00:27:56,000 --> 00:27:59,360
vulnerable code is in the library right

752
00:27:59,360 --> 00:28:01,279
it's it's basically a black hole and so

753
00:28:01,279 --> 00:28:03,279
you're telling developers that you have

754
00:28:03,279 --> 00:28:05,360
a problem in a library and you have to

755
00:28:05,360 --> 00:28:07,200
go and you have to patch it and you have

756
00:28:07,200 --> 00:28:09,440
to update but we have no way to prove to

757
00:28:09,440 --> 00:28:11,200
you whether or not you're actually using

758
00:28:11,200 --> 00:28:12,799
that vulnerable code

759
00:28:12,799 --> 00:28:14,559
right and in what world does that make

760
00:28:14,559 --> 00:28:15,520
sense

761
00:28:15,520 --> 00:28:17,600
it really doesn't if you're a developer

762
00:28:17,600 --> 00:28:19,600
right so getting back to punishing our

763
00:28:19,600 --> 00:28:21,120
developers

764
00:28:21,120 --> 00:28:22,880
we have had a lot of really cool

765
00:28:22,880 --> 00:28:25,120
innovations in these tools in the last

766
00:28:25,120 --> 00:28:27,440
year or two but not a lot of people are

767
00:28:27,440 --> 00:28:28,960
using them right and this is where the

768
00:28:28,960 --> 00:28:31,039
interloop stuff comes in right so for

769
00:28:31,039 --> 00:28:32,000
one

770
00:28:32,000 --> 00:28:34,320
a lot of these tools can now do kind of

771
00:28:34,320 --> 00:28:36,799
this real quick scanning as you make

772
00:28:36,799 --> 00:28:39,200
changes to your library right you know

773
00:28:39,200 --> 00:28:41,760
so if you go out and you add a line to

774
00:28:41,760 --> 00:28:44,159
your pom file you know for your maven

775
00:28:44,159 --> 00:28:46,720
build or if you go get a nuget library a

776
00:28:46,720 --> 00:28:49,279
lot of these integrations can now say oh

777
00:28:49,279 --> 00:28:51,200
hey did you know that that library that

778
00:28:51,200 --> 00:28:53,520
you're pulling in right now you know has

779
00:28:53,520 --> 00:28:55,760
some key concerns right maybe you should

780
00:28:55,760 --> 00:28:58,880
consider using this version um that

781
00:28:58,880 --> 00:29:01,039
doesn't have these issues right would

782
00:29:01,039 --> 00:29:03,360
you like to do that instead yes or no

783
00:29:03,360 --> 00:29:05,440
cool let's let's swap that for you right

784
00:29:05,440 --> 00:29:07,440
that can be very valuable

785
00:29:07,440 --> 00:29:09,279
um and also you know some of the newer

786
00:29:09,279 --> 00:29:12,080
tools right now i love this right we'll

787
00:29:12,080 --> 00:29:13,679
actually do pull requests for you so

788
00:29:13,679 --> 00:29:16,080
like snick has a new feature that's been

789
00:29:16,080 --> 00:29:18,480
added recently where if you have snick

790
00:29:18,480 --> 00:29:21,120
and it's kind of outer loopy but if it's

791
00:29:21,120 --> 00:29:24,399
in your ci cd pipeline and it detects a

792
00:29:24,399 --> 00:29:26,720
vulnerable library that has been pushed

793
00:29:26,720 --> 00:29:28,240
in that pull request

794
00:29:28,240 --> 00:29:32,240
it will actually break the build

795
00:29:32,320 --> 00:29:34,799
put in the new library for you and then

796
00:29:34,799 --> 00:29:37,200
create a pull request and send it out

797
00:29:37,200 --> 00:29:39,200
for you to approve and if you approve

798
00:29:39,200 --> 00:29:40,399
that pull request

799
00:29:40,399 --> 00:29:42,640
it'll actually update to a

800
00:29:42,640 --> 00:29:45,279
non-vulnerable version of that library

801
00:29:45,279 --> 00:29:48,240
for you right now it's a little scary

802
00:29:48,240 --> 00:29:49,840
because you know who knows what other

803
00:29:49,840 --> 00:29:51,840
issues that can introduce you know kind

804
00:29:51,840 --> 00:29:54,000
of like i asked right you better make

805
00:29:54,000 --> 00:29:56,399
sure you have a high maturity in qa

806
00:29:56,399 --> 00:29:57,919
testing you know if you're going to do

807
00:29:57,919 --> 00:29:59,520
something like that right so you can

808
00:29:59,520 --> 00:30:01,919
catch those issues if it does

809
00:30:01,919 --> 00:30:03,760
you know bring in some unwanted features

810
00:30:03,760 --> 00:30:08,120
or something like that into your code

811
00:30:08,720 --> 00:30:11,120
uh security is code um is anybody i

812
00:30:11,120 --> 00:30:12,720
guess kind of show of hands right who

813
00:30:12,720 --> 00:30:16,399
who's familiar with securities code

814
00:30:16,480 --> 00:30:18,399
okay not too many so

815
00:30:18,399 --> 00:30:19,600
to me

816
00:30:19,600 --> 00:30:22,960
security as code is really

817
00:30:22,960 --> 00:30:24,720
doing security

818
00:30:24,720 --> 00:30:27,279
inside of our qa test right it's kind of

819
00:30:27,279 --> 00:30:30,000
the simplified version of it um

820
00:30:30,000 --> 00:30:31,120
again this could be a whole other

821
00:30:31,120 --> 00:30:32,960
conference talk but you know to me it's

822
00:30:32,960 --> 00:30:34,880
much deeper than that right because it's

823
00:30:34,880 --> 00:30:37,679
all about how you know we take security

824
00:30:37,679 --> 00:30:40,159
requirements um and one make sure we're

825
00:30:40,159 --> 00:30:42,640
doing them making sure we have them uh

826
00:30:42,640 --> 00:30:45,679
having agreed upon security controls

827
00:30:45,679 --> 00:30:48,240
that can enforce and implement those

828
00:30:48,240 --> 00:30:51,919
requirements for us the qa test case

829
00:30:51,919 --> 00:30:54,320
that then validates that that control

830
00:30:54,320 --> 00:30:56,399
has been implemented

831
00:30:56,399 --> 00:30:58,880
and then you know the actual test case

832
00:30:58,880 --> 00:31:01,519
executing right so to me this is part of

833
00:31:01,519 --> 00:31:03,760
the key of defsec ops right you know

834
00:31:03,760 --> 00:31:05,919
this gives that traceability from

835
00:31:05,919 --> 00:31:08,480
requirements all the way to test to

836
00:31:08,480 --> 00:31:10,399
reporting and most importantly it

837
00:31:10,399 --> 00:31:13,120
focuses on the control as opposed to the

838
00:31:13,120 --> 00:31:15,840
vulnerability so um

839
00:31:15,840 --> 00:31:17,840
i love using cross-site scripting as an

840
00:31:17,840 --> 00:31:19,919
example of this right because you know

841
00:31:19,919 --> 00:31:22,480
if a ciso comes to me today and ever

842
00:31:22,480 --> 00:31:24,080
asks hey

843
00:31:24,080 --> 00:31:26,799
can can you say with confidence that

844
00:31:26,799 --> 00:31:28,640
there is no cross-site scripting

845
00:31:28,640 --> 00:31:31,760
vulnerabilities in this application

846
00:31:31,760 --> 00:31:34,000
right never in my career will i be able

847
00:31:34,000 --> 00:31:36,320
to say with a hundred percent certainty

848
00:31:36,320 --> 00:31:38,320
no there are not cross-site scripting

849
00:31:38,320 --> 00:31:40,000
vulnerabilities in your app right i can

850
00:31:40,000 --> 00:31:42,000
say some fluffy stuff like hey we did a

851
00:31:42,000 --> 00:31:44,080
pen test and we didn't find any or we

852
00:31:44,080 --> 00:31:46,159
ran a tool and we didn't find any but

853
00:31:46,159 --> 00:31:48,480
does that mean that there's not any

854
00:31:48,480 --> 00:31:50,799
it absolutely does not right but with

855
00:31:50,799 --> 00:31:52,320
security as code

856
00:31:52,320 --> 00:31:55,519
we can agree with the cso on a control

857
00:31:55,519 --> 00:31:57,760
that would prevent cross-site scripting

858
00:31:57,760 --> 00:31:58,799
um

859
00:31:58,799 --> 00:32:00,799
so let's say you know it's a i don't

860
00:32:00,799 --> 00:32:02,960
know a library or you know maybe the

861
00:32:02,960 --> 00:32:04,720
whatever microsoft calls it now right it

862
00:32:04,720 --> 00:32:07,440
used to be the anti-xss framework inside

863
00:32:07,440 --> 00:32:10,080
of.net right we can agree on

864
00:32:10,080 --> 00:32:12,080
compensating controls that prevent that

865
00:32:12,080 --> 00:32:13,360
vulnerability

866
00:32:13,360 --> 00:32:16,399
well then we can use security as code

867
00:32:16,399 --> 00:32:19,360
to prove that that control has been

868
00:32:19,360 --> 00:32:22,960
implemented and configured properly

869
00:32:22,960 --> 00:32:24,799
and validate that the developer turn

870
00:32:24,799 --> 00:32:27,200
those controls on and they're using them

871
00:32:27,200 --> 00:32:29,360
right and this has a lot of downstream

872
00:32:29,360 --> 00:32:31,600
benefits right for one we're looking at

873
00:32:31,600 --> 00:32:34,720
controls not hunting an endless list of

874
00:32:34,720 --> 00:32:36,480
vulnerabilities that we'll never catch

875
00:32:36,480 --> 00:32:38,240
up with um

876
00:32:38,240 --> 00:32:39,760
but further

877
00:32:39,760 --> 00:32:41,600
right if cso comes back and asks that

878
00:32:41,600 --> 00:32:43,360
question about hey do i have cross-site

879
00:32:43,360 --> 00:32:45,600
scripting vulnerabilities i can look at

880
00:32:45,600 --> 00:32:47,200
the test results and i can say with

881
00:32:47,200 --> 00:32:49,360
confidence that

882
00:32:49,360 --> 00:32:51,440
we agreed on this control to prevent

883
00:32:51,440 --> 00:32:53,600
cross-site scripting and i can show you

884
00:32:53,600 --> 00:32:57,039
with 100 certainty that this control has

885
00:32:57,039 --> 00:32:59,679
been implemented and configured properly

886
00:32:59,679 --> 00:33:01,279
so we're theoretically safe from

887
00:33:01,279 --> 00:33:03,519
cross-site scripting right and it also

888
00:33:03,519 --> 00:33:05,039
takes the burden off of some of these

889
00:33:05,039 --> 00:33:06,880
other things we do right if we if we

890
00:33:06,880 --> 00:33:08,480
agreed on a security control and we

891
00:33:08,480 --> 00:33:10,320
proved that it's there do we need to

892
00:33:10,320 --> 00:33:12,080
test for cross-site scripting in a pen

893
00:33:12,080 --> 00:33:14,240
test anymore

894
00:33:14,240 --> 00:33:16,159
probably not right do we need to

895
00:33:16,159 --> 00:33:18,240
configure our sas tool to look for

896
00:33:18,240 --> 00:33:20,080
cross-site scripting

897
00:33:20,080 --> 00:33:21,519
probably not right it's just going to

898
00:33:21,519 --> 00:33:23,440
give us a bunch of false positives

899
00:33:23,440 --> 00:33:24,799
anyway because it's probably not going

900
00:33:24,799 --> 00:33:27,200
to detect your library um so it's just

901
00:33:27,200 --> 00:33:29,039
going to be a lot more tax and waste so

902
00:33:29,039 --> 00:33:30,799
that's kind of a quick intro to security

903
00:33:30,799 --> 00:33:33,120
as code um but you know to me that's

904
00:33:33,120 --> 00:33:35,440
it's going to be kind of our lifesaver

905
00:33:35,440 --> 00:33:38,399
in the next few years with devsecopt

906
00:33:38,399 --> 00:33:39,200
so

907
00:33:39,200 --> 00:33:41,120
uh securities code right it can be in

908
00:33:41,120 --> 00:33:44,159
both the inner and the outer loop right

909
00:33:44,159 --> 00:33:46,320
because some of if we think of qa

910
00:33:46,320 --> 00:33:47,679
testing

911
00:33:47,679 --> 00:33:49,519
it depends on the type of qa test that

912
00:33:49,519 --> 00:33:50,880
we're doing right you know to your point

913
00:33:50,880 --> 00:33:52,640
about smoke test right if we're doing

914
00:33:52,640 --> 00:33:55,039
you know unit test functional testing of

915
00:33:55,039 --> 00:33:57,440
security controls well yeah those can

916
00:33:57,440 --> 00:33:59,679
absolutely be in the inner loop and the

917
00:33:59,679 --> 00:34:01,919
developer can run those locally but a

918
00:34:01,919 --> 00:34:03,600
lot of our tests you know integration

919
00:34:03,600 --> 00:34:06,799
test and end test etc you know typically

920
00:34:06,799 --> 00:34:09,520
our app has to be out you know deployed

921
00:34:09,520 --> 00:34:11,040
or you know with all of its other

922
00:34:11,040 --> 00:34:13,119
controls out there right so that kind of

923
00:34:13,119 --> 00:34:15,918
by nature has to be in the in the outer

924
00:34:15,918 --> 00:34:16,800
loop

925
00:34:16,800 --> 00:34:19,199
um and then we can even execute these as

926
00:34:19,199 --> 00:34:20,960
a pre-commit hook so you know if we

927
00:34:20,960 --> 00:34:22,879
think about that shift from the inner to

928
00:34:22,879 --> 00:34:24,879
outer loop you know we can use security

929
00:34:24,879 --> 00:34:27,520
as code as almost a quality assurance

930
00:34:27,520 --> 00:34:30,000
gate from getting from the inner loop to

931
00:34:30,000 --> 00:34:33,399
the outer loop

932
00:34:34,159 --> 00:34:35,599
all right so let's let's talk a little

933
00:34:35,599 --> 00:34:38,320
more about how we can actually use this

934
00:34:38,320 --> 00:34:40,079
in the real world

935
00:34:40,079 --> 00:34:41,918
so first i'm gonna have kind of again my

936
00:34:41,918 --> 00:34:44,320
background being big four and ey this is

937
00:34:44,320 --> 00:34:45,679
kind of my

938
00:34:45,679 --> 00:34:48,239
fluffy buzzword slide right so you're

939
00:34:48,239 --> 00:34:49,839
performing security inside the inner

940
00:34:49,839 --> 00:34:51,599
loop drives a shift left culture and

941
00:34:51,599 --> 00:34:53,440
shortens developer feedback loops to

942
00:34:53,440 --> 00:34:55,679
release code at high velocity by

943
00:34:55,679 --> 00:34:58,720
leveraging secure by design principles

944
00:34:58,720 --> 00:35:00,079
and i would challenge you to find

945
00:35:00,079 --> 00:35:02,000
anything more buzz wordy than that here

946
00:35:02,000 --> 00:35:04,240
today

947
00:35:04,800 --> 00:35:06,800
all right now again all our big four

948
00:35:06,800 --> 00:35:08,640
you're gonna see some slides that have a

949
00:35:08,640 --> 00:35:11,119
lot of words and really crowded content

950
00:35:11,119 --> 00:35:12,960
here right but really what i want you to

951
00:35:12,960 --> 00:35:15,440
walk away with is

952
00:35:15,440 --> 00:35:17,119
that i'm not saying move to the inner

953
00:35:17,119 --> 00:35:19,520
loop forget the outer loop forget

954
00:35:19,520 --> 00:35:21,040
everything you've ever learned about

955
00:35:21,040 --> 00:35:23,280
shift left or anything of that nature

956
00:35:23,280 --> 00:35:25,359
right what i want you to walk away with

957
00:35:25,359 --> 00:35:27,200
is that the inner loop and the outer

958
00:35:27,200 --> 00:35:28,000
loop

959
00:35:28,000 --> 00:35:30,320
can work together right and we we need

960
00:35:30,320 --> 00:35:32,720
to do you know testing and security

961
00:35:32,720 --> 00:35:35,839
activities on kind of both sides on of

962
00:35:35,839 --> 00:35:38,560
that fence right so we want to focus on

963
00:35:38,560 --> 00:35:40,960
you know putting controls and testing

964
00:35:40,960 --> 00:35:43,599
into the inner loop where it makes sense

965
00:35:43,599 --> 00:35:45,599
right because that's our most cost

966
00:35:45,599 --> 00:35:47,680
effective place right is we all know

967
00:35:47,680 --> 00:35:50,400
through shift left to do our security

968
00:35:50,400 --> 00:35:53,599
testing but what i want you to do

969
00:35:53,599 --> 00:35:56,320
is think about it before you do it right

970
00:35:56,320 --> 00:35:58,320
you know take that step back think about

971
00:35:58,320 --> 00:35:59,760
the developers

972
00:35:59,760 --> 00:36:02,079
think about how much tax and how much

973
00:36:02,079 --> 00:36:04,480
waste that you're introducing

974
00:36:04,480 --> 00:36:07,119
by putting that security activity into

975
00:36:07,119 --> 00:36:09,680
the inner loop and then question

976
00:36:09,680 --> 00:36:11,520
if that's something you should be doing

977
00:36:11,520 --> 00:36:13,440
and how much value

978
00:36:13,440 --> 00:36:15,359
you're actually providing to your

979
00:36:15,359 --> 00:36:17,920
organization

980
00:36:17,920 --> 00:36:20,400
and scalability right outer loop testing

981
00:36:20,400 --> 00:36:21,599
is difficult

982
00:36:21,599 --> 00:36:22,960
to scale

983
00:36:22,960 --> 00:36:24,800
again back to jeff williams talk this

984
00:36:24,800 --> 00:36:26,320
morning right we've only got so many

985
00:36:26,320 --> 00:36:28,560
tools they have a lot of problems we

986
00:36:28,560 --> 00:36:30,960
only have so many security engineers

987
00:36:30,960 --> 00:36:33,839
only so many apsec unicorns

988
00:36:33,839 --> 00:36:37,359
only so many champions um etc right and

989
00:36:37,359 --> 00:36:40,160
everything we do in the outer loop is

990
00:36:40,160 --> 00:36:42,400
going to cost resources you know

991
00:36:42,400 --> 00:36:44,480
regardless of whether that's you know an

992
00:36:44,480 --> 00:36:47,040
engineer to integrate it into our 700

993
00:36:47,040 --> 00:36:49,599
pipelines are creating a bunch of

994
00:36:49,599 --> 00:36:51,599
jenkins files that the developers are

995
00:36:51,599 --> 00:36:54,880
going to delete or change anyway or

996
00:36:54,880 --> 00:36:56,400
you know even just impact to our

997
00:36:56,400 --> 00:36:57,839
pipeline right because every one of

998
00:36:57,839 --> 00:36:59,839
these tools we put into our ci cd

999
00:36:59,839 --> 00:37:02,400
pipeline introduces a bottleneck so any

1000
00:37:02,400 --> 00:37:03,920
of those that we can do in the inner

1001
00:37:03,920 --> 00:37:06,800
loop right we can start removing those

1002
00:37:06,800 --> 00:37:08,720
from the outer loop

1003
00:37:08,720 --> 00:37:10,240
and then we want to empower development

1004
00:37:10,240 --> 00:37:13,200
teams so again getting back to developer

1005
00:37:13,200 --> 00:37:16,400
enablement when the secure path is the

1006
00:37:16,400 --> 00:37:19,040
easy path right i'm a big believer that

1007
00:37:19,040 --> 00:37:21,680
it's the path that will be followed

1008
00:37:21,680 --> 00:37:24,640
however we as security practitioners

1009
00:37:24,640 --> 00:37:27,200
often make the secure path the most

1010
00:37:27,200 --> 00:37:29,359
difficult one right you know to the

1011
00:37:29,359 --> 00:37:31,040
point where developers are trying to

1012
00:37:31,040 --> 00:37:33,040
disable our tools or take them out of

1013
00:37:33,040 --> 00:37:34,800
their pipelines or they're questioning

1014
00:37:34,800 --> 00:37:37,040
our results right because we're

1015
00:37:37,040 --> 00:37:39,839
introducing impact to them

1016
00:37:39,839 --> 00:37:42,000
often without any value right so getting

1017
00:37:42,000 --> 00:37:43,520
back to our analogy with software

1018
00:37:43,520 --> 00:37:45,599
composition analysis right we're asking

1019
00:37:45,599 --> 00:37:48,400
them to spend time fixing issues

1020
00:37:48,400 --> 00:37:50,800
that actually aren't an issue at all

1021
00:37:50,800 --> 00:37:52,880
right and then we kind of get all pissed

1022
00:37:52,880 --> 00:37:55,119
off when they push back at us and don't

1023
00:37:55,119 --> 00:37:57,520
want to fix these problems right um you

1024
00:37:57,520 --> 00:37:59,040
know one of my favorite interview

1025
00:37:59,040 --> 00:38:00,560
questions you know that i ask every

1026
00:38:00,560 --> 00:38:02,240
single person that i interview for my

1027
00:38:02,240 --> 00:38:03,599
organization

1028
00:38:03,599 --> 00:38:05,440
is around sql injection right we talked

1029
00:38:05,440 --> 00:38:07,440
about parameterized queries early on in

1030
00:38:07,440 --> 00:38:08,560
this talk

1031
00:38:08,560 --> 00:38:10,000
and the question i always ask them

1032
00:38:10,000 --> 00:38:12,640
especially in pen tester roles is

1033
00:38:12,640 --> 00:38:14,800
i assume you've done a pin test and you

1034
00:38:14,800 --> 00:38:17,280
found a sql injection vulnerability and

1035
00:38:17,280 --> 00:38:18,800
you're sitting there at the readout

1036
00:38:18,800 --> 00:38:20,640
table with the development team telling

1037
00:38:20,640 --> 00:38:22,400
them about all these problems you found

1038
00:38:22,400 --> 00:38:24,880
you're beating up their app their baby

1039
00:38:24,880 --> 00:38:26,400
and then you tell them the same thing

1040
00:38:26,400 --> 00:38:28,079
you know oh wasp or that we've said for

1041
00:38:28,079 --> 00:38:30,640
25 years right hey i found a sql

1042
00:38:30,640 --> 00:38:32,160
injection problem you know you need to

1043
00:38:32,160 --> 00:38:34,480
use a prepared statement parameterize

1044
00:38:34,480 --> 00:38:36,880
query to fix this and you're good so go

1045
00:38:36,880 --> 00:38:38,560
do that and have a good day

1046
00:38:38,560 --> 00:38:40,640
well what if the developer says

1047
00:38:40,640 --> 00:38:41,440
well

1048
00:38:41,440 --> 00:38:43,839
i'm not dumb i took that training class

1049
00:38:43,839 --> 00:38:46,320
i read that owasp site i'm using a

1050
00:38:46,320 --> 00:38:48,720
prepared statement

1051
00:38:48,720 --> 00:38:51,920
right well as as the pen tester

1052
00:38:51,920 --> 00:38:54,320
what's your response to that right and

1053
00:38:54,320 --> 00:38:56,320
the vast majority of the time from pin

1054
00:38:56,320 --> 00:38:58,720
testers they jump they jump to an answer

1055
00:38:58,720 --> 00:39:01,200
like well i'm gonna pull up sql map

1056
00:39:01,200 --> 00:39:02,800
right there in front of them and turn my

1057
00:39:02,800 --> 00:39:04,560
computer around and show them that i

1058
00:39:04,560 --> 00:39:07,040
exploited it so they're not doing that

1059
00:39:07,040 --> 00:39:09,520
right and it automatically turns into a

1060
00:39:09,520 --> 00:39:12,960
combative situation right and really the

1061
00:39:12,960 --> 00:39:14,720
answer that i'm looking for with those

1062
00:39:14,720 --> 00:39:16,240
interviews is for somebody who can think

1063
00:39:16,240 --> 00:39:18,240
outside the box right who understands

1064
00:39:18,240 --> 00:39:20,800
this stuff at a deeper level than just a

1065
00:39:20,800 --> 00:39:23,359
quick obos particle um you know because

1066
00:39:23,359 --> 00:39:26,240
the obvious answer is they didn't use

1067
00:39:26,240 --> 00:39:28,640
that prepared statement properly

1068
00:39:28,640 --> 00:39:30,240
right and i've seen this time and time

1069
00:39:30,240 --> 00:39:31,920
again in organizations right if you're

1070
00:39:31,920 --> 00:39:34,400
not actually parameterizing those inputs

1071
00:39:34,400 --> 00:39:37,119
that prepared statement does not fix sql

1072
00:39:37,119 --> 00:39:39,280
injection right so you know i'm looking

1073
00:39:39,280 --> 00:39:41,599
for pin testers who can take that step

1074
00:39:41,599 --> 00:39:43,839
back right try to work with them to

1075
00:39:43,839 --> 00:39:45,040
figure out

1076
00:39:45,040 --> 00:39:47,200
what they're doing wrong and then help

1077
00:39:47,200 --> 00:39:49,200
them fix it right as opposed to

1078
00:39:49,200 --> 00:39:51,119
immediately turning it around into a

1079
00:39:51,119 --> 00:39:53,520
combative situation

1080
00:39:53,520 --> 00:39:56,000
so inner loop testing right to do enter

1081
00:39:56,000 --> 00:39:57,040
loop right right think about

1082
00:39:57,040 --> 00:40:00,400
self-service security we're doing this

1083
00:40:00,400 --> 00:40:01,920
fairly well today right a lot of

1084
00:40:01,920 --> 00:40:03,520
organizations have been embracing

1085
00:40:03,520 --> 00:40:05,359
self-service security for a very long

1086
00:40:05,359 --> 00:40:07,680
time but take it to the next step right

1087
00:40:07,680 --> 00:40:11,200
and make sure that the tooling is fast

1088
00:40:11,200 --> 00:40:13,359
and it's accurate right and that's not

1089
00:40:13,359 --> 00:40:16,640
something we do a very good job of today

1090
00:40:16,640 --> 00:40:18,880
secure by design right this one's kind

1091
00:40:18,880 --> 00:40:20,560
of a free space right if you're doing

1092
00:40:20,560 --> 00:40:22,880
secure by design you're pretty good here

1093
00:40:22,880 --> 00:40:24,720
and then rapid developer feedback loops

1094
00:40:24,720 --> 00:40:26,240
right so the short the quicker you get

1095
00:40:26,240 --> 00:40:28,800
this information back to the devs right

1096
00:40:28,800 --> 00:40:30,400
you're better you know outer loop

1097
00:40:30,400 --> 00:40:33,200
testing focus on automation first um but

1098
00:40:33,200 --> 00:40:34,880
again don't forget about all those other

1099
00:40:34,880 --> 00:40:36,800
letters within comma as well right you

1100
00:40:36,800 --> 00:40:39,280
know make sure that your tests are lean

1101
00:40:39,280 --> 00:40:41,040
that you're actually measuring things

1102
00:40:41,040 --> 00:40:42,240
right that you're actually driving

1103
00:40:42,240 --> 00:40:44,240
culture and it's not just automation for

1104
00:40:44,240 --> 00:40:46,240
the sake of automation

1105
00:40:46,240 --> 00:40:47,920
focus on depth and rigor right we can't

1106
00:40:47,920 --> 00:40:49,440
get depth and rigor in the out in the

1107
00:40:49,440 --> 00:40:51,520
inner loop do it in the out in the outer

1108
00:40:51,520 --> 00:40:53,040
loop instead

1109
00:40:53,040 --> 00:40:54,960
and then security control testing so

1110
00:40:54,960 --> 00:40:57,760
again you know in your culture focus on

1111
00:40:57,760 --> 00:41:00,160
you know really just the shift away from

1112
00:41:00,160 --> 00:41:02,400
you know how many vulnerabilities can i

1113
00:41:02,400 --> 00:41:04,880
discover to you know what are the

1114
00:41:04,880 --> 00:41:07,280
security controls that we need to have

1115
00:41:07,280 --> 00:41:08,400
in place

1116
00:41:08,400 --> 00:41:09,920
um

1117
00:41:09,920 --> 00:41:11,040
right because i mean we've all run

1118
00:41:11,040 --> 00:41:13,119
static analysis tools before i've run

1119
00:41:13,119 --> 00:41:14,640
them and they come back and say hey you

1120
00:41:14,640 --> 00:41:17,040
have 60 000 vulnerabilities then we've

1121
00:41:17,040 --> 00:41:18,800
got to triage them we put them into a

1122
00:41:18,800 --> 00:41:20,880
pdf report we give them to people they

1123
00:41:20,880 --> 00:41:23,119
never fix it maybe even worse we've

1124
00:41:23,119 --> 00:41:24,800
listened to some def sec ops talks

1125
00:41:24,800 --> 00:41:27,200
before um and we try to take those 60

1126
00:41:27,200 --> 00:41:28,960
000 vulnerabilities and put them into

1127
00:41:28,960 --> 00:41:30,880
their jira system um and tell the

1128
00:41:30,880 --> 00:41:32,560
developers that they're defects and to

1129
00:41:32,560 --> 00:41:34,400
fix them right and again we're not

1130
00:41:34,400 --> 00:41:36,319
enabling developers at that point we're

1131
00:41:36,319 --> 00:41:37,839
pissing them off

1132
00:41:37,839 --> 00:41:39,599
but at some point we have to stop

1133
00:41:39,599 --> 00:41:41,359
chasing vulnerabilities we're never

1134
00:41:41,359 --> 00:41:43,599
going to win as long as we're chasing

1135
00:41:43,599 --> 00:41:46,400
vulnerabilities right so we need to have

1136
00:41:46,400 --> 00:41:48,480
this paradigm shift where we start

1137
00:41:48,480 --> 00:41:51,200
thinking about security controls how to

1138
00:41:51,200 --> 00:41:53,359
implement strong controls how to

1139
00:41:53,359 --> 00:41:55,280
validate that they're there and then

1140
00:41:55,280 --> 00:41:57,440
report them in a way that makes sense

1141
00:41:57,440 --> 00:41:58,319
right

1142
00:41:58,319 --> 00:41:59,680
and a great example of this is

1143
00:41:59,680 --> 00:42:01,520
cross-site request forgery

1144
00:42:01,520 --> 00:42:03,359
um you know cross-site request forgery

1145
00:42:03,359 --> 00:42:04,560
for one

1146
00:42:04,560 --> 00:42:06,079
most people can't explain what it means

1147
00:42:06,079 --> 00:42:08,480
anyway let alone to a developer so every

1148
00:42:08,480 --> 00:42:10,400
time we put it into a report we probably

1149
00:42:10,400 --> 00:42:11,839
put it as a low

1150
00:42:11,839 --> 00:42:13,760
right and the cso says hey what's this

1151
00:42:13,760 --> 00:42:16,079
sea surf thing why is it a low what's it

1152
00:42:16,079 --> 00:42:18,160
mean i don't know but it's a low so you

1153
00:42:18,160 --> 00:42:20,640
don't need to fix it anytime soon uh

1154
00:42:20,640 --> 00:42:22,079
right that's what i've seen time and

1155
00:42:22,079 --> 00:42:23,520
time again throughout my years in

1156
00:42:23,520 --> 00:42:25,920
consulting well

1157
00:42:25,920 --> 00:42:28,960
did you know if you have to comply with

1158
00:42:28,960 --> 00:42:30,960
pci

1159
00:42:30,960 --> 00:42:32,640
and you have a cross-site request

1160
00:42:32,640 --> 00:42:34,480
forgery vulnerability in your

1161
00:42:34,480 --> 00:42:37,040
application you are not in compliance

1162
00:42:37,040 --> 00:42:39,759
with pci

1163
00:42:40,079 --> 00:42:42,960
that's pretty scary right so now instead

1164
00:42:42,960 --> 00:42:44,480
when we have that conversation with the

1165
00:42:44,480 --> 00:42:46,960
cso if we can present this data in such

1166
00:42:46,960 --> 00:42:49,359
a way you know to show that hey we've

1167
00:42:49,359 --> 00:42:51,280
got the c surf thing and we can't really

1168
00:42:51,280 --> 00:42:53,040
explain it to you but now it's a

1169
00:42:53,040 --> 00:42:55,280
critical and it's a red on this pci

1170
00:42:55,280 --> 00:42:57,119
report because we're not in compliance

1171
00:42:57,119 --> 00:43:00,319
with pci so we really need to fix this

1172
00:43:00,319 --> 00:43:01,440
guess what you're going to get the

1173
00:43:01,440 --> 00:43:04,160
support to squash that vulnerability and

1174
00:43:04,160 --> 00:43:05,520
hopefully figure out how to get some

1175
00:43:05,520 --> 00:43:07,200
anti-sea surf controls throughout your

1176
00:43:07,200 --> 00:43:09,839
applications

1177
00:43:11,599 --> 00:43:13,359
all right so you know what tools you

1178
00:43:13,359 --> 00:43:14,880
know do look good

1179
00:43:14,880 --> 00:43:16,640
in the outer loop and this is going to

1180
00:43:16,640 --> 00:43:18,480
be all the stuff

1181
00:43:18,480 --> 00:43:20,000
that you already know right this is all

1182
00:43:20,000 --> 00:43:21,359
the tools that you're already using

1183
00:43:21,359 --> 00:43:24,400
today right static analysis again

1184
00:43:24,400 --> 00:43:26,560
great tool in the outer loop poor tool

1185
00:43:26,560 --> 00:43:29,200
in the inner loop same thing with dast

1186
00:43:29,200 --> 00:43:31,359
right software composition analysis you

1187
00:43:31,359 --> 00:43:32,880
know right there is some inner loop

1188
00:43:32,880 --> 00:43:35,040
functionality there but today largely

1189
00:43:35,040 --> 00:43:36,720
exist in the outer loop

1190
00:43:36,720 --> 00:43:38,400
um even i asked

1191
00:43:38,400 --> 00:43:40,079
right it's we've heard for a long time

1192
00:43:40,079 --> 00:43:42,720
that iast is going to save the world um

1193
00:43:42,720 --> 00:43:45,359
but you know to really get value out of

1194
00:43:45,359 --> 00:43:48,000
a lot of these is tools right we can't

1195
00:43:48,000 --> 00:43:49,599
just go out and buy an eye ass tool and

1196
00:43:49,599 --> 00:43:51,680
dump it into our environment and scan

1197
00:43:51,680 --> 00:43:53,760
and get good results right you know they

1198
00:43:53,760 --> 00:43:56,000
rely on instrumentation and they rely on

1199
00:43:56,000 --> 00:43:58,079
us exercising the application and

1200
00:43:58,079 --> 00:44:00,400
calling that functionality so in other

1201
00:44:00,400 --> 00:44:03,280
words we have to have strong qa testing

1202
00:44:03,280 --> 00:44:05,440
you know within our applications in

1203
00:44:05,440 --> 00:44:08,640
order to have good results for my ass

1204
00:44:08,640 --> 00:44:10,240
which you know again you know take even

1205
00:44:10,240 --> 00:44:12,000
take something new and cool and

1206
00:44:12,000 --> 00:44:14,400
innovative like i asked and kind of puts

1207
00:44:14,400 --> 00:44:18,000
it firmly into the outer loop

1208
00:44:18,000 --> 00:44:20,000
and then manual pen testing right it's a

1209
00:44:20,000 --> 00:44:22,560
manual activity it's always going to be

1210
00:44:22,560 --> 00:44:24,560
in the outer loop

1211
00:44:24,560 --> 00:44:26,160
so so what are some cool things that we

1212
00:44:26,160 --> 00:44:28,560
can do in the outer loop or in the inner

1213
00:44:28,560 --> 00:44:30,240
loop you know to kind of move the needle

1214
00:44:30,240 --> 00:44:32,079
on our program and make things at least

1215
00:44:32,079 --> 00:44:34,160
a little bit better for developers so

1216
00:44:34,160 --> 00:44:35,839
these are just some of the things i've

1217
00:44:35,839 --> 00:44:37,520
come up with you know you might have

1218
00:44:37,520 --> 00:44:40,560
more again this is a thought exercise

1219
00:44:40,560 --> 00:44:42,800
more than than anything right you know i

1220
00:44:42,800 --> 00:44:44,880
don't want you to walk away and say hey

1221
00:44:44,880 --> 00:44:46,640
i need to do all of these things and

1222
00:44:46,640 --> 00:44:48,720
implement them today but just you know

1223
00:44:48,720 --> 00:44:49,920
whenever you're thinking about

1224
00:44:49,920 --> 00:44:52,480
introducing a new tool or a new process

1225
00:44:52,480 --> 00:44:55,119
or anything into your security program

1226
00:44:55,119 --> 00:44:57,520
you know to just step back think about

1227
00:44:57,520 --> 00:44:59,680
this inner outer loop and think about

1228
00:44:59,680 --> 00:45:01,599
the impact that you're going to have to

1229
00:45:01,599 --> 00:45:03,599
your development teams and then make the

1230
00:45:03,599 --> 00:45:05,520
decision based on that right that's what

1231
00:45:05,520 --> 00:45:08,800
this is all about but get get pre uh get

1232
00:45:08,800 --> 00:45:11,119
commit pre-hooks you know can be a great

1233
00:45:11,119 --> 00:45:12,800
inner loop activity right that doesn't

1234
00:45:12,800 --> 00:45:15,200
mean take all of these outer loop things

1235
00:45:15,200 --> 00:45:18,079
and cram them in as a pre-commit hook

1236
00:45:18,079 --> 00:45:19,839
and execute them before that pull

1237
00:45:19,839 --> 00:45:22,480
request you know gets accepted or or

1238
00:45:22,480 --> 00:45:25,040
whatever right um you know

1239
00:45:25,040 --> 00:45:27,760
lightweight testing generally you know

1240
00:45:27,760 --> 00:45:30,960
the smoke test those qa style test cases

1241
00:45:30,960 --> 00:45:34,079
right those very fast accurate you know

1242
00:45:34,079 --> 00:45:37,280
millisecond um you know qa tests that we

1243
00:45:37,280 --> 00:45:39,440
can run to validate controls at that

1244
00:45:39,440 --> 00:45:40,560
point

1245
00:45:40,560 --> 00:45:41,760
all right lightweight software

1246
00:45:41,760 --> 00:45:44,000
composition analysis so we talked about

1247
00:45:44,000 --> 00:45:45,839
how we do have you know some of these

1248
00:45:45,839 --> 00:45:48,319
products now are introducing features

1249
00:45:48,319 --> 00:45:50,000
where they can test so they look at your

1250
00:45:50,000 --> 00:45:52,720
pom files when you drop a new library in

1251
00:45:52,720 --> 00:45:55,440
there you nougat chocolatey your npm

1252
00:45:55,440 --> 00:45:57,520
whatever it may be right and when the

1253
00:45:57,520 --> 00:46:00,000
developer makes that change to that

1254
00:46:00,000 --> 00:46:03,280
configuration let them know at that time

1255
00:46:03,280 --> 00:46:05,520
that they have introduced a library that

1256
00:46:05,520 --> 00:46:06,640
may have

1257
00:46:06,640 --> 00:46:08,480
a vulnerability in it and that there is

1258
00:46:08,480 --> 00:46:10,319
a safe version available that they can

1259
00:46:10,319 --> 00:46:12,640
use right we're not introducing tax

1260
00:46:12,640 --> 00:46:13,599
we're

1261
00:46:13,599 --> 00:46:16,800
arguably not introducing waste

1262
00:46:16,800 --> 00:46:18,240
and it's a change that they can make

1263
00:46:18,240 --> 00:46:19,599
immediately without having to

1264
00:46:19,599 --> 00:46:23,040
re-architect their app hopefully

1265
00:46:23,440 --> 00:46:25,200
continuous security lenders spell

1266
00:46:25,200 --> 00:46:27,040
checkers right to be clear i don't think

1267
00:46:27,040 --> 00:46:28,800
these tools are here today right you

1268
00:46:28,800 --> 00:46:30,400
know getting back to you know our

1269
00:46:30,400 --> 00:46:33,520
earlier messaging about um

1270
00:46:33,520 --> 00:46:35,200
you know taking the developers out of

1271
00:46:35,200 --> 00:46:37,040
the moment losing 22 minutes of

1272
00:46:37,040 --> 00:46:39,119
productivity every time we interrupt

1273
00:46:39,119 --> 00:46:39,920
them

1274
00:46:39,920 --> 00:46:42,800
you know while they're writing code etc

1275
00:46:42,800 --> 00:46:45,280
but i do think there's future here right

1276
00:46:45,280 --> 00:46:48,079
we've come a long way with just kind of

1277
00:46:48,079 --> 00:46:50,240
you know machine learning and you know

1278
00:46:50,240 --> 00:46:52,880
auto complete type of stuff you know in

1279
00:46:52,880 --> 00:46:55,760
gmail now i can pretty much open gmail

1280
00:46:55,760 --> 00:46:58,960
and hit tab 12 times and have a pretty

1281
00:46:58,960 --> 00:47:01,119
bloody good email that i can just hit

1282
00:47:01,119 --> 00:47:03,040
send and i didn't have to write any of

1283
00:47:03,040 --> 00:47:05,440
that myself right it just did it all for

1284
00:47:05,440 --> 00:47:08,319
me um github has i don't remember what

1285
00:47:08,319 --> 00:47:09,920
it's called right but they have the new

1286
00:47:09,920 --> 00:47:12,079
autopilot thing you know where it's you

1287
00:47:12,079 --> 00:47:13,680
know going to save the world and write

1288
00:47:13,680 --> 00:47:15,599
code for you right and i don't think

1289
00:47:15,599 --> 00:47:17,280
we're seeing that yet we're seeing it do

1290
00:47:17,280 --> 00:47:19,440
a lot of weird things but there's a

1291
00:47:19,440 --> 00:47:22,559
tremendous amount of potential there so

1292
00:47:22,559 --> 00:47:24,319
you know i think as vendors kind of pick

1293
00:47:24,319 --> 00:47:26,960
up on this and write tools that can you

1294
00:47:26,960 --> 00:47:28,559
know do you know things like you know

1295
00:47:28,559 --> 00:47:31,280
solar sonar lint um you know secure

1296
00:47:31,280 --> 00:47:33,359
assist those type of tools right as

1297
00:47:33,359 --> 00:47:36,640
those tools mature get better um and can

1298
00:47:36,640 --> 00:47:38,200
actually make you know quality

1299
00:47:38,200 --> 00:47:40,559
recommendations without interrupting the

1300
00:47:40,559 --> 00:47:41,680
developer

1301
00:47:41,680 --> 00:47:44,160
this could be a fantastic inner loop

1302
00:47:44,160 --> 00:47:46,319
tool but again i don't think we're there

1303
00:47:46,319 --> 00:47:48,640
today um every organization i've worked

1304
00:47:48,640 --> 00:47:50,559
with that has used those tools um the

1305
00:47:50,559 --> 00:47:52,559
developers have fought them and disabled

1306
00:47:52,559 --> 00:47:55,040
them because it's too impactful

1307
00:47:55,040 --> 00:47:56,880
and then security is code so again

1308
00:47:56,880 --> 00:47:58,400
getting back to that lightweight you

1309
00:47:58,400 --> 00:48:01,280
know qa testing of security controls

1310
00:48:01,280 --> 00:48:03,760
again not scanning for vulnerabilities

1311
00:48:03,760 --> 00:48:06,640
not running scanners but instead a qa

1312
00:48:06,640 --> 00:48:08,960
style test to validate

1313
00:48:08,960 --> 00:48:11,760
if our agreed upon controls are in place

1314
00:48:11,760 --> 00:48:14,640
it is another fantastic introduction to

1315
00:48:14,640 --> 00:48:16,800
the inner loop

1316
00:48:16,800 --> 00:48:18,640
so in conclusion right couple couple

1317
00:48:18,640 --> 00:48:22,079
takeaways here right so first of all

1318
00:48:22,079 --> 00:48:24,480
there is no right amount

1319
00:48:24,480 --> 00:48:26,559
of tax and waste

1320
00:48:26,559 --> 00:48:28,800
this is going to be different for every

1321
00:48:28,800 --> 00:48:30,640
organization right and you'll have to

1322
00:48:30,640 --> 00:48:33,040
work with your teams to figure out what

1323
00:48:33,040 --> 00:48:36,319
that right balance is for you right a

1324
00:48:36,319 --> 00:48:38,160
lot of my background has been in working

1325
00:48:38,160 --> 00:48:40,000
with large financials um and a lot of

1326
00:48:40,000 --> 00:48:42,240
large financials have no problem saying

1327
00:48:42,240 --> 00:48:44,160
all of our developers are going to run

1328
00:48:44,160 --> 00:48:46,000
sas and they're going to get over it and

1329
00:48:46,000 --> 00:48:47,440
that's an appropriate amount of tax and

1330
00:48:47,440 --> 00:48:50,319
waste for us right so um you know just

1331
00:48:50,319 --> 00:48:52,319
just know there is no right or wrong

1332
00:48:52,319 --> 00:48:54,240
answer work with your teams figure out

1333
00:48:54,240 --> 00:48:56,559
what's impactful and what's not

1334
00:48:56,559 --> 00:48:59,760
and always you know focus on reducing

1335
00:48:59,760 --> 00:49:01,040
that tax

1336
00:49:01,040 --> 00:49:02,640
and

1337
00:49:02,640 --> 00:49:05,200
eliminating waste right so if you have

1338
00:49:05,200 --> 00:49:07,040
wrote out a tool if you are using them

1339
00:49:07,040 --> 00:49:09,599
today you know start to think about that

1340
00:49:09,599 --> 00:49:11,200
impact that you're having on your

1341
00:49:11,200 --> 00:49:13,599
development teams and what you can do to

1342
00:49:13,599 --> 00:49:16,640
make those tools easier to use

1343
00:49:16,640 --> 00:49:17,680
faster

1344
00:49:17,680 --> 00:49:20,079
more reliable right picking the right

1345
00:49:20,079 --> 00:49:21,119
tool

1346
00:49:21,119 --> 00:49:22,960
for the right job

1347
00:49:22,960 --> 00:49:25,359
um you know an insecurity is code and

1348
00:49:25,359 --> 00:49:27,040
things of that nature and when you pick

1349
00:49:27,040 --> 00:49:29,119
that right tool for the right job you're

1350
00:49:29,119 --> 00:49:31,680
going to be minimizing that tax and that

1351
00:49:31,680 --> 00:49:32,559
waste

1352
00:49:32,559 --> 00:49:34,480
and then again continuous improvement we

1353
00:49:34,480 --> 00:49:36,880
talk about a lot in any devops talk

1354
00:49:36,880 --> 00:49:39,200
right and from a devsecops perspective

1355
00:49:39,200 --> 00:49:41,040
you know continuous improvement is going

1356
00:49:41,040 --> 00:49:44,400
to be equal to continuously reducing

1357
00:49:44,400 --> 00:49:46,559
that tax and waste and your developers

1358
00:49:46,559 --> 00:49:48,160
are only going to be thankful that

1359
00:49:48,160 --> 00:49:49,680
you're taking some of these painful

1360
00:49:49,680 --> 00:49:52,879
things away from them

1361
00:49:53,359 --> 00:49:56,839
so that's all for me any questions

1362
00:49:56,839 --> 00:49:59,359
thoughts uh is this

1363
00:49:59,359 --> 00:50:00,400
garbage

1364
00:50:00,400 --> 00:50:03,760
good thinking what do you think

1365
00:50:07,200 --> 00:50:08,400
awesome

1366
00:50:08,400 --> 00:50:09,359
all right

1367
00:50:09,359 --> 00:50:10,960
well thank you very much for coming and

1368
00:50:10,960 --> 00:50:12,400
i hope you all enjoy the rest your time

1369
00:50:12,400 --> 00:50:14,860
at last con

1370
00:50:14,860 --> 00:50:20,199
[Applause]

