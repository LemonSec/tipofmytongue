1
00:00:03,200 --> 00:00:18,000
[Music]

2
00:00:18,000 --> 00:00:19,920
so who uh

3
00:00:19,920 --> 00:00:21,199
who saw the law who went and did the

4
00:00:21,199 --> 00:00:23,279
loft pick thing today the lock pick

5
00:00:23,279 --> 00:00:24,800
booth over there in the conference room

6
00:00:24,800 --> 00:00:26,880
anybody go check that out practice lock

7
00:00:26,880 --> 00:00:28,640
picking it's one of the cooler booths

8
00:00:28,640 --> 00:00:31,679
i've probably seen at a conference um

9
00:00:31,679 --> 00:00:33,280
definitely interesting perspective on

10
00:00:33,280 --> 00:00:36,000
taking that physical security aspect and

11
00:00:36,000 --> 00:00:37,680
letting you come play with like lock

12
00:00:37,680 --> 00:00:38,719
picking

13
00:00:38,719 --> 00:00:40,320
uh holds a special place in my heart

14
00:00:40,320 --> 00:00:42,640
specifically too i have a background

15
00:00:42,640 --> 00:00:44,320
that deals a lot with that type of

16
00:00:44,320 --> 00:00:47,360
physical security and type of background

17
00:00:47,360 --> 00:00:50,640
let me tell you about myself um

18
00:00:50,640 --> 00:00:52,640
i was originally in the military joined

19
00:00:52,640 --> 00:00:54,399
right out of high school

20
00:00:54,399 --> 00:00:58,800
i served in the army from 2007 to 2018.

21
00:00:58,800 --> 00:01:01,120
i was not originally a cyber

22
00:01:01,120 --> 00:01:03,199
or application security person by trade

23
00:01:03,199 --> 00:01:05,119
in my early career i joined in as

24
00:01:05,119 --> 00:01:07,040
infantry i ended up going in and be

25
00:01:07,040 --> 00:01:10,720
going in 2010 went to special forces

26
00:01:10,720 --> 00:01:13,680
selection and became a special force

27
00:01:13,680 --> 00:01:15,920
end up doing about five years many tours

28
00:01:15,920 --> 00:01:17,840
to iraq afghanistan even a little bit of

29
00:01:17,840 --> 00:01:19,920
time in africa

30
00:01:19,920 --> 00:01:21,600
um one of the biggest questions i always

31
00:01:21,600 --> 00:01:22,880
get is

32
00:01:22,880 --> 00:01:25,360
okay so where how did you get to apsec

33
00:01:25,360 --> 00:01:27,680
like where was the transition there

34
00:01:27,680 --> 00:01:28,799
one of the coolest things about that

35
00:01:28,799 --> 00:01:31,439
type of background is

36
00:01:31,439 --> 00:01:33,920
everything that applies to learning how

37
00:01:33,920 --> 00:01:36,159
to do those jobs really well

38
00:01:36,159 --> 00:01:38,880
applies to application security

39
00:01:38,880 --> 00:01:41,040
it's a very security-minded

40
00:01:41,040 --> 00:01:42,960
profession you're constantly having me

41
00:01:42,960 --> 00:01:44,399
aware of different threats and how to

42
00:01:44,399 --> 00:01:46,399
handle them and how to approach them

43
00:01:46,399 --> 00:01:48,320
and you're also a very technical skills

44
00:01:48,320 --> 00:01:49,439
especially with what i was doing as a

45
00:01:49,439 --> 00:01:51,200
medic everything was based in algorithms

46
00:01:51,200 --> 00:01:53,040
everything was based in processes how do

47
00:01:53,040 --> 00:01:54,799
i act and react

48
00:01:54,799 --> 00:01:56,560
within a space

49
00:01:56,560 --> 00:01:58,799
and how does that how do i move forward

50
00:01:58,799 --> 00:02:00,719
to reduce the amount of damage that's

51
00:02:00,719 --> 00:02:03,040
being done or can be done so it actually

52
00:02:03,040 --> 00:02:05,200
translates extremely well into the

53
00:02:05,200 --> 00:02:06,799
application security

54
00:02:06,799 --> 00:02:09,199
when i first left the military i went

55
00:02:09,199 --> 00:02:10,560
and actually became a developer and i

56
00:02:10,560 --> 00:02:12,800
spent a couple years um writing software

57
00:02:12,800 --> 00:02:14,640
for lockheed martin was a great

58
00:02:14,640 --> 00:02:16,480
experience i learned a ton

59
00:02:16,480 --> 00:02:18,000
there and i was able to also at that

60
00:02:18,000 --> 00:02:19,599
same time i transitioned to the national

61
00:02:19,599 --> 00:02:20,480
guard

62
00:02:20,480 --> 00:02:22,720
and i currently serve as the senior

63
00:02:22,720 --> 00:02:24,640
cyber network defender for the norton

64
00:02:24,640 --> 00:02:26,800
national guard um as you might notice i

65
00:02:26,800 --> 00:02:29,120
have a lot of kayak certifications um

66
00:02:29,120 --> 00:02:30,080
that was

67
00:02:30,080 --> 00:02:31,920
attributed to the fact that i

68
00:02:31,920 --> 00:02:33,680
transitioned into the national guard and

69
00:02:33,680 --> 00:02:36,480
they um they funded my training to allow

70
00:02:36,480 --> 00:02:39,280
me to get that amazing education

71
00:02:39,280 --> 00:02:42,080
um so i've taken that education from

72
00:02:42,080 --> 00:02:43,599
gayak and sands and learning all that

73
00:02:43,599 --> 00:02:45,519
security and i took that experience of

74
00:02:45,519 --> 00:02:47,040
being a developer and i got the

75
00:02:47,040 --> 00:02:49,120
opportunity to start with an amazing

76
00:02:49,120 --> 00:02:50,959
startup security journey as an

77
00:02:50,959 --> 00:02:53,200
application security engineer that's

78
00:02:53,200 --> 00:02:55,120
currently where i work and i build i'm

79
00:02:55,120 --> 00:02:56,879
right now the content lead for the

80
00:02:56,879 --> 00:02:58,959
application security team

81
00:02:58,959 --> 00:03:02,599
for security journey

82
00:03:04,319 --> 00:03:06,640
so today i'm here to talk about

83
00:03:06,640 --> 00:03:09,599
the software security testing life cycle

84
00:03:09,599 --> 00:03:13,360
the framework that testers need

85
00:03:13,360 --> 00:03:15,280
um the big thing here is one of the

86
00:03:15,280 --> 00:03:17,440
projects i took on recently not recently

87
00:03:17,440 --> 00:03:18,959
but a little while ago

88
00:03:18,959 --> 00:03:21,840
was we want to create content that was

89
00:03:21,840 --> 00:03:23,680
geared towards application security

90
00:03:23,680 --> 00:03:25,920
testers not just developers and we want

91
00:03:25,920 --> 00:03:27,680
to look at how should we approach

92
00:03:27,680 --> 00:03:30,080
application security testing and i did

93
00:03:30,080 --> 00:03:31,920
what most i think everybody does when we

94
00:03:31,920 --> 00:03:33,040
start getting into this field i started

95
00:03:33,040 --> 00:03:34,400
reaching out to all the different oas

96
00:03:34,400 --> 00:03:36,400
projects to start reading the lost top

97
00:03:36,400 --> 00:03:39,680
10 mass vs the security testing guides

98
00:03:39,680 --> 00:03:41,519
start consuming all that content started

99
00:03:41,519 --> 00:03:42,799
talking to different professionals out

100
00:03:42,799 --> 00:03:44,560
in the field spending a lot of time on

101
00:03:44,560 --> 00:03:46,319
twitter debating on what the right

102
00:03:46,319 --> 00:03:48,239
things and wrong things were to do

103
00:03:48,239 --> 00:03:50,000
um and in the end

104
00:03:50,000 --> 00:03:52,319
i put i one way i work in my process is

105
00:03:52,319 --> 00:03:53,599
i put a lot of information up on a

106
00:03:53,599 --> 00:03:55,200
whiteboard i try to make it make sense

107
00:03:55,200 --> 00:03:56,959
and i start trying to move things around

108
00:03:56,959 --> 00:03:58,319
and something we noticed is we kept

109
00:03:58,319 --> 00:04:00,959
trying to build this content was there

110
00:04:00,959 --> 00:04:03,439
wasn't a good organized way for us to

111
00:04:03,439 --> 00:04:05,280
transition from the beginning of when we

112
00:04:05,280 --> 00:04:07,680
were first creating software to the end

113
00:04:07,680 --> 00:04:09,599
that was specific for application

114
00:04:09,599 --> 00:04:11,200
security testers

115
00:04:11,200 --> 00:04:14,000
so we did is we created our own approach

116
00:04:14,000 --> 00:04:16,000
to it and we started taking now not not

117
00:04:16,000 --> 00:04:17,600
every individual idea in here is

118
00:04:17,600 --> 00:04:19,120
original these are all different things

119
00:04:19,120 --> 00:04:20,798
we apply in different places but we try

120
00:04:20,798 --> 00:04:22,960
to organize it and structure it in a way

121
00:04:22,960 --> 00:04:25,919
that makes sense for how i approach the

122
00:04:25,919 --> 00:04:27,360
software development life cycle the

123
00:04:27,360 --> 00:04:29,280
secure development life cycle as an

124
00:04:29,280 --> 00:04:31,520
application security tester and what i

125
00:04:31,520 --> 00:04:33,520
should be doing at each phase that

126
00:04:33,520 --> 00:04:35,919
allows me to focus in on the things i

127
00:04:35,919 --> 00:04:37,600
actually have to test to be much more

128
00:04:37,600 --> 00:04:40,320
proactive and refined into the actual

129
00:04:40,320 --> 00:04:42,400
things that are for my application

130
00:04:42,400 --> 00:04:43,759
so the idea is we're no longer trying to

131
00:04:43,759 --> 00:04:46,560
shotgun and get something from a great

132
00:04:46,560 --> 00:04:48,720
individual scanning tool and react to it

133
00:04:48,720 --> 00:04:51,120
but i make a much more proactive

134
00:04:51,120 --> 00:04:53,199
plan to security testing that builds

135
00:04:53,199 --> 00:04:57,160
from each phase to the next

136
00:04:59,440 --> 00:05:00,800
all right so

137
00:05:00,800 --> 00:05:02,320
we call it the software security testing

138
00:05:02,320 --> 00:05:04,720
life cycle and like any good word we

139
00:05:04,720 --> 00:05:06,560
have to have a great acronym and our

140
00:05:06,560 --> 00:05:08,800
favorite acronym for this is swisstoll

141
00:05:08,800 --> 00:05:11,759
just rolls off the tongue

142
00:05:11,759 --> 00:05:13,199
so swisstal

143
00:05:13,199 --> 00:05:15,360
is what i'll refer to it from now on and

144
00:05:15,360 --> 00:05:16,880
basically it's exactly everything i just

145
00:05:16,880 --> 00:05:19,039
said it integrates security

146
00:05:19,039 --> 00:05:20,960
it's not meant to replace anything it's

147
00:05:20,960 --> 00:05:23,280
meant to supplement what it does is

148
00:05:23,280 --> 00:05:24,800
we're trying to look through the eyes of

149
00:05:24,800 --> 00:05:26,960
a security tester through each phase of

150
00:05:26,960 --> 00:05:28,639
security development life cycle so that

151
00:05:28,639 --> 00:05:30,400
we're more proactive

152
00:05:30,400 --> 00:05:32,479
and that we are focusing our testing on

153
00:05:32,479 --> 00:05:35,520
what needs to be tested

154
00:05:36,800 --> 00:05:38,400
another big thing is why another

155
00:05:38,400 --> 00:05:40,400
framework there are tons of frameworks

156
00:05:40,400 --> 00:05:42,320
out there especially when we have guides

157
00:05:42,320 --> 00:05:44,080
that say why the security testing guide

158
00:05:44,080 --> 00:05:45,680
one of the biggest things that we solve

159
00:05:45,680 --> 00:05:46,880
a problem was

160
00:05:46,880 --> 00:05:48,720
is a lot of these guides were for like a

161
00:05:48,720 --> 00:05:50,720
qa team right it's not someone who's

162
00:05:50,720 --> 00:05:52,960
just focused on security testing they're

163
00:05:52,960 --> 00:05:54,639
checking they're doing smoke test

164
00:05:54,639 --> 00:05:56,400
they're doing integration tests they're

165
00:05:56,400 --> 00:05:58,720
doing um ux tests it's all these

166
00:05:58,720 --> 00:06:00,560
different type of testing they're doing

167
00:06:00,560 --> 00:06:02,080
and they're not necessarily focused on

168
00:06:02,080 --> 00:06:03,759
security and most time even when you

169
00:06:03,759 --> 00:06:05,759
look at a secure development life cycle

170
00:06:05,759 --> 00:06:08,080
the testing for security testings four

171
00:06:08,080 --> 00:06:10,000
phases down the pipeline and all of a

172
00:06:10,000 --> 00:06:11,360
sudden our software's developed we're

173
00:06:11,360 --> 00:06:12,560
testing and all of a sudden we have

174
00:06:12,560 --> 00:06:13,919
these alerts to say we have problems we

175
00:06:13,919 --> 00:06:15,360
have to fix and we're throwing it back

176
00:06:15,360 --> 00:06:17,360
to the devs to fix to them right

177
00:06:17,360 --> 00:06:19,120
so that like that's not a proactive

178
00:06:19,120 --> 00:06:21,199
that's a completely reactive approach to

179
00:06:21,199 --> 00:06:23,440
security testing so the hope is to get

180
00:06:23,440 --> 00:06:25,919
ahead of that and to do it focused on

181
00:06:25,919 --> 00:06:28,160
security and separate security from

182
00:06:28,160 --> 00:06:29,520
quality assurance because they're not

183
00:06:29,520 --> 00:06:31,840
the same your security tests are not

184
00:06:31,840 --> 00:06:33,840
necessarily checking the quality your

185
00:06:33,840 --> 00:06:36,000
functionality the check and the security

186
00:06:36,000 --> 00:06:37,840
of products so our guides and our

187
00:06:37,840 --> 00:06:41,599
approach to it need to be different

188
00:06:44,560 --> 00:06:46,160
who's swisstal ford

189
00:06:46,160 --> 00:06:47,840
so i got three categories primary

190
00:06:47,840 --> 00:06:49,599
everybody's gonna think is our security

191
00:06:49,599 --> 00:06:51,599
testers our developers right there's the

192
00:06:51,599 --> 00:06:53,039
two people that have their hands most on

193
00:06:53,039 --> 00:06:54,960
the product right we also have something

194
00:06:54,960 --> 00:06:56,479
we call product adjacent and what we

195
00:06:56,479 --> 00:06:58,720
call product adjacent is i anyone that

196
00:06:58,720 --> 00:07:00,319
places their hand or has an influence on

197
00:07:00,319 --> 00:07:02,160
how i'm developing my product they need

198
00:07:02,160 --> 00:07:03,919
to understand it at a base level if this

199
00:07:03,919 --> 00:07:06,000
is something you adopt the reason being

200
00:07:06,000 --> 00:07:07,680
is you need to understand why i'm doing

201
00:07:07,680 --> 00:07:09,520
what i'm doing during each phases and

202
00:07:09,520 --> 00:07:11,120
what i expect you to be doing during

203
00:07:11,120 --> 00:07:13,759
those phases to support my tasks so this

204
00:07:13,759 --> 00:07:15,520
isn't just for developers this isn't

205
00:07:15,520 --> 00:07:17,680
just for your security team it's also so

206
00:07:17,680 --> 00:07:18,960
that anyone that lays their hand on

207
00:07:18,960 --> 00:07:20,319
their product if these are the things

208
00:07:20,319 --> 00:07:21,520
you're going to adopt they need to

209
00:07:21,520 --> 00:07:23,680
understand how this works so they

210
00:07:23,680 --> 00:07:24,880
understand what you're going to be doing

211
00:07:24,880 --> 00:07:26,319
and how they can support you this

212
00:07:26,319 --> 00:07:28,720
process

213
00:07:29,280 --> 00:07:32,319
so like any good framework we have a

214
00:07:32,319 --> 00:07:33,680
flow diagram

215
00:07:33,680 --> 00:07:36,639
so and we start out with

216
00:07:36,639 --> 00:07:38,400
we're going to deep dive in each one of

217
00:07:38,400 --> 00:07:41,360
these different phases but quick overall

218
00:07:41,360 --> 00:07:42,800
is the first thing you need to do is

219
00:07:42,800 --> 00:07:43,759
we'll talking about security

220
00:07:43,759 --> 00:07:45,680
requirements because that's where all

221
00:07:45,680 --> 00:07:47,120
software development starts is knowing

222
00:07:47,120 --> 00:07:48,720
what your requirements are we're going

223
00:07:48,720 --> 00:07:51,120
to dive into threat modeling building a

224
00:07:51,120 --> 00:07:53,280
security testing strategy talk about

225
00:07:53,280 --> 00:07:55,440
actually doing security unit tests and

226
00:07:55,440 --> 00:07:57,599
doing a review process we're talking

227
00:07:57,599 --> 00:07:59,520
about automation testing which is a huge

228
00:07:59,520 --> 00:08:01,360
part of security testing and then

229
00:08:01,360 --> 00:08:02,879
finally we're going to do what i call

230
00:08:02,879 --> 00:08:04,240
validating security findings and

231
00:08:04,240 --> 00:08:06,400
controls a lot of the places you get to

232
00:08:06,400 --> 00:08:07,919
see that called like your penetration

233
00:08:07,919 --> 00:08:09,120
testing or when you get behind the

234
00:08:09,120 --> 00:08:11,360
keyboard and actually do something but

235
00:08:11,360 --> 00:08:12,879
we separate this out because we're not

236
00:08:12,879 --> 00:08:14,800
doing pen testing in this traditional

237
00:08:14,800 --> 00:08:16,560
sense i'm not going to go hire i'm not

238
00:08:16,560 --> 00:08:18,240
hiring an outside pen tester to come in

239
00:08:18,240 --> 00:08:20,000
and try to break my product we're going

240
00:08:20,000 --> 00:08:21,840
to make a focused attempt to test things

241
00:08:21,840 --> 00:08:23,919
that we know we have to test for based

242
00:08:23,919 --> 00:08:26,000
off our security tested strategy from

243
00:08:26,000 --> 00:08:27,759
the things we identified in our threat

244
00:08:27,759 --> 00:08:29,599
model that we know we have to test so

245
00:08:29,599 --> 00:08:31,520
it's a much more focused proactive way

246
00:08:31,520 --> 00:08:35,919
to go about that manual hands-on testing

247
00:08:36,159 --> 00:08:37,440
all right the first thing knowing our

248
00:08:37,440 --> 00:08:39,360
security requirements this is an overly

249
00:08:39,360 --> 00:08:42,000
complex concept the big thing here is i

250
00:08:42,000 --> 00:08:44,080
need to know my product and what we

251
00:08:44,080 --> 00:08:45,760
consider security requirements if i'm

252
00:08:45,760 --> 00:08:47,680
going to test for it as a tester i

253
00:08:47,680 --> 00:08:49,279
shouldn't be coming at the phase or like

254
00:08:49,279 --> 00:08:50,880
hey we've designed we've built our

255
00:08:50,880 --> 00:08:52,800
product the security team the team did

256
00:08:52,800 --> 00:08:54,399
the threat model now it's your turn to

257
00:08:54,399 --> 00:08:56,560
test now the product's done

258
00:08:56,560 --> 00:08:58,000
the security professionals to be at the

259
00:08:58,000 --> 00:09:00,080
very beginning and now i also want to

260
00:09:00,080 --> 00:09:02,880
caveat the security tester isn't always

261
00:09:02,880 --> 00:09:04,560
just an individual role at the company

262
00:09:04,560 --> 00:09:06,800
if i'm on a 10-man team at a small

263
00:09:06,800 --> 00:09:08,959
startup company my security tester might

264
00:09:08,959 --> 00:09:11,279
also be my developer um when i talk

265
00:09:11,279 --> 00:09:12,480
about this i need to understand when i

266
00:09:12,480 --> 00:09:13,760
say security tester i'm just saying

267
00:09:13,760 --> 00:09:15,600
whoever's wearing that hat at that

268
00:09:15,600 --> 00:09:17,440
moment so if i'm the developer who's

269
00:09:17,440 --> 00:09:19,440
also doing my security testing when i

270
00:09:19,440 --> 00:09:20,560
talk about what you should be doing at

271
00:09:20,560 --> 00:09:22,160
these phases this is the time for you to

272
00:09:22,160 --> 00:09:23,600
put that security hat on your head and

273
00:09:23,600 --> 00:09:25,760
be like okay as a security tester this

274
00:09:25,760 --> 00:09:28,640
is what i need to be doing at this phase

275
00:09:28,640 --> 00:09:29,920
the three type of requirements we need

276
00:09:29,920 --> 00:09:31,040
to understand is your business

277
00:09:31,040 --> 00:09:32,240
requirements

278
00:09:32,240 --> 00:09:34,399
there are your

279
00:09:34,399 --> 00:09:36,959
external requirements and your internal

280
00:09:36,959 --> 00:09:38,640
security requirements so external

281
00:09:38,640 --> 00:09:40,000
security requirements are basically

282
00:09:40,000 --> 00:09:41,440
things like your laws and regulations

283
00:09:41,440 --> 00:09:42,880
that apply to your application if i

284
00:09:42,880 --> 00:09:44,640
handle health information i need to

285
00:09:44,640 --> 00:09:46,800
handle data differently than if i'm a

286
00:09:46,800 --> 00:09:48,560
gaming application right i need to know

287
00:09:48,560 --> 00:09:50,240
what laws and regulations apply with me

288
00:09:50,240 --> 00:09:53,120
if my product is being used overseas i

289
00:09:53,120 --> 00:09:54,959
need to understand possibly what eu

290
00:09:54,959 --> 00:09:56,399
regulations are gonna be applied to my

291
00:09:56,399 --> 00:09:58,800
product and as a tester i need to know

292
00:09:58,800 --> 00:10:00,800
these things so i can validate they were

293
00:10:00,800 --> 00:10:02,480
putting in the appropriate security

294
00:10:02,480 --> 00:10:04,320
controls to stick to those security

295
00:10:04,320 --> 00:10:06,480
regulations

296
00:10:06,480 --> 00:10:07,839
business requirements are things that

297
00:10:07,839 --> 00:10:09,519
are going to make me lose business i'm

298
00:10:09,519 --> 00:10:10,959
going to lose customers it may not be a

299
00:10:10,959 --> 00:10:15,200
legal requirement but if we leak pii on

300
00:10:15,200 --> 00:10:18,079
our platform we may not be legally held

301
00:10:18,079 --> 00:10:19,920
accountable for some of that information

302
00:10:19,920 --> 00:10:21,839
however with this good chance if i have

303
00:10:21,839 --> 00:10:23,120
security oriented people and i'm a

304
00:10:23,120 --> 00:10:25,040
security platform i'm not going to use

305
00:10:25,040 --> 00:10:27,040
your product again i'm secure oriented

306
00:10:27,040 --> 00:10:27,760
you

307
00:10:27,760 --> 00:10:29,040
you lose me once you're probably not

308
00:10:29,040 --> 00:10:32,519
going to get me back

309
00:10:33,200 --> 00:10:34,880
then internal security requirements

310
00:10:34,880 --> 00:10:36,079
those are things that we're talking

311
00:10:36,079 --> 00:10:37,680
about is basically

312
00:10:37,680 --> 00:10:40,399
based on your company's policy and your

313
00:10:40,399 --> 00:10:42,880
ethos and the things that you guys you

314
00:10:42,880 --> 00:10:45,440
hold true to like as a requirement as a

315
00:10:45,440 --> 00:10:46,800
company these are things we're going to

316
00:10:46,800 --> 00:10:48,480
protect and do they might not be

317
00:10:48,480 --> 00:10:50,480
regulated they might not lose customers

318
00:10:50,480 --> 00:10:52,880
but as are the way we decide that we

319
00:10:52,880 --> 00:10:54,079
want to handle ourselves these are the

320
00:10:54,079 --> 00:10:55,360
secret requirements they're going to be

321
00:10:55,360 --> 00:10:57,279
in all of our products as a security

322
00:10:57,279 --> 00:10:58,320
professional

323
00:10:58,320 --> 00:11:00,320
if you do not understand your

324
00:11:00,320 --> 00:11:01,760
requirements you'll be testing against

325
00:11:01,760 --> 00:11:03,440
you cannot be an effective tester

326
00:11:03,440 --> 00:11:04,240
because

327
00:11:04,240 --> 00:11:05,440
something you might find that you're

328
00:11:05,440 --> 00:11:06,959
like oh that's not a big deal as a

329
00:11:06,959 --> 00:11:09,519
security alert might be a big deal based

330
00:11:09,519 --> 00:11:13,200
on your company's security requirements

331
00:11:13,360 --> 00:11:14,800
now this one's a big part and i'm gonna

332
00:11:14,800 --> 00:11:15,920
probably stay here on a minute and we're

333
00:11:15,920 --> 00:11:17,200
actually gonna talk about each phase of

334
00:11:17,200 --> 00:11:20,240
this threat modeling

335
00:11:20,240 --> 00:11:22,160
huge into threat modeling

336
00:11:22,160 --> 00:11:24,480
so you cannot test an application or let

337
00:11:24,480 --> 00:11:25,680
me rephrase that you can but i don't

338
00:11:25,680 --> 00:11:27,279
think you can do it effectively until

339
00:11:27,279 --> 00:11:28,959
you've taken time to sit down and look

340
00:11:28,959 --> 00:11:30,800
at how the application works the

341
00:11:30,800 --> 00:11:32,640
different parts of that application and

342
00:11:32,640 --> 00:11:36,000
how data flows now as a security tester

343
00:11:36,000 --> 00:11:37,440
you may not be the one making the

344
00:11:37,440 --> 00:11:39,120
decisions of what security controls are

345
00:11:39,120 --> 00:11:41,120
getting put in place to mitigate

346
00:11:41,120 --> 00:11:43,440
different threats during threat modeling

347
00:11:43,440 --> 00:11:46,000
however you should understand what

348
00:11:46,000 --> 00:11:48,079
threats are facing your application and

349
00:11:48,079 --> 00:11:49,600
you should know what security controls

350
00:11:49,600 --> 00:11:51,200
were put into place so that you can

351
00:11:51,200 --> 00:11:52,959
appropriately test that those are

352
00:11:52,959 --> 00:11:54,880
security controls are working

353
00:11:54,880 --> 00:11:57,839
effectively

354
00:11:59,600 --> 00:12:02,079
so the first step we talk about scope

355
00:12:02,079 --> 00:12:03,760
understand the scope of the application

356
00:12:03,760 --> 00:12:06,160
so what am i testing what am i testing

357
00:12:06,160 --> 00:12:08,959
for understand the different impacts of

358
00:12:08,959 --> 00:12:10,720
the different security controls that

359
00:12:10,720 --> 00:12:12,320
have been picked it's basically

360
00:12:12,320 --> 00:12:14,079
understanding

361
00:12:14,079 --> 00:12:15,920
when i test it's not just oh i'm going

362
00:12:15,920 --> 00:12:18,399
to test against our source code right oh

363
00:12:18,399 --> 00:12:20,399
by the way we also have 10 different

364
00:12:20,399 --> 00:12:22,079
packages and dependencies we've been

365
00:12:22,079 --> 00:12:23,680
included in our application i need to

366
00:12:23,680 --> 00:12:25,680
make sure that i'm running my software

367
00:12:25,680 --> 00:12:27,519
composition analysis tools then i'm

368
00:12:27,519 --> 00:12:28,880
actually checking to make sure that we

369
00:12:28,880 --> 00:12:31,200
have included other vulnerabilities from

370
00:12:31,200 --> 00:12:33,120
exterior products

371
00:12:33,120 --> 00:12:34,880
understanding what i'm responsible for

372
00:12:34,880 --> 00:12:37,120
testing at the beginning of this process

373
00:12:37,120 --> 00:12:38,800
is extremely important so that you don't

374
00:12:38,800 --> 00:12:41,359
leave gaps

375
00:12:42,079 --> 00:12:43,519
next thing you do in thread model is you

376
00:12:43,519 --> 00:12:44,639
draw

377
00:12:44,639 --> 00:12:45,600
we're going to sit down and we're going

378
00:12:45,600 --> 00:12:46,959
to put all the different components of

379
00:12:46,959 --> 00:12:48,399
our application and we're going to draw

380
00:12:48,399 --> 00:12:50,720
how the data flows how many how many

381
00:12:50,720 --> 00:12:52,000
people are pretty familiar with threat

382
00:12:52,000 --> 00:12:54,399
modeling i've gone through this process

383
00:12:54,399 --> 00:12:55,680
all right security conference i'm pretty

384
00:12:55,680 --> 00:12:57,519
sure like that's a pretty integral part

385
00:12:57,519 --> 00:12:59,600
of a lot of what we do now i'm gonna go

386
00:12:59,600 --> 00:13:00,800
through things you guys probably already

387
00:13:00,800 --> 00:13:03,120
understand from the threat modeling

388
00:13:03,120 --> 00:13:05,920
process and i like my entire intent is

389
00:13:05,920 --> 00:13:08,079
to understand that we need also

390
00:13:08,079 --> 00:13:10,320
how am i looking at this as the tester

391
00:13:10,320 --> 00:13:12,320
what am i doing during threat modeling

392
00:13:12,320 --> 00:13:13,760
as the tester

393
00:13:13,760 --> 00:13:14,800
here

394
00:13:14,800 --> 00:13:16,720
having the tester involved and part of

395
00:13:16,720 --> 00:13:18,480
drawing out your threat model and when

396
00:13:18,480 --> 00:13:20,560
we talk about the next phase which is

397
00:13:20,560 --> 00:13:22,800
applying things like stride how i'm

398
00:13:22,800 --> 00:13:24,160
doing and i'm actually looking at the

399
00:13:24,160 --> 00:13:26,079
different parts of my applications and

400
00:13:26,079 --> 00:13:28,079
threatened face it's great having your

401
00:13:28,079 --> 00:13:29,360
tester there especially if it's a

402
00:13:29,360 --> 00:13:30,720
separate role because this is somebody

403
00:13:30,720 --> 00:13:32,399
that's gained experience by testing our

404
00:13:32,399 --> 00:13:34,639
applications and said actually to be

405
00:13:34,639 --> 00:13:37,360
honest i find this all the time right

406
00:13:37,360 --> 00:13:39,279
if you're not the actual security tester

407
00:13:39,279 --> 00:13:40,240
and you're someone that's actually

408
00:13:40,240 --> 00:13:41,920
running one of these programs and you

409
00:13:41,920 --> 00:13:43,760
have application testers you should

410
00:13:43,760 --> 00:13:45,680
bring them in and on this process

411
00:13:45,680 --> 00:13:46,880
because you have a very unique

412
00:13:46,880 --> 00:13:48,720
perspective and experience from doing

413
00:13:48,720 --> 00:13:50,240
their testing are they going to see

414
00:13:50,240 --> 00:13:51,760
stuff that your developers or your

415
00:13:51,760 --> 00:13:54,160
architects might not see

416
00:13:54,160 --> 00:13:56,720
so they should be involved in the threat

417
00:13:56,720 --> 00:13:59,600
modeling process

418
00:13:59,680 --> 00:14:02,079
so applying stride this is like the big

419
00:14:02,079 --> 00:14:04,079
part for what the security tester really

420
00:14:04,079 --> 00:14:05,600
is to pay attention to that's

421
00:14:05,600 --> 00:14:06,959
understanding that we've found these

422
00:14:06,959 --> 00:14:08,720
different threats in our application

423
00:14:08,720 --> 00:14:10,800
we've identified the the different type

424
00:14:10,800 --> 00:14:12,880
of areas that we have security controls

425
00:14:12,880 --> 00:14:14,720
we put in place to prevent different

426
00:14:14,720 --> 00:14:17,519
threats so as a security tester i need

427
00:14:17,519 --> 00:14:19,519
to identify two things one that there's

428
00:14:19,519 --> 00:14:21,120
a potential threat there

429
00:14:21,120 --> 00:14:23,440
and then two that we've used this

430
00:14:23,440 --> 00:14:25,519
security control to stop it so something

431
00:14:25,519 --> 00:14:28,720
like we have a sqli potential threat

432
00:14:28,720 --> 00:14:30,959
because we have a login interface that

433
00:14:30,959 --> 00:14:32,480
goes back to the database and retrieves

434
00:14:32,480 --> 00:14:35,600
data right so we put in input validation

435
00:14:35,600 --> 00:14:37,839
we used an orm and we

436
00:14:37,839 --> 00:14:40,240
put multi-layer security controls in

437
00:14:40,240 --> 00:14:42,399
place so as a security tester understand

438
00:14:42,399 --> 00:14:44,399
that we have to we have to test for sqli

439
00:14:44,399 --> 00:14:46,720
because we use an sql database i'll

440
00:14:46,720 --> 00:14:48,079
understand that i need to test to make

441
00:14:48,079 --> 00:14:49,440
sure input validation is working

442
00:14:49,440 --> 00:14:51,120
correctly and i need to go in and test

443
00:14:51,120 --> 00:14:52,240
to make sure that i can't retrieve

444
00:14:52,240 --> 00:14:54,399
things in properly with my rm because

445
00:14:54,399 --> 00:14:56,320
anyone knows how an orm works just

446
00:14:56,320 --> 00:14:57,760
because i have an orm doesn't mean i've

447
00:14:57,760 --> 00:15:00,399
used it right right i can make an sql

448
00:15:00,399 --> 00:15:02,560
statement inside my orm and still have

449
00:15:02,560 --> 00:15:04,639
an sql vulnerability in there so now

450
00:15:04,639 --> 00:15:06,720
that i've identified these controls and

451
00:15:06,720 --> 00:15:08,639
this vulnerability i know that i'm going

452
00:15:08,639 --> 00:15:09,839
to have to test to ensure they're

453
00:15:09,839 --> 00:15:13,839
working properly later on

454
00:15:14,880 --> 00:15:17,120
all right so and this is exactly what i

455
00:15:17,120 --> 00:15:19,040
kind of stepped into that ahead of time

456
00:15:19,040 --> 00:15:20,959
right once we apply the mitigations

457
00:15:20,959 --> 00:15:21,839
that's when you're applying your

458
00:15:21,839 --> 00:15:23,360
security control so this is the phase

459
00:15:23,360 --> 00:15:24,880
where i'm identifying what security

460
00:15:24,880 --> 00:15:26,399
controls we've used whether it's

461
00:15:26,399 --> 00:15:28,240
authentication authorization separated

462
00:15:28,240 --> 00:15:31,040
privileges what have we done to mitigate

463
00:15:31,040 --> 00:15:32,720
those vulnerabilities we saw them have

464
00:15:32,720 --> 00:15:35,440
to test the work properly

465
00:15:35,440 --> 00:15:36,800
the most important part of the threat

466
00:15:36,800 --> 00:15:38,639
modeling is we didn't just draw a happy

467
00:15:38,639 --> 00:15:40,720
diagram and draw on some security

468
00:15:40,720 --> 00:15:42,399
controls and then hand it to the dev

469
00:15:42,399 --> 00:15:44,160
team and say go build

470
00:15:44,160 --> 00:15:46,720
as a security tester the next step of

471
00:15:46,720 --> 00:15:48,480
what we're calling swisstal is i'm going

472
00:15:48,480 --> 00:15:50,560
to build my security testing strategy

473
00:15:50,560 --> 00:15:52,160
and what i'm going to do is with my

474
00:15:52,160 --> 00:15:53,440
understanding of my security

475
00:15:53,440 --> 00:15:55,519
requirements having participated in

476
00:15:55,519 --> 00:15:57,040
threat modeling so now i truly

477
00:15:57,040 --> 00:15:58,959
understand my application

478
00:15:58,959 --> 00:16:00,480
i know what security controls we've

479
00:16:00,480 --> 00:16:02,480
implemented i'm going to take that

480
00:16:02,480 --> 00:16:04,320
documentation from threat modeling i'm

481
00:16:04,320 --> 00:16:06,800
going to build a thorough security

482
00:16:06,800 --> 00:16:09,120
testing strategy from that and that's

483
00:16:09,120 --> 00:16:10,720
security testing strategy is going to

484
00:16:10,720 --> 00:16:14,160
dictate how i do my security unit tests

485
00:16:14,160 --> 00:16:16,079
and how i'm going to do my automation

486
00:16:16,079 --> 00:16:17,920
tests and how i'm going to do my manual

487
00:16:17,920 --> 00:16:20,920
tests

488
00:16:24,880 --> 00:16:26,720
so the security unit security testing

489
00:16:26,720 --> 00:16:28,800
strategy is a pretty vague term and it

490
00:16:28,800 --> 00:16:30,720
says exactly what it's supposed to be

491
00:16:30,720 --> 00:16:32,639
but just to understand that what the

492
00:16:32,639 --> 00:16:34,240
entire intent within swisstal when we

493
00:16:34,240 --> 00:16:36,160
call about the security testing strategy

494
00:16:36,160 --> 00:16:38,399
is very specific it's a document that

495
00:16:38,399 --> 00:16:40,639
we've used that we've created from our

496
00:16:40,639 --> 00:16:42,480
threat model

497
00:16:42,480 --> 00:16:45,040
to dictate how we're going to

498
00:16:45,040 --> 00:16:47,279
test our security controls and our

499
00:16:47,279 --> 00:16:49,839
validation tests when we get security

500
00:16:49,839 --> 00:16:52,240
alerts

501
00:16:52,480 --> 00:16:53,839
so there's

502
00:16:53,839 --> 00:16:55,519
about five steps that we need to look

503
00:16:55,519 --> 00:16:56,720
into here the first thing is we need to

504
00:16:56,720 --> 00:16:58,959
review our scope understand what we're

505
00:16:58,959 --> 00:17:00,720
testing we're going to go through the

506
00:17:00,720 --> 00:17:02,399
data flow diagram which is when we sit

507
00:17:02,399 --> 00:17:03,920
there and actually drew out the entire

508
00:17:03,920 --> 00:17:06,240
documentation of what interfaces we need

509
00:17:06,240 --> 00:17:07,520
to test

510
00:17:07,520 --> 00:17:09,119
we're going to define security tests

511
00:17:09,119 --> 00:17:11,839
based on the identified threats and let

512
00:17:11,839 --> 00:17:14,160
me rephrase that

513
00:17:14,160 --> 00:17:15,599
we're going to define security tests

514
00:17:15,599 --> 00:17:17,199
based on two different things

515
00:17:17,199 --> 00:17:19,119
you have the threats that you identified

516
00:17:19,119 --> 00:17:20,319
and the security controls you've

517
00:17:20,319 --> 00:17:21,839
implemented and the reason we're

518
00:17:21,839 --> 00:17:23,599
separating out those two is because

519
00:17:23,599 --> 00:17:25,199
there's some threats that are really

520
00:17:25,199 --> 00:17:26,079
hard

521
00:17:26,079 --> 00:17:27,760
to test for

522
00:17:27,760 --> 00:17:29,679
or to build security controls for one

523
00:17:29,679 --> 00:17:31,039
might be a good example is dom

524
00:17:31,039 --> 00:17:33,200
cross-site scripting right you can do

525
00:17:33,200 --> 00:17:34,960
input you can do sanitation on your

526
00:17:34,960 --> 00:17:36,480
input especially if you're reflecting

527
00:17:36,480 --> 00:17:38,160
any sort of input from the user back

528
00:17:38,160 --> 00:17:40,640
onto your uh website now first of all

529
00:17:40,640 --> 00:17:41,840
just don't do it that's the easiest way

530
00:17:41,840 --> 00:17:43,919
to prevent that however

531
00:17:43,919 --> 00:17:45,360
if you have some requirement where

532
00:17:45,360 --> 00:17:46,640
you're just choosing to do that in your

533
00:17:46,640 --> 00:17:47,840
application

534
00:17:47,840 --> 00:17:49,440
the security controls can be difficult

535
00:17:49,440 --> 00:17:50,880
to implement so that might be something

536
00:17:50,880 --> 00:17:52,799
that on the back end you just need to

537
00:17:52,799 --> 00:17:53,840
ensure that your testing that

538
00:17:53,840 --> 00:17:56,240
vulnerability isn't there now automation

539
00:17:56,240 --> 00:17:58,720
testing has a really hard time picking

540
00:17:58,720 --> 00:17:59,760
up

541
00:17:59,760 --> 00:18:01,280
like things like cross-site scripting

542
00:18:01,280 --> 00:18:02,880
that's something that's way easier to

543
00:18:02,880 --> 00:18:04,720
find if you go in and you manually test

544
00:18:04,720 --> 00:18:06,640
for so when we identify these different

545
00:18:06,640 --> 00:18:08,000
things and we come up with the testing

546
00:18:08,000 --> 00:18:10,000
strategy i understand that my automation

547
00:18:10,000 --> 00:18:12,320
test probably won't pick up on all of my

548
00:18:12,320 --> 00:18:14,080
possible dom cross site scripting

549
00:18:14,080 --> 00:18:16,559
vulnerabilities but when we created our

550
00:18:16,559 --> 00:18:18,480
data flow diagram i saw that we were

551
00:18:18,480 --> 00:18:19,840
going to just have to reflect the

552
00:18:19,840 --> 00:18:21,919
message back to the user

553
00:18:21,919 --> 00:18:25,480
cutting in out here

554
00:18:34,720 --> 00:18:36,160
all right that's cool

555
00:18:36,160 --> 00:18:39,120
we'll keep doing it this way

556
00:18:40,840 --> 00:18:43,760
then where was i

557
00:18:43,760 --> 00:18:45,360
all right

558
00:18:45,360 --> 00:18:46,400
so

559
00:18:46,400 --> 00:18:47,840
this is the point where you identify

560
00:18:47,840 --> 00:18:49,200
things that are going to be easier to

561
00:18:49,200 --> 00:18:50,559
pick up during using tools and

562
00:18:50,559 --> 00:18:52,320
automation and then there's other things

563
00:18:52,320 --> 00:18:53,840
we're going to have to do manual

564
00:18:53,840 --> 00:18:56,799
validation to identify and ensure that

565
00:18:56,799 --> 00:19:00,080
we prevented those vulnerabilities

566
00:19:00,880 --> 00:19:03,120
last phase we got selected correct

567
00:19:03,120 --> 00:19:07,039
people processes and technology

568
00:19:08,320 --> 00:19:09,760
so when we're building out a security

569
00:19:09,760 --> 00:19:10,880
test and strategy the first thing we do

570
00:19:10,880 --> 00:19:12,559
is we look at that data flow diagram i

571
00:19:12,559 --> 00:19:13,840
understand my different threats and the

572
00:19:13,840 --> 00:19:15,760
different mitigations i implemented

573
00:19:15,760 --> 00:19:18,720
right so here we have identified threat

574
00:19:18,720 --> 00:19:21,360
number one and that's getting user data

575
00:19:21,360 --> 00:19:23,440
from the sql database

576
00:19:23,440 --> 00:19:26,400
and i know i'm impossible to sqli so we

577
00:19:26,400 --> 00:19:29,280
put put validation or i'm in there

578
00:19:29,280 --> 00:19:31,120
um

579
00:19:31,120 --> 00:19:32,799
on our next page we're going to talk

580
00:19:32,799 --> 00:19:34,880
about building the actual security

581
00:19:34,880 --> 00:19:36,880
testing strategy and the way we want to

582
00:19:36,880 --> 00:19:39,280
approach this is pretty specific we want

583
00:19:39,280 --> 00:19:41,200
to identify the threat that we're

584
00:19:41,200 --> 00:19:43,440
mitigating we want to identify the

585
00:19:43,440 --> 00:19:45,440
security control that we use to mitigate

586
00:19:45,440 --> 00:19:47,679
that and then we got to identify

587
00:19:47,679 --> 00:19:50,160
what in our tire testing process we're

588
00:19:50,160 --> 00:19:52,400
going to do to validate that that threat

589
00:19:52,400 --> 00:19:54,320
has been mitigated and the security

590
00:19:54,320 --> 00:19:56,640
control is working properly

591
00:19:56,640 --> 00:19:58,480
and the approach this is like in the

592
00:19:58,480 --> 00:20:00,240
first one i have an sqli well i'm going

593
00:20:00,240 --> 00:20:02,799
to conduct server-side input validation

594
00:20:02,799 --> 00:20:06,559
keyword server-side not client-side um

595
00:20:06,559 --> 00:20:08,080
for my testing strategy the first thing

596
00:20:08,080 --> 00:20:08,960
i want to do is i'm going to write a

597
00:20:08,960 --> 00:20:10,960
unit test to confirm the input

598
00:20:10,960 --> 00:20:13,600
validation security control is working

599
00:20:13,600 --> 00:20:15,520
properly i'm going to dive into this a

600
00:20:15,520 --> 00:20:17,200
little bit later there's a big

601
00:20:17,200 --> 00:20:18,480
difference between what i call a

602
00:20:18,480 --> 00:20:20,400
security unit test and a functional unit

603
00:20:20,400 --> 00:20:22,559
test functional unit test is the one

604
00:20:22,559 --> 00:20:24,000
that makes all my lights go green and

605
00:20:24,000 --> 00:20:25,360
bright because i made sure the happy

606
00:20:25,360 --> 00:20:27,760
path worked and i'm like 100 coverage

607
00:20:27,760 --> 00:20:29,200
i'ma go

608
00:20:29,200 --> 00:20:31,280
right um security unit test is when i

609
00:20:31,280 --> 00:20:33,760
actually get creative and i take the

610
00:20:33,760 --> 00:20:35,600
unhappy path and i started creating

611
00:20:35,600 --> 00:20:37,360
scenarios where i attack my application

612
00:20:37,360 --> 00:20:39,360
using security unit tests to ensure my

613
00:20:39,360 --> 00:20:41,760
security controls are doing what they're

614
00:20:41,760 --> 00:20:45,360
supposed to do prevent attacks

615
00:20:45,360 --> 00:20:47,600
now another thing i got here use with pd

616
00:20:47,600 --> 00:20:50,000
and a fuzzer as a test automation to

617
00:20:50,000 --> 00:20:52,320
ensure i don't have sqlite any if you

618
00:20:52,320 --> 00:20:55,120
guys don't know what pd is that's a open

619
00:20:55,120 --> 00:20:57,440
source project that's a vulnerability

620
00:20:57,440 --> 00:20:58,799
scanner one of the big things i'll talk

621
00:20:58,799 --> 00:21:00,720
about in automation is you have to

622
00:21:00,720 --> 00:21:02,400
customize your automation tools i

623
00:21:02,400 --> 00:21:04,000
remember the first time i used with pd

624
00:21:04,000 --> 00:21:05,600
just to get familiar with it i went and

625
00:21:05,600 --> 00:21:07,039
scanned it against my application like

626
00:21:07,039 --> 00:21:08,400
it didn't find nothing i know this

627
00:21:08,400 --> 00:21:09,600
application is vulnerable because i

628
00:21:09,600 --> 00:21:11,120
built it in was because i didn't

629
00:21:11,120 --> 00:21:13,520
customize the tool i didn't set it up

630
00:21:13,520 --> 00:21:15,039
properly to actually give me good

631
00:21:15,039 --> 00:21:17,039
feedback so understanding the tools

632
00:21:17,039 --> 00:21:18,480
you're using and how to use them

633
00:21:18,480 --> 00:21:20,480
properly is massive you can't just be

634
00:21:20,480 --> 00:21:22,000
doing check block check the block

635
00:21:22,000 --> 00:21:24,159
security unit testing right or check the

636
00:21:24,159 --> 00:21:25,840
block security scanning you have to

637
00:21:25,840 --> 00:21:27,520
customize your automation tools to work

638
00:21:27,520 --> 00:21:29,120
properly or you're not going to get

639
00:21:29,120 --> 00:21:31,600
actionable feedback

640
00:21:31,600 --> 00:21:33,120
the last thing i'll do here is i might

641
00:21:33,120 --> 00:21:36,640
do a part of my penetration test on in

642
00:21:36,640 --> 00:21:38,880
on my interface i might use a tool like

643
00:21:38,880 --> 00:21:40,400
sqlmapper

644
00:21:40,400 --> 00:21:43,039
to attempt to exploit a sql

645
00:21:43,039 --> 00:21:44,960
vulnerability right

646
00:21:44,960 --> 00:21:46,640
um now you don't have to build this many

647
00:21:46,640 --> 00:21:48,480
layers of steps but my entire process

648
00:21:48,480 --> 00:21:52,240
here i want to explain is i've

649
00:21:52,240 --> 00:21:54,240
test to each phase of my last three

650
00:21:54,240 --> 00:21:56,000
phases right

651
00:21:56,000 --> 00:21:57,679
when i'm developing my software and

652
00:21:57,679 --> 00:21:59,200
building unit tests i'm building

653
00:21:59,200 --> 00:22:01,200
security unit tests that's one phase of

654
00:22:01,200 --> 00:22:03,760
testing my second phase of testing is

655
00:22:03,760 --> 00:22:05,440
that during test automation i'm using

656
00:22:05,440 --> 00:22:07,120
scanning tools to identify these type of

657
00:22:07,120 --> 00:22:09,200
vulnerabilities and at the very end when

658
00:22:09,200 --> 00:22:13,120
i do my manual and testing i'm using uh

659
00:22:13,120 --> 00:22:16,159
my actual threat model to test the

660
00:22:16,159 --> 00:22:18,640
things i already know should be working

661
00:22:18,640 --> 00:22:20,720
and or as a threat so i'm not just

662
00:22:20,720 --> 00:22:22,799
giving it to a pen tester to go figure

663
00:22:22,799 --> 00:22:27,639
out hey just black box or

664
00:22:27,679 --> 00:22:29,600
what's the right term for that go test

665
00:22:29,600 --> 00:22:30,799
my application without knowing anything

666
00:22:30,799 --> 00:22:33,520
behind the scenes

667
00:22:34,000 --> 00:22:36,400
right so black block testing

668
00:22:36,400 --> 00:22:38,799
so the entire intent there is like i

669
00:22:38,799 --> 00:22:40,640
know what's supposed to work there right

670
00:22:40,640 --> 00:22:41,919
and a lot of people say that's not a

671
00:22:41,919 --> 00:22:43,120
good thing well to be honest it's a good

672
00:22:43,120 --> 00:22:44,400
thing because i know i need a test i

673
00:22:44,400 --> 00:22:45,840
know what security controls i have i

674
00:22:45,840 --> 00:22:47,280
know i need a break

675
00:22:47,280 --> 00:22:48,559
um now

676
00:22:48,559 --> 00:22:51,280
bypro testing has this time and place

677
00:22:51,280 --> 00:22:52,640
that's not this

678
00:22:52,640 --> 00:22:54,320
this is how do i get software out to the

679
00:22:54,320 --> 00:22:56,799
customer in a quick manner while hitting

680
00:22:56,799 --> 00:22:58,559
all my testing

681
00:22:58,559 --> 00:23:01,679
proper check blocks

682
00:23:01,679 --> 00:23:03,520
all right so that's the general concept

683
00:23:03,520 --> 00:23:05,039
here we want to identify a threat we

684
00:23:05,039 --> 00:23:07,520
want to build identify security controls

685
00:23:07,520 --> 00:23:10,000
and then talk about by each phase how

686
00:23:10,000 --> 00:23:11,520
we're going to test

687
00:23:11,520 --> 00:23:13,360
that individual piece

688
00:23:13,360 --> 00:23:16,479
of software

689
00:23:17,280 --> 00:23:19,280
all right phase 4 on the software

690
00:23:19,280 --> 00:23:23,320
security testing life cycle

691
00:23:23,919 --> 00:23:26,320
this is build tests and review

692
00:23:26,320 --> 00:23:27,840
so build tests

693
00:23:27,840 --> 00:23:30,880
is when we're talking about building our

694
00:23:30,880 --> 00:23:32,960
security unit tests and something else i

695
00:23:32,960 --> 00:23:35,600
call fuzz targets and i highly recommend

696
00:23:35,600 --> 00:23:37,120
fuzzing now a traditional way that

697
00:23:37,120 --> 00:23:39,200
people see fuzzing is

698
00:23:39,200 --> 00:23:41,279
in two ways right like hey only people

699
00:23:41,279 --> 00:23:43,919
who have c plus fuzz who else fuzzes

700
00:23:43,919 --> 00:23:46,000
right that's one one response i get a

701
00:23:46,000 --> 00:23:48,320
lot and the response i get a lot is well

702
00:23:48,320 --> 00:23:49,840
fuzzing is what the pen tester does he

703
00:23:49,840 --> 00:23:51,520
finds interface he runs a tool and just

704
00:23:51,520 --> 00:23:53,039
jams a bunch of data in there and hope

705
00:23:53,039 --> 00:23:55,440
he gets a response

706
00:23:55,440 --> 00:23:57,919
um there's actually amazing projects out

707
00:23:57,919 --> 00:23:59,679
there that support fuzzing and

708
00:23:59,679 --> 00:24:01,679
automation and it can be done really

709
00:24:01,679 --> 00:24:03,840
well if you do it properly and to do it

710
00:24:03,840 --> 00:24:05,200
properly one of the big things we talk

711
00:24:05,200 --> 00:24:07,440
about is setting up fuzz targets

712
00:24:07,440 --> 00:24:09,760
so fast targets are a way of telling an

713
00:24:09,760 --> 00:24:12,559
automated fuzzing tool exactly where and

714
00:24:12,559 --> 00:24:14,400
how i want them to fuzz in my

715
00:24:14,400 --> 00:24:16,880
application so there are there are tools

716
00:24:16,880 --> 00:24:18,080
out there that will allow you to just

717
00:24:18,080 --> 00:24:19,760
like run a fuzzer against every single

718
00:24:19,760 --> 00:24:21,600
interface in your application with every

719
00:24:21,600 --> 00:24:24,480
all sorts of random data um and once you

720
00:24:24,480 --> 00:24:26,080
start it'll probably be done in five or

721
00:24:26,080 --> 00:24:27,520
six days

722
00:24:27,520 --> 00:24:28,280
right

723
00:24:28,280 --> 00:24:29,840
[Laughter]

724
00:24:29,840 --> 00:24:31,760
so that's where fuzz targets come into

725
00:24:31,760 --> 00:24:33,279
play and i'll talk about that a little

726
00:24:33,279 --> 00:24:34,799
more in a second

727
00:24:34,799 --> 00:24:36,799
uh the other part is security testing

728
00:24:36,799 --> 00:24:39,039
review as developers we've gotten

729
00:24:39,039 --> 00:24:42,000
amazingly good at knowing that i can't

730
00:24:42,000 --> 00:24:44,559
push code into my main project until

731
00:24:44,559 --> 00:24:47,440
somebody else looks at it right um

732
00:24:47,440 --> 00:24:48,880
there's

733
00:24:48,880 --> 00:24:50,240
are we good

734
00:24:50,240 --> 00:24:51,440
all right

735
00:24:51,440 --> 00:24:54,400
so um

736
00:24:54,640 --> 00:24:56,159
all right so as developers we've gotten

737
00:24:56,159 --> 00:24:57,520
really good at knowing that we can't

738
00:24:57,520 --> 00:24:59,360
just push code

739
00:24:59,360 --> 00:25:00,640
right into the main project and be like

740
00:25:00,640 --> 00:25:02,799
oh it'll be cool like i'm good like i

741
00:25:02,799 --> 00:25:03,760
know what i'm doing i don't have to

742
00:25:03,760 --> 00:25:06,080
worry about it we do a peer review right

743
00:25:06,080 --> 00:25:07,760
i put it up there i put someone on to

744
00:25:07,760 --> 00:25:09,919
review it either a peer or a senior

745
00:25:09,919 --> 00:25:11,600
developer goes through and makes sure

746
00:25:11,600 --> 00:25:13,120
i'm not doing something crazy or that

747
00:25:13,120 --> 00:25:14,480
i'm not adding a vulnerability at least

748
00:25:14,480 --> 00:25:16,720
somebody's checking my code before i

749
00:25:16,720 --> 00:25:19,679
inject it into our main branch

750
00:25:19,679 --> 00:25:21,760
as security testers we don't really do

751
00:25:21,760 --> 00:25:22,480
that

752
00:25:22,480 --> 00:25:24,080
right we come up with our own security

753
00:25:24,080 --> 00:25:26,480
testing strategy and then we implement

754
00:25:26,480 --> 00:25:27,919
it now if you're part of a big team you

755
00:25:27,919 --> 00:25:30,000
might have that senior uh security

756
00:25:30,000 --> 00:25:31,279
testers that come up to you be like all

757
00:25:31,279 --> 00:25:32,400
right no you're what you're doing is

758
00:25:32,400 --> 00:25:34,159
like wrong you need to change things but

759
00:25:34,159 --> 00:25:35,600
we don't have a really formalized

760
00:25:35,600 --> 00:25:38,159
process like we do with pushing code i

761
00:25:38,159 --> 00:25:39,520
think that's something that we've really

762
00:25:39,520 --> 00:25:42,000
been missing with our testing strategy

763
00:25:42,000 --> 00:25:43,600
so during this phase when we're starting

764
00:25:43,600 --> 00:25:44,960
to get the developers to build our

765
00:25:44,960 --> 00:25:47,279
security unit test is kind of that check

766
00:25:47,279 --> 00:25:50,640
on my sanity with a peer tester and or a

767
00:25:50,640 --> 00:25:53,440
senior tester to ensure that i'm doing

768
00:25:53,440 --> 00:25:55,039
something properly

769
00:25:55,039 --> 00:25:56,240
and the things that you'll be looking at

770
00:25:56,240 --> 00:25:57,760
is am i selecting the right tools and

771
00:25:57,760 --> 00:25:59,600
processes are there things that i'm

772
00:25:59,600 --> 00:26:00,960
missing that they might have experience

773
00:26:00,960 --> 00:26:02,559
for missing this is a great time to

774
00:26:02,559 --> 00:26:04,880
share information within your project so

775
00:26:04,880 --> 00:26:06,559
say that you're working with one team

776
00:26:06,559 --> 00:26:07,760
and i've worked in teams like this where

777
00:26:07,760 --> 00:26:09,360
we've had our entire internal team we

778
00:26:09,360 --> 00:26:10,640
had three developers a quality

779
00:26:10,640 --> 00:26:12,880
assessment a security tester and our ux

780
00:26:12,880 --> 00:26:15,600
person that was our team but another

781
00:26:15,600 --> 00:26:17,919
team might be also building software and

782
00:26:17,919 --> 00:26:19,840
you have a security unit a

783
00:26:19,840 --> 00:26:21,520
security tester that's seeing

784
00:26:21,520 --> 00:26:23,279
vulnerabilities pop up that you haven't

785
00:26:23,279 --> 00:26:25,279
even been looking for thinking about

786
00:26:25,279 --> 00:26:26,720
this is the time to share that type of

787
00:26:26,720 --> 00:26:28,720
information and do that knowledge share

788
00:26:28,720 --> 00:26:30,320
with the people in your company so that

789
00:26:30,320 --> 00:26:34,200
we're getting that better coverage

790
00:26:39,120 --> 00:26:40,159
all right so the two things that we're

791
00:26:40,159 --> 00:26:41,440
talking about i've touched on these a

792
00:26:41,440 --> 00:26:43,279
couple of times the security unit tests

793
00:26:43,279 --> 00:26:44,640
are really important

794
00:26:44,640 --> 00:26:47,200
um and when we do these we need to be

795
00:26:47,200 --> 00:26:48,799
very creative about the way that we do

796
00:26:48,799 --> 00:26:50,000
it and i'm gonna go through a couple

797
00:26:50,000 --> 00:26:51,760
quick code examples just to make sure i

798
00:26:51,760 --> 00:26:53,440
drive home the difference between a

799
00:26:53,440 --> 00:26:55,120
functional unit test and a security unit

800
00:26:55,120 --> 00:26:57,039
test and the other thing is the fuzz

801
00:26:57,039 --> 00:26:58,720
targets and the fuzz targets are

802
00:26:58,720 --> 00:27:00,320
important so that we can conduct fuzzy

803
00:27:00,320 --> 00:27:02,640
on our projects while saving times and

804
00:27:02,640 --> 00:27:04,000
being focused on the things that

805
00:27:04,000 --> 00:27:06,400
actually need to be fuzzed

806
00:27:06,400 --> 00:27:08,640
all right so the first um i'm a caveat

807
00:27:08,640 --> 00:27:11,279
right off the bat uh i used ruby

808
00:27:11,279 --> 00:27:13,679
for my code example and i don't know how

809
00:27:13,679 --> 00:27:16,080
readable that is uh

810
00:27:16,080 --> 00:27:17,679
but

811
00:27:17,679 --> 00:27:19,919
i chose ruby for two reasons one i write

812
00:27:19,919 --> 00:27:23,279
code in ruby um and two it's pretty

813
00:27:23,279 --> 00:27:25,279
straightforward i think in reading what

814
00:27:25,279 --> 00:27:27,440
it does right now here i have a function

815
00:27:27,440 --> 00:27:29,440
where i'm creating a user account

816
00:27:29,440 --> 00:27:32,240
and before i create my user account i'm

817
00:27:32,240 --> 00:27:34,640
doing input validation on the username

818
00:27:34,640 --> 00:27:36,559
and password to make sure they follow my

819
00:27:36,559 --> 00:27:38,640
company's policy

820
00:27:38,640 --> 00:27:40,080
um

821
00:27:40,080 --> 00:27:41,760
pretty simple my security control here

822
00:27:41,760 --> 00:27:43,679
is input validation before i'm allowing

823
00:27:43,679 --> 00:27:47,799
a user to create that account

824
00:27:49,440 --> 00:27:51,279
functional unit test when i test this

825
00:27:51,279 --> 00:27:53,039
out i'm gonna go in and be like all

826
00:27:53,039 --> 00:27:55,279
right i'm gonna create a new account

827
00:27:55,279 --> 00:27:57,039
and when i create that new account uh

828
00:27:57,039 --> 00:27:59,440
given a username user and a test

829
00:27:59,440 --> 00:28:01,520
password testpassword123

830
00:28:01,520 --> 00:28:03,440
horrible password don't use it just for

831
00:28:03,440 --> 00:28:04,720
the example

832
00:28:04,720 --> 00:28:06,320
um

833
00:28:06,320 --> 00:28:08,320
but i put in my that's that's something

834
00:28:08,320 --> 00:28:09,679
typical of dev would put in there right

835
00:28:09,679 --> 00:28:11,440
do i meet the basic criteria when i put

836
00:28:11,440 --> 00:28:13,200
in there put in some random data and

837
00:28:13,200 --> 00:28:14,320
then say all right let's create the

838
00:28:14,320 --> 00:28:16,080
account and i expect it to create the

839
00:28:16,080 --> 00:28:17,919
account and come back true

840
00:28:17,919 --> 00:28:19,840
and it works it comes back true and easy

841
00:28:19,840 --> 00:28:22,640
test now i've got my my test coverage

842
00:28:22,640 --> 00:28:24,240
now been checked to block i can move on

843
00:28:24,240 --> 00:28:26,399
to my next function right what we've

844
00:28:26,399 --> 00:28:27,760
missed here though even if you start

845
00:28:27,760 --> 00:28:29,440
doing some edge cases where you put some

846
00:28:29,440 --> 00:28:31,039
random data in there

847
00:28:31,039 --> 00:28:33,279
and where i go too long or too short

848
00:28:33,279 --> 00:28:34,559
what we're not doing is we're not

849
00:28:34,559 --> 00:28:36,559
approaching this from an actual

850
00:28:36,559 --> 00:28:38,320
attacker perspective we're not taking

851
00:28:38,320 --> 00:28:40,720
that moment to think how would someone

852
00:28:40,720 --> 00:28:44,080
try to break my security control to do

853
00:28:44,080 --> 00:28:45,919
something malicious in my application

854
00:28:45,919 --> 00:28:47,840
now not everyone that builds most of

855
00:28:47,840 --> 00:28:49,360
time the security unit tests or your

856
00:28:49,360 --> 00:28:50,720
unit tests are being built by your

857
00:28:50,720 --> 00:28:51,919
developers

858
00:28:51,919 --> 00:28:52,880
um

859
00:28:52,880 --> 00:28:54,399
to be honest this might be a moment to

860
00:28:54,399 --> 00:28:56,159
take that thing that everybody loves to

861
00:28:56,159 --> 00:28:57,440
do because everyone's the right unit

862
00:28:57,440 --> 00:28:59,039
that's right like it's the favorite

863
00:28:59,039 --> 00:28:59,840
thing

864
00:28:59,840 --> 00:29:01,360
like all day

865
00:29:01,360 --> 00:29:02,880
um this gets a chance to make it a

866
00:29:02,880 --> 00:29:04,960
little more entertaining like like take

867
00:29:04,960 --> 00:29:07,279
that moment and like hey let's step out

868
00:29:07,279 --> 00:29:08,960
of our developer box and be like how

869
00:29:08,960 --> 00:29:10,880
would you break your application and

870
00:29:10,880 --> 00:29:13,279
that security control you put in place

871
00:29:13,279 --> 00:29:15,279
and start thinking like that attacker

872
00:29:15,279 --> 00:29:16,880
and start having a little more fun with

873
00:29:16,880 --> 00:29:18,559
it rather than and that gets you out of

874
00:29:18,559 --> 00:29:20,880
that like uh that check the block kind

875
00:29:20,880 --> 00:29:22,880
of like mindset it gets you into that

876
00:29:22,880 --> 00:29:24,240
like

877
00:29:24,240 --> 00:29:25,600
did you write that well enough that you

878
00:29:25,600 --> 00:29:27,520
can't break it right can you break your

879
00:29:27,520 --> 00:29:28,799
own security control it's kind of a

880
00:29:28,799 --> 00:29:30,799
challenge in its own way um not everyone

881
00:29:30,799 --> 00:29:33,440
can adopt it what is a way to try to get

882
00:29:33,440 --> 00:29:35,279
the people more engaged and actually

883
00:29:35,279 --> 00:29:37,520
increase the um security testing earlier

884
00:29:37,520 --> 00:29:39,440
on in the process because unless you're

885
00:29:39,440 --> 00:29:40,960
doing these you're not security testing

886
00:29:40,960 --> 00:29:41,919
at this point you're gonna you're

887
00:29:41,919 --> 00:29:44,000
securing testing after the fact right

888
00:29:44,000 --> 00:29:45,120
now is the time to really get the

889
00:29:45,120 --> 00:29:46,799
developers to really assess how they

890
00:29:46,799 --> 00:29:48,399
built those security controls and test

891
00:29:48,399 --> 00:29:49,440
to make sure they're working

892
00:29:49,440 --> 00:29:51,840
appropriately

893
00:29:51,840 --> 00:29:53,279
so here's an example of security unit

894
00:29:53,279 --> 00:29:55,279
test now this is a very simple example

895
00:29:55,279 --> 00:29:57,039
right so i'm taking that same thing i'm

896
00:29:57,039 --> 00:30:01,440
going to pass in a simple sql injection

897
00:30:01,440 --> 00:30:03,760
no spam okay

898
00:30:03,760 --> 00:30:06,720
um and like it's simple it's one

899
00:30:06,720 --> 00:30:08,559
or one equals one right simple thing it

900
00:30:08,559 --> 00:30:10,080
should always return true if it returns

901
00:30:10,080 --> 00:30:12,720
true i'll get back more data than i

902
00:30:12,720 --> 00:30:14,080
expect

903
00:30:14,080 --> 00:30:16,320
now this should return false my tests

904
00:30:16,320 --> 00:30:19,520
pass my security control works

905
00:30:19,520 --> 00:30:21,440
doing one simple injection attack isn't

906
00:30:21,440 --> 00:30:23,520
the right answer to this though right

907
00:30:23,520 --> 00:30:25,360
that's a very linear way to test this

908
00:30:25,360 --> 00:30:26,960
one of the better ways you can do is you

909
00:30:26,960 --> 00:30:28,960
could have a whole group of tests or

910
00:30:28,960 --> 00:30:31,679
they can call on a file that has a whole

911
00:30:31,679 --> 00:30:34,159
list of sqli that run against it in one

912
00:30:34,159 --> 00:30:36,640
simple unit test right so be a little

913
00:30:36,640 --> 00:30:37,600
more

914
00:30:37,600 --> 00:30:39,039
willing to think out of the box of how

915
00:30:39,039 --> 00:30:40,240
to attack because an attacker's not

916
00:30:40,240 --> 00:30:41,840
going to try one

917
00:30:41,840 --> 00:30:44,080
type of sqli at all it didn't work next

918
00:30:44,080 --> 00:30:46,000
one like no they're going to use a tool

919
00:30:46,000 --> 00:30:47,360
that's going to cram a bunch of data in

920
00:30:47,360 --> 00:30:48,080
there

921
00:30:48,080 --> 00:30:51,080
absolutely

922
00:30:53,840 --> 00:30:57,600
so i mean uh the sql map burp um

923
00:30:57,600 --> 00:30:59,519
i'm a big open source guy so i haven't

924
00:30:59,519 --> 00:31:00,880
really ventured too far out of those

925
00:31:00,880 --> 00:31:02,159
because i haven't found a scenario i've

926
00:31:02,159 --> 00:31:05,480
needed to

927
00:31:05,760 --> 00:31:08,000
yep

928
00:31:13,039 --> 00:31:15,440
all right fuzz targets um a little more

929
00:31:15,440 --> 00:31:18,080
detail on this so the the new edge

930
00:31:18,080 --> 00:31:19,760
fuzzing they actually have is some stuff

931
00:31:19,760 --> 00:31:21,679
that's actually smart fuzzing and what

932
00:31:21,679 --> 00:31:23,840
it does is rather than just jamming a

933
00:31:23,840 --> 00:31:25,120
bunch of like when you fuzz you're

934
00:31:25,120 --> 00:31:27,120
trying to accomplish three things right

935
00:31:27,120 --> 00:31:29,519
i either want the program to stall crash

936
00:31:29,519 --> 00:31:31,600
or have some unexpected result right i'm

937
00:31:31,600 --> 00:31:32,880
trying to cause something weird to

938
00:31:32,880 --> 00:31:34,640
happen and then i have to try to figure

939
00:31:34,640 --> 00:31:37,120
out what happened on the after fact um a

940
00:31:37,120 --> 00:31:38,880
lot of the new ways to do it yeah who

941
00:31:38,880 --> 00:31:40,640
hears her that i asked

942
00:31:40,640 --> 00:31:43,360
right i ask tools so um

943
00:31:43,360 --> 00:31:44,960
so interactive application security

944
00:31:44,960 --> 00:31:46,720
testing right so that's where when we

945
00:31:46,720 --> 00:31:48,159
build our application they put

946
00:31:48,159 --> 00:31:49,840
instrumentation in the application to be

947
00:31:49,840 --> 00:31:52,159
able to watch data flow um when you run

948
00:31:52,159 --> 00:31:53,760
a dash tool against it and now you can

949
00:31:53,760 --> 00:31:55,600
get instead of traditional das where i

950
00:31:55,600 --> 00:31:56,880
attack it and i have to wait for

951
00:31:56,880 --> 00:31:58,159
feedback i can actually see what's

952
00:31:58,159 --> 00:31:59,039
happening under the hood of my

953
00:31:59,039 --> 00:32:01,120
application well they actually have come

954
00:32:01,120 --> 00:32:04,080
out with a lot of new smart fuzzers

955
00:32:04,080 --> 00:32:07,120
like afl fuzz plus i think does this um

956
00:32:07,120 --> 00:32:09,200
lib fuzz i think is instrumented to do

957
00:32:09,200 --> 00:32:11,039
this also where you can actually build

958
00:32:11,039 --> 00:32:13,039
your application with instrumentation

959
00:32:13,039 --> 00:32:14,799
and then start fuzzing it and what it

960
00:32:14,799 --> 00:32:16,720
does is it not only does fuzzing where

961
00:32:16,720 --> 00:32:18,960
you're still attempting to crash or

962
00:32:18,960 --> 00:32:21,600
cause some sort of unexpected

963
00:32:21,600 --> 00:32:22,720
outcome

964
00:32:22,720 --> 00:32:23,600
but

965
00:32:23,600 --> 00:32:24,880
the agents on the inside of the

966
00:32:24,880 --> 00:32:27,039
application can see what points you hit

967
00:32:27,039 --> 00:32:29,200
and why and so when it does that it

968
00:32:29,200 --> 00:32:31,519
gives feedback to your fuzzing tool and

969
00:32:31,519 --> 00:32:33,120
then it'll take the piece of data used

970
00:32:33,120 --> 00:32:34,960
to cause that incidence and it'll

971
00:32:34,960 --> 00:32:36,720
continue to manipulate based off that

972
00:32:36,720 --> 00:32:38,480
piece of data what that does is it

973
00:32:38,480 --> 00:32:40,640
allows it to be much more focused on how

974
00:32:40,640 --> 00:32:42,720
it attacks your application and it takes

975
00:32:42,720 --> 00:32:45,279
a way less time than just doing starting

976
00:32:45,279 --> 00:32:47,279
with ones to zeroes to mass amounts of

977
00:32:47,279 --> 00:32:49,679
carriers to photos it's a much more

978
00:32:49,679 --> 00:32:52,240
focused way of doing fuzzing now the way

979
00:32:52,240 --> 00:32:54,880
fuzzing targets help with that

980
00:32:54,880 --> 00:32:57,279
automation process to make even faster

981
00:32:57,279 --> 00:32:59,279
is the icon does basically a fuzzing

982
00:32:59,279 --> 00:33:01,440
target wraps around an interface and

983
00:33:01,440 --> 00:33:03,760
says hey i want you to fuzz here and

984
00:33:03,760 --> 00:33:06,159
this thing only takes images and so

985
00:33:06,159 --> 00:33:07,679
let's start with images and start

986
00:33:07,679 --> 00:33:09,120
fuzzing with you manipulating the way

987
00:33:09,120 --> 00:33:10,720
this image is formatted going in here

988
00:33:10,720 --> 00:33:12,559
and the type of images you use to fuzz

989
00:33:12,559 --> 00:33:15,760
that target or this takes string input

990
00:33:15,760 --> 00:33:18,080
let's not let's try to jam the image and

991
00:33:18,080 --> 00:33:19,760
put it but let's start with a basic

992
00:33:19,760 --> 00:33:21,360
string input and start manipulating the

993
00:33:21,360 --> 00:33:23,519
way you fuzz from there it gives you a

994
00:33:23,519 --> 00:33:25,600
much more focused way to start and

995
00:33:25,600 --> 00:33:28,159
allows you to be able to be

996
00:33:28,159 --> 00:33:30,159
fuzz the places you identify during your

997
00:33:30,159 --> 00:33:32,080
threat model that need to be fuzzed and

998
00:33:32,080 --> 00:33:33,360
nowhere else

999
00:33:33,360 --> 00:33:34,399
and then

1000
00:33:34,399 --> 00:33:36,080
be systematic about what data you're

1001
00:33:36,080 --> 00:33:38,080
using to fuzz it so you're reducing the

1002
00:33:38,080 --> 00:33:39,519
amount of time while getting good

1003
00:33:39,519 --> 00:33:43,039
feedback from that fuzzing tool

1004
00:33:48,559 --> 00:33:49,679
all right the other thing we talked

1005
00:33:49,679 --> 00:33:52,799
about was the tester peer review um i

1006
00:33:52,799 --> 00:33:53,840
kind of touched on this a little bit so

1007
00:33:53,840 --> 00:33:55,519
we're gonna go to kind of fly through

1008
00:33:55,519 --> 00:33:58,080
this uh the big things you wanna see is

1009
00:33:58,080 --> 00:33:59,440
they're gonna wanna look at your threat

1010
00:33:59,440 --> 00:34:02,159
model your testing strategy what tools

1011
00:34:02,159 --> 00:34:04,559
you picked for automation um the

1012
00:34:04,559 --> 00:34:06,559
different type of pen testing approaches

1013
00:34:06,559 --> 00:34:08,719
you decided based on interfaces and the

1014
00:34:08,719 --> 00:34:10,399
other big thing is you do the exchange

1015
00:34:10,399 --> 00:34:12,159
information so i kind of already i got

1016
00:34:12,159 --> 00:34:13,760
ahead of myself earlier and kind of talk

1017
00:34:13,760 --> 00:34:15,599
through this slide with all big points

1018
00:34:15,599 --> 00:34:17,119
especially the big last one is that

1019
00:34:17,119 --> 00:34:18,719
exchange information i think is really

1020
00:34:18,719 --> 00:34:21,040
important within the testing community

1021
00:34:21,040 --> 00:34:22,320
because especially with people in your

1022
00:34:22,320 --> 00:34:25,359
organization this is the moment to

1023
00:34:25,359 --> 00:34:27,280
start that conversation of what you guys

1024
00:34:27,280 --> 00:34:29,040
are seeing and what is the most

1025
00:34:29,040 --> 00:34:30,800
important just be focusing on and adding

1026
00:34:30,800 --> 00:34:34,119
to your testing

1027
00:34:35,599 --> 00:34:37,280
all right

1028
00:34:37,280 --> 00:34:39,520
so automate testing

1029
00:34:39,520 --> 00:34:41,359
this is this this is phase five when we

1030
00:34:41,359 --> 00:34:44,079
think of any sdlc or stl this is when we

1031
00:34:44,079 --> 00:34:45,599
finally see testing show up on our

1032
00:34:45,599 --> 00:34:47,119
testing pipeline

1033
00:34:47,119 --> 00:34:49,440
right so this is when we have our

1034
00:34:49,440 --> 00:34:51,199
testing automation tools this is our

1035
00:34:51,199 --> 00:34:53,199
dynamic application security testing or

1036
00:34:53,199 --> 00:34:55,359
our ias tools and fuzzing one of the

1037
00:34:55,359 --> 00:34:56,800
most important parts with the with

1038
00:34:56,800 --> 00:34:59,760
swisstal that we try to emphasize here

1039
00:34:59,760 --> 00:35:03,040
is that i don't just throw

1040
00:35:03,040 --> 00:35:05,119
a automated testing tool up on the

1041
00:35:05,119 --> 00:35:07,200
platform and just let it run without

1042
00:35:07,200 --> 00:35:08,880
doing any customization for my

1043
00:35:08,880 --> 00:35:11,119
application i customize it for my

1044
00:35:11,119 --> 00:35:13,200
application based on having gone through

1045
00:35:13,200 --> 00:35:15,040
the process of my threat model and

1046
00:35:15,040 --> 00:35:16,800
knowing what's in my applications the

1047
00:35:16,800 --> 00:35:18,640
components that need to be tested

1048
00:35:18,640 --> 00:35:20,400
knowing what type of database i'm

1049
00:35:20,400 --> 00:35:22,480
running in the background knowing what

1050
00:35:22,480 --> 00:35:25,359
type of processes that are going on so

1051
00:35:25,359 --> 00:35:28,640
that i can customize my das tool

1052
00:35:28,640 --> 00:35:31,040
to run effectively against my

1053
00:35:31,040 --> 00:35:32,240
application

1054
00:35:32,240 --> 00:35:34,160
um it seems like a simple thing but if

1055
00:35:34,160 --> 00:35:35,680
you don't take the time to actually do

1056
00:35:35,680 --> 00:35:37,040
it and customize it you're not going to

1057
00:35:37,040 --> 00:35:38,640
get good results or you're going to get

1058
00:35:38,640 --> 00:35:40,640
a ton of false positives

1059
00:35:40,640 --> 00:35:42,000
the biggest thing we want to do here

1060
00:35:42,000 --> 00:35:43,839
during our automated testing is reduce

1061
00:35:43,839 --> 00:35:46,000
the amount of false positives we get

1062
00:35:46,000 --> 00:35:48,160
because in swisstal the next phase we're

1063
00:35:48,160 --> 00:35:50,160
talking about in when we actually go in

1064
00:35:50,160 --> 00:35:50,960
and

1065
00:35:50,960 --> 00:35:52,800
do our manual testing is to be driven

1066
00:35:52,800 --> 00:35:54,320
off of two things it'll be driven off

1067
00:35:54,320 --> 00:35:55,839
our threat model and it's gonna be

1068
00:35:55,839 --> 00:35:57,520
driven off the results we get from our

1069
00:35:57,520 --> 00:35:59,440
automated testing so what traditionally

1070
00:35:59,440 --> 00:36:00,880
happens is we run our automated testing

1071
00:36:00,880 --> 00:36:03,040
we get a bunch of security alerts and

1072
00:36:03,040 --> 00:36:04,960
they're either ones twos or threes on

1073
00:36:04,960 --> 00:36:07,040
severities there's some might be false

1074
00:36:07,040 --> 00:36:09,040
positives and some might not and until

1075
00:36:09,040 --> 00:36:10,560
we get into this big process of all

1076
00:36:10,560 --> 00:36:11,920
right well let's look through now and

1077
00:36:11,920 --> 00:36:13,359
see let's customize it now we have these

1078
00:36:13,359 --> 00:36:15,440
alerts and identify with false positives

1079
00:36:15,440 --> 00:36:17,359
if we customize it in the beginning we

1080
00:36:17,359 --> 00:36:18,400
would have much

1081
00:36:18,400 --> 00:36:21,440
smaller workload to start with um

1082
00:36:21,440 --> 00:36:23,200
but the worst thing you can possibly do

1083
00:36:23,200 --> 00:36:24,880
is get a print out of all these security

1084
00:36:24,880 --> 00:36:26,400
alerts and then throw that sheet back

1085
00:36:26,400 --> 00:36:27,839
over the devs and be like i got a list

1086
00:36:27,839 --> 00:36:29,359
of stuff for you to fix

1087
00:36:29,359 --> 00:36:30,640
because they're going to love you for

1088
00:36:30,640 --> 00:36:33,440
that and about the third false positive

1089
00:36:33,440 --> 00:36:34,880
that they're trying to fix for you

1090
00:36:34,880 --> 00:36:36,320
they're never going to listen to you

1091
00:36:36,320 --> 00:36:37,280
again

1092
00:36:37,280 --> 00:36:39,359
um so that's like one of the biggest

1093
00:36:39,359 --> 00:36:40,800
things we want to like take away from

1094
00:36:40,800 --> 00:36:43,359
this is we want to make sure we do

1095
00:36:43,359 --> 00:36:46,320
very focused automated testing based on

1096
00:36:46,320 --> 00:36:48,400
what our application actually has in it

1097
00:36:48,400 --> 00:36:50,560
so that we reduce our false positives

1098
00:36:50,560 --> 00:36:52,480
and then we're as the testers ourselves

1099
00:36:52,480 --> 00:36:54,079
we need to go and validate what's

1100
00:36:54,079 --> 00:36:56,880
actually a false or

1101
00:36:56,880 --> 00:36:58,560
false or positive

1102
00:36:58,560 --> 00:37:01,440
security alert so that we can uh

1103
00:37:01,440 --> 00:37:03,440
give good feedback to the developers to

1104
00:37:03,440 --> 00:37:06,079
do remediation

1105
00:37:06,079 --> 00:37:07,760
biggest things to take away automation

1106
00:37:07,760 --> 00:37:10,079
is huge it's going to save time it's

1107
00:37:10,079 --> 00:37:12,400
going to create consistency uh it needs

1108
00:37:12,400 --> 00:37:14,800
to be customized for your application

1109
00:37:14,800 --> 00:37:16,720
there's tons of open source projects out

1110
00:37:16,720 --> 00:37:17,599
there

1111
00:37:17,599 --> 00:37:19,359
zap's a great project as long as you

1112
00:37:19,359 --> 00:37:20,880
like customize it well with pd is a

1113
00:37:20,880 --> 00:37:22,800
great project out there i think we

1114
00:37:22,800 --> 00:37:24,160
brought up burp or burpees and

1115
00:37:24,160 --> 00:37:26,079
completely open source like it's

1116
00:37:26,079 --> 00:37:28,720
definitely uh it's on the cheaper side

1117
00:37:28,720 --> 00:37:30,240
though and definitely worth its weight

1118
00:37:30,240 --> 00:37:31,280
in gold

1119
00:37:31,280 --> 00:37:32,640
um

1120
00:37:32,640 --> 00:37:34,079
so there's a lot of projects out there

1121
00:37:34,079 --> 00:37:35,119
the biggest

1122
00:37:35,119 --> 00:37:36,240
if you're not doing some sort of

1123
00:37:36,240 --> 00:37:38,000
automated scan right now go get an open

1124
00:37:38,000 --> 00:37:39,760
source project throw it in your pipeline

1125
00:37:39,760 --> 00:37:42,160
and start right like just start the

1126
00:37:42,160 --> 00:37:44,000
process and then start customizing it

1127
00:37:44,000 --> 00:37:47,240
for your application

1128
00:37:54,560 --> 00:37:56,160
zap and burp with the three i talked

1129
00:37:56,160 --> 00:37:57,359
about

1130
00:37:57,359 --> 00:37:59,440
well pd yeah it used to be called elk i

1131
00:37:59,440 --> 00:38:00,400
don't know if you guys remember the old

1132
00:38:00,400 --> 00:38:03,040
elk scanner and ironically what pd is a

1133
00:38:03,040 --> 00:38:05,280
type of elk it's like with pd3 now i

1134
00:38:05,280 --> 00:38:08,400
think is the version they're on

1135
00:38:12,720 --> 00:38:14,320
all right phase six this is everyone's

1136
00:38:14,320 --> 00:38:16,079
favorite this is like hands-on keyboard

1137
00:38:16,079 --> 00:38:18,320
time this is like i'm a pen tester i get

1138
00:38:18,320 --> 00:38:20,480
to break my application time and like so

1139
00:38:20,480 --> 00:38:21,920
this is the stuff that everyone loves

1140
00:38:21,920 --> 00:38:23,280
however the biggest thing that a lot of

1141
00:38:23,280 --> 00:38:25,200
people do here is like cool it's time

1142
00:38:25,200 --> 00:38:27,040
for me to go pen test and then i just i

1143
00:38:27,040 --> 00:38:28,800
get out my pad of paper and i just start

1144
00:38:28,800 --> 00:38:29,920
trying to break stuff and i start

1145
00:38:29,920 --> 00:38:31,119
writing notes

1146
00:38:31,119 --> 00:38:34,400
um when we do this we want to do our

1147
00:38:34,400 --> 00:38:36,320
validate what i call validating security

1148
00:38:36,320 --> 00:38:38,720
findings and controls um very

1149
00:38:38,720 --> 00:38:40,720
strategically and it's specific to what

1150
00:38:40,720 --> 00:38:42,480
i just said my security findings are

1151
00:38:42,480 --> 00:38:44,240
what i'm validating so that's coming off

1152
00:38:44,240 --> 00:38:46,160
my automated tests right those are the

1153
00:38:46,160 --> 00:38:47,520
alerts i've received now i'm going to

1154
00:38:47,520 --> 00:38:49,440
validate their actually security

1155
00:38:49,440 --> 00:38:51,760
problems and then i'm going to validate

1156
00:38:51,760 --> 00:38:53,440
my security controls

1157
00:38:53,440 --> 00:38:54,800
these are the security controls i

1158
00:38:54,800 --> 00:38:57,920
identified in threat modeling that are

1159
00:38:57,920 --> 00:39:00,079
need to be manually validated or should

1160
00:39:00,079 --> 00:39:01,359
be manually valid to make sure they're

1161
00:39:01,359 --> 00:39:03,680
working properly the automation not may

1162
00:39:03,680 --> 00:39:06,560
not test well enough and or should just

1163
00:39:06,560 --> 00:39:09,200
be tested

1164
00:39:09,200 --> 00:39:10,160
first thing you want to do is you want

1165
00:39:10,160 --> 00:39:11,920
to identify the threat and vulnerability

1166
00:39:11,920 --> 00:39:13,040
and this is what's talking about here

1167
00:39:13,040 --> 00:39:16,000
it's coming from our das sas is tools as

1168
00:39:16,000 --> 00:39:17,760
well as coming from our threat model and

1169
00:39:17,760 --> 00:39:19,359
we put in our security testing strategy

1170
00:39:19,359 --> 00:39:20,560
saying we're going to validate those

1171
00:39:20,560 --> 00:39:23,119
security controls during pen testing so

1172
00:39:23,119 --> 00:39:24,400
as you guys are starting to probably see

1173
00:39:24,400 --> 00:39:26,000
that the entire premise especially

1174
00:39:26,000 --> 00:39:28,640
nothing in here is some unique crazy

1175
00:39:28,640 --> 00:39:30,560
idea that people aren't already doing in

1176
00:39:30,560 --> 00:39:32,079
pieces of parts it's how do we put it

1177
00:39:32,079 --> 00:39:33,800
all together so it feeds into a

1178
00:39:33,800 --> 00:39:36,480
well-formed process i understand my

1179
00:39:36,480 --> 00:39:38,800
security controls that allows me to do

1180
00:39:38,800 --> 00:39:40,880
good threat modeling which is gonna feed

1181
00:39:40,880 --> 00:39:42,480
into how i'm gonna build my security

1182
00:39:42,480 --> 00:39:44,640
testing strategy now that i have a good

1183
00:39:44,640 --> 00:39:46,400
security testing strategy i know how to

1184
00:39:46,400 --> 00:39:48,720
set up my automating testing and now at

1185
00:39:48,720 --> 00:39:51,280
the final end i can do a good focus

1186
00:39:51,280 --> 00:39:53,839
penetration test against my application

1187
00:39:53,839 --> 00:39:56,480
based on the feedback i got from my

1188
00:39:56,480 --> 00:39:58,480
automation tools and the threats i

1189
00:39:58,480 --> 00:40:00,720
identified in mitigation the idea is it

1190
00:40:00,720 --> 00:40:03,359
cascades and it feeds into each other in

1191
00:40:03,359 --> 00:40:05,680
a systematic approach so security

1192
00:40:05,680 --> 00:40:07,839
testers are staying engaged at each

1193
00:40:07,839 --> 00:40:11,319
phase of development

1194
00:40:14,240 --> 00:40:16,079
understand the vulnerability i cannot

1195
00:40:16,079 --> 00:40:17,760
emphasize this enough

1196
00:40:17,760 --> 00:40:20,560
so this can does not mean that when i

1197
00:40:20,560 --> 00:40:23,119
check sqli i google once see the top

1198
00:40:23,119 --> 00:40:25,440
five ways that i know you can do an sql

1199
00:40:25,440 --> 00:40:27,359
vulnerability and i call it done once i

1200
00:40:27,359 --> 00:40:28,480
test those

1201
00:40:28,480 --> 00:40:30,400
you need to understand how that

1202
00:40:30,400 --> 00:40:32,560
vulnerability actually works when i test

1203
00:40:32,560 --> 00:40:35,760
access control i need to know how the

1204
00:40:35,760 --> 00:40:37,599
actual security control we put in place

1205
00:40:37,599 --> 00:40:39,920
works so i can test against it i just

1206
00:40:39,920 --> 00:40:41,760
once again just go at like the one of

1207
00:40:41,760 --> 00:40:43,760
the great places oas testing guide

1208
00:40:43,760 --> 00:40:46,000
amazing place to go check out how to

1209
00:40:46,000 --> 00:40:49,119
test those individual vulnerabilities um

1210
00:40:49,119 --> 00:40:53,160
for those specific threats

1211
00:40:56,240 --> 00:40:58,640
choosing the proper tools and techniques

1212
00:40:58,640 --> 00:41:00,480
so this is very specific to how i'm

1213
00:41:00,480 --> 00:41:02,319
going to go about this like a good

1214
00:41:02,319 --> 00:41:04,319
example my dom cross-site scripting the

1215
00:41:04,319 --> 00:41:05,920
best there's not a really good tool to

1216
00:41:05,920 --> 00:41:07,280
validate that there's a few of them that

1217
00:41:07,280 --> 00:41:08,960
try but there's not to be honest i need

1218
00:41:08,960 --> 00:41:10,160
to go to the interface i need to

1219
00:41:10,160 --> 00:41:12,079
manipulate the data in a way that i know

1220
00:41:12,079 --> 00:41:14,240
is going to reflect data back and cause

1221
00:41:14,240 --> 00:41:16,560
a security alert so then i cannot verify

1222
00:41:16,560 --> 00:41:18,560
okay my security control is sanitizing

1223
00:41:18,560 --> 00:41:20,720
that input and it's not an exploitable

1224
00:41:20,720 --> 00:41:22,560
vulnerability

1225
00:41:22,560 --> 00:41:24,319
other ones tools will help we'll be able

1226
00:41:24,319 --> 00:41:27,200
to use burp suite as a

1227
00:41:27,200 --> 00:41:29,680
interceptor or to be able to manipulate

1228
00:41:29,680 --> 00:41:30,960
the data before it goes back to the

1229
00:41:30,960 --> 00:41:33,520
server so i can validate that we're not

1230
00:41:33,520 --> 00:41:35,760
doing just input validation on the

1231
00:41:35,760 --> 00:41:37,599
client side but the input validations

1232
00:41:37,599 --> 00:41:39,280
actually be done on the server side

1233
00:41:39,280 --> 00:41:40,800
right so it's knowing the different ways

1234
00:41:40,800 --> 00:41:41,920
that this

1235
00:41:41,920 --> 00:41:43,680
can be exploited and choosing the right

1236
00:41:43,680 --> 00:41:48,279
tools to exploit it

1237
00:41:49,280 --> 00:41:50,960
define the test objectives this is

1238
00:41:50,960 --> 00:41:52,480
really important before because the next

1239
00:41:52,480 --> 00:41:53,920
phase is the fun part we just go in and

1240
00:41:53,920 --> 00:41:55,760
actually do it right so we're setting up

1241
00:41:55,760 --> 00:41:57,520
to this right but before i go in and

1242
00:41:57,520 --> 00:41:59,440
just do it i need to define my criteria

1243
00:41:59,440 --> 00:42:01,280
of what a what is a passing test and

1244
00:42:01,280 --> 00:42:02,400
failing test

1245
00:42:02,400 --> 00:42:04,400
right i need to have a criteria before i

1246
00:42:04,400 --> 00:42:08,000
go in so saying that okay i i um i think

1247
00:42:08,000 --> 00:42:09,680
that the security control works because

1248
00:42:09,680 --> 00:42:12,160
i've run x y and z and i was unable to

1249
00:42:12,160 --> 00:42:14,000
have this result

1250
00:42:14,000 --> 00:42:16,800
right have that clearly defined based on

1251
00:42:16,800 --> 00:42:19,920
what you're trying to test

1252
00:42:21,760 --> 00:42:23,040
and then our favorite

1253
00:42:23,040 --> 00:42:24,960
exploit the vulnerability we finally

1254
00:42:24,960 --> 00:42:27,359
after all this process and all this work

1255
00:42:27,359 --> 00:42:29,280
get to go break our code and show that

1256
00:42:29,280 --> 00:42:32,880
either it's safe or it's not

1257
00:42:33,839 --> 00:42:35,119
the last step of this is we need to

1258
00:42:35,119 --> 00:42:37,359
confirm those results and it's not just

1259
00:42:37,359 --> 00:42:39,280
confirm the results as in like oh i got

1260
00:42:39,280 --> 00:42:41,119
a security alert box that popped up that

1261
00:42:41,119 --> 00:42:43,440
i was able to get on my interface okay

1262
00:42:43,440 --> 00:42:45,839
you confirmed it now why

1263
00:42:45,839 --> 00:42:47,440
why did that happen

1264
00:42:47,440 --> 00:42:50,400
so what was not done properly that

1265
00:42:50,400 --> 00:42:52,000
allowed that to happen because it's not

1266
00:42:52,000 --> 00:42:53,680
enough to confirm the security alert and

1267
00:42:53,680 --> 00:42:55,599
then throw it over the devs and say fix

1268
00:42:55,599 --> 00:42:56,640
it

1269
00:42:56,640 --> 00:42:59,040
do the research and figure out why that

1270
00:42:59,040 --> 00:43:00,640
exploit actually happened why were you

1271
00:43:00,640 --> 00:43:02,720
able to do that was it and you're gonna

1272
00:43:02,720 --> 00:43:05,440
use that information to fix one of three

1273
00:43:05,440 --> 00:43:07,760
things

1274
00:43:09,280 --> 00:43:11,040
so you're gonna either have to refactor

1275
00:43:11,040 --> 00:43:12,560
the code

1276
00:43:12,560 --> 00:43:15,280
right or you're gonna have to

1277
00:43:15,280 --> 00:43:16,880
update the security control because it's

1278
00:43:16,880 --> 00:43:17,760
either

1279
00:43:17,760 --> 00:43:19,760
in place improperly or obviously not

1280
00:43:19,760 --> 00:43:21,520
doing what's supposed to do or you're

1281
00:43:21,520 --> 00:43:23,119
gonna have to implement a new security

1282
00:43:23,119 --> 00:43:24,720
control because

1283
00:43:24,720 --> 00:43:26,640
putting one in the first place

1284
00:43:26,640 --> 00:43:28,960
so those are the three basic outcomes

1285
00:43:28,960 --> 00:43:30,000
that you can come from finding a

1286
00:43:30,000 --> 00:43:31,119
security layer we need to change the

1287
00:43:31,119 --> 00:43:34,079
code fix our security control or add a

1288
00:43:34,079 --> 00:43:36,079
new security control and the idea is

1289
00:43:36,079 --> 00:43:38,480
that we have a good base plan of how to

1290
00:43:38,480 --> 00:43:40,000
fix the problem not just the fact that

1291
00:43:40,000 --> 00:43:42,960
we identified the problem

1292
00:43:42,960 --> 00:43:45,839
and then once we implement the final fix

1293
00:43:45,839 --> 00:43:48,160
validate the fixed work and validate

1294
00:43:48,160 --> 00:43:49,440
that you didn't introduce a new

1295
00:43:49,440 --> 00:43:51,200
vulnerability while trying to fix the

1296
00:43:51,200 --> 00:43:53,920
old one especially if you're changing a

1297
00:43:53,920 --> 00:43:56,240
security control like oh it didn't work

1298
00:43:56,240 --> 00:43:57,760
this way so i'm going to change the way

1299
00:43:57,760 --> 00:43:59,680
it's set up and configured okay well now

1300
00:43:59,680 --> 00:44:01,359
you have to go back in and do thorough

1301
00:44:01,359 --> 00:44:02,960
testing of everything on that security

1302
00:44:02,960 --> 00:44:04,640
control to make sure that you didn't

1303
00:44:04,640 --> 00:44:06,079
break something else in the process of

1304
00:44:06,079 --> 00:44:09,720
trying to fix it

1305
00:44:10,480 --> 00:44:12,560
so swisstoll

1306
00:44:12,560 --> 00:44:14,079
know your security requirements it's

1307
00:44:14,079 --> 00:44:15,440
going to allow you to do good threat

1308
00:44:15,440 --> 00:44:17,040
modeling it's going to help you build a

1309
00:44:17,040 --> 00:44:19,520
very strategic testing strategy it's

1310
00:44:19,520 --> 00:44:21,040
going to allow you to customize your

1311
00:44:21,040 --> 00:44:23,280
automation for your product which is

1312
00:44:23,280 --> 00:44:24,400
going to allow you to validate your

1313
00:44:24,400 --> 00:44:27,440
security controls

1314
00:44:30,960 --> 00:44:33,839
now how do we adopt this

1315
00:44:33,839 --> 00:44:35,680
depends on your application depends on

1316
00:44:35,680 --> 00:44:38,079
your work environment and if you do

1317
00:44:38,079 --> 00:44:40,640
anything at all do the first three steps

1318
00:44:40,640 --> 00:44:42,319
because you cannot protect what you

1319
00:44:42,319 --> 00:44:43,760
don't understand

1320
00:44:43,760 --> 00:44:45,359
the first three steps

1321
00:44:45,359 --> 00:44:46,880
of knowing what your security

1322
00:44:46,880 --> 00:44:48,720
requirements are doing a threat model

1323
00:44:48,720 --> 00:44:50,480
and building a strategy

1324
00:44:50,480 --> 00:44:52,560
if you can do nothing else start there

1325
00:44:52,560 --> 00:44:53,839
because at least at that point you

1326
00:44:53,839 --> 00:44:55,200
understand the threats that are facing

1327
00:44:55,200 --> 00:44:56,640
your application to have a plan of how

1328
00:44:56,640 --> 00:44:58,319
you're going to mitigate them

1329
00:44:58,319 --> 00:44:59,599
the idea is that this should be

1330
00:44:59,599 --> 00:45:00,960
customizable for your environment this

1331
00:45:00,960 --> 00:45:03,119
might not work if i'm a single dev

1332
00:45:03,119 --> 00:45:04,960
with like two other people working on a

1333
00:45:04,960 --> 00:45:06,240
small project

1334
00:45:06,240 --> 00:45:08,240
all these steps don't make sense take

1335
00:45:08,240 --> 00:45:09,920
the concepts that make sense for your

1336
00:45:09,920 --> 00:45:11,040
project

1337
00:45:11,040 --> 00:45:12,240
and apply them that's what's gonna

1338
00:45:12,240 --> 00:45:13,520
happen in threat modeling and threat

1339
00:45:13,520 --> 00:45:15,680
modeling those first two steps i'm gonna

1340
00:45:15,680 --> 00:45:17,040
look at my application you're like ah

1341
00:45:17,040 --> 00:45:18,400
we're not gonna run automated tests

1342
00:45:18,400 --> 00:45:20,079
because my application's like two pages

1343
00:45:20,079 --> 00:45:22,319
long and it does a simple task right

1344
00:45:22,319 --> 00:45:24,079
identify what you need to do during

1345
00:45:24,079 --> 00:45:25,599
threat modeling and customize this to

1346
00:45:25,599 --> 00:45:28,400
fit your environment

1347
00:45:29,440 --> 00:45:31,920
this is not meant to replace the

1348
00:45:31,920 --> 00:45:33,760
software development life cycle or the

1349
00:45:33,760 --> 00:45:35,839
secure development life cycle this is

1350
00:45:35,839 --> 00:45:38,000
meant to supplement it

1351
00:45:38,000 --> 00:45:40,800
this is how do i as a security test what

1352
00:45:40,800 --> 00:45:43,359
am i supposed to do during each phase of

1353
00:45:43,359 --> 00:45:45,200
this development cycle that's going to

1354
00:45:45,200 --> 00:45:46,720
help increase the security of my

1355
00:45:46,720 --> 00:45:49,279
application

1356
00:45:55,760 --> 00:45:57,200
dev ops

1357
00:45:57,200 --> 00:45:59,599
or devsecops i guess the security is

1358
00:45:59,599 --> 00:46:02,400
implied right

1359
00:46:02,560 --> 00:46:05,280
so devops it fits devops too um once

1360
00:46:05,280 --> 00:46:07,119
again you have to customize it to how

1361
00:46:07,119 --> 00:46:09,599
your build pipeline makes sense and when

1362
00:46:09,599 --> 00:46:11,040
you do your threat model and you start

1363
00:46:11,040 --> 00:46:12,800
implementing it look at the different

1364
00:46:12,800 --> 00:46:14,800
phases of devops and apply what makes

1365
00:46:14,800 --> 00:46:16,079
sense so one of the biggest things to

1366
00:46:16,079 --> 00:46:18,000
take away is take away the concepts of

1367
00:46:18,000 --> 00:46:19,440
each phase and how they drive into the

1368
00:46:19,440 --> 00:46:21,040
next and apply common sense to your

1369
00:46:21,040 --> 00:46:23,440
project

1370
00:46:26,240 --> 00:46:27,680
key takeaways

1371
00:46:27,680 --> 00:46:29,040
i'll let you guys read those as i kind

1372
00:46:29,040 --> 00:46:31,520
of talk at the end here um biggest thing

1373
00:46:31,520 --> 00:46:33,839
is like i said no new novel crazy ideas

1374
00:46:33,839 --> 00:46:35,680
for an individual task it's just how are

1375
00:46:35,680 --> 00:46:37,839
we putting them together in a way that

1376
00:46:37,839 --> 00:46:40,640
makes sense to secure our application

1377
00:46:40,640 --> 00:46:43,040
um if you guys have any questions of me

1378
00:46:43,040 --> 00:46:44,480
um during the conference i'll be over

1379
00:46:44,480 --> 00:46:46,160
near my booth or security junior booth

1380
00:46:46,160 --> 00:46:47,599
right at the entryway if you want to

1381
00:46:47,599 --> 00:46:49,520
talk about application security the

1382
00:46:49,520 --> 00:46:51,440
software security testing life cycle you

1383
00:46:51,440 --> 00:46:53,119
want to talk about my previous military

1384
00:46:53,119 --> 00:46:55,760
career i'm a guy i like to talk

1385
00:46:55,760 --> 00:46:57,359
i'll chat with you come hang out with me

1386
00:46:57,359 --> 00:46:58,319
okay

1387
00:46:58,319 --> 00:46:59,440
um

1388
00:46:59,440 --> 00:47:00,800
so

1389
00:47:00,800 --> 00:47:02,640
anyone at this point have any questions

1390
00:47:02,640 --> 00:47:04,160
you want to ask me about swissler or

1391
00:47:04,160 --> 00:47:06,640
anything else

1392
00:47:08,720 --> 00:47:10,720
all right the talk was that good i love

1393
00:47:10,720 --> 00:47:12,079
it

1394
00:47:12,079 --> 00:47:14,000
um also feel free to reach out to me on

1395
00:47:14,000 --> 00:47:16,720
twitter appsetguyunderscoremike

1396
00:47:16,720 --> 00:47:18,400
or on linkedin just a really long

1397
00:47:18,400 --> 00:47:20,800
version of my uh whole name michael j

1398
00:47:20,800 --> 00:47:23,280
burch um i love that the contacts i love

1399
00:47:23,280 --> 00:47:25,200
to talk security so

1400
00:47:25,200 --> 00:47:26,400
feel free to reach out thank you guys

1401
00:47:26,400 --> 00:47:29,160
you were awesome

1402
00:47:29,160 --> 00:47:33,190
[Applause]

