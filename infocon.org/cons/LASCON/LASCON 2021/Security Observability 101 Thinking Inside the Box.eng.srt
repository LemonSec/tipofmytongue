1
00:00:03,990 --> 00:00:18,110
[Music]

2
00:00:19,039 --> 00:00:23,840
so my name is jeff williams uh i am

3
00:00:26,720 --> 00:00:27,840
so

4
00:00:27,840 --> 00:00:30,080
so this way so i'm on the national

5
00:00:30,080 --> 00:00:32,399
champion 15 over basketball team

6
00:00:32,399 --> 00:00:35,120
i'm a accomplished boomerang designer

7
00:00:35,120 --> 00:00:36,399
and thrower

8
00:00:36,399 --> 00:00:38,719
and i'm also the cto of contrast

9
00:00:38,719 --> 00:00:41,680
security i co-founded in a few years

10
00:00:41,680 --> 00:00:42,719
back

11
00:00:42,719 --> 00:00:44,239
i've been involved with oas for a number

12
00:00:44,239 --> 00:00:46,800
of years i got started uh

13
00:00:46,800 --> 00:00:48,239
really early i

14
00:00:48,239 --> 00:00:49,600
consider myself one of the founders of

15
00:00:49,600 --> 00:00:50,719
oas

16
00:00:50,719 --> 00:00:51,920
uh

17
00:00:51,920 --> 00:00:54,559
became the first chair of owasp so i was

18
00:00:54,559 --> 00:00:56,239
the first global chair of the

19
00:00:56,239 --> 00:00:58,160
organization and i was that for the

20
00:00:58,160 --> 00:01:00,559
first 10 years i wrote the os top 10

21
00:01:00,559 --> 00:01:02,800
wrote web goat contributed a lot of

22
00:01:02,800 --> 00:01:04,799
different projects to os and i'm still

23
00:01:04,799 --> 00:01:06,880
i'm super excited to see how osp has

24
00:01:06,880 --> 00:01:09,439
grown over the years

25
00:01:09,439 --> 00:01:11,920
uh i'm incredibly excited to talk to you

26
00:01:11,920 --> 00:01:13,920
today about instrumentation

27
00:01:13,920 --> 00:01:16,240
the idea of instrumenting software to me

28
00:01:16,240 --> 00:01:18,560
is just amazing

29
00:01:18,560 --> 00:01:20,880
and i want to try to expose you to the

30
00:01:20,880 --> 00:01:22,479
power of what we can do with

31
00:01:22,479 --> 00:01:25,200
instrumentation

32
00:01:25,200 --> 00:01:28,000
in this talk and uh and get you excited

33
00:01:28,000 --> 00:01:30,000
about it so let's jump into it i'm going

34
00:01:30,000 --> 00:01:32,320
to do some a few slides and some

35
00:01:32,320 --> 00:01:34,400
demonstrations to show you how you can

36
00:01:34,400 --> 00:01:37,119
use instrumentation today

37
00:01:37,119 --> 00:01:38,720
i always try to start out and talk with

38
00:01:38,720 --> 00:01:41,280
some facts about appsec i don't know not

39
00:01:41,280 --> 00:01:43,200
everybody hears you know does appsec

40
00:01:43,200 --> 00:01:44,560
every day so i thought it's useful to

41
00:01:44,560 --> 00:01:46,720
just like set the stage these are facts

42
00:01:46,720 --> 00:01:49,200
that we gathered from our customer base

43
00:01:49,200 --> 00:01:50,960
we've got tens of thousands of real

44
00:01:50,960 --> 00:01:53,119
world applications that we monitor for

45
00:01:53,119 --> 00:01:54,880
application vulnerabilities we look at

46
00:01:54,880 --> 00:01:56,560
libraries we look at

47
00:01:56,560 --> 00:01:59,680
uh attacks in the runtime environments

48
00:01:59,680 --> 00:02:01,600
and we bring all that data together and

49
00:02:01,600 --> 00:02:03,759
we publish a report that's got some of

50
00:02:03,759 --> 00:02:05,680
this in it but

51
00:02:05,680 --> 00:02:07,840
when you look at these numbers

52
00:02:07,840 --> 00:02:10,399
you should be concerned

53
00:02:10,399 --> 00:02:13,599
who here banks online

54
00:02:13,760 --> 00:02:15,120
okay there's some people to raise their

55
00:02:15,120 --> 00:02:16,720
hand and some other liars

56
00:02:16,720 --> 00:02:18,560
there's

57
00:02:18,560 --> 00:02:19,840
because it actually doesn't matter if

58
00:02:19,840 --> 00:02:22,319
you use the bank software itself your

59
00:02:22,319 --> 00:02:24,080
data is already in the same software

60
00:02:24,080 --> 00:02:25,280
that other people are using you're just

61
00:02:25,280 --> 00:02:28,400
not using it

62
00:02:29,760 --> 00:02:33,120
these numbers are not fantastic

63
00:02:33,120 --> 00:02:34,879
this says

64
00:02:34,879 --> 00:02:37,680
you know we've got uh on average like 30

65
00:02:37,680 --> 00:02:40,640
vulnerabilities per app

66
00:02:40,640 --> 00:02:41,680
can you imagine if we were building

67
00:02:41,680 --> 00:02:43,280
airplanes

68
00:02:43,280 --> 00:02:44,800
and every time we did a safety check we

69
00:02:44,800 --> 00:02:46,640
found 30 safety problems that would be

70
00:02:46,640 --> 00:02:50,640
ridiculous nobody would fly but we

71
00:02:50,640 --> 00:02:52,560
tolerated in the software industry for

72
00:02:52,560 --> 00:02:54,000
some reason

73
00:02:54,000 --> 00:02:55,760
uh we've got a lot of open source

74
00:02:55,760 --> 00:02:58,400
library problems that's layers on top of

75
00:02:58,400 --> 00:02:59,920
that

76
00:02:59,920 --> 00:03:01,680
you should know by the way though

77
00:03:01,680 --> 00:03:02,959
that

78
00:03:02,959 --> 00:03:04,800
most open source

79
00:03:04,800 --> 00:03:07,200
never gets called

80
00:03:07,200 --> 00:03:10,000
only seven percent of the open source

81
00:03:10,000 --> 00:03:12,319
code in an application actually ever

82
00:03:12,319 --> 00:03:13,920
runs

83
00:03:13,920 --> 00:03:15,840
and we measure this at runtime using

84
00:03:15,840 --> 00:03:18,000
instrumentation we measure this exactly

85
00:03:18,000 --> 00:03:19,360
so we're sure that we've got the right

86
00:03:19,360 --> 00:03:22,239
answer here it's really kind of amazing

87
00:03:22,239 --> 00:03:24,560
um

88
00:03:25,920 --> 00:03:28,159
the biggest challenge i see with this

89
00:03:28,159 --> 00:03:29,599
this the left side of this page the

90
00:03:29,599 --> 00:03:32,640
vulnerability side is that you know i

91
00:03:32,640 --> 00:03:35,840
wrote the first os top 10 in 2002

92
00:03:35,840 --> 00:03:39,280
and we haven't really changed the game

93
00:03:39,280 --> 00:03:41,519
it's the same vulnerabilities in there

94
00:03:41,519 --> 00:03:42,720
today

95
00:03:42,720 --> 00:03:44,319
i thought you know we'd write the os top

96
00:03:44,319 --> 00:03:46,799
10 we'd work on it for a few years we'd

97
00:03:46,799 --> 00:03:48,400
fix some of those things we'd raise the

98
00:03:48,400 --> 00:03:49,920
bar and we'd issue a new top 10 with

99
00:03:49,920 --> 00:03:52,000
different stuff in it but it's you know

100
00:03:52,000 --> 00:03:54,720
we're almost we're 19 years later it's

101
00:03:54,720 --> 00:03:56,640
still the same stuff in there

102
00:03:56,640 --> 00:03:59,120
that's an indictment of

103
00:03:59,120 --> 00:04:01,120
of apsec i love oas but i love all the

104
00:04:01,120 --> 00:04:03,040
cool things that we've built and done

105
00:04:03,040 --> 00:04:04,159
but

106
00:04:04,159 --> 00:04:06,959
we are not changing the game yet i'm

107
00:04:06,959 --> 00:04:08,879
doing a keynote tomorrow morning where

108
00:04:08,879 --> 00:04:10,400
i'm going to zoom out and talk about

109
00:04:10,400 --> 00:04:11,840
that picture

110
00:04:11,840 --> 00:04:14,560
and dig into that problem but this talk

111
00:04:14,560 --> 00:04:17,839
is really much more technical um

112
00:04:17,839 --> 00:04:19,519
i also wanted to say we're also under

113
00:04:19,519 --> 00:04:21,358
attack most organizations don't have

114
00:04:21,358 --> 00:04:23,840
good visibility into who's attacking

115
00:04:23,840 --> 00:04:25,840
them and how they're being attacked and

116
00:04:25,840 --> 00:04:28,000
which systems are being targeted i just

117
00:04:28,000 --> 00:04:29,600
want you to know that it is happening

118
00:04:29,600 --> 00:04:32,800
the average application that we protect

119
00:04:32,800 --> 00:04:34,960
are are attacked

120
00:04:34,960 --> 00:04:37,360
13 000 times a month

121
00:04:37,360 --> 00:04:39,120
that's that's a big number i mean that's

122
00:04:39,120 --> 00:04:40,800
a lot of attacks so if you combine these

123
00:04:40,800 --> 00:04:42,639
two sides of this we've got a lot of

124
00:04:42,639 --> 00:04:44,400
vulnerability and a lot of attackers

125
00:04:44,400 --> 00:04:46,240
it's not a great situation that we're in

126
00:04:46,240 --> 00:04:49,360
so something has to change

127
00:04:49,759 --> 00:04:51,120
but today's talk is about

128
00:04:51,120 --> 00:04:52,800
instrumentation

129
00:04:52,800 --> 00:04:54,800
so who can give me an example of some

130
00:04:54,800 --> 00:04:57,040
instrumentation

131
00:04:57,040 --> 00:04:58,479
any in any kind if they're not in

132
00:04:58,479 --> 00:05:00,080
software but like in any kind of thing

133
00:05:00,080 --> 00:05:03,280
what's what's instrumented

134
00:05:04,400 --> 00:05:05,759
yeah sure like your car's got

135
00:05:05,759 --> 00:05:06,880
instrumentation right it's got

136
00:05:06,880 --> 00:05:08,960
speedometer it's got you know tire

137
00:05:08,960 --> 00:05:11,199
warnings and out of gas indicators all

138
00:05:11,199 --> 00:05:12,800
kinds of instrumentation right you

139
00:05:12,800 --> 00:05:15,039
wouldn't drive without that stuff

140
00:05:15,039 --> 00:05:16,400
right

141
00:05:16,400 --> 00:05:17,520
what's some other things that are

142
00:05:17,520 --> 00:05:20,080
instrumented

143
00:05:23,039 --> 00:05:25,039
okay that's really interesting right

144
00:05:25,039 --> 00:05:26,000
i don't know if they're actually

145
00:05:26,000 --> 00:05:27,680
measuring them directly

146
00:05:27,680 --> 00:05:29,600
but you do get it i mean i mean they

147
00:05:29,600 --> 00:05:30,960
probably are

148
00:05:30,960 --> 00:05:32,560
but like i think of instrumentation as

149
00:05:32,560 --> 00:05:34,800
being like you know directly anybody

150
00:05:34,800 --> 00:05:37,759
wearing a apple watch or a fitbit or

151
00:05:37,759 --> 00:05:41,120
something guess what you're instrumented

152
00:05:41,120 --> 00:05:43,039
that thing probably knows you're sick

153
00:05:43,039 --> 00:05:45,600
before you do

154
00:05:45,600 --> 00:05:47,840
instrumentation is key like think about

155
00:05:47,840 --> 00:05:50,400
the modern industrial factory

156
00:05:50,400 --> 00:05:53,520
it's instrumented for vibration and fire

157
00:05:53,520 --> 00:05:56,000
and temperature and sound and everything

158
00:05:56,000 --> 00:05:57,680
that could go wrong

159
00:05:57,680 --> 00:05:58,720
they know

160
00:05:58,720 --> 00:06:00,720
when a machine is going to break

161
00:06:00,720 --> 00:06:02,400
before it breaks because like the

162
00:06:02,400 --> 00:06:05,759
vibration in the factory changed

163
00:06:05,759 --> 00:06:07,840
they would never operate their stuff

164
00:06:07,840 --> 00:06:10,000
without instrumentation would be crazy

165
00:06:10,000 --> 00:06:11,039
because they would never be able to

166
00:06:11,039 --> 00:06:12,800
figure out what's going on inside those

167
00:06:12,800 --> 00:06:15,280
complex machines

168
00:06:15,280 --> 00:06:17,919
so software is the most complex thing

169
00:06:17,919 --> 00:06:20,479
that we have ever created that that

170
00:06:20,479 --> 00:06:21,680
exists

171
00:06:21,680 --> 00:06:23,919
and it's barely instrumented at all

172
00:06:23,919 --> 00:06:27,360
log files are terrible instrumentation

173
00:06:27,360 --> 00:06:29,280
if you've ever looked at log files they

174
00:06:29,280 --> 00:06:31,360
don't have the right stuff in them they

175
00:06:31,360 --> 00:06:33,199
don't have uh you know they've got

176
00:06:33,199 --> 00:06:34,880
exceptions from you know errors that get

177
00:06:34,880 --> 00:06:36,800
thrown but log files are like after the

178
00:06:36,800 --> 00:06:39,280
fact they're not real time they're you

179
00:06:39,280 --> 00:06:41,680
can't decide to turn on some sensors and

180
00:06:41,680 --> 00:06:45,440
off sensors it's really not good now

181
00:06:45,440 --> 00:06:46,800
this here

182
00:06:46,800 --> 00:06:47,680
is

183
00:06:47,680 --> 00:06:49,440
the 9450

184
00:06:49,440 --> 00:06:51,919
this is an instrumented basketball

185
00:06:51,919 --> 00:06:54,000
and i like using basketball examples uh

186
00:06:54,000 --> 00:06:56,400
because i play a little bit so

187
00:06:56,400 --> 00:06:58,240
uh this thing

188
00:06:58,240 --> 00:07:00,080
measures your dribble speed the arc of

189
00:07:00,080 --> 00:07:02,240
your shots the rotation of the ball

190
00:07:02,240 --> 00:07:04,400
everything and gives you cool dashboards

191
00:07:04,400 --> 00:07:06,880
and it gives you feedback on how you're

192
00:07:06,880 --> 00:07:08,000
playing

193
00:07:08,000 --> 00:07:11,360
in a way it can replace the coach

194
00:07:11,360 --> 00:07:13,840
and in an industry where we've got a

195
00:07:13,840 --> 00:07:15,919
massive shortage of experts in

196
00:07:15,919 --> 00:07:18,560
application security and lots and lots

197
00:07:18,560 --> 00:07:21,039
of players out there writing code

198
00:07:21,039 --> 00:07:22,800
we could do with some things that help

199
00:07:22,800 --> 00:07:24,560
force multiplier to help our coaches

200
00:07:24,560 --> 00:07:26,400
like imagine if you give a bunch of

201
00:07:26,400 --> 00:07:28,240
players this ball and they can go

202
00:07:28,240 --> 00:07:30,560
improve their skills get measured by

203
00:07:30,560 --> 00:07:31,919
their coach and their coach can be more

204
00:07:31,919 --> 00:07:34,400
strategic giving them specific things to

205
00:07:34,400 --> 00:07:35,599
work on

206
00:07:35,599 --> 00:07:37,520
based on the data that's what we can do

207
00:07:37,520 --> 00:07:40,000
with instrumentation we can empower all

208
00:07:40,000 --> 00:07:42,400
the apps experts out there

209
00:07:42,400 --> 00:07:43,840
to

210
00:07:43,840 --> 00:07:46,319
teach their teach their players a lot

211
00:07:46,319 --> 00:07:48,639
better

212
00:07:50,400 --> 00:07:51,199
so

213
00:07:51,199 --> 00:07:52,960
the good thing

214
00:07:52,960 --> 00:07:55,120
about software is that it's really

215
00:07:55,120 --> 00:07:56,879
malleable

216
00:07:56,879 --> 00:07:59,919
we can instrument software easily

217
00:07:59,919 --> 00:08:01,520
this is a little diagram that shows how

218
00:08:01,520 --> 00:08:03,520
the instrumentation engine in java works

219
00:08:03,520 --> 00:08:06,080
it's pretty similar in other languages

220
00:08:06,080 --> 00:08:07,919
um

221
00:08:07,919 --> 00:08:10,000
but you start with the original code on

222
00:08:10,000 --> 00:08:12,479
disk so imagine you've got a binary some

223
00:08:12,479 --> 00:08:15,120
war file or a jar file executable jar

224
00:08:15,120 --> 00:08:17,120
file something

225
00:08:17,120 --> 00:08:19,360
what normally happens is the class

226
00:08:19,360 --> 00:08:21,599
loader loads that code straight into

227
00:08:21,599 --> 00:08:22,639
memory

228
00:08:22,639 --> 00:08:23,680
and then

229
00:08:23,680 --> 00:08:25,520
that's the code that runs

230
00:08:25,520 --> 00:08:28,000
is exactly what was a copy of what was

231
00:08:28,000 --> 00:08:29,039
on disk

232
00:08:29,039 --> 00:08:31,199
but the instrumentation api allows you

233
00:08:31,199 --> 00:08:34,080
to intercept that process so as the code

234
00:08:34,080 --> 00:08:36,399
moves from disk into memory you get a

235
00:08:36,399 --> 00:08:39,120
chance to insert sensors in it

236
00:08:39,120 --> 00:08:40,958
and you can insert you know whatever

237
00:08:40,958 --> 00:08:42,399
kind of sensors you want to measure

238
00:08:42,399 --> 00:08:44,240
what's going on in the application but

239
00:08:44,240 --> 00:08:48,240
you can instrument it as it loads

240
00:08:49,519 --> 00:08:51,040
that allows you

241
00:08:51,040 --> 00:08:54,080
to add security sensors to this to this

242
00:08:54,080 --> 00:08:55,839
code so that you can see what's going on

243
00:08:55,839 --> 00:08:58,160
inside the application from within this

244
00:08:58,160 --> 00:09:00,720
is exactly the same technique that

245
00:09:00,720 --> 00:09:02,320
companies like new relic and app

246
00:09:02,320 --> 00:09:04,320
dynamics use to do performance

247
00:09:04,320 --> 00:09:06,000
measurements

248
00:09:06,000 --> 00:09:07,440
as the code loads

249
00:09:07,440 --> 00:09:10,080
instrument it they put timing in timing

250
00:09:10,080 --> 00:09:11,519
sensors into it well we're gonna put

251
00:09:11,519 --> 00:09:13,680
security sensors into our code so that

252
00:09:13,680 --> 00:09:16,240
we can watch security working and not

253
00:09:16,240 --> 00:09:18,560
working

254
00:09:18,880 --> 00:09:20,320
anyway so this technique has been around

255
00:09:20,320 --> 00:09:22,959
for like 20 years it's super proven uh

256
00:09:22,959 --> 00:09:24,320
it's

257
00:09:24,320 --> 00:09:27,920
it's just a little tricky to use

258
00:09:27,920 --> 00:09:29,440
but i want you to imagine

259
00:09:29,440 --> 00:09:31,680
doing a pen test

260
00:09:31,680 --> 00:09:34,160
with instrumentation it's almost like

261
00:09:34,160 --> 00:09:37,200
having a friend or an agent inside the

262
00:09:37,200 --> 00:09:39,120
running application who can tell you

263
00:09:39,120 --> 00:09:40,800
what's going on

264
00:09:40,800 --> 00:09:41,600
so

265
00:09:41,600 --> 00:09:44,560
you know normal tests you're blind right

266
00:09:44,560 --> 00:09:46,399
somebody once described pen testing to

267
00:09:46,399 --> 00:09:47,760
me is like trying to figure out what's

268
00:09:47,760 --> 00:09:49,279
wrong with the water heater by staring

269
00:09:49,279 --> 00:09:51,040
up the shower

270
00:09:51,040 --> 00:09:52,000
and

271
00:09:52,000 --> 00:09:53,360
it's a little bit like that you don't

272
00:09:53,360 --> 00:09:54,880
have a ton of information coming back

273
00:09:54,880 --> 00:09:56,480
right so

274
00:09:56,480 --> 00:09:58,240
what if you had a buddy inside the water

275
00:09:58,240 --> 00:09:59,680
heater who was telling you what was

276
00:09:59,680 --> 00:10:01,040
going on as you did your testing you'd

277
00:10:01,040 --> 00:10:03,040
have a lot more visibility and that's

278
00:10:03,040 --> 00:10:05,040
what we can do with instrumentation

279
00:10:05,040 --> 00:10:07,440
imagine sending a

280
00:10:07,440 --> 00:10:10,240
a pen test request into it like maybe

281
00:10:10,240 --> 00:10:11,600
you're using zap or something maybe you

282
00:10:11,600 --> 00:10:14,560
send something into an application and

283
00:10:14,560 --> 00:10:17,120
not only do you get the http response

284
00:10:17,120 --> 00:10:18,880
but you get a whole bunch of other

285
00:10:18,880 --> 00:10:21,760
information like what route was executed

286
00:10:21,760 --> 00:10:24,320
what configs were accessed what back-end

287
00:10:24,320 --> 00:10:26,160
connections got used maybe show me the

288
00:10:26,160 --> 00:10:28,000
sql queries that got executed during

289
00:10:28,000 --> 00:10:29,279
that request

290
00:10:29,279 --> 00:10:32,000
tons of information whatever you want

291
00:10:32,000 --> 00:10:34,800
you can get it with instrumentation

292
00:10:34,800 --> 00:10:35,680
so

293
00:10:35,680 --> 00:10:38,399
to me this is it's critical

294
00:10:38,399 --> 00:10:40,160
to moving forward and

295
00:10:40,160 --> 00:10:41,600
insta i feel really strongly about

296
00:10:41,600 --> 00:10:43,760
instrumentation because it tests the

297
00:10:43,760 --> 00:10:47,760
runtime reality of an application

298
00:10:47,760 --> 00:10:49,440
it's not testing like the code in a

299
00:10:49,440 --> 00:10:51,680
source code repo somewhere that's like

300
00:10:51,680 --> 00:10:52,640
you know

301
00:10:52,640 --> 00:10:55,760
doesn't have the app server and the the

302
00:10:55,760 --> 00:10:58,880
runtime in it uh it's not fully put

303
00:10:58,880 --> 00:11:01,040
together like we're testing a real

304
00:11:01,040 --> 00:11:03,120
application with real data real config

305
00:11:03,120 --> 00:11:04,880
real back-end connections so we can get

306
00:11:04,880 --> 00:11:07,040
all that context and context is what

307
00:11:07,040 --> 00:11:08,800
leads to accuracy

308
00:11:08,800 --> 00:11:10,880
and as i'll talk about tomorrow accuracy

309
00:11:10,880 --> 00:11:12,880
is critical

310
00:11:12,880 --> 00:11:14,480
to getting absec right

311
00:11:14,480 --> 00:11:16,160
if you're not accurate then you have to

312
00:11:16,160 --> 00:11:18,480
have experts involved and and if you

313
00:11:18,480 --> 00:11:20,800
have experts involved

314
00:11:20,800 --> 00:11:24,320
like me it's never going to scale

315
00:11:24,320 --> 00:11:26,240
i'm the problem

316
00:11:26,240 --> 00:11:28,959
dave lindner here the problem

317
00:11:28,959 --> 00:11:30,959
um

318
00:11:30,959 --> 00:11:32,640
so

319
00:11:32,640 --> 00:11:33,600
that's a little background on

320
00:11:33,600 --> 00:11:36,320
instrumentation everybody with me so far

321
00:11:36,320 --> 00:11:38,640
okay i'm gonna demonstrate

322
00:11:38,640 --> 00:11:41,120
instrumentation but it's i i used to do

323
00:11:41,120 --> 00:11:43,440
this with code examples but it's hard

324
00:11:43,440 --> 00:11:46,399
because instrumentation code is a little

325
00:11:46,399 --> 00:11:49,839
complex it's writing code to

326
00:11:49,839 --> 00:11:51,600
instrument other code

327
00:11:51,600 --> 00:11:54,880
so it's just a like it's kind of meta

328
00:11:54,880 --> 00:11:56,720
so i put together a library this is an

329
00:11:56,720 --> 00:11:58,880
open source free and open source project

330
00:11:58,880 --> 00:12:00,320
that anybody can use you can download

331
00:12:00,320 --> 00:12:02,320
it's on github

332
00:12:02,320 --> 00:12:04,240
and

333
00:12:04,240 --> 00:12:06,720
it allows you to to build your own

334
00:12:06,720 --> 00:12:08,720
instrumentation agents

335
00:12:08,720 --> 00:12:10,639
not using not writing code but

336
00:12:10,639 --> 00:12:12,399
configuring the sensors you want to put

337
00:12:12,399 --> 00:12:13,839
in via yaml

338
00:12:13,839 --> 00:12:16,399
so it's a very powerful way to write

339
00:12:16,399 --> 00:12:20,720
sensors that anybody can do

340
00:12:21,040 --> 00:12:22,560
and i do think of instrumentation by the

341
00:12:22,560 --> 00:12:24,480
way like like a multimeter kind of thing

342
00:12:24,480 --> 00:12:25,600
like you're actually sticking these

343
00:12:25,600 --> 00:12:27,760
probes into the methods in your

344
00:12:27,760 --> 00:12:29,760
application and we're going to snapshot

345
00:12:29,760 --> 00:12:31,440
information out of those methods and use

346
00:12:31,440 --> 00:12:32,959
it to make interesting

347
00:12:32,959 --> 00:12:34,959
decisions

348
00:12:34,959 --> 00:12:36,000
so

349
00:12:36,000 --> 00:12:38,480
i should say my company contrast

350
00:12:38,480 --> 00:12:39,600
security

351
00:12:39,600 --> 00:12:42,160
uses instrumentation in our products

352
00:12:42,160 --> 00:12:44,079
we build i asked and rasp and we'll talk

353
00:12:44,079 --> 00:12:45,839
about those a little bit more

354
00:12:45,839 --> 00:12:47,839
that is a commercial product and i'm not

355
00:12:47,839 --> 00:12:49,360
talking about that here

356
00:12:49,360 --> 00:12:51,279
this is a free and open source library

357
00:12:51,279 --> 00:12:53,360
that anybody can use anytime i want to

358
00:12:53,360 --> 00:12:55,360
be really clear like this is not my

359
00:12:55,360 --> 00:12:56,800
product or anything this is a separate

360
00:12:56,800 --> 00:12:58,560
thing that i built on the side

361
00:12:58,560 --> 00:13:00,240
and made free for everybody because i

362
00:13:00,240 --> 00:13:02,720
want everyone to experience the power of

363
00:13:02,720 --> 00:13:04,480
observability in doing application

364
00:13:04,480 --> 00:13:06,720
security

365
00:13:06,720 --> 00:13:08,160
okay

366
00:13:08,160 --> 00:13:09,519
so

367
00:13:09,519 --> 00:13:11,040
i'm going to demonstrate this rather

368
00:13:11,040 --> 00:13:13,040
than you know i have slides here uh but

369
00:13:13,040 --> 00:13:14,399
it's i think it's

370
00:13:14,399 --> 00:13:16,000
more interesting to demonstrate these

371
00:13:16,000 --> 00:13:16,800
things

372
00:13:16,800 --> 00:13:18,320
so i have a little application here

373
00:13:18,320 --> 00:13:21,600
called ticketbook it's got a bunch of

374
00:13:21,600 --> 00:13:22,720
interesting

375
00:13:22,720 --> 00:13:24,160
vulnerabilities in it and some other

376
00:13:24,160 --> 00:13:26,320
things i'm going to use it

377
00:13:26,320 --> 00:13:28,399
with instrumentation

378
00:13:28,399 --> 00:13:29,600
so

379
00:13:29,600 --> 00:13:32,320
i downloaded the jot library so i've got

380
00:13:32,320 --> 00:13:34,480
that here

381
00:13:34,480 --> 00:13:36,000
so you can see i've got oh i'm in my

382
00:13:36,000 --> 00:13:38,800
jaws directory

383
00:13:39,920 --> 00:13:43,360
so you can see i've got my uh

384
00:13:45,040 --> 00:13:46,480
what in the hell

385
00:13:46,480 --> 00:13:49,720
hold on

386
00:13:58,720 --> 00:14:00,880
i'm in the wrong place i'm sorry about

387
00:14:00,880 --> 00:14:03,839
this

388
00:14:09,519 --> 00:14:10,639
okay

389
00:14:10,639 --> 00:14:13,120
much better so you see i've got my jot

390
00:14:13,120 --> 00:14:15,760
file here

391
00:14:15,760 --> 00:14:16,959
so i'm going to run

392
00:14:16,959 --> 00:14:18,160
uh

393
00:14:18,160 --> 00:14:20,079
i'm going to i'm going to tell java to

394
00:14:20,079 --> 00:14:22,959
use this this uh this chat file so i've

395
00:14:22,959 --> 00:14:25,680
got a uh

396
00:14:27,440 --> 00:14:29,279
i'm going to set an environment variable

397
00:14:29,279 --> 00:14:30,959
this is all you need to do to tell java

398
00:14:30,959 --> 00:14:32,800
to run with an instrumentation agent our

399
00:14:32,800 --> 00:14:35,440
instrumentation agent is jot

400
00:14:35,440 --> 00:14:38,079
okay so we're running with this 0.9.1

401
00:14:38,079 --> 00:14:39,519
and then i'm going to tell it what jot

402
00:14:39,519 --> 00:14:41,120
file to use in this case i'm going to

403
00:14:41,120 --> 00:14:42,839
use this

404
00:14:42,839 --> 00:14:46,160
usql untrusted sql jot and let's take a

405
00:14:46,160 --> 00:14:48,639
look at that

406
00:14:56,800 --> 00:14:59,800
um

407
00:15:00,480 --> 00:15:02,800
say again

408
00:15:02,800 --> 00:15:05,040
oh

409
00:15:05,040 --> 00:15:07,440
when i type oh john r jesus

410
00:15:07,440 --> 00:15:08,880
okay

411
00:15:08,880 --> 00:15:10,560
thank you i was panicking there for a

412
00:15:10,560 --> 00:15:12,240
second so okay so look this is a

413
00:15:12,240 --> 00:15:14,399
ridiculously simple sensor

414
00:15:14,399 --> 00:15:16,720
all we're doing is telling java i want

415
00:15:16,720 --> 00:15:19,440
to put a simple sensor in these four

416
00:15:19,440 --> 00:15:23,120
methods boy that's really small isn't it

417
00:15:24,240 --> 00:15:26,480
these four methods

418
00:15:26,480 --> 00:15:27,680
uh

419
00:15:27,680 --> 00:15:28,480
and

420
00:15:28,480 --> 00:15:29,920
you can see

421
00:15:29,920 --> 00:15:32,240
i'm excluding this prepared statement

422
00:15:32,240 --> 00:15:34,480
the reason i have to do that is because

423
00:15:34,480 --> 00:15:37,519
prepared statement extends statement

424
00:15:37,519 --> 00:15:40,000
and so naturally jot will instrument

425
00:15:40,000 --> 00:15:41,519
that because it extends one of the

426
00:15:41,519 --> 00:15:43,040
methods there so i'm going to exclude

427
00:15:43,040 --> 00:15:44,320
that one because that's safe but i want

428
00:15:44,320 --> 00:15:46,480
to see anytime anybody uses those

429
00:15:46,480 --> 00:15:49,600
unprepared statements because they might

430
00:15:49,600 --> 00:15:51,920
be insecure so this is just a simple way

431
00:15:51,920 --> 00:15:55,120
of finding these things and i'm going to

432
00:15:55,120 --> 00:15:56,160
capture

433
00:15:56,160 --> 00:15:58,560
the bottom line is the capture and it

434
00:15:58,560 --> 00:16:00,240
says i'm going to capture the args

435
00:16:00,240 --> 00:16:02,639
that's the arguments to that method you

436
00:16:02,639 --> 00:16:05,120
can capture different things with uh

437
00:16:05,120 --> 00:16:07,440
with jots you can capture the object the

438
00:16:07,440 --> 00:16:09,680
args the parameters

439
00:16:09,680 --> 00:16:11,519
and you can it's actually a spring

440
00:16:11,519 --> 00:16:13,920
expression so you can call methods on

441
00:16:13,920 --> 00:16:16,480
those things to get other data out of

442
00:16:16,480 --> 00:16:18,240
the application so again like a

443
00:16:18,240 --> 00:16:19,440
multimeter we're going to shove it in

444
00:16:19,440 --> 00:16:20,560
we're going to capture a little bit of

445
00:16:20,560 --> 00:16:22,079
data and we're going to pull that back

446
00:16:22,079 --> 00:16:25,600
and use it for something so now

447
00:16:25,600 --> 00:16:29,040
when i run my application

448
00:16:29,920 --> 00:16:32,079
i just run it normally

449
00:16:32,079 --> 00:16:33,920
and you can see as this application

450
00:16:33,920 --> 00:16:35,360
starts up

451
00:16:35,360 --> 00:16:37,279
jot kicked in you can see it

452
00:16:37,279 --> 00:16:39,920
instrumented certain classes

453
00:16:39,920 --> 00:16:41,519
as it starts up

454
00:16:41,519 --> 00:16:43,839
and

455
00:16:44,079 --> 00:16:47,040
then we use the application normally

456
00:16:47,040 --> 00:16:49,519
so i can just click on a few a few pages

457
00:16:49,519 --> 00:16:51,279
here

458
00:16:51,279 --> 00:16:52,480
and

459
00:16:52,480 --> 00:16:55,360
put in some data

460
00:16:56,880 --> 00:16:59,199
and contrast is in the i'm sorry john is

461
00:16:59,199 --> 00:17:01,759
in the background watching this stuff

462
00:17:01,759 --> 00:17:03,199
actually i'll put last con in here so we

463
00:17:03,199 --> 00:17:05,839
can see this

464
00:17:08,000 --> 00:17:10,160
so

465
00:17:10,559 --> 00:17:14,000
you can see for each of those queries

466
00:17:14,000 --> 00:17:16,559
jot has logged the actual

467
00:17:16,559 --> 00:17:19,039
unsafe query here you can see it gives

468
00:17:19,039 --> 00:17:22,480
me the the rule that that was violated

469
00:17:22,480 --> 00:17:24,079
the

470
00:17:24,079 --> 00:17:25,839
exact line of code

471
00:17:25,839 --> 00:17:28,319
and you can see the full query here

472
00:17:28,319 --> 00:17:30,160
so just imagine that you're doing a pen

473
00:17:30,160 --> 00:17:31,360
test

474
00:17:31,360 --> 00:17:33,760
and you're trying to find sql injection

475
00:17:33,760 --> 00:17:35,520
uh you know it's really difficult to

476
00:17:35,520 --> 00:17:36,880
know what the queries are and everything

477
00:17:36,880 --> 00:17:39,360
so this is really useful information in

478
00:17:39,360 --> 00:17:41,039
that context

479
00:17:41,039 --> 00:17:43,039
you can use jot for anything doesn't

480
00:17:43,039 --> 00:17:45,120
have to be just for security you can use

481
00:17:45,120 --> 00:17:46,960
it for you know regular debugging

482
00:17:46,960 --> 00:17:48,720
incident response like whatever you need

483
00:17:48,720 --> 00:17:50,640
to know out of an application you can

484
00:17:50,640 --> 00:17:52,640
quickly throw in a jot and start

485
00:17:52,640 --> 00:17:54,080
gathering that information so that you

486
00:17:54,080 --> 00:17:56,080
can see what's going on inside the

487
00:17:56,080 --> 00:17:57,360
application

488
00:17:57,360 --> 00:17:59,039
that's the key that's why this is you

489
00:17:59,039 --> 00:18:01,120
know it's a java observability toolkit

490
00:18:01,120 --> 00:18:03,840
it's not the java security observability

491
00:18:03,840 --> 00:18:05,120
toolkit

492
00:18:05,120 --> 00:18:07,360
um

493
00:18:07,679 --> 00:18:10,799
everybody understand this simple example

494
00:18:10,799 --> 00:18:12,160
okay let's do something a little more

495
00:18:12,160 --> 00:18:15,120
interesting so um

496
00:18:15,120 --> 00:18:17,600
let's look at uh encryption algorithms

497
00:18:17,600 --> 00:18:21,440
right so i've got another jot here

498
00:18:21,440 --> 00:18:24,080
ciphers dot jot and this is a little

499
00:18:24,080 --> 00:18:26,960
more interesting so this only puts in

500
00:18:26,960 --> 00:18:29,200
one sensor

501
00:18:29,200 --> 00:18:31,440
that

502
00:18:31,760 --> 00:18:33,600
goes into the cipher.getinstance method

503
00:18:33,600 --> 00:18:34,960
we're going to capture the name of the

504
00:18:34,960 --> 00:18:37,840
cipher like des or triple des or aes or

505
00:18:37,840 --> 00:18:38,880
whatever

506
00:18:38,880 --> 00:18:40,000
and

507
00:18:40,000 --> 00:18:41,840
then we're just going to create a report

508
00:18:41,840 --> 00:18:43,919
so the other half of the you know jots

509
00:18:43,919 --> 00:18:46,080
have sensors and reports that you can

510
00:18:46,080 --> 00:18:47,440
create so the first one didn't create a

511
00:18:47,440 --> 00:18:49,760
report it just dumped stuff out into log

512
00:18:49,760 --> 00:18:51,520
but you can also save it up over time

513
00:18:51,520 --> 00:18:54,080
and create a report so

514
00:18:54,080 --> 00:18:55,679
this will show us where encryption is

515
00:18:55,679 --> 00:18:59,600
done in this application everywhere

516
00:18:59,679 --> 00:19:00,799
which is actually pretty interesting

517
00:19:00,799 --> 00:19:02,080
because we're looking at the whole app

518
00:19:02,080 --> 00:19:04,160
it's not just the custom code it's all

519
00:19:04,160 --> 00:19:06,799
the libraries all the frameworks the

520
00:19:06,799 --> 00:19:09,440
the app server and the java runtime

521
00:19:09,440 --> 00:19:10,640
itself

522
00:19:10,640 --> 00:19:14,160
all those things can be doing encryption

523
00:19:14,160 --> 00:19:14,960
so

524
00:19:14,960 --> 00:19:17,039
again all i have to do is just you know

525
00:19:17,039 --> 00:19:18,799
click through these pages

526
00:19:18,799 --> 00:19:21,200
to uh see if any of them do encryption i

527
00:19:21,200 --> 00:19:22,880
know these some

528
00:19:22,880 --> 00:19:25,840
some of these ones down at the bottom do

529
00:19:25,840 --> 00:19:27,679
so i'm just clicking on these these

530
00:19:27,679 --> 00:19:30,080
pages like and this is actually

531
00:19:30,080 --> 00:19:32,320
i think a really important message here

532
00:19:32,320 --> 00:19:34,240
is that i don't have to know anything

533
00:19:34,240 --> 00:19:38,720
about security in order to to do this

534
00:19:38,720 --> 00:19:40,400
all i have to do is just use the

535
00:19:40,400 --> 00:19:43,600
application normally

536
00:19:45,120 --> 00:19:48,120
so

537
00:19:52,080 --> 00:19:55,280
i blow it what did i do

538
00:20:02,000 --> 00:20:03,919
did i i didn't set my variable i didn't

539
00:20:03,919 --> 00:20:05,200
send my agent

540
00:20:05,200 --> 00:20:06,799
i'm sorry i'm really having a bad time

541
00:20:06,799 --> 00:20:09,600
today ciphers

542
00:20:09,600 --> 00:20:13,280
now i run the application normally

543
00:20:14,159 --> 00:20:15,440
and let me just click on these things

544
00:20:15,440 --> 00:20:19,400
quickly and you'll see

545
00:20:22,159 --> 00:20:24,799
still loading

546
00:20:24,799 --> 00:20:25,760
so

547
00:20:25,760 --> 00:20:27,120
uh

548
00:20:27,120 --> 00:20:29,360
when you can use instrumentation to

549
00:20:29,360 --> 00:20:32,559
empower regular developers to do

550
00:20:32,559 --> 00:20:34,400
security checks

551
00:20:34,400 --> 00:20:36,080
it's a huge advantage because there's

552
00:20:36,080 --> 00:20:38,159
way more developers out there than there

553
00:20:38,159 --> 00:20:39,840
are security experts

554
00:20:39,840 --> 00:20:41,360
okay so here's what this is supposed to

555
00:20:41,360 --> 00:20:43,039
look like

556
00:20:43,039 --> 00:20:45,520
so you can see in just a few clicks i

557
00:20:45,520 --> 00:20:47,760
found a ton of uses of all different

558
00:20:47,760 --> 00:20:49,760
kinds of encryption algorithms right

559
00:20:49,760 --> 00:20:51,760
single des

560
00:20:51,760 --> 00:20:53,360
single des with

561
00:20:53,360 --> 00:20:56,480
you know different modes triple des aes

562
00:20:56,480 --> 00:20:58,559
password-based encryption and so on and

563
00:20:58,559 --> 00:20:59,760
if you use this on real-world

564
00:20:59,760 --> 00:21:02,240
applications you'll see encryption all

565
00:21:02,240 --> 00:21:03,840
over the place you can do the same thing

566
00:21:03,840 --> 00:21:05,760
with hash algorithms

567
00:21:05,760 --> 00:21:07,520
and see you know we are never going to

568
00:21:07,520 --> 00:21:10,799
be free of md5 and sha-1 people can talk

569
00:21:10,799 --> 00:21:12,799
about it all they want but it is

570
00:21:12,799 --> 00:21:15,760
everywhere hundreds of places in the the

571
00:21:15,760 --> 00:21:18,240
java typical java stack

572
00:21:18,240 --> 00:21:21,360
it's never going away

573
00:21:23,440 --> 00:21:25,039
so again this is this is another

574
00:21:25,039 --> 00:21:27,760
powerful way of using instrumentation

575
00:21:27,760 --> 00:21:29,520
to get

576
00:21:29,520 --> 00:21:31,120
interesting security information out of

577
00:21:31,120 --> 00:21:33,039
applications

578
00:21:33,039 --> 00:21:35,360
so i'll switch to this slide here real

579
00:21:35,360 --> 00:21:37,120
quick

580
00:21:37,120 --> 00:21:40,080
if my screen will

581
00:21:43,520 --> 00:21:45,039
there's like a

582
00:21:45,039 --> 00:21:47,039
five second delay between when i switch

583
00:21:47,039 --> 00:21:48,640
the screen and when it actually slides

584
00:21:48,640 --> 00:21:49,600
over

585
00:21:49,600 --> 00:21:51,360
so i just wanted to point this out

586
00:21:51,360 --> 00:21:53,360
because this has a few more details on

587
00:21:53,360 --> 00:21:55,919
what you can do in a jot if you look at

588
00:21:55,919 --> 00:21:58,880
the top up here you can see

589
00:21:58,880 --> 00:22:02,159
you can specify the captures

590
00:22:02,159 --> 00:22:04,320
in a really powerful way all of those

591
00:22:04,320 --> 00:22:05,600
are

592
00:22:05,600 --> 00:22:08,159
spring expressions which allow you to

593
00:22:08,159 --> 00:22:09,760
you know take the value that was

594
00:22:09,760 --> 00:22:11,520
returned but if the if like the first

595
00:22:11,520 --> 00:22:13,600
parameter for instance if that's a

596
00:22:13,600 --> 00:22:16,159
complex object you can call methods on

597
00:22:16,159 --> 00:22:18,000
it you can call methods on that

598
00:22:18,000 --> 00:22:19,840
and you can extract exactly the piece of

599
00:22:19,840 --> 00:22:21,679
information that you want so like where

600
00:22:21,679 --> 00:22:23,039
all you do is have to get your probe

601
00:22:23,039 --> 00:22:24,080
close

602
00:22:24,080 --> 00:22:25,840
and then you can use methods to to

603
00:22:25,840 --> 00:22:27,440
expand from there and get the data that

604
00:22:27,440 --> 00:22:30,880
you really are are looking for

605
00:22:30,880 --> 00:22:33,200
okay

606
00:22:33,360 --> 00:22:35,280
now let's do my favorite example

607
00:22:35,280 --> 00:22:36,880
so

608
00:22:36,880 --> 00:22:39,280
this one's about access control

609
00:22:39,280 --> 00:22:40,559
so i'm gonna

610
00:22:40,559 --> 00:22:43,200
do this first

611
00:22:44,000 --> 00:22:47,280
and then let's take a look at it

612
00:22:49,200 --> 00:22:51,360
so

613
00:22:52,559 --> 00:22:54,240
access control is one of the hardest

614
00:22:54,240 --> 00:22:56,320
things to test it was when i was doing a

615
00:22:56,320 --> 00:22:57,840
lot of pen testing it was kind of my

616
00:22:57,840 --> 00:22:59,520
specialty is i would focus in on

617
00:22:59,520 --> 00:23:02,000
authorization and i always found

618
00:23:02,000 --> 00:23:03,760
interesting flaws and gaps because

619
00:23:03,760 --> 00:23:06,880
nobody tests it it's really hard

620
00:23:06,880 --> 00:23:09,600
and so uh

621
00:23:09,600 --> 00:23:10,880
you know imagine if you're testing an

622
00:23:10,880 --> 00:23:13,520
application as like you know

623
00:23:13,520 --> 00:23:14,480
joe

624
00:23:14,480 --> 00:23:16,400
well you've got a role and a certain set

625
00:23:16,400 --> 00:23:18,000
of access to the application you're

626
00:23:18,000 --> 00:23:19,840
you're viewing it through one lens but

627
00:23:19,840 --> 00:23:21,600
there might be a dozen different lenses

628
00:23:21,600 --> 00:23:23,120
to view that application through and

629
00:23:23,120 --> 00:23:24,960
each one might have different access to

630
00:23:24,960 --> 00:23:27,120
the app so when you pen test it from one

631
00:23:27,120 --> 00:23:29,120
point of view you're really only testing

632
00:23:29,120 --> 00:23:30,000
that

633
00:23:30,000 --> 00:23:31,039
code

634
00:23:31,039 --> 00:23:33,280
we want to test the whole application so

635
00:23:33,280 --> 00:23:34,799
how do we how do we do this how do we

636
00:23:34,799 --> 00:23:37,039
find out what all the access control

637
00:23:37,039 --> 00:23:39,840
checks are well we can do it with jot

638
00:23:39,840 --> 00:23:41,760
i mean this would take you know

639
00:23:41,760 --> 00:23:44,559
a lot of time certainly days to figure

640
00:23:44,559 --> 00:23:46,720
out how to do this on a pen test or a

641
00:23:46,720 --> 00:23:48,080
code or view

642
00:23:48,080 --> 00:23:50,080
we need it to go faster than that so

643
00:23:50,080 --> 00:23:51,200
with this

644
00:23:51,200 --> 00:23:53,360
i'm gonna put in three route three

645
00:23:53,360 --> 00:23:56,080
sensors the first sensor tells me the

646
00:23:56,080 --> 00:23:57,039
route

647
00:23:57,039 --> 00:23:59,760
that's like the attack surface for this

648
00:23:59,760 --> 00:24:01,760
application right so i wanna know the

649
00:24:01,760 --> 00:24:05,919
url that i'm coming in on the second one

650
00:24:05,919 --> 00:24:08,159
tells me the currently logged in user

651
00:24:08,159 --> 00:24:09,440
and you can see

652
00:24:09,440 --> 00:24:11,600
uh i i call the ser on both of these i

653
00:24:11,600 --> 00:24:13,520
call the service method i'm

654
00:24:13,520 --> 00:24:15,200
instrumenting the service method which

655
00:24:15,200 --> 00:24:18,000
is like kind of the main entry point for

656
00:24:18,000 --> 00:24:21,120
java apple java ee applications

657
00:24:21,120 --> 00:24:23,279
and

658
00:24:23,279 --> 00:24:26,080
the parameters to the service method

659
00:24:26,080 --> 00:24:28,480
are the http request and the http

660
00:24:28,480 --> 00:24:30,720
response the first one is the request

661
00:24:30,720 --> 00:24:34,159
and so when i call p0 that's the http

662
00:24:34,159 --> 00:24:37,039
request and on that i'm calling get

663
00:24:37,039 --> 00:24:39,039
remote user

664
00:24:39,039 --> 00:24:41,039
so again i'm like sticking a sensor and

665
00:24:41,039 --> 00:24:42,400
i'm using it to get the information i

666
00:24:42,400 --> 00:24:44,159
want so now i know the route and the

667
00:24:44,159 --> 00:24:45,120
user

668
00:24:45,120 --> 00:24:47,360
and the last sensor

669
00:24:47,360 --> 00:24:48,640
is the current

670
00:24:48,640 --> 00:24:50,720
role like the role check that i'm i'm

671
00:24:50,720 --> 00:24:52,799
checking for so i want to know anywhere

672
00:24:52,799 --> 00:24:54,480
this application does

673
00:24:54,480 --> 00:24:56,320
an is user enroll check and i want to

674
00:24:56,320 --> 00:24:58,240
know what role they're required to have

675
00:24:58,240 --> 00:25:01,120
at that point in the code

676
00:25:01,120 --> 00:25:02,799
okay so that all seems a little esoteric

677
00:25:02,799 --> 00:25:04,799
this is not hard to build right it takes

678
00:25:04,799 --> 00:25:06,480
a few minutes to set up these these

679
00:25:06,480 --> 00:25:08,240
rules and then i've created a simple

680
00:25:08,240 --> 00:25:10,000
report one is going to be a test

681
00:25:10,000 --> 00:25:12,000
coverage matrix and one's going to be an

682
00:25:12,000 --> 00:25:13,840
axis control matrix and i'll show you

683
00:25:13,840 --> 00:25:15,440
those because it's more exciting that

684
00:25:15,440 --> 00:25:17,600
way

685
00:25:18,559 --> 00:25:20,799
so

686
00:25:22,400 --> 00:25:24,080
we're adding a by the way the

687
00:25:24,080 --> 00:25:25,360
performance

688
00:25:25,360 --> 00:25:27,600
implications of this instrumentation are

689
00:25:27,600 --> 00:25:29,840
almost impossible to measure i've tried

690
00:25:29,840 --> 00:25:31,679
so i'd run like a million requests at

691
00:25:31,679 --> 00:25:34,559
this and test the total elapsed time and

692
00:25:34,559 --> 00:25:36,720
compare the difference we're in we're

693
00:25:36,720 --> 00:25:38,960
set we're putting in some lines of code

694
00:25:38,960 --> 00:25:40,799
directly into this application that

695
00:25:40,799 --> 00:25:42,400
don't do very much

696
00:25:42,400 --> 00:25:46,480
so this is really really fast

697
00:25:46,480 --> 00:25:48,000
okay so

698
00:25:48,000 --> 00:25:49,200
uh

699
00:25:49,200 --> 00:25:51,440
what i'm gonna do is just use this

700
00:25:51,440 --> 00:25:53,039
application a little bit i'm gonna click

701
00:25:53,039 --> 00:25:54,720
around on a few pages here and we'll

702
00:25:54,720 --> 00:25:57,520
take a look at the uh the test coverage

703
00:25:57,520 --> 00:25:58,960
matrix here

704
00:25:58,960 --> 00:26:00,240
so

705
00:26:00,240 --> 00:26:02,159
just by clicking on a few fields you can

706
00:26:02,159 --> 00:26:03,679
see

707
00:26:03,679 --> 00:26:06,720
what i've tested as guest

708
00:26:06,720 --> 00:26:07,919
right

709
00:26:07,919 --> 00:26:11,200
now there's a few pages in here that uh

710
00:26:11,200 --> 00:26:13,440
will allow me to change my role so i can

711
00:26:13,440 --> 00:26:15,200
switch to user a

712
00:26:15,200 --> 00:26:17,840
and hit a few pages

713
00:26:17,840 --> 00:26:20,559
i can switch to user b here and hit a

714
00:26:20,559 --> 00:26:23,799
few pages

715
00:26:24,000 --> 00:26:26,559
and you'll start to see

716
00:26:26,559 --> 00:26:27,919
now i'm building out my test coverage

717
00:26:27,919 --> 00:26:29,919
matrix and i can see exactly what user

718
00:26:29,919 --> 00:26:32,080
i've accessed which pages as hey that's

719
00:26:32,080 --> 00:26:33,840
pretty cool now i know exactly what i've

720
00:26:33,840 --> 00:26:35,840
tested and what i haven't tested

721
00:26:35,840 --> 00:26:37,679
uh that's not something that you

722
00:26:37,679 --> 00:26:39,679
typically see in

723
00:26:39,679 --> 00:26:40,880
in tests

724
00:26:40,880 --> 00:26:42,559
but we all started also started building

725
00:26:42,559 --> 00:26:44,960
this access control matrix and these

726
00:26:44,960 --> 00:26:46,480
these access pages at the bottom have

727
00:26:46,480 --> 00:26:48,240
this so i'm just going to click on on c

728
00:26:48,240 --> 00:26:50,480
d and e here

729
00:26:50,480 --> 00:26:54,240
and these pages do access checks

730
00:26:54,240 --> 00:26:55,919
and they look like this

731
00:26:55,919 --> 00:26:58,080
so you can see that page a

732
00:26:58,080 --> 00:27:01,039
checks to see if i'm currently in rule a

733
00:27:01,039 --> 00:27:03,120
page b checks for role b

734
00:27:03,120 --> 00:27:05,120
page c rule c that all sounds good but

735
00:27:05,120 --> 00:27:07,840
where's page d

736
00:27:08,080 --> 00:27:10,320
it's not there right and if i look up in

737
00:27:10,320 --> 00:27:12,240
my test coverage matrix you can see hey

738
00:27:12,240 --> 00:27:14,480
i actually hit that

739
00:27:14,480 --> 00:27:17,039
as user b

740
00:27:17,039 --> 00:27:18,559
so it looks like maybe there's an access

741
00:27:18,559 --> 00:27:21,360
control test missing

742
00:27:21,360 --> 00:27:23,200
in that page right

743
00:27:23,200 --> 00:27:25,279
i don't know the access control is like

744
00:27:25,279 --> 00:27:26,640
one of those things some people might

745
00:27:26,640 --> 00:27:28,799
call business logic like there's no

746
00:27:28,799 --> 00:27:30,720
right answer here maybe page a is okay

747
00:27:30,720 --> 00:27:32,559
for everybody to access

748
00:27:32,559 --> 00:27:34,080
i would prefer to see it do an access

749
00:27:34,080 --> 00:27:36,320
control check for like you know guests

750
00:27:36,320 --> 00:27:38,960
or anyone or something but

751
00:27:38,960 --> 00:27:41,039
it might be okay

752
00:27:41,039 --> 00:27:42,559
but this is what observability is all

753
00:27:42,559 --> 00:27:44,559
about we're taking something that's

754
00:27:44,559 --> 00:27:46,799
hidden inside the application it's

755
00:27:46,799 --> 00:27:48,399
buried in the black box

756
00:27:48,399 --> 00:27:50,480
and we're making it observable from

757
00:27:50,480 --> 00:27:53,440
outside the black box

758
00:27:53,440 --> 00:27:54,720
and there's really not much that we

759
00:27:54,720 --> 00:27:56,880
can't do this with

760
00:27:56,880 --> 00:27:59,200
you can see also page e has three

761
00:27:59,200 --> 00:28:01,600
different access control checks in it

762
00:28:01,600 --> 00:28:03,760
that might be fine some pages render

763
00:28:03,760 --> 00:28:05,600
that way like they view differently

764
00:28:05,600 --> 00:28:07,760
depending on who you're logged in as

765
00:28:07,760 --> 00:28:08,880
that's cool

766
00:28:08,880 --> 00:28:11,039
but this is just a real easy way to

767
00:28:11,039 --> 00:28:13,360
expose the access control matrix for an

768
00:28:13,360 --> 00:28:14,640
application

769
00:28:14,640 --> 00:28:17,200
everybody with me how long did this take

770
00:28:17,200 --> 00:28:19,520
me to generate

771
00:28:19,520 --> 00:28:21,360
maybe if i'm in like yeah like if i had

772
00:28:21,360 --> 00:28:23,679
a if i had a script that just ran

773
00:28:23,679 --> 00:28:25,760
quickly through all the urls on this

774
00:28:25,760 --> 00:28:27,919
site it would have taken me you know 30

775
00:28:27,919 --> 00:28:31,919
seconds right so we can build this stuff

776
00:28:31,919 --> 00:28:33,520
really fast i can take that access

777
00:28:33,520 --> 00:28:35,440
control matrix and show it to somebody

778
00:28:35,440 --> 00:28:37,840
on the project who should know and say

779
00:28:37,840 --> 00:28:39,600
hey does this look right like why is

780
00:28:39,600 --> 00:28:42,080
this admin page have no access control

781
00:28:42,080 --> 00:28:43,360
check on it

782
00:28:43,360 --> 00:28:44,799
and they'll probably say oh yikes yeah

783
00:28:44,799 --> 00:28:46,880
that's a mistake we need to fix that

784
00:28:46,880 --> 00:28:48,480
we've done this at scale like if you

785
00:28:48,480 --> 00:28:50,559
look at apis this way

786
00:28:50,559 --> 00:28:52,480
you'll find all kinds of apis that don't

787
00:28:52,480 --> 00:28:54,159
have the right checks in them

788
00:28:54,159 --> 00:28:56,159
they don't follow the pattern and this

789
00:28:56,159 --> 00:28:57,520
is a really fast way of finding that

790
00:28:57,520 --> 00:28:59,120
stuff

791
00:28:59,120 --> 00:29:02,399
any questions on what we did here

792
00:29:04,159 --> 00:29:06,399
okay

793
00:29:07,440 --> 00:29:10,720
uh so let's do one more thing here

794
00:29:10,720 --> 00:29:13,440
just to give you the full power of uh

795
00:29:13,440 --> 00:29:15,440
instrumentation

796
00:29:15,440 --> 00:29:16,480
i want to show you an expression

797
00:29:16,480 --> 00:29:20,080
language injection example

798
00:29:20,080 --> 00:29:22,080
who here's uh not familiar with

799
00:29:22,080 --> 00:29:25,199
expression language injection

800
00:29:25,279 --> 00:29:27,760
okay there's a few people that's fine so

801
00:29:27,760 --> 00:29:29,440
it's pretty simple expression language

802
00:29:29,440 --> 00:29:31,840
is a way for developers of taking data

803
00:29:31,840 --> 00:29:33,200
out of their application like some

804
00:29:33,200 --> 00:29:35,279
complex object like uh

805
00:29:35,279 --> 00:29:38,640
you know a user object or a

806
00:29:38,640 --> 00:29:40,720
business object of some sort and pulling

807
00:29:40,720 --> 00:29:42,720
that data out and rendering it in the ui

808
00:29:42,720 --> 00:29:44,880
without writing a ton of code it just

809
00:29:44,880 --> 00:29:46,559
gives you a very shorthand notation to

810
00:29:46,559 --> 00:29:48,159
grab that data and format it in the way

811
00:29:48,159 --> 00:29:50,240
that you want in the ui

812
00:29:50,240 --> 00:29:52,159
so

813
00:29:52,159 --> 00:29:54,640
unfortunately many frameworks

814
00:29:54,640 --> 00:29:56,399
particularly in java have gone nuts with

815
00:29:56,399 --> 00:29:58,559
this like spring and struts have

816
00:29:58,559 --> 00:30:00,559
expression language everywhere and so

817
00:30:00,559 --> 00:30:02,320
every once in a while

818
00:30:02,320 --> 00:30:05,440
some data flows through the application

819
00:30:05,440 --> 00:30:07,840
gets into an expression and gets

820
00:30:07,840 --> 00:30:10,480
evaluated now normally that's fine like

821
00:30:10,480 --> 00:30:14,240
if i type in you know last con here

822
00:30:14,240 --> 00:30:15,679
this actually flows through the

823
00:30:15,679 --> 00:30:17,919
application it happens to go through an

824
00:30:17,919 --> 00:30:19,279
expression evaluation but it's not an

825
00:30:19,279 --> 00:30:20,799
expression so it just returns the same

826
00:30:20,799 --> 00:30:22,720
thing but if i actually sent in an

827
00:30:22,720 --> 00:30:23,840
expression

828
00:30:23,840 --> 00:30:25,120
like

829
00:30:25,120 --> 00:30:27,440
one plus one

830
00:30:27,440 --> 00:30:29,840
that code gets run

831
00:30:29,840 --> 00:30:32,240
in the server and i get a two back

832
00:30:32,240 --> 00:30:33,840
right so understand like

833
00:30:33,840 --> 00:30:36,720
that's dangerous if you're a pen tester

834
00:30:36,720 --> 00:30:38,640
or a hacker your spider sense probably

835
00:30:38,640 --> 00:30:39,760
just started tingling because you're

836
00:30:39,760 --> 00:30:42,240
like oh my goodness that you can't let

837
00:30:42,240 --> 00:30:44,399
anybody control the code that's running

838
00:30:44,399 --> 00:30:46,559
on your server so then you can start

839
00:30:46,559 --> 00:30:48,000
expanding on that concept you can say

840
00:30:48,000 --> 00:30:50,159
like oh what if i sent in something like

841
00:30:50,159 --> 00:30:51,760
math

842
00:30:51,760 --> 00:30:53,760
dot max

843
00:30:53,760 --> 00:30:56,799
four comma six

844
00:30:57,279 --> 00:30:59,440
or seven whatever

845
00:30:59,440 --> 00:31:01,679
you can see quickly like oh hey i can

846
00:31:01,679 --> 00:31:03,200
also call methods

847
00:31:03,200 --> 00:31:05,679
that's pretty scary and you know a smart

848
00:31:05,679 --> 00:31:06,799
attacker is going to do something

849
00:31:06,799 --> 00:31:08,320
they're going to say oh well hold on let

850
00:31:08,320 --> 00:31:09,679
me just take over the whole server i'll

851
00:31:09,679 --> 00:31:13,320
put in like runtime.getruntime

852
00:31:18,399 --> 00:31:19,760
dot exec

853
00:31:19,760 --> 00:31:22,399
something like open dash a

854
00:31:22,399 --> 00:31:25,039
calculator

855
00:31:28,159 --> 00:31:29,600
that looks right

856
00:31:29,600 --> 00:31:32,640
and so when i submit that

857
00:31:32,640 --> 00:31:34,399
that actually runs

858
00:31:34,399 --> 00:31:36,720
a program of my choosing on the server

859
00:31:36,720 --> 00:31:38,320
it happens to be my laptop it's all

860
00:31:38,320 --> 00:31:39,760
running on my laptop here but normally

861
00:31:39,760 --> 00:31:41,039
you know they would be running that on

862
00:31:41,039 --> 00:31:43,200
your server inside the data center

863
00:31:43,200 --> 00:31:44,640
and they could run whatever they want

864
00:31:44,640 --> 00:31:46,399
not calculated they would take over your

865
00:31:46,399 --> 00:31:48,480
whole system and do whatever they want

866
00:31:48,480 --> 00:31:49,760
probably

867
00:31:49,760 --> 00:31:53,360
uncreatively mining bitcoin or something

868
00:31:53,360 --> 00:31:54,880
instead of like stealing your business

869
00:31:54,880 --> 00:31:56,480
data which would probably be worth way

870
00:31:56,480 --> 00:31:58,960
more to them but

871
00:31:58,960 --> 00:32:00,399
uh

872
00:32:00,399 --> 00:32:02,880
so that's expression language injection

873
00:32:02,880 --> 00:32:04,320
so

874
00:32:04,320 --> 00:32:05,840
what can we do about that with

875
00:32:05,840 --> 00:32:08,080
instrumentation

876
00:32:08,080 --> 00:32:10,320
well

877
00:32:12,559 --> 00:32:16,720
let's look at this uh this jot

878
00:32:19,679 --> 00:32:21,600
so this

879
00:32:21,600 --> 00:32:23,039
it has a couple extra things it has that

880
00:32:23,039 --> 00:32:24,799
same route thing that we looked at

881
00:32:24,799 --> 00:32:26,399
before don't worry about that the

882
00:32:26,399 --> 00:32:30,479
important sensor here is this one

883
00:32:31,039 --> 00:32:32,960
this

884
00:32:32,960 --> 00:32:35,360
instruments three methods

885
00:32:35,360 --> 00:32:36,159
the

886
00:32:36,159 --> 00:32:38,880
the value expression.getvalue

887
00:32:38,880 --> 00:32:41,039
that's the actual expression language

888
00:32:41,039 --> 00:32:42,720
engine like that's what's going to

889
00:32:42,720 --> 00:32:44,399
evaluate this

890
00:32:44,399 --> 00:32:46,000
and what we're seeing here is if we're

891
00:32:46,000 --> 00:32:48,000
inside the scope

892
00:32:48,000 --> 00:32:50,320
of a value expression

893
00:32:50,320 --> 00:32:51,919
then we're going to

894
00:32:51,919 --> 00:32:54,480
prohibit the use of

895
00:32:54,480 --> 00:32:56,240
process builder and socket you could add

896
00:32:56,240 --> 00:32:57,600
other things like creating files and

897
00:32:57,600 --> 00:32:59,279
whatever you wanted in there but you're

898
00:32:59,279 --> 00:33:00,159
saying

899
00:33:00,159 --> 00:33:02,720
we're creating a sandbox around

900
00:33:02,720 --> 00:33:05,200
the value expression

901
00:33:05,200 --> 00:33:06,480
method

902
00:33:06,480 --> 00:33:09,279
so that you can't just run arbitrary

903
00:33:09,279 --> 00:33:12,320
code inside an expression and what the

904
00:33:12,320 --> 00:33:14,240
thing that does it is that exception

905
00:33:14,240 --> 00:33:17,120
line at the bottom if we ever see a call

906
00:33:17,120 --> 00:33:20,159
that matches this we're inside the scope

907
00:33:20,159 --> 00:33:22,320
and we try to do something prohibited

908
00:33:22,320 --> 00:33:23,840
we're going to throw this exception that

909
00:33:23,840 --> 00:33:25,519
says hey we detected an attack and we're

910
00:33:25,519 --> 00:33:27,600
blocking it with jot

911
00:33:27,600 --> 00:33:28,960
so

912
00:33:28,960 --> 00:33:31,679
let's give that a try

913
00:33:31,679 --> 00:33:33,919
so

914
00:33:34,159 --> 00:33:37,039
i'm going to change my jot here

915
00:33:37,039 --> 00:33:38,720
by the way you can combine all these

916
00:33:38,720 --> 00:33:41,039
jots together you can just point it at a

917
00:33:41,039 --> 00:33:42,640
directory full of dots and run them all

918
00:33:42,640 --> 00:33:43,679
at once

919
00:33:43,679 --> 00:33:45,679
uh so you don't have to keep switching

920
00:33:45,679 --> 00:33:47,679
it's just easier demo wise to do it this

921
00:33:47,679 --> 00:33:50,240
way so

922
00:33:50,240 --> 00:33:52,880
run my application the normal way

923
00:33:52,880 --> 00:33:54,399
and

924
00:33:54,399 --> 00:33:57,840
wait a second for it to deploy

925
00:33:58,480 --> 00:34:00,559
and let's try that same example again

926
00:34:00,559 --> 00:34:02,080
i'm going to cut and paste this i can't

927
00:34:02,080 --> 00:34:04,799
type it so

928
00:34:04,960 --> 00:34:07,679
uh you'll notice the app still works

929
00:34:07,679 --> 00:34:09,918
just fine right we can even evaluate

930
00:34:09,918 --> 00:34:13,118
harmless expressions

931
00:34:13,359 --> 00:34:15,199
because we're not doing the prohibited

932
00:34:15,199 --> 00:34:16,800
things but if i try to enter that

933
00:34:16,800 --> 00:34:19,199
malicious expression

934
00:34:19,199 --> 00:34:21,839
and do a runtime.exec inside there

935
00:34:21,839 --> 00:34:23,918
then jot will stop it and you can see i

936
00:34:23,918 --> 00:34:26,639
got a sensor exception we blocked it you

937
00:34:26,639 --> 00:34:28,879
can even see in the stack trace here

938
00:34:28,879 --> 00:34:30,639
if you if you drill down a little ways

939
00:34:30,639 --> 00:34:33,440
you can see here's our value expression

940
00:34:33,440 --> 00:34:35,440
and inside that scope as you read up the

941
00:34:35,440 --> 00:34:37,918
stack trace you can see inside there we

942
00:34:37,918 --> 00:34:40,879
tried to call a runtime.exec

943
00:34:40,879 --> 00:34:41,760
okay

944
00:34:41,760 --> 00:34:43,199
uh or processbuilder is actually what we

945
00:34:43,199 --> 00:34:45,440
banned which is the underneath the hood

946
00:34:45,440 --> 00:34:47,199
of runtime.exec

947
00:34:47,199 --> 00:34:49,599
anybody with me

948
00:34:49,599 --> 00:34:51,839
okay

949
00:34:55,839 --> 00:34:57,280
it's a five second count while i switch

950
00:34:57,280 --> 00:34:59,119
back to my slides okay there we go

951
00:34:59,119 --> 00:35:00,640
okay so this i'm going to publish these

952
00:35:00,640 --> 00:35:02,960
slides so you can you can have them uh

953
00:35:02,960 --> 00:35:04,320
if you're interested

954
00:35:04,320 --> 00:35:05,839
i did want to show these i just added

955
00:35:05,839 --> 00:35:09,119
this to jot is you can add sensors to an

956
00:35:09,119 --> 00:35:10,720
application

957
00:35:10,720 --> 00:35:12,720
and it's a little bit like putting

958
00:35:12,720 --> 00:35:14,640
cameras up in a bank right like you just

959
00:35:14,640 --> 00:35:16,079
put a camera in you know the right

960
00:35:16,079 --> 00:35:17,920
places and then

961
00:35:17,920 --> 00:35:20,079
uh every time somebody goes through

962
00:35:20,079 --> 00:35:21,200
the bank

963
00:35:21,200 --> 00:35:22,880
you can get a little chart of their

964
00:35:22,880 --> 00:35:24,960
progress so like this this shows one

965
00:35:24,960 --> 00:35:28,079
thread of execution through the software

966
00:35:28,079 --> 00:35:29,760
and i can put whatever sensors i want

967
00:35:29,760 --> 00:35:31,920
here right this one i just kind of threw

968
00:35:31,920 --> 00:35:33,520
the kitchen sink at it i said give me

969
00:35:33,520 --> 00:35:34,800
everything i know you can't read that

970
00:35:34,800 --> 00:35:37,200
because i can't even read it from here

971
00:35:37,200 --> 00:35:40,079
so that's a bad sign but

972
00:35:40,079 --> 00:35:42,000
trust me when i say this this goes

973
00:35:42,000 --> 00:35:44,720
through and says uh like

974
00:35:44,720 --> 00:35:46,400
you know

975
00:35:46,400 --> 00:35:47,839
the top call is basically a get

976
00:35:47,839 --> 00:35:49,839
parameter call and it says hey i just

977
00:35:49,839 --> 00:35:51,680
got like the name parameter and then

978
00:35:51,680 --> 00:35:53,119
like going down a little ways you'll see

979
00:35:53,119 --> 00:35:55,680
another call that says like runtime.exec

980
00:35:55,680 --> 00:35:58,640
or sql statement.execute or

981
00:35:58,640 --> 00:36:00,320
an expression language evaluation or

982
00:36:00,320 --> 00:36:02,160
whatever and like

983
00:36:02,160 --> 00:36:04,640
this isn't it doesn't have any smarts to

984
00:36:04,640 --> 00:36:06,720
it this isn't trying to detect

985
00:36:06,720 --> 00:36:08,720
vulnerabilities or anything this is just

986
00:36:08,720 --> 00:36:11,200
creating observability

987
00:36:11,200 --> 00:36:13,520
okay but with this you can easily see

988
00:36:13,520 --> 00:36:15,760
like oh like that first one is a sql

989
00:36:15,760 --> 00:36:17,040
injection the second one's expression

990
00:36:17,040 --> 00:36:18,240
language injection the third one's

991
00:36:18,240 --> 00:36:20,640
command injection and by the way under

992
00:36:20,640 --> 00:36:22,720
the hood in command inject and any time

993
00:36:22,720 --> 00:36:24,800
you call runtime.exec

994
00:36:24,800 --> 00:36:27,040
java creates a whole ton of

995
00:36:27,040 --> 00:36:29,680
ciphers like all of them

996
00:36:29,680 --> 00:36:31,599
which is just kind of weird but that's

997
00:36:31,599 --> 00:36:32,720
the kind of thing as you you start to

998
00:36:32,720 --> 00:36:34,240
use instrumentation you'll see weird

999
00:36:34,240 --> 00:36:35,920
stuff inside your applications that you

1000
00:36:35,920 --> 00:36:37,680
didn't know was happening

1001
00:36:37,680 --> 00:36:39,839
socket connections out to the internet

1002
00:36:39,839 --> 00:36:41,200
that you didn't know were happening like

1003
00:36:41,200 --> 00:36:43,200
phone home stuff all kinds of things

1004
00:36:43,200 --> 00:36:46,078
that you just didn't know

1005
00:36:48,960 --> 00:36:52,640
now this idea i think is really powerful

1006
00:36:53,760 --> 00:36:55,599
most security

1007
00:36:55,599 --> 00:36:57,040
vulnerabilities are reported to

1008
00:36:57,040 --> 00:37:00,560
developers through pdf reports

1009
00:37:00,560 --> 00:37:02,800
this is not the ideal ideal way of

1010
00:37:02,800 --> 00:37:04,560
communicating with developers just want

1011
00:37:04,560 --> 00:37:06,079
to check my time here

1012
00:37:06,079 --> 00:37:09,079
um

1013
00:37:09,119 --> 00:37:11,040
it's a little better

1014
00:37:11,040 --> 00:37:13,359
if you know 300 page pdf report is not

1015
00:37:13,359 --> 00:37:15,440
the right way i want to ban pdfs from

1016
00:37:15,440 --> 00:37:17,280
security forever by the way

1017
00:37:17,280 --> 00:37:19,280
uh

1018
00:37:19,280 --> 00:37:20,720
it's a little better if your results are

1019
00:37:20,720 --> 00:37:22,400
in a dashboard

1020
00:37:22,400 --> 00:37:24,079
somewhere that's better

1021
00:37:24,079 --> 00:37:25,599
even maybe better if they get into a

1022
00:37:25,599 --> 00:37:28,480
jira ticket and get reported that way

1023
00:37:28,480 --> 00:37:30,160
but still there's a lot of extra steps

1024
00:37:30,160 --> 00:37:32,240
there for developers

1025
00:37:32,240 --> 00:37:33,680
what if we could communicate with

1026
00:37:33,680 --> 00:37:35,839
developers the way that they want to be

1027
00:37:35,839 --> 00:37:38,079
communicated with

1028
00:37:38,079 --> 00:37:40,640
like right through a failed test

1029
00:37:40,640 --> 00:37:42,640
well imagine we just you know we use

1030
00:37:42,640 --> 00:37:44,079
that expression language thing or you

1031
00:37:44,079 --> 00:37:46,960
know another jot we could easily fail a

1032
00:37:46,960 --> 00:37:48,480
test case

1033
00:37:48,480 --> 00:37:51,920
if that test case when it runs it causes

1034
00:37:51,920 --> 00:37:54,320
a runtime.exec to happen

1035
00:37:54,320 --> 00:37:56,160
you could throw an exception and fail

1036
00:37:56,160 --> 00:37:57,520
that test case

1037
00:37:57,520 --> 00:37:58,320
and

1038
00:37:58,320 --> 00:38:00,240
report it right to the developer right

1039
00:38:00,240 --> 00:38:01,680
through their test run like this will

1040
00:38:01,680 --> 00:38:04,079
show up in their ide naturally you don't

1041
00:38:04,079 --> 00:38:06,320
need a separate security vendor's ide

1042
00:38:06,320 --> 00:38:08,720
integration to do something this is just

1043
00:38:08,720 --> 00:38:10,400
naturally going to fail

1044
00:38:10,400 --> 00:38:12,079
the test case and give them the results

1045
00:38:12,079 --> 00:38:13,680
that they want they'll

1046
00:38:13,680 --> 00:38:16,480
they will fix this right away

1047
00:38:16,480 --> 00:38:18,480
because their test failed

1048
00:38:18,480 --> 00:38:19,920
and they won't check it in until the

1049
00:38:19,920 --> 00:38:21,040
tests pass

1050
00:38:21,040 --> 00:38:22,960
so i think this is a really powerful way

1051
00:38:22,960 --> 00:38:24,560
of communicating with developers i wrote

1052
00:38:24,560 --> 00:38:26,160
a whole article about this on linkedin

1053
00:38:26,160 --> 00:38:27,599
if you're interested to talk about the

1054
00:38:27,599 --> 00:38:29,599
pros and cons of this but i want you to

1055
00:38:29,599 --> 00:38:32,000
think about how security can do a better

1056
00:38:32,000 --> 00:38:35,280
job of working with developers

1057
00:38:35,280 --> 00:38:38,240
this is just one way

1058
00:38:38,640 --> 00:38:40,320
we did this example of expression

1059
00:38:40,320 --> 00:38:43,200
language injection already

1060
00:38:43,200 --> 00:38:44,240
and so

1061
00:38:44,240 --> 00:38:47,520
i want to zoom out a little bit uh

1062
00:38:47,520 --> 00:38:49,359
what we just did

1063
00:38:49,359 --> 00:38:53,040
is called i asked and rasp so i asked it

1064
00:38:53,040 --> 00:38:54,480
stands for

1065
00:38:54,480 --> 00:38:56,400
interactive application security testing

1066
00:38:56,400 --> 00:38:57,760
that's a gartner name that doesn't

1067
00:38:57,760 --> 00:38:59,599
really mean a whole lot what it really

1068
00:38:59,599 --> 00:39:01,280
means is

1069
00:39:01,280 --> 00:39:03,200
that you've found a vulnerability using

1070
00:39:03,200 --> 00:39:05,599
instrumentation that's it that's what i

1071
00:39:05,599 --> 00:39:07,599
asked is using instrumentation to find

1072
00:39:07,599 --> 00:39:08,880
vulnerabilities

1073
00:39:08,880 --> 00:39:11,040
and it's got a lot of advantages over

1074
00:39:11,040 --> 00:39:13,440
things like static analysis and dynamic

1075
00:39:13,440 --> 00:39:15,359
analysis

1076
00:39:15,359 --> 00:39:17,200
interactive analysis works from within

1077
00:39:17,200 --> 00:39:19,200
the application it has a bunch more

1078
00:39:19,200 --> 00:39:20,480
context

1079
00:39:20,480 --> 00:39:22,160
than those other tools right it sees

1080
00:39:22,160 --> 00:39:23,359
that whole

1081
00:39:23,359 --> 00:39:25,760
real world app reality the runtime

1082
00:39:25,760 --> 00:39:28,560
reality i talked about before so

1083
00:39:28,560 --> 00:39:30,079
it's much more accurate at finding

1084
00:39:30,079 --> 00:39:31,359
vulnerabilities because it only can

1085
00:39:31,359 --> 00:39:33,359
report what it actually observed

1086
00:39:33,359 --> 00:39:35,280
observability right

1087
00:39:35,280 --> 00:39:37,520
um

1088
00:39:37,520 --> 00:39:38,400
and

1089
00:39:38,400 --> 00:39:40,640
we just built our own ios

1090
00:39:40,640 --> 00:39:42,720
right we detected some vulnerabilities

1091
00:39:42,720 --> 00:39:43,680
using

1092
00:39:43,680 --> 00:39:45,599
instrumentation you can build your own

1093
00:39:45,599 --> 00:39:47,280
iest with

1094
00:39:47,280 --> 00:39:48,560
with jot

1095
00:39:48,560 --> 00:39:50,320
uh there are products on the market that

1096
00:39:50,320 --> 00:39:51,760
have you know a bunch of more

1097
00:39:51,760 --> 00:39:54,160
complicated built-in rules contrast is

1098
00:39:54,160 --> 00:39:57,200
one but this concept is available to

1099
00:39:57,200 --> 00:39:59,280
everyone right now

1100
00:39:59,280 --> 00:40:00,560
rasp

1101
00:40:00,560 --> 00:40:02,480
is pretty similar from a technology

1102
00:40:02,480 --> 00:40:04,880
point of view but rasp which is runtime

1103
00:40:04,880 --> 00:40:06,960
application self-protection this is

1104
00:40:06,960 --> 00:40:10,160
using instrumentation to detect attacks

1105
00:40:10,160 --> 00:40:13,280
and it's weird in our industry that

1106
00:40:13,280 --> 00:40:14,400
forever

1107
00:40:14,400 --> 00:40:17,280
the the vulnerability people have been

1108
00:40:17,280 --> 00:40:19,440
totally separate from the attack people

1109
00:40:19,440 --> 00:40:21,280
but really attacks and vulnerabilities

1110
00:40:21,280 --> 00:40:24,160
are pretty similar under the hood right

1111
00:40:24,160 --> 00:40:25,599
i think of it like you know

1112
00:40:25,599 --> 00:40:27,520
vulnerability is like an open window in

1113
00:40:27,520 --> 00:40:29,200
your house

1114
00:40:29,200 --> 00:40:30,319
and

1115
00:40:30,319 --> 00:40:32,720
the attack is somebody climbing through

1116
00:40:32,720 --> 00:40:34,400
the window and stealing your stuff it's

1117
00:40:34,400 --> 00:40:36,640
all about the open window

1118
00:40:36,640 --> 00:40:38,160
but the technologies are very different

1119
00:40:38,160 --> 00:40:40,640
how do we detect attacks today

1120
00:40:40,640 --> 00:40:43,759
if you're not using rasp

1121
00:40:44,960 --> 00:40:47,359
see again

1122
00:40:49,760 --> 00:40:52,079
they right they well yeah they have to

1123
00:40:52,079 --> 00:40:54,480
try to to actually attack you which is

1124
00:40:54,480 --> 00:40:56,400
true of rasp as well

1125
00:40:56,400 --> 00:40:57,520
um

1126
00:40:57,520 --> 00:40:59,440
but the way we detect them is at the

1127
00:40:59,440 --> 00:41:01,040
network perimeter

1128
00:41:01,040 --> 00:41:03,200
right with a waff

1129
00:41:03,200 --> 00:41:05,839
and why is it noisy because a waff has

1130
00:41:05,839 --> 00:41:08,319
no idea what it's protecting

1131
00:41:08,319 --> 00:41:10,319
raps overblock and under black and it's

1132
00:41:10,319 --> 00:41:12,160
never going to fix that because they

1133
00:41:12,160 --> 00:41:14,319
don't have enough information

1134
00:41:14,319 --> 00:41:16,560
the information they need is inside the

1135
00:41:16,560 --> 00:41:18,640
app

1136
00:41:18,640 --> 00:41:20,079
waff doesn't know if that parameter

1137
00:41:20,079 --> 00:41:22,240
coming in is a comment

1138
00:41:22,240 --> 00:41:23,040
that's

1139
00:41:23,040 --> 00:41:24,720
you know not harmful

1140
00:41:24,720 --> 00:41:26,319
or something that's going to go right

1141
00:41:26,319 --> 00:41:28,720
into a query that goes to your database

1142
00:41:28,720 --> 00:41:30,640
but with rasp we can protect it at the

1143
00:41:30,640 --> 00:41:32,160
right place where we have all the

1144
00:41:32,160 --> 00:41:34,000
context to say hey that's definitely an

1145
00:41:34,000 --> 00:41:36,480
attack you can even feel like if more if

1146
00:41:36,480 --> 00:41:38,800
you used a more complicated jot you

1147
00:41:38,800 --> 00:41:41,599
could analyze that the whole query and

1148
00:41:41,599 --> 00:41:43,520
say hey the attacker's data just changed

1149
00:41:43,520 --> 00:41:45,200
the meaning of the query

1150
00:41:45,200 --> 00:41:47,040
that's what we're going to block

1151
00:41:47,040 --> 00:41:49,040
so these technologies i asked and rasp

1152
00:41:49,040 --> 00:41:51,520
are really exciting they're in pretty

1153
00:41:51,520 --> 00:41:53,520
wide use in big companies but i still

1154
00:41:53,520 --> 00:41:54,880
think there's a lot of people that

1155
00:41:54,880 --> 00:41:58,079
haven't really experienced them

1156
00:41:58,480 --> 00:42:00,240
the shift that we're looking at here is

1157
00:42:00,240 --> 00:42:02,720
moving from this outside in model where

1158
00:42:02,720 --> 00:42:05,040
we're using scanning and we're using

1159
00:42:05,040 --> 00:42:08,000
firewalls to a model that works from

1160
00:42:08,000 --> 00:42:10,000
inside the running application

1161
00:42:10,000 --> 00:42:11,040
and

1162
00:42:11,040 --> 00:42:13,440
it's an observability approach it's

1163
00:42:13,440 --> 00:42:15,359
directly measuring the running app so

1164
00:42:15,359 --> 00:42:17,119
it's more accurate when it's more

1165
00:42:17,119 --> 00:42:18,880
accurate we can get rid of some of the

1166
00:42:18,880 --> 00:42:20,240
experts like me

1167
00:42:20,240 --> 00:42:22,640
out of the cic pipeline where we can't

1168
00:42:22,640 --> 00:42:24,640
be

1169
00:42:24,640 --> 00:42:26,720
it's a real-time technology

1170
00:42:26,720 --> 00:42:28,400
so you know these jots that we just

1171
00:42:28,400 --> 00:42:30,079
wrote they're working like right as we

1172
00:42:30,079 --> 00:42:31,680
were working

1173
00:42:31,680 --> 00:42:33,280
that's really important because you

1174
00:42:33,280 --> 00:42:35,680
can't have a scan that takes three hours

1175
00:42:35,680 --> 00:42:39,119
to run inside of a ci cd pipeline that

1176
00:42:39,119 --> 00:42:41,280
has to finish in 15 minutes that's just

1177
00:42:41,280 --> 00:42:43,520
math

1178
00:42:43,520 --> 00:42:44,720
so

1179
00:42:44,720 --> 00:42:46,400
there's a number of advantages to this

1180
00:42:46,400 --> 00:42:48,319
you can put this instrumentation out

1181
00:42:48,319 --> 00:42:50,000
there it can just

1182
00:42:50,000 --> 00:42:51,520
run in the background developers don't

1183
00:42:51,520 --> 00:42:53,440
even need to know it's there until it

1184
00:42:53,440 --> 00:42:55,040
detects something so in a lot of ways

1185
00:42:55,040 --> 00:42:57,520
it's like you know guard rails

1186
00:42:57,520 --> 00:42:59,280
that will just make sure that nothing

1187
00:42:59,280 --> 00:43:00,640
goes out of bounds

1188
00:43:00,640 --> 00:43:02,880
no extra steps

1189
00:43:02,880 --> 00:43:05,040
and ultimately

1190
00:43:05,040 --> 00:43:07,040
this technology will allow us

1191
00:43:07,040 --> 00:43:07,920
to

1192
00:43:07,920 --> 00:43:10,880
build pipelines that do all the security

1193
00:43:10,880 --> 00:43:12,880
checks that we need like whatever you

1194
00:43:12,880 --> 00:43:15,599
want to check you can check it with jot

1195
00:43:15,599 --> 00:43:17,599
you can check it with i asked

1196
00:43:17,599 --> 00:43:21,520
and you can build a pipeline that's

1197
00:43:21,520 --> 00:43:24,400
that's really strong

1198
00:43:24,400 --> 00:43:26,480
you can add tests for whatever you you

1199
00:43:26,480 --> 00:43:27,920
know whatever your security controls are

1200
00:43:27,920 --> 00:43:29,599
you can add tests for that build a

1201
00:43:29,599 --> 00:43:31,359
strong pipeline that'll allow you to

1202
00:43:31,359 --> 00:43:33,760
push code into production at whatever

1203
00:43:33,760 --> 00:43:36,560
velocity you want to go

1204
00:43:36,560 --> 00:43:38,800
that's a real carrot that you as a

1205
00:43:38,800 --> 00:43:40,079
security person you can take to the

1206
00:43:40,079 --> 00:43:41,839
development teams and say hey let's go

1207
00:43:41,839 --> 00:43:43,920
this direction let's work together to

1208
00:43:43,920 --> 00:43:45,760
build this pipeline so that it's strong

1209
00:43:45,760 --> 00:43:47,839
enough so that i'm sure that it's safe

1210
00:43:47,839 --> 00:43:50,000
enough to go into production and you're

1211
00:43:50,000 --> 00:43:51,920
happy because it can go as fast as you

1212
00:43:51,920 --> 00:43:53,440
want to go

1213
00:43:53,440 --> 00:43:55,359
that's freedom

1214
00:43:55,359 --> 00:43:56,480
so

1215
00:43:56,480 --> 00:43:57,920
ultimately i think that's the key to

1216
00:43:57,920 --> 00:43:59,200
devsecops

1217
00:43:59,200 --> 00:44:00,079
is

1218
00:44:00,079 --> 00:44:00,960
to

1219
00:44:00,960 --> 00:44:02,720
changing the work from what we do today

1220
00:44:02,720 --> 00:44:04,240
which and i'll talk more about this

1221
00:44:04,240 --> 00:44:06,319
tomorrow in my keynote but like

1222
00:44:06,319 --> 00:44:08,400
you know the work of appsec today is

1223
00:44:08,400 --> 00:44:10,480
it's kind of all over the place

1224
00:44:10,480 --> 00:44:12,720
to work that focuses on this

1225
00:44:12,720 --> 00:44:14,160
allowing teams to push code into

1226
00:44:14,160 --> 00:44:16,400
production at super high velocity with

1227
00:44:16,400 --> 00:44:18,960
security

1228
00:44:19,280 --> 00:44:21,680
and the results that what we've seen

1229
00:44:21,680 --> 00:44:24,000
are spectacular

1230
00:44:24,000 --> 00:44:26,400
if you look at the blue line here sorry

1231
00:44:26,400 --> 00:44:28,800
the red line here that's what static

1232
00:44:28,800 --> 00:44:30,319
analysis

1233
00:44:30,319 --> 00:44:32,880
produces so

1234
00:44:32,880 --> 00:44:34,079
that says

1235
00:44:34,079 --> 00:44:36,079
this is a mean time to remediate charts

1236
00:44:36,079 --> 00:44:38,240
so how long does it take you on average

1237
00:44:38,240 --> 00:44:40,319
to fix vulnerabilities

1238
00:44:40,319 --> 00:44:42,480
and if you look at the red line this is

1239
00:44:42,480 --> 00:44:43,760
the median

1240
00:44:43,760 --> 00:44:47,839
to close a vulnerability is 121 days

1241
00:44:47,839 --> 00:44:49,599
it's like four months

1242
00:44:49,599 --> 00:44:52,240
that's a really long time and a huge

1243
00:44:52,240 --> 00:44:55,520
window of opportunity for the attackers

1244
00:44:55,520 --> 00:44:56,880
if you look at the blue line there

1245
00:44:56,880 --> 00:44:58,960
that's uh

1246
00:44:58,960 --> 00:45:00,400
what i asked

1247
00:45:00,400 --> 00:45:03,200
can produce you get much faster feedback

1248
00:45:03,200 --> 00:45:04,560
in fact if you wanted to look for a

1249
00:45:04,560 --> 00:45:06,560
definition of

1250
00:45:06,560 --> 00:45:08,800
of shifting left and again i'm going to

1251
00:45:08,800 --> 00:45:11,440
talk about that tomorrow shift left is

1252
00:45:11,440 --> 00:45:12,720
c shift left

1253
00:45:12,720 --> 00:45:13,920
is uh

1254
00:45:13,920 --> 00:45:15,520
not the be all end all solution but if

1255
00:45:15,520 --> 00:45:17,760
you wanted to uh

1256
00:45:17,760 --> 00:45:19,280
get more efficient closing of

1257
00:45:19,280 --> 00:45:21,200
vulnerabilities this is a chart that

1258
00:45:21,200 --> 00:45:22,319
shows that

1259
00:45:22,319 --> 00:45:24,000
and for our best

1260
00:45:24,000 --> 00:45:25,280
i asked users the one that i've been

1261
00:45:25,280 --> 00:45:27,040
using it for a while you can see the

1262
00:45:27,040 --> 00:45:28,960
numbers get really good 75 percent of

1263
00:45:28,960 --> 00:45:31,040
vulnerabilities closed in just eight

1264
00:45:31,040 --> 00:45:34,720
days that's a real difference

1265
00:45:34,720 --> 00:45:37,119
something really uh changes in your in

1266
00:45:37,119 --> 00:45:40,240
your company when you can do that

1267
00:45:41,119 --> 00:45:43,760
so that i'm just gonna that's

1268
00:45:43,760 --> 00:45:45,599
the end of my remarks

1269
00:45:45,599 --> 00:45:47,200
i want to point you to a couple articles

1270
00:45:47,200 --> 00:45:49,200
if you're new and getting started in

1271
00:45:49,200 --> 00:45:51,440
application security i'd love for you to

1272
00:45:51,440 --> 00:45:52,720
read this article on how to

1273
00:45:52,720 --> 00:45:54,079
vulnerability

1274
00:45:54,079 --> 00:45:57,760
it's a i spend you know 15 years doing

1275
00:45:57,760 --> 00:45:59,520
consulting writing finding

1276
00:45:59,520 --> 00:46:01,680
vulnerabilities writing up findings and

1277
00:46:01,680 --> 00:46:03,760
i got a lot of experience in doing that

1278
00:46:03,760 --> 00:46:05,680
so this is a tutorial on how to write up

1279
00:46:05,680 --> 00:46:08,640
a great finding to make sure that

1280
00:46:08,640 --> 00:46:11,920
you communicate effectively and don't

1281
00:46:11,920 --> 00:46:15,640
burn down any bridges

1282
00:46:16,160 --> 00:46:18,880
the second one is a broader article

1283
00:46:18,880 --> 00:46:22,160
about the future of appsec and uh

1284
00:46:22,160 --> 00:46:23,040
it

1285
00:46:23,040 --> 00:46:25,680
it talks about how do we build security

1286
00:46:25,680 --> 00:46:27,760
in a software factory so it's actually

1287
00:46:27,760 --> 00:46:30,240
repurposing the machinery of a software

1288
00:46:30,240 --> 00:46:31,440
development

1289
00:46:31,440 --> 00:46:32,720
organization

1290
00:46:32,720 --> 00:46:35,680
in order to also produce security so

1291
00:46:35,680 --> 00:46:37,440
it's a little different view on you know

1292
00:46:37,440 --> 00:46:39,040
kind of the traditional approach to

1293
00:46:39,040 --> 00:46:41,760
appsec but i encourage you to read it if

1294
00:46:41,760 --> 00:46:44,800
you're in the field

1295
00:46:44,960 --> 00:46:47,839
so that'll stop uh

1296
00:46:47,839 --> 00:46:49,200
and i'd love

1297
00:46:49,200 --> 00:46:50,319
to hear any questions i think we've got

1298
00:46:50,319 --> 00:46:51,920
a few minutes

1299
00:46:51,920 --> 00:46:52,800
left

1300
00:46:52,800 --> 00:46:55,440
so if anybody has any questions about

1301
00:46:55,440 --> 00:46:56,880
anything related to apsec i'd love to

1302
00:46:56,880 --> 00:47:00,960
try to field them stump the chump time

1303
00:47:00,960 --> 00:47:01,920
yeah

1304
00:47:01,920 --> 00:47:04,720
can you talk about emerging avm and

1305
00:47:04,720 --> 00:47:07,280
appset so that you can basically have

1306
00:47:07,280 --> 00:47:10,760
one certificate

1307
00:47:12,160 --> 00:47:14,160
yeah

1308
00:47:14,160 --> 00:47:15,599
so the question is about merging

1309
00:47:15,599 --> 00:47:17,599
application performance management like

1310
00:47:17,599 --> 00:47:19,359
tools like new relic and app dynamics

1311
00:47:19,359 --> 00:47:22,319
and data dog and things like that with

1312
00:47:22,319 --> 00:47:25,440
instrumentation based apsec tools like

1313
00:47:25,440 --> 00:47:28,559
contrast and others and

1314
00:47:28,559 --> 00:47:29,520
uh

1315
00:47:29,520 --> 00:47:31,920
in principle it's a reasonable idea

1316
00:47:31,920 --> 00:47:33,200
because then you only have to add one

1317
00:47:33,200 --> 00:47:35,839
agent to an application to to measure it

1318
00:47:35,839 --> 00:47:37,200
really you can run

1319
00:47:37,200 --> 00:47:38,960
two agents side by side they don't

1320
00:47:38,960 --> 00:47:41,119
affect each other because it's like you

1321
00:47:41,119 --> 00:47:41,839
know

1322
00:47:41,839 --> 00:47:43,760
one's putting in you know one kind of

1323
00:47:43,760 --> 00:47:45,520
camera and the other is putting in

1324
00:47:45,520 --> 00:47:47,040
another kind of camera and they don't

1325
00:47:47,040 --> 00:47:48,880
really conflict with each other so we

1326
00:47:48,880 --> 00:47:50,720
run side by side with new relic and app

1327
00:47:50,720 --> 00:47:53,040
dynamics and all those but i do think

1328
00:47:53,040 --> 00:47:54,800
that the future is likely that you'll

1329
00:47:54,800 --> 00:47:57,920
just use one agent and get all of that

1330
00:47:57,920 --> 00:47:59,680
i'll say that just in terms of the

1331
00:47:59,680 --> 00:48:01,599
market like in terms of vendor company

1332
00:48:01,599 --> 00:48:03,200
wise

1333
00:48:03,200 --> 00:48:05,119
there's

1334
00:48:05,119 --> 00:48:07,920
there's plenty of work for a security

1335
00:48:07,920 --> 00:48:10,000
company to do to focus on like

1336
00:48:10,000 --> 00:48:11,200
instrumenting

1337
00:48:11,200 --> 00:48:13,200
for security and there's plenty of work

1338
00:48:13,200 --> 00:48:14,880
for a performance company to focus on

1339
00:48:14,880 --> 00:48:16,400
instrumenting for performance and

1340
00:48:16,400 --> 00:48:18,400
there's there's not a lot of synergy

1341
00:48:18,400 --> 00:48:19,920
between those two activities other than

1342
00:48:19,920 --> 00:48:21,680
the fact that they they use the same

1343
00:48:21,680 --> 00:48:24,079
underlying technology

1344
00:48:24,079 --> 00:48:25,839
so i don't know if it'll happen actually

1345
00:48:25,839 --> 00:48:28,240
it might happen it might not i don't

1346
00:48:28,240 --> 00:48:30,399
know

1347
00:48:39,390 --> 00:48:42,529
[Music]

1348
00:48:45,760 --> 00:48:48,760
is

1349
00:48:50,000 --> 00:48:53,520
yeah so i mean uh you know if if code

1350
00:48:53,520 --> 00:48:55,359
demonstrates a problem that's you know

1351
00:48:55,359 --> 00:48:57,359
like one of the os top 10 or one of the

1352
00:48:57,359 --> 00:49:00,000
things in asbs like it violates one of

1353
00:49:00,000 --> 00:49:01,520
the things that we expected to do i'd

1354
00:49:01,520 --> 00:49:03,280
call that a vulnerability some of them

1355
00:49:03,280 --> 00:49:05,040
are critical some of them are

1356
00:49:05,040 --> 00:49:06,240
not

1357
00:49:06,240 --> 00:49:08,079
i tend to focus only on the like

1358
00:49:08,079 --> 00:49:09,839
critical and high stuff because most

1359
00:49:09,839 --> 00:49:11,599
people don't get through that and it

1360
00:49:11,599 --> 00:49:13,280
seems foolish to me to focus on the

1361
00:49:13,280 --> 00:49:15,520
mediums and lows and stuff before you do

1362
00:49:15,520 --> 00:49:18,559
the highs and criticals

1363
00:49:18,559 --> 00:49:20,400
yeah

1364
00:49:20,400 --> 00:49:21,760
there is a weird distribution of

1365
00:49:21,760 --> 00:49:23,680
vulnerabilities by the way like some

1366
00:49:23,680 --> 00:49:24,800
apps have a

1367
00:49:24,800 --> 00:49:27,280
have a ton

1368
00:49:27,280 --> 00:49:29,040
of vulnerabilities

1369
00:49:29,040 --> 00:49:30,880
and uh

1370
00:49:30,880 --> 00:49:33,680
you know some have very few

1371
00:49:33,680 --> 00:49:34,400
so

1372
00:49:34,400 --> 00:49:36,319
the distribution is not like

1373
00:49:36,319 --> 00:49:37,920
that flat

1374
00:49:37,920 --> 00:49:40,920
questions

1375
00:50:02,240 --> 00:50:04,480
that's a fantastic question now jot

1376
00:50:04,480 --> 00:50:06,400
doesn't well you could put sensors in

1377
00:50:06,400 --> 00:50:08,319
jump but it's not designed to solve that

1378
00:50:08,319 --> 00:50:11,040
problem but contrast for instance

1379
00:50:11,040 --> 00:50:13,520
we use instrumentation to measure not

1380
00:50:13,520 --> 00:50:14,960
only exactly what

1381
00:50:14,960 --> 00:50:16,720
libraries are there

1382
00:50:16,720 --> 00:50:18,240
in the real assembled running

1383
00:50:18,240 --> 00:50:20,000
application which is like the first

1384
00:50:20,000 --> 00:50:21,839
thing you got to get the right libraries

1385
00:50:21,839 --> 00:50:23,040
and if you're just looking at the source

1386
00:50:23,040 --> 00:50:24,160
code repo

1387
00:50:24,160 --> 00:50:25,440
you've got a bunch of libraries that

1388
00:50:25,440 --> 00:50:27,839
don't ever run like test libraries and

1389
00:50:27,839 --> 00:50:28,800
stuff

1390
00:50:28,800 --> 00:50:31,200
and you're missing a bunch of libraries

1391
00:50:31,200 --> 00:50:32,559
that are in the app server and the

1392
00:50:32,559 --> 00:50:34,079
platform and things really important

1393
00:50:34,079 --> 00:50:35,599
libraries but you don't see them in the

1394
00:50:35,599 --> 00:50:37,200
source code repo

1395
00:50:37,200 --> 00:50:38,640
but if you're scanning the actual

1396
00:50:38,640 --> 00:50:40,559
application you see all the actual

1397
00:50:40,559 --> 00:50:42,640
libraries that are there and so that's

1398
00:50:42,640 --> 00:50:45,040
the first part the second part is we

1399
00:50:45,040 --> 00:50:47,599
measure exactly what methods are used in

1400
00:50:47,599 --> 00:50:50,000
each of those libraries and that's where

1401
00:50:50,000 --> 00:50:51,920
we get this data is when you actually

1402
00:50:51,920 --> 00:50:52,960
measure it

1403
00:50:52,960 --> 00:50:55,200
only seven percent of you know all that

1404
00:50:55,200 --> 00:50:57,839
code so here's how i break it down

1405
00:50:57,839 --> 00:50:59,520
the whole application is a hundred

1406
00:50:59,520 --> 00:51:01,040
percent of the code

1407
00:51:01,040 --> 00:51:02,800
slice off twenty percent that's your

1408
00:51:02,800 --> 00:51:04,400
custom code

1409
00:51:04,400 --> 00:51:06,800
and then of the remaining eighty

1410
00:51:06,800 --> 00:51:09,040
seventy 74

1411
00:51:09,040 --> 00:51:11,920
is unused open source and six percent is

1412
00:51:11,920 --> 00:51:14,319
used open source and i say six

1413
00:51:14,319 --> 00:51:16,480
i said seven before it's six if you're

1414
00:51:16,480 --> 00:51:17,599
looking at the code for the whole

1415
00:51:17,599 --> 00:51:18,960
application it's seven if you're only

1416
00:51:18,960 --> 00:51:20,640
looking at what percentage of the open

1417
00:51:20,640 --> 00:51:23,119
source code of the 80 use

1418
00:51:23,119 --> 00:51:25,599
that's why that number sounds like that

1419
00:51:25,599 --> 00:51:27,520
but

1420
00:51:27,520 --> 00:51:29,599
i consider most of the findings that

1421
00:51:29,599 --> 00:51:32,240
come out of some of the other vendors

1422
00:51:32,240 --> 00:51:34,319
tools false alarms

1423
00:51:34,319 --> 00:51:35,280
because

1424
00:51:35,280 --> 00:51:36,720
in many cases

1425
00:51:36,720 --> 00:51:38,559
no code in those libraries runs i think

1426
00:51:38,559 --> 00:51:41,280
it's more than 50 of the libraries never

1427
00:51:41,280 --> 00:51:42,800
run at all

1428
00:51:42,800 --> 00:51:44,640
they're just a

1429
00:51:44,640 --> 00:51:47,119
transitive dependency that's required so

1430
00:51:47,119 --> 00:51:49,119
if you've got like you know library a at

1431
00:51:49,119 --> 00:51:52,400
the top and it brings in b c and d

1432
00:51:52,400 --> 00:51:54,720
and d brings in uh

1433
00:51:54,720 --> 00:51:56,079
ef and g

1434
00:51:56,079 --> 00:51:59,760
like if you never use a a feature in b

1435
00:51:59,760 --> 00:52:00,640
you're

1436
00:52:00,640 --> 00:52:02,720
you're never going to see the

1437
00:52:02,720 --> 00:52:05,359
the any of the code in ef and g run

1438
00:52:05,359 --> 00:52:07,200
so there's tons of those and if you

1439
00:52:07,200 --> 00:52:09,200
report vulnerabilities in that stuff

1440
00:52:09,200 --> 00:52:11,119
you're you're reporting false positives

1441
00:52:11,119 --> 00:52:13,200
that's not dangerous

1442
00:52:13,200 --> 00:52:14,800
in to your question earlier it's not a

1443
00:52:14,800 --> 00:52:17,359
vulnerability if it can't be exploited

1444
00:52:17,359 --> 00:52:19,599
so

1445
00:52:19,599 --> 00:52:21,839
that's why it's a key capability to be

1446
00:52:21,839 --> 00:52:23,520
able to know what open source code

1447
00:52:23,520 --> 00:52:25,119
actually runs

1448
00:52:25,119 --> 00:52:27,520
but yeah open source

1449
00:52:27,520 --> 00:52:28,880
software supply chain stuff really

1450
00:52:28,880 --> 00:52:30,319
important

1451
00:52:30,319 --> 00:52:32,079
one quick note on that software supply

1452
00:52:32,079 --> 00:52:34,400
chain topic because it's you know it's

1453
00:52:34,400 --> 00:52:36,000
really important in the biden cyber

1454
00:52:36,000 --> 00:52:38,480
security executive order and uh you know

1455
00:52:38,480 --> 00:52:40,400
nist initiatives and so on

1456
00:52:40,400 --> 00:52:42,079
i think of four things when i think of

1457
00:52:42,079 --> 00:52:44,160
the supply chain i think of first the

1458
00:52:44,160 --> 00:52:45,599
code you write

1459
00:52:45,599 --> 00:52:47,359
and even though it's your organization

1460
00:52:47,359 --> 00:52:49,040
writing that code it's really part of

1461
00:52:49,040 --> 00:52:50,880
the supply chain it feeds into the final

1462
00:52:50,880 --> 00:52:52,400
product right

1463
00:52:52,400 --> 00:52:54,160
the second piece is

1464
00:52:54,160 --> 00:52:55,599
code that you

1465
00:52:55,599 --> 00:52:58,079
import that's your open source libraries

1466
00:52:58,079 --> 00:53:01,119
certainly really important piece

1467
00:53:01,119 --> 00:53:02,880
third thing is code you run

1468
00:53:02,880 --> 00:53:05,599
that's like your sas the apis you're

1469
00:53:05,599 --> 00:53:07,839
using uh you know products that you

1470
00:53:07,839 --> 00:53:09,520
bring in it's another whole bunch of

1471
00:53:09,520 --> 00:53:11,440
code that feeds into your supply chain

1472
00:53:11,440 --> 00:53:13,200
and then the last thing and this is

1473
00:53:13,200 --> 00:53:14,720
really

1474
00:53:14,720 --> 00:53:17,040
under focused on but solarwinds just

1475
00:53:17,040 --> 00:53:19,520
shown a bright light on it it's the code

1476
00:53:19,520 --> 00:53:21,839
that you write with

1477
00:53:21,839 --> 00:53:22,800
and

1478
00:53:22,800 --> 00:53:24,079
that code

1479
00:53:24,079 --> 00:53:26,000
is really important it's all the stuff

1480
00:53:26,000 --> 00:53:28,720
that you use to build your product and

1481
00:53:28,720 --> 00:53:30,559
if you're one of your developers gets

1482
00:53:30,559 --> 00:53:32,160
hacked

1483
00:53:32,160 --> 00:53:33,839
the attacker's got a

1484
00:53:33,839 --> 00:53:35,920
four-lane highway straight into your

1485
00:53:35,920 --> 00:53:37,760
executable that goes either into your

1486
00:53:37,760 --> 00:53:40,000
production or your customers production

1487
00:53:40,000 --> 00:53:42,559
environments and really hurts people

1488
00:53:42,559 --> 00:53:43,920
that's exactly what happened in

1489
00:53:43,920 --> 00:53:45,680
solarwinds and it can happen to

1490
00:53:45,680 --> 00:53:48,559
everybody everybody is solar winds sorry

1491
00:53:48,559 --> 00:53:50,079
your development environments are not

1492
00:53:50,079 --> 00:53:52,240
locked down

1493
00:53:52,240 --> 00:53:54,000
their developers are downloading tools

1494
00:53:54,000 --> 00:53:54,880
off the internet they're running

1495
00:53:54,880 --> 00:53:56,000
libraries i don't know if you've ever

1496
00:53:56,000 --> 00:53:57,200
watched a

1497
00:53:57,200 --> 00:53:59,760
maven build anytime recently but it

1498
00:53:59,760 --> 00:54:02,559
downloads the whole world

1499
00:54:02,559 --> 00:54:04,319
before it starts running

1500
00:54:04,319 --> 00:54:06,160
so you know just

1501
00:54:06,160 --> 00:54:08,000
be careful i think you should start

1502
00:54:08,000 --> 00:54:09,680
putting initiatives in place to lock

1503
00:54:09,680 --> 00:54:12,319
down your development environments

1504
00:54:12,319 --> 00:54:13,920
so that attackers can't use that as a

1505
00:54:13,920 --> 00:54:17,119
pathway into your production

1506
00:54:18,400 --> 00:54:20,960
any other questions we got like uh

1507
00:54:20,960 --> 00:54:24,760
three or four minutes left

1508
00:54:32,160 --> 00:54:34,319
so when you say just

1509
00:54:34,319 --> 00:54:35,839
when you say developer isolation do you

1510
00:54:35,839 --> 00:54:37,680
mean like keeping them out of production

1511
00:54:37,680 --> 00:54:40,680
environments

1512
00:54:44,400 --> 00:54:47,729
[Music]

1513
00:54:57,280 --> 00:54:58,720
sounds like an interest i'd love to talk

1514
00:54:58,720 --> 00:55:00,079
to you a little bit more about that but

1515
00:55:00,079 --> 00:55:03,440
remember if developers are writing code

1516
00:55:03,440 --> 00:55:04,960
it doesn't matter like i think of it

1517
00:55:04,960 --> 00:55:07,440
like east west developer communication

1518
00:55:07,440 --> 00:55:09,599
doesn't matter that much

1519
00:55:09,599 --> 00:55:10,880
if they're downloading stuff from the

1520
00:55:10,880 --> 00:55:13,520
internet onto their machine

1521
00:55:13,520 --> 00:55:15,440
and running it there and their machine

1522
00:55:15,440 --> 00:55:16,880
gets compromised

1523
00:55:16,880 --> 00:55:18,640
then the attackers can use that to

1524
00:55:18,640 --> 00:55:21,359
commit code into your pipeline

1525
00:55:21,359 --> 00:55:23,520
and now your product is compromised and

1526
00:55:23,520 --> 00:55:25,119
then when your product goes into either

1527
00:55:25,119 --> 00:55:27,200
your production or customers production

1528
00:55:27,200 --> 00:55:28,160
environments

1529
00:55:28,160 --> 00:55:28,960
it's

1530
00:55:28,960 --> 00:55:30,799
compromised and they can use it to

1531
00:55:30,799 --> 00:55:35,240
launch you know attacks from there

1532
00:55:38,020 --> 00:55:40,000
[Music]

1533
00:55:40,000 --> 00:55:41,440
not really

1534
00:55:41,440 --> 00:55:43,359
it's it's really early i mean you know

1535
00:55:43,359 --> 00:55:45,760
somebody's going to make a startup and

1536
00:55:45,760 --> 00:55:48,720
make a billion dollars i don't know

1537
00:55:48,720 --> 00:55:50,710
i'm already busy

1538
00:55:50,710 --> 00:55:54,799
[Laughter]

1539
00:55:54,799 --> 00:55:57,359
i'm just dropping dropping ideas just

1540
00:55:57,359 --> 00:55:59,040
laying them out there just millions of

1541
00:55:59,040 --> 00:56:01,040
them

1542
00:56:01,040 --> 00:56:03,839
yeah okay

1543
00:56:05,040 --> 00:56:07,119
any any thoughts on uh instrumentation

1544
00:56:07,119 --> 00:56:08,880
anybody want to try it who's going to go

1545
00:56:08,880 --> 00:56:10,319
take a look at john i know not

1546
00:56:10,319 --> 00:56:12,640
everybody's a developer but you know i'm

1547
00:56:12,640 --> 00:56:14,640
going to want to give it a shot

1548
00:56:14,640 --> 00:56:16,559
okay let's see some very quick hands

1549
00:56:16,559 --> 00:56:18,400
people go

1550
00:56:18,400 --> 00:56:20,079
uh that'll be awesome let me know how it

1551
00:56:20,079 --> 00:56:21,839
goes and if somebody wants to build the

1552
00:56:21,839 --> 00:56:24,319
you know net observability toolkit or

1553
00:56:24,319 --> 00:56:27,359
the ruby observability toolkit uh

1554
00:56:27,359 --> 00:56:29,839
you know it it's not really a tremendous

1555
00:56:29,839 --> 00:56:31,119
amount of code

1556
00:56:31,119 --> 00:56:32,880
uh so it'd be awesome i'd love to work

1557
00:56:32,880 --> 00:56:35,440
with you on that

1558
00:56:36,000 --> 00:56:37,520
okay thanks everybody i appreciate it uh

1559
00:56:37,520 --> 00:56:39,200
please do stop by our contrast booth and

1560
00:56:39,200 --> 00:56:41,839
uh say hi to uh my friends david and

1561
00:56:41,839 --> 00:56:44,160
adam here and the folks in the booth be

1562
00:56:44,160 --> 00:56:46,160
fantastic

1563
00:56:46,160 --> 00:56:49,160
thanks

