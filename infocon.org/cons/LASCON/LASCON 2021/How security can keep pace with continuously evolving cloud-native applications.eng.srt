1
00:00:03,200 --> 00:00:18,080
[Music]

2
00:00:18,080 --> 00:00:20,880
all right so today's talk uh is really

3
00:00:20,880 --> 00:00:23,279
about a trend that you may or may not be

4
00:00:23,279 --> 00:00:25,359
seeing in your environment

5
00:00:25,359 --> 00:00:26,640
and

6
00:00:26,640 --> 00:00:27,680
it's

7
00:00:27,680 --> 00:00:29,039
this trend of

8
00:00:29,039 --> 00:00:31,920
architectures now evolving

9
00:00:31,920 --> 00:00:32,640
not

10
00:00:32,640 --> 00:00:34,399
you know over months

11
00:00:34,399 --> 00:00:37,040
over quarters but you know release over

12
00:00:37,040 --> 00:00:38,079
release

13
00:00:38,079 --> 00:00:39,760
deployment over deployment sprint over

14
00:00:39,760 --> 00:00:41,360
sprint and so

15
00:00:41,360 --> 00:00:42,320
um

16
00:00:42,320 --> 00:00:44,399
love to talk about you know what that

17
00:00:44,399 --> 00:00:47,039
trend is as well as you know

18
00:00:47,039 --> 00:00:49,760
what you can start doing to cope with it

19
00:00:49,760 --> 00:00:51,680
so i want this to be

20
00:00:51,680 --> 00:00:53,280
interactive this is the last session

21
00:00:53,280 --> 00:00:56,399
before prizes are announced so i'd

22
00:00:56,399 --> 00:00:58,399
rather not be here just talking

23
00:00:58,399 --> 00:00:59,760
so uh

24
00:00:59,760 --> 00:01:01,600
let's try something different i'd love

25
00:01:01,600 --> 00:01:03,840
interaction please stop me ask questions

26
00:01:03,840 --> 00:01:05,199
um

27
00:01:05,199 --> 00:01:06,960
but maybe we can start with just a quick

28
00:01:06,960 --> 00:01:07,920
survey

29
00:01:07,920 --> 00:01:10,400
so uh part of this talk is about

30
00:01:10,400 --> 00:01:12,400
infrastructure as code and i'd love to

31
00:01:12,400 --> 00:01:14,400
understand you know who in the audience

32
00:01:14,400 --> 00:01:16,080
is familiar with infrastructure as code

33
00:01:16,080 --> 00:01:17,520
as a concept

34
00:01:17,520 --> 00:01:20,000
just show of hands

35
00:01:20,000 --> 00:01:22,479
all right so good number um don't worry

36
00:01:22,479 --> 00:01:24,479
for those of you that aren't familiar i

37
00:01:24,479 --> 00:01:27,840
will give you a very quick primer

38
00:01:28,000 --> 00:01:30,159
so

39
00:01:30,240 --> 00:01:31,840
for the folks that are familiar with

40
00:01:31,840 --> 00:01:33,360
infrastructure's code or seeing it in

41
00:01:33,360 --> 00:01:34,720
their organization

42
00:01:34,720 --> 00:01:37,280
what languages are you seeing terraform

43
00:01:37,280 --> 00:01:38,640
anyone

44
00:01:38,640 --> 00:01:41,040
cloud formation

45
00:01:41,040 --> 00:01:42,960
all right azure resource manager

46
00:01:42,960 --> 00:01:45,119
templates

47
00:01:45,119 --> 00:01:48,000
anyone with pollumi

48
00:01:48,000 --> 00:01:50,000
all right that's a

49
00:01:50,000 --> 00:01:51,520
um

50
00:01:51,520 --> 00:01:54,880
and maybe if anyone's open to sharing

51
00:01:54,880 --> 00:01:58,560
what kind of code sizes are you seeing

52
00:02:02,159 --> 00:02:04,479
okay

53
00:02:05,520 --> 00:02:07,040
i think

54
00:02:07,040 --> 00:02:08,479
a lot of the same folks were here for

55
00:02:08,479 --> 00:02:09,758
the last talk but i'll ask the same

56
00:02:09,758 --> 00:02:11,599
question right like how many of you are

57
00:02:11,599 --> 00:02:14,640
security professionals

58
00:02:14,800 --> 00:02:16,720
all right so good number how about

59
00:02:16,720 --> 00:02:18,400
developers

60
00:02:18,400 --> 00:02:20,480
all right so we got some developers

61
00:02:20,480 --> 00:02:21,520
um

62
00:02:21,520 --> 00:02:23,840
for the security professionals uh are

63
00:02:23,840 --> 00:02:25,520
you reviewing

64
00:02:25,520 --> 00:02:27,680
the terraform that's in your environment

65
00:02:27,680 --> 00:02:30,080
how do you get engaged

66
00:02:30,080 --> 00:02:31,280
and

67
00:02:31,280 --> 00:02:32,400
okay

68
00:02:32,400 --> 00:02:34,000
yeah that's a

69
00:02:34,000 --> 00:02:34,959
that's a

70
00:02:34,959 --> 00:02:37,920
challenge across many organizations that

71
00:02:37,920 --> 00:02:39,360
that i've worked with

72
00:02:39,360 --> 00:02:41,360
so awesome

73
00:02:41,360 --> 00:02:42,640
so for those of you that are not

74
00:02:42,640 --> 00:02:44,080
familiar with infrastructure as code

75
00:02:44,080 --> 00:02:46,480
i'll i'll start off with a quick primer

76
00:02:46,480 --> 00:02:49,360
and and take us back 10 years

77
00:02:49,360 --> 00:02:50,480
in history

78
00:02:50,480 --> 00:02:51,920
so just 10 years ago most of the

79
00:02:51,920 --> 00:02:53,440
companies that i worked with right there

80
00:02:53,440 --> 00:02:54,560
were two different teams that were

81
00:02:54,560 --> 00:02:57,040
involved in shipping software

82
00:02:57,040 --> 00:02:58,879
you had your infrastructure teams and

83
00:02:58,879 --> 00:03:01,840
your software development teams

84
00:03:01,840 --> 00:03:03,040
today

85
00:03:03,040 --> 00:03:05,440
infrastructure is now defined as code in

86
00:03:05,440 --> 00:03:08,080
languages like terraform cloud formation

87
00:03:08,080 --> 00:03:10,319
azure resource manager templates

88
00:03:10,319 --> 00:03:12,800
and increasingly what's happening

89
00:03:12,800 --> 00:03:13,680
is

90
00:03:13,680 --> 00:03:15,599
this code is now falling under the

91
00:03:15,599 --> 00:03:18,000
umbrella of software development teams

92
00:03:18,000 --> 00:03:19,519
so more and more

93
00:03:19,519 --> 00:03:21,280
the ownership

94
00:03:21,280 --> 00:03:22,959
and the responsibility for this code is

95
00:03:22,959 --> 00:03:24,159
falling under the umbrella software

96
00:03:24,159 --> 00:03:25,519
development teams

97
00:03:25,519 --> 00:03:26,799
we're really seeing this trend where

98
00:03:26,799 --> 00:03:28,879
developers are being empowered to take

99
00:03:28,879 --> 00:03:30,480
ownership of the entire release

100
00:03:30,480 --> 00:03:33,040
management life cycle and the feedback

101
00:03:33,040 --> 00:03:35,120
loop that comes back and so you know

102
00:03:35,120 --> 00:03:37,040
you're seeing um

103
00:03:37,040 --> 00:03:39,200
you know these new models within

104
00:03:39,200 --> 00:03:41,360
organizations where

105
00:03:41,360 --> 00:03:43,280
infrastructure as code

106
00:03:43,280 --> 00:03:45,840
is now being developed as part you know

107
00:03:45,840 --> 00:03:47,920
there's sres or devops folks that are

108
00:03:47,920 --> 00:03:49,200
helping write this code but they're

109
00:03:49,200 --> 00:03:50,959
really you know supporting that software

110
00:03:50,959 --> 00:03:52,879
development effort and more and more

111
00:03:52,879 --> 00:03:54,319
that infrastructure as code is being

112
00:03:54,319 --> 00:03:57,040
afforded the same best practices

113
00:03:57,040 --> 00:03:58,560
that we afford

114
00:03:58,560 --> 00:04:02,159
to application code so today you can now

115
00:04:02,159 --> 00:04:04,000
build infrastructure in an iterative

116
00:04:04,000 --> 00:04:05,599
manner you can deliver infrastructure

117
00:04:05,599 --> 00:04:07,280
capabilities

118
00:04:07,280 --> 00:04:09,599
in an iterative manner so as customer

119
00:04:09,599 --> 00:04:11,360
requirements change you can

120
00:04:11,360 --> 00:04:13,599
update your architecture to add new

121
00:04:13,599 --> 00:04:15,200
capabilities

122
00:04:15,200 --> 00:04:17,680
and i'll just touch a little bit about

123
00:04:17,680 --> 00:04:19,440
why companies are adopting

124
00:04:19,440 --> 00:04:21,120
infrastructure as code the biggest

125
00:04:21,120 --> 00:04:22,400
reason is

126
00:04:22,400 --> 00:04:23,520
to drive

127
00:04:23,520 --> 00:04:26,639
more velocity and more agility

128
00:04:26,639 --> 00:04:29,600
into their products

129
00:04:29,600 --> 00:04:32,479
it gives you automation to automate the

130
00:04:32,479 --> 00:04:34,479
deployment of your

131
00:04:34,479 --> 00:04:36,479
application

132
00:04:36,479 --> 00:04:38,240
simplifies infrastructure provisioning

133
00:04:38,240 --> 00:04:40,639
but most importantly right it's code so

134
00:04:40,639 --> 00:04:42,560
it's version controlled it's repeatable

135
00:04:42,560 --> 00:04:44,320
it's scalable it's

136
00:04:44,320 --> 00:04:46,720
uh consistent so now you can get

137
00:04:46,720 --> 00:04:49,040
consistent deployments it's much easier

138
00:04:49,040 --> 00:04:51,040
to manage that scale and if you kind of

139
00:04:51,040 --> 00:04:52,800
think about the

140
00:04:52,800 --> 00:04:54,639
transformational journeys that most

141
00:04:54,639 --> 00:04:56,160
organizations that weren't born in the

142
00:04:56,160 --> 00:04:58,400
cloud go through you know they start

143
00:04:58,400 --> 00:05:00,479
with a lift and shift approach

144
00:05:00,479 --> 00:05:01,919
and usually right you're lifting and

145
00:05:01,919 --> 00:05:04,240
shifting vms into the cloud and all you

146
00:05:04,240 --> 00:05:06,800
did is change data centers at that point

147
00:05:06,800 --> 00:05:09,440
but then you know eventually you realize

148
00:05:09,440 --> 00:05:11,680
that it actually costs more to do this

149
00:05:11,680 --> 00:05:13,919
um to run their

150
00:05:13,919 --> 00:05:17,759
servers in aws and so you start really

151
00:05:17,759 --> 00:05:19,120
breaking down your monolithic

152
00:05:19,120 --> 00:05:20,320
applications move towards more

153
00:05:20,320 --> 00:05:22,400
microservice based architectures and as

154
00:05:22,400 --> 00:05:25,199
that trend happens what you see is it's

155
00:05:25,199 --> 00:05:26,960
incredibly complex to manage these

156
00:05:26,960 --> 00:05:28,800
applications

157
00:05:28,800 --> 00:05:31,120
um if you're doing manual provisioning

158
00:05:31,120 --> 00:05:33,440
approaches and there's a lot of click

159
00:05:33,440 --> 00:05:37,600
ops involved it doesn't scale

160
00:05:37,600 --> 00:05:40,400
and so that's where you'll see

161
00:05:40,400 --> 00:05:42,000
organizations really shift towards

162
00:05:42,000 --> 00:05:43,840
infrastructure as code because it's a

163
00:05:43,840 --> 00:05:44,720
it's an

164
00:05:44,720 --> 00:05:47,199
automation that allows them to really uh

165
00:05:47,199 --> 00:05:48,639
manage that

166
00:05:48,639 --> 00:05:52,720
those those kind of complex applications

167
00:05:52,720 --> 00:05:53,600
and

168
00:05:53,600 --> 00:05:54,320
i

169
00:05:54,320 --> 00:05:56,880
didn't quite describe what it is so for

170
00:05:56,880 --> 00:05:58,400
for those of you that aren't familiar

171
00:05:58,400 --> 00:06:00,000
it's a declarative language that lets

172
00:06:00,000 --> 00:06:02,080
you declare infrastructure and

173
00:06:02,080 --> 00:06:04,560
infrastructure architectures this code

174
00:06:04,560 --> 00:06:07,199
so any questions

175
00:06:07,199 --> 00:06:09,600
all right

176
00:06:10,400 --> 00:06:12,080
so

177
00:06:12,080 --> 00:06:13,919
what is what has happened over the last

178
00:06:13,919 --> 00:06:15,919
five years is now

179
00:06:15,919 --> 00:06:18,880
you know what we're really seeing is

180
00:06:18,880 --> 00:06:21,280
entire application architectures are not

181
00:06:21,280 --> 00:06:23,600
codified in languages like terraform so

182
00:06:23,600 --> 00:06:25,120
if you look at an example terraform and

183
00:06:25,120 --> 00:06:26,560
i asked a question around lines of code

184
00:06:26,560 --> 00:06:27,440
because

185
00:06:27,440 --> 00:06:28,960
you know an application architecture

186
00:06:28,960 --> 00:06:30,080
like this

187
00:06:30,080 --> 00:06:31,919
may arrange anywhere from like

188
00:06:31,919 --> 00:06:34,960
10 to 30 000 lines of code you know

189
00:06:34,960 --> 00:06:36,800
i work with customers for example that

190
00:06:36,800 --> 00:06:39,120
have like applications in the cloud that

191
00:06:39,120 --> 00:06:41,520
are so complex there's 70 000 lines of

192
00:06:41,520 --> 00:06:43,360
code they have like 5 000 different

193
00:06:43,360 --> 00:06:44,479
components

194
00:06:44,479 --> 00:06:46,800
it's it's incredible

195
00:06:46,800 --> 00:06:49,120
and part of part of the reason why this

196
00:06:49,120 --> 00:06:51,120
is happening is because

197
00:06:51,120 --> 00:06:53,199
once you codify your architecture and

198
00:06:53,199 --> 00:06:54,560
code

199
00:06:54,560 --> 00:06:56,160
it's much easier to manage and it's much

200
00:06:56,160 --> 00:06:58,240
easier to build more complex application

201
00:06:58,240 --> 00:06:59,759
architectures

202
00:06:59,759 --> 00:07:02,960
so you need 500 lambdas sure

203
00:07:02,960 --> 00:07:05,520
right we can just add 500 lambdas to

204
00:07:05,520 --> 00:07:06,800
your application architecture and

205
00:07:06,800 --> 00:07:08,639
fundamentally this is allowing

206
00:07:08,639 --> 00:07:11,039
development teams to you know accelerate

207
00:07:11,039 --> 00:07:14,840
faster right they're no longer dependent

208
00:07:14,840 --> 00:07:18,000
um on other factors to really deliver

209
00:07:18,000 --> 00:07:19,759
new feature capabilities if they want to

210
00:07:19,759 --> 00:07:21,280
add a machine learning service they can

211
00:07:21,280 --> 00:07:22,560
just go add a machine learning service

212
00:07:22,560 --> 00:07:24,960
to their application architecture by

213
00:07:24,960 --> 00:07:26,800
changing a few lines of code

214
00:07:26,800 --> 00:07:28,080
and that is fundamentally what's

215
00:07:28,080 --> 00:07:29,199
happening and

216
00:07:29,199 --> 00:07:30,639
that is the trend that i want to talk

217
00:07:30,639 --> 00:07:32,880
about

218
00:07:34,160 --> 00:07:36,080
so these architectures are changing from

219
00:07:36,080 --> 00:07:37,520
release to release and we see this with

220
00:07:37,520 --> 00:07:39,520
our customers we see you know we're

221
00:07:39,520 --> 00:07:41,280
plugged into their pipelines and so we

222
00:07:41,280 --> 00:07:43,680
see from release to release how their

223
00:07:43,680 --> 00:07:45,919
infrastructure as code is changing uh

224
00:07:45,919 --> 00:07:47,440
you know we work with customers that

225
00:07:47,440 --> 00:07:48,319
have

226
00:07:48,319 --> 00:07:50,479
you know where we engaged

227
00:07:50,479 --> 00:07:52,639
very early on in the proof of concept

228
00:07:52,639 --> 00:07:54,720
phase and and so we have a lot of this

229
00:07:54,720 --> 00:07:57,680
data and what we're seeing is you know

230
00:07:57,680 --> 00:07:59,680
from release to release

231
00:07:59,680 --> 00:08:01,360
terraform these terraform files are

232
00:08:01,360 --> 00:08:03,440
changing and fundamentally what that

233
00:08:03,440 --> 00:08:05,199
does is it's changing your application

234
00:08:05,199 --> 00:08:07,520
architecture and when i when i think

235
00:08:07,520 --> 00:08:10,080
back to you know my career as a security

236
00:08:10,080 --> 00:08:12,560
architect one of the biggest things that

237
00:08:12,560 --> 00:08:14,560
frustrates security architects is scope

238
00:08:14,560 --> 00:08:16,560
change you assess a particular

239
00:08:16,560 --> 00:08:18,560
application architecture but then what

240
00:08:18,560 --> 00:08:20,240
gets deployed is something completely

241
00:08:20,240 --> 00:08:21,120
different

242
00:08:21,120 --> 00:08:23,680
and you find out later on and

243
00:08:23,680 --> 00:08:25,199
now you know you're playing a game of

244
00:08:25,199 --> 00:08:27,919
catch-up and it's it's the friction that

245
00:08:27,919 --> 00:08:29,759
then gets created between

246
00:08:29,759 --> 00:08:32,000
the enterprise architects and developers

247
00:08:32,000 --> 00:08:34,159
and the security architects

248
00:08:34,159 --> 00:08:36,159
that you have to now navigate and you

249
00:08:36,159 --> 00:08:38,958
know it becomes a six month road map to

250
00:08:38,958 --> 00:08:40,799
design something that's a mitigating

251
00:08:40,799 --> 00:08:42,719
design and implement it and then ship it

252
00:08:42,719 --> 00:08:44,320
in production and

253
00:08:44,320 --> 00:08:45,519
now that

254
00:08:45,519 --> 00:08:47,519
what what this has done is exacerbated

255
00:08:47,519 --> 00:08:49,120
that problem now that's not happening on

256
00:08:49,120 --> 00:08:51,519
this time scales of months it's

257
00:08:51,519 --> 00:08:54,160
happening on the time scales of days and

258
00:08:54,160 --> 00:08:55,600
from day to day

259
00:08:55,600 --> 00:08:56,959
things can change in your application

260
00:08:56,959 --> 00:08:58,160
architecture that you may not be

261
00:08:58,160 --> 00:08:59,760
familiar with so there was a talk

262
00:08:59,760 --> 00:09:03,760
yesterday uh that ravi gave on

263
00:09:03,760 --> 00:09:08,800
api security and he he has a very like

264
00:09:08,800 --> 00:09:10,720
very good example that personally i've

265
00:09:10,720 --> 00:09:12,640
experienced many times over where you

266
00:09:12,640 --> 00:09:15,040
know someone develops an api

267
00:09:15,040 --> 00:09:16,720
and that api

268
00:09:16,720 --> 00:09:19,200
uh was designed for internal use

269
00:09:19,200 --> 00:09:21,680
and as it evolves right it gets exposed

270
00:09:21,680 --> 00:09:23,360
to business partners

271
00:09:23,360 --> 00:09:24,560
and if you're not plugged in as a

272
00:09:24,560 --> 00:09:26,480
security architect into the life cycle

273
00:09:26,480 --> 00:09:28,560
and you didn't see that change happen

274
00:09:28,560 --> 00:09:29,600
um

275
00:09:29,600 --> 00:09:31,519
it's you know you you lost your

276
00:09:31,519 --> 00:09:32,959
opportunity to provide security guidance

277
00:09:32,959 --> 00:09:34,320
and when you find out after the fact

278
00:09:34,320 --> 00:09:36,000
then it's once again that friction that

279
00:09:36,000 --> 00:09:38,399
i was referring to and

280
00:09:38,399 --> 00:09:40,080
that time scale for how fast those

281
00:09:40,080 --> 00:09:41,440
changes are happening

282
00:09:41,440 --> 00:09:43,680
these days is incredible

283
00:09:43,680 --> 00:09:45,040
so that's a problem that i want to talk

284
00:09:45,040 --> 00:09:47,360
about

285
00:09:49,120 --> 00:09:51,360
i talked about you know just the sheer

286
00:09:51,360 --> 00:09:53,760
complexity that infrastructure as code

287
00:09:53,760 --> 00:09:56,560
brings and the challenges that this

288
00:09:56,560 --> 00:09:59,040
creates for security teams so let's

289
00:09:59,040 --> 00:10:01,279
let's talk a little bit more about why

290
00:10:01,279 --> 00:10:04,079
this is happening and the kinds of ways

291
00:10:04,079 --> 00:10:07,760
that these architectures are evolving

292
00:10:09,440 --> 00:10:10,880
so the first

293
00:10:10,880 --> 00:10:12,480
use case here is new business

294
00:10:12,480 --> 00:10:15,600
requirements so

295
00:10:16,000 --> 00:10:18,560
you're in a regulated industry a

296
00:10:18,560 --> 00:10:20,240
customer comes to you and says hey i'd

297
00:10:20,240 --> 00:10:21,839
like you to be compliant with this new

298
00:10:21,839 --> 00:10:24,160
standard uh that's one example where

299
00:10:24,160 --> 00:10:25,839
business requirements change customers

300
00:10:25,839 --> 00:10:28,399
come to you and say hey i'd like to you

301
00:10:28,399 --> 00:10:30,640
know you have this amazing data set

302
00:10:30,640 --> 00:10:33,920
right can you show me what you can do

303
00:10:33,920 --> 00:10:34,640
by

304
00:10:34,640 --> 00:10:36,560
performing providing some analytics on

305
00:10:36,560 --> 00:10:40,240
that data and a developer today you know

306
00:10:40,240 --> 00:10:42,240
going back to 10 years ago right the

307
00:10:42,240 --> 00:10:43,760
developers that i worked with right if

308
00:10:43,760 --> 00:10:45,680
they wanted to deliver a machine

309
00:10:45,680 --> 00:10:47,200
learning capability as part of their

310
00:10:47,200 --> 00:10:49,279
application it would take them

311
00:10:49,279 --> 00:10:51,440
roughly you know two to three months to

312
00:10:51,440 --> 00:10:53,279
design implement

313
00:10:53,279 --> 00:10:54,160
ship

314
00:10:54,160 --> 00:10:55,200
today

315
00:10:55,200 --> 00:10:56,800
for a proof of value

316
00:10:56,800 --> 00:10:58,640
you know a developer that's familiar

317
00:10:58,640 --> 00:11:00,079
with these cloud capabilities can

318
00:11:00,079 --> 00:11:02,720
probably turn around as early as four

319
00:11:02,720 --> 00:11:03,920
hours

320
00:11:03,920 --> 00:11:04,800
so

321
00:11:04,800 --> 00:11:05,600
the

322
00:11:05,600 --> 00:11:07,600
the speed at which development teams can

323
00:11:07,600 --> 00:11:09,279
operate and deliver on new business

324
00:11:09,279 --> 00:11:11,920
requirements has changed and now they're

325
00:11:11,920 --> 00:11:14,399
more receptive to these customers and

326
00:11:14,399 --> 00:11:15,839
their customer requests and they're able

327
00:11:15,839 --> 00:11:18,560
to deliver on them

328
00:11:23,360 --> 00:11:25,040
another example is new technology

329
00:11:25,040 --> 00:11:28,880
requirements you might you know

330
00:11:28,880 --> 00:11:31,120
you might be working with a particular

331
00:11:31,120 --> 00:11:33,760
database technology and you want to use

332
00:11:33,760 --> 00:11:36,320
the cloud native capabilities that your

333
00:11:36,320 --> 00:11:38,320
cloud service provider offers

334
00:11:38,320 --> 00:11:40,839
and you want to shift to these new

335
00:11:40,839 --> 00:11:42,959
capabilities and

336
00:11:42,959 --> 00:11:44,720
you know these types of changes are also

337
00:11:44,720 --> 00:11:47,279
you know becoming easier and easier

338
00:11:47,279 --> 00:11:48,079
and

339
00:11:48,079 --> 00:11:50,320
you you see that you see foundational

340
00:11:50,320 --> 00:11:51,839
changes happening

341
00:11:51,839 --> 00:11:53,519
to these application architectures as

342
00:11:53,519 --> 00:11:56,079
new technologies are added

343
00:11:56,079 --> 00:11:59,599
to your application architecture

344
00:12:00,639 --> 00:12:03,600
then new security requirements you know

345
00:12:03,600 --> 00:12:05,760
i don't see as much of this but

346
00:12:05,760 --> 00:12:08,399
i will say that like this is where

347
00:12:08,399 --> 00:12:10,320
security can really impact these

348
00:12:10,320 --> 00:12:12,079
application architectures and as the

349
00:12:12,079 --> 00:12:13,600
threat landscape changes for your

350
00:12:13,600 --> 00:12:16,160
organization as the application

351
00:12:16,160 --> 00:12:17,680
architecture changes so your business

352
00:12:17,680 --> 00:12:19,519
requirements changed where you weren't

353
00:12:19,519 --> 00:12:21,200
processing sensitive data and all of a

354
00:12:21,200 --> 00:12:22,959
sudden now you are processing sensitive

355
00:12:22,959 --> 00:12:24,800
data

356
00:12:24,800 --> 00:12:26,320
fundamentally that should lead to new

357
00:12:26,320 --> 00:12:27,760
security requirements that could apply

358
00:12:27,760 --> 00:12:30,240
to this application architecture that

359
00:12:30,240 --> 00:12:31,200
also

360
00:12:31,200 --> 00:12:33,040
can be reflected in this infrastructure

361
00:12:33,040 --> 00:12:35,360
as code

362
00:12:35,360 --> 00:12:36,959
and so you know there's kind of a couple

363
00:12:36,959 --> 00:12:38,720
different ways this happens one is you

364
00:12:38,720 --> 00:12:40,639
know um

365
00:12:40,639 --> 00:12:42,000
security requirements are changing

366
00:12:42,000 --> 00:12:44,399
because the business use case has been

367
00:12:44,399 --> 00:12:46,240
altered in some way or security

368
00:12:46,240 --> 00:12:47,519
requirements are changing because you

369
00:12:47,519 --> 00:12:49,600
know you're recognizing that you're

370
00:12:49,600 --> 00:12:51,839
facing certain threats and you're you

371
00:12:51,839 --> 00:12:53,760
want to adopt different architectures

372
00:12:53,760 --> 00:12:55,839
that mitigate against those threats more

373
00:12:55,839 --> 00:12:58,480
effectively

374
00:12:59,760 --> 00:13:02,000
and then the last way you'll see this

375
00:13:02,000 --> 00:13:03,839
see these architectures changing is

376
00:13:03,839 --> 00:13:05,839
really cloud features are constantly

377
00:13:05,839 --> 00:13:07,360
changing

378
00:13:07,360 --> 00:13:09,519
so

379
00:13:09,839 --> 00:13:10,800
if you

380
00:13:10,800 --> 00:13:13,600
track the aws apis

381
00:13:13,600 --> 00:13:16,720
and you look at like historically

382
00:13:16,720 --> 00:13:17,680
you know

383
00:13:17,680 --> 00:13:19,680
over a calendar year how many days where

384
00:13:19,680 --> 00:13:21,360
they haven't made an update to the aws

385
00:13:21,360 --> 00:13:23,680
apis there's probably like three or four

386
00:13:23,680 --> 00:13:26,079
days in the calendar year where updates

387
00:13:26,079 --> 00:13:28,560
don't happen to aws apis like

388
00:13:28,560 --> 00:13:30,480
the cloud service providers are moving

389
00:13:30,480 --> 00:13:32,959
at such an amazing pace and they're

390
00:13:32,959 --> 00:13:34,160
constantly changing their feature

391
00:13:34,160 --> 00:13:36,480
capabilities and and part of this is

392
00:13:36,480 --> 00:13:38,160
they'll deliver capabilities that are

393
00:13:38,160 --> 00:13:39,519
actually half-baked

394
00:13:39,519 --> 00:13:40,959
that don't have enough security

395
00:13:40,959 --> 00:13:44,079
capabilities baked in and eventually

396
00:13:44,079 --> 00:13:46,000
over time they'll start adding those

397
00:13:46,000 --> 00:13:50,399
capabilities and as a security architect

398
00:13:50,399 --> 00:13:52,480
i'm faced with the problem of constantly

399
00:13:52,480 --> 00:13:55,519
keeping up to understand when changes

400
00:13:55,519 --> 00:13:56,880
are happening to these capabilities so

401
00:13:56,880 --> 00:13:58,320
that i can then provide the best

402
00:13:58,320 --> 00:14:00,399
guidance to my development teams and

403
00:14:00,399 --> 00:14:03,040
that's been an incredible challenge

404
00:14:03,040 --> 00:14:04,639
you know i'll give you an example of

405
00:14:04,639 --> 00:14:07,760
when microsoft shipped the microsoft sql

406
00:14:07,760 --> 00:14:09,040
for azure

407
00:14:09,040 --> 00:14:10,800
initially it didn't support database

408
00:14:10,800 --> 00:14:12,800
encryption and you know a year or two

409
00:14:12,800 --> 00:14:15,839
later they added the capability but you

410
00:14:15,839 --> 00:14:19,279
had to be you know plugged in following

411
00:14:19,279 --> 00:14:21,680
all of the news from azure to then

412
00:14:21,680 --> 00:14:23,760
realize that this happened and then go

413
00:14:23,760 --> 00:14:25,040
back to your development teams and

414
00:14:25,040 --> 00:14:25,920
actually

415
00:14:25,920 --> 00:14:27,440
you know impact these application

416
00:14:27,440 --> 00:14:28,959
architectures to then

417
00:14:28,959 --> 00:14:30,480
deliver on your database encryption

418
00:14:30,480 --> 00:14:33,519
requirements for example

419
00:14:37,199 --> 00:14:38,959
so i'll shift

420
00:14:38,959 --> 00:14:40,800
gears and talk about what we can do to

421
00:14:40,800 --> 00:14:44,839
actually address these trends

422
00:14:46,320 --> 00:14:48,639
so a big focus of mine recently has been

423
00:14:48,639 --> 00:14:50,560
really how can we democratize security

424
00:14:50,560 --> 00:14:52,720
for developers i i see a couple

425
00:14:52,720 --> 00:14:54,880
challenges so one is you know what with

426
00:14:54,880 --> 00:14:57,040
all this automation

427
00:14:57,040 --> 00:14:59,680
uh as well as you know just recognizing

428
00:14:59,680 --> 00:15:02,959
that security teams from a resourcing

429
00:15:02,959 --> 00:15:06,399
standpoint are just outmatched

430
00:15:06,399 --> 00:15:08,800
and you know the the statistics from a

431
00:15:08,800 --> 00:15:11,120
survey several years ago or like 100

432
00:15:11,120 --> 00:15:13,920
developers to a single security resource

433
00:15:13,920 --> 00:15:16,079
there's there's just we're

434
00:15:16,079 --> 00:15:18,399
we as security professionals are really

435
00:15:18,399 --> 00:15:21,120
not well positioned to scale to the size

436
00:15:21,120 --> 00:15:22,320
of the problem

437
00:15:22,320 --> 00:15:24,160
and so you know when development teams

438
00:15:24,160 --> 00:15:26,079
have been able to accelerate through

439
00:15:26,079 --> 00:15:28,079
automation you know

440
00:15:28,079 --> 00:15:30,639
i'll talk a little bit about that in in

441
00:15:30,639 --> 00:15:33,519
in the next slide but really

442
00:15:33,519 --> 00:15:36,720
a key aspect of the solution here has to

443
00:15:36,720 --> 00:15:38,800
be involving the developers and there's

444
00:15:38,800 --> 00:15:40,800
been a lot of talks here that have kind

445
00:15:40,800 --> 00:15:42,560
of touched on this you know really

446
00:15:42,560 --> 00:15:46,079
making security easy for developers

447
00:15:46,079 --> 00:15:48,079
giving them sufficient training from a

448
00:15:48,079 --> 00:15:49,680
security standpoint investing in

449
00:15:49,680 --> 00:15:52,560
training and really investing internally

450
00:15:52,560 --> 00:15:54,160
into the security practice so that the

451
00:15:54,160 --> 00:15:55,759
guidance that's being provided to those

452
00:15:55,759 --> 00:15:57,040
developers

453
00:15:57,040 --> 00:15:58,639
is applicable

454
00:15:58,639 --> 00:16:00,079
accessible

455
00:16:00,079 --> 00:16:01,759
and actionable

456
00:16:01,759 --> 00:16:03,680
and and i'll touch on this a little bit

457
00:16:03,680 --> 00:16:06,320
more later but really you know

458
00:16:06,320 --> 00:16:08,880
a consistent challenge that i see and

459
00:16:08,880 --> 00:16:10,959
and there was an example earlier i think

460
00:16:10,959 --> 00:16:12,560
a few talks ago right where someone

461
00:16:12,560 --> 00:16:14,399
mentioned csrf

462
00:16:14,399 --> 00:16:15,360
and

463
00:16:15,360 --> 00:16:16,720
you know there's a lot of developers

464
00:16:16,720 --> 00:16:19,360
that i've worked with right where

465
00:16:19,360 --> 00:16:21,440
security terminology

466
00:16:21,440 --> 00:16:23,279
is not really accessible to them so how

467
00:16:23,279 --> 00:16:24,720
can we make it easier for them how can

468
00:16:24,720 --> 00:16:26,959
we how can we you know involve them in

469
00:16:26,959 --> 00:16:29,600
the process and help them understand

470
00:16:29,600 --> 00:16:31,279
you know what they need to do why they

471
00:16:31,279 --> 00:16:32,880
need to do it and then you know help

472
00:16:32,880 --> 00:16:34,320
them with the how like how do you

473
00:16:34,320 --> 00:16:36,959
actually fix this and and the more

474
00:16:36,959 --> 00:16:39,199
guidance we can create that's accessible

475
00:16:39,199 --> 00:16:40,720
right the more likely it's going to get

476
00:16:40,720 --> 00:16:43,519
adopted and it's going to get end up in

477
00:16:43,519 --> 00:16:46,639
the production environment

478
00:16:49,680 --> 00:16:51,440
another big thing that you know we need

479
00:16:51,440 --> 00:16:53,440
to focus on as security professionals is

480
00:16:53,440 --> 00:16:55,759
really invest in building security

481
00:16:55,759 --> 00:16:58,160
design patterns reference architectures

482
00:16:58,160 --> 00:17:00,880
um it's really hard to scale

483
00:17:00,880 --> 00:17:03,199
to the size of this problem unless we

484
00:17:03,199 --> 00:17:05,039
have kind of our own catalog of best

485
00:17:05,039 --> 00:17:06,959
practices that we can go back to and

486
00:17:06,959 --> 00:17:08,880
provide to those developers

487
00:17:08,880 --> 00:17:10,880
um you know i see organizations that

488
00:17:10,880 --> 00:17:12,799
have kind of built these centralized you

489
00:17:12,799 --> 00:17:13,919
know

490
00:17:13,919 --> 00:17:15,679
multifunctional teams that involve the

491
00:17:15,679 --> 00:17:17,520
developers involved the devops teams

492
00:17:17,520 --> 00:17:19,119
involve the architects and the security

493
00:17:19,119 --> 00:17:20,240
architects

494
00:17:20,240 --> 00:17:21,919
and other security professionals to

495
00:17:21,919 --> 00:17:23,439
really help build out

496
00:17:23,439 --> 00:17:24,640
design patterns and they're building

497
00:17:24,640 --> 00:17:27,359
these patterns as terraform code so that

498
00:17:27,359 --> 00:17:29,600
it's more accessible to the developer

499
00:17:29,600 --> 00:17:31,120
that's actually writing that terraform

500
00:17:31,120 --> 00:17:33,919
code so that sre that devops person you

501
00:17:33,919 --> 00:17:35,760
know can rely on these templates and

502
00:17:35,760 --> 00:17:37,919
actually build off of these templates

503
00:17:37,919 --> 00:17:39,840
and so you know

504
00:17:39,840 --> 00:17:41,280
investing and really building the right

505
00:17:41,280 --> 00:17:42,720
design patterns for your organization

506
00:17:42,720 --> 00:17:45,679
for your application use cases is is

507
00:17:45,679 --> 00:17:47,280
really critical

508
00:17:47,280 --> 00:17:48,480
and the way to make it developer

509
00:17:48,480 --> 00:17:51,919
friendly is right to present them as

510
00:17:51,919 --> 00:17:53,360
terraform code

511
00:17:53,360 --> 00:17:55,280
um

512
00:17:55,280 --> 00:17:56,720
and once you build these patterns you

513
00:17:56,720 --> 00:17:58,480
can then bake in your compliance needs

514
00:17:58,480 --> 00:18:00,400
you can you can really look at coverage

515
00:18:00,400 --> 00:18:01,600
like what are the applica key

516
00:18:01,600 --> 00:18:03,120
application use cases that i need to

517
00:18:03,120 --> 00:18:05,280
cover where this fails and where this

518
00:18:05,280 --> 00:18:07,600
becomes really challenging is it's a

519
00:18:07,600 --> 00:18:10,320
heavy investment to start with if you

520
00:18:10,320 --> 00:18:11,840
don't already have a security design

521
00:18:11,840 --> 00:18:13,600
practice in your organization

522
00:18:13,600 --> 00:18:15,840
then kind of starting as security design

523
00:18:15,840 --> 00:18:17,679
practice from scratch is a is a pretty

524
00:18:17,679 --> 00:18:19,679
big investment it's resource intensive

525
00:18:19,679 --> 00:18:22,559
it's skill set intensive but

526
00:18:22,559 --> 00:18:23,520
if you

527
00:18:23,520 --> 00:18:26,080
if you have the resources to do this

528
00:18:26,080 --> 00:18:28,559
then you know it makes sense to really

529
00:18:28,559 --> 00:18:30,880
prioritize the use cases that are most

530
00:18:30,880 --> 00:18:31,840
common

531
00:18:31,840 --> 00:18:35,200
and handle the more

532
00:18:35,200 --> 00:18:36,720
the less common use cases more on a

533
00:18:36,720 --> 00:18:39,200
case-by-case basis because the challenge

534
00:18:39,200 --> 00:18:39,919
with

535
00:18:39,919 --> 00:18:41,520
with this approach is it's really hard

536
00:18:41,520 --> 00:18:43,280
to build one size fits all solutions for

537
00:18:43,280 --> 00:18:45,520
every application use case if you try to

538
00:18:45,520 --> 00:18:47,440
do that right you're gonna

539
00:18:47,440 --> 00:18:48,320
create

540
00:18:48,320 --> 00:18:49,919
go back to creating friction with those

541
00:18:49,919 --> 00:18:51,200
development teams because you're not

542
00:18:51,200 --> 00:18:52,320
gonna

543
00:18:52,320 --> 00:18:53,760
you're not going to be building things

544
00:18:53,760 --> 00:18:56,480
that are applicable to them

545
00:18:56,480 --> 00:18:57,679
and

546
00:18:57,679 --> 00:19:00,240
in your organization right it's to

547
00:19:00,240 --> 00:19:02,240
succeed at this the one thing i've seen

548
00:19:02,240 --> 00:19:04,960
right where organizations really do this

549
00:19:04,960 --> 00:19:05,760
well

550
00:19:05,760 --> 00:19:06,559
is

551
00:19:06,559 --> 00:19:08,320
where they have good partnerships with

552
00:19:08,320 --> 00:19:10,480
their development in architecture teams

553
00:19:10,480 --> 00:19:11,919
so that they can kind of work together

554
00:19:11,919 --> 00:19:13,440
and collaborate effectively to build

555
00:19:13,440 --> 00:19:15,679
this

556
00:19:17,520 --> 00:19:20,320
and then i talked about automation right

557
00:19:20,320 --> 00:19:24,080
that really this is is absolutely

558
00:19:24,080 --> 00:19:26,080
critical to keep up with this trend and

559
00:19:26,080 --> 00:19:28,080
if you know if you're not seeing this

560
00:19:28,080 --> 00:19:29,679
trend like you will start seeing it in

561
00:19:29,679 --> 00:19:31,760
your organization as development teams

562
00:19:31,760 --> 00:19:34,160
embrace these technologies and security

563
00:19:34,160 --> 00:19:36,880
has to respond by embracing automation

564
00:19:36,880 --> 00:19:38,720
right

565
00:19:38,720 --> 00:19:40,960
leverage automation to

566
00:19:40,960 --> 00:19:42,880
you know fit right into those

567
00:19:42,880 --> 00:19:44,640
development workflows so that you get

568
00:19:44,640 --> 00:19:46,240
visibility into every change that's

569
00:19:46,240 --> 00:19:49,280
happening every time a change is made to

570
00:19:49,280 --> 00:19:51,200
that terraform that is a change to the

571
00:19:51,200 --> 00:19:53,039
application architecture that should be

572
00:19:53,039 --> 00:19:55,120
assessed from a security standpoint and

573
00:19:55,120 --> 00:19:56,640
so the more automation you have to get

574
00:19:56,640 --> 00:19:58,480
that visibility so that you know when

575
00:19:58,480 --> 00:20:00,320
you need to kind of get engaged and and

576
00:20:00,320 --> 00:20:01,760
look at a particular application

577
00:20:01,760 --> 00:20:02,880
architecture

578
00:20:02,880 --> 00:20:05,760
um you know that's that's going to be

579
00:20:05,760 --> 00:20:08,159
incredibly important and i don't know of

580
00:20:08,159 --> 00:20:09,919
a single security team

581
00:20:09,919 --> 00:20:12,080
including mine that

582
00:20:12,080 --> 00:20:14,080
isn't resource constrained and so

583
00:20:14,080 --> 00:20:16,159
automation is really the only way to

584
00:20:16,159 --> 00:20:17,280
scale

585
00:20:17,280 --> 00:20:19,360
um resource constrained security teams

586
00:20:19,360 --> 00:20:22,159
and and you know get the most out of

587
00:20:22,159 --> 00:20:26,400
the the resources that are on your team

588
00:20:27,520 --> 00:20:30,840
any questions

589
00:20:36,720 --> 00:20:40,480
so a key part of adopting automation is

590
00:20:40,480 --> 00:20:42,799
you know i talked about

591
00:20:42,799 --> 00:20:44,640
you know democratizing security it's

592
00:20:44,640 --> 00:20:45,679
really

593
00:20:45,679 --> 00:20:47,280
you want to make security easy for

594
00:20:47,280 --> 00:20:48,880
developers and and the best way to do

595
00:20:48,880 --> 00:20:50,960
this is fit into their workflows

596
00:20:50,960 --> 00:20:51,919
right

597
00:20:51,919 --> 00:20:53,919
security needs to be at the table as

598
00:20:53,919 --> 00:20:55,919
changes are made to code

599
00:20:55,919 --> 00:20:58,400
modern security practices need to be

600
00:20:58,400 --> 00:21:00,159
fully integrated into that software

601
00:21:00,159 --> 00:21:02,559
development life cycle so that as

602
00:21:02,559 --> 00:21:03,520
as

603
00:21:03,520 --> 00:21:05,440
you know as early as the design of that

604
00:21:05,440 --> 00:21:07,280
application right when the concept is

605
00:21:07,280 --> 00:21:08,640
being talked about

606
00:21:08,640 --> 00:21:10,000
uh you know chris talked about this

607
00:21:10,000 --> 00:21:11,440
right like you want to be at the table

608
00:21:11,440 --> 00:21:12,640
you want to be threat modeling that

609
00:21:12,640 --> 00:21:14,080
concept you want to be thinking about

610
00:21:14,080 --> 00:21:17,120
security for that concept but then

611
00:21:17,120 --> 00:21:20,240
as that shifts towards code and

612
00:21:20,240 --> 00:21:22,320
fun you we all know that you know the

613
00:21:22,320 --> 00:21:25,360
design continues to change and and the

614
00:21:25,360 --> 00:21:26,880
most accurate representation of that

615
00:21:26,880 --> 00:21:28,480
design is going to be that terraform

616
00:21:28,480 --> 00:21:30,400
code or that cloud formation code

617
00:21:30,400 --> 00:21:32,159
and so being plugged in there so that

618
00:21:32,159 --> 00:21:34,480
you have the ability to really impact

619
00:21:34,480 --> 00:21:37,039
the design as it's being developed is is

620
00:21:37,039 --> 00:21:38,240
really important

621
00:21:38,240 --> 00:21:40,320
and then managing drift so it's it's

622
00:21:40,320 --> 00:21:41,440
good that you know you were able to

623
00:21:41,440 --> 00:21:43,600
engage early you were able to provide

624
00:21:43,600 --> 00:21:46,240
good security guidance

625
00:21:46,240 --> 00:21:47,760
but how do you make sure that what got

626
00:21:47,760 --> 00:21:50,000
deployed remains secure and compliant by

627
00:21:50,000 --> 00:21:52,880
design and how do you manage drift

628
00:21:52,880 --> 00:21:55,200
so that you know someone then go in

629
00:21:55,200 --> 00:21:56,960
through the cloud console and make a

630
00:21:56,960 --> 00:21:58,480
change to that application architecture

631
00:21:58,480 --> 00:22:00,240
that exposed

632
00:22:00,240 --> 00:22:01,919
your s3 bucket as an example the most

633
00:22:01,919 --> 00:22:03,360
kind of common use case that everyone

634
00:22:03,360 --> 00:22:05,919
talks about um how do you get visibility

635
00:22:05,919 --> 00:22:07,600
into that and how do you make sure that

636
00:22:07,600 --> 00:22:09,039
you know

637
00:22:09,039 --> 00:22:10,799
that infrastructure as code really

638
00:22:10,799 --> 00:22:12,559
remains the source of truth for what

639
00:22:12,559 --> 00:22:14,640
that deployed application architecture

640
00:22:14,640 --> 00:22:17,039
is yes

641
00:22:17,039 --> 00:22:19,679
and you know the interesting opportunity

642
00:22:19,679 --> 00:22:22,000
that infrastructure is code provides for

643
00:22:22,000 --> 00:22:23,520
a security professional is that it lets

644
00:22:23,520 --> 00:22:25,600
us automate the how

645
00:22:25,600 --> 00:22:28,159
so maybe just going on a quick quick

646
00:22:28,159 --> 00:22:30,159
tangent right like if you look at that

647
00:22:30,159 --> 00:22:31,679
terraform code

648
00:22:31,679 --> 00:22:33,600
it tells you what are all the components

649
00:22:33,600 --> 00:22:35,520
in this application architecture how do

650
00:22:35,520 --> 00:22:37,120
those components interact and as a

651
00:22:37,120 --> 00:22:38,720
security professional

652
00:22:38,720 --> 00:22:40,640
what is the access control policy that's

653
00:22:40,640 --> 00:22:42,080
governing the interaction between these

654
00:22:42,080 --> 00:22:43,280
two components what's the network

655
00:22:43,280 --> 00:22:44,960
security policy how is data being

656
00:22:44,960 --> 00:22:47,600
protected at rest in transit

657
00:22:47,600 --> 00:22:49,200
um

658
00:22:49,200 --> 00:22:50,640
you know what are the cores rules

659
00:22:50,640 --> 00:22:52,240
defined on this load balancer as an

660
00:22:52,240 --> 00:22:54,400
example like all of this is entirely

661
00:22:54,400 --> 00:22:55,679
codified

662
00:22:55,679 --> 00:22:56,400
in

663
00:22:56,400 --> 00:22:58,559
in terraform so if we as security

664
00:22:58,559 --> 00:22:59,760
professionals right become more

665
00:22:59,760 --> 00:23:01,679
proficient with these languages we can

666
00:23:01,679 --> 00:23:03,679
help automate the how because now what

667
00:23:03,679 --> 00:23:05,679
we can do is actually provide very

668
00:23:05,679 --> 00:23:08,960
specific direct guidance in these

669
00:23:08,960 --> 00:23:11,520
codified ways so that you can impact

670
00:23:11,520 --> 00:23:12,799
that application architecture and

671
00:23:12,799 --> 00:23:14,799
fundamentally transform it to be more

672
00:23:14,799 --> 00:23:17,679
secure and compliant

673
00:23:20,000 --> 00:23:22,080
and then finally right it's it's

674
00:23:22,080 --> 00:23:23,840
absolutely critical to create good

675
00:23:23,840 --> 00:23:25,280
feedback loops

676
00:23:25,280 --> 00:23:26,960
so that you have

677
00:23:26,960 --> 00:23:28,559
you know you have good post deployment

678
00:23:28,559 --> 00:23:32,000
monitoring in place you are you are

679
00:23:32,000 --> 00:23:33,840
looking at

680
00:23:33,840 --> 00:23:36,640
you know changes that are being made

681
00:23:36,640 --> 00:23:39,840
potential risks that may be introduced

682
00:23:39,840 --> 00:23:41,919
and then you know continuous pen testing

683
00:23:41,919 --> 00:23:44,080
continuous risk assessments and really

684
00:23:44,080 --> 00:23:45,600
getting feedback from these developers

685
00:23:45,600 --> 00:23:46,880
so that we continue to improve the

686
00:23:46,880 --> 00:23:49,840
guidance we continue to provide more

687
00:23:49,840 --> 00:23:52,240
going back to you know accessible

688
00:23:52,240 --> 00:23:55,840
applicable and actionable guidance

689
00:23:58,480 --> 00:24:00,400
so

690
00:24:00,400 --> 00:24:04,480
i'm going to do a quick demo but um i'd

691
00:24:04,480 --> 00:24:07,279
love to open it up to questions

692
00:24:07,279 --> 00:24:10,279
thoughts

693
00:24:11,919 --> 00:24:16,120
i mean where do you have any ideas

694
00:24:16,770 --> 00:24:19,910
[Music]

695
00:24:23,440 --> 00:24:25,360
yeah

696
00:24:25,360 --> 00:24:28,080
yeah so so some

697
00:24:28,080 --> 00:24:29,919
you know the one good thing is right

698
00:24:29,919 --> 00:24:30,840
we've

699
00:24:30,840 --> 00:24:33,200
we we kind of know how to solve the

700
00:24:33,200 --> 00:24:34,799
problem from an application code

701
00:24:34,799 --> 00:24:36,559
standpoint right and we want to apply

702
00:24:36,559 --> 00:24:38,559
the same best practices here

703
00:24:38,559 --> 00:24:39,440
where

704
00:24:39,440 --> 00:24:41,279
any code changes should require

705
00:24:41,279 --> 00:24:44,159
two-person reviews for example right

706
00:24:44,159 --> 00:24:46,480
so all of those best practices i

707
00:24:46,480 --> 00:24:48,320
absolutely apply here i think drift

708
00:24:48,320 --> 00:24:50,159
management is a little bit

709
00:24:50,159 --> 00:24:51,919
more challenging with infrastructures

710
00:24:51,919 --> 00:24:53,600
code because you have so many different

711
00:24:53,600 --> 00:24:55,360
channels to actually impact that

712
00:24:55,360 --> 00:24:57,120
application architecture

713
00:24:57,120 --> 00:24:58,240
and

714
00:24:58,240 --> 00:25:00,480
the the simplest approach and the most

715
00:25:00,480 --> 00:25:02,559
effective approach is actually to not

716
00:25:02,559 --> 00:25:04,400
allow any other channels right you can

717
00:25:04,400 --> 00:25:07,039
configure your cloud to not allow

718
00:25:07,039 --> 00:25:08,559
changes over

719
00:25:08,559 --> 00:25:11,360
the cloud console not allow changes over

720
00:25:11,360 --> 00:25:14,240
the cli and only allow changes through

721
00:25:14,240 --> 00:25:16,559
the pipeline and the pipeline then

722
00:25:16,559 --> 00:25:18,080
becomes kind of the place where you

723
00:25:18,080 --> 00:25:20,000
invest all of your governance and audit

724
00:25:20,000 --> 00:25:22,240
capabilities into now you see all the

725
00:25:22,240 --> 00:25:23,440
changes that are happening that is the

726
00:25:23,440 --> 00:25:25,600
most effective approach doesn't always

727
00:25:25,600 --> 00:25:28,799
work because you know we as security

728
00:25:28,799 --> 00:25:30,000
professionals

729
00:25:30,000 --> 00:25:32,880
aren't often in the loop and don't quite

730
00:25:32,880 --> 00:25:34,480
understand all of the different channels

731
00:25:34,480 --> 00:25:36,240
and avenues that are open

732
00:25:36,240 --> 00:25:38,240
and if we are not able to you know

733
00:25:38,240 --> 00:25:40,480
configure the cloud in in the right ways

734
00:25:40,480 --> 00:25:42,159
and and developers need this access

735
00:25:42,159 --> 00:25:43,200
because

736
00:25:43,200 --> 00:25:45,200
let's say um you know there is an

737
00:25:45,200 --> 00:25:47,520
incident of some sort like uh an

738
00:25:47,520 --> 00:25:49,840
availability incident system went down

739
00:25:49,840 --> 00:25:52,159
and they need to fix things

740
00:25:52,159 --> 00:25:53,600
they might not want to go through the

741
00:25:53,600 --> 00:25:55,120
pipeline they might want to just go

742
00:25:55,120 --> 00:25:56,960
straight to that resource and

743
00:25:56,960 --> 00:25:58,960
you know restart whatever it is that

744
00:25:58,960 --> 00:26:01,039
they want to do and so they need certain

745
00:26:01,039 --> 00:26:02,720
types of access so

746
00:26:02,720 --> 00:26:04,400
there are challenges right if you lock

747
00:26:04,400 --> 00:26:06,159
down the cloud access then you have to

748
00:26:06,159 --> 00:26:08,000
invest in you know kind of break glass

749
00:26:08,000 --> 00:26:10,000
accounts and and being able to give

750
00:26:10,000 --> 00:26:12,960
those developers access so if you have

751
00:26:12,960 --> 00:26:13,840
um

752
00:26:13,840 --> 00:26:16,000
good identity lifecycle management tools

753
00:26:16,000 --> 00:26:18,640
then this is a really viable approach

754
00:26:18,640 --> 00:26:20,640
because then you can you know you can

755
00:26:20,640 --> 00:26:22,720
give them just in time access when there

756
00:26:22,720 --> 00:26:25,200
is an incident um but if you don't have

757
00:26:25,200 --> 00:26:26,640
those tools you're going to leave that

758
00:26:26,640 --> 00:26:28,080
open and then i'll talk about how

759
00:26:28,080 --> 00:26:30,480
automation can help that right because

760
00:26:30,480 --> 00:26:32,159
if you have automation that plugs into

761
00:26:32,159 --> 00:26:34,799
your pipeline as well as is monitoring

762
00:26:34,799 --> 00:26:37,440
your cloud then it can measure drift

763
00:26:37,440 --> 00:26:38,559
right

764
00:26:38,559 --> 00:26:40,240
and that's that's kind of that's kind of

765
00:26:40,240 --> 00:26:42,559
the problem that um you know we try to

766
00:26:42,559 --> 00:26:45,919
solve right is can we actually

767
00:26:45,919 --> 00:26:47,679
show you that what is deployed is

768
00:26:47,679 --> 00:26:49,679
actually what that code says and if

769
00:26:49,679 --> 00:26:52,400
there's any drift between you know

770
00:26:52,400 --> 00:26:55,279
alert the security team right and create

771
00:26:55,279 --> 00:26:57,520
um create changes through the pipeline

772
00:26:57,520 --> 00:26:58,880
so that

773
00:26:58,880 --> 00:27:00,400
that drift gets remediated right back

774
00:27:00,400 --> 00:27:02,240
through the pipeline and once again your

775
00:27:02,240 --> 00:27:04,080
audit and governance tools are then

776
00:27:04,080 --> 00:27:05,840
tracking those changes they have

777
00:27:05,840 --> 00:27:07,840
visibility into those changes

778
00:27:07,840 --> 00:27:09,440
and

779
00:27:09,440 --> 00:27:10,720
can give you that

780
00:27:10,720 --> 00:27:12,240
um

781
00:27:12,240 --> 00:27:13,440
give you that

782
00:27:13,440 --> 00:27:15,600
you know instant visibility as as

783
00:27:15,600 --> 00:27:19,320
changes are being made

784
00:27:23,600 --> 00:27:25,200
all right

785
00:27:25,200 --> 00:27:28,320
jump to a quick demo

786
00:27:28,960 --> 00:27:30,080
i

787
00:27:30,080 --> 00:27:32,799
did pray to the demo gods

788
00:27:32,799 --> 00:27:35,679
but um

789
00:27:35,679 --> 00:27:37,919
let's

790
00:27:38,720 --> 00:27:41,120
i was mucking around with my demo all

791
00:27:41,120 --> 00:27:42,720
the way until the last minute because i

792
00:27:42,720 --> 00:27:45,200
wanted to

793
00:27:45,440 --> 00:27:47,840
that's not gonna

794
00:27:47,840 --> 00:27:50,559
all right i'll do my best

795
00:27:50,559 --> 00:27:52,159
all right so i have an empty git repo

796
00:27:52,159 --> 00:27:54,799
right now um

797
00:27:54,799 --> 00:27:57,279
with the exception of

798
00:27:57,279 --> 00:27:59,279
some

799
00:27:59,279 --> 00:28:01,520
hidden files from my visual studio code

800
00:28:01,520 --> 00:28:03,600
um what i'm going to do i'll just kind

801
00:28:03,600 --> 00:28:05,600
of show you what i've done here

802
00:28:05,600 --> 00:28:07,279
so um

803
00:28:07,279 --> 00:28:08,960
there's a there's a lot of tools right

804
00:28:08,960 --> 00:28:11,760
that integrate into pipelines um i'm

805
00:28:11,760 --> 00:28:13,600
just going to show ours but um you know

806
00:28:13,600 --> 00:28:14,320
like

807
00:28:14,320 --> 00:28:16,799
there's if you guys look at

808
00:28:16,799 --> 00:28:19,120
um

809
00:28:19,840 --> 00:28:22,880
bridge crew or chekov um there's tara

810
00:28:22,880 --> 00:28:24,480
scan terra grunt there's a number of

811
00:28:24,480 --> 00:28:25,679
these tools that focus on

812
00:28:25,679 --> 00:28:28,320
misconfiguration checking um

813
00:28:28,320 --> 00:28:29,200
and

814
00:28:29,200 --> 00:28:30,559
then there's kind of tools like ours

815
00:28:30,559 --> 00:28:32,399
that kind of focus on the architecture

816
00:28:32,399 --> 00:28:34,159
but they all you know have this ability

817
00:28:34,159 --> 00:28:35,760
to really integrate into your pipeline

818
00:28:35,760 --> 00:28:37,200
and give you that visibility that i was

819
00:28:37,200 --> 00:28:38,320
talking about

820
00:28:38,320 --> 00:28:39,760
so

821
00:28:39,760 --> 00:28:41,760
i've set up uh

822
00:28:41,760 --> 00:28:43,840
a github action are you guys familiar

823
00:28:43,840 --> 00:28:46,080
with is everyone familiar with github

824
00:28:46,080 --> 00:28:48,320
actions or have you guys heard the term

825
00:28:48,320 --> 00:28:50,640
it's it's github's way of kind of

826
00:28:50,640 --> 00:28:52,399
integrating into the pipeline and it's

827
00:28:52,399 --> 00:28:54,720
an action that gets taken right

828
00:28:54,720 --> 00:28:55,840
based on

829
00:28:55,840 --> 00:28:57,840
uh certain conditions in this case right

830
00:28:57,840 --> 00:29:00,960
this is part of the ci pipeline

831
00:29:00,960 --> 00:29:02,000
and

832
00:29:02,000 --> 00:29:03,279
it's going to

833
00:29:03,279 --> 00:29:05,520
run a job here and i've configured it to

834
00:29:05,520 --> 00:29:07,600
run um

835
00:29:07,600 --> 00:29:09,440
run a job against our platform

836
00:29:09,440 --> 00:29:11,039
essentially

837
00:29:11,039 --> 00:29:13,279
and

838
00:29:13,279 --> 00:29:15,039
the window isn't

839
00:29:15,039 --> 00:29:17,919
complete here but um you know if i

840
00:29:17,919 --> 00:29:19,840
there's an app marketplace where i could

841
00:29:19,840 --> 00:29:20,880
just search for it and it'll

842
00:29:20,880 --> 00:29:22,880
automatically add the job to this

843
00:29:22,880 --> 00:29:24,080
pipeline and then i just have to

844
00:29:24,080 --> 00:29:26,559
configure the secrets so i've done that

845
00:29:26,559 --> 00:29:28,640
already so that's the part that's

846
00:29:28,640 --> 00:29:30,159
pre-baked

847
00:29:30,159 --> 00:29:32,320
not where i want to go

848
00:29:32,320 --> 00:29:35,799
give me a second

849
00:29:48,159 --> 00:29:50,559
is there a reason why that's not

850
00:29:50,559 --> 00:29:52,320
all right we're gonna shift gears and

851
00:29:52,320 --> 00:29:53,600
just

852
00:29:53,600 --> 00:29:56,480
mirror the display

853
00:30:06,080 --> 00:30:07,520
much easier

854
00:30:07,520 --> 00:30:09,840
all right

855
00:30:10,559 --> 00:30:12,720
so

856
00:30:14,320 --> 00:30:15,360
i

857
00:30:15,360 --> 00:30:16,559
added a

858
00:30:16,559 --> 00:30:20,399
terraform example to this project

859
00:30:20,399 --> 00:30:21,520
essentially

860
00:30:21,520 --> 00:30:25,039
all it is is an architecture like this

861
00:30:25,039 --> 00:30:27,760
i simplified it for the purposes of the

862
00:30:27,760 --> 00:30:29,039
diagram but

863
00:30:29,039 --> 00:30:32,399
it's deploying a vpc it's got

864
00:30:32,399 --> 00:30:34,719
great

865
00:30:34,960 --> 00:30:38,399
all right it's got an api gateway in aws

866
00:30:38,399 --> 00:30:40,559
uh it's that triggers a lambda the

867
00:30:40,559 --> 00:30:41,840
lambda then

868
00:30:41,840 --> 00:30:44,159
you know put something in the s3 bucket

869
00:30:44,159 --> 00:30:45,600
um and

870
00:30:45,600 --> 00:30:47,600
the api gateway is configured to log to

871
00:30:47,600 --> 00:30:48,720
the

872
00:30:48,720 --> 00:30:51,120
logging bucket there's a backup of the

873
00:30:51,120 --> 00:30:53,120
s3 bucket and then there's a kms that's

874
00:30:53,120 --> 00:30:55,520
issuing the key for encryption for the

875
00:30:55,520 --> 00:30:57,039
s3 bucket so

876
00:30:57,039 --> 00:30:59,519
straightforward example um

877
00:30:59,519 --> 00:31:01,840
probably you know closer to maybe a

878
00:31:01,840 --> 00:31:03,440
couple thousand lines of code i would

879
00:31:03,440 --> 00:31:04,480
guess

880
00:31:04,480 --> 00:31:07,279
um i didn't do a check but i'm gonna go

881
00:31:07,279 --> 00:31:10,480
ahead and push this

882
00:31:11,039 --> 00:31:12,640
to

883
00:31:12,640 --> 00:31:14,720
this github project and let me go back

884
00:31:14,720 --> 00:31:18,279
to where we were

885
00:31:22,559 --> 00:31:25,519
all right so my merge just happened 11

886
00:31:25,519 --> 00:31:26,880
seconds ago

887
00:31:26,880 --> 00:31:31,200
uh it's cute our platform is cute and um

888
00:31:31,200 --> 00:31:33,200
it's going to run on it but essentially

889
00:31:33,200 --> 00:31:34,880
right like this is the type of

890
00:31:34,880 --> 00:31:36,399
integration that i'm talking about that

891
00:31:36,399 --> 00:31:37,840
kind of fits into that developer

892
00:31:37,840 --> 00:31:39,440
workflow so that as they're making

893
00:31:39,440 --> 00:31:41,919
changes right immediately

894
00:31:41,919 --> 00:31:42,720
you're

895
00:31:42,720 --> 00:31:45,120
you're using automation to scan that

896
00:31:45,120 --> 00:31:46,640
code to understand the application

897
00:31:46,640 --> 00:31:48,799
architecture and then understand

898
00:31:48,799 --> 00:31:52,240
where the potential gaps are

899
00:31:54,799 --> 00:31:57,600
this takes a bit because we are actually

900
00:31:57,600 --> 00:31:59,120
building out a model of that entire

901
00:31:59,120 --> 00:32:00,880
application architecture

902
00:32:00,880 --> 00:32:02,240
and

903
00:32:02,240 --> 00:32:03,120
so

904
00:32:03,120 --> 00:32:07,120
let's just refresh to make sure

905
00:32:13,840 --> 00:32:16,799
all right looks like it's cute

906
00:32:16,799 --> 00:32:18,960
but

907
00:32:19,840 --> 00:32:21,760
the one thing about

908
00:32:21,760 --> 00:32:23,600
github actions is it doesn't give you a

909
00:32:23,600 --> 00:32:25,760
lot of visibility into where

910
00:32:25,760 --> 00:32:26,840
things

911
00:32:26,840 --> 00:32:28,480
are

912
00:32:28,480 --> 00:32:30,799
all right

913
00:32:34,399 --> 00:32:38,360
so it looks like it's running

914
00:32:42,159 --> 00:32:44,640
there it is

915
00:32:44,640 --> 00:32:46,720
so

916
00:32:46,720 --> 00:32:49,519
i ran it checked this project and i'll

917
00:32:49,519 --> 00:32:51,279
go back to the project i should have

918
00:32:51,279 --> 00:32:52,480
spent a little bit of time just

919
00:32:52,480 --> 00:32:55,200
explaining what we did here so

920
00:32:55,200 --> 00:32:58,080
i have an api gateway uh it's just

921
00:32:58,080 --> 00:33:00,399
deploying an api gateway resource

922
00:33:00,399 --> 00:33:02,720
uh with some proxy apis and then

923
00:33:02,720 --> 00:33:05,200
connects it to the lambda

924
00:33:05,200 --> 00:33:06,640
i have

925
00:33:06,640 --> 00:33:09,039
the lambda function that's really not

926
00:33:09,039 --> 00:33:10,399
doing much

927
00:33:10,399 --> 00:33:12,559
but

928
00:33:12,880 --> 00:33:15,760
it's defined to kind of connect to that

929
00:33:15,760 --> 00:33:17,440
s3 bucket

930
00:33:17,440 --> 00:33:20,399
and it has some permissions defined

931
00:33:20,399 --> 00:33:23,120
i have the s3 buckets

932
00:33:23,120 --> 00:33:25,840
and so this is kind of the the main s3

933
00:33:25,840 --> 00:33:27,519
bucket and then there's

934
00:33:27,519 --> 00:33:29,710
you know s3 buckets defined for

935
00:33:29,710 --> 00:33:31,279
[Music]

936
00:33:31,279 --> 00:33:32,080
uh

937
00:33:32,080 --> 00:33:35,519
logging as well as for the backup so

938
00:33:35,519 --> 00:33:36,720
let's see

939
00:33:36,720 --> 00:33:39,279
so like you'll see this is the inventory

940
00:33:39,279 --> 00:33:42,080
bucket um that's yet another bucket that

941
00:33:42,080 --> 00:33:44,559
i didn't have in my diagram

942
00:33:44,559 --> 00:33:45,760
uh

943
00:33:45,760 --> 00:33:48,960
what else is going on here

944
00:33:49,760 --> 00:33:52,399
yeah and then it's subscribed to an sns

945
00:33:52,399 --> 00:33:54,640
topic but there actually isn't an sns

946
00:33:54,640 --> 00:33:55,919
service in here

947
00:33:55,919 --> 00:33:58,159
um

948
00:33:58,159 --> 00:33:59,519
so all right

949
00:33:59,519 --> 00:34:01,039
so let me kind of show you what that

950
00:34:01,039 --> 00:34:02,290
looks like then so

951
00:34:02,290 --> 00:34:04,159
[Music]

952
00:34:04,159 --> 00:34:07,159
projects

953
00:34:23,918 --> 00:34:26,918
okay

954
00:34:34,879 --> 00:34:36,560
all right

955
00:34:36,560 --> 00:34:40,078
oh this isn't showing up right

956
00:34:43,119 --> 00:34:47,399
it doesn't like the tiny display

957
00:34:54,320 --> 00:34:57,760
all right still not showing up right

958
00:34:57,760 --> 00:35:01,640
let's try this again

959
00:35:12,400 --> 00:35:15,680
that's some scaling issue with the ui

960
00:35:15,680 --> 00:35:17,839
but

961
00:35:19,040 --> 00:35:21,440
i wonder if i can change the display

962
00:35:21,440 --> 00:35:24,440
parameters

963
00:35:31,440 --> 00:35:33,280
all right

964
00:35:33,280 --> 00:35:36,400
it's not as readable but

965
00:35:36,400 --> 00:35:38,160
hopefully

966
00:35:38,160 --> 00:35:39,760
the the main point that i wanted to make

967
00:35:39,760 --> 00:35:41,680
here is just that we scan this code

968
00:35:41,680 --> 00:35:44,560
right and like instantly we were able to

969
00:35:44,560 --> 00:35:45,839
identify

970
00:35:45,839 --> 00:35:49,520
issues with it but now if i go back

971
00:35:49,520 --> 00:35:51,440
to

972
00:35:51,440 --> 00:35:53,920
this project

973
00:35:53,920 --> 00:35:56,839
and what i'm going to do is i'm going to

974
00:35:56,839 --> 00:36:01,200
add a resource to this and so

975
00:36:01,200 --> 00:36:03,200
i will

976
00:36:03,200 --> 00:36:05,520
add

977
00:36:11,359 --> 00:36:13,839
all right

978
00:36:14,960 --> 00:36:16,960
this is for the sake of the example i'm

979
00:36:16,960 --> 00:36:18,800
just going to add a kinesis resource so

980
00:36:18,800 --> 00:36:19,839
this is

981
00:36:19,839 --> 00:36:24,279
aws machine learning service

982
00:36:34,160 --> 00:36:35,920
all right

983
00:36:35,920 --> 00:36:39,880
and then let's add

984
00:36:40,800 --> 00:36:42,640
an sqs topic

985
00:36:42,640 --> 00:36:43,920
so this is their

986
00:36:43,920 --> 00:36:46,640
message queue

987
00:36:48,560 --> 00:36:52,599
what's that sms and stuff

988
00:36:56,560 --> 00:36:59,560
and

989
00:37:20,880 --> 00:37:23,839
it's much harder than that

990
00:37:35,280 --> 00:37:37,760
all right so i made a change

991
00:37:37,760 --> 00:37:38,960
and

992
00:37:38,960 --> 00:37:41,200
what should happen is

993
00:37:41,200 --> 00:37:42,400
you know through automation we should be

994
00:37:42,400 --> 00:37:44,400
able to pick up these changes and that's

995
00:37:44,400 --> 00:37:46,079
kind of that first use case that we were

996
00:37:46,079 --> 00:37:47,280
talking about

997
00:37:47,280 --> 00:37:48,839
and i'll shift

998
00:37:48,839 --> 00:37:50,960
over so

999
00:37:50,960 --> 00:37:54,640
let's go back to the actions

1000
00:37:55,200 --> 00:37:57,520
it's running another job and

1001
00:37:57,520 --> 00:37:58,960
you know this is

1002
00:37:58,960 --> 00:38:00,240
this is just

1003
00:38:00,240 --> 00:38:02,880
an example of how

1004
00:38:02,880 --> 00:38:04,720
quickly changes

1005
00:38:04,720 --> 00:38:06,560
can happen to that terraform and i'll go

1006
00:38:06,560 --> 00:38:07,839
back to the terraform while this is

1007
00:38:07,839 --> 00:38:10,240
running so the job finished but

1008
00:38:10,240 --> 00:38:11,359
um

1009
00:38:11,359 --> 00:38:15,839
you know all i did is i added

1010
00:38:16,160 --> 00:38:18,800
from a stock example a kinesis service

1011
00:38:18,800 --> 00:38:20,160
it's not integrated to anything it's not

1012
00:38:20,160 --> 00:38:22,079
connected to anything but if i wanted to

1013
00:38:22,079 --> 00:38:23,520
connect it right i would define the

1014
00:38:23,520 --> 00:38:24,960
right parameters and i could easily

1015
00:38:24,960 --> 00:38:26,480
connect it and

1016
00:38:26,480 --> 00:38:27,760
you know you'll find that most

1017
00:38:27,760 --> 00:38:29,599
developers

1018
00:38:29,599 --> 00:38:31,680
that aren't familiar with terraform the

1019
00:38:31,680 --> 00:38:34,240
first thing they do is they'll either go

1020
00:38:34,240 --> 00:38:38,000
to uh terraforms repo so terraform has

1021
00:38:38,000 --> 00:38:39,359
like modules defined for all these

1022
00:38:39,359 --> 00:38:41,119
things you can just go pick on one of

1023
00:38:41,119 --> 00:38:42,720
these modules or they'll go to github

1024
00:38:42,720 --> 00:38:44,079
say let me just find an example of

1025
00:38:44,079 --> 00:38:45,760
someone who's done implemented this

1026
00:38:45,760 --> 00:38:47,440
machine learning service and they'll add

1027
00:38:47,440 --> 00:38:49,440
it to their project um you know tailor

1028
00:38:49,440 --> 00:38:51,440
it a little bit and and get it working

1029
00:38:51,440 --> 00:38:53,119
and ship it

1030
00:38:53,119 --> 00:38:55,200
and we we kind of routinely scan these

1031
00:38:55,200 --> 00:38:56,800
github repos right like especially the

1032
00:38:56,800 --> 00:38:58,720
public ones and

1033
00:38:58,720 --> 00:39:00,400
most github

1034
00:39:00,400 --> 00:39:02,079
examples or most people that are

1035
00:39:02,079 --> 00:39:03,599
publishing examples right they're trying

1036
00:39:03,599 --> 00:39:05,359
to show the functional capabilities of

1037
00:39:05,359 --> 00:39:08,160
that service they're not interested in

1038
00:39:08,160 --> 00:39:09,599
making sure that it's securely

1039
00:39:09,599 --> 00:39:11,200
integrated into your project they don't

1040
00:39:11,200 --> 00:39:13,040
understand your use case they don't

1041
00:39:13,040 --> 00:39:14,240
understand whether it deals with

1042
00:39:14,240 --> 00:39:16,240
business sensitive data or not and so

1043
00:39:16,240 --> 00:39:17,760
fundamentally as you build off these

1044
00:39:17,760 --> 00:39:20,640
examples and this is kind of what i did

1045
00:39:20,640 --> 00:39:23,680
you're going to find issues and and

1046
00:39:23,680 --> 00:39:26,839
like other platforms ours will as well

1047
00:39:26,839 --> 00:39:28,640
and

1048
00:39:28,640 --> 00:39:31,359
so now if i

1049
00:39:38,240 --> 00:39:41,879
let's search for

1050
00:39:52,800 --> 00:39:54,800
this is

1051
00:39:54,800 --> 00:39:57,040
really hurt running the mouse from here

1052
00:39:57,040 --> 00:40:00,800
and looking at the screen over there

1053
00:40:09,599 --> 00:40:12,720
try this one more time

1054
00:40:20,560 --> 00:40:22,240
all right so

1055
00:40:22,240 --> 00:40:24,079
you know we're identifying the fact that

1056
00:40:24,079 --> 00:40:25,200
this

1057
00:40:25,200 --> 00:40:27,520
kinesis service

1058
00:40:27,520 --> 00:40:29,040
doesn't have uh

1059
00:40:29,040 --> 00:40:30,960
it has a key defined for encryption but

1060
00:40:30,960 --> 00:40:32,400
it doesn't have a good key management

1061
00:40:32,400 --> 00:40:33,920
plan and so like things that are

1062
00:40:33,920 --> 00:40:35,599
associated with the key management plan

1063
00:40:35,599 --> 00:40:37,200
you know inventorying that key making

1064
00:40:37,200 --> 00:40:38,960
sure the key has a name it's tagged

1065
00:40:38,960 --> 00:40:42,400
appropriately uh

1066
00:40:43,119 --> 00:40:44,640
and you know kind of providing that

1067
00:40:44,640 --> 00:40:46,480
developer with

1068
00:40:46,480 --> 00:40:48,880
so this you know this is kind of the

1069
00:40:48,880 --> 00:40:51,680
what right like what is the issue

1070
00:40:51,680 --> 00:40:53,040
why is this an issue right so if you

1071
00:40:53,040 --> 00:40:55,119
don't manage keys properly

1072
00:40:55,119 --> 00:40:57,119
uh

1073
00:40:57,119 --> 00:40:58,480
then

1074
00:40:58,480 --> 00:41:00,079
data and transactions that they protect

1075
00:41:00,079 --> 00:41:02,079
can be at risk giving them a little bit

1076
00:41:02,079 --> 00:41:03,760
of an understanding of why is this an

1077
00:41:03,760 --> 00:41:05,440
issue and the more specific how right

1078
00:41:05,440 --> 00:41:07,359
like what do you need to change so like

1079
00:41:07,359 --> 00:41:09,440
these specific configurations

1080
00:41:09,440 --> 00:41:12,240
right go change these to this value or

1081
00:41:12,240 --> 00:41:13,920
or set these appropriately right giving

1082
00:41:13,920 --> 00:41:15,520
them the actionable guidance that they

1083
00:41:15,520 --> 00:41:18,319
need to actually go quickly fix this

1084
00:41:18,319 --> 00:41:21,359
and and save them time and help them you

1085
00:41:21,359 --> 00:41:22,800
know continue to

1086
00:41:22,800 --> 00:41:25,760
deliver at the velocity that they want

1087
00:41:25,760 --> 00:41:27,839
so that's kind of that one use case

1088
00:41:27,839 --> 00:41:30,079
another use case right is

1089
00:41:30,079 --> 00:41:32,640
we kind of do this in our platform where

1090
00:41:32,640 --> 00:41:35,040
if i were to go select that kinesis

1091
00:41:35,040 --> 00:41:37,440
service

1092
00:41:40,079 --> 00:41:43,200
i'll just take the stream right

1093
00:41:43,200 --> 00:41:44,720
let's say i want to change its business

1094
00:41:44,720 --> 00:41:46,400
context and i want to say you know what

1095
00:41:46,400 --> 00:41:48,240
the business use case has changed now

1096
00:41:48,240 --> 00:41:50,079
it's dealing with business sensitive

1097
00:41:50,079 --> 00:41:51,040
data

1098
00:41:51,040 --> 00:41:53,040
and so we're going to say the data

1099
00:41:53,040 --> 00:41:54,560
sensitivity

1100
00:41:54,560 --> 00:41:58,000
has changed for this application

1101
00:41:58,000 --> 00:41:59,760
what you can do through automation is

1102
00:41:59,760 --> 00:42:01,440
now when your business use case change

1103
00:42:01,440 --> 00:42:02,880
you can change the security requirements

1104
00:42:02,880 --> 00:42:04,480
that you're applying

1105
00:42:04,480 --> 00:42:07,040
to this service and you know maybe data

1106
00:42:07,040 --> 00:42:08,560
at rest encryption wasn't as important

1107
00:42:08,560 --> 00:42:10,160
for you because it wasn't dealing with

1108
00:42:10,160 --> 00:42:12,640
sensitive data and now it is and

1109
00:42:12,640 --> 00:42:14,079
what should happen is we'll flag

1110
00:42:14,079 --> 00:42:16,880
additional gaps and then we will

1111
00:42:16,880 --> 00:42:18,480
you know provide more actionable

1112
00:42:18,480 --> 00:42:20,319
guidance but the big the big thing that

1113
00:42:20,319 --> 00:42:22,800
we can do with these types of approaches

1114
00:42:22,800 --> 00:42:24,000
is

1115
00:42:24,000 --> 00:42:25,680
as you start

1116
00:42:25,680 --> 00:42:27,440
building a proof of value you know

1117
00:42:27,440 --> 00:42:30,240
security can be engaged and and security

1118
00:42:30,240 --> 00:42:32,400
can be designed to be appropriate for

1119
00:42:32,400 --> 00:42:33,839
that proof of value that proof of value

1120
00:42:33,839 --> 00:42:35,280
may be dealing with

1121
00:42:35,280 --> 00:42:37,280
may not be dealing with sensitive data

1122
00:42:37,280 --> 00:42:38,800
it's really only for internal

1123
00:42:38,800 --> 00:42:40,960
consumption and so we can design

1124
00:42:40,960 --> 00:42:43,040
security for that proof of value as that

1125
00:42:43,040 --> 00:42:45,040
proof of value turns into an alpha

1126
00:42:45,040 --> 00:42:47,040
product for example

1127
00:42:47,040 --> 00:42:49,040
and it is dealing with some sensitive

1128
00:42:49,040 --> 00:42:52,480
data right we can appropriately

1129
00:42:52,480 --> 00:42:54,400
evolve the security architecture as the

1130
00:42:54,400 --> 00:42:56,560
application architecture is evolving

1131
00:42:56,560 --> 00:42:58,160
and then when that alpha product then

1132
00:42:58,160 --> 00:43:00,000
goes to beta and now is clearly dealing

1133
00:43:00,000 --> 00:43:01,440
with sensitive data right your

1134
00:43:01,440 --> 00:43:03,680
architecture can evolve alongside of it

1135
00:43:03,680 --> 00:43:05,760
and that's fundamentally what you know

1136
00:43:05,760 --> 00:43:07,200
the opportunity that infrastructure is

1137
00:43:07,200 --> 00:43:08,560
code is presenting us right it's

1138
00:43:08,560 --> 00:43:10,560
presenting us this opportunity to really

1139
00:43:10,560 --> 00:43:13,119
stay in sync with development to to help

1140
00:43:13,119 --> 00:43:14,880
evolve security as the application

1141
00:43:14,880 --> 00:43:17,040
architecture is evolving but

1142
00:43:17,040 --> 00:43:20,480
you know kind of the key aspects of

1143
00:43:20,800 --> 00:43:22,800
the the challenges of

1144
00:43:22,800 --> 00:43:25,200
keeping up with the scale of the problem

1145
00:43:25,200 --> 00:43:26,880
and just the rate of change that's

1146
00:43:26,880 --> 00:43:28,000
happening right

1147
00:43:28,000 --> 00:43:30,400
requires one involving the developers

1148
00:43:30,400 --> 00:43:32,560
and having you know really strong

1149
00:43:32,560 --> 00:43:34,800
partnerships there making sure that the

1150
00:43:34,800 --> 00:43:36,400
development team is appropriately

1151
00:43:36,400 --> 00:43:37,839
trained from a security standpoint so

1152
00:43:37,839 --> 00:43:39,119
that as they're making independent

1153
00:43:39,119 --> 00:43:40,880
decisions around security they're making

1154
00:43:40,880 --> 00:43:42,640
good decisions

1155
00:43:42,640 --> 00:43:44,319
but then also um you know having

1156
00:43:44,319 --> 00:43:45,839
automation so that you have visibility

1157
00:43:45,839 --> 00:43:47,599
you can define these guard rails you can

1158
00:43:47,599 --> 00:43:50,000
make sure that as you know developers

1159
00:43:50,000 --> 00:43:51,440
have the freedom to

1160
00:43:51,440 --> 00:43:53,119
to make the choices that they want in

1161
00:43:53,119 --> 00:43:55,040
the architecture but at the same time

1162
00:43:55,040 --> 00:43:56,560
you know they stay within the guardrails

1163
00:43:56,560 --> 00:43:57,920
that you've defined and as soon as they

1164
00:43:57,920 --> 00:43:59,680
deviate right you have the visibility to

1165
00:43:59,680 --> 00:44:01,440
jump in and then provide additional

1166
00:44:01,440 --> 00:44:03,119
guidance and that's

1167
00:44:03,119 --> 00:44:05,359
you know that's really the

1168
00:44:05,359 --> 00:44:07,359
you know only viable approach that i see

1169
00:44:07,359 --> 00:44:08,160
to

1170
00:44:08,160 --> 00:44:10,960
keeping up with just that the velocity

1171
00:44:10,960 --> 00:44:12,720
and the rate of change that this is

1172
00:44:12,720 --> 00:44:15,118
bringing

1173
00:44:15,359 --> 00:44:18,480
so ah that's all i had i'd love to open

1174
00:44:18,480 --> 00:44:21,880
it up to questions

1175
00:44:27,920 --> 00:44:30,240
i put you all to sleep

1176
00:44:30,240 --> 00:44:31,510
oh

1177
00:44:31,510 --> 00:44:34,639
[Music]

1178
00:44:35,520 --> 00:44:39,839
is yes company provide a tool to scan

1179
00:44:39,839 --> 00:44:41,359
the infrastructure

1180
00:44:41,359 --> 00:44:43,680
for example yeah

1181
00:44:43,680 --> 00:44:46,480
yeah yeah so so so we we we have a

1182
00:44:46,480 --> 00:44:48,319
solution in the space but there are

1183
00:44:48,319 --> 00:44:50,640
other open source tools as well

1184
00:44:50,640 --> 00:44:51,599
um

1185
00:44:51,599 --> 00:44:53,599
and so yeah i mean i'm happy to talk to

1186
00:44:53,599 --> 00:44:55,599
you about our solution but you know i

1187
00:44:55,599 --> 00:44:56,319
think

1188
00:44:56,319 --> 00:44:57,760
the the main point that i was trying to

1189
00:44:57,760 --> 00:44:59,760
make is you know there are tools that

1190
00:44:59,760 --> 00:45:02,400
you can integrate into your pipeline and

1191
00:45:02,400 --> 00:45:04,720
there is automation available to you

1192
00:45:04,720 --> 00:45:05,680
to

1193
00:45:05,680 --> 00:45:08,000
to really get that visibility that you

1194
00:45:08,000 --> 00:45:10,560
sorely need so that as your development

1195
00:45:10,560 --> 00:45:12,079
teams you know really embrace these

1196
00:45:12,079 --> 00:45:13,359
types of technologies you're getting

1197
00:45:13,359 --> 00:45:14,640
visibility into the changes they're

1198
00:45:14,640 --> 00:45:16,960
making

1199
00:45:17,520 --> 00:45:19,839
it's not it's a commercial um

1200
00:45:19,839 --> 00:45:22,400
it it is commercial um but i'm happy to

1201
00:45:22,400 --> 00:45:25,760
talk about it you know uh after yeah

1202
00:45:25,760 --> 00:45:27,040
yeah

1203
00:45:27,040 --> 00:45:28,640
yeah we can

1204
00:45:28,640 --> 00:45:30,960
i'll catch you up after the talk i'm

1205
00:45:30,960 --> 00:45:33,839
happy to talk yeah

1206
00:45:33,920 --> 00:45:35,920
so uh

1207
00:45:35,920 --> 00:45:37,920
we also at our place we have like a lot

1208
00:45:37,920 --> 00:45:40,240
of ansible stuff um

1209
00:45:40,240 --> 00:45:41,920
i i know there's some differences

1210
00:45:41,920 --> 00:45:44,000
between hansel and terraform and some of

1211
00:45:44,000 --> 00:45:45,839
the other ones but um old school like

1212
00:45:45,839 --> 00:45:47,920
does it work with andrew at all is there

1213
00:45:47,920 --> 00:45:49,920
any integration there or is it

1214
00:45:49,920 --> 00:45:51,440
asking the wrong question

1215
00:45:51,440 --> 00:45:53,599
yeah i mean no it's a it's a great

1216
00:45:53,599 --> 00:45:55,200
question um we get this question from

1217
00:45:55,200 --> 00:45:57,200
customers a lot like i mean for for us

1218
00:45:57,200 --> 00:45:58,839
personally right that's on our

1219
00:45:58,839 --> 00:46:01,520
roadmap um i think what

1220
00:46:01,520 --> 00:46:03,200
in ansible

1221
00:46:03,200 --> 00:46:05,599
ansible chef puppet salt right they were

1222
00:46:05,599 --> 00:46:07,280
kind of the first generation of

1223
00:46:07,280 --> 00:46:09,599
infrastructure as code solutions

1224
00:46:09,599 --> 00:46:11,920
but um

1225
00:46:11,920 --> 00:46:14,240
you know what what i think has changed

1226
00:46:14,240 --> 00:46:15,520
and and they're moving in the same

1227
00:46:15,520 --> 00:46:16,800
direction right there they're in the

1228
00:46:16,800 --> 00:46:19,520
space as well um they they all recognize

1229
00:46:19,520 --> 00:46:21,200
as they're like from what i see at least

1230
00:46:21,200 --> 00:46:23,119
right my vantage point they're moving in

1231
00:46:23,119 --> 00:46:25,200
the same direction but fundamentally

1232
00:46:25,200 --> 00:46:28,319
what has changed is compared to you know

1233
00:46:28,319 --> 00:46:31,200
the the the chef recipes and the

1234
00:46:31,200 --> 00:46:33,839
um ansible scripts right what what has

1235
00:46:33,839 --> 00:46:36,079
changed is with terraform plummy for

1236
00:46:36,079 --> 00:46:38,000
example lets you build infrastructure's

1237
00:46:38,000 --> 00:46:40,000
code in the language of your choice

1238
00:46:40,000 --> 00:46:41,280
so you want to write infrastructures

1239
00:46:41,280 --> 00:46:42,800
code in python you can write it in

1240
00:46:42,800 --> 00:46:46,480
python uh typescript great go go for it

1241
00:46:46,480 --> 00:46:47,599
right and so

1242
00:46:47,599 --> 00:46:48,400
it

1243
00:46:48,400 --> 00:46:50,400
what has changed is you can build

1244
00:46:50,400 --> 00:46:52,000
infrastructure as code it's it's less

1245
00:46:52,000 --> 00:46:53,760
scripting and

1246
00:46:53,760 --> 00:46:55,200
more closer to software development

1247
00:46:55,200 --> 00:46:56,960
where you can build these kind of

1248
00:46:56,960 --> 00:46:58,240
modular

1249
00:46:58,240 --> 00:47:00,079
you know architectures

1250
00:47:00,079 --> 00:47:02,160
modular files everything is version

1251
00:47:02,160 --> 00:47:03,920
controlled and there's

1252
00:47:03,920 --> 00:47:06,000
that is where i feel like things have

1253
00:47:06,000 --> 00:47:08,800
really shifted from the days of ansible

1254
00:47:08,800 --> 00:47:12,160
salt puppet in in chef it's just that

1255
00:47:12,160 --> 00:47:15,440
now what you're seeing is um

1256
00:47:15,440 --> 00:47:17,599
all of this is just

1257
00:47:17,599 --> 00:47:20,640
fairly mature code like terraform it has

1258
00:47:20,640 --> 00:47:22,720
you know modules functions you have

1259
00:47:22,720 --> 00:47:25,040
variables you have you know you you can

1260
00:47:25,040 --> 00:47:27,599
build nested oftentimes when you you you

1261
00:47:27,599 --> 00:47:29,760
know when i look at terraform and i can

1262
00:47:29,760 --> 00:47:32,559
tell whether it was an sre or a you know

1263
00:47:32,559 --> 00:47:34,000
infrastructure person that kind of came

1264
00:47:34,000 --> 00:47:36,319
into the industry and became an sre or

1265
00:47:36,319 --> 00:47:38,000
it was a developer that started writing

1266
00:47:38,000 --> 00:47:40,079
terraform because developers will write

1267
00:47:40,079 --> 00:47:42,319
nested functions right

1268
00:47:42,319 --> 00:47:44,160
good coding practices but incredibly

1269
00:47:44,160 --> 00:47:46,559
hard to parse by the way in an automated

1270
00:47:46,559 --> 00:47:48,160
way and like you know there's just

1271
00:47:48,160 --> 00:47:49,520
layers and layers of nesting and then

1272
00:47:49,520 --> 00:47:51,040
you've got to keep traversing function

1273
00:47:51,040 --> 00:47:52,880
calls before you figure out what is what

1274
00:47:52,880 --> 00:47:54,800
is this actually doing right

1275
00:47:54,800 --> 00:47:56,720
and and infrastructure folks right are

1276
00:47:56,720 --> 00:47:57,520
more

1277
00:47:57,520 --> 00:47:59,359
closer to scripting and so you'll just

1278
00:47:59,359 --> 00:48:00,880
see you know exactly what they're trying

1279
00:48:00,880 --> 00:48:03,839
to do right up front so just

1280
00:48:03,839 --> 00:48:07,280
random comment but

1281
00:48:07,280 --> 00:48:10,240
there is a question here

1282
00:48:10,319 --> 00:48:12,000
no

1283
00:48:12,000 --> 00:48:14,160
oh

1284
00:48:14,160 --> 00:48:16,160
awesome

1285
00:48:16,160 --> 00:48:18,640
anything else

1286
00:48:19,040 --> 00:48:23,240
all right well thanks for listening

