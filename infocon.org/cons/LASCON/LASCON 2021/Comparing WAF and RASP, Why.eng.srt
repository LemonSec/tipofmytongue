1
00:00:03,030 --> 00:00:17,920
[Music]

2
00:00:17,920 --> 00:00:19,760
thanks for coming this afternoon or

3
00:00:19,760 --> 00:00:22,240
morning whatever the hell it is uh

4
00:00:22,240 --> 00:00:24,320
it's uh it's my second in-person

5
00:00:24,320 --> 00:00:26,960
conference uh since covet anyone

6
00:00:26,960 --> 00:00:28,480
this your first

7
00:00:28,480 --> 00:00:31,279
multiple yeah uh did besides kc a few

8
00:00:31,279 --> 00:00:32,880
weeks back and i will say it was a

9
00:00:32,880 --> 00:00:34,000
little different

10
00:00:34,000 --> 00:00:35,920
um some of the content was a little old

11
00:00:35,920 --> 00:00:37,680
but that's fine um

12
00:00:37,680 --> 00:00:39,200
it was nice to be back in front of

13
00:00:39,200 --> 00:00:40,320
people so

14
00:00:40,320 --> 00:00:41,680
today i want to talk about comparing

15
00:00:41,680 --> 00:00:45,360
laugh and rasp uh and why we're doing it

16
00:00:45,360 --> 00:00:47,760
with a really big question mark

17
00:00:47,760 --> 00:00:50,640
i'm curious who here is managing laugh

18
00:00:50,640 --> 00:00:53,199
rasp or using them in their orgs

19
00:00:53,199 --> 00:00:56,160
that they know of one okay

20
00:00:56,160 --> 00:00:57,680
raise your hands

21
00:00:57,680 --> 00:00:59,680
what is the wrath we'll get there i

22
00:00:59,680 --> 00:01:00,800
promise

23
00:01:00,800 --> 00:01:04,720
uh so let's let's dig in uh so

24
00:01:04,720 --> 00:01:06,640
that's me uh i'm david linder i'm the

25
00:01:06,640 --> 00:01:09,520
cso at contrast security uh twitter golf

26
00:01:09,520 --> 00:01:11,840
hacker dave um

27
00:01:11,840 --> 00:01:13,200
i try to golf

28
00:01:13,200 --> 00:01:15,040
um really into

29
00:01:15,040 --> 00:01:18,000
iowa hawkeyes fishing things like that

30
00:01:18,000 --> 00:01:20,320
i've been in apsec most of my career

31
00:01:20,320 --> 00:01:23,040
spent most of it in consulting

32
00:01:23,040 --> 00:01:24,799
aspect security back in the day before

33
00:01:24,799 --> 00:01:26,880
they were acquired

34
00:01:26,880 --> 00:01:28,799
and it's been nice to kind of get out of

35
00:01:28,799 --> 00:01:29,920
consulting for a while i'll tell you

36
00:01:29,920 --> 00:01:31,280
that

37
00:01:31,280 --> 00:01:33,840
so not so breaking news

38
00:01:33,840 --> 00:01:35,280
applications are vulnerable and they're

39
00:01:35,280 --> 00:01:36,400
under attack

40
00:01:36,400 --> 00:01:38,720
i think all of us here understand that

41
00:01:38,720 --> 00:01:40,479
they have been for years

42
00:01:40,479 --> 00:01:42,320
um but i think we have to keep hearing

43
00:01:42,320 --> 00:01:46,000
it uh and it's always good to to re-look

44
00:01:46,000 --> 00:01:48,960
at things so before we dig into

45
00:01:48,960 --> 00:01:51,759
uh laugh and rasp and you know how they

46
00:01:51,759 --> 00:01:53,520
each work and you know maybe compare

47
00:01:53,520 --> 00:01:55,360
them a little bit i wanted to break down

48
00:01:55,360 --> 00:01:56,479
the

49
00:01:56,479 --> 00:01:58,560
the story a little bit and and look at

50
00:01:58,560 --> 00:02:01,119
applications and you know and i know

51
00:02:01,119 --> 00:02:02,719
you've probably heard jeff even this

52
00:02:02,719 --> 00:02:04,560
morning in the keynote was talking about

53
00:02:04,560 --> 00:02:06,000
you know the composition of apps and

54
00:02:06,000 --> 00:02:07,520
things like that

55
00:02:07,520 --> 00:02:08,878
but i think it's really important to

56
00:02:08,878 --> 00:02:10,160
understand some of these things so i

57
00:02:10,160 --> 00:02:12,080
want to dig in a little bit um so the

58
00:02:12,080 --> 00:02:14,239
applica the the normal application code

59
00:02:14,239 --> 00:02:17,040
makeup is about 20 of custom code

60
00:02:17,040 --> 00:02:19,440
um six percent active open source

61
00:02:19,440 --> 00:02:21,040
libraries so that's

62
00:02:21,040 --> 00:02:22,959
you know that's very small

63
00:02:22,959 --> 00:02:25,840
49 are inactive open source libraries

64
00:02:25,840 --> 00:02:29,200
and 25 are active libraries uh but

65
00:02:29,200 --> 00:02:30,879
plenty of classes that aren't even

66
00:02:30,879 --> 00:02:32,640
invoked in those libraries so it gets

67
00:02:32,640 --> 00:02:35,599
very complex but forever we've been like

68
00:02:35,599 --> 00:02:38,160
oh hey you have a cve and you're using

69
00:02:38,160 --> 00:02:40,080
this library that's vulnerable most of

70
00:02:40,080 --> 00:02:41,519
the time you're probably not even using

71
00:02:41,519 --> 00:02:43,280
that component

72
00:02:43,280 --> 00:02:44,879
of that library

73
00:02:44,879 --> 00:02:46,640
therefore it's not a risk to you there's

74
00:02:46,640 --> 00:02:48,560
no way to exploit it and get to that

75
00:02:48,560 --> 00:02:51,760
path so if you really look at it

76
00:02:51,760 --> 00:02:53,040
78

77
00:02:53,040 --> 00:02:56,239
of an application is active custom code

78
00:02:56,239 --> 00:02:58,400
so it kind of reverses it's like

79
00:02:58,400 --> 00:03:00,720
totally there's 20 is custom code but

80
00:03:00,720 --> 00:03:03,200
what's actually used is 78

81
00:03:03,200 --> 00:03:06,480
right and 22 of that is active uh open

82
00:03:06,480 --> 00:03:09,040
source code

83
00:03:09,040 --> 00:03:10,560
so

84
00:03:10,560 --> 00:03:13,040
we've tried forever right you look at

85
00:03:13,040 --> 00:03:14,959
this timeline and see all the different

86
00:03:14,959 --> 00:03:16,400
things that

87
00:03:16,400 --> 00:03:19,599
security and apsec has tried

88
00:03:19,599 --> 00:03:21,599
along the way the last 21 years if you

89
00:03:21,599 --> 00:03:23,599
will for the most part there was a few

90
00:03:23,599 --> 00:03:26,239
things before that but really oas top 10

91
00:03:26,239 --> 00:03:28,480
early 2000s really kind of kicked off

92
00:03:28,480 --> 00:03:31,280
the the whole appsec thing right

93
00:03:31,280 --> 00:03:32,720
way back then

94
00:03:32,720 --> 00:03:34,159
you know there were a lot of

95
00:03:34,159 --> 00:03:36,480
vulnerabilities in apps about 26 per app

96
00:03:36,480 --> 00:03:38,799
on average and today in 2021 there's

97
00:03:38,799 --> 00:03:40,720
about 21 based on the latest data we

98
00:03:40,720 --> 00:03:42,239
have

99
00:03:42,239 --> 00:03:44,000
that's not a very big change and the

100
00:03:44,000 --> 00:03:46,080
reality is it probably isn't really a

101
00:03:46,080 --> 00:03:48,879
change i mean that's what uh 20 change

102
00:03:48,879 --> 00:03:52,319
in 21 years uh that's pretty bad uh you

103
00:03:52,319 --> 00:03:53,840
know it's going to take us another 100

104
00:03:53,840 --> 00:03:55,200
years or more

105
00:03:55,200 --> 00:03:57,280
to to dwindle that down even further

106
00:03:57,280 --> 00:03:58,159
right

107
00:03:58,159 --> 00:04:00,000
so we're in this thing that we like to

108
00:04:00,000 --> 00:04:02,400
call a software security crisis

109
00:04:02,400 --> 00:04:04,319
um and i'll explain that here in a

110
00:04:04,319 --> 00:04:05,120
second

111
00:04:05,120 --> 00:04:06,319
and that doesn't need to take into

112
00:04:06,319 --> 00:04:08,080
consideration the number of lines of

113
00:04:08,080 --> 00:04:10,319
code

114
00:04:10,879 --> 00:04:12,400
right yeah i mean if you want to talk

115
00:04:12,400 --> 00:04:14,400
about lines of code and people

116
00:04:14,400 --> 00:04:16,160
uh give me one more slide and i will

117
00:04:16,160 --> 00:04:17,440
definitely get there

118
00:04:17,440 --> 00:04:19,839
um so what we what we have and what

119
00:04:19,839 --> 00:04:21,839
we're seeing and and this goes into your

120
00:04:21,839 --> 00:04:24,080
your comment is

121
00:04:24,080 --> 00:04:25,840
everything is a software company now

122
00:04:25,840 --> 00:04:28,000
everyone is building software everyone

123
00:04:28,000 --> 00:04:29,680
has applications

124
00:04:29,680 --> 00:04:31,040
and they're hiring more and more

125
00:04:31,040 --> 00:04:32,320
engineers and we're writing more and

126
00:04:32,320 --> 00:04:33,680
more code and we're doing it faster and

127
00:04:33,680 --> 00:04:35,360
faster because we got to keep up with

128
00:04:35,360 --> 00:04:37,280
you know competitors and and get things

129
00:04:37,280 --> 00:04:38,800
out there first

130
00:04:38,800 --> 00:04:40,639
and we're writing stuff 10 times faster

131
00:04:40,639 --> 00:04:42,560
than we ever have before the average

132
00:04:42,560 --> 00:04:44,800
developer writes anywhere from 10 to 30

133
00:04:44,800 --> 00:04:47,520
000 brand new lines of code a year and

134
00:04:47,520 --> 00:04:48,880
there's millions and millions of them

135
00:04:48,880 --> 00:04:50,720
you start adding all that up it's like

136
00:04:50,720 --> 00:04:52,400
holy moly how are we going to secure all

137
00:04:52,400 --> 00:04:54,240
this we only have a certain amount of

138
00:04:54,240 --> 00:04:56,479
budget for tools we have

139
00:04:56,479 --> 00:04:59,040
teeny tiny staff

140
00:04:59,040 --> 00:05:01,199
as compared to the number of people

141
00:05:01,199 --> 00:05:03,759
writing the code to help secure it so

142
00:05:03,759 --> 00:05:06,880
we're in this major problem right

143
00:05:06,880 --> 00:05:09,039
we have a problem so

144
00:05:09,039 --> 00:05:11,840
the bsim every year does a study on this

145
00:05:11,840 --> 00:05:13,840
about the number of software security

146
00:05:13,840 --> 00:05:16,960
group people to developers uh the recent

147
00:05:16,960 --> 00:05:18,560
one from last year

148
00:05:18,560 --> 00:05:22,000
is there's one ssg for every 159

149
00:05:22,000 --> 00:05:23,120
developers

150
00:05:23,120 --> 00:05:24,400
so people aren't going to solve our

151
00:05:24,400 --> 00:05:26,479
problem they're just not it's not

152
00:05:26,479 --> 00:05:29,120
possible to solve the problem

153
00:05:29,120 --> 00:05:30,960
so why do we want to talk about laugh

154
00:05:30,960 --> 00:05:32,960
and rasp well because it's part of the

155
00:05:32,960 --> 00:05:34,800
problem that can help solve some of

156
00:05:34,800 --> 00:05:37,840
these issues in our software and the the

157
00:05:37,840 --> 00:05:40,880
insecurities that we're creating in them

158
00:05:40,880 --> 00:05:43,199
so i want to talk about what they are

159
00:05:43,199 --> 00:05:45,360
all right so let's talk about

160
00:05:45,360 --> 00:05:46,720
owaf

161
00:05:46,720 --> 00:05:49,440
or web application firewall

162
00:05:49,440 --> 00:05:51,520
uh web application firewall is something

163
00:05:51,520 --> 00:05:53,600
that kind of came to light

164
00:05:53,600 --> 00:05:55,600
really early in the 2000s it was

165
00:05:55,600 --> 00:05:58,639
2002-ish or something like that when um

166
00:05:58,639 --> 00:06:00,639
you know we started building it but

167
00:06:00,639 --> 00:06:02,560
at that point in time you know it was

168
00:06:02,560 --> 00:06:04,639
kind of my first job out of college

169
00:06:04,639 --> 00:06:06,400
we were starting to get really good at

170
00:06:06,400 --> 00:06:09,600
firewalls and and blocking different tcp

171
00:06:09,600 --> 00:06:12,240
and udp ports and all this stuff but all

172
00:06:12,240 --> 00:06:13,759
sudden we're building all these websites

173
00:06:13,759 --> 00:06:15,600
like telling the firewall network people

174
00:06:15,600 --> 00:06:18,400
hey open port 443 and port 80 it'll be

175
00:06:18,400 --> 00:06:19,360
fine

176
00:06:19,360 --> 00:06:21,199
right so now we have these big gaping

177
00:06:21,199 --> 00:06:23,840
holes that we added to our firewalls

178
00:06:23,840 --> 00:06:25,840
that we were getting really good at and

179
00:06:25,840 --> 00:06:27,440
we're like well what do we do about that

180
00:06:27,440 --> 00:06:28,880
because we can't really see into the

181
00:06:28,880 --> 00:06:31,199
traffic and you know there's there's no

182
00:06:31,199 --> 00:06:33,919
you know state viewing type layer seven

183
00:06:33,919 --> 00:06:36,319
firewalls at this point so we're like oh

184
00:06:36,319 --> 00:06:38,479
well let's build a web application

185
00:06:38,479 --> 00:06:41,199
firewall right so mod security was kind

186
00:06:41,199 --> 00:06:43,680
of boring um to really

187
00:06:43,680 --> 00:06:45,520
try to tackle some of the problems of

188
00:06:45,520 --> 00:06:46,960
appsec

189
00:06:46,960 --> 00:06:48,720
which really lead into

190
00:06:48,720 --> 00:06:50,319
where rasp is and we'll get to that at

191
00:06:50,319 --> 00:06:52,319
some point and what you know what the

192
00:06:52,319 --> 00:06:54,560
waff did is it's able to inspect the

193
00:06:54,560 --> 00:06:57,360
traffic kind of like a stateful type

194
00:06:57,360 --> 00:07:00,840
firewall would uh but at that layer

195
00:07:00,840 --> 00:07:02,720
seven so

196
00:07:02,720 --> 00:07:04,560
like i said what we did is we like hey

197
00:07:04,560 --> 00:07:06,080
we're good at firewalls let's create

198
00:07:06,080 --> 00:07:08,400
another firewall that is different mod

199
00:07:08,400 --> 00:07:10,000
security came along and it's still in

200
00:07:10,000 --> 00:07:11,680
use today i mean the great thing about

201
00:07:11,680 --> 00:07:13,440
that is you know it's it's really

202
00:07:13,440 --> 00:07:16,880
evolved uh you know i think azure um aws

203
00:07:16,880 --> 00:07:19,120
all them use components of that and some

204
00:07:19,120 --> 00:07:21,599
of their firewalls um you know and and

205
00:07:21,599 --> 00:07:24,240
it's really served its purpose

206
00:07:24,240 --> 00:07:26,240
to the point where we all

207
00:07:26,240 --> 00:07:28,800
should understand that it's not perfect

208
00:07:28,800 --> 00:07:30,560
um you know it's good at certain things

209
00:07:30,560 --> 00:07:32,240
but there's lots of other issues that it

210
00:07:32,240 --> 00:07:33,759
may have so let's dig into that a little

211
00:07:33,759 --> 00:07:35,919
bit

212
00:07:35,919 --> 00:07:38,400
so a web application firewall is at the

213
00:07:38,400 --> 00:07:40,560
layer seven so it's the highest layer uh

214
00:07:40,560 --> 00:07:42,880
it's used to stop scanning potential

215
00:07:42,880 --> 00:07:45,039
application layer attacks you know

216
00:07:45,039 --> 00:07:47,360
against our web applications you know

217
00:07:47,360 --> 00:07:49,360
things like sql injection command

218
00:07:49,360 --> 00:07:51,039
injections

219
00:07:51,039 --> 00:07:53,360
xss it's really good at xss it does some

220
00:07:53,360 --> 00:07:56,000
things with like ddos you know and helps

221
00:07:56,000 --> 00:07:58,639
prevent some of those sorts of attacks

222
00:07:58,639 --> 00:08:00,879
from an alerting perspective

223
00:08:00,879 --> 00:08:02,400
it creates a lot of alerts and there's a

224
00:08:02,400 --> 00:08:04,319
lot of things going on probably lots of

225
00:08:04,319 --> 00:08:05,919
false positives because there's no

226
00:08:05,919 --> 00:08:07,440
context

227
00:08:07,440 --> 00:08:10,080
and then tuning is really a big problem

228
00:08:10,080 --> 00:08:12,080
you know this cve comes out or this

229
00:08:12,080 --> 00:08:14,879
vendor releases this new uh bypass for

230
00:08:14,879 --> 00:08:17,520
the firewall or there's this new exploit

231
00:08:17,520 --> 00:08:19,199
and we have to do all this different

232
00:08:19,199 --> 00:08:20,319
tuning

233
00:08:20,319 --> 00:08:22,400
mechanisms to make sure that that waff

234
00:08:22,400 --> 00:08:24,000
is up to date and blocking the latest

235
00:08:24,000 --> 00:08:25,039
and greatest

236
00:08:25,039 --> 00:08:27,280
exploits and attacks

237
00:08:27,280 --> 00:08:29,440
so let's dig in a little bit

238
00:08:29,440 --> 00:08:31,120
how a waff might work

239
00:08:31,120 --> 00:08:33,200
so what i have here is i have an input

240
00:08:33,200 --> 00:08:35,679
field for name you know and so i put

241
00:08:35,679 --> 00:08:40,000
contrast or one equals one dash dash now

242
00:08:40,000 --> 00:08:41,839
those of you that are good at sql know

243
00:08:41,839 --> 00:08:43,039
that this probably would never work

244
00:08:43,039 --> 00:08:44,560
anyway because it's probably a string

245
00:08:44,560 --> 00:08:46,959
context and there's no you know

246
00:08:46,959 --> 00:08:49,120
closing off of the the single quote

247
00:08:49,120 --> 00:08:51,680
um but what this does is the laugh sees

248
00:08:51,680 --> 00:08:54,800
this and what does it do

249
00:08:54,800 --> 00:08:58,800
it blocks it why does it block it

250
00:09:00,240 --> 00:09:03,519
it says oh geez that looks like sequel

251
00:09:03,519 --> 00:09:06,399
i should block that

252
00:09:06,640 --> 00:09:09,519
but what happens if that never ends in

253
00:09:09,519 --> 00:09:10,640
sql

254
00:09:10,640 --> 00:09:12,080
right maybe that's all just staying on

255
00:09:12,080 --> 00:09:14,160
the client side and just populating the

256
00:09:14,160 --> 00:09:15,680
name field in a

257
00:09:15,680 --> 00:09:16,800
you know

258
00:09:16,800 --> 00:09:18,640
a javascript form

259
00:09:18,640 --> 00:09:19,440
um

260
00:09:19,440 --> 00:09:20,959
so it just blindly says oh that looks

261
00:09:20,959 --> 00:09:23,200
like it i run some regex on it i'm going

262
00:09:23,200 --> 00:09:25,680
to block it

263
00:09:25,680 --> 00:09:27,519
so

264
00:09:27,519 --> 00:09:29,600
if if if we go back here and say oh well

265
00:09:29,600 --> 00:09:32,640
maybe it was maybe it was back in

266
00:09:32,640 --> 00:09:34,959
calling sequel right but the waff

267
00:09:34,959 --> 00:09:36,880
doesn't know that and doesn't care

268
00:09:36,880 --> 00:09:39,600
so if if we say oh well the back end sql

269
00:09:39,600 --> 00:09:41,360
and we're like oh well that didn't work

270
00:09:41,360 --> 00:09:43,040
i'm going to try something else

271
00:09:43,040 --> 00:09:44,640
so i'm going to put this in there you

272
00:09:44,640 --> 00:09:47,360
know semicolon cat etsy password what is

273
00:09:47,360 --> 00:09:50,720
what is the laugh going to do with that

274
00:09:50,720 --> 00:09:53,839
it's going to block it why

275
00:09:53,839 --> 00:09:55,519
because it looks like command injection

276
00:09:55,519 --> 00:09:57,600
so now it's blocking two different

277
00:09:57,600 --> 00:09:58,959
vulnerability types two different

278
00:09:58,959 --> 00:10:01,600
exploits on the same field

279
00:10:01,600 --> 00:10:03,440
because it has no context

280
00:10:03,440 --> 00:10:05,600
where you may be okay with them

281
00:10:05,600 --> 00:10:07,440
submitting that i mean no one's probably

282
00:10:07,440 --> 00:10:08,720
called that that's probably not their

283
00:10:08,720 --> 00:10:10,880
name but you know there are plenty of

284
00:10:10,880 --> 00:10:12,800
cases where people with you know you

285
00:10:12,800 --> 00:10:14,560
know o'leary or o'shea or something like

286
00:10:14,560 --> 00:10:16,320
that where it's blocking things where it

287
00:10:16,320 --> 00:10:18,560
shouldn't because it looks like sql

288
00:10:18,560 --> 00:10:20,560
injection or looks like something else

289
00:10:20,560 --> 00:10:22,079
right so that's how a laugh works which

290
00:10:22,079 --> 00:10:24,320
is why we're continuously tuning them

291
00:10:24,320 --> 00:10:25,839
and refining them

292
00:10:25,839 --> 00:10:27,920
to to not have these things happen and

293
00:10:27,920 --> 00:10:30,160
then on the other end conversely bypass

294
00:10:30,160 --> 00:10:31,440
so

295
00:10:31,440 --> 00:10:32,880
what i'm going to do is i'm going to i

296
00:10:32,880 --> 00:10:34,959
have this terrible analogy okay my

297
00:10:34,959 --> 00:10:36,800
analogy is almost as bad as jeff's

298
00:10:36,800 --> 00:10:40,000
artwork this morning just fyi

299
00:10:40,000 --> 00:10:40,720
but

300
00:10:40,720 --> 00:10:42,399
what i'm doing here is is kind of giving

301
00:10:42,399 --> 00:10:44,399
you an idea of how laugh works at a high

302
00:10:44,399 --> 00:10:45,519
level so

303
00:10:45,519 --> 00:10:48,399
this new zoo opens and they have this

304
00:10:48,399 --> 00:10:50,640
awesome monkey pen it has these great

305
00:10:50,640 --> 00:10:52,959
monkeys and they created this fence

306
00:10:52,959 --> 00:10:55,120
and this fence is is smart it's a smart

307
00:10:55,120 --> 00:10:57,519
fence it's only going to allow the

308
00:10:57,519 --> 00:11:00,240
people there to throw certain things to

309
00:11:00,240 --> 00:11:02,399
the monkeys and so right now it's saying

310
00:11:02,399 --> 00:11:04,240
oh i only want bananas to go to the

311
00:11:04,240 --> 00:11:05,200
monkeys

312
00:11:05,200 --> 00:11:06,640
you know as the zookeeper that's all

313
00:11:06,640 --> 00:11:08,399
they should eat you know that's that's

314
00:11:08,399 --> 00:11:09,920
what we know from curious george and

315
00:11:09,920 --> 00:11:11,200
whatever else that they're gonna eat

316
00:11:11,200 --> 00:11:13,440
monkeys or eat bananas

317
00:11:13,440 --> 00:11:16,160
and so that's cool but the monkey's not

318
00:11:16,160 --> 00:11:17,920
really happy he's like gosh i wish i had

319
00:11:17,920 --> 00:11:19,200
a little bit of

320
00:11:19,200 --> 00:11:21,440
different things to choose from so now

321
00:11:21,440 --> 00:11:23,200
we gotta tune it right

322
00:11:23,200 --> 00:11:25,760
um you know so

323
00:11:25,760 --> 00:11:27,519
tuning is interesting but you know

324
00:11:27,519 --> 00:11:29,360
determining the attack and determining

325
00:11:29,360 --> 00:11:32,320
like is this a banana uh or is this an

326
00:11:32,320 --> 00:11:35,360
apple and and is is crazy right and if

327
00:11:35,360 --> 00:11:37,680
you think about this has anyone ever

328
00:11:37,680 --> 00:11:38,800
worked

329
00:11:38,800 --> 00:11:41,440
with laugh regular expressions or laugh

330
00:11:41,440 --> 00:11:44,000
rules

331
00:11:44,000 --> 00:11:45,840
yeah you don't count but you do

332
00:11:45,840 --> 00:11:47,200
[Laughter]

333
00:11:47,200 --> 00:11:47,920
so

334
00:11:47,920 --> 00:11:50,160
uh it's there's a lot there and and

335
00:11:50,160 --> 00:11:52,000
there's always tuning needed and i'll

336
00:11:52,000 --> 00:11:53,680
explain why so

337
00:11:53,680 --> 00:11:54,880
if you look at some of these these are

338
00:11:54,880 --> 00:11:56,560
some regular expressions

339
00:11:56,560 --> 00:11:59,279
that would be typically seen in a waff

340
00:11:59,279 --> 00:12:01,360
where it's looking for certain keywords

341
00:12:01,360 --> 00:12:02,800
or phrases

342
00:12:02,800 --> 00:12:04,480
you know based on the type of attack so

343
00:12:04,480 --> 00:12:06,959
you have the window.open.location

344
00:12:06,959 --> 00:12:09,200
you know typical redirect type attack

345
00:12:09,200 --> 00:12:11,680
you have iframe frame applet script all

346
00:12:11,680 --> 00:12:13,040
those things that may be used in some

347
00:12:13,040 --> 00:12:15,279
sort of cross-site scripting attack and

348
00:12:15,279 --> 00:12:17,519
then the one that's really interesting

349
00:12:17,519 --> 00:12:18,800
to me

350
00:12:18,800 --> 00:12:20,560
is the on events

351
00:12:20,560 --> 00:12:22,160
on events are interesting because

352
00:12:22,160 --> 00:12:24,959
typically they're used to bypass wafts

353
00:12:24,959 --> 00:12:26,639
because there's lots of them you know

354
00:12:26,639 --> 00:12:28,480
the typical ones would be on click on

355
00:12:28,480 --> 00:12:30,399
air on mouse click things like that that

356
00:12:30,399 --> 00:12:32,240
you would typically see when performing

357
00:12:32,240 --> 00:12:34,320
some sort of crosstalk scripting attack

358
00:12:34,320 --> 00:12:36,839
the last time we looked there were about

359
00:12:36,839 --> 00:12:39,519
374 on events and that changes

360
00:12:39,519 --> 00:12:41,680
frequently because browsers support

361
00:12:41,680 --> 00:12:43,680
different ones so now you have to look

362
00:12:43,680 --> 00:12:45,760
at all the browsers and now the wafts

363
00:12:45,760 --> 00:12:48,240
like oh i got to keep updating all this

364
00:12:48,240 --> 00:12:50,480
so you get all this crazy

365
00:12:50,480 --> 00:12:51,680
uh

366
00:12:51,680 --> 00:12:53,760
change that has to come into place all

367
00:12:53,760 --> 00:12:55,519
the time because of how fast these

368
00:12:55,519 --> 00:12:59,200
things are changing at any point in time

369
00:12:59,200 --> 00:13:01,120
so now the monkeys are like gosh i want

370
00:13:01,120 --> 00:13:03,600
more things i don't want just bananas i

371
00:13:03,600 --> 00:13:06,079
want some oranges and apples so we go in

372
00:13:06,079 --> 00:13:09,120
and we gotta tune in and tuning is not

373
00:13:09,120 --> 00:13:11,360
straightforward unless someone else is

374
00:13:11,360 --> 00:13:13,120
doing it for you you know you use the

375
00:13:13,120 --> 00:13:15,839
the aws laugh or the azure waff or

376
00:13:15,839 --> 00:13:17,200
something like that that's kind of

377
00:13:17,200 --> 00:13:19,120
managing some of those things for you

378
00:13:19,120 --> 00:13:20,800
but for those of you that are using mod

379
00:13:20,800 --> 00:13:23,040
security or thinking about it you have

380
00:13:23,040 --> 00:13:24,639
to go into tune so now i got to change

381
00:13:24,639 --> 00:13:27,279
it to say oh well i want to allow apples

382
00:13:27,279 --> 00:13:29,120
and oranges too and how do i do that and

383
00:13:29,120 --> 00:13:31,120
where do i do it and what things do i

384
00:13:31,120 --> 00:13:32,720
need to tweak to make sure that i'm

385
00:13:32,720 --> 00:13:36,240
allowing those and it's it's really ugly

386
00:13:36,240 --> 00:13:38,880
i mean this is one rule

387
00:13:38,880 --> 00:13:40,880
in mod security and this rule is a

388
00:13:40,880 --> 00:13:42,800
command injection attack

389
00:13:42,800 --> 00:13:44,639
through email

390
00:13:44,639 --> 00:13:46,240
so you have to write this and change

391
00:13:46,240 --> 00:13:47,600
severity levels and really understand

392
00:13:47,600 --> 00:13:49,839
what all these different things mean

393
00:13:49,839 --> 00:13:51,199
to make sure

394
00:13:51,199 --> 00:13:52,160
that

395
00:13:52,160 --> 00:13:53,279
you know you're updating it

396
00:13:53,279 --> 00:13:55,040
appropriately because what if you update

397
00:13:55,040 --> 00:13:56,720
it wrong and it's detecting a lot of

398
00:13:56,720 --> 00:13:58,959
extra things

399
00:13:58,959 --> 00:14:00,480
you're going to have a lot of really

400
00:14:00,480 --> 00:14:02,399
upset people using your web apps because

401
00:14:02,399 --> 00:14:03,920
a lot of legitimate traffic is going to

402
00:14:03,920 --> 00:14:05,440
get blocked

403
00:14:05,440 --> 00:14:06,560
right

404
00:14:06,560 --> 00:14:08,480
so it's it's very critical it's a

405
00:14:08,480 --> 00:14:10,399
critical component of the infrastructure

406
00:14:10,399 --> 00:14:13,760
because it can block real traffic

407
00:14:13,760 --> 00:14:16,320
so i made that change but here's the

408
00:14:16,320 --> 00:14:17,160
problem

409
00:14:17,160 --> 00:14:18,639
[Music]

410
00:14:18,639 --> 00:14:20,560
at what point can that rotten apple

411
00:14:20,560 --> 00:14:22,880
still look like an apple

412
00:14:22,880 --> 00:14:24,560
right and now i'm gonna make the monkeys

413
00:14:24,560 --> 00:14:26,800
sick

414
00:14:27,199 --> 00:14:28,880
it's a terrible analogy but it made

415
00:14:28,880 --> 00:14:30,480
sense to me at the time i probably had a

416
00:14:30,480 --> 00:14:33,680
couple whiskies deep that day

417
00:14:34,880 --> 00:14:36,880
but but that's the reality um for those

418
00:14:36,880 --> 00:14:38,000
of you that have been in the industry a

419
00:14:38,000 --> 00:14:40,399
while know that laughs

420
00:14:40,399 --> 00:14:42,320
have lots of bypasses

421
00:14:42,320 --> 00:14:43,760
every day i go to twitter someone's

422
00:14:43,760 --> 00:14:46,399
posting oh new laugh bypass um it's

423
00:14:46,399 --> 00:14:48,560
because it's driven off of regular

424
00:14:48,560 --> 00:14:50,000
expressions and they're never gonna be

425
00:14:50,000 --> 00:14:52,160
perfect

426
00:14:52,160 --> 00:14:54,399
um so common downfalls

427
00:14:54,399 --> 00:14:56,079
you're looking at alert fatigue you know

428
00:14:56,079 --> 00:14:58,639
it's something that you i mean the

429
00:14:58,639 --> 00:15:00,000
amount of traffic and stuff that it's

430
00:15:00,000 --> 00:15:01,519
looking at and blocking at any point in

431
00:15:01,519 --> 00:15:04,480
time is huge patching fatigue over on

432
00:15:04,480 --> 00:15:07,519
the right here um you can see all of the

433
00:15:07,519 --> 00:15:09,360
patches that a customer of ours had

434
00:15:09,360 --> 00:15:12,480
applied to their laugh like in one swoop

435
00:15:12,480 --> 00:15:13,600
they're like oh well we need to add all

436
00:15:13,600 --> 00:15:15,600
these cves and so they got to patch it

437
00:15:15,600 --> 00:15:17,120
and make sure that they're protected

438
00:15:17,120 --> 00:15:18,480
from all these different things because

439
00:15:18,480 --> 00:15:19,920
they know they're using those certain

440
00:15:19,920 --> 00:15:21,199
components

441
00:15:21,199 --> 00:15:22,560
and then you're

442
00:15:22,560 --> 00:15:24,880
the reality is you could be stopping

443
00:15:24,880 --> 00:15:26,480
real traffic

444
00:15:26,480 --> 00:15:28,560
you know early on in the days i would

445
00:15:28,560 --> 00:15:30,320
say it stopped a lot of real traffic and

446
00:15:30,320 --> 00:15:33,279
they've really refined things um over

447
00:15:33,279 --> 00:15:35,839
the years to to fix some of those

448
00:15:35,839 --> 00:15:38,720
some of those issues

449
00:15:38,720 --> 00:15:40,079
and then let's talk about the

450
00:15:40,079 --> 00:15:42,000
interesting bypasses and there's just a

451
00:15:42,000 --> 00:15:43,680
few um

452
00:15:43,680 --> 00:15:45,360
you know there's a lot of ways to do a

453
00:15:45,360 --> 00:15:47,279
lot of things when it comes to coding

454
00:15:47,279 --> 00:15:50,240
and and trying to bypass laughs and you

455
00:15:50,240 --> 00:15:52,160
know command injection is one that's

456
00:15:52,160 --> 00:15:53,600
it's an interesting vulnerability

457
00:15:53,600 --> 00:15:55,279
category and i'll talk about some

458
00:15:55,279 --> 00:15:57,120
statistics around that in a bit but you

459
00:15:57,120 --> 00:15:59,040
can see there that some of those

460
00:15:59,040 --> 00:16:00,240
you know this question marks and the

461
00:16:00,240 --> 00:16:02,320
dollar sign you know uh

462
00:16:02,320 --> 00:16:03,759
looking for the the environment

463
00:16:03,759 --> 00:16:06,160
variables which are don't exist right

464
00:16:06,160 --> 00:16:08,160
but those things bypass wafts because

465
00:16:08,160 --> 00:16:09,440
what a waff is you know you're looking

466
00:16:09,440 --> 00:16:11,120
at that cat etsy password at the very

467
00:16:11,120 --> 00:16:13,920
top it's looking for cat

468
00:16:13,920 --> 00:16:17,839
or etsy password it's not looking for et

469
00:16:17,839 --> 00:16:20,000
some function commands

470
00:16:20,000 --> 00:16:21,839
that ends up being nothing so there's

471
00:16:21,839 --> 00:16:24,240
nothing there it's just blank uh that

472
00:16:24,240 --> 00:16:26,079
turns into etsy password right and then

473
00:16:26,079 --> 00:16:28,320
the next one too where it's just it's

474
00:16:28,320 --> 00:16:30,079
looking for that single character

475
00:16:30,079 --> 00:16:33,120
replace um that turns out to be bin cat

476
00:16:33,120 --> 00:16:34,560
etsy password

477
00:16:34,560 --> 00:16:36,720
that's bypassing wafts right same thing

478
00:16:36,720 --> 00:16:38,720
with xss you know this really gets to

479
00:16:38,720 --> 00:16:40,959
the the on events and making sure that

480
00:16:40,959 --> 00:16:42,480
i've blocked all of them or gotten them

481
00:16:42,480 --> 00:16:44,480
and i got to reevaluate every browser

482
00:16:44,480 --> 00:16:46,160
updated i swear it seems like they have

483
00:16:46,160 --> 00:16:47,680
a different one that that browser might

484
00:16:47,680 --> 00:16:48,880
support

485
00:16:48,880 --> 00:16:50,480
and sql injection i think i've learned

486
00:16:50,480 --> 00:16:52,800
the most about

487
00:16:52,800 --> 00:16:55,199
as far as bypasses but that first one is

488
00:16:55,199 --> 00:16:57,600
very interesting

489
00:16:57,600 --> 00:17:00,959
anyone hear a sequel guru

490
00:17:01,680 --> 00:17:02,959
no one

491
00:17:02,959 --> 00:17:04,400
someone can tell me what what is that

492
00:17:04,400 --> 00:17:07,119
first one that slash star star slash

493
00:17:07,119 --> 00:17:09,678
what is that

494
00:17:10,160 --> 00:17:12,799
it's a comment

495
00:17:12,880 --> 00:17:14,559
yeah it's a comment but there's so

496
00:17:14,559 --> 00:17:15,919
there's nothing in there it actually

497
00:17:15,919 --> 00:17:18,720
results in a white space so just a blank

498
00:17:18,720 --> 00:17:21,039
space which is what you want there one

499
00:17:21,039 --> 00:17:22,559
and sleep five

500
00:17:22,559 --> 00:17:25,039
but a waff isn't going to see that

501
00:17:25,039 --> 00:17:26,720
because it may be looking for that white

502
00:17:26,720 --> 00:17:28,960
space so there's just all these little

503
00:17:28,960 --> 00:17:31,360
tiny things man we

504
00:17:31,360 --> 00:17:32,880
we did some pretty awesome things at a

505
00:17:32,880 --> 00:17:34,400
bug bounty and got some awesome

506
00:17:34,400 --> 00:17:36,160
submissions like this we're like wow we

507
00:17:36,160 --> 00:17:38,240
never knew those things existed

508
00:17:38,240 --> 00:17:39,520
or the second one you know where you're

509
00:17:39,520 --> 00:17:42,240
looking at uh entering a null by which a

510
00:17:42,240 --> 00:17:44,000
lot of times will screw up any sort of

511
00:17:44,000 --> 00:17:45,600
string parser

512
00:17:45,600 --> 00:17:47,840
and confuse it

513
00:17:47,840 --> 00:17:49,440
and those just a few but let's talk

514
00:17:49,440 --> 00:17:51,840
about one that just recently happened

515
00:17:51,840 --> 00:17:54,080
anyone uh aware of the the recent

516
00:17:54,080 --> 00:17:55,520
confluence

517
00:17:55,520 --> 00:18:00,400
on-prem ognl injection vulnerability

518
00:18:00,400 --> 00:18:02,000
so this is a really interesting one i

519
00:18:02,000 --> 00:18:04,480
bring up here because

520
00:18:04,480 --> 00:18:06,240
not because of the vulnerability but

521
00:18:06,240 --> 00:18:07,360
because

522
00:18:07,360 --> 00:18:09,840
the researchers who found it

523
00:18:09,840 --> 00:18:12,080
had to bypass a laugh

524
00:18:12,080 --> 00:18:13,600
in the organization where they were

525
00:18:13,600 --> 00:18:14,880
assessing

526
00:18:14,880 --> 00:18:16,640
uh to exploit it

527
00:18:16,640 --> 00:18:18,640
and it they did it easily if you look at

528
00:18:18,640 --> 00:18:21,120
here they changed the word eval

529
00:18:21,120 --> 00:18:23,760
to the unicode equivalent equivalent of

530
00:18:23,760 --> 00:18:26,160
e with val and then they had to change

531
00:18:26,160 --> 00:18:28,160
the the single tick to the unicode

532
00:18:28,160 --> 00:18:29,919
equivalent and

533
00:18:29,919 --> 00:18:32,000
just doing that they bypassed that laugh

534
00:18:32,000 --> 00:18:34,320
that that person was vmware i believe

535
00:18:34,320 --> 00:18:36,160
that was uh where they were attacking

536
00:18:36,160 --> 00:18:38,559
them and then they were able to

537
00:18:38,559 --> 00:18:40,240
you know complete this ognl injection

538
00:18:40,240 --> 00:18:41,760
which basically says hey if you're on

539
00:18:41,760 --> 00:18:44,559
windows run this uh command.exe and if

540
00:18:44,559 --> 00:18:45,840
you're not then

541
00:18:45,840 --> 00:18:47,919
you know run the the uh the linux

542
00:18:47,919 --> 00:18:49,600
version of bash

543
00:18:49,600 --> 00:18:52,000
um and it was a pretty big deal

544
00:18:52,000 --> 00:18:53,600
and uh you know it's just one of those

545
00:18:53,600 --> 00:18:56,160
things where that organization you know

546
00:18:56,160 --> 00:18:58,000
they thought they were protected to an

547
00:18:58,000 --> 00:18:58,960
extent

548
00:18:58,960 --> 00:19:00,799
with their laugh running

549
00:19:00,799 --> 00:19:02,400
and then it turns out well the wife was

550
00:19:02,400 --> 00:19:04,160
bypassed so now you know all bets are

551
00:19:04,160 --> 00:19:06,160
off

552
00:19:06,160 --> 00:19:07,679
so the last few

553
00:19:07,679 --> 00:19:09,520
slides i want to talk about on waff or

554
00:19:09,520 --> 00:19:10,960
about data

555
00:19:10,960 --> 00:19:13,200
and having visibility through that data

556
00:19:13,200 --> 00:19:16,160
and how it's important

557
00:19:16,320 --> 00:19:18,000
so only a couple of you raised your hand

558
00:19:18,000 --> 00:19:20,880
about using wafts do you use the data

559
00:19:20,880 --> 00:19:22,240
coming from them

560
00:19:22,240 --> 00:19:24,880
or the alerts or do you only go to it

561
00:19:24,880 --> 00:19:26,960
when someone reports some weird problem

562
00:19:26,960 --> 00:19:29,919
or need to patch it

563
00:19:30,240 --> 00:19:32,640
could you should you use the data

564
00:19:32,640 --> 00:19:35,640
yeah

565
00:19:42,480 --> 00:19:44,400
yeah i mean it's it's interesting right

566
00:19:44,400 --> 00:19:46,080
this is how i see it

567
00:19:46,080 --> 00:19:47,919
you know for me i look at the bigger

568
00:19:47,919 --> 00:19:50,720
picture like the shift left shift right

569
00:19:50,720 --> 00:19:52,240
shift everywhere whatever you want to

570
00:19:52,240 --> 00:19:54,400
ship just shift um

571
00:19:54,400 --> 00:19:56,720
you look at it and i call this data of

572
00:19:56,720 --> 00:19:58,480
the past because there's a lot of things

573
00:19:58,480 --> 00:20:00,880
here going on where you've got some bug

574
00:20:00,880 --> 00:20:03,120
tracker data from your sas you've got

575
00:20:03,120 --> 00:20:04,960
das you've got probably external vendors

576
00:20:04,960 --> 00:20:06,799
and stuff and then you've got your waff

577
00:20:06,799 --> 00:20:08,720
but there's no correlation

578
00:20:08,720 --> 00:20:10,880
between the waff data and what you've

579
00:20:10,880 --> 00:20:13,440
got in your bug tracker right and no way

580
00:20:13,440 --> 00:20:15,200
to tell like hey

581
00:20:15,200 --> 00:20:16,880
i've got a sql injection that i've

582
00:20:16,880 --> 00:20:18,000
detected

583
00:20:18,000 --> 00:20:20,000
do i know for sure i'm blocking it and

584
00:20:20,000 --> 00:20:21,600
if i block a sql injection there's no

585
00:20:21,600 --> 00:20:23,039
way to tie that back because there's no

586
00:20:23,039 --> 00:20:24,320
context

587
00:20:24,320 --> 00:20:26,159
but to me there's still data that i

588
00:20:26,159 --> 00:20:28,080
think is valuable you know because if

589
00:20:28,080 --> 00:20:29,840
all you're seeing is sql injection

590
00:20:29,840 --> 00:20:32,080
attacks well let's prioritize sql

591
00:20:32,080 --> 00:20:35,120
injection issues over the others because

592
00:20:35,120 --> 00:20:36,960
that's what we're seeing

593
00:20:36,960 --> 00:20:38,640
all of the time

594
00:20:38,640 --> 00:20:41,120
or command injection or whatever it is

595
00:20:41,120 --> 00:20:42,960
but it's it's it's interesting because i

596
00:20:42,960 --> 00:20:44,400
i've done this talk a couple of times

597
00:20:44,400 --> 00:20:45,679
i've never had anyone tell me they're

598
00:20:45,679 --> 00:20:47,280
actually using laugh data which is

599
00:20:47,280 --> 00:20:48,640
mind-boggling to me because there's so

600
00:20:48,640 --> 00:20:50,400
much good data there

601
00:20:50,400 --> 00:20:52,080
i'd throw it into a sam or splunk or

602
00:20:52,080 --> 00:20:53,200
whatever and

603
00:20:53,200 --> 00:20:55,440
just see what's there and and look at it

604
00:20:55,440 --> 00:20:57,760
and see how you can correlate some of

605
00:20:57,760 --> 00:20:59,520
that

606
00:20:59,520 --> 00:21:01,520
moving forward

607
00:21:01,520 --> 00:21:04,159
so that's waff

608
00:21:04,159 --> 00:21:07,440
so rasp rasp i would say it's still very

609
00:21:07,440 --> 00:21:08,640
infant

610
00:21:08,640 --> 00:21:11,360
runtime application self protection

611
00:21:11,360 --> 00:21:14,159
it's something that

612
00:21:14,159 --> 00:21:16,799
been around five six years-ish um

613
00:21:16,799 --> 00:21:18,400
there's been some people in the market

614
00:21:18,400 --> 00:21:19,919
and i'll talk about some of the vendors

615
00:21:19,919 --> 00:21:22,400
and stuff here in a bit um

616
00:21:22,400 --> 00:21:25,760
but uh it hasn't quite taken off 100 yet

617
00:21:25,760 --> 00:21:27,520
but i want to talk about it because it's

618
00:21:27,520 --> 00:21:31,200
different than a waff um and and i'll go

619
00:21:31,200 --> 00:21:33,120
into that here so there are some

620
00:21:33,120 --> 00:21:35,520
similarities right it's it's a layer 7

621
00:21:35,520 --> 00:21:37,919
technology it's used to stop real

622
00:21:37,919 --> 00:21:39,200
attacks

623
00:21:39,200 --> 00:21:41,120
but from within the application so it's

624
00:21:41,120 --> 00:21:42,799
not an external

625
00:21:42,799 --> 00:21:44,799
network component it's not outside of

626
00:21:44,799 --> 00:21:46,720
the app it's living in the actual

627
00:21:46,720 --> 00:21:48,559
application

628
00:21:48,559 --> 00:21:51,039
the alert rate is extremely low

629
00:21:51,039 --> 00:21:53,039
low false positive rate

630
00:21:53,039 --> 00:21:54,320
because it knows exactly what's

631
00:21:54,320 --> 00:21:55,600
happening and i'll talk about that in a

632
00:21:55,600 --> 00:21:56,880
sec

633
00:21:56,880 --> 00:21:59,440
and it does not require as much tuning

634
00:21:59,440 --> 00:22:01,440
resulting in many many less experts

635
00:22:01,440 --> 00:22:03,520
being needed

636
00:22:03,520 --> 00:22:06,960
and really the the key parts are

637
00:22:06,960 --> 00:22:09,679
vision um it can see into the

638
00:22:09,679 --> 00:22:11,520
application because it's in the actual

639
00:22:11,520 --> 00:22:14,159
vm it's running with the application it

640
00:22:14,159 --> 00:22:17,200
knows the context of data and the attack

641
00:22:17,200 --> 00:22:19,039
and can really determine if this is a

642
00:22:19,039 --> 00:22:21,280
valid thing or not so you know i'll talk

643
00:22:21,280 --> 00:22:23,440
about you know comparing what the waft

644
00:22:23,440 --> 00:22:25,679
did in a minute to this

645
00:22:25,679 --> 00:22:28,000
it can monitor security uh the

646
00:22:28,000 --> 00:22:31,039
performance uh knows exactly when attack

647
00:22:31,039 --> 00:22:33,919
is gonna succeed or not um you know and

648
00:22:33,919 --> 00:22:35,600
it can be enabled anywhere anywhere that

649
00:22:35,600 --> 00:22:36,960
your apps are running you can enable

650
00:22:36,960 --> 00:22:39,039
this

651
00:22:39,039 --> 00:22:40,480
and it does this by instrumentation i'm

652
00:22:40,480 --> 00:22:42,159
sure you've heard this a few times this

653
00:22:42,159 --> 00:22:42,960
week

654
00:22:42,960 --> 00:22:44,720
um we instrument everything you know

655
00:22:44,720 --> 00:22:46,240
every time i think about instrumentation

656
00:22:46,240 --> 00:22:48,559
i think about a cockpit i mean the

657
00:22:48,559 --> 00:22:50,320
amount of instruments that they have in

658
00:22:50,320 --> 00:22:51,520
a cockpit

659
00:22:51,520 --> 00:22:53,200
especially in the newer ones that are

660
00:22:53,200 --> 00:22:55,919
measuring everything for those pilots to

661
00:22:55,919 --> 00:22:56,960
understand

662
00:22:56,960 --> 00:22:58,559
what's going on with the jet what's

663
00:22:58,559 --> 00:23:00,799
going on outside what's going on 20

664
00:23:00,799 --> 00:23:02,480
miles ahead

665
00:23:02,480 --> 00:23:04,000
is crazy right

666
00:23:04,000 --> 00:23:06,240
but it's needed it's needed not only for

667
00:23:06,240 --> 00:23:07,840
our comfort level to understand that

668
00:23:07,840 --> 00:23:09,440
they're monitoring and measuring these

669
00:23:09,440 --> 00:23:11,440
things but for theirs to know if they

670
00:23:11,440 --> 00:23:13,440
have to make a change or divert

671
00:23:13,440 --> 00:23:15,280
somewhere else

672
00:23:15,280 --> 00:23:17,280
and i don't know why we haven't thought

673
00:23:17,280 --> 00:23:19,280
about doing this in code we're doing it

674
00:23:19,280 --> 00:23:21,120
through apms right we're

675
00:23:21,120 --> 00:23:23,039
monitoring performance of our apps

676
00:23:23,039 --> 00:23:24,480
through instrumentation whether you know

677
00:23:24,480 --> 00:23:25,679
it or not

678
00:23:25,679 --> 00:23:28,080
so we should be doing it with security

679
00:23:28,080 --> 00:23:29,520
in mind too

680
00:23:29,520 --> 00:23:30,960
because you're in the app you're

681
00:23:30,960 --> 00:23:32,559
watching the data you're watching it

682
00:23:32,559 --> 00:23:34,559
flow and you know where things are

683
00:23:34,559 --> 00:23:36,960
vulnerable and when they'd be vulnerable

684
00:23:36,960 --> 00:23:39,280
same thing in cars right

685
00:23:39,280 --> 00:23:41,039
this would be a bad one to get by the

686
00:23:41,039 --> 00:23:43,120
way zero would be terrible i've seen you

687
00:23:43,120 --> 00:23:45,679
know 15 but

688
00:23:45,679 --> 00:23:47,120
but cars are becoming more and more

689
00:23:47,120 --> 00:23:49,279
instrumented with different

690
00:23:49,279 --> 00:23:51,520
monitors and detections and and things

691
00:23:51,520 --> 00:23:52,720
like that

692
00:23:52,720 --> 00:23:54,400
because it's helpful to us to understand

693
00:23:54,400 --> 00:23:56,720
what's going on it's not the pull-up to

694
00:23:56,720 --> 00:23:58,720
the street light someone's going like

695
00:23:58,720 --> 00:24:00,159
this to roll your window down and they

696
00:24:00,159 --> 00:24:02,320
point at your your tire right like i

697
00:24:02,320 --> 00:24:04,240
remember that from back in my 16 year

698
00:24:04,240 --> 00:24:05,360
old days

699
00:24:05,360 --> 00:24:06,400
but we don't have to do that anymore

700
00:24:06,400 --> 00:24:08,080
because the car tells us that when our

701
00:24:08,080 --> 00:24:09,520
tires are low

702
00:24:09,520 --> 00:24:11,279
and i want my app to tell me that too i

703
00:24:11,279 --> 00:24:12,640
want my app to tell me when things are

704
00:24:12,640 --> 00:24:13,679
bad

705
00:24:13,679 --> 00:24:16,840
so let's look at the same sort of attack

706
00:24:16,840 --> 00:24:19,200
scenario so we have

707
00:24:19,200 --> 00:24:20,640
when we looked at this with the waff the

708
00:24:20,640 --> 00:24:22,240
wafts just said okay we'll block it

709
00:24:22,240 --> 00:24:23,760
whatever right so

710
00:24:23,760 --> 00:24:26,159
if this is a back end sql

711
00:24:26,159 --> 00:24:29,279
query like a sql execute the rasp is

712
00:24:29,279 --> 00:24:30,960
going to see this data flow in it's

713
00:24:30,960 --> 00:24:32,400
going to trace it all the way back to

714
00:24:32,400 --> 00:24:33,520
that sync

715
00:24:33,520 --> 00:24:35,360
it's going to say okay this is actually

716
00:24:35,360 --> 00:24:37,760
changing the intent of the query so i'm

717
00:24:37,760 --> 00:24:39,760
going to block it so it knows the

718
00:24:39,760 --> 00:24:41,520
context it knows what it's supposed to

719
00:24:41,520 --> 00:24:43,600
be it says this is wrong and i'm going

720
00:24:43,600 --> 00:24:45,360
to block it so it has all that context

721
00:24:45,360 --> 00:24:46,640
and then

722
00:24:46,640 --> 00:24:48,320
there's something that can be sent to

723
00:24:48,320 --> 00:24:51,200
developers from that

724
00:24:51,279 --> 00:24:53,360
i'm going to dig way deep into into the

725
00:24:53,360 --> 00:24:54,960
uh the way that this is detected in a

726
00:24:54,960 --> 00:24:56,720
minute great question

727
00:24:56,720 --> 00:24:57,600
um

728
00:24:57,600 --> 00:24:59,520
and so let's go on to the next one right

729
00:24:59,520 --> 00:25:01,679
same sort of thing but now i know that

730
00:25:01,679 --> 00:25:04,720
it's a sequel query back end right so if

731
00:25:04,720 --> 00:25:06,640
i submit this command injection looking

732
00:25:06,640 --> 00:25:08,640
thing it's going to see that come in and

733
00:25:08,640 --> 00:25:10,240
it's going to trace it back to the sql

734
00:25:10,240 --> 00:25:12,240
sync and be like oh well that's nothing

735
00:25:12,240 --> 00:25:14,400
really for sql it doesn't bother me they

736
00:25:14,400 --> 00:25:16,320
can put that in the database we'll let

737
00:25:16,320 --> 00:25:18,240
that through right because it has

738
00:25:18,240 --> 00:25:20,720
context it knows that that's not being

739
00:25:20,720 --> 00:25:23,200
executed in a command way it's not being

740
00:25:23,200 --> 00:25:25,200
run on the system it's just being put

741
00:25:25,200 --> 00:25:27,679
into a database

742
00:25:27,679 --> 00:25:29,360
and there are cases believe me like this

743
00:25:29,360 --> 00:25:32,080
i mean i think of uh so congress is a

744
00:25:32,080 --> 00:25:33,440
software security vendor i think of the

745
00:25:33,440 --> 00:25:36,080
way we work we store a lot of this stuff

746
00:25:36,080 --> 00:25:37,919
in our database i mean we're getting

747
00:25:37,919 --> 00:25:40,159
attack data from customers that look

748
00:25:40,159 --> 00:25:41,520
exactly like that that we have to store

749
00:25:41,520 --> 00:25:43,919
in a database you know if we threw a

750
00:25:43,919 --> 00:25:45,840
waff in front of the way that the api

751
00:25:45,840 --> 00:25:47,679
works that would be a nightmare because

752
00:25:47,679 --> 00:25:49,679
everything would be blocked

753
00:25:49,679 --> 00:25:52,559
right so for us rasp is great

754
00:25:52,559 --> 00:25:54,480
all right so let's dig into to how it

755
00:25:54,480 --> 00:25:57,039
kind of does this so let's look at sql

756
00:25:57,039 --> 00:25:58,640
injection it's kind of my favorite and

757
00:25:58,640 --> 00:26:00,880
and the way that it really works is this

758
00:26:00,880 --> 00:26:01,679
so

759
00:26:01,679 --> 00:26:03,919
there's there's two really main key

760
00:26:03,919 --> 00:26:06,799
things it has a source so that's where

761
00:26:06,799 --> 00:26:08,320
the data comes in

762
00:26:08,320 --> 00:26:10,880
so we hook that source and in this case

763
00:26:10,880 --> 00:26:13,760
it's get parameter right so on that get

764
00:26:13,760 --> 00:26:15,440
parameter it's getting some parameter

765
00:26:15,440 --> 00:26:17,440
from that you know from

766
00:26:17,440 --> 00:26:18,640
from here it's getting the name

767
00:26:18,640 --> 00:26:20,480
parameter or whatever it may be called

768
00:26:20,480 --> 00:26:22,640
and it says i want to track this i want

769
00:26:22,640 --> 00:26:24,559
to track this because it's an important

770
00:26:24,559 --> 00:26:26,880
source i know it's tainted i know it's

771
00:26:26,880 --> 00:26:29,600
untrusted data because it's coming from

772
00:26:29,600 --> 00:26:32,000
you know an untrusted source so i mark

773
00:26:32,000 --> 00:26:33,520
it and i want to track this and i hook

774
00:26:33,520 --> 00:26:34,320
it

775
00:26:34,320 --> 00:26:36,960
and then in the back end i've marked all

776
00:26:36,960 --> 00:26:39,919
of the the places you know where uh it

777
00:26:39,919 --> 00:26:42,080
could go bad you know so now that i've

778
00:26:42,080 --> 00:26:44,240
marked this this get parameter of the

779
00:26:44,240 --> 00:26:46,880
user um i can be like okay cool let's

780
00:26:46,880 --> 00:26:48,559
watch this as it flows through the app

781
00:26:48,559 --> 00:26:50,159
because remember i'm in the app i'm

782
00:26:50,159 --> 00:26:52,559
living in the virtual machine

783
00:26:52,559 --> 00:26:54,880
and watching this data flow

784
00:26:54,880 --> 00:26:56,400
and and then

785
00:26:56,400 --> 00:26:58,480
it traces it it looks it it sees it goes

786
00:26:58,480 --> 00:27:00,080
through all these other parameters and i

787
00:27:00,080 --> 00:27:02,320
don't really necessarily care about that

788
00:27:02,320 --> 00:27:04,080
unless there may be some validator

789
00:27:04,080 --> 00:27:05,440
involved right

790
00:27:05,440 --> 00:27:07,039
if there's a validator involved then i

791
00:27:07,039 --> 00:27:08,799
can mark it as trusted or that it's been

792
00:27:08,799 --> 00:27:11,120
looked at or validated but what i really

793
00:27:11,120 --> 00:27:13,200
care about is is the sync or where it's

794
00:27:13,200 --> 00:27:14,400
going out

795
00:27:14,400 --> 00:27:16,080
right so in this case you can see that

796
00:27:16,080 --> 00:27:19,520
the the sync is execute query which is a

797
00:27:19,520 --> 00:27:21,679
sql query right so it's executing that

798
00:27:21,679 --> 00:27:22,640
query

799
00:27:22,640 --> 00:27:26,640
so if i can trace from the source

800
00:27:26,640 --> 00:27:28,640
to untrusted data all the way into a

801
00:27:28,640 --> 00:27:30,320
sync that i've marked as something that

802
00:27:30,320 --> 00:27:32,399
is sql injection sync

803
00:27:32,399 --> 00:27:33,520
i can

804
00:27:33,520 --> 00:27:35,360
validate that and say yes this is going

805
00:27:35,360 --> 00:27:37,679
to be a sql injection issue and it gets

806
00:27:37,679 --> 00:27:39,840
a little more complicated right

807
00:27:39,840 --> 00:27:40,640
so

808
00:27:40,640 --> 00:27:42,559
let's let's run through kind of a little

809
00:27:42,559 --> 00:27:45,440
test example here

810
00:27:45,440 --> 00:27:47,679
so what i have here is i have just a

811
00:27:47,679 --> 00:27:49,679
username and password input this is like

812
00:27:49,679 --> 00:27:52,880
the quintessential early use case sql

813
00:27:52,880 --> 00:27:56,799
injection issue that everyone had

814
00:27:56,799 --> 00:27:58,880
select star from users where user id is

815
00:27:58,880 --> 00:28:00,880
whatever and password equals the

816
00:28:00,880 --> 00:28:02,640
password

817
00:28:02,640 --> 00:28:04,960
so the input is coming in and i'm going

818
00:28:04,960 --> 00:28:06,399
to mark both of those right i'm going to

819
00:28:06,399 --> 00:28:08,159
mark both of those

820
00:28:08,159 --> 00:28:10,399
um sources the username and password

821
00:28:10,399 --> 00:28:11,520
because they're coming in separate

822
00:28:11,520 --> 00:28:14,399
parameters i'll mark them as as taint or

823
00:28:14,399 --> 00:28:16,480
untrusted

824
00:28:16,480 --> 00:28:17,760
and then i'm going to start to break it

825
00:28:17,760 --> 00:28:20,240
down a little bit so if i input

826
00:28:20,240 --> 00:28:22,480
the typical sql query into the username

827
00:28:22,480 --> 00:28:24,720
test example.com

828
00:28:24,720 --> 00:28:25,679
uh

829
00:28:25,679 --> 00:28:28,399
quote or one equals one semicolon dash

830
00:28:28,399 --> 00:28:29,360
dash

831
00:28:29,360 --> 00:28:30,399
what it does

832
00:28:30,399 --> 00:28:33,039
is it says okay i trace this back right

833
00:28:33,039 --> 00:28:35,440
because i know it's untrusted and it

834
00:28:35,440 --> 00:28:37,760
gets to this execute query so before i

835
00:28:37,760 --> 00:28:39,600
actually execute the query

836
00:28:39,600 --> 00:28:41,919
i'm going to look at

837
00:28:41,919 --> 00:28:44,720
did the intent change of the query

838
00:28:44,720 --> 00:28:46,799
because i i can tokenize the query at

839
00:28:46,799 --> 00:28:48,240
this point because i know what the query

840
00:28:48,240 --> 00:28:49,120
should be

841
00:28:49,120 --> 00:28:50,559
because i'm in the code i know what it

842
00:28:50,559 --> 00:28:52,480
should be i'm in the running app

843
00:28:52,480 --> 00:28:54,799
and so if if i you know that select

844
00:28:54,799 --> 00:28:57,200
changes that select statement changes

845
00:28:57,200 --> 00:28:59,120
and there's an extra operation as you

846
00:28:59,120 --> 00:29:00,720
can see in the or you know i can mark

847
00:29:00,720 --> 00:29:01,760
that up

848
00:29:01,760 --> 00:29:03,600
or there's another expression that was

849
00:29:03,600 --> 00:29:04,559
added

850
00:29:04,559 --> 00:29:07,200
um when all i'm expecting is a string i

851
00:29:07,200 --> 00:29:09,600
can be like oh geez man that that's bad

852
00:29:09,600 --> 00:29:11,279
um it's going to try and execute

853
00:29:11,279 --> 00:29:12,399
something that

854
00:29:12,399 --> 00:29:14,720
this query did not intend so i'm going

855
00:29:14,720 --> 00:29:17,919
to block it right so it's a lot smarter

856
00:29:17,919 --> 00:29:20,080
than just saying oh well or one equals

857
00:29:20,080 --> 00:29:21,919
one looks bad so i'm going to trace it

858
00:29:21,919 --> 00:29:23,440
and it's going to execute query so i'm

859
00:29:23,440 --> 00:29:25,039
going to block it it's not always going

860
00:29:25,039 --> 00:29:26,799
to block it it's only going to block it

861
00:29:26,799 --> 00:29:28,240
if it's going to change the intent of

862
00:29:28,240 --> 00:29:31,360
that that query

863
00:29:31,919 --> 00:29:34,000
and so you can see here where i've

864
00:29:34,000 --> 00:29:36,159
flagged the red right so as we're

865
00:29:36,159 --> 00:29:39,440
tokenizing the initial or the original

866
00:29:39,440 --> 00:29:40,399
query

867
00:29:40,399 --> 00:29:43,279
we can see that oh shoot it added

868
00:29:43,279 --> 00:29:45,679
another operation of or and it added

869
00:29:45,679 --> 00:29:48,159
another expression of one equals one and

870
00:29:48,159 --> 00:29:50,240
then the comment block so basically

871
00:29:50,240 --> 00:29:52,080
added three different blocks to the

872
00:29:52,080 --> 00:29:55,679
original intent of the query right so

873
00:29:55,679 --> 00:29:57,279
you may think well geez this is a lot of

874
00:29:57,279 --> 00:29:59,039
work and and i'm going to tell you right

875
00:29:59,039 --> 00:30:00,880
now it does slow things down a little

876
00:30:00,880 --> 00:30:03,679
bit right because it is doing a lot of

877
00:30:03,679 --> 00:30:06,320
uh validation and a lot of things in

878
00:30:06,320 --> 00:30:09,200
memory when it's doing things like this

879
00:30:09,200 --> 00:30:12,799
but it's very very effective and very

880
00:30:12,799 --> 00:30:14,880
very accurate

881
00:30:14,880 --> 00:30:18,320
because this is how it does it

882
00:30:18,640 --> 00:30:21,279
so really if you look at the full flow

883
00:30:21,279 --> 00:30:23,279
right you have the untrusted user input

884
00:30:23,279 --> 00:30:26,399
coming in in a source you have your

885
00:30:26,399 --> 00:30:28,159
vulnerable sync called and in this case

886
00:30:28,159 --> 00:30:30,000
is execute query

887
00:30:30,000 --> 00:30:31,600
and then you see that there's a token

888
00:30:31,600 --> 00:30:33,200
boundary crossed here

889
00:30:33,200 --> 00:30:34,799
that it was not expecting and not

890
00:30:34,799 --> 00:30:36,640
intended and it's going to block it and

891
00:30:36,640 --> 00:30:38,000
send an alert

892
00:30:38,000 --> 00:30:39,120
it's it's

893
00:30:39,120 --> 00:30:41,120
it's as simple as that

894
00:30:41,120 --> 00:30:43,440
you can do this with jot jeff williams

895
00:30:43,440 --> 00:30:46,000
is a free version of jot to do things

896
00:30:46,000 --> 00:30:47,279
like this

897
00:30:47,279 --> 00:30:49,600
but it's very powerful and has so much

898
00:30:49,600 --> 00:30:53,279
more context than a waff would ever have

899
00:30:53,279 --> 00:30:55,200
and it's just really good at certain

900
00:30:55,200 --> 00:30:57,919
types of attacks

901
00:30:57,919 --> 00:30:58,640
so

902
00:30:58,640 --> 00:31:01,440
if we look at the way we configure a

903
00:31:01,440 --> 00:31:03,360
rasp

904
00:31:03,360 --> 00:31:05,440
it looks a little bit different

905
00:31:05,440 --> 00:31:06,240
than

906
00:31:06,240 --> 00:31:07,679
how we configure

907
00:31:07,679 --> 00:31:09,279
a laugh

908
00:31:09,279 --> 00:31:11,120
you basically turn

909
00:31:11,120 --> 00:31:14,159
it on or off for the attack type command

910
00:31:14,159 --> 00:31:16,080
injection cross-site request forgery

911
00:31:16,080 --> 00:31:17,360
things like that

912
00:31:17,360 --> 00:31:19,840
and that's usually about it the tuning

913
00:31:19,840 --> 00:31:21,360
comes into play

914
00:31:21,360 --> 00:31:23,840
if you know there's some validator or

915
00:31:23,840 --> 00:31:26,960
something in play that's custom or the

916
00:31:26,960 --> 00:31:29,360
the rast didn't detect or know about and

917
00:31:29,360 --> 00:31:31,519
then you can tune it to add that so you

918
00:31:31,519 --> 00:31:33,440
don't you know block things that you

919
00:31:33,440 --> 00:31:35,679
shouldn't

920
00:31:36,880 --> 00:31:40,159
now it's not all sunshine and rainbows

921
00:31:40,159 --> 00:31:41,760
when it comes to rasp like i said it's

922
00:31:41,760 --> 00:31:44,240
very new

923
00:31:44,480 --> 00:31:46,640
and as you can imagine if it's running

924
00:31:46,640 --> 00:31:49,600
in a vm with your code it's very it has

925
00:31:49,600 --> 00:31:51,039
to be very language and framework

926
00:31:51,039 --> 00:31:52,240
specific

927
00:31:52,240 --> 00:31:54,399
and that's very difficult as fast as

928
00:31:54,399 --> 00:31:56,399
languages and frameworks change

929
00:31:56,399 --> 00:31:58,640
um it's it's hard to keep up to date i

930
00:31:58,640 --> 00:32:00,640
mean you know even point changes on some

931
00:32:00,640 --> 00:32:02,480
frameworks you've got to look at the

932
00:32:02,480 --> 00:32:04,480
sources and sinks that you're using and

933
00:32:04,480 --> 00:32:06,399
make sure that those are all detected

934
00:32:06,399 --> 00:32:08,159
appropriately

935
00:32:08,159 --> 00:32:10,159
so bypasses usually result in code

936
00:32:10,159 --> 00:32:11,120
changes

937
00:32:11,120 --> 00:32:12,320
and it's usually because there's

938
00:32:12,320 --> 00:32:13,679
something that's changed in the language

939
00:32:13,679 --> 00:32:15,200
or framework

940
00:32:15,200 --> 00:32:17,919
it is more difficult to install

941
00:32:17,919 --> 00:32:19,440
you know it's usually a different team

942
00:32:19,440 --> 00:32:20,960
that's installing

943
00:32:20,960 --> 00:32:21,919
rasp

944
00:32:21,919 --> 00:32:23,679
because it's usually part of the devops

945
00:32:23,679 --> 00:32:26,000
flow or the infrastructure team that you

946
00:32:26,000 --> 00:32:28,799
know brings it into ci cd and and and

947
00:32:28,799 --> 00:32:31,120
make sure that the the appropriate java

948
00:32:31,120 --> 00:32:33,200
agent or whatever is installed

949
00:32:33,200 --> 00:32:34,320
and the other thing that's hard for

950
00:32:34,320 --> 00:32:36,480
security people

951
00:32:36,480 --> 00:32:39,600
oftentimes you don't see anything

952
00:32:39,600 --> 00:32:42,399
oh wow if you see a lot of stuff right

953
00:32:42,399 --> 00:32:44,399
but in a rasp you may install and be

954
00:32:44,399 --> 00:32:45,840
like okay

955
00:32:45,840 --> 00:32:48,799
and you might not see anything for days

956
00:32:48,799 --> 00:32:52,399
because it's detecting real attacks

957
00:32:52,399 --> 00:32:55,039
and that's the only thing you should see

958
00:32:55,039 --> 00:32:56,480
and that's hard for us for some reason

959
00:32:56,480 --> 00:32:58,080
why is that hard for us to not see

960
00:32:58,080 --> 00:32:59,600
anything it feels like it's not working

961
00:32:59,600 --> 00:33:00,720
right

962
00:33:00,720 --> 00:33:03,519
it's like how do i know this is working

963
00:33:03,519 --> 00:33:05,679
but the reality is is that's how the

964
00:33:05,679 --> 00:33:07,279
technology works

965
00:33:07,279 --> 00:33:10,960
so let's go back to confluence

966
00:33:10,960 --> 00:33:12,880
and

967
00:33:12,880 --> 00:33:14,960
this never would have succeeded

968
00:33:14,960 --> 00:33:15,919
if

969
00:33:15,919 --> 00:33:20,000
vmware would have been using a rasp

970
00:33:20,000 --> 00:33:22,640
because of the way that a rasp text ogl

971
00:33:22,640 --> 00:33:24,480
and ognl injection

972
00:33:24,480 --> 00:33:26,640
and would have blocked it regardless of

973
00:33:26,640 --> 00:33:28,880
the encoding or whatever that the

974
00:33:28,880 --> 00:33:30,559
the attackers were trying the malicious

975
00:33:30,559 --> 00:33:32,240
actors were trying to

976
00:33:32,240 --> 00:33:33,039
do

977
00:33:33,039 --> 00:33:34,720
um it would have blocked it and this is

978
00:33:34,720 --> 00:33:37,120
just an example of a dashboard that

979
00:33:37,120 --> 00:33:39,360
shows that yes that expression language

980
00:33:39,360 --> 00:33:40,880
injection event

981
00:33:40,880 --> 00:33:43,519
was blocked the actual payload that the

982
00:33:43,519 --> 00:33:46,159
was used to bypass the waff was blocked

983
00:33:46,159 --> 00:33:48,559
by the rasp because of where it lives

984
00:33:48,559 --> 00:33:52,640
and how it sees things differently

985
00:33:52,640 --> 00:33:54,399
and really expression language is one of

986
00:33:54,399 --> 00:33:56,399
those areas where waff is not very good

987
00:33:56,399 --> 00:33:57,360
at

988
00:33:57,360 --> 00:33:59,679
there's too many of them

989
00:33:59,679 --> 00:34:01,039
when it comes to

990
00:34:01,039 --> 00:34:02,799
java specifically

991
00:34:02,799 --> 00:34:05,519
and and aras is very good at that

992
00:34:05,519 --> 00:34:07,679
and the reality is and and someone i

993
00:34:07,679 --> 00:34:09,199
think earlier asked like what is rasp

994
00:34:09,199 --> 00:34:11,119
well it's already standard

995
00:34:11,119 --> 00:34:15,199
it's in this 853 it's in pci um so it's

996
00:34:15,199 --> 00:34:17,040
it's it's coming

997
00:34:17,040 --> 00:34:19,359
um i think if some of the issues can be

998
00:34:19,359 --> 00:34:20,879
fixed with performance and things like

999
00:34:20,879 --> 00:34:23,599
that uh and they will um we'll we'll

1000
00:34:23,599 --> 00:34:26,960
definitely see it more mainstream

1001
00:34:29,679 --> 00:34:31,280
yeah i'm gonna i have a whole section

1002
00:34:31,280 --> 00:34:33,119
about comparing the the goods and the

1003
00:34:33,119 --> 00:34:34,879
bads for each so i'll definitely dig

1004
00:34:34,879 --> 00:34:36,960
into that

1005
00:34:36,960 --> 00:34:38,320
but i wanted to talk about data because

1006
00:34:38,320 --> 00:34:39,679
i think data through visibility is

1007
00:34:39,679 --> 00:34:41,119
important

1008
00:34:41,119 --> 00:34:43,119
my favorite dilbert slide

1009
00:34:43,119 --> 00:34:44,879
but it looks different this is kind of

1010
00:34:44,879 --> 00:34:47,040
data of

1011
00:34:47,040 --> 00:34:48,960
the future if you will where we're

1012
00:34:48,960 --> 00:34:50,879
instrumenting all of our code and we

1013
00:34:50,879 --> 00:34:53,040
have a single place for all of the data

1014
00:34:53,040 --> 00:34:56,320
to go i still think a waf exists

1015
00:34:56,320 --> 00:34:58,160
but now we have data all the way into

1016
00:34:58,160 --> 00:35:00,320
production that can be tied back to

1017
00:35:00,320 --> 00:35:02,640
specific vulnerabilities right because

1018
00:35:02,640 --> 00:35:04,880
we we see them we see the data the

1019
00:35:04,880 --> 00:35:07,440
untrusted data flow into the vulnerable

1020
00:35:07,440 --> 00:35:09,359
sinks

1021
00:35:09,359 --> 00:35:11,599
all right so comparing them

1022
00:35:11,599 --> 00:35:13,520
who here this is hard because only a

1023
00:35:13,520 --> 00:35:14,960
couple of views it have you have you

1024
00:35:14,960 --> 00:35:16,640
compared laugh and rasp in your

1025
00:35:16,640 --> 00:35:19,280
organizations

1026
00:35:19,280 --> 00:35:21,200
i like the no because that's that's the

1027
00:35:21,200 --> 00:35:22,720
correct answer

1028
00:35:22,720 --> 00:35:24,720
but the reality is is

1029
00:35:24,720 --> 00:35:26,960
for some reason and it's changing some

1030
00:35:26,960 --> 00:35:28,000
reason

1031
00:35:28,000 --> 00:35:30,640
budgets are for one or the other so they

1032
00:35:30,640 --> 00:35:32,160
compare them thinking they're the same

1033
00:35:32,160 --> 00:35:33,520
thing but they're different and

1034
00:35:33,520 --> 00:35:34,880
hopefully you see that already and i'll

1035
00:35:34,880 --> 00:35:36,960
dig into those a little bit further

1036
00:35:36,960 --> 00:35:38,720
but so what we did is we're like all

1037
00:35:38,720 --> 00:35:40,240
right well let's look at some payload

1038
00:35:40,240 --> 00:35:42,160
testing because that's what people are

1039
00:35:42,160 --> 00:35:43,520
doing they're throwing a bunch of

1040
00:35:43,520 --> 00:35:46,000
payloads at waff and a rasp and

1041
00:35:46,000 --> 00:35:48,560
expecting results that make sense to

1042
00:35:48,560 --> 00:35:49,839
them

1043
00:35:49,839 --> 00:35:51,040
and they're trying to compare those

1044
00:35:51,040 --> 00:35:52,160
results

1045
00:35:52,160 --> 00:35:53,040
so

1046
00:35:53,040 --> 00:35:54,640
you know we had we had someone come to

1047
00:35:54,640 --> 00:35:56,880
us said here we did this we looked at a

1048
00:35:56,880 --> 00:35:59,040
waff we looked at a rasp and these were

1049
00:35:59,040 --> 00:36:00,560
our results

1050
00:36:00,560 --> 00:36:04,320
what does this tell anyone here

1051
00:36:09,520 --> 00:36:10,960
but why

1052
00:36:10,960 --> 00:36:13,520
you have no context right

1053
00:36:13,520 --> 00:36:15,920
um because here here's the problem

1054
00:36:15,920 --> 00:36:17,520
the results really are all over the

1055
00:36:17,520 --> 00:36:19,680
place i mean i don't know what app they

1056
00:36:19,680 --> 00:36:21,280
use i don't know what language they're

1057
00:36:21,280 --> 00:36:23,839
using i don't even know if the

1058
00:36:23,839 --> 00:36:25,920
the attacks that they were sending were

1059
00:36:25,920 --> 00:36:28,240
on vulnerable components of the app that

1060
00:36:28,240 --> 00:36:30,800
they were using which make a big deal

1061
00:36:30,800 --> 00:36:32,720
for a rasp right

1062
00:36:32,720 --> 00:36:34,960
um so i can look at this and be like oh

1063
00:36:34,960 --> 00:36:37,359
let's see we the the rasp blocked more

1064
00:36:37,359 --> 00:36:40,160
xss that's good but is it i mean maybe i

1065
00:36:40,160 --> 00:36:43,280
don't know i don't have the context

1066
00:36:43,280 --> 00:36:45,200
yeah yeah the so the testing methods are

1067
00:36:45,200 --> 00:36:47,440
inconsistent

1068
00:36:47,440 --> 00:36:49,440
and to me the results don't really mean

1069
00:36:49,440 --> 00:36:51,359
a whole lot

1070
00:36:51,359 --> 00:36:54,560
um so we we dug in a little bit because

1071
00:36:54,560 --> 00:36:56,160
uh

1072
00:36:56,160 --> 00:36:57,680
a lot of folks are like oh we need a

1073
00:36:57,680 --> 00:36:59,520
bunch of payload lists we want to test

1074
00:36:59,520 --> 00:37:01,200
all these things we're like well there's

1075
00:37:01,200 --> 00:37:03,760
lots on the web you know github has tons

1076
00:37:03,760 --> 00:37:05,440
um so we've pulled them all in and we're

1077
00:37:05,440 --> 00:37:07,119
like let's just look at these payload

1078
00:37:07,119 --> 00:37:08,320
lists i'm going to tell you right now

1079
00:37:08,320 --> 00:37:11,440
they're terrible they're bad

1080
00:37:11,440 --> 00:37:14,640
xss 20 of the payload payloads in the

1081
00:37:14,640 --> 00:37:16,000
payload list were not valid or

1082
00:37:16,000 --> 00:37:19,119
duplicates sql injection about 27 not

1083
00:37:19,119 --> 00:37:21,200
valid when i say not valid they've never

1084
00:37:21,200 --> 00:37:24,240
resolved an actual exploit ever

1085
00:37:24,240 --> 00:37:27,200
command injection 48 were not valid

1086
00:37:27,200 --> 00:37:29,680
and patch reversal with 82 weren't

1087
00:37:29,680 --> 00:37:31,760
actually valid uh

1088
00:37:31,760 --> 00:37:33,920
so they're not only

1089
00:37:33,920 --> 00:37:35,839
testing them and hoping for the same

1090
00:37:35,839 --> 00:37:37,760
results out of them

1091
00:37:37,760 --> 00:37:40,560
they're testing them with bad data

1092
00:37:40,560 --> 00:37:42,079
so they're getting these results that

1093
00:37:42,079 --> 00:37:44,000
are all over the place and it really

1094
00:37:44,000 --> 00:37:45,520
hasn't

1095
00:37:45,520 --> 00:37:47,040
done much

1096
00:37:47,040 --> 00:37:48,800
other than confuse them of which one

1097
00:37:48,800 --> 00:37:50,240
they should buy when i believe they

1098
00:37:50,240 --> 00:37:53,040
should buy both i think you need both

1099
00:37:53,040 --> 00:37:55,119
i'm in security we need pieces of the

1100
00:37:55,119 --> 00:37:56,000
onion

1101
00:37:56,000 --> 00:37:57,520
and and we need different layers of

1102
00:37:57,520 --> 00:37:59,359
control and i want to talk about that

1103
00:37:59,359 --> 00:38:00,720
because that's really what the talk is

1104
00:38:00,720 --> 00:38:03,119
about so i wasted the first 37 minutes

1105
00:38:03,119 --> 00:38:05,040
talking about all the other stuff this

1106
00:38:05,040 --> 00:38:06,400
is the important stuff i want you to

1107
00:38:06,400 --> 00:38:08,480
listen to

1108
00:38:08,480 --> 00:38:11,680
i want us to use both waff and rasp and

1109
00:38:11,680 --> 00:38:12,960
little tidbits of what i've already

1110
00:38:12,960 --> 00:38:14,640
talked about uh

1111
00:38:14,640 --> 00:38:16,160
is why

1112
00:38:16,160 --> 00:38:17,359
um

1113
00:38:17,359 --> 00:38:18,960
so there are a lot of different

1114
00:38:18,960 --> 00:38:21,440
vulnerability types of being targeted by

1115
00:38:21,440 --> 00:38:22,480
attacks

1116
00:38:22,480 --> 00:38:25,760
um you know we see around 10 000 plus

1117
00:38:25,760 --> 00:38:27,680
attacks per application each month

1118
00:38:27,680 --> 00:38:28,800
that's a lot

1119
00:38:28,800 --> 00:38:29,960
um but

1120
00:38:29,960 --> 00:38:32,960
99.8 percent of those attacks

1121
00:38:32,960 --> 00:38:34,720
target vulnerabilities that aren't even

1122
00:38:34,720 --> 00:38:36,320
in the application

1123
00:38:36,320 --> 00:38:38,160
so those are things that a waf would

1124
00:38:38,160 --> 00:38:40,079
probably block

1125
00:38:40,079 --> 00:38:42,560
in some cases and maybe not but have no

1126
00:38:42,560 --> 00:38:44,560
context

1127
00:38:44,560 --> 00:38:46,800
and you know seven time increase over

1128
00:38:46,800 --> 00:38:48,079
you know this period this was made in

1129
00:38:48,079 --> 00:38:50,240
june of this year uh targeted command

1130
00:38:50,240 --> 00:38:52,480
injection uh but the reality is command

1131
00:38:52,480 --> 00:38:54,640
injection really isn't a problem in most

1132
00:38:54,640 --> 00:38:56,560
applications these days no one is

1133
00:38:56,560 --> 00:38:58,320
writing code that is dealing directly

1134
00:38:58,320 --> 00:39:00,320
with system commands

1135
00:39:00,320 --> 00:39:01,920
you know and four times the increase in

1136
00:39:01,920 --> 00:39:03,440
applications being targeted by broken

1137
00:39:03,440 --> 00:39:05,040
access control so you can see there's

1138
00:39:05,040 --> 00:39:07,680
all these different attack types and

1139
00:39:07,680 --> 00:39:09,359
the wife is good at someone the waff is

1140
00:39:09,359 --> 00:39:11,200
great at cross-state scripting i'm gonna

1141
00:39:11,200 --> 00:39:12,240
tell you it's probably better at

1142
00:39:12,240 --> 00:39:14,400
crosstalk scripting because

1143
00:39:14,400 --> 00:39:16,240
there are definitely signatures that can

1144
00:39:16,240 --> 00:39:17,760
be

1145
00:39:17,760 --> 00:39:19,839
in regular expressions and stuff for xss

1146
00:39:19,839 --> 00:39:22,079
that are just better and faster

1147
00:39:22,079 --> 00:39:24,320
but it's terrible expression language

1148
00:39:24,320 --> 00:39:25,520
injection

1149
00:39:25,520 --> 00:39:27,040
i would say it's not very good at things

1150
00:39:27,040 --> 00:39:29,200
like deserialization attacks you know

1151
00:39:29,200 --> 00:39:32,160
you can't really reject your way into

1152
00:39:32,160 --> 00:39:34,240
figuring out if this is a untrusted

1153
00:39:34,240 --> 00:39:36,000
deserialization attack

1154
00:39:36,000 --> 00:39:38,000
right so we have all these attack types

1155
00:39:38,000 --> 00:39:40,160
we have some technologies

1156
00:39:40,160 --> 00:39:41,920
and then we have other data we can look

1157
00:39:41,920 --> 00:39:43,839
at about like likelihoods like this is

1158
00:39:43,839 --> 00:39:46,400
data telling us okay well the likelihood

1159
00:39:46,400 --> 00:39:48,079
of your app to have a sql injection

1160
00:39:48,079 --> 00:39:50,720
vulnerability is about six percent

1161
00:39:50,720 --> 00:39:52,720
but the likelihood of that app to be

1162
00:39:52,720 --> 00:39:53,760
attacked

1163
00:39:53,760 --> 00:39:56,079
with sql injection is about 65

1164
00:39:56,079 --> 00:39:57,680
and you start looking at this i'm like

1165
00:39:57,680 --> 00:39:59,680
oh geez man this is this is some crazy

1166
00:39:59,680 --> 00:40:01,359
data look at command injection that's

1167
00:40:01,359 --> 00:40:03,119
the one that always draws my my

1168
00:40:03,119 --> 00:40:04,160
attention

1169
00:40:04,160 --> 00:40:07,359
point three percent of apps

1170
00:40:07,359 --> 00:40:09,280
have the likelihood of having a command

1171
00:40:09,280 --> 00:40:10,480
injection issue

1172
00:40:10,480 --> 00:40:13,119
management vulnerability 0.3

1173
00:40:13,119 --> 00:40:16,079
but 51 likelihood of being attacked by

1174
00:40:16,079 --> 00:40:17,599
command injection because the payout is

1175
00:40:17,599 --> 00:40:18,720
so large

1176
00:40:18,720 --> 00:40:20,319
um so i would take this and be like all

1177
00:40:20,319 --> 00:40:22,960
right well what is best at some of these

1178
00:40:22,960 --> 00:40:25,040
crosstalk scripting i would 100 throw a

1179
00:40:25,040 --> 00:40:26,800
laugh at it

1180
00:40:26,800 --> 00:40:29,040
expression language injection even sql

1181
00:40:29,040 --> 00:40:31,119
injections probably better uh with a

1182
00:40:31,119 --> 00:40:32,160
rasp

1183
00:40:32,160 --> 00:40:33,839
and then you can kind of mix and choose

1184
00:40:33,839 --> 00:40:35,440
and play with the different things that

1185
00:40:35,440 --> 00:40:39,520
each one of those technologies looks at

1186
00:40:39,520 --> 00:40:41,280
and so i always bring up equifax because

1187
00:40:41,280 --> 00:40:42,720
it's an interesting one to me but it's

1188
00:40:42,720 --> 00:40:45,520
not uncommon

1189
00:40:45,680 --> 00:40:49,119
and it's about how fast can we respond

1190
00:40:49,119 --> 00:40:52,640
so on march 7th of that year a cve was

1191
00:40:52,640 --> 00:40:56,160
released and disclosed that apache

1192
00:40:56,160 --> 00:40:59,839
had fixed a version of struts

1193
00:40:59,839 --> 00:41:01,680
and then a couple of months later

1194
00:41:01,680 --> 00:41:04,880
equifax equifax was breached

1195
00:41:04,880 --> 00:41:05,760
so

1196
00:41:05,760 --> 00:41:08,160
in that time period what could they have

1197
00:41:08,160 --> 00:41:09,920
done better well

1198
00:41:09,920 --> 00:41:11,680
they could have either a

1199
00:41:11,680 --> 00:41:15,280
tried to install a waff and updated it

1200
00:41:15,280 --> 00:41:16,800
uh that may or may not have detected

1201
00:41:16,800 --> 00:41:18,720
this specific attack or if they would

1202
00:41:18,720 --> 00:41:20,400
have had a rasp running

1203
00:41:20,400 --> 00:41:21,680
they would never have been breached in

1204
00:41:21,680 --> 00:41:23,280
the first place

1205
00:41:23,280 --> 00:41:24,480
right

1206
00:41:24,480 --> 00:41:27,839
um and the reality is is i like using

1207
00:41:27,839 --> 00:41:30,000
them both because the waff has known

1208
00:41:30,000 --> 00:41:32,720
bypasses and the rasp is hopefully going

1209
00:41:32,720 --> 00:41:35,599
to detect those when they're bypassed

1210
00:41:35,599 --> 00:41:37,680
but in this case alone

1211
00:41:37,680 --> 00:41:40,079
they obviously could not update very

1212
00:41:40,079 --> 00:41:42,400
quickly it took them until

1213
00:41:42,400 --> 00:41:44,400
uh you know basically september to

1214
00:41:44,400 --> 00:41:46,160
update right after they learned of the

1215
00:41:46,160 --> 00:41:49,440
breach in in july which is a huge

1216
00:41:49,440 --> 00:41:50,480
gap

1217
00:41:50,480 --> 00:41:52,079
uh where they could have solved this

1218
00:41:52,079 --> 00:41:54,640
problem if they were using a technology

1219
00:41:54,640 --> 00:41:57,119
with waff and rasp

1220
00:41:57,119 --> 00:41:58,720
and there's there's other ones here

1221
00:41:58,720 --> 00:42:00,800
right right there's wife bypasses that

1222
00:42:00,800 --> 00:42:03,680
could help with the the confluence issue

1223
00:42:03,680 --> 00:42:05,839
uh i don't know if anyone saw the recent

1224
00:42:05,839 --> 00:42:08,000
one about the scientific notation bug

1225
00:42:08,000 --> 00:42:10,000
there's no way that a waff would have

1226
00:42:10,000 --> 00:42:11,200
detected that

1227
00:42:11,200 --> 00:42:13,119
no way

1228
00:42:13,119 --> 00:42:15,839
in my sequel left uh aws waf clients

1229
00:42:15,839 --> 00:42:17,119
vulnerable which would have been

1230
00:42:17,119 --> 00:42:19,760
detected and blocked by harass because

1231
00:42:19,760 --> 00:42:22,079
it sees the the tokenization and the

1232
00:42:22,079 --> 00:42:24,319
context changing

1233
00:42:24,319 --> 00:42:26,480
this is why i think we need to do both

1234
00:42:26,480 --> 00:42:28,880
i bring up this how many of you would

1235
00:42:28,880 --> 00:42:32,960
want to choose a seat belt or an airbag

1236
00:42:32,960 --> 00:42:36,160
we use them both why

1237
00:42:38,160 --> 00:42:39,839
it's more better right

1238
00:42:39,839 --> 00:42:41,599
you have one for that comfort of the

1239
00:42:41,599 --> 00:42:42,880
right now even though it's annoying

1240
00:42:42,880 --> 00:42:44,800
sometimes if you break hard and it gets

1241
00:42:44,800 --> 00:42:46,160
locked you know

1242
00:42:46,160 --> 00:42:47,680
and then you have the one for the oh

1243
00:42:47,680 --> 00:42:49,119
 moment when you actually hit

1244
00:42:49,119 --> 00:42:51,680
something and it supposedly helps

1245
00:42:51,680 --> 00:42:52,960
protect you even though it may break

1246
00:42:52,960 --> 00:42:55,200
your nose it's going to protect you

1247
00:42:55,200 --> 00:42:56,560
so it's the prevention and the

1248
00:42:56,560 --> 00:42:58,960
protection all built into one package

1249
00:42:58,960 --> 00:43:01,119
but it's two different technologies

1250
00:43:01,119 --> 00:43:02,720
whereas before we didn't really have

1251
00:43:02,720 --> 00:43:04,400
both the heck we didn't have seat belts

1252
00:43:04,400 --> 00:43:06,960
back in the day

1253
00:43:08,880 --> 00:43:11,440
you tell me

1254
00:43:11,760 --> 00:43:13,760
to me rasp is the airbag

1255
00:43:13,760 --> 00:43:15,839
because it only hap it only goes off

1256
00:43:15,839 --> 00:43:19,440
when there's a serious problem right

1257
00:43:19,440 --> 00:43:23,280
and the waffle locks up randomly

1258
00:43:23,760 --> 00:43:26,400
but it has its purpose right

1259
00:43:26,400 --> 00:43:28,480
it has its purpose you know one of them

1260
00:43:28,480 --> 00:43:30,160
may fail

1261
00:43:30,160 --> 00:43:32,640
and and thankfully you have both of them

1262
00:43:32,640 --> 00:43:34,880
so here's that that slide where i kind

1263
00:43:34,880 --> 00:43:36,960
of contrast and compare

1264
00:43:36,960 --> 00:43:38,240
the two

1265
00:43:38,240 --> 00:43:40,319
because i do think that they work very

1266
00:43:40,319 --> 00:43:42,240
well together based on their their

1267
00:43:42,240 --> 00:43:44,640
strengths and weaknesses of each of them

1268
00:43:44,640 --> 00:43:46,240
you know your laugh you have alert

1269
00:43:46,240 --> 00:43:48,319
fatigue issues false positive false

1270
00:43:48,319 --> 00:43:50,880
negatives patching and tuning gets to be

1271
00:43:50,880 --> 00:43:53,200
a lot there's no actionable results

1272
00:43:53,200 --> 00:43:54,880
there's really nothing you can do other

1273
00:43:54,880 --> 00:43:55,760
than

1274
00:43:55,760 --> 00:43:57,920
validate that yes traffic was blocked

1275
00:43:57,920 --> 00:43:59,920
and i need to change something

1276
00:43:59,920 --> 00:44:02,240
and it has no context data

1277
00:44:02,240 --> 00:44:03,680
when it comes to that

1278
00:44:03,680 --> 00:44:06,160
rasp has really good strengths that

1279
00:44:06,160 --> 00:44:08,880
compare to those weaknesses it's very

1280
00:44:08,880 --> 00:44:10,640
accurate and to the point where there's

1281
00:44:10,640 --> 00:44:12,079
often no results

1282
00:44:12,079 --> 00:44:14,240
very little tuning retire required and

1283
00:44:14,240 --> 00:44:15,839
there's gap coverage while laugh is

1284
00:44:15,839 --> 00:44:16,960
patched

1285
00:44:16,960 --> 00:44:20,079
actionable results uh showing the exact

1286
00:44:20,079 --> 00:44:22,560
code path that's vulnerable so now i can

1287
00:44:22,560 --> 00:44:23,920
action it

1288
00:44:23,920 --> 00:44:26,400
and then it has a very very good context

1289
00:44:26,400 --> 00:44:29,040
in application-aware data

1290
00:44:29,040 --> 00:44:31,839
and so if we look at the rasp weaknesses

1291
00:44:31,839 --> 00:44:33,760
it does have performance impacts i've

1292
00:44:33,760 --> 00:44:35,920
seen anywhere from zero to ten percent

1293
00:44:35,920 --> 00:44:39,280
it just depends on that application

1294
00:44:39,280 --> 00:44:40,640
how how much

1295
00:44:40,640 --> 00:44:43,200
memory it's allocated how old it is i

1296
00:44:43,200 --> 00:44:44,640
mean there's just so many factors

1297
00:44:44,640 --> 00:44:46,160
because it's very framework and language

1298
00:44:46,160 --> 00:44:48,160
specific so there is definitely a

1299
00:44:48,160 --> 00:44:49,680
performance impact

1300
00:44:49,680 --> 00:44:52,000
when it comes to rasp it's very language

1301
00:44:52,000 --> 00:44:54,400
and framework specific specific

1302
00:44:54,400 --> 00:44:57,119
which means if you've pulled down struts

1303
00:44:57,119 --> 00:44:58,800
or spring and

1304
00:44:58,800 --> 00:45:00,000
totally

1305
00:45:00,000 --> 00:45:02,319
pulled it apart and wrote your own

1306
00:45:02,319 --> 00:45:04,319
it rafts isn't probably going to be the

1307
00:45:04,319 --> 00:45:06,880
answer for you unfortunately um it's not

1308
00:45:06,880 --> 00:45:09,200
environment aware right so it's in the

1309
00:45:09,200 --> 00:45:11,760
app so anything that happens before that

1310
00:45:11,760 --> 00:45:14,240
it knows nothing about

1311
00:45:14,240 --> 00:45:17,440
which sometimes can create problems

1312
00:45:17,440 --> 00:45:19,440
bypass fixes typically do require an

1313
00:45:19,440 --> 00:45:22,160
application restart which sometimes

1314
00:45:22,160 --> 00:45:24,079
people don't like as well because you

1315
00:45:24,079 --> 00:45:26,160
gotta pull in the new agent get that

1316
00:45:26,160 --> 00:45:28,640
loaded get things reinstrumented

1317
00:45:28,640 --> 00:45:30,400
but the waf on the other hand has some

1318
00:45:30,400 --> 00:45:32,079
strengths to counteract some of that

1319
00:45:32,079 --> 00:45:34,240
performance is not an issue so if you

1320
00:45:34,240 --> 00:45:36,560
get the waff looking at the things that

1321
00:45:36,560 --> 00:45:39,760
it can do better ddos protection xss you

1322
00:45:39,760 --> 00:45:42,079
know maybe some cve patches that are

1323
00:45:42,079 --> 00:45:43,760
like immediate

1324
00:45:43,760 --> 00:45:45,520
it's language agnostic it doesn't matter

1325
00:45:45,520 --> 00:45:47,920
what language that your backend is using

1326
00:45:47,920 --> 00:45:49,040
right

1327
00:45:49,040 --> 00:45:50,720
it's more environment aware because it's

1328
00:45:50,720 --> 00:45:52,319
at that layer it's outside of the

1329
00:45:52,319 --> 00:45:54,079
application

1330
00:45:54,079 --> 00:45:54,800
and

1331
00:45:54,800 --> 00:45:56,560
patches are applied to the perimeter and

1332
00:45:56,560 --> 00:45:58,839
there's no app

1333
00:45:58,839 --> 00:46:01,200
restart so i do think that they work

1334
00:46:01,200 --> 00:46:03,280
very well together um you know they

1335
00:46:03,280 --> 00:46:04,880
complement each other

1336
00:46:04,880 --> 00:46:07,760
uh i think we should be using them both

1337
00:46:07,760 --> 00:46:09,599
in cases where we can

1338
00:46:09,599 --> 00:46:12,240
um you know just understanding how

1339
00:46:12,240 --> 00:46:15,119
difficult it is for us to secure an

1340
00:46:15,119 --> 00:46:17,920
application environment

1341
00:46:17,920 --> 00:46:21,200
i i love these in in

1342
00:46:21,200 --> 00:46:23,280
in line in a production environment to

1343
00:46:23,280 --> 00:46:24,240
help

1344
00:46:24,240 --> 00:46:25,359
protect

1345
00:46:25,359 --> 00:46:27,040
from the application weaknesses that we

1346
00:46:27,040 --> 00:46:28,960
know exist we know we're developing and

1347
00:46:28,960 --> 00:46:30,960
deploying code to prod that have

1348
00:46:30,960 --> 00:46:32,960
vulnerabilities we know it

1349
00:46:32,960 --> 00:46:33,920
um

1350
00:46:33,920 --> 00:46:36,160
and you know if if i just had a laugh

1351
00:46:36,160 --> 00:46:38,319
there i wouldn't be comfortable

1352
00:46:38,319 --> 00:46:40,560
enough to put that in prod

1353
00:46:40,560 --> 00:46:43,040
but having both would would help

1354
00:46:43,040 --> 00:46:44,400
so there's a lot of vendors in this

1355
00:46:44,400 --> 00:46:47,599
space uh i love absent map by the way

1356
00:46:47,599 --> 00:46:49,760
i'm a cso i look at it all the time i'm

1357
00:46:49,760 --> 00:46:51,119
always looking at different products and

1358
00:46:51,119 --> 00:46:52,319
different things

1359
00:46:52,319 --> 00:46:54,000
it's got all the different types of apps

1360
00:46:54,000 --> 00:46:56,400
like tools you can think of

1361
00:46:56,400 --> 00:46:58,319
and here are just a few of the laugh and

1362
00:46:58,319 --> 00:47:00,640
rasp vendors that that are available out

1363
00:47:00,640 --> 00:47:02,400
there today

1364
00:47:02,400 --> 00:47:04,160
you know i definitely would would take a

1365
00:47:04,160 --> 00:47:05,839
look at them

1366
00:47:05,839 --> 00:47:07,520
if you're not using either of them i

1367
00:47:07,520 --> 00:47:10,720
highly suggest finding one to use first

1368
00:47:10,720 --> 00:47:12,720
and getting your feet wet

1369
00:47:12,720 --> 00:47:13,599
but

1370
00:47:13,599 --> 00:47:16,640
that's it um that's my talk

1371
00:47:16,640 --> 00:47:18,400
questions comments

1372
00:47:18,400 --> 00:47:19,680
yeah

1373
00:47:19,680 --> 00:47:20,800
so would it

1374
00:47:20,800 --> 00:47:22,160
be true then

1375
00:47:22,160 --> 00:47:24,720
a laugh

1376
00:47:28,160 --> 00:47:30,800
not quite so think about it this way so

1377
00:47:30,800 --> 00:47:32,720
for those of you that have like an iis

1378
00:47:32,720 --> 00:47:34,720
microsoft environment you may have a

1379
00:47:34,720 --> 00:47:37,200
server that's running 50 applications

1380
00:47:37,200 --> 00:47:40,319
you can install one rasp agent on that

1381
00:47:40,319 --> 00:47:42,240
iis server and it protects all the

1382
00:47:42,240 --> 00:47:46,240
applications in that vm if you will

1383
00:47:46,240 --> 00:47:46,960
but

1384
00:47:46,960 --> 00:47:49,760
with an a waf you may be able to put

1385
00:47:49,760 --> 00:47:51,680
that in front of your entire environment

1386
00:47:51,680 --> 00:47:54,160
you know way outside if it will work for

1387
00:47:54,160 --> 00:47:56,160
you that way and protect everything but

1388
00:47:56,160 --> 00:47:59,200
whatever's in that vm so a lot of uh

1389
00:47:59,200 --> 00:48:00,319
java

1390
00:48:00,319 --> 00:48:02,559
customers have lots of apps in a single

1391
00:48:02,559 --> 00:48:05,280
vm it will protect all of the rasp would

1392
00:48:05,280 --> 00:48:06,240
yeah only if you have the

1393
00:48:06,240 --> 00:48:08,720
instrumentation

1394
00:48:08,720 --> 00:48:10,240
no you don't have to change your code at

1395
00:48:10,240 --> 00:48:11,119
all

1396
00:48:11,119 --> 00:48:13,839
that's the great thing about rasp um so

1397
00:48:13,839 --> 00:48:15,359
i always use java because that's the one

1398
00:48:15,359 --> 00:48:17,359
i know the well the best but

1399
00:48:17,359 --> 00:48:20,000
there's a java agent so it's a jvm

1400
00:48:20,000 --> 00:48:22,400
parameter you just link it to the rasp

1401
00:48:22,400 --> 00:48:24,880
agent and it automatically loads it when

1402
00:48:24,880 --> 00:48:26,880
it loads the jvm and your code is

1403
00:48:26,880 --> 00:48:28,160
automatically instrumented so you're not

1404
00:48:28,160 --> 00:48:32,240
making any application changes yeah

1405
00:48:32,839 --> 00:48:35,599
um mentioned java quite a few times you

1406
00:48:35,599 --> 00:48:37,280
get like a c

1407
00:48:37,280 --> 00:48:40,079
yeah so well i i mean i only know

1408
00:48:40,079 --> 00:48:43,079
we have some raspberry rest vendor but

1409
00:48:43,079 --> 00:48:45,040
java.net.net core

1410
00:48:45,040 --> 00:48:46,160
go

1411
00:48:46,160 --> 00:48:47,280
ruby

1412
00:48:47,280 --> 00:48:49,359
python and node

1413
00:48:49,359 --> 00:48:53,520
uh but uh there's more coming i mean

1414
00:48:53,520 --> 00:48:55,040
like if you're using something like a

1415
00:48:55,040 --> 00:48:56,559
containerized environment you know with

1416
00:48:56,559 --> 00:48:58,319
a service router that sits behind like a

1417
00:48:58,319 --> 00:49:00,160
load balancer

1418
00:49:00,160 --> 00:49:03,040
is that where you would

1419
00:49:03,040 --> 00:49:04,240
well the rasp has to be running where

1420
00:49:04,240 --> 00:49:06,000
your application is so like if you're

1421
00:49:06,000 --> 00:49:07,680
using kubernetes you know inside of the

1422
00:49:07,680 --> 00:49:08,960
pod or whatever

1423
00:49:08,960 --> 00:49:11,280
it's part of the vm wherever your

1424
00:49:11,280 --> 00:49:13,040
application is running like where's that

1425
00:49:13,040 --> 00:49:14,640
running we see it used a lot in

1426
00:49:14,640 --> 00:49:16,400
microservices too where it's

1427
00:49:16,400 --> 00:49:18,800
instrumenting the microservice itself

1428
00:49:18,800 --> 00:49:20,800
but it has to be running where the

1429
00:49:20,800 --> 00:49:22,400
actual app is running wherever that may

1430
00:49:22,400 --> 00:49:23,760
be so where you're running the java

1431
00:49:23,760 --> 00:49:26,480
virtual machine

1432
00:49:29,200 --> 00:49:30,400
i'm sorry i can't hear you can you

1433
00:49:30,400 --> 00:49:32,559
certain aws appliance for the rest it's

1434
00:49:32,559 --> 00:49:35,280
like can you just get it up and it's on

1435
00:49:35,280 --> 00:49:37,280
no there's not because you have to

1436
00:49:37,280 --> 00:49:39,359
actually ins that's why it's a little

1437
00:49:39,359 --> 00:49:40,800
harder to install you have to install it

1438
00:49:40,800 --> 00:49:43,440
with every single application

1439
00:49:43,440 --> 00:49:45,119
right or every i don't say every

1440
00:49:45,119 --> 00:49:47,839
application every virtual machine

1441
00:49:47,839 --> 00:49:50,960
containers yes

1442
00:49:54,720 --> 00:49:55,839
so

1443
00:49:55,839 --> 00:49:59,599
land is an interesting one um i haven't

1444
00:49:59,599 --> 00:50:02,480
we're looking at like creating a

1445
00:50:02,480 --> 00:50:03,680
layer

1446
00:50:03,680 --> 00:50:06,160
that would do all of that and instrument

1447
00:50:06,160 --> 00:50:07,520
in that layer

1448
00:50:07,520 --> 00:50:08,800
and i think that's probably the right

1449
00:50:08,800 --> 00:50:10,160
approach for that

1450
00:50:10,160 --> 00:50:11,599
but i don't think anyone's doing that

1451
00:50:11,599 --> 00:50:13,839
today

1452
00:50:14,960 --> 00:50:16,240
great question

1453
00:50:16,240 --> 00:50:18,799
anyone else

1454
00:50:18,960 --> 00:50:21,030
awesome thank you

1455
00:50:21,030 --> 00:50:25,449
[Applause]

