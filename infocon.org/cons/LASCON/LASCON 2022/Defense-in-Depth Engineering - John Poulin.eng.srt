1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:54,260
[Music]

6
00:00:54,260 --> 00:00:57,140
defense in-depth engineering

7
00:00:57,140 --> 00:00:59,520
this is kind of an interesting topic why

8
00:00:59,520 --> 00:01:01,140
are we talking about defense and depth

9
00:01:01,140 --> 00:01:03,780
aren't there bigger problems for us to

10
00:01:03,780 --> 00:01:05,459
be solving

11
00:01:05,459 --> 00:01:07,380
um this is interesting as Jim pointed

12
00:01:07,380 --> 00:01:08,760
out in the keynote this morning we're

13
00:01:08,760 --> 00:01:12,299
kind of at a new era of appsack we have

14
00:01:12,299 --> 00:01:14,280
static analysis tools that are solving a

15
00:01:14,280 --> 00:01:15,780
lot of our problems for us but what

16
00:01:15,780 --> 00:01:17,340
types of things are not being solved by

17
00:01:17,340 --> 00:01:19,320
Static analysis tools what things are

18
00:01:19,320 --> 00:01:21,420
often overlooked by consulting firms

19
00:01:21,420 --> 00:01:24,780
when I think of defense and depth I

20
00:01:24,780 --> 00:01:27,360
think of controls that may often be

21
00:01:27,360 --> 00:01:30,299
overlooked and folks are generally aware

22
00:01:30,299 --> 00:01:31,860
that security is an onion and I hate

23
00:01:31,860 --> 00:01:33,960
using that term technology but there's

24
00:01:33,960 --> 00:01:36,659
layers to it so defense in depth is is

25
00:01:36,659 --> 00:01:38,400
about having several different layers

26
00:01:38,400 --> 00:01:39,420
there

27
00:01:39,420 --> 00:01:41,100
now it's easy to say everything is

28
00:01:41,100 --> 00:01:43,140
defense in depth and in some ways that's

29
00:01:43,140 --> 00:01:46,140
effectively true

30
00:01:46,140 --> 00:01:51,479
so 2021 olasp introduced uh insecure

31
00:01:51,479 --> 00:01:54,119
design to the OAS top 10. in my opinion

32
00:01:54,119 --> 00:01:56,640
that's a huge win and I'm sure

33
00:01:56,640 --> 00:01:58,140
everyone's heard the buzz of Shifting

34
00:01:58,140 --> 00:02:00,600
left that's been a big big term for me

35
00:02:00,600 --> 00:02:01,619
lately

36
00:02:01,619 --> 00:02:03,600
and so when I started thinking about

37
00:02:03,600 --> 00:02:05,340
giving a talk on insecure design the

38
00:02:05,340 --> 00:02:07,020
first thing I did was reach out to one

39
00:02:07,020 --> 00:02:08,520
of my colleagues who's a designer and

40
00:02:08,520 --> 00:02:11,099
say hey I'm giving a talk on design do

41
00:02:11,099 --> 00:02:12,660
you mind doing some stuff for me some

42
00:02:12,660 --> 00:02:15,540
art and so he he introduced Scully skate

43
00:02:15,540 --> 00:02:17,220
shop so there's going to be a little bit

44
00:02:17,220 --> 00:02:19,080
of relevance here

45
00:02:19,080 --> 00:02:20,819
um but clearly he had no idea I was

46
00:02:20,819 --> 00:02:22,440
talking about security design and not

47
00:02:22,440 --> 00:02:25,500
actual other other graphic design and

48
00:02:25,500 --> 00:02:29,780
such so the OAS top 10 insecure design

49
00:02:29,780 --> 00:02:34,140
is to focus on risks related to design

50
00:02:34,140 --> 00:02:37,020
process and to call for more use of

51
00:02:37,020 --> 00:02:39,000
things such as threat modeling secure

52
00:02:39,000 --> 00:02:40,920
design patterns and reference

53
00:02:40,920 --> 00:02:43,140
architectures and this is where we're

54
00:02:43,140 --> 00:02:44,700
starting to see a lot of the industry

55
00:02:44,700 --> 00:02:46,560
shifting in fact there's there's talks

56
00:02:46,560 --> 00:02:47,760
here on threat modeling there's

57
00:02:47,760 --> 00:02:50,099
trainings on threat modeling I walked in

58
00:02:50,099 --> 00:02:51,720
at the end of the talk here and someone

59
00:02:51,720 --> 00:02:53,280
was talking about threat modeling as

60
00:02:53,280 --> 00:02:54,780
well so everyone's talking about threat

61
00:02:54,780 --> 00:02:56,760
modeling hopefully folks are doing it

62
00:02:56,760 --> 00:02:58,140
I'm not here to talk about threat

63
00:02:58,140 --> 00:02:59,879
modeling

64
00:02:59,879 --> 00:03:01,860
so before we get too far let me

65
00:03:01,860 --> 00:03:03,900
introduce myself uh my name is John

66
00:03:03,900 --> 00:03:07,140
Poulin I'm forced request or forced

67
00:03:07,140 --> 00:03:09,000
underscore request depending on where

68
00:03:09,000 --> 00:03:11,700
you look for me on the internet I am a

69
00:03:11,700 --> 00:03:13,620
manager of product security engineering

70
00:03:13,620 --> 00:03:16,080
at GitHub my team focuses on basically

71
00:03:16,080 --> 00:03:19,080
internal Consulting secure code uh

72
00:03:19,080 --> 00:03:21,239
review a little bit of threat modeling

73
00:03:21,239 --> 00:03:23,220
architecture design things of that

74
00:03:23,220 --> 00:03:24,599
nature

75
00:03:24,599 --> 00:03:26,340
um so I like to say I manage a team who

76
00:03:26,340 --> 00:03:27,780
hacks things now I'm not quite as

77
00:03:27,780 --> 00:03:30,659
technical as I I was a few years ago

78
00:03:30,659 --> 00:03:32,760
um before I moved to GitHub I was a

79
00:03:32,760 --> 00:03:34,560
consultant and there I spent a lot of

80
00:03:34,560 --> 00:03:36,239
time doing technical work a lot of

81
00:03:36,239 --> 00:03:38,000
secure code review a lot of pen testing

82
00:03:38,000 --> 00:03:40,500
and even before that I worked as a

83
00:03:40,500 --> 00:03:42,360
software engineer and I like to make the

84
00:03:42,360 --> 00:03:44,159
joke that as a software engineer I wrote

85
00:03:44,159 --> 00:03:45,720
things that were hacked we know that's

86
00:03:45,720 --> 00:03:47,400
not true none of my code was ever

87
00:03:47,400 --> 00:03:50,459
compromised right but now I wish that

88
00:03:50,459 --> 00:03:52,379
was the case

89
00:03:52,379 --> 00:03:54,480
um so yeah I'm excited to give this talk

90
00:03:54,480 --> 00:03:56,580
I've never given this talk before it's

91
00:03:56,580 --> 00:03:57,900
something I've been thinking about a lot

92
00:03:57,900 --> 00:04:01,440
at work so hopefully folks enjoy

93
00:04:01,440 --> 00:04:03,540
and with any luck there will be time for

94
00:04:03,540 --> 00:04:05,099
questions at the end if not catch me in

95
00:04:05,099 --> 00:04:06,780
the hallway I know standing between

96
00:04:06,780 --> 00:04:10,260
folks and lunch at 11 30 so pretty

97
00:04:10,260 --> 00:04:13,260
challenging spot to be in up here

98
00:04:13,260 --> 00:04:14,939
the first thing I want to talk about

99
00:04:14,939 --> 00:04:17,339
there's kind of four main categories of

100
00:04:17,339 --> 00:04:20,399
this talk and the first one is to uh

101
00:04:20,399 --> 00:04:23,100
design for incidents I'm only talking

102
00:04:23,100 --> 00:04:24,540
about this because one of our incident

103
00:04:24,540 --> 00:04:26,160
responders at GitHub is sitting in the

104
00:04:26,160 --> 00:04:27,840
audience here so I wanted to make sure

105
00:04:27,840 --> 00:04:30,660
that their work was included as well

106
00:04:30,660 --> 00:04:32,699
um so becoming friends with your

107
00:04:32,699 --> 00:04:34,620
incident response team who here works on

108
00:04:34,620 --> 00:04:36,780
an incident response team at all

109
00:04:36,780 --> 00:04:39,960
okay okay a few who here are engineers

110
00:04:39,960 --> 00:04:42,840
in some capacity you're writing code

111
00:04:42,840 --> 00:04:45,060
all right more so make sure you all are

112
00:04:45,060 --> 00:04:46,440
friends with your incident response

113
00:04:46,440 --> 00:04:48,800
teams

114
00:04:49,080 --> 00:04:53,220
so when I think about engineering and I

115
00:04:53,220 --> 00:04:54,540
think about design one of the first

116
00:04:54,540 --> 00:04:56,940
things that comes to my mind is to

117
00:04:56,940 --> 00:04:58,560
really understand the risk of your

118
00:04:58,560 --> 00:05:00,360
system most of the systems we're

119
00:05:00,360 --> 00:05:02,400
building are not for fun there's actual

120
00:05:02,400 --> 00:05:03,720
business purposes they're going to be

121
00:05:03,720 --> 00:05:06,180
handling certain types of data so if I

122
00:05:06,180 --> 00:05:08,220
ask you what's the riskiest type of data

123
00:05:08,220 --> 00:05:10,380
that your system is handling are you

124
00:05:10,380 --> 00:05:12,300
able to are you able to tell me do you

125
00:05:12,300 --> 00:05:15,240
even know sometimes if you're working in

126
00:05:15,240 --> 00:05:17,460
a large company you may not really know

127
00:05:17,460 --> 00:05:19,740
what types of data you're handling so

128
00:05:19,740 --> 00:05:21,120
it's super important to have an

129
00:05:21,120 --> 00:05:23,699
understanding of of what that is as an

130
00:05:23,699 --> 00:05:26,100
engineer this generally is stuff like

131
00:05:26,100 --> 00:05:28,740
billing information pii

132
00:05:28,740 --> 00:05:30,539
Etc whatever your company considers

133
00:05:30,539 --> 00:05:33,180
sensitive you should at least have a

134
00:05:33,180 --> 00:05:34,680
general understanding of that but more

135
00:05:34,680 --> 00:05:37,259
importantly make sure that is documented

136
00:05:37,259 --> 00:05:40,620
right if you are investigating some

137
00:05:40,620 --> 00:05:42,539
micro service that's hidden in the back

138
00:05:42,539 --> 00:05:44,639
corner of your data center

139
00:05:44,639 --> 00:05:46,380
as an incident responder you're going to

140
00:05:46,380 --> 00:05:47,639
want to know what type of data is

141
00:05:47,639 --> 00:05:49,139
intended to be flowing through that

142
00:05:49,139 --> 00:05:51,060
service right and if that's not

143
00:05:51,060 --> 00:05:53,280
documented somewhere suddenly you have

144
00:05:53,280 --> 00:05:55,199
to go find an owner of the system you

145
00:05:55,199 --> 00:05:56,699
have to talk to them hopefully they

146
00:05:56,699 --> 00:05:59,039
understand and it really complicates the

147
00:05:59,039 --> 00:06:01,380
process so a lot of this can be solved

148
00:06:01,380 --> 00:06:04,500
by having data dictionaries well-defined

149
00:06:04,500 --> 00:06:06,800
data dictionaries things of that nature

150
00:06:06,800 --> 00:06:09,720
and then also making sure that as you're

151
00:06:09,720 --> 00:06:11,340
writing code you're keeping an

152
00:06:11,340 --> 00:06:14,460
up-to-date data flow diagram or uml

153
00:06:14,460 --> 00:06:18,419
diagrams that are stored in accessible

154
00:06:18,419 --> 00:06:19,860
places

155
00:06:19,860 --> 00:06:22,820
super important

156
00:06:22,860 --> 00:06:24,360
okay

157
00:06:24,360 --> 00:06:27,900
so build a plan of action for those of

158
00:06:27,900 --> 00:06:29,580
us who work in smaller companies there's

159
00:06:29,580 --> 00:06:30,960
a good chance you don't have an incident

160
00:06:30,960 --> 00:06:33,000
response team so what's going to happen

161
00:06:33,000 --> 00:06:36,840
if your product or project is undergoing

162
00:06:36,840 --> 00:06:38,940
an active compromise for instance who's

163
00:06:38,940 --> 00:06:41,100
going to be handling that

164
00:06:41,100 --> 00:06:43,919
um what um what are you going to do in

165
00:06:43,919 --> 00:06:46,199
those situations if you do have an IR

166
00:06:46,199 --> 00:06:48,539
team work with them to understand what

167
00:06:48,539 --> 00:06:50,460
the logging capability should be what do

168
00:06:50,460 --> 00:06:53,280
you need from a Telemetry perspective to

169
00:06:53,280 --> 00:06:56,520
know what's what's going on what data

170
00:06:56,520 --> 00:06:58,440
should be logged do you want to be

171
00:06:58,440 --> 00:07:00,660
logging your most sensitive data such as

172
00:07:00,660 --> 00:07:02,460
user addresses

173
00:07:02,460 --> 00:07:04,860
that's another question

174
00:07:04,860 --> 00:07:06,900
um so working with the IR team

175
00:07:06,900 --> 00:07:08,699
can really help you understand what type

176
00:07:08,699 --> 00:07:11,100
of data should be logged so that you can

177
00:07:11,100 --> 00:07:14,580
have a successful incident response uh

178
00:07:14,580 --> 00:07:16,560
engagement and then the other question

179
00:07:16,560 --> 00:07:18,419
that comes into play a lot and maybe

180
00:07:18,419 --> 00:07:20,160
this doesn't necessarily fall into the

181
00:07:20,160 --> 00:07:22,139
engineering shoulder so much but how

182
00:07:22,139 --> 00:07:24,240
long should those logs live do you have

183
00:07:24,240 --> 00:07:25,979
compliance requirements that dictate you

184
00:07:25,979 --> 00:07:28,380
need your logs to live for a year maybe

185
00:07:28,380 --> 00:07:30,780
it's two weeks what happens if you keep

186
00:07:30,780 --> 00:07:33,840
your lungs longer your logs longer than

187
00:07:33,840 --> 00:07:35,419
that time period

188
00:07:35,419 --> 00:07:37,800
lots of things to consider and so

189
00:07:37,800 --> 00:07:39,539
working with your IR team or your

190
00:07:39,539 --> 00:07:41,160
compliance team can really help you

191
00:07:41,160 --> 00:07:42,720
understand what those considerations

192
00:07:42,720 --> 00:07:44,360
need to look like

193
00:07:44,360 --> 00:07:47,039
understanding expectations during

194
00:07:47,039 --> 00:07:49,979
incident response incident response can

195
00:07:49,979 --> 00:07:51,780
be pretty sweaty I'm glad that's not my

196
00:07:51,780 --> 00:07:53,759
job sorry Alex hopefully I'm able to

197
00:07:53,759 --> 00:07:56,220
help you and you're doing it this is

198
00:07:56,220 --> 00:07:59,520
stressful stuff right as Engineers

199
00:07:59,520 --> 00:08:01,080
sometimes we're brought into the war

200
00:08:01,080 --> 00:08:03,000
room and then we're sweaty because we're

201
00:08:03,000 --> 00:08:04,199
trying to help figure out what's going

202
00:08:04,199 --> 00:08:06,660
on we're trying to help fix things

203
00:08:06,660 --> 00:08:08,160
um and then in the back of my mind I'm

204
00:08:08,160 --> 00:08:09,240
always thinking about okay is there

205
00:08:09,240 --> 00:08:10,740
going to be Public Communication about

206
00:08:10,740 --> 00:08:12,180
this are we going to need to share this

207
00:08:12,180 --> 00:08:14,220
with the public at GitHub that happens

208
00:08:14,220 --> 00:08:17,460
right so super sweaty even with an IR

209
00:08:17,460 --> 00:08:19,740
team and then if you're not fortunate

210
00:08:19,740 --> 00:08:21,900
enough to have an IR team chances are

211
00:08:21,900 --> 00:08:23,039
you're going to be handling all this

212
00:08:23,039 --> 00:08:25,379
stuff yourself so what can you do from

213
00:08:25,379 --> 00:08:27,720
an engineering perspective

214
00:08:27,720 --> 00:08:29,879
um you really need to take ownership you

215
00:08:29,879 --> 00:08:32,159
need to fully understand your product

216
00:08:32,159 --> 00:08:34,620
and be aware of these potential gaps and

217
00:08:34,620 --> 00:08:36,539
so I always recommend building uh

218
00:08:36,539 --> 00:08:38,880
playbooks to help out even with an IR

219
00:08:38,880 --> 00:08:41,339
team you need to have playbooks but if

220
00:08:41,339 --> 00:08:43,140
you are an engineer without an IR team

221
00:08:43,140 --> 00:08:45,000
available playbooks are going to be even

222
00:08:45,000 --> 00:08:47,660
more important

223
00:08:48,240 --> 00:08:51,000
being prepared to own the outcome

224
00:08:51,000 --> 00:08:52,500
um when I talk about communication

225
00:08:52,500 --> 00:08:54,779
public comps I always come back to this

226
00:08:54,779 --> 00:08:57,380
particular incident so this is from 2021

227
00:08:57,380 --> 00:08:59,940
where we GitHub started receiving

228
00:08:59,940 --> 00:09:03,680
reports that users were uh basically

229
00:09:03,680 --> 00:09:06,779
accessing other user sessions and this

230
00:09:06,779 --> 00:09:09,600
was a super difficult one to track down

231
00:09:09,600 --> 00:09:12,540
I was lucky because I was on PTO during

232
00:09:12,540 --> 00:09:15,319
this so

233
00:09:16,140 --> 00:09:18,600
so I came back and I'm like wow what is

234
00:09:18,600 --> 00:09:21,540
going on here so in this case we there

235
00:09:21,540 --> 00:09:23,940
was a rare uh security vulnerability we

236
00:09:23,940 --> 00:09:26,459
talked about all this uh publicly

237
00:09:26,459 --> 00:09:28,500
um we fixed it it took a lot of

238
00:09:28,500 --> 00:09:30,120
engineering talent to figure this out

239
00:09:30,120 --> 00:09:32,040
and I I was in those shoes I probably

240
00:09:32,040 --> 00:09:33,360
never would have figured this out so I'm

241
00:09:33,360 --> 00:09:35,760
glad we have some really smart folks

242
00:09:35,760 --> 00:09:38,640
um and there there were customers

243
00:09:38,640 --> 00:09:40,920
affected and we weren't sure how many so

244
00:09:40,920 --> 00:09:42,480
we we said that we came out and said

245
00:09:42,480 --> 00:09:44,580
that publicly and we believe that

246
00:09:44,580 --> 00:09:46,860
transparency was the really really the

247
00:09:46,860 --> 00:09:49,980
important key there so what we did Is We

248
00:09:49,980 --> 00:09:52,680
I don't know if anyone anyone was aware

249
00:09:52,680 --> 00:09:54,899
of this but we Mass logged out everyone

250
00:09:54,899 --> 00:09:56,700
on github.com

251
00:09:56,700 --> 00:10:00,899
so uh yeah that was fun

252
00:10:00,899 --> 00:10:03,600
um and from what I understand are our

253
00:10:03,600 --> 00:10:05,279
clients and our customers were really

254
00:10:05,279 --> 00:10:07,440
appreciative of us being forthcoming

255
00:10:07,440 --> 00:10:08,880
with them and taking the proactive

256
00:10:08,880 --> 00:10:11,399
stance to just log everyone out because

257
00:10:11,399 --> 00:10:13,980
you might have been affected who knows

258
00:10:13,980 --> 00:10:15,779
it was really hard to trace this one

259
00:10:15,779 --> 00:10:18,000
down so be prepared to own the outcome

260
00:10:18,000 --> 00:10:19,740
if you have to make decisions like this

261
00:10:19,740 --> 00:10:21,899
and it goes public folks are going to

262
00:10:21,899 --> 00:10:23,820
start asking you questions so so think

263
00:10:23,820 --> 00:10:26,700
about that and see what you can do to um

264
00:10:26,700 --> 00:10:29,040
to treat your customers as best as

265
00:10:29,040 --> 00:10:30,720
possible

266
00:10:30,720 --> 00:10:33,540
thank you and remember investigations

267
00:10:33,540 --> 00:10:35,519
not necessarily incidents but

268
00:10:35,519 --> 00:10:37,680
investigations are always going to

269
00:10:37,680 --> 00:10:38,779
happen

270
00:10:38,779 --> 00:10:40,860
investigations generally lead to

271
00:10:40,860 --> 00:10:43,019
incidents and then incidents can you

272
00:10:43,019 --> 00:10:44,880
know lead to breaches it's a whole thing

273
00:10:44,880 --> 00:10:47,279
I had to learn about but we do a lot of

274
00:10:47,279 --> 00:10:49,380
Investigations at GitHub I'm involved in

275
00:10:49,380 --> 00:10:51,779
a handful of those Alex is involved in

276
00:10:51,779 --> 00:10:55,320
more of them and again we really value a

277
00:10:55,320 --> 00:10:58,980
blameless incident response process this

278
00:10:58,980 --> 00:11:02,220
empowers the employees the engineers the

279
00:11:02,220 --> 00:11:05,339
the product managers by allowing them to

280
00:11:05,339 --> 00:11:06,839
continue delivering you know the best

281
00:11:06,839 --> 00:11:09,839
products possible if you have your

282
00:11:09,839 --> 00:11:11,640
engineers pinned into a corner asking

283
00:11:11,640 --> 00:11:12,899
them why they wrote code that was

284
00:11:12,899 --> 00:11:14,220
vulnerable that's not going to be

285
00:11:14,220 --> 00:11:16,980
effective not at all so remember

286
00:11:16,980 --> 00:11:19,680
everyone is on the same team here

287
00:11:19,680 --> 00:11:21,959
and when we're in the the hot and sweaty

288
00:11:21,959 --> 00:11:23,700
incident response process or the War

289
00:11:23,700 --> 00:11:26,160
Room just remember use your your plan of

290
00:11:26,160 --> 00:11:28,019
action that you've defined

291
00:11:28,019 --> 00:11:31,760
um hopefully you have playbooks

292
00:11:33,180 --> 00:11:34,920
this is a big one and I think it's often

293
00:11:34,920 --> 00:11:36,180
overlooked

294
00:11:36,180 --> 00:11:38,100
um this is this is pretty big for us at

295
00:11:38,100 --> 00:11:41,399
GitHub uh supporting customers so keep

296
00:11:41,399 --> 00:11:43,560
in mind your customers are going to have

297
00:11:43,560 --> 00:11:45,420
incidents too their authentication

298
00:11:45,420 --> 00:11:47,160
credentials are going to be compromised

299
00:11:47,160 --> 00:11:48,720
their laptops are going to be stolen

300
00:11:48,720 --> 00:11:51,959
what can you do to support them in these

301
00:11:51,959 --> 00:11:53,880
situations now I GitHub one of the the

302
00:11:53,880 --> 00:11:56,519
common scenarios here is they have lost

303
00:11:56,519 --> 00:11:59,160
their their path for instance or some

304
00:11:59,160 --> 00:12:01,560
sort of authorization token has been

305
00:12:01,560 --> 00:12:03,300
disclosed

306
00:12:03,300 --> 00:12:05,040
um they will you know launch

307
00:12:05,040 --> 00:12:07,200
investigations of their own and so how

308
00:12:07,200 --> 00:12:10,140
can you support them in those

309
00:12:10,140 --> 00:12:12,360
so customers are generally going to want

310
00:12:12,360 --> 00:12:14,760
to know what data was accessed when was

311
00:12:14,760 --> 00:12:17,579
it accessed was it modified

312
00:12:17,579 --> 00:12:20,040
Etc and so you need to be able to help

313
00:12:20,040 --> 00:12:22,740
provide them with those answers when at

314
00:12:22,740 --> 00:12:24,720
all possible and if you don't have the

315
00:12:24,720 --> 00:12:26,459
information they need to conduct their

316
00:12:26,459 --> 00:12:28,200
investigation they're not going to be

317
00:12:28,200 --> 00:12:30,120
happy and you're going to start losing

318
00:12:30,120 --> 00:12:33,120
customers over this type of scenario

319
00:12:33,120 --> 00:12:35,519
so how can we go about providing this

320
00:12:35,519 --> 00:12:38,880
data to our customers self-service logs

321
00:12:38,880 --> 00:12:41,820
are a huge win again we have a feature

322
00:12:41,820 --> 00:12:44,279
called audit logging which allows

323
00:12:44,279 --> 00:12:47,040
customers to go in and View events at a

324
00:12:47,040 --> 00:12:50,160
repository level at a at a user level at

325
00:12:50,160 --> 00:12:51,660
an org level I don't think it's at a

326
00:12:51,660 --> 00:12:53,579
repository level but I could be mistaken

327
00:12:53,579 --> 00:12:55,500
and this is self-service they can go in

328
00:12:55,500 --> 00:12:57,420
they can help themselves and see what

329
00:12:57,420 --> 00:13:00,060
actions have been taken uh against a

330
00:13:00,060 --> 00:13:03,240
particular actor or a Target rather

331
00:13:03,240 --> 00:13:06,060
now the flip side of this is as soon as

332
00:13:06,060 --> 00:13:07,560
you provide a mechanism for

333
00:13:07,560 --> 00:13:09,600
self-servicing you need to think about

334
00:13:09,600 --> 00:13:12,300
the data that's being surfaced there

335
00:13:12,300 --> 00:13:15,060
sanitization comes to mind so if you're

336
00:13:15,060 --> 00:13:17,639
logging things like user IP addresses

337
00:13:17,639 --> 00:13:19,620
should you be disclosing those to

338
00:13:19,620 --> 00:13:21,959
customers in a self-service manner

339
00:13:21,959 --> 00:13:24,120
probably not right but that's something

340
00:13:24,120 --> 00:13:26,940
you have to think about you also want to

341
00:13:26,940 --> 00:13:28,980
make sure you're not disclosing uh

342
00:13:28,980 --> 00:13:31,139
credentials or tokens things of that

343
00:13:31,139 --> 00:13:32,579
nature so anything that you would

344
00:13:32,579 --> 00:13:35,100
consider business sensitive you need to

345
00:13:35,100 --> 00:13:38,040
have sanitization in place

346
00:13:38,040 --> 00:13:40,139
and then again having dedicated

347
00:13:40,139 --> 00:13:43,260
playbooks for support goes a long way to

348
00:13:43,260 --> 00:13:45,779
help support your support team provide

349
00:13:45,779 --> 00:13:48,060
customers with the information that

350
00:13:48,060 --> 00:13:51,380
they're looking for

351
00:13:51,620 --> 00:13:55,380
and so I like to recommend auditing all

352
00:13:55,380 --> 00:13:58,560
the things okay and so that here's some

353
00:13:58,560 --> 00:14:00,540
code hopefully it's readable in the back

354
00:14:00,540 --> 00:14:02,339
I know the black can be a little hard to

355
00:14:02,339 --> 00:14:03,720
see but

356
00:14:03,720 --> 00:14:06,480
um ensure every state changing request

357
00:14:06,480 --> 00:14:09,120
flowing through your application is

358
00:14:09,120 --> 00:14:10,860
auditable so what do I mean by state

359
00:14:10,860 --> 00:14:12,360
changing requests

360
00:14:12,360 --> 00:14:14,040
really anything that's creating

361
00:14:14,040 --> 00:14:17,459
modifying deleting updating whatever you

362
00:14:17,459 --> 00:14:19,139
want to say anything that's changing

363
00:14:19,139 --> 00:14:22,139
data in the system should be able to be

364
00:14:22,139 --> 00:14:24,360
audited there should be accountability

365
00:14:24,360 --> 00:14:26,399
for that so in this particular code

366
00:14:26,399 --> 00:14:29,160
snippet anyone here do rails development

367
00:14:29,160 --> 00:14:31,740
or am I the only one yeah I'm the only

368
00:14:31,740 --> 00:14:33,899
one that's typical I've spoken at Ruby

369
00:14:33,899 --> 00:14:35,160
conferences and been the only one who's

370
00:14:35,160 --> 00:14:38,100
a rails developer

371
00:14:38,100 --> 00:14:39,959
um so anyways what we're looking at here

372
00:14:39,959 --> 00:14:42,420
is what's effectively a base controller

373
00:14:42,420 --> 00:14:44,519
so all of our controllers in the app

374
00:14:44,519 --> 00:14:46,440
inherit from an application controller

375
00:14:46,440 --> 00:14:50,399
and then we have an after action which

376
00:14:50,399 --> 00:14:53,459
calls a require Trail audit function so

377
00:14:53,459 --> 00:14:57,420
this after action says after the HTTP

378
00:14:57,420 --> 00:14:59,519
request has been basically fully

379
00:14:59,519 --> 00:15:02,220
serviced and we're about ready to send

380
00:15:02,220 --> 00:15:04,139
it back to the to the through the web

381
00:15:04,139 --> 00:15:06,600
server to the user we're gonna run this

382
00:15:06,600 --> 00:15:09,060
particular require audit Trail function

383
00:15:09,060 --> 00:15:11,639
and then in that function we we look and

384
00:15:11,639 --> 00:15:15,000
see if the HTTP request method was

385
00:15:15,000 --> 00:15:17,160
anything other than a git or a head

386
00:15:17,160 --> 00:15:20,339
request we're then going to look and see

387
00:15:20,339 --> 00:15:23,339
if the request was audited if it wasn't

388
00:15:23,339 --> 00:15:25,320
audited what we're going to do is raise

389
00:15:25,320 --> 00:15:27,720
an exception and say look there was some

390
00:15:27,720 --> 00:15:30,959
state-changing request here that was not

391
00:15:30,959 --> 00:15:32,940
audited this is a problem because

392
00:15:32,940 --> 00:15:35,459
there's no accountability for it

393
00:15:35,459 --> 00:15:37,199
um this is not the best code example

394
00:15:37,199 --> 00:15:39,180
does anyone see why this may not be the

395
00:15:39,180 --> 00:15:42,560
best situation here

396
00:15:43,380 --> 00:15:46,320
of course no rails developers so

397
00:15:46,320 --> 00:15:48,839
um the the cause for concern here is

398
00:15:48,839 --> 00:15:52,019
that we're raising an exception after

399
00:15:52,019 --> 00:15:53,639
all of the logic has already been

400
00:15:53,639 --> 00:15:56,600
processed right so that's not doing much

401
00:15:56,600 --> 00:16:00,839
so a better situation would be if we

402
00:16:00,839 --> 00:16:03,720
instead emitted an audit log entry that

403
00:16:03,720 --> 00:16:06,480
said hey this wasn't audited and then we

404
00:16:06,480 --> 00:16:08,220
can have accountability for those we can

405
00:16:08,220 --> 00:16:11,160
review that so this is just a general

406
00:16:11,160 --> 00:16:14,480
idea of using some middleware to capture

407
00:16:14,480 --> 00:16:17,279
uh HTTP requests that have not been

408
00:16:17,279 --> 00:16:20,639
audited and surface those this shouldn't

409
00:16:20,639 --> 00:16:22,500
necessarily interfere with the end user

410
00:16:22,500 --> 00:16:24,779
Behavior but it should be

411
00:16:24,779 --> 00:16:27,180
um it should be a metric that engineers

412
00:16:27,180 --> 00:16:29,220
and folks are looking at to understand

413
00:16:29,220 --> 00:16:31,079
where there's a lack of coverage in

414
00:16:31,079 --> 00:16:33,680
their application

415
00:16:34,740 --> 00:16:39,199
all right let me grab a quick drink here

416
00:16:39,959 --> 00:16:43,099
just water don't worry

417
00:16:44,519 --> 00:16:46,199
so where do we go from there I mean we

418
00:16:46,199 --> 00:16:47,399
talked a little bit about incident

419
00:16:47,399 --> 00:16:48,660
response

420
00:16:48,660 --> 00:16:49,560
um

421
00:16:49,560 --> 00:16:52,079
preventing regression is is what we're

422
00:16:52,079 --> 00:16:53,880
going to talk about next so

423
00:16:53,880 --> 00:16:56,220
the goal with incident response is never

424
00:16:56,220 --> 00:16:58,620
too waste a good incident

425
00:16:58,620 --> 00:17:01,440
so how do we prevent regression so if if

426
00:17:01,440 --> 00:17:02,759
folks aren't aware of what I mean by

427
00:17:02,759 --> 00:17:04,500
regression what I mean is effectively

428
00:17:04,500 --> 00:17:06,839
ensuring that we don't have the same

429
00:17:06,839 --> 00:17:09,299
situation happen again

430
00:17:09,299 --> 00:17:11,160
um and so the first thing we want to

431
00:17:11,160 --> 00:17:13,559
look at is ensuring that during our IR

432
00:17:13,559 --> 00:17:15,720
scenario we do sufficient root cause

433
00:17:15,720 --> 00:17:18,660
analysis to really understand the

434
00:17:18,660 --> 00:17:22,439
vulnerability itself or the bug and use

435
00:17:22,439 --> 00:17:25,559
that to drive our solutioning so we want

436
00:17:25,559 --> 00:17:28,380
to fix things at a code level we don't

437
00:17:28,380 --> 00:17:30,419
want to rely on third-party products

438
00:17:30,419 --> 00:17:33,480
things like waffs to solve the issue so

439
00:17:33,480 --> 00:17:35,280
make sure you have an understanding of

440
00:17:35,280 --> 00:17:37,440
the actual issue itself

441
00:17:37,440 --> 00:17:39,539
and then perform thorough variant

442
00:17:39,539 --> 00:17:42,179
analysis so when I say variant analysis

443
00:17:42,179 --> 00:17:44,580
we've we've identified the root cause of

444
00:17:44,580 --> 00:17:47,039
one particular issue do we have that

445
00:17:47,039 --> 00:17:49,980
same issue in other places in our code

446
00:17:49,980 --> 00:17:53,760
base in our services so variant analysis

447
00:17:53,760 --> 00:17:56,100
is super useful there if folks here or

448
00:17:56,100 --> 00:17:57,840
GitHub Advanced security customers we

449
00:17:57,840 --> 00:18:00,179
have a multi-repo variant analysis tool

450
00:18:00,179 --> 00:18:01,860
which is pretty cool I don't use it

451
00:18:01,860 --> 00:18:04,200
myself but we have teams that do rely on

452
00:18:04,200 --> 00:18:06,780
that and pretty cool feature

453
00:18:06,780 --> 00:18:07,799
um

454
00:18:07,799 --> 00:18:10,020
and again this is this section is all

455
00:18:10,020 --> 00:18:13,160
about not wasting a valuable incident so

456
00:18:13,160 --> 00:18:16,740
variant analysis is super valuable and

457
00:18:16,740 --> 00:18:19,440
then most importantly utilize tests to

458
00:18:19,440 --> 00:18:21,120
prevent regression

459
00:18:21,120 --> 00:18:21,900
um

460
00:18:21,900 --> 00:18:24,240
who here has security tests in their in

461
00:18:24,240 --> 00:18:27,900
their products that they're aware of

462
00:18:27,900 --> 00:18:30,000
I saw a lot more Engineers than I saw

463
00:18:30,000 --> 00:18:31,740
folks raise their hands for that so

464
00:18:31,740 --> 00:18:34,260
that's a bit scary

465
00:18:34,260 --> 00:18:35,760
I'm not going to ask you which which

466
00:18:35,760 --> 00:18:38,400
products you have all right who's ready

467
00:18:38,400 --> 00:18:40,799
for a test

468
00:18:40,799 --> 00:18:43,620
all right that's all I mean not actually

469
00:18:43,620 --> 00:18:45,840
going to ask you all questions sorry if

470
00:18:45,840 --> 00:18:47,460
this is a bit hard to see especially in

471
00:18:47,460 --> 00:18:49,679
the back but effectively what we have

472
00:18:49,679 --> 00:18:53,160
here is a an integration test from OAS

473
00:18:53,160 --> 00:18:54,419
rails go

474
00:18:54,419 --> 00:18:56,340
intentionally vulnerable Ruby on Rails

475
00:18:56,340 --> 00:19:00,600
app in this particular test is

476
00:19:00,600 --> 00:19:02,280
actually does anyone have any thoughts

477
00:19:02,280 --> 00:19:04,020
on what we're testing for before I spoil

478
00:19:04,020 --> 00:19:06,200
things

479
00:19:09,799 --> 00:19:13,639
it's file upload yeah

480
00:19:14,220 --> 00:19:16,260
so we are testing and I think I heard

481
00:19:16,260 --> 00:19:17,760
someone say it but you're being too

482
00:19:17,760 --> 00:19:18,840
modest

483
00:19:18,840 --> 00:19:21,960
um command injection right so if you

484
00:19:21,960 --> 00:19:25,320
look online 21 and basically we have a

485
00:19:25,320 --> 00:19:27,000
payload to test for command injections

486
00:19:27,000 --> 00:19:28,980
so this is this is the type of payload

487
00:19:28,980 --> 00:19:31,260
you would see you know someone from a

488
00:19:31,260 --> 00:19:33,480
consulting company using to demonstrate

489
00:19:33,480 --> 00:19:35,280
you know exploitability

490
00:19:35,280 --> 00:19:37,620
and so what we do is is we create a

491
00:19:37,620 --> 00:19:39,360
legitimate file we put it on the server

492
00:19:39,360 --> 00:19:41,640
somewhere and then we have a payload

493
00:19:41,640 --> 00:19:45,059
that basically attempts to delete

494
00:19:45,059 --> 00:19:47,340
um the files from that same directory

495
00:19:47,340 --> 00:19:52,919
and if if it's successful so on line 30

496
00:19:52,919 --> 00:19:54,840
in an Ideal World if our application is

497
00:19:54,840 --> 00:19:57,539
not vulnerable that legitimate file we

498
00:19:57,539 --> 00:19:59,100
initially created will still be there

499
00:19:59,100 --> 00:20:00,660
meaning it hasn't been erased because

500
00:20:00,660 --> 00:20:02,220
our payload has not executed

501
00:20:02,220 --> 00:20:04,140
successfully

502
00:20:04,140 --> 00:20:07,919
um so yeah this is a bit of a confusing

503
00:20:07,919 --> 00:20:10,740
um test Suite because you all aren't

504
00:20:10,740 --> 00:20:12,299
rails developers you're probably not too

505
00:20:12,299 --> 00:20:14,100
familiar with capybara there's a lot

506
00:20:14,100 --> 00:20:16,440
going on but the idea is that our goal

507
00:20:16,440 --> 00:20:19,260
is try to delete a file and if that file

508
00:20:19,260 --> 00:20:20,820
is not deleted then we have

509
00:20:20,820 --> 00:20:22,440
theoretically mitigated the security

510
00:20:22,440 --> 00:20:23,940
vulnerability

511
00:20:23,940 --> 00:20:25,440
has anyone seen any potential

512
00:20:25,440 --> 00:20:27,720
improvements anyways we could write this

513
00:20:27,720 --> 00:20:30,440
test a little better

514
00:20:34,799 --> 00:20:38,960
girls aside you must be a net developer

515
00:20:41,340 --> 00:20:43,980
so I have some recommendations for for

516
00:20:43,980 --> 00:20:45,539
this particular test so first of all

517
00:20:45,539 --> 00:20:47,580
it's great to have eight tests to begin

518
00:20:47,580 --> 00:20:48,780
with

519
00:20:48,780 --> 00:20:50,700
first of all I always recommend using

520
00:20:50,700 --> 00:20:52,919
unit testing whenever possible

521
00:20:52,919 --> 00:20:54,360
um what we looked at before was an

522
00:20:54,360 --> 00:20:55,679
integration test

523
00:20:55,679 --> 00:20:58,320
a lot of things can change between entry

524
00:20:58,320 --> 00:21:00,299
point to the application and where the

525
00:21:00,299 --> 00:21:03,840
actual logic is is being executed so

526
00:21:03,840 --> 00:21:06,240
when possible use unit tests instead of

527
00:21:06,240 --> 00:21:09,260
integration tests

528
00:21:09,299 --> 00:21:12,179
consider alternative payloads so my big

529
00:21:12,179 --> 00:21:14,400
pet peeve with this test is that our

530
00:21:14,400 --> 00:21:17,160
payload is trying to delete data uh

531
00:21:17,160 --> 00:21:18,840
that's that's a pretty serious cause for

532
00:21:18,840 --> 00:21:21,840
concern because if if we delete our data

533
00:21:21,840 --> 00:21:24,720
is our test Suite going to restore that

534
00:21:24,720 --> 00:21:26,940
data that was already there or are we

535
00:21:26,940 --> 00:21:28,380
going to end up in some situation where

536
00:21:28,380 --> 00:21:30,900
you suddenly have flaky tests so

537
00:21:30,900 --> 00:21:33,480
removing data is not effective there are

538
00:21:33,480 --> 00:21:35,700
better options such as just trying to

539
00:21:35,700 --> 00:21:38,340
execute sleep you know if you if your

540
00:21:38,340 --> 00:21:40,620
your test is taking five seconds to

541
00:21:40,620 --> 00:21:42,059
respond you're probably still vulnerable

542
00:21:42,059 --> 00:21:44,640
if you just told the the well if you

543
00:21:44,640 --> 00:21:46,320
gave a payload to sleep for five seconds

544
00:21:46,320 --> 00:21:51,200
so definitely not a fan of the rmrf

545
00:21:51,559 --> 00:21:55,380
what about alternative encodings so how

546
00:21:55,380 --> 00:21:57,240
will things differ if the data provided

547
00:21:57,240 --> 00:21:59,280
was URL encoded

548
00:21:59,280 --> 00:22:01,559
um maybe base64 encoded maybe had

549
00:22:01,559 --> 00:22:04,559
Unicode variants

550
00:22:04,559 --> 00:22:06,480
and after all what is what is the happy

551
00:22:06,480 --> 00:22:09,299
path what is the expectation

552
00:22:09,299 --> 00:22:10,460
um if someone

553
00:22:10,460 --> 00:22:13,679
uploads a file that appears to be

554
00:22:13,679 --> 00:22:15,419
potentially malicious we don't cover

555
00:22:15,419 --> 00:22:18,659
that we we verify that our files have

556
00:22:18,659 --> 00:22:20,400
not been deleted but what happened to

557
00:22:20,400 --> 00:22:22,919
the file that was uploaded because there

558
00:22:22,919 --> 00:22:24,900
could have been legitimate files with

559
00:22:24,900 --> 00:22:26,340
some of those characters in the names

560
00:22:26,340 --> 00:22:29,159
what happened to those

561
00:22:29,159 --> 00:22:31,320
and then false negatives in this case

562
00:22:31,320 --> 00:22:33,440
race conditions come to my mind as well

563
00:22:33,440 --> 00:22:36,419
so maybe maybe the test runs

564
00:22:36,419 --> 00:22:40,020
concurrently and uh some of the other

565
00:22:40,020 --> 00:22:42,960
tests rely on those files as well so a

566
00:22:42,960 --> 00:22:46,140
lot of potential issues there

567
00:22:46,140 --> 00:22:49,440
so one more test I want to talk about

568
00:22:49,440 --> 00:22:51,419
the goal of this test and this is from

569
00:22:51,419 --> 00:22:53,100
Mastodon

570
00:22:53,100 --> 00:22:55,740
open source Social Network I don't use

571
00:22:55,740 --> 00:22:57,539
it myself but if you do they have

572
00:22:57,539 --> 00:23:00,360
security tests so that's good

573
00:23:00,360 --> 00:23:02,940
um the the goal of this appears to me at

574
00:23:02,940 --> 00:23:05,280
least to be testing for some variant of

575
00:23:05,280 --> 00:23:07,200
cross-site scripting so we're making

576
00:23:07,200 --> 00:23:09,240
sure things are stripping JavaScript

577
00:23:09,240 --> 00:23:12,179
tags and Below we're making sure things

578
00:23:12,179 --> 00:23:16,679
strip malicious classes not sure what a

579
00:23:16,679 --> 00:23:19,440
malicious class is

580
00:23:19,440 --> 00:23:22,740
so what what can we say about this test

581
00:23:22,740 --> 00:23:25,380
um what would what would change if the

582
00:23:25,380 --> 00:23:27,720
input was normalized in some way so the

583
00:23:27,720 --> 00:23:29,220
first thing that struck me as weird is

584
00:23:29,220 --> 00:23:32,340
where we have a capital H in the alert

585
00:23:32,340 --> 00:23:35,100
uh okay that's that seems to be

586
00:23:35,100 --> 00:23:37,320
non-standard but what if the application

587
00:23:37,320 --> 00:23:39,780
was designed to run like too lower case

588
00:23:39,780 --> 00:23:42,240
on everything we may still be vulnerable

589
00:23:42,240 --> 00:23:44,520
but because we're looking for a case in

590
00:23:44,520 --> 00:23:46,679
a case-sensitive string

591
00:23:46,679 --> 00:23:49,620
it may be a false negative there

592
00:23:49,620 --> 00:23:52,380
are there tests for other attributes so

593
00:23:52,380 --> 00:23:54,720
I'm not sure how well folks are familiar

594
00:23:54,720 --> 00:23:56,700
with cross-edge scripting but a big

595
00:23:56,700 --> 00:23:59,159
Vector there is attribute injection and

596
00:23:59,159 --> 00:24:01,919
so we see a test for malicious classes

597
00:24:01,919 --> 00:24:04,200
but we don't see any further tests so

598
00:24:04,200 --> 00:24:07,020
what about malicious IDs first of all

599
00:24:07,020 --> 00:24:09,720
what what even are malicious classes I

600
00:24:09,720 --> 00:24:11,520
have no clue what Mastodon means by a

601
00:24:11,520 --> 00:24:13,620
malicious class

602
00:24:13,620 --> 00:24:15,299
um so yeah what are what are the

603
00:24:15,299 --> 00:24:17,039
legitimate classes I mean I guess

604
00:24:17,039 --> 00:24:19,260
mention is a legitimate class but

605
00:24:19,260 --> 00:24:21,419
there's a lot of context left out in

606
00:24:21,419 --> 00:24:24,140
this situation

607
00:24:24,659 --> 00:24:27,179
so here's some advice for Designing

608
00:24:27,179 --> 00:24:28,980
tasks first of all make sure you're

609
00:24:28,980 --> 00:24:31,919
using tests integration tasks unit test

610
00:24:31,919 --> 00:24:35,159
whatever works if your company is not

611
00:24:35,159 --> 00:24:38,159
using tests at all it would be a huge

612
00:24:38,159 --> 00:24:40,200
win just to have some testing framework

613
00:24:40,200 --> 00:24:42,720
in place in general and make it part of

614
00:24:42,720 --> 00:24:45,360
your CI CD process

615
00:24:45,360 --> 00:24:48,059
Focus your test case on a specific issue

616
00:24:48,059 --> 00:24:51,360
such as integration tests so if someone

617
00:24:51,360 --> 00:24:52,919
reported a cross-site scripting

618
00:24:52,919 --> 00:24:55,500
vulnerability in a user profile it makes

619
00:24:55,500 --> 00:24:57,240
sense to have an integration test that

620
00:24:57,240 --> 00:24:59,159
tries to set a user profile to have a

621
00:24:59,159 --> 00:25:02,400
JavaScript code snippet and validate

622
00:25:02,400 --> 00:25:04,919
that after you fixed it that's no longer

623
00:25:04,919 --> 00:25:06,659
rendering

624
00:25:06,659 --> 00:25:08,940
um and then from there we can look at

625
00:25:08,940 --> 00:25:10,919
our variant analysis and say okay we've

626
00:25:10,919 --> 00:25:12,600
we've encountered these other scenarios

627
00:25:12,600 --> 00:25:14,880
that seem to be venerable what can we do

628
00:25:14,880 --> 00:25:17,340
to make this one cross-site scripting

629
00:25:17,340 --> 00:25:19,620
test we just wrote more extensible so we

630
00:25:19,620 --> 00:25:21,960
can use it in other places in our

631
00:25:21,960 --> 00:25:23,940
application

632
00:25:23,940 --> 00:25:25,440
I already talked about this a little bit

633
00:25:25,440 --> 00:25:28,080
but uh test is close to the logic as

634
00:25:28,080 --> 00:25:30,779
possible so if you have I don't know a

635
00:25:30,779 --> 00:25:32,400
blockchain app and you're transferring

636
00:25:32,400 --> 00:25:33,779
money around

637
00:25:33,779 --> 00:25:35,460
probably shouldn't be able to transfer

638
00:25:35,460 --> 00:25:38,520
if you have a negative balance right so

639
00:25:38,520 --> 00:25:40,140
that's an area where you'd want to make

640
00:25:40,140 --> 00:25:43,020
sure you had unit tests in place to test

641
00:25:43,020 --> 00:25:45,360
for those lower level comparison

642
00:25:45,360 --> 00:25:47,880
operations and then

643
00:25:47,880 --> 00:25:50,460
a fun one I like to touch on focus on

644
00:25:50,460 --> 00:25:52,740
testing for permutations and I'm not

645
00:25:52,740 --> 00:25:54,779
sure if folks know what I mean by that

646
00:25:54,779 --> 00:25:58,440
so permutations are effectively a

647
00:25:58,440 --> 00:26:00,779
reusable way to test for variants of

648
00:26:00,779 --> 00:26:02,760
payloads so we talked a little bit about

649
00:26:02,760 --> 00:26:05,700
encoding concerns right so why not have

650
00:26:05,700 --> 00:26:08,159
a function that will generate variance

651
00:26:08,159 --> 00:26:10,740
or permutations of the input so in the

652
00:26:10,740 --> 00:26:13,080
example here we take the input we we

653
00:26:13,080 --> 00:26:15,059
look at the base64 encoded we look at

654
00:26:15,059 --> 00:26:17,940
the URL encoded URL decoded you can do

655
00:26:17,940 --> 00:26:19,740
as much as you want here

656
00:26:19,740 --> 00:26:21,840
and then you just want to design a test

657
00:26:21,840 --> 00:26:24,179
case that looks for any of those

658
00:26:24,179 --> 00:26:26,760
permutations and if any of those were

659
00:26:26,760 --> 00:26:29,100
found you probably have an issue this is

660
00:26:29,100 --> 00:26:31,380
a super easy win to get better test

661
00:26:31,380 --> 00:26:33,720
coverage and this is something you

662
00:26:33,720 --> 00:26:35,760
should be using as both input to tests

663
00:26:35,760 --> 00:26:38,700
and also output of tasks so if you're

664
00:26:38,700 --> 00:26:40,500
looking to see if your HTTP response

665
00:26:40,500 --> 00:26:42,720
includes something look and see if it

666
00:26:42,720 --> 00:26:44,760
includes the permutations of that thing

667
00:26:44,760 --> 00:26:45,960
at all

668
00:26:45,960 --> 00:26:48,919
pretty easy win

669
00:26:50,820 --> 00:26:52,559
so shifting away from that a little bit

670
00:26:52,559 --> 00:26:55,919
designing for extensibility it's super

671
00:26:55,919 --> 00:26:57,240
important to recognize that your product

672
00:26:57,240 --> 00:26:59,700
is going to change your company is going

673
00:26:59,700 --> 00:27:01,440
to scale things things are going to be

674
00:27:01,440 --> 00:27:03,179
different

675
00:27:03,179 --> 00:27:05,419
foreign

676
00:27:08,960 --> 00:27:11,880
with this

677
00:27:11,880 --> 00:27:14,940
shouldn't be very obvious right

678
00:27:14,940 --> 00:27:17,640
so

679
00:27:17,640 --> 00:27:19,140
and no one's hollering at me that's

680
00:27:19,140 --> 00:27:20,760
surprising

681
00:27:20,760 --> 00:27:22,740
so how would we fix that okay use

682
00:27:22,740 --> 00:27:24,600
parameterized queries this is this is

683
00:27:24,600 --> 00:27:26,580
kind of SQL injection 101 where we have

684
00:27:26,580 --> 00:27:28,799
some user input concatenated with a SQL

685
00:27:28,799 --> 00:27:31,380
query the way we recommend solving this

686
00:27:31,380 --> 00:27:33,659
as an industry is using parameterized

687
00:27:33,659 --> 00:27:36,480
queries right genuine disagree

688
00:27:36,480 --> 00:27:38,460
okay good

689
00:27:38,460 --> 00:27:40,320
what's the solution here what's the

690
00:27:40,320 --> 00:27:43,460
problem how do we fix this

691
00:27:49,980 --> 00:27:51,720
we're getting close to lunch so folks

692
00:27:51,720 --> 00:27:54,860
are quieting down now

693
00:27:56,299 --> 00:27:58,620
parameterized queries will not work in

694
00:27:58,620 --> 00:28:00,179
that situation

695
00:28:00,179 --> 00:28:01,620
so if we look back at it what we see

696
00:28:01,620 --> 00:28:06,240
here is we're using uh user input to

697
00:28:06,240 --> 00:28:08,279
determine which database table we want

698
00:28:08,279 --> 00:28:10,679
to select from

699
00:28:10,679 --> 00:28:13,440
in parameterized queries can't be used

700
00:28:13,440 --> 00:28:15,179
to mitigate the risk in this case and

701
00:28:15,179 --> 00:28:16,500
that's because most database Management

702
00:28:16,500 --> 00:28:19,380
systems do not support parameterizing

703
00:28:19,380 --> 00:28:22,440
certain Fields one of which is the table

704
00:28:22,440 --> 00:28:25,559
name so you will not be able to

705
00:28:25,559 --> 00:28:27,419
parameterize that generally speaking

706
00:28:27,419 --> 00:28:29,340
there's some exceptions to that so an

707
00:28:29,340 --> 00:28:33,120
alternative approach is allow listing a

708
00:28:33,120 --> 00:28:36,000
set of known table names this might seem

709
00:28:36,000 --> 00:28:37,799
a bit like a contrived example but if

710
00:28:37,799 --> 00:28:39,960
you ever work in any sort of company

711
00:28:39,960 --> 00:28:41,880
that has like a dynamic reporting engine

712
00:28:41,880 --> 00:28:44,520
or its own custom SQL interface this is

713
00:28:44,520 --> 00:28:47,179
a huge thing

714
00:28:47,480 --> 00:28:50,059
so what's what's the solution here

715
00:28:50,059 --> 00:28:53,220
utilizing a framework control or

716
00:28:53,220 --> 00:28:55,320
middleware to introspect the parameters

717
00:28:55,320 --> 00:28:58,700
okay so walking you through this code

718
00:28:58,700 --> 00:29:03,000
this is a solution so we're using a

719
00:29:03,000 --> 00:29:05,640
before filter that says before we run

720
00:29:05,640 --> 00:29:07,620
the code here we're going to run this

721
00:29:07,620 --> 00:29:09,779
before filter function which is called

722
00:29:09,779 --> 00:29:11,760
require valid table

723
00:29:11,760 --> 00:29:14,340
and so we look to see if a list of the

724
00:29:14,340 --> 00:29:17,520
valid tables we've provided includes the

725
00:29:17,520 --> 00:29:20,279
user parameter meaning is a user trying

726
00:29:20,279 --> 00:29:21,720
to access a table which we want to give

727
00:29:21,720 --> 00:29:24,120
them access to and then if not we're

728
00:29:24,120 --> 00:29:25,559
going to raise an exception and say

729
00:29:25,559 --> 00:29:27,899
invalid table

730
00:29:27,899 --> 00:29:29,820
choose your own exception name this is

731
00:29:29,820 --> 00:29:32,520
just my contrived example here

732
00:29:32,520 --> 00:29:34,860
and so this works by ensuring that the

733
00:29:34,860 --> 00:29:37,980
user is selecting from a table that we

734
00:29:37,980 --> 00:29:40,559
want them to be able to select from

735
00:29:40,559 --> 00:29:43,260
um there are better approaches here so

736
00:29:43,260 --> 00:29:46,440
one better approach which I'll show you

737
00:29:46,440 --> 00:29:48,059
looks more like this

738
00:29:48,059 --> 00:29:50,159
so we have a before filter now called

739
00:29:50,159 --> 00:29:52,580
set table in this particular method

740
00:29:52,580 --> 00:29:55,980
looks to see again if the user input is

741
00:29:55,980 --> 00:29:57,480
a valid table

742
00:29:57,480 --> 00:30:00,299
if not it raises an exception that's not

743
00:30:00,299 --> 00:30:01,860
much different what is different though

744
00:30:01,860 --> 00:30:04,380
is we're referencing or we're setting a

745
00:30:04,380 --> 00:30:06,419
value called current Table

746
00:30:06,419 --> 00:30:08,220
and we're setting that to the user

747
00:30:08,220 --> 00:30:10,500
provided value and then on line six

748
00:30:10,500 --> 00:30:12,360
we're now referencing that new current

749
00:30:12,360 --> 00:30:14,039
Table variable

750
00:30:14,039 --> 00:30:18,240
and so the idea here is that we have uh

751
00:30:18,240 --> 00:30:20,580
we have defined this current Table

752
00:30:20,580 --> 00:30:22,620
variable to be something that is trusted

753
00:30:22,620 --> 00:30:25,380
and we know it will only exist if we've

754
00:30:25,380 --> 00:30:27,899
gone through that before filter

755
00:30:27,899 --> 00:30:30,600
so that's that's kind of the minor minor

756
00:30:30,600 --> 00:30:32,220
Nuance there so in this particular

757
00:30:32,220 --> 00:30:33,840
example

758
00:30:33,840 --> 00:30:35,520
um if someone were to comment out that

759
00:30:35,520 --> 00:30:37,799
before filter suddenly you have SQL

760
00:30:37,799 --> 00:30:39,299
injection again

761
00:30:39,299 --> 00:30:41,159
in this example if someone comments out

762
00:30:41,159 --> 00:30:43,200
the before filter you're going to have a

763
00:30:43,200 --> 00:30:44,580
function that doesn't work because

764
00:30:44,580 --> 00:30:47,039
there's an undefined variable this is a

765
00:30:47,039 --> 00:30:50,100
defense in-depth measurement measure I

766
00:30:50,100 --> 00:30:53,039
don't know what I'm saying anymore

767
00:30:53,039 --> 00:30:55,559
so accept the reality we're gonna write

768
00:30:55,559 --> 00:30:57,720
insecure code you can have the most

769
00:30:57,720 --> 00:30:59,880
thorough secure coding requirements

770
00:30:59,880 --> 00:31:02,940
document in the world folks are going to

771
00:31:02,940 --> 00:31:06,059
write insecure code so it's important to

772
00:31:06,059 --> 00:31:08,460
to understand that accept that and then

773
00:31:08,460 --> 00:31:12,960
build an exception process for that one

774
00:31:12,960 --> 00:31:14,880
thing I like to recommend folks do is

775
00:31:14,880 --> 00:31:18,480
annotate insecure code so in the example

776
00:31:18,480 --> 00:31:20,820
there we have code that's potentially

777
00:31:20,820 --> 00:31:23,159
vulnerable to mass assignment if you run

778
00:31:23,159 --> 00:31:25,320
Breakman or any Ruby static analysis

779
00:31:25,320 --> 00:31:27,659
it's going to report that so if our

780
00:31:27,659 --> 00:31:29,580
developers choose to accept that risk

781
00:31:29,580 --> 00:31:31,140
for some reason maybe there's other

782
00:31:31,140 --> 00:31:33,419
mitigating controls having a simple

783
00:31:33,419 --> 00:31:35,940
annotation in there will tell us this is

784
00:31:35,940 --> 00:31:38,159
an insecure design principle we

785
00:31:38,159 --> 00:31:40,559
shouldn't be doing this and I would

786
00:31:40,559 --> 00:31:42,299
recommend also linking back to some

787
00:31:42,299 --> 00:31:44,940
discussion or some exception because

788
00:31:44,940 --> 00:31:46,559
this will reduce the risk of someone

789
00:31:46,559 --> 00:31:48,960
copying this code and using it somewhere

790
00:31:48,960 --> 00:31:51,360
else in the application it also provides

791
00:31:51,360 --> 00:31:54,799
us the ability to document an audit for

792
00:31:54,799 --> 00:31:58,080
these insecure code patterns so for

793
00:31:58,080 --> 00:32:00,960
example in rails I can run rake tasks I

794
00:32:00,960 --> 00:32:03,720
can look at all of my insecure tasks and

795
00:32:03,720 --> 00:32:05,520
then audit those see if that's something

796
00:32:05,520 --> 00:32:07,580
I want to revisit

797
00:32:07,580 --> 00:32:10,860
I've only seen like one or two clients

798
00:32:10,860 --> 00:32:13,320
ever using patterns to annotate you know

799
00:32:13,320 --> 00:32:15,720
into your code so this I think is a

800
00:32:15,720 --> 00:32:18,559
pretty easy win

801
00:32:19,620 --> 00:32:21,659
and then building

802
00:32:21,659 --> 00:32:24,440
uh oh

803
00:32:25,260 --> 00:32:28,260
Fox

804
00:32:29,580 --> 00:32:33,139
I'll just turn my laptop around

805
00:32:34,919 --> 00:32:38,059
good time for a water break

806
00:32:40,320 --> 00:32:42,379
um

807
00:32:52,039 --> 00:32:54,419
so I was having a hard time hearing you

808
00:32:54,419 --> 00:32:55,860
especially with the door closing but

809
00:32:55,860 --> 00:32:58,860
were you asking about how we audit those

810
00:32:58,860 --> 00:33:01,559
yeah how do you detect you need sunsets

811
00:33:01,559 --> 00:33:03,720
or something if your annotation happens

812
00:33:03,720 --> 00:33:05,520
so let's say you want to prevent some

813
00:33:05,520 --> 00:33:09,379
developerative malicious

814
00:33:11,820 --> 00:33:13,740
yeah good question so

815
00:33:13,740 --> 00:33:15,120
um and this probably isn't the best

816
00:33:15,120 --> 00:33:17,640
possible example but if you use linters

817
00:33:17,640 --> 00:33:19,260
and you have test Suites you can keep

818
00:33:19,260 --> 00:33:21,840
track of the count of how many of those

819
00:33:21,840 --> 00:33:24,539
annotations there are and then basically

820
00:33:24,539 --> 00:33:28,640
manually okay thank you

821
00:33:32,039 --> 00:33:35,399
so you can use linters and basically say

822
00:33:35,399 --> 00:33:38,760
okay this this count of insecure code

823
00:33:38,760 --> 00:33:42,360
annotations increased or decreased can

824
00:33:42,360 --> 00:33:44,760
you provide you know an explanation for

825
00:33:44,760 --> 00:33:47,000
that

826
00:33:51,960 --> 00:33:55,580
cool back in business thank you

827
00:33:57,000 --> 00:33:59,340
I let my wife use my dongle a year ago

828
00:33:59,340 --> 00:34:01,320
when I stopped kind of traveling and

829
00:34:01,320 --> 00:34:03,480
here we are this is someone else's and

830
00:34:03,480 --> 00:34:07,440
now I've got a secondary backup so and

831
00:34:07,440 --> 00:34:09,179
we're getting kind of close on time here

832
00:34:09,179 --> 00:34:13,440
so building pave paths for extensibility

833
00:34:13,440 --> 00:34:17,099
um this is a favorite of mine uh or I

834
00:34:17,099 --> 00:34:18,300
should say a security questionnaire

835
00:34:18,300 --> 00:34:20,820
favorite we get this a lot at GitHub

836
00:34:20,820 --> 00:34:23,280
security headers okay I don't know if

837
00:34:23,280 --> 00:34:24,599
anyone knows where I'm going with this

838
00:34:24,599 --> 00:34:25,619
but

839
00:34:25,619 --> 00:34:27,719
security headers and this is kind of a

840
00:34:27,719 --> 00:34:29,040
bold statement but in my opinion

841
00:34:29,040 --> 00:34:30,719
security headers are effectively the new

842
00:34:30,719 --> 00:34:33,179
Bankrate encryption everyone wants to

843
00:34:33,179 --> 00:34:35,280
see it and they want to see it because

844
00:34:35,280 --> 00:34:38,040
it's it's visible to them so for example

845
00:34:38,040 --> 00:34:40,918
if I use if I go to the lastcon.org

846
00:34:40,918 --> 00:34:42,300
website I don't know if they're

847
00:34:42,300 --> 00:34:44,339
vulnerable to cross-aid scripting I

848
00:34:44,339 --> 00:34:45,480
don't know if they're vulnerable to SQL

849
00:34:45,480 --> 00:34:47,339
injection without testing security

850
00:34:47,339 --> 00:34:50,099
adders I can load up uh I'm not going to

851
00:34:50,099 --> 00:34:52,139
throw any names out there but a dynamic

852
00:34:52,139 --> 00:34:54,179
website to scan your security headers

853
00:34:54,179 --> 00:34:56,879
and get a report card on it everyone can

854
00:34:56,879 --> 00:34:59,580
do this and it's it's not a bad thing

855
00:34:59,580 --> 00:35:02,400
but I think there's too much emphasis on

856
00:35:02,400 --> 00:35:05,040
security headers so one in particular I

857
00:35:05,040 --> 00:35:06,599
want to talk about is content security

858
00:35:06,599 --> 00:35:09,540
policy in this hetera I do find a

859
00:35:09,540 --> 00:35:11,880
sufficient value

860
00:35:11,880 --> 00:35:14,220
so content security policy if you're not

861
00:35:14,220 --> 00:35:18,079
aware is a new newish

862
00:35:18,079 --> 00:35:22,140
directive that browsers will process to

863
00:35:22,140 --> 00:35:23,060
understand

864
00:35:23,060 --> 00:35:27,000
which uh types of data your application

865
00:35:27,000 --> 00:35:29,339
can load where it can load those from

866
00:35:29,339 --> 00:35:31,980
Etc there's there's a lot to it now CSP

867
00:35:31,980 --> 00:35:33,960
version 3 is coming out as well so

868
00:35:33,960 --> 00:35:36,480
there's a whole lot to talk about

869
00:35:36,480 --> 00:35:40,619
um now with CSP the main win here is

870
00:35:40,619 --> 00:35:43,020
that it's a huge help in reducing the

871
00:35:43,020 --> 00:35:44,280
cross-site script scripting

872
00:35:44,280 --> 00:35:46,140
vulnerability or at least reducing the

873
00:35:46,140 --> 00:35:47,460
risk of them and so we'll talk about

874
00:35:47,460 --> 00:35:49,260
that more in a few minutes but the

875
00:35:49,260 --> 00:35:50,520
reason we're even talking about tsp

876
00:35:50,520 --> 00:35:52,500
today is because it's easiest to roll

877
00:35:52,500 --> 00:35:55,560
out early in the app life cycle it's a

878
00:35:55,560 --> 00:35:56,940
lot harder to roll out a Content

879
00:35:56,940 --> 00:35:59,220
security policy in an already mature app

880
00:35:59,220 --> 00:36:01,800
and there there's report only mode and

881
00:36:01,800 --> 00:36:03,540
things that you can do to make make it a

882
00:36:03,540 --> 00:36:05,520
little bit more smooth but I recommend

883
00:36:05,520 --> 00:36:07,800
starting with a default source of self

884
00:36:07,800 --> 00:36:11,160
and then adding exceptions which is what

885
00:36:11,160 --> 00:36:12,420
this section of the talk is talking

886
00:36:12,420 --> 00:36:15,420
about as needed in the the two main

887
00:36:15,420 --> 00:36:17,099
directives I generally am concerned with

888
00:36:17,099 --> 00:36:19,320
is a script source and then the connect

889
00:36:19,320 --> 00:36:20,820
source and I'm not going to get into

890
00:36:20,820 --> 00:36:23,339
much detail about those

891
00:36:23,339 --> 00:36:25,740
so with security headers what I normally

892
00:36:25,740 --> 00:36:28,140
see is folks looking at you know your

893
00:36:28,140 --> 00:36:29,700
domain in evaluating the security

894
00:36:29,700 --> 00:36:31,440
headers what a lot of folks don't

895
00:36:31,440 --> 00:36:34,800
realize is some headers CSP as an

896
00:36:34,800 --> 00:36:37,260
example can be set on a per page basis

897
00:36:37,260 --> 00:36:39,420
so looking at the the headers across the

898
00:36:39,420 --> 00:36:42,599
entire domain is not super useful so

899
00:36:42,599 --> 00:36:44,460
what we see a lot of a GitHub is cases

900
00:36:44,460 --> 00:36:46,260
where folks want to run a b tests with

901
00:36:46,260 --> 00:36:48,420
like different vendors uh different

902
00:36:48,420 --> 00:36:50,820
third-party JavaScript never makes me

903
00:36:50,820 --> 00:36:52,500
feel good when someone says third-party

904
00:36:52,500 --> 00:36:54,780
JavaScript but that's what the business

905
00:36:54,780 --> 00:36:56,579
needs

906
00:36:56,579 --> 00:36:58,740
so CSP is one of those headers that can

907
00:36:58,740 --> 00:37:00,900
be set per page so my recommendation

908
00:37:00,900 --> 00:37:04,380
here is to utilize one strong site-wide

909
00:37:04,380 --> 00:37:05,579
policy

910
00:37:05,579 --> 00:37:09,060
that is secure and then allow exceptions

911
00:37:09,060 --> 00:37:11,880
on a per page basis so as as you or

912
00:37:11,880 --> 00:37:14,460
other Engineers are seeking to connect

913
00:37:14,460 --> 00:37:16,560
to different sources pulling assets from

914
00:37:16,560 --> 00:37:19,619
various locations they can do so for

915
00:37:19,619 --> 00:37:22,079
those particular pages and I'll give you

916
00:37:22,079 --> 00:37:24,420
an example of what this looks like but

917
00:37:24,420 --> 00:37:26,579
what this does is allows us to have a

918
00:37:26,579 --> 00:37:30,060
very tight Global policy and then have

919
00:37:30,060 --> 00:37:32,280
exceptions at a page level that way the

920
00:37:32,280 --> 00:37:35,280
risk is reduced to a specific page or a

921
00:37:35,280 --> 00:37:37,380
specific set of pages

922
00:37:37,380 --> 00:37:39,359
again we use the secure headers Library

923
00:37:39,359 --> 00:37:41,579
which we also maintain this makes it

924
00:37:41,579 --> 00:37:43,800
super easy for all you rails developers

925
00:37:43,800 --> 00:37:46,760
you should check that out

926
00:37:47,280 --> 00:37:49,140
that's a good question and we can talk

927
00:37:49,140 --> 00:37:50,760
about that after but your single page

928
00:37:50,760 --> 00:37:52,260
app is probably communicating with an

929
00:37:52,260 --> 00:37:55,619
API somewhere right so there's two sets

930
00:37:55,619 --> 00:37:58,680
of concerns in that situation but

931
00:37:58,680 --> 00:38:00,599
um you can use the HTTP meta tag but I'm

932
00:38:00,599 --> 00:38:04,880
not sure how that works in per page apps

933
00:38:05,220 --> 00:38:07,200
so I want to give you a clear example of

934
00:38:07,200 --> 00:38:09,780
what I'm talking about here uh that's a

935
00:38:09,780 --> 00:38:11,520
joke because clearly this is is not

936
00:38:11,520 --> 00:38:13,140
clear at all but if if you go to

937
00:38:13,140 --> 00:38:16,500
github.com readme

938
00:38:16,500 --> 00:38:18,540
um you see a Content security policy

939
00:38:18,540 --> 00:38:21,119
which differs from my profile on

940
00:38:21,119 --> 00:38:24,420
github.com and the readme project is an

941
00:38:24,420 --> 00:38:26,579
area where we allow users to provide

942
00:38:26,579 --> 00:38:29,640
videos to talk about their projects and

943
00:38:29,640 --> 00:38:32,339
stuff and so we made the decision that

944
00:38:32,339 --> 00:38:35,280
we're okay sourcing from these

945
00:38:35,280 --> 00:38:38,339
particular domains on this page but we

946
00:38:38,339 --> 00:38:40,859
don't want all of github.com to be

947
00:38:40,859 --> 00:38:44,640
exposed to CTF assets.net as much as I'd

948
00:38:44,640 --> 00:38:47,400
love to trust CTF assets.net I really

949
00:38:47,400 --> 00:38:49,920
don't even know who they are so

950
00:38:49,920 --> 00:38:52,260
um so this is an example of of where we

951
00:38:52,260 --> 00:38:55,320
have reduced the risk across github.com

952
00:38:55,320 --> 00:38:58,440
in allowed our product team to do the

953
00:38:58,440 --> 00:39:00,119
work they needed to in a particular page

954
00:39:00,119 --> 00:39:02,820
is anyone doing CSP on a per page level

955
00:39:02,820 --> 00:39:07,400
you are okay good good

956
00:39:08,339 --> 00:39:11,940
all right so CSP

957
00:39:11,940 --> 00:39:15,240
um this leads us to cross-site scripting

958
00:39:15,240 --> 00:39:19,500
edge cases in xss so CSP which we just

959
00:39:19,500 --> 00:39:21,300
spent the last five or ten minutes you

960
00:39:21,300 --> 00:39:23,700
know talking about is really in my

961
00:39:23,700 --> 00:39:25,920
opinion only for defense in depth if

962
00:39:25,920 --> 00:39:27,900
this is your primary mitigation strategy

963
00:39:27,900 --> 00:39:30,180
for cross-site scripting it's not

964
00:39:30,180 --> 00:39:32,099
sufficient in fact if you look at the

965
00:39:32,099 --> 00:39:34,079
Mozilla documentation they clearly say

966
00:39:34,079 --> 00:39:37,800
CSP is an added layer of security right

967
00:39:37,800 --> 00:39:41,160
so in in so few words that's that's

968
00:39:41,160 --> 00:39:42,780
saying a lot right there

969
00:39:42,780 --> 00:39:45,900
so use CSP spend the time to have a

970
00:39:45,900 --> 00:39:48,000
well-defined policy with exceptions

971
00:39:48,000 --> 00:39:50,579
don't rely on it

972
00:39:50,579 --> 00:39:53,579
output encoding is still key

973
00:39:53,579 --> 00:39:55,640
um

974
00:39:56,579 --> 00:39:58,680
I would say these days most of the

975
00:39:58,680 --> 00:40:01,200
Frameworks I look at do output encoding

976
00:40:01,200 --> 00:40:04,200
by default rail certainly does and the

977
00:40:04,200 --> 00:40:05,880
largest concern I normally have these

978
00:40:05,880 --> 00:40:08,220
days is with exceptions or exemptions

979
00:40:08,220 --> 00:40:11,520
from that default output encoding so in

980
00:40:11,520 --> 00:40:13,920
rails for instance and I guess next year

981
00:40:13,920 --> 00:40:16,160
I'll come with a different uh example

982
00:40:16,160 --> 00:40:18,900
golang maybe I don't know

983
00:40:18,900 --> 00:40:20,660
um so in rails for instance if you call

984
00:40:20,660 --> 00:40:24,240
the.html Safe what that does is say we

985
00:40:24,240 --> 00:40:27,960
trust this as HTML and we want to allow

986
00:40:27,960 --> 00:40:30,720
it to be rendered so if you see HTML

987
00:40:30,720 --> 00:40:33,119
safe there's user input it's probably

988
00:40:33,119 --> 00:40:34,980
going to be cross-eyed scripting and

989
00:40:34,980 --> 00:40:36,960
that's because we've opted out of rails

990
00:40:36,960 --> 00:40:39,359
default protection mechanisms

991
00:40:39,359 --> 00:40:42,720
um more issues than that but the next

992
00:40:42,720 --> 00:40:44,160
thing I want to talk about is attribute

993
00:40:44,160 --> 00:40:46,859
injection uh

994
00:40:46,859 --> 00:40:49,859
towards the the last couple years of my

995
00:40:49,859 --> 00:40:52,560
Consulting career uh attribute injection

996
00:40:52,560 --> 00:40:56,820
was extremely common and this is I would

997
00:40:56,820 --> 00:40:58,200
say the majority of the cross-site

998
00:40:58,200 --> 00:41:01,200
scripting vulnerabilities we we reported

999
00:41:01,200 --> 00:41:02,640
um an attribute injection is when you're

1000
00:41:02,640 --> 00:41:04,740
able to inject user input into an

1001
00:41:04,740 --> 00:41:06,900
attribute of a tag

1002
00:41:06,900 --> 00:41:09,240
and so one of the main issues here is

1003
00:41:09,240 --> 00:41:11,820
many web application firewalls look for

1004
00:41:11,820 --> 00:41:14,700
brackets in particular if your.net

1005
00:41:14,700 --> 00:41:16,320
developer you may be familiar with

1006
00:41:16,320 --> 00:41:18,359
request validator request validator

1007
00:41:18,359 --> 00:41:19,920
looks specifically for a bracket

1008
00:41:19,920 --> 00:41:22,880
followed by an alphabetic character

1009
00:41:22,880 --> 00:41:25,680
attribute injection payloads would not

1010
00:41:25,680 --> 00:41:27,660
have that so they'll bypass request

1011
00:41:27,660 --> 00:41:29,640
validator they'll bypass a lot of the

1012
00:41:29,640 --> 00:41:31,380
the the

1013
00:41:31,380 --> 00:41:33,960
the laughs out there

1014
00:41:33,960 --> 00:41:35,820
um and that's a big problem and even

1015
00:41:35,820 --> 00:41:38,099
more so unquoted attributes

1016
00:41:38,099 --> 00:41:39,540
um so if you're rendering user input

1017
00:41:39,540 --> 00:41:44,040
inside a tag without quoted attributes

1018
00:41:44,040 --> 00:41:45,240
there's a cross-site scripting

1019
00:41:45,240 --> 00:41:47,040
vulnerability right there and that's

1020
00:41:47,040 --> 00:41:49,020
because a user can enter some data with

1021
00:41:49,020 --> 00:41:51,240
a space to inject a new attribute and

1022
00:41:51,240 --> 00:41:54,119
then suddenly your page is a bit out of

1023
00:41:54,119 --> 00:41:55,260
control

1024
00:41:55,260 --> 00:41:58,619
so input validation super helpful but

1025
00:41:58,619 --> 00:42:00,960
again that's defense in depth when we

1026
00:42:00,960 --> 00:42:02,760
can do input validation we certainly

1027
00:42:02,760 --> 00:42:04,260
should be doing it

1028
00:42:04,260 --> 00:42:07,440
but that's that's easier said than done

1029
00:42:07,440 --> 00:42:09,240
um and it doesn't doesn't always solve

1030
00:42:09,240 --> 00:42:11,779
the problem here

1031
00:42:12,599 --> 00:42:15,000
what if what if we want to allow users

1032
00:42:15,000 --> 00:42:17,460
to have some HTML tags what if we want

1033
00:42:17,460 --> 00:42:19,619
them to provide a bold tag for instance

1034
00:42:19,619 --> 00:42:21,780
or what if we want a wysiwyg editor

1035
00:42:21,780 --> 00:42:23,520
where they can you know update their

1036
00:42:23,520 --> 00:42:26,880
profile have some tags anytime I see

1037
00:42:26,880 --> 00:42:30,540
something like this that's my reaction

1038
00:42:30,540 --> 00:42:33,480
okay seriously though I don't think I've

1039
00:42:33,480 --> 00:42:37,140
ever been on a vulnerability assessment

1040
00:42:37,140 --> 00:42:39,180
or pen test encountered one of these and

1041
00:42:39,180 --> 00:42:40,859
not found cross-site scripting in some

1042
00:42:40,859 --> 00:42:41,880
variant

1043
00:42:41,880 --> 00:42:44,579
if you're allowing users to provide a

1044
00:42:44,579 --> 00:42:46,859
set of HTML there's probably going to be

1045
00:42:46,859 --> 00:42:48,660
a problem there so how do we how do we

1046
00:42:48,660 --> 00:42:50,040
solve this if your business requirement

1047
00:42:50,040 --> 00:42:52,140
is we want users to be able to provide

1048
00:42:52,140 --> 00:42:55,380
HTML how do you do that securely

1049
00:42:55,380 --> 00:42:57,240
so this goes back to our exceptions

1050
00:42:57,240 --> 00:43:00,000
process so in our secure coding policies

1051
00:43:00,000 --> 00:43:02,220
that we all have we say use output

1052
00:43:02,220 --> 00:43:04,260
encoding that's not going to work in

1053
00:43:04,260 --> 00:43:05,940
this case because we want them to

1054
00:43:05,940 --> 00:43:08,040
provide HTML

1055
00:43:08,040 --> 00:43:09,960
um github.com we allow users to provide

1056
00:43:09,960 --> 00:43:12,359
HTML we allow users to provide markdown

1057
00:43:12,359 --> 00:43:14,220
which is converted to HTML so this is a

1058
00:43:14,220 --> 00:43:16,520
problem I deal with every single day

1059
00:43:16,520 --> 00:43:19,079
in developers by default are going to

1060
00:43:19,079 --> 00:43:21,599
opt out of the framework mitigation so

1061
00:43:21,599 --> 00:43:23,400
we're going to use HTML safe because

1062
00:43:23,400 --> 00:43:24,720
that's going to make things work by

1063
00:43:24,720 --> 00:43:26,460
default but then we're going to have

1064
00:43:26,460 --> 00:43:27,960
cross-8 scripting

1065
00:43:27,960 --> 00:43:30,660
so the key here really is to focus on

1066
00:43:30,660 --> 00:43:32,700
your plan take a step back and think

1067
00:43:32,700 --> 00:43:36,599
about what tags do our users need to be

1068
00:43:36,599 --> 00:43:39,359
able to use do they need a bold tag do

1069
00:43:39,359 --> 00:43:42,720
they need to be able to provide links

1070
00:43:42,720 --> 00:43:45,060
um do they need to provide JavaScript

1071
00:43:45,060 --> 00:43:47,280
tags probably not on that one but

1072
00:43:47,280 --> 00:43:48,960
important part is having a plan and

1073
00:43:48,960 --> 00:43:50,520
understanding what exactly you want them

1074
00:43:50,520 --> 00:43:53,339
to provide next thing identify a list of

1075
00:43:53,339 --> 00:43:55,099
attributes that need to be supported

1076
00:43:55,099 --> 00:43:58,020
these attributes are things like an href

1077
00:43:58,020 --> 00:43:59,579
if you want a user to provide a link

1078
00:43:59,579 --> 00:44:01,260
they probably need to be able to provide

1079
00:44:01,260 --> 00:44:03,740
the href attribute

1080
00:44:03,740 --> 00:44:06,119
and then probably a bit less important

1081
00:44:06,119 --> 00:44:08,099
Now understand the context in which the

1082
00:44:08,099 --> 00:44:09,780
tags will be rendered if they're going

1083
00:44:09,780 --> 00:44:12,599
to be used in JavaScript scenario you

1084
00:44:12,599 --> 00:44:13,920
have to handle things a bit differently

1085
00:44:13,920 --> 00:44:17,160
than if they're outputted into HTML

1086
00:44:17,160 --> 00:44:18,780
itself

1087
00:44:18,780 --> 00:44:21,540
so the real solution is utilize a

1088
00:44:21,540 --> 00:44:23,339
trusted sanitizer

1089
00:44:23,339 --> 00:44:25,319
and if I came here and said this 10

1090
00:44:25,319 --> 00:44:26,760
years ago I probably would have been

1091
00:44:26,760 --> 00:44:30,060
laughed off the stage because sanitizers

1092
00:44:30,060 --> 00:44:32,280
um have some bad connotations there

1093
00:44:32,280 --> 00:44:35,400
but the real emphasis here is spending

1094
00:44:35,400 --> 00:44:38,780
the time to understand the library

1095
00:44:39,000 --> 00:44:40,680
Dom purify

1096
00:44:40,680 --> 00:44:44,099
does anyone use Dom purify

1097
00:44:44,099 --> 00:44:45,960
like two people that is absolutely

1098
00:44:45,960 --> 00:44:48,480
terrifying to me

1099
00:44:48,480 --> 00:44:51,300
Dom purify is a sanitizer written in

1100
00:44:51,300 --> 00:44:55,020
JavaScript super prevalent on uh you

1101
00:44:55,020 --> 00:44:57,660
know angular apps react apps

1102
00:44:57,660 --> 00:45:01,619
Etc and on their official readme they

1103
00:45:01,619 --> 00:45:04,260
say it's easy you just Source it in and

1104
00:45:04,260 --> 00:45:07,200
then call Dom purify.sanitize

1105
00:45:07,200 --> 00:45:09,119
super easy and then you'll have clean

1106
00:45:09,119 --> 00:45:11,339
output and you can work with that

1107
00:45:11,339 --> 00:45:13,560
okay so I give that a huge thumbs down

1108
00:45:13,560 --> 00:45:16,619
that is not good advice it's never that

1109
00:45:16,619 --> 00:45:18,720
easy is it

1110
00:45:18,720 --> 00:45:20,940
in this goes back to knowing your

1111
00:45:20,940 --> 00:45:23,099
libraries so if you look at the the

1112
00:45:23,099 --> 00:45:27,060
screenshot from the readme they say that

1113
00:45:27,060 --> 00:45:30,839
note that by default we permit HTML SVG

1114
00:45:30,839 --> 00:45:34,859
and mathml okay what does that even mean

1115
00:45:34,859 --> 00:45:36,780
I mean we're talking about allowing

1116
00:45:36,780 --> 00:45:38,760
users to provide a set of HTML do we

1117
00:45:38,760 --> 00:45:40,920
want them to provide svgs what's the

1118
00:45:40,920 --> 00:45:44,099
risk there what even is mathml

1119
00:45:44,099 --> 00:45:46,859
um well I know but only because of

1120
00:45:46,859 --> 00:45:50,579
incident response and stuff but yeah we

1121
00:45:50,579 --> 00:45:52,740
know we know about mathml

1122
00:45:52,740 --> 00:45:54,599
and their recommendation is to use

1123
00:45:54,599 --> 00:45:57,300
profiles all right that indicate we only

1124
00:45:57,300 --> 00:45:59,579
want to render HTML that's great but

1125
00:45:59,579 --> 00:46:00,960
that's not what they said when they told

1126
00:46:00,960 --> 00:46:02,700
us it was easy to use

1127
00:46:02,700 --> 00:46:04,680
so that's a pretty big problem and by

1128
00:46:04,680 --> 00:46:06,720
the way not picking on the Dom purify

1129
00:46:06,720 --> 00:46:09,119
folks they have a very well maintained

1130
00:46:09,119 --> 00:46:12,300
repository when I looked uh

1131
00:46:12,300 --> 00:46:14,460
uh probably about a week ago they had no

1132
00:46:14,460 --> 00:46:17,040
open issues no open PRS they're actively

1133
00:46:17,040 --> 00:46:19,920
resolving bugs vulnerabilities Etc so

1134
00:46:19,920 --> 00:46:24,119
huge props The Cure 53 folks on that

1135
00:46:24,119 --> 00:46:26,280
so what is the default Behavior what

1136
00:46:26,280 --> 00:46:29,280
HTML tags will be rendered as HTML what

1137
00:46:29,280 --> 00:46:31,440
will be removed will they be encoded

1138
00:46:31,440 --> 00:46:33,720
there's a lot of questions they say it's

1139
00:46:33,720 --> 00:46:35,280
easy to use the library but I don't

1140
00:46:35,280 --> 00:46:36,660
understand what the outcome is going to

1141
00:46:36,660 --> 00:46:38,339
be

1142
00:46:38,339 --> 00:46:43,319
so oh typo bad on me the the answer here

1143
00:46:43,319 --> 00:46:47,160
is roughly 110 tags will be outputted

1144
00:46:47,160 --> 00:46:50,220
that is they will not be removed they

1145
00:46:50,220 --> 00:46:54,300
will not be encoded 110 HTML tags will

1146
00:46:54,300 --> 00:46:56,400
pass through those filters what are

1147
00:46:56,400 --> 00:46:58,619
those well you're free to go look

1148
00:46:58,619 --> 00:47:00,119
um but in order to understand the risk

1149
00:47:00,119 --> 00:47:02,099
pose your application you have to

1150
00:47:02,099 --> 00:47:04,560
understand what those tags are are

1151
00:47:04,560 --> 00:47:07,079
attributes supported what is that story

1152
00:47:07,079 --> 00:47:09,300
Yeah by default they'll allow you to

1153
00:47:09,300 --> 00:47:11,099
render over 100 different attributes

1154
00:47:11,099 --> 00:47:14,880
okay so what's what's the risk there and

1155
00:47:14,880 --> 00:47:18,720
Dom purify uses an allow list approach

1156
00:47:18,720 --> 00:47:21,359
where you can explicitly deny certain

1157
00:47:21,359 --> 00:47:23,040
attributes so if if you had a business

1158
00:47:23,040 --> 00:47:25,680
requirement that said like hey they have

1159
00:47:25,680 --> 00:47:28,560
a great source of of tags or attributes

1160
00:47:28,560 --> 00:47:30,599
but we don't want our users to be able

1161
00:47:30,599 --> 00:47:33,300
to provide one of these yeah you can

1162
00:47:33,300 --> 00:47:37,220
deny list it seems fine right

1163
00:47:37,260 --> 00:47:39,440
so if we look at this particular example

1164
00:47:39,440 --> 00:47:43,500
anyone want to take a stab at the

1165
00:47:43,500 --> 00:47:46,020
expectation here what so we have some

1166
00:47:46,020 --> 00:47:48,240
payload which we've hard coded it's a

1167
00:47:48,240 --> 00:47:50,460
link with a class and a data URL

1168
00:47:50,460 --> 00:47:53,280
attribute called Dom purify and then we

1169
00:47:53,280 --> 00:47:54,900
just drop it into the Dom through enter

1170
00:47:54,900 --> 00:47:56,760
HTML so how is that going to render

1171
00:47:56,760 --> 00:48:00,020
anyone have any thoughts

1172
00:48:03,500 --> 00:48:06,980
that's a good question

1173
00:48:09,359 --> 00:48:10,920
that's exactly how it's going to render

1174
00:48:10,920 --> 00:48:13,980
it does not strip out data URL it does

1175
00:48:13,980 --> 00:48:16,800
not strip out the class or the href so

1176
00:48:16,800 --> 00:48:18,720
that entire payload is going to be

1177
00:48:18,720 --> 00:48:20,880
rendered as is

1178
00:48:20,880 --> 00:48:22,500
um and so there there could be some

1179
00:48:22,500 --> 00:48:24,480
concerns here

1180
00:48:24,480 --> 00:48:26,460
so the major takeaway is that using Dom

1181
00:48:26,460 --> 00:48:29,400
purify with default settings will allow

1182
00:48:29,400 --> 00:48:31,859
us to inject classes which we just saw

1183
00:48:31,859 --> 00:48:34,260
it allow us to inject data attributes

1184
00:48:34,260 --> 00:48:36,599
which we just saw I didn't show you but

1185
00:48:36,599 --> 00:48:39,000
you can inject IDs as well that's one of

1186
00:48:39,000 --> 00:48:41,460
the hundred permitted attributes and

1187
00:48:41,460 --> 00:48:44,819
more again 100 attributes 100 tags

1188
00:48:44,819 --> 00:48:46,560
there's there's a lot going on that Dom

1189
00:48:46,560 --> 00:48:48,480
purify allows by default

1190
00:48:48,480 --> 00:48:51,720
what about event handlers I mean this is

1191
00:48:51,720 --> 00:48:54,060
this is the day of the modern web like

1192
00:48:54,060 --> 00:48:55,680
we are doing a lot of things in

1193
00:48:55,680 --> 00:48:57,500
JavaScript that are relying on the Dom

1194
00:48:57,500 --> 00:49:00,359
so what what does that scenario look

1195
00:49:00,359 --> 00:49:01,920
like

1196
00:49:01,920 --> 00:49:05,400
so if we take a quick look at this in

1197
00:49:05,400 --> 00:49:08,520
the top screenshot we have a very basic

1198
00:49:08,520 --> 00:49:11,400
um you know HTML uh full it's not even a

1199
00:49:11,400 --> 00:49:13,500
form it's just some basic HTML right

1200
00:49:13,500 --> 00:49:15,900
with an event trigger and so the

1201
00:49:15,900 --> 00:49:19,380
JavaScript below looks for the payload

1202
00:49:19,380 --> 00:49:22,500
we've provided it sanitizes it and then

1203
00:49:22,500 --> 00:49:24,660
injects it to the sandbox

1204
00:49:24,660 --> 00:49:27,480
all right and so from there

1205
00:49:27,480 --> 00:49:29,819
um we have some other uh logic which may

1206
00:49:29,819 --> 00:49:31,200
not be totally clear

1207
00:49:31,200 --> 00:49:33,359
but and you guys can't even read the

1208
00:49:33,359 --> 00:49:35,220
line number but line 15 down there we

1209
00:49:35,220 --> 00:49:37,260
see another dot enter HTML which is

1210
00:49:37,260 --> 00:49:39,599
obviously a huge flag

1211
00:49:39,599 --> 00:49:41,700
um so we're communicating with some API

1212
00:49:41,700 --> 00:49:44,579
based on the data provided from the item

1213
00:49:44,579 --> 00:49:46,380
ID

1214
00:49:46,380 --> 00:49:48,720
um this could be pretty risky anytime

1215
00:49:48,720 --> 00:49:50,400
you see enter HTML you definitely want

1216
00:49:50,400 --> 00:49:53,099
to evaluate that so the last line here

1217
00:49:53,099 --> 00:49:55,619
which I am super sorry because I know

1218
00:49:55,619 --> 00:49:57,359
you can't see that in the back

1219
00:49:57,359 --> 00:50:01,260
is a payload with uh it's a div tag with

1220
00:50:01,260 --> 00:50:04,680
a class of find reviews we specify the

1221
00:50:04,680 --> 00:50:07,520
data attribute with another typo there

1222
00:50:07,520 --> 00:50:10,400
and so that'll get injected to the page

1223
00:50:10,400 --> 00:50:13,859
none of that will be stripped out and so

1224
00:50:13,859 --> 00:50:17,160
what we'll have is we'll then have uh an

1225
00:50:17,160 --> 00:50:20,400
injected class into our Dom which is

1226
00:50:20,400 --> 00:50:22,440
then able to be used to trigger other

1227
00:50:22,440 --> 00:50:23,880
functionality

1228
00:50:23,880 --> 00:50:26,160
so in this case it's going to initiate

1229
00:50:26,160 --> 00:50:29,220
the show reviews mechanism make an API

1230
00:50:29,220 --> 00:50:32,520
call and then render the response from

1231
00:50:32,520 --> 00:50:36,660
that each uh that API as as HTML so you

1232
00:50:36,660 --> 00:50:38,880
can't see the entire risk here but what

1233
00:50:38,880 --> 00:50:41,760
we're demonstrating is that our our

1234
00:50:41,760 --> 00:50:44,880
sanitizer is allowing the user to take

1235
00:50:44,880 --> 00:50:47,940
full control of the Dom by using event

1236
00:50:47,940 --> 00:50:50,700
handlers so and I know I'm not even

1237
00:50:50,700 --> 00:50:52,920
gonna ask I know you folks because I

1238
00:50:52,920 --> 00:50:55,619
know I don't know all of the event

1239
00:50:55,619 --> 00:50:58,200
handlers or observables in my

1240
00:50:58,200 --> 00:50:59,880
application so there's a huge attack

1241
00:50:59,880 --> 00:51:03,960
service here waiting to be exploited

1242
00:51:03,960 --> 00:51:04,980
foreign

1243
00:51:04,980 --> 00:51:07,559
part of all this and kind of circling

1244
00:51:07,559 --> 00:51:09,839
back to the beginning is Dom cross 8

1245
00:51:09,839 --> 00:51:12,180
scripting is nearly impossible to

1246
00:51:12,180 --> 00:51:13,920
investigate because all the events

1247
00:51:13,920 --> 00:51:15,780
happen in the Dom they're they're never

1248
00:51:15,780 --> 00:51:18,240
sent to the server so our incident

1249
00:51:18,240 --> 00:51:20,160
Response Team such as Alex is never

1250
00:51:20,160 --> 00:51:21,839
going to know conclusively if someone

1251
00:51:21,839 --> 00:51:24,059
was compromised through this

1252
00:51:24,059 --> 00:51:26,520
so this is something that we we really

1253
00:51:26,520 --> 00:51:29,400
need to address and that goes back to

1254
00:51:29,400 --> 00:51:31,260
really making sure you understand your

1255
00:51:31,260 --> 00:51:32,940
libraries because the default's

1256
00:51:32,940 --> 00:51:35,720
generally not sufficient

1257
00:51:35,720 --> 00:51:38,700
so key takeaways

1258
00:51:38,700 --> 00:51:41,280
um incidents happen definitely want to

1259
00:51:41,280 --> 00:51:43,260
design in a way that allows you to

1260
00:51:43,260 --> 00:51:45,599
improve the incident response scenario

1261
00:51:45,599 --> 00:51:47,220
work with your incident responders

1262
00:51:47,220 --> 00:51:49,079
understand what data they want to see

1263
00:51:49,079 --> 00:51:50,640
log to understand what they don't want

1264
00:51:50,640 --> 00:51:52,980
to see logged there's there's a lot more

1265
00:51:52,980 --> 00:51:54,660
to it than that so

1266
00:51:54,660 --> 00:51:57,180
prevent regression if you're not using

1267
00:51:57,180 --> 00:52:00,900
tests in CI CD that's a huge problem if

1268
00:52:00,900 --> 00:52:02,819
you're not using security specific tests

1269
00:52:02,819 --> 00:52:06,059
that's another problem so don't waste

1270
00:52:06,059 --> 00:52:08,720
the incidence turn those into test case

1271
00:52:08,720 --> 00:52:11,099
expand your test coverage use

1272
00:52:11,099 --> 00:52:14,040
permutations to test for other variants

1273
00:52:14,040 --> 00:52:15,660
there's no reason your application

1274
00:52:15,660 --> 00:52:18,540
couldn't have a permutation set of like

1275
00:52:18,540 --> 00:52:21,000
SQL injection payloads for instance it's

1276
00:52:21,000 --> 00:52:22,319
pretty easy win

1277
00:52:22,319 --> 00:52:24,420
in when we work with consulting firms

1278
00:52:24,420 --> 00:52:26,640
who provide proof of Concepts take their

1279
00:52:26,640 --> 00:52:28,319
proof of Concepts and put them into your

1280
00:52:28,319 --> 00:52:29,400
test Suite

1281
00:52:29,400 --> 00:52:32,520
support extension exemption

1282
00:52:32,520 --> 00:52:33,140
um

1283
00:52:33,140 --> 00:52:36,000
exceptions are going to be needed so you

1284
00:52:36,000 --> 00:52:37,619
know make sure that folks have a clear

1285
00:52:37,619 --> 00:52:40,559
path to request exceptions make sure the

1286
00:52:40,559 --> 00:52:42,540
security team is supportive of folks

1287
00:52:42,540 --> 00:52:44,760
deviating from the the paved paths when

1288
00:52:44,760 --> 00:52:46,800
necessary just make sure to have a

1289
00:52:46,800 --> 00:52:48,839
conversation for it make sure it's

1290
00:52:48,839 --> 00:52:50,640
auditable make sure you can hold folks

1291
00:52:50,640 --> 00:52:52,619
accountable for it and just continuously

1292
00:52:52,619 --> 00:52:55,800
iterate to improve and then most most

1293
00:52:55,800 --> 00:52:57,300
importantly to me is understand your

1294
00:52:57,300 --> 00:52:59,520
libraries everything we do these days is

1295
00:52:59,520 --> 00:53:01,380
built on third-party code we only

1296
00:53:01,380 --> 00:53:04,200
understand a fraction of the surface in

1297
00:53:04,200 --> 00:53:07,079
that third-party code so understand the

1298
00:53:07,079 --> 00:53:09,059
security critical requirements there if

1299
00:53:09,059 --> 00:53:10,920
you use a sanitizer understand what the

1300
00:53:10,920 --> 00:53:13,940
default behaviors are

1301
00:53:14,099 --> 00:53:16,500
so with that if there's any questions

1302
00:53:16,500 --> 00:53:19,079
happy to try to take those it's also I

1303
00:53:19,079 --> 00:53:21,300
think lunch is probably here too so

1304
00:53:21,300 --> 00:53:23,780
yes

1305
00:53:24,180 --> 00:53:26,540
allow them deny options

1306
00:53:26,540 --> 00:53:29,040
profiles as well you can create custom

1307
00:53:29,040 --> 00:53:31,500
profiles they even have uh what they

1308
00:53:31,500 --> 00:53:33,599
call hooks so let's say you want to

1309
00:53:33,599 --> 00:53:36,420
allow a subset of an attribute so like

1310
00:53:36,420 --> 00:53:38,400
classes that are prefects with like

1311
00:53:38,400 --> 00:53:40,859
GitHub hyphen you can do that by having

1312
00:53:40,859 --> 00:53:43,200
a hook that says only allow classes that

1313
00:53:43,200 --> 00:53:45,599
meet this regular expression so pretty

1314
00:53:45,599 --> 00:53:48,780
extensible from that perspective yeah

1315
00:53:48,780 --> 00:53:50,819
yes when you're documenting data

1316
00:53:50,819 --> 00:53:52,559
classifications in your application how

1317
00:53:52,559 --> 00:53:54,660
do you make sure that doesn't get stale

1318
00:53:54,660 --> 00:53:56,520
good question

1319
00:53:56,520 --> 00:53:58,260
um this is more of like a compliance

1320
00:53:58,260 --> 00:54:00,300
side thing so if you have a compliance

1321
00:54:00,300 --> 00:54:01,800
team work with them to understand what

1322
00:54:01,800 --> 00:54:03,720
that looks like chances are they have a

1323
00:54:03,720 --> 00:54:05,160
place where that stuff should live

1324
00:54:05,160 --> 00:54:08,040
already I've seen folks go as far as

1325
00:54:08,040 --> 00:54:10,079
like annotating it at the like the

1326
00:54:10,079 --> 00:54:12,420
method level in the code

1327
00:54:12,420 --> 00:54:14,280
um for instance you know when you're

1328
00:54:14,280 --> 00:54:16,260
you're writing like your javadoc and you

1329
00:54:16,260 --> 00:54:18,119
have like your parameters you could have

1330
00:54:18,119 --> 00:54:20,220
a classification right there and then

1331
00:54:20,220 --> 00:54:22,319
you could you could use you know unit

1332
00:54:22,319 --> 00:54:25,500
testing to verify that any parameter has

1333
00:54:25,500 --> 00:54:27,480
a classification with it a lot of things

1334
00:54:27,480 --> 00:54:29,819
you can do it's really whatever fits

1335
00:54:29,819 --> 00:54:31,680
best with your your team's development

1336
00:54:31,680 --> 00:54:33,839
practices

1337
00:54:33,839 --> 00:54:36,799
any other questions

1338
00:54:38,839 --> 00:54:41,579
that depends on the situation but most

1339
00:54:41,579 --> 00:54:43,800
likely not now

1340
00:54:43,800 --> 00:54:46,800
um so in and we can talk about this more

1341
00:54:46,800 --> 00:54:49,079
when we're not being recorded but

1342
00:54:49,079 --> 00:54:51,660
um there there are definitely scenarios

1343
00:54:51,660 --> 00:54:54,359
like that where like you can inject an

1344
00:54:54,359 --> 00:54:56,880
attribute which the CSP won't prevent

1345
00:54:56,880 --> 00:54:59,520
which will trigger an observer and

1346
00:54:59,520 --> 00:55:01,859
suddenly you you know anything your

1347
00:55:01,859 --> 00:55:04,680
Observer is capable of doing will will

1348
00:55:04,680 --> 00:55:07,500
be evaluated so some pretty nasty edge

1349
00:55:07,500 --> 00:55:10,460
cases in that area

1350
00:55:10,500 --> 00:55:13,640
anyone else

1351
00:55:14,880 --> 00:55:17,880
all right I think that's it hey they're

1352
00:55:17,880 --> 00:55:21,980
clapping for me that was Tiny

