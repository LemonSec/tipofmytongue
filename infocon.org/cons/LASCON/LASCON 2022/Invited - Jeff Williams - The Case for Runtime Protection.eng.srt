1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:53,780
[Music]

6
00:00:53,780 --> 00:00:56,039
some of you may know I've been working

7
00:00:56,039 --> 00:00:58,739
in appsec for about 20 years now

8
00:00:58,739 --> 00:01:02,520
I was one of the founders of oasp and uh

9
00:01:02,520 --> 00:01:04,500
was the global chair of us for the first

10
00:01:04,500 --> 00:01:06,360
10 years I'm really passionate about

11
00:01:06,360 --> 00:01:08,159
this I'm really glad that you showed up

12
00:01:08,159 --> 00:01:11,159
today uh I've heard a couple apocalyptic

13
00:01:11,159 --> 00:01:14,040
talks already uh

14
00:01:14,040 --> 00:01:18,420
from uh and I know uh Robert uh is going

15
00:01:18,420 --> 00:01:20,340
to give a talk about infosec a little

16
00:01:20,340 --> 00:01:23,159
later so I think that's uh gonna be it's

17
00:01:23,159 --> 00:01:24,780
gonna be worth your while but I'm gonna

18
00:01:24,780 --> 00:01:26,580
try and give an upbeat talk

19
00:01:26,580 --> 00:01:28,920
um I I'm pretty optimistic about what we

20
00:01:28,920 --> 00:01:31,920
can do in abstract I thought uh you know

21
00:01:31,920 --> 00:01:33,900
Jim's talked this morning about the

22
00:01:33,900 --> 00:01:36,360
history of appsec was interesting

23
00:01:36,360 --> 00:01:38,220
he framed it up as like we've

24
00:01:38,220 --> 00:01:40,500
accomplished so much but frankly if you

25
00:01:40,500 --> 00:01:42,540
look at the examples he used he said we

26
00:01:42,540 --> 00:01:45,299
got SSL everywhere and we fixed password

27
00:01:45,299 --> 00:01:48,540
encryption or something like

28
00:01:48,540 --> 00:01:53,220
really not a lot I would say in the 20

29
00:01:53,220 --> 00:01:55,259
years I've been doing this we've fixed

30
00:01:55,259 --> 00:01:57,600
almost nothing in appsack that was top

31
00:01:57,600 --> 00:01:59,880
10 is roughly the same as when I wrote

32
00:01:59,880 --> 00:02:02,399
the first one in 2002.

33
00:02:02,399 --> 00:02:04,320
and it's 20 years later and it's still

34
00:02:04,320 --> 00:02:06,719
the same stuff that's terrifying to me

35
00:02:06,719 --> 00:02:10,318
so I really think we need new ideas we

36
00:02:10,318 --> 00:02:11,940
you know we're still at the in the Stone

37
00:02:11,940 --> 00:02:14,819
Age and we really need some creative new

38
00:02:14,819 --> 00:02:17,580
aggressive approaches uh I am super

39
00:02:17,580 --> 00:02:19,800
excited about what the US government is

40
00:02:19,800 --> 00:02:20,819
doing I can't believe I just said that

41
00:02:20,819 --> 00:02:22,500
sentence but like

42
00:02:22,500 --> 00:02:24,840
the U.S government is making

43
00:02:24,840 --> 00:02:27,120
applications security transparent

44
00:02:27,120 --> 00:02:29,099
they're forcing companies to be open

45
00:02:29,099 --> 00:02:30,959
about their s-bombs they're going to

46
00:02:30,959 --> 00:02:33,300
have to create an attestation for their

47
00:02:33,300 --> 00:02:35,400
software security practices that is

48
00:02:35,400 --> 00:02:36,780
radical change

49
00:02:36,780 --> 00:02:38,819
when we first created OAS we made the

50
00:02:38,819 --> 00:02:41,280
mission statement and I drafted it and

51
00:02:41,280 --> 00:02:43,980
it was at OAS our mission will be to

52
00:02:43,980 --> 00:02:46,739
make application security visible so

53
00:02:46,739 --> 00:02:48,720
that people can make informed decisions

54
00:02:48,720 --> 00:02:50,160
about risk

55
00:02:50,160 --> 00:02:52,200
and that was specifically chosen because

56
00:02:52,200 --> 00:02:54,000
when we make application security

57
00:02:54,000 --> 00:02:57,000
visible we can change the market market

58
00:02:57,000 --> 00:02:59,400
forces can work to encourage application

59
00:02:59,400 --> 00:03:01,620
security right now application security

60
00:03:01,620 --> 00:03:03,420
is mostly completely hidden how many of

61
00:03:03,420 --> 00:03:05,958
you Bank online

62
00:03:06,120 --> 00:03:08,160
okay a lot of you the rest of you are

63
00:03:08,160 --> 00:03:09,420
lying

64
00:03:09,420 --> 00:03:11,340
it's true because your data is in those

65
00:03:11,340 --> 00:03:12,780
systems anyway so even if you're not

66
00:03:12,780 --> 00:03:14,280
Banking online your data is still there

67
00:03:14,280 --> 00:03:15,840
but

68
00:03:15,840 --> 00:03:17,519
how much do you know

69
00:03:17,519 --> 00:03:20,280
about the systems that process your

70
00:03:20,280 --> 00:03:22,680
finances do you know

71
00:03:22,680 --> 00:03:24,840
how that code was tested or who wrote it

72
00:03:24,840 --> 00:03:28,680
or whether it has log4j in it or if it

73
00:03:28,680 --> 00:03:31,200
has known vulnerabilities or if it was

74
00:03:31,200 --> 00:03:32,640
already exploited you don't know any of

75
00:03:32,640 --> 00:03:33,840
that stuff

76
00:03:33,840 --> 00:03:35,879
that's a little terrifying

77
00:03:35,879 --> 00:03:37,500
and you don't know that for everything

78
00:03:37,500 --> 00:03:39,540
that's important in your life it's all

79
00:03:39,540 --> 00:03:41,519
controlled by software your health care

80
00:03:41,519 --> 00:03:43,860
your finances your government your

81
00:03:43,860 --> 00:03:46,799
elections your military defense your

82
00:03:46,799 --> 00:03:48,360
social life it's all controlled by

83
00:03:48,360 --> 00:03:49,319
software

84
00:03:49,319 --> 00:03:51,239
and you don't know anything about it and

85
00:03:51,239 --> 00:03:53,220
that's ridiculous I believe it's

86
00:03:53,220 --> 00:03:55,680
actually a fundamental human right we

87
00:03:55,680 --> 00:03:58,440
have the right to know about how the

88
00:03:58,440 --> 00:03:59,760
software that we trust with everything

89
00:03:59,760 --> 00:04:02,220
important in our lives is secured

90
00:04:02,220 --> 00:04:04,019
and we have to make that change and it's

91
00:04:04,019 --> 00:04:05,940
you know Jim's last point in his talk

92
00:04:05,940 --> 00:04:08,879
was correct it it is about you the

93
00:04:08,879 --> 00:04:10,980
future of absec is about you

94
00:04:10,980 --> 00:04:12,239
but

95
00:04:12,239 --> 00:04:13,920
uh

96
00:04:13,920 --> 00:04:16,500
okay so that's a little rant Let's uh

97
00:04:16,500 --> 00:04:18,000
let's move on to the topic of today

98
00:04:18,000 --> 00:04:21,060
which is runtime protection uh

99
00:04:21,060 --> 00:04:23,880
I'm gonna talk to you about uh how you

100
00:04:23,880 --> 00:04:26,100
can use it and and what it's really all

101
00:04:26,100 --> 00:04:27,900
about so

102
00:04:27,900 --> 00:04:29,960
um

103
00:04:30,300 --> 00:04:31,860
first off I got some cool data from

104
00:04:31,860 --> 00:04:35,639
Forrester look at the the plans to adopt

105
00:04:35,639 --> 00:04:37,860
for organizations that Forrester found

106
00:04:37,860 --> 00:04:39,300
out they also adopt runtime protection

107
00:04:39,300 --> 00:04:41,639
are incredible

108
00:04:41,639 --> 00:04:45,900
that's it's like 15 to 20 companies are

109
00:04:45,900 --> 00:04:50,400
uh are uh planning to adopt and

110
00:04:50,400 --> 00:04:52,500
more than half you know 60 70 percent

111
00:04:52,500 --> 00:04:55,919
are adopting runtime protection it's

112
00:04:55,919 --> 00:04:58,440
really a fundamental technology to

113
00:04:58,440 --> 00:05:00,960
application security uh so I'm super

114
00:05:00,960 --> 00:05:02,699
excited about it

115
00:05:02,699 --> 00:05:04,500
by the way that first slide that was

116
00:05:04,500 --> 00:05:06,840
what you know Pro tip it's called your

117
00:05:06,840 --> 00:05:08,940
hook right it's exciting a lot of people

118
00:05:08,940 --> 00:05:10,160
are using this

119
00:05:10,160 --> 00:05:12,660
uh it's also in a lot of government

120
00:05:12,660 --> 00:05:15,660
standards it's in missed 853 it's in the

121
00:05:15,660 --> 00:05:19,740
PCI uh ssf which is uh you know sort of

122
00:05:19,740 --> 00:05:21,900
replace the PCI DSS

123
00:05:21,900 --> 00:05:22,560
um

124
00:05:22,560 --> 00:05:25,259
so runtime protection is is here it's

125
00:05:25,259 --> 00:05:26,940
being used widely a lot of companies

126
00:05:26,940 --> 00:05:29,580
we'll talk a little bit about that

127
00:05:29,580 --> 00:05:31,740
but some of you may not know exactly

128
00:05:31,740 --> 00:05:34,020
what runtime protection is or how it

129
00:05:34,020 --> 00:05:36,060
works so I'm going to I'm going to zoom

130
00:05:36,060 --> 00:05:37,919
way out here start over from the

131
00:05:37,919 --> 00:05:40,080
beginning and explain why this is

132
00:05:40,080 --> 00:05:43,380
important and and what it's all about

133
00:05:43,380 --> 00:05:45,479
when you think about up sec

134
00:05:45,479 --> 00:05:47,880
there's two ways that you can actually

135
00:05:47,880 --> 00:05:50,880
improve the security of software the

136
00:05:50,880 --> 00:05:51,539
first

137
00:05:51,539 --> 00:05:54,900
is you can try to coerce people to do

138
00:05:54,900 --> 00:05:57,000
what you want right you got to coerce

139
00:05:57,000 --> 00:06:00,240
developers to make different choices

140
00:06:00,240 --> 00:06:02,160
about how they write code right and we

141
00:06:02,160 --> 00:06:03,900
have a lot of stuff that we do to try to

142
00:06:03,900 --> 00:06:05,880
coerce them we have

143
00:06:05,880 --> 00:06:08,280
policy and requirements and threat

144
00:06:08,280 --> 00:06:11,160
modeling and vulnerability reports and

145
00:06:11,160 --> 00:06:13,860
uh what else we got here we got training

146
00:06:13,860 --> 00:06:15,960
and dashboards and you know public

147
00:06:15,960 --> 00:06:19,740
criticism s-bombs all of that

148
00:06:19,740 --> 00:06:22,020
is designed to get developers to make

149
00:06:22,020 --> 00:06:23,580
the right choices right we're trying to

150
00:06:23,580 --> 00:06:25,139
coerce them to make the right choices

151
00:06:25,139 --> 00:06:27,960
and it doesn't work very well

152
00:06:27,960 --> 00:06:31,199
the average application has roughly 30

153
00:06:31,199 --> 00:06:34,620
vulnerabilities uh

154
00:06:34,620 --> 00:06:37,020
that's you know this is a very difficult

155
00:06:37,020 --> 00:06:40,620
path we had a 40 fail rate on fixes when

156
00:06:40,620 --> 00:06:42,900
we gave I ran a consulting company for a

157
00:06:42,900 --> 00:06:44,520
long time we used to give development

158
00:06:44,520 --> 00:06:46,380
specific directions on what they needed

159
00:06:46,380 --> 00:06:49,860
to do to fix their code and 40 of the

160
00:06:49,860 --> 00:06:51,479
time they did something different and

161
00:06:51,479 --> 00:06:52,680
what we told them

162
00:06:52,680 --> 00:06:54,720
this is a really hard problem to get

163
00:06:54,720 --> 00:06:56,699
folks to do what you want

164
00:06:56,699 --> 00:06:59,759
the other path we have to make

165
00:06:59,759 --> 00:07:01,800
applications more secure is we can put a

166
00:07:01,800 --> 00:07:04,500
perimeter around it

167
00:07:04,500 --> 00:07:06,539
that's tough especially these days

168
00:07:06,539 --> 00:07:08,940
you're trying to trying to surround an

169
00:07:08,940 --> 00:07:10,800
exploding attack surface that's probably

170
00:07:10,800 --> 00:07:12,840
in multi-clouds multi-technologies

171
00:07:12,840 --> 00:07:16,319
serverless apis web apps mobile and

172
00:07:16,319 --> 00:07:19,020
you're trying to detect whether traffic

173
00:07:19,020 --> 00:07:20,699
is good or bad

174
00:07:20,699 --> 00:07:23,580
at the perimeter all you can see is the

175
00:07:23,580 --> 00:07:26,460
HTTP request or whatever other kind of

176
00:07:26,460 --> 00:07:27,660
request it is

177
00:07:27,660 --> 00:07:29,340
almost impossible to tell the difference

178
00:07:29,340 --> 00:07:31,800
between good and bad and you have you

179
00:07:31,800 --> 00:07:34,380
have no idea what that you know anything

180
00:07:34,380 --> 00:07:36,900
about what that traffic is going to

181
00:07:36,900 --> 00:07:38,639
so this is a really difficult problem

182
00:07:38,639 --> 00:07:40,080
and ends up you know breaking

183
00:07:40,080 --> 00:07:41,460
applications and leading to endless

184
00:07:41,460 --> 00:07:42,780
tuning which actually ends up being

185
00:07:42,780 --> 00:07:46,259
another people problem so

186
00:07:46,259 --> 00:07:47,880
these approaches don't you know they're

187
00:07:47,880 --> 00:07:49,259
not fantastic

188
00:07:49,259 --> 00:07:50,699
and I was thinking there's maybe there's

189
00:07:50,699 --> 00:07:52,800
another way like what about aslr and

190
00:07:52,800 --> 00:07:55,500
depth you guys know what those are

191
00:07:55,500 --> 00:07:57,060
we're not going to dive deep into this

192
00:07:57,060 --> 00:07:58,860
these are Technologies to help prevent

193
00:07:58,860 --> 00:08:00,419
buffer overflows a dress-based

194
00:08:00,419 --> 00:08:01,860
randomization and data execution

195
00:08:01,860 --> 00:08:05,520
prevention and what's cool about them is

196
00:08:05,520 --> 00:08:07,139
they're not either of those first two

197
00:08:07,139 --> 00:08:08,220
techniques

198
00:08:08,220 --> 00:08:10,259
right you can use these

199
00:08:10,259 --> 00:08:12,419
uh techniques

200
00:08:12,419 --> 00:08:15,360
to add protection to existing software

201
00:08:15,360 --> 00:08:17,340
you don't need to change the code you

202
00:08:17,340 --> 00:08:18,539
don't need to know anything

203
00:08:18,539 --> 00:08:20,039
and it makes

204
00:08:20,039 --> 00:08:23,520
previously vulnerable code safe

205
00:08:23,520 --> 00:08:26,039
now they're not perfect but it's it's a

206
00:08:26,039 --> 00:08:28,199
really interesting technology

207
00:08:28,199 --> 00:08:30,539
so you think to yourself like what could

208
00:08:30,539 --> 00:08:32,880
we do that's like that for application

209
00:08:32,880 --> 00:08:34,979
security a third way

210
00:08:34,979 --> 00:08:37,380
that's what runtime protection is all

211
00:08:37,380 --> 00:08:38,640
about

212
00:08:38,640 --> 00:08:41,039
so first I need to teach you you know

213
00:08:41,039 --> 00:08:43,260
what runtime protection is a lot of

214
00:08:43,260 --> 00:08:45,360
misinformation out there some people are

215
00:08:45,360 --> 00:08:47,760
trying to describe their WAFF as being

216
00:08:47,760 --> 00:08:51,660
rasp a little complicated but I'm going

217
00:08:51,660 --> 00:08:53,779
to tell you how I think about it so

218
00:08:53,779 --> 00:08:57,120
runtime protection automatically adds

219
00:08:57,120 --> 00:08:59,940
targeted security defenses to an

220
00:08:59,940 --> 00:09:01,800
existing application

221
00:09:01,800 --> 00:09:04,620
it introduces two things lightweight

222
00:09:04,620 --> 00:09:07,320
trust boundaries in the application code

223
00:09:07,320 --> 00:09:10,080
itself and some sensors to gather

224
00:09:10,080 --> 00:09:12,420
information from the application

225
00:09:12,420 --> 00:09:13,920
we'll talk about how those work in a

226
00:09:13,920 --> 00:09:15,060
second

227
00:09:15,060 --> 00:09:17,640
um but the upshot is that we can

228
00:09:17,640 --> 00:09:20,399
eliminate human error

229
00:09:20,399 --> 00:09:23,519
we can fix vulnerabilities this way

230
00:09:23,519 --> 00:09:25,080
uh let's walk through how this works so

231
00:09:25,080 --> 00:09:26,640
imagine you've got your code sitting on

232
00:09:26,640 --> 00:09:29,100
the file system down at the bottom there

233
00:09:29,100 --> 00:09:30,720
and

234
00:09:30,720 --> 00:09:33,120
you've got as the code loads there's you

235
00:09:33,120 --> 00:09:34,440
know there's a bunch of modules in there

236
00:09:34,440 --> 00:09:36,720
that are dangerous to use like the

237
00:09:36,720 --> 00:09:39,959
expression evaluation engine or the SQL

238
00:09:39,959 --> 00:09:43,080
driver or you know runtime.exec all

239
00:09:43,080 --> 00:09:44,760
these are like they're they're powerful

240
00:09:44,760 --> 00:09:47,220
modules and if developers don't use them

241
00:09:47,220 --> 00:09:49,320
right that's when vulnerabilities happen

242
00:09:49,320 --> 00:09:51,779
Okay so

243
00:09:51,779 --> 00:09:53,820
what runtime protection does is first

244
00:09:53,820 --> 00:09:56,160
you add this runtime protection module

245
00:09:56,160 --> 00:09:59,040
it's like a library in most applications

246
00:09:59,040 --> 00:10:01,740
it actually works a lot like APM tools

247
00:10:01,740 --> 00:10:04,740
like New Relic or app Dynamics just add

248
00:10:04,740 --> 00:10:07,440
it to the application server and then as

249
00:10:07,440 --> 00:10:09,480
that application loads

250
00:10:09,480 --> 00:10:12,540
we can introduce these trust boundaries

251
00:10:12,540 --> 00:10:14,880
around these dangerous capabilities to

252
00:10:14,880 --> 00:10:17,640
protect them from being exploited

253
00:10:17,640 --> 00:10:19,440
so

254
00:10:19,440 --> 00:10:21,540
we change those dangerous capabilities

255
00:10:21,540 --> 00:10:24,420
now they're protected capabilities and

256
00:10:24,420 --> 00:10:26,279
the cool thing is these things are

257
00:10:26,279 --> 00:10:27,660
really simple

258
00:10:27,660 --> 00:10:29,459
I'll show you in just a second exactly

259
00:10:29,459 --> 00:10:32,000
how these work

260
00:10:32,040 --> 00:10:34,260
now just to make sure we're clear on the

261
00:10:34,260 --> 00:10:36,480
terminology uh you may have heard of

262
00:10:36,480 --> 00:10:38,519
interactive application security testing

263
00:10:38,519 --> 00:10:41,640
I asked and runtime protection or

264
00:10:41,640 --> 00:10:43,200
runtime application self-protection

265
00:10:43,200 --> 00:10:47,640
which is uh rasp or runtime protection

266
00:10:47,640 --> 00:10:49,680
they're very similar in fact they're the

267
00:10:49,680 --> 00:10:52,260
same runtime security module you just

268
00:10:52,260 --> 00:10:54,600
use one in development to detect

269
00:10:54,600 --> 00:10:57,300
vulnerabilities that's I asked and you

270
00:10:57,300 --> 00:10:59,940
use runtime protection in production to

271
00:10:59,940 --> 00:11:01,200
prevent vulnerabilities from being

272
00:11:01,200 --> 00:11:04,440
exploited Okay so

273
00:11:04,440 --> 00:11:06,959
one technology two different use cases

274
00:11:06,959 --> 00:11:08,459
essentially

275
00:11:08,459 --> 00:11:09,720
today we're talking about runtime

276
00:11:09,720 --> 00:11:11,040
protection we're talking about

277
00:11:11,040 --> 00:11:13,740
production and what happens there

278
00:11:13,740 --> 00:11:15,180
now

279
00:11:15,180 --> 00:11:18,180
you may be angry stick guy here right

280
00:11:18,180 --> 00:11:19,920
that sounds dangerous

281
00:11:19,920 --> 00:11:23,579
wrong this is really well proven stuff

282
00:11:23,579 --> 00:11:25,680
we've been instrumenting code for 20

283
00:11:25,680 --> 00:11:29,399
years it's used in almost every web app

284
00:11:29,399 --> 00:11:32,100
framework that's out there this is a

285
00:11:32,100 --> 00:11:35,279
powerful technique for getting your code

286
00:11:35,279 --> 00:11:37,079
the way you want it

287
00:11:37,079 --> 00:11:38,220
um

288
00:11:38,220 --> 00:11:39,899
it work like I said it works exactly

289
00:11:39,899 --> 00:11:42,779
like APM tools and

290
00:11:42,779 --> 00:11:45,480
if you the way I think about it it's a

291
00:11:45,480 --> 00:11:48,839
way of of building software

292
00:11:48,839 --> 00:11:50,940
instead of programming everything in

293
00:11:50,940 --> 00:11:52,980
source code and building it and

294
00:11:52,980 --> 00:11:55,079
delivering it instead there's another

295
00:11:55,079 --> 00:11:56,640
path for code to come into the

296
00:11:56,640 --> 00:11:58,620
application it's essentially aspect

297
00:11:58,620 --> 00:12:00,120
oriented programming if you're familiar

298
00:12:00,120 --> 00:12:01,620
with that where you were weaving in

299
00:12:01,620 --> 00:12:04,140
certain code at runtime because it's

300
00:12:04,140 --> 00:12:05,940
hard to get the developers to do it in

301
00:12:05,940 --> 00:12:08,100
all the right places reliably

302
00:12:08,100 --> 00:12:10,440
everybody with me so far

303
00:12:10,440 --> 00:12:12,420
let's take a look at an example of how

304
00:12:12,420 --> 00:12:13,680
I'm going to look at five examples

305
00:12:13,680 --> 00:12:14,880
actually really quick these are

306
00:12:14,880 --> 00:12:16,920
different kinds of trust boundaries that

307
00:12:16,920 --> 00:12:18,480
we're going to introduce into an

308
00:12:18,480 --> 00:12:20,399
application and my point in showing you

309
00:12:20,399 --> 00:12:22,019
these five is so that you can understand

310
00:12:22,019 --> 00:12:24,720
how simple and Powerful this technique

311
00:12:24,720 --> 00:12:26,959
is

312
00:12:27,839 --> 00:12:29,519
so let's look at the first one it's an

313
00:12:29,519 --> 00:12:31,920
untrusted data boundary and all this

314
00:12:31,920 --> 00:12:34,440
means is we want to prevent untrusted

315
00:12:34,440 --> 00:12:37,920
data from reaching certain modules

316
00:12:37,920 --> 00:12:39,600
because if it did that would be a

317
00:12:39,600 --> 00:12:41,519
problem so I'll use a unsafe

318
00:12:41,519 --> 00:12:44,399
deserialization example you never want

319
00:12:44,399 --> 00:12:46,440
to deserialize untrusted data because

320
00:12:46,440 --> 00:12:48,899
what can happen

321
00:12:48,899 --> 00:12:50,820
yeah it's a bomb exploding see that's

322
00:12:50,820 --> 00:12:53,160
usually bad so

323
00:12:53,160 --> 00:12:55,139
in this case you can see a serialized

324
00:12:55,139 --> 00:12:57,899
object comes in flows through the web

325
00:12:57,899 --> 00:12:59,700
app goes to the deserialization engine

326
00:12:59,700 --> 00:13:02,820
like in Java it goes to read object and

327
00:13:02,820 --> 00:13:05,000
as part of

328
00:13:05,000 --> 00:13:08,220
deserializing that object you're going

329
00:13:08,220 --> 00:13:10,500
to call the constructors on a bunch of

330
00:13:10,500 --> 00:13:12,600
different objects that's called a gadget

331
00:13:12,600 --> 00:13:14,700
chain and the attacker can abuse it to

332
00:13:14,700 --> 00:13:16,860
get their code to run they can

333
00:13:16,860 --> 00:13:18,360
completely take over your application

334
00:13:18,360 --> 00:13:20,279
and this is one of the main vectors used

335
00:13:20,279 --> 00:13:22,139
in like log for shell and some other

336
00:13:22,139 --> 00:13:23,459
things

337
00:13:23,459 --> 00:13:24,720
so

338
00:13:24,720 --> 00:13:26,399
we can do this

339
00:13:26,399 --> 00:13:29,339
we can weave in an untrusted data

340
00:13:29,339 --> 00:13:30,720
barrier

341
00:13:30,720 --> 00:13:33,360
into the deserialization engine so that

342
00:13:33,360 --> 00:13:35,339
it just does a simple check and here's

343
00:13:35,339 --> 00:13:37,139
what it looks like in the code oh and

344
00:13:37,139 --> 00:13:38,940
when we do this that'll prevent this

345
00:13:38,940 --> 00:13:41,820
attack chain from happening so here's

346
00:13:41,820 --> 00:13:43,440
what it looks like in the code before

347
00:13:43,440 --> 00:13:45,779
you can see some code from the Java read

348
00:13:45,779 --> 00:13:47,579
object method

349
00:13:47,579 --> 00:13:50,459
and this is the code that we weave in

350
00:13:50,459 --> 00:13:52,440
using runtime protection it's a simple

351
00:13:52,440 --> 00:13:53,880
check it says

352
00:13:53,880 --> 00:13:57,779
if is data from untrusted source and

353
00:13:57,779 --> 00:14:00,480
then you know this is the input stream

354
00:14:00,480 --> 00:14:02,880
then we throw a runtime protection

355
00:14:02,880 --> 00:14:05,880
and kick it out this is super high

356
00:14:05,880 --> 00:14:07,019
performance check it's almost

357
00:14:07,019 --> 00:14:09,720
immeasurably fast and

358
00:14:09,720 --> 00:14:11,700
it's perfect

359
00:14:11,700 --> 00:14:13,740
it prevents any untrusted data from

360
00:14:13,740 --> 00:14:15,540
being deserialized and prevents this

361
00:14:15,540 --> 00:14:18,839
whole class of attacks from happening

362
00:14:18,839 --> 00:14:21,980
everybody with me so far

363
00:14:22,560 --> 00:14:24,620
excellent

364
00:14:24,620 --> 00:14:28,260
so uh you won't see this in the source

365
00:14:28,260 --> 00:14:30,540
code right this instrumentation happens

366
00:14:30,540 --> 00:14:33,180
as the application starts up as the

367
00:14:33,180 --> 00:14:35,399
binary codes being loaded we're gonna

368
00:14:35,399 --> 00:14:38,100
weave in this is a static method call it

369
00:14:38,100 --> 00:14:41,579
has no side effects so it's very safe

370
00:14:41,579 --> 00:14:43,440
thing to add into the code of your

371
00:14:43,440 --> 00:14:45,540
application and then it just runs as

372
00:14:45,540 --> 00:14:46,920
though the developer programmed this

373
00:14:46,920 --> 00:14:48,959
into their application normally this

374
00:14:48,959 --> 00:14:52,339
just runs as part of the application

375
00:14:53,040 --> 00:14:54,540
let's do another one

376
00:14:54,540 --> 00:14:57,060
this one's called semantic Integrity

377
00:14:57,060 --> 00:14:59,639
boundary and what this means is uh you

378
00:14:59,639 --> 00:15:01,019
know we'll use SQL injection as an

379
00:15:01,019 --> 00:15:02,579
example but we're basically just

380
00:15:02,579 --> 00:15:04,620
verifying that untrusted data didn't

381
00:15:04,620 --> 00:15:06,540
change the meaning of a command or a

382
00:15:06,540 --> 00:15:07,620
query

383
00:15:07,620 --> 00:15:09,360
so I'll do SQL injection but there's a

384
00:15:09,360 --> 00:15:10,680
you know just like

385
00:15:10,680 --> 00:15:12,600
there's a lot of different places where

386
00:15:12,600 --> 00:15:14,040
injection Could Happen command injection

387
00:15:14,040 --> 00:15:15,740
ldap injection

388
00:15:15,740 --> 00:15:17,699
expression language rejection and so on

389
00:15:17,699 --> 00:15:20,339
in this case we'll do SQL injection and

390
00:15:20,339 --> 00:15:22,440
you can see the attacker's data flows

391
00:15:22,440 --> 00:15:23,760
into the query you guys have all seen

392
00:15:23,760 --> 00:15:25,380
this modified the meaning of the query

393
00:15:25,380 --> 00:15:28,019
well how do we protect against that

394
00:15:28,019 --> 00:15:29,519
here's what we do

395
00:15:29,519 --> 00:15:31,740
we add a semantic Integrity checker for

396
00:15:31,740 --> 00:15:33,720
SQL here

397
00:15:33,720 --> 00:15:37,440
and all it does is it looks at that

398
00:15:37,440 --> 00:15:40,500
query and it recognizes hey that

399
00:15:40,500 --> 00:15:43,139
untrusted data that or one equals one

400
00:15:43,139 --> 00:15:44,639
piece

401
00:15:44,639 --> 00:15:47,579
change the semantics of the query

402
00:15:47,579 --> 00:15:49,560
we can detect that easily it used to be

403
00:15:49,560 --> 00:15:51,779
just you know just a value

404
00:15:51,779 --> 00:15:54,120
and now we know that it's an actual you

405
00:15:54,120 --> 00:15:56,760
know it's another whole sub-expression

406
00:15:56,760 --> 00:16:00,180
that's easy to detect very reliable and

407
00:16:00,180 --> 00:16:02,040
it should never happen

408
00:16:02,040 --> 00:16:04,079
no attacker should ever change the

409
00:16:04,079 --> 00:16:05,459
meaning of your query

410
00:16:05,459 --> 00:16:08,279
so this is a very accurate way of

411
00:16:08,279 --> 00:16:11,639
detecting SQL injection attacks and

412
00:16:11,639 --> 00:16:13,079
preventing them from exploiting the

413
00:16:13,079 --> 00:16:14,940
application so the code looks just the

414
00:16:14,940 --> 00:16:16,079
same

415
00:16:16,079 --> 00:16:17,519
as we looked at before we've now we've

416
00:16:17,519 --> 00:16:19,320
got another check called is query

417
00:16:19,320 --> 00:16:21,240
structure modified

418
00:16:21,240 --> 00:16:23,699
and we know in that query is some

419
00:16:23,699 --> 00:16:25,740
untrusted data we'll check to see if it

420
00:16:25,740 --> 00:16:26,940
modified the meaning of the query and

421
00:16:26,940 --> 00:16:29,100
then we can intervene prevent SQL

422
00:16:29,100 --> 00:16:31,399
injection

423
00:16:31,920 --> 00:16:34,019
now this will be a cool check if your

424
00:16:34,019 --> 00:16:35,760
developers were doing it in their code

425
00:16:35,760 --> 00:16:37,680
problem is it's really hard to get them

426
00:16:37,680 --> 00:16:40,139
to do all the right things how many best

427
00:16:40,139 --> 00:16:41,940
practices for secure coding do you think

428
00:16:41,940 --> 00:16:44,300
there are

429
00:16:44,820 --> 00:16:47,220
a lot he's spreading his arms like a

430
00:16:47,220 --> 00:16:52,079
condor uh yeah I mean hundreds for every

431
00:16:52,079 --> 00:16:54,060
language and then hundreds more for

432
00:16:54,060 --> 00:16:57,480
every framework in every language it's a

433
00:16:57,480 --> 00:16:58,920
colossal amount of things that

434
00:16:58,920 --> 00:17:02,180
developers have to learn yeah

435
00:17:11,040 --> 00:17:13,319
it really doesn't happen because these

436
00:17:13,319 --> 00:17:15,480
tests are so simple

437
00:17:15,480 --> 00:17:17,880
and so correct

438
00:17:17,880 --> 00:17:20,459
that you know there's no blame that

439
00:17:20,459 --> 00:17:23,939
nothing broke uh we deploy runtime

440
00:17:23,939 --> 00:17:26,220
protection on thousands and thousands of

441
00:17:26,220 --> 00:17:28,980
applications in large companies and you

442
00:17:28,980 --> 00:17:31,080
know they just turn it on and it starts

443
00:17:31,080 --> 00:17:31,860
working

444
00:17:31,860 --> 00:17:33,840
uh we have very little feedback on

445
00:17:33,840 --> 00:17:35,640
breaking applications like the one that

446
00:17:35,640 --> 00:17:38,220
I can remember is when the application

447
00:17:38,220 --> 00:17:40,200
actually sent

448
00:17:40,200 --> 00:17:42,960
full queries from the client to the

449
00:17:42,960 --> 00:17:45,360
server and was executing them and

450
00:17:45,360 --> 00:17:46,740
runtime protection said hey you can't

451
00:17:46,740 --> 00:17:49,799
execute those queries that's but uh it

452
00:17:49,799 --> 00:17:52,140
was really SQL injection by Design so

453
00:17:52,140 --> 00:17:53,640
runtime protection was doing the right

454
00:17:53,640 --> 00:17:56,400
thing because it was super insecure but

455
00:17:56,400 --> 00:17:57,780
it doesn't break applications and that's

456
00:17:57,780 --> 00:18:00,780
the whole point it's incredibly safe to

457
00:18:00,780 --> 00:18:03,059
do this and

458
00:18:03,059 --> 00:18:04,799
I just want like what you should compare

459
00:18:04,799 --> 00:18:06,720
against is not whether it's perfect but

460
00:18:06,720 --> 00:18:09,480
whether it's safer than not doing it

461
00:18:09,480 --> 00:18:11,520
because these these vulnerabilities

462
00:18:11,520 --> 00:18:13,500
break applications if somebody finds

463
00:18:13,500 --> 00:18:14,820
them or they don't even have to find

464
00:18:14,820 --> 00:18:16,500
them sometimes you ever go to a web page

465
00:18:16,500 --> 00:18:18,600
and just typed in you know like some

466
00:18:18,600 --> 00:18:20,760
special characters and it blows up like

467
00:18:20,760 --> 00:18:23,760
that's a breaking app

468
00:18:23,760 --> 00:18:26,880
okay so that's a good example let me do

469
00:18:26,880 --> 00:18:30,000
uh another example this is an unsafe

470
00:18:30,000 --> 00:18:32,460
function boundary so some functions are

471
00:18:32,460 --> 00:18:36,539
just dangerous uh in this case

472
00:18:36,539 --> 00:18:38,460
let's look at an example where the data

473
00:18:38,460 --> 00:18:40,140
doesn't come from an untrusted Source it

474
00:18:40,140 --> 00:18:42,600
comes from a trusted Source an internal

475
00:18:42,600 --> 00:18:43,860
mq

476
00:18:43,860 --> 00:18:46,440
okay maybe the attacker figures out a

477
00:18:46,440 --> 00:18:48,059
way through some other API or some other

478
00:18:48,059 --> 00:18:50,160
interface somewhere to get untrusted

479
00:18:50,160 --> 00:18:53,760
data into your mq but we don't know it's

480
00:18:53,760 --> 00:18:56,160
untrusted right generally We Trust

481
00:18:56,160 --> 00:18:57,539
things that come from our internal

482
00:18:57,539 --> 00:18:59,160
systems

483
00:18:59,160 --> 00:19:00,780
so in this case we can't use an

484
00:19:00,780 --> 00:19:02,880
untrusted data boundary right we could

485
00:19:02,880 --> 00:19:04,200
say like we don't want any untrusted

486
00:19:04,200 --> 00:19:05,460
data into our expression language engine

487
00:19:05,460 --> 00:19:07,320
but in this case that's not going to

488
00:19:07,320 --> 00:19:09,480
work because this is trusted data so we

489
00:19:09,480 --> 00:19:12,059
need another check

490
00:19:12,059 --> 00:19:13,620
so we can put an unsafe function

491
00:19:13,620 --> 00:19:15,720
boundary in this app that prevents

492
00:19:15,720 --> 00:19:19,140
dangerous calls from being invoked from

493
00:19:19,140 --> 00:19:22,980
within a dangerous module so what we

494
00:19:22,980 --> 00:19:24,059
don't want is we don't want the

495
00:19:24,059 --> 00:19:25,380
expression language engine calling

496
00:19:25,380 --> 00:19:27,840
runtime.exec can anybody think of an

497
00:19:27,840 --> 00:19:29,760
example when when you'd want an

498
00:19:29,760 --> 00:19:34,500
expression to invoke runtime.exec

499
00:19:35,460 --> 00:19:37,200
expressions are for like pulling data

500
00:19:37,200 --> 00:19:38,760
out of beans and putting them in web

501
00:19:38,760 --> 00:19:40,500
pages like they're not for like running

502
00:19:40,500 --> 00:19:43,140
code and so we can it's essentially a

503
00:19:43,140 --> 00:19:45,240
Sandbox we can limit what the expression

504
00:19:45,240 --> 00:19:47,880
language engine can do and prevent it

505
00:19:47,880 --> 00:19:49,320
from doing harmful things like calling

506
00:19:49,320 --> 00:19:51,660
runtime.exec and creating sockets and

507
00:19:51,660 --> 00:19:53,220
things like that

508
00:19:53,220 --> 00:19:55,919
so that's three boundaries all very

509
00:19:55,919 --> 00:19:58,200
simple that we can put in place let's

510
00:19:58,200 --> 00:20:00,360
look at a couple more quickly

511
00:20:00,360 --> 00:20:02,360
um

512
00:20:03,299 --> 00:20:05,820
anybody familiar with xxe

513
00:20:05,820 --> 00:20:10,320
I think it's one of the OS top 10. so uh

514
00:20:10,320 --> 00:20:12,720
in this case the attacker sends an

515
00:20:12,720 --> 00:20:16,140
untrusted XML file and you can see in it

516
00:20:16,140 --> 00:20:18,660
there's a malicious doctype

517
00:20:18,660 --> 00:20:20,220
that passes through the application in

518
00:20:20,220 --> 00:20:22,740
your XML parser which which interprets

519
00:20:22,740 --> 00:20:25,440
that doctype in this case accessing the

520
00:20:25,440 --> 00:20:27,600
password file and sending it back to the

521
00:20:27,600 --> 00:20:29,460
attacker through the applications output

522
00:20:29,460 --> 00:20:31,320
it's a dangerous attack you can use this

523
00:20:31,320 --> 00:20:33,059
to scan internal networks and a bunch of

524
00:20:33,059 --> 00:20:34,200
other stuff anything you can do through

525
00:20:34,200 --> 00:20:36,299
a URL

526
00:20:36,299 --> 00:20:38,520
we can stop this attack

527
00:20:38,520 --> 00:20:40,140
with something called the defense

528
00:20:40,140 --> 00:20:42,179
enablement boundary

529
00:20:42,179 --> 00:20:45,059
we can add capability to turn off

530
00:20:45,059 --> 00:20:47,760
doctype processing in this application

531
00:20:47,760 --> 00:20:50,460
so whenever we see an XML parser we can

532
00:20:50,460 --> 00:20:52,919
just configure it to have doctype

533
00:20:52,919 --> 00:20:54,419
processing turned off

534
00:20:54,419 --> 00:20:55,799
doesn't hurt anything

535
00:20:55,799 --> 00:20:59,760
uh most folks don't need doctypes in

536
00:20:59,760 --> 00:21:01,980
input that they're taking from users so

537
00:21:01,980 --> 00:21:05,640
we can disable that with a

538
00:21:05,640 --> 00:21:07,440
introducing one or two lines of code

539
00:21:07,440 --> 00:21:10,740
into this application

540
00:21:10,740 --> 00:21:13,260
and that'll solve xxe

541
00:21:13,260 --> 00:21:15,360
so look we've just eliminated

542
00:21:15,360 --> 00:21:17,340
a bunch of different kinds of injection

543
00:21:17,340 --> 00:21:21,360
we eliminated uh

544
00:21:21,360 --> 00:21:23,220
back-end connection like expression

545
00:21:23,220 --> 00:21:26,100
language injection we've eliminated uh

546
00:21:26,100 --> 00:21:28,320
uh what else do we do uh the first one

547
00:21:28,320 --> 00:21:31,200
was uh unsafe to serialization a bunch

548
00:21:31,200 --> 00:21:32,820
of different classes of vulnerabilities

549
00:21:32,820 --> 00:21:34,679
just take them off the table because

550
00:21:34,679 --> 00:21:35,940
we've got

551
00:21:35,940 --> 00:21:37,919
a way of introducing code to prevent

552
00:21:37,919 --> 00:21:40,080
them into the application I'll do one

553
00:21:40,080 --> 00:21:43,440
last one this is banned Behavior Uh and

554
00:21:43,440 --> 00:21:47,580
we need a boundary to stop oops we need

555
00:21:47,580 --> 00:21:49,440
a boundary that will stop

556
00:21:49,440 --> 00:21:50,940
things that we never want to happen in

557
00:21:50,940 --> 00:21:52,980
the application we looked at a whole

558
00:21:52,980 --> 00:21:55,679
bunch of different Java attacks and many

559
00:21:55,679 --> 00:21:59,100
of them rely on the attacker sending

560
00:21:59,100 --> 00:22:01,380
some input that tells the class loader

561
00:22:01,380 --> 00:22:02,940
to load some

562
00:22:02,940 --> 00:22:04,919
some classes into memory

563
00:22:04,919 --> 00:22:06,960
so this is an example where you can see

564
00:22:06,960 --> 00:22:09,120
uh this is what spring for Shell used

565
00:22:09,120 --> 00:22:12,120
you can see in this case uh

566
00:22:12,120 --> 00:22:14,960
this class acts this this uh attack

567
00:22:14,960 --> 00:22:18,000
accesses class.module dot get Clash

568
00:22:18,000 --> 00:22:20,460
loader and then forces it to load some

569
00:22:20,460 --> 00:22:23,820
extra classes into memory

570
00:22:23,820 --> 00:22:26,280
all these techniques require using

571
00:22:26,280 --> 00:22:29,100
reflection to access the class loader

572
00:22:29,100 --> 00:22:31,140
and no developers ever need to use

573
00:22:31,140 --> 00:22:33,179
reflection to access the class litter we

574
00:22:33,179 --> 00:22:35,460
actually put this rule in kind of a beta

575
00:22:35,460 --> 00:22:37,740
test and pushed it out to hundreds of

576
00:22:37,740 --> 00:22:40,559
thousands of applications out there and

577
00:22:40,559 --> 00:22:42,720
none of them use reflection to access

578
00:22:42,720 --> 00:22:46,039
the class loader anybody know why

579
00:22:47,580 --> 00:22:49,679
because developers can access the class

580
00:22:49,679 --> 00:22:53,520
loader super easily every class

581
00:22:53,520 --> 00:22:56,280
has access to the class loader the class

582
00:22:56,280 --> 00:22:58,380
loader that loaded it in it so you don't

583
00:22:58,380 --> 00:22:59,760
need to use reflection to access the

584
00:22:59,760 --> 00:23:01,559
class loader you can just say get class

585
00:23:01,559 --> 00:23:04,679
and you've got the class loader so using

586
00:23:04,679 --> 00:23:06,720
this technique we can just stop it we

587
00:23:06,720 --> 00:23:08,940
can say hey you can't use reflection to

588
00:23:08,940 --> 00:23:11,220
access the class loader anymore ever

589
00:23:11,220 --> 00:23:13,140
and we eliminate a whole bunch of

590
00:23:13,140 --> 00:23:15,900
attacks anything in Java that tries to

591
00:23:15,900 --> 00:23:17,820
leverage this and it's a bunch of

592
00:23:17,820 --> 00:23:19,100
different things like even some

593
00:23:19,100 --> 00:23:21,600
deserialization attacks use this like if

594
00:23:21,600 --> 00:23:23,820
you're decentralizing XML use a class

595
00:23:23,820 --> 00:23:25,620
loader and you use it to get run the

596
00:23:25,620 --> 00:23:27,120
runtime class and then you call get

597
00:23:27,120 --> 00:23:29,460
runtime on it and you execute we can

598
00:23:29,460 --> 00:23:31,559
stop all of that with one simple

599
00:23:31,559 --> 00:23:34,620
protection so see what we're doing here

600
00:23:34,620 --> 00:23:37,080
we're fundamentally eliminating whole

601
00:23:37,080 --> 00:23:40,140
classes of vulnerabilities

602
00:23:40,140 --> 00:23:44,120
anybody any questions on on any of that

603
00:23:45,240 --> 00:23:47,700
okay

604
00:23:47,700 --> 00:23:50,100
runtime protection also includes a bunch

605
00:23:50,100 --> 00:23:51,960
of observability stuff since we're

606
00:23:51,960 --> 00:23:53,159
already instrumenting the application

607
00:23:53,159 --> 00:23:55,559
anyway there's a ton of interesting data

608
00:23:55,559 --> 00:23:56,940
we can gather out of a running

609
00:23:56,940 --> 00:23:59,400
application that's useful for a bunch of

610
00:23:59,400 --> 00:24:01,380
different appsec purposes we can gather

611
00:24:01,380 --> 00:24:04,020
information about what's Upstream from

612
00:24:04,020 --> 00:24:05,700
the application get by looking at

613
00:24:05,700 --> 00:24:07,980
headers and things we can look at all

614
00:24:07,980 --> 00:24:10,140
the routes the endpoints of an

615
00:24:10,140 --> 00:24:11,460
application to determine the attack

616
00:24:11,460 --> 00:24:14,580
surface detailed attack surface exactly

617
00:24:14,580 --> 00:24:16,140
what kind of requests are used exactly

618
00:24:16,140 --> 00:24:18,299
what parameters are used within each

619
00:24:18,299 --> 00:24:19,919
each route

620
00:24:19,919 --> 00:24:21,780
we can figure out what the architecture

621
00:24:21,780 --> 00:24:23,700
looks like we can even see this the

622
00:24:23,700 --> 00:24:25,860
access control Matrix

623
00:24:25,860 --> 00:24:27,780
all we have to do is check exactly where

624
00:24:27,780 --> 00:24:29,760
Access Control checks are done and what

625
00:24:29,760 --> 00:24:31,799
role is being asked for and we can

626
00:24:31,799 --> 00:24:33,600
generate an access control Matrix for

627
00:24:33,600 --> 00:24:34,559
the app

628
00:24:34,559 --> 00:24:36,000
we can see all the encryption that's

629
00:24:36,000 --> 00:24:37,679
used what algorithms where it's being

630
00:24:37,679 --> 00:24:40,200
used we can see all the libraries

631
00:24:40,200 --> 00:24:42,419
and not just see that there's a library

632
00:24:42,419 --> 00:24:44,220
there but we can actually see if it's

633
00:24:44,220 --> 00:24:46,860
loaded into memory and if coding it

634
00:24:46,860 --> 00:24:48,780
actually runs

635
00:24:48,780 --> 00:24:50,640
and then I think all the all the

636
00:24:50,640 --> 00:24:52,440
outbound connection details on the back

637
00:24:52,440 --> 00:24:54,600
end so imagine you could just add

638
00:24:54,600 --> 00:24:56,340
runtime protection to your application

639
00:24:56,340 --> 00:24:58,620
use it for a little while

640
00:24:58,620 --> 00:25:00,799
and then have a

641
00:25:00,799 --> 00:25:03,740
application software security model

642
00:25:03,740 --> 00:25:06,480
generated that just tells you here's all

643
00:25:06,480 --> 00:25:08,400
this stuff about this application you

644
00:25:08,400 --> 00:25:10,200
can use that Upstream you can use that

645
00:25:10,200 --> 00:25:12,720
when you're when you want to do library

646
00:25:12,720 --> 00:25:15,900
security you can do it uh to empower

647
00:25:15,900 --> 00:25:18,059
your pen testers imagine if you gave a

648
00:25:18,059 --> 00:25:21,059
pen tester a complete list of the attack

649
00:25:21,059 --> 00:25:24,240
surface with each route exactly what

650
00:25:24,240 --> 00:25:26,159
parameters are used on each route and

651
00:25:26,159 --> 00:25:28,440
exactly what back-end connections are

652
00:25:28,440 --> 00:25:32,100
are invoked from each route is super

653
00:25:32,100 --> 00:25:33,539
powerful

654
00:25:33,539 --> 00:25:36,059
uh you can this is a great set of

655
00:25:36,059 --> 00:25:37,559
information to do threat modeling from

656
00:25:37,559 --> 00:25:39,900
you can identify vulnerabilities in

657
00:25:39,900 --> 00:25:41,580
production this way a bunch of different

658
00:25:41,580 --> 00:25:43,380
things that you can do with this but so

659
00:25:43,380 --> 00:25:44,760
runtime protection is a little broader

660
00:25:44,760 --> 00:25:46,980
than just preventing vulnerabilities

661
00:25:46,980 --> 00:25:50,059
from being exploited

662
00:25:51,539 --> 00:25:54,659
and it's easy to deploy at scale well

663
00:25:54,659 --> 00:25:56,039
we've done this a bunch of times on

664
00:25:56,039 --> 00:25:59,400
thousands of applications at once uh the

665
00:25:59,400 --> 00:26:01,860
way I think about it runtime protection

666
00:26:01,860 --> 00:26:04,440
is really a zero trust approach to

667
00:26:04,440 --> 00:26:06,480
application security instead of trying

668
00:26:06,480 --> 00:26:09,000
to create one big perimeter instead

669
00:26:09,000 --> 00:26:11,340
we're blowing up the perimeter and each

670
00:26:11,340 --> 00:26:13,919
application server protects itself each

671
00:26:13,919 --> 00:26:16,679
app has defenses built into it doesn't

672
00:26:16,679 --> 00:26:18,840
matter where these applications run you

673
00:26:18,840 --> 00:26:20,700
could take them you can put them in a

674
00:26:20,700 --> 00:26:22,679
container move them with the cloud do

675
00:26:22,679 --> 00:26:24,419
whatever you want the protection goes

676
00:26:24,419 --> 00:26:27,539
with the application so very zero trust

677
00:26:27,539 --> 00:26:30,419
philosophy here it's fully distributed

678
00:26:30,419 --> 00:26:32,880
so all there's all this protection gets

679
00:26:32,880 --> 00:26:34,799
done in place by all these applications

680
00:26:34,799 --> 00:26:37,620
it's not like we've got a Gateway it's

681
00:26:37,620 --> 00:26:40,140
not like we're you know calling out to

682
00:26:40,140 --> 00:26:42,120
some other service to do the security

683
00:26:42,120 --> 00:26:44,279
for us we're doing it in a very

684
00:26:44,279 --> 00:26:46,260
distributed way so it's super high

685
00:26:46,260 --> 00:26:47,340
performance

686
00:26:47,340 --> 00:26:48,840
and

687
00:26:48,840 --> 00:26:51,480
you can deploy it automatically with

688
00:26:51,480 --> 00:26:53,340
kubernetes operator you can build into

689
00:26:53,340 --> 00:26:56,039
your gold server you can push it out

690
00:26:56,039 --> 00:26:58,559
however you deploy code you can add

691
00:26:58,559 --> 00:27:00,840
contract add runtime protection to that

692
00:27:00,840 --> 00:27:02,820
and push it out automatically wherever

693
00:27:02,820 --> 00:27:05,539
it needs to go

694
00:27:05,700 --> 00:27:08,400
okay so that's how you get it out there

695
00:27:08,400 --> 00:27:10,679
and then you know this is probably the

696
00:27:10,679 --> 00:27:12,840
the first thing you'll see is attack

697
00:27:12,840 --> 00:27:15,299
data you're going to see your

698
00:27:15,299 --> 00:27:16,919
applications are getting attacked about

699
00:27:16,919 --> 00:27:19,980
5 000 times every month each app

700
00:27:19,980 --> 00:27:21,779
you probably don't have visibility into

701
00:27:21,779 --> 00:27:23,940
this if you're looking at WAFF data it's

702
00:27:23,940 --> 00:27:27,120
so noisy because everything the Waf sees

703
00:27:27,120 --> 00:27:28,860
that looks like an attack

704
00:27:28,860 --> 00:27:30,840
it has to treat it as though it is an

705
00:27:30,840 --> 00:27:32,820
attack and block it

706
00:27:32,820 --> 00:27:34,860
runtime protection doesn't

707
00:27:34,860 --> 00:27:37,620
runtime protection sees tons of attacks

708
00:27:37,620 --> 00:27:39,179
that never connect with their

709
00:27:39,179 --> 00:27:41,100
corresponding vulnerability

710
00:27:41,100 --> 00:27:45,779
it's actually 99 of attacks never

711
00:27:45,779 --> 00:27:46,919
connect with their intended

712
00:27:46,919 --> 00:27:49,020
vulnerability SQL injection attacks that

713
00:27:49,020 --> 00:27:51,000
don't connect with a SQL query

714
00:27:51,000 --> 00:27:53,400
file path reversal attacks that don't

715
00:27:53,400 --> 00:27:55,440
connect with file interface

716
00:27:55,440 --> 00:27:58,679
all kinds of attacks like that so you

717
00:27:58,679 --> 00:28:00,000
can

718
00:28:00,000 --> 00:28:02,220
ignore most of that it's nice to know

719
00:28:02,220 --> 00:28:03,960
that it's happening but you can ignore

720
00:28:03,960 --> 00:28:05,700
most of that because what matters is the

721
00:28:05,700 --> 00:28:06,840
ones that are reaching their

722
00:28:06,840 --> 00:28:08,820
corresponding vulnerability

723
00:28:08,820 --> 00:28:12,179
so you can help out your operations team

724
00:28:12,179 --> 00:28:14,760
by not flooding them with zillions of

725
00:28:14,760 --> 00:28:17,159
attacks every month you know if it's if

726
00:28:17,159 --> 00:28:18,900
it's one percent of

727
00:28:18,900 --> 00:28:21,059
uh five thousand attacks that's only 50

728
00:28:21,059 --> 00:28:22,380
things that they've got to really deal

729
00:28:22,380 --> 00:28:26,120
with every month nothing

730
00:28:26,159 --> 00:28:30,240
okay so we're at the halfway point here

731
00:28:30,240 --> 00:28:33,600
um a little over actually so uh

732
00:28:33,600 --> 00:28:36,179
hopefully nobody thinks that runtime

733
00:28:36,179 --> 00:28:38,279
protection is just a WAFF

734
00:28:38,279 --> 00:28:40,980
it doesn't work based on network traffic

735
00:28:40,980 --> 00:28:43,140
it's not at the perimeter it protects

736
00:28:43,140 --> 00:28:45,720
from within the application and it's far

737
00:28:45,720 --> 00:28:47,640
more accurate and even more performant

738
00:28:47,640 --> 00:28:50,279
than doing this at the perimeter there's

739
00:28:50,279 --> 00:28:52,679
no extra hop so this is much more

740
00:28:52,679 --> 00:28:55,080
efficient

741
00:28:55,080 --> 00:28:56,700
the rest of this talk I want to spend on

742
00:28:56,700 --> 00:28:59,460
like okay so that's cool technology but

743
00:28:59,460 --> 00:29:01,140
how does this help my appsec program

744
00:29:01,140 --> 00:29:03,120
because that's really what matters right

745
00:29:03,120 --> 00:29:04,980
is how to you know how is this going to

746
00:29:04,980 --> 00:29:07,440
change the situation on the ground

747
00:29:07,440 --> 00:29:09,960
I wanted to show one case study uh this

748
00:29:09,960 --> 00:29:13,200
was with a a large Fortune 75 insurance

749
00:29:13,200 --> 00:29:16,380
company that rolled out runtime

750
00:29:16,380 --> 00:29:18,960
protection across a lot of applications

751
00:29:18,960 --> 00:29:21,200
through their testing they knew they had

752
00:29:21,200 --> 00:29:23,940
1560 vulnerabilities in the apps that

753
00:29:23,940 --> 00:29:25,140
were protected

754
00:29:25,140 --> 00:29:27,480
they did the analysis and found that

755
00:29:27,480 --> 00:29:30,120
runtime protection addressed 95 of them

756
00:29:30,120 --> 00:29:33,419
so only 76 of those vulnerabilities were

757
00:29:33,419 --> 00:29:36,360
left in the application and so you know

758
00:29:36,360 --> 00:29:38,940
if you cut this down to just 76

759
00:29:38,940 --> 00:29:40,559
vulnerabilities that's a massive

760
00:29:40,559 --> 00:29:42,240
Improvement in security

761
00:29:42,240 --> 00:29:43,620
and

762
00:29:43,620 --> 00:29:46,740
uh their reaction was okay well we're

763
00:29:46,740 --> 00:29:48,240
doing this they mandated runtime

764
00:29:48,240 --> 00:29:49,799
protection for all of their

765
00:29:49,799 --> 00:29:53,880
public-facing web applications uh

766
00:29:53,880 --> 00:29:55,799
that's a really efficient way of

767
00:29:55,799 --> 00:29:58,740
protecting your your whole portfolio

768
00:29:58,740 --> 00:30:01,620
and it works on not just custom code

769
00:30:01,620 --> 00:30:05,460
vulnerabilities but also tons of cves so

770
00:30:05,460 --> 00:30:07,140
look we're protect we're protecting the

771
00:30:07,140 --> 00:30:09,179
whole application not just your custom

772
00:30:09,179 --> 00:30:11,220
code not just open source libraries but

773
00:30:11,220 --> 00:30:13,799
also the app server and the runtime

774
00:30:13,799 --> 00:30:16,380
platform and how all those pieces fit

775
00:30:16,380 --> 00:30:17,520
together

776
00:30:17,520 --> 00:30:19,679
runtime protection protects the whole

777
00:30:19,679 --> 00:30:23,000
stack the whole workload

778
00:30:23,159 --> 00:30:25,919
Okay so

779
00:30:25,919 --> 00:30:27,299
I want to take a few minutes and just

780
00:30:27,299 --> 00:30:29,399
talk about a few initiatives and that

781
00:30:29,399 --> 00:30:32,159
people are doing and how runtime

782
00:30:32,159 --> 00:30:34,500
protection helps there so just about

783
00:30:34,500 --> 00:30:36,000
show hands who's trying to tackle open

784
00:30:36,000 --> 00:30:37,919
source security in their organization

785
00:30:37,919 --> 00:30:41,100
anybody yeah good couple people who

786
00:30:41,100 --> 00:30:43,500
wants to shift left

787
00:30:43,500 --> 00:30:45,840
yeah that's some other people Okay who

788
00:30:45,840 --> 00:30:48,480
wants to do API security

789
00:30:48,480 --> 00:30:50,580
it's all the same people and I want to

790
00:30:50,580 --> 00:30:52,620
secure my legacy code anybody got Legacy

791
00:30:52,620 --> 00:30:54,059
apps out there okay

792
00:30:54,059 --> 00:30:55,679
right these are problems that almost

793
00:30:55,679 --> 00:30:57,240
everybody's working on so let's look at

794
00:30:57,240 --> 00:30:59,520
how runtime protection can help

795
00:30:59,520 --> 00:31:01,020
the first one I want to tackle open

796
00:31:01,020 --> 00:31:04,799
source so the traditional approach what

797
00:31:04,799 --> 00:31:07,740
do you do well you gotta start scanning

798
00:31:07,740 --> 00:31:09,240
stuff right you got to get an SCA tool

799
00:31:09,240 --> 00:31:10,919
you got to start scanning repos and

800
00:31:10,919 --> 00:31:13,200
servers and containers and scan your

801
00:31:13,200 --> 00:31:15,480
server lists you got to investigate a

802
00:31:15,480 --> 00:31:16,799
bunch of alerts to see if those

803
00:31:16,799 --> 00:31:18,840
libraries are actually used in the

804
00:31:18,840 --> 00:31:21,539
applications that have been flagged then

805
00:31:21,539 --> 00:31:23,399
you've got to update the code rebuild

806
00:31:23,399 --> 00:31:27,539
retest redeploy it's a lot of work

807
00:31:27,539 --> 00:31:29,279
and you got to repeat that every time

808
00:31:29,279 --> 00:31:31,679
either the app changes or there's a new

809
00:31:31,679 --> 00:31:34,740
CV yet how often do new cves come out

810
00:31:34,740 --> 00:31:36,559
yeah so

811
00:31:36,559 --> 00:31:39,059
conservatively I think you know if you

812
00:31:39,059 --> 00:31:41,580
include the tool cost and the labor cost

813
00:31:41,580 --> 00:31:44,100
and generally I think in appsec it's

814
00:31:44,100 --> 00:31:48,000
like 20 tool cost and 80 labor

815
00:31:48,000 --> 00:31:49,799
if you add that up I think a very

816
00:31:49,799 --> 00:31:51,360
conservative estimate is like per app

817
00:31:51,360 --> 00:31:53,580
you're spending 20K on open source

818
00:31:53,580 --> 00:31:56,159
security is that reasonable

819
00:31:56,159 --> 00:31:59,539
too high too low

820
00:32:00,299 --> 00:32:03,240
some low I don't know I think it's you

821
00:32:03,240 --> 00:32:04,620
can put your own numbers in here I don't

822
00:32:04,620 --> 00:32:06,960
care you should actually add it up by

823
00:32:06,960 --> 00:32:08,940
the way to know what it's costing per

824
00:32:08,940 --> 00:32:11,580
app per year it's a really useful metric

825
00:32:11,580 --> 00:32:13,500
for your abstract program but look at

826
00:32:13,500 --> 00:32:14,899
what happens with runtime protection

827
00:32:14,899 --> 00:32:17,100
one-time install

828
00:32:17,100 --> 00:32:19,500
push it out to all your applications you

829
00:32:19,500 --> 00:32:20,700
can push out the whole kubernetes

830
00:32:20,700 --> 00:32:24,419
cluster all into one shot and you get

831
00:32:24,419 --> 00:32:26,700
automatic SCA happening on all your

832
00:32:26,700 --> 00:32:28,799
applications continuously so it'll find

833
00:32:28,799 --> 00:32:30,240
all the libraries report them all

834
00:32:30,240 --> 00:32:32,880
centrally generate s-bombs for all your

835
00:32:32,880 --> 00:32:35,279
applications as they exist in production

836
00:32:35,279 --> 00:32:37,679
so full s-bombs not like the partial

837
00:32:37,679 --> 00:32:41,159
s-bomb you get if you scan a code repo

838
00:32:41,159 --> 00:32:43,620
full s-bomb you know libraries from the

839
00:32:43,620 --> 00:32:44,880
platform and the app server and

840
00:32:44,880 --> 00:32:47,340
everything you can focus on which

841
00:32:47,340 --> 00:32:49,860
libraries actually load and run so you

842
00:32:49,860 --> 00:32:51,720
can limit we found 62 percent of

843
00:32:51,720 --> 00:32:55,320
libraries never load into memory no

844
00:32:55,320 --> 00:32:57,179
coding them ever runs they're like

845
00:32:57,179 --> 00:32:58,919
dependencies of dependencies where

846
00:32:58,919 --> 00:33:00,539
you're not using that feature in the top

847
00:33:00,539 --> 00:33:03,120
level so tons of libraries just along

848
00:33:03,120 --> 00:33:04,440
for the ride

849
00:33:04,440 --> 00:33:06,000
anybody heard that statistic that says

850
00:33:06,000 --> 00:33:07,679
eighty percent of applications are open

851
00:33:07,679 --> 00:33:10,200
source libraries

852
00:33:10,200 --> 00:33:11,880
horse crap

853
00:33:11,880 --> 00:33:14,399
if you look at the code that runs there

854
00:33:14,399 --> 00:33:16,260
are two-thirds custom code and one-third

855
00:33:16,260 --> 00:33:18,659
open source and we measure this across a

856
00:33:18,659 --> 00:33:20,880
zillion apps uh

857
00:33:20,880 --> 00:33:23,340
and with this you not only find out

858
00:33:23,340 --> 00:33:25,140
where all the problems are but you're

859
00:33:25,140 --> 00:33:27,000
actually protecting against both known

860
00:33:27,000 --> 00:33:29,039
and unknown vulnerabilities in those

861
00:33:29,039 --> 00:33:31,679
libraries so runtime protection can't

862
00:33:31,679 --> 00:33:33,659
protect against all Library

863
00:33:33,659 --> 00:33:36,299
vulnerabilities but for ones that are in

864
00:33:36,299 --> 00:33:38,460
you know known classes of application

865
00:33:38,460 --> 00:33:40,980
security like path traversal and SQL

866
00:33:40,980 --> 00:33:42,539
injection and expression language

867
00:33:42,539 --> 00:33:43,880
rejection and then safety serialization

868
00:33:43,880 --> 00:33:46,380
all the the

869
00:33:46,380 --> 00:33:50,240
spring for shells and log for shells and

870
00:33:50,240 --> 00:33:52,620
you know atlassian vulnerabilities

871
00:33:52,620 --> 00:33:54,539
runtime protection is protected against

872
00:33:54,539 --> 00:33:55,980
all of those

873
00:33:55,980 --> 00:33:58,740
no fire drills you're safe when a new

874
00:33:58,740 --> 00:34:01,740
cve comes out and you can go

875
00:34:01,740 --> 00:34:05,220
update the libraries at your leisure uh

876
00:34:05,220 --> 00:34:07,380
this is a very different way of managing

877
00:34:07,380 --> 00:34:09,960
open source security that I think has a

878
00:34:09,960 --> 00:34:11,760
lot of

879
00:34:11,760 --> 00:34:13,199
a lot of value and if you look at the

880
00:34:13,199 --> 00:34:14,760
total cost think you're going to spend

881
00:34:14,760 --> 00:34:16,739
way way less on open source security

882
00:34:16,739 --> 00:34:18,119
this way because you focus on what

883
00:34:18,119 --> 00:34:20,480
matters

884
00:34:21,719 --> 00:34:24,179
sorry about API security so the

885
00:34:24,179 --> 00:34:25,500
traditional route

886
00:34:25,500 --> 00:34:28,080
you get developers to install configure

887
00:34:28,080 --> 00:34:29,760
and tune

888
00:34:29,760 --> 00:34:33,000
SAS Das or SCA maybe those are part of

889
00:34:33,000 --> 00:34:36,540
some API security Tool uh typically

890
00:34:36,540 --> 00:34:39,119
those are like dast inside those those

891
00:34:39,119 --> 00:34:41,219
things and then you're going to get a

892
00:34:41,219 --> 00:34:42,119
bunch of results you got to get

893
00:34:42,119 --> 00:34:43,619
developers to triage those things

894
00:34:43,619 --> 00:34:45,599
eliminate false positives make changes

895
00:34:45,599 --> 00:34:49,080
to the code retest redeploy and you

896
00:34:49,080 --> 00:34:50,940
ultimately you're going to end up with a

897
00:34:50,940 --> 00:34:52,739
big backlog of vulnerabilities that

898
00:34:52,739 --> 00:34:54,540
doesn't get fixed I've seen it over and

899
00:34:54,540 --> 00:34:55,800
over again

900
00:34:55,800 --> 00:34:58,320
I think this is you know 50k a year not

901
00:34:58,320 --> 00:35:00,300
for every API but for like a collection

902
00:35:00,300 --> 00:35:03,599
of apis that's managed by one team I

903
00:35:03,599 --> 00:35:05,400
think of that as kind of a good way of

904
00:35:05,400 --> 00:35:08,400
thinking about uh the cost and runtime

905
00:35:08,400 --> 00:35:10,440
protection totally different works

906
00:35:10,440 --> 00:35:12,060
exactly the same as I've described here

907
00:35:12,060 --> 00:35:14,160
you install it one time you'll find a

908
00:35:14,160 --> 00:35:16,380
bunch of library of vulnerabilities in

909
00:35:16,380 --> 00:35:19,560
both custom coding libraries uh

910
00:35:19,560 --> 00:35:22,200
development teams will also get

911
00:35:22,200 --> 00:35:24,300
threat intelligence feedback on what's

912
00:35:24,300 --> 00:35:25,859
going on in production so they can focus

913
00:35:25,859 --> 00:35:27,839
on the vulnerabilities that attackers

914
00:35:27,839 --> 00:35:30,119
are actually targeting and you can get a

915
00:35:30,119 --> 00:35:31,560
bunch of information about you know the

916
00:35:31,560 --> 00:35:34,079
threat model and so on cost is much less

917
00:35:34,079 --> 00:35:36,060
for doing API security with runtime

918
00:35:36,060 --> 00:35:37,260
protection

919
00:35:37,260 --> 00:35:39,839
than with a you know a traditional

920
00:35:39,839 --> 00:35:43,759
appsec API security product

921
00:35:44,400 --> 00:35:48,000
same kind of value with your legacy apps

922
00:35:48,000 --> 00:35:49,920
one thing about Legacy applications is

923
00:35:49,920 --> 00:35:51,960
it's difficult to sort of shift left

924
00:35:51,960 --> 00:35:54,240
because there is no left

925
00:35:54,240 --> 00:35:55,920
it's not under active development right

926
00:35:55,920 --> 00:35:57,900
so I don't know what what percentage of

927
00:35:57,900 --> 00:36:00,420
your applications are Legacy apps in

928
00:36:00,420 --> 00:36:03,260
your old organization

929
00:36:04,380 --> 00:36:06,180
30 Legacy

930
00:36:06,180 --> 00:36:08,460
and 70 new development

931
00:36:08,460 --> 00:36:11,220
oh wow it's usually kind of backwards

932
00:36:11,220 --> 00:36:12,300
from that but it doesn't matter that's

933
00:36:12,300 --> 00:36:15,060
that's you so whatever percentage of

934
00:36:15,060 --> 00:36:17,940
your portfolio is you know Legacy

935
00:36:17,940 --> 00:36:19,320
applications you got to think about a

936
00:36:19,320 --> 00:36:21,119
little different process for securing

937
00:36:21,119 --> 00:36:23,640
them adding rasp to them

938
00:36:23,640 --> 00:36:26,460
is a really fast way of getting great

939
00:36:26,460 --> 00:36:28,380
coverage over all those applications

940
00:36:28,380 --> 00:36:31,500
imagine if you could eliminate

941
00:36:31,500 --> 00:36:34,680
all the different injections uh you know

942
00:36:34,680 --> 00:36:37,980
most of the OS top 10 paths reversal xxc

943
00:36:37,980 --> 00:36:39,839
unsafety sterilization expression

944
00:36:39,839 --> 00:36:43,320
language and so on all in one shot

945
00:36:43,320 --> 00:36:46,740
you can do that for a limited a very low

946
00:36:46,740 --> 00:36:48,420
amount of money with runtime protection

947
00:36:48,420 --> 00:36:51,240
and doing it the old way is really hard

948
00:36:51,240 --> 00:36:52,680
you're going to scan all those

949
00:36:52,680 --> 00:36:53,880
applications you're going to get a

950
00:36:53,880 --> 00:36:55,560
zillion vulnerability reports you can

951
00:36:55,560 --> 00:36:57,240
have a massive backlog somebody's gonna

952
00:36:57,240 --> 00:36:58,619
have to triage them all there's going to

953
00:36:58,619 --> 00:37:00,240
be you know what percentage false

954
00:37:00,240 --> 00:37:02,598
positives

955
00:37:02,940 --> 00:37:06,180
big uh and so I think you know 50k a

956
00:37:06,180 --> 00:37:07,920
year per

957
00:37:07,920 --> 00:37:11,820
uh I'm not on the API security sector

958
00:37:11,820 --> 00:37:14,880
I didn't switch sorry uh

959
00:37:14,880 --> 00:37:18,180
20K a year I think is is pretty low for

960
00:37:18,180 --> 00:37:19,320
those applicants I made this lower

961
00:37:19,320 --> 00:37:21,480
because it they are Legacy applications

962
00:37:21,480 --> 00:37:23,940
and if they're not changing a lot then

963
00:37:23,940 --> 00:37:25,500
you know once you go through this

964
00:37:25,500 --> 00:37:27,240
process a few times you'll find less and

965
00:37:27,240 --> 00:37:29,940
less but still a decent amount of cost

966
00:37:29,940 --> 00:37:33,060
you can do this uh very quickly with

967
00:37:33,060 --> 00:37:35,339
runtime protection

968
00:37:35,339 --> 00:37:39,020
and when I add this this up

969
00:37:39,839 --> 00:37:41,520
you're going to spend a lot I average

970
00:37:41,520 --> 00:37:42,599
these things out because there's some

971
00:37:42,599 --> 00:37:45,480
overlap between these classes so uh you

972
00:37:45,480 --> 00:37:47,280
want to tackle open source open source

973
00:37:47,280 --> 00:37:49,440
is part of Shifting left and part of API

974
00:37:49,440 --> 00:37:51,300
security and part of Legacy code so I

975
00:37:51,300 --> 00:37:52,920
did a little math on this but I think

976
00:37:52,920 --> 00:37:56,339
you know 36k a year per app is probably

977
00:37:56,339 --> 00:37:58,980
pretty low for most organizations that

978
00:37:58,980 --> 00:38:01,619
want to do traditional appsec you can

979
00:38:01,619 --> 00:38:03,720
get better results with runtime

980
00:38:03,720 --> 00:38:05,820
protection for much less

981
00:38:05,820 --> 00:38:07,680
better security better protection I'm

982
00:38:07,680 --> 00:38:09,660
not saying don't go fix those

983
00:38:09,660 --> 00:38:11,940
vulnerabilities but you can do it in a

984
00:38:11,940 --> 00:38:14,099
much more efficient way than if you had

985
00:38:14,099 --> 00:38:15,180
to go through the you know the

986
00:38:15,180 --> 00:38:18,379
traditional approach to this

987
00:38:20,579 --> 00:38:24,240
if you want to try runtime protection uh

988
00:38:24,240 --> 00:38:26,760
one way to do it is to grab a copy of

989
00:38:26,760 --> 00:38:28,980
jot this is an open source project I

990
00:38:28,980 --> 00:38:31,079
created that allows people to experiment

991
00:38:31,079 --> 00:38:32,700
with instrumentation

992
00:38:32,700 --> 00:38:34,680
uh instrumentation is actually a little

993
00:38:34,680 --> 00:38:36,780
tricky to get started in it's a weird

994
00:38:36,780 --> 00:38:38,760
kind of programming right you're writing

995
00:38:38,760 --> 00:38:41,400
code that modifies other code or inserts

996
00:38:41,400 --> 00:38:43,619
instructions into other code so I made

997
00:38:43,619 --> 00:38:47,520
it really easy you can define a

998
00:38:47,520 --> 00:38:51,240
I call it a jot in yaml

999
00:38:51,240 --> 00:38:54,960
and this this one is to prevent uh

1000
00:38:54,960 --> 00:38:57,000
expression language injection it's

1001
00:38:57,000 --> 00:38:59,220
really simple you say hey in these

1002
00:38:59,220 --> 00:39:01,280
methods uh in the Value

1003
00:39:01,280 --> 00:39:04,680
expression.getvalue method we want to

1004
00:39:04,680 --> 00:39:07,160
prevent calls to process Builder and

1005
00:39:07,160 --> 00:39:09,960
socket creation so this is the kind of

1006
00:39:09,960 --> 00:39:11,280
protection I talked about earlier if we

1007
00:39:11,280 --> 00:39:13,200
see that pattern match we're going to

1008
00:39:13,200 --> 00:39:14,780
throw an exception that says hey

1009
00:39:14,780 --> 00:39:17,400
attempts to perform seek expression

1010
00:39:17,400 --> 00:39:19,740
language injection it's super powerful

1011
00:39:19,740 --> 00:39:22,440
you can add sensors for whatever you

1012
00:39:22,440 --> 00:39:24,300
want whatever you want to measure out of

1013
00:39:24,300 --> 00:39:26,339
a running job application you can do it

1014
00:39:26,339 --> 00:39:28,740
with with jot in just a few lines of

1015
00:39:28,740 --> 00:39:30,720
yaml you can create some really powerful

1016
00:39:30,720 --> 00:39:33,420
protections everyone should probably be

1017
00:39:33,420 --> 00:39:35,280
running this rule on their applications

1018
00:39:35,280 --> 00:39:36,960
to prevent expression language injection

1019
00:39:36,960 --> 00:39:37,980
especially if you're using spring

1020
00:39:37,980 --> 00:39:40,020
because they've had sort of a series of

1021
00:39:40,020 --> 00:39:42,599
these attacks but you can find that it's

1022
00:39:42,599 --> 00:39:45,480
fun to play around with but uh you know

1023
00:39:45,480 --> 00:39:47,339
I think the the power of runtime

1024
00:39:47,339 --> 00:39:48,660
protection is when you start thinking

1025
00:39:48,660 --> 00:39:50,940
about a collection of these rules that

1026
00:39:50,940 --> 00:39:53,760
can protect you from all of the OS kinds

1027
00:39:53,760 --> 00:39:56,420
of vulnerabilities

1028
00:39:57,480 --> 00:39:58,980
so at the end of the day who do you

1029
00:39:58,980 --> 00:40:02,099
trust to get the code right and this is

1030
00:40:02,099 --> 00:40:04,200
um this is my wrap up this is uh you

1031
00:40:04,200 --> 00:40:06,780
know Matlock summarizing the end of the

1032
00:40:06,780 --> 00:40:08,700
case so we went up through all that

1033
00:40:08,700 --> 00:40:09,420
stuff

1034
00:40:09,420 --> 00:40:12,119
you can choose to try to coerce people

1035
00:40:12,119 --> 00:40:14,579
into getting the code correct with a

1036
00:40:14,579 --> 00:40:16,140
whole bunch of tools and output it's

1037
00:40:16,140 --> 00:40:17,640
really hard we've been trying for 20

1038
00:40:17,640 --> 00:40:20,160
years and it doesn't work very well or

1039
00:40:20,160 --> 00:40:21,900
you can try to put a perimeter around

1040
00:40:21,900 --> 00:40:24,480
your applications and filter out the bad

1041
00:40:24,480 --> 00:40:27,300
traffic from getting in but we've been

1042
00:40:27,300 --> 00:40:29,460
trying for 20 years and it doesn't work

1043
00:40:29,460 --> 00:40:32,400
very well and it's super noisy or

1044
00:40:32,400 --> 00:40:35,060
you can have an army of robots

1045
00:40:35,060 --> 00:40:37,619
continuously ensuring that your code has

1046
00:40:37,619 --> 00:40:40,200
all the best possible defenses at

1047
00:40:40,200 --> 00:40:42,720
exactly the right point in the code

1048
00:40:42,720 --> 00:40:45,060
to make a decision about whether if

1049
00:40:45,060 --> 00:40:48,119
something is an attack or not

1050
00:40:48,119 --> 00:40:50,160
those are the those are the choices and

1051
00:40:50,160 --> 00:40:52,079
I think this last one is far more

1052
00:40:52,079 --> 00:40:54,540
efficient and far more effective on a

1053
00:40:54,540 --> 00:40:55,920
number of dimensions

1054
00:40:55,920 --> 00:40:58,200
so with that I'll stop I would love to

1055
00:40:58,200 --> 00:41:00,799
take your questions

1056
00:41:01,440 --> 00:41:04,040
Boyd

1057
00:41:05,099 --> 00:41:07,820
thank you

1058
00:41:12,660 --> 00:41:16,098
good question over here Boyd

1059
00:41:17,099 --> 00:41:18,900
I'm failing the intelligence test for

1060
00:41:18,900 --> 00:41:21,560
turning this on

1061
00:41:22,619 --> 00:41:24,480
so do you see more traditional tools

1062
00:41:24,480 --> 00:41:27,680
like SCA and whatnot used together with

1063
00:41:27,680 --> 00:41:31,320
runtime protection or do you see the

1064
00:41:31,320 --> 00:41:33,240
runtime protection eventually replacing

1065
00:41:33,240 --> 00:41:35,339
the the traditional tools

1066
00:41:35,339 --> 00:41:36,960
well it's a good question I mean there's

1067
00:41:36,960 --> 00:41:39,660
we have aslr in depth but people are

1068
00:41:39,660 --> 00:41:42,359
still using tools to detect and prevent

1069
00:41:42,359 --> 00:41:44,700
buffer overflows I think that's smart I

1070
00:41:44,700 --> 00:41:47,579
think the best strategy here is

1071
00:41:47,579 --> 00:41:50,160
a little bit of belt and suspenders you

1072
00:41:50,160 --> 00:41:52,200
know sure work on the code try to get it

1073
00:41:52,200 --> 00:41:53,520
right but

1074
00:41:53,520 --> 00:41:55,380
the first thing you should do is get

1075
00:41:55,380 --> 00:41:57,839
runtime protection in place right that's

1076
00:41:57,839 --> 00:42:00,359
like locking the front door then you can

1077
00:42:00,359 --> 00:42:02,940
go like you know work on all the you

1078
00:42:02,940 --> 00:42:06,660
know all the details but uh I think for

1079
00:42:06,660 --> 00:42:08,820
most organizations it's the right first

1080
00:42:08,820 --> 00:42:11,280
move like if I was a CSO coming into a

1081
00:42:11,280 --> 00:42:13,140
new organization

1082
00:42:13,140 --> 00:42:15,540
and I'd had no confidence that my

1083
00:42:15,540 --> 00:42:17,220
software was Secure I would put runtime

1084
00:42:17,220 --> 00:42:18,960
protection on all of them and then go

1085
00:42:18,960 --> 00:42:20,460
back and say hey let's let's start

1086
00:42:20,460 --> 00:42:21,900
cleaning up the code and make sure our

1087
00:42:21,900 --> 00:42:24,000
new development is secure our libraries

1088
00:42:24,000 --> 00:42:26,940
are are getting straight but it's really

1089
00:42:26,940 --> 00:42:29,099
fast to push out runtime protection we

1090
00:42:29,099 --> 00:42:31,020
have one company that pushed it out to 6

1091
00:42:31,020 --> 00:42:32,700
000 applications in a matter of a few

1092
00:42:32,700 --> 00:42:35,579
months so you can scale really fast and

1093
00:42:35,579 --> 00:42:37,320
get massive improvements in your appsec

1094
00:42:37,320 --> 00:42:39,060
program

1095
00:42:39,060 --> 00:42:40,579
yeah

1096
00:42:40,579 --> 00:42:44,400
can back and runtime protection both can

1097
00:42:44,400 --> 00:42:47,579
co-exist yeah absolutely a lot of people

1098
00:42:47,579 --> 00:42:50,579
do that uh they they leave a cloud WAFF

1099
00:42:50,579 --> 00:42:53,220
in place they don't configure it they

1100
00:42:53,220 --> 00:42:55,560
just let it catch the low-hanging fruit

1101
00:42:55,560 --> 00:42:56,940
people like to call it I don't know why

1102
00:42:56,940 --> 00:42:58,500
it doesn't it's not a good analogy but

1103
00:42:58,500 --> 00:43:00,420
like they they use that to filter out

1104
00:43:00,420 --> 00:43:02,520
some basic stuff dos attacks and so on

1105
00:43:02,520 --> 00:43:04,560
and then they've got rasps to do the

1106
00:43:04,560 --> 00:43:06,720
real protection against the interesting

1107
00:43:06,720 --> 00:43:10,200
attacks okay thank you a great question

1108
00:43:10,200 --> 00:43:12,379
foreign

1109
00:43:17,220 --> 00:43:20,220
because uh I agree with everything I

1110
00:43:20,220 --> 00:43:22,500
think runtime production is probably the

1111
00:43:22,500 --> 00:43:23,819
thing to have

1112
00:43:23,819 --> 00:43:27,300
uh but they did some studies on on uh

1113
00:43:27,300 --> 00:43:29,579
the effects of self-driving cars how

1114
00:43:29,579 --> 00:43:31,619
that affects our psychic

1115
00:43:31,619 --> 00:43:34,440
and they can they sort of came to the

1116
00:43:34,440 --> 00:43:37,040
conclusion that we're gonna just

1117
00:43:37,040 --> 00:43:39,839
when we're out yeah we're gonna walk in

1118
00:43:39,839 --> 00:43:41,819
front of a car because we know it stops

1119
00:43:41,819 --> 00:43:44,280
is there risk that runtime protection

1120
00:43:44,280 --> 00:43:46,800
actually makes code worse

1121
00:43:46,800 --> 00:43:48,480
yeah that's a good question that's

1122
00:43:48,480 --> 00:43:49,920
something called in economics that's

1123
00:43:49,920 --> 00:43:51,960
something called a Nash equilibrium and

1124
00:43:51,960 --> 00:43:54,300
it means that uh you know there's all

1125
00:43:54,300 --> 00:43:57,540
kinds of of those like uh uh people

1126
00:43:57,540 --> 00:43:59,640
drive faster when they have seat belts

1127
00:43:59,640 --> 00:44:01,740
and they more Reckless on bikes when

1128
00:44:01,740 --> 00:44:03,180
they have helmets and all kinds of

1129
00:44:03,180 --> 00:44:04,680
things like that

1130
00:44:04,680 --> 00:44:08,160
uh I guess you know culture wise I don't

1131
00:44:08,160 --> 00:44:09,780
think I would try to

1132
00:44:09,780 --> 00:44:11,160
to

1133
00:44:11,160 --> 00:44:14,099
let people think that runtime protection

1134
00:44:14,099 --> 00:44:15,540
makes it okay

1135
00:44:15,540 --> 00:44:17,579
I think you know you still want to build

1136
00:44:17,579 --> 00:44:19,740
a culture of security but I think you

1137
00:44:19,740 --> 00:44:20,640
know

1138
00:44:20,640 --> 00:44:24,000
changing the focus from dealing with

1139
00:44:24,000 --> 00:44:26,400
these individual vulnerabilities to

1140
00:44:26,400 --> 00:44:28,740
focusing on more difficult strategic

1141
00:44:28,740 --> 00:44:31,140
issues like threat modeling Access

1142
00:44:31,140 --> 00:44:33,359
Control authentication encryption

1143
00:44:33,359 --> 00:44:34,920
strategy like those are things that

1144
00:44:34,920 --> 00:44:36,960
tools will never solve but we are

1145
00:44:36,960 --> 00:44:39,180
wasting a hundred percent of our

1146
00:44:39,180 --> 00:44:42,119
security expertise brain power on

1147
00:44:42,119 --> 00:44:44,940
chasing cross-eyed scripting it's nuts

1148
00:44:44,940 --> 00:44:47,160
and we need to focus on those more

1149
00:44:47,160 --> 00:44:49,440
strategic issues because really those

1150
00:44:49,440 --> 00:44:52,500
are the things that will really kill you

1151
00:44:52,500 --> 00:44:54,420
yes Boyd can you go back to your last

1152
00:44:54,420 --> 00:44:57,119
slide yep

1153
00:44:57,119 --> 00:44:58,980
so some really tall guy a while ago

1154
00:44:58,980 --> 00:45:01,800
informed me about uh defense in depth

1155
00:45:01,800 --> 00:45:03,240
I'm not going to name which tall guy

1156
00:45:03,240 --> 00:45:05,460
there's a few in here and uh it seems to

1157
00:45:05,460 --> 00:45:07,079
me that you're making a defense in-depth

1158
00:45:07,079 --> 00:45:08,160
argument

1159
00:45:08,160 --> 00:45:10,200
um put the left or put the rasp out in

1160
00:45:10,200 --> 00:45:10,920
front

1161
00:45:10,920 --> 00:45:13,560
and then you've the WAFF out in front

1162
00:45:13,560 --> 00:45:15,960
I'm sorry the rasp out in front go out

1163
00:45:15,960 --> 00:45:18,180
in front rasp goes in the app well I'm

1164
00:45:18,180 --> 00:45:19,800
sorry I'm thinking about

1165
00:45:19,800 --> 00:45:23,400
um like layers of security so first you

1166
00:45:23,400 --> 00:45:25,440
do is rasp to protect all of those

1167
00:45:25,440 --> 00:45:27,780
humans and all their human time against

1168
00:45:27,780 --> 00:45:30,240
all of the the noise the false positives

1169
00:45:30,240 --> 00:45:32,040
yeah so they can focus on what matters

1170
00:45:32,040 --> 00:45:34,920
then the perimeter comes next to filter

1171
00:45:34,920 --> 00:45:37,020
out whatever the perimeter can filter so

1172
00:45:37,020 --> 00:45:38,460
now your humans are working on a much

1173
00:45:38,460 --> 00:45:40,319
smaller set of far more important things

1174
00:45:40,319 --> 00:45:42,540
is that fundamentally what you're trying

1175
00:45:42,540 --> 00:45:43,740
to tell us

1176
00:45:43,740 --> 00:45:47,040
I think that's fair is to yeah I often

1177
00:45:47,040 --> 00:45:49,500
say uh we need to in apps like we need

1178
00:45:49,500 --> 00:45:52,680
to prioritize for learning and I think

1179
00:45:52,680 --> 00:45:54,180
that's a choral area this is like you

1180
00:45:54,180 --> 00:45:55,619
want to focus your people on the

1181
00:45:55,619 --> 00:45:56,880
interesting hard problems that

1182
00:45:56,880 --> 00:45:59,160
automation can't solve right now in apps

1183
00:45:59,160 --> 00:46:01,800
like we have a tendency to use every

1184
00:46:01,800 --> 00:46:03,839
tool for every job like if you're

1185
00:46:03,839 --> 00:46:05,579
building a house you would hammer the

1186
00:46:05,579 --> 00:46:06,780
nails with the hammer but you'd also

1187
00:46:06,780 --> 00:46:08,940
Hammer them in with a saw and the drill

1188
00:46:08,940 --> 00:46:10,440
and a bunch of other stuff and it

1189
00:46:10,440 --> 00:46:12,599
doesn't make any sense we need to use

1190
00:46:12,599 --> 00:46:15,960
our automation wisely and that means

1191
00:46:15,960 --> 00:46:17,400
using the right tool for the job and

1192
00:46:17,400 --> 00:46:19,740
sort of protecting humans from sort of

1193
00:46:19,740 --> 00:46:21,960
the noise overload

1194
00:46:21,960 --> 00:46:24,000
so the question is like hey what happens

1195
00:46:24,000 --> 00:46:26,819
when APM tools offer runtime protection

1196
00:46:26,819 --> 00:46:29,400
I mean it's it's not a terrible idea

1197
00:46:29,400 --> 00:46:33,240
it's not necessary because APM tools and

1198
00:46:33,240 --> 00:46:35,160
runtime protection can run side by side

1199
00:46:35,160 --> 00:46:37,800
we run side by side with you know app

1200
00:46:37,800 --> 00:46:39,900
Dynamics and New Relic and datadog and

1201
00:46:39,900 --> 00:46:41,520
all those

1202
00:46:41,520 --> 00:46:45,000
um personally I think doing appsec right

1203
00:46:45,000 --> 00:46:48,300
requires a whole company that's focused

1204
00:46:48,300 --> 00:46:51,119
on appsec uh there's a lot of expertise

1205
00:46:51,119 --> 00:46:53,220
that went into creating the rules of

1206
00:46:53,220 --> 00:46:55,020
getting right and not breaking apps and

1207
00:46:55,020 --> 00:46:57,060
you know I I think that's really

1208
00:46:57,060 --> 00:46:59,819
valuable I I suspect that the APM

1209
00:46:59,819 --> 00:47:03,000
versions won't be as sophisticated but

1210
00:47:03,000 --> 00:47:04,260
I'm glad they're doing it because it's

1211
00:47:04,260 --> 00:47:07,140
it's the right it's the right thing I I

1212
00:47:07,140 --> 00:47:09,000
usually say

1213
00:47:09,000 --> 00:47:11,940
every complex thing in the world is

1214
00:47:11,940 --> 00:47:15,180
instrumented right your car airplanes

1215
00:47:15,180 --> 00:47:17,400
nuclear power plants space shuttle

1216
00:47:17,400 --> 00:47:18,960
industrial factories they're all

1217
00:47:18,960 --> 00:47:20,940
instrumented like crazy modern

1218
00:47:20,940 --> 00:47:23,819
industrial Factory is instrumented for

1219
00:47:23,819 --> 00:47:29,040
smoke and heat and fire and uh noise and

1220
00:47:29,040 --> 00:47:31,740
vibration and everything they know when

1221
00:47:31,740 --> 00:47:33,540
a problem is going to happen way before

1222
00:47:33,540 --> 00:47:35,220
it actually happens like if you've got a

1223
00:47:35,220 --> 00:47:36,960
bearing loose in a machine they'll

1224
00:47:36,960 --> 00:47:38,460
detect it from the sound or the

1225
00:47:38,460 --> 00:47:41,460
vibration and then they can fix it and

1226
00:47:41,460 --> 00:47:42,839
not go down

1227
00:47:42,839 --> 00:47:44,700
that's what this is all about we need

1228
00:47:44,700 --> 00:47:46,200
software is arguably the most complex

1229
00:47:46,200 --> 00:47:48,240
thing man has ever created

1230
00:47:48,240 --> 00:47:50,579
and it's barely instrumented at all log

1231
00:47:50,579 --> 00:47:53,540
files suck

1232
00:47:53,640 --> 00:47:55,740
we need to instrument for security thank

1233
00:47:55,740 --> 00:47:56,720
you

1234
00:47:56,720 --> 00:47:59,160
we need to instrument every piece of

1235
00:47:59,160 --> 00:48:00,480
software for security and I'm not

1236
00:48:00,480 --> 00:48:02,040
kidding about every piece of software I

1237
00:48:02,040 --> 00:48:03,720
mean in your dishwasher in your toaster

1238
00:48:03,720 --> 00:48:06,900
and your plane and your car

1239
00:48:06,900 --> 00:48:08,400
instrumentation lets you see what's

1240
00:48:08,400 --> 00:48:10,440
going on inside

1241
00:48:10,440 --> 00:48:12,540
otherwise it's just a black box and it's

1242
00:48:12,540 --> 00:48:14,040
going to blow up when it blows up it

1243
00:48:14,040 --> 00:48:16,079
shouldn't be that way

1244
00:48:16,079 --> 00:48:18,480
I think that's a fair point I mean

1245
00:48:18,480 --> 00:48:20,579
there's products uh but there aren't any

1246
00:48:20,579 --> 00:48:22,079
you know it hasn't the market hasn't

1247
00:48:22,079 --> 00:48:23,880
evolved to the point where there's like

1248
00:48:23,880 --> 00:48:25,859
Open Standards for runtime protection

1249
00:48:25,859 --> 00:48:28,079
but there will be

1250
00:48:28,079 --> 00:48:30,960
I'm 100 convinced that you know in the

1251
00:48:30,960 --> 00:48:33,480
next few years that software is going to

1252
00:48:33,480 --> 00:48:35,099
be instrumented it has to be it's it

1253
00:48:35,099 --> 00:48:38,280
just it can't survive the way it is

1254
00:48:38,280 --> 00:48:40,200
yeah I'm gonna I'm just wanted to add to

1255
00:48:40,200 --> 00:48:44,400
his point um about like making us lazier

1256
00:48:44,400 --> 00:48:46,500
um because I'm a software engineer so

1257
00:48:46,500 --> 00:48:47,700
I'm kind of thinking about it from that

1258
00:48:47,700 --> 00:48:50,579
perspective of like yeah we said the

1259
00:48:50,579 --> 00:48:52,740
same thing whenever like third

1260
00:48:52,740 --> 00:48:54,300
generation languages came out or even

1261
00:48:54,300 --> 00:48:55,980
second generation languages were like

1262
00:48:55,980 --> 00:48:57,480
yeah we're gonna get lazy with memory

1263
00:48:57,480 --> 00:48:59,099
management

1264
00:48:59,099 --> 00:49:00,780
um and so thinking about that like yeah

1265
00:49:00,780 --> 00:49:03,300
we're probably gonna get lazy when with

1266
00:49:03,300 --> 00:49:05,700
like these really like high impact

1267
00:49:05,700 --> 00:49:08,040
security vulnerabilities but it's just

1268
00:49:08,040 --> 00:49:09,240
because we don't have to worry about

1269
00:49:09,240 --> 00:49:11,640
them anymore overall it's a better thing

1270
00:49:11,640 --> 00:49:14,280
we became more productive it's a I think

1271
00:49:14,280 --> 00:49:15,960
it's a controversial opinion but I'm

1272
00:49:15,960 --> 00:49:18,119
gonna say that that might not be bad

1273
00:49:18,119 --> 00:49:20,339
yeah exactly you make these

1274
00:49:20,339 --> 00:49:22,380
vulnerabilities impossible like when we

1275
00:49:22,380 --> 00:49:24,300
say we're turning off doctype processing

1276
00:49:24,300 --> 00:49:27,119
in all XML parsers that pretty much

1277
00:49:27,119 --> 00:49:30,660
makes XXX impossible and so should we be

1278
00:49:30,660 --> 00:49:32,579
wasting valuable developer and security

1279
00:49:32,579 --> 00:49:34,500
time on dealing with xxe or should we

1280
00:49:34,500 --> 00:49:36,660
just say hey let's focus on what's

1281
00:49:36,660 --> 00:49:38,220
really a problem

1282
00:49:38,220 --> 00:49:42,480
yeah I agree uh and so I guess taking a

1283
00:49:42,480 --> 00:49:44,460
really like extremely high level view

1284
00:49:44,460 --> 00:49:48,000
about this uh this whole discussion

1285
00:49:48,000 --> 00:49:50,700
um it makes me think at some point we're

1286
00:49:50,700 --> 00:49:52,319
just going to have run times that are

1287
00:49:52,319 --> 00:49:54,660
instrumented already uh for those sort

1288
00:49:54,660 --> 00:49:56,099
of things and that that kind of seems

1289
00:49:56,099 --> 00:49:57,540
like this seems that's what you should

1290
00:49:57,540 --> 00:49:59,819
have in your organization yeah all your

1291
00:49:59,819 --> 00:50:01,680
platforms should be pre-instrumented so

1292
00:50:01,680 --> 00:50:02,880
you can whenever you deploy a new

1293
00:50:02,880 --> 00:50:04,500
application it's automatically protected

1294
00:50:04,500 --> 00:50:06,839
yeah this seems like the first step in a

1295
00:50:06,839 --> 00:50:08,819
new generation of run times essentially

1296
00:50:08,819 --> 00:50:11,280
uh that that are instrumented and that's

1297
00:50:11,280 --> 00:50:14,220
just the way it is in the future yeah I

1298
00:50:14,220 --> 00:50:15,240
absolutely think that's what's going to

1299
00:50:15,240 --> 00:50:16,619
happen

1300
00:50:16,619 --> 00:50:19,700
I got you

1301
00:50:21,780 --> 00:50:23,520
hey uh what do you what do you think

1302
00:50:23,520 --> 00:50:26,280
about runtime protection in uh in like

1303
00:50:26,280 --> 00:50:28,740
uh serverless or like a unicornal type

1304
00:50:28,740 --> 00:50:30,300
scenario

1305
00:50:30,300 --> 00:50:33,599
yeah great question so uh

1306
00:50:33,599 --> 00:50:36,839
many of those environments don't

1307
00:50:36,839 --> 00:50:40,260
support instrumentation yet because you

1308
00:50:40,260 --> 00:50:41,460
know when you're deploying serverless

1309
00:50:41,460 --> 00:50:42,900
you deploy a little piece of code and it

1310
00:50:42,900 --> 00:50:44,339
runs on a platform that's been all set

1311
00:50:44,339 --> 00:50:46,560
up for you but the future is that

1312
00:50:46,560 --> 00:50:48,300
there's exactly what he said is there's

1313
00:50:48,300 --> 00:50:49,920
instrumentation built into that platform

1314
00:50:49,920 --> 00:50:52,680
so that it is there automatically for

1315
00:50:52,680 --> 00:50:54,660
you there's just not a great way to do

1316
00:50:54,660 --> 00:50:57,240
that as a third party yet but that's

1317
00:50:57,240 --> 00:50:58,740
going to happen it's already happening

1318
00:50:58,740 --> 00:51:01,559
there's things like layers in AWS and so

1319
00:51:01,559 --> 00:51:04,079
on so it's it's going to happen you need

1320
00:51:04,079 --> 00:51:07,079
it for APM purposes anyway and so

1321
00:51:07,079 --> 00:51:08,640
runtime protection is really just

1322
00:51:08,640 --> 00:51:11,460
writing the coattails of uh of

1323
00:51:11,460 --> 00:51:17,480
observability uh anyway so yeah

1324
00:51:19,160 --> 00:51:21,300
okay thank you very much everybody

1325
00:51:21,300 --> 00:51:24,200
appreciate it

1326
00:51:25,680 --> 00:51:28,890
[Music]

