1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:54,260
[Music]

6
00:00:54,260 --> 00:00:58,379
yes hacking apis red and blue make

7
00:00:58,379 --> 00:01:01,100
purple a nicely purple themed deck

8
00:01:01,100 --> 00:01:02,760
basically I'm going to talk about

9
00:01:02,760 --> 00:01:05,400
hacking apis from a pen testing kind of

10
00:01:05,400 --> 00:01:07,860
uh process and then talk about what it

11
00:01:07,860 --> 00:01:09,240
looks like as an attacker and what it

12
00:01:09,240 --> 00:01:11,040
looks like as a Defender

13
00:01:11,040 --> 00:01:14,040
so quick go we have a very quick

14
00:01:14,040 --> 00:01:16,320
background I'm going to talk about why

15
00:01:16,320 --> 00:01:19,260
attack apis that the meat of it is three

16
00:01:19,260 --> 00:01:20,759
where we're going to talk about apis and

17
00:01:20,759 --> 00:01:22,080
then I'll have some key takeaways and

18
00:01:22,080 --> 00:01:24,540
conclusions

19
00:01:24,540 --> 00:01:27,299
so who am I I met to sorrow I like to

20
00:01:27,299 --> 00:01:29,040
call myself a reform programmer and

21
00:01:29,040 --> 00:01:31,979
appsec engineer I actually got my big

22
00:01:31,979 --> 00:01:34,200
expletive body this high off the ground

23
00:01:34,200 --> 00:01:35,640
I broke two boards at once to get my

24
00:01:35,640 --> 00:01:37,200
second degree black belt I was thrilled

25
00:01:37,200 --> 00:01:39,060
when I did that and I lived through it

26
00:01:39,060 --> 00:01:40,619
which is even better

27
00:01:40,619 --> 00:01:42,900
I've been doing over us forever

28
00:01:42,900 --> 00:01:44,640
um just for you know my biases I'm a

29
00:01:44,640 --> 00:01:47,520
Linux person I like open source and I

30
00:01:47,520 --> 00:01:49,619
write in go so those are my biases if

31
00:01:49,619 --> 00:01:52,380
you hear them now you know

32
00:01:52,380 --> 00:01:54,960
so why attack apis

33
00:01:54,960 --> 00:01:58,079
well apis are simple right like your

34
00:01:58,079 --> 00:02:01,140
program sends the get something thing to

35
00:02:01,140 --> 00:02:02,939
my program and it sends something back

36
00:02:02,939 --> 00:02:04,920
like apis they're simple right they're

37
00:02:04,920 --> 00:02:05,939
easy

38
00:02:05,939 --> 00:02:08,639
right well like when you do them for

39
00:02:08,639 --> 00:02:10,080
real they get a lot more complicated

40
00:02:10,080 --> 00:02:11,760
there's a whole bunch of moving parts

41
00:02:11,760 --> 00:02:14,520
right because this web app is behind an

42
00:02:14,520 --> 00:02:16,920
API but you say mobile app uses it and

43
00:02:16,920 --> 00:02:18,420
maybe one team is running the API

44
00:02:18,420 --> 00:02:19,980
management platform but somebody else is

45
00:02:19,980 --> 00:02:22,620
running the web app firewall and maybe

46
00:02:22,620 --> 00:02:24,140
someone else is running the Gateway

47
00:02:24,140 --> 00:02:26,280
different product teams made these

48
00:02:26,280 --> 00:02:27,599
products maybe you're reaching out to

49
00:02:27,599 --> 00:02:30,660
third party apis so this joke gets

50
00:02:30,660 --> 00:02:32,819
complicated really quick and it's a

51
00:02:32,819 --> 00:02:35,459
little bit unfortunate because this is

52
00:02:35,459 --> 00:02:37,440
what we think of as API this simple

53
00:02:37,440 --> 00:02:39,239
little a talks to be yay it's all fun

54
00:02:39,239 --> 00:02:41,580
but really what it's like for realsies

55
00:02:41,580 --> 00:02:43,940
is much more complicated

56
00:02:43,940 --> 00:02:46,800
the other interesting thing you have a

57
00:02:46,800 --> 00:02:48,120
good upset program you're confident

58
00:02:48,120 --> 00:02:49,620
you're doing you're doing things right

59
00:02:49,620 --> 00:02:52,080
you've got all these things in place

60
00:02:52,080 --> 00:02:54,360
well that's great but the Venn diagram

61
00:02:54,360 --> 00:02:56,760
of appsec plus API SEC means you're

62
00:02:56,760 --> 00:02:58,680
missing a lot there's a lot of really

63
00:02:58,680 --> 00:03:01,379
specific things that you only have to

64
00:03:01,379 --> 00:03:03,959
deal with in API world that aren't part

65
00:03:03,959 --> 00:03:06,180
of your appsec world and some things

66
00:03:06,180 --> 00:03:09,599
like SCA and a little bit vast and SAS

67
00:03:09,599 --> 00:03:10,980
and threat modeling those work for both

68
00:03:10,980 --> 00:03:12,360
those are great

69
00:03:12,360 --> 00:03:14,340
but there's a lot of extra stuff you got

70
00:03:14,340 --> 00:03:17,340
to do in an API world right that's just

71
00:03:17,340 --> 00:03:18,720
different and you probably don't have

72
00:03:18,720 --> 00:03:19,860
experience with it you may not have

73
00:03:19,860 --> 00:03:22,459
tooling that understands it

74
00:03:22,459 --> 00:03:25,739
so I love this picture right you're like

75
00:03:25,739 --> 00:03:28,080
I've got coverage I've got tools well

76
00:03:28,080 --> 00:03:29,819
that's great you're man I hate this

77
00:03:29,819 --> 00:03:31,379
screen resolution

78
00:03:31,379 --> 00:03:32,040
um

79
00:03:32,040 --> 00:03:34,739
you've got uh your hand catching water

80
00:03:34,739 --> 00:03:36,599
you're catching a lot of it and hey if

81
00:03:36,599 --> 00:03:37,860
you have a good episode program you're

82
00:03:37,860 --> 00:03:39,659
probably doing okay but you're not doing

83
00:03:39,659 --> 00:03:41,040
great because there's going to be some

84
00:03:41,040 --> 00:03:45,560
slippage some gaps some water getting by

85
00:03:46,200 --> 00:03:49,260
okay so it's all about the data right

86
00:03:49,260 --> 00:03:50,760
we've heard the data is the new oil

87
00:03:50,760 --> 00:03:55,980
right my proposition is that apis are

88
00:03:55,980 --> 00:03:58,019
the pipes for that data that's what

89
00:03:58,019 --> 00:04:01,019
makes that data move around so the other

90
00:04:01,019 --> 00:04:04,080
reason why attackers like attacking apis

91
00:04:04,080 --> 00:04:05,700
is because that's where the data is I

92
00:04:05,700 --> 00:04:07,200
don't have to SQL inject anymore I can

93
00:04:07,200 --> 00:04:08,580
make a rest request to get that data

94
00:04:08,580 --> 00:04:11,099
sent to me right why SQL inject what I

95
00:04:11,099 --> 00:04:13,620
can just make a rest call

96
00:04:13,620 --> 00:04:15,360
and the final thing I think that makes

97
00:04:15,360 --> 00:04:17,279
apis particularly interesting is we've

98
00:04:17,279 --> 00:04:18,720
had years and years and years of using

99
00:04:18,720 --> 00:04:20,639
browsers and we've gotten pretty good

100
00:04:20,639 --> 00:04:22,740
about controls around browsers like you

101
00:04:22,740 --> 00:04:25,560
can do a fairly rugged authentication of

102
00:04:25,560 --> 00:04:27,840
a human being in a browser right there's

103
00:04:27,840 --> 00:04:30,660
MFA there's 2fa there's SMS tokens

104
00:04:30,660 --> 00:04:33,360
there's browser profiling like I always

105
00:04:33,360 --> 00:04:35,000
come from Linux with a really big screen

106
00:04:35,000 --> 00:04:37,500
but you maybe come from windows with a

107
00:04:37,500 --> 00:04:39,540
smaller screen or this guy's got a Mac

108
00:04:39,540 --> 00:04:41,280
laptop we can do that stuff

109
00:04:41,280 --> 00:04:43,139
how do you do that for my python script

110
00:04:43,139 --> 00:04:45,660
what screen size does my python script

111
00:04:45,660 --> 00:04:48,360
have right does my python script have a

112
00:04:48,360 --> 00:04:50,639
phone that can take an SMS token and MFA

113
00:04:50,639 --> 00:04:51,600
it can't

114
00:04:51,600 --> 00:04:53,880
so why wouldn't you attack these they

115
00:04:53,880 --> 00:04:55,860
have less controls around them just

116
00:04:55,860 --> 00:04:58,500
available maybe not even deployed so

117
00:04:58,500 --> 00:05:00,840
these are the reasons why I think apis

118
00:05:00,840 --> 00:05:02,100
are really interesting as an attack

119
00:05:02,100 --> 00:05:03,900
vector

120
00:05:03,900 --> 00:05:05,880
and then just to kind of cover the bases

121
00:05:05,880 --> 00:05:08,580
right we have black box testing which is

122
00:05:08,580 --> 00:05:10,620
you have zero knowledge white box

123
00:05:10,620 --> 00:05:12,300
testing where you have

124
00:05:12,300 --> 00:05:14,280
good knowledge gray box testing where

125
00:05:14,280 --> 00:05:15,540
you have a little bit of knowledge and

126
00:05:15,540 --> 00:05:16,620
then crystal box where you know

127
00:05:16,620 --> 00:05:17,699
everything right and this kind of

128
00:05:17,699 --> 00:05:19,620
depends how you want to test them you

129
00:05:19,620 --> 00:05:21,600
may do it in any of these sort of areas

130
00:05:21,600 --> 00:05:24,479
the other thing you always have is pro

131
00:05:24,479 --> 00:05:27,120
bono pen testing AKA people hack your

132
00:05:27,120 --> 00:05:30,600
stuff right this is always an option if

133
00:05:30,600 --> 00:05:31,680
you put something on the Internet you

134
00:05:31,680 --> 00:05:34,020
can you get free it's like hey

135
00:05:34,020 --> 00:05:36,620
conversion

136
00:05:37,139 --> 00:05:39,120
so three things I think that are

137
00:05:39,120 --> 00:05:40,199
important to think about when you think

138
00:05:40,199 --> 00:05:43,860
about API security right one thing you

139
00:05:43,860 --> 00:05:45,900
just got to know what you have and I

140
00:05:45,900 --> 00:05:47,759
would call that API security posture you

141
00:05:47,759 --> 00:05:49,199
can call it inventory whatever you want

142
00:05:49,199 --> 00:05:51,479
but it's understanding all of the apis

143
00:05:51,479 --> 00:05:52,740
you have because guess what these things

144
00:05:52,740 --> 00:05:55,440
grow like mushrooms after rain they just

145
00:05:55,440 --> 00:05:57,060
show up

146
00:05:57,060 --> 00:05:58,320
um and then who's calling it and what

147
00:05:58,320 --> 00:05:59,639
data does that send back and forth

148
00:05:59,639 --> 00:06:02,639
because as a like appsec person I got to

149
00:06:02,639 --> 00:06:04,560
make decisions about where I can use my

150
00:06:04,560 --> 00:06:06,840
limited resources to do something with

151
00:06:06,840 --> 00:06:10,080
these apis right and if I don't know

152
00:06:10,080 --> 00:06:12,300
what I have I'm doing it best guesswork

153
00:06:12,300 --> 00:06:14,100
as to where to apply those resources

154
00:06:14,100 --> 00:06:15,360
effectively

155
00:06:15,360 --> 00:06:17,460
on runtime security this is monitoring

156
00:06:17,460 --> 00:06:19,080
right watching the traffic looking for

157
00:06:19,080 --> 00:06:21,720
realities reacting to those anomalies

158
00:06:21,720 --> 00:06:24,780
and then test them right and for me API

159
00:06:24,780 --> 00:06:27,060
security I really don't think about SAS

160
00:06:27,060 --> 00:06:29,520
very much because it's source code and

161
00:06:29,520 --> 00:06:31,560
SAS Tech Source Code covered SCA has

162
00:06:31,560 --> 00:06:34,080
source code covered really for apis it's

163
00:06:34,080 --> 00:06:36,419
mostly Das testing for me because that's

164
00:06:36,419 --> 00:06:37,500
one of the ways that it's really

165
00:06:37,500 --> 00:06:40,680
different than air quotes normal app set

166
00:06:40,680 --> 00:06:42,300
now obviously you got to feed those

167
00:06:42,300 --> 00:06:44,520
results into some sort of ideally place

168
00:06:44,520 --> 00:06:45,780
where your developers are already

169
00:06:45,780 --> 00:06:48,799
dealing with issues

170
00:06:49,080 --> 00:06:51,120
and then the final thing in our sort of

171
00:06:51,120 --> 00:06:53,160
backgroundy stuff

172
00:06:53,160 --> 00:06:54,900
you need to think about apis in a

173
00:06:54,900 --> 00:06:55,979
different way and this is where some

174
00:06:55,979 --> 00:06:58,680
tools fail because there's really three

175
00:06:58,680 --> 00:07:00,419
parts that you need to know to make a

176
00:07:00,419 --> 00:07:02,880
decision about the security importance

177
00:07:02,880 --> 00:07:04,860
of an API the hosting like where it's

178
00:07:04,860 --> 00:07:07,800
running the path right what method am I

179
00:07:07,800 --> 00:07:09,360
calling on the API

180
00:07:09,360 --> 00:07:11,520
and then the method the HTTP method all

181
00:07:11,520 --> 00:07:13,740
those are very important because

182
00:07:13,740 --> 00:07:17,220
a get request for all users right give

183
00:07:17,220 --> 00:07:18,900
me a list of all the users very

184
00:07:18,900 --> 00:07:20,520
different security content instead of

185
00:07:20,520 --> 00:07:21,419
delete

186
00:07:21,419 --> 00:07:23,400
to all users even though the host and

187
00:07:23,400 --> 00:07:25,380
the path are the same and if your tool

188
00:07:25,380 --> 00:07:26,520
isn't smart enough to make this

189
00:07:26,520 --> 00:07:29,220
distinction you've got some gaps right

190
00:07:29,220 --> 00:07:32,039
same thing here a post to uat to add an

191
00:07:32,039 --> 00:07:34,800
admin user very different than a post to

192
00:07:34,800 --> 00:07:37,919
add a admin user to production right so

193
00:07:37,919 --> 00:07:39,539
if you don't have the sort of three

194
00:07:39,539 --> 00:07:41,699
levels of granularity you're kind of Sol

195
00:07:41,699 --> 00:07:43,919
for having really good coverage of your

196
00:07:43,919 --> 00:07:46,039
apis

197
00:07:46,039 --> 00:07:48,479
okay I'm doing good that's right there

198
00:07:48,479 --> 00:07:52,400
yes I'm through with the beginning stuff

199
00:07:52,800 --> 00:07:56,840
I would happily oops do that this one

200
00:07:57,539 --> 00:07:59,580
who is that vodka

201
00:07:59,580 --> 00:08:02,699
no but it should be it's regrettably

202
00:08:02,699 --> 00:08:04,020
water

203
00:08:04,020 --> 00:08:06,859
but I need that

204
00:08:07,199 --> 00:08:09,060
we're good okay perfect yeah no problem

205
00:08:09,060 --> 00:08:11,940
so let's talk about attacking apis

206
00:08:11,940 --> 00:08:13,919
let's start with Recon right finding

207
00:08:13,919 --> 00:08:15,180
apis to attack and we're kind of

208
00:08:15,180 --> 00:08:17,220
assuming a black foxy perspective so if

209
00:08:17,220 --> 00:08:18,539
you're internal this may not be all that

210
00:08:18,539 --> 00:08:20,220
Germaine

211
00:08:20,220 --> 00:08:23,699
so for an attacker right for my mind

212
00:08:23,699 --> 00:08:25,919
Recon doesn't or passive Recon rather

213
00:08:25,919 --> 00:08:27,900
doesn't interact I don't send packets to

214
00:08:27,900 --> 00:08:29,819
the Target at least that's my definition

215
00:08:29,819 --> 00:08:31,440
of it we can argue later if that's

216
00:08:31,440 --> 00:08:33,539
accurate but so I don't have any extra

217
00:08:33,539 --> 00:08:35,099
interaction with the target but there's

218
00:08:35,099 --> 00:08:37,080
loads of places I can get osm from

219
00:08:37,080 --> 00:08:39,719
Google dorks show Dan you name it right

220
00:08:39,719 --> 00:08:42,779
I can find or the website has a freaking

221
00:08:42,779 --> 00:08:45,060
how to use my API because their API is

222
00:08:45,060 --> 00:08:47,100
part of their service like you can find

223
00:08:47,100 --> 00:08:49,380
out in some cases loads of information

224
00:08:49,380 --> 00:08:52,800
about it without even talking to it

225
00:08:52,800 --> 00:08:54,660
as a Defender

226
00:08:54,660 --> 00:08:56,160
there's really not much you can do here

227
00:08:56,160 --> 00:08:58,260
particularly if you sell a SAS service

228
00:08:58,260 --> 00:09:00,000
that has an API you kind of want people

229
00:09:00,000 --> 00:09:01,680
to know how to talk to it so you can't

230
00:09:01,680 --> 00:09:04,620
really hide those docks

231
00:09:04,620 --> 00:09:06,600
um and you well like you do want to

232
00:09:06,600 --> 00:09:08,339
advertise your API and if you look at

233
00:09:08,339 --> 00:09:09,839
these getting started things the better

234
00:09:09,839 --> 00:09:11,580
ones have curl and Postman and all these

235
00:09:11,580 --> 00:09:12,959
other examples to make it easier for

236
00:09:12,959 --> 00:09:15,180
devs to interact with it so what do you

237
00:09:15,180 --> 00:09:19,200
do well and you're kind of stuck

238
00:09:19,200 --> 00:09:20,820
um you will find for some of vendor

239
00:09:20,820 --> 00:09:22,560
products we'll have API docs behind a

240
00:09:22,560 --> 00:09:24,540
login which is I guess good it's

241
00:09:24,540 --> 00:09:26,100
frustrating if you're evaluating that

242
00:09:26,100 --> 00:09:27,600
product so I don't know how I feel about

243
00:09:27,600 --> 00:09:29,640
that one

244
00:09:29,640 --> 00:09:31,560
um and really post your runtime and

245
00:09:31,560 --> 00:09:33,540
testing those three sort of key areas of

246
00:09:33,540 --> 00:09:37,920
appsec defense or API defense I'm not

247
00:09:37,920 --> 00:09:38,940
really fit here because there's nothing

248
00:09:38,940 --> 00:09:40,740
there's no traffic like I'm monitoring

249
00:09:40,740 --> 00:09:42,480
the nothing no packets that are coming

250
00:09:42,480 --> 00:09:45,260
into my API

251
00:09:45,540 --> 00:09:47,580
so active Recon now I can start

252
00:09:47,580 --> 00:09:50,760
interacting with the target

253
00:09:50,760 --> 00:09:53,160
this traffic

254
00:09:53,160 --> 00:09:55,500
is about how the API works I can't call

255
00:09:55,500 --> 00:09:57,839
it can I get a valid token

256
00:09:57,839 --> 00:09:59,279
um you could end map it you can look at

257
00:09:59,279 --> 00:10:00,959
other Clues like robust.text or Dev

258
00:10:00,959 --> 00:10:02,240
tools and those kind of things

259
00:10:02,240 --> 00:10:04,620
particularly if you're using apps that

260
00:10:04,620 --> 00:10:06,420
are backed by apis Dev tools are great

261
00:10:06,420 --> 00:10:08,459
sources of Intel

262
00:10:08,459 --> 00:10:11,820
uh local proxies are fantastic you can

263
00:10:11,820 --> 00:10:13,200
do some um

264
00:10:13,200 --> 00:10:15,180
durabuster Derby go Buster whatever the

265
00:10:15,180 --> 00:10:17,160
Brute Force URLs and there's a thing

266
00:10:17,160 --> 00:10:18,899
called Kite Runner which is basically a

267
00:10:18,899 --> 00:10:20,940
brute forcer that's API specific that's

268
00:10:20,940 --> 00:10:22,980
kind of nice

269
00:10:22,980 --> 00:10:24,480
but this is all just kind of getting

270
00:10:24,480 --> 00:10:26,100
that understanding of this thing I want

271
00:10:26,100 --> 00:10:28,440
to start playing with right

272
00:10:28,440 --> 00:10:30,480
from a Defender

273
00:10:30,480 --> 00:10:31,800
I think this looks like background

274
00:10:31,800 --> 00:10:34,140
internet radiation right who doesn't

275
00:10:34,140 --> 00:10:35,760
have random weird broken requests

276
00:10:35,760 --> 00:10:37,620
hitting your API from time to time and

277
00:10:37,620 --> 00:10:39,600
that may be like the person trying to

278
00:10:39,600 --> 00:10:41,040
figure out how to use your API just

279
00:10:41,040 --> 00:10:43,200
handing their program or maybe an

280
00:10:43,200 --> 00:10:44,760
attacker doing a Recon it's kind of hard

281
00:10:44,760 --> 00:10:46,620
to tell

282
00:10:46,620 --> 00:10:47,279
um

283
00:10:47,279 --> 00:10:49,680
if you do have stuff in roblox.com

284
00:10:49,680 --> 00:10:51,000
it's probably a good idea to review that

285
00:10:51,000 --> 00:10:52,740
I remember one engagement I was on where

286
00:10:52,740 --> 00:10:55,079
Roblox dot was basically like a guy that

287
00:10:55,079 --> 00:10:57,360
boss somebody because they they put all

288
00:10:57,360 --> 00:10:58,980
their really CPU intensive things and

289
00:10:58,980 --> 00:11:02,579
robots not text I'm like dude it's like

290
00:11:02,579 --> 00:11:04,440
a menu of haridoski this is awesome

291
00:11:04,440 --> 00:11:06,720
thank you for that

292
00:11:06,720 --> 00:11:09,600
um brute force will really stand out uh

293
00:11:09,600 --> 00:11:11,100
if you have Kite Runner running which is

294
00:11:11,100 --> 00:11:12,360
another brute forcer that will really

295
00:11:12,360 --> 00:11:14,700
trip out any kind of trip up any kind of

296
00:11:14,700 --> 00:11:16,079
monitoring

297
00:11:16,079 --> 00:11:17,700
posture is really just to understand

298
00:11:17,700 --> 00:11:19,880
where the scariest parts of your API is

299
00:11:19,880 --> 00:11:22,380
runtime will discover this active Recon

300
00:11:22,380 --> 00:11:23,760
if it's any good

301
00:11:23,760 --> 00:11:26,100
and testing is really just proactive you

302
00:11:26,100 --> 00:11:27,720
can't do much with testing for this one

303
00:11:27,720 --> 00:11:30,120
not for Recon

304
00:11:30,120 --> 00:11:33,480
hey there we go Discovery the next phase

305
00:11:33,480 --> 00:11:35,760
understanding your target

306
00:11:35,760 --> 00:11:39,000
so for an attacker right you need to

307
00:11:39,000 --> 00:11:40,380
learn how to make legitimate requests

308
00:11:40,380 --> 00:11:42,240
how to authenticate how to do all these

309
00:11:42,240 --> 00:11:43,980
things how to like every time I've

310
00:11:43,980 --> 00:11:46,140
tested apis you have to burn some Cycles

311
00:11:46,140 --> 00:11:48,120
just how do I talk to the dumb thing

312
00:11:48,120 --> 00:11:50,579
right and you've got the luckily if

313
00:11:50,579 --> 00:11:52,380
you're well if you're attacking an API

314
00:11:52,380 --> 00:11:53,640
that's publicly known you'll have some

315
00:11:53,640 --> 00:11:55,380
getting started or whatever docs that'll

316
00:11:55,380 --> 00:11:57,060
help you there if you're lucky you'll

317
00:11:57,060 --> 00:11:58,560
get a Swagger file which you can import

318
00:11:58,560 --> 00:12:01,140
into many tools to do automation of the

319
00:12:01,140 --> 00:12:03,180
requests

320
00:12:03,180 --> 00:12:04,880
um Upstream oh

321
00:12:04,880 --> 00:12:07,260
I've had some apis that were so poorly

322
00:12:07,260 --> 00:12:09,240
documented I had to find the API client

323
00:12:09,240 --> 00:12:11,700
and put a proxy Upstream of that client

324
00:12:11,700 --> 00:12:13,680
to watch what the client sent so I could

325
00:12:13,680 --> 00:12:14,700
actually see how to talk to the

326
00:12:14,700 --> 00:12:16,620
expletive API you will probably have

327
00:12:16,620 --> 00:12:18,540
that experience it's lovely God bless

328
00:12:18,540 --> 00:12:20,040
you

329
00:12:20,040 --> 00:12:22,620
um and then you can maybe create a list

330
00:12:22,620 --> 00:12:24,480
with Postman or whatever you want using

331
00:12:24,480 --> 00:12:27,060
those kind of Brute forcers

332
00:12:27,060 --> 00:12:29,399
on the defense side

333
00:12:29,399 --> 00:12:30,959
this traffic looks like somebody trying

334
00:12:30,959 --> 00:12:32,519
to figure out how to use your API are

335
00:12:32,519 --> 00:12:35,760
they malicious or not hard to tell right

336
00:12:35,760 --> 00:12:38,160
for spa single page applications in

337
00:12:38,160 --> 00:12:38,940
Mobile

338
00:12:38,940 --> 00:12:40,920
this is where user agents if the

339
00:12:40,920 --> 00:12:42,839
attacker isn't clever might be a trip

340
00:12:42,839 --> 00:12:45,180
off right if you see curl hitting your

341
00:12:45,180 --> 00:12:48,300
mobile backed API probably don't have

342
00:12:48,300 --> 00:12:50,660
curl on your phone right might be a hint

343
00:12:50,660 --> 00:12:54,860
but generally it's kind of hard to see

344
00:12:55,320 --> 00:12:57,120
um if you have undocumented apis since

345
00:12:57,120 --> 00:12:58,560
we're done at public docs you will

346
00:12:58,560 --> 00:13:00,120
likely see lots and lots of failed

347
00:13:00,120 --> 00:13:01,500
requests which is a clue that somebody

348
00:13:01,500 --> 00:13:03,300
may be poking at you right that's

349
00:13:03,300 --> 00:13:05,399
another good thing

350
00:13:05,399 --> 00:13:07,800
from API security perspective posture is

351
00:13:07,800 --> 00:13:10,500
once again knowing what are your apis

352
00:13:10,500 --> 00:13:12,000
particularly which are your internal

353
00:13:12,000 --> 00:13:14,880
only IP I.E I should never see a public

354
00:13:14,880 --> 00:13:16,920
internet hit my internal internally only

355
00:13:16,920 --> 00:13:19,260
API if it does like whoops hopefully

356
00:13:19,260 --> 00:13:22,079
runtime will tell you that that happened

357
00:13:22,079 --> 00:13:24,060
um that will run time is Dice because it

358
00:13:24,060 --> 00:13:26,160
can just tell these Discovery mistakes

359
00:13:26,160 --> 00:13:28,260
if they're blatant particularly brute

360
00:13:28,260 --> 00:13:30,660
forcing and testing is not really all

361
00:13:30,660 --> 00:13:31,920
that proactive to be honest with you

362
00:13:31,920 --> 00:13:35,360
can't tell you much with discovery

363
00:13:35,639 --> 00:13:38,279
come on there we go oh and be careful

364
00:13:38,279 --> 00:13:40,320
I've had this problem where I spend way

365
00:13:40,320 --> 00:13:41,700
too much time in Discovery because it's

366
00:13:41,700 --> 00:13:43,260
just kind of cool flipping over rocks

367
00:13:43,260 --> 00:13:45,120
and seeing what's underneath them so be

368
00:13:45,120 --> 00:13:46,620
warned this can be a timestamp if you

369
00:13:46,620 --> 00:13:48,600
are actually doing testing sometimes it

370
00:13:48,600 --> 00:13:49,920
could be a time because the API is just

371
00:13:49,920 --> 00:13:53,519
an awful thing too okay yay the exciting

372
00:13:53,519 --> 00:13:55,500
part of the portion the attacking of an

373
00:13:55,500 --> 00:13:57,120
API right

374
00:13:57,120 --> 00:13:58,620
this is where you get to be malicious

375
00:13:58,620 --> 00:14:01,260
with the apis and to break up all the

376
00:14:01,260 --> 00:14:04,260
motion things I can do I grab the O wasp

377
00:14:04,260 --> 00:14:06,480
API top 10 and we're going to cover each

378
00:14:06,480 --> 00:14:07,980
of these areas just to give you an idea

379
00:14:07,980 --> 00:14:10,260
of what they look like as an attacker or

380
00:14:10,260 --> 00:14:12,980
as a Defender

381
00:14:13,019 --> 00:14:15,360
so the first one is Bola broken object

382
00:14:15,360 --> 00:14:17,459
level authorization

383
00:14:17,459 --> 00:14:19,920
um this is a legitimate request

384
00:14:19,920 --> 00:14:22,920
where Benjamin here has his Bearer token

385
00:14:22,920 --> 00:14:25,380
and he's got his user ID and he makes a

386
00:14:25,380 --> 00:14:26,760
request and he gets back his information

387
00:14:26,760 --> 00:14:29,579
right cool this is great this is a happy

388
00:14:29,579 --> 00:14:31,320
path

389
00:14:31,320 --> 00:14:33,480
yay it's valid

390
00:14:33,480 --> 00:14:36,000
the unhappy path is Benjamin

391
00:14:36,000 --> 00:14:38,220
using his token but putting somebody

392
00:14:38,220 --> 00:14:40,860
else's ID and suddenly getting somebody

393
00:14:40,860 --> 00:14:42,720
else's information Charlotte in this

394
00:14:42,720 --> 00:14:45,360
case is unfortunately getting exposed

395
00:14:45,360 --> 00:14:49,380
right this is bad and this is Bola and

396
00:14:49,380 --> 00:14:50,940
it's as simple as that because basically

397
00:14:50,940 --> 00:14:53,639
from a programmer's perspective do you

398
00:14:53,639 --> 00:14:55,500
have valid token yes what data you do

399
00:14:55,500 --> 00:14:57,300
want okay let me get it right that's

400
00:14:57,300 --> 00:14:59,279
what happens and it's an easy mistake to

401
00:14:59,279 --> 00:15:00,720
make unfortunately it's probably why

402
00:15:00,720 --> 00:15:02,220
it's number one

403
00:15:02,220 --> 00:15:04,260
so as an attacker

404
00:15:04,260 --> 00:15:06,120
you got to look at how the API calls are

405
00:15:06,120 --> 00:15:08,480
structured things that look like IDs

406
00:15:08,480 --> 00:15:10,980
sometimes names are things you can play

407
00:15:10,980 --> 00:15:12,420
games with then switch them out and get

408
00:15:12,420 --> 00:15:13,680
somewhere that's where it gets

409
00:15:13,680 --> 00:15:15,019
interesting

410
00:15:15,019 --> 00:15:17,579
and make calls and just make up new IDs

411
00:15:17,579 --> 00:15:19,079
right if it's a numeric ID make another

412
00:15:19,079 --> 00:15:21,600
new American ID see what happens

413
00:15:21,600 --> 00:15:23,339
um try something as a user one and try

414
00:15:23,339 --> 00:15:24,720
something as a user two and then see if

415
00:15:24,720 --> 00:15:26,339
you can read each other's stuff look at

416
00:15:26,339 --> 00:15:27,480
the difference between them particularly

417
00:15:27,480 --> 00:15:29,160
if they're free apis where anybody can

418
00:15:29,160 --> 00:15:30,660
get an account it's really easy to have

419
00:15:30,660 --> 00:15:33,300
that comparison of two users

420
00:15:33,300 --> 00:15:34,980
and then look at response differences

421
00:15:34,980 --> 00:15:38,339
404 versus 405 sometimes time to respond

422
00:15:38,339 --> 00:15:40,860
can get you very rarely I've seen length

423
00:15:40,860 --> 00:15:42,420
of response make a difference but it can

424
00:15:42,420 --> 00:15:45,600
that's kind of an outlier

425
00:15:45,600 --> 00:15:48,720
and then on the defense side

426
00:15:48,720 --> 00:15:51,120
unfortunately for Ebola you need really

427
00:15:51,120 --> 00:15:52,620
deep inspection I need to understand

428
00:15:52,620 --> 00:15:54,959
that I gave you my token asking for

429
00:15:54,959 --> 00:15:57,600
somebody else's ID and I don't see a

430
00:15:57,600 --> 00:15:59,880
WAFF in the time constraints it has to

431
00:15:59,880 --> 00:16:01,380
make a decision being able to make that

432
00:16:01,380 --> 00:16:02,820
decision I just don't see it happening

433
00:16:02,820 --> 00:16:05,459
not well so I generally think faster are

434
00:16:05,459 --> 00:16:07,320
going to do much for you here

435
00:16:07,320 --> 00:16:09,420
because it looks like the legit request

436
00:16:09,420 --> 00:16:11,639
right the json's fine the IDS are all

437
00:16:11,639 --> 00:16:13,980
within range everything looks good so

438
00:16:13,980 --> 00:16:15,420
you really need more than just the laugh

439
00:16:15,420 --> 00:16:17,820
to do that usually this is like a ml or

440
00:16:17,820 --> 00:16:19,079
some kind of learning that's Offline

441
00:16:19,079 --> 00:16:22,139
that has enough time to do this

442
00:16:22,139 --> 00:16:24,360
um when I am looking for Ebola I'm

443
00:16:24,360 --> 00:16:25,139
probably going to make a lot of

444
00:16:25,139 --> 00:16:26,940
authorization errors trying to find

445
00:16:26,940 --> 00:16:28,680
below the places where it actually is

446
00:16:28,680 --> 00:16:30,540
enforced so that's a great little hint

447
00:16:30,540 --> 00:16:33,240
that someone's poking at you

448
00:16:33,240 --> 00:16:34,860
um and then obviously ml in particular

449
00:16:34,860 --> 00:16:36,420
is looking for two similar requests

450
00:16:36,420 --> 00:16:38,880
where just the ID changed same token

451
00:16:38,880 --> 00:16:40,860
different ID that's kind of weird it's

452
00:16:40,860 --> 00:16:42,540
probably not a normal use case it should

453
00:16:42,540 --> 00:16:44,040
stand out

454
00:16:44,040 --> 00:16:46,320
posture once again is just knowing where

455
00:16:46,320 --> 00:16:50,160
your risky apis are runtime if it has

456
00:16:50,160 --> 00:16:51,839
the type of luxury to do it if it's

457
00:16:51,839 --> 00:16:54,240
doing this out of band I don't think you

458
00:16:54,240 --> 00:16:56,459
can do this in band honestly and then

459
00:16:56,459 --> 00:16:58,380
testing you can use to find that

460
00:16:58,380 --> 00:17:02,279
hopefully in pre-prod if you're lucky

461
00:17:02,279 --> 00:17:03,480
I don't know why I'm getting that double

462
00:17:03,480 --> 00:17:05,459
animation thing I goofed something up

463
00:17:05,459 --> 00:17:08,040
apparently in my deck okay broken user

464
00:17:08,040 --> 00:17:10,740
authentication this is basically

465
00:17:10,740 --> 00:17:13,439
being able to air quotes log into an API

466
00:17:13,439 --> 00:17:15,660
right I send it a username and password

467
00:17:15,660 --> 00:17:18,359
it gives me back a token a token and I

468
00:17:18,359 --> 00:17:20,160
make the rest of my requests to the API

469
00:17:20,160 --> 00:17:22,260
this is generally how lots and lots of

470
00:17:22,260 --> 00:17:23,579
apis work

471
00:17:23,579 --> 00:17:25,500
as I mentioned earlier though I don't

472
00:17:25,500 --> 00:17:27,480
get a lot of anti-automation there's no

473
00:17:27,480 --> 00:17:31,980
captcha right there's no MFA with NADA

474
00:17:31,980 --> 00:17:33,840
for apis

475
00:17:33,840 --> 00:17:36,360
right a lot less so password spring and

476
00:17:36,360 --> 00:17:37,860
those kind of attacks happen all the

477
00:17:37,860 --> 00:17:40,260
time here because why not like apis

478
00:17:40,260 --> 00:17:42,120
guess what they're made to do respond

479
00:17:42,120 --> 00:17:44,640
really quick thank you my brute forcing

480
00:17:44,640 --> 00:17:47,160
is going even faster I love it right by

481
00:17:47,160 --> 00:17:48,720
Design

482
00:17:48,720 --> 00:17:52,080
um 64 airport protection definitely not

483
00:17:52,080 --> 00:17:54,960
encryption that's another fun one

484
00:17:54,960 --> 00:17:55,679
um

485
00:17:55,679 --> 00:17:57,660
JWT has a whole bunch of potential

486
00:17:57,660 --> 00:18:00,179
weaknesses it is it is like a drawer of

487
00:18:00,179 --> 00:18:01,620
sharp knives and a dark room that you

488
00:18:01,620 --> 00:18:02,820
have to reaching and get something out

489
00:18:02,820 --> 00:18:05,220
of but it's very easy to cut itself

490
00:18:05,220 --> 00:18:06,900
right

491
00:18:06,900 --> 00:18:08,580
so when you're doing that you can make

492
00:18:08,580 --> 00:18:11,100
mistakes like actually allow a nun this

493
00:18:11,100 --> 00:18:13,080
is like this is back to the TLs none

494
00:18:13,080 --> 00:18:15,240
days right I could have a denim Cipher

495
00:18:15,240 --> 00:18:17,340
string in JWT like we didn't learn with

496
00:18:17,340 --> 00:18:19,980
SSL but just repeated it's it's cool I

497
00:18:19,980 --> 00:18:21,299
mean you have to do Port algorithm

498
00:18:21,299 --> 00:18:23,700
choices or bad entropy so there's a lot

499
00:18:23,700 --> 00:18:25,140
of crypto mistakes you can see and

500
00:18:25,140 --> 00:18:26,760
there's luckily good tooling around that

501
00:18:26,760 --> 00:18:29,460
like JV JWT tool is one of them there's

502
00:18:29,460 --> 00:18:31,500
a bunch of them but we'll check this the

503
00:18:31,500 --> 00:18:34,919
strength of JWT tokens

504
00:18:34,919 --> 00:18:37,200
what type of Defender obviously Brute

505
00:18:37,200 --> 00:18:39,840
Force attacks are super noisy those are

506
00:18:39,840 --> 00:18:41,460
pretty easy password spraying super

507
00:18:41,460 --> 00:18:42,780
noisy

508
00:18:42,780 --> 00:18:44,940
crypto you really have to catch it early

509
00:18:44,940 --> 00:18:47,760
in the in the dev cycle there's a great

510
00:18:47,760 --> 00:18:51,179
JWT best practices RFC if you remember

511
00:18:51,179 --> 00:18:53,100
those things they still write them

512
00:18:53,100 --> 00:18:54,360
apparently

513
00:18:54,360 --> 00:18:56,880
um I would highly recommend reading that

514
00:18:56,880 --> 00:18:58,919
interesting thing this has kind of

515
00:18:58,919 --> 00:19:01,980
surprised me I did a podcast with um

516
00:19:01,980 --> 00:19:04,020
dang it Neil mattitol who used to work

517
00:19:04,020 --> 00:19:06,720
at GitHub and GitHub every time they

518
00:19:06,720 --> 00:19:09,059
cranked up the controls on their web

519
00:19:09,059 --> 00:19:12,000
login they saw giant spikes in attack on

520
00:19:12,000 --> 00:19:13,440
their API login

521
00:19:13,440 --> 00:19:16,679
so much so that they've removed API

522
00:19:16,679 --> 00:19:19,500
login from their API this is GitHub that

523
00:19:19,500 --> 00:19:22,679
has lots of users and they wrote all

524
00:19:22,679 --> 00:19:25,140
sorts of clients to do this because they

525
00:19:25,140 --> 00:19:27,480
just couldn't protect the API login so

526
00:19:27,480 --> 00:19:30,179
really on the defender side design time

527
00:19:30,179 --> 00:19:32,340
don't have the login happened in the API

528
00:19:32,340 --> 00:19:34,620
it's just too bloody hard to protect I

529
00:19:34,620 --> 00:19:36,419
wouldn't do it at least in Greenfield if

530
00:19:36,419 --> 00:19:37,620
you're stuck with it

531
00:19:37,620 --> 00:19:39,960
you're gonna have some fun but there's

532
00:19:39,960 --> 00:19:41,700
not a lot of controls you have that you

533
00:19:41,700 --> 00:19:43,200
access to

534
00:19:43,200 --> 00:19:45,419
posture obviously you can identify where

535
00:19:45,419 --> 00:19:48,179
you're often apis are those need some

536
00:19:48,179 --> 00:19:50,460
special love or maybe some remediation

537
00:19:50,460 --> 00:19:53,640
brute force is pretty easy JWT

538
00:19:53,640 --> 00:19:55,679
manipulation is pretty easy to see from

539
00:19:55,679 --> 00:19:58,020
runtime if you expect to have a

540
00:19:58,020 --> 00:19:59,820
particular algorithm and I said none

541
00:19:59,820 --> 00:20:02,400
that stands out really loudly

542
00:20:02,400 --> 00:20:04,020
and then testing obviously you can find

543
00:20:04,020 --> 00:20:07,220
these poor practices early

544
00:20:10,260 --> 00:20:11,880
I'm getting there excessive data

545
00:20:11,880 --> 00:20:14,039
exposure

546
00:20:14,039 --> 00:20:16,620
so this is an interesting one a lot of

547
00:20:16,620 --> 00:20:18,780
cases and this is

548
00:20:18,780 --> 00:20:21,780
this is just a hard one because as a

549
00:20:21,780 --> 00:20:23,039
programmer you want to go fast you want

550
00:20:23,039 --> 00:20:24,120
to get the stuff out the door you want

551
00:20:24,120 --> 00:20:25,740
to meet deadlines there's some really

552
00:20:25,740 --> 00:20:27,480
cool Auto magical things in a lot of

553
00:20:27,480 --> 00:20:29,280
programming Frameworks that say let me

554
00:20:29,280 --> 00:20:31,860
make a database call jsonify it and ship

555
00:20:31,860 --> 00:20:34,140
it out as my response right that's super

556
00:20:34,140 --> 00:20:36,419
handy that's super quick the problem is

557
00:20:36,419 --> 00:20:37,919
if I only need three of your seven

558
00:20:37,919 --> 00:20:40,020
elements in that response from the

559
00:20:40,020 --> 00:20:40,919
database

560
00:20:40,919 --> 00:20:43,380
you just sent me some bonus data and

561
00:20:43,380 --> 00:20:45,360
that's what excessive data exposure is

562
00:20:45,360 --> 00:20:48,539
right it's I'm doing something that is

563
00:20:48,539 --> 00:20:50,700
getting extra information and assuming

564
00:20:50,700 --> 00:20:52,260
that the client is just going to throw

565
00:20:52,260 --> 00:20:54,299
it away so mobile apps really good for

566
00:20:54,299 --> 00:20:56,100
this right because mobile apps the only

567
00:20:56,100 --> 00:20:57,240
thing that's ever going to talk to my

568
00:20:57,240 --> 00:20:59,940
API isn't the hacker with curl it's

569
00:20:59,940 --> 00:21:03,480
going to be that mobile app right so hey

570
00:21:03,480 --> 00:21:05,100
so for apis

571
00:21:05,100 --> 00:21:06,780
this is where I really like mobile or

572
00:21:06,780 --> 00:21:08,940
web-backed apps they make a lot of

573
00:21:08,940 --> 00:21:10,320
assumptions about who the client will be

574
00:21:10,320 --> 00:21:12,600
which are unsafe things like profile

575
00:21:12,600 --> 00:21:15,600
page external metadata linked users

576
00:21:15,600 --> 00:21:17,220
those are all places that tend to be

577
00:21:17,220 --> 00:21:19,260
verbose in their responses where you can

578
00:21:19,260 --> 00:21:22,280
put some fun stuff

579
00:21:22,500 --> 00:21:23,400
um

580
00:21:23,400 --> 00:21:25,200
and you just have to sort of think does

581
00:21:25,200 --> 00:21:27,780
this does this call have is there

582
00:21:27,780 --> 00:21:30,000
internal data in this call that might be

583
00:21:30,000 --> 00:21:31,679
in a database that they don't

584
00:21:31,679 --> 00:21:33,960
necessarily think they're sending to the

585
00:21:33,960 --> 00:21:36,539
client but they are

586
00:21:36,539 --> 00:21:38,340
um and this is very consuming because

587
00:21:38,340 --> 00:21:40,140
you sort of have to read the data and

588
00:21:40,140 --> 00:21:41,700
understand the structure of it and all

589
00:21:41,700 --> 00:21:43,320
the responses so this can be a bit of a

590
00:21:43,320 --> 00:21:45,840
time as an attacker but really nice when

591
00:21:45,840 --> 00:21:48,059
you find that one that gives you the the

592
00:21:48,059 --> 00:21:51,179
like the keys to the kingdom but just

593
00:21:51,179 --> 00:21:53,520
the normal requests it's beautiful

594
00:21:53,520 --> 00:21:55,679
yeah and these are single request

595
00:21:55,679 --> 00:21:56,760
attacks

596
00:21:56,760 --> 00:21:59,220
right I just see a legitimate request

597
00:21:59,220 --> 00:22:01,380
and a legitimate response come out

598
00:22:01,380 --> 00:22:04,260
really hard to monitor that like oh look

599
00:22:04,260 --> 00:22:05,700
it's working as designed we should throw

600
00:22:05,700 --> 00:22:08,159
the panic button right doesn't work SAS

601
00:22:08,159 --> 00:22:10,380
can definitely help here to avoid those

602
00:22:10,380 --> 00:22:12,900
kind of two Json things that you can do

603
00:22:12,900 --> 00:22:16,380
those Auto magical data conversions

604
00:22:16,380 --> 00:22:18,360
um actually ideally

605
00:22:18,360 --> 00:22:19,620
um if you do this really right you'll

606
00:22:19,620 --> 00:22:21,240
have one set of data objects for your

607
00:22:21,240 --> 00:22:22,980
internal data and another set of data

608
00:22:22,980 --> 00:22:24,360
objects for the data you expect

609
00:22:24,360 --> 00:22:26,100
throughout the API and functions that

610
00:22:26,100 --> 00:22:27,480
move data from one to the other so

611
00:22:27,480 --> 00:22:29,700
everything's like ridiculously explicit

612
00:22:29,700 --> 00:22:31,980
but that's more time so it generally

613
00:22:31,980 --> 00:22:33,600
doesn't happen

614
00:22:33,600 --> 00:22:35,940
you cannot rely on Plants filtering data

615
00:22:35,940 --> 00:22:38,940
oh and I already said that one yay

616
00:22:38,940 --> 00:22:40,559
so posture definitely can show where

617
00:22:40,559 --> 00:22:43,260
sensitive data is or larger responses

618
00:22:43,260 --> 00:22:44,700
you still have to do a little bit of

619
00:22:44,700 --> 00:22:46,500
human brain filtering to find out if

620
00:22:46,500 --> 00:22:49,799
those are interesting large responses

621
00:22:49,799 --> 00:22:52,740
um the one time that rental can see this

622
00:22:52,740 --> 00:22:54,419
is you won't see the one where the

623
00:22:54,419 --> 00:22:56,159
attacker goes oh sweet look at they're

624
00:22:56,159 --> 00:22:58,020
sending all this extra data what you

625
00:22:58,020 --> 00:22:59,640
will see is when the attacker figures

626
00:22:59,640 --> 00:23:00,900
out how to automate that and then tries

627
00:23:00,900 --> 00:23:04,559
to scrape millions of Records so it can

628
00:23:04,559 --> 00:23:06,120
be found but not in the initial attack

629
00:23:06,120 --> 00:23:08,039
right but when I get greedy and I want

630
00:23:08,039 --> 00:23:10,320
not just one bit of pii I want 20 000 a

631
00:23:10,320 --> 00:23:13,380
million piis that gets pretty noisy

632
00:23:13,380 --> 00:23:15,059
and then obviously in testing if you're

633
00:23:15,059 --> 00:23:17,039
looking at those responses you can say

634
00:23:17,039 --> 00:23:18,600
why are we sending all this back to the

635
00:23:18,600 --> 00:23:19,559
client

636
00:23:19,559 --> 00:23:22,140
that's stupid and problematic and

637
00:23:22,140 --> 00:23:23,940
dangerous

638
00:23:23,940 --> 00:23:26,159
okay lack of resource of rate limiting

639
00:23:26,159 --> 00:23:28,860
right this is the failure to have some

640
00:23:28,860 --> 00:23:31,500
sort of limits on how aggressively a

641
00:23:31,500 --> 00:23:34,260
client can talk to the API

642
00:23:34,260 --> 00:23:36,179
um find one for an attacker

643
00:23:36,179 --> 00:23:38,580
I love this one if you have a way to add

644
00:23:38,580 --> 00:23:41,820
items add thousands of items and then

645
00:23:41,820 --> 00:23:44,760
ask for a list right dos I've dosed

646
00:23:44,760 --> 00:23:46,260
things like that it's like the most dumb

647
00:23:46,260 --> 00:23:47,340
attack ever because there wasn't

648
00:23:47,340 --> 00:23:49,500
pagination because I didn't think well

649
00:23:49,500 --> 00:23:50,820
who would have more than four or five

650
00:23:50,820 --> 00:23:52,799
favorite colors I'm going to add 20 000

651
00:23:52,799 --> 00:23:54,059
favorite colors that include the word

652
00:23:54,059 --> 00:23:56,880
bird right and then I'm going to ask for

653
00:23:56,880 --> 00:23:58,620
them and it's going to fall over right

654
00:23:58,620 --> 00:24:02,159
because that works it sadly it works

655
00:24:02,159 --> 00:24:04,200
um you kept a denial of use attacked

656
00:24:04,200 --> 00:24:06,000
here which is really can either be

657
00:24:06,000 --> 00:24:08,820
malicious or not where an overly

658
00:24:08,820 --> 00:24:10,500
aggressive client that may be a legit

659
00:24:10,500 --> 00:24:11,760
client can just eat up all your

660
00:24:11,760 --> 00:24:13,860
resources right

661
00:24:13,860 --> 00:24:15,059
um fuzzing and brute forcing to

662
00:24:15,059 --> 00:24:17,460
definitely discover these uh modifying

663
00:24:17,460 --> 00:24:19,500
requests and playing around with like

664
00:24:19,500 --> 00:24:21,600
client IPS and stuff like origination

665
00:24:21,600 --> 00:24:24,240
IPS a lot of times intermediate devices

666
00:24:24,240 --> 00:24:26,580
rely on header IP information that you

667
00:24:26,580 --> 00:24:28,440
can forge and get by them if you're

668
00:24:28,440 --> 00:24:29,940
lucky

669
00:24:29,940 --> 00:24:31,320
um this is where you can watch for CPU

670
00:24:31,320 --> 00:24:33,179
or memory intensive requests those are

671
00:24:33,179 --> 00:24:35,400
always fun to call a lot and you could

672
00:24:35,400 --> 00:24:37,620
play you know the the case and the null

673
00:24:37,620 --> 00:24:39,380
Terminators of encoding data games

674
00:24:39,380 --> 00:24:43,760
sometimes to get around rate limiting

675
00:24:45,720 --> 00:24:48,179
make a difference right if I allowed 20

676
00:24:48,179 --> 00:24:50,159
000 requests per second but I fall over

677
00:24:50,159 --> 00:24:52,380
at 15 that rate limit really isn't

678
00:24:52,380 --> 00:24:54,799
relevant

679
00:24:55,620 --> 00:24:58,500
so I was a Defender

680
00:24:58,500 --> 00:25:01,080
but the responses will be big generally

681
00:25:01,080 --> 00:25:03,120
speaking generally speaking

682
00:25:03,120 --> 00:25:05,159
um you'll see weird header requests as

683
00:25:05,159 --> 00:25:06,840
I'm playing these games if I'm switching

684
00:25:06,840 --> 00:25:09,000
case and that kind of thing or adding

685
00:25:09,000 --> 00:25:10,980
null Terminators or otherwise just

686
00:25:10,980 --> 00:25:13,380
playing games that usually will stick

687
00:25:13,380 --> 00:25:15,059
out at least for runtime

688
00:25:15,059 --> 00:25:17,100
if you have decent observability which

689
00:25:17,100 --> 00:25:20,039
is what we now call monitoring

690
00:25:20,039 --> 00:25:23,340
um you will see used with spikes

691
00:25:23,340 --> 00:25:25,140
and then if you're trying to

692
00:25:25,140 --> 00:25:25,980
um

693
00:25:25,980 --> 00:25:28,260
trying to bypass methods like I said the

694
00:25:28,260 --> 00:25:29,460
games you play those will definitely

695
00:25:29,460 --> 00:25:31,020
show up so runtime is pretty good for

696
00:25:31,020 --> 00:25:32,460
detecting this and certainly detecting

697
00:25:32,460 --> 00:25:35,039
it in Mass posture again can find those

698
00:25:35,039 --> 00:25:36,539
apis that probably need to be rate

699
00:25:36,539 --> 00:25:38,820
limited if not all of them

700
00:25:38,820 --> 00:25:40,679
and then testing fuzzing is really a

701
00:25:40,679 --> 00:25:42,179
nice way to find some of these issues

702
00:25:42,179 --> 00:25:44,360
early

703
00:25:44,820 --> 00:25:46,260
there we go

704
00:25:46,260 --> 00:25:49,380
broken function level authorization

705
00:25:49,380 --> 00:25:51,600
so it's a failure to restrict by a group

706
00:25:51,600 --> 00:25:53,760
as opposed to an object level like the

707
00:25:53,760 --> 00:25:54,960
Bola one

708
00:25:54,960 --> 00:25:57,539
so this is where if you have apis that

709
00:25:57,539 --> 00:25:59,820
have multiple roles or groups

710
00:25:59,820 --> 00:26:01,919
or God help you they expose a backplane

711
00:26:01,919 --> 00:26:04,320
in the same API as the front plane I

712
00:26:04,320 --> 00:26:05,520
guess that's what you call the normal

713
00:26:05,520 --> 00:26:08,159
API the front plane sounds good

714
00:26:08,159 --> 00:26:10,500
um right so things that have admin in

715
00:26:10,500 --> 00:26:11,880
them right but get exposed these are

716
00:26:11,880 --> 00:26:12,960
great

717
00:26:12,960 --> 00:26:15,000
um at least for an attacker

718
00:26:15,000 --> 00:26:16,860
what's really fun here

719
00:26:16,860 --> 00:26:19,200
read the docs and then ignore them and

720
00:26:19,200 --> 00:26:21,419
try all the non-listed methods

721
00:26:21,419 --> 00:26:23,940
right because they may say we only take

722
00:26:23,940 --> 00:26:25,860
it to this request but maybe delete

723
00:26:25,860 --> 00:26:27,779
works because they had some nice

724
00:26:27,779 --> 00:26:29,340
automatical framework that wired that

725
00:26:29,340 --> 00:26:31,020
stuff up for them right so try those

726
00:26:31,020 --> 00:26:34,320
right why not it's it's a great time

727
00:26:34,320 --> 00:26:35,220
um

728
00:26:35,220 --> 00:26:38,340
create items with one group or roll and

729
00:26:38,340 --> 00:26:39,659
then try to access them because you'll

730
00:26:39,659 --> 00:26:42,000
see the IDS try to access those IDs from

731
00:26:42,000 --> 00:26:43,080
a different role that's another great

732
00:26:43,080 --> 00:26:46,158
way to find these gaps

733
00:26:46,200 --> 00:26:48,539
um and this is where like uh kite can

734
00:26:48,539 --> 00:26:50,220
find things like iffy Brute Force you

735
00:26:50,220 --> 00:26:52,200
can find admin papers in sort of

736
00:26:52,200 --> 00:26:54,299
normalish kind of paths

737
00:26:54,299 --> 00:26:56,039
and you can play around with headers

738
00:26:56,039 --> 00:26:57,960
sometimes you can use headers to to get

739
00:26:57,960 --> 00:26:59,520
access to Apple functions that's kind of

740
00:26:59,520 --> 00:27:01,320
a bit of a Hail Mary but sometimes it

741
00:27:01,320 --> 00:27:03,059
works and if you have time you know hey

742
00:27:03,059 --> 00:27:05,600
why not play

743
00:27:05,640 --> 00:27:07,559
okay if I'm a Defender well obviously

744
00:27:07,559 --> 00:27:09,360
you need to look at things any APA that

745
00:27:09,360 --> 00:27:11,580
has two or more roles

746
00:27:11,580 --> 00:27:12,539
um

747
00:27:12,539 --> 00:27:14,940
any kind of requests that fail for

748
00:27:14,940 --> 00:27:16,980
methods that are unsupported are very

749
00:27:16,980 --> 00:27:19,200
suspicious right either you have a very

750
00:27:19,200 --> 00:27:20,760
hand-handed programmer who didn't read

751
00:27:20,760 --> 00:27:22,799
the docs or someone's being naughty with

752
00:27:22,799 --> 00:27:24,600
you

753
00:27:24,600 --> 00:27:26,640
um any kind of client switching roles in

754
00:27:26,640 --> 00:27:28,140
a short period of time unless that's

755
00:27:28,140 --> 00:27:29,640
your normal use case that should be a

756
00:27:29,640 --> 00:27:31,020
pretty big red flag and if you have

757
00:27:31,020 --> 00:27:34,500
decent run time it should see that

758
00:27:34,500 --> 00:27:37,400
uh if you see failures for guest admin

759
00:27:37,400 --> 00:27:39,480
backplaney kind of paths that's another

760
00:27:39,480 --> 00:27:40,919
good clue

761
00:27:40,919 --> 00:27:43,260
and then unusual request I'll also stand

762
00:27:43,260 --> 00:27:44,520
out if I'm playing with the headers of

763
00:27:44,520 --> 00:27:45,960
the body to try to get

764
00:27:45,960 --> 00:27:47,460
around these things

765
00:27:47,460 --> 00:27:49,860
um posture is obviously again helps you

766
00:27:49,860 --> 00:27:51,480
figure out which ones these could

767
00:27:51,480 --> 00:27:52,620
potentially affect if they have

768
00:27:52,620 --> 00:27:54,179
multi-roles that's kind of a handy thing

769
00:27:54,179 --> 00:27:55,080
to know

770
00:27:55,080 --> 00:27:56,880
run time

771
00:27:56,880 --> 00:27:59,220
can take those failing requests and

772
00:27:59,220 --> 00:28:00,659
attack they're trying to probe for these

773
00:28:00,659 --> 00:28:01,919
so that's usually where you'll find that

774
00:28:01,919 --> 00:28:03,480
and then obviously if you're doing Auto

775
00:28:03,480 --> 00:28:06,659
detesting in your testing world you

776
00:28:06,659 --> 00:28:09,620
should hopefully find these early

777
00:28:09,900 --> 00:28:12,179
well I need to drink

778
00:28:12,179 --> 00:28:14,760
not not that kind of a drink although I

779
00:28:14,760 --> 00:28:17,900
need one of those too but that's later

780
00:28:19,260 --> 00:28:21,120
so Mass assignment

781
00:28:21,120 --> 00:28:25,080
if like the corollary to excessive data

782
00:28:25,080 --> 00:28:27,299
exposure is mass assignment

783
00:28:27,299 --> 00:28:29,460
so instead of taking data in from the

784
00:28:29,460 --> 00:28:31,260
database and Json a fine and shipping it

785
00:28:31,260 --> 00:28:33,240
out now I'm taking data in from a

786
00:28:33,240 --> 00:28:35,460
request turning into DB calls into

787
00:28:35,460 --> 00:28:36,900
sending it to the DB

788
00:28:36,900 --> 00:28:38,640
so I expect to make a request that has

789
00:28:38,640 --> 00:28:40,919
five elements in it I as a naughty

790
00:28:40,919 --> 00:28:42,840
person at a sixth or seventh element and

791
00:28:42,840 --> 00:28:44,520
you store it for me because I happen to

792
00:28:44,520 --> 00:28:46,140
guess things that are in your database

793
00:28:46,140 --> 00:28:49,140
that's Mass assignment

794
00:28:49,140 --> 00:28:51,059
so you basically are making guesses as

795
00:28:51,059 --> 00:28:52,380
an attacker at things that might be

796
00:28:52,380 --> 00:28:55,440
stored now fun fact most apis will

797
00:28:55,440 --> 00:28:58,080
ignore all the guesses so you don't have

798
00:28:58,080 --> 00:28:59,340
to guess one at a time you're going to

799
00:28:59,340 --> 00:29:01,440
guess like 50 at a time and sometimes

800
00:29:01,440 --> 00:29:02,940
they hit maybe you have to play some

801
00:29:02,940 --> 00:29:03,960
games to figure out which one's really

802
00:29:03,960 --> 00:29:06,360
hit but you can you can do this kind of

803
00:29:06,360 --> 00:29:09,240
uh very blatantly and apis didn't really

804
00:29:09,240 --> 00:29:11,640
don't react badly to it

805
00:29:11,640 --> 00:29:13,440
um looking for a request of response

806
00:29:13,440 --> 00:29:14,640
differences

807
00:29:14,640 --> 00:29:16,679
multiple Bruce forces at once that's

808
00:29:16,679 --> 00:29:18,240
what I just mentioning like a Hail Mary

809
00:29:18,240 --> 00:29:20,100
error messages are kind of fun sometimes

810
00:29:20,100 --> 00:29:22,200
they may give you Clues if you actually

811
00:29:22,200 --> 00:29:24,659
get an error message out of an API it'll

812
00:29:24,659 --> 00:29:26,520
give you some Clues as to what to try

813
00:29:26,520 --> 00:29:29,340
fuzzing can help and if you can combine

814
00:29:29,340 --> 00:29:30,600
this with other things like broken

815
00:29:30,600 --> 00:29:32,220
functional level issues this can be

816
00:29:32,220 --> 00:29:34,799
great because now I can add somebody

817
00:29:34,799 --> 00:29:37,320
else as an admin right if I have group

818
00:29:37,320 --> 00:29:38,760
and functional when I can make admin

819
00:29:38,760 --> 00:29:40,620
calls as a normal user I can make other

820
00:29:40,620 --> 00:29:42,539
people admin like myself which is always

821
00:29:42,539 --> 00:29:43,980
good

822
00:29:43,980 --> 00:29:45,360
so that one's really ugly particularly

823
00:29:45,360 --> 00:29:47,940
when it's combined

824
00:29:47,940 --> 00:29:49,380
so

825
00:29:49,380 --> 00:29:51,179
one thing from a Defender if I'm

826
00:29:51,179 --> 00:29:53,340
expecting five data elements and I get 7

827
00:29:53,340 --> 00:29:56,580
or 50. it stands out it's not normal so

828
00:29:56,580 --> 00:29:58,260
luckily these requests are pretty easy

829
00:29:58,260 --> 00:30:00,200
to see with reasonably deep inspection

830
00:30:00,200 --> 00:30:02,399
when I'm trying these I'm going to make

831
00:30:02,399 --> 00:30:04,799
lots of failed requests you'll see an

832
00:30:04,799 --> 00:30:07,500
increase in size

833
00:30:07,500 --> 00:30:10,140
um obviously this is worst of an issue

834
00:30:10,140 --> 00:30:11,520
if you have multiple roles because

835
00:30:11,520 --> 00:30:12,899
that's where I can do that combo attack

836
00:30:12,899 --> 00:30:15,059
I mentioned

837
00:30:15,059 --> 00:30:17,340
and Foster you want to focus on apis

838
00:30:17,340 --> 00:30:19,020
with multiple roles or sensitive data

839
00:30:19,020 --> 00:30:21,779
because that's the thing I'd want to do

840
00:30:21,779 --> 00:30:23,520
um requests with extra data or failed

841
00:30:23,520 --> 00:30:26,039
logins are great indicators at runtime

842
00:30:26,039 --> 00:30:28,740
and hopefully at testing you're adding

843
00:30:28,740 --> 00:30:30,299
random fields and guess what if you're

844
00:30:30,299 --> 00:30:31,740
testing particular if you're testing

845
00:30:31,740 --> 00:30:34,080
your app you know what's in the database

846
00:30:34,080 --> 00:30:36,659
like add all the columns that you don't

847
00:30:36,659 --> 00:30:39,419
expect to be received to a request and

848
00:30:39,419 --> 00:30:42,980
see what happens right okay

849
00:30:43,760 --> 00:30:46,500
security misconfigurations

850
00:30:46,500 --> 00:30:48,299
now this is kind of the basics right

851
00:30:48,299 --> 00:30:51,000
this is the infrastructure kind of test

852
00:30:51,000 --> 00:30:53,940
you can do like TLS is bad default

853
00:30:53,940 --> 00:30:56,220
credentials you let me upload an icar

854
00:30:56,220 --> 00:30:58,740
file in other words a virus

855
00:30:58,740 --> 00:31:01,020
and this is where Recon and Discovery

856
00:31:01,020 --> 00:31:02,399
can help you find these kind of places

857
00:31:02,399 --> 00:31:03,659
to check

858
00:31:03,659 --> 00:31:05,820
and this is kind of the bog standard

859
00:31:05,820 --> 00:31:07,679
part of pen testing actually this is all

860
00:31:07,679 --> 00:31:10,500
that's specific to apis

861
00:31:10,500 --> 00:31:11,760
um some fun things you could do

862
00:31:11,760 --> 00:31:13,440
purposely make bad requests look for

863
00:31:13,440 --> 00:31:15,240
errors this used to be a thing you would

864
00:31:15,240 --> 00:31:16,860
do with web servers you can do it with

865
00:31:16,860 --> 00:31:18,679
apis

866
00:31:18,679 --> 00:31:20,700
interesting things if you can determine

867
00:31:20,700 --> 00:31:22,200
what framework they're using a lot of

868
00:31:22,200 --> 00:31:24,299
times there are ways to turn on debug

869
00:31:24,299 --> 00:31:25,679
so if you can figure out what framework

870
00:31:25,679 --> 00:31:27,000
they're using do a little bit of time

871
00:31:27,000 --> 00:31:28,860
researching how to turn debug on a

872
00:31:28,860 --> 00:31:30,720
framework and see if you can turn it on

873
00:31:30,720 --> 00:31:33,000
because that's fun and then watch out

874
00:31:33,000 --> 00:31:35,100
for intermediate devices right there are

875
00:31:35,100 --> 00:31:36,419
things like laughs or gateways or stuff

876
00:31:36,419 --> 00:31:37,440
in line

877
00:31:37,440 --> 00:31:39,600
sometimes those are depending on the

878
00:31:39,600 --> 00:31:41,640
scoping of your test this may be in

879
00:31:41,640 --> 00:31:42,779
scope and those can also be

880
00:31:42,779 --> 00:31:45,179
misconfigured and if I could own a WAFF

881
00:31:45,179 --> 00:31:50,299
and let me in maybe that's a good fight

882
00:31:50,460 --> 00:31:51,840
um and then internal functions with

883
00:31:51,840 --> 00:31:53,580
things like X remote adder and those

884
00:31:53,580 --> 00:31:56,340
other headers that say what your IP is

885
00:31:56,340 --> 00:31:57,840
right if I can add those and get that

886
00:31:57,840 --> 00:32:01,679
into the API sometimes I can bypass

887
00:32:01,679 --> 00:32:03,120
um other restrictions like waps or

888
00:32:03,120 --> 00:32:04,919
whatnot

889
00:32:04,919 --> 00:32:05,890
so from a Defender

890
00:32:05,890 --> 00:32:08,279
[Music]

891
00:32:08,279 --> 00:32:10,080
nessus or any kind of infrastructury

892
00:32:10,080 --> 00:32:11,640
kind of scanner

893
00:32:11,640 --> 00:32:13,860
passive monitoring will kind of see

894
00:32:13,860 --> 00:32:16,080
games played with meters but a lot of

895
00:32:16,080 --> 00:32:18,960
the stuff doesn't look that crazy

896
00:32:18,960 --> 00:32:20,399
um and if you do have a lot of metal

897
00:32:20,399 --> 00:32:22,980
reformed or errors in a particular

898
00:32:22,980 --> 00:32:24,600
client that's also another clue that

899
00:32:24,600 --> 00:32:27,059
someone is poking at you

900
00:32:27,059 --> 00:32:29,220
um posture is once again we'll show you

901
00:32:29,220 --> 00:32:32,159
weaknesses for configuration runtime

902
00:32:32,159 --> 00:32:33,840
will see those errors or Bell form

903
00:32:33,840 --> 00:32:36,240
requests and then testing this is just

904
00:32:36,240 --> 00:32:37,919
basic testing like this should just be

905
00:32:37,919 --> 00:32:39,899
done I should have to explain it but you

906
00:32:39,899 --> 00:32:41,940
get you get me

907
00:32:41,940 --> 00:32:45,419
okay there we go injection yay it's like

908
00:32:45,419 --> 00:32:48,299
web apps all over again right except for

909
00:32:48,299 --> 00:32:49,740
now you have more fun places to add them

910
00:32:49,740 --> 00:32:52,919
right tokens apis headers anything on

911
00:32:52,919 --> 00:32:54,480
the body

912
00:32:54,480 --> 00:32:56,820
Recon could be interesting if you can

913
00:32:56,820 --> 00:32:59,039
get error messages out you might know

914
00:32:59,039 --> 00:33:02,700
what kind of injection is worth trying

915
00:33:02,700 --> 00:33:04,140
um there's fuzzing lists like the SEC

916
00:33:04,140 --> 00:33:06,539
list oh testing God has a bunch of them

917
00:33:06,539 --> 00:33:08,880
second order injections are fun I had

918
00:33:08,880 --> 00:33:10,440
one when I worked at Rackspace we're

919
00:33:10,440 --> 00:33:12,360
quite literally and this was just dumb

920
00:33:12,360 --> 00:33:15,240
luck person one was testing an API

921
00:33:15,240 --> 00:33:18,659
person two was taking a back-end uh web

922
00:33:18,659 --> 00:33:21,659
like a web Administration panel

923
00:33:21,659 --> 00:33:23,460
person one is injecting and getting

924
00:33:23,460 --> 00:33:26,279
nowhere just two hundreds all day long

925
00:33:26,279 --> 00:33:29,580
person two gets an alert with the string

926
00:33:29,580 --> 00:33:31,200
that they didn't put in anywhere like

927
00:33:31,200 --> 00:33:34,080
alert group they're like oh my god did

928
00:33:34,080 --> 00:33:36,480
we get old like what is this so we had a

929
00:33:36,480 --> 00:33:38,279
huddle and it turns out that no person

930
00:33:38,279 --> 00:33:40,620
one injected whoop and it went through

931
00:33:40,620 --> 00:33:43,440
not one six systems

932
00:33:43,440 --> 00:33:45,899
before it popped in for the web admin

933
00:33:45,899 --> 00:33:48,000
panel sat in a bunch of worker queues

934
00:33:48,000 --> 00:33:49,500
got written to databases got rid of the

935
00:33:49,500 --> 00:33:50,880
debate this has put a different worker

936
00:33:50,880 --> 00:33:53,039
queue six systems

937
00:33:53,039 --> 00:33:54,480
second order attacks they're they're

938
00:33:54,480 --> 00:33:57,480
awesome that was a that was a funnel

939
00:33:57,480 --> 00:34:00,500
good day at Rackspace

940
00:34:01,140 --> 00:34:03,720
um so obviously for a Defender this is

941
00:34:03,720 --> 00:34:05,880
just the standard input validation and

942
00:34:05,880 --> 00:34:07,860
output encoding if you see a lot of

943
00:34:07,860 --> 00:34:09,239
failed requests that's an idea that

944
00:34:09,239 --> 00:34:11,219
someone is trying injection honestly

945
00:34:11,219 --> 00:34:13,199
waffs are not bad at finding injection

946
00:34:13,199 --> 00:34:14,399
things because they're good at start

947
00:34:14,399 --> 00:34:15,780
patching and usually you're using the

948
00:34:15,780 --> 00:34:17,219
same kind of strings for testing

949
00:34:17,219 --> 00:34:18,899
injection

950
00:34:18,899 --> 00:34:20,280
um an interesting thing I didn't mention

951
00:34:20,280 --> 00:34:22,980
this earlier overly trusting East-West

952
00:34:22,980 --> 00:34:25,260
Falls so there's two ways to talk about

953
00:34:25,260 --> 00:34:27,239
API calls North and South if you hear

954
00:34:27,239 --> 00:34:28,500
that call there's usually like public

955
00:34:28,500 --> 00:34:31,199
internet to an IP or an API that's

956
00:34:31,199 --> 00:34:32,219
internal

957
00:34:32,219 --> 00:34:35,219
East-West is API to API and a lot of

958
00:34:35,219 --> 00:34:37,619
those are super trusting super trusty

959
00:34:37,619 --> 00:34:39,960
right why would my friend and brother

960
00:34:39,960 --> 00:34:42,300
co-worker written API ever send me bad

961
00:34:42,300 --> 00:34:45,960
data well they will and do

962
00:34:45,960 --> 00:34:47,580
um unfortunately that's how you get

963
00:34:47,580 --> 00:34:48,960
through six systems and pop out

964
00:34:48,960 --> 00:34:51,060
somewhere else

965
00:34:51,060 --> 00:34:52,800
um obviously runtime the surgeon in

966
00:34:52,800 --> 00:34:56,460
Ballot or miss or malformed requests

967
00:34:56,460 --> 00:34:59,040
and obviously uh hopefully your Das

968
00:34:59,040 --> 00:35:01,140
testing tests for injection this is

969
00:35:01,140 --> 00:35:02,580
hardly rocket science in terms of

970
00:35:02,580 --> 00:35:06,140
problems with apps

971
00:35:07,920 --> 00:35:09,839
it's management it's knowing what you

972
00:35:09,839 --> 00:35:12,000
have this is that API posture idea I

973
00:35:12,000 --> 00:35:13,380
talked about earlier

974
00:35:13,380 --> 00:35:15,540
well as an attacker you really can't do

975
00:35:15,540 --> 00:35:16,619
much here

976
00:35:16,619 --> 00:35:18,180
obviously if you find a bunch of

977
00:35:18,180 --> 00:35:19,800
misconfigurations that's a clue they

978
00:35:19,800 --> 00:35:21,720
don't know what's going on

979
00:35:21,720 --> 00:35:23,700
um if you find undocumented hidden apis

980
00:35:23,700 --> 00:35:25,079
that's another clue they don't have an

981
00:35:25,079 --> 00:35:26,760
inventory

982
00:35:26,760 --> 00:35:28,859
um you will see a lot of times a fun one

983
00:35:28,859 --> 00:35:32,220
if an API has V2 right that they have in

984
00:35:32,220 --> 00:35:34,140
their documents just change two to one

985
00:35:34,140 --> 00:35:36,960
and try V1 right maybe they never retire

986
00:35:36,960 --> 00:35:38,280
that sucker

987
00:35:38,280 --> 00:35:40,260
um that can be kind of fun but basically

988
00:35:40,260 --> 00:35:42,300
you know they have bad Inventory

989
00:35:42,300 --> 00:35:43,980
management if your pen testing was fun

990
00:35:43,980 --> 00:35:45,240
and easy

991
00:35:45,240 --> 00:35:46,920
right that's just unfortunately the

992
00:35:46,920 --> 00:35:48,540
truth there's not really a way to test

993
00:35:48,540 --> 00:35:50,640
for this except for just to see it and

994
00:35:50,640 --> 00:35:52,740
how many results you get

995
00:35:52,740 --> 00:35:54,000
um and the defender well you just got to

996
00:35:54,000 --> 00:35:56,940
know all your apis and classify them

997
00:35:56,940 --> 00:35:59,520
um API gateways are pretty good A lot of

998
00:35:59,520 --> 00:36:01,619
times API gateways only enforce north

999
00:36:01,619 --> 00:36:04,020
south not East-West traffic so that can

1000
00:36:04,020 --> 00:36:05,579
be a gap

1001
00:36:05,579 --> 00:36:06,839
um you have to understand public versus

1002
00:36:06,839 --> 00:36:08,760
internal apis obviously where you don't

1003
00:36:08,760 --> 00:36:10,800
want public copies to hit

1004
00:36:10,800 --> 00:36:12,359
and you just have to have a solid

1005
00:36:12,359 --> 00:36:14,400
posture management going on for this one

1006
00:36:14,400 --> 00:36:17,099
in particular run if you're nice if

1007
00:36:17,099 --> 00:36:19,140
you're lucky your run time can actually

1008
00:36:19,140 --> 00:36:21,240
tell you what your inventory is if they

1009
00:36:21,240 --> 00:36:22,500
talk to each other and they're good

1010
00:36:22,500 --> 00:36:24,480
tooling right which is great because now

1011
00:36:24,480 --> 00:36:26,280
I don't have to God help me get a

1012
00:36:26,280 --> 00:36:27,720
spreadsheet out and talk to developers

1013
00:36:27,720 --> 00:36:29,339
and make a list that's outdated by the

1014
00:36:29,339 --> 00:36:31,920
time I'm done I have run time writing it

1015
00:36:31,920 --> 00:36:34,079
all the time for me and runtime can tell

1016
00:36:34,079 --> 00:36:36,119
me cool things like either way this

1017
00:36:36,119 --> 00:36:37,619
little API call that I've never seen for

1018
00:36:37,619 --> 00:36:40,020
sure showed up last Tuesday at 4pm is

1019
00:36:40,020 --> 00:36:41,640
this interesting I don't know but at

1020
00:36:41,640 --> 00:36:43,680
least you know it so runtime is super

1021
00:36:43,680 --> 00:36:46,079
handy when you mix it with posture and

1022
00:36:46,079 --> 00:36:49,280
testing really doesn't do much here

1023
00:36:49,619 --> 00:36:53,700
okay insufficient logging and monitoring

1024
00:36:53,700 --> 00:36:56,940
so as an attacker you can fuzz all day

1025
00:36:56,940 --> 00:36:58,320
long and nothing happens

1026
00:36:58,320 --> 00:37:00,480
that's kind of a clue this is also when

1027
00:37:00,480 --> 00:37:03,060
we have to infer this

1028
00:37:03,060 --> 00:37:04,619
um and I've done a text that were just

1029
00:37:04,619 --> 00:37:07,260
ridiculous I put an alert script xss

1030
00:37:07,260 --> 00:37:10,260
into a phone number of an API and got a

1031
00:37:10,260 --> 00:37:13,200
200 back like I don't even think I can

1032
00:37:13,200 --> 00:37:15,240
make this happen on my phone right how

1033
00:37:15,240 --> 00:37:17,339
do you call a script I don't know but it

1034
00:37:17,339 --> 00:37:19,380
took it and it gave me a 200. like it's

1035
00:37:19,380 --> 00:37:20,579
just kind of sad

1036
00:37:20,579 --> 00:37:22,380
I mean you would think that really is

1037
00:37:22,380 --> 00:37:24,660
logged that or notice it but so as an

1038
00:37:24,660 --> 00:37:27,119
attacker this is basically you can send

1039
00:37:27,119 --> 00:37:29,280
all kinds of crap data to the API all

1040
00:37:29,280 --> 00:37:30,900
day long and it just Smiles in sends

1041
00:37:30,900 --> 00:37:32,579
200s back

1042
00:37:32,579 --> 00:37:34,020
when you don't get blocked like ideally

1043
00:37:34,020 --> 00:37:35,040
you should get blocked or something

1044
00:37:35,040 --> 00:37:37,320
right the offline JD with d token or

1045
00:37:37,320 --> 00:37:38,880
something but you'll find that that

1046
00:37:38,880 --> 00:37:40,440
doesn't happen

1047
00:37:40,440 --> 00:37:42,119
as a Defender like you think

1048
00:37:42,119 --> 00:37:43,320
everything's great

1049
00:37:43,320 --> 00:37:45,720
no attack today we're not monitoring but

1050
00:37:45,720 --> 00:37:48,300
everything's awesome right oops

1051
00:37:48,300 --> 00:37:51,119
um another like a sign of this is you

1052
00:37:51,119 --> 00:37:52,560
have problems with the API and they're

1053
00:37:52,560 --> 00:37:54,420
really hard to diagnose like you don't

1054
00:37:54,420 --> 00:37:56,760
know because there aren't

1055
00:37:56,760 --> 00:37:58,320
um any kind of logs to go through even

1056
00:37:58,320 --> 00:38:00,839
for functional issues and then unplanned

1057
00:38:00,839 --> 00:38:02,160
downtime or resource consumption

1058
00:38:02,160 --> 00:38:03,720
obviously is another clue you might want

1059
00:38:03,720 --> 00:38:05,400
to start logging and maybe even

1060
00:38:05,400 --> 00:38:06,599
monitoring

1061
00:38:06,599 --> 00:38:08,160
um

1062
00:38:08,160 --> 00:38:09,660
posture can tell you what things you

1063
00:38:09,660 --> 00:38:11,460
really want to log monitoring this is

1064
00:38:11,460 --> 00:38:13,320
what monitoring is like runtime is

1065
00:38:13,320 --> 00:38:15,420
monitoring so you obviously should have

1066
00:38:15,420 --> 00:38:16,500
that

1067
00:38:16,500 --> 00:38:18,720
um testing at best can kind of tell you

1068
00:38:18,720 --> 00:38:20,280
that your logging is working which isn't

1069
00:38:20,280 --> 00:38:21,960
a bad sort of validation but I wouldn't

1070
00:38:21,960 --> 00:38:24,540
make this a regular thing right turn on

1071
00:38:24,540 --> 00:38:26,940
logging be rude to your API be a testing

1072
00:38:26,940 --> 00:38:28,980
and make sure that stuff shows up there

1073
00:38:28,980 --> 00:38:32,119
and then you're probably done

1074
00:38:32,220 --> 00:38:34,560
okay bonus material where am I in time

1075
00:38:34,560 --> 00:38:36,240
oh I'm doing pretty good dang that's

1076
00:38:36,240 --> 00:38:37,740
better than I thought

1077
00:38:37,740 --> 00:38:39,180
okay these are things that didn't fit

1078
00:38:39,180 --> 00:38:40,560
nicely into the top 10 but I still

1079
00:38:40,560 --> 00:38:43,920
wanted to talk about so bonus material

1080
00:38:43,920 --> 00:38:46,440
fuzzing right

1081
00:38:46,440 --> 00:38:47,579
um I kind of talked about this a little

1082
00:38:47,579 --> 00:38:48,480
bit

1083
00:38:48,480 --> 00:38:49,500
but

1084
00:38:49,500 --> 00:38:51,420
sometimes it's just you will get lucky

1085
00:38:51,420 --> 00:38:54,260
by just throwing random crap at apis

1086
00:38:54,260 --> 00:38:56,780
surprisingly it works right things like

1087
00:38:56,780 --> 00:38:58,700
extremely large or small numbers

1088
00:38:58,700 --> 00:39:00,599
negative numbers where they expect

1089
00:39:00,599 --> 00:39:02,880
positive decimals for integers letters

1090
00:39:02,880 --> 00:39:05,940
for numbers right just play type games

1091
00:39:05,940 --> 00:39:08,480
right um control characters are from

1092
00:39:08,480 --> 00:39:11,220
non-native like not American characters

1093
00:39:11,220 --> 00:39:14,220
are always fun to throw in

1094
00:39:14,220 --> 00:39:16,339
um

1095
00:39:16,560 --> 00:39:18,480
Target fuzzing strings strings can be

1096
00:39:18,480 --> 00:39:19,800
fun and then look for things like

1097
00:39:19,800 --> 00:39:22,140
Response Code size timing or error

1098
00:39:22,140 --> 00:39:23,640
messages coming out and that's a hint

1099
00:39:23,640 --> 00:39:25,800
like something's wonky going on in the

1100
00:39:25,800 --> 00:39:28,099
back end

1101
00:39:31,380 --> 00:39:33,780
lots of requests for

1102
00:39:33,780 --> 00:39:35,280
us for a short period of time probably

1103
00:39:35,280 --> 00:39:37,440
means promising it's really not hard to

1104
00:39:37,440 --> 00:39:39,060
figure out like this is so loud and

1105
00:39:39,060 --> 00:39:40,320
blatant I've done this and you're just

1106
00:39:40,320 --> 00:39:41,820
like I ran a fuzzer against you

1107
00:39:41,820 --> 00:39:45,420
overnight and like nothing happened but

1108
00:39:45,420 --> 00:39:46,680
you can get away with it right it's

1109
00:39:46,680 --> 00:39:49,140
super noisy you'll see spikes in CP or

1110
00:39:49,140 --> 00:39:52,079
RAM usage if you're actually monitoring

1111
00:39:52,079 --> 00:39:54,300
um posture can't do much for fuzzing

1112
00:39:54,300 --> 00:39:56,820
runtime can definitely detect it and you

1113
00:39:56,820 --> 00:40:01,220
should be testing with fuzzing anyway

1114
00:40:02,700 --> 00:40:04,440
okay

1115
00:40:04,440 --> 00:40:07,079
data attacks this is another fun one

1116
00:40:07,079 --> 00:40:09,660
so I've noticed when testing apis

1117
00:40:09,660 --> 00:40:11,280
there's sort of two ways to think about

1118
00:40:11,280 --> 00:40:12,480
testing

1119
00:40:12,480 --> 00:40:14,460
and particularly this really concerning

1120
00:40:14,460 --> 00:40:17,300
the body of our quests right you have

1121
00:40:17,300 --> 00:40:19,500
structural attacks

1122
00:40:19,500 --> 00:40:21,359
uh well let me back up I'm going to say

1123
00:40:21,359 --> 00:40:23,579
data first you have data attacks right

1124
00:40:23,579 --> 00:40:26,400
where I'm substituting out your name for

1125
00:40:26,400 --> 00:40:28,320
like or even better a phone number for a

1126
00:40:28,320 --> 00:40:30,599
script xss right that's a structural

1127
00:40:30,599 --> 00:40:32,820
attack or a data attack I'm swapping out

1128
00:40:32,820 --> 00:40:35,700
data I'm injecting like naughty data

1129
00:40:35,700 --> 00:40:37,740
into data points within a validly

1130
00:40:37,740 --> 00:40:42,300
structured piece of response body

1131
00:40:42,300 --> 00:40:45,300
what really gets fun and this is great

1132
00:40:45,300 --> 00:40:47,339
QA tools will do this for you Postman

1133
00:40:47,339 --> 00:40:49,020
and stuff like this can you can automate

1134
00:40:49,020 --> 00:40:51,180
the heck out of this it's kind of nice

1135
00:40:51,180 --> 00:40:52,800
well where it really gets fun is when

1136
00:40:52,800 --> 00:40:54,480
you do what I call structural attacks

1137
00:40:54,480 --> 00:40:57,540
this is just being tracked crazy like my

1138
00:40:57,540 --> 00:40:59,280
favorite one was 32 Megs of space

1139
00:40:59,280 --> 00:41:01,560
injected between two XML tanks that took

1140
00:41:01,560 --> 00:41:02,700
out of service

1141
00:41:02,700 --> 00:41:05,160
that is a valid XML document it's just

1142
00:41:05,160 --> 00:41:06,660
really stupid

1143
00:41:06,660 --> 00:41:09,839
right but it works right it's amazing so

1144
00:41:09,839 --> 00:41:12,300
repeat pieces of the data structure I

1145
00:41:12,300 --> 00:41:13,800
remember one that I was able to get to

1146
00:41:13,800 --> 00:41:16,079
get really confused by just having a

1147
00:41:16,079 --> 00:41:18,359
multiple of the same XML type submitted

1148
00:41:18,359 --> 00:41:20,640
and it was really it was interesting

1149
00:41:20,640 --> 00:41:22,560
because the behavior was just whack it

1150
00:41:22,560 --> 00:41:23,760
would take the first one that it would

1151
00:41:23,760 --> 00:41:24,839
take the fourth one that it would take

1152
00:41:24,839 --> 00:41:27,180
the last one I had no idea it was going

1153
00:41:27,180 --> 00:41:28,980
on with that API but it just lost its

1154
00:41:28,980 --> 00:41:31,380
mind with multiple elements it wasn't I

1155
00:41:31,380 --> 00:41:32,520
couldn't do anything with it but it was

1156
00:41:32,520 --> 00:41:34,140
just kind of fun

1157
00:41:34,140 --> 00:41:37,440
um non-printed characters adding tabs

1158
00:41:37,440 --> 00:41:39,900
and all characters take out portions of

1159
00:41:39,900 --> 00:41:41,339
the data structure and see if the thing

1160
00:41:41,339 --> 00:41:43,980
loses its mind this is stump and

1161
00:41:43,980 --> 00:41:45,420
unfortunately this is something you have

1162
00:41:45,420 --> 00:41:47,520
to do by kind of manually crafting

1163
00:41:47,520 --> 00:41:49,980
requests like you can do this in burp

1164
00:41:49,980 --> 00:41:52,140
obviously or zap if you catch that

1165
00:41:52,140 --> 00:41:54,180
request or you have to write some code

1166
00:41:54,180 --> 00:41:56,460
to manually create the http

1167
00:41:56,460 --> 00:41:58,859
body but it's you you can't do it with

1168
00:41:58,859 --> 00:42:00,540
like air normal tools because most

1169
00:42:00,540 --> 00:42:02,640
normal tools want to put normal

1170
00:42:02,640 --> 00:42:04,680
structured data so you have to do some

1171
00:42:04,680 --> 00:42:07,020
customization and Q a tools won't help

1172
00:42:07,020 --> 00:42:09,380
you here

1173
00:42:10,200 --> 00:42:11,700
ah

1174
00:42:11,700 --> 00:42:13,619
graphql

1175
00:42:13,619 --> 00:42:14,700
um

1176
00:42:14,700 --> 00:42:17,339
so graphql is a special neat new fancy

1177
00:42:17,339 --> 00:42:18,720
it's going to solve all of our API

1178
00:42:18,720 --> 00:42:20,359
problems technology

1179
00:42:20,359 --> 00:42:22,320
and we're still going to be employed

1180
00:42:22,320 --> 00:42:25,800
next week because it has problems

1181
00:42:25,800 --> 00:42:28,140
um but most of these things are the same

1182
00:42:28,140 --> 00:42:31,740
like zap has a graphql plug-in burp

1183
00:42:31,740 --> 00:42:33,119
Suite obviously works for this Brute

1184
00:42:33,119 --> 00:42:36,060
Force Recon is the same interesting

1185
00:42:36,060 --> 00:42:38,640
things with graphql

1186
00:42:38,640 --> 00:42:40,440
there's this idea of inspection where

1187
00:42:40,440 --> 00:42:43,079
you can say hey API what's what's your

1188
00:42:43,079 --> 00:42:44,820
schema what stuff can I ask you and it

1189
00:42:44,820 --> 00:42:46,980
will send you that back

1190
00:42:46,980 --> 00:42:49,440
um it's really nice as an attacker know

1191
00:42:49,440 --> 00:42:51,660
exactly what you have in the database in

1192
00:42:51,660 --> 00:42:53,099
essence right and that's what that gives

1193
00:42:53,099 --> 00:42:54,720
you so often those will be disabled

1194
00:42:54,720 --> 00:42:56,820
which means I don't know when I can make

1195
00:42:56,820 --> 00:42:58,500
requests for which makes it harder but a

1196
00:42:58,500 --> 00:43:00,180
lot of times it's not so that can be an

1197
00:43:00,180 --> 00:43:03,540
interesting source of sort of Recon

1198
00:43:03,540 --> 00:43:05,940
um and in graphql the clients say this

1199
00:43:05,940 --> 00:43:07,920
is the data I want unlike rest right

1200
00:43:07,920 --> 00:43:10,440
where rest is here's the structure of

1201
00:43:10,440 --> 00:43:13,260
what I want and you give me back a

1202
00:43:13,260 --> 00:43:14,760
response and it's very it's very

1203
00:43:14,760 --> 00:43:17,520
structured and normalized graphql is

1204
00:43:17,520 --> 00:43:19,740
like a SQL query right select star from

1205
00:43:19,740 --> 00:43:22,140
yada yada and get back whatever the

1206
00:43:22,140 --> 00:43:24,300
database says it's really cool from a

1207
00:43:24,300 --> 00:43:26,160
like developer client productivity

1208
00:43:26,160 --> 00:43:27,720
perspective because you're not locked to

1209
00:43:27,720 --> 00:43:29,880
versions of the API

1210
00:43:29,880 --> 00:43:32,220
um but it's also awesome from an attack

1211
00:43:32,220 --> 00:43:34,260
perspective because like Facebook has

1212
00:43:34,260 --> 00:43:35,880
had all kinds of issues where people

1213
00:43:35,880 --> 00:43:37,260
could make requests of the Facebook

1214
00:43:37,260 --> 00:43:41,240
graphql thing that they didn't expect

1215
00:43:41,579 --> 00:43:43,319
um and I said all that

1216
00:43:43,319 --> 00:43:45,240
the Great Dan vulnerable graphql

1217
00:43:45,240 --> 00:43:46,440
application if you want to play with

1218
00:43:46,440 --> 00:43:49,380
graphql play with that have some fun

1219
00:43:49,380 --> 00:43:51,180
unfortunately I did not go through all

1220
00:43:51,180 --> 00:43:52,920
the graphql because

1221
00:43:52,920 --> 00:43:54,780
I'm already kind of tight on time so

1222
00:43:54,780 --> 00:43:57,720
please Google graphql

1223
00:43:57,720 --> 00:43:59,940
so conclusion I think I'm going to

1224
00:43:59,940 --> 00:44:01,980
finish this on time which is awesome

1225
00:44:01,980 --> 00:44:03,480
takeaway for pen test

1226
00:44:03,480 --> 00:44:05,700
right if you have knowledge of how to

1227
00:44:05,700 --> 00:44:07,740
test web apps already you're pretty far

1228
00:44:07,740 --> 00:44:09,599
along right you just don't get a UI

1229
00:44:09,599 --> 00:44:12,720
right but pretty much it's the same so a

1230
00:44:12,720 --> 00:44:14,099
lot of the stuff you know and if you

1231
00:44:14,099 --> 00:44:16,079
don't know look at the OS testing guide

1232
00:44:16,079 --> 00:44:17,700
you can order a lot of this stuff pretty

1233
00:44:17,700 --> 00:44:19,440
quick

1234
00:44:19,440 --> 00:44:21,599
um there are some special tools and

1235
00:44:21,599 --> 00:44:24,480
knowledge you need to know for apis I

1236
00:44:24,480 --> 00:44:26,819
have more on that in a bit

1237
00:44:26,819 --> 00:44:28,380
um and then there's lots of gaps in app

1238
00:44:28,380 --> 00:44:30,780
Tech controls so this is likely to be a

1239
00:44:30,780 --> 00:44:32,700
highly productive area to test going

1240
00:44:32,700 --> 00:44:35,160
forward for quite some time not that web

1241
00:44:35,160 --> 00:44:36,780
app testing isn't productive anymore it

1242
00:44:36,780 --> 00:44:38,460
still is but this is even more

1243
00:44:38,460 --> 00:44:40,619
productive if they have their game

1244
00:44:40,619 --> 00:44:41,880
together for web apps they probably

1245
00:44:41,880 --> 00:44:44,880
don't for API testing

1246
00:44:44,880 --> 00:44:47,040
so on the tools I created this page on

1247
00:44:47,040 --> 00:44:50,160
the ls website it lists all of the API

1248
00:44:50,160 --> 00:44:52,800
security tools I could find I'm sure I

1249
00:44:52,800 --> 00:44:54,180
have missed some I am happy to have

1250
00:44:54,180 --> 00:44:56,220
additions or it's on GitHub you can do a

1251
00:44:56,220 --> 00:44:58,440
PR and we will gladly accept it several

1252
00:44:58,440 --> 00:45:00,060
people have

1253
00:45:00,060 --> 00:45:01,740
um but this is a nice list and then I

1254
00:45:01,740 --> 00:45:04,200
denote if it's a posterior security or

1255
00:45:04,200 --> 00:45:07,680
runtime or testing tool and also what

1256
00:45:07,680 --> 00:45:10,500
license it is and some other notes so I

1257
00:45:10,500 --> 00:45:11,760
think I don't remember how many have

1258
00:45:11,760 --> 00:45:13,260
like 40 50 of these things I can't

1259
00:45:13,260 --> 00:45:16,140
remember but so use this and or send me

1260
00:45:16,140 --> 00:45:18,060
more submissions and I will make the

1261
00:45:18,060 --> 00:45:19,920
list longer because API security is hot

1262
00:45:19,920 --> 00:45:21,180
right now and everybody will have to

1263
00:45:21,180 --> 00:45:23,339
claim they do it so I'm sure I've missed

1264
00:45:23,339 --> 00:45:25,260
them

1265
00:45:25,260 --> 00:45:27,720
and then for Defenders so if you want to

1266
00:45:27,720 --> 00:45:28,500
map

1267
00:45:28,500 --> 00:45:31,560
the OST API top 10 to those three

1268
00:45:31,560 --> 00:45:33,839
different areas here's where they help

1269
00:45:33,839 --> 00:45:36,660
or hurt so for Bola posture is pretty

1270
00:45:36,660 --> 00:45:39,420
weak runtime and testing are good same

1271
00:45:39,420 --> 00:45:42,060
for broken user authentication excessive

1272
00:45:42,060 --> 00:45:43,579
data exposure they're all pretty good

1273
00:45:43,579 --> 00:45:46,020
lack of rate limiting they're all pretty

1274
00:45:46,020 --> 00:45:48,200
good and broken function authorization

1275
00:45:48,200 --> 00:45:50,460
and posture is kind of weak the others

1276
00:45:50,460 --> 00:45:52,640
are good

1277
00:45:52,640 --> 00:45:55,619
for um the final five

1278
00:45:55,619 --> 00:45:57,420
Mass assignment posture really does

1279
00:45:57,420 --> 00:45:58,920
nothing for you here to be honest

1280
00:45:58,920 --> 00:46:01,260
runtime and testing are good security

1281
00:46:01,260 --> 00:46:02,940
misconfiguration all of them are good

1282
00:46:02,940 --> 00:46:05,040
injection posture is kind of weak helps

1283
00:46:05,040 --> 00:46:06,359
maybe point out the apis you should

1284
00:46:06,359 --> 00:46:08,099
worry about but otherwise you need the

1285
00:46:08,099 --> 00:46:09,359
other two

1286
00:46:09,359 --> 00:46:10,980
and then testing really doesn't help for

1287
00:46:10,980 --> 00:46:12,720
improper assets or logging and

1288
00:46:12,720 --> 00:46:15,359
monitoring this is pretty much what

1289
00:46:15,359 --> 00:46:18,119
runtime is and this is pretty much what

1290
00:46:18,119 --> 00:46:20,579
posture is so really those two are kind

1291
00:46:20,579 --> 00:46:22,560
of air quotes mandatory if you want to

1292
00:46:22,560 --> 00:46:24,839
cover the API top 10.

1293
00:46:24,839 --> 00:46:28,280
and there we go sorry

1294
00:46:28,280 --> 00:46:31,740
holy crap through it so it's good

1295
00:46:31,740 --> 00:46:35,180
and that's it yay

1296
00:46:38,060 --> 00:46:40,500
if I have time I'll answer questions if

1297
00:46:40,500 --> 00:46:41,760
people have them I don't I don't know

1298
00:46:41,760 --> 00:46:44,480
where I am on time

1299
00:46:46,500 --> 00:46:48,420
questions

1300
00:46:48,420 --> 00:46:51,000
oh do I dang oh I got 10 minutes well

1301
00:46:51,000 --> 00:46:52,619
shoot questions ask me questions let's

1302
00:46:52,619 --> 00:46:55,680
kill some time or I can hand out candy

1303
00:46:55,680 --> 00:46:57,859
foreign

1304
00:46:59,640 --> 00:47:02,299
questions questions

1305
00:47:06,660 --> 00:47:10,520
there we go yeah no bloody technology

1306
00:47:12,240 --> 00:47:14,880
oh we got one up here

1307
00:47:14,880 --> 00:47:16,380
yay

1308
00:47:16,380 --> 00:47:19,760
you wanna you wanna candy thank you

1309
00:47:19,760 --> 00:47:20,819
[Music]

1310
00:47:20,819 --> 00:47:23,760
so I guess this is more of a comment uh

1311
00:47:23,760 --> 00:47:26,420
more than a question but uh

1312
00:47:26,420 --> 00:47:29,220
so one of the things that you were

1313
00:47:29,220 --> 00:47:32,400
mentioning earlier was about testing the

1314
00:47:32,400 --> 00:47:36,180
different HD methods so gets both leads

1315
00:47:36,180 --> 00:47:38,760
one of the things that you might also

1316
00:47:38,760 --> 00:47:43,140
want to Leverage is developers ability

1317
00:47:43,140 --> 00:47:47,339
to call the rxc strong so another good

1318
00:47:47,339 --> 00:47:49,740
Avenue there is for example look at get

1319
00:47:49,740 --> 00:47:51,720
requests that are really deletes or

1320
00:47:51,720 --> 00:47:54,359
posts right in the query parameters so

1321
00:47:54,359 --> 00:47:55,859
that's that's something that we should

1322
00:47:55,859 --> 00:47:58,500
look into

1323
00:47:58,500 --> 00:48:02,400
some API is also with the use websockets

1324
00:48:02,400 --> 00:48:05,520
that also might be a good part to to

1325
00:48:05,520 --> 00:48:08,160
dive deeper

1326
00:48:08,160 --> 00:48:10,200
but there are lots of good ideas for

1327
00:48:10,200 --> 00:48:12,000
these presentation so yeah thank you for

1328
00:48:12,000 --> 00:48:14,819
putting this together oh sure useful I

1329
00:48:14,819 --> 00:48:17,579
I'm crazy I love this stuff

1330
00:48:17,579 --> 00:48:19,560
I did it for years at Rack was kind of

1331
00:48:19,560 --> 00:48:21,720
awful because the tooling was terrible I

1332
00:48:21,720 --> 00:48:23,160
wrote I wrote something called Jerry

1333
00:48:23,160 --> 00:48:24,960
curl which is literally a way to make

1334
00:48:24,960 --> 00:48:27,540
curl commands smaller it's like Jerry

1335
00:48:27,540 --> 00:48:29,640
rig like the Germans leaving in France

1336
00:48:29,640 --> 00:48:31,560
but yes that's what I do because I'm

1337
00:48:31,560 --> 00:48:33,359
tired I was typing all these bloody long

1338
00:48:33,359 --> 00:48:36,000
curl commands and so I wanted a way to

1339
00:48:36,000 --> 00:48:38,220
abstract out the host and the you know

1340
00:48:38,220 --> 00:48:40,140
the the header for the token and the

1341
00:48:40,140 --> 00:48:43,380
header for Json and so Jerry curl would

1342
00:48:43,380 --> 00:48:45,000
let you make these short commands and

1343
00:48:45,000 --> 00:48:46,380
then stop in everything that was in a

1344
00:48:46,380 --> 00:48:48,000
config so you can have these like tiny

1345
00:48:48,000 --> 00:48:49,859
little things because I was calling curl

1346
00:48:49,859 --> 00:48:50,940
all the time to try to figure out how

1347
00:48:50,940 --> 00:48:52,680
the frick to talk to the apis and these

1348
00:48:52,680 --> 00:48:55,500
like this 87th time you type Dash H

1349
00:48:55,500 --> 00:48:58,680
quotes uh except Json like you just want

1350
00:48:58,680 --> 00:49:01,319
to die that's why I wrote something so

1351
00:49:01,319 --> 00:49:02,819
it's still out there on GitHub if you're

1352
00:49:02,819 --> 00:49:04,680
curious but there's better tooling now

1353
00:49:04,680 --> 00:49:07,020
much better tooling now

1354
00:49:07,020 --> 00:49:09,060
any other questions

1355
00:49:09,060 --> 00:49:12,319
going once going twice

1356
00:49:17,460 --> 00:49:18,960
what's your favorite language or

1357
00:49:18,960 --> 00:49:20,520
framework to attack

1358
00:49:20,520 --> 00:49:23,760
oh to attack oh that's interesting um to

1359
00:49:23,760 --> 00:49:25,619
be really blunt but one you know is

1360
00:49:25,619 --> 00:49:27,540
probably the best one if you don't know

1361
00:49:27,540 --> 00:49:30,480
one and I'm like kind of violating my

1362
00:49:30,480 --> 00:49:32,040
own statement earlier of course I should

1363
00:49:32,040 --> 00:49:33,960
say go because I really let go but

1364
00:49:33,960 --> 00:49:36,300
python has so many libraries and it's

1365
00:49:36,300 --> 00:49:38,339
pretty dang easy and you don't have to

1366
00:49:38,339 --> 00:49:40,680
do I mean the stuff I like about go is

1367
00:49:40,680 --> 00:49:43,740
much more about it being technically

1368
00:49:43,740 --> 00:49:46,020
um type safe having the type safety and

1369
00:49:46,020 --> 00:49:47,160
strong types and all that stuff to make

1370
00:49:47,160 --> 00:49:50,520
it like more uh rugged for like relapse

1371
00:49:50,520 --> 00:49:52,980
but if you're just testing whatever

1372
00:49:52,980 --> 00:49:55,740
works like the thing that killed the um

1373
00:49:55,740 --> 00:49:58,560
the 32 Meg of space was like 20 lines of

1374
00:49:58,560 --> 00:50:00,599
Ruby because at the time I was really

1375
00:50:00,599 --> 00:50:02,339
curious that was literally why I wrote

1376
00:50:02,339 --> 00:50:03,480
it really I was like what's it like

1377
00:50:03,480 --> 00:50:05,940
writing Ruby right so it really doesn't

1378
00:50:05,940 --> 00:50:07,680
matter whatever whatever language you

1379
00:50:07,680 --> 00:50:10,079
can get stuff out and done in is a great

1380
00:50:10,079 --> 00:50:11,160
language to write it in because this

1381
00:50:11,160 --> 00:50:13,140
stuff isn't going to run and make money

1382
00:50:13,140 --> 00:50:14,339
for your Enterprise it's going to be

1383
00:50:14,339 --> 00:50:17,280
used for testing so but I do like python

1384
00:50:17,280 --> 00:50:20,339
as a nice easy language every Target

1385
00:50:20,339 --> 00:50:22,920
oh sorry

1386
00:50:22,920 --> 00:50:25,560
oh the Target app oh well that's a

1387
00:50:25,560 --> 00:50:27,000
different question I would definitely

1388
00:50:27,000 --> 00:50:29,040
say strongly typed languages obviously I

1389
00:50:29,040 --> 00:50:30,000
like go

1390
00:50:30,000 --> 00:50:32,160
Java is okay but I still kind of hate it

1391
00:50:32,160 --> 00:50:33,420
and I have scars for where I used to

1392
00:50:33,420 --> 00:50:34,680
write it

1393
00:50:34,680 --> 00:50:37,500
um C sharp isn't bad but I mean people

1394
00:50:37,500 --> 00:50:38,880
are writing stuff on all kinds of things

1395
00:50:38,880 --> 00:50:40,800
and you can be stupid in any language I

1396
00:50:40,800 --> 00:50:42,359
mean good Lord I've been stupid and go

1397
00:50:42,359 --> 00:50:44,040
right I've made mistakes and go and it's

1398
00:50:44,040 --> 00:50:46,079
a great language but it's just easy to

1399
00:50:46,079 --> 00:50:47,579
be dumb in languages unfortunately

1400
00:50:47,579 --> 00:50:49,800
because we're humans but I don't I

1401
00:50:49,800 --> 00:50:51,300
haven't done a lot of the

1402
00:50:51,300 --> 00:50:54,420
writing side of the house that much

1403
00:50:54,420 --> 00:50:56,160
um I know at Rack we had tons of stuff

1404
00:50:56,160 --> 00:50:59,460
in flask but flax is a pretty bare

1405
00:50:59,460 --> 00:51:02,700
minimal python framework Django is a

1406
00:51:02,700 --> 00:51:03,960
pretty good one

1407
00:51:03,960 --> 00:51:06,119
um for python has a lot of belts and

1408
00:51:06,119 --> 00:51:07,500
suspenders built in which is kind of

1409
00:51:07,500 --> 00:51:08,460
cool

1410
00:51:08,460 --> 00:51:10,980
so yeah kind of depends

1411
00:51:10,980 --> 00:51:12,240
yeah

1412
00:51:12,240 --> 00:51:14,160
a couple of questions so do you see any

1413
00:51:14,160 --> 00:51:16,319
kind of differences between HTTP

1414
00:51:16,319 --> 00:51:19,760
versions that may play into testing

1415
00:51:19,760 --> 00:51:22,680
1.2.3's coming up the other one is

1416
00:51:22,680 --> 00:51:25,440
anything related to like the uh the

1417
00:51:25,440 --> 00:51:26,940
headers you may have mentioned may have

1418
00:51:26,940 --> 00:51:29,280
implied like content length and checking

1419
00:51:29,280 --> 00:51:32,880
it or using uh um requests with the

1420
00:51:32,880 --> 00:51:35,819
chong ding coding so not fixed content

1421
00:51:35,819 --> 00:51:37,920
bank and so on

1422
00:51:37,920 --> 00:51:41,400
um also last question I know I am asking

1423
00:51:41,400 --> 00:51:43,859
a lot it doesn't see anything around uh

1424
00:51:43,859 --> 00:51:46,079
uh that you could

1425
00:51:46,079 --> 00:51:48,000
um you know defend against like HTTP

1426
00:51:48,000 --> 00:51:50,040
request pipelining

1427
00:51:50,040 --> 00:51:51,780
oh interesting

1428
00:51:51,780 --> 00:51:53,400
um I haven't personally seen any kind of

1429
00:51:53,400 --> 00:51:55,140
HTTP pipelining stuff it wouldn't

1430
00:51:55,140 --> 00:51:56,819
surprise me if you could find it but I

1431
00:51:56,819 --> 00:51:58,079
haven't seen it personally most of the

1432
00:51:58,079 --> 00:51:59,520
apis I've dealt with have been pretty

1433
00:51:59,520 --> 00:52:01,500
straightforward they they weren't I

1434
00:52:01,500 --> 00:52:02,700
didn't have to get fancy with them if

1435
00:52:02,700 --> 00:52:03,960
you see what I'm saying

1436
00:52:03,960 --> 00:52:05,640
um I'm really old so remind me of your

1437
00:52:05,640 --> 00:52:08,118
second question

1438
00:52:08,550 --> 00:52:09,780
[Music]

1439
00:52:09,780 --> 00:52:12,300
I was asking about the content plant and

1440
00:52:12,300 --> 00:52:14,880
partial you know uh data that this

1441
00:52:14,880 --> 00:52:17,400
scented encoding yeah checking yeah I

1442
00:52:17,400 --> 00:52:18,780
mean there were certainly lots of web

1443
00:52:18,780 --> 00:52:20,460
attacks like just to guess web servers

1444
00:52:20,460 --> 00:52:21,660
were either that weird chunking where

1445
00:52:21,660 --> 00:52:22,740
you would say I'm going to give you the

1446
00:52:22,740 --> 00:52:24,119
second piece and here's a third piece

1447
00:52:24,119 --> 00:52:25,619
and how's the seventh piece and you just

1448
00:52:25,619 --> 00:52:28,440
like send crazy chunks and confuse web

1449
00:52:28,440 --> 00:52:31,980
servers but generally speaking apis are

1450
00:52:31,980 --> 00:52:34,200
behind some kind of front-end nginx or

1451
00:52:34,200 --> 00:52:35,940
something and that's generally been

1452
00:52:35,940 --> 00:52:38,520
pretty well poked at so it's it I mean

1453
00:52:38,520 --> 00:52:39,599
I'm not saying it's not going to be

1454
00:52:39,599 --> 00:52:41,280
productive but that would be way long on

1455
00:52:41,280 --> 00:52:42,720
my list of like it's Friday and I

1456
00:52:42,720 --> 00:52:43,680
haven't found anything and I'm

1457
00:52:43,680 --> 00:52:45,240
desperately trying to get a finding kind

1458
00:52:45,240 --> 00:52:47,280
of stuff

1459
00:52:47,280 --> 00:52:49,819
oh

1460
00:52:50,579 --> 00:52:52,319
anymore

1461
00:52:52,319 --> 00:52:54,240
last chance

1462
00:52:54,240 --> 00:52:55,980
all right well thank you very much

1463
00:52:55,980 --> 00:53:01,170
[Applause]

