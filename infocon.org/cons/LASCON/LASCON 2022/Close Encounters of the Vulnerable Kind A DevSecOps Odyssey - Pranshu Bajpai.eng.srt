1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:53,780
[Music]

6
00:00:53,780 --> 00:00:56,219
so hello everyone welcome thank you for

7
00:00:56,219 --> 00:00:58,680
coming looks like a full house well

8
00:00:58,680 --> 00:01:01,140
almost well considering it's lunchtime

9
00:01:01,140 --> 00:01:02,760
so thanks for coming it's like people

10
00:01:02,760 --> 00:01:04,500
here at last con really care about

11
00:01:04,500 --> 00:01:07,500
devsecops right but this talk is about

12
00:01:07,500 --> 00:01:09,479
Close Encounters of the vulnerable kind

13
00:01:09,479 --> 00:01:11,100
so basically we want to talk about the

14
00:01:11,100 --> 00:01:12,720
kind of vulnerabilities we see in Dev

15
00:01:12,720 --> 00:01:15,180
Cyclops pipelines so we have these CI CD

16
00:01:15,180 --> 00:01:17,280
pipelines that we use that have

17
00:01:17,280 --> 00:01:18,720
massively increased the attack surface

18
00:01:18,720 --> 00:01:20,880
but we're not so sure if security is

19
00:01:20,880 --> 00:01:22,560
keeping up so

20
00:01:22,560 --> 00:01:24,420
I'll uh give you a little bit of an

21
00:01:24,420 --> 00:01:26,280
introduction I'm a principal security

22
00:01:26,280 --> 00:01:28,320
architect and Motorola Solutions

23
00:01:28,320 --> 00:01:30,840
um before that I completed my PhD at in

24
00:01:30,840 --> 00:01:31,979
computer science at Michigan State

25
00:01:31,979 --> 00:01:34,380
University where the topic of my

26
00:01:34,380 --> 00:01:37,079
research was ransomware and cybercrime I

27
00:01:37,079 --> 00:01:39,299
speak at different conferences and my

28
00:01:39,299 --> 00:01:40,799
research interests and socials are

29
00:01:40,799 --> 00:01:44,340
listed uh here as well so a little bit

30
00:01:44,340 --> 00:01:46,619
about Motorola Solutions very quickly is

31
00:01:46,619 --> 00:01:48,720
because we're in a unique space we're in

32
00:01:48,720 --> 00:01:50,579
the public safety market so if you place

33
00:01:50,579 --> 00:01:52,619
a 911 phone call the call routing

34
00:01:52,619 --> 00:01:55,140
software is Motorola and a few uh you

35
00:01:55,140 --> 00:01:56,700
know what the the call handling software

36
00:01:56,700 --> 00:01:58,740
is Motorola then the fire department

37
00:01:58,740 --> 00:02:00,479
Police Department emergency services

38
00:02:00,479 --> 00:02:02,640
they all use rural Solutions equipment

39
00:02:02,640 --> 00:02:04,380
and software in one way or another so as

40
00:02:04,380 --> 00:02:06,000
you can imagine we are really big on

41
00:02:06,000 --> 00:02:06,960
security because the software

42
00:02:06,960 --> 00:02:09,300
vulnerability in one of our software can

43
00:02:09,300 --> 00:02:12,900
have big impact so that's why we kind of

44
00:02:12,900 --> 00:02:15,180
take a deeper look into what devsecops

45
00:02:15,180 --> 00:02:16,920
is

46
00:02:16,920 --> 00:02:19,739
so uh this is the agenda really quickly

47
00:02:19,739 --> 00:02:22,739
so we'll talk a little bit about uh the

48
00:02:22,739 --> 00:02:24,599
the topic at hand so what is devops and

49
00:02:24,599 --> 00:02:26,060
how does security come into the picture

50
00:02:26,060 --> 00:02:28,200
uh then we'll discuss some of the common

51
00:02:28,200 --> 00:02:31,200
security risks uh that are observed that

52
00:02:31,200 --> 00:02:33,420
we've observed in the devsecops uh

53
00:02:33,420 --> 00:02:35,879
devops environments and a little bit

54
00:02:35,879 --> 00:02:37,860
about the culture as well and then

55
00:02:37,860 --> 00:02:39,300
conclude the talk

56
00:02:39,300 --> 00:02:42,300
so very quickly uh this disclaimer uh

57
00:02:42,300 --> 00:02:44,280
these opinions stated are my own and not

58
00:02:44,280 --> 00:02:46,980
necessarily those of my employer tools

59
00:02:46,980 --> 00:02:48,480
are merely a means to an end so treat

60
00:02:48,480 --> 00:02:50,879
them as such I try to show open source

61
00:02:50,879 --> 00:02:53,459
tools where I can but it's not necessary

62
00:02:53,459 --> 00:02:55,440
that those are the best tools for the

63
00:02:55,440 --> 00:02:56,760
job especially if you're in Enterprise

64
00:02:56,760 --> 00:02:59,099
environments you may need a different

65
00:02:59,099 --> 00:03:03,420
tool set more Enterprise grade solution

66
00:03:03,420 --> 00:03:05,099
all right uh so with that let's get

67
00:03:05,099 --> 00:03:07,800
started with devops so uh modern devops

68
00:03:07,800 --> 00:03:11,040
very quickly what does it look like so

69
00:03:11,040 --> 00:03:14,280
uh a simple example of a pipeline we

70
00:03:14,280 --> 00:03:16,739
have automated testing so a developer

71
00:03:16,739 --> 00:03:19,140
pushes or commits code we have automated

72
00:03:19,140 --> 00:03:21,239
testing that tests that get applied for

73
00:03:21,239 --> 00:03:23,099
functionality to test if the software

74
00:03:23,099 --> 00:03:25,860
functions as expected then there's a

75
00:03:25,860 --> 00:03:28,080
bill that happens then we deploy in test

76
00:03:28,080 --> 00:03:29,700
environments there's some further

77
00:03:29,700 --> 00:03:31,620
functionality tests that happen and then

78
00:03:31,620 --> 00:03:34,560
we deploy it deploy it in production so

79
00:03:34,560 --> 00:03:37,080
the overall chain of events is what we

80
00:03:37,080 --> 00:03:39,659
call the cicd pipeline anybody see

81
00:03:39,659 --> 00:03:43,400
what's wrong with this scenario

82
00:03:44,959 --> 00:03:49,140
no security exactly so you you got it uh

83
00:03:49,140 --> 00:03:51,299
spot on so there's no security because

84
00:03:51,299 --> 00:03:53,340
those test things that those tests that

85
00:03:53,340 --> 00:03:54,599
you see there test for functionality

86
00:03:54,599 --> 00:03:55,860
which makes sense right if you're

87
00:03:55,860 --> 00:03:56,940
building a software you want to make

88
00:03:56,940 --> 00:03:59,519
sure that it it behaves as expected but

89
00:03:59,519 --> 00:04:01,860
what about unexpected behavior when you

90
00:04:01,860 --> 00:04:04,620
provide inputs that are not expected so

91
00:04:04,620 --> 00:04:06,720
there's no security so we try to inject

92
00:04:06,720 --> 00:04:08,819
security into it so how do we do it well

93
00:04:08,819 --> 00:04:11,400
uh we had uh we have a security person

94
00:04:11,400 --> 00:04:13,680
or a security Personnel sitting at the

95
00:04:13,680 --> 00:04:15,480
end of the pipeline and basically

96
00:04:15,480 --> 00:04:17,720
they're doing audits assessments reviews

97
00:04:17,720 --> 00:04:21,358
at the end of it to us to determine if

98
00:04:21,358 --> 00:04:22,800
the security is appropriate there's any

99
00:04:22,800 --> 00:04:24,900
security vulnerabilities then they are

100
00:04:24,900 --> 00:04:27,660
pushed back down the pipeline ends up

101
00:04:27,660 --> 00:04:30,419
back on in the devops cycle uh you know

102
00:04:30,419 --> 00:04:33,180
maybe at the desk of the developer to

103
00:04:33,180 --> 00:04:35,220
address some of those concerns and the

104
00:04:35,220 --> 00:04:37,139
problem with that scenario uh well

105
00:04:37,139 --> 00:04:39,000
there's many problems number one then

106
00:04:39,000 --> 00:04:40,500
you're seen as modif and more of

107
00:04:40,500 --> 00:04:42,060
security scene is more of an impediment

108
00:04:42,060 --> 00:04:43,740
to business rather than helping business

109
00:04:43,740 --> 00:04:44,880
because now

110
00:04:44,880 --> 00:04:47,220
you know all of this work was done and

111
00:04:47,220 --> 00:04:48,360
at the end of it you're telling me that

112
00:04:48,360 --> 00:04:50,220
we need to that this is wrong that is

113
00:04:50,220 --> 00:04:51,840
wrong you you give me a dozens of

114
00:04:51,840 --> 00:04:53,699
vulnerabilities or problems or issues

115
00:04:53,699 --> 00:04:56,460
and I need to go back and fix uh it just

116
00:04:56,460 --> 00:04:58,500
doesn't work that way but then the most

117
00:04:58,500 --> 00:05:01,740
of the time the ratio for uh devops or

118
00:05:01,740 --> 00:05:04,800
developers to security Personnel tends

119
00:05:04,800 --> 00:05:08,220
to be a 100 is to one so we have we

120
00:05:08,220 --> 00:05:09,419
don't have enough security Personnel so

121
00:05:09,419 --> 00:05:11,960
then it becomes like a bottleneck in the

122
00:05:11,960 --> 00:05:14,340
fast-paced devops environment where

123
00:05:14,340 --> 00:05:15,960
we're pushing we're churning software

124
00:05:15,960 --> 00:05:18,240
quickly we're trying to keep up with

125
00:05:18,240 --> 00:05:19,620
this fast-paced world with the security

126
00:05:19,620 --> 00:05:22,320
ends up being a bottleneck so that's not

127
00:05:22,320 --> 00:05:24,960
a good approach so then

128
00:05:24,960 --> 00:05:26,340
um we

129
00:05:26,340 --> 00:05:28,280
moved on to

130
00:05:28,280 --> 00:05:31,199
devsecops so this is where we now are

131
00:05:31,199 --> 00:05:33,900
trying to bring security more to the to

132
00:05:33,900 --> 00:05:36,060
the left so this is called shift left

133
00:05:36,060 --> 00:05:38,220
where uh instead of trying to do

134
00:05:38,220 --> 00:05:39,960
security at the end of it so at the end

135
00:05:39,960 --> 00:05:41,580
of the pipeline we try to inject

136
00:05:41,580 --> 00:05:43,680
security at appropriate points

137
00:05:43,680 --> 00:05:45,960
throughout the pipeline so the idea

138
00:05:45,960 --> 00:05:47,400
being that we still have the same

139
00:05:47,400 --> 00:05:48,900
pipeline we're still building software

140
00:05:48,900 --> 00:05:50,820
but now we have things such as

141
00:05:50,820 --> 00:05:53,340
pre-commit hooks so perhaps we don't

142
00:05:53,340 --> 00:05:55,440
need to wait all the way till the end to

143
00:05:55,440 --> 00:05:56,940
tell a developer that hey you've

144
00:05:56,940 --> 00:05:59,639
accidentally pushed an AWS token or an

145
00:05:59,639 --> 00:06:02,220
API key in your code so maybe you want

146
00:06:02,220 --> 00:06:03,600
to remove that so maybe a pre-commit

147
00:06:03,600 --> 00:06:06,539
hook can do it while very quickly before

148
00:06:06,539 --> 00:06:08,460
you know before the developer has a

149
00:06:08,460 --> 00:06:10,160
chance to push that up the repo

150
00:06:10,160 --> 00:06:12,300
similarly for software composition

151
00:06:12,300 --> 00:06:14,280
analysis SAS and dust and we'll talk

152
00:06:14,280 --> 00:06:15,960
about some of these things in a second

153
00:06:15,960 --> 00:06:20,100
here but the idea is that we've we now

154
00:06:20,100 --> 00:06:22,620
have injected security throughout the

155
00:06:22,620 --> 00:06:24,660
pipeline made it a natural part of the

156
00:06:24,660 --> 00:06:27,720
devops cycle as opposed to forcing it at

157
00:06:27,720 --> 00:06:30,319
the end and then delaying the business

158
00:06:30,319 --> 00:06:33,600
requirements and then other needs that

159
00:06:33,600 --> 00:06:35,160
we have to keep up with the fast-paced

160
00:06:35,160 --> 00:06:37,440
software churnout

161
00:06:37,440 --> 00:06:39,900
all right so this makes a lot more sense

162
00:06:39,900 --> 00:06:42,259
so this is what devsecops is all about

163
00:06:42,259 --> 00:06:44,160
but then

164
00:06:44,160 --> 00:06:46,319
we have certain security risks in our

165
00:06:46,319 --> 00:06:48,479
devops pipeline still with cicd

166
00:06:48,479 --> 00:06:50,160
pipelines being what they are we have a

167
00:06:50,160 --> 00:06:52,500
massive attack surface not to manage and

168
00:06:52,500 --> 00:06:55,380
we don't always keep up so I'll go

169
00:06:55,380 --> 00:06:57,419
through some of the scenarios that we

170
00:06:57,419 --> 00:06:59,880
where we commonly see security risks

171
00:06:59,880 --> 00:07:02,819
occur in cicd pipelines so

172
00:07:02,819 --> 00:07:04,440
one of the first ones that I want to

173
00:07:04,440 --> 00:07:07,020
talk about was dependency management so

174
00:07:07,020 --> 00:07:09,900
I think the best example is what

175
00:07:09,900 --> 00:07:12,780
happened to us uh back in December of

176
00:07:12,780 --> 00:07:14,120
2021

177
00:07:14,120 --> 00:07:17,400
lock 4J lock4 shell hit and now

178
00:07:17,400 --> 00:07:19,440
management asks security teams the same

179
00:07:19,440 --> 00:07:21,120
question no matter the organization

180
00:07:21,120 --> 00:07:24,360
where do we use lock 4J in our software

181
00:07:24,360 --> 00:07:27,599
and are we vulnerable we have to provide

182
00:07:27,599 --> 00:07:29,520
answers to our users to our customers to

183
00:07:29,520 --> 00:07:32,639
different folks and security teams are

184
00:07:32,639 --> 00:07:34,139
running around scrambling trying to find

185
00:07:34,139 --> 00:07:35,460
answer that question because it's not

186
00:07:35,460 --> 00:07:37,380
easy if you're a small startup and you

187
00:07:37,380 --> 00:07:39,419
have limited amount of software maybe

188
00:07:39,419 --> 00:07:41,099
but if you're a large organization

189
00:07:41,099 --> 00:07:43,440
forget about it unless you're doing

190
00:07:43,440 --> 00:07:46,020
s-bomb or SCA really well in what in

191
00:07:46,020 --> 00:07:48,539
which case congratulations but

192
00:07:48,539 --> 00:07:52,979
so we uh it's it's not nothing new

193
00:07:52,979 --> 00:07:54,599
dependencies have always been a security

194
00:07:54,599 --> 00:07:57,419
risk uh however lock 4G did bring lock

195
00:07:57,419 --> 00:07:58,919
for sure did bring it to the Forefront

196
00:07:58,919 --> 00:08:01,139
uh that we need to think about our

197
00:08:01,139 --> 00:08:03,660
dependencies so we have our application

198
00:08:03,660 --> 00:08:06,000
uh which is that an entire big sphere

199
00:08:06,000 --> 00:08:09,300
and then we have uh our code that we

200
00:08:09,300 --> 00:08:11,039
actually write the internal code that we

201
00:08:11,039 --> 00:08:13,139
actually write and manage uh within our

202
00:08:13,139 --> 00:08:15,660
teams or within our organizations and

203
00:08:15,660 --> 00:08:17,639
then so we have this living breathing

204
00:08:17,639 --> 00:08:20,220
sphere this little sphere of code that

205
00:08:20,220 --> 00:08:22,440
we manage we we we're pushing ideally

206
00:08:22,440 --> 00:08:24,240
we're pushing security updates we're

207
00:08:24,240 --> 00:08:27,060
constantly pushing new functionality

208
00:08:27,060 --> 00:08:29,520
um we're managing it uh to according to

209
00:08:29,520 --> 00:08:30,960
the needs of our organization or our

210
00:08:30,960 --> 00:08:33,479
team however what about that all of that

211
00:08:33,479 --> 00:08:34,500
other code that we're bringing in

212
00:08:34,500 --> 00:08:37,500
through third-party libraries so maybe

213
00:08:37,500 --> 00:08:39,958
it's security it's not up to the

214
00:08:39,958 --> 00:08:41,458
security standards of your organization

215
00:08:41,458 --> 00:08:43,860
or it's not up to your needs and

216
00:08:43,860 --> 00:08:46,560
requirements so who's managing that

217
00:08:46,560 --> 00:08:49,440
uh so this is all to say that a lot of

218
00:08:49,440 --> 00:08:51,360
software exists in our application that

219
00:08:51,360 --> 00:08:52,940
is outside of procontrol so

220
00:08:52,940 --> 00:08:54,899
vulnerabilities can trickle down just

221
00:08:54,899 --> 00:08:57,839
like we saw in the case of lock 4J uh to

222
00:08:57,839 --> 00:08:59,459
our application ultimately through these

223
00:08:59,459 --> 00:09:00,899
libraries

224
00:09:00,899 --> 00:09:02,100
um now

225
00:09:02,100 --> 00:09:04,019
SCA can help this is the software

226
00:09:04,019 --> 00:09:05,580
composition analysis where you're trying

227
00:09:05,580 --> 00:09:08,339
to determine just what constitutes your

228
00:09:08,339 --> 00:09:10,500
software it's not just that small sphere

229
00:09:10,500 --> 00:09:12,000
of internal code but what else are you

230
00:09:12,000 --> 00:09:14,880
bringing in along uh with it in the form

231
00:09:14,880 --> 00:09:16,140
of libraries

232
00:09:16,140 --> 00:09:18,779
so uh SCA hunts for vulnerable companies

233
00:09:18,779 --> 00:09:20,339
now there's many tools out there that

234
00:09:20,339 --> 00:09:22,260
allow you to do SCA perform it

235
00:09:22,260 --> 00:09:23,399
effectively

236
00:09:23,399 --> 00:09:25,740
I'll show you some examples

237
00:09:25,740 --> 00:09:28,440
um OS has a dependency Checker that you

238
00:09:28,440 --> 00:09:31,080
can use but since I thought everybody's

239
00:09:31,080 --> 00:09:32,820
perhaps already familiar with that one I

240
00:09:32,820 --> 00:09:34,200
thought I saw I thought I'd show a

241
00:09:34,200 --> 00:09:36,420
different one so the idea is it's all

242
00:09:36,420 --> 00:09:38,399
the all these tools basically should do

243
00:09:38,399 --> 00:09:40,339
the same thing one they should tell you

244
00:09:40,339 --> 00:09:43,080
where what kind of libraries are you

245
00:09:43,080 --> 00:09:45,720
using uh in your application third-party

246
00:09:45,720 --> 00:09:49,140
libraries second what uh versions of

247
00:09:49,140 --> 00:09:51,300
those libraries are you using and third

248
00:09:51,300 --> 00:09:54,240
are those uh applic are those specific

249
00:09:54,240 --> 00:09:57,420
versions vulnerable so if they are uh

250
00:09:57,420 --> 00:10:00,120
then you can go and fix them so fourth

251
00:10:00,120 --> 00:10:02,580
it can also tell you how to mitigate

252
00:10:02,580 --> 00:10:05,279
those detected vulnerabilities so in

253
00:10:05,279 --> 00:10:07,860
this case we have all of these repos and

254
00:10:07,860 --> 00:10:08,700
then

255
00:10:08,700 --> 00:10:11,220
uh the the top vulnerability looks like

256
00:10:11,220 --> 00:10:14,160
two over 200 in that first repo so we

257
00:10:14,160 --> 00:10:15,779
drill down to the details and ideally

258
00:10:15,779 --> 00:10:16,920
you should show us something like this

259
00:10:16,920 --> 00:10:19,019
where we can go down to the individual

260
00:10:19,019 --> 00:10:20,820
repo the vulnerabilities discovered okay

261
00:10:20,820 --> 00:10:22,860
this one looks like it's a big CV with a

262
00:10:22,860 --> 00:10:26,459
CVSs score of 9.8 uh probably should fix

263
00:10:26,459 --> 00:10:29,640
that one and uh so what but how do I do

264
00:10:29,640 --> 00:10:32,580
it so well there's a suggested fix looks

265
00:10:32,580 --> 00:10:34,019
like we're using growl in this case

266
00:10:34,019 --> 00:10:35,519
that's the third party Library which

267
00:10:35,519 --> 00:10:38,880
that specific version has a a weakness

268
00:10:38,880 --> 00:10:41,640
and so it suggests that we upgrade to a

269
00:10:41,640 --> 00:10:43,560
better version where that specific

270
00:10:43,560 --> 00:10:46,200
vulnerability is fixed so in this case

271
00:10:46,200 --> 00:10:48,240
it's a simpler fix in some other cases

272
00:10:48,240 --> 00:10:51,000
it requires some effort but you get the

273
00:10:51,000 --> 00:10:52,440
idea you need to know what libraries

274
00:10:52,440 --> 00:10:54,060
exist what vulnerabilities exist in

275
00:10:54,060 --> 00:10:56,220
those libraries and then how to fix them

276
00:10:56,220 --> 00:10:59,339
so that's the idea of SCA or software

277
00:10:59,339 --> 00:11:01,620
composition analysis next we move on to

278
00:11:01,620 --> 00:11:04,260
static analysis security testing in

279
00:11:04,260 --> 00:11:06,720
short known as SAS

280
00:11:06,720 --> 00:11:09,360
so this is a white box test of your

281
00:11:09,360 --> 00:11:11,220
source code of your internal source code

282
00:11:11,220 --> 00:11:13,560
so then you it's a it's white box

283
00:11:13,560 --> 00:11:16,260
because you have the the application or

284
00:11:16,260 --> 00:11:18,899
this testing tool has the source code

285
00:11:18,899 --> 00:11:21,660
for your application available and it

286
00:11:21,660 --> 00:11:23,579
tries to do analysis structural analysis

287
00:11:23,579 --> 00:11:24,899
there are different kinds of analysis on

288
00:11:24,899 --> 00:11:27,899
the source code to determine if there's

289
00:11:27,899 --> 00:11:29,820
any vulnerabilities

290
00:11:29,820 --> 00:11:32,940
um so it's a good first pass uh to

291
00:11:32,940 --> 00:11:35,820
perform uh obviously it's not perfect uh

292
00:11:35,820 --> 00:11:38,040
because of its nature it's not easy for

293
00:11:38,040 --> 00:11:40,079
a software to analyze another software

294
00:11:40,079 --> 00:11:42,120
code for another software and tell you

295
00:11:42,120 --> 00:11:44,399
if it's vulnerable or not so false

296
00:11:44,399 --> 00:11:46,860
negatives exist some things will skip

297
00:11:46,860 --> 00:11:50,339
past uh the checks and then you need to

298
00:11:50,339 --> 00:11:52,500
perform some security training as part

299
00:11:52,500 --> 00:11:56,100
of how to use the SAS tools but perhaps

300
00:11:56,100 --> 00:11:57,720
the biggest problem with these tend to

301
00:11:57,720 --> 00:12:00,060
be there's a lot of false positives and

302
00:12:00,060 --> 00:12:02,279
uh and there's that leads to alert

303
00:12:02,279 --> 00:12:03,839
critiques so if your developer teams or

304
00:12:03,839 --> 00:12:05,220
devop teams are constantly getting

305
00:12:05,220 --> 00:12:08,459
inundated with these alerts about these

306
00:12:08,459 --> 00:12:10,200
you know supposed security

307
00:12:10,200 --> 00:12:12,180
vulnerabilities they go look at it and

308
00:12:12,180 --> 00:12:13,800
the first dozen of them they're all

309
00:12:13,800 --> 00:12:15,660
false positives and they come back and

310
00:12:15,660 --> 00:12:16,920
tell you well you know what I'm not

311
00:12:16,920 --> 00:12:18,660
going to take a look at it anymore so

312
00:12:18,660 --> 00:12:20,459
they either turn that off or try to

313
00:12:20,459 --> 00:12:23,579
bypass that and therefore then we need

314
00:12:23,579 --> 00:12:25,860
to do some configuration perhaps there's

315
00:12:25,860 --> 00:12:27,899
some tuning that needs to be done or you

316
00:12:27,899 --> 00:12:29,700
need to do things differently depending

317
00:12:29,700 --> 00:12:31,860
on your environment event in order to

318
00:12:31,860 --> 00:12:33,839
best use these tools so

319
00:12:33,839 --> 00:12:37,620
just a a word of caution there so I I

320
00:12:37,620 --> 00:12:39,360
thought I'd show some examples there's

321
00:12:39,360 --> 00:12:41,540
language specific SAS tools you can use

322
00:12:41,540 --> 00:12:44,700
so if you most of your code you write

323
00:12:44,700 --> 00:12:47,100
let's say it's in Python then in that

324
00:12:47,100 --> 00:12:48,959
case there's a this tool called Bandit

325
00:12:48,959 --> 00:12:51,480
out there which loads up that python

326
00:12:51,480 --> 00:12:52,860
script tries to tell you what kind of

327
00:12:52,860 --> 00:12:55,800
vulnerabilities exist in the code in

328
00:12:55,800 --> 00:12:59,420
this case read 12 lines of code found um

329
00:12:59,420 --> 00:13:03,060
one medium uh severity of vulnerability

330
00:13:03,060 --> 00:13:04,620
and it's trying to tell you that it's

331
00:13:04,620 --> 00:13:06,420
it's highly confident that that's a

332
00:13:06,420 --> 00:13:08,880
medium security vulnerability that you

333
00:13:08,880 --> 00:13:11,459
need to go fix so similarly on the on

334
00:13:11,459 --> 00:13:13,260
the right you'll see Breakman that one

335
00:13:13,260 --> 00:13:16,440
exists for Ruby on Rails so uh it has a

336
00:13:16,440 --> 00:13:18,540
similar job that it does it found a

337
00:13:18,540 --> 00:13:21,959
bunch of Cs xss it looks like in this

338
00:13:21,959 --> 00:13:23,339
specific case

339
00:13:23,339 --> 00:13:25,440
and so you get the idea these are

340
00:13:25,440 --> 00:13:28,440
software that analyze other software or

341
00:13:28,440 --> 00:13:30,540
source code for other software and tell

342
00:13:30,540 --> 00:13:33,720
you if it's uh potentially vulnerable so

343
00:13:33,720 --> 00:13:35,279
there's more Enterprise grade SAS

344
00:13:35,279 --> 00:13:36,480
Solutions

345
00:13:36,480 --> 00:13:37,620
um like I said I'd like to show open

346
00:13:37,620 --> 00:13:39,300
source where possible but sometimes

347
00:13:39,300 --> 00:13:40,440
depending on the size of your

348
00:13:40,440 --> 00:13:42,360
organization your team your code base

349
00:13:42,360 --> 00:13:44,120
you may need to move to a Enterprise

350
00:13:44,120 --> 00:13:47,880
grade solution and code ql by GitHub is

351
00:13:47,880 --> 00:13:50,880
a popular one where it becomes a natural

352
00:13:50,880 --> 00:13:53,940
part of your cicd pipeline where you

353
00:13:53,940 --> 00:13:57,240
call that specific code ql action within

354
00:13:57,240 --> 00:13:58,620
the pipeline as you're building the

355
00:13:58,620 --> 00:14:02,459
software and it performs those checks uh

356
00:14:02,459 --> 00:14:04,560
tells you you know in a nice dashboard

357
00:14:04,560 --> 00:14:06,660
that you can log into and view the the

358
00:14:06,660 --> 00:14:09,480
kind of alerts or vulnerabilities that

359
00:14:09,480 --> 00:14:11,160
it found the potential problems and then

360
00:14:11,160 --> 00:14:13,079
you can try to go fix that those

361
00:14:13,079 --> 00:14:14,519
problems

362
00:14:14,519 --> 00:14:16,440
so in this case just showing an example

363
00:14:16,440 --> 00:14:19,620
looks like it found 30 or so alerts and

364
00:14:19,620 --> 00:14:22,260
then within that it was able to find uh

365
00:14:22,260 --> 00:14:24,540
this specific video down the details

366
00:14:24,540 --> 00:14:27,420
this specific xss where

367
00:14:27,420 --> 00:14:29,459
it's trying to show you that you're you

368
00:14:29,459 --> 00:14:31,380
probably need to sanitize your your

369
00:14:31,380 --> 00:14:34,320
input so

370
00:14:34,320 --> 00:14:36,860
um that's an example of the of SAS tools

371
00:14:36,860 --> 00:14:39,360
you can then move on to dast further

372
00:14:39,360 --> 00:14:41,459
down the pipeline so this is a more

373
00:14:41,459 --> 00:14:44,459
holistic review of your application when

374
00:14:44,459 --> 00:14:46,500
it's deployed so that was a static

375
00:14:46,500 --> 00:14:48,600
review of The Source codes it misses the

376
00:14:48,600 --> 00:14:50,160
context and the environment in which

377
00:14:50,160 --> 00:14:51,720
your application may be deployed so in

378
00:14:51,720 --> 00:14:53,600
that case you need to move on to dast

379
00:14:53,600 --> 00:14:56,820
it's a more gray box slash Black Box

380
00:14:56,820 --> 00:14:59,639
approach because in this case source

381
00:14:59,639 --> 00:15:01,260
code is not really available I said

382
00:15:01,260 --> 00:15:03,420
deployed application but it's able to

383
00:15:03,420 --> 00:15:04,500
detect

384
00:15:04,500 --> 00:15:06,540
deployment related security risk that

385
00:15:06,540 --> 00:15:09,000
SAS tools would miss so may require

386
00:15:09,000 --> 00:15:11,279
complex configuration at times I'll show

387
00:15:11,279 --> 00:15:14,459
you why in a second but uh again uh

388
00:15:14,459 --> 00:15:18,600
false negatives exist because uh if if

389
00:15:18,600 --> 00:15:21,240
the application behaves it has a

390
00:15:21,240 --> 00:15:23,339
security vulnerability but an input is

391
00:15:23,339 --> 00:15:26,100
provided to the application and there is

392
00:15:26,100 --> 00:15:29,579
no apparent reaction on although the

393
00:15:29,579 --> 00:15:31,440
vulnerability exists so then in that

394
00:15:31,440 --> 00:15:33,060
case we call those blind bugs and

395
00:15:33,060 --> 00:15:34,380
they're not always detected by these

396
00:15:34,380 --> 00:15:37,320
Dash tools so know the limitations

397
00:15:37,320 --> 00:15:38,100
um

398
00:15:38,100 --> 00:15:41,760
a popular desk tool is burp Suite so

399
00:15:41,760 --> 00:15:43,440
burp Suite X is a proxy in case you

400
00:15:43,440 --> 00:15:45,420
haven't used it it sits between your

401
00:15:45,420 --> 00:15:46,500
browser and the website or the

402
00:15:46,500 --> 00:15:49,079
application you're testing and then you

403
00:15:49,079 --> 00:15:51,300
can stop and interrupt those requests

404
00:15:51,300 --> 00:15:53,639
going in and then manipulate them send

405
00:15:53,639 --> 00:15:55,980
them to various forms of analysis

406
00:15:55,980 --> 00:15:58,320
engines that they have in there on the

407
00:15:58,320 --> 00:15:59,760
right I'm showing an example of one

408
00:15:59,760 --> 00:16:01,740
specific one that I was using not so

409
00:16:01,740 --> 00:16:04,019
long ago where I think I was trying to

410
00:16:04,019 --> 00:16:06,060
set the payload

411
00:16:06,060 --> 00:16:08,639
um uh those are that those that's hex

412
00:16:08,639 --> 00:16:11,040
for dots and I think this is where I'm

413
00:16:11,040 --> 00:16:13,380
trying some kind of path traversal uh

414
00:16:13,380 --> 00:16:16,500
but uh you see in the in the figure uh

415
00:16:16,500 --> 00:16:19,740
on the right down that uh we have a

416
00:16:19,740 --> 00:16:21,180
different error message for one of them

417
00:16:21,180 --> 00:16:24,240
so uh in in security and in programming

418
00:16:24,240 --> 00:16:25,620
we know that a different error message

419
00:16:25,620 --> 00:16:29,040
means success we've made progress so uh

420
00:16:29,040 --> 00:16:31,740
404 for a lot of them didn't work

421
00:16:31,740 --> 00:16:34,019
um not found 501 for for one of these

422
00:16:34,019 --> 00:16:35,699
other ones and it gives me an error

423
00:16:35,699 --> 00:16:37,380
message which tells me that okay well it

424
00:16:37,380 --> 00:16:38,639
looks like a ruby application so again

425
00:16:38,639 --> 00:16:39,899
it's a black box text so I don't know

426
00:16:39,899 --> 00:16:41,579
what what exists on the server and how

427
00:16:41,579 --> 00:16:43,560
it's behaving but it's all it's all

428
00:16:43,560 --> 00:16:45,480
relevant so but you can imagine how

429
00:16:45,480 --> 00:16:47,040
doing all of this so this is the manual

430
00:16:47,040 --> 00:16:49,320
side of it you can do a lot of uh you

431
00:16:49,320 --> 00:16:51,120
can go very Advanced with it but on the

432
00:16:51,120 --> 00:16:53,459
other hand is also automated uh dast

433
00:16:53,459 --> 00:16:55,620
solutions that are

434
00:16:55,620 --> 00:16:58,320
part of Barb sweet where you can perform

435
00:16:58,320 --> 00:17:00,000
more automated analysis it depends the

436
00:17:00,000 --> 00:17:01,860
kind of resources you have at your

437
00:17:01,860 --> 00:17:03,839
disposal

438
00:17:03,839 --> 00:17:08,520
another tool would be OS zap and other

439
00:17:08,520 --> 00:17:10,859
popular tool out there

440
00:17:10,859 --> 00:17:11,760
um

441
00:17:11,760 --> 00:17:13,919
similar to burp Suite provides you an

442
00:17:13,919 --> 00:17:15,900
option to do automated scanning and

443
00:17:15,900 --> 00:17:17,419
manual exploration

444
00:17:17,419 --> 00:17:19,980
has a lot of add-ons that you can

445
00:17:19,980 --> 00:17:22,559
install from the marketplace depending

446
00:17:22,559 --> 00:17:24,299
on the kind of needs for what you want

447
00:17:24,299 --> 00:17:26,760
to detect how you want to identify the

448
00:17:26,760 --> 00:17:29,280
vulnerabilities again all of that is as

449
00:17:29,280 --> 00:17:30,540
you can imagine there's a lot of

450
00:17:30,540 --> 00:17:31,740
customization required that I was

451
00:17:31,740 --> 00:17:33,840
talking about earlier where you need to

452
00:17:33,840 --> 00:17:35,600
set things up there is no

453
00:17:35,600 --> 00:17:38,340
one-size-fits-all solution it depends on

454
00:17:38,340 --> 00:17:40,500
the needs of your organization your team

455
00:17:40,500 --> 00:17:42,840
how much time you have and how much

456
00:17:42,840 --> 00:17:44,940
detail you want to go into so

457
00:17:44,940 --> 00:17:47,280
uh can this can very easily turn into a

458
00:17:47,280 --> 00:17:49,380
full-blown pen test so many times pen

459
00:17:49,380 --> 00:17:52,080
testers use uh OS zap and burp Suite

460
00:17:52,080 --> 00:17:54,419
kind of tools anyway so

461
00:17:54,419 --> 00:17:55,620
um

462
00:17:55,620 --> 00:17:58,200
all right so with that um let's move on

463
00:17:58,200 --> 00:18:01,140
to IAC security so IEC is uh

464
00:18:01,140 --> 00:18:04,020
infrastructure as code it makes sense

465
00:18:04,020 --> 00:18:07,020
for us to have a a consistent and

466
00:18:07,020 --> 00:18:08,340
reliable form of bringing up

467
00:18:08,340 --> 00:18:12,000
infrastructure every time we are uh we

468
00:18:12,000 --> 00:18:15,179
are deploying the infrastructure so uh

469
00:18:15,179 --> 00:18:17,460
these these men you may know them in the

470
00:18:17,460 --> 00:18:19,679
form of yaml files that you may have uh

471
00:18:19,679 --> 00:18:21,179
where you have those Specific

472
00:18:21,179 --> 00:18:24,240
Instructions uh in a script which tells

473
00:18:24,240 --> 00:18:26,580
uh you know a particular engine how to

474
00:18:26,580 --> 00:18:27,900
bring up the infrastructure what kind of

475
00:18:27,900 --> 00:18:29,039
servers what kind of configuration

476
00:18:29,039 --> 00:18:32,640
networking do you need and then um yeah

477
00:18:32,640 --> 00:18:34,260
you push that up the repo as well

478
00:18:34,260 --> 00:18:36,000
probably somewhere so these are also

479
00:18:36,000 --> 00:18:39,120
version controlled uh however because of

480
00:18:39,120 --> 00:18:40,860
all of that you also need to manage the

481
00:18:40,860 --> 00:18:43,740
risk that goes along with it so consider

482
00:18:43,740 --> 00:18:45,120
the scenario where you're pushing up

483
00:18:45,120 --> 00:18:49,860
this uh this IAC yaml file uh upper repo

484
00:18:49,860 --> 00:18:52,260
but then a lot of people have access to

485
00:18:52,260 --> 00:18:54,780
view the repo or manipulate the repo or

486
00:18:54,780 --> 00:18:56,460
edit the repo so then that's not good

487
00:18:56,460 --> 00:18:58,380
because you don't want random folks

488
00:18:58,380 --> 00:19:01,140
coming in there and Performing attacks

489
00:19:01,140 --> 00:19:04,919
based on manipulating the these IAC yaml

490
00:19:04,919 --> 00:19:06,840
files where for instance they may inject

491
00:19:06,840 --> 00:19:08,700
malicious commands in there that get

492
00:19:08,700 --> 00:19:10,980
executed as part of the build pro when

493
00:19:10,980 --> 00:19:13,200
the build infrastructure is spun up and

494
00:19:13,200 --> 00:19:14,940
then they can be used for all kinds of

495
00:19:14,940 --> 00:19:17,220
Nefarious purposes like secret stealing

496
00:19:17,220 --> 00:19:20,460
and and so on so we have examples uh out

497
00:19:20,460 --> 00:19:23,640
there in the in in the public cases for

498
00:19:23,640 --> 00:19:25,740
all of these kind of activities by the

499
00:19:25,740 --> 00:19:26,900
way

500
00:19:26,900 --> 00:19:30,240
so the idea was that it would be as easy

501
00:19:30,240 --> 00:19:32,039
as push button and receive bacon but we

502
00:19:32,039 --> 00:19:34,080
are online it and security nothing is

503
00:19:34,080 --> 00:19:36,539
that straightforward so the attack

504
00:19:36,539 --> 00:19:37,980
surface has massively increased

505
00:19:37,980 --> 00:19:39,140
especially when you throw in

506
00:19:39,140 --> 00:19:41,580
container-based environments such as a

507
00:19:41,580 --> 00:19:43,799
kubernetes cluster you know I I read

508
00:19:43,799 --> 00:19:46,320
this joke recently where uh where we

509
00:19:46,320 --> 00:19:48,120
where they're talking about how what

510
00:19:48,120 --> 00:19:50,760
gives people feelings of power it's not

511
00:19:50,760 --> 00:19:53,039
money it's not status it's running your

512
00:19:53,039 --> 00:19:54,960
own kubernetes cluster

513
00:19:54,960 --> 00:19:58,260
so uh believe it or not I've seen cases

514
00:19:58,260 --> 00:20:00,360
where there was there was no need for a

515
00:20:00,360 --> 00:20:01,860
kubernetes cluster but there was a

516
00:20:01,860 --> 00:20:04,200
kubernetes cluster and the people were

517
00:20:04,200 --> 00:20:07,140
adamant about maintaining that so uh

518
00:20:07,140 --> 00:20:09,240
that's that's okay I guess but then we

519
00:20:09,240 --> 00:20:10,380
need to manage security around it

520
00:20:10,380 --> 00:20:12,059
there's so much attack surface in those

521
00:20:12,059 --> 00:20:13,679
things because they're complex the way

522
00:20:13,679 --> 00:20:15,299
they run they're not well understood

523
00:20:15,299 --> 00:20:17,220
that means there's a lot of potential

524
00:20:17,220 --> 00:20:20,700
for security vulnerabilities

525
00:20:21,360 --> 00:20:23,220
um there's a secret management as well

526
00:20:23,220 --> 00:20:26,160
these these CI CD pipelines they have a

527
00:20:26,160 --> 00:20:28,559
lot of components that inter interact

528
00:20:28,559 --> 00:20:30,960
with one another and as part of that

529
00:20:30,960 --> 00:20:32,760
interaction they need to authorize and

530
00:20:32,760 --> 00:20:35,400
authenticate to one another as part of

531
00:20:35,400 --> 00:20:37,860
that authentication uh they need to grab

532
00:20:37,860 --> 00:20:39,960
a secret that's probably lying somewhere

533
00:20:39,960 --> 00:20:42,240
and needs to grab it present it to the

534
00:20:42,240 --> 00:20:45,419
component and go forward so

535
00:20:45,419 --> 00:20:47,100
where do they see where do we keep these

536
00:20:47,100 --> 00:20:49,799
secrets uh we can I've seen all kinds of

537
00:20:49,799 --> 00:20:52,140
uh insecure or vulnerable practices push

538
00:20:52,140 --> 00:20:54,960
it up a repo now it's exposed there or

539
00:20:54,960 --> 00:20:56,700
somebody while doing some testing in the

540
00:20:56,700 --> 00:20:59,640
cicd pipeline had a display in in

541
00:20:59,640 --> 00:21:01,260
console logs and they never took it off

542
00:21:01,260 --> 00:21:02,820
after the testing was complete and so

543
00:21:02,820 --> 00:21:04,740
now it's displayed in the console logs

544
00:21:04,740 --> 00:21:07,500
every time so all kinds of things

545
00:21:07,500 --> 00:21:10,200
um basic key hygiene that we use for

546
00:21:10,200 --> 00:21:12,299
private keys and secrets we need to do

547
00:21:12,299 --> 00:21:14,880
it in in the pipeline as well so perhaps

548
00:21:14,880 --> 00:21:16,620
it's a better idea that if you're if you

549
00:21:16,620 --> 00:21:18,000
have a secret that you're grabbing that

550
00:21:18,000 --> 00:21:19,980
you need to grab to authenticate where

551
00:21:19,980 --> 00:21:21,900
one system or one component in the

552
00:21:21,900 --> 00:21:22,919
pipeline authenticates to another

553
00:21:22,919 --> 00:21:24,900
perhaps we need to store that secret in

554
00:21:24,900 --> 00:21:27,360
a key Vault or an equivalent solution

555
00:21:27,360 --> 00:21:28,860
and then use a reference string that

556
00:21:28,860 --> 00:21:30,659
goes and grabs it every time instead of

557
00:21:30,659 --> 00:21:32,580
putting the secret directly exposed in

558
00:21:32,580 --> 00:21:34,200
in one of the configurations there which

559
00:21:34,200 --> 00:21:36,659
somebody can easily read so

560
00:21:36,659 --> 00:21:39,539
you you would think that by now we would

561
00:21:39,539 --> 00:21:41,220
we have figured these things out but we

562
00:21:41,220 --> 00:21:43,200
haven't because a lot of the times in

563
00:21:43,200 --> 00:21:45,659
practice these vulnerabilities exist and

564
00:21:45,659 --> 00:21:48,720
these are real problems so repeatedly we

565
00:21:48,720 --> 00:21:50,520
come across cases where this is being

566
00:21:50,520 --> 00:21:52,980
done so

567
00:21:52,980 --> 00:21:54,299
um Secrets management is another

568
00:21:54,299 --> 00:21:58,020
important attack Vector Now secrets can

569
00:21:58,020 --> 00:21:59,760
be uh in the you know I was talking

570
00:21:59,760 --> 00:22:00,900
about the scenario where secrets are

571
00:22:00,900 --> 00:22:02,760
further down the pipeline but sometimes

572
00:22:02,760 --> 00:22:05,340
and a developer might accidentally push

573
00:22:05,340 --> 00:22:09,539
Secrets up uh the the repo right it's in

574
00:22:09,539 --> 00:22:10,980
the it's in the source code somewhere

575
00:22:10,980 --> 00:22:13,740
maybe they they included an AWS API key

576
00:22:13,740 --> 00:22:15,480
or something and then they're trying to

577
00:22:15,480 --> 00:22:17,580
push that up the repo so then you know

578
00:22:17,580 --> 00:22:19,200
you can have pre-commit hooks or

579
00:22:19,200 --> 00:22:21,179
something that that detects those

580
00:22:21,179 --> 00:22:23,039
Secrets or tries to detect those secrets

581
00:22:23,039 --> 00:22:26,220
and fails uh uh with them with the

582
00:22:26,220 --> 00:22:27,900
message telling the developer that

583
00:22:27,900 --> 00:22:30,179
perhaps you shouldn't try to do this so

584
00:22:30,179 --> 00:22:32,760
in those kind of scenarios

585
00:22:32,760 --> 00:22:35,220
uh what becomes important is I found

586
00:22:35,220 --> 00:22:39,539
that tools often are not well equipped

587
00:22:39,539 --> 00:22:41,100
to detect different kinds of secrets

588
00:22:41,100 --> 00:22:42,780
that exist Secrets come in all sizes

589
00:22:42,780 --> 00:22:45,840
shapes forms and the tools are trying to

590
00:22:45,840 --> 00:22:47,580
play catch-up because

591
00:22:47,580 --> 00:22:49,679
you know it depends on the kind of uh

592
00:22:49,679 --> 00:22:51,480
regular Expressions you have as part of

593
00:22:51,480 --> 00:22:53,760
that tool that are trying to do pattern

594
00:22:53,760 --> 00:22:55,260
matching based on different kinds of

595
00:22:55,260 --> 00:22:58,919
Secrets formats and so um

596
00:22:58,919 --> 00:23:02,039
but but that's uh that's besides the

597
00:23:02,039 --> 00:23:03,659
point you should still use these kind of

598
00:23:03,659 --> 00:23:05,880
pre-commits hooks to discover secrets so

599
00:23:05,880 --> 00:23:10,020
two of the examples that I I like to use

600
00:23:10,020 --> 00:23:13,559
uh get leaks is a good one has uh

601
00:23:13,559 --> 00:23:15,720
different kinds of rules for different

602
00:23:15,720 --> 00:23:17,340
kinds of secrets that it tries to detect

603
00:23:17,340 --> 00:23:20,240
so in this case uh it was triggered on

604
00:23:20,240 --> 00:23:23,880
AWS access token that's the rule ID and

605
00:23:23,880 --> 00:23:26,400
it it found uh what potentially looks

606
00:23:26,400 --> 00:23:30,900
like a a an AWS access token and so

607
00:23:30,900 --> 00:23:33,419
will fail with the message that well

608
00:23:33,419 --> 00:23:35,100
perhaps you should rethink what you're

609
00:23:35,100 --> 00:23:36,419
doing because it looks like you're

610
00:23:36,419 --> 00:23:39,000
trying to push a secret uh same for

611
00:23:39,000 --> 00:23:40,679
Talisman just a different tool for the

612
00:23:40,679 --> 00:23:42,539
same with the same purpose in this case

613
00:23:42,539 --> 00:23:44,340
it it triggered two rules when somebody

614
00:23:44,340 --> 00:23:46,260
tried to try to push this specific file

615
00:23:46,260 --> 00:23:48,659
looks like the the name of the file is a

616
00:23:48,659 --> 00:23:50,640
DOT pem so that's probably a certificate

617
00:23:50,640 --> 00:23:52,260
with a private key in there so shouldn't

618
00:23:52,260 --> 00:23:55,080
push that a second rule that got hit was

619
00:23:55,080 --> 00:23:56,880
um it also looks like the content has a

620
00:23:56,880 --> 00:23:59,760
AWS secret key in there so

621
00:23:59,760 --> 00:24:02,820
uh try to do these things earlier in the

622
00:24:02,820 --> 00:24:04,860
pipeline again because of the reasons we

623
00:24:04,860 --> 00:24:06,780
discussed shift security left so it's

624
00:24:06,780 --> 00:24:09,299
it's quicker to resolve for for devops

625
00:24:09,299 --> 00:24:13,940
or or developers than than later

626
00:24:14,220 --> 00:24:16,140
uh let's talk about build systems now

627
00:24:16,140 --> 00:24:17,580
this is very interesting because build

628
00:24:17,580 --> 00:24:20,640
systems are trusted in the cicd pipeline

629
00:24:20,640 --> 00:24:23,039
they're trusted in that chain of events

630
00:24:23,039 --> 00:24:25,380
that gets triggered when a workflow run

631
00:24:25,380 --> 00:24:28,980
is hit when you push a new uh software

632
00:24:28,980 --> 00:24:32,220
change or software modification so

633
00:24:32,220 --> 00:24:33,720
it's important to understand the

634
00:24:33,720 --> 00:24:35,039
difference between ephemeral and

635
00:24:35,039 --> 00:24:37,679
persistent build systems so you have

636
00:24:37,679 --> 00:24:39,720
ephemeral systems where build systems

637
00:24:39,720 --> 00:24:41,520
where you have basically have well let's

638
00:24:41,520 --> 00:24:43,020
talk about persistent first so

639
00:24:43,020 --> 00:24:45,419
persistent systems classically there's a

640
00:24:45,419 --> 00:24:46,799
build server that's sitting somewhere

641
00:24:46,799 --> 00:24:49,980
and its entire job is to sit and always

642
00:24:49,980 --> 00:24:52,200
listen for a build job that comes in if

643
00:24:52,200 --> 00:24:54,600
job comes in it will build the software

644
00:24:54,600 --> 00:24:57,900
as part of the pipeline and then it'll

645
00:24:57,900 --> 00:24:58,679
wait

646
00:24:58,679 --> 00:25:01,200
keep listening it's always up it's it's

647
00:25:01,200 --> 00:25:03,299
like it's a server so these are

648
00:25:03,299 --> 00:25:05,940
persistent servers uh Jenkins is a is a

649
00:25:05,940 --> 00:25:08,520
good example allows you to to install

650
00:25:08,520 --> 00:25:11,520
all kinds of third-party extensions uh

651
00:25:11,520 --> 00:25:13,860
not all of those are secure so there's a

652
00:25:13,860 --> 00:25:15,900
lot of problems with it um

653
00:25:15,900 --> 00:25:18,179
which we need to be aware of so an

654
00:25:18,179 --> 00:25:19,980
adversary can establish persistent on a

655
00:25:19,980 --> 00:25:21,600
persistent Bill server we'll see an

656
00:25:21,600 --> 00:25:24,600
example in a second uh ephemeral by

657
00:25:24,600 --> 00:25:27,559
comparison they're they're more uh

658
00:25:27,559 --> 00:25:30,000
there's a Time component to them so they

659
00:25:30,000 --> 00:25:31,260
they get triggered as part of the

660
00:25:31,260 --> 00:25:33,900
workflow run so uh they so if you've

661
00:25:33,900 --> 00:25:36,299
used GitHub actions for example and you

662
00:25:36,299 --> 00:25:37,980
have that as part of the cicd pipeline

663
00:25:37,980 --> 00:25:40,320
it spins up a container based build

664
00:25:40,320 --> 00:25:43,500
environment which uh gets triggered or

665
00:25:43,500 --> 00:25:45,900
gets built when when your workflow is

666
00:25:45,900 --> 00:25:48,240
triggered and then when you have that

667
00:25:48,240 --> 00:25:49,860
environment the software is built in

668
00:25:49,860 --> 00:25:52,500
there but then after it after you're

669
00:25:52,500 --> 00:25:55,020
done proof the container goes away so

670
00:25:55,020 --> 00:25:58,140
that seems a better approach in certain

671
00:25:58,140 --> 00:25:59,940
situations where you don't need a

672
00:25:59,940 --> 00:26:01,980
persistent build server because that

673
00:26:01,980 --> 00:26:04,140
means now you have this container coming

674
00:26:04,140 --> 00:26:08,760
up building then going away so

675
00:26:08,760 --> 00:26:10,080
um that's the difference between between

676
00:26:10,080 --> 00:26:12,480
the two

677
00:26:12,480 --> 00:26:14,039
follow the pro uh you know it's

678
00:26:14,039 --> 00:26:15,360
important if you have a persistent build

679
00:26:15,360 --> 00:26:17,640
server it's important to do

680
00:26:17,640 --> 00:26:19,559
um patch Management on the server and

681
00:26:19,559 --> 00:26:22,320
hardening uh don't and and also follow

682
00:26:22,320 --> 00:26:24,240
the principle of lease privileges if

683
00:26:24,240 --> 00:26:25,919
there's 20 developers or 12 developers

684
00:26:25,919 --> 00:26:27,840
on the team perhaps not everybody needs

685
00:26:27,840 --> 00:26:30,419
admin access to the bill server uh not

686
00:26:30,419 --> 00:26:31,679
because we don't trust our developers

687
00:26:31,679 --> 00:26:33,779
but because if one of the developer

688
00:26:33,779 --> 00:26:35,820
credentials get compromised and attacker

689
00:26:35,820 --> 00:26:38,159
use that access that admin access to

690
00:26:38,159 --> 00:26:39,299
build server to do all kinds of

691
00:26:39,299 --> 00:26:42,720
Nefarious things so an example is that

692
00:26:42,720 --> 00:26:44,279
the sword bones solarwinds attack

693
00:26:44,279 --> 00:26:48,059
scenario so I've simplified the the cicd

694
00:26:48,059 --> 00:26:49,620
pipeline here with just three components

695
00:26:49,620 --> 00:26:51,840
we have the we have the developer doing

696
00:26:51,840 --> 00:26:53,700
a pushing the software up and then these

697
00:26:53,700 --> 00:26:55,860
three components get hit the the testing

698
00:26:55,860 --> 00:26:57,779
is performed Let me build the software

699
00:26:57,779 --> 00:26:59,220
and then we deploy the software it's

700
00:26:59,220 --> 00:27:02,220
pretty straightforward so

701
00:27:02,220 --> 00:27:04,559
now the interesting that happened uh

702
00:27:04,559 --> 00:27:07,020
with solarwinds was

703
00:27:07,020 --> 00:27:09,419
uh an attacker was able to compromise

704
00:27:09,419 --> 00:27:12,000
the build server so now that's a trusted

705
00:27:12,000 --> 00:27:14,580
part of the CI CD pipeline

706
00:27:14,580 --> 00:27:17,100
um how that compromise happened and how

707
00:27:17,100 --> 00:27:18,720
they were able to gain access to the

708
00:27:18,720 --> 00:27:20,460
bill Server doesn't matter because we

709
00:27:20,460 --> 00:27:21,659
know there's dozens and dozens of attack

710
00:27:21,659 --> 00:27:24,419
vectors and build servers just like any

711
00:27:24,419 --> 00:27:25,919
other system have weaknesses and

712
00:27:25,919 --> 00:27:27,000
vulnerabilities

713
00:27:27,000 --> 00:27:28,620
uh which is why it's important to pass

714
00:27:28,620 --> 00:27:30,600
them and Harden them but anyway so this

715
00:27:30,600 --> 00:27:32,460
the attacker is on the build server so

716
00:27:32,460 --> 00:27:34,919
now we have uh an attacker sitting there

717
00:27:34,919 --> 00:27:36,179
on the build server while your software

718
00:27:36,179 --> 00:27:38,520
is getting built and uh and the

719
00:27:38,520 --> 00:27:40,140
basically the the malware that they

720
00:27:40,140 --> 00:27:42,059
wrote was uh for this purpose was

721
00:27:42,059 --> 00:27:44,700
Sunspot now in the media there was a lot

722
00:27:44,700 --> 00:27:46,559
of attention so solarwinds got a lot of

723
00:27:46,559 --> 00:27:48,900
attention in the media rightly so but we

724
00:27:48,900 --> 00:27:51,059
all focused on Sunburst which is the

725
00:27:51,059 --> 00:27:53,520
malware that was pushed on endpoints but

726
00:27:53,520 --> 00:27:55,500
Sunspot was the malware that was pushed

727
00:27:55,500 --> 00:27:56,820
on the bill server and that's where the

728
00:27:56,820 --> 00:27:59,100
attack originated so what Sunspot did

729
00:27:59,100 --> 00:28:01,020
was it sat on the bill server

730
00:28:01,020 --> 00:28:04,860
and looked for uh you know a process

731
00:28:04,860 --> 00:28:07,020
called msbill.exe it's a it's a process

732
00:28:07,020 --> 00:28:08,400
it's a build process as you can imagine

733
00:28:08,400 --> 00:28:11,159
pertaining to visual code uh Visual

734
00:28:11,159 --> 00:28:12,000
Studio

735
00:28:12,000 --> 00:28:14,640
and then if if the process is running so

736
00:28:14,640 --> 00:28:18,120
how I determined that was uh it had a it

737
00:28:18,120 --> 00:28:21,059
had a hash algorithm called elf hash and

738
00:28:21,059 --> 00:28:23,640
it took the name of each process uh

739
00:28:23,640 --> 00:28:25,380
hashed it and then checked it against a

740
00:28:25,380 --> 00:28:27,059
specific hash that was hard-coded in

741
00:28:27,059 --> 00:28:29,520
their binary and and saw if uh that if

742
00:28:29,520 --> 00:28:31,860
it matched if it did then it's uh they

743
00:28:31,860 --> 00:28:33,120
know that Ms build is running so

744
00:28:33,120 --> 00:28:34,559
something is some kind of software is

745
00:28:34,559 --> 00:28:37,080
getting built so when some kind of

746
00:28:37,080 --> 00:28:38,340
software is getting built what kind of

747
00:28:38,340 --> 00:28:39,600
software is it so they were interested

748
00:28:39,600 --> 00:28:42,419
in specifically Orion so is Orion being

749
00:28:42,419 --> 00:28:44,279
built uh if it is

750
00:28:44,279 --> 00:28:46,260
then extract the command line arguments

751
00:28:46,260 --> 00:28:50,100
from that msbill.exe so now you extract

752
00:28:50,100 --> 00:28:51,720
the command line arguments now break

753
00:28:51,720 --> 00:28:53,640
that down and extract the directory path

754
00:28:53,640 --> 00:28:55,080
of this software that they're interested

755
00:28:55,080 --> 00:28:57,240
in Orion because they don't know where

756
00:28:57,240 --> 00:28:59,760
the uh where in the file structure that

757
00:28:59,760 --> 00:29:01,500
software lies so they extract that

758
00:29:01,500 --> 00:29:04,500
directory path and they are able to now

759
00:29:04,500 --> 00:29:07,559
what they are interested in doing is go

760
00:29:07,559 --> 00:29:09,179
into that directory path or that file

761
00:29:09,179 --> 00:29:11,640
structure and then replacing our source

762
00:29:11,640 --> 00:29:12,860
code file

763
00:29:12,860 --> 00:29:16,140
where they perform checks on their end

764
00:29:16,140 --> 00:29:20,700
where they've replaced or added

765
00:29:20,700 --> 00:29:24,059
malicious lines of code in addition to

766
00:29:24,059 --> 00:29:25,679
that source code file

767
00:29:25,679 --> 00:29:28,080
and uh they have checked it on their end

768
00:29:28,080 --> 00:29:29,820
they perform all the validations checks

769
00:29:29,820 --> 00:29:32,100
because if if uh for some reason they

770
00:29:32,100 --> 00:29:33,899
trigger an alert on your end if

771
00:29:33,899 --> 00:29:35,520
something breaks you're you're going to

772
00:29:35,520 --> 00:29:36,779
take a look and then they might get

773
00:29:36,779 --> 00:29:38,159
discovered so they did all kinds of

774
00:29:38,159 --> 00:29:40,320
checks to make sure that everything is

775
00:29:40,320 --> 00:29:43,140
valid and it will run and will build and

776
00:29:43,140 --> 00:29:45,000
then that's how like they transparently

777
00:29:45,000 --> 00:29:47,279
injected malicious lines in the build

778
00:29:47,279 --> 00:29:50,220
process is part of the build server

779
00:29:50,220 --> 00:29:50,880
um

780
00:29:50,880 --> 00:29:53,520
and now because the bill server is part

781
00:29:53,520 --> 00:29:58,020
a trusted part of the pipeline we have

782
00:29:58,020 --> 00:29:59,760
further down the pipeline a co-signing

783
00:29:59,760 --> 00:30:01,860
task that is basically stamping all

784
00:30:01,860 --> 00:30:03,840
software that is being built by that

785
00:30:03,840 --> 00:30:05,340
bill server

786
00:30:05,340 --> 00:30:07,860
um and uh so now the malicious lines of

787
00:30:07,860 --> 00:30:10,200
code just travel down the pipeline gets

788
00:30:10,200 --> 00:30:12,539
stamped with that code signing action

789
00:30:12,539 --> 00:30:13,799
um assuming that whatever the bill

790
00:30:13,799 --> 00:30:15,779
server is providing me is authentic

791
00:30:15,779 --> 00:30:17,640
and now it's that's approved and that

792
00:30:17,640 --> 00:30:19,919
gets deployed and that's how we got

793
00:30:19,919 --> 00:30:21,779
malicious software deployed at endpoints

794
00:30:21,779 --> 00:30:23,340
it's got the certificate and everything

795
00:30:23,340 --> 00:30:25,320
checks out it's all code signed and

796
00:30:25,320 --> 00:30:27,120
everything so these are the kind of

797
00:30:27,120 --> 00:30:29,340
scenarios which we need to think about

798
00:30:29,340 --> 00:30:32,760
um as part of the cicd complexity today

799
00:30:32,760 --> 00:30:34,860
where we have these build servers that

800
00:30:34,860 --> 00:30:36,419
are trusted in the pipeline but then

801
00:30:36,419 --> 00:30:38,220
there's no additional checks being

802
00:30:38,220 --> 00:30:39,960
performed before we do any kind of code

803
00:30:39,960 --> 00:30:42,179
stamping or co-signing we are not

804
00:30:42,179 --> 00:30:44,159
hardening the servers perhaps as as well

805
00:30:44,159 --> 00:30:45,779
as we should perhaps we don't need

806
00:30:45,779 --> 00:30:47,460
persistent service and an ephemeral

807
00:30:47,460 --> 00:30:51,320
build server would do

808
00:30:51,899 --> 00:30:53,580
um further let's talk about access

809
00:30:53,580 --> 00:30:56,220
control Access Control exists everywhere

810
00:30:56,220 --> 00:30:57,799
so I won't spend a lot of time on this

811
00:30:57,799 --> 00:31:00,360
except that it applies to a CI CD as

812
00:31:00,360 --> 00:31:01,080
well

813
00:31:01,080 --> 00:31:04,380
um it's it's a natural part of cicd

814
00:31:04,380 --> 00:31:06,240
because we've seen cases where they're

815
00:31:06,240 --> 00:31:09,059
overreaching permissions so not

816
00:31:09,059 --> 00:31:10,740
everybody needs to have admin access to

817
00:31:10,740 --> 00:31:13,740
every component of the CI CD pipeline

818
00:31:13,740 --> 00:31:16,799
um not and then if there's somebody who

819
00:31:16,799 --> 00:31:18,960
leaves the team today and joins another

820
00:31:18,960 --> 00:31:20,340
team perhaps in the same organization

821
00:31:20,340 --> 00:31:21,899
but did they joined another product team

822
00:31:21,899 --> 00:31:23,460
they no longer have a need to touch this

823
00:31:23,460 --> 00:31:24,659
repo

824
00:31:24,659 --> 00:31:27,600
remove that that scale access uh you

825
00:31:27,600 --> 00:31:29,159
don't still need that access because

826
00:31:29,159 --> 00:31:31,679
then over time somebody can keeps

827
00:31:31,679 --> 00:31:32,880
collecting permissions in your

828
00:31:32,880 --> 00:31:34,740
organization if their credentials are

829
00:31:34,740 --> 00:31:37,500
compromised uh in the future you have

830
00:31:37,500 --> 00:31:39,000
all kinds of problems because they had

831
00:31:39,000 --> 00:31:41,340
access to everything uh so please remove

832
00:31:41,340 --> 00:31:43,440
lingering still accounts

833
00:31:43,440 --> 00:31:43,980
um

834
00:31:43,980 --> 00:31:45,840
there's local accounts being created

835
00:31:45,840 --> 00:31:47,940
outside the scope of the policies that

836
00:31:47,940 --> 00:31:49,440
enforce security practices in the

837
00:31:49,440 --> 00:31:51,179
pipeline this is more of a culture thing

838
00:31:51,179 --> 00:31:53,340
where I think we need to have a

839
00:31:53,340 --> 00:31:55,380
conversation sometimes to make folks

840
00:31:55,380 --> 00:31:57,899
aware nobody tries to create security

841
00:31:57,899 --> 00:32:00,779
problems on purpose it's more like we

842
00:32:00,779 --> 00:32:02,580
need to have a conversation sometimes to

843
00:32:02,580 --> 00:32:04,919
make folks understand just what the uh

844
00:32:04,919 --> 00:32:07,740
the effect of that action could be and

845
00:32:07,740 --> 00:32:10,380
peer review all changes so anything in

846
00:32:10,380 --> 00:32:12,059
the pipeline that is being changed or

847
00:32:12,059 --> 00:32:13,740
any software that is being pushed up a

848
00:32:13,740 --> 00:32:16,860
repo it's important to

849
00:32:16,860 --> 00:32:19,200
make sure that somebody and maybe an

850
00:32:19,200 --> 00:32:21,539
adjacent team member is peer reviewing

851
00:32:21,539 --> 00:32:23,279
it sometimes two peer reviewers are good

852
00:32:23,279 --> 00:32:25,620
sometimes one depends on the context in

853
00:32:25,620 --> 00:32:27,779
your environment but don't just let

854
00:32:27,779 --> 00:32:30,659
folks push up changes and gets

855
00:32:30,659 --> 00:32:33,179
integrated and merge immediately this is

856
00:32:33,179 --> 00:32:35,580
good for functionality but also for

857
00:32:35,580 --> 00:32:37,380
security

858
00:32:37,380 --> 00:32:39,539
so think of access control as everybody

859
00:32:39,539 --> 00:32:42,120
has their different spheres of access

860
00:32:42,120 --> 00:32:44,100
and even though they're on the same team

861
00:32:44,100 --> 00:32:45,779
they may have different spheres of

862
00:32:45,779 --> 00:32:47,880
access depending on uh you know lease

863
00:32:47,880 --> 00:32:50,220
privileges

864
00:32:50,220 --> 00:32:51,380
Sarah

865
00:32:51,380 --> 00:32:54,720
documentation and this is not something

866
00:32:54,720 --> 00:32:57,720
I I uh I always see in in these kind of

867
00:32:57,720 --> 00:32:59,100
talks especially when there's technical

868
00:32:59,100 --> 00:33:01,559
talks there's not as much an emphasis on

869
00:33:01,559 --> 00:33:02,940
documentation although it's super

870
00:33:02,940 --> 00:33:06,299
important uh because so as I'm a

871
00:33:06,299 --> 00:33:08,520
security architect like I've said I come

872
00:33:08,520 --> 00:33:10,740
in and talk to teams I'm not attached to

873
00:33:10,740 --> 00:33:12,480
a specific product or a software team

874
00:33:12,480 --> 00:33:16,200
within my my company um I we we do more

875
00:33:16,200 --> 00:33:18,899
General Security architecture around the

876
00:33:18,899 --> 00:33:21,960
whole company so and we have hundreds of

877
00:33:21,960 --> 00:33:24,059
different products software Etc so if

878
00:33:24,059 --> 00:33:26,100
I'm coming in and talking to a secure to

879
00:33:26,100 --> 00:33:27,600
a to a developer team to understand

880
00:33:27,600 --> 00:33:29,700
their context

881
00:33:29,700 --> 00:33:30,360
um

882
00:33:30,360 --> 00:33:32,159
you could be the most intelligent person

883
00:33:32,159 --> 00:33:33,600
in the world but without documentation

884
00:33:33,600 --> 00:33:35,399
without taking time to understand the

885
00:33:35,399 --> 00:33:37,140
data flows the infrastructure the

886
00:33:37,140 --> 00:33:39,360
pipelines the rules the specific

887
00:33:39,360 --> 00:33:40,620
customizations that have done the

888
00:33:40,620 --> 00:33:42,240
extensions being used

889
00:33:42,240 --> 00:33:45,720
you cannot gain a sense of what the

890
00:33:45,720 --> 00:33:49,140
security risk or scenario looks like for

891
00:33:49,140 --> 00:33:50,820
that specific software that you're

892
00:33:50,820 --> 00:33:52,919
trying to assess and so as part of that

893
00:33:52,919 --> 00:33:55,640
it's good to have documentation right so

894
00:33:55,640 --> 00:33:57,840
encourage and incentivize teams to

895
00:33:57,840 --> 00:34:01,019
document a little documentation is still

896
00:34:01,019 --> 00:34:02,779
better than noi documentation

897
00:34:02,779 --> 00:34:07,019
and do not try to seek Perfection uh

898
00:34:07,019 --> 00:34:09,899
when documenting because uh it just

899
00:34:09,899 --> 00:34:12,000
never is perfect right a written

900
00:34:12,000 --> 00:34:14,879
document is never perfect so just some

901
00:34:14,879 --> 00:34:17,339
do's and don'ts of documentation you

902
00:34:17,339 --> 00:34:18,418
know

903
00:34:18,418 --> 00:34:21,060
if you see these kind of scenarios on

904
00:34:21,060 --> 00:34:24,000
the left not good uh you know so can I

905
00:34:24,000 --> 00:34:25,500
have some documentation I am the

906
00:34:25,500 --> 00:34:27,780
documentation

907
00:34:27,780 --> 00:34:30,780
no uh because then I need to have you

908
00:34:30,780 --> 00:34:33,480
know uh you know meetings and then talk

909
00:34:33,480 --> 00:34:35,580
to you you don't have time rightly so

910
00:34:35,580 --> 00:34:36,960
you're busy doing your own work perhaps

911
00:34:36,960 --> 00:34:38,879
documentation light documentation is

912
00:34:38,879 --> 00:34:40,080
good

913
00:34:40,080 --> 00:34:42,239
um Auditors need documentation

914
00:34:42,239 --> 00:34:43,679
everybody's running around trying to

915
00:34:43,679 --> 00:34:45,780
find some piece of paper they they

916
00:34:45,780 --> 00:34:47,879
scribbled on a long time ago

917
00:34:47,879 --> 00:34:49,080
um

918
00:34:49,080 --> 00:34:51,679
I've talked to program managers at times

919
00:34:51,679 --> 00:34:55,099
where uh you know I've tried to

920
00:34:55,099 --> 00:34:57,839
encourage your teams um maybe make it

921
00:34:57,839 --> 00:35:00,780
part of the the CI CD Pro the agile

922
00:35:00,780 --> 00:35:02,880
process where

923
00:35:02,880 --> 00:35:05,700
um you give developers some time at the

924
00:35:05,700 --> 00:35:08,280
end of the the Sprint cycle to document

925
00:35:08,280 --> 00:35:10,020
you know maybe an hour maybe two hours

926
00:35:10,020 --> 00:35:12,660
whatever they need try to encourage them

927
00:35:12,660 --> 00:35:14,579
to do that ain't nobody got time for

928
00:35:14,579 --> 00:35:18,839
that nobody got time for documenting so

929
00:35:18,839 --> 00:35:20,520
that's that's the wrong part of it

930
00:35:20,520 --> 00:35:22,079
that's the wrong culture right so we

931
00:35:22,079 --> 00:35:23,820
need to incentivize team and encourage

932
00:35:23,820 --> 00:35:25,740
them to to document

933
00:35:25,740 --> 00:35:26,579
um

934
00:35:26,579 --> 00:35:28,619
so even if it's all in your head and you

935
00:35:28,619 --> 00:35:30,060
know it inside out you still need to

936
00:35:30,060 --> 00:35:31,020
document

937
00:35:31,020 --> 00:35:32,280
um

938
00:35:32,280 --> 00:35:34,980
so let's talk about artifact signing

939
00:35:34,980 --> 00:35:38,099
uh unfortunately not as many people are

940
00:35:38,099 --> 00:35:39,960
signing today so by artifact signing I

941
00:35:39,960 --> 00:35:41,280
don't just mean code signing I mean

942
00:35:41,280 --> 00:35:42,660
other things that are part of the cicd

943
00:35:42,660 --> 00:35:44,579
pipeline as well a Content trust

944
00:35:44,579 --> 00:35:47,220
validation is important so anytime

945
00:35:47,220 --> 00:35:49,980
anything is pushed up we need to ensure

946
00:35:49,980 --> 00:35:52,440
that the Integrity of that component or

947
00:35:52,440 --> 00:35:56,300
that that software art architect uh

948
00:35:56,300 --> 00:36:00,599
our artifact is uh is good so

949
00:36:00,599 --> 00:36:03,900
uh unfortunately so I was attending a a

950
00:36:03,900 --> 00:36:06,960
nist a talk by these authors uh or one

951
00:36:06,960 --> 00:36:08,940
of them and they presented this study

952
00:36:08,940 --> 00:36:10,859
that they did recently and I was shocked

953
00:36:10,859 --> 00:36:12,900
to find that still less than five

954
00:36:12,900 --> 00:36:14,880
percent are signing their code out there

955
00:36:14,880 --> 00:36:17,520
uh the paper is forthcoming so it'd be

956
00:36:17,520 --> 00:36:19,859
very interesting to read but that means

957
00:36:19,859 --> 00:36:21,540
that the rest are not signing and then

958
00:36:21,540 --> 00:36:23,520
there's all sorts of validation issues

959
00:36:23,520 --> 00:36:25,500
that occur as part of that

960
00:36:25,500 --> 00:36:26,400
um

961
00:36:26,400 --> 00:36:29,099
as as as a security architect when I've

962
00:36:29,099 --> 00:36:31,560
had conversation with with teams I've

963
00:36:31,560 --> 00:36:33,180
discovered that it's it's not that

964
00:36:33,180 --> 00:36:34,800
people don't want to sign or don't want

965
00:36:34,800 --> 00:36:37,020
to do the right thing they do but they

966
00:36:37,020 --> 00:36:38,460
need appropriate guidance at times

967
00:36:38,460 --> 00:36:41,160
perhaps as security folks we need to

968
00:36:41,160 --> 00:36:45,000
document and write down the steps or the

969
00:36:45,000 --> 00:36:47,040
implementation details of how to sign

970
00:36:47,040 --> 00:36:49,140
the code so don't just come in and

971
00:36:49,140 --> 00:36:51,960
preach Thou shalt sign that code you

972
00:36:51,960 --> 00:36:54,359
know tell folks how to do it and that

973
00:36:54,359 --> 00:36:56,160
includes providing guidance because

974
00:36:56,160 --> 00:36:58,040
there's a lot of different kinds of

975
00:36:58,040 --> 00:37:00,359
signing procedures depending on what

976
00:37:00,359 --> 00:37:02,339
your context is so you could have an

977
00:37:02,339 --> 00:37:04,619
internal route of trust or you have an

978
00:37:04,619 --> 00:37:06,060
external route of trust so internal root

979
00:37:06,060 --> 00:37:08,579
of trust is let's say a device is coming

980
00:37:08,579 --> 00:37:10,500
to life in out in the field and that's

981
00:37:10,500 --> 00:37:12,180
this is your device and you need to

982
00:37:12,180 --> 00:37:14,280
ensure the Integrity of this firmware so

983
00:37:14,280 --> 00:37:16,560
then that route of trust lies within

984
00:37:16,560 --> 00:37:18,480
your organization and that's a different

985
00:37:18,480 --> 00:37:20,099
procedure than an external rule of trust

986
00:37:20,099 --> 00:37:21,960
where you're let's say making uh you

987
00:37:21,960 --> 00:37:23,640
know you're pushing a driver or a dll

988
00:37:23,640 --> 00:37:26,099
for Windows and so that's where when you

989
00:37:26,099 --> 00:37:27,780
need to getting all of that Windows

990
00:37:27,780 --> 00:37:29,280
specific process the different process

991
00:37:29,280 --> 00:37:32,280
for iOS and so on so

992
00:37:32,280 --> 00:37:34,140
and that's just that's just the process

993
00:37:34,140 --> 00:37:35,940
there's also details to be figured out

994
00:37:35,940 --> 00:37:38,880
within that as to where to where to keep

995
00:37:38,880 --> 00:37:40,440
the private keys where to keep the

996
00:37:40,440 --> 00:37:42,000
certificates and there's a lot of

997
00:37:42,000 --> 00:37:43,680
decisions to be made what kind of key

998
00:37:43,680 --> 00:37:44,880
size should I use what kind of

999
00:37:44,880 --> 00:37:46,800
encryption should I use elliptic curve

1000
00:37:46,800 --> 00:37:50,099
or should I use RSA should I use rsa2048

1001
00:37:50,099 --> 00:37:52,500
or should I use 4096 who's going to

1002
00:37:52,500 --> 00:37:54,839
answer all these questions so try to

1003
00:37:54,839 --> 00:37:57,480
help out the developer teams as far as

1004
00:37:57,480 --> 00:38:00,260
possible maybe you maintain internal

1005
00:38:00,260 --> 00:38:03,480
documentation or internal standards on

1006
00:38:03,480 --> 00:38:06,420
where uh where and how to acquire this

1007
00:38:06,420 --> 00:38:08,160
information or what is for your

1008
00:38:08,160 --> 00:38:11,940
organization maybe r04 the only options

1009
00:38:11,940 --> 00:38:17,220
are either use RZ RSA 4096 or aes26 and

1010
00:38:17,220 --> 00:38:20,160
above an elliptic curve these specific

1011
00:38:20,160 --> 00:38:22,260
curves and then

1012
00:38:22,260 --> 00:38:24,540
um you know hashes please don't use md5

1013
00:38:24,540 --> 00:38:27,500
put that in bold in capital

1014
00:38:27,500 --> 00:38:32,700
md5 hashes my God and you know I again

1015
00:38:32,700 --> 00:38:35,040
Nest has provided guidance that you

1016
00:38:35,040 --> 00:38:36,960
shouldn't even be using sha1 anymore

1017
00:38:36,960 --> 00:38:40,859
right so it's shot two and higher so but

1018
00:38:40,859 --> 00:38:43,020
developers have their own Focus they are

1019
00:38:43,020 --> 00:38:45,240
focused on functionality we've we've

1020
00:38:45,240 --> 00:38:47,520
done experiments where we've seen um

1021
00:38:47,520 --> 00:38:50,220
we put security people in developer role

1022
00:38:50,220 --> 00:38:51,839
and as soon as you put security people

1023
00:38:51,839 --> 00:38:52,980
and developer role all the security

1024
00:38:52,980 --> 00:38:54,960
knowledge seems to have vanished and

1025
00:38:54,960 --> 00:38:56,579
they're focused on functionality and

1026
00:38:56,579 --> 00:38:57,720
then it's all about all the security

1027
00:38:57,720 --> 00:38:59,820
rules go out the window so please try to

1028
00:38:59,820 --> 00:39:02,339
understand that perspective and try to

1029
00:39:02,339 --> 00:39:04,619
provide guidance as as detailed as

1030
00:39:04,619 --> 00:39:07,380
possible this is an example of securing

1031
00:39:07,380 --> 00:39:09,359
a modern CI CD pipeline I like this one

1032
00:39:09,359 --> 00:39:11,700
so I threw that on there this is the

1033
00:39:11,700 --> 00:39:13,500
source you can go check it out I know

1034
00:39:13,500 --> 00:39:15,660
it's it may not be the very readable

1035
00:39:15,660 --> 00:39:18,300
right now but you can see like moving

1036
00:39:18,300 --> 00:39:20,640
down the cicd pipeline there's different

1037
00:39:20,640 --> 00:39:22,380
places where you need to have different

1038
00:39:22,380 --> 00:39:25,220
kinds of controls and as part of those

1039
00:39:25,220 --> 00:39:28,760
controls some small security

1040
00:39:28,760 --> 00:39:32,700
risk is being mitigated or managed and

1041
00:39:32,700 --> 00:39:36,960
um to provide you some examples we have

1042
00:39:36,960 --> 00:39:39,540
we have the only accept commits signed

1043
00:39:39,540 --> 00:39:40,980
with developer gpg key so every

1044
00:39:40,980 --> 00:39:42,960
developer has a gpg key and if it's not

1045
00:39:42,960 --> 00:39:44,820
signed with that key then you reject

1046
00:39:44,820 --> 00:39:47,520
that commit so maybe maybe try that

1047
00:39:47,520 --> 00:39:50,160
um control three for example automation

1048
00:39:50,160 --> 00:39:52,440
access Keys expire automatically you

1049
00:39:52,440 --> 00:39:55,020
don't have to have access tokens that

1050
00:39:55,020 --> 00:39:58,380
last your lifetime right so maybe they

1051
00:39:58,380 --> 00:40:00,599
expire every six months or shorter than

1052
00:40:00,599 --> 00:40:02,880
that depending on your use case

1053
00:40:02,880 --> 00:40:05,339
only dependencies from specific

1054
00:40:05,339 --> 00:40:07,380
on-premise Registries can be used so

1055
00:40:07,380 --> 00:40:08,460
this is when you're trying to manage

1056
00:40:08,460 --> 00:40:09,960
that dependency-based risk we talked

1057
00:40:09,960 --> 00:40:11,640
about where

1058
00:40:11,640 --> 00:40:13,380
there's there's a lot of other

1059
00:40:13,380 --> 00:40:15,900
dependency-based risks as well uh where

1060
00:40:15,900 --> 00:40:17,700
uh for example dependency hijacking

1061
00:40:17,700 --> 00:40:20,220
let's say there's a public repo and uh

1062
00:40:20,220 --> 00:40:21,720
somebody maintains it and it's a nice

1063
00:40:21,720 --> 00:40:23,099
public repo that's been serving us very

1064
00:40:23,099 --> 00:40:24,599
well for all these years but something

1065
00:40:24,599 --> 00:40:26,339
that developers credentials are fished

1066
00:40:26,339 --> 00:40:29,040
they lose access malicious attacker

1067
00:40:29,040 --> 00:40:30,480
comes in and injects some lines of code

1068
00:40:30,480 --> 00:40:33,000
now you pull it uh you know it's not

1069
00:40:33,000 --> 00:40:35,220
good so dependency hijacking depends the

1070
00:40:35,220 --> 00:40:37,079
type of squatting where somebody sits on

1071
00:40:37,079 --> 00:40:39,119
a misspelled dependency name in hope

1072
00:40:39,119 --> 00:40:42,240
that uh somebody's gonna come searching

1073
00:40:42,240 --> 00:40:44,040
for this popular repo and

1074
00:40:44,040 --> 00:40:46,800
um I'm I'm I've got this I'm type of

1075
00:40:46,800 --> 00:40:49,380
squatting this uh this misspelled name

1076
00:40:49,380 --> 00:40:51,180
of that dependency and I've injected

1077
00:40:51,180 --> 00:40:52,440
some malicious lines in there so a lot

1078
00:40:52,440 --> 00:40:54,540
of dependency related risks um any

1079
00:40:54,540 --> 00:40:56,160
critical or high vulnerability breaks

1080
00:40:56,160 --> 00:40:58,380
the bills so can move forward until you

1081
00:40:58,380 --> 00:40:59,760
fix that

1082
00:40:59,760 --> 00:41:00,420
um

1083
00:41:00,420 --> 00:41:04,260
so validate artifacts so that's the

1084
00:41:04,260 --> 00:41:06,900
content trust we were talking about PR

1085
00:41:06,900 --> 00:41:09,420
requires at least two reviewers that's

1086
00:41:09,420 --> 00:41:11,820
the peer review we were talking about

1087
00:41:11,820 --> 00:41:12,420
um

1088
00:41:12,420 --> 00:41:14,460
and and there's a lot of other things as

1089
00:41:14,460 --> 00:41:15,599
well if you're if you have

1090
00:41:15,599 --> 00:41:17,040
container-based environments make sure

1091
00:41:17,040 --> 00:41:19,020
you scan those container based images to

1092
00:41:19,020 --> 00:41:20,400
ensure they're free of vulnerabilities

1093
00:41:20,400 --> 00:41:23,099
so as you can see cicd pipelines a lot

1094
00:41:23,099 --> 00:41:25,380
of attack surface to manage a lot of

1095
00:41:25,380 --> 00:41:26,640
considerations

1096
00:41:26,640 --> 00:41:29,240
so

1097
00:41:29,960 --> 00:41:32,700
finally let's talk about visibility uh

1098
00:41:32,700 --> 00:41:34,200
visibility is really important there's a

1099
00:41:34,200 --> 00:41:35,640
lot of things that there's a lot of

1100
00:41:35,640 --> 00:41:38,099
Automation in the CI CD pipelines and

1101
00:41:38,099 --> 00:41:39,660
that means that

1102
00:41:39,660 --> 00:41:42,060
things get triggered magically things

1103
00:41:42,060 --> 00:41:45,420
happen at in fast-paced no human

1104
00:41:45,420 --> 00:41:47,160
oversight whatsoever which is good

1105
00:41:47,160 --> 00:41:49,140
because then you're pushing out software

1106
00:41:49,140 --> 00:41:50,820
very quickly which is what we need but

1107
00:41:50,820 --> 00:41:53,339
that means for security we we don't see

1108
00:41:53,339 --> 00:41:56,660
much because it happens so fast so then

1109
00:41:56,660 --> 00:41:58,680
because of that we need to log and

1110
00:41:58,680 --> 00:42:01,200
monitor events in a in a Sim system to

1111
00:42:01,200 --> 00:42:02,760
enable threat detection response if

1112
00:42:02,760 --> 00:42:04,560
something goes wrong or if something is

1113
00:42:04,560 --> 00:42:06,300
going wrong at the moment and you need

1114
00:42:06,300 --> 00:42:08,640
to detect that before something goes

1115
00:42:08,640 --> 00:42:12,780
even worse gets even worse then in that

1116
00:42:12,780 --> 00:42:14,400
case you need to have these logs being

1117
00:42:14,400 --> 00:42:17,000
sent to a central log management and

1118
00:42:17,000 --> 00:42:19,440
Analysis system

1119
00:42:19,440 --> 00:42:22,700
analysis system like a Sim system

1120
00:42:22,700 --> 00:42:24,720
adversaries persist where logs are

1121
00:42:24,720 --> 00:42:26,660
absent I think we all know this one

1122
00:42:26,660 --> 00:42:28,800
collect metrics on vulnerability

1123
00:42:28,800 --> 00:42:30,660
management as well most folks already

1124
00:42:30,660 --> 00:42:33,540
know over here what SIM systems are so I

1125
00:42:33,540 --> 00:42:35,640
thought I'd Show an example of a

1126
00:42:35,640 --> 00:42:37,800
vulnerability manager uh there's

1127
00:42:37,800 --> 00:42:40,200
different ones out there you may you may

1128
00:42:40,200 --> 00:42:42,720
know of NASA's more Enterprise grade

1129
00:42:42,720 --> 00:42:44,579
solution this is another alternative

1130
00:42:44,579 --> 00:42:47,760
archery but the idea is that you you

1131
00:42:47,760 --> 00:42:49,980
take those you collect metrics on what

1132
00:42:49,980 --> 00:42:51,780
kind of vulnerabilities exist

1133
00:42:51,780 --> 00:42:54,900
in your environments as part of your

1134
00:42:54,900 --> 00:42:57,660
build processes as part of your

1135
00:42:57,660 --> 00:43:00,780
and different components that make up

1136
00:43:00,780 --> 00:43:02,819
your software and then you try to

1137
00:43:02,819 --> 00:43:05,400
address them with certain goals in mind

1138
00:43:05,400 --> 00:43:08,099
that well we won't have we won't be able

1139
00:43:08,099 --> 00:43:10,859
to resolve 100 of these within the the

1140
00:43:10,859 --> 00:43:12,599
next two months but maybe we have a

1141
00:43:12,599 --> 00:43:14,220
number at Target in mind so we're

1142
00:43:14,220 --> 00:43:16,980
actively managing our risk

1143
00:43:16,980 --> 00:43:19,920
um ultimately it all comes down to

1144
00:43:19,920 --> 00:43:22,200
business because we all we all operate

1145
00:43:22,200 --> 00:43:25,020
in in business sort of environments so

1146
00:43:25,020 --> 00:43:27,660
sometimes so you can do you know you can

1147
00:43:27,660 --> 00:43:30,119
either accept the risk and business

1148
00:43:30,119 --> 00:43:32,040
decision that you know what this is fine

1149
00:43:32,040 --> 00:43:33,359
we don't have the resources for whatever

1150
00:43:33,359 --> 00:43:35,040
reason we don't want to try to fix this

1151
00:43:35,040 --> 00:43:37,619
so the business signs off on that risk

1152
00:43:37,619 --> 00:43:39,359
and accepts the risk better thing to do

1153
00:43:39,359 --> 00:43:40,800
would be if you can mitigate that risk

1154
00:43:40,800 --> 00:43:42,060
sometimes the mitigation is simple and

1155
00:43:42,060 --> 00:43:43,500
happens otherwise other times you accept

1156
00:43:43,500 --> 00:43:45,839
it or or the third thing you can do with

1157
00:43:45,839 --> 00:43:47,520
risk is you can transfer it so in that

1158
00:43:47,520 --> 00:43:49,020
case you buy insurance or something and

1159
00:43:49,020 --> 00:43:51,000
you transfer the risk somewhere else so

1160
00:43:51,000 --> 00:43:54,060
uh different decisions that need to be

1161
00:43:54,060 --> 00:43:56,460
made business folks like to look at

1162
00:43:56,460 --> 00:43:59,640
dashboards so it's a dashboard but it

1163
00:43:59,640 --> 00:44:01,920
can also be useful for fixing your and

1164
00:44:01,920 --> 00:44:04,500
keeping track of your vulnerabilities

1165
00:44:04,500 --> 00:44:06,660
all right so let's talk about culture

1166
00:44:06,660 --> 00:44:09,780
and this is important because we need to

1167
00:44:09,780 --> 00:44:11,640
develop a partnership right between

1168
00:44:11,640 --> 00:44:15,480
security and and devops um where and I

1169
00:44:15,480 --> 00:44:18,540
have to say that because security teams

1170
00:44:18,540 --> 00:44:21,060
are still viewed as external and because

1171
00:44:21,060 --> 00:44:22,440
of that small ratio of security

1172
00:44:22,440 --> 00:44:24,960
Personnel to developers

1173
00:44:24,960 --> 00:44:25,560
um

1174
00:44:25,560 --> 00:44:28,079
security unfortunately security folks

1175
00:44:28,079 --> 00:44:29,640
are still seen as external to the

1176
00:44:29,640 --> 00:44:32,400
developer operations or devops and and

1177
00:44:32,400 --> 00:44:34,319
therefore it's important to develop a

1178
00:44:34,319 --> 00:44:37,140
partnership and do not come in with an

1179
00:44:37,140 --> 00:44:39,000
adversarial attitude telling people that

1180
00:44:39,000 --> 00:44:41,940
the you're not doing things right you

1181
00:44:41,940 --> 00:44:43,859
need to do this and this I don't like

1182
00:44:43,859 --> 00:44:46,339
this right that's not going to work

1183
00:44:46,339 --> 00:44:49,700
listen and Don't Preach security

1184
00:44:49,700 --> 00:44:52,079
understand developer perspectives and

1185
00:44:52,079 --> 00:44:53,880
constraints I cannot stress the

1186
00:44:53,880 --> 00:44:55,680
importance of this if you go in a

1187
00:44:55,680 --> 00:44:57,060
meeting and you're talking to developers

1188
00:44:57,060 --> 00:44:58,619
or a team trying to assess their

1189
00:44:58,619 --> 00:45:01,319
security try to First understand why

1190
00:45:01,319 --> 00:45:04,260
those risks exist sometimes folks may

1191
00:45:04,260 --> 00:45:07,020
not be aware that's fine in that case

1192
00:45:07,020 --> 00:45:09,060
you you try to bring it to their

1193
00:45:09,060 --> 00:45:11,160
attention but other times they will tell

1194
00:45:11,160 --> 00:45:13,200
you that they're aware but these are the

1195
00:45:13,200 --> 00:45:15,300
these are the reasons it's not mitigated

1196
00:45:15,300 --> 00:45:17,579
and that's where you listen because that

1197
00:45:17,579 --> 00:45:19,740
that defines the constraints of the

1198
00:45:19,740 --> 00:45:22,260
problem and within those constraints you

1199
00:45:22,260 --> 00:45:24,660
can suggest Solutions uh do not suggest

1200
00:45:24,660 --> 00:45:26,700
Solutions that are outside of those

1201
00:45:26,700 --> 00:45:27,859
constraints

1202
00:45:27,859 --> 00:45:30,420
provide implementation details to enable

1203
00:45:30,420 --> 00:45:32,940
developers second thing is while you're

1204
00:45:32,940 --> 00:45:34,380
suggesting the solutions

1205
00:45:34,380 --> 00:45:37,200
it's also it's not just okay well you

1206
00:45:37,200 --> 00:45:39,780
know you've got this content trust

1207
00:45:39,780 --> 00:45:41,520
related risk

1208
00:45:41,520 --> 00:45:43,980
sign your code and then you go away no

1209
00:45:43,980 --> 00:45:45,720
you maybe maintain Internal

1210
00:45:45,720 --> 00:45:47,640
Documentation where your security teams

1211
00:45:47,640 --> 00:45:48,900
are writing document detailed

1212
00:45:48,900 --> 00:45:50,760
documentation on how to let's say

1213
00:45:50,760 --> 00:45:52,319
depending on your use case your use case

1214
00:45:52,319 --> 00:45:54,660
is container image signing this is the

1215
00:45:54,660 --> 00:45:56,520
solution we this is the internal

1216
00:45:56,520 --> 00:45:58,380
standard that we have for that this is

1217
00:45:58,380 --> 00:46:00,180
and these are the implementation details

1218
00:46:00,180 --> 00:46:02,760
for that solution if your IOS app

1219
00:46:02,760 --> 00:46:04,200
signing then this is the solution for

1220
00:46:04,200 --> 00:46:06,599
that so try to enable developers and not

1221
00:46:06,599 --> 00:46:07,920
just preach

1222
00:46:07,920 --> 00:46:10,680
uh create uh and support a security

1223
00:46:10,680 --> 00:46:12,599
Champions program so

1224
00:46:12,599 --> 00:46:14,400
we need to make security more of an

1225
00:46:14,400 --> 00:46:16,500
integral part of the developer and

1226
00:46:16,500 --> 00:46:18,960
devops cycle so that means we don't need

1227
00:46:18,960 --> 00:46:21,420
to have external security folks come in

1228
00:46:21,420 --> 00:46:23,220
all the time sometimes it becomes

1229
00:46:23,220 --> 00:46:26,520
necessary but sometimes we have what we

1230
00:46:26,520 --> 00:46:29,940
call security Champions within the uh

1231
00:46:29,940 --> 00:46:33,060
the devops teams where we train we take

1232
00:46:33,060 --> 00:46:34,859
the time so to gather interest there's

1233
00:46:34,859 --> 00:46:36,839
always folks interested in Security on

1234
00:46:36,839 --> 00:46:39,720
the devops side so gather interest uh

1235
00:46:39,720 --> 00:46:41,460
you know and who those identify who

1236
00:46:41,460 --> 00:46:43,140
those folks are provide them training on

1237
00:46:43,140 --> 00:46:45,300
awareness security is not their

1238
00:46:45,300 --> 00:46:47,520
full-time job but they are interested so

1239
00:46:47,520 --> 00:46:49,260
you can perhaps familiarize them with

1240
00:46:49,260 --> 00:46:50,760
the OS top 10 and those kind of

1241
00:46:50,760 --> 00:46:52,619
Frameworks and you know Nest CSF

1242
00:46:52,619 --> 00:46:54,300
framework and those kind of things

1243
00:46:54,300 --> 00:46:55,680
and then they became the security

1244
00:46:55,680 --> 00:46:57,180
champion of their team or their product

1245
00:46:57,180 --> 00:46:59,099
team and software team and then they

1246
00:46:59,099 --> 00:47:01,079
advocate for security next time somebody

1247
00:47:01,079 --> 00:47:03,119
within their team pushes up apprecially

1248
00:47:03,119 --> 00:47:06,599
the change up the repo they they look at

1249
00:47:06,599 --> 00:47:09,180
it from a security perspective and uh

1250
00:47:09,180 --> 00:47:10,380
you know you have all those automated

1251
00:47:10,380 --> 00:47:11,819
tools and that's all fine and good but

1252
00:47:11,819 --> 00:47:14,160
then you also have this person

1253
00:47:14,160 --> 00:47:16,260
um sorry there's a human touch to it a

1254
00:47:16,260 --> 00:47:18,000
manual review from a security

1255
00:47:18,000 --> 00:47:22,099
perspective so so that's always good

1256
00:47:22,260 --> 00:47:25,020
uh I call this the golden order of

1257
00:47:25,020 --> 00:47:27,420
impact uh it's all about creating impact

1258
00:47:27,420 --> 00:47:30,119
in your organization impacting if your

1259
00:47:30,119 --> 00:47:31,260
security Personnel then it's about

1260
00:47:31,260 --> 00:47:34,200
creating impact in terms of security

1261
00:47:34,200 --> 00:47:34,920
um

1262
00:47:34,920 --> 00:47:37,380
it's the people that matter the most uh

1263
00:47:37,380 --> 00:47:39,480
I think you know we've seen the golden

1264
00:47:39,480 --> 00:47:42,540
order uh Golden Triangle uh where

1265
00:47:42,540 --> 00:47:44,640
they're all kind of part of the the

1266
00:47:44,640 --> 00:47:46,440
system but I think in my experience

1267
00:47:46,440 --> 00:47:48,480
people are the most important

1268
00:47:48,480 --> 00:47:49,800
um so you need to get buy-in from your

1269
00:47:49,800 --> 00:47:51,359
stakeholders so if you have a SAS tool

1270
00:47:51,359 --> 00:47:52,560
or a dash tool that you're recommending

1271
00:47:52,560 --> 00:47:55,200
but it's not working out uh in specific

1272
00:47:55,200 --> 00:47:57,359
situation scenarios that that your

1273
00:47:57,359 --> 00:47:58,920
devops teams are using then in that case

1274
00:47:58,920 --> 00:48:00,240
you need to get with those teams

1275
00:48:00,240 --> 00:48:03,119
understand what the issues are and uh

1276
00:48:03,119 --> 00:48:06,000
get buy-in for security and whatever

1277
00:48:06,000 --> 00:48:08,099
recommendations and tools policies

1278
00:48:08,099 --> 00:48:09,900
you're suggesting so that's that's the

1279
00:48:09,900 --> 00:48:11,819
people on the front line they are the

1280
00:48:11,819 --> 00:48:14,400
ones who uh so security is everybody's

1281
00:48:14,400 --> 00:48:17,880
responsibility so get buy-in uh next is

1282
00:48:17,880 --> 00:48:20,640
process so well defined and easily

1283
00:48:20,640 --> 00:48:23,220
adopted if you make you make things so

1284
00:48:23,220 --> 00:48:26,160
process heavy that by the end of it uh

1285
00:48:26,160 --> 00:48:28,020
their business can move forward because

1286
00:48:28,020 --> 00:48:30,000
you've made it super process heavy

1287
00:48:30,000 --> 00:48:31,560
people need to understand what's going

1288
00:48:31,560 --> 00:48:34,140
on and how to do it don't do that

1289
00:48:34,140 --> 00:48:35,760
um it needs to be well defined and

1290
00:48:35,760 --> 00:48:37,800
easily adoptable otherwise you need to

1291
00:48:37,800 --> 00:48:39,780
scratch that and rethink the strategy

1292
00:48:39,780 --> 00:48:41,819
for process

1293
00:48:41,819 --> 00:48:45,599
um and then last uh is tools so tools do

1294
00:48:45,599 --> 00:48:48,000
help a lot but they have limitations and

1295
00:48:48,000 --> 00:48:50,240
please do not fixate on tools because

1296
00:48:50,240 --> 00:48:52,500
tools can be substituted and they're

1297
00:48:52,500 --> 00:48:56,400
always better tools coming out so

1298
00:48:56,400 --> 00:48:58,920
um it's better to so tools have three

1299
00:48:58,920 --> 00:49:00,780
purposes that you should look for three

1300
00:49:00,780 --> 00:49:03,900
qualities uh effective efficient and

1301
00:49:03,900 --> 00:49:06,119
fast execution so

1302
00:49:06,119 --> 00:49:08,099
um and there's uh for example if you

1303
00:49:08,099 --> 00:49:09,540
have a saster dash tool that you're

1304
00:49:09,540 --> 00:49:11,339
recommending but for larger code bases

1305
00:49:11,339 --> 00:49:13,500
that exist in your organization it takes

1306
00:49:13,500 --> 00:49:16,140
days for the scans to run it's not

1307
00:49:16,140 --> 00:49:18,780
perhaps not acceptable so fast execution

1308
00:49:18,780 --> 00:49:21,839
is also important ultimately I'd say

1309
00:49:21,839 --> 00:49:23,940
that especially in the security industry

1310
00:49:23,940 --> 00:49:27,300
today learn to separate uh fact from

1311
00:49:27,300 --> 00:49:29,819
claims from marketing claims that's

1312
00:49:29,819 --> 00:49:31,800
that's important when it comes to tools

1313
00:49:31,800 --> 00:49:34,260
but since we're talking about tools uh

1314
00:49:34,260 --> 00:49:37,619
I'd like to present the the OS cyber

1315
00:49:37,619 --> 00:49:40,380
defense Matrix if you don't already know

1316
00:49:40,380 --> 00:49:42,720
about this this is good because it lets

1317
00:49:42,720 --> 00:49:44,940
you so let's say you you work as part of

1318
00:49:44,940 --> 00:49:46,500
an organization and you're responsible

1319
00:49:46,500 --> 00:49:48,300
for security and you're trying to

1320
00:49:48,300 --> 00:49:50,400
understand what kind of tool sets do you

1321
00:49:50,400 --> 00:49:52,740
have and within those uh within that

1322
00:49:52,740 --> 00:49:55,319
tool set what kind of uh what kind of

1323
00:49:55,319 --> 00:49:57,119
ground do you cover in terms of security

1324
00:49:57,119 --> 00:49:59,940
risks so this that identified protect

1325
00:49:59,940 --> 00:50:02,040
detectors respond recovered as part of

1326
00:50:02,040 --> 00:50:03,839
the cyber security framework and then

1327
00:50:03,839 --> 00:50:05,160
one of those applies to devices

1328
00:50:05,160 --> 00:50:07,680
application network data all of that so

1329
00:50:07,680 --> 00:50:11,460
you you start putting Tools in in one of

1330
00:50:11,460 --> 00:50:12,900
these categories or perhaps multiple

1331
00:50:12,900 --> 00:50:14,819
depending on the tool and then you try

1332
00:50:14,819 --> 00:50:18,119
to understand uh where are the gaps so

1333
00:50:18,119 --> 00:50:21,000
then you better manage security but also

1334
00:50:21,000 --> 00:50:22,560
from a business perspective business

1335
00:50:22,560 --> 00:50:24,240
likes to look at security as a cost

1336
00:50:24,240 --> 00:50:27,000
center so maybe there's redundant tool

1337
00:50:27,000 --> 00:50:28,859
sets you have large organizations

1338
00:50:28,859 --> 00:50:30,359
believe it or not have redundant tool

1339
00:50:30,359 --> 00:50:32,579
sets where one Silo team is using a

1340
00:50:32,579 --> 00:50:34,500
completely different security tool than

1341
00:50:34,500 --> 00:50:36,300
the rest and then somebody else is doing

1342
00:50:36,300 --> 00:50:38,520
so it's a lot of resource wasted or

1343
00:50:38,520 --> 00:50:40,200
money wasted so perhaps you need to

1344
00:50:40,200 --> 00:50:42,060
remove redundancy in terms of security

1345
00:50:42,060 --> 00:50:45,060
tools so it's good for that as well

1346
00:50:45,060 --> 00:50:46,920
so in conclusion

1347
00:50:46,920 --> 00:50:48,960
um attack surface is wider than ever I

1348
00:50:48,960 --> 00:50:50,040
think we've discussed that as part of

1349
00:50:50,040 --> 00:50:52,859
the cicd pipeline so we need to realign

1350
00:50:52,859 --> 00:50:55,140
our security efforts to incorporate

1351
00:50:55,140 --> 00:50:56,760
these complexities

1352
00:50:56,760 --> 00:50:58,859
and then Implement automated and manual

1353
00:50:58,859 --> 00:51:01,079
Security Solutions automated or good for

1354
00:51:01,079 --> 00:51:02,579
a fast-paced environment but manual

1355
00:51:02,579 --> 00:51:04,980
sometimes goes more in more of a detail

1356
00:51:04,980 --> 00:51:07,440
so and then you always need to tune

1357
00:51:07,440 --> 00:51:10,339
reassess revisit kind of improve

1358
00:51:10,339 --> 00:51:13,200
relearn repeat

1359
00:51:13,200 --> 00:51:14,819
um like I said do not fixate on tools

1360
00:51:14,819 --> 00:51:15,680
too much

1361
00:51:15,680 --> 00:51:18,380
identify gaps using a visual framework

1362
00:51:18,380 --> 00:51:22,099
that's that that's that just

1363
00:51:22,099 --> 00:51:24,720
DS the defense Matrix that I just

1364
00:51:24,720 --> 00:51:26,880
presented but learned separate truth

1365
00:51:26,880 --> 00:51:29,640
from marketing claims and ultimately I

1366
00:51:29,640 --> 00:51:31,200
will leave you with this thought um we

1367
00:51:31,200 --> 00:51:33,300
always say Dev secops and it's that that

1368
00:51:33,300 --> 00:51:35,460
term is taken over now but it seems to

1369
00:51:35,460 --> 00:51:38,520
sh to artificially inject Security in

1370
00:51:38,520 --> 00:51:40,260
the middle of devops when devops should

1371
00:51:40,260 --> 00:51:42,359
by default have security as part of it

1372
00:51:42,359 --> 00:51:44,640
because we talk about doing security

1373
00:51:44,640 --> 00:51:46,500
from ground up but then we have this

1374
00:51:46,500 --> 00:51:48,660
artificially injected SEC into devops as

1375
00:51:48,660 --> 00:51:50,280
if it's not a natural part or organic

1376
00:51:50,280 --> 00:51:53,819
part of devops already so

1377
00:51:53,819 --> 00:51:56,520
uh with that uh that concludes the talk

1378
00:51:56,520 --> 00:52:00,010
uh thanks a lot for for coming

1379
00:52:00,010 --> 00:52:06,210
[Applause]

