1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:54,440
[Music]

6
00:00:54,440 --> 00:00:57,600
okay hi guys so thank you for showing up

7
00:00:57,600 --> 00:01:01,140
to my talk yeah it's great

8
00:01:01,140 --> 00:01:03,719
um so my name is Nicholas Celine I'm

9
00:01:03,719 --> 00:01:05,280
actually from Sweden

10
00:01:05,280 --> 00:01:08,159
and I'm gonna well I'm gonna introduce

11
00:01:08,159 --> 00:01:10,140
myself a little bit quickly that's not

12
00:01:10,140 --> 00:01:11,100
really what we're going to talk about

13
00:01:11,100 --> 00:01:13,140
but I'm an independent uh security

14
00:01:13,140 --> 00:01:14,520
consultant

15
00:01:14,520 --> 00:01:16,619
so I help different companies to build

16
00:01:16,619 --> 00:01:19,280
better software security wise

17
00:01:19,280 --> 00:01:22,439
uh one project I particularly worked on

18
00:01:22,439 --> 00:01:25,500
lately was transferring physical keys to

19
00:01:25,500 --> 00:01:27,960
digital keys for for facility management

20
00:01:27,960 --> 00:01:30,840
for example so kind of always ended up

21
00:01:30,840 --> 00:01:34,380
in some sort of pki situation and that's

22
00:01:34,380 --> 00:01:35,280
really what we're going to be talking

23
00:01:35,280 --> 00:01:38,159
about but we're going to look at peaky

24
00:01:38,159 --> 00:01:39,600
eyes when we lift them up into the

25
00:01:39,600 --> 00:01:41,640
application and start taking the whole

26
00:01:41,640 --> 00:01:43,979
responsibility and using that to secure

27
00:01:43,979 --> 00:01:46,939
our applications

28
00:01:47,520 --> 00:01:50,640
um I did have a little clicker here

29
00:01:50,640 --> 00:01:53,659
we'll go with that

30
00:01:54,540 --> 00:01:56,280
okay so I'm gonna start off with a

31
00:01:56,280 --> 00:01:57,540
little question

32
00:01:57,540 --> 00:02:00,360
so what what do you guys think is the

33
00:02:00,360 --> 00:02:03,420
basic concept or thing you need in order

34
00:02:03,420 --> 00:02:05,759
to create this cure infrastructure what

35
00:02:05,759 --> 00:02:07,740
this is really needed

36
00:02:07,740 --> 00:02:10,519
any ideas

37
00:02:10,639 --> 00:02:13,200
encryption is good I mean that is that's

38
00:02:13,200 --> 00:02:15,239
a tool we're going to be using and look

39
00:02:15,239 --> 00:02:18,780
looking for more of a concept here truck

40
00:02:18,780 --> 00:02:21,060
trust is the right answer

41
00:02:21,060 --> 00:02:23,819
because if we we can put any encryption

42
00:02:23,819 --> 00:02:26,280
in there we can put security controls if

43
00:02:26,280 --> 00:02:28,560
we don't have trust it doesn't really

44
00:02:28,560 --> 00:02:30,480
matter because the entities then can't

45
00:02:30,480 --> 00:02:33,599
really talk to each other securely

46
00:02:33,599 --> 00:02:35,700
but yeah encryption is part of it I mean

47
00:02:35,700 --> 00:02:36,900
that's really how we're going to seal

48
00:02:36,900 --> 00:02:39,300
the trust at some points

49
00:02:39,300 --> 00:02:41,340
so just a quick sort of I'm not going to

50
00:02:41,340 --> 00:02:42,959
talk too much about the public key

51
00:02:42,959 --> 00:02:44,400
infrastructure is just a quick

52
00:02:44,400 --> 00:02:47,459
introduction so we know a little bit

53
00:02:47,459 --> 00:02:50,340
um so it starts off with a public key

54
00:02:50,340 --> 00:02:52,800
and as we all know behind every public

55
00:02:52,800 --> 00:02:55,220
key there is a stronger

56
00:02:55,220 --> 00:02:57,840
private or sometimes referred to as a

57
00:02:57,840 --> 00:02:59,459
secret key and that forms a public key

58
00:02:59,459 --> 00:03:01,620
pair nothing weird about that that's

59
00:03:01,620 --> 00:03:03,840
just you know how we build this the

60
00:03:03,840 --> 00:03:05,220
peaky eyes

61
00:03:05,220 --> 00:03:06,900
and then we can put them into different

62
00:03:06,900 --> 00:03:09,120
types of structures

63
00:03:09,120 --> 00:03:11,640
so one of them is this hierarchical pki

64
00:03:11,640 --> 00:03:14,340
which is I guess the most common one

65
00:03:14,340 --> 00:03:17,420
where you have a tree looking structure

66
00:03:17,420 --> 00:03:20,099
with a root that this is basically your

67
00:03:20,099 --> 00:03:22,080
trust and then you start to sort of

68
00:03:22,080 --> 00:03:26,099
issue other public Keys within this to

69
00:03:26,099 --> 00:03:28,440
create this intermediate nodes and then

70
00:03:28,440 --> 00:03:30,420
finally at some point you can have Leaf

71
00:03:30,420 --> 00:03:32,519
nodes and that's going to be your your

72
00:03:32,519 --> 00:03:34,680
devices your endnotes your users

73
00:03:34,680 --> 00:03:36,720
whatever it is so this is a classic

74
00:03:36,720 --> 00:03:39,120
certificate Authority kind of style

75
00:03:39,120 --> 00:03:41,459
thing for domain names for example to

76
00:03:41,459 --> 00:03:44,459
build trust within those kind of systems

77
00:03:44,459 --> 00:03:47,580
then we have another uh structure that

78
00:03:47,580 --> 00:03:50,280
is known as the web of trust this was

79
00:03:50,280 --> 00:03:53,099
the pgp kind of style

80
00:03:53,099 --> 00:03:54,659
um thing that was created at the same

81
00:03:54,659 --> 00:03:57,840
time so here really uh every node every

82
00:03:57,840 --> 00:04:00,540
public key is their own roots

83
00:04:00,540 --> 00:04:02,400
so you kind of create that and then you

84
00:04:02,400 --> 00:04:04,319
you issue that you send that over to

85
00:04:04,319 --> 00:04:05,940
your friends whoever and just start to

86
00:04:05,940 --> 00:04:09,180
build this kind of web which doesn't

87
00:04:09,180 --> 00:04:10,980
look this normally doesn't look the

88
00:04:10,980 --> 00:04:13,099
structures more like a spaghetti web but

89
00:04:13,099 --> 00:04:16,199
this is idea to get a direct trust for

90
00:04:16,199 --> 00:04:18,660
those who might sign your keys but with

91
00:04:18,660 --> 00:04:20,880
that you get an indirect trust for

92
00:04:20,880 --> 00:04:23,580
everyone else that they may have signed

93
00:04:23,580 --> 00:04:25,940
in turn

94
00:04:26,460 --> 00:04:28,620
um so this is the basics and then we're

95
00:04:28,620 --> 00:04:30,199
going to look at an open source project

96
00:04:30,199 --> 00:04:32,639
that is kind of lifting this kind of

97
00:04:32,639 --> 00:04:34,800
thinking up into the application

98
00:04:34,800 --> 00:04:37,500
it is called dime

99
00:04:37,500 --> 00:04:40,800
uh and it kind of introduced a concept

100
00:04:40,800 --> 00:04:43,560
called application based public key

101
00:04:43,560 --> 00:04:45,780
infrastructure nothing weird with that

102
00:04:45,780 --> 00:04:48,419
it's just where it's placed normally pki

103
00:04:48,419 --> 00:04:50,220
lives a little bit further down into the

104
00:04:50,220 --> 00:04:51,780
platform

105
00:04:51,780 --> 00:04:54,540
uh so here's the dime dragon

106
00:04:54,540 --> 00:04:57,960
you have to have a cool icon I guess uh

107
00:04:57,960 --> 00:04:59,880
dime stands for data Integrity message

108
00:04:59,880 --> 00:05:01,080
envelope

109
00:05:01,080 --> 00:05:02,940
and that kind of explains everything but

110
00:05:02,940 --> 00:05:04,740
I'm still going to go through it though

111
00:05:04,740 --> 00:05:08,520
so it has a trust based security module

112
00:05:08,520 --> 00:05:10,560
so that's really the pki where it comes

113
00:05:10,560 --> 00:05:12,600
in is using that

114
00:05:12,600 --> 00:05:15,180
it has a modern data format so the

115
00:05:15,180 --> 00:05:18,180
inspiration here is a lot of JWT in that

116
00:05:18,180 --> 00:05:21,780
kind of thinking where Json is is used

117
00:05:21,780 --> 00:05:25,440
but one of the primary principles to for

118
00:05:25,440 --> 00:05:26,880
the design of this has been human

119
00:05:26,880 --> 00:05:28,080
readable

120
00:05:28,080 --> 00:05:31,259
uh it needs to be easy for developers to

121
00:05:31,259 --> 00:05:33,000
read it so they can troubleshoot they

122
00:05:33,000 --> 00:05:34,919
can find things it shouldn't actually

123
00:05:34,919 --> 00:05:36,539
work against them it should work with

124
00:05:36,539 --> 00:05:38,699
them because when you start to involve

125
00:05:38,699 --> 00:05:40,680
cryptography and things like that things

126
00:05:40,680 --> 00:05:42,539
do tend to get a little bit more

127
00:05:42,539 --> 00:05:44,580
complicated

128
00:05:44,580 --> 00:05:48,240
uh less options very important because

129
00:05:48,240 --> 00:05:50,120
we don't have time to learn everything

130
00:05:50,120 --> 00:05:54,000
so when we need to take decisions of

131
00:05:54,000 --> 00:05:55,979
what to use we tend to

132
00:05:55,979 --> 00:05:58,259
make mistakes so if we don't have to

133
00:05:58,259 --> 00:06:01,020
take too many decisions then that could

134
00:06:01,020 --> 00:06:03,000
be a way of actually increasing Security

135
00:06:03,000 --> 00:06:04,680
in our applications

136
00:06:04,680 --> 00:06:07,259
open and transparent is a very important

137
00:06:07,259 --> 00:06:09,780
factor if you're building a peaky eye

138
00:06:09,780 --> 00:06:12,120
you need to know what's going on all the

139
00:06:12,120 --> 00:06:13,919
way down there shouldn't be any black

140
00:06:13,919 --> 00:06:17,039
boxes because they can't really say that

141
00:06:17,039 --> 00:06:18,479
we trust this

142
00:06:18,479 --> 00:06:20,820
so then that's very important and it's

143
00:06:20,820 --> 00:06:23,100
of course is free you can download use

144
00:06:23,100 --> 00:06:25,380
it that's a bonus

145
00:06:25,380 --> 00:06:27,600
so what what does it contain like I

146
00:06:27,600 --> 00:06:29,220
don't know if you probably not supposed

147
00:06:29,220 --> 00:06:31,199
to really read this table anyway but

148
00:06:31,199 --> 00:06:33,419
it's based on claims and we all know

149
00:06:33,419 --> 00:06:37,319
claims claims are used in JWT uh in

150
00:06:37,319 --> 00:06:40,740
oauth 2 and so forth uh so it basically

151
00:06:40,740 --> 00:06:42,780
builds up entities through that and then

152
00:06:42,780 --> 00:06:45,479
package that into some sort of items and

153
00:06:45,479 --> 00:06:46,800
there are a couple of different items

154
00:06:46,800 --> 00:06:49,800
this is just a few examples

155
00:06:49,800 --> 00:06:53,100
she would have key items they would wrap

156
00:06:53,100 --> 00:06:55,620
Keys together it could be public key

157
00:06:55,620 --> 00:06:57,539
pairs so it could be encryption keys or

158
00:06:57,539 --> 00:06:58,740
something like that

159
00:06:58,740 --> 00:07:01,440
you would have identities which is a bit

160
00:07:01,440 --> 00:07:04,139
like certificates same thing it kind of

161
00:07:04,139 --> 00:07:06,240
holds lots of clients about the holder

162
00:07:06,240 --> 00:07:08,039
or the owner of the subject

163
00:07:08,039 --> 00:07:11,039
uh they could be signed While most items

164
00:07:11,039 --> 00:07:12,840
there could be signed

165
00:07:12,840 --> 00:07:15,960
messages that's how you would be sending

166
00:07:15,960 --> 00:07:18,240
data back and forth between your

167
00:07:18,240 --> 00:07:19,380
application

168
00:07:19,380 --> 00:07:21,800
so you can put application based

169
00:07:21,800 --> 00:07:24,000
payloads in there that's specific for

170
00:07:24,000 --> 00:07:25,319
your application

171
00:07:25,319 --> 00:07:27,599
and then that's all wrapped up into some

172
00:07:27,599 --> 00:07:28,919
sort of envelope

173
00:07:28,919 --> 00:07:31,680
and that's Integrity protection and uh

174
00:07:31,680 --> 00:07:34,199
and it gives you that kind of trust

175
00:07:34,199 --> 00:07:37,319
model all wrapped into one so basically

176
00:07:37,319 --> 00:07:40,800
similarly you take paper uh sheets so

177
00:07:40,800 --> 00:07:42,479
you put that into a paper envelope and

178
00:07:42,479 --> 00:07:45,360
you see all that that's the idea so it

179
00:07:45,360 --> 00:07:46,979
kind of looks like this

180
00:07:46,979 --> 00:07:49,620
this is a dime item

181
00:07:49,620 --> 00:07:52,139
and maybe it doesn't apparently stick

182
00:07:52,139 --> 00:07:53,759
anything out that you can look and read

183
00:07:53,759 --> 00:07:55,440
this but there are a couple of things

184
00:07:55,440 --> 00:07:57,120
already at this level

185
00:07:57,120 --> 00:07:59,639
uh so you would have a header up here

186
00:07:59,639 --> 00:08:03,660
very simple it's a all dime envelope

187
00:08:03,660 --> 00:08:05,340
starts with Di

188
00:08:05,340 --> 00:08:08,160
so you recognize this as a dime envelope

189
00:08:08,160 --> 00:08:09,479
and then

190
00:08:09,479 --> 00:08:12,060
the colon there does actually say that

191
00:08:12,060 --> 00:08:14,340
there's an item coming up so it could be

192
00:08:14,340 --> 00:08:16,380
multiple items in here and if there was

193
00:08:16,380 --> 00:08:18,060
a second one there would have been a

194
00:08:18,060 --> 00:08:19,800
colon at the end here and that would be

195
00:08:19,800 --> 00:08:23,220
the next item coming up and the ID is

196
00:08:23,220 --> 00:08:25,199
the header of the item that just really

197
00:08:25,199 --> 00:08:27,180
stands for it's an identity

198
00:08:27,180 --> 00:08:29,220
so if it were a key you would say key

199
00:08:29,220 --> 00:08:32,159
and so forth so already here you you can

200
00:08:32,159 --> 00:08:33,779
read a couple of things

201
00:08:33,779 --> 00:08:35,640
then you have a section down here which

202
00:08:35,640 --> 00:08:37,260
is actually the signature

203
00:08:37,260 --> 00:08:38,880
so that's that's protecting the

204
00:08:38,880 --> 00:08:42,419
Integrity of of the rest of the data set

205
00:08:42,419 --> 00:08:44,339
uh but the interesting thing here is

206
00:08:44,339 --> 00:08:46,860
actually this middle part the gray

207
00:08:46,860 --> 00:08:49,440
and I'm sure you really already

208
00:08:49,440 --> 00:08:52,140
understand that this is base64

209
00:08:52,140 --> 00:08:54,899
so if you decode this which most modern

210
00:08:54,899 --> 00:08:58,200
text editors can do that for you today

211
00:08:58,200 --> 00:09:01,080
you will actually get this Json

212
00:09:01,080 --> 00:09:03,360
and there's a couple of things in here

213
00:09:03,360 --> 00:09:04,980
this was an identity

214
00:09:04,980 --> 00:09:07,019
so you would see there's the claims and

215
00:09:07,019 --> 00:09:08,279
there's a cap

216
00:09:08,279 --> 00:09:10,560
that means capabilities so that's kind

217
00:09:10,560 --> 00:09:14,459
of explains what this identity can do

218
00:09:14,459 --> 00:09:17,279
uh this it says self in there and self

219
00:09:17,279 --> 00:09:18,959
really means that this identity is being

220
00:09:18,959 --> 00:09:21,060
created by the same person who created

221
00:09:21,060 --> 00:09:24,360
the public key so it's a self-issued

222
00:09:24,360 --> 00:09:26,339
identity so it was issued by someone

223
00:09:26,339 --> 00:09:28,019
else the word itself wouldn't be in

224
00:09:28,019 --> 00:09:29,160
there

225
00:09:29,160 --> 00:09:31,140
there's some expiration dates some some

226
00:09:31,140 --> 00:09:33,240
issue that dates and they're all

227
00:09:33,240 --> 00:09:37,459
readable there are RFC 3339

228
00:09:37,459 --> 00:09:40,980
internet dates formats it's the easy to

229
00:09:40,980 --> 00:09:43,860
parse but they're also easy to read

230
00:09:43,860 --> 00:09:46,620
uh there's a public key there is

231
00:09:46,620 --> 00:09:49,200
um also a system there it says last from

232
00:09:49,200 --> 00:09:51,240
2022

233
00:09:51,240 --> 00:09:52,860
and that's just the system You're

234
00:09:52,860 --> 00:09:55,140
Building there's a name for it so you

235
00:09:55,140 --> 00:09:57,420
can use that for different purposes but

236
00:09:57,420 --> 00:09:59,640
it's really to show where where your

237
00:09:59,640 --> 00:10:02,399
identity belongs to

238
00:10:02,399 --> 00:10:04,680
so that's how it looks like but while

239
00:10:04,680 --> 00:10:07,500
we're trying to actually solve here

240
00:10:07,500 --> 00:10:11,160
uh so this is the always top 10

241
00:10:11,160 --> 00:10:12,839
from last year so that's the latest

242
00:10:12,839 --> 00:10:14,220
update

243
00:10:14,220 --> 00:10:16,260
uh so these are actually things that

244
00:10:16,260 --> 00:10:17,880
goes wrong out there

245
00:10:17,880 --> 00:10:19,920
and if you just highlight the second one

246
00:10:19,920 --> 00:10:22,860
it's called cryptographic failures

247
00:10:22,860 --> 00:10:25,320
uh and also pulled off like how to

248
00:10:25,320 --> 00:10:28,200
prevent this from the ovas website

249
00:10:28,200 --> 00:10:30,720
uh so the ones in green

250
00:10:30,720 --> 00:10:32,160
they are

251
00:10:32,160 --> 00:10:35,040
um related to using cryptography wrongly

252
00:10:35,040 --> 00:10:36,959
you know the algorithms just the

253
00:10:36,959 --> 00:10:39,720
parameters that we may need or when to

254
00:10:39,720 --> 00:10:41,279
use it they're just using the wrong one

255
00:10:41,279 --> 00:10:43,800
or old one or something like that

256
00:10:43,800 --> 00:10:45,980
and this is actually a problem

257
00:10:45,980 --> 00:10:49,680
uh and my theory here is that the

258
00:10:49,680 --> 00:10:52,260
problem is actually

259
00:10:52,260 --> 00:10:55,760
the base the base that it's actually

260
00:10:55,760 --> 00:10:58,140
cheap to use

261
00:10:58,140 --> 00:11:00,420
you can download things you can get it

262
00:11:00,420 --> 00:11:03,420
from platform all all operating system

263
00:11:03,420 --> 00:11:05,339
have something you can use or libraries

264
00:11:05,339 --> 00:11:07,140
have something to use or languages

265
00:11:07,140 --> 00:11:09,000
whatever Frameworks

266
00:11:09,000 --> 00:11:10,920
but actually knowing how is a little bit

267
00:11:10,920 --> 00:11:12,600
more expensive

268
00:11:12,600 --> 00:11:14,820
so you need to spend time you need to to

269
00:11:14,820 --> 00:11:17,519
educate yourself I'm sure you guys you

270
00:11:17,519 --> 00:11:19,740
paid to come here or someone paid for

271
00:11:19,740 --> 00:11:22,019
you you may travel spend time and so

272
00:11:22,019 --> 00:11:23,940
forth and that's actually gaining more

273
00:11:23,940 --> 00:11:25,260
knowledge you know you're learning

274
00:11:25,260 --> 00:11:27,740
things you're you're getting knowledge

275
00:11:27,740 --> 00:11:30,300
uh but it costs

276
00:11:30,300 --> 00:11:32,160
but you can stay at home you can

277
00:11:32,160 --> 00:11:33,959
download an algorith or whatever open

278
00:11:33,959 --> 00:11:37,040
source that's pretty much free so that's

279
00:11:37,040 --> 00:11:39,600
one of the the problems with

280
00:11:39,600 --> 00:11:41,880
particularly this usage of cryptography

281
00:11:41,880 --> 00:11:45,180
it is slightly difficult to get it right

282
00:11:45,180 --> 00:11:48,360
uh so I'm just an example of that

283
00:11:48,360 --> 00:11:50,519
so choosing algorithms

284
00:11:50,519 --> 00:11:53,519
so X 509 is the data format for

285
00:11:53,519 --> 00:11:54,959
certificates so that's the standard

286
00:11:54,959 --> 00:11:56,519
format for that

287
00:11:56,519 --> 00:11:59,160
uh it was designed sometime in the late

288
00:11:59,160 --> 00:12:04,260
80s is using abstract syntax notation

289
00:12:04,260 --> 00:12:08,160
version one as a data format which was

290
00:12:08,160 --> 00:12:11,160
also this created sometime mid-80s I

291
00:12:11,160 --> 00:12:12,000
think

292
00:12:12,000 --> 00:12:15,180
uh which is a great format for complex

293
00:12:15,180 --> 00:12:16,560
structures

294
00:12:16,560 --> 00:12:20,339
but not so great for people to read

295
00:12:20,339 --> 00:12:22,019
um and that's one of the problems we're

296
00:12:22,019 --> 00:12:23,459
working with that I personally have

297
00:12:23,459 --> 00:12:25,680
worked with the format

298
00:12:25,680 --> 00:12:26,880
and

299
00:12:26,880 --> 00:12:28,800
those deadliest theorem within the

300
00:12:28,800 --> 00:12:30,360
brackets that's how you specify an

301
00:12:30,360 --> 00:12:32,100
algorithms

302
00:12:32,100 --> 00:12:34,620
so you know mistyping that you could get

303
00:12:34,620 --> 00:12:35,940
something else

304
00:12:35,940 --> 00:12:37,560
and that's not just for algorithms

305
00:12:37,560 --> 00:12:39,300
that's for anything else you want to do

306
00:12:39,300 --> 00:12:41,760
and this is a subset that you kind of

307
00:12:41,760 --> 00:12:44,220
explains the digital signatures that are

308
00:12:44,220 --> 00:12:45,420
available

309
00:12:45,420 --> 00:12:47,399
let me just look at that a couple of

310
00:12:47,399 --> 00:12:48,779
ones there

311
00:12:48,779 --> 00:12:51,720
uh I'm sure it will all in here knows

312
00:12:51,720 --> 00:12:54,240
that md5 should not be used for anything

313
00:12:54,240 --> 00:12:57,959
that is remotely trying to call itself

314
00:12:57,959 --> 00:12:59,220
secure

315
00:12:59,220 --> 00:13:01,620
but if you didn't know that

316
00:13:01,620 --> 00:13:04,019
you could be selecting the wrong one and

317
00:13:04,019 --> 00:13:07,639
so one is pretty much the same

318
00:13:07,639 --> 00:13:09,240
so

319
00:13:09,240 --> 00:13:12,300
how about the more modern formats like

320
00:13:12,300 --> 00:13:14,339
JWT

321
00:13:14,339 --> 00:13:18,779
well they they they have made this a lot

322
00:13:18,779 --> 00:13:21,120
better but they introduced a couple of

323
00:13:21,120 --> 00:13:23,519
things that may not actually make it

324
00:13:23,519 --> 00:13:26,820
better uh I'm not arguing against the

325
00:13:26,820 --> 00:13:28,680
use of none because there could be very

326
00:13:28,680 --> 00:13:31,800
good reasons to use none

327
00:13:31,800 --> 00:13:35,100
um but I seen actually it's uh from my

328
00:13:35,100 --> 00:13:37,500
personal experience that developers tend

329
00:13:37,500 --> 00:13:39,240
to use none early on in the project

330
00:13:39,240 --> 00:13:41,160
because maybe they haven't set up the

331
00:13:41,160 --> 00:13:43,560
rest for using the keys and handling all

332
00:13:43,560 --> 00:13:44,399
that

333
00:13:44,399 --> 00:13:46,860
and they work in an agile fashion so

334
00:13:46,860 --> 00:13:48,660
things will fall into place at some

335
00:13:48,660 --> 00:13:50,639
point in the project once they get to

336
00:13:50,639 --> 00:13:52,320
the production it's all fine

337
00:13:52,320 --> 00:13:56,339
but some assumptions some checks some

338
00:13:56,339 --> 00:13:57,839
things that should have been there may

339
00:13:57,839 --> 00:14:00,120
not have made it to production and they

340
00:14:00,120 --> 00:14:02,579
kind of assume that none is okay then of

341
00:14:02,579 --> 00:14:04,380
course none did cause a little bit

342
00:14:04,380 --> 00:14:06,120
problem a few years back because

343
00:14:06,120 --> 00:14:09,899
libraries parsed none as it was okay and

344
00:14:09,899 --> 00:14:12,060
didn't inform so you could strip the

345
00:14:12,060 --> 00:14:15,000
signature off of JWT and that'll be fine

346
00:14:15,000 --> 00:14:18,540
so there was plenty of vulnerabilities a

347
00:14:18,540 --> 00:14:19,920
few years ago

348
00:14:19,920 --> 00:14:23,160
with JWT but just to have a look at this

349
00:14:23,160 --> 00:14:26,279
one here which says RSA

350
00:14:26,279 --> 00:14:31,019
uh SSA PSS using Sean 256 and MD F1 with

351
00:14:31,019 --> 00:14:33,720
short 256.

352
00:14:33,720 --> 00:14:36,060
you know what does that actually say

353
00:14:36,060 --> 00:14:39,360
you you have to understand what this is

354
00:14:39,360 --> 00:14:42,060
if you say Okay are this gonna solve my

355
00:14:42,060 --> 00:14:44,300
problem

356
00:14:44,339 --> 00:14:48,000
um it is actually a good combination a

357
00:14:48,000 --> 00:14:50,040
good algorithm but you're gonna have to

358
00:14:50,040 --> 00:14:52,500
spend a day Googling it or trying to

359
00:14:52,500 --> 00:14:54,000
figure it out

360
00:14:54,000 --> 00:14:58,860
uh so J number two t is full of options

361
00:14:58,860 --> 00:15:01,440
there's so many things you can use since

362
00:15:01,440 --> 00:15:02,519
Act

363
00:15:02,519 --> 00:15:05,639
so just knowing what to choose it's a

364
00:15:05,639 --> 00:15:07,079
problem

365
00:15:07,079 --> 00:15:10,199
so in dying what do we do then well when

366
00:15:10,199 --> 00:15:11,760
we get to the point where you suppose

367
00:15:11,760 --> 00:15:14,339
okay let's choose the algorithm think of

368
00:15:14,339 --> 00:15:16,440
that it's actually already done

369
00:15:16,440 --> 00:15:18,720
you don't have to worry about it because

370
00:15:18,720 --> 00:15:21,060
it works in Suites

371
00:15:21,060 --> 00:15:23,279
so there's a couple of different usages

372
00:15:23,279 --> 00:15:25,440
that is needed for doing certain

373
00:15:25,440 --> 00:15:28,260
operations and they're all selected

374
00:15:28,260 --> 00:15:29,160
already

375
00:15:29,160 --> 00:15:30,560
so

376
00:15:30,560 --> 00:15:33,180
these algorithms here maybe someone

377
00:15:33,180 --> 00:15:35,399
recognized them because they're actually

378
00:15:35,399 --> 00:15:37,160
part of sodium

379
00:15:37,160 --> 00:15:40,019
sodium was made famous by Daniel

380
00:15:40,019 --> 00:15:42,060
Bernstein and his friends when they

381
00:15:42,060 --> 00:15:44,339
actually develop it and they had a

382
00:15:44,339 --> 00:15:47,699
similar idea behind that library because

383
00:15:47,699 --> 00:15:49,320
they wanted to make something that was

384
00:15:49,320 --> 00:15:53,279
easy to use something that could be used

385
00:15:53,279 --> 00:15:57,240
better and less mistakes and those kind

386
00:15:57,240 --> 00:16:00,480
of ideas is is shared with the concept

387
00:16:00,480 --> 00:16:02,279
of this dime

388
00:16:02,279 --> 00:16:05,100
uh so it's trying to make it a little

389
00:16:05,100 --> 00:16:07,680
bit better so I would say it solves one

390
00:16:07,680 --> 00:16:10,380
out of two problems the problem is

391
00:16:10,380 --> 00:16:12,360
source is that

392
00:16:12,360 --> 00:16:14,579
you don't have to worry about making a

393
00:16:14,579 --> 00:16:16,440
choice because someone else that knew

394
00:16:16,440 --> 00:16:19,199
how to use it has already done it

395
00:16:19,199 --> 00:16:23,040
uh the problem may not solve is your

396
00:16:23,040 --> 00:16:25,740
knowledge you still don't know maybe how

397
00:16:25,740 --> 00:16:28,500
to use it correctly but I would say you

398
00:16:28,500 --> 00:16:31,500
know one out of two is better than none

399
00:16:31,500 --> 00:16:33,959
and there was no pun intended for JWT

400
00:16:33,959 --> 00:16:35,820
there but

401
00:16:35,820 --> 00:16:37,800
um so so that's what we're trying to

402
00:16:37,800 --> 00:16:39,839
solve but what we're trying to achieve

403
00:16:39,839 --> 00:16:41,699
with it

404
00:16:41,699 --> 00:16:44,759
well if we take a common scenario we

405
00:16:44,759 --> 00:16:46,199
have two entities they're going to be

406
00:16:46,199 --> 00:16:47,699
talking to each other this could be

407
00:16:47,699 --> 00:16:50,759
devices applications users whatever

408
00:16:50,759 --> 00:16:52,980
and they want to send sensitive data in

409
00:16:52,980 --> 00:16:55,320
between each other and they usually do

410
00:16:55,320 --> 00:16:57,180
that across some sort of untrusted

411
00:16:57,180 --> 00:16:58,440
network

412
00:16:58,440 --> 00:17:00,959
which most of the time is the internet

413
00:17:00,959 --> 00:17:02,579
and at that point you don't probably

414
00:17:02,579 --> 00:17:04,380
don't want anyone to be able to read

415
00:17:04,380 --> 00:17:05,699
your data

416
00:17:05,699 --> 00:17:07,799
so what you do is that you put TLS

417
00:17:07,799 --> 00:17:09,900
Terminators on either end

418
00:17:09,900 --> 00:17:13,439
so you start setting up a TLS tunnel for

419
00:17:13,439 --> 00:17:16,079
over https that's going to take care of

420
00:17:16,079 --> 00:17:17,819
your encryption it's going to take your

421
00:17:17,819 --> 00:17:19,980
care of your trust the handshake and

422
00:17:19,980 --> 00:17:21,000
everything

423
00:17:21,000 --> 00:17:22,980
uh so you don't have to worry about it

424
00:17:22,980 --> 00:17:25,020
but the problem is of course that little

425
00:17:25,020 --> 00:17:27,119
Gap in between the TLs Terminator in

426
00:17:27,119 --> 00:17:29,040
your application

427
00:17:29,040 --> 00:17:32,400
now that could be a problem or not it

428
00:17:32,400 --> 00:17:34,380
really depends on how much you trust

429
00:17:34,380 --> 00:17:36,360
your network how much you trust your

430
00:17:36,360 --> 00:17:39,539
cloud provider or whoever is hosting

431
00:17:39,539 --> 00:17:40,919
your environment

432
00:17:40,919 --> 00:17:42,840
or it could actually be a regulatory

433
00:17:42,840 --> 00:17:46,020
problem let's say there could be no data

434
00:17:46,020 --> 00:17:49,080
being sent in clear text between any

435
00:17:49,080 --> 00:17:51,379
machine

436
00:17:51,600 --> 00:17:52,260
um

437
00:17:52,260 --> 00:17:54,360
because what happens is that he

438
00:17:54,360 --> 00:17:56,160
terminates so you lost terminate

439
00:17:56,160 --> 00:17:58,799
terminates the trust and encryption

440
00:17:58,799 --> 00:18:01,080
so usually you can't trust that

441
00:18:01,080 --> 00:18:03,240
but what if we actually extended that

442
00:18:03,240 --> 00:18:04,980
and encapsulated the whole thing and

443
00:18:04,980 --> 00:18:06,960
said well we're just going to put

444
00:18:06,960 --> 00:18:08,520
another layer in there and say that

445
00:18:08,520 --> 00:18:09,660
application is going to do this

446
00:18:09,660 --> 00:18:10,980
themselves

447
00:18:10,980 --> 00:18:13,340
so if it's TLS underneath or whatever

448
00:18:13,340 --> 00:18:16,220
that's great because we want to work in

449
00:18:16,220 --> 00:18:18,720
security layers

450
00:18:18,720 --> 00:18:21,299
but if it isn't then it's no problem

451
00:18:21,299 --> 00:18:23,280
because we already have another solution

452
00:18:23,280 --> 00:18:24,660
running

453
00:18:24,660 --> 00:18:26,940
uh so in a way we're creating an

454
00:18:26,940 --> 00:18:28,559
end-to-end encryption and Trust model

455
00:18:28,559 --> 00:18:31,400
here so sort of e to EET or something

456
00:18:31,400 --> 00:18:34,320
and that's what we're trying to achieve

457
00:18:34,320 --> 00:18:38,160
and how how do we actually do this

458
00:18:38,160 --> 00:18:41,280
well I I was going through those two pki

459
00:18:41,280 --> 00:18:43,860
models at the beginning so I'm just

460
00:18:43,860 --> 00:18:45,120
going to go through web of trust in

461
00:18:45,120 --> 00:18:46,980
three steps how you set that up using

462
00:18:46,980 --> 00:18:48,600
down

463
00:18:48,600 --> 00:18:50,460
and that's of course the three stops is

464
00:18:50,460 --> 00:18:52,799
from zero to two

465
00:18:52,799 --> 00:18:54,780
uh so you don't have two keys I have a

466
00:18:54,780 --> 00:18:57,360
key my friend has a key we both signed

467
00:18:57,360 --> 00:18:59,220
our keys ourselves so we have a

468
00:18:59,220 --> 00:19:02,160
signature on that but I want to start to

469
00:19:02,160 --> 00:19:05,039
uh use that to prove trust to someone

470
00:19:05,039 --> 00:19:06,000
else

471
00:19:06,000 --> 00:19:08,039
so announced my friend to sign my key

472
00:19:08,039 --> 00:19:09,840
First Step so I get another signature

473
00:19:09,840 --> 00:19:11,940
from him on my key

474
00:19:11,940 --> 00:19:14,220
and then a Stranger Comes Along

475
00:19:14,220 --> 00:19:15,960
who also has a key

476
00:19:15,960 --> 00:19:18,419
and I want to prove my trust to this

477
00:19:18,419 --> 00:19:19,380
person

478
00:19:19,380 --> 00:19:22,380
so once thing has to happen before which

479
00:19:22,380 --> 00:19:24,360
is Step Zero

480
00:19:24,360 --> 00:19:27,360
so my friend also had to sign my The

481
00:19:27,360 --> 00:19:29,220
Strangers key as well there can be

482
00:19:29,220 --> 00:19:31,460
different setups here but in this case

483
00:19:31,460 --> 00:19:34,020
my friend is signing both

484
00:19:34,020 --> 00:19:37,020
that means that this stranger also has a

485
00:19:37,020 --> 00:19:40,919
public key in his key ring which is just

486
00:19:40,919 --> 00:19:43,740
the storage area locally where there are

487
00:19:43,740 --> 00:19:46,260
keys that he's trusting

488
00:19:46,260 --> 00:19:48,059
and then I can share my key with this

489
00:19:48,059 --> 00:19:50,039
person in the final step and you can

490
00:19:50,039 --> 00:19:52,860
verify that signature from my friend and

491
00:19:52,860 --> 00:19:55,440
see okay well this is actually someone I

492
00:19:55,440 --> 00:19:58,140
trust to sign this key so therefore I

493
00:19:58,140 --> 00:20:01,140
can perhaps trust this key as well this

494
00:20:01,140 --> 00:20:03,179
is a very very simple setup

495
00:20:03,179 --> 00:20:05,880
this could be make complicated but but

496
00:20:05,880 --> 00:20:08,280
this is the basis of it

497
00:20:08,280 --> 00:20:10,740
so I just wanna

498
00:20:10,740 --> 00:20:12,840
highlight one thing here there's a tofu

499
00:20:12,840 --> 00:20:14,039
moment

500
00:20:14,039 --> 00:20:16,500
and I'm gonna explain what tofu is but

501
00:20:16,500 --> 00:20:18,539
I'm just gonna leave it right now so you

502
00:20:18,539 --> 00:20:20,940
remember that there's a tofu moment when

503
00:20:20,940 --> 00:20:24,740
I share my public cue with my friend

504
00:20:24,900 --> 00:20:28,559
uh the code for doing this in time so

505
00:20:28,559 --> 00:20:29,940
there are reference implementations with

506
00:20:29,940 --> 00:20:32,460
dime this is Java

507
00:20:32,460 --> 00:20:34,919
so what I would do is I would generate

508
00:20:34,919 --> 00:20:36,000
the key

509
00:20:36,000 --> 00:20:37,980
I'll give it the capability which is

510
00:20:37,980 --> 00:20:40,320
signed because I want the signing key

511
00:20:40,320 --> 00:20:43,260
then I'll just do a public copyright so

512
00:20:43,260 --> 00:20:45,299
I that kind of extracts only the public

513
00:20:45,299 --> 00:20:48,780
key and I'll assign that with my uh

514
00:20:48,780 --> 00:20:51,419
private key was my original key and I'll

515
00:20:51,419 --> 00:20:55,020
export that in a dime encoded format

516
00:20:55,020 --> 00:20:56,520
so this is all I have to do and then

517
00:20:56,520 --> 00:20:58,440
I'll send that over to my friend

518
00:20:58,440 --> 00:21:01,500
my friend Williams imported sign it with

519
00:21:01,500 --> 00:21:05,640
his key and then do a export again

520
00:21:05,640 --> 00:21:07,500
we'll send that back to me and I'm all

521
00:21:07,500 --> 00:21:09,059
happy about that

522
00:21:09,059 --> 00:21:11,280
but I could also share that with a

523
00:21:11,280 --> 00:21:12,539
stranger

524
00:21:12,539 --> 00:21:15,480
and they will import that and now they

525
00:21:15,480 --> 00:21:17,520
just call verify on this key that the

526
00:21:17,520 --> 00:21:19,080
import and that's going to go down into

527
00:21:19,080 --> 00:21:22,740
their key ring and see okay well it

528
00:21:22,740 --> 00:21:24,179
checks out with this key that you're

529
00:21:24,179 --> 00:21:26,100
trusting so I'll send back this

530
00:21:26,100 --> 00:21:28,559
Integrity state of complete and says say

531
00:21:28,559 --> 00:21:30,299
this can be trusted everything looks

532
00:21:30,299 --> 00:21:33,419
fine from dates to to signatures and so

533
00:21:33,419 --> 00:21:34,860
on

534
00:21:34,860 --> 00:21:36,840
so this this is really the code you'll

535
00:21:36,840 --> 00:21:39,539
be using for for doing that previous

536
00:21:39,539 --> 00:21:41,039
slide that I had

537
00:21:41,039 --> 00:21:42,299
sure there's going to be plenty of

538
00:21:42,299 --> 00:21:43,559
things happening in between you're going

539
00:21:43,559 --> 00:21:45,600
to have to send the key and so forth but

540
00:21:45,600 --> 00:21:47,520
that could be email that could be a rest

541
00:21:47,520 --> 00:21:50,100
API that could be anything

542
00:21:50,100 --> 00:21:53,220
so looking at the hierarchical pki in

543
00:21:53,220 --> 00:21:54,480
the same way

544
00:21:54,480 --> 00:21:56,460
so here we would have a trusted identity

545
00:21:56,460 --> 00:21:58,919
on one end which is the basis for our

546
00:21:58,919 --> 00:22:00,299
trust tree

547
00:22:00,299 --> 00:22:02,280
and I want to be part of that so I

548
00:22:02,280 --> 00:22:04,140
create a key again but I create

549
00:22:04,140 --> 00:22:05,760
something else here I create something

550
00:22:05,760 --> 00:22:08,340
known as an identity issuing request

551
00:22:08,340 --> 00:22:10,980
which is very similar to certificate

552
00:22:10,980 --> 00:22:13,140
signing request this is basically where

553
00:22:13,140 --> 00:22:16,080
I put all my claims in there and I put

554
00:22:16,080 --> 00:22:18,480
my public key and I signed up myself so

555
00:22:18,480 --> 00:22:20,820
this is what I would want to have in an

556
00:22:20,820 --> 00:22:23,280
identity when it's issued by this

557
00:22:23,280 --> 00:22:25,679
trusted identity side here

558
00:22:25,679 --> 00:22:29,940
so this is going to be in six steps from

559
00:22:29,940 --> 00:22:33,360
-1 to four so first step is that

560
00:22:33,360 --> 00:22:35,400
and then I'll just send over this

561
00:22:35,400 --> 00:22:38,159
request to this trusted identity

562
00:22:38,159 --> 00:22:40,020
and they'll verify that and it'll send

563
00:22:40,020 --> 00:22:42,659
an identity back to me with their

564
00:22:42,659 --> 00:22:44,880
signature on it so now I'm all of a

565
00:22:44,880 --> 00:22:48,539
sudden part of that trusted chain

566
00:22:48,539 --> 00:22:51,360
and then we have a stranger coming up as

567
00:22:51,360 --> 00:22:52,320
well

568
00:22:52,320 --> 00:22:55,260
and they also have an identity so same

569
00:22:55,260 --> 00:22:57,059
thing as previously there has to be a

570
00:22:57,059 --> 00:22:58,679
Step Zero

571
00:22:58,679 --> 00:23:01,919
so this has to be signed by this trusted

572
00:23:01,919 --> 00:23:04,320
identity as well so they also have a

573
00:23:04,320 --> 00:23:08,520
signature from the same trust chain

574
00:23:08,520 --> 00:23:11,640
uh but there needs to be a step minus

575
00:23:11,640 --> 00:23:13,559
one as well so something else has to

576
00:23:13,559 --> 00:23:15,600
happen before this which is the

577
00:23:15,600 --> 00:23:17,640
pre-distribution of that trusted

578
00:23:17,640 --> 00:23:21,179
identity so I in my key ring will have

579
00:23:21,179 --> 00:23:25,140
that so I can verify this stranger and

580
00:23:25,140 --> 00:23:28,380
understand if I can trust them

581
00:23:28,380 --> 00:23:30,360
and then once I do that in the final

582
00:23:30,360 --> 00:23:33,600
step it all checks out and I will trust

583
00:23:33,600 --> 00:23:35,820
that identity key so now just imagine

584
00:23:35,820 --> 00:23:38,039
all this is happening in an application

585
00:23:38,039 --> 00:23:40,260
between two applications and so forth

586
00:23:40,260 --> 00:23:41,940
rather than on some sort of

587
00:23:41,940 --> 00:23:43,620
infrastructure level

588
00:23:43,620 --> 00:23:45,000
but again

589
00:23:45,000 --> 00:23:47,280
there's a tofu moment

590
00:23:47,280 --> 00:23:50,039
which is when I send my initial request

591
00:23:50,039 --> 00:23:52,380
to The Trusted identity to be included

592
00:23:52,380 --> 00:23:53,760
in the trust chain

593
00:23:53,760 --> 00:23:56,280
we're coming back to that in a slide but

594
00:23:56,280 --> 00:23:57,840
first

595
00:23:57,840 --> 00:23:59,640
and then maybe I have a few developers

596
00:23:59,640 --> 00:24:02,520
in here I guess so just I don't have

597
00:24:02,520 --> 00:24:04,740
dark mode on this sorry so just bear it

598
00:24:04,740 --> 00:24:07,860
with me but uh so this is not the code

599
00:24:07,860 --> 00:24:10,260
for doing everything in the last slide

600
00:24:10,260 --> 00:24:13,980
but it's it's just showing uh how to

601
00:24:13,980 --> 00:24:15,780
create that root identity

602
00:24:15,780 --> 00:24:17,700
we're using the dime reference

603
00:24:17,700 --> 00:24:18,900
implementation

604
00:24:18,900 --> 00:24:21,120
so again we're creating a key we give it

605
00:24:21,120 --> 00:24:22,860
the capability of sine

606
00:24:22,860 --> 00:24:26,039
then we need to give capabilities to

607
00:24:26,039 --> 00:24:29,100
that identity that we want to use

608
00:24:29,100 --> 00:24:31,200
so in this case we're just doing an

609
00:24:31,200 --> 00:24:33,720
issue so we want this identity to be

610
00:24:33,720 --> 00:24:36,539
able to issue other identities

611
00:24:36,539 --> 00:24:38,340
so you just limits the scope of what we

612
00:24:38,340 --> 00:24:40,679
can do with an identity

613
00:24:40,679 --> 00:24:43,919
we create this identity issue request

614
00:24:43,919 --> 00:24:46,679
giving the key that will grab the public

615
00:24:46,679 --> 00:24:49,620
key from that and then with the the

616
00:24:49,620 --> 00:24:51,179
capabilities

617
00:24:51,179 --> 00:24:53,880
uh if this was not the route that we

618
00:24:53,880 --> 00:24:55,620
were creating we would take that irr and

619
00:24:55,620 --> 00:24:58,860
send off that to whoever has the trusted

620
00:24:58,860 --> 00:25:00,960
identity that could be our server our

621
00:25:00,960 --> 00:25:02,820
back end or it could be a different

622
00:25:02,820 --> 00:25:04,799
application

623
00:25:04,799 --> 00:25:06,600
but now we're actually creating the

624
00:25:06,600 --> 00:25:09,059
roots so we do a self-issue on this

625
00:25:09,059 --> 00:25:13,320
we give a random uuid a guid so yes as a

626
00:25:13,320 --> 00:25:15,419
subject ID we just needs something to

627
00:25:15,419 --> 00:25:16,500
refer to

628
00:25:16,500 --> 00:25:19,799
uh we get a put a valid time for one

629
00:25:19,799 --> 00:25:22,320
year on there we put the our key in

630
00:25:22,320 --> 00:25:24,179
because we want a song with our private

631
00:25:24,179 --> 00:25:27,960
key and we name the system so in this

632
00:25:27,960 --> 00:25:30,360
case it's just last com 2022 so now we

633
00:25:30,360 --> 00:25:33,059
actually start to create a system here

634
00:25:33,059 --> 00:25:36,240
from a root identity

635
00:25:36,240 --> 00:25:39,240
so how about that tofu

636
00:25:39,240 --> 00:25:43,340
anyone I idea what tofu stands for

637
00:25:43,740 --> 00:25:45,840
exactly

638
00:25:45,840 --> 00:25:47,820
so it's just the first use and what does

639
00:25:47,820 --> 00:25:51,559
that mean well it kind of means this

640
00:25:54,960 --> 00:25:57,179
because we don't know when we get

641
00:25:57,179 --> 00:26:00,059
something initially we have no idea if

642
00:26:00,059 --> 00:26:02,520
we can trust that public key coming in

643
00:26:02,520 --> 00:26:04,440
because it's just a random key we got

644
00:26:04,440 --> 00:26:06,900
through an API through whatever

645
00:26:06,900 --> 00:26:09,539
communication means that we're using

646
00:26:09,539 --> 00:26:12,299
uh and there are several kind of

647
00:26:12,299 --> 00:26:13,679
solutions to this I'm not going to go

648
00:26:13,679 --> 00:26:16,440
through them here sorry because it

649
00:26:16,440 --> 00:26:17,700
really depends on what kind of

650
00:26:17,700 --> 00:26:19,260
application You're Building

651
00:26:19,260 --> 00:26:21,240
uh they could be manual they can go

652
00:26:21,240 --> 00:26:24,120
automatic they could be anything but the

653
00:26:24,120 --> 00:26:26,460
thing I want to emphasize here is if

654
00:26:26,460 --> 00:26:28,799
you're building application based uh

655
00:26:28,799 --> 00:26:30,419
public key infrastructure into your

656
00:26:30,419 --> 00:26:33,299
application you need to pause at this

657
00:26:33,299 --> 00:26:36,480
point you need to understand how can I

658
00:26:36,480 --> 00:26:38,340
trust these public Keys coming in

659
00:26:38,340 --> 00:26:41,159
through my registration API or however

660
00:26:41,159 --> 00:26:44,220
I'm using it so you need to start to

661
00:26:44,220 --> 00:26:46,320
build that kind of thinking

662
00:26:46,320 --> 00:26:48,480
from start

663
00:26:48,480 --> 00:26:51,179
because once you signed it once you

664
00:26:51,179 --> 00:26:53,220
include it into your tree

665
00:26:53,220 --> 00:26:56,279
it is trusted and then

666
00:26:56,279 --> 00:26:58,740
there is no way back and you're going to

667
00:26:58,740 --> 00:27:00,480
start to have to work with revocation

668
00:27:00,480 --> 00:27:02,880
chains and things like that but but it

669
00:27:02,880 --> 00:27:05,100
is it is you're sealing the trust from

670
00:27:05,100 --> 00:27:07,699
this point on

671
00:27:08,100 --> 00:27:11,039
um so a practical example we are to use

672
00:27:11,039 --> 00:27:13,620
this how to use this so we have a setup

673
00:27:13,620 --> 00:27:16,740
which is a cloud service that is

674
00:27:16,740 --> 00:27:18,840
connected to an on-premises hub

675
00:27:18,840 --> 00:27:21,659
and the Hub itself is connected to a few

676
00:27:21,659 --> 00:27:24,480
devices uh that does different things

677
00:27:24,480 --> 00:27:26,640
some sort of classic iot setup or

678
00:27:26,640 --> 00:27:28,140
something

679
00:27:28,140 --> 00:27:30,480
and the cloud only talks to the

680
00:27:30,480 --> 00:27:32,039
on-premises hub

681
00:27:32,039 --> 00:27:33,900
and the cloud is interested in getting

682
00:27:33,900 --> 00:27:36,539
data from this network

683
00:27:36,539 --> 00:27:38,460
so what it would do is that it would

684
00:27:38,460 --> 00:27:40,799
create a message a dime message in this

685
00:27:40,799 --> 00:27:41,580
case

686
00:27:41,580 --> 00:27:43,200
where you put the instructions in there

687
00:27:43,200 --> 00:27:45,240
and those instructions are completely

688
00:27:45,240 --> 00:27:46,860
application specific that could be

689
00:27:46,860 --> 00:27:49,679
anything any format any type of

690
00:27:49,679 --> 00:27:51,900
instructions or any other type of data

691
00:27:51,900 --> 00:27:55,799
for that matter and then it wants it

692
00:27:55,799 --> 00:27:58,080
back end-to-end encrypted

693
00:27:58,080 --> 00:28:00,299
so you creates an exchange key

694
00:28:00,299 --> 00:28:02,460
it'll stick the public key inside this

695
00:28:02,460 --> 00:28:04,140
same message here

696
00:28:04,140 --> 00:28:06,600
I'll assign that with its own identity

697
00:28:06,600 --> 00:28:09,299
and send that over to the hub

698
00:28:09,299 --> 00:28:11,700
The Hub receives this

699
00:28:11,700 --> 00:28:14,039
you can read it we can't change it

700
00:28:14,039 --> 00:28:16,740
because it's Integrity protected

701
00:28:16,740 --> 00:28:19,260
but it can verify it

702
00:28:19,260 --> 00:28:20,940
and we'll do so

703
00:28:20,940 --> 00:28:23,640
and it will create a little tag on top

704
00:28:23,640 --> 00:28:24,720
of that

705
00:28:24,720 --> 00:28:26,400
with its own signature because the

706
00:28:26,400 --> 00:28:28,679
science does well and that tag proves

707
00:28:28,679 --> 00:28:30,419
that it's done some sort of operations

708
00:28:30,419 --> 00:28:32,760
it could be this verified it and checked

709
00:28:32,760 --> 00:28:34,980
it out so it makes sense

710
00:28:34,980 --> 00:28:36,840
and then I'll send over to whichever

711
00:28:36,840 --> 00:28:39,240
device is supposed to get this

712
00:28:39,240 --> 00:28:40,440
and

713
00:28:40,440 --> 00:28:42,900
if this device now trusts the pro

714
00:28:42,900 --> 00:28:44,640
on-premises hub

715
00:28:44,640 --> 00:28:48,480
then it only has to verify that tag it

716
00:28:48,480 --> 00:28:49,980
doesn't have to verify everything else

717
00:28:49,980 --> 00:28:52,559
it can if you want to but it doesn't

718
00:28:52,559 --> 00:28:55,340
have to and sometimes that's preferable

719
00:28:55,340 --> 00:28:58,020
to sort of keep verification down to

720
00:28:58,020 --> 00:28:59,100
minimum

721
00:28:59,100 --> 00:29:02,279
so it verifies the tag and if it's okay

722
00:29:02,279 --> 00:29:04,860
with that it'll start to collect the

723
00:29:04,860 --> 00:29:06,360
data that it was supposed to collect

724
00:29:06,360 --> 00:29:09,840
from the from the cloud

725
00:29:09,840 --> 00:29:12,360
uh and then it starts to formulate a

726
00:29:12,360 --> 00:29:14,400
response coming back

727
00:29:14,400 --> 00:29:16,500
so what first thing in this case it

728
00:29:16,500 --> 00:29:18,720
sticks in its own identity which is

729
00:29:18,720 --> 00:29:21,059
signed by the Hub so it's a hub is

730
00:29:21,059 --> 00:29:23,159
actually the one that's issuing it

731
00:29:23,159 --> 00:29:26,279
uh and then it takes the data and it's

732
00:29:26,279 --> 00:29:29,279
going to have to encrypt this so it

733
00:29:29,279 --> 00:29:31,320
creates another exchange key

734
00:29:31,320 --> 00:29:33,659
a grant the public key that came down

735
00:29:33,659 --> 00:29:35,820
from the exchange from the cloud and it

736
00:29:35,820 --> 00:29:37,559
does a different helmet agreement just

737
00:29:37,559 --> 00:29:39,600
to create a shared key and encrypt the

738
00:29:39,600 --> 00:29:42,539
data and stick that into a message now

739
00:29:42,539 --> 00:29:44,220
that sounds a lot of things to do but

740
00:29:44,220 --> 00:29:46,320
dime does most of this and the reference

741
00:29:46,320 --> 00:29:48,600
implementations

742
00:29:48,600 --> 00:29:49,260
um

743
00:29:49,260 --> 00:29:52,020
and then it'll do one other special

744
00:29:52,020 --> 00:29:54,539
thing here it will actually create a

745
00:29:54,539 --> 00:29:58,080
link between the original request and

746
00:29:58,080 --> 00:29:59,279
the response

747
00:29:59,279 --> 00:30:01,679
so now there are those are tied together

748
00:30:01,679 --> 00:30:04,320
so you can actually verify that this

749
00:30:04,320 --> 00:30:06,899
particular response coming back is from

750
00:30:06,899 --> 00:30:09,120
my original request we're gonna I'm

751
00:30:09,120 --> 00:30:12,960
gonna look at that in the next slide

752
00:30:12,960 --> 00:30:13,799
um

753
00:30:13,799 --> 00:30:15,659
but the final thing it needs to do is

754
00:30:15,659 --> 00:30:17,340
just stick that other public key in

755
00:30:17,340 --> 00:30:19,799
there to so that the cloud can actually

756
00:30:19,799 --> 00:30:22,200
also get that shared key for the

757
00:30:22,200 --> 00:30:23,520
end-to-end encryption at some point

758
00:30:23,520 --> 00:30:27,120
we'll send it over back to the hub

759
00:30:27,120 --> 00:30:29,460
uh and the harm began you can't actually

760
00:30:29,460 --> 00:30:31,080
change this

761
00:30:31,080 --> 00:30:33,840
you can read some parts but he can't

762
00:30:33,840 --> 00:30:35,539
really then turn encrypted data now

763
00:30:35,539 --> 00:30:38,520
because it's end-to-end encrypted

764
00:30:38,520 --> 00:30:41,220
but it can verify whatever you can

765
00:30:41,220 --> 00:30:43,500
verify I'll stick another tag on that

766
00:30:43,500 --> 00:30:45,840
and just say okay I'll verify this this

767
00:30:45,840 --> 00:30:48,059
checks out I trust this node that is

768
00:30:48,059 --> 00:30:49,620
sending the data back

769
00:30:49,620 --> 00:30:52,799
I'll send that package up to the cloud

770
00:30:52,799 --> 00:30:55,320
and now the clouds gets that the cloud

771
00:30:55,320 --> 00:30:57,120
can verify the whole thing if it likes

772
00:30:57,120 --> 00:31:00,679
or just trust the tag that the hubbus

773
00:31:00,679 --> 00:31:03,299
provided and if it's happy with

774
00:31:03,299 --> 00:31:06,360
everything it'll just gets that exchange

775
00:31:06,360 --> 00:31:08,760
key that it had originally get the

776
00:31:08,760 --> 00:31:11,039
public key from the message from the

777
00:31:11,039 --> 00:31:15,480
node and generate that share key decrypt

778
00:31:15,480 --> 00:31:16,980
the data and do whatever it's supposed

779
00:31:16,980 --> 00:31:18,480
to do

780
00:31:18,480 --> 00:31:20,100
so there's a lot of things going on

781
00:31:20,100 --> 00:31:22,260
maybe application based but from a dime

782
00:31:22,260 --> 00:31:24,960
perspective this is the steps in this

783
00:31:24,960 --> 00:31:28,200
scenario that would uh need to happen to

784
00:31:28,200 --> 00:31:30,779
keep this really secure

785
00:31:30,779 --> 00:31:33,720
so about that link

786
00:31:33,720 --> 00:31:36,360
so we take that original request

787
00:31:36,360 --> 00:31:40,260
and we want to link this to a response

788
00:31:40,260 --> 00:31:41,880
that we're going to generate

789
00:31:41,880 --> 00:31:44,940
so it's not that difficult we just grab

790
00:31:44,940 --> 00:31:47,820
a few things from this original message

791
00:31:47,820 --> 00:31:50,640
which is the item header so in this case

792
00:31:50,640 --> 00:31:53,760
MSG so we saw id id for identities

793
00:31:53,760 --> 00:31:57,360
before this now it is just an MSG so

794
00:31:57,360 --> 00:31:59,520
this kind of just tells whoever's going

795
00:31:59,520 --> 00:32:01,919
to verify this what the type of message

796
00:32:01,919 --> 00:32:03,899
is it is

797
00:32:03,899 --> 00:32:05,880
and then it's the unique identifier

798
00:32:05,880 --> 00:32:07,799
which is a good

799
00:32:07,799 --> 00:32:10,380
which is unique for this message

800
00:32:10,380 --> 00:32:13,020
and then there is a thumbprint a secure

801
00:32:13,020 --> 00:32:15,840
hash of the whole message and these

802
00:32:15,840 --> 00:32:17,399
three things are concatenated together

803
00:32:17,399 --> 00:32:19,500
into a string

804
00:32:19,500 --> 00:32:22,679
and forms the basis of an item link

805
00:32:22,679 --> 00:32:24,659
so it gives a lot of information to the

806
00:32:24,659 --> 00:32:26,460
application of okay it's a message we're

807
00:32:26,460 --> 00:32:28,740
talking about this is the specific guide

808
00:32:28,740 --> 00:32:31,140
and here's a hash of it

809
00:32:31,140 --> 00:32:33,600
and then if you remember that the node

810
00:32:33,600 --> 00:32:36,120
signed its response coming back so if we

811
00:32:36,120 --> 00:32:37,380
sign it as well

812
00:32:37,380 --> 00:32:39,360
then of course it's Integrity protect it

813
00:32:39,360 --> 00:32:41,340
and we created a strong cryptographic

814
00:32:41,340 --> 00:32:45,120
link to the request the original request

815
00:32:45,120 --> 00:32:47,840
in the response

816
00:32:47,840 --> 00:32:50,880
uh sounds like a lot of work but in dime

817
00:32:50,880 --> 00:32:52,320
that's actually

818
00:32:52,320 --> 00:32:54,480
one line of code

819
00:32:54,480 --> 00:32:57,480
so in the line three here the node

820
00:32:57,480 --> 00:32:59,580
message adds an item link which is the

821
00:32:59,580 --> 00:33:02,399
cloud message that it got from the cloud

822
00:33:02,399 --> 00:33:05,159
and that's actually creating this on top

823
00:33:05,159 --> 00:33:07,860
and includes that on the message

824
00:33:07,860 --> 00:33:09,360
of course there's a lot of things going

825
00:33:09,360 --> 00:33:12,059
on like things above there and there's a

826
00:33:12,059 --> 00:33:13,620
hash being generated

827
00:33:13,620 --> 00:33:15,960
but using the reference implementation

828
00:33:15,960 --> 00:33:18,600
that's all you do and then when the

829
00:33:18,600 --> 00:33:21,419
cloud gets this it can do verify linked

830
00:33:21,419 --> 00:33:22,799
items on it

831
00:33:22,799 --> 00:33:26,220
or you can stick a list of potential uh

832
00:33:26,220 --> 00:33:28,559
items that should be verified with and

833
00:33:28,559 --> 00:33:30,179
is looking for this Integrity State

834
00:33:30,179 --> 00:33:32,100
valid item links

835
00:33:32,100 --> 00:33:34,019
and if that comes out

836
00:33:34,019 --> 00:33:37,080
it has verified the string out there to

837
00:33:37,080 --> 00:33:38,880
be correct

838
00:33:38,880 --> 00:33:41,220
uh you can call verifying it as well

839
00:33:41,220 --> 00:33:43,320
then it will verify everything at once

840
00:33:43,320 --> 00:33:45,360
but this is just specific for Linked

841
00:33:45,360 --> 00:33:47,640
items

842
00:33:47,640 --> 00:33:48,360
um

843
00:33:48,360 --> 00:33:49,620
so

844
00:33:49,620 --> 00:33:52,799
there's always some problem somewhere

845
00:33:52,799 --> 00:33:55,799
uh pgis have their own

846
00:33:55,799 --> 00:33:57,779
and this problem here is really about

847
00:33:57,779 --> 00:33:59,399
time

848
00:33:59,399 --> 00:34:02,460
so we have the same scenario so both

849
00:34:02,460 --> 00:34:04,380
sides is running at system time on their

850
00:34:04,380 --> 00:34:05,279
own

851
00:34:05,279 --> 00:34:08,940
they may be time synced with the time

852
00:34:08,940 --> 00:34:11,159
server as they should be but that

853
00:34:11,159 --> 00:34:12,540
doesn't mean they're running the exact

854
00:34:12,540 --> 00:34:13,980
same time

855
00:34:13,980 --> 00:34:16,560
to be some differences

856
00:34:16,560 --> 00:34:18,659
and when we start sending instant

857
00:34:18,659 --> 00:34:21,300
messages to all these different nodes

858
00:34:21,300 --> 00:34:22,619
then

859
00:34:22,619 --> 00:34:24,780
and we verify that down to millisecond

860
00:34:24,780 --> 00:34:26,940
it can be a problem

861
00:34:26,940 --> 00:34:29,159
so in this case I'm just going to talk

862
00:34:29,159 --> 00:34:31,500
about the seconds to keep it simple so

863
00:34:31,500 --> 00:34:34,440
the cloud is running 16 seconds whereas

864
00:34:34,440 --> 00:34:36,839
The Hub is running 14 seconds so it

865
00:34:36,839 --> 00:34:38,339
means the Hub is actually two seconds

866
00:34:38,339 --> 00:34:41,040
behind the cloud

867
00:34:41,040 --> 00:34:44,639
uh so the clock Cloud creates a message

868
00:34:44,639 --> 00:34:48,119
and that gets an issued update in burned

869
00:34:48,119 --> 00:34:51,060
into that which is 16 seconds

870
00:34:51,060 --> 00:34:55,020
and sends that over to the hub which

871
00:34:55,020 --> 00:34:57,240
receives it if we assume there's a

872
00:34:57,240 --> 00:34:59,700
transfer time of one second it receives

873
00:34:59,700 --> 00:35:02,580
it at 15 seconds

874
00:35:02,580 --> 00:35:05,580
so when the The Hub now calls uh

875
00:35:05,580 --> 00:35:07,080
verifying this

876
00:35:07,080 --> 00:35:09,060
it will of course get an error message

877
00:35:09,060 --> 00:35:12,180
saying Integrity State failed use before

878
00:35:12,180 --> 00:35:13,500
issued

879
00:35:13,500 --> 00:35:15,420
which is really saying that this message

880
00:35:15,420 --> 00:35:17,940
from the point of view of the Hub came

881
00:35:17,940 --> 00:35:19,320
from the future

882
00:35:19,320 --> 00:35:23,040
which is a I I guess that's a nice feat

883
00:35:23,040 --> 00:35:25,619
in itself but it does have a boring

884
00:35:25,619 --> 00:35:28,160
technical explanation which is basically

885
00:35:28,160 --> 00:35:30,960
that the times here are out of sync

886
00:35:30,960 --> 00:35:35,359
between the two different uh devices

887
00:35:35,520 --> 00:35:36,839
um now

888
00:35:36,839 --> 00:35:39,359
there are a couple of solutions to this

889
00:35:39,359 --> 00:35:41,760
in Windows servers that can issue

890
00:35:41,760 --> 00:35:43,320
certificates like a certificate

891
00:35:43,320 --> 00:35:45,960
Authority or within a network they have

892
00:35:45,960 --> 00:35:48,119
sold this Microsoft Microsoft has sold

893
00:35:48,119 --> 00:35:48,960
this

894
00:35:48,960 --> 00:35:50,760
but then they've done a workaround

895
00:35:50,760 --> 00:35:51,720
basically

896
00:35:51,720 --> 00:35:54,660
so when they issue certificates

897
00:35:54,660 --> 00:35:59,099
they issue them 10 15 minutes back in

898
00:35:59,099 --> 00:36:01,440
time so when the receiver gets it they

899
00:36:01,440 --> 00:36:03,599
can start using it directly

900
00:36:03,599 --> 00:36:05,460
so that's what I would call a workaround

901
00:36:05,460 --> 00:36:06,720
it does work

902
00:36:06,720 --> 00:36:08,160
but it's a little bit more complicated

903
00:36:08,160 --> 00:36:10,500
when you send instant messages between

904
00:36:10,500 --> 00:36:12,599
applications

905
00:36:12,599 --> 00:36:16,440
so down format doesn't solve this in

906
00:36:16,440 --> 00:36:19,500
itself but the reference implementations

907
00:36:19,500 --> 00:36:22,440
they have tools to help with that

908
00:36:22,440 --> 00:36:25,920
and one of them is Grace Period

909
00:36:25,920 --> 00:36:28,200
so you can set the grace period and this

910
00:36:28,200 --> 00:36:30,240
case is set to two that means you're

911
00:36:30,240 --> 00:36:32,760
setting a grace period of two seconds

912
00:36:32,760 --> 00:36:35,280
so you create a window of error margin

913
00:36:35,280 --> 00:36:38,579
which is a total of four seconds so

914
00:36:38,579 --> 00:36:42,180
minus two seconds and plus two seconds

915
00:36:42,180 --> 00:36:45,359
so when the Hub now receives it at 15

916
00:36:45,359 --> 00:36:46,560
seconds

917
00:36:46,560 --> 00:36:49,440
it will have a window which is

918
00:36:49,440 --> 00:36:53,040
from 13 seconds to 17 seconds

919
00:36:53,040 --> 00:36:56,099
so the issue that the 16 second fits

920
00:36:56,099 --> 00:36:58,460
that window

921
00:36:58,700 --> 00:37:02,160
so when it now does verifying it it will

922
00:37:02,160 --> 00:37:03,780
actually get Integrity State complete

923
00:37:03,780 --> 00:37:05,220
instead

924
00:37:05,220 --> 00:37:07,680
this is just one way of handling those

925
00:37:07,680 --> 00:37:09,960
small time differences between different

926
00:37:09,960 --> 00:37:12,440
devices

927
00:37:13,200 --> 00:37:14,339
um

928
00:37:14,339 --> 00:37:16,140
so finally

929
00:37:16,140 --> 00:37:18,140
this is very important to understand

930
00:37:18,140 --> 00:37:20,339
because these are these are things that

931
00:37:20,339 --> 00:37:21,960
we don't generally have to care about

932
00:37:21,960 --> 00:37:24,900
when we build applications we we sort of

933
00:37:24,900 --> 00:37:26,460
rely on the underlying infrastructure

934
00:37:26,460 --> 00:37:29,820
but digital trust is not earned

935
00:37:29,820 --> 00:37:32,220
we just get a public key and then we'll

936
00:37:32,220 --> 00:37:34,859
you know include that into our

937
00:37:34,859 --> 00:37:37,920
applications trust chain but once we've

938
00:37:37,920 --> 00:37:39,839
done that it's it's just sealed by

939
00:37:39,839 --> 00:37:41,880
encryptographic algorithm we trust it

940
00:37:41,880 --> 00:37:43,320
blindly

941
00:37:43,320 --> 00:37:45,480
there's there's no earning to that it

942
00:37:45,480 --> 00:37:48,960
could be verified but it's given really

943
00:37:48,960 --> 00:37:52,380
as we give trust to our application

944
00:37:52,380 --> 00:37:54,660
rather than they earning it so this is

945
00:37:54,660 --> 00:37:56,579
something we need to consider when we

946
00:37:56,579 --> 00:37:59,060
build this

947
00:37:59,280 --> 00:38:01,680
um that's pretty much everything just as

948
00:38:01,680 --> 00:38:04,680
an introduction on application based

949
00:38:04,680 --> 00:38:07,220
public key infrastructure using dime

950
00:38:07,220 --> 00:38:10,260
uh if you have some some reason want to

951
00:38:10,260 --> 00:38:12,540
you know talk to me later or get in

952
00:38:12,540 --> 00:38:15,660
contact my details are there uh there's

953
00:38:15,660 --> 00:38:17,820
also a URL there which is actually to

954
00:38:17,820 --> 00:38:20,460
the specification of the dime format

955
00:38:20,460 --> 00:38:22,859
itself which in turn has

956
00:38:22,859 --> 00:38:25,140
um links to reference implementations if

957
00:38:25,140 --> 00:38:28,320
that's of interest you can go there

958
00:38:28,320 --> 00:38:31,800
I do we have lots of time I've seen for

959
00:38:31,800 --> 00:38:32,839
questions

960
00:38:32,839 --> 00:38:36,540
and I have T-shirts here

961
00:38:36,540 --> 00:38:40,140
same ones that I have on me and anyone

962
00:38:40,140 --> 00:38:42,660
who has a question will get a t-shirt so

963
00:38:42,660 --> 00:38:44,700
you better think hard now there's a

964
00:38:44,700 --> 00:38:46,200
different sizes there so I guess you're

965
00:38:46,200 --> 00:38:48,900
gonna have to fight for that

966
00:38:48,900 --> 00:38:51,480
um but it has to be relevant there has

967
00:38:51,480 --> 00:38:54,780
to be a pki or or a dime related

968
00:38:54,780 --> 00:38:57,060
question so the question you can't ask

969
00:38:57,060 --> 00:38:59,940
or you can of course is how we print how

970
00:38:59,940 --> 00:39:01,980
I pronounce my surname and it's a very

971
00:39:01,980 --> 00:39:04,440
good question but it's not going to earn

972
00:39:04,440 --> 00:39:06,000
you a t-shirt though

973
00:39:06,000 --> 00:39:07,320
so

974
00:39:07,320 --> 00:39:10,700
thank you so any questions

975
00:39:16,320 --> 00:39:17,040
um

976
00:39:17,040 --> 00:39:19,859
I I don't think it's in production

977
00:39:19,859 --> 00:39:22,920
anywhere right now but it is on its way

978
00:39:22,920 --> 00:39:26,760
uh I the one thing with open source is

979
00:39:26,760 --> 00:39:29,220
that you have less control and you know

980
00:39:29,220 --> 00:39:31,680
visibility of who's using it but I do

981
00:39:31,680 --> 00:39:35,640
know of a case of um a financial

982
00:39:35,640 --> 00:39:39,240
institution in Asia that is building it

983
00:39:39,240 --> 00:39:45,060
into a uh a two-factor uh application

984
00:39:45,060 --> 00:39:47,760
so it's it's using it to do device

985
00:39:47,760 --> 00:39:50,240
binding and sending secure messages

986
00:39:50,240 --> 00:39:54,300
between uh customers in the bank and so

987
00:39:54,300 --> 00:39:56,280
forth

988
00:39:56,280 --> 00:39:58,020
so yeah

989
00:39:58,020 --> 00:40:00,000
is there a work like top secret on that

990
00:40:00,000 --> 00:40:02,300
or are they

991
00:40:03,000 --> 00:40:05,880
I have no idea actually uh I don't know

992
00:40:05,880 --> 00:40:08,339
the level I I I think it's not top

993
00:40:08,339 --> 00:40:10,140
secret

994
00:40:10,140 --> 00:40:11,339
um

995
00:40:11,339 --> 00:40:12,780
yeah

996
00:40:12,780 --> 00:40:16,740
so it's it's uh I know they're not done

997
00:40:16,740 --> 00:40:18,780
um Banks take a little bit longer than

998
00:40:18,780 --> 00:40:21,420
most other companies so I'm not sure

999
00:40:21,420 --> 00:40:22,380
when

1000
00:40:22,380 --> 00:40:25,260
but it's it's pretty mature so

1001
00:40:25,260 --> 00:40:28,380
it may be out shortly actually

1002
00:40:28,380 --> 00:40:30,900
so there could be any other progress I I

1003
00:40:30,900 --> 00:40:33,720
don't have the sort of Statistics but

1004
00:40:33,720 --> 00:40:35,700
who's using it it'd be nice to know if

1005
00:40:35,700 --> 00:40:37,560
there's like any big projects or things

1006
00:40:37,560 --> 00:40:39,420
like that's using it I guess that's the

1007
00:40:39,420 --> 00:40:41,220
nature of Open Source sometimes is that

1008
00:40:41,220 --> 00:40:42,180
you don't

1009
00:40:42,180 --> 00:40:45,500
know who's using it

1010
00:40:50,640 --> 00:40:53,180
yeah

1011
00:40:55,460 --> 00:40:59,099
I guess I could make this talk two hours

1012
00:40:59,099 --> 00:41:01,800
or three hours because there's so many

1013
00:41:01,800 --> 00:41:04,920
things with peaky eye and and you know

1014
00:41:04,920 --> 00:41:08,220
app developers are are spared those

1015
00:41:08,220 --> 00:41:10,619
problem usually but of course if we

1016
00:41:10,619 --> 00:41:12,960
start to move out but Peak AI into an

1017
00:41:12,960 --> 00:41:15,780
application we we will run into those as

1018
00:41:15,780 --> 00:41:18,000
well there's a couple of good and bad

1019
00:41:18,000 --> 00:41:20,520
solutions for it one of them which I

1020
00:41:20,520 --> 00:41:23,160
have seen been used is that we don't

1021
00:41:23,160 --> 00:41:25,920
expire you know we'll just run with it

1022
00:41:25,920 --> 00:41:28,140
it's fine we create the trust and we go

1023
00:41:28,140 --> 00:41:30,960
with it that's fine uh if that's good or

1024
00:41:30,960 --> 00:41:34,200
bad it really depends uh if you're using

1025
00:41:34,200 --> 00:41:36,839
it to authenticate users and things then

1026
00:41:36,839 --> 00:41:39,200
maybe it's bad if you're using a

1027
00:41:39,200 --> 00:41:42,119
reason you just have some sort of okay

1028
00:41:42,119 --> 00:41:45,300
these are unique devices maybe it's not

1029
00:41:45,300 --> 00:41:46,520
as bad

1030
00:41:46,520 --> 00:41:49,560
but at some point you're gonna run into

1031
00:41:49,560 --> 00:41:51,420
revocation

1032
00:41:51,420 --> 00:41:54,300
together with expiration so you want to

1033
00:41:54,300 --> 00:41:56,520
have rotation you want to have a life

1034
00:41:56,520 --> 00:41:58,680
cycle and all those things is going to

1035
00:41:58,680 --> 00:42:01,619
come in at some point and those are not

1036
00:42:01,619 --> 00:42:03,780
that easy to solve and unfortunately

1037
00:42:03,780 --> 00:42:07,040
things like this don't solve it for you

1038
00:42:07,040 --> 00:42:09,599
they may even introduce it to you

1039
00:42:09,599 --> 00:42:11,579
depending on how the way you're looking

1040
00:42:11,579 --> 00:42:16,200
at it but it it comes with this type of

1041
00:42:16,200 --> 00:42:18,420
solutions pkis

1042
00:42:18,420 --> 00:42:20,820
have been around for a long time

1043
00:42:20,820 --> 00:42:23,400
but they still struggle with it on a low

1044
00:42:23,400 --> 00:42:25,380
level with certificates in the whole X

1045
00:42:25,380 --> 00:42:31,320
509 and those standards is not very easy

1046
00:42:31,320 --> 00:42:34,079
um it really depends on your application

1047
00:42:34,079 --> 00:42:36,359
if your application is based on on like

1048
00:42:36,359 --> 00:42:39,380
a mobile app that's gonna be used

1049
00:42:39,380 --> 00:42:42,540
sometimes you know you may

1050
00:42:42,540 --> 00:42:47,220
not hits a a time where you actually can

1051
00:42:47,220 --> 00:42:49,440
rotate it because next time you hit it

1052
00:42:49,440 --> 00:42:51,000
it's expired

1053
00:42:51,000 --> 00:42:52,859
so you need to take those decisions you

1054
00:42:52,859 --> 00:42:55,140
need to figure out how to handle them

1055
00:42:55,140 --> 00:42:57,180
uh and and that that could be a

1056
00:42:57,180 --> 00:42:58,619
follow-up talk maybe or something

1057
00:42:58,619 --> 00:43:01,200
because it is really interesting there's

1058
00:43:01,200 --> 00:43:04,740
so many good and bad solutions for that

1059
00:43:04,740 --> 00:43:07,440
um but I I from my point of view the

1060
00:43:07,440 --> 00:43:09,359
security benefits of actually using

1061
00:43:09,359 --> 00:43:11,339
something like this

1062
00:43:11,339 --> 00:43:14,700
actually overweights the negative signs

1063
00:43:14,700 --> 00:43:16,440
where you actually have to handle

1064
00:43:16,440 --> 00:43:19,380
expirations and rotations and people

1065
00:43:19,380 --> 00:43:22,260
losing their their private keys and you

1066
00:43:22,260 --> 00:43:24,599
have to revoke them and things like that

1067
00:43:24,599 --> 00:43:26,280
so

1068
00:43:26,280 --> 00:43:26,940
um

1069
00:43:26,940 --> 00:43:29,700
you do get better security but with that

1070
00:43:29,700 --> 00:43:31,859
I guess you get a little bit more

1071
00:43:31,859 --> 00:43:35,060
problems sometimes

1072
00:43:38,280 --> 00:43:41,579
you're all happy no more questions

1073
00:43:41,579 --> 00:43:44,359
yeah so

1074
00:43:44,460 --> 00:43:47,240
you're using

1075
00:43:49,440 --> 00:43:51,420
you're using graphic captions and

1076
00:43:51,420 --> 00:43:54,839
algorithms is kind of built in to it say

1077
00:43:54,839 --> 00:43:57,720
it was using water and it was found to

1078
00:43:57,720 --> 00:44:00,060
be terrible

1079
00:44:00,060 --> 00:44:03,180
like yeah

1080
00:44:03,180 --> 00:44:06,300
yeah well that's that's a common fear of

1081
00:44:06,300 --> 00:44:08,700
everything isn't it I mean that there's

1082
00:44:08,700 --> 00:44:10,920
I think it's on that though ASP as well

1083
00:44:10,920 --> 00:44:12,599
there you know you're just using old

1084
00:44:12,599 --> 00:44:14,579
stuff that is not considered secure

1085
00:44:14,579 --> 00:44:16,140
anymore

1086
00:44:16,140 --> 00:44:18,599
um and that is always a risk

1087
00:44:18,599 --> 00:44:20,940
um but the way I see it in this case is

1088
00:44:20,940 --> 00:44:22,500
that

1089
00:44:22,500 --> 00:44:24,180
and and I think that's the strength of

1090
00:44:24,180 --> 00:44:25,920
Open Source and then there's a

1091
00:44:25,920 --> 00:44:28,859
filtration to that of course but you are

1092
00:44:28,859 --> 00:44:32,040
kind of piggybacking on people other

1093
00:44:32,040 --> 00:44:33,900
people's work and hopefully those other

1094
00:44:33,900 --> 00:44:35,280
people actually know what they're doing

1095
00:44:35,280 --> 00:44:37,680
and that's really what you're trying to

1096
00:44:37,680 --> 00:44:40,500
get here is to use expertise from

1097
00:44:40,500 --> 00:44:44,640
somewhere else and fill whatever skills

1098
00:44:44,640 --> 00:44:46,680
that you may be lacking or or the

1099
00:44:46,680 --> 00:44:50,640
developers are lacking and but it could

1100
00:44:50,640 --> 00:44:52,800
happen it could be all of a sudden it

1101
00:44:52,800 --> 00:44:55,260
turns out that Sean one wasn't actually

1102
00:44:55,260 --> 00:44:58,740
the Fantastic uh hashing that that it

1103
00:44:58,740 --> 00:45:00,599
was supposed to be you just realized

1104
00:45:00,599 --> 00:45:03,720
there are md5 same thing or or deaths

1105
00:45:03,720 --> 00:45:06,180
you know that that was considered to be

1106
00:45:06,180 --> 00:45:08,099
really secure until it wasn't

1107
00:45:08,099 --> 00:45:10,380
so it happens

1108
00:45:10,380 --> 00:45:12,720
um but the interesting thing here is

1109
00:45:12,720 --> 00:45:14,880
that dime Works in Suites

1110
00:45:14,880 --> 00:45:17,339
and those Suites are compiled of you

1111
00:45:17,339 --> 00:45:20,819
know with certain certain uh those all

1112
00:45:20,819 --> 00:45:22,079
those algorithms work well together

1113
00:45:22,079 --> 00:45:24,300
they're considered secure

1114
00:45:24,300 --> 00:45:26,880
but there could be something in them so

1115
00:45:26,880 --> 00:45:29,220
what would happen if there was some sort

1116
00:45:29,220 --> 00:45:31,020
of vulnerability That Couldn't actually

1117
00:45:31,020 --> 00:45:34,079
just be patched it has to change the

1118
00:45:34,079 --> 00:45:36,540
algorithms then

1119
00:45:36,540 --> 00:45:38,640
you would probably have to deprecate

1120
00:45:38,640 --> 00:45:41,160
that sweet and introduce another Suite

1121
00:45:41,160 --> 00:45:46,680
so if I just go back many slides

1122
00:45:46,680 --> 00:45:48,839
I'll just show you a little indication

1123
00:45:48,839 --> 00:45:51,599
of how it works because there was there

1124
00:45:51,599 --> 00:45:54,420
blatantly on the screen

1125
00:45:54,420 --> 00:45:56,339
I should have used a mouse because that

1126
00:45:56,339 --> 00:45:58,940
would be quicker

1127
00:46:00,420 --> 00:46:02,720
I think it's this

1128
00:46:02,720 --> 00:46:07,800
oh they don't pass it no there it is

1129
00:46:07,800 --> 00:46:09,300
okay

1130
00:46:09,300 --> 00:46:12,119
so you see there is actually three were

1131
00:46:12,119 --> 00:46:16,500
three characters there it says d d c uh

1132
00:46:16,500 --> 00:46:18,359
DSC

1133
00:46:18,359 --> 00:46:23,640
it just stands for Diamond standard uh

1134
00:46:23,819 --> 00:46:26,880
it should actually be DCs

1135
00:46:26,880 --> 00:46:30,540
I think Dan cryptography is no standard

1136
00:46:30,540 --> 00:46:33,060
cryptography is a sweet I think it is so

1137
00:46:33,060 --> 00:46:34,740
there's basically just specifies that

1138
00:46:34,740 --> 00:46:37,079
this particular public key belongs to a

1139
00:46:37,079 --> 00:46:38,579
certain Suite

1140
00:46:38,579 --> 00:46:41,520
so you can add multiple Suites uh now

1141
00:46:41,520 --> 00:46:44,040
there's only one but

1142
00:46:44,040 --> 00:46:47,400
then the implementation of dying would

1143
00:46:47,400 --> 00:46:50,339
actually recognize okay this key is of

1144
00:46:50,339 --> 00:46:51,599
this Suite so I'm going to use these

1145
00:46:51,599 --> 00:46:53,040
algorithms

1146
00:46:53,040 --> 00:46:55,619
and the one I haven't shown here is that

1147
00:46:55,619 --> 00:46:59,099
this this base64 down here which is the

1148
00:46:59,099 --> 00:47:00,900
signature is not actually just the

1149
00:47:00,900 --> 00:47:02,520
signature there's a couple of

1150
00:47:02,520 --> 00:47:04,319
information in here as well including

1151
00:47:04,319 --> 00:47:08,280
which Suite was used to generate it also

1152
00:47:08,280 --> 00:47:11,400
there are a public

1153
00:47:11,400 --> 00:47:14,339
uh an identifier based on the public key

1154
00:47:14,339 --> 00:47:16,560
that actually points back to the public

1155
00:47:16,560 --> 00:47:19,740
key so you could see on these signatures

1156
00:47:19,740 --> 00:47:22,020
which key was used as well so there's

1157
00:47:22,020 --> 00:47:24,079
more information in here that it include

1158
00:47:24,079 --> 00:47:28,079
uh so all these things would help it's

1159
00:47:28,079 --> 00:47:29,700
not going to make things better when

1160
00:47:29,700 --> 00:47:32,220
something happens but it will help to

1161
00:47:32,220 --> 00:47:35,280
try to mitigate and migrate

1162
00:47:35,280 --> 00:47:38,119
to something that is at that point more

1163
00:47:38,119 --> 00:47:41,480
considered secure

1164
00:47:45,599 --> 00:47:48,260
good

1165
00:48:00,380 --> 00:48:03,540
I would say it's pretty easy so the

1166
00:48:03,540 --> 00:48:05,700
suite is using now is the sodium sweet

1167
00:48:05,700 --> 00:48:07,040
really

1168
00:48:07,040 --> 00:48:10,920
the suite of may be missing is depends

1169
00:48:10,920 --> 00:48:13,079
on on what kind of regulations and

1170
00:48:13,079 --> 00:48:15,420
things that are are like the standard

1171
00:48:15,420 --> 00:48:19,859
Suite like AES and and using maybe now

1172
00:48:19,859 --> 00:48:24,480
it's using uh 80 25 519 as the elliptic

1173
00:48:24,480 --> 00:48:27,119
curve wishes becoming more and more

1174
00:48:27,119 --> 00:48:31,079
popular but there are NSA uh specified

1175
00:48:31,079 --> 00:48:33,780
curves that may you may need to have to

1176
00:48:33,780 --> 00:48:34,619
use

1177
00:48:34,619 --> 00:48:38,160
so if you wanted to do a your own Suite

1178
00:48:38,160 --> 00:48:41,339
it's a plug and play thing uh where

1179
00:48:41,339 --> 00:48:43,619
there is an interface well I'm not now

1180
00:48:43,619 --> 00:48:44,819
I'm just talking about the reference

1181
00:48:44,819 --> 00:48:47,339
implementation because the dime data

1182
00:48:47,339 --> 00:48:49,079
format doesn't really care about this

1183
00:48:49,079 --> 00:48:51,540
but the reference implementation has a

1184
00:48:51,540 --> 00:48:53,000
interface

1185
00:48:53,000 --> 00:48:55,560
which represents cryptographic

1186
00:48:55,560 --> 00:48:56,760
operations

1187
00:48:56,760 --> 00:48:59,460
and then you register them on Startup

1188
00:48:59,460 --> 00:49:01,380
and saying I have these

1189
00:49:01,380 --> 00:49:04,140
and then you can either specify default

1190
00:49:04,140 --> 00:49:06,599
one or you can specify one at that

1191
00:49:06,599 --> 00:49:08,160
particular time when you need to use it

1192
00:49:08,160 --> 00:49:10,020
and that then you're going to have a

1193
00:49:10,020 --> 00:49:12,420
short for that whatever that could be

1194
00:49:12,420 --> 00:49:13,680
NSA

1195
00:49:13,680 --> 00:49:15,180
I don't know if that's a good short but

1196
00:49:15,180 --> 00:49:17,520
it could be that and it would say that

1197
00:49:17,520 --> 00:49:18,720
up there

1198
00:49:18,720 --> 00:49:21,180
instead and that's how to recognize it

1199
00:49:21,180 --> 00:49:22,859
and if it doesn't have it there's going

1200
00:49:22,859 --> 00:49:24,420
to be an exception thrown saying I can't

1201
00:49:24,420 --> 00:49:25,760
handle this

1202
00:49:25,760 --> 00:49:29,160
uh but it is really built to be

1203
00:49:29,160 --> 00:49:32,400
expandable in that way so it should not

1204
00:49:32,400 --> 00:49:35,400
be too much of a problem doing that

1205
00:49:35,400 --> 00:49:38,000
if

