1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:54,199
[Music]

6
00:00:54,199 --> 00:00:57,780
oh that's gone uh good afternoon

7
00:00:57,780 --> 00:00:59,879
my name is amaran alvidza nobody can

8
00:00:59,879 --> 00:01:02,640
pronounce that as uh you might imagine

9
00:01:02,640 --> 00:01:05,099
so a lot of people call me Airman which

10
00:01:05,099 --> 00:01:08,659
is fair uh today I'm gonna talk about

11
00:01:08,659 --> 00:01:12,119
securing managed kubernetes clusters so

12
00:01:12,119 --> 00:01:14,340
when I say manage what what do you guys

13
00:01:14,340 --> 00:01:16,700
think about

14
00:01:18,080 --> 00:01:20,939
exactly exactly

15
00:01:20,939 --> 00:01:22,259
um

16
00:01:22,259 --> 00:01:25,799
this talk was originally created as an

17
00:01:25,799 --> 00:01:27,900
internal talk a test stop the company I

18
00:01:27,900 --> 00:01:29,700
was working for at the time

19
00:01:29,700 --> 00:01:32,460
uh we're getting ready to launch a SAS

20
00:01:32,460 --> 00:01:35,100
application a new SAS application that

21
00:01:35,100 --> 00:01:37,680
was going to be hosted in kubernetes

22
00:01:37,680 --> 00:01:40,380
and this is essentially the result of

23
00:01:40,380 --> 00:01:42,659
several months of learning threat

24
00:01:42,659 --> 00:01:45,720
modeling and incrementally improving

25
00:01:45,720 --> 00:01:48,000
security of our kubernetes environments

26
00:01:48,000 --> 00:01:49,860
and hopefully you'll you'll learn

27
00:01:49,860 --> 00:01:52,560
something that you can benefit uh from

28
00:01:52,560 --> 00:01:53,939
later on

29
00:01:53,939 --> 00:01:56,640
having said that I'm not here on behalf

30
00:01:56,640 --> 00:01:59,040
of my employer so all of the opinions I

31
00:01:59,040 --> 00:02:00,899
present are my own

32
00:02:00,899 --> 00:02:03,299
uh before we begin

33
00:02:03,299 --> 00:02:07,200
um I'd like to do a really quick poll

34
00:02:07,200 --> 00:02:08,940
um

35
00:02:08,940 --> 00:02:10,860
raise your hand if this is your first

36
00:02:10,860 --> 00:02:14,340
last con it is for me

37
00:02:14,340 --> 00:02:16,319
very nice

38
00:02:16,319 --> 00:02:19,700
um who here is out of town

39
00:02:20,220 --> 00:02:22,920
some people perfect perfect

40
00:02:22,920 --> 00:02:26,040
uh who is working with kubernetes today

41
00:02:26,040 --> 00:02:27,660
currently

42
00:02:27,660 --> 00:02:30,120
excellent excellent

43
00:02:30,120 --> 00:02:32,040
who just saw kubernetes in the schedule

44
00:02:32,040 --> 00:02:34,379
and thought well I should join the cool

45
00:02:34,379 --> 00:02:36,679
kids

46
00:02:36,840 --> 00:02:38,160
perfect

47
00:02:38,160 --> 00:02:39,480
honest person

48
00:02:39,480 --> 00:02:42,480
okay uh let's get started and I'll start

49
00:02:42,480 --> 00:02:45,720
I'll begin with just talking about what

50
00:02:45,720 --> 00:02:48,239
kubernetes is and and how it works in

51
00:02:48,239 --> 00:02:49,500
general

52
00:02:49,500 --> 00:02:52,319
kubernetes is open source or container

53
00:02:52,319 --> 00:02:54,180
orchestration platform that originated

54
00:02:54,180 --> 00:02:57,000
at Google uh it basically was designed

55
00:02:57,000 --> 00:02:59,700
from the ground up to be a Loosely

56
00:02:59,700 --> 00:03:01,500
coupled connection a collection of

57
00:03:01,500 --> 00:03:04,319
components that enable us to deploy

58
00:03:04,319 --> 00:03:07,019
manage and scale workloads containerized

59
00:03:07,019 --> 00:03:10,340
workloads and it's got good support for

60
00:03:10,340 --> 00:03:14,159
declarative deployments and immutable

61
00:03:14,159 --> 00:03:16,560
components and all those modern kind of

62
00:03:16,560 --> 00:03:18,739
things

63
00:03:19,440 --> 00:03:22,200
I'll begin with just a little bit of

64
00:03:22,200 --> 00:03:24,360
terminology so we we know what we're

65
00:03:24,360 --> 00:03:27,120
talking about although

66
00:03:27,120 --> 00:03:29,040
kubernetes is container orchestration

67
00:03:29,040 --> 00:03:31,819
platform the smallest Deployable

68
00:03:31,819 --> 00:03:34,140
workload in kubernetes is not a

69
00:03:34,140 --> 00:03:36,360
container it's something called pod and

70
00:03:36,360 --> 00:03:38,700
a pod can be one or it can be multiple

71
00:03:38,700 --> 00:03:40,680
containers that essentially are deployed

72
00:03:40,680 --> 00:03:43,440
together and work together and run on on

73
00:03:43,440 --> 00:03:46,159
the same host in the same environment

74
00:03:46,159 --> 00:03:49,200
why do we need pods why can't we just go

75
00:03:49,200 --> 00:03:51,720
with containers so oftentimes as an

76
00:03:51,720 --> 00:03:54,019
example of a use case for for this pause

77
00:03:54,019 --> 00:03:57,000
oftentimes you you will have sidecar car

78
00:03:57,000 --> 00:04:00,659
containers that do do auxiliary work in

79
00:04:00,659 --> 00:04:02,760
addition to to the main workload that

80
00:04:02,760 --> 00:04:04,739
you're deploying so that would be things

81
00:04:04,739 --> 00:04:07,019
like collecting logs and sending them to

82
00:04:07,019 --> 00:04:09,060
some log Management systems and things

83
00:04:09,060 --> 00:04:10,080
like that

84
00:04:10,080 --> 00:04:12,299
the containers in the pods they're

85
00:04:12,299 --> 00:04:14,760
created from images image is essentially

86
00:04:14,760 --> 00:04:16,560
a template for the container so it

87
00:04:16,560 --> 00:04:18,720
contains all the you know the binaries

88
00:04:18,720 --> 00:04:20,339
the application itself all the

89
00:04:20,339 --> 00:04:22,199
dependencies everything that that

90
00:04:22,199 --> 00:04:24,320
particular workload or the application

91
00:04:24,320 --> 00:04:28,919
needs to run uh to run on a host

92
00:04:28,919 --> 00:04:31,860
now those pods and containers they often

93
00:04:31,860 --> 00:04:34,620
require configuration information and so

94
00:04:34,620 --> 00:04:36,720
that is injected through objects that

95
00:04:36,720 --> 00:04:39,479
are called config maps and secrets there

96
00:04:39,479 --> 00:04:40,919
is not a lot of difference between

97
00:04:40,919 --> 00:04:43,460
config maps and secrets with secrets

98
00:04:43,460 --> 00:04:46,680
secrets are encrypted addressed in

99
00:04:46,680 --> 00:04:48,840
kubernetes and they're not displayed in

100
00:04:48,840 --> 00:04:50,820
plain text but apart from that they're

101
00:04:50,820 --> 00:04:53,040
they're fairly similar in a sense that

102
00:04:53,040 --> 00:04:55,259
they're they can be injected in the same

103
00:04:55,259 --> 00:04:59,280
ways into the pods and just use very

104
00:04:59,280 --> 00:05:00,300
similarly

105
00:05:00,300 --> 00:05:02,880
then we have deployments deployments is

106
00:05:02,880 --> 00:05:06,419
the thing that helps us manage scale so

107
00:05:06,419 --> 00:05:09,600
if you usually run workloads not as a

108
00:05:09,600 --> 00:05:11,160
kind of single instance because that's

109
00:05:11,160 --> 00:05:13,740
prone to you know availability issues

110
00:05:13,740 --> 00:05:15,960
and whatnot and deployments is the thing

111
00:05:15,960 --> 00:05:18,180
that that manages that scale so you can

112
00:05:18,180 --> 00:05:20,100
tell you can create a deployment and say

113
00:05:20,100 --> 00:05:23,220
I need five instances of this pod and

114
00:05:23,220 --> 00:05:25,259
it's going to be the deployment that

115
00:05:25,259 --> 00:05:27,360
sees that you've got five instances

116
00:05:27,360 --> 00:05:29,520
running if one of them crashes or

117
00:05:29,520 --> 00:05:31,139
terminates for whatever reason it will

118
00:05:31,139 --> 00:05:34,139
restart them and and do things like that

119
00:05:34,139 --> 00:05:36,840
and then usually you run workloads so

120
00:05:36,840 --> 00:05:38,520
that they're accessible from outside

121
00:05:38,520 --> 00:05:40,380
outside of the cluster because this is

122
00:05:40,380 --> 00:05:41,940
services that your application is

123
00:05:41,940 --> 00:05:44,039
providing either to your end users or

124
00:05:44,039 --> 00:05:46,500
like in in case of API to other services

125
00:05:46,500 --> 00:05:49,380
and so you have an object called service

126
00:05:49,380 --> 00:05:51,300
in kubernetes and this is essentially

127
00:05:51,300 --> 00:05:53,400
the plumbing the networking Plumbing

128
00:05:53,400 --> 00:05:57,600
that enables out uh people and and cost

129
00:05:57,600 --> 00:05:59,940
clients from outside to connect to your

130
00:05:59,940 --> 00:06:03,060
workloads that run within the cluster

131
00:06:03,060 --> 00:06:05,759
the last piece that I'll mention that

132
00:06:05,759 --> 00:06:07,500
that's quite important is namespace

133
00:06:07,500 --> 00:06:10,680
namespace is a logical kind of grouping

134
00:06:10,680 --> 00:06:13,320
of workloads of of things of resources

135
00:06:13,320 --> 00:06:16,320
within the cluster and

136
00:06:16,320 --> 00:06:19,680
um as a side note as well all of the

137
00:06:19,680 --> 00:06:22,380
kubernetes control plane components also

138
00:06:22,380 --> 00:06:24,419
usually run within the cluster in a

139
00:06:24,419 --> 00:06:26,759
namespace called Cube system so if you

140
00:06:26,759 --> 00:06:28,800
want to see like what what's this

141
00:06:28,800 --> 00:06:30,720
kubernetes is about in terms of like

142
00:06:30,720 --> 00:06:33,840
what things it runs uh to to maintain

143
00:06:33,840 --> 00:06:36,300
the control plane you can check the cube

144
00:06:36,300 --> 00:06:38,340
system namespace and the things that are

145
00:06:38,340 --> 00:06:39,960
running there and that's what that's

146
00:06:39,960 --> 00:06:42,680
what you'll see there

147
00:06:42,720 --> 00:06:45,660
now let's look at just architecture in

148
00:06:45,660 --> 00:06:46,740
general

149
00:06:46,740 --> 00:06:48,479
um and and understand a little bit how

150
00:06:48,479 --> 00:06:52,740
how kubernetes works so we we start with

151
00:06:52,740 --> 00:06:54,720
uh and by the way this is a picture from

152
00:06:54,720 --> 00:06:56,520
just official documentation there there

153
00:06:56,520 --> 00:06:59,580
might be an updated one uh but we start

154
00:06:59,580 --> 00:07:02,460
with um with the data store in in most

155
00:07:02,460 --> 00:07:03,539
cases

156
00:07:03,539 --> 00:07:06,419
um kubernetes clusters use SCD as the

157
00:07:06,419 --> 00:07:08,639
data store and this is a critical

158
00:07:08,639 --> 00:07:10,380
component from the perspective of

159
00:07:10,380 --> 00:07:13,500
anything that has at least right access

160
00:07:13,500 --> 00:07:16,380
to to the data store can fully control

161
00:07:16,380 --> 00:07:18,660
the cluster because that's that's the

162
00:07:18,660 --> 00:07:21,000
state of the cluster that that basically

163
00:07:21,000 --> 00:07:24,240
defines what what runs there then we've

164
00:07:24,240 --> 00:07:27,479
got the cube API server

165
00:07:27,479 --> 00:07:30,780
and Cube API server is how things

166
00:07:30,780 --> 00:07:34,319
interact with the kubernetes cluster so

167
00:07:34,319 --> 00:07:37,020
if you want the cluster to provision new

168
00:07:37,020 --> 00:07:38,520
deployment or to provision some

169
00:07:38,520 --> 00:07:40,740
resources you'll be talking to the API

170
00:07:40,740 --> 00:07:43,199
server and telling it hey apply this

171
00:07:43,199 --> 00:07:45,419
configuration and then it's it's

172
00:07:45,419 --> 00:07:48,180
basically a focal point of the of the

173
00:07:48,180 --> 00:07:49,979
kubernetes control plane

174
00:07:49,979 --> 00:07:52,560
then we've got the

175
00:07:52,560 --> 00:07:53,160
um

176
00:07:53,160 --> 00:07:55,800
Cube controller manager and this is just

177
00:07:55,800 --> 00:07:57,900
control processes that run within the

178
00:07:57,900 --> 00:08:01,199
cluster and look at the data store and

179
00:08:01,199 --> 00:08:03,419
basically do something with that with

180
00:08:03,419 --> 00:08:05,099
that state that's stored in that CD

181
00:08:05,099 --> 00:08:08,400
database and and we'll see in just a bit

182
00:08:08,400 --> 00:08:11,099
how how that part works there's also

183
00:08:11,099 --> 00:08:13,380
Cloud controller manager and this is the

184
00:08:13,380 --> 00:08:15,680
component that's responsible for

185
00:08:15,680 --> 00:08:18,240
interacting with your infrastructure as

186
00:08:18,240 --> 00:08:20,819
a service provider if you need resources

187
00:08:20,819 --> 00:08:23,580
like load balancers etc etc that can be

188
00:08:23,580 --> 00:08:28,199
provisioned through the kubernetes API

189
00:08:28,199 --> 00:08:29,660
foreign

190
00:08:29,660 --> 00:08:33,240
part of the control plane is

191
00:08:33,240 --> 00:08:35,580
um is the scheduler and this is the

192
00:08:35,580 --> 00:08:38,399
piece that when you say I want this new

193
00:08:38,399 --> 00:08:40,380
part deployed this is the piece that

194
00:08:40,380 --> 00:08:43,200
basically calculates based on

195
00:08:43,200 --> 00:08:45,480
um utilization available memory and

196
00:08:45,480 --> 00:08:47,700
things like that on which node that

197
00:08:47,700 --> 00:08:50,399
particular uh that particular workload

198
00:08:50,399 --> 00:08:52,560
is going to be scheduled and and it's

199
00:08:52,560 --> 00:08:54,240
going to be deployed

200
00:08:54,240 --> 00:08:57,180
on the right hand side we've got uh

201
00:08:57,180 --> 00:08:59,339
basically the worker node so this is the

202
00:08:59,339 --> 00:09:01,980
node this is usually VMS where our

203
00:09:01,980 --> 00:09:04,019
workloads are going to be run and each

204
00:09:04,019 --> 00:09:06,240
of those nodes will have a cubelet which

205
00:09:06,240 --> 00:09:08,339
is also part of kind of kubernetes

206
00:09:08,339 --> 00:09:11,399
ecosystem uh cubelet is a component that

207
00:09:11,399 --> 00:09:14,100
essentially fully controls the node and

208
00:09:14,100 --> 00:09:16,560
monitors the health of the workloads and

209
00:09:16,560 --> 00:09:19,440
reports them to the cube API server and

210
00:09:19,440 --> 00:09:21,000
monitors the health of the nodes and

211
00:09:21,000 --> 00:09:23,459
available resources and all that kind of

212
00:09:23,459 --> 00:09:25,620
stuff and reports it back to the API

213
00:09:25,620 --> 00:09:27,839
server and there's also Cube proxy

214
00:09:27,839 --> 00:09:30,120
although it's named proxy it's not

215
00:09:30,120 --> 00:09:31,740
actually proxy it's just the component

216
00:09:31,740 --> 00:09:34,320
that manages iptables but essentially

217
00:09:34,320 --> 00:09:38,100
it's it's there to direct the traffic to

218
00:09:38,100 --> 00:09:40,320
the right workloads that run on that

219
00:09:40,320 --> 00:09:43,040
specific node

220
00:09:44,279 --> 00:09:46,740
having said all of that

221
00:09:46,740 --> 00:09:47,339
um

222
00:09:47,339 --> 00:09:50,700
I'd like to give you an idea of how

223
00:09:50,700 --> 00:09:53,279
generally kubernetes works and I'll do

224
00:09:53,279 --> 00:09:55,320
that through a life story of a

225
00:09:55,320 --> 00:09:56,940
deployment so let's say we want to

226
00:09:56,940 --> 00:09:58,620
create a new deployment we want to run

227
00:09:58,620 --> 00:10:02,160
this uh new workload in our cluster so

228
00:10:02,160 --> 00:10:05,040
what we do is we use cubectl which is a

229
00:10:05,040 --> 00:10:07,620
command line utility that that allows

230
00:10:07,620 --> 00:10:10,019
you to interact with the uh with the

231
00:10:10,019 --> 00:10:12,300
kubernetes cluster and you say Okay Cube

232
00:10:12,300 --> 00:10:14,880
CTL create deployment uh give it a bunch

233
00:10:14,880 --> 00:10:16,740
of parameters such as like number of

234
00:10:16,740 --> 00:10:19,860
replicas what image to use etc etc what

235
00:10:19,860 --> 00:10:22,200
cubectl does is it's going to connect to

236
00:10:22,200 --> 00:10:24,540
the API server and make that API call to

237
00:10:24,540 --> 00:10:28,140
say hey here's a new configuration that

238
00:10:28,140 --> 00:10:31,140
I want to deploy with within the cluster

239
00:10:31,140 --> 00:10:33,899
when that happens all that API server

240
00:10:33,899 --> 00:10:36,420
does it it stores that information in

241
00:10:36,420 --> 00:10:40,140
that c hcd database and then it returns

242
00:10:40,140 --> 00:10:43,620
back so the the time you run Cube CTL

243
00:10:43,620 --> 00:10:45,420
it's going to return almost immediately

244
00:10:45,420 --> 00:10:47,519
as as soon as it sends the information

245
00:10:47,519 --> 00:10:49,980
to the API server doesn't wait for any

246
00:10:49,980 --> 00:10:52,260
resources to be provisioned then if you

247
00:10:52,260 --> 00:10:54,480
want to wait and like know when it's all

248
00:10:54,480 --> 00:10:57,240
up and running you need to check the

249
00:10:57,240 --> 00:10:59,160
status of of those of the deployment

250
00:10:59,160 --> 00:11:01,260
check the status of those pods etc etc

251
00:11:01,260 --> 00:11:03,000
later on

252
00:11:03,000 --> 00:11:04,500
so now

253
00:11:04,500 --> 00:11:08,040
in in that CD database in that in that

254
00:11:08,040 --> 00:11:10,440
state database we have this new object

255
00:11:10,440 --> 00:11:13,260
called deployment in the deployment

256
00:11:13,260 --> 00:11:15,839
there's a number of kind of data points

257
00:11:15,839 --> 00:11:17,399
that that it will contain so it

258
00:11:17,399 --> 00:11:18,959
basically fully describes that

259
00:11:18,959 --> 00:11:21,180
deployment that will include things like

260
00:11:21,180 --> 00:11:23,160
name of the deployment that will include

261
00:11:23,160 --> 00:11:25,680
things like number of replicas that we

262
00:11:25,680 --> 00:11:28,920
want so number of instances of that

263
00:11:28,920 --> 00:11:31,320
workload that we want as part of that

264
00:11:31,320 --> 00:11:34,260
deployment the image to be used

265
00:11:34,260 --> 00:11:36,959
um and things like that so this is

266
00:11:36,959 --> 00:11:39,120
purely exists in the LCD database

267
00:11:39,120 --> 00:11:41,700
nothing else has happened yet

268
00:11:41,700 --> 00:11:43,260
now

269
00:11:43,260 --> 00:11:45,540
here comes the controller manager so

270
00:11:45,540 --> 00:11:48,420
that's uh that process that runs the the

271
00:11:48,420 --> 00:11:50,519
control Loop and it sees the deployment

272
00:11:50,519 --> 00:11:52,980
but it doesn't see a replica set which

273
00:11:52,980 --> 00:11:54,959
which is an object that deployment uses

274
00:11:54,959 --> 00:11:57,480
to actually manage the number of

275
00:11:57,480 --> 00:12:00,300
specific number of replicas for uh for

276
00:12:00,300 --> 00:12:01,440
the workloads that are part of the

277
00:12:01,440 --> 00:12:04,320
deployment so it's like okay replica set

278
00:12:04,320 --> 00:12:05,700
is missing I'm going to create this

279
00:12:05,700 --> 00:12:07,440
replica set so it's going to inherit a

280
00:12:07,440 --> 00:12:08,579
lot of the information from the

281
00:12:08,579 --> 00:12:10,800
deployment create this new object again

282
00:12:10,800 --> 00:12:14,760
all this happens in that CD database and

283
00:12:14,760 --> 00:12:16,920
then we've got also controller manager

284
00:12:16,920 --> 00:12:18,839
but different part of it called replica

285
00:12:18,839 --> 00:12:21,540
set controller uh that's going to come

286
00:12:21,540 --> 00:12:23,519
and say oh I've got this replica set

287
00:12:23,519 --> 00:12:26,160
there's no pods created for this replica

288
00:12:26,160 --> 00:12:28,019
set yet so I'm going to create this

289
00:12:28,019 --> 00:12:29,820
three pause because that's the number of

290
00:12:29,820 --> 00:12:31,500
replicas that I was requested to

291
00:12:31,500 --> 00:12:33,899
maintain so those pods again will

292
00:12:33,899 --> 00:12:36,060
inherit the needed information like the

293
00:12:36,060 --> 00:12:39,000
image name and things like that so

294
00:12:39,000 --> 00:12:41,459
controller manager creates the the Pod

295
00:12:41,459 --> 00:12:43,380
objects

296
00:12:43,380 --> 00:12:45,660
as kind of a last step here in the

297
00:12:45,660 --> 00:12:49,139
control Loop we'll have the scheduler uh

298
00:12:49,139 --> 00:12:51,360
come in and see all of these new shiny

299
00:12:51,360 --> 00:12:53,399
Paws that have been scheduled yet to any

300
00:12:53,399 --> 00:12:56,160
of the notes and it's gonna do its magic

301
00:12:56,160 --> 00:12:59,459
apply the algorithm and uh basically

302
00:12:59,459 --> 00:13:02,639
sign a node to each of those nodes of

303
00:13:02,639 --> 00:13:05,459
those pods depending on where it wants

304
00:13:05,459 --> 00:13:08,459
that specific pod to run

305
00:13:08,459 --> 00:13:11,040
again at this stage nothing happened yet

306
00:13:11,040 --> 00:13:13,260
this is all information State

307
00:13:13,260 --> 00:13:15,660
information in the data data store in

308
00:13:15,660 --> 00:13:17,820
that CD database

309
00:13:17,820 --> 00:13:21,000
but what happens next is now we've got

310
00:13:21,000 --> 00:13:23,220
the cubelet that runs on the worker node

311
00:13:23,220 --> 00:13:25,860
that will come and check with the API

312
00:13:25,860 --> 00:13:28,139
server and find that there's now a pod

313
00:13:28,139 --> 00:13:30,839
that's been scheduled on that node that

314
00:13:30,839 --> 00:13:33,420
it hasn't started yet and this is where

315
00:13:33,420 --> 00:13:36,360
where the magic happens so it sees that

316
00:13:36,360 --> 00:13:38,399
part object it's going to create new

317
00:13:38,399 --> 00:13:40,860
containers based on that pod

318
00:13:40,860 --> 00:13:43,260
specification and then report back to

319
00:13:43,260 --> 00:13:45,899
the cube API server saying okay now it's

320
00:13:45,899 --> 00:13:47,820
running or now it's pulling image and

321
00:13:47,820 --> 00:13:50,339
and things like that so this is where

322
00:13:50,339 --> 00:13:52,019
actually the workload is going to be

323
00:13:52,019 --> 00:13:54,240
started by the cubelet once it checks

324
00:13:54,240 --> 00:13:56,399
with the API server once all the other

325
00:13:56,399 --> 00:13:58,019
control loops have happened and

326
00:13:58,019 --> 00:14:00,600
basically the the Pod has scheduled has

327
00:14:00,600 --> 00:14:03,740
been scheduled on that node

328
00:14:04,620 --> 00:14:07,560
now why am I talking today about managed

329
00:14:07,560 --> 00:14:09,000
clusters

330
00:14:09,000 --> 00:14:10,200
um

331
00:14:10,200 --> 00:14:11,700
all of those things that I've talked

332
00:14:11,700 --> 00:14:14,040
about in the architecture I mentioned

333
00:14:14,040 --> 00:14:15,540
they're kind of loosely coupled

334
00:14:15,540 --> 00:14:17,639
components what that means is they're

335
00:14:17,639 --> 00:14:21,240
almost like an independent projects that

336
00:14:21,240 --> 00:14:23,100
kind of work together in a kubernetes

337
00:14:23,100 --> 00:14:26,519
deployment and they all have a lot of

338
00:14:26,519 --> 00:14:28,980
different options in how you can

339
00:14:28,980 --> 00:14:32,639
configure them so if you try to deploy

340
00:14:32,639 --> 00:14:34,620
kubernetes from scratch you will find

341
00:14:34,620 --> 00:14:36,779
that there's a million different ways to

342
00:14:36,779 --> 00:14:39,300
do that and so you'll have to firstly

343
00:14:39,300 --> 00:14:41,399
make those million decisions but

344
00:14:41,399 --> 00:14:43,860
secondly also maintain that cluster

345
00:14:43,860 --> 00:14:45,600
later on and maintain the high

346
00:14:45,600 --> 00:14:47,760
availability of all the components

347
00:14:47,760 --> 00:14:49,860
including things like etcd which is not

348
00:14:49,860 --> 00:14:52,199
a trivial task so if you at least if

349
00:14:52,199 --> 00:14:54,560
you're just starting from scratch

350
00:14:54,560 --> 00:14:57,480
my big recommendation is

351
00:14:57,480 --> 00:15:00,600
don't run your own clusters just go to a

352
00:15:00,600 --> 00:15:03,060
service that can do it for you and by

353
00:15:03,060 --> 00:15:04,860
the virtue of doing that

354
00:15:04,860 --> 00:15:07,139
some of the things that relate to

355
00:15:07,139 --> 00:15:09,660
security of the control plane at least

356
00:15:09,660 --> 00:15:12,240
are going to be taken care of by that

357
00:15:12,240 --> 00:15:14,160
service provider that does that for a

358
00:15:14,160 --> 00:15:16,079
living so if you're just starting out

359
00:15:16,079 --> 00:15:18,839
don't run your own cluster do manage

360
00:15:18,839 --> 00:15:20,180
them

361
00:15:20,180 --> 00:15:22,699
now let's talk a little bit about

362
00:15:22,699 --> 00:15:26,060
threat model so in terms of the

363
00:15:26,060 --> 00:15:29,459
attack surface like where can things

364
00:15:29,459 --> 00:15:32,339
happen in this picture

365
00:15:32,339 --> 00:15:35,760
and mainly that's those three places

366
00:15:35,760 --> 00:15:39,000
there's the API server that is generally

367
00:15:39,000 --> 00:15:40,800
needs to be available from somewhere

368
00:15:40,800 --> 00:15:43,500
because this is how you tell cluster to

369
00:15:43,500 --> 00:15:45,300
run new workloads and things like that

370
00:15:45,300 --> 00:15:49,199
there's that CD data store that's a

371
00:15:49,199 --> 00:15:51,240
critical component but generally you

372
00:15:51,240 --> 00:15:53,100
wouldn't want that to be available from

373
00:15:53,100 --> 00:15:55,079
outside the cluster for that exact

374
00:15:55,079 --> 00:15:56,160
reason

375
00:15:56,160 --> 00:15:58,380
and then there's the workloads and

376
00:15:58,380 --> 00:16:00,000
supposedly you'll be running workloads

377
00:16:00,000 --> 00:16:01,560
so that they're accessible from the

378
00:16:01,560 --> 00:16:03,899
outside so in terms of like the

379
00:16:03,899 --> 00:16:06,839
externally positioned attacker this is

380
00:16:06,839 --> 00:16:10,079
the main path into the whole thing is I

381
00:16:10,079 --> 00:16:13,079
run this web application or API or

382
00:16:13,079 --> 00:16:15,660
something the service that's exposed to

383
00:16:15,660 --> 00:16:18,420
the outside if I'm able to hack into

384
00:16:18,420 --> 00:16:21,959
that application now I end up in a

385
00:16:21,959 --> 00:16:25,560
container in the cluster

386
00:16:25,560 --> 00:16:29,279
So based on that there's uh

387
00:16:29,279 --> 00:16:31,320
when I think about the the kubernetes

388
00:16:31,320 --> 00:16:33,300
threat model I think about attacks on

389
00:16:33,300 --> 00:16:34,860
the control plane so that's basically

390
00:16:34,860 --> 00:16:37,380
interacting directly with the API server

391
00:16:37,380 --> 00:16:39,600
I think about compromised applications

392
00:16:39,600 --> 00:16:41,820
that are running in the cluster so

393
00:16:41,820 --> 00:16:45,720
workloads basically uh and I think about

394
00:16:45,720 --> 00:16:48,060
compromised user accounts and and their

395
00:16:48,060 --> 00:16:49,820
credentials and I think about

396
00:16:49,820 --> 00:16:52,980
compromised images so basically

397
00:16:52,980 --> 00:16:55,440
um tricking a company or service to run

398
00:16:55,440 --> 00:16:57,360
some some malicious code that I've

399
00:16:57,360 --> 00:17:00,720
created as as part of their cluster and

400
00:17:00,720 --> 00:17:02,940
out of those four

401
00:17:02,940 --> 00:17:05,699
the the piece that I would be concerned

402
00:17:05,699 --> 00:17:08,040
about the most is this second piece

403
00:17:08,040 --> 00:17:11,040
because that's just bound to happen we

404
00:17:11,040 --> 00:17:12,959
again we're running workloads in the

405
00:17:12,959 --> 00:17:14,520
cluster so that they're accessible from

406
00:17:14,520 --> 00:17:17,819
outside and that means that potentially

407
00:17:17,819 --> 00:17:20,040
those workloads can be hacked and and

408
00:17:20,040 --> 00:17:22,260
this is a way into the cluster so let's

409
00:17:22,260 --> 00:17:25,079
explore that scenario a little bit more

410
00:17:25,079 --> 00:17:26,579
when we're talking about compromised

411
00:17:26,579 --> 00:17:29,160
applications so what can happen if

412
00:17:29,160 --> 00:17:32,460
somebody is in in one of the containers

413
00:17:32,460 --> 00:17:35,039
so we need to think about three things

414
00:17:35,039 --> 00:17:38,460
mainly one is

415
00:17:38,460 --> 00:17:40,320
um what network access does that give

416
00:17:40,320 --> 00:17:42,240
them and what are the possibilities for

417
00:17:42,240 --> 00:17:44,039
lateral movement within within the

418
00:17:44,039 --> 00:17:45,900
cluster then

419
00:17:45,900 --> 00:17:48,059
cluster credentials what credentials

420
00:17:48,059 --> 00:17:51,059
could be exposed uh through through that

421
00:17:51,059 --> 00:17:53,820
application and also we we need to think

422
00:17:53,820 --> 00:17:57,860
a bit about the container escapes

423
00:17:58,700 --> 00:18:01,860
networking networking in kubernetes is

424
00:18:01,860 --> 00:18:03,600
an interesting thing

425
00:18:03,600 --> 00:18:06,179
partially because networking is not a

426
00:18:06,179 --> 00:18:08,520
core capability that kubernetes provides

427
00:18:08,520 --> 00:18:10,679
there's these things called networking

428
00:18:10,679 --> 00:18:13,380
plugins or cnis and this is the

429
00:18:13,380 --> 00:18:15,960
component that is actually doing the

430
00:18:15,960 --> 00:18:18,720
networking and you can plug in or use

431
00:18:18,720 --> 00:18:23,460
different cnis depending on your needs

432
00:18:23,460 --> 00:18:26,100
at the core of kubernetes networking

433
00:18:26,100 --> 00:18:28,559
model though is basically a premise that

434
00:18:28,559 --> 00:18:30,660
all of those things all of the nodes

435
00:18:30,660 --> 00:18:32,280
need to be able to talk to each other

436
00:18:32,280 --> 00:18:35,700
without any restrictions or like net

437
00:18:35,700 --> 00:18:37,559
agents in between

438
00:18:37,559 --> 00:18:38,520
Etc

439
00:18:38,520 --> 00:18:41,340
and there's also this thing Network

440
00:18:41,340 --> 00:18:43,919
called Network policies which allows you

441
00:18:43,919 --> 00:18:47,220
to natively facilitate traffic filtering

442
00:18:47,220 --> 00:18:49,200
within within the cluster but the

443
00:18:49,200 --> 00:18:51,120
difficulty there is

444
00:18:51,120 --> 00:18:53,340
support for Network policies is not

445
00:18:53,340 --> 00:18:54,740
required

446
00:18:54,740 --> 00:18:57,900
from a cni so there are networking

447
00:18:57,900 --> 00:19:00,240
plugins that you can use that do not

448
00:19:00,240 --> 00:19:02,700
support network policies that don't

449
00:19:02,700 --> 00:19:04,740
allow you to apply any sort of micro

450
00:19:04,740 --> 00:19:06,020
segmentation

451
00:19:06,020 --> 00:19:09,419
within the cluster

452
00:19:09,419 --> 00:19:12,419
so what what can happen in terms of that

453
00:19:12,419 --> 00:19:14,940
network access so we need to think about

454
00:19:14,940 --> 00:19:17,820
instance metadata access so that magical

455
00:19:17,820 --> 00:19:20,780
IP address of

456
00:19:21,260 --> 00:19:24,179
169.254.169.254 and possibly credentials

457
00:19:24,179 --> 00:19:25,980
and other useful information that the

458
00:19:25,980 --> 00:19:28,799
attacker can get through that we need to

459
00:19:28,799 --> 00:19:30,960
think about kubernetes control plane

460
00:19:30,960 --> 00:19:34,200
access and access to the nodes and this

461
00:19:34,200 --> 00:19:37,020
is because the control plane components

462
00:19:37,020 --> 00:19:39,419
are running as part of the cluster so by

463
00:19:39,419 --> 00:19:42,179
default any workload in the cluster can

464
00:19:42,179 --> 00:19:44,340
talk to the API server by using

465
00:19:44,340 --> 00:19:46,919
kubernetes internal networking using uh

466
00:19:46,919 --> 00:19:50,460
using that the the cni plugins

467
00:19:50,460 --> 00:19:52,679
and then there's lateral movement so you

468
00:19:52,679 --> 00:19:54,480
will supposedly have other workloads

469
00:19:54,480 --> 00:19:57,240
running as part of the cluster so if

470
00:19:57,240 --> 00:19:59,520
there is like internal only internally

471
00:19:59,520 --> 00:20:01,620
available apis that could be useful or

472
00:20:01,620 --> 00:20:04,020
databases and things like that you can

473
00:20:04,020 --> 00:20:06,900
hop on from that compromise workloads on

474
00:20:06,900 --> 00:20:08,700
anything else potentially that's running

475
00:20:08,700 --> 00:20:11,600
within the cluster

476
00:20:12,179 --> 00:20:14,640
in terms of credentials

477
00:20:14,640 --> 00:20:15,539
um

478
00:20:15,539 --> 00:20:18,240
interesting thing about kubernetes is it

479
00:20:18,240 --> 00:20:21,539
doesn't have a notion of a user so user

480
00:20:21,539 --> 00:20:23,100
is completely a concept that's

481
00:20:23,100 --> 00:20:25,380
completely outside of the realm of

482
00:20:25,380 --> 00:20:28,080
kubernetes and generally and when I talk

483
00:20:28,080 --> 00:20:30,840
about user that's essentially like

484
00:20:30,840 --> 00:20:33,120
people who manage the cluster and

485
00:20:33,120 --> 00:20:36,179
configure it and do things with it and

486
00:20:36,179 --> 00:20:38,160
so generally you will have an external

487
00:20:38,160 --> 00:20:40,679
authentication mechanism that plugs into

488
00:20:40,679 --> 00:20:43,500
the cluster and provides that that user

489
00:20:43,500 --> 00:20:46,679
information though you can assign

490
00:20:46,679 --> 00:20:49,740
um you can assign permissions using

491
00:20:49,740 --> 00:20:52,080
kubernetes rbac role-based access

492
00:20:52,080 --> 00:20:55,260
control to those user identities what it

493
00:20:55,260 --> 00:20:58,140
does have the concept of though is a

494
00:20:58,140 --> 00:20:59,520
service account and the service account

495
00:20:59,520 --> 00:21:02,400
is permissions that can be assigned to

496
00:21:02,400 --> 00:21:04,860
workloads that run within the cluster

497
00:21:04,860 --> 00:21:07,559
and an important thing to note is that

498
00:21:07,559 --> 00:21:09,600
even if you don't do that kubernetes

499
00:21:09,600 --> 00:21:12,360
will assign a default service count to

500
00:21:12,360 --> 00:21:15,000
every pod that's in the cluster and also

501
00:21:15,000 --> 00:21:17,820
Again by default that service account

502
00:21:17,820 --> 00:21:20,400
credential service account tokens will

503
00:21:20,400 --> 00:21:22,980
be mounted within the Pod and this is

504
00:21:22,980 --> 00:21:25,260
how the the Pod or the workload can get

505
00:21:25,260 --> 00:21:27,480
access to the credentials and talk and

506
00:21:27,480 --> 00:21:31,520
talk to uh to the control plane

507
00:21:31,799 --> 00:21:33,840
last thing I'll mention I'll cover is

508
00:21:33,840 --> 00:21:35,520
the container escapes and I don't want

509
00:21:35,520 --> 00:21:37,320
to go too deep into here if you're

510
00:21:37,320 --> 00:21:39,659
interested there's a just an amazing

511
00:21:39,659 --> 00:21:42,120
talk by Brendan Edwards and Nick Freeman

512
00:21:42,120 --> 00:21:44,340
it's called the compendium of container

513
00:21:44,340 --> 00:21:46,679
escapes uh just look it up on the

514
00:21:46,679 --> 00:21:48,659
YouTube it it's got a ton of great

515
00:21:48,659 --> 00:21:50,940
information but ultimately what we're

516
00:21:50,940 --> 00:21:52,799
talking about in terms of conceptually

517
00:21:52,799 --> 00:21:55,500
the types of escapes we've got container

518
00:21:55,500 --> 00:21:58,080
runtime vulnerabilities this happens so

519
00:21:58,080 --> 00:22:01,100
runtime might have an issue that allows

520
00:22:01,100 --> 00:22:04,320
a process within a container to kind of

521
00:22:04,320 --> 00:22:07,559
escape the container uh outdated kernel

522
00:22:07,559 --> 00:22:10,980
so kernel bugs that uh some of them are

523
00:22:10,980 --> 00:22:12,600
exploitable from within the containers

524
00:22:12,600 --> 00:22:15,960
and as kernel box they allow to kind of

525
00:22:15,960 --> 00:22:18,299
elevate Privileges and

526
00:22:18,299 --> 00:22:20,159
um and get access to the host itself

527
00:22:20,159 --> 00:22:22,260
there's some misconfigurations that

528
00:22:22,260 --> 00:22:24,659
might allow container Escape so those

529
00:22:24,659 --> 00:22:26,880
would be things like mapping Docker

530
00:22:26,880 --> 00:22:30,179
sockets in into containers uh mounting

531
00:22:30,179 --> 00:22:32,400
file paths from the host into container

532
00:22:32,400 --> 00:22:35,880
that can contains that uh hosts some

533
00:22:35,880 --> 00:22:37,919
sensitive files and things like that

534
00:22:37,919 --> 00:22:40,320
and there is this concept of privileged

535
00:22:40,320 --> 00:22:43,140
containers so privileged containers are

536
00:22:43,140 --> 00:22:45,840
created so that that container that

537
00:22:45,840 --> 00:22:48,360
workload if it needs access to the host

538
00:22:48,360 --> 00:22:51,240
itself this is how you do this

539
00:22:51,240 --> 00:22:53,340
um and privileged containers can is

540
00:22:53,340 --> 00:22:55,380
they're not essentially contained so

541
00:22:55,380 --> 00:22:57,240
they have they can have access to like

542
00:22:57,240 --> 00:23:00,120
hosts uh process namespace and

543
00:23:00,120 --> 00:23:03,860
networking and and all that

544
00:23:04,620 --> 00:23:08,100
so now having having talked about all of

545
00:23:08,100 --> 00:23:09,299
those

546
00:23:09,299 --> 00:23:11,700
um beautiful things and I should

547
00:23:11,700 --> 00:23:13,860
apologize because uh there's supposed to

548
00:23:13,860 --> 00:23:15,780
be a demo here but I chickened out so

549
00:23:15,780 --> 00:23:17,640
instead of a demo I've got a whole bunch

550
00:23:17,640 --> 00:23:19,260
of slides to kind of illustrate some of

551
00:23:19,260 --> 00:23:22,200
the points that I was talking about

552
00:23:22,200 --> 00:23:24,840
and so imagine we'll we'll basically

553
00:23:24,840 --> 00:23:29,039
start with um with um in a container so

554
00:23:29,039 --> 00:23:31,320
again that it's that scenario where a

555
00:23:31,320 --> 00:23:33,120
workload is compromised so we start with

556
00:23:33,120 --> 00:23:35,520
a shell in a container how do we know

557
00:23:35,520 --> 00:23:37,740
it's a container so the easiest way

558
00:23:37,740 --> 00:23:40,020
probably to do is do a process list and

559
00:23:40,020 --> 00:23:41,580
if you don't see a whole bunch of

560
00:23:41,580 --> 00:23:43,559
processes including the init process

561
00:23:43,559 --> 00:23:46,460
which starts the whole system in Linux

562
00:23:46,460 --> 00:23:49,799
that's a good indication it's something

563
00:23:49,799 --> 00:23:52,559
containerized how do we know we're in

564
00:23:52,559 --> 00:23:54,900
kubernetes

565
00:23:54,900 --> 00:23:57,360
so if we check the environment variables

566
00:23:57,360 --> 00:23:58,740
there's going to be environment

567
00:23:58,740 --> 00:24:00,960
variables that kubernetes inject so that

568
00:24:00,960 --> 00:24:03,240
the workloads know where to talk to to

569
00:24:03,240 --> 00:24:05,340
the control plane and so if you grab

570
00:24:05,340 --> 00:24:07,200
four kubernetes you will see a bunch of

571
00:24:07,200 --> 00:24:09,419
those so this is a good indication we're

572
00:24:09,419 --> 00:24:12,720
uh we're in kubernetes so remember that

573
00:24:12,720 --> 00:24:15,539
networking access first one was access

574
00:24:15,539 --> 00:24:18,240
to the instance metadata this is an

575
00:24:18,240 --> 00:24:20,280
example of that so we just do curl

576
00:24:20,280 --> 00:24:22,080
whatever you want to check in there

577
00:24:22,080 --> 00:24:24,360
again by default you're going to have

578
00:24:24,360 --> 00:24:25,340
access

579
00:24:25,340 --> 00:24:28,740
and and and that metadata can contain

580
00:24:28,740 --> 00:24:30,539
sensitive information and it's not just

581
00:24:30,539 --> 00:24:32,820
information that's kind of like the

582
00:24:32,820 --> 00:24:34,679
roles that are assigned to that ec2

583
00:24:34,679 --> 00:24:36,419
instance as an example but there's also

584
00:24:36,419 --> 00:24:38,400
some good strapping credentials that the

585
00:24:38,400 --> 00:24:41,600
node itself uses to join the cluster

586
00:24:41,600 --> 00:24:43,679
as part of the as part of the

587
00:24:43,679 --> 00:24:46,159
provisioning

588
00:24:46,200 --> 00:24:48,720
so next thing I want to check is that

589
00:24:48,720 --> 00:24:51,179
service account tokens

590
00:24:51,179 --> 00:24:54,720
um sorry uh what services are running in

591
00:24:54,720 --> 00:24:58,559
in my cluster so I do Cube CTL get

592
00:24:58,559 --> 00:25:00,539
service we see there's an interesting

593
00:25:00,539 --> 00:25:02,100
service called kubernetes dashboard

594
00:25:02,100 --> 00:25:03,840
that's running in the cluster so we want

595
00:25:03,840 --> 00:25:07,440
to see if we have access to it and just

596
00:25:07,440 --> 00:25:10,980
do curl uh by the way that kind of weird

597
00:25:10,980 --> 00:25:12,900
DNS name this is how you can access

598
00:25:12,900 --> 00:25:15,179
services within the cluster so it's

599
00:25:15,179 --> 00:25:17,820
basically a name of the name of the

600
00:25:17,820 --> 00:25:20,460
service dot dot name of the namespace

601
00:25:20,460 --> 00:25:22,140
and you can just you don't need to know

602
00:25:22,140 --> 00:25:24,000
any IP addresses you don't need to know

603
00:25:24,000 --> 00:25:25,679
anything this is kind of internal

604
00:25:25,679 --> 00:25:27,539
kubernetes DNS service that that's

605
00:25:27,539 --> 00:25:30,179
handling all of those resolutions so it

606
00:25:30,179 --> 00:25:32,039
looks like from this workload we can

607
00:25:32,039 --> 00:25:34,980
access to the kubernetes dashboard which

608
00:25:34,980 --> 00:25:37,380
is another service running in the same

609
00:25:37,380 --> 00:25:39,539
cluster so it's that network based

610
00:25:39,539 --> 00:25:41,220
lateral movement

611
00:25:41,220 --> 00:25:44,159
and now what what we're going to do is

612
00:25:44,159 --> 00:25:45,900
we're going to grab that service count

613
00:25:45,900 --> 00:25:48,659
token uh remember the one that I said

614
00:25:48,659 --> 00:25:51,000
that's it's mounted by default to all of

615
00:25:51,000 --> 00:25:52,740
the pods in the cluster so we're

616
00:25:52,740 --> 00:25:54,539
grabbing that service account token

617
00:25:54,539 --> 00:25:57,000
we're going to use it later on and we're

618
00:25:57,000 --> 00:25:59,760
gonna do uh basically a tunnel that will

619
00:25:59,760 --> 00:26:03,120
allow us to connect to that kubernetes

620
00:26:03,120 --> 00:26:07,279
dashboard from outside the cluster

621
00:26:07,799 --> 00:26:09,900
so we've created the tunnel now we can

622
00:26:09,900 --> 00:26:12,360
we can access that kubernetes dashboard

623
00:26:12,360 --> 00:26:14,039
we're going to use that token that I

624
00:26:14,039 --> 00:26:15,539
just grabbed from from the service

625
00:26:15,539 --> 00:26:18,179
account to log in and we can explore

626
00:26:18,179 --> 00:26:21,059
what's what's basically in the cluster

627
00:26:21,059 --> 00:26:23,520
now what I'm gonna show is so that web

628
00:26:23,520 --> 00:26:25,320
shell that we were in

629
00:26:25,320 --> 00:26:28,440
um that's that's the deployment uh that

630
00:26:28,440 --> 00:26:31,200
created that web shell and it turns out

631
00:26:31,200 --> 00:26:34,140
this specific service count has added

632
00:26:34,140 --> 00:26:37,320
access to to to that deployment so what

633
00:26:37,320 --> 00:26:38,880
we're going to do and this is kind of to

634
00:26:38,880 --> 00:26:41,580
illustrate why that privilege those

635
00:26:41,580 --> 00:26:44,340
privileged containers pose a risk

636
00:26:44,340 --> 00:26:47,220
um we're gonna make this uh this pod

637
00:26:47,220 --> 00:26:49,620
this container that we're we're in a

638
00:26:49,620 --> 00:26:51,299
privileged container and we're also

639
00:26:51,299 --> 00:26:53,580
going to give it access to host process

640
00:26:53,580 --> 00:26:55,380
namespace

641
00:26:55,380 --> 00:26:57,360
so once we added this deployment what's

642
00:26:57,360 --> 00:26:58,679
actually going to happen the deployment

643
00:26:58,679 --> 00:27:01,679
will say okay it's all different now so

644
00:27:01,679 --> 00:27:03,240
I'm going to kill the old one and I'm

645
00:27:03,240 --> 00:27:05,940
going to restart uh the the Pod with

646
00:27:05,940 --> 00:27:08,220
with these new parameters so we go back

647
00:27:08,220 --> 00:27:10,140
to the shell and this is the difference

648
00:27:10,140 --> 00:27:12,840
that we see based on that privileged and

649
00:27:12,840 --> 00:27:16,260
the host process ID flag so now we see

650
00:27:16,260 --> 00:27:20,779
all the processes on the host

651
00:27:20,820 --> 00:27:23,940
uh but in terms of networking this is

652
00:27:23,940 --> 00:27:25,559
we're still in the container this is

653
00:27:25,559 --> 00:27:27,659
kind of containers Network namespace so

654
00:27:27,659 --> 00:27:29,520
I don't see a lot of IP addresses the AP

655
00:27:29,520 --> 00:27:31,559
address that I see here is going to be

656
00:27:31,559 --> 00:27:35,460
that pods AP address where where that uh

657
00:27:35,460 --> 00:27:39,120
where that workload is running

658
00:27:39,120 --> 00:27:41,700
this is just to illustrate

659
00:27:41,700 --> 00:27:44,279
um kind of what escaping that container

660
00:27:44,279 --> 00:27:46,080
is going to give us we're going to try

661
00:27:46,080 --> 00:27:50,640
to access this secret from uh from the

662
00:27:50,640 --> 00:27:53,340
cluster called super secret

663
00:27:53,340 --> 00:27:56,460
and we cannot so the the workload

664
00:27:56,460 --> 00:27:58,260
initial workload that we've compromised

665
00:27:58,260 --> 00:28:01,679
itself cannot access uh that secret but

666
00:28:01,679 --> 00:28:03,960
what we're going to do next is we're

667
00:28:03,960 --> 00:28:05,640
going to escape that container using

668
00:28:05,640 --> 00:28:07,500
that privileged flag and using the host

669
00:28:07,500 --> 00:28:11,760
process ID so it's uh we're going to use

670
00:28:11,760 --> 00:28:14,100
utility called NS enter that allows you

671
00:28:14,100 --> 00:28:16,799
to basically enter some other process

672
00:28:16,799 --> 00:28:19,799
namespace and now once we've done that

673
00:28:19,799 --> 00:28:24,179
we're actually on them on the note so

674
00:28:24,179 --> 00:28:26,820
the command prompt at the end that's

675
00:28:26,820 --> 00:28:29,880
basically us no longer in the container

676
00:28:29,880 --> 00:28:32,220
but on the Node that's running that

677
00:28:32,220 --> 00:28:34,760
container

678
00:28:35,340 --> 00:28:37,799
now another interesting thing here is

679
00:28:37,799 --> 00:28:40,799
that when I said cubelet talks to API

680
00:28:40,799 --> 00:28:42,900
server and it does it by the way all the

681
00:28:42,900 --> 00:28:44,940
time to like report state check for new

682
00:28:44,940 --> 00:28:46,860
pods that it needs to start and things

683
00:28:46,860 --> 00:28:49,380
like that it's it has to use credentials

684
00:28:49,380 --> 00:28:51,299
to connect to the API server to talk to

685
00:28:51,299 --> 00:28:53,820
the API server you need credentials and

686
00:28:53,820 --> 00:28:56,340
those credentials obviously are on the

687
00:28:56,340 --> 00:28:58,500
note so now that we have access we've

688
00:28:58,500 --> 00:29:00,179
escaped the container we have access to

689
00:29:00,179 --> 00:29:02,039
the node we're going to grab those

690
00:29:02,039 --> 00:29:05,100
credentials cubelet's credentials

691
00:29:05,100 --> 00:29:06,960
and all I'm doing here is trying to

692
00:29:06,960 --> 00:29:09,600
access that same secret but now using

693
00:29:09,600 --> 00:29:12,419
cubelet credentials

694
00:29:12,419 --> 00:29:14,039
and I'm able to do that because

695
00:29:14,039 --> 00:29:16,500
supposedly that secret is used somewhere

696
00:29:16,500 --> 00:29:19,080
on that note so the node needs to have

697
00:29:19,080 --> 00:29:20,700
access to the secret to be able to

698
00:29:20,700 --> 00:29:22,919
inject it into the workloads that it

699
00:29:22,919 --> 00:29:25,620
runs and so now using these new

700
00:29:25,620 --> 00:29:27,960
credentials that I had access to I can

701
00:29:27,960 --> 00:29:30,480
see I can see the secret as I said

702
00:29:30,480 --> 00:29:32,779
secrets are not displayed in plain text

703
00:29:32,779 --> 00:29:36,980
but what does this look like

704
00:29:37,980 --> 00:29:40,140
it's not actually encrypted it's just

705
00:29:40,140 --> 00:29:43,080
encoded so all you need to do is base64

706
00:29:43,080 --> 00:29:47,360
decoded and we got access to the message

707
00:29:50,279 --> 00:29:52,679
um this is just another check now that

708
00:29:52,679 --> 00:29:54,840
we're in we're on the host we can check

709
00:29:54,840 --> 00:29:58,020
also the uh the network name space and

710
00:29:58,020 --> 00:29:59,940
see all of the IP addresses that that

711
00:29:59,940 --> 00:30:02,880
that host that has access to a lot of it

712
00:30:02,880 --> 00:30:04,980
it's going to be kubernetes related for

713
00:30:04,980 --> 00:30:07,020
like internal Plumbing between all the

714
00:30:07,020 --> 00:30:09,600
different components and the pods

715
00:30:09,600 --> 00:30:11,940
etc etc so it's not all the IP addresses

716
00:30:11,940 --> 00:30:13,799
that basically are assigned

717
00:30:13,799 --> 00:30:16,080
um are assigned to the node and a lot of

718
00:30:16,080 --> 00:30:17,340
them are going to be internal IP

719
00:30:17,340 --> 00:30:18,779
addresses that are not accessible from

720
00:30:18,779 --> 00:30:20,520
the outside

721
00:30:20,520 --> 00:30:23,700
we can also list all the containers on

722
00:30:23,700 --> 00:30:26,159
that node so kubernetes used to use

723
00:30:26,159 --> 00:30:28,500
Docker as their container runtime

724
00:30:28,500 --> 00:30:30,600
they've switched to container D not that

725
00:30:30,600 --> 00:30:33,299
long ago so we're just using the

726
00:30:33,299 --> 00:30:36,960
continuity command line tool CTR to

727
00:30:36,960 --> 00:30:38,279
check what other containers are running

728
00:30:38,279 --> 00:30:41,039
this just purely for uh demonstration

729
00:30:41,039 --> 00:30:42,240
purposes

730
00:30:42,240 --> 00:30:44,399
so now seeing that so it kind of

731
00:30:44,399 --> 00:30:46,080
demonstrates the lateral movement the

732
00:30:46,080 --> 00:30:48,360
container escapes and kind of the use of

733
00:30:48,360 --> 00:30:49,980
credentials that are scattered around

734
00:30:49,980 --> 00:30:53,399
the cluster to have access to to kind of

735
00:30:53,399 --> 00:30:55,380
escalate your access within the cluster

736
00:30:55,380 --> 00:30:58,679
so now let's fix some things and if I'll

737
00:30:58,679 --> 00:31:01,080
kind of talk about a couple things here

738
00:31:01,080 --> 00:31:03,480
that we're going to fix one is we're

739
00:31:03,480 --> 00:31:05,880
going to create that Network policy very

740
00:31:05,880 --> 00:31:08,159
simple Network policy that will block

741
00:31:08,159 --> 00:31:11,419
access to uh to the kubernetes dashboard

742
00:31:11,419 --> 00:31:15,299
so as I said Network policy it's a

743
00:31:15,299 --> 00:31:18,120
built-in kubernetes concept the cni has

744
00:31:18,120 --> 00:31:19,860
to support it and the warning there is

745
00:31:19,860 --> 00:31:22,980
that if you apply Network policy and cni

746
00:31:22,980 --> 00:31:25,200
doesn't support network policy it's not

747
00:31:25,200 --> 00:31:26,640
going to be applied but you're not going

748
00:31:26,640 --> 00:31:29,340
to get any error messages or Warnings or

749
00:31:29,340 --> 00:31:31,020
anything like that so if you're not sure

750
00:31:31,020 --> 00:31:33,120
if your cni supports Network policies

751
00:31:33,120 --> 00:31:36,240
it's always best to check

752
00:31:36,240 --> 00:31:38,520
so we're creating

753
00:31:38,520 --> 00:31:41,580
um simple Network policy we're going to

754
00:31:41,580 --> 00:31:44,399
apply to the namespace called kubernetes

755
00:31:44,399 --> 00:31:47,100
dashboard and to application that's

756
00:31:47,100 --> 00:31:49,080
labeled with kubernetes dashboard that's

757
00:31:49,080 --> 00:31:50,700
that's the dashboard

758
00:31:50,700 --> 00:31:53,039
and so all we're going to do is we're

759
00:31:53,039 --> 00:31:55,559
going to tell it's that it's only going

760
00:31:55,559 --> 00:31:57,240
to be accessible from within the

761
00:31:57,240 --> 00:31:59,100
namespace and not going to be accessible

762
00:31:59,100 --> 00:32:02,419
from other namespaces

763
00:32:02,419 --> 00:32:06,120
once we apply the policy we can see that

764
00:32:06,120 --> 00:32:08,940
using curl we can check if we can still

765
00:32:08,940 --> 00:32:11,399
connect to the dashboard and we cannot

766
00:32:11,399 --> 00:32:13,200
this is basically a test that that

767
00:32:13,200 --> 00:32:15,539
policy worked

768
00:32:15,539 --> 00:32:17,640
the second thing we're going to fix is

769
00:32:17,640 --> 00:32:19,860
mounting those service accounts tokens

770
00:32:19,860 --> 00:32:23,700
within within that pod so we're going to

771
00:32:23,700 --> 00:32:25,799
check that they're mounted so I do a

772
00:32:25,799 --> 00:32:29,340
less slash run we see there's a folder

773
00:32:29,340 --> 00:32:31,380
called Secrets there

774
00:32:31,380 --> 00:32:33,240
uh

775
00:32:33,240 --> 00:32:35,580
what I'm going to do is again edit the

776
00:32:35,580 --> 00:32:37,380
same deployment that I've edited before

777
00:32:37,380 --> 00:32:39,179
through kubernetes dashboard but now

778
00:32:39,179 --> 00:32:41,460
just from the command line and I'm going

779
00:32:41,460 --> 00:32:44,279
to add that Auto Mount service account

780
00:32:44,279 --> 00:32:47,520
token parameter and set it to false and

781
00:32:47,520 --> 00:32:49,740
this is the piece that will stop that

782
00:32:49,740 --> 00:32:52,320
token mounting so after that again the

783
00:32:52,320 --> 00:32:55,020
the the Pod is going to restart but

784
00:32:55,020 --> 00:32:57,360
after it's restarted

785
00:32:57,360 --> 00:33:00,260
um I I can see that I do

786
00:33:00,260 --> 00:33:05,580
LS LS slash run again and the uh that

787
00:33:05,580 --> 00:33:07,799
Secrets folder is no longer mounted and

788
00:33:07,799 --> 00:33:09,779
I can no longer use Cube CTL because

789
00:33:09,779 --> 00:33:12,179
there's no credentials for it to to use

790
00:33:12,179 --> 00:33:15,320
to connect to the API server

791
00:33:15,320 --> 00:33:20,039
all right with that virtual demo out of

792
00:33:20,039 --> 00:33:24,120
the way let's talk about how do we just

793
00:33:24,120 --> 00:33:27,299
um holistically approach uh securing

794
00:33:27,299 --> 00:33:30,260
kubernetes clusters

795
00:33:30,840 --> 00:33:33,299
and we start with network policy so I've

796
00:33:33,299 --> 00:33:35,640
showed that example of a network policy

797
00:33:35,640 --> 00:33:38,279
that's a native way to

798
00:33:38,279 --> 00:33:40,679
basically do micro segmentation or any

799
00:33:40,679 --> 00:33:42,539
sort of segmentation within the cluster

800
00:33:42,539 --> 00:33:45,779
when I said that by default Network the

801
00:33:45,779 --> 00:33:48,720
namespaces are just logical grouping of

802
00:33:48,720 --> 00:33:50,519
resources

803
00:33:50,519 --> 00:33:53,340
by default no traffic is restricted

804
00:33:53,340 --> 00:33:55,200
between the name spaces so if that's

805
00:33:55,200 --> 00:33:57,000
something you want to do you're going to

806
00:33:57,000 --> 00:33:58,740
use Network policies to basically

807
00:33:58,740 --> 00:34:01,799
enforce uh the the that kind of traffic

808
00:34:01,799 --> 00:34:04,500
traffic policy

809
00:34:04,500 --> 00:34:05,519
um

810
00:34:05,519 --> 00:34:08,520
Network policies are not supported by

811
00:34:08,520 --> 00:34:10,020
default

812
00:34:10,020 --> 00:34:15,540
um cni providers in AKA AKs eks or gke

813
00:34:15,540 --> 00:34:17,879
so you need to deploy a new kind of

814
00:34:17,879 --> 00:34:19,739
networking plugin to to be able to use

815
00:34:19,739 --> 00:34:22,320
them but it's a very common way again to

816
00:34:22,320 --> 00:34:25,980
to to provide that kind of functionality

817
00:34:25,980 --> 00:34:28,800
uh even if you have a networking plugin

818
00:34:28,800 --> 00:34:30,599
that supports Network policies by

819
00:34:30,599 --> 00:34:32,760
default no restrictions are going to be

820
00:34:32,760 --> 00:34:35,580
put in place but when you do configure

821
00:34:35,580 --> 00:34:38,839
Network policies you can apply them to

822
00:34:38,839 --> 00:34:41,699
Ingress and egress traffic so you can

823
00:34:41,699 --> 00:34:44,460
allow pods to connect out or you can

824
00:34:44,460 --> 00:34:46,199
block those connections and you can

825
00:34:46,199 --> 00:34:48,239
specify which pods can connect to which

826
00:34:48,239 --> 00:34:50,040
other pods or you can block those

827
00:34:50,040 --> 00:34:52,320
connections and generally you would use

828
00:34:52,320 --> 00:34:54,839
rules based on labels you will have pods

829
00:34:54,839 --> 00:34:56,940
and deployments labeled so that's

830
00:34:56,940 --> 00:34:58,560
basically another way to kind of

831
00:34:58,560 --> 00:35:00,660
logically group things together so you

832
00:35:00,660 --> 00:35:02,520
might have for example a web service

833
00:35:02,520 --> 00:35:04,380
that connects to a database and the web

834
00:35:04,380 --> 00:35:07,440
service will have a label of front end

835
00:35:07,440 --> 00:35:10,140
and the database will have a label of

836
00:35:10,140 --> 00:35:12,300
database and you can say anything with

837
00:35:12,300 --> 00:35:14,940
the label of front end can connect to

838
00:35:14,940 --> 00:35:17,700
anything with the label of database but

839
00:35:17,700 --> 00:35:19,680
nothing else will be able to connect to

840
00:35:19,680 --> 00:35:21,359
the database so that's the use of labels

841
00:35:21,359 --> 00:35:23,220
because the environment is so Dynamic

842
00:35:23,220 --> 00:35:26,520
labels are used in a lot of keys pieces

843
00:35:26,520 --> 00:35:29,460
for for basically identifying things

844
00:35:29,460 --> 00:35:32,720
within the cluster

845
00:35:33,119 --> 00:35:35,640
now let's talk about the credentials so

846
00:35:35,640 --> 00:35:39,780
we we've got uh the instance metadata

847
00:35:39,780 --> 00:35:40,760
um

848
00:35:40,760 --> 00:35:45,480
uh thing so with with instance metadata

849
00:35:45,480 --> 00:35:46,800
a lot of times there's going to be

850
00:35:46,800 --> 00:35:48,900
credentials contained in there you can

851
00:35:48,900 --> 00:35:51,240
restrict access or you should restrict

852
00:35:51,240 --> 00:35:53,280
access to those either using network

853
00:35:53,280 --> 00:35:57,119
policies or there's also a cloud

854
00:35:57,119 --> 00:35:59,520
providers support a native way to

855
00:35:59,520 --> 00:36:02,520
basically assign permissions to the IIs

856
00:36:02,520 --> 00:36:05,040
environment to the infrastructure to the

857
00:36:05,040 --> 00:36:06,900
workloads if you need to do that so for

858
00:36:06,900 --> 00:36:09,240
example if you've got a container that

859
00:36:09,240 --> 00:36:11,520
does Backups and you need to be able to

860
00:36:11,520 --> 00:36:13,800
upload those backups to S3

861
00:36:13,800 --> 00:36:16,680
there is a native way that uh

862
00:36:16,680 --> 00:36:19,320
all of the major Cloud providers Amazon

863
00:36:19,320 --> 00:36:23,040
Google and Microsoft basically allow you

864
00:36:23,040 --> 00:36:25,320
to assign Cloud permissions to the

865
00:36:25,320 --> 00:36:27,180
specific workloads that you run in in

866
00:36:27,180 --> 00:36:30,720
the cluster uh Amazon calls it

867
00:36:30,720 --> 00:36:32,760
um imros for service accounts Google

868
00:36:32,760 --> 00:36:35,820
calls it gke workload identity and

869
00:36:35,820 --> 00:36:38,760
Microsoft calls it AKs Azure ID pod

870
00:36:38,760 --> 00:36:40,920
identity but you basically can say okay

871
00:36:40,920 --> 00:36:43,920
here's my role I assign this role to

872
00:36:43,920 --> 00:36:46,260
this specific workload not to the whole

873
00:36:46,260 --> 00:36:48,720
cluster or not to the node that's part

874
00:36:48,720 --> 00:36:50,700
of the cluster

875
00:36:50,700 --> 00:36:53,160
and so if you use that highly recommend

876
00:36:53,160 --> 00:36:55,020
doing that if if you don't need your

877
00:36:55,020 --> 00:36:57,119
workloads or workloads that don't need

878
00:36:57,119 --> 00:36:58,980
access to

879
00:36:58,980 --> 00:37:00,320
um to them

880
00:37:00,320 --> 00:37:04,020
today Cloud resources you can just block

881
00:37:04,020 --> 00:37:05,700
access to the instance metadata

882
00:37:05,700 --> 00:37:08,579
altogether using network policies uh

883
00:37:08,579 --> 00:37:09,960
we've talked about service content

884
00:37:09,960 --> 00:37:12,960
mounting those tokens

885
00:37:12,960 --> 00:37:14,940
um my guess is majority of your

886
00:37:14,940 --> 00:37:17,220
workloads do not need access to the

887
00:37:17,220 --> 00:37:18,900
kubernetes control plane they do not

888
00:37:18,900 --> 00:37:20,700
need to interact with a cluster they

889
00:37:20,700 --> 00:37:22,440
they're just running within the cluster

890
00:37:22,440 --> 00:37:25,740
and so for most of them you would want

891
00:37:25,740 --> 00:37:27,480
to set that Auto Mount service account

892
00:37:27,480 --> 00:37:30,000
token parameter to fall so that you

893
00:37:30,000 --> 00:37:32,339
don't even though there might not be a

894
00:37:32,339 --> 00:37:34,680
lot of a lot of permissions associated

895
00:37:34,680 --> 00:37:37,320
with that service count but you might

896
00:37:37,320 --> 00:37:38,700
just completely remove that access

897
00:37:38,700 --> 00:37:40,260
altogether

898
00:37:40,260 --> 00:37:42,000
and the last thing you would want to

899
00:37:42,000 --> 00:37:45,000
think about is how do I manage users so

900
00:37:45,000 --> 00:37:47,040
we said that there's going to be some

901
00:37:47,040 --> 00:37:49,020
some sort of external identity provider

902
00:37:49,020 --> 00:37:50,940
usually through the same cloud service

903
00:37:50,940 --> 00:37:53,220
provider so it's going to be either

904
00:37:53,220 --> 00:37:58,560
Azure ID or AWS IM and whatnot so but

905
00:37:58,560 --> 00:38:01,920
credentials if the users need protection

906
00:38:01,920 --> 00:38:03,599
as well so things like traditional

907
00:38:03,599 --> 00:38:05,760
things like MFA and not like having

908
00:38:05,760 --> 00:38:07,800
credentials and or not checking

909
00:38:07,800 --> 00:38:09,180
credentials into the version control

910
00:38:09,180 --> 00:38:13,339
system are still going to apply

911
00:38:13,380 --> 00:38:15,800
next is the control plane itself so we

912
00:38:15,800 --> 00:38:20,099
we've kind of said that there's as part

913
00:38:20,099 --> 00:38:22,079
of that attack surface we've got the API

914
00:38:22,079 --> 00:38:24,359
server the the control plane

915
00:38:24,359 --> 00:38:27,839
by default most of the all three of the

916
00:38:27,839 --> 00:38:30,359
major cloud service providers allow

917
00:38:30,359 --> 00:38:33,359
public access to that API server when

918
00:38:33,359 --> 00:38:35,820
you provision a cluster it's probably a

919
00:38:35,820 --> 00:38:38,099
good idea to restrict that access to

920
00:38:38,099 --> 00:38:40,380
only either networks or like IP

921
00:38:40,380 --> 00:38:43,260
addresses that that need it because even

922
00:38:43,260 --> 00:38:45,660
though you might you might not be

923
00:38:45,660 --> 00:38:48,480
exposing the credentials it's kind of a

924
00:38:48,480 --> 00:38:51,599
defense in-depth idea that even if I've

925
00:38:51,599 --> 00:38:54,000
leaked credentials if nobody can connect

926
00:38:54,000 --> 00:38:56,099
my API server I'm still I'm still

927
00:38:56,099 --> 00:38:57,720
protected

928
00:38:57,720 --> 00:39:00,420
and then as part of the kind of securing

929
00:39:00,420 --> 00:39:01,980
control plane it's also important to

930
00:39:01,980 --> 00:39:03,839
keep kubernetes itself up to date

931
00:39:03,839 --> 00:39:06,000
there's CVS that

932
00:39:06,000 --> 00:39:07,980
um that are published uh in kubernetes

933
00:39:07,980 --> 00:39:10,020
components from time to time and so

934
00:39:10,020 --> 00:39:12,839
that's kind of that you know just

935
00:39:12,839 --> 00:39:16,260
General Health and and uh maintenance of

936
00:39:16,260 --> 00:39:19,020
of the API plane uh that also needs to

937
00:39:19,020 --> 00:39:20,460
happen

938
00:39:20,460 --> 00:39:24,180
um I want to mention that gke has this

939
00:39:24,180 --> 00:39:26,820
feature of basically doing all of those

940
00:39:26,820 --> 00:39:29,220
updates automatically for you you don't

941
00:39:29,220 --> 00:39:31,440
even need to worry about it you just say

942
00:39:31,440 --> 00:39:34,020
Okay this the this is how I want the

943
00:39:34,020 --> 00:39:36,680
updates like just update to the next

944
00:39:36,680 --> 00:39:39,780
minor version and it's gonna take care

945
00:39:39,780 --> 00:39:42,060
of everything for you you don't need to

946
00:39:42,060 --> 00:39:45,300
uh to be too concerned

947
00:39:45,300 --> 00:39:47,520
securing the workloads

948
00:39:47,520 --> 00:39:49,500
um in terms of the workloads there's

949
00:39:49,500 --> 00:39:51,780
several parameters that you can set on

950
00:39:51,780 --> 00:39:54,240
on the Pod to make the workloads more

951
00:39:54,240 --> 00:39:56,400
secure and those are generally done

952
00:39:56,400 --> 00:39:58,619
through that security context so it's a

953
00:39:58,619 --> 00:40:01,920
property on the on the Pod uh that you

954
00:40:01,920 --> 00:40:05,160
can apply and you would want to look at

955
00:40:05,160 --> 00:40:08,400
things like requiring non-root user for

956
00:40:08,400 --> 00:40:10,500
to to run the workload so that's like

957
00:40:10,500 --> 00:40:12,720
what user ID is used within the

958
00:40:12,720 --> 00:40:14,700
container to actually run run the

959
00:40:14,700 --> 00:40:15,859
application

960
00:40:15,859 --> 00:40:18,540
disallowing privileged uh privileged

961
00:40:18,540 --> 00:40:20,880
pods so that privileged flag that we had

962
00:40:20,880 --> 00:40:23,040
you can actually set in the security

963
00:40:23,040 --> 00:40:26,040
context that this this pod cannot be a

964
00:40:26,040 --> 00:40:28,380
privileged privileged pod

965
00:40:28,380 --> 00:40:30,119
um disable privilege escalation so

966
00:40:30,119 --> 00:40:31,859
they're basically Breaking All the set

967
00:40:31,859 --> 00:40:34,800
uid type binaries to basically get root

968
00:40:34,800 --> 00:40:37,920
access within the container disable host

969
00:40:37,920 --> 00:40:40,619
file system mounting that's generally a

970
00:40:40,619 --> 00:40:42,240
bad idea because

971
00:40:42,240 --> 00:40:44,400
workloads are Dynamic you don't know

972
00:40:44,400 --> 00:40:46,680
where it's gonna when it's gonna die

973
00:40:46,680 --> 00:40:48,780
where it's going to be restarted and so

974
00:40:48,780 --> 00:40:52,020
relying on host file system is not a

975
00:40:52,020 --> 00:40:53,640
good idea anyways

976
00:40:53,640 --> 00:40:57,300
and using read-only root file system

977
00:40:57,300 --> 00:41:00,540
um all of these can be enforced at a

978
00:41:00,540 --> 00:41:02,220
cluster level if you want to but you

979
00:41:02,220 --> 00:41:05,220
have to use external Tools in most cases

980
00:41:05,220 --> 00:41:06,960
so there's a new feature called pod

981
00:41:06,960 --> 00:41:09,540
security it defines three different

982
00:41:09,540 --> 00:41:12,180
different profiles that you can apply on

983
00:41:12,180 --> 00:41:14,220
a namespace basis you basically can say

984
00:41:14,220 --> 00:41:18,720
okay this namespace will have the

985
00:41:18,720 --> 00:41:20,400
Baseline profile and those three

986
00:41:20,400 --> 00:41:23,099
profiles are unrestricted Baseline and

987
00:41:23,099 --> 00:41:24,359
restricted

988
00:41:24,359 --> 00:41:27,720
and it allows it basically sets or

989
00:41:27,720 --> 00:41:30,240
enforces security context within that

990
00:41:30,240 --> 00:41:32,820
namespace to which it applies based on

991
00:41:32,820 --> 00:41:35,160
that profile so it's not very flexible

992
00:41:35,160 --> 00:41:36,960
but it's there out of the box you can

993
00:41:36,960 --> 00:41:38,700
use it or you can use something like

994
00:41:38,700 --> 00:41:42,240
open policy agent gatekeeper or kyverno

995
00:41:42,240 --> 00:41:45,859
to risk to enforce this security context

996
00:41:45,859 --> 00:41:48,720
context on a more kind of granular

997
00:41:48,720 --> 00:41:50,460
granular level

998
00:41:50,460 --> 00:41:52,500
and similar to the maintaining the

999
00:41:52,500 --> 00:41:54,240
control plane it's also important to

1000
00:41:54,240 --> 00:41:56,339
keep your operating system and kernel up

1001
00:41:56,339 --> 00:41:58,320
to date because that's one of the ways

1002
00:41:58,320 --> 00:42:00,960
how container escapes can happen

1003
00:42:00,960 --> 00:42:04,380
uh on that level as well uh also

1004
00:42:04,380 --> 00:42:07,800
highlighting that gke even here they

1005
00:42:07,800 --> 00:42:10,200
support kind of automatic updates of the

1006
00:42:10,200 --> 00:42:13,200
note so in a sense you can set set and

1007
00:42:13,200 --> 00:42:15,540
forget I'm gonna spin up this cluster

1008
00:42:15,540 --> 00:42:17,579
I'll enable automatic updates of the

1009
00:42:17,579 --> 00:42:19,320
kubernetes I'll enable automatic

1010
00:42:19,320 --> 00:42:21,720
patching of the nodes and I'm Hands-On

1011
00:42:21,720 --> 00:42:25,819
I'm gonna focus on the workloads

1012
00:42:28,440 --> 00:42:30,000
um there's a couple more interesting

1013
00:42:30,000 --> 00:42:32,579
things developments that have not been

1014
00:42:32,579 --> 00:42:36,119
widely adopted yet there's some projects

1015
00:42:36,119 --> 00:42:39,300
that provide better isolation uh for for

1016
00:42:39,300 --> 00:42:41,640
the containers so there's like things

1017
00:42:41,640 --> 00:42:45,119
that can emulate a kernel in userland so

1018
00:42:45,119 --> 00:42:46,619
even if you've got the kernel

1019
00:42:46,619 --> 00:42:48,480
vulnerability it's not going to allow

1020
00:42:48,480 --> 00:42:50,460
the container workload to escape and

1021
00:42:50,460 --> 00:42:53,760
things like that uh some of those slowly

1022
00:42:53,760 --> 00:42:56,400
are making their way into Cloud

1023
00:42:56,400 --> 00:42:58,460
environments and and manage kubernetes

1024
00:42:58,460 --> 00:43:02,160
environments but there's also the the

1025
00:43:02,160 --> 00:43:04,800
image side of things so

1026
00:43:04,800 --> 00:43:06,920
the whole premise and the whole

1027
00:43:06,920 --> 00:43:09,300
important attack scenario that we've

1028
00:43:09,300 --> 00:43:11,400
we've been talking about was a

1029
00:43:11,400 --> 00:43:13,859
compromised workload so you would want

1030
00:43:13,859 --> 00:43:16,619
obviously to make those workloads harder

1031
00:43:16,619 --> 00:43:19,440
to compromise and that uh that in

1032
00:43:19,440 --> 00:43:22,079
includes uh securing the images that

1033
00:43:22,079 --> 00:43:23,880
you're using so using images from

1034
00:43:23,880 --> 00:43:26,700
trusted sources uh using minimal images

1035
00:43:26,700 --> 00:43:29,819
using CV scanning of the images and and

1036
00:43:29,819 --> 00:43:32,720
things like that

1037
00:43:33,480 --> 00:43:36,599
all right uh last piece that I want to

1038
00:43:36,599 --> 00:43:39,839
talk about is cloud native Security

1039
00:43:39,839 --> 00:43:41,339
Solutions

1040
00:43:41,339 --> 00:43:43,619
these are tools that have been designed

1041
00:43:43,619 --> 00:43:45,900
to work with containerized workloads and

1042
00:43:45,900 --> 00:43:47,819
work with kubernetes clusters from the

1043
00:43:47,819 --> 00:43:50,900
ground up and they can do things like

1044
00:43:50,900 --> 00:43:53,760
providing configuration checks and

1045
00:43:53,760 --> 00:43:55,800
highlighting security misconfigurations

1046
00:43:55,800 --> 00:43:58,800
for you so things think CIS Benchmark

1047
00:43:58,800 --> 00:44:00,599
but they can do much more checks than

1048
00:44:00,599 --> 00:44:03,420
just the cas benchmarks they can do

1049
00:44:03,420 --> 00:44:07,200
those image and registry scans so they

1050
00:44:07,200 --> 00:44:09,119
can basically scans your images and

1051
00:44:09,119 --> 00:44:11,520
either generate s-bombs or highlight the

1052
00:44:11,520 --> 00:44:13,859
cves that you have in the images that

1053
00:44:13,859 --> 00:44:15,540
you're running to help you secure the

1054
00:44:15,540 --> 00:44:18,180
workloads they can also

1055
00:44:18,180 --> 00:44:20,460
monitor the behavior of the containers

1056
00:44:20,460 --> 00:44:22,500
this can be done depending on what tools

1057
00:44:22,500 --> 00:44:25,140
you tool you use either on a rule base

1058
00:44:25,140 --> 00:44:28,020
or think I've got Apache all of a sudden

1059
00:44:28,020 --> 00:44:29,460
it starts to Shell and starts running

1060
00:44:29,460 --> 00:44:31,319
commands so that kind of scenario though

1061
00:44:31,319 --> 00:44:33,480
so that's the the type of things that

1062
00:44:33,480 --> 00:44:36,119
the rules are allow you to detect or

1063
00:44:36,119 --> 00:44:38,640
some some of them do anomaly detections

1064
00:44:38,640 --> 00:44:40,980
so they Baseline what your workloads

1065
00:44:40,980 --> 00:44:42,960
generally do and then if there's

1066
00:44:42,960 --> 00:44:45,119
anything outside of that established

1067
00:44:45,119 --> 00:44:47,520
Baseline profile they can alert you

1068
00:44:47,520 --> 00:44:49,440
about those activities and that can be

1069
00:44:49,440 --> 00:44:50,960
in terms of

1070
00:44:50,960 --> 00:44:52,980
binaries that are executed within

1071
00:44:52,980 --> 00:44:54,780
container it can be in terms of network

1072
00:44:54,780 --> 00:44:57,780
connections that are initiated by the

1073
00:44:57,780 --> 00:45:00,300
workloads it can be in terms of even the

1074
00:45:00,300 --> 00:45:02,579
syscalls that the workload makes so if

1075
00:45:02,579 --> 00:45:04,800
all of a sudden it starts trying to

1076
00:45:04,800 --> 00:45:06,960
mount file systems or do things like

1077
00:45:06,960 --> 00:45:09,119
that that they didn't do before that's

1078
00:45:09,119 --> 00:45:11,940
the alert that that you'll get

1079
00:45:11,940 --> 00:45:15,240
uh some of the cloud native tools can

1080
00:45:15,240 --> 00:45:17,940
also do traffic monitoring within the

1081
00:45:17,940 --> 00:45:20,220
cluster so it's kind of an overlay over

1082
00:45:20,220 --> 00:45:23,339
the cni and it they can act as a

1083
00:45:23,339 --> 00:45:25,680
internal WAFF within the cluster or just

1084
00:45:25,680 --> 00:45:28,140
enforce kind of additional capabilities

1085
00:45:28,140 --> 00:45:31,619
to enforce uh Network policies on top of

1086
00:45:31,619 --> 00:45:33,359
the just the built-in Network policies

1087
00:45:33,359 --> 00:45:34,859
and they can provide some for

1088
00:45:34,859 --> 00:45:36,780
information that's useful for forensics

1089
00:45:36,780 --> 00:45:38,819
analysis so if you did have an incident

1090
00:45:38,819 --> 00:45:41,099
they'll provide additional contacts of

1091
00:45:41,099 --> 00:45:43,380
what was happening within the Pod at the

1092
00:45:43,380 --> 00:45:45,180
time of the incident and give you that

1093
00:45:45,180 --> 00:45:47,060
additional signal that you can use

1094
00:45:47,060 --> 00:45:49,560
forensics purposes

1095
00:45:49,560 --> 00:45:51,560
foreign

1096
00:45:51,560 --> 00:45:54,960
with that that's basically all the

1097
00:45:54,960 --> 00:45:56,579
content I had for today I've got some

1098
00:45:56,579 --> 00:45:59,640
recommendation about open source tools

1099
00:45:59,640 --> 00:46:02,400
you can use these are freely available a

1100
00:46:02,400 --> 00:46:04,319
lot of the companies that make them also

1101
00:46:04,319 --> 00:46:06,500
make the cloud native Security Solutions

1102
00:46:06,500 --> 00:46:09,839
uh 3v is probably one of the best ones

1103
00:46:09,839 --> 00:46:12,300
they've expanded the functionality quite

1104
00:46:12,300 --> 00:46:14,460
a lot lately it was initially created as

1105
00:46:14,460 --> 00:46:16,980
the container CV scanning tool but now

1106
00:46:16,980 --> 00:46:18,839
it can also do infrastructures code

1107
00:46:18,839 --> 00:46:20,400
analysis it can do cluster

1108
00:46:20,400 --> 00:46:22,920
configurational analysis and a whole

1109
00:46:22,920 --> 00:46:24,260
bunch of other things

1110
00:46:24,260 --> 00:46:27,900
Falco is the behavior monitoring tool so

1111
00:46:27,900 --> 00:46:29,819
Falco is an open source project there's

1112
00:46:29,819 --> 00:46:32,339
a commercial version uh that's using the

1113
00:46:32,339 --> 00:46:34,260
the same engine but essentially you can

1114
00:46:34,260 --> 00:46:37,140
fit it rules to detect those uh things

1115
00:46:37,140 --> 00:46:39,680
like as I mentioned like Apache service

1116
00:46:39,680 --> 00:46:42,079
starting a shell and things like that

1117
00:46:42,079 --> 00:46:45,079
Cube bench and Cube Hunter can assess

1118
00:46:45,079 --> 00:46:47,460
the the configuration of your cluster

1119
00:46:47,460 --> 00:46:50,579
Cube bench strictly focuses on CIS

1120
00:46:50,579 --> 00:46:53,700
Benchmark Cube Hunter does additional

1121
00:46:53,700 --> 00:46:56,160
checks that are not part of the CIS

1122
00:46:56,160 --> 00:46:58,920
Benchmark and it can also do like

1123
00:46:58,920 --> 00:47:01,680
cluster assessment from within you can

1124
00:47:01,680 --> 00:47:03,480
deploy it as a workload within the

1125
00:47:03,480 --> 00:47:05,940
cluster and it can see what what

1126
00:47:05,940 --> 00:47:07,980
workloads that run in your cluster have

1127
00:47:07,980 --> 00:47:10,160
access to and what other things

1128
00:47:10,160 --> 00:47:12,540
basically check for that privilege

1129
00:47:12,540 --> 00:47:15,060
escalation and lateral movement type

1130
00:47:15,060 --> 00:47:18,060
misconfigurations

1131
00:47:18,720 --> 00:47:22,140
um cubesec and uh gripe cubesack does

1132
00:47:22,140 --> 00:47:24,240
infrastructures code scanning so kind of

1133
00:47:24,240 --> 00:47:27,240
similar to some of the trivi uh

1134
00:47:27,240 --> 00:47:29,160
functionality in gripe is another cve

1135
00:47:29,160 --> 00:47:31,500
scanning tool for images that that is

1136
00:47:31,500 --> 00:47:34,579
fairly widely used

1137
00:47:34,980 --> 00:47:36,780
um some resources if you want to learn

1138
00:47:36,780 --> 00:47:38,400
more there's

1139
00:47:38,400 --> 00:47:40,800
an excellent introduction to kubernetes

1140
00:47:40,800 --> 00:47:42,720
course on Coursera

1141
00:47:42,720 --> 00:47:46,200
uh or sorry on uh edx that's official

1142
00:47:46,200 --> 00:47:49,500
cncl so cncf is a body that maintains or

1143
00:47:49,500 --> 00:47:52,020
manages the kubernetes project so this

1144
00:47:52,020 --> 00:47:54,900
is a official intra level course but

1145
00:47:54,900 --> 00:47:57,540
even that provides quite a lot of useful

1146
00:47:57,540 --> 00:47:59,099
uh

1147
00:47:59,099 --> 00:48:01,200
useful information if you want to just

1148
00:48:01,200 --> 00:48:02,880
you know start learning about kubernetes

1149
00:48:02,880 --> 00:48:05,220
some more uh there's a bunch of labs

1150
00:48:05,220 --> 00:48:07,140
some of them are free uh there's play

1151
00:48:07,140 --> 00:48:10,200
with kubernetes Cube by example uh

1152
00:48:10,200 --> 00:48:12,960
there's a couple ebooks that Aqua

1153
00:48:12,960 --> 00:48:14,940
security and red hat have released that

1154
00:48:14,940 --> 00:48:17,280
talk about securing kubernetes there's

1155
00:48:17,280 --> 00:48:19,859
also OS kubernetes security cheat sheet

1156
00:48:19,859 --> 00:48:22,200
that's that's quite useful as well and

1157
00:48:22,200 --> 00:48:23,880
Microsoft not that long ago they've

1158
00:48:23,880 --> 00:48:26,900
released kind of a miter attack style

1159
00:48:26,900 --> 00:48:30,119
Matrix for kubernetes based attacks so

1160
00:48:30,119 --> 00:48:32,640
if you're into like mapping and checking

1161
00:48:32,640 --> 00:48:34,380
different scenarios that can happen in

1162
00:48:34,380 --> 00:48:37,079
mapping incidents or just you know

1163
00:48:37,079 --> 00:48:38,880
threat models to to those different

1164
00:48:38,880 --> 00:48:41,579
scenarios that's a good resource to

1165
00:48:41,579 --> 00:48:43,740
check

1166
00:48:43,740 --> 00:48:45,839
I've got the link to my slides if you

1167
00:48:45,839 --> 00:48:48,300
want to check them this QR code if it

1168
00:48:48,300 --> 00:48:50,220
works leads to the slides as well so

1169
00:48:50,220 --> 00:48:51,839
that's basically the same as that link

1170
00:48:51,839 --> 00:48:54,540
down below uh feel free to check them

1171
00:48:54,540 --> 00:48:57,060
out use them as you will and thanks so

1172
00:48:57,060 --> 00:48:59,000
much for coming I'm happy if we've got

1173
00:48:59,000 --> 00:49:02,819
time I'm happy to

1174
00:49:02,819 --> 00:49:06,180
um if if anybody's got any questions

1175
00:49:06,180 --> 00:49:09,060
I I would think about this problem from

1176
00:49:09,060 --> 00:49:12,540
kind of the perspective of

1177
00:49:12,540 --> 00:49:15,660
data so if

1178
00:49:15,660 --> 00:49:17,880
if I've got data that's much more

1179
00:49:17,880 --> 00:49:20,160
sensitive than the rest of the data this

1180
00:49:20,160 --> 00:49:22,079
is when I'll start thinking about should

1181
00:49:22,079 --> 00:49:24,240
I segment this into a separate cluster

1182
00:49:24,240 --> 00:49:26,220
or

1183
00:49:26,220 --> 00:49:28,440
do I have the tools that are built in

1184
00:49:28,440 --> 00:49:30,660
kubernetes like the network policies do

1185
00:49:30,660 --> 00:49:32,099
I feel like that's enough of a

1186
00:49:32,099 --> 00:49:35,579
segmentation for because the big thing

1187
00:49:35,579 --> 00:49:37,260
again we need to be concerned about is

1188
00:49:37,260 --> 00:49:39,500
that lateral movement so

1189
00:49:39,500 --> 00:49:41,880
network-based attacks is probably the

1190
00:49:41,880 --> 00:49:43,740
the biggest part of that so if I'm

1191
00:49:43,740 --> 00:49:45,660
confident I'm able to kind of

1192
00:49:45,660 --> 00:49:47,640
sufficiently segment the services and

1193
00:49:47,640 --> 00:49:50,880
the data and the data stores Etc within

1194
00:49:50,880 --> 00:49:52,740
the cluster using the network policies

1195
00:49:52,740 --> 00:49:56,280
using our back and things like that uh

1196
00:49:56,280 --> 00:49:57,960
that's kind of the deciding factor But

1197
00:49:57,960 --> 00:50:00,079
ultimately it's like

1198
00:50:00,079 --> 00:50:03,420
within this heap of crown jewels do I

1199
00:50:03,420 --> 00:50:05,460
have like the crown jewels of the crown

1200
00:50:05,460 --> 00:50:07,619
jewels is there a subset of data that's

1201
00:50:07,619 --> 00:50:11,220
so sensitive that uh I'd rather not even

1202
00:50:11,220 --> 00:50:13,500
risk like those Network policies working

1203
00:50:13,500 --> 00:50:16,260
well I'd rather split them out to to a

1204
00:50:16,260 --> 00:50:17,640
completely different classroom that

1205
00:50:17,640 --> 00:50:19,260
that's how I would think about that but

1206
00:50:19,260 --> 00:50:21,240
again I haven't haven't had much

1207
00:50:21,240 --> 00:50:24,300
experience with multi-stancy

1208
00:50:24,300 --> 00:50:27,420
when I first found that option I was

1209
00:50:27,420 --> 00:50:30,119
very confused I'm like why would you

1210
00:50:30,119 --> 00:50:32,460
build privileged escalation into the

1211
00:50:32,460 --> 00:50:34,500
system and then allowed to disable it

1212
00:50:34,500 --> 00:50:37,800
what that actually talks about is you

1213
00:50:37,800 --> 00:50:39,900
know in Linux you might have a set uid

1214
00:50:39,900 --> 00:50:42,780
binary so binary is just that basically

1215
00:50:42,780 --> 00:50:45,359
like I'm running as non-root user but I

1216
00:50:45,359 --> 00:50:48,300
can run like Ping or trace route that

1217
00:50:48,300 --> 00:50:50,520
use some of the syscalls that basically

1218
00:50:50,520 --> 00:50:51,500
require

1219
00:50:51,500 --> 00:50:53,599
root access

1220
00:50:53,599 --> 00:50:57,300
and so I I might have that binary as set

1221
00:50:57,300 --> 00:51:00,059
uid binary so when I run that or like a

1222
00:51:00,059 --> 00:51:02,760
change password binary because it

1223
00:51:02,760 --> 00:51:05,520
modifies the user database right so

1224
00:51:05,520 --> 00:51:08,280
basically what that block privilege

1225
00:51:08,280 --> 00:51:10,319
escalation or I forgot the exact name of

1226
00:51:10,319 --> 00:51:13,800
that feature is it it doesn't allow set

1227
00:51:13,800 --> 00:51:16,140
uid binary so even if you run set uid

1228
00:51:16,140 --> 00:51:18,420
binary within the container with that

1229
00:51:18,420 --> 00:51:20,640
turned on on the Pod or in the container

1230
00:51:20,640 --> 00:51:23,040
you're not going to get root access to

1231
00:51:23,040 --> 00:51:25,740
as part of using that set uad so it

1232
00:51:25,740 --> 00:51:27,540
basically blocks set uad binaries that's

1233
00:51:27,540 --> 00:51:29,760
the the gist of it

1234
00:51:29,760 --> 00:51:31,980
fairly simple thing that sound at least

1235
00:51:31,980 --> 00:51:33,960
to me sounded very confusing when I was

1236
00:51:33,960 --> 00:51:38,359
initially learning about it

1237
00:51:41,599 --> 00:51:43,559
all right

1238
00:51:43,559 --> 00:51:45,359
there's no more questions thank you so

1239
00:51:45,359 --> 00:51:47,760
much hopefully this was useful and again

1240
00:51:47,760 --> 00:51:51,380
feel free to use this fight

