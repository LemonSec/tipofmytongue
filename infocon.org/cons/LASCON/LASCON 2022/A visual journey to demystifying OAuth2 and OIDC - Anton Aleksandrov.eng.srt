1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:54,020
[Music]

6
00:00:54,020 --> 00:00:58,020
I'm Anton I'm my role at the momentous

7
00:00:58,020 --> 00:01:00,239
principal solution architect with AWS

8
00:01:00,239 --> 00:01:02,280
and this pretty much has absolutely

9
00:01:02,280 --> 00:01:03,780
nothing to do with what I'm gonna be

10
00:01:03,780 --> 00:01:05,760
talking about today so I'm barely going

11
00:01:05,760 --> 00:01:08,520
to mention AWS if at all right prior to

12
00:01:08,520 --> 00:01:11,580
joining AWS I was a Chief Architect for

13
00:01:11,580 --> 00:01:13,740
cloud Security Services for

14
00:01:13,740 --> 00:01:16,380
six seven years right and you know as

15
00:01:16,380 --> 00:01:18,360
you probably know once you go into

16
00:01:18,360 --> 00:01:20,700
security especially uh you know I.T

17
00:01:20,700 --> 00:01:22,740
Cloud related Security even if you

18
00:01:22,740 --> 00:01:24,180
change careers to restaurant management

19
00:01:24,180 --> 00:01:25,439
you're still going to be thinking about

20
00:01:25,439 --> 00:01:27,840
security right so security is there to

21
00:01:27,840 --> 00:01:29,700
stay uh today we're going to be talking

22
00:01:29,700 --> 00:01:32,460
about oauth 2 in YDC and I'm super

23
00:01:32,460 --> 00:01:34,680
thrilled that we have like almost full

24
00:01:34,680 --> 00:01:36,720
room here even though those topics are

25
00:01:36,720 --> 00:01:41,460
being around for ages probably okay so a

26
00:01:41,460 --> 00:01:43,200
quick show of hands how many of you are

27
00:01:43,200 --> 00:01:45,000
on a technical side development

28
00:01:45,000 --> 00:01:48,780
Architects Etc good good good okay uh

29
00:01:48,780 --> 00:01:50,280
business side

30
00:01:50,280 --> 00:01:53,520
more like product business okay I.T more

31
00:01:53,520 --> 00:01:56,880
like devops kind of okay great great how

32
00:01:56,880 --> 00:01:59,159
many of you have seen the Aladdin movie

33
00:01:59,159 --> 00:02:01,500
not the new one the original one from

34
00:02:01,500 --> 00:02:04,680
90s Disney okay this one

35
00:02:04,680 --> 00:02:07,979
okay awesome uh this is one of my

36
00:02:07,979 --> 00:02:10,318
favorites I was I think like 10 or 12

37
00:02:10,318 --> 00:02:12,959
when I sold it for the first time and

38
00:02:12,959 --> 00:02:15,780
this is the gist of what we're gonna be

39
00:02:15,780 --> 00:02:17,340
talking today right if you remember the

40
00:02:17,340 --> 00:02:19,860
scene we're letting kinda you know goes

41
00:02:19,860 --> 00:02:21,720
to Jasmine and say let's go you know I'm

42
00:02:21,720 --> 00:02:23,520
gonna show you the world and then he

43
00:02:23,520 --> 00:02:26,580
says do you trust me right so with all

44
00:02:26,580 --> 00:02:28,560
of your experience today what should the

45
00:02:28,560 --> 00:02:30,599
answer be

46
00:02:30,599 --> 00:02:33,660
of course not well of course not right

47
00:02:33,660 --> 00:02:36,360
we live in trust no one times right you

48
00:02:36,360 --> 00:02:38,640
do not trust anyone today right when

49
00:02:38,640 --> 00:02:40,620
you're talking about Cloud security and

50
00:02:40,620 --> 00:02:43,440
Security in general you trust no one

51
00:02:43,440 --> 00:02:45,420
when you're building your applications

52
00:02:45,420 --> 00:02:47,700
when you have users and protected

53
00:02:47,700 --> 00:02:50,220
resources basically stuff that you know

54
00:02:50,220 --> 00:02:53,099
users want to access but you know they

55
00:02:53,099 --> 00:02:55,140
need to authenticate in a way you have a

56
00:02:55,140 --> 00:02:57,480
lot of questions should users trust

57
00:02:57,480 --> 00:02:59,640
applications with their credentials so

58
00:02:59,640 --> 00:03:01,319
let's say you have a new you know

59
00:03:01,319 --> 00:03:02,700
awesome Falafel shop in your

60
00:03:02,700 --> 00:03:04,379
neighborhood right and they've built a

61
00:03:04,379 --> 00:03:06,180
mobile application or a web application

62
00:03:06,180 --> 00:03:07,980
and they're asking you to create

63
00:03:07,980 --> 00:03:10,800
username and use your credentials or

64
00:03:10,800 --> 00:03:12,959
moreover you're probably familiar with

65
00:03:12,959 --> 00:03:14,459
those it's still pretty popular today

66
00:03:14,459 --> 00:03:16,440
there are without calling any names

67
00:03:16,440 --> 00:03:18,599
there are those uh Financial companies

68
00:03:18,599 --> 00:03:20,700
that tell you we're going to improve

69
00:03:20,700 --> 00:03:22,319
your credit score or we're gonna tell

70
00:03:22,319 --> 00:03:24,599
you how to you know boost your income

71
00:03:24,599 --> 00:03:26,819
just give us credentials to your bank

72
00:03:26,819 --> 00:03:30,000
account right uh not a good idea

73
00:03:30,000 --> 00:03:32,819
probably not a good idea so you know

74
00:03:32,819 --> 00:03:34,560
again when you're building those

75
00:03:34,560 --> 00:03:37,080
applications remember we live in this

76
00:03:37,080 --> 00:03:39,480
trust no one world

77
00:03:39,480 --> 00:03:43,620
it's hard to trust no one right the idea

78
00:03:43,620 --> 00:03:45,780
is you know if you trust no one it's

79
00:03:45,780 --> 00:03:47,640
hard to collaborate right you do need to

80
00:03:47,640 --> 00:03:50,159
establish some sort of trust so let's

81
00:03:50,159 --> 00:03:52,140
see how this works at my personal

82
00:03:52,140 --> 00:03:55,680
household so this is me imagine me right

83
00:03:55,680 --> 00:03:57,900
my amazing wife and our two and a half

84
00:03:57,900 --> 00:03:59,459
year old girl

85
00:03:59,459 --> 00:04:02,459
this is probably happening daily right

86
00:04:02,459 --> 00:04:04,980
we have this protected resource at home

87
00:04:04,980 --> 00:04:06,900
called candy

88
00:04:06,900 --> 00:04:08,099
okay

89
00:04:08,099 --> 00:04:12,000
and you know may have a candy

90
00:04:12,000 --> 00:04:13,799
two-time winner or father of the year

91
00:04:13,799 --> 00:04:16,858
award what would be my reply

92
00:04:16,858 --> 00:04:19,918
go ask your mom okay obviously go ask

93
00:04:19,918 --> 00:04:22,919
your mom so Mom can I have a candy may I

94
00:04:22,919 --> 00:04:25,380
have a candy of course you can of course

95
00:04:25,380 --> 00:04:28,560
you may mommy said I may what's next

96
00:04:28,560 --> 00:04:32,220
should I give Alex her candy

97
00:04:32,220 --> 00:04:34,860
of course not I'm 42 she's too I don't

98
00:04:34,860 --> 00:04:38,580
trust her yep okay so I need to do

99
00:04:38,580 --> 00:04:41,120
authorization check I need to make sure

100
00:04:41,120 --> 00:04:44,820
that well I need to make sure that the

101
00:04:44,820 --> 00:04:47,400
information she's giving me right is

102
00:04:47,400 --> 00:04:49,740
actually coming from a trusted Source

103
00:04:49,740 --> 00:04:52,440
okay my wife usually not a big fan of me

104
00:04:52,440 --> 00:04:54,660
calling her authorization server but you

105
00:04:54,660 --> 00:04:57,720
know she's she's a chemistry engineer so

106
00:04:57,720 --> 00:05:01,440
she calls me names as well so once I get

107
00:05:01,440 --> 00:05:04,080
this authorization I can actually go to

108
00:05:04,080 --> 00:05:06,479
that protected resource right grab that

109
00:05:06,479 --> 00:05:10,560
candy and give it to the user okay uh I

110
00:05:10,560 --> 00:05:12,060
didn't know if this what happens you

111
00:05:12,060 --> 00:05:13,860
know at your homes right this happens at

112
00:05:13,860 --> 00:05:16,620
my place all the time and when I thought

113
00:05:16,620 --> 00:05:18,600
about it I feel I thought this is a

114
00:05:18,600 --> 00:05:19,800
great example of how to explain

115
00:05:19,800 --> 00:05:21,840
delegated authorization right without

116
00:05:21,840 --> 00:05:24,000
going too too deep into technical

117
00:05:24,000 --> 00:05:25,500
details just yet

118
00:05:25,500 --> 00:05:27,960
this is something you see pretty much

119
00:05:27,960 --> 00:05:30,300
every day right whenever you're stopped

120
00:05:30,300 --> 00:05:31,800
by a cop right and they're asking for

121
00:05:31,800 --> 00:05:34,320
your driving driver license

122
00:05:34,320 --> 00:05:36,060
they're just looking at the license

123
00:05:36,060 --> 00:05:39,120
right and they trust the authority that

124
00:05:39,120 --> 00:05:41,280
issued that license right so essentially

125
00:05:41,280 --> 00:05:44,520
your license is your authorization in

126
00:05:44,520 --> 00:05:46,080
order to validate that authorization

127
00:05:46,080 --> 00:05:48,300
they might take it to their car run it

128
00:05:48,300 --> 00:05:49,800
through the system I have no idea what's

129
00:05:49,800 --> 00:05:51,960
going on there but essentially they

130
00:05:51,960 --> 00:05:54,180
trust your license when you're going to

131
00:05:54,180 --> 00:05:56,460
Costco same thing right you have your

132
00:05:56,460 --> 00:05:58,860
Costco card the validation process is

133
00:05:58,860 --> 00:06:00,660
much simpler is you know welcome to

134
00:06:00,660 --> 00:06:03,600
Costco right but in order to get that

135
00:06:03,600 --> 00:06:06,000
card you have to give your address you

136
00:06:06,000 --> 00:06:08,160
had to provide your details right well I

137
00:06:08,160 --> 00:06:09,360
don't think they have asked for a credit

138
00:06:09,360 --> 00:06:11,520
card but essentially you had to do some

139
00:06:11,520 --> 00:06:13,620
sort of authentication first

140
00:06:13,620 --> 00:06:15,780
if you're talking about applications

141
00:06:15,780 --> 00:06:17,639
today mobile applications web

142
00:06:17,639 --> 00:06:20,160
applications any kind of applications

143
00:06:20,160 --> 00:06:23,340
this is still very common right uh you

144
00:06:23,340 --> 00:06:25,500
know create account for every single

145
00:06:25,500 --> 00:06:27,360
application in the world right give us

146
00:06:27,360 --> 00:06:29,520
your username and password and you know

147
00:06:29,520 --> 00:06:31,080
what happens right everyone probably

148
00:06:31,080 --> 00:06:33,660
uses the same password everywhere right

149
00:06:33,660 --> 00:06:35,520
so once you're compromised in one place

150
00:06:35,520 --> 00:06:38,280
you're compromising everywhere but this

151
00:06:38,280 --> 00:06:41,220
is becoming more popular as we speak

152
00:06:41,220 --> 00:06:44,100
right so instead of every single

153
00:06:44,100 --> 00:06:46,680
application managing their own users

154
00:06:46,680 --> 00:06:48,960
it's common to delegate that to some

155
00:06:48,960 --> 00:06:50,639
authoritative Source right or

156
00:06:50,639 --> 00:06:52,440
destination authorization server

157
00:06:52,440 --> 00:06:55,139
essentially someone who they can trust

158
00:06:55,139 --> 00:06:57,180
and this is all about you know do you

159
00:06:57,180 --> 00:06:59,220
trust me

160
00:06:59,220 --> 00:07:01,560
let's take this you know into our

161
00:07:01,560 --> 00:07:03,060
today's reality we're all building

162
00:07:03,060 --> 00:07:05,940
applications right uh it's hard to

163
00:07:05,940 --> 00:07:07,620
imagine application today that doesn't

164
00:07:07,620 --> 00:07:10,680
have any authentication at all right you

165
00:07:10,680 --> 00:07:12,360
always need to have some sort of

166
00:07:12,360 --> 00:07:14,240
authentication you don't necessarily

167
00:07:14,240 --> 00:07:16,680
authenticate users right away right you

168
00:07:16,680 --> 00:07:18,900
might wait till checkout for example

169
00:07:18,900 --> 00:07:21,599
right or you might authenticate user at

170
00:07:21,599 --> 00:07:23,880
some later point in time but you do need

171
00:07:23,880 --> 00:07:25,440
Authentication

172
00:07:25,440 --> 00:07:27,599
when I was building you know that was

173
00:07:27,599 --> 00:07:29,460
quite a few years ago when I was

174
00:07:29,460 --> 00:07:31,680
building my first authentication slash

175
00:07:31,680 --> 00:07:34,680
authorization service this is the real

176
00:07:34,680 --> 00:07:38,160
picture of my desk right with all of

177
00:07:38,160 --> 00:07:41,160
those rfcs printed right anyone familiar

178
00:07:41,160 --> 00:07:44,340
with those rfcs anyone here is weird

179
00:07:44,340 --> 00:07:47,940
enough to enjoy reading rfcs okay yeah

180
00:07:47,940 --> 00:07:51,720
okay okay so I'm not the load uh rfcs

181
00:07:51,720 --> 00:07:54,120
are no fun okay but they're there for a

182
00:07:54,120 --> 00:07:56,400
reason right request for comments

183
00:07:56,400 --> 00:07:58,680
they are a collection of best practices

184
00:07:58,680 --> 00:08:01,560
and standards right that you do want to

185
00:08:01,560 --> 00:08:03,780
follow but my personal recommendation

186
00:08:03,780 --> 00:08:05,639
after implementing that for a few times

187
00:08:05,639 --> 00:08:07,620
you do not want to implement them

188
00:08:07,620 --> 00:08:10,919
yourselves so if there is one thing one

189
00:08:10,919 --> 00:08:12,419
single thing you want to take away from

190
00:08:12,419 --> 00:08:14,340
this session today that's my personal

191
00:08:14,340 --> 00:08:16,319
recommendation

192
00:08:16,319 --> 00:08:18,660
you do need to have proper security

193
00:08:18,660 --> 00:08:20,520
authentication and authorization in your

194
00:08:20,520 --> 00:08:24,240
applications but try not to implement it

195
00:08:24,240 --> 00:08:26,220
yourself delegate it to some provider

196
00:08:26,220 --> 00:08:27,599
like you know there are open source

197
00:08:27,599 --> 00:08:28,860
libraries that do that that you can

198
00:08:28,860 --> 00:08:30,419
manage it uh you know that you can run

199
00:08:30,419 --> 00:08:33,419
yourself there are companies like OCTA

200
00:08:33,419 --> 00:08:36,059
ping uh Cognito for AWS you know still

201
00:08:36,059 --> 00:08:38,039
work for AWS right but there are many

202
00:08:38,039 --> 00:08:40,919
managed services that do that they do it

203
00:08:40,919 --> 00:08:43,020
great they've been in this field for

204
00:08:43,020 --> 00:08:45,540
years they read it daily that's what

205
00:08:45,540 --> 00:08:47,160
they're you know known for right and

206
00:08:47,160 --> 00:08:48,660
they implement it

207
00:08:48,660 --> 00:08:51,240
if that's not your core business do not

208
00:08:51,240 --> 00:08:53,279
implement it yourself trust you know

209
00:08:53,279 --> 00:08:55,080
someone who knows how to do that

210
00:08:55,080 --> 00:08:56,160
but

211
00:08:56,160 --> 00:08:58,320
even if you use a managed product like

212
00:08:58,320 --> 00:09:01,860
octoping Federate Azure adfs right there

213
00:09:01,860 --> 00:09:03,420
are quite a few you still need to

214
00:09:03,420 --> 00:09:04,980
understand how it works right you don't

215
00:09:04,980 --> 00:09:07,440
have to build your own car but you do

216
00:09:07,440 --> 00:09:09,120
need to understand you know how to drive

217
00:09:09,120 --> 00:09:10,740
it right you do need to understand how

218
00:09:10,740 --> 00:09:13,140
to change tires occasionally you don't

219
00:09:13,140 --> 00:09:15,060
have to but the more you know you know

220
00:09:15,060 --> 00:09:17,160
the better you are at it so today we're

221
00:09:17,160 --> 00:09:19,620
going to be talking about these Basics

222
00:09:19,620 --> 00:09:21,720
we're going to be talking about oauth 2

223
00:09:21,720 --> 00:09:24,540
openid connect Json web token or also

224
00:09:24,540 --> 00:09:27,540
not known as jot or JWT depends who you

225
00:09:27,540 --> 00:09:30,899
talk to and there are tokens those are

226
00:09:30,899 --> 00:09:33,180
open standards that a lot of companies

227
00:09:33,180 --> 00:09:34,500
that Implement authentication and

228
00:09:34,500 --> 00:09:37,440
authorization products are implemented

229
00:09:37,440 --> 00:09:41,339
okay no pun intended and uh in my

230
00:09:41,339 --> 00:09:43,620
opinion it's critical to understand how

231
00:09:43,620 --> 00:09:45,839
they work to make sure that your

232
00:09:45,839 --> 00:09:47,100
environments the environments that

233
00:09:47,100 --> 00:09:48,899
you've built are using them properly

234
00:09:48,899 --> 00:09:52,080
using the correct workflow right and you

235
00:09:52,080 --> 00:09:54,120
know even by using someone else's

236
00:09:54,120 --> 00:09:55,680
product that implements it correctly

237
00:09:55,680 --> 00:09:57,720
you're not breaking you know any

238
00:09:57,720 --> 00:09:59,760
security concerns make sense any

239
00:09:59,760 --> 00:10:01,200
questions so far

240
00:10:01,200 --> 00:10:03,740
okay

241
00:10:04,459 --> 00:10:07,860
so let's start with oauth 2. anyone here

242
00:10:07,860 --> 00:10:10,980
already using auth2

243
00:10:10,980 --> 00:10:12,720
okay cool several

244
00:10:12,720 --> 00:10:15,920
uh remember that problem of delegated

245
00:10:15,920 --> 00:10:18,660
authorization and authentication right

246
00:10:18,660 --> 00:10:20,399
so that problem existed for some time

247
00:10:20,399 --> 00:10:22,560
right uh let's say I'm building my

248
00:10:22,560 --> 00:10:25,260
Falafel shop application and in order to

249
00:10:25,260 --> 00:10:27,600
personalize it I want to show users

250
00:10:27,600 --> 00:10:29,760
picture there right now this picture

251
00:10:29,760 --> 00:10:30,959
might be coming from your Facebook

252
00:10:30,959 --> 00:10:35,160
account but how do I as a user Grant you

253
00:10:35,160 --> 00:10:37,200
permissions to grab that picture from my

254
00:10:37,200 --> 00:10:38,880
Facebook account without giving you

255
00:10:38,880 --> 00:10:41,640
credentials right and how do I as a

256
00:10:41,640 --> 00:10:44,880
Facebook actually know that you know the

257
00:10:44,880 --> 00:10:47,519
real user authorized that Falafel

258
00:10:47,519 --> 00:10:50,640
application right to get uh stuff from

259
00:10:50,640 --> 00:10:53,420
Facebook from my profile make sense okay

260
00:10:53,420 --> 00:10:57,959
so auth2 is was created I think it

261
00:10:57,959 --> 00:10:59,399
started about seven or eight years ago

262
00:10:59,399 --> 00:11:01,079
right it became very prominent about

263
00:11:01,079 --> 00:11:04,200
five years six years ago right uh it's

264
00:11:04,200 --> 00:11:05,880
an industry standard protocol for

265
00:11:05,880 --> 00:11:09,180
authorization if you go to auth2.net you

266
00:11:09,180 --> 00:11:11,160
will get a lot of text explaining what

267
00:11:11,160 --> 00:11:12,660
it does and how it does but you

268
00:11:12,660 --> 00:11:15,060
summarize it right to grab the most

269
00:11:15,060 --> 00:11:17,940
important pieces it's a protocol for

270
00:11:17,940 --> 00:11:21,000
authorization right uh it's all about

271
00:11:21,000 --> 00:11:23,820
Simplicity and it defines specific

272
00:11:23,820 --> 00:11:25,920
workflows or to put it differently it's

273
00:11:25,920 --> 00:11:28,560
a simple authorization protocol defining

274
00:11:28,560 --> 00:11:31,079
specific workflows that's in a nutshell

275
00:11:31,079 --> 00:11:33,300
or two it's a protocol there are

276
00:11:33,300 --> 00:11:35,100
multiple implementations of that

277
00:11:35,100 --> 00:11:37,560
protocol but essentially it defines how

278
00:11:37,560 --> 00:11:39,420
this authorization work

279
00:11:39,420 --> 00:11:40,860
since we're already talking about

280
00:11:40,860 --> 00:11:43,200
authorization it's pretty critical to

281
00:11:43,200 --> 00:11:44,940
explain that authorization and

282
00:11:44,940 --> 00:11:46,500
authentication are not the right the

283
00:11:46,500 --> 00:11:48,360
same thing they are very very different

284
00:11:48,360 --> 00:11:51,000
so authentication it's a process of

285
00:11:51,000 --> 00:11:54,540
validating your identity right so you

286
00:11:54,540 --> 00:11:56,640
know in my household uh example that

287
00:11:56,640 --> 00:11:59,040
would be my wife looking at Alex at my

288
00:11:59,040 --> 00:12:00,959
kid and saying yep that's Alex right

289
00:12:00,959 --> 00:12:02,519
that's you know not some neighborhood

290
00:12:02,519 --> 00:12:04,800
kid right that's her right by validating

291
00:12:04,800 --> 00:12:07,920
her identity authorization that's why

292
00:12:07,920 --> 00:12:10,980
I'm validating or granting access right

293
00:12:10,980 --> 00:12:13,140
this is pretty critical difference right

294
00:12:13,140 --> 00:12:15,300
in this world if you know if any of you

295
00:12:15,300 --> 00:12:17,700
are new to this world you're gonna see

296
00:12:17,700 --> 00:12:19,200
it everywhere right not to confuse

297
00:12:19,200 --> 00:12:21,899
authentication and authorization now

298
00:12:21,899 --> 00:12:23,459
we'll be talking about authentication a

299
00:12:23,459 --> 00:12:25,200
little bit later but to start with

300
00:12:25,200 --> 00:12:28,079
authorization how do you represent

301
00:12:28,079 --> 00:12:30,779
authorization right how do you represent

302
00:12:30,779 --> 00:12:33,480
the fact that you know a user is

303
00:12:33,480 --> 00:12:35,940
authorized to do something and obviously

304
00:12:35,940 --> 00:12:37,860
in that representation you also want to

305
00:12:37,860 --> 00:12:40,079
show what exactly that you user is

306
00:12:40,079 --> 00:12:42,959
authorized to do you don't necessarily

307
00:12:42,959 --> 00:12:46,079
have to mention who that user is Imagine

308
00:12:46,079 --> 00:12:48,300
The Power of that right being able to

309
00:12:48,300 --> 00:12:50,700
prove that user is authorized without

310
00:12:50,700 --> 00:12:53,160
actually exposing any personal data

311
00:12:53,160 --> 00:12:55,019
about the user right when you're going

312
00:12:55,019 --> 00:12:57,120
to Costco with your card they're not

313
00:12:57,120 --> 00:12:58,800
asking to see your passport or driving

314
00:12:58,800 --> 00:13:00,779
license or anything else right it's

315
00:13:00,779 --> 00:13:03,839
enough to authorize you to enter Costco

316
00:13:03,839 --> 00:13:06,300
The Way It Is defined in Old 2 spec

317
00:13:06,300 --> 00:13:08,279
called our access token we're going to

318
00:13:08,279 --> 00:13:10,680
be talking about tokens a lot today and

319
00:13:10,680 --> 00:13:13,019
essentially think about it as a way to

320
00:13:13,019 --> 00:13:15,480
represent authentication it's a token

321
00:13:15,480 --> 00:13:17,459
put it in a nutshell it's a string

322
00:13:17,459 --> 00:13:20,519
basically a string that in some magical

323
00:13:20,519 --> 00:13:21,720
way that we're going to be talking about

324
00:13:21,720 --> 00:13:24,959
today represents authorization

325
00:13:24,959 --> 00:13:28,380
what you defines several workflows they

326
00:13:28,380 --> 00:13:31,139
call them grant grant types okay we're

327
00:13:31,139 --> 00:13:32,519
going to be talking about a few of them

328
00:13:32,519 --> 00:13:35,040
today not going too deep into most of

329
00:13:35,040 --> 00:13:37,800
them but uh you know just a couple and

330
00:13:37,800 --> 00:13:39,899
the idea is each of these workflows each

331
00:13:39,899 --> 00:13:41,820
of those grants are supposed to address

332
00:13:41,820 --> 00:13:44,760
a particular scenario so we'll start

333
00:13:44,760 --> 00:13:46,440
with authorization code that's probably

334
00:13:46,440 --> 00:13:48,839
the most popular uh authorization

335
00:13:48,839 --> 00:13:50,220
workflow

336
00:13:50,220 --> 00:13:52,980
most common uh from my perspective I

337
00:13:52,980 --> 00:13:54,779
would also call it most recommended

338
00:13:54,779 --> 00:13:57,779
unless you very specifically have a use

339
00:13:57,779 --> 00:13:59,760
case that requires a different one okay

340
00:13:59,760 --> 00:14:01,740
so what's the idea of that authorization

341
00:14:01,740 --> 00:14:04,079
code so keep that you know story with my

342
00:14:04,079 --> 00:14:06,959
kid in mind there's a user that goes to

343
00:14:06,959 --> 00:14:09,120
your browser and they want to get

344
00:14:09,120 --> 00:14:11,180
something from application server right

345
00:14:11,180 --> 00:14:13,740
index.html or you know they might be

346
00:14:13,740 --> 00:14:15,899
already you know looking at the front

347
00:14:15,899 --> 00:14:18,240
page but there's a login button right

348
00:14:18,240 --> 00:14:20,220
essentially they want to get something

349
00:14:20,220 --> 00:14:22,139
from that application server from that

350
00:14:22,139 --> 00:14:25,200
application that requires access to this

351
00:14:25,200 --> 00:14:27,060
resource server right that's let's say

352
00:14:27,060 --> 00:14:29,519
Facebook with your photos right how to

353
00:14:29,519 --> 00:14:32,100
get that photo to the website so they're

354
00:14:32,100 --> 00:14:34,320
gonna make that request and the server

355
00:14:34,320 --> 00:14:35,880
application server will tell them whoops

356
00:14:35,880 --> 00:14:38,940
you're not authorized just yet not not

357
00:14:38,940 --> 00:14:41,760
authenticated not authorized because

358
00:14:41,760 --> 00:14:43,320
application Server doesn't know anything

359
00:14:43,320 --> 00:14:45,240
about authentication right it doesn't

360
00:14:45,240 --> 00:14:47,160
know it doesn't want to know how to

361
00:14:47,160 --> 00:14:48,480
authenticate you it's purely about

362
00:14:48,480 --> 00:14:49,920
authorization

363
00:14:49,920 --> 00:14:52,079
what will it do is since we're talking

364
00:14:52,079 --> 00:14:54,120
about browsers and browsers are pretty

365
00:14:54,120 --> 00:14:56,880
awesome supporting HTTP redirects right

366
00:14:56,880 --> 00:14:58,560
it will send you redirect to the

367
00:14:58,560 --> 00:15:00,600
authorization server so essentially

368
00:15:00,600 --> 00:15:02,279
you've probably seen this a million

369
00:15:02,279 --> 00:15:04,260
times you click login button and you're

370
00:15:04,260 --> 00:15:06,180
redirected to Facebook Google or

371
00:15:06,180 --> 00:15:09,120
whatever also common a pop-up right a

372
00:15:09,120 --> 00:15:10,860
little bit more advanced user experience

373
00:15:10,860 --> 00:15:13,199
but instead of redirecting you it's a

374
00:15:13,199 --> 00:15:15,060
pop-up saying you know log in with your

375
00:15:15,060 --> 00:15:17,579
Google or whatever account so there's a

376
00:15:17,579 --> 00:15:20,279
redirect to authorization server now you

377
00:15:20,279 --> 00:15:22,860
as a user now you're not logging in with

378
00:15:22,860 --> 00:15:25,560
that application you're logging in with

379
00:15:25,560 --> 00:15:27,420
the authorization server with Facebook

380
00:15:27,420 --> 00:15:29,760
Google Amazon or your personal

381
00:15:29,760 --> 00:15:32,399
authorization server if you're familiar

382
00:15:32,399 --> 00:15:34,800
with notion of identity provider related

383
00:15:34,800 --> 00:15:37,199
okay definitely relate it I'm just not

384
00:15:37,199 --> 00:15:38,880
going too deep just yet

385
00:15:38,880 --> 00:15:41,160
that authorization server will return a

386
00:15:41,160 --> 00:15:43,980
login or consent form or whatever you're

387
00:15:43,980 --> 00:15:45,720
going to send your credentials if you're

388
00:15:45,720 --> 00:15:47,940
not logged in already right so like

389
00:15:47,940 --> 00:15:49,980
username and password an authorization

390
00:15:49,980 --> 00:15:51,779
server will validate that your

391
00:15:51,779 --> 00:15:53,160
credentials are okay so essential

392
00:15:53,160 --> 00:15:55,320
authentication is happening here not

393
00:15:55,320 --> 00:15:57,480
here Authentication

394
00:15:57,480 --> 00:15:59,399
once authentication is complete

395
00:15:59,399 --> 00:16:00,839
authorization server is going to

396
00:16:00,839 --> 00:16:03,240
redirect you in exactly the same way

397
00:16:03,240 --> 00:16:06,720
back to the application right HTTP 302

398
00:16:06,720 --> 00:16:08,579
right you're going back to your

399
00:16:08,579 --> 00:16:10,860
application now

400
00:16:10,860 --> 00:16:14,579
at this point authorization server will

401
00:16:14,579 --> 00:16:16,260
supply What's called the Grand code and

402
00:16:16,260 --> 00:16:18,060
that's where the authorization code name

403
00:16:18,060 --> 00:16:20,779
is coming from it will supply a code

404
00:16:20,779 --> 00:16:24,540
that identifies that the user has

405
00:16:24,540 --> 00:16:27,120
successfully completed authentication it

406
00:16:27,120 --> 00:16:30,480
is not access token just yet why well

407
00:16:30,480 --> 00:16:32,519
because those redirects are not really

408
00:16:32,519 --> 00:16:36,060
safe right uh you know browsers I do not

409
00:16:36,060 --> 00:16:38,040
consider anything on client-side super

410
00:16:38,040 --> 00:16:40,440
safe right and passing that information

411
00:16:40,440 --> 00:16:43,440
in HTTP redirect especially considering

412
00:16:43,440 --> 00:16:45,360
those might be cached in browser history

413
00:16:45,360 --> 00:16:47,880
for example or whatever you might have

414
00:16:47,880 --> 00:16:50,279
some network uh logs along the way

415
00:16:50,279 --> 00:16:52,800
passing the access token here would not

416
00:16:52,800 --> 00:16:55,320
will still not be super secure so it's a

417
00:16:55,320 --> 00:16:57,360
grand code essentially authorization

418
00:16:57,360 --> 00:17:00,600
server is still in the application this

419
00:17:00,600 --> 00:17:03,480
user completed authorization right but

420
00:17:03,480 --> 00:17:04,859
you don't have that authorization

421
00:17:04,859 --> 00:17:06,419
information just yet

422
00:17:06,419 --> 00:17:09,480
what application server would do is it

423
00:17:09,480 --> 00:17:11,819
will go to the authorization server with

424
00:17:11,819 --> 00:17:14,040
this grant code right and it will

425
00:17:14,040 --> 00:17:16,559
receive back access token right the

426
00:17:16,559 --> 00:17:18,780
token that is required to represent that

427
00:17:18,780 --> 00:17:20,160
authorization

428
00:17:20,160 --> 00:17:23,339
any questions so far make sense so far

429
00:17:23,339 --> 00:17:26,099
how does authorization server knows how

430
00:17:26,099 --> 00:17:29,418
to trust application server

431
00:17:30,480 --> 00:17:32,340
well because this grant code is just

432
00:17:32,340 --> 00:17:34,620
flowing around through browser anyone

433
00:17:34,620 --> 00:17:36,840
can steal it here right why can't I have

434
00:17:36,840 --> 00:17:40,320
like an attacker here grabbing that uh

435
00:17:40,320 --> 00:17:42,480
Grant code and just you know stealing

436
00:17:42,480 --> 00:17:44,940
the token how how do we establish trust

437
00:17:44,940 --> 00:17:47,940
here on this segment well easy there is

438
00:17:47,940 --> 00:17:50,460
a pre-registration process where you

439
00:17:50,460 --> 00:17:52,140
register your application with

440
00:17:52,140 --> 00:17:54,059
authorization server and you're getting

441
00:17:54,059 --> 00:17:56,340
a secret credential this way only

442
00:17:56,340 --> 00:17:58,320
application server can make this request

443
00:17:58,320 --> 00:18:01,140
okay so there is a process before this

444
00:18:01,140 --> 00:18:03,840
whole workflow starts right that

445
00:18:03,840 --> 00:18:04,980
essentially

446
00:18:04,980 --> 00:18:07,980
gives your application a way to identify

447
00:18:07,980 --> 00:18:10,080
itself in this way this grant code

448
00:18:10,080 --> 00:18:13,020
cannot be stolen and used by anyone else

449
00:18:13,020 --> 00:18:15,960
now once your application got token yay

450
00:18:15,960 --> 00:18:17,940
now we can actually go to the research

451
00:18:17,940 --> 00:18:19,380
server and retrieve that Facebook

452
00:18:19,380 --> 00:18:21,960
picture you know or whatever else do you

453
00:18:21,960 --> 00:18:24,840
need right with that token you can go to

454
00:18:24,840 --> 00:18:26,400
the server get data you're gonna get

455
00:18:26,400 --> 00:18:28,500
data back now you can return the

456
00:18:28,500 --> 00:18:30,059
response

457
00:18:30,059 --> 00:18:31,860
uh and we'll be talking about this

458
00:18:31,860 --> 00:18:34,380
segment in more detail as well how does

459
00:18:34,380 --> 00:18:36,480
that validation happens so this is

460
00:18:36,480 --> 00:18:38,400
authorization code it has two major

461
00:18:38,400 --> 00:18:41,880
benefits user or in official terminology

462
00:18:41,880 --> 00:18:44,220
resource owner credentials are never

463
00:18:44,220 --> 00:18:46,200
shared with the application you don't

464
00:18:46,200 --> 00:18:48,840
care how application stores credentials

465
00:18:48,840 --> 00:18:50,160
or any other security information

466
00:18:50,160 --> 00:18:52,440
because you're never sharing your

467
00:18:52,440 --> 00:18:54,960
credential with that application and the

468
00:18:54,960 --> 00:18:57,539
second part are tokens are never exposed

469
00:18:57,539 --> 00:19:00,600
to browsers browsers are I don't I don't

470
00:19:00,600 --> 00:19:02,340
want to say not secure right because

471
00:19:02,340 --> 00:19:04,320
browser security is also a Hot Topic

472
00:19:04,320 --> 00:19:06,539
improving every single day but obviously

473
00:19:06,539 --> 00:19:09,480
browsers are less secure than servers

474
00:19:09,480 --> 00:19:11,760
right well when it comes to uh you know

475
00:19:11,760 --> 00:19:14,400
keeping data secret so tokens are never

476
00:19:14,400 --> 00:19:17,039
exposed to browsers they are kept on the

477
00:19:17,039 --> 00:19:20,520
server side in a safe storage

478
00:19:20,520 --> 00:19:22,740
let's talk about the other workflow

479
00:19:22,740 --> 00:19:24,720
called implicit

480
00:19:24,720 --> 00:19:27,240
now it starts exactly the same way you

481
00:19:27,240 --> 00:19:30,660
have a request redirect to authorization

482
00:19:30,660 --> 00:19:33,059
server authorization server gives your

483
00:19:33,059 --> 00:19:35,640
login or consent form and you supply

484
00:19:35,640 --> 00:19:37,980
your credentials username and password

485
00:19:37,980 --> 00:19:40,620
the difference with this workflow and

486
00:19:40,620 --> 00:19:42,780
credentials are validated obviously the

487
00:19:42,780 --> 00:19:44,400
difference with this workflow is the

488
00:19:44,400 --> 00:19:46,740
fact that after authorization server

489
00:19:46,740 --> 00:19:49,919
validates your credentials it redirects

490
00:19:49,919 --> 00:19:52,200
you back to the application but instead

491
00:19:52,200 --> 00:19:54,419
of supplying the grand code like in

492
00:19:54,419 --> 00:19:56,880
previous workflow it will immediately

493
00:19:56,880 --> 00:19:59,340
Supply you the access token right to the

494
00:19:59,340 --> 00:20:01,799
browser okay write in the URL of that

495
00:20:01,799 --> 00:20:04,200
redirect you will get the access token

496
00:20:04,200 --> 00:20:07,320
this allows you to get the token in the

497
00:20:07,320 --> 00:20:09,660
browser and make requests to protected

498
00:20:09,660 --> 00:20:12,240
resources straight from the browser okay

499
00:20:12,240 --> 00:20:14,700
now you can still send those tokens to

500
00:20:14,700 --> 00:20:17,460
server as well but the token will be

501
00:20:17,460 --> 00:20:19,080
exposed all the way to the browser

502
00:20:19,080 --> 00:20:22,760
anyone sees any issues with that

503
00:20:24,840 --> 00:20:29,280
any problems with yeah okay good so the

504
00:20:29,280 --> 00:20:31,440
problem here is while user that resource

505
00:20:31,440 --> 00:20:33,600
owner credentials are still never shared

506
00:20:33,600 --> 00:20:36,059
with the application tokens are exposed

507
00:20:36,059 --> 00:20:37,740
to the browsers this is less secure

508
00:20:37,740 --> 00:20:39,720
right uh

509
00:20:39,720 --> 00:20:43,380
I did not plan on this but while waiting

510
00:20:43,380 --> 00:20:45,240
here for about an hour and a half for my

511
00:20:45,240 --> 00:20:48,600
session I've seen three open laptops

512
00:20:48,600 --> 00:20:51,780
right on desks around this venue right

513
00:20:51,780 --> 00:20:54,960
with uh I think one hit outlook on it

514
00:20:54,960 --> 00:20:56,520
other still I don't remember so three

515
00:20:56,520 --> 00:20:59,580
three left laptops right no one was near

516
00:20:59,580 --> 00:21:01,200
them right essentially someone left

517
00:21:01,200 --> 00:21:03,240
their laptop and went to get a drink

518
00:21:03,240 --> 00:21:05,460
right if you're in a browser you know if

519
00:21:05,460 --> 00:21:07,559
you know developer tools it will not

520
00:21:07,559 --> 00:21:09,240
take a lot of time to steal something

521
00:21:09,240 --> 00:21:11,940
like that right and also you know this

522
00:21:11,940 --> 00:21:13,620
can be stored in history in browser

523
00:21:13,620 --> 00:21:16,020
history and I don't think any one of us

524
00:21:16,020 --> 00:21:18,240
wants to have other people looking in

525
00:21:18,240 --> 00:21:19,620
their browser history

526
00:21:19,620 --> 00:21:22,679
so if you look at auth to workflows if

527
00:21:22,679 --> 00:21:24,500
there are docs they're actually

528
00:21:24,500 --> 00:21:27,179
explicitly saying it's not recommended

529
00:21:27,179 --> 00:21:30,059
to use the simplicit workflow okay there

530
00:21:30,059 --> 00:21:31,620
is a better approach of doing that today

531
00:21:31,620 --> 00:21:33,539
I got two links here so you'll be able

532
00:21:33,539 --> 00:21:36,360
to read about that uh it's a workflow

533
00:21:36,360 --> 00:21:38,580
that is based on the first kind of Grant

534
00:21:38,580 --> 00:21:40,860
the authorization code but that can

535
00:21:40,860 --> 00:21:42,780
still be used with browsers and Native

536
00:21:42,780 --> 00:21:44,820
applications but

537
00:21:44,820 --> 00:21:46,860
I cannot tell you that this workflow

538
00:21:46,860 --> 00:21:48,780
implicit flow is not used by anyone it's

539
00:21:48,780 --> 00:21:51,000
still widely popular right but if you

540
00:21:51,000 --> 00:21:52,740
look at the recommendation coming from

541
00:21:52,740 --> 00:21:53,880
oauth 2

542
00:21:53,880 --> 00:21:56,280
you can see this section right it was a

543
00:21:56,280 --> 00:21:58,440
simplified flow previously recommended

544
00:21:58,440 --> 00:22:00,659
it's not recommended to use anymore

545
00:22:00,659 --> 00:22:02,340
right

546
00:22:02,340 --> 00:22:04,380
let's talk about the third one resource

547
00:22:04,380 --> 00:22:06,539
owner password we're doing great on time

548
00:22:06,539 --> 00:22:09,360
okay resource owner password credentials

549
00:22:09,360 --> 00:22:12,900
now as the name suggests it has

550
00:22:12,900 --> 00:22:14,640
something to do with the password right

551
00:22:14,640 --> 00:22:18,059
the workflow here starts similarly but

552
00:22:18,059 --> 00:22:19,380
it quickly becomes a little bit

553
00:22:19,380 --> 00:22:21,960
different so you're still gonna get uh

554
00:22:21,960 --> 00:22:23,820
you know not authorized for your index

555
00:22:23,820 --> 00:22:26,280
but instead of redirect

556
00:22:26,280 --> 00:22:28,080
it's going to be the application that's

557
00:22:28,080 --> 00:22:30,720
going to send login form and user uh to

558
00:22:30,720 --> 00:22:33,120
your browser and uh you know you submit

559
00:22:33,120 --> 00:22:35,039
your credentials all the way back to the

560
00:22:35,039 --> 00:22:36,900
application server this is the problem

561
00:22:36,900 --> 00:22:38,520
that I've been talking about for the

562
00:22:38,520 --> 00:22:40,320
last like 10 minutes right I'm saying

563
00:22:40,320 --> 00:22:42,120
you know all of two is great because the

564
00:22:42,120 --> 00:22:44,039
application that you know unknown local

565
00:22:44,039 --> 00:22:46,799
Falafel shop will never get access to

566
00:22:46,799 --> 00:22:48,659
your credentials right and this is great

567
00:22:48,659 --> 00:22:51,720
so yeah the third Grant type in oauth to

568
00:22:51,720 --> 00:22:54,659
workflows actually goes against that and

569
00:22:54,659 --> 00:22:59,159
it says that in some cases right you do

570
00:22:59,159 --> 00:23:01,919
want to have credentials going through

571
00:23:01,919 --> 00:23:04,620
the application server right from that

572
00:23:04,620 --> 00:23:06,780
point on application server can get

573
00:23:06,780 --> 00:23:09,120
tokens with your user credentials

574
00:23:09,120 --> 00:23:10,980
essentially it will send your user

575
00:23:10,980 --> 00:23:12,600
credentials to the authorization server

576
00:23:12,600 --> 00:23:15,600
or identity provider it will get token

577
00:23:15,600 --> 00:23:17,820
back and then you know it's exactly the

578
00:23:17,820 --> 00:23:21,059
same as previously so the benefit of

579
00:23:21,059 --> 00:23:22,320
this approach approach is tokens are

580
00:23:22,320 --> 00:23:24,780
never exposed to browsers right tokens

581
00:23:24,780 --> 00:23:28,020
but user credentials are exposed to the

582
00:23:28,020 --> 00:23:31,020
application okay this grant this

583
00:23:31,020 --> 00:23:34,679
workflow is great for highly trusted

584
00:23:34,679 --> 00:23:37,440
applications this is great where your

585
00:23:37,440 --> 00:23:39,720
application and your uh you know

586
00:23:39,720 --> 00:23:42,240
identity repo authorization server are

587
00:23:42,240 --> 00:23:43,919
actually what's called first party right

588
00:23:43,919 --> 00:23:45,900
they are part of the same organization

589
00:23:45,900 --> 00:23:48,720
so your application does trust that

590
00:23:48,720 --> 00:23:50,940
identity server and vice versa okay

591
00:23:50,940 --> 00:23:53,760
basically you're okay with Staffing

592
00:23:53,760 --> 00:23:56,340
credentials through the application this

593
00:23:56,340 --> 00:23:58,799
workflow is also well defined in auth2

594
00:23:58,799 --> 00:24:02,340
but again use it only with highly

595
00:24:02,340 --> 00:24:05,460
trusted applications so sometimes this

596
00:24:05,460 --> 00:24:07,159
workflow is used

597
00:24:07,159 --> 00:24:09,419
when you require when your business

598
00:24:09,419 --> 00:24:12,539
right product or business they require a

599
00:24:12,539 --> 00:24:13,860
very high level of customization

600
00:24:13,860 --> 00:24:15,840
essentially when they're looking at this

601
00:24:15,840 --> 00:24:18,419
redirect round trip and saying Ah that's

602
00:24:18,419 --> 00:24:20,700
ugly I want something super fancy you

603
00:24:20,700 --> 00:24:23,100
know with the bells and whistles I want

604
00:24:23,100 --> 00:24:25,620
super custom UI right which will not be

605
00:24:25,620 --> 00:24:27,840
supported with standard oauth 2.

606
00:24:27,840 --> 00:24:29,640
sometimes this is when that workflow can

607
00:24:29,640 --> 00:24:31,140
be used but again

608
00:24:31,140 --> 00:24:33,600
don't make security decision based on

609
00:24:33,600 --> 00:24:36,780
desired ux obviously important right if

610
00:24:36,780 --> 00:24:38,580
you want to use this workflow make sure

611
00:24:38,580 --> 00:24:40,620
it's a highly trusted application

612
00:24:40,620 --> 00:24:42,780
Quantum credential is the last one it's

613
00:24:42,780 --> 00:24:45,120
probably the simplest what's important

614
00:24:45,120 --> 00:24:46,740
about client credentials is you don't

615
00:24:46,740 --> 00:24:49,380
have users right it's client credentials

616
00:24:49,380 --> 00:24:52,020
it's not user credentials sometimes you

617
00:24:52,020 --> 00:24:54,360
have application a communicating to

618
00:24:54,360 --> 00:24:56,580
application B there are no users

619
00:24:56,580 --> 00:24:58,320
involved there are no usernames

620
00:24:58,320 --> 00:25:00,480
passwords right but you still want to be

621
00:25:00,480 --> 00:25:02,760
able to properly authenticate and use

622
00:25:02,760 --> 00:25:05,220
the same auth to technology so client

623
00:25:05,220 --> 00:25:06,900
credentials is the workflow that is used

624
00:25:06,900 --> 00:25:08,820
in this case and it's probably the

625
00:25:08,820 --> 00:25:10,860
simplest this is where application

626
00:25:10,860 --> 00:25:13,380
server remember that initial step that

627
00:25:13,380 --> 00:25:15,059
I've mentioned pre-registration

628
00:25:15,059 --> 00:25:17,820
application service pre-registering with

629
00:25:17,820 --> 00:25:19,020
authorization

630
00:25:19,020 --> 00:25:21,059
so this is where your application server

631
00:25:21,059 --> 00:25:22,919
basically goes to authorization server

632
00:25:22,919 --> 00:25:26,299
is saying hey though

633
00:25:26,760 --> 00:25:28,919
those are my credentials those

634
00:25:28,919 --> 00:25:31,080
credentials do not represent the user

635
00:25:31,080 --> 00:25:33,960
those credentials represent server right

636
00:25:33,960 --> 00:25:37,320
application non-human component right

637
00:25:37,320 --> 00:25:39,059
and you're gonna get tokens back

638
00:25:39,059 --> 00:25:40,980
immediately you know and then you can

639
00:25:40,980 --> 00:25:42,960
retrieve the data with the token that

640
00:25:42,960 --> 00:25:44,340
you want

641
00:25:44,340 --> 00:25:46,799
tokens tokens are not exposed to

642
00:25:46,799 --> 00:25:48,840
browsers because there are no browsers

643
00:25:48,840 --> 00:25:51,000
right it's a purely application to

644
00:25:51,000 --> 00:25:53,400
application scenarios there is also a

645
00:25:53,400 --> 00:25:55,559
notion of refresh token the idea of

646
00:25:55,559 --> 00:25:59,400
refresh token is uh how many times do

647
00:25:59,400 --> 00:26:02,159
you need to log in into Gmail let's say

648
00:26:02,159 --> 00:26:03,600
what was the last time you actually

649
00:26:03,600 --> 00:26:05,760
logged in into Gmail for me probably

650
00:26:05,760 --> 00:26:08,279
like five years ago right same for

651
00:26:08,279 --> 00:26:09,779
Facebook same for many other

652
00:26:09,779 --> 00:26:13,080
applications that I use right so tokens

653
00:26:13,080 --> 00:26:16,620
are by Design short-lived right you want

654
00:26:16,620 --> 00:26:19,559
them to be short-lived right because you

655
00:26:19,559 --> 00:26:21,360
know long lived credential that's your

656
00:26:21,360 --> 00:26:23,159
username and password right but tokens

657
00:26:23,159 --> 00:26:24,480
are short-lived

658
00:26:24,480 --> 00:26:27,539
but you know if those tokens expire I'm

659
00:26:27,539 --> 00:26:28,860
going to be talking about that as well

660
00:26:28,860 --> 00:26:31,140
how do you actually get a new token

661
00:26:31,140 --> 00:26:32,880
without asking your users to

662
00:26:32,880 --> 00:26:34,500
authenticate uh from scratch every

663
00:26:34,500 --> 00:26:36,240
single time that would be a pretty awful

664
00:26:36,240 --> 00:26:38,820
experience right if you go to Gmail or

665
00:26:38,820 --> 00:26:40,860
you know your banking application and

666
00:26:40,860 --> 00:26:42,600
every 30 minutes it will ask you to

667
00:26:42,600 --> 00:26:44,340
re-authenticate right and sometimes

668
00:26:44,340 --> 00:26:45,900
those tokens Can Be scoped to five

669
00:26:45,900 --> 00:26:47,880
minutes that would be pretty awful user

670
00:26:47,880 --> 00:26:49,919
experience so in order to address that

671
00:26:49,919 --> 00:26:52,559
oauth 2 spec also defines a notion of

672
00:26:52,559 --> 00:26:55,559
refresh token refresh token can be used

673
00:26:55,559 --> 00:26:58,200
to renew the access token without

674
00:26:58,200 --> 00:27:00,419
actually re-authenticating the user it's

675
00:27:00,419 --> 00:27:02,820
a pretty awesome capability you can on

676
00:27:02,820 --> 00:27:04,919
most authorization servers it's enabled

677
00:27:04,919 --> 00:27:07,020
as a feature it's a very common feature

678
00:27:07,020 --> 00:27:09,720
so when user authenticates they're

679
00:27:09,720 --> 00:27:12,240
getting access token that is valid for

680
00:27:12,240 --> 00:27:15,000
let's say uh 10 minutes or 30 minutes or

681
00:27:15,000 --> 00:27:17,640
whatever and refresh token that can be

682
00:27:17,640 --> 00:27:21,120
valid for 6 months 12 months 10 years

683
00:27:21,120 --> 00:27:22,980
right depends on the security settings

684
00:27:22,980 --> 00:27:25,140
of your application

685
00:27:25,140 --> 00:27:28,440
these are the five common grants common

686
00:27:28,440 --> 00:27:31,980
workflows defined by oauth 2 there are

687
00:27:31,980 --> 00:27:35,100
others more advanced more fancy right

688
00:27:35,100 --> 00:27:37,500
the new ones are being added oauth 2

689
00:27:37,500 --> 00:27:39,600
also allows you to Define your own

690
00:27:39,600 --> 00:27:42,000
grants so you can extend that uh spec

691
00:27:42,000 --> 00:27:45,240
but these five are probably most common

692
00:27:45,240 --> 00:27:46,500
that you're going to meet in the

693
00:27:46,500 --> 00:27:47,700
industry

694
00:27:47,700 --> 00:27:49,740
I got a quick slide here I'm not gonna

695
00:27:49,740 --> 00:27:50,940
go through all the details but

696
00:27:50,940 --> 00:27:52,919
essentially I've summarized all of those

697
00:27:52,919 --> 00:27:55,200
grants right and when each one of them

698
00:27:55,200 --> 00:27:57,659
should be used ideally when one and also

699
00:27:57,659 --> 00:27:59,760
when some of them should not be used

700
00:27:59,760 --> 00:28:01,500
right you'll get those slides I'll share

701
00:28:01,500 --> 00:28:02,820
them with the conference organizers

702
00:28:02,820 --> 00:28:04,679
right where you can take a you know take

703
00:28:04,679 --> 00:28:06,240
a photo if you want

704
00:28:06,240 --> 00:28:08,880
now so far we've been talking about

705
00:28:08,880 --> 00:28:12,059
authorization right but you know it's

706
00:28:12,059 --> 00:28:13,740
hard to authorize someone without

707
00:28:13,740 --> 00:28:15,960
authenticating them first right and if

708
00:28:15,960 --> 00:28:17,820
you look at what to spec it very

709
00:28:17,820 --> 00:28:21,120
explicitly says authentication is out of

710
00:28:21,120 --> 00:28:23,880
scope of this RFC right it's very

711
00:28:23,880 --> 00:28:25,620
explicitly mentions that we're not going

712
00:28:25,620 --> 00:28:27,480
to be talking about authentication at

713
00:28:27,480 --> 00:28:30,000
all so that's the reason openid connect

714
00:28:30,000 --> 00:28:34,200
was created several years after oidc the

715
00:28:34,200 --> 00:28:36,360
idea of open ID connect you can go to

716
00:28:36,360 --> 00:28:38,220
the website and read everything about it

717
00:28:38,220 --> 00:28:41,039
uh but you know to make it short it's an

718
00:28:41,039 --> 00:28:42,480
identity layer

719
00:28:42,480 --> 00:28:45,779
that is used to verify the identity it's

720
00:28:45,779 --> 00:28:48,720
built on top of auth2 so think of it as

721
00:28:48,720 --> 00:28:52,260
an extension of oauth 2. it I would say

722
00:28:52,260 --> 00:28:54,779
in the industry it's very common to use

723
00:28:54,779 --> 00:28:57,000
oath to an oidc open ID connect

724
00:28:57,000 --> 00:28:59,039
interchangeably today right sometimes

725
00:28:59,039 --> 00:29:00,779
when you talk about one you mean the

726
00:29:00,779 --> 00:29:03,059
other and other way around guilty as

727
00:29:03,059 --> 00:29:05,820
charge I do it all the time right but

728
00:29:05,820 --> 00:29:08,820
officially it's identity layer that is

729
00:29:08,820 --> 00:29:12,240
built on top of auth2 and it gives you a

730
00:29:12,240 --> 00:29:14,580
new kind of thing profile information so

731
00:29:14,580 --> 00:29:17,220
previously we talked about access tokens

732
00:29:17,220 --> 00:29:19,260
you don't need to know my first name and

733
00:29:19,260 --> 00:29:21,240
last name in order to grant me

734
00:29:21,240 --> 00:29:23,460
authorization or not you just need to

735
00:29:23,460 --> 00:29:25,919
know that someone else authorized them

736
00:29:25,919 --> 00:29:29,100
right but your application experience

737
00:29:29,100 --> 00:29:31,679
can be made much better if you do have

738
00:29:31,679 --> 00:29:33,419
that personal information right if you

739
00:29:33,419 --> 00:29:36,059
do know my first name last name my

740
00:29:36,059 --> 00:29:38,820
profile picture my I don't know list of

741
00:29:38,820 --> 00:29:40,799
friends right except basically my

742
00:29:40,799 --> 00:29:42,539
identity information

743
00:29:42,539 --> 00:29:45,960
now yeah a layer on top of fourth two to

744
00:29:45,960 --> 00:29:47,820
verify user identity and obtain profile

745
00:29:47,820 --> 00:29:48,960
information

746
00:29:48,960 --> 00:29:51,299
uh open ID connect introduces A New

747
00:29:51,299 --> 00:29:53,340
Concept called ID token and again we're

748
00:29:53,340 --> 00:29:54,840
going to be talking about our tokens

749
00:29:54,840 --> 00:29:57,720
pretty soon ID token unlike access token

750
00:29:57,720 --> 00:30:00,899
is all about identity right and the fact

751
00:30:00,899 --> 00:30:03,299
that those two tokens are separate is

752
00:30:03,299 --> 00:30:05,820
incredibly powerful now officially

753
00:30:05,820 --> 00:30:07,620
different uh

754
00:30:07,620 --> 00:30:09,960
uh officially different security

755
00:30:09,960 --> 00:30:11,880
products different authorization servers

756
00:30:11,880 --> 00:30:13,620
sometimes they do allow you to inject

757
00:30:13,620 --> 00:30:16,260
identity information into access token

758
00:30:16,260 --> 00:30:18,480
because for some scenarios some you know

759
00:30:18,480 --> 00:30:20,820
customers it's easier for them to manage

760
00:30:20,820 --> 00:30:22,980
a single token so I wouldn't say that

761
00:30:22,980 --> 00:30:25,559
it's always strictly decoupled no it's

762
00:30:25,559 --> 00:30:28,260
not okay as a security guy unfortunately

763
00:30:28,260 --> 00:30:31,620
no it's not but the default is you have

764
00:30:31,620 --> 00:30:33,360
two different tokens and they serve two

765
00:30:33,360 --> 00:30:35,399
different purposes access token is

766
00:30:35,399 --> 00:30:38,100
therefore authorization right X the idea

767
00:30:38,100 --> 00:30:39,779
of access token is you can make

768
00:30:39,779 --> 00:30:42,600
authorization decision without knowing

769
00:30:42,600 --> 00:30:45,240
anything about the entity besides the

770
00:30:45,240 --> 00:30:46,980
fact that it has access token this is

771
00:30:46,980 --> 00:30:50,039
super powerful identity token it's an

772
00:30:50,039 --> 00:30:52,140
additional thing right that essential

773
00:30:52,140 --> 00:30:54,419
will give you information about that

774
00:30:54,419 --> 00:30:56,760
entity the identity information about

775
00:30:56,760 --> 00:30:59,880
that entity so imagine you're getting

776
00:30:59,880 --> 00:31:02,340
access token and identity token in your

777
00:31:02,340 --> 00:31:04,500
application and now you need to submit

778
00:31:04,500 --> 00:31:07,500
those to third party right but as they

779
00:31:07,500 --> 00:31:10,200
user I'm not a huge fan of the idea that

780
00:31:10,200 --> 00:31:12,240
you're submitting my identity

781
00:31:12,240 --> 00:31:14,520
information to the third party well you

782
00:31:14,520 --> 00:31:16,020
don't have to you can just submit the

783
00:31:16,020 --> 00:31:17,640
access token and that should be enough

784
00:31:17,640 --> 00:31:20,279
that's the idea of having two tokens so

785
00:31:20,279 --> 00:31:22,380
to summarize author is an authorization

786
00:31:22,380 --> 00:31:24,600
framework and access token represents

787
00:31:24,600 --> 00:31:27,840
authorization optionally as JWT which

788
00:31:27,840 --> 00:31:29,159
we're going to be talking about in a

789
00:31:29,159 --> 00:31:30,120
second

790
00:31:30,120 --> 00:31:33,120
openid connect is authentication layer

791
00:31:33,120 --> 00:31:37,380
on top of auth2 and ID token represents

792
00:31:37,380 --> 00:31:41,100
authentication always sjw optionally

793
00:31:41,100 --> 00:31:43,020
always

794
00:31:43,020 --> 00:31:44,820
I think I've mentioned those tokens in

795
00:31:44,820 --> 00:31:49,740
jwts for about 5 million times now so

796
00:31:49,740 --> 00:31:51,840
let's actually talk about what jot or

797
00:31:51,840 --> 00:31:55,380
JWT is anyone here already using jots

798
00:31:55,380 --> 00:31:58,740
jwts in any possible way

799
00:31:58,740 --> 00:32:01,620
okay cool okay more hands this is good

800
00:32:01,620 --> 00:32:04,679
uh there is no official logo for JWT

801
00:32:04,679 --> 00:32:07,020
unfortunately so you know this is what I

802
00:32:07,020 --> 00:32:09,899
got okay it's a spec there are no logos

803
00:32:09,899 --> 00:32:12,240
for rfcs so you know that's the best I

804
00:32:12,240 --> 00:32:13,200
can do

805
00:32:13,200 --> 00:32:15,659
uh let's go through the same exercise

806
00:32:15,659 --> 00:32:17,640
compact

807
00:32:17,640 --> 00:32:20,460
securely transmitting information

808
00:32:20,460 --> 00:32:24,299
Json object verified and trusted and

809
00:32:24,299 --> 00:32:26,340
digitally signed right you can read the

810
00:32:26,340 --> 00:32:28,260
whole thing there at the Top This is a

811
00:32:28,260 --> 00:32:30,299
snippet from the RFC

812
00:32:30,299 --> 00:32:32,100
but the idea is

813
00:32:32,100 --> 00:32:35,399
it's a compact secure and digitally

814
00:32:35,399 --> 00:32:37,440
signed Json object

815
00:32:37,440 --> 00:32:39,360
much more than just the Json object

816
00:32:39,360 --> 00:32:41,460
right it's much more than that but to

817
00:32:41,460 --> 00:32:44,520
keep it simple for now Json object that

818
00:32:44,520 --> 00:32:48,659
can be trusted now why it can be trusted

819
00:32:48,659 --> 00:32:50,360
any guesses

820
00:32:50,360 --> 00:32:53,480
why I'm declaring that I can trust those

821
00:32:53,480 --> 00:32:55,740
jwts jots

822
00:32:55,740 --> 00:32:57,539
well because they're cryptographically

823
00:32:57,539 --> 00:32:59,399
digitally signed by the authorization

824
00:32:59,399 --> 00:33:01,320
server right if you're familiar with

825
00:33:01,320 --> 00:33:03,539
public key uh infrastructure the

826
00:33:03,539 --> 00:33:05,760
authorization server is the only entity

827
00:33:05,760 --> 00:33:07,679
in the world that holds the private key

828
00:33:07,679 --> 00:33:10,380
and they can sign that token tokens are

829
00:33:10,380 --> 00:33:13,860
immutable there is no way to modify

830
00:33:13,860 --> 00:33:15,899
right to change information within that

831
00:33:15,899 --> 00:33:17,820
token the only thing you can do is to

832
00:33:17,820 --> 00:33:20,399
generate a new token okay tokens are

833
00:33:20,399 --> 00:33:23,460
completely immutable anyone can validate

834
00:33:23,460 --> 00:33:25,500
those tokens because validation is

835
00:33:25,500 --> 00:33:27,419
performed for using public keys but only

836
00:33:27,419 --> 00:33:29,640
authorization server that trusted entity

837
00:33:29,640 --> 00:33:32,399
can actually find those tokens thus

838
00:33:32,399 --> 00:33:33,899
confirming that they're coming from a

839
00:33:33,899 --> 00:33:35,220
trusted source

840
00:33:35,220 --> 00:33:37,320
so uh

841
00:33:37,320 --> 00:33:40,140
jots are so

842
00:33:40,140 --> 00:33:42,240
their content is three elements right

843
00:33:42,240 --> 00:33:44,820
three uh segments header token header

844
00:33:44,820 --> 00:33:48,179
token payload and token signature they

845
00:33:48,179 --> 00:33:50,100
are separated by dots keep that in mind

846
00:33:50,100 --> 00:33:51,659
I'm gonna show you a real jot in a

847
00:33:51,659 --> 00:33:53,159
moment you'll you'll see those dots

848
00:33:53,159 --> 00:33:54,779
right

849
00:33:54,779 --> 00:33:58,200
header and payload they are base64 URL

850
00:33:58,200 --> 00:34:01,200
encoded Json objects so essentially any

851
00:34:01,200 --> 00:34:03,120
information you want there is a spec

852
00:34:03,120 --> 00:34:04,860
describing what information needs to be

853
00:34:04,860 --> 00:34:06,120
there but you can add additional

854
00:34:06,120 --> 00:34:08,599
information but they are Json object

855
00:34:08,599 --> 00:34:12,000
base64 URL encoded signature is a

856
00:34:12,000 --> 00:34:14,339
digital signature there are different

857
00:34:14,339 --> 00:34:18,480
algorithms for that right uh you know

858
00:34:18,480 --> 00:34:21,719
within a seat uh a good example of that

859
00:34:21,719 --> 00:34:26,159
would be header algorithm RS 256 right a

860
00:34:26,159 --> 00:34:28,980
type of the token is jot because you

861
00:34:28,980 --> 00:34:31,020
know spec uh talks about jobs but you

862
00:34:31,020 --> 00:34:32,940
might have any other type sometime in

863
00:34:32,940 --> 00:34:36,899
future and kid key ID that's ABCDE

864
00:34:36,899 --> 00:34:39,659
that's the identifier of the key that

865
00:34:39,659 --> 00:34:42,599
was used to sign that token because one

866
00:34:42,599 --> 00:34:44,639
authorization server might actually have

867
00:34:44,639 --> 00:34:47,399
multiple keys right and they're used for

868
00:34:47,399 --> 00:34:48,960
different purposes but essentially

869
00:34:48,960 --> 00:34:50,760
header think of this as a GDP request

870
00:34:50,760 --> 00:34:52,918
header it's a metadata right it's a

871
00:34:52,918 --> 00:34:55,440
collection of metadata about that token

872
00:34:55,440 --> 00:34:58,260
payload is a little bit more interesting

873
00:34:58,260 --> 00:35:01,140
subject right that's your user

874
00:35:01,140 --> 00:35:03,900
identifier can be username it can be

875
00:35:03,900 --> 00:35:05,820
email it can be good it can be whatever

876
00:35:05,820 --> 00:35:09,720
you want in your environment name scope

877
00:35:09,720 --> 00:35:12,660
company and many other claims I'm going

878
00:35:12,660 --> 00:35:13,859
to show you an example in a couple of

879
00:35:13,859 --> 00:35:16,500
slides so essentially payload contains

880
00:35:16,500 --> 00:35:19,020
identity information information that

881
00:35:19,020 --> 00:35:21,260
you want that token to hold

882
00:35:21,260 --> 00:35:24,060
base64 URL encoded essentially means

883
00:35:24,060 --> 00:35:26,520
this is What's it gonna look like over

884
00:35:26,520 --> 00:35:28,740
the wire when you send those tokens Over

885
00:35:28,740 --> 00:35:30,180
The Wire

886
00:35:30,180 --> 00:35:32,520
making it a little bit more interesting

887
00:35:32,520 --> 00:35:36,119
and line breaks here shown only to

888
00:35:36,119 --> 00:35:37,920
simplify the reading this is what this

889
00:35:37,920 --> 00:35:39,839
token is going to look like base64

890
00:35:39,839 --> 00:35:42,900
encoded header dot base64 encoded

891
00:35:42,900 --> 00:35:46,980
payload dot digital signature okay and

892
00:35:46,980 --> 00:35:50,339
this is what a real jot looks like okay

893
00:35:50,339 --> 00:35:53,579
it's a long string right that you can

894
00:35:53,579 --> 00:35:56,880
first split by dots note the Dots here

895
00:35:56,880 --> 00:35:59,220
split by dots and then you know what

896
00:35:59,220 --> 00:36:01,920
exactly to do which each segment of jot

897
00:36:01,920 --> 00:36:03,540
in order to retrieve the information

898
00:36:03,540 --> 00:36:06,300
first you validate the signature right

899
00:36:06,300 --> 00:36:07,800
obviously you want to make sure that

900
00:36:07,800 --> 00:36:09,780
this jot is coming from a trusted Source

901
00:36:09,780 --> 00:36:12,900
then you base64 decode the information

902
00:36:12,900 --> 00:36:15,900
and you use that information

903
00:36:15,900 --> 00:36:18,240
uh if you're not familiar with jot dot

904
00:36:18,240 --> 00:36:20,460
IO anyone using the site I mean I

905
00:36:20,460 --> 00:36:22,859
probably go there daily uh this is

906
00:36:22,859 --> 00:36:24,900
awesome webtool for debugging jots

907
00:36:24,900 --> 00:36:27,240
everything happens on the client side as

908
00:36:27,240 --> 00:36:29,400
far as I know they never send anything

909
00:36:29,400 --> 00:36:31,440
to the server side so the stuff you put

910
00:36:31,440 --> 00:36:33,599
in the browser stays in the browser as

911
00:36:33,599 --> 00:36:36,119
far as I know right it's a great tool to

912
00:36:36,119 --> 00:36:38,339
debug your jots essentially you paste

913
00:36:38,339 --> 00:36:40,020
either a jot and they immediately

914
00:36:40,020 --> 00:36:42,660
decoded or you can change the this part

915
00:36:42,660 --> 00:36:44,460
the text part and they will immediately

916
00:36:44,460 --> 00:36:46,560
encode it amazing tool I highly

917
00:36:46,560 --> 00:36:48,420
recommend it probably one of my to go

918
00:36:48,420 --> 00:36:51,000
tools when dealing with uh jots and you

919
00:36:51,000 --> 00:36:52,200
know debugging authentication or

920
00:36:52,200 --> 00:36:53,520
authorization

921
00:36:53,520 --> 00:36:56,579
uh I'm not going to be talking about AWS

922
00:36:56,579 --> 00:36:58,500
a lot today but essentially if you're

923
00:36:58,500 --> 00:37:00,420
familiar with Cognito that's uh Amazon

924
00:37:00,420 --> 00:37:03,119
aws's authorization server

925
00:37:03,119 --> 00:37:04,619
authentication and authorization service

926
00:37:04,619 --> 00:37:06,960
so what was easiest for me to pull

927
00:37:06,960 --> 00:37:08,880
screenshots from tokens coming from

928
00:37:08,880 --> 00:37:10,079
cognito

929
00:37:10,079 --> 00:37:12,839
right this is what real Cognito access

930
00:37:12,839 --> 00:37:14,339
token looks like

931
00:37:14,339 --> 00:37:16,260
you can see subject and that's

932
00:37:16,260 --> 00:37:19,320
identifier the user you can see token

933
00:37:19,320 --> 00:37:22,200
use claim this token should be used for

934
00:37:22,200 --> 00:37:24,240
Access validation you can see the scope

935
00:37:24,240 --> 00:37:26,880
here scope denotes what's the

936
00:37:26,880 --> 00:37:29,460
authorization scope for example whoever

937
00:37:29,460 --> 00:37:32,460
holds this token is authorized to read

938
00:37:32,460 --> 00:37:35,040
files and write files right but not to

939
00:37:35,040 --> 00:37:37,380
delete files right and there's a lot of

940
00:37:37,380 --> 00:37:39,540
additional information setting for ID

941
00:37:39,540 --> 00:37:42,720
token right you have uh claims like X

942
00:37:42,720 --> 00:37:45,000
that's expiration of the token you have

943
00:37:45,000 --> 00:37:46,980
off time that's the authentication time

944
00:37:46,980 --> 00:37:49,260
you can see here at the bottom that some

945
00:37:49,260 --> 00:37:51,599
claims are common right you do have a

946
00:37:51,599 --> 00:37:53,280
collection you know subset of claims

947
00:37:53,280 --> 00:37:56,520
which are common in identity token and

948
00:37:56,520 --> 00:37:58,320
access token both of them

949
00:37:58,320 --> 00:38:00,180
and that makes sense because first of

950
00:38:00,180 --> 00:38:01,920
all well you do need to know who's the

951
00:38:01,920 --> 00:38:04,020
issue of both of these tokens right

952
00:38:04,020 --> 00:38:06,660
what's the authentication subject what's

953
00:38:06,660 --> 00:38:09,240
the identifier of that user right of

954
00:38:09,240 --> 00:38:11,280
that subject that this token belongs to

955
00:38:11,280 --> 00:38:14,880
who's the audience you don't only know

956
00:38:14,880 --> 00:38:17,280
who the user is who's authorized who

957
00:38:17,280 --> 00:38:19,619
these tokens represent but you can also

958
00:38:19,619 --> 00:38:22,380
Define what's the audience for these

959
00:38:22,380 --> 00:38:24,839
tokens essentially which resource

960
00:38:24,839 --> 00:38:27,300
servers are allowed to use that token

961
00:38:27,300 --> 00:38:29,400
and other resource servers according to

962
00:38:29,400 --> 00:38:31,560
the spec might they would need to reject

963
00:38:31,560 --> 00:38:33,540
that token right

964
00:38:33,540 --> 00:38:36,300
uh he should add a unique identifier

965
00:38:36,300 --> 00:38:39,599
specific token Etc other claims are

966
00:38:39,599 --> 00:38:42,060
token specific so for example scope is

967
00:38:42,060 --> 00:38:44,640
unique to access token because scope

968
00:38:44,640 --> 00:38:47,400
represents authorization scope in the

969
00:38:47,400 --> 00:38:50,040
scope claim you put the information that

970
00:38:50,040 --> 00:38:52,740
talks about what this token what this

971
00:38:52,740 --> 00:38:56,339
token Bearer is authorized to do right

972
00:38:56,339 --> 00:38:59,040
email is unique to ID token since it

973
00:38:59,040 --> 00:39:01,140
represents authentication I have email

974
00:39:01,140 --> 00:39:04,200
here interesting yeah that's my work

975
00:39:04,200 --> 00:39:06,060
email now you know my work email awesome

976
00:39:06,060 --> 00:39:10,800
okay so but uh you know there is no

977
00:39:10,800 --> 00:39:13,200
reason to put email into the access

978
00:39:13,200 --> 00:39:15,720
token right because you don't need to

979
00:39:15,720 --> 00:39:17,780
know someone's email you don't need to

980
00:39:17,780 --> 00:39:20,280
authenticate everyone you don't need to

981
00:39:20,280 --> 00:39:22,380
authenticate someone in order to

982
00:39:22,380 --> 00:39:24,359
authorize them right you want to

983
00:39:24,359 --> 00:39:26,280
delegate that authentication to some

984
00:39:26,280 --> 00:39:29,400
trusted MTD that's the idea of author

985
00:39:29,400 --> 00:39:32,280
now uh the last topic for today I've

986
00:39:32,280 --> 00:39:34,560
mentioned a couple of times uh that you

987
00:39:34,560 --> 00:39:36,780
know whoever bears that token whoever

988
00:39:36,780 --> 00:39:39,540
holds this token now that we know where

989
00:39:39,540 --> 00:39:41,339
tokens are coming from the question the

990
00:39:41,339 --> 00:39:42,780
last question to kind of complete the

991
00:39:42,780 --> 00:39:45,960
picture is how do you validate the token

992
00:39:45,960 --> 00:39:47,760
right so we've spoken you know we've

993
00:39:47,760 --> 00:39:50,579
talked about uh you know how to retrieve

994
00:39:50,579 --> 00:39:52,260
the token how the users authenticate

995
00:39:52,260 --> 00:39:54,780
what these tokens look like but how do

996
00:39:54,780 --> 00:39:56,520
you actually validate them on the

997
00:39:56,520 --> 00:39:58,140
research server side right how does

998
00:39:58,140 --> 00:40:00,420
resource server validates that and

999
00:40:00,420 --> 00:40:02,460
obviously there is a spec that talks

1000
00:40:02,460 --> 00:40:04,560
about that right and we've just covered

1001
00:40:04,560 --> 00:40:06,660
four out of probably I don't know 50

1002
00:40:06,660 --> 00:40:09,000
different specs uh that are available in

1003
00:40:09,000 --> 00:40:12,300
this area Bearer tokens are predominant

1004
00:40:12,300 --> 00:40:15,359
type of access token used with oauth 2.

1005
00:40:15,359 --> 00:40:17,700
and to put it simple it's just type of

1006
00:40:17,700 --> 00:40:21,180
access token predominant

1007
00:40:21,180 --> 00:40:24,540
I honestly do not remember more than two

1008
00:40:24,540 --> 00:40:28,380
cases in last seven or so years that

1009
00:40:28,380 --> 00:40:30,960
we're not using Bearer tokens right that

1010
00:40:30,960 --> 00:40:32,700
we're using tokens in a different way

1011
00:40:32,700 --> 00:40:34,380
and I'm talking not talking about two

1012
00:40:34,380 --> 00:40:36,000
out of ten I'm talking two out of

1013
00:40:36,000 --> 00:40:39,540
hundreds probably okay so it's the most

1014
00:40:39,540 --> 00:40:42,660
common uh token type at least from my

1015
00:40:42,660 --> 00:40:44,520
experience right again everyone's

1016
00:40:44,520 --> 00:40:46,440
different but that was my experience

1017
00:40:46,440 --> 00:40:48,599
this spec the bearer token spec

1018
00:40:48,599 --> 00:40:51,540
essentially defines how do you use that

1019
00:40:51,540 --> 00:40:53,940
token and how do you validate it that is

1020
00:40:53,940 --> 00:40:57,359
it so the workflow is pretty simple your

1021
00:40:57,359 --> 00:40:58,859
applications server will already know

1022
00:40:58,859 --> 00:41:00,780
that it has access token right it goes

1023
00:41:00,780 --> 00:41:03,300
to authorization server to get tokens it

1024
00:41:03,300 --> 00:41:05,460
gets tokens back and you have that

1025
00:41:05,460 --> 00:41:08,700
access token ABCD whatever now your

1026
00:41:08,700 --> 00:41:10,380
application server needs to make a

1027
00:41:10,380 --> 00:41:13,020
request to the resource server so token

1028
00:41:13,020 --> 00:41:15,900
Bearer spec essentially says that in

1029
00:41:15,900 --> 00:41:19,260
your HTTP request you need to add HTTP

1030
00:41:19,260 --> 00:41:21,900
header called authorization it needs to

1031
00:41:21,900 --> 00:41:24,780
start with Bearer white space and then

1032
00:41:24,780 --> 00:41:26,640
the content of that token essentially

1033
00:41:26,640 --> 00:41:29,460
that base64 encoded with dots and

1034
00:41:29,460 --> 00:41:32,460
everything why base64 encoded with dots

1035
00:41:32,460 --> 00:41:34,500
because it's you know easy to pass over

1036
00:41:34,500 --> 00:41:36,720
HTTP wire right because you know it's

1037
00:41:36,720 --> 00:41:39,180
not binary it's a textual representation

1038
00:41:39,180 --> 00:41:43,740
now resource server knows that once it's

1039
00:41:43,740 --> 00:41:46,260
getting this authorization header Bearer

1040
00:41:46,260 --> 00:41:48,900
and the token it knows how to uh address

1041
00:41:48,900 --> 00:41:50,880
that how to resolve that it will grab

1042
00:41:50,880 --> 00:41:53,460
the token it will validate the signature

1043
00:41:53,460 --> 00:41:57,180
and validate fails okay what happens in

1044
00:41:57,180 --> 00:41:59,339
this case spec defines that in a very

1045
00:41:59,339 --> 00:42:01,560
clear way in this case you return back

1046
00:42:01,560 --> 00:42:03,660
for one unauthorized there are some

1047
00:42:03,660 --> 00:42:06,240
cases where you can return 403 Forbidden

1048
00:42:06,240 --> 00:42:07,680
right but essentially it's going to be

1049
00:42:07,680 --> 00:42:10,140
mostly for a while unauthorized and in

1050
00:42:10,140 --> 00:42:13,040
the response headers you're gonna say

1051
00:42:13,040 --> 00:42:15,599
www.authenticate Bearer

1052
00:42:15,599 --> 00:42:18,240
scope equals whatever was the missing

1053
00:42:18,240 --> 00:42:20,820
scope why that authorization failed

1054
00:42:20,820 --> 00:42:22,500
right essentially you need to explain

1055
00:42:22,500 --> 00:42:25,859
why that validation failed okay

1056
00:42:25,859 --> 00:42:28,560
if your application is built according

1057
00:42:28,560 --> 00:42:31,500
to the bearer token spec it knows how to

1058
00:42:31,500 --> 00:42:33,780
handle that right and the best part is

1059
00:42:33,780 --> 00:42:34,920
you don't need to handle that yourself

1060
00:42:34,920 --> 00:42:36,119
you don't need to implement that

1061
00:42:36,119 --> 00:42:38,160
yourself there are a plethora of Open

1062
00:42:38,160 --> 00:42:40,079
Source libraries that do it for you

1063
00:42:40,079 --> 00:42:43,200
right so auth2 or ADC token validation

1064
00:42:43,200 --> 00:42:45,900
it's probably one of the most popular uh

1065
00:42:45,900 --> 00:42:46,980
Technologies out there for

1066
00:42:46,980 --> 00:42:48,960
authentication authorization if you go

1067
00:42:48,960 --> 00:42:51,960
to that job.io website they have a

1068
00:42:51,960 --> 00:42:53,640
library of different open source Library

1069
00:42:53,640 --> 00:42:56,220
uh a library of Open Source libraries

1070
00:42:56,220 --> 00:42:57,960
right that can help you with token

1071
00:42:57,960 --> 00:43:01,020
validation and additional related things

1072
00:43:01,020 --> 00:43:03,599
now if validation is successful you're

1073
00:43:03,599 --> 00:43:05,280
gonna get that data right it will not

1074
00:43:05,280 --> 00:43:06,839
tell you validation successful there's

1075
00:43:06,839 --> 00:43:08,220
no reason for additional round trip

1076
00:43:08,220 --> 00:43:10,380
immediately you're gonna back uh you're

1077
00:43:10,380 --> 00:43:12,780
gonna get back the data that you've uh

1078
00:43:12,780 --> 00:43:14,700
asked for okay

1079
00:43:14,700 --> 00:43:16,920
that's essentially the essence of that

1080
00:43:16,920 --> 00:43:19,560
uh token barrier spec so to summarize

1081
00:43:19,560 --> 00:43:23,520
there are four major parts to uh

1082
00:43:23,520 --> 00:43:25,319
implementing authorization and

1083
00:43:25,319 --> 00:43:28,260
authentication yes there are more right

1084
00:43:28,260 --> 00:43:30,960
this technology is ever evolving right

1085
00:43:30,960 --> 00:43:33,300
so we've covered today you know in a

1086
00:43:33,300 --> 00:43:36,180
visual way what are these workflows that

1087
00:43:36,180 --> 00:43:38,460
create the Baseline of this technology

1088
00:43:38,460 --> 00:43:40,740
they are auth2 that's the authorization

1089
00:43:40,740 --> 00:43:43,740
framework open ID connect authentication

1090
00:43:43,740 --> 00:43:47,099
framework on top of auth2 Json web

1091
00:43:47,099 --> 00:43:49,740
tokens or jots structured and secured

1092
00:43:49,740 --> 00:43:51,599
way to store and transport information

1093
00:43:51,599 --> 00:43:54,960
essentially that spec talks about how do

1094
00:43:54,960 --> 00:43:57,300
you build those tokens and the last one

1095
00:43:57,300 --> 00:44:01,140
Bearer token talks about how do you pass

1096
00:44:01,140 --> 00:44:03,480
the token over the wire and how do you

1097
00:44:03,480 --> 00:44:06,119
validate it on the resource server side

1098
00:44:06,119 --> 00:44:09,240
to bring everything together right this

1099
00:44:09,240 --> 00:44:11,460
is what in general right the workflow

1100
00:44:11,460 --> 00:44:14,280
looks like step one you authenticate and

1101
00:44:14,280 --> 00:44:16,200
you're getting tokens you might have a

1102
00:44:16,200 --> 00:44:17,640
user it might be application to

1103
00:44:17,640 --> 00:44:20,040
application scenarios but step one you

1104
00:44:20,040 --> 00:44:22,140
authenticate and you get tokens the

1105
00:44:22,140 --> 00:44:24,359
Technologies you use here are oauth 2

1106
00:44:24,359 --> 00:44:26,760
and YDC right and you know you can pick

1107
00:44:26,760 --> 00:44:29,700
one of these uh grants or use any other

1108
00:44:29,700 --> 00:44:32,040
step two you validate and you read those

1109
00:44:32,040 --> 00:44:34,740
tokens so once you receive the token you

1110
00:44:34,740 --> 00:44:36,180
probably want to validate it right you

1111
00:44:36,180 --> 00:44:37,319
want to make sure that it's coming from

1112
00:44:37,319 --> 00:44:39,300
a trusted Source this is where you do

1113
00:44:39,300 --> 00:44:41,220
token validation this is where you might

1114
00:44:41,220 --> 00:44:44,099
read claims if that's an identity token

1115
00:44:44,099 --> 00:44:46,619
now your application can present you

1116
00:44:46,619 --> 00:44:48,720
know hello Anton right and that's your

1117
00:44:48,720 --> 00:44:50,700
picture and do you want us to send some

1118
00:44:50,700 --> 00:44:52,319
spam email to the list of your Facebook

1119
00:44:52,319 --> 00:44:55,200
friends for example if I authorize that

1120
00:44:55,200 --> 00:44:57,119
step three that's where your application

1121
00:44:57,119 --> 00:44:59,700
can send tokens and this is done through

1122
00:44:59,700 --> 00:45:02,700
bear token spec in authorization header

1123
00:45:02,700 --> 00:45:05,160
right so this is using those tokens to

1124
00:45:05,160 --> 00:45:07,560
talk to protected resources and the last

1125
00:45:07,560 --> 00:45:09,480
step is you need to validate access on

1126
00:45:09,480 --> 00:45:10,980
those protected resources you need to

1127
00:45:10,980 --> 00:45:13,500
validate that whoever claims that hey

1128
00:45:13,500 --> 00:45:16,020
I'm I'm holding this token right and it

1129
00:45:16,020 --> 00:45:18,180
authorizes me to do you know action a

1130
00:45:18,180 --> 00:45:20,220
and action B you need to validate that

1131
00:45:20,220 --> 00:45:21,900
that token coming from a trusted Source

1132
00:45:21,900 --> 00:45:24,060
you need to validate that that token is

1133
00:45:24,060 --> 00:45:26,280
not expired you need to validate that

1134
00:45:26,280 --> 00:45:28,319
that token was actually well contains

1135
00:45:28,319 --> 00:45:31,800
proper Scopes that token was issued for

1136
00:45:31,800 --> 00:45:34,079
a particular protected resource a little

1137
00:45:34,079 --> 00:45:36,240
bit less common but still important

1138
00:45:36,240 --> 00:45:40,079
right uh so this is where you use Bearer

1139
00:45:40,079 --> 00:45:42,780
token plus jwq specs and you do these

1140
00:45:42,780 --> 00:45:43,920
actions

1141
00:45:43,920 --> 00:45:46,740
this is all I have today okay I hope

1142
00:45:46,740 --> 00:45:49,440
this was helpful okay useful and if you

1143
00:45:49,440 --> 00:45:51,480
have any questions I'll be happy to take

1144
00:45:51,480 --> 00:45:54,740
them right on time

1145
00:46:00,599 --> 00:46:04,400
questions about candy is also welcome

1146
00:46:10,980 --> 00:46:13,020
okay so do you have maybe scenarios like

1147
00:46:13,020 --> 00:46:15,119
use cases where you think uh this will

1148
00:46:15,119 --> 00:46:16,380
be applicable

1149
00:46:16,380 --> 00:46:18,599
right uh do you use any of these today

1150
00:46:18,599 --> 00:46:20,460
it would be interesting to hear if

1151
00:46:20,460 --> 00:46:23,720
anyone already uses this today

1152
00:46:27,420 --> 00:46:29,700
yep go ahead in your opinion where do

1153
00:46:29,700 --> 00:46:31,680
you see the most misconfigurations of

1154
00:46:31,680 --> 00:46:36,119
open ID or misconfigurations

1155
00:46:36,119 --> 00:46:38,339
let me think about it for a second

1156
00:46:38,339 --> 00:46:42,319
that's a that's a good one

1157
00:46:44,339 --> 00:46:46,800
so let me take it this way right this

1158
00:46:46,800 --> 00:46:48,180
route

1159
00:46:48,180 --> 00:46:50,700
it's pretty it's not that complex to

1160
00:46:50,700 --> 00:46:53,400
configure the whole work rule right once

1161
00:46:53,400 --> 00:46:56,099
you did it once right uh you know you

1162
00:46:56,099 --> 00:46:58,440
understand that you have those client ID

1163
00:46:58,440 --> 00:47:00,180
and secret right and you have the

1164
00:47:00,180 --> 00:47:02,640
Callback URL once you did it for the

1165
00:47:02,640 --> 00:47:05,760
first time subsequent attempts are you

1166
00:47:05,760 --> 00:47:08,400
know always successful the first attempt

1167
00:47:08,400 --> 00:47:10,020
you need to understand the workflow

1168
00:47:10,020 --> 00:47:12,540
right because this this exchange of well

1169
00:47:12,540 --> 00:47:14,579
where do I redirect the application that

1170
00:47:14,579 --> 00:47:16,680
callback URL right so I do see some

1171
00:47:16,680 --> 00:47:18,420
challenges in the initial configuration

1172
00:47:18,420 --> 00:47:20,780
phase that's why

1173
00:47:20,780 --> 00:47:23,700
major uh authorization uh Services

1174
00:47:23,700 --> 00:47:27,000
providers like they are they're working

1175
00:47:27,000 --> 00:47:28,680
hard to improve that experience some of

1176
00:47:28,680 --> 00:47:30,359
them are actually automating this right

1177
00:47:30,359 --> 00:47:32,339
some of them are providing out of the

1178
00:47:32,339 --> 00:47:34,560
box workflows that you know you can use

1179
00:47:34,560 --> 00:47:36,960
this for development but you'll have to

1180
00:47:36,960 --> 00:47:38,520
go through this configuration for your

1181
00:47:38,520 --> 00:47:39,780
production application but for

1182
00:47:39,780 --> 00:47:41,220
development you don't have to right

1183
00:47:41,220 --> 00:47:43,920
because we've simplified so that first

1184
00:47:43,920 --> 00:47:46,619
initial configuration and I'm not

1185
00:47:46,619 --> 00:47:48,060
talking about every single time you need

1186
00:47:48,060 --> 00:47:50,220
to do it no just the first time this is

1187
00:47:50,220 --> 00:47:52,680
where I do see people still struggle a

1188
00:47:52,680 --> 00:47:55,020
little bit okay but you know I hope

1189
00:47:55,020 --> 00:47:57,000
those arrows they will help you to

1190
00:47:57,000 --> 00:47:59,060
understand what needs to be configured

1191
00:47:59,060 --> 00:48:03,440
one more thing is

1192
00:48:03,960 --> 00:48:06,960
well again try not to make that too

1193
00:48:06,960 --> 00:48:10,440
complex but in some scenarios you have

1194
00:48:10,440 --> 00:48:13,200
multiple hops of that authorization so

1195
00:48:13,200 --> 00:48:14,700
you don't have a single authorization

1196
00:48:14,700 --> 00:48:19,200
server imagine uh you have Enterprise uh

1197
00:48:19,200 --> 00:48:21,420
Samo product that is like you know 50

1198
00:48:21,420 --> 00:48:24,000
years old and everyone is a people

1199
00:48:24,000 --> 00:48:25,680
afraid to touch it because it works and

1200
00:48:25,680 --> 00:48:27,780
you know you don't touch what works okay

1201
00:48:27,780 --> 00:48:30,300
uh and you need to create an application

1202
00:48:30,300 --> 00:48:33,480
that will go through a more you know a

1203
00:48:33,480 --> 00:48:35,460
newer product for identity provider

1204
00:48:35,460 --> 00:48:37,859
right that will Federate to that thermal

1205
00:48:37,859 --> 00:48:39,839
and that saml might actually Federate to

1206
00:48:39,839 --> 00:48:43,380
yet another Hub right so when you have a

1207
00:48:43,380 --> 00:48:45,420
sequence of those authorization servers

1208
00:48:45,420 --> 00:48:48,119
saml provider right identity providers

1209
00:48:48,119 --> 00:48:50,400
implementing different specs like saml

1210
00:48:50,400 --> 00:48:53,700
versus YDC this is probably complex part

1211
00:48:53,700 --> 00:48:55,560
right this is getting into complexity

1212
00:48:55,560 --> 00:48:57,540
area and I do see misconfigurations

1213
00:48:57,540 --> 00:48:59,160
there quite

1214
00:48:59,160 --> 00:49:02,280
frequently I would say right I hope this

1215
00:49:02,280 --> 00:49:04,640
helps

1216
00:49:10,140 --> 00:49:12,540
okay cool I'm sticking around I'm not

1217
00:49:12,540 --> 00:49:14,520
leaving so if you have any questions uh

1218
00:49:14,520 --> 00:49:16,079
you know you can find me on LinkedIn you

1219
00:49:16,079 --> 00:49:18,200
can find me over here thanks a lot

1220
00:49:18,200 --> 00:49:18,710
[Applause]

1221
00:49:18,710 --> 00:49:22,420
[Music]

