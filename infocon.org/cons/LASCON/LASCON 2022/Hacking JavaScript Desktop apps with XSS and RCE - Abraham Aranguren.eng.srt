1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:53,840 --> 00:00:57,780
the first thing to say is that there's a

3
00:00:57,780 --> 00:01:01,260
slower paced version of this Workshop in

4
00:01:01,260 --> 00:01:04,019
case you find I talk too fast or or you

5
00:01:04,019 --> 00:01:05,580
know there's like too many new Concepts

6
00:01:05,580 --> 00:01:08,220
and stuff so you can get everything that

7
00:01:08,220 --> 00:01:09,780
I'm going to demonstrate the vulnerable

8
00:01:09,780 --> 00:01:12,720
applications are recording the slides

9
00:01:12,720 --> 00:01:14,520
everything in service secure comes last

10
00:01:14,520 --> 00:01:16,740
three so it's completely free and

11
00:01:16,740 --> 00:01:18,960
there's like a one hour and a half like

12
00:01:18,960 --> 00:01:21,960
slower paced version so if you find I'm

13
00:01:21,960 --> 00:01:23,700
talking too fast or like this is a

14
00:01:23,700 --> 00:01:25,619
little bit challenging uh you know

15
00:01:25,619 --> 00:01:28,259
there's like a second kind of slower

16
00:01:28,259 --> 00:01:30,900
version So today we're going to talk

17
00:01:30,900 --> 00:01:32,520
about hacking JavaScript desktop apps we

18
00:01:32,520 --> 00:01:34,500
with exercise and remote code execution

19
00:01:34,500 --> 00:01:36,659
so first I'll give you some introduction

20
00:01:36,659 --> 00:01:40,320
about about this and then

21
00:01:40,320 --> 00:01:43,619
from the perspective of like maybe some

22
00:01:43,619 --> 00:01:45,540
of you have never audited an electron

23
00:01:45,540 --> 00:01:47,700
application so I'll give you like some

24
00:01:47,700 --> 00:01:49,439
essential techniques about how to get

25
00:01:49,439 --> 00:01:51,299
started how to get like some findings

26
00:01:51,299 --> 00:01:54,060
without having any idea right so

27
00:01:54,060 --> 00:01:56,159
we'll talk about that first and then

28
00:01:56,159 --> 00:01:58,259
we'll see something which I believe is

29
00:01:58,259 --> 00:02:00,540
really interesting is what does exercise

30
00:02:00,540 --> 00:02:02,759
mean when you get it in a desktop

31
00:02:02,759 --> 00:02:04,259
application as opposed to a web

32
00:02:04,259 --> 00:02:05,939
application right what what can you do

33
00:02:05,939 --> 00:02:07,320
and there's a lot of interesting

34
00:02:07,320 --> 00:02:09,538
scenarios that we are going to to see

35
00:02:09,538 --> 00:02:10,860
today

36
00:02:10,860 --> 00:02:12,120
um and then we will see like how to

37
00:02:12,120 --> 00:02:14,280
exploit them how to mitigate them as

38
00:02:14,280 --> 00:02:16,319
well right and then how to turn exercise

39
00:02:16,319 --> 00:02:18,420
into remote code execution and then

40
00:02:18,420 --> 00:02:20,280
attacking preload scripts will will also

41
00:02:20,280 --> 00:02:22,020
be uh quite interesting in concept

42
00:02:22,020 --> 00:02:24,180
because it's kind of prototype pollution

43
00:02:24,180 --> 00:02:26,099
but in the context of a desktop

44
00:02:26,099 --> 00:02:28,680
application so I'll go through that and

45
00:02:28,680 --> 00:02:30,840
then another very interesting concept

46
00:02:30,840 --> 00:02:32,520
which is getting remote execution

47
00:02:32,520 --> 00:02:34,200
through inter-process communication

48
00:02:34,200 --> 00:02:36,060
right so we'll talk about all those

49
00:02:36,060 --> 00:02:37,520
things

50
00:02:37,520 --> 00:02:41,099
I'm the CEO of 70 security we do pen

51
00:02:41,099 --> 00:02:42,780
tests and training

52
00:02:42,780 --> 00:02:45,840
um so I was teaching the web course a

53
00:02:45,840 --> 00:02:48,120
couple of days ago here Alaska and as

54
00:02:48,120 --> 00:02:49,620
well

55
00:02:49,620 --> 00:02:52,200
um and yeah I'm co-author of uh or web

56
00:02:52,200 --> 00:02:55,080
mobile and desktop application security

57
00:02:55,080 --> 00:02:57,480
courses that we have we've done security

58
00:02:57,480 --> 00:02:59,459
training at black hat hacking the Box

59
00:02:59,459 --> 00:03:03,480
overflow or labsec I'll be at over San

60
00:03:03,480 --> 00:03:05,480
Francisco in a couple of weeks as well

61
00:03:05,480 --> 00:03:09,599
uh you know lots of places and now since

62
00:03:09,599 --> 00:03:11,340
this is a Northwest conference I'm also

63
00:03:11,340 --> 00:03:13,379
the project leader of one of the OAS

64
00:03:13,379 --> 00:03:16,500
Flagship projects which is Os or WTF

65
00:03:16,500 --> 00:03:19,140
so if you are interested or on this it's

66
00:03:19,140 --> 00:03:20,519
kind of hacking always you know to have

67
00:03:20,519 --> 00:03:22,040
other otfs somewhere

68
00:03:22,040 --> 00:03:25,440
so if you go to otherwtf.org if you type

69
00:03:25,440 --> 00:03:26,640
this in your browser I'll take you to

70
00:03:26,640 --> 00:03:29,220
the obas page so this is a project more

71
00:03:29,220 --> 00:03:31,680
about like hiking uh web applications

72
00:03:31,680 --> 00:03:33,360
but still

73
00:03:33,360 --> 00:03:34,739
um interesting

74
00:03:34,739 --> 00:03:36,840
now let me fix one thing that I just

75
00:03:36,840 --> 00:03:38,760
noticed

76
00:03:38,760 --> 00:03:41,720
so I think that will look better now yes

77
00:03:41,720 --> 00:03:44,580
so okay uh and yeah and I was a

78
00:03:44,580 --> 00:03:46,500
developer first and then I went into

79
00:03:46,500 --> 00:03:48,599
security right so I know like both sides

80
00:03:48,599 --> 00:03:50,940
right I know for developers it has to be

81
00:03:50,940 --> 00:03:52,739
working in production on Friday

82
00:03:52,739 --> 00:03:53,599
foreign

83
00:03:53,599 --> 00:03:56,040
doesn't matter how you do it it has to

84
00:03:56,040 --> 00:03:57,780
be there right and then I know the

85
00:03:57,780 --> 00:04:00,120
frustration of pen testers like why are

86
00:04:00,120 --> 00:04:03,120
you not fixing my box right so I got

87
00:04:03,120 --> 00:04:05,760
your back basically right now uh one of

88
00:04:05,760 --> 00:04:07,200
the other things that you can have see

89
00:04:07,200 --> 00:04:08,700
on the website is public painters

90
00:04:08,700 --> 00:04:10,500
reports so these are a little bit older

91
00:04:10,500 --> 00:04:12,900
about the Chinese police so you can

92
00:04:12,900 --> 00:04:14,700
search on YouTube for Chinese police and

93
00:04:14,700 --> 00:04:16,858
cloudpets I gave a couple of talks about

94
00:04:16,858 --> 00:04:19,918
this so some basically auditing

95
00:04:19,918 --> 00:04:21,779
so all these pentatives reports are like

96
00:04:21,779 --> 00:04:23,160
completely free like you can like check

97
00:04:23,160 --> 00:04:25,080
them out you can also watch the talk if

98
00:04:25,080 --> 00:04:26,580
you go to YouTube Chinese please and

99
00:04:26,580 --> 00:04:29,340
cloudpets you can see some applications

100
00:04:29,340 --> 00:04:32,040
small applications written by uh Chinese

101
00:04:32,040 --> 00:04:34,560
police Chinese government so it was kind

102
00:04:34,560 --> 00:04:36,960
of a public safety audit to look for

103
00:04:36,960 --> 00:04:39,720
like others spying on people or not you

104
00:04:39,720 --> 00:04:40,979
know that kind of stuff

105
00:04:40,979 --> 00:04:43,979
then smart Sharif was an application

106
00:04:43,979 --> 00:04:46,620
mandated in South Korea so by law every

107
00:04:46,620 --> 00:04:48,120
parent and child was forced to install

108
00:04:48,120 --> 00:04:49,500
this application

109
00:04:49,500 --> 00:04:51,240
so we also did an audit of that

110
00:04:51,240 --> 00:04:53,220
basically everything you should never do

111
00:04:53,220 --> 00:04:55,020
in a mobile application can be

112
00:04:55,020 --> 00:04:58,340
summarizing these stupendous reports

113
00:04:58,340 --> 00:05:00,960
it was so bad that we even gave a talk

114
00:05:00,960 --> 00:05:02,759
about it so you can search for

115
00:05:02,759 --> 00:05:05,699
SmartShare with them idea on YouTube and

116
00:05:05,699 --> 00:05:08,460
you you can see a talk about that

117
00:05:08,460 --> 00:05:10,680
yeah

118
00:05:10,680 --> 00:05:12,600
and more recently I don't have that in

119
00:05:12,600 --> 00:05:14,460
the slide we did Apprentice this year

120
00:05:14,460 --> 00:05:17,400
for um uh I copied contact tracing

121
00:05:17,400 --> 00:05:19,740
application called leave home safe which

122
00:05:19,740 --> 00:05:21,900
is mandated kind of mandated in Hong

123
00:05:21,900 --> 00:05:24,600
Kong so basically to do anything in Hong

124
00:05:24,600 --> 00:05:26,820
Kong go to a restaurant go anywhere you

125
00:05:26,820 --> 00:05:29,039
have to install this app and so it was

126
00:05:29,039 --> 00:05:30,840
also like a public safety

127
00:05:30,840 --> 00:05:33,180
there was a disclosure process

128
00:05:33,180 --> 00:05:36,840
and long story short man in the middle

129
00:05:36,840 --> 00:05:39,419
without warnings in Android still not

130
00:05:39,419 --> 00:05:42,620
fixed after like the 30-day disclosure

131
00:05:42,620 --> 00:05:45,300
then 60 days after we checked again

132
00:05:45,300 --> 00:05:48,620
still not fixed so you can read all that

133
00:05:48,620 --> 00:05:51,360
on the on the site as well so and

134
00:05:51,360 --> 00:05:53,400
there's a bunch of other public Panthers

135
00:05:53,400 --> 00:05:55,199
reports so you could do this all in

136
00:05:55,199 --> 00:05:58,139
there now I have to give props to these

137
00:05:58,139 --> 00:05:59,699
people if you don't if you're not

138
00:05:59,699 --> 00:06:02,460
following them on Twitter you should

139
00:06:02,460 --> 00:06:06,180
um so basically if if you're interested

140
00:06:06,180 --> 00:06:08,100
in exercise you should follow masato

141
00:06:08,100 --> 00:06:10,320
right so when the access seems

142
00:06:10,320 --> 00:06:11,759
impossible to exploit he makes it

143
00:06:11,759 --> 00:06:13,380
exploitable

144
00:06:13,380 --> 00:06:16,440
file descriptor number one ranked back

145
00:06:16,440 --> 00:06:19,520
Bounty Hunter for Twitter for many years

146
00:06:19,520 --> 00:06:22,199
an insert script has done a lot of

147
00:06:22,199 --> 00:06:25,800
research on PDF and how to use in PDF

148
00:06:25,800 --> 00:06:27,479
how to hack into web applications and

149
00:06:27,479 --> 00:06:30,360
stuff so really good people and they all

150
00:06:30,360 --> 00:06:33,360
helped Maize or Electro course better

151
00:06:33,360 --> 00:06:35,639
and by extension also this Workshop so

152
00:06:35,639 --> 00:06:38,280
Props to them and yeah this is like in

153
00:06:38,280 --> 00:06:39,720
case you want to take or so I'll just

154
00:06:39,720 --> 00:06:42,780
skip through this today we will see some

155
00:06:42,780 --> 00:06:44,400
introduction to electrons so what it is

156
00:06:44,400 --> 00:06:47,460
and so on and from here we will be

157
00:06:47,460 --> 00:06:50,160
talking about the basics of electron xss

158
00:06:50,160 --> 00:06:52,680
exploitation what node integration means

159
00:06:52,680 --> 00:06:55,020
some mitigation Essentials right so we

160
00:06:55,020 --> 00:06:57,300
will talk a little bit about defense web

161
00:06:57,300 --> 00:06:58,919
preferences so we will see a little bit

162
00:06:58,919 --> 00:07:00,180
of these topics and also

163
00:07:00,180 --> 00:07:01,860
electronegativity I'll have a demo about

164
00:07:01,860 --> 00:07:04,139
that from here

165
00:07:04,139 --> 00:07:06,840
uh we will attack preload scripts so

166
00:07:06,840 --> 00:07:08,100
this is one of the things we'll do and

167
00:07:08,100 --> 00:07:09,780
we will see a very cool technique to get

168
00:07:09,780 --> 00:07:11,639
code execution without warnings in

169
00:07:11,639 --> 00:07:13,880
Windows so if you are into red teaming

170
00:07:13,880 --> 00:07:16,560
the techniques that I'm going to share

171
00:07:16,560 --> 00:07:18,080
will be interesting

172
00:07:18,080 --> 00:07:21,000
then we won't see anything of this today

173
00:07:21,000 --> 00:07:22,380
but just to mention that because

174
00:07:22,380 --> 00:07:24,419
electron applications are in the desktop

175
00:07:24,419 --> 00:07:27,120
all the usual like leaks in the local

176
00:07:27,120 --> 00:07:29,639
system and so on type of attack vectors

177
00:07:29,639 --> 00:07:31,199
also apply

178
00:07:31,199 --> 00:07:33,240
then you should always money in the

179
00:07:33,240 --> 00:07:34,979
middle uh desktop application we won't

180
00:07:34,979 --> 00:07:36,720
see this today but of course you have to

181
00:07:36,720 --> 00:07:38,099
like many in the middle and there's like

182
00:07:38,099 --> 00:07:40,020
a few techniques to do this now

183
00:07:40,020 --> 00:07:41,639
repackaging is also an interesting

184
00:07:41,639 --> 00:07:44,460
technique that you can do also in mobile

185
00:07:44,460 --> 00:07:46,800
applications but in desktop applications

186
00:07:46,800 --> 00:07:48,840
and especially electron is even easier

187
00:07:48,840 --> 00:07:51,599
because you can basically reverse the

188
00:07:51,599 --> 00:07:53,039
electron application change the

189
00:07:53,039 --> 00:07:54,900
JavaScript and then you get for example

190
00:07:54,900 --> 00:07:57,120
you can add debug statements on the

191
00:07:57,120 --> 00:07:59,340
JavaScript and then you can see how they

192
00:07:59,340 --> 00:08:00,960
are doing their crypto and stuff right

193
00:08:00,960 --> 00:08:03,000
so you can get a lot of help with that

194
00:08:03,000 --> 00:08:04,259
so

195
00:08:04,259 --> 00:08:06,300
um and then with instrumentation you can

196
00:08:06,300 --> 00:08:08,940
also see what the application is doing

197
00:08:08,940 --> 00:08:10,800
at random but we won't see these days

198
00:08:10,800 --> 00:08:13,560
just to mention that it's possible and

199
00:08:13,560 --> 00:08:15,900
then in here we talk a bit more about

200
00:08:15,900 --> 00:08:19,259
Advanced attacks uh

201
00:08:19,259 --> 00:08:21,960
yeah and what else from here I think

202
00:08:21,960 --> 00:08:23,940
yeah we will see that yeah this one so

203
00:08:23,940 --> 00:08:25,800
this is one of the scenarios that we

204
00:08:25,800 --> 00:08:28,740
will be talking about today with

205
00:08:28,740 --> 00:08:31,860
um getting uh code execution through

206
00:08:31,860 --> 00:08:33,419
inter process communication so I'll talk

207
00:08:33,419 --> 00:08:35,880
about that and then this is also an

208
00:08:35,880 --> 00:08:38,279
interesting topic right so we call this

209
00:08:38,279 --> 00:08:41,039
hacking desktop applications but

210
00:08:41,039 --> 00:08:43,620
sometimes we've seen this actually in

211
00:08:43,620 --> 00:08:46,380
the field it's possible to run electron

212
00:08:46,380 --> 00:08:49,440
on our website so there was this website

213
00:08:49,440 --> 00:08:51,899
and they were running an electron app to

214
00:08:51,899 --> 00:08:54,720
turn user supplied HTML into a PDF so

215
00:08:54,720 --> 00:08:57,019
you can see where this is going

216
00:08:57,019 --> 00:09:00,959
and then you can basically

217
00:09:00,959 --> 00:09:02,820
um using the attack vectors that I'm

218
00:09:02,820 --> 00:09:04,380
going to show today getting exercise

219
00:09:04,380 --> 00:09:08,100
against the the PDF converter and then

220
00:09:08,100 --> 00:09:09,899
from that you can even turn that into

221
00:09:09,899 --> 00:09:11,880
code execution as well on the server

222
00:09:11,880 --> 00:09:13,980
right so even if you're just a weapon

223
00:09:13,980 --> 00:09:15,959
tester I think this stock can also give

224
00:09:15,959 --> 00:09:18,360
you like some pointers in case you uh

225
00:09:18,360 --> 00:09:19,800
you get lucky and find something like

226
00:09:19,800 --> 00:09:20,540
that

227
00:09:20,540 --> 00:09:23,640
and then some local attacks for

228
00:09:23,640 --> 00:09:25,200
privilege escalation and so on it's

229
00:09:25,200 --> 00:09:27,120
another thing that we cover right so

230
00:09:27,120 --> 00:09:29,700
with that let's get started so

231
00:09:29,700 --> 00:09:32,040
a crash course about electron security

232
00:09:32,040 --> 00:09:34,800
right so first of all why would you ran

233
00:09:34,800 --> 00:09:36,540
JavaScript on the desktop right so most

234
00:09:36,540 --> 00:09:38,700
of your security people are like but why

235
00:09:38,700 --> 00:09:40,680
why do this right like JavaScript on the

236
00:09:40,680 --> 00:09:44,040
desktop seriously why right so uh so the

237
00:09:44,040 --> 00:09:45,300
first thing is

238
00:09:45,300 --> 00:09:47,399
it's a practical thing for companies

239
00:09:47,399 --> 00:09:49,920
right so you have traditionally you

240
00:09:49,920 --> 00:09:51,360
would have to pay Windows developers

241
00:09:51,360 --> 00:09:53,640
Linux developers Mac developers right so

242
00:09:53,640 --> 00:09:55,080
this is expensive now you have three

243
00:09:55,080 --> 00:09:58,019
teams that maybe don't get along very

244
00:09:58,019 --> 00:10:00,720
well right there's always like politics

245
00:10:00,720 --> 00:10:02,640
in big companies and so on different

246
00:10:02,640 --> 00:10:05,040
deadlines I mean there's there's lots of

247
00:10:05,040 --> 00:10:06,839
more coordination effort paying more

248
00:10:06,839 --> 00:10:09,779
people but with an electron now the

249
00:10:09,779 --> 00:10:11,399
application is written in JavaScript

250
00:10:11,399 --> 00:10:13,500
that magically works everywhere right so

251
00:10:13,500 --> 00:10:15,060
now you only have to pay JavaScript

252
00:10:15,060 --> 00:10:18,740
developers who are probably cheaper

253
00:10:18,740 --> 00:10:21,720
than Windows developers really and Mac

254
00:10:21,720 --> 00:10:24,420
developers right and now the application

255
00:10:24,420 --> 00:10:25,980
magically works and everything right it

256
00:10:25,980 --> 00:10:27,720
works on Windows Mega Linux so this is

257
00:10:27,720 --> 00:10:29,040
pretty cool right so this is the main

258
00:10:29,040 --> 00:10:31,440
reason why lots of companies are doing

259
00:10:31,440 --> 00:10:34,080
this and now your next question may be

260
00:10:34,080 --> 00:10:36,600
what companies are doing this right so

261
00:10:36,600 --> 00:10:38,940
maybe some of these ring a bell right

262
00:10:38,940 --> 00:10:41,820
Microsoft teams guide Zoom slag Discord

263
00:10:41,820 --> 00:10:44,940
bigger and right so uh very lots of like

264
00:10:44,940 --> 00:10:46,320
big companies right so it's it's

265
00:10:46,320 --> 00:10:48,420
important to know about electron

266
00:10:48,420 --> 00:10:50,399
security because lots of big companies

267
00:10:50,399 --> 00:10:52,980
are using it a very popular applications

268
00:10:52,980 --> 00:10:55,500
so to understand this Workshop this is

269
00:10:55,500 --> 00:10:59,240
one of maybe the most important slides

270
00:11:00,180 --> 00:11:01,800
let's say

271
00:11:01,800 --> 00:11:04,260
um this is the Discord application and

272
00:11:04,260 --> 00:11:06,120
you click on it now the first thing

273
00:11:06,120 --> 00:11:08,339
that's going to happen is that there's

274
00:11:08,339 --> 00:11:10,320
What's called the main process of the

275
00:11:10,320 --> 00:11:12,240
application will be launched

276
00:11:12,240 --> 00:11:15,000
and then for each screen that the

277
00:11:15,000 --> 00:11:18,720
application has they will be a renderer

278
00:11:18,720 --> 00:11:20,519
process right so this will become

279
00:11:20,519 --> 00:11:22,620
important now as I delve deeper into

280
00:11:22,620 --> 00:11:25,320
this because the main process is less

281
00:11:25,320 --> 00:11:27,480
exposed to the user but it is more

282
00:11:27,480 --> 00:11:28,920
powerful right so if you have a

283
00:11:28,920 --> 00:11:30,540
vulnerability here you can do a lot more

284
00:11:30,540 --> 00:11:33,300
damage and the render process because

285
00:11:33,300 --> 00:11:36,480
it's more exposed to the user has more

286
00:11:36,480 --> 00:11:39,000
mechanisms provided by the platform so

287
00:11:39,000 --> 00:11:41,459
it's easier through configuration to

288
00:11:41,459 --> 00:11:43,560
secure it right as opposed to the main

289
00:11:43,560 --> 00:11:44,700
process where if you have a

290
00:11:44,700 --> 00:11:45,839
vulnerability here you're pretty much

291
00:11:45,839 --> 00:11:48,720
like done it's over right so that is the

292
00:11:48,720 --> 00:11:50,459
main difference so you have the

293
00:11:50,459 --> 00:11:52,560
operating system Windows Mac or Linux

294
00:11:52,560 --> 00:11:55,140
then you have the electron core which

295
00:11:55,140 --> 00:11:58,140
abstracts everything and then inside of

296
00:11:58,140 --> 00:12:00,000
the electron application you have the

297
00:12:00,000 --> 00:12:01,940
main process and the renderer process

298
00:12:01,940 --> 00:12:04,380
and they can talk to each other through

299
00:12:04,380 --> 00:12:07,440
IPC messages which is basically a fancy

300
00:12:07,440 --> 00:12:08,700
way of saying like inter-process

301
00:12:08,700 --> 00:12:10,140
communication so they basically send

302
00:12:10,140 --> 00:12:12,000
Json to each other right

303
00:12:12,000 --> 00:12:14,640
and then they can call using electron

304
00:12:14,640 --> 00:12:17,399
apis to electrons so that is more or

305
00:12:17,399 --> 00:12:19,800
less how an electron application works

306
00:12:19,800 --> 00:12:23,160
inside so main process more privileged

307
00:12:23,160 --> 00:12:24,660
can do more stuff

308
00:12:24,660 --> 00:12:26,700
render a process more exposed to the

309
00:12:26,700 --> 00:12:30,180
user normally the xss is here and then

310
00:12:30,180 --> 00:12:32,820
both like share some functionality right

311
00:12:32,820 --> 00:12:35,040
and now everything is built on top of

312
00:12:35,040 --> 00:12:37,200
node.js so even if

313
00:12:37,200 --> 00:12:39,899
this is running on the desktop is really

314
00:12:39,899 --> 00:12:42,779
all working on top of node.js so the

315
00:12:42,779 --> 00:12:44,760
typical like node.js stack vectors in

316
00:12:44,760 --> 00:12:48,240
many cases apply so let's say you have

317
00:12:48,240 --> 00:12:50,339
no idea about electron you have never

318
00:12:50,339 --> 00:12:51,959
seen an electron application in your

319
00:12:51,959 --> 00:12:54,660
life uh how do you get started how do

320
00:12:54,660 --> 00:12:56,820
you get like some vulnerabilities right

321
00:12:56,820 --> 00:13:01,139
so the first thing to do is to download

322
00:13:01,139 --> 00:13:06,200
some old public desktop application

323
00:13:06,600 --> 00:13:09,060
written in a lecture for example

324
00:13:09,060 --> 00:13:10,800
standard notes this is a very old

325
00:13:10,800 --> 00:13:13,380
version so over time there will be

326
00:13:13,380 --> 00:13:15,560
vulnerabilities published

327
00:13:15,560 --> 00:13:18,600
and then what you can do is just run npm

328
00:13:18,600 --> 00:13:21,180
of it now npm audit is a very powerful

329
00:13:21,180 --> 00:13:23,820
tool to be aware about because it will

330
00:13:23,820 --> 00:13:26,339
not just work against electron Maps but

331
00:13:26,339 --> 00:13:28,139
it will work against any app written in

332
00:13:28,139 --> 00:13:30,300
JavaScript so if you get the source code

333
00:13:30,300 --> 00:13:32,459
of a web application or a mobile

334
00:13:32,459 --> 00:13:34,139
application written in JavaScript like

335
00:13:34,139 --> 00:13:36,120
for example Apache Cordova

336
00:13:36,120 --> 00:13:38,940
applications you can run this command

337
00:13:38,940 --> 00:13:40,500
and you can get like some findings like

338
00:13:40,500 --> 00:13:43,500
if any dependency is uh you know

339
00:13:43,500 --> 00:13:47,519
outdated and vulnerable and this is also

340
00:13:47,519 --> 00:13:49,860
um a very common thing to check nowadays

341
00:13:49,860 --> 00:13:52,740
because like the tendency now is you

342
00:13:52,740 --> 00:13:54,660
write very little code and you reuse a

343
00:13:54,660 --> 00:13:56,220
lot of code and a lot of modules right

344
00:13:56,220 --> 00:13:58,860
so it's an important thing to check now

345
00:13:58,860 --> 00:14:01,200
the first thing you run it maybe you get

346
00:14:01,200 --> 00:14:03,300
another message like this so if you pay

347
00:14:03,300 --> 00:14:04,860
attention to the error messages telling

348
00:14:04,860 --> 00:14:06,839
you how to fix it so you need to

349
00:14:06,839 --> 00:14:09,180
generate a package log file which is

350
00:14:09,180 --> 00:14:12,300
generated like this and then you run npm

351
00:14:12,300 --> 00:14:14,399
audit again and you will get like some

352
00:14:14,399 --> 00:14:16,579
findings about outdated

353
00:14:16,579 --> 00:14:19,079
vulnerabilities right and you will see

354
00:14:19,079 --> 00:14:21,000
that in electron you have like remote

355
00:14:21,000 --> 00:14:22,760
code execution

356
00:14:22,760 --> 00:14:24,959
vulnerabilities if it is outdated and so

357
00:14:24,959 --> 00:14:27,320
on right so this is an easy way to get

358
00:14:27,320 --> 00:14:29,339
vulnerabilities and another thing is to

359
00:14:29,339 --> 00:14:30,600
look for vulnerabilities in

360
00:14:30,600 --> 00:14:33,120
configuration right so for this you can

361
00:14:33,120 --> 00:14:34,860
use the vulnerable one application so

362
00:14:34,860 --> 00:14:37,320
you can click on this from the slides

363
00:14:37,320 --> 00:14:39,600
now you're using like the whole free

364
00:14:39,600 --> 00:14:42,300
access thing and in the package that

365
00:14:42,300 --> 00:14:44,040
Json this is the first file to look at

366
00:14:44,040 --> 00:14:46,680
you're looking for main so main will be

367
00:14:46,680 --> 00:14:48,600
the main entry point of that application

368
00:14:48,600 --> 00:14:49,980
and in this case is a file called

369
00:14:49,980 --> 00:14:51,600
main.js

370
00:14:51,600 --> 00:14:54,660
now the thing to look for on main.js or

371
00:14:54,660 --> 00:14:56,459
whatever each column the application is

372
00:14:56,459 --> 00:14:58,680
new browser window right so I show I

373
00:14:58,680 --> 00:15:01,560
showed you in a slide before that for

374
00:15:01,560 --> 00:15:04,320
every window that the application opens

375
00:15:04,320 --> 00:15:07,560
the surrender process right so this is

376
00:15:07,560 --> 00:15:09,720
the renderer process the new browser

377
00:15:09,720 --> 00:15:12,180
window right so when the browser window

378
00:15:12,180 --> 00:15:14,160
is open one of the parameters is the web

379
00:15:14,160 --> 00:15:16,320
preferences and this is where you can

380
00:15:16,320 --> 00:15:19,620
tighten the security in this case the

381
00:15:19,620 --> 00:15:21,920
there's basically no security because

382
00:15:21,920 --> 00:15:24,300
these settings are bad right so I'll

383
00:15:24,300 --> 00:15:26,459
explain now why why these are bad right

384
00:15:26,459 --> 00:15:28,260
so node integration is enabled which is

385
00:15:28,260 --> 00:15:32,639
bad because now with xss you can access

386
00:15:32,639 --> 00:15:35,160
all the node.js apis right so you can

387
00:15:35,160 --> 00:15:37,199
execute operating system commands and

388
00:15:37,199 --> 00:15:39,300
stuff like that so this increases the

389
00:15:39,300 --> 00:15:42,240
impact of any xss from alert 1 to code

390
00:15:42,240 --> 00:15:44,160
execution right so it's a pretty big

391
00:15:44,160 --> 00:15:46,980
difference and then context isolation is

392
00:15:46,980 --> 00:15:49,940
disabled which is also bad because

393
00:15:49,940 --> 00:15:53,459
basically the JavaScript of electron is

394
00:15:53,459 --> 00:15:55,620
running in the same context as the

395
00:15:55,620 --> 00:15:57,120
JavaScript that the user is running

396
00:15:57,120 --> 00:16:00,000
right so if you have an exercise on the

397
00:16:00,000 --> 00:16:02,339
render process this exercise can mess

398
00:16:02,339 --> 00:16:05,300
with electron right so we will see

399
00:16:05,300 --> 00:16:07,500
attacks against both of these things

400
00:16:07,500 --> 00:16:09,120
today

401
00:16:09,120 --> 00:16:13,220
so does anybody see a vulnerability here

402
00:16:15,720 --> 00:16:18,779
inner HTML very good so we have Adobe

403
00:16:18,779 --> 00:16:21,180
access vulnerability here right so the

404
00:16:21,180 --> 00:16:23,399
application receives a message from the

405
00:16:23,399 --> 00:16:25,620
user assigns it to Inner HTML which is

406
00:16:25,620 --> 00:16:27,959
Adam accessor sync if you are interested

407
00:16:27,959 --> 00:16:29,579
in this you can search for Dom exercise

408
00:16:29,579 --> 00:16:32,399
Wiki and it has it hasn't been updated

409
00:16:32,399 --> 00:16:35,519
in a few years but the Dom xss Wiki has

410
00:16:35,519 --> 00:16:37,620
like a lot of things even jQuery things

411
00:16:37,620 --> 00:16:40,800
and so on so this assignment is what is

412
00:16:40,800 --> 00:16:42,660
causing Adobe access vulnerability here

413
00:16:42,660 --> 00:16:44,759
right so that makes sense is Wiki you

414
00:16:44,759 --> 00:16:46,320
can check it on GitHub you can also

415
00:16:46,320 --> 00:16:49,320
search for Dom xss Wiki on Google and it

416
00:16:49,320 --> 00:16:51,899
will be the first result is pretty good

417
00:16:51,899 --> 00:16:55,199
uh and then another thing would be to

418
00:16:55,199 --> 00:16:57,540
look for vulnerabilities and electron

419
00:16:57,540 --> 00:16:59,639
right so there's this company called

420
00:16:59,639 --> 00:17:02,579
audience who maintained this tool so you

421
00:17:02,579 --> 00:17:04,799
can do npm install by insect slash

422
00:17:04,799 --> 00:17:07,199
electronegativity does g so Dash G

423
00:17:07,199 --> 00:17:08,939
installs it globally which is what you

424
00:17:08,939 --> 00:17:11,880
want here because you want to run it as

425
00:17:11,880 --> 00:17:14,520
a tool in your system right so when you

426
00:17:14,520 --> 00:17:16,079
do that it's already installed and then

427
00:17:16,079 --> 00:17:17,459
you can run it against the vulnerable

428
00:17:17,459 --> 00:17:19,980
one application but I'll show in a

429
00:17:19,980 --> 00:17:22,079
second and then when you run this it

430
00:17:22,079 --> 00:17:24,179
will look for lots of vulnerabilities

431
00:17:24,179 --> 00:17:26,459
and electrons so you will get lots of

432
00:17:26,459 --> 00:17:28,620
findings like this right so let's do a

433
00:17:28,620 --> 00:17:30,240
quick demo about that so that it makes

434
00:17:30,240 --> 00:17:33,660
more sense so

435
00:17:33,660 --> 00:17:36,419
friends that I'm just running npm audit

436
00:17:36,419 --> 00:17:38,240
on a very old project

437
00:17:38,240 --> 00:17:40,740
that I showed in the slides right so you

438
00:17:40,740 --> 00:17:42,660
can get like some critical findings so

439
00:17:42,660 --> 00:17:44,280
you have no idea about the lecture but

440
00:17:44,280 --> 00:17:45,840
to just run npm model and now you have

441
00:17:45,840 --> 00:17:49,320
find it right so so this is this is good

442
00:17:49,320 --> 00:17:52,200
right a quick way to get started now in

443
00:17:52,200 --> 00:17:54,960
the configuration you open package.json

444
00:17:54,960 --> 00:17:56,400
right so this is the file I'm opening

445
00:17:56,400 --> 00:17:58,919
and in here you want to look for main

446
00:17:58,919 --> 00:18:02,160
right so I'm just going to search in VI

447
00:18:02,160 --> 00:18:04,740
for main so it takes me to this line

448
00:18:04,740 --> 00:18:06,419
this is the main entry point it's

449
00:18:06,419 --> 00:18:08,940
main.js so now

450
00:18:08,940 --> 00:18:12,480
I can go to main.js or maybe I think I

451
00:18:12,480 --> 00:18:15,780
have it here so I can open

452
00:18:15,780 --> 00:18:19,740
well first I would open main.js and here

453
00:18:19,740 --> 00:18:23,900
you can search for browser window

454
00:18:24,960 --> 00:18:27,419
so in here you can see

455
00:18:27,419 --> 00:18:29,520
there's a new browser window these are

456
00:18:29,520 --> 00:18:31,320
the web preferences no integration any

457
00:18:31,320 --> 00:18:34,020
xss will be code execution context

458
00:18:34,020 --> 00:18:36,419
isolation is set to false any xss will

459
00:18:36,419 --> 00:18:38,700
be able to mess with JavaScript in

460
00:18:38,700 --> 00:18:41,100
electron right so I'll show examples of

461
00:18:41,100 --> 00:18:42,559
that in a second

462
00:18:42,559 --> 00:18:46,260
uh and then in here

463
00:18:46,260 --> 00:18:49,679
we have the exercise so this is the

464
00:18:49,679 --> 00:18:51,360
vulnerability and this could be one way

465
00:18:51,360 --> 00:18:53,580
to fix it right so if you instead of

466
00:18:53,580 --> 00:18:55,320
assigning the message to Inner HTML

467
00:18:55,320 --> 00:18:56,580
you're sending to text content then

468
00:18:56,580 --> 00:18:59,640
there's no xss so you're safe right

469
00:18:59,640 --> 00:19:02,700
um and now electronegativity

470
00:19:02,700 --> 00:19:04,320
that you can write like this

471
00:19:04,320 --> 00:19:07,200
electronegativity Dash high and then the

472
00:19:07,200 --> 00:19:09,299
whatever directory where the vulnerable

473
00:19:09,299 --> 00:19:10,679
application is

474
00:19:10,679 --> 00:19:12,600
in this case it's vulnerable well so

475
00:19:12,600 --> 00:19:14,880
looks like this

476
00:19:14,880 --> 00:19:17,760
and now we will get some findings now

477
00:19:17,760 --> 00:19:20,220
since this is for those of you who are

478
00:19:20,220 --> 00:19:21,840
not very familiar with electron one

479
00:19:21,840 --> 00:19:24,179
thing to mention here is that

480
00:19:24,179 --> 00:19:24,960
um

481
00:19:24,960 --> 00:19:26,700
electoral activity tells you what the

482
00:19:26,700 --> 00:19:29,400
vulnerability is here it tells you what

483
00:19:29,400 --> 00:19:33,299
file it is the location is like this is

484
00:19:33,299 --> 00:19:36,419
based on the results from line 7 to line

485
00:19:36,419 --> 00:19:39,840
21. and you have an issue description

486
00:19:39,840 --> 00:19:41,340
right so you can open this in your

487
00:19:41,340 --> 00:19:43,679
browser read more about the type of

488
00:19:43,679 --> 00:19:45,960
vulnerability and now you have like some

489
00:19:45,960 --> 00:19:48,539
findings right so you can get started

490
00:19:48,539 --> 00:19:49,980
with this right so this is these are

491
00:19:49,980 --> 00:19:52,260
like some Essentials so that you can get

492
00:19:52,260 --> 00:19:54,299
started and and find some cool stuff

493
00:19:54,299 --> 00:19:56,400
right so now with that out of the way

494
00:19:56,400 --> 00:19:58,559
let's make this more interesting and

495
00:19:58,559 --> 00:20:01,860
start hacking stuff right so what does

496
00:20:01,860 --> 00:20:04,200
exercise mean in a desktop application

497
00:20:04,200 --> 00:20:05,880
and how to turn exercise into code

498
00:20:05,880 --> 00:20:07,380
execution right which is what we want

499
00:20:07,380 --> 00:20:09,299
here so

500
00:20:09,299 --> 00:20:11,820
um for this exercise I'll be using again

501
00:20:11,820 --> 00:20:14,280
the vulnerable one application now the

502
00:20:14,280 --> 00:20:16,140
first time you install

503
00:20:16,140 --> 00:20:17,880
um an electron application this is just

504
00:20:17,880 --> 00:20:20,220
the code so what you need to do is you

505
00:20:20,220 --> 00:20:22,140
create some directory you see the into

506
00:20:22,140 --> 00:20:23,820
that directory where the application is

507
00:20:23,820 --> 00:20:26,039
and then you have to run npm install

508
00:20:26,039 --> 00:20:28,980
right so npm install will look at the

509
00:20:28,980 --> 00:20:31,020
source code it will look at the

510
00:20:31,020 --> 00:20:33,900
package.json and then it will say okay

511
00:20:33,900 --> 00:20:36,480
this is an electron application so I

512
00:20:36,480 --> 00:20:38,820
have to download node.js the correct

513
00:20:38,820 --> 00:20:40,559
version of electron for this application

514
00:20:40,559 --> 00:20:43,200
and so on so this will download all the

515
00:20:43,200 --> 00:20:45,720
dependencies for the application and

516
00:20:45,720 --> 00:20:47,280
only after this has been done then you

517
00:20:47,280 --> 00:20:49,320
can npm start and that will start the

518
00:20:49,320 --> 00:20:50,640
application right

519
00:20:50,640 --> 00:20:53,760
so once that's done now we can try some

520
00:20:53,760 --> 00:20:56,820
uh payloads so script alert one this

521
00:20:56,820 --> 00:21:00,299
video another one and so on and to debug

522
00:21:00,299 --> 00:21:02,880
a very cool trick to now in electron

523
00:21:02,880 --> 00:21:05,400
applications is you can do Ctrl shift I

524
00:21:05,400 --> 00:21:08,400
or if you have a Mac command shift I and

525
00:21:08,400 --> 00:21:10,200
this will open the developer tools the

526
00:21:10,200 --> 00:21:11,280
same way that you have the developer

527
00:21:11,280 --> 00:21:13,320
Tools in your browser so if you're

528
00:21:13,320 --> 00:21:15,260
wondering why your xss is not working

529
00:21:15,260 --> 00:21:19,260
you can troubleshoot uh using this right

530
00:21:19,260 --> 00:21:21,299
so when you try these things against the

531
00:21:21,299 --> 00:21:22,799
vulnerable application you will notice

532
00:21:22,799 --> 00:21:24,600
that they don't work

533
00:21:24,600 --> 00:21:27,179
and you will be like but what right this

534
00:21:27,179 --> 00:21:28,679
works against the web application well

535
00:21:28,679 --> 00:21:30,360
this is according to the RFC because

536
00:21:30,360 --> 00:21:32,700
since the page has already been rendered

537
00:21:32,700 --> 00:21:35,760
even though the injection is completely

538
00:21:35,760 --> 00:21:37,080
working right you can see the snow

539
00:21:37,080 --> 00:21:39,600
escaping anything here it's still being

540
00:21:39,600 --> 00:21:42,600
rendered as text right so well it's not

541
00:21:42,600 --> 00:21:44,159
rendered effects I mean you can see this

542
00:21:44,159 --> 00:21:45,419
that the injection is working but

543
00:21:45,419 --> 00:21:47,520
there's no other right so

544
00:21:47,520 --> 00:21:50,700
uh so then why is this happening so this

545
00:21:50,700 --> 00:21:52,620
is according to the RFC if the page has

546
00:21:52,620 --> 00:21:55,919
already been rendered uh script and SVG

547
00:21:55,919 --> 00:21:58,559
will not execute right but we can work

548
00:21:58,559 --> 00:22:00,360
around this by just using an image right

549
00:22:00,360 --> 00:22:02,360
because the image it has to render so

550
00:22:02,360 --> 00:22:05,159
the application will try to render the

551
00:22:05,159 --> 00:22:07,220
image and then you use the event handler

552
00:22:07,220 --> 00:22:09,539
on earlier one and now you have the

553
00:22:09,539 --> 00:22:12,000
alert one right so now we have xss but

554
00:22:12,000 --> 00:22:13,980
this is still test other one is not very

555
00:22:13,980 --> 00:22:15,419
scary right so let's take this to the

556
00:22:15,419 --> 00:22:18,840
next level now since uh the application

557
00:22:18,840 --> 00:22:22,559
has no integration enabled I told you

558
00:22:22,559 --> 00:22:24,840
any exercise is automatically called

559
00:22:24,840 --> 00:22:27,840
execution right and the reason for that

560
00:22:27,840 --> 00:22:30,000
is that node integration allows you to

561
00:22:30,000 --> 00:22:32,760
call node.js stuff and when you can call

562
00:22:32,760 --> 00:22:35,400
node.js stuff you can do require child

563
00:22:35,400 --> 00:22:38,940
process exact sync calculator or you

564
00:22:38,940 --> 00:22:41,039
know or LS you name

565
00:22:41,039 --> 00:22:42,720
or you can even put like multiple

566
00:22:42,720 --> 00:22:45,419
commands with semicolon here and a lot

567
00:22:45,419 --> 00:22:46,919
of stuff right so this is just one

568
00:22:46,919 --> 00:22:48,419
example to run commands which is

569
00:22:48,419 --> 00:22:51,120
normally uh you know what you use in in

570
00:22:51,120 --> 00:22:54,780
appendix report but you can also do

571
00:22:54,780 --> 00:22:57,620
require file system read Etsy password

572
00:22:57,620 --> 00:23:00,600
or require another node.js module that

573
00:23:00,600 --> 00:23:02,100
does something else and do something

574
00:23:02,100 --> 00:23:04,020
else right so this is just to run

575
00:23:04,020 --> 00:23:05,820
commands which is pretty cool but just

576
00:23:05,820 --> 00:23:08,340
to mention that you can really load any

577
00:23:08,340 --> 00:23:10,440
node.js module because this is what node

578
00:23:10,440 --> 00:23:12,419
integration is about like you are able

579
00:23:12,419 --> 00:23:16,620
to load node.js modules right so we've

580
00:23:16,620 --> 00:23:17,360
had

581
00:23:17,360 --> 00:23:19,860
now instead of having an alert one you

582
00:23:19,860 --> 00:23:21,659
have this which is which is a little bit

583
00:23:21,659 --> 00:23:23,159
cooler right like you can see like some

584
00:23:23,159 --> 00:23:25,440
action on blog and stuff right so

585
00:23:25,440 --> 00:23:27,840
now if you are a developer

586
00:23:27,840 --> 00:23:30,179
or you're a good pen tester putting good

587
00:23:30,179 --> 00:23:32,480
recommendations Inventus reports

588
00:23:32,480 --> 00:23:35,640
that developers can actually fix right

589
00:23:35,640 --> 00:23:37,500
uh

590
00:23:37,500 --> 00:23:39,360
one of the things like you you should

591
00:23:39,360 --> 00:23:41,820
view security as as an onion right so

592
00:23:41,820 --> 00:23:44,159
you want to add layers of security right

593
00:23:44,159 --> 00:23:47,400
so first a first layer of security would

594
00:23:47,400 --> 00:23:49,919
be to disable node integration right so

595
00:23:49,919 --> 00:23:53,100
you can go into the main.js disable mode

596
00:23:53,100 --> 00:23:55,260
integration so this will reduce the

597
00:23:55,260 --> 00:23:56,880
impact of the accesses you still have an

598
00:23:56,880 --> 00:23:58,919
excess which is bad but at least it will

599
00:23:58,919 --> 00:24:00,360
not be called execution immediately

600
00:24:00,360 --> 00:24:02,700
right so it's a little bit better

601
00:24:02,700 --> 00:24:05,280
so when you do that and then you try the

602
00:24:05,280 --> 00:24:08,100
image and you try the attack you will

603
00:24:08,100 --> 00:24:10,440
get here an error message require is not

604
00:24:10,440 --> 00:24:12,419
defined so if you get this error message

605
00:24:12,419 --> 00:24:14,700
it means no integration is disabled

606
00:24:14,700 --> 00:24:17,460
right now you cannot require any images

607
00:24:17,460 --> 00:24:19,380
module I want to do what I want right

608
00:24:19,380 --> 00:24:21,120
this this will not work anymore right so

609
00:24:21,120 --> 00:24:22,580
this is the first layer of Defense

610
00:24:22,580 --> 00:24:25,860
disable node integration now

611
00:24:25,860 --> 00:24:28,020
second layer of Defense you can also use

612
00:24:28,020 --> 00:24:30,240
CSP right now you are maybe more

613
00:24:30,240 --> 00:24:33,559
familiar about CSP on the web to

614
00:24:33,559 --> 00:24:36,480
prevent exercise vulnerabilities but you

615
00:24:36,480 --> 00:24:38,880
can also use CSP or mobile applications

616
00:24:38,880 --> 00:24:41,820
and desktop applications because CSP you

617
00:24:41,820 --> 00:24:43,919
can also configure through the HTML not

618
00:24:43,919 --> 00:24:46,320
just a header of the server right so if

619
00:24:46,320 --> 00:24:49,380
you try alert one you'll see you still

620
00:24:49,380 --> 00:24:51,960
have the alert one so we still have xss

621
00:24:51,960 --> 00:24:55,620
but you can go into the index HTML and

622
00:24:55,620 --> 00:24:57,179
instead of using a header as you

623
00:24:57,179 --> 00:25:00,360
normally would on a website you can also

624
00:25:00,360 --> 00:25:03,419
use like this HTML and now we have CSP

625
00:25:03,419 --> 00:25:07,200
now CSP is its own topic so you can all

626
00:25:07,200 --> 00:25:10,380
go very deep here but just to mention it

627
00:25:10,380 --> 00:25:12,120
helps you with this type of mitigation

628
00:25:12,120 --> 00:25:13,799
so if you try this again now you have to

629
00:25:13,799 --> 00:25:15,539
close the application Run npm start

630
00:25:15,539 --> 00:25:18,179
again now you will see this here this

631
00:25:18,179 --> 00:25:20,820
error message refuse to execute inline

632
00:25:20,820 --> 00:25:22,679
event handler because it violates the

633
00:25:22,679 --> 00:25:24,240
following content security directive

634
00:25:24,240 --> 00:25:26,220
blah blah right so now I'm going to and

635
00:25:26,220 --> 00:25:29,520
security policy is reducing or making

636
00:25:29,520 --> 00:25:31,799
the xss much more difficult to exploit

637
00:25:31,799 --> 00:25:33,419
right so this would be another layer of

638
00:25:33,419 --> 00:25:35,940
security now after this

639
00:25:35,940 --> 00:25:37,140
you should actually fix the

640
00:25:37,140 --> 00:25:38,760
vulnerability right so this will be the

641
00:25:38,760 --> 00:25:42,000
next layer is that the proper layer

642
00:25:42,000 --> 00:25:42,900
right

643
00:25:42,900 --> 00:25:45,600
but you do the other two things in case

644
00:25:45,600 --> 00:25:47,220
you forgot some exercise somewhere right

645
00:25:47,220 --> 00:25:49,940
so just to you know I'm not

646
00:25:49,940 --> 00:25:51,900
saying that you should only do the other

647
00:25:51,900 --> 00:25:53,400
things just the other things are good to

648
00:25:53,400 --> 00:25:56,400
do in case you forget some right but

649
00:25:56,400 --> 00:25:58,440
this is the proper fix right so fix the

650
00:25:58,440 --> 00:26:00,960
xss now the best way would be to avoid

651
00:26:00,960 --> 00:26:03,419
excess sinks so instead of using inner

652
00:26:03,419 --> 00:26:06,720
HTML use text content that fixes the xss

653
00:26:06,720 --> 00:26:09,000
so this will be a proper fix but what

654
00:26:09,000 --> 00:26:11,220
happens so if you try this now you will

655
00:26:11,220 --> 00:26:14,340
get like all the xss payload this is

656
00:26:14,340 --> 00:26:16,620
rendered as text and the escaping is

657
00:26:16,620 --> 00:26:19,500
correct so you know there's no accesses

658
00:26:19,500 --> 00:26:20,880
anymore right so this will be the proper

659
00:26:20,880 --> 00:26:24,000
fix but what happens if you have a rich

660
00:26:24,000 --> 00:26:27,299
text editor or some crazy requirement

661
00:26:27,299 --> 00:26:28,740
that you actually need to allow some

662
00:26:28,740 --> 00:26:32,340
HTML right in those cases you can use

663
00:26:32,340 --> 00:26:36,360
some library that will sanitize the HTML

664
00:26:36,360 --> 00:26:38,640
for you right so one example of that is

665
00:26:38,640 --> 00:26:42,299
the purify you can get it from GitHub

666
00:26:42,299 --> 00:26:45,539
and you can actually install it right so

667
00:26:45,539 --> 00:26:47,600
you you go to the vulnerable application

668
00:26:47,600 --> 00:26:50,820
npm installed on purify and here you

669
00:26:50,820 --> 00:26:53,100
will have a new dependency of the

670
00:26:53,100 --> 00:26:55,020
application the purify

671
00:26:55,020 --> 00:26:57,179
and then in the code you do the purifier

672
00:26:57,179 --> 00:26:59,580
required on purify and now you still

673
00:26:59,580 --> 00:27:02,640
assign to Inner HTML but you do don't

674
00:27:02,640 --> 00:27:04,679
purify sanitize of message right so this

675
00:27:04,679 --> 00:27:06,659
will remove anything that looks like

676
00:27:06,659 --> 00:27:07,919
you're trying to exercise the thing

677
00:27:07,919 --> 00:27:10,140
right so this is pretty cool you can

678
00:27:10,140 --> 00:27:13,740
also use this on a website if you have

679
00:27:13,740 --> 00:27:15,960
like any website that needs some HTML

680
00:27:15,960 --> 00:27:18,539
and even a better way to use them purify

681
00:27:18,539 --> 00:27:21,120
would be to pass the parameter where you

682
00:27:21,120 --> 00:27:23,880
only allow certain tags right so that

683
00:27:23,880 --> 00:27:25,919
will be even better than this but just

684
00:27:25,919 --> 00:27:27,480
for demonstration purposes this is

685
00:27:27,480 --> 00:27:30,000
enough and then when you try this

686
00:27:30,000 --> 00:27:32,760
you will see that okay the image is

687
00:27:32,760 --> 00:27:35,100
there and so on so you still have the

688
00:27:35,100 --> 00:27:36,900
injection but the owner alert one has

689
00:27:36,900 --> 00:27:39,900
been removed right so so this would be

690
00:27:39,900 --> 00:27:42,179
what to do in those cases right so with

691
00:27:42,179 --> 00:27:43,620
that

692
00:27:43,620 --> 00:27:45,600
um let's show

693
00:27:45,600 --> 00:27:49,500
this so you need first to run uh so I

694
00:27:49,500 --> 00:27:51,779
need to do npm start from the vulnerable

695
00:27:51,779 --> 00:27:54,179
one application

696
00:27:54,179 --> 00:27:56,400
uh

697
00:27:56,400 --> 00:27:58,039
so it's basically

698
00:27:58,039 --> 00:28:01,020
simulating a chat application when users

699
00:28:01,020 --> 00:28:03,120
can message each other but for

700
00:28:03,120 --> 00:28:04,919
demonstration purposes we just message

701
00:28:04,919 --> 00:28:06,960
him ourselves right which is a sad thing

702
00:28:06,960 --> 00:28:09,679
but uh

703
00:28:10,080 --> 00:28:13,740
but but you know uh just you know it's

704
00:28:13,740 --> 00:28:16,559
easier for us to debug this way right so

705
00:28:16,559 --> 00:28:20,880
okay so let me just go here uh

706
00:28:20,880 --> 00:28:23,220
uh so I'm just going to try all the

707
00:28:23,220 --> 00:28:25,980
payloads at once so that you don't uh

708
00:28:25,980 --> 00:28:29,520
suffer me uh mistyping here stuff

709
00:28:29,520 --> 00:28:32,520
and I'm just basically going to send all

710
00:28:32,520 --> 00:28:35,100
the messages so you can see here

711
00:28:35,100 --> 00:28:37,080
the output of the different payloads so

712
00:28:37,080 --> 00:28:39,059
this is the output of the ls command

713
00:28:39,059 --> 00:28:40,080
here

714
00:28:40,080 --> 00:28:42,480
right

715
00:28:42,480 --> 00:28:43,140
um

716
00:28:43,140 --> 00:28:45,779
this is the output of youname Dash a

717
00:28:45,779 --> 00:28:49,020
which is here right so you can see we

718
00:28:49,020 --> 00:28:51,240
can run any command we want with node

719
00:28:51,240 --> 00:28:53,279
integration now this one that is taking

720
00:28:53,279 --> 00:28:54,659
a little bit longer is the genome

721
00:28:54,659 --> 00:28:56,640
calculator I don't know you know if

722
00:28:56,640 --> 00:28:59,400
they're doing some Bitcoin mining there

723
00:28:59,400 --> 00:29:01,140
while they launch the calculator or what

724
00:29:01,140 --> 00:29:04,260
but it takes a little bit longer so uh

725
00:29:04,260 --> 00:29:06,179
but you saw you see that it showed up

726
00:29:06,179 --> 00:29:09,240
now since the genome calculator doesn't

727
00:29:09,240 --> 00:29:11,520
return anything now we get a blank alert

728
00:29:11,520 --> 00:29:14,400
also I forgot to mention earlier that

729
00:29:14,400 --> 00:29:16,500
you want to execute

730
00:29:16,500 --> 00:29:19,679
um functions synchronously in general

731
00:29:19,679 --> 00:29:21,720
against node.js applications and so on

732
00:29:21,720 --> 00:29:24,659
so that the command is executed it waits

733
00:29:24,659 --> 00:29:26,039
until it finishes and then it gives you

734
00:29:26,039 --> 00:29:27,899
the output because many times especially

735
00:29:27,899 --> 00:29:30,179
against node.js applications when you're

736
00:29:30,179 --> 00:29:32,640
testing a website if you don't use the

737
00:29:32,640 --> 00:29:35,220
synchronous function maybe your command

738
00:29:35,220 --> 00:29:36,779
execution is working but you are not

739
00:29:36,779 --> 00:29:39,419
actually getting the output right so you

740
00:29:39,419 --> 00:29:41,340
want to always shoot for the synchronous

741
00:29:41,340 --> 00:29:44,299
functions for that reason

742
00:29:44,299 --> 00:29:47,340
and this is the output of the IDE

743
00:29:47,340 --> 00:29:50,580
command which is here right so so yeah

744
00:29:50,580 --> 00:29:53,840
so that shows you uh that

745
00:29:53,840 --> 00:29:58,380
and yes okay and now we will talk about

746
00:29:58,380 --> 00:30:00,260
other cool stuff so now let's talk about

747
00:30:00,260 --> 00:30:03,419
attacking preload scripts right so what

748
00:30:03,419 --> 00:30:07,140
happens if you don't have

749
00:30:07,140 --> 00:30:10,559
uh not integration enabled right

750
00:30:10,559 --> 00:30:13,200
but there's no context isolation so for

751
00:30:13,200 --> 00:30:15,120
this we will be using the vulnerable 2

752
00:30:15,120 --> 00:30:17,460
application and this will be

753
00:30:17,460 --> 00:30:19,799
demonstrated against Windows right

754
00:30:19,799 --> 00:30:22,260
because Windows has some interesting

755
00:30:22,260 --> 00:30:23,700
property that I'll talk about in a

756
00:30:23,700 --> 00:30:24,419
second

757
00:30:24,419 --> 00:30:26,399
uh this will also be interesting for

758
00:30:26,399 --> 00:30:28,980
those of you doing red teaming and stuff

759
00:30:28,980 --> 00:30:31,580
so

760
00:30:32,880 --> 00:30:34,860
what is knowledge what is context

761
00:30:34,860 --> 00:30:36,720
isolation right so by default this is

762
00:30:36,720 --> 00:30:39,000
still the default of electron apps so by

763
00:30:39,000 --> 00:30:40,620
default everybody is like vulnerable to

764
00:30:40,620 --> 00:30:43,140
this type of attack I'm going to explain

765
00:30:43,140 --> 00:30:45,480
so by default you have a preload script

766
00:30:45,480 --> 00:30:48,059
which is a script that

767
00:30:48,059 --> 00:30:50,520
um electron applications normally use to

768
00:30:50,520 --> 00:30:52,919
do some initialization of stuff

769
00:30:52,919 --> 00:30:54,720
right and in here you can have some

770
00:30:54,720 --> 00:30:56,100
JavaScript that does things so for

771
00:30:56,100 --> 00:30:57,899
example you can do window ABC equals one

772
00:30:57,899 --> 00:31:00,720
two three and then the index HTML which

773
00:31:00,720 --> 00:31:03,720
is where your xss will normally run

774
00:31:03,720 --> 00:31:06,779
uh if you do other window IPC you can

775
00:31:06,779 --> 00:31:08,279
actually read this one two three this is

776
00:31:08,279 --> 00:31:10,140
because there's no isolation right so

777
00:31:10,140 --> 00:31:13,080
the security well security is not

778
00:31:13,080 --> 00:31:15,240
exactly the same but there's basically

779
00:31:15,240 --> 00:31:17,520
no isolation so this JavaScript here can

780
00:31:17,520 --> 00:31:19,440
read stuff from here and can basic can

781
00:31:19,440 --> 00:31:21,539
also even mess with electron right we

782
00:31:21,539 --> 00:31:24,360
talk about that more in the course but

783
00:31:24,360 --> 00:31:27,179
it's actually possible to mess with the

784
00:31:27,179 --> 00:31:29,159
inner workings of electron its own

785
00:31:29,159 --> 00:31:31,260
JavaScript code to get code execution

786
00:31:31,260 --> 00:31:34,260
even in those cases right now if context

787
00:31:34,260 --> 00:31:38,100
isolation is set to true then this

788
00:31:38,100 --> 00:31:40,320
JavaScript here and this JavaScript here

789
00:31:40,320 --> 00:31:42,360
are running into two different contexts

790
00:31:42,360 --> 00:31:45,299
so if you do windows alert window ABC

791
00:31:45,299 --> 00:31:47,640
here you will get that this is undefined

792
00:31:47,640 --> 00:31:49,860
right so so this is better for security

793
00:31:49,860 --> 00:31:54,240
and uh if you are managing electron

794
00:31:54,240 --> 00:31:55,860
applications in your environment you

795
00:31:55,860 --> 00:31:57,240
should talk to your developers so that

796
00:31:57,240 --> 00:31:58,559
they do this right because this will

797
00:31:58,559 --> 00:32:01,380
increase security a lot

798
00:32:01,380 --> 00:32:04,200
now what happens if context isolation is

799
00:32:04,200 --> 00:32:07,559
set to false you can mess with the

800
00:32:07,559 --> 00:32:09,840
electron application right so if the

801
00:32:09,840 --> 00:32:12,059
electron application has a check

802
00:32:12,059 --> 00:32:15,419
for using the index of function you can

803
00:32:15,419 --> 00:32:18,059
redefine the index of function so this

804
00:32:18,059 --> 00:32:20,640
is a type of prototype pollution against

805
00:32:20,640 --> 00:32:23,640
the desktop application so using xss you

806
00:32:23,640 --> 00:32:25,559
can redefine how the index of function

807
00:32:25,559 --> 00:32:27,960
Works in JavaScript so it always returns

808
00:32:27,960 --> 00:32:30,480
lead and then when the user clicks on

809
00:32:30,480 --> 00:32:33,120
this it will actually work right so this

810
00:32:33,120 --> 00:32:34,740
this will make more sense in the demo so

811
00:32:34,740 --> 00:32:36,059
I'll just show you in the demo actually

812
00:32:36,059 --> 00:32:39,000
let me start the VM because it will take

813
00:32:39,000 --> 00:32:41,600
a little bit

814
00:32:43,440 --> 00:32:48,899
I think this VM will know soon uh

815
00:32:48,899 --> 00:32:52,380
um okay so the way this works is the in

816
00:32:52,380 --> 00:32:55,740
the safe protocols so

817
00:32:55,740 --> 00:33:00,480
so when you open uh a link in electron

818
00:33:00,480 --> 00:33:04,260
um the link if the link is for example a

819
00:33:04,260 --> 00:33:07,020
file URL this would be dangerous to open

820
00:33:07,020 --> 00:33:09,720
an electron because especially in

821
00:33:09,720 --> 00:33:11,700
Windows there's this technique that you

822
00:33:11,700 --> 00:33:14,880
can provide a file URL from a network

823
00:33:14,880 --> 00:33:18,240
share and the file is has a Java

824
00:33:18,240 --> 00:33:20,700
extension right so this will give you

825
00:33:20,700 --> 00:33:22,919
code execution without warnings in

826
00:33:22,919 --> 00:33:26,399
Windows right so if you have like an exe

827
00:33:26,399 --> 00:33:28,380
file and the user gets a warning like

828
00:33:28,380 --> 00:33:31,740
hey do you really want to run this and

829
00:33:31,740 --> 00:33:33,299
so on this is not called decision this

830
00:33:33,299 --> 00:33:34,799
is social engineering right you are

831
00:33:34,799 --> 00:33:37,500
pulling the user to bypass you know to

832
00:33:37,500 --> 00:33:38,940
click through security awareness it will

833
00:33:38,940 --> 00:33:42,059
be the same as arguing that the SSL

834
00:33:42,059 --> 00:33:44,760
certificate is invalid but the user

835
00:33:44,760 --> 00:33:47,039
clicks through the awareness is not you

836
00:33:47,039 --> 00:33:49,080
know like the the browser is doing what

837
00:33:49,080 --> 00:33:50,580
it should which is showing the security

838
00:33:50,580 --> 00:33:52,320
wirings right and that will be like

839
00:33:52,320 --> 00:33:53,580
social engineering you're fooling the

840
00:33:53,580 --> 00:33:55,620
user to click through warnings now this

841
00:33:55,620 --> 00:33:58,799
is true code execution because the user

842
00:33:58,799 --> 00:34:00,419
will not get any warning right if the

843
00:34:00,419 --> 00:34:02,039
user clicks on the link it will be code

844
00:34:02,039 --> 00:34:03,600
execution without any awareness

845
00:34:03,600 --> 00:34:05,519
whatsoever so the only social engineer

846
00:34:05,519 --> 00:34:07,980
is just they click on the link right

847
00:34:07,980 --> 00:34:11,159
uh so this is true call execution and

848
00:34:11,159 --> 00:34:13,440
the cool thing to be aware about here is

849
00:34:13,440 --> 00:34:15,000
that in a real Attack this would be like

850
00:34:15,000 --> 00:34:17,760
attacker.com or something and in Windows

851
00:34:17,760 --> 00:34:20,580
if Windows sees that there's no network

852
00:34:20,580 --> 00:34:23,580
here it will fall back to webdaf

853
00:34:23,580 --> 00:34:26,219
right so you can have your attacker

854
00:34:26,219 --> 00:34:28,800
server which is a webdav server

855
00:34:28,800 --> 00:34:31,560
and it serves these Java files and it's

856
00:34:31,560 --> 00:34:33,960
open for anybody to open your Java files

857
00:34:33,960 --> 00:34:35,699
and then you can get this code execution

858
00:34:35,699 --> 00:34:37,739
right so this is an interesting thing to

859
00:34:37,739 --> 00:34:41,219
to be aware about so the application is

860
00:34:41,219 --> 00:34:42,899
actually doing this correctly it's

861
00:34:42,899 --> 00:34:44,940
defining the safe protocols and it's

862
00:34:44,940 --> 00:34:47,339
saying okay I'm going to open the link

863
00:34:47,339 --> 00:34:49,619
using shell open external so show open

864
00:34:49,619 --> 00:34:52,560
external is basically an electron way of

865
00:34:52,560 --> 00:34:54,960
saying this link open it in the

866
00:34:54,960 --> 00:34:57,960
operating system right so if this is a

867
00:34:57,960 --> 00:34:59,520
sync and this can result in security

868
00:34:59,520 --> 00:35:01,380
problems especially if it is a file URL

869
00:35:01,380 --> 00:35:05,700
like here but if the protocol is HTTP or

870
00:35:05,700 --> 00:35:07,260
https this is fine because this will be

871
00:35:07,260 --> 00:35:10,140
open in the browser right so what the

872
00:35:10,140 --> 00:35:12,720
application is trying to do is using the

873
00:35:12,720 --> 00:35:16,200
index of function and saying if the URL

874
00:35:16,200 --> 00:35:19,800
is HTTP or https then opening open it in

875
00:35:19,800 --> 00:35:21,300
the operating system because this is

876
00:35:21,300 --> 00:35:23,460
okay this is safe right so this is what

877
00:35:23,460 --> 00:35:24,960
the application that I'm going to show

878
00:35:24,960 --> 00:35:27,900
is trying to do and when you send a user

879
00:35:27,900 --> 00:35:31,920
a message like uh with a file URL it

880
00:35:31,920 --> 00:35:34,200
will say this link is unsafe which is

881
00:35:34,200 --> 00:35:38,520
this right it is unsafe so uh so yeah so

882
00:35:38,520 --> 00:35:40,740
let's try its demo and I think it will

883
00:35:40,740 --> 00:35:42,599
make more sense so

884
00:35:42,599 --> 00:35:44,940
uh all right

885
00:35:44,940 --> 00:35:47,400
can you see that yes

886
00:35:47,400 --> 00:35:49,859
readable yeah

887
00:35:49,859 --> 00:35:54,200
good so okay actually

888
00:35:54,540 --> 00:35:56,160
um

889
00:35:56,160 --> 00:35:58,879
oh

890
00:36:01,140 --> 00:36:02,520
oh okay

891
00:36:02,520 --> 00:36:06,440
so I have to actually npm install

892
00:36:13,800 --> 00:36:15,359
so yeah if you try to run any of the

893
00:36:15,359 --> 00:36:17,099
applications and you get some that error

894
00:36:17,099 --> 00:36:20,599
message think about npm install first

895
00:36:20,599 --> 00:36:22,619
right because you need you know to

896
00:36:22,619 --> 00:36:24,359
install the stuff if you just have the

897
00:36:24,359 --> 00:36:28,260
code it won't work now I can do npm

898
00:36:28,260 --> 00:36:29,460
start

899
00:36:29,460 --> 00:36:31,740
and now this will open

900
00:36:31,740 --> 00:36:34,140
um the vulnerable application

901
00:36:34,140 --> 00:36:36,480
all right so first

902
00:36:36,480 --> 00:36:40,140
uh I'll just appear this it's a little

903
00:36:40,140 --> 00:36:42,060
bit easier to understand

904
00:36:42,060 --> 00:36:44,700
and

905
00:36:44,700 --> 00:36:46,380
in here

906
00:36:46,380 --> 00:36:49,020
so let's try this first right

907
00:36:49,020 --> 00:36:51,780
so it makes more sense so one user sends

908
00:36:51,780 --> 00:36:53,940
to another this message hey look at this

909
00:36:53,940 --> 00:36:56,520
right so you know whatever you can be

910
00:36:56,520 --> 00:36:58,079
more creative like it's a cute card

911
00:36:58,079 --> 00:37:02,880
whatever right so you click that

912
00:37:02,880 --> 00:37:04,260
um

913
00:37:04,260 --> 00:37:06,920
and it should say

914
00:37:06,920 --> 00:37:10,260
wait a second

915
00:37:10,260 --> 00:37:11,940
now

916
00:37:11,940 --> 00:37:14,760
and just try this again

917
00:37:14,760 --> 00:37:19,040
this should say that the link is unsafe

918
00:37:29,640 --> 00:37:32,660
let me see

919
00:37:36,540 --> 00:37:38,579
now wait a second I think I'm on the

920
00:37:38,579 --> 00:37:39,740
wrong app

921
00:37:39,740 --> 00:37:42,540
uh yeah the problem of Life the mouse

922
00:37:42,540 --> 00:37:45,420
the chickens

923
00:37:45,420 --> 00:37:48,839
Okay so

924
00:37:49,560 --> 00:37:51,480
see The Honorable one or will never want

925
00:37:51,480 --> 00:37:53,599
to don't remember now

926
00:37:53,599 --> 00:37:57,680
uh npm's third

927
00:38:04,320 --> 00:38:07,280
so

928
00:38:07,380 --> 00:38:09,480
so you send the message you click the

929
00:38:09,480 --> 00:38:12,599
link yes okay so it's this one so now we

930
00:38:12,599 --> 00:38:14,520
are getting this error message this link

931
00:38:14,520 --> 00:38:17,460
is unsafe right because it is unsafe it

932
00:38:17,460 --> 00:38:19,020
shouldn't be opened in Windows because

933
00:38:19,020 --> 00:38:22,140
it will be called execution right so

934
00:38:22,140 --> 00:38:24,300
uh the application is doing this

935
00:38:24,300 --> 00:38:27,060
correctly but how how is this working

936
00:38:27,060 --> 00:38:29,940
right so if we go to the code you can

937
00:38:29,940 --> 00:38:32,220
see that the same protocols array

938
00:38:32,220 --> 00:38:35,099
and then there's this index of uh check

939
00:38:35,099 --> 00:38:38,820
right so let's break it down so if I go

940
00:38:38,820 --> 00:38:40,619
and I

941
00:38:40,619 --> 00:38:43,740
replicate the application logic so I go

942
00:38:43,740 --> 00:38:46,500
in here and I do save protocols right

943
00:38:46,500 --> 00:38:48,540
I'm defining it the same way and now you

944
00:38:48,540 --> 00:38:51,780
do same Protocols of

945
00:38:51,780 --> 00:38:55,079
index of HTTP you can see this would

946
00:38:55,079 --> 00:38:57,480
return zero because it is position zero

947
00:38:57,480 --> 00:39:01,260
of the array if I put https now we get

948
00:39:01,260 --> 00:39:04,260
position one of the array and if I put

949
00:39:04,260 --> 00:39:07,740
here anything else like file now we get

950
00:39:07,740 --> 00:39:10,200
minus one right so this is what we are

951
00:39:10,200 --> 00:39:11,760
going to attack that because there's no

952
00:39:11,760 --> 00:39:14,280
context isolation we can mess with this

953
00:39:14,280 --> 00:39:17,940
right so we can send a message like

954
00:39:17,940 --> 00:39:21,780
hey look at this right but now we send

955
00:39:21,780 --> 00:39:23,760
the access as well

956
00:39:23,760 --> 00:39:26,940
and now the exercise is redefining the

957
00:39:26,940 --> 00:39:28,740
indexer function to work in a different

958
00:39:28,740 --> 00:39:30,720
way so now we can bypass the logic of

959
00:39:30,720 --> 00:39:32,940
the application because index of will

960
00:39:32,940 --> 00:39:35,700
always be lit now what happens with this

961
00:39:35,700 --> 00:39:37,859
is now before

962
00:39:37,859 --> 00:39:40,200
uh well now you can already see it here

963
00:39:40,200 --> 00:39:43,020
before this would be -1 and now it's lit

964
00:39:43,020 --> 00:39:45,000
right if you do need if you do it with

965
00:39:45,000 --> 00:39:46,920
http

966
00:39:46,920 --> 00:39:49,260
or https it will always be lead right

967
00:39:49,260 --> 00:39:52,320
because DPS is always literal now if I

968
00:39:52,320 --> 00:39:55,079
click on this instead of getting

969
00:39:55,079 --> 00:39:57,359
um this leak is unsafe we are getting

970
00:39:57,359 --> 00:40:00,000
the Java file executed so now we have

971
00:40:00,000 --> 00:40:01,680
code execution without warnings on

972
00:40:01,680 --> 00:40:04,380
Windows right so this is a pretty cool

973
00:40:04,380 --> 00:40:06,660
attack Vector to know about and this is

974
00:40:06,660 --> 00:40:09,900
what uh I've just demonstrated Now with

975
00:40:09,900 --> 00:40:12,240
uh attack in the previous script by

976
00:40:12,240 --> 00:40:15,300
redefining functionality on the pre on

977
00:40:15,300 --> 00:40:17,040
the previous script right so this

978
00:40:17,040 --> 00:40:19,140
preload script is actually not exposed

979
00:40:19,140 --> 00:40:20,579
to the user this is something that the

980
00:40:20,579 --> 00:40:22,500
lecture runs before

981
00:40:22,500 --> 00:40:25,619
uh this is launched but we can mess with

982
00:40:25,619 --> 00:40:27,960
any JavaScript in here because there's

983
00:40:27,960 --> 00:40:30,599
no context-station right so if I go to

984
00:40:30,599 --> 00:40:32,520
the main.js here

985
00:40:32,520 --> 00:40:36,660
uh you can see this is the pearl.js but

986
00:40:36,660 --> 00:40:40,560
here we have context isolation set to

987
00:40:40,560 --> 00:40:42,599
false right so this is what I have just

988
00:40:42,599 --> 00:40:44,280
attacked here

989
00:40:44,280 --> 00:40:47,579
we have five minutes is it yeah

990
00:40:47,579 --> 00:40:48,960
okay

991
00:40:48,960 --> 00:40:51,599
so okay so with this out of the way

992
00:40:51,599 --> 00:40:53,880
let's talk about the last scenario which

993
00:40:53,880 --> 00:40:56,640
is code execution through inter-process

994
00:40:56,640 --> 00:40:58,500
communication right so I told you before

995
00:40:58,500 --> 00:41:01,320
the main process is more privileged and

996
00:41:01,320 --> 00:41:03,599
sometimes you can get good execution in

997
00:41:03,599 --> 00:41:04,859
the main process right so for this

998
00:41:04,859 --> 00:41:07,320
attack to work we need two requirements

999
00:41:07,320 --> 00:41:09,900
right so the first requirement is that

1000
00:41:09,900 --> 00:41:12,660
the main process has some IPC listener

1001
00:41:12,660 --> 00:41:14,579
that is doing something dangerous right

1002
00:41:14,579 --> 00:41:16,859
so in this case it's waiting for an

1003
00:41:16,859 --> 00:41:18,599
event called get update so you can see

1004
00:41:18,599 --> 00:41:20,520
where this is going right so it's

1005
00:41:20,520 --> 00:41:23,339
getting it's looking for an event about

1006
00:41:23,339 --> 00:41:25,680
retrieving an update and it expects a

1007
00:41:25,680 --> 00:41:28,560
URL to get the update from and then the

1008
00:41:28,560 --> 00:41:32,579
renderer process has to expose these IPC

1009
00:41:32,579 --> 00:41:35,300
stupidly like for example

1010
00:41:35,300 --> 00:41:37,500
defining some function like window

1011
00:41:37,500 --> 00:41:39,720
electron send to send anything to

1012
00:41:39,720 --> 00:41:42,480
electron right and then you can this is

1013
00:41:42,480 --> 00:41:44,700
basically a wrapper function to call an

1014
00:41:44,700 --> 00:41:46,440
API that would normally not be available

1015
00:41:46,440 --> 00:41:48,839
from exercise called IPC renders and

1016
00:41:48,839 --> 00:41:51,420
right so this would be on the previous

1017
00:41:51,420 --> 00:41:53,300
script right

1018
00:41:53,300 --> 00:41:56,040
but because the preload script does this

1019
00:41:56,040 --> 00:41:58,680
now with any xss we can electron send

1020
00:41:58,680 --> 00:42:00,180
and send stuff

1021
00:42:00,180 --> 00:42:02,760
to the main process and now we can say

1022
00:42:02,760 --> 00:42:04,859
hey there's this update this is the URL

1023
00:42:04,859 --> 00:42:07,140
and then you get code execution right so

1024
00:42:07,140 --> 00:42:08,579
that is basically what we're going to do

1025
00:42:08,579 --> 00:42:09,359
here

1026
00:42:09,359 --> 00:42:11,880
so this uh Linux reverse shell

1027
00:42:11,880 --> 00:42:14,520
so you basically send the user a link

1028
00:42:14,520 --> 00:42:18,599
like this now this link has some uh

1029
00:42:18,599 --> 00:42:21,960
basic like JavaScript here just a script

1030
00:42:21,960 --> 00:42:24,300
tag and then you just do electrons and

1031
00:42:24,300 --> 00:42:26,880
get update this uh you know reversal

1032
00:42:26,880 --> 00:42:29,579
bash script and then the application

1033
00:42:29,579 --> 00:42:31,079
will download this it will give it

1034
00:42:31,079 --> 00:42:32,940
executable permission will run it and

1035
00:42:32,940 --> 00:42:35,880
now you have your reversion right so uh

1036
00:42:35,880 --> 00:42:38,220
so yeah so other possibilities could be

1037
00:42:38,220 --> 00:42:41,460
electron opening browser or open URL

1038
00:42:41,460 --> 00:42:42,900
something like that and now this is

1039
00:42:42,900 --> 00:42:45,119
doing shell open external so here you

1040
00:42:45,119 --> 00:42:47,460
could do with an xss you could do

1041
00:42:47,460 --> 00:42:50,220
electron opening browser file URL you

1042
00:42:50,220 --> 00:42:53,160
know and now you have like code

1043
00:42:53,160 --> 00:42:55,619
execution without warnings on Windows

1044
00:42:55,619 --> 00:42:57,780
right or electron listen electron sensor

1045
00:42:57,780 --> 00:43:00,540
there's different ways that they could

1046
00:43:00,540 --> 00:43:04,440
do this so I'll just show you here how

1047
00:43:04,440 --> 00:43:06,240
this attack works

1048
00:43:06,240 --> 00:43:09,960
so basically first does this get update

1049
00:43:09,960 --> 00:43:10,819
event

1050
00:43:10,819 --> 00:43:13,619
then this triggers now in JavaScript

1051
00:43:13,619 --> 00:43:17,520
everything is event based so so you have

1052
00:43:17,520 --> 00:43:19,500
an event for wheel download right and

1053
00:43:19,500 --> 00:43:22,380
then there's like some code here and

1054
00:43:22,380 --> 00:43:25,079
then there's like the application saves

1055
00:43:25,079 --> 00:43:26,880
the downloaded path

1056
00:43:26,880 --> 00:43:30,480
and then once it is like updated and you

1057
00:43:30,480 --> 00:43:33,119
know the situations are accurate so at

1058
00:43:33,119 --> 00:43:34,740
the end there's like one event here for

1059
00:43:34,740 --> 00:43:36,960
State completed right and then when it

1060
00:43:36,960 --> 00:43:38,760
is complete it will give it executable

1061
00:43:38,760 --> 00:43:41,339
permissions and then it will run the

1062
00:43:41,339 --> 00:43:44,160
update right and then the update instead

1063
00:43:44,160 --> 00:43:45,960
of being an update is just basically

1064
00:43:45,960 --> 00:43:49,260
your reverse shell right so uh so yeah

1065
00:43:49,260 --> 00:43:51,720
so and this is like attack vector and

1066
00:43:51,720 --> 00:43:53,520
this is basically the code of the

1067
00:43:53,520 --> 00:43:56,280
reversal it's just creating an input

1068
00:43:56,280 --> 00:43:58,740
output file on TMP and then just

1069
00:43:58,740 --> 00:44:00,839
redirecting the shell which is an

1070
00:44:00,839 --> 00:44:03,660
interactive shell you want to redirect a

1071
00:44:03,660 --> 00:44:06,900
standard error output to standard uh

1072
00:44:06,900 --> 00:44:08,700
output so that you can see the error

1073
00:44:08,700 --> 00:44:10,980
messages and then you pipe these to the

1074
00:44:10,980 --> 00:44:13,020
non-hacker version of netcat that most

1075
00:44:13,020 --> 00:44:16,040
servers will have this would be

1076
00:44:16,040 --> 00:44:17,940
attacker.com because in the hacker

1077
00:44:17,940 --> 00:44:19,260
version of netcat you could just do

1078
00:44:19,260 --> 00:44:22,560
execute bash for example right but here

1079
00:44:22,560 --> 00:44:24,540
this would be like you know the the

1080
00:44:24,540 --> 00:44:27,060
non-hacker version of netcat and then

1081
00:44:27,060 --> 00:44:29,640
you just redirect this to to the same

1082
00:44:29,640 --> 00:44:31,920
file so this is one of the many results

1083
00:44:31,920 --> 00:44:33,599
that you will get in Google if you

1084
00:44:33,599 --> 00:44:36,839
search for Linux reversial one-liners so

1085
00:44:36,839 --> 00:44:38,640
these are a very popular one because it

1086
00:44:38,640 --> 00:44:41,640
doesn't require any special tools uh on

1087
00:44:41,640 --> 00:44:43,800
the server or in this case the victim

1088
00:44:43,800 --> 00:44:44,640
computer

1089
00:44:44,640 --> 00:44:46,920
and then in some terminal you will get

1090
00:44:46,920 --> 00:44:49,380
the the shell back and that's it and

1091
00:44:49,380 --> 00:44:50,640
this is how the attack would work you

1092
00:44:50,640 --> 00:44:52,560
basically it's a message the user you

1093
00:44:52,560 --> 00:44:55,859
click on this uh and and that's it right

1094
00:44:55,859 --> 00:44:57,780
so in the terminal you will see

1095
00:44:57,780 --> 00:45:00,540
something like this get update this is

1096
00:45:00,540 --> 00:45:02,460
download path of the downloads of the

1097
00:45:02,460 --> 00:45:04,920
user download successful running update

1098
00:45:04,920 --> 00:45:06,720
and then on the other terminal you get

1099
00:45:06,720 --> 00:45:10,260
the shell uh and then the password and

1100
00:45:10,260 --> 00:45:14,040
so on and I think the demo uh in the VM

1101
00:45:14,040 --> 00:45:16,160
I have here has a problem so

1102
00:45:16,160 --> 00:45:20,099
I will not risk it and in here you

1103
00:45:20,099 --> 00:45:21,960
basically can get all the slides the

1104
00:45:21,960 --> 00:45:23,400
vulnerable applications I've shown here

1105
00:45:23,400 --> 00:45:24,839
and everything here on service secure

1106
00:45:24,839 --> 00:45:27,300
comes last free and that's it and if you

1107
00:45:27,300 --> 00:45:30,180
want to get in touch you can do it that

1108
00:45:30,180 --> 00:45:33,480
way and if anybody has any questions

1109
00:45:33,480 --> 00:45:36,619
any any questions

1110
00:45:37,020 --> 00:45:39,420
all right thank you so much Abraham

1111
00:45:39,420 --> 00:45:42,440
thank you

