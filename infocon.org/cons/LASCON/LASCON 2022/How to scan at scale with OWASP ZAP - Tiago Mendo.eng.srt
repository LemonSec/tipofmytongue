1
00:00:06,899 --> 00:00:09,080
foreign

2
00:00:17,730 --> 00:00:20,850
[Music]

3
00:00:30,430 --> 00:00:33,489
[Music]

4
00:00:37,280 --> 00:00:45,520
[Music]

5
00:00:51,100 --> 00:00:54,739
[Music]

6
00:00:54,739 --> 00:00:59,100
hi so thank you for welcoming me here

7
00:00:59,100 --> 00:01:01,680
it's a pleasure for me to be a at this

8
00:01:01,680 --> 00:01:03,660
conference it's my only second

9
00:01:03,660 --> 00:01:06,960
conference International Conference and

10
00:01:06,960 --> 00:01:10,020
by far the most high profile one so no

11
00:01:10,020 --> 00:01:12,360
pressure on my side I'm also a bird guy

12
00:01:12,360 --> 00:01:16,860
as I said as you said but nowadays I'm

13
00:01:16,860 --> 00:01:19,159
more into that but we'll talk about it

14
00:01:19,159 --> 00:01:21,360
and if you have questions at the end

15
00:01:21,360 --> 00:01:23,400
I'll leave time for that

16
00:01:23,400 --> 00:01:27,360
so my background and who am I I started

17
00:01:27,360 --> 00:01:29,880
uh a long time ago as a security

18
00:01:29,880 --> 00:01:31,799
engineer at the largest Telco in

19
00:01:31,799 --> 00:01:34,500
Portugal at that time I was

20
00:01:34,500 --> 00:01:36,960
nothing close to a web guy I spent the

21
00:01:36,960 --> 00:01:39,600
whole day doing TCP damps and reading

22
00:01:39,600 --> 00:01:42,000
the Stevens TCP IP Illustrated back to

23
00:01:42,000 --> 00:01:45,979
Ford and reversing Network protocols

24
00:01:45,979 --> 00:01:49,320
then I lived Masters here in the states

25
00:01:49,320 --> 00:01:51,899
I'm from wisman Portugal so a little far

26
00:01:51,899 --> 00:01:53,399
away from here

27
00:01:53,399 --> 00:01:55,560
and in 2010

28
00:01:55,560 --> 00:01:58,619
together uh with the NoNo which is here

29
00:01:58,619 --> 00:02:03,420
also we built the web security team of

30
00:02:03,420 --> 00:02:05,340
Portugal telecom so they had no security

31
00:02:05,340 --> 00:02:08,459
team at that time for the web uh they

32
00:02:08,459 --> 00:02:10,860
they had a web division like like Yahoo

33
00:02:10,860 --> 00:02:13,520
in the golden days with all those web

34
00:02:13,520 --> 00:02:16,739
products and it was nice starting a web

35
00:02:16,739 --> 00:02:18,300
application security team with two

36
00:02:18,300 --> 00:02:20,760
people from scratch until I don't know

37
00:02:20,760 --> 00:02:23,580
more than 10 people and in front of us

38
00:02:23,580 --> 00:02:26,400
we had like 150 developers so it was a

39
00:02:26,400 --> 00:02:27,120
challenge

40
00:02:27,120 --> 00:02:30,480
I also um was a pen tester with that

41
00:02:30,480 --> 00:02:32,819
Cobalt like a pen testing as a service

42
00:02:32,819 --> 00:02:36,599
company you might know but my current

43
00:02:36,599 --> 00:02:39,900
positions right now I'm a co-founder and

44
00:02:39,900 --> 00:02:42,420
the CTO at Broadway so together with

45
00:02:42,420 --> 00:02:44,180
these cool guys

46
00:02:44,180 --> 00:02:46,860
we just got our funding our series a

47
00:02:46,860 --> 00:02:50,879
funding so uh it's it's going great and

48
00:02:50,879 --> 00:02:53,400
full disclosure probably is a dust

49
00:02:53,400 --> 00:02:56,220
scanner a sales so it's a cloud-based

50
00:02:56,220 --> 00:02:58,920
web application Scanner so and the the

51
00:02:58,920 --> 00:03:02,640
work uh this talk will be based a lot on

52
00:03:02,640 --> 00:03:05,340
the work that we need under underneath

53
00:03:05,340 --> 00:03:09,300
the hood so we could scan at at Scott

54
00:03:09,300 --> 00:03:12,659
I'm also since maybe two months ago

55
00:03:12,659 --> 00:03:14,879
maybe something like that or three a

56
00:03:14,879 --> 00:03:17,280
code chapter uh co-leader of the Lisbon

57
00:03:17,280 --> 00:03:20,700
chapter of a wasp this has been a long

58
00:03:20,700 --> 00:03:23,099
time dream of me and the other coveters

59
00:03:23,099 --> 00:03:25,379
but we only managed to put it in

60
00:03:25,379 --> 00:03:28,680
practice recently and we are having our

61
00:03:28,680 --> 00:03:30,200
first meet up

62
00:03:30,200 --> 00:03:33,120
in less than a month in Lisbon and it's

63
00:03:33,120 --> 00:03:35,340
right before besides wisdom so it's an

64
00:03:35,340 --> 00:03:37,819
awesome excuse for a three-day security

65
00:03:37,819 --> 00:03:41,760
event in wisman so go ahead please

66
00:03:41,760 --> 00:03:43,680
um and this is also for me it's a dream

67
00:03:43,680 --> 00:03:45,900
to uh

68
00:03:45,900 --> 00:03:49,319
to be part of a wasp now more actively

69
00:03:49,319 --> 00:03:53,400
uh because I I would say my goal would

70
00:03:53,400 --> 00:03:56,519
be and this it stopped working as usual

71
00:03:56,519 --> 00:03:59,040
would be to have events as big as this

72
00:03:59,040 --> 00:04:01,739
this was my first like physical contact

73
00:04:01,739 --> 00:04:04,500
with the WASP the WASP Summit in 2011 in

74
00:04:04,500 --> 00:04:07,319
Lisbon this was amazing I at that time I

75
00:04:07,319 --> 00:04:09,299
remember having to find an excuse to go

76
00:04:09,299 --> 00:04:14,420
to the event uh and the excuse we uh

77
00:04:14,420 --> 00:04:17,519
we came up was to convince our employer

78
00:04:17,519 --> 00:04:20,100
to record and stream the event so we can

79
00:04:20,100 --> 00:04:22,740
get an excuse for a wasp towards it so

80
00:04:22,740 --> 00:04:24,720
we sponsored the streaming of the event

81
00:04:24,720 --> 00:04:27,360
and this was great uh we saw the birth

82
00:04:27,360 --> 00:04:30,840
of the security mobile initiative and uh

83
00:04:30,840 --> 00:04:33,720
it was amazing to see all the browser uh

84
00:04:33,720 --> 00:04:36,360
the browser heads of security sitting

85
00:04:36,360 --> 00:04:39,380
together to discuss and come up as to

86
00:04:39,380 --> 00:04:42,120
agreements in how to do stuff so awesome

87
00:04:42,120 --> 00:04:45,900
event hope it happens again uh it would

88
00:04:45,900 --> 00:04:49,139
be awesome that also though was the WASP

89
00:04:49,139 --> 00:04:51,960
summative sub into 2017 it was great

90
00:04:51,960 --> 00:04:54,600
also an amazing event

91
00:04:54,600 --> 00:04:58,259
so objectives for this talk

92
00:04:58,259 --> 00:05:00,840
the main objective is to share our

93
00:05:00,840 --> 00:05:03,540
scanning experience so uh I've been

94
00:05:03,540 --> 00:05:05,699
scanning web applications

95
00:05:05,699 --> 00:05:09,600
uh first as a pen tester maybe for I

96
00:05:09,600 --> 00:05:12,600
don't know 12 or 13 years but in the

97
00:05:12,600 --> 00:05:14,880
last five six years uh doing more

98
00:05:14,880 --> 00:05:16,860
automated scanning at scale scaling

99
00:05:16,860 --> 00:05:18,199
scanning

100
00:05:18,199 --> 00:05:21,479
a lot of websites so I also want to give

101
00:05:21,479 --> 00:05:24,600
some insights how to use zap to scan

102
00:05:24,600 --> 00:05:27,539
more and better

103
00:05:27,539 --> 00:05:30,919
and of course this talk

104
00:05:30,919 --> 00:05:35,880
is maybe a starting point for uh for you

105
00:05:35,880 --> 00:05:37,740
to be able to automate and scan at large

106
00:05:37,740 --> 00:05:40,139
because there's a lot of talks in the

107
00:05:40,139 --> 00:05:42,840
days before yesterday uh that talked

108
00:05:42,840 --> 00:05:45,120
about Automation and scan more uh

109
00:05:45,120 --> 00:05:46,919
because we have we have white blind

110
00:05:46,919 --> 00:05:49,139
spots applications that we don't scan so

111
00:05:49,139 --> 00:05:50,820
I think we all agree that we need to

112
00:05:50,820 --> 00:05:52,860
scan more in an automated fashion so

113
00:05:52,860 --> 00:05:56,759
hint cicd devsecops constantly scanning

114
00:05:56,759 --> 00:05:59,699
everything so I'll try to uh give some

115
00:05:59,699 --> 00:06:03,660
insights on how this can be implemented

116
00:06:03,660 --> 00:06:06,660
so just also for you to Define what it

117
00:06:06,660 --> 00:06:09,740
means at scale at least in the contents

118
00:06:09,740 --> 00:06:13,160
considering my experience uh it's about

119
00:06:13,160 --> 00:06:16,860
150 scans started per day some some of

120
00:06:16,860 --> 00:06:19,800
them takes me take minutes as others

121
00:06:19,800 --> 00:06:23,759
take days but uh scanning 150 scans

122
00:06:23,759 --> 00:06:27,960
starting 150 scans in a single way it's

123
00:06:27,960 --> 00:06:31,259
a lot it depends depends on the contest

124
00:06:31,259 --> 00:06:33,900
on the context but it's a lot

125
00:06:33,900 --> 00:06:35,880
it's much more than anyone can do

126
00:06:35,880 --> 00:06:37,740
manually

127
00:06:37,740 --> 00:06:39,740
wire wasps up

128
00:06:39,740 --> 00:06:42,440
so I'm a burp guy

129
00:06:42,440 --> 00:06:45,780
I use bird as a tool like the repeater

130
00:06:45,780 --> 00:06:49,680
the proxy I started also doing pen test

131
00:06:49,680 --> 00:06:51,500
with the scanner

132
00:06:51,500 --> 00:06:54,860
but burp has some issues

133
00:06:54,860 --> 00:06:58,020
ends up as

134
00:06:58,020 --> 00:07:00,120
doesn't have those issues so first of

135
00:07:00,120 --> 00:07:03,740
all it's open source so everyone can

136
00:07:03,740 --> 00:07:06,840
see how it works to the its fine details

137
00:07:06,840 --> 00:07:09,720
it also gives us a lot of flexibility

138
00:07:09,720 --> 00:07:11,940
uh and the flexibility for me comes from

139
00:07:11,940 --> 00:07:13,500
being open source

140
00:07:13,500 --> 00:07:17,100
it's it's good it has uh the quality of

141
00:07:17,100 --> 00:07:18,900
the results are good there are of course

142
00:07:18,900 --> 00:07:21,000
some issues I'll mentioned some of them

143
00:07:21,000 --> 00:07:23,580
but in the end they are good it's well

144
00:07:23,580 --> 00:07:25,680
maintained it's well maintained at a

145
00:07:25,680 --> 00:07:27,900
point that I had to update this slide

146
00:07:27,900 --> 00:07:29,520
yesterday because

147
00:07:29,520 --> 00:07:33,680
they just released oh my God

148
00:07:34,800 --> 00:07:37,860
I'm going to refrain from using the

149
00:07:37,860 --> 00:07:39,120
remote

150
00:07:39,120 --> 00:07:43,440
yeah I'll admit so zap released the new

151
00:07:43,440 --> 00:07:45,660
version a few hours ago maybe 16 hours

152
00:07:45,660 --> 00:07:47,580
ago so this is great it's Valentine

153
00:07:47,580 --> 00:07:50,039
there's a team behind it with uh Simon

154
00:07:50,039 --> 00:07:52,919
Bennett and we also choose that because

155
00:07:52,919 --> 00:07:54,479
there's a lot of internal know-how

156
00:07:54,479 --> 00:07:56,759
actually one of the

157
00:07:56,759 --> 00:08:02,039
uh developers of Zap works with us so we

158
00:08:02,039 --> 00:08:03,900
contribute to zap and we contribute to

159
00:08:03,900 --> 00:08:08,099
zap so it made sense to to use that so

160
00:08:08,099 --> 00:08:10,380
how do we use that so how do we scan

161
00:08:10,380 --> 00:08:13,380
that scale with that and this

162
00:08:13,380 --> 00:08:15,900
is a little bit of context on how we use

163
00:08:15,900 --> 00:08:19,259
zap in our uh in our uh in the pro-week

164
00:08:19,259 --> 00:08:20,940
context

165
00:08:20,940 --> 00:08:24,060
so first of all we use our own crawler

166
00:08:24,060 --> 00:08:26,819
we don't use zap scroller we'll get to

167
00:08:26,819 --> 00:08:29,639
that in in a few slides so the talk will

168
00:08:29,639 --> 00:08:31,319
be more focused about the scanning part

169
00:08:31,319 --> 00:08:35,458
itself so I know scanning uh has two big

170
00:08:35,458 --> 00:08:38,159
Parts crawling and scanning so and you

171
00:08:38,159 --> 00:08:40,440
cannot crawl and you cannot scan what

172
00:08:40,440 --> 00:08:42,360
you don't see so your crawler needs to

173
00:08:42,360 --> 00:08:45,720
be good uh but that's that could be a a

174
00:08:45,720 --> 00:08:49,200
whole other uh talk so we already had

175
00:08:49,200 --> 00:08:50,279
our spider

176
00:08:50,279 --> 00:08:52,380
we are happy with it

177
00:08:52,380 --> 00:08:54,240
um and it supports weird stuff like

178
00:08:54,240 --> 00:08:57,660
Shadow Dom and uh similar similarity

179
00:08:57,660 --> 00:09:00,540
detection and the duplicate duplication

180
00:09:00,540 --> 00:09:04,860
so we decided okay let's not use zap uh

181
00:09:04,860 --> 00:09:08,160
crawler so it was the conscious decision

182
00:09:08,160 --> 00:09:10,980
um just for you also to have an idea uh

183
00:09:10,980 --> 00:09:14,279
so most scanners or all the scanners

184
00:09:14,279 --> 00:09:18,060
will report all the pages they find like

185
00:09:18,060 --> 00:09:20,120
even if the pages are basically the same

186
00:09:20,120 --> 00:09:22,320
and this is something that really

187
00:09:22,320 --> 00:09:25,320
doesn't scale if you want to scan a lot

188
00:09:25,320 --> 00:09:27,060
of web applications because you know

189
00:09:27,060 --> 00:09:29,459
from experience that with a very high

190
00:09:29,459 --> 00:09:32,399
probability this will be the same just

191
00:09:32,399 --> 00:09:34,920
content changing so

192
00:09:34,920 --> 00:09:37,380
um basically just let's skip it let's

193
00:09:37,380 --> 00:09:41,160
just scan one of those instances and and

194
00:09:41,160 --> 00:09:43,019
the same can be applied for the other

195
00:09:43,019 --> 00:09:45,839
urls so that's

196
00:09:45,839 --> 00:09:47,820
um something that you might consider

197
00:09:47,820 --> 00:09:49,560
when you are scanning a lot of web

198
00:09:49,560 --> 00:09:51,180
applications that is that you need to

199
00:09:51,180 --> 00:09:52,980
figure out a way to

200
00:09:52,980 --> 00:09:55,320
scan as less as possible so you can scan

201
00:09:55,320 --> 00:09:58,320
as much as possible so uh but as I said

202
00:09:58,320 --> 00:10:00,480
that's a whole other talk

203
00:10:00,480 --> 00:10:03,720
so uh in short we use zap only for

204
00:10:03,720 --> 00:10:05,700
scanning only the scanning part

205
00:10:05,700 --> 00:10:09,600
so it means we had to change this up to

206
00:10:09,600 --> 00:10:12,180
work with an external crawler by Design

207
00:10:12,180 --> 00:10:15,560
what zap works it's internal crawler so

208
00:10:15,560 --> 00:10:18,839
we need to receive HTTP requests from a

209
00:10:18,839 --> 00:10:22,519
third-party crawler a valid session

210
00:10:22,519 --> 00:10:24,779
metadata about the request this is the

211
00:10:24,779 --> 00:10:26,459
JavaScript request is this a login

212
00:10:26,459 --> 00:10:29,160
request is this a log out request all

213
00:10:29,160 --> 00:10:31,500
these details can help you uh if you

214
00:10:31,500 --> 00:10:34,019
have those those pieces of information

215
00:10:34,019 --> 00:10:36,360
can help you make decisions further

216
00:10:36,360 --> 00:10:37,740
ahead

217
00:10:37,740 --> 00:10:40,980
so our scanner zap hours up scans

218
00:10:40,980 --> 00:10:43,620
everything it receives it's with that

219
00:10:43,620 --> 00:10:45,420
regard it's stupid everything will ask

220
00:10:45,420 --> 00:10:47,519
him to scan he scans it

221
00:10:47,519 --> 00:10:49,200
of course he needs to export the

222
00:10:49,200 --> 00:10:51,180
vulnerabilities the that that we found

223
00:10:51,180 --> 00:10:54,859
so that's that's an easy task

224
00:10:54,899 --> 00:10:58,440
um and here that's when the problems uh

225
00:10:58,440 --> 00:11:00,060
start so

226
00:11:00,060 --> 00:11:04,079
zap by Design first crawls then scans

227
00:11:04,079 --> 00:11:08,279
and that means a few things it means uh

228
00:11:08,279 --> 00:11:09,959
we need to wait some time until we get

229
00:11:09,959 --> 00:11:12,300
our first results and normally we don't

230
00:11:12,300 --> 00:11:15,839
have we don't want to wait right so uh

231
00:11:15,839 --> 00:11:18,120
depending on the sites it can take from

232
00:11:18,120 --> 00:11:21,680
hours to days uh just out of curiosity

233
00:11:21,680 --> 00:11:25,079
our crawls take uh uh the 90th

234
00:11:25,079 --> 00:11:27,920
percentile is one hour and a half so

235
00:11:27,920 --> 00:11:30,959
actually it's not that much time but if

236
00:11:30,959 --> 00:11:32,700
you are thinking at scale and you want

237
00:11:32,700 --> 00:11:35,160
to scan a lot of web applications uh you

238
00:11:35,160 --> 00:11:37,079
need to start scanning as fast as soon

239
00:11:37,079 --> 00:11:38,760
as possible so you can get results as

240
00:11:38,760 --> 00:11:41,880
soon as possible so but scrolling and

241
00:11:41,880 --> 00:11:44,820
scanning in parallel uh might bring some

242
00:11:44,820 --> 00:11:47,820
issues one of them is interface

243
00:11:47,820 --> 00:11:51,060
interface between the two of them so

244
00:11:51,060 --> 00:11:53,880
uh it's rare but it happens that the

245
00:11:53,880 --> 00:11:57,420
scanner or the crawler break each other

246
00:11:57,420 --> 00:12:00,360
work so like the crawler is browsing the

247
00:12:00,360 --> 00:12:02,220
application and puts the application in

248
00:12:02,220 --> 00:12:03,839
a very specific State like in the

249
00:12:03,839 --> 00:12:06,959
checkout state but the scanner is

250
00:12:06,959 --> 00:12:10,980
already scanning a page that uh further

251
00:12:10,980 --> 00:12:12,660
ahead so this can cause some

252
00:12:12,660 --> 00:12:14,480
interference based on our experience

253
00:12:14,480 --> 00:12:17,700
it's too rare to be considered a problem

254
00:12:17,700 --> 00:12:21,480
so it's something that you can choose to

255
00:12:21,480 --> 00:12:23,399
completely ignore of course there will

256
00:12:23,399 --> 00:12:25,140
be one application out of I don't know

257
00:12:25,140 --> 00:12:29,339
300 that's uh it won't be scan adequally

258
00:12:29,339 --> 00:12:31,740
but if we want to scan at scale we need

259
00:12:31,740 --> 00:12:35,300
we need these trade-offs

260
00:12:35,760 --> 00:12:39,899
so uh and also an important thing to

261
00:12:39,899 --> 00:12:42,720
scan uh what are web applications is to

262
00:12:42,720 --> 00:12:45,959
have uh each target scan and isolation

263
00:12:45,959 --> 00:12:49,200
so uh there's multiple reasons behind it

264
00:12:49,200 --> 00:12:53,399
one is security isolation so we are

265
00:12:53,399 --> 00:12:54,420
basically

266
00:12:54,420 --> 00:12:56,519
we are basically running zap and ask him

267
00:12:56,519 --> 00:13:00,360
to parse HTTP requests and pages that

268
00:13:00,360 --> 00:13:03,360
were created by Third parties so it will

269
00:13:03,360 --> 00:13:06,180
need to be robust because you know Tech

270
00:13:06,180 --> 00:13:10,380
parsing text is a a a a source of

271
00:13:10,380 --> 00:13:13,019
problems and the last thing we want is

272
00:13:13,019 --> 00:13:17,399
to have a site that has an exploit that

273
00:13:17,399 --> 00:13:19,260
can break out of some specific context

274
00:13:19,260 --> 00:13:22,220
of Zap and gets access to information

275
00:13:22,220 --> 00:13:25,560
from another Target so for the for the

276
00:13:25,560 --> 00:13:27,480
security isolation is always good to

277
00:13:27,480 --> 00:13:30,060
have different instances of Zap for each

278
00:13:30,060 --> 00:13:32,220
Target for virtual application it's also

279
00:13:32,220 --> 00:13:34,680
smart because of resources so of course

280
00:13:34,680 --> 00:13:38,279
if you ever try to run a scanner uh one

281
00:13:38,279 --> 00:13:40,139
instance for multiple targets you know

282
00:13:40,139 --> 00:13:42,480
that the resources are not going to be

283
00:13:42,480 --> 00:13:44,820
enough uh because there's a lot of RAM

284
00:13:44,820 --> 00:13:46,920
usage and CPU so it's better to keep

285
00:13:46,920 --> 00:13:49,139
them in isolation and of course this is

286
00:13:49,139 --> 00:13:50,639
easier to scale you need to scan more

287
00:13:50,639 --> 00:13:55,160
applications just fire more more zaps

288
00:13:55,680 --> 00:13:57,720
it needs to be fully automated so if you

289
00:13:57,720 --> 00:13:59,760
want to scan at scale

290
00:13:59,760 --> 00:14:01,560
you cannot have manual intervention

291
00:14:01,560 --> 00:14:04,380
that's it periods even to recover a

292
00:14:04,380 --> 00:14:07,200
session if it requires you to recover

293
00:14:07,200 --> 00:14:09,779
from a session lost you are screwed you

294
00:14:09,779 --> 00:14:13,260
you will not be able to scan uh edscow

295
00:14:13,260 --> 00:14:15,660
so the scanners need to be able to

296
00:14:15,660 --> 00:14:18,240
obtain and keep a valid session zap does

297
00:14:18,240 --> 00:14:20,480
that as a very good support

298
00:14:20,480 --> 00:14:25,139
uh handwards that you can change so they

299
00:14:25,139 --> 00:14:28,139
can grab the session and play it as you

300
00:14:28,139 --> 00:14:29,180
needed

301
00:14:29,180 --> 00:14:32,940
and uh it has it needs to it needs to

302
00:14:32,940 --> 00:14:36,120
not have false positive so this is a

303
00:14:36,120 --> 00:14:38,760
challenge we have been trying to have no

304
00:14:38,760 --> 00:14:41,399
uh not we as an industry to report no

305
00:14:41,399 --> 00:14:43,139
false positives for ages and we keep

306
00:14:43,139 --> 00:14:44,639
doing it

307
00:14:44,639 --> 00:14:46,139
um because basically we want to report

308
00:14:46,139 --> 00:14:48,540
everything we don't want to take the

309
00:14:48,540 --> 00:14:51,240
risk of not reporting something and then

310
00:14:51,240 --> 00:14:54,600
uh that's be explored and transformed in

311
00:14:54,600 --> 00:14:56,940
a exploit

312
00:14:56,940 --> 00:14:59,100
so and it needs to be resource effective

313
00:14:59,100 --> 00:15:02,399
so in the end of the day zap is Java

314
00:15:02,399 --> 00:15:04,820
parsing arbitrary text from the internet

315
00:15:04,820 --> 00:15:08,339
and scans take millions of requests so

316
00:15:08,339 --> 00:15:12,360
if you ever run burp or zap with it

317
00:15:12,360 --> 00:15:15,060
doesn't need to be a big site if it has

318
00:15:15,060 --> 00:15:18,720
like lengthy javascripts or images uh

319
00:15:18,720 --> 00:15:21,000
you immediately notice your CPU and

320
00:15:21,000 --> 00:15:24,000
memory graphs go up so we need to be

321
00:15:24,000 --> 00:15:26,459
careful with this and there's some some

322
00:15:26,459 --> 00:15:29,940
details that you can be aware of that

323
00:15:29,940 --> 00:15:33,360
will improve improve your experience

324
00:15:33,360 --> 00:15:36,660
so what's up you've probably seen it

325
00:15:36,660 --> 00:15:39,899
um I think there was a a few uh Workshop

326
00:15:39,899 --> 00:15:42,360
about zap during the event also

327
00:15:42,360 --> 00:15:44,459
quick overview about zap and how it

328
00:15:44,459 --> 00:15:46,680
works really really brief

329
00:15:46,680 --> 00:15:50,519
Zappa is basically two pieces the core

330
00:15:50,519 --> 00:15:53,760
which is uh something the part that

331
00:15:53,760 --> 00:15:55,980
manages the add-ons and the addons

332
00:15:55,980 --> 00:15:58,380
itself the add-ons basically represent

333
00:15:58,380 --> 00:16:01,440
the vulnerabilities so each the code to

334
00:16:01,440 --> 00:16:03,360
detect detect a specific vulnerability

335
00:16:03,360 --> 00:16:07,079
is typically an add-on so we have active

336
00:16:07,079 --> 00:16:09,720
scan rules which have which can detect

337
00:16:09,720 --> 00:16:12,060
SQL injection cross-site scripting we

338
00:16:12,060 --> 00:16:13,620
have the lock for Shell

339
00:16:13,620 --> 00:16:17,220
um also alarms and other avons so

340
00:16:17,220 --> 00:16:19,260
there's the alarms and we have the the

341
00:16:19,260 --> 00:16:22,019
core the core handles everything else

342
00:16:22,019 --> 00:16:24,600
like managing the scanning queue

343
00:16:24,600 --> 00:16:27,000
managing the authentication the output

344
00:16:27,000 --> 00:16:28,860
input

345
00:16:28,860 --> 00:16:31,019
and the add-ons it's a they have a very

346
00:16:31,019 --> 00:16:33,440
complete list for those who don't know

347
00:16:33,440 --> 00:16:37,199
uh they split uh the scan rules in like

348
00:16:37,199 --> 00:16:39,000
the maturity States like the the first

349
00:16:39,000 --> 00:16:41,579
one is release level so it's stable then

350
00:16:41,579 --> 00:16:44,579
they have Alpha and beta they normally

351
00:16:44,579 --> 00:16:47,279
work well uh just the amount of false

352
00:16:47,279 --> 00:16:49,680
positives varies a lot and it increases

353
00:16:49,680 --> 00:16:51,600
a lot as

354
00:16:51,600 --> 00:16:54,480
if you go to Alpha and beta

355
00:16:54,480 --> 00:16:55,920
so

356
00:16:55,920 --> 00:16:58,199
the default operation model of that when

357
00:16:58,199 --> 00:17:02,820
you ask him to it to scan a Target is to

358
00:17:02,820 --> 00:17:05,280
place requests in a scan batch

359
00:17:05,280 --> 00:17:09,480
so and then for each scan batch like a

360
00:17:09,480 --> 00:17:11,579
group of or else each active rule is

361
00:17:11,579 --> 00:17:14,880
applied one by one so

362
00:17:14,880 --> 00:17:18,240
first we'll scan for SQL injection then

363
00:17:18,240 --> 00:17:20,160
we'll scan for reflected cross-site

364
00:17:20,160 --> 00:17:22,260
scripting then for persistent cross-site

365
00:17:22,260 --> 00:17:25,140
scripting then for a server-side

366
00:17:25,140 --> 00:17:27,480
template injection whatever so it's one

367
00:17:27,480 --> 00:17:30,540
vulnerability at a time for all requests

368
00:17:30,540 --> 00:17:32,820
and basically you can control how many

369
00:17:32,820 --> 00:17:36,000
requests are scanned at the same time so

370
00:17:36,000 --> 00:17:39,000
how many URLs are scanned so if you have

371
00:17:39,000 --> 00:17:41,400
a queue with 100 URLs you can say you

372
00:17:41,400 --> 00:17:44,520
have like 10 threads and quoting hair

373
00:17:44,520 --> 00:17:48,320
quoting because uh they are not real

374
00:17:48,320 --> 00:17:51,360
threads they might surprise you so

375
00:17:51,360 --> 00:17:54,840
you'll be able to scan 10 URLs or send

376
00:17:54,840 --> 00:17:57,600
10 requests in each moment

377
00:17:57,600 --> 00:18:01,260
and after this uh uh individual search

378
00:18:01,260 --> 00:18:03,419
for vulnerabilities you have the bulk

379
00:18:03,419 --> 00:18:05,700
scanning the bulk scanning only runs

380
00:18:05,700 --> 00:18:06,720
when

381
00:18:06,720 --> 00:18:10,740
you have all the URLs so this is not

382
00:18:10,740 --> 00:18:13,260
very funny if you want to start scanning

383
00:18:13,260 --> 00:18:15,840
before the crawl ends because you're

384
00:18:15,840 --> 00:18:17,520
basically don't have access to all the

385
00:18:17,520 --> 00:18:20,160
or else so and that bulk scanning

386
00:18:20,160 --> 00:18:23,280
requires all the or else uh to be adds

387
00:18:23,280 --> 00:18:25,860
up for the scan to happen and in

388
00:18:25,860 --> 00:18:27,780
parallel you have the passive rules

389
00:18:27,780 --> 00:18:30,780
executing so like I don't know reporting

390
00:18:30,780 --> 00:18:34,020
for uh application errors and stuff like

391
00:18:34,020 --> 00:18:35,340
that

392
00:18:35,340 --> 00:18:38,700
so the scan batches imagine you have a

393
00:18:38,700 --> 00:18:42,020
Target that has 10 Wireless and you have

394
00:18:42,020 --> 00:18:45,059
configured zap to scan five URLs this is

395
00:18:45,059 --> 00:18:47,580
basically what is happening uh the five

396
00:18:47,580 --> 00:18:49,140
threads will start scanning the first

397
00:18:49,140 --> 00:18:52,860
five URLs and then when the first URL is

398
00:18:52,860 --> 00:18:54,960
done it will start on the sixth and so

399
00:18:54,960 --> 00:18:57,080
on and so forth

400
00:18:57,080 --> 00:19:02,160
this of course and very obviously will

401
00:19:02,160 --> 00:19:04,320
my tweet to a situation like this where

402
00:19:04,320 --> 00:19:05,880
we have

403
00:19:05,880 --> 00:19:09,059
just a single thread running uh for uh

404
00:19:09,059 --> 00:19:11,520
one of for the remaining URL so in this

405
00:19:11,520 --> 00:19:12,480
scenario

406
00:19:12,480 --> 00:19:15,120
we are not so remember we started with

407
00:19:15,120 --> 00:19:16,980
five threads so five requests in

408
00:19:16,980 --> 00:19:19,140
parallel at this stage we are not doing

409
00:19:19,140 --> 00:19:20,820
five requests in parallel we are doing

410
00:19:20,820 --> 00:19:22,860
one at a time despite we having five

411
00:19:22,860 --> 00:19:26,580
threads configured so this is kind of

412
00:19:26,580 --> 00:19:28,440
surprised me uh when I start first

413
00:19:28,440 --> 00:19:30,840
starts working with zap

414
00:19:30,840 --> 00:19:33,660
um and it can really slow down your your

415
00:19:33,660 --> 00:19:35,880
scans

416
00:19:35,880 --> 00:19:41,220
so the first question I would uh

417
00:19:41,220 --> 00:19:44,280
put out out here is how many where else

418
00:19:44,280 --> 00:19:47,760
should I put on my batch so remember

419
00:19:47,760 --> 00:19:51,360
um I'm basically drawing URL sets up

420
00:19:51,360 --> 00:19:54,240
and of course I won't want to wait until

421
00:19:54,240 --> 00:19:55,860
I have all the or else to start scanning

422
00:19:55,860 --> 00:19:57,960
I want to scan immediately so the

423
00:19:57,960 --> 00:20:00,960
obvious uh idea is okay let's create

424
00:20:00,960 --> 00:20:03,720
batches of one URL so as soon as I have

425
00:20:03,720 --> 00:20:06,840
one URL in my uh at zap I can start

426
00:20:06,840 --> 00:20:10,200
scanning so one scaling thread one URL

427
00:20:10,200 --> 00:20:13,740
but this is not very good because

428
00:20:13,740 --> 00:20:16,799
um if I have Huawei only batches of one

429
00:20:16,799 --> 00:20:19,980
I'll be able to scan all one URL at a

430
00:20:19,980 --> 00:20:21,480
time and of course if I'm getting more

431
00:20:21,480 --> 00:20:23,580
the others are getting queued are

432
00:20:23,580 --> 00:20:25,679
getting blocked so

433
00:20:25,679 --> 00:20:29,460
next idea multiple URLs of one batch in

434
00:20:29,460 --> 00:20:30,840
parallel so

435
00:20:30,840 --> 00:20:35,100
instead of having a batch with 10 URLs

436
00:20:35,100 --> 00:20:37,679
I'm having 10 batches of one so

437
00:20:37,679 --> 00:20:40,620
basically I can easily increment the

438
00:20:40,620 --> 00:20:43,520
threads and know

439
00:20:43,520 --> 00:20:46,740
nowhere else will block others but this

440
00:20:46,740 --> 00:20:49,679
is not really easy to do because this

441
00:20:49,679 --> 00:20:52,260
requires a heavy change to the chord of

442
00:20:52,260 --> 00:20:55,080
Zap and this is something you not want

443
00:20:55,080 --> 00:20:58,260
to do I won't recommend changing the the

444
00:20:58,260 --> 00:21:01,080
zap core this will take you a lot of

445
00:21:01,080 --> 00:21:04,020
work and uh

446
00:21:04,020 --> 00:21:06,780
the zap development development team is

447
00:21:06,780 --> 00:21:08,760
really active so it will make your life

448
00:21:08,760 --> 00:21:10,860
really hard try just to keep up with

449
00:21:10,860 --> 00:21:13,860
them and try to merge and revise changes

450
00:21:13,860 --> 00:21:16,260
that they do so and that's also the

451
00:21:16,260 --> 00:21:18,000
issue of concurrent re-authentication so

452
00:21:18,000 --> 00:21:21,600
if you have multiple batches

453
00:21:21,600 --> 00:21:24,539
running at the same time and all of them

454
00:21:24,539 --> 00:21:26,160
need to re-authenticate you might have

455
00:21:26,160 --> 00:21:27,720
like a storm of re-authentication

456
00:21:27,720 --> 00:21:30,299
requests of course you can manage this

457
00:21:30,299 --> 00:21:33,360
and not go to the login page every time

458
00:21:33,360 --> 00:21:37,440
but it's it's really it's really bad so

459
00:21:37,440 --> 00:21:40,980
the most obvious solution is okay let's

460
00:21:40,980 --> 00:21:44,340
find out a reasonable number of orals in

461
00:21:44,340 --> 00:21:46,039
a batch so this was basically

462
00:21:46,039 --> 00:21:49,559
experimental we did this we came up with

463
00:21:49,559 --> 00:21:52,140
the numbers which is not this one uh we

464
00:21:52,140 --> 00:21:54,120
came up with the numbers by trial and

465
00:21:54,120 --> 00:21:56,400
error we basically did a lot of scans

466
00:21:56,400 --> 00:21:59,580
with multiple variables and

467
00:21:59,580 --> 00:22:03,299
um then measure the the scan time and we

468
00:22:03,299 --> 00:22:05,159
ended up with a few numbers that I'll

469
00:22:05,159 --> 00:22:06,960
show you ahead so

470
00:22:06,960 --> 00:22:09,240
if we have 10 where else at the same

471
00:22:09,240 --> 00:22:10,260
time

472
00:22:10,260 --> 00:22:13,919
so a batch of 10. so zap will basically

473
00:22:13,919 --> 00:22:15,960
wait until it has 10 URLs to start

474
00:22:15,960 --> 00:22:18,900
scanning it's a reasonable DIY uh any

475
00:22:18,900 --> 00:22:21,000
crawler will find 10 URLs in an

476
00:22:21,000 --> 00:22:22,860
application in a matter of seconds so

477
00:22:22,860 --> 00:22:24,900
that that's not an issue so let's start

478
00:22:24,900 --> 00:22:27,539
with 10 let's start with uh also 10

479
00:22:27,539 --> 00:22:29,820
threads so

480
00:22:29,820 --> 00:22:33,080
of course this eventually will happen

481
00:22:33,080 --> 00:22:35,460
I have

482
00:22:35,460 --> 00:22:38,640
a thread scanning an URL and I might

483
00:22:38,640 --> 00:22:41,100
have like a queue of 200 URLs that are

484
00:22:41,100 --> 00:22:43,500
not being scanned this basically it's

485
00:22:43,500 --> 00:22:44,880
the same as this which is how

486
00:22:44,880 --> 00:22:47,280
construction Works uh our construction

487
00:22:47,280 --> 00:22:49,159
goes in Portugal

488
00:22:49,159 --> 00:22:52,500
one people one guy working and all the

489
00:22:52,500 --> 00:22:55,799
others CPUs looking at them not doing

490
00:22:55,799 --> 00:22:57,600
anything so it's it's exactly the same

491
00:22:57,600 --> 00:22:58,679
situation

492
00:22:58,679 --> 00:23:00,900
so

493
00:23:00,900 --> 00:23:05,640
um this is not not uh the way to go and

494
00:23:05,640 --> 00:23:08,460
if you want to speed up

495
00:23:08,460 --> 00:23:11,700
the scan uh you have to figure out which

496
00:23:11,700 --> 00:23:14,400
numbers work for you so

497
00:23:14,400 --> 00:23:16,440
these numbers we came up with these

498
00:23:16,440 --> 00:23:18,299
numbers after I don't know

499
00:23:18,299 --> 00:23:20,100
scanning thousands of web applications

500
00:23:20,100 --> 00:23:23,460
with no specific type of web

501
00:23:23,460 --> 00:23:25,260
applications just web applications that

502
00:23:25,260 --> 00:23:28,140
people ask us to scan and this was the

503
00:23:28,140 --> 00:23:30,059
number the numbers we came up so batches

504
00:23:30,059 --> 00:23:32,700
of 18 URLs so this was a it's a good

505
00:23:32,700 --> 00:23:35,820
trade-off between the time it takes the

506
00:23:35,820 --> 00:23:38,880
spider to find 18 URLs so we don't have

507
00:23:38,880 --> 00:23:40,860
to wait longer to start scanning maybe a

508
00:23:40,860 --> 00:23:43,799
minute or two it's reasonable and six

509
00:23:43,799 --> 00:23:46,320
threads six threads is surprisingly

510
00:23:46,320 --> 00:23:47,600
small

511
00:23:47,600 --> 00:23:51,360
uh but it this is a speed trade-off a

512
00:23:51,360 --> 00:23:52,880
lot of web applications

513
00:23:52,880 --> 00:23:55,799
probably simply don't handle more than

514
00:23:55,799 --> 00:23:58,020
six threads at a time so it's basically

515
00:23:58,020 --> 00:24:01,020
the same as saying if you have uh

516
00:24:01,020 --> 00:24:02,880
seven friends and you ask them to visit

517
00:24:02,880 --> 00:24:04,460
the site they take the site down

518
00:24:04,460 --> 00:24:07,500
unfortunately that's that's reality I'm

519
00:24:07,500 --> 00:24:09,120
not sure how these sites live in the

520
00:24:09,120 --> 00:24:10,140
internet maybe they don't have they

521
00:24:10,140 --> 00:24:12,600
don't have enough a lot of customers so

522
00:24:12,600 --> 00:24:16,760
basically uh this number is a reasonable

523
00:24:16,760 --> 00:24:19,440
trade-off between not taking the site

524
00:24:19,440 --> 00:24:21,419
down the target if it's down and if it

525
00:24:21,419 --> 00:24:23,880
starts getting slower you cannot you'll

526
00:24:23,880 --> 00:24:25,260
get better results so this is something

527
00:24:25,260 --> 00:24:28,980
you have to keep in mind uh if you put

528
00:24:28,980 --> 00:24:31,020
too much speed on your scanner

529
00:24:31,020 --> 00:24:33,600
you'll take the site down and normally

530
00:24:33,600 --> 00:24:35,580
you are not you don't want to do the now

531
00:24:35,580 --> 00:24:38,220
of service you are not testing for that

532
00:24:38,220 --> 00:24:40,799
and that will mess up your results

533
00:24:40,799 --> 00:24:42,780
completely I'll get to that later but

534
00:24:42,780 --> 00:24:45,900
any payload that is based on delays and

535
00:24:45,900 --> 00:24:48,480
time will throw false positives like

536
00:24:48,480 --> 00:24:51,960
like it's raining so this was a good

537
00:24:51,960 --> 00:24:55,260
compromise batches of 18 URLs and then

538
00:24:55,260 --> 00:24:58,140
six threads and then if you want if you

539
00:24:58,140 --> 00:24:59,940
have the time for that you can add logic

540
00:24:59,940 --> 00:25:01,860
to increase and decrease the number of

541
00:25:01,860 --> 00:25:06,480
URLs of threads if the site is

542
00:25:06,480 --> 00:25:07,140
um

543
00:25:07,140 --> 00:25:10,020
uh is responding quickly

544
00:25:10,020 --> 00:25:12,860
yeah go ahead

545
00:25:20,400 --> 00:25:21,840
yeah

546
00:25:21,840 --> 00:25:24,659
um that's actually something we uh we

547
00:25:24,659 --> 00:25:27,539
had to do automatically which is

548
00:25:27,539 --> 00:25:29,640
um and if I recall correctly zap doesn't

549
00:25:29,640 --> 00:25:31,740
support that out of the blue it's like a

550
00:25:31,740 --> 00:25:34,200
fixed value so you can ask zap to have a

551
00:25:34,200 --> 00:25:36,179
device between requests but that's kind

552
00:25:36,179 --> 00:25:37,980
of a static value it will apply to every

553
00:25:37,980 --> 00:25:39,020
request

554
00:25:39,020 --> 00:25:42,299
uh which is great if you are doing a

555
00:25:42,299 --> 00:25:45,120
manual testing of a single site you can

556
00:25:45,120 --> 00:25:47,340
experience that and fight fine tune the

557
00:25:47,340 --> 00:25:51,360
value but uh if you do that at scale if

558
00:25:51,360 --> 00:25:53,039
we if you start by defining that value

559
00:25:53,039 --> 00:25:55,620
you'll see that the scans taking longer

560
00:25:55,620 --> 00:25:57,600
and it's very very noticeable even if

561
00:25:57,600 --> 00:25:59,940
you just had a DIY of 200 milliseconds

562
00:25:59,940 --> 00:26:02,279
it's very noticeable because you need to

563
00:26:02,279 --> 00:26:04,080
keep in mind that you are doing millions

564
00:26:04,080 --> 00:26:06,659
of requests so what we ended up doing

565
00:26:06,659 --> 00:26:09,360
and it was not really we had a deep

566
00:26:09,360 --> 00:26:12,299
doing a few things but one is to Dynamic

567
00:26:12,299 --> 00:26:15,419
dynamically set a delay if the response

568
00:26:15,419 --> 00:26:18,120
time of the application increases after

569
00:26:18,120 --> 00:26:21,240
a certain threshold so yeah and we also

570
00:26:21,240 --> 00:26:23,400
increase the number of threads

571
00:26:23,400 --> 00:26:27,059
um if the application keeps so actually

572
00:26:27,059 --> 00:26:29,520
we immediately start increasing the

573
00:26:29,520 --> 00:26:31,260
number of threads and we monitor the

574
00:26:31,260 --> 00:26:33,120
response time and if the response time

575
00:26:33,120 --> 00:26:34,980
doesn't go up we continue increasing if

576
00:26:34,980 --> 00:26:37,679
it starts going up we decrease so that

577
00:26:37,679 --> 00:26:39,960
actually worked out pretty well and only

578
00:26:39,960 --> 00:26:42,500
a handful of applications need

579
00:26:42,500 --> 00:26:46,860
a constant DUI like uat applic test QA

580
00:26:46,860 --> 00:26:48,539
those are normal like a single core

581
00:26:48,539 --> 00:26:50,159
machine where all the developers are

582
00:26:50,159 --> 00:26:52,740
working and you don't want to mess with

583
00:26:52,740 --> 00:26:54,120
the testing machine you don't want the

584
00:26:54,120 --> 00:26:55,919
developers telling you you broke my

585
00:26:55,919 --> 00:26:57,360
testing machine

586
00:26:57,360 --> 00:26:59,279
so but that is not something zap

587
00:26:59,279 --> 00:27:01,080
supports out of the blue it's something

588
00:27:01,080 --> 00:27:04,140
uh it's not trivial to have but it works

589
00:27:04,140 --> 00:27:07,500
so but even with this uh we still might

590
00:27:07,500 --> 00:27:09,179
have starvation because

591
00:27:09,179 --> 00:27:13,260
the group of 18 URLs uh you might have

592
00:27:13,260 --> 00:27:16,500
17 fast URLs and then a really small

593
00:27:16,500 --> 00:27:19,559
Oriental like right in the middle so and

594
00:27:19,559 --> 00:27:21,840
this can happen because it's a post and

595
00:27:21,840 --> 00:27:23,520
that has more requests and it goes to

596
00:27:23,520 --> 00:27:26,340
the a different backend uh we all

597
00:27:26,340 --> 00:27:28,860
experienced that so what we ended up

598
00:27:28,860 --> 00:27:32,220
doing was to group where else by

599
00:27:32,220 --> 00:27:35,520
response time and injection point so

600
00:27:35,520 --> 00:27:37,620
the formula we use is not exactly like

601
00:27:37,620 --> 00:27:38,940
this but it doesn't matter just for you

602
00:27:38,940 --> 00:27:40,740
to have an idea so

603
00:27:40,740 --> 00:27:43,500
we basically grouped real URLs that

604
00:27:43,500 --> 00:27:45,299
reply really fast

605
00:27:45,299 --> 00:27:48,240
and the ones that reply really slow so

606
00:27:48,240 --> 00:27:50,520
basically with that we don't have like

607
00:27:50,520 --> 00:27:53,779
blocking we don't have the slow or else

608
00:27:53,779 --> 00:27:57,840
like one slow RL uh basically creating

609
00:27:57,840 --> 00:28:00,240
this situation here so that could have

610
00:28:00,240 --> 00:28:03,120
could have happened if this URL was much

611
00:28:03,120 --> 00:28:05,580
more slower or like this one so if

612
00:28:05,580 --> 00:28:08,039
basically we try to scan URLs that have

613
00:28:08,039 --> 00:28:09,480
the same response time so all the

614
00:28:09,480 --> 00:28:11,279
threads are constantly working and not

615
00:28:11,279 --> 00:28:14,100
no Trail is walking each other other

616
00:28:14,100 --> 00:28:16,200
so and that actually worked out pretty

617
00:28:16,200 --> 00:28:19,200
well uh this is really a simple rough

618
00:28:19,200 --> 00:28:21,240
estimation based on the injection points

619
00:28:21,240 --> 00:28:24,779
so um ejection points uh

620
00:28:24,779 --> 00:28:27,480
it's a burp screenshot in a zap

621
00:28:27,480 --> 00:28:31,200
presentation uh uh injection points and

622
00:28:31,200 --> 00:28:32,880
it's actually I think if I recall

623
00:28:32,880 --> 00:28:35,100
correct this is also also a burped lingo

624
00:28:35,100 --> 00:28:37,919
so one injection point two injection

625
00:28:37,919 --> 00:28:40,799
points three injection points well the

626
00:28:40,799 --> 00:28:43,679
most important ones so a basic count of

627
00:28:43,679 --> 00:28:44,940
the injection points in a simple

628
00:28:44,940 --> 00:28:47,940
grouping it's enough to make uh to give

629
00:28:47,940 --> 00:28:50,760
you much better results and I don't have

630
00:28:50,760 --> 00:28:53,400
like numbers here but our our scanning

631
00:28:53,400 --> 00:28:55,740
time increased dramatically uh the

632
00:28:55,740 --> 00:28:57,779
decrease dramatically so it was much

633
00:28:57,779 --> 00:28:58,679
faster

634
00:28:58,679 --> 00:29:00,480
so basically we ended up with something

635
00:29:00,480 --> 00:29:03,900
like this as we are receiving URLs from

636
00:29:03,900 --> 00:29:06,360
the spider we are measuring its response

637
00:29:06,360 --> 00:29:08,220
time without payloads and we are

638
00:29:08,220 --> 00:29:10,320
basically grouping them together uh in

639
00:29:10,320 --> 00:29:12,539
small batches uh so we don't have to

640
00:29:12,539 --> 00:29:15,360
wait also for a lot of them and this is

641
00:29:15,360 --> 00:29:16,740
more common that you imagine slow

642
00:29:16,740 --> 00:29:18,600
applications are much more common that

643
00:29:18,600 --> 00:29:20,820
you imagine it's very common for us to

644
00:29:20,820 --> 00:29:22,799
start a scan and an application that has

645
00:29:22,799 --> 00:29:24,539
a response time of like this immediately

646
00:29:24,539 --> 00:29:26,460
goes to three seconds it's completely

647
00:29:26,460 --> 00:29:28,140
absurd

648
00:29:28,140 --> 00:29:30,779
so the crawler

649
00:29:30,779 --> 00:29:33,240
um normally any crawler sends URLs at

650
00:29:33,240 --> 00:29:35,460
random so another strategy you might

651
00:29:35,460 --> 00:29:37,799
want to implement whenever you are

652
00:29:37,799 --> 00:29:40,980
automating scans uh and you are probably

653
00:29:40,980 --> 00:29:42,299
short on time

654
00:29:42,299 --> 00:29:45,360
is to prioritize authenticated requests

655
00:29:45,360 --> 00:29:48,659
so this to say don't forget to scan

656
00:29:48,659 --> 00:29:52,500
without a valid session because

657
00:29:52,500 --> 00:29:54,059
there might you might have

658
00:29:54,059 --> 00:29:56,340
unauthenticated pages that reply

659
00:29:56,340 --> 00:29:58,380
differently like the login page of

660
00:29:58,380 --> 00:30:01,380
course uh or the newsletter subscriber

661
00:30:01,380 --> 00:30:03,659
endpoint that reply differently if you

662
00:30:03,659 --> 00:30:04,860
don't have a valid sessions so don't

663
00:30:04,860 --> 00:30:06,840
forget to scan those but these are much

664
00:30:06,840 --> 00:30:09,480
more interesting scandals first also

665
00:30:09,480 --> 00:30:11,580
requests with parameters are much more

666
00:30:11,580 --> 00:30:14,220
interesting than the ones without it and

667
00:30:14,220 --> 00:30:17,100
by parameters I'm also considering rest

668
00:30:17,100 --> 00:30:20,460
URLs so you you need to consider those

669
00:30:20,460 --> 00:30:22,860
and of course you can be also smart and

670
00:30:22,860 --> 00:30:24,360
prioritize requests with a certain

671
00:30:24,360 --> 00:30:26,240
parameters like if you have an order

672
00:30:26,240 --> 00:30:28,500
parameter or a page I want the page

673
00:30:28,500 --> 00:30:31,799
parameter because everyone forgets to do

674
00:30:31,799 --> 00:30:34,279
tests to page parameters because no one

675
00:30:34,279 --> 00:30:37,640
ever wants to add enough content so the

676
00:30:37,640 --> 00:30:41,760
pagination appears so passionation is

677
00:30:41,760 --> 00:30:44,539
great I want to test the page the page

678
00:30:44,539 --> 00:30:47,159
parameters they always break something

679
00:30:47,159 --> 00:30:50,220
and of course you need to be smart and

680
00:30:50,220 --> 00:30:52,860
the ndi as much as possible testing so

681
00:30:52,860 --> 00:30:54,840
basically put it put those at the end of

682
00:30:54,840 --> 00:30:58,020
the queue destructive actions like uh

683
00:30:58,020 --> 00:31:02,340
Delete uh you can also do this with

684
00:31:02,340 --> 00:31:04,380
semantics try to figure out if the URL

685
00:31:04,380 --> 00:31:06,120
if the endpoint says something like

686
00:31:06,120 --> 00:31:09,299
remove delete destroy you want to test

687
00:31:09,299 --> 00:31:11,100
the those at the end because if you

688
00:31:11,100 --> 00:31:12,000
first

689
00:31:12,000 --> 00:31:14,279
test the delete end point and only after

690
00:31:14,279 --> 00:31:16,140
the creates the delete is not testing

691
00:31:16,140 --> 00:31:19,320
anything there's no objects there so and

692
00:31:19,320 --> 00:31:20,580
this is really important if you are

693
00:31:20,580 --> 00:31:23,520
scanning apis if you get the schema and

694
00:31:23,520 --> 00:31:25,440
you get all the pretty requests create

695
00:31:25,440 --> 00:31:29,220
put the update and then the delete if

696
00:31:29,220 --> 00:31:30,539
you by any chance you're starting by

697
00:31:30,539 --> 00:31:32,399
scanning the delete you are basically

698
00:31:32,399 --> 00:31:34,740
not scanning anything

699
00:31:34,740 --> 00:31:36,659
and you won't imagine how many times

700
00:31:36,659 --> 00:31:39,000
I've seen that it's uh it's very common

701
00:31:39,000 --> 00:31:42,179
so authentication it's something you

702
00:31:42,179 --> 00:31:44,880
need to handle of course you can scan a

703
00:31:44,880 --> 00:31:47,520
lot of sites without caring about

704
00:31:47,520 --> 00:31:51,179
authentication and I would say it's a a

705
00:31:51,179 --> 00:31:55,500
good way to start so the first time I

706
00:31:55,500 --> 00:31:58,380
try to scan all the sites of my previous

707
00:31:58,380 --> 00:32:00,779
company so basically clone their DNS it

708
00:32:00,779 --> 00:32:03,840
was like 7000 DNS entries and I'm

709
00:32:03,840 --> 00:32:08,100
screwed so I went uh with small

710
00:32:08,100 --> 00:32:09,960
iterations first let's scan without a

711
00:32:09,960 --> 00:32:11,520
session I don't care about any education

712
00:32:11,520 --> 00:32:13,760
I just care about what's public

713
00:32:13,760 --> 00:32:17,159
and that's a good starting point but if

714
00:32:17,159 --> 00:32:18,179
you want to go deeper you need to

715
00:32:18,179 --> 00:32:20,520
authenticate yourself so and you have to

716
00:32:20,520 --> 00:32:23,159
be careful with some

717
00:32:23,159 --> 00:32:26,100
um issues so one that is not that common

718
00:32:26,100 --> 00:32:29,399
uh is to a Target does not allow for

719
00:32:29,399 --> 00:32:32,940
concurrent sessions uh this can happen

720
00:32:32,940 --> 00:32:35,520
especially with more high profile

721
00:32:35,520 --> 00:32:38,159
targets like the financial and banking

722
00:32:38,159 --> 00:32:40,380
so if it doesn't allow for concurrent

723
00:32:40,380 --> 00:32:44,340
sessions you probably cannot scan with

724
00:32:44,340 --> 00:32:46,320
multiple threads and you might not even

725
00:32:46,320 --> 00:32:48,419
be able to use a grower in the scanner

726
00:32:48,419 --> 00:32:51,659
at the same time so that that can be an

727
00:32:51,659 --> 00:32:53,940
issue it's easily solved by basically

728
00:32:53,940 --> 00:32:56,640
slashing the threads to one so that's

729
00:32:56,640 --> 00:32:58,679
that's simple but it's something you

730
00:32:58,679 --> 00:33:00,360
need to figure out manually so there's

731
00:33:00,360 --> 00:33:03,240
like no easy result

732
00:33:03,240 --> 00:33:05,399
um there's also applications that are

733
00:33:05,399 --> 00:33:08,100
really annoying uh that detects any

734
00:33:08,100 --> 00:33:10,020
weird payloads and kills the session

735
00:33:10,020 --> 00:33:12,960
those most likely have a WAAF doing that

736
00:33:12,960 --> 00:33:15,480
so I hope I hope the developers are not

737
00:33:15,480 --> 00:33:17,700
trying to to do that by themselves so

738
00:33:17,700 --> 00:33:19,559
most likely there's a WAFF that detects

739
00:33:19,559 --> 00:33:20,940
the payload and immediately kills a

740
00:33:20,940 --> 00:33:23,399
session uh I think we all have been we

741
00:33:23,399 --> 00:33:25,919
all manually scan applications like

742
00:33:25,919 --> 00:33:27,720
those are really annoying and there's

743
00:33:27,720 --> 00:33:30,659
also idle and hard timeouts that the

744
00:33:30,659 --> 00:33:31,980
application might have

745
00:33:31,980 --> 00:33:35,880
that might screw your scanning or you

746
00:33:35,880 --> 00:33:37,919
basically call the log out endpoints and

747
00:33:37,919 --> 00:33:39,539
you kill your session so you need to

748
00:33:39,539 --> 00:33:42,179
have some some heuristics to figure out

749
00:33:42,179 --> 00:33:44,580
which endpoints uh terminate your

750
00:33:44,580 --> 00:33:46,980
session scan them at the end or do not

751
00:33:46,980 --> 00:33:49,559
scan them at all although

752
00:33:49,559 --> 00:33:52,679
I love to find open redirects on the

753
00:33:52,679 --> 00:33:54,960
logout request because it's never ever

754
00:33:54,960 --> 00:33:57,720
tested and normally it redirects to the

755
00:33:57,720 --> 00:34:00,360
login page again so uh there's

756
00:34:00,360 --> 00:34:02,760
frequently an open redirect there so

757
00:34:02,760 --> 00:34:05,880
it's also something that's why you must

758
00:34:05,880 --> 00:34:07,799
not forget to test a log out

759
00:34:07,799 --> 00:34:10,619
and you need to test it uh with a valid

760
00:34:10,619 --> 00:34:11,940
session so you can get a redirect

761
00:34:11,940 --> 00:34:14,580
afterwards so if you use the session you

762
00:34:14,580 --> 00:34:16,520
need to ask for one

763
00:34:16,520 --> 00:34:19,020
and most importantly you need to check

764
00:34:19,020 --> 00:34:21,839
if you lose it so

765
00:34:21,839 --> 00:34:25,020
it might be tempting to check on every

766
00:34:25,020 --> 00:34:27,659
request if you lose the session but to

767
00:34:27,659 --> 00:34:29,460
check for that you need to do another

768
00:34:29,460 --> 00:34:31,679
requests or basically multiplying by two

769
00:34:31,679 --> 00:34:34,859
the number of requests you do so and

770
00:34:34,859 --> 00:34:37,020
that kind of works if you are doing

771
00:34:37,020 --> 00:34:39,839
manual testing you can set up your

772
00:34:39,839 --> 00:34:42,179
scanner that's really easy to do on Burp

773
00:34:42,179 --> 00:34:45,239
to be honest on zap uh I I don't I don't

774
00:34:45,239 --> 00:34:48,480
know if it's also that easy to say

775
00:34:48,480 --> 00:34:49,918
um

776
00:34:49,918 --> 00:34:52,560
go to this URL every every time I'm

777
00:34:52,560 --> 00:34:54,719
going to test another URL and check if

778
00:34:54,719 --> 00:34:58,800
the the response as X if it has X it

779
00:34:58,800 --> 00:35:00,960
means the session was lost so ask for a

780
00:35:00,960 --> 00:35:05,040
session again so a good trade-off and uh

781
00:35:05,040 --> 00:35:07,560
it works is basically only to check for

782
00:35:07,560 --> 00:35:10,140
the if the session is valid after I

783
00:35:10,140 --> 00:35:12,720
don't know 50 requests or five seconds

784
00:35:12,720 --> 00:35:16,520
or 10 seconds I know we might be losing

785
00:35:16,520 --> 00:35:19,800
uh visibility we might be missing some

786
00:35:19,800 --> 00:35:22,800
vulnerabilities because if we will if we

787
00:35:22,800 --> 00:35:25,079
are checking every 10 requests and we

788
00:35:25,079 --> 00:35:26,640
lose the session immediately on the

789
00:35:26,640 --> 00:35:29,040
first request the other nine will just

790
00:35:29,040 --> 00:35:32,760
not test anything but if you are

791
00:35:32,760 --> 00:35:34,920
scanning at scale if you are scanning if

792
00:35:34,920 --> 00:35:36,599
you are doing automated scanning if you

793
00:35:36,599 --> 00:35:38,880
are constantly scanning this is actually

794
00:35:38,880 --> 00:35:41,040
not an issue because

795
00:35:41,040 --> 00:35:42,900
eventually your scale that application

796
00:35:42,900 --> 00:35:43,619
again

797
00:35:43,619 --> 00:35:46,140
next week next day next month I don't

798
00:35:46,140 --> 00:35:48,180
know and the likelihood of you losing

799
00:35:48,180 --> 00:35:49,980
the session at the exact same moment is

800
00:35:49,980 --> 00:35:51,480
very well so

801
00:35:51,480 --> 00:35:54,000
yes today I'm not scanning that endpoint

802
00:35:54,000 --> 00:35:56,099
because the session was lost but on the

803
00:35:56,099 --> 00:35:58,500
next scan most likely I'll scan it you

804
00:35:58,500 --> 00:35:59,579
might have some vulnerabilities

805
00:35:59,579 --> 00:36:02,099
appearing and disappearing but that's

806
00:36:02,099 --> 00:36:05,339
okay it's much better than doing this

807
00:36:05,339 --> 00:36:07,079
checking every request this will it's

808
00:36:07,079 --> 00:36:09,780
basically not doesn't scale

809
00:36:09,780 --> 00:36:12,000
so this is a good strategy to check

810
00:36:12,000 --> 00:36:13,560
every few requests if you are doing

811
00:36:13,560 --> 00:36:16,680
recurrent scans it's something uh that

812
00:36:16,680 --> 00:36:19,920
works basically it works so

813
00:36:19,920 --> 00:36:21,839
other situations you need to be careful

814
00:36:21,839 --> 00:36:24,780
of course you don't want your scanner to

815
00:36:24,780 --> 00:36:27,359
change the password otherwise uh the

816
00:36:27,359 --> 00:36:29,880
scanner will lock itself out or remove

817
00:36:29,880 --> 00:36:32,700
privileges to the user we all experience

818
00:36:32,700 --> 00:36:35,280
that only with the user or delete the

819
00:36:35,280 --> 00:36:37,920
entire database so this is something

820
00:36:37,920 --> 00:36:40,859
that you need to uh be careful you

821
00:36:40,859 --> 00:36:43,260
cannot just enable all the tests all the

822
00:36:43,260 --> 00:36:44,820
SQL injection tests you need for

823
00:36:44,820 --> 00:36:48,300
instance to exclude the Boolean uh

824
00:36:48,300 --> 00:36:51,300
is missing it's here the Boolean biased

825
00:36:51,300 --> 00:36:53,820
tests because

826
00:36:53,820 --> 00:36:56,579
um you're scanning way too many sites so

827
00:36:56,579 --> 00:36:59,160
you cannot babysit the scanner and you

828
00:36:59,160 --> 00:37:01,560
cannot try to manually exclude endpoints

829
00:37:01,560 --> 00:37:03,599
that do updates and and then it might

830
00:37:03,599 --> 00:37:06,000
end up doing this so it's a trade-off

831
00:37:06,000 --> 00:37:08,520
but you should disable the Boolean base

832
00:37:08,520 --> 00:37:11,640
tests uh otherwise you might end up with

833
00:37:11,640 --> 00:37:16,020
this and I learned this the hard way

834
00:37:16,020 --> 00:37:17,760
but apparently they have backup so it

835
00:37:17,760 --> 00:37:20,760
was good I tested the backup

836
00:37:20,760 --> 00:37:22,440
so

837
00:37:22,440 --> 00:37:23,940
one of the biggest problems with

838
00:37:23,940 --> 00:37:27,119
scanners uh it's the number of the sheer

839
00:37:27,119 --> 00:37:28,740
number of vulnerabilities that's their

840
00:37:28,740 --> 00:37:31,440
reports like there's a lot of noise uh

841
00:37:31,440 --> 00:37:33,240
there's the informational ones that

842
00:37:33,240 --> 00:37:35,940
actually no one cares so yeah you have

843
00:37:35,940 --> 00:37:37,740
an Apache so what you have a certificate

844
00:37:37,740 --> 00:37:39,960
so what you have a duplicate cookie so

845
00:37:39,960 --> 00:37:42,180
what the likelihood of that being

846
00:37:42,180 --> 00:37:46,140
significant it's so so low that no one

847
00:37:46,140 --> 00:37:48,599
has time to uh to go after that and

848
00:37:48,599 --> 00:37:51,480
investigate unless you are a really uh

849
00:37:51,480 --> 00:37:54,420
targeting a very specific Target and you

850
00:37:54,420 --> 00:37:58,260
are basically just focused on that so

851
00:37:58,260 --> 00:38:01,200
you basically need to do compromises uh

852
00:38:01,200 --> 00:38:05,280
you need to drop some of those so

853
00:38:05,280 --> 00:38:08,099
the first is to drop informational so

854
00:38:08,099 --> 00:38:11,760
the likelihoods and our snake was in

855
00:38:11,760 --> 00:38:14,400
this was here yesterday so we might not

856
00:38:14,400 --> 00:38:16,079
agree with this because if you remember

857
00:38:16,079 --> 00:38:17,700
his cross-site scripting cheat sheet

858
00:38:17,700 --> 00:38:20,339
like half of them uh would depend on

859
00:38:20,339 --> 00:38:22,680
these uh weird stuff that happened long

860
00:38:22,680 --> 00:38:25,260
time ago but nowadays these problems are

861
00:38:25,260 --> 00:38:28,619
not relevant so uh Minds mind sniffing

862
00:38:28,619 --> 00:38:30,900
is much better the browser as the

863
00:38:30,900 --> 00:38:33,359
browsers have better protections so

864
00:38:33,359 --> 00:38:35,940
basically Let's ignore all of those yeah

865
00:38:35,940 --> 00:38:38,220
I know this might give us some insight

866
00:38:38,220 --> 00:38:40,619
uh to something that it might be

867
00:38:40,619 --> 00:38:42,420
happening but we don't care we are

868
00:38:42,420 --> 00:38:43,980
basically just trying to scan thousands

869
00:38:43,980 --> 00:38:46,320
of web applications so we need to focus

870
00:38:46,320 --> 00:38:48,300
so let's focus on the more higher risk

871
00:38:48,300 --> 00:38:49,560
vulnerabilities

872
00:38:49,560 --> 00:38:52,020
you also need to be careful with the

873
00:38:52,020 --> 00:38:54,839
amount of stuff you report so if you

874
00:38:54,839 --> 00:38:58,859
have a page parameter vulnerable in all

875
00:38:58,859 --> 00:39:01,079
your pages which is likely

876
00:39:01,079 --> 00:39:04,320
it's not productive to report that for

877
00:39:04,320 --> 00:39:08,520
all the pages uh okay you it's nice to

878
00:39:08,520 --> 00:39:12,240
write a a sheet of 100 real ones but

879
00:39:12,240 --> 00:39:14,400
that that won't help the developer and

880
00:39:14,400 --> 00:39:15,839
the guy that is fixing the vulnerability

881
00:39:15,839 --> 00:39:19,320
so try to do duplicate vulnerabilities

882
00:39:19,320 --> 00:39:21,420
as much as possible or based on the type

883
00:39:21,420 --> 00:39:24,560
based on the parameter and if you do

884
00:39:24,560 --> 00:39:27,500
duplicate too much that's okay because

885
00:39:27,500 --> 00:39:29,700
eventually the vulnerability will be

886
00:39:29,700 --> 00:39:32,940
fixed and the other that you removed the

887
00:39:32,940 --> 00:39:35,640
duplicated will reappear on the next

888
00:39:35,640 --> 00:39:39,119
scan so it's okay if in one scan you'd

889
00:39:39,119 --> 00:39:41,520
ignore vulnerability it will appear on

890
00:39:41,520 --> 00:39:42,900
the next one

891
00:39:42,900 --> 00:39:46,440
but also overlapping Parts like if you

892
00:39:46,440 --> 00:39:48,180
have a directory listing affecting all

893
00:39:48,180 --> 00:39:51,060
of these it's useless to report a single

894
00:39:51,060 --> 00:39:52,740
finding for all of them just report for

895
00:39:52,740 --> 00:39:55,140
the top level the one that includes the

896
00:39:55,140 --> 00:39:57,540
others and it's enough because it's it's

897
00:39:57,540 --> 00:39:59,460
only one instance

898
00:39:59,460 --> 00:40:01,680
false positives so

899
00:40:01,680 --> 00:40:04,079
one of the most common false positives

900
00:40:04,079 --> 00:40:07,619
uh in zap and also burp so burp is not

901
00:40:07,619 --> 00:40:09,720
better than zappy with this regard it's

902
00:40:09,720 --> 00:40:13,320
the device tests so

903
00:40:13,320 --> 00:40:16,740
these scanners send a lot of payrolls

904
00:40:16,740 --> 00:40:18,619
like uh when testing for SQL injection

905
00:40:18,619 --> 00:40:22,500
with payloads like sleep 10 seconds and

906
00:40:22,500 --> 00:40:24,359
then they measure if the request takes

907
00:40:24,359 --> 00:40:26,579
more than 10 seconds it's vulnerable

908
00:40:26,579 --> 00:40:28,680
but

909
00:40:28,680 --> 00:40:31,380
um it's really common for this to create

910
00:40:31,380 --> 00:40:33,180
false positives because the applications

911
00:40:33,180 --> 00:40:35,280
just got slow

912
00:40:35,280 --> 00:40:37,520
even with 10 seconds

913
00:40:37,520 --> 00:40:40,260
applications easily get slow at a point

914
00:40:40,260 --> 00:40:43,079
that they take more than 10 seconds to

915
00:40:43,079 --> 00:40:46,880
reply and if you get five of those uh

916
00:40:46,880 --> 00:40:50,099
those false positives it's bad it's bad

917
00:40:50,099 --> 00:40:53,880
because uh everyone will be uh

918
00:40:53,880 --> 00:40:56,220
scrambling because it's a SQL injection

919
00:40:56,220 --> 00:40:58,980
and trying to analyze it and in the end

920
00:40:58,980 --> 00:41:01,380
it's a false positive so you don't want

921
00:41:01,380 --> 00:41:03,780
to raise this false positive and there

922
00:41:03,780 --> 00:41:06,420
are really simple techniques

923
00:41:06,420 --> 00:41:10,140
that can improve or reduce the number of

924
00:41:10,140 --> 00:41:12,240
false positives here I guess the

925
00:41:12,240 --> 00:41:16,740
scanners don't do this uh uh don't try

926
00:41:16,740 --> 00:41:18,839
to reduce the number of false positives

927
00:41:18,839 --> 00:41:20,520
here because I would say like for

928
00:41:20,520 --> 00:41:23,160
instance burp and zap are more designed

929
00:41:23,160 --> 00:41:25,859
to be used manually not like in a large

930
00:41:25,859 --> 00:41:27,839
scale so

931
00:41:27,839 --> 00:41:31,200
um they probably prefer uh to have uh

932
00:41:31,200 --> 00:41:33,839
this uh

933
00:41:33,839 --> 00:41:36,839
to to report the vulnerabilities and let

934
00:41:36,839 --> 00:41:40,380
the pen tester figuring out manually if

935
00:41:40,380 --> 00:41:42,420
there's something wrong but if you are

936
00:41:42,420 --> 00:41:44,339
scanning a thousand sites you don't want

937
00:41:44,339 --> 00:41:47,099
even 50 false positives because this

938
00:41:47,099 --> 00:41:48,839
will basically kill you it will overload

939
00:41:48,839 --> 00:41:52,020
you so one basic technique is to

940
00:41:52,020 --> 00:41:54,060
increase the payloads the delay instead

941
00:41:54,060 --> 00:41:57,240
of 10 seconds make it 20. and we tried

942
00:41:57,240 --> 00:42:00,420
that and it barely improved anything

943
00:42:00,420 --> 00:42:03,480
so the number of false positives barely

944
00:42:03,480 --> 00:42:05,280
decreased the number of applications

945
00:42:05,280 --> 00:42:08,460
that got really slow when we timeouts uh

946
00:42:08,460 --> 00:42:12,000
was so high that that was not enough

947
00:42:12,000 --> 00:42:14,359
so one of the things we ended up doing

948
00:42:14,359 --> 00:42:16,380
was to

949
00:42:16,380 --> 00:42:20,400
basically change a lot of Zap rules uh

950
00:42:20,400 --> 00:42:23,160
to instead of doing like the the typical

951
00:42:23,160 --> 00:42:26,579
test is like do five divide based

952
00:42:26,579 --> 00:42:30,180
requests or three and then three uh

953
00:42:30,180 --> 00:42:32,640
clean requests without a DIY and measure

954
00:42:32,640 --> 00:42:34,320
the time of the first tree and then of

955
00:42:34,320 --> 00:42:36,180
the second tree and the first three need

956
00:42:36,180 --> 00:42:39,780
to be slower but even with that uh we

957
00:42:39,780 --> 00:42:41,700
got a lot of false positives so we ended

958
00:42:41,700 --> 00:42:43,680
up okay what are the odds of the first

959
00:42:43,680 --> 00:42:45,720
three requests being slow and the other

960
00:42:45,720 --> 00:42:48,599
three uh also slow and being a false

961
00:42:48,599 --> 00:42:50,640
positive we thought okay let's just

962
00:42:50,640 --> 00:42:53,040
increment the number of measures let's

963
00:42:53,040 --> 00:42:55,260
do this six times we'll send six

964
00:42:55,260 --> 00:42:56,700
requests with the paywall and six

965
00:42:56,700 --> 00:42:58,500
requests with the without a payroll so

966
00:42:58,500 --> 00:43:01,560
what are the odds of 12 requests all of

967
00:43:01,560 --> 00:43:03,900
them being slow and apparently it's

968
00:43:03,900 --> 00:43:06,300
there it's high because we are basically

969
00:43:06,300 --> 00:43:09,300
doing the requests uh one one after the

970
00:43:09,300 --> 00:43:12,180
other so if the application is slow uh

971
00:43:12,180 --> 00:43:15,839
12 requests are not

972
00:43:15,839 --> 00:43:19,440
uh uh they are requested in a very short

973
00:43:19,440 --> 00:43:21,960
period of time so the application uh

974
00:43:21,960 --> 00:43:24,359
won't have time to recover and all of

975
00:43:24,359 --> 00:43:26,220
them will be slow so we ended up doing

976
00:43:26,220 --> 00:43:27,060
this

977
00:43:27,060 --> 00:43:29,819
interwave Queen by Walt Queen Pebble

978
00:43:29,819 --> 00:43:32,400
Queen fail and if I recall correctly we

979
00:43:32,400 --> 00:43:35,579
had to to do this five times five

980
00:43:35,579 --> 00:43:38,160
iterations of this uh until we could

981
00:43:38,160 --> 00:43:41,520
reduce the false positive right to uh uh

982
00:43:41,520 --> 00:43:43,140
something manageable something that

983
00:43:43,140 --> 00:43:45,300
would throw up like one or two each day

984
00:43:45,300 --> 00:43:49,740
so we can analyze so and this doesn't

985
00:43:49,740 --> 00:43:52,920
really slows down scan a lot because

986
00:43:52,920 --> 00:43:54,960
only

987
00:43:54,960 --> 00:43:58,079
yeah I I'm I'm I'm moving away from

988
00:43:58,079 --> 00:44:00,660
doing just three or four requests to

989
00:44:00,660 --> 00:44:03,660
maybe six plus six twelve or eight was

990
00:44:03,660 --> 00:44:05,760
eight sixteen so I'm doing instead of

991
00:44:05,760 --> 00:44:10,920
three three requests 18 but uh the the

992
00:44:10,920 --> 00:44:13,500
time you save not handling not manually

993
00:44:13,500 --> 00:44:15,599
reviewing false positives completely

994
00:44:15,599 --> 00:44:17,940
outweight the extra time it takes you to

995
00:44:17,940 --> 00:44:20,280
scan so uh it's a good trade-off

996
00:44:20,280 --> 00:44:22,500
actually it's it's a very good trade-off

997
00:44:22,500 --> 00:44:23,880
I don't think I'm running a little bit

998
00:44:23,880 --> 00:44:25,619
short on time so

999
00:44:25,619 --> 00:44:29,640
for uh for other vulnerabilities

1000
00:44:29,640 --> 00:44:32,760
it's also a good idea to try to extract

1001
00:44:32,760 --> 00:44:36,180
an Evidence whenever possible so uh

1002
00:44:36,180 --> 00:44:38,160
everyone knows if we see this in a

1003
00:44:38,160 --> 00:44:40,740
response the chances of being a false

1004
00:44:40,740 --> 00:44:42,540
positives are really well unless it's a

1005
00:44:42,540 --> 00:44:45,380
documentation site and it happens

1006
00:44:45,380 --> 00:44:50,040
so try to extract something that so try

1007
00:44:50,040 --> 00:44:51,119
to

1008
00:44:51,119 --> 00:44:52,740
take advantage a little bit of the

1009
00:44:52,740 --> 00:44:54,119
vulnerability and try to extract

1010
00:44:54,119 --> 00:44:56,280
something to make sure it's false it's

1011
00:44:56,280 --> 00:44:58,400
not a false positive so it's really easy

1012
00:44:58,400 --> 00:45:00,599
when vulnerabilities like this a

1013
00:45:00,599 --> 00:45:03,480
controversal to extract uh pasta with

1014
00:45:03,480 --> 00:45:07,200
the file and then do some format

1015
00:45:07,200 --> 00:45:09,720
matching some pattern matching and be

1016
00:45:09,720 --> 00:45:12,480
sure that it's not a false positive

1017
00:45:12,480 --> 00:45:15,780
you also need you also eventually will

1018
00:45:15,780 --> 00:45:18,000
need to code some empiric knowledge you

1019
00:45:18,000 --> 00:45:19,740
got so

1020
00:45:19,740 --> 00:45:20,940
um

1021
00:45:20,940 --> 00:45:22,560
when you start scanning a lot of web

1022
00:45:22,560 --> 00:45:25,619
applications and you uh starting start

1023
00:45:25,619 --> 00:45:28,079
to start to get false positives uh you

1024
00:45:28,079 --> 00:45:31,020
ended up with stuff like this like uh

1025
00:45:31,020 --> 00:45:32,819
finding saying there's a private IP

1026
00:45:32,819 --> 00:45:36,180
inside the Javascript file so yeah you

1027
00:45:36,180 --> 00:45:38,099
can easily exclude this vulnerability

1028
00:45:38,099 --> 00:45:40,440
for these type of files but then you

1029
00:45:40,440 --> 00:45:42,599
think ah but if I miss what if I miss

1030
00:45:42,599 --> 00:45:45,960
one So eventually after a while you

1031
00:45:45,960 --> 00:45:49,260
start noticing pattern patterns so this

1032
00:45:49,260 --> 00:45:51,240
is a very common pattern so and it's

1033
00:45:51,240 --> 00:45:54,839
really easy to code to change the rules

1034
00:45:54,839 --> 00:45:58,579
adds up it's open source so it's easy to

1035
00:45:58,579 --> 00:46:01,619
avoid these false positives and if even

1036
00:46:01,619 --> 00:46:03,359
if you don't want to do it inside zap

1037
00:46:03,359 --> 00:46:06,359
you can do it after so if you don't have

1038
00:46:06,359 --> 00:46:07,859
the knowledge or time to change this up

1039
00:46:07,859 --> 00:46:10,380
you can have like a post processing

1040
00:46:10,380 --> 00:46:11,760
something that receives the

1041
00:46:11,760 --> 00:46:13,920
vulnerabilities and basically put your

1042
00:46:13,920 --> 00:46:15,920
empiric knowledge there the the the

1043
00:46:15,920 --> 00:46:18,540
things you do manually when you look at

1044
00:46:18,540 --> 00:46:20,220
the findings of your scanner

1045
00:46:20,220 --> 00:46:22,440
start doing rough scripts that basically

1046
00:46:22,440 --> 00:46:24,780
filter out this this garbage so and this

1047
00:46:24,780 --> 00:46:27,180
really helps uh stripping out a lot of

1048
00:46:27,180 --> 00:46:29,720
false positives

1049
00:46:29,780 --> 00:46:34,500
yeah so I need to speed up so a scanner

1050
00:46:34,500 --> 00:46:37,500
you know takes a lot of resources

1051
00:46:37,500 --> 00:46:40,140
um it's not only about scanning so bad

1052
00:46:40,140 --> 00:46:44,460
coding uh it's also a decision so zap

1053
00:46:44,460 --> 00:46:46,500
developers made a decision of storing

1054
00:46:46,500 --> 00:46:48,540
every single request for the last five

1055
00:46:48,540 --> 00:46:51,540
batches so you have a lot of requests in

1056
00:46:51,540 --> 00:46:54,599
memory uh for instance burp only save

1057
00:46:54,599 --> 00:46:56,940
doesn't save in memory the requests with

1058
00:46:56,940 --> 00:46:59,400
the payloads zap thus so this is

1059
00:46:59,400 --> 00:47:01,740
something you need to consider and we

1060
00:47:01,740 --> 00:47:05,339
have seen zap taking up as much as 180

1061
00:47:05,339 --> 00:47:07,460
gigabytes on disk so

1062
00:47:07,460 --> 00:47:09,839
for this there's a really simple

1063
00:47:09,839 --> 00:47:13,079
solution zap as a defrag function and

1064
00:47:13,079 --> 00:47:14,640
basically the diffract function does

1065
00:47:14,640 --> 00:47:18,240
this the disk usage go drops a lot

1066
00:47:18,240 --> 00:47:20,040
whenever you run the diffract faction

1067
00:47:20,040 --> 00:47:22,020
you just need to be careful not to run

1068
00:47:22,020 --> 00:47:25,079
it constantly or basically the scan the

1069
00:47:25,079 --> 00:47:27,900
scanner will Halt and you won't be able

1070
00:47:27,900 --> 00:47:29,700
to scan anything so do this on a best

1071
00:47:29,700 --> 00:47:31,680
effort basis

1072
00:47:31,680 --> 00:47:32,460
um

1073
00:47:32,460 --> 00:47:34,260
you also need to be careful with regular

1074
00:47:34,260 --> 00:47:36,540
Expressions there's a few ones that uh

1075
00:47:36,540 --> 00:47:41,160
blow up when when with these by loads I

1076
00:47:41,160 --> 00:47:42,900
think we already submitted one or two

1077
00:47:42,900 --> 00:47:45,780
fixes Upstream to zap uh to be honest we

1078
00:47:45,780 --> 00:47:47,460
have like a pipeline of fixes to that

1079
00:47:47,460 --> 00:47:50,700
but it's hard to uh to submit things to

1080
00:47:50,700 --> 00:47:52,680
zap they are really strict about what

1081
00:47:52,680 --> 00:47:55,619
they accept which is good

1082
00:47:55,619 --> 00:47:58,859
um and that's it so

1083
00:47:58,859 --> 00:48:01,560
zap sorry requires a lot of security

1084
00:48:01,560 --> 00:48:03,300
knowledge and time so it's not suitable

1085
00:48:03,300 --> 00:48:05,940
for developers it's true no security

1086
00:48:05,940 --> 00:48:08,760
scanner is really suitable for

1087
00:48:08,760 --> 00:48:11,819
developers uh because of the false

1088
00:48:11,819 --> 00:48:13,319
positives because the time it takes them

1089
00:48:13,319 --> 00:48:16,560
to filter out stuff so uh

1090
00:48:16,560 --> 00:48:19,700
if you try to be careful and

1091
00:48:19,700 --> 00:48:21,839
scan only for the high risk

1092
00:48:21,839 --> 00:48:23,400
vulnerabilities and try to implement

1093
00:48:23,400 --> 00:48:26,280
some of these tactics to remove garbage

1094
00:48:26,280 --> 00:48:29,099
you might better get a result

1095
00:48:29,099 --> 00:48:29,760
um

1096
00:48:29,760 --> 00:48:32,760
but uh these are trade-offs that you

1097
00:48:32,760 --> 00:48:34,740
need to know but well in the end zap is

1098
00:48:34,740 --> 00:48:35,880
a great base if you want to build

1099
00:48:35,880 --> 00:48:37,680
something so

1100
00:48:37,680 --> 00:48:40,460
um I like bird it's easy to use it's a a

1101
00:48:40,460 --> 00:48:43,440
complete tool but zap is great if you

1102
00:48:43,440 --> 00:48:45,319
want to try something so it's very easy

1103
00:48:45,319 --> 00:48:47,940
very easy really to change and improve

1104
00:48:47,940 --> 00:48:50,040
rules so despite being having a huge

1105
00:48:50,040 --> 00:48:52,859
code base the code base for a single

1106
00:48:52,859 --> 00:48:54,599
rule like across site well cross-site

1107
00:48:54,599 --> 00:48:57,119
swimming is not the best example uh but

1108
00:48:57,119 --> 00:48:58,440
for I don't know server sighting Point

1109
00:48:58,440 --> 00:49:00,180
injection is small so it's really easy

1110
00:49:00,180 --> 00:49:04,079
for you to improve uh that and get

1111
00:49:04,079 --> 00:49:05,160
better results

1112
00:49:05,160 --> 00:49:08,220
and that's it I'm run out of time

1113
00:49:08,220 --> 00:49:09,540
questions

1114
00:49:09,540 --> 00:49:11,220
or more questions because there were

1115
00:49:11,220 --> 00:49:12,300
always

1116
00:49:12,300 --> 00:49:15,200
already a few

1117
00:49:15,839 --> 00:49:21,619
questions sorry sorry 180 gigabytes yeah

1118
00:49:21,619 --> 00:49:24,240
zap stores like a session file like the

1119
00:49:24,240 --> 00:49:27,480
burp State file on disk but because it

1120
00:49:27,480 --> 00:49:29,280
saves a lot of the requests like the

1121
00:49:29,280 --> 00:49:32,579
last few uh requests it does like all

1122
00:49:32,579 --> 00:49:35,880
the payloads uh it can grow a lot it can

1123
00:49:35,880 --> 00:49:38,099
the record I've seen at least that I

1124
00:49:38,099 --> 00:49:40,800
noticed wasn't under 180 gigabytes

1125
00:49:40,800 --> 00:49:43,319
because you have a lot of responses from

1126
00:49:43,319 --> 00:49:46,560
sites with JavaScript with uh well huge

1127
00:49:46,560 --> 00:49:49,440
uh sometimes if you are not careful you

1128
00:49:49,440 --> 00:49:51,200
ended up scanning images

1129
00:49:51,200 --> 00:49:55,200
which also takes a lot of time a lot of

1130
00:49:55,200 --> 00:49:58,260
space so yeah but the diffract function

1131
00:49:58,260 --> 00:50:00,300
works really great as long as you don't

1132
00:50:00,300 --> 00:50:03,480
try to defrag every time uh it works

1133
00:50:03,480 --> 00:50:06,599
right or you could just draw a bigger

1134
00:50:06,599 --> 00:50:09,119
volume at zap and since the scan won't

1135
00:50:09,119 --> 00:50:11,220
run for a long time

1136
00:50:11,220 --> 00:50:14,099
normally a few hours or maybe a day you

1137
00:50:14,099 --> 00:50:17,780
are actually not paying what

1138
00:50:23,280 --> 00:50:24,300
positive

1139
00:50:24,300 --> 00:50:26,000
instance

1140
00:50:26,000 --> 00:50:28,440
too but like you know you have the same

1141
00:50:28,440 --> 00:50:30,900
home space sleep space five second one

1142
00:50:30,900 --> 00:50:34,200
and that's command drives a match and I

1143
00:50:34,200 --> 00:50:35,940
wanted to I would rather take the site

1144
00:50:35,940 --> 00:50:37,380
offline and part about that than miss

1145
00:50:37,380 --> 00:50:39,119
that entirely too because that's

1146
00:50:39,119 --> 00:50:41,700
actually a human performance I've done

1147
00:50:41,700 --> 00:50:42,599
in the past that have worked

1148
00:50:42,599 --> 00:50:44,940
successfully is if you look at the

1149
00:50:44,940 --> 00:50:47,460
default setup for https responses on

1150
00:50:47,460 --> 00:50:49,380
zero your genetics and Apache is 60 by

1151
00:50:49,380 --> 00:50:53,760
the pulse I make my sleep 65. and the

1152
00:50:53,760 --> 00:50:55,800
request either gets dropped or it

1153
00:50:55,800 --> 00:50:57,540
actually Waits 65 seconds and then when

1154
00:50:57,540 --> 00:50:59,579
you see it above that you usually know

1155
00:50:59,579 --> 00:51:00,839
you have something it's either binary

1156
00:51:00,839 --> 00:51:02,400
yes the site is completely offline

1157
00:51:02,400 --> 00:51:04,760
because I've never seen that before

1158
00:51:04,760 --> 00:51:07,859
you think that's actually a good a good

1159
00:51:07,859 --> 00:51:10,319
idea it probably will get you good

1160
00:51:10,319 --> 00:51:13,680
results but it's also important so I

1161
00:51:13,680 --> 00:51:14,880
didn't differentiate a lot between

1162
00:51:14,880 --> 00:51:16,800
time-based testing between different

1163
00:51:16,800 --> 00:51:19,500
vulnerabilities but uh while we're

1164
00:51:19,500 --> 00:51:22,079
implementing I do so for SQL injection I

1165
00:51:22,079 --> 00:51:23,040
probably

1166
00:51:23,040 --> 00:51:26,040
um I know there's more loads so the

1167
00:51:26,040 --> 00:51:28,440
likelihood of missing one with the DIY

1168
00:51:28,440 --> 00:51:32,339
bicycle uh because I'm not doing proper

1169
00:51:32,339 --> 00:51:33,960
retesting video by this kind of low

1170
00:51:33,960 --> 00:51:35,640
because there's a lot of other payloads

1171
00:51:35,640 --> 00:51:37,740
and normally if I have a SQL injection

1172
00:51:37,740 --> 00:51:41,940
in one point I also uh I I will get sick

1173
00:51:41,940 --> 00:51:43,859
injections in more areas of the site for

1174
00:51:43,859 --> 00:51:45,900
common injection I would treat it

1175
00:51:45,900 --> 00:51:48,180
differently so I'll probably do more

1176
00:51:48,180 --> 00:51:49,859
attempts and that's something we

1177
00:51:49,859 --> 00:51:52,579
actually do most of the rules no longer

1178
00:51:52,579 --> 00:51:55,319
do just a one or two or three attempts

1179
00:51:55,319 --> 00:51:57,480
they do more attempts and you are

1180
00:51:57,480 --> 00:51:59,040
basically so you're basically doing more

1181
00:51:59,040 --> 00:52:01,680
requests to be sure but that doesn't

1182
00:52:01,680 --> 00:52:03,420
really increase your scan time a lot

1183
00:52:03,420 --> 00:52:06,660
because you're only doing that for only

1184
00:52:06,660 --> 00:52:08,700
a few of them only the ones that the

1185
00:52:08,700 --> 00:52:10,859
initially trigger the potential false

1186
00:52:10,859 --> 00:52:13,980
positive so if you go if you go from

1187
00:52:13,980 --> 00:52:15,480
doing a common injection testing that

1188
00:52:15,480 --> 00:52:17,280
was that's one request to one that does

1189
00:52:17,280 --> 00:52:19,800
five you are not doing five requests for

1190
00:52:19,800 --> 00:52:21,960
every parameter you are just doing that

1191
00:52:21,960 --> 00:52:24,240
for the ones that were a little bit

1192
00:52:24,240 --> 00:52:27,059
slower so in the end you might do a

1193
00:52:27,059 --> 00:52:29,099
little I don't know maybe five percent

1194
00:52:29,099 --> 00:52:32,520
more requests so it's a good result but

1195
00:52:32,520 --> 00:52:34,619
your idea also makes sense if you are

1196
00:52:34,619 --> 00:52:38,460
able to figure out which web server

1197
00:52:38,460 --> 00:52:40,800
yes sometimes it's not really easy but

1198
00:52:40,800 --> 00:52:41,520
yeah

1199
00:52:41,520 --> 00:52:44,480
but it's a good idea

1200
00:52:45,570 --> 00:52:53,679
[Applause]

