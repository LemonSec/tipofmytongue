1
00:00:00,000 --> 00:00:05,609
<font color="#CCCCCC">on moniker the incentive for this really</font>

2
00:00:03,870 --> 00:00:07,109
was I kind<font color="#E5E5E5"> of felt that there wasn't</font>

3
00:00:05,609 --> 00:00:11,759
enough discussion around<font color="#CCCCCC"> JavaScript</font>

4
00:00:07,109 --> 00:00:13,080
obfuscation and the obvious keishon

5
00:00:11,759 --> 00:00:15,480
samples that I was seeing<font color="#E5E5E5"> in the wild</font>

6
00:00:13,080 --> 00:00:19,109
they<font color="#E5E5E5"> were being used we're a little lame</font>

7
00:00:15,480 --> 00:00:25,198
could been<font color="#E5E5E5"> improved so wha so basically</font>

8
00:00:19,109 --> 00:00:28,769
<font color="#E5E5E5">I'm gonna go over oh hey I have a</font>

9
00:00:25,199 --> 00:00:30,119
microphone and<font color="#CCCCCC"> I apologize for</font><font color="#E5E5E5"> the</font>

10
00:00:28,769 --> 00:00:31,859
interruptions for anyone who's watching

11
00:00:30,119 --> 00:00:34,559
a recording is this live streaming or no

12
00:00:31,859 --> 00:00:39,690
cool that's better makes me<font color="#CCCCCC"> feel better</font>

13
00:00:34,559 --> 00:00:43,800
a quick overview just going to be doing

14
00:00:39,690 --> 00:00:45,620
an initial introduction give you some

15
00:00:43,800 --> 00:00:47,669
background set up a test environment

16
00:00:45,620 --> 00:00:50,010
setup the constraints for the test

17
00:00:47,670 --> 00:00:53,789
environment then rip apart a live sample

18
00:00:50,010 --> 00:00:55,440
of malicious<font color="#CCCCCC"> JavaScript go over some</font>

19
00:00:53,789 --> 00:00:57,180
additional notes where I think they did

20
00:00:55,440 --> 00:01:00,000
well where I don't think they did well

21
00:00:57,180 --> 00:01:01,079
but it could have done better and you

22
00:01:00,000 --> 00:01:06,180
know leave<font color="#E5E5E5"> that with some closing</font>

23
00:01:01,079 --> 00:01:09,479
thoughts on that the the purpose for

24
00:01:06,180 --> 00:01:11,430
<font color="#CCCCCC">this is the purpose for the presentation</font>

25
00:01:09,479 --> 00:01:14,039
<font color="#E5E5E5">really was just to kind of share</font>

26
00:01:11,430 --> 00:01:16,200
knowledge again I kind of felt like<font color="#E5E5E5"> I</font>

27
00:01:14,040 --> 00:01:17,520
was talking by myself a lot<font color="#CCCCCC"> about</font>

28
00:01:16,200 --> 00:01:20,490
JavaScript<font color="#E5E5E5"> obvi station whenever I was</font>

29
00:01:17,520 --> 00:01:22,140
going to local asp meet up sir or even

30
00:01:20,490 --> 00:01:23,880
<font color="#E5E5E5">to uh ha</font><font color="#CCCCCC"> i know that there are some</font>

31
00:01:22,140 --> 00:01:27,000
individuals who are a quite well versed

32
00:01:23,880 --> 00:01:29,369
in it egypt for example who contributes

33
00:01:27,000 --> 00:01:30,659
over to the<font color="#CCCCCC"> metasploit project</font><font color="#E5E5E5"> is pretty</font>

34
00:01:29,369 --> 00:01:32,909
<font color="#E5E5E5">well versed in</font><font color="#CCCCCC"> JavaScript IV sedation</font>

35
00:01:30,659 --> 00:01:34,110
but I just didn't<font color="#CCCCCC"> feel like a lot of</font>

36
00:01:32,909 --> 00:01:36,390
<font color="#E5E5E5">people</font><font color="#CCCCCC"> were playing around with it</font>

37
00:01:34,110 --> 00:01:43,140
<font color="#E5E5E5">enough and so easy this just seems like</font>

38
00:01:36,390 --> 00:01:44,880
<font color="#E5E5E5">something that should be pushed so</font><font color="#CCCCCC"> why I</font>

39
00:01:43,140 --> 00:01:47,040
<font color="#E5E5E5">think java javascript obfuscation</font>

40
00:01:44,880 --> 00:01:48,298
deserves a little<font color="#E5E5E5"> more attention really</font>

41
00:01:47,040 --> 00:01:49,920
revolves around some of the trends that

42
00:01:48,299 --> 00:01:52,920
I've been seen since<font color="#E5E5E5"> I've been working</font>

43
00:01:49,920 --> 00:01:55,229
in the security industry obviously you

44
00:01:52,920 --> 00:01:56,130
know as as you<font color="#E5E5E5"> start going to more more</font>

45
00:01:55,229 --> 00:01:57,539
applications you're going to start

46
00:01:56,130 --> 00:01:59,548
saying that a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> the feature sets</font>

47
00:01:57,540 --> 00:02:01,920
are pretty much<font color="#E5E5E5"> entirely delivered</font>

48
00:01:59,549 --> 00:02:03,960
through<font color="#E5E5E5"> JavaScript and the result of</font>

49
00:02:01,920 --> 00:02:05,310
that type of behavior is that more and

50
00:02:03,960 --> 00:02:07,140
more<font color="#CCCCCC"> users flight information is being</font>

51
00:02:05,310 --> 00:02:08,429
processed through JavaScript this

52
00:02:07,140 --> 00:02:10,949
introduces<font color="#E5E5E5"> all sorts of interesting</font>

53
00:02:08,429 --> 00:02:12,060
conditions but mostly it's just changing

54
00:02:10,949 --> 00:02:14,130
<font color="#E5E5E5">the dynamic of NJ</font>

55
00:02:12,060 --> 00:02:15,239
<font color="#E5E5E5">tax a lot of the injection attacks that</font>

56
00:02:14,130 --> 00:02:16,590
you're going<font color="#E5E5E5"> to start</font><font color="#CCCCCC"> seeing are going</font>

57
00:02:15,239 --> 00:02:18,180
to be reflected back with in<font color="#E5E5E5"> JavaScript</font>

58
00:02:16,590 --> 00:02:20,640
space changes the meta characters that

59
00:02:18,180 --> 00:02:22,080
you<font color="#E5E5E5"> need kind of trips everything up</font>

60
00:02:20,640 --> 00:02:24,299
from what people<font color="#CCCCCC"> have been mostly</font>

61
00:02:22,080 --> 00:02:27,810
focused on which is HTML based or

62
00:02:24,300 --> 00:02:29,760
attribute based injection you know heavy

63
00:02:27,810 --> 00:02:32,300
JavaScript heavy applications that

64
00:02:29,760 --> 00:02:35,340
you've seen exploits<font color="#CCCCCC"> for facebook blog</font>

65
00:02:32,300 --> 00:02:37,019
blogger Twitter and the usage

66
00:02:35,340 --> 00:02:39,300
percentages are pretty crazy I had no

67
00:02:37,019 --> 00:02:40,980
idea<font color="#E5E5E5"> that jquery's on over fifty percent</font>

68
00:02:39,300 --> 00:02:44,489
<font color="#E5E5E5">of the top ten thousand traversed sites</font>

69
00:02:40,980 --> 00:02:46,530
over fifty percent are using jQuery and

70
00:02:44,489 --> 00:02:49,140
jQuery in and of itself without any

71
00:02:46,530 --> 00:02:51,150
malicious content appended to it is a

72
00:02:49,140 --> 00:02:52,768
sink you can actually you can<font color="#CCCCCC"> actually</font>

73
00:02:51,150 --> 00:02:54,180
hit the jQuery file directly and

74
00:02:52,769 --> 00:02:55,709
actually get it to document dot write

75
00:02:54,180 --> 00:02:59,640
out to the Dom that was something<font color="#CCCCCC"> that</font>

76
00:02:55,709 --> 00:03:01,980
was proven<font color="#CCCCCC"> by a stefano de pablo out of</font>

77
00:02:59,640 --> 00:03:03,540
Italy a while ago I<font color="#E5E5E5"> think he's uh his</font>

78
00:03:01,980 --> 00:03:06,179
organization is called minded<font color="#E5E5E5"> security</font>

79
00:03:03,540 --> 00:03:07,769
check it out if you don't<font color="#E5E5E5"> know it but as</font>

80
00:03:06,180 --> 00:03:10,049
I said<font color="#CCCCCC"> JavaScript handles more</font><font color="#E5E5E5"> more</font>

81
00:03:07,769 --> 00:03:11,849
user-supplied content than ever before

82
00:03:10,049 --> 00:03:13,200
and as such you're going to start<font color="#E5E5E5"> seeing</font>

83
00:03:11,849 --> 00:03:15,290
<font color="#E5E5E5">a lot more injection attacks in that</font>

84
00:03:13,200 --> 00:03:17,190
space so you should<font color="#CCCCCC"> probably know how to</font>

85
00:03:15,290 --> 00:03:18,690
<font color="#CCCCCC">obvious get your content so you can</font>

86
00:03:17,190 --> 00:03:20,070
bypass really stupid filters that

87
00:03:18,690 --> 00:03:24,209
developers going to start putting up to

88
00:03:20,070 --> 00:03:26,519
try<font color="#E5E5E5"> and prevent injection attacks as I</font>

89
00:03:24,209 --> 00:03:28,880
said common validation solutions don't

90
00:03:26,519 --> 00:03:32,310
really address this problem a<font color="#E5E5E5"> lot of the</font>

91
00:03:28,880 --> 00:03:34,680
asp.net native solutions validate

92
00:03:32,310 --> 00:03:37,829
<font color="#CCCCCC">requests</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> or PHP's magic</font>

93
00:03:34,680 --> 00:03:39,750
quotes or any other MVC data validation

94
00:03:37,829 --> 00:03:43,590
library that's<font color="#E5E5E5"> out there spends a lot of</font>

95
00:03:39,750 --> 00:03:46,200
time focusing on specifically on string

96
00:03:43,590 --> 00:03:48,980
encapsulation so escaping any form of

97
00:03:46,200 --> 00:03:50,970
double quote<font color="#CCCCCC"> single quotes and then also</font>

98
00:03:48,980 --> 00:03:54,660
literal declarations for those

99
00:03:50,970 --> 00:03:57,000
characters so that's pretty<font color="#E5E5E5"> much all</font>

100
00:03:54,660 --> 00:04:03,500
they really<font color="#CCCCCC"> focus on laughs are just as</font>

101
00:03:57,000 --> 00:04:03,500
just as so what I'm looking for

102
00:04:06,620 --> 00:04:14,970
if<font color="#E5E5E5"> I</font><font color="#CCCCCC"> only had a brain uh wow I totally</font>

103
00:04:11,519 --> 00:04:17,489
spaced on that but they're also they

104
00:04:14,970 --> 00:04:18,839
also culpable for that the good news<font color="#CCCCCC"> is</font>

105
00:04:17,488 --> 00:04:21,328
<font color="#CCCCCC">the people have been actually working on</font>

106
00:04:18,839 --> 00:04:24,030
it<font color="#E5E5E5"> AV vendors decided finally that you</font>

107
00:04:21,329 --> 00:04:26,210
know that there is<font color="#E5E5E5"> no point in trying to</font>

108
00:04:24,030 --> 00:04:29,070
design some form of string based

109
00:04:26,210 --> 00:04:31,349
matching system against a fully touring

110
00:04:29,070 --> 00:04:34,919
capables language<font color="#CCCCCC"> kind of seems</font><font color="#E5E5E5"> like a</font>

111
00:04:31,350 --> 00:04:37,470
losing battle so they started triggering

112
00:04:34,919 --> 00:04:40,889
off of the actual events from the

113
00:04:37,470 --> 00:04:43,530
<font color="#CCCCCC">JavaScript execution stack itself and</font>

114
00:04:40,889 --> 00:04:46,139
using that as an exception condition to

115
00:04:43,530 --> 00:04:48,450
trigger if it sees any form of right

116
00:04:46,139 --> 00:04:51,450
outs to the<font color="#E5E5E5"> Dom or modifications of Dom</font>

117
00:04:48,450 --> 00:04:53,729
to it<font color="#CCCCCC"> to an what it considers a domain</font>

118
00:04:51,450 --> 00:04:56,520
<font color="#E5E5E5">that's not on an accepted whitelist</font>

119
00:04:53,729 --> 00:04:59,490
which is a lot easier solution right but

120
00:04:56,520 --> 00:05:01,500
even<font color="#E5E5E5"> now because of this kind of mashup</font>

121
00:04:59,490 --> 00:05:04,680
environment that we're in and due to<font color="#E5E5E5"> the</font>

122
00:05:01,500 --> 00:05:07,470
way the kind<font color="#E5E5E5"> of lagging behind same</font>

123
00:05:04,680 --> 00:05:08,910
origin policies often these end up

124
00:05:07,470 --> 00:05:11,130
getting turned off because they just

125
00:05:08,910 --> 00:05:13,190
create a huge amount of<font color="#E5E5E5"> noise it's a</font>

126
00:05:11,130 --> 00:05:15,180
false positive ratios are skyrocketing

127
00:05:13,190 --> 00:05:17,100
so most people don't<font color="#CCCCCC"> even pay attention</font>

128
00:05:15,180 --> 00:05:19,160
to the fact that<font color="#E5E5E5"> their AV says oh</font><font color="#CCCCCC"> by the</font>

129
00:05:17,100 --> 00:05:22,110
way<font color="#CCCCCC"> JavaScript's doing some weird stuff</font>

130
00:05:19,160 --> 00:05:24,330
and and so we're back to square one

131
00:05:22,110 --> 00:05:27,300
there's<font color="#CCCCCC"> one guy however</font><font color="#E5E5E5"> who is</font>

132
00:05:24,330 --> 00:05:30,150
incredibly stubborn his name is Gareth

133
00:05:27,300 --> 00:05:32,520
<font color="#E5E5E5">Hayes I believe how did the UK</font><font color="#CCCCCC"> i use a</font>

134
00:05:30,150 --> 00:05:35,010
website called the<font color="#CCCCCC"> spanner code at UK he</font>

135
00:05:32,520 --> 00:05:37,260
himself is a security services provider

136
00:05:35,010 --> 00:05:39,539
and he has been<font color="#CCCCCC"> heading up a project</font>

137
00:05:37,260 --> 00:05:42,599
called<font color="#CCCCCC"> j/s reg which is essentially a</font>

138
00:05:39,539 --> 00:05:45,479
heuristics regex library to directly

139
00:05:42,600 --> 00:05:48,240
take on JavaScript obfuscation and

140
00:05:45,479 --> 00:05:50,789
trying to address it through a string

141
00:05:48,240 --> 00:05:52,560
bass matching which to me seems insane

142
00:05:50,789 --> 00:05:55,020
but he's done a pretty good job at it

143
00:05:52,560 --> 00:06:00,840
that is a bar which is<font color="#E5E5E5"> better than no</font>

144
00:05:55,020 --> 00:06:02,250
bar so obvious<font color="#CCCCCC"> Gatien</font><font color="#E5E5E5"> most of you guys</font>

145
00:06:00,840 --> 00:06:03,450
I'm assuming have already had experience

146
00:06:02,250 --> 00:06:06,060
with obvious<font color="#CCCCCC"> keishon you already know</font>

147
00:06:03,450 --> 00:06:08,340
what it<font color="#E5E5E5"> is and in most cases a lot of</font>

148
00:06:06,060 --> 00:06:10,139
<font color="#E5E5E5">people that for me for example I treated</font>

149
00:06:08,340 --> 00:06:11,789
as a as a hobby as a puzzle it's for fun

150
00:06:10,139 --> 00:06:14,430
right identifying new and unique

151
00:06:11,789 --> 00:06:15,780
conditions in which you are able<font color="#E5E5E5"> to X</font>

152
00:06:14,430 --> 00:06:18,210
the exact same behavior you could write

153
00:06:15,780 --> 00:06:21,719
<font color="#CCCCCC">in you know five characters is kind of</font>

154
00:06:18,210 --> 00:06:23,010
fun and you<font color="#E5E5E5"> know the benefits are kind</font>

155
00:06:21,720 --> 00:06:24,930
<font color="#E5E5E5">of obvious you have the</font><font color="#CCCCCC"> ability to</font>

156
00:06:23,010 --> 00:06:26,969
disguise content that's<font color="#E5E5E5"> great everybody</font>

157
00:06:24,930 --> 00:06:29,370
knows that<font color="#E5E5E5"> but you can also set up traps</font>

158
00:06:26,970 --> 00:06:31,440
which is a little<font color="#E5E5E5"> to me a little more</font>

159
00:06:29,370 --> 00:06:33,150
entertaining trying to trip up

160
00:06:31,440 --> 00:06:35,040
individuals who ever trying to conduct

161
00:06:33,150 --> 00:06:36,870
analysis against your JavaScript and you

162
00:06:35,040 --> 00:06:39,930
can do this through a number of<font color="#E5E5E5"> ways you</font>

163
00:06:36,870 --> 00:06:43,140
could have remotes or sins so that you

164
00:06:39,930 --> 00:06:46,410
<font color="#E5E5E5">your there's a concept of packing and</font>

165
00:06:43,140 --> 00:06:49,140
unpacking right if you have a highly

166
00:06:46,410 --> 00:06:51,540
dense<font color="#CCCCCC"> JavaScript or avi scada</font><font color="#E5E5E5"> JavaScript</font>

167
00:06:49,140 --> 00:06:53,700
and what those Packers or unpack errs

168
00:06:51,540 --> 00:06:55,710
can do is change content that would in

169
00:06:53,700 --> 00:06:58,370
and of itself be syntactically invalid

170
00:06:55,710 --> 00:07:02,030
so if<font color="#E5E5E5"> someone got one portion of your</font>

171
00:06:58,370 --> 00:07:04,590
multi-step<font color="#CCCCCC"> JavaScript avocation payload</font>

172
00:07:02,030 --> 00:07:06,659
<font color="#E5E5E5">that portion could be syntactically</font>

173
00:07:04,590 --> 00:07:08,669
invalid if they ever tried to<font color="#E5E5E5"> actually</font>

174
00:07:06,660 --> 00:07:10,200
interpret what that did they'd spend

175
00:07:08,670 --> 00:07:11,940
hours trying to figure out<font color="#CCCCCC"> something</font>

176
00:07:10,200 --> 00:07:13,860
<font color="#CCCCCC">that honestly wasn't even there it's</font>

177
00:07:11,940 --> 00:07:16,080
just ghosts in the machine what ends up

178
00:07:13,860 --> 00:07:18,810
happening is Packer or the unpacker i

179
00:07:16,080 --> 00:07:21,419
should say that's already delivered in

180
00:07:18,810 --> 00:07:24,870
step one manipulates that<font color="#E5E5E5"> javascript on</font>

181
00:07:21,420 --> 00:07:26,550
the fly making it a syntax correct

182
00:07:24,870 --> 00:07:28,980
collecting all<font color="#CCCCCC"> this in the sin tax</font>

183
00:07:26,550 --> 00:07:31,800
issues and then rendering it or sorry

184
00:07:28,980 --> 00:07:33,330
executing it and there are a ton of

185
00:07:31,800 --> 00:07:36,750
other tricks<font color="#E5E5E5"> that you can do with this</font>

186
00:07:33,330 --> 00:07:39,180
just doing boolean triggers to identify

187
00:07:36,750 --> 00:07:41,340
conditions where they're using any form

188
00:07:39,180 --> 00:07:44,040
of an analysis automated analysis<font color="#CCCCCC"> engine</font>

189
00:07:41,340 --> 00:07:45,989
like if you're<font color="#E5E5E5"> being rendered in</font><font color="#CCCCCC"> rhino</font>

190
00:07:44,040 --> 00:07:47,730
rhino execution environments that have

191
00:07:45,990 --> 00:07:49,200
<font color="#CCCCCC">actually a browser you can fundamentally</font>

192
00:07:47,730 --> 00:07:51,180
change the behavior just<font color="#E5E5E5"> with one</font>

193
00:07:49,200 --> 00:07:52,590
boolean trigger right that's<font color="#E5E5E5"> not</font>

194
00:07:51,180 --> 00:07:54,000
necessarily going to stop them<font color="#E5E5E5"> from</font>

195
00:07:52,590 --> 00:07:55,530
figuring<font color="#E5E5E5"> out what the other script did</font>

196
00:07:54,000 --> 00:07:57,540
but it is going to prevent automated

197
00:07:55,530 --> 00:07:59,219
honey you know<font color="#E5E5E5"> honey pots from figuring</font>

198
00:07:57,540 --> 00:08:00,830
out<font color="#E5E5E5"> what your content was doing if all</font>

199
00:07:59,220 --> 00:08:04,980
they're doing is triggering off of the

200
00:08:00,830 --> 00:08:06,390
execution events right and then<font color="#E5E5E5"> finally</font>

201
00:08:04,980 --> 00:08:09,060
compression and I do<font color="#E5E5E5"> have an</font><font color="#CCCCCC"> asterisk</font>

202
00:08:06,390 --> 00:08:12,270
next to that<font color="#E5E5E5"> because that's give or take</font>

203
00:08:09,060 --> 00:08:15,990
sometimes you get benefits it there's a

204
00:08:12,270 --> 00:08:18,690
very perfect condition where your pack

205
00:08:15,990 --> 00:08:20,730
or unpacker will be able<font color="#E5E5E5"> to take some</font>

206
00:08:18,690 --> 00:08:22,140
content and make it smaller than it

207
00:08:20,730 --> 00:08:23,670
actually was and you gain a bunch<font color="#E5E5E5"> of</font>

208
00:08:22,140 --> 00:08:25,500
performance gains from that you<font color="#E5E5E5"> can also</font>

209
00:08:23,670 --> 00:08:27,060
simplify the execution process but that

210
00:08:25,500 --> 00:08:27,750
doesn't always correlate with

211
00:08:27,060 --> 00:08:30,000
obfuscation

212
00:08:27,750 --> 00:08:31,470
sometimes it doesn't actually make it

213
00:08:30,000 --> 00:08:35,400
any more difficult to<font color="#E5E5E5"> interpret what the</font>

214
00:08:31,470 --> 00:08:37,349
content is doing so<font color="#E5E5E5"> that that's 5050</font>

215
00:08:35,400 --> 00:08:38,579
sometimes you get compression most of

216
00:08:37,349 --> 00:08:40,080
the time you don't write if you want to

217
00:08:38,580 --> 00:08:46,800
do the<font color="#E5E5E5"> really fun stuff it's going to be</font>

218
00:08:40,080 --> 00:08:47,850
like 50 to<font color="#CCCCCC"> 1 ratio so setting up a test</font>

219
00:08:46,800 --> 00:08:49,650
environment you want to go through the

220
00:08:47,850 --> 00:08:50,690
process of conducting some analysis

221
00:08:49,650 --> 00:08:53,880
against<font color="#CCCCCC"> JavaScript what do you need</font>

222
00:08:50,690 --> 00:08:56,730
personally I prefer just running through

223
00:08:53,880 --> 00:08:58,530
<font color="#E5E5E5">a browser there are programmatic</font>

224
00:08:56,730 --> 00:09:01,560
analysis approaches the you where you

225
00:08:58,530 --> 00:09:04,350
can<font color="#E5E5E5"> use the div station libraries or</font>

226
00:09:01,560 --> 00:09:05,640
deification scripts<font color="#CCCCCC"> j/s unpack is</font>

227
00:09:04,350 --> 00:09:08,820
probably the most<font color="#E5E5E5"> well-known for that</font>

228
00:09:05,640 --> 00:09:10,710
and a<font color="#E5E5E5"> lot of people oughta mate their</font>

229
00:09:08,820 --> 00:09:12,630
honey pots and automate just JavaScript

230
00:09:10,710 --> 00:09:15,900
the obfuscation to general with that

231
00:09:12,630 --> 00:09:17,340
library if you don't feel so comfortable

232
00:09:15,900 --> 00:09:18,720
with with standing up your own

233
00:09:17,340 --> 00:09:20,910
environment and manually walking through

234
00:09:18,720 --> 00:09:22,770
an execution path you can use<font color="#E5E5E5"> Mozilla</font>

235
00:09:20,910 --> 00:09:26,819
that project hasn't been supported since

236
00:09:22,770 --> 00:09:27,689
2008 so go ahead<font color="#CCCCCC"> at your own risk but at</font>

237
00:09:26,820 --> 00:09:30,000
least everything is self-contained

238
00:09:27,690 --> 00:09:33,360
within a single interface you're<font color="#E5E5E5"> able to</font>

239
00:09:30,000 --> 00:09:35,150
walk the HTTP<font color="#CCCCCC"> request responses and</font>

240
00:09:33,360 --> 00:09:39,630
conditions where it's a multi-step

241
00:09:35,150 --> 00:09:40,920
execution flow so you can that's really

242
00:09:39,630 --> 00:09:42,300
<font color="#E5E5E5">the benefit that</font><font color="#CCCCCC"> you get from</font><font color="#E5E5E5"> having a</font>

243
00:09:40,920 --> 00:09:43,560
browser instead of doing programmatic

244
00:09:42,300 --> 00:09:45,719
analysis you don't have to write an

245
00:09:43,560 --> 00:09:47,640
entire HTTP stack to handle<font color="#CCCCCC"> all the</font>

246
00:09:45,720 --> 00:09:49,770
call-outs to additional content and then

247
00:09:47,640 --> 00:09:51,210
maintain context across all of<font color="#E5E5E5"> those div</font>

248
00:09:49,770 --> 00:09:52,319
skated scripts right because

249
00:09:51,210 --> 00:09:53,520
programmatically that's a pain in the

250
00:09:52,320 --> 00:09:57,630
ass but<font color="#E5E5E5"> if you're doing it manually</font>

251
00:09:53,520 --> 00:10:00,180
pretty easy the only problem is manually

252
00:09:57,630 --> 00:10:03,570
you can't do it in mass but for this

253
00:10:00,180 --> 00:10:08,160
case for the examples we have firefox

254
00:10:03,570 --> 00:10:11,220
3.6 point 2 3 3<font color="#CCCCCC"> 2 2 3 i think</font><font color="#E5E5E5"> that's</font>

255
00:10:08,160 --> 00:10:12,930
right 3.6 is my favorite I i know

256
00:10:11,220 --> 00:10:14,850
there's like 14 billion versions of

257
00:10:12,930 --> 00:10:17,099
<font color="#CCCCCC">firefox now and frankly I</font><font color="#E5E5E5"> don't care</font>

258
00:10:14,850 --> 00:10:19,050
enough about html5<font color="#E5E5E5"> to start using it as</font>

259
00:10:17,100 --> 00:10:20,880
my main<font color="#E5E5E5"> browser it doesn't mean I don't</font>

260
00:10:19,050 --> 00:10:23,510
<font color="#E5E5E5">have it installed and testing in it but</font>

261
00:10:20,880 --> 00:10:26,100
I prefer to<font color="#E5E5E5"> stay on the stable workhorse</font>

262
00:10:23,510 --> 00:10:27,270
plugins these versions correlate with

263
00:10:26,100 --> 00:10:28,410
<font color="#CCCCCC">the version</font><font color="#E5E5E5"> of Firefox that I'm running</font>

264
00:10:27,270 --> 00:10:30,270
there are<font color="#E5E5E5"> newer versions of these</font>

265
00:10:28,410 --> 00:10:32,610
plugins but they only apply to newer

266
00:10:30,270 --> 00:10:34,290
versions of Firefox but web developer

267
00:10:32,610 --> 00:10:37,230
toolbar Firebug

268
00:10:34,290 --> 00:10:39,870
user agent switcher and then<font color="#E5E5E5"> I wrap</font>

269
00:10:37,230 --> 00:10:41,279
everything under sandboxie and<font color="#E5E5E5"> sandbox</font><font color="#CCCCCC"> e</font>

270
00:10:39,870 --> 00:10:42,690
is beneficial if you ever actually

271
00:10:41,279 --> 00:10:44,970
intend on pulling down the actual

272
00:10:42,690 --> 00:10:47,880
malicious content and you don't want it

273
00:10:44,970 --> 00:10:49,380
to just execute on the fly and if it

274
00:10:47,880 --> 00:10:52,649
<font color="#CCCCCC">happens to</font><font color="#E5E5E5"> actually target your Firefox</font>

275
00:10:49,380 --> 00:10:53,670
environment might not be so good and

276
00:10:52,649 --> 00:10:55,110
that's<font color="#E5E5E5"> just one layer</font><font color="#CCCCCC"> of protection</font>

277
00:10:53,670 --> 00:10:57,599
right if you're messing with malware you

278
00:10:55,110 --> 00:11:00,230
know<font color="#E5E5E5"> normally they say don't double wrap</font>

279
00:10:57,600 --> 00:11:02,759
this time you definitely<font color="#E5E5E5"> want to</font>

280
00:11:00,230 --> 00:11:04,139
<font color="#CCCCCC">Hardware run it on anything anything</font>

281
00:11:02,759 --> 00:11:06,000
that they can<font color="#E5E5E5"> support the software</font>

282
00:11:04,139 --> 00:11:07,860
that's all that really<font color="#CCCCCC"> matters in my</font>

283
00:11:06,000 --> 00:11:10,019
personally I run on everything off the

284
00:11:07,860 --> 00:11:12,149
MS and and those are disposable you can

285
00:11:10,019 --> 00:11:13,740
template them and then you just revert

286
00:11:12,149 --> 00:11:18,959
every<font color="#E5E5E5"> time you you go through a new</font>

287
00:11:13,740 --> 00:11:20,100
sample so the constraints for what this

288
00:11:18,959 --> 00:11:21,810
<font color="#E5E5E5">particular sample and I'm gonna walk</font>

289
00:11:20,100 --> 00:11:23,370
<font color="#E5E5E5">through the constraints for this as I</font>

290
00:11:21,810 --> 00:11:27,029
did<font color="#E5E5E5"> most of my testing all within</font>

291
00:11:23,370 --> 00:11:30,000
Firefox and ie 8 and again all the

292
00:11:27,029 --> 00:11:31,259
results valid JavaScript all render

293
00:11:30,000 --> 00:11:32,790
under both of those environments and

294
00:11:31,259 --> 00:11:34,740
again I'm focusing on JavaScript<font color="#CCCCCC"> and</font>

295
00:11:32,790 --> 00:11:36,209
it's flexible it's everywhere that's why

296
00:11:34,740 --> 00:11:37,860
javascript obfuscation<font color="#E5E5E5"> is awesome and</font>

297
00:11:36,209 --> 00:11:45,000
pretty much<font color="#E5E5E5"> everything else is kind of</font>

298
00:11:37,860 --> 00:11:47,130
lame example analysis so this a piece of

299
00:11:45,000 --> 00:11:48,690
malware came across on a wordpress

300
00:11:47,130 --> 00:11:51,209
install it could have gotten there

301
00:11:48,690 --> 00:11:53,310
through an automated script that came by

302
00:11:51,209 --> 00:11:55,260
and did an auto exploit and change to

303
00:11:53,310 --> 00:11:57,750
file it could have gotten there manually

304
00:11:55,260 --> 00:11:59,790
<font color="#E5E5E5">I don't know all</font><font color="#CCCCCC"> I know is that</font><font color="#E5E5E5"> this job</font>

305
00:11:57,750 --> 00:12:01,889
this jquery file definitely was not a

306
00:11:59,790 --> 00:12:03,329
normal<font color="#CCCCCC"> jQuery file it had all the</font>

307
00:12:01,889 --> 00:12:06,290
characteristics of one<font color="#E5E5E5"> point four point</font>

308
00:12:03,329 --> 00:12:09,269
two except it<font color="#CCCCCC"> had a</font><font color="#E5E5E5"> huge block of</font>

309
00:12:06,290 --> 00:12:11,010
appended<font color="#CCCCCC"> JavaScript at the end of it and</font>

310
00:12:09,269 --> 00:12:12,630
prior to<font color="#E5E5E5"> executing that huge block of</font>

311
00:12:11,010 --> 00:12:16,199
appended JavaScript it unset all

312
00:12:12,630 --> 00:12:18,600
variables for<font color="#E5E5E5"> jQuery first which was the</font>

313
00:12:16,199 --> 00:12:20,699
one thing<font color="#E5E5E5"> that made me go huh wait a</font>

314
00:12:18,600 --> 00:12:22,860
minute<font color="#E5E5E5"> that's what tipped me off it's a</font>

315
00:12:20,699 --> 00:12:26,519
two-stage deployment mechanism first one

316
00:12:22,860 --> 00:12:28,740
is just it's a really long<font color="#E5E5E5"> have you</font>

317
00:12:26,519 --> 00:12:30,689
skated process to check whether or<font color="#E5E5E5"> not</font>

318
00:12:28,740 --> 00:12:34,050
your user agent header has<font color="#CCCCCC"> IE in it</font>

319
00:12:30,689 --> 00:12:37,589
seriously<font color="#E5E5E5"> that's just crazy waste of</font>

320
00:12:34,050 --> 00:12:39,508
space but<font color="#CCCCCC"> okay and then the second stage</font>

321
00:12:37,589 --> 00:12:41,130
is just payload payload deployment which

322
00:12:39,509 --> 00:12:42,630
really is just a<font color="#E5E5E5"> huge hash with a bunch</font>

323
00:12:41,130 --> 00:12:44,279
of unique<font color="#E5E5E5"> IDs going and hitting some</font>

324
00:12:42,630 --> 00:12:45,750
remote server and they're using<font color="#CCCCCC"> D</font><font color="#E5E5E5"> HTML</font>

325
00:12:44,279 --> 00:12:47,939
to pump down

326
00:12:45,750 --> 00:12:49,320
each new payload into your<font color="#CCCCCC"> Dom so the</font>

327
00:12:47,940 --> 00:12:53,430
victim browser is constantly touching

328
00:12:49,320 --> 00:12:55,740
each new payload none of the AV vendors

329
00:12:53,430 --> 00:12:57,390
caught this and as I said<font color="#CCCCCC"> before only a</font>

330
00:12:55,740 --> 00:13:01,050
few<font color="#E5E5E5"> AVS right now are really triggering</font>

331
00:12:57,390 --> 00:13:02,790
off the execution events most of them

332
00:13:01,050 --> 00:13:05,790
are still doing just<font color="#CCCCCC"> straight up string</font>

333
00:13:02,790 --> 00:13:08,430
checks mostly with regards to the<font color="#E5E5E5"> Dom</font>

334
00:13:05,790 --> 00:13:10,020
they don't even<font color="#E5E5E5"> really check</font><font color="#CCCCCC"> JavaScript</font>

335
00:13:08,430 --> 00:13:11,670
anymore they mostly just<font color="#E5E5E5"> check whether</font>

336
00:13:10,020 --> 00:13:13,380
<font color="#E5E5E5">or not the request out hit some</font>

337
00:13:11,670 --> 00:13:14,849
blacklisted domain against some<font color="#E5E5E5"> list</font>

338
00:13:13,380 --> 00:13:16,890
that they get through some service that

339
00:13:14,850 --> 00:13:18,540
they pay<font color="#CCCCCC"> for right that's what most of</font>

340
00:13:16,890 --> 00:13:19,770
<font color="#E5E5E5">the av's do because mostly AVS don't</font>

341
00:13:18,540 --> 00:13:22,560
have the budget or the team to be<font color="#CCCCCC"> able</font>

342
00:13:19,770 --> 00:13:24,569
to do authentic research the only three

343
00:13:22,560 --> 00:13:26,280
that caught it were have asked<font color="#CCCCCC"> angie</font>

344
00:13:24,570 --> 00:13:27,960
data<font color="#CCCCCC"> i guess i've asked</font><font color="#E5E5E5"> five is just</font>

345
00:13:26,280 --> 00:13:32,880
another version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> vast huh maybe</font>

346
00:13:27,960 --> 00:13:35,490
it's just too bad stats anyway it's less

347
00:13:32,880 --> 00:13:36,810
than<font color="#E5E5E5"> ten percent caught that this was</font>

348
00:13:35,490 --> 00:13:39,150
actually a malicious piece of content

349
00:13:36,810 --> 00:13:40,500
and again it could have been<font color="#E5E5E5"> deployed</font>

350
00:13:39,150 --> 00:13:42,180
through a worm it could have been

351
00:13:40,500 --> 00:13:44,820
deployed<font color="#E5E5E5"> through any number of its</font>

352
00:13:42,180 --> 00:13:46,890
<font color="#E5E5E5">WordPress right so I think that's kind</font>

353
00:13:44,820 --> 00:13:48,270
of interesting that that<font color="#E5E5E5"> only only three</font>

354
00:13:46,890 --> 00:13:52,680
would actually catch it out of the 44

355
00:13:48,270 --> 00:13:55,589
that were tested this is the first

356
00:13:52,680 --> 00:13:58,260
<font color="#E5E5E5">section of the JavaScript and the funny</font>

357
00:13:55,589 --> 00:14:01,050
part is is this<font color="#CCCCCC"> is the easy one this is</font>

358
00:13:58,260 --> 00:14:04,050
really<font color="#E5E5E5"> really simple all it does it's</font>

359
00:14:01,050 --> 00:14:08,250
just a giant array of octal encoded

360
00:14:04,050 --> 00:14:09,630
strings that way simple the variable

361
00:14:08,250 --> 00:14:10,740
declaration if you notice has the

362
00:14:09,630 --> 00:14:12,089
underscore in front of it that's

363
00:14:10,740 --> 00:14:13,890
actually a valid character for variable

364
00:14:12,089 --> 00:14:15,360
declarations invalid characters would<font color="#E5E5E5"> be</font>

365
00:14:13,890 --> 00:14:17,120
like numbers or any of the other

366
00:14:15,360 --> 00:14:24,720
reserved metacharacter space percentage

367
00:14:17,120 --> 00:14:26,910
presents ! ?<font color="#E5E5E5"> so that's have stuff octal</font>

368
00:14:24,720 --> 00:14:29,040
screw octal strings all wrapped with an

369
00:14:26,910 --> 00:14:32,520
array there's a null entry in there

370
00:14:29,040 --> 00:14:34,140
don't worry about<font color="#CCCCCC"> that guy and then the</font>

371
00:14:32,520 --> 00:14:37,650
array is all assigned to one variable

372
00:14:34,140 --> 00:14:39,510
and everything's fine it moves on I just

373
00:14:37,650 --> 00:14:42,150
do a quick index of this<font color="#E5E5E5"> this is the div</font>

374
00:14:39,510 --> 00:14:45,560
skated content or the<font color="#E5E5E5"> the encoded</font>

375
00:14:42,150 --> 00:14:49,550
content i should say the<font color="#E5E5E5"> only two and</font>

376
00:14:45,560 --> 00:14:49,550
indexes of this array that<font color="#E5E5E5"> matter are</font>

377
00:14:49,790 --> 00:14:55,170
did I skip a slide

378
00:14:52,450 --> 00:14:58,240
we're<font color="#E5E5E5"> going to go forward and then back</font>

379
00:14:55,170 --> 00:15:00,280
the only<font color="#E5E5E5"> two indexes of this array that</font>

380
00:14:58,240 --> 00:15:02,950
matter are<font color="#CCCCCC"> the or forced and the fourth</font>

381
00:15:00,280 --> 00:15:05,439
sorry indexes the first one is actually

382
00:15:02,950 --> 00:15:07,360
<font color="#CCCCCC">the the evaluated content that is the</font>

383
00:15:05,440 --> 00:15:08,890
<font color="#CCCCCC">javascript that will run but it's all</font>

384
00:15:07,360 --> 00:15:10,360
compressed it's just a bunch<font color="#E5E5E5"> of</font>

385
00:15:08,890 --> 00:15:14,350
representative values none<font color="#CCCCCC"> of it's been</font>

386
00:15:10,360 --> 00:15:16,270
populated yet the fourth one is a just a

387
00:15:14,350 --> 00:15:18,640
giant hash and eventually what happens

388
00:15:16,270 --> 00:15:20,650
is the unpacker goes and just does a

389
00:15:18,640 --> 00:15:22,270
split off that and creates an array out

390
00:15:20,650 --> 00:15:24,550
of it<font color="#CCCCCC"> right and the delimit the</font>

391
00:15:22,270 --> 00:15:30,100
<font color="#E5E5E5">delineator is pretty clear it's it's a</font>

392
00:15:24,550 --> 00:15:31,479
pipe<font color="#E5E5E5"> oh one of</font><font color="#CCCCCC"> the things</font><font color="#E5E5E5"> that I would</font>

393
00:15:30,100 --> 00:15:33,130
note that they could<font color="#CCCCCC"> have done</font><font color="#E5E5E5"> better in</font>

394
00:15:31,480 --> 00:15:34,690
which I kind<font color="#E5E5E5"> of surprised that no the</font>

395
00:15:33,130 --> 00:15:36,670
av's caught this because if<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AVS were</font>

396
00:15:34,690 --> 00:15:39,430
doing just basic all they had to do was

397
00:15:36,670 --> 00:15:42,930
just unencoded opto representation write

398
00:15:39,430 --> 00:15:46,109
novels pretty obvious you see it /<font color="#CCCCCC"> x-2</font>

399
00:15:42,930 --> 00:15:50,020
<font color="#E5E5E5">characters / attacks two digits / back</font>

400
00:15:46,110 --> 00:15:52,480
but they didn't so but what they do have

401
00:15:50,020 --> 00:15:55,420
is<font color="#E5E5E5"> pretty heavy what I call weighted</font>

402
00:15:52,480 --> 00:15:56,470
keywords document element these are the

403
00:15:55,420 --> 00:15:59,430
types of things that are<font color="#E5E5E5"> going to</font>

404
00:15:56,470 --> 00:16:03,310
trigger really really<font color="#E5E5E5"> rudimentary</font>

405
00:15:59,430 --> 00:16:04,599
malicious<font color="#E5E5E5"> JavaScript like filters it</font>

406
00:16:03,310 --> 00:16:06,459
would have been<font color="#E5E5E5"> just as easier to create</font>

407
00:16:04,600 --> 00:16:08,050
the<font color="#E5E5E5"> first entry of that array to be doc</font>

408
00:16:06,460 --> 00:16:09,700
and the second act and share that array

409
00:16:08,050 --> 00:16:11,170
to be you meant and it would have

410
00:16:09,700 --> 00:16:13,090
bypassed any risk of any of those

411
00:16:11,170 --> 00:16:14,920
catching it so I<font color="#CCCCCC"> think that that could</font>

412
00:16:13,090 --> 00:16:17,500
have been improved but otherwise you

413
00:16:14,920 --> 00:16:20,620
know I guess octal is good enough<font color="#CCCCCC"> for</font>

414
00:16:17,500 --> 00:16:25,360
now one<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> other things that I</font>

415
00:16:20,620 --> 00:16:28,210
wanted<font color="#E5E5E5"> to mention we go back so again</font>

416
00:16:25,360 --> 00:16:29,440
they use octal encoding you know but

417
00:16:28,210 --> 00:16:31,450
that's the<font color="#E5E5E5"> only Codding type that they</font>

418
00:16:29,440 --> 00:16:32,440
use and<font color="#E5E5E5"> the beauty about JavaScript</font>

419
00:16:31,450 --> 00:16:33,760
especially when you use string

420
00:16:32,440 --> 00:16:35,170
encapsulation<font color="#E5E5E5"> is you can mix and match</font>

421
00:16:33,760 --> 00:16:38,020
any encoding you want and it's still

422
00:16:35,170 --> 00:16:39,729
interprets at all to asking all at once

423
00:16:38,020 --> 00:16:41,590
so they could have mixed it with a

424
00:16:39,730 --> 00:16:43,780
variable amount of encoding types they

425
00:16:41,590 --> 00:16:46,290
could have used Unicode octal or sorry

426
00:16:43,780 --> 00:16:48,490
octaves what they were using and<font color="#E5E5E5"> hex</font>

427
00:16:46,290 --> 00:16:50,079
decimal is a little different decimal

428
00:16:48,490 --> 00:16:52,690
you have to pass it through some some

429
00:16:50,080 --> 00:16:55,600
some methods before you can actually get

430
00:16:52,690 --> 00:16:58,180
the<font color="#E5E5E5"> raw string out of it but Unicode</font>

431
00:16:55,600 --> 00:17:00,010
octal and hex can be mashed together all

432
00:16:58,180 --> 00:17:01,660
in one string and<font color="#CCCCCC"> JavaScript's native</font>

433
00:17:00,010 --> 00:17:02,600
execution environment be like oh I know

434
00:17:01,660 --> 00:17:06,020
<font color="#CCCCCC">what that is</font><font color="#E5E5E5"> in ascii</font>

435
00:17:02,600 --> 00:17:07,699
you're good to go so and again what

436
00:17:06,020 --> 00:17:10,760
we're what we care<font color="#CCCCCC"> about here is to</font>

437
00:17:07,699 --> 00:17:13,579
prevent<font color="#E5E5E5"> any key strings to be referenced</font>

438
00:17:10,760 --> 00:17:15,199
so if you have a obvious<font color="#CCCCCC"> keishon script</font>

439
00:17:13,579 --> 00:17:17,869
that you're running you want to be able

440
00:17:15,199 --> 00:17:19,579
to iterate over these different encoding

441
00:17:17,869 --> 00:17:21,799
types as you're generating a single

442
00:17:19,579 --> 00:17:24,438
string not just every entry within the

443
00:17:21,799 --> 00:17:26,418
<font color="#E5E5E5">the hash or the array but every string</font>

444
00:17:24,439 --> 00:17:28,160
itself each<font color="#E5E5E5"> character you're iterating</font>

445
00:17:26,419 --> 00:17:30,080
over those three optional<font color="#E5E5E5"> and coding</font>

446
00:17:28,160 --> 00:17:33,410
types right<font color="#CCCCCC"> there's just a mess no</font>

447
00:17:30,080 --> 00:17:35,928
sheesh it doesn't<font color="#CCCCCC"> even look right but it</font>

448
00:17:33,410 --> 00:17:37,970
works because<font color="#E5E5E5"> Java scripts awesome so</font>

449
00:17:35,929 --> 00:17:40,940
here's some custom payloads I wrote

450
00:17:37,970 --> 00:17:41,750
myself just to kind of represent some of

451
00:17:40,940 --> 00:17:43,520
<font color="#E5E5E5">the things they could have done better</font>

452
00:17:41,750 --> 00:17:46,159
so the<font color="#CCCCCC"> reason why they used the</font>

453
00:17:43,520 --> 00:17:48,770
underscore is pretty pretty obvious they

454
00:17:46,159 --> 00:17:50,630
basically didn't<font color="#CCCCCC"> want to have alpha at</font>

455
00:17:48,770 --> 00:17:52,789
all as the lead of the variable because

456
00:17:50,630 --> 00:17:55,640
almost every single rudimentary unpacker

457
00:17:52,789 --> 00:17:59,990
says variable starts at either VAR space

458
00:17:55,640 --> 00:18:01,789
or letter equals so they're just by

459
00:17:59,990 --> 00:18:03,470
passing that<font color="#E5E5E5"> regex check but you can</font>

460
00:18:01,789 --> 00:18:04,760
obviate it even further because a lot of

461
00:18:03,470 --> 00:18:07,100
<font color="#E5E5E5">those checks occur before the</font>

462
00:18:04,760 --> 00:18:09,350
interpretation of the encoded value and

463
00:18:07,100 --> 00:18:11,928
you can use<font color="#CCCCCC"> Unicode directly in a</font>

464
00:18:09,350 --> 00:18:14,240
variable declaration so you can mix<font color="#E5E5E5"> and</font>

465
00:18:11,929 --> 00:18:16,220
match ascii and unicode as well as the

466
00:18:14,240 --> 00:18:17,510
underscore is the leader and just

467
00:18:16,220 --> 00:18:18,710
completely collect everything up<font color="#CCCCCC"> because</font>

468
00:18:17,510 --> 00:18:19,610
they're definitely if they're not

469
00:18:18,710 --> 00:18:23,030
<font color="#E5E5E5">checking for underscore they're</font>

470
00:18:19,610 --> 00:18:24,559
definitely not checking for / one of the

471
00:18:23,030 --> 00:18:28,399
things that and<font color="#E5E5E5"> again as I said before</font>

472
00:18:24,559 --> 00:18:30,770
you<font color="#CCCCCC"> can use ink packers and unpack errs</font>

473
00:18:28,400 --> 00:18:32,620
to modify a variable declaration so you

474
00:18:30,770 --> 00:18:36,200
could have a syntactically incorrect

475
00:18:32,620 --> 00:18:38,600
variable like numeric value and then

476
00:18:36,200 --> 00:18:39,860
modify that on the fly later on so even

477
00:18:38,600 --> 00:18:41,209
though initially<font color="#CCCCCC"> it looks very</font>

478
00:18:39,860 --> 00:18:42,709
compressed what is syntactically

479
00:18:41,210 --> 00:18:44,030
incorrect<font color="#E5E5E5"> your unpacker ends of</font>

480
00:18:42,710 --> 00:18:46,220
modifying that to something<font color="#CCCCCC"> else it's</font>

481
00:18:44,030 --> 00:18:48,200
more accessible reduces the overall

482
00:18:46,220 --> 00:18:49,730
message size and like<font color="#E5E5E5"> I said doubles is</font>

483
00:18:48,200 --> 00:18:50,990
a trap because if they ever just<font color="#E5E5E5"> get</font>

484
00:18:49,730 --> 00:18:52,789
that intermediary layer they're not

485
00:18:50,990 --> 00:18:57,200
going to know how to<font color="#E5E5E5"> execute it because</font>

486
00:18:52,789 --> 00:18:59,600
it's sent actively incorrect<font color="#E5E5E5"> um what</font>

487
00:18:57,200 --> 00:19:03,169
<font color="#E5E5E5">else did I do here Oh references to</font>

488
00:18:59,600 --> 00:19:04,668
window most<font color="#CCCCCC"> you guys probably know that</font>

489
00:19:03,169 --> 00:19:05,960
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> you there's a whole</font>

490
00:19:04,669 --> 00:19:11,500
dictionary lists they can reference

491
00:19:05,960 --> 00:19:13,910
window right this window document parent

492
00:19:11,500 --> 00:19:18,800
and<font color="#CCCCCC"> the list goes on and on</font><font color="#E5E5E5"> and I</font>

493
00:19:13,910 --> 00:19:20,810
have it<font color="#E5E5E5"> further noted later on but what</font>

494
00:19:18,800 --> 00:19:22,399
<font color="#CCCCCC">I</font><font color="#E5E5E5"> wanted to represent here was it</font>

495
00:19:20,810 --> 00:19:28,190
conditions where and where you could not

496
00:19:22,400 --> 00:19:30,110
<font color="#CCCCCC">using coding so awful encoding the hex</font>

497
00:19:28,190 --> 00:19:31,940
encoding need to be encapsulated within

498
00:19:30,110 --> 00:19:35,229
a string you can't literally you can't

499
00:19:31,940 --> 00:19:37,670
declare them literally within the the

500
00:19:35,230 --> 00:19:39,440
<font color="#CCCCCC">either a variable declaration are open</font>

501
00:19:37,670 --> 00:19:42,140
unen capsulated because the characters

502
00:19:39,440 --> 00:19:44,270
that<font color="#E5E5E5"> they use to represent the encoding</font>

503
00:19:42,140 --> 00:19:46,610
type causes a syntax error it in and of

504
00:19:44,270 --> 00:19:50,000
itself has significance for other things

505
00:19:46,610 --> 00:19:53,540
like mathematical calculations or regex

506
00:19:50,000 --> 00:19:55,310
matches so octal and hex are limited in

507
00:19:53,540 --> 00:19:57,560
<font color="#E5E5E5">this way but it's also context-driven</font>

508
00:19:55,310 --> 00:19:59,270
right because you can use hex<font color="#E5E5E5"> encoding</font>

509
00:19:57,560 --> 00:20:00,830
if you're<font color="#E5E5E5"> going to pass it through a URL</font>

510
00:19:59,270 --> 00:20:02,990
first so you can<font color="#CCCCCC"> use it</font><font color="#E5E5E5"> for things like</font>

511
00:20:00,830 --> 00:20:05,720
a<font color="#E5E5E5"> JavaScript directive right so you can</font>

512
00:20:02,990 --> 00:20:08,210
do document dot location equals you know

513
00:20:05,720 --> 00:20:10,640
string<font color="#CCCCCC"> JavaScript colon and you can use</font>

514
00:20:08,210 --> 00:20:12,080
hex encoding there and clear without any

515
00:20:10,640 --> 00:20:14,600
encapsulation but<font color="#E5E5E5"> that again</font><font color="#CCCCCC"> it's</font>

516
00:20:12,080 --> 00:20:20,480
context dependent play with it it gets

517
00:20:14,600 --> 00:20:23,270
<font color="#CCCCCC">pretty easy after a while so yeah this</font>

518
00:20:20,480 --> 00:20:25,820
is just me yeah just<font color="#E5E5E5"> playing around with</font>

519
00:20:23,270 --> 00:20:27,920
with different encoding types and and

520
00:20:25,820 --> 00:20:29,480
how you can bind those two default

521
00:20:27,920 --> 00:20:31,970
objects right the default object being

522
00:20:29,480 --> 00:20:33,470
the alert right and I'm binding that to

523
00:20:31,970 --> 00:20:35,120
several variables and then I'm iterating

524
00:20:33,470 --> 00:20:36,310
over that several<font color="#CCCCCC"> times and just</font>

525
00:20:35,120 --> 00:20:38,479
throwing<font color="#E5E5E5"> it all over the place right</font>

526
00:20:36,310 --> 00:20:40,060
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> another thing that I</font><font color="#E5E5E5"> think this</font>

527
00:20:38,480 --> 00:20:42,200
piece of JavaScript<font color="#CCCCCC"> we'll get into later</font>

528
00:20:40,060 --> 00:20:45,200
doesn't<font color="#E5E5E5"> really do very well they don't</font>

529
00:20:42,200 --> 00:20:46,190
hide what they're trying to do they kind

530
00:20:45,200 --> 00:20:49,250
of assume you're not going to<font color="#E5E5E5"> get past</font>

531
00:20:46,190 --> 00:20:51,680
the the recursion or the unpacking and

532
00:20:49,250 --> 00:20:53,960
so they'd never really tried to

533
00:20:51,680 --> 00:20:56,640
obfuscate what default objects they

534
00:20:53,960 --> 00:20:59,060
attempt to reference

535
00:20:56,640 --> 00:20:59,060
we on time

536
00:21:04,090 --> 00:21:11,959
so as I said<font color="#E5E5E5"> it before the entire</font>

537
00:21:09,529 --> 00:21:14,779
purpose for this particular this first

538
00:21:11,960 --> 00:21:16,429
step of the<font color="#E5E5E5"> JavaScript was just to check</font>

539
00:21:14,779 --> 00:21:20,890
whether<font color="#E5E5E5"> or not your user agent header</font>

540
00:21:16,429 --> 00:21:23,120
contained the strength<font color="#CCCCCC"> i e which is</font>

541
00:21:20,890 --> 00:21:24,710
conducted by<font color="#CCCCCC"> this second portion so the</font>

542
00:21:23,120 --> 00:21:26,719
first portion<font color="#E5E5E5"> was just a giant array</font>

543
00:21:24,710 --> 00:21:30,169
octal encoded I wanted<font color="#E5E5E5"> to other</font>

544
00:21:26,720 --> 00:21:32,990
uncoating types you could use the second

545
00:21:30,169 --> 00:21:35,419
portion<font color="#E5E5E5"> is a function which references</font>

546
00:21:32,990 --> 00:21:37,610
itself wrapped in an evaluation so it's

547
00:21:35,419 --> 00:21:39,890
just<font color="#E5E5E5"> this auto declared function the</font>

548
00:21:37,610 --> 00:21:42,969
function right now I<font color="#E5E5E5"> have it obvi skated</font>

549
00:21:39,890 --> 00:21:44,960
as a function contents ellipses

550
00:21:42,970 --> 00:21:46,940
contained within it was just too<font color="#CCCCCC"> much</font>

551
00:21:44,960 --> 00:21:50,419
text to fit within a slide but what it

552
00:21:46,940 --> 00:21:53,860
does is<font color="#CCCCCC"> it has four if or while if loose</font>

553
00:21:50,419 --> 00:21:56,360
to replace for any of the other more

554
00:21:53,860 --> 00:21:59,649
accessible looping methods for recursion

555
00:21:56,360 --> 00:22:04,279
<font color="#E5E5E5">and it uses</font><font color="#CCCCCC"> while if to iterate over a</font>

556
00:21:59,649 --> 00:22:05,989
to iterate over first it iterates over

557
00:22:04,279 --> 00:22:07,970
some additional content to generate a

558
00:22:05,990 --> 00:22:10,159
second hash and then it takes the two

559
00:22:07,970 --> 00:22:12,649
hashes that it has<font color="#CCCCCC"> the one that was</font>

560
00:22:10,159 --> 00:22:14,149
already predefined and then a second one

561
00:22:12,649 --> 00:22:16,610
that<font color="#CCCCCC"> I generated during</font><font color="#E5E5E5"> the unpacking</font>

562
00:22:14,149 --> 00:22:18,860
process and it uses both of those and

563
00:22:16,610 --> 00:22:22,219
concatenates them to<font color="#E5E5E5"> create the</font>

564
00:22:18,860 --> 00:22:23,479
underlying<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> and execute all to</font>

565
00:22:22,220 --> 00:22:26,720
check whether<font color="#E5E5E5"> or not your user agent</font>

566
00:22:23,480 --> 00:22:32,179
matter has<font color="#CCCCCC"> IE in it which I still think</font>

567
00:22:26,720 --> 00:22:33,590
is crazy amount of<font color="#E5E5E5"> work for that the i'm</font>

568
00:22:32,179 --> 00:22:35,360
going<font color="#E5E5E5"> to use syntax highlighting just to</font>

569
00:22:33,590 --> 00:22:39,379
kind of highlight what it's doing as<font color="#CCCCCC"> i</font>

570
00:22:35,360 --> 00:22:41,689
said it's a self-contained the the

571
00:22:39,380 --> 00:22:44,600
unpacker is self-contained it declares

572
00:22:41,690 --> 00:22:46,490
the variables off of the hash right

573
00:22:44,600 --> 00:22:52,399
<font color="#E5E5E5">after it which is highlighted now in</font>

574
00:22:46,490 --> 00:22:54,110
green so variable 0 x DF<font color="#E5E5E5"> FBX one that</font>

575
00:22:52,399 --> 00:22:56,408
correlates to the first entry of the

576
00:22:54,110 --> 00:22:58,279
hash it<font color="#E5E5E5"> has some static numeric</font>

577
00:22:56,409 --> 00:23:01,240
declarations and that's again for

578
00:22:58,279 --> 00:23:06,750
generating the second hash that<font color="#E5E5E5"> it uses</font>

579
00:23:01,240 --> 00:23:08,340
and then it continues on this the

580
00:23:06,750 --> 00:23:14,250
I'm going<font color="#E5E5E5"> to just reference them by the</font>

581
00:23:08,340 --> 00:23:16,439
net value the variable 40<font color="#E5E5E5"> X BFF DX for</font>

582
00:23:14,250 --> 00:23:19,080
that's the second array that's what gets

583
00:23:16,440 --> 00:23:25,290
generated within the unpacker and then

584
00:23:19,080 --> 00:23:27,540
the<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> x DF FB</font><font color="#E5E5E5"> x6 is the object literal</font>

585
00:23:25,290 --> 00:23:36,300
which references the prior hash the

586
00:23:27,540 --> 00:23:39,540
prior hash split microsoft plenty of

587
00:23:36,300 --> 00:23:41,520
money<font color="#E5E5E5"> alright so this way too long to</font>

588
00:23:39,540 --> 00:23:43,649
<font color="#CCCCCC">explain so i just did a visual it's a</font>

589
00:23:41,520 --> 00:23:44,850
lot easier so you have the eval is the

590
00:23:43,650 --> 00:23:46,320
encompassing rapper you have the

591
00:23:44,850 --> 00:23:47,580
function you<font color="#E5E5E5"> have the two hashes that</font>

592
00:23:46,320 --> 00:23:49,320
are passed within the function and

593
00:23:47,580 --> 00:23:50,850
defined within the function and<font color="#CCCCCC"> I've</font>

594
00:23:49,320 --> 00:23:54,360
cleaned up a little bit both of those

595
00:23:50,850 --> 00:23:56,879
feed into<font color="#CCCCCC"> the final function the x1</font>

596
00:23:54,360 --> 00:23:58,729
which is what<font color="#E5E5E5"> I showed you earlier the</font>

597
00:23:56,880 --> 00:24:02,370
obvious<font color="#CCCCCC"> cated single character reference</font>

598
00:23:58,730 --> 00:24:04,260
string that becomes the actual

599
00:24:02,370 --> 00:24:05,820
functionality that gets rendered so both

600
00:24:04,260 --> 00:24:06,840
hashes feed into that because<font color="#E5E5E5"> they're</font>

601
00:24:05,820 --> 00:24:08,280
the<font color="#E5E5E5"> representations of all the</font>

602
00:24:06,840 --> 00:24:11,040
characters for that and then all of that

603
00:24:08,280 --> 00:24:15,780
<font color="#E5E5E5">gets evaluated and now they can check</font>

604
00:24:11,040 --> 00:24:18,120
whether<font color="#E5E5E5"> or not you have ie in</font>

605
00:24:15,780 --> 00:24:23,790
your user agent header that<font color="#CCCCCC"> was what all</font>

606
00:24:18,120 --> 00:24:25,409
<font color="#CCCCCC">of that was for and and it's kind of in</font>

607
00:24:23,790 --> 00:24:27,840
at this point with all that effort<font color="#E5E5E5"> to</font>

608
00:24:25,410 --> 00:24:30,690
get<font color="#CCCCCC"> to that you have to assume that they</font>

609
00:24:27,840 --> 00:24:32,490
were<font color="#CCCCCC"> using some form of automated obvi</font>

610
00:24:30,690 --> 00:24:33,570
station system nobody would manually go

611
00:24:32,490 --> 00:24:36,060
through all<font color="#E5E5E5"> that effort and then only</font>

612
00:24:33,570 --> 00:24:37,800
check for a literal string so this is

613
00:24:36,060 --> 00:24:40,710
<font color="#E5E5E5">programmatically generated and I have</font>

614
00:24:37,800 --> 00:24:42,240
other evidence of other JavaScript

615
00:24:40,710 --> 00:24:44,490
samples that function fundamentally

616
00:24:42,240 --> 00:24:46,740
similar with very similar variable

617
00:24:44,490 --> 00:24:48,150
declaration styles that indicate to me

618
00:24:46,740 --> 00:24:49,950
that it is programmatically generated

619
00:24:48,150 --> 00:24:52,020
but it uses slightly different obvious

620
00:24:49,950 --> 00:24:53,430
cash and methods each time but I don't

621
00:24:52,020 --> 00:24:57,030
have enough time<font color="#CCCCCC"> to go through every</font>

622
00:24:53,430 --> 00:24:59,460
single<font color="#E5E5E5"> one of them some</font><font color="#CCCCCC"> things they</font>

623
00:24:57,030 --> 00:25:01,110
could have done<font color="#E5E5E5"> better there's all sorts</font>

624
00:24:59,460 --> 00:25:03,750
of ways you can fingerprint a user agent

625
00:25:01,110 --> 00:25:05,040
well beyond just checking user agent

626
00:25:03,750 --> 00:25:06,480
strengths right there's default

627
00:25:05,040 --> 00:25:08,370
variables that gets set and<font color="#E5E5E5"> all sorts of</font>

628
00:25:06,480 --> 00:25:11,130
weird way as indicating versions based

629
00:25:08,370 --> 00:25:12,449
on the there's like time delays when you

630
00:25:11,130 --> 00:25:14,670
reference default objects that can

631
00:25:12,450 --> 00:25:16,170
indicate what version of JavaScript the

632
00:25:14,670 --> 00:25:17,280
JavaScript runtime environment is

633
00:25:16,170 --> 00:25:19,430
running which then indicates what

634
00:25:17,280 --> 00:25:21,080
browser you're running so it gets

635
00:25:19,430 --> 00:25:23,120
pretty convoluted they could<font color="#E5E5E5"> have used</font>

636
00:25:21,080 --> 00:25:24,919
more accurate fingerprinting techniques

637
00:25:23,120 --> 00:25:27,560
also I'm kind of<font color="#E5E5E5"> disappointed that there</font>

638
00:25:24,920 --> 00:25:29,210
was no booby traps not even once after

639
00:25:27,560 --> 00:25:30,560
all this obviously ated content all they

640
00:25:29,210 --> 00:25:32,000
did<font color="#CCCCCC"> was</font><font color="#E5E5E5"> just reference the user agent</font>

641
00:25:30,560 --> 00:25:34,040
header if you don't have it<font color="#CCCCCC"> then they</font>

642
00:25:32,000 --> 00:25:37,880
<font color="#E5E5E5">bounced you to an iframe that takes you</font>

643
00:25:34,040 --> 00:25:39,200
to<font color="#E5E5E5"> some default Google landing page but</font>

644
00:25:37,880 --> 00:25:42,250
if you do have<font color="#CCCCCC"> it then they point to</font>

645
00:25:39,200 --> 00:25:49,340
some statically defined URL the 91 dot

646
00:25:42,250 --> 00:25:52,280
1962 16 20 /url dot PHP when loaded so

647
00:25:49,340 --> 00:25:56,480
you have IE now what it utilizes d<font color="#CCCCCC"> HTML</font>

648
00:25:52,280 --> 00:25:59,990
to iterate<font color="#CCCCCC"> over a huge decimal encoded</font>

649
00:25:56,480 --> 00:26:02,570
array each entry of<font color="#CCCCCC"> the array is a</font>

650
00:25:59,990 --> 00:26:05,930
unique ID that unique ID gets appended

651
00:26:02,570 --> 00:26:07,820
to a<font color="#E5E5E5"> URL and then d</font><font color="#CCCCCC"> HTML print it out to</font>

652
00:26:05,930 --> 00:26:09,110
the Dom so that your browser goes and

653
00:26:07,820 --> 00:26:11,120
pulls down each one of these unique

654
00:26:09,110 --> 00:26:13,399
payloads it's essentially a shotgun if

655
00:26:11,120 --> 00:26:15,379
you have IE<font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> try everything I</font>

656
00:26:13,400 --> 00:26:17,540
know and hopefully one<font color="#CCCCCC"> of those will</font>

657
00:26:15,380 --> 00:26:21,260
exploit you and if it<font color="#E5E5E5"> does sweet I got a</font>

658
00:26:17,540 --> 00:26:24,680
new<font color="#E5E5E5"> button if it didn't and then it has</font>

659
00:26:21,260 --> 00:26:27,200
a meta refresh in 30 milliseconds<font color="#E5E5E5"> so</font>

660
00:26:24,680 --> 00:26:29,840
apparently<font color="#CCCCCC"> these o days work fast but</font>

661
00:26:27,200 --> 00:26:32,090
the meta refresh bounces you<font color="#E5E5E5"> to some non</font>

662
00:26:29,840 --> 00:26:35,000
or benign page that actually generates

663
00:26:32,090 --> 00:26:38,209
click revenue for them clever little RB

664
00:26:35,000 --> 00:26:39,590
ends if they can't get a bot out of you

665
00:26:38,210 --> 00:26:43,640
though they'll get a clicks out of you

666
00:26:39,590 --> 00:26:46,580
and they'll<font color="#CCCCCC"> make money anyway let's see</font>

667
00:26:43,640 --> 00:26:48,110
what<font color="#CCCCCC"> else</font><font color="#E5E5E5"> do I have here oh so again</font>

668
00:26:46,580 --> 00:26:51,080
<font color="#CCCCCC">going back over some of</font><font color="#E5E5E5"> the things they</font>

669
00:26:48,110 --> 00:26:53,870
<font color="#CCCCCC">did and didn't do they didn't do order</font>

670
00:26:51,080 --> 00:26:55,610
of operations type techniques which<font color="#E5E5E5"> I</font>

671
00:26:53,870 --> 00:26:58,280
found kind of lame order of operations

672
00:26:55,610 --> 00:26:59,959
<font color="#CCCCCC">is awesome because you can use</font><font color="#E5E5E5"> again</font>

673
00:26:58,280 --> 00:27:02,860
bitwise operators logic you<font color="#E5E5E5"> can use</font>

674
00:26:59,960 --> 00:27:06,470
arithmetic and in doing those in line

675
00:27:02,860 --> 00:27:07,669
forces<font color="#E5E5E5"> JavaScript to change the method</font>

676
00:27:06,470 --> 00:27:10,130
in which it's interpreting data

677
00:27:07,670 --> 00:27:13,070
resulting in functions that normally

678
00:27:10,130 --> 00:27:14,830
would not be evaluated first would

679
00:27:13,070 --> 00:27:18,370
instead be considered part of a string

680
00:27:14,830 --> 00:27:21,260
evaluated prior so you can nest

681
00:27:18,370 --> 00:27:23,659
representations of data in ways that is

682
00:27:21,260 --> 00:27:25,010
on surface value seems syntactically

683
00:27:23,660 --> 00:27:27,620
incorrect unless you understand the

684
00:27:25,010 --> 00:27:29,600
<font color="#E5E5E5">concepts of order order order of</font>

685
00:27:27,620 --> 00:27:31,699
operations and included that within your

686
00:27:29,600 --> 00:27:32,658
div skater or whatever programmatic

687
00:27:31,700 --> 00:27:35,299
analysis engine that you

688
00:27:32,659 --> 00:27:37,669
created right so bored of operations

689
00:27:35,299 --> 00:27:40,429
very very useful also very useful<font color="#E5E5E5"> for</font>

690
00:27:37,669 --> 00:27:42,940
things like if you're doing injection

691
00:27:40,429 --> 00:27:46,519
into<font color="#CCCCCC"> JavaScript space but you can't use</font>

692
00:27:42,940 --> 00:27:48,379
parenthetical our jury encapsulation you

693
00:27:46,519 --> 00:27:49,669
just need a string escape order of

694
00:27:48,379 --> 00:27:50,779
operations<font color="#CCCCCC"> and it doesn't matter if</font>

695
00:27:49,669 --> 00:27:52,369
everything<font color="#E5E5E5"> else isn't technically</font>

696
00:27:50,779 --> 00:27:56,330
incorrect after that it executed<font color="#CCCCCC"> your</font>

697
00:27:52,369 --> 00:28:00,099
<font color="#E5E5E5">JavaScript first because you know that's</font>

698
00:27:56,330 --> 00:28:02,059
awesome cross-site scripting is awesome

699
00:28:00,099 --> 00:28:03,229
some of the other things<font color="#CCCCCC"> they didn't do</font>

700
00:28:02,059 --> 00:28:05,149
they didn't<font color="#E5E5E5"> take advantage of all the</font>

701
00:28:03,229 --> 00:28:07,039
other<font color="#E5E5E5"> ways you could define strings they</font>

702
00:28:05,149 --> 00:28:08,988
they just do string literal every time

703
00:28:07,039 --> 00:28:10,369
they programmatically generated some

704
00:28:08,989 --> 00:28:12,080
unique string they made<font color="#E5E5E5"> that your</font>

705
00:28:10,369 --> 00:28:14,149
variable and then<font color="#E5E5E5"> they that equal</font>

706
00:28:12,080 --> 00:28:17,418
something else but there's a lot of

707
00:28:14,149 --> 00:28:19,820
tricks that where you can bind variables

708
00:28:17,419 --> 00:28:22,009
that you<font color="#E5E5E5"> can define that's outside of</font>

709
00:28:19,820 --> 00:28:23,720
<font color="#CCCCCC">the scope of that</font><font color="#E5E5E5"> it's app that will</font>

710
00:28:22,009 --> 00:28:26,779
require additional parameters to

711
00:28:23,720 --> 00:28:28,729
whatever analyzer is is trying to figure

712
00:28:26,779 --> 00:28:30,979
<font color="#CCCCCC">out what you're doing that's outside of</font>

713
00:28:28,729 --> 00:28:32,629
<font color="#E5E5E5">what they would normally check for so</font>

714
00:28:30,979 --> 00:28:33,979
you know variables obviously that's what

715
00:28:32,629 --> 00:28:35,408
they were using but they could use<font color="#CCCCCC"> you</font>

716
00:28:33,979 --> 00:28:37,820
know regex more thing there's a

717
00:28:35,409 --> 00:28:39,919
transition of data types so that's what

718
00:28:37,820 --> 00:28:42,168
the integer type conversion is is for

719
00:28:39,919 --> 00:28:43,429
but you can do<font color="#E5E5E5"> that from array to string</font>

720
00:28:42,169 --> 00:28:49,099
and you can I mean you can<font color="#E5E5E5"> iterate over</font>

721
00:28:43,429 --> 00:28:53,629
all the different now that data types

722
00:28:49,099 --> 00:28:55,609
it's very very useful<font color="#E5E5E5"> and then also</font>

723
00:28:53,629 --> 00:28:57,559
evaluation I mean they literally set it

724
00:28:55,609 --> 00:29:01,489
out like that should have triggered at

725
00:28:57,559 --> 00:29:04,999
least half the av's why is<font color="#E5E5E5"> it triggered</font>

726
00:29:01,489 --> 00:29:07,039
why why is<font color="#E5E5E5"> it doing a vow but yeah I</font>

727
00:29:04,999 --> 00:29:08,749
mean<font color="#E5E5E5"> and then again you can do this ton</font>

728
00:29:07,039 --> 00:29:10,789
of different ways these are<font color="#CCCCCC"> just some of</font>

729
00:29:08,749 --> 00:29:12,710
them where you can just auto evaluate

730
00:29:10,789 --> 00:29:14,059
content order of operations<font color="#CCCCCC"> kind of</font>

731
00:29:12,710 --> 00:29:15,379
feeds into this right because if<font color="#E5E5E5"> you do</font>

732
00:29:14,059 --> 00:29:16,729
order of operations within an array

733
00:29:15,379 --> 00:29:19,549
declaration then it evaluates your

734
00:29:16,729 --> 00:29:21,080
content before the other see these<font color="#E5E5E5"> kind</font>

735
00:29:19,549 --> 00:29:23,779
<font color="#CCCCCC">of nest together and you should play</font>

736
00:29:21,080 --> 00:29:25,249
with<font color="#E5E5E5"> them I have a whole bunch of I know</font>

737
00:29:23,779 --> 00:29:27,489
I'm talking really fast and it's because

738
00:29:25,249 --> 00:29:29,450
trying to get through a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> content</font>

739
00:29:27,489 --> 00:29:30,950
<font color="#E5E5E5">there is a whole inch of reference</font>

740
00:29:29,450 --> 00:29:32,179
material at the<font color="#E5E5E5"> end of this slide deck</font>

741
00:29:30,950 --> 00:29:34,369
and hopefully<font color="#CCCCCC"> that'll</font><font color="#E5E5E5"> be made available</font>

742
00:29:32,179 --> 00:29:35,509
to others and you can and there's also

743
00:29:34,369 --> 00:29:37,189
my email<font color="#E5E5E5"> so if you ever have any</font>

744
00:29:35,509 --> 00:29:38,359
questions<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can just for samples that</font>

745
00:29:37,190 --> 00:29:40,720
you want<font color="#E5E5E5"> me to check out i'm always down</font>

746
00:29:38,359 --> 00:29:40,720
for that

747
00:29:41,179 --> 00:29:47,730
<font color="#E5E5E5">dom modification right appendchild</font><font color="#CCCCCC"> ten</font>

748
00:29:43,769 --> 00:29:51,869
minutes<font color="#E5E5E5"> so basic Dom modification type</font>

749
00:29:47,730 --> 00:29:53,429
stuff always<font color="#E5E5E5"> very very useful but pretty</font>

750
00:29:51,869 --> 00:29:54,509
freakin obvious if they're<font color="#CCCCCC"> doing any</font>

751
00:29:53,429 --> 00:29:56,730
form of event checking they're

752
00:29:54,509 --> 00:29:58,320
definitely going to catch<font color="#CCCCCC"> that which is</font>

753
00:29:56,730 --> 00:30:05,639
why setters are always really really

754
00:29:58,320 --> 00:30:12,720
<font color="#CCCCCC">useful and then final thoughts huh I'm</font>

755
00:30:05,639 --> 00:30:14,490
like within<font color="#E5E5E5"> my time by like a lot so I a</font>

756
00:30:12,720 --> 00:30:17,429
TD a bit if that wasn't obvious during

757
00:30:14,490 --> 00:30:18,720
this presentation I have a lot of

758
00:30:17,429 --> 00:30:20,369
thoughts going on in my<font color="#E5E5E5"> head what I</font>

759
00:30:18,720 --> 00:30:22,289
wanted<font color="#E5E5E5"> this presentation originally to</font>

760
00:30:20,369 --> 00:30:25,199
<font color="#CCCCCC">be when I made the proposal was to</font>

761
00:30:22,289 --> 00:30:27,840
create a<font color="#CCCCCC"> JavaScript obfuscation taxonomy</font>

762
00:30:25,200 --> 00:30:29,850
that is a<font color="#E5E5E5"> huge project that is one that</font>

763
00:30:27,840 --> 00:30:31,439
I do want<font color="#E5E5E5"> to take on it does require a</font>

764
00:30:29,850 --> 00:30:34,080
degree of research there are<font color="#CCCCCC"> already</font>

765
00:30:31,440 --> 00:30:35,669
pretty well accepted obvious<font color="#CCCCCC"> Gatien</font>

766
00:30:34,080 --> 00:30:37,519
taxonomy<font color="#CCCCCC"> is general obligation</font>

767
00:30:35,669 --> 00:30:41,070
taxonomies that have been published both

768
00:30:37,519 --> 00:30:43,139
academically and privately and I think

769
00:30:41,070 --> 00:30:45,240
<font color="#CCCCCC">that's it's about time that</font><font color="#E5E5E5"> there be one</font>

770
00:30:43,139 --> 00:30:46,678
created for JavaScript avi station the

771
00:30:45,240 --> 00:30:49,200
the<font color="#E5E5E5"> JavaScript standard in and of itself</font>

772
00:30:46,679 --> 00:30:50,789
has stabilized to the point where and a

773
00:30:49,200 --> 00:30:53,070
lot of the execution environments<font color="#CCCCCC"> have</font>

774
00:30:50,789 --> 00:30:55,169
kind of come in line we're creating a

775
00:30:53,070 --> 00:30:57,330
taxonomy doesn't seem like two<font color="#CCCCCC"> of them</font>

776
00:30:55,169 --> 00:30:59,369
impossible<font color="#CCCCCC"> feat and it would also</font>

777
00:30:57,330 --> 00:31:01,769
standardized communication across a lot

778
00:30:59,369 --> 00:31:04,080
<font color="#CCCCCC">of</font><font color="#E5E5E5"> these groups there's always the</font>

779
00:31:01,769 --> 00:31:05,220
downside that bad guys will also get a

780
00:31:04,080 --> 00:31:07,649
better understanding of<font color="#E5E5E5"> how JavaScript</font>

781
00:31:05,220 --> 00:31:10,860
publication works but I mean ultimately

782
00:31:07,649 --> 00:31:12,719
that that's not that's not a I don't

783
00:31:10,860 --> 00:31:14,428
consider<font color="#E5E5E5"> that a problem right we need to</font>

784
00:31:12,720 --> 00:31:17,009
raise<font color="#CCCCCC"> the bar things need</font><font color="#E5E5E5"> to get need to</font>

785
00:31:14,429 --> 00:31:18,240
<font color="#E5E5E5">get better and usually that's motivated</font>

786
00:31:17,009 --> 00:31:21,440
through negative<font color="#E5E5E5"> reinforcement</font><font color="#CCCCCC"> than</font>

787
00:31:18,240 --> 00:31:23,999
positive reinforcement unfortunately

788
00:31:21,440 --> 00:31:25,980
other things to check out I didn't cover

789
00:31:23,999 --> 00:31:28,080
I explore in this presentation at all

790
00:31:25,980 --> 00:31:31,379
and that's primarily because it's a

791
00:31:28,080 --> 00:31:33,029
totally<font color="#CCCCCC"> different beast involving all</font>

792
00:31:31,379 --> 00:31:34,949
sorts of<font color="#CCCCCC"> different data representations</font>

793
00:31:33,029 --> 00:31:37,529
and it's<font color="#E5E5E5"> basically the standard that</font>

794
00:31:34,950 --> 00:31:40,379
applies to<font color="#CCCCCC"> JavaScript with an XML space</font>

795
00:31:37,529 --> 00:31:42,690
but all current rendering environments

796
00:31:40,379 --> 00:31:44,009
also support that standard within the

797
00:31:42,690 --> 00:31:47,039
browser which means you can reference it

798
00:31:44,009 --> 00:31:50,070
within normal Dom's and it just access a

799
00:31:47,039 --> 00:31:53,639
totally different execution environment

800
00:31:50,070 --> 00:31:54,210
so cool stuff I mentioned his name

801
00:31:53,639 --> 00:31:55,949
before

802
00:31:54,210 --> 00:31:58,950
<font color="#E5E5E5">Gareth Hayes is doing a lot of work in</font>

803
00:31:55,950 --> 00:32:01,920
<font color="#CCCCCC">ex4 he has a tool called hack werder</font>

804
00:31:58,950 --> 00:32:03,600
that does a lot of automated kind of ex4

805
00:32:01,920 --> 00:32:06,420
transformations just so you can<font color="#CCCCCC"> see some</font>

806
00:32:03,600 --> 00:32:07,800
of the easy tricks that he does but you

807
00:32:06,420 --> 00:32:09,120
know there's still<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> research to</font>

808
00:32:07,800 --> 00:32:11,070
be done there if you're looking for a

809
00:32:09,120 --> 00:32:13,620
place to kind of further the bar for

810
00:32:11,070 --> 00:32:16,350
<font color="#CCCCCC">javascript obfuscation TX 4 and the ECM</font>

811
00:32:13,620 --> 00:32:26,370
a standard a 357 that's pretty much what

812
00:32:16,350 --> 00:32:33,929
<font color="#E5E5E5">you want to read so I did a lot of</font>

813
00:32:26,370 --> 00:32:35,040
talking do you have any questions show

814
00:32:33,930 --> 00:32:36,690
of hands how many<font color="#E5E5E5"> people have done</font>

815
00:32:35,040 --> 00:32:40,590
<font color="#CCCCCC">JavaScript obvi station before worked</font>

816
00:32:36,690 --> 00:32:42,570
with obvious cated<font color="#CCCCCC"> javascript d</font>

817
00:32:40,590 --> 00:32:51,030
obfuscation many people<font color="#CCCCCC"> have done it as</font>

818
00:32:42,570 --> 00:32:52,889
incident response yeah yeah<font color="#E5E5E5"> I mean</font>

819
00:32:51,030 --> 00:32:53,940
ideally the information takeaways from

820
00:32:52,890 --> 00:32:54,960
this even though it seems like it's

821
00:32:53,940 --> 00:32:56,670
targeted at raising the bar for

822
00:32:54,960 --> 00:32:58,320
malicious attackers really should

823
00:32:56,670 --> 00:32:59,460
provide additional<font color="#CCCCCC"> information for</font><font color="#E5E5E5"> the</font>

824
00:32:58,320 --> 00:33:01,080
defensive side<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the house as well</font>

825
00:32:59,460 --> 00:33:02,490
right you should get an understanding of

826
00:33:01,080 --> 00:33:04,370
what obvious<font color="#CCCCCC"> cated javascript actually</font>

827
00:33:02,490 --> 00:33:06,900
looks like and what it could look like

828
00:33:04,370 --> 00:33:09,030
static string checks don't<font color="#E5E5E5"> really work</font>

829
00:33:06,900 --> 00:33:11,550
honey pots do work<font color="#E5E5E5"> but you have to</font>

830
00:33:09,030 --> 00:33:13,800
understand where they can detect or

831
00:33:11,550 --> 00:33:15,480
identify a honeypot easily and how to

832
00:33:13,800 --> 00:33:19,290
bypass some of those traps kind of

833
00:33:15,480 --> 00:33:21,720
disarm them instantly also<font color="#E5E5E5"> I didn't get</font>

834
00:33:19,290 --> 00:33:23,430
<font color="#CCCCCC">into it all but there's a whole bunch of</font>

835
00:33:21,720 --> 00:33:25,950
other steps they can take in the server

836
00:33:23,430 --> 00:33:28,020
stack with regards to like limit to one

837
00:33:25,950 --> 00:33:30,720
time access to<font color="#CCCCCC"> the IP in other ways that</font>

838
00:33:28,020 --> 00:33:33,240
<font color="#CCCCCC">they can trip up analysis or post</font>

839
00:33:30,720 --> 00:33:34,800
exploitation analysis so it's always

840
00:33:33,240 --> 00:33:37,080
good to use things like onion networks

841
00:33:34,800 --> 00:33:39,300
or whatever whenever you're interacting

842
00:33:37,080 --> 00:33:40,860
with hostile networks right after<font color="#E5E5E5"> you</font>

843
00:33:39,300 --> 00:33:43,110
access it once if you want to try<font color="#CCCCCC"> it</font>

844
00:33:40,860 --> 00:33:45,979
again might as well<font color="#E5E5E5"> just hit the refresh</font>

845
00:33:43,110 --> 00:33:45,979
button on your connection

846
00:33:47,940 --> 00:33:56,190
so yeah<font color="#CCCCCC"> my contact information feel free</font>

847
00:33:53,970 --> 00:33:58,440
to cross-site scripting on skype<font color="#CCCCCC"> I'm</font>

848
00:33:56,190 --> 00:34:01,399
always<font color="#CCCCCC"> down for that it's</font><font color="#E5E5E5"> awesome good</font>

849
00:33:58,440 --> 00:34:03,690
fun and then gmail of course that's

850
00:34:01,399 --> 00:34:07,849
because everyone apparently has to use

851
00:34:03,690 --> 00:34:10,440
<font color="#E5E5E5">it and then attribution I do a lot</font><font color="#CCCCCC"> of</font>

852
00:34:07,849 --> 00:34:12,089
malware analysis stuff for fun seeing

853
00:34:10,440 --> 00:34:14,310
what the bad guys<font color="#CCCCCC"> are doing with a buddy</font>

854
00:34:12,089 --> 00:34:18,359
of mine Curtis Miller so I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give</font>

855
00:34:14,310 --> 00:34:20,009
him attribution specifically again

856
00:34:18,359 --> 00:34:22,369
there's references to all the tools<font color="#E5E5E5"> that</font>

857
00:34:20,010 --> 00:34:24,419
I made mention of sandboxie which is a

858
00:34:22,369 --> 00:34:27,030
sandbox environment for your browser

859
00:34:24,418 --> 00:34:30,020
very<font color="#E5E5E5"> useful if you don't want to just</font>

860
00:34:27,030 --> 00:34:32,520
get randomly owned with a new O'Day and

861
00:34:30,020 --> 00:34:34,589
again you have all of<font color="#CCCCCC"> that wrapped in</font>

862
00:34:32,520 --> 00:34:36,300
virtualization you pretty much have no

863
00:34:34,589 --> 00:34:38,310
risk of ever having any persistent

864
00:34:36,300 --> 00:34:43,490
threat on your<font color="#E5E5E5"> machine unless they</font>

865
00:34:38,310 --> 00:34:43,489
attack the hypervisor which is just<font color="#E5E5E5"> wow</font>

866
00:34:52,020 --> 00:34:58,980
the right<font color="#CCCCCC"> audience well</font><font color="#E5E5E5"> looking at like</font>

867
00:34:56,190 --> 00:35:00,810
<font color="#E5E5E5">Mozilla trying to obligated</font><font color="#CCCCCC"> this should</font>

868
00:34:58,980 --> 00:35:02,580
add<font color="#E5E5E5"> is a lot about mutation of the</font>

869
00:35:00,810 --> 00:35:03,720
<font color="#CCCCCC">office gatien's like every week tech</font>

870
00:35:02,580 --> 00:35:05,790
<font color="#CCCCCC">school kids will have a different</font>

871
00:35:03,720 --> 00:35:07,350
mutations right they'll generate a new a

872
00:35:05,790 --> 00:35:09,960
new<font color="#E5E5E5"> race if you have any like this like</font>

873
00:35:07,350 --> 00:35:13,110
in<font color="#E5E5E5"> blue we're like cookies as far as</font>

874
00:35:09,960 --> 00:35:15,330
<font color="#E5E5E5">obfuscation mutation counter mutation</font>

875
00:35:13,110 --> 00:35:19,160
right exactly to<font color="#E5E5E5"> determine whether or</font>

876
00:35:15,330 --> 00:35:19,160
<font color="#E5E5E5">not they're all from a similar source</font>

877
00:35:27,770 --> 00:35:33,330
yeah yeah I mean there are some tools

878
00:35:31,230 --> 00:35:34,530
out there that I mean but<font color="#E5E5E5"> ultimately</font>

879
00:35:33,330 --> 00:35:36,870
they just become fuller and fuller

880
00:35:34,530 --> 00:35:38,220
featured d obvious<font color="#E5E5E5"> caters right as it's</font>

881
00:35:36,870 --> 00:35:40,109
basically an arms race right as they

882
00:35:38,220 --> 00:35:42,419
come<font color="#CCCCCC"> up with a new interesting rendering</font>

883
00:35:40,110 --> 00:35:43,710
behavior then we you know takes X amount

884
00:35:42,420 --> 00:35:45,660
<font color="#E5E5E5">of lag time you get that introduced into</font>

885
00:35:43,710 --> 00:35:48,180
common obvious guitar d obfuscation

886
00:35:45,660 --> 00:35:49,440
engines that are being<font color="#CCCCCC"> used so that you</font>

887
00:35:48,180 --> 00:35:52,470
can then see that that's what they're

888
00:35:49,440 --> 00:35:54,210
doing that's where the manual or the

889
00:35:52,470 --> 00:35:55,950
human<font color="#CCCCCC"> aspect comes into it a lot it</font>

890
00:35:54,210 --> 00:35:58,380
<font color="#E5E5E5">really is a manual problem to solve</font>

891
00:35:55,950 --> 00:36:00,810
unfortunately I<font color="#E5E5E5"> I think that you know</font>

892
00:35:58,380 --> 00:36:03,990
unless you<font color="#E5E5E5"> want to take Otis on yourself</font>

893
00:36:00,810 --> 00:36:05,850
to improve<font color="#CCCCCC"> your own automated</font><font color="#E5E5E5"> the</font>

894
00:36:03,990 --> 00:36:07,979
obvious cater<font color="#E5E5E5"> you're really at the whim</font>

895
00:36:05,850 --> 00:36:10,080
of whenever<font color="#E5E5E5"> they update the libraries so</font>

896
00:36:07,980 --> 00:36:11,880
you end up<font color="#CCCCCC"> having to just do it manually</font>

897
00:36:10,080 --> 00:36:13,110
which isn't that hard I mean just<font color="#CCCCCC"> you</font>

898
00:36:11,880 --> 00:36:14,370
know stand up of environment you play

899
00:36:13,110 --> 00:36:17,990
with<font color="#E5E5E5"> it but yeah if you're doing it</font>

900
00:36:14,370 --> 00:36:20,790
across 15 3100 that gets kind of tedious

901
00:36:17,990 --> 00:36:21,930
ideally normally in the way that I've

902
00:36:20,790 --> 00:36:23,730
<font color="#E5E5E5">seen those systems run in the past</font>

903
00:36:21,930 --> 00:36:24,899
there's other signatures that indicate

904
00:36:23,730 --> 00:36:26,460
to you whether or<font color="#E5E5E5"> not there are similar</font>

905
00:36:24,900 --> 00:36:28,290
kit even<font color="#CCCCCC"> if it's not the same group</font>

906
00:36:26,460 --> 00:36:30,270
that's generating it like things no one

907
00:36:28,290 --> 00:36:32,220
of the things<font color="#E5E5E5"> I didn't mention that's</font>

908
00:36:30,270 --> 00:36:34,620
<font color="#E5E5E5">actually a problem with this JavaScript</font>

909
00:36:32,220 --> 00:36:36,390
obviously<font color="#E5E5E5"> ation sample is that all</font><font color="#CCCCCC"> of</font>

910
00:36:34,620 --> 00:36:38,670
the variables that were being declared

911
00:36:36,390 --> 00:36:41,490
not<font color="#E5E5E5"> only were a fixed length but we're</font>

912
00:36:38,670 --> 00:36:43,950
also relatively low entropy per

913
00:36:41,490 --> 00:36:45,720
character right really really<font color="#E5E5E5"> easy to</font>

914
00:36:43,950 --> 00:36:47,189
detect that that was generated you know

915
00:36:45,720 --> 00:36:48,810
programmatically in and of itself<font color="#E5E5E5"> but</font>

916
00:36:47,190 --> 00:36:50,520
then also taking that exact same

917
00:36:48,810 --> 00:36:52,020
signature and applying it to multiple

918
00:36:50,520 --> 00:36:53,790
obviously<font color="#E5E5E5"> ation techniques will give you</font>

919
00:36:52,020 --> 00:36:57,300
a pretty<font color="#E5E5E5"> good profile that you know it's</font>

920
00:36:53,790 --> 00:36:58,740
the<font color="#E5E5E5"> same kit that's generating it not</font>

921
00:36:57,300 --> 00:37:00,950
the same person but at least the same

922
00:36:58,740 --> 00:37:00,950
kit

923
00:37:02,820 --> 00:37:12,070
<font color="#CCCCCC">other questions cyborg has a ton of</font>

924
00:37:09,460 --> 00:37:13,810
people on there that I love slackers

925
00:37:12,070 --> 00:37:17,410
<font color="#E5E5E5">Doug you should probably</font><font color="#CCCCCC"> check it out</font>

926
00:37:13,810 --> 00:37:19,500
Gareth Hayes who is a 55 sir dark cat

927
00:37:17,410 --> 00:37:22,299
there's a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> guys who have done</font>

928
00:37:19,500 --> 00:37:23,500
recent talks on html5<font color="#CCCCCC"> and various other</font>

929
00:37:22,300 --> 00:37:25,420
obvious efficient techniques who

930
00:37:23,500 --> 00:37:28,510
participate on there there's regular

931
00:37:25,420 --> 00:37:29,650
competitions for you know obviously a

932
00:37:28,510 --> 00:37:31,800
shin competitions and things like that

933
00:37:29,650 --> 00:37:34,840
how do<font color="#E5E5E5"> you how to create the smallest</font>

934
00:37:31,800 --> 00:37:36,430
executable payload so I think the victor

935
00:37:34,840 --> 00:37:38,290
was like six characters or seven

936
00:37:36,430 --> 00:37:41,140
characters is the least amount of

937
00:37:38,290 --> 00:37:45,210
characters you need and also<font color="#E5E5E5"> other</font>

938
00:37:41,140 --> 00:37:48,220
tricks like non-alphanumeric there's a

939
00:37:45,210 --> 00:37:50,890
son in this version but there there is a

940
00:37:48,220 --> 00:37:52,060
method<font color="#E5E5E5"> in which you can force default</font>

941
00:37:50,890 --> 00:37:53,410
strings to return so you create a

942
00:37:52,060 --> 00:37:55,120
logical statement right and it's<font color="#E5E5E5"> either</font>

943
00:37:53,410 --> 00:37:57,910
true or false or undefined or in debt

944
00:37:55,120 --> 00:37:59,710
our infinite right and that forces

945
00:37:57,910 --> 00:38:01,000
<font color="#E5E5E5">there's just based on default behavior</font>

946
00:37:59,710 --> 00:38:02,920
the<font color="#CCCCCC"> JavaScript rendering environment</font>

947
00:38:01,000 --> 00:38:04,840
returns that string to you so<font color="#E5E5E5"> now you</font>

948
00:38:02,920 --> 00:38:07,150
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> reference to that string you'll</font>

949
00:38:04,840 --> 00:38:09,760
reference to text created purely out of

950
00:38:07,150 --> 00:38:12,460
metacharacters no ascii at all or well

951
00:38:09,760 --> 00:38:15,640
no alpha at all right alpha noon and

952
00:38:12,460 --> 00:38:16,840
then you can count on that return string

953
00:38:15,640 --> 00:38:18,640
and you can pull out the<font color="#E5E5E5"> letters that</font>

954
00:38:16,840 --> 00:38:20,350
<font color="#E5E5E5">you need to build your overall</font>

955
00:38:18,640 --> 00:38:22,299
<font color="#E5E5E5">JavaScript title abbr concatenate that</font>

956
00:38:20,350 --> 00:38:23,950
and then evaluate it all with like a

957
00:38:22,300 --> 00:38:26,650
total of six different metacharacters

958
00:38:23,950 --> 00:38:30,129
but a relatively long string like to

959
00:38:26,650 --> 00:38:31,600
count out each one it's called default

960
00:38:30,130 --> 00:38:33,790
string enumerations pretty cool stuff

961
00:38:31,600 --> 00:38:35,500
not practical at all I mean<font color="#CCCCCC"> when you see</font>

962
00:38:33,790 --> 00:38:37,480
it you<font color="#E5E5E5"> see you know exactly</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font>

963
00:38:35,500 --> 00:38:40,290
but it's<font color="#E5E5E5"> pretty fun if you ever want to</font>

964
00:38:37,480 --> 00:38:40,290
just play around with it

965
00:38:40,890 --> 00:38:56,288
no html5<font color="#CCCCCC"> in like web workers can do</font>

966
00:38:46,059 --> 00:38:58,510
threaded<font color="#E5E5E5"> JavaScript occupation some of</font>

967
00:38:56,289 --> 00:39:00,490
the coolest like nested threading or

968
00:38:58,510 --> 00:39:03,880
iterations / / object trees that I've

969
00:39:00,490 --> 00:39:08,098
seen actually came out of what's his

970
00:39:03,880 --> 00:39:09,910
name zalewski at<font color="#E5E5E5"> Google his uh his</font>

971
00:39:08,099 --> 00:39:13,359
remember the name of<font color="#CCCCCC"> that thing that he</font>

972
00:39:09,910 --> 00:39:15,339
had running wasn't wasn't skip fish he

973
00:39:13,359 --> 00:39:16,598
wrote skip fish but he wrote something

974
00:39:15,339 --> 00:39:19,569
before that that was doing a whole bunch

975
00:39:16,599 --> 00:39:20,859
<font color="#E5E5E5">of he was just basically trying to find</font>

976
00:39:19,569 --> 00:39:23,079
crash conditions in the<font color="#CCCCCC"> JavaScript</font>

977
00:39:20,859 --> 00:39:25,150
engine but you can take his exact same

978
00:39:23,079 --> 00:39:27,940
JavaScript the way he dynamically just

979
00:39:25,150 --> 00:39:29,559
recursively iterates over entire object

980
00:39:27,940 --> 00:39:31,359
like generating the object model and

981
00:39:29,559 --> 00:39:33,250
then iterating over the object model you

982
00:39:31,359 --> 00:39:35,470
can do that saying he also use web web

983
00:39:33,250 --> 00:39:37,270
workers for that to<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of you know</font>

984
00:39:35,470 --> 00:39:38,558
implement threading to kind<font color="#E5E5E5"> of speed up</font>

985
00:39:37,270 --> 00:39:40,630
the process<font color="#E5E5E5"> of brute forcing the browser</font>

986
00:39:38,559 --> 00:39:43,089
the only problem with<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> that you</font>

987
00:39:40,630 --> 00:39:44,829
know he<font color="#E5E5E5"> was all within a single browser</font>

988
00:39:43,089 --> 00:39:46,480
environment so if he found a crash

989
00:39:44,829 --> 00:39:48,339
condition he lost state across all the

990
00:39:46,480 --> 00:39:50,170
rest of the ones that<font color="#CCCCCC"> were</font><font color="#E5E5E5"> running so it</font>

991
00:39:48,339 --> 00:39:51,670
came it came pretty difficult to kind<font color="#E5E5E5"> of</font>

992
00:39:50,170 --> 00:39:53,049
establish a true false condition for a

993
00:39:51,670 --> 00:39:54,970
crash that he wanted to<font color="#E5E5E5"> go investigate</font>

994
00:39:53,049 --> 00:39:56,559
further but<font color="#E5E5E5"> it's still</font><font color="#CCCCCC"> really great</font>

995
00:39:54,970 --> 00:39:58,808
stuff if you you know just want to take

996
00:39:56,559 --> 00:40:05,289
<font color="#E5E5E5">a look at some advanced uses of web</font>

997
00:39:58,809 --> 00:40:08,880
workers check it out so I think I think

998
00:40:05,289 --> 00:40:11,880
I'm done is there a questions tracker<font color="#CCCCCC"> no</font>

999
00:40:08,880 --> 00:40:11,880
cool

