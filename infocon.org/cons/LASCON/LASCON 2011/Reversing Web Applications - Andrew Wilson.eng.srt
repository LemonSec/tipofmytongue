1
00:02:01,980 --> 00:02:07,440
all right I mean this I don't know ahead

2
00:02:04,320 --> 00:02:10,199
and get started reversing<font color="#CCCCCC"> web</font>

3
00:02:07,440 --> 00:02:12,780
application stock<font color="#E5E5E5"> Andrew Wilson security</font>

4
00:02:10,199 --> 00:02:15,149
consultative trust way it's a member of

5
00:02:12,780 --> 00:02:17,130
the spiders<font color="#E5E5E5"> labs advanced security team</font>

6
00:02:15,150 --> 00:02:19,620
focus on penetration testing incident

7
00:02:17,130 --> 00:02:21,720
response and application security is

8
00:02:19,620 --> 00:02:23,580
<font color="#CCCCCC">over nine years experience building</font>

9
00:02:21,720 --> 00:02:26,370
testing and securing software in a

10
00:02:23,580 --> 00:02:28,080
variety of industries and who

11
00:02:26,370 --> 00:02:29,880
specializes in applications to keep an

12
00:02:28,080 --> 00:02:32,310
assessment penetration testing and

13
00:02:29,880 --> 00:02:34,079
secure development<font color="#E5E5E5"> lifecycle he's an</font>

14
00:02:32,310 --> 00:02:36,180
active speaker in<font color="#CCCCCC"> the developer and</font>

15
00:02:34,080 --> 00:02:38,970
security communities he's a recognized

16
00:02:36,180 --> 00:02:41,370
for he is recognized to microsoft MVP in

17
00:02:38,970 --> 00:02:45,090
Windows Azure and he has one of the

18
00:02:41,370 --> 00:02:48,480
shorter bios so he's like top two of my

19
00:02:45,090 --> 00:02:50,490
favorite guys it's<font color="#E5E5E5"> all a that's always</font>

20
00:02:48,480 --> 00:02:54,780
an improvement I try to keep<font color="#E5E5E5"> it short</font>

21
00:02:50,490 --> 00:02:56,550
and simple so let me saying I look<font color="#E5E5E5"> for</font>

22
00:02:54,780 --> 00:02:58,410
first wave of reverse everything

23
00:02:56,550 --> 00:03:00,270
<font color="#E5E5E5">application security so predominantly I</font>

24
00:02:58,410 --> 00:03:02,490
work with web applications sometimes a

25
00:03:00,270 --> 00:03:04,470
mobile sometimes compiled binaries and

26
00:03:02,490 --> 00:03:06,000
we do penetration text and then source

27
00:03:04,470 --> 00:03:09,030
code review for those that's kind of my

28
00:03:06,000 --> 00:03:10,830
day-to-day job in my free time I spend

29
00:03:09,030 --> 00:03:13,020
<font color="#E5E5E5">time</font><font color="#CCCCCC"> with the act of charity group and</font>

30
00:03:10,830 --> 00:03:15,030
so after<font color="#E5E5E5"> this if we don't have</font><font color="#CCCCCC"> enough</font>

31
00:03:13,020 --> 00:03:16,530
time<font color="#E5E5E5"> for QA I'm going to be over at that</font>

32
00:03:15,030 --> 00:03:18,570
booth if you want to harass me over

33
00:03:16,530 --> 00:03:20,100
there I also compete in capture the

34
00:03:18,570 --> 00:03:21,870
flags with these guys<font color="#E5E5E5"> I trained in</font>

35
00:03:20,100 --> 00:03:23,670
martial arts with these guys and it's

36
00:03:21,870 --> 00:03:25,380
because of these<font color="#E5E5E5"> guys that</font><font color="#CCCCCC"> I get to</font><font color="#E5E5E5"> be</font>

37
00:03:23,670 --> 00:03:33,269
here with you<font color="#CCCCCC"> guys that's kind of</font>

38
00:03:25,380 --> 00:03:35,700
annoying huh can you hear me now I guess

39
00:03:33,270 --> 00:03:38,400
I'll try this is this better yeah<font color="#E5E5E5"> okay</font>

40
00:03:35,700 --> 00:03:46,140
so<font color="#CCCCCC"> I don't know where everybody</font><font color="#E5E5E5"> is in</font>

41
00:03:38,400 --> 00:03:47,400
the overall context hello maybe it's my

42
00:03:46,140 --> 00:03:49,290
maybe it's that thing I<font color="#E5E5E5"> don't know I</font>

43
00:03:47,400 --> 00:03:51,150
don't know everybody<font color="#E5E5E5"> stands kind of with</font>

44
00:03:49,290 --> 00:03:52,799
the overall sense of where where you

45
00:03:51,150 --> 00:03:54,600
understand reverse engineering and so I

46
00:03:52,800 --> 00:03:55,500
<font color="#E5E5E5">kind of wanted to make make a step back</font>

47
00:03:54,600 --> 00:03:57,690
<font color="#CCCCCC">and just make sure</font><font color="#E5E5E5"> we're all on the same</font>

48
00:03:55,500 --> 00:03:59,340
page<font color="#E5E5E5"> with that reverse engineering</font>

49
00:03:57,690 --> 00:04:01,140
traditionally<font color="#E5E5E5"> when you hear the term you</font>

50
00:03:59,340 --> 00:04:03,060
think something<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> some</font>

51
00:04:01,140 --> 00:04:05,820
context of a compiled binary usually an

52
00:04:03,060 --> 00:04:07,830
executable or dll you're going to take

53
00:04:05,820 --> 00:04:10,140
<font color="#CCCCCC">the assembly that comes out of that why</font>

54
00:04:07,830 --> 00:04:12,480
compiler theory and then usually who can

55
00:04:10,140 --> 00:04:13,798
discern a fairly accurate context of

56
00:04:12,480 --> 00:04:15,130
source code from that right<font color="#E5E5E5"> it gives you</font>

57
00:04:13,799 --> 00:04:17,320
a key ability to take from

58
00:04:15,130 --> 00:04:19,450
this compile format and bring it back to

59
00:04:17,320 --> 00:04:21,370
<font color="#E5E5E5">source code that's not particularly</font>

60
00:04:19,450 --> 00:04:23,320
useful for<font color="#E5E5E5"> us as a definition that's</font>

61
00:04:21,370 --> 00:04:24,820
more of a mechanical understanding of it

62
00:04:23,320 --> 00:04:26,620
because it<font color="#CCCCCC"> oftentimes</font><font color="#E5E5E5"> with web</font>

63
00:04:24,820 --> 00:04:28,780
applications you don't have like the

64
00:04:26,620 --> 00:04:30,460
ability<font color="#E5E5E5"> to just apply some theory and</font>

65
00:04:28,780 --> 00:04:33,159
pull back out source code from it right

66
00:04:30,460 --> 00:04:35,469
<font color="#E5E5E5">so if engineering is this art of</font>

67
00:04:33,160 --> 00:04:38,410
designing source code then reverse

68
00:04:35,470 --> 00:04:40,330
engineering is the art of deducing that

69
00:04:38,410 --> 00:04:42,760
design taking that design and figuring

70
00:04:40,330 --> 00:04:46,060
out<font color="#E5E5E5"> how it was built we're using</font>

71
00:04:42,760 --> 00:04:47,380
basically tools to understand these

72
00:04:46,060 --> 00:04:49,990
<font color="#E5E5E5">things we want</font><font color="#CCCCCC"> to know the composition</font>

73
00:04:47,380 --> 00:04:52,180
<font color="#CCCCCC">of the application which is its elements</font>

74
00:04:49,990 --> 00:04:53,410
its components what it's made of we want

75
00:04:52,180 --> 00:04:55,510
to know the relationships of each

76
00:04:53,410 --> 00:04:57,250
<font color="#E5E5E5">component to every component and then</font>

77
00:04:55,510 --> 00:04:58,930
<font color="#CCCCCC">its behaviors and the syrtis behaviors</font>

78
00:04:57,250 --> 00:05:01,420
out of that and the reason<font color="#E5E5E5"> is because</font>

79
00:04:58,930 --> 00:05:03,100
penetration testing is an incomplete

80
00:05:01,420 --> 00:05:04,930
information problem<font color="#E5E5E5"> right it's like a</font>

81
00:05:03,100 --> 00:05:06,310
puzzle we're given pieces and we're

82
00:05:04,930 --> 00:05:07,750
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out</font><font color="#E5E5E5"> how it works so</font>

83
00:05:06,310 --> 00:05:08,710
that<font color="#E5E5E5"> way when we go through</font><font color="#CCCCCC"> and we're</font>

84
00:05:07,750 --> 00:05:11,020
<font color="#CCCCCC">working with it we can</font><font color="#E5E5E5"> identify</font>

85
00:05:08,710 --> 00:05:13,239
vulnerabilities into it<font color="#E5E5E5"> right and the</font>

86
00:05:11,020 --> 00:05:15,099
greater visibility we<font color="#CCCCCC"> have into how that</font>

87
00:05:13,240 --> 00:05:18,190
puzzle works the easier it's<font color="#CCCCCC"> going to be</font>

88
00:05:15,100 --> 00:05:19,870
for us to achieve that process if if a

89
00:05:18,190 --> 00:05:21,370
client over came to me and said hey you

90
00:05:19,870 --> 00:05:23,230
know what would<font color="#E5E5E5"> you recommend that we do</font>

91
00:05:21,370 --> 00:05:25,450
for our penetration<font color="#E5E5E5"> test i would say</font>

92
00:05:23,230 --> 00:05:27,010
give<font color="#CCCCCC"> me your source code repository give</font>

93
00:05:25,450 --> 00:05:28,450
me a live site that's like a uat

94
00:05:27,010 --> 00:05:30,159
instance that<font color="#CCCCCC"> i can play around with and</font>

95
00:05:28,450 --> 00:05:31,900
<font color="#E5E5E5">I can find significantly more</font>

96
00:05:30,160 --> 00:05:33,730
vulnerabilities than if I have to spend

97
00:05:31,900 --> 00:05:35,620
<font color="#E5E5E5">my time trying to reverse and figure out</font>

98
00:05:33,730 --> 00:05:37,570
what what the application composition is

99
00:05:35,620 --> 00:05:40,870
that make sense but<font color="#E5E5E5"> since people don't</font>

100
00:05:37,570 --> 00:05:42,190
<font color="#CCCCCC">necessarily want to</font><font color="#E5E5E5"> do that you have to</font>

101
00:05:40,870 --> 00:05:43,840
figure<font color="#CCCCCC"> out a way to do that whenever</font><font color="#E5E5E5"> you</font>

102
00:05:42,190 --> 00:05:45,460
run into sort of a<font color="#E5E5E5"> gray box or a black</font>

103
00:05:43,840 --> 00:05:46,900
box type test in<font color="#E5E5E5"> order to figure out</font>

104
00:05:45,460 --> 00:05:48,880
what that<font color="#CCCCCC"> is that's kind of the ideal</font>

105
00:05:46,900 --> 00:05:50,229
state and so reverse engineering as far

106
00:05:48,880 --> 00:05:52,750
as we're going<font color="#CCCCCC"> to define it is trying to</font>

107
00:05:50,230 --> 00:05:54,130
work towards that that a ideal state and

108
00:05:52,750 --> 00:05:56,200
it's<font color="#E5E5E5"> okay if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't believe me</font>

109
00:05:54,130 --> 00:05:58,180
<font color="#E5E5E5">because</font><font color="#CCCCCC"> every methodology says that I'm</font>

110
00:05:56,200 --> 00:05:59,530
right and<font color="#CCCCCC"> you're wrong the web</font>

111
00:05:58,180 --> 00:06:01,480
application hacker's handbook is

112
00:05:59,530 --> 00:06:04,719
probably most appropriate with in<font color="#E5E5E5"> terms</font>

113
00:06:01,480 --> 00:06:06,010
of our definitions for for this most

114
00:06:04,720 --> 00:06:07,660
<font color="#E5E5E5">people would refer to what we're going</font>

115
00:06:06,010 --> 00:06:10,599
to talk about<font color="#CCCCCC"> today is information</font>

116
00:06:07,660 --> 00:06:11,740
gathering with analysis<font color="#E5E5E5"> that's why</font><font color="#CCCCCC"> a web</font>

117
00:06:10,600 --> 00:06:12,820
application<font color="#CCCCCC"> hacker's handbook is</font>

118
00:06:11,740 --> 00:06:16,150
probably closer to what we're going to

119
00:06:12,820 --> 00:06:17,469
<font color="#E5E5E5">be talking about and then the ptes is a</font>

120
00:06:16,150 --> 00:06:19,179
security standard for penetration

121
00:06:17,470 --> 00:06:21,580
testers it just came out they don't

122
00:06:19,180 --> 00:06:23,200
<font color="#E5E5E5">necessarily talk about web stuff but</font>

123
00:06:21,580 --> 00:06:24,700
they talk about information<font color="#E5E5E5"> gathering</font>

124
00:06:23,200 --> 00:06:26,979
<font color="#E5E5E5">and why it's important and then</font>

125
00:06:24,700 --> 00:06:28,810
obviously the<font color="#CCCCCC"> OWASP testing guidelines</font>

126
00:06:26,979 --> 00:06:30,669
has a whole section on

127
00:06:28,810 --> 00:06:33,280
you know<font color="#E5E5E5"> information gathering and using</font>

128
00:06:30,669 --> 00:06:34,479
that from there basically the idea is

129
00:06:33,280 --> 00:06:36,130
you want<font color="#E5E5E5"> to learn everything right the</font>

130
00:06:34,480 --> 00:06:37,510
first phase of assessment is<font color="#CCCCCC"> to collect</font>

131
00:06:36,130 --> 00:06:39,550
everything you could possibly know about

132
00:06:37,510 --> 00:06:41,560
the application ever and they absolutely

133
00:06:39,550 --> 00:06:42,910
<font color="#E5E5E5">mean that right so you're going to</font>

134
00:06:41,560 --> 00:06:44,200
enumerate every few part of the

135
00:06:42,910 --> 00:06:45,790
application you're going to attack

136
00:06:44,200 --> 00:06:48,300
surface you're going to map out every

137
00:06:45,790 --> 00:06:50,370
<font color="#E5E5E5">single area of the application because</font>

138
00:06:48,300 --> 00:06:52,600
the more<font color="#E5E5E5"> information</font><font color="#CCCCCC"> that you have</font>

139
00:06:50,370 --> 00:06:54,010
during<font color="#CCCCCC"> this phase the more attack</font>

140
00:06:52,600 --> 00:06:55,480
vectors presumably you're going to be

141
00:06:54,010 --> 00:06:57,400
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find as you go through and do it</font>

142
00:06:55,480 --> 00:06:59,169
right so what that<font color="#E5E5E5"> becomes is this</font>

143
00:06:57,400 --> 00:07:00,549
laundry list of information gathering

144
00:06:59,169 --> 00:07:03,130
tasks you're going to map visible

145
00:07:00,550 --> 00:07:05,110
content discover hidden content you're

146
00:07:03,130 --> 00:07:07,240
going to test for debug params identify

147
00:07:05,110 --> 00:07:09,340
data entry points identify tech use map

148
00:07:07,240 --> 00:07:11,740
the surface analyze exceptions search

149
00:07:09,340 --> 00:07:13,030
engine<font color="#E5E5E5"> discovery test it for application</font>

150
00:07:11,740 --> 00:07:16,000
<font color="#E5E5E5">fingerprinting is a lot of stuff you do</font>

151
00:07:13,030 --> 00:07:17,679
but<font color="#E5E5E5"> nobody actually does that so the</font>

152
00:07:16,000 --> 00:07:19,720
problem<font color="#E5E5E5"> with the methodology is that a</font>

153
00:07:17,680 --> 00:07:21,610
lot<font color="#CCCCCC"> of these guys approach is that they</font>

154
00:07:19,720 --> 00:07:22,900
imply<font color="#CCCCCC"> this top-down approach write like</font>

155
00:07:21,610 --> 00:07:24,310
this process like you take a checklist

156
00:07:22,900 --> 00:07:25,570
and you start here and work your way

157
00:07:24,310 --> 00:07:27,160
through the<font color="#CCCCCC"> application and then like</font>

158
00:07:25,570 --> 00:07:29,110
when you get<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> bottom you're done</font>

159
00:07:27,160 --> 00:07:31,300
right that's kind of the<font color="#E5E5E5"> theory that a</font>

160
00:07:29,110 --> 00:07:32,560
lot<font color="#E5E5E5"> of these methodologies put out but</font>

161
00:07:31,300 --> 00:07:35,620
nobody<font color="#E5E5E5"> actually tests that way because</font>

162
00:07:32,560 --> 00:07:37,060
the implication and that is that you do

163
00:07:35,620 --> 00:07:38,410
it once<font color="#E5E5E5"> and you move on to something</font>

164
00:07:37,060 --> 00:07:40,180
else but<font color="#E5E5E5"> information gathering is you</font>

165
00:07:38,410 --> 00:07:41,830
something<font color="#CCCCCC"> you do continually throughout</font>

166
00:07:40,180 --> 00:07:43,180
the application as you're testing it and

167
00:07:41,830 --> 00:07:44,830
understanding different components

168
00:07:43,180 --> 00:07:46,450
you're going to get further insight as

169
00:07:44,830 --> 00:07:48,219
to how it behaves what different pieces

170
00:07:46,450 --> 00:07:49,870
are and how they relate to<font color="#E5E5E5"> each other</font>

171
00:07:48,220 --> 00:07:51,340
and so<font color="#E5E5E5"> information gathering kind of</font>

172
00:07:49,870 --> 00:07:52,870
happens and continues throughout the

173
00:07:51,340 --> 00:07:54,880
<font color="#CCCCCC">lifecycle of your</font><font color="#E5E5E5"> test that's the first</font>

174
00:07:52,870 --> 00:07:56,470
reason the Secretary's 'isn't slow it's

175
00:07:54,880 --> 00:07:58,240
an exponential problem if you took the

176
00:07:56,470 --> 00:08:00,639
approach that everybody else<font color="#E5E5E5"> does you</font>

177
00:07:58,240 --> 00:08:02,590
figure an application has this visible

178
00:08:00,639 --> 00:08:04,180
attack surface in the discoverable

179
00:08:02,590 --> 00:08:05,679
attack surface and then inside of that

180
00:08:04,180 --> 00:08:07,360
you have to take<font color="#E5E5E5"> the metadata and</font>

181
00:08:05,680 --> 00:08:08,919
implications and test all of<font color="#E5E5E5"> those and</font>

182
00:08:07,360 --> 00:08:10,990
<font color="#E5E5E5">it grows right the bigger the app is the</font>

183
00:08:08,919 --> 00:08:13,090
bigger it becomes and if your job<font color="#CCCCCC"> is to</font>

184
00:08:10,990 --> 00:08:14,410
<font color="#E5E5E5">do this for a living and you come to a</font>

185
00:08:13,090 --> 00:08:15,669
client<font color="#E5E5E5"> you like hey I spent three days</font>

186
00:08:14,410 --> 00:08:17,440
information gathering on your

187
00:08:15,669 --> 00:08:19,960
application<font color="#CCCCCC"> on a five-day assignment</font>

188
00:08:17,440 --> 00:08:21,100
<font color="#E5E5E5">that's not exactly the the best way they</font>

189
00:08:19,960 --> 00:08:22,270
want you to spend your money right they

190
00:08:21,100 --> 00:08:24,850
want you to exploit their system and

191
00:08:22,270 --> 00:08:26,260
tell them where they're vulnerable you

192
00:08:24,850 --> 00:08:27,370
get information overload right let's

193
00:08:26,260 --> 00:08:28,810
presume that you did go down<font color="#E5E5E5"> this</font>

194
00:08:27,370 --> 00:08:30,729
approach and you did follow this and

195
00:08:28,810 --> 00:08:32,080
<font color="#CCCCCC">you're three days</font><font color="#E5E5E5"> in information you</font>

196
00:08:30,729 --> 00:08:33,069
have so much<font color="#CCCCCC"> information but if you</font>

197
00:08:32,080 --> 00:08:35,050
haven't actually gone through<font color="#CCCCCC"> the</font>

198
00:08:33,070 --> 00:08:37,300
process of analyzing it and figuring<font color="#CCCCCC"> out</font>

199
00:08:35,049 --> 00:08:38,949
what it's doing you're wasting you're

200
00:08:37,299 --> 00:08:41,218
wasting<font color="#CCCCCC"> your time it's too much it's too</font>

201
00:08:38,950 --> 00:08:44,759
much information inside of how you do it

202
00:08:41,219 --> 00:08:46,889
<font color="#E5E5E5">I wish I was quoted a book as reading</font>

203
00:08:44,759 --> 00:08:48,480
collage consulting the purpose is not to

204
00:08:46,889 --> 00:08:49,980
understand the universe you don't need

205
00:08:48,480 --> 00:08:51,689
to understand the universe you need to

206
00:08:49,980 --> 00:08:53,699
understand enough information to direct

207
00:08:51,689 --> 00:08:55,170
your tests so you can continue<font color="#E5E5E5"> to do</font>

208
00:08:53,699 --> 00:08:57,120
focused action as how you're doing it

209
00:08:55,170 --> 00:08:59,459
like if<font color="#CCCCCC"> you are familiar with formal</font>

210
00:08:57,120 --> 00:09:00,720
reverse engineering process usually

211
00:08:59,459 --> 00:09:02,518
<font color="#CCCCCC">they're not trying</font><font color="#E5E5E5"> to reverse engineer</font>

212
00:09:00,720 --> 00:09:03,990
the entire application it's very rare

213
00:09:02,519 --> 00:09:05,939
that somebody says hey take this<font color="#E5E5E5"> thing</font>

214
00:09:03,990 --> 00:09:07,800
and then tell me a recent component of

215
00:09:05,939 --> 00:09:09,810
its source code usually it's I'm really

216
00:09:07,800 --> 00:09:11,819
<font color="#E5E5E5">interested in</font><font color="#CCCCCC"> how those one component of</font>

217
00:09:09,810 --> 00:09:13,800
this thing works can you tell<font color="#E5E5E5"> me what</font>

218
00:09:11,819 --> 00:09:15,329
are the primary mechanisms in which is

219
00:09:13,800 --> 00:09:18,149
doing it can you maybe reverse some

220
00:09:15,329 --> 00:09:19,620
algorithms sometimes they'll use that

221
00:09:18,149 --> 00:09:21,420
for integration sometimes they'll use

222
00:09:19,620 --> 00:09:23,970
that for security testing sometimes

223
00:09:21,420 --> 00:09:25,410
they'll use<font color="#CCCCCC"> it for just information and</font>

224
00:09:23,970 --> 00:09:26,610
education but it's<font color="#E5E5E5"> really rare that</font>

225
00:09:25,410 --> 00:09:27,990
you'll see somebody<font color="#E5E5E5"> go ahead and like</font>

226
00:09:26,610 --> 00:09:29,670
reverse engineer the junk<font color="#E5E5E5"> out of</font>

227
00:09:27,990 --> 00:09:33,180
everything right nobody really does that

228
00:09:29,670 --> 00:09:34,290
I think<font color="#E5E5E5"> this is how most people</font><font color="#CCCCCC"> actually</font>

229
00:09:33,180 --> 00:09:36,149
test and so that's we're going to focus

230
00:09:34,290 --> 00:09:37,860
on as our methodology with<font color="#CCCCCC"> within</font>

231
00:09:36,149 --> 00:09:40,050
reverse engineering<font color="#E5E5E5"> is anybody familiar</font>

232
00:09:37,860 --> 00:09:41,879
with the OOD a loop or<font color="#CCCCCC"> 0 de loop or</font>

233
00:09:40,050 --> 00:09:45,479
Boyd's loop or any of that same same

234
00:09:41,879 --> 00:09:47,459
term for all those nobody<font color="#CCCCCC"> okay so John</font>

235
00:09:45,480 --> 00:09:48,809
Boyd is a gentleman<font color="#CCCCCC"> who you probably</font>

236
00:09:47,459 --> 00:09:51,449
should be aware of he's considered like

237
00:09:48,809 --> 00:09:53,790
one of<font color="#E5E5E5"> the most recent modern generalist</font>

238
00:09:51,449 --> 00:09:56,069
warfare strategy guys in American

239
00:09:53,790 --> 00:09:57,029
history so if you ever study strategy

240
00:09:56,069 --> 00:09:59,759
and things like that he's kind of like

241
00:09:57,029 --> 00:10:01,379
our guy he's responsible for<font color="#E5E5E5"> creating</font>

242
00:09:59,759 --> 00:10:03,120
the<font color="#E5E5E5"> manoeuvrability doctrines that are</font>

243
00:10:01,379 --> 00:10:04,860
used today currently within the Marine

244
00:10:03,120 --> 00:10:06,540
Corps at their attack strategy right so

245
00:10:04,860 --> 00:10:08,670
he's created that doctrines of war

246
00:10:06,540 --> 00:10:10,949
fighting one of the fruits of that

247
00:10:08,670 --> 00:10:14,610
process was this thing he calls the<font color="#CCCCCC"> ODA</font>

248
00:10:10,949 --> 00:10:15,870
Lupe's like his<font color="#E5E5E5"> his a magna opus or</font>

249
00:10:14,610 --> 00:10:18,569
whatever the term is<font color="#CCCCCC"> or</font><font color="#E5E5E5"> it's like his</font>

250
00:10:15,870 --> 00:10:21,990
coup d'etat<font color="#E5E5E5"> right and what it what it is</font>

251
00:10:18,569 --> 00:10:23,670
it's a observation against how we look

252
00:10:21,990 --> 00:10:24,990
at the world<font color="#E5E5E5"> and how we understand it</font>

253
00:10:23,670 --> 00:10:27,300
and how we<font color="#CCCCCC"> might use</font><font color="#E5E5E5"> that both from an</font>

254
00:10:24,990 --> 00:10:28,769
offensive and defensive perspective to

255
00:10:27,300 --> 00:10:32,128
take advantage<font color="#CCCCCC"> of stuff he had a</font>

256
00:10:28,769 --> 00:10:34,740
nickname called the 42nd Boyd and when

257
00:10:32,129 --> 00:10:36,839
he was a jet pilot in<font color="#E5E5E5"> the Korean</font><font color="#CCCCCC"> War he</font>

258
00:10:34,740 --> 00:10:39,629
had a long-standing debate with any

259
00:10:36,839 --> 00:10:41,370
single pilot said you can start from any

260
00:10:39,629 --> 00:10:42,660
position you want of any position of

261
00:10:41,370 --> 00:10:44,129
advantage you get to choose it and i'll

262
00:10:42,660 --> 00:10:45,750
<font color="#CCCCCC">be in disadvantaged and within 40</font>

263
00:10:44,129 --> 00:10:48,480
seconds<font color="#E5E5E5"> i'll beat you and he's already</font>

264
00:10:45,750 --> 00:10:50,429
won you always want and it hurts a lot

265
00:10:48,480 --> 00:10:52,199
of it to this right this<font color="#E5E5E5"> oh de loop</font>

266
00:10:50,429 --> 00:10:53,970
saying that if<font color="#CCCCCC"> i</font><font color="#E5E5E5"> can finish this loop</font>

267
00:10:52,199 --> 00:10:55,410
faster than you if i can go

268
00:10:53,970 --> 00:10:57,420
through this process quicker than you<font color="#E5E5E5"> I</font>

269
00:10:55,410 --> 00:10:59,069
can make<font color="#E5E5E5"> more decisions better decisions</font>

270
00:10:57,420 --> 00:11:00,870
before you're done reacting to it

271
00:10:59,069 --> 00:11:02,519
basically I have<font color="#E5E5E5"> this initiative and you</font>

272
00:11:00,870 --> 00:11:04,560
don't and because I have initiative

273
00:11:02,519 --> 00:11:05,819
you'll lose right so that's how we want

274
00:11:04,560 --> 00:11:07,768
<font color="#E5E5E5">to test them I want to test up with</font>

275
00:11:05,819 --> 00:11:09,628
initiative so I<font color="#E5E5E5"> can quickly take over an</font>

276
00:11:07,769 --> 00:11:12,089
application and steal<font color="#CCCCCC"> all of its awesome</font>

277
00:11:09,629 --> 00:11:14,100
secrets the process for this is observe

278
00:11:12,089 --> 00:11:15,870
orient decide and act right observe is

279
00:11:14,100 --> 00:11:18,660
we going to collect information your

280
00:11:15,870 --> 00:11:21,149
body is this human information<font color="#CCCCCC"> machine</font>

281
00:11:18,660 --> 00:11:23,579
right you're pulling in your smell sight

282
00:11:21,149 --> 00:11:26,040
sound feel the<font color="#E5E5E5"> world around you through</font>

283
00:11:23,579 --> 00:11:27,870
through skin and so forth but you can't

284
00:11:26,040 --> 00:11:29,250
obviously like react<font color="#CCCCCC"> to all of that at</font>

285
00:11:27,870 --> 00:11:30,990
once if you try<font color="#E5E5E5"> to pull</font><font color="#CCCCCC"> it in at once</font>

286
00:11:29,250 --> 00:11:33,300
your brain would explode because it

287
00:11:30,990 --> 00:11:35,009
can't process it much information so we

288
00:11:33,300 --> 00:11:36,719
apply these filters right we apply

289
00:11:35,009 --> 00:11:39,449
orientation filters which are things

290
00:11:36,720 --> 00:11:42,449
like our cultural experiences or our

291
00:11:39,449 --> 00:11:43,769
backgrounds or our education in order to

292
00:11:42,449 --> 00:11:45,089
determine what of that that information

293
00:11:43,769 --> 00:11:47,399
we're pulling in is worth paying

294
00:11:45,089 --> 00:11:48,959
attention to right we decide what that

295
00:11:47,399 --> 00:11:50,790
information means and then we act

296
00:11:48,959 --> 00:11:52,529
against it we just<font color="#E5E5E5"> follow this this life</font>

297
00:11:50,790 --> 00:11:54,660
cycle and I believe that's more kin how

298
00:11:52,529 --> 00:11:56,310
we test and that's<font color="#CCCCCC"> definitely more kin</font>

299
00:11:54,660 --> 00:11:59,339
about how we're going to do reverse

300
00:11:56,310 --> 00:12:00,869
engineering some caveats this is

301
00:11:59,339 --> 00:12:02,430
definitely not<font color="#CCCCCC"> a one-to-one relationship</font>

302
00:12:00,870 --> 00:12:04,889
with compiled binary reversing right

303
00:12:02,430 --> 00:12:07,439
with a compiled binary you get<font color="#E5E5E5"> something</font>

304
00:12:04,889 --> 00:12:08,790
and you pretty<font color="#E5E5E5"> much extensively have the</font>

305
00:12:07,439 --> 00:12:10,170
application albeit that it's in a

306
00:12:08,790 --> 00:12:12,209
compile format right with a web

307
00:12:10,170 --> 00:12:13,589
application you're trying<font color="#CCCCCC"> to discover</font>

308
00:12:12,209 --> 00:12:15,540
content through a variety of<font color="#CCCCCC"> different</font>

309
00:12:13,589 --> 00:12:16,800
mechanisms and what it reveals it's

310
00:12:15,540 --> 00:12:18,420
almost like a poker game right it

311
00:12:16,800 --> 00:12:20,459
doesn't necessarily<font color="#CCCCCC"> show you</font><font color="#E5E5E5"> its cards</font>

312
00:12:18,420 --> 00:12:21,899
and you have to<font color="#E5E5E5"> kind of interact with it</font>

313
00:12:20,459 --> 00:12:24,719
and figure it out from<font color="#CCCCCC"> Behavioral</font>

314
00:12:21,899 --> 00:12:26,189
<font color="#CCCCCC">Analysis it does more have a parallel to</font>

315
00:12:24,720 --> 00:12:28,379
like malware reverse engineering because

316
00:12:26,189 --> 00:12:30,300
sometimes people won't go through the

317
00:12:28,379 --> 00:12:32,220
process<font color="#E5E5E5"> of reverse engineering it in the</font>

318
00:12:30,300 --> 00:12:34,139
you know compiled binary to source code

319
00:12:32,220 --> 00:12:36,089
they'll put it inside of a vm and

320
00:12:34,139 --> 00:12:37,500
they'll let it work its way figure out

321
00:12:36,089 --> 00:12:39,360
what it's doing inside of the

322
00:12:37,500 --> 00:12:40,860
application<font color="#E5E5E5"> and that's how you can sort</font>

323
00:12:39,360 --> 00:12:42,509
<font color="#E5E5E5">of Gestalt behavior and figure out how</font>

324
00:12:40,860 --> 00:12:44,100
<font color="#E5E5E5">it might be composed through what it's</font>

325
00:12:42,509 --> 00:12:45,569
actually doing right that's<font color="#CCCCCC"> probably</font>

326
00:12:44,100 --> 00:12:47,100
more<font color="#CCCCCC"> kindda what we're doing and the</font>

327
00:12:45,569 --> 00:12:48,449
other<font color="#CCCCCC"> reason is</font><font color="#E5E5E5"> that web developers</font>

328
00:12:47,100 --> 00:12:50,430
developers<font color="#E5E5E5"> people we do silly things</font>

329
00:12:48,449 --> 00:12:52,469
right and so what we might<font color="#E5E5E5"> see</font><font color="#CCCCCC"> and think</font>

330
00:12:50,430 --> 00:12:54,989
is one thing could very well be another

331
00:12:52,470 --> 00:12:57,389
thing if you checked out I did a talk at

332
00:12:54,990 --> 00:12:59,579
Def Con<font color="#CCCCCC"> this year on the single traps of</font>

333
00:12:57,389 --> 00:13:01,769
gold my premise is that if you're a

334
00:12:59,579 --> 00:13:02,819
developer<font color="#E5E5E5"> i perfectly expect you to lie</font>

335
00:13:01,769 --> 00:13:05,339
to<font color="#E5E5E5"> me as</font><font color="#CCCCCC"> i'm testing</font><font color="#E5E5E5"> your application</font>

336
00:13:02,819 --> 00:13:07,540
and so if you're running<font color="#E5E5E5"> into a guy like</font>

337
00:13:05,339 --> 00:13:08,980
<font color="#CCCCCC">me expect that when</font><font color="#E5E5E5"> you tell</font>

338
00:13:07,540 --> 00:13:10,990
my application<font color="#CCCCCC"> most of its</font><font color="#E5E5E5"> going to be</font>

339
00:13:08,980 --> 00:13:14,019
made up contrived and not not accurate

340
00:13:10,990 --> 00:13:16,269
so that kind of<font color="#E5E5E5"> throws some dampers into</font>

341
00:13:14,019 --> 00:13:18,670
what we're planning on doing so let's

342
00:13:16,269 --> 00:13:19,810
decompose some applications right the

343
00:13:18,670 --> 00:13:21,670
first premise that we're<font color="#E5E5E5"> going to talk</font>

344
00:13:19,810 --> 00:13:23,619
about is look<font color="#E5E5E5"> at it like a forensics</font>

345
00:13:21,670 --> 00:13:25,180
exercise so the lockers exchange

346
00:13:23,620 --> 00:13:26,860
principle is something that you hear

347
00:13:25,180 --> 00:13:29,439
about<font color="#E5E5E5"> in forensics one of my co-workers</font>

348
00:13:26,860 --> 00:13:30,550
did a talk called like sniper forensics

349
00:13:29,440 --> 00:13:32,800
and I got introduced<font color="#CCCCCC"> to it they're</font>

350
00:13:30,550 --> 00:13:34,870
basically lockers exchange principle is

351
00:13:32,800 --> 00:13:36,550
the<font color="#E5E5E5"> premise of CSI which basically says</font>

352
00:13:34,870 --> 00:13:38,170
there's nothing<font color="#CCCCCC"> in this world that you</font>

353
00:13:36,550 --> 00:13:39,910
can do without leaving trace and

354
00:13:38,170 --> 00:13:40,990
evidence<font color="#E5E5E5"> of how you've done it even the</font>

355
00:13:39,910 --> 00:13:42,939
process of trying<font color="#E5E5E5"> to remove that</font>

356
00:13:40,990 --> 00:13:44,500
<font color="#CCCCCC">evidence creates more evidence and sort</font>

357
00:13:42,940 --> 00:13:46,750
<font color="#E5E5E5">of serves as a silent witness to you</font>

358
00:13:44,500 --> 00:13:48,519
that's how I look at web applications

359
00:13:46,750 --> 00:13:50,170
and granted that when you build an

360
00:13:48,519 --> 00:13:52,180
application generally<font color="#CCCCCC"> people aren't</font>

361
00:13:50,170 --> 00:13:53,680
trying to like cover up a murder but I

362
00:13:52,180 --> 00:13:54,910
recommend<font color="#E5E5E5"> certain developers might want</font>

363
00:13:53,680 --> 00:13:57,069
to do<font color="#E5E5E5"> that especially what I've seen</font>

364
00:13:54,910 --> 00:13:58,630
their source code so you probably<font color="#E5E5E5"> want</font>

365
00:13:57,069 --> 00:14:00,930
to cover up that you did it it's not

366
00:13:58,630 --> 00:14:02,889
something<font color="#CCCCCC"> you should brag about it right</font>

367
00:14:00,930 --> 00:14:04,750
so we're<font color="#E5E5E5"> gonna start</font><font color="#CCCCCC"> with identifying</font>

368
00:14:02,889 --> 00:14:06,699
compositions web applications don't

369
00:14:04,750 --> 00:14:08,350
necessarily have some context of like a

370
00:14:06,699 --> 00:14:10,599
PE file format right when you get an

371
00:14:08,350 --> 00:14:11,920
executable it doesn't follow this common

372
00:14:10,600 --> 00:14:13,990
standard when you're looking<font color="#E5E5E5"> at a web</font>

373
00:14:11,920 --> 00:14:16,569
application but we do have some very

374
00:14:13,990 --> 00:14:18,610
common abstractions we start off with a

375
00:14:16,569 --> 00:14:19,990
presentation tier extensively the the

376
00:14:18,610 --> 00:14:22,420
thing that you visually interact with

377
00:14:19,990 --> 00:14:23,920
and work against you have a logical tier

378
00:14:22,420 --> 00:14:25,360
which represents the business logic or

379
00:14:23,920 --> 00:14:26,740
the rules necessary to perform the

380
00:14:25,360 --> 00:14:28,540
actions that<font color="#E5E5E5"> the visual tier is</font>

381
00:14:26,740 --> 00:14:30,130
interfacing with you and then you have

382
00:14:28,540 --> 00:14:31,510
some data tier which is the storage and

383
00:14:30,130 --> 00:14:32,769
retrieval of<font color="#CCCCCC"> that information</font><font color="#E5E5E5"> and</font>

384
00:14:31,510 --> 00:14:35,470
modifying it along the process<font color="#E5E5E5"> right</font>

385
00:14:32,769 --> 00:14:36,639
this is<font color="#CCCCCC"> the accurate conception model</font>

386
00:14:35,470 --> 00:14:38,069
that you'll see sometimes it could<font color="#E5E5E5"> be</font>

387
00:14:36,639 --> 00:14:40,810
distributed across multiple computers

388
00:14:38,069 --> 00:14:42,550
<font color="#E5E5E5">sometimes the logical tier is meshed</font>

389
00:14:40,810 --> 00:14:44,680
with the presentation tier and so you

390
00:14:42,550 --> 00:14:46,000
<font color="#E5E5E5">have kind of very odd boundaries but by</font>

391
00:14:44,680 --> 00:14:48,040
and large like these are the three

392
00:14:46,000 --> 00:14:49,329
primary tasks that you'll see inside of

393
00:14:48,040 --> 00:14:51,279
any web application<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're going to</font>

394
00:14:49,329 --> 00:14:53,529
<font color="#E5E5E5">be testing and so this kind of serves as</font>

395
00:14:51,279 --> 00:14:56,110
a means to do that to test<font color="#E5E5E5"> it we're</font>

396
00:14:53,529 --> 00:14:57,730
going<font color="#E5E5E5"> to focus on techniques that either</font>

397
00:14:56,110 --> 00:15:01,060
<font color="#E5E5E5">don't connect to a system appear as</font>

398
00:14:57,730 --> 00:15:02,470
normal use excuse me you're going<font color="#E5E5E5"> to</font>

399
00:15:01,060 --> 00:15:03,910
test<font color="#E5E5E5"> it with two ways we have passive</font>

400
00:15:02,470 --> 00:15:05,560
testing and then we have active testing

401
00:15:03,910 --> 00:15:07,689
passive testing our techniques which

402
00:15:05,560 --> 00:15:10,089
don't connect to the system they appears

403
00:15:07,689 --> 00:15:11,589
normal traffic<font color="#E5E5E5"> use and examples of that</font>

404
00:15:10,089 --> 00:15:13,060
would be<font color="#E5E5E5"> things like using google dorks</font>

405
00:15:11,589 --> 00:15:15,790
or show it<font color="#E5E5E5"> on as a means to like</font>

406
00:15:13,060 --> 00:15:17,469
identify additional content or figuring

407
00:15:15,790 --> 00:15:18,910
out host headers looking at versioning

408
00:15:17,470 --> 00:15:20,050
things like that it's a passive

409
00:15:18,910 --> 00:15:22,199
mechanism in<font color="#CCCCCC"> the sense that you're</font>

410
00:15:20,050 --> 00:15:24,250
<font color="#E5E5E5">looking somewhere else for</font>

411
00:15:22,200 --> 00:15:25,390
active testing is the opposite of that

412
00:15:24,250 --> 00:15:26,320
that means<font color="#E5E5E5"> you're going</font><font color="#CCCCCC"> to go in</font><font color="#E5E5E5"> there</font>

413
00:15:25,390 --> 00:15:27,880
and<font color="#E5E5E5"> you're going to play around with it</font>

414
00:15:26,320 --> 00:15:29,740
and you're going<font color="#E5E5E5"> to you know touch it</font>

415
00:15:27,880 --> 00:15:32,920
and fondle it and find<font color="#E5E5E5"> out what it's</font>

416
00:15:29,740 --> 00:15:34,480
actually doing passive testing reveals

417
00:15:32,920 --> 00:15:36,880
what I call a happy path right with the

418
00:15:34,480 --> 00:15:39,070
developer expected me to do inside<font color="#CCCCCC"> of it</font>

419
00:15:36,880 --> 00:15:41,260
and then active testing is more of<font color="#CCCCCC"> a</font>

420
00:15:39,070 --> 00:15:42,940
optimism test time to see how optimistic

421
00:15:41,260 --> 00:15:44,520
they were and how much they enforce you

422
00:15:42,940 --> 00:15:46,750
actually following that happy path

423
00:15:44,520 --> 00:15:48,880
because oftentimes<font color="#E5E5E5"> that's not necessary</font>

424
00:15:46,750 --> 00:15:50,590
these terms<font color="#E5E5E5"> I've been thinking about</font>

425
00:15:48,880 --> 00:15:52,510
this a lot I don't like<font color="#E5E5E5"> the concept of</font>

426
00:15:50,590 --> 00:15:54,670
active and passive testing I think<font color="#E5E5E5"> that</font>

427
00:15:52,510 --> 00:15:56,080
we should<font color="#E5E5E5"> probably take terms out of</font>

428
00:15:54,670 --> 00:15:58,449
social engineering<font color="#CCCCCC"> because I think</font><font color="#E5E5E5"> it's</font>

429
00:15:56,080 --> 00:15:59,860
<font color="#CCCCCC">more</font><font color="#E5E5E5"> to what you're doing and I would</font>

430
00:15:58,450 --> 00:16:01,570
say the difference is you have one which

431
00:15:59,860 --> 00:16:03,550
<font color="#CCCCCC">is an elicitation elicitation is</font>

432
00:16:01,570 --> 00:16:04,870
discerning information it's really

433
00:16:03,550 --> 00:16:06,579
valuable through the course of a normal

434
00:16:04,870 --> 00:16:09,040
conversation or within sort of the

435
00:16:06,580 --> 00:16:11,040
<font color="#CCCCCC">guidelines of a normal</font><font color="#E5E5E5"> conversation and</font>

436
00:16:09,040 --> 00:16:13,209
you would contrast that to a concept of

437
00:16:11,040 --> 00:16:15,069
interrogation right like beating beating

438
00:16:13,210 --> 00:16:17,380
the<font color="#E5E5E5"> action into submission and tell you</font>

439
00:16:15,070 --> 00:16:18,970
what's going<font color="#E5E5E5"> on inside of it mostly</font>

440
00:16:17,380 --> 00:16:20,530
<font color="#CCCCCC">because really you can't send me that</font>

441
00:16:18,970 --> 00:16:21,880
you're not active<font color="#E5E5E5"> testing if you're</font>

442
00:16:20,530 --> 00:16:25,089
using the<font color="#E5E5E5"> application</font><font color="#CCCCCC"> unordered</font>

443
00:16:21,880 --> 00:16:27,280
<font color="#E5E5E5">information but elicitation is more in</font>

444
00:16:25,090 --> 00:16:29,530
line with what<font color="#E5E5E5"> we would be looking at</font>

445
00:16:27,280 --> 00:16:33,040
for our test this thing's driving me

446
00:16:29,530 --> 00:16:35,020
nuts so when we said<font color="#E5E5E5"> that people don't</font>

447
00:16:33,040 --> 00:16:37,719
actually<font color="#E5E5E5"> have a common file format</font>

448
00:16:35,020 --> 00:16:39,610
that's true but people do follow either

449
00:16:37,720 --> 00:16:41,320
formally or<font color="#E5E5E5"> informally common design</font>

450
00:16:39,610 --> 00:16:44,110
patterns that<font color="#CCCCCC"> you would see within</font>

451
00:16:41,320 --> 00:16:45,070
within our industry as a developer<font color="#E5E5E5"> the</font>

452
00:16:44,110 --> 00:16:46,690
first one<font color="#CCCCCC"> that you're</font><font color="#E5E5E5"> going to run into</font>

453
00:16:45,070 --> 00:16:49,030
is a page controller which works

454
00:16:46,690 --> 00:16:51,190
something like this you<font color="#CCCCCC"> have a view you</font>

455
00:16:49,030 --> 00:16:53,890
have<font color="#CCCCCC"> a controller usually is the page</font>

456
00:16:51,190 --> 00:16:57,010
itself right so if you go to page like

457
00:16:53,890 --> 00:16:59,230
you know do<font color="#E5E5E5"> action that it and it</font>

458
00:16:57,010 --> 00:17:01,420
usually is responsible for merging the

459
00:16:59,230 --> 00:17:02,830
view and the presentation<font color="#E5E5E5"> together like</font>

460
00:17:01,420 --> 00:17:04,079
that the<font color="#CCCCCC"> business logic and it might be</font>

461
00:17:02,830 --> 00:17:06,490
<font color="#E5E5E5">kind of like this all encompassed</font>

462
00:17:04,079 --> 00:17:08,438
spaghetti code is kind of another way

463
00:17:06,490 --> 00:17:09,550
often<font color="#CCCCCC"> return to it that the page</font>

464
00:17:08,439 --> 00:17:12,550
controller approach

465
00:17:09,550 --> 00:17:14,169
I you can identify this pretty easily by

466
00:17:12,550 --> 00:17:15,849
having a lot<font color="#CCCCCC"> of single action pages</font>

467
00:17:14,170 --> 00:17:18,580
right so you might have<font color="#E5E5E5"> a page that says</font>

468
00:17:15,849 --> 00:17:21,159
like save model or update model or

469
00:17:18,579 --> 00:17:23,520
review model that<font color="#E5E5E5"> would be an example of</font>

470
00:17:21,160 --> 00:17:25,780
most<font color="#E5E5E5"> likely than not a page controller</font>

471
00:17:23,520 --> 00:17:28,359
these have usually a<font color="#E5E5E5"> lot of different</font>

472
00:17:25,780 --> 00:17:30,370
<font color="#E5E5E5">client controlled variables because each</font>

473
00:17:28,359 --> 00:17:33,100
page actually works as an<font color="#CCCCCC"> independence</font>

474
00:17:30,370 --> 00:17:34,750
below which is why the<font color="#E5E5E5"> Getty code really</font>

475
00:17:33,100 --> 00:17:36,610
<font color="#E5E5E5">quick is in order to get one page</font><font color="#CCCCCC"> to</font>

476
00:17:34,750 --> 00:17:38,020
talk to another page they have basically

477
00:17:36,610 --> 00:17:40,060
their own little interfaces that you

478
00:17:38,020 --> 00:17:42,190
have to talk<font color="#E5E5E5"> to</font><font color="#CCCCCC"> you and so client has to</font>

479
00:17:40,060 --> 00:17:44,050
send data along the road to it usually

480
00:17:42,190 --> 00:17:46,120
it's in query strings it's sometimes in

481
00:17:44,050 --> 00:17:47,770
post data but most of its client

482
00:17:46,120 --> 00:17:50,500
controllable when you run into something

483
00:17:47,770 --> 00:17:52,000
<font color="#E5E5E5">like this or you has a PHP file</font>

484
00:17:50,500 --> 00:17:54,940
extension like would be another way to

485
00:17:52,000 --> 00:17:57,130
identify it um it's not exactly<font color="#CCCCCC"> true and</font>

486
00:17:54,940 --> 00:17:58,450
it's kind of more of a<font color="#E5E5E5"> joke but what</font>

487
00:17:57,130 --> 00:18:00,460
we'll talk<font color="#CCCCCC"> about a little bit is that</font>

488
00:17:58,450 --> 00:18:02,590
<font color="#E5E5E5">when you run into certain type of file</font>

489
00:18:00,460 --> 00:18:05,140
extensions they oftentimes imply how

490
00:18:02,590 --> 00:18:07,030
they<font color="#E5E5E5"> might have been developed since PHP</font>

491
00:18:05,140 --> 00:18:09,580
it's really popular over certain time

492
00:18:07,030 --> 00:18:11,379
period to have done<font color="#E5E5E5"> page controller type</font>

493
00:18:09,580 --> 00:18:13,929
approaches it's like any time you<font color="#CCCCCC"> run to</font>

494
00:18:11,380 --> 00:18:15,700
classical<font color="#E5E5E5"> asp site or a classical PHP</font>

495
00:18:13,930 --> 00:18:17,170
site<font color="#CCCCCC"> i can</font><font color="#E5E5E5"> pretty much guarantee you</font>

496
00:18:15,700 --> 00:18:18,910
that it's going<font color="#E5E5E5"> to be a page controller</font>

497
00:18:17,170 --> 00:18:21,520
because at the time that model<font color="#E5E5E5"> is very</font>

498
00:18:18,910 --> 00:18:23,110
very<font color="#CCCCCC"> popular among developers anybody</font>

499
00:18:21,520 --> 00:18:25,450
know just<font color="#E5E5E5"> maybe off chance with sort of</font>

500
00:18:23,110 --> 00:18:29,439
a<font color="#E5E5E5"> most recent developer pattern that</font>

501
00:18:25,450 --> 00:18:32,170
people are<font color="#CCCCCC"> using</font><font color="#E5E5E5"> okay we'll get to that</font>

502
00:18:29,440 --> 00:18:33,220
one a little bit<font color="#E5E5E5"> but get that one right</font>

503
00:18:32,170 --> 00:18:35,410
now it's very<font color="#CCCCCC"> good let me</font><font color="#E5E5E5"> help with that</font>

504
00:18:33,220 --> 00:18:37,780
so<font color="#E5E5E5"> Model View controller is probably the</font>

505
00:18:35,410 --> 00:18:39,130
<font color="#CCCCCC">most popular design pattern that you'll</font>

506
00:18:37,780 --> 00:18:41,139
see right<font color="#E5E5E5"> now inside application</font>

507
00:18:39,130 --> 00:18:42,940
development what happens with that<font color="#E5E5E5"> is</font>

508
00:18:41,140 --> 00:18:44,560
<font color="#CCCCCC">that you interface with</font><font color="#E5E5E5"> the view it has</font>

509
00:18:42,940 --> 00:18:46,060
a controller behind the scenes which

510
00:18:44,560 --> 00:18:47,470
defines a whole bunch of<font color="#E5E5E5"> actions and</font>

511
00:18:46,060 --> 00:18:50,710
then it binds a model to that and it

512
00:18:47,470 --> 00:18:52,240
shares that model back up as an example

513
00:18:50,710 --> 00:18:54,430
it looks at them something like<font color="#E5E5E5"> this</font>

514
00:18:52,240 --> 00:18:56,860
right you go to a URL<font color="#E5E5E5"> structures you</font>

515
00:18:54,430 --> 00:18:58,810
have the controller name have an action

516
00:18:56,860 --> 00:19:00,790
and then usually an ID in which acting

517
00:18:58,810 --> 00:19:02,530
against kind of like a sentence

518
00:19:00,790 --> 00:19:04,330
proposition right how it's going<font color="#E5E5E5"> to</font>

519
00:19:02,530 --> 00:19:05,800
interfere sometimes you'll just see the

520
00:19:04,330 --> 00:19:07,389
controller which implies a default

521
00:19:05,800 --> 00:19:10,629
action usually it's like<font color="#CCCCCC"> a list or</font>

522
00:19:07,390 --> 00:19:12,490
create a set of value and then finally

523
00:19:10,630 --> 00:19:14,530
you might see just an ID which implies a

524
00:19:12,490 --> 00:19:16,150
default controller and<font color="#E5E5E5"> a default action</font>

525
00:19:14,530 --> 00:19:18,820
a controller might have things like

526
00:19:16,150 --> 00:19:20,590
update retrieve you know delete modify

527
00:19:18,820 --> 00:19:22,030
or whatever and so usually let's say you

528
00:19:20,590 --> 00:19:23,350
had like a<font color="#E5E5E5"> product it would be like</font>

529
00:19:22,030 --> 00:19:25,299
products

530
00:19:23,350 --> 00:19:26,530
do you know save and then the<font color="#E5E5E5"> ID would</font>

531
00:19:25,299 --> 00:19:29,440
be the idea of<font color="#E5E5E5"> the product does that</font>

532
00:19:26,530 --> 00:19:30,730
make sense pretty straightforward<font color="#E5E5E5"> you</font>

533
00:19:29,440 --> 00:19:32,230
generally<font color="#CCCCCC"> don't see very many parameters</font>

534
00:19:30,730 --> 00:19:33,970
in the<font color="#E5E5E5"> query string when you're working</font>

535
00:19:32,230 --> 00:19:37,210
<font color="#E5E5E5">with something like</font><font color="#CCCCCC"> this because the</font>

536
00:19:33,970 --> 00:19:38,559
parameters get sent through the actual

537
00:19:37,210 --> 00:19:40,210
URL<font color="#E5E5E5"> sub structure that's how it</font>

538
00:19:38,559 --> 00:19:42,250
communicates with well for you s'posed

539
00:19:40,210 --> 00:19:46,539
data where it is down then it routes it

540
00:19:42,250 --> 00:19:50,440
inside of the control<font color="#E5E5E5"> kind of the worst</font>

541
00:19:46,539 --> 00:19:52,210
microphone ever it is<font color="#E5E5E5"> very certain</font>

542
00:19:50,440 --> 00:19:53,650
languages so if you run into like Ruby

543
00:19:52,210 --> 00:19:54,610
or you're working inside a certain

544
00:19:53,650 --> 00:19:57,100
frameworks it's very straightforward

545
00:19:54,610 --> 00:19:58,689
that they work in<font color="#E5E5E5"> this way it's really</font>

546
00:19:57,100 --> 00:20:00,158
<font color="#E5E5E5">easy to identify that somebody has done</font>

547
00:19:58,690 --> 00:20:02,080
it this way<font color="#E5E5E5"> because the language itself</font>

548
00:20:00,159 --> 00:20:04,270
kind<font color="#E5E5E5"> of has implication on what people</font>

549
00:20:02,080 --> 00:20:07,178
<font color="#E5E5E5">are using from a modern perspective like</font>

550
00:20:04,270 --> 00:20:08,679
anything in Ruby is pretty much an MVC

551
00:20:07,179 --> 00:20:11,409
model pretty pretty<font color="#E5E5E5"> much across the</font>

552
00:20:08,679 --> 00:20:13,030
board and<font color="#E5E5E5"> then finally we have a front</font>

553
00:20:11,409 --> 00:20:15,220
controller so a front controller is

554
00:20:13,030 --> 00:20:16,750
something where you have an index page

555
00:20:15,220 --> 00:20:18,520
or a default page which handles a

556
00:20:16,750 --> 00:20:20,530
variety of actions but the actions are

557
00:20:18,520 --> 00:20:21,639
passed as query string<font color="#E5E5E5"> parameters so if</font>

558
00:20:20,530 --> 00:20:23,799
you ever see<font color="#E5E5E5"> something where it says</font>

559
00:20:21,640 --> 00:20:25,120
like command or action and then the<font color="#E5E5E5"> name</font>

560
00:20:23,799 --> 00:20:27,760
of the command in which it works with

561
00:20:25,120 --> 00:20:29,199
that's kind of how it does it navigation

562
00:20:27,760 --> 00:20:31,210
so it acts as a router there may be

563
00:20:29,200 --> 00:20:32,980
something underneath it and then the

564
00:20:31,210 --> 00:20:34,419
command is how it's how it's probably

565
00:20:32,980 --> 00:20:36,309
implemented behind the scenes so and

566
00:20:34,419 --> 00:20:37,870
<font color="#E5E5E5">it's see something like history it's</font>

567
00:20:36,309 --> 00:20:39,549
probably a case statement that says if

568
00:20:37,870 --> 00:20:41,918
you see command history route to this or

569
00:20:39,549 --> 00:20:43,418
it instantiates the handler for and it

570
00:20:41,919 --> 00:20:45,159
modifies is request through through the

571
00:20:43,419 --> 00:20:47,110
two of them if none<font color="#CCCCCC"> of that makes any</font>

572
00:20:45,159 --> 00:20:49,000
sense<font color="#E5E5E5"> whatsoever kind of a compare and</font>

573
00:20:47,110 --> 00:20:51,549
contrast<font color="#E5E5E5"> I put</font><font color="#CCCCCC"> together for you guys</font><font color="#E5E5E5"> is</font>

574
00:20:49,000 --> 00:20:53,289
if you have<font color="#E5E5E5"> like a page controller it</font>

575
00:20:51,549 --> 00:20:54,700
would be like do query and then then the

576
00:20:53,289 --> 00:20:56,890
query string you'll see the parameters

577
00:20:54,700 --> 00:20:58,600
that it's trying<font color="#E5E5E5"> to operate again if you</font>

578
00:20:56,890 --> 00:21:01,000
see a front controller it's going to say

579
00:20:58,600 --> 00:21:02,559
here's my index my action is<font color="#E5E5E5"> do query as</font>

580
00:21:01,000 --> 00:21:05,380
opposed to being the paint itself and

581
00:21:02,559 --> 00:21:07,750
then it has parameters and then<font color="#E5E5E5"> finally</font>

582
00:21:05,380 --> 00:21:09,190
an MVC would be like query my program

583
00:21:07,750 --> 00:21:10,870
and then<font color="#E5E5E5"> maybe a subprogram and then it</font>

584
00:21:09,190 --> 00:21:12,100
goes ahead and queries the database for

585
00:21:10,870 --> 00:21:14,879
you that way does that that<font color="#E5E5E5"> kind of</font>

586
00:21:12,100 --> 00:21:16,510
makes<font color="#CCCCCC"> sense as a common pattern</font>

587
00:21:14,880 --> 00:21:17,799
something else you<font color="#CCCCCC"> should for</font><font color="#E5E5E5"> you</font>

588
00:21:16,510 --> 00:21:19,210
familiar with especially if you're<font color="#E5E5E5"> doing</font>

589
00:21:17,799 --> 00:21:20,530
penetration testing is there's about

590
00:21:19,210 --> 00:21:22,510
three<font color="#CCCCCC"> different ways people interact</font>

591
00:21:20,530 --> 00:21:24,850
with the earth<font color="#E5E5E5"> I originally had like a</font>

592
00:21:22,510 --> 00:21:27,039
slide on<font color="#E5E5E5"> my data access patterns but the</font>

593
00:21:24,850 --> 00:21:28,689
reality is two things<font color="#E5E5E5"> and you probably</font>

594
00:21:27,039 --> 00:21:30,010
not<font color="#E5E5E5"> gonna be able to discern that unless</font>

595
00:21:28,690 --> 00:21:32,140
there's an exception that tells you how

596
00:21:30,010 --> 00:21:34,809
<font color="#E5E5E5">it's built which sometimes there is in</font>

597
00:21:32,140 --> 00:21:36,260
the stack<font color="#CCCCCC"> trace but also it's somewhat</font>

598
00:21:34,809 --> 00:21:38,120
irrelevant testing across

599
00:21:36,260 --> 00:21:40,100
it doesn't<font color="#E5E5E5"> really matter what access</font>

600
00:21:38,120 --> 00:21:41,899
pattern they done what matters is<font color="#CCCCCC"> how</font>

601
00:21:40,100 --> 00:21:43,669
they've actually created the connection

602
00:21:41,900 --> 00:21:46,000
strings to talk to the database which is

603
00:21:43,670 --> 00:21:48,350
<font color="#E5E5E5">not a data access pattern problem it's a</font>

604
00:21:46,000 --> 00:21:50,270
connection<font color="#E5E5E5"> to the database problem right</font>

605
00:21:48,350 --> 00:21:52,429
so there's three<font color="#E5E5E5"> main ways for that the</font>

606
00:21:50,270 --> 00:21:55,639
first is the horrible concatenation<font color="#CCCCCC"> of</font>

607
00:21:52,430 --> 00:21:57,950
strings if you do this I'm sorry<font color="#E5E5E5"> for you</font>

608
00:21:55,640 --> 00:21:59,590
please don't everybody knows why this

609
00:21:57,950 --> 00:22:02,750
bad<font color="#E5E5E5"> anybody not know why this is bad</font>

610
00:21:59,590 --> 00:22:03,919
okay cool second way is a prepared

611
00:22:02,750 --> 00:22:05,390
statement<font color="#E5E5E5"> of paired statement looks</font>

612
00:22:03,920 --> 00:22:06,730
something like this you'll see select

613
00:22:05,390 --> 00:22:08,660
star from the table it has<font color="#E5E5E5"> like a</font>

614
00:22:06,730 --> 00:22:10,250
replacement parameter and<font color="#E5E5E5"> then it does</font>

615
00:22:08,660 --> 00:22:11,810
binding and automatically when handle

616
00:22:10,250 --> 00:22:13,580
the encoding for you kind of on the fly

617
00:22:11,810 --> 00:22:16,129
and then finally<font color="#CCCCCC"> you'll have stored</font>

618
00:22:13,580 --> 00:22:17,870
procedures which very unlikely to be

619
00:22:16,130 --> 00:22:20,480
<font color="#E5E5E5">something that you can do sequel</font>

620
00:22:17,870 --> 00:22:21,800
injection against but occasionally if

621
00:22:20,480 --> 00:22:24,050
they write really really bad stored

622
00:22:21,800 --> 00:22:25,370
procedures you might be able<font color="#E5E5E5"> to take</font>

623
00:22:24,050 --> 00:22:27,500
advantage<font color="#E5E5E5"> of that</font><font color="#CCCCCC"> oftentimes</font><font color="#E5E5E5"> it would be</font>

624
00:22:25,370 --> 00:22:28,850
like a search a search query that

625
00:22:27,500 --> 00:22:29,990
somebody creates because when you do

626
00:22:28,850 --> 00:22:31,310
that usually that you want it<font color="#E5E5E5"> to be</font>

627
00:22:29,990 --> 00:22:34,280
dynamic to handle a lot of<font color="#CCCCCC"> different</font>

628
00:22:31,310 --> 00:22:35,720
searching scenarios so even even then

629
00:22:34,280 --> 00:22:38,330
sometimes on stored procedures you can

630
00:22:35,720 --> 00:22:40,220
get an attack vector some

631
00:22:38,330 --> 00:22:41,929
inconsistencies sometimes when you're

632
00:22:40,220 --> 00:22:44,360
looking<font color="#E5E5E5"> at a URL it could be a ul</font>

633
00:22:41,930 --> 00:22:46,400
rewriter through Apache it could be like

634
00:22:44,360 --> 00:22:48,229
an<font color="#CCCCCC"> IAS URL rewriter so whenever hits a</font>

635
00:22:46,400 --> 00:22:50,210
URL structure it could be<font color="#E5E5E5"> that the</font>

636
00:22:48,230 --> 00:22:51,290
<font color="#E5E5E5">underlying framework is like command</font>

637
00:22:50,210 --> 00:22:54,260
pattern so if you have ever used

638
00:22:51,290 --> 00:22:56,300
wordpress wordpress has the same deal by

639
00:22:54,260 --> 00:22:57,920
default it's a front controller so it

640
00:22:56,300 --> 00:22:59,210
<font color="#E5E5E5">has all the actions off the index page</font>

641
00:22:57,920 --> 00:23:01,210
that is going to call and then it uses

642
00:22:59,210 --> 00:23:04,160
those recursive calls to create the app

643
00:23:01,210 --> 00:23:06,680
but you can have it rewrite inside of

644
00:23:04,160 --> 00:23:08,510
its configuration to look like an MVC

645
00:23:06,680 --> 00:23:10,040
pattern even<font color="#CCCCCC"> though it's not what's cool</font>

646
00:23:08,510 --> 00:23:11,990
about that is it supports both methods

647
00:23:10,040 --> 00:23:14,180
so both methods can be<font color="#E5E5E5"> tested for</font>

648
00:23:11,990 --> 00:23:16,210
inconsistencies in excess so you can

649
00:23:14,180 --> 00:23:18,320
look at something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that in that way</font>

650
00:23:16,210 --> 00:23:21,260
that's kind of how<font color="#CCCCCC"> that works because it</font>

651
00:23:18,320 --> 00:23:22,850
<font color="#E5E5E5">does that some basic rules right if you</font>

652
00:23:21,260 --> 00:23:24,440
can cheat you should<font color="#E5E5E5"> absolutely do</font><font color="#CCCCCC"> that</font>

653
00:23:22,850 --> 00:23:26,149
so if you ever see<font color="#E5E5E5"> something we're like</font>

654
00:23:24,440 --> 00:23:28,100
this where it has an exception method

655
00:23:26,150 --> 00:23:30,470
saying upload failed and in the corner

656
00:23:28,100 --> 00:23:31,939
it says<font color="#CCCCCC"> disqus is how</font><font color="#E5E5E5"> I built this then</font>

657
00:23:30,470 --> 00:23:34,040
the very next thing<font color="#CCCCCC"> you should we do is</font>

658
00:23:31,940 --> 00:23:35,930
download<font color="#E5E5E5"> disqus right if they're going</font>

659
00:23:34,040 --> 00:23:37,730
<font color="#E5E5E5">to be so willing as a developer to tell</font>

660
00:23:35,930 --> 00:23:39,260
you how you've written it like<font color="#E5E5E5"> if</font><font color="#CCCCCC"> I'm</font>

661
00:23:37,730 --> 00:23:41,180
going<font color="#E5E5E5"> to brag like hey I wrote this in</font>

662
00:23:39,260 --> 00:23:42,770
Drupal or hey I wrote this in Ruby or

663
00:23:41,180 --> 00:23:44,780
hey I wrote this with Disqus it's

664
00:23:42,770 --> 00:23:46,639
<font color="#E5E5E5">absolutely to your benefit to download</font>

665
00:23:44,780 --> 00:23:48,290
that framework and use it because again

666
00:23:46,640 --> 00:23:49,230
this is a visibility concern problem

667
00:23:48,290 --> 00:23:51,178
right so the more

668
00:23:49,230 --> 00:23:53,220
visible I can<font color="#CCCCCC"> be in your application the</font>

669
00:23:51,179 --> 00:23:55,590
easier that I can test it right<font color="#E5E5E5"> like how</font>

670
00:23:53,220 --> 00:23:56,970
<font color="#CCCCCC">would I test ever for Miss configuration</font>

671
00:23:55,590 --> 00:23:58,379
of your application if I don't know how

672
00:23:56,970 --> 00:24:00,900
it's supposed to be<font color="#E5E5E5"> configured in the</font>

673
00:23:58,380 --> 00:24:03,169
first place<font color="#E5E5E5"> so oftentimes what happens</font>

674
00:24:00,900 --> 00:24:05,640
with this is you<font color="#E5E5E5"> can see things like</font>

675
00:24:03,169 --> 00:24:07,020
WordPress will put metadata Drupal will

676
00:24:05,640 --> 00:24:08,910
put in metadata they'll be default

677
00:24:07,020 --> 00:24:10,559
content default files things of that

678
00:24:08,910 --> 00:24:11,880
sort you search for those whenever

679
00:24:10,559 --> 00:24:13,440
you're in<font color="#E5E5E5"> a test in order to start</font>

680
00:24:11,880 --> 00:24:15,299
fingerprinting this application because

681
00:24:13,440 --> 00:24:16,980
if I<font color="#CCCCCC"> can figure out the version</font><font color="#E5E5E5"> I can</font>

682
00:24:15,299 --> 00:24:18,870
download it<font color="#E5E5E5"> i can play with</font><font color="#CCCCCC"> it and i can</font>

683
00:24:16,980 --> 00:24:21,030
see either<font color="#E5E5E5"> a if there's known exploits</font>

684
00:24:18,870 --> 00:24:23,250
<font color="#CCCCCC">for it be if you've configured it right</font>

685
00:24:21,030 --> 00:24:24,720
or from really you know person<font color="#CCCCCC"> tickety i</font>

686
00:24:23,250 --> 00:24:25,500
might look at that<font color="#E5E5E5"> application and see</font>

687
00:24:24,720 --> 00:24:26,730
if there's any additional

688
00:24:25,500 --> 00:24:29,610
vulnerabilities that people haven't

689
00:24:26,730 --> 00:24:30,660
haven't found before so cheap right if

690
00:24:29,610 --> 00:24:33,510
you have<font color="#E5E5E5"> that opportunity you should</font>

691
00:24:30,660 --> 00:24:34,950
<font color="#E5E5E5">absolutely do</font><font color="#CCCCCC"> that you also want to pay</font>

692
00:24:33,510 --> 00:24:37,140
<font color="#CCCCCC">attention to where technology is</font>

693
00:24:34,950 --> 00:24:39,299
intersect<font color="#E5E5E5"> oftentimes</font><font color="#CCCCCC"> when you work at in</font>

694
00:24:37,140 --> 00:24:41,850
a very complex application it's usually

695
00:24:39,299 --> 00:24:44,010
some subset of HTML sometimes they have

696
00:24:41,850 --> 00:24:45,870
like a<font color="#CCCCCC"> silverlight or</font><font color="#E5E5E5"> a flash or some</font>

697
00:24:44,010 --> 00:24:47,910
sort of component in that sense and then

698
00:24:45,870 --> 00:24:49,590
oftentimes they might have like an ajax

699
00:24:47,910 --> 00:24:51,540
handler it's kind of a<font color="#E5E5E5"> big one that you</font>

700
00:24:49,590 --> 00:24:53,428
want<font color="#CCCCCC"> to look for whenever technology</font>

701
00:24:51,540 --> 00:24:54,510
intersects between that it usually means

702
00:24:53,429 --> 00:24:56,610
you're going to have two different

703
00:24:54,510 --> 00:24:58,440
subsets of developers and they may not

704
00:24:56,610 --> 00:25:00,389
<font color="#E5E5E5">necessarily know all the communication</font>

705
00:24:58,440 --> 00:25:01,799
patterns and so identifying this early

706
00:25:00,390 --> 00:25:03,240
<font color="#CCCCCC">on in your application as you're trying</font>

707
00:25:01,799 --> 00:25:05,370
<font color="#E5E5E5">to reverse engineer where these just</font>

708
00:25:03,240 --> 00:25:06,750
separate is really useful<font color="#E5E5E5"> because later</font>

709
00:25:05,370 --> 00:25:08,760
when you come back and<font color="#E5E5E5"> test it you might</font>

710
00:25:06,750 --> 00:25:10,460
find authorization bypass you might find

711
00:25:08,760 --> 00:25:13,309
privilege escalation things of that sort

712
00:25:10,460 --> 00:25:15,870
for instance like sometimes you'll find

713
00:25:13,309 --> 00:25:17,610
an affront controller that supports

714
00:25:15,870 --> 00:25:19,350
different types of actions even though

715
00:25:17,610 --> 00:25:21,870
the action isn't necessarily supported

716
00:25:19,350 --> 00:25:23,760
so you're off might be hey you can't

717
00:25:21,870 --> 00:25:25,409
call<font color="#E5E5E5"> this page but I could call from one</font>

718
00:25:23,760 --> 00:25:26,820
front controller into another front

719
00:25:25,410 --> 00:25:28,770
controller with the same actions and

720
00:25:26,820 --> 00:25:30,780
then edit it just because it's supported

721
00:25:28,770 --> 00:25:33,330
across the board or where Ajax might

722
00:25:30,780 --> 00:25:34,860
handle something like that that<font color="#CCCCCC"> also</font>

723
00:25:33,330 --> 00:25:36,510
brings up that these are<font color="#E5E5E5"> oftentimes</font>

724
00:25:34,860 --> 00:25:38,129
hybrid so it's not like you're going<font color="#E5E5E5"> to</font>

725
00:25:36,510 --> 00:25:39,360
<font color="#E5E5E5">find one design pattern and that's how</font>

726
00:25:38,130 --> 00:25:41,280
the whole application is<font color="#CCCCCC"> going to be</font>

727
00:25:39,360 --> 00:25:42,840
built for two reasons when developers

728
00:25:41,280 --> 00:25:44,129
aren't necessarily always aware of how

729
00:25:42,840 --> 00:25:45,809
they've built the application like they

730
00:25:44,130 --> 00:25:47,429
don't they don't necessarily say he

731
00:25:45,809 --> 00:25:50,428
loses<font color="#CCCCCC"> the standard form a model</font><font color="#E5E5E5"> that I'm</font>

732
00:25:47,429 --> 00:25:52,290
going<font color="#E5E5E5"> to use and then also is when they</font>

733
00:25:50,429 --> 00:25:54,059
create applications that are composed<font color="#CCCCCC"> of</font>

734
00:25:52,290 --> 00:25:55,770
different types of<font color="#CCCCCC"> things there's have</font>

735
00:25:54,059 --> 00:25:59,970
different<font color="#E5E5E5"> types of interactions inside</font>

736
00:25:55,770 --> 00:26:02,350
of it the<font color="#E5E5E5"> question maybe they have the</font>

737
00:25:59,970 --> 00:26:04,030
is why does any of this matter

738
00:26:02,350 --> 00:26:06,159
and i would say that<font color="#E5E5E5"> anything that a</font>

739
00:26:04,030 --> 00:26:08,559
developer says against you<font color="#E5E5E5"> should use it</font>

740
00:26:06,160 --> 00:26:10,360
<font color="#E5E5E5">against them right so the access</font>

741
00:26:08,559 --> 00:26:12,340
patterns how it works the name of the

742
00:26:10,360 --> 00:26:13,659
<font color="#E5E5E5">parameters all that's super valuable</font>

743
00:26:12,340 --> 00:26:15,699
especially if you're<font color="#CCCCCC"> trying to build at</font>

744
00:26:13,660 --> 00:26:18,160
a type map for testing later which we'll

745
00:26:15,700 --> 00:26:20,740
talk<font color="#CCCCCC"> about if developers so very welling</font>

746
00:26:18,160 --> 00:26:22,360
in order to find particular things it's

747
00:26:20,740 --> 00:26:24,850
pretty<font color="#E5E5E5"> great you can use that as a means</font>

748
00:26:22,360 --> 00:26:26,260
to identify<font color="#E5E5E5"> and pull out later parts of</font>

749
00:26:24,850 --> 00:26:27,909
the application for better testing

750
00:26:26,260 --> 00:26:30,480
second is<font color="#CCCCCC"> that every strength every</font>

751
00:26:27,910 --> 00:26:33,100
pattern has a strength right MVC is

752
00:26:30,480 --> 00:26:34,770
suspect to<font color="#E5E5E5"> you this concept model</font>

753
00:26:33,100 --> 00:26:37,480
binding which is sort of like a complex

754
00:26:34,770 --> 00:26:38,799
insecure direct object reference which

755
00:26:37,480 --> 00:26:40,150
is not going<font color="#E5E5E5"> to find that in their</font>

756
00:26:38,799 --> 00:26:41,980
framework if you don't know<font color="#CCCCCC"> that it's an</font>

757
00:26:40,150 --> 00:26:44,080
MVC application you can't test it for

758
00:26:41,980 --> 00:26:45,309
that nor should you test it for that if

759
00:26:44,080 --> 00:26:46,629
it's some other<font color="#CCCCCC"> application because it's</font>

760
00:26:45,309 --> 00:26:50,350
not<font color="#E5E5E5"> going to bind that way does that</font>

761
00:26:46,630 --> 00:26:51,580
does that make sense and then same like

762
00:26:50,350 --> 00:26:53,320
I'm saying before is<font color="#CCCCCC"> that if it's a</font>

763
00:26:51,580 --> 00:26:55,090
command pattern<font color="#E5E5E5"> sometimes you can access</font>

764
00:26:53,320 --> 00:26:56,379
different parts of<font color="#E5E5E5"> the application by</font>

765
00:26:55,090 --> 00:26:57,459
injecting commands<font color="#E5E5E5"> that you learned</font>

766
00:26:56,380 --> 00:26:59,740
about<font color="#E5E5E5"> in other parts of the application</font>

767
00:26:57,460 --> 00:27:01,539
so if you're given a test with maybe

768
00:26:59,740 --> 00:27:03,070
with two different<font color="#CCCCCC"> levels of credentials</font>

769
00:27:01,539 --> 00:27:05,020
and I go<font color="#E5E5E5"> through an admin and I see that</font>

770
00:27:03,070 --> 00:27:06,100
<font color="#CCCCCC">there's all these admin commands usually</font>

771
00:27:05,020 --> 00:27:08,230
what you want to do is collect those

772
00:27:06,100 --> 00:27:09,699
create a type map come back to<font color="#E5E5E5"> the site</font>

773
00:27:08,230 --> 00:27:11,320
as an unauthenticated user and then

774
00:27:09,700 --> 00:27:12,820
replay all the different commands<font color="#E5E5E5"> that</font>

775
00:27:11,320 --> 00:27:14,049
you used to play<font color="#E5E5E5"> as an admin and see hey</font>

776
00:27:12,820 --> 00:27:15,908
are they actually supporting

777
00:27:14,049 --> 00:27:17,080
authentication right that's why you want

778
00:27:15,909 --> 00:27:18,760
to<font color="#E5E5E5"> know what this pattern is because you</font>

779
00:27:17,080 --> 00:27:20,139
will never have the ability to inject

780
00:27:18,760 --> 00:27:22,059
against it if you're<font color="#E5E5E5"> not familiar with</font>

781
00:27:20,140 --> 00:27:25,240
what that pattern looks like that it

782
00:27:22,059 --> 00:27:26,889
makes sense to be savvy sweet and then

783
00:27:25,240 --> 00:27:28,960
finally the pattern themselves can kind

784
00:27:26,890 --> 00:27:31,120
of imply how the data access was working

785
00:27:28,960 --> 00:27:33,880
kind of<font color="#E5E5E5"> like we talked about before with</font>

786
00:27:31,120 --> 00:27:35,469
NBC it's<font color="#E5E5E5"> almost always pop it's almost</font>

787
00:27:33,880 --> 00:27:37,630
always traditionally that you'll see

788
00:27:35,470 --> 00:27:38,890
they're using an ORM because it's an ORM

789
00:27:37,630 --> 00:27:40,330
it's pretty rare that you're going<font color="#E5E5E5"> to</font>

790
00:27:38,890 --> 00:27:42,190
<font color="#E5E5E5">find sequel injection under certain</font>

791
00:27:40,330 --> 00:27:43,840
types of systems that<font color="#E5E5E5"> they've built like</font>

792
00:27:42,190 --> 00:27:45,070
active records not necessarily something

793
00:27:43,840 --> 00:27:46,928
you're going<font color="#E5E5E5"> to find a sequel injection</font>

794
00:27:45,070 --> 00:27:48,549
with and<font color="#CCCCCC"> even if you did you should</font>

795
00:27:46,929 --> 00:27:49,900
<font color="#E5E5E5">probably just download active record and</font>

796
00:27:48,549 --> 00:27:51,129
test active record because that would<font color="#CCCCCC"> be</font>

797
00:27:49,900 --> 00:27:52,600
the only place in which the sequel

798
00:27:51,130 --> 00:27:54,460
injection would exist would<font color="#E5E5E5"> be a bypass</font>

799
00:27:52,600 --> 00:27:56,860
against the framework not against<font color="#E5E5E5"> their</font>

800
00:27:54,460 --> 00:27:58,360
site and so<font color="#E5E5E5"> those are reasons that</font><font color="#CCCCCC"> you</font>

801
00:27:56,860 --> 00:28:01,928
want to<font color="#E5E5E5"> do this and understand it there</font>

802
00:27:58,360 --> 00:28:05,860
any questions<font color="#E5E5E5"> on this really</font><font color="#CCCCCC"> make sense</font>

803
00:28:01,929 --> 00:28:07,690
<font color="#E5E5E5">cool so then the next part is trying to</font>

804
00:28:05,860 --> 00:28:09,039
understand behavior once<font color="#E5E5E5"> we understand</font>

805
00:28:07,690 --> 00:28:11,049
how<font color="#CCCCCC"> it's composed</font><font color="#E5E5E5"> we want to look at</font>

806
00:28:09,039 --> 00:28:12,450
what does it do right so we're going<font color="#E5E5E5"> to</font>

807
00:28:11,049 --> 00:28:14,889
go<font color="#CCCCCC"> through this kind of psychoanalysis</font>

808
00:28:12,450 --> 00:28:17,110
process of how the applications composed

809
00:28:14,890 --> 00:28:19,030
we want to know what<font color="#E5E5E5"> an application does</font>

810
00:28:17,110 --> 00:28:20,290
kind of the happy path what it supports

811
00:28:19,030 --> 00:28:22,178
and then we want<font color="#E5E5E5"> to know what it doesn't</font>

812
00:28:20,290 --> 00:28:24,399
support right and to do that<font color="#CCCCCC"> we usually</font>

813
00:28:22,179 --> 00:28:25,960
<font color="#CCCCCC">will take and go through when you</font><font color="#E5E5E5"> hit an</font>

814
00:28:24,400 --> 00:28:28,299
application i would say that nine times

815
00:28:25,960 --> 00:28:29,890
out of<font color="#CCCCCC"> ten the process of testing is</font>

816
00:28:28,299 --> 00:28:31,809
going to look<font color="#CCCCCC"> something like get your</font>

817
00:28:29,890 --> 00:28:33,309
credentials login play around<font color="#E5E5E5"> with the</font>

818
00:28:31,809 --> 00:28:35,379
application figure out<font color="#CCCCCC"> what</font><font color="#E5E5E5"> it does</font>

819
00:28:33,309 --> 00:28:36,940
<font color="#E5E5E5">something is going to trigger in your</font>

820
00:28:35,380 --> 00:28:38,020
head hey this doesn't look right<font color="#E5E5E5"> this</font>

821
00:28:36,940 --> 00:28:39,429
does look right<font color="#E5E5E5"> and you're going to play</font>

822
00:28:38,020 --> 00:28:41,679
with it to<font color="#E5E5E5"> get more information and this</font>

823
00:28:39,429 --> 00:28:43,540
this process is kind of the play with it

824
00:28:41,679 --> 00:28:45,220
to<font color="#CCCCCC"> figure out what it does what</font><font color="#E5E5E5"> it does</font>

825
00:28:43,540 --> 00:28:47,320
you<font color="#CCCCCC"> should pay attention to a few things</font>

826
00:28:45,220 --> 00:28:49,030
<font color="#E5E5E5">first off is where did your day to go so</font>

827
00:28:47,320 --> 00:28:50,320
if you create a user record you want to

828
00:28:49,030 --> 00:28:52,360
know all the<font color="#CCCCCC"> different places that that</font>

829
00:28:50,320 --> 00:28:54,309
user record is going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> reedus played</font>

830
00:28:52,360 --> 00:28:55,629
because<font color="#E5E5E5"> then if you find things</font><font color="#CCCCCC"> like you</font>

831
00:28:54,309 --> 00:28:57,158
know cross-site scripting attacks or

832
00:28:55,630 --> 00:28:58,900
<font color="#CCCCCC">CSRF type of tax and you want to put</font>

833
00:28:57,159 --> 00:29:00,669
those together understanding<font color="#E5E5E5"> how those</font>

834
00:28:58,900 --> 00:29:02,830
applications works and where the data

835
00:29:00,669 --> 00:29:04,570
goes that's<font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> pretty important</font>

836
00:29:02,830 --> 00:29:07,059
right you also want to pay<font color="#CCCCCC"> attention to</font>

837
00:29:04,570 --> 00:29:09,189
things like how did<font color="#E5E5E5"> it get there if it</font>

838
00:29:07,059 --> 00:29:10,809
moves from a post did it move from a

839
00:29:09,190 --> 00:29:12,790
query string did it moved from a cookie

840
00:29:10,809 --> 00:29:14,620
did it make two steps when it<font color="#E5E5E5"> could have</font>

841
00:29:12,790 --> 00:29:16,299
made one so is it a post back to<font color="#E5E5E5"> itself</font>

842
00:29:14,620 --> 00:29:18,399
which gives you to a redirection which

843
00:29:16,299 --> 00:29:19,870
then brings you to another page or is it

844
00:29:18,400 --> 00:29:21,610
opposed to<font color="#E5E5E5"> another page which then takes</font>

845
00:29:19,870 --> 00:29:23,049
you to another page those are actually

846
00:29:21,610 --> 00:29:24,428
really important behaviors because they

847
00:29:23,049 --> 00:29:26,230
have a couple of<font color="#E5E5E5"> things first off they</font>

848
00:29:24,429 --> 00:29:28,390
imply a relationship between<font color="#E5E5E5"> those pages</font>

849
00:29:26,230 --> 00:29:30,580
so if you want to test them<font color="#E5E5E5"> it's you can</font>

850
00:29:28,390 --> 00:29:32,110
maybe you can bypass an entire subset of

851
00:29:30,580 --> 00:29:34,120
that and call the individual page

852
00:29:32,110 --> 00:29:35,500
between it so those are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

853
00:29:34,120 --> 00:29:36,820
things<font color="#E5E5E5"> you want to pay</font><font color="#CCCCCC"> attention to as</font>

854
00:29:35,500 --> 00:29:38,169
it works so that<font color="#E5E5E5"> way you can kind of</font>

855
00:29:36,820 --> 00:29:39,610
further get visibility into the

856
00:29:38,169 --> 00:29:42,790
<font color="#CCCCCC">application and what its relationships</font>

857
00:29:39,610 --> 00:29:44,949
are you<font color="#E5E5E5"> also want to know if your data</font>

858
00:29:42,790 --> 00:29:47,500
was encoded or modified and how it went

859
00:29:44,950 --> 00:29:49,149
from one place to the other so<font color="#CCCCCC"> usually</font>

860
00:29:47,500 --> 00:29:51,730
you know some<font color="#CCCCCC"> people will create like</font>

861
00:29:49,149 --> 00:29:53,350
the xss fuzzer and they put in all<font color="#E5E5E5"> this</font>

862
00:29:51,730 --> 00:29:54,789
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> that would be an interrogation</font>

863
00:29:53,350 --> 00:29:56,168
method where you're like trying every

864
00:29:54,789 --> 00:29:58,030
single encoding for different parameters

865
00:29:56,169 --> 00:29:59,470
you could also<font color="#E5E5E5"> just create a username</font>

866
00:29:58,030 --> 00:30:01,270
that<font color="#E5E5E5"> has a bunch of different</font><font color="#CCCCCC"> types of</font>

867
00:29:59,470 --> 00:30:03,039
those parameters and then just save<font color="#CCCCCC"> that</font>

868
00:30:01,270 --> 00:30:05,168
<font color="#E5E5E5">username and that's kind of in par with</font>

869
00:30:03,039 --> 00:30:07,179
how somebody might create something or

870
00:30:05,169 --> 00:30:08,440
an<font color="#CCCCCC"> accident they might put and</font><font color="#E5E5E5"> you can</font>

871
00:30:07,179 --> 00:30:10,330
usually figure out how<font color="#E5E5E5"> they're doing</font>

872
00:30:08,440 --> 00:30:11,950
encoding maybe what they're missing so

873
00:30:10,330 --> 00:30:14,350
later on in the testing you might be

874
00:30:11,950 --> 00:30:16,480
able<font color="#E5E5E5"> to do bypasses with that for</font>

875
00:30:14,350 --> 00:30:18,939
insisting like asp.net applications and

876
00:30:16,480 --> 00:30:21,010
web forms the<font color="#E5E5E5"> default encoder doesn't</font>

877
00:30:18,940 --> 00:30:22,960
support single<font color="#E5E5E5"> tix right doesn't do any</font>

878
00:30:21,010 --> 00:30:24,820
encoding against a single tick so if you

879
00:30:22,960 --> 00:30:26,110
see<font color="#E5E5E5"> that the data is brought from one</font>

880
00:30:24,820 --> 00:30:28,700
place to another but it's injected

881
00:30:26,110 --> 00:30:30,350
inside of a<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> you pretty much</font>

882
00:30:28,700 --> 00:30:31,790
have<font color="#E5E5E5"> JavaScript injection it's not going</font>

883
00:30:30,350 --> 00:30:33,669
to be very<font color="#CCCCCC"> difficult to find that</font>

884
00:30:31,790 --> 00:30:37,070
because you can do break out that way

885
00:30:33,670 --> 00:30:38,780
<font color="#E5E5E5">and then obviously a redirection that we</font>

886
00:30:37,070 --> 00:30:39,919
talked about before as you're going

887
00:30:38,780 --> 00:30:41,060
through the application you want to

888
00:30:39,920 --> 00:30:43,790
identify what types are in<font color="#E5E5E5"> the</font>

889
00:30:41,060 --> 00:30:45,830
application so usually<font color="#CCCCCC"> type system is</font>

890
00:30:43,790 --> 00:30:48,860
composed of basic and complex types

891
00:30:45,830 --> 00:30:50,899
which means some<font color="#E5E5E5"> something simplistic</font>

892
00:30:48,860 --> 00:30:53,419
something complex like an object versa a

893
00:30:50,900 --> 00:30:55,610
single single type in both cases you're

894
00:30:53,420 --> 00:30:58,550
really concerned<font color="#E5E5E5"> with do you require</font>

895
00:30:55,610 --> 00:31:00,020
this information is it required and then

896
00:30:58,550 --> 00:31:01,430
what does<font color="#CCCCCC"> it do right those are the two</font>

897
00:31:00,020 --> 00:31:03,170
questions you're going to be asking<font color="#E5E5E5"> the</font>

898
00:31:01,430 --> 00:31:05,810
application as you interface with it

899
00:31:03,170 --> 00:31:07,430
four basic types that usually exist

900
00:31:05,810 --> 00:31:09,409
inside a query strings forms URL

901
00:31:07,430 --> 00:31:11,060
composition anytime you see a URL

902
00:31:09,410 --> 00:31:13,010
position for instance like with NBC

903
00:31:11,060 --> 00:31:14,659
that's that's kind of a type right it's

904
00:31:13,010 --> 00:31:16,330
going to be recognized as a string gets

905
00:31:14,660 --> 00:31:18,440
passed into the URL router the router

906
00:31:16,330 --> 00:31:19,990
matches it with regular expressions and

907
00:31:18,440 --> 00:31:21,950
figures<font color="#E5E5E5"> out where you're going to go</font>

908
00:31:19,990 --> 00:31:23,390
<font color="#E5E5E5">understanding how that data is going to</font>

909
00:31:21,950 --> 00:31:25,670
be leveraged will be really important if

910
00:31:23,390 --> 00:31:27,410
you want<font color="#CCCCCC"> to do things like directory</font>

911
00:31:25,670 --> 00:31:30,650
traversal against URL structure

912
00:31:27,410 --> 00:31:32,060
sometimes you'll find that so you want

913
00:31:30,650 --> 00:31:34,190
to pay attention<font color="#E5E5E5"> to that where it exists</font>

914
00:31:32,060 --> 00:31:36,409
and then you<font color="#E5E5E5"> want to identify whether or</font>

915
00:31:34,190 --> 00:31:38,240
not it's a string<font color="#CCCCCC"> where's treated as a</font>

916
00:31:36,410 --> 00:31:40,160
string whether<font color="#E5E5E5"> it's treated as a numeric</font>

917
00:31:38,240 --> 00:31:41,780
item or whether it's a<font color="#CCCCCC"> queue it those</font>

918
00:31:40,160 --> 00:31:43,670
<font color="#CCCCCC">are kind of important</font><font color="#E5E5E5"> things all the</font>

919
00:31:41,780 --> 00:31:45,350
other types are possible like numeric

920
00:31:43,670 --> 00:31:46,970
you<font color="#E5E5E5"> could tell if it's a long or you can</font>

921
00:31:45,350 --> 00:31:49,639
tell whether it's a decimal or integer

922
00:31:46,970 --> 00:31:52,610
like whatever it's one<font color="#E5E5E5"> of those</font>

923
00:31:49,640 --> 00:31:54,560
categories<font color="#E5E5E5"> sometimes with a complex type</font>

924
00:31:52,610 --> 00:31:57,260
it's pretty obvious<font color="#CCCCCC"> right so this is</font>

925
00:31:54,560 --> 00:31:58,760
from<font color="#E5E5E5"> a fairly popular system called near</font>

926
00:31:57,260 --> 00:32:01,070
dinner and you can<font color="#E5E5E5"> see that it's got a</font>

927
00:31:58,760 --> 00:32:02,540
dinner ID a title event and you can

928
00:32:01,070 --> 00:32:04,700
pretty much assert that that's probably

929
00:32:02,540 --> 00:32:07,550
<font color="#E5E5E5">the complex type on the page necessary</font>

930
00:32:04,700 --> 00:32:09,050
for your<font color="#CCCCCC"> interactions with it and if you</font>

931
00:32:07,550 --> 00:32:10,760
<font color="#E5E5E5">look at the actual source code it's</font>

932
00:32:09,050 --> 00:32:14,470
pretty pretty confident that's it right

933
00:32:10,760 --> 00:32:14,470
that's your is your<font color="#E5E5E5"> source there</font>

934
00:32:14,710 --> 00:32:19,940
exceptions this is kind of the<font color="#E5E5E5"> non happy</font>

935
00:32:17,780 --> 00:32:21,830
path of testing I love exceptions

936
00:32:19,940 --> 00:32:24,050
exceptions are great exceptions are a

937
00:32:21,830 --> 00:32:25,970
developer's bane of existence but it's

938
00:32:24,050 --> 00:32:28,730
like my my favorite<font color="#E5E5E5"> thing in the world</font>

939
00:32:25,970 --> 00:32:30,920
for exception testing I really only do

940
00:32:28,730 --> 00:32:31,850
one tool because we talked<font color="#CCCCCC"> about I said</font>

941
00:32:30,920 --> 00:32:34,340
<font color="#E5E5E5">I think I said I was going to talk about</font>

942
00:32:31,850 --> 00:32:36,080
tools i use skip fish skip fishes is a

943
00:32:34,340 --> 00:32:37,730
really amazing scanner that does not

944
00:32:36,080 --> 00:32:39,169
<font color="#E5E5E5">find anything</font><font color="#CCCCCC"> I would never</font><font color="#E5E5E5"> find by</font>

945
00:32:37,730 --> 00:32:40,400
myself<font color="#E5E5E5"> like I've never found something</font>

946
00:32:39,170 --> 00:32:42,119
with skip fish that I couldn't have been

947
00:32:40,400 --> 00:32:43,409
identified<font color="#E5E5E5"> easily but whiskey</font>

948
00:32:42,119 --> 00:32:46,168
fish<font color="#E5E5E5"> really excels at is breaking</font>

949
00:32:43,409 --> 00:32:47,789
applications on purpose and when you go

950
00:32:46,169 --> 00:32:48,959
back through this log history and you

951
00:32:47,789 --> 00:32:50,999
see<font color="#E5E5E5"> what it's</font><font color="#CCCCCC"> doing the brick those</font>

952
00:32:48,959 --> 00:32:52,139
applications often times those reveal a

953
00:32:50,999 --> 00:32:54,299
lot<font color="#E5E5E5"> of other parts of the application</font>

954
00:32:52,139 --> 00:32:56,069
through doing it like you might get a

955
00:32:54,299 --> 00:32:57,959
stack exception you might get a server

956
00:32:56,069 --> 00:33:01,229
error you might get some sort<font color="#E5E5E5"> of</font>

957
00:32:57,959 --> 00:33:03,329
application<font color="#E5E5E5"> engine handling error and so</font>

958
00:33:01,229 --> 00:33:05,579
that's<font color="#E5E5E5"> pretty awesome these are really</font>

959
00:33:03,329 --> 00:33:07,438
<font color="#E5E5E5">valuable tools to learn from it right so</font>

960
00:33:05,579 --> 00:33:09,959
you can use<font color="#CCCCCC"> them</font><font color="#E5E5E5"> as a means to determine</font>

961
00:33:07,439 --> 00:33:12,689
the type<font color="#CCCCCC"> of number you can put in</font>

962
00:33:09,959 --> 00:33:14,219
negative integers you can put in large

963
00:33:12,689 --> 00:33:16,169
numbers and you can use<font color="#CCCCCC"> it as a means to</font>

964
00:33:14,219 --> 00:33:19,079
identify what the underlying type system

965
00:33:16,169 --> 00:33:21,089
might be so if you put in like a this is

966
00:33:19,079 --> 00:33:22,859
the amount you put in a letter a

967
00:33:21,089 --> 00:33:25,109
obviously you're<font color="#CCCCCC"> going to exception this</font>

968
00:33:22,859 --> 00:33:26,549
<font color="#E5E5E5">is a isn't supported if you put in 10</font>

969
00:33:25,109 --> 00:33:28,649
dot 0 then you're going<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> that it's</font>

970
00:33:26,549 --> 00:33:30,269
<font color="#E5E5E5">not a valid amount if you put in a very</font>

971
00:33:28,649 --> 00:33:32,399
large amount you can pretty much assert

972
00:33:30,269 --> 00:33:34,169
this is most likely an integer right and

973
00:33:32,399 --> 00:33:35,188
that's how it's<font color="#E5E5E5"> going to be parsed does</font>

974
00:33:34,169 --> 00:33:37,349
that<font color="#E5E5E5"> make sense it's a pretty easy way</font>

975
00:33:35,189 --> 00:33:38,879
to figure that out even if it doesn't

976
00:33:37,349 --> 00:33:40,259
tell you<font color="#CCCCCC"> it's wrong right if it</font><font color="#E5E5E5"> just</font>

977
00:33:38,879 --> 00:33:42,029
puts a<font color="#CCCCCC"> little asterisk and says please</font>

978
00:33:40,259 --> 00:33:44,009
correct your data like that's just<font color="#CCCCCC"> as</font>

979
00:33:42,029 --> 00:33:46,229
just as information telling right just

980
00:33:44,009 --> 00:33:48,299
as just as behavioral easy to understand

981
00:33:46,229 --> 00:33:50,219
because whether or not they've said this

982
00:33:48,299 --> 00:33:51,749
the right effect that they're rejecting

983
00:33:50,219 --> 00:33:53,789
it the sheer fact that it's not valid

984
00:33:51,749 --> 00:33:55,619
gives you an ability<font color="#E5E5E5"> to understand how</font>

985
00:33:53,789 --> 00:33:57,809
it does it right well this<font color="#E5E5E5"> really stinks</font>

986
00:33:55,619 --> 00:33:59,249
as if this is being treated as a string

987
00:33:57,809 --> 00:34:00,809
right because<font color="#E5E5E5"> then it's just going to</font>

988
00:33:59,249 --> 00:34:02,159
get swallowed and you'll<font color="#E5E5E5"> never be able</font>

989
00:34:00,809 --> 00:34:04,109
<font color="#E5E5E5">to figure out what the underlying type</font>

990
00:34:02,159 --> 00:34:05,759
is until later when it actually needs to

991
00:34:04,109 --> 00:34:07,349
be that type that makes sense<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

992
00:34:05,759 --> 00:34:09,329
<font color="#E5E5E5">people developers create like bar char's</font>

993
00:34:07,349 --> 00:34:10,768
and they stay them as of<font color="#E5E5E5"> our char's if</font>

994
00:34:09,329 --> 00:34:12,599
its treated as a string it's most likely

995
00:34:10,768 --> 00:34:14,549
that<font color="#E5E5E5"> the underlying type system is a bar</font>

996
00:34:12,599 --> 00:34:15,869
chart or they've done integer

997
00:34:14,549 --> 00:34:18,119
conversions where they take the string

998
00:34:15,869 --> 00:34:19,529
<font color="#CCCCCC">and they cast it as an injury later so</font>

999
00:34:18,119 --> 00:34:20,849
you'll see breaking<font color="#E5E5E5"> either now or you'll</font>

1000
00:34:19,529 --> 00:34:22,349
see it later based on whether or<font color="#E5E5E5"> not</font>

1001
00:34:20,849 --> 00:34:25,799
<font color="#E5E5E5">that string is valid doesn't that make</font>

1002
00:34:22,349 --> 00:34:27,239
sense wait you're going<font color="#CCCCCC"> to learn a lot</font>

1003
00:34:25,799 --> 00:34:28,918
of<font color="#E5E5E5"> things from exceptions you can also</font>

1004
00:34:27,239 --> 00:34:31,649
learn whether or not a field is dynamic

1005
00:34:28,918 --> 00:34:33,748
or static in that sense you can put in a

1006
00:34:31,649 --> 00:34:35,998
value like one plus one and<font color="#CCCCCC"> see if you</font>

1007
00:34:33,748 --> 00:34:38,459
get<font color="#E5E5E5"> the numeric equivalent of two you</font>

1008
00:34:35,998 --> 00:34:40,618
can do 1-1 see if it's the equivalent of

1009
00:34:38,460 --> 00:34:42,299
<font color="#CCCCCC">zero so whenever</font><font color="#E5E5E5"> you run into like an</font>

1010
00:34:40,619 --> 00:34:44,519
MVC pattern or something where you see

1011
00:34:42,299 --> 00:34:46,649
like a product<font color="#E5E5E5"> ID equals if you do one</font>

1012
00:34:44,518 --> 00:34:48,748
plus one and you get two then there's a

1013
00:34:46,649 --> 00:34:50,969
fairly<font color="#E5E5E5"> decent chance that that field is</font>

1014
00:34:48,748 --> 00:34:52,529
being injected into a sequel statement

1015
00:34:50,969 --> 00:34:53,998
that<font color="#CCCCCC"> you can then modify for</font><font color="#E5E5E5"> sequel</font>

1016
00:34:52,529 --> 00:34:55,350
injection right this is how you're going

1017
00:34:53,998 --> 00:34:56,879
to find things<font color="#E5E5E5"> that are blind</font>

1018
00:34:55,350 --> 00:34:58,440
inside<font color="#CCCCCC"> of the system just</font><font color="#E5E5E5"> based on</font>

1019
00:34:56,880 --> 00:35:00,330
whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not it's past the dynamically</font>

1020
00:34:58,440 --> 00:35:01,740
or handled handled that way more often

1021
00:35:00,330 --> 00:35:03,330
than not you'll get a failure saying

1022
00:35:01,740 --> 00:35:05,580
that one plus one is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> an integer</font>

1023
00:35:03,330 --> 00:35:07,110
that's fine but<font color="#CCCCCC"> that's going</font><font color="#E5E5E5"> to tell you</font>

1024
00:35:05,580 --> 00:35:09,299
a<font color="#CCCCCC"> little bit more about the application</font>

1025
00:35:07,110 --> 00:35:10,530
side of it you can<font color="#E5E5E5"> also use this as an</font>

1026
00:35:09,300 --> 00:35:12,750
approach for testing whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not a</font>

1027
00:35:10,530 --> 00:35:14,460
string is dynamic by doing things<font color="#E5E5E5"> like</font>

1028
00:35:12,750 --> 00:35:16,500
string concatenation inside of your

1029
00:35:14,460 --> 00:35:20,070
variable names so if I have like you

1030
00:35:16,500 --> 00:35:22,890
know XYZ<font color="#E5E5E5"> quote plus you know another</font>

1031
00:35:20,070 --> 00:35:24,270
<font color="#E5E5E5">thing XYZ if it concatenates that and it</font>

1032
00:35:22,890 --> 00:35:26,670
puts it into your data structure when

1033
00:35:24,270 --> 00:35:28,080
you retrieve it you have potentially a

1034
00:35:26,670 --> 00:35:29,610
sequel injection field because what it's

1035
00:35:28,080 --> 00:35:31,860
doing<font color="#E5E5E5"> is it's taking that passing it</font>

1036
00:35:29,610 --> 00:35:33,750
into the database unchecked and then

1037
00:35:31,860 --> 00:35:35,640
it's being condensed as the sequel

1038
00:35:33,750 --> 00:35:37,380
injection or the sequel is being

1039
00:35:35,640 --> 00:35:38,520
processed so you can use it<font color="#E5E5E5"> as a means</font>

1040
00:35:37,380 --> 00:35:40,650
to test whether or not the field<font color="#E5E5E5"> is</font>

1041
00:35:38,520 --> 00:35:42,180
dynamic and then use that<font color="#E5E5E5"> as a different</font>

1042
00:35:40,650 --> 00:35:45,390
way to attack the application from there

1043
00:35:42,180 --> 00:35:47,460
so well just like debugging new errors

1044
00:35:45,390 --> 00:35:48,660
are better than old errors new errors

1045
00:35:47,460 --> 00:35:50,730
mean that you're getting<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot further</font>

1046
00:35:48,660 --> 00:35:52,589
in the application so as you're testing

1047
00:35:50,730 --> 00:35:54,480
something if you get<font color="#E5E5E5"> an</font><font color="#CCCCCC"> application that</font>

1048
00:35:52,590 --> 00:35:56,370
says you<font color="#E5E5E5"> know hey this is failing</font>

1049
00:35:54,480 --> 00:35:58,470
sometimes you might actually have to fix

1050
00:35:56,370 --> 00:36:00,390
<font color="#E5E5E5">that failing code in order to test one</font>

1051
00:35:58,470 --> 00:36:02,790
level deeper one level deeper one level

1052
00:36:00,390 --> 00:36:05,520
deeper<font color="#E5E5E5"> I just did a blog post</font><font color="#CCCCCC"> if anyone</font>

1053
00:36:02,790 --> 00:36:07,200
follows me on an exception<font color="#E5E5E5"> where I went</font>

1054
00:36:05,520 --> 00:36:08,759
to a page page<font color="#E5E5E5"> didn't even have the</font>

1055
00:36:07,200 --> 00:36:10,439
JavaScript on it that it was trying to

1056
00:36:08,760 --> 00:36:12,240
load but it was an injection point so

1057
00:36:10,440 --> 00:36:14,010
<font color="#CCCCCC">anytime you get to</font><font color="#E5E5E5"> the JavaScript it</font>

1058
00:36:12,240 --> 00:36:16,020
fails because that's the exception and

1059
00:36:14,010 --> 00:36:17,730
so I ended<font color="#CCCCCC"> up doing was fixing their</font>

1060
00:36:16,020 --> 00:36:19,259
<font color="#CCCCCC">JavaScript form in order to create</font><font color="#E5E5E5"> the</font>

1061
00:36:17,730 --> 00:36:20,550
cross-site scripting attack that I could

1062
00:36:19,260 --> 00:36:22,650
then show them reflect it right so

1063
00:36:20,550 --> 00:36:24,810
sometimes that's a necessity when you're

1064
00:36:22,650 --> 00:36:26,370
doing a test usually what it means is

1065
00:36:24,810 --> 00:36:27,750
that you're<font color="#E5E5E5"> missing required data and</font>

1066
00:36:26,370 --> 00:36:29,310
that's<font color="#E5E5E5"> going to be something that you</font>

1067
00:36:27,750 --> 00:36:30,720
evaluate as you go back through and<font color="#E5E5E5"> you</font>

1068
00:36:29,310 --> 00:36:32,700
look at how things interact with each

1069
00:36:30,720 --> 00:36:35,640
other<font color="#CCCCCC"> like is this data needed in this</font>

1070
00:36:32,700 --> 00:36:37,379
<font color="#E5E5E5">place if so</font><font color="#CCCCCC"> how can you</font><font color="#E5E5E5"> modify and add</font>

1071
00:36:35,640 --> 00:36:39,509
it back to your question under determine

1072
00:36:37,380 --> 00:36:41,040
whether or<font color="#CCCCCC"> not it happens right usually</font>

1073
00:36:39,510 --> 00:36:43,020
when you're testing<font color="#E5E5E5"> an application for</font>

1074
00:36:41,040 --> 00:36:44,790
behaviors it's not<font color="#E5E5E5"> in your best interest</font>

1075
00:36:43,020 --> 00:36:46,980
to try to modify every single value at

1076
00:36:44,790 --> 00:36:48,390
once or it's not even in your<font color="#E5E5E5"> best</font>

1077
00:36:46,980 --> 00:36:49,950
interest to take automated tools which

1078
00:36:48,390 --> 00:36:51,359
do that because again it's<font color="#E5E5E5"> going to</font>

1079
00:36:49,950 --> 00:36:52,799
create so much information<font color="#CCCCCC"> that you're</font>

1080
00:36:51,360 --> 00:36:54,510
going<font color="#E5E5E5"> to have to figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> how it works</font>

1081
00:36:52,800 --> 00:36:56,340
you might as well done it manually in

1082
00:36:54,510 --> 00:36:58,440
the first place right so take an

1083
00:36:56,340 --> 00:36:59,850
application<font color="#CCCCCC"> that's got form fields you</font>

1084
00:36:58,440 --> 00:37:01,110
know play around with each one and see

1085
00:36:59,850 --> 00:37:03,240
does the application throw an exception

1086
00:37:01,110 --> 00:37:04,680
how what<font color="#CCCCCC"> are the limits of each variable</font>

1087
00:37:03,240 --> 00:37:06,390
type and that's<font color="#E5E5E5"> going to help you</font>

1088
00:37:04,680 --> 00:37:08,310
determine whether i'm still stuck in the

1089
00:37:06,390 --> 00:37:08,848
view model creation whether<font color="#E5E5E5"> i'm stuck</font><font color="#CCCCCC"> in</font>

1090
00:37:08,310 --> 00:37:09,960
the data

1091
00:37:08,849 --> 00:37:11,700
here whether<font color="#E5E5E5"> I'm stuck in the business</font>

1092
00:37:09,960 --> 00:37:13,710
object here this is going<font color="#E5E5E5"> to be your</font>

1093
00:37:11,700 --> 00:37:16,710
kind of primary tool for doing doing

1094
00:37:13,710 --> 00:37:18,029
exactly that and applications will<font color="#CCCCCC"> fill</font>

1095
00:37:16,710 --> 00:37:19,970
in different places and<font color="#E5E5E5"> it's kind of</font>

1096
00:37:18,029 --> 00:37:22,229
<font color="#E5E5E5">exactly we were just talking about</font>

1097
00:37:19,970 --> 00:37:23,788
<font color="#E5E5E5">another way that</font><font color="#CCCCCC"> you can discern how an</font>

1098
00:37:22,229 --> 00:37:25,710
application is behaving is looking at

1099
00:37:23,789 --> 00:37:27,539
the timing<font color="#E5E5E5"> based of the attack so a</font>

1100
00:37:25,710 --> 00:37:29,519
pretty<font color="#E5E5E5"> common inside of blind sequel</font>

1101
00:37:27,539 --> 00:37:31,769
injection taxes you're<font color="#E5E5E5"> going to create</font>

1102
00:37:29,519 --> 00:37:34,709
something<font color="#E5E5E5"> that makes the system wait</font>

1103
00:37:31,769 --> 00:37:36,118
longer so<font color="#CCCCCC"> Siegel as a language supports</font>

1104
00:37:34,710 --> 00:37:37,829
a variety of<font color="#CCCCCC"> different commands</font><font color="#E5E5E5"> just</font>

1105
00:37:36,119 --> 00:37:39,269
like any other programming language some

1106
00:37:37,829 --> 00:37:41,039
of the ones that it supports are either

1107
00:37:39,269 --> 00:37:44,038
time wait type stuff where it says hey

1108
00:37:41,039 --> 00:37:46,049
wait for 30 seconds<font color="#CCCCCC"> or you do you create</font>

1109
00:37:44,039 --> 00:37:48,089
a mathematical problem for it that takes

1110
00:37:46,049 --> 00:37:50,099
a long time for it to solve if something

1111
00:37:48,089 --> 00:37:51,599
like<font color="#E5E5E5"> a laugh is looking for how that</font>

1112
00:37:50,099 --> 00:37:54,059
thing actually interacts and then goes

1113
00:37:51,599 --> 00:37:55,470
from there and so whether or not it's

1114
00:37:54,059 --> 00:37:57,119
taking its time is<font color="#E5E5E5"> going to tell you</font>

1115
00:37:55,470 --> 00:37:58,589
whether or<font color="#E5E5E5"> not your ability to affect</font>

1116
00:37:57,119 --> 00:38:00,660
the application where you're able to

1117
00:37:58,589 --> 00:38:02,609
affect the application or even if it's

1118
00:38:00,660 --> 00:38:04,368
broken right so if I'm<font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> a</font>

1119
00:38:02,609 --> 00:38:06,930
report page and i'm testing something

1120
00:38:04,369 --> 00:38:08,460
for how it works right let's say<font color="#CCCCCC"> i'm</font>

1121
00:38:06,930 --> 00:38:09,989
<font color="#E5E5E5">going to get an exception back if I</font>

1122
00:38:08,460 --> 00:38:12,210
modify one field and I'm<font color="#E5E5E5"> getting it back</font>

1123
00:38:09,989 --> 00:38:13,229
super quick<font color="#E5E5E5"> and it's pretty confident</font>

1124
00:38:12,210 --> 00:38:14,880
that<font color="#E5E5E5"> there's something inside of the</font>

1125
00:38:13,229 --> 00:38:16,229
controller that's checking that variable

1126
00:38:14,880 --> 00:38:18,690
and it's failing before it ever hits

1127
00:38:16,229 --> 00:38:20,279
data access let's say<font color="#E5E5E5"> I change that feel</font>

1128
00:38:18,690 --> 00:38:21,299
to get it to work but<font color="#E5E5E5"> it's still failing</font>

1129
00:38:20,279 --> 00:38:23,219
i'm still getting maybe even the same

1130
00:38:21,299 --> 00:38:25,019
exception but<font color="#E5E5E5"> it's taking twice as long</font>

1131
00:38:23,219 --> 00:38:26,940
or three<font color="#E5E5E5"> times as long it's a fairly</font>

1132
00:38:25,019 --> 00:38:28,439
good chance you've moved down inside<font color="#E5E5E5"> of</font>

1133
00:38:26,940 --> 00:38:30,450
how the application works for testing

1134
00:38:28,440 --> 00:38:32,670
different routes inside of it that kind

1135
00:38:30,450 --> 00:38:34,379
of makes sense a similar pattern that

1136
00:38:32,670 --> 00:38:37,829
you'd see inside of static<font color="#E5E5E5"> analysis is</font>

1137
00:38:34,380 --> 00:38:40,289
anybody use<font color="#CCCCCC"> pecs before no</font><font color="#E5E5E5"> pecs is a.net</font>

1138
00:38:37,829 --> 00:38:42,029
framework tool that our work in like C++

1139
00:38:40,289 --> 00:38:44,489
or C sharp or vb.net whatever you're

1140
00:38:42,029 --> 00:38:46,769
using in.net that creates fuzz testing

1141
00:38:44,489 --> 00:38:48,239
for you to run in failure patterns and

1142
00:38:46,769 --> 00:38:50,488
what it does is<font color="#CCCCCC"> it basically walks</font>

1143
00:38:48,239 --> 00:38:52,559
through every single use case possible

1144
00:38:50,489 --> 00:38:54,089
of your application by saying you know

1145
00:38:52,559 --> 00:38:56,160
hey<font color="#E5E5E5"> if I've got a switch statement and I</font>

1146
00:38:54,089 --> 00:38:57,719
have to value match these things it will

1147
00:38:56,160 --> 00:38:59,160
create<font color="#E5E5E5"> tests for you dynamically which</font>

1148
00:38:57,719 --> 00:39:00,749
make<font color="#CCCCCC"> sure that every branch of the</font>

1149
00:38:59,160 --> 00:39:02,879
conditional statement is executed that

1150
00:39:00,749 --> 00:39:04,259
that if that makes sense that's actively

1151
00:39:02,880 --> 00:39:06,029
how you want<font color="#E5E5E5"> to test it to understand</font>

1152
00:39:04,259 --> 00:39:07,349
what the doing because then you can use

1153
00:39:06,029 --> 00:39:08,819
<font color="#E5E5E5">that as a means to get further reach</font>

1154
00:39:07,349 --> 00:39:12,660
deeper in the application for different

1155
00:39:08,819 --> 00:39:14,549
types of testing some tips anything it

1156
00:39:12,660 --> 00:39:15,808
says or doesn't say is very reeling it

1157
00:39:14,549 --> 00:39:17,880
doesn't matter right so whether or not

1158
00:39:15,809 --> 00:39:20,039
it throws an exception is very verbose

1159
00:39:17,880 --> 00:39:22,470
note no worries<font color="#CCCCCC"> right if it still throws</font>

1160
00:39:20,039 --> 00:39:23,790
an exception that very statement itself

1161
00:39:22,470 --> 00:39:26,910
is very telling on how the application

1162
00:39:23,790 --> 00:39:28,890
behave if it gives you like you know the

1163
00:39:26,910 --> 00:39:30,839
stack trace and it tells you how it was

1164
00:39:28,890 --> 00:39:32,970
rin like even better right that's great

1165
00:39:30,840 --> 00:39:34,830
it's awesome like congratulations but

1166
00:39:32,970 --> 00:39:36,779
you don't<font color="#CCCCCC"> necessarily need it it just</font>

1167
00:39:34,830 --> 00:39:37,950
makes your life a little bit easier and

1168
00:39:36,780 --> 00:39:39,420
<font color="#E5E5E5">you shouldn't trust tools too much</font>

1169
00:39:37,950 --> 00:39:41,609
sometimes tools create their own

1170
00:39:39,420 --> 00:39:43,859
<font color="#E5E5E5">problems for you like skip fish I'll be</font>

1171
00:39:41,609 --> 00:39:45,330
that<font color="#E5E5E5"> it's awesome sometimes can create a</font>

1172
00:39:43,859 --> 00:39:47,130
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of false positives in the sense that</font>

1173
00:39:45,330 --> 00:39:48,720
you're overwhelming the server and it

1174
00:39:47,130 --> 00:39:50,760
has nothing to do with the application

1175
00:39:48,720 --> 00:39:52,230
so you<font color="#E5E5E5"> run into scenarios where you're</font>

1176
00:39:50,760 --> 00:39:53,880
breaking the server but not the

1177
00:39:52,230 --> 00:39:55,470
application the application behaving

1178
00:39:53,880 --> 00:39:57,119
fine or you've overwhelmed the

1179
00:39:55,470 --> 00:39:58,830
application so much that you can't you

1180
00:39:57,119 --> 00:40:00,660
can't discern viable results out<font color="#CCCCCC"> of it</font>

1181
00:39:58,830 --> 00:40:02,640
so that's kind of the<font color="#CCCCCC"> the finesse that</font>

1182
00:40:00,660 --> 00:40:04,589
you'll have<font color="#E5E5E5"> to get into as</font><font color="#CCCCCC"> you work on</font>

1183
00:40:02,640 --> 00:40:08,819
<font color="#E5E5E5">basically it's a type of fuzz testing to</font>

1184
00:40:04,590 --> 00:40:13,020
see where it fails right any<font color="#E5E5E5"> questions</font>

1185
00:40:08,820 --> 00:40:17,280
on that<font color="#CCCCCC"> ok so just kind of sort</font><font color="#E5E5E5"> of some</font>

1186
00:40:13,020 --> 00:40:19,290
some final components to that right Oda

1187
00:40:17,280 --> 00:40:21,150
testing is pretty awesome<font color="#E5E5E5"> right this is</font>

1188
00:40:19,290 --> 00:40:23,580
this<font color="#E5E5E5"> is how you should be looking at</font>

1189
00:40:21,150 --> 00:40:25,020
<font color="#E5E5E5">your application very iterative when we</font>

1190
00:40:23,580 --> 00:40:26,310
were just talking about our process of

1191
00:40:25,020 --> 00:40:28,020
reverse engineering and testing the

1192
00:40:26,310 --> 00:40:29,849
application you learn a lot<font color="#E5E5E5"> through</font>

1193
00:40:28,020 --> 00:40:31,619
actual exploits as well for instance

1194
00:40:29,849 --> 00:40:33,540
some exploits will give you<font color="#E5E5E5"> greater</font>

1195
00:40:31,619 --> 00:40:35,280
visibility and how the<font color="#CCCCCC"> application is</font>

1196
00:40:33,540 --> 00:40:37,320
working in its first<font color="#E5E5E5"> place I don't need</font>

1197
00:40:35,280 --> 00:40:38,849
this fancy<font color="#E5E5E5"> pants you know</font><font color="#CCCCCC"> information</font>

1198
00:40:37,320 --> 00:40:40,650
<font color="#E5E5E5">gathering spend two days trying</font><font color="#CCCCCC"> to</font>

1199
00:40:38,849 --> 00:40:42,839
understand<font color="#E5E5E5"> how it works if I can get</font>

1200
00:40:40,650 --> 00:40:44,430
into it do one test to see if they've

1201
00:40:42,839 --> 00:40:46,589
accidentally published their git

1202
00:40:44,430 --> 00:40:48,750
repository download the entire source

1203
00:40:46,589 --> 00:40:50,040
code for it like well I<font color="#CCCCCC"> don't what are</font>

1204
00:40:48,750 --> 00:40:52,290
<font color="#E5E5E5">your information gathering do I want</font>

1205
00:40:50,040 --> 00:40:54,810
have the whole application from there is

1206
00:40:52,290 --> 00:40:57,390
anybody familiar with the<font color="#CCCCCC"> dcbs attacks</font>

1207
00:40:54,810 --> 00:40:59,490
anybody seen<font color="#CCCCCC"> that my friend Adam</font><font color="#E5E5E5"> just</font>

1208
00:40:57,390 --> 00:41:01,230
put<font color="#CCCCCC"> together a talk at</font><font color="#E5E5E5"> Def Con he did it</font>

1209
00:40:59,490 --> 00:41:02,790
at shmoocon<font color="#E5E5E5"> I think as well with this</font>

1210
00:41:01,230 --> 00:41:04,530
attack that actually goes back test the

1211
00:41:02,790 --> 00:41:06,150
<font color="#E5E5E5">application to see if they've</font>

1212
00:41:04,530 --> 00:41:08,220
accidentally published their source code

1213
00:41:06,150 --> 00:41:09,900
repository which happens sometimes

1214
00:41:08,220 --> 00:41:11,520
depending on how you release if you

1215
00:41:09,900 --> 00:41:13,589
release with that publishing up on the

1216
00:41:11,520 --> 00:41:14,940
web<font color="#E5E5E5"> I can pull it down every single</font>

1217
00:41:13,589 --> 00:41:16,410
revision of it and I could look<font color="#E5E5E5"> at your</font>

1218
00:41:14,940 --> 00:41:18,599
source code history<font color="#E5E5E5"> and then I can I</font>

1219
00:41:16,410 --> 00:41:20,580
know your application right another one

1220
00:41:18,599 --> 00:41:22,380
is focus on directory traversal if that

1221
00:41:20,580 --> 00:41:23,970
doesn't work is if I have directory

1222
00:41:22,380 --> 00:41:25,530
traversal then I can download the source

1223
00:41:23,970 --> 00:41:27,419
code<font color="#CCCCCC"> and then I can figure out how it's</font>

1224
00:41:25,530 --> 00:41:29,339
working if i look<font color="#E5E5E5"> at sequel injection</font>

1225
00:41:27,420 --> 00:41:30,690
next<font color="#E5E5E5"> i can maybe take over the database</font>

1226
00:41:29,339 --> 00:41:32,460
if i take over the database i could take

1227
00:41:30,690 --> 00:41:34,710
over the server<font color="#CCCCCC"> or take over the server</font>

1228
00:41:32,460 --> 00:41:35,290
then i can download your code right I'm

1229
00:41:34,710 --> 00:41:36,610
work

1230
00:41:35,290 --> 00:41:38,050
tasks they're going to constantly be

1231
00:41:36,610 --> 00:41:40,000
going through<font color="#CCCCCC"> this iterative loop in</font>

1232
00:41:38,050 --> 00:41:41,980
order to increase my visibility of the

1233
00:41:40,000 --> 00:41:43,360
test as<font color="#E5E5E5"> I'm testing it in order to</font>

1234
00:41:41,980 --> 00:41:44,590
gather information<font color="#E5E5E5"> about what's it's</font>

1235
00:41:43,360 --> 00:41:45,970
composed<font color="#CCCCCC"> of because I don't like</font><font color="#E5E5E5"> I don't</font>

1236
00:41:44,590 --> 00:41:47,530
like guessing and you probably don't

1237
00:41:45,970 --> 00:41:49,209
<font color="#CCCCCC">want to pay me to guess on how your</font>

1238
00:41:47,530 --> 00:41:53,110
application works it's not tremendously

1239
00:41:49,210 --> 00:41:55,090
useful for your funds your application

1240
00:41:53,110 --> 00:41:57,220
as your guide right you should<font color="#E5E5E5"> be asking</font>

1241
00:41:55,090 --> 00:41:58,960
it like tons and tons of questions as

1242
00:41:57,220 --> 00:42:00,189
you go through and how you ask it a

1243
00:41:58,960 --> 00:42:02,650
question is really really really

1244
00:42:00,190 --> 00:42:04,030
important it's a finesse like<font color="#CCCCCC"> it kind of</font>

1245
00:42:02,650 --> 00:42:06,070
said I think elicitation<font color="#CCCCCC"> and</font>

1246
00:42:04,030 --> 00:42:08,050
interrogation is kind of the the<font color="#E5E5E5"> best</font>

1247
00:42:06,070 --> 00:42:10,090
best way to understand how you're going

1248
00:42:08,050 --> 00:42:12,040
to be doing<font color="#E5E5E5"> this because it's it's</font><font color="#CCCCCC"> like</font>

1249
00:42:10,090 --> 00:42:13,750
good cop bad cop sometimes I'm a bad cop

1250
00:42:12,040 --> 00:42:15,070
right if I'm on<font color="#CCCCCC"> an app and it's just</font>

1251
00:42:13,750 --> 00:42:16,690
going<font color="#CCCCCC"> to continue</font><font color="#E5E5E5"> to tell me the truth</font>

1252
00:42:15,070 --> 00:42:18,400
and<font color="#E5E5E5"> it's super stable then I'm just</font>

1253
00:42:16,690 --> 00:42:20,530
going to spam it with a lot of<font color="#E5E5E5"> stuff and</font>

1254
00:42:18,400 --> 00:42:22,150
<font color="#E5E5E5">if I</font><font color="#CCCCCC"> get deviations and the results from</font>

1255
00:42:20,530 --> 00:42:23,650
it great like that's awesome<font color="#E5E5E5"> but</font>

1256
00:42:22,150 --> 00:42:25,120
<font color="#E5E5E5">sometimes the application can't support</font>

1257
00:42:23,650 --> 00:42:27,100
a type of test like that it's not as

1258
00:42:25,120 --> 00:42:29,109
truthful or<font color="#CCCCCC"> it's it's more finicky right</font>

1259
00:42:27,100 --> 00:42:30,610
so you have to learn how to ask very

1260
00:42:29,110 --> 00:42:32,650
specific questions as you come through

1261
00:42:30,610 --> 00:42:33,700
and use the application or it's

1262
00:42:32,650 --> 00:42:34,900
basically not going to give you the

1263
00:42:33,700 --> 00:42:38,189
answer you want or it's going<font color="#E5E5E5"> to lie to</font>

1264
00:42:34,900 --> 00:42:40,810
<font color="#E5E5E5">you with the results resume make sense</font>

1265
00:42:38,190 --> 00:42:42,460
listen to the application it's going<font color="#E5E5E5"> to</font>

1266
00:42:40,810 --> 00:42:45,220
tell you a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> different things</font><font color="#E5E5E5"> about</font>

1267
00:42:42,460 --> 00:42:47,140
it it's that's how<font color="#E5E5E5"> you make informed</font>

1268
00:42:45,220 --> 00:42:48,970
<font color="#E5E5E5">decisions if you come</font><font color="#CCCCCC"> through and you</font>

1269
00:42:47,140 --> 00:42:50,770
find information relative to a stack

1270
00:42:48,970 --> 00:42:54,189
trace you can use that against it in

1271
00:42:50,770 --> 00:42:56,020
<font color="#E5E5E5">different places one of the one of the</font>

1272
00:42:54,190 --> 00:42:57,520
<font color="#E5E5E5">tax that i did a little while ago is I</font>

1273
00:42:56,020 --> 00:42:58,810
found directory traversal director

1274
00:42:57,520 --> 00:43:00,370
victor so it's<font color="#E5E5E5"> great because you could</font>

1275
00:42:58,810 --> 00:43:02,560
download system files you can download a

1276
00:43:00,370 --> 00:43:04,660
bunch of known things but in this case

1277
00:43:02,560 --> 00:43:06,160
the developers were even so nice to me

1278
00:43:04,660 --> 00:43:08,560
they actually left path to the source

1279
00:43:06,160 --> 00:43:09,640
code inside of the developer comments so

1280
00:43:08,560 --> 00:43:11,140
once i had that<font color="#E5E5E5"> i just downloaded all</font>

1281
00:43:09,640 --> 00:43:13,720
the source code because it<font color="#E5E5E5"> was in it was</font>

1282
00:43:11,140 --> 00:43:15,520
in the comments<font color="#E5E5E5"> of the application right</font>

1283
00:43:13,720 --> 00:43:18,250
and use that<font color="#E5E5E5"> against them I had another</font>

1284
00:43:15,520 --> 00:43:19,750
test just really<font color="#E5E5E5"> recently on</font><font color="#CCCCCC"> the same</font>

1285
00:43:18,250 --> 00:43:21,790
blog post<font color="#E5E5E5"> on the JavaScript thing I was</font>

1286
00:43:19,750 --> 00:43:23,170
telling you about<font color="#E5E5E5"> where I figured out</font>

1287
00:43:21,790 --> 00:43:24,790
that<font color="#CCCCCC"> if I just took something that</font>

1288
00:43:23,170 --> 00:43:26,770
looked fairly unique to the application

1289
00:43:24,790 --> 00:43:28,240
you you don't know what<font color="#CCCCCC"> the CMS is maybe</font>

1290
00:43:26,770 --> 00:43:30,759
the CMS does a really good job of hiding

1291
00:43:28,240 --> 00:43:32,709
itself basically<font color="#CCCCCC"> you take the names of</font>

1292
00:43:30,760 --> 00:43:34,360
the application components and you could

1293
00:43:32,710 --> 00:43:35,860
enough google searching for it you can

1294
00:43:34,360 --> 00:43:37,510
use<font color="#E5E5E5"> that as a means to fingerprint the</font>

1295
00:43:35,860 --> 00:43:39,370
application and download it based off of

1296
00:43:37,510 --> 00:43:40,810
<font color="#E5E5E5">that so you download something you look</font>

1297
00:43:39,370 --> 00:43:42,430
at the version history from the varian

1298
00:43:40,810 --> 00:43:45,610
history you<font color="#E5E5E5"> can test the application to</font>

1299
00:43:42,430 --> 00:43:47,049
determine how it works another thing for

1300
00:43:45,610 --> 00:43:47,460
testing although we didn't have it in

1301
00:43:47,050 --> 00:43:50,460
here

1302
00:43:47,460 --> 00:43:55,310
is that as I look<font color="#E5E5E5"> at the application if</font>

1303
00:43:50,460 --> 00:43:57,750
I found<font color="#E5E5E5"> myself in a scenario</font><font color="#CCCCCC"> where I</font>

1304
00:43:55,310 --> 00:43:59,100
have two files that come back or have a

1305
00:43:57,750 --> 00:44:01,080
file that comes back and it could<font color="#CCCCCC"> be any</font>

1306
00:43:59,100 --> 00:44:03,390
one number of version how might you be

1307
00:44:01,080 --> 00:44:04,770
able<font color="#E5E5E5"> to determine that version of the</font>

1308
00:44:03,390 --> 00:44:06,540
file does that make sense so let's say I

1309
00:44:04,770 --> 00:44:07,920
find<font color="#CCCCCC"> a default file for WordPress or</font>

1310
00:44:06,540 --> 00:44:11,160
something how do you fingerprint whether

1311
00:44:07,920 --> 00:44:21,990
or not<font color="#E5E5E5"> it's WordPress version 2.2 2.3</font>

1312
00:44:11,160 --> 00:44:22,950
2.4 2.5 does anybody<font color="#E5E5E5"> know okay that's</font>

1313
00:44:21,990 --> 00:44:25,109
that's a way you can look for

1314
00:44:22,950 --> 00:44:30,930
<font color="#E5E5E5">differences in the file what else might</font>

1315
00:44:25,110 --> 00:44:32,700
there be modified date yeah there's a

1316
00:44:30,930 --> 00:44:34,440
couple of tools<font color="#E5E5E5"> that I might use if I</font>

1317
00:44:32,700 --> 00:44:37,140
identify that it's a CMS one of the

1318
00:44:34,440 --> 00:44:39,840
tools that I like it prefer is CMS

1319
00:44:37,140 --> 00:44:42,029
<font color="#E5E5E5">Explorer CMS explorer we'll do a couple</font>

1320
00:44:39,840 --> 00:44:43,590
of things for me first is it'll help me

1321
00:44:42,030 --> 00:44:45,570
finger print the application if it knows

1322
00:44:43,590 --> 00:44:47,100
by looking at default directories then

1323
00:44:45,570 --> 00:44:48,990
if it finds these files what it's done

1324
00:44:47,100 --> 00:44:50,670
is it's created a hash some of every one

1325
00:44:48,990 --> 00:44:52,319
<font color="#E5E5E5">of the files based on modification and</font>

1326
00:44:50,670 --> 00:44:53,970
then it compares the hash of the<font color="#E5E5E5"> file at</font>

1327
00:44:52,320 --> 00:44:55,620
downloads to the hash of what it has in

1328
00:44:53,970 --> 00:44:57,359
its database and<font color="#E5E5E5"> says if this hash</font>

1329
00:44:55,620 --> 00:44:58,830
mattresses hash it's a fairly good

1330
00:44:57,360 --> 00:45:00,540
chance that it's this version of<font color="#E5E5E5"> this</font>

1331
00:44:58,830 --> 00:45:02,490
framework that's<font color="#E5E5E5"> the first thing it does</font>

1332
00:45:00,540 --> 00:45:04,110
second<font color="#E5E5E5"> thing it does is intelligent</font>

1333
00:45:02,490 --> 00:45:05,970
browsing if I identify that<font color="#E5E5E5"> it's</font>

1334
00:45:04,110 --> 00:45:07,260
<font color="#E5E5E5">WordPress or Drupal the next thing I'm</font>

1335
00:45:05,970 --> 00:45:08,910
going to do is download all the

1336
00:45:07,260 --> 00:45:10,770
different plugins to see how the plugins

1337
00:45:08,910 --> 00:45:12,420
are created and then I can create<font color="#E5E5E5"> a very</font>

1338
00:45:10,770 --> 00:45:14,430
intelligent word list based on what

1339
00:45:12,420 --> 00:45:16,050
might be there and then scan for and

1340
00:45:14,430 --> 00:45:17,549
then figure<font color="#E5E5E5"> out what</font><font color="#CCCCCC"> that content is</font>

1341
00:45:16,050 --> 00:45:18,780
that might be there and then in some

1342
00:45:17,550 --> 00:45:20,580
cases have actually found sequel

1343
00:45:18,780 --> 00:45:22,470
injection that way off of<font color="#E5E5E5"> plugins that</font>

1344
00:45:20,580 --> 00:45:24,240
they were<font color="#E5E5E5"> using to their database off of</font>

1345
00:45:22,470 --> 00:45:26,609
the CMS that<font color="#CCCCCC"> their they've built into</font>

1346
00:45:24,240 --> 00:45:28,229
you again our strategy is to increase

1347
00:45:26,610 --> 00:45:29,700
our visibility as we iterate through

1348
00:45:28,230 --> 00:45:32,220
this application and continue to<font color="#E5E5E5"> ask</font>

1349
00:45:29,700 --> 00:45:33,509
questions as it retrieves results from

1350
00:45:32,220 --> 00:45:35,100
these questions we're using those a

1351
00:45:33,510 --> 00:45:38,580
means to drive ourselves forward

1352
00:45:35,100 --> 00:45:40,710
continually bad news is you<font color="#E5E5E5"> really can't</font>

1353
00:45:38,580 --> 00:45:43,560
do a lot to stop that because this<font color="#E5E5E5"> is</font>

1354
00:45:40,710 --> 00:45:45,330
always<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be</font><font color="#CCCCCC"> true</font><font color="#E5E5E5"> but you probably</font>

1355
00:45:43,560 --> 00:45:46,890
shouldn't be so<font color="#CCCCCC"> stinkin obvious about</font>

1356
00:45:45,330 --> 00:45:49,020
<font color="#E5E5E5">what you're doing inside of it there's</font>

1357
00:45:46,890 --> 00:45:51,120
no law that says you can't remove

1358
00:45:49,020 --> 00:45:52,560
metadata you can't remove fingerprints

1359
00:45:51,120 --> 00:45:54,540
from the application if you're using

1360
00:45:52,560 --> 00:45:56,220
<font color="#E5E5E5">Drupal for instance your viewlet says</font>

1361
00:45:54,540 --> 00:45:57,840
you have to<font color="#CCCCCC"> have a license included on</font>

1362
00:45:56,220 --> 00:45:59,609
the server somewhere if somebody asks

1363
00:45:57,840 --> 00:46:00,240
that's<font color="#E5E5E5"> all it says so maybe it might</font>

1364
00:45:59,610 --> 00:46:01,650
take you

1365
00:46:00,240 --> 00:46:03,270
a little bit<font color="#E5E5E5"> of time to go back and</font>

1366
00:46:01,650 --> 00:46:04,920
remove some<font color="#CCCCCC"> of the default content that</font>

1367
00:46:03,270 --> 00:46:07,290
you're not<font color="#E5E5E5"> using move some of the sample</font>

1368
00:46:04,920 --> 00:46:08,490
files because its benefit right if

1369
00:46:07,290 --> 00:46:09,840
knowing is half the battle you should

1370
00:46:08,490 --> 00:46:12,689
<font color="#CCCCCC">probably shut up about telling everybody</font>

1371
00:46:09,840 --> 00:46:15,960
how you developed everything that's

1372
00:46:12,690 --> 00:46:17,160
that's kind of how<font color="#CCCCCC"> that works I think we</font>

1373
00:46:15,960 --> 00:46:18,720
<font color="#CCCCCC">have five minutes</font><font color="#E5E5E5"> they may have</font>

1374
00:46:17,160 --> 00:46:29,460
<font color="#CCCCCC">questions for me while we're going</font>

1375
00:46:18,720 --> 00:46:31,470
through that I only use few tools the

1376
00:46:29,460 --> 00:46:33,240
first tool<font color="#CCCCCC"> I use as burp suite burp</font>

1377
00:46:31,470 --> 00:46:35,250
suite is probably the de facto web

1378
00:46:33,240 --> 00:46:36,750
application<font color="#E5E5E5"> pen tester tool it's still</font>

1379
00:46:35,250 --> 00:46:38,040
the best on<font color="#E5E5E5"> the market for</font><font color="#CCCCCC"> a variety of</font>

1380
00:46:36,750 --> 00:46:40,770
reasons and so that's kind of like the

1381
00:46:38,040 --> 00:46:42,570
<font color="#E5E5E5">primary tool beyond that from a scanner</font>

1382
00:46:40,770 --> 00:46:45,000
perspective like I said I only use to

1383
00:46:42,570 --> 00:46:47,570
skip fish because it<font color="#CCCCCC"> break</font><font color="#E5E5E5"> stuff and</font>

1384
00:46:45,000 --> 00:46:49,530
it's pretty<font color="#E5E5E5"> awesome beyond that it's</font>

1385
00:46:47,570 --> 00:46:51,210
independent to you the<font color="#E5E5E5"> process that I'm</font>

1386
00:46:49,530 --> 00:46:53,190
working on so if<font color="#E5E5E5"> I identify that it's a</font>

1387
00:46:51,210 --> 00:46:56,340
Drupal type app I pretty much spend the

1388
00:46:53,190 --> 00:46:57,750
rest of my tools on focus tools or focus

1389
00:46:56,340 --> 00:46:59,610
scanners that automate the same sort of

1390
00:46:57,750 --> 00:47:01,200
testing I would have done anyways and

1391
00:46:59,610 --> 00:47:03,630
that's it<font color="#E5E5E5"> that's pretty much all I use I</font>

1392
00:47:01,200 --> 00:47:05,609
don't don't use like you know commercial

1393
00:47:03,630 --> 00:47:06,660
scanners I don't use very popular

1394
00:47:05,610 --> 00:47:08,730
frameworks like that they're just

1395
00:47:06,660 --> 00:47:11,009
<font color="#E5E5E5">they're too noisy</font><font color="#CCCCCC"> and kind of like I was</font>

1396
00:47:08,730 --> 00:47:12,960
telling my coworker yesterday you know

1397
00:47:11,010 --> 00:47:14,550
you can't<font color="#CCCCCC"> really feel what's going on</font>

1398
00:47:12,960 --> 00:47:15,900
<font color="#E5E5E5">because it's throwing exceptions all the</font>

1399
00:47:14,550 --> 00:47:17,910
time you don't<font color="#E5E5E5"> know what that actually</font>

1400
00:47:15,900 --> 00:47:19,860
means like nick toons are great too i'm

1401
00:47:17,910 --> 00:47:21,390
not going to knock it but when you run

1402
00:47:19,860 --> 00:47:22,860
into a result<font color="#CCCCCC"> that says hey I found this</font>

1403
00:47:21,390 --> 00:47:25,230
thing<font color="#E5E5E5"> but it doesn't tell you how it</font>

1404
00:47:22,860 --> 00:47:27,180
found that thing you're<font color="#CCCCCC"> not really in a</font>

1405
00:47:25,230 --> 00:47:28,470
solution<font color="#E5E5E5"> where you can then better go</font>

1406
00:47:27,180 --> 00:47:30,089
back and figure out what it is unless

1407
00:47:28,470 --> 00:47:33,359
you then go back reverse into your<font color="#E5E5E5"> Nick</font>

1408
00:47:30,090 --> 00:47:34,740
to look at how he was<font color="#CCCCCC"> doing the test you</font>

1409
00:47:33,360 --> 00:47:37,170
know it's<font color="#E5E5E5"> like why would I do that why</font>

1410
00:47:34,740 --> 00:47:40,109
don't I just<font color="#E5E5E5"> test for it so I don't use</font>

1411
00:47:37,170 --> 00:47:42,120
a lot<font color="#E5E5E5"> to us just this is my tool between</font>

1412
00:47:40,110 --> 00:47:44,570
my ears use it fairly often I think you

1413
00:47:42,120 --> 00:47:44,569
had a question

1414
00:47:59,830 --> 00:48:04,220
sure I kind<font color="#CCCCCC"> of like what is saying</font>

1415
00:48:02,210 --> 00:48:05,870
<font color="#E5E5E5">before is every test that I do is always</font>

1416
00:48:04,220 --> 00:48:07,430
<font color="#E5E5E5">driven towards the task of giving me</font>

1417
00:48:05,870 --> 00:48:09,200
<font color="#E5E5E5">more information quicker right I'm</font>

1418
00:48:07,430 --> 00:48:11,870
<font color="#E5E5E5">trying to remove the veil of disability</font>

1419
00:48:09,200 --> 00:48:13,879
if I have<font color="#E5E5E5"> access to the source code and</font>

1420
00:48:11,870 --> 00:48:14,900
test then I don't<font color="#E5E5E5"> need to do a lot of</font>

1421
00:48:13,880 --> 00:48:16,430
this testing I'm just going to look at

1422
00:48:14,900 --> 00:48:18,470
the source code because like sequel

1423
00:48:16,430 --> 00:48:19,940
injection is an easy easy easy thing to

1424
00:48:18,470 --> 00:48:21,919
find inside a source code it's very

1425
00:48:19,940 --> 00:48:23,330
<font color="#E5E5E5">difficult to find on the web remotely</font>

1426
00:48:21,920 --> 00:48:24,860
because it involves a lot of parameter

1427
00:48:23,330 --> 00:48:26,810
testing<font color="#E5E5E5"> it's kind of annoying it takes</font>

1428
00:48:24,860 --> 00:48:28,400
time but if I have access<font color="#CCCCCC"> to the source</font>

1429
00:48:26,810 --> 00:48:29,840
code i could just grep for data access

1430
00:48:28,400 --> 00:48:31,220
look at the data access patterns i can

1431
00:48:29,840 --> 00:48:32,870
tell you definitively one way or the

1432
00:48:31,220 --> 00:48:35,060
other fairly<font color="#E5E5E5"> quickly how to do it right</font>

1433
00:48:32,870 --> 00:48:36,890
so a visibility concern so all of my

1434
00:48:35,060 --> 00:48:38,690
testing is geared iteratively towards

1435
00:48:36,890 --> 00:48:40,129
creating greater visibility application

1436
00:48:38,690 --> 00:48:41,720
like i said if i could download the

1437
00:48:40,130 --> 00:48:42,920
source code<font color="#E5E5E5"> i'm going to do that if I</font>

1438
00:48:41,720 --> 00:48:44,390
could<font color="#E5E5E5"> steal the source code i'm going to</font>

1439
00:48:42,920 --> 00:48:45,650
do that<font color="#E5E5E5"> if</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> could take over the server</font>

1440
00:48:44,390 --> 00:48:47,120
that i'm going<font color="#E5E5E5"> to do that because then i</font>

1441
00:48:45,650 --> 00:48:48,500
could steal source code if<font color="#E5E5E5"> i could take</font>

1442
00:48:47,120 --> 00:48:49,940
over the database then to take over the

1443
00:48:48,500 --> 00:48:51,890
server then steal your source code i'm

1444
00:48:49,940 --> 00:48:53,660
going to do that that's my process of

1445
00:48:51,890 --> 00:48:54,830
priority with testing because that gives

1446
00:48:53,660 --> 00:48:57,920
me the greatest amount<font color="#E5E5E5"> of visibility</font>

1447
00:48:54,830 --> 00:48:59,840
faster and then I can have<font color="#E5E5E5"> my ideal</font>

1448
00:48:57,920 --> 00:49:01,580
that's what I want not your ideal does

1449
00:48:59,840 --> 00:49:05,300
that make sense so iteratively that's

1450
00:49:01,580 --> 00:49:06,710
how I worked out my tests it saves me a

1451
00:49:05,300 --> 00:49:08,630
lot of time<font color="#E5E5E5"> I've been in apps before</font>

1452
00:49:06,710 --> 00:49:10,100
we're in less than a few hours have

1453
00:49:08,630 --> 00:49:11,990
taken over the whole thing downloaded

1454
00:49:10,100 --> 00:49:14,089
the source code found several critical

1455
00:49:11,990 --> 00:49:15,799
vulnerabilities in a bunt I've<font color="#E5E5E5"> had other</font>

1456
00:49:14,090 --> 00:49:17,330
tests where I've done things exactly

1457
00:49:15,800 --> 00:49:18,590
like this<font color="#CCCCCC"> I found evidence that somebody</font>

1458
00:49:17,330 --> 00:49:20,690
<font color="#E5E5E5">else might have been there before I did</font>

1459
00:49:18,590 --> 00:49:22,580
right so this approach is fairly

1460
00:49:20,690 --> 00:49:24,350
successful it's very easy because it

1461
00:49:22,580 --> 00:49:26,210
<font color="#E5E5E5">doesn't separate out tasks like</font>

1462
00:49:24,350 --> 00:49:28,040
<font color="#E5E5E5">information gathering and then testing</font>

1463
00:49:26,210 --> 00:49:30,080
and then review and then analysis right

1464
00:49:28,040 --> 00:49:31,400
like it's I do those together as I'm

1465
00:49:30,080 --> 00:49:33,830
working with<font color="#E5E5E5"> the application but in</font>

1466
00:49:31,400 --> 00:49:38,309
smaller pieces kind of each one driving

1467
00:49:33,830 --> 00:49:40,529
the next any other questions

1468
00:49:38,309 --> 00:49:43,380
this make sense is this easy to follow

1469
00:49:40,529 --> 00:49:44,789
cool so I<font color="#E5E5E5"> guess that's because that's it</font>

1470
00:49:43,380 --> 00:49:46,319
i'm going<font color="#E5E5E5"> to be hanging out over at the</font>

1471
00:49:44,789 --> 00:49:47,609
hacker for charities booth probably rest

1472
00:49:46,319 --> 00:49:49,109
of time so if you have any other

1473
00:49:47,609 --> 00:49:51,890
questions for me<font color="#CCCCCC"> I'll be hanging out</font>

1474
00:49:49,109 --> 00:49:51,890
<font color="#E5E5E5">over there chillin so</font>

