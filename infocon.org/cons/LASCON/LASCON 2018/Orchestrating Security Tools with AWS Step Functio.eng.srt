1
00:00:17,320 --> 00:00:22,519
thank you<font color="#E5E5E5"> thank you very much</font><font color="#CCCCCC"> well I've</font>

2
00:00:21,140 --> 00:00:26,840
never<font color="#E5E5E5"> had an</font><font color="#CCCCCC"> intro before</font><font color="#E5E5E5"> like that so</font>

3
00:00:22,519 --> 00:00:28,369
uh<font color="#E5E5E5"> here we're talking about exactly</font><font color="#CCCCCC"> that</font>

4
00:00:26,840 --> 00:00:30,380
any of us step functions and how you can

5
00:00:28,369 --> 00:00:33,500
make your security<font color="#E5E5E5"> tools work with it</font>

6
00:00:30,380 --> 00:00:36,019
I'm just a massive<font color="#E5E5E5"> I'm motion we are</font>

7
00:00:33,500 --> 00:00:39,409
security engineers that data dog<font color="#E5E5E5"> our day</font>

8
00:00:36,019 --> 00:00:43,339
<font color="#E5E5E5">to day goal is to make all securities</font>

9
00:00:39,409 --> 00:00:46,070
<font color="#CCCCCC">all of product in product teams life</font>

10
00:00:43,339 --> 00:00:48,460
easier<font color="#CCCCCC"> and we do that by securing all</font>

11
00:00:46,070 --> 00:00:52,220
<font color="#E5E5E5">the things in this specific project</font>

12
00:00:48,460 --> 00:00:55,009
<font color="#CCCCCC">we're talking about is developers owning</font>

13
00:00:52,220 --> 00:00:58,759
the security their application<font color="#E5E5E5"> so our</font>

14
00:00:55,009 --> 00:01:01,610
developers<font color="#E5E5E5"> in our company we</font><font color="#CCCCCC"> practice</font>

15
00:00:58,759 --> 00:01:04,339
<font color="#E5E5E5">continuous deployment which we also</font>

16
00:01:01,610 --> 00:01:07,729
means that<font color="#E5E5E5"> are developing our</font>

17
00:01:04,339 --> 00:01:09,259
development teams also<font color="#CCCCCC"> own</font><font color="#E5E5E5"> the uptime</font><font color="#CCCCCC"> of</font>

18
00:01:07,729 --> 00:01:11,179
their application to<font color="#CCCCCC"> make sure that if</font>

19
00:01:09,259 --> 00:01:13,579
they deploy something<font color="#CCCCCC"> that that they are</font>

20
00:01:11,180 --> 00:01:15,470
meeting their<font color="#CCCCCC"> SLS</font><font color="#E5E5E5"> we also want the</font>

21
00:01:13,579 --> 00:01:17,389
development teams<font color="#CCCCCC"> to own the security of</font>

22
00:01:15,470 --> 00:01:20,929
<font color="#CCCCCC">their application and</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to do</font>

23
00:01:17,390 --> 00:01:22,429
that we must<font color="#E5E5E5"> have heard think over never</font>

24
00:01:20,929 --> 00:01:24,649
ever move further to the left<font color="#E5E5E5"> right</font>

25
00:01:22,429 --> 00:01:29,569
finding the bugs early<font color="#E5E5E5"> and fixing those</font>

26
00:01:24,649 --> 00:01:31,579
bugs early so obviously to<font color="#CCCCCC"> make it so</font>

27
00:01:29,569 --> 00:01:33,950
<font color="#E5E5E5">there's a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> security tools up there</font>

28
00:01:31,579 --> 00:01:36,199
<font color="#E5E5E5">that will help you find this the issues</font>

29
00:01:33,950 --> 00:01:39,560
that<font color="#E5E5E5"> you have then you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> surf</font><font color="#CCCCCC"> race to</font>

30
00:01:36,200 --> 00:01:41,689
the developers<font color="#E5E5E5"> and as we just say</font><font color="#CCCCCC"> CI CD</font>

31
00:01:39,560 --> 00:01:44,359
is<font color="#E5E5E5"> very commonly</font><font color="#CCCCCC"> used for developers to</font>

32
00:01:41,689 --> 00:01:46,818
test and ship<font color="#CCCCCC"> that software but somehow</font>

33
00:01:44,359 --> 00:01:48,469
it<font color="#E5E5E5"> feels like security tooling and</font><font color="#CCCCCC"> CCD</font>

34
00:01:46,819 --> 00:01:52,459
I've had some kind of a love-hate

35
00:01:48,469 --> 00:01:56,359
relationship<font color="#E5E5E5"> so far so what we mean from</font>

36
00:01:52,459 --> 00:01:58,719
<font color="#E5E5E5">that</font><font color="#CCCCCC"> first off is the many security</font>

37
00:01:56,359 --> 00:02:02,679
tools don't<font color="#E5E5E5"> integrate well with</font><font color="#CCCCCC"> CA C D</font>

38
00:01:58,719 --> 00:02:06,859
<font color="#E5E5E5">very long running jobs a few minutes few</font>

39
00:02:02,679 --> 00:02:08,330
<font color="#CCCCCC">half-hour a few hours even it</font><font color="#E5E5E5"> doesn't</font>

40
00:02:06,859 --> 00:02:10,399
work well with the CI<font color="#E5E5E5"> CD you don't want</font>

41
00:02:08,330 --> 00:02:12,950
<font color="#CCCCCC">your</font><font color="#E5E5E5"> test to take more than a small</font>

42
00:02:10,399 --> 00:02:14,840
<font color="#CCCCCC">amount of minutes and</font><font color="#E5E5E5"> you also have a</font>

43
00:02:12,950 --> 00:02:17,119
lot of<font color="#E5E5E5"> false positives</font><font color="#CCCCCC"> and in the inner</font>

44
00:02:14,840 --> 00:02:20,170
CI environments<font color="#E5E5E5"> you don't want to test</font>

45
00:02:17,120 --> 00:02:22,270
to fail<font color="#E5E5E5"> for false positive on</font>

46
00:02:20,170 --> 00:02:25,269
valuable reasons so it<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> really</font>

47
00:02:22,270 --> 00:02:28,239
work well<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the third problem is also</font>

48
00:02:25,270 --> 00:02:29,890
that<font color="#CCCCCC"> each tool has its</font><font color="#E5E5E5"> own way</font><font color="#CCCCCC"> of giving</font>

49
00:02:28,239 --> 00:02:32,170
<font color="#CCCCCC">you a report so it</font><font color="#E5E5E5"> makes it very hard to</font>

50
00:02:29,890 --> 00:02:34,750
<font color="#E5E5E5">understand and make it very hard</font><font color="#CCCCCC"> for the</font>

51
00:02:32,170 --> 00:02:37,390
<font color="#E5E5E5">the CIA to actually I probably fail or</font>

52
00:02:34,750 --> 00:02:39,459
not<font color="#E5E5E5"> depending on the report so a small</font>

53
00:02:37,390 --> 00:02:42,488
example<font color="#CCCCCC"> that we're gonna look through</font>

54
00:02:39,459 --> 00:02:44,770
<font color="#CCCCCC">during this presentation of search tool</font>

55
00:02:42,489 --> 00:02:46,660
is check marks check marks is a static

56
00:02:44,770 --> 00:02:51,250
analysis tool<font color="#CCCCCC"> that gives you insight</font>

57
00:02:46,660 --> 00:02:53,140
into<font color="#E5E5E5"> your code but it feels to</font><font color="#CCCCCC"> us that</font>

58
00:02:51,250 --> 00:02:55,030
it doesn't<font color="#E5E5E5"> integrate well with the CI CD</font>

59
00:02:53,140 --> 00:02:57,250
environment<font color="#CCCCCC"> artists</font><font color="#E5E5E5"> for us and so we'll</font>

60
00:02:55,030 --> 00:03:00,430
go<font color="#CCCCCC"> through and through</font><font color="#E5E5E5"> this tour to</font>

61
00:02:57,250 --> 00:03:03,910
explain how we made it<font color="#E5E5E5"> better kind of so</font>

62
00:03:00,430 --> 00:03:06,160
sometimes sometimes the tool integrates

63
00:03:03,910 --> 00:03:07,810
with CI CD<font color="#CCCCCC"> but they</font><font color="#E5E5E5"> just don't integrate</font>

64
00:03:06,160 --> 00:03:09,959
<font color="#E5E5E5">well with developer workflow which is</font>

65
00:03:07,810 --> 00:03:12,700
the second very important part of for us

66
00:03:09,959 --> 00:03:15,720
<font color="#CCCCCC">what we mean by that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that the tools</font>

67
00:03:12,700 --> 00:03:18,548
will block the deployment pipeline so

68
00:03:15,720 --> 00:03:20,799
when<font color="#CCCCCC"> whatever a tool finds a very beachy</font>

69
00:03:18,549 --> 00:03:23,319
<font color="#E5E5E5">you might not want to block the pipeline</font>

70
00:03:20,799 --> 00:03:25,630
<font color="#CCCCCC">Finnerty x' have priorities they have</font>

71
00:03:23,319 --> 00:03:27,578
importance<font color="#E5E5E5"> and not everything is</font>

72
00:03:25,630 --> 00:03:28,750
critical we all know that so<font color="#E5E5E5"> if it's</font>

73
00:03:27,579 --> 00:03:30,459
critical<font color="#CCCCCC"> you might want to block that</font>

74
00:03:28,750 --> 00:03:31,900
<font color="#E5E5E5">whenever it's low you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a voluntary</font>

75
00:03:30,459 --> 00:03:33,609
<font color="#E5E5E5">key management program and you</font><font color="#CCCCCC"> might</font>

76
00:03:31,900 --> 00:03:36,250
want to fix<font color="#E5E5E5"> that in the upcoming week</font>

77
00:03:33,609 --> 00:03:38,410
upcoming month<font color="#E5E5E5"> so obviously it doesn't</font>

78
00:03:36,250 --> 00:03:40,750
<font color="#E5E5E5">work well</font><font color="#CCCCCC"> for the developers and</font><font color="#E5E5E5"> also</font>

79
00:03:38,410 --> 00:03:43,420
many<font color="#E5E5E5"> of them are</font><font color="#CCCCCC"> sending their reports</font>

80
00:03:40,750 --> 00:03:45,760
on a third party<font color="#E5E5E5"> website and there's a</font>

81
00:03:43,420 --> 00:03:47,290
lot<font color="#CCCCCC"> of tools already</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> the</font>

82
00:03:45,760 --> 00:03:49,030
developers<font color="#E5E5E5"> don't really want to click on</font>

83
00:03:47,290 --> 00:03:51,160
another website for each security<font color="#E5E5E5"> tool</font>

84
00:03:49,030 --> 00:03:52,690
so it makes it<font color="#E5E5E5"> very hard</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

85
00:03:51,160 --> 00:03:55,450
developer because<font color="#E5E5E5"> doesn't integrate well</font>

86
00:03:52,690 --> 00:03:58,180
within that<font color="#E5E5E5"> workflow so an</font><font color="#CCCCCC"> example of</font>

87
00:03:55,450 --> 00:04:02,048
such a tool is a snake<font color="#E5E5E5"> that we use at</font><font color="#CCCCCC"> a</font>

88
00:03:58,180 --> 00:04:04,840
<font color="#CCCCCC">dog a sneak is great it gives you</font>

89
00:04:02,049 --> 00:04:07,319
insight over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Vanaras of your</font>

90
00:04:04,840 --> 00:04:10,420
dependencies<font color="#CCCCCC"> that you use on your code</font>

91
00:04:07,319 --> 00:04:13,000
but the way it integrates<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> CI</font><font color="#CCCCCC"> cg</font>

92
00:04:10,420 --> 00:04:16,450
is<font color="#CCCCCC"> that will block</font><font color="#E5E5E5"> the pipeline if if</font>

93
00:04:13,000 --> 00:04:20,200
there's a<font color="#CCCCCC"> brevity</font><font color="#E5E5E5"> otherwise if you only</font>

94
00:04:16,450 --> 00:04:21,579
say block on certain priorities it will

95
00:04:20,200 --> 00:04:23,979
show<font color="#E5E5E5"> that everything is fine</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> your</font>

96
00:04:21,579 --> 00:04:27,100
developers might not even know<font color="#CCCCCC"> that</font>

97
00:04:23,979 --> 00:04:29,919
there's<font color="#E5E5E5"> low or medium issues that are so</font>

98
00:04:27,100 --> 00:04:31,540
facing<font color="#E5E5E5"> and also the report</font><font color="#CCCCCC"> are on the</font>

99
00:04:29,919 --> 00:04:36,849
<font color="#CCCCCC">third-party website so we want</font>

100
00:04:31,540 --> 00:04:39,010
make it a bit better so<font color="#CCCCCC"> I was working on</font>

101
00:04:36,850 --> 00:04:40,210
the<font color="#E5E5E5"> check mark solution</font><font color="#CCCCCC"> and trying to</font>

102
00:04:39,010 --> 00:04:41,980
<font color="#E5E5E5">find a way to make it</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

103
00:04:40,210 --> 00:04:43,570
developer we're<font color="#CCCCCC"> closed and the jewels</font>

104
00:04:41,980 --> 00:04:45,910
<font color="#E5E5E5">came to me is like hey I'm also doing</font>

105
00:04:43,570 --> 00:04:47,320
the same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> for snick so we had</font>

106
00:04:45,910 --> 00:04:49,450
another<font color="#E5E5E5"> co-worker who was working on</font>

107
00:04:47,320 --> 00:04:52,330
container scanning and all these felt

108
00:04:49,450 --> 00:04:55,990
very similar<font color="#E5E5E5"> and we wanted</font><font color="#CCCCCC"> to make sure</font>

109
00:04:52,330 --> 00:04:57,550
<font color="#E5E5E5">that we weren't recreating the process</font>

110
00:04:55,990 --> 00:04:58,870
for each and every one<font color="#E5E5E5"> so we wanted</font>

111
00:04:57,550 --> 00:05:02,200
everything to be<font color="#CCCCCC"> like a plug-in based</font>

112
00:04:58,870 --> 00:05:05,200
workflow<font color="#CCCCCC"> similar to</font><font color="#E5E5E5"> CI CD but something</font>

113
00:05:02,200 --> 00:05:08,890
<font color="#CCCCCC">that allows longer scanning runs</font><font color="#E5E5E5"> lit</font>

114
00:05:05,200 --> 00:05:11,490
longer scanning jobs to run so the first

115
00:05:08,890 --> 00:05:15,310
thing in the workflow<font color="#E5E5E5"> was your triggers</font>

116
00:05:11,490 --> 00:05:18,520
<font color="#CCCCCC">this is where everything</font><font color="#E5E5E5"> starts</font><font color="#CCCCCC"> at so it</font>

117
00:05:15,310 --> 00:05:21,400
could<font color="#E5E5E5"> be a slack web hook so maybe in a</font>

118
00:05:18,520 --> 00:05:23,950
slack app you say hey slack scan this

119
00:05:21,400 --> 00:05:27,219
repository<font color="#CCCCCC"> alright that maybe maybe they</font>

120
00:05:23,950 --> 00:05:29,349
make work well or<font color="#CCCCCC"> you may</font><font color="#E5E5E5"> have something</font>

121
00:05:27,220 --> 00:05:31,630
<font color="#E5E5E5">like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> github webhook</font>

122
00:05:29,350 --> 00:05:34,810
that could be on a pull request<font color="#CCCCCC"> whenever</font>

123
00:05:31,630 --> 00:05:36,670
the whenever the developer makes a pull

124
00:05:34,810 --> 00:05:38,110
request for a<font color="#E5E5E5"> new feature you can</font><font color="#CCCCCC"> go and</font>

125
00:05:36,670 --> 00:05:40,810
scan<font color="#E5E5E5"> that future branch versus the</font>

126
00:05:38,110 --> 00:05:43,060
master branch<font color="#E5E5E5"> or you may want</font><font color="#CCCCCC"> to do</font>

127
00:05:40,810 --> 00:05:46,180
<font color="#E5E5E5">something like once that once that PR</font>

128
00:05:43,060 --> 00:05:47,850
<font color="#E5E5E5">has merged into master production you</font>

129
00:05:46,180 --> 00:05:50,860
<font color="#E5E5E5">are then going to do this again</font>

130
00:05:47,850 --> 00:05:54,250
the next step is the processing<font color="#E5E5E5"> part now</font>

131
00:05:50,860 --> 00:05:55,540
<font color="#E5E5E5">the processing is the core of what</font><font color="#CCCCCC"> we</font>

132
00:05:54,250 --> 00:05:58,120
think<font color="#CCCCCC"> about when we're doing scanning</font>

133
00:05:55,540 --> 00:06:00,880
this is we talked about<font color="#CCCCCC"> check marks and</font>

134
00:05:58,120 --> 00:06:04,030
<font color="#E5E5E5">snick</font><font color="#CCCCCC"> that is where</font><font color="#E5E5E5"> this scanner is</font>

135
00:06:00,880 --> 00:06:06,880
going to run<font color="#E5E5E5"> out and all of</font><font color="#CCCCCC"> these like I</font>

136
00:06:04,030 --> 00:06:08,020
said<font color="#E5E5E5"> we want to emphasize</font><font color="#CCCCCC"> that these are</font>

137
00:06:06,880 --> 00:06:10,630
all modular you these are<font color="#E5E5E5"> plug-and-play</font>

138
00:06:08,020 --> 00:06:12,849
<font color="#CCCCCC">you can drop your scanner in right here</font>

139
00:06:10,630 --> 00:06:16,240
<font color="#E5E5E5">so the processing is</font><font color="#CCCCCC"> going to take the</font>

140
00:06:12,850 --> 00:06:18,520
input<font color="#CCCCCC"> from that web hook and then is</font>

141
00:06:16,240 --> 00:06:19,690
then<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do the processing on it</font>

142
00:06:18,520 --> 00:06:22,359
and then it's going<font color="#E5E5E5"> to prepare the</font>

143
00:06:19,690 --> 00:06:24,190
output which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> result of the</font>

144
00:06:22,360 --> 00:06:27,460
scanning engine<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to send</font>

145
00:06:24,190 --> 00:06:30,100
it to<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> of it of this workflow</font>

146
00:06:27,460 --> 00:06:32,530
the output could be<font color="#E5E5E5"> a comment on a pull</font>

147
00:06:30,100 --> 00:06:34,360
request<font color="#E5E5E5"> from this bot or it could be a</font>

148
00:06:32,530 --> 00:06:36,159
slack message to a developer saying hey

149
00:06:34,360 --> 00:06:38,080
you just added two critical

150
00:06:36,160 --> 00:06:40,540
vulnerabilities<font color="#E5E5E5"> or it could slack your</font>

151
00:06:38,080 --> 00:06:44,349
<font color="#E5E5E5">security team it could do anything and</font>

152
00:06:40,540 --> 00:06:45,580
you can develop<font color="#E5E5E5"> these anyway that was</font>

153
00:06:44,350 --> 00:06:49,400
our goal

154
00:06:45,580 --> 00:06:52,729
so our solution this was this<font color="#E5E5E5"> was a</font>

155
00:06:49,400 --> 00:06:56,090
first take edit<font color="#E5E5E5"> we wanted a poor quest</font>

156
00:06:52,729 --> 00:06:58,699
to come in<font color="#E5E5E5"> and we wanted to subscribe to</font>

157
00:06:56,090 --> 00:07:00,530
the web hooks for<font color="#E5E5E5"> pull requests and we</font>

158
00:06:58,699 --> 00:07:04,039
wanted<font color="#E5E5E5"> to pass them to the Amazon API</font>

159
00:07:00,530 --> 00:07:06,679
gateways that would then fire a lambda

160
00:07:04,039 --> 00:07:09,050
function<font color="#E5E5E5"> that lambda function was going</font>

161
00:07:06,680 --> 00:07:12,289
to do a couple things<font color="#CCCCCC"> it was going to</font>

162
00:07:09,050 --> 00:07:14,569
call to make an API call<font color="#CCCCCC"> to the security</font>

163
00:07:12,289 --> 00:07:16,310
<font color="#E5E5E5">scanning tool that we were using</font><font color="#CCCCCC"> this is</font>

164
00:07:14,569 --> 00:07:17,419
once again<font color="#E5E5E5"> the plugin this is just like</font>

165
00:07:16,310 --> 00:07:19,550
the<font color="#CCCCCC"> drag-and-drop this</font><font color="#E5E5E5"> is like the</font>

166
00:07:17,419 --> 00:07:20,719
processing<font color="#E5E5E5"> part of it</font><font color="#CCCCCC"> the input</font><font color="#E5E5E5"> would</font>

167
00:07:19,550 --> 00:07:22,639
have been the would<font color="#E5E5E5"> have been the poor</font>

168
00:07:20,719 --> 00:07:26,300
<font color="#CCCCCC">requests this</font><font color="#E5E5E5"> is the processing part</font>

169
00:07:22,639 --> 00:07:30,770
<font color="#E5E5E5">once the once the scan is complete the</font>

170
00:07:26,300 --> 00:07:32,659
lambda function then calls<font color="#E5E5E5"> the calls the</font>

171
00:07:30,770 --> 00:07:39,169
output which it here is going<font color="#E5E5E5"> to be a PR</font>

172
00:07:32,659 --> 00:07:41,509
on a<font color="#E5E5E5"> comment issues with this the time</font>

173
00:07:39,169 --> 00:07:44,479
<font color="#E5E5E5">man these scans</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> we were on</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> check</font>

174
00:07:41,509 --> 00:07:47,509
<font color="#CCCCCC">marks</font><font color="#E5E5E5"> we're taking a lot</font><font color="#CCCCCC"> of time just to</font>

175
00:07:44,479 --> 00:07:50,810
<font color="#E5E5E5">show you how long five hours for a scan</font>

176
00:07:47,509 --> 00:07:54,289
at first five hours<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was not going</font>

177
00:07:50,810 --> 00:07:56,599
to<font color="#E5E5E5"> be acceptable for us in</font><font color="#CCCCCC"> NSC ICD</font>

178
00:07:54,289 --> 00:08:00,169
workflow<font color="#E5E5E5"> and even in this the lambdas</font>

179
00:07:56,599 --> 00:08:02,270
<font color="#E5E5E5">timeout after</font><font color="#CCCCCC"> their uh three hundred</font>

180
00:08:00,169 --> 00:08:03,889
<font color="#CCCCCC">seconds</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> just up to fifteen</font>

181
00:08:02,270 --> 00:08:05,900
minutes now someone was gonna call me<font color="#CCCCCC"> on</font>

182
00:08:03,889 --> 00:08:07,250
<font color="#E5E5E5">that I know</font><font color="#CCCCCC"> fortunately one of</font><font color="#E5E5E5"> our guys</font>

183
00:08:05,900 --> 00:08:08,568
for<font color="#E5E5E5"> our company was like you might wanna</font>

184
00:08:07,250 --> 00:08:11,569
update<font color="#E5E5E5"> that</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> fifteen minutes because</font>

185
00:08:08,569 --> 00:08:13,879
they<font color="#E5E5E5"> Amazon just changed it recently but</font>

186
00:08:11,569 --> 00:08:15,409
the issues<font color="#CCCCCC"> that those the longer it runs</font>

187
00:08:13,879 --> 00:08:16,520
<font color="#CCCCCC">you're actually it's not doing anything</font>

188
00:08:15,409 --> 00:08:18,379
it's<font color="#CCCCCC"> just waiting on</font><font color="#E5E5E5"> that scanning</font>

189
00:08:16,520 --> 00:08:20,960
engine<font color="#E5E5E5"> to finish</font><font color="#CCCCCC"> right it's just</font><font color="#E5E5E5"> just</font>

190
00:08:18,379 --> 00:08:23,930
<font color="#E5E5E5">kind of sitting</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> because we'll go</font>

191
00:08:20,960 --> 00:08:26,270
<font color="#E5E5E5">in more detail</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit why but if</font>

192
00:08:23,930 --> 00:08:30,620
it's not<font color="#E5E5E5"> do anything let's wait and then</font>

193
00:08:26,270 --> 00:08:34,549
<font color="#E5E5E5">spawn it again</font><font color="#CCCCCC"> so this issue</font><font color="#E5E5E5"> what the</font>

194
00:08:30,620 --> 00:08:36,709
next<font color="#CCCCCC"> issue was that</font><font color="#E5E5E5"> we wanted we wanted</font>

195
00:08:34,549 --> 00:08:38,659
<font color="#E5E5E5">to have that</font><font color="#CCCCCC"> scanning engine like</font>

196
00:08:36,708 --> 00:08:40,069
notifies say hey I'm<font color="#E5E5E5"> done so we could</font>

197
00:08:38,659 --> 00:08:41,539
fire that<font color="#E5E5E5"> next line the function rather</font>

198
00:08:40,070 --> 00:08:43,899
<font color="#E5E5E5">than having it run for that</font><font color="#CCCCCC"> three</font>

199
00:08:41,539 --> 00:08:46,750
<font color="#CCCCCC">hundred</font><font color="#E5E5E5"> seconds or 15 minutes so</font>

200
00:08:43,899 --> 00:08:50,930
<font color="#E5E5E5">unfortunately had no way</font><font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> so</font>

201
00:08:46,750 --> 00:08:52,980
<font color="#CCCCCC">that was our second</font><font color="#E5E5E5"> problem so</font><font color="#CCCCCC"> to first</font>

202
00:08:50,930 --> 00:08:55,199
<font color="#CCCCCC">implement</font><font color="#E5E5E5"> our solution</font>

203
00:08:52,980 --> 00:08:57,390
so that we as we say even<font color="#E5E5E5"> though we had</font>

204
00:08:55,200 --> 00:09:00,000
issues<font color="#E5E5E5"> with Linda's we decided to keep</font>

205
00:08:57,390 --> 00:09:02,850
Linda's for several reasons<font color="#CCCCCC"> the first</font>

206
00:09:00,000 --> 00:09:03,240
<font color="#E5E5E5">one it easily scales to a reasonable</font>

207
00:09:02,850 --> 00:09:04,670
<font color="#E5E5E5">amount</font>

208
00:09:03,240 --> 00:09:07,740
when I say<font color="#CCCCCC"> a</font><font color="#E5E5E5"> reasonable amount is that</font>

209
00:09:04,670 --> 00:09:11,400
<font color="#E5E5E5">we're being triggered on</font><font color="#CCCCCC"> Gita</font><font color="#E5E5E5"> pull</font>

210
00:09:07,740 --> 00:09:11,700
<font color="#CCCCCC">requests or commits</font><font color="#E5E5E5"> if it's 10 PR an</font>

211
00:09:11,400 --> 00:09:13,709
hour

212
00:09:11,700 --> 00:09:16,170
that's fine can grow to a hundred or

213
00:09:13,710 --> 00:09:17,850
thousand that steelworks<font color="#E5E5E5"> we're not</font>

214
00:09:16,170 --> 00:09:19,500
talking<font color="#CCCCCC"> about growing</font><font color="#E5E5E5"> to a million so</font>

215
00:09:17,850 --> 00:09:21,960
we're staying within a reasonable amount

216
00:09:19,500 --> 00:09:24,540
<font color="#E5E5E5">and for that every Aslam does</font><font color="#CCCCCC"> works very</font>

217
00:09:21,960 --> 00:09:27,060
<font color="#E5E5E5">well it's also very low maintenance</font><font color="#CCCCCC"> very</font>

218
00:09:24,540 --> 00:09:29,490
easy<font color="#E5E5E5"> and as we say before with this</font>

219
00:09:27,060 --> 00:09:31,560
plug-in architecture that we had it

220
00:09:29,490 --> 00:09:34,110
makes it very easy<font color="#E5E5E5"> to have the trigger</font>

221
00:09:31,560 --> 00:09:36,359
<font color="#E5E5E5">being a Python lambda and the processor</font>

222
00:09:34,110 --> 00:09:38,390
being<font color="#E5E5E5"> a girl lambda</font><font color="#CCCCCC"> and so it makes</font><font color="#E5E5E5"> it</font>

223
00:09:36,360 --> 00:09:41,370
<font color="#CCCCCC">very generic and</font><font color="#E5E5E5"> very a plug-and-play</font>

224
00:09:38,390 --> 00:09:44,069
<font color="#E5E5E5">more easily so we decided to go</font><font color="#CCCCCC"> with</font>

225
00:09:41,370 --> 00:09:45,900
this<font color="#E5E5E5"> who is Linda's and since we had</font>

226
00:09:44,070 --> 00:09:48,240
those<font color="#CCCCCC"> timing</font><font color="#E5E5E5"> issues and all those tasks</font>

227
00:09:45,900 --> 00:09:51,120
we decided to create a workflow based

228
00:09:48,240 --> 00:09:52,950
<font color="#CCCCCC">off lambdas have</font><font color="#E5E5E5"> a lambda</font><font color="#CCCCCC"> do the trigger</font>

229
00:09:51,120 --> 00:09:55,830
and<font color="#CCCCCC"> then trigger another lambda that</font>

230
00:09:52,950 --> 00:09:57,240
<font color="#E5E5E5">will do the processing and so on so we</font>

231
00:09:55,830 --> 00:10:00,180
started by drawing<font color="#E5E5E5"> our IDs on the</font>

232
00:09:57,240 --> 00:10:02,400
<font color="#E5E5E5">whiteboard</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's quite</font><font color="#CCCCCC"> confusing</font><font color="#E5E5E5"> but</font>

233
00:10:00,180 --> 00:10:05,400
if you clean<font color="#E5E5E5"> it a bit you end up on this</font>

234
00:10:02,400 --> 00:10:08,459
small architecture where every lambda

235
00:10:05,400 --> 00:10:10,770
will start its execution<font color="#E5E5E5"> by retrieving</font><font color="#CCCCCC"> a</font>

236
00:10:08,460 --> 00:10:13,320
state in the the<font color="#E5E5E5"> work flow state in the</font>

237
00:10:10,770 --> 00:10:15,360
<font color="#CCCCCC">dynamodb do</font><font color="#E5E5E5"> its processing whatever it</font>

238
00:10:13,320 --> 00:10:17,490
needs to<font color="#E5E5E5"> do include the code and then</font>

239
00:10:15,360 --> 00:10:19,800
once it's done<font color="#CCCCCC"> save</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> work flow state</font>

240
00:10:17,490 --> 00:10:21,600
<font color="#CCCCCC">to dynamodb and trigger the next lender</font>

241
00:10:19,800 --> 00:10:23,640
and the next lambda will start by

242
00:10:21,600 --> 00:10:25,620
retrieving the work flow state and<font color="#CCCCCC"> no</font>

243
00:10:23,640 --> 00:10:28,740
<font color="#E5E5E5">know what it needs</font><font color="#CCCCCC"> to do and and</font>

244
00:10:25,620 --> 00:10:31,080
continue so is<font color="#E5E5E5"> that it's it's fairly</font>

245
00:10:28,740 --> 00:10:33,930
<font color="#E5E5E5">easy for us to create several</font><font color="#CCCCCC"> Linda's</font>

246
00:10:31,080 --> 00:10:36,300
working together<font color="#CCCCCC"> bypassing kind of those</font>

247
00:10:33,930 --> 00:10:40,680
timeout limitations and eventually every

248
00:10:36,300 --> 00:10:41,280
try<font color="#E5E5E5"> so I can say I'm 50% done here's</font>

249
00:10:40,680 --> 00:10:43,140
what I did

250
00:10:41,280 --> 00:10:46,020
<font color="#CCCCCC">here's what I</font><font color="#E5E5E5"> need to do let's trigger</font>

251
00:10:43,140 --> 00:10:48,439
myself<font color="#E5E5E5"> again with the actual state and</font>

252
00:10:46,020 --> 00:10:51,000
it makes<font color="#CCCCCC"> just a long leaving your lender</font>

253
00:10:48,440 --> 00:10:53,280
so in the<font color="#E5E5E5"> end once we've done that we</font>

254
00:10:51,000 --> 00:10:55,440
<font color="#CCCCCC">realize that we just recreated</font><font color="#E5E5E5"> area step</font>

255
00:10:53,280 --> 00:10:56,760
function<font color="#E5E5E5"> and not as</font><font color="#CCCCCC"> good as the</font>

256
00:10:55,440 --> 00:10:58,920
functions we were lacking a<font color="#E5E5E5"> lot of</font>

257
00:10:56,760 --> 00:11:00,000
<font color="#E5E5E5">features and when we discovered step</font>

258
00:10:58,920 --> 00:11:01,860
function we

259
00:11:00,000 --> 00:11:05,070
jumped on<font color="#CCCCCC"> it right away</font><font color="#E5E5E5"> and thought it</font>

260
00:11:01,860 --> 00:11:06,660
was what we<font color="#E5E5E5"> needed so how</font><font color="#CCCCCC"> does EDS step</font>

261
00:11:05,070 --> 00:11:08,610
<font color="#E5E5E5">function works</font><font color="#CCCCCC"> a dressed-up function</font>

262
00:11:06,660 --> 00:11:11,389
defines a state<font color="#CCCCCC"> machine which is a</font>

263
00:11:08,610 --> 00:11:14,639
workflow<font color="#E5E5E5"> using the Amazon</font><font color="#CCCCCC"> state language</font>

264
00:11:11,389 --> 00:11:16,680
<font color="#CCCCCC">so this is a</font><font color="#E5E5E5"> JSON based language that</font>

265
00:11:14,639 --> 00:11:20,570
you will use<font color="#CCCCCC"> to define what</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font>

266
00:11:16,680 --> 00:11:23,969
steps<font color="#E5E5E5"> how it works</font><font color="#CCCCCC"> and and how it</font><font color="#E5E5E5"> all</font>

267
00:11:20,570 --> 00:11:26,880
should<font color="#CCCCCC"> be displayed together so each</font>

268
00:11:23,970 --> 00:11:29,279
step of this workflow<font color="#E5E5E5"> is</font><font color="#CCCCCC"> in individual</font>

269
00:11:26,880 --> 00:11:31,320
<font color="#E5E5E5">states</font><font color="#CCCCCC"> and you also have access to you</font>

270
00:11:29,279 --> 00:11:32,760
the step function console which kind of

271
00:11:31,320 --> 00:11:34,889
<font color="#E5E5E5">works like a state machine GUI</font>

272
00:11:32,760 --> 00:11:37,589
so you will see what<font color="#CCCCCC"> your workflow looks</font>

273
00:11:34,889 --> 00:11:39,449
<font color="#E5E5E5">like and on each execution which steps</font>

274
00:11:37,589 --> 00:11:43,170
were taken<font color="#E5E5E5"> what is</font><font color="#CCCCCC"> the input and output</font>

275
00:11:39,449 --> 00:11:44,279
<font color="#E5E5E5">of each step and if it failed</font><font color="#CCCCCC"> so what</font>

276
00:11:43,170 --> 00:11:46,589
are the different<font color="#E5E5E5"> states that are</font>

277
00:11:44,279 --> 00:11:48,630
possible the first<font color="#E5E5E5"> one is a task task is</font>

278
00:11:46,589 --> 00:11:51,029
is a piece of<font color="#E5E5E5"> code to</font><font color="#CCCCCC"> you run that's</font><font color="#E5E5E5"> the</font>

279
00:11:48,630 --> 00:11:53,100
core and the logic of<font color="#E5E5E5"> not the logic the</font>

280
00:11:51,029 --> 00:11:55,320
core of the processing of<font color="#CCCCCC"> your step</font>

281
00:11:53,100 --> 00:11:58,019
function you can have choice<font color="#E5E5E5"> which</font>

282
00:11:55,320 --> 00:12:00,329
basically will<font color="#E5E5E5"> run step a or B or C</font>

283
00:11:58,019 --> 00:12:02,850
depending on<font color="#E5E5E5"> on one of the value of the</font>

284
00:12:00,329 --> 00:12:06,180
variables of<font color="#E5E5E5"> your step function your</font>

285
00:12:02,850 --> 00:12:08,880
execution<font color="#E5E5E5"> path</font><font color="#CCCCCC"> does exactly</font><font color="#E5E5E5"> like pass in</font>

286
00:12:06,180 --> 00:12:12,359
<font color="#CCCCCC">the programming</font><font color="#E5E5E5"> code nothing but still</font>

287
00:12:08,880 --> 00:12:15,899
allows you to handle<font color="#CCCCCC"> and do tricky stuff</font>

288
00:12:12,360 --> 00:12:17,459
to the state of<font color="#E5E5E5"> the workflow delay</font>

289
00:12:15,899 --> 00:12:18,690
allows you to<font color="#E5E5E5"> introduce the gene a and</font>

290
00:12:17,459 --> 00:12:21,239
that's<font color="#E5E5E5"> pretty cool because you're not</font>

291
00:12:18,690 --> 00:12:23,399
<font color="#E5E5E5">paying for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> delay so you want to do</font>

292
00:12:21,240 --> 00:12:26,220
step<font color="#E5E5E5"> a and then do step B half an hour</font>

293
00:12:23,399 --> 00:12:28,399
later<font color="#CCCCCC"> just put a delay of</font><font color="#E5E5E5"> 30 minutes and</font>

294
00:12:26,220 --> 00:12:31,589
then it will<font color="#CCCCCC"> just wait and trigger again</font>

295
00:12:28,399 --> 00:12:33,120
parallel<font color="#E5E5E5"> allows you to stop branches and</font>

296
00:12:31,589 --> 00:12:35,699
<font color="#E5E5E5">do things in</font><font color="#CCCCCC"> parallel</font><font color="#E5E5E5"> so it's very nice</font>

297
00:12:33,120 --> 00:12:38,220
<font color="#CCCCCC">for our scans because</font><font color="#E5E5E5"> we if</font><font color="#CCCCCC"> you have ten</font>

298
00:12:35,699 --> 00:12:40,439
cans we can do the<font color="#CCCCCC"> ten scans</font><font color="#E5E5E5"> at the same</font>

299
00:12:38,220 --> 00:12:42,630
time and we<font color="#E5E5E5"> don't need to wait for</font>

300
00:12:40,440 --> 00:12:45,660
<font color="#E5E5E5">checkmarks to finish the scan to run</font>

301
00:12:42,630 --> 00:12:47,699
sneak and then success or failure it

302
00:12:45,660 --> 00:12:50,149
just stops the workflow completely and

303
00:12:47,699 --> 00:12:54,180
gives the state to<font color="#E5E5E5"> address that function</font>

304
00:12:50,149 --> 00:12:56,279
so<font color="#E5E5E5"> now that I said here's how it looks</font>

305
00:12:54,180 --> 00:12:58,410
like very simple<font color="#CCCCCC"> area</font><font color="#E5E5E5"> step</font><font color="#CCCCCC"> function on</font>

306
00:12:56,279 --> 00:13:00,360
the console start in the end of the

307
00:12:58,410 --> 00:13:02,459
state machine<font color="#CCCCCC"> each step in the middle</font><font color="#E5E5E5"> is</font>

308
00:13:00,360 --> 00:13:04,709
an individual<font color="#E5E5E5"> state and so here for</font>

309
00:13:02,459 --> 00:13:06,899
example we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> gear up trigger</font><font color="#E5E5E5"> gets</font>

310
00:13:04,709 --> 00:13:09,719
the data from the step function from the

311
00:13:06,899 --> 00:13:10,740
execution<font color="#E5E5E5"> will parse</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> its output</font><font color="#CCCCCC"> to</font>

312
00:13:09,720 --> 00:13:14,670
the stack cinder<font color="#CCCCCC"> that</font>

313
00:13:10,740 --> 00:13:16,160
<font color="#E5E5E5">then start a stacking station and in our</font>

314
00:13:14,670 --> 00:13:19,319
case<font color="#E5E5E5"> what we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk about today</font>

315
00:13:16,160 --> 00:13:20,939
<font color="#CCCCCC">looks like that</font><font color="#E5E5E5"> so we're gonna we're</font>

316
00:13:19,320 --> 00:13:26,940
<font color="#CCCCCC">gonna dive a</font><font color="#E5E5E5"> bit more into the</font><font color="#CCCCCC"> details</font>

317
00:13:20,940 --> 00:13:31,020
<font color="#E5E5E5">but first let's do a small demo so first</font>

318
00:13:26,940 --> 00:13:32,399
before we<font color="#E5E5E5"> start deposit the the lower</font>

319
00:13:31,020 --> 00:13:34,529
part we're looking at right<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> the</font>

320
00:13:32,399 --> 00:13:37,770
<font color="#CCCCCC">developer's terminal and book and above</font>

321
00:13:34,529 --> 00:13:39,959
is the<font color="#E5E5E5"> is the actual the execution that</font>

322
00:13:37,770 --> 00:13:42,810
statement that specific state machine

323
00:13:39,959 --> 00:13:45,810
<font color="#E5E5E5">that that is fired</font><font color="#CCCCCC"> so we have we've</font>

324
00:13:42,810 --> 00:13:47,790
subscribed to<font color="#CCCCCC"> a pull request</font><font color="#E5E5E5"> so pull</font>

325
00:13:45,810 --> 00:13:49,469
request is already made now developers

326
00:13:47,790 --> 00:13:51,209
then going<font color="#CCCCCC"> to add a commit to that poor</font>

327
00:13:49,470 --> 00:13:52,830
request<font color="#E5E5E5"> and he's gonna push it so that's</font>

328
00:13:51,209 --> 00:13:55,560
what we're<font color="#CCCCCC"> looking at down here</font><font color="#E5E5E5"> is right</font>

329
00:13:52,830 --> 00:13:58,380
now git push origin head so<font color="#E5E5E5"> Joe let's go</font>

330
00:13:55,560 --> 00:14:00,599
<font color="#CCCCCC">ahead and play so the developer</font><font color="#E5E5E5"> pushes</font>

331
00:13:58,380 --> 00:14:02,160
<font color="#CCCCCC">these new commits and the top part is</font>

332
00:14:00,600 --> 00:14:04,380
really<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> going on in the background</font>

333
00:14:02,160 --> 00:14:07,350
<font color="#CCCCCC">you don't need to look at it when you're</font>

334
00:14:04,380 --> 00:14:09,270
on<font color="#E5E5E5"> a day-to-day basis but that's how it</font>

335
00:14:07,350 --> 00:14:11,720
works<font color="#E5E5E5"> we check the execution of the step</font>

336
00:14:09,270 --> 00:14:15,089
function<font color="#E5E5E5"> we can see already which steps</font>

337
00:14:11,720 --> 00:14:17,700
<font color="#E5E5E5">succeeded and were triggered</font><font color="#CCCCCC"> and so it</font>

338
00:14:15,089 --> 00:14:19,350
<font color="#E5E5E5">gets refreshed pretty often so here</font><font color="#CCCCCC"> for</font>

339
00:14:17,700 --> 00:14:23,100
<font color="#CCCCCC">example</font><font color="#E5E5E5"> we can see in blue</font><font color="#CCCCCC"> that sneak is</font>

340
00:14:19,350 --> 00:14:25,140
running so the scan<font color="#CCCCCC"> is being run</font><font color="#E5E5E5"> and it</font>

341
00:14:23,100 --> 00:14:26,520
allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to really easily understand</font>

342
00:14:25,140 --> 00:14:29,459
what's going on where<font color="#E5E5E5"> are the failure</font>

343
00:14:26,520 --> 00:14:32,300
what he did<font color="#CCCCCC"> is stop</font><font color="#E5E5E5"> now sneak is done</font>

344
00:14:29,459 --> 00:14:35,849
the<font color="#E5E5E5"> PR commenter is being is being run</font>

345
00:14:32,300 --> 00:14:38,189
and so here we already had the trigger

346
00:14:35,850 --> 00:14:40,410
all<font color="#CCCCCC"> the parsing already did the scan and</font>

347
00:14:38,190 --> 00:14:43,290
now we've sent the message and here is

348
00:14:40,410 --> 00:14:45,750
on the get up PR the output of<font color="#E5E5E5"> our scan</font>

349
00:14:43,290 --> 00:14:48,199
and snake here we can see the<font color="#CCCCCC"> verities</font>

350
00:14:45,750 --> 00:14:50,070
<font color="#E5E5E5">that were found on our testing project</font>

351
00:14:48,200 --> 00:14:53,490
<font color="#E5E5E5">cryptography or</font><font color="#CCCCCC"> forest bulb that needs</font>

352
00:14:50,070 --> 00:14:56,579
to be<font color="#E5E5E5"> upgraded</font><font color="#CCCCCC"> to version 2.3 so this is</font>

353
00:14:53,490 --> 00:15:01,200
how it works<font color="#E5E5E5"> now let's dive a</font><font color="#CCCCCC"> bit more</font>

354
00:14:56,579 --> 00:15:06,000
into how it works<font color="#E5E5E5"> so the first thing</font>

355
00:15:01,200 --> 00:15:08,130
first we have the get up of riser<font color="#CCCCCC"> first</font>

356
00:15:06,000 --> 00:15:10,890
step of a function which will allow us

357
00:15:08,130 --> 00:15:13,980
<font color="#CCCCCC">to</font><font color="#E5E5E5"> know whether</font><font color="#CCCCCC"> or not the request comes</font>

358
00:15:10,890 --> 00:15:16,350
from<font color="#E5E5E5"> comes from github</font><font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> done</font>

359
00:15:13,980 --> 00:15:19,410
through a signature<font color="#CCCCCC"> ashmac signature and</font>

360
00:15:16,350 --> 00:15:21,660
if you are used to<font color="#CCCCCC"> api gateway you might</font>

361
00:15:19,410 --> 00:15:23,579
<font color="#E5E5E5">wonder</font><font color="#CCCCCC"> why we didn't use</font><font color="#E5E5E5"> the</font>

362
00:15:21,660 --> 00:15:27,870
the authorizer<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a PA</font><font color="#E5E5E5"> gateway has these</font>

363
00:15:23,580 --> 00:15:29,460
<font color="#E5E5E5">in embedded authorizer and we couldn't</font>

364
00:15:27,870 --> 00:15:32,640
<font color="#E5E5E5">use that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that was the first problem</font>

365
00:15:29,460 --> 00:15:35,610
<font color="#E5E5E5">we we have integrating github and a</font><font color="#CCCCCC"> DBS</font>

366
00:15:32,640 --> 00:15:38,189
<font color="#E5E5E5">seems kind of incompatible by default if</font>

367
00:15:35,610 --> 00:15:41,250
<font color="#E5E5E5">you look at the github documentation</font>

368
00:15:38,190 --> 00:15:43,380
<font color="#E5E5E5">they use as I say H max sign events so</font>

369
00:15:41,250 --> 00:15:45,570
they will take the payload<font color="#CCCCCC"> of the even</font>

370
00:15:43,380 --> 00:15:46,980
they send you<font color="#E5E5E5"> you give them a secret</font>

371
00:15:45,570 --> 00:15:48,840
<font color="#E5E5E5">when you set up</font><font color="#CCCCCC"> the web hook</font><font color="#E5E5E5"> and they</font>

372
00:15:46,980 --> 00:15:51,390
will use<font color="#CCCCCC"> that secret to generate the H</font>

373
00:15:48,840 --> 00:15:53,520
max signature of your<font color="#E5E5E5"> payload and send</font>

374
00:15:51,390 --> 00:15:55,530
that<font color="#E5E5E5"> in the header</font><font color="#CCCCCC"> so you need</font><font color="#E5E5E5"> both the</font>

375
00:15:53,520 --> 00:15:58,170
header and the request to actually

376
00:15:55,530 --> 00:16:00,900
<font color="#CCCCCC">validate the payload if you look at the</font>

377
00:15:58,170 --> 00:16:03,780
ABS<font color="#E5E5E5"> API gateway authorizer documentation</font>

378
00:16:00,900 --> 00:16:05,970
you<font color="#E5E5E5"> have to kind of Linda</font><font color="#CCCCCC"> authorize the</font>

379
00:16:03,780 --> 00:16:08,069
first kind is<font color="#E5E5E5"> a token that will only get</font>

380
00:16:05,970 --> 00:16:09,570
what's passed in the header doesn't work

381
00:16:08,070 --> 00:16:11,820
<font color="#E5E5E5">for</font><font color="#CCCCCC"> sign events here because we need the</font>

382
00:16:09,570 --> 00:16:15,660
payload<font color="#E5E5E5"> but it was pretty well for API</font>

383
00:16:11,820 --> 00:16:18,030
keys<font color="#CCCCCC"> JWT tokens</font><font color="#E5E5E5"> so here it just</font><font color="#CCCCCC"> doesn't</font>

384
00:16:15,660 --> 00:16:20,219
work<font color="#E5E5E5"> and the second type is</font><font color="#CCCCCC"> requests it</font>

385
00:16:18,030 --> 00:16:22,560
sounds<font color="#CCCCCC"> great</font><font color="#E5E5E5"> but what it</font><font color="#CCCCCC"> actually gives</font>

386
00:16:20,220 --> 00:16:25,770
<font color="#E5E5E5">you is request parameters context</font>

387
00:16:22,560 --> 00:16:27,540
parameters query string<font color="#E5E5E5"> headers but it</font>

388
00:16:25,770 --> 00:16:28,920
doesn't actually give you the body of

389
00:16:27,540 --> 00:16:32,300
the payload the body of the request

390
00:16:28,920 --> 00:16:35,579
so the authorizer just doesn't work<font color="#E5E5E5"> with</font>

391
00:16:32,300 --> 00:16:38,339
who is a get up sign events<font color="#E5E5E5"> so our</font>

392
00:16:35,580 --> 00:16:40,380
solution was<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> this custom</font>

393
00:16:38,340 --> 00:16:43,560
authorizer<font color="#E5E5E5"> as the first step of a step</font>

394
00:16:40,380 --> 00:16:45,930
function<font color="#E5E5E5"> and then based on the answer</font>

395
00:16:43,560 --> 00:16:47,790
and the output of<font color="#E5E5E5"> this authorizer</font>

396
00:16:45,930 --> 00:16:49,709
<font color="#E5E5E5">we have a choice between yes I should</font>

397
00:16:47,790 --> 00:16:54,120
proceed I should continue<font color="#E5E5E5"> or no I should</font>

398
00:16:49,710 --> 00:16:57,000
stop so here's a<font color="#E5E5E5"> small code snippet of</font>

399
00:16:54,120 --> 00:16:59,430
how it works<font color="#CCCCCC"> it's pretty simple</font><font color="#E5E5E5"> pretty</font>

400
00:16:57,000 --> 00:17:01,560
straightforward<font color="#CCCCCC"> you</font><font color="#E5E5E5"> generate the H back</font>

401
00:16:59,430 --> 00:17:03,329
<font color="#CCCCCC">of your payload</font><font color="#E5E5E5"> get the actual signature</font>

402
00:17:01,560 --> 00:17:06,210
from the<font color="#E5E5E5"> header and compare both and</font>

403
00:17:03,330 --> 00:17:07,260
then return true or false<font color="#CCCCCC"> don't forget</font>

404
00:17:06,210 --> 00:17:09,650
to send<font color="#E5E5E5"> metrics if you want to know</font>

405
00:17:07,260 --> 00:17:14,040
whenever<font color="#E5E5E5"> it fails and for in and why</font>

406
00:17:09,650 --> 00:17:16,230
<font color="#CCCCCC">okay is it's</font><font color="#E5E5E5"> fairly simple so now that</font>

407
00:17:14,040 --> 00:17:18,569
the payload is verified<font color="#E5E5E5"> next step next</font>

408
00:17:16,230 --> 00:17:20,819
step<font color="#E5E5E5"> is the actual beginning of the</font>

409
00:17:18,569 --> 00:17:23,010
<font color="#E5E5E5">workflow so it's the trigger we have the</font>

410
00:17:20,819 --> 00:17:25,230
get up trigger which from the event will

411
00:17:23,010 --> 00:17:27,119
fetch every information<font color="#E5E5E5"> we want name of</font>

412
00:17:25,230 --> 00:17:28,800
the branch name<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> repository name</font>

413
00:17:27,119 --> 00:17:31,290
<font color="#E5E5E5">of the user number of the pull request</font>

414
00:17:28,800 --> 00:17:32,520
<font color="#CCCCCC">every single information that our scan</font>

415
00:17:31,290 --> 00:17:36,510
will need to

416
00:17:32,520 --> 00:17:39,780
<font color="#E5E5E5">to rep so once we've</font><font color="#CCCCCC"> done we've got all</font>

417
00:17:36,510 --> 00:17:42,500
<font color="#E5E5E5">those data we have the the sanitizer</font><font color="#CCCCCC"> so</font>

418
00:17:39,780 --> 00:17:45,930
the same sizer is a small step that

419
00:17:42,500 --> 00:17:49,440
clears<font color="#E5E5E5"> up it's the actual data</font><font color="#CCCCCC"> that you</font>

420
00:17:45,930 --> 00:17:51,270
had in in the input so the the memory of

421
00:17:49,440 --> 00:17:52,890
the state function the the size of the

422
00:17:51,270 --> 00:17:55,830
<font color="#E5E5E5">states of</font><font color="#CCCCCC"> the step function is limited</font>

423
00:17:52,890 --> 00:17:58,830
<font color="#E5E5E5">so if</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to have memory free</font>

424
00:17:55,830 --> 00:18:01,649
memory for your scans<font color="#E5E5E5"> you want to free</font>

425
00:17:58,830 --> 00:18:06,000
memory before<font color="#E5E5E5"> and clean it a bit so it</font>

426
00:18:01,650 --> 00:18:08,520
removes any unnecessary variables<font color="#CCCCCC"> from</font>

427
00:18:06,000 --> 00:18:10,740
your step function<font color="#CCCCCC"> States to let the</font>

428
00:18:08,520 --> 00:18:14,610
memory<font color="#E5E5E5"> free for further scans so it's</font>

429
00:18:10,740 --> 00:18:17,370
actually a pass<font color="#E5E5E5"> pass task</font><font color="#CCCCCC"> but uh it</font>

430
00:18:14,610 --> 00:18:19,439
could be<font color="#CCCCCC"> could as well be a limiter next</font>

431
00:18:17,370 --> 00:18:21,889
next step is the scan filter<font color="#E5E5E5"> this is</font>

432
00:18:19,440 --> 00:18:24,090
first logic in<font color="#E5E5E5"> our step function</font>

433
00:18:21,890 --> 00:18:26,610
<font color="#CCCCCC">depending</font><font color="#E5E5E5"> on the information</font><font color="#CCCCCC"> of the</font>

434
00:18:24,090 --> 00:18:29,429
trigger it will decide whether or<font color="#E5E5E5"> not</font>

435
00:18:26,610 --> 00:18:31,709
each scan needs to be run<font color="#E5E5E5"> so for example</font>

436
00:18:29,430 --> 00:18:33,480
if I'm<font color="#E5E5E5"> not modifying any dependency file</font>

437
00:18:31,710 --> 00:18:36,810
there's probably no<font color="#CCCCCC"> reason to run</font><font color="#E5E5E5"> sneaky</font>

438
00:18:33,480 --> 00:18:39,240
<font color="#E5E5E5">so this is the first logic that will</font>

439
00:18:36,810 --> 00:18:42,330
decide what's going<font color="#E5E5E5"> on then later on in</font>

440
00:18:39,240 --> 00:18:45,060
the process<font color="#E5E5E5"> now we start having the</font>

441
00:18:42,330 --> 00:18:47,909
first part which is<font color="#E5E5E5"> a every scan and</font>

442
00:18:45,060 --> 00:18:49,200
then the branches<font color="#E5E5E5"> the scan filter just</font>

443
00:18:47,910 --> 00:18:51,600
takes the<font color="#CCCCCC"> output</font><font color="#E5E5E5"> from the step before</font>

444
00:18:49,200 --> 00:18:53,400
<font color="#E5E5E5">and decide if it should stop now because</font>

445
00:18:51,600 --> 00:18:56,070
<font color="#E5E5E5">we don't need to scan or actually you're</font>

446
00:18:53,400 --> 00:18:59,910
in<font color="#CCCCCC"> the scan</font><font color="#E5E5E5"> snake here is the real</font>

447
00:18:56,070 --> 00:19:02,250
processing unit<font color="#E5E5E5"> in the workflow it</font>

448
00:18:59,910 --> 00:19:05,340
actually<font color="#E5E5E5"> realizes the scan does the scan</font>

449
00:19:02,250 --> 00:19:07,890
<font color="#E5E5E5">for us on the code and we'll give it</font><font color="#CCCCCC"> a</font>

450
00:19:05,340 --> 00:19:09,659
its output to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PR commenter which is</font>

451
00:19:07,890 --> 00:19:12,780
the actual output<font color="#E5E5E5"> of the step function</font>

452
00:19:09,660 --> 00:19:15,120
that will send a message on the<font color="#CCCCCC"> PR on</font>

453
00:19:12,780 --> 00:19:17,790
the<font color="#CCCCCC"> pull request of the developer we</font>

454
00:19:15,120 --> 00:19:20,639
also have a error handler which is a

455
00:19:17,790 --> 00:19:23,399
<font color="#E5E5E5">catch-all and</font><font color="#CCCCCC"> and cache</font><font color="#E5E5E5"> hole is is very</font>

456
00:19:20,640 --> 00:19:25,560
important in step function so if one<font color="#CCCCCC"> of</font>

457
00:19:23,400 --> 00:19:28,380
your step fails<font color="#E5E5E5"> it will show us fails</font>

458
00:19:25,560 --> 00:19:30,720
<font color="#E5E5E5">but the way step</font><font color="#CCCCCC"> 14 works is that it</font>

459
00:19:28,380 --> 00:19:32,460
will stop everything<font color="#CCCCCC"> so if you have ten</font>

460
00:19:30,720 --> 00:19:35,010
branches<font color="#E5E5E5"> and ten things in parallel</font><font color="#CCCCCC"> a</font>

461
00:19:32,460 --> 00:19:37,620
single one failing<font color="#CCCCCC"> stops everything so</font>

462
00:19:35,010 --> 00:19:39,300
if you have<font color="#E5E5E5"> ten scans you want if one</font>

463
00:19:37,620 --> 00:19:41,189
fails you don't want a<font color="#E5E5E5"> nine others to</font>

464
00:19:39,300 --> 00:19:42,159
fail<font color="#CCCCCC"> so what you want</font><font color="#E5E5E5"> to do is have a</font>

465
00:19:41,190 --> 00:19:44,110
<font color="#E5E5E5">catch all that we</font>

466
00:19:42,160 --> 00:19:46,390
alert you or<font color="#E5E5E5"> a legend or metrics or</font>

467
00:19:44,110 --> 00:19:47,949
message<font color="#E5E5E5"> but you want to</font><font color="#CCCCCC"> actually catch</font>

468
00:19:46,390 --> 00:19:51,310
<font color="#CCCCCC">this issue so that it doesn't stop the</font>

469
00:19:47,950 --> 00:19:54,760
<font color="#CCCCCC">warfare and so here the scan and the</font>

470
00:19:51,310 --> 00:19:57,040
diagram is pretty easy<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how</font>

471
00:19:54,760 --> 00:19:58,770
every scan should<font color="#E5E5E5"> be but it's</font><font color="#CCCCCC"> not always</font>

472
00:19:57,040 --> 00:20:03,490
<font color="#E5E5E5">that</font><font color="#CCCCCC"> easy</font>

473
00:19:58,770 --> 00:20:05,530
so<font color="#CCCCCC"> checkmarks is a different beast it</font>

474
00:20:03,490 --> 00:20:08,320
<font color="#CCCCCC">scan times as we saw earlier</font><font color="#E5E5E5"> can take up</font>

475
00:20:05,530 --> 00:20:10,450
<font color="#CCCCCC">to</font><font color="#E5E5E5"> five hours</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to we need a way</font>

476
00:20:08,320 --> 00:20:14,020
<font color="#E5E5E5">to solve that</font><font color="#CCCCCC"> problem we also we also</font>

477
00:20:10,450 --> 00:20:16,690
<font color="#E5E5E5">need a way</font><font color="#CCCCCC"> to work with</font><font color="#E5E5E5"> it even if we</font>

478
00:20:14,020 --> 00:20:18,220
can't get it down<font color="#E5E5E5"> to a typical build job</font>

479
00:20:16,690 --> 00:20:19,420
which<font color="#CCCCCC"> can which is typically you're</font>

480
00:20:18,220 --> 00:20:20,740
seeing<font color="#CCCCCC"> around like three</font><font color="#E5E5E5"> minutes I don't</font>

481
00:20:19,420 --> 00:20:23,020
develop<font color="#CCCCCC"> er</font><font color="#E5E5E5"> doesn't want to wait much</font>

482
00:20:20,740 --> 00:20:25,600
longer than that<font color="#CCCCCC"> so the first step in</font>

483
00:20:23,020 --> 00:20:29,680
this process<font color="#CCCCCC"> is that scan filter</font><font color="#E5E5E5"> boolean</font>

484
00:20:25,600 --> 00:20:32,560
<font color="#E5E5E5">check previously in the snick filter and</font>

485
00:20:29,680 --> 00:20:36,250
thus can filter step<font color="#E5E5E5"> we did some logic</font>

486
00:20:32,560 --> 00:20:39,460
saying<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> I want to do a scan on</font>

487
00:20:36,250 --> 00:20:41,560
a<font color="#E5E5E5"> check marks job or if I want to scan</font>

488
00:20:39,460 --> 00:20:44,020
<font color="#E5E5E5">this repository</font><font color="#CCCCCC"> maybe I only want</font>

489
00:20:41,560 --> 00:20:46,060
certain files<font color="#CCCCCC"> I only want</font><font color="#E5E5E5"> to trigger</font>

490
00:20:44,020 --> 00:20:49,750
that<font color="#E5E5E5"> job if certain files are modified</font>

491
00:20:46,060 --> 00:20:53,230
or if certain languages were modified so

492
00:20:49,750 --> 00:20:55,960
you can do like if<font color="#CCCCCC"> that's diff in future</font>

493
00:20:53,230 --> 00:20:57,460
branch<font color="#E5E5E5"> and master doesn't contain any</font>

494
00:20:55,960 --> 00:20:59,620
changes to Python files

495
00:20:57,460 --> 00:21:01,210
<font color="#E5E5E5">don't start the scan no reason and</font>

496
00:20:59,620 --> 00:21:03,250
wasting<font color="#E5E5E5"> checkmarks as resources than</font>

497
00:21:01,210 --> 00:21:06,880
doing that<font color="#E5E5E5"> so that's one</font><font color="#CCCCCC"> thing you can</font>

498
00:21:03,250 --> 00:21:08,710
do<font color="#E5E5E5"> check marks if you are implementing</font>

499
00:21:06,880 --> 00:21:10,720
it<font color="#CCCCCC"> we can talk</font><font color="#E5E5E5"> later I can go into the</font>

500
00:21:08,710 --> 00:21:15,640
more details<font color="#E5E5E5"> check mark specific things</font>

501
00:21:10,720 --> 00:21:19,750
<font color="#E5E5E5">but the next step in this if the answer</font>

502
00:21:15,640 --> 00:21:21,310
is yes<font color="#E5E5E5"> you're going to you're going to</font>

503
00:21:19,750 --> 00:21:25,260
go<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> next step which to create the</font>

504
00:21:21,310 --> 00:21:27,700
scan there's some metadata related<font color="#CCCCCC"> to</font>

505
00:21:25,260 --> 00:21:29,650
the project ID that we mapped the

506
00:21:27,700 --> 00:21:33,160
repository so we say<font color="#E5E5E5"> are a check</font><font color="#CCCCCC"> mark</font>

507
00:21:29,650 --> 00:21:35,680
start this scan on this project<font color="#CCCCCC"> and then</font>

508
00:21:33,160 --> 00:21:38,530
check mark says<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I'll start that scan</font>

509
00:21:35,680 --> 00:21:40,750
<font color="#CCCCCC">I'll give you an ID back</font><font color="#E5E5E5"> now it'll sit</font>

510
00:21:38,530 --> 00:21:43,750
in the queue until<font color="#CCCCCC"> it's ready</font><font color="#E5E5E5"> to scan</font>

511
00:21:40,750 --> 00:21:46,360
and what we do next is we check the<font color="#E5E5E5"> scan</font>

512
00:21:43,750 --> 00:21:48,640
we say hey check<font color="#CCCCCC"> marks that scan ID you</font>

513
00:21:46,360 --> 00:21:52,300
just<font color="#CCCCCC"> returned to</font><font color="#E5E5E5"> us is it complete yet</font>

514
00:21:48,640 --> 00:21:54,070
<font color="#CCCCCC">the</font><font color="#E5E5E5"> answer is no we wait one minute wait</font>

515
00:21:52,300 --> 00:21:55,060
five<font color="#CCCCCC"> minutes you can configure your time</font>

516
00:21:54,070 --> 00:21:55,899
<font color="#E5E5E5">for however long you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> wait</font>

517
00:21:55,060 --> 00:21:57,580
<font color="#CCCCCC">there's that</font>

518
00:21:55,900 --> 00:21:59,740
delay we talked about earlier<font color="#E5E5E5"> we can</font>

519
00:21:57,580 --> 00:22:01,270
wait in<font color="#E5E5E5"> execute it at a certain period</font>

520
00:21:59,740 --> 00:22:05,380
<font color="#CCCCCC">of time later</font><font color="#E5E5E5"> so then it will check the</font>

521
00:22:01,270 --> 00:22:07,470
scan again<font color="#E5E5E5"> now</font><font color="#CCCCCC"> if the answer is yes</font>

522
00:22:05,380 --> 00:22:11,200
there are two things<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> happen</font>

523
00:22:07,470 --> 00:22:14,590
<font color="#CCCCCC">there is yes I'm done in the init and</font>

524
00:22:11,200 --> 00:22:17,110
the scan completed successfully<font color="#E5E5E5"> or</font><font color="#CCCCCC"> we</font>

525
00:22:14,590 --> 00:22:18,669
<font color="#CCCCCC">had the first</font><font color="#E5E5E5"> game we do is always</font>

526
00:22:17,110 --> 00:22:20,320
incremental scan<font color="#CCCCCC"> we want it to be as</font>

527
00:22:18,670 --> 00:22:21,960
fast as possible<font color="#E5E5E5"> we don't want to do</font>

528
00:22:20,320 --> 00:22:25,840
full<font color="#E5E5E5"> scan unless absolutely necessary</font>

529
00:22:21,960 --> 00:22:28,420
<font color="#E5E5E5">but checkmarks has a by default there is</font>

530
00:22:25,840 --> 00:22:31,149
<font color="#CCCCCC">a 6% code base change so if</font><font color="#E5E5E5"> for some</font>

531
00:22:28,420 --> 00:22:32,860
reason a feature changes<font color="#CCCCCC"> 6% of the</font><font color="#E5E5E5"> code</font>

532
00:22:31,150 --> 00:22:35,530
<font color="#E5E5E5">base unlikely if you're</font><font color="#CCCCCC"> working</font><font color="#E5E5E5"> on a big</font>

533
00:22:32,860 --> 00:22:38,530
<font color="#CCCCCC">application</font><font color="#E5E5E5"> check marks will say hey I</font>

534
00:22:35,530 --> 00:22:41,290
<font color="#E5E5E5">need to I</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to do a full scan so</font>

535
00:22:38,530 --> 00:22:43,780
after you<font color="#E5E5E5"> get that back we go to the</font>

536
00:22:41,290 --> 00:22:45,879
scan choice<font color="#E5E5E5"> and the scan choice if the</font>

537
00:22:43,780 --> 00:22:47,440
answer<font color="#E5E5E5"> is I need to do a full scan</font><font color="#CCCCCC"> it's</font>

538
00:22:45,880 --> 00:22:50,980
gonna fight<font color="#E5E5E5"> it's gonna</font><font color="#CCCCCC"> go back to the</font>

539
00:22:47,440 --> 00:22:53,200
create scan step with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> internal</font><font color="#E5E5E5"> to say</font>

540
00:22:50,980 --> 00:22:57,190
<font color="#E5E5E5">hey</font><font color="#CCCCCC"> check marks create a full scan this</font>

541
00:22:53,200 --> 00:22:59,830
time or if the answer is no I am I'm

542
00:22:57,190 --> 00:23:02,350
done and I want you or I have a report

543
00:22:59,830 --> 00:23:07,270
<font color="#E5E5E5">we then go fix that report and the</font>

544
00:23:02,350 --> 00:23:09,699
report is then sent and we do at this

545
00:23:07,270 --> 00:23:13,090
point<font color="#E5E5E5"> check marks will sometimes give</font>

546
00:23:09,700 --> 00:23:15,220
you vulnerable<font color="#CCCCCC"> ''tis that aren't related</font>

547
00:23:13,090 --> 00:23:17,679
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the code it was just change I'm not</font>

548
00:23:15,220 --> 00:23:19,360
<font color="#E5E5E5">exactly sure what's going on</font><font color="#CCCCCC"> there back</font>

549
00:23:17,680 --> 00:23:21,490
<font color="#E5E5E5">in I'm like dude we just</font><font color="#CCCCCC"> gave you a dip</font>

550
00:23:19,360 --> 00:23:23,260
essentially a dip and<font color="#CCCCCC"> you found</font>

551
00:23:21,490 --> 00:23:25,510
vulnerabilities<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> unrelated</font><font color="#CCCCCC"> so</font>

552
00:23:23,260 --> 00:23:28,660
what we do at this point is we say<font color="#E5E5E5"> hey</font>

553
00:23:25,510 --> 00:23:29,860
<font color="#CCCCCC">check marks or two</font><font color="#E5E5E5"> to github</font>

554
00:23:28,660 --> 00:23:31,510
get<font color="#E5E5E5"> up give me the files that were</font>

555
00:23:29,860 --> 00:23:33,250
changed in that diff<font color="#E5E5E5"> and then we'll</font>

556
00:23:31,510 --> 00:23:34,629
check<font color="#CCCCCC"> them against what check marks has</font>

557
00:23:33,250 --> 00:23:36,370
actually<font color="#E5E5E5"> found and we'll make sure</font><font color="#CCCCCC"> that</font>

558
00:23:34,630 --> 00:23:37,840
<font color="#E5E5E5">we aren't gonna tell the developer to go</font>

559
00:23:36,370 --> 00:23:40,239
to change something<font color="#E5E5E5"> that he didn't just</font>

560
00:23:37,840 --> 00:23:42,429
change does that make sense

561
00:23:40,240 --> 00:23:43,780
it's kind of<font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> getting a</font>

562
00:23:42,430 --> 00:23:47,890
<font color="#E5E5E5">lot of head nods</font><font color="#CCCCCC"> yes like a quote makes</font>

563
00:23:43,780 --> 00:23:49,629
<font color="#E5E5E5">us</font><font color="#CCCCCC"> weak so then we'll we'll use that PR</font>

564
00:23:47,890 --> 00:23:51,490
<font color="#CCCCCC">comment</font><font color="#E5E5E5"> or bot that that we showed</font>

565
00:23:49,630 --> 00:23:53,830
earlier<font color="#E5E5E5"> the demo to go in and say here</font>

566
00:23:51,490 --> 00:23:55,420
was the here's<font color="#E5E5E5"> the source line that was</font>

567
00:23:53,830 --> 00:23:57,129
affected<font color="#E5E5E5"> like this is where the input</font>

568
00:23:55,420 --> 00:23:58,180
came from<font color="#E5E5E5"> and here's the</font><font color="#CCCCCC"> output like</font>

569
00:23:57,130 --> 00:24:00,430
here's where<font color="#E5E5E5"> it's actually gonna get</font>

570
00:23:58,180 --> 00:24:03,430
executed<font color="#E5E5E5"> and the developer was like oh</font>

571
00:24:00,430 --> 00:24:05,200
crap that's bad now let<font color="#CCCCCC"> me go fix it or</font>

572
00:24:03,430 --> 00:24:07,310
it could yeah and this one's just<font color="#CCCCCC"> BR</font>

573
00:24:05,200 --> 00:24:10,160
comment but

574
00:24:07,310 --> 00:24:12,440
<font color="#CCCCCC">air handler there are some times that</font>

575
00:24:10,160 --> 00:24:14,030
<font color="#E5E5E5">your jobs run into issues which Jules</font>

576
00:24:12,440 --> 00:24:16,970
mentioned earlier this<font color="#E5E5E5"> is our catch-all</font>

577
00:24:14,030 --> 00:24:18,649
so if exceptions<font color="#E5E5E5"> Staller happened and we</font>

578
00:24:16,970 --> 00:24:19,820
<font color="#E5E5E5">aren't catching it any other way</font><font color="#CCCCCC"> we pass</font>

579
00:24:18,650 --> 00:24:23,570
it to the<font color="#E5E5E5"> air</font><font color="#CCCCCC"> handler</font>

580
00:24:19,820 --> 00:24:26,270
well if you want to filter through<font color="#CCCCCC"> all</font>

581
00:24:23,570 --> 00:24:30,200
of these different lambdas logs<font color="#E5E5E5"> in cloud</font>

582
00:24:26,270 --> 00:24:33,020
watch<font color="#E5E5E5"> have fun so we have to find a way</font>

583
00:24:30,200 --> 00:24:35,750
to sift their<font color="#CCCCCC"> logs so the first thing</font>

584
00:24:33,020 --> 00:24:37,340
you<font color="#E5E5E5"> can do is push all of</font><font color="#CCCCCC"> your logs</font>

585
00:24:35,750 --> 00:24:39,830
you'd ship all<font color="#E5E5E5"> of your logs from cloud</font>

586
00:24:37,340 --> 00:24:41,270
watch into a log management<font color="#E5E5E5"> solution</font><font color="#CCCCCC"> I</font>

587
00:24:39,830 --> 00:24:43,340
work at a company<font color="#CCCCCC"> that does log</font>

588
00:24:41,270 --> 00:24:45,710
management<font color="#CCCCCC"> solution so we use ours</font><font color="#E5E5E5"> but</font>

589
00:24:43,340 --> 00:24:47,120
you can use anything<font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> a I can't</font>

590
00:24:45,710 --> 00:24:49,100
stand vendor talk so I'm not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go</font>

591
00:24:47,120 --> 00:24:54,260
<font color="#E5E5E5">into the details</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you can use</font>

592
00:24:49,100 --> 00:24:56,330
whatever<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> and the the this</font><font color="#E5E5E5"> is</font>

593
00:24:54,260 --> 00:24:58,580
the the graphical user interface<font color="#E5E5E5"> of</font>

594
00:24:56,330 --> 00:25:02,270
inside<font color="#CCCCCC"> any risk console</font><font color="#E5E5E5"> that we saw</font>

595
00:24:58,580 --> 00:25:07,250
earlier<font color="#CCCCCC"> but right here</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> click</font><font color="#E5E5E5"> on</font>

596
00:25:02,270 --> 00:25:09,740
<font color="#E5E5E5">a specific a specific step and if that</font>

597
00:25:07,250 --> 00:25:10,370
step is a lambda function<font color="#CCCCCC"> it'll look</font>

598
00:25:09,740 --> 00:25:12,380
<font color="#E5E5E5">like this</font>

599
00:25:10,370 --> 00:25:15,439
so you<font color="#E5E5E5"> see that resource which is that</font>

600
00:25:12,380 --> 00:25:16,520
lambda<font color="#E5E5E5"> and you can see the cloud watch</font>

601
00:25:15,440 --> 00:25:19,400
<font color="#E5E5E5">logs and here's where you could actually</font>

602
00:25:16,520 --> 00:25:25,670
dive into<font color="#E5E5E5"> that specific lambdas</font><font color="#CCCCCC"> cloud</font>

603
00:25:19,400 --> 00:25:27,260
<font color="#CCCCCC">watch logs but we have the issue now</font>

604
00:25:25,670 --> 00:25:29,210
<font color="#E5E5E5">whether it's in your log management</font>

605
00:25:27,260 --> 00:25:33,350
<font color="#E5E5E5">platform or you're looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> in this</font>

606
00:25:29,210 --> 00:25:34,880
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it's cloud watch logs</font><font color="#E5E5E5"> if you if</font>

607
00:25:33,350 --> 00:25:36,590
you've ever if you've<font color="#E5E5E5"> dealt with limp if</font>

608
00:25:34,880 --> 00:25:40,100
you ever dealt with<font color="#E5E5E5"> lamb</font><font color="#CCCCCC"> as before you</font>

609
00:25:36,590 --> 00:25:41,840
know that<font color="#CCCCCC"> if</font><font color="#E5E5E5"> that lambda fires at the</font>

610
00:25:40,100 --> 00:25:45,820
<font color="#E5E5E5">same time and other lambda fires of that</font>

611
00:25:41,840 --> 00:25:48,290
same lambda ID your logs are going to be

612
00:25:45,820 --> 00:25:49,820
they're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be like right up on</font><font color="#CCCCCC"> top</font>

613
00:25:48,290 --> 00:25:51,680
<font color="#E5E5E5">of each other it's gonna be very hard to</font>

614
00:25:49,820 --> 00:25:54,530
see which one is is associated<font color="#CCCCCC"> with</font>

615
00:25:51,680 --> 00:25:57,410
<font color="#E5E5E5">which</font><font color="#CCCCCC"> their they make available what's</font>

616
00:25:54,530 --> 00:25:58,850
called a an execution ID that you<font color="#E5E5E5"> can</font>

617
00:25:57,410 --> 00:26:00,730
add<font color="#E5E5E5"> to your logs if you want but it's</font>

618
00:25:58,850 --> 00:26:06,129
<font color="#E5E5E5">very hard to like go through</font><font color="#CCCCCC"> these logs</font>

619
00:26:00,730 --> 00:26:08,990
so<font color="#E5E5E5"> the next the</font><font color="#CCCCCC"> next issue we had was</font>

620
00:26:06,130 --> 00:26:11,150
<font color="#E5E5E5">we're like</font><font color="#CCCCCC"> alright I don't</font><font color="#E5E5E5"> only want to</font>

621
00:26:08,990 --> 00:26:13,940
look<font color="#E5E5E5"> at that one lambda function I want</font>

622
00:26:11,150 --> 00:26:18,460
<font color="#CCCCCC">to look at the entire step step function</font>

623
00:26:13,940 --> 00:26:20,930
<font color="#CCCCCC">state so we were</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> alright anyway yes</font>

624
00:26:18,460 --> 00:26:23,900
we know you've provided

625
00:26:20,930 --> 00:26:26,030
this unique ID for<font color="#CCCCCC"> that state machine</font><font color="#E5E5E5"> so</font>

626
00:26:23,900 --> 00:26:28,880
<font color="#CCCCCC">let me go dump all the things you've</font>

627
00:26:26,030 --> 00:26:30,530
given me in that<font color="#CCCCCC"> lambda</font><font color="#E5E5E5"> function event</font>

628
00:26:28,880 --> 00:26:32,810
<font color="#CCCCCC">context those are your</font><font color="#E5E5E5"> two things you</font>

629
00:26:30,530 --> 00:26:38,030
that are made available<font color="#E5E5E5"> well</font>

630
00:26:32,810 --> 00:26:40,550
unfortunately it doesn't<font color="#E5E5E5"> exist this made</font>

631
00:26:38,030 --> 00:26:42,350
things<font color="#CCCCCC"> very</font><font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> we had no way to</font>

632
00:26:40,550 --> 00:26:44,149
track<font color="#CCCCCC"> that through</font><font color="#E5E5E5"> because I was going</font>

633
00:26:42,350 --> 00:26:46,370
<font color="#E5E5E5">to</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was like</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> I'll</font><font color="#CCCCCC"> just log in</font>

634
00:26:44,150 --> 00:26:49,430
<font color="#CCCCCC">and every single</font><font color="#E5E5E5"> one so we had to find a</font>

635
00:26:46,370 --> 00:26:51,919
<font color="#E5E5E5">solution our solution</font><font color="#CCCCCC"> was to</font><font color="#E5E5E5"> generate</font>

636
00:26:49,430 --> 00:26:53,360
<font color="#E5E5E5">that unique ID in the first lambda so</font>

637
00:26:51,920 --> 00:26:55,880
that github authorizer we talked about

638
00:26:53,360 --> 00:27:00,620
earlier<font color="#E5E5E5"> the very very very first thing</font>

639
00:26:55,880 --> 00:27:04,100
<font color="#CCCCCC">we did was to add that state ID and then</font>

640
00:27:00,620 --> 00:27:07,639
what we did<font color="#E5E5E5"> was</font><font color="#CCCCCC"> we wrote a custom log</font>

641
00:27:04,100 --> 00:27:08,689
formatter<font color="#E5E5E5"> and we made available to</font><font color="#CCCCCC"> that</font>

642
00:27:07,640 --> 00:27:12,260
to that formatter

643
00:27:08,690 --> 00:27:14,450
a state ID and what's also we also have

644
00:27:12,260 --> 00:27:16,340
in here<font color="#E5E5E5"> a local environment variable</font>

645
00:27:14,450 --> 00:27:19,910
called stage and that<font color="#E5E5E5"> environment</font>

646
00:27:16,340 --> 00:27:23,270
variable stage tells us whether it's our

647
00:27:19,910 --> 00:27:26,690
<font color="#E5E5E5">Prada staging that we're debugging or</font>

648
00:27:23,270 --> 00:27:29,330
whatever so<font color="#E5E5E5"> we overrode the</font><font color="#CCCCCC"> logging</font>

649
00:27:26,690 --> 00:27:31,700
filter class<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> we were able to</font>

650
00:27:29,330 --> 00:27:34,010
use those<font color="#CCCCCC"> fade IDs that we pass through</font>

651
00:27:31,700 --> 00:27:35,240
<font color="#E5E5E5">to</font><font color="#CCCCCC"> each and every lambda function and we</font>

652
00:27:34,010 --> 00:27:37,129
were<font color="#CCCCCC"> able to use that right there in the</font>

653
00:27:35,240 --> 00:27:39,860
logs<font color="#E5E5E5"> so if you go</font><font color="#CCCCCC"> to your log management</font>

654
00:27:37,130 --> 00:27:41,930
tool<font color="#E5E5E5"> and you see one state chain ID you</font>

655
00:27:39,860 --> 00:27:45,860
can<font color="#CCCCCC"> filter it</font><font color="#E5E5E5"> so that's what we do right</font>

656
00:27:41,930 --> 00:27:50,000
<font color="#CCCCCC">here now this</font><font color="#E5E5E5"> is just a an overview a</font>

657
00:27:45,860 --> 00:27:52,070
very broad<font color="#E5E5E5"> picture of a good log</font>

658
00:27:50,000 --> 00:27:56,150
management<font color="#E5E5E5"> tool and if you</font><font color="#CCCCCC"> zoom in</font>

659
00:27:52,070 --> 00:27:59,899
really<font color="#E5E5E5"> closely you'll see you'll see</font>

660
00:27:56,150 --> 00:28:02,360
-<font color="#E5E5E5"> prod - ID now the prod is the stage</font>

661
00:27:59,900 --> 00:28:04,910
<font color="#E5E5E5">that we used and the ID is the ID of the</font>

662
00:28:02,360 --> 00:28:07,070
<font color="#E5E5E5">actual execution</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> top</font>

663
00:28:04,910 --> 00:28:09,620
you'll see<font color="#E5E5E5"> the PR commoner and the PR</font>

664
00:28:07,070 --> 00:28:10,760
commoner is was<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> that last step</font>

665
00:28:09,620 --> 00:28:12,350
<font color="#E5E5E5">that's going</font><font color="#CCCCCC"> to make the</font><font color="#E5E5E5"> comment and</font>

666
00:28:10,760 --> 00:28:13,910
below that<font color="#CCCCCC"> you'll see check mark</font><font color="#E5E5E5"> so</font>

667
00:28:12,350 --> 00:28:15,379
you're<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> see that all</font><font color="#CCCCCC"> these logs</font>

668
00:28:13,910 --> 00:28:17,180
for the entire state machine are

669
00:28:15,380 --> 00:28:18,950
visualized right here<font color="#E5E5E5"> so if you do run</font>

670
00:28:17,180 --> 00:28:20,660
<font color="#CCCCCC">into an exception or you do want to see</font>

671
00:28:18,950 --> 00:28:22,610
what's<font color="#E5E5E5"> going on with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if you log in</font>

672
00:28:20,660 --> 00:28:27,110
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you log that that a ID you can</font>

673
00:28:22,610 --> 00:28:28,969
follow it all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> way through so know</font>

674
00:28:27,110 --> 00:28:31,060
<font color="#E5E5E5">that we have it wasn't easy but know</font>

675
00:28:28,970 --> 00:28:35,650
<font color="#CCCCCC">that we have a way</font><font color="#E5E5E5"> to</font>

676
00:28:31,060 --> 00:28:38,830
and<font color="#E5E5E5"> all of us cans on every</font><font color="#CCCCCC"> coat change</font>

677
00:28:35,650 --> 00:28:40,420
from<font color="#CCCCCC"> our</font><font color="#E5E5E5"> developers</font><font color="#CCCCCC"> we have the last</font>

678
00:28:38,830 --> 00:28:42,879
part<font color="#E5E5E5"> which is maybe the</font><font color="#CCCCCC"> most important</font>

679
00:28:40,420 --> 00:28:45,010
<font color="#E5E5E5">how do I give those issues to the</font>

680
00:28:42,880 --> 00:28:47,440
developers how do<font color="#CCCCCC"> I first surface those</font>

681
00:28:45,010 --> 00:28:50,140
issues and<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> it's not</font>

682
00:28:47,440 --> 00:28:52,330
easy<font color="#CCCCCC"> we need to keep in mind</font><font color="#E5E5E5"> that the</font>

683
00:28:50,140 --> 00:28:54,700
developer is<font color="#E5E5E5"> a very important part of</font>

684
00:28:52,330 --> 00:28:56,649
the project<font color="#E5E5E5"> their engagement is crucial</font>

685
00:28:54,700 --> 00:28:58,780
<font color="#CCCCCC">because</font><font color="#E5E5E5"> I would say as we said before we</font>

686
00:28:56,650 --> 00:29:00,370
<font color="#E5E5E5">want the developer to own the security</font>

687
00:28:58,780 --> 00:29:03,550
of<font color="#E5E5E5"> the application we cannot be there</font>

688
00:29:00,370 --> 00:29:06,280
every<font color="#E5E5E5"> time and if we want there</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> own</font>

689
00:29:03,550 --> 00:29:08,320
the security of the app<font color="#E5E5E5"> it means that</font>

690
00:29:06,280 --> 00:29:10,090
their engagement is very very important

691
00:29:08,320 --> 00:29:12,939
for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> we don't want to end up in this</font>

692
00:29:10,090 --> 00:29:14,649
at the soil<font color="#E5E5E5"> situation where security</font>

693
00:29:12,940 --> 00:29:16,540
team meals<font color="#E5E5E5"> that developers</font><font color="#CCCCCC"> saying hey</font>

694
00:29:14,650 --> 00:29:18,370
you should<font color="#E5E5E5"> fix the issues and they were</font>

695
00:29:16,540 --> 00:29:21,370
posting the security team you know<font color="#E5E5E5"> and</font>

696
00:29:18,370 --> 00:29:24,010
<font color="#E5E5E5">no I don't I'm not doing it</font><font color="#CCCCCC"> so we want</font>

697
00:29:21,370 --> 00:29:26,919
to avoid this adversarial situation so

698
00:29:24,010 --> 00:29:30,370
we need to give the<font color="#CCCCCC"> results in the</font><font color="#E5E5E5"> best</font>

699
00:29:26,920 --> 00:29:33,310
way possible<font color="#CCCCCC"> what it means</font><font color="#E5E5E5"> is we want</font><font color="#CCCCCC"> to</font>

700
00:29:30,370 --> 00:29:36,219
be low noise<font color="#E5E5E5"> easy read where the</font>

701
00:29:33,310 --> 00:29:39,610
developer is globally we want to be low

702
00:29:36,220 --> 00:29:41,560
friction<font color="#CCCCCC"> the more friction we had the</font>

703
00:29:39,610 --> 00:29:45,070
harder it will<font color="#CCCCCC"> be to have a good</font>

704
00:29:41,560 --> 00:29:47,800
relationship<font color="#CCCCCC"> and and now we also want</font><font color="#E5E5E5"> to</font>

705
00:29:45,070 --> 00:29:49,090
make<font color="#E5E5E5"> the issues actionable if I tell the</font>

706
00:29:47,800 --> 00:29:52,360
developer hey you have an issue here

707
00:29:49,090 --> 00:29:54,040
<font color="#CCCCCC">it's a true issue</font><font color="#E5E5E5"> and so no</font><font color="#CCCCCC"> false</font>

708
00:29:52,360 --> 00:29:56,979
<font color="#E5E5E5">pachislot a little positive low noise</font>

709
00:29:54,040 --> 00:29:59,590
<font color="#E5E5E5">it's exactly where</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> wants everything</font>

710
00:29:56,980 --> 00:30:02,170
<font color="#E5E5E5">is he understands everything but if</font>

711
00:29:59,590 --> 00:30:03,340
there's no remediation<font color="#CCCCCC"> it's useless it's</font>

712
00:30:02,170 --> 00:30:05,470
good for<font color="#E5E5E5"> your volunteer management</font>

713
00:30:03,340 --> 00:30:07,389
program<font color="#CCCCCC"> it's good to know for your</font>

714
00:30:05,470 --> 00:30:09,040
<font color="#CCCCCC">security team but if the if</font><font color="#E5E5E5"> you don't</font>

715
00:30:07,390 --> 00:30:11,380
tell the developer how to fix it

716
00:30:09,040 --> 00:30:13,060
let's use this so we need<font color="#E5E5E5"> to be a</font>

717
00:30:11,380 --> 00:30:15,850
<font color="#CCCCCC">low-friction and make issues fun</font>

718
00:30:13,060 --> 00:30:17,679
actionable in the end we want the

719
00:30:15,850 --> 00:30:20,860
developer<font color="#E5E5E5"> to be our customer and might</font>

720
00:30:17,680 --> 00:30:22,810
sound strange but as a company you<font color="#CCCCCC"> want</font>

721
00:30:20,860 --> 00:30:24,250
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make your customer happy as a</font>

722
00:30:22,810 --> 00:30:25,899
security team<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to make the</font><font color="#E5E5E5"> tip</font>

723
00:30:24,250 --> 00:30:28,150
<font color="#E5E5E5">upper happy and if he's</font><font color="#CCCCCC"> happy</font><font color="#E5E5E5"> you will</font>

724
00:30:25,900 --> 00:30:29,830
help you and you'll end up in<font color="#E5E5E5"> this good</font>

725
00:30:28,150 --> 00:30:33,100
relationship<font color="#E5E5E5"> where developers and</font>

726
00:30:29,830 --> 00:30:36,370
security team works together<font color="#CCCCCC"> now</font><font color="#E5E5E5"> that</font>

727
00:30:33,100 --> 00:30:36,800
being said<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> that easy to do and</font>

728
00:30:36,370 --> 00:30:38,689
how do

729
00:30:36,800 --> 00:30:41,149
you know how to give<font color="#CCCCCC"> that</font><font color="#E5E5E5"> feedback to</font>

730
00:30:38,690 --> 00:30:43,940
<font color="#E5E5E5">the developer well you reach out</font><font color="#CCCCCC"> to them</font>

731
00:30:41,150 --> 00:30:46,760
they are<font color="#E5E5E5"> the best source to tell you how</font>

732
00:30:43,940 --> 00:30:48,920
they<font color="#E5E5E5"> want the results</font><font color="#CCCCCC"> to be given to</font>

733
00:30:46,760 --> 00:30:50,990
them so<font color="#E5E5E5"> one of the first ideas we came</font>

734
00:30:48,920 --> 00:30:51,680
up with<font color="#E5E5E5"> might</font><font color="#CCCCCC"> sound</font><font color="#E5E5E5"> crazy is sent an</font>

735
00:30:50,990 --> 00:30:53,630
organization-wide

736
00:30:51,680 --> 00:30:56,420
email<font color="#E5E5E5"> I mean engineering Hawaii email</font>

737
00:30:53,630 --> 00:30:58,640
asking<font color="#CCCCCC"> for feedback</font><font color="#E5E5E5"> and you might say it</font>

738
00:30:56,420 --> 00:31:01,550
doesn't<font color="#E5E5E5"> work you almost have you</font><font color="#CCCCCC"> will</font>

739
00:30:58,640 --> 00:31:03,920
almost<font color="#E5E5E5"> have no answers but um even if</font>

740
00:31:01,550 --> 00:31:05,990
you get<font color="#E5E5E5"> two three four five answers it's</font>

741
00:31:03,920 --> 00:31:07,970
already a lot because<font color="#E5E5E5"> you don't need</font>

742
00:31:05,990 --> 00:31:09,920
every<font color="#E5E5E5"> single person</font><font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> you and give</font>

743
00:31:07,970 --> 00:31:11,840
<font color="#CCCCCC">you feedback</font><font color="#E5E5E5"> you only need a few of them</font>

744
00:31:09,920 --> 00:31:14,300
to be<font color="#E5E5E5"> willing to explain how they work</font>

745
00:31:11,840 --> 00:31:18,010
and and what's good for them<font color="#E5E5E5"> only</font><font color="#CCCCCC"> a few</font>

746
00:31:14,300 --> 00:31:21,860
answers<font color="#E5E5E5"> already works second ID is</font>

747
00:31:18,010 --> 00:31:23,810
application<font color="#CCCCCC"> secrecy focus group try</font>

748
00:31:21,860 --> 00:31:26,000
<font color="#CCCCCC">together with some people from your</font>

749
00:31:23,810 --> 00:31:27,500
engineering organization hopefully that

750
00:31:26,000 --> 00:31:29,780
represents a broader part of<font color="#CCCCCC"> your</font>

751
00:31:27,500 --> 00:31:32,030
organization and and discuss with<font color="#E5E5E5"> them</font>

752
00:31:29,780 --> 00:31:34,340
explain them what you're<font color="#CCCCCC"> doing why are</font>

753
00:31:32,030 --> 00:31:36,680
doing it and<font color="#CCCCCC"> try to</font><font color="#E5E5E5"> get their feedback</font>

754
00:31:34,340 --> 00:31:40,730
<font color="#E5E5E5">on how do they want to help you how do</font>

755
00:31:36,680 --> 00:31:42,470
they want to fix the issues in and try

756
00:31:40,730 --> 00:31:46,310
to<font color="#E5E5E5"> discuss with them directly on how to</font>

757
00:31:42,470 --> 00:31:47,900
to to solve<font color="#E5E5E5"> the problem and also a very</font>

758
00:31:46,310 --> 00:31:49,250
nice way is direct discussion with<font color="#E5E5E5"> the</font>

759
00:31:47,900 --> 00:31:51,410
developers you know<font color="#E5E5E5"> you don't you</font>

760
00:31:49,250 --> 00:31:53,420
shouldn't<font color="#E5E5E5"> stay within security folks all</font>

761
00:31:51,410 --> 00:31:55,820
day long<font color="#CCCCCC"> try to discuss with them around</font>

762
00:31:53,420 --> 00:31:59,630
the coffee after<font color="#CCCCCC"> lunch after a beer</font>

763
00:31:55,820 --> 00:32:00,980
after work<font color="#CCCCCC"> discuss</font><font color="#E5E5E5"> with them try to make</font>

764
00:31:59,630 --> 00:32:03,260
them understand what you're doing and

765
00:32:00,980 --> 00:32:05,630
get<font color="#E5E5E5"> that feedback and try to also</font>

766
00:32:03,260 --> 00:32:08,690
understand<font color="#E5E5E5"> and hear what their pain</font>

767
00:32:05,630 --> 00:32:11,480
points are during their daily daily day

768
00:32:08,690 --> 00:32:13,340
as a developer<font color="#CCCCCC"> one of the good thing</font>

769
00:32:11,480 --> 00:32:16,340
about during discussion<font color="#E5E5E5"> is developers is</font>

770
00:32:13,340 --> 00:32:18,350
<font color="#CCCCCC">that you can have them beta test your</font>

771
00:32:16,340 --> 00:32:20,360
app it's like<font color="#CCCCCC"> a startup that</font><font color="#E5E5E5"> has clients</font>

772
00:32:18,350 --> 00:32:22,189
<font color="#E5E5E5">which will give them feedback to make</font>

773
00:32:20,360 --> 00:32:23,899
their app better<font color="#E5E5E5"> it's exactly the same</font>

774
00:32:22,190 --> 00:32:27,200
<font color="#E5E5E5">with developers and here for example is</font>

775
00:32:23,900 --> 00:32:29,300
small code snippet where I'm just<font color="#E5E5E5"> doing</font>

776
00:32:27,200 --> 00:32:32,740
a feature flag<font color="#E5E5E5"> on on certain characters</font>

777
00:32:29,300 --> 00:32:36,139
<font color="#E5E5E5">so here if the branch is from the</font>

778
00:32:32,740 --> 00:32:38,270
certain developer<font color="#E5E5E5"> name then I will give</font>

779
00:32:36,140 --> 00:32:41,750
the the<font color="#E5E5E5"> feedback and</font><font color="#CCCCCC"> I will trigger the</font>

780
00:32:38,270 --> 00:32:44,780
this<font color="#E5E5E5"> workflow</font><font color="#CCCCCC"> if not I'm not</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> it</font>

781
00:32:41,750 --> 00:32:46,150
and so it allows you to<font color="#CCCCCC"> deploy</font><font color="#E5E5E5"> this</font>

782
00:32:44,780 --> 00:32:48,670
workflow to

783
00:32:46,150 --> 00:32:51,190
<font color="#E5E5E5">an amount of people</font><font color="#CCCCCC"> only before</font>

784
00:32:48,670 --> 00:32:52,600
<font color="#E5E5E5">deploying it broadly so giving their</font>

785
00:32:51,190 --> 00:32:55,500
<font color="#E5E5E5">feedback is very important</font>

786
00:32:52,600 --> 00:32:58,060
another thing I wanted to talk<font color="#CCCCCC"> about is</font>

787
00:32:55,500 --> 00:32:59,410
<font color="#E5E5E5">to follow their workflow</font><font color="#CCCCCC"> it's very</font>

788
00:32:58,060 --> 00:33:02,649
important<font color="#E5E5E5"> for the security team</font><font color="#CCCCCC"> to</font>

789
00:32:59,410 --> 00:33:05,560
<font color="#E5E5E5">follow the developers workflow so if if</font>

790
00:33:02,650 --> 00:33:08,410
the developers are using<font color="#CCCCCC"> gitlab and and</font>

791
00:33:05,560 --> 00:33:11,230
and<font color="#E5E5E5"> Jenkins trying to use</font><font color="#CCCCCC"> gitlab and</font>

792
00:33:08,410 --> 00:33:12,850
Jenkins<font color="#E5E5E5"> same goes for this workflow as</font>

793
00:33:11,230 --> 00:33:15,010
we said we're not integrating it to<font color="#CCCCCC"> the</font>

794
00:33:12,850 --> 00:33:17,980
<font color="#CCCCCC">CICE because we have long-running jobs</font>

795
00:33:15,010 --> 00:33:20,830
but if you your tool can integrate into

796
00:33:17,980 --> 00:33:22,660
<font color="#CCCCCC">the CI CD if it makes sense if it's not</font>

797
00:33:20,830 --> 00:33:24,820
a pain you<font color="#CCCCCC"> should because you should as</font>

798
00:33:22,660 --> 00:33:27,250
<font color="#CCCCCC">much as possible use the same tool I</font>

799
00:33:24,820 --> 00:33:28,990
<font color="#CCCCCC">certa voters try also to use the same</font>

800
00:33:27,250 --> 00:33:30,970
technologies if they use<font color="#E5E5E5"> Python and go</font>

801
00:33:28,990 --> 00:33:33,010
try<font color="#E5E5E5"> to use Python lingo because it will</font>

802
00:33:30,970 --> 00:33:35,080
help<font color="#CCCCCC"> you understand what they are facing</font>

803
00:33:33,010 --> 00:33:38,500
<font color="#E5E5E5">every day and and what are the</font><font color="#CCCCCC"> paints</font>

804
00:33:35,080 --> 00:33:40,449
they are seeing every<font color="#CCCCCC"> day the more you</font>

805
00:33:38,500 --> 00:33:41,890
follow<font color="#E5E5E5"> the workflow it will help you</font>

806
00:33:40,450 --> 00:33:46,120
understand<font color="#E5E5E5"> the constraints of the</font>

807
00:33:41,890 --> 00:33:48,550
<font color="#E5E5E5">developers and so you you will better</font>

808
00:33:46,120 --> 00:33:50,979
integrate if you don't want to use your

809
00:33:48,550 --> 00:33:54,040
tool yourself<font color="#E5E5E5"> the Democrats won't use</font><font color="#CCCCCC"> it</font>

810
00:33:50,980 --> 00:33:59,080
as well<font color="#CCCCCC"> so it's very important to try to</font>

811
00:33:54,040 --> 00:34:00,909
do the same thing as as they do what<font color="#E5E5E5"> is</font>

812
00:33:59,080 --> 00:34:02,350
our current<font color="#E5E5E5"> solution our current</font>

813
00:34:00,910 --> 00:34:04,780
solution as we say it is a<font color="#E5E5E5"> comment on</font>

814
00:34:02,350 --> 00:34:06,909
the<font color="#CCCCCC"> PR because this is where the</font><font color="#E5E5E5"> dev is</font>

815
00:34:04,780 --> 00:34:08,380
looking we don't want the dev to connect

816
00:34:06,910 --> 00:34:10,810
to<font color="#E5E5E5"> another website to get the</font>

817
00:34:08,380 --> 00:34:12,310
information<font color="#E5E5E5"> every developer is doing a</font>

818
00:34:10,810 --> 00:34:14,710
pull request before<font color="#E5E5E5"> merging to prod</font>

819
00:34:12,310 --> 00:34:17,739
that's where they<font color="#E5E5E5"> get feedback from</font>

820
00:34:14,710 --> 00:34:19,449
their peer<font color="#CCCCCC"> developer they get reviews so</font>

821
00:34:17,739 --> 00:34:21,250
that's where they<font color="#E5E5E5"> can see the issues and</font>

822
00:34:19,449 --> 00:34:24,399
here for<font color="#E5E5E5"> example we can easily see that</font>

823
00:34:21,250 --> 00:34:25,989
cryptography is updated<font color="#CCCCCC"> we have the</font>

824
00:34:24,399 --> 00:34:28,719
<font color="#E5E5E5">actual version 2.2.1</font>

825
00:34:25,989 --> 00:34:30,850
severity with<font color="#E5E5E5"> several</font><font color="#CCCCCC"> she helps them</font>

826
00:34:28,719 --> 00:34:33,189
prioritize the<font color="#CCCCCC"> work because not</font><font color="#E5E5E5"> of not</font>

827
00:34:30,850 --> 00:34:34,989
everything is critical and then the link

828
00:34:33,190 --> 00:34:36,730
<font color="#E5E5E5">is always nice because some developers</font>

829
00:34:34,989 --> 00:34:38,589
and many<font color="#E5E5E5"> of them actually want to know</font>

830
00:34:36,730 --> 00:34:40,630
more they are interested<font color="#CCCCCC"> into sin in</font>

831
00:34:38,590 --> 00:34:42,040
<font color="#E5E5E5">security so give them a link so</font><font color="#CCCCCC"> that</font>

832
00:34:40,630 --> 00:34:44,950
they can get<font color="#CCCCCC"> more</font><font color="#E5E5E5"> information about the</font>

833
00:34:42,040 --> 00:34:46,418
the actual problem and<font color="#CCCCCC"> then the</font><font color="#E5E5E5"> affected</font>

834
00:34:44,949 --> 00:34:47,649
version is very important because you

835
00:34:46,418 --> 00:34:50,230
<font color="#E5E5E5">give them right away</font>

836
00:34:47,649 --> 00:34:53,739
what they need to do here I<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

837
00:34:50,230 --> 00:34:55,399
<font color="#CCCCCC">upgrade cryptography</font><font color="#E5E5E5"> to version 2.3</font><font color="#CCCCCC"> and</font>

838
00:34:53,739 --> 00:34:58,189
<font color="#CCCCCC">what is your</font><font color="#E5E5E5"> plan for the</font><font color="#CCCCCC"> future</font>

839
00:34:55,399 --> 00:35:00,500
<font color="#CCCCCC">all the scans in</font><font color="#E5E5E5"> the single command</font><font color="#CCCCCC"> what</font>

840
00:34:58,190 --> 00:35:02,599
something we want to<font color="#E5E5E5"> do later on we</font>

841
00:35:00,500 --> 00:35:04,490
think<font color="#CCCCCC"> it's pretty important if you want</font>

842
00:35:02,599 --> 00:35:07,190
<font color="#E5E5E5">to be low noise because as you</font><font color="#CCCCCC"> saw each</font>

843
00:35:04,490 --> 00:35:08,779
scan has its own PR commenter because we

844
00:35:07,190 --> 00:35:12,200
don't want<font color="#E5E5E5"> to wait for all the scans to</font>

845
00:35:08,779 --> 00:35:13,940
run send the<font color="#CCCCCC"> the PR comment</font><font color="#E5E5E5"> so have all</font>

846
00:35:12,200 --> 00:35:17,509
of them<font color="#E5E5E5"> in a single comment is it's not</font>

847
00:35:13,940 --> 00:35:20,960
<font color="#E5E5E5">that easy but it's very very it gives a</font>

848
00:35:17,510 --> 00:35:22,760
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> added</font><font color="#CCCCCC"> value and</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> auto</font><font color="#E5E5E5"> fix PR</font>

849
00:35:20,960 --> 00:35:24,710
created only for review it might sounds

850
00:35:22,760 --> 00:35:27,319
crazy and<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of like hey fix</font>

851
00:35:24,710 --> 00:35:29,299
automatically all the<font color="#E5E5E5"> things</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea</font>

852
00:35:27,319 --> 00:35:31,000
behind that is<font color="#E5E5E5"> for example for snake and</font>

853
00:35:29,299 --> 00:35:32,930
dependencies<font color="#CCCCCC"> main abilities as I said</font>

854
00:35:31,000 --> 00:35:35,510
<font color="#E5E5E5">cryptography we know that we need to</font>

855
00:35:32,930 --> 00:35:38,660
<font color="#CCCCCC">upgrade to version 2.3 updating a</font>

856
00:35:35,510 --> 00:35:40,369
dependency is not that hard<font color="#E5E5E5"> in in</font><font color="#CCCCCC"> be</font>

857
00:35:38,660 --> 00:35:41,629
requirements file for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> small for you</font>

858
00:35:40,369 --> 00:35:44,240
dependency file you can<font color="#E5E5E5"> change the</font>

859
00:35:41,630 --> 00:35:47,000
version you can do that automatically

860
00:35:44,240 --> 00:35:48,470
<font color="#E5E5E5">treat the</font><font color="#CCCCCC"> PR have the CI</font><font color="#E5E5E5"> RAM and then</font>

861
00:35:47,000 --> 00:35:50,569
link<font color="#E5E5E5"> it for the developer so that the</font>

862
00:35:48,470 --> 00:35:52,250
developer can see did the<font color="#E5E5E5"> test fail</font>

863
00:35:50,569 --> 00:35:54,619
because<font color="#E5E5E5"> there was some duplication or</font>

864
00:35:52,250 --> 00:35:56,569
<font color="#CCCCCC">breaking change in the dependency or</font><font color="#E5E5E5"> did</font>

865
00:35:54,619 --> 00:35:59,390
<font color="#E5E5E5">it pass and is it safe to to merge</font><font color="#CCCCCC"> our</font>

866
00:35:56,569 --> 00:36:01,099
nuts<font color="#E5E5E5"> so it's an automated part of the</font>

867
00:35:59,390 --> 00:36:03,020
the actual work of upgrading and

868
00:36:01,099 --> 00:36:04,910
<font color="#CCCCCC">dependency that if it can</font><font color="#E5E5E5"> be automated</font>

869
00:36:03,020 --> 00:36:09,200
<font color="#CCCCCC">do it because it will</font><font color="#E5E5E5"> help you</font>

870
00:36:04,910 --> 00:36:10,670
developers so finally the deployment<font color="#E5E5E5"> you</font>

871
00:36:09,200 --> 00:36:12,140
want to take what you learned from<font color="#E5E5E5"> here</font>

872
00:36:10,670 --> 00:36:16,099
<font color="#E5E5E5">today and you want to go apply it your</font>

873
00:36:12,140 --> 00:36:19,759
shop<font color="#CCCCCC"> that you work in</font><font color="#E5E5E5"> our goal is</font><font color="#CCCCCC"> to be</font>

874
00:36:16,099 --> 00:36:23,329
able<font color="#E5E5E5"> to to</font><font color="#CCCCCC"> open-source this no promises</font>

875
00:36:19,760 --> 00:36:24,529
but<font color="#E5E5E5"> if you if you do want to go and get</font>

876
00:36:23,329 --> 00:36:26,720
<font color="#E5E5E5">started there's a couple things</font><font color="#CCCCCC"> you're</font>

877
00:36:24,529 --> 00:36:28,910
gonna need the<font color="#E5E5E5"> good of authorizer</font>

878
00:36:26,720 --> 00:36:30,078
and to get so<font color="#E5E5E5"> that's the that's</font><font color="#CCCCCC"> the</font>

879
00:36:28,910 --> 00:36:33,848
piece that<font color="#CCCCCC"> we talked about</font><font color="#E5E5E5"> to make sure</font>

880
00:36:30,079 --> 00:36:37,460
that it<font color="#CCCCCC"> really is a</font><font color="#E5E5E5"> a pull request or a</font>

881
00:36:33,849 --> 00:36:40,210
web hook<font color="#E5E5E5"> from github</font><font color="#CCCCCC"> there's the github</font>

882
00:36:37,460 --> 00:36:43,190
trigger<font color="#E5E5E5"> that's actually the piece that</font>

883
00:36:40,210 --> 00:36:44,720
pulls the<font color="#CCCCCC"> information how that you that</font>

884
00:36:43,190 --> 00:36:48,230
we need like the poor<font color="#E5E5E5"> request who made</font>

885
00:36:44,720 --> 00:36:49,879
it<font color="#E5E5E5"> the features now we have here the</font>

886
00:36:48,230 --> 00:36:53,480
<font color="#CCCCCC">plugin that</font><font color="#E5E5E5"> uses the ghost security</font>

887
00:36:49,880 --> 00:36:55,279
scanner<font color="#E5E5E5"> we understand not everyone is</font>

888
00:36:53,480 --> 00:36:57,799
going to have<font color="#E5E5E5"> check</font><font color="#CCCCCC"> marks</font><font color="#E5E5E5"> not everyone</font>

889
00:36:55,279 --> 00:36:59,809
is going<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> snick you can use open</font>

890
00:36:57,799 --> 00:37:03,529
<font color="#E5E5E5">source tools with this there there's no</font>

891
00:36:59,809 --> 00:37:04,970
problem<font color="#CCCCCC"> with that so this one goes</font>

892
00:37:03,529 --> 00:37:06,619
<font color="#E5E5E5">security scanner formerly known as yes</font>

893
00:37:04,970 --> 00:37:07,680
great tool<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> for vulnerabilities</font>

894
00:37:06,619 --> 00:37:11,640
and go

895
00:37:07,680 --> 00:37:14,040
<font color="#E5E5E5">you can use that if</font><font color="#CCCCCC"> you use go you would</font>

896
00:37:11,640 --> 00:37:17,190
need a github PR commenter<font color="#E5E5E5"> or the final</font>

897
00:37:14,040 --> 00:37:19,050
<font color="#CCCCCC">one</font><font color="#E5E5E5"> to make that</font><font color="#CCCCCC"> push to the comment or</font>

898
00:37:17,190 --> 00:37:21,780
you could use<font color="#E5E5E5"> something like slack</font>

899
00:37:19,050 --> 00:37:28,470
output so<font color="#CCCCCC"> you can notify the developer</font>

900
00:37:21,780 --> 00:37:30,780
who just pushed<font color="#E5E5E5"> that</font><font color="#CCCCCC"> internally</font><font color="#E5E5E5"> we use</font>

901
00:37:28,470 --> 00:37:34,319
we use circle us to deploy<font color="#E5E5E5"> the lambdas</font>

902
00:37:30,780 --> 00:37:36,150
which<font color="#E5E5E5"> you could do with</font><font color="#CCCCCC"> terraform as</font>

903
00:37:34,319 --> 00:37:40,829
<font color="#E5E5E5">well but we find</font><font color="#CCCCCC"> serverless is easier to</font>

904
00:37:36,150 --> 00:37:43,109
<font color="#E5E5E5">manage lambdas</font><font color="#CCCCCC"> and we have the</font><font color="#E5E5E5"> the step</font>

905
00:37:40,829 --> 00:37:45,150
functions<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the actual state that</font>

906
00:37:43,109 --> 00:37:47,640
ties of the lambdas together<font color="#E5E5E5"> we have the</font>

907
00:37:45,150 --> 00:37:51,780
<font color="#E5E5E5">API gateway which is that piece to make</font>

908
00:37:47,640 --> 00:37:54,450
to open up the<font color="#CCCCCC"> the step function to the</font>

909
00:37:51,780 --> 00:37:56,490
world so the github can actually send

910
00:37:54,450 --> 00:37:57,868
your web<font color="#CCCCCC"> books</font><font color="#E5E5E5"> in the eye on policies</font>

911
00:37:56,490 --> 00:37:59,970
and roles to attach to everything to

912
00:37:57,869 --> 00:38:01,410
make<font color="#CCCCCC"> everything work</font><font color="#E5E5E5"> and we use</font>

913
00:37:59,970 --> 00:38:03,709
terraform for this<font color="#E5E5E5"> too</font>

914
00:38:01,410 --> 00:38:09,720
to<font color="#E5E5E5"> deploy all this infrastructure scope</font>

915
00:38:03,710 --> 00:38:11,309
<font color="#E5E5E5">so for the case</font><font color="#CCCCCC"> of sneek</font><font color="#E5E5E5"> we have a slack</font>

916
00:38:09,720 --> 00:38:13,339
integration so we get slack message

917
00:38:11,309 --> 00:38:16,980
<font color="#E5E5E5">whenever something is</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> an old</font>

918
00:38:13,339 --> 00:38:19,828
dependency<font color="#CCCCCC"> we also use github issues to</font>

919
00:38:16,980 --> 00:38:22,650
track<font color="#CCCCCC"> every Matiz so the goal is to</font>

920
00:38:19,829 --> 00:38:24,660
<font color="#E5E5E5">create this is not very young</font><font color="#CCCCCC"> dead</font>

921
00:38:22,650 --> 00:38:26,040
facing this pretty manatee management

922
00:38:24,660 --> 00:38:27,868
program so<font color="#CCCCCC"> we could do</font><font color="#E5E5E5"> it the way we</font>

923
00:38:26,040 --> 00:38:33,390
want<font color="#E5E5E5"> and so we want to create an issue</font>

924
00:38:27,869 --> 00:38:36,119
<font color="#E5E5E5">so</font><font color="#CCCCCC"> that it gets tracked in time but it's</font>

925
00:38:33,390 --> 00:38:37,500
use issues for<font color="#CCCCCC"> us and github that is</font>

926
00:38:36,119 --> 00:38:41,250
something<font color="#CCCCCC"> the security team has gone</font><font color="#E5E5E5"> in</font>

927
00:38:37,500 --> 00:38:42,630
<font color="#E5E5E5">100% validated like we we take it's a</font>

928
00:38:41,250 --> 00:38:44,250
report from the bug<font color="#E5E5E5"> bounty program we</font>

929
00:38:42,630 --> 00:38:46,700
found<font color="#CCCCCC"> something internally we then go</font>

930
00:38:44,250 --> 00:38:49,710
write<font color="#CCCCCC"> it</font><font color="#E5E5E5"> up and put it on there this is</font>

931
00:38:46,700 --> 00:38:51,390
this is so fast for the developer<font color="#E5E5E5"> that</font>

932
00:38:49,710 --> 00:38:53,609
he gets<font color="#CCCCCC"> to write thin in there and he</font>

933
00:38:51,390 --> 00:38:56,460
may<font color="#E5E5E5"> be able to close it</font><font color="#CCCCCC"> before it's even</font>

934
00:38:53,609 --> 00:38:58,680
done<font color="#E5E5E5"> you know but before</font><font color="#CCCCCC"> we're even able</font>

935
00:38:56,460 --> 00:39:00,480
<font color="#CCCCCC">to react to it</font><font color="#E5E5E5"> that happens that's even</font>

936
00:38:58,680 --> 00:39:01,828
better<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> blown ability</font>

937
00:39:00,480 --> 00:39:06,030
<font color="#CCCCCC">management program if he just fix</font><font color="#E5E5E5"> it</font>

938
00:39:01,829 --> 00:39:07,859
that fast<font color="#E5E5E5"> if if we find it critical and</font>

939
00:39:06,030 --> 00:39:10,829
we we go in and<font color="#CCCCCC"> validated a security</font>

940
00:39:07,859 --> 00:39:12,270
team<font color="#CCCCCC"> then that's when the vulnerability</font>

941
00:39:10,829 --> 00:39:13,500
tracking<font color="#CCCCCC"> process is</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to start</font><font color="#E5E5E5"> when</font>

942
00:39:12,270 --> 00:39:14,009
we're<font color="#E5E5E5"> actually able to get in github</font>

943
00:39:13,500 --> 00:39:19,440
issues

944
00:39:14,010 --> 00:39:21,330
and start<font color="#E5E5E5"> that process yeah but yeah the</font>

945
00:39:19,440 --> 00:39:23,250
tool the<font color="#E5E5E5"> tool you should other day it's</font>

946
00:39:21,330 --> 00:39:26,400
<font color="#E5E5E5">pretty neat so it's fairly easy if you</font>

947
00:39:23,250 --> 00:39:28,710
want send metrics in the scanners<font color="#E5E5E5"> being</font>

948
00:39:26,400 --> 00:39:30,360
like hey Don Ameche found<font color="#CCCCCC"> send a metric</font>

949
00:39:28,710 --> 00:39:33,210
<font color="#E5E5E5">and so we keep in time when it happened</font>

950
00:39:30,360 --> 00:39:34,770
<font color="#CCCCCC">a log line or whatever it's probably</font>

951
00:39:33,210 --> 00:39:41,700
easy to<font color="#E5E5E5"> do that in your scanner if you</font>

952
00:39:34,770 --> 00:39:44,250
want other questions awesome<font color="#CCCCCC"> guys thank</font>

953
00:39:41,700 --> 00:39:49,178
you<font color="#CCCCCC"> for having</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> thank you very much</font>

954
00:39:44,250 --> 00:39:49,179
[Applause]

955
00:39:54,470 --> 00:39:56,529
you

