1
00:00:17,230 --> 00:00:27,130
so today is<font color="#E5E5E5"> when we talking</font><font color="#CCCCCC"> about as in</font>

2
00:00:22,429 --> 00:00:27,130
the curious<font color="#E5E5E5"> AWS lamda threat modeling</font>

3
00:00:27,369 --> 00:00:34,269
brief introduction<font color="#E5E5E5"> go over faz</font><font color="#CCCCCC"> some of</font>

4
00:00:31,340 --> 00:00:36,800
the AWS services that are relevant to

5
00:00:34,269 --> 00:00:40,070
topic of discussion today<font color="#E5E5E5"> different</font>

6
00:00:36,800 --> 00:00:41,659
attack vectors for AWS<font color="#CCCCCC"> lambda</font><font color="#E5E5E5"> and in</font>

7
00:00:40,070 --> 00:00:46,670
some<font color="#E5E5E5"> of the mitigating controls that</font><font color="#CCCCCC"> you</font>

8
00:00:41,659 --> 00:00:48,790
<font color="#E5E5E5">can implement so as Laurel just</font>

9
00:00:46,670 --> 00:00:53,360
mentioned my name<font color="#E5E5E5"> is Brian McCann inch</font>

10
00:00:48,790 --> 00:00:56,600
my handle is<font color="#CCCCCC"> FX you can reach me on</font>

11
00:00:53,360 --> 00:00:59,989
<font color="#CCCCCC">Twitter at brianmacdonnach I'm also</font><font color="#E5E5E5"> the</font>

12
00:00:56,600 --> 00:01:02,479
<font color="#E5E5E5">founder and executive</font><font color="#CCCCCC"> director at</font>

13
00:00:59,989 --> 00:01:05,600
<font color="#CCCCCC">pervade cyber security</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> on Twitter</font>

14
00:01:02,479 --> 00:01:07,908
<font color="#CCCCCC">at purveyed LLC as</font><font color="#E5E5E5"> Laurel just also</font>

15
00:01:05,600 --> 00:01:10,520
mentioned background<font color="#E5E5E5"> 20-plus years</font><font color="#CCCCCC"> and</font>

16
00:01:07,909 --> 00:01:13,009
<font color="#E5E5E5">testing security architecture variety of</font>

17
00:01:10,520 --> 00:01:15,229
things across disciplinary and been

18
00:01:13,009 --> 00:01:19,750
focusing most recently on cloud<font color="#CCCCCC"> Tanner</font>

19
00:01:15,229 --> 00:01:21,829
is<font color="#CCCCCC"> Asian and</font><font color="#E5E5E5"> AI no blocking no blocking</font>

20
00:01:19,750 --> 00:01:25,700
so before we get started<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> give</font>

21
00:01:21,829 --> 00:01:27,249
<font color="#CCCCCC">a couple</font><font color="#E5E5E5"> quick shout outs</font><font color="#CCCCCC"> to sources of</font>

22
00:01:25,700 --> 00:01:29,359
inspiration for this talk

23
00:01:27,249 --> 00:01:33,289
there's gentleman by the name of rich

24
00:01:29,359 --> 00:01:37,929
<font color="#E5E5E5">Jones he's at I'm gonna think that's gun</font>

25
00:01:33,289 --> 00:01:41,359
dot<font color="#E5E5E5"> ten I believe or I'm sorry gun</font><font color="#CCCCCC"> I owe</font>

26
00:01:37,929 --> 00:01:43,579
he did a presentation called gone in 60

27
00:01:41,359 --> 00:01:45,229
milliseconds<font color="#CCCCCC"> a few years back and</font><font color="#E5E5E5"> he's</font>

28
00:01:43,579 --> 00:01:47,208
been<font color="#E5E5E5"> building on that research it's</font>

29
00:01:45,229 --> 00:01:49,969
really a really good research<font color="#CCCCCC"> a lot of</font>

30
00:01:47,209 --> 00:01:50,749
<font color="#E5E5E5">good inspiration for this also Andrew</font>

31
00:01:49,969 --> 00:01:53,208
Krug

32
00:01:50,749 --> 00:01:54,289
I think presented at I'm<font color="#E5E5E5"> not mistaken</font>

33
00:01:53,209 --> 00:01:58,759
<font color="#CCCCCC">was black hat</font>

34
00:01:54,289 --> 00:02:01,759
<font color="#E5E5E5">17 black that USA 17 and he presented on</font>

35
00:01:58,759 --> 00:02:03,799
hacking<font color="#CCCCCC"> service runtimes</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then also</font>

36
00:02:01,759 --> 00:02:06,439
just<font color="#E5E5E5"> the shout out to the DFW hacker</font>

37
00:02:03,799 --> 00:02:10,429
community<font color="#E5E5E5"> North Texas cybersecurity</font>

38
00:02:06,439 --> 00:02:12,920
<font color="#E5E5E5">group Dallas hackers DC</font><font color="#CCCCCC"> 214 DFW and a</font>

39
00:02:10,429 --> 00:02:15,050
wasp<font color="#E5E5E5"> Dallas</font><font color="#CCCCCC"> we've got a great community</font>

40
00:02:12,920 --> 00:02:17,239
up there<font color="#E5E5E5"> if you've never visited</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> in</font>

41
00:02:15,050 --> 00:02:18,200
Dallas<font color="#E5E5E5"> contact me afterwards I'll put</font>

42
00:02:17,240 --> 00:02:19,700
you in<font color="#E5E5E5"> touch</font><font color="#CCCCCC"> with some people</font><font color="#E5E5E5"> we've</font>

43
00:02:18,200 --> 00:02:22,420
we've got<font color="#CCCCCC"> a</font><font color="#E5E5E5"> really warm welcoming</font>

44
00:02:19,700 --> 00:02:25,399
community about<font color="#CCCCCC"> a talent out</font><font color="#E5E5E5"> there</font>

45
00:02:22,420 --> 00:02:27,230
so more<font color="#E5E5E5"> to the point what is fast so</font>

46
00:02:25,400 --> 00:02:28,970
just<font color="#E5E5E5"> by a quick</font><font color="#CCCCCC"> show of hands I know</font>

47
00:02:27,230 --> 00:02:29,730
this is a wasp so a lot<font color="#E5E5E5"> of you are</font><font color="#CCCCCC"> gonna</font>

48
00:02:28,970 --> 00:02:33,349
<font color="#CCCCCC">be familiar</font><font color="#E5E5E5"> with</font>

49
00:02:29,730 --> 00:02:35,780
at least some<font color="#E5E5E5"> of this cloud technologies</font>

50
00:02:33,349 --> 00:02:39,030
just by show of hands<font color="#E5E5E5"> okay and then</font>

51
00:02:35,780 --> 00:02:42,020
<font color="#E5E5E5">container technologies docker kubernetes</font>

52
00:02:39,030 --> 00:02:44,220
kind of thing and then<font color="#E5E5E5"> lambda or</font>

53
00:02:42,020 --> 00:02:45,959
function as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> service in general</font><font color="#CCCCCC"> how</font>

54
00:02:44,220 --> 00:02:52,080
many of you familiar<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that okay</font>

55
00:02:45,959 --> 00:02:54,270
<font color="#E5E5E5">great so function is the service aka</font>

56
00:02:52,080 --> 00:02:56,760
<font color="#CCCCCC">service it's not really cyrillus it's</font>

57
00:02:54,270 --> 00:02:59,810
it's running<font color="#CCCCCC"> its bootstrapping code</font>

58
00:02:56,760 --> 00:03:03,840
<font color="#E5E5E5">running a container that does it it's</font>

59
00:02:59,810 --> 00:03:06,750
very minimal<font color="#E5E5E5"> infrastructure application</font>

60
00:03:03,840 --> 00:03:09,540
deployment event-driven<font color="#CCCCCC"> execution so you</font>

61
00:03:06,750 --> 00:03:12,870
think of a if this<font color="#E5E5E5"> then</font><font color="#CCCCCC"> that something</font>

62
00:03:09,540 --> 00:03:15,060
<font color="#E5E5E5">happens</font><font color="#CCCCCC"> triggers your code</font><font color="#E5E5E5"> it runs does</font>

63
00:03:12,870 --> 00:03:18,810
what it<font color="#CCCCCC"> needs to and</font><font color="#E5E5E5"> then the underlying</font>

64
00:03:15,060 --> 00:03:20,580
container<font color="#E5E5E5"> goes down so some</font><font color="#CCCCCC"> of the</font>

65
00:03:18,810 --> 00:03:23,100
<font color="#E5E5E5">benefits again minimal cloud</font>

66
00:03:20,580 --> 00:03:26,040
infrastructure<font color="#E5E5E5"> minimal operational ahead</font>

67
00:03:23,100 --> 00:03:30,030
<font color="#E5E5E5">really facilitates a lot of efficiency</font>

68
00:03:26,040 --> 00:03:33,209
<font color="#E5E5E5">and a</font><font color="#CCCCCC"> DevOps DevOps see</font><font color="#E5E5E5"> ICD pipeline</font>

69
00:03:30,030 --> 00:03:36,450
environment some of the growth estimates

70
00:03:33,209 --> 00:03:38,790
for this<font color="#E5E5E5"> I found because we keep</font><font color="#CCCCCC"> moving</font>

71
00:03:36,450 --> 00:03:41,899
in this direction of faster<font color="#E5E5E5"> of faster</font>

72
00:03:38,790 --> 00:03:46,910
deployment times<font color="#CCCCCC"> estimate evaluation of</font>

73
00:03:41,900 --> 00:03:50,459
7.75 billion in USD by<font color="#E5E5E5"> 2021 and</font>

74
00:03:46,910 --> 00:03:52,890
forecasted to grow around<font color="#E5E5E5"> 33%</font><font color="#CCCCCC"> so a</font>

75
00:03:50,459 --> 00:03:54,570
pretty pretty fast growth you know we

76
00:03:52,890 --> 00:04:00,230
got cloud and we've got containers now

77
00:03:54,570 --> 00:04:02,760
we've got this fast so some of<font color="#E5E5E5"> the</font>

78
00:04:00,230 --> 00:04:06,000
benefits of it<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> started off</font><font color="#E5E5E5"> with</font>

79
00:04:02,760 --> 00:04:07,500
<font color="#E5E5E5">rack-mounted servers</font><font color="#CCCCCC"> still have</font><font color="#E5E5E5"> some of</font>

80
00:04:06,000 --> 00:04:10,079
<font color="#E5E5E5">those a lot of</font><font color="#CCCCCC"> people still use</font><font color="#E5E5E5"> them but</font>

81
00:04:07,500 --> 00:04:13,829
the<font color="#E5E5E5"> direction we've moved is how do we</font>

82
00:04:10,079 --> 00:04:16,228
<font color="#E5E5E5">get this deployment time down to</font><font color="#CCCCCC"> as</font>

83
00:04:13,829 --> 00:04:17,940
minimal<font color="#E5E5E5"> as possible and in terms of time</font>

84
00:04:16,228 --> 00:04:21,779
<font color="#CCCCCC">and as minimal as</font><font color="#E5E5E5"> possible in terms</font><font color="#CCCCCC"> of</font>

85
00:04:17,940 --> 00:04:25,130
cost so you<font color="#CCCCCC"> know rack-mounted took days</font>

86
00:04:21,779 --> 00:04:27,780
it was high cost it took a<font color="#E5E5E5"> lot of people</font>

87
00:04:25,130 --> 00:04:29,669
<font color="#E5E5E5">we've moved</font><font color="#CCCCCC"> over to virtualization we're</font>

88
00:04:27,780 --> 00:04:32,789
cramming<font color="#CCCCCC"> more resources</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of that</font>

89
00:04:29,669 --> 00:04:34,919
hardware so we<font color="#E5E5E5"> can run multiple virtual</font>

90
00:04:32,789 --> 00:04:37,740
<font color="#CCCCCC">machines on a single hardware platform</font>

91
00:04:34,919 --> 00:04:39,599
and then the<font color="#CCCCCC"> powers-that-be said well</font>

92
00:04:37,740 --> 00:04:41,490
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> not enough let's get a little bit</font>

93
00:04:39,599 --> 00:04:43,560
more<font color="#E5E5E5"> out of</font><font color="#CCCCCC"> that even so now we've got</font>

94
00:04:41,490 --> 00:04:46,030
micro service architecture

95
00:04:43,560 --> 00:04:49,150
<font color="#E5E5E5">where you know we're running containers</font>

96
00:04:46,030 --> 00:04:52,419
that<font color="#CCCCCC"> are providing a single service</font>

97
00:04:49,150 --> 00:04:55,659
rather than<font color="#E5E5E5"> a monolithic and the</font>

98
00:04:52,420 --> 00:04:58,540
evolution now is toward faz<font color="#CCCCCC"> with</font><font color="#E5E5E5"> lambda</font>

99
00:04:55,660 --> 00:05:00,460
specifically in<font color="#E5E5E5"> this talk or</font>

100
00:04:58,540 --> 00:05:03,310
bootstrapping code on the fly

101
00:05:00,460 --> 00:05:07,599
as needed<font color="#E5E5E5"> and then obviously that's a</font>

102
00:05:03,310 --> 00:05:11,110
lot faster<font color="#E5E5E5"> and much more cheaper so so</font>

103
00:05:07,600 --> 00:05:13,690
AWS services<font color="#E5E5E5"> when I originally</font><font color="#CCCCCC"> started</font>

104
00:05:11,110 --> 00:05:16,480
<font color="#CCCCCC">doing this and kind of</font><font color="#E5E5E5"> tinkering with</font>

105
00:05:13,690 --> 00:05:19,060
<font color="#CCCCCC">lambda</font><font color="#E5E5E5"> I was talking to a friend and</font><font color="#CCCCCC"> he</font>

106
00:05:16,480 --> 00:05:20,650
mentioned<font color="#E5E5E5"> that you know and that</font>

107
00:05:19,060 --> 00:05:22,630
actually<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not service</font><font color="#E5E5E5"> it's it's</font>

108
00:05:20,650 --> 00:05:25,000
running<font color="#E5E5E5"> on a container bunch of code</font>

109
00:05:22,630 --> 00:05:26,469
<font color="#CCCCCC">etcetera</font><font color="#E5E5E5"> etc so I started scratching my</font>

110
00:05:25,000 --> 00:05:28,870
head<font color="#E5E5E5"> I was like well if it's running my</font>

111
00:05:26,470 --> 00:05:33,640
code maybe<font color="#E5E5E5"> there's some possibilities</font>

112
00:05:28,870 --> 00:05:35,350
for abuse so reading through AWS is<font color="#CCCCCC"> FAQ</font>

113
00:05:33,640 --> 00:05:38,680
this is what they had that<font color="#E5E5E5"> this is kind</font>

114
00:05:35,350 --> 00:05:40,600
of what I pulled<font color="#E5E5E5"> out of that paragraph</font>

115
00:05:38,680 --> 00:05:42,700
that<font color="#E5E5E5"> runs your code on underlying</font>

116
00:05:40,600 --> 00:05:44,680
compute with some back-end<font color="#E5E5E5"> services and</font>

117
00:05:42,700 --> 00:05:47,740
it just seemed<font color="#E5E5E5"> like it presented a lot</font>

118
00:05:44,680 --> 00:05:48,880
<font color="#E5E5E5">of opportunity for research and it</font><font color="#CCCCCC"> it</font>

119
00:05:47,740 --> 00:05:53,800
did is really interesting what I've

120
00:05:48,880 --> 00:05:55,990
learned so lambda again<font color="#E5E5E5"> I'm not going</font><font color="#CCCCCC"> to</font>

121
00:05:53,800 --> 00:05:59,970
read<font color="#E5E5E5"> through all</font><font color="#CCCCCC"> of them but it's got a</font>

122
00:05:55,990 --> 00:06:02,920
lot<font color="#CCCCCC"> of really really cool features I</font>

123
00:05:59,970 --> 00:06:05,740
think<font color="#CCCCCC"> probably the the biggest</font><font color="#E5E5E5"> one from</font>

124
00:06:02,920 --> 00:06:07,600
a from a security standpoint is<font color="#CCCCCC"> that</font>

125
00:06:05,740 --> 00:06:10,480
it's the statelessness of it's very

126
00:06:07,600 --> 00:06:13,240
<font color="#E5E5E5">ephemeral the</font><font color="#CCCCCC"> resources that</font><font color="#E5E5E5"> you're</font>

127
00:06:10,480 --> 00:06:14,920
executing and that it provides<font color="#E5E5E5"> and then</font>

128
00:06:13,240 --> 00:06:16,210
it's got<font color="#E5E5E5"> a read-only file system with</font>

129
00:06:14,920 --> 00:06:23,260
one<font color="#CCCCCC"> exception and</font><font color="#E5E5E5"> we'll get to that</font><font color="#CCCCCC"> a</font>

130
00:06:16,210 --> 00:06:25,750
<font color="#E5E5E5">little bit later so this is my attempt</font>

131
00:06:23,260 --> 00:06:28,630
<font color="#E5E5E5">at drawing up a kind of a lambda</font>

132
00:06:25,750 --> 00:06:31,570
architecture<font color="#E5E5E5"> we've got the events on the</font>

133
00:06:28,630 --> 00:06:36,190
left side here<font color="#CCCCCC"> that could</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> dynamodb</font>

134
00:06:31,570 --> 00:06:38,170
simple<font color="#CCCCCC"> notification services API gateway</font>

135
00:06:36,190 --> 00:06:40,300
cloud formation template<font color="#E5E5E5"> s3 there's a</font>

136
00:06:38,170 --> 00:06:45,310
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of things at lambda supports as a</font>

137
00:06:40,300 --> 00:06:47,460
trigger<font color="#E5E5E5"> and from my understanding</font><font color="#CCCCCC"> maybe</font>

138
00:06:45,310 --> 00:06:50,740
a little<font color="#E5E5E5"> bit presumptuous of me but</font>

139
00:06:47,460 --> 00:06:54,010
assuming with AWS<font color="#E5E5E5"> is elastic container</font>

140
00:06:50,740 --> 00:06:55,740
service<font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> ECS it's probably what</font>

141
00:06:54,010 --> 00:07:00,900
<font color="#E5E5E5">lambdas leveraging</font>

142
00:06:55,740 --> 00:07:03,720
which runs<font color="#E5E5E5"> an</font><font color="#CCCCCC"> ECT clusters which execute</font>

143
00:07:00,900 --> 00:07:07,229
a lambda which will be<font color="#E5E5E5"> your code that</font>

144
00:07:03,720 --> 00:07:10,199
<font color="#E5E5E5">runs on a docker container so and all</font>

145
00:07:07,229 --> 00:07:12,740
the code<font color="#E5E5E5"> that I know of currently that</font>

146
00:07:10,199 --> 00:07:15,030
you can run would be Python nodejs

147
00:07:12,740 --> 00:07:18,120
c-sharp<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Java I think they're adding</font>

148
00:07:15,030 --> 00:07:19,500
more<font color="#E5E5E5"> pretty regularly so again from left</font>

149
00:07:18,120 --> 00:07:21,810
<font color="#CCCCCC">to right you've got an event that</font>

150
00:07:19,500 --> 00:07:25,320
triggers a<font color="#E5E5E5"> lambda</font><font color="#CCCCCC"> function that's</font>

151
00:07:21,810 --> 00:07:28,650
invoked<font color="#E5E5E5"> using the the language</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> choice</font>

152
00:07:25,320 --> 00:07:32,280
<font color="#CCCCCC">that you've written</font><font color="#E5E5E5"> it in so here's an</font>

153
00:07:28,650 --> 00:07:34,590
example<font color="#CCCCCC"> kind of a sort of a hello world</font>

154
00:07:32,280 --> 00:07:38,309
we're receiving<font color="#E5E5E5"> input and a JSON format</font>

155
00:07:34,590 --> 00:07:40,710
<font color="#E5E5E5">so we've got key</font><font color="#CCCCCC"> three value three key</font><font color="#E5E5E5"> -</font>

156
00:07:38,310 --> 00:07:42,840
value<font color="#CCCCCC"> - key</font><font color="#E5E5E5"> one value one</font>

157
00:07:40,710 --> 00:07:46,500
<font color="#E5E5E5">it's invoked into the lambda function</font>

158
00:07:42,840 --> 00:07:49,380
you can parse those values out<font color="#CCCCCC"> do</font>

159
00:07:46,500 --> 00:07:50,940
whatever you'd like<font color="#CCCCCC"> with them</font><font color="#E5E5E5"> but for</font>

160
00:07:49,380 --> 00:07:53,099
<font color="#CCCCCC">purposes of</font><font color="#E5E5E5"> illustration I'm just</font>

161
00:07:50,940 --> 00:07:55,169
printing<font color="#E5E5E5"> out the key</font><font color="#CCCCCC"> and then what you</font>

162
00:07:53,099 --> 00:07:58,590
see<font color="#CCCCCC"> over</font><font color="#E5E5E5"> on the left is what's actually</font>

163
00:07:55,169 --> 00:08:00,719
outputted so again this could be you

164
00:07:58,590 --> 00:08:03,299
know<font color="#E5E5E5"> we receive input we write through</font>

165
00:08:00,720 --> 00:08:05,729
an s3 bucket<font color="#CCCCCC"> we invoke another lambda</font>

166
00:08:03,300 --> 00:08:10,050
functions endless<font color="#E5E5E5"> possibilities</font><font color="#CCCCCC"> of what</font>

167
00:08:05,729 --> 00:08:12,960
<font color="#E5E5E5">you can do with lambda by the way if you</font>

168
00:08:10,050 --> 00:08:14,849
have any<font color="#E5E5E5"> questions open dialogue</font>

169
00:08:12,960 --> 00:08:18,169
throughout something comes up<font color="#E5E5E5"> you have a</font>

170
00:08:14,849 --> 00:08:21,389
question please feel<font color="#CCCCCC"> free to ask so</font>

171
00:08:18,169 --> 00:08:23,639
within the context<font color="#E5E5E5"> of this also we want</font>

172
00:08:21,389 --> 00:08:26,250
to<font color="#E5E5E5"> look at identity and access</font>

173
00:08:23,639 --> 00:08:28,590
management within AWS because it's the

174
00:08:26,250 --> 00:08:30,539
foundation<font color="#CCCCCC"> of their their security</font>

175
00:08:28,590 --> 00:08:34,650
architecture<font color="#E5E5E5"> you've got you know roles</font>

176
00:08:30,539 --> 00:08:37,110
policies users groups<font color="#CCCCCC"> etc so it's just</font>

177
00:08:34,650 --> 00:08:41,939
<font color="#E5E5E5">kind of telling you what you can use it</font>

178
00:08:37,110 --> 00:08:43,440
for how it enforces<font color="#E5E5E5"> it again some of the</font>

179
00:08:41,940 --> 00:08:45,510
<font color="#CCCCCC">attributes we've got a user</font><font color="#E5E5E5"> that's</font>

180
00:08:43,440 --> 00:08:47,400
really no<font color="#CCCCCC"> different than what</font><font color="#E5E5E5"> many of us</font>

181
00:08:45,510 --> 00:08:50,010
would<font color="#E5E5E5"> consider a user it's a person or</font>

182
00:08:47,400 --> 00:08:54,480
service that you're<font color="#E5E5E5"> able to log</font><font color="#CCCCCC"> into AWS</font>

183
00:08:50,010 --> 00:08:57,149
web console<font color="#CCCCCC"> you can use their API</font><font color="#E5E5E5"> using</font>

184
00:08:54,480 --> 00:09:00,959
your API keys you can<font color="#CCCCCC"> also use the</font>

185
00:08:57,149 --> 00:09:03,510
command<font color="#CCCCCC"> line</font><font color="#E5E5E5"> interface with AWS CLI it's</font>

186
00:09:00,959 --> 00:09:06,479
authenticating with<font color="#E5E5E5"> a name</font><font color="#CCCCCC"> password</font>

187
00:09:03,510 --> 00:09:08,510
access<font color="#E5E5E5"> keys</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it by default users</font><font color="#CCCCCC"> are</font>

188
00:09:06,480 --> 00:09:10,910
creative with no permit

189
00:09:08,510 --> 00:09:13,580
not even the<font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> change their</font><font color="#CCCCCC"> own</font>

190
00:09:10,910 --> 00:09:16,219
<font color="#CCCCCC">passwords so kudos to eight of us</font>

191
00:09:13,580 --> 00:09:18,760
<font color="#E5E5E5">they've done a really</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> job with</font><font color="#CCCCCC"> ion</font>

192
00:09:16,220 --> 00:09:21,170
on locking<font color="#E5E5E5"> down an</font><font color="#CCCCCC"> environment you</font>

193
00:09:18,760 --> 00:09:23,510
<font color="#CCCCCC">literally</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> in and explicitly</font>

194
00:09:21,170 --> 00:09:26,599
grant permissions<font color="#E5E5E5"> through policies and</font>

195
00:09:23,510 --> 00:09:28,819
group<font color="#E5E5E5"> settings so group again no</font>

196
00:09:26,600 --> 00:09:30,950
difference<font color="#CCCCCC"> really from maybe like an</font>

197
00:09:28,820 --> 00:09:32,660
Active Directory group or a Linux UNIX

198
00:09:30,950 --> 00:09:35,720
<font color="#E5E5E5">group it's just a collection of I am</font>

199
00:09:32,660 --> 00:09:37,969
users with common permissions<font color="#CCCCCC"> and again</font>

200
00:09:35,720 --> 00:09:39,770
just as most groups do<font color="#E5E5E5"> is administrative</font>

201
00:09:37,970 --> 00:09:45,770
convenience for granting and revoking

202
00:09:39,770 --> 00:09:49,370
access roles<font color="#E5E5E5"> in AWS are a little bit</font>

203
00:09:45,770 --> 00:09:52,610
different<font color="#CCCCCC"> it's it's it's a it's a</font>

204
00:09:49,370 --> 00:09:54,710
identity<font color="#E5E5E5"> that's assumed temporarily</font><font color="#CCCCCC"> but</font>

205
00:09:52,610 --> 00:09:58,550
there's no<font color="#E5E5E5"> Associated credentials with a</font>

206
00:09:54,710 --> 00:10:00,680
role<font color="#CCCCCC"> so you could have</font><font color="#E5E5E5"> like an ec2</font>

207
00:09:58,550 --> 00:10:04,010
instance that needs<font color="#CCCCCC"> access to several</font>

208
00:10:00,680 --> 00:10:06,020
resources<font color="#CCCCCC"> you could create a role</font><font color="#E5E5E5"> attach</font>

209
00:10:04,010 --> 00:10:08,750
a policy to it and<font color="#CCCCCC"> apply</font><font color="#E5E5E5"> and attach that</font>

210
00:10:06,020 --> 00:10:11,050
<font color="#E5E5E5">role to an ec2 instance or a lambda</font>

211
00:10:08,750 --> 00:10:14,660
<font color="#CCCCCC">function or a number of</font><font color="#E5E5E5"> other things so</font>

212
00:10:11,050 --> 00:10:18,140
it can retrieve credentials locally<font color="#E5E5E5"> from</font>

213
00:10:14,660 --> 00:10:20,500
an ec2 instance and metadata or AWS

214
00:10:18,140 --> 00:10:22,730
simple token<font color="#CCCCCC"> service so there's another</font>

215
00:10:20,500 --> 00:10:25,310
several different<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> to do it made up</font>

216
00:10:22,730 --> 00:10:27,950
yeah it's pretty<font color="#E5E5E5"> flexible</font><font color="#CCCCCC"> so the</font>

217
00:10:25,310 --> 00:10:30,020
policies are kind<font color="#E5E5E5"> of a double-edged</font>

218
00:10:27,950 --> 00:10:33,110
sword and get to<font color="#E5E5E5"> that</font><font color="#CCCCCC"> just here in a sec</font>

219
00:10:30,020 --> 00:10:35,180
<font color="#CCCCCC">to is a</font><font color="#E5E5E5"> JSON formatted object this you</font>

220
00:10:33,110 --> 00:10:38,060
know explicitly defines permissions

221
00:10:35,180 --> 00:10:42,290
again because<font color="#E5E5E5"> AWS has I could deny by</font>

222
00:10:38,060 --> 00:10:44,150
default security<font color="#E5E5E5"> policy for</font><font color="#CCCCCC"> ion so after</font>

223
00:10:42,290 --> 00:10:45,890
they give you several<font color="#CCCCCC"> different</font><font color="#E5E5E5"> ways</font>

224
00:10:44,150 --> 00:10:47,810
they have AWS managed policies

225
00:10:45,890 --> 00:10:50,810
predefined templates that you can<font color="#CCCCCC"> use or</font>

226
00:10:47,810 --> 00:10:53,599
<font color="#CCCCCC">you can go in define your own with like</font>

227
00:10:50,810 --> 00:10:57,979
<font color="#CCCCCC">inline</font><font color="#E5E5E5"> policies they're very granular</font>

228
00:10:53,600 --> 00:11:02,540
but they do support<font color="#E5E5E5"> entity wildcards</font>

229
00:10:57,980 --> 00:11:05,060
<font color="#CCCCCC">asterisk so if you look at let's just</font>

230
00:11:02,540 --> 00:11:06,500
say all<font color="#CCCCCC"> the different s3 permissions</font><font color="#E5E5E5"> and</font>

231
00:11:05,060 --> 00:11:09,050
there's there's tons of them you gotta

232
00:11:06,500 --> 00:11:10,670
get object and put object and there's

233
00:11:09,050 --> 00:11:14,780
there's so many if<font color="#CCCCCC"> you just want</font><font color="#E5E5E5"> to give</font>

234
00:11:10,670 --> 00:11:16,490
a resource or a user access<font color="#CCCCCC"> to all of</font>

235
00:11:14,780 --> 00:11:18,439
those<font color="#E5E5E5"> different permissions you can just</font>

236
00:11:16,490 --> 00:11:20,640
put in an asterisk<font color="#CCCCCC"> which as we know</font>

237
00:11:18,440 --> 00:11:25,529
<font color="#CCCCCC">wildcards can</font><font color="#E5E5E5"> be dangerous if used</font>

238
00:11:20,640 --> 00:11:28,860
and<font color="#CCCCCC"> and appropriately</font><font color="#E5E5E5"> so this is my my</font>

239
00:11:25,529 --> 00:11:31,920
<font color="#E5E5E5">little joke with ion so this is just</font><font color="#CCCCCC"> a</font>

240
00:11:28,860 --> 00:11:35,250
really<font color="#E5E5E5"> simple simple sample policy to</font>

241
00:11:31,920 --> 00:11:39,599
<font color="#E5E5E5">allow a</font><font color="#CCCCCC"> username Colonel Sanders access</font>

242
00:11:35,250 --> 00:11:41,339
to a KFC<font color="#E5E5E5"> s3 bucket</font><font color="#CCCCCC"> and you can kind of</font>

243
00:11:39,600 --> 00:11:43,649
see how that could get a<font color="#CCCCCC"> little</font>

244
00:11:41,339 --> 00:11:44,820
<font color="#CCCCCC">confusing especially</font><font color="#E5E5E5"> again then I by</font>

245
00:11:43,649 --> 00:11:47,670
default we've got to go in and

246
00:11:44,820 --> 00:11:50,430
explicitly define who can access<font color="#E5E5E5"> what</font>

247
00:11:47,670 --> 00:11:53,490
it's good from<font color="#CCCCCC"> a security standpoint but</font>

248
00:11:50,430 --> 00:11:55,319
<font color="#E5E5E5">often times when we're going through and</font>

249
00:11:53,490 --> 00:11:56,700
maybe troubleshooting or we need<font color="#E5E5E5"> to get</font>

250
00:11:55,320 --> 00:11:58,769
<font color="#E5E5E5">something set</font><font color="#CCCCCC"> up and configured very</font>

251
00:11:56,700 --> 00:12:00,360
quickly<font color="#E5E5E5"> most people are going to resort</font>

252
00:11:58,769 --> 00:12:01,649
<font color="#E5E5E5">or the</font><font color="#CCCCCC"> wild card get it</font><font color="#E5E5E5"> working and</font>

253
00:12:00,360 --> 00:12:04,320
<font color="#E5E5E5">maybe we don't come back and revisit</font>

254
00:12:01,649 --> 00:12:08,550
that<font color="#E5E5E5"> and that obviously presents a</font>

255
00:12:04,320 --> 00:12:10,890
problem so we get into<font color="#E5E5E5"> the meat of it</font>

256
00:12:08,550 --> 00:12:13,949
<font color="#E5E5E5">here</font><font color="#CCCCCC"> again this is kind of a threat</font>

257
00:12:10,890 --> 00:12:17,250
modeling talk so I'm gonna throw<font color="#CCCCCC"> up this</font>

258
00:12:13,950 --> 00:12:19,529
disclaimer<font color="#E5E5E5"> because it's important to</font>

259
00:12:17,250 --> 00:12:21,990
note that<font color="#E5E5E5"> although attack vectors shown</font>

260
00:12:19,529 --> 00:12:24,000
here assume that applicable permissions

261
00:12:21,990 --> 00:12:27,000
have<font color="#E5E5E5"> been granted through I</font><font color="#CCCCCC"> am roles and</font>

262
00:12:24,000 --> 00:12:28,920
policies so I'm I'm not circumventing I

263
00:12:27,000 --> 00:12:30,870
am by any means this just assumes that

264
00:12:28,920 --> 00:12:33,719
<font color="#E5E5E5">those uh those permissions have been</font>

265
00:12:30,870 --> 00:12:37,769
<font color="#E5E5E5">granted already but because of the deny</font>

266
00:12:33,720 --> 00:12:40,560
by default<font color="#E5E5E5"> they're very esoteric</font><font color="#CCCCCC"> it's</font>

267
00:12:37,769 --> 00:12:43,880
very granular<font color="#CCCCCC"> it's not unusual</font><font color="#E5E5E5"> for them</font>

268
00:12:40,560 --> 00:12:47,040
to<font color="#CCCCCC"> kind of grow very lacks over time</font>

269
00:12:43,880 --> 00:12:49,310
some<font color="#CCCCCC"> of the culprits include like</font>

270
00:12:47,040 --> 00:12:52,349
serverless web service frameworks

271
00:12:49,310 --> 00:12:54,300
automation tools<font color="#E5E5E5"> third-party solutions</font>

272
00:12:52,350 --> 00:12:57,360
they you know we they want<font color="#E5E5E5"> to get your</font>

273
00:12:54,300 --> 00:12:58,979
their solution integrated into your

274
00:12:57,360 --> 00:13:00,930
<font color="#E5E5E5">environment very quickly they're just</font>

275
00:12:58,980 --> 00:13:02,870
going<font color="#E5E5E5"> to set up great you know low</font>

276
00:13:00,930 --> 00:13:05,399
barrier<font color="#CCCCCC"> to entry</font><font color="#E5E5E5"> easy to implement</font>

277
00:13:02,870 --> 00:13:07,140
<font color="#E5E5E5">policies they don't want to spend their</font>

278
00:13:05,399 --> 00:13:08,579
time<font color="#CCCCCC"> trying to troubleshoot</font><font color="#E5E5E5"> and make</font>

279
00:13:07,140 --> 00:13:10,800
themselves<font color="#CCCCCC"> look bad so</font><font color="#E5E5E5"> they give you</font>

280
00:13:08,579 --> 00:13:14,550
something<font color="#CCCCCC"> very simple</font><font color="#E5E5E5"> to put in and then</font>

281
00:13:10,800 --> 00:13:17,729
just untrained or lazy apathetic cloud

282
00:13:14,550 --> 00:13:19,769
admins again I mean we're all<font color="#CCCCCC"> oh I speak</font>

283
00:13:17,730 --> 00:13:21,779
for myself<font color="#E5E5E5"> I'm I'm guilty of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> I</font>

284
00:13:19,769 --> 00:13:23,459
think<font color="#CCCCCC"> we all are</font><font color="#E5E5E5"> we've probably gone and</font>

285
00:13:21,779 --> 00:13:27,769
said you know what I'm just<font color="#CCCCCC"> going to do</font>

286
00:13:23,459 --> 00:13:27,768
<font color="#E5E5E5">this it's a lot simpler this</font><font color="#CCCCCC"> way so</font><font color="#E5E5E5"> um</font>

287
00:13:28,640 --> 00:13:35,040
the attack vectors are not necessarily

288
00:13:32,250 --> 00:13:36,740
<font color="#E5E5E5">any different from other attack vectors</font>

289
00:13:35,040 --> 00:13:38,579
but it's<font color="#E5E5E5"> just a little bit different</font>

290
00:13:36,740 --> 00:13:42,779
<font color="#E5E5E5">context because we're talking</font><font color="#CCCCCC"> about</font>

291
00:13:38,580 --> 00:13:45,420
cloud and how AWS<font color="#E5E5E5"> and enforces this so</font>

292
00:13:42,779 --> 00:13:47,310
we'll<font color="#E5E5E5"> start off with some active</font>

293
00:13:45,420 --> 00:13:49,650
reconnaissance so I started tinkering

294
00:13:47,310 --> 00:13:53,430
around<font color="#E5E5E5"> with lambda and and saying what</font>

295
00:13:49,650 --> 00:13:57,060
kind<font color="#E5E5E5"> of code can I execute</font><font color="#CCCCCC"> what can I do</font>

296
00:13:53,430 --> 00:13:59,729
where can<font color="#E5E5E5"> I write where can I read look</font>

297
00:13:57,060 --> 00:14:02,400
<font color="#E5E5E5">at like some credential hijacking that</font>

298
00:13:59,730 --> 00:14:05,730
we could do like maybe like a insider

299
00:14:02,400 --> 00:14:08,550
threat or a rogue employee some some

300
00:14:05,730 --> 00:14:10,620
sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> scenario like that how can we</font>

301
00:14:08,550 --> 00:14:14,640
gain persistent remote access through

302
00:14:10,620 --> 00:14:17,640
lambda and at the end here we'll try to

303
00:14:14,640 --> 00:14:19,860
step through some<font color="#E5E5E5"> reverse engineering at</font>

304
00:14:17,640 --> 00:14:21,750
the end I'd<font color="#CCCCCC"> like if anyone</font><font color="#E5E5E5"> in here is</font>

305
00:14:19,860 --> 00:14:23,250
<font color="#CCCCCC">like a Python hacker</font><font color="#E5E5E5"> or knows Python</font>

306
00:14:21,750 --> 00:14:25,560
<font color="#E5E5E5">really well I'd like to either talk to</font>

307
00:14:23,250 --> 00:14:27,420
<font color="#E5E5E5">you during the the presentation or</font>

308
00:14:25,560 --> 00:14:29,160
afterwards<font color="#E5E5E5"> was</font><font color="#CCCCCC"> evident</font><font color="#E5E5E5"> I'm still working</font>

309
00:14:27,420 --> 00:14:34,050
<font color="#E5E5E5">on some stuff</font><font color="#CCCCCC"> and I had some ideas and</font>

310
00:14:29,160 --> 00:14:35,730
like<font color="#E5E5E5"> the solicits major input so so</font>

311
00:14:34,050 --> 00:14:38,819
curious minds want to know this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just</font>

312
00:14:35,730 --> 00:14:40,950
kind of the thought process when we're

313
00:14:38,820 --> 00:14:42,300
looking<font color="#CCCCCC"> at lambda how can we abuse it</font>

314
00:14:40,950 --> 00:14:44,160
how can<font color="#E5E5E5"> we attack it how can we make it</font>

315
00:14:42,300 --> 00:14:46,949
<font color="#CCCCCC">do things that it's</font><font color="#E5E5E5"> not intended</font><font color="#CCCCCC"> to do</font>

316
00:14:44,160 --> 00:14:49,290
so<font color="#E5E5E5"> first and foremost we want to find</font>

317
00:14:46,950 --> 00:14:50,880
out where credentials are<font color="#CCCCCC"> stored so we</font>

318
00:14:49,290 --> 00:14:52,500
can find credentials then we can start

319
00:14:50,880 --> 00:14:56,040
poking around and<font color="#CCCCCC"> seeing what we</font><font color="#E5E5E5"> can do</font>

320
00:14:52,500 --> 00:14:58,800
with those credentials<font color="#CCCCCC"> how can we abuse</font>

321
00:14:56,040 --> 00:15:01,920
them what's the operating system<font color="#E5E5E5"> that</font>

322
00:14:58,800 --> 00:15:04,170
lambda<font color="#E5E5E5"> is running on how is the network</font>

323
00:15:01,920 --> 00:15:06,569
configured because<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> lambdas</font>

324
00:15:04,170 --> 00:15:09,120
communicating with other resources<font color="#E5E5E5"> some</font>

325
00:15:06,570 --> 00:15:11,430
internal<font color="#E5E5E5"> to your own environment some</font>

326
00:15:09,120 --> 00:15:15,150
<font color="#E5E5E5">perhaps you know on a public internet</font>

327
00:15:11,430 --> 00:15:18,680
<font color="#E5E5E5">space and maybe in a another another</font>

328
00:15:15,150 --> 00:15:21,390
customer another<font color="#E5E5E5"> tenants environment</font>

329
00:15:18,680 --> 00:15:23,760
<font color="#CCCCCC">what are the file system permissions so</font>

330
00:15:21,390 --> 00:15:26,970
again can we can we read write certain

331
00:15:23,760 --> 00:15:29,850
directories and files<font color="#E5E5E5"> which processes</font>

332
00:15:26,970 --> 00:15:32,220
are<font color="#E5E5E5"> running this is going to be a</font>

333
00:15:29,850 --> 00:15:34,380
container<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> running underneath</font>

334
00:15:32,220 --> 00:15:36,630
lambda so you know containers have very

335
00:15:34,380 --> 00:15:37,830
minimal processes but<font color="#E5E5E5"> I want to find out</font>

336
00:15:36,630 --> 00:15:40,490
<font color="#E5E5E5">what's running and how we might be able</font>

337
00:15:37,830 --> 00:15:40,490
to<font color="#E5E5E5"> abuse some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> those</font>

338
00:15:40,500 --> 00:15:46,440
most importantly<font color="#E5E5E5"> from how we can do</font>

339
00:15:44,400 --> 00:15:48,689
<font color="#E5E5E5">things is how our code is bootstrapped</font>

340
00:15:46,440 --> 00:15:51,780
<font color="#E5E5E5">within</font><font color="#CCCCCC"> lambda how is lambda taking our</font>

341
00:15:48,690 --> 00:15:55,730
code after it's been invoked<font color="#E5E5E5"> and doing</font>

342
00:15:51,780 --> 00:15:58,230
<font color="#E5E5E5">what it does with it and then with</font><font color="#CCCCCC"> that</font>

343
00:15:55,730 --> 00:16:00,210
<font color="#E5E5E5">how you know what data can</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> control</font>

344
00:15:58,230 --> 00:16:04,020
what sort<font color="#E5E5E5"> of like environment variable</font>

345
00:16:00,210 --> 00:16:05,730
is<font color="#E5E5E5"> what sort of bootstrap variables what</font>

346
00:16:04,020 --> 00:16:07,079
sort of<font color="#E5E5E5"> information</font><font color="#CCCCCC"> can we control</font><font color="#E5E5E5"> and</font>

347
00:16:05,730 --> 00:16:15,210
how can<font color="#E5E5E5"> we maybe change the flow of</font>

348
00:16:07,080 --> 00:16:18,630
<font color="#E5E5E5">execution during runtime so quick kind</font>

349
00:16:15,210 --> 00:16:20,430
of<font color="#CCCCCC"> screenshot off of lambda FAQ kind</font><font color="#E5E5E5"> of</font>

350
00:16:18,630 --> 00:16:24,240
caught my attention as I'm<font color="#CCCCCC"> still in</font><font color="#E5E5E5"> the</font>

351
00:16:20,430 --> 00:16:27,120
research<font color="#E5E5E5"> this lambda support environment</font>

352
00:16:24,240 --> 00:16:28,800
variables yes you can easily<font color="#E5E5E5"> create and</font>

353
00:16:27,120 --> 00:16:32,370
modify environment variables so

354
00:16:28,800 --> 00:16:36,109
initially I<font color="#E5E5E5"> started off with you know</font>

355
00:16:32,370 --> 00:16:38,640
<font color="#CCCCCC">can I store credentials</font><font color="#E5E5E5"> and those</font>

356
00:16:36,110 --> 00:16:42,420
evidently you can it's pretty common

357
00:16:38,640 --> 00:16:44,100
<font color="#E5E5E5">actually what are</font><font color="#CCCCCC"> some of the other</font>

358
00:16:42,420 --> 00:16:45,930
environment variables that we might be

359
00:16:44,100 --> 00:16:48,480
<font color="#E5E5E5">able to</font><font color="#CCCCCC"> manipulate and do an intended</font>

360
00:16:45,930 --> 00:16:50,250
thing so further down I'll talk a<font color="#CCCCCC"> little</font>

361
00:16:48,480 --> 00:16:54,060
bit<font color="#CCCCCC"> more about how we</font><font color="#E5E5E5"> can change the</font>

362
00:16:50,250 --> 00:16:56,960
Python path variable<font color="#E5E5E5"> and do some</font>

363
00:16:54,060 --> 00:16:56,959
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> stuff with that</font>

364
00:16:57,350 --> 00:17:01,770
what<font color="#CCCCCC"> restrictions apply</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> AWS lambda</font>

365
00:17:00,330 --> 00:17:04,140
function code so I found this really

366
00:17:01,770 --> 00:17:06,599
interesting<font color="#E5E5E5"> lambda attempts to impose as</font>

367
00:17:04,140 --> 00:17:08,460
few restrictions<font color="#E5E5E5"> as possible on normal</font>

368
00:17:06,599 --> 00:17:11,250
language<font color="#E5E5E5"> and operating system activities</font>

369
00:17:08,460 --> 00:17:13,890
so<font color="#E5E5E5"> that to me sounds very opportunistic</font>

370
00:17:11,250 --> 00:17:16,349
<font color="#E5E5E5">if it's imposing as little as possible</font>

371
00:17:13,890 --> 00:17:18,570
<font color="#CCCCCC">it's giving giving</font><font color="#E5E5E5"> you a lot of freedom</font>

372
00:17:16,349 --> 00:17:20,490
<font color="#CCCCCC">and flexibility to</font><font color="#E5E5E5"> do almost anything</font>

373
00:17:18,569 --> 00:17:23,429
you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> with within certain parameters</font>

374
00:17:20,490 --> 00:17:25,890
<font color="#E5E5E5">anyway so there are a few activities</font>

375
00:17:23,430 --> 00:17:28,320
<font color="#CCCCCC">that are disabled inbound network</font>

376
00:17:25,890 --> 00:17:31,740
connections are blocked by AWS lambda

377
00:17:28,319 --> 00:17:33,540
for outbound connections only TCP socket

378
00:17:31,740 --> 00:17:36,810
tcp/ip sockets are possible<font color="#E5E5E5"> for</font>

379
00:17:33,540 --> 00:17:39,300
supported and P trace debugging system

380
00:17:36,810 --> 00:17:41,370
<font color="#E5E5E5">calls are</font><font color="#CCCCCC"> blocked</font><font color="#E5E5E5"> TCP port 25</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> also</font>

381
00:17:39,300 --> 00:17:43,320
blocked<font color="#E5E5E5"> as an anti-spam measure again</font>

382
00:17:41,370 --> 00:17:46,800
kudos to AWS they've taken a<font color="#E5E5E5"> lot of</font>

383
00:17:43,320 --> 00:17:49,379
<font color="#E5E5E5">proactive measures to prevent abuse but</font>

384
00:17:46,800 --> 00:17:51,090
we can<font color="#E5E5E5"> kind of you know meander our way</font>

385
00:17:49,380 --> 00:17:55,830
through some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these parameters</font><font color="#CCCCCC"> and</font>

386
00:17:51,090 --> 00:17:58,379
and find some<font color="#E5E5E5"> interesting things how can</font>

387
00:17:55,830 --> 00:18:00,509
my<font color="#E5E5E5"> application trigger</font><font color="#CCCCCC"> and AWS lambda</font>

388
00:17:58,379 --> 00:18:02,309
function directly<font color="#E5E5E5"> so you can invoke a</font>

389
00:18:00,509 --> 00:18:06,120
lambda<font color="#CCCCCC"> function using a custom event</font>

390
00:18:02,309 --> 00:18:09,210
through AWS lambdas<font color="#E5E5E5"> invoke API only</font><font color="#CCCCCC"> the</font>

391
00:18:06,120 --> 00:18:10,590
functions<font color="#E5E5E5"> owner or another AWS account</font>

392
00:18:09,210 --> 00:18:11,940
that the owner has granted permission

393
00:18:10,590 --> 00:18:14,580
can invoke<font color="#E5E5E5"> that</font><font color="#CCCCCC"> function so again</font>

394
00:18:11,940 --> 00:18:15,960
<font color="#E5E5E5">getting back</font><font color="#CCCCCC"> to that disclaimer</font><font color="#E5E5E5"> these</font>

395
00:18:14,580 --> 00:18:20,129
permissions have<font color="#E5E5E5"> already been</font><font color="#CCCCCC"> granted</font>

396
00:18:15,960 --> 00:18:22,649
however there's a again a variety<font color="#CCCCCC"> of</font>

397
00:18:20,129 --> 00:18:24,748
things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can do within</font><font color="#CCCCCC"> that and</font>

398
00:18:22,649 --> 00:18:26,428
then how do I invoke it over<font color="#E5E5E5"> HTTP so</font>

399
00:18:24,749 --> 00:18:28,259
this will become a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more</font>

400
00:18:26,429 --> 00:18:30,749
<font color="#E5E5E5">apparent here in a moment</font><font color="#CCCCCC"> but you</font><font color="#E5E5E5"> can</font>

401
00:18:28,259 --> 00:18:34,049
invoke those through a restful api using

402
00:18:30,749 --> 00:18:35,970
<font color="#E5E5E5">Amazon API gateway giving you the end</font>

403
00:18:34,049 --> 00:18:39,899
point<font color="#E5E5E5"> for your function I'm gonna spawn</font>

404
00:18:35,970 --> 00:18:42,269
<font color="#E5E5E5">the rest calls get put post</font><font color="#CCCCCC"> so we're</font>

405
00:18:39,899 --> 00:18:44,840
<font color="#E5E5E5">gonna use AWS API gateway to be able to</font>

406
00:18:42,269 --> 00:18:46,710
<font color="#CCCCCC">retrieve some credentials</font><font color="#E5E5E5"> for the</font>

407
00:18:44,840 --> 00:18:51,029
persistent remote access that<font color="#E5E5E5"> I</font>

408
00:18:46,710 --> 00:18:54,919
mentioned a<font color="#CCCCCC"> few minutes</font><font color="#E5E5E5"> ago so the</font>

409
00:18:51,029 --> 00:18:58,080
active reconnaissance<font color="#CCCCCC"> I started off just</font>

410
00:18:54,919 --> 00:18:59,639
<font color="#E5E5E5">tinkering around with some code</font><font color="#CCCCCC"> that I</font>

411
00:18:58,080 --> 00:19:01,499
think the first attempt I<font color="#CCCCCC"> made was like</font>

412
00:18:59,639 --> 00:19:03,178
let's just get<font color="#E5E5E5"> an understanding of what</font>

413
00:19:01,499 --> 00:19:06,419
the underlying<font color="#CCCCCC"> file</font><font color="#E5E5E5"> system looked like</font>

414
00:19:03,179 --> 00:19:08,429
<font color="#E5E5E5">well what's on the file system so if</font>

415
00:19:06,419 --> 00:19:10,409
you're hopefully<font color="#CCCCCC"> familiar with Python if</font>

416
00:19:08,429 --> 00:19:12,990
you're not we're just<font color="#E5E5E5"> importing a Python</font>

417
00:19:10,409 --> 00:19:16,590
package for you know OS system<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> and</font>

418
00:19:12,990 --> 00:19:19,049
I'm just passing the just just<font color="#E5E5E5"> a local</font>

419
00:19:16,590 --> 00:19:21,178
<font color="#E5E5E5">command LS to list the files</font><font color="#CCCCCC"> so this</font>

420
00:19:19,049 --> 00:19:21,809
actually worked originally and<font color="#E5E5E5"> then it</font>

421
00:19:21,179 --> 00:19:24,840
stopped

422
00:19:21,809 --> 00:19:27,299
I haven't<font color="#E5E5E5"> attempted it again but um I I</font>

423
00:19:24,840 --> 00:19:29,610
suspect<font color="#E5E5E5"> either</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> lamda caught on to</font>

424
00:19:27,299 --> 00:19:31,649
the<font color="#CCCCCC"> idea that people</font><font color="#E5E5E5"> might be poking</font>

425
00:19:29,610 --> 00:19:34,678
around and didn't want them doing<font color="#E5E5E5"> it</font>

426
00:19:31,649 --> 00:19:37,639
<font color="#E5E5E5">anymore</font><font color="#CCCCCC"> or I don't know</font><font color="#E5E5E5"> the reasoning</font>

427
00:19:34,679 --> 00:19:40,799
<font color="#E5E5E5">but it's not worked</font><font color="#CCCCCC"> for me recently</font><font color="#E5E5E5"> so</font>

428
00:19:37,639 --> 00:19:42,840
this is a this<font color="#E5E5E5"> is the next</font><font color="#CCCCCC"> thing I</font><font color="#E5E5E5"> did</font>

429
00:19:40,799 --> 00:19:45,360
so basically what right here what I'm

430
00:19:42,840 --> 00:19:48,779
<font color="#CCCCCC">doing is I'm printing</font><font color="#E5E5E5"> out the the</font>

431
00:19:45,360 --> 00:19:50,549
environment variables<font color="#E5E5E5"> the Atlanta stores</font>

432
00:19:48,779 --> 00:19:54,869
a lot<font color="#CCCCCC"> of interesting</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> and the</font>

433
00:19:50,549 --> 00:19:59,580
environment variables<font color="#E5E5E5"> um as you can see</font>

434
00:19:54,869 --> 00:20:02,510
hopefully<font color="#E5E5E5"> yeah it's got a you know the</font>

435
00:19:59,580 --> 00:20:05,960
LD library path it's got the normal

436
00:20:02,510 --> 00:20:08,150
path<font color="#E5E5E5"> language you know time zone</font>

437
00:20:05,960 --> 00:20:11,030
etcetera etcetera<font color="#CCCCCC"> what I found really</font>

438
00:20:08,150 --> 00:20:13,100
<font color="#CCCCCC">interesting though is it's storing</font><font color="#E5E5E5"> AWS</font>

439
00:20:11,030 --> 00:20:16,340
<font color="#CCCCCC">session token' and the environment</font>

440
00:20:13,100 --> 00:20:19,820
variables so the session<font color="#E5E5E5"> tokens are part</font>

441
00:20:16,340 --> 00:20:23,240
of the<font color="#E5E5E5"> the IM infrastructure that AWS</font>

442
00:20:19,820 --> 00:20:25,730
uses to authenticate<font color="#E5E5E5"> users and resources</font>

443
00:20:23,240 --> 00:20:28,070
so they're storing it right there<font color="#CCCCCC"> clear</font>

444
00:20:25,730 --> 00:20:30,650
text in environment variables<font color="#E5E5E5"> so</font>

445
00:20:28,070 --> 00:20:32,980
initially<font color="#E5E5E5"> that</font><font color="#CCCCCC"> seems interesting maybe</font>

446
00:20:30,650 --> 00:20:35,330
maybe innocuous maybe not a big deal but

447
00:20:32,980 --> 00:20:39,260
as we'll see here momentarily<font color="#E5E5E5"> we can do</font>

448
00:20:35,330 --> 00:20:42,470
some really<font color="#E5E5E5"> interesting stuff with it so</font>

449
00:20:39,260 --> 00:20:46,690
these<font color="#E5E5E5"> four that you see here AWS access</font>

450
00:20:42,470 --> 00:20:49,730
key ID<font color="#E5E5E5"> give you a secret access key</font>

451
00:20:46,690 --> 00:20:53,770
<font color="#E5E5E5">basically a username and a password</font><font color="#CCCCCC"> for</font>

452
00:20:49,730 --> 00:20:57,410
either a user or you can use it<font color="#CCCCCC"> just</font><font color="#E5E5E5"> for</font>

453
00:20:53,770 --> 00:21:01,310
API calls without web console<font color="#CCCCCC"> access so</font>

454
00:20:57,410 --> 00:21:04,520
if I wanted to use AWS<font color="#CCCCCC"> CLI or I wanted</font>

455
00:21:01,310 --> 00:21:08,450
to you<font color="#CCCCCC"> know write you know write up a</font>

456
00:21:04,520 --> 00:21:12,170
Python script<font color="#E5E5E5"> using those credentials</font><font color="#CCCCCC"> as</font>

457
00:21:08,450 --> 00:21:14,690
part of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> boto</font><font color="#E5E5E5"> SDK can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> those</font>

458
00:21:12,170 --> 00:21:16,730
credentials<font color="#E5E5E5"> to authenticate those are</font>

459
00:21:14,690 --> 00:21:18,440
static they don't<font color="#E5E5E5"> change unless you go</font>

460
00:21:16,730 --> 00:21:21,770
in and<font color="#E5E5E5"> delete and create new</font><font color="#CCCCCC"> ones and</font>

461
00:21:18,440 --> 00:21:25,160
then we have this AWS security token an

462
00:21:21,770 --> 00:21:26,629
AWS session token so those are again the

463
00:21:25,160 --> 00:21:28,790
tokens that<font color="#E5E5E5"> we saw on the last</font><font color="#CCCCCC"> one so</font>

464
00:21:26,630 --> 00:21:33,170
and I'm just<font color="#CCCCCC"> returning those credentials</font>

465
00:21:28,790 --> 00:21:35,780
<font color="#E5E5E5">and we've got as you saw in the previous</font>

466
00:21:33,170 --> 00:21:38,240
<font color="#E5E5E5">room now we've got not</font><font color="#CCCCCC"> just the security</font>

467
00:21:35,780 --> 00:21:39,440
<font color="#CCCCCC">token but also the session token so</font>

468
00:21:38,240 --> 00:21:42,710
there's some<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> things about</font>

469
00:21:39,440 --> 00:21:44,300
the the tokens they have a unless<font color="#CCCCCC"> a</font>

470
00:21:42,710 --> 00:21:47,660
Tobias has changed this recently they

471
00:21:44,300 --> 00:21:49,639
have a 60 minute<font color="#CCCCCC"> lifetime so it's going</font>

472
00:21:47,660 --> 00:21:50,870
<font color="#E5E5E5">to put some limitation on what</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> do</font>

473
00:21:49,640 --> 00:21:52,460
with them<font color="#E5E5E5"> but there's a little</font>

474
00:21:50,870 --> 00:21:55,070
<font color="#E5E5E5">workaround for that on how we can</font>

475
00:21:52,460 --> 00:22:01,400
refresh those<font color="#E5E5E5"> and find out that the new</font>

476
00:21:55,070 --> 00:22:03,649
token<font color="#E5E5E5"> and</font><font color="#CCCCCC"> continue our</font><font color="#E5E5E5"> attack so</font><font color="#CCCCCC"> there's</font>

477
00:22:01,400 --> 00:22:05,690
a little of the<font color="#CCCCCC"> limits some</font><font color="#E5E5E5"> of the</font>

478
00:22:03,650 --> 00:22:08,120
limitations are<font color="#CCCCCC"> you know this</font><font color="#E5E5E5"> kind of</font>

479
00:22:05,690 --> 00:22:11,950
<font color="#E5E5E5">spray-and-pray</font><font color="#CCCCCC"> approach we're kind of</font>

480
00:22:08,120 --> 00:22:14,899
poking around seeing<font color="#E5E5E5"> what we can find</font>

481
00:22:11,950 --> 00:22:15,680
<font color="#CCCCCC">iterative API calls</font><font color="#E5E5E5"> are pretty</font>

482
00:22:14,900 --> 00:22:17,930
inefficient

483
00:22:15,680 --> 00:22:19,400
it's kind of you know<font color="#E5E5E5"> not</font><font color="#CCCCCC"> quite</font>

484
00:22:17,930 --> 00:22:22,130
brute-forcing but you're<font color="#E5E5E5"> really trying</font>

485
00:22:19,400 --> 00:22:24,140
to find<font color="#E5E5E5"> out in a very</font><font color="#CCCCCC"> inefficient way</font>

486
00:22:22,130 --> 00:22:27,680
what what can be done so some of the

487
00:22:24,140 --> 00:22:30,620
workarounds<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> thinking to</font><font color="#CCCCCC"> myself I</font>

488
00:22:27,680 --> 00:22:33,740
<font color="#E5E5E5">want to get shell access to this lambda</font>

489
00:22:30,620 --> 00:22:35,629
container right<font color="#CCCCCC"> I want to go in and type</font>

490
00:22:33,740 --> 00:22:37,910
commands<font color="#E5E5E5"> and do a little bit</font><font color="#CCCCCC"> more than</font>

491
00:22:35,630 --> 00:22:39,680
just<font color="#E5E5E5"> writing a lambda function</font><font color="#CCCCCC"> that</font>

492
00:22:37,910 --> 00:22:41,350
pulls back all this data<font color="#E5E5E5"> I want to go in</font>

493
00:22:39,680 --> 00:22:46,790
and hands on the keyboard<font color="#CCCCCC"> to it so</font>

494
00:22:41,350 --> 00:22:48,889
<font color="#E5E5E5">reverse shell for the win so this is</font>

495
00:22:46,790 --> 00:22:51,879
some reverse shell code this is just an

496
00:22:48,890 --> 00:22:55,610
example<font color="#E5E5E5"> of what I started off with</font>

497
00:22:51,880 --> 00:22:59,300
<font color="#E5E5E5">basically we can put a host name or an</font>

498
00:22:55,610 --> 00:23:01,969
IP address<font color="#E5E5E5"> into this s</font><font color="#CCCCCC"> dot connect</font><font color="#E5E5E5"> call</font>

499
00:22:59,300 --> 00:23:03,649
<font color="#E5E5E5">and specify a port and the lambda</font>

500
00:23:01,970 --> 00:23:08,300
<font color="#E5E5E5">function remember it can make outbound</font>

501
00:23:03,650 --> 00:23:12,260
tcp/ip connections<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can just set up a</font>

502
00:23:08,300 --> 00:23:14,300
netcat listener and have<font color="#CCCCCC"> this call back</font>

503
00:23:12,260 --> 00:23:15,860
to us and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> excellent we can</font>

504
00:23:14,300 --> 00:23:20,270
drop into<font color="#CCCCCC"> a shell on the lambda</font>

505
00:23:15,860 --> 00:23:22,760
container so<font color="#E5E5E5"> I've got a video of this</font><font color="#CCCCCC"> I</font>

506
00:23:20,270 --> 00:23:25,790
don't know if you pervert a live demo or

507
00:23:22,760 --> 00:23:27,410
a video<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> can do a live demo but if</font>

508
00:23:25,790 --> 00:23:34,610
it fails<font color="#E5E5E5"> then we can just go</font><font color="#CCCCCC"> to the</font>

509
00:23:27,410 --> 00:23:38,960
video maybe let me sit here<font color="#E5E5E5"> yeah back</font>

510
00:23:34,610 --> 00:23:43,040
out of this momentarily so basically

511
00:23:38,960 --> 00:23:44,809
what we're gonna<font color="#E5E5E5"> do there's my video so</font>

512
00:23:43,040 --> 00:23:48,010
here's the here's<font color="#CCCCCC"> the code right here</font>

513
00:23:44,809 --> 00:23:53,928
I've already<font color="#E5E5E5"> got an ec2 instance running</font>

514
00:23:48,010 --> 00:24:00,800
<font color="#CCCCCC">the public IP is</font><font color="#E5E5E5"> 50 to</font><font color="#CCCCCC"> 90 123 83</font>

515
00:23:53,929 --> 00:24:03,860
listening on TCP port 1 3 3 7<font color="#E5E5E5"> so this is</font>

516
00:24:00,800 --> 00:24:05,480
a this<font color="#E5E5E5"> is the lint</font><font color="#CCCCCC"> in the linux ec2</font>

517
00:24:03,860 --> 00:24:07,280
instance that<font color="#E5E5E5"> I'm going to connect back</font>

518
00:24:05,480 --> 00:24:11,390
to<font color="#E5E5E5"> I'm going to set up</font><font color="#CCCCCC"> a net cat</font>

519
00:24:07,280 --> 00:24:14,149
listener on that same port<font color="#E5E5E5"> go back over</font>

520
00:24:11,390 --> 00:24:16,160
here<font color="#E5E5E5"> and we're</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> test this now</font>

521
00:24:14,150 --> 00:24:19,910
<font color="#E5E5E5">one other thing I should notice is we've</font>

522
00:24:16,160 --> 00:24:22,070
got a<font color="#CCCCCC"> 5-minute limitation on ant lambda</font>

523
00:24:19,910 --> 00:24:24,980
execution it's just something<font color="#E5E5E5"> AWS and</font>

524
00:24:22,070 --> 00:24:26,450
poses so all the poking around what

525
00:24:24,980 --> 00:24:28,160
about<font color="#E5E5E5"> the do we've got</font><font color="#CCCCCC"> to do and</font><font color="#E5E5E5"> under</font>

526
00:24:26,450 --> 00:24:30,350
well<font color="#CCCCCC"> 5</font>

527
00:24:28,160 --> 00:24:33,230
yeah<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> minutes and 40 seconds probably</font>

528
00:24:30,350 --> 00:24:35,689
<font color="#E5E5E5">now so we're here in a shell</font><font color="#CCCCCC"> on the</font>

529
00:24:33,230 --> 00:24:42,700
lambda container<font color="#E5E5E5"> and we see that if we</font>

530
00:24:35,690 --> 00:24:46,070
<font color="#E5E5E5">do lambda function</font><font color="#CCCCCC"> py you're gonna see</font>

531
00:24:42,700 --> 00:24:48,650
the<font color="#CCCCCC"> fum the function that we saw here</font>

532
00:24:46,070 --> 00:24:50,720
and this is what's<font color="#E5E5E5"> being</font><font color="#CCCCCC"> bootstrapped</font>

533
00:24:48,650 --> 00:24:53,090
within lambda<font color="#E5E5E5"> right so now I'm back at</font>

534
00:24:50,720 --> 00:24:55,760
the<font color="#E5E5E5"> shell prompt</font><font color="#CCCCCC"> so first thing that we</font>

535
00:24:53,090 --> 00:24:59,240
would<font color="#CCCCCC"> want to do maybe is</font><font color="#E5E5E5"> look at Etsy</font>

536
00:24:55,760 --> 00:25:03,830
password you can see there's a huge

537
00:24:59,240 --> 00:25:06,740
number<font color="#E5E5E5"> of users</font><font color="#CCCCCC"> and here most notably is</font>

538
00:25:03,830 --> 00:25:09,830
that these users<font color="#E5E5E5"> are one called SB</font><font color="#CCCCCC"> x</font>

539
00:25:06,740 --> 00:25:14,750
<font color="#E5E5E5">underscore user followed by a four four</font>

540
00:25:09,830 --> 00:25:18,620
digit<font color="#E5E5E5"> number</font><font color="#CCCCCC"> presumably</font><font color="#E5E5E5"> SB</font><font color="#CCCCCC"> X stands for</font>

541
00:25:14,750 --> 00:25:21,730
<font color="#E5E5E5">sandbox</font><font color="#CCCCCC"> but all of their login</font><font color="#E5E5E5"> shells</font>

542
00:25:18,620 --> 00:25:24,320
are set to s been no login so clearly

543
00:25:21,730 --> 00:25:28,360
AWS is not expecting us<font color="#E5E5E5"> to have a shell</font>

544
00:25:24,320 --> 00:25:31,820
<font color="#CCCCCC">on</font><font color="#E5E5E5"> this right now what it did find</font>

545
00:25:28,360 --> 00:25:38,330
interesting is everyone's got a spin no

546
00:25:31,820 --> 00:25:43,490
log and except for<font color="#E5E5E5"> root and where's the</font>

547
00:25:38,330 --> 00:25:45,770
<font color="#E5E5E5">other guy ec2 user right hope you guys</font>

548
00:25:43,490 --> 00:25:47,480
<font color="#E5E5E5">can see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually let me let</font><font color="#CCCCCC"> me blow</font>

549
00:25:45,770 --> 00:25:50,420
<font color="#CCCCCC">this up a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> I didn't realize</font><font color="#E5E5E5"> it</font>

550
00:25:47,480 --> 00:25:53,420
was so small so you see<font color="#E5E5E5"> two user right</font>

551
00:25:50,420 --> 00:25:55,010
here with bin bash and we've got root up

552
00:25:53,420 --> 00:25:57,500
here with bin bash everything else has<font color="#CCCCCC"> a</font>

553
00:25:55,010 --> 00:26:02,150
<font color="#CCCCCC">spin no login so there again AWS is</font>

554
00:25:57,500 --> 00:26:04,880
being very<font color="#E5E5E5"> diligent on how they lock</font>

555
00:26:02,150 --> 00:26:06,800
<font color="#CCCCCC">down their system so look at the root</font>

556
00:26:04,880 --> 00:26:10,990
filesystem you can see that there's<font color="#E5E5E5"> only</font>

557
00:26:06,800 --> 00:26:13,430
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> be one place that</font><font color="#E5E5E5"> we can write</font>

558
00:26:10,990 --> 00:26:17,180
that's<font color="#E5E5E5"> in the slash temp directory very</font>

559
00:26:13,430 --> 00:26:20,660
common on Linux systems for world

560
00:26:17,180 --> 00:26:24,500
writable directory let's look at maybe

561
00:26:20,660 --> 00:26:26,500
some of the I got to do this the long

562
00:26:24,500 --> 00:26:30,230
way<font color="#E5E5E5"> because I don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> it in my path</font>

563
00:26:26,500 --> 00:26:32,780
config<font color="#E5E5E5"> a so here's some of the</font>

564
00:26:30,230 --> 00:26:35,510
<font color="#E5E5E5">interfaces on the lambda container one's</font>

565
00:26:32,780 --> 00:26:38,540
<font color="#E5E5E5">called go I'll make that a</font><font color="#CCCCCC"> little bit</font>

566
00:26:35,510 --> 00:26:42,230
<font color="#E5E5E5">bigger again is that better</font>

567
00:26:38,540 --> 00:26:44,149
perfect<font color="#CCCCCC"> so we've got three interfaces</font>

568
00:26:42,230 --> 00:26:45,460
we've got the loopback interface at<font color="#E5E5E5"> one</font>

569
00:26:44,150 --> 00:26:47,900
<font color="#CCCCCC">27001</font>

570
00:26:45,460 --> 00:26:50,960
we've<font color="#E5E5E5"> got one called V internal</font>

571
00:26:47,900 --> 00:26:55,460
underscore<font color="#E5E5E5"> three that's at one six nine</font>

572
00:26:50,960 --> 00:26:58,610
<font color="#CCCCCC">to five</font><font color="#E5E5E5"> for 76.5 and we've got another</font>

573
00:26:55,460 --> 00:27:05,030
<font color="#CCCCCC">one called V target underscore</font><font color="#E5E5E5"> two at</font>

574
00:26:58,610 --> 00:27:08,090
169<font color="#CCCCCC"> to 54 79.1 I wrote a small port</font>

575
00:27:05,030 --> 00:27:10,610
scanner<font color="#E5E5E5"> in Python</font><font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to go</font><font color="#CCCCCC"> through</font>

576
00:27:08,090 --> 00:27:14,030
and see what it might be able<font color="#CCCCCC"> to access</font>

577
00:27:10,610 --> 00:27:15,889
on ports<font color="#CCCCCC"> unfortunately wasn't able to</font>

578
00:27:14,030 --> 00:27:18,260
find much<font color="#E5E5E5"> so AWS is</font><font color="#CCCCCC"> maybe doing</font>

579
00:27:15,890 --> 00:27:20,060
<font color="#E5E5E5">something</font><font color="#CCCCCC"> there to prevent any sort of</font>

580
00:27:18,260 --> 00:27:22,460
response or<font color="#E5E5E5"> any</font><font color="#CCCCCC"> sort of network</font>

581
00:27:20,060 --> 00:27:24,830
<font color="#E5E5E5">connectivity through those I haven't</font>

582
00:27:22,460 --> 00:27:28,070
quite figured that<font color="#CCCCCC"> part out but what I</font>

583
00:27:24,830 --> 00:27:29,899
suspect these are being<font color="#E5E5E5"> used for is AWS</font>

584
00:27:28,070 --> 00:27:31,639
has<font color="#E5E5E5"> a feature called x-ray</font><font color="#CCCCCC"> it's kind of</font>

585
00:27:29,900 --> 00:27:34,820
like a<font color="#E5E5E5"> lambda to bugger it'll tell you</font>

586
00:27:31,640 --> 00:27:36,230
how<font color="#CCCCCC"> well it's running</font><font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> ways to</font>

587
00:27:34,820 --> 00:27:38,929
<font color="#E5E5E5">it basically</font><font color="#CCCCCC"> improve your</font><font color="#E5E5E5"> lambda</font>

588
00:27:36,230 --> 00:27:42,680
function so I<font color="#E5E5E5"> suspect it's being used</font>

589
00:27:38,930 --> 00:27:44,960
<font color="#CCCCCC">for</font><font color="#E5E5E5"> that so let's just quickly dump the</font>

590
00:27:42,680 --> 00:27:47,240
environment variables this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> kind of</font>

591
00:27:44,960 --> 00:27:49,880
what we we saw earlier on those

592
00:27:47,240 --> 00:27:54,650
screenshots<font color="#CCCCCC"> you can see here</font><font color="#E5E5E5"> that we've</font>

593
00:27:49,880 --> 00:27:58,190
got<font color="#CCCCCC"> this you know</font><font color="#E5E5E5"> access key</font><font color="#CCCCCC"> we've got</font>

594
00:27:54,650 --> 00:28:00,890
the secret access key<font color="#E5E5E5"> we've got the</font>

595
00:27:58,190 --> 00:28:03,170
security<font color="#E5E5E5"> token and the session token now</font>

596
00:28:00,890 --> 00:28:05,990
<font color="#CCCCCC">strangely I noticed the security token</font>

597
00:28:03,170 --> 00:28:10,670
and the session token are identical<font color="#E5E5E5"> this</font>

598
00:28:05,990 --> 00:28:11,660
seems to keep getting<font color="#E5E5E5"> smaller</font><font color="#CCCCCC"> I'm not</font>

599
00:28:10,670 --> 00:28:15,110
sure why that is

600
00:28:11,660 --> 00:28:18,080
maybe AWS is intending on phasing out

601
00:28:15,110 --> 00:28:24,909
one<font color="#CCCCCC"> or the</font><font color="#E5E5E5"> other but yeah I just</font><font color="#CCCCCC"> noticed</font>

602
00:28:18,080 --> 00:28:26,990
that so look at the processes oops<font color="#E5E5E5"> yes</font>

603
00:28:24,910 --> 00:28:31,190
<font color="#E5E5E5">so we've got basically three pop</font>

604
00:28:26,990 --> 00:28:35,260
processes we've got our bootstrap<font color="#E5E5E5"> py and</font>

605
00:28:31,190 --> 00:28:38,300
that's a it's a lambda<font color="#CCCCCC"> I'm sorry an AWS</font>

606
00:28:35,260 --> 00:28:40,760
bootstrap function<font color="#E5E5E5"> we'll take a look at</font>

607
00:28:38,300 --> 00:28:48,460
that<font color="#CCCCCC"> here in a minute but</font><font color="#E5E5E5"> that's running</font>

608
00:28:40,760 --> 00:28:51,970
<font color="#E5E5E5">and it's in var</font><font color="#CCCCCC"> run time AWS lambda Oh</font>

609
00:28:48,460 --> 00:28:51,970
AWS lambda

610
00:28:53,680 --> 00:28:59,090
and now we see<font color="#E5E5E5"> a</font><font color="#CCCCCC"> nursery they got</font>

611
00:28:55,870 --> 00:29:02,000
bootstrap that py is what bootstraps

612
00:28:59,090 --> 00:29:05,149
your code<font color="#E5E5E5"> but there's also this</font><font color="#CCCCCC"> this</font>

613
00:29:02,000 --> 00:29:07,460
<font color="#CCCCCC">init py we've also got a shared object</font>

614
00:29:05,150 --> 00:29:09,290
<font color="#CCCCCC">file called run time</font><font color="#E5E5E5"> dot s</font><font color="#CCCCCC"> oh and that</font>

615
00:29:07,460 --> 00:29:11,270
<font color="#E5E5E5">really</font><font color="#CCCCCC"> interests me is now I want to</font>

616
00:29:09,290 --> 00:29:12,800
start tinkering around and see what we

617
00:29:11,270 --> 00:29:14,030
<font color="#CCCCCC">can do with the</font><font color="#E5E5E5"> run time we'll get to</font>

618
00:29:12,800 --> 00:29:17,060
that<font color="#E5E5E5"> here toward the end a little</font><font color="#CCCCCC"> bit</font>

619
00:29:14,030 --> 00:29:19,899
but<font color="#CCCCCC"> um</font><font color="#E5E5E5"> and I just</font><font color="#CCCCCC"> dropped out</font><font color="#E5E5E5"> of my</font>

620
00:29:17,060 --> 00:29:24,800
<font color="#CCCCCC">shell there's perfect</font><font color="#E5E5E5"> timing</font><font color="#CCCCCC"> so lambda</font>

621
00:29:19,900 --> 00:29:28,820
<font color="#E5E5E5">wrapped up you can see here that it's</font>

622
00:29:24,800 --> 00:29:30,080
gonna say oh it failed<font color="#E5E5E5"> but it didn't we</font>

623
00:29:28,820 --> 00:29:32,270
had<font color="#CCCCCC"> way</font><font color="#E5E5E5"> the show we were able to go</font>

624
00:29:30,080 --> 00:29:34,610
around<font color="#E5E5E5"> poke around see what what was</font>

625
00:29:32,270 --> 00:29:38,570
<font color="#E5E5E5">running on</font><font color="#CCCCCC"> the container so I was able</font>

626
00:29:34,610 --> 00:29:40,610
<font color="#E5E5E5">to pull down</font><font color="#CCCCCC"> the bootstrap</font><font color="#E5E5E5"> that py and</font>

627
00:29:38,570 --> 00:29:43,100
<font color="#CCCCCC">runtime deso file so we'll take a look</font>

628
00:29:40,610 --> 00:29:45,129
at<font color="#E5E5E5"> those in a</font><font color="#CCCCCC"> minute so thank you down</font>

629
00:29:43,100 --> 00:29:52,760
though gods that went well

630
00:29:45,130 --> 00:29:55,040
<font color="#E5E5E5">all right let me get back to the present</font>

631
00:29:52,760 --> 00:29:58,910
<font color="#E5E5E5">so this this was what I just showed</font><font color="#CCCCCC"> you</font>

632
00:29:55,040 --> 00:30:01,760
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we'll just</font><font color="#E5E5E5"> get past this so what</font>

633
00:29:58,910 --> 00:30:03,830
we've discovered<font color="#E5E5E5"> here and I'll probably</font>

634
00:30:01,760 --> 00:30:06,740
just breeze over<font color="#E5E5E5"> this one too</font><font color="#CCCCCC"> because it</font>

635
00:30:03,830 --> 00:30:09,139
just<font color="#E5E5E5"> basically said</font><font color="#CCCCCC"> all this</font><font color="#E5E5E5"> there's a</font>

636
00:30:06,740 --> 00:30:10,970
containerized<font color="#CCCCCC"> Amazon Linux</font><font color="#E5E5E5"> I think what</font>

637
00:30:09,140 --> 00:30:12,860
I<font color="#E5E5E5"> forgot</font><font color="#CCCCCC"> to do was</font><font color="#E5E5E5"> like a you name a but</font>

638
00:30:10,970 --> 00:30:18,710
it'll tell you<font color="#CCCCCC"> that it's it's running an</font>

639
00:30:12,860 --> 00:30:20,659
Amazon Linux container<font color="#E5E5E5"> again I'm just</font>

640
00:30:18,710 --> 00:30:24,260
presuming<font color="#CCCCCC"> that it's running on an AWS</font>

641
00:30:20,660 --> 00:30:26,270
<font color="#CCCCCC">ECS ec2 cluster they're gonna probably</font>

642
00:30:24,260 --> 00:30:27,590
you know drink their own champagne<font color="#E5E5E5"> a</font>

643
00:30:26,270 --> 00:30:30,620
<font color="#CCCCCC">thrown dog they're gonna use</font><font color="#E5E5E5"> their own</font>

644
00:30:27,590 --> 00:30:32,959
technologies to run this and ECS just

645
00:30:30,620 --> 00:30:37,489
seems<font color="#E5E5E5"> the only logical</font><font color="#CCCCCC"> way to do</font><font color="#E5E5E5"> that</font>

646
00:30:32,960 --> 00:30:38,660
<font color="#E5E5E5">for AWS</font><font color="#CCCCCC"> I didn't look at the</font><font color="#E5E5E5"> crawl</font>

647
00:30:37,490 --> 00:30:42,950
version because it didn't do the you

648
00:30:38,660 --> 00:30:45,380
name a but I think it was<font color="#E5E5E5"> running</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> six</font>

649
00:30:42,950 --> 00:30:48,980
something<font color="#E5E5E5"> anyway we know the compilation</font>

650
00:30:45,380 --> 00:30:50,540
date<font color="#E5E5E5"> from</font><font color="#CCCCCC"> that we can get</font><font color="#E5E5E5"> an idea</font><font color="#CCCCCC"> if we</font>

651
00:30:48,980 --> 00:30:54,400
were<font color="#E5E5E5"> going through</font><font color="#CCCCCC"> this periodically</font>

652
00:30:50,540 --> 00:30:58,100
<font color="#E5E5E5">what the release cycle for these Amazon</font>

653
00:30:54,400 --> 00:30:59,870
<font color="#E5E5E5">Linux images are for lambda so you know</font>

654
00:30:58,100 --> 00:31:01,399
they<font color="#E5E5E5"> have their own release cycle to the</font>

655
00:30:59,870 --> 00:31:03,590
<font color="#E5E5E5">public but um</font>

656
00:31:01,400 --> 00:31:06,110
do a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> more research</font><font color="#E5E5E5"> and find</font>

657
00:31:03,590 --> 00:31:10,300
<font color="#E5E5E5">out if that deviates any for their own</font>

658
00:31:06,110 --> 00:31:12,260
internal processes<font color="#E5E5E5"> with</font><font color="#CCCCCC"> regard to lambda</font>

659
00:31:10,300 --> 00:31:13,970
so we saw the network<font color="#E5E5E5"> they're</font>

660
00:31:12,260 --> 00:31:19,010
dynamically<font color="#CCCCCC"> a sign from what I can tell</font>

661
00:31:13,970 --> 00:31:23,450
<font color="#E5E5E5">so one time it would have been 76.5</font><font color="#CCCCCC"> it</font>

662
00:31:19,010 --> 00:31:25,400
might be<font color="#CCCCCC"> 76.2 or ten then you know a</font>

663
00:31:23,450 --> 00:31:28,850
<font color="#E5E5E5">couple</font><font color="#CCCCCC"> times later it's on a</font><font color="#E5E5E5"> slash</font>

664
00:31:25,400 --> 00:31:31,700
<font color="#CCCCCC">twenty three</font><font color="#E5E5E5"> network and then the the</font>

665
00:31:28,850 --> 00:31:35,389
other<font color="#E5E5E5"> interface we looked at was a 79.1</font>

666
00:31:31,700 --> 00:31:38,540
and it set us<font color="#E5E5E5"> on a / 32 network default</font>

667
00:31:35,390 --> 00:31:41,060
gateway<font color="#CCCCCC"> is</font><font color="#E5E5E5"> 70 6.6 so the default</font><font color="#CCCCCC"> gateway</font>

668
00:31:38,540 --> 00:31:43,460
<font color="#E5E5E5">is going out the interface of</font><font color="#CCCCCC"> the</font>

669
00:31:41,060 --> 00:31:46,129
<font color="#E5E5E5">internal underscore</font><font color="#CCCCCC"> three right</font><font color="#E5E5E5"> and then</font>

670
00:31:43,460 --> 00:31:47,750
it's on<font color="#E5E5E5"> that slash 23 so that's likely</font>

671
00:31:46,130 --> 00:31:50,870
what is going<font color="#E5E5E5"> out</font><font color="#CCCCCC"> to the internet</font>

672
00:31:47,750 --> 00:31:57,500
allowing us to retrieve that reverse

673
00:31:50,870 --> 00:32:01,729
shell and then we saw the ec2 user and

674
00:31:57,500 --> 00:32:04,100
<font color="#CCCCCC">root users</font><font color="#E5E5E5"> and Etsy password the</font>

675
00:32:01,730 --> 00:32:07,880
<font color="#E5E5E5">nomenclature used was</font><font color="#CCCCCC"> SPX underscore</font>

676
00:32:04,100 --> 00:32:10,219
user and a four digit number<font color="#CCCCCC"> so I</font>

677
00:32:07,880 --> 00:32:11,990
<font color="#E5E5E5">mentioned</font><font color="#CCCCCC"> x-ray and this is an area of</font>

678
00:32:10,220 --> 00:32:15,170
research<font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to continue exploring as</font>

679
00:32:11,990 --> 00:32:19,970
well but it seems like the x-ray<font color="#CCCCCC"> demon</font>

680
00:32:15,170 --> 00:32:21,560
<font color="#E5E5E5">always resides at 79 - and then we know</font>

681
00:32:19,970 --> 00:32:22,480
again that<font color="#E5E5E5"> there's some sort</font><font color="#CCCCCC"> of</font>

682
00:32:21,560 --> 00:32:24,889
bootstrapping

683
00:32:22,480 --> 00:32:27,230
<font color="#E5E5E5">that's going on for your code and it's</font>

684
00:32:24,890 --> 00:32:29,120
it's leveraging that runtime<font color="#CCCCCC"> dot Esso</font>

685
00:32:27,230 --> 00:32:33,860
shared object file it's making calls to

686
00:32:29,120 --> 00:32:35,750
<font color="#CCCCCC">that so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> of the stuff I</font>

687
00:32:33,860 --> 00:32:38,600
didn't show you<font color="#CCCCCC"> I</font><font color="#E5E5E5"> captured this because</font>

688
00:32:35,750 --> 00:32:40,610
I knew if we<font color="#E5E5E5"> try to do all of this in in</font>

689
00:32:38,600 --> 00:32:43,129
under five minutes<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be very difficult</font>

690
00:32:40,610 --> 00:32:45,800
<font color="#CCCCCC">but this is just</font><font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> the some</font><font color="#E5E5E5"> of</font>

691
00:32:43,130 --> 00:32:47,330
the<font color="#CCCCCC"> file system mount points you</font><font color="#E5E5E5"> can see</font>

692
00:32:45,800 --> 00:32:51,590
some of<font color="#E5E5E5"> the permissions there so we've</font>

693
00:32:47,330 --> 00:32:54,199
got you know dev<font color="#CCCCCC"> xB da one all the way</font>

694
00:32:51,590 --> 00:32:57,439
through you know and<font color="#E5E5E5"> where that's</font>

695
00:32:54,200 --> 00:33:03,110
mounted<font color="#E5E5E5"> we've got read-only we've got</font>

696
00:32:57,440 --> 00:33:04,910
<font color="#CCCCCC">readwrite on slash dev</font><font color="#E5E5E5"> yeah I'm not</font>

697
00:33:03,110 --> 00:33:07,820
going<font color="#CCCCCC"> to read them</font><font color="#E5E5E5"> all off but this is a</font>

698
00:33:04,910 --> 00:33:09,830
just kind<font color="#E5E5E5"> of a good overview of the</font><font color="#CCCCCC"> file</font>

699
00:33:07,820 --> 00:33:12,340
<font color="#CCCCCC">system and</font><font color="#E5E5E5"> mount points and some of</font>

700
00:33:09,830 --> 00:33:12,340
their permissions

701
00:33:12,900 --> 00:33:23,290
<font color="#CCCCCC">just a quick listing of those</font>

702
00:33:15,130 --> 00:33:24,790
directories got some<font color="#CCCCCC"> symlinks and so the</font>

703
00:33:23,290 --> 00:33:27,030
<font color="#E5E5E5">next thing I started doing again</font>

704
00:33:24,790 --> 00:33:30,668
remember I said about the<font color="#E5E5E5"> session tokens</font>

705
00:33:27,030 --> 00:33:33,100
were able to take those<font color="#CCCCCC"> tokens</font><font color="#E5E5E5"> if we're</font>

706
00:33:30,669 --> 00:33:34,510
able to extract<font color="#E5E5E5"> them Rex will</font><font color="#CCCCCC"> trait them</font>

707
00:33:33,100 --> 00:33:39,790
we're able to<font color="#E5E5E5"> take those</font><font color="#CCCCCC"> and then</font>

708
00:33:34,510 --> 00:33:41,350
execute code of our choosing<font color="#E5E5E5"> of that</font>

709
00:33:39,790 --> 00:33:42,820
that<font color="#E5E5E5"> lambda function with those</font>

710
00:33:41,350 --> 00:33:44,830
credentials<font color="#E5E5E5"> so whatever the lambda</font>

711
00:33:42,820 --> 00:33:47,080
function is<font color="#E5E5E5"> able to access we're also</font>

712
00:33:44,830 --> 00:33:50,049
able to<font color="#E5E5E5"> access using those credentials</font>

713
00:33:47,080 --> 00:33:52,629
<font color="#E5E5E5">so one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> problems was again it they</font>

714
00:33:50,049 --> 00:33:54,639
only last for<font color="#CCCCCC"> an hour</font><font color="#E5E5E5"> as a security</font>

715
00:33:52,630 --> 00:33:57,850
feature in AWS so we<font color="#CCCCCC"> needed a way to</font>

716
00:33:54,640 --> 00:34:00,820
kind of<font color="#E5E5E5"> refresh those periodically so we</font>

717
00:33:57,850 --> 00:34:02,740
can grab the access key ID we can grab

718
00:34:00,820 --> 00:34:06,070
the secret access key<font color="#E5E5E5"> we can grab the</font>

719
00:34:02,740 --> 00:34:08,260
security and session tokens what if we

720
00:34:06,070 --> 00:34:11,080
were to export those and then just

721
00:34:08,260 --> 00:34:13,030
import them<font color="#CCCCCC"> into maybe say our AWS</font>

722
00:34:11,080 --> 00:34:16,989
credentials file<font color="#E5E5E5"> everyone's familiar</font>

723
00:34:13,030 --> 00:34:20,830
with<font color="#E5E5E5"> those for AWS CLI so AWS has a</font>

724
00:34:16,989 --> 00:34:22,359
<font color="#E5E5E5">command-line</font><font color="#CCCCCC"> interface application for</font>

725
00:34:20,830 --> 00:34:26,020
you<font color="#E5E5E5"> to</font><font color="#CCCCCC"> interact with their services</font><font color="#E5E5E5"> and</font>

726
00:34:22,359 --> 00:34:27,190
there's a file called credentials<font color="#E5E5E5"> where</font>

727
00:34:26,020 --> 00:34:29,770
you can go and<font color="#CCCCCC"> instead up different</font>

728
00:34:27,190 --> 00:34:32,740
profiles with different credentials<font color="#E5E5E5"> so</font>

729
00:34:29,770 --> 00:34:34,600
what<font color="#E5E5E5"> will what</font><font color="#CCCCCC"> we'll do is extract those</font>

730
00:34:32,739 --> 00:34:36,638
<font color="#E5E5E5">credentials from the lambda function put</font>

731
00:34:34,600 --> 00:34:39,250
<font color="#E5E5E5">them in the credential file and then</font>

732
00:34:36,639 --> 00:34:42,330
whatever<font color="#E5E5E5"> we attempt to</font><font color="#CCCCCC"> execute with the</font>

733
00:34:39,250 --> 00:34:44,649
AWS CLI<font color="#E5E5E5"> we can execute with the lambdas</font>

734
00:34:42,330 --> 00:34:51,819
credentials and the lambdas permissions

735
00:34:44,649 --> 00:34:54,159
so this is<font color="#E5E5E5"> just kind of a quick summary</font>

736
00:34:51,820 --> 00:34:58,060
of<font color="#E5E5E5"> the events</font><font color="#CCCCCC"> that show up in</font><font color="#E5E5E5"> cloud</font><font color="#CCCCCC"> trem</font>

737
00:34:54,159 --> 00:35:00,820
<font color="#CCCCCC">and what I'm showing here is that it's</font>

738
00:34:58,060 --> 00:35:04,900
an assumed role and it's using<font color="#E5E5E5"> the</font>

739
00:35:00,820 --> 00:35:07,180
lambda access key ID and you<font color="#E5E5E5"> can see</font>

740
00:35:04,900 --> 00:35:08,560
that I set up one called my lambda role

741
00:35:07,180 --> 00:35:10,180
so what I'm pointing<font color="#CCCCCC"> out here</font><font color="#E5E5E5"> is that</font>

742
00:35:08,560 --> 00:35:12,250
<font color="#E5E5E5">we're now masquerading is the lambda</font>

743
00:35:10,180 --> 00:35:12,850
<font color="#E5E5E5">function or the lambda container rather</font>

744
00:35:12,250 --> 00:35:14,920
than

745
00:35:12,850 --> 00:35:19,319
<font color="#E5E5E5">our own credentials a really good way to</font>

746
00:35:14,920 --> 00:35:19,320
<font color="#E5E5E5">kind of hide your activities if you will</font>

747
00:35:19,890 --> 00:35:27,390
this<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> I think this is a cloud</font>

748
00:35:23,460 --> 00:35:28,510
cloud watch cloud trail<font color="#E5E5E5"> cloud watch</font><font color="#CCCCCC"> oh</font>

749
00:35:27,390 --> 00:35:32,080
yeah

750
00:35:28,510 --> 00:35:34,090
<font color="#E5E5E5">God watch there you go thank you</font><font color="#CCCCCC"> so</font>

751
00:35:32,080 --> 00:35:36,460
there's just<font color="#E5E5E5"> another logging utility</font>

752
00:35:34,090 --> 00:35:39,040
that AWS has so again<font color="#CCCCCC"> just showing that</font>

753
00:35:36,460 --> 00:35:43,030
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know when it started when it</font><font color="#E5E5E5"> ended</font>

754
00:35:39,040 --> 00:35:47,650
who it was<font color="#CCCCCC"> who was executed</font><font color="#E5E5E5"> by and what</font>

755
00:35:43,030 --> 00:35:52,390
it did<font color="#E5E5E5"> important takeaway is that</font><font color="#CCCCCC"> AWS</font>

756
00:35:47,650 --> 00:35:56,110
thinks<font color="#CCCCCC"> it's lambda not you so we talked</font>

757
00:35:52,390 --> 00:35:58,990
<font color="#E5E5E5">about the lifetime being 300 seconds and</font>

758
00:35:56,110 --> 00:36:02,230
then the security<font color="#E5E5E5"> token max lifetime is</font>

759
00:35:58,990 --> 00:36:04,270
<font color="#CCCCCC">3,600 or an hour so we need to</font><font color="#E5E5E5"> renew</font>

760
00:36:02,230 --> 00:36:08,260
those session<font color="#E5E5E5"> tokens so we can continue</font>

761
00:36:04,270 --> 00:36:09,640
<font color="#E5E5E5">to do whatever it is</font><font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> do so we</font>

762
00:36:08,260 --> 00:36:11,470
<font color="#E5E5E5">want to look at</font><font color="#CCCCCC"> something along the</font>

763
00:36:09,640 --> 00:36:15,850
lines of how we gain<font color="#CCCCCC"> persistent remote</font>

764
00:36:11,470 --> 00:36:17,680
access to this so some of the<font color="#CCCCCC"> ideas I</font>

765
00:36:15,850 --> 00:36:20,080
haven't actually written any code<font color="#E5E5E5"> to do</font>

766
00:36:17,680 --> 00:36:21,790
this this is hypothetical<font color="#E5E5E5"> but again</font>

767
00:36:20,080 --> 00:36:24,549
assuming<font color="#CCCCCC"> that the lambda function has</font>

768
00:36:21,790 --> 00:36:30,790
the<font color="#CCCCCC"> ion permissions to perform these</font>

769
00:36:24,550 --> 00:36:34,180
actions we could you know<font color="#E5E5E5"> use an HTTP</font>

770
00:36:30,790 --> 00:36:37,990
GET to an<font color="#CCCCCC"> API gateway and have it invoke</font>

771
00:36:34,180 --> 00:36:40,290
the lambda<font color="#E5E5E5"> and execute whatever commands</font>

772
00:36:37,990 --> 00:36:45,819
we want so this<font color="#E5E5E5"> is just a real</font><font color="#CCCCCC"> simple</font>

773
00:36:40,290 --> 00:36:48,550
<font color="#E5E5E5">scenario but what we can do is then</font>

774
00:36:45,820 --> 00:36:51,220
access those credentials of that<font color="#E5E5E5"> lambda</font>

775
00:36:48,550 --> 00:36:53,530
function through a web<font color="#CCCCCC"> interface so we</font>

776
00:36:51,220 --> 00:36:55,390
<font color="#CCCCCC">you know your</font><font color="#E5E5E5"> your security token</font>

777
00:36:53,530 --> 00:36:58,180
expires you're not getting<font color="#CCCCCC"> access now we</font>

778
00:36:55,390 --> 00:37:00,069
just go in hit refresh<font color="#CCCCCC"> on the browser</font>

779
00:36:58,180 --> 00:37:07,029
and<font color="#CCCCCC"> I'm we've got new access tokens and</font>

780
00:37:00,070 --> 00:37:09,310
<font color="#E5E5E5">we can continue doing</font><font color="#CCCCCC"> our research so</font>

781
00:37:07,030 --> 00:37:11,860
again AWS can act it can be triggered<font color="#CCCCCC"> by</font>

782
00:37:09,310 --> 00:37:15,850
a number<font color="#CCCCCC"> of sources</font><font color="#E5E5E5"> but it</font><font color="#CCCCCC"> can also</font>

783
00:37:11,860 --> 00:37:19,240
access<font color="#E5E5E5"> a number of them as well so</font><font color="#CCCCCC"> we</font>

784
00:37:15,850 --> 00:37:22,720
can<font color="#E5E5E5"> perhaps through a browser interface</font>

785
00:37:19,240 --> 00:37:24,930
as well<font color="#CCCCCC"> access</font><font color="#E5E5E5"> a p--</font><font color="#CCCCCC"> api gateway that</font>

786
00:37:22,720 --> 00:37:28,890
calls your maliciously

787
00:37:24,930 --> 00:37:31,529
function and we can<font color="#E5E5E5"> start prodding</font>

788
00:37:28,890 --> 00:37:34,049
<font color="#CCCCCC">around</font><font color="#E5E5E5"> doing some reconnaissance</font><font color="#CCCCCC"> on what</font>

789
00:37:31,530 --> 00:37:35,849
sort of permissions<font color="#E5E5E5"> are in place and</font>

790
00:37:34,050 --> 00:37:38,790
what<font color="#E5E5E5"> the lambda function is able</font><font color="#CCCCCC"> to do</font>

791
00:37:35,849 --> 00:37:42,690
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I'm gonna move along</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> we're</font>

792
00:37:38,790 --> 00:37:44,759
getting short<font color="#E5E5E5"> on</font><font color="#CCCCCC"> time here so I threw</font>

793
00:37:42,690 --> 00:37:46,829
this in here<font color="#CCCCCC"> because s3 has been kind</font><font color="#E5E5E5"> of</font>

794
00:37:44,760 --> 00:37:49,950
all the<font color="#CCCCCC"> rage with you know world</font>

795
00:37:46,829 --> 00:37:52,050
<font color="#E5E5E5">readable s3 buckets</font><font color="#CCCCCC"> all we need to</font><font color="#E5E5E5"> have</font>

796
00:37:49,950 --> 00:37:56,730
<font color="#E5E5E5">is get object permissions to be able to</font>

797
00:37:52,050 --> 00:37:59,490
pull down contents from<font color="#CCCCCC"> s3</font><font color="#E5E5E5"> buckets</font><font color="#CCCCCC"> so if</font>

798
00:37:56,730 --> 00:38:01,319
we're able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do that it's not world</font>

799
00:37:59,490 --> 00:38:02,759
readable<font color="#E5E5E5"> but the lambda function can</font>

800
00:38:01,319 --> 00:38:08,190
read it now<font color="#CCCCCC"> we've got a way</font><font color="#E5E5E5"> to</font>

801
00:38:02,760 --> 00:38:09,869
exfiltrate data from<font color="#E5E5E5"> s3 buckets maybe we</font>

802
00:38:08,190 --> 00:38:11,430
can do some port scanning<font color="#E5E5E5"> we can have</font>

803
00:38:09,869 --> 00:38:13,859
the lambda function because again it can

804
00:38:11,430 --> 00:38:15,990
make outbound<font color="#CCCCCC"> tcp/ip connections</font><font color="#E5E5E5"> as we</font>

805
00:38:13,859 --> 00:38:18,540
did<font color="#E5E5E5"> with our reverse shell we could</font>

806
00:38:15,990 --> 00:38:20,640
start doing<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> proxies or</font>

807
00:38:18,540 --> 00:38:24,170
masqueraded<font color="#E5E5E5"> and map scans for instance</font>

808
00:38:20,640 --> 00:38:27,240
start<font color="#CCCCCC"> trotting</font><font color="#E5E5E5"> targets through lambda</font>

809
00:38:24,170 --> 00:38:29,369
not as ourselves<font color="#E5E5E5"> but as lambda to a</font>

810
00:38:27,240 --> 00:38:31,140
destination target and start doing you

811
00:38:29,369 --> 00:38:36,030
know active active reconnaissance on

812
00:38:31,140 --> 00:38:38,190
them so we've we've we've got<font color="#E5E5E5"> some</font>

813
00:38:36,030 --> 00:38:41,130
limitations<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this too right if it's</font>

814
00:38:38,190 --> 00:38:43,349
our own account<font color="#E5E5E5"> it's you know it's</font><font color="#CCCCCC"> it's</font>

815
00:38:41,130 --> 00:38:45,540
got some<font color="#E5E5E5"> billing costs if it's someone</font>

816
00:38:43,349 --> 00:38:47,760
else's account<font color="#CCCCCC"> like</font><font color="#E5E5E5"> if an</font><font color="#CCCCCC"> attackers</font>

817
00:38:45,540 --> 00:38:49,859
<font color="#E5E5E5">using this or a a former rogue employee</font>

818
00:38:47,760 --> 00:38:52,109
is using this they that's<font color="#E5E5E5"> probably not a</font>

819
00:38:49,859 --> 00:38:53,670
concern<font color="#CCCCCC"> of theirs but it does have a</font>

820
00:38:52,109 --> 00:38:55,710
higher<font color="#CCCCCC"> probability of</font><font color="#E5E5E5"> detection</font>

821
00:38:53,670 --> 00:38:57,480
<font color="#E5E5E5">everything is going to get logged and if</font>

822
00:38:55,710 --> 00:39:00,240
they start seeing<font color="#CCCCCC"> unusual activity it</font>

823
00:38:57,480 --> 00:39:01,650
could trigger something and<font color="#CCCCCC"> you know you</font>

824
00:39:00,240 --> 00:39:06,598
know<font color="#CCCCCC"> sake analysts might see or</font>

825
00:39:01,650 --> 00:39:08,940
<font color="#E5E5E5">something so</font><font color="#CCCCCC"> and we still don't</font><font color="#E5E5E5"> have any</font>

826
00:39:06,599 --> 00:39:12,990
control over<font color="#E5E5E5"> the runtime execution and</font>

827
00:39:08,940 --> 00:39:16,799
the flow so we<font color="#E5E5E5"> want to then reverse</font>

828
00:39:12,990 --> 00:39:19,439
engineer the the bootstrap that py and

829
00:39:16,799 --> 00:39:21,750
that runtime shared object file that we

830
00:39:19,440 --> 00:39:23,700
looked<font color="#E5E5E5"> at earlier so that</font><font color="#CCCCCC"> we can begin</font>

831
00:39:21,750 --> 00:39:26,430
<font color="#E5E5E5">looking at</font><font color="#CCCCCC"> how we can control data and</font>

832
00:39:23,700 --> 00:39:28,439
execution<font color="#CCCCCC"> flow</font><font color="#E5E5E5"> so these are just some</font>

833
00:39:26,430 --> 00:39:32,368
screenshots and I want to be respectful

834
00:39:28,440 --> 00:39:36,000
<font color="#E5E5E5">of Amazon's intellectual property</font><font color="#CCCCCC"> this</font>

835
00:39:32,369 --> 00:39:37,110
<font color="#E5E5E5">is copyrighted material which is why I'm</font>

836
00:39:36,000 --> 00:39:40,700
only<font color="#E5E5E5"> going to show</font><font color="#CCCCCC"> you a</font><font color="#E5E5E5"> little</font>

837
00:39:37,110 --> 00:39:43,920
code snippets<font color="#CCCCCC"> that are relevant but um</font>

838
00:39:40,700 --> 00:39:46,319
so this<font color="#CCCCCC"> is the bootstrap</font><font color="#E5E5E5"> py you can see</font>

839
00:39:43,920 --> 00:39:49,190
that it imports several different Python

840
00:39:46,320 --> 00:39:52,530
packages the important thing<font color="#CCCCCC"> here is</font>

841
00:39:49,190 --> 00:39:55,200
<font color="#CCCCCC">it's importing runtime from the shared</font>

842
00:39:52,530 --> 00:39:58,800
object file as<font color="#E5E5E5"> lamb to runtime so</font>

843
00:39:55,200 --> 00:40:01,830
anywhere in the bootstrap py file that

844
00:39:58,800 --> 00:40:03,900
you see<font color="#CCCCCC"> lambda runtime</font><font color="#E5E5E5"> dot function name</font>

845
00:40:01,830 --> 00:40:08,520
<font color="#E5E5E5">it's using something out of that shared</font>

846
00:40:03,900 --> 00:40:11,280
object file<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> I found</font>

847
00:40:08,520 --> 00:40:14,340
<font color="#CCCCCC">interesting that</font><font color="#E5E5E5"> happens in the the</font>

848
00:40:11,280 --> 00:40:16,560
bootstrap py main function before<font color="#CCCCCC"> it</font>

849
00:40:14,340 --> 00:40:18,660
actually<font color="#E5E5E5"> runs your code is it</font><font color="#CCCCCC"> it's</font>

850
00:40:16,560 --> 00:40:20,340
deleting these OS and environment

851
00:40:18,660 --> 00:40:21,540
variables<font color="#E5E5E5"> so remember we looked</font><font color="#CCCCCC"> at some</font>

852
00:40:20,340 --> 00:40:23,250
<font color="#CCCCCC">of the other</font><font color="#E5E5E5"> ones they were like the</font>

853
00:40:21,540 --> 00:40:25,830
session<font color="#CCCCCC"> token' the timezone and</font><font color="#E5E5E5"> a number</font>

854
00:40:23,250 --> 00:40:27,960
<font color="#CCCCCC">of</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> things we can't look</font><font color="#E5E5E5"> at those</font>

855
00:40:25,830 --> 00:40:30,900
because<font color="#E5E5E5"> they're deleted</font><font color="#CCCCCC"> before our code</font>

856
00:40:27,960 --> 00:40:33,420
is<font color="#E5E5E5"> bootstrap so again trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get some</font>

857
00:40:30,900 --> 00:40:35,310
ideas<font color="#CCCCCC"> about how we</font><font color="#E5E5E5"> might be</font><font color="#CCCCCC"> able to</font>

858
00:40:33,420 --> 00:40:39,720
<font color="#E5E5E5">actually capture those before our code</font>

859
00:40:35,310 --> 00:40:43,220
is executed but lambda<font color="#CCCCCC"> controls socket</font>

860
00:40:39,720 --> 00:40:48,230
shared memory file descriptor presumably

861
00:40:43,220 --> 00:40:50,459
<font color="#E5E5E5">control socket or a runtime load time</font><font color="#CCCCCC"> a</font>

862
00:40:48,230 --> 00:40:52,410
<font color="#CCCCCC">number of the interestingly named</font>

863
00:40:50,460 --> 00:40:55,920
variables<font color="#CCCCCC"> that I would really</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> to</font>

864
00:40:52,410 --> 00:40:59,609
get my hands on so this<font color="#E5E5E5"> is this is</font>

865
00:40:55,920 --> 00:41:02,790
<font color="#E5E5E5">really our entry</font><font color="#CCCCCC"> point into the to</font><font color="#E5E5E5"> the</font>

866
00:40:59,610 --> 00:41:04,920
to the land<font color="#E5E5E5"> of runtime environment</font><font color="#CCCCCC"> they</font>

867
00:41:02,790 --> 00:41:10,320
make a call to something called a wait

868
00:41:04,920 --> 00:41:12,840
<font color="#CCCCCC">for start wait for start then calls</font>

869
00:41:10,320 --> 00:41:15,540
<font color="#E5E5E5">lambda run lambda underscore of run time</font>

870
00:41:12,840 --> 00:41:18,030
dot<font color="#CCCCCC"> received start</font><font color="#E5E5E5"> so from what I can</font>

871
00:41:15,540 --> 00:41:21,420
tell<font color="#E5E5E5"> based off the analysis I've done of</font>

872
00:41:18,030 --> 00:41:26,340
receive start I hope that's big enough

873
00:41:21,420 --> 00:41:29,010
<font color="#CCCCCC">is that it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> big enough for</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> that</font>

874
00:41:26,340 --> 00:41:30,420
is then calling another in a<font color="#E5E5E5"> decimal</font>

875
00:41:29,010 --> 00:41:33,810
<font color="#CCCCCC">that some stuff but it calls another</font>

876
00:41:30,420 --> 00:41:36,540
<font color="#E5E5E5">function called</font><font color="#CCCCCC"> runtime underscore re CV</font>

877
00:41:33,810 --> 00:41:37,799
<font color="#CCCCCC">underscore to start</font><font color="#E5E5E5"> well what</font><font color="#CCCCCC"> does you</font>

878
00:41:36,540 --> 00:41:42,540
know what does that<font color="#E5E5E5"> do</font>

879
00:41:37,800 --> 00:41:47,130
i from what<font color="#CCCCCC"> I can tell this is</font><font color="#E5E5E5"> AWS is</font>

880
00:41:42,540 --> 00:41:48,270
way of lambda telling AWS when the

881
00:41:47,130 --> 00:41:49,800
lambda function

882
00:41:48,270 --> 00:41:52,350
<font color="#CCCCCC">has</font><font color="#E5E5E5"> been invoked</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> are billing</font>

883
00:41:49,800 --> 00:41:55,620
us by the millisecond at a minimum of

884
00:41:52,350 --> 00:41:58,319
<font color="#E5E5E5">one second up to</font><font color="#CCCCCC"> three hundred right</font><font color="#E5E5E5"> so</font>

885
00:41:55,620 --> 00:42:00,330
the<font color="#E5E5E5"> idea I start kind</font><font color="#CCCCCC"> of kicking around</font>

886
00:41:58,320 --> 00:42:05,400
in<font color="#E5E5E5"> my head is is there a way maybe that</font>

887
00:42:00,330 --> 00:42:09,540
we can tell AWS that yes it<font color="#E5E5E5"> started but</font>

888
00:42:05,400 --> 00:42:11,400
<font color="#E5E5E5">it stopped and get billed for one second</font>

889
00:42:09,540 --> 00:42:12,930
<font color="#E5E5E5">but continue to execute</font><font color="#CCCCCC"> for the other</font>

890
00:42:11,400 --> 00:42:14,190
<font color="#CCCCCC">two hundred ninety nine</font><font color="#E5E5E5"> seconds that</font>

891
00:42:12,930 --> 00:42:15,359
<font color="#CCCCCC">would be really</font><font color="#E5E5E5"> interesting if we</font><font color="#CCCCCC"> could</font>

892
00:42:14,190 --> 00:42:17,550
<font color="#E5E5E5">do that</font>

893
00:42:15,360 --> 00:42:19,920
another interesting<font color="#CCCCCC"> thing I would</font><font color="#E5E5E5"> like</font>

894
00:42:17,550 --> 00:42:24,120
<font color="#E5E5E5">to explore a little bit more</font><font color="#CCCCCC"> on is with</font>

895
00:42:19,920 --> 00:42:25,500
this x-ray<font color="#E5E5E5"> it's taking debugging</font>

896
00:42:24,120 --> 00:42:28,230
information<font color="#E5E5E5"> basically runtime</font>

897
00:42:25,500 --> 00:42:30,690
<font color="#CCCCCC">information from your</font><font color="#E5E5E5"> code and it's</font>

898
00:42:28,230 --> 00:42:32,490
displaying it<font color="#E5E5E5"> in a web friendly</font>

899
00:42:30,690 --> 00:42:34,920
interface so is there a<font color="#E5E5E5"> way that we can</font>

900
00:42:32,490 --> 00:42:36,509
taint that data that's<font color="#E5E5E5"> reported possibly</font>

901
00:42:34,920 --> 00:42:39,210
a cross-site scripting payload where

902
00:42:36,510 --> 00:42:41,070
<font color="#CCCCCC">leak and</font><font color="#E5E5E5"> hijack cookies may be an admin</font>

903
00:42:39,210 --> 00:42:44,130
or someone with higher privileges than

904
00:42:41,070 --> 00:42:46,830
you<font color="#E5E5E5"> is viewing that and maybe perhaps we</font>

905
00:42:44,130 --> 00:42:49,040
can<font color="#E5E5E5"> hijack their account and access what</font>

906
00:42:46,830 --> 00:42:51,600
they<font color="#E5E5E5"> have that</font><font color="#CCCCCC"> we cannot currently</font><font color="#E5E5E5"> so</font>

907
00:42:49,040 --> 00:42:55,830
anyway so we're<font color="#E5E5E5"> uh you know it's a</font>

908
00:42:51,600 --> 00:42:59,220
making a call here to get handlers<font color="#CCCCCC"> again</font>

909
00:42:55,830 --> 00:43:01,650
<font color="#CCCCCC">if that calls</font><font color="#E5E5E5"> report user in it start</font>

910
00:42:59,220 --> 00:43:04,109
again presumably it's it's<font color="#E5E5E5"> doing some</font>

911
00:43:01,650 --> 00:43:06,120
sort<font color="#CCCCCC"> of time tracking</font><font color="#E5E5E5"> what I found</font>

912
00:43:04,110 --> 00:43:09,060
<font color="#E5E5E5">interesting and this was the comment in</font>

913
00:43:06,120 --> 00:43:10,290
the the bootstrap code it<font color="#E5E5E5"> says this is</font>

914
00:43:09,060 --> 00:43:11,970
the old way we were loading modules

915
00:43:10,290 --> 00:43:14,310
presumably this<font color="#CCCCCC"> is someone</font><font color="#E5E5E5"> from AWS</font>

916
00:43:11,970 --> 00:43:18,600
that's you know<font color="#E5E5E5"> commenting this in here</font>

917
00:43:14,310 --> 00:43:20,549
but<font color="#E5E5E5"> it was says it was causing</font><font color="#CCCCCC"> internet</font>

918
00:43:18,600 --> 00:43:22,920
and build failures for<font color="#E5E5E5"> unknown reasons</font>

919
00:43:20,550 --> 00:43:25,110
so<font color="#E5E5E5"> I just found that the comment</font><font color="#CCCCCC"> was</font>

920
00:43:22,920 --> 00:43:27,860
still in there and<font color="#CCCCCC"> just</font><font color="#E5E5E5"> found</font><font color="#CCCCCC"> out</font>

921
00:43:25,110 --> 00:43:30,780
<font color="#E5E5E5">interesting they left that in there</font><font color="#CCCCCC"> so</font>

922
00:43:27,860 --> 00:43:33,720
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is that I'm using for this if</font>

923
00:43:30,780 --> 00:43:38,880
you're<font color="#E5E5E5"> curious it's called hopper it's</font>

924
00:43:33,720 --> 00:43:41,009
like a disassembler debugger for<font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> but</font>

925
00:43:38,880 --> 00:43:43,920
<font color="#E5E5E5">I'm just</font><font color="#CCCCCC"> kind of walking</font><font color="#E5E5E5"> through again</font>

926
00:43:41,010 --> 00:43:47,010
looking at<font color="#CCCCCC"> run time underscore report</font>

927
00:43:43,920 --> 00:43:50,330
underscore user underscore init

928
00:43:47,010 --> 00:43:54,450
underscore start AWS likes underscores

929
00:43:50,330 --> 00:43:58,080
<font color="#E5E5E5">so that comes back and then we've got</font>

930
00:43:54,450 --> 00:44:00,000
report done so thank you<font color="#CCCCCC"> so we're again</font>

931
00:43:58,080 --> 00:44:01,038
presumably this<font color="#CCCCCC"> is this is telling AWS</font>

932
00:44:00,000 --> 00:44:03,410
that

933
00:44:01,039 --> 00:44:06,259
you know the the<font color="#CCCCCC"> invitations occurred</font>

934
00:44:03,410 --> 00:44:08,558
<font color="#CCCCCC">you know stopped billing stopped</font><font color="#E5E5E5"> doing</font>

935
00:44:06,259 --> 00:44:13,779
any sort of X ray tracing for debugging

936
00:44:08,559 --> 00:44:17,979
<font color="#E5E5E5">we've we see here also that again we're</font>

937
00:44:13,779 --> 00:44:22,969
<font color="#CCCCCC">building</font><font color="#E5E5E5"> so this looks like it is</font>

938
00:44:17,979 --> 00:44:26,269
<font color="#CCCCCC">logging the</font><font color="#E5E5E5"> beginning in the</font><font color="#CCCCCC"> N and</font>

939
00:44:22,969 --> 00:44:29,839
rounding it to<font color="#CCCCCC"> the thousands right for</font>

940
00:44:26,269 --> 00:44:34,549
the millisecond building<font color="#E5E5E5"> again this is</font>

941
00:44:29,839 --> 00:44:39,890
<font color="#E5E5E5">just another example of</font><font color="#CCCCCC"> runtime report</font>

942
00:44:34,549 --> 00:44:43,910
done so again<font color="#E5E5E5"> I'm going to begin</font><font color="#CCCCCC"> looking</font>

943
00:44:39,890 --> 00:44:46,219
at I talked to a guy<font color="#E5E5E5"> at AHA last night</font>

944
00:44:43,910 --> 00:44:49,779
<font color="#E5E5E5">Austin hackers</font><font color="#CCCCCC"> Association</font><font color="#E5E5E5"> versiv</font>

945
00:44:46,219 --> 00:44:52,339
<font color="#CCCCCC">Anonymous I forget what it is</font><font color="#E5E5E5"> aah a</font>

946
00:44:49,779 --> 00:44:55,130
began<font color="#CCCCCC"> talking to him about some some</font>

947
00:44:52,339 --> 00:44:57,558
ways that we might<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to circumvent</font>

948
00:44:55,130 --> 00:45:01,099
some<font color="#E5E5E5"> of the controls</font><font color="#CCCCCC"> aw has a place they</font>

949
00:44:57,559 --> 00:45:03,650
allow you in your lambda<font color="#E5E5E5"> function</font>

950
00:45:01,099 --> 00:45:06,049
configuration you<font color="#E5E5E5"> can go in and specify</font>

951
00:45:03,650 --> 00:45:10,099
a Python path so<font color="#CCCCCC"> python path is similar</font>

952
00:45:06,049 --> 00:45:13,038
to like linux shell path it's looking

953
00:45:10,099 --> 00:45:16,909
for a<font color="#E5E5E5"> list of</font><font color="#CCCCCC"> directories</font><font color="#E5E5E5"> to look into</font>

954
00:45:13,039 --> 00:45:19,189
<font color="#E5E5E5">to load modules so the idea being if we</font>

955
00:45:16,909 --> 00:45:20,869
can you know we<font color="#CCCCCC"> can write to slash temp</font>

956
00:45:19,189 --> 00:45:24,019
<font color="#E5E5E5">it's the only directory where you can</font>

957
00:45:20,869 --> 00:45:27,069
write you if we specify temp<font color="#E5E5E5"> as the</font>

958
00:45:24,019 --> 00:45:30,919
Python path and we write our own module

959
00:45:27,069 --> 00:45:33,589
can we<font color="#E5E5E5"> then maybe begin to return data</font>

960
00:45:30,919 --> 00:45:35,719
that's being called in that<font color="#E5E5E5"> runtime and</font>

961
00:45:33,589 --> 00:45:38,359
shared object file and somehow taint

962
00:45:35,719 --> 00:45:43,099
that<font color="#E5E5E5"> data right can we gain control of</font>

963
00:45:38,359 --> 00:45:44,659
the execution flow<font color="#CCCCCC"> so what else</font><font color="#E5E5E5"> so some</font>

964
00:45:43,099 --> 00:45:47,179
of the hypothetical possibilities yes

965
00:45:44,659 --> 00:45:48,619
spoofing the the lambda runtime<font color="#E5E5E5"> can we</font>

966
00:45:47,179 --> 00:45:50,829
do any<font color="#E5E5E5"> sort of malicious code injection</font>

967
00:45:48,619 --> 00:45:52,969
long poisoning

968
00:45:50,829 --> 00:45:55,009
ultimately because this is a container

969
00:45:52,969 --> 00:45:58,009
<font color="#E5E5E5">I'd really like to see if we</font><font color="#CCCCCC"> can pop</font><font color="#E5E5E5"> out</font>

970
00:45:55,009 --> 00:46:00,229
of the container<font color="#E5E5E5"> and hit the</font><font color="#CCCCCC"> ECS cluster</font>

971
00:45:58,009 --> 00:46:05,359
but that's probably<font color="#E5E5E5"> a little ways down</font>

972
00:46:00,229 --> 00:46:07,968
<font color="#E5E5E5">the road if if possible at all so that's</font>

973
00:46:05,359 --> 00:46:11,269
<font color="#E5E5E5">basically all</font><font color="#CCCCCC"> you need to do is maybe</font>

974
00:46:07,969 --> 00:46:13,159
create our own runtime and import it

975
00:46:11,269 --> 00:46:13,500
they'll have<font color="#E5E5E5"> it as lambda runtime and we</font>

976
00:46:13,159 --> 00:46:17,490
can make

977
00:46:13,500 --> 00:46:19,140
<font color="#E5E5E5">our own function calls so how do we</font>

978
00:46:17,490 --> 00:46:20,729
mitigate some<font color="#E5E5E5"> of this it's</font><font color="#CCCCCC"> really</font>

979
00:46:19,140 --> 00:46:24,359
nothing<font color="#E5E5E5"> new to be honest with you it's</font>

980
00:46:20,730 --> 00:46:26,130
just<font color="#CCCCCC"> Good Housekeeping study I</font><font color="#E5E5E5"> am get a</font>

981
00:46:24,360 --> 00:46:29,220
really<font color="#E5E5E5"> good solid understanding of it</font>

982
00:46:26,130 --> 00:46:31,170
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> Deb's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> cop's</font><font color="#E5E5E5"> has this mantra</font>

983
00:46:29,220 --> 00:46:33,959
<font color="#E5E5E5">of you building you</font><font color="#CCCCCC"> own it now</font><font color="#E5E5E5"> which I</font>

984
00:46:31,170 --> 00:46:36,210
really like but getting to<font color="#E5E5E5"> know I am</font>

985
00:46:33,960 --> 00:46:38,150
intimately is a pretty difficult

986
00:46:36,210 --> 00:46:41,520
<font color="#E5E5E5">learning curve</font><font color="#CCCCCC"> they have people that</font>

987
00:46:38,150 --> 00:46:43,500
manage I am only<font color="#E5E5E5"> so for someone to</font>

988
00:46:41,520 --> 00:46:45,300
really<font color="#E5E5E5"> understand it plus every other</font>

989
00:46:43,500 --> 00:46:48,240
job<font color="#E5E5E5"> duty they do is probably</font><font color="#CCCCCC"> going to be</font>

990
00:46:45,300 --> 00:46:52,350
pretty difficult<font color="#CCCCCC"> if you're setting up</font>

991
00:46:48,240 --> 00:46:54,450
I am permissions<font color="#E5E5E5"> AWS gives you that deny</font>

992
00:46:52,350 --> 00:46:56,040
by default lease privilege model just be

993
00:46:54,450 --> 00:46:58,710
<font color="#E5E5E5">sure you're not going in and</font><font color="#CCCCCC"> giving any</font>

994
00:46:56,040 --> 00:47:02,400
excessive access<font color="#CCCCCC"> through</font><font color="#E5E5E5"> roles and</font>

995
00:46:58,710 --> 00:47:04,500
policies<font color="#CCCCCC"> good</font><font color="#E5E5E5"> housekeeping if you know</font>

996
00:47:02,400 --> 00:47:06,870
if someone<font color="#E5E5E5"> leaves the company or</font>

997
00:47:04,500 --> 00:47:08,970
whatever<font color="#CCCCCC"> make sure their accounts</font>

998
00:47:06,870 --> 00:47:11,220
provisioned I've worked at places<font color="#CCCCCC"> and</font>

999
00:47:08,970 --> 00:47:13,859
I've had<font color="#E5E5E5"> clients where you know they</font>

1000
00:47:11,220 --> 00:47:16,049
have<font color="#E5E5E5"> account provisioning through ad and</font>

1001
00:47:13,860 --> 00:47:19,400
it's you<font color="#CCCCCC"> know set up</font><font color="#E5E5E5"> in AWS and they use</font>

1002
00:47:16,050 --> 00:47:22,230
single<font color="#E5E5E5"> sign-on but when they've left</font>

1003
00:47:19,400 --> 00:47:23,820
<font color="#CCCCCC">access still remains in AWS it's not</font>

1004
00:47:22,230 --> 00:47:27,030
revoked so make sure<font color="#E5E5E5"> you got</font><font color="#CCCCCC"> gutten</font>

1005
00:47:23,820 --> 00:47:29,970
housekeeping and then restrict CL is<font color="#E5E5E5"> da</font>

1006
00:47:27,030 --> 00:47:34,590
and the<font color="#E5E5E5"> API or SDK and API access</font><font color="#CCCCCC"> if</font>

1007
00:47:29,970 --> 00:47:37,080
they only need you know<font color="#E5E5E5"> API access don't</font>

1008
00:47:34,590 --> 00:47:40,380
give<font color="#CCCCCC"> people web console access</font><font color="#E5E5E5"> it just</font>

1009
00:47:37,080 --> 00:47:42,860
again lease privilege<font color="#CCCCCC"> test and SSO you</font>

1010
00:47:40,380 --> 00:47:45,450
know this is code so we're<font color="#CCCCCC"> talking about</font>

1011
00:47:42,860 --> 00:47:47,400
<font color="#E5E5E5">you know doing</font><font color="#CCCCCC"> application security here</font>

1012
00:47:45,450 --> 00:47:48,750
<font color="#E5E5E5">let's have some</font><font color="#CCCCCC"> peer review on the</font>

1013
00:47:47,400 --> 00:47:51,210
function code make sure this isn't

1014
00:47:48,750 --> 00:47:52,920
malicious so that if<font color="#E5E5E5"> I know I'm you know</font>

1015
00:47:51,210 --> 00:47:54,540
leaving the<font color="#E5E5E5"> company next week I'm</font><font color="#CCCCCC"> not</font>

1016
00:47:52,920 --> 00:47:56,190
going to put malicious code on there and

1017
00:47:54,540 --> 00:47:57,540
then be able<font color="#E5E5E5"> to invoke it at some time</font>

1018
00:47:56,190 --> 00:48:00,750
<font color="#CCCCCC">later and</font><font color="#E5E5E5"> still compromise your</font>

1019
00:47:57,540 --> 00:48:04,500
environment integrate that into<font color="#E5E5E5"> CDI CD</font>

1020
00:48:00,750 --> 00:48:06,510
pipelines<font color="#E5E5E5"> automate it with SAS pre</font>

1021
00:48:04,500 --> 00:48:08,040
deployment preferably<font color="#E5E5E5"> and leverage</font>

1022
00:48:06,510 --> 00:48:10,740
infrastructure as code is often<font color="#CCCCCC"> as</font>

1023
00:48:08,040 --> 00:48:12,420
possible<font color="#CCCCCC"> using</font><font color="#E5E5E5"> you know cloud formation</font>

1024
00:48:10,740 --> 00:48:14,009
templates terraform those types of

1025
00:48:12,420 --> 00:48:18,440
things so<font color="#CCCCCC"> you can track changes and</font>

1026
00:48:14,010 --> 00:48:21,360
revert if necessary reactive<font color="#CCCCCC"> you know</font>

1027
00:48:18,440 --> 00:48:23,070
decoupled account provisioning check

1028
00:48:21,360 --> 00:48:26,070
<font color="#E5E5E5">cloud trail and cloud watch for</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> sees</font>

1029
00:48:23,070 --> 00:48:27,720
any sort of suspicious behavior

1030
00:48:26,070 --> 00:48:29,460
maybe you could visualize<font color="#E5E5E5"> some of these</font>

1031
00:48:27,720 --> 00:48:33,390
events with a native<font color="#E5E5E5"> elk stack</font>

1032
00:48:29,460 --> 00:48:35,070
deployment within within AWS and then

1033
00:48:33,390 --> 00:48:36,930
leverage the power of<font color="#E5E5E5"> the CI CD</font>

1034
00:48:35,070 --> 00:48:39,600
automation<font color="#E5E5E5"> for your response and</font>

1035
00:48:36,930 --> 00:48:42,029
instantly<font color="#E5E5E5"> alert</font><font color="#CCCCCC"> a d4</font><font color="#E5E5E5"> team upon any sort</font>

1036
00:48:39,600 --> 00:48:44,549
of detection<font color="#E5E5E5"> of malicious or anomalous</font>

1037
00:48:42,030 --> 00:48:47,940
<font color="#E5E5E5">activity and then again revert to known</font>

1038
00:48:44,550 --> 00:48:50,640
state with CFTs or terraform if you

1039
00:48:47,940 --> 00:48:54,600
<font color="#E5E5E5">detect something fishy revert back to a</font>

1040
00:48:50,640 --> 00:48:56,970
known good<font color="#CCCCCC"> state so that's</font><font color="#E5E5E5"> it again if</font>

1041
00:48:54,600 --> 00:48:58,740
any of you or<font color="#CCCCCC"> python programmers I'd</font>

1042
00:48:56,970 --> 00:49:00,990
<font color="#E5E5E5">love to get some input and bounce some</font>

1043
00:48:58,740 --> 00:49:03,899
ideas off<font color="#CCCCCC"> of you and</font><font color="#E5E5E5"> then again</font><font color="#CCCCCC"> I'm here</font>

1044
00:49:00,990 --> 00:49:06,169
<font color="#E5E5E5">for a QA now and afterwards so thanks</font>

1045
00:49:03,900 --> 00:49:06,170
very<font color="#E5E5E5"> much</font>

