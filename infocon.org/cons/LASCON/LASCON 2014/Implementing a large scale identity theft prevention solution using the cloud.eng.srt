1
00:00:17,690 --> 00:00:22,490
everybody here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> incredible I've been</font>

2
00:00:19,880 --> 00:00:24,080
<font color="#CCCCCC">here for probably what maybe five six</font>

3
00:00:22,490 --> 00:00:25,820
hours and<font color="#E5E5E5"> I've gone to meet such smart</font>

4
00:00:24,080 --> 00:00:27,799
and fascinating people so it's<font color="#E5E5E5"> wonderful</font>

5
00:00:25,820 --> 00:00:29,390
to<font color="#E5E5E5"> be here it's awesome conference and I</font>

6
00:00:27,800 --> 00:00:31,369
hope to<font color="#E5E5E5"> come back to Austin again this</font>

7
00:00:29,390 --> 00:00:33,080
is a<font color="#CCCCCC"> wonderful place so as Mike</font>

8
00:00:31,369 --> 00:00:35,059
mentioned the title of the talk is

9
00:00:33,080 --> 00:00:36,890
implementing a<font color="#CCCCCC"> large-scale identity</font>

10
00:00:35,059 --> 00:00:39,470
theft prevention solution using the

11
00:00:36,890 --> 00:00:41,900
cloud that is very loaded so let's

12
00:00:39,470 --> 00:00:43,400
unpack that and I think<font color="#E5E5E5"> basically what</font>

13
00:00:41,900 --> 00:00:45,949
I'm trying<font color="#CCCCCC"> to get at is a</font><font color="#E5E5E5"> crash course</font>

14
00:00:43,400 --> 00:00:48,650
in scaling code architecture and your

15
00:00:45,950 --> 00:00:51,680
team to process north with 50,000

16
00:00:48,650 --> 00:00:53,600
transactions per second and so to set

17
00:00:51,680 --> 00:00:54,620
the context of and<font color="#E5E5E5"> basically set the</font>

18
00:00:53,600 --> 00:00:57,379
stage of everything that we're going<font color="#E5E5E5"> to</font>

19
00:00:54,620 --> 00:00:59,180
be talking about<font color="#E5E5E5"> today and I've known</font>

20
00:00:57,379 --> 00:01:00,589
Mike didn't also include this as part of

21
00:00:59,180 --> 00:01:02,449
my<font color="#E5E5E5"> hobbies and background i'm known to</font>

22
00:01:00,589 --> 00:01:05,089
talk a mile a minute so this<font color="#CCCCCC"> is going to</font>

23
00:01:02,449 --> 00:01:06,289
<font color="#E5E5E5">be a relatively dense case study I hope</font>

24
00:01:05,089 --> 00:01:09,320
that's<font color="#E5E5E5"> okay with you guys we're going to</font>

25
00:01:06,290 --> 00:01:11,750
<font color="#E5E5E5">be covering all sorts of stuff so the</font>

26
00:01:09,320 --> 00:01:13,820
outline of today<font color="#CCCCCC"> will set</font><font color="#E5E5E5"> some context a</font>

27
00:01:11,750 --> 00:01:16,490
little bit<font color="#E5E5E5"> more</font><font color="#CCCCCC"> about me a little bit</font>

28
00:01:13,820 --> 00:01:18,649
about what we're up to philosophy about

29
00:01:16,490 --> 00:01:20,270
computation or computing philosophy and

30
00:01:18,650 --> 00:01:21,860
then we'll dig into security because

31
00:01:20,270 --> 00:01:24,200
that's what this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> about its last con</font>

32
00:01:21,860 --> 00:01:27,050
for a reason<font color="#E5E5E5"> and then we'll dig into our</font>

33
00:01:24,200 --> 00:01:28,250
architecture our implementation and then

34
00:01:27,050 --> 00:01:31,310
we'll finally<font color="#E5E5E5"> close with some learning</font>

35
00:01:28,250 --> 00:01:33,860
lessons pros cons and<font color="#E5E5E5"> I'm going to try</font>

36
00:01:31,310 --> 00:01:35,050
and<font color="#E5E5E5"> be as as unbiased as possible</font><font color="#CCCCCC"> and at</font>

37
00:01:33,860 --> 00:01:37,460
<font color="#E5E5E5">the same time I'm going</font><font color="#CCCCCC"> to try and be</font>

38
00:01:35,050 --> 00:01:38,810
incredibly objective and honest with

39
00:01:37,460 --> 00:01:40,910
everybody here so there's things in the

40
00:01:38,810 --> 00:01:43,070
slides we've chosen vendors we've chosen

41
00:01:40,910 --> 00:01:45,020
technologies there's no such thing as a

42
00:01:43,070 --> 00:01:46,339
perfect fit I want<font color="#E5E5E5"> to be upfront with</font>

43
00:01:45,020 --> 00:01:48,470
everybody and let them<font color="#CCCCCC"> know the pros and</font>

44
00:01:46,340 --> 00:01:51,500
<font color="#CCCCCC">cons that we've seen implementing a very</font>

45
00:01:48,470 --> 00:01:53,390
large scale solution so let's start off

46
00:01:51,500 --> 00:01:54,980
<font color="#CCCCCC">with some context so Mike already gave</font>

47
00:01:53,390 --> 00:01:56,870
you<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit about my introduction a</font>

48
00:01:54,980 --> 00:01:59,210
little bit more<font color="#E5E5E5"> about me I</font><font color="#CCCCCC"> am in fact a</font>

49
00:01:56,870 --> 00:02:01,820
quant study quantitative finance and

50
00:01:59,210 --> 00:02:04,850
economics macroeconomics I worked at

51
00:02:01,820 --> 00:02:06,679
NASA many many moons ago focused on

52
00:02:04,850 --> 00:02:08,660
computer-aided engineering helped work

53
00:02:06,680 --> 00:02:10,519
on various flight projects including the

54
00:02:08,660 --> 00:02:13,310
Mars Science Laboratory<font color="#E5E5E5"> the space</font>

55
00:02:10,519 --> 00:02:15,709
interferometry mission I then went to go

56
00:02:13,310 --> 00:02:18,530
be an infosec manager at myspace we all

57
00:02:15,709 --> 00:02:20,709
remember myspace this this sort of

58
00:02:18,530 --> 00:02:23,540
social network that time forgot and

59
00:02:20,709 --> 00:02:26,090
afterwards went over to run technology

60
00:02:23,540 --> 00:02:29,030
and security at the BBC worldwide so if

61
00:02:26,090 --> 00:02:30,230
you're familiar with Doctor Who top gear

62
00:02:29,030 --> 00:02:31,140
i'll<font color="#E5E5E5"> even throw this one out there</font>

63
00:02:30,230 --> 00:02:33,720
<font color="#E5E5E5">dancing with the still</font>

64
00:02:31,140 --> 00:02:35,880
<font color="#CCCCCC">hours that's all BBC and was responsible</font>

65
00:02:33,720 --> 00:02:38,100
for technology<font color="#CCCCCC"> and security across those</font>

66
00:02:35,880 --> 00:02:40,709
domains with respect to mobile and web

67
00:02:38,100 --> 00:02:43,319
applications and currently co-founder

68
00:02:40,709 --> 00:02:45,240
and CTO of gravity so the elephant in

69
00:02:43,319 --> 00:02:46,380
<font color="#CCCCCC">the room is in fact prevette II and I</font>

70
00:02:45,240 --> 00:02:48,990
just<font color="#CCCCCC"> have this slide up here</font><font color="#E5E5E5"> because</font>

71
00:02:46,380 --> 00:02:50,250
<font color="#E5E5E5">this is not about</font><font color="#CCCCCC"> prevatt II and I want</font>

72
00:02:48,990 --> 00:02:51,330
<font color="#E5E5E5">to make that really clear we're really</font>

73
00:02:50,250 --> 00:02:53,580
<font color="#E5E5E5">privileged to be a part of this</font>

74
00:02:51,330 --> 00:02:55,080
<font color="#CCCCCC">community this is not a product talk at</font>

75
00:02:53,580 --> 00:02:56,340
all i'm<font color="#E5E5E5"> not here to sell you guys</font>

76
00:02:55,080 --> 00:02:57,630
anything we're<font color="#CCCCCC"> not even going to be</font>

77
00:02:56,340 --> 00:02:59,310
talking about the property products in

78
00:02:57,630 --> 00:03:00,660
specific we're<font color="#E5E5E5"> going to be talking about</font>

79
00:02:59,310 --> 00:03:03,209
<font color="#E5E5E5">is scaling and how we built what</font><font color="#CCCCCC"> we</font>

80
00:03:00,660 --> 00:03:04,530
<font color="#E5E5E5">built but ultimately where technology</font>

81
00:03:03,209 --> 00:03:06,239
security company<font color="#E5E5E5"> were headquartered out</font>

82
00:03:04,530 --> 00:03:07,980
of<font color="#CCCCCC"> los angeles</font><font color="#E5E5E5"> we're doing some really</font>

83
00:03:06,239 --> 00:03:10,110
cool things with respect to application

84
00:03:07,980 --> 00:03:12,750
security and that's what<font color="#CCCCCC"> really forced</font>

85
00:03:10,110 --> 00:03:14,190
us and drove us to adopt things like the

86
00:03:12,750 --> 00:03:18,060
cloud and<font color="#CCCCCC"> i'll put that</font><font color="#E5E5E5"> in quotes for</font>

87
00:03:14,190 --> 00:03:20,600
now<font color="#E5E5E5"> and you'll see why so</font><font color="#CCCCCC"> i truly on top</font>

88
00:03:18,060 --> 00:03:23,100
of surfing on top of bass guitar I

89
00:03:20,600 --> 00:03:25,829
really care about language security

90
00:03:23,100 --> 00:03:27,690
commonly known as laying sec I also care

91
00:03:25,830 --> 00:03:29,010
a lot about distributed computing and

92
00:03:27,690 --> 00:03:31,019
hopefully you'll get<font color="#E5E5E5"> a sense of both of</font>

93
00:03:29,010 --> 00:03:35,548
<font color="#E5E5E5">those two things as we go as well</font><font color="#CCCCCC"> as</font>

94
00:03:31,019 --> 00:03:37,680
data visualization and so why me of why

95
00:03:35,549 --> 00:03:40,019
am I here why what sort of case study am

96
00:03:37,680 --> 00:03:41,579
I talking about<font color="#E5E5E5"> today well we built and</font>

97
00:03:40,019 --> 00:03:43,980
we were really forced to build a

98
00:03:41,579 --> 00:03:45,989
<font color="#CCCCCC">large-scale computational engine and a</font>

99
00:03:43,980 --> 00:03:48,780
<font color="#CCCCCC">large-scale computational system to</font>

100
00:03:45,989 --> 00:03:50,640
process lots and<font color="#CCCCCC"> lots of requests we</font>

101
00:03:48,780 --> 00:03:52,799
have to deal with customers that have

102
00:03:50,640 --> 00:03:54,779
peaks of a hundred thousand requests the

103
00:03:52,799 --> 00:03:56,700
second and what we basically are

104
00:03:54,780 --> 00:03:58,709
delivering to them is an<font color="#CCCCCC"> SDK where they</font>

105
00:03:56,700 --> 00:03:59,790
can call the cloud or call our solution

106
00:03:58,709 --> 00:04:02,190
in the cloud whenever they want a

107
00:03:59,790 --> 00:04:03,900
process or generate things like tokens

108
00:04:02,190 --> 00:04:06,450
for cross-site request forgery for

109
00:04:03,900 --> 00:04:07,290
authentication or authorization they can

110
00:04:06,450 --> 00:04:09,480
call<font color="#E5E5E5"> us when they want to sanitize</font>

111
00:04:07,290 --> 00:04:11,700
cross-site scripting or content for

112
00:04:09,480 --> 00:04:13,440
cross-site scripting or sanitize queries

113
00:04:11,700 --> 00:04:15,450
to prevent against sequel injection and

114
00:04:13,440 --> 00:04:16,858
so when you have these sorts of

115
00:04:15,450 --> 00:04:18,858
customers and you've got<font color="#E5E5E5"> these users</font>

116
00:04:16,858 --> 00:04:21,690
where the usage pattern can go from zero

117
00:04:18,858 --> 00:04:24,000
<font color="#E5E5E5">requests a second to a hundred thousand</font>

118
00:04:21,690 --> 00:04:26,460
requests a second and that sort<font color="#CCCCCC"> of ramp</font>

119
00:04:24,000 --> 00:04:27,750
is only five seconds you<font color="#CCCCCC"> have to learn</font>

120
00:04:26,460 --> 00:04:29,549
how to build resilient infrastructure

121
00:04:27,750 --> 00:04:32,970
and that's what we're going to<font color="#E5E5E5"> be</font>

122
00:04:29,550 --> 00:04:35,820
talking about<font color="#E5E5E5"> today so let's dig right</font>

123
00:04:32,970 --> 00:04:37,710
into computing philosophy so I don't

124
00:04:35,820 --> 00:04:40,140
these are some<font color="#CCCCCC"> of my favorite images and</font>

125
00:04:37,710 --> 00:04:42,780
maybe a<font color="#E5E5E5"> little bit difficult to see but</font>

126
00:04:40,140 --> 00:04:44,190
this is basically<font color="#E5E5E5"> outlining the state of</font>

127
00:04:42,780 --> 00:04:45,989
motherboards

128
00:04:44,190 --> 00:04:48,960
mother bird motherboards over the last

129
00:04:45,990 --> 00:04:53,010
basically 40 some years and you can see

130
00:04:48,960 --> 00:04:55,440
<font color="#E5E5E5">all the way on</font><font color="#CCCCCC"> the left in 1971 that we</font>

131
00:04:53,010 --> 00:04:57,840
basically were only able<font color="#E5E5E5"> to pack 23,000</font>

132
00:04:55,440 --> 00:05:00,900
transistors on a motherboard today and

133
00:04:57,840 --> 00:05:03,900
this is not<font color="#E5E5E5"> even recent but today we</font>

134
00:05:00,900 --> 00:05:06,090
have billions of transistors happening

135
00:05:03,900 --> 00:05:08,190
on these these<font color="#E5E5E5"> sorts of hardware</font>

136
00:05:06,090 --> 00:05:10,320
components even the<font color="#E5E5E5"> smartphone that</font><font color="#CCCCCC"> you</font>

137
00:05:08,190 --> 00:05:13,020
have in your pocket has billions of

138
00:05:10,320 --> 00:05:15,240
transistors and so what basically

139
00:05:13,020 --> 00:05:17,640
happened over the last 40 some years is

140
00:05:15,240 --> 00:05:20,130
that cores became a lot<font color="#E5E5E5"> more</font><font color="#CCCCCC"> energy</font>

141
00:05:17,640 --> 00:05:22,560
efficient they became faster they became

142
00:05:20,130 --> 00:05:25,740
cheaper to manufacture and so this sort

143
00:05:22,560 --> 00:05:27,780
of cord density basically amounted to a

144
00:05:25,740 --> 00:05:29,790
couple of<font color="#CCCCCC"> things most importantly is</font>

145
00:05:27,780 --> 00:05:32,099
that Moore's<font color="#CCCCCC"> Law really took effect I</font>

146
00:05:29,790 --> 00:05:34,470
think back<font color="#CCCCCC"> in the 80s I remember when I</font>

147
00:05:32,100 --> 00:05:36,750
<font color="#CCCCCC">was mucking around on an old dose based</font>

148
00:05:34,470 --> 00:05:39,720
system and I<font color="#E5E5E5"> remember every</font><font color="#CCCCCC"> year</font>

149
00:05:36,750 --> 00:05:41,280
consistently having having<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font>

150
00:05:39,720 --> 00:05:43,290
looking at sorts of trade show

151
00:05:41,280 --> 00:05:45,419
periodicals and whatnot seeing how we

152
00:05:43,290 --> 00:05:48,270
were sort of upgrading and doubling our

153
00:05:45,420 --> 00:05:51,390
processors every year<font color="#CCCCCC"> and we sort</font><font color="#E5E5E5"> of hit</font>

154
00:05:48,270 --> 00:05:53,130
a brick wall and as a former gamer it

155
00:05:51,390 --> 00:05:54,270
was<font color="#E5E5E5"> kind of frustrating right when you</font>

156
00:05:53,130 --> 00:05:55,440
wanted<font color="#E5E5E5"> to run the latest and greatest</font>

157
00:05:54,270 --> 00:05:57,419
games and he sort<font color="#E5E5E5"> of hit a brick wall</font>

158
00:05:55,440 --> 00:05:59,520
because the processors were in fact

159
00:05:57,419 --> 00:06:01,289
getting faster and they weren't really

160
00:05:59,520 --> 00:06:03,690
improving what ultimately started

161
00:06:01,290 --> 00:06:05,490
happening was that we started seeing the

162
00:06:03,690 --> 00:06:07,140
constraints of Moore's<font color="#CCCCCC"> Law and applied</font>

163
00:06:05,490 --> 00:06:09,150
that to basically stacking all of these

164
00:06:07,140 --> 00:06:10,860
different cores so we went from single

165
00:06:09,150 --> 00:06:13,979
core processors to dual core two quad

166
00:06:10,860 --> 00:06:15,530
core to<font color="#E5E5E5"> eight core etc etc and the</font>

167
00:06:13,980 --> 00:06:18,990
interesting<font color="#CCCCCC"> thing is in the state of</font>

168
00:06:15,530 --> 00:06:20,789
computation we we started to solve

169
00:06:18,990 --> 00:06:23,120
bigger problems because we had access<font color="#CCCCCC"> to</font>

170
00:06:20,790 --> 00:06:24,960
<font color="#CCCCCC">more and more technology and</font>

171
00:06:23,120 --> 00:06:27,690
supercomputers and everybody knows about

172
00:06:24,960 --> 00:06:30,330
cray there's all sorts of fun things and

173
00:06:27,690 --> 00:06:32,010
fun photos about that stuff if you're

174
00:06:30,330 --> 00:06:33,450
into Kanye West there's a fun play on

175
00:06:32,010 --> 00:06:36,780
<font color="#CCCCCC">gray with one of his songs and that's</font>

176
00:06:33,450 --> 00:06:38,960
all say there is a trend<font color="#E5E5E5"> that we've seen</font>

177
00:06:36,780 --> 00:06:43,049
which is we've gone from large-scale

178
00:06:38,960 --> 00:06:45,810
supercomputers to grids and we saw grids

179
00:06:43,050 --> 00:06:48,300
be a real thing in the last 10 years<font color="#CCCCCC"> the</font>

180
00:06:45,810 --> 00:06:51,090
idea of look we're not<font color="#E5E5E5"> really able</font><font color="#CCCCCC"> to</font>

181
00:06:48,300 --> 00:06:53,130
get 80 cores in a really efficient way

182
00:06:51,090 --> 00:06:55,560
into a single server it's not really

183
00:06:53,130 --> 00:06:57,880
possible but instead let's<font color="#E5E5E5"> spin this</font>

184
00:06:55,560 --> 00:07:01,330
thing out to multiple physical

185
00:06:57,880 --> 00:07:03,730
instances but grids have a significant

186
00:07:01,330 --> 00:07:05,229
issue which is they're mostly predicated

187
00:07:03,730 --> 00:07:06,400
on hardware at least a lot<font color="#E5E5E5"> of</font>

188
00:07:05,230 --> 00:07:09,040
traditional grids were predicated on

189
00:07:06,400 --> 00:07:11,650
hardware based solutions and those have

190
00:07:09,040 --> 00:07:12,880
insane limits most importantly there's a

191
00:07:11,650 --> 00:07:14,799
physical boundary there's a physical

192
00:07:12,880 --> 00:07:17,469
limitation to how you set that thing up

193
00:07:14,800 --> 00:07:19,540
well fortunately for us this happened

194
00:07:17,470 --> 00:07:20,770
which was<font color="#E5E5E5"> the idea of</font><font color="#CCCCCC"> being able</font><font color="#E5E5E5"> to take</font>

195
00:07:19,540 --> 00:07:22,570
<font color="#E5E5E5">everything that you're running from a</font>

196
00:07:20,770 --> 00:07:24,580
computational perspective physically and

197
00:07:22,570 --> 00:07:26,200
shift that into a virtual space and

198
00:07:24,580 --> 00:07:27,700
that's ultimately what we think of the

199
00:07:26,200 --> 00:07:29,320
cloud that's that's ultimately what<font color="#CCCCCC"> it</font>

200
00:07:27,700 --> 00:07:31,240
is it's basically compute processes

201
00:07:29,320 --> 00:07:32,860
compute instances that are running

202
00:07:31,240 --> 00:07:33,850
somewhere else<font color="#E5E5E5"> other than the</font>

203
00:07:32,860 --> 00:07:38,920
environment<font color="#CCCCCC"> that you're</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> right now</font>

204
00:07:33,850 --> 00:07:40,660
it's easy to spin up<font color="#E5E5E5"> its and this sort</font>

205
00:07:38,920 --> 00:07:44,320
of shifting the economics a little bit

206
00:07:40,660 --> 00:07:47,080
but you can go<font color="#E5E5E5"> from zero instances to</font>

207
00:07:44,320 --> 00:07:48,940
thousands of instances inside of ten

208
00:07:47,080 --> 00:07:51,550
minutes you can never have done that

209
00:07:48,940 --> 00:07:53,260
before<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to get your grid up before</font>

210
00:07:51,550 --> 00:07:55,780
and I remember<font color="#CCCCCC"> having to</font><font color="#E5E5E5"> do this at</font>

211
00:07:53,260 --> 00:07:57,820
places like myspace at places at JPL at

212
00:07:55,780 --> 00:07:59,739
NASA<font color="#CCCCCC"> too if you</font><font color="#E5E5E5"> wanted to build a grid</font>

213
00:07:57,820 --> 00:08:00,880
you'd have to procure lots of hardware

214
00:07:59,740 --> 00:08:02,740
you have to set it<font color="#E5E5E5"> up you'd have to</font>

215
00:08:00,880 --> 00:08:04,840
bring your own networking gear you don't

216
00:08:02,740 --> 00:08:06,790
have to do that<font color="#E5E5E5"> anymore now if you I</font>

217
00:08:04,840 --> 00:08:08,830
wanted<font color="#E5E5E5"> to start performing and starting</font>

218
00:08:06,790 --> 00:08:11,020
<font color="#CCCCCC">to do data analysis on a large scale</font><font color="#E5E5E5"> I</font>

219
00:08:08,830 --> 00:08:14,109
<font color="#E5E5E5">absolutely can for relatively low cost</font>

220
00:08:11,020 --> 00:08:16,150
so cloud<font color="#CCCCCC"> computing has been great for</font>

221
00:08:14,110 --> 00:08:17,770
several reasons first of all if you ever

222
00:08:16,150 --> 00:08:21,159
wanted to do<font color="#E5E5E5"> asynchronous or late</font>

223
00:08:17,770 --> 00:08:22,780
analysis on<font color="#CCCCCC"> large scale or larger data</font>

224
00:08:21,160 --> 00:08:24,310
sets and large data sets not being

225
00:08:22,780 --> 00:08:26,500
megabytes but large data sets being

226
00:08:24,310 --> 00:08:29,020
petabytes of data terabytes of data you

227
00:08:26,500 --> 00:08:31,810
can do that for a lot cheaper today a

228
00:08:29,020 --> 00:08:32,829
petabyte costs petabytes storage costs

229
00:08:31,810 --> 00:08:35,200
around two hundred thousand dollars

230
00:08:32,830 --> 00:08:36,880
<font color="#E5E5E5">that's it for storing a petabyte today</font>

231
00:08:35,200 --> 00:08:38,650
that's an insane amount of information

232
00:08:36,880 --> 00:08:40,870
<font color="#E5E5E5">that you can store relatively cheaply</font>

233
00:08:38,650 --> 00:08:42,189
and the cool thing is if you wanted to

234
00:08:40,870 --> 00:08:43,990
<font color="#E5E5E5">put</font><font color="#CCCCCC"> that in the cloud you</font><font color="#E5E5E5"> absolutely</font>

235
00:08:42,190 --> 00:08:45,670
could and<font color="#E5E5E5"> you can chart it and fan that</font>

236
00:08:43,990 --> 00:08:47,380
data across so if you want<font color="#E5E5E5"> to do</font>

237
00:08:45,670 --> 00:08:51,219
distributed MapReduce you absolutely

238
00:08:47,380 --> 00:08:52,720
could so we have this thesis and it's a

239
00:08:51,220 --> 00:08:55,480
thesis that when we were<font color="#CCCCCC"> starting the</font>

240
00:08:52,720 --> 00:08:57,580
company of what we believe in with

241
00:08:55,480 --> 00:08:58,960
respect to computation and it sort of

242
00:08:57,580 --> 00:09:01,210
put all of these<font color="#E5E5E5"> things together we</font>

243
00:08:58,960 --> 00:09:02,500
thoroughly believe that the people<font color="#E5E5E5"> who</font>

244
00:09:01,210 --> 00:09:04,420
are going<font color="#CCCCCC"> to win the sort</font><font color="#E5E5E5"> of next</font>

245
00:09:02,500 --> 00:09:06,130
<font color="#E5E5E5">generation of computing will be those</font>

246
00:09:04,420 --> 00:09:08,740
who take advantage of all the core

247
00:09:06,130 --> 00:09:10,450
density in the<font color="#E5E5E5"> world so I know it's a</font>

248
00:09:08,740 --> 00:09:11,410
grandiose statement but<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> think</font>

249
00:09:10,450 --> 00:09:14,410
about it today

250
00:09:11,410 --> 00:09:16,269
your laptop your laptop may have four

251
00:09:14,410 --> 00:09:18,219
cores may have two cores it doesn't

252
00:09:16,269 --> 00:09:20,560
matter a lot of your traditional

253
00:09:18,220 --> 00:09:21,850
<font color="#E5E5E5">programs and applications can really</font>

254
00:09:20,560 --> 00:09:23,560
only take advantage of one of those

255
00:09:21,850 --> 00:09:26,620
cores so if you're building<font color="#E5E5E5"> your</font>

256
00:09:23,560 --> 00:09:29,649
application and<font color="#E5E5E5"> C or C++ if you are not</font>

257
00:09:26,620 --> 00:09:31,810
programming it with correct threading or

258
00:09:29,649 --> 00:09:33,670
a way where you<font color="#CCCCCC"> can basically</font><font color="#E5E5E5"> take your</font>

259
00:09:31,810 --> 00:09:36,008
process and have that fan across

260
00:09:33,670 --> 00:09:37,810
multiple processors you're not<font color="#E5E5E5"> taking</font>

261
00:09:36,009 --> 00:09:40,509
full advantage of all the computational

262
00:09:37,810 --> 00:09:42,189
resources at<font color="#CCCCCC"> your fingertips so the</font>

263
00:09:40,509 --> 00:09:44,139
clouds been interesting because now<font color="#CCCCCC"> I</font>

264
00:09:42,189 --> 00:09:46,420
can spin up<font color="#E5E5E5"> a quad-core box I can</font><font color="#CCCCCC"> spin</font>

265
00:09:44,139 --> 00:09:48,339
up an<font color="#CCCCCC"> eight-core box for very low</font><font color="#E5E5E5"> cost</font>

266
00:09:46,420 --> 00:09:49,810
and in a very quick amount of time but

267
00:09:48,339 --> 00:09:51,579
the problem<font color="#CCCCCC"> is the application</font><font color="#E5E5E5"> and the</font>

268
00:09:49,810 --> 00:09:53,229
software really hasn't changed to take

269
00:09:51,579 --> 00:09:54,910
advantage<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that traditionally the</font>

270
00:09:53,230 --> 00:09:57,759
solution has<font color="#CCCCCC"> been if I've got</font><font color="#E5E5E5"> a fork or</font>

271
00:09:54,910 --> 00:09:59,889
box and I've got a simple<font color="#CCCCCC"> process I just</font>

272
00:09:57,759 --> 00:10:02,800
spawned that process<font color="#CCCCCC"> four more times and</font>

273
00:09:59,889 --> 00:10:04,360
so it doesn't matter I'm guaranteed that

274
00:10:02,800 --> 00:10:05,620
each individual process or each

275
00:10:04,360 --> 00:10:07,060
individual instance is going to take

276
00:10:05,620 --> 00:10:12,100
advantage<font color="#CCCCCC"> of a particular core or a</font>

277
00:10:07,060 --> 00:10:14,170
processor so we basically realized that

278
00:10:12,100 --> 00:10:15,490
this is going<font color="#E5E5E5"> to be the big thing how do</font>

279
00:10:14,170 --> 00:10:17,079
we take advantage<font color="#CCCCCC"> of all</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> chords</font>

280
00:10:15,490 --> 00:10:19,209
especially when we've<font color="#CCCCCC"> got access to all</font>

281
00:10:17,079 --> 00:10:20,790
these things so the case study that

282
00:10:19,209 --> 00:10:24,209
<font color="#CCCCCC">we're going</font><font color="#E5E5E5"> to be talking about today is</font>

283
00:10:20,790 --> 00:10:26,680
starting with<font color="#E5E5E5"> Amazon Web Services and</font>

284
00:10:24,209 --> 00:10:29,469
<font color="#E5E5E5">will dig a little bit more into this but</font>

285
00:10:26,680 --> 00:10:31,599
go it's a programming<font color="#E5E5E5"> language developed</font>

286
00:10:29,470 --> 00:10:34,899
by google<font color="#E5E5E5"> it's and the way</font><font color="#CCCCCC"> I like to</font>

287
00:10:31,600 --> 00:10:38,680
think<font color="#E5E5E5"> about it is if</font><font color="#CCCCCC"> C and Python met at</font>

288
00:10:34,899 --> 00:10:41,819
a bar maybe on Rainey Street and they

289
00:10:38,680 --> 00:10:46,689
had a kid that's<font color="#E5E5E5"> what go would be and</font>

290
00:10:41,819 --> 00:10:51,370
then basically it's a language<font color="#E5E5E5"> that has</font>

291
00:10:46,689 --> 00:10:52,750
very robust asynchronous abilities and i

292
00:10:51,370 --> 00:10:53,589
would say concurrency primitives is

293
00:10:52,750 --> 00:10:55,720
probably the correct way of phrasing

294
00:10:53,589 --> 00:10:58,839
that and we'll go<font color="#E5E5E5"> into that in a second</font>

295
00:10:55,720 --> 00:11:01,839
so why AWS for us it's a strong

296
00:10:58,839 --> 00:11:03,699
ecosystem it's our team was fortunately

297
00:11:01,839 --> 00:11:05,350
a little bit friendly or with a little

298
00:11:03,699 --> 00:11:08,109
more<font color="#E5E5E5"> familiar i should say with AWS</font>

299
00:11:05,350 --> 00:11:10,990
<font color="#E5E5E5">offerings very robust services out of</font>

300
00:11:08,110 --> 00:11:13,329
the gate so everything from<font color="#E5E5E5"> dns to load</font>

301
00:11:10,990 --> 00:11:14,949
balancing to notifications to<font color="#E5E5E5"> queueing</font>

302
00:11:13,329 --> 00:11:16,540
engines will dig into some of these

303
00:11:14,949 --> 00:11:18,758
<font color="#E5E5E5">components the pros and</font><font color="#CCCCCC"> cons of all of</font>

304
00:11:16,540 --> 00:11:20,349
these things<font color="#E5E5E5"> and learning lessons it's</font>

305
00:11:18,759 --> 00:11:22,689
also a predictable and competitive cost

306
00:11:20,350 --> 00:11:24,160
model and I think all the cloud

307
00:11:22,689 --> 00:11:24,819
providers can say that it's certainly

308
00:11:24,160 --> 00:11:27,488
true

309
00:11:24,819 --> 00:11:29,259
whether you go from rackspace AWS or

310
00:11:27,489 --> 00:11:30,549
Google compute engine everybody's sort

311
00:11:29,259 --> 00:11:32,739
of competing with each other and when

312
00:11:30,549 --> 00:11:35,829
these cloud providers compete we all win

313
00:11:32,739 --> 00:11:37,389
it's<font color="#CCCCCC"> awesome the other thing is</font><font color="#E5E5E5"> it's all</font>

314
00:11:35,829 --> 00:11:38,858
so predictable when you<font color="#E5E5E5"> choose any one</font>

315
00:11:37,389 --> 00:11:40,479
of these cloud providers it's absolutely

316
00:11:38,859 --> 00:11:43,569
predictable if you have to deal with<font color="#E5E5E5"> a</font>

317
00:11:40,479 --> 00:11:45,789
certain amount of workload now why go so

318
00:11:43,569 --> 00:11:48,219
<font color="#E5E5E5">I already mentioned it's got on an</font>

319
00:11:45,789 --> 00:11:49,689
awesome concurrency model with respect

320
00:11:48,220 --> 00:11:51,160
to go routines and channels it's an

321
00:11:49,689 --> 00:11:52,868
alternative way<font color="#CCCCCC"> of thinking about your</font>

322
00:11:51,160 --> 00:11:54,549
problem so traditionally<font color="#CCCCCC"> you have to</font>

323
00:11:52,869 --> 00:11:56,019
think<font color="#E5E5E5"> about threads you have to think</font>

324
00:11:54,549 --> 00:11:58,029
about<font color="#E5E5E5"> joining threads you have to think</font>

325
00:11:56,019 --> 00:12:00,160
about thread synchronization and it's

326
00:11:58,029 --> 00:12:01,629
extremely tedious and it's off an

327
00:12:00,160 --> 00:12:03,608
<font color="#CCCCCC">error-prone when you're developing a</font>

328
00:12:01,629 --> 00:12:05,799
robust application sometimes<font color="#E5E5E5"> it's</font>

329
00:12:03,609 --> 00:12:07,989
problematic of who's the producer who's

330
00:12:05,799 --> 00:12:10,179
the consumed consumer am I locking<font color="#E5E5E5"> am I</font>

331
00:12:07,989 --> 00:12:11,799
deadlocking you run into weird places of

332
00:12:10,179 --> 00:12:14,139
contention when you're developing your

333
00:12:11,799 --> 00:12:16,209
application well go ships with these two

334
00:12:14,139 --> 00:12:18,759
primitives that<font color="#E5E5E5"> make life amazing for us</font>

335
00:12:16,209 --> 00:12:20,589
first is go routines goroutines is

336
00:12:18,759 --> 00:12:23,049
basically an ability<font color="#E5E5E5"> to execute a</font>

337
00:12:20,589 --> 00:12:24,369
function<font color="#CCCCCC"> that's independent of your</font>

338
00:12:23,049 --> 00:12:26,439
current running process so if I

339
00:12:24,369 --> 00:12:28,119
basically wanted to<font color="#E5E5E5"> I could give</font><font color="#CCCCCC"> it a</font>

340
00:12:26,439 --> 00:12:29,978
function and just say go do<font color="#E5E5E5"> this in the</font>

341
00:12:28,119 --> 00:12:31,209
background somewhere else that's it and

342
00:12:29,979 --> 00:12:32,859
completely forget<font color="#CCCCCC"> about it my</font>

343
00:12:31,209 --> 00:12:35,439
application continues to function as it

344
00:12:32,859 --> 00:12:38,139
is the second is channels and channels

345
00:12:35,439 --> 00:12:40,899
allows us to basically<font color="#CCCCCC"> communicate just</font>

346
00:12:38,139 --> 00:12:42,669
by sharing data so channels and the way

347
00:12:40,899 --> 00:12:44,589
to think about a channel is just<font color="#CCCCCC"> a</font>

348
00:12:42,669 --> 00:12:46,149
buffer and<font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> is that if I wanted</font>

349
00:12:44,589 --> 00:12:48,009
<font color="#CCCCCC">to communicate between different</font><font color="#E5E5E5"> go</font>

350
00:12:46,149 --> 00:12:49,929
routines I could do that<font color="#E5E5E5"> just by putting</font>

351
00:12:48,009 --> 00:12:51,639
a data that's strongly typed or a data

352
00:12:49,929 --> 00:12:54,129
blob that strongly typed into a channel

353
00:12:51,639 --> 00:12:55,600
and have that be used by anything else

354
00:12:54,129 --> 00:12:57,249
so<font color="#E5E5E5"> you can have buffer channels you can</font>

355
00:12:55,600 --> 00:12:59,049
have very large channels but it gives

356
00:12:57,249 --> 00:13:00,669
you<font color="#CCCCCC"> an ability</font><font color="#E5E5E5"> to communicate and it's</font>

357
00:12:59,049 --> 00:13:02,319
absolutely<font color="#E5E5E5"> important when you're</font>

358
00:13:00,669 --> 00:13:04,149
designing and developing really large

359
00:13:02,319 --> 00:13:05,889
api's and large workload systems where

360
00:13:04,149 --> 00:13:09,970
you need to respond back to<font color="#E5E5E5"> your</font>

361
00:13:05,889 --> 00:13:11,529
customer sub-second and so when you need

362
00:13:09,970 --> 00:13:13,209
<font color="#E5E5E5">to do</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> means that</font><font color="#CCCCCC"> you can't just</font>

363
00:13:11,529 --> 00:13:15,220
do all that<font color="#CCCCCC"> work upfront you need</font><font color="#E5E5E5"> to be</font>

364
00:13:13,209 --> 00:13:16,388
able<font color="#E5E5E5"> to fan out distribute send your</font>

365
00:13:15,220 --> 00:13:17,919
work to a channel send it to a

366
00:13:16,389 --> 00:13:19,809
background thread do the processing you

367
00:13:17,919 --> 00:13:21,309
need to but<font color="#E5E5E5"> just</font><font color="#CCCCCC"> quickly respond back to</font>

368
00:13:19,809 --> 00:13:23,279
your customer let them know that<font color="#E5E5E5"> okay</font>

369
00:13:21,309 --> 00:13:25,569
here's your<font color="#E5E5E5"> result everything is cool</font>

370
00:13:23,279 --> 00:13:28,539
the other fun thing about go is<font color="#CCCCCC"> it's</font>

371
00:13:25,569 --> 00:13:30,069
aside from<font color="#E5E5E5"> being strongly typed it also</font>

372
00:13:28,539 --> 00:13:32,109
compiles and<font color="#E5E5E5"> it compiles into binaries</font>

373
00:13:30,069 --> 00:13:34,389
and it makes it fantastic so if we're

374
00:13:32,109 --> 00:13:35,919
deploying across customers or<font color="#CCCCCC"> for</font>

375
00:13:34,389 --> 00:13:38,350
deploying across multiple operating

376
00:13:35,919 --> 00:13:38,750
systems and architectures we can do that

377
00:13:38,350 --> 00:13:40,220
very easy

378
00:13:38,750 --> 00:13:42,020
<font color="#E5E5E5">just by having a different runtime and</font>

379
00:13:40,220 --> 00:13:44,390
<font color="#E5E5E5">I'll show you some fun stuff in a little</font>

380
00:13:42,020 --> 00:13:47,930
bit<font color="#CCCCCC"> I put unicode down here and this is</font>

381
00:13:44,390 --> 00:13:49,850
<font color="#CCCCCC">a real big one for us so how many people</font>

382
00:13:47,930 --> 00:13:51,229
<font color="#CCCCCC">here have some sort of scripting</font>

383
00:13:49,850 --> 00:13:55,160
language background like for instance

384
00:13:51,230 --> 00:13:58,000
<font color="#E5E5E5">Python yeah so how many people</font><font color="#CCCCCC"> have been</font>

385
00:13:55,160 --> 00:14:01,069
burnt by<font color="#E5E5E5"> Python and Unicode</font><font color="#CCCCCC"> and strings</font>

386
00:13:58,000 --> 00:14:03,740
yeah it's it's pretty insane because

387
00:14:01,070 --> 00:14:06,320
getting<font color="#E5E5E5"> Unicode right is an incredibly</font>

388
00:14:03,740 --> 00:14:08,390
difficult<font color="#E5E5E5"> problem and if you're using</font>

389
00:14:06,320 --> 00:14:10,160
scripting languages today it's very very

390
00:14:08,390 --> 00:14:12,230
difficult and these languages are

391
00:14:10,160 --> 00:14:14,089
getting it right but they sort of go

392
00:14:12,230 --> 00:14:16,760
through various stumbling blocks go

393
00:14:14,090 --> 00:14:18,980
ships with almost a complete the almost

394
00:14:16,760 --> 00:14:22,250
the complete Unicode specification so

395
00:14:18,980 --> 00:14:24,590
it's got the full utf-8 utf-16 table or

396
00:14:22,250 --> 00:14:26,840
tables which basically means that<font color="#E5E5E5"> we can</font>

397
00:14:24,590 --> 00:14:29,210
map character sets which also means that

398
00:14:26,840 --> 00:14:31,010
<font color="#E5E5E5">if we see a utf-8 string or a utf-8</font>

399
00:14:29,210 --> 00:14:33,380
character we can understand it as utf-8

400
00:14:31,010 --> 00:14:36,319
and<font color="#CCCCCC"> I have to do any funky conversions</font>

401
00:14:33,380 --> 00:14:39,740
or worry about buffer overflows or worry

402
00:14:36,320 --> 00:14:42,940
about not missing something now shifting

403
00:14:39,740 --> 00:14:46,490
gears a little bit security philosophy

404
00:14:42,940 --> 00:14:48,920
so here<font color="#E5E5E5"> are the true challenges that we</font>

405
00:14:46,490 --> 00:14:50,480
see from our side<font color="#E5E5E5"> and I think from being</font>

406
00:14:48,920 --> 00:14:51,770
a part of this industry now this is on

407
00:14:50,480 --> 00:14:53,930
the security space for<font color="#E5E5E5"> more than 10</font>

408
00:14:51,770 --> 00:14:56,329
years it's something<font color="#E5E5E5"> that we've and I've</font>

409
00:14:53,930 --> 00:15:00,229
definitely noticed one detection has

410
00:14:56,330 --> 00:15:03,050
improved you've seen a huge sort of

411
00:15:00,230 --> 00:15:05,000
effort<font color="#E5E5E5"> and initiative on</font><font color="#CCCCCC"> the detection</font>

412
00:15:03,050 --> 00:15:06,410
side of things<font color="#E5E5E5"> so you've got novel</font>

413
00:15:05,000 --> 00:15:07,970
technologies and newer technologies

414
00:15:06,410 --> 00:15:09,319
companies like contrast for instance

415
00:15:07,970 --> 00:15:12,860
they're doing some really cool things in

416
00:15:09,320 --> 00:15:14,660
the space of I asked but you also have

417
00:15:12,860 --> 00:15:16,370
this increase in large number of

418
00:15:14,660 --> 00:15:18,050
backlogs and difficulties and

419
00:15:16,370 --> 00:15:20,030
vulnerabilities and how do<font color="#E5E5E5"> you prevent</font>

420
00:15:18,050 --> 00:15:22,370
against this stuff how do you how do<font color="#E5E5E5"> I</font>

421
00:15:20,030 --> 00:15:24,500
sort of take my thousand my thousand

422
00:15:22,370 --> 00:15:26,300
issues and go down to<font color="#CCCCCC"> a reasonable set</font>

423
00:15:24,500 --> 00:15:29,390
because that may<font color="#E5E5E5"> may be unreasonable for</font>

424
00:15:26,300 --> 00:15:31,699
my team we're also still relying on<font color="#E5E5E5"> past</font>

425
00:15:29,390 --> 00:15:33,560
definitions and signatures to do a lot

426
00:15:31,700 --> 00:15:35,870
of our work for us so relying on regular

427
00:15:33,560 --> 00:15:38,239
<font color="#CCCCCC">expressions string replacements just to</font>

428
00:15:35,870 --> 00:15:40,990
understand whether or not a query or a

429
00:15:38,240 --> 00:15:43,130
fragment contains the word delete from

430
00:15:40,990 --> 00:15:44,390
we don't<font color="#E5E5E5"> know where that's going we</font>

431
00:15:43,130 --> 00:15:45,170
don't<font color="#E5E5E5"> know what that's going to do we</font>

432
00:15:44,390 --> 00:15:46,819
don't<font color="#E5E5E5"> know if it's going to hit a</font>

433
00:15:45,170 --> 00:15:48,860
database engine or not but we're still

434
00:15:46,820 --> 00:15:50,480
using technology to determine whether<font color="#E5E5E5"> or</font>

435
00:15:48,860 --> 00:15:51,580
<font color="#E5E5E5">not that's a way that's going to execute</font>

436
00:15:50,480 --> 00:15:54,010
sequel<font color="#E5E5E5"> injection</font>

437
00:15:51,580 --> 00:15:56,890
and the key thing down<font color="#CCCCCC"> here is that</font>

438
00:15:54,010 --> 00:15:58,270
anybody can be an attacker if I wanted

439
00:15:56,890 --> 00:16:00,310
<font color="#CCCCCC">to today I</font><font color="#E5E5E5"> could grab an open source</font>

440
00:15:58,270 --> 00:16:02,680
piece of software and launch millions of

441
00:16:00,310 --> 00:16:04,479
attacks on any service whatsoever and

442
00:16:02,680 --> 00:16:05,739
this sort<font color="#E5E5E5"> of combines what I was</font><font color="#CCCCCC"> just</font>

443
00:16:04,480 --> 00:16:07,990
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the computational</font>

444
00:16:05,740 --> 00:16:09,910
side which is that someone you know

445
00:16:07,990 --> 00:16:12,160
someone anywhere in the<font color="#E5E5E5"> world to be a</font>

446
00:16:09,910 --> 00:16:13,480
kid can just go ahead<font color="#E5E5E5"> download some open</font>

447
00:16:12,160 --> 00:16:15,819
source software and if they wanted to

448
00:16:13,480 --> 00:16:17,380
craft a ton of unique payloads at your

449
00:16:15,820 --> 00:16:19,480
web service or<font color="#E5E5E5"> your web application they</font>

450
00:16:17,380 --> 00:16:20,860
could do<font color="#E5E5E5"> that today and they could Doss</font>

451
00:16:19,480 --> 00:16:22,630
you they candy dots you we see this

452
00:16:20,860 --> 00:16:24,540
<font color="#E5E5E5">happen all the time and there's some fun</font>

453
00:16:22,630 --> 00:16:27,430
anecdotes that we can share about that

454
00:16:24,540 --> 00:16:30,490
so when it comes<font color="#E5E5E5"> to preventing these</font>

455
00:16:27,430 --> 00:16:33,670
kinds of attacks you need two things<font color="#CCCCCC"> you</font>

456
00:16:30,490 --> 00:16:35,500
need content and you need context so

457
00:16:33,670 --> 00:16:37,089
content being the actual content itself

458
00:16:35,500 --> 00:16:39,100
that's going<font color="#E5E5E5"> to go back out to a browser</font>

459
00:16:37,090 --> 00:16:41,440
or the database query but you also need

460
00:16:39,100 --> 00:16:43,150
context where is this going to go where

461
00:16:41,440 --> 00:16:44,980
is this coming from where is this

462
00:16:43,150 --> 00:16:47,620
payload going to end up on<font color="#E5E5E5"> a web browser</font>

463
00:16:44,980 --> 00:16:49,360
or in my HTML document is it going to be

464
00:16:47,620 --> 00:16:51,220
out in<font color="#E5E5E5"> the Dom itself is it going to be</font>

465
00:16:49,360 --> 00:16:53,410
inside<font color="#CCCCCC"> of an attribute is it going to be</font>

466
00:16:51,220 --> 00:16:55,990
inside<font color="#CCCCCC"> of a JavaScript variable where is</font>

467
00:16:53,410 --> 00:16:58,600
this actually going to go so to do

468
00:16:55,990 --> 00:17:00,760
payload analysis you've got to develop a

469
00:16:58,600 --> 00:17:02,830
compiler and when you talk about

470
00:17:00,760 --> 00:17:04,690
developing a compiler there's two very

471
00:17:02,830 --> 00:17:07,150
fundamental aspects of developing a

472
00:17:04,690 --> 00:17:08,920
compiler which is tokenizing so you need

473
00:17:07,150 --> 00:17:10,630
to<font color="#E5E5E5"> be able to iterate room by room and</font>

474
00:17:08,920 --> 00:17:12,610
the second is you need<font color="#E5E5E5"> to be able to</font>

475
00:17:10,630 --> 00:17:13,780
parse so after<font color="#CCCCCC"> you</font><font color="#E5E5E5"> build up your token</font>

476
00:17:12,609 --> 00:17:16,030
stream you have to be able to parse that

477
00:17:13,780 --> 00:17:17,980
and you call some sort<font color="#CCCCCC"> of function</font>

478
00:17:16,030 --> 00:17:19,899
afterwards to evaluate it and that can

479
00:17:17,980 --> 00:17:21,190
return anything you want and now the

480
00:17:19,900 --> 00:17:24,100
reason why I mentioning all of this

481
00:17:21,190 --> 00:17:25,930
stuff is part of what we do requires us

482
00:17:24,099 --> 00:17:29,320
to have all of this so to tie everything

483
00:17:25,930 --> 00:17:31,900
back to why we built our stuff and go go

484
00:17:29,320 --> 00:17:33,669
makes this a lot easier having full an

485
00:17:31,900 --> 00:17:36,550
amazing first class unicode support is

486
00:17:33,670 --> 00:17:38,890
amazing and being<font color="#E5E5E5"> able to do this at an</font>

487
00:17:36,550 --> 00:17:40,690
NGO really allows us to do this and

488
00:17:38,890 --> 00:17:44,110
express this code that would have

489
00:17:40,690 --> 00:17:46,660
ordinarily been maybe 30 40 thousand

490
00:17:44,110 --> 00:17:49,389
lines of<font color="#E5E5E5"> c go allows us to to really</font>

491
00:17:46,660 --> 00:17:51,910
<font color="#E5E5E5">express this</font><font color="#CCCCCC"> at a</font><font color="#E5E5E5"> fraction so we save</font>

492
00:17:49,390 --> 00:17:54,520
ninety percent of the lines of code<font color="#E5E5E5"> and</font>

493
00:17:51,910 --> 00:17:57,910
we get all the safety<font color="#CCCCCC"> of</font><font color="#E5E5E5"> unicode plus we</font>

494
00:17:54,520 --> 00:18:00,250
<font color="#E5E5E5">get a robust asynchronous model now when</font>

495
00:17:57,910 --> 00:18:02,260
we<font color="#CCCCCC"> talk about context there's several</font>

496
00:18:00,250 --> 00:18:04,420
ways<font color="#CCCCCC"> you can do that one is through</font><font color="#E5E5E5"> by</font>

497
00:18:02,260 --> 00:18:05,158
code injection agents plugins or shims

498
00:18:04,420 --> 00:18:06,809
or

499
00:18:05,159 --> 00:18:09,539
other is when you provide it to an<font color="#CCCCCC"> sdk</font>

500
00:18:06,809 --> 00:18:12,989
and this is a really great segue now

501
00:18:09,539 --> 00:18:15,570
into what we<font color="#CCCCCC"> actually mean by parsing</font>

502
00:18:12,989 --> 00:18:16,950
and content analysis so this is

503
00:18:15,570 --> 00:18:19,229
something<font color="#E5E5E5"> that runs through our parsers</font>

504
00:18:16,950 --> 00:18:21,659
this is what we yield back as an example

505
00:18:19,229 --> 00:18:23,999
parse tree for instance and it's a looks

506
00:18:21,659 --> 00:18:25,799
like<font color="#CCCCCC"> a nice pretty tree of</font><font color="#E5E5E5"> all sorts of</font>

507
00:18:23,999 --> 00:18:27,720
<font color="#CCCCCC">different nodes but when</font><font color="#E5E5E5"> you write it</font>

508
00:18:25,799 --> 00:18:29,700
through a parser when you tokenize this

509
00:18:27,720 --> 00:18:31,499
when you parse this you're<font color="#E5E5E5"> able to sort</font>

510
00:18:29,700 --> 00:18:33,090
of identify interesting constructs

511
00:18:31,499 --> 00:18:34,619
you're able<font color="#CCCCCC"> to identify what are some</font>

512
00:18:33,090 --> 00:18:36,988
bad nodes and what are<font color="#E5E5E5"> some good nodes</font>

513
00:18:34,619 --> 00:18:39,059
for instance a div tag may be a good

514
00:18:36,989 --> 00:18:41,429
note whereas a script tag may in fact be

515
00:18:39,059 --> 00:18:43,830
a bad note now being able to do this on

516
00:18:41,429 --> 00:18:46,159
the server side can involve lots and

517
00:18:43,830 --> 00:18:48,720
lots of resources and it also involves

518
00:18:46,159 --> 00:18:49,950
not only heavy on the compute side but

519
00:18:48,720 --> 00:18:52,619
when it comes to analytics when it comes

520
00:18:49,950 --> 00:18:55,200
to storage it's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> work so now</font>

521
00:18:52,619 --> 00:18:56,999
let's dig more into how we built what we

522
00:18:55,200 --> 00:19:00,359
built and what this looks like overall

523
00:18:56,999 --> 00:19:02,039
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the first time as a company</font>

524
00:19:00,359 --> 00:19:03,869
we've ever talked<font color="#CCCCCC"> about this we've ever</font>

525
00:19:02,039 --> 00:19:05,849
talked<font color="#E5E5E5"> about the infrastructure</font><font color="#CCCCCC"> that we</font>

526
00:19:03,869 --> 00:19:07,379
have and we've really drawn some sort<font color="#E5E5E5"> of</font>

527
00:19:05,849 --> 00:19:09,899
diagram that outlines all of these

528
00:19:07,379 --> 00:19:12,090
components<font color="#CCCCCC"> and will well actually in</font>

529
00:19:09,899 --> 00:19:14,488
this presentation will dig into each one

530
00:19:12,090 --> 00:19:16,978
of these<font color="#CCCCCC"> and this is why i was saying</font>

531
00:19:14,489 --> 00:19:17,879
expect for me to go a mile a minute as

532
00:19:16,979 --> 00:19:19,679
we<font color="#CCCCCC"> go through all these different</font>

533
00:19:17,879 --> 00:19:22,080
<font color="#CCCCCC">components because</font><font color="#E5E5E5"> you'll hear true</font>

534
00:19:19,679 --> 00:19:23,489
stories and basically pros and cons of

535
00:19:22,080 --> 00:19:26,668
implementing a<font color="#E5E5E5"> large-scale solution like</font>

536
00:19:23,489 --> 00:19:29,789
<font color="#CCCCCC">this so</font><font color="#E5E5E5"> this is pretty as</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> deployed</font>

537
00:19:26,669 --> 00:19:32,460
on a large<font color="#E5E5E5"> amazon system where you've</font>

538
00:19:29,789 --> 00:19:35,249
got<font color="#E5E5E5"> dns provided by route 53 load</font>

539
00:19:32,460 --> 00:19:37,200
balancing compute instances touching

540
00:19:35,249 --> 00:19:39,389
things like<font color="#CCCCCC"> DynamoDB for key value</font>

541
00:19:37,200 --> 00:19:40,859
storage one and we're why would you ever

542
00:19:39,389 --> 00:19:42,918
need key value storage why is that

543
00:19:40,859 --> 00:19:44,970
different from<font color="#E5E5E5"> a relational database</font>

544
00:19:42,919 --> 00:19:47,369
what is all of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> different</font>

545
00:19:44,970 --> 00:19:49,950
components<font color="#E5E5E5"> so before you before</font><font color="#CCCCCC"> we sort</font>

546
00:19:47,369 --> 00:19:52,228
of dig into that there's this concept in

547
00:19:49,950 --> 00:19:53,849
cloud computing of regions and

548
00:19:52,229 --> 00:19:55,799
availability zones doesn't matter which

549
00:19:53,849 --> 00:19:58,979
provider you use today there is an

550
00:19:55,799 --> 00:20:00,869
inheritance inherent concept of your

551
00:19:58,979 --> 00:20:03,359
your stuff that you're developing the

552
00:20:00,869 --> 00:20:06,090
sort<font color="#E5E5E5"> of network topology is living with</font>

553
00:20:03,359 --> 00:20:08,699
in some sort of region whether the west

554
00:20:06,090 --> 00:20:11,488
coast<font color="#E5E5E5"> east coast some data center so</font>

555
00:20:08,700 --> 00:20:14,129
when it<font color="#E5E5E5"> comes to this stuff and what</font>

556
00:20:11,489 --> 00:20:16,799
we've learned is that going multiple

557
00:20:14,129 --> 00:20:19,080
availability zone inside<font color="#E5E5E5"> of a region is</font>

558
00:20:16,799 --> 00:20:22,350
pretty trivial it's not<font color="#E5E5E5"> that hard</font>

559
00:20:19,080 --> 00:20:24,090
inside<font color="#CCCCCC"> of one region to scale out what's</font>

560
00:20:22,350 --> 00:20:26,668
actually a significant pain point is

561
00:20:24,090 --> 00:20:28,408
when you start when you try to figure

562
00:20:26,669 --> 00:20:30,840
<font color="#E5E5E5">out how</font><font color="#CCCCCC"> can I coordinate all of these</font>

563
00:20:28,409 --> 00:20:33,570
different regions together so if I'm

564
00:20:30,840 --> 00:20:34,918
storing data and I'm storing a hundred

565
00:20:33,570 --> 00:20:36,149
thousand requests per second or the

566
00:20:34,919 --> 00:20:38,610
analytics<font color="#E5E5E5"> from a hundred thousand</font>

567
00:20:36,149 --> 00:20:40,379
requests<font color="#E5E5E5"> per second in East Coast how do</font>

568
00:20:38,610 --> 00:20:42,959
I synchronize that to west coast and how

569
00:20:40,380 --> 00:20:46,200
do I keep<font color="#E5E5E5"> that at</font><font color="#CCCCCC"> very low latency</font>

570
00:20:42,960 --> 00:20:47,720
levels also aside from the sort<font color="#E5E5E5"> of</font>

571
00:20:46,200 --> 00:20:50,250
synchronization challenges that you have

572
00:20:47,720 --> 00:20:52,380
how do you automate this how do you

573
00:20:50,250 --> 00:20:54,750
automate failover how do you<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font>

574
00:20:52,380 --> 00:20:55,710
that the region that you're deploying or

575
00:20:54,750 --> 00:20:57,000
the code<font color="#CCCCCC"> that you're deploying to one</font>

576
00:20:55,710 --> 00:20:59,070
region is consistent with in another

577
00:20:57,000 --> 00:21:00,480
region it's a significant challenge and

578
00:20:59,070 --> 00:21:02,840
it's<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that we've had</font><font color="#E5E5E5"> to face</font>

579
00:21:00,480 --> 00:21:07,169
and<font color="#CCCCCC"> we'll share all our experiences that</font>

580
00:21:02,840 --> 00:21:11,370
so we'll<font color="#E5E5E5"> start with route 53 which is</font>

581
00:21:07,169 --> 00:21:13,350
DNS so first of<font color="#E5E5E5"> all in the cloud I'm</font>

582
00:21:11,370 --> 00:21:14,820
actually I'll to everyone for a second

583
00:21:13,350 --> 00:21:21,899
how many people have had to set up dns

584
00:21:14,820 --> 00:21:27,000
pre<font color="#CCCCCC"> Cloudera yeah remember that pretty</font>

585
00:21:21,899 --> 00:21:28,709
crazy right and the key thing and I used

586
00:21:27,000 --> 00:21:32,190
<font color="#E5E5E5">to have some funny photos in here I</font>

587
00:21:28,710 --> 00:21:34,230
remove them but there's my favorite<font color="#E5E5E5"> one</font>

588
00:21:32,190 --> 00:21:35,070
is Picard<font color="#E5E5E5"> and it's the Picard mean I</font>

589
00:21:34,230 --> 00:21:37,529
don't know if you guys<font color="#E5E5E5"> have seen the</font>

590
00:21:35,070 --> 00:21:41,840
captain picard meme and it's<font color="#E5E5E5"> just flush</font>

591
00:21:37,529 --> 00:21:44,580
the dns and it's it's a great example of

592
00:21:41,840 --> 00:21:46,769
<font color="#CCCCCC">how far we sort</font><font color="#E5E5E5"> of come because i</font>

593
00:21:44,580 --> 00:21:48,840
remember<font color="#CCCCCC"> back in the day we would spit</font>

594
00:21:46,769 --> 00:21:52,350
up another compute instance and we try

595
00:21:48,840 --> 00:21:53,820
and<font color="#E5E5E5"> set dns up for that and we'd</font><font color="#CCCCCC"> have to</font>

596
00:21:52,350 --> 00:21:56,250
constantly go back to do flush your dns

597
00:21:53,820 --> 00:21:58,769
did you add to<font color="#E5E5E5"> your hosts file is</font><font color="#CCCCCC"> dns</font>

598
00:21:56,250 --> 00:22:01,500
propagated yet well the cool thing about

599
00:21:58,769 --> 00:22:04,470
<font color="#E5E5E5">using the cloud is that you can combine</font>

600
00:22:01,500 --> 00:22:06,210
your infrastructure with dns so that's a

601
00:22:04,470 --> 00:22:07,769
thing of<font color="#E5E5E5"> the past you never have to</font>

602
00:22:06,210 --> 00:22:09,419
worry about flushing your<font color="#E5E5E5"> dns anymore</font>

603
00:22:07,769 --> 00:22:11,100
you<font color="#E5E5E5"> never have to worry about well if</font>

604
00:22:09,419 --> 00:22:12,720
what if i change my load balance or what

605
00:22:11,100 --> 00:22:14,820
if my load balancer changes addresses

606
00:22:12,720 --> 00:22:16,649
the simple idea that you<font color="#E5E5E5"> can connect an</font>

607
00:22:14,820 --> 00:22:19,740
a record or a cname with a load balancer

608
00:22:16,649 --> 00:22:20,760
is incredibly powerful it also<font color="#E5E5E5"> means</font>

609
00:22:19,740 --> 00:22:22,950
<font color="#E5E5E5">that when you're deploying across</font>

610
00:22:20,760 --> 00:22:24,240
multiple regions you<font color="#CCCCCC"> can start</font><font color="#E5E5E5"> to do</font>

611
00:22:22,950 --> 00:22:26,549
some<font color="#CCCCCC"> fun things like latency based</font>

612
00:22:24,240 --> 00:22:28,649
routing so in the cool case of AWS for

613
00:22:26,549 --> 00:22:31,049
us we have East Coast<font color="#E5E5E5"> and West Coast and</font>

614
00:22:28,649 --> 00:22:32,310
we do latency based routing so depending

615
00:22:31,049 --> 00:22:34,260
on<font color="#E5E5E5"> where our customers</font>

616
00:22:32,310 --> 00:22:35,909
or where anybody is calling us<font color="#CCCCCC"> from if</font>

617
00:22:34,260 --> 00:22:37,800
they're calling us from Chicago<font color="#E5E5E5"> they're</font>

618
00:22:35,910 --> 00:22:39,450
<font color="#E5E5E5">going to go to the closest one and the</font>

619
00:22:37,800 --> 00:22:40,919
closest one isn't just<font color="#CCCCCC"> going to be based</font>

620
00:22:39,450 --> 00:22:42,690
on geography it's going to be based on

621
00:22:40,920 --> 00:22:45,030
timing because they're<font color="#E5E5E5"> going to</font>

622
00:22:42,690 --> 00:22:47,280
<font color="#CCCCCC">recognize the fastest response that they</font>

623
00:22:45,030 --> 00:22:48,870
can get back and they're going to<font color="#E5E5E5"> always</font>

624
00:22:47,280 --> 00:22:51,270
go to that<font color="#E5E5E5"> one so this sort of route</font>

625
00:22:48,870 --> 00:22:53,850
sampling<font color="#E5E5E5"> that ends up happening on the</font>

626
00:22:51,270 --> 00:22:56,040
on the<font color="#E5E5E5"> DNS side it's also convenient and</font>

627
00:22:53,850 --> 00:22:57,480
cheap when you start connecting DNS to

628
00:22:56,040 --> 00:23:00,899
your cloud provider has anybody here

629
00:22:57,480 --> 00:23:03,720
played with tools like ultra DNS or any

630
00:23:00,900 --> 00:23:05,100
more robust offerings it's incredibly

631
00:23:03,720 --> 00:23:07,230
expensive you would typically have<font color="#E5E5E5"> to</font>

632
00:23:05,100 --> 00:23:10,199
<font color="#E5E5E5">spend hundreds and hundreds of thousands</font>

633
00:23:07,230 --> 00:23:12,540
of<font color="#E5E5E5"> dollars to managed DNS using any</font>

634
00:23:10,200 --> 00:23:15,090
cloud provider like Rackspace or AWS

635
00:23:12,540 --> 00:23:17,280
what's<font color="#E5E5E5"> really neat is that you can have</font>

636
00:23:15,090 --> 00:23:19,709
them basically run your DNS for you and

637
00:23:17,280 --> 00:23:21,600
you can<font color="#E5E5E5"> support thousands and thousands</font>

638
00:23:19,710 --> 00:23:25,580
of queries and you can do<font color="#E5E5E5"> that for you</font>

639
00:23:21,600 --> 00:23:28,590
no sense not<font color="#E5E5E5"> even not even dollars so</font>

640
00:23:25,580 --> 00:23:30,300
private clouds so there's a concept

641
00:23:28,590 --> 00:23:31,740
that's sort of emerged which is that<font color="#E5E5E5"> you</font>

642
00:23:30,300 --> 00:23:34,440
have a cloud and you have what's called

643
00:23:31,740 --> 00:23:35,880
a private cloud and if<font color="#E5E5E5"> we unpack that a</font>

644
00:23:34,440 --> 00:23:39,210
little bit a private cloud basically

645
00:23:35,880 --> 00:23:42,150
means you have an ability to<font color="#CCCCCC"> really</font>

646
00:23:39,210 --> 00:23:46,020
design your network and service topology

647
00:23:42,150 --> 00:23:48,390
so the one negative thing I would say

648
00:23:46,020 --> 00:23:50,100
that's happened<font color="#CCCCCC"> with cloud computing is</font>

649
00:23:48,390 --> 00:23:52,170
<font color="#CCCCCC">that everybody thinks that they can do</font>

650
00:23:50,100 --> 00:23:53,669
it and everybody<font color="#CCCCCC"> thinks that they can</font>

651
00:23:52,170 --> 00:23:56,100
manage and set up their infrastructure

652
00:23:53,670 --> 00:23:58,560
in a secure way the problem is you<font color="#E5E5E5"> have</font>

653
00:23:56,100 --> 00:24:00,240
<font color="#CCCCCC">people who are</font><font color="#E5E5E5"> building out these robust</font>

654
00:23:58,560 --> 00:24:01,620
networks or what they claim to be robust

655
00:24:00,240 --> 00:24:03,750
networks without knowing anything about

656
00:24:01,620 --> 00:24:06,479
security without knowing anything about

657
00:24:03,750 --> 00:24:07,890
basic networking and so if you<font color="#CCCCCC"> were to</font>

658
00:24:06,480 --> 00:24:09,390
go<font color="#E5E5E5"> to an average software developer</font>

659
00:24:07,890 --> 00:24:11,010
today and say well I want<font color="#CCCCCC"> you to deploy</font>

660
00:24:09,390 --> 00:24:13,710
the service but I want you to deploy it

661
00:24:11,010 --> 00:24:15,210
on a particular subnet and<font color="#E5E5E5"> here the sort</font>

662
00:24:13,710 --> 00:24:17,010
<font color="#E5E5E5">of ip table rules that I need you to</font>

663
00:24:15,210 --> 00:24:18,840
apply to this you're<font color="#E5E5E5"> just going to look</font>

664
00:24:17,010 --> 00:24:21,360
at you with a blank face because it's

665
00:24:18,840 --> 00:24:23,639
not what they do unfortunately what<font color="#CCCCCC"> we</font>

666
00:24:21,360 --> 00:24:25,199
are seeing today is because it's so easy

667
00:24:23,640 --> 00:24:26,760
and because there's<font color="#CCCCCC"> just such low</font>

668
00:24:25,200 --> 00:24:28,470
barriers to jump in we're seeing

669
00:24:26,760 --> 00:24:30,840
developers make a lot<font color="#CCCCCC"> of mistakes and</font>

670
00:24:28,470 --> 00:24:32,850
it's easy<font color="#CCCCCC"> to shoot yourself in the foot</font>

671
00:24:30,840 --> 00:24:34,139
when it comes to<font color="#E5E5E5"> this so they encourage</font>

672
00:24:32,850 --> 00:24:35,429
you and you're certainly encouraged<font color="#E5E5E5"> to</font>

673
00:24:34,140 --> 00:24:38,160
go and evaluate<font color="#E5E5E5"> something like the cloud</font>

674
00:24:35,430 --> 00:24:40,410
or services like AWS for instance but it

675
00:24:38,160 --> 00:24:42,759
is so difficult if you've never done<font color="#CCCCCC"> it</font>

676
00:24:40,410 --> 00:24:45,129
before to get it done right

677
00:24:42,759 --> 00:24:46,690
and I would<font color="#E5E5E5"> say</font><font color="#CCCCCC"> that it's something</font><font color="#E5E5E5"> that</font>

678
00:24:45,129 --> 00:24:48,968
if you're looking to build out on your

679
00:24:46,690 --> 00:24:50,589
own definitely look at bringing on

680
00:24:48,969 --> 00:24:54,549
someone with some<font color="#E5E5E5"> network experience</font>

681
00:24:50,589 --> 00:24:56,678
<font color="#CCCCCC">because it's not trivial to</font><font color="#E5E5E5"> set up the</font>

682
00:24:54,549 --> 00:24:58,209
<font color="#E5E5E5">other thing that we've learned in and</font>

683
00:24:56,679 --> 00:24:59,949
this<font color="#E5E5E5"> is going to sound a little bit</font>

684
00:24:58,209 --> 00:25:03,959
strange and we're certainly<font color="#E5E5E5"> curious</font>

685
00:24:59,949 --> 00:25:06,279
about this is a VPC is fantastic for

686
00:25:03,959 --> 00:25:08,049
constraining security groups input and

687
00:25:06,279 --> 00:25:09,309
output the other thing that we've

688
00:25:08,049 --> 00:25:11,589
<font color="#CCCCCC">noticed is that the request response</font>

689
00:25:09,309 --> 00:25:13,690
times are a little bit slower and it's a

690
00:25:11,589 --> 00:25:15,698
<font color="#E5E5E5">little bit slower consistently whether</font>

691
00:25:13,690 --> 00:25:17,739
we're in east coast or west coast<font color="#E5E5E5"> and</font>

692
00:25:15,699 --> 00:25:19,509
we're working<font color="#E5E5E5"> with guys and amazon to</font>

693
00:25:17,739 --> 00:25:20,799
sort of figure out<font color="#E5E5E5"> what this is and</font>

694
00:25:19,509 --> 00:25:22,179
what's the sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> motivation behind it</font>

695
00:25:20,799 --> 00:25:23,859
but it's something<font color="#E5E5E5"> to consider when</font>

696
00:25:22,179 --> 00:25:25,509
you're building out<font color="#E5E5E5"> of epc what do you</font>

697
00:25:23,859 --> 00:25:27,908
choose<font color="#CCCCCC"> to have in your v pc or what do</font>

698
00:25:25,509 --> 00:25:29,799
you<font color="#E5E5E5"> have outside of</font><font color="#CCCCCC"> the VPC and do you</font>

699
00:25:27,909 --> 00:25:30,819
<font color="#E5E5E5">have certain services that are scaled</font>

700
00:25:29,799 --> 00:25:34,389
and deployed a little bit differently

701
00:25:30,819 --> 00:25:36,819
and there's<font color="#E5E5E5"> no good reason not</font><font color="#CCCCCC"> to use a</font>

702
00:25:34,389 --> 00:25:38,829
VPC so your traditional security groups

703
00:25:36,819 --> 00:25:40,479
are really just constraining everything

704
00:25:38,829 --> 00:25:42,489
that's coming<font color="#CCCCCC"> into your environment a</font>

705
00:25:40,479 --> 00:25:44,079
VPC also allows you to articulate

706
00:25:42,489 --> 00:25:45,969
communication amongst all your nodes

707
00:25:44,079 --> 00:25:47,619
within your<font color="#E5E5E5"> environment and this is a</font>

708
00:25:45,969 --> 00:25:48,669
really important thing<font color="#E5E5E5"> so let's say</font>

709
00:25:47,619 --> 00:25:51,039
you're building up or you're deploying

710
00:25:48,669 --> 00:25:52,599
your own instance of memcached well you

711
00:25:51,039 --> 00:25:54,129
deploy your own instance of memcached

712
00:25:52,599 --> 00:25:56,859
and you typically say with a security

713
00:25:54,129 --> 00:25:59,228
<font color="#E5E5E5">group that</font><font color="#CCCCCC"> i want</font><font color="#E5E5E5"> to have access open to</font>

714
00:25:56,859 --> 00:26:01,239
these particular ports and<font color="#E5E5E5"> here the sort</font>

715
00:25:59,229 --> 00:26:03,969
<font color="#E5E5E5">of security groups for it well the</font><font color="#CCCCCC"> pain</font>

716
00:26:01,239 --> 00:26:05,469
point is when you have multiple sort of

717
00:26:03,969 --> 00:26:07,269
groups<font color="#E5E5E5"> that come up that also need</font><font color="#CCCCCC"> to</font>

718
00:26:05,469 --> 00:26:09,159
rely on memcache are constantly<font color="#CCCCCC"> updating</font>

719
00:26:07,269 --> 00:26:11,349
security groups when you could<font color="#E5E5E5"> just rely</font>

720
00:26:09,159 --> 00:26:13,329
on the subnet itself and just by having

721
00:26:11,349 --> 00:26:16,239
proper network topology you can sort of

722
00:26:13,329 --> 00:26:17,859
avoid a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of the pain so shifting</font>

723
00:26:16,239 --> 00:26:19,379
gears a little bit to load balancing and

724
00:26:17,859 --> 00:26:21,849
what we've learned from<font color="#E5E5E5"> this process</font>

725
00:26:19,379 --> 00:26:24,129
<font color="#E5E5E5">it's intuitive it's easy to spin</font><font color="#CCCCCC"> up a</font>

726
00:26:21,849 --> 00:26:26,049
load balancer gone are<font color="#E5E5E5"> the days of</font>

727
00:26:24,129 --> 00:26:27,728
having to buy and rack and stack you

728
00:26:26,049 --> 00:26:29,649
know hundreds of thousands of dollars<font color="#CCCCCC"> of</font>

729
00:26:27,729 --> 00:26:31,509
network gear at this point<font color="#CCCCCC"> I can get a</font>

730
00:26:29,649 --> 00:26:34,178
pretty decent load balancer it's

731
00:26:31,509 --> 00:26:36,879
probably engine X or<font color="#E5E5E5"> H a proxy under the</font>

732
00:26:34,179 --> 00:26:40,569
hood now I<font color="#E5E5E5"> have this here SSL</font>

733
00:26:36,879 --> 00:26:43,149
termination is nice sure it's nice<font color="#E5E5E5"> to</font>

734
00:26:40,569 --> 00:26:44,379
have SSL termination but you may not be

735
00:26:43,149 --> 00:26:47,319
able<font color="#E5E5E5"> to do it in your environment</font>

736
00:26:44,379 --> 00:26:49,779
there's certain elements of Amazon's lb

737
00:26:47,319 --> 00:26:53,139
that may<font color="#E5E5E5"> be prohibitive especially when</font>

738
00:26:49,779 --> 00:26:54,999
you're looking to run a an enterprise

739
00:26:53,139 --> 00:26:55,689
that<font color="#CCCCCC"> has to achieve a certain level of</font>

740
00:26:54,999 --> 00:26:58,179
compliance

741
00:26:55,690 --> 00:27:01,629
based on logging based on metrics based

742
00:26:58,179 --> 00:27:04,210
on if I terminate SSL at the elb and my

743
00:27:01,629 --> 00:27:05,830
process fans out to ec2 instances well

744
00:27:04,210 --> 00:27:07,450
that's not encrypted at that point does

745
00:27:05,830 --> 00:27:08,799
it<font color="#CCCCCC"> need to be encrypted</font><font color="#E5E5E5"> and again it all</font>

746
00:27:07,450 --> 00:27:11,830
depends on<font color="#E5E5E5"> your use case it depends on</font>

747
00:27:08,799 --> 00:27:14,379
your organization also load balancers

748
00:27:11,830 --> 00:27:17,080
lack static addresses and a fun little

749
00:27:14,379 --> 00:27:18,789
anecdote because it lacks static address

750
00:27:17,080 --> 00:27:20,439
is sometimes you may work with

751
00:27:18,789 --> 00:27:22,120
organizations or you may work in your

752
00:27:20,440 --> 00:27:24,039
<font color="#E5E5E5">own large organization with various</font>

753
00:27:22,120 --> 00:27:28,209
teams that need to whitelist addresses

754
00:27:24,039 --> 00:27:30,340
and you don't whitelist<font color="#E5E5E5"> DNS some people</font>

755
00:27:28,210 --> 00:27:31,870
whitelist IP addresses now the problem

756
00:27:30,340 --> 00:27:33,340
is you would typically whitelist and

757
00:27:31,870 --> 00:27:34,719
elastic load balance where you a

758
00:27:33,340 --> 00:27:37,389
whitelist a load balancer all together

759
00:27:34,720 --> 00:27:39,129
but you don't<font color="#E5E5E5"> get that ability with</font>

760
00:27:37,389 --> 00:27:40,570
something like<font color="#CCCCCC"> Amazon you don't get that</font>

761
00:27:39,129 --> 00:27:42,428
ability with a lot of<font color="#E5E5E5"> cloud providers</font>

762
00:27:40,570 --> 00:27:44,740
and it makes<font color="#E5E5E5"> it really difficult when it</font>

763
00:27:42,429 --> 00:27:46,480
comes to that so if you fall<font color="#E5E5E5"> into any of</font>

764
00:27:44,740 --> 00:27:48,190
those categories it basically turns into

765
00:27:46,480 --> 00:27:50,409
bring your own load balancer to the

766
00:27:48,190 --> 00:27:51,940
table so what we've understood and what

767
00:27:50,409 --> 00:27:53,710
we've realized is aside from amazon

768
00:27:51,940 --> 00:27:55,509
offering and running their services we

769
00:27:53,710 --> 00:27:56,889
bring our own to the<font color="#CCCCCC"> table and it's</font>

770
00:27:55,509 --> 00:27:58,360
something<font color="#CCCCCC"> that we realize that a lot of</font>

771
00:27:56,889 --> 00:28:01,629
companies and a<font color="#CCCCCC"> lot of people actually</font>

772
00:27:58,360 --> 00:28:02,709
do too or you end up<font color="#CCCCCC"> using iptables and</font>

773
00:28:01,629 --> 00:28:05,350
you do some really<font color="#CCCCCC"> cool things with</font>

774
00:28:02,710 --> 00:28:08,100
routing and we can we can share some fun

775
00:28:05,350 --> 00:28:08,100
experiences with that

776
00:28:11,700 --> 00:28:18,700
so it depends<font color="#E5E5E5"> H a proxy or engine X yeah</font>

777
00:28:15,460 --> 00:28:22,000
so H a proxy now has ssl support which

778
00:28:18,700 --> 00:28:25,090
it didn't for a long time on the ec2

779
00:28:22,000 --> 00:28:26,980
side so easy to is kind<font color="#CCCCCC"> of the heart of</font>

780
00:28:25,090 --> 00:28:30,879
AWS that's where you spend of compute

781
00:28:26,980 --> 00:28:32,140
instances take an image and ssh key and

782
00:28:30,880 --> 00:28:33,880
I call<font color="#E5E5E5"> it party time because that's</font>

783
00:28:32,140 --> 00:28:34,990
exactly what it<font color="#E5E5E5"> is you ssh up and you</font>

784
00:28:33,880 --> 00:28:39,280
can do whatever you want to do it's your

785
00:28:34,990 --> 00:28:41,440
own server to mess with now there's a

786
00:28:39,280 --> 00:28:44,289
couple<font color="#E5E5E5"> of things that most people sort</font>

787
00:28:41,440 --> 00:28:46,539
of get wrong which is you sort<font color="#E5E5E5"> of choose</font>

788
00:28:44,289 --> 00:28:49,000
the size of your ec2 instances based on

789
00:28:46,539 --> 00:28:50,408
how much CPU and memory you need but<font color="#CCCCCC"> you</font>

790
00:28:49,000 --> 00:28:52,630
also have to reconsider the networking

791
00:28:50,409 --> 00:28:53,950
needs as well because if you have a lot

792
00:28:52,630 --> 00:28:55,780
of data flowing in and out of<font color="#CCCCCC"> your</font>

793
00:28:53,950 --> 00:28:57,370
compute instances believe it or<font color="#CCCCCC"> not a</font>

794
00:28:55,780 --> 00:28:59,200
medium or a large even though you're

795
00:28:57,370 --> 00:29:01,000
only seeing one percent CPU consumption

796
00:28:59,200 --> 00:29:02,140
is not going to cut it you're going to

797
00:29:01,000 --> 00:29:04,179
drop packets you're going to drop

798
00:29:02,140 --> 00:29:07,030
requests so you have to also size for

799
00:29:04,179 --> 00:29:09,490
the<font color="#E5E5E5"> network and finally and we'll get</font>

800
00:29:07,030 --> 00:29:11,230
<font color="#E5E5E5">dig into that a little bit ec2 instances</font>

801
00:29:09,490 --> 00:29:13,480
aren't created equally we've spawned

802
00:29:11,230 --> 00:29:15,820
instances that have<font color="#E5E5E5"> gotten a</font>

803
00:29:13,480 --> 00:29:17,830
notification about<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> minutes after</font>

804
00:29:15,820 --> 00:29:19,720
we've spawned them from amazon saying oh

805
00:29:17,830 --> 00:29:21,789
by the way this<font color="#CCCCCC"> is a bad instance we're</font>

806
00:29:19,720 --> 00:29:23,830
shutting it down<font color="#E5E5E5"> and that's it I mean</font>

807
00:29:21,789 --> 00:29:25,390
it's pretty ridiculous here you're<font color="#E5E5E5"> very</font>

808
00:29:23,830 --> 00:29:27,580
<font color="#CCCCCC">lucky if you</font><font color="#E5E5E5"> have an instance that can</font>

809
00:29:25,390 --> 00:29:30,130
live 24 hours plus at least<font color="#E5E5E5"> that's the</font>

810
00:29:27,580 --> 00:29:32,379
way we look at<font color="#CCCCCC"> it so our API it's</font>

811
00:29:30,130 --> 00:29:35,289
constructed fully and go that<font color="#E5E5E5"> we deploy</font>

812
00:29:32,380 --> 00:29:36,429
binaries it's a restful engine it

813
00:29:35,289 --> 00:29:38,379
<font color="#E5E5E5">communicates with all the appropriate</font>

814
00:29:36,429 --> 00:29:40,510
AWS services that you that we talked

815
00:29:38,380 --> 00:29:42,730
about it's also running on compute heavy

816
00:29:40,510 --> 00:29:44,799
instances so we basically deploy our

817
00:29:42,730 --> 00:29:45,970
services to<font color="#E5E5E5"> four core boxes we found</font>

818
00:29:44,799 --> 00:29:47,710
that it's the<font color="#CCCCCC"> right price point for</font>

819
00:29:45,970 --> 00:29:50,440
performance based on everything that

820
00:29:47,710 --> 00:29:52,510
we've seen and this is a<font color="#E5E5E5"> little snippet</font>

821
00:29:50,440 --> 00:29:55,240
<font color="#E5E5E5">of go code and so what we're basically</font>

822
00:29:52,510 --> 00:29:57,010
articulating here is<font color="#E5E5E5"> runtime set the max</font>

823
00:29:55,240 --> 00:29:59,559
processor is to run time the number<font color="#E5E5E5"> of</font>

824
00:29:57,010 --> 00:30:00,840
<font color="#E5E5E5">CPU so get the total number of CPUs that</font>

825
00:29:59,559 --> 00:30:03,220
are available on this service and

826
00:30:00,840 --> 00:30:05,590
basically instruct go when it starts up

827
00:30:03,220 --> 00:30:08,020
that hey all the work I'm doing for<font color="#E5E5E5"> the</font>

828
00:30:05,590 --> 00:30:09,280
guns and<font color="#E5E5E5"> all of its channel work spread</font>

829
00:30:08,020 --> 00:30:11,110
<font color="#E5E5E5">it spread it out on all</font><font color="#CCCCCC"> of these</font>

830
00:30:09,280 --> 00:30:13,600
processors spread spread it out<font color="#E5E5E5"> on all</font>

831
00:30:11,110 --> 00:30:15,158
of<font color="#E5E5E5"> these cores and that's it that's one</font>

832
00:30:13,600 --> 00:30:16,570
line of code I don't<font color="#E5E5E5"> have to manage for</font>

833
00:30:15,159 --> 00:30:18,549
instances anymore I don't have to worry

834
00:30:16,570 --> 00:30:20,260
about synchronization I have to worry

835
00:30:18,549 --> 00:30:22,210
about anything I<font color="#CCCCCC"> just call this one line</font>

836
00:30:20,260 --> 00:30:23,120
and that's<font color="#CCCCCC"> it batteries included it just</font>

837
00:30:22,210 --> 00:30:27,680
works

838
00:30:23,120 --> 00:30:29,800
so<font color="#CCCCCC"> Bastian so Bastion is our jump off</font>

839
00:30:27,680 --> 00:30:32,059
box it's our NAT it's nothing more than

840
00:30:29,800 --> 00:30:33,800
basically<font color="#E5E5E5"> a way where we can get into</font>

841
00:30:32,059 --> 00:30:35,660
<font color="#CCCCCC">our environment it can traverse all the</font>

842
00:30:33,800 --> 00:30:37,550
availability of ale abilities owns it

843
00:30:35,660 --> 00:30:41,360
can go<font color="#CCCCCC"> across different regions as well</font>

844
00:30:37,550 --> 00:30:43,100
it<font color="#E5E5E5"> runs various cron drun</font><font color="#CCCCCC"> zahl sorts of</font>

845
00:30:41,360 --> 00:30:45,020
security keys nothing really<font color="#E5E5E5"> special</font>

846
00:30:43,100 --> 00:30:46,969
everybody sort of needs a gnat everybody

847
00:30:45,020 --> 00:30:49,220
needs<font color="#CCCCCC"> to jump off if you don't want to</font>

848
00:30:46,970 --> 00:30:50,930
open up all of your servers for access

849
00:30:49,220 --> 00:30:54,980
you kind of need one entry point and

850
00:30:50,930 --> 00:30:57,110
Bastion is that for us smart cache is a

851
00:30:54,980 --> 00:30:59,750
really cool technology that we wrote at

852
00:30:57,110 --> 00:31:02,540
the company and<font color="#E5E5E5"> the reason why we wrote</font>

853
00:30:59,750 --> 00:31:04,760
it<font color="#E5E5E5"> is when we have companies or we have</font>

854
00:31:02,540 --> 00:31:06,860
customers<font color="#E5E5E5"> that peg us at hundreds of</font>

855
00:31:04,760 --> 00:31:08,750
thousands of requests a second it's hard

856
00:31:06,860 --> 00:31:09,860
to<font color="#E5E5E5"> keep up when you want to start to</font>

857
00:31:08,750 --> 00:31:11,390
store the analytics when you want to

858
00:31:09,860 --> 00:31:13,070
start to store the transaction levels

859
00:31:11,390 --> 00:31:15,890
it's really difficult to store all that

860
00:31:13,070 --> 00:31:18,020
<font color="#E5E5E5">stuff so it's basically the best of cash</font>

861
00:31:15,890 --> 00:31:19,429
needs the best of<font color="#E5E5E5"> a queue it does in</font>

862
00:31:18,020 --> 00:31:22,070
memory aggregation and in-memory

863
00:31:19,429 --> 00:31:23,990
analytics compaction and it allows<font color="#CCCCCC"> us to</font>

864
00:31:22,070 --> 00:31:26,689
basically collect a bunch of metrics

865
00:31:23,990 --> 00:31:28,490
compacted down based on key<font color="#CCCCCC"> serialized</font>

866
00:31:26,690 --> 00:31:30,500
and write<font color="#CCCCCC"> that data back out where it</font>

867
00:31:28,490 --> 00:31:32,870
needs to so a little<font color="#E5E5E5"> snippet of code for</font>

868
00:31:30,500 --> 00:31:34,820
this we basically iterate through our

869
00:31:32,870 --> 00:31:37,070
analytics caches this is a snippet of

870
00:31:34,820 --> 00:31:39,020
actual smart cache code what we'll do is

871
00:31:37,070 --> 00:31:40,790
we'll loop through the caches we don't

872
00:31:39,020 --> 00:31:43,100
<font color="#E5E5E5">care</font><font color="#CCCCCC"> about the key itself we just take</font>

873
00:31:40,790 --> 00:31:44,870
the analytics we<font color="#E5E5E5"> JSON encode it Jason</font>

874
00:31:43,100 --> 00:31:46,850
Marshall on it and then we have an

875
00:31:44,870 --> 00:31:49,280
analytics queue and we send the message

876
00:31:46,850 --> 00:31:50,809
off<font color="#CCCCCC"> to the queue and whatever happens on</font>

877
00:31:49,280 --> 00:31:52,820
the other side happens<font color="#CCCCCC"> on the other side</font>

878
00:31:50,809 --> 00:31:54,590
but<font color="#E5E5E5"> this is a snippet of how smart cache</font>

879
00:31:52,820 --> 00:31:56,240
works in the context of our API and

880
00:31:54,590 --> 00:31:58,669
there's a little thing on the bottom

881
00:31:56,240 --> 00:32:00,590
sleep<font color="#E5E5E5"> 10 seconds so basically we store</font>

882
00:31:58,670 --> 00:32:03,890
everything for 10 seconds and then we

883
00:32:00,590 --> 00:32:07,760
drop everything back out now on<font color="#CCCCCC"> the data</font>

884
00:32:03,890 --> 00:32:09,380
side so it's really difficult<font color="#E5E5E5"> to manage</font>

885
00:32:07,760 --> 00:32:11,900
databases on your own especially when

886
00:32:09,380 --> 00:32:13,370
<font color="#E5E5E5">you're a small</font><font color="#CCCCCC"> organization and there's</font>

887
00:32:11,900 --> 00:32:14,570
<font color="#E5E5E5">something that we absolutely love which</font>

888
00:32:13,370 --> 00:32:17,090
is that there's an ability for us to

889
00:32:14,570 --> 00:32:20,090
offload this work and which we did in

890
00:32:17,090 --> 00:32:21,919
this case so giving our data to<font color="#CCCCCC"> amazon</font>

891
00:32:20,090 --> 00:32:24,080
or giving having amazon sort of manage

892
00:32:21,920 --> 00:32:25,610
our databases for us has<font color="#CCCCCC"> been amazing so</font>

893
00:32:24,080 --> 00:32:27,350
there's a<font color="#E5E5E5"> huge trade off though and it's</font>

894
00:32:25,610 --> 00:32:29,689
<font color="#E5E5E5">really important</font><font color="#CCCCCC"> to be upfront</font><font color="#E5E5E5"> in terms</font>

895
00:32:27,350 --> 00:32:31,250
of convenience and performance it's

896
00:32:29,690 --> 00:32:33,380
incredibly convenient to have them do it

897
00:32:31,250 --> 00:32:35,610
for you but there<font color="#E5E5E5"> is a huge hit on the</font>

898
00:32:33,380 --> 00:32:37,440
performance<font color="#E5E5E5"> side running and managing</font>

899
00:32:35,610 --> 00:32:40,350
your database on your own ec2 instance

900
00:32:37,440 --> 00:32:43,080
is going to be a lot faster then having

901
00:32:40,350 --> 00:32:44,820
them do it for you also there's a nice

902
00:32:43,080 --> 00:32:47,820
little thing about relying on

903
00:32:44,820 --> 00:32:49,649
<font color="#CCCCCC">solid-state storage so that's now at</font>

904
00:32:47,820 --> 00:32:51,540
something that's possible so if you have

905
00:32:49,650 --> 00:32:55,679
<font color="#CCCCCC">too heavy amount of writes and reads you</font>

906
00:32:51,540 --> 00:32:57,510
can do that so<font color="#CCCCCC"> DynamoDB is another</font>

907
00:32:55,679 --> 00:33:00,120
<font color="#E5E5E5">technology that we use it's our key</font>

908
00:32:57,510 --> 00:33:03,030
value store so not everything fits into

909
00:33:00,120 --> 00:33:04,709
keys and values certain things<font color="#E5E5E5"> do so the</font>

910
00:33:03,030 --> 00:33:07,139
title of this talk was around it's

911
00:33:04,710 --> 00:33:09,540
basically preventing large-scale

912
00:33:07,140 --> 00:33:11,820
identity theft and that<font color="#E5E5E5"> basically</font>

913
00:33:09,540 --> 00:33:13,678
implies tokens so how do<font color="#E5E5E5"> we set</font>

914
00:33:11,820 --> 00:33:16,049
authorization and authentication tokens

915
00:33:13,679 --> 00:33:18,419
and today we set them we generate them

916
00:33:16,049 --> 00:33:19,980
in go code but we rely on<font color="#CCCCCC"> DynamoDB to</font>

917
00:33:18,419 --> 00:33:22,290
store all of this stuff<font color="#CCCCCC"> for us on the</font>

918
00:33:19,980 --> 00:33:23,520
<font color="#CCCCCC">server side and it basically means</font><font color="#E5E5E5"> that</font>

919
00:33:22,290 --> 00:33:24,899
we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to store anything we don't</font>

920
00:33:23,520 --> 00:33:26,910
<font color="#E5E5E5">have to manage a cluster of Redis</font>

921
00:33:24,900 --> 00:33:28,530
instances we don't have to manage any

922
00:33:26,910 --> 00:33:30,419
key value stores or trying to do

923
00:33:28,530 --> 00:33:32,730
synchronization amazon takes care of

924
00:33:30,419 --> 00:33:34,919
this for us it's incredibly fast and

925
00:33:32,730 --> 00:33:37,230
from our<font color="#E5E5E5"> own individual tests depending</font>

926
00:33:34,919 --> 00:33:38,549
on how you sort<font color="#E5E5E5"> of scale up your read</font>

927
00:33:37,230 --> 00:33:40,919
and write units which is their cost

928
00:33:38,549 --> 00:33:43,530
model you don't necessarily need a cash

929
00:33:40,919 --> 00:33:46,320
in front of<font color="#E5E5E5"> RT in front of</font><font color="#CCCCCC"> DynamoDB and</font>

930
00:33:43,530 --> 00:33:48,090
so for generating something it's pretty

931
00:33:46,320 --> 00:33:50,460
trivial to generate you know any

932
00:33:48,090 --> 00:33:52,559
variable that you want<font color="#E5E5E5"> to just sprint</font><font color="#CCCCCC"> F</font>

933
00:33:50,460 --> 00:33:54,030
your payload together take the output<font color="#E5E5E5"> of</font>

934
00:33:52,559 --> 00:33:55,649
something like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and you that can</font>

935
00:33:54,030 --> 00:33:59,340
basically be your key when you're

936
00:33:55,650 --> 00:34:01,490
<font color="#E5E5E5">communicating back with</font><font color="#CCCCCC"> DynamoDB</font><font color="#E5E5E5"> SQS is</font>

937
00:33:59,340 --> 00:34:05,879
a queuing technology that we wrote and

938
00:34:01,490 --> 00:34:09,119
<font color="#CCCCCC">SQS is basically a way where we can rely</font>

939
00:34:05,880 --> 00:34:11,820
on<font color="#CCCCCC"> amazon to do asynchronous aggregation</font>

940
00:34:09,119 --> 00:34:13,889
so as<font color="#CCCCCC"> qsr itself is created by by amazon</font>

941
00:34:11,820 --> 00:34:16,500
but<font color="#CCCCCC"> we've built our own wrapper on top</font>

942
00:34:13,889 --> 00:34:18,389
of<font color="#E5E5E5"> SQS so the</font><font color="#CCCCCC"> api that we have when it's</font>

943
00:34:16,500 --> 00:34:19,949
communicating back to sq s ships off a

944
00:34:18,389 --> 00:34:22,740
ton<font color="#CCCCCC"> of analytics which is those JSON</font>

945
00:34:19,949 --> 00:34:24,689
blobs that you saw earlier and<font color="#E5E5E5"> SQS hits</font>

946
00:34:22,739 --> 00:34:27,149
a de curar or there's a DQ ER that talks

947
00:34:24,690 --> 00:34:29,730
to<font color="#E5E5E5"> SQS does whatever at work that it</font>

948
00:34:27,149 --> 00:34:31,649
needs to do and sends data back so an

949
00:34:29,730 --> 00:34:34,320
API and this is actual go code again

950
00:34:31,649 --> 00:34:36,210
from what we run in our environment it's

951
00:34:34,320 --> 00:34:38,100
pretty straightforward we get access to

952
00:34:36,210 --> 00:34:40,409
a queue and we<font color="#E5E5E5"> send a message to a queue</font>

953
00:34:38,100 --> 00:34:41,790
that's it two lines<font color="#CCCCCC"> to to do anything</font>

954
00:34:40,409 --> 00:34:44,070
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to do with a queue in</font>

955
00:34:41,790 --> 00:34:46,918
terms of sending a message and in<font color="#E5E5E5"> terms</font>

956
00:34:44,070 --> 00:34:48,839
of dq'ing also incredibly simple on<font color="#CCCCCC"> the</font>

957
00:34:46,918 --> 00:34:50,699
<font color="#E5E5E5">queue client just receive messages</font>

958
00:34:48,839 --> 00:34:52,949
and there's a caveat here you see this

959
00:34:50,699 --> 00:34:54,989
hard-coded number 10 which is<font color="#E5E5E5"> why is</font>

960
00:34:52,949 --> 00:34:56,518
that hard coded as 10 because believe<font color="#CCCCCC"> it</font>

961
00:34:54,989 --> 00:35:00,719
or not that's the most you can<font color="#E5E5E5"> get from</font>

962
00:34:56,518 --> 00:35:03,930
<font color="#CCCCCC">Amazon on a single q DQ which is</font><font color="#E5E5E5"> insane</font>

963
00:35:00,719 --> 00:35:05,670
you only get<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> messages at a time which</font>

964
00:35:03,930 --> 00:35:08,009
means that<font color="#E5E5E5"> you got to run this thing in</font>

965
00:35:05,670 --> 00:35:11,099
a while loop and the other<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that</font>

966
00:35:08,009 --> 00:35:14,759
<font color="#E5E5E5">it's not ordered and we learned this the</font>

967
00:35:11,099 --> 00:35:17,789
hard way Amazon's SQS is not ordered at

968
00:35:14,759 --> 00:35:19,049
all in fact<font color="#E5E5E5"> if you if you were to run a</font>

969
00:35:17,789 --> 00:35:20,640
test on<font color="#E5E5E5"> your own right now where</font><font color="#CCCCCC"> you</font>

970
00:35:19,049 --> 00:35:22,109
basically in<font color="#E5E5E5"> queue the entire alphabet</font>

971
00:35:20,640 --> 00:35:24,979
it's going<font color="#E5E5E5"> to come back totally</font>

972
00:35:22,109 --> 00:35:29,729
haphazard we learned this the hard way

973
00:35:24,979 --> 00:35:32,968
SNS SNS is a simple notification service

974
00:35:29,729 --> 00:35:34,739
it's basically a way how one of<font color="#E5E5E5"> the ways</font>

975
00:35:32,969 --> 00:35:37,710
how we set up alerts on our ec2

976
00:35:34,739 --> 00:35:40,559
instances nothing<font color="#E5E5E5"> really too specific</font>

977
00:35:37,710 --> 00:35:42,329
here other than we<font color="#E5E5E5"> can set cpu memory</font>

978
00:35:40,559 --> 00:35:44,219
thresholds<font color="#E5E5E5"> you can also set up network</font>

979
00:35:42,329 --> 00:35:46,109
thresholds so if you want<font color="#E5E5E5"> to be alerted</font>

980
00:35:44,219 --> 00:35:47,579
<font color="#E5E5E5">at any time when something looks rogue</font>

981
00:35:46,109 --> 00:35:49,440
or something crazy<font color="#E5E5E5"> is happening in your</font>

982
00:35:47,579 --> 00:35:52,799
environment you can<font color="#CCCCCC"> get that sort of</font>

983
00:35:49,440 --> 00:35:56,430
intelligence back in terms of deployment

984
00:35:52,799 --> 00:35:58,710
and this is also a fun one for us we

985
00:35:56,430 --> 00:36:00,180
started<font color="#E5E5E5"> using a tool called fabric very</font>

986
00:35:58,710 --> 00:36:02,849
early<font color="#CCCCCC"> on fabric is a tool written in</font>

987
00:36:00,180 --> 00:36:04,669
<font color="#CCCCCC">python and fabric plus bodo allows us to</font>

988
00:36:02,849 --> 00:36:07,469
sort<font color="#E5E5E5"> of deploy services at a large scale</font>

989
00:36:04,670 --> 00:36:09,089
we went<font color="#E5E5E5"> from fabric to an open source</font>

990
00:36:07,469 --> 00:36:10,440
project that we threw out there called

991
00:36:09,089 --> 00:36:12,239
property deploy which is basically

992
00:36:10,440 --> 00:36:14,579
fabric written inside of the<font color="#CCCCCC"> go language</font>

993
00:36:12,239 --> 00:36:17,489
and most recently we've gone from pd or

994
00:36:14,579 --> 00:36:19,440
private e deploy to ansible which is the

995
00:36:17,489 --> 00:36:22,049
technology<font color="#E5E5E5"> we run deployments locally we</font>

996
00:36:19,440 --> 00:36:23,489
deployed things to prod either from our

997
00:36:22,049 --> 00:36:25,979
own individual servers or through

998
00:36:23,489 --> 00:36:28,170
<font color="#E5E5E5">Bastion itself we also have</font><font color="#CCCCCC"> a concept of</font>

999
00:36:25,979 --> 00:36:29,759
life cycle<font color="#E5E5E5"> deployment so the steps are</font>

1000
00:36:28,170 --> 00:36:32,729
provisions set up deploy promote and

1001
00:36:29,759 --> 00:36:34,289
terminate and the<font color="#E5E5E5"> really simple thing</font>

1002
00:36:32,729 --> 00:36:36,689
and rapper that we put on<font color="#E5E5E5"> top of it</font>

1003
00:36:34,289 --> 00:36:39,150
allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to specify things like this</font><font color="#CCCCCC"> so</font>

1004
00:36:36,690 --> 00:36:40,799
if we wanted to deploy code we basically

1005
00:36:39,150 --> 00:36:43,410
<font color="#E5E5E5">give it a group name so I'm doing a full</font>

1006
00:36:40,799 --> 00:36:46,890
deploy on API and you see these sort of

1007
00:36:43,410 --> 00:36:49,319
flags s ii and what that basically

1008
00:36:46,890 --> 00:36:51,299
implies is that at any point we can pick

1009
00:36:49,319 --> 00:36:53,069
<font color="#CCCCCC">up from any step and run it all the way</font>

1010
00:36:51,299 --> 00:36:54,029
<font color="#E5E5E5">to the end and if we specify the gate at</font>

1011
00:36:53,069 --> 00:36:57,960
<font color="#E5E5E5">the end then it's going to run</font>

1012
00:36:54,029 --> 00:36:59,430
specifically to<font color="#CCCCCC"> that so in the last few</font>

1013
00:36:57,960 --> 00:37:01,499
minutes<font color="#CCCCCC"> i</font><font color="#E5E5E5"> kind of wanted to just sort of</font>

1014
00:36:59,430 --> 00:37:01,808
go over a couple of learning lessons and

1015
00:37:01,499 --> 00:37:02,948
cup

1016
00:37:01,809 --> 00:37:06,150
things that we took away<font color="#CCCCCC"> from</font><font color="#E5E5E5"> this</font>

1017
00:37:02,949 --> 00:37:08,769
process everybody has oh crap moments

1018
00:37:06,150 --> 00:37:11,109
your instances will die your

1019
00:37:08,769 --> 00:37:13,238
availability zones will die your regions

1020
00:37:11,109 --> 00:37:16,779
are going to die it's inevitable things

1021
00:37:13,239 --> 00:37:18,099
die in the cloud<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> other good</font>

1022
00:37:16,779 --> 00:37:20,859
problem that sometimes happens is that

1023
00:37:18,099 --> 00:37:23,289
<font color="#E5E5E5">you have users and customers that sort</font>

1024
00:37:20,859 --> 00:37:24,729
of can have peaks and valleys and you

1025
00:37:23,289 --> 00:37:26,289
need to<font color="#E5E5E5"> be able to respond to those sort</font>

1026
00:37:24,729 --> 00:37:28,118
of things and being able to build

1027
00:37:26,289 --> 00:37:30,910
automated systems around that is<font color="#E5E5E5"> also</font>

1028
00:37:28,119 --> 00:37:32,469
significant building a service-oriented

1029
00:37:30,910 --> 00:37:35,799
architecture like the one that<font color="#CCCCCC"> we have</font>

1030
00:37:32,469 --> 00:37:37,689
is great for reusability but it's

1031
00:37:35,799 --> 00:37:39,519
insanely difficult when it comes to

1032
00:37:37,689 --> 00:37:41,558
debugging if you have a problem anywhere

1033
00:37:39,519 --> 00:37:45,069
in the chain it's very difficult to do

1034
00:37:41,559 --> 00:37:46,839
<font color="#E5E5E5">and so the key thing is to build mock</font>

1035
00:37:45,069 --> 00:37:49,150
services so if<font color="#E5E5E5"> you're relying on</font>

1036
00:37:46,839 --> 00:37:51,038
something like<font color="#CCCCCC"> DynamoDB locally you've</font>

1037
00:37:49,150 --> 00:37:52,390
got to build a mock for dynamo<font color="#E5E5E5"> dB so you</font>

1038
00:37:51,039 --> 00:37:54,640
can prove<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> doing what it should</font>

1039
00:37:52,390 --> 00:37:56,828
be doing it's a lot<font color="#E5E5E5"> of upfront work to</font>

1040
00:37:54,640 --> 00:37:58,359
do and we<font color="#CCCCCC"> did it and it's one of those</font>

1041
00:37:56,829 --> 00:38:00,279
things that we look back on now and say

1042
00:37:58,359 --> 00:38:02,439
well was that actually a good choice of

1043
00:38:00,279 --> 00:38:03,640
time was that a good balance the other

1044
00:38:02,439 --> 00:38:05,499
thing that<font color="#E5E5E5"> you have to rely on</font><font color="#CCCCCC"> it</font>

1045
00:38:03,640 --> 00:38:06,969
centralized logging in metrics so

1046
00:38:05,499 --> 00:38:09,069
there's got to be a way where<font color="#CCCCCC"> you can</font>

1047
00:38:06,969 --> 00:38:10,569
across all your instances log particular

1048
00:38:09,069 --> 00:38:13,299
payloads pull it back on the<font color="#E5E5E5"> other side</font>

1049
00:38:10,569 --> 00:38:15,130
and do some correlation as to hey why

1050
00:38:13,299 --> 00:38:18,459
didn't my<font color="#E5E5E5"> API server actually and cue</font>

1051
00:38:15,130 --> 00:38:21,609
<font color="#E5E5E5">this thing to</font><font color="#CCCCCC"> the SQ s there's another</font>

1052
00:38:18,459 --> 00:38:23,739
feature of go that we are using now and

1053
00:38:21,609 --> 00:38:26,439
it's because<font color="#CCCCCC"> of the weaknesses of SQ s</font>

1054
00:38:23,739 --> 00:38:28,150
so our goal is to<font color="#E5E5E5"> be completely off of</font>

1055
00:38:26,439 --> 00:38:30,519
SQ s altogether because of the

1056
00:38:28,150 --> 00:38:32,529
limitations of only 10 requests and

1057
00:38:30,519 --> 00:38:35,019
things are<font color="#E5E5E5"> weakly ordered and we're</font>

1058
00:38:32,529 --> 00:38:36,849
building something on<font color="#E5E5E5"> top of net RPC net</font>

1059
00:38:35,019 --> 00:38:38,979
RPC is a golang feature that allows you

1060
00:38:36,849 --> 00:38:41,199
to construct our pcs batteries included

1061
00:38:38,979 --> 00:38:42,519
clients and servers without having to

1062
00:38:41,199 --> 00:38:44,949
worry about serialization<font color="#E5E5E5"> or D</font>

1063
00:38:42,519 --> 00:38:47,439
serialization code ever it's wonderful

1064
00:38:44,949 --> 00:38:50,799
<font color="#CCCCCC">if if you have to start coordinating</font>

1065
00:38:47,439 --> 00:38:53,859
amongst<font color="#E5E5E5"> nodes and so registering</font><font color="#CCCCCC"> an RPC</font>

1066
00:38:50,799 --> 00:38:55,479
is pretty simple<font color="#E5E5E5"> you register an RPC you</font>

1067
00:38:53,859 --> 00:38:58,689
tell it what protocol you want to use

1068
00:38:55,479 --> 00:39:02,078
<font color="#E5E5E5">could be HTTP could be TCP you specify a</font>

1069
00:38:58,689 --> 00:39:03,910
port the server side this<font color="#CCCCCC"> is a this is</font>

1070
00:39:02,079 --> 00:39:06,759
an endpoint for how we could build a

1071
00:39:03,910 --> 00:39:09,848
cash on top of our<font color="#E5E5E5"> PC so you put an item</font>

1072
00:39:06,759 --> 00:39:11,979
<font color="#CCCCCC">it just keep al you pretty</font><font color="#E5E5E5"> simple send</font>

1073
00:39:09,849 --> 00:39:14,079
an acknowledgement back and then on the

1074
00:39:11,979 --> 00:39:15,279
client side if you were to build on top

1075
00:39:14,079 --> 00:39:17,650
of a local RPC

1076
00:39:15,279 --> 00:39:19,029
is what<font color="#E5E5E5"> that looks like you just build</font>

1077
00:39:17,650 --> 00:39:21,339
something when you build a create a

1078
00:39:19,029 --> 00:39:23,439
function that is basically a pointer to

1079
00:39:21,339 --> 00:39:25,390
a structure and what it's<font color="#CCCCCC"> doing is</font><font color="#E5E5E5"> it's</font>

1080
00:39:23,439 --> 00:39:28,328
calling RPC to output the same server

1081
00:39:25,390 --> 00:39:30,189
side method that you saw before so the

1082
00:39:28,329 --> 00:39:33,549
key takeaways on the<font color="#E5E5E5"> Amazon side is that</font>

1083
00:39:30,189 --> 00:39:34,868
nothing<font color="#E5E5E5"> lasts forever again you're very</font>

1084
00:39:33,549 --> 00:39:36,519
lucky<font color="#CCCCCC"> if it lasts more than 24 hours</font>

1085
00:39:34,869 --> 00:39:38,199
we've certainly seen the pain of we've

1086
00:39:36,519 --> 00:39:40,468
tried<font color="#CCCCCC"> to deploy services we've tried to</font>

1087
00:39:38,199 --> 00:39:43,539
deploy topologies only to be told that

1088
00:39:40,469 --> 00:39:44,589
hey it's corrupt it's bad<font color="#CCCCCC"> or we've got</font>

1089
00:39:43,539 --> 00:39:46,239
to<font color="#E5E5E5"> take this thing</font><font color="#CCCCCC"> down for maintenance</font>

1090
00:39:44,589 --> 00:39:48,279
it's the last<font color="#E5E5E5"> few</font><font color="#CCCCCC"> weeks have been very</font>

1091
00:39:46,239 --> 00:39:50,049
fun and Amazon land if<font color="#CCCCCC"> you guys have</font>

1092
00:39:48,279 --> 00:39:51,969
been<font color="#E5E5E5"> following all the vulnerabilities</font>

1093
00:39:50,049 --> 00:39:54,369
that have been coming<font color="#E5E5E5"> out network</font>

1094
00:39:51,969 --> 00:39:57,039
failures happen all the time ec2

1095
00:39:54,369 --> 00:39:59,529
instances ip's change a lot use elastic

1096
00:39:57,039 --> 00:40:01,390
IPS where you need to and also if you

1097
00:39:59,529 --> 00:40:03,939
haven't<font color="#E5E5E5"> made the move from classic ec2</font>

1098
00:40:01,390 --> 00:40:06,578
to<font color="#CCCCCC"> bpc</font><font color="#E5E5E5"> you absolutely should there's a</font>

1099
00:40:03,939 --> 00:40:07,808
lot of benefits from it now testing

1100
00:40:06,579 --> 00:40:10,150
because we didn't talk too much about

1101
00:40:07,809 --> 00:40:11,259
that but we make sure that we run

1102
00:40:10,150 --> 00:40:13,029
everything through unit tests

1103
00:40:11,259 --> 00:40:14,439
integration tests there's sort<font color="#E5E5E5"> of</font>

1104
00:40:13,029 --> 00:40:15,880
network load<font color="#E5E5E5"> tests that you can run</font>

1105
00:40:14,439 --> 00:40:18,489
we've identified a really cool tool

1106
00:40:15,880 --> 00:40:19,809
called Vegeta also written and go so if

1107
00:40:18,489 --> 00:40:21,729
you're a fan of dragon ball z it's

1108
00:40:19,809 --> 00:40:23,859
<font color="#E5E5E5">exactly named after the Dragon Ball Z</font>

1109
00:40:21,729 --> 00:40:26,799
character the<font color="#E5E5E5"> Saiyan Super Saiyan I</font>

1110
00:40:23,859 --> 00:40:29,019
guess and then there's selenium<font color="#E5E5E5"> test for</font>

1111
00:40:26,799 --> 00:40:30,279
front-end services we<font color="#E5E5E5"> have not gotten to</font>

1112
00:40:29,019 --> 00:40:32,319
continuous integration yet it's

1113
00:40:30,279 --> 00:40:33,849
something that we hope to get to<font color="#E5E5E5"> and tie</font>

1114
00:40:32,319 --> 00:40:35,619
back into the ansible deployment system

1115
00:40:33,849 --> 00:40:38,289
if anybody here has got some good

1116
00:40:35,619 --> 00:40:39,939
feedback on building see I models in the

1117
00:40:38,289 --> 00:40:41,109
case of security or in the security

1118
00:40:39,939 --> 00:40:44,049
landscape would love to talk<font color="#E5E5E5"> to you</font>

1119
00:40:41,109 --> 00:40:46,058
<font color="#E5E5E5">after this talk performance is</font>

1120
00:40:44,049 --> 00:40:47,979
significantly important to<font color="#CCCCCC"> analyze</font>

1121
00:40:46,059 --> 00:40:49,569
especially when you're having to<font color="#CCCCCC"> deal</font>

1122
00:40:47,979 --> 00:40:52,209
with 50,000 request a second or a

1123
00:40:49,569 --> 00:40:53,949
hundred thousand requests a second so we

1124
00:40:52,209 --> 00:40:55,479
have a really cool ability and go where

1125
00:40:53,949 --> 00:40:58,150
we can generate things like call graphs

1126
00:40:55,479 --> 00:41:01,118
and we have an ability where we can<font color="#E5E5E5"> just</font>

1127
00:40:58,150 --> 00:41:03,069
sort of visually spot the main point or

1128
00:41:01,119 --> 00:41:04,719
the main issues in our code base so

1129
00:41:03,069 --> 00:41:06,880
here's an example<font color="#CCCCCC"> call graph that gets</font>

1130
00:41:04,719 --> 00:41:08,679
generated by go and this gives us a

1131
00:41:06,880 --> 00:41:10,329
really good opportunity to go back<font color="#CCCCCC"> in to</font>

1132
00:41:08,679 --> 00:41:13,329
see well maybe we're spending too much

1133
00:41:10,329 --> 00:41:15,999
time on our hash insertion versus our

1134
00:41:13,329 --> 00:41:18,609
string traversal in terms of

1135
00:41:15,999 --> 00:41:20,408
benchmarking go<font color="#E5E5E5"> also ships with some</font>

1136
00:41:18,609 --> 00:41:22,449
<font color="#E5E5E5">really cool tools as part of its test</font>

1137
00:41:20,409 --> 00:41:25,479
framework so a thing called bench mem

1138
00:41:22,449 --> 00:41:27,219
and bench time so in the case of running

1139
00:41:25,479 --> 00:41:28,520
an algorithm or wanting to test<font color="#E5E5E5"> a</font>

1140
00:41:27,219 --> 00:41:31,130
particular<font color="#CCCCCC"> function</font>

1141
00:41:28,520 --> 00:41:32,780
this is basically<font color="#E5E5E5"> the result of it you</font>

1142
00:41:31,130 --> 00:41:34,460
give it a total<font color="#E5E5E5"> number of time how you</font>

1143
00:41:32,780 --> 00:41:36,470
much<font color="#E5E5E5"> how long you want the sort of tests</font>

1144
00:41:34,460 --> 00:41:39,260
<font color="#E5E5E5">to run for so if you wanted to run your</font>

1145
00:41:36,470 --> 00:41:41,060
tests for 10 minutes<font color="#E5E5E5"> or five seconds you</font>

1146
00:41:39,260 --> 00:41:43,040
specify that and what the test tool will

1147
00:41:41,060 --> 00:41:46,370
do is it'll try<font color="#CCCCCC"> and run that function</font><font color="#E5E5E5"> as</font>

1148
00:41:43,040 --> 00:41:47,750
many times akin in that window<font color="#E5E5E5"> and then</font>

1149
00:41:46,370 --> 00:41:49,850
it keeps track of how much time it took

1150
00:41:47,750 --> 00:41:51,980
to run that how many<font color="#E5E5E5"> bytes per operation</font>

1151
00:41:49,850 --> 00:41:54,259
how many<font color="#CCCCCC"> alexs per operation and you get</font>

1152
00:41:51,980 --> 00:41:56,980
this beautiful sort of blob that comes

1153
00:41:54,260 --> 00:41:59,630
<font color="#E5E5E5">back from running the test process</font>

1154
00:41:56,980 --> 00:42:01,040
deployments the key takeaway<font color="#CCCCCC"> that we</font>

1155
00:41:59,630 --> 00:42:03,080
learn from<font color="#E5E5E5"> this is that they should be</font>

1156
00:42:01,040 --> 00:42:04,400
<font color="#E5E5E5">noisy as possible so everybody on the</font>

1157
00:42:03,080 --> 00:42:06,290
team and everybody in the company knows

1158
00:42:04,400 --> 00:42:08,780
that you are deploying code right<font color="#CCCCCC"> now</font>

1159
00:42:06,290 --> 00:42:10,610
and also<font color="#E5E5E5"> doing it in a</font><font color="#CCCCCC"> way where we're</font>

1160
00:42:08,780 --> 00:42:12,500
not harming our existing environment so

1161
00:42:10,610 --> 00:42:14,990
when we when we deploy code we basically

1162
00:42:12,500 --> 00:42:16,820
<font color="#E5E5E5">spin up a new load balancer we spin up</font>

1163
00:42:14,990 --> 00:42:18,859
new instances we connect those things

1164
00:42:16,820 --> 00:42:21,500
together and then we can rely on tools

1165
00:42:18,860 --> 00:42:23,690
like route 53<font color="#CCCCCC"> Ford ENSO if</font><font color="#E5E5E5"> we again if</font>

1166
00:42:21,500 --> 00:42:26,150
we wanted to failover we could fail over

1167
00:42:23,690 --> 00:42:27,560
a different<font color="#E5E5E5"> sort of different model for</font>

1168
00:42:26,150 --> 00:42:29,300
deploying code but it allows<font color="#CCCCCC"> us to have</font>

1169
00:42:27,560 --> 00:42:31,910
sort of zero downtime deployments today

1170
00:42:29,300 --> 00:42:35,360
we wrote a team call we wrote a tool

1171
00:42:31,910 --> 00:42:37,940
called Hulkster Hulkster<font color="#E5E5E5"> is an IRC</font>

1172
00:42:35,360 --> 00:42:41,510
<font color="#E5E5E5">button this is a zombie Hulkster I guess</font>

1173
00:42:37,940 --> 00:42:43,520
so<font color="#CCCCCC"> it's funny but the idea behind that</font>

1174
00:42:41,510 --> 00:42:44,870
is we're able to tell<font color="#CCCCCC"> everybody in the</font>

1175
00:42:43,520 --> 00:42:46,640
team when we're doing anything critical

1176
00:42:44,870 --> 00:42:48,560
to our environment<font color="#E5E5E5"> so if we make any</font>

1177
00:42:46,640 --> 00:42:50,990
change to our cloud environment

1178
00:42:48,560 --> 00:42:53,900
everybody who's sitting in an IRC knows

1179
00:42:50,990 --> 00:42:55,790
immediately hey someone<font color="#CCCCCC"> just adjusted</font>

1180
00:42:53,900 --> 00:42:57,080
the security group someone just added

1181
00:42:55,790 --> 00:42:59,390
this new node there's a new load

1182
00:42:57,080 --> 00:43:01,190
balancer in the pool every small action

1183
00:42:59,390 --> 00:43:02,750
that we take<font color="#CCCCCC"> it's sent into the IRC</font>

1184
00:43:01,190 --> 00:43:07,820
channel where everyone in the team knows

1185
00:43:02,750 --> 00:43:09,080
immediately so the closing slide and the

1186
00:43:07,820 --> 00:43:11,120
key thing that we took away<font color="#CCCCCC"> from this</font>

1187
00:43:09,080 --> 00:43:13,730
and<font color="#E5E5E5"> I'm sure you guys have gone through</font>

1188
00:43:11,120 --> 00:43:17,390
this as well trying<font color="#E5E5E5"> to scale an unknown</font>

1189
00:43:13,730 --> 00:43:19,730
platform<font color="#E5E5E5"> is an art because you have no</font>

1190
00:43:17,390 --> 00:43:21,350
<font color="#E5E5E5">idea what you're doing at that time when</font>

1191
00:43:19,730 --> 00:43:24,080
we started we had no idea<font color="#CCCCCC"> what we were</font>

1192
00:43:21,350 --> 00:43:25,640
doing we had no<font color="#CCCCCC"> idea what our pattern</font>

1193
00:43:24,080 --> 00:43:26,750
and our request pattern usage was going

1194
00:43:25,640 --> 00:43:29,660
to look like we had<font color="#E5E5E5"> no idea</font><font color="#CCCCCC"> where the</font>

1195
00:43:26,750 --> 00:43:32,300
<font color="#E5E5E5">hotspots were in our application the</font>

1196
00:43:29,660 --> 00:43:34,129
goal is to know every<font color="#CCCCCC"> single part of</font>

1197
00:43:32,300 --> 00:43:36,140
your stack so you can turn<font color="#E5E5E5"> it</font><font color="#CCCCCC"> into a</font>

1198
00:43:34,130 --> 00:43:38,180
science and a science means that you can

1199
00:43:36,140 --> 00:43:40,140
<font color="#E5E5E5">build automated tools the science means</font>

1200
00:43:38,180 --> 00:43:42,390
you can diagnose problems you can

1201
00:43:40,140 --> 00:43:45,120
if I hot spots in your code and life

1202
00:43:42,390 --> 00:43:45,990
gets us so much more easier and<font color="#E5E5E5"> we think</font>

1203
00:43:45,120 --> 00:43:47,940
we've gone through<font color="#CCCCCC"> this</font><font color="#E5E5E5"> sort of</font>

1204
00:43:45,990 --> 00:43:49,649
transition<font color="#E5E5E5"> and I I really hope that</font>

1205
00:43:47,940 --> 00:43:50,370
sharing some of these anecdotes sharing

1206
00:43:49,650 --> 00:43:51,570
a little bit<font color="#E5E5E5"> more about our</font>

1207
00:43:50,370 --> 00:43:53,910
infrastructure<font color="#E5E5E5"> is somewhat helpful</font>

1208
00:43:51,570 --> 00:43:56,880
around<font color="#E5E5E5"> how to deploy and build services</font>

1209
00:43:53,910 --> 00:43:59,850
in the cloud<font color="#CCCCCC"> and sharing how we've made</font>

1210
00:43:56,880 --> 00:44:01,910
sort of the ambiguous<font color="#E5E5E5"> a little more</font>

1211
00:43:59,850 --> 00:44:05,990
determined deterministic<font color="#CCCCCC"> I should say so</font>

1212
00:44:01,910 --> 00:44:05,990
<font color="#CCCCCC">thank you guys</font><font color="#E5E5E5"> very much</font><font color="#CCCCCC"> for the time</font>

1213
00:44:16,010 --> 00:44:20,070
well one of the reasons that I work as a

1214
00:44:18,120 --> 00:44:21,359
contractor not a full-time<font color="#CCCCCC"> employee is</font>

1215
00:44:20,070 --> 00:44:23,940
because I would be the guy to tell the

1216
00:44:21,360 --> 00:44:27,780
boss he<font color="#E5E5E5"> was out</font><font color="#CCCCCC"> of time five</font><font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> ago</font>

1217
00:44:23,940 --> 00:44:30,120
<font color="#CCCCCC">okay but he's really undeniable it does</font>

1218
00:44:27,780 --> 00:44:31,980
have a table<font color="#CCCCCC"> prevatt</font><font color="#E5E5E5"> e is in the is</font><font color="#CCCCCC"> in</font>

1219
00:44:30,120 --> 00:44:34,109
the vendor hall so you can take<font color="#CCCCCC"> your</font>

1220
00:44:31,980 --> 00:44:36,450
questions there if<font color="#E5E5E5"> we don't get too much</font>

1221
00:44:34,110 --> 00:44:38,000
done here right now we have time for

1222
00:44:36,450 --> 00:44:40,319
maybe one or two quick questions

1223
00:44:38,000 --> 00:44:46,170
something like to direct and focus on

1224
00:44:40,320 --> 00:44:48,870
right now need the microphone so that

1225
00:44:46,170 --> 00:44:50,430
your recorded for<font color="#CCCCCC"> the presentation so</font>

1226
00:44:48,870 --> 00:44:51,810
how much<font color="#CCCCCC"> of all of your infrastructures</font>

1227
00:44:50,430 --> 00:44:52,980
in the cloud is it<font color="#CCCCCC"> 100% what you</font>

1228
00:44:51,810 --> 00:44:57,779
described or do you still<font color="#CCCCCC"> have some</font><font color="#E5E5E5"> on</font>

1229
00:44:52,980 --> 00:45:01,260
pram or data center harder<font color="#CCCCCC"> % given that</font>

1230
00:44:57,780 --> 00:45:02,910
SQS has a 64k her message and since

1231
00:45:01,260 --> 00:45:04,830
you're waiting<font color="#CCCCCC"> 10 seconds does your</font>

1232
00:45:02,910 --> 00:45:07,230
function that in<font color="#CCCCCC"> queues messages also</font>

1233
00:45:04,830 --> 00:45:09,210
<font color="#E5E5E5">divide messages up in a</font><font color="#CCCCCC"> multiple</font><font color="#E5E5E5"> SQS</font>

1234
00:45:07,230 --> 00:45:11,820
that's an awesome question so what we

1235
00:45:09,210 --> 00:45:13,740
basically do is we we compact integers

1236
00:45:11,820 --> 00:45:15,600
so we don't store the original content

1237
00:45:13,740 --> 00:45:20,279
and so everything<font color="#CCCCCC"> that we're storing is</font>

1238
00:45:15,600 --> 00:45:23,100
anyways under 64k two quick ones did you

1239
00:45:20,280 --> 00:45:26,430
<font color="#E5E5E5">consider Erlang because our yes yeah</font>

1240
00:45:23,100 --> 00:45:28,230
about the language selection so yeah so

1241
00:45:26,430 --> 00:45:29,669
we started when I was looking at

1242
00:45:28,230 --> 00:45:31,740
building out the technology very early

1243
00:45:29,670 --> 00:45:34,170
on started the prototype in Python and

1244
00:45:31,740 --> 00:45:36,120
went from Python to Java may believe

1245
00:45:34,170 --> 00:45:38,100
because of<font color="#E5E5E5"> Unicode issues and Python 3</font>

1246
00:45:36,120 --> 00:45:39,660
wasn't heavily supported for years ago

1247
00:45:38,100 --> 00:45:41,819
there weren't that many sort of

1248
00:45:39,660 --> 00:45:43,859
libraries that were adopting it java

1249
00:45:41,820 --> 00:45:45,960
just seemed a little too heavy and go

1250
00:45:43,860 --> 00:45:47,940
seemed more logical we built a prototype

1251
00:45:45,960 --> 00:45:49,890
in Erlang very early on we<font color="#E5E5E5"> love the</font>

1252
00:45:47,940 --> 00:45:51,990
concept of OTP makes a lot of sense

1253
00:45:49,890 --> 00:45:53,819
amnezia is a really cool tool to for

1254
00:45:51,990 --> 00:45:55,258
data storage

1255
00:45:53,819 --> 00:45:57,839
key thing that we learned<font color="#E5E5E5"> from that was</font>

1256
00:45:55,259 --> 00:45:59,369
string parsing was a nightmare sand and

1257
00:45:57,839 --> 00:46:01,469
trying to deal with<font color="#CCCCCC"> Unicode in Erlang</font>

1258
00:45:59,369 --> 00:46:03,150
was such a pain where we sort<font color="#E5E5E5"> of</font>

1259
00:46:01,469 --> 00:46:04,680
realized that it was going<font color="#E5E5E5"> to be better</font>

1260
00:46:03,150 --> 00:46:06,690
for<font color="#E5E5E5"> us to pick a language that allowed</font>

1261
00:46:04,680 --> 00:46:08,368
us to spend<font color="#E5E5E5"> more</font><font color="#CCCCCC"> time on control flow</font>

1262
00:46:06,690 --> 00:46:10,739
rather than accurately parsing

1263
00:46:08,369 --> 00:46:13,619
characters and what instance<font color="#E5E5E5"> type did</font>

1264
00:46:10,739 --> 00:46:17,279
you use for smart grid smart<font color="#E5E5E5"> cache so</font>

1265
00:46:13,619 --> 00:46:19,079
that's a<font color="#E5E5E5"> see three large thank you very</font>

1266
00:46:17,279 --> 00:46:20,549
much it's really been an honor and an

1267
00:46:19,079 --> 00:46:22,049
opportunity<font color="#CCCCCC"> for all of</font><font color="#E5E5E5"> us to</font><font color="#CCCCCC"> learn here</font>

1268
00:46:20,549 --> 00:46:23,880
this afternoon and he has a table in the

1269
00:46:22,049 --> 00:46:30,538
vendor hall you can follow up there<font color="#E5E5E5"> if</font>

1270
00:46:23,880 --> 00:46:33,289
you'd like<font color="#CCCCCC"> to thanks again thank</font><font color="#E5E5E5"> you</font>

1271
00:46:30,539 --> 00:46:33,289
appreciate<font color="#E5E5E5"> it</font>

