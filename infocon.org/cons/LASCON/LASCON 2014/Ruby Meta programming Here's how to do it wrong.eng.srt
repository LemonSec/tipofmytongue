1
00:00:17,480 --> 00:00:25,009
so this is Ruby metaprogramming how to

2
00:00:20,570 --> 00:00:28,430
do it wrong so we'll just<font color="#E5E5E5"> jump right</font>

3
00:00:25,009 --> 00:00:33,250
into it how many Ruby people do we have

4
00:00:28,430 --> 00:00:36,589
in here are a little bit perfect cool

5
00:00:33,250 --> 00:00:38,720
and all those people how many<font color="#E5E5E5"> of you</font>

6
00:00:36,589 --> 00:00:41,900
know<font color="#CCCCCC"> metaprogramming or use meta</font>

7
00:00:38,720 --> 00:00:44,030
programming or are familiar with<font color="#E5E5E5"> all</font>

8
00:00:41,900 --> 00:00:49,220
<font color="#E5E5E5">right cool cool so we have our both bad</font>

9
00:00:44,030 --> 00:00:52,070
people yeah so we're going to<font color="#E5E5E5"> go over</font>

10
00:00:49,220 --> 00:00:53,600
Ruby kind of the in a general sense and

11
00:00:52,070 --> 00:00:56,079
kind of explain what meta programming is

12
00:00:53,600 --> 00:00:58,850
and what it does we're going<font color="#E5E5E5"> to look at</font>

13
00:00:56,079 --> 00:01:01,300
how<font color="#E5E5E5"> a meta programming gets developers</font>

14
00:00:58,850 --> 00:01:03,469
into trouble and even us into trouble

15
00:01:01,300 --> 00:01:05,209
the three deadly sins a meta programming

16
00:01:03,469 --> 00:01:08,060
basically what we see most<font color="#E5E5E5"> often in the</font>

17
00:01:05,209 --> 00:01:09,140
assessments that we're doing and how

18
00:01:08,060 --> 00:01:11,360
they manifest themselves<font color="#CCCCCC"> and</font>

19
00:01:09,140 --> 00:01:12,530
vulnerabilities and then we'll try<font color="#E5E5E5"> to go</font>

20
00:01:11,360 --> 00:01:14,509
over some examples of good meta

21
00:01:12,530 --> 00:01:16,009
programming or kind<font color="#E5E5E5"> of some general</font>

22
00:01:14,509 --> 00:01:20,450
rules and how to mitigate some of these

23
00:01:16,009 --> 00:01:22,580
things so the first thing<font color="#CCCCCC"> is what is</font>

24
00:01:20,450 --> 00:01:24,050
Ruby if you're not<font color="#E5E5E5"> familiar in this that</font>

25
00:01:22,580 --> 00:01:25,640
are not or didn't raise your hand it's

26
00:01:24,050 --> 00:01:27,200
dynamic open source language with a

27
00:01:25,640 --> 00:01:29,420
focus on simplicity and productivity

28
00:01:27,200 --> 00:01:32,630
that's directly from<font color="#E5E5E5"> there they're kind</font>

29
00:01:29,420 --> 00:01:34,759
<font color="#CCCCCC">of mantra you can see the the greeter</font>

30
00:01:32,630 --> 00:01:37,789
class here is just<font color="#E5E5E5"> a really</font><font color="#CCCCCC"> simple way</font>

31
00:01:34,759 --> 00:01:42,200
<font color="#CCCCCC">to say</font><font color="#E5E5E5"> hello to the world we're all</font>

32
00:01:37,789 --> 00:01:46,700
familiar with that concept and what is

33
00:01:42,200 --> 00:01:49,039
best in Ruby well<font color="#E5E5E5"> it's elegant it's</font>

34
00:01:46,700 --> 00:01:50,239
simple you're not bound by a lot<font color="#E5E5E5"> of the</font>

35
00:01:49,039 --> 00:01:53,450
things<font color="#E5E5E5"> you would have some of the larger</font>

36
00:01:50,239 --> 00:01:55,429
frameworks and in languages it's easy to

37
00:01:53,450 --> 00:01:56,840
deploy its productive there's gems for

38
00:01:55,429 --> 00:01:57,890
pretty much everything you<font color="#E5E5E5"> want to do so</font>

39
00:01:56,840 --> 00:01:58,940
if you<font color="#E5E5E5"> don't feel like writing something</font>

40
00:01:57,890 --> 00:02:02,000
you could probably get a gem that's

41
00:01:58,940 --> 00:02:03,489
readily available but it's also very

42
00:02:02,000 --> 00:02:05,810
easy<font color="#E5E5E5"> to shoot</font><font color="#CCCCCC"> yourself in the foot with</font>

43
00:02:03,489 --> 00:02:09,020
all the same things that<font color="#E5E5E5"> make Ruby so</font>

44
00:02:05,810 --> 00:02:13,780
great can also really cause some intense

45
00:02:09,020 --> 00:02:15,860
problems and what is<font color="#CCCCCC"> meta programming</font>

46
00:02:13,780 --> 00:02:19,489
<font color="#CCCCCC">metaprogramming is commonly defined as</font>

47
00:02:15,860 --> 00:02:20,959
code that writes code that's kind of a

48
00:02:19,489 --> 00:02:22,340
definition but really it's code that

49
00:02:20,959 --> 00:02:24,470
manipulates language constructs at

50
00:02:22,340 --> 00:02:28,010
runtime so it's kind of that specific

51
00:02:24,470 --> 00:02:30,200
and I<font color="#CCCCCC"> think that Mike can talk more on</font>

52
00:02:28,010 --> 00:02:32,209
this example from

53
00:02:30,200 --> 00:02:36,099
active record yeah submitter program is

54
00:02:32,209 --> 00:02:38,269
a very powerful kind of part of Ruby

55
00:02:36,099 --> 00:02:40,190
basically it's an idea where you're

56
00:02:38,269 --> 00:02:41,870
writing code at runtime so it you can

57
00:02:40,190 --> 00:02:43,550
think<font color="#E5E5E5"> of it as like method definitions</font>

58
00:02:41,870 --> 00:02:44,959
that don't exist until they're created

59
00:02:43,550 --> 00:02:49,370
at runtime which a lot<font color="#CCCCCC"> of languages</font>

60
00:02:44,959 --> 00:02:51,110
can't support and so you can<font color="#E5E5E5"> do very</font>

61
00:02:49,370 --> 00:02:52,940
interesting<font color="#E5E5E5"> things like this is an</font>

62
00:02:51,110 --> 00:02:55,130
example from rails where if you ever use

63
00:02:52,940 --> 00:02:57,349
<font color="#E5E5E5">rails before there's very powerful fine</font>

64
00:02:55,130 --> 00:02:59,120
bye they're called dynamic filter so

65
00:02:57,349 --> 00:03:01,518
it's basically fine by any attribute or

66
00:02:59,120 --> 00:03:03,980
column name and none of<font color="#E5E5E5"> these methods</font>

67
00:03:01,519 --> 00:03:05,569
are actually defined what Ruby does is

68
00:03:03,980 --> 00:03:08,450
it uses<font color="#E5E5E5"> this technique called ghost</font>

69
00:03:05,569 --> 00:03:10,220
methods which the top of that's at the

70
00:03:08,450 --> 00:03:12,170
top of screen you might be able<font color="#E5E5E5"> to see</font>

71
00:03:10,220 --> 00:03:15,170
there's this method defined called

72
00:03:12,170 --> 00:03:18,018
method missing and of the Ruby call

73
00:03:15,170 --> 00:03:20,390
stack of methods that's called last when

74
00:03:18,019 --> 00:03:22,760
it can't find any other<font color="#E5E5E5"> method with that</font>

75
00:03:20,390 --> 00:03:24,380
name and what you can do in Ruby is over

76
00:03:22,760 --> 00:03:26,090
right that method since everything in

77
00:03:24,380 --> 00:03:28,760
Ruby's open you can rewrite classes you

78
00:03:26,090 --> 00:03:30,620
can rewrite pretty much everything<font color="#E5E5E5"> you</font>

79
00:03:28,760 --> 00:03:33,349
can rewrite that method and then<font color="#E5E5E5"> it'll</font>

80
00:03:30,620 --> 00:03:35,720
run some dynamic code for you so what

81
00:03:33,349 --> 00:03:40,790
the rails guys did was they created this

82
00:03:35,720 --> 00:03:42,350
this<font color="#E5E5E5"> method that that when you say find</font>

83
00:03:40,790 --> 00:03:45,440
by name for instance on the user class

84
00:03:42,350 --> 00:03:47,150
you pass in a name there's no there's no

85
00:03:45,440 --> 00:03:49,639
method that's being called that's called

86
00:03:47,150 --> 00:03:51,650
fine by name there's no<font color="#E5E5E5"> def find by name</font>

87
00:03:49,639 --> 00:03:53,780
what gets called<font color="#E5E5E5"> is method missing and</font>

88
00:03:51,650 --> 00:03:56,500
then it calls down to<font color="#CCCCCC"> this run fine by</font>

89
00:03:53,780 --> 00:03:59,090
method and<font color="#E5E5E5"> it does some kind of basic</font>

90
00:03:56,500 --> 00:04:00,950
string operations and then it finally

91
00:03:59,090 --> 00:04:04,069
just packages that the<font color="#CCCCCC"> information that</font>

92
00:04:00,950 --> 00:04:06,768
<font color="#E5E5E5">you want up into a where call down there</font>

93
00:04:04,069 --> 00:04:09,950
<font color="#E5E5E5">at the bottom but instead of having a</font>

94
00:04:06,769 --> 00:04:11,989
hundred fine by name fine by date fine

95
00:04:09,950 --> 00:04:14,358
by whatever whatever columns you have in

96
00:04:11,989 --> 00:04:16,099
your database you<font color="#E5E5E5"> have this way</font><font color="#CCCCCC"> to write</font>

97
00:04:14,359 --> 00:04:18,049
way less code and still get the same

98
00:04:16,099 --> 00:04:21,079
<font color="#E5E5E5">effect so that's where letter</font>

99
00:04:18,048 --> 00:04:22,820
programming's insanely insanely useful

100
00:04:21,079 --> 00:04:25,580
is that<font color="#E5E5E5"> you can write way less code and</font>

101
00:04:22,820 --> 00:04:28,030
so on the<font color="#E5E5E5"> same powerful code available</font>

102
00:04:25,580 --> 00:04:28,030
to you

103
00:04:29,080 --> 00:04:33,669
so now we're<font color="#E5E5E5"> going to get into</font><font color="#CCCCCC"> the three</font>

104
00:04:31,569 --> 00:04:36,930
deadly metaprogramming sins these are

105
00:04:33,669 --> 00:04:40,479
probably some of the most misused

106
00:04:36,930 --> 00:04:42,069
methods that we see or I guess you could

107
00:04:40,479 --> 00:04:45,008
<font color="#E5E5E5">say better programming techniques and</font>

108
00:04:42,069 --> 00:04:46,689
we're going to<font color="#E5E5E5"> go</font><font color="#CCCCCC"> through we're</font><font color="#E5E5E5"> going to</font>

109
00:04:45,009 --> 00:04:49,090
show you what it each one does we'll

110
00:04:46,689 --> 00:04:50,740
talk<font color="#E5E5E5"> about how it's used poorly where it</font>

111
00:04:49,090 --> 00:04:54,638
is used and how we've seen it used in us

112
00:04:50,740 --> 00:04:58,180
in our assessments the examples<font color="#E5E5E5"> will go</font>

113
00:04:54,639 --> 00:05:00,340
<font color="#E5E5E5">over our actual code snippets kind of</font>

114
00:04:58,180 --> 00:05:01,569
you know cleansed and whatever but they

115
00:05:00,340 --> 00:05:03,789
have<font color="#CCCCCC"> been used</font><font color="#E5E5E5"> there in real</font>

116
00:05:01,569 --> 00:05:07,810
applications so before you say<font color="#E5E5E5"> that's</font>

117
00:05:03,789 --> 00:05:10,719
got to be a goat whatever there it sits

118
00:05:07,810 --> 00:05:12,520
in there so the first one is sent send

119
00:05:10,719 --> 00:05:14,310
is pretty simple it invokes the method

120
00:05:12,520 --> 00:05:16,620
identified by the symbol<font color="#E5E5E5"> you're passing</font>

121
00:05:14,310 --> 00:05:19,719
passing any arguments that<font color="#CCCCCC"> you specify</font>

122
00:05:16,620 --> 00:05:21,639
and it's pretty<font color="#E5E5E5"> much equivalent to what</font>

123
00:05:19,719 --> 00:05:23,860
you would see in a dot notation so you

124
00:05:21,639 --> 00:05:25,659
call<font color="#E5E5E5"> it that length you call that's some</font>

125
00:05:23,860 --> 00:05:28,150
on something or<font color="#E5E5E5"> something like that it's</font>

126
00:05:25,659 --> 00:05:29,590
the same<font color="#CCCCCC"> thing as passing send with any</font>

127
00:05:28,150 --> 00:05:31,960
arguments that are relevant to that so

128
00:05:29,590 --> 00:05:33,448
you might say well<font color="#CCCCCC"> why would I use that</font>

129
00:05:31,960 --> 00:05:36,430
why<font color="#E5E5E5"> would I you just use dot notation</font>

130
00:05:33,449 --> 00:05:38,229
one thing<font color="#E5E5E5"> is that dot send is faster so</font>

131
00:05:36,430 --> 00:05:42,279
it's a benchmarking issue you could use

132
00:05:38,229 --> 00:05:43,690
that sent for that you can dynamically

133
00:05:42,279 --> 00:05:45,279
decide what method to call it<font color="#CCCCCC"> runtime</font>

134
00:05:43,690 --> 00:05:46,419
like we've been saying so if you don't

135
00:05:45,279 --> 00:05:49,539
<font color="#E5E5E5">know what method you're going to call</font>

136
00:05:46,419 --> 00:05:51,940
them we'll see an example here<font color="#CCCCCC"> it'll</font>

137
00:05:49,539 --> 00:05:54,279
<font color="#E5E5E5">allow you to call that method based on</font>

138
00:05:51,940 --> 00:05:56,529
input or the context of the application

139
00:05:54,279 --> 00:05:58,779
whatever<font color="#E5E5E5"> it might be on the back end I</font>

140
00:05:56,529 --> 00:06:00,279
can call private<font color="#CCCCCC"> methods which there's a</font>

141
00:05:58,779 --> 00:06:05,370
big argument about that there was a

142
00:06:00,279 --> 00:06:07,810
change in in Ruby that you know kind of

143
00:06:05,370 --> 00:06:09,159
reverted that idea saying okay we're not

144
00:06:07,810 --> 00:06:11,560
going to call private<font color="#E5E5E5"> methods but it was</font>

145
00:06:09,159 --> 00:06:14,169
ultimately reverted in now<font color="#E5E5E5"> you can still</font>

146
00:06:11,560 --> 00:06:16,629
call<font color="#CCCCCC"> private methods if you're looking</font>

147
00:06:14,169 --> 00:06:19,060
to do that in some kind of interesting

148
00:06:16,629 --> 00:06:20,680
way<font color="#E5E5E5"> I'm a most important like I said you</font>

149
00:06:19,060 --> 00:06:23,370
can decide<font color="#CCCCCC"> what</font><font color="#E5E5E5"> you want to call it run</font>

150
00:06:20,680 --> 00:06:26,949
time and we'll look<font color="#E5E5E5"> at this example here</font>

151
00:06:23,370 --> 00:06:30,490
we've defined a method in the controller

152
00:06:26,949 --> 00:06:32,919
and basically what this does is you the

153
00:06:30,490 --> 00:06:35,710
one<font color="#E5E5E5"> they're the find one is kind of</font>

154
00:06:32,919 --> 00:06:37,659
mimicking a user session right it's

155
00:06:35,710 --> 00:06:40,479
passing in a parameter type in<font color="#E5E5E5"> this case</font>

156
00:06:37,659 --> 00:06:41,219
it's an attribute so it sets a variable

157
00:06:40,479 --> 00:06:43,200
to the

158
00:06:41,220 --> 00:06:46,260
<font color="#CCCCCC">are passed in</font><font color="#E5E5E5"> by the user and then it's</font>

159
00:06:43,200 --> 00:06:48,120
sending that method or in this case the

160
00:06:46,260 --> 00:06:51,469
type of attribute directly to the

161
00:06:48,120 --> 00:06:54,240
employee with a value so<font color="#CCCCCC"> your if the</font>

162
00:06:51,470 --> 00:06:56,160
user passes the name type then it's

163
00:06:54,240 --> 00:06:58,470
sending the name<font color="#E5E5E5"> that they change they</font>

164
00:06:56,160 --> 00:07:00,060
want to change<font color="#CCCCCC"> to and then it's going to</font>

165
00:06:58,470 --> 00:07:02,190
save that<font color="#E5E5E5"> user and redirect back to the</font>

166
00:07:00,060 --> 00:07:05,900
path so what<font color="#E5E5E5"> are we really achieving</font>

167
00:07:02,190 --> 00:07:08,610
here where we can use this particular

168
00:07:05,900 --> 00:07:10,229
method for multiple types right no

169
00:07:08,610 --> 00:07:13,740
matter how many types we add<font color="#CCCCCC"> to this</font>

170
00:07:10,230 --> 00:07:16,410
user object we can just have this five

171
00:07:13,740 --> 00:07:19,710
lines of code continually do that same

172
00:07:16,410 --> 00:07:21,450
function and it'll allow you to a

173
00:07:19,710 --> 00:07:24,930
dynamic actions if<font color="#CCCCCC"> you want to do</font><font color="#E5E5E5"> that</font>

174
00:07:21,450 --> 00:07:28,050
as well but there<font color="#E5E5E5"> are some issues with</font>

175
00:07:24,930 --> 00:07:29,970
it but<font color="#E5E5E5"> let's look at how it works yeah</font>

176
00:07:28,050 --> 00:07:32,730
otherwise you have to have you know set

177
00:07:29,970 --> 00:07:34,590
user name set names<font color="#E5E5E5"> that date set</font>

178
00:07:32,730 --> 00:07:35,820
whatever<font color="#CCCCCC"> anything you have in your model</font>

179
00:07:34,590 --> 00:07:40,770
or your database you have<font color="#E5E5E5"> to have an</font>

180
00:07:35,820 --> 00:07:42,570
individual method to set so so this<font color="#E5E5E5"> is a</font>

181
00:07:40,770 --> 00:07:44,370
pretty<font color="#CCCCCC"> rudimentary example but it's an</font>

182
00:07:42,570 --> 00:07:45,810
edit profile page<font color="#CCCCCC"> most examples in</font><font color="#E5E5E5"> this</font>

183
00:07:44,370 --> 00:07:47,220
application this code will<font color="#E5E5E5"> be available</font>

184
00:07:45,810 --> 00:07:48,870
after the<font color="#E5E5E5"> talk if you want to mess</font>

185
00:07:47,220 --> 00:07:52,800
around<font color="#E5E5E5"> with it but</font><font color="#CCCCCC"> you essentially</font><font color="#E5E5E5"> will</font>

186
00:07:48,870 --> 00:07:55,919
sec select a attribute for the user<font color="#E5E5E5"> and</font>

187
00:07:52,800 --> 00:07:59,700
it can you know rename myself to Bob for

188
00:07:55,919 --> 00:08:02,250
example I'm going to<font color="#E5E5E5"> see my</font><font color="#CCCCCC"> name here</font>

189
00:07:59,700 --> 00:08:03,750
changes to Bob and<font color="#E5E5E5"> I can also edit my</font>

190
00:08:02,250 --> 00:08:07,650
status and I can say okay I'm

191
00:08:03,750 --> 00:08:11,190
unavailable now ok so I'm unavailable

192
00:08:07,650 --> 00:08:14,310
but because you are allowing the user to

193
00:08:11,190 --> 00:08:17,190
enter whatever they want some parameter

194
00:08:14,310 --> 00:08:19,020
tampering here will allow<font color="#E5E5E5"> me to kind of</font>

195
00:08:17,190 --> 00:08:22,770
pick the status and say oh I<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

196
00:08:19,020 --> 00:08:24,539
make you know this much money<font color="#E5E5E5"> and if I</font>

197
00:08:22,770 --> 00:08:29,190
send that interceptor requests and

198
00:08:24,540 --> 00:08:30,630
simply change this type 2 i'm guessing

199
00:08:29,190 --> 00:08:35,640
salary since everything seems to<font color="#E5E5E5"> be</font>

200
00:08:30,630 --> 00:08:39,689
<font color="#E5E5E5">pretty straightforward there</font><font color="#CCCCCC"> i should</font>

201
00:08:35,640 --> 00:08:42,449
now have a new salary right and that's

202
00:08:39,690 --> 00:08:45,350
the that's kind of the problem with with

203
00:08:42,450 --> 00:08:48,030
send in a nutshell is that if you're not

204
00:08:45,350 --> 00:08:49,930
taking some steps<font color="#E5E5E5"> to mitigate that then</font>

205
00:08:48,030 --> 00:08:54,800
you can<font color="#CCCCCC"> have an issue</font>

206
00:08:49,930 --> 00:08:56,750
so what do we<font color="#E5E5E5"> see obviously allows</font><font color="#CCCCCC"> the</font>

207
00:08:54,800 --> 00:08:58,459
attack the user or the attacker to

208
00:08:56,750 --> 00:08:59,810
determine what method is called in your

209
00:08:58,460 --> 00:09:02,930
really trusting the user to use your

210
00:08:59,810 --> 00:09:04,459
form and use your your input and it

211
00:09:02,930 --> 00:09:06,290
allows the attacker to take advantage<font color="#CCCCCC"> of</font>

212
00:09:04,460 --> 00:09:13,730
this and<font color="#CCCCCC"> used methods of the developer</font>

213
00:09:06,290 --> 00:09:15,560
may not have intended also we have a

214
00:09:13,730 --> 00:09:18,200
common use here did<font color="#E5E5E5"> you want to talk</font>

215
00:09:15,560 --> 00:09:22,939
about<font color="#E5E5E5"> that yeah so in this example this</font>

216
00:09:18,200 --> 00:09:24,770
is<font color="#E5E5E5"> a way to kind of to shorthand kind of</font>

217
00:09:22,940 --> 00:09:27,500
create a configuration for in this<font color="#E5E5E5"> case</font>

218
00:09:24,770 --> 00:09:29,689
<font color="#CCCCCC">its keys for different social networks</font>

219
00:09:27,500 --> 00:09:31,610
and so it's kind of a common way you'd

220
00:09:29,690 --> 00:09:34,040
use send in a good way<font color="#CCCCCC"> out of a bad way</font>

221
00:09:31,610 --> 00:09:35,720
but in a good way to basically create a

222
00:09:34,040 --> 00:09:38,449
configuration for like Twitter or

223
00:09:35,720 --> 00:09:40,340
Facebook where instead<font color="#CCCCCC"> of saying both</font>

224
00:09:38,450 --> 00:09:42,350
key equals this secret token equals this

225
00:09:40,340 --> 00:09:43,790
callback URL equals this you're

226
00:09:42,350 --> 00:09:47,210
basically<font color="#CCCCCC"> just looping through all these</font>

227
00:09:43,790 --> 00:09:48,410
things<font color="#E5E5E5"> and using send to set them so</font>

228
00:09:47,210 --> 00:09:53,090
it's just<font color="#E5E5E5"> this is kind of an interesting</font>

229
00:09:48,410 --> 00:10:02,510
way of how you send and why it's useful

230
00:09:53,090 --> 00:10:04,340
so it's not<font color="#E5E5E5"> all bad</font><font color="#CCCCCC"> but so going back to</font>

231
00:10:02,510 --> 00:10:06,439
the methods that you could call this is

232
00:10:04,340 --> 00:10:08,390
just i just did a grip on basically all

233
00:10:06,440 --> 00:10:09,920
the methods that end in<font color="#E5E5E5"> that equal you</font>

234
00:10:08,390 --> 00:10:12,260
solve it<font color="#E5E5E5"> like i had type equals right</font>

235
00:10:09,920 --> 00:10:13,640
for the parameter this is<font color="#E5E5E5"> everything</font>

236
00:10:12,260 --> 00:10:15,530
<font color="#CCCCCC">that you could possibly call what that</font>

237
00:10:13,640 --> 00:10:18,319
ends in and equals in it in a method

238
00:10:15,530 --> 00:10:20,300
right of that particular object so you

239
00:10:18,320 --> 00:10:23,060
can see I have my employee object and I

240
00:10:20,300 --> 00:10:24,469
can send any of these as a user so some

241
00:10:23,060 --> 00:10:27,140
of these<font color="#CCCCCC"> are you know destroyed</font>

242
00:10:24,470 --> 00:10:28,640
callbacks record time<font color="#E5E5E5"> stamps</font><font color="#CCCCCC"> you know it</font>

243
00:10:27,140 --> 00:10:31,280
and that could maybe mess with these in

244
00:10:28,640 --> 00:10:33,710
interesting ways but you are exposing

245
00:10:31,280 --> 00:10:35,150
all of these methods to your tier<font color="#E5E5E5"> end</font>

246
00:10:33,710 --> 00:10:37,010
<font color="#E5E5E5">user when you're when you're calling</font>

247
00:10:35,150 --> 00:10:40,250
send and not doing something<font color="#E5E5E5"> to fix it</font>

248
00:10:37,010 --> 00:10:43,130
so how do we fix it the general rules

249
00:10:40,250 --> 00:10:48,110
are try to avoid<font color="#CCCCCC"> using user controllable</font>

250
00:10:43,130 --> 00:10:50,600
parameters with send when you can if you

251
00:10:48,110 --> 00:10:52,450
do have to you want to white try to

252
00:10:50,600 --> 00:10:56,750
whitelist those parameters in some way

253
00:10:52,450 --> 00:10:58,250
and<font color="#E5E5E5"> we have an example of that and then</font>

254
00:10:56,750 --> 00:10:59,780
wherever possible if<font color="#E5E5E5"> you don't need to</font>

255
00:10:58,250 --> 00:11:01,570
use send don't usually just use the

256
00:10:59,780 --> 00:11:02,620
standard notation

257
00:11:01,570 --> 00:11:05,650
obviously that wouldn't be<font color="#E5E5E5"> better</font>

258
00:11:02,620 --> 00:11:09,490
programming but this would be<font color="#CCCCCC"> the fix</font>

259
00:11:05,650 --> 00:11:11,050
that we've implemented in some way maybe

260
00:11:09,490 --> 00:11:12,700
not a production level fix but it<font color="#CCCCCC"> fix on</font>

261
00:11:11,050 --> 00:11:15,849
the less so we've defined an acceptable

262
00:11:12,700 --> 00:11:17,440
parameters array that way we do the<font color="#CCCCCC"> F</font>

263
00:11:15,850 --> 00:11:20,620
check on the type so when the type comes

264
00:11:17,440 --> 00:11:23,020
in it's saying setting the<font color="#E5E5E5"> type with the</font>

265
00:11:20,620 --> 00:11:24,430
parameters but if it's not equal to<font color="#E5E5E5"> one</font>

266
00:11:23,020 --> 00:11:26,439
<font color="#CCCCCC">of the two that we've defined in the</font>

267
00:11:24,430 --> 00:11:28,150
array then it won't do anything and just

268
00:11:26,440 --> 00:11:37,270
redirect back to the path and we can

269
00:11:28,150 --> 00:11:38,680
kind of show that fix here and let's

270
00:11:37,270 --> 00:11:43,030
<font color="#CCCCCC">just hope for the best with the demo</font>

271
00:11:38,680 --> 00:11:47,560
right so if i take my status and again i

272
00:11:43,030 --> 00:11:52,689
try to change my salary and you're

273
00:11:47,560 --> 00:11:54,880
sipping that<font color="#E5E5E5"> request shouldn't do</font>

274
00:11:52,690 --> 00:12:00,070
anything with that fix apply because

275
00:11:54,880 --> 00:12:01,420
it's not<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that array so my salary</font>

276
00:12:00,070 --> 00:12:08,700
<font color="#CCCCCC">actually hasn't changed i'm still making</font>

277
00:12:01,420 --> 00:12:08,699
big bucks right so

278
00:12:10,520 --> 00:12:15,829
so that is saying<font color="#E5E5E5"> next that Mike's can</font>

279
00:12:12,950 --> 00:12:17,300
talk about constant eyes and<font color="#CCCCCC"> that</font>

280
00:12:15,830 --> 00:12:19,520
<font color="#E5E5E5">example was actually straight out of a</font>

281
00:12:17,300 --> 00:12:20,959
rails of session we did so that is a

282
00:12:19,520 --> 00:12:24,260
legitimate example we've seen and that's

283
00:12:20,960 --> 00:12:28,850
also<font color="#E5E5E5"> the fix they used to to get around</font>

284
00:12:24,260 --> 00:12:31,910
that issue so so constant eyes this is

285
00:12:28,850 --> 00:12:34,580
really interesting Ruby<font color="#E5E5E5"> ism but it's a</font>

286
00:12:31,910 --> 00:12:37,160
way to basically at runtime and create a

287
00:12:34,580 --> 00:12:40,460
constant by looking up all the constants

288
00:12:37,160 --> 00:12:43,189
that are defined<font color="#E5E5E5"> and basically creating</font>

289
00:12:40,460 --> 00:12:46,340
an object with that whatever you<font color="#E5E5E5"> pass in</font>

290
00:12:43,190 --> 00:12:48,590
creating a constant with it so what you

291
00:12:46,340 --> 00:12:50,270
<font color="#E5E5E5">can do with that is you can see</font><font color="#CCCCCC"> in this</font>

292
00:12:48,590 --> 00:12:51,860
code we're taking a parameter params

293
00:12:50,270 --> 00:12:55,340
class and we're in constant eyes on it

294
00:12:51,860 --> 00:12:56,690
and then the goal here the original goal

295
00:12:55,340 --> 00:12:59,390
<font color="#CCCCCC">of what the rails developer will trying</font>

296
00:12:56,690 --> 00:13:03,470
to do is take in multiple different

297
00:12:59,390 --> 00:13:05,750
database tables active record objects

298
00:13:03,470 --> 00:13:08,090
and run a fine by ID on them so this way

299
00:13:05,750 --> 00:13:11,720
you don't have to say<font color="#CCCCCC"> like user defined</font>

300
00:13:08,090 --> 00:13:13,040
by the classes find by the cars whatever

301
00:13:11,720 --> 00:13:14,960
you you know whatever<font color="#E5E5E5"> kind of</font>

302
00:13:13,040 --> 00:13:16,670
application you're running and you have

303
00:13:14,960 --> 00:13:19,790
<font color="#E5E5E5">different models this way you can just</font>

304
00:13:16,670 --> 00:13:21,650
dynamically defined define<font color="#E5E5E5"> I'm going to</font>

305
00:13:19,790 --> 00:13:22,939
take a class from a user and I'm going

306
00:13:21,650 --> 00:13:25,240
<font color="#E5E5E5">to take an ID from a user and</font><font color="#CCCCCC"> then I'm</font>

307
00:13:22,940 --> 00:13:27,440
going<font color="#CCCCCC"> to search</font><font color="#E5E5E5"> that table for that ID</font>

308
00:13:25,240 --> 00:13:30,230
so if anyone can't figure out why that's

309
00:13:27,440 --> 00:13:31,790
a bad idea we'll show you but this is a

310
00:13:30,230 --> 00:13:33,200
pretty common issue we see in<font color="#CCCCCC"> concept</font>

311
00:13:31,790 --> 00:13:36,050
eyes one of the first things we do when

312
00:13:33,200 --> 00:13:37,940
we look at rails apps or<font color="#CCCCCC"> Ruby apps in</font>

313
00:13:36,050 --> 00:13:39,439
general is searching for just<font color="#E5E5E5"> dot</font>

314
00:13:37,940 --> 00:13:41,589
<font color="#CCCCCC">constant eyes and you'll</font><font color="#E5E5E5"> always find</font>

315
00:13:39,440 --> 00:13:44,540
examples of this

316
00:13:41,589 --> 00:13:46,310
so why<font color="#E5E5E5"> would you</font><font color="#CCCCCC"> use it again it's great</font>

317
00:13:44,540 --> 00:13:48,829
for reducing repetitive code you don't

318
00:13:46,310 --> 00:13:51,258
have to<font color="#CCCCCC"> have a user dot fine fine by</font>

319
00:13:48,829 --> 00:13:54,529
whatever a class that fine bye it's just

320
00:13:51,259 --> 00:13:56,959
one one method to do all<font color="#CCCCCC"> that for you</font><font color="#E5E5E5"> I</font>

321
00:13:54,529 --> 00:13:59,689
mean<font color="#CCCCCC"> Ruby is very big on the whole dry</font>

322
00:13:56,959 --> 00:14:02,180
do not repeat yourself or no yeah don't

323
00:13:59,690 --> 00:14:03,620
<font color="#E5E5E5">repeat yourself so they're big on</font>

324
00:14:02,180 --> 00:14:05,300
reducing the amount of code you write

325
00:14:03,620 --> 00:14:07,160
just reusing code over<font color="#E5E5E5"> and over again</font>

326
00:14:05,300 --> 00:14:09,410
which is great it<font color="#E5E5E5"> makes it you know</font>

327
00:14:07,160 --> 00:14:11,660
makes application small or it makes code

328
00:14:09,410 --> 00:14:13,160
more<font color="#E5E5E5"> easier to read but you know you can</font>

329
00:14:11,660 --> 00:14:17,930
shoot yourself in the foot with some of

330
00:14:13,160 --> 00:14:19,790
these techniques so so yeah again it

331
00:14:17,930 --> 00:14:23,540
achieves<font color="#CCCCCC"> its</font><font color="#E5E5E5"> functionality with less</font>

332
00:14:19,790 --> 00:14:25,750
lines of code there are<font color="#E5E5E5"> 20 different</font>

333
00:14:23,540 --> 00:14:30,130
method definitions to do the<font color="#E5E5E5"> same thing</font>

334
00:14:25,750 --> 00:14:30,130
<font color="#E5E5E5">so just makes things a lot more simple</font>

335
00:14:30,250 --> 00:14:37,130
but it allows<font color="#CCCCCC"> it allows the user or</font>

336
00:14:35,149 --> 00:14:38,899
attacker to run this function on any

337
00:14:37,130 --> 00:14:42,410
class so pretty<font color="#E5E5E5"> much any class that's</font>

338
00:14:38,899 --> 00:14:44,779
the<font color="#CCCCCC"> find that has fine by ID defined on</font>

339
00:14:42,410 --> 00:14:46,310
it is now I can<font color="#CCCCCC"> outrun that that might</font>

340
00:14:44,779 --> 00:14:48,199
<font color="#E5E5E5">not be an issue for a lot of things but</font>

341
00:14:46,310 --> 00:14:49,638
<font color="#E5E5E5">when it comes to active record classes</font>

342
00:14:48,199 --> 00:14:51,469
and models that's where it becomes a big

343
00:14:49,639 --> 00:14:57,250
issue because<font color="#CCCCCC"> i'm basically able to dump</font>

344
00:14:51,470 --> 00:14:59,060
out your DB so here's another example of

345
00:14:57,250 --> 00:15:01,970
constant eyes it's a little more

346
00:14:59,060 --> 00:15:03,319
<font color="#E5E5E5">involved in the previous one but here</font>

347
00:15:01,970 --> 00:15:07,420
we're taking two parameters again

348
00:15:03,319 --> 00:15:09,589
payment<font color="#E5E5E5"> method is what becomes</font><font color="#CCCCCC"> the class</font>

349
00:15:07,420 --> 00:15:10,729
the<font color="#E5E5E5"> payment method type becomes the</font>

350
00:15:09,589 --> 00:15:16,300
class and then we're passing in

351
00:15:10,730 --> 00:15:19,100
<font color="#E5E5E5">parameters to it and then down here we</font>

352
00:15:16,300 --> 00:15:20,630
basically save that save that model

353
00:15:19,100 --> 00:15:23,660
right here is an active record model

354
00:15:20,630 --> 00:15:25,730
which maps to a database<font color="#CCCCCC"> table we've now</font>

355
00:15:23,660 --> 00:15:27,649
passed in the database table name and

356
00:15:25,730 --> 00:15:30,139
the database table infer the database

357
00:15:27,649 --> 00:15:31,639
information we<font color="#CCCCCC"> want to update and we</font>

358
00:15:30,139 --> 00:15:33,260
just ran save so<font color="#E5E5E5"> whatever we just wanted</font>

359
00:15:31,639 --> 00:15:34,819
<font color="#E5E5E5">to update in that database doesn't</font>

360
00:15:33,260 --> 00:15:37,639
matter what<font color="#E5E5E5"> it is we can now do it with</font>

361
00:15:34,819 --> 00:15:40,579
this code so awesome for simplicity

362
00:15:37,639 --> 00:15:43,839
<font color="#E5E5E5">usability reducing code terrible for</font>

363
00:15:40,579 --> 00:15:43,839
security so

364
00:15:44,360 --> 00:15:50,209
and will show that example natural

365
00:15:47,790 --> 00:15:50,209
scrollers

366
00:15:52,499 --> 00:15:55,249
so

367
00:15:58,110 --> 00:16:03,759
just go<font color="#E5E5E5"> to the road</font>

368
00:16:00,649 --> 00:16:03,759
demo fail

369
00:16:05,580 --> 00:16:09,630
in<font color="#E5E5E5"> this code at all this code is</font>

370
00:16:07,530 --> 00:16:11,910
available online<font color="#CCCCCC"> will send Jerry the</font>

371
00:16:09,630 --> 00:16:14,310
link at the end so here<font color="#E5E5E5"> we have</font>

372
00:16:11,910 --> 00:16:16,920
basically entered an employee ID to

373
00:16:14,310 --> 00:16:18,569
validate so enter just random ID what do

374
00:16:16,920 --> 00:16:20,849
we<font color="#E5E5E5"> get back we have the name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

375
00:16:18,570 --> 00:16:22,290
employee with email then down here we're

376
00:16:20,850 --> 00:16:23,850
<font color="#CCCCCC">kind of showing this is some back-end</font>

377
00:16:22,290 --> 00:16:27,120
<font color="#E5E5E5">information you would normally see but</font>

378
00:16:23,850 --> 00:16:29,400
this is the<font color="#CCCCCC"> actual the class that is</font>

379
00:16:27,120 --> 00:16:31,530
defined so we can see it's an employee

380
00:16:29,400 --> 00:16:36,689
class which maps to an actor vector

381
00:16:31,530 --> 00:16:41,310
active record model so pretty pretty

382
00:16:36,690 --> 00:16:45,510
<font color="#E5E5E5">straightforward so now if we hit submit</font>

383
00:16:41,310 --> 00:16:47,250
and we intercept and we can see we had

384
00:16:45,510 --> 00:16:50,250
<font color="#E5E5E5">these two post parameters one is class</font>

385
00:16:47,250 --> 00:16:54,480
equals employee and data<font color="#CCCCCC"> lunzie ID so</font>

386
00:16:50,250 --> 00:16:58,020
what if<font color="#CCCCCC"> we change employee to client</font>

387
00:16:54,480 --> 00:17:00,270
because we think<font color="#E5E5E5"> that's another</font><font color="#CCCCCC"> active</font>

388
00:16:58,020 --> 00:17:03,210
record<font color="#E5E5E5"> model / database table in the nap</font>

389
00:17:00,270 --> 00:17:04,709
in the application for dropped intercept

390
00:17:03,210 --> 00:17:07,140
now what do we have back so now we have

391
00:17:04,709 --> 00:17:10,110
instead<font color="#E5E5E5"> of an employee profile we now</font>

392
00:17:07,140 --> 00:17:11,370
<font color="#CCCCCC">have the name of a company an email and</font>

393
00:17:10,109 --> 00:17:14,510
you<font color="#CCCCCC"> can see down here here's the actual</font>

394
00:17:11,369 --> 00:17:17,429
Ruby class that we<font color="#E5E5E5"> just pulled back so</font>

395
00:17:14,510 --> 00:17:19,740
you can kind of see<font color="#E5E5E5"> how with this with</font>

396
00:17:17,430 --> 00:17:23,040
this issue you can pull back anything in

397
00:17:19,740 --> 00:17:24,000
the database pretty pretty easy so all

398
00:17:23,040 --> 00:17:27,060
<font color="#E5E5E5">you have to do is you could do</font><font color="#CCCCCC"> something</font>

399
00:17:24,000 --> 00:17:29,430
like burp intruder iterate through all

400
00:17:27,060 --> 00:17:30,690
the database table names all<font color="#CCCCCC"> the classes</font>

401
00:17:29,430 --> 00:17:32,160
you think that are defined<font color="#E5E5E5"> in there and</font>

402
00:17:30,690 --> 00:17:34,350
then you start iterating through<font color="#E5E5E5"> IDs and</font>

403
00:17:32,160 --> 00:17:36,810
you've just dumped an entire database

404
00:17:34,350 --> 00:17:38,820
without sequel injection so<font color="#E5E5E5"> I'm just</font>

405
00:17:36,810 --> 00:17:44,790
using the normal functionality of an

406
00:17:38,820 --> 00:17:46,889
application so how do you fix this it's

407
00:17:44,790 --> 00:17:48,120
pretty similar<font color="#E5E5E5"> to the previous fix you</font>

408
00:17:46,890 --> 00:17:50,130
<font color="#E5E5E5">want to you know want to have a white</font>

409
00:17:48,120 --> 00:17:52,919
list of the classes that you want<font color="#E5E5E5"> to</font>

410
00:17:50,130 --> 00:17:56,910
allow be enumerated so if you want you

411
00:17:52,920 --> 00:17:59,670
know<font color="#E5E5E5"> employees or info some some</font>

412
00:17:56,910 --> 00:18:01,710
database tables active record models to

413
00:17:59,670 --> 00:18:03,660
be searchable in this manner you Dwight

414
00:18:01,710 --> 00:18:06,720
list them and then before you<font color="#E5E5E5"> actually</font>

415
00:18:03,660 --> 00:18:08,040
ran these these searches you would make

416
00:18:06,720 --> 00:18:09,870
sure they're included in this weightless

417
00:18:08,040 --> 00:18:12,240
and that's what we're doing down here we

418
00:18:09,870 --> 00:18:14,280
have<font color="#E5E5E5"> valid classes equals just employees</font>

419
00:18:12,240 --> 00:18:16,559
right now and then<font color="#CCCCCC"> you just do it</font>

420
00:18:14,280 --> 00:18:19,559
<font color="#E5E5E5">include which checks to see if</font>

421
00:18:16,559 --> 00:18:21,690
the if the class<font color="#CCCCCC"> that the user passed in</font>

422
00:18:19,559 --> 00:18:23,279
is in that white list<font color="#E5E5E5"> if it's not then</font>

423
00:18:21,690 --> 00:18:24,779
<font color="#CCCCCC">it's just default to employee and then</font>

424
00:18:23,279 --> 00:18:26,460
it does the whole search and you're good

425
00:18:24,779 --> 00:18:27,360
to go it's a<font color="#E5E5E5"> little more work for the</font>

426
00:18:26,460 --> 00:18:30,419
developer<font color="#CCCCCC"> because they have to maintain</font>

427
00:18:27,360 --> 00:18:33,719
a<font color="#CCCCCC"> whitelist but not that much more work</font>

428
00:18:30,419 --> 00:18:38,120
so doing switch the switch it over to

429
00:18:33,720 --> 00:18:40,860
the right clothes yeah you can download

430
00:18:38,120 --> 00:18:44,070
so we have<font color="#E5E5E5"> all the fixes up on this</font>

431
00:18:40,860 --> 00:18:45,449
github projects under fixes yeah they're

432
00:18:44,070 --> 00:18:48,629
just separate branch was right now<font color="#CCCCCC"> it's</font>

433
00:18:45,450 --> 00:18:50,249
<font color="#CCCCCC">um so if you do end up pulling this down</font>

434
00:18:48,629 --> 00:18:51,928
you<font color="#CCCCCC"> can just switch between week and</font>

435
00:18:50,249 --> 00:18:55,860
fixes and kind of see the<font color="#E5E5E5"> differences in</font>

436
00:18:51,929 --> 00:18:59,960
<font color="#E5E5E5">the code so for the constant size</font>

437
00:18:55,860 --> 00:19:02,998
demonstration what we've done<font color="#CCCCCC"> is just</font>

438
00:18:59,960 --> 00:19:06,779
<font color="#CCCCCC">what he was saying invalid class being</font>

439
00:19:02,999 --> 00:19:08,039
employee if the parameters passed in and

440
00:19:06,779 --> 00:19:10,110
we're setting that equal<font color="#E5E5E5"> to a validation</font>

441
00:19:08,039 --> 00:19:13,529
if the array includes that particular

442
00:19:10,110 --> 00:19:15,389
validation then it just returns the

443
00:19:13,529 --> 00:19:18,749
validation otherwise it changes

444
00:19:15,389 --> 00:19:20,908
validation to employee and then runs<font color="#E5E5E5"> it</font>

445
00:19:18,749 --> 00:19:22,379
runs through it so you'll theoretically

446
00:19:20,909 --> 00:19:25,649
you should always get an employee object

447
00:19:22,379 --> 00:19:27,509
no matter what<font color="#E5E5E5"> has passed if you had</font>

448
00:19:25,649 --> 00:19:29,279
<font color="#E5E5E5">multiple objects in that array then you</font>

449
00:19:27,509 --> 00:19:31,440
could use a default that you know<font color="#E5E5E5"> that</font>

450
00:19:29,279 --> 00:19:33,570
everyone's<font color="#CCCCCC"> going to want to pull back to</font>

451
00:19:31,440 --> 00:19:35,429
so it might be employee or you can

452
00:19:33,570 --> 00:19:38,580
return an error kind of<font color="#E5E5E5"> whatever is your</font>

453
00:19:35,429 --> 00:19:42,600
preference so if<font color="#E5E5E5"> we turn intercept on</font>

454
00:19:38,580 --> 00:19:47,399
and hope for the best<font color="#E5E5E5"> then we will if we</font>

455
00:19:42,600 --> 00:19:48,869
type client in like we saw before then

456
00:19:47,399 --> 00:19:51,989
we should<font color="#CCCCCC"> actually get the employee</font>

457
00:19:48,869 --> 00:19:53,100
object and you can see<font color="#CCCCCC"> that here so we</font>

458
00:19:51,990 --> 00:19:55,309
didn't<font color="#E5E5E5"> actually get the client in that</font>

459
00:19:53,100 --> 00:19:55,309
case

460
00:19:59,320 --> 00:20:05,290
so other your minds<font color="#E5E5E5"> have been blown</font>

461
00:20:02,190 --> 00:20:07,180
<font color="#CCCCCC">we'll continue I know you guys were</font>

462
00:20:05,290 --> 00:20:11,560
silent because you're just amazing I

463
00:20:07,180 --> 00:20:13,720
know yes it's<font color="#E5E5E5"> all right instead or the</font>

464
00:20:11,560 --> 00:20:16,450
next<font color="#E5E5E5"> thing is eval</font><font color="#CCCCCC"> is probably the most</font>

465
00:20:13,720 --> 00:20:18,520
serious obviously because<font color="#CCCCCC"> it is</font>

466
00:20:16,450 --> 00:20:20,230
evaluating the<font color="#E5E5E5"> Ruby expression pass in</font>

467
00:20:18,520 --> 00:20:21,970
the string we've heard<font color="#E5E5E5"> a little bit up</font>

468
00:20:20,230 --> 00:20:25,750
eval in the previous talk if you guys

469
00:20:21,970 --> 00:20:28,360
are here for that but all it really does

470
00:20:25,750 --> 00:20:30,220
is takes a string value and evaluates

471
00:20:28,360 --> 00:20:32,050
that as a ruby expression so in this

472
00:20:30,220 --> 00:20:34,450
very<font color="#E5E5E5"> simple example we set a string to</font>

473
00:20:32,050 --> 00:20:36,370
hello we eval the string concatenate it

474
00:20:34,450 --> 00:20:38,530
with last con the output would be<font color="#E5E5E5"> hello</font>

475
00:20:36,370 --> 00:20:42,729
Alaska so let's have a question why what

476
00:20:38,530 --> 00:20:44,260
should you not do with eval good I like

477
00:20:42,730 --> 00:20:45,400
<font color="#CCCCCC">that yeah right</font><font color="#E5E5E5"> i was</font><font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to say</font>

478
00:20:44,260 --> 00:20:49,050
don't<font color="#CCCCCC"> put user and put it but</font>

479
00:20:45,400 --> 00:20:51,280
<font color="#E5E5E5">everything's pretty good too yeah so as</font>

480
00:20:49,050 --> 00:20:54,129
continuing with like our theme why use

481
00:20:51,280 --> 00:20:56,290
eval to dynamically run code right um

482
00:20:54,130 --> 00:20:57,430
everybody will review this all fun and

483
00:20:56,290 --> 00:20:59,800
games no one's ever going to hack you

484
00:20:57,430 --> 00:21:03,850
yeah but one of the interesting things

485
00:20:59,800 --> 00:21:05,560
is you know with Ruby being such a kind

486
00:21:03,850 --> 00:21:07,330
<font color="#E5E5E5">of easy language to learn you a lot of</font>

487
00:21:05,560 --> 00:21:08,649
developers that are like man I want<font color="#E5E5E5"> to</font>

488
00:21:07,330 --> 00:21:10,389
learn Ruby so they get on something<font color="#E5E5E5"> like</font>

489
00:21:08,650 --> 00:21:11,650
some code training side<font color="#CCCCCC"> Codecademy</font>

490
00:21:10,390 --> 00:21:12,970
whatever below and they have to accept

491
00:21:11,650 --> 00:21:14,770
code right they have to dynamically run

492
00:21:12,970 --> 00:21:16,450
that code and that's a business case has

493
00:21:14,770 --> 00:21:20,139
a use case that we have to<font color="#E5E5E5"> consider if</font>

494
00:21:16,450 --> 00:21:21,940
we're doing<font color="#CCCCCC"> that so you are pulling out</font>

495
00:21:20,140 --> 00:21:25,690
<font color="#E5E5E5">of the stops but there should be some</font>

496
00:21:21,940 --> 00:21:27,040
way to to do that that's not what<font color="#E5E5E5"> we see</font>

497
00:21:25,690 --> 00:21:30,910
in most of our assessments<font color="#E5E5E5"> this is the</font>

498
00:21:27,040 --> 00:21:32,920
like single most common use of eval now

499
00:21:30,910 --> 00:21:35,860
you take an object a parameter do a fine

500
00:21:32,920 --> 00:21:37,360
and run the ID I can't I mean it looks

501
00:21:35,860 --> 00:21:39,639
<font color="#CCCCCC">like something</font><font color="#E5E5E5"> like I'm just putting up</font>

502
00:21:37,360 --> 00:21:41,620
<font color="#E5E5E5">an example</font><font color="#CCCCCC"> but this is in a ton of</font>

503
00:21:39,640 --> 00:21:43,120
assessments it's in a ton of examples if

504
00:21:41,620 --> 00:21:44,379
you go<font color="#CCCCCC"> into</font><font color="#E5E5E5"> get up you'll be able to</font>

505
00:21:43,120 --> 00:21:48,280
<font color="#E5E5E5">find this and we'll look at</font><font color="#CCCCCC"> that a</font>

506
00:21:44,380 --> 00:21:49,330
little bit later yeah now one right

507
00:21:48,280 --> 00:21:51,700
there even though it<font color="#CCCCCC"> looks</font><font color="#E5E5E5"> like it's</font>

508
00:21:49,330 --> 00:21:54,189
running dot find that's actually it will

509
00:21:51,700 --> 00:21:56,740
evaluate params I can't read<font color="#CCCCCC"> that params</font>

510
00:21:54,190 --> 00:21:58,480
model name first so whatever that is if

511
00:21:56,740 --> 00:22:00,640
that was like a system call with LS

512
00:21:58,480 --> 00:22:05,620
it'll evaluate that before it does not

513
00:22:00,640 --> 00:22:06,670
find sorry so what<font color="#CCCCCC"> is the good thing</font>

514
00:22:05,620 --> 00:22:08,229
about this well we've definitely

515
00:22:06,670 --> 00:22:09,640
achieved the same functionality you saw

516
00:22:08,230 --> 00:22:11,480
in our last two examples with one line

517
00:22:09,640 --> 00:22:14,840
<font color="#E5E5E5">of code so that's kind of cool</font>

518
00:22:11,480 --> 00:22:16,250
and we can perform<font color="#CCCCCC"> dynamic</font><font color="#E5E5E5"> Ruby code on</font>

519
00:22:14,840 --> 00:22:17,600
objects that are available at run time

520
00:22:16,250 --> 00:22:19,010
so we can pretty much do whatever we

521
00:22:17,600 --> 00:22:21,649
want so you give a<font color="#E5E5E5"> lot of power to the</font>

522
00:22:19,010 --> 00:22:24,290
user which in some cases might be your

523
00:22:21,650 --> 00:22:26,600
goal it also<font color="#E5E5E5"> allows the attacker to</font>

524
00:22:24,290 --> 00:22:28,190
execute any code they want so you have

525
00:22:26,600 --> 00:22:33,709
to think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that if you're</font><font color="#CCCCCC"> going to</font>

526
00:22:28,190 --> 00:22:35,480
<font color="#E5E5E5">try to fix this so</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> look at the</font>

527
00:22:33,710 --> 00:22:37,820
example of eval and how we've kind of

528
00:22:35,480 --> 00:22:40,460
implemented it in our demo application

529
00:22:37,820 --> 00:22:41,960
and then<font color="#E5E5E5"> we have another demo that we're</font>

530
00:22:40,460 --> 00:22:45,740
hoping<font color="#E5E5E5"> works that we kind of threw</font>

531
00:22:41,960 --> 00:22:47,660
together last night and we'll see how

532
00:22:45,740 --> 00:22:49,190
that goes but this basically again we're

533
00:22:47,660 --> 00:22:52,550
going<font color="#E5E5E5"> through a user profile model we</font>

534
00:22:49,190 --> 00:22:56,210
have<font color="#CCCCCC"> a set of user profiles you click on</font>

535
00:22:52,550 --> 00:22:58,100
a user profile and in the route we don't

536
00:22:56,210 --> 00:23:00,440
have to define this really to find this

537
00:22:58,100 --> 00:23:02,300
route one time and we<font color="#E5E5E5"> are looking for</font>

538
00:23:00,440 --> 00:23:04,700
<font color="#E5E5E5">the model ID in the night in the first</font>

539
00:23:02,300 --> 00:23:06,350
parameter and the ID in the second

540
00:23:04,700 --> 00:23:08,900
parameter and we're pulling back an

541
00:23:06,350 --> 00:23:15,260
employee so obviously I continue to do

542
00:23:08,900 --> 00:23:16,520
this for employee 34 or whatever but I

543
00:23:15,260 --> 00:23:18,260
don't even<font color="#E5E5E5"> have to jump into berk for</font>

544
00:23:16,520 --> 00:23:23,389
this I can actually<font color="#CCCCCC"> just come in here</font>

545
00:23:18,260 --> 00:23:28,610
<font color="#E5E5E5">and do user or not oh you know what I</font>

546
00:23:23,390 --> 00:23:31,040
don't have three users demo fail talk

547
00:23:28,610 --> 00:23:35,659
amongst yourselves please yes<font color="#E5E5E5"> okay</font>

548
00:23:31,040 --> 00:23:37,520
clients work so<font color="#E5E5E5"> that's a thing again</font>

549
00:23:35,660 --> 00:23:39,980
<font color="#E5E5E5">more returning the client back right we</font>

550
00:23:37,520 --> 00:23:44,180
<font color="#E5E5E5">can continually do this but the</font><font color="#CCCCCC"> the fun</font>

551
00:23:39,980 --> 00:23:47,240
part is if I just was an ass I could

552
00:23:44,180 --> 00:23:50,930
<font color="#E5E5E5">just run exit and I just killed the</font>

553
00:23:47,240 --> 00:23:57,080
server right so that's pretty bad you

554
00:23:50,930 --> 00:24:00,380
know so let me start that back up so how

555
00:23:57,080 --> 00:24:03,260
do we fix that one thing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to whitelist</font>

556
00:24:00,380 --> 00:24:05,830
like we've been talking<font color="#CCCCCC"> about that's not</font>

557
00:24:03,260 --> 00:24:05,830
exit again

558
00:24:07,620 --> 00:24:16,389
one thing<font color="#CCCCCC"> is to whitelist this and if we</font>

559
00:24:12,070 --> 00:24:24,580
look<font color="#E5E5E5"> at the flips wrong wrong window</font>

560
00:24:16,390 --> 00:24:26,049
bear with me<font color="#CCCCCC"> here one thing is the</font>

561
00:24:24,580 --> 00:24:32,770
<font color="#E5E5E5">whitelist right we have the same kind of</font>

562
00:24:26,049 --> 00:24:36,429
thing but really just a try to avoid

563
00:24:32,770 --> 00:24:38,230
using eval<font color="#CCCCCC"> altogether alternatively you</font>

564
00:24:36,429 --> 00:24:41,080
<font color="#CCCCCC">can use some engagement with user with</font>

565
00:24:38,230 --> 00:24:42,850
user-supplied parameters yes you<font color="#CCCCCC"> can use</font>

566
00:24:41,080 --> 00:24:44,320
something like<font color="#CCCCCC"> sent and then the</font>

567
00:24:42,850 --> 00:24:47,199
whitelist and the validation things

568
00:24:44,320 --> 00:24:49,330
we're talking<font color="#CCCCCC"> about before if you do</font>

569
00:24:47,200 --> 00:24:51,160
have to like with<font color="#E5E5E5"> something like a</font>

570
00:24:49,330 --> 00:24:54,040
training website or something like that

571
00:24:51,160 --> 00:24:56,260
or<font color="#E5E5E5"> if you are intentionally bringing in</font>

572
00:24:54,040 --> 00:24:57,970
that code from<font color="#CCCCCC"> the user then try to</font>

573
00:24:56,260 --> 00:24:59,740
sandbox that in some way either with

574
00:24:57,970 --> 00:25:03,220
docker<font color="#CCCCCC"> have some interpreter a separate</font>

575
00:24:59,740 --> 00:25:04,720
page something that you would spin up in

576
00:25:03,220 --> 00:25:07,419
an incidence every time the user opens

577
00:25:04,720 --> 00:25:09,309
that particular resource that way if

578
00:25:07,419 --> 00:25:10,510
they do send something horrible to it

579
00:25:09,309 --> 00:25:12,940
there's nothing sensitive in there at

580
00:25:10,510 --> 00:25:14,919
sandbox are isolated from<font color="#E5E5E5"> your original</font>

581
00:25:12,940 --> 00:25:17,830
environment we have a<font color="#E5E5E5"> really ghetto demo</font>

582
00:25:14,919 --> 00:25:20,260
of that we're going<font color="#E5E5E5"> to get into but like</font>

583
00:25:17,830 --> 00:25:21,520
I know<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> nice oh it's that actually</font>

584
00:25:20,260 --> 00:25:24,970
you should probably just put a straight

585
00:25:21,520 --> 00:25:27,160
to production so but<font color="#E5E5E5"> honestly try to</font>

586
00:25:24,970 --> 00:25:32,290
blow<font color="#E5E5E5"> it all together so first I'll show</font>

587
00:25:27,160 --> 00:25:33,840
<font color="#CCCCCC">you the the whitelist fix which I'm</font>

588
00:25:32,290 --> 00:25:38,409
pretty<font color="#CCCCCC"> sure I'm on the right furniture</font>

589
00:25:33,840 --> 00:25:45,189
yeah so again now if I<font color="#CCCCCC"> put client in</font>

590
00:25:38,410 --> 00:25:46,630
here i'm just<font color="#E5E5E5"> still getting the employee</font>

591
00:25:45,190 --> 00:25:49,000
right<font color="#E5E5E5"> cuz I'm defaulting to that</font>

592
00:25:46,630 --> 00:25:50,350
employee object so no matter what<font color="#E5E5E5"> I</font>

593
00:25:49,000 --> 00:25:56,970
always<font color="#E5E5E5"> get employees no matter what goes</font>

594
00:25:50,350 --> 00:25:56,969
in there and for the sandboxing example

595
00:26:01,390 --> 00:26:06,200
we will try to get<font color="#E5E5E5"> this into dr.</font>

596
00:26:04,730 --> 00:26:10,700
eventually if we continue to support

597
00:26:06,200 --> 00:26:13,010
this demo app the idea would be you run

598
00:26:10,700 --> 00:26:14,960
the unsafe code in like a docker

599
00:26:13,010 --> 00:26:16,970
container dr. itself isn't really a

600
00:26:14,960 --> 00:26:19,190
security sandbox but it's<font color="#E5E5E5"> something you</font>

601
00:26:16,970 --> 00:26:21,740
can throw away if someone destroyed it

602
00:26:19,190 --> 00:26:23,570
or they are<font color="#E5E5E5"> M dash RF or exit whatever</font>

603
00:26:21,740 --> 00:26:26,240
you<font color="#CCCCCC"> don't really care</font><font color="#E5E5E5"> as much yeah so</font>

604
00:26:23,570 --> 00:26:27,620
for something like<font color="#CCCCCC"> this the idea</font><font color="#E5E5E5"> of e</font>

605
00:26:26,240 --> 00:26:30,290
that when the user<font color="#E5E5E5"> is coming in to put</font>

606
00:26:27,620 --> 00:26:31,909
<font color="#E5E5E5">in their commands that a new instance of</font>

607
00:26:30,290 --> 00:26:34,220
this container would pop up you would

608
00:26:31,910 --> 00:26:36,850
have<font color="#E5E5E5"> the connections made back and forth</font>

609
00:26:34,220 --> 00:26:39,890
between your application and that

610
00:26:36,850 --> 00:26:41,419
sandbox container that way if<font color="#CCCCCC"> something</font>

611
00:26:39,890 --> 00:26:44,420
happens<font color="#CCCCCC"> to it or whenever they leave</font>

612
00:26:41,420 --> 00:26:46,310
that resource that instance is shut down

613
00:26:44,420 --> 00:26:47,720
and then you know you continually spin

614
00:26:46,310 --> 00:26:49,429
up an individual resource for every user

615
00:26:47,720 --> 00:26:51,980
every set of users or whatever you might

616
00:26:49,430 --> 00:26:55,970
<font color="#E5E5E5">be but just to</font><font color="#CCCCCC"> show you that this is</font>

617
00:26:51,980 --> 00:26:58,430
actually running commands basically if

618
00:26:55,970 --> 00:27:00,950
the<font color="#CCCCCC"> bactec is kind of a system</font><font color="#E5E5E5"> command</font>

619
00:26:58,430 --> 00:27:04,220
in Ruby but if I submit<font color="#CCCCCC"> this you see</font>

620
00:27:00,950 --> 00:27:05,900
it's got my information here yeah what

621
00:27:04,220 --> 00:27:09,020
that did was it went<font color="#E5E5E5"> from a rails up use</font>

622
00:27:05,900 --> 00:27:11,150
<font color="#CCCCCC">JavaScript to post</font><font color="#E5E5E5"> to a Sinatra app</font>

623
00:27:09,020 --> 00:27:12,620
which actually evals the code and red

624
00:27:11,150 --> 00:27:15,640
Suns the results<font color="#E5E5E5"> back in</font><font color="#CCCCCC"> an iframe</font>

625
00:27:12,620 --> 00:27:19,370
basically so that's the code for that

626
00:27:15,640 --> 00:27:21,740
and the<font color="#E5E5E5"> good thing about that is that if</font>

627
00:27:19,370 --> 00:27:24,370
I do end up putting in something like

628
00:27:21,740 --> 00:27:27,500
exit which it will eat out because it's

629
00:27:24,370 --> 00:27:29,149
<font color="#E5E5E5">just taking</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> straight Ruby it'll kill</font>

630
00:27:27,500 --> 00:27:30,890
<font color="#E5E5E5">that container but the application is</font>

631
00:27:29,150 --> 00:27:32,240
still alive and and going all your

632
00:27:30,890 --> 00:27:33,470
private information is isolated from

633
00:27:32,240 --> 00:27:36,110
that so you would want to<font color="#E5E5E5"> do something</font>

634
00:27:33,470 --> 00:27:38,600
similar to that to try to mitigate that

635
00:27:36,110 --> 00:27:40,189
<font color="#E5E5E5">eval in that special edge case but</font><font color="#CCCCCC"> again</font>

636
00:27:38,600 --> 00:27:42,530
the recommendation will continue to be

637
00:27:40,190 --> 00:27:49,430
just try not<font color="#E5E5E5"> to eat his hit don't be an</font>

638
00:27:42,530 --> 00:27:51,800
idiot yeah so<font color="#E5E5E5"> if this question was on my</font>

639
00:27:49,430 --> 00:27:54,830
mind when I was kind<font color="#CCCCCC"> of doing this and</font>

640
00:27:51,800 --> 00:27:56,540
if you were in the<font color="#CCCCCC"> devops talk they were</font>

641
00:27:54,830 --> 00:27:58,010
talking<font color="#E5E5E5"> about advanced search so</font><font color="#CCCCCC"> I did</font>

642
00:27:56,540 --> 00:28:00,399
<font color="#CCCCCC">some searches on some of the things that</font>

643
00:27:58,010 --> 00:28:03,560
<font color="#E5E5E5">we were looking</font><font color="#CCCCCC"> at in the assessments</font>

644
00:28:00,400 --> 00:28:06,050
all I<font color="#E5E5E5"> did was look in Ruby application</font>

645
00:28:03,560 --> 00:28:08,780
controllers only that<font color="#CCCCCC"> path and I looked</font>

646
00:28:06,050 --> 00:28:10,700
<font color="#E5E5E5">for just eval params so just straight</font>

647
00:28:08,780 --> 00:28:12,950
eval from a user parameter and there's

648
00:28:10,700 --> 00:28:14,060
422 code results in there now some<font color="#E5E5E5"> of</font>

649
00:28:12,950 --> 00:28:15,740
this<font color="#E5E5E5"> might be</font>

650
00:28:14,060 --> 00:28:17,450
you know demo code people<font color="#CCCCCC"> there like I</font>

651
00:28:15,740 --> 00:28:19,340
just<font color="#E5E5E5"> want to try Ruby but that's kind of</font>

652
00:28:17,450 --> 00:28:20,750
our point right is that because<font color="#E5E5E5"> there's</font>

653
00:28:19,340 --> 00:28:22,490
so many developers coming into rubian

654
00:28:20,750 --> 00:28:24,470
because we want<font color="#E5E5E5"> to like teach and teach</font>

655
00:28:22,490 --> 00:28:25,910
and teach they may be<font color="#E5E5E5"> making these</font>

656
00:28:24,470 --> 00:28:28,880
mistakes these simple things<font color="#E5E5E5"> that we</font>

657
00:28:25,910 --> 00:28:30,530
think are just<font color="#E5E5E5"> common sense but we want</font>

658
00:28:28,880 --> 00:28:33,020
<font color="#E5E5E5">to kind of expose that and showed</font>

659
00:28:30,530 --> 00:28:34,399
another way to go about doing it and you

660
00:28:33,020 --> 00:28:36,320
can guess that stack overflow has a

661
00:28:34,400 --> 00:28:38,750
million of these examples<font color="#CCCCCC"> of how do</font><font color="#E5E5E5"> I</font>

662
00:28:36,320 --> 00:28:44,030
run dynamic<font color="#CCCCCC"> Ruby code use eval right</font>

663
00:28:38,750 --> 00:28:45,530
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> for send it was 877 results and</font>

664
00:28:44,030 --> 00:28:47,600
for the constant eyes example again

665
00:28:45,530 --> 00:28:50,840
Justin controllers it was almost<font color="#E5E5E5"> 8,000</font>

666
00:28:47,600 --> 00:28:53,209
so it does exist on these open source

667
00:28:50,840 --> 00:28:54,770
repos and that's excluding you know the

668
00:28:53,210 --> 00:28:58,340
assessments that we've seen this in and

669
00:28:54,770 --> 00:28:59,840
these exact examples you know are being

670
00:28:58,340 --> 00:29:01,189
used so I don't know<font color="#E5E5E5"> if there</font><font color="#CCCCCC"> is</font>

671
00:28:59,840 --> 00:29:03,260
something<font color="#E5E5E5"> on Stack Overflow that just</font>

672
00:29:01,190 --> 00:29:06,350
you know<font color="#CCCCCC"> the way to do it but obviously</font>

673
00:29:03,260 --> 00:29:13,850
<font color="#CCCCCC">it's um it's rampant and something we</font>

674
00:29:06,350 --> 00:29:16,250
should probably address so we're<font color="#E5E5E5"> not</font>

675
00:29:13,850 --> 00:29:18,110
cooling on Ruby you know we love Ruby we

676
00:29:16,250 --> 00:29:20,780
just feel like it's a huge importance of

677
00:29:18,110 --> 00:29:22,040
implementation in Ruby because it is

678
00:29:20,780 --> 00:29:24,290
such a powerful<font color="#E5E5E5"> language because it</font>

679
00:29:22,040 --> 00:29:26,960
allows you to rewrite so many things so

680
00:29:24,290 --> 00:29:29,180
many methods and it really opens the

681
00:29:26,960 --> 00:29:31,400
door to you to do a lot of whatever you

682
00:29:29,180 --> 00:29:34,550
<font color="#CCCCCC">want the gems and the way people are</font>

683
00:29:31,400 --> 00:29:36,770
using Ruby are continuously more

684
00:29:34,550 --> 00:29:38,540
inventive and and cooler than you'll

685
00:29:36,770 --> 00:29:39,980
ever see but<font color="#CCCCCC"> you really always have to</font>

686
00:29:38,540 --> 00:29:41,629
<font color="#CCCCCC">think about</font><font color="#E5E5E5"> how an attacker might look</font>

687
00:29:39,980 --> 00:29:44,090
at this application and how we look at

688
00:29:41,630 --> 00:29:46,760
these applications so that when you are

689
00:29:44,090 --> 00:29:47,929
splitting<font color="#E5E5E5"> up these apps your you kind of</font>

690
00:29:46,760 --> 00:29:56,480
have<font color="#CCCCCC"> that in the back your mind all the</font>

691
00:29:47,930 --> 00:29:59,630
time and that is pretty<font color="#E5E5E5"> much it I think</font>

692
00:29:56,480 --> 00:30:02,030
we write it<font color="#CCCCCC"> like our 30 here and have</font>

693
00:29:59,630 --> 00:30:03,380
time for questions you can now speak I

694
00:30:02,030 --> 00:30:05,480
know you guys are all holding back so

695
00:30:03,380 --> 00:30:07,880
yeah this is not the time<font color="#E5E5E5"> and the code</font>

696
00:30:05,480 --> 00:30:09,500
is up there oh my god<font color="#E5E5E5"> that small here</font>

697
00:30:07,880 --> 00:30:11,000
there's a there's a link right there for

698
00:30:09,500 --> 00:30:13,250
<font color="#E5E5E5">the codes and stat rails app that we</font>

699
00:30:11,000 --> 00:30:15,370
just<font color="#E5E5E5"> showed is open source and we also</font>

700
00:30:13,250 --> 00:30:17,930
do much research into other open source

701
00:30:15,370 --> 00:30:20,090
projects<font color="#E5E5E5"> that use rails and just search</font>

702
00:30:17,930 --> 00:30:23,320
through there to<font color="#CCCCCC"> look for these kind of</font>

703
00:30:20,090 --> 00:30:25,429
issues so common gems like spree and

704
00:30:23,320 --> 00:30:25,899
some other ones we have the code up

705
00:30:25,430 --> 00:30:28,210
there

706
00:30:25,900 --> 00:30:29,620
at the brakeman results up there you can

707
00:30:28,210 --> 00:30:32,670
look at those and<font color="#E5E5E5"> kind of see that a lot</font>

708
00:30:29,620 --> 00:30:35,889
<font color="#E5E5E5">of big-name rails apps and open source</font>

709
00:30:32,670 --> 00:30:44,110
Ruby software uses these techniques in a

710
00:30:35,890 --> 00:30:46,360
kind of a scary way so yes so the way

711
00:30:44,110 --> 00:30:52,240
<font color="#CCCCCC">that the code is set up is there's three</font>

712
00:30:46,360 --> 00:30:58,840
branches aside from master huh yeah yeah

713
00:30:52,240 --> 00:31:04,920
for sure troll it's like that Earl but

714
00:30:58,840 --> 00:31:07,810
better it's red and shiny yeah so I have

715
00:31:04,920 --> 00:31:10,150
that's impossible to see I'm sorry but

716
00:31:07,810 --> 00:31:14,020
yeah there's a there's three branches

717
00:31:10,150 --> 00:31:15,490
one is doctored and oh that is the one

718
00:31:14,020 --> 00:31:18,700
that's<font color="#E5E5E5"> kind of using the eval sandbox</font>

719
00:31:15,490 --> 00:31:22,000
example in the sandbox exists on Sinatra

720
00:31:18,700 --> 00:31:23,890
in a separate folder so there's also

721
00:31:22,000 --> 00:31:26,710
some code examples from stuff we pulled

722
00:31:23,890 --> 00:31:28,180
out of github inside of these folders

723
00:31:26,710 --> 00:31:29,740
here so there's if you want to look

724
00:31:28,180 --> 00:31:32,050
through these<font color="#CCCCCC"> there they're publicly</font>

725
00:31:29,740 --> 00:31:34,000
available in that search and they're

726
00:31:32,050 --> 00:31:38,710
also here and I've kind of labeled them

727
00:31:34,000 --> 00:31:40,240
as well but yeah so you just check out

728
00:31:38,710 --> 00:31:41,560
whatever branch you want to mess<font color="#CCCCCC"> with</font>

729
00:31:40,240 --> 00:31:43,870
you want to mess with<font color="#CCCCCC"> the week branch</font>

730
00:31:41,560 --> 00:31:45,129
then go and then switch over to fix this

731
00:31:43,870 --> 00:31:48,370
and it should just<font color="#E5E5E5"> change the demos</font>

732
00:31:45,130 --> 00:31:50,890
controller to apply to<font color="#E5E5E5"> fix and if you're</font>

733
00:31:48,370 --> 00:31:52,060
a rails developer and wants<font color="#CCCCCC"> to check for</font>

734
00:31:50,890 --> 00:31:53,320
these kind of things<font color="#E5E5E5"> definitely run</font>

735
00:31:52,060 --> 00:31:55,629
brakeman because brakeman has some

736
00:31:53,320 --> 00:31:57,629
pretty good test for sand and constant

737
00:31:55,630 --> 00:32:01,070
eyes and eval

738
00:31:57,630 --> 00:32:01,070
you run<font color="#CCCCCC"> pregnant for all</font>

739
00:32:03,250 --> 00:32:08,149
people come on board that<font color="#CCCCCC"> burrow rails</font>

740
00:32:05,690 --> 00:32:10,419
department that kind of constantly have

741
00:32:08,149 --> 00:32:10,418
the

742
00:32:13,370 --> 00:32:16,370
yes

743
00:32:16,590 --> 00:32:20,590
all

744
00:32:18,080 --> 00:32:20,590
this

745
00:32:21,190 --> 00:32:25,190
yeah that's great<font color="#E5E5E5"> I mean that we also</font>

746
00:32:23,360 --> 00:32:26,719
feel free to to use it because it's

747
00:32:25,190 --> 00:32:29,180
that's that's the ultimate goal right is

748
00:32:26,720 --> 00:32:30,740
too I mean we don't want to you know

749
00:32:29,180 --> 00:32:32,240
yellow anybody we just<font color="#E5E5E5"> want to say hey</font>

750
00:32:30,740 --> 00:32:34,880
you<font color="#CCCCCC"> know it's different</font><font color="#E5E5E5"> way to do it and</font>

751
00:32:32,240 --> 00:32:36,350
look at<font color="#E5E5E5"> some alternatives I'm a big fan</font>

752
00:32:34,880 --> 00:32:38,240
of docker so I'm probably get<font color="#CCCCCC"> this set</font>

753
00:32:36,350 --> 00:32:40,010
up<font color="#E5E5E5"> as docker container so that you can</font>

754
00:32:38,240 --> 00:32:42,500
are a mesh aref to your heart's content

755
00:32:40,010 --> 00:32:44,750
and not blow away your that was the real

756
00:32:42,500 --> 00:32:46,910
example 1 i'll use but I was too scared

757
00:32:44,750 --> 00:32:48,320
yeah and he wouldn't<font color="#E5E5E5"> I</font><font color="#CCCCCC"> was confident</font>

758
00:32:46,910 --> 00:32:49,610
that would be fine but he didn't want to

759
00:32:48,320 --> 00:32:52,760
<font color="#E5E5E5">blow away his box the day before our</font>

760
00:32:49,610 --> 00:32:54,709
talks ever did you someday static code

761
00:32:52,760 --> 00:32:58,280
analysis that some tea or something to

762
00:32:54,710 --> 00:33:01,250
head out<font color="#CCCCCC"> of a spillover</font><font color="#E5E5E5"> Ruby birth run</font>

763
00:32:58,280 --> 00:33:03,290
to<font color="#E5E5E5"> where your software code</font><font color="#CCCCCC"> defined make</font>

764
00:33:01,250 --> 00:33:05,660
sure it doesn't have

765
00:33:03,290 --> 00:33:07,370
I don't know a sonar but<font color="#E5E5E5"> I mean brakeman</font>

766
00:33:05,660 --> 00:33:09,410
is an open source tool that that we

767
00:33:07,370 --> 00:33:12,500
break ins an open source static analysis

768
00:33:09,410 --> 00:33:14,870
tool yes and it's and brakeman is great

769
00:33:12,500 --> 00:33:17,120
for<font color="#E5E5E5"> this kind of thing yeah but grep</font>

770
00:33:14,870 --> 00:33:19,340
grep can find these issues for yourself

771
00:33:17,120 --> 00:33:32,260
graft is still the best static analysis

772
00:33:19,340 --> 00:33:34,310
tool yeah so that sounded<font color="#CCCCCC"> like sarcasm</font>

773
00:33:32,260 --> 00:33:45,830
not sure I like your tone I feel

774
00:33:34,310 --> 00:33:48,820
<font color="#E5E5E5">something coming is there any formal</font>

775
00:33:45,830 --> 00:33:48,820
ever<font color="#E5E5E5"> to</font>

776
00:33:57,600 --> 00:34:02,469
there there<font color="#E5E5E5"> is one I'm not sure how many</font>

777
00:34:01,090 --> 00:34:03,820
<font color="#E5E5E5">people read it I mean there's a</font><font color="#CCCCCC"> lot of</font>

778
00:34:02,470 --> 00:34:05,470
stuff in<font color="#E5E5E5"> there be security guy that</font>

779
00:34:03,820 --> 00:34:06,700
covers a lot of really good content it's

780
00:34:05,470 --> 00:34:09,760
a<font color="#E5E5E5"> little out of date doesn't get updated</font>

781
00:34:06,700 --> 00:34:11,918
as much as some of the other guides I

782
00:34:09,760 --> 00:34:14,380
think there's a bunch of<font color="#E5E5E5"> there somebody</font>

783
00:34:11,918 --> 00:34:15,969
like Codecademy there's a site<font color="#E5E5E5"> just for</font>

784
00:34:14,380 --> 00:34:17,889
Ruby Ruby monk which<font color="#E5E5E5"> kind of covers a</font>

785
00:34:15,969 --> 00:34:19,239
lot of this stuff they kind of<font color="#E5E5E5"> glazed</font>

786
00:34:17,889 --> 00:34:20,470
over security<font color="#CCCCCC"> I'll give it like a</font>

787
00:34:19,239 --> 00:34:22,870
sentence like this could be<font color="#E5E5E5"> dangerous</font>

788
00:34:20,469 --> 00:34:25,089
but they don't show you<font color="#E5E5E5"> why or</font><font color="#CCCCCC"> how to do</font>

789
00:34:22,870 --> 00:34:26,799
it the right way so it's still like

790
00:34:25,090 --> 00:34:28,750
they're still very much an attitude of

791
00:34:26,800 --> 00:34:30,460
just kind of used what's there and kind

792
00:34:28,750 --> 00:34:32,260
<font color="#E5E5E5">of ignore the security perspective of</font>

793
00:34:30,460 --> 00:34:34,149
itself the other thing is<font color="#E5E5E5"> you know with</font>

794
00:34:32,260 --> 00:34:36,580
<font color="#E5E5E5">meta programming as a technique I mean</font>

795
00:34:34,149 --> 00:34:38,259
it's provided with<font color="#CCCCCC"> the intention to make</font>

796
00:34:36,580 --> 00:34:40,149
it easier and<font color="#E5E5E5"> to provide you with</font><font color="#CCCCCC"> a</font>

797
00:34:38,260 --> 00:34:43,330
powerful function it's just that you

798
00:34:40,149 --> 00:34:45,969
really have<font color="#CCCCCC"> to look at the logic that</font>

799
00:34:43,330 --> 00:34:48,040
you're implementing and so it's hard to

800
00:34:45,969 --> 00:34:49,540
<font color="#E5E5E5">put that into a book I mean even if I</font>

801
00:34:48,040 --> 00:34:51,370
mean I have a meta programming / be

802
00:34:49,540 --> 00:34:53,409
booked in my bag that has a you know an

803
00:34:51,370 --> 00:34:56,138
example<font color="#E5E5E5"> that's probably vulnerable but</font>

804
00:34:53,409 --> 00:34:58,840
you know is that it is<font color="#CCCCCC"> that your local</font>

805
00:34:56,139 --> 00:35:01,360
app is that<font color="#CCCCCC"> a public web application and</font>

806
00:34:58,840 --> 00:35:03,520
it's all kind of in context and rails

807
00:35:01,360 --> 00:35:09,610
coat obviously has some of the fixes in

808
00:35:03,520 --> 00:35:11,140
there this guy in that guy yeah so no

809
00:35:09,610 --> 00:35:13,660
like perfect solutions basically still

810
00:35:11,140 --> 00:35:15,690
developer education and doing talks like

811
00:35:13,660 --> 00:35:15,690
this

812
00:35:17,380 --> 00:35:21,230
suddenly at some point they<font color="#E5E5E5"> neutralized</font>

813
00:35:19,490 --> 00:35:25,990
<font color="#CCCCCC">and understanding</font>

814
00:35:21,230 --> 00:35:25,990
security issues early on

815
00:35:27,420 --> 00:35:32,020
yeah I don't<font color="#CCCCCC"> think it's even just</font><font color="#E5E5E5"> junior</font>

816
00:35:30,340 --> 00:35:33,430
developers I'm not trying to you know

817
00:35:32,020 --> 00:35:34,750
she don't developers anything but there

818
00:35:33,430 --> 00:35:36,520
have been some people who've been like

819
00:35:34,750 --> 00:35:39,430
why is this<font color="#E5E5E5"> an issue why would someone</font>

820
00:35:36,520 --> 00:35:42,220
pass in<font color="#CCCCCC"> rmdh ara yeah it's the same same</font>

821
00:35:39,430 --> 00:35:43,810
thing<font color="#E5E5E5"> that's so it's still just about</font>

822
00:35:42,220 --> 00:35:49,089
education and I was talking<font color="#CCCCCC"> to</font>

823
00:35:43,810 --> 00:35:51,520
developers yeah we just spoke at a

824
00:35:49,090 --> 00:35:52,750
conference up in DC called Ruby nation

825
00:35:51,520 --> 00:35:54,100
where we talked about rails goat and

826
00:35:52,750 --> 00:35:56,260
that's that's<font color="#CCCCCC"> really the whole point of</font>

827
00:35:54,100 --> 00:35:58,240
that project is for developer education

828
00:35:56,260 --> 00:36:06,910
so that's a no loss project you guys

829
00:35:58,240 --> 00:36:08,709
didn't<font color="#E5E5E5"> know about it yeah I just</font>

830
00:36:06,910 --> 00:36:11,430
expected this like I'm actually playing

831
00:36:08,710 --> 00:36:11,430
organizations

832
00:36:14,330 --> 00:36:18,100
have a good practice within the

833
00:36:15,530 --> 00:36:18,100
organization

834
00:36:18,309 --> 00:36:21,690
or<font color="#CCCCCC"> in the spark manage without learning</font>

835
00:36:19,660 --> 00:36:23,819
is like paramount

836
00:36:21,690 --> 00:36:25,620
during<font color="#CCCCCC"> Porter crisis as an isolated when</font>

837
00:36:23,820 --> 00:36:27,510
you do assistance in something like what

838
00:36:25,620 --> 00:36:29,700
what do<font color="#E5E5E5"> you say people's cars like a</font>

839
00:36:27,510 --> 00:36:33,000
disappointing report like as once then

840
00:36:29,700 --> 00:36:34,589
to say hey this<font color="#CCCCCC"> is very suburban how do</font>

841
00:36:33,000 --> 00:36:36,270
you actually purge them on like hey this

842
00:36:34,590 --> 00:36:39,030
is how you for making change networking

843
00:36:36,270 --> 00:36:41,220
so that you stop<font color="#CCCCCC"> spinning still down to</font>

844
00:36:39,030 --> 00:36:46,080
the<font color="#CCCCCC"> changes well that those</font><font color="#E5E5E5"> seniors are</font>

845
00:36:41,220 --> 00:36:48,089
able to like proactively yeah I<font color="#E5E5E5"> mean</font>

846
00:36:46,080 --> 00:36:49,470
there's<font color="#E5E5E5"> some I think a lot of things</font>

847
00:36:48,090 --> 00:36:51,210
<font color="#E5E5E5">we've encouraged people to do is use</font>

848
00:36:49,470 --> 00:36:52,890
tools like brakeman because it's hard to

849
00:36:51,210 --> 00:36:54,450
change<font color="#E5E5E5"> the culture from the outside I</font>

850
00:36:52,890 --> 00:36:56,129
mean you hand off someone an assessment

851
00:36:54,450 --> 00:36:57,480
report they're not<font color="#E5E5E5"> gonna be like we're</font>

852
00:36:56,130 --> 00:36:59,250
gonna<font color="#E5E5E5"> change how we do everything you</font>

853
00:36:57,480 --> 00:37:02,640
know we try<font color="#E5E5E5"> to really help them fix</font>

854
00:36:59,250 --> 00:37:03,990
these issues issues one by one and then

855
00:37:02,640 --> 00:37:05,700
make recommendations of how to use

856
00:37:03,990 --> 00:37:07,500
technology to kind of reinforce these

857
00:37:05,700 --> 00:37:08,759
things because if<font color="#E5E5E5"> brakeman is awarding</font>

858
00:37:07,500 --> 00:37:09,600
you all the time like you're doing this

859
00:37:08,760 --> 00:37:11,190
wrong you're doing this wrong you're

860
00:37:09,600 --> 00:37:13,140
doing this wrong it kind of beats them

861
00:37:11,190 --> 00:37:14,250
to people's heads but still you have to

862
00:37:13,140 --> 00:37:15,930
have some people in<font color="#E5E5E5"> the organization</font>

863
00:37:14,250 --> 00:37:18,300
<font color="#E5E5E5">that care about security to make those</font>

864
00:37:15,930 --> 00:37:20,370
changes so and<font color="#E5E5E5"> those people have to come</font>

865
00:37:18,300 --> 00:37:23,540
to conferences like this to warn about

866
00:37:20,370 --> 00:37:25,620
it and you know educate themselves so

867
00:37:23,540 --> 00:37:26,730
but you're a developer aren't you so of

868
00:37:25,620 --> 00:37:31,140
course you wouldn't blame developers

869
00:37:26,730 --> 00:37:33,890
sure i'm not<font color="#E5E5E5"> buying blaming developers</font>

870
00:37:31,140 --> 00:37:33,890
just be clear

871
00:37:35,849 --> 00:37:43,109
did it is it now time for the beatbox

872
00:37:39,400 --> 00:37:46,230
contest oh yeah let you go<font color="#E5E5E5"> ahead</font><font color="#CCCCCC"> view</font>

873
00:37:43,109 --> 00:37:46,230
thank you

