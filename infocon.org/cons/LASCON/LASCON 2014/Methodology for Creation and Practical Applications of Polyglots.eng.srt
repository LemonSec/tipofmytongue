1
00:00:17,230 --> 00:00:21,070
hello everybody welcome to<font color="#E5E5E5"> the talk this</font>

2
00:00:19,960 --> 00:00:23,740
might not have been<font color="#E5E5E5"> the talk that you</font>

3
00:00:21,070 --> 00:00:26,500
were<font color="#CCCCCC"> expecting a funny story about that</font>

4
00:00:23,740 --> 00:00:28,538
<font color="#E5E5E5">I showed up yesterday and ran into david</font>

5
00:00:26,500 --> 00:00:30,730
hughes and he was like hey good to see

6
00:00:28,539 --> 00:00:33,250
you<font color="#CCCCCC"> i I'm surprised didn't submit to the</font>

7
00:00:30,730 --> 00:00:36,129
CFP I was like yeah you know<font color="#CCCCCC"> I was</font>

8
00:00:33,250 --> 00:00:39,519
planning to I had stuff like that<font color="#E5E5E5"> I was</font>

9
00:00:36,129 --> 00:00:42,280
planning<font color="#E5E5E5"> to submit but you know I just</font>

10
00:00:39,519 --> 00:00:44,350
<font color="#CCCCCC">saw the CFP closed and that was my first</font>

11
00:00:42,280 --> 00:00:45,940
knowledge<font color="#E5E5E5"> that the CFP was you know like</font>

12
00:00:44,350 --> 00:00:48,129
what the CFP was going to be this year

13
00:00:45,940 --> 00:00:49,660
he<font color="#E5E5E5"> said well there's a</font><font color="#CCCCCC"> canceled talk</font>

14
00:00:48,129 --> 00:00:52,899
tomorrow so do you want to do a talk and

15
00:00:49,660 --> 00:00:55,510
I said yes I do so here I am here you

16
00:00:52,899 --> 00:00:57,399
are welcome this talk<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to be</font>

17
00:00:55,510 --> 00:01:00,070
about polyglots and we'll talk<font color="#E5E5E5"> about</font>

18
00:00:57,399 --> 00:01:04,560
what<font color="#CCCCCC"> that means in just a moment so</font>

19
00:01:00,070 --> 00:01:07,899
let's begin holy crap what just happened

20
00:01:04,560 --> 00:01:09,940
I<font color="#E5E5E5"> usually use PowerPoint but I'm using</font>

21
00:01:07,899 --> 00:01:12,940
this free thing that flies around on a

22
00:01:09,940 --> 00:01:14,920
big bitmap instead so I'm sorry<font color="#E5E5E5"> if you</font>

23
00:01:12,940 --> 00:01:18,700
have motion sickness if you do now would

24
00:01:14,920 --> 00:01:22,360
be the time to pop a Dramamine so Who am

25
00:01:18,700 --> 00:01:24,160
I I'm Daniel Crowley<font color="#E5E5E5"> I'm currently</font>

26
00:01:22,360 --> 00:01:26,050
working for<font color="#CCCCCC"> I sec partners as a security</font>

27
00:01:24,160 --> 00:01:28,840
<font color="#CCCCCC">engineer I break stuff all the time</font><font color="#E5E5E5"> I'm</font>

28
00:01:26,050 --> 00:01:31,720
a baron in the poorly recognized<font color="#CCCCCC"> micra</font>

29
00:01:28,840 --> 00:01:34,030
<font color="#CCCCCC">nation of sealand if you recognize the</font>

30
00:01:31,720 --> 00:01:36,819
Universal Life Church I am also an

31
00:01:34,030 --> 00:01:40,030
ordained minister I'm time magazine's

32
00:01:36,819 --> 00:01:42,310
Person of the Year<font color="#E5E5E5"> in 2006 although that</font>

33
00:01:40,030 --> 00:01:46,720
was the year that you like social<font color="#CCCCCC"> media</font>

34
00:01:42,310 --> 00:01:50,080
you are<font color="#CCCCCC"> x next this</font><font color="#E5E5E5"> person of the year</font>

35
00:01:46,720 --> 00:01:53,819
so but technically I am technically I am

36
00:01:50,080 --> 00:02:01,690
and I won the last con CTF this year

37
00:01:53,819 --> 00:02:07,599
<font color="#E5E5E5">using only this unrooted iphone so seem</font>

38
00:02:01,690 --> 00:02:10,359
<font color="#CCCCCC">i'm on a</font><font color="#E5E5E5"> phone so so that's me so let's</font>

39
00:02:07,599 --> 00:02:12,489
talk some terminology so that when<font color="#E5E5E5"> i</font>

40
00:02:10,360 --> 00:02:16,660
start using these terms they they have

41
00:02:12,489 --> 00:02:21,190
some meaning for you so a format is just

42
00:02:16,660 --> 00:02:23,950
any it's a set of rules for validating a

43
00:02:21,190 --> 00:02:26,650
piece of data so you can have<font color="#E5E5E5"> file</font>

44
00:02:23,950 --> 00:02:28,750
formats where the data needs<font color="#CCCCCC"> to let's</font>

45
00:02:26,650 --> 00:02:31,510
say start with these two bites and then

46
00:02:28,750 --> 00:02:33,310
have these you know the<font color="#E5E5E5"> next two bites</font>

47
00:02:31,510 --> 00:02:36,129
the next four bites will define<font color="#CCCCCC"> the size</font>

48
00:02:33,310 --> 00:02:38,200
of the data to be<font color="#E5E5E5"> parsed or something</font>

49
00:02:36,129 --> 00:02:40,840
like that that's a format that's a rule

50
00:02:38,200 --> 00:02:45,480
set of rules for validating that a

51
00:02:40,840 --> 00:02:48,790
particular piece of<font color="#E5E5E5"> data is correctly</font>

52
00:02:45,480 --> 00:02:50,530
correctly put together that it follows

53
00:02:48,790 --> 00:02:53,590
the right set of rules to<font color="#E5E5E5"> be interpreted</font>

54
00:02:50,530 --> 00:02:56,890
<font color="#CCCCCC">in a particular way metadata headers</font>

55
00:02:53,590 --> 00:03:00,310
this is just<font color="#E5E5E5"> data about the data most</font>

56
00:02:56,890 --> 00:03:03,059
formats will contain metadata such that

57
00:03:00,310 --> 00:03:06,340
you can tell the size of each chunk or

58
00:03:03,060 --> 00:03:09,459
something like that there might<font color="#E5E5E5"> be there</font>

59
00:03:06,340 --> 00:03:12,189
might be like comments about the file in

60
00:03:09,459 --> 00:03:16,209
the header in the metadata<font color="#E5E5E5"> a parser is</font>

61
00:03:12,189 --> 00:03:18,969
just some system that interprets some

62
00:03:16,209 --> 00:03:22,480
data according to a format and<font color="#CCCCCC"> then does</font>

63
00:03:18,969 --> 00:03:25,569
something<font color="#E5E5E5"> with that so a JPEG parser for</font>

64
00:03:22,480 --> 00:03:28,090
instance<font color="#CCCCCC"> will look at a file determine</font>

65
00:03:25,569 --> 00:03:29,888
whether or<font color="#E5E5E5"> not it's a valid jpg take the</font>

66
00:03:28,090 --> 00:03:32,379
information<font color="#CCCCCC"> it needs out of it and then</font>

67
00:03:29,889 --> 00:03:34,480
render an image although the parser is

68
00:03:32,379 --> 00:03:36,909
technically just the part that picks out

69
00:03:34,480 --> 00:03:39,760
the values according to a format now a

70
00:03:36,909 --> 00:03:42,548
polyglot a polyglot is a piece of data

71
00:03:39,760 --> 00:03:44,679
that<font color="#CCCCCC"> is valid in multiple formats and</font>

72
00:03:42,549 --> 00:03:49,239
what I<font color="#CCCCCC"> mean by that is let's say you</font>

73
00:03:44,680 --> 00:03:52,689
have a JPEG that is also<font color="#E5E5E5"> a RAR file</font><font color="#CCCCCC"> I'll</font>

74
00:03:49,239 --> 00:03:55,420
demonstrate an example of this later on

75
00:03:52,689 --> 00:03:57,730
and it's actually<font color="#E5E5E5"> really really easy to</font>

76
00:03:55,420 --> 00:04:00,219
create one of these but i'll talk about

77
00:03:57,730 --> 00:04:01,659
how how you can do that and why it's

78
00:04:00,219 --> 00:04:03,939
easy to create and what what things

79
00:04:01,659 --> 00:04:07,060
about the formats allow you to do that a

80
00:04:03,939 --> 00:04:09,400
little bit later on so the first thing

81
00:04:07,060 --> 00:04:12,760
that<font color="#CCCCCC"> allows for us to create polyglots</font>

82
00:04:09,400 --> 00:04:15,310
is format flexibility the the reason<font color="#E5E5E5"> the</font>

83
00:04:12,760 --> 00:04:17,798
reason that polyglots can be created as

84
00:04:15,310 --> 00:04:20,139
format flexibility and there's a couple

85
00:04:17,798 --> 00:04:22,870
things that that make formats flexible

86
00:04:20,139 --> 00:04:26,680
that allow you to you know create data

87
00:04:22,870 --> 00:04:29,530
that's multiple format of multiple an

88
00:04:26,680 --> 00:04:31,990
example of multiple formats at once so

89
00:04:29,530 --> 00:04:35,140
one of the easiest to understand is

90
00:04:31,990 --> 00:04:38,620
start and end magic numbers so most file

91
00:04:35,140 --> 00:04:42,240
formats and a lot of data formats will

92
00:04:38,620 --> 00:04:43,840
start with a particular byte sequence so

93
00:04:42,240 --> 00:04:47,949
4.jpg<font color="#CCCCCC"> friends</font>

94
00:04:43,840 --> 00:04:52,960
the starting byte sequence is hex FF d 8

95
00:04:47,949 --> 00:04:58,510
and the ending is hex FF d 9 so for any

96
00:04:52,960 --> 00:04:59,739
file that has FF d 8 and FF d 9 those

97
00:04:58,510 --> 00:05:02,580
are the start and end markers where a

98
00:04:59,740 --> 00:05:04,720
<font color="#CCCCCC">jpeg parser will look for</font><font color="#E5E5E5"> jpg data</font>

99
00:05:02,580 --> 00:05:07,539
anything outside<font color="#CCCCCC"> of that would be</font>

100
00:05:04,720 --> 00:05:10,870
ignored by the<font color="#CCCCCC"> jpg parser which is good</font>

101
00:05:07,540 --> 00:05:13,750
<font color="#CCCCCC">to know and actually rar has a starting</font>

102
00:05:10,870 --> 00:05:15,250
sequence of<font color="#E5E5E5"> AR AR bang and then two</font>

103
00:05:13,750 --> 00:05:19,570
bytes I can never remember I<font color="#E5E5E5"> think it's</font>

104
00:05:15,250 --> 00:05:22,930
like 1a<font color="#E5E5E5"> 07 something like that but that</font>

105
00:05:19,570 --> 00:05:24,610
will rawr rawr parsers will generally

106
00:05:22,930 --> 00:05:27,430
look through a large part of<font color="#E5E5E5"> the file</font>

107
00:05:24,610 --> 00:05:29,650
for that header so if you take a JPEG

108
00:05:27,430 --> 00:05:31,510
file and appended to the end of it a

109
00:05:29,650 --> 00:05:33,070
JPEG parser will look at that<font color="#CCCCCC"> and</font><font color="#E5E5E5"> say</font>

110
00:05:31,510 --> 00:05:35,380
okay you're right at the start of file

111
00:05:33,070 --> 00:05:37,690
here's<font color="#E5E5E5"> FF d 8 it'll parcel the JPEG</font>

112
00:05:35,380 --> 00:05:40,150
information outside okay FF d 9 that's

113
00:05:37,690 --> 00:05:43,479
the end of it we're good<font color="#CCCCCC"> where as a RAR</font>

114
00:05:40,150 --> 00:05:45,580
parser will look<font color="#CCCCCC"> through the JPEG data</font>

115
00:05:43,479 --> 00:05:48,280
and there as<font color="#CCCCCC"> long as there's no RAR</font>

116
00:05:45,580 --> 00:05:49,870
signature somewhere in the<font color="#CCCCCC"> JPEG data it</font>

117
00:05:48,280 --> 00:05:51,669
will just pass over<font color="#CCCCCC"> the</font><font color="#E5E5E5"> JPEG data</font>

118
00:05:49,870 --> 00:05:53,680
completely until it hits the raw

119
00:05:51,669 --> 00:05:55,750
appended to the end of the JPEG and then

120
00:05:53,680 --> 00:05:57,729
parse the RAR from there it just parses

121
00:05:55,750 --> 00:06:01,450
from the signature onward until it

122
00:05:57,729 --> 00:06:03,490
reaches<font color="#CCCCCC"> the end of end of all the chunks</font>

123
00:06:01,450 --> 00:06:05,979
and<font color="#CCCCCC"> rar has</font><font color="#E5E5E5"> an ending signature as well</font>

124
00:06:03,490 --> 00:06:08,200
so it'll just parse through to the end

125
00:06:05,979 --> 00:06:11,139
of<font color="#CCCCCC"> that and so both the JPEG parser and</font>

126
00:06:08,200 --> 00:06:12,639
r our parser can take a<font color="#E5E5E5"> JPEG pent with a</font>

127
00:06:11,139 --> 00:06:15,120
roar appended to the end of it and parse

128
00:06:12,639 --> 00:06:17,889
it as a JPEG or a RAR respectively so

129
00:06:15,120 --> 00:06:22,200
<font color="#CCCCCC">and I'll</font><font color="#E5E5E5"> show you an example of that in</font>

130
00:06:17,889 --> 00:06:25,870
a moment so if you have for instance a

131
00:06:22,200 --> 00:06:28,200
jiff jiff file or gif depending<font color="#CCCCCC"> on</font>

132
00:06:25,870 --> 00:06:31,419
whether or<font color="#E5E5E5"> not you respect the guy that</font>

133
00:06:28,200 --> 00:06:36,400
created the<font color="#E5E5E5"> jif the gif format I prefer</font>

134
00:06:31,419 --> 00:06:40,270
gif but yeah because it has a gene<font color="#E5E5E5"> it</font>

135
00:06:36,400 --> 00:06:41,560
not a J<font color="#CCCCCC"> ok but that's that's you know</font>

136
00:06:40,270 --> 00:06:47,159
let's argue about that at some other

137
00:06:41,560 --> 00:06:49,389
time so if you have a jiff file gif file

138
00:06:47,160 --> 00:06:51,550
I'm saying it his way now that's

139
00:06:49,389 --> 00:06:54,310
<font color="#E5E5E5">terrible if you have a gif file with a</font>

140
00:06:51,550 --> 00:06:56,380
comment in it the most<font color="#E5E5E5"> that you're going</font>

141
00:06:54,310 --> 00:06:57,249
<font color="#CCCCCC">to get out of that like there's no</font>

142
00:06:56,380 --> 00:06:59,799
particular format

143
00:06:57,249 --> 00:07:01,689
for that that comment<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> it can</font><font color="#CCCCCC"> be</font>

144
00:06:59,799 --> 00:07:04,808
anything really<font color="#E5E5E5"> it can be any sequence</font>

145
00:07:01,689 --> 00:07:08,079
of bytes<font color="#E5E5E5"> so you could put anything in</font>

146
00:07:04,809 --> 00:07:10,389
there so as long as<font color="#CCCCCC"> you have some so one</font>

147
00:07:08,079 --> 00:07:12,399
example is you could put a PHP script in

148
00:07:10,389 --> 00:07:15,369
the comment of a gif file and it would

149
00:07:12,399 --> 00:07:17,679
be<font color="#CCCCCC"> both</font><font color="#E5E5E5"> a valid gif and a valid PHP</font>

150
00:07:15,369 --> 00:07:18,909
script and that's actually usable in

151
00:07:17,679 --> 00:07:23,138
some tax but I'm getting ahead of myself

152
00:07:18,909 --> 00:07:25,799
here unused space so it's possible with

153
00:07:23,139 --> 00:07:29,169
some file formats to<font color="#E5E5E5"> create sort of</font>

154
00:07:25,799 --> 00:07:31,989
alcove sort of like caves of unused

155
00:07:29,169 --> 00:07:33,669
space<font color="#E5E5E5"> within the format where the parser</font>

156
00:07:31,989 --> 00:07:35,709
isn't going to touch it because<font color="#E5E5E5"> it's not</font>

157
00:07:33,669 --> 00:07:39,339
told<font color="#CCCCCC"> that there's an object there or any</font>

158
00:07:35,709 --> 00:07:41,199
part<font color="#CCCCCC"> of an object data and</font><font color="#E5E5E5"> then the</font>

159
00:07:39,339 --> 00:07:45,219
flexibility of content is interesting

160
00:07:41,199 --> 00:07:47,799
too so data can be let's say<font color="#E5E5E5"> that you</font>

161
00:07:45,219 --> 00:07:50,589
take a bitmap and replace part of the

162
00:07:47,799 --> 00:07:52,779
color data with a PHP script it's going

163
00:07:50,589 --> 00:07:54,669
to<font color="#E5E5E5"> render</font><font color="#CCCCCC"> a little funny around that</font>

164
00:07:52,779 --> 00:07:56,619
that part of you know when the<font color="#E5E5E5"> color</font>

165
00:07:54,669 --> 00:07:58,029
data is used so you'll see some some

166
00:07:56,619 --> 00:07:59,799
weird stuff around the middle<font color="#E5E5E5"> of your</font>

167
00:07:58,029 --> 00:08:02,649
picture but it'll still render as a

168
00:07:59,799 --> 00:08:06,039
valid bitmap image and it will<font color="#E5E5E5"> also have</font>

169
00:08:02,649 --> 00:08:07,779
a PHP script embedded in it so let's

170
00:08:06,039 --> 00:08:11,049
dive a little bit deeper<font color="#E5E5E5"> into</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> and</font>

171
00:08:07,779 --> 00:08:12,939
start and end magic numbers so some

172
00:08:11,049 --> 00:08:14,979
formats will only have starting magic

173
00:08:12,939 --> 00:08:17,469
number starting magic numbers so raw is

174
00:08:14,979 --> 00:08:18,758
an example of that some formats<font color="#E5E5E5"> have</font>

175
00:08:17,469 --> 00:08:21,969
starting and ending number so we

176
00:08:18,759 --> 00:08:24,459
mentioned jpg PHP<font color="#E5E5E5"> I alluded to but</font>

177
00:08:21,969 --> 00:08:28,539
<font color="#E5E5E5">that's left angle bracket question mark</font>

178
00:08:24,459 --> 00:08:31,749
PHP is the starting magic number and the

179
00:08:28,539 --> 00:08:34,568
ending magic number is ? right angle

180
00:08:31,749 --> 00:08:37,360
<font color="#CCCCCC">bracket so and you can actually</font><font color="#E5E5E5"> have</font>

181
00:08:34,568 --> 00:08:41,110
multiple you can have multiple of these

182
00:08:37,360 --> 00:08:42,579
in whatever so but it everything else is

183
00:08:41,110 --> 00:08:44,470
ignored everything outside of<font color="#E5E5E5"> that is</font>

184
00:08:42,578 --> 00:08:47,170
ignored and PHP will parse through an

185
00:08:44,470 --> 00:08:49,829
entire file by design parts through an

186
00:08:47,170 --> 00:08:53,229
entire file and anything that isn't in

187
00:08:49,829 --> 00:08:56,170
PHP brackets will just be simply output

188
00:08:53,230 --> 00:09:00,670
so the<font color="#E5E5E5"> de format that the data outside</font>

189
00:08:56,170 --> 00:09:02,139
it can be anything some have no<font color="#E5E5E5"> magic</font>

190
00:09:00,670 --> 00:09:04,540
numbers at all so true crypt is an

191
00:09:02,139 --> 00:09:06,579
example of a file format that has no

192
00:09:04,540 --> 00:09:09,129
starting and ending magic numbers it's

193
00:09:06,579 --> 00:09:10,780
just a blob of encrypted data and it

194
00:09:09,129 --> 00:09:14,560
only takes<font color="#E5E5E5"> on meaning it only has a</font>

195
00:09:10,780 --> 00:09:16,270
form at once decrypted so that is why

196
00:09:14,560 --> 00:09:19,660
<font color="#CCCCCC">truecrypt claims that there is no</font>

197
00:09:16,270 --> 00:09:21,939
signature for a truecrypt file and<font color="#E5E5E5"> I</font>

198
00:09:19,660 --> 00:09:23,829
<font color="#E5E5E5">think that's</font><font color="#CCCCCC"> actually right as long as</font>

199
00:09:21,940 --> 00:09:27,370
the encryption is good there should<font color="#CCCCCC"> not</font>

200
00:09:23,830 --> 00:09:31,870
be any way<font color="#E5E5E5"> to tell an encrypted blob of</font>

201
00:09:27,370 --> 00:09:32,860
data from a truly random blob of data so

202
00:09:31,870 --> 00:09:36,550
let's talk<font color="#E5E5E5"> a little bit more about</font>

203
00:09:32,860 --> 00:09:38,860
<font color="#E5E5E5">ignored metadata so I mentioned comments</font>

204
00:09:36,550 --> 00:09:43,240
in gif files there<font color="#E5E5E5"> are also comments and</font>

205
00:09:38,860 --> 00:09:45,940
JPEGs and pings ping is an interesting

206
00:09:43,240 --> 00:09:49,180
format because the base basically the

207
00:09:45,940 --> 00:09:51,970
way that pain works is you have a magic

208
00:09:49,180 --> 00:09:54,699
number at<font color="#E5E5E5"> the start and then you have a</font>

209
00:09:51,970 --> 00:09:58,450
format of chunks where it's just<font color="#E5E5E5"> chunk</font>

210
00:09:54,700 --> 00:10:01,630
it reads chunk by chunk in it's the type

211
00:09:58,450 --> 00:10:03,280
of chunk which is just<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 4 byte value so</font>

212
00:10:01,630 --> 00:10:07,980
for<font color="#E5E5E5"> instance the color data goes in an</font>

213
00:10:03,280 --> 00:10:11,439
IDOT idat chunk and then a for bite size

214
00:10:07,980 --> 00:10:13,990
of the chunk and then the actual data in

215
00:10:11,440 --> 00:10:15,400
the junk<font color="#E5E5E5"> and there's some some defined</font>

216
00:10:13,990 --> 00:10:18,070
chunks that you need to have in there

217
00:10:15,400 --> 00:10:19,569
for a valid ping like hi<font color="#E5E5E5"> dad for</font>

218
00:10:18,070 --> 00:10:22,510
instance because without color data you

219
00:10:19,570 --> 00:10:26,410
don't have an image but you can put just

220
00:10:22,510 --> 00:10:28,720
a random a random chunk in there<font color="#E5E5E5"> oh also</font>

221
00:10:26,410 --> 00:10:31,329
there's a CR there's a checksum field<font color="#E5E5E5"> I</font>

222
00:10:28,720 --> 00:10:34,420
forgot about<font color="#E5E5E5"> the checks on the field but</font>

223
00:10:31,330 --> 00:10:37,050
<font color="#E5E5E5">if you just tack on if you just put a</font>

224
00:10:34,420 --> 00:10:41,860
chunk into the middle<font color="#E5E5E5"> of a pain that</font>

225
00:10:37,050 --> 00:10:43,810
that has some random unrecognized some

226
00:10:41,860 --> 00:10:45,730
<font color="#E5E5E5">unwrapped unrecognized name that's</font>

227
00:10:43,810 --> 00:10:48,280
actually<font color="#CCCCCC"> something that the ping format</font>

228
00:10:45,730 --> 00:10:51,520
that allows extensions to the pain

229
00:10:48,280 --> 00:10:55,030
format so you can have a pain that does

230
00:10:51,520 --> 00:10:57,850
something special in one particular

231
00:10:55,030 --> 00:10:59,949
program and nothing else because nothing

232
00:10:57,850 --> 00:11:02,170
else recognizes that proprietary chunk

233
00:10:59,950 --> 00:11:05,980
but the ping format allows for that so

234
00:11:02,170 --> 00:11:07,810
if you put<font color="#E5E5E5"> in like a hack chunk you can</font>

235
00:11:05,980 --> 00:11:10,060
<font color="#E5E5E5">just put in whatever data you want and</font>

236
00:11:07,810 --> 00:11:11,890
as long as the size field is right it'll

237
00:11:10,060 --> 00:11:13,479
<font color="#CCCCCC">be ignored and the parser is not even</font>

238
00:11:11,890 --> 00:11:15,130
going to check the checksum for a block

239
00:11:13,480 --> 00:11:16,390
that it's not going to<font color="#E5E5E5"> that it's not</font>

240
00:11:15,130 --> 00:11:18,250
going to do anything with so you don't

241
00:11:16,390 --> 00:11:19,630
<font color="#E5E5E5">even have to get the checksum right so</font>

242
00:11:18,250 --> 00:11:22,360
you can just<font color="#E5E5E5"> put in a chunk and have</font>

243
00:11:19,630 --> 00:11:24,310
whatever in<font color="#E5E5E5"> there and you can stuff a</font>

244
00:11:22,360 --> 00:11:27,040
lot of<font color="#CCCCCC"> different things</font><font color="#E5E5E5"> in</font>

245
00:11:24,310 --> 00:11:29,219
HTML comments that's a that's another

246
00:11:27,040 --> 00:11:32,560
good another good example

247
00:11:29,220 --> 00:11:34,480
non-standardized HTTP headers<font color="#E5E5E5"> so if you</font>

248
00:11:32,560 --> 00:11:38,770
have like an ex I just<font color="#CCCCCC"> made this header</font>

249
00:11:34,480 --> 00:11:40,570
up header then pretty much nothing is

250
00:11:38,770 --> 00:11:47,290
going to<font color="#E5E5E5"> actually do anything with that</font>

251
00:11:40,570 --> 00:11:52,000
I did I I think I might have skipped

252
00:11:47,290 --> 00:11:53,620
that yeah so I v3 tags are you know

253
00:11:52,000 --> 00:11:56,260
they're they're a lot like image

254
00:11:53,620 --> 00:11:59,470
comments where the data can really be

255
00:11:56,260 --> 00:12:02,380
anything and it's just<font color="#CCCCCC"> a matter of you</font>

256
00:11:59,470 --> 00:12:05,350
know<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> parser whatever file</font>

257
00:12:02,380 --> 00:12:06,640
consumer is taking in that<font color="#CCCCCC"> mp3 to read</font>

258
00:12:05,350 --> 00:12:09,339
that and do whatever it's going to do

259
00:12:06,640 --> 00:12:11,949
with those id3 tags so to a large degree

260
00:12:09,339 --> 00:12:14,890
you can just put whatever in there so<font color="#CCCCCC"> it</font>

261
00:12:11,950 --> 00:12:19,330
allows<font color="#CCCCCC"> for some flexibility so we talked</font>

262
00:12:14,890 --> 00:12:22,180
about unused space talked about so the

263
00:12:19,330 --> 00:12:25,150
PDF format<font color="#CCCCCC"> and the zip format both share</font>

264
00:12:22,180 --> 00:12:29,829
an interesting property where the<font color="#CCCCCC"> file</font>

265
00:12:25,150 --> 00:12:33,370
is parsed in a really weird way so both

266
00:12:29,830 --> 00:12:37,930
with PDF and with zip you have sort of a

267
00:12:33,370 --> 00:12:41,890
catalog of all the chunks of data in the

268
00:12:37,930 --> 00:12:43,449
file so when you parse a PDF you go you

269
00:12:41,890 --> 00:12:44,710
first check the magic number at<font color="#E5E5E5"> the</font>

270
00:12:43,450 --> 00:12:46,630
beginning of the file to make sure<font color="#E5E5E5"> it's</font>

271
00:12:44,710 --> 00:12:48,790
PDF then you go all the way to the end

272
00:12:46,630 --> 00:12:51,070
<font color="#E5E5E5">of the file to look at this catalog and</font>

273
00:12:48,790 --> 00:12:54,250
the catalog says okay this offset

274
00:12:51,070 --> 00:12:56,200
there's a chunk of<font color="#E5E5E5"> this size and so you</font>

275
00:12:54,250 --> 00:12:57,760
go and look at each chunk and read the

276
00:12:56,200 --> 00:12:59,740
header information to see what kind of

277
00:12:57,760 --> 00:13:03,730
chunk what am I going<font color="#E5E5E5"> to do with</font><font color="#CCCCCC"> that is</font>

278
00:12:59,740 --> 00:13:06,100
a PDF parser so if you tell it you know

279
00:13:03,730 --> 00:13:08,680
from bites one to a hundred there's one

280
00:13:06,100 --> 00:13:12,730
chunk and<font color="#E5E5E5"> from bites 200-300 there's a</font>

281
00:13:08,680 --> 00:13:15,130
chunk you have<font color="#E5E5E5"> 100</font><font color="#CCCCCC"> bytes of space in the</font>

282
00:13:12,730 --> 00:13:17,680
<font color="#CCCCCC">middle of that that's unused that you</font>

283
00:13:15,130 --> 00:13:19,360
can put whatever<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want there and PDF</font>

284
00:13:17,680 --> 00:13:23,319
format allows you to do that<font color="#E5E5E5"> because of</font>

285
00:13:19,360 --> 00:13:27,160
the<font color="#CCCCCC"> way that PDFs are parsed zip is is</font>

286
00:13:23,320 --> 00:13:29,410
very<font color="#CCCCCC"> similar you</font><font color="#E5E5E5"> have you you go to the</font>

287
00:13:27,160 --> 00:13:32,860
<font color="#E5E5E5">the towards the end of the fight you</font>

288
00:13:29,410 --> 00:13:35,620
search through the file for the the

289
00:13:32,860 --> 00:13:37,630
signature that says okay this is the end

290
00:13:35,620 --> 00:13:39,460
of<font color="#E5E5E5"> the catalog and</font>

291
00:13:37,630 --> 00:13:40,780
the end<font color="#E5E5E5"> of the catalog right after</font><font color="#CCCCCC"> that</font>

292
00:13:39,460 --> 00:13:42,850
it tells you where the beginning<font color="#E5E5E5"> of the</font>

293
00:13:40,780 --> 00:13:44,589
<font color="#E5E5E5">catalog is and then you read through the</font>

294
00:13:42,850 --> 00:13:47,290
catalog and that tells you where the

295
00:13:44,590 --> 00:13:49,870
<font color="#E5E5E5">local catalogs are there called</font>

296
00:13:47,290 --> 00:13:52,300
directories but the local directories

297
00:13:49,870 --> 00:13:54,940
are and the local directories have you

298
00:13:52,300 --> 00:13:56,890
know metadata about the compressed file

299
00:13:54,940 --> 00:14:00,480
and<font color="#E5E5E5"> then the compressed file data itself</font>

300
00:13:56,890 --> 00:14:04,090
so<font color="#CCCCCC"> its zip is a bit of a bizarre format</font>

301
00:14:00,480 --> 00:14:05,950
but<font color="#E5E5E5"> again we can say you</font><font color="#CCCCCC"> know in the</font>

302
00:14:04,090 --> 00:14:07,780
<font color="#E5E5E5">central directory we can say here's</font>

303
00:14:05,950 --> 00:14:09,700
chunk here and here's a chunk here and

304
00:14:07,780 --> 00:14:12,520
then<font color="#E5E5E5"> this part in the middle is just</font>

305
00:14:09,700 --> 00:14:17,050
free for us to use for putting in other

306
00:14:12,520 --> 00:14:20,230
data to satisfy other formats so the

307
00:14:17,050 --> 00:14:23,949
flexibility of content so<font color="#E5E5E5"> some stuff can</font>

308
00:14:20,230 --> 00:14:25,840
be interpreted as you<font color="#CCCCCC"> know having one</font>

309
00:14:23,950 --> 00:14:27,340
meaning within one file because you know

310
00:14:25,840 --> 00:14:30,100
everything<font color="#E5E5E5"> we talked about up until now</font>

311
00:14:27,340 --> 00:14:32,770
at<font color="#E5E5E5"> least that we dove into was all about</font>

312
00:14:30,100 --> 00:14:36,220
creating spaces or using spaces where

313
00:14:32,770 --> 00:14:38,410
the parsers just going to ignore it with

314
00:14:36,220 --> 00:14:40,300
this we're<font color="#E5E5E5"> talking about things where</font>

315
00:14:38,410 --> 00:14:42,699
the parser will actually use the data

316
00:14:40,300 --> 00:14:44,620
but it<font color="#E5E5E5"> will have different meanings in</font>

317
00:14:42,700 --> 00:14:47,500
different contexts so one of<font color="#E5E5E5"> the easiest</font>

318
00:14:44,620 --> 00:14:50,020
ones understand is a PHP script embedded

319
00:14:47,500 --> 00:14:51,810
in color data the color data is it's

320
00:14:50,020 --> 00:14:56,050
going<font color="#E5E5E5"> to show up as something weird</font>

321
00:14:51,810 --> 00:14:58,420
maybe but as it turns out it doesn't

322
00:14:56,050 --> 00:15:01,060
matter because<font color="#E5E5E5"> it's just going to render</font>

323
00:14:58,420 --> 00:15:02,890
very much the<font color="#CCCCCC"> same as long as you put it</font>

324
00:15:01,060 --> 00:15:05,439
<font color="#E5E5E5">like the end of the color data or</font><font color="#CCCCCC"> the</font>

325
00:15:02,890 --> 00:15:11,500
beginning<font color="#E5E5E5"> of the color data or you know</font>

326
00:15:05,440 --> 00:15:16,630
something like that so you can excuse me

327
00:15:11,500 --> 00:15:20,890
so you can you can use this to you can

328
00:15:16,630 --> 00:15:24,880
use this sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> like dual meaning to</font>

329
00:15:20,890 --> 00:15:28,630
embed data in content that is very

330
00:15:24,880 --> 00:15:30,130
flexible so fit nap color data it

331
00:15:28,630 --> 00:15:32,350
<font color="#E5E5E5">doesn't matter what the bites are you</font>

332
00:15:30,130 --> 00:15:37,480
can have any sequence of bytes and it

333
00:15:32,350 --> 00:15:38,860
will come<font color="#CCCCCC"> out to valid colors so that's</font>

334
00:15:37,480 --> 00:15:40,600
interesting<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that allows us</font><font color="#CCCCCC"> to put</font>

335
00:15:38,860 --> 00:15:42,490
basically whatever chunk of data we want

336
00:15:40,600 --> 00:15:45,760
in there that might<font color="#E5E5E5"> be read as something</font>

337
00:15:42,490 --> 00:15:48,130
<font color="#E5E5E5">else so you could have</font><font color="#CCCCCC"> a file embedded</font>

338
00:15:45,760 --> 00:15:50,950
in HTML content with HTML if it's not

339
00:15:48,130 --> 00:15:54,640
you know some tag it's just going to be

340
00:15:50,950 --> 00:15:59,140
spit out as junk you might even be<font color="#CCCCCC"> able</font>

341
00:15:54,640 --> 00:16:01,090
<font color="#E5E5E5">to put something inside an HTML tag just</font>

342
00:15:59,140 --> 00:16:04,030
just so long as it doesn't have any

343
00:16:01,090 --> 00:16:06,370
right angle brackets you could make<font color="#E5E5E5"> your</font>

344
00:16:04,030 --> 00:16:08,920
own HTML tag that HTML will just be like

345
00:16:06,370 --> 00:16:11,560
oh whoa I don't know<font color="#E5E5E5"> what this tag is so</font>

346
00:16:08,920 --> 00:16:13,209
I'm just going to quietly ignore it but

347
00:16:11,560 --> 00:16:15,459
that that data might have special

348
00:16:13,210 --> 00:16:18,130
meaning to some other parser there's

349
00:16:15,460 --> 00:16:20,200
this guy Aang<font color="#CCCCCC"> albertini in Switzerland</font>

350
00:16:18,130 --> 00:16:21,760
who's a brilliant guy and I absolutely

351
00:16:20,200 --> 00:16:23,680
<font color="#CCCCCC">recommend if you're interested</font><font color="#E5E5E5"> in</font>

352
00:16:21,760 --> 00:16:26,290
polyglots take a look at his work he's

353
00:16:23,680 --> 00:16:27,939
done some amazing stuff but he<font color="#E5E5E5"> came up</font>

354
00:16:26,290 --> 00:16:30,939
with<font color="#E5E5E5"> this technique called anga Krypton</font>

355
00:16:27,940 --> 00:16:34,030
well that<font color="#E5E5E5"> he calls anger Krypton and it</font>

356
00:16:30,940 --> 00:16:37,540
basically relies on the property of most

357
00:16:34,030 --> 00:16:39,699
algorithms that if you decrypt something

358
00:16:37,540 --> 00:16:42,760
<font color="#CCCCCC">like if you take just regular data and</font>

359
00:16:39,700 --> 00:16:44,890
decrypt it not encrypts but decrypt with

360
00:16:42,760 --> 00:16:46,900
a given<font color="#E5E5E5"> key and then encrypt it with</font>

361
00:16:44,890 --> 00:16:53,140
that<font color="#E5E5E5"> same key you're going to get back</font>

362
00:16:46,900 --> 00:16:54,699
to the original data so there I I did a

363
00:16:53,140 --> 00:16:57,069
version of this talk<font color="#E5E5E5"> about three years</font>

364
00:16:54,700 --> 00:17:00,250
ago that didn't include a lot<font color="#CCCCCC"> of the</font>

365
00:16:57,070 --> 00:17:02,320
stuff I'm talking about<font color="#E5E5E5"> today where I</font>

366
00:17:00,250 --> 00:17:04,660
said<font color="#E5E5E5"> I have no</font><font color="#CCCCCC"> idea how to make a</font>

367
00:17:02,320 --> 00:17:06,130
polyglot with truecrypt and anything

368
00:17:04,660 --> 00:17:08,680
else because it's<font color="#CCCCCC"> just an encrypted blob</font>

369
00:17:06,130 --> 00:17:11,230
<font color="#CCCCCC">with data but as it turns out if you do</font>

370
00:17:08,680 --> 00:17:16,150
it<font color="#E5E5E5"> in the right way you can take some</font>

371
00:17:11,230 --> 00:17:19,480
data and decrypt it using the key you're

372
00:17:16,150 --> 00:17:21,339
using for<font color="#CCCCCC"> truecrypt and then put that in</font>

373
00:17:19,480 --> 00:17:23,650
a TrueCrypt volume and when it encrypts

374
00:17:21,339 --> 00:17:26,649
the data goes back to the plain text

375
00:17:23,650 --> 00:17:28,180
that you decrypt it earlier and<font color="#E5E5E5"> so it's</font>

376
00:17:26,650 --> 00:17:31,540
a tiny<font color="#E5E5E5"> bit more complicated than I'm</font>

377
00:17:28,180 --> 00:17:32,920
letting on here but<font color="#E5E5E5"> mr.</font><font color="#CCCCCC"> Albertini does a</font>

378
00:17:31,540 --> 00:17:35,020
very good job of explaining it so if

379
00:17:32,920 --> 00:17:36,640
you're interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that you can take a</font>

380
00:17:35,020 --> 00:17:41,139
look<font color="#E5E5E5"> at that but it is actually possible</font>

381
00:17:36,640 --> 00:17:42,790
to put arbitrary content in<font color="#CCCCCC"> truecrypt</font>

382
00:17:41,140 --> 00:17:45,220
files as long as you don't care about

383
00:17:42,790 --> 00:17:48,970
like you know that particular part of

384
00:17:45,220 --> 00:17:51,700
the vault the TrueCrypt volume so it has

385
00:17:48,970 --> 00:17:53,260
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know it's two meanings where it it's</font>

386
00:17:51,700 --> 00:17:55,990
got you know some special meaning

387
00:17:53,260 --> 00:17:59,320
because you've got I don't know an image

388
00:17:55,990 --> 00:18:01,510
or an archive in<font color="#CCCCCC"> the encrypted data and</font>

389
00:17:59,320 --> 00:18:02,889
then when decrypted it decrypts to a

390
00:18:01,510 --> 00:18:05,710
file system you

391
00:18:02,890 --> 00:18:09,940
have a chunk a block of you know garbage

392
00:18:05,710 --> 00:18:13,210
data at some point there but anyway then

393
00:18:09,940 --> 00:18:16,570
you have various protocols are are very

394
00:18:13,210 --> 00:18:19,390
tolerant of syntax errors so smtp is one

395
00:18:16,570 --> 00:18:24,669
of them if you've ever done the sort of

396
00:18:19,390 --> 00:18:27,370
hacking 101 exercise of tell netting to

397
00:18:24,670 --> 00:18:30,130
an<font color="#CCCCCC"> smtp server and sending mail manually</font>

398
00:18:27,370 --> 00:18:32,649
to spoof the sending address you know

399
00:18:30,130 --> 00:18:34,240
<font color="#CCCCCC">that if you type something wrong it's</font>

400
00:18:32,650 --> 00:18:36,100
<font color="#E5E5E5">not going to give you a hard time about</font>

401
00:18:34,240 --> 00:18:39,700
it it's probably<font color="#E5E5E5"> just</font><font color="#CCCCCC"> going to say uh</font>

402
00:18:36,100 --> 00:18:41,050
<font color="#CCCCCC">just just try again you're good and this</font>

403
00:18:39,700 --> 00:18:42,790
is interesting for cross protocol

404
00:18:41,050 --> 00:18:48,220
exploitation which which we'll discuss

405
00:18:42,790 --> 00:18:52,899
momentarily so some real world examples

406
00:18:48,220 --> 00:18:55,540
of using polyglots for attacks or for

407
00:18:52,900 --> 00:18:58,000
other interesting things so Jafar that's

408
00:18:55,540 --> 00:19:03,639
an interesting one so basically a jiff

409
00:18:58,000 --> 00:19:06,790
Jafar file is a hybrid gif and jar file

410
00:19:03,640 --> 00:19:09,010
and as it turns out the way<font color="#CCCCCC"> that the</font>

411
00:19:06,790 --> 00:19:11,170
Java plug-in and browsers work is that

412
00:19:09,010 --> 00:19:13,150
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that your browser pulled down</font>

413
00:19:11,170 --> 00:19:15,430
it would look at it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> say is this a</font>

414
00:19:13,150 --> 00:19:18,790
jar as if so<font color="#E5E5E5"> I'm going to execute it</font>

415
00:19:15,430 --> 00:19:20,740
which is<font color="#CCCCCC"> like a horribly stupid thing to</font>

416
00:19:18,790 --> 00:19:23,889
do but apparently this is what was

417
00:19:20,740 --> 00:19:26,110
happening so if you<font color="#E5E5E5"> had a jiff file</font>

418
00:19:23,890 --> 00:19:28,690
which was<font color="#E5E5E5"> also a jar and it was loaded</font>

419
00:19:26,110 --> 00:19:30,280
<font color="#CCCCCC">by some HTML content your browser would</font>

420
00:19:28,690 --> 00:19:33,490
pull it down<font color="#CCCCCC"> and display it and Java</font>

421
00:19:30,280 --> 00:19:35,260
would be like I'm gonna<font color="#E5E5E5"> run this so you</font>

422
00:19:33,490 --> 00:19:36,940
could<font color="#E5E5E5"> just you know it's when somebody</font>

423
00:19:35,260 --> 00:19:40,210
visits an arbitrary web page you would

424
00:19:36,940 --> 00:19:43,870
have them run a jar of<font color="#E5E5E5"> your choice and</font>

425
00:19:40,210 --> 00:19:46,090
this was this is<font color="#E5E5E5"> really bad but it's</font>

426
00:19:43,870 --> 00:19:47,139
been fixed now so this<font color="#CCCCCC"> is no longer a</font>

427
00:19:46,090 --> 00:19:50,709
problem but it was a<font color="#E5E5E5"> very interesting</font>

428
00:19:47,140 --> 00:19:54,540
attack involving file polyglots one

429
00:19:50,710 --> 00:19:57,220
thing that I've seen on fortune they

430
00:19:54,540 --> 00:19:59,290
4chan has since fixed this i'm not sure

431
00:19:57,220 --> 00:20:01,330
what their fix was exactly but it used

432
00:19:59,290 --> 00:20:04,570
to be possible to append a RAR to the

433
00:20:01,330 --> 00:20:08,530
end of the<font color="#E5E5E5"> jpeg and then upload this to</font>

434
00:20:04,570 --> 00:20:11,530
4chan and the RAR would remain intact

435
00:20:08,530 --> 00:20:15,960
and so what people were doing with this

436
00:20:11,530 --> 00:20:18,149
would be they would take a book PDF of

437
00:20:15,960 --> 00:20:20,880
whatever stick it<font color="#E5E5E5"> in a row or archive</font>

438
00:20:18,150 --> 00:20:23,700
append it to an image of the book's

439
00:20:20,880 --> 00:20:25,890
cover and then upload<font color="#CCCCCC"> it in a thread and</font>

440
00:20:23,700 --> 00:20:28,200
people who knew it was going on could

441
00:20:25,890 --> 00:20:31,440
download all these images extracted in

442
00:20:28,200 --> 00:20:33,600
their favorite<font color="#CCCCCC"> rara archiver and have a</font>

443
00:20:31,440 --> 00:20:36,540
copy of the book so people were just

444
00:20:33,600 --> 00:20:38,790
sharing books on fortune I a bit weird

445
00:20:36,540 --> 00:20:41,879
you<font color="#E5E5E5"> know what people mostly think of in</font>

446
00:20:38,790 --> 00:20:47,190
4chan is not like you<font color="#CCCCCC"> know people</font>

447
00:20:41,880 --> 00:20:49,410
reading books so but yeah right so it's

448
00:20:47,190 --> 00:20:51,120
a I mean there were definitely other

449
00:20:49,410 --> 00:20:52,590
things<font color="#E5E5E5"> that were distributed through</font>

450
00:20:51,120 --> 00:20:56,219
that method but one of the more popular

451
00:20:52,590 --> 00:20:59,580
ones when the more like at least

452
00:20:56,220 --> 00:21:01,920
outwardly seen ones was a 4chan book

453
00:20:59,580 --> 00:21:03,480
sharing threads there is an interesting

454
00:21:01,920 --> 00:21:05,820
attack that came out lately called

455
00:21:03,480 --> 00:21:09,990
<font color="#E5E5E5">Rosetta flash Rosetta flash is a tool</font>

456
00:21:05,820 --> 00:21:12,179
that takes flash files and turns them

457
00:21:09,990 --> 00:21:15,480
into alphanumeric versions of themselves

458
00:21:12,180 --> 00:21:18,710
and this is interesting because you<font color="#E5E5E5"> can</font>

459
00:21:15,480 --> 00:21:22,530
use any alphanumeric string as a

460
00:21:18,710 --> 00:21:26,220
callback name to<font color="#E5E5E5"> JSON p endpoints when</font>

461
00:21:22,530 --> 00:21:27,570
you get when you request a flash object

462
00:21:26,220 --> 00:21:32,430
when you embed a flash object from

463
00:21:27,570 --> 00:21:34,620
another domain into your HTML that will

464
00:21:32,430 --> 00:21:38,970
actually there's a exception for the

465
00:21:34,620 --> 00:21:42,360
same origin policy so effectively flash

466
00:21:38,970 --> 00:21:47,700
if you could put<font color="#E5E5E5"> an arbitrary flash file</font>

467
00:21:42,360 --> 00:21:51,860
on some domain and load it from you know

468
00:21:47,700 --> 00:21:55,940
domain a or whatever you could

469
00:21:51,860 --> 00:21:58,649
effectively get<font color="#E5E5E5"> the impact of XSS arm</font>

470
00:21:55,940 --> 00:22:01,740
but the idea was you know people were

471
00:21:58,650 --> 00:22:04,800
thinking you can't make a an

472
00:22:01,740 --> 00:22:07,830
alphanumeric flash file and somebody

473
00:22:04,800 --> 00:22:10,440
found out actually<font color="#CCCCCC"> you can so he made</font>

474
00:22:07,830 --> 00:22:13,379
this is<font color="#CCCCCC"> a this</font><font color="#E5E5E5"> is sort of a polyglot</font>

475
00:22:10,440 --> 00:22:17,820
attack because essentially you're you

476
00:22:13,380 --> 00:22:20,580
have a you know a format for a callback

477
00:22:17,820 --> 00:22:22,980
name you know a<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> function name</font>

478
00:22:20,580 --> 00:22:25,500
and it also happens to be a valid flash

479
00:22:22,980 --> 00:22:26,940
file and it turns out that the stuff

480
00:22:25,500 --> 00:22:30,450
appended to the end of<font color="#E5E5E5"> that callback</font>

481
00:22:26,940 --> 00:22:32,530
name didn't really matter with flash so

482
00:22:30,450 --> 00:22:34,419
essentially<font color="#E5E5E5"> what you could do with any</font>

483
00:22:32,530 --> 00:22:38,500
JSON<font color="#CCCCCC"> PN point</font><font color="#E5E5E5"> that hasn't been patched</font>

484
00:22:34,419 --> 00:22:40,570
against this is to use a callback name

485
00:22:38,500 --> 00:22:42,490
of the flash file and then you know

486
00:22:40,570 --> 00:22:44,080
reference this as a flash object and

487
00:22:42,490 --> 00:22:46,090
then you would have essentially be able

488
00:22:44,080 --> 00:22:49,120
to interact with anybody's session on

489
00:22:46,090 --> 00:22:51,280
that site through through flash so

490
00:22:49,120 --> 00:22:53,379
interesting stuff there there's this

491
00:22:51,280 --> 00:22:56,530
thing called cross protocol exploitation

492
00:22:53,380 --> 00:22:58,390
which is kind of like confused deputy

493
00:22:56,530 --> 00:23:02,110
deputy attack if you're familiar with

494
00:22:58,390 --> 00:23:03,429
cross-site request forgery imagine<font color="#CCCCCC"> that</font>

495
00:23:02,110 --> 00:23:07,000
you're<font color="#E5E5E5"> doing cross-site request forgery</font>

496
00:23:03,429 --> 00:23:08,860
but with smtp so you know somebody's on

497
00:23:07,000 --> 00:23:12,850
an internal network that can reach an

498
00:23:08,860 --> 00:23:16,449
SMTP server and you know do whatever

499
00:23:12,850 --> 00:23:19,270
with it sends send mail and so you get

500
00:23:16,450 --> 00:23:23,799
them to you know click<font color="#E5E5E5"> on a link which</font>

501
00:23:19,270 --> 00:23:28,270
auto submits a form to whatever port 25

502
00:23:23,799 --> 00:23:30,908
so smtp gets you know get whatever HTTP

503
00:23:28,270 --> 00:23:33,250
one dot one and it goes yeah that's not

504
00:23:30,909 --> 00:23:35,140
<font color="#E5E5E5">a command</font><font color="#CCCCCC"> I know host whatever that's</font>

505
00:23:33,250 --> 00:23:36,820
dude that's not a command I know goes

506
00:23:35,140 --> 00:23:38,559
through<font color="#CCCCCC"> all the headers and you knows</font>

507
00:23:36,820 --> 00:23:41,230
smtp like I am I going<font color="#E5E5E5"> to get real</font>

508
00:23:38,559 --> 00:23:43,809
commands anytime soon and then all of a

509
00:23:41,230 --> 00:23:47,440
<font color="#CCCCCC">sudden it gets in the</font><font color="#E5E5E5"> post body mail</font>

510
00:23:43,809 --> 00:23:50,049
from<font color="#E5E5E5"> yadda yadda recipient to</font><font color="#CCCCCC"> yada yada</font>

511
00:23:47,440 --> 00:23:52,210
and<font color="#E5E5E5"> so with cross-site request forgery</font>

512
00:23:50,049 --> 00:23:55,990
it used to be possible to get people to

513
00:23:52,210 --> 00:23:58,990
send mail via smtp so you can<font color="#E5E5E5"> get other</font>

514
00:23:55,990 --> 00:24:01,870
people to send mail the<font color="#CCCCCC"> smtp using an</font>

515
00:23:58,990 --> 00:24:05,320
HTTP request that could also be Rick

516
00:24:01,870 --> 00:24:09,100
seen as valid smtp after all the header

517
00:24:05,320 --> 00:24:12,418
junk right so the fixer this in modern

518
00:24:09,100 --> 00:24:17,860
browsers is to block like requests to

519
00:24:12,419 --> 00:24:24,010
various ports 25 included and so that's

520
00:24:17,860 --> 00:24:30,449
fun stuff<font color="#E5E5E5"> so so but that's example of</font>

521
00:24:24,010 --> 00:24:33,908
like an HTTP SMTP polyglot so we have

522
00:24:30,450 --> 00:24:37,929
PHP<font color="#CCCCCC"> jpg image upload attacks some image</font>

523
00:24:33,909 --> 00:24:39,460
uploaders will be vulnerable to<font color="#E5E5E5"> attack</font>

524
00:24:37,929 --> 00:24:42,399
they'll they'll upload within the<font color="#E5E5E5"> web</font>

525
00:24:39,460 --> 00:24:43,870
server with whatever name you want but

526
00:24:42,399 --> 00:24:47,229
all they do is check to see that

527
00:24:43,870 --> 00:24:48,610
a valid jpg or valid image and

528
00:24:47,230 --> 00:24:51,250
<font color="#E5E5E5">considering</font><font color="#CCCCCC"> that we can make something</font>

529
00:24:48,610 --> 00:24:53,620
that is both a valid jpg and a<font color="#E5E5E5"> valid PHP</font>

530
00:24:51,250 --> 00:24:57,520
script we can get<font color="#E5E5E5"> around this limitation</font>

531
00:24:53,620 --> 00:25:01,260
by uploading a PHP<font color="#E5E5E5"> jpg polygon with the</font>

532
00:24:57,520 --> 00:25:03,790
name whatever<font color="#E5E5E5"> dhadke HP so that's fun</font>

533
00:25:01,260 --> 00:25:06,670
multi architecture shellcode there is an

534
00:25:03,790 --> 00:25:09,870
interesting<font color="#E5E5E5"> challenge in the DEFCON CTF</font>

535
00:25:06,670 --> 00:25:12,970
balls this year where<font color="#E5E5E5"> you had</font><font color="#CCCCCC"> to make a</font>

536
00:25:09,870 --> 00:25:14,649
piece of shell code that executed and

537
00:25:12,970 --> 00:25:16,809
did the<font color="#CCCCCC"> same thing on something like</font>

538
00:25:14,650 --> 00:25:21,730
four different architectures so it was

539
00:25:16,809 --> 00:25:23,110
like x86 PowerPC arm and one other thing

540
00:25:21,730 --> 00:25:25,300
I<font color="#E5E5E5"> came in but it might've been sparked</font>

541
00:25:23,110 --> 00:25:28,090
but anyway this was possible you know

542
00:25:25,300 --> 00:25:31,720
you can you<font color="#E5E5E5"> basically have a prelude to</font>

543
00:25:28,090 --> 00:25:34,059
<font color="#E5E5E5">the shell code that will branch to</font>

544
00:25:31,720 --> 00:25:37,500
different locations in the<font color="#E5E5E5"> shell code</font>

545
00:25:34,059 --> 00:25:40,928
and execute depending on<font color="#E5E5E5"> what the</font>

546
00:25:37,500 --> 00:25:43,120
<font color="#E5E5E5">architecture was so the the data would</font>

547
00:25:40,929 --> 00:25:44,920
have different meanings that the opcodes

548
00:25:43,120 --> 00:25:46,209
would be different and would do

549
00:25:44,920 --> 00:25:48,160
different things under different

550
00:25:46,210 --> 00:25:50,050
architectures so you had branched a

551
00:25:48,160 --> 00:25:51,940
certain parts of the<font color="#CCCCCC"> shellcode and then</font>

552
00:25:50,050 --> 00:25:54,790
it would<font color="#CCCCCC"> be you know valid shell code</font>

553
00:25:51,940 --> 00:25:56,350
for<font color="#E5E5E5"> that architecture so it was that was</font>

554
00:25:54,790 --> 00:25:58,570
at<font color="#E5E5E5"> least the solution that I'd seen and</font>

555
00:25:56,350 --> 00:26:01,330
<font color="#E5E5E5">I thought that was very clever but it's</font>

556
00:25:58,570 --> 00:26:03,550
an example<font color="#E5E5E5"> of a shellcode a machine code</font>

557
00:26:01,330 --> 00:26:06,159
polyglot where it's you know speaking

558
00:26:03,550 --> 00:26:07,720
<font color="#E5E5E5">different architecture language so and</font>

559
00:26:06,160 --> 00:26:09,010
then you have multi<font color="#E5E5E5"> flaw of fuzzing</font>

560
00:26:07,720 --> 00:26:11,170
payloads and I think it would be

561
00:26:09,010 --> 00:26:15,400
<font color="#E5E5E5">probably a bit quicker just to show you</font>

562
00:26:11,170 --> 00:26:16,990
this which<font color="#E5E5E5"> I will do in a moment so some</font>

563
00:26:15,400 --> 00:26:20,230
practical applications of polyglot

564
00:26:16,990 --> 00:26:22,559
attacks you have you know waffe you have

565
00:26:20,230 --> 00:26:28,540
impedance mismatches where you could

566
00:26:22,559 --> 00:26:32,260
bypass some some something<font color="#E5E5E5"> so let's say</font>

567
00:26:28,540 --> 00:26:35,770
<font color="#CCCCCC">that you were let's</font><font color="#E5E5E5"> say that you had</font>

568
00:26:32,260 --> 00:26:38,640
some AV that was looking at every file

569
00:26:35,770 --> 00:26:45,100
that was uploaded somewhere and you made

570
00:26:38,640 --> 00:26:49,630
an XE / jpg polyglot where the JPEG

571
00:26:45,100 --> 00:26:52,360
signature came first to save cycles to

572
00:26:49,630 --> 00:26:55,000
save time antivirus engines will

573
00:26:52,360 --> 00:26:57,330
generally use magic numbers to determine

574
00:26:55,000 --> 00:27:01,110
what type of file something is

575
00:26:57,330 --> 00:27:04,290
then look at attacks that look at

576
00:27:01,110 --> 00:27:06,899
various malware that is in that format

577
00:27:04,290 --> 00:27:09,990
so<font color="#E5E5E5"> you might be able to evade detection</font>

578
00:27:06,900 --> 00:27:12,530
by making a polyglot something like that

579
00:27:09,990 --> 00:27:16,050
covert channels of course<font color="#E5E5E5"> there is huge</font>

580
00:27:12,530 --> 00:27:18,870
huge potential for covert channels you

581
00:27:16,050 --> 00:27:21,240
know if you wanted to<font color="#E5E5E5"> send a</font><font color="#CCCCCC"> message to</font>

582
00:27:18,870 --> 00:27:23,790
somebody you could just send<font color="#E5E5E5"> them a</font>

583
00:27:21,240 --> 00:27:26,220
picture of like you know vacate you know

584
00:27:23,790 --> 00:27:27,840
a set of vacation pictures where you've

585
00:27:26,220 --> 00:27:30,120
added a ping chunk or you know just

586
00:27:27,840 --> 00:27:32,459
appended to the end of the file some bit

587
00:27:30,120 --> 00:27:35,520
<font color="#CCCCCC">of data and you know without close</font>

588
00:27:32,460 --> 00:27:38,040
inspection you would just see vacation

589
00:27:35,520 --> 00:27:39,990
<font color="#E5E5E5">pictures but if you then you know deep</font>

590
00:27:38,040 --> 00:27:43,040
look deeper at the files you<font color="#E5E5E5"> would see</font>

591
00:27:39,990 --> 00:27:47,250
some covert communication potentially

592
00:27:43,040 --> 00:27:51,210
parasitic storage so one thing<font color="#CCCCCC"> that you</font>

593
00:27:47,250 --> 00:27:53,010
<font color="#E5E5E5">can do</font><font color="#CCCCCC"> with this so here here's</font>

594
00:27:51,210 --> 00:27:56,250
something really<font color="#E5E5E5"> funny a lot of image</font>

595
00:27:53,010 --> 00:27:58,830
uploaders will limit the size of the

596
00:27:56,250 --> 00:28:01,020
file you<font color="#E5E5E5"> upload not by the size of the</font>

597
00:27:58,830 --> 00:28:03,689
file itself but by the dimensions of the

598
00:28:01,020 --> 00:28:06,720
image so if you have an image uploader

599
00:28:03,690 --> 00:28:09,000
that you want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use for</font><font color="#E5E5E5"> disk space</font>

600
00:28:06,720 --> 00:28:12,330
exhaustion a disk space exhaustion

601
00:28:09,000 --> 00:28:13,890
denial of service attack you could and

602
00:28:12,330 --> 00:28:17,639
let's say it only allowed you to upload

603
00:28:13,890 --> 00:28:19,890
like 30 by 30 thumbnail JPEGs right so

604
00:28:17,640 --> 00:28:22,410
you would upload a<font color="#E5E5E5"> JPEG that was 30 by</font>

605
00:28:19,890 --> 00:28:25,320
30 but then you would upend like you

606
00:28:22,410 --> 00:28:28,920
know a copy of the latest ubuntu iso

607
00:28:25,320 --> 00:28:31,020
onto the end of onto the<font color="#E5E5E5"> end of your 30</font>

608
00:28:28,920 --> 00:28:33,270
by 30<font color="#E5E5E5"> jpeg and it would</font><font color="#CCCCCC"> be like oh yeah</font>

609
00:28:31,020 --> 00:28:36,270
<font color="#CCCCCC">this is 30 by 30 that's cool i'll store</font>

610
00:28:33,270 --> 00:28:40,620
this thank you three more of those in

611
00:28:36,270 --> 00:28:43,680
all be fault so<font color="#E5E5E5"> so yeah parasitic</font>

612
00:28:40,620 --> 00:28:47,659
storage but<font color="#E5E5E5"> you could also you know have</font>

613
00:28:43,680 --> 00:28:50,070
just like a whole big archive of of

614
00:28:47,660 --> 00:28:51,600
pirated movies or something like that

615
00:28:50,070 --> 00:28:54,929
and you wanted to<font color="#E5E5E5"> store them somewhere</font>

616
00:28:51,600 --> 00:28:57,060
so<font color="#CCCCCC"> you make a forum account on some</font>

617
00:28:54,930 --> 00:29:01,100
place that only allows you know 30<font color="#E5E5E5"> by 30</font>

618
00:28:57,060 --> 00:29:04,470
avatars and you tack on a big archive of

619
00:29:01,100 --> 00:29:07,409
I don't<font color="#CCCCCC"> know whatever whatever</font><font color="#E5E5E5"> you want</font>

620
00:29:04,470 --> 00:29:09,630
to store you store that you know on in

621
00:29:07,410 --> 00:29:10,310
this JPEG upload it the system<font color="#E5E5E5"> accept it</font>

622
00:29:09,630 --> 00:29:12,290
and then

623
00:29:10,310 --> 00:29:15,050
you want to<font color="#E5E5E5"> get it you grab this image</font>

624
00:29:12,290 --> 00:29:20,379
and you know people<font color="#E5E5E5"> wonder why your</font>

625
00:29:15,050 --> 00:29:24,669
avatar loads really<font color="#E5E5E5"> really slowly so</font>

626
00:29:20,380 --> 00:29:26,810
anyway so<font color="#CCCCCC"> confuse deputy attacks as well</font>

627
00:29:24,670 --> 00:29:30,200
you know so we talked about cross step

628
00:29:26,810 --> 00:29:34,310
cross protocol exploitation so basically

629
00:29:30,200 --> 00:29:36,620
getting any privileged system or person

630
00:29:34,310 --> 00:29:38,720
to do something<font color="#CCCCCC"> for you when they really</font>

631
00:29:36,620 --> 00:29:40,580
shouldn't be that's<font color="#E5E5E5"> called a confused</font>

632
00:29:38,720 --> 00:29:43,730
deputy attack so cross-site request

633
00:29:40,580 --> 00:29:45,439
forgery clickjacking and the associated

634
00:29:43,730 --> 00:29:49,910
stroke jacking which by the<font color="#E5E5E5"> way I love</font>

635
00:29:45,440 --> 00:29:51,860
<font color="#CCCCCC">the name of you know across protocol</font>

636
00:29:49,910 --> 00:29:54,080
exploitation attacks things like that

637
00:29:51,860 --> 00:29:56,120
those are<font color="#E5E5E5"> all confused deputy attacks</font>

638
00:29:54,080 --> 00:29:57,949
and there is definitely some some

639
00:29:56,120 --> 00:30:00,530
potential there for confused deputy

640
00:29:57,950 --> 00:30:02,060
attacks using polyglots so<font color="#E5E5E5"> I want to</font>

641
00:30:00,530 --> 00:30:03,320
<font color="#CCCCCC">give a thank you before we go to the</font>

642
00:30:02,060 --> 00:30:06,260
demonstration portion and I show<font color="#E5E5E5"> you</font>

643
00:30:03,320 --> 00:30:08,210
some examples of polyglots I want to

644
00:30:06,260 --> 00:30:11,500
<font color="#CCCCCC">thank a couple people for their research</font>

645
00:30:08,210 --> 00:30:14,540
into this field I'm mention angle bikini

646
00:30:11,500 --> 00:30:16,520
previously fantastic dude doing<font color="#E5E5E5"> amazing</font>

647
00:30:14,540 --> 00:30:19,250
research so thank you thank you mr.

648
00:30:16,520 --> 00:30:22,340
<font color="#CCCCCC">albertini Nathan McPheeters was one who</font>

649
00:30:19,250 --> 00:30:24,440
discovered the<font color="#CCCCCC"> jafar problem micheli</font>

650
00:30:22,340 --> 00:30:25,879
spagnolo I'm hoping I'm saying his last

651
00:30:24,440 --> 00:30:27,350
name right<font color="#E5E5E5"> I know I got the first one</font>

652
00:30:25,880 --> 00:30:29,060
right because I used<font color="#E5E5E5"> to work with a guy</font>

653
00:30:27,350 --> 00:30:31,879
named Mikhail a lot of people<font color="#E5E5E5"> called a</font>

654
00:30:29,060 --> 00:30:34,460
Michelle he didn't really<font color="#E5E5E5"> like that he</font>

655
00:30:31,880 --> 00:30:35,990
did came up with<font color="#CCCCCC"> rosetta flash and i'd</font>

656
00:30:34,460 --> 00:30:41,780
also<font color="#E5E5E5"> like to thank travis good speed and</font>

657
00:30:35,990 --> 00:30:43,670
<font color="#CCCCCC">Sergey brought us for POC or GTFO where</font>

658
00:30:41,780 --> 00:30:46,550
they've been showcasing a lot of

659
00:30:43,670 --> 00:30:48,980
polyglot work and related related

660
00:30:46,550 --> 00:30:51,820
research so it's a great platform for

661
00:30:48,980 --> 00:30:54,680
that and it's<font color="#CCCCCC"> very interesting stuff so</font>

662
00:30:51,820 --> 00:30:56,450
there goes the slide present the slide

663
00:30:54,680 --> 00:31:00,020
part of the presentation and I'm going

664
00:30:56,450 --> 00:31:04,040
to continue<font color="#E5E5E5"> just by showing you a couple</font>

665
00:31:00,020 --> 00:31:06,650
neat little things here so here is an

666
00:31:04,040 --> 00:31:13,960
image of a cute little dinosaur saying

667
00:31:06,650 --> 00:31:19,130
rawr and if I then open this image up

668
00:31:13,960 --> 00:31:21,810
with winrar<font color="#E5E5E5"> I have a copy of the image</font>

669
00:31:19,130 --> 00:31:30,610
in an archive embedded in this image

670
00:31:21,810 --> 00:31:36,070
so so that's kind of fun whew we need to

671
00:31:30,610 --> 00:31:39,879
go deeper so here i have an HTML file it

672
00:31:36,070 --> 00:31:45,960
just says this is a RAR and if we<font color="#CCCCCC"> take a</font>

673
00:31:39,880 --> 00:31:49,780
<font color="#E5E5E5">look into the source we see here the the</font>

674
00:31:45,960 --> 00:31:52,450
<font color="#CCCCCC">raw header and you can see that</font><font color="#E5E5E5"> this is</font>

675
00:31:49,780 --> 00:31:56,320
embedded in an HTML comment so when we

676
00:31:52,450 --> 00:32:02,740
look at it it's just you<font color="#CCCCCC"> know nothing</font>

677
00:31:56,320 --> 00:32:08,710
but as it turns out here we go we have

678
00:32:02,740 --> 00:32:13,420
our raw or jpeg in there again so here's

679
00:32:08,710 --> 00:32:17,530
an image of the PHP logo and this is not

680
00:32:13,420 --> 00:32:23,620
also a<font color="#E5E5E5"> RAR but if we take a look at this</font>

681
00:32:17,530 --> 00:32:33,520
in a hex editor we can see it is a PhD

682
00:32:23,620 --> 00:32:37,120
back door and<font color="#E5E5E5"> finally here's something a</font>

683
00:32:33,520 --> 00:32:40,900
little bit interesting this is a payload

684
00:32:37,120 --> 00:32:45,280
which is both a<font color="#E5E5E5"> proof of concept XSS</font>

685
00:32:40,900 --> 00:32:47,740
payload OS command and os command

686
00:32:45,280 --> 00:32:51,070
injection payload and sequel injection

687
00:32:47,740 --> 00:32:53,170
payload so in a sequel injection

688
00:32:51,070 --> 00:32:55,149
scenario all of this<font color="#E5E5E5"> would be</font>

689
00:32:53,170 --> 00:32:56,740
interpreted<font color="#E5E5E5"> as a string and then this</font>

690
00:32:55,150 --> 00:32:59,550
would<font color="#E5E5E5"> break out of the string and drop</font>

691
00:32:56,740 --> 00:33:02,650
table polyglots in the case of

692
00:32:59,550 --> 00:33:04,120
cross-site scripting this would<font color="#CCCCCC"> be</font>

693
00:33:02,650 --> 00:33:05,830
interpreted<font color="#E5E5E5"> as scripting because it's</font>

694
00:33:04,120 --> 00:33:07,419
within script tags and<font color="#CCCCCC"> the rest will be</font>

695
00:33:05,830 --> 00:33:11,560
ignored<font color="#E5E5E5"> because it's not with any any</font>

696
00:33:07,420 --> 00:33:13,150
tags possibly and then with OS command

697
00:33:11,560 --> 00:33:15,970
injection we have vac<font color="#CCCCCC"> ticks or a</font>

698
00:33:13,150 --> 00:33:19,320
backtick surrounded OS command that will

699
00:33:15,970 --> 00:33:22,480
sleep for<font color="#E5E5E5"> five seconds so this is an XSS</font>

700
00:33:19,320 --> 00:33:27,070
SQL injection OS command and injection

701
00:33:22,480 --> 00:33:32,080
polyglot if if<font color="#E5E5E5"> Amazon makes their own</font>

702
00:33:27,070 --> 00:33:34,689
ebooks or rather if if you provide

703
00:33:32,080 --> 00:33:35,830
ebooks to Amazon as opposed to them

704
00:33:34,690 --> 00:33:39,399
creating their own

705
00:33:35,830 --> 00:33:41,289
your content I could see polyglots being

706
00:33:39,399 --> 00:33:43,149
used for parasitic storage although that

707
00:33:41,289 --> 00:33:46,620
would be<font color="#E5E5E5"> a bit of a high barrier to</font>

708
00:33:43,149 --> 00:33:49,029
entry like I'll just<font color="#E5E5E5"> write a book I</font>

709
00:33:46,620 --> 00:33:50,949
really I don't<font color="#E5E5E5"> want to store all this</font>

710
00:33:49,029 --> 00:33:52,840
this I don't want to store all these

711
00:33:50,950 --> 00:33:57,730
wares on my own machines I'll just write

712
00:33:52,840 --> 00:34:02,649
a book<font color="#CCCCCC"> letters yeah yeah how does store</font>

713
00:33:57,730 --> 00:34:07,210
where beautiful I like it I like it so

714
00:34:02,649 --> 00:34:09,759
for the most part the parsing needs to

715
00:34:07,210 --> 00:34:13,139
be done in a deliberate way you know

716
00:34:09,760 --> 00:34:15,909
there's there needs to be some sort of

717
00:34:13,139 --> 00:34:17,859
you know so like with the parasitic

718
00:34:15,909 --> 00:34:20,710
storage you know to open it with winrar

719
00:34:17,859 --> 00:34:25,299
as opposed to some image loading thing

720
00:34:20,710 --> 00:34:27,849
but short of problems like Jafar I can't

721
00:34:25,300 --> 00:34:31,510
really see polyglots being used to

722
00:34:27,849 --> 00:34:35,500
attack users so much in the case of like

723
00:34:31,510 --> 00:34:38,169
the PHP<font color="#CCCCCC"> jpeg web shell there's a sort of</font>

724
00:34:35,500 --> 00:34:41,109
a deliberate mismatch because you're

725
00:34:38,168 --> 00:34:43,118
uploading is it as a PHP so the script

726
00:34:41,109 --> 00:34:45,159
is expecting a JPEG and parses it like a

727
00:34:43,119 --> 00:34:47,649
<font color="#E5E5E5">JPEG to ensure</font><font color="#CCCCCC"> that it's what it's</font>

728
00:34:45,159 --> 00:34:50,320
expecting but you know the web server

729
00:34:47,649 --> 00:34:53,190
because it's<font color="#E5E5E5"> got a PHP extension will</font>

730
00:34:50,320 --> 00:34:57,849
parse it as a PHP file so there<font color="#E5E5E5"> is some</font>

731
00:34:53,190 --> 00:35:00,520
malicious parsing like choice parsing

732
00:34:57,849 --> 00:35:02,530
choices going on there some deliberate

733
00:35:00,520 --> 00:35:06,420
choices to make that that second

734
00:35:02,530 --> 00:35:08,619
alternative parts happen but I don't

735
00:35:06,420 --> 00:35:11,380
current I mean don't quote me on this

736
00:35:08,619 --> 00:35:13,150
but I can't be<font color="#CCCCCC"> on something like</font><font color="#E5E5E5"> a Jafar</font>

737
00:35:11,380 --> 00:35:15,369
type of thing I can't honestly think

738
00:35:13,150 --> 00:35:18,599
that opening up and some random image

739
00:35:15,369 --> 00:35:24,640
would open you up to attack so when you

740
00:35:18,599 --> 00:35:29,349
if if you request let's say file dot n

741
00:35:24,640 --> 00:35:32,109
Phi n dot PHP jpg apache is going to

742
00:35:29,349 --> 00:35:35,170
look<font color="#E5E5E5"> at the last the last extension</font>

743
00:35:32,109 --> 00:35:38,348
<font color="#E5E5E5">there jpg and say is this a language is</font>

744
00:35:35,170 --> 00:35:40,630
this a mime type is do I have a handler

745
00:35:38,349 --> 00:35:42,700
for this and it will say<font color="#CCCCCC"> ok mime type</font>

746
00:35:40,630 --> 00:35:45,220
should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> image.jpg when i spit this out</font>

747
00:35:42,700 --> 00:35:47,310
then<font color="#E5E5E5"> it'll</font><font color="#CCCCCC"> go back one and say is this a</font>

748
00:35:45,220 --> 00:35:49,080
language no is this a mime type know Oh

749
00:35:47,310 --> 00:35:51,680
PHP

750
00:35:49,080 --> 00:35:54,720
I should pass this to PHP for parsing

751
00:35:51,680 --> 00:35:58,160
and then it'll<font color="#CCCCCC"> go back up one is</font><font color="#E5E5E5"> this a</font>

752
00:35:54,720 --> 00:36:00,810
language en yes English so in the

753
00:35:58,160 --> 00:36:05,040
language the content language header I'm

754
00:36:00,810 --> 00:36:07,440
going<font color="#E5E5E5"> to put you know n us so it's going</font>

755
00:36:05,040 --> 00:36:12,720
to be spit out with a a Content language

756
00:36:07,440 --> 00:36:15,060
of us english parsed as a PHP file by

757
00:36:12,720 --> 00:36:18,149
PHP in the back end<font color="#E5E5E5"> and then spit out</font>

758
00:36:15,060 --> 00:36:25,049
with a mime type of image jpg does that

759
00:36:18,150 --> 00:36:28,470
make sense sure sure oh we can

760
00:36:25,050 --> 00:36:31,290
definitely<font color="#E5E5E5"> talk later sure it's a fun</font>

761
00:36:28,470 --> 00:36:34,560
little trick it's gotten me past past a

762
00:36:31,290 --> 00:36:38,700
couple barriers in my personal

763
00:36:34,560 --> 00:36:43,830
penetration testing so any other

764
00:36:38,700 --> 00:36:47,660
questions well I think<font color="#E5E5E5"> that's it then</font>

765
00:36:43,830 --> 00:36:47,660
thank you everybody for coming

