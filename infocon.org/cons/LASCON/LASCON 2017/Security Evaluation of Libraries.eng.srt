1
00:00:01,800 --> 00:00:04,870
[Music]

2
00:00:17,790 --> 00:00:26,939
before I begin a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> disclaimer</font>

3
00:00:22,600 --> 00:00:29,619
<font color="#E5E5E5">all the views expressed during the stock</font>

4
00:00:26,940 --> 00:00:32,230
presentation all opinions content has

5
00:00:29,619 --> 00:00:38,140
nothing to<font color="#E5E5E5"> do with my employer or</font>

6
00:00:32,229 --> 00:00:40,330
anybody this solely<font color="#CCCCCC"> belonged to me a</font>

7
00:00:38,140 --> 00:00:42,670
<font color="#E5E5E5">little</font><font color="#CCCCCC"> bit about</font><font color="#E5E5E5"> me</font>

8
00:00:40,330 --> 00:00:44,440
thanks for the short introduction<font color="#E5E5E5"> I am a</font>

9
00:00:42,670 --> 00:00:50,140
senior security technical program

10
00:00:44,440 --> 00:00:53,040
manager and<font color="#E5E5E5"> I mainly manage the</font>

11
00:00:50,140 --> 00:00:57,370
cryptography and application security

12
00:00:53,040 --> 00:00:59,650
program at world's most disruptive<font color="#E5E5E5"> tech</font>

13
00:00:57,370 --> 00:01:01,629
company<font color="#E5E5E5"> sorry I'm not allowed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take</font>

14
00:00:59,650 --> 00:01:02,979
the name you guys can figure it<font color="#E5E5E5"> out</font>

15
00:01:01,629 --> 00:01:05,580
later

16
00:01:02,979 --> 00:01:10,270
my passions are<font color="#E5E5E5"> software security</font>

17
00:01:05,580 --> 00:01:14,200
practical cryptography<font color="#E5E5E5"> and application</font>

18
00:01:10,270 --> 00:01:17,740
security<font color="#E5E5E5"> life cycle management first</font><font color="#CCCCCC"> ten</font>

19
00:01:14,200 --> 00:01:20,049
years<font color="#E5E5E5"> of</font><font color="#CCCCCC"> my life I spent doing</font><font color="#E5E5E5"> lot of</font>

20
00:01:17,740 --> 00:01:22,350
technical security<font color="#E5E5E5"> evaluation and then</font>

21
00:01:20,049 --> 00:01:25,620
<font color="#CCCCCC">realized that</font><font color="#E5E5E5"> security is never about</font>

22
00:01:22,350 --> 00:01:29,380
technical controls it's mainly<font color="#E5E5E5"> about</font>

23
00:01:25,620 --> 00:01:30,940
people and processes<font color="#E5E5E5"> as well so that's</font>

24
00:01:29,380 --> 00:01:34,270
what I do<font color="#E5E5E5"> now</font>

25
00:01:30,940 --> 00:01:36,039
lately I got certified as<font color="#CCCCCC"> a yoga</font>

26
00:01:34,270 --> 00:01:39,070
instructor as well<font color="#E5E5E5"> and I teach</font>

27
00:01:36,040 --> 00:01:44,970
meditation<font color="#E5E5E5"> at a small studio</font><font color="#CCCCCC"> in</font>

28
00:01:39,070 --> 00:01:44,970
Northwest Austin<font color="#E5E5E5"> so that's about me</font>

29
00:01:49,470 --> 00:01:55,770
in today's talk I'm going<font color="#E5E5E5"> to talk about</font>

30
00:01:52,010 --> 00:01:57,870
why we<font color="#E5E5E5"> should evaluate libraries how</font>

31
00:01:55,770 --> 00:02:02,280
libraries are<font color="#E5E5E5"> actually different</font><font color="#CCCCCC"> from</font>

32
00:01:57,870 --> 00:02:05,070
application<font color="#CCCCCC"> then little bit about how we</font>

33
00:02:02,280 --> 00:02:07,470
<font color="#E5E5E5">generally evaluate applications and how</font>

34
00:02:05,070 --> 00:02:11,009
that application<font color="#E5E5E5"> review process</font><font color="#CCCCCC"> is not</font>

35
00:02:07,470 --> 00:02:13,470
applicable to<font color="#E5E5E5"> library then I'm</font><font color="#CCCCCC"> going to</font>

36
00:02:11,009 --> 00:02:16,140
cover at high level<font color="#E5E5E5"> how we should</font>

37
00:02:13,470 --> 00:02:19,050
evaluate libraries<font color="#CCCCCC"> and I have</font><font color="#E5E5E5"> chosen</font>

38
00:02:16,140 --> 00:02:24,359
<font color="#E5E5E5">today our very favorite</font><font color="#CCCCCC"> OpenSSL as an</font>

39
00:02:19,050 --> 00:02:28,770
example so let's begin<font color="#CCCCCC"> how many of you</font>

40
00:02:24,360 --> 00:02:30,810
are developers awesome because this<font color="#E5E5E5"> talk</font>

41
00:02:28,770 --> 00:02:32,550
is<font color="#CCCCCC"> mainly for developers there is</font>

42
00:02:30,810 --> 00:02:34,920
<font color="#E5E5E5">nothing new that</font><font color="#CCCCCC"> a security</font><font color="#E5E5E5"> professional</font>

43
00:02:32,550 --> 00:02:37,530
<font color="#CCCCCC">doesn't know here</font><font color="#E5E5E5"> it's mainly for</font>

44
00:02:34,920 --> 00:02:40,200
developers time has come for developers

45
00:02:37,530 --> 00:02:42,570
<font color="#CCCCCC">to take security in their hand</font><font color="#E5E5E5"> take</font>

46
00:02:40,200 --> 00:02:44,670
complete ownership<font color="#E5E5E5"> of course do consult</font>

47
00:02:42,570 --> 00:02:46,680
your<font color="#E5E5E5"> InfoSec</font><font color="#CCCCCC"> department</font><font color="#E5E5E5"> whenever</font>

48
00:02:44,670 --> 00:02:48,119
necessary<font color="#E5E5E5"> but</font><font color="#CCCCCC"> don't let</font><font color="#E5E5E5"> InfoSec</font>

49
00:02:46,680 --> 00:02:50,430
<font color="#CCCCCC">Department become hindrance in</font>

50
00:02:48,120 --> 00:02:53,280
innovation<font color="#E5E5E5"> because you guys like to run</font>

51
00:02:50,430 --> 00:02:55,950
at a<font color="#CCCCCC"> certain speed</font><font color="#E5E5E5"> how many of here on</font>

52
00:02:53,280 --> 00:02:59,070
the<font color="#E5E5E5"> attack side those who</font><font color="#CCCCCC"> are security</font>

53
00:02:55,950 --> 00:03:02,670
professionals how many of you<font color="#CCCCCC"> are on the</font>

54
00:02:59,070 --> 00:03:09,480
defense side how<font color="#E5E5E5"> many of you do</font>

55
00:03:02,670 --> 00:03:11,429
<font color="#E5E5E5">everything awesome</font><font color="#CCCCCC"> so you know what I</font>

56
00:03:09,480 --> 00:03:14,760
have seen in my<font color="#E5E5E5"> last</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> years of career</font>

57
00:03:11,430 --> 00:03:17,850
is there is so much<font color="#CCCCCC"> focus on application</font>

58
00:03:14,760 --> 00:03:22,829
<font color="#E5E5E5">penta spent as we scan out of</font>

59
00:03:17,850 --> 00:03:24,989
application<font color="#E5E5E5"> but what we really don't</font><font color="#CCCCCC"> for</font>

60
00:03:22,830 --> 00:03:27,570
every single<font color="#E5E5E5"> release we have to run it</font>

61
00:03:24,989 --> 00:03:29,550
<font color="#CCCCCC">through scanner right</font><font color="#E5E5E5"> that gives us so</font>

62
00:03:27,570 --> 00:03:31,829
much false sense of security<font color="#CCCCCC"> do we</font>

63
00:03:29,550 --> 00:03:34,080
really think<font color="#CCCCCC"> that security</font><font color="#E5E5E5"> just scanning</font>

64
00:03:31,830 --> 00:03:36,959
<font color="#E5E5E5">your application bunch of times getting</font>

65
00:03:34,080 --> 00:03:42,480
<font color="#E5E5E5">it pen tested by your own red team or</font>

66
00:03:36,959 --> 00:03:44,880
external yeah they do find creative you

67
00:03:42,480 --> 00:03:47,970
know<font color="#E5E5E5"> flaws in our application</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font>

68
00:03:44,880 --> 00:03:50,459
that really<font color="#E5E5E5"> security I know there is no</font>

69
00:03:47,970 --> 00:03:52,920
such thing as<font color="#CCCCCC"> 100% security just the way</font>

70
00:03:50,459 --> 00:03:55,800
there is<font color="#E5E5E5"> no</font><font color="#CCCCCC"> such thing as</font><font color="#E5E5E5"> a totally bug</font>

71
00:03:52,920 --> 00:03:59,030
free software<font color="#CCCCCC"> but do you guys do</font>

72
00:03:55,800 --> 00:04:01,740
something<font color="#E5E5E5"> extra that nobody else does</font>

73
00:03:59,030 --> 00:04:03,000
according<font color="#CCCCCC"> to a study</font><font color="#E5E5E5"> done by contrast</font>

74
00:04:01,740 --> 00:04:06,180
<font color="#E5E5E5">security</font>

75
00:04:03,000 --> 00:04:09,360
<font color="#E5E5E5">80% of the application code</font><font color="#CCCCCC"> content</font>

76
00:04:06,180 --> 00:04:11,420
library<font color="#E5E5E5"> and time has come we need to</font>

77
00:04:09,360 --> 00:04:14,580
start taking<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> our libraries</font>

78
00:04:11,420 --> 00:04:17,339
<font color="#E5E5E5">carefully and closely because one</font>

79
00:04:14,580 --> 00:04:20,340
vulnerability<font color="#E5E5E5"> in a library can replicate</font>

80
00:04:17,339 --> 00:04:22,859
on all the products and services which

81
00:04:20,339 --> 00:04:30,960
<font color="#E5E5E5">are built on top of the libraries</font><font color="#CCCCCC"> make</font>

82
00:04:22,860 --> 00:04:33,570
<font color="#E5E5E5">sense so I went to</font><font color="#CCCCCC"> Internet there is the</font>

83
00:04:30,960 --> 00:04:37,320
school website<font color="#CCCCCC"> Trends dot built with</font>

84
00:04:33,570 --> 00:04:40,890
<font color="#CCCCCC">comm and I put open SSL and pulled data</font>

85
00:04:37,320 --> 00:04:44,669
for top 1 million site in top 1 million

86
00:04:40,890 --> 00:04:47,909
site you can see<font color="#CCCCCC"> almost 55 thousand</font>

87
00:04:44,669 --> 00:04:51,570
sites<font color="#E5E5E5"> are using open SSL so open SSL is</font>

88
00:04:47,910 --> 00:04:53,850
that<font color="#CCCCCC"> widely used security library it's a</font>

89
00:04:51,570 --> 00:04:58,099
security library so what is the

90
00:04:53,850 --> 00:05:03,870
<font color="#E5E5E5">assumption here it has to be secure and</font>

91
00:04:58,100 --> 00:05:05,460
<font color="#CCCCCC">it's been</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> mid 1990s</font><font color="#E5E5E5"> just take a</font>

92
00:05:03,870 --> 00:05:09,150
<font color="#E5E5E5">look at this slide this is</font><font color="#CCCCCC"> the</font>

93
00:05:05,460 --> 00:05:11,430
vulnerability trend for open SSL<font color="#E5E5E5"> as time</font>

94
00:05:09,150 --> 00:05:14,010
<font color="#E5E5E5">is passing security researchers are</font>

95
00:05:11,430 --> 00:05:17,630
finding<font color="#E5E5E5"> more and more security issues in</font>

96
00:05:14,010 --> 00:05:17,630
a security library

97
00:05:18,140 --> 00:05:26,370
this slide shows security

98
00:05:21,180 --> 00:05:28,680
vulnerabilities<font color="#E5E5E5"> by different attacks so</font>

99
00:05:26,370 --> 00:05:31,410
<font color="#CCCCCC">dos</font><font color="#E5E5E5"> the second column is for dos attack</font>

100
00:05:28,680 --> 00:05:34,410
third one is code execution then<font color="#E5E5E5"> buffer</font>

101
00:05:31,410 --> 00:05:41,010
overflows security library and we<font color="#E5E5E5"> are</font>

102
00:05:34,410 --> 00:05:43,100
here 2017 till date security<font color="#E5E5E5"> researchers</font>

103
00:05:41,010 --> 00:05:46,590
have found hundred and<font color="#E5E5E5"> eighty-one</font>

104
00:05:43,100 --> 00:05:50,910
<font color="#E5E5E5">security bugs in open SSL and we use</font>

105
00:05:46,590 --> 00:05:55,489
<font color="#E5E5E5">open SSL blindly right how many</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> you</font>

106
00:05:50,910 --> 00:05:55,490
use<font color="#E5E5E5"> open SSL</font><font color="#CCCCCC"> in one</font><font color="#E5E5E5"> or more products</font><font color="#CCCCCC"> so</font>

107
00:05:55,760 --> 00:06:00,150
<font color="#CCCCCC">before</font><font color="#E5E5E5"> you started using open SSL did</font>

108
00:05:58,560 --> 00:06:05,010
you take a<font color="#E5E5E5"> look at how many known</font>

109
00:06:00,150 --> 00:06:08,280
vulnerabilities it has<font color="#CCCCCC"> no you know our</font>

110
00:06:05,010 --> 00:06:10,169
development teams are in rush to bring

111
00:06:08,280 --> 00:06:11,820
the product<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the market right</font><font color="#CCCCCC"> they</font>

112
00:06:10,169 --> 00:06:13,799
don't have time<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this analysis</font>

113
00:06:11,820 --> 00:06:16,420
<font color="#E5E5E5">that's why it is important for</font>

114
00:06:13,800 --> 00:06:20,970
developers to<font color="#E5E5E5"> take full ownership of the</font>

115
00:06:16,420 --> 00:06:24,430
type of activity<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is another slide</font>

116
00:06:20,970 --> 00:06:31,690
of vulnerabilities identified<font color="#E5E5E5"> per</font>

117
00:06:24,430 --> 00:06:34,600
category so before we talk about<font color="#E5E5E5"> how</font><font color="#CCCCCC"> we</font>

118
00:06:31,690 --> 00:06:39,430
<font color="#E5E5E5">should review libraries I want to</font>

119
00:06:34,600 --> 00:06:41,650
quickly go<font color="#CCCCCC"> through some steps that</font><font color="#E5E5E5"> we</font>

120
00:06:39,430 --> 00:06:44,830
perform as applications security<font color="#CCCCCC"> review</font>

121
00:06:41,650 --> 00:06:47,140
process now irrespective of the software

122
00:06:44,830 --> 00:06:49,870
<font color="#E5E5E5">development lifecycle model this is what</font>

123
00:06:47,140 --> 00:06:52,180
we do<font color="#E5E5E5"> we do design architecture where we</font>

124
00:06:49,870 --> 00:06:55,420
break<font color="#CCCCCC"> down the product</font><font color="#E5E5E5"> look at all the</font>

125
00:06:52,180 --> 00:06:58,570
<font color="#CCCCCC">components full</font><font color="#E5E5E5"> end-to-end</font><font color="#CCCCCC"> full</font><font color="#E5E5E5"> stack</font>

126
00:06:55,420 --> 00:07:01,360
<font color="#E5E5E5">then we do threat modeling we come up</font>

127
00:06:58,570 --> 00:07:05,260
with<font color="#CCCCCC"> all sort of threat scenarios where</font>

128
00:07:01,360 --> 00:07:07,780
the application can be compromised<font color="#CCCCCC"> then</font>

129
00:07:05,260 --> 00:07:09,610
we do<font color="#E5E5E5"> static code analysis followed by</font>

130
00:07:07,780 --> 00:07:12,280
manual code analysis if you guys have

131
00:07:09,610 --> 00:07:14,800
<font color="#E5E5E5">time if you guys don't have time then we</font>

132
00:07:12,280 --> 00:07:17,799
just rely on<font color="#E5E5E5"> those static code analysis</font>

133
00:07:14,800 --> 00:07:20,500
tools<font color="#CCCCCC"> and we all know the high false</font>

134
00:07:17,800 --> 00:07:22,780
positive<font color="#CCCCCC"> rate</font><font color="#E5E5E5"> the high true positive</font>

135
00:07:20,500 --> 00:07:25,420
rate<font color="#E5E5E5"> I haven't come across a</font><font color="#CCCCCC"> single</font>

136
00:07:22,780 --> 00:07:28,450
static<font color="#E5E5E5"> code analysis tool</font><font color="#CCCCCC"> till did which</font>

137
00:07:25,420 --> 00:07:31,390
is<font color="#E5E5E5"> really efficient finding bugs</font><font color="#CCCCCC"> how</font>

138
00:07:28,450 --> 00:07:35,190
many of us really<font color="#E5E5E5"> spent time configuring</font>

139
00:07:31,390 --> 00:07:35,190
the static code analysis tool

140
00:07:36,550 --> 00:07:42,129
so if it is so difficult to<font color="#E5E5E5"> configure</font>

141
00:07:39,280 --> 00:07:44,049
for<font color="#E5E5E5"> security professional imagine how</font>

142
00:07:42,129 --> 00:07:46,300
difficult it<font color="#CCCCCC"> is for developers to</font><font color="#E5E5E5"> figure</font>

143
00:07:44,050 --> 00:07:51,550
that<font color="#E5E5E5"> out when they have typed deadlines</font>

144
00:07:46,300 --> 00:07:53,949
<font color="#CCCCCC">right then of</font><font color="#E5E5E5"> course we do dynamic app</font>

145
00:07:51,550 --> 00:07:57,129
testing again<font color="#E5E5E5"> same issues high false</font>

146
00:07:53,949 --> 00:08:00,430
<font color="#CCCCCC">positive rate low true positive rate</font><font color="#E5E5E5"> and</font>

147
00:07:57,129 --> 00:08:03,460
at the end we want endorsement from<font color="#E5E5E5"> the</font>

148
00:08:00,430 --> 00:08:04,300
<font color="#E5E5E5">external third party so we go get pen</font>

149
00:08:03,460 --> 00:08:07,030
testers

150
00:08:04,300 --> 00:08:09,490
I'm not saying pen testing is bad<font color="#CCCCCC"> pen</font>

151
00:08:07,030 --> 00:08:12,580
testing is awesome<font color="#E5E5E5"> but it's</font><font color="#CCCCCC"> expensive</font><font color="#E5E5E5"> it</font>

152
00:08:09,490 --> 00:08:15,159
takes<font color="#CCCCCC"> time we can afford maybe once a</font>

153
00:08:12,580 --> 00:08:18,190
year<font color="#CCCCCC"> and pen testers may not necessarily</font>

154
00:08:15,159 --> 00:08:20,740
have<font color="#E5E5E5"> the internal knowledge that</font>

155
00:08:18,190 --> 00:08:23,940
developers have<font color="#CCCCCC"> so guess who is in the</font>

156
00:08:20,740 --> 00:08:26,470
<font color="#E5E5E5">most</font><font color="#CCCCCC"> empowering position here</font><font color="#E5E5E5"> developers</font>

157
00:08:23,940 --> 00:08:29,530
there is no security<font color="#E5E5E5"> team in the world</font>

158
00:08:26,470 --> 00:08:31,780
<font color="#E5E5E5">who has time resources to spend as much</font>

159
00:08:29,530 --> 00:08:34,598
time<font color="#E5E5E5"> as developers can spend on security</font>

160
00:08:31,780 --> 00:08:36,760
<font color="#CCCCCC">so if we could empower our developers</font>

161
00:08:34,599 --> 00:08:40,320
with the right tools technology

162
00:08:36,760 --> 00:08:43,270
methodology<font color="#E5E5E5"> they can do their level best</font>

163
00:08:40,320 --> 00:08:44,470
<font color="#CCCCCC">this is same thing but</font><font color="#E5E5E5"> for a secure</font>

164
00:08:43,270 --> 00:08:47,250
<font color="#CCCCCC">DevOps pipeline</font>

165
00:08:44,470 --> 00:08:50,950
now whatever manual stuff we were<font color="#E5E5E5"> doing</font>

166
00:08:47,250 --> 00:08:53,470
in waterfall<font color="#CCCCCC"> STL's you're</font><font color="#E5E5E5"> a child we try</font>

167
00:08:50,950 --> 00:08:56,140
<font color="#E5E5E5">to replace it by automation</font><font color="#CCCCCC"> as much as</font>

168
00:08:53,470 --> 00:08:58,270
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> and that's how we scale so for</font>

169
00:08:56,140 --> 00:09:00,939
every<font color="#E5E5E5"> single build we do the same thing</font>

170
00:08:58,270 --> 00:09:04,449
<font color="#E5E5E5">static code scan then some automated</font>

171
00:09:00,940 --> 00:09:09,910
<font color="#E5E5E5">configuration check dynamic scan every</font>

172
00:09:04,450 --> 00:09:12,490
once in<font color="#E5E5E5"> a while and</font><font color="#CCCCCC"> whatnot next one as</font>

173
00:09:09,910 --> 00:09:14,949
the organization<font color="#E5E5E5"> becomes more and more</font>

174
00:09:12,490 --> 00:09:17,520
<font color="#E5E5E5">mature and they do all these steps they</font>

175
00:09:14,950 --> 00:09:20,920
start<font color="#E5E5E5"> looking into full stack security</font>

176
00:09:17,520 --> 00:09:26,079
<font color="#E5E5E5">can you guys read this light or it's too</font>

177
00:09:20,920 --> 00:09:29,469
small I'm sorry<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know how to</font>

178
00:09:26,079 --> 00:09:32,520
increase the text but I'm<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> I'm</font>

179
00:09:29,470 --> 00:09:36,070
gonna<font color="#E5E5E5"> read it quickly for you so first</font>

180
00:09:32,520 --> 00:09:38,860
we do security assessments at app level

181
00:09:36,070 --> 00:09:40,990
<font color="#E5E5E5">threat modeling architecture</font><font color="#CCCCCC"> review then</font>

182
00:09:38,860 --> 00:09:44,800
we do security assessments at code level

183
00:09:40,990 --> 00:09:47,110
<font color="#E5E5E5">that's basically our automated code scan</font>

184
00:09:44,800 --> 00:09:50,290
<font color="#CCCCCC">statics</font><font color="#E5E5E5"> code scan or maybe manual code</font>

185
00:09:47,110 --> 00:09:51,970
review then if the organization<font color="#E5E5E5"> is</font>

186
00:09:50,290 --> 00:09:54,189
mature enough or the security<font color="#E5E5E5"> department</font>

187
00:09:51,970 --> 00:09:56,680
is mature<font color="#CCCCCC"> enough they</font><font color="#E5E5E5"> start looking into</font>

188
00:09:54,190 --> 00:09:59,769
<font color="#E5E5E5">the</font><font color="#CCCCCC"> open source libraries components and</font>

189
00:09:56,680 --> 00:10:02,709
framework<font color="#E5E5E5"> the product team is using and</font>

190
00:09:59,769 --> 00:10:04,209
in that also that<font color="#CCCCCC"> basically try to</font><font color="#E5E5E5"> find</font>

191
00:10:02,709 --> 00:10:07,029
out what are the already known

192
00:10:04,209 --> 00:10:09,069
vulnerabilities are there or what are

193
00:10:07,029 --> 00:10:14,110
the operational dependencies are there

194
00:10:09,069 --> 00:10:17,170
<font color="#E5E5E5">is there any licensing risk</font><font color="#CCCCCC"> then at the</font>

195
00:10:14,110 --> 00:10:20,079
web application<font color="#CCCCCC"> front-end the stack</font>

196
00:10:17,170 --> 00:10:22,089
<font color="#E5E5E5">level we do dynamic apps can maybe</font>

197
00:10:20,079 --> 00:10:25,420
conduct internal pain<font color="#E5E5E5"> tests and then</font>

198
00:10:22,089 --> 00:10:29,139
external pen test at container level<font color="#E5E5E5"> we</font>

199
00:10:25,420 --> 00:10:31,660
do hardening<font color="#E5E5E5"> chats maybe if you are very</font>

200
00:10:29,139 --> 00:10:33,519
proactive<font color="#CCCCCC"> you run that CIS benchmark</font>

201
00:10:31,660 --> 00:10:36,850
agent every time you start your docker

202
00:10:33,519 --> 00:10:40,149
container then at host<font color="#CCCCCC"> vm</font><font color="#E5E5E5"> levels same</font>

203
00:10:36,850 --> 00:10:41,740
stuff we look for hardening checks we

204
00:10:40,149 --> 00:10:43,680
look for<font color="#CCCCCC"> missing patches</font><font color="#E5E5E5"> we do</font>

205
00:10:41,740 --> 00:10:46,779
vulnerability assessment<font color="#E5E5E5"> internal at</font>

206
00:10:43,680 --> 00:10:50,079
<font color="#E5E5E5">external same with the network stack if</font>

207
00:10:46,779 --> 00:10:52,839
your product<font color="#E5E5E5"> is using crypto then we do</font>

208
00:10:50,079 --> 00:10:56,069
crypto specific testing<font color="#E5E5E5"> HSMs specific</font>

209
00:10:52,839 --> 00:10:58,269
testing so those who are<font color="#E5E5E5"> kind of mature</font>

210
00:10:56,069 --> 00:11:00,639
organization and<font color="#E5E5E5"> doing this for</font><font color="#CCCCCC"> a long</font>

211
00:10:58,269 --> 00:11:02,920
<font color="#CCCCCC">time they do all this full stack of</font>

212
00:11:00,639 --> 00:11:05,230
security<font color="#CCCCCC"> evaluation for their mission</font>

213
00:11:02,920 --> 00:11:06,819
critical application<font color="#E5E5E5"> not necessarily for</font>

214
00:11:05,230 --> 00:11:09,819
all the products<font color="#E5E5E5"> because this is lot of</font>

215
00:11:06,819 --> 00:11:12,880
<font color="#E5E5E5">work this is more work</font><font color="#CCCCCC"> than getting the</font>

216
00:11:09,819 --> 00:11:18,519
product out<font color="#E5E5E5"> right so it's it's</font><font color="#CCCCCC"> really</font>

217
00:11:12,880 --> 00:11:21,540
not that<font color="#CCCCCC"> practical so now you know</font>

218
00:11:18,519 --> 00:11:24,399
today's talk focuses on<font color="#E5E5E5"> library so let's</font>

219
00:11:21,540 --> 00:11:26,290
focus on the third<font color="#E5E5E5"> layer open source</font>

220
00:11:24,399 --> 00:11:28,959
libraries components and framework

221
00:11:26,290 --> 00:11:31,180
besides looking at open source

222
00:11:28,959 --> 00:11:33,250
vulnerability operational dependencies

223
00:11:31,180 --> 00:11:38,010
and licensing risk<font color="#E5E5E5"> what is</font><font color="#CCCCCC"> missing</font>

224
00:11:33,250 --> 00:11:38,010
<font color="#E5E5E5">anybody what else we can do</font>

225
00:11:38,540 --> 00:11:55,529
yes anybody what else<font color="#E5E5E5"> you're right on</font>

226
00:11:46,920 --> 00:11:58,319
spot the question oh he said<font color="#CCCCCC"> manual code</font>

227
00:11:55,529 --> 00:11:59,700
review<font color="#CCCCCC"> if we do manual code review for</font>

228
00:11:58,320 --> 00:12:03,900
our<font color="#CCCCCC"> libraries</font><font color="#E5E5E5"> that will be really</font>

229
00:11:59,700 --> 00:12:08,490
<font color="#CCCCCC">awesome</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's see yes</font><font color="#E5E5E5"> static analysis</font>

230
00:12:03,900 --> 00:12:10,589
is well manual code review so what we

231
00:12:08,490 --> 00:12:12,420
need to<font color="#CCCCCC"> do besides in finding known</font>

232
00:12:10,589 --> 00:12:16,320
vulnerability dependency issues<font color="#E5E5E5"> and</font>

233
00:12:12,420 --> 00:12:18,930
licensing risk<font color="#E5E5E5"> is find out what are</font>

234
00:12:16,320 --> 00:12:21,180
those<font color="#E5E5E5"> unknown vulnerabilities which</font>

235
00:12:18,930 --> 00:12:23,459
might have<font color="#CCCCCC"> been created</font><font color="#E5E5E5"> in the custom</font>

236
00:12:21,180 --> 00:12:26,279
code<font color="#E5E5E5"> that our developers have written on</font>

237
00:12:23,460 --> 00:12:28,080
top<font color="#E5E5E5"> of libraries you know CVE</font>

238
00:12:26,279 --> 00:12:30,300
database will tell you what are the

239
00:12:28,080 --> 00:12:32,070
known vulnerabilities but we don't know

240
00:12:30,300 --> 00:12:33,930
what are the vulnerabilities<font color="#E5E5E5"> in the</font>

241
00:12:32,070 --> 00:12:37,010
custom code<font color="#E5E5E5"> which is on top of the</font>

242
00:12:33,930 --> 00:12:39,660
<font color="#CCCCCC">library</font><font color="#E5E5E5"> and of course miss configuration</font>

243
00:12:37,010 --> 00:12:44,520
<font color="#E5E5E5">you know developers are under tight</font>

244
00:12:39,660 --> 00:12:48,000
deadlines security is<font color="#E5E5E5"> not priority</font><font color="#CCCCCC"> for</font>

245
00:12:44,520 --> 00:12:50,130
product owners<font color="#E5E5E5"> or executives nobody has</font>

246
00:12:48,000 --> 00:12:54,570
time to write secure coding<font color="#CCCCCC"> guidelines</font>

247
00:12:50,130 --> 00:12:57,959
<font color="#CCCCCC">or how to use library securely</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> Mis</font>

248
00:12:54,570 --> 00:13:00,150
configuration is another very vulnerable

249
00:12:57,959 --> 00:13:05,579
area where developers tend to do

250
00:13:00,150 --> 00:13:08,640
mistakes<font color="#E5E5E5"> as everybody is in rush now the</font>

251
00:13:05,580 --> 00:13:11,010
<font color="#E5E5E5">application review</font><font color="#CCCCCC"> process that I just</font>

252
00:13:08,640 --> 00:13:13,620
<font color="#E5E5E5">described couple of slides back why it</font>

253
00:13:11,010 --> 00:13:19,819
is<font color="#E5E5E5"> not applicable to library if you</font><font color="#CCCCCC"> take</font>

254
00:13:13,620 --> 00:13:23,250
any proper foundational dev framework or

255
00:13:19,820 --> 00:13:26,610
any programming language framework in

256
00:13:23,250 --> 00:13:30,000
that framework<font color="#E5E5E5"> it consists of several</font>

257
00:13:26,610 --> 00:13:31,980
<font color="#E5E5E5">components</font><font color="#CCCCCC"> each component</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be treated</font>

258
00:13:30,000 --> 00:13:35,850
as individual library<font color="#E5E5E5"> or they can use</font>

259
00:13:31,980 --> 00:13:38,580
<font color="#CCCCCC">together</font><font color="#E5E5E5"> right and if we</font><font color="#CCCCCC"> start doing the</font>

260
00:13:35,850 --> 00:13:41,459
full stack security evaluation<font color="#E5E5E5"> for these</font>

261
00:13:38,580 --> 00:13:45,360
huge complex foundational<font color="#CCCCCC"> dev framework</font>

262
00:13:41,459 --> 00:13:49,560
it will take us years that's why we need

263
00:13:45,360 --> 00:13:51,450
something lightweight<font color="#CCCCCC"> FasTrak another</font>

264
00:13:49,560 --> 00:13:54,689
good<font color="#CCCCCC"> reason why we should</font><font color="#E5E5E5"> have</font>

265
00:13:51,450 --> 00:13:57,900
a review process<font color="#CCCCCC"> for libraries is the</font>

266
00:13:54,690 --> 00:14:00,810
data flow in library<font color="#E5E5E5"> depends on the host</font>

267
00:13:57,900 --> 00:14:03,140
application<font color="#CCCCCC"> the data flow diagram for a</font>

268
00:14:00,810 --> 00:14:06,510
<font color="#E5E5E5">host application is kind of different</font>

269
00:14:03,140 --> 00:14:09,060
<font color="#CCCCCC">the attack surface</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a application is</font>

270
00:14:06,510 --> 00:14:12,030
somewhat different<font color="#CCCCCC"> from attack surface</font>

271
00:14:09,060 --> 00:14:13,530
<font color="#E5E5E5">of a library</font><font color="#CCCCCC"> and last the</font><font color="#E5E5E5"> threat agents</font>

272
00:14:12,030 --> 00:14:16,110
are different<font color="#E5E5E5"> now let me consider</font>

273
00:14:13,530 --> 00:14:19,949
<font color="#E5E5E5">example again let's let's think about</font>

274
00:14:16,110 --> 00:14:22,920
<font color="#E5E5E5">open SSL in application space say it's</font>

275
00:14:19,950 --> 00:14:26,310
an<font color="#E5E5E5"> android android phone which uses open</font>

276
00:14:22,920 --> 00:14:30,990
<font color="#CCCCCC">ssl open</font><font color="#E5E5E5"> ssl in application space and</font>

277
00:14:26,310 --> 00:14:35,099
open<font color="#CCCCCC"> ssl in kernel space attack surface</font>

278
00:14:30,990 --> 00:14:36,980
is different right when open SSL is used

279
00:14:35,100 --> 00:14:40,800
by application I'm more worried about

280
00:14:36,980 --> 00:14:42,930
application level threats you know<font color="#E5E5E5"> web</font>

281
00:14:40,800 --> 00:14:47,760
application sequel injection cross-site

282
00:14:42,930 --> 00:14:51,120
scripting<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> privilege escalation and</font>

283
00:14:47,760 --> 00:14:54,780
<font color="#E5E5E5">whatnot when open SSL is used in kernel</font>

284
00:14:51,120 --> 00:14:57,270
my threats are different<font color="#CCCCCC"> I want to see</font>

285
00:14:54,780 --> 00:15:01,470
how I<font color="#E5E5E5"> can take complete control over</font><font color="#CCCCCC"> the</font>

286
00:14:57,270 --> 00:15:04,079
route<font color="#E5E5E5"> make sense so that's why we can't</font>

287
00:15:01,470 --> 00:15:06,660
<font color="#CCCCCC">use the same method that</font><font color="#E5E5E5"> we use for</font>

288
00:15:04,080 --> 00:15:10,460
applications in library evaluation

289
00:15:06,660 --> 00:15:13,350
another good example is threat agent

290
00:15:10,460 --> 00:15:16,860
libraries are a bunch of functionalities

291
00:15:13,350 --> 00:15:18,690
<font color="#E5E5E5">defined in the form of api's application</font>

292
00:15:16,860 --> 00:15:21,390
is lot more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> that application has</font>

293
00:15:18,690 --> 00:15:23,400
several<font color="#CCCCCC"> external interfaces</font><font color="#E5E5E5"> libraries</font>

294
00:15:21,390 --> 00:15:26,340
<font color="#E5E5E5">have very</font><font color="#CCCCCC"> well-defined</font><font color="#E5E5E5"> interfaces in</font>

295
00:15:23,400 --> 00:15:28,850
terms of API<font color="#E5E5E5"> now when I look at</font><font color="#CCCCCC"> threat</font>

296
00:15:26,340 --> 00:15:31,800
<font color="#CCCCCC">Asian for libraries it's truly the</font>

297
00:15:28,850 --> 00:15:33,870
<font color="#E5E5E5">developers the knife developers or even</font>

298
00:15:31,800 --> 00:15:37,469
the admins who don't know how<font color="#E5E5E5"> to use</font>

299
00:15:33,870 --> 00:15:39,570
<font color="#CCCCCC">libraries in case of application</font><font color="#E5E5E5"> the</font>

300
00:15:37,470 --> 00:15:41,850
threat agents are the malicious users

301
00:15:39,570 --> 00:15:47,490
does<font color="#E5E5E5"> it make sense how libraries are</font>

302
00:15:41,850 --> 00:15:50,520
<font color="#E5E5E5">different from applications good but the</font>

303
00:15:47,490 --> 00:15:53,280
good news<font color="#E5E5E5"> is we can</font><font color="#CCCCCC"> use the same state</font>

304
00:15:50,520 --> 00:15:56,100
of<font color="#CCCCCC"> Arc framework to evaluate libraries</font>

305
00:15:53,280 --> 00:15:58,770
but tweak it slightly differently<font color="#E5E5E5"> we</font>

306
00:15:56,100 --> 00:16:01,050
don't have to do extensive<font color="#E5E5E5"> steps in the</font>

307
00:15:58,770 --> 00:16:02,970
<font color="#CCCCCC">next slide I am going to tell you</font><font color="#E5E5E5"> what</font>

308
00:16:01,050 --> 00:16:04,729
we should<font color="#E5E5E5"> consider as input</font><font color="#CCCCCC"> to the</font>

309
00:16:02,970 --> 00:16:07,559
library<font color="#CCCCCC"> so</font>

310
00:16:04,730 --> 00:16:11,610
security folks<font color="#CCCCCC"> or developers who have</font>

311
00:16:07,559 --> 00:16:14,550
<font color="#E5E5E5">security focus they can go through all</font>

312
00:16:11,610 --> 00:16:18,300
the product<font color="#E5E5E5"> documentation wiki pages</font>

313
00:16:14,550 --> 00:16:20,519
<font color="#E5E5E5">design documentation source code API</font>

314
00:16:18,300 --> 00:16:22,889
documentation<font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> documentation is</font>

315
00:16:20,519 --> 00:16:26,129
<font color="#CCCCCC">available on the library just go through</font>

316
00:16:22,889 --> 00:16:29,569
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> then create</font><font color="#CCCCCC"> lists of</font><font color="#E5E5E5"> four</font>

317
00:16:26,129 --> 00:16:33,300
things one is implicit security controls

318
00:16:29,569 --> 00:16:36,569
second<font color="#E5E5E5"> explicit security controls third</font>

319
00:16:33,300 --> 00:16:40,050
entry<font color="#E5E5E5"> and exit points and fourth one</font>

320
00:16:36,569 --> 00:16:42,599
define find out was the custom code

321
00:16:40,050 --> 00:16:45,809
written<font color="#E5E5E5"> on top of the library</font><font color="#CCCCCC"> these are</font>

322
00:16:42,600 --> 00:16:47,579
the four<font color="#E5E5E5"> things we need to</font><font color="#CCCCCC"> know now you</font>

323
00:16:45,809 --> 00:16:49,980
will<font color="#E5E5E5"> ask me what is</font><font color="#CCCCCC"> the difference</font>

324
00:16:47,579 --> 00:16:52,800
between implicit<font color="#E5E5E5"> security controls and</font>

325
00:16:49,980 --> 00:16:55,230
explicit security controls explicit

326
00:16:52,800 --> 00:16:58,649
security control is something<font color="#E5E5E5"> that is</font>

327
00:16:55,230 --> 00:17:01,050
offered<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the library by default for</font>

328
00:16:58,649 --> 00:17:05,039
example if there<font color="#E5E5E5"> is input validation</font>

329
00:17:01,050 --> 00:17:07,559
filter every single<font color="#CCCCCC"> input that is passed</font>

330
00:17:05,039 --> 00:17:10,589
to<font color="#E5E5E5"> the library</font><font color="#CCCCCC"> api's</font><font color="#E5E5E5"> goes through input</font>

331
00:17:07,559 --> 00:17:12,329
validation filter so<font color="#E5E5E5"> that it can avoid</font>

332
00:17:10,589 --> 00:17:14,428
all the injection flaws<font color="#E5E5E5"> that is</font>

333
00:17:12,329 --> 00:17:17,698
something<font color="#E5E5E5"> offered by default</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that</font>

334
00:17:14,429 --> 00:17:20,220
becomes explicit security control now

335
00:17:17,699 --> 00:17:24,270
what is implicit<font color="#E5E5E5"> security control is it</font>

336
00:17:20,220 --> 00:17:35,059
means something<font color="#CCCCCC"> that is offered by</font>

337
00:17:24,270 --> 00:17:39,360
choice for<font color="#E5E5E5"> example say that</font><font color="#CCCCCC"> again yeah</font>

338
00:17:35,059 --> 00:17:42,178
<font color="#CCCCCC">I'm thinking about a crypto library I</font>

339
00:17:39,360 --> 00:17:45,330
have<font color="#CCCCCC"> one</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> coming up but</font>

340
00:17:42,179 --> 00:17:49,549
<font color="#E5E5E5">something where it's the responsibility</font>

341
00:17:45,330 --> 00:17:54,000
of the developers to pick one of the<font color="#E5E5E5"> mod</font>

342
00:17:49,549 --> 00:17:57,408
<font color="#E5E5E5">TLS so it's developers responsibility to</font>

343
00:17:54,000 --> 00:18:00,600
configure the library<font color="#E5E5E5"> with the right TLS</font>

344
00:17:57,409 --> 00:18:04,620
configuration he could pick TLS 1.2<font color="#E5E5E5"> or</font>

345
00:18:00,600 --> 00:18:06,899
he could pick TLS 1.1 or 1.2 in that

346
00:18:04,620 --> 00:18:10,379
case if we don't educate our<font color="#E5E5E5"> our</font>

347
00:18:06,899 --> 00:18:16,469
developers what is the secure choice

348
00:18:10,380 --> 00:18:18,290
<font color="#E5E5E5">then we</font><font color="#CCCCCC"> introduce risk</font><font color="#E5E5E5"> by design next</font>

349
00:18:16,470 --> 00:18:20,390
one is custom code

350
00:18:18,290 --> 00:18:22,309
although you know we use all sort<font color="#E5E5E5"> of</font>

351
00:18:20,390 --> 00:18:24,500
good tools<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find known vulnerabilities</font>

352
00:18:22,309 --> 00:18:27,379
there<font color="#E5E5E5"> is always a risk on custom code</font>

353
00:18:24,500 --> 00:18:29,510
unless<font color="#CCCCCC"> we evaluate the custom code</font><font color="#E5E5E5"> you</font>

354
00:18:27,380 --> 00:18:33,080
know get it<font color="#CCCCCC"> peer-reviewed</font><font color="#E5E5E5"> or whatever we</font>

355
00:18:29,510 --> 00:18:34,879
can't find what are the known<font color="#E5E5E5"> risk are</font>

356
00:18:33,080 --> 00:18:43,240
there in the custom code<font color="#E5E5E5"> and last one</font>

357
00:18:34,880 --> 00:18:46,820
entry and the<font color="#E5E5E5"> end points now my</font>

358
00:18:43,240 --> 00:18:49,280
developers<font color="#E5E5E5"> always ask me through</font><font color="#CCCCCC"> they</font>

359
00:18:46,820 --> 00:18:53,540
tell<font color="#CCCCCC"> me what is the security control</font>

360
00:18:49,280 --> 00:18:56,570
what is a security functionality<font color="#CCCCCC"> I don't</font>

361
00:18:53,540 --> 00:19:01,040
understand your<font color="#E5E5E5"> security language then</font>

362
00:18:56,570 --> 00:19:03,169
it you know<font color="#CCCCCC"> we security people</font><font color="#E5E5E5"> we are we</font>

363
00:19:01,040 --> 00:19:06,920
<font color="#E5E5E5">use this security language</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> time</font>

364
00:19:03,170 --> 00:19:09,200
even<font color="#CCCCCC"> though my developers are working on</font>

365
00:19:06,920 --> 00:19:10,760
security products for years<font color="#E5E5E5"> they use</font>

366
00:19:09,200 --> 00:19:13,790
some other language<font color="#E5E5E5"> so they don't</font>

367
00:19:10,760 --> 00:19:16,250
understand what is security<font color="#CCCCCC"> - you may</font>

368
00:19:13,790 --> 00:19:18,290
not be security to them so when they<font color="#CCCCCC"> ask</font>

369
00:19:16,250 --> 00:19:20,510
me<font color="#CCCCCC"> Thrifty tell me what</font><font color="#E5E5E5"> are security</font>

370
00:19:18,290 --> 00:19:23,659
controls in the library<font color="#E5E5E5"> I said all the</font>

371
00:19:20,510 --> 00:19:26,809
api's which implement confidentiality

372
00:19:23,660 --> 00:19:29,240
that means data at rest encryption<font color="#E5E5E5"> for</font>

373
00:19:26,809 --> 00:19:32,090
data at<font color="#E5E5E5"> rest or encryption for data in</font>

374
00:19:29,240 --> 00:19:34,790
<font color="#CCCCCC">transit availability integrity any</font>

375
00:19:32,090 --> 00:19:37,000
crypto<font color="#CCCCCC"> stuff falls under security</font>

376
00:19:34,790 --> 00:19:38,649
functionality<font color="#E5E5E5"> anything to do with</font>

377
00:19:37,000 --> 00:19:41,900
<font color="#E5E5E5">identification authentication</font>

378
00:19:38,650 --> 00:19:44,630
authorization<font color="#E5E5E5"> even the function level</font>

379
00:19:41,900 --> 00:19:47,600
<font color="#E5E5E5">access control check falls into security</font>

380
00:19:44,630 --> 00:19:51,020
controls<font color="#E5E5E5"> accountability auditing</font>

381
00:19:47,600 --> 00:19:52,790
non-repudiation<font color="#CCCCCC"> any privacy</font><font color="#E5E5E5"> stuff you</font>

382
00:19:51,020 --> 00:19:56,120
know where you replace<font color="#E5E5E5"> the sensitive</font>

383
00:19:52,790 --> 00:19:59,178
data with<font color="#E5E5E5"> bunch of random data any any</font>

384
00:19:56,120 --> 00:20:02,809
of the stuff any of the<font color="#E5E5E5"> ten principles</font>

385
00:19:59,179 --> 00:20:04,940
which<font color="#E5E5E5"> are discussed</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> your api's</font>

386
00:20:02,809 --> 00:20:06,950
are implementing those<font color="#E5E5E5"> or supporting</font>

387
00:20:04,940 --> 00:20:10,040
those those<font color="#CCCCCC"> are your</font><font color="#E5E5E5"> security control</font>

388
00:20:06,950 --> 00:20:14,059
inside the library<font color="#E5E5E5"> and you need to make</font>

389
00:20:10,040 --> 00:20:16,700
<font color="#CCCCCC">sure that as a naive developer you don't</font>

390
00:20:14,059 --> 00:20:17,540
bypass the<font color="#CCCCCC"> security control by doing</font>

391
00:20:16,700 --> 00:20:20,390
wrong choices

392
00:20:17,540 --> 00:20:22,480
so we request our developers to list

393
00:20:20,390 --> 00:20:25,640
<font color="#E5E5E5">these implicit security controls</font>

394
00:20:22,480 --> 00:20:27,410
explicit security controls and again the

395
00:20:25,640 --> 00:20:30,200
code modifications<font color="#CCCCCC"> that you have done to</font>

396
00:20:27,410 --> 00:20:31,309
<font color="#CCCCCC">third party does anybody</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> any</font>

397
00:20:30,200 --> 00:20:36,179
question here

398
00:20:31,309 --> 00:20:38,668
pretty clear the<font color="#E5E5E5"> next fine</font><font color="#CCCCCC"> I have a list</font>

399
00:20:36,179 --> 00:20:40,980
of implicit security control explicit<font color="#CCCCCC"> to</font>

400
00:20:38,669 --> 00:20:42,990
security control entry exit<font color="#E5E5E5"> points the</font>

401
00:20:40,980 --> 00:20:45,539
next step obviously is threat modeling

402
00:20:42,990 --> 00:20:47,789
in a typical threat modeling scenario

403
00:20:45,539 --> 00:20:50,490
when it comes to application<font color="#E5E5E5"> we try to</font>

404
00:20:47,789 --> 00:20:52,980
come up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> scenarios in which you know</font>

405
00:20:50,490 --> 00:20:55,320
as an attacker<font color="#CCCCCC"> how I can hack into this</font>

406
00:20:52,980 --> 00:20:58,830
application<font color="#CCCCCC"> but</font><font color="#E5E5E5"> when it comes to library</font>

407
00:20:55,320 --> 00:21:01,789
<font color="#E5E5E5">it's really not about hacking library is</font>

408
00:20:58,830 --> 00:21:05,220
deep down here when it<font color="#E5E5E5"> comes to library</font>

409
00:21:01,789 --> 00:21:09,389
<font color="#E5E5E5">you need to think how our developer can</font>

410
00:21:05,220 --> 00:21:11,340
misuse<font color="#E5E5E5"> the library and as a result of</font>

411
00:21:09,389 --> 00:21:14,250
threat modeling activity<font color="#E5E5E5"> you need to</font>

412
00:21:11,340 --> 00:21:17,220
list how the library<font color="#CCCCCC"> what are those</font>

413
00:21:14,250 --> 00:21:19,950
misuse scenario and then what are the

414
00:21:17,220 --> 00:21:21,870
correct<font color="#E5E5E5"> controls to avoid those misuse</font>

415
00:21:19,950 --> 00:21:24,600
scenario and this could<font color="#CCCCCC"> be just an</font>

416
00:21:21,870 --> 00:21:26,729
<font color="#E5E5E5">hour-long activity once you have the</font>

417
00:21:24,600 --> 00:21:30,510
<font color="#E5E5E5">list of implicit and explicit security</font>

418
00:21:26,730 --> 00:21:33,330
control this becomes really<font color="#E5E5E5"> easy next</font>

419
00:21:30,510 --> 00:21:35,908
one is<font color="#E5E5E5"> code change as this gentleman</font><font color="#CCCCCC"> and</font>

420
00:21:33,330 --> 00:21:37,949
<font color="#E5E5E5">Josh mentioned there is absolutely no</font>

421
00:21:35,909 --> 00:21:40,409
change when it comes to code analysis

422
00:21:37,950 --> 00:21:44,549
<font color="#E5E5E5">you can use your static code analysis</font>

423
00:21:40,409 --> 00:21:46,769
tools<font color="#E5E5E5"> and manual code review sessions to</font>

424
00:21:44,549 --> 00:21:51,139
do code review the goal of this activity

425
00:21:46,769 --> 00:21:51,139
is<font color="#E5E5E5"> really to find implementation bugs</font>

426
00:21:51,409 --> 00:21:58,260
security testing again<font color="#E5E5E5"> when it comes to</font>

427
00:21:55,190 --> 00:22:01,700
dynamic security testing<font color="#E5E5E5"> you can use</font>

428
00:21:58,260 --> 00:22:05,070
<font color="#CCCCCC">burp or any of your dynamic</font><font color="#E5E5E5"> security</font>

429
00:22:01,700 --> 00:22:07,620
<font color="#E5E5E5">testing tools hook basically application</font>

430
00:22:05,070 --> 00:22:10,230
with the library<font color="#E5E5E5"> and see do the exact</font>

431
00:22:07,620 --> 00:22:12,989
same things but what I tell<font color="#E5E5E5"> my</font>

432
00:22:10,230 --> 00:22:15,600
developers is as soon as the security

433
00:22:12,990 --> 00:22:17,850
testing is over<font color="#CCCCCC"> you have all the results</font>

434
00:22:15,600 --> 00:22:19,500
<font color="#E5E5E5">in the security plan give it to your</font>

435
00:22:17,850 --> 00:22:23,459
developer and ask them<font color="#E5E5E5"> to write</font>

436
00:22:19,500 --> 00:22:27,419
automated test scripts so that every

437
00:22:23,460 --> 00:22:29,610
<font color="#CCCCCC">single time they add more stuff</font><font color="#E5E5E5"> all they</font>

438
00:22:27,419 --> 00:22:31,740
have to do is write new security test

439
00:22:29,610 --> 00:22:35,639
cases for<font color="#CCCCCC"> the Delta</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> really</font>

440
00:22:31,740 --> 00:22:38,490
helps to<font color="#E5E5E5"> speed up if you have very well</font>

441
00:22:35,639 --> 00:22:40,770
covered<font color="#E5E5E5"> automated test case scenarios</font>

442
00:22:38,490 --> 00:22:43,020
<font color="#CCCCCC">you don't even have to</font><font color="#E5E5E5"> run scan or every</font>

443
00:22:40,770 --> 00:22:45,570
and then this improves speeds so much

444
00:22:43,020 --> 00:22:47,190
<font color="#E5E5E5">and this is so</font><font color="#CCCCCC"> accurate that</font><font color="#E5E5E5"> there are</font>

445
00:22:45,570 --> 00:22:49,500
no false positive because<font color="#CCCCCC"> this is</font>

446
00:22:47,190 --> 00:22:51,090
<font color="#E5E5E5">something customized written by your own</font>

447
00:22:49,500 --> 00:22:56,010
developer who knows

448
00:22:51,090 --> 00:22:58,379
inside<font color="#E5E5E5"> outside of the library last</font><font color="#CCCCCC"> one</font>

449
00:22:56,010 --> 00:23:01,500
so once we finish all<font color="#E5E5E5"> this what are we</font>

450
00:22:58,380 --> 00:23:03,720
<font color="#E5E5E5">actually looking for again when we</font>

451
00:23:01,500 --> 00:23:06,390
<font color="#E5E5E5">analyze and check the security</font><font color="#CCCCCC"> of the</font>

452
00:23:03,720 --> 00:23:09,720
explicit security controls<font color="#E5E5E5"> we see what</font>

453
00:23:06,390 --> 00:23:14,400
is<font color="#E5E5E5"> secure by</font><font color="#CCCCCC"> default we kind of harden</font>

454
00:23:09,720 --> 00:23:16,950
the<font color="#CCCCCC"> library's configuration</font><font color="#E5E5E5"> then maybe</font>

455
00:23:14,400 --> 00:23:24,980
you know<font color="#E5E5E5"> a team of one or two developers</font>

456
00:23:16,950 --> 00:23:27,750
it's really hard to read<font color="#CCCCCC"> nevermind</font><font color="#E5E5E5"> sorry</font>

457
00:23:24,980 --> 00:23:31,620
<font color="#CCCCCC">maybe you know one or two developers</font>

458
00:23:27,750 --> 00:23:33,929
worked on<font color="#E5E5E5"> that library</font><font color="#CCCCCC"> but a team of say</font>

459
00:23:31,620 --> 00:23:36,090
<font color="#CCCCCC">fifteen developers or 100 different</font>

460
00:23:33,929 --> 00:23:40,110
<font color="#E5E5E5">teams are going to use that library so</font>

461
00:23:36,090 --> 00:23:42,059
for them<font color="#E5E5E5"> create a simple wiki page which</font>

462
00:23:40,110 --> 00:23:46,139
will list<font color="#E5E5E5"> you know how to how to</font>

463
00:23:42,059 --> 00:23:48,600
securely use this library<font color="#E5E5E5"> all the</font>

464
00:23:46,140 --> 00:23:51,270
implementation<font color="#E5E5E5"> bugs that</font><font color="#CCCCCC"> you find during</font>

465
00:23:48,600 --> 00:23:53,809
<font color="#E5E5E5">static code or manual code review and</font>

466
00:23:51,270 --> 00:23:57,389
security testing<font color="#E5E5E5"> you can log them as</font>

467
00:23:53,809 --> 00:24:00,000
risk<font color="#E5E5E5"> and ask your developers to fix it</font>

468
00:23:57,390 --> 00:24:03,059
<font color="#E5E5E5">and last but the most important thing</font>

469
00:24:00,000 --> 00:24:07,920
how you<font color="#E5E5E5"> are going</font><font color="#CCCCCC"> to scale</font><font color="#E5E5E5"> the usage of</font>

470
00:24:03,059 --> 00:24:09,840
secure library in AWS<font color="#CCCCCC"> we have something</font>

471
00:24:07,920 --> 00:24:12,510
called<font color="#E5E5E5"> cloud formation templates where a</font>

472
00:24:09,840 --> 00:24:16,800
developer clicks one button and the

473
00:24:12,510 --> 00:24:21,510
whole stack is spun up<font color="#E5E5E5"> so what we do we</font>

474
00:24:16,800 --> 00:24:23,760
basically<font color="#E5E5E5"> help them with secure</font><font color="#CCCCCC"> hardened</font>

475
00:24:21,510 --> 00:24:26,460
code throughout the stack everything<font color="#E5E5E5"> is</font>

476
00:24:23,760 --> 00:24:28,559
<font color="#CCCCCC">harden especially around libraries</font><font color="#E5E5E5"> we</font>

477
00:24:26,460 --> 00:24:30,210
don't want our developers to<font color="#E5E5E5"> spend time</font>

478
00:24:28,559 --> 00:24:34,399
thinking<font color="#E5E5E5"> what is secure what is not</font>

479
00:24:30,210 --> 00:24:34,400
secure<font color="#E5E5E5"> and this is exactly</font><font color="#CCCCCC"> how we scale</font>

480
00:24:34,940 --> 00:24:43,920
now let's take example of<font color="#CCCCCC"> OpenSSL</font><font color="#E5E5E5"> if</font>

481
00:24:38,790 --> 00:24:47,129
somebody has<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> know review open</font><font color="#CCCCCC"> SSL</font>

482
00:24:43,920 --> 00:24:50,040
how can they go<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> so first of all</font>

483
00:24:47,130 --> 00:24:53,040
<font color="#E5E5E5">open SSL has a wonderful security guide</font>

484
00:24:50,040 --> 00:24:54,090
which lists<font color="#E5E5E5"> all the security</font>

485
00:24:53,040 --> 00:24:57,990
functionalities

486
00:24:54,090 --> 00:25:00,480
crypto cipher<font color="#CCCCCC"> suites OpenSSL uses</font><font color="#E5E5E5"> ii do</font>

487
00:24:57,990 --> 00:25:04,140
take a look at<font color="#E5E5E5"> API documentation for</font>

488
00:25:00,480 --> 00:25:08,160
<font color="#CCCCCC">more granular specific information</font><font color="#E5E5E5"> third</font>

489
00:25:04,140 --> 00:25:10,770
<font color="#E5E5E5">open</font><font color="#CCCCCC"> SSL has been</font><font color="#E5E5E5"> validated using FIPS</font>

490
00:25:08,160 --> 00:25:12,680
140 -<font color="#CCCCCC"> 2 standard how many of you</font><font color="#E5E5E5"> are</font>

491
00:25:10,770 --> 00:25:16,470
familiar with<font color="#E5E5E5"> Phipps</font>

492
00:25:12,680 --> 00:25:18,960
so FIPS 140 -<font color="#CCCCCC"> 2 is</font><font color="#E5E5E5"> really not a security</font>

493
00:25:16,470 --> 00:25:21,450
standard<font color="#E5E5E5"> it's a crypto standard it only</font>

494
00:25:18,960 --> 00:25:24,600
<font color="#E5E5E5">looks at cryptographic implementations</font>

495
00:25:21,450 --> 00:25:26,910
of those cipher<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> look for</font>

496
00:25:24,600 --> 00:25:29,280
memory<font color="#E5E5E5"> corruptions or buffer overflow so</font>

497
00:25:26,910 --> 00:25:32,010
that's<font color="#CCCCCC"> them</font><font color="#E5E5E5"> I would not</font><font color="#CCCCCC"> say this is a</font>

498
00:25:29,280 --> 00:25:34,050
gap<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Phipps</font><font color="#E5E5E5"> but this is kind of</font>

499
00:25:32,010 --> 00:25:35,370
shortcoming<font color="#CCCCCC"> v security professional we</font>

500
00:25:34,050 --> 00:25:37,800
have tendency to look at security

501
00:25:35,370 --> 00:25:39,929
<font color="#E5E5E5">standard as if they are like you know</font>

502
00:25:37,800 --> 00:25:42,810
holistic full end-to-end but that's not

503
00:25:39,930 --> 00:25:45,450
the case<font color="#E5E5E5"> so</font><font color="#CCCCCC"> because open SSL has crypto</font>

504
00:25:42,810 --> 00:25:48,870
functionality it becomes important to

505
00:25:45,450 --> 00:25:52,260
<font color="#CCCCCC">use a</font><font color="#E5E5E5"> Phipps validated module and last</font>

506
00:25:48,870 --> 00:25:54,540
one source<font color="#E5E5E5"> code take a look</font><font color="#CCCCCC"> if you're</font>

507
00:25:52,260 --> 00:25:57,990
<font color="#CCCCCC">going to use</font><font color="#E5E5E5"> open SSL widely probably it</font>

508
00:25:54,540 --> 00:26:02,420
<font color="#CCCCCC">is important</font><font color="#E5E5E5"> to invest good time looking</font>

509
00:25:57,990 --> 00:26:04,740
<font color="#CCCCCC">at the code and</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> out those granular</font>

510
00:26:02,420 --> 00:26:06,960
configurations<font color="#E5E5E5"> that your developer needs</font>

511
00:26:04,740 --> 00:26:10,740
to know in<font color="#E5E5E5"> order to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> open SSL</font>

512
00:26:06,960 --> 00:26:13,110
securely<font color="#E5E5E5"> what will be the output of this</font>

513
00:26:10,740 --> 00:26:16,710
activity<font color="#E5E5E5"> again as I said implicit</font>

514
00:26:13,110 --> 00:26:19,340
security control<font color="#CCCCCC"> in in this case what</font>

515
00:26:16,710 --> 00:26:22,920
<font color="#CCCCCC">are the ciphers key sizes modes are</font>

516
00:26:19,340 --> 00:26:26,179
offered by open SSL by default<font color="#E5E5E5"> for</font>

517
00:26:22,920 --> 00:26:29,370
example<font color="#CCCCCC"> lately open SSL does not offer</font>

518
00:26:26,180 --> 00:26:32,670
single<font color="#E5E5E5"> des it's broken</font><font color="#CCCCCC"> so it doesn't</font>

519
00:26:29,370 --> 00:26:34,770
allow few years back<font color="#CCCCCC"> it used</font><font color="#E5E5E5"> to allow</font>

520
00:26:32,670 --> 00:26:37,140
and it was up to<font color="#E5E5E5"> the developer to</font><font color="#CCCCCC"> select</font>

521
00:26:34,770 --> 00:26:40,650
<font color="#CCCCCC">it second one what are the explicit</font>

522
00:26:37,140 --> 00:26:44,570
security control open<font color="#E5E5E5"> SSL has something</font>

523
00:26:40,650 --> 00:26:48,690
called<font color="#CCCCCC"> self-test anyone</font><font color="#E5E5E5"> of you familiar</font>

524
00:26:44,570 --> 00:26:50,460
so self<font color="#E5E5E5"> test is something like how as</font><font color="#CCCCCC"> as</font>

525
00:26:48,690 --> 00:26:53,220
a consumer how will I make sure that

526
00:26:50,460 --> 00:26:55,440
<font color="#E5E5E5">this cryptographic</font><font color="#CCCCCC"> implementation is not</font>

527
00:26:53,220 --> 00:26:58,590
<font color="#E5E5E5">corrupted so there will be an integrity</font>

528
00:26:55,440 --> 00:27:01,680
<font color="#CCCCCC">test running every time open SSL</font>

529
00:26:58,590 --> 00:27:03,510
instance<font color="#E5E5E5"> starts or there will be known</font>

530
00:27:01,680 --> 00:27:05,730
<font color="#CCCCCC">answers</font><font color="#E5E5E5"> test for encryption and</font>

531
00:27:03,510 --> 00:27:06,960
<font color="#E5E5E5">decryption just to make sure the</font>

532
00:27:05,730 --> 00:27:08,850
algorithm<font color="#CCCCCC"> isn't</font>

533
00:27:06,960 --> 00:27:13,080
the implementation<font color="#CCCCCC"> of the algorithm is</font>

534
00:27:08,850 --> 00:27:15,689
intact now the reason I have<font color="#E5E5E5"> put these</font>

535
00:27:13,080 --> 00:27:18,600
in explicit security control<font color="#E5E5E5"> because</font>

536
00:27:15,690 --> 00:27:20,700
this is something<font color="#E5E5E5"> developer don't need</font>

537
00:27:18,600 --> 00:27:23,040
to configure<font color="#E5E5E5"> it is already available</font>

538
00:27:20,700 --> 00:27:25,110
there<font color="#E5E5E5"> in case of implement implicit</font>

539
00:27:23,040 --> 00:27:27,659
security control<font color="#CCCCCC"> that cypher key sizes</font>

540
00:27:25,110 --> 00:27:31,919
<font color="#E5E5E5">you need to pick for</font><font color="#CCCCCC"> example if you use</font>

541
00:27:27,660 --> 00:27:33,510
<font color="#E5E5E5">triple deaths in a two key mode that</font>

542
00:27:31,920 --> 00:27:37,200
<font color="#E5E5E5">gives hundred and twelve bits of</font>

543
00:27:33,510 --> 00:27:39,870
<font color="#CCCCCC">security and it's not sufficient if you</font>

544
00:27:37,200 --> 00:27:41,760
use triple deaths<font color="#E5E5E5"> in three key mode that</font>

545
00:27:39,870 --> 00:27:45,389
gives<font color="#E5E5E5"> hundred and sixty eight bits of</font>

546
00:27:41,760 --> 00:27:47,370
security<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> what you really you</font>

547
00:27:45,390 --> 00:27:49,950
should<font color="#E5E5E5"> be using but how many developers</font>

548
00:27:47,370 --> 00:27:52,949
<font color="#E5E5E5">really know how many</font><font color="#CCCCCC"> security</font>

549
00:27:49,950 --> 00:27:55,230
<font color="#E5E5E5">professionals really know this so this</font>

550
00:27:52,950 --> 00:27:57,360
<font color="#CCCCCC">is a very granular information that you</font>

551
00:27:55,230 --> 00:28:00,240
need<font color="#E5E5E5"> to look for</font><font color="#CCCCCC"> and provide right</font>

552
00:27:57,360 --> 00:28:02,010
<font color="#E5E5E5">guidance to your developers I know it's</font>

553
00:28:00,240 --> 00:28:05,160
hard but<font color="#E5E5E5"> you know if you are</font><font color="#CCCCCC"> gonna use</font>

554
00:28:02,010 --> 00:28:10,110
<font color="#CCCCCC">open SSL in your products and website</font>

555
00:28:05,160 --> 00:28:12,300
why not<font color="#E5E5E5"> spend time third one as output</font>

556
00:28:10,110 --> 00:28:14,370
<font color="#CCCCCC">we need to look for known</font>

557
00:28:12,300 --> 00:28:16,440
vulnerabilities we need to look for

558
00:28:14,370 --> 00:28:19,979
unknown vulnerabilities and create that

559
00:28:16,440 --> 00:28:23,340
security guidance and depending on<font color="#E5E5E5"> your</font>

560
00:28:19,980 --> 00:28:25,160
consumers<font color="#CCCCCC"> if you have mass number of</font>

561
00:28:23,340 --> 00:28:27,840
<font color="#E5E5E5">developers who</font><font color="#CCCCCC"> are going to use your</font>

562
00:28:25,160 --> 00:28:29,180
implementation then you might want to

563
00:28:27,840 --> 00:28:31,080
create a secure by default

564
00:28:29,180 --> 00:28:33,870
implementation where it is kind<font color="#CCCCCC"> of</font>

565
00:28:31,080 --> 00:28:38,370
<font color="#CCCCCC">hardened for</font><font color="#E5E5E5"> all the configurations</font><font color="#CCCCCC"> that</font>

566
00:28:33,870 --> 00:28:42,330
<font color="#CCCCCC">you have looked now because I have</font>

567
00:28:38,370 --> 00:28:46,350
picked open SSL I felt like adding this

568
00:28:42,330 --> 00:28:51,389
slide open<font color="#E5E5E5"> SSL has so much crypto and it</font>

569
00:28:46,350 --> 00:28:54,209
is outside the skill set<font color="#E5E5E5"> of any pen</font>

570
00:28:51,390 --> 00:28:57,090
<font color="#E5E5E5">tester or even absurd professional</font>

571
00:28:54,210 --> 00:28:59,730
unfortunately because crypto is hard<font color="#CCCCCC"> so</font>

572
00:28:57,090 --> 00:29:03,060
for cryptographic libraries we<font color="#CCCCCC"> have to</font>

573
00:28:59,730 --> 00:29:05,370
go through<font color="#E5E5E5"> formal verification and again</font>

574
00:29:03,060 --> 00:29:07,620
<font color="#E5E5E5">I'm not asking you to go through</font><font color="#CCCCCC"> fifth</font>

575
00:29:05,370 --> 00:29:11,760
validation<font color="#CCCCCC"> because it takes time it's</font>

576
00:29:07,620 --> 00:29:14,639
expensive and<font color="#E5E5E5"> it's pain in neck but what</font>

577
00:29:11,760 --> 00:29:16,920
you can do is take their standard take a

578
00:29:14,640 --> 00:29:19,470
look at what is applicable<font color="#CCCCCC"> to</font>

579
00:29:16,920 --> 00:29:21,390
I'll be sharing<font color="#E5E5E5"> these slides</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> so</font>

580
00:29:19,470 --> 00:29:24,140
don't strain your eyes<font color="#CCCCCC"> what is</font>

581
00:29:21,390 --> 00:29:26,480
applicable<font color="#E5E5E5"> to your software libraries</font>

582
00:29:24,140 --> 00:29:29,580
<font color="#E5E5E5">I'm going to pick one thing</font>

583
00:29:26,480 --> 00:29:33,390
<font color="#E5E5E5">cryptographic key management how the</font>

584
00:29:29,580 --> 00:29:36,179
keys are<font color="#CCCCCC"> generated</font><font color="#E5E5E5"> is my seed is equal</font>

585
00:29:33,390 --> 00:29:37,830
<font color="#E5E5E5">to seed key is the entropy supplied to</font>

586
00:29:36,180 --> 00:29:39,510
the random number generator<font color="#E5E5E5"> which is</font>

587
00:29:37,830 --> 00:29:41,850
<font color="#CCCCCC">ultimately</font><font color="#E5E5E5"> responsible for key</font>

588
00:29:39,510 --> 00:29:44,910
<font color="#CCCCCC">generations sufficient</font><font color="#E5E5E5"> all those good</font>

589
00:29:41,850 --> 00:29:47,340
stuff<font color="#CCCCCC"> fits offers so go download 5th</font>

590
00:29:44,910 --> 00:29:49,050
standard<font color="#E5E5E5"> the specification is available</font>

591
00:29:47,340 --> 00:29:53,040
to everybody and<font color="#E5E5E5"> take a look at those</font>

592
00:29:49,050 --> 00:29:58,250
crypto functionalities sometimes things

593
00:29:53,040 --> 00:29:58,250
are beyond pen<font color="#E5E5E5"> test and this is the area</font>

594
00:29:58,370 --> 00:30:05,719
<font color="#E5E5E5">now why just doing FIPS 140 -</font><font color="#CCCCCC"> 2</font>

595
00:30:02,250 --> 00:30:08,370
validation or why just looking at crypto

596
00:30:05,720 --> 00:30:12,360
<font color="#E5E5E5">implementation is</font><font color="#CCCCCC"> not sufficient because</font>

597
00:30:08,370 --> 00:30:14,429
in<font color="#E5E5E5"> fifth certification they only look at</font>

598
00:30:12,360 --> 00:30:17,040
the implementation<font color="#E5E5E5"> they don't look at</font>

599
00:30:14,430 --> 00:30:19,980
the<font color="#E5E5E5"> end-to-end security of the library</font>

600
00:30:17,040 --> 00:30:22,889
and one of the example<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> how the</font>

601
00:30:19,980 --> 00:30:26,100
keys are generated<font color="#E5E5E5"> entropy fine how the</font>

602
00:30:22,890 --> 00:30:28,080
key is<font color="#CCCCCC"> 0 eyes</font><font color="#E5E5E5"> within library once you</font>

603
00:30:26,100 --> 00:30:30,480
see the red boundary<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the logical</font>

604
00:30:28,080 --> 00:30:33,240
boundary once the key leaves the

605
00:30:30,480 --> 00:30:35,940
boundary of<font color="#E5E5E5"> the library it is the</font>

606
00:30:33,240 --> 00:30:38,940
responsibility of the application to

607
00:30:35,940 --> 00:30:42,420
handle<font color="#E5E5E5"> it securely and FIPS 140 - 2</font><font color="#CCCCCC"> or</font>

608
00:30:38,940 --> 00:30:46,170
any cryptographer don't give a damn this

609
00:30:42,420 --> 00:30:48,180
comes under application security<font color="#E5E5E5"> so we</font>

610
00:30:46,170 --> 00:30:50,340
need to make<font color="#CCCCCC"> sure it is covered</font>

611
00:30:48,180 --> 00:30:54,720
<font color="#CCCCCC">end-to-end</font><font color="#E5E5E5"> and that's the reason open</font>

612
00:30:50,340 --> 00:30:58,080
<font color="#E5E5E5">SSL has so many vulnerabilities in spite</font>

613
00:30:54,720 --> 00:31:01,380
of<font color="#E5E5E5"> being reviewed so many times</font><font color="#CCCCCC"> I used</font>

614
00:30:58,080 --> 00:31:03,929
to be a<font color="#CCCCCC"> fifth validator I used to review</font>

615
00:31:01,380 --> 00:31:07,170
<font color="#E5E5E5">open SSL and</font><font color="#CCCCCC"> six</font><font color="#E5E5E5"> months boom there is a</font>

616
00:31:03,930 --> 00:31:09,030
<font color="#CCCCCC">vulnerability</font><font color="#E5E5E5"> looking at buffer overflow</font>

617
00:31:07,170 --> 00:31:11,670
was not part of<font color="#E5E5E5"> my</font><font color="#CCCCCC"> job as a validator</font>

618
00:31:09,030 --> 00:31:14,280
<font color="#CCCCCC">now as a holistic security professional</font>

619
00:31:11,670 --> 00:31:18,930
I look at everything<font color="#E5E5E5"> crypto as well as</font>

620
00:31:14,280 --> 00:31:22,710
<font color="#E5E5E5">app</font><font color="#CCCCCC"> sec so yes going back to libraries</font>

621
00:31:18,930 --> 00:31:24,450
<font color="#E5E5E5">as a developer</font><font color="#CCCCCC"> or security engineer</font>

622
00:31:22,710 --> 00:31:28,910
helping our developers we need to look

623
00:31:24,450 --> 00:31:28,910
at everything that<font color="#E5E5E5"> library implements</font>

624
00:31:30,509 --> 00:31:35,350
<font color="#CCCCCC">this is one nice</font><font color="#E5E5E5"> code by Ross Anderson I</font>

625
00:31:34,120 --> 00:31:37,809
absolutely love it

626
00:31:35,350 --> 00:31:39,908
I'm gonna read it<font color="#E5E5E5"> unfortunately the</font>

627
00:31:37,809 --> 00:31:42,668
group the computer security and

628
00:31:39,909 --> 00:31:46,720
cryptology<font color="#E5E5E5"> communities have drifted</font>

629
00:31:42,669 --> 00:31:49,029
<font color="#E5E5E5">apart</font><font color="#CCCCCC"> over the last</font><font color="#E5E5E5"> 25 years</font><font color="#CCCCCC"> security</font>

630
00:31:46,720 --> 00:31:51,879
people<font color="#E5E5E5"> don't always understand</font><font color="#CCCCCC"> the</font>

631
00:31:49,029 --> 00:31:54,100
available crypto tools<font color="#E5E5E5"> and crypto people</font>

632
00:31:51,879 --> 00:31:59,500
don't<font color="#E5E5E5"> always understand the real world</font>

633
00:31:54,100 --> 00:32:07,590
<font color="#E5E5E5">security problems</font><font color="#CCCCCC"> makes sense</font><font color="#E5E5E5"> we need to</font>

634
00:31:59,500 --> 00:32:11,139
work together<font color="#E5E5E5"> so yeah this is conclusion</font>

635
00:32:07,590 --> 00:32:16,870
<font color="#E5E5E5">we need to focus on libraries</font><font color="#CCCCCC"> and not</font>

636
00:32:11,139 --> 00:32:18,840
just application because 80%<font color="#E5E5E5"> of the</font>

637
00:32:16,870 --> 00:32:22,899
application code is actually library

638
00:32:18,840 --> 00:32:25,240
then we must evaluate libraries<font color="#E5E5E5"> because</font>

639
00:32:22,899 --> 00:32:27,610
one<font color="#E5E5E5"> vulnerability in library gets</font>

640
00:32:25,240 --> 00:32:29,830
replicated on all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> applications</font>

641
00:32:27,610 --> 00:32:33,129
<font color="#CCCCCC">services product which are built on top</font>

642
00:32:29,830 --> 00:32:34,750
<font color="#CCCCCC">of it</font><font color="#E5E5E5"> so if your organization</font><font color="#CCCCCC"> is using</font>

643
00:32:33,129 --> 00:32:37,120
these are the four<font color="#CCCCCC"> libraries or dev</font>

644
00:32:34,750 --> 00:32:40,360
framework<font color="#E5E5E5"> probably it's really good idea</font>

645
00:32:37,120 --> 00:32:42,279
<font color="#E5E5E5">to spend time hardening it by listing</font>

646
00:32:40,360 --> 00:32:43,779
the explicit security control implicit

647
00:32:42,279 --> 00:32:47,340
security control and<font color="#E5E5E5"> doing</font>

648
00:32:43,779 --> 00:32:51,519
implementation<font color="#CCCCCC"> specific security checks</font>

649
00:32:47,340 --> 00:32:54,340
<font color="#CCCCCC">in case of libraries data classification</font>

650
00:32:51,519 --> 00:32:56,379
and flow is<font color="#E5E5E5"> irrelevant because the data</font>

651
00:32:54,340 --> 00:33:00,639
flow of the library really<font color="#E5E5E5"> depends on</font>

652
00:32:56,379 --> 00:33:02,769
the host<font color="#CCCCCC"> application if we have like</font>

653
00:33:00,639 --> 00:33:04,779
thousands<font color="#E5E5E5"> of application we tend to</font>

654
00:33:02,769 --> 00:33:06,820
classify those applications<font color="#CCCCCC"> oh I'm just</font>

655
00:33:04,779 --> 00:33:08,470
going<font color="#E5E5E5"> to look at the read application or</font>

656
00:33:06,820 --> 00:33:11,620
the mission-critical applications<font color="#CCCCCC"> I'm</font>

657
00:33:08,470 --> 00:33:14,169
going to look at you know these

658
00:33:11,620 --> 00:33:16,149
financially critical application but in

659
00:33:14,169 --> 00:33:18,730
case of library there<font color="#E5E5E5"> is no such</font>

660
00:33:16,149 --> 00:33:22,629
classification because<font color="#CCCCCC"> a library can be</font>

661
00:33:18,730 --> 00:33:26,259
used by any application so all libraries

662
00:33:22,629 --> 00:33:31,029
<font color="#E5E5E5">must be</font><font color="#CCCCCC"> evaluated a single bug in a</font>

663
00:33:26,259 --> 00:33:34,450
security focused library could<font color="#E5E5E5"> turn a</font>

664
00:33:31,029 --> 00:33:38,080
big problem<font color="#CCCCCC"> so every bug in a library is</font>

665
00:33:34,450 --> 00:33:41,529
a security bug<font color="#E5E5E5"> and if you want to really</font>

666
00:33:38,080 --> 00:33:43,240
scale<font color="#E5E5E5"> help your developers then create</font>

667
00:33:41,529 --> 00:33:48,070
secure by default<font color="#CCCCCC"> implement</font>

668
00:33:43,240 --> 00:34:01,900
of libraries thank you guys I'll take

669
00:33:48,070 --> 00:34:04,120
questions<font color="#E5E5E5"> are there any questions have</font>

670
00:34:01,900 --> 00:34:06,010
you<font color="#E5E5E5"> found any good</font><font color="#CCCCCC"> took ways to</font>

671
00:34:04,120 --> 00:34:07,209
inventory<font color="#E5E5E5"> these open source libraries to</font>

672
00:34:06,010 --> 00:34:08,530
start off with like<font color="#E5E5E5"> I mean I know there</font>

673
00:34:07,210 --> 00:34:11,199
are<font color="#CCCCCC"> like commercial versions and stuff</font>

674
00:34:08,530 --> 00:34:13,149
but any<font color="#E5E5E5"> anything like how do you first</font>

675
00:34:11,199 --> 00:34:25,330
<font color="#E5E5E5">inventory them even</font><font color="#CCCCCC"> before like knowing</font>

676
00:34:13,149 --> 00:34:29,049
what<font color="#E5E5E5"> like what already is</font><font color="#CCCCCC"> out there so I</font>

677
00:34:25,330 --> 00:34:32,020
like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work backward things differ from</font>

678
00:34:29,050 --> 00:34:34,030
organization to organization may I know

679
00:34:32,020 --> 00:34:42,639
how many applications<font color="#CCCCCC"> of</font><font color="#E5E5E5"> product your</font>

680
00:34:34,030 --> 00:34:45,580
organization has so what yes<font color="#E5E5E5"> so what I</font>

681
00:34:42,639 --> 00:34:47,649
did<font color="#CCCCCC"> I created a simple</font><font color="#E5E5E5"> survey send it</font><font color="#CCCCCC"> to</font>

682
00:34:45,580 --> 00:34:50,080
all business unit<font color="#E5E5E5"> and I asked them</font><font color="#CCCCCC"> to</font>

683
00:34:47,649 --> 00:34:51,730
state the programming languages they

684
00:34:50,080 --> 00:34:55,389
widely used for developing their

685
00:34:51,730 --> 00:34:57,220
products and application<font color="#E5E5E5"> and of course</font>

686
00:34:55,389 --> 00:35:00,310
the<font color="#E5E5E5"> development framework and libraries</font>

687
00:34:57,220 --> 00:35:03,069
<font color="#E5E5E5">so I kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> work backward and it really</font>

688
00:35:00,310 --> 00:35:06,070
<font color="#E5E5E5">worked then I had this finite list of</font>

689
00:35:03,070 --> 00:35:08,520
libraries that<font color="#CCCCCC"> I need to worry</font><font color="#E5E5E5"> did I</font>

690
00:35:06,070 --> 00:35:08,520
answer<font color="#E5E5E5"> your question</font>

691
00:35:12,620 --> 00:35:19,470
see the thing is<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> you can</font>

692
00:35:15,300 --> 00:35:23,220
purchase<font color="#E5E5E5"> black duck or or but but</font><font color="#CCCCCC"> the</font>

693
00:35:19,470 --> 00:35:25,740
<font color="#CCCCCC">thing is black duck is</font><font color="#E5E5E5"> gonna help you</font>

694
00:35:23,220 --> 00:35:27,689
identify known vulnerabilities it's

695
00:35:25,740 --> 00:35:29,250
going to<font color="#E5E5E5"> help you identify dependency</font>

696
00:35:27,690 --> 00:35:31,770
risk and it's<font color="#E5E5E5"> gonna help you with</font>

697
00:35:29,250 --> 00:35:34,560
licensing risk<font color="#E5E5E5"> but you want to do more</font>

698
00:35:31,770 --> 00:35:36,360
<font color="#E5E5E5">than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you want to really create one</font>

699
00:35:34,560 --> 00:35:38,220
click library secure by default

700
00:35:36,360 --> 00:35:40,500
implementation so<font color="#CCCCCC"> that your developers</font>

701
00:35:38,220 --> 00:35:42,569
will simply start using<font color="#E5E5E5"> and</font><font color="#CCCCCC"> black duck</font>

702
00:35:40,500 --> 00:35:45,330
has limitations<font color="#E5E5E5"> or</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> equivalent tools</font>

703
00:35:42,570 --> 00:35:47,250
and these developers they really get

704
00:35:45,330 --> 00:35:49,110
excited<font color="#E5E5E5"> when they find new cool</font>

705
00:35:47,250 --> 00:35:51,240
libraries out there<font color="#CCCCCC"> which has high</font>

706
00:35:49,110 --> 00:35:53,550
performance<font color="#E5E5E5"> or whatever new</font>

707
00:35:51,240 --> 00:35:55,799
functionalities<font color="#E5E5E5"> so they download and</font>

708
00:35:53,550 --> 00:35:57,270
they use it<font color="#E5E5E5"> so it's really good idea if</font>

709
00:35:55,800 --> 00:35:59,700
<font color="#CCCCCC">we establish</font><font color="#E5E5E5"> a good communication</font>

710
00:35:57,270 --> 00:36:04,070
<font color="#E5E5E5">channel with them every time</font><font color="#CCCCCC"> you use</font>

711
00:35:59,700 --> 00:36:04,069
<font color="#E5E5E5">something cool new let</font><font color="#CCCCCC"> us know was the</font>

712
00:36:12,050 --> 00:36:16,680
and the thing is you know<font color="#E5E5E5"> there are</font>

713
00:36:14,760 --> 00:36:20,010
always less number<font color="#CCCCCC"> of people in the</font>

714
00:36:16,680 --> 00:36:22,140
security<font color="#E5E5E5"> department so not every POC</font>

715
00:36:20,010 --> 00:36:25,260
make it to the<font color="#E5E5E5"> product so let them do</font>

716
00:36:22,140 --> 00:36:27,290
their innovative<font color="#E5E5E5"> stuff and always send</font>

717
00:36:25,260 --> 00:36:29,640
that survey hey tell<font color="#CCCCCC"> me which</font>

718
00:36:27,290 --> 00:36:31,680
programming languages you<font color="#E5E5E5"> are using and</font>

719
00:36:29,640 --> 00:36:39,720
I'll tell you one<font color="#CCCCCC"> thing I</font><font color="#E5E5E5"> came across</font>

720
00:36:31,680 --> 00:36:41,460
some<font color="#E5E5E5"> skaila Ruby</font><font color="#CCCCCC"> and are applications</font>

721
00:36:39,720 --> 00:36:43,759
written<font color="#E5E5E5"> in these languages and there was</font>

722
00:36:41,460 --> 00:36:47,010
no static tool that I could<font color="#CCCCCC"> use</font><font color="#E5E5E5"> reliably</font>

723
00:36:43,760 --> 00:36:49,800
so I basically<font color="#E5E5E5"> you know work with</font>

724
00:36:47,010 --> 00:36:52,890
<font color="#E5E5E5">developers developed secure coding</font>

725
00:36:49,800 --> 00:36:54,840
guidelines<font color="#E5E5E5"> and then conducted manual</font>

726
00:36:52,890 --> 00:36:56,850
code review and<font color="#E5E5E5"> then created the list of</font>

727
00:36:54,840 --> 00:36:58,830
implicit explicit security control and

728
00:36:56,850 --> 00:37:01,140
every time you<font color="#CCCCCC"> use this API switch</font><font color="#E5E5E5"> ones</font>

729
00:36:58,830 --> 00:37:09,990
<font color="#E5E5E5">how to use them securely so that's what</font>

730
00:37:01,140 --> 00:37:11,299
helped me any other<font color="#E5E5E5"> questions any other</font>

731
00:37:09,990 --> 00:37:21,770
questions

732
00:37:11,300 --> 00:37:23,270
I think for the<font color="#E5E5E5"> first time as a security</font>

733
00:37:21,770 --> 00:37:25,550
professional you need<font color="#E5E5E5"> to go through it</font>

734
00:37:23,270 --> 00:37:28,730
<font color="#E5E5E5">there is nothing like available out</font>

735
00:37:25,550 --> 00:37:30,830
there<font color="#CCCCCC"> and you need</font><font color="#E5E5E5"> to harden the library</font>

736
00:37:28,730 --> 00:37:34,550
depending on your use<font color="#E5E5E5"> case</font>

737
00:37:30,830 --> 00:37:37,400
so maybe the cipher suite requirement

738
00:37:34,550 --> 00:37:42,920
for financial industry is<font color="#E5E5E5"> different from</font>

739
00:37:37,400 --> 00:37:46,010
government or some other regulations you

740
00:37:42,920 --> 00:37:48,200
know just<font color="#E5E5E5"> just doing blind scanning and</font>

741
00:37:46,010 --> 00:37:50,810
taking<font color="#E5E5E5"> care of those false positive true</font>

742
00:37:48,200 --> 00:37:53,169
positive<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> going to generate</font>

743
00:37:50,810 --> 00:38:01,940
<font color="#E5E5E5">value</font><font color="#CCCCCC"> anybody can do that</font>

744
00:37:53,170 --> 00:38:05,360
yeah<font color="#E5E5E5"> any other question</font><font color="#CCCCCC"> I think the</font>

745
00:38:01,940 --> 00:38:07,430
first step<font color="#E5E5E5"> is if we</font><font color="#CCCCCC"> identify the list of</font>

746
00:38:05,360 --> 00:38:09,530
libraries<font color="#CCCCCC"> that your developers use quite</font>

747
00:38:07,430 --> 00:38:17,149
widely<font color="#E5E5E5"> and just go through</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> that</font>

748
00:38:09,530 --> 00:38:18,920
will be<font color="#E5E5E5"> really beneficial yeah and if</font>

749
00:38:17,150 --> 00:38:21,800
you are looking for strategy on how<font color="#E5E5E5"> to</font>

750
00:38:18,920 --> 00:38:23,810
break down a foundational dev framework

751
00:38:21,800 --> 00:38:25,820
into<font color="#E5E5E5"> different components and libraries</font>

752
00:38:23,810 --> 00:38:28,810
we can talk<font color="#E5E5E5"> offline oh I know how to</font>

753
00:38:25,820 --> 00:38:31,310
prioritize<font color="#E5E5E5"> libraries because you know I</font>

754
00:38:28,810 --> 00:38:34,340
was working<font color="#CCCCCC"> on a homegrown a</font>

755
00:38:31,310 --> 00:38:36,710
foundational dev framework<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> 300</font>

756
00:38:34,340 --> 00:38:38,720
components and we ended up prioritizing

757
00:38:36,710 --> 00:38:41,480
90 of them<font color="#CCCCCC"> four at a time</font>

758
00:38:38,720 --> 00:38:44,500
<font color="#CCCCCC">okay I'll sync up at the offline then</font>

759
00:38:41,480 --> 00:38:44,500
<font color="#E5E5E5">okay that was very helpful</font>

760
00:38:46,300 --> 00:38:53,140
any other questions can<font color="#E5E5E5"> we get a round</font>

761
00:38:51,080 --> 00:38:55,200
<font color="#E5E5E5">of applause for our presenter</font>

762
00:38:53,140 --> 00:38:55,200
you

