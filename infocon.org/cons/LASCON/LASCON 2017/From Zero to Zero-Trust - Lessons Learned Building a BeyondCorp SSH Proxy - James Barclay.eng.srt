1
00:00:01,800 --> 00:00:04,890
[Music]

2
00:00:17,610 --> 00:00:22,810
today I'm going<font color="#E5E5E5"> to talk about some</font><font color="#CCCCCC"> of</font>

3
00:00:21,460 --> 00:00:26,700
the<font color="#E5E5E5"> lessons that we learned at duo</font>

4
00:00:22,810 --> 00:00:29,919
building a<font color="#CCCCCC"> be on</font><font color="#E5E5E5"> Corp inspired</font><font color="#CCCCCC"> SSH proxy</font>

5
00:00:26,700 --> 00:00:34,080
<font color="#CCCCCC">and before I do that I'll quickly go</font>

6
00:00:29,920 --> 00:00:37,000
<font color="#CCCCCC">over the agenda here</font><font color="#E5E5E5"> so I'll start by</font>

7
00:00:34,080 --> 00:00:40,330
just briefly covering what<font color="#CCCCCC"> beyond Corp</font>

8
00:00:37,000 --> 00:00:42,730
is then I'll talk about one specific

9
00:00:40,330 --> 00:00:45,010
<font color="#CCCCCC">part of the beyond Corp model which is</font>

10
00:00:42,730 --> 00:00:46,300
the access proxy and then I'll move<font color="#E5E5E5"> on</font>

11
00:00:45,010 --> 00:00:48,849
<font color="#E5E5E5">to talking about how we were able</font><font color="#CCCCCC"> to</font>

12
00:00:46,300 --> 00:00:51,819
<font color="#E5E5E5">tunnel SSH traffic through the access</font>

13
00:00:48,850 --> 00:00:53,290
proxy proxy<font color="#E5E5E5"> and then I will cover the</font>

14
00:00:51,820 --> 00:00:54,790
client and server implementations<font color="#E5E5E5"> of</font>

15
00:00:53,290 --> 00:01:00,699
<font color="#CCCCCC">that and then hopefully</font><font color="#E5E5E5"> we'll have time</font>

16
00:00:54,790 --> 00:01:05,470
<font color="#CCCCCC">for questions so beyond Corp you've got</font>

17
00:01:00,699 --> 00:01:07,990
data and attackers<font color="#E5E5E5"> want him</font><font color="#CCCCCC"> are it so</font>

18
00:01:05,470 --> 00:01:10,590
core to the beyond<font color="#E5E5E5"> core philosophy is</font>

19
00:01:07,990 --> 00:01:13,360
the idea that walls don't<font color="#E5E5E5"> work that that</font>

20
00:01:10,590 --> 00:01:17,610
<font color="#E5E5E5">a perimeter is not sufficient</font><font color="#CCCCCC"> to keep</font>

21
00:01:13,360 --> 00:01:20,740
attackers out so<font color="#CCCCCC"> Beyond Corp is a</font>

22
00:01:17,610 --> 00:01:22,750
reinventing of the corporate network by

23
00:01:20,740 --> 00:01:27,850
Google<font color="#E5E5E5"> that was introduced by Google</font>

24
00:01:22,750 --> 00:01:29,680
<font color="#E5E5E5">that</font><font color="#CCCCCC"> shifts access control from the</font>

25
00:01:27,850 --> 00:01:32,020
<font color="#E5E5E5">perimeter to individual</font><font color="#CCCCCC"> users and</font>

26
00:01:29,680 --> 00:01:34,650
<font color="#CCCCCC">devices</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the end result of that</font><font color="#E5E5E5"> is</font>

27
00:01:32,020 --> 00:01:37,390
<font color="#CCCCCC">that users will be</font><font color="#E5E5E5"> able to access</font>

28
00:01:34,650 --> 00:01:41,560
corporate<font color="#E5E5E5"> resources that you without a</font>

29
00:01:37,390 --> 00:01:44,230
VPN so in<font color="#E5E5E5"> this case it wouldn't matter</font>

30
00:01:41,560 --> 00:01:46,240
if<font color="#E5E5E5"> you're working from a coffee shop or</font>

31
00:01:44,230 --> 00:01:47,410
a plane or<font color="#E5E5E5"> your company's corporate</font>

32
00:01:46,240 --> 00:01:51,970
headquarters<font color="#E5E5E5"> you would get the same</font>

33
00:01:47,410 --> 00:01:54,220
checks<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> like as an example let's</font>

34
00:01:51,970 --> 00:01:57,130
say you know you<font color="#E5E5E5"> have a company lunch</font>

35
00:01:54,220 --> 00:01:59,140
menu and in order to<font color="#E5E5E5"> view the the lunch</font>

36
00:01:57,130 --> 00:02:02,619
menu you just<font color="#CCCCCC"> need to have a managed</font>

37
00:01:59,140 --> 00:02:05,740
<font color="#E5E5E5">device or but</font><font color="#CCCCCC"> but to access like source</font>

38
00:02:02,620 --> 00:02:08,349
code or like anything<font color="#E5E5E5"> more valuable than</font>

39
00:02:05,740 --> 00:02:10,269
<font color="#CCCCCC">that maybe you'd have to have not only a</font>

40
00:02:08,348 --> 00:02:14,339
managed<font color="#CCCCCC"> device but</font><font color="#E5E5E5"> had the latest</font>

41
00:02:10,269 --> 00:02:14,340
security patches and<font color="#E5E5E5"> so on and so forth</font>

42
00:02:14,700 --> 00:02:21,010
<font color="#CCCCCC">so beyond</font><font color="#E5E5E5"> Corp is a pretty complex</font>

43
00:02:18,190 --> 00:02:24,489
system and<font color="#CCCCCC"> it's it's been discussed at</font>

44
00:02:21,010 --> 00:02:26,890
length<font color="#CCCCCC"> most notably in like the</font><font color="#E5E5E5"> the</font>

45
00:02:24,489 --> 00:02:29,100
Google<font color="#E5E5E5"> research papers</font><font color="#CCCCCC"> that they make</font>

46
00:02:26,890 --> 00:02:29,100
<font color="#CCCCCC">available</font>

47
00:02:29,840 --> 00:02:33,250
but today I'm just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk about</font>

48
00:02:31,250 --> 00:02:35,810
one part of<font color="#CCCCCC"> it which is the axis proxy</font>

49
00:02:33,250 --> 00:02:37,849
<font color="#CCCCCC">which is responsible</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> gating</font><font color="#E5E5E5"> access</font>

50
00:02:35,810 --> 00:02:44,690
to internal<font color="#E5E5E5"> resources you can think of</font>

51
00:02:37,849 --> 00:02:47,238
it kind<font color="#E5E5E5"> of like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> reverse proxy so the</font>

52
00:02:44,690 --> 00:02:50,150
access proxy<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is obviously an</font>

53
00:02:47,239 --> 00:02:52,069
oversimplified diagram but hopefully

54
00:02:50,150 --> 00:02:53,810
you'll get the<font color="#CCCCCC"> idea you have</font><font color="#E5E5E5"> external</font>

55
00:02:52,069 --> 00:02:57,129
clients or in some cases internal

56
00:02:53,810 --> 00:03:00,379
clients that want to<font color="#E5E5E5"> get to stuff and</font>

57
00:02:57,129 --> 00:03:03,349
the the access proxy is responsible<font color="#CCCCCC"> for</font>

58
00:03:00,379 --> 00:03:05,690
determining<font color="#E5E5E5"> if the user and the device</font>

59
00:03:03,349 --> 00:03:11,959
<font color="#E5E5E5">are authorized to</font><font color="#CCCCCC"> access that that</font>

60
00:03:05,690 --> 00:03:15,379
resource<font color="#CCCCCC"> and before I dive in too deeply</font>

61
00:03:11,959 --> 00:03:17,959
like on the<font color="#E5E5E5"> implementation and they're</font>

62
00:03:15,379 --> 00:03:20,899
like other things<font color="#CCCCCC"> I'm just gonna get</font>

63
00:03:17,959 --> 00:03:23,170
that some terminology<font color="#CCCCCC"> out of the way so</font>

64
00:03:20,900 --> 00:03:25,790
I'll<font color="#CCCCCC"> use the term</font><font color="#E5E5E5"> access proxy</font>

65
00:03:23,170 --> 00:03:29,119
throughout this talk which in this case

66
00:03:25,790 --> 00:03:30,620
refers<font color="#CCCCCC"> to a web server and a reverse</font>

67
00:03:29,120 --> 00:03:32,480
proxy<font color="#E5E5E5"> that is responsible for</font>

68
00:03:30,620 --> 00:03:37,069
<font color="#E5E5E5">authorizing and proxying requests</font>

69
00:03:32,480 --> 00:03:41,138
<font color="#E5E5E5">whether it's like HTTP or SSH or RDP or</font>

70
00:03:37,069 --> 00:03:43,730
whatever<font color="#E5E5E5"> and then a service which is any</font>

71
00:03:41,139 --> 00:03:49,579
any application or server that sits

72
00:03:43,730 --> 00:03:52,880
<font color="#E5E5E5">behind the access proxy so to dive in a</font>

73
00:03:49,579 --> 00:03:55,010
little deeper<font color="#CCCCCC"> on the access proxy it's a</font>

74
00:03:52,880 --> 00:03:56,959
web application<font color="#CCCCCC"> that handles</font><font color="#E5E5E5"> determining</font>

75
00:03:55,010 --> 00:04:00,168
whether a<font color="#CCCCCC"> user's authorized</font><font color="#E5E5E5"> to access a</font>

76
00:03:56,959 --> 00:04:02,019
service and then a reverse<font color="#CCCCCC"> proxy that</font>

77
00:04:00,169 --> 00:04:05,269
communicates with that web application

78
00:04:02,019 --> 00:04:07,400
<font color="#CCCCCC">to basically ask is this how is this</font>

79
00:04:05,269 --> 00:04:12,560
<font color="#E5E5E5">request authorized and if so it'll it'll</font>

80
00:04:07,400 --> 00:04:15,980
allow it and again going<font color="#E5E5E5"> a little deeper</font>

81
00:04:12,560 --> 00:04:18,709
<font color="#CCCCCC">on the services in practice is just a</font>

82
00:04:15,980 --> 00:04:21,680
DNS name<font color="#E5E5E5"> so you could have like wiki</font>

83
00:04:18,709 --> 00:04:25,250
example.com<font color="#E5E5E5"> or SSH server one example</font>

84
00:04:21,680 --> 00:04:28,190
<font color="#E5E5E5">com in each one of these services in the</font>

85
00:04:25,250 --> 00:04:31,580
access proxy parlance<font color="#CCCCCC"> we'll have an</font>

86
00:04:28,190 --> 00:04:34,490
external<font color="#E5E5E5"> name and an internal name or IP</font>

87
00:04:31,580 --> 00:04:38,229
and then again users are authorized to

88
00:04:34,490 --> 00:04:38,229
<font color="#CCCCCC">access services by the</font><font color="#E5E5E5"> access proxy</font>

89
00:04:38,680 --> 00:04:45,460
so the<font color="#E5E5E5"> most</font><font color="#CCCCCC"> obvious use case for this</font>

90
00:04:42,680 --> 00:04:49,430
was<font color="#E5E5E5"> web applications so when we</font>

91
00:04:45,460 --> 00:04:51,039
<font color="#E5E5E5">initially built this at duo that was the</font>

92
00:04:49,430 --> 00:04:55,639
first<font color="#E5E5E5"> thing we wanted to solve for</font>

93
00:04:51,040 --> 00:04:58,280
<font color="#E5E5E5">mostly because that's the like every</font>

94
00:04:55,639 --> 00:05:00,290
employee<font color="#CCCCCC"> needed</font><font color="#E5E5E5"> you know needed to</font>

95
00:04:58,280 --> 00:05:01,549
<font color="#CCCCCC">access at least one web application that</font>

96
00:05:00,290 --> 00:05:04,940
<font color="#CCCCCC">they would</font><font color="#E5E5E5"> normally have to</font><font color="#CCCCCC"> access</font>

97
00:05:01,550 --> 00:05:06,500
through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> VPN</font><font color="#E5E5E5"> and we wanted</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> we</font>

98
00:05:04,940 --> 00:05:08,419
wanted to give our<font color="#CCCCCC"> employees a way to do</font>

99
00:05:06,500 --> 00:05:14,150
that<font color="#E5E5E5"> without you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> having to use a</font>

100
00:05:08,419 --> 00:05:15,710
VPN<font color="#CCCCCC"> so that's what we solved for so I'm</font>

101
00:05:14,150 --> 00:05:17,960
going to<font color="#E5E5E5"> talk a little bit</font><font color="#CCCCCC"> about the the</font>

102
00:05:15,710 --> 00:05:20,989
authentication<font color="#CCCCCC"> flow of the the access</font>

103
00:05:17,960 --> 00:05:25,789
proxy<font color="#CCCCCC"> there's a really handy feature</font><font color="#E5E5E5"> in</font>

104
00:05:20,990 --> 00:05:28,430
nginx the this<font color="#E5E5E5"> author request directive</font>

105
00:05:25,789 --> 00:05:30,620
which handles authorization based on the

106
00:05:28,430 --> 00:05:33,590
result of a sub request<font color="#E5E5E5"> so I mentioned</font>

107
00:05:30,620 --> 00:05:37,520
<font color="#CCCCCC">earlier</font><font color="#E5E5E5"> that the access proxy was a web</font>

108
00:05:33,590 --> 00:05:41,750
app and a reverse proxy<font color="#CCCCCC"> and that the the</font>

109
00:05:37,520 --> 00:05:43,639
reverse proxy basically asks the web app

110
00:05:41,750 --> 00:05:45,440
is this you<font color="#E5E5E5"> know is this authorized is</font>

111
00:05:43,639 --> 00:05:48,830
this<font color="#E5E5E5"> user and device authorized to</font>

112
00:05:45,440 --> 00:05:51,740
access<font color="#E5E5E5"> this resource so off request is a</font>

113
00:05:48,830 --> 00:05:52,490
perfect candidate for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because it</font>

114
00:05:51,740 --> 00:05:55,280
will return

115
00:05:52,490 --> 00:05:57,800
so if request returns<font color="#E5E5E5"> a 200</font><font color="#CCCCCC"> response</font>

116
00:05:55,280 --> 00:06:00,679
code then<font color="#CCCCCC"> the request is considered</font>

117
00:05:57,800 --> 00:06:04,310
authorized and then is allowed if it

118
00:06:00,680 --> 00:06:07,520
<font color="#CCCCCC">returns a 401 or</font><font color="#E5E5E5"> 403 access is denied</font>

119
00:06:04,310 --> 00:06:09,590
<font color="#E5E5E5">and</font><font color="#CCCCCC"> then any other</font><font color="#E5E5E5"> HTTP status code is</font>

120
00:06:07,520 --> 00:06:12,698
considered an error<font color="#E5E5E5"> and</font><font color="#CCCCCC"> would the</font>

121
00:06:09,590 --> 00:06:12,698
<font color="#E5E5E5">request would be denied</font>

122
00:06:13,169 --> 00:06:19,020
so like you can<font color="#CCCCCC"> imagine in this</font><font color="#E5E5E5"> case</font>

123
00:06:15,870 --> 00:06:21,180
there's a sub request that checks for<font color="#CCCCCC"> a</font>

124
00:06:19,020 --> 00:06:24,870
valid session cookie for that particular

125
00:06:21,180 --> 00:06:26,669
service say wikidot example.com<font color="#CCCCCC"> and for</font>

126
00:06:24,870 --> 00:06:30,749
unauthorized requests we would initiate

127
00:06:26,669 --> 00:06:34,080
<font color="#E5E5E5">an SSO flow by returning a 401 and then</font>

128
00:06:30,749 --> 00:06:37,499
having nginx redirect to a<font color="#E5E5E5"> login URL</font>

129
00:06:34,080 --> 00:06:40,198
that we specify in<font color="#E5E5E5"> an in a header and</font>

130
00:06:37,499 --> 00:06:41,729
then eventually nginx<font color="#E5E5E5"> proxies the the</font>

131
00:06:40,199 --> 00:06:47,520
<font color="#E5E5E5">authorized</font><font color="#CCCCCC"> requested back-end</font><font color="#E5E5E5"> to the</font>

132
00:06:41,729 --> 00:06:49,289
<font color="#CCCCCC">backend</font><font color="#E5E5E5"> services so to give you an idea</font>

133
00:06:47,520 --> 00:06:53,969
<font color="#E5E5E5">of what that might look like at least</font>

134
00:06:49,289 --> 00:06:57,930
with nginx<font color="#CCCCCC"> we specify this this auth</font>

135
00:06:53,969 --> 00:07:01,439
request<font color="#E5E5E5"> directive up here and point it</font>

136
00:06:57,930 --> 00:07:03,330
to this<font color="#E5E5E5"> slash verify handler which is an</font>

137
00:07:01,439 --> 00:07:06,659
internal<font color="#CCCCCC"> handler meaning that it's only</font>

138
00:07:03,330 --> 00:07:11,460
<font color="#E5E5E5">accessible</font><font color="#CCCCCC"> to the reverse proxy and not</font>

139
00:07:06,659 --> 00:07:16,279
externally<font color="#CCCCCC"> and then we also set it</font>

140
00:07:11,460 --> 00:07:18,960
before<font color="#CCCCCC"> o1</font><font color="#E5E5E5"> is returned that we set this</font>

141
00:07:16,279 --> 00:07:20,909
header here<font color="#E5E5E5"> which is the ID access proxy</font>

142
00:07:18,960 --> 00:07:23,250
check header<font color="#E5E5E5"> to what whatever the</font>

143
00:07:20,909 --> 00:07:25,110
upstream<font color="#CCCCCC"> webserver set it to and</font><font color="#E5E5E5"> that's</font>

144
00:07:23,250 --> 00:07:28,259
that would cause the entry next to

145
00:07:25,110 --> 00:07:33,089
redirect you to the<font color="#E5E5E5"> SSO login if a 401</font>

146
00:07:28,259 --> 00:07:34,289
<font color="#E5E5E5">was returned and don't worry about</font><font color="#CCCCCC"> like</font>

147
00:07:33,089 --> 00:07:40,020
<font color="#E5E5E5">writing any of this stuff that like all</font>

148
00:07:34,289 --> 00:07:41,818
the slides will be available so how

149
00:07:40,020 --> 00:07:43,919
would<font color="#E5E5E5"> you know when</font><font color="#CCCCCC"> now we'll</font><font color="#E5E5E5"> get to</font>

150
00:07:41,819 --> 00:07:46,620
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> SSH like how would we do</font>

151
00:07:43,919 --> 00:07:50,068
this<font color="#E5E5E5"> tunnel ssh traffic through an</font>

152
00:07:46,620 --> 00:07:52,500
access proxy it's not as obvious as<font color="#CCCCCC"> how</font>

153
00:07:50,069 --> 00:07:54,270
it<font color="#E5E5E5"> would work for</font><font color="#CCCCCC"> web applications</font><font color="#E5E5E5"> and</font>

154
00:07:52,500 --> 00:07:58,080
the reason we really<font color="#E5E5E5"> wanted to do this</font>

155
00:07:54,270 --> 00:08:00,448
is because<font color="#CCCCCC"> ssh is at least you know a</font>

156
00:07:58,080 --> 00:08:03,599
duo or<font color="#CCCCCC"> in in my department at least is</font>

157
00:08:00,449 --> 00:08:06,449
like the second<font color="#CCCCCC"> most</font><font color="#E5E5E5"> common thing that</font>

158
00:08:03,599 --> 00:08:10,370
<font color="#E5E5E5">we need the VPN for so that was an</font>

159
00:08:06,449 --> 00:08:12,529
obvious<font color="#E5E5E5"> next choice in like the</font><font color="#CCCCCC"> type of</font>

160
00:08:10,370 --> 00:08:15,889
protocol<font color="#CCCCCC"> you know the next</font><font color="#E5E5E5"> obvious</font>

161
00:08:12,529 --> 00:08:15,889
<font color="#E5E5E5">protocol to choose</font>

162
00:08:17,479 --> 00:08:23,090
and so so when we set out<font color="#CCCCCC"> to</font><font color="#E5E5E5"> build this</font>

163
00:08:19,970 --> 00:08:26,690
<font color="#E5E5E5">we had a few tenets that</font><font color="#CCCCCC"> we wanted</font><font color="#E5E5E5"> to</font>

164
00:08:23,090 --> 00:08:28,909
stick to the first one<font color="#E5E5E5"> Google actually</font>

165
00:08:26,690 --> 00:08:30,199
calls this out in one<font color="#CCCCCC"> of the beyond Corp</font>

166
00:08:28,910 --> 00:08:32,990
research papers is that<font color="#CCCCCC"> it should be</font>

167
00:08:30,199 --> 00:08:35,810
really really<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to add</font><font color="#CCCCCC"> new services</font>

168
00:08:32,990 --> 00:08:37,820
<font color="#E5E5E5">behind the access proxy like if it's if</font>

169
00:08:35,809 --> 00:08:40,098
it takes a day and a half<font color="#CCCCCC"> for you to</font>

170
00:08:37,820 --> 00:08:43,520
just to like put the access proxy in

171
00:08:40,099 --> 00:08:48,970
front of your lunch menu then no one's

172
00:08:43,520 --> 00:08:53,329
going<font color="#CCCCCC"> to use it</font><font color="#E5E5E5"> so so that was important</font>

173
00:08:48,970 --> 00:08:54,950
<font color="#CCCCCC">another</font><font color="#E5E5E5"> thing was</font><font color="#CCCCCC"> that we wanted to have</font>

174
00:08:53,330 --> 00:08:58,339
this work with<font color="#CCCCCC"> existing as</font><font color="#E5E5E5"> a sage</font>

175
00:08:54,950 --> 00:09:00,080
tooling so<font color="#CCCCCC"> OpenSSH</font><font color="#E5E5E5"> as well as the chrome</font>

176
00:08:58,339 --> 00:09:03,860
secure shell<font color="#E5E5E5"> because we're big fans of</font>

177
00:09:00,080 --> 00:09:07,339
<font color="#E5E5E5">Chrome OS we didn't want</font><font color="#CCCCCC"> to for example</font>

178
00:09:03,860 --> 00:09:09,920
<font color="#CCCCCC">write our own SSH client to be able</font><font color="#E5E5E5"> to</font>

179
00:09:07,339 --> 00:09:11,630
<font color="#E5E5E5">tunnel that data through through the</font>

180
00:09:09,920 --> 00:09:15,469
<font color="#E5E5E5">access proxy so we wanted it</font><font color="#CCCCCC"> to work</font>

181
00:09:11,630 --> 00:09:16,850
<font color="#E5E5E5">with everything</font><font color="#CCCCCC"> and then we also wanted</font>

182
00:09:15,470 --> 00:09:22,760
<font color="#CCCCCC">to use a browser based</font><font color="#E5E5E5"> authentication</font>

183
00:09:16,850 --> 00:09:24,260
flow and the reason was<font color="#E5E5E5"> that if we</font><font color="#CCCCCC"> could</font>

184
00:09:22,760 --> 00:09:26,180
use the browser based authentication

185
00:09:24,260 --> 00:09:28,730
flow then we could keep the same

186
00:09:26,180 --> 00:09:31,510
authentication<font color="#E5E5E5"> method that we used for</font>

187
00:09:28,730 --> 00:09:31,510
web applications

188
00:09:32,750 --> 00:09:38,480
another thing we considered important

189
00:09:36,200 --> 00:09:41,750
was that<font color="#E5E5E5"> this access proxy you should be</font>

190
00:09:38,480 --> 00:09:45,700
transparent<font color="#CCCCCC"> to the backend</font><font color="#E5E5E5"> regardless of</font>

191
00:09:41,750 --> 00:09:47,570
the protocol<font color="#E5E5E5"> and for non HTTP protocols</font>

192
00:09:45,700 --> 00:09:52,970
<font color="#CCCCCC">WebSockets ended up being a</font><font color="#E5E5E5"> good</font>

193
00:09:47,570 --> 00:09:54,500
candidate for<font color="#E5E5E5"> this so turns out Google</font>

194
00:09:52,970 --> 00:09:57,290
actually<font color="#E5E5E5"> talks about</font><font color="#CCCCCC"> this as well</font><font color="#E5E5E5"> in the</font>

195
00:09:54,500 --> 00:10:00,200
beyond<font color="#E5E5E5"> Corp research papers</font><font color="#CCCCCC"> in part 3</font>

196
00:09:57,290 --> 00:10:02,719
<font color="#E5E5E5">the access proxy and they specifically</font>

197
00:10:00,200 --> 00:10:05,600
<font color="#E5E5E5">call out this proxy command facility</font>

198
00:10:02,720 --> 00:10:07,730
<font color="#E5E5E5">which I'll talk about later</font><font color="#CCCCCC"> they also</font>

199
00:10:05,600 --> 00:10:12,190
<font color="#E5E5E5">describe it as easy which I generally</font>

200
00:10:07,730 --> 00:10:12,190
disagree with but maybe it<font color="#E5E5E5"> is for</font><font color="#CCCCCC"> Google</font>

201
00:10:13,450 --> 00:10:22,910
so I mentioned<font color="#CCCCCC"> chrome secure shell we're</font>

202
00:10:19,399 --> 00:10:25,010
big fans of Chrome OS<font color="#E5E5E5"> at</font><font color="#CCCCCC"> duo so Google</font>

203
00:10:22,910 --> 00:10:27,719
makes this secure shell<font color="#E5E5E5"> X chrome</font>

204
00:10:25,010 --> 00:10:29,610
extension available<font color="#E5E5E5"> and it's open</font><font color="#CCCCCC"> source</font>

205
00:10:27,720 --> 00:10:34,050
and it has support for the<font color="#CCCCCC"> so called</font>

206
00:10:29,610 --> 00:10:37,199
<font color="#E5E5E5">HTTP</font><font color="#CCCCCC"> to SSH relay in</font><font color="#E5E5E5"> the comments for</font>

207
00:10:34,050 --> 00:10:41,550
this<font color="#E5E5E5"> in this specific file</font><font color="#CCCCCC"> google</font>

208
00:10:37,199 --> 00:10:44,310
mentions that the pub there are no

209
00:10:41,550 --> 00:10:46,229
public relays available<font color="#E5E5E5"> nor is the</font>

210
00:10:44,310 --> 00:10:48,649
source code for their relays available

211
00:10:46,230 --> 00:10:50,730
but there<font color="#E5E5E5"> should be</font><font color="#CCCCCC"> enough information</font>

212
00:10:48,649 --> 00:10:54,319
for you to build<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of your</font><font color="#E5E5E5"> own</font><font color="#CCCCCC"> so</font>

213
00:10:50,730 --> 00:10:58,279
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> what we decided have to do and</font>

214
00:10:54,319 --> 00:11:01,829
yeah that that made us<font color="#E5E5E5"> pretty happy so</font>

215
00:10:58,279 --> 00:11:03,420
<font color="#CCCCCC">this is actually what the the</font><font color="#E5E5E5"> chrome</font>

216
00:11:01,829 --> 00:11:06,300
secure shell looks like so I mean<font color="#CCCCCC"> I'm</font>

217
00:11:03,420 --> 00:11:08,339
going<font color="#E5E5E5"> to show you this workflow for</font>

218
00:11:06,300 --> 00:11:13,079
<font color="#E5E5E5">chrome secure shell and then for</font>

219
00:11:08,339 --> 00:11:16,170
standard like open<font color="#E5E5E5"> SSH command line on</font>

220
00:11:13,079 --> 00:11:19,138
Mac OS<font color="#E5E5E5"> but the chrome in the chrome</font>

221
00:11:16,170 --> 00:11:20,639
secure shell case<font color="#E5E5E5"> there's this text</font>

222
00:11:19,139 --> 00:11:24,629
field which you<font color="#E5E5E5"> can't</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> see here</font>

223
00:11:20,639 --> 00:11:27,990
<font color="#E5E5E5">but I have it in a later slide but below</font>

224
00:11:24,629 --> 00:11:31,050
<font color="#CCCCCC">the username and the host</font><font color="#E5E5E5"> there's these</font>

225
00:11:27,990 --> 00:11:33,779
relay options and you<font color="#E5E5E5"> can specify the</font>

226
00:11:31,050 --> 00:11:35,519
relay server to connect to as well as

227
00:11:33,779 --> 00:11:39,480
the the port to<font color="#E5E5E5"> use and whether or not</font>

228
00:11:35,519 --> 00:11:41,899
you want to use SSL so<font color="#CCCCCC"> show</font><font color="#E5E5E5"> you what</font>

229
00:11:39,480 --> 00:11:41,899
<font color="#CCCCCC">that looks like</font>

230
00:11:43,370 --> 00:11:50,459
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> already in</font><font color="#E5E5E5"> the browser so you</font>

231
00:11:47,759 --> 00:11:55,889
know we<font color="#CCCCCC"> just redirect</font><font color="#E5E5E5"> to like the access</font>

232
00:11:50,459 --> 00:11:57,809
proxy URL<font color="#CCCCCC"> and handle you know determine</font>

233
00:11:55,889 --> 00:12:02,939
<font color="#CCCCCC">if the user and the device are</font>

234
00:11:57,809 --> 00:12:04,920
authorized and<font color="#E5E5E5"> then once the we</font>

235
00:12:02,939 --> 00:12:07,920
<font color="#E5E5E5">determined this the request to be</font>

236
00:12:04,920 --> 00:12:12,000
authorized<font color="#E5E5E5"> we redirect to this chrome -</font>

237
00:12:07,920 --> 00:12:15,599
extension<font color="#E5E5E5"> colon slash slash you</font><font color="#CCCCCC"> our URI</font>

238
00:12:12,000 --> 00:12:18,059
scheme<font color="#E5E5E5"> that actually like points it to</font>

239
00:12:15,600 --> 00:12:20,189
the Chrome extension ID<font color="#E5E5E5"> itself with a</font>

240
00:12:18,059 --> 00:12:22,680
few other parameters<font color="#E5E5E5"> and then I'm able</font>

241
00:12:20,189 --> 00:12:24,629
to to<font color="#E5E5E5"> tunnel those bytes through the</font>

242
00:12:22,680 --> 00:12:26,128
access proxy so all that those nan gab

243
00:12:24,629 --> 00:12:30,300
bytes are tunneling through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ISIS</font>

244
00:12:26,129 --> 00:12:32,939
proxy<font color="#CCCCCC"> so what</font><font color="#E5E5E5"> is it</font><font color="#CCCCCC"> look like I'm Mac</font><font color="#E5E5E5"> OS</font>

245
00:12:30,300 --> 00:12:36,929
or like Linux or Windows or whatever

246
00:12:32,939 --> 00:12:38,730
<font color="#E5E5E5">using standard ssh tooling so I</font>

247
00:12:36,929 --> 00:12:41,610
<font color="#E5E5E5">mentioned proxy</font><font color="#CCCCCC"> command</font><font color="#E5E5E5"> this takes</font>

248
00:12:38,730 --> 00:12:43,500
advantage of that<font color="#E5E5E5"> facility</font>

249
00:12:41,610 --> 00:12:47,339
user types<font color="#E5E5E5"> you know username attic</font>

250
00:12:43,500 --> 00:12:51,149
whatever<font color="#CCCCCC"> as a sage host we</font><font color="#E5E5E5"> launched the</font>

251
00:12:47,339 --> 00:12:56,850
default browser handle the<font color="#CCCCCC"> the device</font>

252
00:12:51,149 --> 00:12:58,079
<font color="#E5E5E5">authentication and then once we</font>

253
00:12:56,850 --> 00:13:01,709
determine the<font color="#CCCCCC"> request to be</font><font color="#E5E5E5"> authorized</font>

254
00:12:58,079 --> 00:13:04,649
we redirect to a local host in<font color="#E5E5E5"> this case</font>

255
00:13:01,709 --> 00:13:07,890
<font color="#E5E5E5">or like to send the the credential like</font>

256
00:13:04,649 --> 00:13:10,649
the cookie that<font color="#CCCCCC"> we need for passing</font><font color="#E5E5E5"> that</font>

257
00:13:07,890 --> 00:13:14,220
data through the access proxy<font color="#CCCCCC"> back to</font>

258
00:13:10,649 --> 00:13:21,300
the you know<font color="#E5E5E5"> to the client so and then</font>

259
00:13:14,220 --> 00:13:24,930
<font color="#E5E5E5">again</font><font color="#CCCCCC"> just log</font><font color="#E5E5E5"> in as usual and it's me</font>

260
00:13:21,300 --> 00:13:27,630
and<font color="#CCCCCC"> cat all the way down ok so how this</font>

261
00:13:24,930 --> 00:13:30,810
<font color="#CCCCCC">works in a nutshell for chrome secure</font>

262
00:13:27,630 --> 00:13:34,290
shell we have the the chrome secure

263
00:13:30,810 --> 00:13:37,529
shell client<font color="#E5E5E5"> which communicates with the</font>

264
00:13:34,290 --> 00:13:39,149
access proxy that<font color="#E5E5E5"> you specify over</font>

265
00:13:37,529 --> 00:13:41,490
WebSockets<font color="#CCCCCC"> and then eventually those</font>

266
00:13:39,149 --> 00:13:44,279
bytes just make their way to the

267
00:13:41,490 --> 00:13:49,130
<font color="#CCCCCC">back-end service for OpenSSH it's a</font>

268
00:13:44,279 --> 00:13:54,260
little more complex<font color="#CCCCCC"> so we have a client</font>

269
00:13:49,130 --> 00:13:57,899
<font color="#CCCCCC">that being the ssh client in this</font><font color="#E5E5E5"> case</font>

270
00:13:54,260 --> 00:14:00,029
<font color="#E5E5E5">launches our external program which is</font>

271
00:13:57,899 --> 00:14:03,000
<font color="#E5E5E5">just like an</font><font color="#CCCCCC"> on-demand proxy using</font><font color="#E5E5E5"> this</font>

272
00:14:00,029 --> 00:14:05,820
proxy community and then our client is<font color="#CCCCCC"> a</font>

273
00:14:03,000 --> 00:14:08,390
WebSockets client so it sends the as the

274
00:14:05,820 --> 00:14:10,529
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ssh</font><font color="#E5E5E5"> bytes through the access proxy</font>

275
00:14:08,390 --> 00:14:12,630
and then eventually<font color="#E5E5E5"> you know the access</font>

276
00:14:10,529 --> 00:14:18,890
proxy will unpack those WebSocket frames

277
00:14:12,630 --> 00:14:21,630
and send it<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> backend so this is a</font>

278
00:14:18,890 --> 00:14:23,850
simple like data flow diagram showing

279
00:14:21,630 --> 00:14:28,230
like what what this looks like for<font color="#E5E5E5"> a</font>

280
00:14:23,850 --> 00:14:31,260
chrome secure shell you<font color="#CCCCCC"> have a series of</font>

281
00:14:28,230 --> 00:14:33,930
HTTP handlers<font color="#E5E5E5"> as well as a WebSocket</font>

282
00:14:31,260 --> 00:14:41,000
<font color="#E5E5E5">Handler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's all defined in that</font>

283
00:14:33,930 --> 00:14:43,709
any<font color="#E5E5E5"> SSH Google real</font><font color="#CCCCCC"> ajs yeah</font><font color="#E5E5E5"> so yeah I I</font>

284
00:14:41,000 --> 00:14:48,810
will have<font color="#E5E5E5"> more time</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> questions at the</font>

285
00:14:43,709 --> 00:14:51,119
<font color="#CCCCCC">end but but yeah basically</font><font color="#E5E5E5"> this yeah</font>

286
00:14:48,810 --> 00:14:54,619
you're<font color="#E5E5E5"> right that this this is is only</font>

287
00:14:51,120 --> 00:14:57,080
<font color="#E5E5E5">doing authentication</font><font color="#CCCCCC"> at the time</font>

288
00:14:54,620 --> 00:15:00,200
<font color="#CCCCCC">you know when the user logs in not not</font>

289
00:14:57,080 --> 00:15:04,520
continuously<font color="#CCCCCC"> no there there could</font><font color="#E5E5E5"> be you</font>

290
00:15:00,200 --> 00:15:07,310
<font color="#CCCCCC">know</font><font color="#E5E5E5"> like additional work</font><font color="#CCCCCC"> to be done to</font>

291
00:15:04,520 --> 00:15:09,319
like limit<font color="#E5E5E5"> the amount of time a session</font>

292
00:15:07,310 --> 00:15:11,329
can exist and so on and so forth or like

293
00:15:09,320 --> 00:15:13,790
if you if you wanted to like visibility

294
00:15:11,330 --> 00:15:15,290
into the ssh traffic that<font color="#E5E5E5"> was passing</font>

295
00:15:13,790 --> 00:15:17,599
through the<font color="#E5E5E5"> access proxy like you have</font>

296
00:15:15,290 --> 00:15:20,689
you see those bytes so but but you're

297
00:15:17,600 --> 00:15:22,880
right<font color="#CCCCCC"> that like this the this particular</font>

298
00:15:20,690 --> 00:15:25,250
example<font color="#CCCCCC"> isn't doing any type of like</font>

299
00:15:22,880 --> 00:15:27,800
continuous authentication<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> I mean in</font>

300
00:15:25,250 --> 00:15:32,240
<font color="#E5E5E5">our testing it hasn't it like it's</font>

301
00:15:27,800 --> 00:15:34,099
<font color="#E5E5E5">actually been pretty okay so I mean but</font>

302
00:15:32,240 --> 00:15:38,360
that<font color="#CCCCCC"> definitely is a concern</font><font color="#E5E5E5"> and in the</font>

303
00:15:34,100 --> 00:15:40,310
<font color="#E5E5E5">the there is the solution to</font><font color="#CCCCCC"> that would</font>

304
00:15:38,360 --> 00:15:42,230
<font color="#CCCCCC">be maybe more access proxies so if you</font>

305
00:15:40,310 --> 00:15:44,060
if you were concerned about load but

306
00:15:42,230 --> 00:15:46,880
I'll move on for<font color="#CCCCCC"> now and we</font><font color="#E5E5E5"> can talk</font>

307
00:15:44,060 --> 00:15:49,040
<font color="#E5E5E5">later about that but again</font><font color="#CCCCCC"> so that and</font>

308
00:15:46,880 --> 00:15:53,050
and this<font color="#E5E5E5"> is the next so this is a</font>

309
00:15:49,040 --> 00:15:56,120
diagram<font color="#CCCCCC"> showing what it looks like on</font>

310
00:15:53,050 --> 00:15:58,819
for<font color="#E5E5E5"> Mac OS or not Mac OS specifically</font>

311
00:15:56,120 --> 00:16:03,710
but<font color="#E5E5E5"> using as</font><font color="#CCCCCC"> OpenSSH with the proxy</font>

312
00:15:58,820 --> 00:16:06,620
command facility<font color="#CCCCCC"> so so next time</font><font color="#E5E5E5"> I'm</font>

313
00:16:03,710 --> 00:16:08,780
going<font color="#CCCCCC"> to talk about the any SSH relay</font>

314
00:16:06,620 --> 00:16:12,490
protocol which is<font color="#CCCCCC"> what what is</font><font color="#E5E5E5"> described</font>

315
00:16:08,780 --> 00:16:18,699
in that that chrome exterior shell

316
00:16:12,490 --> 00:16:21,760
<font color="#CCCCCC">JavaScript file and so</font><font color="#E5E5E5"> again getting</font>

317
00:16:18,700 --> 00:16:24,280
terminology<font color="#CCCCCC"> out of the way any SSH is</font>

318
00:16:21,760 --> 00:16:26,450
synonymous<font color="#E5E5E5"> with the chrome secure shell</font>

319
00:16:24,280 --> 00:16:28,819
so<font color="#E5E5E5"> anytime I say that you can just think</font>

320
00:16:26,450 --> 00:16:30,590
chrome secure shell<font color="#CCCCCC"> but if</font><font color="#E5E5E5"> that is</font>

321
00:16:28,820 --> 00:16:33,260
described as a chrome app that combines

322
00:16:30,590 --> 00:16:36,320
<font color="#CCCCCC">each term with an apple build of OpenSSH</font>

323
00:16:33,260 --> 00:16:38,900
blah<font color="#E5E5E5"> blah blah</font><font color="#CCCCCC"> so what is Native Client</font>

324
00:16:36,320 --> 00:16:41,380
<font color="#E5E5E5">is a that is a sandbox for running</font>

325
00:16:38,900 --> 00:16:44,990
compiled<font color="#E5E5E5"> C and C++ code in the browser</font>

326
00:16:41,380 --> 00:16:47,360
<font color="#E5E5E5">and then each term which is an HTML</font>

327
00:16:44,990 --> 00:16:52,220
terminal emulator<font color="#E5E5E5"> so just in case you</font>

328
00:16:47,360 --> 00:16:53,870
were<font color="#CCCCCC"> wondering so like I mentioned</font>

329
00:16:52,220 --> 00:16:56,240
previously<font color="#E5E5E5"> chrome secure shell supports</font>

330
00:16:53,870 --> 00:16:58,040
this any<font color="#E5E5E5"> SSH relay protocol it's</font>

331
00:16:56,240 --> 00:17:02,600
<font color="#E5E5E5">documented in that file right there in</font>

332
00:16:58,040 --> 00:17:06,980
<font color="#CCCCCC">that path any SS HJs</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> ssh Google</font><font color="#E5E5E5"> real</font>

333
00:17:02,600 --> 00:17:08,599
<font color="#CCCCCC">ajs</font><font color="#E5E5E5"> again Google doesn't provide source</font>

334
00:17:06,980 --> 00:17:12,079
for the relay itself but they describe

335
00:17:08,599 --> 00:17:14,178
<font color="#CCCCCC">http/2 SSH relay that uses WebSockets</font>

336
00:17:12,079 --> 00:17:17,539
and the handlers are all documented<font color="#E5E5E5"> in</font>

337
00:17:14,179 --> 00:17:19,280
that<font color="#E5E5E5"> file</font><font color="#CCCCCC"> and the cool thing about this</font>

338
00:17:17,539 --> 00:17:20,209
is<font color="#CCCCCC"> like I</font><font color="#E5E5E5"> said we were big fans of</font>

339
00:17:19,280 --> 00:17:23,389
Chrome OS<font color="#E5E5E5"> at</font><font color="#CCCCCC"> duo</font>

340
00:17:20,209 --> 00:17:25,130
so by following this protocol<font color="#E5E5E5"> to the</font>

341
00:17:23,390 --> 00:17:27,110
letter we were you know<font color="#E5E5E5"> this just worked</font>

342
00:17:25,130 --> 00:17:29,650
out<font color="#E5E5E5"> of the box</font><font color="#CCCCCC"> with chrome secure shell</font>

343
00:17:27,109 --> 00:17:29,649
which was<font color="#E5E5E5"> great</font>

344
00:17:30,770 --> 00:17:38,000
so this<font color="#E5E5E5"> any SSH relay protocol is an</font>

345
00:17:34,640 --> 00:17:41,030
HTTP<font color="#E5E5E5"> to SSH relay protocol that's</font>

346
00:17:38,000 --> 00:17:43,400
supported in<font color="#E5E5E5"> chrome secure shell like I</font>

347
00:17:41,030 --> 00:17:44,780
said previously defines a series of HTTP

348
00:17:43,400 --> 00:17:47,090
handlers which I'll talk about in<font color="#E5E5E5"> a</font>

349
00:17:44,780 --> 00:17:50,330
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> those are exactly and</font>

350
00:17:47,090 --> 00:17:52,580
then at its<font color="#E5E5E5"> core the the bytes that</font><font color="#CCCCCC"> pass</font>

351
00:17:50,330 --> 00:17:56,030
through the<font color="#E5E5E5"> access proxy are just the</font>

352
00:17:52,580 --> 00:17:59,658
<font color="#E5E5E5">SSH payload then itself</font><font color="#CCCCCC"> plus this custom</font>

353
00:17:56,030 --> 00:18:02,510
like AK which<font color="#E5E5E5"> again I'll talk about and</font>

354
00:17:59,659 --> 00:18:04,789
then it's<font color="#E5E5E5"> like it's worth noting that it</font>

355
00:18:02,510 --> 00:18:10,250
<font color="#E5E5E5">uses WebSocket binary frames as opposed</font>

356
00:18:04,789 --> 00:18:13,370
to utf-8 frames so<font color="#E5E5E5"> WebSockets</font><font color="#CCCCCC"> just</font>

357
00:18:10,250 --> 00:18:16,190
wanted to<font color="#E5E5E5"> quickly talk</font><font color="#CCCCCC"> about what what</font>

358
00:18:13,370 --> 00:18:18,559
WebSockets is so<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> message framing</font>

359
00:18:16,190 --> 00:18:21,380
layered over<font color="#E5E5E5"> TCP and it was designed for</font>

360
00:18:18,559 --> 00:18:23,330
<font color="#E5E5E5">two-way communication between</font><font color="#CCCCCC"> browsers</font>

361
00:18:21,380 --> 00:18:26,600
and servers<font color="#E5E5E5"> so you wouldn't have to open</font>

362
00:18:23,330 --> 00:18:28,158
up multiple<font color="#E5E5E5"> HTTP connections</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> of</font>

363
00:18:26,600 --> 00:18:30,918
course<font color="#E5E5E5"> you know you're not limited to</font>

364
00:18:28,159 --> 00:18:34,940
<font color="#E5E5E5">using it in browser contexts</font><font color="#CCCCCC"> we use</font><font color="#E5E5E5"> it</font>

365
00:18:30,919 --> 00:18:36,440
in<font color="#E5E5E5"> our local</font><font color="#CCCCCC"> on-demand</font><font color="#E5E5E5"> proxy</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is</font>

366
00:18:34,940 --> 00:18:39,080
also<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that Google</font><font color="#E5E5E5"> talks about</font>

367
00:18:36,440 --> 00:18:40,610
in one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> papers is that it allows</font>

368
00:18:39,080 --> 00:18:42,970
you<font color="#E5E5E5"> to separate the device</font>

369
00:18:40,610 --> 00:18:46,158
authentication from user authentication

370
00:18:42,970 --> 00:18:49,130
<font color="#CCCCCC">that's why for</font><font color="#E5E5E5"> example you know</font><font color="#CCCCCC"> that I</font>

371
00:18:46,159 --> 00:18:51,289
<font color="#E5E5E5">launch the browser I'm determining</font>

372
00:18:49,130 --> 00:18:56,900
whether the request is authorized<font color="#CCCCCC"> and</font>

373
00:18:51,289 --> 00:19:00,320
<font color="#CCCCCC">end-user</font><font color="#E5E5E5"> but but not actually you know</font>

374
00:18:56,900 --> 00:19:02,929
we're<font color="#E5E5E5"> not authorizing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> SSH login</font>

375
00:19:00,320 --> 00:19:08,360
that's still handled with your SSH key

376
00:19:02,929 --> 00:19:11,480
or password or<font color="#E5E5E5"> whatever so WebSockets is</font>

377
00:19:08,360 --> 00:19:14,299
a it starts<font color="#E5E5E5"> out as an HTTP request an</font>

378
00:19:11,480 --> 00:19:16,760
upgrade request and once the connection

379
00:19:14,299 --> 00:19:19,490
has been established<font color="#E5E5E5"> the</font><font color="#CCCCCC"> server responds</font>

380
00:19:16,760 --> 00:19:21,590
with<font color="#E5E5E5"> an HTTP 101 switching protocols and</font>

381
00:19:19,490 --> 00:19:24,950
it gets upgraded to

382
00:19:21,590 --> 00:19:27,230
assistant connection<font color="#CCCCCC"> so and then also</font>

383
00:19:24,950 --> 00:19:30,080
the both the client<font color="#CCCCCC"> and server are able</font>

384
00:19:27,230 --> 00:19:34,070
to<font color="#E5E5E5"> close the connection using this close</font>

385
00:19:30,080 --> 00:19:35,539
control<font color="#E5E5E5"> frame which is not honored by</font>

386
00:19:34,070 --> 00:19:37,700
<font color="#E5E5E5">Chrome secure shell which I'll talk</font>

387
00:19:35,539 --> 00:19:41,150
about later<font color="#E5E5E5"> but there are other ways to</font>

388
00:19:37,700 --> 00:19:44,870
<font color="#E5E5E5">close the connection</font><font color="#CCCCCC"> so just real</font>

389
00:19:41,150 --> 00:19:47,390
<font color="#CCCCCC">quickly</font><font color="#E5E5E5"> this is what a WebSocket upgrade</font>

390
00:19:44,870 --> 00:19:49,699
<font color="#E5E5E5">request looks like from a client this is</font>

391
00:19:47,390 --> 00:19:51,169
<font color="#E5E5E5">the client handshake and then this is</font>

392
00:19:49,700 --> 00:19:53,740
the server responding with yes we're

393
00:19:51,169 --> 00:19:58,370
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> switch protocols to</font><font color="#CCCCCC"> WebSocket</font>

394
00:19:53,740 --> 00:19:59,600
and then this is a WebSocket frame<font color="#E5E5E5"> I'm</font>

395
00:19:58,370 --> 00:20:02,418
not going<font color="#E5E5E5"> to talk about all of it but</font>

396
00:19:59,600 --> 00:20:05,149
just<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can see it here the</font><font color="#CCCCCC"> opcode</font>

397
00:20:02,419 --> 00:20:09,850
is<font color="#E5E5E5"> defined it's just those four bytes</font>

398
00:20:05,149 --> 00:20:13,039
there<font color="#E5E5E5"> and the rest</font><font color="#CCCCCC"> of its just</font><font color="#E5E5E5"> a yeah</font>

399
00:20:09,850 --> 00:20:14,570
protocol specific stuff but we'll<font color="#E5E5E5"> talk a</font>

400
00:20:13,039 --> 00:20:18,520
<font color="#E5E5E5">little bit about the different</font><font color="#CCCCCC"> options</font>

401
00:20:14,570 --> 00:20:21,200
that that we're using in<font color="#E5E5E5"> this example</font>

402
00:20:18,520 --> 00:20:26,149
<font color="#E5E5E5">all right so then within the WebSocket</font>

403
00:20:21,200 --> 00:20:31,429
frame we have<font color="#E5E5E5"> our own frame that which</font>

404
00:20:26,149 --> 00:20:35,149
is<font color="#E5E5E5"> just an AK plus the SSH payload so</font>

405
00:20:31,429 --> 00:20:37,789
this is what the<font color="#E5E5E5"> client would would send</font>

406
00:20:35,149 --> 00:20:39,908
would prepend to the the<font color="#CCCCCC"> ssh payload</font>

407
00:20:37,789 --> 00:20:42,799
when it passes<font color="#CCCCCC"> it to the</font><font color="#E5E5E5"> access proxy</font>

408
00:20:39,909 --> 00:20:45,890
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this this aking protocol or whatever</font>

409
00:20:42,799 --> 00:20:47,658
is a used so that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> client and server</font>

410
00:20:45,890 --> 00:20:51,440
can keep track<font color="#E5E5E5"> of the bytes read and</font>

411
00:20:47,659 --> 00:20:54,830
written so when the when a new

412
00:20:51,440 --> 00:20:58,100
connection<font color="#E5E5E5"> is established the client</font>

413
00:20:54,830 --> 00:21:01,340
will send the ACK offset<font color="#E5E5E5"> in the query</font>

414
00:20:58,100 --> 00:21:03,139
string<font color="#CCCCCC"> so in in a when it's a brand-new</font>

415
00:21:01,340 --> 00:21:08,480
connection that<font color="#E5E5E5"> would just be</font><font color="#CCCCCC"> zero but</font>

416
00:21:03,140 --> 00:21:10,610
on<font color="#CCCCCC"> rican X it could be nonzero the</font>

417
00:21:08,480 --> 00:21:13,010
server then sends the contents<font color="#E5E5E5"> of the</font>

418
00:21:10,610 --> 00:21:17,178
this retransmission buffer - the ACK

419
00:21:13,010 --> 00:21:20,120
offset so the retransmission buffer what

420
00:21:17,179 --> 00:21:23,210
is that<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> a buffer</font><font color="#E5E5E5"> of the bytes</font>

421
00:21:20,120 --> 00:21:24,709
that that the server received or that

422
00:21:23,210 --> 00:21:27,110
the access proxy received from the

423
00:21:24,710 --> 00:21:28,640
<font color="#CCCCCC">backend and then we just trim that every</font>

424
00:21:27,110 --> 00:21:31,240
time we receive<font color="#E5E5E5"> an updated</font><font color="#CCCCCC"> ACK</font>

425
00:21:28,640 --> 00:21:31,240
from the client

426
00:21:31,910 --> 00:21:39,600
so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about</font>

427
00:21:34,440 --> 00:21:42,060
the the server implementation<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so</font>

428
00:21:39,600 --> 00:21:44,669
this<font color="#CCCCCC"> is what an engine</font><font color="#E5E5E5"> X config file</font>

429
00:21:42,060 --> 00:21:46,320
might look<font color="#CCCCCC"> like if you were to add</font>

430
00:21:44,670 --> 00:21:48,840
<font color="#CCCCCC">WebSockets support there's just three</font>

431
00:21:46,320 --> 00:21:52,020
lines that you need to add to an engine

432
00:21:48,840 --> 00:21:57,330
X config file to allow WebSocket

433
00:21:52,020 --> 00:22:00,150
connections<font color="#CCCCCC"> we also use this framework</font>

434
00:21:57,330 --> 00:22:05,100
<font color="#E5E5E5">called cyclone which is a Python web</font>

435
00:22:00,150 --> 00:22:07,260
framework which has<font color="#CCCCCC"> built in basic web</font>

436
00:22:05,100 --> 00:22:09,060
<font color="#E5E5E5">sockets support</font><font color="#CCCCCC"> there was a minor</font>

437
00:22:07,260 --> 00:22:13,370
modification<font color="#E5E5E5"> required to get binary</font>

438
00:22:09,060 --> 00:22:15,960
messages working with our binary frames

439
00:22:13,370 --> 00:22:18,719
<font color="#CCCCCC">but you know it wasn't it wasn't too bad</font>

440
00:22:15,960 --> 00:22:20,850
it's worth<font color="#E5E5E5"> noting that like like I think</font>

441
00:22:18,720 --> 00:22:22,590
most<font color="#E5E5E5"> web application frameworks these</font>

442
00:22:20,850 --> 00:22:26,909
days have at<font color="#E5E5E5"> least limited support for</font>

443
00:22:22,590 --> 00:22:28,740
<font color="#E5E5E5">for web sockets so it wouldn't</font><font color="#CCCCCC"> be you</font>

444
00:22:26,910 --> 00:22:31,590
know even<font color="#E5E5E5"> even if they don't you know</font>

445
00:22:28,740 --> 00:22:33,210
<font color="#E5E5E5">there are libraries</font><font color="#CCCCCC"> available so no so</font>

446
00:22:31,590 --> 00:22:35,730
now I'm<font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about these</font><font color="#E5E5E5"> five</font>

447
00:22:33,210 --> 00:22:39,120
HTTP handlers<font color="#CCCCCC"> that are that are defined</font>

448
00:22:35,730 --> 00:22:41,580
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> any SSH relay protocol</font>

449
00:22:39,120 --> 00:22:44,820
there's cookie proxy<font color="#E5E5E5"> read write and</font>

450
00:22:41,580 --> 00:22:46,620
connect<font color="#CCCCCC"> but we really</font><font color="#E5E5E5"> only need</font><font color="#CCCCCC"> to</font>

451
00:22:44,820 --> 00:22:48,750
implement three of them because read and

452
00:22:46,620 --> 00:22:50,729
write are the HTTP handlers that<font color="#CCCCCC"> you</font>

453
00:22:48,750 --> 00:22:56,730
would use<font color="#E5E5E5"> if you couldn't for example</font>

454
00:22:50,730 --> 00:22:59,190
support<font color="#E5E5E5"> web sockets so the first one</font>

455
00:22:56,730 --> 00:23:01,230
which is slash cookie<font color="#E5E5E5"> this is</font>

456
00:22:59,190 --> 00:23:04,200
responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> handling</font><font color="#CCCCCC"> authentication</font>

457
00:23:01,230 --> 00:23:06,270
and authorization and<font color="#E5E5E5"> then we'll do the</font>

458
00:23:04,200 --> 00:23:12,410
302 redirect<font color="#E5E5E5"> to either that Chrome</font>

459
00:23:06,270 --> 00:23:12,410
extension URI scheme or or to localhost

460
00:23:13,790 --> 00:23:19,409
and then slash proxy this is<font color="#E5E5E5"> responsible</font>

461
00:23:16,590 --> 00:23:21,480
for<font color="#E5E5E5"> opening the the TCP connection so</font>

462
00:23:19,410 --> 00:23:26,220
when the client hits slash proxy<font color="#E5E5E5"> it</font>

463
00:23:21,480 --> 00:23:28,590
<font color="#E5E5E5">specifies the server and port that</font><font color="#CCCCCC"> it</font>

464
00:23:26,220 --> 00:23:30,050
wants the<font color="#E5E5E5"> to connect</font><font color="#CCCCCC"> to you</font><font color="#E5E5E5"> and then the</font>

465
00:23:28,590 --> 00:23:33,270
server is responsible for<font color="#CCCCCC"> opening that</font>

466
00:23:30,050 --> 00:23:35,490
that<font color="#E5E5E5"> connection</font><font color="#CCCCCC"> to the backend and then</font>

467
00:23:33,270 --> 00:23:37,410
<font color="#E5E5E5">it</font><font color="#CCCCCC"> returns a UUID that is used for</font>

468
00:23:35,490 --> 00:23:42,540
identifying the connection going forward

469
00:23:37,410 --> 00:23:43,980
and then the<font color="#E5E5E5"> slash connect is the actual</font>

470
00:23:42,540 --> 00:23:45,040
<font color="#E5E5E5">web sockets Handler and that is</font>

471
00:23:43,980 --> 00:23:46,840
responsible<font color="#E5E5E5"> for just</font>

472
00:23:45,040 --> 00:23:53,770
<font color="#CCCCCC">bi-directional communication between the</font>

473
00:23:46,840 --> 00:23:55,540
client<font color="#CCCCCC"> and server so I think I said</font>

474
00:23:53,770 --> 00:23:56,740
earlier<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I would have a better</font>

475
00:23:55,540 --> 00:23:59,379
<font color="#E5E5E5">screen shot it's still kind of hard</font><font color="#CCCCCC"> to</font>

476
00:23:56,740 --> 00:24:04,300
see but<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is that those real a host</font>

477
00:23:59,380 --> 00:24:11,850
options below<font color="#E5E5E5"> there so that's that's one</font>

478
00:24:04,300 --> 00:24:14,290
client<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> client just regular SSH</font>

479
00:24:11,850 --> 00:24:16,629
<font color="#CCCCCC">we did like I said we had to create our</font>

480
00:24:14,290 --> 00:24:22,360
<font color="#CCCCCC">own</font><font color="#E5E5E5"> on-demand proxy we wrote it in</font>

481
00:24:16,630 --> 00:24:25,360
<font color="#E5E5E5">golang which what it uses the proxy</font>

482
00:24:22,360 --> 00:24:27,760
<font color="#E5E5E5">commune facility or well we don't use it</font>

483
00:24:25,360 --> 00:24:30,310
directly<font color="#E5E5E5"> it is launched</font><font color="#CCCCCC"> by proxy command</font>

484
00:24:27,760 --> 00:24:32,920
so proxy command<font color="#E5E5E5"> if you if you configure</font>

485
00:24:30,310 --> 00:24:36,190
for<font color="#E5E5E5"> use it for example</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> your SSH</font>

486
00:24:32,920 --> 00:24:37,690
config file<font color="#E5E5E5"> that for</font><font color="#CCCCCC"> a specific</font><font color="#E5E5E5"> host</font><font color="#CCCCCC"> say</font>

487
00:24:36,190 --> 00:24:40,570
star or<font color="#E5E5E5"> whatever you start out</font>

488
00:24:37,690 --> 00:24:43,870
example.com<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> this proxy command</font>

489
00:24:40,570 --> 00:24:45,879
to run and<font color="#E5E5E5"> then it just that</font><font color="#CCCCCC"> you get the</font>

490
00:24:43,870 --> 00:24:47,830
<font color="#E5E5E5">standard output</font><font color="#CCCCCC"> from SSH as your input</font>

491
00:24:45,880 --> 00:24:50,920
<font color="#E5E5E5">to</font><font color="#CCCCCC"> that program and then you get</font><font color="#E5E5E5"> to do</font>

492
00:24:47,830 --> 00:24:54,070
whatever you want with it<font color="#CCCCCC"> and then</font>

493
00:24:50,920 --> 00:24:55,300
ultimately<font color="#E5E5E5"> would you write back</font><font color="#CCCCCC"> to</font>

494
00:24:54,070 --> 00:24:59,919
standard output<font color="#E5E5E5"> which is what gets</font>

495
00:24:55,300 --> 00:25:02,350
<font color="#E5E5E5">displayed</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the terminal and this local</font>

496
00:24:59,920 --> 00:25:05,880
proxy<font color="#E5E5E5"> is like I think</font><font color="#CCCCCC"> I said earlier</font>

497
00:25:02,350 --> 00:25:10,179
that it that<font color="#E5E5E5"> is also a WebSocket client</font>

498
00:25:05,880 --> 00:25:13,120
okay so yeah here's what the SSH config

499
00:25:10,180 --> 00:25:17,410
<font color="#CCCCCC">would look like you can see we cleverly</font>

500
00:25:13,120 --> 00:25:19,989
called it a<font color="#E5E5E5"> Nashville because na SSH</font><font color="#CCCCCC"> but</font>

501
00:25:17,410 --> 00:25:22,000
other<font color="#E5E5E5"> than that you</font><font color="#CCCCCC"> know you we get</font><font color="#E5E5E5"> the</font>

502
00:25:19,990 --> 00:25:29,890
host the<font color="#E5E5E5"> SSH host</font><font color="#CCCCCC"> in Port and then we</font>

503
00:25:22,000 --> 00:25:32,260
<font color="#CCCCCC">specify this</font><font color="#E5E5E5"> relay host here as well so</font>

504
00:25:29,890 --> 00:25:36,340
what<font color="#E5E5E5"> what back is a relay host</font>

505
00:25:32,260 --> 00:25:37,780
so the relay host is again just it's

506
00:25:36,340 --> 00:25:40,720
like<font color="#E5E5E5"> a service it's a DNS name that</font>

507
00:25:37,780 --> 00:25:43,660
resolves<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> access proxy IP</font><font color="#CCCCCC"> but</font>

508
00:25:40,720 --> 00:25:45,220
there is<font color="#E5E5E5"> one of these per service</font><font color="#CCCCCC"> and</font>

509
00:25:43,660 --> 00:25:48,370
the reason we did<font color="#CCCCCC"> it this way</font><font color="#E5E5E5"> which is</font>

510
00:25:45,220 --> 00:25:51,010
<font color="#CCCCCC">actually kind of a</font><font color="#E5E5E5"> suti reason but we</font>

511
00:25:48,370 --> 00:25:54,500
needed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make a policy</font><font color="#CCCCCC"> decision</font><font color="#E5E5E5"> when</font>

512
00:25:51,010 --> 00:25:58,550
the when the slash cookie handler was

513
00:25:54,500 --> 00:26:01,940
but for some reason<font color="#CCCCCC"> when</font><font color="#E5E5E5"> Google designed</font>

514
00:25:58,550 --> 00:26:03,680
this<font color="#E5E5E5"> they they don't actually include</font>

515
00:26:01,940 --> 00:26:05,990
what server you're trying to connect<font color="#E5E5E5"> to</font>

516
00:26:03,680 --> 00:26:10,310
at<font color="#CCCCCC"> that point so</font><font color="#E5E5E5"> so we needed a way</font><font color="#CCCCCC"> to</font>

517
00:26:05,990 --> 00:26:12,140
say<font color="#E5E5E5"> like have per server policies and</font>

518
00:26:10,310 --> 00:26:14,690
the<font color="#E5E5E5"> way we solved for this was by</font>

519
00:26:12,140 --> 00:26:18,940
<font color="#E5E5E5">mapping the the</font><font color="#CCCCCC"> hosting like the real a</font>

520
00:26:14,690 --> 00:26:18,940
<font color="#E5E5E5">host name to the server</font><font color="#CCCCCC"> in the backend</font>

521
00:26:20,170 --> 00:26:25,790
<font color="#E5E5E5">so I mentioned this little local HTTP</font>

522
00:26:24,380 --> 00:26:26,810
server that we stand up<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get the</font>

523
00:26:25,790 --> 00:26:29,750
cookie

524
00:26:26,810 --> 00:26:31,490
so<font color="#E5E5E5"> yeah that's of course with the chrome</font>

525
00:26:29,750 --> 00:26:34,880
secure shell client

526
00:26:31,490 --> 00:26:38,080
it's a browser-based application<font color="#E5E5E5"> it's</font>

527
00:26:34,880 --> 00:26:42,070
able to<font color="#E5E5E5"> inherit</font><font color="#CCCCCC"> that credential just by</font>

528
00:26:38,080 --> 00:26:44,389
by design but for the the<font color="#CCCCCC"> local</font>

529
00:26:42,070 --> 00:26:47,450
<font color="#CCCCCC">on-demand</font><font color="#E5E5E5"> proxy we needed a way</font><font color="#CCCCCC"> to get</font>

530
00:26:44,390 --> 00:26:50,990
the cookie<font color="#E5E5E5"> that way that we get in after</font>

531
00:26:47,450 --> 00:26:52,730
<font color="#E5E5E5">hitting the slash cookie</font><font color="#CCCCCC"> Handler back to</font>

532
00:26:50,990 --> 00:26:56,270
the<font color="#CCCCCC"> local proxy so that we can</font><font color="#E5E5E5"> stand up</font>

533
00:26:52,730 --> 00:26:58,310
the WebSocket connection<font color="#CCCCCC"> so the server</font>

534
00:26:56,270 --> 00:27:02,840
<font color="#CCCCCC">just redirects to localhost on an</font>

535
00:26:58,310 --> 00:27:04,210
ephemeral port and and then you know

536
00:27:02,840 --> 00:27:09,310
<font color="#CCCCCC">eventually that's what we actually use</font>

537
00:27:04,210 --> 00:27:12,620
<font color="#E5E5E5">when when connecting to the access proxy</font>

538
00:27:09,310 --> 00:27:18,409
<font color="#E5E5E5">so now I'm just going to I'm gonna go</font>

539
00:27:12,620 --> 00:27:20,540
<font color="#E5E5E5">over like the the actual steps of how</font>

540
00:27:18,410 --> 00:27:22,970
<font color="#E5E5E5">this works with</font><font color="#CCCCCC"> OpenSSH</font><font color="#E5E5E5"> I won't cover</font>

541
00:27:20,540 --> 00:27:24,470
how it works with<font color="#E5E5E5"> chrome secure</font><font color="#CCCCCC"> shell</font>

542
00:27:22,970 --> 00:27:27,350
because it's basically the same<font color="#CCCCCC"> thing</font>

543
00:27:24,470 --> 00:27:29,900
the only<font color="#E5E5E5"> difference is</font><font color="#CCCCCC"> that rather than</font>

544
00:27:27,350 --> 00:27:34,070
redirecting to localhost<font color="#CCCCCC"> the redirects</font>

545
00:27:29,900 --> 00:27:37,970
<font color="#CCCCCC">to</font><font color="#E5E5E5"> chrome - extension so the first thing</font>

546
00:27:34,070 --> 00:27:41,960
the user would do is type<font color="#CCCCCC"> SSH at you</font>

547
00:27:37,970 --> 00:27:44,510
know<font color="#E5E5E5"> user at example.com</font><font color="#CCCCCC"> proxy command</font>

548
00:27:41,960 --> 00:27:46,820
launches our local proxy<font color="#CCCCCC"> and then passes</font>

549
00:27:44,510 --> 00:27:50,180
it the standard<font color="#CCCCCC"> output from SSH as its</font>

550
00:27:46,820 --> 00:27:53,419
input the local<font color="#CCCCCC"> proxy then hits this</font>

551
00:27:50,180 --> 00:27:55,940
slash cookie<font color="#E5E5E5"> Handler and provides a</font>

552
00:27:53,420 --> 00:28:00,170
callback<font color="#E5E5E5"> local port like the ephemeral</font>

553
00:27:55,940 --> 00:28:02,150
port and then initiates an SSO flow<font color="#CCCCCC"> and</font>

554
00:28:00,170 --> 00:28:06,919
then the server finally will redirect<font color="#E5E5E5"> to</font>

555
00:28:02,150 --> 00:28:09,259
localhost<font color="#CCCCCC"> on that local ephemeral port</font>

556
00:28:06,919 --> 00:28:13,730
and then pass in the<font color="#E5E5E5"> cookie as well as</font>

557
00:28:09,259 --> 00:28:16,909
some other information<font color="#CCCCCC"> so then the</font>

558
00:28:13,730 --> 00:28:20,779
client is responsible<font color="#CCCCCC"> for hitting</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> /</font>

559
00:28:16,909 --> 00:28:22,909
proxy handler<font color="#E5E5E5"> which again is what is</font>

560
00:28:20,779 --> 00:28:24,590
responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> creating the</font><font color="#CCCCCC"> TCP they're</font>

561
00:28:22,909 --> 00:28:27,619
establishing<font color="#E5E5E5"> the TCP connection to the</font>

562
00:28:24,590 --> 00:28:31,100
<font color="#CCCCCC">backend we</font><font color="#E5E5E5"> generate this session ID</font>

563
00:28:27,619 --> 00:28:33,590
<font color="#E5E5E5">which is just a UUID</font><font color="#CCCCCC"> and then tie that</font>

564
00:28:31,100 --> 00:28:37,789
<font color="#CCCCCC">to a session</font><font color="#E5E5E5"> object which we just keep</font>

565
00:28:33,590 --> 00:28:40,970
in<font color="#CCCCCC"> memory and</font><font color="#E5E5E5"> then establish the TCP</font>

566
00:28:37,789 --> 00:28:43,210
connection to the<font color="#CCCCCC"> backend we keep</font><font color="#E5E5E5"> track</font>

567
00:28:40,970 --> 00:28:45,889
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the those connections in this in the</font>

568
00:28:43,210 --> 00:28:48,559
session<font color="#CCCCCC"> object</font><font color="#E5E5E5"> and then we have a</font>

569
00:28:45,889 --> 00:28:51,918
<font color="#E5E5E5">callback that fires</font><font color="#CCCCCC"> when we receive data</font>

570
00:28:48,559 --> 00:28:55,220
from from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> backend and then finally</font>

571
00:28:51,919 --> 00:28:59,179
we returned that session ID the<font color="#E5E5E5"> UUID</font><font color="#CCCCCC"> in</font>

572
00:28:55,220 --> 00:29:01,879
the response<font color="#E5E5E5"> body so that the</font><font color="#CCCCCC"> client</font>

573
00:28:59,179 --> 00:29:05,629
knows<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use that</font><font color="#E5E5E5"> when establishing the</font>

574
00:29:01,879 --> 00:29:07,730
WebSocket connection<font color="#CCCCCC"> so this is an</font>

575
00:29:05,629 --> 00:29:09,830
example<font color="#E5E5E5"> of what that that session object</font>

576
00:29:07,730 --> 00:29:13,009
<font color="#E5E5E5">might look like</font><font color="#CCCCCC"> sorry not sorry if you</font>

577
00:29:09,830 --> 00:29:16,509
don't<font color="#E5E5E5"> know or hate Python but basically</font>

578
00:29:13,009 --> 00:29:19,970
we just<font color="#E5E5E5"> need a way</font><font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> track of the</font>

579
00:29:16,509 --> 00:29:21,559
the connection to the the TCP connection

580
00:29:19,970 --> 00:29:23,960
to the<font color="#CCCCCC"> backend as well</font><font color="#E5E5E5"> as the front-end</font>

581
00:29:21,559 --> 00:29:27,289
<font color="#E5E5E5">connection to the web socket or</font>

582
00:29:23,960 --> 00:29:28,639
<font color="#CCCCCC">WebSocket client and</font><font color="#E5E5E5"> also we in here we</font>

583
00:29:27,289 --> 00:29:30,889
<font color="#E5E5E5">keep track of</font><font color="#CCCCCC"> the the retransmission</font>

584
00:29:28,639 --> 00:29:32,809
buffer as well as the read and write

585
00:29:30,889 --> 00:29:36,830
count which are that ACK that I talked

586
00:29:32,809 --> 00:29:38,809
about<font color="#CCCCCC"> earlier so you can imagine we'll</font>

587
00:29:36,830 --> 00:29:41,059
just have<font color="#E5E5E5"> we'll just say</font><font color="#CCCCCC"> we have a</font>

588
00:29:38,809 --> 00:29:44,080
sessions object and<font color="#E5E5E5"> just keep</font><font color="#CCCCCC"> that in</font>

589
00:29:41,059 --> 00:29:47,418
memory<font color="#E5E5E5"> it's a global variable maybe and</font>

590
00:29:44,080 --> 00:29:49,129
when we<font color="#E5E5E5"> hit the slash proxy handler when</font>

591
00:29:47,419 --> 00:29:52,669
a client hits slash proxy will create

592
00:29:49,129 --> 00:29:56,809
one of<font color="#E5E5E5"> these sessions assign it to that</font>

593
00:29:52,669 --> 00:29:57,950
<font color="#E5E5E5">UID and then just you know add that to</font>

594
00:29:56,809 --> 00:30:01,879
the sessions object that we're keeping

595
00:29:57,950 --> 00:30:03,580
in memory<font color="#E5E5E5"> it's simplified but that would</font>

596
00:30:01,879 --> 00:30:06,769
<font color="#E5E5E5">basically do it</font>

597
00:30:03,580 --> 00:30:11,359
so then<font color="#E5E5E5"> slash</font><font color="#CCCCCC"> connect which</font><font color="#E5E5E5"> is the final</font>

598
00:30:06,769 --> 00:30:13,190
<font color="#CCCCCC">handler</font><font color="#E5E5E5"> so here the client will connect</font>

599
00:30:11,359 --> 00:30:16,129
to slash<font color="#CCCCCC"> Connect and provide that</font>

600
00:30:13,190 --> 00:30:18,850
session ID which is the UUID<font color="#CCCCCC"> as well as</font>

601
00:30:16,129 --> 00:30:19,929
the<font color="#E5E5E5"> ACK and pause which</font>

602
00:30:18,850 --> 00:30:23,610
<font color="#CCCCCC">read</font><font color="#E5E5E5"> account and write count</font>

603
00:30:19,930 --> 00:30:27,280
respectively<font color="#CCCCCC"> the server responds with</font>

604
00:30:23,610 --> 00:30:28,659
HTTP 101 switching protocols<font color="#E5E5E5"> and then at</font>

605
00:30:27,280 --> 00:30:31,660
this point<font color="#E5E5E5"> we just have callbacks that</font>

606
00:30:28,660 --> 00:30:35,560
fire<font color="#CCCCCC"> when we get new connections or when</font>

607
00:30:31,660 --> 00:30:37,900
we receive WebSocket messages<font color="#E5E5E5"> and then</font>

608
00:30:35,560 --> 00:30:41,260
like I mentioned<font color="#CCCCCC"> previously</font><font color="#E5E5E5"> the the</font>

609
00:30:37,900 --> 00:30:44,440
local<font color="#CCCCCC"> proxy just</font><font color="#E5E5E5"> takes the</font><font color="#CCCCCC"> its standard</font>

610
00:30:41,260 --> 00:30:47,710
in<font color="#E5E5E5"> from from SSH and then passes that to</font>

611
00:30:44,440 --> 00:30:49,780
the<font color="#CCCCCC"> - the access proxy whereas the the</font>

612
00:30:47,710 --> 00:30:52,270
<font color="#E5E5E5">data that we're receiving like the</font>

613
00:30:49,780 --> 00:30:54,790
WebSocket frames that<font color="#E5E5E5"> were that are</font>

614
00:30:52,270 --> 00:30:56,350
<font color="#E5E5E5">coming in we unpack those and then write</font>

615
00:30:54,790 --> 00:31:02,110
<font color="#E5E5E5">to standard output which is get which</font>

616
00:30:56,350 --> 00:31:06,280
gets displayed in<font color="#E5E5E5"> the terminal so this</font>

617
00:31:02,110 --> 00:31:09,370
is what the<font color="#E5E5E5"> the connection made callback</font>

618
00:31:06,280 --> 00:31:12,430
<font color="#CCCCCC">might look like</font><font color="#E5E5E5"> so this is when a new</font>

619
00:31:09,370 --> 00:31:15,939
WebSocket connection is established<font color="#CCCCCC"> we</font>

620
00:31:12,430 --> 00:31:18,640
would look<font color="#E5E5E5"> up that session ID which is</font>

621
00:31:15,940 --> 00:31:21,870
<font color="#E5E5E5">that you know the UUID provided in the</font>

622
00:31:18,640 --> 00:31:24,340
query string<font color="#E5E5E5"> and then just point to this</font>

623
00:31:21,870 --> 00:31:27,129
point of this WebSocket connection and

624
00:31:24,340 --> 00:31:28,659
in the session<font color="#E5E5E5"> object and then update</font>

625
00:31:27,130 --> 00:31:32,020
the<font color="#CCCCCC"> read and</font><font color="#E5E5E5"> write count which would</font>

626
00:31:28,660 --> 00:31:34,930
those that<font color="#CCCCCC"> ACK which is provided in</font><font color="#E5E5E5"> the</font>

627
00:31:32,020 --> 00:31:37,050
query string<font color="#E5E5E5"> on new connections and then</font>

628
00:31:34,930 --> 00:31:39,640
we trimmed this retransmission buffer

629
00:31:37,050 --> 00:31:41,200
using<font color="#E5E5E5"> the act that was provided so for</font>

630
00:31:39,640 --> 00:31:42,580
new connections<font color="#CCCCCC"> it would be</font><font color="#E5E5E5"> zero and</font><font color="#CCCCCC"> the</font>

631
00:31:41,200 --> 00:31:44,860
reconnection<font color="#E5E5E5"> or the retransmission</font>

632
00:31:42,580 --> 00:31:47,500
buffer would<font color="#E5E5E5"> be zero so we just send an</font>

633
00:31:44,860 --> 00:31:52,149
empty WebSocket message on new

634
00:31:47,500 --> 00:31:55,390
connections<font color="#CCCCCC"> but you know in the case of</font>

635
00:31:52,150 --> 00:31:59,020
an actual reconnection we there would be

636
00:31:55,390 --> 00:32:01,410
bytes<font color="#E5E5E5"> in in our buffer that we would</font>

637
00:31:59,020 --> 00:32:01,410
send<font color="#E5E5E5"> to the client</font>

638
00:32:02,990 --> 00:32:06,410
so not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go over all this but just</font>

639
00:32:05,420 --> 00:32:07,490
in case you're interested<font color="#E5E5E5"> in</font>

640
00:32:06,410 --> 00:32:09,620
implementing something<font color="#E5E5E5"> like this</font>

641
00:32:07,490 --> 00:32:12,020
yourself<font color="#CCCCCC"> this is obviously it's it's</font>

642
00:32:09,620 --> 00:32:14,300
<font color="#E5E5E5">it's simplified but this is what the</font>

643
00:32:12,020 --> 00:32:16,010
connection made a<font color="#E5E5E5"> call back might do</font>

644
00:32:14,300 --> 00:32:19,639
<font color="#E5E5E5">this is when you get a new WebSocket</font>

645
00:32:16,010 --> 00:32:21,560
connection and then what do<font color="#E5E5E5"> you do when</font>

646
00:32:19,640 --> 00:32:25,790
you receive messages receive WebSocket

647
00:32:21,560 --> 00:32:29,330
messages so we we take the message<font color="#E5E5E5"> and</font>

648
00:32:25,790 --> 00:32:34,460
then we increment<font color="#CCCCCC"> that</font><font color="#E5E5E5"> right count which</font>

649
00:32:29,330 --> 00:32:37,520
is<font color="#E5E5E5"> the ACK</font><font color="#CCCCCC"> and or actually that's</font><font color="#E5E5E5"> the</font>

650
00:32:34,460 --> 00:32:41,240
pause but anyway increment the right

651
00:32:37,520 --> 00:32:44,720
count<font color="#E5E5E5"> ignored the four byte act in the</font>

652
00:32:41,240 --> 00:32:46,370
message<font color="#E5E5E5"> we don't we don't calculate the</font>

653
00:32:44,720 --> 00:32:48,740
<font color="#E5E5E5">we don't include that when you calculate</font>

654
00:32:46,370 --> 00:32:50,209
<font color="#E5E5E5">the the right count and then we just</font>

655
00:32:48,740 --> 00:32:53,570
<font color="#CCCCCC">pass the message on</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> back-end</font>

656
00:32:50,210 --> 00:32:55,670
service so it's the bytes in bytes out

657
00:32:53,570 --> 00:32:57,530
basically<font color="#E5E5E5"> we just except for the four</font>

658
00:32:55,670 --> 00:33:00,410
<font color="#E5E5E5">byte ACK send everything else to</font><font color="#CCCCCC"> the</font>

659
00:32:57,530 --> 00:33:04,790
<font color="#CCCCCC">backend and then trim the retransmission</font>

660
00:33:00,410 --> 00:33:06,620
buffer using<font color="#E5E5E5"> the act that we provide or</font>

661
00:33:04,790 --> 00:33:12,350
<font color="#CCCCCC">that was provided in</font><font color="#E5E5E5"> the by by the</font>

662
00:33:06,620 --> 00:33:14,600
client and then this is what the<font color="#E5E5E5"> what</font>

663
00:33:12,350 --> 00:33:17,870
<font color="#CCCCCC">the message received a function</font>

664
00:33:14,600 --> 00:33:20,540
definition might look like<font color="#CCCCCC"> if you're</font>

665
00:33:17,870 --> 00:33:22,550
interested<font color="#E5E5E5"> later look at the slides</font><font color="#CCCCCC"> so</font>

666
00:33:20,540 --> 00:33:26,030
<font color="#CCCCCC">then data</font><font color="#E5E5E5"> received this is when we</font>

667
00:33:22,550 --> 00:33:27,889
receive new data from<font color="#CCCCCC"> the SSH server</font><font color="#E5E5E5"> so</font>

668
00:33:26,030 --> 00:33:30,980
for this we update the read count<font color="#CCCCCC"> and</font>

669
00:33:27,890 --> 00:33:32,810
then we we concatenate the the<font color="#E5E5E5"> write</font>

670
00:33:30,980 --> 00:33:34,520
count that we're that we've maintained

671
00:33:32,810 --> 00:33:37,070
with our data and then<font color="#CCCCCC"> we</font><font color="#E5E5E5"> just send a</font>

672
00:33:34,520 --> 00:33:42,889
WebSocket<font color="#CCCCCC"> message to the</font><font color="#E5E5E5"> client with</font><font color="#CCCCCC"> the</font>

673
00:33:37,070 --> 00:33:45,320
data that<font color="#CCCCCC"> we received and again that's</font>

674
00:33:42,890 --> 00:33:48,470
what that might look like for the data

675
00:33:45,320 --> 00:33:51,230
received<font color="#E5E5E5"> function definition and so</font>

676
00:33:48,470 --> 00:33:55,850
miscellaneous things<font color="#CCCCCC"> there were a</font><font color="#E5E5E5"> few</font>

677
00:33:51,230 --> 00:33:58,430
gotchas I mentioned the<font color="#E5E5E5"> chrome secure</font>

678
00:33:55,850 --> 00:34:01,189
shell doesn't honor<font color="#E5E5E5"> the close control</font>

679
00:33:58,430 --> 00:34:03,650
<font color="#E5E5E5">frame the the WebSocket close control</font>

680
00:34:01,190 --> 00:34:05,540
<font color="#E5E5E5">frame so if you really want to close the</font>

681
00:34:03,650 --> 00:34:09,020
<font color="#CCCCCC">connection the way you can do so is by</font>

682
00:34:05,540 --> 00:34:11,529
sending<font color="#E5E5E5"> a negative back with an empty</font>

683
00:34:09,020 --> 00:34:14,080
payload or probably<font color="#E5E5E5"> any payload</font>

684
00:34:11,530 --> 00:34:16,990
that'll trip it up and it<font color="#E5E5E5"> will terminate</font>

685
00:34:14,080 --> 00:34:18,130
the connection<font color="#E5E5E5"> and then this other one</font>

686
00:34:16,989 --> 00:34:21,399
<font color="#E5E5E5">here</font>

687
00:34:18,130 --> 00:34:24,640
if the retransmission buffer that<font color="#CCCCCC"> we</font>

688
00:34:21,400 --> 00:34:27,250
that we<font color="#E5E5E5"> keep isn't sent when a new web</font>

689
00:34:24,639 --> 00:34:30,000
WebSocket connection is made<font color="#CCCCCC"> it's</font>

690
00:34:27,250 --> 00:34:33,190
possible<font color="#E5E5E5"> for a race condition</font><font color="#CCCCCC"> to occur</font>

691
00:34:30,000 --> 00:34:35,650
<font color="#E5E5E5">because we've separated the slash proxy</font>

692
00:34:33,190 --> 00:34:38,200
step from the slash<font color="#CCCCCC"> connect it's</font>

693
00:34:35,650 --> 00:34:40,720
possible that you<font color="#E5E5E5"> would get the the</font>

694
00:34:38,199 --> 00:34:44,379
first<font color="#E5E5E5"> part of the ssh hands handshake</font>

695
00:34:40,719 --> 00:34:47,230
which is the the version<font color="#E5E5E5"> from the server</font>

696
00:34:44,380 --> 00:34:49,120
and<font color="#E5E5E5"> then if we just discuss don't do</font>

697
00:34:47,230 --> 00:34:50,469
<font color="#E5E5E5">anything with</font><font color="#CCCCCC"> that data the client will</font>

698
00:34:49,120 --> 00:34:52,889
send its version and then the server

699
00:34:50,469 --> 00:34:54,699
<font color="#CCCCCC">will respond with the key exchange</font>

700
00:34:52,889 --> 00:34:56,139
<font color="#CCCCCC">because it's like</font><font color="#E5E5E5"> i already gave</font><font color="#CCCCCC"> you the</font>

701
00:34:54,699 --> 00:34:59,770
<font color="#E5E5E5">version but we did you know those bytes</font>

702
00:34:56,139 --> 00:35:04,990
we're just discarded so that's why it

703
00:34:59,770 --> 00:35:07,900
exists<font color="#CCCCCC"> my guess</font><font color="#E5E5E5"> is because the the you</font>

704
00:35:04,990 --> 00:35:11,950
know<font color="#E5E5E5"> slash proxy is when we create the</font>

705
00:35:07,900 --> 00:35:15,460
<font color="#E5E5E5">TCP connection and slash</font><font color="#CCCCCC"> Connect is is</font>

706
00:35:11,950 --> 00:35:18,189
separated<font color="#CCCCCC"> from that</font><font color="#E5E5E5"> so in in practice</font>

707
00:35:15,460 --> 00:35:19,870
<font color="#CCCCCC">that</font><font color="#E5E5E5"> only happened when I was testing on</font>

708
00:35:18,190 --> 00:35:23,290
local<font color="#CCCCCC"> VMs because of the replica</font>

709
00:35:19,870 --> 00:35:26,500
round-trip time from the from<font color="#E5E5E5"> my like</font>

710
00:35:23,290 --> 00:35:32,500
from the access proxy to the<font color="#E5E5E5"> to the SSH</font>

711
00:35:26,500 --> 00:35:34,240
server so I talked<font color="#CCCCCC"> about SSH</font>

712
00:35:32,500 --> 00:35:35,860
you know tunneling ssh traffic through

713
00:35:34,240 --> 00:35:40,089
<font color="#E5E5E5">this access proxy but what about other</font>

714
00:35:35,860 --> 00:35:41,110
protocols<font color="#CCCCCC"> it's the good news is it</font><font color="#E5E5E5"> of</font>

715
00:35:40,090 --> 00:35:44,080
<font color="#E5E5E5">course works because we're just</font>

716
00:35:41,110 --> 00:35:47,680
<font color="#E5E5E5">tunneling bytes like there's not</font>

717
00:35:44,080 --> 00:35:49,720
anything special<font color="#E5E5E5"> there</font><font color="#CCCCCC"> so of course</font>

718
00:35:47,680 --> 00:35:52,629
<font color="#E5E5E5">though we you know not everything is as</font>

719
00:35:49,720 --> 00:35:57,250
cool as<font color="#CCCCCC"> OpenSSH and has like this handy</font>

720
00:35:52,630 --> 00:35:59,380
proxy command facility<font color="#CCCCCC"> so instead you</font>

721
00:35:57,250 --> 00:36:00,910
can just<font color="#E5E5E5"> use a socket like a local local</font>

722
00:35:59,380 --> 00:36:04,390
socket<font color="#E5E5E5"> and then just have the client</font>

723
00:36:00,910 --> 00:36:05,770
connects<font color="#CCCCCC"> to this localhost and</font><font color="#E5E5E5"> then you</font>

724
00:36:04,390 --> 00:36:09,029
you<font color="#CCCCCC"> know of course just tunneled those</font>

725
00:36:05,770 --> 00:36:09,030
bytes through the access proxy

726
00:36:11,040 --> 00:36:17,550
so quite a<font color="#CCCCCC"> few references</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> I think I</font>

727
00:36:15,270 --> 00:36:18,690
linked to<font color="#E5E5E5"> all of the</font><font color="#CCCCCC"> beyond</font><font color="#E5E5E5"> court papers</font>

728
00:36:17,550 --> 00:36:20,430
with the<font color="#E5E5E5"> exception of maybe the most</font>

729
00:36:18,690 --> 00:36:23,430
recent one because I may have<font color="#E5E5E5"> made these</font>

730
00:36:20,430 --> 00:36:25,350
slides<font color="#E5E5E5"> before</font><font color="#CCCCCC"> it came out as well as</font>

731
00:36:23,430 --> 00:36:26,430
<font color="#E5E5E5">some other resources that are available</font>

732
00:36:25,350 --> 00:36:28,529
online

733
00:36:26,430 --> 00:36:31,830
I made the slides for this talk

734
00:36:28,530 --> 00:36:36,450
available on github<font color="#CCCCCC"> you can use this</font>

735
00:36:31,830 --> 00:36:39,060
bitly link it's the<font color="#CCCCCC"> ite ly / LC - beyond</font>

736
00:36:36,450 --> 00:36:41,069
<font color="#CCCCCC">Corp - SSH - proxy</font>

737
00:36:39,060 --> 00:36:45,090
I think last<font color="#CCCCCC"> con is also</font><font color="#E5E5E5"> making these</font>

738
00:36:41,070 --> 00:36:49,170
<font color="#CCCCCC">available for for all</font><font color="#E5E5E5"> of you on the</font>

739
00:36:45,090 --> 00:36:51,750
sched right yeah I'll repeat the

740
00:36:49,170 --> 00:36:55,830
<font color="#CCCCCC">question so</font><font color="#E5E5E5"> so he was asking about</font>

741
00:36:51,750 --> 00:37:00,660
<font color="#E5E5E5">latency with SSH being inherently like</font>

742
00:36:55,830 --> 00:37:04,110
interactive protocol<font color="#E5E5E5"> on yes</font><font color="#CCCCCC"> I I mean so</font>

743
00:37:00,660 --> 00:37:06,210
I mean<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know I do</font><font color="#CCCCCC"> Rd</font><font color="#E5E5E5"> I I don't like I</font>

744
00:37:04,110 --> 00:37:08,160
<font color="#E5E5E5">don't do all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> create like we have</font>

745
00:37:06,210 --> 00:37:10,080
<font color="#E5E5E5">the teams of people</font><font color="#CCCCCC"> that do like load</font>

746
00:37:08,160 --> 00:37:12,359
testing and things<font color="#E5E5E5"> for products but I</font>

747
00:37:10,080 --> 00:37:13,920
basically just hack on things and see if

748
00:37:12,360 --> 00:37:15,390
I can get them to<font color="#CCCCCC"> work on it is</font>

749
00:37:13,920 --> 00:37:18,780
interesting<font color="#CCCCCC"> - like when you have</font><font color="#E5E5E5"> this</font>

750
00:37:15,390 --> 00:37:21,359
stand up you know and you're like typing

751
00:37:18,780 --> 00:37:23,340
stuff at the the command line just like

752
00:37:21,359 --> 00:37:26,400
<font color="#CCCCCC">watching like</font><font color="#E5E5E5"> every</font><font color="#CCCCCC"> keystroke you type</font>

753
00:37:23,340 --> 00:37:29,640
as like for every keystroke you type

754
00:37:26,400 --> 00:37:32,390
watching a log message occur<font color="#E5E5E5"> like I mean</font>

755
00:37:29,640 --> 00:37:35,670
I haven't<font color="#E5E5E5"> really</font><font color="#CCCCCC"> noticed any anything</font>

756
00:37:32,390 --> 00:37:40,160
too crazy<font color="#E5E5E5"> I'm what we did actually test</font>

757
00:37:35,670 --> 00:37:43,560
like using doing large file transfers

758
00:37:40,160 --> 00:37:45,240
<font color="#E5E5E5">over like yes you know SCP</font><font color="#CCCCCC"> or whatever</font>

759
00:37:43,560 --> 00:37:47,250
<font color="#E5E5E5">through the access proxy and didn't</font>

760
00:37:45,240 --> 00:37:50,250
really<font color="#E5E5E5"> notice any any significant</font>

761
00:37:47,250 --> 00:37:53,280
overhead<font color="#E5E5E5"> so and because it's really not</font>

762
00:37:50,250 --> 00:37:54,660
doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> whole lot</font><font color="#E5E5E5"> like it like it sounds</font>

763
00:37:53,280 --> 00:37:55,980
kind of complicated<font color="#CCCCCC"> but it's really it's</font>

764
00:37:54,660 --> 00:37:58,080
mostly<font color="#E5E5E5"> just taking the bytes that it</font>

765
00:37:55,980 --> 00:37:59,670
receives and passing that along to<font color="#E5E5E5"> the</font>

766
00:37:58,080 --> 00:38:05,279
<font color="#CCCCCC">backend and</font><font color="#E5E5E5"> once it once it's a</font>

767
00:37:59,670 --> 00:38:07,770
<font color="#E5E5E5">WebSocket connection and not you know</font>

768
00:38:05,280 --> 00:38:09,420
not not specifically<font color="#E5E5E5"> talking about any</font>

769
00:38:07,770 --> 00:38:12,050
<font color="#E5E5E5">of the HTTP handlers but just the</font>

770
00:38:09,420 --> 00:38:12,050
WebSocket bits

771
00:38:12,300 --> 00:38:20,130
sorry<font color="#E5E5E5"> this depends on the SSH client</font>

772
00:38:15,520 --> 00:38:24,099
having<font color="#E5E5E5"> a direct connection not only</font><font color="#CCCCCC"> to</font>

773
00:38:20,130 --> 00:38:26,079
not not<font color="#E5E5E5"> only to the proxy for us as the</font>

774
00:38:24,099 --> 00:38:28,990
WebSocket but also to the authentication

775
00:38:26,079 --> 00:38:30,940
<font color="#E5E5E5">portal so it would I'm just thinking</font><font color="#CCCCCC"> of</font>

776
00:38:28,990 --> 00:38:33,279
like<font color="#E5E5E5"> my use case where I typically have</font>

777
00:38:30,940 --> 00:38:36,130
<font color="#CCCCCC">like scream</font><font color="#E5E5E5"> team</font><font color="#CCCCCC"> xbo boo whatever</font>

778
00:38:33,280 --> 00:38:38,200
running some place and I<font color="#E5E5E5"> SSH to it and</font>

779
00:38:36,130 --> 00:38:39,940
then I do a bunch<font color="#E5E5E5"> of SS aging from there</font>

780
00:38:38,200 --> 00:38:41,379
so that<font color="#CCCCCC"> my sessions are all just kind of</font>

781
00:38:39,940 --> 00:38:45,849
sitting<font color="#CCCCCC"> there when I</font><font color="#E5E5E5"> get back to them</font>

782
00:38:41,380 --> 00:38:49,030
<font color="#E5E5E5">this is modeled on your SSH incorrectly</font>

783
00:38:45,849 --> 00:38:51,310
from wherever you are<font color="#CCCCCC"> off</font><font color="#E5E5E5"> site to one</font>

784
00:38:49,030 --> 00:38:54,130
and<font color="#E5E5E5"> only one service within</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> network</font>

785
00:38:51,310 --> 00:38:56,619
yeah<font color="#CCCCCC"> so it's yeah so you're talking</font>

786
00:38:54,130 --> 00:38:59,740
<font color="#CCCCCC">about</font><font color="#E5E5E5"> like sort</font><font color="#CCCCCC"> of like an ashen</font><font color="#E5E5E5"> host</font>

787
00:38:56,619 --> 00:39:02,890
<font color="#E5E5E5">yeah exactly</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean you could you could</font>

788
00:38:59,740 --> 00:39:07,629
put the you know this access proxy in

789
00:39:02,890 --> 00:39:08,859
front of the bastion host but I don't

790
00:39:07,630 --> 00:39:10,089
know<font color="#E5E5E5"> like what benefits that would</font>

791
00:39:08,859 --> 00:39:13,420
provide you really because the whole

792
00:39:10,089 --> 00:39:16,119
<font color="#CCCCCC">idea was</font><font color="#E5E5E5"> like is to have like per server</font>

793
00:39:13,420 --> 00:39:18,940
or<font color="#E5E5E5"> first service policies for each</font>

794
00:39:16,119 --> 00:39:21,250
server that you're<font color="#E5E5E5"> gonna yeah good so I</font>

795
00:39:18,940 --> 00:39:23,050
guess now I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about it one handy</font>

796
00:39:21,250 --> 00:39:24,339
thing for this<font color="#CCCCCC"> is if you had a</font><font color="#E5E5E5"> bastion</font>

797
00:39:23,050 --> 00:39:26,589
host I mean if you were thinking<font color="#CCCCCC"> about</font>

798
00:39:24,339 --> 00:39:28,180
using<font color="#E5E5E5"> this as</font><font color="#CCCCCC"> a way to remove VPN</font>

799
00:39:26,589 --> 00:39:29,890
requirements when you're<font color="#E5E5E5"> off site or</font>

800
00:39:28,180 --> 00:39:33,460
<font color="#E5E5E5">something like that</font><font color="#CCCCCC"> you could</font><font color="#E5E5E5"> just have</font>

801
00:39:29,890 --> 00:39:35,140
this the one service this<font color="#E5E5E5"> provides is SS</font>

802
00:39:33,460 --> 00:39:36,310
<font color="#E5E5E5">aging into that</font><font color="#CCCCCC"> bastion yes and then you</font>

803
00:39:35,140 --> 00:39:38,049
could do whatever you<font color="#E5E5E5"> go to port</font>

804
00:39:36,310 --> 00:39:39,880
forwarding or whatever you<font color="#CCCCCC"> wanted but</font>

805
00:39:38,050 --> 00:39:42,460
<font color="#E5E5E5">then at least you'd know to get into</font><font color="#CCCCCC"> the</font>

806
00:39:39,880 --> 00:39:45,310
bastion host<font color="#E5E5E5"> there</font><font color="#CCCCCC"> 2fa and</font><font color="#E5E5E5"> they're doing</font>

807
00:39:42,460 --> 00:39:46,900
whatever<font color="#E5E5E5"> yeah and and I mean this I</font>

808
00:39:45,310 --> 00:39:49,029
guess it would have<font color="#E5E5E5"> been cool</font><font color="#CCCCCC"> decks I've</font>

809
00:39:46,900 --> 00:39:52,150
never used that<font color="#CCCCCC"> próxima</font><font color="#E5E5E5"> thing it just</font>

810
00:39:49,030 --> 00:39:54,520
pops up the web browser<font color="#CCCCCC"> I mean so proxy</font>

811
00:39:52,150 --> 00:39:56,560
command<font color="#CCCCCC"> so we've opened</font><font color="#E5E5E5"> the web browser</font>

812
00:39:54,520 --> 00:39:59,079
<font color="#E5E5E5">so we have that goal and client yeah</font>

813
00:39:56,560 --> 00:40:00,700
<font color="#E5E5E5">okay so that is this uses like for</font>

814
00:39:59,079 --> 00:40:03,579
instance<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the open command on Mac OS</font>

815
00:40:00,700 --> 00:40:06,910
<font color="#E5E5E5">to launch</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> okay so the</font><font color="#CCCCCC"> OpenSSH says</font>

816
00:40:03,579 --> 00:40:08,500
goes to some<font color="#CCCCCC"> proxy that's local that's</font>

817
00:40:06,910 --> 00:40:11,230
where the<font color="#CCCCCC"> magic happens as far as</font>

818
00:40:08,500 --> 00:40:14,470
launching so yeah so proxy command<font color="#E5E5E5"> just</font>

819
00:40:11,230 --> 00:40:17,680
takes so so basically<font color="#E5E5E5"> when you type so</font>

820
00:40:14,470 --> 00:40:20,709
like I showed<font color="#E5E5E5"> the SSH config for like</font>

821
00:40:17,680 --> 00:40:24,700
example.com<font color="#E5E5E5"> so when you type</font><font color="#CCCCCC"> SSH user at</font>

822
00:40:20,710 --> 00:40:26,109
example.com<font color="#CCCCCC"> OpenSSH will</font>

823
00:40:24,700 --> 00:40:28,720
read that you<font color="#E5E5E5"> know read that from the</font>

824
00:40:26,109 --> 00:40:30,700
<font color="#CCCCCC">configuration launch the proxy command</font>

825
00:40:28,720 --> 00:40:34,118
like which you specify<font color="#CCCCCC"> you know like we</font>

826
00:40:30,700 --> 00:40:36,549
pointed to the<font color="#E5E5E5"> binary that we wrote</font><font color="#CCCCCC"> and</font>

827
00:40:34,119 --> 00:40:38,740
<font color="#E5E5E5">then it it you</font><font color="#CCCCCC"> know then we're</font>

828
00:40:36,550 --> 00:40:41,829
responsible<font color="#CCCCCC"> for it at</font><font color="#E5E5E5"> that point on</font>

829
00:40:38,740 --> 00:40:43,959
so we wrap the<font color="#CCCCCC"> bites and WebSockets</font><font color="#E5E5E5"> pass</font>

830
00:40:41,829 --> 00:40:51,280
them to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> to the access proxy and then</font>

831
00:40:43,960 --> 00:40:52,930
<font color="#CCCCCC">ultimately display it then having a</font><font color="#E5E5E5"> dead</font>

832
00:40:51,280 --> 00:40:54,579
<font color="#E5E5E5">again client you know what judges</font>

833
00:40:52,930 --> 00:40:56,319
<font color="#E5E5E5">general because you're kind of like</font>

834
00:40:54,579 --> 00:40:58,839
having<font color="#E5E5E5"> a piece of</font><font color="#CCCCCC"> code that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to</font>

835
00:40:56,320 --> 00:41:01,540
<font color="#E5E5E5">manage on that remote system which is a</font>

836
00:40:58,839 --> 00:41:03,849
big part<font color="#CCCCCC"> of why people</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> like yeah</font>

837
00:41:01,540 --> 00:41:07,329
interacting<font color="#E5E5E5"> with VPN right so that's a</font>

838
00:41:03,849 --> 00:41:08,859
great<font color="#CCCCCC"> question so I think</font><font color="#E5E5E5"> that one of</font>

839
00:41:07,329 --> 00:41:11,020
<font color="#E5E5E5">the benefits</font><font color="#CCCCCC"> is like it is pretty</font>

840
00:41:08,859 --> 00:41:13,650
lightweight and it's not<font color="#E5E5E5"> running</font>

841
00:41:11,020 --> 00:41:17,410
continuously<font color="#E5E5E5"> so it's it's on demand</font>

842
00:41:13,650 --> 00:41:19,839
<font color="#CCCCCC">you know it only is running this local</font>

843
00:41:17,410 --> 00:41:21,970
proxy<font color="#E5E5E5"> is</font><font color="#CCCCCC"> only running when the user</font>

844
00:41:19,839 --> 00:41:23,920
<font color="#E5E5E5">actually initiates the connection then</font>

845
00:41:21,970 --> 00:41:27,759
it just shuts<font color="#CCCCCC"> down so it's it's pretty</font>

846
00:41:23,920 --> 00:41:29,440
lightweight<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> like you</font><font color="#CCCCCC"> know</font>

847
00:41:27,760 --> 00:41:33,730
launching the browser<font color="#E5E5E5"> like that that's</font>

848
00:41:29,440 --> 00:41:35,410
one use<font color="#E5E5E5"> usability concern that you need</font>

849
00:41:33,730 --> 00:41:37,630
to take<font color="#CCCCCC"> into account is like is this</font>

850
00:41:35,410 --> 00:41:39,549
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> throw people off if I type SSH and</font>

851
00:41:37,630 --> 00:41:44,530
the browser launches and<font color="#CCCCCC"> then like what</font>

852
00:41:39,550 --> 00:41:45,670
do<font color="#E5E5E5"> you do with the cookie once</font><font color="#CCCCCC"> once</font>

853
00:41:44,530 --> 00:41:47,050
you've<font color="#E5E5E5"> gotten it like you don't want it</font>

854
00:41:45,670 --> 00:41:48,730
to launch the<font color="#CCCCCC"> browser for every</font><font color="#E5E5E5"> every</font>

855
00:41:47,050 --> 00:41:51,010
<font color="#E5E5E5">time you type SSH that would be really</font>

856
00:41:48,730 --> 00:41:52,599
annoying so this there's other<font color="#CCCCCC"> things to</font>

857
00:41:51,010 --> 00:41:55,050
consider<font color="#E5E5E5"> but yeah that's an interesting</font>

858
00:41:52,599 --> 00:41:55,050
<font color="#CCCCCC">point</font>

859
00:41:57,300 --> 00:42:00,300
yeah

860
00:42:00,530 --> 00:42:09,270
source<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> know so yeah so the the</font>

861
00:42:06,990 --> 00:42:10,680
server is is a Python thing that the

862
00:42:09,270 --> 00:42:12,450
client<font color="#CCCCCC"> is go it</font>

863
00:42:10,680 --> 00:42:16,549
I'll give you my card<font color="#E5E5E5"> I'm happy to like</font>

864
00:42:12,450 --> 00:42:20,609
chat about how<font color="#CCCCCC"> its I mean it's</font><font color="#E5E5E5"> just like</font>

865
00:42:16,550 --> 00:42:22,140
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> not super complicated</font><font color="#CCCCCC"> honestly</font><font color="#E5E5E5"> so</font>

866
00:42:20,610 --> 00:42:32,480
<font color="#CCCCCC">I'm happy</font><font color="#E5E5E5"> to talk about like how it</font>

867
00:42:22,140 --> 00:42:32,480
works more<font color="#E5E5E5"> questions</font>

868
00:42:33,560 --> 00:42:39,029
<font color="#CCCCCC">alright cool yeah and if you if</font><font color="#E5E5E5"> anything</font>

869
00:42:37,080 --> 00:42:41,850
if you<font color="#E5E5E5"> think of anything later</font><font color="#CCCCCC"> feel</font><font color="#E5E5E5"> free</font>

870
00:42:39,030 --> 00:42:45,350
to stop me<font color="#E5E5E5"> in the halls or whatever</font>

871
00:42:41,850 --> 00:42:45,350
<font color="#E5E5E5">happy to chat more</font><font color="#CCCCCC"> about it</font>

872
00:42:49,730 --> 00:42:52,869
[Applause]

