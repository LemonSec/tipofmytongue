1
00:00:01,200 --> 00:00:06,970
okay all right good morning my name is

2
00:00:04,330 --> 00:00:08,950
Bill to uh I'm a professor at the

3
00:00:06,970 --> 00:00:13,570
University of North Carolina Charlotte

4
00:00:08,950 --> 00:00:15,340
and my student gene J is gonna<font color="#E5E5E5"> and I'm</font>

5
00:00:13,570 --> 00:00:18,640
gonna be here talking about<font color="#E5E5E5"> secure</font>

6
00:00:15,340 --> 00:00:20,619
programming supporting IDE you know

7
00:00:18,640 --> 00:00:22,619
where<font color="#E5E5E5"> that OS so we all</font><font color="#CCCCCC"> know software</font>

8
00:00:20,619 --> 00:00:25,600
vulnerabilities is a big issue

9
00:00:22,619 --> 00:00:27,850
developers needs to learn more but our

10
00:00:25,600 --> 00:00:30,340
focus is a little bit more it's going to

11
00:00:27,850 --> 00:00:32,619
<font color="#E5E5E5">be really focused on how to prevent</font>

12
00:00:30,340 --> 00:00:34,179
<font color="#E5E5E5">errors by developers and we all know</font>

13
00:00:32,619 --> 00:00:37,539
that<font color="#E5E5E5"> even the most experienced</font>

14
00:00:34,179 --> 00:00:41,199
developers do make mistakes so from our

15
00:00:37,539 --> 00:00:42,909
perspective that today's tool support

16
00:00:41,199 --> 00:00:45,879
for the secure programming has really

17
00:00:42,909 --> 00:00:48,460
primarily focused on static analysis and

18
00:00:45,879 --> 00:00:50,979
dynamic analysis which for the most part

19
00:00:48,460 --> 00:00:53,709
works like old compilers<font color="#CCCCCC"> you know words</font>

20
00:00:50,979 --> 00:00:55,149
you run your analysis you diagnose the

21
00:00:53,709 --> 00:00:57,789
problem and you fix the problem so they

22
00:00:55,149 --> 00:01:01,269
<font color="#E5E5E5">tend to be very reactive so what we</font>

23
00:00:57,789 --> 00:01:03,609
wanted to<font color="#E5E5E5"> look at is how to proactively</font>

24
00:01:01,269 --> 00:01:06,039
support programmers avoiding mistakes in

25
00:01:03,609 --> 00:01:08,950
the first<font color="#E5E5E5"> place as opposed to fixing</font>

26
00:01:06,040 --> 00:01:10,960
them lecture actively and by doing so we

27
00:01:08,950 --> 00:01:13,300
want<font color="#E5E5E5"> to include the developers in</font><font color="#CCCCCC"> the</font>

28
00:01:10,960 --> 00:01:16,539
security room so we started out by

29
00:01:13,300 --> 00:01:19,450
researching literature on previous work

30
00:01:16,540 --> 00:01:21,430
in terms of you know studies on why

31
00:01:19,450 --> 00:01:23,860
people make mistakes in programming not

32
00:01:21,430 --> 00:01:25,540
just security mistakes but programmers

33
00:01:23,860 --> 00:01:29,260
make bugs all the time you know we all

34
00:01:25,540 --> 00:01:31,150
have debugged and really many of you

35
00:01:29,260 --> 00:01:33,040
<font color="#E5E5E5">probably know Donald Knuth which is like</font>

36
00:01:31,150 --> 00:01:36,670
one of the<font color="#E5E5E5"> fathers of computer science</font>

37
00:01:33,040 --> 00:01:39,580
and he actually did a<font color="#CCCCCC"> self study on his</font>

38
00:01:36,670 --> 00:01:42,010
own substantial programming activities

39
00:01:39,580 --> 00:01:44,890
and found<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that mistake of omission</font>

40
00:01:42,010 --> 00:01:46,720
is one of the largest class of mistakes

41
00:01:44,890 --> 00:01:48,310
you<font color="#CCCCCC"> know just it's not like</font><font color="#E5E5E5"> he doesn't</font>

42
00:01:46,720 --> 00:01:49,510
know<font color="#CCCCCC"> he</font><font color="#E5E5E5"> just forget to do things because</font>

43
00:01:48,310 --> 00:01:51,909
you are so many<font color="#E5E5E5"> things you have to worry</font>

44
00:01:49,510 --> 00:01:54,700
<font color="#CCCCCC">about when</font><font color="#E5E5E5"> you're programming that's a</font>

45
00:01:51,909 --> 00:01:56,710
<font color="#E5E5E5">interesting insight for us we also have</font>

46
00:01:54,700 --> 00:01:59,560
<font color="#CCCCCC">done some study by interviewing</font>

47
00:01:56,710 --> 00:02:01,119
professional developers<font color="#E5E5E5"> specifically in</font>

48
00:01:59,560 --> 00:02:02,530
the context of secure programming why

49
00:02:01,120 --> 00:02:04,900
people make security programming

50
00:02:02,530 --> 00:02:06,900
mistakes and what we found interestingly

51
00:02:04,900 --> 00:02:09,849
is there's a disconnect between

52
00:02:06,900 --> 00:02:11,700
conceptual understanding you know many

53
00:02:09,848 --> 00:02:14,459
<font color="#E5E5E5">of the programmers we interview prefer</font>

54
00:02:11,700 --> 00:02:16,018
programmers understand security

55
00:02:14,459 --> 00:02:18,750
<font color="#E5E5E5">understand secure programming that's</font>

56
00:02:16,019 --> 00:02:20,340
<font color="#E5E5E5">important i</font><font color="#CCCCCC"> think that's sinking in but</font>

57
00:02:18,750 --> 00:02:22,590
they<font color="#E5E5E5"> don't necessarily connect that</font>

58
00:02:20,340 --> 00:02:25,080
contest with what<font color="#E5E5E5"> they're doing here</font>

59
00:02:22,590 --> 00:02:27,510
they often rely on you know for example

60
00:02:25,080 --> 00:02:30,090
some framework or process going<font color="#E5E5E5"> to take</font>

61
00:02:27,510 --> 00:02:33,090
care of security for me even<font color="#E5E5E5"> for</font>

62
00:02:30,090 --> 00:02:35,400
something basic as input validation they

63
00:02:33,090 --> 00:02:37,349
tend<font color="#CCCCCC"> to focus more on the functional</font>

64
00:02:35,400 --> 00:02:39,980
aspects and the business logic as

65
00:02:37,349 --> 00:02:43,829
opposed to<font color="#E5E5E5"> from a security perspective</font>

66
00:02:39,980 --> 00:02:45,780
so our approach is sort of based on<font color="#E5E5E5"> the</font>

67
00:02:43,830 --> 00:02:48,299
<font color="#E5E5E5">assumption that many common software</font>

68
00:02:45,780 --> 00:02:51,030
vulnerabilities are caused by mistake of

69
00:02:48,299 --> 00:02:52,829
a<font color="#E5E5E5"> mission so for example failure</font><font color="#CCCCCC"> to</font>

70
00:02:51,030 --> 00:02:55,769
perform input validation or output

71
00:02:52,829 --> 00:02:58,079
filtering just people forget failure to

72
00:02:55,769 --> 00:03:00,599
check security invariance before

73
00:02:58,079 --> 00:03:03,030
performing critical operations for

74
00:03:00,599 --> 00:03:04,170
example<font color="#CCCCCC"> see surf broken access control</font>

75
00:03:03,030 --> 00:03:06,720
it's not they don't know they just

76
00:03:04,170 --> 00:03:08,640
forget and so what we want<font color="#E5E5E5"> to do is we</font>

77
00:03:06,720 --> 00:03:12,109
<font color="#CCCCCC">want to interactively identify those</font>

78
00:03:08,640 --> 00:03:14,640
common security mistakes issues and

79
00:03:12,110 --> 00:03:18,269
relight you usually reliable heuristics

80
00:03:14,640 --> 00:03:19,980
and one the programmers an ID pop up a

81
00:03:18,269 --> 00:03:22,109
warning<font color="#CCCCCC"> and say here's something you to</font>

82
00:03:19,980 --> 00:03:24,780
pay attention to and<font color="#E5E5E5"> we provide them</font>

83
00:03:22,109 --> 00:03:27,150
with options to actually take actions

84
00:03:24,780 --> 00:03:29,220
and specifically we've identified two

85
00:03:27,150 --> 00:03:31,470
types of actions one is we recall

86
00:03:29,220 --> 00:03:33,569
interactive code refactoring and the

87
00:03:31,470 --> 00:03:35,670
other one is interactive code annotation

88
00:03:33,569 --> 00:03:37,470
and<font color="#E5E5E5"> I will give you a demo of the first</font>

89
00:03:35,670 --> 00:03:40,319
type where the prototype we implemented

90
00:03:37,470 --> 00:03:43,590
and we'll talk about the design for<font color="#E5E5E5"> the</font>

91
00:03:40,319 --> 00:03:46,500
second one later<font color="#E5E5E5"> on in the talk so the</font>

92
00:03:43,590 --> 00:03:49,200
total so design rationale is the whole

93
00:03:46,500 --> 00:03:51,030
<font color="#E5E5E5">two is based on this idea of recognition</font>

94
00:03:49,200 --> 00:03:53,040
instead of recalling the idea is

95
00:03:51,030 --> 00:03:54,810
programmers have very heavy cognitive

96
00:03:53,040 --> 00:03:57,209
burdens we want to help them<font color="#CCCCCC"> to</font>

97
00:03:54,810 --> 00:04:00,030
recognize problems as opposed to think

98
00:03:57,209 --> 00:04:01,620
about it all<font color="#CCCCCC"> natively and using a you</font>

99
00:04:00,030 --> 00:04:04,230
know this key of the<font color="#E5E5E5"> computer human</font>

100
00:04:01,620 --> 00:04:05,690
human computer interaction principle we

101
00:04:04,230 --> 00:04:08,040
want to take four advantages of

102
00:04:05,690 --> 00:04:10,349
developers application knowledge they

103
00:04:08,040 --> 00:04:11,970
are programming in the context they know

104
00:04:10,349 --> 00:04:13,980
the<font color="#CCCCCC"> business logic they know the</font>

105
00:04:11,970 --> 00:04:15,599
application context and we want to

106
00:04:13,980 --> 00:04:17,849
<font color="#CCCCCC">support secure self with development</font>

107
00:04:15,599 --> 00:04:20,579
best practices for example within that

108
00:04:17,849 --> 00:04:23,550
embedded<font color="#E5E5E5"> OSP</font><font color="#CCCCCC"> soppy into a</font><font color="#E5E5E5"> plug-in so</font>

109
00:04:20,579 --> 00:04:24,280
people can generate code use use isapi

110
00:04:23,550 --> 00:04:26,320
latest ver

111
00:04:24,280 --> 00:04:29,559
exactly to validate their inputs or

112
00:04:26,320 --> 00:04:31,240
encode there are variables and we want

113
00:04:29,560 --> 00:04:33,100
this<font color="#E5E5E5"> to be policy driven so there's none</font>

114
00:04:31,240 --> 00:04:35,710
of this<font color="#E5E5E5"> is hardwired into the program</font>

115
00:04:33,100 --> 00:04:38,440
itself so that it can be changed to

116
00:04:35,710 --> 00:04:40,840
different environments so the demo we're

117
00:04:38,440 --> 00:04:44,080
going to have is we call it aside stands

118
00:04:40,840 --> 00:04:48,159
for application security in ide it's

119
00:04:44,080 --> 00:04:50,109
based on<font color="#E5E5E5"> Eclipse Java and basically have</font>

120
00:04:48,160 --> 00:04:51,669
the<font color="#CCCCCC"> feature that's fully implemented is</font>

121
00:04:50,110 --> 00:04:53,530
code refactoring so<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to turn it</font>

122
00:04:51,669 --> 00:05:08,380
over to Jing she's going<font color="#E5E5E5"> to show you a</font>

123
00:04:53,530 --> 00:05:11,880
demo<font color="#CCCCCC"> all right so so a site our site</font>

124
00:05:08,380 --> 00:05:14,620
approach aims to provide developers

125
00:05:11,880 --> 00:05:17,770
secure programming practices support

126
00:05:14,620 --> 00:05:20,800
during the program construction and our

127
00:05:17,770 --> 00:05:23,820
demo comes with a savvy validator and

128
00:05:20,800 --> 00:05:27,880
encode encoder as example of such

129
00:05:23,820 --> 00:05:31,050
practices and here's how a site works

130
00:05:27,880 --> 00:05:34,780
once the site is installed as a plug-in

131
00:05:31,050 --> 00:05:36,729
to eclipse you can run running against a

132
00:05:34,780 --> 00:05:40,090
project by<font color="#CCCCCC"> right-clicking on the</font>

133
00:05:36,729 --> 00:05:42,340
project's name in the Explorer view<font color="#CCCCCC"> a</font>

134
00:05:40,090 --> 00:05:46,659
project<font color="#E5E5E5"> Explorer review and then</font>

135
00:05:42,340 --> 00:05:48,880
navigate to a site menu so based on the

136
00:05:46,660 --> 00:05:51,700
preference setting of a site which can

137
00:05:48,880 --> 00:05:56,320
be<font color="#CCCCCC"> viewed through eclipse preference</font>

138
00:05:51,700 --> 00:05:59,349
<font color="#E5E5E5">dialog a site will identify vulnerable</font>

139
00:05:56,320 --> 00:06:02,760
code in the project source code using

140
00:05:59,350 --> 00:06:06,280
predefined rules so as<font color="#E5E5E5"> you can see here</font>

141
00:06:02,760 --> 00:06:08,140
the default<font color="#CCCCCC"> aside rule setting uses the</font>

142
00:06:06,280 --> 00:06:13,000
default trust boundaries from<font color="#E5E5E5"> the</font>

143
00:06:08,140 --> 00:06:19,539
<font color="#CCCCCC">plugging aside um but these rules can be</font>

144
00:06:13,000 --> 00:06:22,820
extended for as<font color="#E5E5E5"> yo will as you see you</font>

145
00:06:19,539 --> 00:06:30,469
later so right now if I click<font color="#CCCCCC"> OK</font>

146
00:06:22,820 --> 00:06:33,950
and so to to to make<font color="#E5E5E5"> a savvy more easily</font>

147
00:06:30,470 --> 00:06:36,020
available to developers a sad actually

148
00:06:33,950 --> 00:06:37,760
does it savvy configurations

149
00:06:36,020 --> 00:06:40,190
automatically the very first time you

150
00:06:37,760 --> 00:06:43,700
<font color="#E5E5E5">run inside and oil and these</font>

151
00:06:40,190 --> 00:06:49,930
configurations include copying the savvy

152
00:06:43,700 --> 00:06:49,930
libraries into into<font color="#E5E5E5"> the lib folder under</font>

153
00:06:54,400 --> 00:07:02,419
under the project and also put putting

154
00:07:00,230 --> 00:07:06,080
those libraries<font color="#E5E5E5"> onto the</font><font color="#CCCCCC"> project's</font>

155
00:07:02,420 --> 00:07:09,170
<font color="#E5E5E5">classpath and also generating copies of</font>

156
00:07:06,080 --> 00:07:15,050
<font color="#E5E5E5">all the configuration files of a savvy</font>

157
00:07:09,170 --> 00:07:19,370
and then once the<font color="#E5E5E5"> site finds a match in</font>

158
00:07:15,050 --> 00:07:21,500
in the source<font color="#E5E5E5"> code it will mark the code</font>

159
00:07:19,370 --> 00:07:24,610
with a warning<font color="#E5E5E5"> and also highlight the</font>

160
00:07:21,500 --> 00:07:27,410
code as you can<font color="#E5E5E5"> see here in this</font>

161
00:07:24,610 --> 00:07:29,990
transaction servlet there are four

162
00:07:27,410 --> 00:07:33,860
parameters that retrieve the string from

163
00:07:29,990 --> 00:07:35,990
<font color="#E5E5E5">HTTP</font><font color="#CCCCCC"> request through the method and</font>

164
00:07:33,860 --> 00:07:38,330
location get parameter<font color="#E5E5E5"> and this is</font>

165
00:07:35,990 --> 00:07:43,430
actually common resource and common

166
00:07:38,330 --> 00:07:47,750
source for untrusted inputs the

167
00:07:43,430 --> 00:07:52,370
sidewalls you immediately after invoking

168
00:07:47,750 --> 00:07:56,240
this function in your code so if you

169
00:07:52,370 --> 00:07:59,660
delete the function or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> statement the</font>

170
00:07:56,240 --> 00:08:03,020
<font color="#E5E5E5">warning will go away but a site doesn't</font>

171
00:07:59,660 --> 00:08:07,220
just stop here<font color="#CCCCCC"> if you have her over the</font>

172
00:08:03,020 --> 00:08:10,940
highlighted code or click over click on

173
00:08:07,220 --> 00:08:13,810
<font color="#CCCCCC">the warning</font><font color="#E5E5E5"> you will get a I'm not</font><font color="#CCCCCC"> sure</font>

174
00:08:10,940 --> 00:08:13,810
whether<font color="#E5E5E5"> you can see it</font>

175
00:08:16,940 --> 00:08:23,990
so you will get this explanation view as

176
00:08:20,520 --> 00:08:27,780
well as a list of input types that are

177
00:08:23,990 --> 00:08:32,880
coded in the savvy can be savvy

178
00:08:27,780 --> 00:08:35,519
properties files and validation files so

179
00:08:32,880 --> 00:08:37,890
through through this explanation view

180
00:08:35,519 --> 00:08:40,140
you'll get an idea of what the problem

181
00:08:37,890 --> 00:08:43,828
is for instance why the code is

182
00:08:40,140 --> 00:08:46,040
vulnerable and what consequences you<font color="#E5E5E5"> may</font>

183
00:08:43,828 --> 00:08:49,589
have if you don't take<font color="#E5E5E5"> care of them and</font>

184
00:08:46,040 --> 00:08:53,790
well how can you go approach and fix the

185
00:08:49,589 --> 00:08:56,490
problem so if you want to roll out of

186
00:08:53,790 --> 00:08:58,230
your own solutions no problem you can go

187
00:08:56,490 --> 00:09:00,680
ahead and write your own code to address

188
00:08:58,230 --> 00:09:03,810
the property to address the warning<font color="#E5E5E5"> and</font>

189
00:09:00,680 --> 00:09:07,199
aside doesn't stop you from doing<font color="#E5E5E5"> that</font>

190
00:09:03,810 --> 00:09:09,899
but a saddles can also provide you the

191
00:09:07,200 --> 00:09:12,300
code generation mechanism to generate

192
00:09:09,899 --> 00:09:14,970
code for you to deal with to address the

193
00:09:12,300 --> 00:09:19,050
warning and<font color="#E5E5E5"> it's very easy all you need</font>

194
00:09:14,970 --> 00:09:21,690
to do<font color="#CCCCCC"> is to select a an appropriate</font>

195
00:09:19,050 --> 00:09:24,300
input type from<font color="#CCCCCC"> the list of from this</font>

196
00:09:21,690 --> 00:09:26,790
list and just click<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that so for</font>

197
00:09:24,300 --> 00:09:31,589
<font color="#CCCCCC">instance for this stock name variable</font>

198
00:09:26,790 --> 00:09:35,730
I'll just go ahead and choose say sip

199
00:09:31,589 --> 00:09:39,720
string and this is a rule from a savvy

200
00:09:35,730 --> 00:09:41,940
and if<font color="#E5E5E5"> I click on</font><font color="#CCCCCC"> that a segment code</font>

201
00:09:39,720 --> 00:09:44,430
will<font color="#CCCCCC"> be generated</font><font color="#E5E5E5"> and this code actually</font>

202
00:09:41,940 --> 00:09:48,060
employees it's a piece validators get

203
00:09:44,430 --> 00:09:51,599
valid input<font color="#E5E5E5"> API to validate</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> stock</font>

204
00:09:48,060 --> 00:09:53,609
name and this code generator code is

205
00:09:51,600 --> 00:09:56,220
just like the other code which can which

206
00:09:53,610 --> 00:09:59,100
is<font color="#E5E5E5"> subject to modification you can put</font>

207
00:09:56,220 --> 00:10:04,410
<font color="#E5E5E5">your own exception handling code here</font>

208
00:09:59,100 --> 00:10:06,240
and as you<font color="#CCCCCC"> may notice that after I upon</font>

209
00:10:04,410 --> 00:10:11,130
my selection of one of the solutions

210
00:10:06,240 --> 00:10:15,360
from the list this warning disappears so

211
00:10:11,130 --> 00:10:18,980
if I undo this process the warning will

212
00:10:15,360 --> 00:10:21,800
show up again sometimes<font color="#E5E5E5"> sometimes</font>

213
00:10:18,980 --> 00:10:25,580
untrusting puts re capsulated and

214
00:10:21,800 --> 00:10:28,250
I in some sort of composite data have

215
00:10:25,580 --> 00:10:30,680
such as data structure and rather than<font color="#E5E5E5"> a</font>

216
00:10:28,250 --> 00:10:34,940
primitive data type such as string so

217
00:10:30,680 --> 00:10:37,550
it's only<font color="#E5E5E5"> reasonable when when it's only</font>

218
00:10:34,940 --> 00:10:41,060
reasonable to warn developers when the

219
00:10:37,550 --> 00:10:43,550
untrusting gets gets extracted from the

220
00:10:41,060 --> 00:10:47,359
data structure and that's how<font color="#E5E5E5"> a side</font>

221
00:10:43,550 --> 00:10:48,920
does it so for<font color="#E5E5E5"> instance this request I'd</font>

222
00:10:47,360 --> 00:10:57,380
get parameter map is very good<font color="#CCCCCC"> example</font>

223
00:10:48,920 --> 00:11:01,790
<font color="#CCCCCC">so we first let me see comment use these</font>

224
00:10:57,380 --> 00:11:04,519
instead of the invocations of get

225
00:11:01,790 --> 00:11:10,969
parameter to retrieve the parameters

226
00:11:04,519 --> 00:11:13,610
from the from<font color="#CCCCCC"> the HTTP request since a</font>

227
00:11:10,970 --> 00:11:16,970
size<font color="#E5E5E5"> Depot trust boundary policy do not</font>

228
00:11:13,610 --> 00:11:21,110
cover request nugget for<font color="#E5E5E5"> perimeter map</font>

229
00:11:16,970 --> 00:11:23,660
this this this method invocation so you

230
00:11:21,110 --> 00:11:28,670
need to extend the pulp<font color="#E5E5E5"> the default</font>

231
00:11:23,660 --> 00:11:30,680
rules by to add your<font color="#E5E5E5"> own ones so to that</font>

232
00:11:28,670 --> 00:11:33,380
end all you need to<font color="#E5E5E5"> do is</font><font color="#CCCCCC"> to right click</font>

233
00:11:30,680 --> 00:11:36,079
on the project and you go navigate to a

234
00:11:33,380 --> 00:11:38,240
side and you address our rules as that

235
00:11:36,079 --> 00:11:41,390
will create a folder named<font color="#CCCCCC"> as our rules</font>

236
00:11:38,240 --> 00:11:46,899
under your project and all the rules are

237
00:11:41,390 --> 00:11:49,640
written in HD<font color="#E5E5E5"> XML and this trust</font>

238
00:11:46,899 --> 00:11:51,980
<font color="#E5E5E5">boundary is that XML file is where you</font>

239
00:11:49,640 --> 00:11:54,110
need<font color="#CCCCCC"> to put the rules in so for a sick</font>

240
00:11:51,980 --> 00:11:57,970
of time I've already prepared the rules

241
00:11:54,110 --> 00:11:57,970
<font color="#CCCCCC">for a get parameter map</font>

242
00:12:02,120 --> 00:12:05,540
so just

243
00:12:08,529 --> 00:12:12,029
copy this

244
00:12:14,930 --> 00:12:22,250
hey Stan and save it and<font color="#CCCCCC"> then all you</font>

245
00:12:19,070 --> 00:12:24,890
need<font color="#E5E5E5"> to do is to tell a side that you</font>

246
00:12:22,250 --> 00:12:26,930
you want<font color="#E5E5E5"> to use the rules</font><font color="#CCCCCC"> that you just</font>

247
00:12:24,890 --> 00:12:29,720
created by going to the preference

248
00:12:26,930 --> 00:12:31,339
setting and then you say<font color="#E5E5E5"> okay I want to</font>

249
00:12:29,720 --> 00:12:34,580
use trust boundaries from<font color="#E5E5E5"> the project</font>

250
00:12:31,339 --> 00:12:36,830
under detection and then click OK and

251
00:12:34,580 --> 00:12:40,940
then SI response to the change by

252
00:12:36,830 --> 00:12:43,760
identifying vulnerable code by using

253
00:12:40,940 --> 00:12:45,649
both the default policies and also the

254
00:12:43,760 --> 00:12:48,620
extended ones that you just created and

255
00:12:45,649 --> 00:12:53,470
now you can<font color="#E5E5E5"> see that the</font><font color="#CCCCCC"> map the method</font>

256
00:12:48,620 --> 00:12:57,350
<font color="#E5E5E5">invocation map</font><font color="#CCCCCC"> duck get are marked as</font>

257
00:12:53,470 --> 00:13:00,470
vulnerable because it's the is where you

258
00:12:57,350 --> 00:13:03,380
<font color="#E5E5E5">get the untrusted input so this code is</font>

259
00:13:00,470 --> 00:13:06,920
actually a similar to the ones we we saw

260
00:13:03,380 --> 00:13:10,220
for a get parameter if you delete them

261
00:13:06,920 --> 00:13:12,949
<font color="#E5E5E5">the warning is what the warnings will go</font>

262
00:13:10,220 --> 00:13:16,190
away and<font color="#E5E5E5"> also if you hover over you will</font>

263
00:13:12,950 --> 00:13:21,050
get a list of input<font color="#E5E5E5"> tabs as well as</font>

264
00:13:16,190 --> 00:13:25,100
actually here see you will see the

265
00:13:21,050 --> 00:13:27,819
explanation for you and instead besides

266
00:13:25,100 --> 00:13:31,580
input validation<font color="#E5E5E5"> a cell also supports</font>

267
00:13:27,820 --> 00:13:35,300
output encoding by identifying you know

268
00:13:31,580 --> 00:13:37,760
places where the application content

269
00:13:35,300 --> 00:13:41,329
content gets output to software like web

270
00:13:37,760 --> 00:13:46,610
browsers here's an example at this line

271
00:13:41,330 --> 00:13:50,060
that this the application variable part

272
00:13:46,610 --> 00:13:52,250
out is rendered to a web browser which

273
00:13:50,060 --> 00:13:54,739
is very common indicator of process

274
00:13:52,250 --> 00:13:56,959
scripting vulnerability so when you

275
00:13:54,740 --> 00:13:59,270
hover over or click<font color="#E5E5E5"> on the icon you</font>

276
00:13:56,959 --> 00:14:02,810
would get a list of including strategies

277
00:13:59,270 --> 00:14:04,329
from<font color="#CCCCCC"> it's a fee and if you for instance</font>

278
00:14:02,810 --> 00:14:07,508
for this case

279
00:14:04,329 --> 00:14:11,529
choose HTML encoding and then you will

280
00:14:07,509 --> 00:14:13,299
the code will<font color="#CCCCCC"> be generated that the</font>

281
00:14:11,529 --> 00:14:17,319
encoding code will<font color="#CCCCCC"> be generated to</font>

282
00:14:13,299 --> 00:14:20,709
<font color="#E5E5E5">address the warning so besides improv at</font>

283
00:14:17,319 --> 00:14:23,699
deschanel putting coding we also<font color="#E5E5E5"> that</font>

284
00:14:20,709 --> 00:14:28,089
also provides<font color="#CCCCCC"> a feature what we call</font>

285
00:14:23,699 --> 00:14:32,709
secure coding on demand service so it's

286
00:14:28,089 --> 00:14:35,230
four variables were untrust inputs that

287
00:14:32,709 --> 00:14:37,449
are not identified by a side

288
00:14:35,230 --> 00:14:39,399
automatically because of all kinds of

289
00:14:37,449 --> 00:14:43,748
reasons<font color="#E5E5E5"> for instance lacking trust</font>

290
00:14:39,399 --> 00:14:47,829
boundary rules<font color="#E5E5E5"> so for cases like that</font>

291
00:14:43,749 --> 00:14:50,319
you all you need<font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> to select for</font>

292
00:14:47,829 --> 00:14:53,049
instance this<font color="#CCCCCC"> one you just</font><font color="#E5E5E5"> select this</font>

293
00:14:50,319 --> 00:14:55,868
variable and then right click and you

294
00:14:53,049 --> 00:14:58,179
will see in the<font color="#E5E5E5"> context menu you will</font>

295
00:14:55,869 --> 00:15:01,299
see a menu items that is happy validator

296
00:14:58,179 --> 00:15:04,269
and then the sub menu items are the

297
00:15:01,299 --> 00:15:07,149
rules that<font color="#E5E5E5"> can be extracted from a savvy</font>

298
00:15:04,269 --> 00:15:10,959
for<font color="#CCCCCC"> your validation for instance i'm</font>

299
00:15:07,149 --> 00:15:15,790
going<font color="#E5E5E5"> to choose safe</font><font color="#CCCCCC"> strings so and this</font>

300
00:15:10,959 --> 00:15:17,790
<font color="#E5E5E5">will generate the same the same code</font>

301
00:15:15,790 --> 00:15:23,459
routines that does the validation and

302
00:15:17,790 --> 00:15:23,459
and this<font color="#E5E5E5"> is all i have</font><font color="#CCCCCC"> for the demo</font>

303
00:15:29,640 --> 00:15:37,990
thank you<font color="#CCCCCC"> all right so as you can see</font>

304
00:15:34,290 --> 00:15:39,819
<font color="#CCCCCC">that so we putting the programmer</font>

305
00:15:37,990 --> 00:15:42,040
supports with ideas we want<font color="#CCCCCC"> to make it</font>

306
00:15:39,820 --> 00:15:46,779
as easy as possible for the developers

307
00:15:42,040 --> 00:15:49,060
to do the right thing<font color="#CCCCCC"> okay and sort</font><font color="#E5E5E5"> of</font>

308
00:15:46,779 --> 00:15:51,339
<font color="#CCCCCC">weak in our work we identify this at</font>

309
00:15:49,060 --> 00:15:53,800
least<font color="#E5E5E5"> two different strategies for doing</font>

310
00:15:51,339 --> 00:15:56,110
input validation one strategy<font color="#E5E5E5"> is you</font>

311
00:15:53,800 --> 00:15:57,910
performing foot vibration right<font color="#E5E5E5"> before a</font>

312
00:15:56,110 --> 00:16:00,700
critical operation I<font color="#E5E5E5"> can putting stuff</font>

313
00:15:57,910 --> 00:16:04,660
into<font color="#E5E5E5"> the database or you know writing</font>

314
00:16:00,700 --> 00:16:07,029
things to the browser HTTP stream the

315
00:16:04,660 --> 00:16:08,529
advantage of that approach is you know

316
00:16:07,029 --> 00:16:10,450
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> you're doing</font><font color="#CCCCCC"> because this</font>

317
00:16:08,529 --> 00:16:13,240
is this is the last<font color="#E5E5E5"> chance you can</font>

318
00:16:10,450 --> 00:16:15,100
validate or encode something the

319
00:16:13,240 --> 00:16:16,810
disadvantages you may you may have to do

320
00:16:15,100 --> 00:16:18,790
redundant validations for example<font color="#E5E5E5"> you</font>

321
00:16:16,810 --> 00:16:20,319
get one input and it goes into two

322
00:16:18,790 --> 00:16:21,880
different database tables and then you

323
00:16:20,320 --> 00:16:23,950
get two different warnings as I'm sure

324
00:16:21,880 --> 00:16:25,930
many of you<font color="#CCCCCC"> have seen those zinging in</font>

325
00:16:23,950 --> 00:16:29,620
warnings generated by by saying

326
00:16:25,930 --> 00:16:32,290
<font color="#E5E5E5">something like fortify and then and also</font>

327
00:16:29,620 --> 00:16:34,029
<font color="#E5E5E5">you may fail to validate because it's it</font>

328
00:16:32,290 --> 00:16:35,920
may be difficult to foresee all the

329
00:16:34,029 --> 00:16:37,720
critical operations today this set of

330
00:16:35,920 --> 00:16:39,610
operation is critical and then tomorrow

331
00:16:37,720 --> 00:16:42,160
<font color="#CCCCCC">might be something</font><font color="#E5E5E5"> else is and then that</font>

332
00:16:39,610 --> 00:16:43,510
<font color="#E5E5E5">this strategy is going to not be able to</font>

333
00:16:42,160 --> 00:16:46,270
catch catch that the alternative

334
00:16:43,510 --> 00:16:48,939
strategy is you validate something as

335
00:16:46,270 --> 00:16:50,500
soon as it comes in and then and then

336
00:16:48,940 --> 00:16:52,450
you say well you no matter where it goes

337
00:16:50,500 --> 00:16:56,080
<font color="#E5E5E5">that I know what what the input is right</font>

338
00:16:52,450 --> 00:16:58,029
the<font color="#E5E5E5"> the advantage of that approaches you</font>

339
00:16:56,080 --> 00:17:00,040
have developers attention right then and

340
00:16:58,029 --> 00:17:01,779
there make the right choice but the

341
00:17:00,040 --> 00:17:03,670
disadvantage is it can lead to some

342
00:17:01,779 --> 00:17:05,470
false positive because some some things

343
00:17:03,670 --> 00:17:08,290
may never go anywhere and<font color="#E5E5E5"> then you ask</font>

344
00:17:05,470 --> 00:17:10,270
for validation anyways and then it does

345
00:17:08,290 --> 00:17:12,938
not sometimes does not<font color="#E5E5E5"> work well with</font>

346
00:17:10,270 --> 00:17:14,020
dependency injections some of these

347
00:17:12,939 --> 00:17:16,720
things<font color="#E5E5E5"> because you don't know where</font><font color="#CCCCCC"> the</font>

348
00:17:14,020 --> 00:17:18,819
input<font color="#E5E5E5"> is coming from so aside really</font>

349
00:17:16,720 --> 00:17:22,179
can't handle both strategies all right

350
00:17:18,819 --> 00:17:23,740
so uh and we have experimented with

351
00:17:22,179 --> 00:17:27,490
different versions looking at different

352
00:17:23,740 --> 00:17:29,740
<font color="#E5E5E5">things and we've done some evaluations</font>

353
00:17:27,490 --> 00:17:33,670
of a site for the refactoring pot

354
00:17:29,740 --> 00:17:37,330
against an open source project using

355
00:17:33,670 --> 00:17:39,700
qualify as our benchmark and the details

356
00:17:37,330 --> 00:17:41,850
are in the in a paper which<font color="#E5E5E5"> I will give</font>

357
00:17:39,700 --> 00:17:44,080
you a link later on you can look at but

358
00:17:41,850 --> 00:17:45,879
just<font color="#CCCCCC"> too similar</font><font color="#E5E5E5"> just to give you some</font>

359
00:17:44,080 --> 00:17:48,879
additional ideas so once you<font color="#CCCCCC"> have this</font>

360
00:17:45,880 --> 00:17:50,350
then this is not currently fully

361
00:17:48,880 --> 00:17:52,090
implemented but this I think<font color="#E5E5E5"> it's a very</font>

362
00:17:50,350 --> 00:17:54,370
good<font color="#E5E5E5"> idea that shows</font><font color="#CCCCCC"> that this input</font>

363
00:17:52,090 --> 00:17:56,919
validation is very different from the

364
00:17:54,370 --> 00:17:59,050
currency<font color="#E5E5E5"> for example filter based input</font>

365
00:17:56,920 --> 00:18:01,060
validation because you're closer to the

366
00:17:59,050 --> 00:18:03,490
application context you're not doing it

367
00:18:01,060 --> 00:18:06,428
outside of<font color="#E5E5E5"> your application you know</font>

368
00:18:03,490 --> 00:18:09,460
before<font color="#CCCCCC"> you hit the</font><font color="#E5E5E5"> the moon for example</font>

369
00:18:06,429 --> 00:18:13,420
a semantic validation so once you let's

370
00:18:09,460 --> 00:18:16,870
say for<font color="#CCCCCC"> example identify an input</font>

371
00:18:13,420 --> 00:18:18,640
variable as a as a file path okay then

372
00:18:16,870 --> 00:18:21,070
you can<font color="#E5E5E5"> have an option to say may be</font>

373
00:18:18,640 --> 00:18:23,470
limited to a particular directory<font color="#CCCCCC"> all</font>

374
00:18:21,070 --> 00:18:26,350
<font color="#CCCCCC">right so so so as an example that</font><font color="#E5E5E5"> you</font>

375
00:18:23,470 --> 00:18:29,170
can have a lot more semantics that's

376
00:18:26,350 --> 00:18:30,909
specific for the application<font color="#E5E5E5"> and you can</font>

377
00:18:29,170 --> 00:18:34,120
prefer you can add more security

378
00:18:30,910 --> 00:18:36,370
protection for that so so so<font color="#E5E5E5"> I just want</font>

379
00:18:34,120 --> 00:18:39,010
<font color="#E5E5E5">to point that one out and as I said</font>

380
00:18:36,370 --> 00:18:42,790
<font color="#CCCCCC">we've evaluated this against</font><font color="#E5E5E5"> Apache</font>

381
00:18:39,010 --> 00:18:46,110
rolla which is a full fledge the<font color="#CCCCCC"> blog</font>

382
00:18:42,790 --> 00:18:48,428
server with 65k lines of code more than

383
00:18:46,110 --> 00:18:50,439
65,000 lines of code and we did a you

384
00:18:48,429 --> 00:18:52,600
know<font color="#E5E5E5"> simple Google search on powered by</font>

385
00:18:50,440 --> 00:18:54,910
Apache<font color="#E5E5E5"> rolla and then 1.8 million</font>

386
00:18:52,600 --> 00:18:59,500
entries came up so there's a lot of

387
00:18:54,910 --> 00:19:02,050
<font color="#E5E5E5">things out there</font><font color="#CCCCCC"> that use this as a as a</font>

388
00:18:59,500 --> 00:19:05,230
tool and then as a platform and then we

389
00:19:02,050 --> 00:19:07,090
benchmarked against modify SCA and then

390
00:19:05,230 --> 00:19:08,830
the result is is published in a paper

391
00:19:07,090 --> 00:19:11,668
which is referenced i'll give you a link

392
00:19:08,830 --> 00:19:14,379
<font color="#E5E5E5">to this you</font><font color="#CCCCCC"> can you can get that and</font>

393
00:19:11,669 --> 00:19:16,419
<font color="#CCCCCC">john is</font><font color="#E5E5E5"> not here but one of the</font>

394
00:19:14,380 --> 00:19:19,300
co-authors of<font color="#E5E5E5"> van paper is John Melton</font>

395
00:19:16,419 --> 00:19:22,419
is one of the project leads at the

396
00:19:19,300 --> 00:19:25,240
absence of project so John actually did

397
00:19:22,419 --> 00:19:27,010
a benchmark using his company was

398
00:19:25,240 --> 00:19:28,840
working at that<font color="#E5E5E5"> time for a large</font>

399
00:19:27,010 --> 00:19:31,030
financial service company as a software

400
00:19:28,840 --> 00:19:32,980
security auditor and it used his

401
00:19:31,030 --> 00:19:36,639
company's best practice as a benchmark

402
00:19:32,980 --> 00:19:38,350
to analyze<font color="#CCCCCC"> rolla using fortify and then</font>

403
00:19:36,640 --> 00:19:41,169
we<font color="#CCCCCC"> benchmarked</font><font color="#E5E5E5"> the results of that</font>

404
00:19:38,350 --> 00:19:43,209
against aside and see what sort of

405
00:19:41,169 --> 00:19:45,370
results<font color="#CCCCCC"> we get and</font>

406
00:19:43,210 --> 00:19:47,289
in interest of time I do want to cover

407
00:19:45,370 --> 00:19:50,590
some of the<font color="#E5E5E5"> more sort of interesting</font>

408
00:19:47,289 --> 00:19:52,620
research ideas so I'm<font color="#CCCCCC"> going to skip some</font>

409
00:19:50,590 --> 00:19:57,490
<font color="#E5E5E5">of these things you know this</font><font color="#CCCCCC"> is what</font>

410
00:19:52,620 --> 00:20:00,100
425 found and the thing<font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to take</font>

411
00:19:57,490 --> 00:20:04,990
<font color="#E5E5E5">away is best majority of the errors that</font>

412
00:20:00,100 --> 00:20:06,908
fortify generated for for this Apache

413
00:20:04,990 --> 00:20:08,830
Laura<font color="#E5E5E5"> our input validation outputting</font>

414
00:20:06,909 --> 00:20:10,390
coding kinds of stuff and by the<font color="#E5E5E5"> way</font>

415
00:20:08,830 --> 00:20:12,158
<font color="#E5E5E5">John thought that program with no</font>

416
00:20:10,390 --> 00:20:13,899
average quality is not particularly good

417
00:20:12,159 --> 00:20:16,480
<font color="#E5E5E5">if it's not certainly badiya seen much</font>

418
00:20:13,899 --> 00:20:18,520
worse than that<font color="#E5E5E5"> so vast majority of the</font>

419
00:20:16,480 --> 00:20:20,710
problem was about close<font color="#CCCCCC"> to sixty percent</font>

420
00:20:18,520 --> 00:20:22,570
of the problems are those input

421
00:20:20,710 --> 00:20:24,850
validation and output encoding errors

422
00:20:22,570 --> 00:20:26,230
and ninety percent of those aside could

423
00:20:24,850 --> 00:20:28,539
just take<font color="#CCCCCC"> care</font><font color="#E5E5E5"> of right away so every</font>

424
00:20:26,230 --> 00:20:31,149
woods if you<font color="#E5E5E5"> use the side you could have</font>

425
00:20:28,539 --> 00:20:32,830
solve all these problems before you hit

426
00:20:31,149 --> 00:20:34,510
static<font color="#E5E5E5"> analysis you know all these</font>

427
00:20:32,830 --> 00:20:37,240
things will be<font color="#CCCCCC"> that incidentally there</font>

428
00:20:34,510 --> 00:20:39,309
was a university challenge yesterday you

429
00:20:37,240 --> 00:20:41,860
know our team we fielded a team from UNC

430
00:20:39,309 --> 00:20:43,809
Charlotte we won the defense are winning

431
00:20:41,860 --> 00:20:46,149
unfortunately we didn't win the overall

432
00:20:43,809 --> 00:20:48,070
competition but we won<font color="#CCCCCC"> the defense part</font>

433
00:20:46,149 --> 00:20:50,199
and the<font color="#E5E5E5"> judges were arguing which part</font>

434
00:20:48,070 --> 00:20:52,270
is more important<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I let the let this</font>

435
00:20:50,200 --> 00:20:55,990
to other people<font color="#CCCCCC"> but the interesting</font>

436
00:20:52,270 --> 00:20:58,029
<font color="#E5E5E5">thing is we actually use aside against</font>

437
00:20:55,990 --> 00:21:00,940
to web applications they wanted us to

438
00:20:58,029 --> 00:21:03,399
defend<font color="#E5E5E5"> and aside found like 30 more than</font>

439
00:21:00,940 --> 00:21:05,529
30 vulnerabilities and we use this

440
00:21:03,399 --> 00:21:08,260
mechanism we're talking about that too

441
00:21:05,529 --> 00:21:10,029
just very quickly wipe out those those

442
00:21:08,260 --> 00:21:11,529
sort of low-hanging<font color="#CCCCCC"> fruits so so so</font><font color="#E5E5E5"> I</font>

443
00:21:10,029 --> 00:21:13,450
<font color="#CCCCCC">think a site is particularly effective</font>

444
00:21:11,529 --> 00:21:15,340
sort of handling these kinds of things

445
00:21:13,450 --> 00:21:17,260
as its current prototype implementation

446
00:21:15,340 --> 00:21:20,860
just can take<font color="#E5E5E5"> care</font><font color="#CCCCCC"> of these things very</font>

447
00:21:17,260 --> 00:21:22,419
very<font color="#E5E5E5"> quickly but I would I do want to</font>

448
00:21:20,860 --> 00:21:24,729
talk a little bit about false positives

449
00:21:22,419 --> 00:21:28,510
with this<font color="#E5E5E5"> um false positive analysis so</font>

450
00:21:24,730 --> 00:21:31,750
aside reported more than 118 taint

451
00:21:28,510 --> 00:21:34,779
sources that because in our current<font color="#CCCCCC"> this</font>

452
00:21:31,750 --> 00:21:39,630
version we track tank sources more than

453
00:21:34,779 --> 00:21:43,419
1 18 10 sources then what if I did<font color="#E5E5E5"> okay</font>

454
00:21:39,630 --> 00:21:46,750
so but we did sort of analysis on all

455
00:21:43,419 --> 00:21:48,940
these cases<font color="#CCCCCC"> we find that 94 of the of</font>

456
00:21:46,750 --> 00:21:52,360
them are what we were determining as

457
00:21:48,940 --> 00:21:55,179
potentially exploitable and you can make

458
00:21:52,360 --> 00:21:57,189
a very strong argument and we do as a

459
00:21:55,179 --> 00:21:59,160
best defense in depth

460
00:21:57,190 --> 00:22:02,080
this you should validate them anyways

461
00:21:59,160 --> 00:22:03,820
there are<font color="#E5E5E5"> however 24</font><font color="#CCCCCC"> force positive so</font>

462
00:22:02,080 --> 00:22:05,620
give you an example of something that we

463
00:22:03,820 --> 00:22:07,540
think<font color="#E5E5E5"> is a good thing</font><font color="#CCCCCC"> to do as a</font>

464
00:22:05,620 --> 00:22:09,489
<font color="#CCCCCC">defense-in-depth strategy</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> would like</font>

465
00:22:07,540 --> 00:22:12,490
<font color="#CCCCCC">to hear your take on it here's a snippet</font>

466
00:22:09,490 --> 00:22:15,430
of code where there's an error exception

467
00:22:12,490 --> 00:22:17,980
was thrown and as a parameter to the

468
00:22:15,430 --> 00:22:20,980
exception handling routine the code<font color="#E5E5E5"> has</font>

469
00:22:17,980 --> 00:22:23,470
requested<font color="#E5E5E5"> get URL all right now this URL</font>

470
00:22:20,980 --> 00:22:27,510
could have could have a javascript in it

471
00:22:23,470 --> 00:22:30,220
and what what in this particular case

472
00:22:27,510 --> 00:22:32,710
fortified did not flag it because I

473
00:22:30,220 --> 00:22:34,120
suppose this URL didn't go anywhere the

474
00:22:32,710 --> 00:22:36,730
oldest exception heavenly didn't do

475
00:22:34,120 --> 00:22:37,959
anything but this could be you know be

476
00:22:36,730 --> 00:22:40,480
in the entry<font color="#E5E5E5"> point for something like</font>

477
00:22:37,960 --> 00:22:42,910
lock<font color="#CCCCCC"> poor's any so so so so we think</font>

478
00:22:40,480 --> 00:22:44,380
this is a good<font color="#CCCCCC"> practice especially when</font>

479
00:22:42,910 --> 00:22:47,020
there's<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know very</font><font color="#E5E5E5"> little overhead</font>

480
00:22:44,380 --> 00:22:50,170
you just click and generate some HTML in

481
00:22:47,020 --> 00:22:51,879
code code that would sort<font color="#E5E5E5"> of prevent</font>

482
00:22:50,170 --> 00:22:55,750
those kinds of things<font color="#E5E5E5"> from happening as</font>

483
00:22:51,880 --> 00:22:58,600
your software evolves and but it does

484
00:22:55,750 --> 00:23:01,420
have some false positives as the 24

485
00:22:58,600 --> 00:23:03,580
cases so for<font color="#E5E5E5"> example in this</font><font color="#CCCCCC"> case the</font>

486
00:23:01,420 --> 00:23:05,140
code reads in a parameter and that

487
00:23:03,580 --> 00:23:07,899
parameter is either going to be true or

488
00:23:05,140 --> 00:23:09,970
<font color="#E5E5E5">false it's a boolean test so in all</font>

489
00:23:07,900 --> 00:23:12,220
likelihood this<font color="#E5E5E5"> is probably harmless you</font>

490
00:23:09,970 --> 00:23:14,950
don't have to worry about<font color="#E5E5E5"> it but because</font>

491
00:23:12,220 --> 00:23:16,750
we handle<font color="#CCCCCC"> taint sources will flag that</font>

492
00:23:14,950 --> 00:23:20,790
as well so so there<font color="#E5E5E5"> are awesome</font><font color="#CCCCCC"> false</font>

493
00:23:16,750 --> 00:23:24,370
positives<font color="#E5E5E5"> so just to quickly summarize</font>

494
00:23:20,790 --> 00:23:26,170
the portion of code refactoring and

495
00:23:24,370 --> 00:23:29,020
specifically within the context of the

496
00:23:26,170 --> 00:23:31,030
demo<font color="#E5E5E5"> is a you know we're trying to</font>

497
00:23:29,020 --> 00:23:33,700
address validation<font color="#CCCCCC"> encoding</font><font color="#E5E5E5"> issues at</font>

498
00:23:31,030 --> 00:23:35,590
the<font color="#E5E5E5"> time of development requires no</font>

499
00:23:33,700 --> 00:23:37,690
specialized training we do not assume

500
00:23:35,590 --> 00:23:38,889
developers no static analysis or

501
00:23:37,690 --> 00:23:43,480
anything like that everything is

502
00:23:38,890 --> 00:23:45,160
<font color="#E5E5E5">Institute in the browser in the ni de we</font>

503
00:23:43,480 --> 00:23:48,220
want to be able to best capture

504
00:23:45,160 --> 00:23:50,290
application context I want to save<font color="#E5E5E5"> time</font>

505
00:23:48,220 --> 00:23:52,510
fixing vulnerabilities that may be<font color="#E5E5E5"> found</font>

506
00:23:50,290 --> 00:23:54,909
as opposed to<font color="#E5E5E5"> coming back to fix it</font>

507
00:23:52,510 --> 00:23:58,420
later as in most current best practices

508
00:23:54,910 --> 00:24:00,640
and that we find it to be very effective

509
00:23:58,420 --> 00:24:05,500
vast majority of those errors we could

510
00:24:00,640 --> 00:24:08,590
we could actually detect and save and<font color="#E5E5E5"> we</font>

511
00:24:05,500 --> 00:24:12,320
can save quite a bit of time<font color="#E5E5E5"> in terms</font>

512
00:24:08,590 --> 00:24:15,080
sorry inter about workload for the

513
00:24:12,320 --> 00:24:18,590
<font color="#E5E5E5">auditors so for example not about a</font>

514
00:24:15,080 --> 00:24:20,270
thousand out of 3400 warnings for the

515
00:24:18,590 --> 00:24:24,679
fire generate we could have taken care

516
00:24:20,270 --> 00:24:26,780
<font color="#E5E5E5">of at the development</font><font color="#CCCCCC"> time so some</font>

517
00:24:24,680 --> 00:24:29,570
practical implication for a side we

518
00:24:26,780 --> 00:24:31,820
believe that<font color="#E5E5E5"> a tool like that can be a</font>

519
00:24:29,570 --> 00:24:34,520
<font color="#E5E5E5">very good complement to static analysis</font>

520
00:24:31,820 --> 00:24:36,230
so you can generate you know credit for

521
00:24:34,520 --> 00:24:37,700
example you<font color="#E5E5E5"> can generate cleansing rules</font>

522
00:24:36,230 --> 00:24:42,410
you know that's one<font color="#CCCCCC"> of the big problems</font>

523
00:24:37,700 --> 00:24:44,720
<font color="#E5E5E5">for for weeding out you know warnings</font>

524
00:24:42,410 --> 00:24:46,790
from static analysis is you know how do

525
00:24:44,720 --> 00:24:49,070
you<font color="#E5E5E5"> know that something has already been</font>

526
00:24:46,790 --> 00:24:50,840
cleansed one of the things<font color="#E5E5E5"> thatís I</font>

527
00:24:49,070 --> 00:24:53,000
<font color="#CCCCCC">can't do because the developer has</font><font color="#E5E5E5"> taken</font>

528
00:24:50,840 --> 00:24:55,100
certain actions you can generate some

529
00:24:53,000 --> 00:24:57,590
cleansing rules and that could be as an

530
00:24:55,100 --> 00:24:58,760
input to your security auditing people

531
00:24:57,590 --> 00:25:00,230
and say oh he or somebody has already

532
00:24:58,760 --> 00:25:02,480
done that so I don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to worry about</font>

533
00:25:00,230 --> 00:25:05,180
it<font color="#E5E5E5"> okay so i think that's that could be</font>

534
00:25:02,480 --> 00:25:06,770
a value it and it could also be used<font color="#E5E5E5"> as</font>

535
00:25:05,180 --> 00:25:08,510
sort of a live version of static

536
00:25:06,770 --> 00:25:11,230
analysis taking care<font color="#E5E5E5"> of some of the</font>

537
00:25:08,510 --> 00:25:14,210
basic vulnerabilities without<font color="#E5E5E5"> having to</font>

538
00:25:11,230 --> 00:25:18,080
invest in<font color="#E5E5E5"> a full-blown static analysis</font>

539
00:25:14,210 --> 00:25:20,480
and I think that<font color="#E5E5E5"> is also of value so now</font>

540
00:25:18,080 --> 00:25:22,220
<font color="#CCCCCC">I have in the next few minutes I'm going</font>

541
00:25:20,480 --> 00:25:24,170
to<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the issues I</font><font color="#CCCCCC"> think</font>

542
00:25:22,220 --> 00:25:26,510
we want to take<font color="#E5E5E5"> this idea of supporting</font>

543
00:25:24,170 --> 00:25:28,310
ID a little bit further and looking at

544
00:25:26,510 --> 00:25:31,940
some more interesting vulnerabilities

545
00:25:28,310 --> 00:25:34,669
and this is you<font color="#E5E5E5"> know stepping more in</font>

546
00:25:31,940 --> 00:25:36,890
the research vol<font color="#CCCCCC"> Ain we have not fully</font>

547
00:25:34,670 --> 00:25:38,750
implemented that they're so so again

548
00:25:36,890 --> 00:25:41,480
<font color="#CCCCCC">going back</font><font color="#E5E5E5"> to our premise what we're</font>

549
00:25:38,750 --> 00:25:44,870
trying<font color="#E5E5E5"> to do is</font><font color="#CCCCCC"> to remind developers of</font>

550
00:25:41,480 --> 00:25:48,220
potential security issues and and and

551
00:25:44,870 --> 00:25:51,770
encourage them<font color="#E5E5E5"> to take some actions so</font>

552
00:25:48,220 --> 00:25:52,790
so so so the second mechanism that we're

553
00:25:51,770 --> 00:25:55,220
going<font color="#E5E5E5"> to talk about is called</font>

554
00:25:52,790 --> 00:25:57,350
interactive code annotation and I want

555
00:25:55,220 --> 00:26:00,290
<font color="#E5E5E5">to first off by saying that you know</font>

556
00:25:57,350 --> 00:26:02,810
annotation is not a new idea but the way

557
00:26:00,290 --> 00:26:04,850
we<font color="#CCCCCC"> are using a notation in this context</font>

558
00:26:02,810 --> 00:26:06,830
<font color="#E5E5E5">is different from traditional annotation</font>

559
00:26:04,850 --> 00:26:09,770
because traditional annotation our stat

560
00:26:06,830 --> 00:26:15,800
are text-based you you write certain

561
00:26:09,770 --> 00:26:17,870
sort of extra syntax program statements

562
00:26:15,800 --> 00:26:19,760
essentially in the<font color="#E5E5E5"> program right so the</font>

563
00:26:17,870 --> 00:26:20,689
kinds of annotation we're talking about

564
00:26:19,760 --> 00:26:24,770
<font color="#E5E5E5">interactive</font>

565
00:26:20,690 --> 00:26:28,010
its first of<font color="#E5E5E5"> all it's</font><font color="#CCCCCC"> not text based the</font>

566
00:26:24,770 --> 00:26:30,410
focus<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> about asserting something</font>

567
00:26:28,010 --> 00:26:32,990
about a piece of code but to talk<font color="#E5E5E5"> about</font>

568
00:26:30,410 --> 00:26:35,270
security relationships between different

569
00:26:32,990 --> 00:26:36,640
<font color="#E5E5E5">parts of the code which is very</font>

570
00:26:35,270 --> 00:26:38,570
different from the traditional

571
00:26:36,640 --> 00:26:42,050
annotation which just talks about

572
00:26:38,570 --> 00:26:44,149
locally what this piece of code does and

573
00:26:42,050 --> 00:26:47,240
it's entirely we envisioned it to be

574
00:26:44,150 --> 00:26:48,890
entirely point click based so no extra

575
00:26:47,240 --> 00:26:51,140
syntax or anything like that is needed

576
00:26:48,890 --> 00:26:53,500
<font color="#E5E5E5">so this is what we're talking about is</font>

577
00:26:51,140 --> 00:26:55,640
we find this is people often

578
00:26:53,500 --> 00:26:57,260
misinterpret when they see a notation

579
00:26:55,640 --> 00:26:59,330
all developers don't like to do

580
00:26:57,260 --> 00:27:01,879
annotation and we wanted<font color="#E5E5E5"> to make it</font>

581
00:26:59,330 --> 00:27:04,040
<font color="#CCCCCC">really easy and hopefully that there is</font>

582
00:27:01,880 --> 00:27:05,980
<font color="#E5E5E5">value add as I will</font><font color="#CCCCCC"> show you later on</font><font color="#E5E5E5"> so</font>

583
00:27:04,040 --> 00:27:08,629
let me give you a motivating example

584
00:27:05,980 --> 00:27:11,390
sort of a simple<font color="#E5E5E5"> very simple online</font>

585
00:27:08,630 --> 00:27:14,240
banking kind of examples that have a

586
00:27:11,390 --> 00:27:16,570
user username row first name last name

587
00:27:14,240 --> 00:27:18,800
you have accounts have account number

588
00:27:16,570 --> 00:27:21,260
transactions you have transaction IDs

589
00:27:18,800 --> 00:27:22,700
that are tied to particular accounts and

590
00:27:21,260 --> 00:27:25,220
then you have a relationship<font color="#E5E5E5"> between</font>

591
00:27:22,700 --> 00:27:29,450
<font color="#E5E5E5">account number and</font><font color="#CCCCCC"> user name right so</font><font color="#E5E5E5"> so</font>

592
00:27:25,220 --> 00:27:31,490
<font color="#E5E5E5">it's a very standard simplest sort of</font>

593
00:27:29,450 --> 00:27:34,190
set of data base for for tracking those

594
00:27:31,490 --> 00:27:37,010
transactions so here's that sort of our

595
00:27:34,190 --> 00:27:40,490
current<font color="#E5E5E5"> mark design of this process so</font>

596
00:27:37,010 --> 00:27:42,560
as<font color="#CCCCCC"> we're writing code you see that this</font>

597
00:27:40,490 --> 00:27:44,450
line in this particular case I don't

598
00:27:42,560 --> 00:27:46,159
<font color="#CCCCCC">know whether you can you can see this or</font>

599
00:27:44,450 --> 00:27:50,450
not but what this the red wrong

600
00:27:46,160 --> 00:27:52,790
highlights is in routine a method call

601
00:27:50,450 --> 00:27:55,520
that eventually accesses one of those

602
00:27:52,790 --> 00:27:57,500
tables now where the<font color="#E5E5E5"> assumption is you</font>

603
00:27:55,520 --> 00:27:59,810
know you work in an organization with an

604
00:27:57,500 --> 00:28:02,480
SSG I'm assuming people know about besom

605
00:27:59,810 --> 00:28:04,730
and<font color="#CCCCCC"> SSG s right so so so your security</font>

606
00:28:02,480 --> 00:28:07,490
auditor says these tables are really

607
00:28:04,730 --> 00:28:09,020
critical access control you know needs

608
00:28:07,490 --> 00:28:10,820
to be applied to those tables let's say

609
00:28:09,020 --> 00:28:14,990
for example<font color="#CCCCCC"> all right so what we do is</font>

610
00:28:10,820 --> 00:28:17,480
we say<font color="#CCCCCC"> okay this call</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to have</font>

611
00:28:14,990 --> 00:28:19,580
<font color="#E5E5E5">access to one of those tables and we're</font>

612
00:28:17,480 --> 00:28:21,650
<font color="#E5E5E5">just asking the developer at that time</font>

613
00:28:19,580 --> 00:28:23,240
and<font color="#E5E5E5"> say</font><font color="#CCCCCC"> where is your X access control</font>

614
00:28:21,650 --> 00:28:25,640
logic show me where is your access

615
00:28:23,240 --> 00:28:28,520
control logic so the developer<font color="#E5E5E5"> maybe at</font>

616
00:28:25,640 --> 00:28:30,650
<font color="#E5E5E5">this point scroll up</font><font color="#CCCCCC"> to this green line</font>

617
00:28:28,520 --> 00:28:34,250
it says okay here's my access control

618
00:28:30,650 --> 00:28:36,800
logic and that's what i mean by interact

619
00:28:34,250 --> 00:28:39,170
annotation which is you are you are you

620
00:28:36,800 --> 00:28:41,899
<font color="#CCCCCC">are relating different parts of</font><font color="#E5E5E5"> the code</font>

621
00:28:39,170 --> 00:28:43,670
here's a part of code that<font color="#E5E5E5"> does database</font>

622
00:28:41,900 --> 00:28:47,090
access and here's a part of the code

623
00:28:43,670 --> 00:28:50,750
<font color="#E5E5E5">that does access control check and from</font>

624
00:28:47,090 --> 00:28:52,790
a programmer program perspective we have

625
00:28:50,750 --> 00:28:54,440
no<font color="#CCCCCC"> idea where the logic is but the</font>

626
00:28:52,790 --> 00:28:56,270
developer knows what it<font color="#E5E5E5"> is like</font>

627
00:28:54,440 --> 00:28:57,980
hopefully<font color="#E5E5E5"> so what we're</font><font color="#CCCCCC"> trying to do is</font>

628
00:28:56,270 --> 00:29:00,530
inside ID to bring out those

629
00:28:57,980 --> 00:29:03,590
relationships and capture them all right

630
00:29:00,530 --> 00:29:06,649
and so so so two questions immediately

631
00:29:03,590 --> 00:29:08,030
comes up is weird to ask questions

632
00:29:06,650 --> 00:29:10,340
<font color="#CCCCCC">because there's so many</font><font color="#E5E5E5"> different places</font>

633
00:29:08,030 --> 00:29:12,980
you can ask the questions and second is

634
00:29:10,340 --> 00:29:15,439
what is a valid validation so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> my</font>

635
00:29:12,980 --> 00:29:18,470
our current answer based on that we

636
00:29:15,440 --> 00:29:20,540
think that<font color="#E5E5E5"> ask the question at the level</font>

637
00:29:18,470 --> 00:29:22,880
of you know database access like SQL

638
00:29:20,540 --> 00:29:24,620
statements it's probably<font color="#E5E5E5"> too low level</font>

639
00:29:22,880 --> 00:29:27,020
because you can have library routines

640
00:29:24,620 --> 00:29:29,419
that are called<font color="#E5E5E5"> by different threats</font>

641
00:29:27,020 --> 00:29:31,280
right different transactions and it may

642
00:29:29,420 --> 00:29:34,160
be two different<font color="#CCCCCC"> levels so so to the</font>

643
00:29:31,280 --> 00:29:36,470
right level in our<font color="#E5E5E5"> judgment right now is</font>

644
00:29:34,160 --> 00:29:38,270
that what use case level a transaction

645
00:29:36,470 --> 00:29:40,010
level so<font color="#CCCCCC"> you know you you let's say</font>

646
00:29:38,270 --> 00:29:41,720
<font color="#E5E5E5">you're not in a web application then</font>

647
00:29:40,010 --> 00:29:43,400
this is what user sees at the high level

648
00:29:41,720 --> 00:29:45,560
<font color="#CCCCCC">with transaction so for example you know</font>

649
00:29:43,400 --> 00:29:47,900
<font color="#E5E5E5">it's a it could be a Java servlet or</font>

650
00:29:45,560 --> 00:29:50,060
some kind of an action any kind of<font color="#E5E5E5"> an</font>

651
00:29:47,900 --> 00:29:51,980
MVC framework you have this controller

652
00:29:50,060 --> 00:29:53,720
high level controller that comes in

653
00:29:51,980 --> 00:29:56,720
that's where you want<font color="#E5E5E5"> to ask the</font>

654
00:29:53,720 --> 00:29:58,790
question that's<font color="#CCCCCC"> a that's</font><font color="#E5E5E5"> the first first</font>

655
00:29:56,720 --> 00:30:01,760
<font color="#E5E5E5">point the second point is what is a</font>

656
00:29:58,790 --> 00:30:03,740
valid annotation and sort of

657
00:30:01,760 --> 00:30:06,200
theoretically what this annotation is

658
00:30:03,740 --> 00:30:08,780
really about parts of an invariant a

659
00:30:06,200 --> 00:30:11,480
security invariant so it's fundamentally

660
00:30:08,780 --> 00:30:14,680
a logic test it's got to be some sort of

661
00:30:11,480 --> 00:30:18,380
a<font color="#E5E5E5"> boolean test so okay so point as well</font>

662
00:30:14,680 --> 00:30:20,420
in a different syntax for example

663
00:30:18,380 --> 00:30:22,490
something like spring security it might

664
00:30:20,420 --> 00:30:24,950
be an assertion but assertion is really

665
00:30:22,490 --> 00:30:27,530
implemented as a as a logic test anyway

666
00:30:24,950 --> 00:30:28,940
so fundamentally it's a logic death so

667
00:30:27,530 --> 00:30:31,460
that's the first<font color="#E5E5E5"> thing is has to be a</font>

668
00:30:28,940 --> 00:30:34,610
logic test and it must be on the

669
00:30:31,460 --> 00:30:36,860
execution path from the<font color="#E5E5E5"> web entry to</font>

670
00:30:34,610 --> 00:30:38,629
your<font color="#E5E5E5"> database access so somebody just</font>

671
00:30:36,860 --> 00:30:41,090
sort of click something randomly we at

672
00:30:38,630 --> 00:30:43,280
least do some sanity check to see if if

673
00:30:41,090 --> 00:30:44,810
the<font color="#E5E5E5"> check you know if your annotation is</font>

674
00:30:43,280 --> 00:30:45,850
actually going to do anything for<font color="#E5E5E5"> your</font>

675
00:30:44,810 --> 00:30:48,460
ex

676
00:30:45,850 --> 00:30:51,189
this critical path<font color="#CCCCCC"> okay now armed with</font>

677
00:30:48,460 --> 00:30:54,070
that information we can<font color="#CCCCCC"> actually do some</font>

678
00:30:51,190 --> 00:30:55,570
very interesting analysis based on that

679
00:30:54,070 --> 00:30:59,110
and I think<font color="#E5E5E5"> those kinds of analysis are</font>

680
00:30:55,570 --> 00:31:01,539
not currently being done at<font color="#E5E5E5"> least out</font><font color="#CCCCCC"> of</font>

681
00:30:59,110 --> 00:31:04,000
the boxing static analysis so for

682
00:31:01,539 --> 00:31:06,039
example here's your web entry and here's

683
00:31:04,000 --> 00:31:07,570
your decks database access and we<font color="#CCCCCC"> asked</font>

684
00:31:06,039 --> 00:31:09,309
the developer where is your access

685
00:31:07,570 --> 00:31:12,549
control object using this as an<font color="#CCCCCC"> example</font>

686
00:31:09,309 --> 00:31:16,418
so this this this Wiggly thing here is

687
00:31:12,549 --> 00:31:18,908
where the logic tests that developer

688
00:31:16,419 --> 00:31:20,740
says here this is what i did my my

689
00:31:18,909 --> 00:31:22,720
access control now we actually<font color="#CCCCCC"> have no</font>

690
00:31:20,740 --> 00:31:24,850
<font color="#CCCCCC">idea whether this is accurate is</font>

691
00:31:22,720 --> 00:31:27,220
sufficient I mean we're not getting that

692
00:31:24,850 --> 00:31:29,020
right we just<font color="#CCCCCC"> say</font><font color="#E5E5E5"> okay looks like it's a</font>

693
00:31:27,220 --> 00:31:31,870
it's a boolean test it's on the<font color="#E5E5E5"> path</font>

694
00:31:29,020 --> 00:31:34,000
from the the entry to the database

695
00:31:31,870 --> 00:31:36,459
access point so we think it's you know I

696
00:31:34,000 --> 00:31:38,799
<font color="#E5E5E5">assume you did a good job but then we</font>

697
00:31:36,460 --> 00:31:41,380
can do some analysis path analysis in

698
00:31:38,799 --> 00:31:44,020
the code if we find<font color="#CCCCCC"> there's another path</font>

699
00:31:41,380 --> 00:31:45,789
on which there is no annotation at all

700
00:31:44,020 --> 00:31:47,918
then<font color="#E5E5E5"> we can know for sure there's a</font>

701
00:31:45,789 --> 00:31:49,570
broken access control right because<font color="#E5E5E5"> you</font>

702
00:31:47,919 --> 00:31:51,669
you told me this is where your access

703
00:31:49,570 --> 00:31:54,070
control point<font color="#E5E5E5"> is but I found</font><font color="#CCCCCC"> another</font>

704
00:31:51,669 --> 00:31:56,950
path that that you could get to the data

705
00:31:54,070 --> 00:31:59,139
so so we can do<font color="#CCCCCC"> some it</font><font color="#E5E5E5"> certainly these</font>

706
00:31:56,950 --> 00:32:01,900
are not complete but they are sufficient

707
00:31:59,140 --> 00:32:03,130
where we find is probably bugs but you

708
00:32:01,900 --> 00:32:06,309
know we cannot find everything obviously

709
00:32:03,130 --> 00:32:08,350
okay this<font color="#E5E5E5"> is another interesting case</font>

710
00:32:06,309 --> 00:32:09,700
I'll give you an example later on there

711
00:32:08,350 --> 00:32:12,010
let's<font color="#CCCCCC"> just suppose you have two</font>

712
00:32:09,700 --> 00:32:14,169
different transactions two different use

713
00:32:12,010 --> 00:32:15,460
cases and you<font color="#E5E5E5"> ask the developer and</font><font color="#CCCCCC"> it</font>

714
00:32:14,169 --> 00:32:17,799
may be written<font color="#E5E5E5"> by two different people</font>

715
00:32:15,460 --> 00:32:21,039
or different teams and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> ask for</font>

716
00:32:17,799 --> 00:32:22,480
annotation they all access the same data

717
00:32:21,039 --> 00:32:25,510
table but they have different

718
00:32:22,480 --> 00:32:28,059
annotations<font color="#E5E5E5"> now I think</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really</font>

719
00:32:25,510 --> 00:32:29,200
interesting to point out at least two

720
00:32:28,059 --> 00:32:31,539
development team there's some

721
00:32:29,200 --> 00:32:35,110
discrepancy is this really true maybe

722
00:32:31,539 --> 00:32:37,390
one of them should should be extra check

723
00:32:35,110 --> 00:32:39,100
should be done or what right so so

724
00:32:37,390 --> 00:32:41,049
that's another<font color="#CCCCCC"> example and actually have</font>

725
00:32:39,100 --> 00:32:43,418
a have a<font color="#E5E5E5"> concrete example to show you</font>

726
00:32:41,049 --> 00:32:45,850
<font color="#CCCCCC">that one as well so so how does that</font><font color="#E5E5E5"> go</font>

727
00:32:43,419 --> 00:32:49,720
away working in practice so we apply

728
00:32:45,850 --> 00:32:51,879
this technique to to open source

729
00:32:49,720 --> 00:32:54,250
projects roll<font color="#CCCCCC"> out with someone</font><font color="#E5E5E5"> we are we</font>

730
00:32:51,880 --> 00:32:56,799
did analysis on we also apply this on

731
00:32:54,250 --> 00:32:58,960
<font color="#CCCCCC">moodle which is a php-based course</font>

732
00:32:56,799 --> 00:33:00,700
management system<font color="#CCCCCC"> which is phenomenally</font>

733
00:32:58,960 --> 00:33:04,470
popular<font color="#CCCCCC"> in the university</font><font color="#E5E5E5"> community and</font>

734
00:33:00,700 --> 00:33:06,669
so we did that and<font color="#E5E5E5"> we are used</font>

735
00:33:04,470 --> 00:33:09,100
statistics your bug track security

736
00:33:06,669 --> 00:33:11,789
patches from those open source projects

737
00:33:09,100 --> 00:33:14,889
we found<font color="#E5E5E5"> out in rolla there were six</font>

738
00:33:11,789 --> 00:33:17,049
reported security patches three of them

739
00:33:14,890 --> 00:33:18,909
<font color="#E5E5E5">are sort of the input validation output</font>

740
00:33:17,049 --> 00:33:20,710
filter inka type which all can be

741
00:33:18,909 --> 00:33:22,750
handled by<font color="#CCCCCC"> assigning</font><font color="#E5E5E5"> them as is the</font>

742
00:33:20,710 --> 00:33:25,390
prototype implementation there is one

743
00:33:22,750 --> 00:33:27,220
broken authentication that can be caught

744
00:33:25,390 --> 00:33:29,919
by this annotation approach and<font color="#CCCCCC"> I'll</font>

745
00:33:27,220 --> 00:33:33,450
give you this details mudo has 14

746
00:33:29,919 --> 00:33:36,520
security patches one of them is in the

747
00:33:33,450 --> 00:33:39,340
validation and encoding space two of

748
00:33:36,520 --> 00:33:41,470
them are<font color="#CCCCCC"> C surf right and that could be</font>

749
00:33:39,340 --> 00:33:43,689
caught by code annotation and i'll give

750
00:33:41,470 --> 00:33:46,000
<font color="#E5E5E5">you these these examples in detail</font><font color="#CCCCCC"> so</font>

751
00:33:43,690 --> 00:33:49,289
hopefully you can see how this might

752
00:33:46,000 --> 00:33:54,250
work so this is that the reconstructed

753
00:33:49,289 --> 00:33:58,658
logic flow chart for for the for a use

754
00:33:54,250 --> 00:34:00,850
case in<font color="#E5E5E5"> apache</font><font color="#CCCCCC"> rolla so do</font><font color="#E5E5E5"> you have a</font>

755
00:33:58,659 --> 00:34:03,580
web entry point<font color="#E5E5E5"> and say well it are the</font>

756
00:34:00,850 --> 00:34:05,408
web headers valid<font color="#E5E5E5"> all right if it's yes</font>

757
00:34:03,580 --> 00:34:07,779
you retrieve the credentials are the

758
00:34:05,409 --> 00:34:09,700
credential valid and if it's yes you you

759
00:34:07,779 --> 00:34:12,099
let it access the database and if not

760
00:34:09,699 --> 00:34:14,918
you throw an exception but<font color="#E5E5E5"> there is also</font>

761
00:34:12,099 --> 00:34:17,080
a path where<font color="#E5E5E5"> it says if the header is no</font>

762
00:34:14,918 --> 00:34:18,940
somehow it<font color="#E5E5E5"> will go through the code and</font>

763
00:34:17,080 --> 00:34:20,529
have<font color="#E5E5E5"> access to the database I'm sure you</font>

764
00:34:18,940 --> 00:34:23,589
know things<font color="#E5E5E5"> like that happen we've seen</font>

765
00:34:20,530 --> 00:34:26,710
this in the wild<font color="#E5E5E5"> and so what we would</font>

766
00:34:23,589 --> 00:34:29,230
have done is we would have here's<font color="#E5E5E5"> the do</font>

767
00:34:26,710 --> 00:34:31,179
get method in which leads to the

768
00:34:29,230 --> 00:34:33,909
database access point and according to

769
00:34:31,179 --> 00:34:37,139
<font color="#CCCCCC">our</font><font color="#E5E5E5"> law we would ask a</font><font color="#CCCCCC"> question of line</font>

770
00:34:33,909 --> 00:34:41,830
52 because this routine this method call

771
00:34:37,139 --> 00:34:44,859
eventually accesses the<font color="#E5E5E5"> database right</font>

772
00:34:41,830 --> 00:34:46,960
and then the developer will be in<font color="#E5E5E5"> this</font>

773
00:34:44,859 --> 00:34:49,509
case and suppose them you know following

774
00:34:46,960 --> 00:34:52,300
<font color="#CCCCCC">the</font><font color="#E5E5E5"> logic there were actually two checks</font>

775
00:34:49,510 --> 00:34:55,960
for user ID and password that<font color="#CCCCCC"> says this</font>

776
00:34:52,300 --> 00:34:58,480
is my<font color="#E5E5E5"> access control logic right so they</font>

777
00:34:55,960 --> 00:35:01,839
can annotate that here in this part of

778
00:34:58,480 --> 00:35:04,030
the<font color="#E5E5E5"> code but what we</font><font color="#CCCCCC"> found was through</font>

779
00:35:01,839 --> 00:35:05,920
this analysis that there's another path

780
00:35:04,030 --> 00:35:08,710
from the entry<font color="#E5E5E5"> point to the database so</font>

781
00:35:05,920 --> 00:35:11,280
we can produce a warning as to this is a

782
00:35:08,710 --> 00:35:14,940
potential broken access control problem

783
00:35:11,280 --> 00:35:17,610
so similar idea can be applied to see

784
00:35:14,940 --> 00:35:20,100
surf protection so here's an<font color="#E5E5E5"> example of</font>

785
00:35:17,610 --> 00:35:22,440
changing an<font color="#CCCCCC"> existing users profile in</font>

786
00:35:20,100 --> 00:35:25,500
<font color="#E5E5E5">Moodle so Moodle is a very complicated</font>

787
00:35:22,440 --> 00:35:26,550
<font color="#E5E5E5">row based access control system because</font>

788
00:35:25,500 --> 00:35:29,460
you think about<font color="#E5E5E5"> course management</font>

789
00:35:26,550 --> 00:35:31,110
systems you have TAS your professors you

790
00:35:29,460 --> 00:35:33,810
have students you have system inis

791
00:35:31,110 --> 00:35:36,270
traitors if people can post grades and

792
00:35:33,810 --> 00:35:38,640
you know so it actually has to comply

793
00:35:36,270 --> 00:35:42,770
with you know FERPA and then the privacy

794
00:35:38,640 --> 00:35:45,120
regulation so this is a very complicated

795
00:35:42,770 --> 00:35:46,740
multi-row based access control model so

796
00:35:45,120 --> 00:35:49,500
one of the things you<font color="#E5E5E5"> do is have a user</font>

797
00:35:46,740 --> 00:35:52,229
profile right so this<font color="#E5E5E5"> is a classic see</font>

798
00:35:49,500 --> 00:35:54,000
surf attack against some professors use

799
00:35:52,230 --> 00:35:55,770
a profile that<font color="#E5E5E5"> say for</font><font color="#CCCCCC"> example students</font>

800
00:35:54,000 --> 00:35:57,720
wants to change the<font color="#CCCCCC"> grade so what you do</font>

801
00:35:55,770 --> 00:36:00,390
is here's your now really sort of cast

802
00:35:57,720 --> 00:36:03,270
this in from PHP to<font color="#CCCCCC"> java turns because</font>

803
00:36:00,390 --> 00:36:04,650
<font color="#E5E5E5">we don't have this written in PHP so so</font>

804
00:36:03,270 --> 00:36:07,110
we sort of<font color="#E5E5E5"> say well what we would have</font>

805
00:36:04,650 --> 00:36:11,100
done<font color="#E5E5E5"> if we had this in</font><font color="#CCCCCC"> Java so this is</font>

806
00:36:07,110 --> 00:36:14,580
<font color="#CCCCCC">your you</font><font color="#E5E5E5"> are your your PHP file and then</font>

807
00:36:11,100 --> 00:36:16,950
later<font color="#CCCCCC"> on you</font><font color="#E5E5E5"> know this highlighted line</font>

808
00:36:14,580 --> 00:36:19,590
is eventually wind up the<font color="#E5E5E5"> collar routine</font>

809
00:36:16,950 --> 00:36:22,169
that accesses the database<font color="#CCCCCC"> all right so</font>

810
00:36:19,590 --> 00:36:27,510
we define the set of<font color="#E5E5E5"> databases and then</font>

811
00:36:22,170 --> 00:36:29,640
changes to the the user profile so the

812
00:36:27,510 --> 00:36:32,340
<font color="#E5E5E5">the heuristic we would apply a simple</font>

813
00:36:29,640 --> 00:36:35,190
rule we would apply to deal with sea

814
00:36:32,340 --> 00:36:38,160
surface whenever a web form submission

815
00:36:35,190 --> 00:36:41,790
contains an operation to update some

816
00:36:38,160 --> 00:36:44,310
database some state of the server then

817
00:36:41,790 --> 00:36:47,190
we would ask for annotation or see

818
00:36:44,310 --> 00:36:49,320
self-protection logic just a reminder it

819
00:36:47,190 --> 00:36:51,510
looks like<font color="#E5E5E5"> this Webster this web form is</font>

820
00:36:49,320 --> 00:36:53,190
is doing something<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the state where is</font>

821
00:36:51,510 --> 00:36:55,140
your C surf protection logic and the

822
00:36:53,190 --> 00:36:56,430
programmer is going to have to you know

823
00:36:55,140 --> 00:36:58,549
do something<font color="#E5E5E5"> in this case you</font><font color="#CCCCCC"> know</font>

824
00:36:56,430 --> 00:37:02,120
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> will ask this question line</font>

825
00:36:58,550 --> 00:37:08,330
3072 and then we'll<font color="#E5E5E5"> pop this question</font>

826
00:37:02,120 --> 00:37:08,330
now it

827
00:37:08,670 --> 00:37:13,720
okay there is a somehow a<font color="#CCCCCC"> slight missing</font>

828
00:37:11,950 --> 00:37:15,700
you but well<font color="#E5E5E5"> I'll just talk through its</font>

829
00:37:13,720 --> 00:37:18,970
what happens is in the in the case of

830
00:37:15,700 --> 00:37:20,859
Moodle developers they obviously knew

831
00:37:18,970 --> 00:37:24,220
see Sir protection really really well

832
00:37:20,860 --> 00:37:26,650
they have designed special routines and

833
00:37:24,220 --> 00:37:28,089
patterns to prevent see surf<font color="#CCCCCC"> alright so</font>

834
00:37:26,650 --> 00:37:31,480
this is a very mature open source

835
00:37:28,090 --> 00:37:34,360
project but even<font color="#E5E5E5"> that two cases in two</font>

836
00:37:31,480 --> 00:37:36,400
cases that developers forgot to add the

837
00:37:34,360 --> 00:37:37,870
sea sir protection routines in so later

838
00:37:36,400 --> 00:37:40,060
are they would have<font color="#CCCCCC"> to issue security</font>

839
00:37:37,870 --> 00:37:42,279
patches to patch them up so we found

840
00:37:40,060 --> 00:37:45,549
those out so these are real cases so if

841
00:37:42,280 --> 00:37:47,380
<font color="#CCCCCC">we had</font><font color="#E5E5E5"> our theory is if we had asked</font>

842
00:37:45,550 --> 00:37:49,300
that question to the developer at<font color="#E5E5E5"> that</font>

843
00:37:47,380 --> 00:37:51,460
point<font color="#CCCCCC"> where as your si sirve protection</font>

844
00:37:49,300 --> 00:37:53,470
logic the developer said<font color="#E5E5E5"> oh you know I</font>

845
00:37:51,460 --> 00:37:55,150
<font color="#E5E5E5">forgot so you know here's what I put</font>

846
00:37:53,470 --> 00:37:57,850
eight so that goes back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our theory is</font>

847
00:37:55,150 --> 00:38:00,700
where we're trying<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> these warning</font>

848
00:37:57,850 --> 00:38:03,279
to as a way to help<font color="#CCCCCC"> people to avoid</font>

849
00:38:00,700 --> 00:38:07,240
obvious mistakes so here's another one

850
00:38:03,280 --> 00:38:08,860
delete a post and the same kind<font color="#CCCCCC"> of a</font>

851
00:38:07,240 --> 00:38:11,290
<font color="#CCCCCC">problem that there was no see self</font>

852
00:38:08,860 --> 00:38:13,300
protection at all and this is what<font color="#E5E5E5"> we</font>

853
00:38:11,290 --> 00:38:15,220
call triangulation this is an another

854
00:38:13,300 --> 00:38:18,840
open source project<font color="#E5E5E5"> this was a first</font>

855
00:38:15,220 --> 00:38:23,109
reported in<font color="#E5E5E5"> in a security conference</font>

856
00:38:18,840 --> 00:38:25,030
last year that what this interestingly

857
00:38:23,110 --> 00:38:26,680
what this<font color="#E5E5E5"> paper was trying to do this</font>

858
00:38:25,030 --> 00:38:31,030
research was trying to do is they're

859
00:38:26,680 --> 00:38:34,120
trying<font color="#CCCCCC"> to take a source code</font><font color="#E5E5E5"> of our web</font>

860
00:38:31,030 --> 00:38:37,360
application and perform dynamic analysis

861
00:38:34,120 --> 00:38:39,310
to find out bucks<font color="#E5E5E5"> all right and so what</font>

862
00:38:37,360 --> 00:38:42,220
you<font color="#E5E5E5"> need to do</font><font color="#CCCCCC"> is you need to give it</font>

863
00:38:39,310 --> 00:38:44,850
sort of normal use cases and it will

864
00:38:42,220 --> 00:38:47,620
find security invariance it will

865
00:38:44,850 --> 00:38:49,480
hypothesize security invariants and see

866
00:38:47,620 --> 00:38:52,720
whether i do and i think professor

867
00:38:49,480 --> 00:38:55,240
giovanni<font color="#CCCCCC"> vigna from UC santa barbara is</font>

868
00:38:52,720 --> 00:38:57,009
the team that's<font color="#E5E5E5"> doing that I think he</font>

869
00:38:55,240 --> 00:38:59,890
<font color="#E5E5E5">has a company is trying to build this</font>

870
00:38:57,010 --> 00:39:01,840
tool as well so so so so I think<font color="#E5E5E5"> this is</font>

871
00:38:59,890 --> 00:39:03,819
<font color="#E5E5E5">being I don't know exactly what the</font>

872
00:39:01,840 --> 00:39:06,220
status of it right but I know he was at

873
00:39:03,820 --> 00:39:08,440
the<font color="#E5E5E5"> last year's apps at USA so he was</font>

874
00:39:06,220 --> 00:39:11,319
talking about<font color="#E5E5E5"> this</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so this is a</font>

875
00:39:08,440 --> 00:39:14,110
case that he he pointed<font color="#E5E5E5"> out as using</font>

876
00:39:11,320 --> 00:39:17,710
dynamic analysis by comparing two

877
00:39:14,110 --> 00:39:19,160
different transactions and find out that

878
00:39:17,710 --> 00:39:21,530
you know in one trans

879
00:39:19,160 --> 00:39:23,420
<font color="#E5E5E5">here you have two invariants another</font>

880
00:39:21,530 --> 00:39:25,730
transaction you have one and then you

881
00:39:23,420 --> 00:39:28,370
can point out as a potential broken

882
00:39:25,730 --> 00:39:30,740
access control problem<font color="#E5E5E5"> all right as a</font>

883
00:39:28,370 --> 00:39:33,350
power of dynamic analysis what we're

884
00:39:30,740 --> 00:39:36,229
<font color="#E5E5E5">seeing is we could have done the same</font>

885
00:39:33,350 --> 00:39:38,450
thing at<font color="#CCCCCC"> least in this case with static</font>

886
00:39:36,230 --> 00:39:40,550
analysis but with a little bit of help

887
00:39:38,450 --> 00:39:42,859
<font color="#CCCCCC">from the user so that's very</font><font color="#E5E5E5"> interesting</font>

888
00:39:40,550 --> 00:39:45,800
so if the programmer if indeed the

889
00:39:42,860 --> 00:39:47,420
overhead of of annotation is fairly

890
00:39:45,800 --> 00:39:49,430
light and the users don't the

891
00:39:47,420 --> 00:39:52,760
programmers don't mind doing that they

892
00:39:49,430 --> 00:39:54,649
can provide<font color="#E5E5E5"> some input to us to the to</font>

893
00:39:52,760 --> 00:39:56,270
the<font color="#E5E5E5"> development process where we can</font>

894
00:39:54,650 --> 00:39:58,370
actually find out these things<font color="#E5E5E5"> without</font>

895
00:39:56,270 --> 00:39:59,990
having to do dynamic analysis we<font color="#CCCCCC"> can do</font>

896
00:39:58,370 --> 00:40:01,220
static analysis<font color="#E5E5E5"> which is you know I</font>

897
00:39:59,990 --> 00:40:03,649
thought it<font color="#E5E5E5"> was from a research</font>

898
00:40:01,220 --> 00:40:06,109
perspective extremely interesting so I

899
00:40:03,650 --> 00:40:10,400
throw this thing in there and we did

900
00:40:06,110 --> 00:40:13,250
sort of<font color="#E5E5E5"> a very quick analysis of sins</font>

901
00:40:10,400 --> 00:40:14,450
<font color="#CCCCCC">top-25 dangerous programming errors and</font>

902
00:40:13,250 --> 00:40:16,370
we say okay we've got<font color="#E5E5E5"> these two</font>

903
00:40:14,450 --> 00:40:19,370
approaches interactive code refactoring

904
00:40:16,370 --> 00:40:21,080
and interactive annotation what sort of

905
00:40:19,370 --> 00:40:23,359
things that we might<font color="#CCCCCC"> be able to help and</font>

906
00:40:21,080 --> 00:40:25,160
so we<font color="#CCCCCC"> identified</font><font color="#E5E5E5"> things that you know</font>

907
00:40:23,360 --> 00:40:27,740
<font color="#E5E5E5">this might have some impact I me doesn't</font>

908
00:40:25,160 --> 00:40:30,140
solve all problems in all cases but<font color="#CCCCCC"> at</font>

909
00:40:27,740 --> 00:40:34,279
least in some aspect that one of these

910
00:40:30,140 --> 00:40:36,410
approaches could have helped so let me

911
00:40:34,280 --> 00:40:38,630
<font color="#E5E5E5">just sort of quickly summarize what we</font>

912
00:40:36,410 --> 00:40:40,640
see as the benefits for for this

913
00:40:38,630 --> 00:40:42,050
approach and I want to talk about it at

914
00:40:40,640 --> 00:40:46,370
three different<font color="#E5E5E5"> levels there's the</font>

915
00:40:42,050 --> 00:40:48,170
students because<font color="#E5E5E5"> you know we as we said</font>

916
00:40:46,370 --> 00:40:50,180
at the<font color="#CCCCCC"> very beginning education is very</font>

917
00:40:48,170 --> 00:40:51,140
important most universities don't train

918
00:40:50,180 --> 00:40:53,089
people you know if<font color="#CCCCCC"> it's secure</font>

919
00:40:51,140 --> 00:40:55,310
programming so being<font color="#E5E5E5"> in an academic</font>

920
00:40:53,090 --> 00:40:57,050
institution we care about training the

921
00:40:55,310 --> 00:40:58,880
next generation of programmers so we

922
00:40:57,050 --> 00:41:01,280
want to<font color="#CCCCCC"> look at students want</font><font color="#E5E5E5"> to look at</font>

923
00:40:58,880 --> 00:41:03,290
<font color="#E5E5E5">professional developers and we also want</font>

924
00:41:01,280 --> 00:41:05,540
to<font color="#E5E5E5"> think a little too a little bit in</font>

925
00:41:03,290 --> 00:41:08,300
terms of the enterprise perspective so

926
00:41:05,540 --> 00:41:11,000
for students what we have found<font color="#E5E5E5"> is code</font>

927
00:41:08,300 --> 00:41:13,340
refactoring code annotation really helps

928
00:41:11,000 --> 00:41:14,930
to<font color="#CCCCCC"> shape awareness if you say you know</font>

929
00:41:13,340 --> 00:41:16,910
like in our universes and many

930
00:41:14,930 --> 00:41:19,640
<font color="#E5E5E5">universities people teach Java and then</font>

931
00:41:16,910 --> 00:41:22,100
use<font color="#CCCCCC"> Eclipse as the IDE if we put aside</font>

932
00:41:19,640 --> 00:41:24,759
<font color="#E5E5E5">in there and then students go through</font>

933
00:41:22,100 --> 00:41:26,230
<font color="#CCCCCC">for years and they they see these state</font>

934
00:41:24,760 --> 00:41:28,330
so at least they get input validation

935
00:41:26,230 --> 00:41:30,190
output encoding right right i mean among

936
00:41:28,330 --> 00:41:31,720
other things<font color="#CCCCCC"> okay so we think</font><font color="#E5E5E5"> this is</font>

937
00:41:30,190 --> 00:41:34,690
going to<font color="#E5E5E5"> make a difference the other</font>

938
00:41:31,720 --> 00:41:38,049
thing<font color="#CCCCCC"> is professors generally are very</font>

939
00:41:34,690 --> 00:41:39,700
busy<font color="#CCCCCC"> and they don't grade on</font><font color="#E5E5E5"> code really</font>

940
00:41:38,050 --> 00:41:41,710
for most part<font color="#CCCCCC"> i mean i'm some of your</font>

941
00:41:39,700 --> 00:41:43,029
teaching part-time<font color="#E5E5E5"> i'm sure or even</font>

942
00:41:41,710 --> 00:41:45,310
<font color="#CCCCCC">full-time</font><font color="#E5E5E5"> that you know</font><font color="#CCCCCC"> we'd</font><font color="#E5E5E5"> always</font>

943
00:41:43,030 --> 00:41:47,110
greater the code we just test if the

944
00:41:45,310 --> 00:41:48,700
<font color="#E5E5E5">code works and if it works okay that's</font>

945
00:41:47,110 --> 00:41:50,980
fine<font color="#CCCCCC"> why do we do some functional</font>

946
00:41:48,700 --> 00:41:53,319
testing a leather little secure

947
00:41:50,980 --> 00:41:55,170
programming so but but with this these

948
00:41:53,320 --> 00:41:57,490
approaches we can actually<font color="#E5E5E5"> sing go out</font>

949
00:41:55,170 --> 00:41:59,530
generate a report for faculty and say

950
00:41:57,490 --> 00:42:01,330
hey you know this student is the student

951
00:41:59,530 --> 00:42:03,700
paying attention to security right so

952
00:42:01,330 --> 00:42:06,460
there's some indication that we can

953
00:42:03,700 --> 00:42:08,589
train students better for professional

954
00:42:06,460 --> 00:42:10,330
developers again the premises is a

955
00:42:08,590 --> 00:42:12,130
reminder of security programming

956
00:42:10,330 --> 00:42:14,470
practices in the<font color="#E5E5E5"> case of code</font>

957
00:42:12,130 --> 00:42:16,120
refactoring it can sort of do<font color="#CCCCCC"> some of</font>

958
00:42:14,470 --> 00:42:18,459
the grunt work for use or say less you

959
00:42:16,120 --> 00:42:20,470
want to do he sappy and using anti<font color="#E5E5E5"> semi</font>

960
00:42:18,460 --> 00:42:23,230
and it's<font color="#E5E5E5"> pretty complicated at the</font>

961
00:42:20,470 --> 00:42:25,569
reader documentation etc etc but with a

962
00:42:23,230 --> 00:42:27,070
side and tie semi is right there<font color="#E5E5E5"> because</font>

963
00:42:25,570 --> 00:42:30,730
it's part<font color="#E5E5E5"> of this app you just click on</font>

964
00:42:27,070 --> 00:42:34,480
it it's there<font color="#E5E5E5"> right so it reduces the</font>

965
00:42:30,730 --> 00:42:36,130
workload of doing the right thing for

966
00:42:34,480 --> 00:42:39,490
code annotation we think that the

967
00:42:36,130 --> 00:42:41,620
hypothesis is you know these are that

968
00:42:39,490 --> 00:42:43,299
advanced analysis can be very helpful<font color="#E5E5E5"> in</font>

969
00:42:41,620 --> 00:42:46,600
terms of detecting some more subtle

970
00:42:43,300 --> 00:42:49,900
errors we think the enterprise also

971
00:42:46,600 --> 00:42:53,170
benefits for example you<font color="#E5E5E5"> can push out</font>

972
00:42:49,900 --> 00:42:55,210
the standard libraries right as Jing has

973
00:42:53,170 --> 00:42:57,310
showed you that our rules are can be

974
00:42:55,210 --> 00:42:59,380
<font color="#E5E5E5">extended so</font><font color="#CCCCCC"> you can write your own</font><font color="#E5E5E5"> rule</font>

975
00:42:57,310 --> 00:43:01,660
sets you<font color="#CCCCCC"> can write your own libraries</font>

976
00:42:59,380 --> 00:43:03,910
and install them in a<font color="#E5E5E5"> plug-in so they</font>

977
00:43:01,660 --> 00:43:06,069
want to<font color="#E5E5E5"> make sure that everybody who</font>

978
00:43:03,910 --> 00:43:08,410
touches code will do the<font color="#CCCCCC"> same thing</font>

979
00:43:06,070 --> 00:43:09,730
right and you can collect statistics you

980
00:43:08,410 --> 00:43:11,560
know whether people are complying with

981
00:43:09,730 --> 00:43:13,270
it and maybe there's good reason for not

982
00:43:11,560 --> 00:43:15,450
<font color="#E5E5E5">doing certain things but if there are</font>

983
00:43:13,270 --> 00:43:18,970
<font color="#CCCCCC">then you want</font><font color="#E5E5E5"> to find out what these are</font>

984
00:43:15,450 --> 00:43:21,339
also the code annotation in<font color="#E5E5E5"> addition to</font>

985
00:43:18,970 --> 00:43:24,160
helping you<font color="#E5E5E5"> with collecting and</font><font color="#CCCCCC"> all sdlc</font>

986
00:43:21,340 --> 00:43:25,630
statistics is can aid in code with you

987
00:43:24,160 --> 00:43:28,029
so today you know you your code

988
00:43:25,630 --> 00:43:29,560
reviewers to typically use your fortify

989
00:43:28,030 --> 00:43:32,160
or something you run this four against

990
00:43:29,560 --> 00:43:33,599
four or five and but you really don't

991
00:43:32,160 --> 00:43:35,368
have the application contact so for

992
00:43:33,599 --> 00:43:37,920
example you're accessing a database

993
00:43:35,369 --> 00:43:40,530
where is the access<font color="#E5E5E5"> control logic where</font>

994
00:43:37,920 --> 00:43:41,970
is the<font color="#E5E5E5"> sea surf protection you have to</font>

995
00:43:40,530 --> 00:43:43,470
read the code to find out that<font color="#E5E5E5"> mean</font>

996
00:43:41,970 --> 00:43:45,450
unless you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> the dilemma developer</font>

997
00:43:43,470 --> 00:43:47,759
sitting right next to you and if he or

998
00:43:45,450 --> 00:43:50,279
she remembers you know one month

999
00:43:47,760 --> 00:43:52,049
afterwards that what he or she did with

1000
00:43:50,280 --> 00:43:54,569
the code it's very difficult to do

1001
00:43:52,049 --> 00:43:56,640
whereas with the annotation if you can

1002
00:43:54,569 --> 00:43:58,380
open<font color="#CCCCCC"> up the</font><font color="#E5E5E5"> file and retrieve say oh</font>

1003
00:43:56,640 --> 00:44:00,150
<font color="#CCCCCC">okay here it is so at least you have</font>

1004
00:43:58,380 --> 00:44:02,339
some some some way of doing more

1005
00:44:00,150 --> 00:44:05,609
in-depth analysis for some really

1006
00:44:02,339 --> 00:44:08,220
critical pieces of code so<font color="#CCCCCC"> we actually</font>

1007
00:44:05,609 --> 00:44:11,098
<font color="#E5E5E5">did some user studies right this is all</font>

1008
00:44:08,220 --> 00:44:13,379
you know<font color="#E5E5E5"> okay what real people think</font>

1009
00:44:11,099 --> 00:44:15,299
<font color="#E5E5E5">about</font><font color="#CCCCCC"> it so we did a user setting on 15</font>

1010
00:44:13,380 --> 00:44:17,339
graduate students and<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> professional</font>

1011
00:44:15,299 --> 00:44:20,788
programmers I only really have time to

1012
00:44:17,339 --> 00:44:23,819
<font color="#E5E5E5">go into the details but but but overall</font>

1013
00:44:20,789 --> 00:44:27,020
<font color="#E5E5E5">people generally notice the way the</font>

1014
00:44:23,819 --> 00:44:29,339
warnings they like<font color="#E5E5E5"> this approach but</font>

1015
00:44:27,020 --> 00:44:32,280
professional it works really well with

1016
00:44:29,339 --> 00:44:35,430
students the developers are more

1017
00:44:32,280 --> 00:44:38,069
skeptical they they sort of have this

1018
00:44:35,430 --> 00:44:40,500
sort of branding their<font color="#CCCCCC"> genes they want</font>

1019
00:44:38,069 --> 00:44:43,440
to get the functionality first so they

1020
00:44:40,500 --> 00:44:46,230
don't always<font color="#E5E5E5"> pay as much much attention</font>

1021
00:44:43,440 --> 00:44:48,000
to it and so there's two it's a little

1022
00:44:46,230 --> 00:44:49,589
bit more subtle with developers but

1023
00:44:48,000 --> 00:44:51,270
overall is very positive<font color="#CCCCCC"> and then</font>

1024
00:44:49,589 --> 00:44:54,089
obviously you know this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> prototype</font>

1025
00:44:51,270 --> 00:44:56,520
design we need to improve that so when

1026
00:44:54,089 --> 00:44:59,190
we talk about<font color="#CCCCCC"> this more in the paper so</font>

1027
00:44:56,520 --> 00:45:01,619
in love conclusion does<font color="#E5E5E5"> I have about</font>

1028
00:44:59,190 --> 00:45:03,690
three<font color="#E5E5E5"> minutes that are so</font><font color="#CCCCCC"> we've</font>

1029
00:45:01,619 --> 00:45:06,089
introduced two mechanisms interactive

1030
00:45:03,690 --> 00:45:08,069
code refactoring and annotation and we

1031
00:45:06,089 --> 00:45:10,619
<font color="#CCCCCC">think it can be effective addition to</font>

1032
00:45:08,069 --> 00:45:12,839
the best practice sdlc preventing some

1033
00:45:10,619 --> 00:45:15,450
vulnerable<font color="#E5E5E5"> of your basic vulnerable code</font>

1034
00:45:12,839 --> 00:45:18,240
from being written and and also improve

1035
00:45:15,450 --> 00:45:19,799
the efficiency of static<font color="#E5E5E5"> analysis what</font>

1036
00:45:18,240 --> 00:45:24,029
we're doing<font color="#E5E5E5"> right now one of the thread</font>

1037
00:45:19,799 --> 00:45:25,349
of<font color="#CCCCCC"> the one fork of this project is we</font>

1038
00:45:24,029 --> 00:45:28,829
got a grant from the National Science

1039
00:45:25,349 --> 00:45:31,049
Foundation just to sort of use of side

1040
00:45:28,829 --> 00:45:33,240
in university curriculum particularly

1041
00:45:31,049 --> 00:45:34,829
introduction to programming classes so

1042
00:45:33,240 --> 00:45:36,779
we're doing<font color="#CCCCCC"> that and then we will</font>

1043
00:45:34,829 --> 00:45:40,020
hopefully have some results to report

1044
00:45:36,779 --> 00:45:42,000
next year and obviously<font color="#CCCCCC"> you know</font>

1045
00:45:40,020 --> 00:45:44,049
<font color="#E5E5E5">improvements are needed to</font><font color="#CCCCCC"> make and what</font>

1046
00:45:42,000 --> 00:45:46,900
useful for developers

1047
00:45:44,049 --> 00:45:48,670
the future work UI design we<font color="#CCCCCC"> have to</font>

1048
00:45:46,900 --> 00:45:51,130
look<font color="#E5E5E5"> at support frameworks I think we</font>

1049
00:45:48,670 --> 00:45:52,809
<font color="#E5E5E5">have most under work already there but</font>

1050
00:45:51,130 --> 00:45:54,249
but but we have to think<font color="#E5E5E5"> about some</font>

1051
00:45:52,809 --> 00:45:57,160
there's some<font color="#E5E5E5"> corner cases we still have</font>

1052
00:45:54,249 --> 00:45:58,868
to cover makes a you know megasite

1053
00:45:57,160 --> 00:46:02,308
appeal to professional developers that's

1054
00:45:58,869 --> 00:46:06,759
why we're here talking to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> all and</font>

1055
00:46:02,309 --> 00:46:09,429
get your input and and thank you<font color="#CCCCCC"> very</font>

1056
00:46:06,759 --> 00:46:10,989
much that I want<font color="#CCCCCC"> to acknowledge the</font>

1057
00:46:09,429 --> 00:46:13,359
national science foundation for giving

1058
00:46:10,989 --> 00:46:15,670
us the funding<font color="#CCCCCC"> to do this work I want to</font>

1059
00:46:13,359 --> 00:46:17,859
thank for 25 for giving us an education

1060
00:46:15,670 --> 00:46:20,619
license so that we can do the analysis

1061
00:46:17,859 --> 00:46:22,719
and benchmark and your input above water

1062
00:46:20,619 --> 00:46:24,819
it's just like a minute or<font color="#CCCCCC"> so we can ask</font>

1063
00:46:22,719 --> 00:46:27,069
take a couple<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> and here's the</font>

1064
00:46:24,819 --> 00:46:30,869
link all the papers are available and

1065
00:46:27,069 --> 00:46:30,869
you can take a look at<font color="#CCCCCC"> that</font>

