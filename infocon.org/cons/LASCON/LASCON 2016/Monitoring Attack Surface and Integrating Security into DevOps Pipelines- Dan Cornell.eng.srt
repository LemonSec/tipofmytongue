1
00:00:02,990 --> 00:00:25,400
[Music]

2
00:00:18,400 --> 00:00:27,259
how do you everybody<font color="#E5E5E5"> hey hello so</font><font color="#CCCCCC"> today</font>

3
00:00:25,400 --> 00:00:29,509
what I<font color="#E5E5E5"> want to do is talk about some</font>

4
00:00:27,260 --> 00:00:31,910
work that we've been doing looking at

5
00:00:29,510 --> 00:00:34,460
calculating application attack surface

6
00:00:31,910 --> 00:00:36,500
and some additional<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> we've</font>

7
00:00:34,460 --> 00:00:39,470
been<font color="#E5E5E5"> doing looking at how you can use</font>

8
00:00:36,500 --> 00:00:41,870
these calculations as you look to and

9
00:00:39,470 --> 00:00:46,730
start to include security<font color="#E5E5E5"> testing in</font>

10
00:00:41,870 --> 00:00:48,980
your DevOps pipelines just agenda

11
00:00:46,730 --> 00:00:50,629
provide a<font color="#E5E5E5"> little bit of background talk</font>

12
00:00:48,980 --> 00:00:51,709
about the importance of attack surface

13
00:00:50,630 --> 00:00:55,160
why is this something that is

14
00:00:51,710 --> 00:00:57,079
interesting we'll look at<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know what</font>

15
00:00:55,160 --> 00:00:59,390
<font color="#CCCCCC">attacks surface calculations how we've</font>

16
00:00:57,079 --> 00:01:01,940
how we've used<font color="#E5E5E5"> that to benefit with dev</font>

17
00:00:59,390 --> 00:01:03,860
ops and really that's looking at you

18
00:01:01,940 --> 00:01:06,320
know it's come<font color="#CCCCCC"> out of some realities</font>

19
00:01:03,860 --> 00:01:08,240
that you have to face when you start to

20
00:01:06,320 --> 00:01:10,820
look at integrating security tools into

21
00:01:08,240 --> 00:01:13,280
<font color="#E5E5E5">DevOps pipelines we'll talk about the</font>

22
00:01:10,820 --> 00:01:16,100
underlying technology hybrid analysis

23
00:01:13,280 --> 00:01:17,330
mapping technology we developed funded

24
00:01:16,100 --> 00:01:21,110
by the US Department of Homeland

25
00:01:17,330 --> 00:01:22,250
Security<font color="#E5E5E5"> talk about a couple use cases</font>

26
00:01:21,110 --> 00:01:23,420
some things<font color="#E5E5E5"> that we're doing with this</font>

27
00:01:22,250 --> 00:01:25,310
right now<font color="#CCCCCC"> and some things that we're</font>

28
00:01:23,420 --> 00:01:26,479
looking<font color="#E5E5E5"> at doing and we'll have some</font>

29
00:01:25,310 --> 00:01:28,160
time for questions at the end if you

30
00:01:26,479 --> 00:01:30,110
<font color="#E5E5E5">have questions along the way please feel</font>

31
00:01:28,160 --> 00:01:30,979
free to you may need to wave your hand a

32
00:01:30,110 --> 00:01:32,869
little<font color="#E5E5E5"> bit cuz they've got some lights</font>

33
00:01:30,979 --> 00:01:35,509
shining at me but<font color="#E5E5E5"> happy to answer any</font>

34
00:01:32,869 --> 00:01:38,690
<font color="#CCCCCC">questions along</font><font color="#E5E5E5"> the way my background</font>

35
00:01:35,509 --> 00:01:40,069
just to set some context again founder

36
00:01:38,690 --> 00:01:42,229
CTO<font color="#CCCCCC"> Dennett rebound on a software</font>

37
00:01:40,069 --> 00:01:45,140
developer by<font color="#CCCCCC"> background with a lot of</font>

38
00:01:42,229 --> 00:01:46,789
java stuff in the mid to late 90s dotnet

39
00:01:45,140 --> 00:01:48,410
stuff in early 2000s<font color="#E5E5E5"> but really what</font>

40
00:01:46,789 --> 00:01:50,330
<font color="#CCCCCC">I've spent the majority of the</font><font color="#E5E5E5"> last 15</font>

41
00:01:48,410 --> 00:01:54,289
<font color="#CCCCCC">years doing is working with</font>

42
00:01:50,330 --> 00:01:56,420
organizations to help show them how the

43
00:01:54,289 --> 00:01:58,670
code that<font color="#E5E5E5"> they are developing in a code</font>

44
00:01:56,420 --> 00:02:00,200
that they are deploying impacts the

45
00:01:58,670 --> 00:02:01,729
security of those organizations so I'm a

46
00:02:00,200 --> 00:02:04,069
developer that<font color="#E5E5E5"> has come into the world</font>

47
00:02:01,729 --> 00:02:06,259
of security as opposed to being someone

48
00:02:04,069 --> 00:02:08,179
with a pen testing or like a network pen

49
00:02:06,259 --> 00:02:09,530
testing background that<font color="#E5E5E5"> has come and is</font>

50
00:02:08,179 --> 00:02:11,660
now looking<font color="#E5E5E5"> at web and mobile apps it's</font>

51
00:02:09,530 --> 00:02:13,940
that kind of colors the view<font color="#E5E5E5"> I have on</font>

52
00:02:11,660 --> 00:02:15,470
these<font color="#E5E5E5"> things and I helped along with</font>

53
00:02:13,940 --> 00:02:16,910
some other folks run the<font color="#CCCCCC"> wasp San</font>

54
00:02:15,470 --> 00:02:20,500
<font color="#CCCCCC">Antonio chapter and have been doing</font><font color="#E5E5E5"> some</font>

55
00:02:16,910 --> 00:02:22,579
work<font color="#CCCCCC"> with the open Sam benchmarking is</font>

56
00:02:20,500 --> 00:02:24,620
everybody here who is ever to hear

57
00:02:22,580 --> 00:02:26,390
familiar with<font color="#E5E5E5"> Oh awesome zap am I</font><font color="#CCCCCC"> not</font>

58
00:02:24,620 --> 00:02:28,069
familiar with zap if you're not yet

59
00:02:26,390 --> 00:02:30,230
familiar with<font color="#E5E5E5"> snap you should download</font>

60
00:02:28,069 --> 00:02:33,200
the slides and click<font color="#E5E5E5"> on this link</font>

61
00:02:30,230 --> 00:02:35,420
some of the examples<font color="#CCCCCC"> would use we use</font><font color="#E5E5E5"> OS</font>

62
00:02:33,200 --> 00:02:38,869
<font color="#E5E5E5">fo us as zap is a freely available</font>

63
00:02:35,420 --> 00:02:41,329
dynamic scanning tool and maintained<font color="#CCCCCC"> by</font>

64
00:02:38,870 --> 00:02:43,159
a Simon Bennett and<font color="#E5E5E5"> a worldwide group of</font>

65
00:02:41,330 --> 00:02:45,849
volunteers it's a fantastic open<font color="#E5E5E5"> source</font>

66
00:02:43,159 --> 00:02:48,319
project<font color="#E5E5E5"> really great community and a</font>

67
00:02:45,849 --> 00:02:49,429
great tool that you can see kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

68
00:02:48,319 --> 00:02:51,260
things we're<font color="#CCCCCC"> talking about as well as</font>

69
00:02:49,430 --> 00:02:53,750
other examples of people starting to use

70
00:02:51,260 --> 00:02:56,060
<font color="#CCCCCC">o haces app as part of their see</font><font color="#E5E5E5"> icd</font>

71
00:02:53,750 --> 00:02:58,280
pipeline we've also got some example

72
00:02:56,060 --> 00:03:01,970
code bases to<font color="#E5E5E5"> you can try the stuff that</font>

73
00:02:58,280 --> 00:03:04,269
we are going<font color="#E5E5E5"> to be talking</font><font color="#CCCCCC"> about here so</font>

74
00:03:01,970 --> 00:03:07,970
those links<font color="#E5E5E5"> are available as well and</font>

75
00:03:04,269 --> 00:03:10,640
like all of the code that<font color="#E5E5E5"> runs this is</font>

76
00:03:07,970 --> 00:03:12,650
available you can pull down from the

77
00:03:10,640 --> 00:03:16,040
community edition to thread fix up on

78
00:03:12,650 --> 00:03:18,079
github and we've also got some downloads

79
00:03:16,040 --> 00:03:20,328
here if you want to<font color="#E5E5E5"> just get prepackaged</font>

80
00:03:18,079 --> 00:03:22,660
stuff and not have to build things up so

81
00:03:20,329 --> 00:03:25,190
that's really<font color="#E5E5E5"> kind of housekeeping for</font>

82
00:03:22,660 --> 00:03:26,329
you know once<font color="#E5E5E5"> you know if you download</font>

83
00:03:25,190 --> 00:03:27,730
the slides and one and you have

84
00:03:26,329 --> 00:03:33,680
questions or want to<font color="#E5E5E5"> try this stuff out</font>

85
00:03:27,730 --> 00:03:35,388
so there<font color="#E5E5E5"> you go so attack surface is</font>

86
00:03:33,680 --> 00:03:36,319
kind of the fundamental the building

87
00:03:35,389 --> 00:03:38,930
block thing that we're talking about

88
00:03:36,319 --> 00:03:41,839
here and that's something I think<font color="#E5E5E5"> it's</font>

89
00:03:38,930 --> 00:03:44,090
<font color="#E5E5E5">really important for security in general</font>

90
00:03:41,840 --> 00:03:46,700
you<font color="#E5E5E5"> need to know what you're trying to</font>

91
00:03:44,090 --> 00:03:47,959
defend if if you don't know the extent

92
00:03:46,700 --> 00:03:49,819
of the things you're trying to defend

93
00:03:47,959 --> 00:03:51,950
you're probably not going to be terribly

94
00:03:49,819 --> 00:03:54,798
successful in defending them just in

95
00:03:51,950 --> 00:03:56,540
<font color="#CCCCCC">general and that's a big problem in you</font>

96
00:03:54,799 --> 00:03:58,970
<font color="#CCCCCC">know even</font><font color="#E5E5E5"> small organizations certainly</font>

97
00:03:56,540 --> 00:04:00,798
organizations large enterprises if you

98
00:03:58,970 --> 00:04:02,030
<font color="#E5E5E5">just think not even thinking from an</font>

99
00:04:00,799 --> 00:04:03,950
application standpoint<font color="#CCCCCC"> just their</font>

100
00:04:02,030 --> 00:04:05,150
exposure that they have you know

101
00:04:03,950 --> 00:04:07,880
<font color="#E5E5E5">different networks different data</font>

102
00:04:05,150 --> 00:04:11,030
centers you know various cloud services

103
00:04:07,880 --> 00:04:12,980
and things like that in a non-trivial

104
00:04:11,030 --> 00:04:14,750
organization it can be really

105
00:04:12,980 --> 00:04:17,358
<font color="#CCCCCC">challenging to have an understanding of</font>

106
00:04:14,750 --> 00:04:19,039
attack surface and again if you don't

107
00:04:17,358 --> 00:04:20,388
<font color="#E5E5E5">know what your</font><font color="#CCCCCC"> TAC surface is you're</font>

108
00:04:19,039 --> 00:04:22,880
going<font color="#E5E5E5"> to have a lot of trouble defending</font>

109
00:04:20,389 --> 00:04:25,870
it when we talk or when I talk about

110
00:04:22,880 --> 00:04:28,159
attack surface in<font color="#CCCCCC"> the context of</font>

111
00:04:25,870 --> 00:04:30,229
applications specifically web

112
00:04:28,160 --> 00:04:32,479
applications what I'm talking about is

113
00:04:30,229 --> 00:04:34,400
where can attach your work in an

114
00:04:32,479 --> 00:04:35,810
attacker reach out and touch your

115
00:04:34,400 --> 00:04:38,299
application and from a practical

116
00:04:35,810 --> 00:04:40,580
standpoint this really means what are

117
00:04:38,300 --> 00:04:42,979
the set of<font color="#E5E5E5"> HTTP requests that can be</font>

118
00:04:40,580 --> 00:04:44,000
made against your application where your

119
00:04:42,979 --> 00:04:45,919
application is<font color="#CCCCCC"> going to do</font>

120
00:04:44,000 --> 00:04:48,170
do some processing based on<font color="#E5E5E5"> that so what</font>

121
00:04:45,920 --> 00:04:51,320
are the URLs that folks are going to be

122
00:04:48,170 --> 00:04:53,210
<font color="#CCCCCC">able to access and for each URL what are</font>

123
00:04:51,320 --> 00:04:54,560
the parameters that you<font color="#E5E5E5"> can pass in that</font>

124
00:04:53,210 --> 00:04:57,799
will change<font color="#E5E5E5"> the behavior of the</font>

125
00:04:54,560 --> 00:05:00,050
application or other parts<font color="#E5E5E5"> of the attack</font>

126
00:04:57,800 --> 00:05:01,310
surface if you think of HTTP headers and

127
00:05:00,050 --> 00:05:04,190
cookies<font color="#E5E5E5"> and so really what we're asking</font>

128
00:05:01,310 --> 00:05:06,200
is what are all the<font color="#CCCCCC"> different points on</font>

129
00:05:04,190 --> 00:05:08,360
your<font color="#CCCCCC"> application</font><font color="#E5E5E5"> where an attacker has</font>

130
00:05:06,200 --> 00:05:10,729
the ability to send in an input that is

131
00:05:08,360 --> 00:05:14,300
going to have some sort<font color="#E5E5E5"> of impact on the</font>

132
00:05:10,730 --> 00:05:16,360
behavior<font color="#CCCCCC"> of the application and so</font>

133
00:05:14,300 --> 00:05:19,220
looking at this is<font color="#E5E5E5"> really looking at how</font>

134
00:05:16,360 --> 00:05:21,169
the what you would target when you're

135
00:05:19,220 --> 00:05:23,720
doing dynamic<font color="#E5E5E5"> testing you know whether</font>

136
00:05:21,169 --> 00:05:25,580
<font color="#CCCCCC">that be automated dast</font><font color="#E5E5E5"> as nice gartner</font>

137
00:05:23,720 --> 00:05:28,700
term dynamic application security

138
00:05:25,580 --> 00:05:30,440
testing or looking at manual assessment

139
00:05:28,700 --> 00:05:34,700
or manual penetration testing of

140
00:05:30,440 --> 00:05:36,169
applications so what does<font color="#E5E5E5"> the tax</font>

141
00:05:34,700 --> 00:05:37,580
surface have to do with DevOps well

142
00:05:36,169 --> 00:05:39,500
first of all if you want your talk to be

143
00:05:37,580 --> 00:05:46,070
accepted<font color="#E5E5E5"> these days it has to be</font><font color="#CCCCCC"> about</font>

144
00:05:39,500 --> 00:05:50,270
DevOps no wait way we've actually

145
00:05:46,070 --> 00:05:52,820
started looking at this is<font color="#E5E5E5"> to figure</font><font color="#CCCCCC"> out</font>

146
00:05:50,270 --> 00:05:55,609
what do we want from security in the

147
00:05:52,820 --> 00:05:57,530
DevOps pipeline and to figure out

148
00:05:55,610 --> 00:05:58,910
especially<font color="#CCCCCC"> when you look at the</font>

149
00:05:57,530 --> 00:06:01,669
constraints that you have in an

150
00:05:58,910 --> 00:06:04,460
organization if you look at<font color="#E5E5E5"> the time and</font>

151
00:06:01,669 --> 00:06:06,169
resources it takes to do security

152
00:06:04,460 --> 00:06:09,020
testing to run security<font color="#E5E5E5"> testing tools to</font>

153
00:06:06,169 --> 00:06:10,849
do manual testing what we've<font color="#CCCCCC"> done</font><font color="#E5E5E5"> is</font>

154
00:06:09,020 --> 00:06:12,260
<font color="#E5E5E5">taken a really hard look at attack</font>

155
00:06:10,850 --> 00:06:14,930
surface in<font color="#E5E5E5"> the evolution of attack</font>

156
00:06:12,260 --> 00:06:16,490
surface and we're using that to focus in

157
00:06:14,930 --> 00:06:19,430
efforts because we typically have

158
00:06:16,490 --> 00:06:21,380
limited resources and you need to focus

159
00:06:19,430 --> 00:06:24,140
those resources in where<font color="#E5E5E5"> they're going</font>

160
00:06:21,380 --> 00:06:26,150
<font color="#E5E5E5">to be the most</font><font color="#CCCCCC"> valuable and we'll</font><font color="#E5E5E5"> talk</font>

161
00:06:24,140 --> 00:06:27,800
<font color="#E5E5E5">obviously more about that the</font>

162
00:06:26,150 --> 00:06:29,840
organizations like Etsy and Netflix are

163
00:06:27,800 --> 00:06:32,300
doing<font color="#CCCCCC"> amazing things in their DevOps</font>

164
00:06:29,840 --> 00:06:34,429
pipelines for you know from<font color="#E5E5E5"> a security</font>

165
00:06:32,300 --> 00:06:36,800
standpoint to say you know<font color="#E5E5E5"> if i were to</font>

166
00:06:34,430 --> 00:06:38,720
deploy this build what's the security

167
00:06:36,800 --> 00:06:40,490
state<font color="#E5E5E5"> going to be of that deployment</font>

168
00:06:38,720 --> 00:06:42,530
have I broken any of the assumptions

169
00:06:40,490 --> 00:06:44,060
<font color="#CCCCCC">that I had leading up</font><font color="#E5E5E5"> to this again</font>

170
00:06:42,530 --> 00:06:46,520
those organizations and really really

171
00:06:44,060 --> 00:06:49,550
<font color="#E5E5E5">cool stuff when I think from an</font>

172
00:06:46,520 --> 00:06:51,380
application standpoint when I look at

173
00:06:49,550 --> 00:06:54,620
security<font color="#CCCCCC"> in the DevOps pipeline there's</font>

174
00:06:51,380 --> 00:06:57,380
really three steps that happen or three

175
00:06:54,620 --> 00:06:57,880
phases that you go through during your

176
00:06:57,380 --> 00:07:00,070
<font color="#CCCCCC">see</font>

177
00:06:57,880 --> 00:07:02,620
I<font color="#E5E5E5"> CD ordering your build now the first</font>

178
00:07:00,070 --> 00:07:04,060
<font color="#E5E5E5">is the testing phase you want to do some</font>

179
00:07:02,620 --> 00:07:05,590
<font color="#E5E5E5">sort of testing of the application</font>

180
00:07:04,060 --> 00:07:07,960
against your set<font color="#CCCCCC"> of assumptions to</font><font color="#E5E5E5"> ask</font>

181
00:07:05,590 --> 00:07:11,260
does this application have

182
00:07:07,960 --> 00:07:13,289
vulnerabilities in it can I discover

183
00:07:11,260 --> 00:07:16,060
vulnerabilities in this application and

184
00:07:13,290 --> 00:07:19,540
what we've worked<font color="#E5E5E5"> with organizations</font>

185
00:07:16,060 --> 00:07:21,400
doing is to determine you know some of

186
00:07:19,540 --> 00:07:23,680
<font color="#E5E5E5">that testing you</font><font color="#CCCCCC"> can probably</font><font color="#E5E5E5"> do</font>

187
00:07:21,400 --> 00:07:26,409
synchronously right where you are

188
00:07:23,680 --> 00:07:29,920
willing to<font color="#E5E5E5"> wait until that testing has</font>

189
00:07:26,410 --> 00:07:31,150
completed before you move forward<font color="#E5E5E5"> so</font>

190
00:07:29,920 --> 00:07:33,970
that you can make a decision based on

191
00:07:31,150 --> 00:07:35,919
<font color="#CCCCCC">that the challenge is</font><font color="#E5E5E5"> that in a lot of</font>

192
00:07:33,970 --> 00:07:38,530
cases if<font color="#CCCCCC"> you look at the current set of</font>

193
00:07:35,920 --> 00:07:40,510
security tools that are out there and if

194
00:07:38,530 --> 00:07:43,419
you look<font color="#CCCCCC"> at other security testing</font>

195
00:07:40,510 --> 00:07:47,020
techniques like manual testing you don't

196
00:07:43,420 --> 00:07:49,360
necessarily have the time to wait for

197
00:07:47,020 --> 00:07:52,120
all of these<font color="#E5E5E5"> activities to complete</font>

198
00:07:49,360 --> 00:07:53,980
right if I want<font color="#E5E5E5"> to run a full static</font>

199
00:07:52,120 --> 00:07:56,320
analysis scan of my million line of code

200
00:07:53,980 --> 00:07:58,390
application you know I might not want my

201
00:07:56,320 --> 00:08:00,760
Jenkins machine like waiting and waiting

202
00:07:58,390 --> 00:08:03,190
and waiting right I might need to get<font color="#CCCCCC"> a</font>

203
00:08:00,760 --> 00:08:04,360
again in a<font color="#E5E5E5"> perfect world you would be</font>

204
00:08:03,190 --> 00:08:05,500
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to do that because you would</font><font color="#CCCCCC"> be</font>

205
00:08:04,360 --> 00:08:06,850
able to say well<font color="#CCCCCC"> let's do all this</font>

206
00:08:05,500 --> 00:08:08,860
different testing and we're going to

207
00:08:06,850 --> 00:08:10,450
wait for<font color="#CCCCCC"> the end of all this testing and</font>

208
00:08:08,860 --> 00:08:11,440
when all of<font color="#CCCCCC"> it's done we're going</font><font color="#E5E5E5"> to</font>

209
00:08:10,450 --> 00:08:15,099
look at the results and<font color="#E5E5E5"> we're going to</font>

210
00:08:11,440 --> 00:08:18,130
<font color="#E5E5E5">move</font><font color="#CCCCCC"> forward that's much more of a</font>

211
00:08:15,100 --> 00:08:20,530
waterfall type of approach and if you

212
00:08:18,130 --> 00:08:22,450
<font color="#E5E5E5">look at security organizations you know</font>

213
00:08:20,530 --> 00:08:24,159
they don't<font color="#CCCCCC"> necessarily have the power to</font>

214
00:08:22,450 --> 00:08:25,960
enforce that to say no you need to go

215
00:08:24,160 --> 00:08:27,700
<font color="#E5E5E5">through all</font><font color="#CCCCCC"> of this regression all these</font>

216
00:08:25,960 --> 00:08:29,890
other<font color="#CCCCCC"> things from a security standpoint</font>

217
00:08:27,700 --> 00:08:31,479
before we move forward<font color="#E5E5E5"> and so a</font>

218
00:08:29,890 --> 00:08:33,010
practical reality that we see a lot<font color="#E5E5E5"> of</font>

219
00:08:31,480 --> 00:08:35,020
organizations having to deal with<font color="#E5E5E5"> is</font>

220
00:08:33,010 --> 00:08:36,520
some testing can be done synchronously

221
00:08:35,020 --> 00:08:38,409
where you're waiting<font color="#CCCCCC"> for the results of</font>

222
00:08:36,520 --> 00:08:40,390
that testing before you make a decision

223
00:08:38,409 --> 00:08:43,089
about failing or passing the build and

224
00:08:40,390 --> 00:08:44,590
moving<font color="#CCCCCC"> forward but</font><font color="#E5E5E5"> in a lot of cases you</font>

225
00:08:43,090 --> 00:08:45,910
you know some of these<font color="#E5E5E5"> things have to be</font>

226
00:08:44,590 --> 00:08:47,890
done asynchronous let's kick this

227
00:08:45,910 --> 00:08:49,660
process off we know it's going to

228
00:08:47,890 --> 00:08:51,670
complete<font color="#E5E5E5"> after we've given a thumbs-up</font>

229
00:08:49,660 --> 00:08:52,600
or a thumbs-down to this build we're

230
00:08:51,670 --> 00:08:54,189
just going<font color="#E5E5E5"> to have to have the</font>

231
00:08:52,600 --> 00:08:55,900
communications and the processes in

232
00:08:54,190 --> 00:08:58,210
place to say hey<font color="#E5E5E5"> you know that thing</font>

233
00:08:55,900 --> 00:08:59,860
that we<font color="#E5E5E5"> pushed out well we found some</font>

234
00:08:58,210 --> 00:09:01,930
<font color="#E5E5E5">things that are wrong with</font><font color="#CCCCCC"> it let's use</font>

235
00:08:59,860 --> 00:09:04,290
our totally awesome agile DevOps skills

236
00:09:01,930 --> 00:09:07,150
to quickly make fixes and push those out

237
00:09:04,290 --> 00:09:08,890
again not<font color="#E5E5E5"> ideal but from a practical</font>

238
00:09:07,150 --> 00:09:10,610
<font color="#E5E5E5">standpoint is something that we see in a</font>

239
00:09:08,890 --> 00:09:12,319
lot of cases

240
00:09:10,610 --> 00:09:14,060
so<font color="#E5E5E5"> after you've done your synchronous</font>

241
00:09:12,320 --> 00:09:15,860
testing you need to make<font color="#CCCCCC"> a decision</font><font color="#E5E5E5"> from</font>

242
00:09:14,060 --> 00:09:17,689
a security standpoint you need to

243
00:09:15,860 --> 00:09:18,890
determine do<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> pass this build</font>

244
00:09:17,690 --> 00:09:20,720
or do I want to fail this build you know

245
00:09:18,890 --> 00:09:22,459
<font color="#E5E5E5">very similar to if you're running j unit</font>

246
00:09:20,720 --> 00:09:25,459
if you're running<font color="#E5E5E5"> your unit tests if</font>

247
00:09:22,459 --> 00:09:27,439
you're running selenium for your

248
00:09:25,459 --> 00:09:29,390
functional<font color="#CCCCCC"> test</font><font color="#E5E5E5"> right from a security</font>

249
00:09:27,440 --> 00:09:32,240
standpoint you want to make a decision

250
00:09:29,390 --> 00:09:34,069
<font color="#E5E5E5">to say is this build acceptable to move</font>

251
00:09:32,240 --> 00:09:35,630
to the<font color="#CCCCCC"> next stage in the pipeline or do</font>

252
00:09:34,070 --> 00:09:39,260
we need<font color="#CCCCCC"> to pull the cord and stop things</font>

253
00:09:35,630 --> 00:09:41,180
and again here in an ideal world you

254
00:09:39,260 --> 00:09:42,470
love to say well our policy for this

255
00:09:41,180 --> 00:09:43,969
application is going<font color="#CCCCCC"> to be that we're</font>

256
00:09:42,470 --> 00:09:45,320
not<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to allow any critical or high</font>

257
00:09:43,970 --> 00:09:46,940
vulnerabilities we're going to fail the

258
00:09:45,320 --> 00:09:47,930
build if there<font color="#E5E5E5"> are any critical or high</font>

259
00:09:46,940 --> 00:09:51,350
vulnerabilities that have been

260
00:09:47,930 --> 00:09:53,329
identified from a practical<font color="#E5E5E5"> standpoint</font>

261
00:09:51,350 --> 00:09:55,310
how many people<font color="#CCCCCC"> think that that would</font><font color="#E5E5E5"> be</font>

262
00:09:53,329 --> 00:09:58,729
<font color="#E5E5E5">like a real winning strategy in your</font>

263
00:09:55,310 --> 00:10:00,709
organization<font color="#E5E5E5"> yeah the challenge</font><font color="#CCCCCC"> that we</font>

264
00:09:58,730 --> 00:10:02,570
see in a lot of organizations that have

265
00:10:00,709 --> 00:10:04,518
a lot of legacy code where they're

266
00:10:02,570 --> 00:10:07,190
<font color="#E5E5E5">trying to instead of building new apps</font>

267
00:10:04,519 --> 00:10:08,779
in pure DevOps environments where

268
00:10:07,190 --> 00:10:10,220
they're trying<font color="#CCCCCC"> to take legacy</font>

269
00:10:08,779 --> 00:10:12,860
applications and start to get those

270
00:10:10,220 --> 00:10:15,560
practices to take<font color="#E5E5E5"> advantage of more</font>

271
00:10:12,860 --> 00:10:18,079
DevOps type stuff what you see is that

272
00:10:15,560 --> 00:10:20,630
you you may have<font color="#CCCCCC"> a scan and you may</font><font color="#E5E5E5"> have</font>

273
00:10:18,079 --> 00:10:22,430
an application that has some number<font color="#E5E5E5"> 100</font>

274
00:10:20,630 --> 00:10:25,189
criticals or highs that are in<font color="#CCCCCC"> that</font>

275
00:10:22,430 --> 00:10:27,109
application and it's simply politically

276
00:10:25,190 --> 00:10:28,279
not possible for you to say well we're

277
00:10:27,110 --> 00:10:30,079
not going to pass any builds for the

278
00:10:28,279 --> 00:10:32,060
next two<font color="#CCCCCC"> weeks until this is finished</font>

279
00:10:30,079 --> 00:10:33,410
right that's a potentially losing

280
00:10:32,060 --> 00:10:36,199
proposition so you may want to make

281
00:10:33,410 --> 00:10:38,329
decisions to say it's very<font color="#CCCCCC"> least I</font><font color="#E5E5E5"> don't</font>

282
00:10:36,199 --> 00:10:40,010
want to yo politically I can get the dev

283
00:10:38,329 --> 00:10:41,899
team to agree not to introduce new

284
00:10:40,010 --> 00:10:44,240
critical and high vulnerabilities right

285
00:10:41,899 --> 00:10:45,949
and so you've got<font color="#E5E5E5"> to determine like what</font>

286
00:10:44,240 --> 00:10:47,660
is our policy for passing a build in a

287
00:10:45,949 --> 00:10:49,849
perfect world you'd say you know

288
00:10:47,660 --> 00:10:52,100
vulnerabilities or no you know criticals

289
00:10:49,850 --> 00:10:53,449
and highs from a pragmatic standpoint

290
00:10:52,100 --> 00:10:55,370
that may not<font color="#E5E5E5"> be something that's</font>

291
00:10:53,449 --> 00:10:57,290
politically reasonable to do in<font color="#E5E5E5"> your</font>

292
00:10:55,370 --> 00:10:59,149
organization and you may be able just to

293
00:10:57,290 --> 00:11:00,709
say like well hey we can't introduce any

294
00:10:59,149 --> 00:11:02,570
new sequel injections or cross-site

295
00:11:00,709 --> 00:11:05,089
scripting whatever<font color="#E5E5E5"> that might be and</font>

296
00:11:02,570 --> 00:11:07,399
then after<font color="#E5E5E5"> you've made a decision on the</font>

297
00:11:05,089 --> 00:11:08,570
building you<font color="#E5E5E5"> need to report on</font><font color="#CCCCCC"> that it's</font>

298
00:11:07,399 --> 00:11:10,339
back<font color="#E5E5E5"> to your Jenkins server or</font>

299
00:11:08,570 --> 00:11:13,870
potentially taking the results of the

300
00:11:10,339 --> 00:11:16,490
testing and pushing that out into the

301
00:11:13,870 --> 00:11:18,410
developers workflow or change tracking

302
00:11:16,490 --> 00:11:20,149
tools to say we're going to take<font color="#E5E5E5"> all the</font>

303
00:11:18,410 --> 00:11:21,890
results that<font color="#E5E5E5"> came back from this testing</font>

304
00:11:20,149 --> 00:11:23,149
we're<font color="#E5E5E5"> going to bundle all the like</font>

305
00:11:21,890 --> 00:11:23,840
vulnerabilities up together<font color="#E5E5E5"> and we're</font>

306
00:11:23,149 --> 00:11:25,850
going to<font color="#E5E5E5"> create</font>

307
00:11:23,840 --> 00:11:27,290
<font color="#CCCCCC">X in jira and that's the way that the</font>

308
00:11:25,850 --> 00:11:29,590
dev team is going<font color="#E5E5E5"> to know</font><font color="#CCCCCC"> that we found</font>

309
00:11:27,290 --> 00:11:32,689
a new things as a result of<font color="#E5E5E5"> this testing</font>

310
00:11:29,590 --> 00:11:34,280
so that's really when I look at security

311
00:11:32,690 --> 00:11:35,960
application security in the DevOps

312
00:11:34,280 --> 00:11:39,290
pipeline that's kind of the point of

313
00:11:35,960 --> 00:11:41,660
view that<font color="#E5E5E5"> I have on their kind of stage</font>

314
00:11:39,290 --> 00:11:43,849
as<font color="#CCCCCC"> you go through and the trade-offs</font>

315
00:11:41,660 --> 00:11:45,500
that you have to make between what<font color="#CCCCCC"> you</font>

316
00:11:43,850 --> 00:11:46,790
would like<font color="#E5E5E5"> to see in an ideal world or</font>

317
00:11:45,500 --> 00:11:49,310
an end state that you would like<font color="#E5E5E5"> to get</font>

318
00:11:46,790 --> 00:11:52,339
to<font color="#E5E5E5"> as compared with what</font><font color="#CCCCCC"> you're</font>

319
00:11:49,310 --> 00:11:53,839
politically able to push<font color="#CCCCCC"> through and get</font>

320
00:11:52,340 --> 00:11:58,690
all the different stakeholders to agree

321
00:11:53,840 --> 00:12:02,990
on any questions<font color="#E5E5E5"> any of that so far</font>

322
00:11:58,690 --> 00:12:06,320
excellent so as<font color="#E5E5E5"> I talked</font><font color="#CCCCCC"> about you know</font>

323
00:12:02,990 --> 00:12:08,810
many security tools run too long to

324
00:12:06,320 --> 00:12:09,860
include in a lot<font color="#CCCCCC"> of pipeline builds you</font>

325
00:12:08,810 --> 00:12:11,750
know if you're going<font color="#CCCCCC"> to run you</font><font color="#E5E5E5"> know</font>

326
00:12:09,860 --> 00:12:13,490
full static<font color="#CCCCCC"> analysis and application if</font>

327
00:12:11,750 --> 00:12:15,620
you've got a big application you're you

328
00:12:13,490 --> 00:12:18,410
want to run dynamic analysis you know

329
00:12:15,620 --> 00:12:20,930
those are potentially<font color="#E5E5E5"> long-running your</font>

330
00:12:18,410 --> 00:12:22,760
processes and that may not be acceptable

331
00:12:20,930 --> 00:12:24,890
to say well hey we<font color="#CCCCCC"> used to be able to</font>

332
00:12:22,760 --> 00:12:26,990
approve a build in X amount of time you

333
00:12:24,890 --> 00:12:28,460
know in you know 45 minutes or an hour

334
00:12:26,990 --> 00:12:30,320
<font color="#E5E5E5">and a half or three</font><font color="#CCCCCC"> hours we used to be</font>

335
00:12:28,460 --> 00:12:32,090
able to do you know enough<font color="#E5E5E5"> of a build</font>

336
00:12:30,320 --> 00:12:33,470
now it takes 12<font color="#E5E5E5"> hours because we also</font>

337
00:12:32,090 --> 00:12:36,050
included<font color="#E5E5E5"> this other step that we're</font>

338
00:12:33,470 --> 00:12:38,650
trying to go through<font color="#CCCCCC"> but also what's I</font>

339
00:12:36,050 --> 00:12:41,060
think<font color="#CCCCCC"> it's important to understand that</font>

340
00:12:38,650 --> 00:12:42,860
<font color="#E5E5E5">automation from a security standpoint</font>

341
00:12:41,060 --> 00:12:45,800
automation can't solve all<font color="#E5E5E5"> of your</font>

342
00:12:42,860 --> 00:12:48,040
problems<font color="#E5E5E5"> and so you're going</font><font color="#CCCCCC"> to need to</font>

343
00:12:45,800 --> 00:12:52,459
incorporate manual testing activities

344
00:12:48,040 --> 00:12:54,110
into your verification program and those

345
00:12:52,460 --> 00:12:55,760
can be challenging I mean<font color="#E5E5E5"> especially</font>

346
00:12:54,110 --> 00:12:57,320
from a DevOps standpoint if you're

347
00:12:55,760 --> 00:12:58,790
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> build X amount of you</font><font color="#E5E5E5"> know get</font>

348
00:12:57,320 --> 00:13:00,770
through your X amount of builds per day

349
00:12:58,790 --> 00:13:03,410
or<font color="#E5E5E5"> something like that unless you have</font>

350
00:13:00,770 --> 00:13:05,270
just a weird like<font color="#E5E5E5"> meet cloud of testers</font>

351
00:13:03,410 --> 00:13:07,969
waiting around like jump on new stuff

352
00:13:05,270 --> 00:13:09,590
again that's the type of<font color="#E5E5E5"> that's the type</font>

353
00:13:07,970 --> 00:13:11,960
of process that's probably going to<font color="#E5E5E5"> have</font>

354
00:13:09,590 --> 00:13:13,580
to happen asynchronously but it may<font color="#CCCCCC"> be</font>

355
00:13:11,960 --> 00:13:16,970
one<font color="#E5E5E5"> that you want</font><font color="#CCCCCC"> to influence or kick</font>

356
00:13:13,580 --> 00:13:19,010
off you know based on these you build

357
00:13:16,970 --> 00:13:23,240
activities being picked you kicked<font color="#E5E5E5"> off</font>

358
00:13:19,010 --> 00:13:25,760
and so if you look at tracking attack

359
00:13:23,240 --> 00:13:30,610
surface<font color="#E5E5E5"> over time that lets us</font>

360
00:13:25,760 --> 00:13:32,840
potentially focus our activities on the

361
00:13:30,610 --> 00:13:35,030
on the things that<font color="#CCCCCC"> are most important</font>

362
00:13:32,840 --> 00:13:36,540
and so if I've<font color="#E5E5E5"> got an application and</font>

363
00:13:35,030 --> 00:13:38,670
since I've<font color="#E5E5E5"> done my last</font>

364
00:13:36,540 --> 00:13:41,839
old we've introduced you know five new

365
00:13:38,670 --> 00:13:43,860
URLs and<font color="#E5E5E5"> ten new parameters if I'm doing</font>

366
00:13:41,840 --> 00:13:45,810
automated testing but I don't have<font color="#CCCCCC"> a</font>

367
00:13:43,860 --> 00:13:48,090
long<font color="#E5E5E5"> time to do that you know for that</font>

368
00:13:45,810 --> 00:13:50,339
testing cycle I may want to say I only

369
00:13:48,090 --> 00:13:51,900
want to do dynamic testing on those

370
00:13:50,340 --> 00:13:53,370
<font color="#E5E5E5">endpoints that are new in this</font>

371
00:13:51,900 --> 00:13:55,020
application because I know those have

372
00:13:53,370 --> 00:13:58,440
not yet been subject to some sort of

373
00:13:55,020 --> 00:14:00,569
inspection and that may get<font color="#E5E5E5"> you</font><font color="#CCCCCC"> and your</font>

374
00:13:58,440 --> 00:14:02,160
<font color="#E5E5E5">tool runtime down to a level where it's</font>

375
00:14:00,570 --> 00:14:04,170
acceptable to include in the bill is

376
00:14:02,160 --> 00:14:06,660
that as<font color="#CCCCCC"> you know is that going to catch</font>

377
00:14:04,170 --> 00:14:08,819
scenarios where the underlying code

378
00:14:06,660 --> 00:14:09,930
behind existing piece of the attack

379
00:14:08,820 --> 00:14:12,600
surface have changed you may have

380
00:14:09,930 --> 00:14:13,800
introduced vulnerabilities<font color="#E5E5E5"> no you</font><font color="#CCCCCC"> know</font>

381
00:14:12,600 --> 00:14:14,970
in that case you're you know if you're

382
00:14:13,800 --> 00:14:17,099
not<font color="#E5E5E5"> testing that stuff you're not going</font>

383
00:14:14,970 --> 00:14:18,720
to you know I can<font color="#E5E5E5"> check it but hopefully</font>

384
00:14:17,100 --> 00:14:20,580
<font color="#CCCCCC">we can all agree that at least some</font>

385
00:14:18,720 --> 00:14:22,320
testing or making sure that attack

386
00:14:20,580 --> 00:14:25,230
surface has been subject to some testing

387
00:14:22,320 --> 00:14:26,820
is preferable to<font color="#E5E5E5"> not having any insight</font>

388
00:14:25,230 --> 00:14:29,550
into the security state of that new

389
00:14:26,820 --> 00:14:32,310
attack surface at all you know similarly

390
00:14:29,550 --> 00:14:34,410
if you're looking at manual testing over

391
00:14:32,310 --> 00:14:36,959
time or if you<font color="#E5E5E5"> have a limited set of</font>

392
00:14:34,410 --> 00:14:38,819
resources for doing manual testing if

393
00:14:36,960 --> 00:14:40,800
you<font color="#CCCCCC"> want to do incremental manual</font>

394
00:14:38,820 --> 00:14:43,350
testing knowing how the attack surface

395
00:14:40,800 --> 00:14:45,599
has changed between two weeks ago<font color="#E5E5E5"> when</font>

396
00:14:43,350 --> 00:14:46,980
we did our last manual test and now when

397
00:14:45,600 --> 00:14:49,170
we've<font color="#CCCCCC"> got some additional</font><font color="#E5E5E5"> time to do</font>

398
00:14:46,980 --> 00:14:51,630
<font color="#CCCCCC">testing if I know about</font><font color="#E5E5E5"> new attack</font>

399
00:14:49,170 --> 00:14:53,250
surface I can focus my efforts on the

400
00:14:51,630 --> 00:14:55,140
new attack surface because I know that

401
00:14:53,250 --> 00:14:58,400
that has not yet<font color="#CCCCCC"> been</font><font color="#E5E5E5"> subject to that</font>

402
00:14:55,140 --> 00:15:00,810
type of testing and so by understanding

403
00:14:58,400 --> 00:15:02,220
more about the attack surface of an

404
00:15:00,810 --> 00:15:05,760
<font color="#CCCCCC">application and watching how that</font>

405
00:15:02,220 --> 00:15:08,370
changes over time that lets you be much

406
00:15:05,760 --> 00:15:09,689
more pragmatic and intelligent about<font color="#E5E5E5"> the</font>

407
00:15:08,370 --> 00:15:11,670
way that you allocate your scarce

408
00:15:09,690 --> 00:15:14,670
resources and that's really in the

409
00:15:11,670 --> 00:15:16,530
security world I<font color="#E5E5E5"> think that's the that's</font>

410
00:15:14,670 --> 00:15:17,910
the hard problem is making those

411
00:15:16,530 --> 00:15:19,800
economic decisions of how do you

412
00:15:17,910 --> 00:15:21,870
allocate scarce resources because nobody

413
00:15:19,800 --> 00:15:23,579
has as much you<font color="#E5E5E5"> know nobody has as many</font>

414
00:15:21,870 --> 00:15:25,320
people on<font color="#E5E5E5"> their team as they want nobody</font>

415
00:15:23,580 --> 00:15:27,810
has as much time do the testing as they

416
00:15:25,320 --> 00:15:29,730
want that's<font color="#E5E5E5"> just a fact of life is</font><font color="#CCCCCC"> that</font>

417
00:15:27,810 --> 00:15:32,430
you're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be dealing</font><font color="#E5E5E5"> with resource</font>

418
00:15:29,730 --> 00:15:33,870
constraints and by using this attack

419
00:15:32,430 --> 00:15:36,089
surface information that can help you

420
00:15:33,870 --> 00:15:39,750
<font color="#CCCCCC">make better decisions about where to</font>

421
00:15:36,090 --> 00:15:42,180
allocate those resources so the

422
00:15:39,750 --> 00:15:43,770
underlying technology that does this

423
00:15:42,180 --> 00:15:46,859
attack surface calculation is called the

424
00:15:43,770 --> 00:15:48,300
hybrid analysis mapping or ham as<font color="#E5E5E5"> its</font>

425
00:15:46,860 --> 00:15:50,430
<font color="#E5E5E5">affectionately referred to around our</font>

426
00:15:48,300 --> 00:15:52,620
office<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> original goal</font>

427
00:15:50,430 --> 00:15:56,370
<font color="#E5E5E5">learning this technology was to be able</font>

428
00:15:52,620 --> 00:15:58,440
to to correlate the results of static

429
00:15:56,370 --> 00:16:00,750
application security testing and dynamic

430
00:15:58,440 --> 00:16:02,910
application security testing it's been

431
00:16:00,750 --> 00:16:06,750
funded via the US Department<font color="#E5E5E5"> of Homeland</font>

432
00:16:02,910 --> 00:16:09,480
Security and under some research and

433
00:16:06,750 --> 00:16:11,940
<font color="#E5E5E5">development contracts and what we found</font>

434
00:16:09,480 --> 00:16:13,980
once we had built that merging engine is

435
00:16:11,940 --> 00:16:16,589
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> could also use the underlying</font>

436
00:16:13,980 --> 00:16:18,330
data structures to do this type of you

437
00:16:16,589 --> 00:16:20,820
know essentially we had built the attack

438
00:16:18,330 --> 00:16:22,890
surface calculation engine as a side

439
00:16:20,820 --> 00:16:24,480
effect of what we needed to do in order

440
00:16:22,890 --> 00:16:27,270
to the correlation and so what we've

441
00:16:24,480 --> 00:16:29,010
been doing recently is looking for other

442
00:16:27,270 --> 00:16:30,449
things that<font color="#E5E5E5"> we can do without underlying</font>

443
00:16:29,010 --> 00:16:34,020
technology and that attack surface

444
00:16:30,450 --> 00:16:36,029
calculation just for the sake of

445
00:16:34,020 --> 00:16:39,480
whatever i<font color="#E5E5E5"> guess i should mention this</font>

446
00:16:36,029 --> 00:16:41,040
the DHS<font color="#CCCCCC"> foltz funded this research but</font>

447
00:16:39,480 --> 00:16:42,300
don't take that as an endorsement of

448
00:16:41,040 --> 00:16:45,329
anything that I say here today I'm

449
00:16:42,300 --> 00:16:48,180
simply up here<font color="#E5E5E5"> talking with my opinions</font>

450
00:16:45,330 --> 00:16:49,020
about what we've done is<font color="#E5E5E5"> caveat no I</font>

451
00:16:48,180 --> 00:16:54,739
don't want to<font color="#E5E5E5"> get a call from our</font>

452
00:16:49,020 --> 00:16:57,890
program manager say he said what but so

453
00:16:54,740 --> 00:17:04,470
so we're currently uh again phase two

454
00:16:57,890 --> 00:17:07,109
<font color="#E5E5E5">the DHS S&T CSD</font><font color="#CCCCCC"> SBR which is the gotta</font>

455
00:17:04,470 --> 00:17:09,569
<font color="#CCCCCC">have got to have the acronyms and I was</font>

456
00:17:07,109 --> 00:17:11,069
corrected the first time I got a call

457
00:17:09,569 --> 00:17:12,959
from<font color="#CCCCCC"> our program manager it was to</font>

458
00:17:11,069 --> 00:17:15,649
correct some acronyms that I had left

459
00:17:12,959 --> 00:17:18,150
out<font color="#CCCCCC"> of some statements that I had made</font>

460
00:17:15,650 --> 00:17:20,069
but again it's a US Department<font color="#E5E5E5"> of</font>

461
00:17:18,150 --> 00:17:21,959
Homeland Security<font color="#CCCCCC"> the Directorate of</font>

462
00:17:20,069 --> 00:17:24,119
Science and Technology the cybersecurity

463
00:17:21,959 --> 00:17:25,949
division and the<font color="#CCCCCC"> program</font><font color="#E5E5E5"> is called the</font>

464
00:17:24,119 --> 00:17:30,030
SBIR Small Business Innovation research

465
00:17:25,949 --> 00:17:31,470
program and just as a side note yeah

466
00:17:30,030 --> 00:17:34,020
<font color="#E5E5E5">this is the first time that I've been</font>

467
00:17:31,470 --> 00:17:36,330
involved in these types of federal

468
00:17:34,020 --> 00:17:38,370
government<font color="#E5E5E5"> rd contracting so it's been</font>

469
00:17:36,330 --> 00:17:39,780
interesting for me being someone who's

470
00:17:38,370 --> 00:17:41,189
spent most of my time working with

471
00:17:39,780 --> 00:17:43,649
<font color="#E5E5E5">private sector organizations working</font>

472
00:17:41,190 --> 00:17:45,059
with the public sector folks but it's

473
00:17:43,650 --> 00:17:47,190
been a really interesting program and

474
00:17:45,059 --> 00:17:50,639
it's a great<font color="#E5E5E5"> way</font><font color="#CCCCCC"> the SBIR program what</font>

475
00:17:47,190 --> 00:17:51,900
the different federal agencies what they

476
00:17:50,640 --> 00:17:54,000
do is they determine here the

477
00:17:51,900 --> 00:17:55,380
technologies that<font color="#E5E5E5"> we think would be</font>

478
00:17:54,000 --> 00:17:57,720
interesting for us to accomplish our

479
00:17:55,380 --> 00:18:00,480
mission and they put out a basically a

480
00:17:57,720 --> 00:18:02,429
request for proposal that says do you

481
00:18:00,480 --> 00:18:03,370
think you can meet these needs and then

482
00:18:02,429 --> 00:18:04,740
they walk full

483
00:18:03,370 --> 00:18:07,600
like denim group through a kind<font color="#E5E5E5"> of</font>

484
00:18:04,740 --> 00:18:09,280
progressive stages of demonstrating

485
00:18:07,600 --> 00:18:10,570
prototyping and things like that<font color="#E5E5E5"> so it's</font>

486
00:18:09,280 --> 00:18:13,450
been<font color="#CCCCCC"> really cool to be</font><font color="#E5E5E5"> involved in this</font>

487
00:18:10,570 --> 00:18:15,340
program and you know<font color="#E5E5E5"> that's allowed</font><font color="#CCCCCC"> us</font>

488
00:18:13,450 --> 00:18:16,690
to develop some technology<font color="#CCCCCC"> that we</font>

489
00:18:15,340 --> 00:18:18,909
probably would not<font color="#CCCCCC"> have developed</font>

490
00:18:16,690 --> 00:18:20,200
otherwise and we've open sourced most of

491
00:18:18,910 --> 00:18:22,210
that technology all the stuff that I'm

492
00:18:20,200 --> 00:18:23,950
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> here today you know you</font>

493
00:18:22,210 --> 00:18:26,290
can all<font color="#E5E5E5"> you can do based on the stuff</font>

494
00:18:23,950 --> 00:18:27,550
that's in github and whatnot and<font color="#E5E5E5"> so</font>

495
00:18:26,290 --> 00:18:30,100
that's<font color="#E5E5E5"> been a cool way for</font><font color="#CCCCCC"> us to develop</font>

496
00:18:27,550 --> 00:18:32,290
this technology you know to use<font color="#E5E5E5"> that for</font>

497
00:18:30,100 --> 00:18:33,939
commercial benefit but also you know we

498
00:18:32,290 --> 00:18:39,309
made<font color="#CCCCCC"> the decision to</font><font color="#E5E5E5"> open source a bunch</font>

499
00:18:33,940 --> 00:18:40,809
of it so whatever<font color="#E5E5E5"> so again the initial</font>

500
00:18:39,309 --> 00:18:42,639
goal was to correlate the merger

501
00:18:40,809 --> 00:18:44,860
correlate merge results from static and

502
00:18:42,640 --> 00:18:46,840
dynamic a security test and after we

503
00:18:44,860 --> 00:18:48,428
figure out<font color="#E5E5E5"> how to do that we made it do</font>

504
00:18:46,840 --> 00:18:49,570
other stuff which<font color="#CCCCCC"> is more what</font><font color="#E5E5E5"> I'm</font>

505
00:18:48,429 --> 00:18:51,040
talking about<font color="#E5E5E5"> today and like the</font>

506
00:18:49,570 --> 00:18:53,080
specific need that we were trying<font color="#CCCCCC"> to</font>

507
00:18:51,040 --> 00:18:54,760
meet we saw a lot<font color="#CCCCCC"> of organizations</font><font color="#E5E5E5"> that</font>

508
00:18:53,080 --> 00:18:57,909
we worked with where they had deployed

509
00:18:54,760 --> 00:19:00,190
apps can<font color="#E5E5E5"> you know typically you'll watch</font>

510
00:18:57,910 --> 00:19:01,840
fire as their dynamic testing engine and

511
00:19:00,190 --> 00:19:05,200
fortify as their static testing engine

512
00:19:01,840 --> 00:19:08,169
and again as the industry has evolved

513
00:19:05,200 --> 00:19:11,230
and matured IBM bought watch fire HP

514
00:19:08,170 --> 00:19:14,830
bought fortify now microfocus bought HP

515
00:19:11,230 --> 00:19:16,600
software but you know organizations had

516
00:19:14,830 --> 00:19:18,340
these tools deployed and the vendors

517
00:19:16,600 --> 00:19:21,399
that own them didn't necessarily have a

518
00:19:18,340 --> 00:19:23,439
strong<font color="#E5E5E5"> incentive to do a bunch of</font><font color="#CCCCCC"> stuff</font>

519
00:19:21,400 --> 00:19:25,059
together and<font color="#E5E5E5"> so the challenge we saw was</font>

520
00:19:23,440 --> 00:19:27,130
a lot of<font color="#E5E5E5"> folks had all this data that</font>

521
00:19:25,059 --> 00:19:29,110
they that<font color="#CCCCCC"> they had been producing with</font>

522
00:19:27,130 --> 00:19:32,590
their programs and they needed<font color="#E5E5E5"> a way to</font>

523
00:19:29,110 --> 00:19:33,669
combine that make sense of that<font color="#E5E5E5"> as ever</font>

524
00:19:32,590 --> 00:19:35,949
to hear familiar with dynamic

525
00:19:33,670 --> 00:19:37,630
application security testing you kind of

526
00:19:35,950 --> 00:19:40,059
act like Google you're going to spider

527
00:19:37,630 --> 00:19:41,890
the application to in this case you're

528
00:19:40,059 --> 00:19:44,050
trying to discover<font color="#E5E5E5"> the attack surface of</font>

529
00:19:41,890 --> 00:19:45,580
the application you started page one you

530
00:19:44,050 --> 00:19:47,500
know look<font color="#E5E5E5"> at the HTML and the JavaScript</font>

531
00:19:45,580 --> 00:19:49,210
look for all<font color="#CCCCCC"> the links go to the page to</font>

532
00:19:47,500 --> 00:19:51,970
go to page three you know so on and so

533
00:19:49,210 --> 00:19:54,370
forth and so the dynamic scanning

534
00:19:51,970 --> 00:19:57,280
engines they have to go out and a spider

535
00:19:54,370 --> 00:19:59,530
to identify to get you essentially guess

536
00:19:57,280 --> 00:20:02,440
or to discover the<font color="#E5E5E5"> applications attack</font>

537
00:19:59,530 --> 00:20:03,910
surface again with some authentication

538
00:20:02,440 --> 00:20:05,559
and session detection stuff you've got

539
00:20:03,910 --> 00:20:06,820
to teach the scanner how to<font color="#CCCCCC"> login</font><font color="#E5E5E5"> so you</font>

540
00:20:05,559 --> 00:20:09,520
can have a valid session cookie and

541
00:20:06,820 --> 00:20:11,050
whatnot and once the scanner has

542
00:20:09,520 --> 00:20:12,160
identified that attack surface it

543
00:20:11,050 --> 00:20:15,350
essentially goes through directed

544
00:20:12,160 --> 00:20:16,910
fuzzing to say let's see if we can find

545
00:20:15,350 --> 00:20:18,168
durable request and response patterns

546
00:20:16,910 --> 00:20:20,299
i'm going to send in sequel control

547
00:20:18,169 --> 00:20:22,070
characters if<font color="#E5E5E5"> i get</font><font color="#CCCCCC"> a jdbc error message</font>

548
00:20:20,299 --> 00:20:23,660
back that tells me<font color="#E5E5E5"> there's probably a</font>

549
00:20:22,070 --> 00:20:25,520
sequel injection vulnerability here and

550
00:20:23,660 --> 00:20:27,260
that you know typically produces results

551
00:20:25,520 --> 00:20:28,730
or for our purposes produces results

552
00:20:27,260 --> 00:20:30,860
it's basically the vulnerability type

553
00:20:28,730 --> 00:20:32,929
the relative URL in the application and

554
00:20:30,860 --> 00:20:34,219
that entry point what parameter for

555
00:20:32,929 --> 00:20:35,390
certain classes<font color="#E5E5E5"> vulnerability is like a</font>

556
00:20:34,220 --> 00:20:37,610
sequel injection or cross-site scripting

557
00:20:35,390 --> 00:20:40,280
what parameter was passed into<font color="#E5E5E5"> the</font>

558
00:20:37,610 --> 00:20:43,610
application you know that resulted<font color="#CCCCCC"> in</font>

559
00:20:40,280 --> 00:20:45,320
this this response<font color="#E5E5E5"> coming back you know</font>

560
00:20:43,610 --> 00:20:46,549
<font color="#E5E5E5">looking at static application security</font>

561
00:20:45,320 --> 00:20:48,350
testing again you're<font color="#E5E5E5"> going to take the</font>

562
00:20:46,549 --> 00:20:50,210
<font color="#E5E5E5">source or the binary do some analysis on</font>

563
00:20:48,350 --> 00:20:52,459
<font color="#E5E5E5">that to create a model and then</font><font color="#CCCCCC"> pour</font>

564
00:20:50,210 --> 00:20:54,380
perform additional analysis in order to

565
00:20:52,460 --> 00:20:55,760
identify potential weaknesses and

566
00:20:54,380 --> 00:20:57,860
vulnerabilities and so you're going<font color="#CCCCCC"> to</font>

567
00:20:55,760 --> 00:20:59,210
do things like data flow<font color="#E5E5E5"> analysis you</font>

568
00:20:57,860 --> 00:21:01,340
know here where we see we've got<font color="#E5E5E5"> this</font>

569
00:20:59,210 --> 00:21:02,990
request I'd get parameter called that's

570
00:21:01,340 --> 00:21:04,820
going to<font color="#E5E5E5"> return a tainted input that</font>

571
00:21:02,990 --> 00:21:06,730
gets assigned to the user name variable

572
00:21:04,820 --> 00:21:09,230
which is<font color="#E5E5E5"> also then considered tainted</font>

573
00:21:06,730 --> 00:21:11,780
the user name variable along<font color="#CCCCCC"> with some</font>

574
00:21:09,230 --> 00:21:13,760
static text gets a pendant together and

575
00:21:11,780 --> 00:21:15,649
assigned to the sequel variable and then

576
00:21:13,760 --> 00:21:17,600
that tainted sequel variable gets passed

577
00:21:15,650 --> 00:21:19,039
into the sensitive function which is

578
00:21:17,600 --> 00:21:21,949
<font color="#CCCCCC">executed again they're kind of a classic</font>

579
00:21:19,039 --> 00:21:24,860
<font color="#CCCCCC">example of a of a data flow analysis to</font>

580
00:21:21,950 --> 00:21:26,480
find<font color="#E5E5E5"> a sequel injection vulnerability so</font>

581
00:21:24,860 --> 00:21:28,158
what we wanted to do with hybrid

582
00:21:26,480 --> 00:21:30,289
analysis mapping is to<font color="#CCCCCC"> figure out how do</font>

583
00:21:28,159 --> 00:21:31,850
we take these results from different

584
00:21:30,289 --> 00:21:34,850
types<font color="#E5E5E5"> of testing and identify where</font>

585
00:21:31,850 --> 00:21:35,809
their overlap situations so first thing

586
00:21:34,850 --> 00:21:37,908
we need to do is standardized on

587
00:21:35,809 --> 00:21:40,190
vulnerability types we settled on the

588
00:21:37,909 --> 00:21:42,650
<font color="#CCCCCC">mitre common weakness enumeration or cwe</font>

589
00:21:40,190 --> 00:21:45,260
as I like<font color="#E5E5E5"> to tell</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> folks at mitre who</font>

590
00:21:42,650 --> 00:21:48,049
maintain the cwe the CW<font color="#CCCCCC"> is the worst</font>

591
00:21:45,260 --> 00:21:49,640
vulnerability taxonomy available except

592
00:21:48,049 --> 00:21:52,700
for all the other ones right<font color="#CCCCCC"> is it is</font>

593
00:21:49,640 --> 00:21:53,990
the democracy of vulnerability<font color="#E5E5E5"> you know</font>

594
00:21:52,700 --> 00:21:56,120
taxonomy and it actually works really

595
00:21:53,990 --> 00:21:58,460
<font color="#CCCCCC">well for</font><font color="#E5E5E5"> our purposes and a lot of the</font>

596
00:21:56,120 --> 00:22:01,219
tool vendors have mappings back to cwe

597
00:21:58,460 --> 00:22:02,840
and so this<font color="#CCCCCC"> is a case where i think</font><font color="#E5E5E5"> we</font>

598
00:22:01,220 --> 00:22:05,210
<font color="#E5E5E5">could say you know standards or the</font>

599
00:22:02,840 --> 00:22:06,678
attempt to create standards has been has

600
00:22:05,210 --> 00:22:08,870
<font color="#CCCCCC">been very successful releases helped us</font>

601
00:22:06,679 --> 00:22:10,730
a lot along our way then we<font color="#E5E5E5"> need to</font>

602
00:22:08,870 --> 00:22:14,299
<font color="#E5E5E5">match the static and dynamic locations</font>

603
00:22:10,730 --> 00:22:18,530
how do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> know if</font><font color="#CCCCCC"> i have</font><font color="#E5E5E5"> a code in a</font>

604
00:22:14,299 --> 00:22:20,539
given file how do<font color="#E5E5E5"> i know where that code</font>

605
00:22:18,530 --> 00:22:22,100
is going to get attached to<font color="#E5E5E5"> the</font>

606
00:22:20,539 --> 00:22:25,460
application attack service so i want<font color="#E5E5E5"> to</font>

607
00:22:22,100 --> 00:22:27,260
send an HTTP request to a URL how do<font color="#CCCCCC"> i</font>

608
00:22:25,460 --> 00:22:28,480
pick that URL so that that means a

609
00:22:27,260 --> 00:22:31,270
certain piece of code is going

610
00:22:28,480 --> 00:22:33,400
run and similarly if I'm passing in a

611
00:22:31,270 --> 00:22:35,830
parameter how do I know where<font color="#CCCCCC"> that</font>

612
00:22:33,400 --> 00:22:38,260
parameter that I send in my dynamic web

613
00:22:35,830 --> 00:22:40,899
<font color="#CCCCCC">request how do I know or how do I find</font>

614
00:22:38,260 --> 00:22:43,120
where that enters the application source

615
00:22:40,900 --> 00:22:44,620
code to execute and so in certain

616
00:22:43,120 --> 00:22:46,449
environments and you know in certain

617
00:22:44,620 --> 00:22:48,969
languages and frameworks if you think of

618
00:22:46,450 --> 00:22:51,250
like a raw PHP environment like that's

619
00:22:48,970 --> 00:22:53,440
fairly easy to<font color="#E5E5E5"> do that correlation write</font>

620
00:22:51,250 --> 00:22:56,110
the file structure matches the URL

621
00:22:53,440 --> 00:22:58,809
structure great that's a that's fairly

622
00:22:56,110 --> 00:23:00,010
easy in other environments like if you

623
00:22:58,809 --> 00:23:02,230
think<font color="#CCCCCC"> about like a Java spring</font>

624
00:23:00,010 --> 00:23:05,169
environment or struts or asp.net

625
00:23:02,230 --> 00:23:06,250
webforms there's a translation that

626
00:23:05,169 --> 00:23:09,400
occurs according to different

627
00:23:06,250 --> 00:23:12,630
conventions of like hey if you if you

628
00:23:09,400 --> 00:23:14,919
send a request to this URL on the

629
00:23:12,630 --> 00:23:16,540
<font color="#CCCCCC">application this is the code that's</font>

630
00:23:14,919 --> 00:23:19,080
actually going to run<font color="#CCCCCC"> and the file name</font>

631
00:23:16,540 --> 00:23:23,409
where that's located is you know totally

632
00:23:19,080 --> 00:23:25,960
not not associated with<font color="#E5E5E5"> the with</font><font color="#CCCCCC"> the you</font>

633
00:23:23,410 --> 00:23:27,460
know naming in the URL similar thing

634
00:23:25,960 --> 00:23:29,380
with the<font color="#CCCCCC"> parameter parsing if</font><font color="#E5E5E5"> I pass in</font>

635
00:23:27,460 --> 00:23:31,660
this parameter where does this actually

636
00:23:29,380 --> 00:23:34,090
get picked up<font color="#E5E5E5"> in the application and so</font>

637
00:23:31,660 --> 00:23:36,850
what we do is we consume the source code

638
00:23:34,090 --> 00:23:38,500
and you know detective language and

639
00:23:36,850 --> 00:23:40,389
framework and we build this endpoint

640
00:23:38,500 --> 00:23:43,299
database so what we essentially do we

641
00:23:40,390 --> 00:23:45,280
built the engine detects the language in

642
00:23:43,299 --> 00:23:47,530
the framework and then builds mappings

643
00:23:45,280 --> 00:23:49,690
where it says here<font color="#CCCCCC"> are all the</font><font color="#E5E5E5"> URLs that</font>

644
00:23:47,530 --> 00:23:51,250
the<font color="#E5E5E5"> application will respond to and all</font>

645
00:23:49,690 --> 00:23:54,100
the parameters that can be passed in and

646
00:23:51,250 --> 00:23:56,440
here is the source code entry point that

647
00:23:54,100 --> 00:24:00,280
is responsible for<font color="#E5E5E5"> that behavior in the</font>

648
00:23:56,440 --> 00:24:01,750
system<font color="#CCCCCC"> so to merge static and dynamic</font>

649
00:24:00,280 --> 00:24:03,340
results<font color="#E5E5E5"> do you basically say oh I've got</font>

650
00:24:01,750 --> 00:24:05,830
a dynamic result I've got a reflected

651
00:24:03,340 --> 00:24:08,199
cross-site scripting at the URL login

652
00:24:05,830 --> 00:24:09,850
JSP for the user name parameter I can

653
00:24:08,200 --> 00:24:11,740
query that database and it says well

654
00:24:09,850 --> 00:24:12,909
this is a<font color="#E5E5E5"> java spring application this</font>

655
00:24:11,740 --> 00:24:14,740
is it comment whatever doubt whatever

656
00:24:12,910 --> 00:24:16,870
that login controller dot<font color="#CCCCCC"> Java line 62</font>

657
00:24:14,740 --> 00:24:18,070
then if I go<font color="#CCCCCC"> and look at my static</font>

658
00:24:16,870 --> 00:24:19,389
results and I have a reflected

659
00:24:18,070 --> 00:24:21,040
cross-site scripting vulnerability that

660
00:24:19,390 --> 00:24:23,559
enters that application and logging

661
00:24:21,040 --> 00:24:25,178
controller dot Java line 62 I can say I

662
00:24:23,559 --> 00:24:27,129
believe this<font color="#CCCCCC"> is a match I believe I have</font>

663
00:24:25,179 --> 00:24:29,200
two<font color="#CCCCCC"> pieces of</font><font color="#E5E5E5"> evidence about one</font>

664
00:24:27,130 --> 00:24:31,030
vulnerability one static piece one

665
00:24:29,200 --> 00:24:32,700
dynamic piece as opposed to treating

666
00:24:31,030 --> 00:24:37,030
that as two different vulnerabilities

667
00:24:32,700 --> 00:24:38,919
magic and so what we found was we<font color="#E5E5E5"> can do</font>

668
00:24:37,030 --> 00:24:40,629
some other interesting things with<font color="#CCCCCC"> that</font>

669
00:24:38,919 --> 00:24:42,300
again we were we built this to solve a

670
00:24:40,630 --> 00:24:44,320
specific problem

671
00:24:42,300 --> 00:24:45,550
you know in our discussion around the

672
00:24:44,320 --> 00:24:47,110
table I talked<font color="#CCCCCC"> to one of</font><font color="#E5E5E5"> the engineers</font>

673
00:24:45,550 --> 00:24:48,940
it was working on<font color="#E5E5E5"> I said well it sounds</font>

674
00:24:47,110 --> 00:24:52,000
like you can we just do a different

675
00:24:48,940 --> 00:24:54,120
query on this data because<font color="#E5E5E5"> it could you</font>

676
00:24:52,000 --> 00:24:56,680
know<font color="#E5E5E5"> can I for example do a select star</font>

677
00:24:54,120 --> 00:24:58,540
equivalent on that data set and that

678
00:24:56,680 --> 00:24:59,740
would<font color="#CCCCCC"> give me all the URLs and all the</font>

679
00:24:58,540 --> 00:25:02,040
associated parameters that the

680
00:24:59,740 --> 00:25:03,970
application could you will respond to

681
00:25:02,040 --> 00:25:05,860
regardless of whether<font color="#E5E5E5"> or not there are</font>

682
00:25:03,970 --> 00:25:07,330
vulnerabilities associated with those

683
00:25:05,860 --> 00:25:09,070
points in the attack surface and

684
00:25:07,330 --> 00:25:11,379
engineer looked at and said yeah we can

685
00:25:09,070 --> 00:25:13,540
we can<font color="#E5E5E5"> certainly do that we can also do</font>

686
00:25:11,380 --> 00:25:16,660
some interesting things where if you've

687
00:25:13,540 --> 00:25:19,270
done dynamic testing but you haven't

688
00:25:16,660 --> 00:25:21,580
<font color="#CCCCCC">done static analysis you can still query</font>

689
00:25:19,270 --> 00:25:23,110
that data structure and get the entry

690
00:25:21,580 --> 00:25:24,909
point in the source<font color="#E5E5E5"> code and so that's</font>

691
00:25:23,110 --> 00:25:27,129
something<font color="#E5E5E5"> like in an IDE for example</font>

692
00:25:24,910 --> 00:25:29,980
that we<font color="#E5E5E5"> could map where we would say hey</font>

693
00:25:27,130 --> 00:25:32,140
I've only done dynamic testing give me

694
00:25:29,980 --> 00:25:33,850
the URL on the parameter and I'll show

695
00:25:32,140 --> 00:25:35,770
you<font color="#E5E5E5"> where to start looking in the source</font>

696
00:25:33,850 --> 00:25:37,360
code<font color="#CCCCCC"> if you want to fix this</font>

697
00:25:35,770 --> 00:25:38,950
vulnerability it's not as good as having

698
00:25:37,360 --> 00:25:41,469
I<font color="#E5E5E5"> mean a</font><font color="#CCCCCC"> lot of the static analysis</font>

699
00:25:38,950 --> 00:25:42,550
<font color="#E5E5E5">tools have really good</font><font color="#CCCCCC"> IDE plugins and</font>

700
00:25:41,470 --> 00:25:44,230
you can go<font color="#E5E5E5"> and click through the full</font>

701
00:25:42,550 --> 00:25:47,080
data flow and watch<font color="#CCCCCC"> its and step through</font>

702
00:25:44,230 --> 00:25:49,090
the you know the<font color="#E5E5E5"> whole</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> you know the</font>

703
00:25:47,080 --> 00:25:51,220
<font color="#E5E5E5">whole data or a control flow so it's not</font>

704
00:25:49,090 --> 00:25:52,780
as good as that but it's better<font color="#CCCCCC"> than</font>

705
00:25:51,220 --> 00:25:55,090
saying well hey here's the request<font color="#E5E5E5"> and</font>

706
00:25:52,780 --> 00:25:56,500
response developer go figure<font color="#E5E5E5"> out where</font>

707
00:25:55,090 --> 00:25:57,520
they say it's your you know go figure

708
00:25:56,500 --> 00:25:59,050
out<font color="#E5E5E5"> where this actually hits your</font>

709
00:25:57,520 --> 00:26:00,520
application and so there's some

710
00:25:59,050 --> 00:26:02,919
<font color="#E5E5E5">interesting things that we've that we</font>

711
00:26:00,520 --> 00:26:05,110
found<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> could do with this and</font>

712
00:26:02,920 --> 00:26:08,110
<font color="#E5E5E5">come the first example that will that</font>

713
00:26:05,110 --> 00:26:09,550
will look at is<font color="#CCCCCC"> scanner</font><font color="#E5E5E5"> seating again</font>

714
00:26:08,110 --> 00:26:12,100
one<font color="#CCCCCC"> of the challenges with dynamic</font>

715
00:26:09,550 --> 00:26:14,350
testing is you don't<font color="#CCCCCC"> necessarily like</font>

716
00:26:12,100 --> 00:26:16,270
you start out not knowing anything about

717
00:26:14,350 --> 00:26:17,530
the application attack surface you say

718
00:26:16,270 --> 00:26:19,000
well<font color="#E5E5E5"> here's the first page in</font><font color="#CCCCCC"> the</font>

719
00:26:17,530 --> 00:26:21,310
application and again maybe you've

720
00:26:19,000 --> 00:26:23,380
trained the scanner to login so that you

721
00:26:21,310 --> 00:26:25,240
can see both you know pages that require

722
00:26:23,380 --> 00:26:27,820
authentication as well as pages that

723
00:26:25,240 --> 00:26:29,260
don't require authentication well with

724
00:26:27,820 --> 00:26:31,600
this data structure<font color="#CCCCCC"> that we've</font><font color="#E5E5E5"> built</font>

725
00:26:29,260 --> 00:26:33,670
we've got in theory a list of all the

726
00:26:31,600 --> 00:26:35,080
<font color="#E5E5E5">URLs that the application</font><font color="#CCCCCC"> will respond</font>

727
00:26:33,670 --> 00:26:37,420
to all the parameters that can change

728
00:26:35,080 --> 00:26:40,090
the behavior of the application and so<font color="#E5E5E5"> I</font>

729
00:26:37,420 --> 00:26:42,880
can take that and feed that to the

730
00:26:40,090 --> 00:26:44,620
<font color="#CCCCCC">dynamic scanner and that lets me then</font>

731
00:26:42,880 --> 00:26:48,250
know about the application attack

732
00:26:44,620 --> 00:26:53,199
surface you know<font color="#CCCCCC"> before we you know</font>

733
00:26:48,250 --> 00:26:54,490
<font color="#E5E5E5">before we even begin that process we'll</font>

734
00:26:53,200 --> 00:26:55,800
talk we'll talk more about<font color="#E5E5E5"> this and I'll</font>

735
00:26:54,490 --> 00:26:59,170
demo this injustice

736
00:26:55,800 --> 00:27:01,870
so just kind of some final thoughts were

737
00:26:59,170 --> 00:27:03,280
working with the DHS SBIR program that

738
00:27:01,870 --> 00:27:04,540
it again I think it's something's been

739
00:27:03,280 --> 00:27:07,090
very interesting for<font color="#E5E5E5"> us it's allowed us</font>

740
00:27:04,540 --> 00:27:08,409
to develop some neat technologies and if

741
00:27:07,090 --> 00:27:10,209
folks have questions about that<font color="#E5E5E5"> I'm</font>

742
00:27:08,410 --> 00:27:11,860
certainly not an expert on it but again

743
00:27:10,210 --> 00:27:12,880
we've been in the program for two two

744
00:27:11,860 --> 00:27:14,560
and a half years if anybody has

745
00:27:12,880 --> 00:27:17,890
questions<font color="#E5E5E5"> about that I'm happy as a side</font>

746
00:27:14,560 --> 00:27:20,860
thing to answer any of that all the

747
00:27:17,890 --> 00:27:22,270
plugins that were talking about again

748
00:27:20,860 --> 00:27:24,399
you can<font color="#E5E5E5"> download from the link that I</font>

749
00:27:22,270 --> 00:27:26,590
provided or also if you go and build the

750
00:27:24,400 --> 00:27:29,200
thread<font color="#CCCCCC"> fix community edition from github</font>

751
00:27:26,590 --> 00:27:31,629
you can we've got a download link that

752
00:27:29,200 --> 00:27:33,100
you can just pull those tools down and

753
00:27:31,630 --> 00:27:34,840
<font color="#CCCCCC">here's some instructions again for later</font>

754
00:27:33,100 --> 00:27:35,830
<font color="#CCCCCC">on if you want to install</font><font color="#E5E5E5"> the SAP</font><font color="#CCCCCC"> plugin</font>

755
00:27:34,840 --> 00:27:39,189
to look at the stuff that we're doing

756
00:27:35,830 --> 00:27:41,679
and so from this attack surface

757
00:27:39,190 --> 00:27:44,380
enumeration we're<font color="#E5E5E5"> going to find is all</font>

758
00:27:41,680 --> 00:27:45,940
of the<font color="#E5E5E5"> URLs all the parameters that are</font>

759
00:27:44,380 --> 00:27:47,590
going<font color="#E5E5E5"> to change the application behavior</font>

760
00:27:45,940 --> 00:27:49,450
and we're working enhancing the system

761
00:27:47,590 --> 00:27:50,980
right<font color="#CCCCCC"> now to add you know searching for</font>

762
00:27:49,450 --> 00:27:52,980
cookies HTTP headers other points of

763
00:27:50,980 --> 00:27:55,030
attack service so why<font color="#E5E5E5"> is this a problem</font>

764
00:27:52,980 --> 00:27:57,250
it's a problem because a lot of times

765
00:27:55,030 --> 00:27:58,870
you've got a dynamic testing engine that

766
00:27:57,250 --> 00:28:00,850
has to guess<font color="#E5E5E5"> at the application attack</font>

767
00:27:58,870 --> 00:28:03,250
surface there may be things like hidden

768
00:28:00,850 --> 00:28:04,959
landing pages that link back into the

769
00:28:03,250 --> 00:28:07,090
application as a whole but where you

770
00:28:04,960 --> 00:28:08,440
<font color="#CCCCCC">would never if</font><font color="#E5E5E5"> you started at the home</font>

771
00:28:07,090 --> 00:28:10,179
page you would never link out to that

772
00:28:08,440 --> 00:28:12,100
part<font color="#E5E5E5"> of the application you can also</font>

773
00:28:10,180 --> 00:28:13,510
have multi-step processes where the

774
00:28:12,100 --> 00:28:14,800
scanner for whatever reason doesn't

775
00:28:13,510 --> 00:28:17,350
manage to get its way through the

776
00:28:14,800 --> 00:28:20,710
<font color="#E5E5E5">workflow you may also have unknown</font>

777
00:28:17,350 --> 00:28:22,870
parameters or debug parameters I worked

778
00:28:20,710 --> 00:28:24,910
I worked on an application a<font color="#CCCCCC"> coldfusion</font>

779
00:28:22,870 --> 00:28:26,409
application a while back and for any

780
00:28:24,910 --> 00:28:29,770
page in the application if you would

781
00:28:26,410 --> 00:28:32,530
pass in a parameter named d it would

782
00:28:29,770 --> 00:28:35,550
delete the order that had the idea of

783
00:28:32,530 --> 00:28:40,120
whatever the value of that parameter was

784
00:28:35,550 --> 00:28:41,260
why not you know<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know and so</font>

785
00:28:40,120 --> 00:28:42,939
again<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think this</font><font color="#CCCCCC"> is something</font>

786
00:28:41,260 --> 00:28:44,710
malicious I think is a<font color="#CCCCCC"> little tool that</font>

787
00:28:42,940 --> 00:28:46,420
like a handy tool that the developer

788
00:28:44,710 --> 00:28:48,730
included that somehow got cut<font color="#E5E5E5"> and pasted</font>

789
00:28:46,420 --> 00:28:50,680
into every page in<font color="#CCCCCC"> the every part of</font><font color="#E5E5E5"> the</font>

790
00:28:48,730 --> 00:28:53,770
application but those are<font color="#E5E5E5"> the types of</font>

791
00:28:50,680 --> 00:28:55,030
<font color="#E5E5E5">things that you find you know that again</font>

792
00:28:53,770 --> 00:28:56,200
unless you're<font color="#E5E5E5"> the developer that wrote</font>

793
00:28:55,030 --> 00:28:58,149
it and was thinking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it if you're</font>

794
00:28:56,200 --> 00:28:59,740
handed if you have code handed over to

795
00:28:58,150 --> 00:29:01,720
you those are<font color="#CCCCCC"> the types of</font><font color="#E5E5E5"> things that</font>

796
00:28:59,740 --> 00:29:02,980
<font color="#E5E5E5">you probably won't know anything about</font>

797
00:29:01,720 --> 00:29:04,450
and that a<font color="#E5E5E5"> scanner is never going to</font>

798
00:29:02,980 --> 00:29:06,550
find that because it's never<font color="#E5E5E5"> going to</font>

799
00:29:04,450 --> 00:29:08,890
see a reference to that parameter name

800
00:29:06,550 --> 00:29:10,300
d in any of the HTML<font color="#E5E5E5"> or the JavaScript</font>

801
00:29:08,890 --> 00:29:13,150
or that you know the traffic you get

802
00:29:10,300 --> 00:29:14,830
from<font color="#E5E5E5"> exercise in the application you</font>

803
00:29:13,150 --> 00:29:16,930
know<font color="#E5E5E5"> this is also really useful if you</font>

804
00:29:14,830 --> 00:29:19,720
have mobile applications that are being

805
00:29:16,930 --> 00:29:21,880
backed by your rest services and<font color="#CCCCCC"> things</font>

806
00:29:19,720 --> 00:29:24,160
like that because you can enumerate

807
00:29:21,880 --> 00:29:26,260
those and<font color="#E5E5E5"> then you know at least you</font>

808
00:29:24,160 --> 00:29:27,910
know from a dynamic standpoint what we

809
00:29:26,260 --> 00:29:31,540
would typically do to identify rest

810
00:29:27,910 --> 00:29:33,460
endpoints is we would you know take the

811
00:29:31,540 --> 00:29:35,680
mobile application<font color="#CCCCCC"> feed it through like</font>

812
00:29:33,460 --> 00:29:37,000
a burr po or zap you know out to the

813
00:29:35,680 --> 00:29:38,770
rest<font color="#E5E5E5"> services that we</font><font color="#CCCCCC"> can watch</font><font color="#E5E5E5"> the</font>

814
00:29:37,000 --> 00:29:41,680
traffic that<font color="#E5E5E5"> goes through that's going</font>

815
00:29:38,770 --> 00:29:44,350
to show us you know some subset maybe

816
00:29:41,680 --> 00:29:46,270
all of the<font color="#E5E5E5"> rest api's but if you have</font>

817
00:29:44,350 --> 00:29:48,280
the ground truth<font color="#CCCCCC"> if here's all the api's</font>

818
00:29:46,270 --> 00:29:50,170
that are actually exposed that gives you

819
00:29:48,280 --> 00:29:51,820
additional information where you may

820
00:29:50,170 --> 00:29:53,500
have you may find<font color="#CCCCCC"> situations where</font>

821
00:29:51,820 --> 00:29:56,409
there's functionality expose out in

822
00:29:53,500 --> 00:29:57,910
these rest<font color="#CCCCCC"> api's that you you know that</font>

823
00:29:56,410 --> 00:29:59,530
again you would not have discovered

824
00:29:57,910 --> 00:30:00,910
because it's not intended<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> there</font>

825
00:29:59,530 --> 00:30:03,010
somebody forgot about<font color="#E5E5E5"> it or whatever</font>

826
00:30:00,910 --> 00:30:05,350
else<font color="#CCCCCC"> that might be and so the benefits</font>

827
00:30:03,010 --> 00:30:08,440
of using this attack surface data as a

828
00:30:05,350 --> 00:30:12,219
starting point for either automated

829
00:30:08,440 --> 00:30:13,450
scanning or pen testing is that you're

830
00:30:12,220 --> 00:30:14,530
going<font color="#E5E5E5"> to reduce false negatives from</font>

831
00:30:13,450 --> 00:30:16,810
scanners because you're<font color="#E5E5E5"> going to get</font>

832
00:30:14,530 --> 00:30:18,910
better coverage of the application for

833
00:30:16,810 --> 00:30:21,580
your standard fuzzing and similarly<font color="#CCCCCC"> for</font>

834
00:30:18,910 --> 00:30:23,470
manual pen testers this gives them<font color="#E5E5E5"> a lot</font>

835
00:30:21,580 --> 00:30:25,990
<font color="#CCCCCC">of information that</font><font color="#E5E5E5"> they can</font><font color="#CCCCCC"> use to go</font>

836
00:30:23,470 --> 00:30:28,330
in ask questions and understand more

837
00:30:25,990 --> 00:30:29,740
about the application<font color="#E5E5E5"> and again identify</font>

838
00:30:28,330 --> 00:30:32,169
situations where there may be things

839
00:30:29,740 --> 00:30:35,620
expose that you wouldn't find through

840
00:30:32,170 --> 00:30:40,360
your standard dynamic of enumeration

841
00:30:35,620 --> 00:30:42,250
methods so we've got a command line

842
00:30:40,360 --> 00:30:44,320
client that basically you point it at

843
00:30:42,250 --> 00:30:45,790
source code it<font color="#E5E5E5"> calculates this attack</font>

844
00:30:44,320 --> 00:30:47,830
surface and then just dumps it out to

845
00:30:45,790 --> 00:30:49,120
the command line so we've got some

846
00:30:47,830 --> 00:30:55,540
instructions on that here<font color="#E5E5E5"> and we can</font>

847
00:30:49,120 --> 00:30:57,129
show<font color="#E5E5E5"> you what that looks like in just a</font>

848
00:30:55,540 --> 00:31:00,670
couple<font color="#E5E5E5"> minutes I have to do post talk</font>

849
00:30:57,130 --> 00:31:01,870
stuff I shudder to think what else<font color="#E5E5E5"> is</font>

850
00:31:00,670 --> 00:31:06,960
going to pop up while we're doing<font color="#E5E5E5"> these</font>

851
00:31:01,870 --> 00:31:06,959
demos there we go

852
00:31:10,010 --> 00:31:18,060
<font color="#E5E5E5">we go a little bit bigger okay this</font>

853
00:31:16,440 --> 00:31:20,840
resolution<font color="#CCCCCC"> is really doing me a lot of</font>

854
00:31:18,060 --> 00:31:20,840
demo favors here

855
00:31:28,700 --> 00:31:35,210
okay so you basically run this and point

856
00:31:31,220 --> 00:31:38,780
it at no point in<font color="#CCCCCC"> a source code base and</font>

857
00:31:35,210 --> 00:31:40,010
thread fix detects that<font color="#E5E5E5"> texting language</font>

858
00:31:38,780 --> 00:31:42,470
<font color="#E5E5E5">in the framework and dump stuff out and</font>

859
00:31:40,010 --> 00:31:45,680
<font color="#E5E5E5">so what we see</font><font color="#CCCCCC"> here looking at this you</font>

860
00:31:42,470 --> 00:31:48,500
know<font color="#E5E5E5"> ASP web forms application we have</font>

861
00:31:45,680 --> 00:31:50,630
the very cleverly named a hidden

862
00:31:48,500 --> 00:31:52,880
directory and hidden launch page right

863
00:31:50,630 --> 00:31:54,830
that you would not find<font color="#E5E5E5"> you know during</font>

864
00:31:52,880 --> 00:31:57,200
normal crawl because there's no links

865
00:31:54,830 --> 00:32:00,530
out to that but by having access to that

866
00:31:57,200 --> 00:32:01,850
information again we know you know hey

867
00:32:00,530 --> 00:32:03,260
<font color="#CCCCCC">this is something this is something we</font>

868
00:32:01,850 --> 00:32:04,699
need<font color="#CCCCCC"> to navigate to if we're doing</font>

869
00:32:03,260 --> 00:32:06,110
dynamic<font color="#E5E5E5"> testing we want to you know hit</font>

870
00:32:04,700 --> 00:32:08,090
that page does look like that doesn't

871
00:32:06,110 --> 00:32:09,260
<font color="#CCCCCC">look</font><font color="#E5E5E5"> like there's any parameters so we</font>

872
00:32:08,090 --> 00:32:11,149
<font color="#E5E5E5">maybe there's not</font><font color="#CCCCCC"> a lot there</font><font color="#E5E5E5"> to fuzz</font>

873
00:32:09,260 --> 00:32:12,410
but from<font color="#E5E5E5"> a manual pen testing standpoint</font>

874
00:32:11,150 --> 00:32:15,860
I've got a question but what exactly is

875
00:32:12,410 --> 00:32:20,120
<font color="#E5E5E5">that page they're doing about and as you</font>

876
00:32:15,860 --> 00:32:22,370
saw like that ran pretty fast just<font color="#E5E5E5"> to</font>

877
00:32:20,120 --> 00:32:24,530
give you an<font color="#E5E5E5"> idea of to compare this</font>

878
00:32:22,370 --> 00:32:27,709
attack surface calculation to a standard

879
00:32:24,530 --> 00:32:29,030
static analysis<font color="#E5E5E5"> let's run this complains</font>

880
00:32:27,710 --> 00:32:31,610
about the<font color="#E5E5E5"> get directory there we go and</font>

881
00:32:29,030 --> 00:32:33,379
so<font color="#E5E5E5"> that was</font><font color="#CCCCCC"> just running we just ran the</font>

882
00:32:31,610 --> 00:32:37,340
attack surface calculation against the

883
00:32:33,380 --> 00:32:40,130
thread fix code base which is 107,000

884
00:32:37,340 --> 00:32:42,770
lines of code and so what we're doing is

885
00:32:40,130 --> 00:32:44,540
like a like a tokenized parsing we're

886
00:32:42,770 --> 00:32:45,980
not doing full data flow analysis

887
00:32:44,540 --> 00:32:48,379
control flow analysis or anything like

888
00:32:45,980 --> 00:32:49,910
that<font color="#CCCCCC"> so it's much faster you know the</font>

889
00:32:48,380 --> 00:32:52,190
obvious downside of that is because

890
00:32:49,910 --> 00:32:54,290
we're<font color="#E5E5E5"> not doing you know full data flow</font>

891
00:32:52,190 --> 00:32:55,310
or control flow analysis or not finding

892
00:32:54,290 --> 00:32:56,600
those types of you know the

893
00:32:55,310 --> 00:32:58,580
vulnerabilities you would identify from

894
00:32:56,600 --> 00:33:00,889
that but again from up from a speed

895
00:32:58,580 --> 00:33:02,179
standpoint that the technology is able

896
00:33:00,890 --> 00:33:09,440
to chew through the stuff pretty uh

897
00:33:02,180 --> 00:33:11,360
truth is<font color="#E5E5E5"> this stuff pretty quickly so</font>

898
00:33:09,440 --> 00:33:15,080
<font color="#CCCCCC">what we've also done is we've built</font>

899
00:33:11,360 --> 00:33:18,770
plugins for zap and burp and also apps

900
00:33:15,080 --> 00:33:19,820
can that I think may or may not should

901
00:33:18,770 --> 00:33:25,790
be<font color="#CCCCCC"> available soon</font><font color="#E5E5E5"> it's not already</font>

902
00:33:19,820 --> 00:33:27,379
released but so we can go in and let's

903
00:33:25,790 --> 00:33:33,250
say<font color="#E5E5E5"> that we're</font><font color="#CCCCCC"> looking at this budget</font>

904
00:33:27,380 --> 00:33:37,790
store with the<font color="#E5E5E5"> plug-in we can go and say</font>

905
00:33:33,250 --> 00:33:40,060
tools import from source i'm<font color="#E5E5E5"> going to</font>

906
00:33:37,790 --> 00:33:41,530
import the source code for budget

907
00:33:40,060 --> 00:33:44,250
i'm<font color="#E5E5E5"> going to point it at the running</font>

908
00:33:41,530 --> 00:33:44,250
<font color="#E5E5E5">version of the application</font>

909
00:33:46,250 --> 00:33:49,400
[Music]

910
00:33:53,929 --> 00:34:02,419
and you can clearly<font color="#CCCCCC"> see from the</font>

911
00:33:59,830 --> 00:34:06,980
voluminous screen real estate<font color="#E5E5E5"> I have</font>

912
00:34:02,419 --> 00:34:09,980
here but so<font color="#E5E5E5"> just to show here what you</font>

913
00:34:06,980 --> 00:34:12,530
can<font color="#E5E5E5"> see is so we identified by</font>

914
00:34:09,980 --> 00:34:14,690
<font color="#E5E5E5">proceeding the scan we found this Edmond</font>

915
00:34:12,530 --> 00:34:16,550
that JSP page that you would<font color="#E5E5E5"> not have</font>

916
00:34:14,690 --> 00:34:18,770
found otherwise if<font color="#CCCCCC"> you hadn't been</font>

917
00:34:16,550 --> 00:34:20,540
logged in as an administrator all right

918
00:34:18,770 --> 00:34:22,219
and again if you look at<font color="#E5E5E5"> the application</font>

919
00:34:20,540 --> 00:34:24,139
what you find is that at you know that

920
00:34:22,219 --> 00:34:25,549
particular page you can get to without

921
00:34:24,139 --> 00:34:27,589
being authenticated which you probably

922
00:34:25,550 --> 00:34:29,859
shouldn't be able<font color="#E5E5E5"> to do what</font><font color="#CCCCCC"> you also</font>

923
00:34:27,589 --> 00:34:33,020
<font color="#E5E5E5">find is that a</font><font color="#CCCCCC"> number of these pages</font>

924
00:34:29,859 --> 00:34:34,699
will accept this parameter name debug

925
00:34:33,020 --> 00:34:36,319
what does<font color="#E5E5E5"> that do I don't know but as a</font>

926
00:34:34,699 --> 00:34:38,210
manual pen tester that's certainly

927
00:34:36,319 --> 00:34:40,099
really<font color="#E5E5E5"> interesting to me and it's also</font>

928
00:34:38,210 --> 00:34:41,990
probably something I'd<font color="#CCCCCC"> like</font><font color="#E5E5E5"> to fuzz you</font>

929
00:34:40,099 --> 00:34:43,389
know just in case it touches a sequel

930
00:34:41,989 --> 00:34:47,598
database or something like that<font color="#CCCCCC"> right</font>

931
00:34:43,389 --> 00:34:49,250
<font color="#CCCCCC">and so by proceeding this scan with the</font>

932
00:34:47,599 --> 00:34:51,440
knowledge that we<font color="#CCCCCC"> have the applications</font>

933
00:34:49,250 --> 00:34:54,109
attack surface that lets us get a much

934
00:34:51,440 --> 00:34:57,349
more<font color="#CCCCCC"> thorough coverage when testing the</font>

935
00:34:54,109 --> 00:34:59,000
application and<font color="#E5E5E5"> it gives us if we're</font>

936
00:34:57,349 --> 00:35:01,430
<font color="#E5E5E5">doing manual penetration testing it</font>

937
00:34:59,000 --> 00:35:03,200
gives us the ability to it gives us you

938
00:35:01,430 --> 00:35:04,220
know additional insight<font color="#CCCCCC"> the things</font><font color="#E5E5E5"> that</font>

939
00:35:03,200 --> 00:35:19,040
may be interesting that we want to<font color="#CCCCCC"> look</font>

940
00:35:04,220 --> 00:35:22,220
<font color="#E5E5E5">at so there we go what we can also do is</font>

941
00:35:19,040 --> 00:35:25,339
start to use visualization to look at

942
00:35:22,220 --> 00:35:28,399
these<font color="#E5E5E5"> things so we can start to look at</font>

943
00:35:25,339 --> 00:35:29,509
what you know for a given application we

944
00:35:28,400 --> 00:35:31,880
can start to look at what are the

945
00:35:29,510 --> 00:35:32,930
<font color="#E5E5E5">different pages that are exposed what</font>

946
00:35:31,880 --> 00:35:35,780
are the different parameters that

947
00:35:32,930 --> 00:35:37,220
exposed you know for a simple

948
00:35:35,780 --> 00:35:40,910
application like budget or for a much

949
00:35:37,220 --> 00:35:42,078
larger application like thread fix where

950
00:35:40,910 --> 00:35:45,589
<font color="#E5E5E5">again here we're enumerate all the</font>

951
00:35:42,079 --> 00:35:48,530
different attack surface and we can also

952
00:35:45,589 --> 00:35:51,650
start<font color="#CCCCCC"> to look at how this attack surface</font>

953
00:35:48,530 --> 00:35:53,150
changes over time so i can<font color="#E5E5E5"> take version</font>

954
00:35:51,650 --> 00:35:56,150
<font color="#CCCCCC">1 of</font><font color="#E5E5E5"> the application calculate the</font>

955
00:35:53,150 --> 00:35:57,380
attack surface then you wait a while go

956
00:35:56,150 --> 00:35:58,910
to version two of the application

957
00:35:57,380 --> 00:36:01,869
calculated that attack surface we<font color="#CCCCCC"> can</font>

958
00:35:58,910 --> 00:36:05,000
see how that evolves over time and that

959
00:36:01,869 --> 00:36:07,809
lets us<font color="#E5E5E5"> start to do some some additional</font>

960
00:36:05,000 --> 00:36:07,809
interesting stuff

961
00:36:12,720 --> 00:36:23,709
there we go because what we can do if we

962
00:36:19,690 --> 00:36:26,650
have if we have<font color="#E5E5E5"> a TAC surface that we've</font>

963
00:36:23,710 --> 00:36:29,950
looked at you<font color="#CCCCCC"> know multiple</font><font color="#E5E5E5"> points over</font>

964
00:36:26,650 --> 00:36:32,080
time we<font color="#CCCCCC"> can run dips of that and start</font>

965
00:36:29,950 --> 00:36:34,180
to understand hey between this commit

966
00:36:32,080 --> 00:36:36,009
and the application<font color="#CCCCCC"> and this next</font>

967
00:36:34,180 --> 00:36:37,899
committed in the application here's how

968
00:36:36,010 --> 00:36:40,720
that attack surface has changed<font color="#E5E5E5"> and so</font>

969
00:36:37,900 --> 00:36:43,000
from a from a fuzz testing or an

970
00:36:40,720 --> 00:36:44,799
automation testing standpoint if you're

971
00:36:43,000 --> 00:36:47,200
looking<font color="#E5E5E5"> at well we did you know the last</font>

972
00:36:44,800 --> 00:36:48,850
time that we did a test was here we just

973
00:36:47,200 --> 00:36:51,189
<font color="#E5E5E5">checked in a bunch more code here's what</font>

974
00:36:48,850 --> 00:36:52,870
are<font color="#E5E5E5"> you know head commit is here let's</font>

975
00:36:51,190 --> 00:36:55,180
do a diff between the last time this

976
00:36:52,870 --> 00:36:58,180
Jenkins job ran and the current time

977
00:36:55,180 --> 00:36:59,980
<font color="#E5E5E5">where the where the state of the git</font>

978
00:36:58,180 --> 00:37:03,370
repository is and that'll let us

979
00:36:59,980 --> 00:37:05,530
identify here are the new you<font color="#CCCCCC"> know here</font>

980
00:37:03,370 --> 00:37:07,600
<font color="#CCCCCC">are the new pages that have been exposed</font>

981
00:37:05,530 --> 00:37:11,080
or new parameters that have been<font color="#E5E5E5"> exposed</font>

982
00:37:07,600 --> 00:37:12,490
as well and<font color="#E5E5E5"> again that may let me what i</font>

983
00:37:11,080 --> 00:37:14,860
<font color="#CCCCCC">can do is i can feed that data to</font>

984
00:37:12,490 --> 00:37:17,350
something like zap and tells app i only

985
00:37:14,860 --> 00:37:19,450
want you<font color="#E5E5E5"> to do automated</font><font color="#CCCCCC"> testing against</font>

986
00:37:17,350 --> 00:37:21,819
this part of the application because

987
00:37:19,450 --> 00:37:23,169
that's<font color="#E5E5E5"> going to get our runtime down to</font>

988
00:37:21,820 --> 00:37:26,050
something that is potentially much more

989
00:37:23,170 --> 00:37:29,170
manageable you know similarly if you're

990
00:37:26,050 --> 00:37:31,750
looking at tracking manual testing over

991
00:37:29,170 --> 00:37:34,180
time you<font color="#E5E5E5"> know you can understand the</font>

992
00:37:31,750 --> 00:37:36,460
<font color="#E5E5E5">last time that we did manual testing of</font>

993
00:37:34,180 --> 00:37:38,470
this application was at this<font color="#E5E5E5"> point in</font>

994
00:37:36,460 --> 00:37:40,480
the codes evolution now we're at this

995
00:37:38,470 --> 00:37:42,250
commit show me all the new stuff that

996
00:37:40,480 --> 00:37:44,560
<font color="#CCCCCC">has shown up or show me things that</font><font color="#E5E5E5"> have</font>

997
00:37:42,250 --> 00:37:47,830
gone away<font color="#E5E5E5"> since the last time we did</font>

998
00:37:44,560 --> 00:37:49,900
this testing and based on that let's

999
00:37:47,830 --> 00:37:51,279
focus our manual testing efforts on the

1000
00:37:49,900 --> 00:37:52,600
parts of<font color="#E5E5E5"> the application that haven't</font>

1001
00:37:51,280 --> 00:37:55,750
been subject to that type of inspection

1002
00:37:52,600 --> 00:37:59,200
yet again the concern here<font color="#CCCCCC"> is I have a</font>

1003
00:37:55,750 --> 00:38:02,170
limited yeah I have a limited run time

1004
00:37:59,200 --> 00:38:04,569
that<font color="#CCCCCC"> I'm allowed to you know</font><font color="#E5E5E5"> where i can</font>

1005
00:38:02,170 --> 00:38:06,850
<font color="#E5E5E5">insert myself into that build process</font>

1006
00:38:04,570 --> 00:38:09,010
you know so<font color="#CCCCCC"> i have to keep my tool run</font>

1007
00:38:06,850 --> 00:38:10,839
<font color="#CCCCCC">times down to this much if i want to</font>

1008
00:38:09,010 --> 00:38:13,090
<font color="#E5E5E5">have these synchronous testing tasks</font>

1009
00:38:10,840 --> 00:38:15,670
where i can weigh in on passing or

1010
00:38:13,090 --> 00:38:18,130
failing a build or similarly we've got a

1011
00:38:15,670 --> 00:38:19,970
manual testing program but we for

1012
00:38:18,130 --> 00:38:21,380
whatever reason in this current job

1013
00:38:19,970 --> 00:38:23,720
we don't have<font color="#CCCCCC"> all the testers that we</font>

1014
00:38:21,380 --> 00:38:24,740
want you<font color="#E5E5E5"> know we've got a couple job</font><font color="#CCCCCC"> rex</font>

1015
00:38:23,720 --> 00:38:26,810
often because we don't have<font color="#CCCCCC"> enough</font>

1016
00:38:24,740 --> 00:38:29,149
<font color="#CCCCCC">capacity to this testing let me make</font>

1017
00:38:26,810 --> 00:38:31,580
sure I'm focusing those testers on where

1018
00:38:29,150 --> 00:38:32,750
they are most likely<font color="#CCCCCC"> to find a new and</font>

1019
00:38:31,580 --> 00:38:35,990
serious vulnerabilities that have been

1020
00:38:32,750 --> 00:38:39,040
introduced to the system what we<font color="#CCCCCC"> can</font>

1021
00:38:35,990 --> 00:38:50,000
<font color="#E5E5E5">also do is start to pull together</font>

1022
00:38:39,040 --> 00:38:52,359
metrics one<font color="#CCCCCC"> moment where we can start to</font>

1023
00:38:50,000 --> 00:38:55,580
look and make<font color="#CCCCCC"> decisions where we say</font>

1024
00:38:52,359 --> 00:38:57,890
let's see what let's<font color="#E5E5E5"> see what episode</font>

1025
00:38:55,580 --> 00:38:59,299
let's look at where we<font color="#CCCCCC"> were before in</font>

1026
00:38:57,890 --> 00:39:01,640
the size of the attack surface and where

1027
00:38:59,300 --> 00:39:04,070
we<font color="#CCCCCC"> are now and we</font><font color="#E5E5E5"> can set</font><font color="#CCCCCC"> up a policy</font>

1028
00:39:01,640 --> 00:39:06,470
that says once<font color="#E5E5E5"> the attack surface is</font>

1029
00:39:04,070 --> 00:39:09,020
changed by five percent or ten percent

1030
00:39:06,470 --> 00:39:12,109
or once the attack surface is grown by

1031
00:39:09,020 --> 00:39:14,210
<font color="#CCCCCC">twenty URLs or fifteen parameters or</font>

1032
00:39:12,109 --> 00:39:16,580
whatever<font color="#CCCCCC"> that might be you can start to</font>

1033
00:39:14,210 --> 00:39:18,290
put thresholds in there to say at this

1034
00:39:16,580 --> 00:39:20,660
point we believe the application has

1035
00:39:18,290 --> 00:39:23,060
changed enough from the<font color="#E5E5E5"> last time that</font>

1036
00:39:20,660 --> 00:39:25,040
we did a full static analysis or the

1037
00:39:23,060 --> 00:39:26,359
last<font color="#E5E5E5"> time we did a full dynamic analysis</font>

1038
00:39:25,040 --> 00:39:29,089
or the last time we had a thorough

1039
00:39:26,359 --> 00:39:31,609
manual test you can<font color="#CCCCCC"> start</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> those</font>

1040
00:39:29,089 --> 00:39:33,380
to set thresholds<font color="#CCCCCC"> to trigger events</font>

1041
00:39:31,609 --> 00:39:35,119
where you would initiate those longer

1042
00:39:33,380 --> 00:39:37,490
running activities so that you can

1043
00:39:35,119 --> 00:39:39,200
essentially true up again as you're in

1044
00:39:37,490 --> 00:39:41,209
it because as you go<font color="#E5E5E5"> over time you the</font>

1045
00:39:39,200 --> 00:39:43,399
level or the quality of your<font color="#E5E5E5"> security</font>

1046
00:39:41,210 --> 00:39:44,839
inside is going to change if you've only

1047
00:39:43,400 --> 00:39:47,000
been doing<font color="#E5E5E5"> scanning of stuff when it</font>

1048
00:39:44,839 --> 00:39:49,040
<font color="#E5E5E5">showed</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> when it was new parts of the</font>

1049
00:39:47,000 --> 00:39:50,330
attack surface you need two dead reckon

1050
00:39:49,040 --> 00:39:51,619
where you're at by essentially going

1051
00:39:50,330 --> 00:39:54,770
<font color="#E5E5E5">back and saying let's redo these</font>

1052
00:39:51,619 --> 00:39:57,200
activities and again by being<font color="#CCCCCC"> able to</font>

1053
00:39:54,770 --> 00:39:59,240
calculate the you know again either on a

1054
00:39:57,200 --> 00:40:02,270
percentage or on a raw URL or parameter

1055
00:39:59,240 --> 00:40:03,560
basis this lets you then negotiate and

1056
00:40:02,270 --> 00:40:05,960
look at your budget of here the

1057
00:40:03,560 --> 00:40:07,790
resources that we have let's determine

1058
00:40:05,960 --> 00:40:09,560
what thresholds we want to set so that

1059
00:40:07,790 --> 00:40:11,240
we can balance between the available

1060
00:40:09,560 --> 00:40:12,710
resources that we have<font color="#E5E5E5"> and we can spread</font>

1061
00:40:11,240 --> 00:40:16,149
<font color="#E5E5E5">those across the</font><font color="#CCCCCC"> portfolio of</font>

1062
00:40:12,710 --> 00:40:16,150
applications that<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> trying to secure</font>

1063
00:40:25,780 --> 00:40:29,900
<font color="#E5E5E5">okay so and I've talked about a lot of</font>

1064
00:40:28,069 --> 00:40:31,790
this stuff but<font color="#CCCCCC"> again this lets you</font>

1065
00:40:29,900 --> 00:40:34,250
target your desk testing to limit your

1066
00:40:31,790 --> 00:40:35,630
<font color="#CCCCCC">runtimes let you set potentially set</font>

1067
00:40:34,250 --> 00:40:37,780
thresholds for when you need to<font color="#E5E5E5"> do</font>

1068
00:40:35,630 --> 00:40:39,980
manual assessments penetration testing

1069
00:40:37,780 --> 00:40:41,210
you know and also some one of the things

1070
00:40:39,980 --> 00:40:42,950
we're playing around with is you know

1071
00:40:41,210 --> 00:40:45,349
<font color="#E5E5E5">basically gluing this into slack and</font>

1072
00:40:42,950 --> 00:40:47,450
<font color="#CCCCCC">hipchat so that when developers make</font>

1073
00:40:45,349 --> 00:40:48,829
commits that introduce new attack

1074
00:40:47,450 --> 00:40:50,509
surface<font color="#CCCCCC"> that's something the team is</font>

1075
00:40:48,829 --> 00:40:52,400
made aware<font color="#CCCCCC"> of what we want to do is</font>

1076
00:40:50,510 --> 00:40:54,589
provide that situational awareness to

1077
00:40:52,400 --> 00:40:57,020
the team so that<font color="#E5E5E5"> they understand how</font><font color="#CCCCCC"> the</font>

1078
00:40:54,589 --> 00:40:59,690
application<font color="#CCCCCC"> is evolving over time as new</font>

1079
00:40:57,020 --> 00:41:02,300
URLs show up as a yo-yo is as<font color="#CCCCCC"> URLs maybe</font>

1080
00:40:59,690 --> 00:41:04,490
retire to rename that provides some

1081
00:41:02,300 --> 00:41:07,809
insight to the<font color="#E5E5E5"> development team so they</font>

1082
00:41:04,490 --> 00:41:12,649
can watch that as it evolves over time

1083
00:41:07,809 --> 00:41:14,660
and I<font color="#CCCCCC"> think I didn't see it</font><font color="#E5E5E5"> we've got a</font>

1084
00:41:12,650 --> 00:41:16,339
there's another github repository that

1085
00:41:14,660 --> 00:41:18,799
has all the code<font color="#CCCCCC"> that we used to</font>

1086
00:41:16,339 --> 00:41:21,140
generate those models and whatnot<font color="#E5E5E5"> I'll</font>

1087
00:41:18,800 --> 00:41:22,670
include those I didn't see it<font color="#E5E5E5"> I don't</font>

1088
00:41:21,140 --> 00:41:24,319
remember<font color="#E5E5E5"> seeing it so if it's not there</font>

1089
00:41:22,670 --> 00:41:25,490
I'll make sure that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> in there but</font>

1090
00:41:24,319 --> 00:41:27,230
this is something that we're you know

1091
00:41:25,490 --> 00:41:28,759
kind of actively working on with a

1092
00:41:27,230 --> 00:41:31,069
number<font color="#E5E5E5"> of different organizations and so</font>

1093
00:41:28,760 --> 00:41:33,349
right now we're expanding the model the

1094
00:41:31,069 --> 00:41:35,960
application attack surface right now we

1095
00:41:33,349 --> 00:41:37,369
look at parameters and HTTP verbs in the

1096
00:41:35,960 --> 00:41:41,089
<font color="#E5E5E5">future we're going to be working on HTTP</font>

1097
00:41:37,369 --> 00:41:44,240
headers and we also are introducing the

1098
00:41:41,089 --> 00:41:47,210
concept of authentication requirement

1099
00:41:44,240 --> 00:41:49,279
and as well<font color="#E5E5E5"> as authorization</font>

1100
00:41:47,210 --> 00:41:50,690
requirements for different URLs so

1101
00:41:49,280 --> 00:41:52,579
essentially with that model you'll have

1102
00:41:50,690 --> 00:41:53,540
a lens to be able<font color="#E5E5E5"> to say okay well I've</font>

1103
00:41:52,579 --> 00:41:56,089
got 100 cross-site scripting

1104
00:41:53,540 --> 00:41:57,680
vulnerabilities show me which of those

1105
00:41:56,089 --> 00:41:59,839
are and can be accessed by an

1106
00:41:57,680 --> 00:42:03,379
unauthenticated user and which ones can

1107
00:41:59,839 --> 00:42:06,140
only be accessed by a unauthenticated or

1108
00:42:03,380 --> 00:42:07,549
an authenticated user again to allow

1109
00:42:06,140 --> 00:42:09,440
folks to take this data they're getting

1110
00:42:07,549 --> 00:42:11,900
out<font color="#E5E5E5"> of their testing programs and to</font>

1111
00:42:09,440 --> 00:42:13,750
focus<font color="#E5E5E5"> in more on things that matter I'm</font>

1112
00:42:11,900 --> 00:42:16,069
probably concerned more about

1113
00:42:13,750 --> 00:42:18,220
unauthenticated sequel injections than<font color="#E5E5E5"> I</font>

1114
00:42:16,069 --> 00:42:20,779
am about authenticated sequel injections

1115
00:42:18,220 --> 00:42:23,270
also better visualization I'm not<font color="#E5E5E5"> a</font>

1116
00:42:20,780 --> 00:42:24,950
visualization guy but I learned enough

1117
00:42:23,270 --> 00:42:27,109
d3.js to crap together some

1118
00:42:24,950 --> 00:42:29,450
visualizations so that's something I

1119
00:42:27,109 --> 00:42:31,308
<font color="#CCCCCC">think we're again that's to</font><font color="#E5E5E5"> provide that</font>

1120
00:42:29,450 --> 00:42:33,589
situational awareness both to

1121
00:42:31,309 --> 00:42:35,569
development teams as well as two testers

1122
00:42:33,589 --> 00:42:37,790
so that they can see the evolution over

1123
00:42:35,569 --> 00:42:39,500
time as you know has

1124
00:42:37,790 --> 00:42:41,930
<font color="#E5E5E5">patient's you know get new URLs get new</font>

1125
00:42:39,500 --> 00:42:43,670
parameters as things go away you know

1126
00:42:41,930 --> 00:42:45,589
that's helpful for folks as they're

1127
00:42:43,670 --> 00:42:47,090
trying<font color="#E5E5E5"> to again understand a little bit</font>

1128
00:42:45,590 --> 00:42:48,560
more<font color="#E5E5E5"> about their application but also</font>

1129
00:42:47,090 --> 00:42:50,540
for people<font color="#CCCCCC"> that are doing testing to</font><font color="#E5E5E5"> be</font>

1130
00:42:48,560 --> 00:42:52,250
able<font color="#E5E5E5"> to understand more about the</font>

1131
00:42:50,540 --> 00:42:54,200
applications that<font color="#E5E5E5"> they can focus their</font>

1132
00:42:52,250 --> 00:42:55,700
time and resources accordingly yeah so

1133
00:42:54,200 --> 00:42:57,259
the questions about false positives how

1134
00:42:55,700 --> 00:42:59,629
do we deal with false positives like the

1135
00:42:57,260 --> 00:43:01,970
<font color="#E5E5E5">challenge is that we're on if you think</font>

1136
00:42:59,630 --> 00:43:03,680
of like<font color="#CCCCCC"> sophisticated analysis by that i</font>

1137
00:43:01,970 --> 00:43:06,589
mean like full data flow across meth and

1138
00:43:03,680 --> 00:43:08,120
control flow analysis like we're on<font color="#E5E5E5"> the</font>

1139
00:43:06,590 --> 00:43:10,190
receiving end of just like whatever the

1140
00:43:08,120 --> 00:43:11,450
tool you know<font color="#CCCCCC"> biet fortifier check marks</font>

1141
00:43:10,190 --> 00:43:13,880
or ver code or whatever<font color="#E5E5E5"> like we're just</font>

1142
00:43:11,450 --> 00:43:16,220
is a receiving end of that and so what

1143
00:43:13,880 --> 00:43:18,440
we have seen folks use just from a data

1144
00:43:16,220 --> 00:43:21,230
management standpoint is to look and

1145
00:43:18,440 --> 00:43:22,220
potentially prioritize vulnerabilities

1146
00:43:21,230 --> 00:43:24,740
that have been I that have been

1147
00:43:22,220 --> 00:43:27,350
correlated first to say hey we believe

1148
00:43:24,740 --> 00:43:28,970
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a like yeah we have two pieces</font>

1149
00:43:27,350 --> 00:43:30,470
<font color="#CCCCCC">of evidence both the dynamic scanner and</font>

1150
00:43:28,970 --> 00:43:32,240
the static scanner found this therefore

1151
00:43:30,470 --> 00:43:34,730
<font color="#CCCCCC">I believe this</font><font color="#E5E5E5"> is less likely to be</font><font color="#CCCCCC"> a</font>

1152
00:43:32,240 --> 00:43:35,959
false positive you know and more serious

1153
00:43:34,730 --> 00:43:37,370
that we need<font color="#E5E5E5"> to respond to whereas the</font>

1154
00:43:35,960 --> 00:43:38,420
other stuff we have less confidence in

1155
00:43:37,370 --> 00:43:40,819
that that's one way I've seen

1156
00:43:38,420 --> 00:43:43,400
organizations use the data also another

1157
00:43:40,820 --> 00:43:45,470
thing I'll say about getting these the

1158
00:43:43,400 --> 00:43:48,320
testing integrated into the<font color="#E5E5E5"> sea</font><font color="#CCCCCC"> icd</font>

1159
00:43:45,470 --> 00:43:51,020
pipeline you know you've false sending

1160
00:43:48,320 --> 00:43:53,090
false positives to developers is a very

1161
00:43:51,020 --> 00:43:56,060
bad<font color="#CCCCCC"> thing right</font><font color="#E5E5E5"> because it you know</font><font color="#CCCCCC"> like</font>

1162
00:43:53,090 --> 00:43:58,040
you have so much credibility you have X

1163
00:43:56,060 --> 00:43:59,900
amount of credibility and every<font color="#E5E5E5"> time</font><font color="#CCCCCC"> you</font>

1164
00:43:58,040 --> 00:44:01,640
send a false positive over you chip away

1165
00:43:59,900 --> 00:44:03,680
at that or hack away at that depending

1166
00:44:01,640 --> 00:44:05,330
on the<font color="#E5E5E5"> organization and so one of the</font>

1167
00:44:03,680 --> 00:44:06,799
things that<font color="#E5E5E5"> we've seen if you want to</font>

1168
00:44:05,330 --> 00:44:09,049
start integrating security testing into

1169
00:44:06,800 --> 00:44:12,290
the DevOps pipeline you've got to tune

1170
00:44:09,050 --> 00:44:13,820
the tools so that you're focused on so

1171
00:44:12,290 --> 00:44:14,960
the tools with the rule sets they're

1172
00:44:13,820 --> 00:44:17,810
using and<font color="#CCCCCC"> the configuration are</font>

1173
00:44:14,960 --> 00:44:19,970
identifying the high likelihood high

1174
00:44:17,810 --> 00:44:22,100
impact vulnerabilities and there's also

1175
00:44:19,970 --> 00:44:25,009
typically I I see it as like an

1176
00:44:22,100 --> 00:44:26,630
onboarding process of let's run the

1177
00:44:25,010 --> 00:44:28,610
initial scans with whatever tools were

1178
00:44:26,630 --> 00:44:30,020
using with the application call out all

1179
00:44:28,610 --> 00:44:32,180
the false positives that gives us a

1180
00:44:30,020 --> 00:44:34,730
clean set of data to start with and the

1181
00:44:32,180 --> 00:44:37,190
hope is that we that that<font color="#E5E5E5"> gives you more</font>

1182
00:44:34,730 --> 00:44:38,510
confidence<font color="#E5E5E5"> in the incremental runs if</font>

1183
00:44:37,190 --> 00:44:39,890
you're going<font color="#E5E5E5"> to be like</font><font color="#CCCCCC"> Auto creating</font>

1184
00:44:38,510 --> 00:44:41,180
bugs and things based on those<font color="#CCCCCC"> you've at</font>

1185
00:44:39,890 --> 00:44:43,490
least<font color="#E5E5E5"> got a clean data set that you're</font>

1186
00:44:41,180 --> 00:44:44,690
<font color="#E5E5E5">starting</font><font color="#CCCCCC"> from cool well thank</font><font color="#E5E5E5"> you very</font>

1187
00:44:43,490 --> 00:44:47,189
<font color="#E5E5E5">much and I'll be around if anybody has</font>

1188
00:44:44,690 --> 00:44:51,380
questions so yes

1189
00:44:47,190 --> 00:44:51,380
so thank you<font color="#CCCCCC"> Dan pretty much</font>

