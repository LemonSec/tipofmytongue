1
00:00:02,990 --> 00:00:18,989
[Music]

2
00:00:19,330 --> 00:00:30,860
[Applause]

3
00:00:22,570 --> 00:00:34,750
so good question<font color="#CCCCCC"> at how many of you</font>

4
00:00:30,860 --> 00:00:38,750
folks are familiar with what's Parker's

5
00:00:34,750 --> 00:00:45,940
anybody use it on a<font color="#E5E5E5"> day-to-day basis yes</font>

6
00:00:38,750 --> 00:00:52,700
no<font color="#E5E5E5"> okay okay just wanted to get a sense</font>

7
00:00:45,940 --> 00:00:55,400
okay so who are we I am a magic

8
00:00:52,700 --> 00:00:57,500
consultant at envision on my I apologize

9
00:00:55,400 --> 00:01:03,050
<font color="#CCCCCC">for those Cowboys fans out there I'm a</font>

10
00:00:57,500 --> 00:01:04,759
lifelong Redskins fan<font color="#CCCCCC"> jet us CEO and is</font>

11
00:01:03,050 --> 00:01:06,979
<font color="#E5E5E5">iam do a</font><font color="#CCCCCC"> decent amount</font><font color="#E5E5E5"> of scale</font>

12
00:01:04,759 --> 00:01:08,380
development as you'll notice today all

13
00:01:06,979 --> 00:01:16,490
the examples are going to be in Scala

14
00:01:08,380 --> 00:01:20,330
really big skeleton so so um what is

15
00:01:16,490 --> 00:01:22,850
spark spark is a<font color="#E5E5E5"> open-source</font>

16
00:01:20,330 --> 00:01:26,509
<font color="#E5E5E5">general-purpose cluster computing</font>

17
00:01:22,850 --> 00:01:28,970
framework spark was developed at UC

18
00:01:26,509 --> 00:01:31,429
<font color="#E5E5E5">Berkeley's amp labs and was later</font>

19
00:01:28,970 --> 00:01:35,590
donated to the apache software

20
00:01:31,429 --> 00:01:40,069
foundation and<font color="#E5E5E5"> I believe in 2014 it was</font>

21
00:01:35,590 --> 00:01:42,350
named a top tier Apache<font color="#E5E5E5"> project so at a</font>

22
00:01:40,069 --> 00:01:45,170
very high level what a spark do well so

23
00:01:42,350 --> 00:01:48,860
if you<font color="#CCCCCC"> think</font><font color="#E5E5E5"> of it this way um spark</font>

24
00:01:45,170 --> 00:01:52,970
pulls in data from various various

25
00:01:48,860 --> 00:01:55,039
sources these imposing these data sets

26
00:01:52,970 --> 00:01:56,869
now once the data sets are within spark

27
00:01:55,039 --> 00:02:00,470
it changes them into what's called

28
00:01:56,869 --> 00:02:03,470
resilient distributed data set or<font color="#E5E5E5"> rdd</font>

29
00:02:00,470 --> 00:02:06,170
for short you can give spark

30
00:02:03,470 --> 00:02:08,630
instructions on what manipulations need

31
00:02:06,170 --> 00:02:10,250
to be<font color="#E5E5E5"> performed on this data sets spark</font>

32
00:02:08,630 --> 00:02:12,459
takes those instructions performs the

33
00:02:10,250 --> 00:02:14,599
manipulations and spits out the results

34
00:02:12,459 --> 00:02:19,550
<font color="#E5E5E5">now how many of you</font><font color="#CCCCCC"> are familiar with</font>

35
00:02:14,599 --> 00:02:23,489
had MapReduce yes somewhat<font color="#E5E5E5"> okay so spark</font>

36
00:02:19,550 --> 00:02:25,740
is similar to have you accept

37
00:02:23,490 --> 00:02:30,450
has significant advantages in the form

38
00:02:25,740 --> 00:02:34,830
of speed the reason is spark performs

39
00:02:30,450 --> 00:02:38,070
its functions in memory in line

40
00:02:34,830 --> 00:02:42,840
<font color="#CCCCCC">streaming</font><font color="#E5E5E5"> versus hadoo which has to read</font>

41
00:02:38,070 --> 00:02:46,010
on<font color="#E5E5E5"> disk batch processing to give you an</font>

42
00:02:42,840 --> 00:02:48,870
example if<font color="#E5E5E5"> had it leads to perform a</font>

43
00:02:46,010 --> 00:02:51,170
multi-step computation on something it

44
00:02:48,870 --> 00:02:53,880
needs to read<font color="#E5E5E5"> data from the cluster</font>

45
00:02:51,170 --> 00:02:55,799
forms a function right to back the<font color="#E5E5E5"> disk</font>

46
00:02:53,880 --> 00:02:58,859
that reads it again performs a function

47
00:02:55,800 --> 00:03:03,210
right to back to disk sparkman wall can

48
00:02:58,860 --> 00:03:04,920
do all of that all at once and spit it

49
00:03:03,210 --> 00:03:07,020
out so<font color="#E5E5E5"> you can kind of see that there's</font>

50
00:03:04,920 --> 00:03:10,290
definitely significant speed<font color="#CCCCCC"> of speed</font>

51
00:03:07,020 --> 00:03:12,990
advantage what's spark really quickly so

52
00:03:10,290 --> 00:03:15,120
that diagram at the bottom it shows the

53
00:03:12,990 --> 00:03:16,200
core components<font color="#CCCCCC"> of smart we're going</font><font color="#E5E5E5"> to</font>

54
00:03:15,120 --> 00:03:18,960
go over a couple of<font color="#E5E5E5"> these in the</font>

55
00:03:16,200 --> 00:03:21,269
presentation some of the things to kind

56
00:03:18,960 --> 00:03:22,760
of take away for the<font color="#E5E5E5"> API depending on</font>

57
00:03:21,270 --> 00:03:25,230
which version of<font color="#E5E5E5"> the API you're using</font>

58
00:03:22,760 --> 00:03:29,280
you know<font color="#E5E5E5"> you'll be able to</font><font color="#CCCCCC"> use our</font>

59
00:03:25,230 --> 00:03:31,019
sequel<font color="#CCCCCC"> python scholar or java on the top</font>

60
00:03:29,280 --> 00:03:32,960
right there's emblem which is the

61
00:03:31,020 --> 00:03:35,340
machine<font color="#E5E5E5"> learning library as well as</font>

62
00:03:32,960 --> 00:03:37,980
graphics I don't think when we<font color="#CCCCCC"> talk</font>

63
00:03:35,340 --> 00:03:44,250
about graphics and<font color="#E5E5E5"> I look too much just</font>

64
00:03:37,980 --> 00:03:48,690
working<font color="#E5E5E5"> out in there so why do people</font>

65
00:03:44,250 --> 00:03:52,560
use spark well uber is a huge consumer

66
00:03:48,690 --> 00:03:56,760
of spark uber uses spark to solve solve

67
00:03:52,560 --> 00:03:58,140
problems near<font color="#E5E5E5"> real time so and I know</font>

68
00:03:56,760 --> 00:04:02,540
this is going to be a<font color="#E5E5E5"> really unpopular</font>

69
00:03:58,140 --> 00:04:06,690
example uber use a spark to be able<font color="#E5E5E5"> to</font>

70
00:04:02,540 --> 00:04:09,350
optimize their pricing so they can

71
00:04:06,690 --> 00:04:13,920
adequately implement surge pricing

72
00:04:09,350 --> 00:04:17,909
<font color="#E5E5E5">apologize</font><font color="#CCCCCC"> on they also use it for being</font>

73
00:04:13,920 --> 00:04:19,649
<font color="#E5E5E5">able to optimize the location of their</font>

74
00:04:17,910 --> 00:04:22,920
drivers so say for instance they

75
00:04:19,649 --> 00:04:24,479
determine that<font color="#E5E5E5"> there needs to be a</font>

76
00:04:22,920 --> 00:04:26,970
redirection of drivers to a specific

77
00:04:24,480 --> 00:04:30,240
area during a time of day<font color="#CCCCCC"> then a</font><font color="#E5E5E5"> given</font>

78
00:04:26,970 --> 00:04:31,860
<font color="#E5E5E5">City for XYZ reasons that you spark to</font>

79
00:04:30,240 --> 00:04:33,509
be able<font color="#E5E5E5"> to compute that type of and from</font>

80
00:04:31,860 --> 00:04:36,030
<font color="#CCCCCC">Nation and give that intelligence the</font>

81
00:04:33,509 --> 00:04:38,219
drivers they also use it for being<font color="#E5E5E5"> able</font>

82
00:04:36,030 --> 00:04:41,878
<font color="#E5E5E5">to process client payroll and from a</font>

83
00:04:38,219 --> 00:04:43,409
client / purchasing information to be

84
00:04:41,879 --> 00:04:45,389
<font color="#CCCCCC">able to compute those huge amount of</font>

85
00:04:43,409 --> 00:04:48,050
data to be able to pay out their drivers

86
00:04:45,389 --> 00:04:52,379
on payroll pretty much the very next day

87
00:04:48,050 --> 00:04:54,120
there is a link of youtube talk on

88
00:04:52,379 --> 00:04:55,830
there's it's really fascinating if

89
00:04:54,120 --> 00:04:58,860
anybody has time<font color="#E5E5E5"> I highly recommend</font>

90
00:04:55,830 --> 00:05:01,979
<font color="#E5E5E5">watching it so let's talk a little bit</font>

91
00:04:58,860 --> 00:05:03,840
about<font color="#E5E5E5"> health care spark really seems</font>

92
00:05:01,979 --> 00:05:05,400
like<font color="#CCCCCC"> a natural fit for</font><font color="#E5E5E5"> health care so</font>

93
00:05:03,840 --> 00:05:07,919
right now there's<font color="#CCCCCC"> healthcare providers</font>

94
00:05:05,400 --> 00:05:11,400
out there that are using spark to be

95
00:05:07,919 --> 00:05:14,878
able to ingest historical medical

96
00:05:11,400 --> 00:05:17,128
information about their<font color="#E5E5E5"> customers their</font>

97
00:05:14,879 --> 00:05:20,039
then able to apply intelligence to that

98
00:05:17,129 --> 00:05:22,860
and determine if there's anything odd

99
00:05:20,039 --> 00:05:25,909
happening such as insurance fraud or

100
00:05:22,860 --> 00:05:30,870
anything along those lines furthermore

101
00:05:25,909 --> 00:05:38,190
IBM is a<font color="#E5E5E5"> huge huge contributor to spark</font>

102
00:05:30,870 --> 00:05:40,560
so IBM open source there what's the name

103
00:05:38,190 --> 00:05:43,560
of the library again since the memo

104
00:05:40,560 --> 00:05:45,810
system<font color="#E5E5E5"> ml which is their machine</font>

105
00:05:43,560 --> 00:05:49,229
learning library to be able<font color="#E5E5E5"> to use with</font>

106
00:05:45,810 --> 00:05:53,210
Hadoop and spark in addition<font color="#E5E5E5"> to that a</font>

107
00:05:49,229 --> 00:05:55,650
spark is being used in the IBM Watson's

108
00:05:53,210 --> 00:05:58,289
health cloud<font color="#E5E5E5"> as anybody familiar with</font>

109
00:05:55,650 --> 00:06:00,060
what the health cloud is at all I mean

110
00:05:58,289 --> 00:06:03,270
it's it's huge right i mean the health

111
00:06:00,060 --> 00:06:04,319
cloud is used by everybody it can be

112
00:06:03,270 --> 00:06:07,169
used by anybody in the health industry

113
00:06:04,319 --> 00:06:09,120
from providers to doctors<font color="#CCCCCC"> and</font>

114
00:06:07,169 --> 00:06:11,430
technicians it's pretty pretty awesome

115
00:06:09,120 --> 00:06:13,500
stuff in<font color="#CCCCCC"> addition</font><font color="#E5E5E5"> to that they're also</font>

116
00:06:11,430 --> 00:06:16,469
using they're also investing heavily in

117
00:06:13,500 --> 00:06:18,779
their people so training<font color="#E5E5E5"> them up on</font>

118
00:06:16,469 --> 00:06:21,509
being able<font color="#E5E5E5"> to develop a spark</font>

119
00:06:18,779 --> 00:06:25,379
applications and offer spark as a

120
00:06:21,509 --> 00:06:27,810
service<font color="#CCCCCC"> to their clients so so in</font>

121
00:06:25,379 --> 00:06:32,009
addition the last couple examples are

122
00:06:27,810 --> 00:06:35,120
like<font color="#E5E5E5"> Netflix and open table Netflix an</font>

123
00:06:32,009 --> 00:06:38,669
open table are able to take in your

124
00:06:35,120 --> 00:06:41,250
typical usage information compare that

125
00:06:38,669 --> 00:06:43,380
against you know<font color="#CCCCCC"> their the millions of</font>

126
00:06:41,250 --> 00:06:46,530
clients and be able<font color="#CCCCCC"> to</font>

127
00:06:43,380 --> 00:06:49,800
<font color="#CCCCCC">suggests restaurants and open tables</font>

128
00:06:46,530 --> 00:06:52,229
case based upon similarities and where

129
00:06:49,800 --> 00:06:54,030
you visited same thing with<font color="#CCCCCC"> Netflix</font>

130
00:06:52,230 --> 00:06:55,890
they're able to recommend you know

131
00:06:54,030 --> 00:06:59,010
movies<font color="#E5E5E5"> or TV shows based upon your</font>

132
00:06:55,890 --> 00:07:00,960
preferences cross-references against the

133
00:06:59,010 --> 00:07:08,300
other<font color="#E5E5E5"> users that</font><font color="#CCCCCC"> they are taking a look</font>

134
00:07:00,960 --> 00:07:12,150
at so real world<font color="#E5E5E5"> SPARC architecture here</font>

135
00:07:08,300 --> 00:07:16,350
so when<font color="#E5E5E5"> you're architecting a spark</font>

136
00:07:12,150 --> 00:07:17,909
application spark on itself is not able

137
00:07:16,350 --> 00:07:21,300
to<font color="#E5E5E5"> do a significant amount it's really</font>

138
00:07:17,910 --> 00:07:24,300
reliant upon the entire Apache ecosphere

139
00:07:21,300 --> 00:07:26,430
so in this diagram you can see Kafka and

140
00:07:24,300 --> 00:07:27,690
you can see Cassandra there's a whole

141
00:07:26,430 --> 00:07:29,460
<font color="#E5E5E5">bunch of other stuff that just</font>

142
00:07:27,690 --> 00:07:33,000
completely<font color="#CCCCCC"> out of scope of this</font>

143
00:07:29,460 --> 00:07:34,409
presentation when you're architecting

144
00:07:33,000 --> 00:07:36,090
your application you really have to be

145
00:07:34,410 --> 00:07:38,670
<font color="#CCCCCC">careful and</font><font color="#E5E5E5"> take a look at and consider</font>

146
00:07:36,090 --> 00:07:40,200
from a security perspective what the

147
00:07:38,670 --> 00:07:42,150
<font color="#E5E5E5">security posture of all these</font><font color="#CCCCCC"> components</font>

148
00:07:40,200 --> 00:07:45,479
are the configurations etc so for

149
00:07:42,150 --> 00:07:46,890
instance is your data secure that's

150
00:07:45,480 --> 00:07:51,150
being passed back and forth from in and

151
00:07:46,890 --> 00:07:53,190
<font color="#E5E5E5">out spark is there any sort of strange</font>

152
00:07:51,150 --> 00:07:55,440
is there any<font color="#E5E5E5"> chance that there's some</font>

153
00:07:53,190 --> 00:07:58,620
<font color="#CCCCCC">sort of serialization</font><font color="#E5E5E5"> issues that are</font>

154
00:07:55,440 --> 00:08:01,860
going<font color="#E5E5E5"> to happen what about sequel</font>

155
00:07:58,620 --> 00:08:03,240
injection so<font color="#CCCCCC"> there sparks equal so there</font>

156
00:08:01,860 --> 00:08:05,820
<font color="#CCCCCC">is a possibility if you're not careful</font>

157
00:08:03,240 --> 00:08:08,300
that there is there's possibility of a

158
00:08:05,820 --> 00:08:12,170
form of injection that can happen

159
00:08:08,300 --> 00:08:14,340
furthermore what about data persistence

160
00:08:12,170 --> 00:08:15,810
so for those of you are in the medical

161
00:08:14,340 --> 00:08:16,799
industry or for those of you who work in

162
00:08:15,810 --> 00:08:20,340
<font color="#E5E5E5">the federal</font><font color="#CCCCCC"> government you were</font>

163
00:08:16,800 --> 00:08:21,960
classified data or with HIPAA data where

164
00:08:20,340 --> 00:08:24,869
is your data going<font color="#E5E5E5"> where is it</font><font color="#CCCCCC"> being</font>

165
00:08:21,960 --> 00:08:27,599
stored where<font color="#E5E5E5"> is it being read from all</font>

166
00:08:24,870 --> 00:08:30,090
of<font color="#E5E5E5"> this information can potentially be</font>

167
00:08:27,600 --> 00:08:31,860
sensitive get mixed with data that is

168
00:08:30,090 --> 00:08:33,718
not supposed to<font color="#CCCCCC"> be there</font><font color="#E5E5E5"> get written to</font>

169
00:08:31,860 --> 00:08:38,729
disk and then you have a huge policy

170
00:08:33,719 --> 00:08:43,500
violation furthermore what about

171
00:08:38,729 --> 00:08:45,630
encryption so you are<font color="#CCCCCC"> the components is</font>

172
00:08:43,500 --> 00:08:50,490
the communication<font color="#CCCCCC"> between the components</font>

173
00:08:45,630 --> 00:08:52,960
and spark encrypted is the is the<font color="#E5E5E5"> incred</font>

174
00:08:50,490 --> 00:08:55,110
native or is it something that's<font color="#E5E5E5"> like a</font>

175
00:08:52,960 --> 00:08:57,640
bolt on that could be problematic or

176
00:08:55,110 --> 00:08:59,170
<font color="#CCCCCC">ararat for some</font><font color="#E5E5E5"> weird reason these</font><font color="#CCCCCC"> are</font>

177
00:08:57,640 --> 00:09:02,470
<font color="#E5E5E5">all things that really consider when</font>

178
00:08:59,170 --> 00:09:05,400
<font color="#E5E5E5">you're building our spark application so</font>

179
00:09:02,470 --> 00:09:08,890
this is<font color="#CCCCCC"> an example of spark cluster mode</font>

180
00:09:05,400 --> 00:09:11,410
so basically applications are<font color="#E5E5E5"> submitted</font>

181
00:09:08,890 --> 00:09:13,840
<font color="#E5E5E5">to the driver program through a spark</font>

182
00:09:11,410 --> 00:09:15,160
submit script Jack we're going to spark

183
00:09:13,840 --> 00:09:18,430
submit script a little<font color="#CCCCCC"> bit later in the</font>

184
00:09:15,160 --> 00:09:21,189
content in the<font color="#CCCCCC"> presentation spark</font>

185
00:09:18,430 --> 00:09:23,050
applications run as independent sets of

186
00:09:21,190 --> 00:09:27,130
processes on a cluster and they're

187
00:09:23,050 --> 00:09:29,620
coordinated by the spark context the

188
00:09:27,130 --> 00:09:31,720
spark context object in your main

189
00:09:29,620 --> 00:09:35,650
program which is also<font color="#E5E5E5"> called the driver</font>

190
00:09:31,720 --> 00:09:37,840
<font color="#E5E5E5">program data cannot be shared across</font>

191
00:09:35,650 --> 00:09:40,030
mark applications or spark context

192
00:09:37,840 --> 00:09:42,100
instances with that first persisting it

193
00:09:40,030 --> 00:09:44,230
so that basically<font color="#E5E5E5"> means that if you have</font>

194
00:09:42,100 --> 00:09:46,060
to spark applications within spark

195
00:09:44,230 --> 00:09:48,100
itself and reprocessing you can't share

196
00:09:46,060 --> 00:09:51,750
<font color="#CCCCCC">that data you have to have it persist</font>

197
00:09:48,100 --> 00:09:55,030
elsewhere before<font color="#CCCCCC"> you can share the data</font>

198
00:09:51,750 --> 00:09:57,130
so spark context connects the cluster

199
00:09:55,030 --> 00:10:02,020
manager which is the thing in the<font color="#E5E5E5"> middle</font>

200
00:09:57,130 --> 00:10:04,720
and and it can<font color="#CCCCCC"> be built</font><font color="#E5E5E5"> it's so spark</font>

201
00:10:02,020 --> 00:10:07,689
core has its own cluster manager but<font color="#E5E5E5"> you</font>

202
00:10:04,720 --> 00:10:09,520
can<font color="#E5E5E5"> feel free to use a patch to nato's</font>

203
00:10:07,690 --> 00:10:11,230
or Hadoop yarn if you'd like if you're

204
00:10:09,520 --> 00:10:12,760
<font color="#E5E5E5">already</font><font color="#CCCCCC"> using that or if you're</font>

205
00:10:11,230 --> 00:10:16,420
transitioning over from high boot you

206
00:10:12,760 --> 00:10:17,830
can use that as well the cluster<font color="#E5E5E5"> manager</font>

207
00:10:16,420 --> 00:10:22,150
is responsible for allocating resources

208
00:10:17,830 --> 00:10:24,360
across the applications one spark

209
00:10:22,150 --> 00:10:28,060
<font color="#E5E5E5">context connects to the cluster manager</font>

210
00:10:24,360 --> 00:10:29,860
spark requires the<font color="#E5E5E5"> executives on all the</font>

211
00:10:28,060 --> 00:10:33,430
worker nodes within the cluster over

212
00:10:29,860 --> 00:10:37,330
<font color="#E5E5E5">there the executor is the process that</font>

213
00:10:33,430 --> 00:10:40,630
runs the computations and stores the

214
00:10:37,330 --> 00:10:42,370
data for<font color="#E5E5E5"> your application so since the</font>

215
00:10:40,630 --> 00:10:45,070
data can't be<font color="#E5E5E5"> shared across park</font>

216
00:10:42,370 --> 00:10:48,450
applications each application gets its

217
00:10:45,070 --> 00:10:51,180
<font color="#E5E5E5">own set of executive processes</font>

218
00:10:48,450 --> 00:10:55,050
the takeaway from this I guess the slide

219
00:10:51,180 --> 00:10:57,089
is really that<font color="#CCCCCC"> the power to</font><font color="#E5E5E5"> spark is</font>

220
00:10:55,050 --> 00:10:58,770
really how everything is handled in

221
00:10:57,090 --> 00:11:02,010
memory you can<font color="#E5E5E5"> kind of see</font><font color="#CCCCCC"> across the</font>

222
00:10:58,770 --> 00:11:03,750
cluster there the the<font color="#CCCCCC"> cash piece and</font>

223
00:11:02,010 --> 00:11:08,520
<font color="#CCCCCC">that is distributed across all of the</font>

224
00:11:03,750 --> 00:11:11,100
sparknotes so that it's shared and it's

225
00:11:08,520 --> 00:11:17,939
also by design designed to work in

226
00:11:11,100 --> 00:11:21,600
highly distributed environments so this

227
00:11:17,940 --> 00:11:24,450
is<font color="#CCCCCC"> just the basic chart of expose ports</font>

228
00:11:21,600 --> 00:11:27,960
and services within within spark when

229
00:11:24,450 --> 00:11:31,110
you spin it up so<font color="#CCCCCC"> the things</font><font color="#E5E5E5"> that take</font>

230
00:11:27,960 --> 00:11:35,640
you know things to note here are the the

231
00:11:31,110 --> 00:11:38,310
web UI is launched on 40 40 and it's

232
00:11:35,640 --> 00:11:40,530
jetty base so the application runs on

233
00:11:38,310 --> 00:11:43,770
all network interfaces it's<font color="#E5E5E5"> kind of an</font>

234
00:11:40,530 --> 00:11:45,390
<font color="#E5E5E5">issue right even in standalone mode it</font>

235
00:11:43,770 --> 00:11:51,270
does that so<font color="#E5E5E5"> that's something to be</font>

236
00:11:45,390 --> 00:11:54,600
really careful cool so<font color="#E5E5E5"> let's take a look</font>

237
00:11:51,270 --> 00:11:56,370
at an actual spark application and

238
00:11:54,600 --> 00:11:59,490
<font color="#E5E5E5">hopefully the codes okay</font><font color="#CCCCCC"> in the back if</font>

239
00:11:56,370 --> 00:12:00,900
not<font color="#CCCCCC"> I'll just</font><font color="#E5E5E5"> talk through it so here's</font>

240
00:11:59,490 --> 00:12:03,840
an example<font color="#CCCCCC"> of a really</font><font color="#E5E5E5"> simple spark</font>

241
00:12:00,900 --> 00:12:06,209
application so in this particular model

242
00:12:03,840 --> 00:12:08,550
we're actually doing streaming penny

243
00:12:06,210 --> 00:12:10,590
would salute with Kafka in<font color="#E5E5E5"> this scenario</font>

244
00:12:08,550 --> 00:12:14,219
we're hooking up to Kafka so kind of

245
00:12:10,590 --> 00:12:17,460
concept is we get a message up of<font color="#E5E5E5"> pacha</font>

246
00:12:14,220 --> 00:12:20,040
Kafka right within a topic we send<font color="#CCCCCC"> that</font>

247
00:12:17,460 --> 00:12:21,780
over in stream mode to spark we do some

248
00:12:20,040 --> 00:12:24,120
real time processing of that and then

249
00:12:21,780 --> 00:12:26,189
you can spit it back out somewhere so

250
00:12:24,120 --> 00:12:27,690
the sake of argument you could<font color="#E5E5E5"> motive</font>

251
00:12:26,190 --> 00:12:30,180
potentially to Cassandra you know

252
00:12:27,690 --> 00:12:32,520
anything jdbc are really any external

253
00:12:30,180 --> 00:12:34,650
storage right so kind of pattern is

254
00:12:32,520 --> 00:12:36,689
you're<font color="#E5E5E5"> going to get some data you'll do</font>

255
00:12:34,650 --> 00:12:39,360
a series of transforms on it right so

256
00:12:36,690 --> 00:12:41,790
one<font color="#E5E5E5"> day anything's about spark is posted</font>

257
00:12:39,360 --> 00:12:44,520
OOP is you actually have the bill to do

258
00:12:41,790 --> 00:12:46,260
things in multiple stages right so map

259
00:12:44,520 --> 00:12:48,240
and reduce in a MapReduce world I want a

260
00:12:46,260 --> 00:12:50,040
bit<font color="#CCCCCC"> more linear as opposed to what you</font>

261
00:12:48,240 --> 00:12:52,320
can do in Hadoop within spark rather

262
00:12:50,040 --> 00:12:53,329
which is you can do multiple stages of

263
00:12:52,320 --> 00:12:55,489
transforms on that

264
00:12:53,329 --> 00:12:56,660
right so you get to the<font color="#E5E5E5"> performance</font>

265
00:12:55,489 --> 00:12:58,699
speed up<font color="#CCCCCC"> obviously because</font><font color="#E5E5E5"> it does a lot</font>

266
00:12:56,660 --> 00:13:00,769
of it in memory<font color="#E5E5E5"> and it also uses</font>

267
00:12:58,699 --> 00:13:02,868
serialization really really heavily<font color="#CCCCCC"> red</font>

268
00:13:00,769 --> 00:13:04,639
spark<font color="#E5E5E5"> will talk</font><font color="#CCCCCC"> about you know the</font>

269
00:13:02,869 --> 00:13:06,139
serialization and<font color="#E5E5E5"> I guess the own issues</font>

270
00:13:04,639 --> 00:13:07,819
it brings through it but one of<font color="#E5E5E5"> the</font>

271
00:13:06,139 --> 00:13:09,679
<font color="#CCCCCC">things far from was very heavily</font><font color="#E5E5E5"> on is</font>

272
00:13:07,819 --> 00:13:12,979
serialization and deserialization of

273
00:13:09,679 --> 00:13:14,269
data so that's a spark application the

274
00:13:12,980 --> 00:13:16,549
key things take away from<font color="#E5E5E5"> there as we</font>

275
00:13:14,269 --> 00:13:19,160
create a context which in this scenario

276
00:13:16,549 --> 00:13:20,660
is a streaming context we do a little

277
00:13:19,160 --> 00:13:23,029
bit of configuration and then we hook up

278
00:13:20,660 --> 00:13:26,299
to something receive data and transform

279
00:13:23,029 --> 00:13:28,069
it right so the spark context you can

280
00:13:26,299 --> 00:13:32,439
always have one of these in every pretty

281
00:13:28,069 --> 00:13:35,959
much application you can have a 1 / JVM

282
00:13:32,439 --> 00:13:37,488
you can do multiple but it's really I

283
00:13:35,959 --> 00:13:40,279
can't think<font color="#E5E5E5"> of many reasons I've ever</font>

284
00:13:37,489 --> 00:13:43,249
had<font color="#CCCCCC"> to go that route you also do things</font>

285
00:13:40,279 --> 00:13:44,929
<font color="#E5E5E5">in there for example any files any jars</font>

286
00:13:43,249 --> 00:13:47,420
the environment<font color="#E5E5E5"> you basically uplift of</font>

287
00:13:44,929 --> 00:13:48,889
that object and there's<font color="#E5E5E5"> other things you</font>

288
00:13:47,420 --> 00:13:50,449
can<font color="#E5E5E5"> do with those files for example</font><font color="#CCCCCC"> you</font>

289
00:13:48,889 --> 00:13:52,610
can invoke scripts which<font color="#CCCCCC"> will seem</font><font color="#E5E5E5"> later</font>

290
00:13:50,449 --> 00:13:54,679
on but generally when you're looking at

291
00:13:52,610 --> 00:13:57,559
spark you look at the spark contacts as

292
00:13:54,679 --> 00:13:59,959
the central entry point to the app and

293
00:13:57,559 --> 00:14:04,209
<font color="#E5E5E5">as the new alluded to its going to start</font>

294
00:13:59,959 --> 00:14:07,189
up a web UI in 40 40 so that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be fun</font>

295
00:14:04,209 --> 00:14:10,219
so we mentioned the concept of Brazilian

296
00:14:07,189 --> 00:14:11,719
distributed data set<font color="#E5E5E5"> so</font><font color="#CCCCCC"> braziliensis</font>

297
00:14:10,220 --> 00:14:15,079
should be a data set is essentially the

298
00:14:11,720 --> 00:14:17,029
attraction that's parts going<font color="#E5E5E5"> to use so</font>

299
00:14:15,079 --> 00:14:18,799
think of a scenario where<font color="#E5E5E5"> you take them</font>

300
00:14:17,029 --> 00:14:21,319
list right maybe you split that list off

301
00:14:18,799 --> 00:14:23,839
or you have a bunch<font color="#E5E5E5"> of JSON and you</font>

302
00:14:21,319 --> 00:14:25,128
parse that out so think of a list you

303
00:14:23,839 --> 00:14:26,989
know maybe have a thousand members and

304
00:14:25,129 --> 00:14:28,549
you want to do something<font color="#E5E5E5"> with that so</font>

305
00:14:26,989 --> 00:14:30,110
sparkly what you essentially paralyzed

306
00:14:28,549 --> 00:14:32,600
that stuff and then work on that in

307
00:14:30,110 --> 00:14:34,939
parallel<font color="#CCCCCC"> so our deeds were sensitive</font>

308
00:14:32,600 --> 00:14:37,129
traction you're working with<font color="#CCCCCC"> there so</font>

309
00:14:34,939 --> 00:14:39,649
basically<font color="#E5E5E5"> on the other side there's a</font>

310
00:14:37,129 --> 00:14:41,439
schedule<font color="#CCCCCC"> where right so this is just an</font>

311
00:14:39,649 --> 00:14:43,699
example here of what<font color="#CCCCCC"> actually happens</font>

312
00:14:41,439 --> 00:14:45,049
you'll make an RDD then you're<font color="#CCCCCC"> basically</font>

313
00:14:43,699 --> 00:14:47,868
going<font color="#E5E5E5"> to do something which essentially</font>

314
00:14:45,049 --> 00:14:51,110
becomes the sink at the end you can see

315
00:14:47,869 --> 00:14:53,660
much<font color="#E5E5E5"> more complex graphs than this so</font>

316
00:14:51,110 --> 00:14:55,939
for<font color="#E5E5E5"> example here this is what spark</font>

317
00:14:53,660 --> 00:14:57,860
ultimately does so this is<font color="#E5E5E5"> essentially</font>

318
00:14:55,939 --> 00:14:59,540
two phases right it creates a logical

319
00:14:57,860 --> 00:15:01,910
<font color="#CCCCCC">planet and then it creates a physical</font>

320
00:14:59,540 --> 00:15:03,630
point where it actually doesn't work so

321
00:15:01,910 --> 00:15:05,880
if you recall spark is one<font color="#CCCCCC"> event</font>

322
00:15:03,630 --> 00:15:07,740
this is distributed<font color="#E5E5E5"> right so it's really</font>

323
00:15:05,880 --> 00:15:10,080
important to understand who has cycles

324
00:15:07,740 --> 00:15:11,220
to do things so the first step you

325
00:15:10,080 --> 00:15:12,840
basically see is it will create the

326
00:15:11,220 --> 00:15:15,120
<font color="#E5E5E5">logical plan it's just essentially the</font>

327
00:15:12,840 --> 00:15:18,210
flow of how it's going to go through<font color="#E5E5E5"> the</font>

328
00:15:15,120 --> 00:15:19,620
transformations in series etc one thing

329
00:15:18,210 --> 00:15:22,920
you'll notice is that there's multiple

330
00:15:19,620 --> 00:15:24,360
sets of<font color="#CCCCCC"> our TVs our</font><font color="#E5E5E5"> TVs are in the</font>

331
00:15:22,920 --> 00:15:26,490
mutable basically structure<font color="#E5E5E5"> their</font>

332
00:15:24,360 --> 00:15:27,960
<font color="#E5E5E5">read-only so essentially whatever you're</font>

333
00:15:26,490 --> 00:15:29,580
doing things<font color="#E5E5E5"> on our dvds and say you do</font>

334
00:15:27,960 --> 00:15:31,350
<font color="#E5E5E5">a multiple stages of transformations</font>

335
00:15:29,580 --> 00:15:32,990
it's going<font color="#E5E5E5"> to create a</font><font color="#CCCCCC"> new set of our</font>

336
00:15:31,350 --> 00:15:35,640
<font color="#E5E5E5">TVs in each one of those stages right</font>

337
00:15:32,990 --> 00:15:37,890
from a<font color="#E5E5E5"> security perspective significant</font>

338
00:15:35,640 --> 00:15:39,689
to that is certain types of things are

339
00:15:37,890 --> 00:15:42,150
going to result in for example<font color="#CCCCCC"> things</font>

340
00:15:39,690 --> 00:15:44,160
like dis persistence right so you can

341
00:15:42,150 --> 00:15:46,500
see over there you see<font color="#CCCCCC"> the thing that</font>

342
00:15:44,160 --> 00:15:47,760
says shuffle right in the middle so

343
00:15:46,500 --> 00:15:49,410
whatever<font color="#E5E5E5"> you're going to do is shuffle</font>

344
00:15:47,760 --> 00:15:50,850
with resources you can it's going to

345
00:15:49,410 --> 00:15:53,250
basically trigger some kind of

346
00:15:50,850 --> 00:15:54,900
persistence to happen<font color="#E5E5E5"> right so depending</font>

347
00:15:53,250 --> 00:15:57,270
<font color="#CCCCCC">on the data you're you know dealing</font><font color="#E5E5E5"> with</font>

348
00:15:54,900 --> 00:15:58,530
right to<font color="#E5E5E5"> tick the data maybe you don't</font>

349
00:15:57,270 --> 00:16:00,060
want that day to ever get you know

350
00:15:58,530 --> 00:16:01,319
<font color="#E5E5E5">basically push this is the disk right so</font>

351
00:16:00,060 --> 00:16:03,180
it's important to kind of understand

352
00:16:01,320 --> 00:16:05,460
well then the life cycle was actually

353
00:16:03,180 --> 00:16:07,020
<font color="#CCCCCC">happy with</font><font color="#E5E5E5"> your data the other thing too</font>

354
00:16:05,460 --> 00:16:09,810
is because there's you know<font color="#E5E5E5"> really not</font>

355
00:16:07,020 --> 00:16:11,550
<font color="#E5E5E5">that one year you making sure that you</font>

356
00:16:09,810 --> 00:16:13,829
<font color="#E5E5E5">know at certain stages you might have</font>

357
00:16:11,550 --> 00:16:16,020
you know<font color="#CCCCCC"> different data so it's kind of</font>

358
00:16:13,830 --> 00:16:17,340
considerations that<font color="#E5E5E5"> you have to really</font>

359
00:16:16,020 --> 00:16:20,250
think<font color="#E5E5E5"> about that kind of stage wise</font>

360
00:16:17,340 --> 00:16:22,260
matter once it creates like the logical

361
00:16:20,250 --> 00:16:23,670
plan it creates a physical plane so

362
00:16:22,260 --> 00:16:26,910
that's basically how<font color="#E5E5E5"> it's mapping to</font>

363
00:16:23,670 --> 00:16:29,430
resources so<font color="#E5E5E5"> basically those are kind of</font>

364
00:16:26,910 --> 00:16:32,400
the two stages there so but the logical

365
00:16:29,430 --> 00:16:34,050
<font color="#CCCCCC">plan for</font><font color="#E5E5E5"> all that stuff's built out in</font>

366
00:16:32,400 --> 00:16:36,140
terms<font color="#E5E5E5"> of disk in memory square</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> so</font>

367
00:16:34,050 --> 00:16:38,370
spark has a few different ways

368
00:16:36,140 --> 00:16:40,280
particularly it's the memory storage and

369
00:16:38,370 --> 00:16:43,050
disk storage that you kind of deal with

370
00:16:40,280 --> 00:16:45,540
so each of those levels they're kind of

371
00:16:43,050 --> 00:16:47,099
<font color="#E5E5E5">dictates something right so nine as you</font>

372
00:16:45,540 --> 00:16:49,530
guys can imagine means basically and

373
00:16:47,100 --> 00:16:50,670
like fill that off on this<font color="#CCCCCC"> goal me means</font>

374
00:16:49,530 --> 00:16:52,230
basically it's going to do<font color="#CCCCCC"> all the</font>

375
00:16:50,670 --> 00:16:54,810
persistence on disk and just ignore

376
00:16:52,230 --> 00:16:56,720
memory you can do memory only which

377
00:16:54,810 --> 00:16:59,430
means like you don't store it to this on

378
00:16:56,720 --> 00:17:02,120
the serialized aspect or just put

379
00:16:59,430 --> 00:17:03,839
basically asterisk underscore

380
00:17:02,120 --> 00:17:05,069
serialization and basically that means

381
00:17:03,840 --> 00:17:06,780
like you're going<font color="#E5E5E5"> to persist those</font>

382
00:17:05,069 --> 00:17:10,230
things that survives<font color="#E5E5E5"> objects the entire</font>

383
00:17:06,780 --> 00:17:12,569
time versus<font color="#E5E5E5"> just raw data on with</font>

384
00:17:10,230 --> 00:17:15,280
regards to off heat so that's one for

385
00:17:12,569 --> 00:17:18,220
example is anybody heard biloxi oh

386
00:17:15,280 --> 00:17:19,869
is that one sound familiar so basically

387
00:17:18,220 --> 00:17:21,190
there's lots of different<font color="#CCCCCC"> tools that you</font>

388
00:17:19,869 --> 00:17:23,619
can<font color="#E5E5E5"> do is to trying to extend the full</font>

389
00:17:21,190 --> 00:17:25,210
tolerant to something like spark so one

390
00:17:23,619 --> 00:17:27,459
<font color="#E5E5E5">of those particular Luxio so basically</font>

391
00:17:25,210 --> 00:17:29,560
imagine you have stuff held in memory

392
00:17:27,460 --> 00:17:32,020
and spark and like something<font color="#E5E5E5"> died right</font>

393
00:17:29,560 --> 00:17:33,129
one of<font color="#E5E5E5"> your workers unexpectedly guys so</font>

394
00:17:32,020 --> 00:17:36,040
something like the<font color="#CCCCCC"> mocks you and let you</font>

395
00:17:33,130 --> 00:17:37,840
actually have some redundancy but so

396
00:17:36,040 --> 00:17:39,340
basically by saying off heat that means

397
00:17:37,840 --> 00:17:40,959
it's going to<font color="#E5E5E5"> be stored off of sparks</font>

398
00:17:39,340 --> 00:17:43,419
it's going<font color="#E5E5E5"> to be stored</font><font color="#CCCCCC"> in another key</font>

399
00:17:40,960 --> 00:17:46,090
so the consideration there is now you

400
00:17:43,420 --> 00:17:47,440
have another pretty much life cycle to

401
00:17:46,090 --> 00:17:49,330
deal with your<font color="#E5E5E5"> dating right so if you</font>

402
00:17:47,440 --> 00:17:50,710
push it something<font color="#CCCCCC"> like the muck co it's</font>

403
00:17:49,330 --> 00:17:52,659
literally<font color="#CCCCCC"> just going to have like a warm</font>

404
00:17:50,710 --> 00:17:54,010
catch of everything you're doing so

405
00:17:52,660 --> 00:17:56,020
think about that when you basically

406
00:17:54,010 --> 00:17:57,400
persist in that data off heat you just

407
00:17:56,020 --> 00:18:00,639
have another place while your date is

408
00:17:57,400 --> 00:18:02,620
<font color="#E5E5E5">going to end up with regards to this</font>

409
00:18:00,640 --> 00:18:04,780
persistence and encryption there's

410
00:18:02,620 --> 00:18:06,879
really<font color="#E5E5E5"> not a lot native to sparf at this</font>

411
00:18:04,780 --> 00:18:10,450
point<font color="#CCCCCC"> I'm seeing some interesting kind</font>

412
00:18:06,880 --> 00:18:12,610
of projects I BM had one were they we're

413
00:18:10,450 --> 00:18:14,920
<font color="#E5E5E5">basically very building encryption on</font>

414
00:18:12,610 --> 00:18:16,479
the fly<font color="#E5E5E5"> into their serializers and</font><font color="#CCCCCC"> D</font>

415
00:18:14,920 --> 00:18:18,760
serializers so basically when<font color="#CCCCCC"> you're</font>

416
00:18:16,480 --> 00:18:21,100
<font color="#CCCCCC">persistent of serialize objects you do</font>

417
00:18:18,760 --> 00:18:22,629
it in a safe manner that's<font color="#E5E5E5"> really cool</font>

418
00:18:21,100 --> 00:18:24,939
<font color="#E5E5E5">but that's not obviously something</font>

419
00:18:22,630 --> 00:18:27,460
that's in like spark rub scream if<font color="#CCCCCC"> you</font>

420
00:18:24,940 --> 00:18:29,890
are using spark for the hdfs you do get

421
00:18:27,460 --> 00:18:32,170
a little bit of protection to form of<font color="#CCCCCC"> Io</font>

422
00:18:29,890 --> 00:18:34,360
encryption but that's really specific to

423
00:18:32,170 --> 00:18:36,400
if you use in<font color="#CCCCCC"> hdfs and yon if you're not</font>

424
00:18:34,360 --> 00:18:38,679
using ATT of essen yarn and you don't

425
00:18:36,400 --> 00:18:39,820
get<font color="#E5E5E5"> that but there are a couple places I</font>

426
00:18:38,680 --> 00:18:43,060
mentioned where that data gets

427
00:18:39,820 --> 00:18:45,939
potentially catch one of<font color="#E5E5E5"> those</font>

428
00:18:43,060 --> 00:18:47,800
explicitly called checkpoints the other

429
00:18:45,940 --> 00:18:50,650
is shuffling so shuffle is basically the

430
00:18:47,800 --> 00:18:52,240
process of where just think<font color="#E5E5E5"> about how</font>

431
00:18:50,650 --> 00:18:55,210
your jobs are going<font color="#E5E5E5"> to move without your</font>

432
00:18:52,240 --> 00:18:56,620
closet but really kind of another way is

433
00:18:55,210 --> 00:18:59,200
basically if you run<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> RAM so</font>

434
00:18:56,620 --> 00:19:00,850
recall that spark is you know one of the

435
00:18:59,200 --> 00:19:02,650
benefits is being in memory so<font color="#E5E5E5"> once you</font>

436
00:19:00,850 --> 00:19:04,899
run out of memory you've got to store

437
00:19:02,650 --> 00:19:06,520
that data somewhere right because<font color="#CCCCCC"> you're</font>

438
00:19:04,900 --> 00:19:08,740
we can be queued stuff up right so

439
00:19:06,520 --> 00:19:10,240
somewhere you have to persist that if

440
00:19:08,740 --> 00:19:12,820
you don't<font color="#E5E5E5"> want to lose</font><font color="#CCCCCC"> it when you run</font>

441
00:19:10,240 --> 00:19:14,290
<font color="#E5E5E5">out of memory but one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> things that</font>

442
00:19:12,820 --> 00:19:15,850
really consider there is just like what

443
00:19:14,290 --> 00:19:17,710
kind of data you combine in each of

444
00:19:15,850 --> 00:19:19,149
those things<font color="#E5E5E5"> right really important to</font>

445
00:19:17,710 --> 00:19:23,170
know what<font color="#E5E5E5"> kind of data you're acting on</font>

446
00:19:19,150 --> 00:19:24,370
any given time<font color="#CCCCCC"> so like I mentioned if</font>

447
00:19:23,170 --> 00:19:26,350
you're in yarn mode then you can

448
00:19:24,370 --> 00:19:28,539
basically turn on I encryption as

449
00:19:26,350 --> 00:19:31,090
setting if you're not<font color="#E5E5E5"> using the arm then</font>

450
00:19:28,539 --> 00:19:32,799
just completely ignore that right just

451
00:19:31,090 --> 00:19:35,649
like furiously who use a spark with yarn

452
00:19:32,799 --> 00:19:41,289
in here versus park with something<font color="#E5E5E5"> else</font>

453
00:19:35,650 --> 00:19:43,900
anybody<font color="#E5E5E5"> knew my yarn</font><font color="#CCCCCC"> Modi me</font><font color="#E5E5E5"> now cool so</font>

454
00:19:41,289 --> 00:19:44,770
<font color="#E5E5E5">let's talk about sparks equal so sparks</font>

455
00:19:43,900 --> 00:19:46,990
equals probably one of the coolest

456
00:19:44,770 --> 00:19:50,049
things about spark to me it's really

457
00:19:46,990 --> 00:19:52,350
<font color="#E5E5E5">powerful really really powerful but</font>

458
00:19:50,049 --> 00:19:56,950
there's<font color="#E5E5E5"> lots of areas that are right for</font>

459
00:19:52,350 --> 00:19:58,629
research so for starters sparks equal

460
00:19:56,950 --> 00:20:01,059
kind of little bit broader than just you

461
00:19:58,630 --> 00:20:02,590
know sequel it works is more of an

462
00:20:01,059 --> 00:20:05,200
abstraction and let you work with a lot

463
00:20:02,590 --> 00:20:06,668
of different<font color="#CCCCCC"> underlying data formats so</font>

464
00:20:05,200 --> 00:20:11,650
you can work<font color="#CCCCCC"> with</font><font color="#E5E5E5"> you know traditional</font>

465
00:20:06,669 --> 00:20:13,330
<font color="#CCCCCC">JBC jdbc hive and</font><font color="#E5E5E5"> I've ql</font><font color="#CCCCCC"> Jason's</font>

466
00:20:11,650 --> 00:20:15,280
anybody'll will parkade files anything

467
00:20:13,330 --> 00:20:17,139
<font color="#E5E5E5">like that but then you can deal with</font>

468
00:20:15,280 --> 00:20:19,389
other things<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you</font><font color="#E5E5E5"> can pull</font>

469
00:20:17,140 --> 00:20:21,610
stuff in from s3 right basically<font color="#CCCCCC"> work on</font>

470
00:20:19,390 --> 00:20:23,470
that so basically<font color="#E5E5E5"> lets you create you</font>

471
00:20:21,610 --> 00:20:25,658
know essentially structure out of<font color="#E5E5E5"> your</font>

472
00:20:23,470 --> 00:20:27,490
data<font color="#CCCCCC"> and then query against it so it</font>

473
00:20:25,659 --> 00:20:29,409
doesn't have to be native sequel but

474
00:20:27,490 --> 00:20:32,620
allows you to basically query anything

475
00:20:29,409 --> 00:20:35,020
like you wouldn't sequel right in with

476
00:20:32,620 --> 00:20:37,658
regards to how they do that so pre<font color="#CCCCCC"> 2.0</font>

477
00:20:35,020 --> 00:20:40,450
spark was a lot different in two point

478
00:20:37,659 --> 00:20:43,929
<font color="#E5E5E5">oh they introduced basically catalyst so</font>

479
00:20:40,450 --> 00:20:45,760
catalyst essentially works on basically

480
00:20:43,929 --> 00:20:46,900
a grammar for sequel<font color="#CCCCCC"> that much you</font>

481
00:20:45,760 --> 00:20:48,820
basically kind<font color="#E5E5E5"> of see what the base</font>

482
00:20:46,900 --> 00:20:50,169
language looks like and then it

483
00:20:48,820 --> 00:20:52,809
basically does you know much still

484
00:20:50,169 --> 00:20:55,480
analysis on that does what kind of magic

485
00:20:52,809 --> 00:20:58,210
to basically create at the end it spits

486
00:20:55,480 --> 00:21:00,370
out actual bytecode with sequel so in

487
00:20:58,210 --> 00:21:04,000
the<font color="#E5E5E5"> end it's doing code generation based</font>

488
00:21:00,370 --> 00:21:05,709
on<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of different things this one I</font>

489
00:21:04,000 --> 00:21:09,820
think<font color="#E5E5E5"> is good kind of illustrates why</font>

490
00:21:05,710 --> 00:21:11,650
you should give a so open right but

491
00:21:09,820 --> 00:21:13,870
down there and reading it and<font color="#E5E5E5"> I'll read</font>

492
00:21:11,650 --> 00:21:15,340
you guys if<font color="#CCCCCC"> it's simple quoting sounds</font>

493
00:21:13,870 --> 00:21:16,658
good this really isn't a sequel

494
00:21:15,340 --> 00:21:19,209
injection problem since it<font color="#E5E5E5"> would be up</font>

495
00:21:16,659 --> 00:21:21,130
to<font color="#E5E5E5"> the callers to sanitize inputs from</font>

496
00:21:19,210 --> 00:21:22,929
an external source and sparks not

497
00:21:21,130 --> 00:21:25,690
something you would expose directly to

498
00:21:22,929 --> 00:21:27,280
external calls or input so this may be a

499
00:21:25,690 --> 00:21:29,350
void corner case problem so blah blah

500
00:21:27,280 --> 00:21:32,649
blah<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> hookah tell me was wrong with</font>

501
00:21:29,350 --> 00:21:33,789
that thinking<font color="#E5E5E5"> upfront anybody i'm sure</font>

502
00:21:32,650 --> 00:21:36,020
you guys been doing security for a while

503
00:21:33,789 --> 00:21:37,730
right is that is<font color="#CCCCCC"> that</font>

504
00:21:36,020 --> 00:21:41,830
approach to kind of protect the people

505
00:21:37,730 --> 00:21:41,830
for a framework yeah debatable right

506
00:21:42,250 --> 00:21:47,270
probably that's on sorry<font color="#E5E5E5"> about that but</font>

507
00:21:45,650 --> 00:21:48,650
just basically illustrate so in<font color="#E5E5E5"> terms of</font>

508
00:21:47,270 --> 00:21:50,680
the things you're pumping into sparks

509
00:21:48,650 --> 00:21:53,030
equal you really got to think about<font color="#E5E5E5"> that</font>

510
00:21:50,680 --> 00:21:55,100
this is kind<font color="#E5E5E5"> of how it works from start</font>

511
00:21:53,030 --> 00:21:57,680
to finish maybe extraneous but

512
00:21:55,100 --> 00:22:00,350
<font color="#E5E5E5">essentially at the end you can kind</font><font color="#CCCCCC"> of</font>

513
00:21:57,680 --> 00:22:02,920
see<font color="#E5E5E5"> you're actually spitting out actual</font>

514
00:22:00,350 --> 00:22:05,030
code and generating code on the fly

515
00:22:02,920 --> 00:22:06,950
here's just an example of like the base

516
00:22:05,030 --> 00:22:09,830
grammar right so you can<font color="#E5E5E5"> see there</font><font color="#CCCCCC"> is</font>

517
00:22:06,950 --> 00:22:11,990
safe will<font color="#CCCCCC"> Mike things and tokens so</font>

518
00:22:09,830 --> 00:22:14,470
basically from there<font color="#E5E5E5"> I build out</font>

519
00:22:11,990 --> 00:22:17,480
basically abstract syntax trees and

520
00:22:14,470 --> 00:22:20,720
stuff like that but<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that kind of</font>

521
00:22:17,480 --> 00:22:22,340
take away from there for example rules

522
00:22:20,720 --> 00:22:25,250
conditions in their bodies can contain

523
00:22:22,340 --> 00:22:27,050
arbitrary Scala code gives catalyst more

524
00:22:25,250 --> 00:22:29,570
power than domain-specific languages for

525
00:22:27,050 --> 00:22:31,159
optimizers right so<font color="#CCCCCC"> anytime you get</font><font color="#E5E5E5"> into</font>

526
00:22:29,570 --> 00:22:33,950
the mix of basically generating code

527
00:22:31,160 --> 00:22:37,550
based on things magical things can

528
00:22:33,950 --> 00:22:38,810
happen this is an<font color="#CCCCCC"> example here so</font><font color="#E5E5E5"> this</font>

529
00:22:37,550 --> 00:22:41,629
is if you doing<font color="#E5E5E5"> things in the kind of</font>

530
00:22:38,810 --> 00:22:43,389
the spark way does<font color="#E5E5E5"> anybody ever worked</font>

531
00:22:41,630 --> 00:22:46,610
with like link or anything like that or

532
00:22:43,390 --> 00:22:48,740
I mean anything<font color="#CCCCCC"> I'd like to do a lice</font>

533
00:22:46,610 --> 00:22:50,479
you know language integrated way of

534
00:22:48,740 --> 00:22:52,580
querying things right so<font color="#CCCCCC"> you get a lot</font>

535
00:22:50,480 --> 00:22:56,000
of benefits<font color="#CCCCCC"> that you get things like</font>

536
00:22:52,580 --> 00:22:57,260
type safety etc but that's an<font color="#CCCCCC"> example</font>

537
00:22:56,000 --> 00:22:59,030
just kind of what it would<font color="#E5E5E5"> look like if</font>

538
00:22:57,260 --> 00:23:02,210
you're doing you know basic data frames

539
00:22:59,030 --> 00:23:03,470
and spark and here's an example of

540
00:23:02,210 --> 00:23:06,530
basically<font color="#CCCCCC"> what each of those gives you</font>

541
00:23:03,470 --> 00:23:09,110
write data sets are actually<font color="#E5E5E5"> 2 point 0</font>

542
00:23:06,530 --> 00:23:10,700
and up<font color="#E5E5E5"> it's mentioned their data frames</font>

543
00:23:09,110 --> 00:23:13,240
<font color="#CCCCCC">will thus far away doing</font><font color="#E5E5E5"> things to point</font>

544
00:23:10,700 --> 00:23:15,860
0 and up it's a you working on data sets

545
00:23:13,240 --> 00:23:18,530
but<font color="#E5E5E5"> basically in terms of like your code</font>

546
00:23:15,860 --> 00:23:23,419
breaking essentially to point o it up it

547
00:23:18,530 --> 00:23:24,740
just basically aliases David side just

548
00:23:23,420 --> 00:23:27,440
here's an example what you get basically

549
00:23:24,740 --> 00:23:29,900
you get compiled time checks you get

550
00:23:27,440 --> 00:23:31,220
runtime<font color="#CCCCCC"> trucks for these</font><font color="#E5E5E5"> things which is</font>

551
00:23:29,900 --> 00:23:32,810
<font color="#E5E5E5">obviously important if you're basically</font>

552
00:23:31,220 --> 00:23:34,670
doing a lot of dynamics equal building

553
00:23:32,810 --> 00:23:39,320
things on the fly make it a lot of

554
00:23:34,670 --> 00:23:40,880
assumptions about<font color="#E5E5E5"> the underlying data so</font>

555
00:23:39,320 --> 00:23:43,100
here's an example<font color="#E5E5E5"> here right if you in</font>

556
00:23:40,880 --> 00:23:44,690
sparks equal you can do plain old

557
00:23:43,100 --> 00:23:47,090
sequels everybody seems to look phone

558
00:23:44,690 --> 00:23:47,600
back to<font color="#E5E5E5"> that you can do it just fine it</font>

559
00:23:47,090 --> 00:23:49,459
works

560
00:23:47,600 --> 00:23:51,379
you guys<font color="#E5E5E5"> no sequel nothing who knew know</font>

561
00:23:49,460 --> 00:23:52,970
we're in here if<font color="#E5E5E5"> you working with the</font>

562
00:23:51,380 --> 00:23:56,120
data set then you can<font color="#CCCCCC"> actually work with</font>

563
00:23:52,970 --> 00:23:58,130
a little<font color="#E5E5E5"> bit more complex will work full</font>

564
00:23:56,120 --> 00:24:00,129
there but<font color="#E5E5E5"> things to point out so you do</font>

565
00:23:58,130 --> 00:24:02,360
get some type safety and verification

566
00:24:00,130 --> 00:24:04,910
but essentially you are still spitting

567
00:24:02,360 --> 00:24:06,199
strings in there right so things that

568
00:24:04,910 --> 00:24:09,530
<font color="#E5E5E5">kind of think</font><font color="#CCCCCC"> about if you're familiar</font>

569
00:24:06,200 --> 00:24:11,390
with how sequel injection works so plus

570
00:24:09,530 --> 00:24:14,510
against I pattern there right anybody

571
00:24:11,390 --> 00:24:16,780
spot the<font color="#E5E5E5"> problem win the prize right so</font>

572
00:24:14,510 --> 00:24:18,590
pretty<font color="#E5E5E5"> vanilla sequel injection there</font>

573
00:24:16,780 --> 00:24:20,480
but things<font color="#CCCCCC"> that kind of think about</font>

574
00:24:18,590 --> 00:24:22,549
underneath<font color="#E5E5E5"> like what a spark actually do</font>

575
00:24:20,480 --> 00:24:24,230
for you in that regard right because you

576
00:24:22,549 --> 00:24:26,360
remember we call that slide a couple

577
00:24:24,230 --> 00:24:28,580
back where they're like it's up<font color="#CCCCCC"> to you</font>

578
00:24:26,360 --> 00:24:30,678
it's up<font color="#CCCCCC"> to you right so what a spark</font>

579
00:24:28,580 --> 00:24:33,649
actually do for you and the answer it

580
00:24:30,679 --> 00:24:37,130
does a couple things actually so if

581
00:24:33,650 --> 00:24:39,380
using jdbc rd DS this<font color="#CCCCCC"> is how they escape</font>

582
00:24:37,130 --> 00:24:41,630
your sequel so if you can see at<font color="#E5E5E5"> the</font>

583
00:24:39,380 --> 00:24:43,400
bottom you can see basically replace and

584
00:24:41,630 --> 00:24:46,490
<font color="#CCCCCC">it'll take a single quote it will</font>

585
00:24:43,400 --> 00:24:48,679
basically double up the quotes view that

586
00:24:46,490 --> 00:24:50,299
maybe<font color="#E5E5E5"> that's interesting right so if</font>

587
00:24:48,679 --> 00:24:52,340
you're basically working on you know

588
00:24:50,299 --> 00:24:54,740
securing it you're a pen tester and

589
00:24:52,340 --> 00:24:56,330
you're trying to basically do with<font color="#E5E5E5"> asian</font>

590
00:24:54,740 --> 00:24:57,679
types of stuff right things to consider

591
00:24:56,330 --> 00:25:00,110
that's exactly what it's going to do

592
00:24:57,679 --> 00:25:03,230
it's going to double up on your single

593
00:25:00,110 --> 00:25:04,428
quotes right additionally it also does

594
00:25:03,230 --> 00:25:07,309
some other stuff where you can basically

595
00:25:04,429 --> 00:25:10,970
substitute in variables and here's just

596
00:25:07,309 --> 00:25:12,470
kind of the<font color="#CCCCCC"> regex they run up</font><font color="#E5E5E5"> on top but</font>

597
00:25:10,970 --> 00:25:18,260
<font color="#E5E5E5">basically the caveat there is that</font><font color="#CCCCCC"> the</font>

598
00:25:12,470 --> 00:25:19,909
<font color="#E5E5E5">attempt to do some things</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it you</font>

599
00:25:18,260 --> 00:25:21,289
also have to<font color="#E5E5E5"> basically work with within</font>

600
00:25:19,909 --> 00:25:24,919
the constraints of the syntax they want

601
00:25:21,289 --> 00:25:26,179
you to use so things you've got<font color="#E5E5E5"> to</font>

602
00:25:24,919 --> 00:25:27,890
<font color="#CCCCCC">basically take away from that is if</font>

603
00:25:26,179 --> 00:25:29,270
you're basically developing for sparks

604
00:25:27,890 --> 00:25:31,640
equal you should definitely care about

605
00:25:29,270 --> 00:25:34,280
sequel injection there's not<font color="#E5E5E5"> a one</font>

606
00:25:31,640 --> 00:25:35,870
<font color="#CCCCCC">hundred percent safety built-in just</font>

607
00:25:34,280 --> 00:25:37,399
kind of considerations if you read the

608
00:25:35,870 --> 00:25:39,559
documentation they don't mention a lot

609
00:25:37,400 --> 00:25:41,419
about sequel injection in fact I<font color="#E5E5E5"> think</font>

610
00:25:39,559 --> 00:25:42,950
it's almost mentioned well I think it's

611
00:25:41,419 --> 00:25:45,799
actually zero times if<font color="#CCCCCC"> you read</font><font color="#E5E5E5"> through</font>

612
00:25:42,950 --> 00:25:47,809
the sparks equal section if it's not

613
00:25:45,799 --> 00:25:50,510
zero it may be one-dimensional injection

614
00:25:47,809 --> 00:25:51,620
could happen right<font color="#E5E5E5"> so things we</font>

615
00:25:50,510 --> 00:25:54,289
basically know about sequel injection

616
00:25:51,620 --> 00:25:55,729
apply here right<font color="#CCCCCC"> in terms of you don't</font>

617
00:25:54,289 --> 00:25:58,230
have a native way to do finding things

618
00:25:55,730 --> 00:26:01,650
but maybe you<font color="#E5E5E5"> think about basically the</font>

619
00:25:58,230 --> 00:26:02,850
you're lying in so in the mention back

620
00:26:01,650 --> 00:26:06,090
here from the developers in the

621
00:26:02,850 --> 00:26:07,649
framework folks basically people<font color="#E5E5E5"> are in</font>

622
00:26:06,090 --> 00:26:09,659
generally<font color="#E5E5E5"> talking directly to spark</font>

623
00:26:07,650 --> 00:26:12,150
great so think about like in a

624
00:26:09,660 --> 00:26:14,160
traditional you<font color="#CCCCCC"> know NBC kind of</font>

625
00:26:12,150 --> 00:26:16,530
application right where you submit

626
00:26:14,160 --> 00:26:18,260
something to a web form and you know

627
00:26:16,530 --> 00:26:20,460
gets basically you know process by

628
00:26:18,260 --> 00:26:22,980
something on the back end right it calls

629
00:26:20,460 --> 00:26:24,510
out to a database and you kind of know

630
00:26:22,980 --> 00:26:27,120
the kind of flow right it's somewhat

631
00:26:24,510 --> 00:26:29,580
synchronous but in a<font color="#E5E5E5"> spark sequel world</font>

632
00:26:27,120 --> 00:26:31,320
you may not actually be passing that

633
00:26:29,580 --> 00:26:33,870
from a client right so you think about

634
00:26:31,320 --> 00:26:35,879
<font color="#E5E5E5">the kind of concept of maybe that's part</font>

635
00:26:33,870 --> 00:26:37,590
of you know some kind<font color="#E5E5E5"> of analytics thing</font>

636
00:26:35,880 --> 00:26:39,900
that happens right so you care about

637
00:26:37,590 --> 00:26:41,909
user behavior user clicks on something

638
00:26:39,900 --> 00:26:43,559
and you<font color="#CCCCCC"> know you send something off</font><font color="#E5E5E5"> and</font>

639
00:26:41,910 --> 00:26:45,000
said well hey you<font color="#E5E5E5"> know usually clicked</font>

640
00:26:43,559 --> 00:26:46,710
on this thing right so watching user

641
00:26:45,000 --> 00:26:48,480
behavior try to predict how they're

642
00:26:46,710 --> 00:26:50,010
going to behave so there's lots<font color="#E5E5E5"> of</font>

643
00:26:48,480 --> 00:26:51,660
scenarios where data is<font color="#E5E5E5"> actually going</font>

644
00:26:50,010 --> 00:26:54,179
to get into<font color="#E5E5E5"> basically a back in spark</font>

645
00:26:51,660 --> 00:26:55,620
sequel query right so and the

646
00:26:54,179 --> 00:26:57,540
interesting<font color="#CCCCCC"> thing there is you know you</font>

647
00:26:55,620 --> 00:26:59,909
may have like second order third<font color="#E5E5E5"> or</font>

648
00:26:57,540 --> 00:27:01,918
fifth order rate essentially you can be

649
00:26:59,910 --> 00:27:03,450
taking that data and essentially work

650
00:27:01,919 --> 00:27:05,490
and iteratively with it right<font color="#E5E5E5"> so you can</font>

651
00:27:03,450 --> 00:27:07,110
introduce potentially malicious payload

652
00:27:05,490 --> 00:27:09,120
each one of those stages right so if

653
00:27:07,110 --> 00:27:10,620
you're doing things dynamically you

654
00:27:09,120 --> 00:27:13,799
should really<font color="#E5E5E5"> think about how that's</font>

655
00:27:10,620 --> 00:27:15,389
running through sparks equal right but

656
00:27:13,799 --> 00:27:17,340
like it says there in the base of the

657
00:27:15,390 --> 00:27:18,870
second bullet point so if you just

658
00:27:17,340 --> 00:27:20,309
<font color="#E5E5E5">basically bang bang bang it on the</font>

659
00:27:18,870 --> 00:27:22,799
<font color="#E5E5E5">scanner and looking for it to do</font>

660
00:27:20,309 --> 00:27:24,270
something for<font color="#E5E5E5"> you you may not actually</font>

661
00:27:22,799 --> 00:27:26,280
ever seen anything back so if you try

662
00:27:24,270 --> 00:27:27,870
<font color="#E5E5E5">and do the traditional tricks if in a</font>

663
00:27:26,280 --> 00:27:29,850
<font color="#E5E5E5">jvc world where it's like</font><font color="#CCCCCC"> you know</font>

664
00:27:27,870 --> 00:27:31,110
<font color="#CCCCCC">introduce like with a benchmark or</font>

665
00:27:29,850 --> 00:27:34,379
something like that to kind of spit out

666
00:27:31,110 --> 00:27:35,939
a little bit<font color="#E5E5E5"> of time delay you may not</font>

667
00:27:34,380 --> 00:27:37,440
<font color="#E5E5E5">actually see those things back great so</font>

668
00:27:35,940 --> 00:27:39,630
if you just bang it on a basically site

669
00:27:37,440 --> 00:27:41,190
with a dynamic scanner<font color="#E5E5E5"> I'm just kind of</font>

670
00:27:39,630 --> 00:27:43,760
banging<font color="#CCCCCC"> the hammer that name again and</font>

671
00:27:41,190 --> 00:27:46,049
<font color="#E5E5E5">again you may not come up</font><font color="#CCCCCC"> with anything</font>

672
00:27:43,760 --> 00:27:48,750
so it makes<font color="#E5E5E5"> things like timing attacks</font>

673
00:27:46,049 --> 00:27:49,740
really hard so there's other subtle ways

674
00:27:48,750 --> 00:27:51,570
you're obviously going to see those

675
00:27:49,740 --> 00:27:54,270
things<font color="#E5E5E5"> like it for example jobs start to</font>

676
00:27:51,570 --> 00:27:56,520
fail or like a cluster drops right you

677
00:27:54,270 --> 00:27:58,320
know something's going<font color="#CCCCCC"> on but it's not</font>

678
00:27:56,520 --> 00:27:59,940
quite as easy you know just basically

679
00:27:58,320 --> 00:28:02,040
dynamically<font color="#E5E5E5"> to figure these things out</font>

680
00:27:59,940 --> 00:28:04,080
because you may<font color="#CCCCCC"> not ever get</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> callback</font>

681
00:28:02,040 --> 00:28:05,730
<font color="#CCCCCC">rate spark works and streaming mode but</font>

682
00:28:04,080 --> 00:28:08,428
you can also do things<font color="#E5E5E5"> in batch mode</font>

683
00:28:05,730 --> 00:28:09,690
right so that that's job or whatever<font color="#E5E5E5"> is</font>

684
00:28:08,429 --> 00:28:11,340
going to happen it's<font color="#E5E5E5"> going to start</font>

685
00:28:09,690 --> 00:28:12,720
maybe<font color="#E5E5E5"> without any user</font>

686
00:28:11,340 --> 00:28:15,419
or<font color="#E5E5E5"> anything like that right and they</font>

687
00:28:12,720 --> 00:28:17,490
<font color="#E5E5E5">just pull data maybe untrusted data in</font>

688
00:28:15,420 --> 00:28:20,250
for those<font color="#E5E5E5"> jobs user never has a way to</font>

689
00:28:17,490 --> 00:28:21,540
interact with<font color="#E5E5E5"> that so considerations if</font>

690
00:28:20,250 --> 00:28:23,700
you're actually like trying<font color="#E5E5E5"> to manage</font>

691
00:28:21,540 --> 00:28:24,960
this and you know<font color="#CCCCCC"> actually the type</font>

692
00:28:23,700 --> 00:28:28,620
things as they get introduced in<font color="#E5E5E5"> your</font>

693
00:28:24,960 --> 00:28:29,790
environment<font color="#E5E5E5"> user defined functions and</font>

694
00:28:28,620 --> 00:28:32,820
other things so a lot of databases

695
00:28:29,790 --> 00:28:35,760
support these and spark supports working

696
00:28:32,820 --> 00:28:37,260
with user-defined functions as<font color="#CCCCCC"> well so</font>

697
00:28:35,760 --> 00:28:39,390
at the end<font color="#E5E5E5"> of the day that's common code</font>

698
00:28:37,260 --> 00:28:41,460
right so you're essentially introducing

699
00:28:39,390 --> 00:28:43,680
Scala code at the sequel and then it's

700
00:28:41,460 --> 00:28:45,630
basically operating on your code when

701
00:28:43,680 --> 00:28:47,790
it's basically doing Todd police so as

702
00:28:45,630 --> 00:28:49,670
you'd imagine<font color="#E5E5E5"> using the find function</font>

703
00:28:47,790 --> 00:28:52,170
can introduce some interesting things

704
00:28:49,670 --> 00:28:54,360
but because it doesn't actually<font color="#E5E5E5"> work</font>

705
00:28:52,170 --> 00:28:55,980
through the traditional way it<font color="#E5E5E5"> doesn't</font>

706
00:28:54,360 --> 00:28:58,020
go through the full optimizer while the

707
00:28:55,980 --> 00:28:59,310
validation everything like that<font color="#CCCCCC"> so</font>

708
00:28:58,020 --> 00:29:00,840
proceed with caution in terms of

709
00:28:59,310 --> 00:29:06,870
introducing like using find functions

710
00:29:00,840 --> 00:29:09,480
into your ex so we'll talk<font color="#CCCCCC"> about a spark</font>

711
00:29:06,870 --> 00:29:10,919
internalization a little bit so any

712
00:29:09,480 --> 00:29:13,590
other 80s kids in<font color="#E5E5E5"> here you know that's</font>

713
00:29:10,920 --> 00:29:15,660
<font color="#E5E5E5">last row he's got a</font><font color="#CCCCCC"> week draw you hit</font>

714
00:29:13,590 --> 00:29:20,879
<font color="#E5E5E5">one city basically drop straight so</font>

715
00:29:15,660 --> 00:29:22,980
glass draw and forgot strong so spark

716
00:29:20,880 --> 00:29:26,280
uses civilization pretty hardcore right

717
00:29:22,980 --> 00:29:28,080
so we like speed<font color="#E5E5E5"> people do things like</font>

718
00:29:26,280 --> 00:29:30,389
machine learning predictive analytics

719
00:29:28,080 --> 00:29:31,889
real-time stuff it's it's<font color="#E5E5E5"> all about</font>

720
00:29:30,390 --> 00:29:33,750
speed right you don't want those things

721
00:29:31,890 --> 00:29:35,460
to happen slow there's a lot<font color="#CCCCCC"> of missed</font>

722
00:29:33,750 --> 00:29:36,930
opportunities and the scenario think

723
00:29:35,460 --> 00:29:40,320
about you know why need a subscribe

724
00:29:36,930 --> 00:29:42,270
maneuver I mean so you<font color="#E5E5E5"> know those real</font>

725
00:29:40,320 --> 00:29:44,399
time jobs equate to like real people

726
00:29:42,270 --> 00:29:46,410
driving around in cars and stuff like

727
00:29:44,400 --> 00:29:47,970
that so<font color="#E5E5E5"> it's really important that those</font>

728
00:29:46,410 --> 00:29:50,760
<font color="#E5E5E5">things happen fast you don't have a lot</font>

729
00:29:47,970 --> 00:29:52,670
of delays but at the same time spark

730
00:29:50,760 --> 00:29:55,050
makes a lot of intelligent assumptions

731
00:29:52,670 --> 00:29:58,710
with regards to what those three wise

732
00:29:55,050 --> 00:30:01,730
objects actually are right so spark uses

733
00:29:58,710 --> 00:30:04,410
cryo as a default civilization library

734
00:30:01,730 --> 00:30:06,480
so cryo is a really cool library does a

735
00:30:04,410 --> 00:30:07,860
lot of interesting things<font color="#E5E5E5"> I mean allows</font>

736
00:30:06,480 --> 00:30:10,920
you to basically Sarah mais non

737
00:30:07,860 --> 00:30:12,659
serializable objects stuff like that so

738
00:30:10,920 --> 00:30:14,120
there are fortunately without just

739
00:30:12,660 --> 00:30:17,000
basically saying oh<font color="#CCCCCC"> my god it's hopeless</font>

740
00:30:14,120 --> 00:30:20,610
you can actually<font color="#E5E5E5"> turn on basically for</font>

741
00:30:17,000 --> 00:30:21,630
<font color="#CCCCCC">registration of classes and basically</font>

742
00:30:20,610 --> 00:30:23,070
what ends up happening

743
00:30:21,630 --> 00:30:26,430
if you turn that on<font color="#CCCCCC"> we just set</font><font color="#E5E5E5"> the</font>

744
00:30:23,070 --> 00:30:29,550
default false you turn that on and<font color="#E5E5E5"> then</font>

745
00:30:26,430 --> 00:30:31,830
sparco absolute cryo actually do type

746
00:30:29,550 --> 00:30:34,470
registration for respective types that

747
00:30:31,830 --> 00:30:36,060
you're passing around the TLDR that you

748
00:30:34,470 --> 00:30:38,610
make it a lot harder to actually fool

749
00:30:36,060 --> 00:30:40,950
the serializer into invoking something

750
00:30:38,610 --> 00:30:42,449
that it shouldn't invoke so some of the

751
00:30:40,950 --> 00:30:44,940
<font color="#E5E5E5">things you kind of run into these kind</font>

752
00:30:42,450 --> 00:30:46,620
of attacks rates so essentially if you

753
00:30:44,940 --> 00:30:48,900
have stuff<font color="#E5E5E5"> on the classpath right you</font>

754
00:30:46,620 --> 00:30:50,989
can potentially invoke that through

755
00:30:48,900 --> 00:30:53,100
serialization kind of attacks right so

756
00:30:50,990 --> 00:30:55,020
there's some<font color="#E5E5E5"> good research out there I</font>

757
00:30:53,100 --> 00:30:57,120
can't cite that I created all this stuff

758
00:30:55,020 --> 00:30:58,410
the links are up there including just

759
00:30:57,120 --> 00:31:01,199
the code to kind of<font color="#CCCCCC"> run</font><font color="#E5E5E5"> the test cases</font>

760
00:30:58,410 --> 00:31:03,240
here but the basic gist is that if

761
00:31:01,200 --> 00:31:05,630
you're not doing those things you can

762
00:31:03,240 --> 00:31:07,920
<font color="#E5E5E5">tential II you know Pepsi remise data in</font>

763
00:31:05,630 --> 00:31:10,380
<font color="#E5E5E5">completely full sparking executing</font>

764
00:31:07,920 --> 00:31:11,730
things that it wouldn't necessarily want

765
00:31:10,380 --> 00:31:13,890
to execute right so anything that's

766
00:31:11,730 --> 00:31:15,870
available in the classpath potentially

767
00:31:13,890 --> 00:31:17,460
can be invoked<font color="#CCCCCC"> great and you can do</font>

768
00:31:15,870 --> 00:31:20,340
things<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> example abused ero</font>

769
00:31:17,460 --> 00:31:21,810
argument constructors make it easier you

770
00:31:20,340 --> 00:31:24,300
could also call<font color="#E5E5E5"> things like finalize</font>

771
00:31:21,810 --> 00:31:25,590
methods right so do you guys familiar

772
00:31:24,300 --> 00:31:28,350
<font color="#CCCCCC">would probably happens in things like</font>

773
00:31:25,590 --> 00:31:30,360
<font color="#CCCCCC">finalize right you do</font><font color="#E5E5E5"> cleanup you delete</font>

774
00:31:28,350 --> 00:31:33,510
files you blow away resource and stuff

775
00:31:30,360 --> 00:31:36,060
like that so<font color="#CCCCCC"> it can be pretty nasty in a</font>

776
00:31:33,510 --> 00:31:38,310
runtime environment here's an example

777
00:31:36,060 --> 00:31:40,740
again I did not write this its side at

778
00:31:38,310 --> 00:31:42,379
the bottom that's probably impossible to

779
00:31:40,740 --> 00:31:45,000
see there but<font color="#E5E5E5"> just in this example</font>

780
00:31:42,380 --> 00:31:47,520
you're actually basically<font color="#E5E5E5"> sending</font>

781
00:31:45,000 --> 00:31:48,480
certifies object across the wire with

782
00:31:47,520 --> 00:31:50,970
<font color="#CCCCCC">the intention that you're actually</font>

783
00:31:48,480 --> 00:31:52,290
<font color="#E5E5E5">basically going to crush the JVM because</font>

784
00:31:50,970 --> 00:31:55,200
you should basically clobber memory at

785
00:31:52,290 --> 00:31:57,149
that point so<font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of I'd say</font>

786
00:31:55,200 --> 00:31:59,700
right areas within the framework without

787
00:31:57,150 --> 00:32:01,410
kind<font color="#E5E5E5"> of pointing out any specific ones a</font>

788
00:31:59,700 --> 00:32:02,790
lot of interesting research could

789
00:32:01,410 --> 00:32:06,480
probably do in this<font color="#E5E5E5"> area for</font><font color="#CCCCCC"> a patch</font>

790
00:32:02,790 --> 00:32:08,760
astronomy I don't leave it there so

791
00:32:06,480 --> 00:32:11,910
another thing we also have is the pipe

792
00:32:08,760 --> 00:32:14,520
commit so we'll talk about that and what

793
00:32:11,910 --> 00:32:17,220
<font color="#E5E5E5">a piranhas eating at your feet so</font>

794
00:32:14,520 --> 00:32:20,610
sparkly eyes you two pipe things through

795
00:32:17,220 --> 00:32:21,930
invoking things with process builder so

796
00:32:20,610 --> 00:32:25,050
it allows you to basically you know

797
00:32:21,930 --> 00:32:27,540
invoke processes<font color="#E5E5E5"> VOC the shell</font><font color="#CCCCCC"> seem cool</font>

798
00:32:25,050 --> 00:32:31,080
like that<font color="#E5E5E5"> see if you want additionally</font>

799
00:32:27,540 --> 00:32:32,460
you also can invoke external files so we

800
00:32:31,080 --> 00:32:34,860
talked before<font color="#E5E5E5"> about uploading things</font>

801
00:32:32,460 --> 00:32:35,360
within the spark context<font color="#E5E5E5"> so if we're</font>

802
00:32:34,860 --> 00:32:37,428
<font color="#CCCCCC">doing like</font>

803
00:32:35,360 --> 00:32:40,280
I file for example<font color="#CCCCCC"> if we do add file in</font>

804
00:32:37,429 --> 00:32:42,380
that<font color="#E5E5E5"> way and we upload say you know our</font>

805
00:32:40,280 --> 00:32:44,480
code or what a Python script or stuff

806
00:32:42,380 --> 00:32:46,910
like that now we can actually pump data

807
00:32:44,480 --> 00:32:48,770
through spark as its receive so think

808
00:32:46,910 --> 00:32:50,390
about<font color="#E5E5E5"> it for streaming that data we can</font>

809
00:32:48,770 --> 00:32:53,450
take that<font color="#CCCCCC"> data and we can pump it</font>

810
00:32:50,390 --> 00:32:55,610
directly<font color="#CCCCCC"> into process</font><font color="#E5E5E5"> folder to invoke</font>

811
00:32:53,450 --> 00:32:58,309
processes or we could also pass that

812
00:32:55,610 --> 00:32:59,689
into external scripts right and anybody

813
00:32:58,309 --> 00:33:05,420
think anything bad that could happen

814
00:32:59,690 --> 00:33:07,610
there<font color="#CCCCCC"> No so here's an example</font><font color="#E5E5E5"> here just</font>

815
00:33:05,420 --> 00:33:08,870
basically creating you<font color="#CCCCCC"> know and this is</font>

816
00:33:07,610 --> 00:33:11,120
<font color="#CCCCCC">a real code this isn't particularly</font>

817
00:33:08,870 --> 00:33:13,459
useful just to kind of illustrate to you

818
00:33:11,120 --> 00:33:15,110
guys how that works right<font color="#E5E5E5"> um so first</font>

819
00:33:13,460 --> 00:33:17,419
thing we do is we take them list and we

820
00:33:15,110 --> 00:33:20,479
just breaking that up right nothing

821
00:33:17,419 --> 00:33:21,890
nothing too fancy there and but

822
00:33:20,480 --> 00:33:23,030
<font color="#E5E5E5">regardless you can see what it ends up</font>

823
00:33:21,890 --> 00:33:24,919
doing there there is it creates<font color="#E5E5E5"> a</font>

824
00:33:23,030 --> 00:33:26,600
powerful collection so that's kind of

825
00:33:24,919 --> 00:33:28,460
the<font color="#E5E5E5"> magic there is now whatever we want</font>

826
00:33:26,600 --> 00:33:31,549
to<font color="#E5E5E5"> do on those respect to P sub list</font>

827
00:33:28,460 --> 00:33:33,440
would be<font color="#E5E5E5"> parallel straight so kind of</font>

828
00:33:31,549 --> 00:33:35,450
cool but then from there we can

829
00:33:33,440 --> 00:33:37,220
basically do data down<font color="#CCCCCC"> our vb pipe and</font>

830
00:33:35,450 --> 00:33:39,169
so we're not actually passing the data

831
00:33:37,220 --> 00:33:41,330
in it's a kind of a example but

832
00:33:39,169 --> 00:33:43,070
it kind of makes<font color="#E5E5E5"> the point we can pass</font>

833
00:33:41,330 --> 00:33:45,350
whatever we in one and<font color="#CCCCCC"> at that point and</font>

834
00:33:43,070 --> 00:33:47,000
it's ultimately that's going to pass out

835
00:33:45,350 --> 00:33:48,290
the process<font color="#CCCCCC"> build right so process</font>

836
00:33:47,000 --> 00:33:50,690
<font color="#E5E5E5">filled and let's just spawn up one</font>

837
00:33:48,290 --> 00:33:52,190
process of the time and on<font color="#E5E5E5"> the bottom</font>

838
00:33:50,690 --> 00:33:53,929
<font color="#E5E5E5">right you can see what</font><font color="#CCCCCC"> happens when we</font>

839
00:33:52,190 --> 00:33:55,580
actually do a collect so think of

840
00:33:53,929 --> 00:33:57,230
collect when you do make it a MapReduce

841
00:33:55,580 --> 00:33:59,389
world and collect is like kind of like

842
00:33:57,230 --> 00:34:00,919
<font color="#CCCCCC">your reduced you</font><font color="#E5E5E5"> basically pulling any</font>

843
00:33:59,390 --> 00:34:03,380
data down the feed operating<font color="#CCCCCC"> are going</font>

844
00:34:00,919 --> 00:34:05,120
<font color="#CCCCCC">to</font><font color="#E5E5E5"> cluster and you can work</font><font color="#CCCCCC"> with it so</font>

845
00:34:03,380 --> 00:34:08,119
that's kind of<font color="#E5E5E5"> the parallel over to like</font>

846
00:34:05,120 --> 00:34:09,199
your dupes reduce<font color="#E5E5E5"> right so there we do</font>

847
00:34:08,119 --> 00:34:12,169
collect and we<font color="#E5E5E5"> actually do something</font>

848
00:34:09,199 --> 00:34:14,029
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the date so things you can</font>

849
00:34:12,168 --> 00:34:16,250
obviously<font color="#E5E5E5"> do right so you passing it to</font>

850
00:34:14,030 --> 00:34:18,830
are you passing things the shell scripts

851
00:34:16,250 --> 00:34:21,320
<font color="#CCCCCC">you passing things to python scripts</font>

852
00:34:18,830 --> 00:34:23,239
<font color="#CCCCCC">right people love to basically run</font>

853
00:34:21,320 --> 00:34:24,950
either<font color="#E5E5E5"> one should know why people do</font>

854
00:34:23,239 --> 00:34:27,830
this but they really really<font color="#E5E5E5"> love to run</font>

855
00:34:24,949 --> 00:34:29,418
ii though an untrusted data so i

856
00:34:27,830 --> 00:34:31,819
basically say if you're pulling stuff

857
00:34:29,418 --> 00:34:33,259
into other scripts really really think

858
00:34:31,820 --> 00:34:34,340
<font color="#E5E5E5">about basically what you're allowing two</font>

859
00:34:33,260 --> 00:34:37,310
spaces so if you're doing like<font color="#E5E5E5"> a</font>

860
00:34:34,340 --> 00:34:37,629
straight now on I I can't offer you any

861
00:34:37,310 --> 00:34:39,308
hole

862
00:34:37,629 --> 00:34:42,129
that point other than<font color="#E5E5E5"> just not do that</font>

863
00:34:39,309 --> 00:34:45,089
right things like invoking the shell

864
00:34:42,129 --> 00:34:47,469
directly write things like for<font color="#CCCCCC"> example</font>

865
00:34:45,089 --> 00:34:49,480
understanding the data so if we're

866
00:34:47,469 --> 00:34:50,678
passing off with the Python right it's

867
00:34:49,480 --> 00:34:52,329
important to<font color="#E5E5E5"> know basically how it's</font>

868
00:34:50,679 --> 00:34:54,429
going<font color="#E5E5E5"> to handle our data so depending</font><font color="#CCCCCC"> on</font>

869
00:34:52,329 --> 00:34:56,589
what you're actually using our Python

870
00:34:54,429 --> 00:34:58,450
just important to understand the context

871
00:34:56,589 --> 00:34:59,920
of what you're passing it into and how

872
00:34:58,450 --> 00:35:02,288
that<font color="#E5E5E5"> data is going to be handled in a</font>

873
00:34:59,920 --> 00:35:04,329
safe or unsafe manner if you're just

874
00:35:02,289 --> 00:35:05,890
ruin straight static analysis well

875
00:35:04,329 --> 00:35:07,480
<font color="#E5E5E5">obviously you're probably going to miss</font>

876
00:35:05,890 --> 00:35:08,799
with that sink eventually ends<font color="#E5E5E5"> up being</font>

877
00:35:07,480 --> 00:35:11,500
right because you're going<font color="#E5E5E5"> to pass out</font>

878
00:35:08,799 --> 00:35:13,029
<font color="#E5E5E5">of the JVM into something else right so</font>

879
00:35:11,500 --> 00:35:14,740
considerations that if you're just<font color="#E5E5E5"> you</font>

880
00:35:13,029 --> 00:35:16,420
know<font color="#E5E5E5"> providing onkyo static analysis</font>

881
00:35:14,740 --> 00:35:17,618
then maybe you're<font color="#E5E5E5"> going to miss stuff</font>

882
00:35:16,420 --> 00:35:19,750
when you basically cast off into a

883
00:35:17,619 --> 00:35:23,710
Python script just kind of a caveat

884
00:35:19,750 --> 00:35:26,650
there with regards to transport layer

885
00:35:23,710 --> 00:35:28,390
security so does anybody<font color="#E5E5E5"> else get pasted</font>

886
00:35:26,650 --> 00:35:31,089
<font color="#E5E5E5">when people call stuff as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> saw these</font>

887
00:35:28,390 --> 00:35:33,220
days like SSL is dead and like<font color="#E5E5E5"> every</font>

888
00:35:31,089 --> 00:35:35,049
time<font color="#E5E5E5"> somebody says that just shut them</font>

889
00:35:33,220 --> 00:35:37,598
up and remind them that TLS is the way

890
00:35:35,049 --> 00:35:39,490
to go right I just it's just bad to say

891
00:35:37,599 --> 00:35:40,769
that so there's<font color="#CCCCCC"> obviously a lot of</font>

892
00:35:39,490 --> 00:35:43,209
places that you're going<font color="#E5E5E5"> to want to</font>

893
00:35:40,769 --> 00:35:45,609
secure communications come from spark

894
00:35:43,210 --> 00:35:47,289
great so think about over streaming

895
00:35:45,609 --> 00:35:49,619
interfaces when you're actually

896
00:35:47,289 --> 00:35:52,559
interacting with your databases right

897
00:35:49,619 --> 00:35:55,299
spark basically from master to workers

898
00:35:52,559 --> 00:35:56,650
within perspective you know blocks and

899
00:35:55,299 --> 00:35:58,630
stuff like that in the black manager

900
00:35:56,650 --> 00:35:59,609
there's all these different places where

901
00:35:58,630 --> 00:36:03,069
<font color="#E5E5E5">you're going to potentially pass</font>

902
00:35:59,609 --> 00:36:04,390
unencrypted data around right so kind of

903
00:36:03,069 --> 00:36:05,950
without going to follow up spark

904
00:36:04,390 --> 00:36:08,019
actually uses in some scenarios like

905
00:36:05,950 --> 00:36:10,328
taco as its underlying layer to

906
00:36:08,019 --> 00:36:12,160
basically do some that distribution and

907
00:36:10,329 --> 00:36:14,859
it's<font color="#E5E5E5"> basically TCP based communications</font>

908
00:36:12,160 --> 00:36:16,598
right so as you<font color="#CCCCCC"> guys would all imagine</font>

909
00:36:14,859 --> 00:36:18,670
it's probably<font color="#E5E5E5"> important to encrypt our</font>

910
00:36:16,599 --> 00:36:20,049
communications even<font color="#E5E5E5"> behind the firewall</font>

911
00:36:18,670 --> 00:36:22,900
right we've been<font color="#E5E5E5"> through this dance</font>

912
00:36:20,049 --> 00:36:26,650
before so by default spark you can see

913
00:36:22,900 --> 00:36:28,690
the default there is nothing right so

914
00:36:26,650 --> 00:36:30,430
don't actually get any encryption with

915
00:36:28,690 --> 00:36:32,980
regards to the block transfer service

916
00:36:30,430 --> 00:36:35,589
you've actually got to<font color="#E5E5E5"> basically do some</font>

917
00:36:32,980 --> 00:36:39,130
of the steps at<font color="#CCCCCC"> the bottom to do any of</font>

918
00:36:35,589 --> 00:36:40,808
that stuff but basically just kind of

919
00:36:39,130 --> 00:36:42,220
think about<font color="#E5E5E5"> what your plug-in spark into</font>

920
00:36:40,809 --> 00:36:43,960
and I know people you know a lot of

921
00:36:42,220 --> 00:36:45,669
developing shops we work with like we

922
00:36:43,960 --> 00:36:47,109
<font color="#CCCCCC">don't want the performance kid is like</font>

923
00:36:45,670 --> 00:36:49,630
encrypting things behind<font color="#E5E5E5"> the firewall</font>

924
00:36:47,109 --> 00:36:52,960
but I just say do it

925
00:36:49,630 --> 00:36:53,890
um authentication is<font color="#E5E5E5"> sparked so a bunch</font>

926
00:36:52,960 --> 00:36:55,930
<font color="#E5E5E5">of different ways you're going to look</font>

927
00:36:53,890 --> 00:36:58,839
dedicate to spark right there's a REST

928
00:36:55,930 --> 00:37:00,819
API for submitting things so if you want

929
00:36:58,839 --> 00:37:03,160
to<font color="#E5E5E5"> submit to the rest api so as you'd</font>

930
00:37:00,819 --> 00:37:04,900
imagine you'd probably want to secure

931
00:37:03,160 --> 00:37:06,519
that right make people want any cake I

932
00:37:04,900 --> 00:37:09,549
mean the basic gist is if you're

933
00:37:06,519 --> 00:37:11,740
submitting jobs to spark through the

934
00:37:09,549 --> 00:37:14,788
rest api ultimately that<font color="#E5E5E5"> job is code</font>

935
00:37:11,740 --> 00:37:16,720
right so<font color="#CCCCCC"> basically you're essentially a</font>

936
00:37:14,789 --> 00:37:18,519
injecting code at that point in a way

937
00:37:16,720 --> 00:37:19,569
right so anything you be able<font color="#E5E5E5"> to Romulan</font>

938
00:37:18,519 --> 00:37:21,848
potentially be able<font color="#CCCCCC"> to run arbitrary</font>

939
00:37:19,569 --> 00:37:23,380
code on<font color="#E5E5E5"> the spark</font><font color="#CCCCCC"> poster so probably</font>

940
00:37:21,849 --> 00:37:25,269
important to set some kind of

941
00:37:23,380 --> 00:37:26,859
authentication<font color="#E5E5E5"> around that and</font>

942
00:37:25,269 --> 00:37:29,439
additionally between nodes right so you

943
00:37:26,859 --> 00:37:31,359
<font color="#E5E5E5">can use like pre-shared you know</font>

944
00:37:29,440 --> 00:37:33,279
<font color="#E5E5E5">basically shared secrets between nodes</font>

945
00:37:31,359 --> 00:37:34,720
and stuff like that<font color="#CCCCCC"> but probably a good</font>

946
00:37:33,279 --> 00:37:37,269
practice also to to<font color="#E5E5E5"> make sure that the</font>

947
00:37:34,720 --> 00:37:38,769
nodes have to authenticate because

948
00:37:37,269 --> 00:37:40,808
obviously you can imagine if they don't

949
00:37:38,769 --> 00:37:43,689
then you can trick them into doing evil

950
00:37:40,809 --> 00:37:46,180
things it's also important between<font color="#CCCCCC"> all</font>

951
00:37:43,690 --> 00:37:48,700
the different stores so if you use them

952
00:37:46,180 --> 00:37:51,430
like spark I'm like<font color="#E5E5E5"> EMR and stuff like</font>

953
00:37:48,700 --> 00:37:55,149
that using on AWS well like you<font color="#E5E5E5"> can use</font>

954
00:37:51,430 --> 00:37:56,919
like AWS is like I<font color="#CCCCCC"> am I'd any access</font>

955
00:37:55,150 --> 00:37:57,849
stuff and like kind<font color="#E5E5E5"> of makes your life a</font>

956
00:37:56,920 --> 00:38:02,200
little bit easier than with spark

957
00:37:57,849 --> 00:38:05,289
basically offers out so spark as we

958
00:38:02,200 --> 00:38:07,470
mentioned basically creates that web UI

959
00:38:05,289 --> 00:38:09,579
right anytime you create a spark<font color="#CCCCCC"> context</font>

960
00:38:07,470 --> 00:38:10,779
so this<font color="#CCCCCC"> is why</font><font color="#E5E5E5"> I'm officially run it and</font>

961
00:38:09,579 --> 00:38:13,089
stand a little but it looks exactly<font color="#E5E5E5"> the</font>

962
00:38:10,779 --> 00:38:15,309
same in cluster mode so<font color="#E5E5E5"> you can see</font>

963
00:38:13,089 --> 00:38:16,930
obviously you know what jobs are on<font color="#E5E5E5"> you</font>

964
00:38:15,309 --> 00:38:19,150
can do all<font color="#E5E5E5"> that stuff you can see some</font>

965
00:38:16,930 --> 00:38:20,890
of the data so<font color="#E5E5E5"> you really really want to</font>

966
00:38:19,150 --> 00:38:24,220
protect<font color="#E5E5E5"> that right anybody disagrees</font>

967
00:38:20,890 --> 00:38:27,069
that<font color="#CCCCCC"> it's behind</font><font color="#E5E5E5"> the firewall</font><font color="#CCCCCC"> okay</font>

968
00:38:24,220 --> 00:38:29,558
protector so by default you're not

969
00:38:27,069 --> 00:38:31,000
actually requiring authentication so

970
00:38:29,559 --> 00:38:34,059
what are<font color="#CCCCCC"> the things you can do which is</font>

971
00:38:31,000 --> 00:38:35,859
kinda ugly is you can use like a serve

972
00:38:34,059 --> 00:38:38,529
with filter if you want to basically

973
00:38:35,859 --> 00:38:41,098
build that in yourself it uses jetty

974
00:38:38,529 --> 00:38:43,509
pretty much is basically the container

975
00:38:41,099 --> 00:38:44,849
so here's an example<font color="#E5E5E5"> and it's like</font>

976
00:38:43,509 --> 00:38:47,019
impossible to<font color="#E5E5E5"> see from back there</font>

977
00:38:44,849 --> 00:38:48,579
nothing magical if you've ever seen like

978
00:38:47,019 --> 00:38:50,859
<font color="#E5E5E5">a serval filter before it's literally</font>

979
00:38:48,579 --> 00:38:53,019
just<font color="#E5E5E5"> basically checking username paths</font>

980
00:38:50,859 --> 00:38:54,460
and can check walk somewhere else so<font color="#CCCCCC"> you</font>

981
00:38:53,019 --> 00:38:56,558
can put<font color="#E5E5E5"> your own identity but that's</font>

982
00:38:54,460 --> 00:38:59,019
kind of the way<font color="#CCCCCC"> you</font><font color="#E5E5E5"> do it if you use it</font>

983
00:38:56,559 --> 00:39:00,069
out of the box but<font color="#E5E5E5"> I'd encourage you to</font>

984
00:38:59,019 --> 00:39:01,578
<font color="#E5E5E5">definitely make</font><font color="#CCCCCC"> sure you're requiring</font>

985
00:39:00,069 --> 00:39:04,140
<font color="#CCCCCC">someone that occasion</font>

986
00:39:01,579 --> 00:39:07,979
with regards to authorization in spark

987
00:39:04,140 --> 00:39:09,719
so in the UI you can set a CLS with

988
00:39:07,979 --> 00:39:11,848
regard to who can see certain things you

989
00:39:09,719 --> 00:39:13,769
can do certain things if you're given

990
00:39:11,849 --> 00:39:16,739
you you know developers data scientist

991
00:39:13,769 --> 00:39:18,930
access to the UI I probably encourage

992
00:39:16,739 --> 00:39:20,819
you to give them exactly what they need

993
00:39:18,930 --> 00:39:23,640
not let them just basically have carte

994
00:39:20,819 --> 00:39:26,788
blanche<font color="#E5E5E5"> Apache range is really cool my</font>

995
00:39:23,640 --> 00:39:28,339
you to<font color="#E5E5E5"> basically do good stuff with what</font>

996
00:39:26,789 --> 00:39:30,359
a bit more granular authorizations

997
00:39:28,339 --> 00:39:31,739
without talking about<font color="#CCCCCC"> it check</font><font color="#E5E5E5"> it out if</font>

998
00:39:30,359 --> 00:39:34,529
you're<font color="#E5E5E5"> really interested it's a</font>

999
00:39:31,739 --> 00:39:36,359
<font color="#CCCCCC">Hortonworks thing RT DS as we mentioned</font>

1000
00:39:34,529 --> 00:39:39,839
are basically a beautiful and read only

1001
00:39:36,359 --> 00:39:42,239
right<font color="#E5E5E5"> you can but the</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> kind</font>

1002
00:39:39,839 --> 00:39:45,299
<font color="#CCCCCC">of take away from that is so in a</font>

1003
00:39:42,239 --> 00:39:48,029
scenario where imagine that<font color="#E5E5E5"> your spark</font>

1004
00:39:45,299 --> 00:39:50,489
<font color="#CCCCCC">rdd corresponds to like a kafka</font>

1005
00:39:48,029 --> 00:39:53,640
partition right is anybody familiar with

1006
00:39:50,489 --> 00:39:57,930
<font color="#CCCCCC">Casco okay so basic calc is a big</font>

1007
00:39:53,640 --> 00:39:59,549
commitment so two models you<font color="#CCCCCC"> to as you</font>

1008
00:39:57,930 --> 00:40:01,919
<font color="#CCCCCC">get things so works great the streaming</font>

1009
00:39:59,549 --> 00:40:03,390
world so imagine something happens in

1010
00:40:01,920 --> 00:40:05,009
event right calf could just basically

1011
00:40:03,390 --> 00:40:07,979
can broadcast that out so it works on

1012
00:40:05,009 --> 00:40:11,430
<font color="#CCCCCC">basis subscribers and producers so you</font>

1013
00:40:07,979 --> 00:40:12,799
essentially can you know send messages

1014
00:40:11,430 --> 00:40:15,538
they say a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> different places</font><font color="#E5E5E5"> right</font>

1015
00:40:12,799 --> 00:40:17,430
so<font color="#E5E5E5"> capital works with basically topics</font>

1016
00:40:15,539 --> 00:40:18,749
and the<font color="#CCCCCC"> unique thing with calf go</font>

1017
00:40:17,430 --> 00:40:20,519
compared to something like rabbit as

1018
00:40:18,749 --> 00:40:23,669
anybody work with<font color="#CCCCCC"> RabbitMQ or any common</font>

1019
00:40:20,519 --> 00:40:25,200
again<font color="#CCCCCC"> q so the nice thing about Kafka is</font>

1020
00:40:23,670 --> 00:40:27,630
that they also let you partition things

1021
00:40:25,200 --> 00:40:29,489
within those topics so you can have

1022
00:40:27,630 --> 00:40:32,489
people consuming things at different

1023
00:40:29,489 --> 00:40:34,410
speeds within those partitions right so

1024
00:40:32,489 --> 00:40:36,749
you can have multiple you know say

1025
00:40:34,410 --> 00:40:38,339
<font color="#E5E5E5">people subscribing to a topic but they</font>

1026
00:40:36,749 --> 00:40:40,379
can basically consume those of their own

1027
00:40:38,339 --> 00:40:42,029
speed right so you can do in<font color="#CCCCCC"> that</font>

1028
00:40:40,380 --> 00:40:45,180
scenario where<font color="#CCCCCC"> you can have you know</font><font color="#E5E5E5"> a</font>

1029
00:40:42,029 --> 00:40:48,390
<font color="#E5E5E5">topic per user a topic for our partition</font>

1030
00:40:45,180 --> 00:40:50,669
per user partition per sub function

1031
00:40:48,390 --> 00:40:51,900
right um so the thing with that though

1032
00:40:50,670 --> 00:40:54,450
is that's actually going to basic

1033
00:40:51,900 --> 00:40:55,859
correspond<font color="#CCCCCC"> to like an RDD right so the</font>

1034
00:40:54,450 --> 00:40:58,348
scenario there is like so you've

1035
00:40:55,859 --> 00:41:00,509
implemented authentication and like you

1036
00:40:58,349 --> 00:41:03,059
know<font color="#E5E5E5"> basically you know from the other</font>

1037
00:41:00,509 --> 00:41:04,259
end of spark right but at the<font color="#E5E5E5"> same time</font>

1038
00:41:03,059 --> 00:41:05,729
like do you actually know<font color="#CCCCCC"> who's</font>

1039
00:41:04,259 --> 00:41:08,789
<font color="#E5E5E5">published into those topics those</font>

1040
00:41:05,729 --> 00:41:10,919
partitions right so some scenarios scene

1041
00:41:08,789 --> 00:41:13,230
where you can<font color="#CCCCCC"> use you know insecure</font>

1042
00:41:10,920 --> 00:41:16,140
direct object reference like the<font color="#E5E5E5"> hey</font>

1043
00:41:13,230 --> 00:41:18,330
here to talk<font color="#E5E5E5"> to certain partitions so</font>

1044
00:41:16,140 --> 00:41:19,740
kind of doing a threat model of spark so

1045
00:41:18,330 --> 00:41:21,509
imagine you did<font color="#E5E5E5"> things right it's part</font>

1046
00:41:19,740 --> 00:41:22,830
but you<font color="#E5E5E5"> kind of screwed up with the</font>

1047
00:41:21,510 --> 00:41:25,770
things that are talking to spark great

1048
00:41:22,830 --> 00:41:27,869
just kind of things to think<font color="#CCCCCC"> about when</font>

1049
00:41:25,770 --> 00:41:29,310
you're actually crossing that data and

1050
00:41:27,869 --> 00:41:34,710
things to think about is you basically

1051
00:41:29,310 --> 00:41:36,750
secure in that ecosystem right so kind

1052
00:41:34,710 --> 00:41:38,580
of<font color="#CCCCCC"> summing it up you really want to</font>

1053
00:41:36,750 --> 00:41:40,920
think about spark and basically all<font color="#E5E5E5"> the</font>

1054
00:41:38,580 --> 00:41:42,650
things<font color="#E5E5E5"> that plugs into right from the</font>

1055
00:41:40,920 --> 00:41:45,930
framework which includes the core

1056
00:41:42,650 --> 00:41:47,640
graphics and now live and sparks equal

1057
00:41:45,930 --> 00:41:49,379
right but then you think<font color="#CCCCCC"> about all the</font>

1058
00:41:47,640 --> 00:41:52,770
common players that kind<font color="#E5E5E5"> of plug in the</font>

1059
00:41:49,380 --> 00:41:56,160
spark right your data stores everything

1060
00:41:52,770 --> 00:41:57,390
like that this defaults right so as you

1061
00:41:56,160 --> 00:42:00,359
can<font color="#E5E5E5"> seem like</font><font color="#CCCCCC"> they don't</font><font color="#E5E5E5"> really turn on</font>

1062
00:41:57,390 --> 00:42:01,710
<font color="#CCCCCC">a lot of protections out of the gate so</font>

1063
00:42:00,359 --> 00:42:03,990
it's important to kind of know where

1064
00:42:01,710 --> 00:42:06,359
those are and you<font color="#E5E5E5"> know obviously plan</font>

1065
00:42:03,990 --> 00:42:07,618
around those and you know really<font color="#E5E5E5"> think</font>

1066
00:42:06,359 --> 00:42:09,540
<font color="#CCCCCC">about you know so if you</font><font color="#E5E5E5"> see a lot of</font>

1067
00:42:07,619 --> 00:42:12,330
and you know way we basically kind<font color="#E5E5E5"> using</font>

1068
00:42:09,540 --> 00:42:13,920
spark is in a micro service world where

1069
00:42:12,330 --> 00:42:16,080
you know everybody spins things up

1070
00:42:13,920 --> 00:42:18,450
really fast<font color="#E5E5E5"> doesn't obey a proper data</font>

1071
00:42:16,080 --> 00:42:19,920
contracts and stuff like that so<font color="#CCCCCC"> it is</font>

1072
00:42:18,450 --> 00:42:21,529
important to kind of understand the<font color="#E5E5E5"> day</font>

1073
00:42:19,920 --> 00:42:23,820
to the context of what's coming in right

1074
00:42:21,530 --> 00:42:26,640
am I getting<font color="#E5E5E5"> that from a trusted source</font>

1075
00:42:23,820 --> 00:42:28,380
so that somebody basically make me parse

1076
00:42:26,640 --> 00:42:30,180
the JSON file from where I didn't expect

1077
00:42:28,380 --> 00:42:32,640
<font color="#E5E5E5">it and now that job is going to take</font>

1078
00:42:30,180 --> 00:42:33,960
like<font color="#CCCCCC"> a thousand times long right just</font>

1079
00:42:32,640 --> 00:42:36,089
considerations as you're building your

1080
00:42:33,960 --> 00:42:37,590
application<font color="#CCCCCC"> especially if you know your</font>

1081
00:42:36,090 --> 00:42:39,359
application about anybody else the front

1082
00:42:37,590 --> 00:42:40,500
model that application<font color="#E5E5E5"> just things</font>

1083
00:42:39,359 --> 00:42:44,700
really think about<font color="#E5E5E5"> as you're developing</font>

1084
00:42:40,500 --> 00:42:46,920
and that is the<font color="#CCCCCC"> end of our show folks so</font>

1085
00:42:44,700 --> 00:42:52,319
happy to take a little bit of Q&A if

1086
00:42:46,920 --> 00:42:57,619
<font color="#CCCCCC">anybody has it it then going once going</font>

1087
00:42:52,320 --> 00:42:57,619
<font color="#E5E5E5">twice so thank you guys for</font>

1088
00:42:59,589 --> 00:43:01,650
you

