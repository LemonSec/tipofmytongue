1
00:00:02,990 --> 00:00:20,470
[Music]

2
00:00:17,200 --> 00:00:21,850
so we have people trickling in it's fine

3
00:00:20,470 --> 00:00:23,410
<font color="#E5E5E5">I'll go ahead and go through</font><font color="#CCCCCC"> my intro</font>

4
00:00:21,850 --> 00:00:26,160
and i'll probably be walking around just

5
00:00:23,410 --> 00:00:28,330
a little bit how many<font color="#E5E5E5"> of you guys</font><font color="#CCCCCC"> are</font>

6
00:00:26,160 --> 00:00:30,280
mobile security researchers<font color="#E5E5E5"> are</font>

7
00:00:28,330 --> 00:00:33,610
application security researchers in the

8
00:00:30,280 --> 00:00:34,600
mobile space leave you guys<font color="#CCCCCC"> okay cool</font>

9
00:00:33,610 --> 00:00:36,670
we'll go through some of<font color="#CCCCCC"> that some of</font>

10
00:00:34,600 --> 00:00:38,950
the basics as far as full of<font color="#E5E5E5"> mentals for</font>

11
00:00:36,670 --> 00:00:42,400
android<font color="#E5E5E5"> and iOS that way you have some</font>

12
00:00:38,950 --> 00:00:45,100
sort of foundational level and i'll be

13
00:00:42,400 --> 00:00:47,910
posting my slides in my my twitter here

14
00:00:45,100 --> 00:00:52,030
that's my Twitter handle after my talk

15
00:00:47,910 --> 00:00:54,190
so again my name<font color="#CCCCCC"> is Aaron Guzman</font><font color="#E5E5E5"> Twitter</font>

16
00:00:52,030 --> 00:00:56,610
handles right there my email address<font color="#CCCCCC"> if</font>

17
00:00:54,190 --> 00:01:00,070
in any of you<font color="#E5E5E5"> need to get ahold of me</font>

18
00:00:56,610 --> 00:01:01,840
i'm also a one of the contributors to

19
00:01:00,070 --> 00:01:03,520
the mobile security project for a loss

20
00:01:01,840 --> 00:01:08,200
and the mobile<font color="#E5E5E5"> testing guy that's coming</font>

21
00:01:03,520 --> 00:01:10,960
out and the mobile verification guide is

22
00:01:08,200 --> 00:01:12,850
<font color="#E5E5E5">wallet also photograph also the</font>

23
00:01:10,960 --> 00:01:14,890
technical reviewer for sandy's defending

24
00:01:12,850 --> 00:01:17,979
mobile application security essentials

25
00:01:14,890 --> 00:01:21,640
which is their dev 531 course brand new

26
00:01:17,979 --> 00:01:23,289
just came out a couple<font color="#E5E5E5"> months ago</font><font color="#CCCCCC"> i'm</font>

27
00:01:21,640 --> 00:01:25,840
also a board member<font color="#E5E5E5"> for Los Angeles Oh</font>

28
00:01:23,289 --> 00:01:28,960
<font color="#CCCCCC">wass</font><font color="#E5E5E5"> the president for classic</font><font color="#CCCCCC"> utilized</font>

29
00:01:25,840 --> 00:01:31,600
Southern California like I said from<font color="#E5E5E5"> Los</font>

30
00:01:28,960 --> 00:01:33,339
Angeles and here's a book that a I'll

31
00:01:31,600 --> 00:01:35,140
detective editor for for practical and

32
00:01:33,340 --> 00:01:37,929
editor things security like to do a lot

33
00:01:35,140 --> 00:01:40,509
<font color="#E5E5E5">of research and IOT it's easy space as</font>

34
00:01:37,929 --> 00:01:44,920
far as a lot of new developers who who

35
00:01:40,509 --> 00:01:48,580
publish a firmware mobile apps<font color="#CCCCCC"> android</font>

36
00:01:44,920 --> 00:01:50,740
<font color="#CCCCCC">iOS web applications so again easy in</font>

37
00:01:48,580 --> 00:01:53,890
the sense i can find bugs faster than

38
00:01:50,740 --> 00:01:58,419
its saying more mature companies can or

39
00:01:53,890 --> 00:01:59,470
our development software companies so

40
00:01:58,420 --> 00:02:01,090
here's a brief agenda again we're<font color="#E5E5E5"> gonna</font>

41
00:01:59,470 --> 00:02:02,440
go<font color="#CCCCCC"> to some fundamentals we're going</font><font color="#E5E5E5"> to</font>

42
00:02:01,090 --> 00:02:03,720
go<font color="#CCCCCC"> through a lot of actually content</font><font color="#E5E5E5"> i'm</font>

43
00:02:02,440 --> 00:02:07,450
going to try to skip through<font color="#E5E5E5"> some things</font>

44
00:02:03,720 --> 00:02:10,389
in the interest of time we're<font color="#E5E5E5"> going to</font>

45
00:02:07,450 --> 00:02:14,380
talk about what hybrid is some hybrid

46
00:02:10,389 --> 00:02:16,239
apps some of the common<font color="#E5E5E5"> findings some</font>

47
00:02:14,380 --> 00:02:18,760
demos<font color="#CCCCCC"> it's i'll give some demos that say</font>

48
00:02:16,240 --> 00:02:21,760
<font color="#E5E5E5">on some of the recent security bugs</font><font color="#CCCCCC"> i</font>

49
00:02:18,760 --> 00:02:24,880
found some IOT devices but through the

50
00:02:21,760 --> 00:02:26,109
mobile apps and then some<font color="#CCCCCC"> of the some of</font>

51
00:02:24,880 --> 00:02:28,030
the tools that i use and<font color="#E5E5E5"> also</font>

52
00:02:26,110 --> 00:02:29,349
demonstrate those tools free and

53
00:02:28,030 --> 00:02:30,230
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> by the way so all these</font>

54
00:02:29,349 --> 00:02:32,209
tools

55
00:02:30,230 --> 00:02:34,340
you don't have to<font color="#CCCCCC"> have licenses or</font>

56
00:02:32,209 --> 00:02:38,200
commercial versions they're all free<font color="#E5E5E5"> all</font>

57
00:02:34,340 --> 00:02:40,220
get up don't I thump base oddly enough

58
00:02:38,200 --> 00:02:45,290
then we'll get to some questions in the

59
00:02:40,220 --> 00:02:47,540
end so Android most of you know it's

60
00:02:45,290 --> 00:02:51,379
based off of java android version of

61
00:02:47,540 --> 00:02:54,170
<font color="#CCCCCC">Java or C C++ you have the Android</font>

62
00:02:51,379 --> 00:02:56,510
runtime dalvik VM that converts to Java

63
00:02:54,170 --> 00:03:00,589
classes to<font color="#E5E5E5"> java bytecode or</font><font color="#CCCCCC"> two techspot</font>

64
00:02:56,510 --> 00:03:03,109
code and the core<font color="#CCCCCC"> components of an</font>

65
00:03:00,590 --> 00:03:06,459
<font color="#E5E5E5">Android application our activities</font>

66
00:03:03,110 --> 00:03:09,950
intense services broadcast receivers and

67
00:03:06,459 --> 00:03:12,739
content providers and activities are

68
00:03:09,950 --> 00:03:14,328
basically user interfaces within an

69
00:03:12,739 --> 00:03:17,420
Android application so you<font color="#E5E5E5"> click through</font>

70
00:03:14,329 --> 00:03:19,370
<font color="#E5E5E5">it's a button shows another user</font>

71
00:03:17,420 --> 00:03:22,429
<font color="#E5E5E5">interface</font><font color="#CCCCCC"> it's a login page that's one</font>

72
00:03:19,370 --> 00:03:24,319
activity and intent serves as an<font color="#E5E5E5"> actions</font>

73
00:03:22,430 --> 00:03:26,829
so let's say once you<font color="#E5E5E5"> login username or</font>

74
00:03:24,319 --> 00:03:29,390
password there's an intent that

75
00:03:26,829 --> 00:03:33,260
authenticates the user on in the back

76
00:03:29,390 --> 00:03:36,349
end<font color="#CCCCCC"> basically to show the authenticated</font>

77
00:03:33,260 --> 00:03:43,220
pages for example or activities services

78
00:03:36,349 --> 00:03:44,418
<font color="#E5E5E5">are our functions or our</font><font color="#CCCCCC"> are say actions</font>

79
00:03:43,220 --> 00:03:46,250
that happen in the background that don't

80
00:03:44,419 --> 00:03:49,630
have user interfaces let's say like like

81
00:03:46,250 --> 00:03:51,700
downloading a file would<font color="#CCCCCC"> be a service</font>

82
00:03:49,630 --> 00:03:53,388
within an<font color="#CCCCCC"> android application</font>

83
00:03:51,700 --> 00:03:56,238
broadcastreceiver<font color="#E5E5E5"> are mostly</font>

84
00:03:53,389 --> 00:03:58,519
notifications content providers are

85
00:03:56,239 --> 00:04:00,799
usually something like sequel like

86
00:03:58,519 --> 00:04:02,690
databases within a sandbox within the

87
00:04:00,799 --> 00:04:04,419
application sandbox and we'll go through

88
00:04:02,690 --> 00:04:08,780
those a little<font color="#CCCCCC"> bit and what to look for</font>

89
00:04:04,419 --> 00:04:10,940
and keep keep note that the activities

90
00:04:08,780 --> 00:04:13,040
the services broadcast receivers and

91
00:04:10,940 --> 00:04:15,169
content providers can also be exposed to

92
00:04:13,040 --> 00:04:17,659
third-party applications on<font color="#CCCCCC"> the device</font>

93
00:04:15,169 --> 00:04:19,639
and what<font color="#E5E5E5"> that is called is as exponent</font>

94
00:04:17,660 --> 00:04:21,799
so if you want to have an act and

95
00:04:19,639 --> 00:04:24,050
activity available to a third party

96
00:04:21,798 --> 00:04:26,479
application you have<font color="#CCCCCC"> to export</font><font color="#E5E5E5"> that</font>

97
00:04:24,050 --> 00:04:30,550
activity so what will go through where

98
00:04:26,479 --> 00:04:33,380
<font color="#E5E5E5">you define the export setting or</font>

99
00:04:30,550 --> 00:04:35,750
directive to be<font color="#E5E5E5"> available to a third</font>

100
00:04:33,380 --> 00:04:37,099
party application but just know you know

101
00:04:35,750 --> 00:04:40,010
<font color="#E5E5E5">obviously that's going to be at risk if</font>

102
00:04:37,099 --> 00:04:43,280
if there's an exported or activity that

103
00:04:40,010 --> 00:04:45,950
this is a banking application that

104
00:04:43,280 --> 00:04:47,330
sports let's say a withdraw page when

105
00:04:45,950 --> 00:04:50,479
you should only<font color="#E5E5E5"> be authenticated to see</font>

106
00:04:47,330 --> 00:04:52,460
it or any other let's say if you're

107
00:04:50,480 --> 00:04:54,770
using a camera and<font color="#E5E5E5"> you could view the</font>

108
00:04:52,460 --> 00:04:56,180
camera free without authentication or

109
00:04:54,770 --> 00:04:57,889
bypass authentication because the

110
00:04:56,180 --> 00:04:59,780
activity is exported something to keep

111
00:04:57,889 --> 00:05:02,389
in mind and again same thing with

112
00:04:59,780 --> 00:05:05,239
services broadcast receivers you can you

113
00:05:02,389 --> 00:05:07,610
can basically drain battery life through

114
00:05:05,240 --> 00:05:10,030
services and broadcast receivers by you

115
00:05:07,610 --> 00:05:12,380
know say doing a while loop for example

116
00:05:10,030 --> 00:05:14,599
in<font color="#E5E5E5"> content providers same thing you're</font>

117
00:05:12,380 --> 00:05:17,300
exposing the<font color="#E5E5E5"> secret light database or</font>

118
00:05:14,600 --> 00:05:20,660
credential storage potentially to

119
00:05:17,300 --> 00:05:22,460
another<font color="#E5E5E5"> third-party application so also</font>

120
00:05:20,660 --> 00:05:24,440
<font color="#CCCCCC">an Android you</font><font color="#E5E5E5"> have google bouncer which</font>

121
00:05:22,460 --> 00:05:27,349
is when<font color="#E5E5E5"> you submit the applications</font>

122
00:05:24,440 --> 00:05:30,110
through google play google bouncer is

123
00:05:27,350 --> 00:05:32,330
basically a virtual machine that that

124
00:05:30,110 --> 00:05:34,910
<font color="#CCCCCC">google puts see application to basically</font>

125
00:05:32,330 --> 00:05:37,669
analyze for novel is malicious activity

126
00:05:34,910 --> 00:05:39,470
of vulnerable libraries a little bit

127
00:05:37,669 --> 00:05:41,349
usually<font color="#E5E5E5"> like open SS a little there they</font>

128
00:05:39,470 --> 00:05:44,300
will alert the application developers

129
00:05:41,350 --> 00:05:47,720
not too much in detail as much as

130
00:05:44,300 --> 00:05:49,370
opposed to the App Store<font color="#CCCCCC"> for iOS but</font>

131
00:05:47,720 --> 00:05:51,890
just keep in<font color="#CCCCCC"> mind that there is some</font>

132
00:05:49,370 --> 00:05:54,919
sort of baseline level security or

133
00:05:51,890 --> 00:05:59,210
activities that Google is our<font color="#CCCCCC"> are</font>

134
00:05:54,919 --> 00:06:01,370
monitoring for as far as it's known no

135
00:05:59,210 --> 00:06:05,030
malicious or backdoor behavior for for

136
00:06:01,370 --> 00:06:07,700
<font color="#E5E5E5">Android applications so the first place</font>

137
00:06:05,030 --> 00:06:09,440
<font color="#E5E5E5">you're going to look within an Android</font>

138
00:06:07,700 --> 00:06:10,099
application when you get an android app

139
00:06:09,440 --> 00:06:13,250
you're going<font color="#E5E5E5"> to look at the</font>

140
00:06:10,100 --> 00:06:15,979
androidmanifest.xml and right here<font color="#CCCCCC"> you</font>

141
00:06:13,250 --> 00:06:19,250
can't see it very well but so you have

142
00:06:15,979 --> 00:06:20,960
an activity and this is<font color="#E5E5E5"> actually with</font>

143
00:06:19,250 --> 00:06:22,580
what the<font color="#CCCCCC"> manifest</font><font color="#E5E5E5"> you define all the</font>

144
00:06:20,960 --> 00:06:24,859
core components<font color="#CCCCCC"> that I talked about</font><font color="#E5E5E5"> the</font>

145
00:06:22,580 --> 00:06:28,039
activities and services broadcast

146
00:06:24,860 --> 00:06:30,380
receivers content providers and you also

147
00:06:28,039 --> 00:06:32,570
<font color="#E5E5E5">we're not here</font><font color="#CCCCCC"> when it says activity you</font>

148
00:06:30,380 --> 00:06:35,539
also would see exporting equals true if

149
00:06:32,570 --> 00:06:37,550
<font color="#E5E5E5">you wanted to expose that activity to a</font>

150
00:06:35,539 --> 00:06:40,280
<font color="#CCCCCC">third party application on the android</font>

151
00:06:37,550 --> 00:06:42,710
device it's also important to note that

152
00:06:40,280 --> 00:06:46,190
within the<font color="#CCCCCC"> android manifest permissions</font>

153
00:06:42,710 --> 00:06:47,960
are defined so if an application needs

154
00:06:46,190 --> 00:06:49,910
access to the<font color="#E5E5E5"> internet if the</font>

155
00:06:47,960 --> 00:06:52,760
application needs<font color="#CCCCCC"> inter-process</font>

156
00:06:49,910 --> 00:06:55,760
<font color="#E5E5E5">communication to another application on</font>

157
00:06:52,760 --> 00:06:56,940
the device it would<font color="#E5E5E5"> be defined within</font>

158
00:06:55,760 --> 00:06:59,849
the<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> manifest</font>

159
00:06:56,940 --> 00:07:02,280
<font color="#CCCCCC">XML file oddly enough a lot</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> ex a</font>

160
00:06:59,850 --> 00:07:07,080
lot of the configuration files in

161
00:07:02,280 --> 00:07:08,580
<font color="#CCCCCC">Android our XML even let's say not only</font>

162
00:07:07,080 --> 00:07:10,650
the permissions but when you go on to an

163
00:07:08,580 --> 00:07:12,539
<font color="#E5E5E5">Android device and you want to see let's</font>

164
00:07:10,650 --> 00:07:14,400
say you have emulator or you have a

165
00:07:12,540 --> 00:07:16,170
rooted device and you<font color="#E5E5E5"> want it to see</font>

166
00:07:14,400 --> 00:07:19,919
every registered interprocess

167
00:07:16,170 --> 00:07:21,710
communication service you would just in

168
00:07:19,920 --> 00:07:24,840
the command line if you go adb shell

169
00:07:21,710 --> 00:07:26,729
services of a service spatial 'used and

170
00:07:24,840 --> 00:07:32,070
you will see all all the inter process

171
00:07:26,730 --> 00:07:33,030
communication defined services there so

172
00:07:32,070 --> 00:07:34,380
again this is<font color="#CCCCCC"> the first place</font><font color="#E5E5E5"> you're</font>

173
00:07:33,030 --> 00:07:36,840
going<font color="#E5E5E5"> to look you'll get an idea as to</font>

174
00:07:34,380 --> 00:07:38,130
the attack surface again because you're

175
00:07:36,840 --> 00:07:42,260
looking<font color="#E5E5E5"> at the core</font><font color="#CCCCCC"> components of an</font>

176
00:07:38,130 --> 00:07:42,260
<font color="#E5E5E5">Android application and the permissions</font>

177
00:07:43,430 --> 00:07:47,190
so the android framework<font color="#E5E5E5"> i'm not going</font>

178
00:07:45,990 --> 00:07:48,720
<font color="#CCCCCC">to</font><font color="#E5E5E5"> go through top to bottom i'm just</font>

179
00:07:47,190 --> 00:07:51,150
going to differentiate right here from

180
00:07:48,720 --> 00:07:53,790
the<font color="#E5E5E5"> linux kernel of what the</font><font color="#CCCCCC"> android</font>

181
00:07:51,150 --> 00:07:55,890
kernel is as opposed to let's say a

182
00:07:53,790 --> 00:07:58,850
<font color="#E5E5E5">regular linux kernel a boon to our</font>

183
00:07:55,890 --> 00:08:02,760
clinics whatever whatever your flavor is

184
00:07:58,850 --> 00:08:06,120
so<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to focus on the binder for</font>

185
00:08:02,760 --> 00:08:08,550
<font color="#CCCCCC">up interprocess communication as well as</font>

186
00:08:06,120 --> 00:08:10,380
paranoid networking which is not right

187
00:08:08,550 --> 00:08:12,450
here at the bottom<font color="#E5E5E5"> but it's all done by</font>

188
00:08:10,380 --> 00:08:18,060
<font color="#E5E5E5">the heavy lifting of the colonel the</font>

189
00:08:12,450 --> 00:08:20,669
<font color="#E5E5E5">android colonel so I said before so I</font>

190
00:08:18,060 --> 00:08:22,200
mean the the Android I guess ecosystem

191
00:08:20,669 --> 00:08:24,570
is based upon open source libraries

192
00:08:22,200 --> 00:08:27,479
right kind<font color="#E5E5E5"> of know</font><font color="#CCCCCC"> that already open</font>

193
00:08:24,570 --> 00:08:30,830
handset alliance and binder is based

194
00:08:27,480 --> 00:08:33,060
upon open binder still open source

195
00:08:30,830 --> 00:08:34,829
obviously have you ever<font color="#CCCCCC"> Lee modified but</font>

196
00:08:33,059 --> 00:08:39,630
the result is<font color="#CCCCCC"> better</font><font color="#E5E5E5"> research is done</font>

197
00:08:34,830 --> 00:08:42,479
here and what the what binder does is

198
00:08:39,630 --> 00:08:45,240
basically provides as a proxy between

199
00:08:42,479 --> 00:08:47,370
two processes between the user ID and<font color="#CCCCCC"> a</font>

200
00:08:45,240 --> 00:08:50,130
process ID and again alternate<font color="#E5E5E5"> the</font>

201
00:08:47,370 --> 00:08:52,560
kernel level and it checks the<font color="#E5E5E5"> user ID</font>

202
00:08:50,130 --> 00:08:53,700
which is<font color="#E5E5E5"> the application</font><font color="#CCCCCC"> and again every</font>

203
00:08:52,560 --> 00:08:55,699
time in that application is installed

204
00:08:53,700 --> 00:08:59,190
device you have a randomly generated

205
00:08:55,700 --> 00:09:02,150
user ID<font color="#CCCCCC"> and then you have a process ID</font>

206
00:08:59,190 --> 00:09:05,970
so acts as a proxy here as you can see

207
00:09:02,150 --> 00:09:07,890
process a wants access to process B you

208
00:09:05,970 --> 00:09:09,590
have the binder driver which also acts

209
00:09:07,890 --> 00:09:13,310
as the proxy here

210
00:09:09,590 --> 00:09:15,590
and so process a is asking basically

211
00:09:13,310 --> 00:09:18,890
binder if process if<font color="#CCCCCC"> it can access</font>

212
00:09:15,590 --> 00:09:21,250
<font color="#E5E5E5">access process these threads and now</font>

213
00:09:18,890 --> 00:09:23,480
there is a nut<font color="#E5E5E5"> bi-directional but a</font>

214
00:09:21,250 --> 00:09:28,250
one-way communication which in process

215
00:09:23,480 --> 00:09:32,320
and process<font color="#E5E5E5"> be because let's say there</font>

216
00:09:28,250 --> 00:09:34,820
was a permission let's say in you know

217
00:09:32,320 --> 00:09:38,320
activity that was exported and it was

218
00:09:34,820 --> 00:09:40,460
defined<font color="#E5E5E5"> within the androidmanifest.xml</font>

219
00:09:38,320 --> 00:09:43,250
but<font color="#E5E5E5"> again it just acts as the middleman</font>

220
00:09:40,460 --> 00:09:46,010
does the heavy lifting between the the

221
00:09:43,250 --> 00:09:48,500
user ID<font color="#E5E5E5"> and the process ID the e the EU</font>

222
00:09:46,010 --> 00:09:52,069
ID is what the technical term is and the

223
00:09:48,500 --> 00:09:56,690
process ID and again done by done by the

224
00:09:52,070 --> 00:09:59,450
<font color="#E5E5E5">kernel and done by binder and then</font>

225
00:09:56,690 --> 00:10:01,640
paranoid networking so again paranoid

226
00:09:59,450 --> 00:10:03,740
networking is basically verifying that

227
00:10:01,640 --> 00:10:06,260
the application<font color="#E5E5E5"> is in the correct group</font>

228
00:10:03,740 --> 00:10:11,170
to have network capabilities whether

229
00:10:06,260 --> 00:10:15,220
that be internet ipv4<font color="#E5E5E5"> ipv6 Bluetooth and</font>

230
00:10:11,170 --> 00:10:19,280
I get also defined within the

231
00:10:15,220 --> 00:10:20,480
androidmanifest.xml automated wise as

232
00:10:19,280 --> 00:10:23,800
far as when<font color="#CCCCCC"> you install the application</font>

233
00:10:20,480 --> 00:10:28,190
and<font color="#E5E5E5"> the permission is a needs internet</font>

234
00:10:23,800 --> 00:10:31,069
from from the<font color="#E5E5E5"> Android manifest these are</font>

235
00:10:28,190 --> 00:10:34,100
the proper group the group IDs here so

236
00:10:31,070 --> 00:10:35,630
it checks between the group IDs and the

237
00:10:34,100 --> 00:10:38,960
colonel checks between the group IDs as

238
00:10:35,630 --> 00:10:41,840
well as the the user IDs to see if

239
00:10:38,960 --> 00:10:44,510
network capability that is<font color="#CCCCCC"> available for</font>

240
00:10:41,840 --> 00:10:46,250
the application so things<font color="#E5E5E5"> to know</font>

241
00:10:44,510 --> 00:10:47,840
paranoid networking open binder or

242
00:10:46,250 --> 00:10:50,090
binder for inter process communication

243
00:10:47,840 --> 00:10:53,120
with to differentiate errs between a

244
00:10:50,090 --> 00:10:56,600
regular Android<font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> Android</font>

245
00:10:53,120 --> 00:10:58,730
kernel and a Linux kernel so we'll<font color="#E5E5E5"> get</font>

246
00:10:56,600 --> 00:11:02,360
back to<font color="#E5E5E5"> those in a second but as far as</font>

247
00:10:58,730 --> 00:11:03,890
the<font color="#E5E5E5"> Android sandbox is concerned now I</font>

248
00:11:02,360 --> 00:11:04,880
talked about<font color="#E5E5E5"> when application is</font>

249
00:11:03,890 --> 00:11:08,990
installed<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a randomly generated</font>

250
00:11:04,880 --> 00:11:11,330
user ID so in this instance we have my

251
00:11:08,990 --> 00:11:16,070
app and my other app both with two

252
00:11:11,330 --> 00:11:20,120
different user IDs now my app wants to

253
00:11:16,070 --> 00:11:22,790
access<font color="#CCCCCC"> my other applications sandbox but</font>

254
00:11:20,120 --> 00:11:23,089
like standard Linux if the two if the

255
00:11:22,790 --> 00:11:27,279
two

256
00:11:23,089 --> 00:11:29,269
user<font color="#CCCCCC"> IDs aren't the same or don't have</font>

257
00:11:27,279 --> 00:11:30,559
discretionary access meaning they didn't

258
00:11:29,269 --> 00:11:33,740
give the other application permission

259
00:11:30,559 --> 00:11:35,209
then there's no access granted we can

260
00:11:33,740 --> 00:11:37,910
standard Linux there's nothing<font color="#E5E5E5"> really</font>

261
00:11:35,209 --> 00:11:41,839
fancy about Android sandboxing it's

262
00:11:37,910 --> 00:11:45,110
basically<font color="#E5E5E5"> Android permissions based upon</font>

263
00:11:41,839 --> 00:11:46,430
discretionary access control and not

264
00:11:45,110 --> 00:11:53,990
something<font color="#E5E5E5"> like mandatory access control</font>

265
00:11:46,430 --> 00:11:56,839
meaning selinux for example so for for

266
00:11:53,990 --> 00:11:59,209
android apps the file extensions are EPK

267
00:11:56,839 --> 00:12:02,540
so you get<font color="#CCCCCC"> a file or you download an</font>

268
00:11:59,209 --> 00:12:04,128
android app so<font color="#E5E5E5"> it's app APK it's</font>

269
00:12:02,540 --> 00:12:06,410
basically an archive file meaning a zip

270
00:12:04,129 --> 00:12:10,040
file so you can do is basically extract

271
00:12:06,410 --> 00:12:13,160
that that or rename that APK file to a

272
00:12:10,040 --> 00:12:15,050
zip file<font color="#E5E5E5"> and extract it and you hear the</font>

273
00:12:13,160 --> 00:12:18,230
contents of<font color="#E5E5E5"> which which it'll look like</font>

274
00:12:15,050 --> 00:12:20,449
actually androidmanifest.xml you

275
00:12:18,230 --> 00:12:25,329
actually have assets classes debts which

276
00:12:20,449 --> 00:12:29,209
is what the dalvik<font color="#CCCCCC"> VM or edward runtime</font>

277
00:12:25,329 --> 00:12:31,819
the text back code what it runs the

278
00:12:29,209 --> 00:12:35,859
library folder the meta-inf folder which

279
00:12:31,819 --> 00:12:38,420
is<font color="#E5E5E5"> where the developer certificate</font>

280
00:12:35,860 --> 00:12:40,850
signing certificates<font color="#CCCCCC"> ara and the</font>

281
00:12:38,420 --> 00:12:45,769
resource folders are at resource folders

282
00:12:40,850 --> 00:12:49,490
as well so again a bit basically<font color="#CCCCCC"> just a</font>

283
00:12:45,769 --> 00:12:52,790
zip file extract it and in the Dex file

284
00:12:49,490 --> 00:12:55,879
this is usually where you'll have a java

285
00:12:52,790 --> 00:12:58,730
decompiler convert that to<font color="#CCCCCC"> java classes</font>

286
00:12:55,879 --> 00:13:00,559
and then use a java decompiler or<font color="#CCCCCC"> 3</font>

287
00:12:58,730 --> 00:13:03,709
which<font color="#E5E5E5"> i'll show you in a little bit in</font>

288
00:13:00,559 --> 00:13:06,079
the demos depending<font color="#CCCCCC"> on how you know it</font>

289
00:13:03,709 --> 00:13:09,439
converts other<font color="#CCCCCC"> Java classes from the</font>

290
00:13:06,079 --> 00:13:12,709
decks by code to basically readable

291
00:13:09,439 --> 00:13:15,559
pseudocode very very easy takes you know

292
00:13:12,709 --> 00:13:17,089
a minute or two max and you even<font color="#CCCCCC"> use</font>

293
00:13:15,559 --> 00:13:19,459
<font color="#CCCCCC">three which</font><font color="#E5E5E5"> I'll show you there's a tool</font>

294
00:13:17,089 --> 00:13:21,709
that can do three at one time parallel

295
00:13:19,459 --> 00:13:25,339
three different java decompiler and

296
00:13:21,709 --> 00:13:29,689
again the basic format of a droid APK

297
00:13:25,339 --> 00:13:31,740
file structure go into the iOS side of

298
00:13:29,689 --> 00:13:35,680
things here

299
00:13:31,740 --> 00:13:38,019
primarily based upon objective-c<font color="#E5E5E5"> Swift</font>

300
00:13:35,680 --> 00:13:41,349
and it's<font color="#E5E5E5"> a messaging language so if you</font>

301
00:13:38,019 --> 00:13:44,050
want to hook basically with<font color="#E5E5E5"> gdb or some</font>

302
00:13:41,350 --> 00:13:47,380
sort of runtime debugger you would hook

303
00:13:44,050 --> 00:13:50,199
objective-c message send all

304
00:13:47,380 --> 00:13:53,439
applications are signed and that's

305
00:13:50,200 --> 00:13:55,570
basically to let users know that it's

306
00:13:53,440 --> 00:13:57,880
tried<font color="#E5E5E5"> it's stretched it from us from a</font>

307
00:13:55,570 --> 00:14:03,220
source such as Apple to run on the

308
00:13:57,880 --> 00:14:05,320
device and Apple up the App Store review

309
00:14:03,220 --> 00:14:08,050
process is much more stringent if you

310
00:14:05,320 --> 00:14:10,029
submit an application for for Android

311
00:14:08,050 --> 00:14:12,250
it'll be published the same day if you

312
00:14:10,029 --> 00:14:15,970
submit an application for iOS it'll<font color="#CCCCCC"> take</font>

313
00:14:12,250 --> 00:14:17,440
two days sometimes even<font color="#CCCCCC"> three days not</font>

314
00:14:15,970 --> 00:14:19,600
that iOS reverse engineers the

315
00:14:17,440 --> 00:14:22,120
application or anything they<font color="#CCCCCC"> just kind</font>

316
00:14:19,600 --> 00:14:24,329
of go more<font color="#CCCCCC"> in-depth they require more</font>

317
00:14:22,120 --> 00:14:27,970
detail as far as why an application

318
00:14:24,329 --> 00:14:32,310
needs access to what's called protected

319
00:14:27,970 --> 00:14:34,870
classes within within<font color="#CCCCCC"> objective-c or iOS</font>

320
00:14:32,310 --> 00:14:37,920
function so let's say if an application

321
00:14:34,870 --> 00:14:40,060
needs access to calendar data of the

322
00:14:37,920 --> 00:14:42,310
developer would actually have<font color="#CCCCCC"> to define</font>

323
00:14:40,060 --> 00:14:44,439
and write a sentence as to why they need

324
00:14:42,310 --> 00:14:46,000
access to that calendar data and then

325
00:14:44,440 --> 00:14:47,920
also if<font color="#CCCCCC"> their need access to a location</font>

326
00:14:46,000 --> 00:14:49,540
<font color="#E5E5E5">all the time they actually have to</font>

327
00:14:47,920 --> 00:14:50,910
define why they need access and then

328
00:14:49,540 --> 00:14:53,380
where they're storing that data and

329
00:14:50,910 --> 00:14:57,370
where they define that is within the

330
00:14:53,380 --> 00:14:58,810
info.plist here so the equivalent<font color="#E5E5E5"> to the</font>

331
00:14:57,370 --> 00:15:00,190
<font color="#CCCCCC">Android manifest the first place</font><font color="#E5E5E5"> you're</font>

332
00:14:58,810 --> 00:15:01,649
going<font color="#E5E5E5"> to look in Android is Edgar meta</font>

333
00:15:00,190 --> 00:15:04,540
fest first place<font color="#E5E5E5"> you're going to look</font>

334
00:15:01,649 --> 00:15:07,329
for an iOS application is the<font color="#CCCCCC"> info.plist</font>

335
00:15:04,540 --> 00:15:11,849
<font color="#E5E5E5">file they're both XML files this is just</font>

336
00:15:07,329 --> 00:15:16,060
the<font color="#CCCCCC"> Xcode version here which is ide for</font>

337
00:15:11,850 --> 00:15:19,149
for iOS or OSX anything anything

338
00:15:16,060 --> 00:15:20,800
basically Apple but you can't really<font color="#E5E5E5"> see</font>

339
00:15:19,149 --> 00:15:23,589
because the fonts too small here but

340
00:15:20,800 --> 00:15:27,149
here is one of<font color="#E5E5E5"> those definitions for</font>

341
00:15:23,589 --> 00:15:29,380
using location and it's basically

342
00:15:27,149 --> 00:15:32,680
explaining to Apple why they need a

343
00:15:29,380 --> 00:15:36,189
location and this was for kevo which is

344
00:15:32,680 --> 00:15:37,779
a smartlock application so it needs to

345
00:15:36,190 --> 00:15:40,449
<font color="#E5E5E5">know where a location is in order to</font>

346
00:15:37,779 --> 00:15:42,390
unlock your unlock your door lock your

347
00:15:40,449 --> 00:15:46,649
door things like that

348
00:15:42,390 --> 00:15:49,600
you'll also find in the info ducky list

349
00:15:46,649 --> 00:15:50,940
other<font color="#E5E5E5"> details sometimes we find API keys</font>

350
00:15:49,600 --> 00:15:53,529
and same thing with<font color="#CCCCCC"> Android manifest</font>

351
00:15:50,940 --> 00:15:56,950
whether<font color="#E5E5E5"> that be for their buck crashing</font>

352
00:15:53,529 --> 00:15:59,439
<font color="#E5E5E5">their crash your linux sometimes even</font>

353
00:15:56,950 --> 00:16:02,820
for their own custom api's<font color="#E5E5E5"> I don't know</font>

354
00:15:59,440 --> 00:16:06,430
why it's in clear text xml files

355
00:16:02,820 --> 00:16:07,990
sometimes not within info<font color="#E5E5E5"> dot P list</font>

356
00:16:06,430 --> 00:16:10,839
let's go back to the<font color="#E5E5E5"> Adrian manifest</font>

357
00:16:07,990 --> 00:16:12,250
you'll find a secret codes it's a enter

358
00:16:10,839 --> 00:16:16,080
<font color="#E5E5E5">one two three</font><font color="#CCCCCC"> four five six on your</font>

359
00:16:12,250 --> 00:16:19,510
<font color="#E5E5E5">phone keypad now now the application</font>

360
00:16:16,080 --> 00:16:20,680
that you're using<font color="#E5E5E5"> will not be pointing</font>

361
00:16:19,510 --> 00:16:24,279
to production will be<font color="#E5E5E5"> pointing to</font>

362
00:16:20,680 --> 00:16:25,779
staging or or start up a new a new<font color="#E5E5E5"> menu</font>

363
00:16:24,279 --> 00:16:28,240
for example open up a new menu in the

364
00:16:25,779 --> 00:16:31,300
application they're out there so again

365
00:16:28,240 --> 00:16:35,260
first<font color="#E5E5E5"> places to look but back to the</font>

366
00:16:31,300 --> 00:16:38,500
info.plist you also find for iOS you

367
00:16:35,260 --> 00:16:41,860
have URL schemes for inter process

368
00:16:38,500 --> 00:16:43,660
communication and<font color="#E5E5E5"> I believe right here</font>

369
00:16:41,860 --> 00:16:44,890
this is actually for Domino's Pizza been

370
00:16:43,660 --> 00:16:47,079
doing some research I want some free

371
00:16:44,890 --> 00:16:51,910
pizzas I've been looking at some some

372
00:16:47,080 --> 00:16:54,040
pizza absolutely aha but for<font color="#CCCCCC"> for so URL</font>

373
00:16:51,910 --> 00:16:55,900
schemes are a way for for inter process

374
00:16:54,040 --> 00:16:58,449
communication for iOS so just like<font color="#CCCCCC"> you</font>

375
00:16:55,900 --> 00:17:00,790
type in HTTP<font color="#CCCCCC"> Cola for except for such</font>

376
00:16:58,450 --> 00:17:03,310
new URL bar in this case it's domino's

377
00:17:00,790 --> 00:17:06,309
pizza<font color="#E5E5E5"> co and force that's four slash and</font>

378
00:17:03,310 --> 00:17:08,500
that's how you communicate with Domino's

379
00:17:06,309 --> 00:17:12,389
for example and if another app within

380
00:17:08,500 --> 00:17:14,319
your<font color="#CCCCCC"> iDevice wants it wants to contact</font>

381
00:17:12,390 --> 00:17:16,449
<font color="#E5E5E5">dominos they were just need to do the</font>

382
00:17:14,319 --> 00:17:18,428
same<font color="#E5E5E5"> thing call Domino's call them for</font>

383
00:17:16,449 --> 00:17:22,000
us as flora / and then whatever

384
00:17:18,429 --> 00:17:24,579
directives that Domino's is taking so

385
00:17:22,000 --> 00:17:28,900
let's say pizza equals I don't know

386
00:17:24,579 --> 00:17:30,520
large plus I<font color="#E5E5E5"> don't know medium whatever</font>

387
00:17:28,900 --> 00:17:33,160
it is it's up<font color="#E5E5E5"> to the application to</font>

388
00:17:30,520 --> 00:17:35,650
verify that information it's not

389
00:17:33,160 --> 00:17:37,210
explicitly said but you can find out

390
00:17:35,650 --> 00:17:42,190
there's a bunch of websites that allow

391
00:17:37,210 --> 00:17:44,110
you what you are what directed URL

392
00:17:42,190 --> 00:17:46,120
schemes will take for let's say Facebook

393
00:17:44,110 --> 00:17:46,928
Domino's whatever it may be but<font color="#CCCCCC"> again</font>

394
00:17:46,120 --> 00:17:49,840
first<font color="#E5E5E5"> place you're going to look</font>

395
00:17:46,929 --> 00:17:53,370
info.plist for iOS first place you can

396
00:17:49,840 --> 00:17:53,370
look<font color="#E5E5E5"> for android</font><font color="#CCCCCC"> is androidmanifest.xml</font>

397
00:17:58,670 --> 00:18:06,330
so the<font color="#CCCCCC"> app sandbox for iOS randomly</font>

398
00:18:04,470 --> 00:18:09,420
generated home directories separated

399
00:18:06,330 --> 00:18:11,250
from your data containers a little bit

400
00:18:09,420 --> 00:18:14,160
small but your data containers is

401
00:18:11,250 --> 00:18:17,100
basically when you<font color="#E5E5E5"> have your file stored</font>

402
00:18:14,160 --> 00:18:19,650
your temporary files or cash your

403
00:18:17,100 --> 00:18:21,629
library files and while you'll have your

404
00:18:19,650 --> 00:18:23,760
bundler containing here which will<font color="#E5E5E5"> be</font>

405
00:18:21,630 --> 00:18:28,070
like your application binary for example

406
00:18:23,760 --> 00:18:30,480
let's<font color="#CCCCCC"> say like your project files</font>

407
00:18:28,070 --> 00:18:32,939
sometimes you'll find some some setting

408
00:18:30,480 --> 00:18:34,800
files and settings files in there they

409
00:18:32,940 --> 00:18:37,710
<font color="#E5E5E5">might not</font><font color="#CCCCCC"> even be plist files or XML</font>

410
00:18:34,800 --> 00:18:40,409
files might be straight<font color="#CCCCCC"> text files or</font>

411
00:18:37,710 --> 00:18:42,000
dot JSON files those are<font color="#E5E5E5"> the things that</font>

412
00:18:40,410 --> 00:18:43,770
you'll<font color="#CCCCCC"> have to look for because</font><font color="#E5E5E5"> no tool</font>

413
00:18:42,000 --> 00:18:46,020
is going to find<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and usually you</font>

414
00:18:43,770 --> 00:18:51,120
find some juicy things in their private

415
00:18:46,020 --> 00:18:53,190
keys of API<font color="#E5E5E5"> keys passwords for</font>

416
00:18:51,120 --> 00:18:56,370
server-side passwords pretty funny but

417
00:18:53,190 --> 00:18:59,490
not even joking they'll be<font color="#E5E5E5"> there so</font>

418
00:18:56,370 --> 00:19:01,709
again<font color="#CCCCCC"> for iOS application sandbox you</font>

419
00:18:59,490 --> 00:19:03,510
just<font color="#CCCCCC"> just randomly generated home</font>

420
00:19:01,710 --> 00:19:09,000
directories nothing really<font color="#E5E5E5"> fancy there</font>

421
00:19:03,510 --> 00:19:11,610
and the file structure for for iOS apps

422
00:19:09,000 --> 00:19:14,730
there and the file extension is<font color="#E5E5E5"> dot IPA</font>

423
00:19:11,610 --> 00:19:16,820
same thing they are archived files just

424
00:19:14,730 --> 00:19:19,080
<font color="#E5E5E5">like a PKG just rename them to zipps</font>

425
00:19:16,820 --> 00:19:21,389
extract them this will be<font color="#CCCCCC"> the file</font>

426
00:19:19,080 --> 00:19:23,699
<font color="#E5E5E5">structure here every time you'll have a</font>

427
00:19:21,390 --> 00:19:25,170
dot payload so even if you<font color="#E5E5E5"> I say you</font>

428
00:19:23,700 --> 00:19:28,290
have two apps that you want to reverse

429
00:19:25,170 --> 00:19:31,920
engineer and you rename them both to dot

430
00:19:28,290 --> 00:19:33,840
zip and you extract them both now

431
00:19:31,920 --> 00:19:35,280
they'll both be the both have the

432
00:19:33,840 --> 00:19:37,530
payload directory you'll have

433
00:19:35,280 --> 00:19:40,350
application one app application to that

434
00:19:37,530 --> 00:19:43,680
<font color="#E5E5E5">in the same folder so you know in the</font>

435
00:19:40,350 --> 00:19:46,050
same folder other than that so obviously

436
00:19:43,680 --> 00:19:48,060
right here app<font color="#E5E5E5"> and then here's where the</font>

437
00:19:46,050 --> 00:19:50,190
<font color="#E5E5E5">application binary / you'll find</font>

438
00:19:48,060 --> 00:19:51,480
application the application bar near and

439
00:19:50,190 --> 00:19:54,000
south and that's what you'll drop into

440
00:19:51,480 --> 00:19:57,480
let's<font color="#E5E5E5"> say I de or hopper you</font><font color="#CCCCCC"> know to do</font>

441
00:19:54,000 --> 00:19:59,130
your your code review basically or try

442
00:19:57,480 --> 00:20:02,280
to get<font color="#CCCCCC"> a more white box approach to it</font>

443
00:19:59,130 --> 00:20:05,880
and if you're wondering where<font color="#CCCCCC"> to get</font>

444
00:20:02,280 --> 00:20:06,370
let's say uh IPA files as a pen tester

445
00:20:05,880 --> 00:20:07,690
usually

446
00:20:06,370 --> 00:20:09,280
get them sent to<font color="#E5E5E5"> you but if you want to</font>

447
00:20:07,690 --> 00:20:10,600
do from a total black box perspective

448
00:20:09,280 --> 00:20:14,590
<font color="#E5E5E5">let's say like I'm doing with Domino's</font>

449
00:20:10,600 --> 00:20:19,809
I'll get<font color="#E5E5E5"> it from itunes and then I'll</font>

450
00:20:14,590 --> 00:20:21,879
<font color="#CCCCCC">basically decrypt decrypt the IPA files</font>

451
00:20:19,809 --> 00:20:24,190
and then and then drop them into two

452
00:20:21,880 --> 00:20:27,340
hopper and then and then there i'll go

453
00:20:24,190 --> 00:20:28,809
ahead and review the code but<font color="#CCCCCC"> again from</font>

454
00:20:27,340 --> 00:20:31,629
a pen tester perspective usually just

455
00:20:28,809 --> 00:20:34,840
get it straight from from the<font color="#E5E5E5"> client and</font>

456
00:20:31,630 --> 00:20:38,500
then usually be unencrypted at that

457
00:20:34,840 --> 00:20:40,360
point and then again from the file

458
00:20:38,500 --> 00:20:42,580
structure you have a bunch<font color="#E5E5E5"> of metadata</font>

459
00:20:40,360 --> 00:20:47,159
folders here for itunes and watched it

460
00:20:42,580 --> 00:20:49,480
as well<font color="#E5E5E5"> so who's familiar with hybrid</font>

461
00:20:47,160 --> 00:20:53,730
hybrid frameworks are hybrid in general

462
00:20:49,480 --> 00:20:59,830
for mobile<font color="#E5E5E5"> okay not many all right I'll</font>

463
00:20:53,730 --> 00:21:02,830
basically<font color="#CCCCCC"> what it is is iOS the web and</font>

464
00:20:59,830 --> 00:21:07,419
<font color="#E5E5E5">Android all on one codebase all bundled</font>

465
00:21:02,830 --> 00:21:09,730
up and there are some pros and some cons

466
00:21:07,420 --> 00:21:13,840
some pretty big pros and some pretty<font color="#CCCCCC"> big</font>

467
00:21:09,730 --> 00:21:16,480
cons let's go through<font color="#CCCCCC"> them here so again</font>

468
00:21:13,840 --> 00:21:19,600
a lot<font color="#CCCCCC"> of the web the web application</font>

469
00:21:16,480 --> 00:21:22,390
aspect and<font color="#E5E5E5"> the threats within web are in</font>

470
00:21:19,600 --> 00:21:25,600
cotton the hybrid hyper ecosystem so you

471
00:21:22,390 --> 00:21:29,440
have html5 threats a heavy heavy

472
00:21:25,600 --> 00:21:31,928
<font color="#CCCCCC">JavaScript client side meaning some</font>

473
00:21:29,440 --> 00:21:35,260
developers will store secrets in

474
00:21:31,929 --> 00:21:37,240
JavaScript<font color="#E5E5E5"> for whatever reason but or</font>

475
00:21:35,260 --> 00:21:40,540
try to obfuscate their<font color="#E5E5E5"> JavaScript and</font>

476
00:21:37,240 --> 00:21:42,880
store secrets in there still you know

477
00:21:40,540 --> 00:21:46,000
not a good idea but something that

478
00:21:42,880 --> 00:21:48,040
something to<font color="#CCCCCC"> note and again I said in</font>

479
00:21:46,000 --> 00:21:51,420
one code base and you'll<font color="#E5E5E5"> have the web</font>

480
00:21:48,040 --> 00:21:54,820
runtime as crosswalk or WebKit typically

481
00:21:51,420 --> 00:21:57,610
and with hybrid frameworks you'll also

482
00:21:54,820 --> 00:22:00,600
have their own marketplaces and plugins

483
00:21:57,610 --> 00:22:03,790
so these are not governed by or

484
00:22:00,600 --> 00:22:05,919
regulated by by the<font color="#E5E5E5"> App Store or play</font>

485
00:22:03,790 --> 00:22:10,920
store so these are other third-party

486
00:22:05,920 --> 00:22:13,990
code our developers that you know again

487
00:22:10,920 --> 00:22:16,510
plug into your code base that are not

488
00:22:13,990 --> 00:22:18,650
reviewed for security that are just you

489
00:22:16,510 --> 00:22:21,740
know it could be me just creating

490
00:22:18,650 --> 00:22:23,600
a calendar JavaScript a calendar JFS or

491
00:22:21,740 --> 00:22:26,870
<font color="#E5E5E5">our padding library for people to</font><font color="#CCCCCC"> use</font>

492
00:22:23,600 --> 00:22:29,540
and no one's basically looking at it for

493
00:22:26,870 --> 00:22:31,850
code review for security purposes but

494
00:22:29,540 --> 00:22:35,000
aside from that big you know red flag

495
00:22:31,850 --> 00:22:36,320
you also have you<font color="#CCCCCC"> know the ability to</font>

496
00:22:35,000 --> 00:22:38,270
update without redeploying the

497
00:22:36,320 --> 00:22:41,000
application to the<font color="#E5E5E5"> app stores because</font>

498
00:22:38,270 --> 00:22:43,550
again it's mostly web-based through the

499
00:22:41,000 --> 00:22:45,080
web views and heavy<font color="#E5E5E5"> JavaScript so you</font>

500
00:22:43,550 --> 00:22:47,870
own that so you can update that whenever

501
00:22:45,080 --> 00:22:51,020
you want so again big big red flag there

502
00:22:47,870 --> 00:22:52,399
but that's also a pro for some of these

503
00:22:51,020 --> 00:22:53,960
development companies because<font color="#CCCCCC"> they don't</font>

504
00:22:52,400 --> 00:22:56,930
want<font color="#E5E5E5"> to resubmit to the App</font><font color="#CCCCCC"> Store wait</font>

505
00:22:53,960 --> 00:23:00,620
two or three<font color="#CCCCCC"> days each time they'd</font>

506
00:22:56,930 --> 00:23:05,230
rather just update and not have to go

507
00:23:00,620 --> 00:23:07,219
through that lag time so with native

508
00:23:05,230 --> 00:23:11,350
generally you have better security

509
00:23:07,220 --> 00:23:14,420
because you<font color="#E5E5E5"> have better control you have</font>

510
00:23:11,350 --> 00:23:15,620
access to the interline hardware for<font color="#E5E5E5"> the</font>

511
00:23:14,420 --> 00:23:18,320
most part nothing<font color="#CCCCCC"> you're done</font><font color="#E5E5E5"> with</font>

512
00:23:15,620 --> 00:23:20,629
hybrid but you don't have it<font color="#CCCCCC"> you don't</font>

513
00:23:18,320 --> 00:23:22,730
<font color="#E5E5E5">have let's say like access to the camera</font>

514
00:23:20,630 --> 00:23:25,040
let's say forward like<font color="#E5E5E5"> Instagram was</font>

515
00:23:22,730 --> 00:23:27,770
once hybrid and now it's is<font color="#E5E5E5"> native for</font>

516
00:23:25,040 --> 00:23:29,120
the for<font color="#E5E5E5"> that purpose so you have more</font>

517
00:23:27,770 --> 00:23:34,370
control over the camera<font color="#E5E5E5"> and editing</font>

518
00:23:29,120 --> 00:23:36,169
features for example<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> just run</font>

519
00:23:34,370 --> 00:23:38,090
through this so with html5<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> web</font>

520
00:23:36,170 --> 00:23:40,310
<font color="#CCCCCC">socket vulnerabilities and these are</font>

521
00:23:38,090 --> 00:23:43,490
real during plenty of mobile

522
00:23:40,310 --> 00:23:46,970
applications local storage this will

523
00:23:43,490 --> 00:23:49,790
store anything<font color="#E5E5E5"> from from tokens to</font>

524
00:23:46,970 --> 00:23:51,710
passwords to user IDs to anything on

525
00:23:49,790 --> 00:23:55,100
disk that<font color="#E5E5E5"> will never get deleted even</font>

526
00:23:51,710 --> 00:23:57,140
when you<font color="#E5E5E5"> uninstall the application you</font>

527
00:23:55,100 --> 00:23:59,620
have web workers<font color="#CCCCCC"> filesystem API you get</font>

528
00:23:57,140 --> 00:24:02,750
<font color="#E5E5E5">access to the file system web RTC</font>

529
00:23:59,620 --> 00:24:07,040
basically<font color="#E5E5E5"> to for real-time communication</font>

530
00:24:02,750 --> 00:24:09,830
for chatting for a video conferencing

531
00:24:07,040 --> 00:24:11,899
and even of the vulnerabilities if you

532
00:24:09,830 --> 00:24:14,210
do not configure WebRTC correctly you

533
00:24:11,900 --> 00:24:17,060
<font color="#E5E5E5">can also scan your local network with</font>

534
00:24:14,210 --> 00:24:19,190
WebRTC<font color="#E5E5E5"> until things things to keep in</font>

535
00:24:17,060 --> 00:24:22,220
mind so there's even more but the attack

536
00:24:19,190 --> 00:24:24,560
surface is huge obviously from from

537
00:24:22,220 --> 00:24:27,680
native and mobile and just hybrid in

538
00:24:24,560 --> 00:24:29,120
general<font color="#E5E5E5"> even with html5 which is luck</font>

539
00:24:27,680 --> 00:24:31,090
what a lot of<font color="#CCCCCC"> these frameworks are based</font>

540
00:24:29,120 --> 00:24:34,219
upon

541
00:24:31,090 --> 00:24:36,199
so one<font color="#CCCCCC"> of the most common hybrid</font>

542
00:24:34,220 --> 00:24:39,830
frameworks is<font color="#CCCCCC"> cordova anybody heard of</font>

543
00:24:36,200 --> 00:24:42,830
cordova before<font color="#E5E5E5"> or phonegap cool so</font>

544
00:24:39,830 --> 00:24:45,800
Patrick<font color="#E5E5E5"> Cordova also known as</font><font color="#CCCCCC"> phonegap</font>

545
00:24:42,830 --> 00:24:55,580
again most common<font color="#CCCCCC"> he</font><font color="#E5E5E5"> uses crosswalk as</font>

546
00:24:45,800 --> 00:24:58,550
his web runtime or at the webview so the

547
00:24:55,580 --> 00:25:00,379
area for research and not<font color="#E5E5E5"> going to go</font>

548
00:24:58,550 --> 00:25:02,870
through all<font color="#E5E5E5"> these advisories here but</font>

549
00:25:00,380 --> 00:25:05,300
just within up well actually I'm going

550
00:25:02,870 --> 00:25:06,919
<font color="#E5E5E5">to skip past that this is basically I</font>

551
00:25:05,300 --> 00:25:10,879
was talking<font color="#CCCCCC"> about the marketplace is</font>

552
00:25:06,920 --> 00:25:14,390
right in the plugins so our<font color="#CCCCCC"> cordova has</font>

553
00:25:10,880 --> 00:25:17,510
its own again marketplace and what they

554
00:25:14,390 --> 00:25:19,400
define as a plug-in is a<font color="#E5E5E5"> package of</font>

555
00:25:17,510 --> 00:25:21,500
injected code that allows the<font color="#E5E5E5"> cordova</font>

556
00:25:19,400 --> 00:25:23,120
webview within which the app the app

557
00:25:21,500 --> 00:25:25,190
renders to communicate<font color="#CCCCCC"> with the native</font>

558
00:25:23,120 --> 00:25:27,679
platform on which it runs<font color="#CCCCCC"> to mean that</font>

559
00:25:25,190 --> 00:25:29,810
<font color="#E5E5E5">sounds</font><font color="#CCCCCC"> like cross-site scripting</font><font color="#E5E5E5"> I don't</font>

560
00:25:27,680 --> 00:25:32,150
know<font color="#E5E5E5"> but it tells you blatantly in their</font>

561
00:25:29,810 --> 00:25:34,909
documentation and this is how you

562
00:25:32,150 --> 00:25:38,420
basically publish<font color="#CCCCCC"> plug-in pretty simple</font>

563
00:25:34,910 --> 00:25:44,020
not hard again probably a big area for

564
00:25:38,420 --> 00:25:44,020
research just stuff that done already

565
00:25:46,680 --> 00:25:51,700
and here's a code review process I can't

566
00:25:49,450 --> 00:25:54,670
see very small but it's<font color="#E5E5E5"> basically for</font>

567
00:25:51,700 --> 00:25:57,520
coke coke cleanliness and making sure it

568
00:25:54,670 --> 00:25:59,500
works and exceptions and things like

569
00:25:57,520 --> 00:26:01,270
that<font color="#E5E5E5"> but there's no basically no one</font>

570
00:25:59,500 --> 00:26:03,220
reviewing for code know where no one

571
00:26:01,270 --> 00:26:06,330
we're<font color="#CCCCCC"> doing for security there's you</font>

572
00:26:03,220 --> 00:26:08,200
know it's governed by NPM registry

573
00:26:06,330 --> 00:26:11,080
that's what they use for their package

574
00:26:08,200 --> 00:26:12,820
manager so again things to keep in mind

575
00:26:11,080 --> 00:26:14,740
if these types of frameworks should be

576
00:26:12,820 --> 00:26:16,290
deployed in your environment or if you

577
00:26:14,740 --> 00:26:18,550
see them being deployed in the

578
00:26:16,290 --> 00:26:22,350
<font color="#E5E5E5">application because they're very easy to</font>

579
00:26:18,550 --> 00:26:24,460
mess up like it's a huge attack surface

580
00:26:22,350 --> 00:26:26,139
and here's here's the advisory page

581
00:26:24,460 --> 00:26:27,280
obviously you can see some some arrows

582
00:26:26,140 --> 00:26:29,110
here<font color="#E5E5E5"> I'm not going to go through them</font>

583
00:26:27,280 --> 00:26:32,220
all but<font color="#E5E5E5"> just this within</font><font color="#CCCCCC"> the last year</font>

584
00:26:29,110 --> 00:26:35,229
you have about three highs<font color="#E5E5E5"> four mediums</font>

585
00:26:32,220 --> 00:26:37,390
all from<font color="#E5E5E5"> a remote code execution to they</font>

586
00:26:35,230 --> 00:26:41,680
call cross-site application scripting or

587
00:26:37,390 --> 00:26:45,610
it's basically XSS this is both for

588
00:26:41,680 --> 00:26:49,240
<font color="#E5E5E5">Android and iOS but huge area of</font>

589
00:26:45,610 --> 00:26:51,520
<font color="#E5E5E5">research it's no secret actually you</font>

590
00:26:49,240 --> 00:26:56,980
know from April and May June and July

591
00:26:51,520 --> 00:26:59,370
you<font color="#CCCCCC"> know heavily researched you know</font>

592
00:26:56,980 --> 00:27:08,650
from<font color="#E5E5E5"> the plugins here you can see</font>

593
00:26:59,370 --> 00:27:11,169
Cordova iOS Android intent URLs here's

594
00:27:08,650 --> 00:27:13,560
the<font color="#E5E5E5"> one Cordova cross application</font>

595
00:27:11,170 --> 00:27:13,560
scripting

596
00:27:18,620 --> 00:27:23,810
another common hybrid framework is

597
00:27:21,690 --> 00:27:27,720
<font color="#CCCCCC">xamarin anybody hit exam right before</font>

598
00:27:23,810 --> 00:27:31,139
cool it's a xamarin is owned by

599
00:27:27,720 --> 00:27:33,570
microsoft<font color="#CCCCCC"> i had what they taught</font>

600
00:27:31,140 --> 00:27:36,000
themselves on is anything you<font color="#E5E5E5"> can do an</font>

601
00:27:33,570 --> 00:27:39,060
objective-c<font color="#CCCCCC"> Swift or</font><font color="#E5E5E5"> java you can do a</font>

602
00:27:36,000 --> 00:27:41,940
c-sharp with salmon basically converts

603
00:27:39,060 --> 00:27:45,179
see shark to<font color="#CCCCCC"> Java to objective-c to</font>

604
00:27:41,940 --> 00:27:47,250
Swift obvious obviously you know you're

605
00:27:45,180 --> 00:27:51,810
going<font color="#E5E5E5"> to see some some mishaps there</font>

606
00:27:47,250 --> 00:27:55,290
some issues it's like you know I'm

607
00:27:51,810 --> 00:27:56,820
telling<font color="#E5E5E5"> two of</font><font color="#CCCCCC"> my friends down</font><font color="#E5E5E5"> there but</font>

608
00:27:55,290 --> 00:27:58,740
I have basically two proxes in front of

609
00:27:56,820 --> 00:28:00,389
me hey I need<font color="#E5E5E5"> to go to the</font><font color="#CCCCCC"> restroom</font><font color="#E5E5E5"> King</font>

610
00:27:58,740 --> 00:28:01,590
Tommy where it's at well probably going

611
00:28:00,390 --> 00:28:03,810
to tell me<font color="#CCCCCC"> to different</font><font color="#E5E5E5"> way three</font>

612
00:28:01,590 --> 00:28:06,270
different ways but again within these

613
00:28:03,810 --> 00:28:09,450
languages in these frameworks there's

614
00:28:06,270 --> 00:28:12,990
obviously some some issues there but

615
00:28:09,450 --> 00:28:14,910
what what zambra does it drops<font color="#E5E5E5"> their</font>

616
00:28:12,990 --> 00:28:18,600
<font color="#E5E5E5">their mono dotnet runtime onto the</font>

617
00:28:14,910 --> 00:28:21,540
devices like basically dll for<font color="#E5E5E5"> android</font>

618
00:28:18,600 --> 00:28:23,669
and there are some known advisories that

619
00:28:21,540 --> 00:28:25,940
were going to<font color="#E5E5E5"> get to but something to</font>

620
00:28:23,670 --> 00:28:29,040
note that's how<font color="#E5E5E5"> it runs on the devices</font>

621
00:28:25,940 --> 00:28:33,210
also uses an executable forearm which is

622
00:28:29,040 --> 00:28:35,790
a ahead of time compliation and it has

623
00:28:33,210 --> 00:28:39,870
its own<font color="#E5E5E5"> ied ide which is basically a</font>

624
00:28:35,790 --> 00:28:42,389
fork a visual studio and also has its

625
00:28:39,870 --> 00:28:49,590
own marketplace so keep in mind a huge

626
00:28:42,390 --> 00:28:52,110
market place at that because why not and

627
00:28:49,590 --> 00:28:56,010
it's open source to it has a commercial

628
00:28:52,110 --> 00:28:57,840
and<font color="#E5E5E5"> a paid version but this was funny i</font>

629
00:28:56,010 --> 00:29:00,000
<font color="#CCCCCC">was researching just looking into</font>

630
00:28:57,840 --> 00:29:02,780
xamarin obviously<font color="#E5E5E5"> i know is a huge</font>

631
00:29:00,000 --> 00:29:05,160
<font color="#CCCCCC">market for it on their front page they</font>

632
00:29:02,780 --> 00:29:07,050
<font color="#E5E5E5">may show basically who is their top</font>

633
00:29:05,160 --> 00:29:09,210
clients are which with biggest companies

634
00:29:07,050 --> 00:29:12,720
in the world I'll so obviously going to

635
00:29:09,210 --> 00:29:13,920
look and a first next I'm going to<font color="#E5E5E5"> look</font>

636
00:29:12,720 --> 00:29:16,800
is there<font color="#E5E5E5"> their issues in the floor</font>

637
00:29:13,920 --> 00:29:19,800
request what I<font color="#E5E5E5"> find is that they have a</font>

638
00:29:16,800 --> 00:29:23,040
hard-coded keystore password for their

639
00:29:19,800 --> 00:29:24,418
authorization framework which is Sam

640
00:29:23,040 --> 00:29:25,859
<font color="#E5E5E5">Randolph</font>

641
00:29:24,419 --> 00:29:30,809
and I'm<font color="#CCCCCC"> not going</font><font color="#E5E5E5"> to read</font><font color="#CCCCCC"> through it</font>

642
00:29:25,859 --> 00:29:35,460
basically they filed a bug back in 2014

643
00:29:30,809 --> 00:29:38,009
and I wouldn't looked and it was still

644
00:29:35,460 --> 00:29:41,039
there hardcoded right there as you can

645
00:29:38,009 --> 00:29:43,259
see you see the<font color="#E5E5E5"> adroit account started</font>

646
00:29:41,039 --> 00:29:47,700
for<font color="#E5E5E5"> Android obviously for keys for key</font>

647
00:29:43,259 --> 00:29:50,159
store but uh huh<font color="#E5E5E5"> I looked a couple</font>

648
00:29:47,700 --> 00:29:53,009
months<font color="#CCCCCC"> ago and somebody was basically</font>

649
00:29:50,159 --> 00:29:55,139
shocked that it was still still hadn't

650
00:29:53,009 --> 00:29:57,539
been merged into master still hadn't

651
00:29:55,139 --> 00:30:01,258
been fixed well I think that oh I didn't

652
00:29:57,539 --> 00:30:03,629
show but anyway it's still there it's

653
00:30:01,259 --> 00:30:06,509
not fixed so there's a separate app

654
00:30:03,629 --> 00:30:10,289
running on your device pretty much at

655
00:30:06,509 --> 00:30:13,230
risk of losing your accounts for any any

656
00:30:10,289 --> 00:30:15,480
Facebook<font color="#E5E5E5"> and your google accounts</font>

657
00:30:13,230 --> 00:30:18,090
anything like that can be exposed if

658
00:30:15,480 --> 00:30:23,879
your device is lost or stolen for

659
00:30:18,090 --> 00:30:27,480
example one of<font color="#E5E5E5"> the known advisories here</font>

660
00:30:23,879 --> 00:30:30,779
is dropping that mono di<font color="#E5E5E5"> Lao into the SD</font>

661
00:30:27,480 --> 00:30:33,539
card of an<font color="#E5E5E5"> Android device and the SD</font>

662
00:30:30,779 --> 00:30:35,340
card is world readable world right<font color="#E5E5E5"> so if</font>

663
00:30:33,539 --> 00:30:39,840
somebody did was basically drop another

664
00:30:35,340 --> 00:30:43,889
<font color="#E5E5E5">Gail out</font><font color="#CCCCCC"> backdoored um that uh that</font>

665
00:30:39,840 --> 00:30:46,619
runtime library and was able<font color="#E5E5E5"> to get</font>

666
00:30:43,889 --> 00:30:49,258
<font color="#E5E5E5">access to the android device this was</font>

667
00:30:46,619 --> 00:30:54,809
back in last<font color="#E5E5E5"> year in May but it has</font>

668
00:30:49,259 --> 00:30:57,659
since been fixed after xamarin 5.1 so

669
00:30:54,809 --> 00:31:01,678
depending on<font color="#E5E5E5"> how</font><font color="#CCCCCC"> fast these development</font>

670
00:30:57,659 --> 00:31:04,859
companies issue updates is basically

671
00:31:01,679 --> 00:31:06,840
dependent on how secure you know the<font color="#E5E5E5"> the</font>

672
00:31:04,859 --> 00:31:09,570
clients or customers are<font color="#E5E5E5"> going to be as</font>

673
00:31:06,840 --> 00:31:11,220
well so now everybody pushes code you

674
00:31:09,570 --> 00:31:12,689
know itself basically<font color="#CCCCCC"> the mobile is an</font>

675
00:31:11,220 --> 00:31:15,570
equivalent to web everybody pushes code

676
00:31:12,690 --> 00:31:17,009
you know a thousand<font color="#E5E5E5"> times a day but</font>

677
00:31:15,570 --> 00:31:19,889
<font color="#CCCCCC">something to keep in mind if you see</font>

678
00:31:17,009 --> 00:31:22,070
xamarin an older version is<font color="#E5E5E5"> amber and</font>

679
00:31:19,889 --> 00:31:22,070
<font color="#CCCCCC">eleni</font>

680
00:31:27,480 --> 00:31:33,090
another common framework here is a

681
00:31:30,740 --> 00:31:35,160
telluric<font color="#E5E5E5"> app builder one of those</font>

682
00:31:33,090 --> 00:31:37,560
<font color="#CCCCCC">drag-and-drop</font><font color="#E5E5E5"> type of apps back in as a</font>

683
00:31:35,160 --> 00:31:39,390
service and<font color="#CCCCCC"> for me when I when I see</font>

684
00:31:37,560 --> 00:31:40,740
easier when I hear easy obviously I'm

685
00:31:39,390 --> 00:31:44,490
going to hear I'm going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find some</font>

686
00:31:40,740 --> 00:31:46,110
issues in there so<font color="#CCCCCC"> what I quickly wanted</font>

687
00:31:44,490 --> 00:31:47,910
to do was go<font color="#CCCCCC"> through basically</font><font color="#E5E5E5"> their</font>

688
00:31:46,110 --> 00:31:49,830
development documentation for security

689
00:31:47,910 --> 00:31:52,920
and what they're telling people to do is

690
00:31:49,830 --> 00:31:54,689
submit their apps via their app manager

691
00:31:52,920 --> 00:31:56,910
rather than rather than the App Store

692
00:31:54,690 --> 00:31:58,650
<font color="#CCCCCC">Google Play Store so when you submit</font>

693
00:31:56,910 --> 00:32:01,460
your app via the App<font color="#CCCCCC"> Store for iOS it</font>

694
00:31:58,650 --> 00:32:04,560
encrypts your hat<font color="#E5E5E5"> I</font><font color="#CCCCCC"> laid out that tulare</font>

695
00:32:01,460 --> 00:32:05,990
encrypt straps not only that I<font color="#E5E5E5"> Doppler</font>

696
00:32:04,560 --> 00:32:09,030
<font color="#E5E5E5">like Apple would have a security team</font>

697
00:32:05,990 --> 00:32:10,890
but we won't go through all that they're

698
00:32:09,030 --> 00:32:13,080
also advising and again like<font color="#E5E5E5"> securing a</font>

699
00:32:10,890 --> 00:32:14,880
phonegap<font color="#E5E5E5"> cordova hybrid mobile app i'm</font>

700
00:32:13,080 --> 00:32:17,639
also advising to if you're going<font color="#E5E5E5"> to put</font>

701
00:32:14,880 --> 00:32:20,280
secrets into your code and<font color="#CCCCCC"> javascript</font>

702
00:32:17,640 --> 00:32:23,730
again off you skated<font color="#CCCCCC"> minify it or</font>

703
00:32:20,280 --> 00:32:25,620
<font color="#E5E5E5">loading remotely not great this was all</font>

704
00:32:23,730 --> 00:32:30,720
from<font color="#E5E5E5"> a blog post by the way but I like</font>

705
00:32:25,620 --> 00:32:34,949
<font color="#CCCCCC">84 thumbs up they had a they have a</font>

706
00:32:30,720 --> 00:32:36,930
funny disclaimer also within their

707
00:32:34,950 --> 00:32:39,090
documentation basically saying that<font color="#E5E5E5"> they</font>

708
00:32:36,930 --> 00:32:41,310
will invoke any user supply data object

709
00:32:39,090 --> 00:32:49,129
and process regardless of whether it is

710
00:32:41,310 --> 00:32:49,129
trusted or not that makes me sad

711
00:32:50,610 --> 00:32:55,889
so what will<font color="#E5E5E5"> skipped into next system</font>

712
00:32:53,000 --> 00:32:58,980
which is basically another hybrid

713
00:32:55,890 --> 00:33:00,990
framework in<font color="#E5E5E5"> Latin America they have</font>

714
00:32:58,980 --> 00:33:05,670
some<font color="#E5E5E5"> o wat issues we'll just leave it at</font>

715
00:33:00,990 --> 00:33:09,750
that basically they hard code there oh

716
00:33:05,670 --> 00:33:11,700
off<font color="#CCCCCC"> a client secret and ID into the</font>

717
00:33:09,750 --> 00:33:14,520
<font color="#CCCCCC">Android iOS apps you can basically</font>

718
00:33:11,700 --> 00:33:21,150
retrieve access token forever without

719
00:33:14,520 --> 00:33:24,389
you having a username<font color="#E5E5E5"> and password oh so</font>

720
00:33:21,150 --> 00:33:28,020
<font color="#E5E5E5">usually first places if I'm</font><font color="#CCCCCC"> from testing</font>

721
00:33:24,390 --> 00:33:29,700
an app I want<font color="#E5E5E5"> to be able to well this is</font>

722
00:33:28,020 --> 00:33:31,860
<font color="#CCCCCC">probably the maybe third or fourth phase</font>

723
00:33:29,700 --> 00:33:33,890
<font color="#E5E5E5">I won't be able to proxy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> traffic the</font>

724
00:33:31,860 --> 00:33:36,540
first phase<font color="#E5E5E5"> is obviously getting the app</font>

725
00:33:33,890 --> 00:33:39,270
decompiling it looking for vulnerable ap

726
00:33:36,540 --> 00:33:41,970
is and libraries and<font color="#CCCCCC"> adviser these</font>

727
00:33:39,270 --> 00:33:44,120
things like that but again after<font color="#CCCCCC"> I want</font>

728
00:33:41,970 --> 00:33:48,179
to be able to proxy that traffic and

729
00:33:44,120 --> 00:33:50,580
what I look for in the beginning<font color="#CCCCCC"> stages</font>

730
00:33:48,179 --> 00:33:52,200
are if they're<font color="#CCCCCC"> using vulnerable</font>

731
00:33:50,580 --> 00:33:56,280
afnetworking libraries if they're using

732
00:33:52,200 --> 00:33:59,720
<font color="#CCCCCC">these vulnerable EP is set any https</font>

733
00:33:56,280 --> 00:34:03,049
certificate turning ssl painting off

734
00:33:59,720 --> 00:34:06,140
allow allow any root certificate or

735
00:34:03,049 --> 00:34:08,489
allow even invalid ssl certificates

736
00:34:06,140 --> 00:34:11,639
pretty common this is probably the<font color="#CCCCCC"> most</font>

737
00:34:08,489 --> 00:34:13,918
common issue<font color="#CCCCCC"> i find unless</font><font color="#E5E5E5"> it's like a</font>

738
00:34:11,639 --> 00:34:14,730
banking app unknown big bank I'll

739
00:34:13,918 --> 00:34:17,310
they'll do something<font color="#E5E5E5"> they'll do</font>

740
00:34:14,730 --> 00:34:19,050
something<font color="#CCCCCC"> like ssl</font><font color="#E5E5E5"> painting but again</font>

741
00:34:17,310 --> 00:34:21,949
not as common especially let's say with

742
00:34:19,050 --> 00:34:24,030
these IOT devices that I like to hack

743
00:34:21,949 --> 00:34:26,850
not a chance that they're going<font color="#E5E5E5"> to be as</font>

744
00:34:24,030 --> 00:34:30,960
himself inning or even verifying the

745
00:34:26,850 --> 00:34:35,069
domain or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> root the root chain for</font>

746
00:34:30,960 --> 00:34:37,530
the<font color="#E5E5E5"> for the certificate either and then</font>

747
00:34:35,070 --> 00:34:39,230
for iOS 9 and above by default there's

748
00:34:37,530 --> 00:34:41,940
something called Transport Security

749
00:34:39,230 --> 00:34:43,918
again turn on by default but people turn

750
00:34:41,940 --> 00:34:48,020
it off and<font color="#CCCCCC"> what it</font><font color="#E5E5E5"> does is basically</font>

751
00:34:43,918 --> 00:34:51,480
only allowed TLS 1.2 and for secrecy

752
00:34:48,020 --> 00:34:52,800
ciphers to be allowed I don't think

753
00:34:51,480 --> 00:34:54,179
people<font color="#CCCCCC"> are ready for that yet but</font>

754
00:34:52,800 --> 00:34:56,669
they're trying<font color="#E5E5E5"> to go for secure by</font>

755
00:34:54,179 --> 00:34:59,400
default approach with<font color="#E5E5E5"> Apple but</font><font color="#CCCCCC"> again</font>

756
00:34:56,668 --> 00:35:01,420
he's usually turned off and<font color="#CCCCCC"> here's</font><font color="#E5E5E5"> the</font>

757
00:34:59,400 --> 00:35:03,940
setting in<font color="#CCCCCC"> the info.plist</font>

758
00:35:01,420 --> 00:35:08,290
<font color="#CCCCCC">app Transport Security allow our</font>

759
00:35:03,940 --> 00:35:15,910
arbitrary loads yes a lot HTTP<font color="#CCCCCC"> to be</font>

760
00:35:08,290 --> 00:35:19,180
read same thing with the Android side of

761
00:35:15,910 --> 00:35:22,720
things here the photo will be sick api's

762
00:35:19,180 --> 00:35:25,200
<font color="#CCCCCC">I look for with in</font><font color="#E5E5E5"> Java very very simple</font>

763
00:35:22,720 --> 00:35:27,339
just you can do a fine you can do a grep

764
00:35:25,200 --> 00:35:30,339
whichever is easy once you find<font color="#E5E5E5"> them</font>

765
00:35:27,339 --> 00:35:33,250
you'll basically know that the app isn't

766
00:35:30,339 --> 00:35:37,900
checking or turning off any<font color="#E5E5E5"> hostname</font>

767
00:35:33,250 --> 00:35:41,290
verification<font color="#E5E5E5"> or domain or anything</font>

768
00:35:37,900 --> 00:35:43,240
basically something<font color="#E5E5E5"> to</font><font color="#CCCCCC"> note with Cordova</font>

769
00:35:41,290 --> 00:35:45,790
is that it does<font color="#CCCCCC"> not support true</font>

770
00:35:43,240 --> 00:35:47,709
certificate<font color="#E5E5E5"> pinning so if it's a medical</font>

771
00:35:45,790 --> 00:35:50,410
application and they have a Cordova

772
00:35:47,710 --> 00:35:53,470
framework implemented its proper they're

773
00:35:50,410 --> 00:35:54,819
probably not implementing certificate

774
00:35:53,470 --> 00:35:57,339
pinning the right way or trying to do a

775
00:35:54,819 --> 00:36:00,790
hacky way but again something<font color="#E5E5E5"> to know if</font>

776
00:35:57,339 --> 00:36:08,440
you're trying to<font color="#E5E5E5"> support true sig data</font>

777
00:36:00,790 --> 00:36:10,720
confidentiality in transit and secure

778
00:36:08,440 --> 00:36:12,849
data storage is all over mobile this is

779
00:36:10,720 --> 00:36:15,669
where I<font color="#E5E5E5"> find all the time you'll have</font>

780
00:36:12,849 --> 00:36:18,849
encryption keys secret<font color="#E5E5E5"> keys passwords Oh</font>

781
00:36:15,670 --> 00:36:21,220
auth tokens a seagull<font color="#E5E5E5"> hype databases</font>

782
00:36:18,849 --> 00:36:24,640
with everything from first name last

783
00:36:21,220 --> 00:36:27,250
names passwords to<font color="#E5E5E5"> windows SI quis to</font>

784
00:36:24,640 --> 00:36:30,368
emails in your bodies I'm not<font color="#CCCCCC"> even</font>

785
00:36:27,250 --> 00:36:33,010
joking and you also have binary cookies

786
00:36:30,369 --> 00:36:34,960
this<font color="#E5E5E5"> is different is not within Android</font>

787
00:36:33,010 --> 00:36:38,109
and we'll get<font color="#E5E5E5"> to binary cookies in a</font>

788
00:36:34,960 --> 00:36:39,700
little bit but here you can't see very

789
00:36:38,109 --> 00:36:41,290
well but you'll have basically a

790
00:36:39,700 --> 00:36:45,730
hard-coded client ID and client secret

791
00:36:41,290 --> 00:36:48,299
an API key here in a JSON file for iOS

792
00:36:45,730 --> 00:36:51,790
device for a hybrid framework that was

793
00:36:48,299 --> 00:36:54,190
so I think genexus hybrid framework but

794
00:36:51,790 --> 00:36:56,220
<font color="#E5E5E5">it has has</font><font color="#CCCCCC"> android</font><font color="#E5E5E5"> settings wish you</font>

795
00:36:54,190 --> 00:36:59,770
<font color="#E5E5E5">guys can see about pasta slides up later</font>

796
00:36:56,220 --> 00:37:01,799
<font color="#CCCCCC">has android and iOS settings in here</font><font color="#E5E5E5"> as</font>

797
00:36:59,770 --> 00:37:01,799
well

798
00:37:02,940 --> 00:37:12,270
infinite face palm and again here's

799
00:37:09,390 --> 00:37:14,040
another another<font color="#E5E5E5"> file configuration file</font>

800
00:37:12,270 --> 00:37:15,780
which has their blow low flourish

801
00:37:14,040 --> 00:37:20,720
private key here I don't know why they

802
00:37:15,780 --> 00:37:25,560
were trying to roll their own<font color="#E5E5E5"> a crypto</font>

803
00:37:20,720 --> 00:37:28,609
but again no nose<font color="#E5E5E5"> okay I'm</font><font color="#CCCCCC"> gonna jump to</font>

804
00:37:25,560 --> 00:37:32,790
the demo in<font color="#CCCCCC"> the interest of time here</font>

805
00:37:28,609 --> 00:37:35,220
more passwords logging access token

806
00:37:32,790 --> 00:37:36,660
clear text here is that database i'll

807
00:37:35,220 --> 00:37:39,180
talk about sequel I'd database username

808
00:37:36,660 --> 00:37:42,629
password hash password everything

809
00:37:39,180 --> 00:37:47,190
basically clone from their database to a

810
00:37:42,630 --> 00:37:52,079
sequel I database on<font color="#CCCCCC"> the device that's</font>

811
00:37:47,190 --> 00:37:54,560
exactly why though<font color="#CCCCCC"> okay let's</font><font color="#E5E5E5"> get to the</font>

812
00:37:52,079 --> 00:37:54,560
demo here

813
00:37:55,960 --> 00:38:02,500
I want a demo tool called mobile

814
00:37:59,500 --> 00:38:07,900
security framework free open-source very

815
00:38:02,500 --> 00:38:10,830
very simple<font color="#E5E5E5"> to use based upon</font><font color="#CCCCCC"> python i'm</font>

816
00:38:07,900 --> 00:38:17,619
going<font color="#E5E5E5"> to use ring just because it's easy</font>

817
00:38:10,830 --> 00:38:19,330
forgot this is this is a responsive you

818
00:38:17,619 --> 00:38:23,260
guess<font color="#CCCCCC"> and see that so you have your</font>

819
00:38:19,330 --> 00:38:26,140
activities your services receivers and

820
00:38:23,260 --> 00:38:29,050
your providers here but<font color="#E5E5E5"> i'm</font><font color="#CCCCCC"> just going</font>

821
00:38:26,140 --> 00:38:31,960
<font color="#CCCCCC">to go through</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cool parts which is</font>

822
00:38:29,050 --> 00:38:34,119
the security analysis the code analysis

823
00:38:31,960 --> 00:38:39,190
here and it basically categorizes other

824
00:38:34,119 --> 00:38:41,980
java classes based upon the api's that

825
00:38:39,190 --> 00:38:44,349
are being<font color="#CCCCCC"> used so if app is storing</font>

826
00:38:41,980 --> 00:38:48,099
sensitive or logging potential sensitive

827
00:38:44,349 --> 00:38:50,910
data using insecure hash hash functions

828
00:38:48,099 --> 00:38:53,220
<font color="#CCCCCC">hard coded passwords secrets and keys</font>

829
00:38:50,910 --> 00:38:56,710
always a place for me to look at so

830
00:38:53,220 --> 00:39:03,520
let's have a look there i'll probably

831
00:38:56,710 --> 00:39:05,349
just ctrl f and key there's a key here

832
00:39:03,520 --> 00:39:07,869
oh it's just for their<font color="#CCCCCC"> Mixpanel</font><font color="#E5E5E5"> okay</font>

833
00:39:05,349 --> 00:39:09,369
nothing too crazy there but so you get

834
00:39:07,869 --> 00:39:11,440
an idea<font color="#E5E5E5"> there's you know you can also</font>

835
00:39:09,369 --> 00:39:14,109
see how they're storing data within

836
00:39:11,440 --> 00:39:16,750
sequel like databases if you can do

837
00:39:14,109 --> 00:39:19,089
probably<font color="#E5E5E5"> just search</font><font color="#CCCCCC"> for a % to see if</font>

838
00:39:16,750 --> 00:39:24,640
they have any dynamic queries probably

839
00:39:19,089 --> 00:39:26,640
not but still still places for interest

840
00:39:24,640 --> 00:39:29,710
very<font color="#E5E5E5"> very easy you can view</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> java</font>

841
00:39:26,640 --> 00:39:32,080
of the<font color="#CCCCCC"> java code as well as hard coded</font>

842
00:39:29,710 --> 00:39:33,550
certificates that could be obviously

843
00:39:32,080 --> 00:39:37,930
here you have the root certificate here

844
00:39:33,550 --> 00:39:39,640
nice to look at and also the<font color="#E5E5E5"> urls their</font>

845
00:39:37,930 --> 00:39:45,430
API endpoints that the application is

846
00:39:39,640 --> 00:39:48,250
speaking to so treasure trove of data

847
00:39:45,430 --> 00:39:51,098
<font color="#CCCCCC">here uh let</font><font color="#E5E5E5"> me go back here to the top</font>

848
00:39:48,250 --> 00:39:55,240
<font color="#CCCCCC">so if i wanted to be-- java want to</font>

849
00:39:51,099 --> 00:39:57,280
search<font color="#E5E5E5"> java code here and also just</font>

850
00:39:55,240 --> 00:39:59,120
<font color="#E5E5E5">search password</font>

851
00:39:57,280 --> 00:40:01,370
anything that basically just says

852
00:39:59,120 --> 00:40:03,109
password he'll come<font color="#CCCCCC"> up and you'll see</font>

853
00:40:01,370 --> 00:40:05,210
the pseudocode here<font color="#E5E5E5"> obviously you saw</font>

854
00:40:03,110 --> 00:40:08,720
how fast<font color="#E5E5E5"> you decompile the app like</font>

855
00:40:05,210 --> 00:40:12,970
nothing but there's cork as well and

856
00:40:08,720 --> 00:40:20,319
corcos a tool built from<font color="#E5E5E5"> LinkedIn and</font>

857
00:40:12,970 --> 00:40:23,060
they use here's basically cork<font color="#E5E5E5"> Python</font>

858
00:40:20,320 --> 00:40:29,240
<font color="#E5E5E5">Python application uses three java</font>

859
00:40:23,060 --> 00:40:31,220
decompiler 'he's i have the report there

860
00:40:29,240 --> 00:40:33,830
you can inspect<font color="#E5E5E5"> the manifest and it</font>

861
00:40:31,220 --> 00:40:37,000
basically<font color="#CCCCCC"> is statically analyzes the app</font>

862
00:40:33,830 --> 00:40:41,029
here are the three java decompiler uses

863
00:40:37,000 --> 00:40:42,170
once it starts up here in a second it

864
00:40:41,030 --> 00:40:44,030
takes them and it takes<font color="#E5E5E5"> about seven</font>

865
00:40:42,170 --> 00:40:48,500
minutes for it to finish up because they

866
00:40:44,030 --> 00:40:52,250
use a JD core CFR and what is<font color="#E5E5E5"> your</font><font color="#CCCCCC"> the</font>

867
00:40:48,500 --> 00:40:54,860
<font color="#E5E5E5">one pro</font><font color="#CCCCCC"> kyung propionic in' i think is</font>

868
00:40:52,250 --> 00:40:58,490
another job java decompiler something to

869
00:40:54,860 --> 00:40:59,810
note to even with uh with mobile

870
00:40:58,490 --> 00:41:01,839
security framework you can<font color="#E5E5E5"> change the</font>

871
00:40:59,810 --> 00:41:04,299
java decompiler<font color="#CCCCCC"> zaz wow that it's using</font>

872
00:41:01,840 --> 00:41:07,190
free open-source very very cool

873
00:41:04,300 --> 00:41:10,490
obviously a ton of information they can

874
00:41:07,190 --> 00:41:12,830
get from<font color="#CCCCCC"> an application you don't even</font>

875
00:41:10,490 --> 00:41:14,660
<font color="#E5E5E5">have to be basically</font><font color="#CCCCCC"> an expert to know</font>

876
00:41:12,830 --> 00:41:16,430
what this means you could probably just

877
00:41:14,660 --> 00:41:20,149
blew your<font color="#E5E5E5"> way through it afterwards and</font>

878
00:41:16,430 --> 00:41:22,759
figure it out and probably<font color="#E5E5E5"> wondering</font>

879
00:41:20,150 --> 00:41:25,940
where I got this EPK<font color="#E5E5E5"> I just went to a</font>

880
00:41:22,760 --> 00:41:28,880
peak ADL com search for being verified

881
00:41:25,940 --> 00:41:32,810
the hash from play store and when<font color="#CCCCCC"> I got</font>

882
00:41:28,880 --> 00:41:35,990
for the app the same not changed and yet

883
00:41:32,810 --> 00:41:38,029
good to go from there but for<font color="#E5E5E5"> Cork since</font>

884
00:41:35,990 --> 00:41:40,689
<font color="#E5E5E5">it's doing these things search for</font>

885
00:41:38,030 --> 00:41:43,300
vulnerabilities within web views

886
00:41:40,690 --> 00:41:46,250
certificate file permissions crypto

887
00:41:43,300 --> 00:41:47,360
pending intense but just so you guys are

888
00:41:46,250 --> 00:41:49,360
aware<font color="#CCCCCC"> i want you guys to see you</font>

889
00:41:47,360 --> 00:41:51,530
basically the options that are out there

890
00:41:49,360 --> 00:41:56,030
not only that for a mobile security

891
00:41:51,530 --> 00:41:58,520
framework it also supports iOS

892
00:41:56,030 --> 00:42:01,340
applications so if you wanted to see<font color="#CCCCCC"> i</font>

893
00:41:58,520 --> 00:42:05,720
can float up t list you can see it as

894
00:42:01,340 --> 00:42:08,230
well if you wanted to see the class

895
00:42:05,720 --> 00:42:10,390
information so the<font color="#E5E5E5"> classes so you</font>

896
00:42:08,230 --> 00:42:15,760
hook during runtime analysis you can<font color="#CCCCCC"> do</font>

897
00:42:10,390 --> 00:42:19,859
that um let me just get back with an

898
00:42:15,760 --> 00:42:19,859
over a couple<font color="#CCCCCC"> minutes</font>

899
00:42:25,359 --> 00:42:36,640
pretty easy right yes mobile security

900
00:42:32,529 --> 00:42:38,200
framework yeah yeah mobile security

901
00:42:36,640 --> 00:42:40,058
framers there's plenty out there but

902
00:42:38,200 --> 00:42:41,710
those those are the easiest ones from a

903
00:42:40,059 --> 00:42:43,749
pen tester I have five days to analyze a

904
00:42:41,710 --> 00:42:46,059
nap I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> you know the</font><font color="#E5E5E5"> most</font>

905
00:42:43,749 --> 00:42:47,799
efficient see I can to<font color="#CCCCCC"> a city</font><font color="#E5E5E5"> statically</font>

906
00:42:46,059 --> 00:42:50,049
aesthetically<font color="#E5E5E5"> analyze and then I can go</font>

907
00:42:47,799 --> 00:42:53,230
ahead and dynamically assess the

908
00:42:50,049 --> 00:42:56,799
application from there just real quick

909
00:42:53,230 --> 00:42:59,589
so<font color="#CCCCCC"> you guys can have this for your</font>

910
00:42:56,799 --> 00:43:02,079
research iOS has<font color="#CCCCCC"> idb again free</font>

911
00:42:59,589 --> 00:43:05,160
<font color="#CCCCCC">open-source that one's based upon Ruby</font>

912
00:43:02,079 --> 00:43:08,140
so for iOS<font color="#E5E5E5"> basically searches for a</font>

913
00:43:05,160 --> 00:43:11,230
secure storage or plist files sequel I'd

914
00:43:08,140 --> 00:43:13,390
databases if an application is storing

915
00:43:11,230 --> 00:43:16,420
your password in the keychain and not

916
00:43:13,390 --> 00:43:19,058
within a clear text peelers file and I

917
00:43:16,420 --> 00:43:21,489
demonstrated cork a little bit Bob<font color="#E5E5E5"> that</font>

918
00:43:19,059 --> 00:43:25,749
<font color="#E5E5E5">stuff is mobile security framework</font><font color="#CCCCCC"> frida</font>

919
00:43:21,489 --> 00:43:27,910
is a runtime analysis tool and<font color="#CCCCCC"> Dora</font><font color="#E5E5E5"> Phi</font>

920
00:43:25,749 --> 00:43:32,618
is another java decompiler very very

921
00:43:27,910 --> 00:43:34,660
good this is key your brain like i was

922
00:43:32,619 --> 00:43:37,239
<font color="#CCCCCC">saying</font><font color="#E5E5E5"> those JSON files and xml files</font>

923
00:43:34,660 --> 00:43:38,348
this would be<font color="#E5E5E5"> nosy is what you want to</font>

924
00:43:37,239 --> 00:43:42,910
do when you're assessing the mobile

925
00:43:38,349 --> 00:43:45,430
applications trust<font color="#CCCCCC"> but verify tools</font>

926
00:43:42,910 --> 00:43:48,279
don't find everything like<font color="#E5E5E5"> I said those</font>

927
00:43:45,430 --> 00:43:49,749
JSON files xml files config files others

928
00:43:48,279 --> 00:43:53,049
are things you have to find within the

929
00:43:49,749 --> 00:43:59,890
application document directories as well

930
00:43:53,049 --> 00:44:01,599
as their bundler directories so again

931
00:43:59,890 --> 00:44:02,950
you can contact me by email just<font color="#E5E5E5"> you</font>

932
00:44:01,599 --> 00:44:04,269
guys have any questions<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> kind of</font>

933
00:44:02,950 --> 00:44:06,390
ran through things fast the interest of

934
00:44:04,269 --> 00:44:12,419
<font color="#CCCCCC">time but feel free to</font><font color="#E5E5E5"> send me a note</font>

935
00:44:06,390 --> 00:44:12,420
<font color="#CCCCCC">I'll be tweeting out my slides thank you</font>

936
00:44:14,230 --> 00:44:16,290
you

