1
00:00:02,990 --> 00:00:24,430
[Music]

2
00:00:18,280 --> 00:00:27,320
um hi you know me she seduced me so a

3
00:00:24,430 --> 00:00:29,120
big problem we have is there's a<font color="#E5E5E5"> lot of</font>

4
00:00:27,320 --> 00:00:31,640
unknown vulnerabilities in our

5
00:00:29,120 --> 00:00:33,770
applications people detect them there we

6
00:00:31,640 --> 00:00:34,940
have backlogs but what if<font color="#E5E5E5"> I told you</font>

7
00:00:33,770 --> 00:00:37,840
that we<font color="#CCCCCC"> could detect unknown</font>

8
00:00:34,940 --> 00:00:40,610
vulnerabilities across entire classes

9
00:00:37,840 --> 00:00:44,030
whether<font color="#CCCCCC"> it's sequel injection or cross</font>

10
00:00:40,610 --> 00:00:47,090
that scripting or buffer overflows it

11
00:00:44,030 --> 00:00:49,850
applications we've never seen before we

12
00:00:47,090 --> 00:00:51,920
know nothing about we<font color="#CCCCCC"> just look</font><font color="#E5E5E5"> at them</font>

13
00:00:49,850 --> 00:00:55,370
and immediately know this is being

14
00:00:51,920 --> 00:00:56,630
exploited now and here's where it is you

15
00:00:55,370 --> 00:01:00,169
probably have<font color="#E5E5E5"> two hunters for me you</font>

16
00:00:56,630 --> 00:01:02,720
tailed me it's magic or you told me it's

17
00:01:00,170 --> 00:01:06,770
 and and both<font color="#CCCCCC"> of those are</font>

18
00:01:02,720 --> 00:01:09,860
somewhat correct so why are we<font color="#E5E5E5"> talking</font>

19
00:01:06,770 --> 00:01:12,080
about this because there are<font color="#CCCCCC"> things we</font>

20
00:01:09,860 --> 00:01:13,460
<font color="#CCCCCC">can do to sort of get to this point and</font>

21
00:01:12,080 --> 00:01:15,649
it's important to get<font color="#E5E5E5"> to this point</font>

22
00:01:13,460 --> 00:01:16,460
because there's no way we're ever going

23
00:01:15,649 --> 00:01:17,780
to close the loop<font color="#E5E5E5"> on these</font>

24
00:01:16,460 --> 00:01:20,240
vulnerabilities we're not ever going to

25
00:01:17,780 --> 00:01:21,380
know<font color="#CCCCCC"> all the things are</font><font color="#E5E5E5"> there we're not</font>

26
00:01:20,240 --> 00:01:22,490
ever going to find them all we're<font color="#E5E5E5"> not</font>

27
00:01:21,380 --> 00:01:24,199
ever going to be able to patch them all

28
00:01:22,490 --> 00:01:26,149
it's just<font color="#E5E5E5"> not going to happen so we have</font>

29
00:01:24,200 --> 00:01:29,090
to find automated ways to solve this and

30
00:01:26,149 --> 00:01:31,069
we have to get visual visibility into

31
00:01:29,090 --> 00:01:37,369
these applications that we don't know

32
00:01:31,069 --> 00:01:39,050
about so there's a<font color="#E5E5E5"> lot of types of</font>

33
00:01:37,369 --> 00:01:41,360
vulnerabilities typically we talk about

34
00:01:39,050 --> 00:01:43,069
injection vulnerabilities as things like

35
00:01:41,360 --> 00:01:46,759
sequel injection and cross-site

36
00:01:43,069 --> 00:01:49,459
scripting<font color="#CCCCCC"> Korean injection but I want to</font>

37
00:01:46,759 --> 00:01:52,100
I want to define this a little bit more

38
00:01:49,459 --> 00:01:53,780
and I want to<font color="#E5E5E5"> expand upon what we</font>

39
00:01:52,100 --> 00:01:57,500
traditionally consider as an<font color="#E5E5E5"> injection</font>

40
00:01:53,780 --> 00:01:59,360
attack instead I want to define it a

41
00:01:57,500 --> 00:02:01,459
little bit differently and say it's any

42
00:01:59,360 --> 00:02:03,050
time an attacker supplied input changes

43
00:02:01,459 --> 00:02:04,580
the behavior of a victim application

44
00:02:03,050 --> 00:02:06,920
unintentionally so you've written this

45
00:02:04,580 --> 00:02:09,440
application and you said<font color="#E5E5E5"> it should do</font>

46
00:02:06,920 --> 00:02:11,480
these things and you take some input and

47
00:02:09,440 --> 00:02:13,220
when that<font color="#E5E5E5"> input is able to change what</font>

48
00:02:11,480 --> 00:02:14,510
that application is doing when it's able

49
00:02:13,220 --> 00:02:16,760
to<font color="#E5E5E5"> change the code when it's able to</font>

50
00:02:14,510 --> 00:02:20,720
change the control flow and and

51
00:02:16,760 --> 00:02:22,519
introduce new paths new code new

52
00:02:20,720 --> 00:02:24,290
execution<font color="#E5E5E5"> that wasn't intended</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> happen</font>

53
00:02:22,520 --> 00:02:27,470
that's what we're calling an injection

54
00:02:24,290 --> 00:02:29,780
vulnerability and<font color="#E5E5E5"> this expands what we</font>

55
00:02:27,470 --> 00:02:31,220
traditionally think of it it's no<font color="#E5E5E5"> longer</font>

56
00:02:29,780 --> 00:02:33,620
just like<font color="#CCCCCC"> man injection</font>

57
00:02:31,220 --> 00:02:37,400
sequel injection it unlocks stack and

58
00:02:33,620 --> 00:02:41,870
heap overflows code injection using

59
00:02:37,400 --> 00:02:43,880
unsafe evals doing things like wake up

60
00:02:41,870 --> 00:02:46,010
<font color="#CCCCCC">functions</font><font color="#E5E5E5"> in D serialization platforms</font>

61
00:02:43,880 --> 00:02:49,730
which is incredibly prevalent right now

62
00:02:46,010 --> 00:02:51,530
in java and PHP all of these things<font color="#CCCCCC"> are</font>

63
00:02:49,730 --> 00:02:53,000
now classified as injection

64
00:02:51,530 --> 00:02:54,530
vulnerabilities because we're taking

65
00:02:53,000 --> 00:02:59,270
<font color="#CCCCCC">input and we're changing the behavior</font>

66
00:02:54,530 --> 00:03:03,050
based on that input the things we're<font color="#CCCCCC"> not</font>

67
00:02:59,270 --> 00:03:05,000
talking<font color="#CCCCCC"> about are our timing attacks</font>

68
00:03:03,050 --> 00:03:06,590
<font color="#CCCCCC">inside</font><font color="#E5E5E5"> channels things that leaked</font>

69
00:03:05,000 --> 00:03:08,750
information out<font color="#CCCCCC"> of the application that</font>

70
00:03:06,590 --> 00:03:10,490
we can we can then infer these aren't

71
00:03:08,750 --> 00:03:12,590
<font color="#E5E5E5">linked problems race conditions where</font>

72
00:03:10,490 --> 00:03:14,530
we're we're racing against other threads

73
00:03:12,590 --> 00:03:16,490
of processes to use a shared resource

74
00:03:14,530 --> 00:03:17,780
logic bugs this is something<font color="#E5E5E5"> that we're</font>

75
00:03:16,490 --> 00:03:21,340
not<font color="#E5E5E5"> ever going to fix automatically</font>

76
00:03:17,780 --> 00:03:23,690
because it's based around the actual

77
00:03:21,340 --> 00:03:25,280
application<font color="#E5E5E5"> of what is trying to do and</font>

78
00:03:23,690 --> 00:03:26,570
<font color="#E5E5E5">you have to understand that context</font>

79
00:03:25,280 --> 00:03:29,900
typically to solve those kinds<font color="#E5E5E5"> of</font>

80
00:03:26,570 --> 00:03:32,299
problems<font color="#CCCCCC"> week crypto something that that</font>

81
00:03:29,900 --> 00:03:33,950
you can you can do in some ways but

82
00:03:32,300 --> 00:03:35,690
that's<font color="#CCCCCC"> really more of a platform</font><font color="#E5E5E5"> problem</font>

83
00:03:33,950 --> 00:03:37,100
it's more of a does your hardware

84
00:03:35,690 --> 00:03:38,269
support is your software support is your

85
00:03:37,100 --> 00:03:41,150
language support it's not about

86
00:03:38,269 --> 00:03:42,950
understanding input information<font color="#E5E5E5"> leakage</font>

87
00:03:41,150 --> 00:03:44,330
week authentication authorization these

88
00:03:42,950 --> 00:03:45,679
are<font color="#E5E5E5"> all really difficult problems to</font>

89
00:03:44,330 --> 00:03:48,769
solve but we're not<font color="#CCCCCC"> going to tackle</font><font color="#E5E5E5"> them</font>

90
00:03:45,680 --> 00:03:51,290
<font color="#E5E5E5">here and these are all</font><font color="#CCCCCC"> things that links</font>

91
00:03:48,769 --> 00:03:53,000
that can can potentially help with but

92
00:03:51,290 --> 00:03:56,690
it's<font color="#E5E5E5"> not a solution for them it's not</font>

93
00:03:53,000 --> 00:03:57,739
going to solve that problem for you so

94
00:03:56,690 --> 00:04:01,450
I've been talking a lot about this word

95
00:03:57,739 --> 00:04:03,650
what is<font color="#CCCCCC"> it there's a lot of academic</font>

96
00:04:01,450 --> 00:04:06,320
definitions out there a lot<font color="#CCCCCC"> of people</font>

97
00:04:03,650 --> 00:04:08,330
that really built this community up all

98
00:04:06,320 --> 00:04:09,470
come from academic background but I

99
00:04:08,330 --> 00:04:11,030
<font color="#E5E5E5">don't want to focus on that I want to</font>

100
00:04:09,470 --> 00:04:12,470
<font color="#E5E5E5">make some more approachable to everyone</font>

101
00:04:11,030 --> 00:04:14,720
because one of the big problems<font color="#E5E5E5"> you have</font>

102
00:04:12,470 --> 00:04:16,910
is a lot of this understanding comes

103
00:04:14,720 --> 00:04:18,680
with understanding formal languages and

104
00:04:16,910 --> 00:04:21,140
compilers and parsers and it's something

105
00:04:18,680 --> 00:04:22,880
that the average<font color="#CCCCCC"> person doesn't know you</font>

106
00:04:21,140 --> 00:04:24,530
know maybe they took a class in college

107
00:04:22,880 --> 00:04:27,530
once but<font color="#CCCCCC"> something probably even thought</font>

108
00:04:24,530 --> 00:04:29,000
about in years so instead<font color="#E5E5E5"> I'm going to</font>

109
00:04:27,530 --> 00:04:30,859
give a more general description<font color="#E5E5E5"> of what</font>

110
00:04:29,000 --> 00:04:32,720
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is and I want</font><font color="#E5E5E5"> to call it a</font>

111
00:04:30,860 --> 00:04:35,240
methodology and technique for writing

112
00:04:32,720 --> 00:04:36,770
applications in such a way that user

113
00:04:35,240 --> 00:04:38,210
input cannot be used to change<font color="#E5E5E5"> the</font>

114
00:04:36,770 --> 00:04:40,060
behavior of the application and

115
00:04:38,210 --> 00:04:42,380
unattended ways by constraining

116
00:04:40,060 --> 00:04:44,210
validating and understanding input and

117
00:04:42,380 --> 00:04:47,219
its effects

118
00:04:44,210 --> 00:04:49,349
so we're going<font color="#E5E5E5"> to look at this this</font>

119
00:04:47,220 --> 00:04:50,640
input and we're going to<font color="#E5E5E5"> decide what</font>

120
00:04:49,350 --> 00:04:53,310
it's going to do we're going to limit

121
00:04:50,640 --> 00:04:55,620
<font color="#E5E5E5">the scope of what is actual valid input</font>

122
00:04:53,310 --> 00:04:57,780
and we're going to reject input that

123
00:04:55,620 --> 00:05:00,240
doesn't meet our constraints or doesn't

124
00:04:57,780 --> 00:05:01,799
meet our requirements the real<font color="#E5E5E5"> thing</font>

125
00:05:00,240 --> 00:05:03,660
we're going to do<font color="#CCCCCC"> here is we're going</font><font color="#E5E5E5"> to</font>

126
00:05:01,800 --> 00:05:05,580
<font color="#CCCCCC">take input and we're going to think of</font>

127
00:05:03,660 --> 00:05:07,740
<font color="#E5E5E5">it like a formal language just</font><font color="#CCCCCC"> like you</font>

128
00:05:05,580 --> 00:05:09,930
think of your source code as a formal

129
00:05:07,740 --> 00:05:11,820
language that your compiler goes through

130
00:05:09,930 --> 00:05:13,890
and says no this isn't valid there's a

131
00:05:11,820 --> 00:05:15,810
compiler error here that you have to go

132
00:05:13,890 --> 00:05:19,229
change this we're going<font color="#E5E5E5"> to do the same</font>

133
00:05:15,810 --> 00:05:20,820
thing with user input and<font color="#E5E5E5"> one of the</font>

134
00:05:19,230 --> 00:05:25,530
nice things about this<font color="#E5E5E5"> is it it will</font>

135
00:05:20,820 --> 00:05:27,960
help us by deciding what input should be

136
00:05:25,530 --> 00:05:30,840
valid<font color="#E5E5E5"> and what shouldn't it will help</font>

137
00:05:27,960 --> 00:05:32,489
help us with a performance in some ways

138
00:05:30,840 --> 00:05:34,530
<font color="#E5E5E5">because we're going to do</font><font color="#CCCCCC"> all of our</font>

139
00:05:32,490 --> 00:05:35,880
processing up<font color="#CCCCCC"> front which you might say</font>

140
00:05:34,530 --> 00:05:37,859
oh<font color="#CCCCCC"> it's a bad idea that I have to do</font>

141
00:05:35,880 --> 00:05:40,260
more work but it allows us<font color="#E5E5E5"> to reject a</font>

142
00:05:37,860 --> 00:05:42,990
lot of input that would otherwise go all

143
00:05:40,260 --> 00:05:44,460
the way through<font color="#E5E5E5"> the application and get</font>

144
00:05:42,990 --> 00:05:46,110
to the enemy oh this isn't valid I got

145
00:05:44,460 --> 00:05:49,320
to reject this now and I've done all

146
00:05:46,110 --> 00:05:50,700
this extra work but<font color="#E5E5E5"> we're the big thing</font>

147
00:05:49,320 --> 00:05:52,349
we're doing is were understanding input

148
00:05:50,700 --> 00:05:56,039
and we're understanding the effects of

149
00:05:52,350 --> 00:05:58,230
it before it happens so<font color="#CCCCCC"> why the</font>

150
00:05:56,040 --> 00:06:00,450
injection vulnerabilities<font color="#E5E5E5"> exist there's</font>

151
00:05:58,230 --> 00:06:02,990
typically three reasons and these three

152
00:06:00,450 --> 00:06:04,650
top three usually lead to the fourth

153
00:06:02,990 --> 00:06:06,510
insufficient or incorrect input

154
00:06:04,650 --> 00:06:08,820
validation so not using<font color="#E5E5E5"> the correct</font>

155
00:06:06,510 --> 00:06:10,770
method and complete or doing it too late

156
00:06:08,820 --> 00:06:12,659
I can<font color="#E5E5E5"> just in the</font><font color="#CCCCCC"> the case of a stack</font>

157
00:06:10,770 --> 00:06:14,460
overflow once you've read in that data

158
00:06:12,660 --> 00:06:17,220
or copy that data somewhere and you've

159
00:06:14,460 --> 00:06:18,840
overwritten your<font color="#CCCCCC"> turn pointer that's too</font>

160
00:06:17,220 --> 00:06:20,790
late you've already done the<font color="#E5E5E5"> damage and</font>

161
00:06:18,840 --> 00:06:22,530
there's very few safe ways you can get

162
00:06:20,790 --> 00:06:24,390
out<font color="#CCCCCC"> of that once you've already</font><font color="#E5E5E5"> done</font>

163
00:06:22,530 --> 00:06:26,369
<font color="#CCCCCC">that so</font><font color="#E5E5E5"> it's important</font><font color="#CCCCCC"> that we treat the</font>

164
00:06:24,390 --> 00:06:29,640
input correctly we<font color="#E5E5E5"> handle it all the way</font>

165
00:06:26,370 --> 00:06:31,200
through from the beginning and then not

166
00:06:29,640 --> 00:06:33,270
sufficiently constraining and put<font color="#CCCCCC"> or its</font>

167
00:06:31,200 --> 00:06:36,360
effects so not using<font color="#E5E5E5"> the right size</font>

168
00:06:33,270 --> 00:06:39,150
buffers<font color="#CCCCCC"> not using the right types and</font>

169
00:06:36,360 --> 00:06:40,830
putting validations in that making sure

170
00:06:39,150 --> 00:06:43,200
that the size constraints are right you

171
00:06:40,830 --> 00:06:43,950
know if you have a an integer making

172
00:06:43,200 --> 00:06:45,690
sure<font color="#E5E5E5"> you're not going to overflow</font>

173
00:06:43,950 --> 00:06:47,430
underflow if you have a<font color="#CCCCCC"> floating-point</font>

174
00:06:45,690 --> 00:06:49,650
<font color="#E5E5E5">make sure you have enough resolution in</font>

175
00:06:47,430 --> 00:06:51,030
that you can represent the number that

176
00:06:49,650 --> 00:06:53,310
you're actually reading in and you don't

177
00:06:51,030 --> 00:06:55,200
have rounding errors these and these are

178
00:06:53,310 --> 00:06:57,960
there's many more that go into this but

179
00:06:55,200 --> 00:06:59,940
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a general</font><font color="#E5E5E5"> idea and then the</font>

180
00:06:57,960 --> 00:07:01,799
is understanding<font color="#E5E5E5"> the inputs</font><font color="#CCCCCC"> of the</font>

181
00:06:59,940 --> 00:07:04,259
effects of the input before they occur

182
00:07:01,800 --> 00:07:07,310
and this is like I said super common in

183
00:07:04,259 --> 00:07:10,740
when you work with evals you work with

184
00:07:07,310 --> 00:07:13,139
programming languages that you can

185
00:07:10,740 --> 00:07:15,630
inject code into like JavaScript or a

186
00:07:13,139 --> 00:07:17,610
lot of dynamic languages that allow you

187
00:07:15,630 --> 00:07:20,849
to just<font color="#CCCCCC"> take strings and say this is</font>

188
00:07:17,610 --> 00:07:23,190
code now we also see it a lot in like I

189
00:07:20,849 --> 00:07:26,190
said deserialization a lot of the time

190
00:07:23,190 --> 00:07:29,160
these proprietary systems or once built

191
00:07:26,190 --> 00:07:31,050
into the language like<font color="#CCCCCC"> Java will allow</font>

192
00:07:29,160 --> 00:07:33,509
you to<font color="#E5E5E5"> stay you know when this thing</font>

193
00:07:31,050 --> 00:07:35,340
gets loaded out of memory<font color="#CCCCCC"> and I put it</font>

194
00:07:33,509 --> 00:07:39,570
into this object i want you to call this

195
00:07:35,340 --> 00:07:41,520
function and go do some<font color="#CCCCCC"> stuff there's a</font>

196
00:07:39,570 --> 00:07:44,219
tool that was<font color="#E5E5E5"> released a couple years</font>

197
00:07:41,520 --> 00:07:46,409
ago why so serial that's being used to

198
00:07:44,220 --> 00:07:48,660
take advantage<font color="#CCCCCC"> of this on the PHP side</font>

199
00:07:46,410 --> 00:07:53,270
there's some great<font color="#E5E5E5"> talks about pop</font>

200
00:07:48,660 --> 00:07:57,300
chains and using those to take execution

201
00:07:53,270 --> 00:07:59,460
and<font color="#CCCCCC"> the fourth is allowing input the</font>

202
00:07:57,300 --> 00:08:00,900
modifier be interpreted as code and this

203
00:07:59,460 --> 00:08:03,659
is typically when we never want to

204
00:08:00,900 --> 00:08:05,638
happen and the<font color="#CCCCCC"> reason this happens or</font>

205
00:08:03,659 --> 00:08:07,580
those<font color="#E5E5E5"> reason this is so bad is that it</font>

206
00:08:05,639 --> 00:08:10,169
leads to what going<font color="#E5E5E5"> to call</font>

207
00:08:07,580 --> 00:08:11,729
unintentional<font color="#E5E5E5"> turing machines and we'll</font>

208
00:08:10,169 --> 00:08:13,049
get<font color="#E5E5E5"> into that a little bit but it allows</font>

209
00:08:11,729 --> 00:08:17,430
you to basically create a situation

210
00:08:13,050 --> 00:08:20,219
where<font color="#E5E5E5"> you can go forward and you can</font>

211
00:08:17,430 --> 00:08:21,630
execute code and there's the<font color="#E5E5E5"> application</font>

212
00:08:20,219 --> 00:08:25,620
itself has<font color="#CCCCCC"> no idea what's going to</font>

213
00:08:21,630 --> 00:08:27,979
happen at<font color="#CCCCCC"> that point and</font><font color="#E5E5E5"> it can't with</font>

214
00:08:25,620 --> 00:08:30,570
respect<font color="#CCCCCC"> to incorrect in phila Dacian</font>

215
00:08:27,979 --> 00:08:32,640
this typically comes from using a

216
00:08:30,570 --> 00:08:35,039
technique known as shotgun parsing which

217
00:08:32,640 --> 00:08:36,360
was introduced in this paper you<font color="#CCCCCC"> should</font>

218
00:08:35,039 --> 00:08:40,348
definitely<font color="#E5E5E5"> read it it's really</font>

219
00:08:36,360 --> 00:08:43,200
approachable and easy to<font color="#CCCCCC"> grok basically</font>

220
00:08:40,349 --> 00:08:45,180
what this is is interspersing you're

221
00:08:43,200 --> 00:08:49,560
parsing logic with your processing logic

222
00:08:45,180 --> 00:08:51,649
so you taken a string and you start

223
00:08:49,560 --> 00:08:57,689
working on it you know<font color="#E5E5E5"> for the instance</font>

224
00:08:51,649 --> 00:09:00,029
maybe you're you're<font color="#E5E5E5"> looking at like a</font>

225
00:08:57,690 --> 00:09:02,040
<font color="#E5E5E5">JPEG file so you read it in I see the</font>

226
00:09:00,029 --> 00:09:04,020
Japheth header cool start going go and

227
00:09:02,040 --> 00:09:06,810
going looking for<font color="#CCCCCC"> some exif data okay I</font>

228
00:09:04,020 --> 00:09:08,880
see this exif data keep going going

229
00:09:06,810 --> 00:09:10,469
going and you're<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> at piece by</font>

230
00:09:08,880 --> 00:09:11,870
piece<font color="#CCCCCC"> and you're not recognizing the</font>

231
00:09:10,470 --> 00:09:13,649
entire file you're not

232
00:09:11,870 --> 00:09:15,240
understanding what it's going to do you

233
00:09:13,649 --> 00:09:17,790
don't know if it's well formed before

234
00:09:15,240 --> 00:09:19,620
you start doing<font color="#E5E5E5"> work on it and this is a</font>

235
00:09:17,790 --> 00:09:21,540
serious problem<font color="#E5E5E5"> because like i said</font>

236
00:09:19,620 --> 00:09:23,339
earlier<font color="#E5E5E5"> in the case of you know say</font>

237
00:09:21,540 --> 00:09:24,660
stack overflows get to the<font color="#CCCCCC"> point we've</font>

238
00:09:23,339 --> 00:09:26,850
already done the damage because you

239
00:09:24,660 --> 00:09:29,969
haven't verified at first<font color="#E5E5E5"> before you</font>

240
00:09:26,850 --> 00:09:31,440
start working on<font color="#CCCCCC"> it so like that the big</font>

241
00:09:29,970 --> 00:09:33,779
takeaway here is this the lack of full

242
00:09:31,440 --> 00:09:35,339
recognition before processing and to

243
00:09:33,779 --> 00:09:38,630
demonstrate<font color="#E5E5E5"> I'll go through a little</font>

244
00:09:35,339 --> 00:09:41,130
example<font color="#E5E5E5"> of a binary serialization format</font>

245
00:09:38,630 --> 00:09:42,000
this<font color="#E5E5E5"> is nothing that's in particular</font>

246
00:09:41,130 --> 00:09:46,139
which is something that<font color="#E5E5E5"> I came up</font><font color="#CCCCCC"> with</font>

247
00:09:42,000 --> 00:09:48,779
this demo but we see here some data that

248
00:09:46,139 --> 00:09:51,589
the first bite here is an S to denote

249
00:09:48,779 --> 00:09:55,290
that it's a string and that's the type

250
00:09:51,589 --> 00:09:57,240
the next is the size<font color="#E5E5E5"> it's two bytes in</font>

251
00:09:55,290 --> 00:10:00,660
this case it's it's a it's a<font color="#CCCCCC"> ten bite</font>

252
00:09:57,240 --> 00:10:04,680
string we then have some data we see

253
00:10:00,660 --> 00:10:06,689
<font color="#CCCCCC">Tenet's there followed by a no bite and</font>

254
00:10:04,680 --> 00:10:08,790
<font color="#E5E5E5">and this is the end of the string so it</font>

255
00:10:06,690 --> 00:10:11,160
knows<font color="#E5E5E5"> I've gotten to this point I can</font>

256
00:10:08,790 --> 00:10:13,430
now stop reading and<font color="#E5E5E5"> the next thing that</font>

257
00:10:11,160 --> 00:10:15,600
I read is going to be the next string

258
00:10:13,430 --> 00:10:18,959
and we can convert it to a C string

259
00:10:15,600 --> 00:10:21,839
doing that so here's a little bit of

260
00:10:18,959 --> 00:10:24,779
code<font color="#CCCCCC"> to handle reading this in and</font>

261
00:10:21,839 --> 00:10:27,019
<font color="#E5E5E5">deserializing it anyone spot an issue</font>

262
00:10:24,779 --> 00:10:27,019
here

263
00:10:31,100 --> 00:10:38,780
okay<font color="#E5E5E5"> I'm gonna tell you so I don't have</font>

264
00:10:33,920 --> 00:10:42,650
a pointer or not I do not so if you look

265
00:10:38,780 --> 00:10:45,560
right here it gets down past reading in

266
00:10:42,650 --> 00:10:49,400
the size and we start reading in the

267
00:10:45,560 --> 00:10:51,410
<font color="#E5E5E5">individual bytes of the string and the</font>

268
00:10:49,400 --> 00:10:54,170
way that<font color="#E5E5E5"> we determine when</font><font color="#CCCCCC"> we stop is we</font>

269
00:10:51,410 --> 00:10:56,569
look for the null byte so we've taken<font color="#E5E5E5"> in</font>

270
00:10:54,170 --> 00:10:59,569
<font color="#CCCCCC">the size so that we can allocate space</font>

271
00:10:56,570 --> 00:11:02,090
to read this<font color="#E5E5E5"> into but we're ignoring</font>

272
00:10:59,570 --> 00:11:03,350
that value<font color="#E5E5E5"> we're reading until the end</font>

273
00:11:02,090 --> 00:11:05,330
<font color="#E5E5E5">of the string and there's a lot</font><font color="#CCCCCC"> of</font>

274
00:11:03,350 --> 00:11:06,830
reasons you might want to do that maybe

275
00:11:05,330 --> 00:11:09,050
<font color="#E5E5E5">you want to make sure that</font><font color="#CCCCCC"> you don't</font>

276
00:11:06,830 --> 00:11:10,970
ever get a situation where you stop

277
00:11:09,050 --> 00:11:12,170
reading and<font color="#E5E5E5"> you still have data left</font>

278
00:11:10,970 --> 00:11:13,550
because it's going to corrupt the next

279
00:11:12,170 --> 00:11:15,260
entry you read in do you want to make

280
00:11:13,550 --> 00:11:16,640
sure you always there this isn't good

281
00:11:15,260 --> 00:11:20,150
code but it but it's something that<font color="#CCCCCC"> you</font>

282
00:11:16,640 --> 00:11:21,980
might see in a normal application so

283
00:11:20,150 --> 00:11:24,590
what ends up happening here is you you

284
00:11:21,980 --> 00:11:27,140
read continually until you get to the

285
00:11:24,590 --> 00:11:29,990
end of<font color="#E5E5E5"> that null byte and you over right</font>

286
00:11:27,140 --> 00:11:32,060
past the allocation you've made so in

287
00:11:29,990 --> 00:11:35,450
the case of some malicious input like

288
00:11:32,060 --> 00:11:36,770
this we have more<font color="#CCCCCC"> than 10</font><font color="#E5E5E5"> A's and we</font>

289
00:11:35,450 --> 00:11:38,350
right past there we can corrupt the

290
00:11:36,770 --> 00:11:41,270
stack point but it<font color="#CCCCCC"> we can corrupt the</font>

291
00:11:38,350 --> 00:11:48,070
return pointer and we've just crashed

292
00:11:41,270 --> 00:11:49,880
the program insufficient constraints

293
00:11:48,070 --> 00:11:51,740
most of the time constraints<font color="#E5E5E5"> you're</font>

294
00:11:49,880 --> 00:11:54,800
added lazily their responses to things

295
00:11:51,740 --> 00:11:57,200
that we do we don't<font color="#E5E5E5"> know what we need to</font>

296
00:11:54,800 --> 00:11:58,699
accept we just know that<font color="#E5E5E5"> this thing is</font>

297
00:11:57,200 --> 00:12:00,620
going to come to us<font color="#CCCCCC"> there's some input</font>

298
00:11:58,700 --> 00:12:03,650
box somewhere and and data<font color="#E5E5E5"> is going to</font>

299
00:12:00,620 --> 00:12:06,140
come in and we say oh customer

300
00:12:03,650 --> 00:12:07,520
complained that<font color="#CCCCCC"> you know this wasn't</font>

301
00:12:06,140 --> 00:12:10,250
working so you<font color="#E5E5E5"> go and you add a little</font>

302
00:12:07,520 --> 00:12:11,480
<font color="#CCCCCC">bit more you say oh this this shouldn't</font>

303
00:12:10,250 --> 00:12:12,440
happen so you<font color="#E5E5E5"> add a little bit more you</font>

304
00:12:11,480 --> 00:12:14,150
add a<font color="#E5E5E5"> little bit more</font><font color="#CCCCCC"> and you add a</font>

305
00:12:12,440 --> 00:12:16,430
little<font color="#E5E5E5"> bit more and all of a</font><font color="#CCCCCC"> sudden you</font>

306
00:12:14,150 --> 00:12:20,150
have this really complex logic no one

307
00:12:16,430 --> 00:12:22,219
really understands what has to go there

308
00:12:20,150 --> 00:12:24,740
what is allowed there you<font color="#E5E5E5"> just know that</font>

309
00:12:22,220 --> 00:12:28,790
so far I I do what I'm expected to do

310
00:12:24,740 --> 00:12:30,920
and it's working so you might add in no

311
00:12:28,790 --> 00:12:32,270
constraints for large values or weights

312
00:12:30,920 --> 00:12:33,920
to make sure you know how many<font color="#E5E5E5"> times</font>

313
00:12:32,270 --> 00:12:35,420
have you seen something where you have

314
00:12:33,920 --> 00:12:36,890
to say oh just sleep for this amount<font color="#E5E5E5"> of</font>

315
00:12:35,420 --> 00:12:42,110
<font color="#CCCCCC">time because I have</font><font color="#E5E5E5"> to wait for this</font>

316
00:12:36,890 --> 00:12:43,580
thing to finish it happens so we don't

317
00:12:42,110 --> 00:12:44,480
think of input as a formal language we

318
00:12:43,580 --> 00:12:46,910
don't know

319
00:12:44,480 --> 00:12:48,500
what input is supposed to look like we

320
00:12:46,910 --> 00:12:50,209
just know that<font color="#E5E5E5"> we have to meet all these</font>

321
00:12:48,500 --> 00:12:54,110
constraints and if we get to the bottom

322
00:12:50,209 --> 00:12:55,819
of it cool we're good a lot of the time

323
00:12:54,110 --> 00:12:57,019
you're moving an unfriendly input maybe

324
00:12:55,820 --> 00:12:58,880
we're looking<font color="#CCCCCC"> at the output of a</font>

325
00:12:57,019 --> 00:13:00,949
terminal program maybe it's meant for

326
00:12:58,880 --> 00:13:02,060
humans to read<font color="#E5E5E5"> and not machines so</font>

327
00:13:00,949 --> 00:13:05,510
you're going<font color="#E5E5E5"> to go through</font><font color="#CCCCCC"> and you're</font>

328
00:13:02,060 --> 00:13:06,979
<font color="#E5E5E5">going to say</font><font color="#CCCCCC"> okay I see that this thing</font>

329
00:13:05,510 --> 00:13:09,050
I care about is here I'm<font color="#E5E5E5"> gonna go grab</font>

330
00:13:06,980 --> 00:13:10,970
<font color="#E5E5E5">it out of there and and that's what I</font>

331
00:13:09,050 --> 00:13:13,219
need I only need that I don't care about

332
00:13:10,970 --> 00:13:15,320
<font color="#E5E5E5">anything else or maybe you're going to</font>

333
00:13:13,220 --> 00:13:18,230
<font color="#CCCCCC">say</font><font color="#E5E5E5"> I know I need to make sure this</font>

334
00:13:15,320 --> 00:13:21,320
thing is here so I see this this little

335
00:13:18,230 --> 00:13:22,970
bit of text and all<font color="#E5E5E5"> right I see</font><font color="#CCCCCC"> it lets</font>

336
00:13:21,320 --> 00:13:25,040
go<font color="#E5E5E5"> we know it's here we know we're good</font>

337
00:13:22,970 --> 00:13:26,779
let's go process<font color="#E5E5E5"> it now and maybe it's</font>

338
00:13:25,040 --> 00:13:31,250
<font color="#E5E5E5">not well formed but maybe that one piece</font>

339
00:13:26,779 --> 00:13:32,779
is there and you get<font color="#E5E5E5"> to</font><font color="#CCCCCC"> go past you</font><font color="#E5E5E5"> also</font>

340
00:13:31,250 --> 00:13:34,550
have the case of embedding languages a

341
00:13:32,779 --> 00:13:36,769
lot<font color="#E5E5E5"> of the time enterprise applications</font>

342
00:13:34,550 --> 00:13:38,540
or places where you need extensibility

343
00:13:36,769 --> 00:13:40,639
maybe customers need to write their own

344
00:13:38,540 --> 00:13:42,050
business logic into your platform you'll

345
00:13:40,639 --> 00:13:44,029
see people embedding programming

346
00:13:42,050 --> 00:13:46,939
languages the limited rubies or pythons

347
00:13:44,029 --> 00:13:48,949
or Lewis or any other dynamic language

348
00:13:46,940 --> 00:13:50,510
because they need to provide a way to

349
00:13:48,949 --> 00:13:53,899
build accessibility into this platform

350
00:13:50,510 --> 00:13:55,939
for their customer well so the problem

351
00:13:53,899 --> 00:13:58,130
is what do<font color="#CCCCCC"> you do with that you</font><font color="#E5E5E5"> just</font>

352
00:13:55,940 --> 00:14:00,769
bring the entire interpreter in not now

353
00:13:58,130 --> 00:14:03,199
you have this this sandbox hopefully

354
00:14:00,769 --> 00:14:06,980
that that they can do whatever they want

355
00:14:03,199 --> 00:14:08,300
in and it's bad because like what are

356
00:14:06,980 --> 00:14:10,819
you going to do with that<font color="#E5E5E5"> you know in in</font>

357
00:14:08,300 --> 00:14:12,439
PHP you might have people turning off

358
00:14:10,819 --> 00:14:14,360
certain function calls and<font color="#E5E5E5"> and it</font>

359
00:14:12,440 --> 00:14:17,750
happens and that's one way people try to

360
00:14:14,360 --> 00:14:20,600
do it so there's a handful<font color="#E5E5E5"> of common</font>

361
00:14:17,750 --> 00:14:23,149
solutions to these the first like i said

362
00:14:20,600 --> 00:14:26,139
is sandboxing this is really hard to<font color="#E5E5E5"> get</font>

363
00:14:23,149 --> 00:14:28,790
correct really really really really hard

364
00:14:26,139 --> 00:14:30,680
never ask someone what functions they

365
00:14:28,790 --> 00:14:32,449
need access to or what's this calls they

366
00:14:30,680 --> 00:14:34,880
use what resources they're going<font color="#CCCCCC"> to use</font>

367
00:14:32,449 --> 00:14:36,920
<font color="#E5E5E5">their really crazy like no one knows</font>

368
00:14:34,880 --> 00:14:38,600
this you go to any developer and they're

369
00:14:36,920 --> 00:14:40,819
like I don't know I'm responsible for

370
00:14:38,600 --> 00:14:43,339
<font color="#CCCCCC">this little</font><font color="#E5E5E5"> section over here I can tell</font>

371
00:14:40,819 --> 00:14:46,099
you about<font color="#CCCCCC"> you know how we how we call</font>

372
00:14:43,339 --> 00:14:47,540
out to google to go pull down this this

373
00:14:46,100 --> 00:14:51,260
data but I don't know what's over there

374
00:14:47,540 --> 00:14:53,689
go ask go ask Tim<font color="#CCCCCC"> and like they're just</font>

375
00:14:51,260 --> 00:14:54,829
not going<font color="#E5E5E5"> to know no one has the scope</font>

376
00:14:53,689 --> 00:14:57,199
of the full application in their head

377
00:14:54,829 --> 00:14:58,079
and especially in a large application

378
00:14:57,199 --> 00:14:59,729
like you<font color="#E5E5E5"> just you're just</font>

379
00:14:58,080 --> 00:15:01,740
<font color="#E5E5E5">I know</font><font color="#CCCCCC"> that you know is the</font><font color="#E5E5E5"> original</font>

380
00:14:59,730 --> 00:15:03,360
author still there do you actually know

381
00:15:01,740 --> 00:15:05,750
what the vast majority this code does

382
00:15:03,360 --> 00:15:09,420
you and have<font color="#E5E5E5"> access to the source code</font>

383
00:15:05,750 --> 00:15:12,480
like these are all common occurrences so

384
00:15:09,420 --> 00:15:14,370
San boxing is really weird technique

385
00:15:12,480 --> 00:15:18,120
that like it works in a lot<font color="#CCCCCC"> of ways but</font>

386
00:15:14,370 --> 00:15:20,370
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really hard to get right and we'll</font>

387
00:15:18,120 --> 00:15:23,190
look across platforms say you're working

388
00:15:20,370 --> 00:15:25,440
you know in a multi-platform environment

389
00:15:23,190 --> 00:15:27,750
maybe you're deploying to Linux but you

390
00:15:25,440 --> 00:15:29,940
develop on OS 10 or you have<font color="#CCCCCC"> Windows</font>

391
00:15:27,750 --> 00:15:32,760
developers and you know<font color="#E5E5E5"> will that</font>

392
00:15:29,940 --> 00:15:34,740
sandbox work in all environments and and

393
00:15:32,760 --> 00:15:36,060
can you<font color="#E5E5E5"> build the same rules that will</font>

394
00:15:34,740 --> 00:15:37,740
go from one of the other and have those

395
00:15:36,060 --> 00:15:39,479
same constraints and can<font color="#CCCCCC"> you prove that</font>

396
00:15:37,740 --> 00:15:44,400
and can you prove that it's always going

397
00:15:39,480 --> 00:15:46,050
to<font color="#E5E5E5"> work the same so it requires a lot of</font>

398
00:15:44,400 --> 00:15:48,090
trial and error and that's<font color="#E5E5E5"> the real</font>

399
00:15:46,050 --> 00:15:50,010
problem here is that you only know as

400
00:15:48,090 --> 00:15:51,720
much as you as you try there's a<font color="#CCCCCC"> lot of</font>

401
00:15:50,010 --> 00:15:53,220
unknown unknowns which is the biggest

402
00:15:51,720 --> 00:15:54,570
problem<font color="#CCCCCC"> that we have to</font><font color="#E5E5E5"> solve there's</font>

403
00:15:53,220 --> 00:15:57,180
all these things we don't know but we

404
00:15:54,570 --> 00:15:58,350
don't know we don't know them<font color="#CCCCCC"> so another</font>

405
00:15:57,180 --> 00:15:59,430
technique you might use when<font color="#E5E5E5"> you're</font>

406
00:15:58,350 --> 00:16:01,980
doing these things is you might modify

407
00:15:59,430 --> 00:16:04,650
the language oh I know<font color="#E5E5E5"> that I don't ever</font>

408
00:16:01,980 --> 00:16:07,830
want my users to you know create sockets

409
00:16:04,650 --> 00:16:09,240
or<font color="#CCCCCC"> to make web requests or read files so</font>

410
00:16:07,830 --> 00:16:11,640
you<font color="#E5E5E5"> start ripping out functionalities</font>

411
00:16:09,240 --> 00:16:14,580
like I can just take this out well for

412
00:16:11,640 --> 00:16:17,189
dynamic languages you really can't a lot

413
00:16:14,580 --> 00:16:19,380
of this code hopefully is written

414
00:16:17,190 --> 00:16:20,970
natively so it's built into its not

415
00:16:19,380 --> 00:16:22,320
written just in<font color="#E5E5E5"> that language so once</font>

416
00:16:20,970 --> 00:16:24,330
you sever that connection into the end

417
00:16:22,320 --> 00:16:26,100
of the language sometimes<font color="#E5E5E5"> you can you</font>

418
00:16:24,330 --> 00:16:27,450
can kind of get<font color="#CCCCCC"> away with it but</font><font color="#E5E5E5"> forget</font>

419
00:16:26,100 --> 00:16:28,920
to<font color="#CCCCCC"> emek languages you can just introduce</font>

420
00:16:27,450 --> 00:16:30,750
that code back in once you have code

421
00:16:28,920 --> 00:16:33,510
injection and once you have the<font color="#CCCCCC"> ability</font>

422
00:16:30,750 --> 00:16:35,310
to give it code just<font color="#E5E5E5"> oh yeah you took it</font>

423
00:16:33,510 --> 00:16:38,610
my network library here's right back

424
00:16:35,310 --> 00:16:41,459
take it in execute this and cool it's in

425
00:16:38,610 --> 00:16:42,780
my environment now you also probably

426
00:16:41,460 --> 00:16:44,670
don't know the internals of language as

427
00:16:42,780 --> 00:16:45,990
<font color="#CCCCCC">well as developers do you know you</font>

428
00:16:44,670 --> 00:16:48,900
probably don't spend all your time

429
00:16:45,990 --> 00:16:50,940
working in it you know this is<font color="#E5E5E5"> maybe</font>

430
00:16:48,900 --> 00:16:53,939
something you spend a day doing a week

431
00:16:50,940 --> 00:16:55,980
doing a month doing but it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> your</font>

432
00:16:53,940 --> 00:16:57,600
focus your focus is is making sure that

433
00:16:55,980 --> 00:16:59,370
<font color="#CCCCCC">this application is deployed that it's</font>

434
00:16:57,600 --> 00:17:02,610
running that your feature set<font color="#CCCCCC"> thing</font>

435
00:16:59,370 --> 00:17:03,930
you're responsible<font color="#CCCCCC"> for it works and</font>

436
00:17:02,610 --> 00:17:05,760
because you're doing this you're<font color="#E5E5E5"> not</font>

437
00:17:03,930 --> 00:17:07,440
taking upstream patches you know when

438
00:17:05,760 --> 00:17:08,910
vulnerabilities are patched you're not

439
00:17:07,440 --> 00:17:10,260
going to take those in you know maybe

440
00:17:08,910 --> 00:17:11,880
you've modified it a bunch and you can't

441
00:17:10,260 --> 00:17:13,589
just go start applying those patches

442
00:17:11,880 --> 00:17:15,449
you can't<font color="#CCCCCC"> just upgrade the version is</font>

443
00:17:13,589 --> 00:17:16,708
something new because it's<font color="#E5E5E5"> going to</font>

444
00:17:15,449 --> 00:17:18,240
break everything it's not going to work

445
00:17:16,709 --> 00:17:23,250
your sandbox<font color="#E5E5E5"> is going to</font><font color="#CCCCCC"> disappear and</font>

446
00:17:18,240 --> 00:17:24,900
it's not a viable<font color="#E5E5E5"> option so what's the</font>

447
00:17:23,250 --> 00:17:28,230
real problem here what are we<font color="#CCCCCC"> really</font>

448
00:17:24,900 --> 00:17:30,330
trying<font color="#E5E5E5"> to solve and in order to</font>

449
00:17:28,230 --> 00:17:31,980
understand this we didn't understand a

450
00:17:30,330 --> 00:17:33,840
little bit about computational theory

451
00:17:31,980 --> 00:17:36,150
and<font color="#CCCCCC"> the machines that do it the machines</font>

452
00:17:33,840 --> 00:17:38,550
that that understand language that are

453
00:17:36,150 --> 00:17:41,070
<font color="#E5E5E5">able to comprehend it and make decisions</font>

454
00:17:38,550 --> 00:17:43,290
<font color="#CCCCCC">about language so this</font><font color="#E5E5E5"> is where that</font>

455
00:17:41,070 --> 00:17:45,629
automata theory class you took all those

456
00:17:43,290 --> 00:17:46,740
years ago assuming you did it's going<font color="#E5E5E5"> to</font>

457
00:17:45,630 --> 00:17:52,290
come back<font color="#E5E5E5"> to haunt you and we're going</font>

458
00:17:46,740 --> 00:17:55,040
to give a little<font color="#E5E5E5"> bit into this so there</font>

459
00:17:52,290 --> 00:17:58,580
was<font color="#CCCCCC"> this guy Noam Chomsky and he</font>

460
00:17:55,040 --> 00:18:01,290
developed this hierarchy of languages

461
00:17:58,580 --> 00:18:04,679
the bottom<font color="#E5E5E5"> here you see regular and the</font>

462
00:18:01,290 --> 00:18:07,080
top you see turning complete so every

463
00:18:04,680 --> 00:18:09,510
higher-level language has more power

464
00:18:07,080 --> 00:18:11,520
it's able<font color="#E5E5E5"> to do more things and every</font>

465
00:18:09,510 --> 00:18:13,770
<font color="#E5E5E5">higher-level language encompasses a</font>

466
00:18:11,520 --> 00:18:16,020
lower level language so the regular

467
00:18:13,770 --> 00:18:17,610
<font color="#E5E5E5">languages are the least powerful where</font>

468
00:18:16,020 --> 00:18:20,910
the touring complete languages are the

469
00:18:17,610 --> 00:18:22,530
most<font color="#CCCCCC"> powerful in</font><font color="#E5E5E5"> in the case of one of</font>

470
00:18:20,910 --> 00:18:25,740
your standard programming languages like

471
00:18:22,530 --> 00:18:27,810
Ruby or Python or Java these are all

472
00:18:25,740 --> 00:18:29,370
turning complete languages and<font color="#E5E5E5"> we'll</font>

473
00:18:27,810 --> 00:18:33,440
dive a little bit into what that means

474
00:18:29,370 --> 00:18:35,189
in a minute regular languages and

475
00:18:33,440 --> 00:18:36,870
context-free languages this is what we

476
00:18:35,190 --> 00:18:38,370
want to shoot<font color="#CCCCCC"> for this is what we want</font>

477
00:18:36,870 --> 00:18:40,860
to shoot for<font color="#E5E5E5"> when we design our input</font>

478
00:18:38,370 --> 00:18:42,209
and we start constraining it because

479
00:18:40,860 --> 00:18:44,699
it's going<font color="#E5E5E5"> to give us a lot</font><font color="#CCCCCC"> more freedom</font>

480
00:18:42,210 --> 00:18:46,860
and<font color="#E5E5E5"> a lot more power to say this is</font>

481
00:18:44,700 --> 00:18:52,080
invalid this is what it's going<font color="#E5E5E5"> to do I</font>

482
00:18:46,860 --> 00:18:53,280
know this is bad so it in<font color="#E5E5E5"> order to just</font>

483
00:18:52,080 --> 00:18:55,189
get to<font color="#E5E5E5"> kind of draw a connection between</font>

484
00:18:53,280 --> 00:18:57,360
languages and the machines that

485
00:18:55,190 --> 00:19:00,630
recognize them and that's what we're

486
00:18:57,360 --> 00:19:02,100
going<font color="#E5E5E5"> to start doing</font><font color="#CCCCCC"> now so there's a</font>

487
00:19:00,630 --> 00:19:05,550
difference between context-free and

488
00:19:02,100 --> 00:19:08,010
regular really comes down to two things

489
00:19:05,550 --> 00:19:09,419
and<font color="#E5E5E5"> there's a whole bunch of like you</font>

490
00:19:08,010 --> 00:19:11,310
know complex stuff you can go look up

491
00:19:09,420 --> 00:19:13,440
you can look up proofs you can look up a

492
00:19:11,310 --> 00:19:15,149
whole bunch<font color="#E5E5E5"> more about this but it</font>

493
00:19:13,440 --> 00:19:17,070
really comes down to two things one is

494
00:19:15,150 --> 00:19:18,720
you're always moving forward you're not

495
00:19:17,070 --> 00:19:22,220
going to move<font color="#E5E5E5"> back on the input you're</font>

496
00:19:18,720 --> 00:19:24,300
not going to rewind you're not going to

497
00:19:22,220 --> 00:19:31,200
give me that

498
00:19:24,300 --> 00:19:34,770
you also can't uh it with<font color="#E5E5E5"> Rick languages</font>

499
00:19:31,200 --> 00:19:37,350
you can't match things and what I mean

500
00:19:34,770 --> 00:19:40,110
like this<font color="#E5E5E5"> is you can't match say an</font>

501
00:19:37,350 --> 00:19:41,969
opening tag and a closing tag or a<font color="#CCCCCC"> an</font>

502
00:19:40,110 --> 00:19:44,570
open paren and a closing paren other

503
00:19:41,970 --> 00:19:49,410
than doing maybe like one level of it

504
00:19:44,570 --> 00:19:50,730
and we'll see why so you might recognize

505
00:19:49,410 --> 00:19:52,860
the<font color="#E5E5E5"> top part here as a regular</font>

506
00:19:50,730 --> 00:19:55,440
expression<font color="#E5E5E5"> this is typically how you</font>

507
00:19:52,860 --> 00:19:57,600
would refer<font color="#CCCCCC"> to a regular language the</font>

508
00:19:55,440 --> 00:20:00,710
machine that<font color="#E5E5E5"> is capable of computing a</font>

509
00:19:57,600 --> 00:20:03,000
regular language is called a<font color="#E5E5E5"> DFA or a</font>

510
00:20:00,710 --> 00:20:05,580
deterministic finite automata a

511
00:20:03,000 --> 00:20:07,740
non-deterministic and their work most of

512
00:20:05,580 --> 00:20:10,679
the same way there's a proof that says

513
00:20:07,740 --> 00:20:12,240
any NFA you can convert into a DFA so

514
00:20:10,680 --> 00:20:14,430
really<font color="#E5E5E5"> we're just going to focus on DFAS</font>

515
00:20:12,240 --> 00:20:17,430
right now and this<font color="#CCCCCC"> is essentially</font><font color="#E5E5E5"> a</font>

516
00:20:14,430 --> 00:20:19,500
state diagram showing what this machine

517
00:20:17,430 --> 00:20:20,820
does and this<font color="#E5E5E5"> could be any kind of</font>

518
00:20:19,500 --> 00:20:23,520
machine it can be built on a wood it can

519
00:20:20,820 --> 00:20:26,159
be built out of toothpicks as long as it

520
00:20:23,520 --> 00:20:29,730
could represent these states and the

521
00:20:26,160 --> 00:20:32,880
flow through the thing you'll see here

522
00:20:29,730 --> 00:20:34,950
we have two<font color="#E5E5E5"> cups circles we have these</font>

523
00:20:32,880 --> 00:20:37,470
open circles have nothing else in them

524
00:20:34,950 --> 00:20:40,350
in these two ring circles the open

525
00:20:37,470 --> 00:20:42,480
circles are on normal state these are

526
00:20:40,350 --> 00:20:44,429
these are non accepting<font color="#CCCCCC"> States and the</font>

527
00:20:42,480 --> 00:20:47,060
double circles are are accepting<font color="#CCCCCC"> States</font>

528
00:20:44,430 --> 00:20:52,050
if you're if you're<font color="#E5E5E5"> reading an input and</font>

529
00:20:47,060 --> 00:20:53,879
you don't get to an accepting state that

530
00:20:52,050 --> 00:20:56,490
input is<font color="#E5E5E5"> not a valid sentence in that</font>

531
00:20:53,880 --> 00:20:58,410
language so maybe you haven't finished

532
00:20:56,490 --> 00:21:01,290
all the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> but you get to the end of</font>

533
00:20:58,410 --> 00:21:02,930
the input it's not valid so in the case

534
00:21:01,290 --> 00:21:05,700
here it's a really simple<font color="#E5E5E5"> state diagram</font>

535
00:21:02,930 --> 00:21:08,190
that's the equivalent of the top regular

536
00:21:05,700 --> 00:21:11,190
expression we come into state 0 we're

537
00:21:08,190 --> 00:21:13,800
going<font color="#E5E5E5"> to match zero or more of the</font>

538
00:21:11,190 --> 00:21:15,840
letter A will then move forward<font color="#CCCCCC"> and</font>

539
00:21:13,800 --> 00:21:18,060
we're always going to match<font color="#E5E5E5"> a be</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> at</font>

540
00:21:15,840 --> 00:21:22,669
least<font color="#E5E5E5"> one B and then we're going to look</font>

541
00:21:18,060 --> 00:21:25,889
for that<font color="#CCCCCC"> D or</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> F and we're going to</font>

542
00:21:22,670 --> 00:21:28,170
match at least one and as many more as

543
00:21:25,890 --> 00:21:30,150
we want and both of those are accepting

544
00:21:28,170 --> 00:21:31,800
<font color="#CCCCCC">States so if we get all the way through</font>

545
00:21:30,150 --> 00:21:33,600
this and we get to one<font color="#CCCCCC"> of those states</font>

546
00:21:31,800 --> 00:21:35,990
we know it's a valid sentence in the

547
00:21:33,600 --> 00:21:35,990
language

548
00:21:37,950 --> 00:21:44,049
moving forward up to context-free

549
00:21:40,529 --> 00:21:45,399
typically you will describe these in

550
00:21:44,049 --> 00:21:47,620
something called a context-free grammar

551
00:21:45,399 --> 00:21:49,539
I didn't put aside together for that

552
00:21:47,620 --> 00:21:51,428
because it's kind<font color="#E5E5E5"> of hard to demonstrate</font>

553
00:21:49,539 --> 00:21:54,010
but instead<font color="#E5E5E5"> i'm going to show you a PDA</font>

554
00:21:51,429 --> 00:21:55,210
or a pushdown automaton and<font color="#E5E5E5"> this is</font>

555
00:21:54,010 --> 00:21:57,399
<font color="#E5E5E5">another type of machine this is this</font>

556
00:21:55,210 --> 00:22:02,470
machine<font color="#E5E5E5"> is very similar to the one we</font>

557
00:21:57,399 --> 00:22:05,620
just saw it is a state machine just like

558
00:22:02,470 --> 00:22:07,750
the the DFA and NFA only this<font color="#E5E5E5"> machine</font>

559
00:22:05,620 --> 00:22:09,879
has a stack it has memory which the

560
00:22:07,750 --> 00:22:11,799
other one didn't the other<font color="#E5E5E5"> machine the</font>

561
00:22:09,880 --> 00:22:14,440
DFA knew nothing about what we've

562
00:22:11,799 --> 00:22:16,870
already seen all<font color="#E5E5E5"> it knows is I'm right</font>

563
00:22:14,440 --> 00:22:18,460
<font color="#E5E5E5">here I can go to these places and I can</font>

564
00:22:16,870 --> 00:22:20,500
only go to these places I can't go to

565
00:22:18,460 --> 00:22:24,010
<font color="#E5E5E5">any one of these places it's not valid</font>

566
00:22:20,500 --> 00:22:25,539
and I stop this type of machine uses a

567
00:22:24,010 --> 00:22:29,169
stack to understand a little bit about

568
00:22:25,539 --> 00:22:31,419
context and know where<font color="#E5E5E5"> we are in this so</font>

569
00:22:29,169 --> 00:22:33,190
in this case I'm going to build a<font color="#E5E5E5"> really</font>

570
00:22:31,419 --> 00:22:34,990
simple parser for something like<font color="#E5E5E5"> a</font>

571
00:22:33,190 --> 00:22:39,210
scheme language or a<font color="#E5E5E5"> polish notation</font>

572
00:22:34,990 --> 00:22:41,850
notation calculator we see at the top

573
00:22:39,210 --> 00:22:45,130
the simple string will want<font color="#E5E5E5"> to match</font>

574
00:22:41,850 --> 00:22:47,949
just<font color="#CCCCCC"> like before we're coming in state</font><font color="#E5E5E5"> 0</font>

575
00:22:45,130 --> 00:22:49,990
the difference here is that we're no

576
00:22:47,950 --> 00:22:52,240
longer specifying just what we're

577
00:22:49,990 --> 00:22:54,010
looking for<font color="#E5E5E5"> we now</font><font color="#CCCCCC"> have this Delta</font>

578
00:22:52,240 --> 00:22:55,389
function and this is the function that's

579
00:22:54,010 --> 00:22:58,870
going to run on every single trans

580
00:22:55,389 --> 00:23:01,510
transition from state to state the<font color="#CCCCCC"> the</font>

581
00:22:58,870 --> 00:23:03,189
first parameter<font color="#E5E5E5"> right here this</font><font color="#CCCCCC"> is what</font>

582
00:23:01,510 --> 00:23:04,210
we're looking for on the stack so every

583
00:23:03,190 --> 00:23:05,980
time<font color="#CCCCCC"> you take a transition we're going</font>

584
00:23:04,210 --> 00:23:07,870
to pop off<font color="#CCCCCC"> the stack if</font><font color="#E5E5E5"> this is an</font>

585
00:23:05,980 --> 00:23:09,760
epsilon and we're going to<font color="#E5E5E5"> look and see</font>

586
00:23:07,870 --> 00:23:11,918
what's<font color="#CCCCCC"> there if it is epsilon we're not</font>

587
00:23:09,760 --> 00:23:13,750
gonna do they have to<font color="#E5E5E5"> know op but if it</font>

588
00:23:11,919 --> 00:23:15,610
<font color="#CCCCCC">is if it's not epsilon we're going to</font>

589
00:23:13,750 --> 00:23:18,070
look at that if it's not that it's<font color="#E5E5E5"> not a</font>

590
00:23:15,610 --> 00:23:19,120
valid transition if it is that and it's

591
00:23:18,070 --> 00:23:22,000
<font color="#CCCCCC">about transition we're going to then</font>

592
00:23:19,120 --> 00:23:23,739
push this<font color="#CCCCCC"> onto</font><font color="#E5E5E5"> the stack and that allows</font>

593
00:23:22,000 --> 00:23:26,110
us<font color="#CCCCCC"> to keep track of things like how many</font>

594
00:23:23,740 --> 00:23:27,700
<font color="#E5E5E5">levels of parentheses we are deep how</font>

595
00:23:26,110 --> 00:23:29,620
many tags deep we are in an HTML

596
00:23:27,700 --> 00:23:31,690
document and we can use that to<font color="#CCCCCC"> make</font>

597
00:23:29,620 --> 00:23:33,370
sure that we always close our opening

598
00:23:31,690 --> 00:23:35,320
tags we always close our parentheses and

599
00:23:33,370 --> 00:23:38,350
we can know that<font color="#CCCCCC"> we've not gotten to</font>

600
00:23:35,320 --> 00:23:40,450
some weird state so to walk through kind

601
00:23:38,350 --> 00:23:46,178
of<font color="#E5E5E5"> how this works we're going to</font><font color="#CCCCCC"> start</font>

602
00:23:40,450 --> 00:23:50,110
<font color="#CCCCCC">at</font><font color="#E5E5E5"> state 0 we come in</font><font color="#CCCCCC"> and we are going</font>

603
00:23:46,179 --> 00:23:52,299
to push<font color="#E5E5E5"> this dollar sign</font>

604
00:23:50,110 --> 00:23:54,010
<font color="#E5E5E5">onto the sack we're not looking for</font>

605
00:23:52,299 --> 00:23:55,090
anything up here we're not looking for

606
00:23:54,010 --> 00:23:56,860
anything on the stack we're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> gonna</font>

607
00:23:55,090 --> 00:23:58,750
push it<font color="#E5E5E5"> in and that's our end of string</font>

608
00:23:56,860 --> 00:24:00,309
markers how we know when we got to the

609
00:23:58,750 --> 00:24:02,559
end and we get all the way<font color="#CCCCCC"> down the</font>

610
00:24:00,309 --> 00:24:04,389
stack<font color="#CCCCCC"> and we see that</font><font color="#E5E5E5"> we know that</font><font color="#CCCCCC"> we're</font>

611
00:24:02,559 --> 00:24:06,639
at the end then if we're not at next and

612
00:24:04,390 --> 00:24:11,500
accepting a state we know it's broken we

613
00:24:06,640 --> 00:24:13,870
know it's bad data if<font color="#E5E5E5"> we come through</font>

614
00:24:11,500 --> 00:24:20,530
and we're in state 1 and we're looking

615
00:24:13,870 --> 00:24:22,120
for an opening paren and we see it so we

616
00:24:20,530 --> 00:24:25,210
push the opening print onto the stack

617
00:24:22,120 --> 00:24:31,090
and<font color="#E5E5E5"> we move into state to now we're</font>

618
00:24:25,210 --> 00:24:33,190
<font color="#CCCCCC">looking for I either a plus sign or a</font>

619
00:24:31,090 --> 00:24:35,230
minus sign we don't care<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> on the</font>

620
00:24:33,190 --> 00:24:37,030
stack we're not<font color="#CCCCCC"> going to push anything</font>

621
00:24:35,230 --> 00:24:38,200
on to the stack we just want to know

622
00:24:37,030 --> 00:24:39,668
<font color="#CCCCCC">that there's a plus sign or a minus sign</font>

623
00:24:38,200 --> 00:24:40,929
because we're looking for some kind of

624
00:24:39,669 --> 00:24:45,870
operation that we're going to<font color="#E5E5E5"> compute</font>

625
00:24:40,929 --> 00:24:48,700
and we see it so we move into state<font color="#CCCCCC"> 3</font>

626
00:24:45,870 --> 00:24:51,600
we're in state 3 and now we're<font color="#CCCCCC"> looking</font>

627
00:24:48,700 --> 00:24:54,580
for a lot<font color="#E5E5E5"> of things we're looking for</font>

628
00:24:51,600 --> 00:24:57,010
either a closing paren because we are at

629
00:24:54,580 --> 00:24:59,260
the<font color="#CCCCCC"> end of an expression we're looking</font>

630
00:24:57,010 --> 00:25:00,669
<font color="#CCCCCC">for any</font><font color="#E5E5E5"> number zero through nine cuz</font>

631
00:24:59,260 --> 00:25:04,000
we're looking for numbers to compute

632
00:25:00,669 --> 00:25:08,500
this and we're also looking to go back

633
00:25:04,000 --> 00:25:13,360
into state<font color="#E5E5E5"> one because we can go grab</font>

634
00:25:08,500 --> 00:25:19,570
<font color="#E5E5E5">another nested expression and put that</font>

635
00:25:13,360 --> 00:25:22,000
in there to compute first in this<font color="#E5E5E5"> case</font>

636
00:25:19,570 --> 00:25:25,030
we're going<font color="#E5E5E5"> to see the transition state</font>

637
00:25:22,000 --> 00:25:28,690
one we're going<font color="#E5E5E5"> to see another friend so</font>

638
00:25:25,030 --> 00:25:30,910
we push<font color="#CCCCCC"> it onto the</font><font color="#E5E5E5"> stack and we move in</font>

639
00:25:28,690 --> 00:25:33,220
state 1 we're<font color="#E5E5E5"> going to go back</font><font color="#CCCCCC"> we're</font>

640
00:25:30,910 --> 00:25:36,100
going to replay the same thing and we're

641
00:25:33,220 --> 00:25:38,549
going to keep going<font color="#CCCCCC"> forward</font><font color="#E5E5E5"> we've we're</font>

642
00:25:36,100 --> 00:25:41,709
in state 2 we find the<font color="#E5E5E5"> the minus sign</font>

643
00:25:38,549 --> 00:25:46,240
move into state 3 and we're looking for

644
00:25:41,710 --> 00:25:49,240
numbers we find them and now it to the

645
00:25:46,240 --> 00:25:51,760
<font color="#E5E5E5">point where we see</font><font color="#CCCCCC"> the closing paren and</font>

646
00:25:49,240 --> 00:25:53,290
so we're going to pop off that opening /

647
00:25:51,760 --> 00:25:55,650
end and we're going to push nothing on

648
00:25:53,290 --> 00:25:55,649
to the stack

649
00:25:58,290 --> 00:26:08,170
and we're<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> do it again we're in</font>

650
00:26:05,860 --> 00:26:10,750
state for we're<font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> a dollar</font>

651
00:26:08,170 --> 00:26:13,180
sign we move into the accepting state

652
00:26:10,750 --> 00:26:15,070
and we're done this is a valid string

653
00:26:13,180 --> 00:26:18,070
it's a valid sentence in this language

654
00:26:15,070 --> 00:26:19,960
we defined so this is<font color="#CCCCCC"> a machine</font><font color="#E5E5E5"> that can</font>

655
00:26:18,070 --> 00:26:21,159
recognize that and like I said it can be

656
00:26:19,960 --> 00:26:23,130
built out of anything<font color="#CCCCCC"> it doesn't have to</font>

657
00:26:21,160 --> 00:26:25,960
be<font color="#E5E5E5"> software anything that can represent</font>

658
00:26:23,130 --> 00:26:27,760
those states the transitions between

659
00:26:25,960 --> 00:26:29,980
them and enforce those rules in to

660
00:26:27,760 --> 00:26:33,160
provide a stack or some kind of means to

661
00:26:29,980 --> 00:26:37,000
store that data in a stack like system

662
00:26:33,160 --> 00:26:39,940
where you have lastin first-out that's

663
00:26:37,000 --> 00:26:41,560
that's all the requirements are as long

664
00:26:39,940 --> 00:26:48,700
<font color="#CCCCCC">as you meet those those two requirements</font>

665
00:26:41,560 --> 00:26:51,330
you<font color="#CCCCCC"> can have that kind of machine so</font>

666
00:26:48,700 --> 00:26:51,330
does anyone<font color="#E5E5E5"> know what this is</font>

667
00:26:55,490 --> 00:27:09,620
was that uh sort of this is a model<font color="#E5E5E5"> of a</font>

668
00:27:02,090 --> 00:27:13,250
turning machine so in the 1930s the sky

669
00:27:09,620 --> 00:27:16,419
Alan Turing<font color="#E5E5E5"> and sky church each kind of</font>

670
00:27:13,250 --> 00:27:20,690
work on their own directions trying to

671
00:27:16,420 --> 00:27:22,910
do a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> work in in defining a formal</font>

672
00:27:20,690 --> 00:27:24,860
system for what algorithms<font color="#CCCCCC"> are and</font>

673
00:27:22,910 --> 00:27:27,410
designing machines are capable of

674
00:27:24,860 --> 00:27:28,909
running them in a general sense so a

675
00:27:27,410 --> 00:27:31,280
machine that can<font color="#E5E5E5"> run any kind of</font>

676
00:27:28,910 --> 00:27:33,800
algorithm and make a program<font color="#E5E5E5"> at</font>

677
00:27:31,280 --> 00:27:36,550
programmatic there had been some some

678
00:27:33,800 --> 00:27:39,020
programmable machines before but not

679
00:27:36,550 --> 00:27:44,419
universal ones and this was this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

680
00:27:39,020 --> 00:27:46,850
main thing<font color="#CCCCCC"> that he was trying to do so</font>

681
00:27:44,420 --> 00:27:48,920
this is<font color="#CCCCCC"> what most modern day computers</font>

682
00:27:46,850 --> 00:27:50,540
are based on this this this principle of

683
00:27:48,920 --> 00:27:54,170
turning machine and the way this works

684
00:27:50,540 --> 00:27:57,530
<font color="#E5E5E5">is you have this tape and you</font><font color="#CCCCCC"> put a tape</font>

685
00:27:54,170 --> 00:28:01,700
in and it will read each mark you make

686
00:27:57,530 --> 00:28:03,500
on<font color="#CCCCCC"> it and it will compute it so you put</font>

687
00:28:01,700 --> 00:28:06,429
the program in it reads the program and

688
00:28:03,500 --> 00:28:08,809
<font color="#E5E5E5">it does what it's programmed to do</font>

689
00:28:06,429 --> 00:28:12,400
there's also what's called a universal

690
00:28:08,809 --> 00:28:15,230
touring machine which is capable<font color="#E5E5E5"> of</font>

691
00:28:12,400 --> 00:28:19,280
simulating all possible<font color="#E5E5E5"> Turing machines</font>

692
00:28:15,230 --> 00:28:21,500
and this<font color="#CCCCCC"> is really what we're going</font><font color="#E5E5E5"> to</font>

693
00:28:19,280 --> 00:28:24,230
move into next and so the main

694
00:28:21,500 --> 00:28:26,240
difference between DFAS and and and PDAs

695
00:28:24,230 --> 00:28:28,100
and one of these<font color="#E5E5E5"> is is that these can</font>

696
00:28:26,240 --> 00:28:29,540
move forwards and backwards you know it

697
00:28:28,100 --> 00:28:31,070
might<font color="#E5E5E5"> get into a state says on you to go</font>

698
00:28:29,540 --> 00:28:32,990
backwards and it will read back of the

699
00:28:31,070 --> 00:28:34,790
tape and it can erase the tape and<font color="#E5E5E5"> it</font>

700
00:28:32,990 --> 00:28:36,650
can rewrite it and it can<font color="#E5E5E5"> change the</font>

701
00:28:34,790 --> 00:28:38,470
code that<font color="#CCCCCC"> it's executing it can</font><font color="#E5E5E5"> change</font>

702
00:28:36,650 --> 00:28:40,760
the algorithm that's designed to<font color="#E5E5E5"> build</font>

703
00:28:38,470 --> 00:28:43,730
and this is what we're trying to<font color="#E5E5E5"> stop</font>

704
00:28:40,760 --> 00:28:45,890
<font color="#E5E5E5">from happening this is what will</font>

705
00:28:43,730 --> 00:28:51,320
eventually see is what we're modeling is

706
00:28:45,890 --> 00:28:52,490
one of these and this is bad so the

707
00:28:51,320 --> 00:28:54,409
unintentional turning machine is what

708
00:28:52,490 --> 00:28:57,080
we're creating by<font color="#E5E5E5"> taking an input</font><font color="#CCCCCC"> and</font>

709
00:28:54,410 --> 00:28:59,480
not validating<font color="#E5E5E5"> it by allowing the user</font>

710
00:28:57,080 --> 00:29:01,760
to provide input that we then execute

711
00:28:59,480 --> 00:29:03,559
that can change the behavior application

712
00:29:01,760 --> 00:29:05,690
this is creating an unintentional Turing

713
00:29:03,559 --> 00:29:08,389
machine we're giving unintentional power

714
00:29:05,690 --> 00:29:09,389
to the attacker for them to use our

715
00:29:08,390 --> 00:29:11,190
applications

716
00:29:09,389 --> 00:29:16,589
platform to do what they want to do with

717
00:29:11,190 --> 00:29:20,070
<font color="#CCCCCC">it there's also this this concept of</font>

718
00:29:16,589 --> 00:29:23,700
recognition and decidability recognition

719
00:29:20,070 --> 00:29:25,859
is the ability to say yes this this

720
00:29:23,700 --> 00:29:27,659
string is a valid sentence no the string

721
00:29:25,859 --> 00:29:29,668
is not a valid sentence it's not saying

722
00:29:27,659 --> 00:29:32,009
I know what it's going to do it's saying

723
00:29:29,669 --> 00:29:35,789
I know that this<font color="#E5E5E5"> is a valid sentence in</font>

724
00:29:32,009 --> 00:29:37,799
this language decidability is<font color="#CCCCCC"> the</font>

725
00:29:35,789 --> 00:29:40,859
ability<font color="#CCCCCC"> to take that and say this is</font>

726
00:29:37,799 --> 00:29:43,259
<font color="#E5E5E5">valid or not valid but I know what this</font>

727
00:29:40,859 --> 00:29:46,468
<font color="#CCCCCC">is going</font><font color="#E5E5E5"> to do I know that if I were to</font>

728
00:29:43,259 --> 00:29:50,039
take this input with this algorithm that

729
00:29:46,469 --> 00:29:52,320
it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this it's also the</font>

730
00:29:50,039 --> 00:29:54,929
ability to say I can take this algorithm

731
00:29:52,320 --> 00:29:57,029
and based on what it does I know it's

732
00:29:54,929 --> 00:29:59,909
always<font color="#E5E5E5"> going to start or start your stop</font>

733
00:29:57,029 --> 00:30:02,159
this is<font color="#CCCCCC"> always going to end and I can</font>

734
00:29:59,909 --> 00:30:07,889
prove that based on the fact that I know

735
00:30:02,159 --> 00:30:09,479
what the<font color="#CCCCCC"> input is going to do and this</font>

736
00:30:07,889 --> 00:30:11,908
leads us into the halting problem which

737
00:30:09,479 --> 00:30:16,079
<font color="#CCCCCC">is one of</font><font color="#E5E5E5"> the big problems in computer</font>

738
00:30:11,909 --> 00:30:18,269
science so imagine that our input is a

739
00:30:16,079 --> 00:30:20,279
program that contains a dynamic loop

740
00:30:18,269 --> 00:30:23,369
we're taking an input<font color="#E5E5E5"> and it's going to</font>

741
00:30:20,279 --> 00:30:27,169
say I<font color="#CCCCCC"> need you to</font><font color="#E5E5E5"> do this until the</font>

742
00:30:23,369 --> 00:30:29,488
number specified in the<font color="#E5E5E5"> input is reached</font>

743
00:30:27,169 --> 00:30:32,009
using what we've now learned we can

744
00:30:29,489 --> 00:30:34,289
recognize that this input is in fact

745
00:30:32,009 --> 00:30:36,149
valid or not valid so we can<font color="#E5E5E5"> say okay</font>

746
00:30:34,289 --> 00:30:39,690
this<font color="#E5E5E5"> looks like a valid program I'm</font>

747
00:30:36,149 --> 00:30:42,599
going<font color="#E5E5E5"> to go ahead and run it but we'll</font>

748
00:30:39,690 --> 00:30:44,999
never be able to say<font color="#CCCCCC"> for sure that this</font>

749
00:30:42,599 --> 00:30:46,889
program will ever finish running or what

750
00:30:44,999 --> 00:30:49,829
it's going to do<font color="#E5E5E5"> because we don't know</font>

751
00:30:46,889 --> 00:30:53,070
what that arbitrary number is going to

752
00:30:49,829 --> 00:30:56,009
be in least in most cases there's no

753
00:30:53,070 --> 00:30:59,189
generalizable algorithm that that is

754
00:30:56,009 --> 00:31:02,879
that exists or can exist to solve this

755
00:30:59,190 --> 00:31:04,919
problem and the reason<font color="#CCCCCC"> that we can't</font><font color="#E5E5E5"> do</font>

756
00:31:02,879 --> 00:31:07,978
that is say for<font color="#E5E5E5"> instance we</font><font color="#CCCCCC"> have this</font>

757
00:31:04,919 --> 00:31:10,259
loop and it hasn't finished executing it

758
00:31:07,979 --> 00:31:12,749
well has it finished not finished

759
00:31:10,259 --> 00:31:14,989
executing because we have<font color="#CCCCCC"> more</font>

760
00:31:12,749 --> 00:31:17,219
processing to do is it an infinite loop

761
00:31:14,989 --> 00:31:19,979
how do<font color="#E5E5E5"> you determine</font><font color="#CCCCCC"> which one of those</font>

762
00:31:17,219 --> 00:31:23,190
is<font color="#E5E5E5"> the case and the short</font><font color="#CCCCCC"> answer is is</font>

763
00:31:19,979 --> 00:31:25,560
we can't and so

764
00:31:23,190 --> 00:31:28,710
the other thing to note here is that

765
00:31:25,560 --> 00:31:30,480
<font color="#CCCCCC">Turing machines as a whore undecidable</font>

766
00:31:28,710 --> 00:31:36,420
we can't right now we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do</font>

767
00:31:30,480 --> 00:31:38,430
this for<font color="#E5E5E5"> dia phase uh and PDA is they</font>

768
00:31:36,420 --> 00:31:39,840
typically<font color="#E5E5E5"> are we know all the state</font>

769
00:31:38,430 --> 00:31:42,390
transitions that are going to happen we

770
00:31:39,840 --> 00:31:45,929
know what's going to<font color="#CCCCCC"> go from from state</font>

771
00:31:42,390 --> 00:31:52,380
to state and we can say by proving it

772
00:31:45,930 --> 00:31:54,360
this will exit or this will<font color="#E5E5E5"> not exit so</font>

773
00:31:52,380 --> 00:31:55,590
so what's your solution to<font color="#E5E5E5"> this and we</font>

774
00:31:54,360 --> 00:31:57,240
have a few that<font color="#CCCCCC"> you can you can kind of</font>

775
00:31:55,590 --> 00:32:00,959
mix and match and we'll kind of<font color="#E5E5E5"> see</font>

776
00:31:57,240 --> 00:32:03,600
where the limitations of those are so

777
00:32:00,960 --> 00:32:05,730
let's think<font color="#CCCCCC"> about all input as sentences</font>

778
00:32:03,600 --> 00:32:07,590
in a language whether it's code to be

779
00:32:05,730 --> 00:32:09,990
executed<font color="#E5E5E5"> where you're taking in dynamic</font>

780
00:32:07,590 --> 00:32:12,780
code is going to get run or simply data

781
00:32:09,990 --> 00:32:14,940
that we are going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> in our</font>

782
00:32:12,780 --> 00:32:17,700
application to make some choice about to

783
00:32:14,940 --> 00:32:19,400
do<font color="#E5E5E5"> something with to transform there's</font>

784
00:32:17,700 --> 00:32:23,430
an alphabet we have grammatical rules

785
00:32:19,400 --> 00:32:28,410
and we we go through and we verify that

786
00:32:23,430 --> 00:32:30,660
the input matches that and then fully

787
00:32:28,410 --> 00:32:32,400
recognize the language and verify that

788
00:32:30,660 --> 00:32:34,500
it's it's a valid language develops

789
00:32:32,400 --> 00:32:39,000
sentence in the language before we go

790
00:32:34,500 --> 00:32:40,650
<font color="#CCCCCC">ahead and process it design the minimum</font>

791
00:32:39,000 --> 00:32:43,290
language is required like I<font color="#CCCCCC"> said earlier</font>

792
00:32:40,650 --> 00:32:45,690
embedding an arbitrary interpreter it's

793
00:32:43,290 --> 00:32:47,340
a bad idea you<font color="#E5E5E5"> know what's the minimum</font>

794
00:32:45,690 --> 00:32:49,410
that<font color="#CCCCCC"> we can get away with what kind</font><font color="#E5E5E5"> of</font>

795
00:32:47,340 --> 00:32:51,570
functionality do you need the<font color="#CCCCCC"> ability to</font>

796
00:32:49,410 --> 00:32:54,330
<font color="#CCCCCC">go you know</font><font color="#E5E5E5"> create loops do you need the</font>

797
00:32:51,570 --> 00:32:55,770
ability to call arbitrary functions do

798
00:32:54,330 --> 00:32:57,780
you need<font color="#E5E5E5"> the ability to call out of that</font>

799
00:32:55,770 --> 00:32:59,760
location to an arbitrary library what's

800
00:32:57,780 --> 00:33:01,440
the minimum that<font color="#CCCCCC"> we can build that we</font>

801
00:32:59,760 --> 00:33:02,940
know that<font color="#CCCCCC"> we can constrain so that we</font>

802
00:33:01,440 --> 00:33:04,650
don't have<font color="#E5E5E5"> to make all these these</font>

803
00:33:02,940 --> 00:33:10,560
difficult calls as to whether or<font color="#E5E5E5"> not</font>

804
00:33:04,650 --> 00:33:12,900
it's dangerous and<font color="#CCCCCC"> favor</font><font color="#E5E5E5"> sub turning</font>

805
00:33:10,560 --> 00:33:14,879
when you can you know create a language

806
00:33:12,900 --> 00:33:16,680
is<font color="#E5E5E5"> not turning complete just for the</font>

807
00:33:14,880 --> 00:33:20,820
possibility that you can prove and say

808
00:33:16,680 --> 00:33:24,270
hey this isn't<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be something</font>

809
00:33:20,820 --> 00:33:25,500
<font color="#E5E5E5">that I can't decide about there's a</font>

810
00:33:24,270 --> 00:33:27,810
bunch of tools out there to help you do

811
00:33:25,500 --> 00:33:30,510
this if<font color="#E5E5E5"> you want to build</font><font color="#CCCCCC"> your own state</font>

812
00:33:27,810 --> 00:33:35,190
machines I there's a tool called<font color="#CCCCCC"> ragel</font>

813
00:33:30,510 --> 00:33:36,600
you define in a DSL kind of your your

814
00:33:35,190 --> 00:33:38,250
state<font color="#CCCCCC"> transitions</font>

815
00:33:36,600 --> 00:33:41,070
all your<font color="#CCCCCC"> states and it will generate you</font>

816
00:33:38,250 --> 00:33:44,250
code in any language you want there's a

817
00:33:41,070 --> 00:33:46,230
really popular HTTP parser from this web

818
00:33:44,250 --> 00:33:48,930
server called mongrel that's<font color="#E5E5E5"> basically</font>

819
00:33:46,230 --> 00:33:52,160
used everywhere it's extremely fast

820
00:33:48,930 --> 00:33:53,970
because it can accept and reject and put

821
00:33:52,160 --> 00:33:56,760
immediately<font color="#E5E5E5"> based on whether or not it's</font>

822
00:33:53,970 --> 00:33:58,320
correct it's really performance because

823
00:33:56,760 --> 00:34:02,310
how it's written and it can it can

824
00:33:58,320 --> 00:34:04,800
recognize things very quickly but it's

825
00:34:02,310 --> 00:34:07,050
also just very easy to prove and you can

826
00:34:04,800 --> 00:34:10,110
go through<font color="#CCCCCC"> and you can see you know this</font>

827
00:34:07,050 --> 00:34:12,300
<font color="#E5E5E5">is exactly</font><font color="#CCCCCC"> to spec what the the parser</font>

828
00:34:10,110 --> 00:34:14,610
should do rather<font color="#E5E5E5"> than</font><font color="#CCCCCC"> saying okay I see</font>

829
00:34:12,300 --> 00:34:17,550
this this verb I have to look for<font color="#E5E5E5"> okay</font>

830
00:34:14,610 --> 00:34:19,950
cool it again here's a path this looks

831
00:34:17,550 --> 00:34:21,540
correct and then verifying you know

832
00:34:19,949 --> 00:34:24,389
every single header there that that's

833
00:34:21,540 --> 00:34:28,199
<font color="#E5E5E5">correct if you want to do regular</font>

834
00:34:24,389 --> 00:34:32,370
expressions pcre is one of the most

835
00:34:28,199 --> 00:34:33,750
common as well as re to their everything

836
00:34:32,370 --> 00:34:35,549
<font color="#CCCCCC">if you're if you're using regular</font>

837
00:34:33,750 --> 00:34:38,040
expressions you're probably using one of

838
00:34:35,550 --> 00:34:39,870
these<font color="#E5E5E5"> out there's also POSIX which is</font>

839
00:34:38,040 --> 00:34:42,529
pretty much supported everywhere but

840
00:34:39,870 --> 00:34:45,560
nowhere near<font color="#E5E5E5"> as powerful of</font><font color="#CCCCCC"> PC re ort to</font>

841
00:34:42,530 --> 00:34:48,390
so I definitely go with one<font color="#E5E5E5"> of those two</font>

842
00:34:45,560 --> 00:34:51,540
and then there's partial generators for

843
00:34:48,389 --> 00:34:53,150
more complex languages like the ones

844
00:34:51,540 --> 00:34:55,409
that context<font color="#E5E5E5"> free grammars require</font>

845
00:34:53,150 --> 00:34:57,420
there's tools like yak and bison these

846
00:34:55,409 --> 00:34:58,620
are ancient but and they work everywhere

847
00:34:57,420 --> 00:35:00,810
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can you can build it for any</font>

848
00:34:58,620 --> 00:35:04,020
language you want and they're easy to

849
00:35:00,810 --> 00:35:05,759
use they're really powerful and they're

850
00:35:04,020 --> 00:35:08,150
pretty performance just based on the

851
00:35:05,760 --> 00:35:11,400
algorithm that use to do the matching

852
00:35:08,150 --> 00:35:13,680
<font color="#CCCCCC">we're ever</font><font color="#E5E5E5"> to use antler we like it a</font>

853
00:35:11,400 --> 00:35:17,640
lot it's<font color="#CCCCCC"> uh it doesn't</font><font color="#E5E5E5"> have the support</font>

854
00:35:13,680 --> 00:35:18,839
that that yak and bison do java.net<font color="#CCCCCC"> are</font>

855
00:35:17,640 --> 00:35:22,940
first-class citizens there's also a

856
00:35:18,840 --> 00:35:25,530
versions for<font color="#E5E5E5"> JavaScript Ruby Python uh I</font>

857
00:35:22,940 --> 00:35:27,600
believe<font color="#CCCCCC"> a couple others as well but</font><font color="#E5E5E5"> it's</font>

858
00:35:25,530 --> 00:35:29,430
<font color="#E5E5E5">really nice it gives</font><font color="#CCCCCC"> you full parse</font>

859
00:35:27,600 --> 00:35:31,740
trees it provides you a system for

860
00:35:29,430 --> 00:35:34,370
walking your parse trees and working and

861
00:35:31,740 --> 00:35:37,589
transforming and working with that data

862
00:35:34,370 --> 00:35:38,790
if you work with<font color="#E5E5E5"> binary data you</font>

863
00:35:37,590 --> 00:35:40,200
probably<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> want to use</font><font color="#E5E5E5"> any of these</font>

864
00:35:38,790 --> 00:35:43,100
and you probably want to use<font color="#CCCCCC"> something</font>

865
00:35:40,200 --> 00:35:45,480
like hammer or<font color="#CCCCCC"> Nam hammers written in</font><font color="#E5E5E5"> C</font>

866
00:35:43,100 --> 00:35:47,220
it's a parts of<font color="#E5E5E5"> the Combinator library</font>

867
00:35:45,480 --> 00:35:49,380
where you can write functions that

868
00:35:47,220 --> 00:35:50,399
recognize individual things and you can

869
00:35:49,380 --> 00:35:53,760
pose these functions to get

870
00:35:50,400 --> 00:35:58,309
to build up your parser<font color="#CCCCCC"> nom</font><font color="#E5E5E5"> is another</font>

871
00:35:53,760 --> 00:36:00,720
one similar I and it is written and rust

872
00:35:58,309 --> 00:36:02,309
as far<font color="#E5E5E5"> as I know there's no bindings out</font>

873
00:36:00,720 --> 00:36:03,598
of there but there could be so you if

874
00:36:02,309 --> 00:36:05,730
you wanted to write say and see your C++

875
00:36:03,599 --> 00:36:09,930
or build bindings<font color="#E5E5E5"> to it another language</font>

876
00:36:05,730 --> 00:36:11,579
you could<font color="#CCCCCC"> totally do that but it's it's</font>

877
00:36:09,930 --> 00:36:13,259
really<font color="#CCCCCC"> powerful and when you're using</font><font color="#E5E5E5"> it</font>

878
00:36:11,579 --> 00:36:16,079
for like binary data like taking in

879
00:36:13,260 --> 00:36:19,380
deserialize<font color="#CCCCCC"> I serialize data or maybe</font>

880
00:36:16,079 --> 00:36:21,210
like a WAV files or you're looking<font color="#E5E5E5"> at</font>

881
00:36:19,380 --> 00:36:23,430
audio files<font color="#E5E5E5"> but all the things that came</font>

882
00:36:21,210 --> 00:36:25,890
to my glib stage fright and all these

883
00:36:23,430 --> 00:36:27,450
android bugs that came out this helps

884
00:36:25,890 --> 00:36:29,279
solve some of those because you know

885
00:36:27,450 --> 00:36:30,779
what the data looks like<font color="#E5E5E5"> you know what</font>

886
00:36:29,279 --> 00:36:32,390
whether it's valid and you can reject it

887
00:36:30,779 --> 00:36:36,450
before<font color="#CCCCCC"> you start doing</font><font color="#E5E5E5"> things with it</font>

888
00:36:32,390 --> 00:36:38,279
VLC actually just started<font color="#E5E5E5"> writing a few</font>

889
00:36:36,450 --> 00:36:41,038
of their parsers some other file formats

890
00:36:38,279 --> 00:36:44,130
in Nam and of shipped actual code with

891
00:36:41,039 --> 00:36:47,190
it and I've shown serious performance

892
00:36:44,130 --> 00:36:49,289
improvements and shown significantly

893
00:36:47,190 --> 00:36:53,069
better quality parsers they know aren't

894
00:36:49,289 --> 00:36:55,890
broken the other is separate code from

895
00:36:53,069 --> 00:36:57,808
data don't use functionality like eval

896
00:36:55,890 --> 00:37:00,930
there's almost no excuse<font color="#CCCCCC"> to ever do that</font>

897
00:36:57,809 --> 00:37:03,960
don't do it utilize function i'll be

898
00:37:00,930 --> 00:37:05,940
like<font color="#E5E5E5"> write x or execute this is a</font>

899
00:37:03,960 --> 00:37:07,890
<font color="#E5E5E5">pattern of marking individual pages in</font>

900
00:37:05,940 --> 00:37:10,619
memory as either writable or executable

901
00:37:07,890 --> 00:37:14,700
you can never have both it's one of<font color="#CCCCCC"> the</font>

902
00:37:10,619 --> 00:37:16,920
the big solutions that people introduced

903
00:37:14,700 --> 00:37:19,529
in operating systems when<font color="#E5E5E5"> you like to</font>

904
00:37:16,920 --> 00:37:22,020
stop memory corruption a lot of the ways

905
00:37:19,529 --> 00:37:23,880
people<font color="#E5E5E5"> next exploit that is by writing</font>

906
00:37:22,020 --> 00:37:27,119
shellcode in memory if you can't execute

907
00:37:23,880 --> 00:37:28,740
that code you're a lot<font color="#E5E5E5"> less powerful and</font>

908
00:37:27,119 --> 00:37:30,990
there's ways around that but it's it's a

909
00:37:28,740 --> 00:37:35,640
big step in making it more difficult to

910
00:37:30,990 --> 00:37:37,049
do which is<font color="#E5E5E5"> what we're trying here so</font>

911
00:37:35,640 --> 00:37:39,299
what about the case from static isn't

912
00:37:37,049 --> 00:37:41,490
enough we've<font color="#E5E5E5"> been talking a lot about</font>

913
00:37:39,299 --> 00:37:44,490
looking at static data looking at input

914
00:37:41,490 --> 00:37:47,910
statically that is the full context of

915
00:37:44,490 --> 00:37:49,919
what we're looking at and<font color="#E5E5E5"> lincec isn't a</font>

916
00:37:47,910 --> 00:37:52,920
magic bullet it's not going to solve all

917
00:37:49,920 --> 00:37:56,099
your problems around input validation it

918
00:37:52,920 --> 00:37:57,390
just can't sometimes we have input you

919
00:37:56,099 --> 00:37:58,680
know dependent on context maybe there's

920
00:37:57,390 --> 00:38:03,150
application state that we don't<font color="#E5E5E5"> have</font>

921
00:37:58,680 --> 00:38:04,399
<font color="#E5E5E5">access to maybe there's some config file</font>

922
00:38:03,150 --> 00:38:06,930
somewhere

923
00:38:04,400 --> 00:38:10,590
we don't<font color="#E5E5E5"> know and we can't look it in</font>

924
00:38:06,930 --> 00:38:11,549
<font color="#E5E5E5">put that way we can't know and this</font>

925
00:38:10,590 --> 00:38:12,840
isn't<font color="#CCCCCC"> to be confused with a</font>

926
00:38:11,550 --> 00:38:16,910
context-sensitive language which we

927
00:38:12,840 --> 00:38:16,910
didn't really<font color="#E5E5E5"> cover it's it's</font><font color="#CCCCCC"> just the</font>

928
00:38:18,110 --> 00:38:24,540
presence<font color="#E5E5E5"> of context that determines</font>

929
00:38:20,370 --> 00:38:28,200
what's going on so in this case<font color="#E5E5E5"> you can</font>

930
00:38:24,540 --> 00:38:30,840
utilize safer languages utilize the blog

931
00:38:28,200 --> 00:38:34,020
execution emulation<font color="#CCCCCC"> tate analysis look</font>

932
00:38:30,840 --> 00:38:37,020
at data going<font color="#E5E5E5"> through and and analyze</font>

933
00:38:34,020 --> 00:38:40,140
what it's looking like and we'll see a

934
00:38:37,020 --> 00:38:42,930
<font color="#E5E5E5">little more how to do this so like I</font>

935
00:38:40,140 --> 00:38:44,490
said solving the halting problem we

936
00:38:42,930 --> 00:38:48,089
can't do it there's no way to do it and

937
00:38:44,490 --> 00:38:51,450
<font color="#CCCCCC">we will never</font><font color="#E5E5E5"> solve this problem unless</font>

938
00:38:48,090 --> 00:38:54,540
<font color="#E5E5E5">there's some major changes to computer</font>

939
00:38:51,450 --> 00:38:59,939
science and the future it's not going to

940
00:38:54,540 --> 00:39:05,820
get solved but we can do<font color="#E5E5E5"> things to avoid</font>

941
00:38:59,940 --> 00:39:08,250
it we can we<font color="#E5E5E5"> can get</font><font color="#CCCCCC"> around it we can</font>

942
00:39:05,820 --> 00:39:10,080
make assumptions we can specify syntax

943
00:39:08,250 --> 00:39:12,290
it's not allowed we can insert time

944
00:39:10,080 --> 00:39:14,940
limits we can block access to resources

945
00:39:12,290 --> 00:39:16,350
syscalls functions it's things<font color="#E5E5E5"> that we</font>

946
00:39:14,940 --> 00:39:17,790
are<font color="#E5E5E5"> you said like you know it's hard to</font>

947
00:39:16,350 --> 00:39:19,860
<font color="#E5E5E5">get that information but it's something</font>

948
00:39:17,790 --> 00:39:23,670
we can do we<font color="#CCCCCC"> can build sandbox we can do</font>

949
00:39:19,860 --> 00:39:25,770
this we can recognize syntax we can say

950
00:39:23,670 --> 00:39:28,140
hey you know I see you're calling this

951
00:39:25,770 --> 00:39:29,880
function this function isn't good we

952
00:39:28,140 --> 00:39:32,970
can't we can't decide whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not</font>

953
00:39:29,880 --> 00:39:34,590
it's good or not but<font color="#CCCCCC"> we can say we get</font>

954
00:39:32,970 --> 00:39:36,330
inside universally whether it's good or

955
00:39:34,590 --> 00:39:43,320
not<font color="#E5E5E5"> but we can say I know this is bad</font>

956
00:39:36,330 --> 00:39:44,990
and I don't want that there and so we

957
00:39:43,320 --> 00:39:47,010
create this artificial constraints and

958
00:39:44,990 --> 00:39:48,240
she might ask me<font color="#E5E5E5"> you know what about</font>

959
00:39:47,010 --> 00:39:49,710
legacy apps I didn't write my

960
00:39:48,240 --> 00:39:51,419
application with<font color="#CCCCCC"> rank second mind I</font>

961
00:39:49,710 --> 00:39:53,550
can't do<font color="#CCCCCC"> anything about this all</font><font color="#E5E5E5"> these</font>

962
00:39:51,420 --> 00:39:55,860
things<font color="#E5E5E5"> you just tell me are useless well</font>

963
00:39:53,550 --> 00:39:57,090
it's not true there's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

964
00:39:55,860 --> 00:39:59,670
<font color="#E5E5E5">you can do a lot of application</font>

965
00:39:57,090 --> 00:40:05,100
platforms have ways to introduce things

966
00:39:59,670 --> 00:40:08,010
like introspection or have performance

967
00:40:05,100 --> 00:40:09,420
api's allow you to hook into it and work

968
00:40:08,010 --> 00:40:11,400
with it to<font color="#E5E5E5"> look at what's happening in</font>

969
00:40:09,420 --> 00:40:14,100
the application so you<font color="#E5E5E5"> can build tools</font>

970
00:40:11,400 --> 00:40:15,930
around this functionality and you can

971
00:40:14,100 --> 00:40:17,999
inject it into the<font color="#E5E5E5"> application after the</font>

972
00:40:15,930 --> 00:40:19,158
fact

973
00:40:17,999 --> 00:40:22,229
really quick I'm just gonna go<font color="#E5E5E5"> through</font>

974
00:40:19,159 --> 00:40:24,149
there are a handful of applications of

975
00:40:22,229 --> 00:40:27,118
products out<font color="#E5E5E5"> the news things if you're</font>

976
00:40:24,149 --> 00:40:29,129
going<font color="#E5E5E5"> to be using one of these ask some</font>

977
00:40:27,119 --> 00:40:30,869
questions they should<font color="#CCCCCC"> be able to tell</font>

978
00:40:29,129 --> 00:40:32,098
<font color="#E5E5E5">you all these answers you no wonder my</font>

979
00:40:30,869 --> 00:40:34,859
environment what's supportive

980
00:40:32,099 --> 00:40:37,669
environment performance metrics you know

981
00:40:34,859 --> 00:40:40,199
what's it going to do to my application

982
00:40:37,669 --> 00:40:42,118
where is<font color="#CCCCCC"> it operating does it have the</font>

983
00:40:40,199 --> 00:40:43,409
context it needs you<font color="#CCCCCC"> know is it</font>

984
00:40:42,119 --> 00:40:45,509
operating the network layer but it

985
00:40:43,409 --> 00:40:48,929
requires a more information that's not

986
00:40:45,509 --> 00:40:50,729
<font color="#CCCCCC">available at the network layer did what</font>

987
00:40:48,929 --> 00:40:52,259
<font color="#E5E5E5">at the halting problem does doing their</font>

988
00:40:50,729 --> 00:40:54,629
thing<font color="#CCCCCC"> that they say they do require</font>

989
00:40:52,259 --> 00:40:56,189
solving the halting problem if it does

990
00:40:54,629 --> 00:40:58,679
what assumptions that they made how do

991
00:40:56,189 --> 00:41:03,538
they how<font color="#E5E5E5"> do they bypass that what were</font>

992
00:40:58,679 --> 00:41:05,489
they able to<font color="#E5E5E5"> do to solve that so to</font>

993
00:41:03,539 --> 00:41:08,969
conclude think about<font color="#E5E5E5"> your input as a</font>

994
00:41:05,489 --> 00:41:11,999
formal language recognize and validate

995
00:41:08,969 --> 00:41:14,459
your input for processing constrain your

996
00:41:11,999 --> 00:41:15,988
input as much as possible and the

997
00:41:14,459 --> 00:41:17,819
halting problem can't be solved<font color="#E5E5E5"> but that</font>

998
00:41:15,989 --> 00:41:19,799
<font color="#E5E5E5">doesn't mean it's</font><font color="#CCCCCC"> the end of the</font><font color="#E5E5E5"> line we</font>

999
00:41:17,819 --> 00:41:24,499
can do things about<font color="#CCCCCC"> that we just need to</font>

1000
00:41:19,799 --> 00:41:24,499
be smart about it cool thank you

