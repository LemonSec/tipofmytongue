1
00:00:20,190 --> 00:00:25,480
awesome thank<font color="#CCCCCC"> you guys thank</font><font color="#E5E5E5"> you Sarah</font>

2
00:00:22,840 --> 00:00:28,150
I'm sorry<font color="#CCCCCC"> for the kind</font><font color="#E5E5E5"> of BuzzFeed II</font>

3
00:00:25,480 --> 00:00:31,270
title there's some good content though

4
00:00:28,150 --> 00:00:33,580
so don't worry again<font color="#E5E5E5"> kind of like Sarah</font>

5
00:00:31,270 --> 00:00:36,220
mentioned I'm Greg I help<font color="#E5E5E5"> out with the</font>

6
00:00:33,580 --> 00:00:37,870
<font color="#CCCCCC">loss San Antonio chapter so if you're</font>

7
00:00:36,220 --> 00:00:39,580
working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> something new and cool and</font>

8
00:00:37,870 --> 00:00:42,820
would like to demo it there we'd love<font color="#CCCCCC"> to</font>

9
00:00:39,580 --> 00:00:44,980
have you yes<font color="#E5E5E5"> I tricked the DEF CON folks</font>

10
00:00:42,820 --> 00:00:46,510
into letting me speak once I've tricked

11
00:00:44,980 --> 00:00:49,629
the last con folks into letting me speak

12
00:00:46,510 --> 00:00:51,460
twice<font color="#E5E5E5"> I got my first legal threat and</font>

13
00:00:49,630 --> 00:00:53,350
research this year so it was pretty

14
00:00:51,460 --> 00:00:57,910
flattering I think<font color="#E5E5E5"> that means I'm moving</font>

15
00:00:53,350 --> 00:00:59,050
up but who knows I believe<font color="#CCCCCC"> that if</font>

16
00:00:57,910 --> 00:01:00,459
you're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> in a security</font>

17
00:00:59,050 --> 00:01:01,989
conference you better have a proof of

18
00:01:00,460 --> 00:01:04,330
concept to back up what you're talking

19
00:01:01,989 --> 00:01:05,740
about which I<font color="#E5E5E5"> know is what everyone</font>

20
00:01:04,330 --> 00:01:09,340
wants to<font color="#E5E5E5"> get to you right we all</font><font color="#CCCCCC"> want</font>

21
00:01:05,740 --> 00:01:11,080
the the final<font color="#E5E5E5"> product or the sausage but</font>

22
00:01:09,340 --> 00:01:13,450
we're not<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> get straight to the</font>

23
00:01:11,080 --> 00:01:15,869
sausage we are first going to<font color="#E5E5E5"> take a</font>

24
00:01:13,450 --> 00:01:18,880
tour<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the sausage-making facility</font>

25
00:01:15,869 --> 00:01:21,670
because i think<font color="#E5E5E5"> that the process is just</font>

26
00:01:18,880 --> 00:01:25,839
important as the final product and in

27
00:01:21,670 --> 00:01:28,090
this presentation cool on to<font color="#E5E5E5"> the good</font>

28
00:01:25,840 --> 00:01:30,220
stuff a little background to kind of set

29
00:01:28,090 --> 00:01:32,049
the<font color="#E5E5E5"> scene is I've worked in cloud for</font>

30
00:01:30,220 --> 00:01:35,140
almost three years now in addition<font color="#E5E5E5"> to</font>

31
00:01:32,049 --> 00:01:37,150
<font color="#E5E5E5">founding a start-up and when I first got</font>

32
00:01:35,140 --> 00:01:40,330
to cloud I still thought I was<font color="#E5E5E5"> kind of</font>

33
00:01:37,150 --> 00:01:41,680
the traditional security guy I believe

34
00:01:40,330 --> 00:01:44,200
<font color="#CCCCCC">that we were</font><font color="#E5E5E5"> all very very special</font>

35
00:01:41,680 --> 00:01:47,250
snowflakes and that automation was good

36
00:01:44,200 --> 00:01:50,500
but nothing<font color="#E5E5E5"> would ever be able to</font>

37
00:01:47,250 --> 00:01:53,580
replace us as testers or make the manual

38
00:01:50,500 --> 00:01:55,930
process more efficient I spent a year

39
00:01:53,580 --> 00:01:58,750
<font color="#E5E5E5">managing and leading a team that</font><font color="#CCCCCC"> was</font>

40
00:01:55,930 --> 00:02:01,210
focused on functional automation which

41
00:01:58,750 --> 00:02:02,799
kind<font color="#E5E5E5"> of really opened my eyes and the</font>

42
00:02:01,210 --> 00:02:05,559
fundamental thing that I took away<font color="#E5E5E5"> from</font>

43
00:02:02,799 --> 00:02:07,240
it is that security is really behind the

44
00:02:05,560 --> 00:02:10,060
ball in comparison to<font color="#CCCCCC"> the rest of the</font>

45
00:02:07,240 --> 00:02:12,609
industry in comparison to our dev

46
00:02:10,060 --> 00:02:15,070
counterparts in comparison to our

47
00:02:12,610 --> 00:02:17,489
functional testing counterparts and just

48
00:02:15,070 --> 00:02:20,109
in comparison to the industry as a whole

49
00:02:17,489 --> 00:02:21,820
and right now I don't<font color="#E5E5E5"> know a whole lot</font>

50
00:02:20,110 --> 00:02:24,880
of dev teams that are really satisfied

51
00:02:21,820 --> 00:02:26,560
with their security teams because the

52
00:02:24,880 --> 00:02:28,810
unfortunate reality that I've kind of

53
00:02:26,560 --> 00:02:30,040
come to see is that we're the guys that

54
00:02:28,810 --> 00:02:30,970
are usually holding things up on

55
00:02:30,040 --> 00:02:32,530
releases

56
00:02:30,970 --> 00:02:34,420
um you know maybe it takes you two weeks

57
00:02:32,530 --> 00:02:36,190
to<font color="#E5E5E5"> do is a manual security assessment</font>

58
00:02:34,420 --> 00:02:41,410
but it takes the functional guys 1 days

59
00:02:36,190 --> 00:02:43,210
2 one day to run their tests I've also

60
00:02:41,410 --> 00:02:45,400
never really met a team that has<font color="#E5E5E5"> the</font>

61
00:02:43,210 --> 00:02:48,700
<font color="#E5E5E5">perfect resources to test every aspect</font>

62
00:02:45,400 --> 00:02:50,580
of every application which i think is

63
00:02:48,700 --> 00:02:53,519
what like makes engineers the most

64
00:02:50,580 --> 00:02:57,640
valuable resource<font color="#E5E5E5"> in our process and</font>

65
00:02:53,520 --> 00:03:00,220
kind<font color="#E5E5E5"> of the typical process for us as</font>

66
00:02:57,640 --> 00:03:02,709
penetration testers is we first do an

67
00:03:00,220 --> 00:03:05,709
assessment we generate a report that we

68
00:03:02,710 --> 00:03:07,420
then hand off<font color="#CCCCCC"> to the dev team they might</font>

69
00:03:05,709 --> 00:03:09,670
fix things they might not but eventually

70
00:03:07,420 --> 00:03:11,739
it's our job to retest and usually

71
00:03:09,670 --> 00:03:16,030
things aren't fixed so again this

72
00:03:11,740 --> 00:03:18,280
<font color="#E5E5E5">process is extremely resource it</font>

73
00:03:16,030 --> 00:03:20,920
consumes a lot of resources especially

74
00:03:18,280 --> 00:03:24,600
on the people side especially<font color="#CCCCCC"> if you</font>

75
00:03:20,920 --> 00:03:24,600
have to retest multiple multiple times

76
00:03:24,750 --> 00:03:31,690
yeah so again retesting is expensive so

77
00:03:29,340 --> 00:03:34,140
<font color="#CCCCCC">I'm kind of tired of seeing the</font><font color="#E5E5E5"> slide</font>

78
00:03:31,690 --> 00:03:36,459
but I didn't know how else to say it I

79
00:03:34,140 --> 00:03:40,290
started<font color="#E5E5E5"> to</font><font color="#CCCCCC"> think about in</font><font color="#E5E5E5"> this role how</font>

80
00:03:36,459 --> 00:03:40,290
we can make security more efficient and

81
00:03:41,459 --> 00:03:47,350
I've been<font color="#E5E5E5"> doing this</font><font color="#CCCCCC"> process for a while</font>

82
00:03:44,110 --> 00:03:49,120
now to automate the manual tests that

83
00:03:47,350 --> 00:03:51,850
we've created<font color="#E5E5E5"> in a way to do it easily</font>

84
00:03:49,120 --> 00:03:53,350
and<font color="#E5E5E5"> efficiently and after you kind of</font>

85
00:03:51,850 --> 00:03:55,239
get good at it<font color="#E5E5E5"> I found that only adds</font>

86
00:03:53,350 --> 00:03:56,859
about like<font color="#E5E5E5"> twenty-five to thirty percent</font>

87
00:03:55,239 --> 00:04:00,610
additional overhead and time to get this

88
00:03:56,860 --> 00:04:02,049
created and so right now<font color="#E5E5E5"> if you're</font>

89
00:04:00,610 --> 00:04:03,850
paying like a hundred thousand dollars

90
00:04:02,049 --> 00:04:06,310
<font color="#E5E5E5">for like a commercial application</font>

91
00:04:03,850 --> 00:04:07,810
testing tool at least for me it doesn't

92
00:04:06,310 --> 00:04:09,910
hit the final check mark it doesn't give

93
00:04:07,810 --> 00:04:12,040
me enough to sleep at night and be

94
00:04:09,910 --> 00:04:14,350
confident that<font color="#CCCCCC"> it found everything that</font>

95
00:04:12,040 --> 00:04:16,000
it should and so if<font color="#E5E5E5"> you undertake this</font>

96
00:04:14,350 --> 00:04:17,890
process I<font color="#E5E5E5"> think overall I don't know</font>

97
00:04:16,000 --> 00:04:19,418
what you're paying your engineers but I

98
00:04:17,890 --> 00:04:21,250
think overall it will<font color="#E5E5E5"> probably save you</font>

99
00:04:19,418 --> 00:04:22,750
some time and money<font color="#E5E5E5"> and give you an</font>

100
00:04:21,250 --> 00:04:26,470
extra value add that I don't think you

101
00:04:22,750 --> 00:04:28,090
can get from commercial products so kind

102
00:04:26,470 --> 00:04:30,850
of the process<font color="#CCCCCC"> improvement that I</font>

103
00:04:28,090 --> 00:04:33,880
suggest<font color="#CCCCCC"> is rather than just</font><font color="#E5E5E5"> creating a</font>

104
00:04:30,850 --> 00:04:36,370
report you take some<font color="#CCCCCC"> time to create an</font>

105
00:04:33,880 --> 00:04:38,320
automated script and I'll get into<font color="#E5E5E5"> the</font>

106
00:04:36,370 --> 00:04:40,300
best<font color="#E5E5E5"> ways to do that in a little bit but</font>

107
00:04:38,320 --> 00:04:42,340
you can then take this script and either

108
00:04:40,300 --> 00:04:44,490
hand it off to your dev team or hand it

109
00:04:42,340 --> 00:04:48,448
off to a<font color="#E5E5E5"> resource that's less valuable</font>

110
00:04:44,490 --> 00:04:50,669
to rerun<font color="#CCCCCC"> and retest products and we can</font>

111
00:04:48,449 --> 00:04:53,370
<font color="#E5E5E5">even take that one step further and use</font>

112
00:04:50,669 --> 00:04:55,258
continuous delivery tools to completely

113
00:04:53,370 --> 00:05:00,569
remove the the<font color="#E5E5E5"> human aspect from</font>

114
00:04:55,259 --> 00:05:02,550
retesting and the framework that I like

115
00:05:00,569 --> 00:05:04,800
to<font color="#E5E5E5"> use for this is selenium if you're</font>

116
00:05:02,550 --> 00:05:06,720
not<font color="#E5E5E5"> familiar with selenium it is a</font>

117
00:05:04,800 --> 00:05:10,349
testing tool primarily used by

118
00:05:06,720 --> 00:05:14,789
functional testers to mimic and mock a

119
00:05:10,349 --> 00:05:16,650
<font color="#E5E5E5">user's behavior in a web browser what I</font>

120
00:05:14,789 --> 00:05:20,219
really like about selenium is it gives

121
00:05:16,650 --> 00:05:21,750
us superior XSS validation because you

122
00:05:20,220 --> 00:05:23,250
can<font color="#CCCCCC"> more natively detect when it's</font>

123
00:05:21,750 --> 00:05:25,169
occurring you're not using a proxy with

124
00:05:23,250 --> 00:05:27,389
burp suite or anything like that you<font color="#E5E5E5"> can</font>

125
00:05:25,169 --> 00:05:30,060
actually<font color="#E5E5E5"> switch the alert validate that</font>

126
00:05:27,389 --> 00:05:32,880
it's your message<font color="#E5E5E5"> and keep testing it</font>

127
00:05:30,060 --> 00:05:35,190
also has a very low time to get<font color="#E5E5E5"> started</font>

128
00:05:32,880 --> 00:05:37,560
with there there's something called the

129
00:05:35,190 --> 00:05:40,289
selenium<font color="#E5E5E5"> IDE which I'll get to which</font>

130
00:05:37,560 --> 00:05:42,659
lets you export Python or code of your

131
00:05:40,289 --> 00:05:45,568
choice to give you kind of a starting

132
00:05:42,659 --> 00:05:48,270
point for creating security automation

133
00:05:45,569 --> 00:05:51,740
<font color="#E5E5E5">the other really big plus to selenium is</font>

134
00:05:48,270 --> 00:05:54,090
<font color="#CCCCCC">its semi fault tolerant meaning that</font>

135
00:05:51,740 --> 00:05:58,020
most<font color="#E5E5E5"> of these tests you could reproduce</font>

136
00:05:54,090 --> 00:05:59,520
just by using a request library but

137
00:05:58,020 --> 00:06:01,710
let's say<font color="#E5E5E5"> you have like some endpoint</font>

138
00:05:59,520 --> 00:06:03,719
that<font color="#CCCCCC"> you're posting data to and the</font>

139
00:06:01,710 --> 00:06:05,489
developer changes that endpoint so

140
00:06:03,719 --> 00:06:09,210
either the<font color="#CCCCCC"> be URL changes or the actual</font>

141
00:06:05,490 --> 00:06:11,940
data changes hopefully developer is

142
00:06:09,210 --> 00:06:13,409
hooking up<font color="#E5E5E5"> that post request to</font>

143
00:06:11,940 --> 00:06:16,620
somewhere in<font color="#CCCCCC"> the UI and they</font><font color="#E5E5E5"> hooked it</font>

144
00:06:13,409 --> 00:06:19,250
up<font color="#E5E5E5"> correctly so as long</font><font color="#CCCCCC"> as like the HTML</font>

145
00:06:16,620 --> 00:06:22,020
and the CSS doesn't significantly change

146
00:06:19,250 --> 00:06:24,090
most selenium tests<font color="#E5E5E5"> won't actually break</font>

147
00:06:22,020 --> 00:06:27,060
so again that that's less work for your

148
00:06:24,090 --> 00:06:29,638
<font color="#E5E5E5">security team overall and the investment</font>

149
00:06:27,060 --> 00:06:31,560
your department is making the one<font color="#E5E5E5"> kind</font>

150
00:06:29,639 --> 00:06:33,479
of downside to selenium is it's not very

151
00:06:31,560 --> 00:06:36,479
efficient compared to a request library

152
00:06:33,479 --> 00:06:39,659
because it is again running in a browser

153
00:06:36,479 --> 00:06:41,520
but that can<font color="#E5E5E5"> kind of be mitigated with</font>

154
00:06:39,659 --> 00:06:46,349
the continuous deployment tools because

155
00:06:41,520 --> 00:06:47,969
you can<font color="#E5E5E5"> run everything in parallel so</font><font color="#CCCCCC"> to</font>

156
00:06:46,349 --> 00:06:49,349
show you<font color="#CCCCCC"> just exactly what I'm talking</font>

157
00:06:47,969 --> 00:06:52,680
about<font color="#E5E5E5"> with selenium for those who have</font>

158
00:06:49,349 --> 00:06:54,449
never seen<font color="#CCCCCC"> it</font><font color="#E5E5E5"> I have the budget store</font>

159
00:06:52,680 --> 00:06:56,729
running<font color="#E5E5E5"> over here it's a purposely</font>

160
00:06:54,449 --> 00:06:58,000
vulnerable web application that<font color="#E5E5E5"> I chose</font>

161
00:06:56,729 --> 00:07:00,490
just for the demo

162
00:06:58,000 --> 00:07:02,650
oh and selenium is just like a one-click

163
00:07:00,490 --> 00:07:04,000
install and firefox to get the<font color="#E5E5E5"> IDE so</font>

164
00:07:02,650 --> 00:07:06,130
<font color="#CCCCCC">I'm not going to</font><font color="#E5E5E5"> show you how to install</font>

165
00:07:04,000 --> 00:07:08,320
<font color="#CCCCCC">it but all I do is I come over here to</font>

166
00:07:06,130 --> 00:07:10,150
my little selenium button you can see

167
00:07:08,320 --> 00:07:13,599
the red button is on which means it's

168
00:07:10,150 --> 00:07:17,620
recording my actions so I start by

169
00:07:13,600 --> 00:07:19,210
clicking on<font color="#CCCCCC"> the search button what I</font>

170
00:07:17,620 --> 00:07:22,450
think<font color="#E5E5E5"> about right here is of course like</font>

171
00:07:19,210 --> 00:07:27,280
injection and fuzzing so I just type

172
00:07:22,450 --> 00:07:30,400
inject me I click Submit and you can see

173
00:07:27,280 --> 00:07:32,979
that<font color="#E5E5E5"> selenium</font><font color="#CCCCCC"> is following me around so</font>

174
00:07:30,400 --> 00:07:36,909
it saw that I opened the<font color="#E5E5E5"> the page I</font>

175
00:07:32,980 --> 00:07:39,040
click the link i sent inject me as the

176
00:07:36,910 --> 00:07:41,560
payload and then it clicked submit for

177
00:07:39,040 --> 00:07:47,650
me or it's reproducing me clicking

178
00:07:41,560 --> 00:07:49,840
submit the other page that I was

179
00:07:47,650 --> 00:07:53,590
particularly interested in was<font color="#CCCCCC"> login so</font>

180
00:07:49,840 --> 00:08:02,830
again I go to login type inject me type

181
00:07:53,590 --> 00:08:05,560
inject me oops and all that gets

182
00:08:02,830 --> 00:08:08,530
recorded in selenium so then I<font color="#E5E5E5"> go to</font>

183
00:08:05,560 --> 00:08:11,260
source and we can see<font color="#E5E5E5"> it's HTML which</font>

184
00:08:08,530 --> 00:08:14,080
isn't really helpful and I go<font color="#E5E5E5"> to format</font>

185
00:08:11,260 --> 00:08:16,000
and I change that to python to with

186
00:08:14,080 --> 00:08:18,820
webdriver and it's an experiment an

187
00:08:16,000 --> 00:08:22,840
experimental feature so there's a

188
00:08:18,820 --> 00:08:25,690
<font color="#E5E5E5">warning but whatever and this will</font><font color="#CCCCCC"> give</font>

189
00:08:22,840 --> 00:08:28,690
you code that will literally mimic the

190
00:08:25,690 --> 00:08:30,130
actions that I just made<font color="#E5E5E5"> in Python and</font>

191
00:08:28,690 --> 00:08:34,120
I've got a better view it's a little

192
00:08:30,130 --> 00:08:37,360
hard to see right here but going back to

193
00:08:34,120 --> 00:08:40,210
the slides this is the the<font color="#E5E5E5"> final code</font>

194
00:08:37,360 --> 00:08:42,219
that using the IDE gives you I've just

195
00:08:40,210 --> 00:08:43,089
<font color="#CCCCCC">added 2 comments to show you what I'm</font>

196
00:08:42,219 --> 00:08:44,650
going<font color="#E5E5E5"> to use for cross-site scripting</font>

197
00:08:43,089 --> 00:08:47,800
and what I'm<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to use for SQL</font>

198
00:08:44,650 --> 00:08:55,110
injection and then just to run like the

199
00:08:47,800 --> 00:08:58,030
initial script it's going<font color="#E5E5E5"> to go fast but</font>

200
00:08:55,110 --> 00:09:01,230
it's just copying all the actions that I

201
00:08:58,030 --> 00:09:01,230
already took and just run it again

202
00:09:02,900 --> 00:09:10,050
no you cannot run selenium headless or

203
00:09:06,060 --> 00:09:12,719
<font color="#CCCCCC">maybe you can but there you</font><font color="#E5E5E5"> go yeah you</font>

204
00:09:10,050 --> 00:09:15,599
can't use<font color="#E5E5E5"> phantom</font><font color="#CCCCCC"> j/s but I'm not that</font>

205
00:09:12,720 --> 00:09:16,950
cool so that's<font color="#E5E5E5"> not what I'm doing but</font>

206
00:09:15,600 --> 00:09:18,540
anyways<font color="#CCCCCC"> yeah so we</font><font color="#E5E5E5"> can see that it</font>

207
00:09:16,950 --> 00:09:20,340
literally just mimics all the behavior

208
00:09:18,540 --> 00:09:22,709
that we've done<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the browser and so</font>

209
00:09:20,340 --> 00:09:24,540
again<font color="#E5E5E5"> I'm using this part at the top for</font>

210
00:09:22,710 --> 00:09:27,270
cross-site scripting this part at the

211
00:09:24,540 --> 00:09:29,630
bottom for<font color="#E5E5E5"> SQL injection which is all</font>

212
00:09:27,270 --> 00:09:32,819
what the IDE is already generated for us

213
00:09:29,630 --> 00:09:34,650
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> my test for cross-site</font>

214
00:09:32,820 --> 00:09:37,110
scripting again you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> in blue what</font>

215
00:09:34,650 --> 00:09:40,350
I've copied over all that i'm doing<font color="#E5E5E5"> is</font>

216
00:09:37,110 --> 00:09:43,080
i'm reading from a list of cross-site

217
00:09:40,350 --> 00:09:44,760
scripting screen strings and then<font color="#E5E5E5"> i'm</font>

218
00:09:43,080 --> 00:09:46,650
checking to see if an alert box was

219
00:09:44,760 --> 00:09:48,569
triggered if it was triggered is it the

220
00:09:46,650 --> 00:09:50,250
message that<font color="#E5E5E5"> I'm expecting so I know</font>

221
00:09:48,570 --> 00:09:53,600
<font color="#E5E5E5">that I'm actually triggering this alert</font>

222
00:09:50,250 --> 00:09:55,470
box and it's not part of the regular

223
00:09:53,600 --> 00:09:57,870
functionality of the application and

224
00:09:55,470 --> 00:10:00,030
then based on that I'm sending<font color="#CCCCCC"> some</font>

225
00:09:57,870 --> 00:10:01,350
information to<font color="#CCCCCC"> a pretty parser which is</font>

226
00:10:00,030 --> 00:10:06,180
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to make some real pretty output</font>

227
00:10:01,350 --> 00:10:07,470
for whoever has to<font color="#E5E5E5"> look at it this is</font>

228
00:10:06,180 --> 00:10:11,790
the code that I'm using for SQL

229
00:10:07,470 --> 00:10:14,490
injection for SQL map you I either<font color="#E5E5E5"> use</font>

230
00:10:11,790 --> 00:10:18,120
dash you for URL or dash are for post

231
00:10:14,490 --> 00:10:19,800
requests it's a<font color="#CCCCCC"> it's a really handy</font>

232
00:10:18,120 --> 00:10:22,380
functionality for SQL map that<font color="#E5E5E5"> I'm not</font>

233
00:10:19,800 --> 00:10:25,319
<font color="#E5E5E5">sure everyone's familiar with and so to</font>

234
00:10:22,380 --> 00:10:28,350
get<font color="#CCCCCC"> that on doing is I'm intercepting a</font>

235
00:10:25,320 --> 00:10:30,780
request and burp and all<font color="#E5E5E5"> this code will</font>

236
00:10:28,350 --> 00:10:32,190
<font color="#E5E5E5">be available by the way so like don't</font>

237
00:10:30,780 --> 00:10:36,449
feel like you have to snap pictures or

238
00:10:32,190 --> 00:10:39,150
scribble furiously<font color="#E5E5E5"> but anyway so I take</font>

239
00:10:36,450 --> 00:10:43,610
this request that I've intercepted from

240
00:10:39,150 --> 00:10:43,610
<font color="#CCCCCC">Bert and</font><font color="#E5E5E5"> I copy it to this text file and</font>

241
00:10:44,150 --> 00:10:50,010
<font color="#E5E5E5">then I rely on SQL map to figure out how</font>

242
00:10:47,220 --> 00:10:53,670
to parse that and attack the username

243
00:10:50,010 --> 00:10:55,410
and password variables and so SQL map is

244
00:10:53,670 --> 00:10:58,650
one of the few like automated tools that

245
00:10:55,410 --> 00:11:01,319
i really trust so on the left gets you

246
00:10:58,650 --> 00:11:02,459
to a completely automated solution but

247
00:11:01,320 --> 00:11:04,020
if you wanted to take<font color="#CCCCCC"> it one step</font>

248
00:11:02,460 --> 00:11:06,420
further so the<font color="#E5E5E5"> person that you're</font>

249
00:11:04,020 --> 00:11:09,780
handing off your script to can actually

250
00:11:06,420 --> 00:11:11,219
see the the injection occur I've come<font color="#E5E5E5"> up</font>

251
00:11:09,780 --> 00:11:13,050
<font color="#CCCCCC">with some code on the right for that</font><font color="#E5E5E5"> as</font>

252
00:11:11,220 --> 00:11:14,860
well and<font color="#E5E5E5"> again it mostly borrows from</font>

253
00:11:13,050 --> 00:11:18,819
the original code that we took

254
00:11:14,860 --> 00:11:23,560
selenium IDE which is noted in blue but

255
00:11:18,820 --> 00:11:25,300
so the<font color="#CCCCCC"> final product of all this is this</font>

256
00:11:23,560 --> 00:11:28,449
script that I've called the maid called

257
00:11:25,300 --> 00:11:34,810
last con py and again it's exactly what

258
00:11:28,450 --> 00:11:37,360
we just<font color="#E5E5E5"> look like looked at again pretty</font>

259
00:11:34,810 --> 00:11:40,479
printer it's going<font color="#E5E5E5"> to go to the website</font>

260
00:11:37,360 --> 00:11:42,520
it's going<font color="#E5E5E5"> to start throwing XSS strings</font>

261
00:11:40,480 --> 00:11:44,710
at it you'll see<font color="#CCCCCC"> that these strings are</font>

262
00:11:42,520 --> 00:11:48,040
passing meaning that the<font color="#E5E5E5"> website wasn't</font>

263
00:11:44,710 --> 00:11:51,190
vulnerable fails on one passes on the

264
00:11:48,040 --> 00:11:54,790
next one and then it takes the the<font color="#E5E5E5"> post</font>

265
00:11:51,190 --> 00:11:56,710
<font color="#E5E5E5">request throws it to SQL map and then</font>

266
00:11:54,790 --> 00:11:59,469
tests it and then you can see it

267
00:11:56,710 --> 00:12:03,750
actually logged in as the user using the

268
00:11:59,470 --> 00:12:03,750
the payload handed to it from SQL map

269
00:12:05,820 --> 00:12:11,950
but so this<font color="#E5E5E5"> is great I think</font><font color="#CCCCCC"> for us</font>

270
00:12:09,820 --> 00:12:14,410
because again you can hand it off to the

271
00:12:11,950 --> 00:12:17,800
dev team you can hand it off to a less

272
00:12:14,410 --> 00:12:20,500
valuable resource but you can also use

273
00:12:17,800 --> 00:12:23,140
<font color="#E5E5E5">continuous deployment to remove the the</font>

274
00:12:20,500 --> 00:12:24,370
<font color="#E5E5E5">human element whatsoever also a lot</font><font color="#CCCCCC"> of</font>

275
00:12:23,140 --> 00:12:26,230
dev folks are using continuous

276
00:12:24,370 --> 00:12:28,300
development so you can get to<font color="#E5E5E5"> this</font>

277
00:12:26,230 --> 00:12:29,800
really<font color="#E5E5E5"> great place where your devs are</font>

278
00:12:28,300 --> 00:12:31,630
pushing code and you don't have to<font color="#E5E5E5"> look</font>

279
00:12:29,800 --> 00:12:34,050
at<font color="#E5E5E5"> it and like you can push code and</font>

280
00:12:31,630 --> 00:12:36,370
Jenkins<font color="#E5E5E5"> already automatically knows to</font>

281
00:12:34,050 --> 00:12:38,560
run your new tests<font color="#E5E5E5"> against their new</font>

282
00:12:36,370 --> 00:12:40,120
code do we have folks here who are using

283
00:12:38,560 --> 00:12:43,510
Jenkins like in their current<font color="#CCCCCC"> build</font>

284
00:12:40,120 --> 00:12:44,860
employs yes<font color="#E5E5E5"> awesome that's the the best</font>

285
00:12:43,510 --> 00:12:47,770
number I've seen so far which is

286
00:12:44,860 --> 00:12:50,500
<font color="#E5E5E5">exciting if you're not familiar with</font>

287
00:12:47,770 --> 00:12:54,579
Jenkins it's a continuous deployment

288
00:12:50,500 --> 00:12:58,390
tool that's used to<font color="#E5E5E5"> both the bad picture</font>

289
00:12:54,580 --> 00:13:02,760
I'm sorry that<font color="#CCCCCC"> is used to both tests and</font>

290
00:12:58,390 --> 00:13:04,960
released new software so it has a

291
00:13:02,760 --> 00:13:06,970
testing phase<font color="#E5E5E5"> that's usually done here</font>

292
00:13:04,960 --> 00:13:08,680
this can be<font color="#E5E5E5"> your functional tests but</font>

293
00:13:06,970 --> 00:13:10,930
now it can also be your security tests

294
00:13:08,680 --> 00:13:13,150
and then<font color="#E5E5E5"> it has a release phase where it</font>

295
00:13:10,930 --> 00:13:15,699
will deploy your code should it pass

296
00:13:13,150 --> 00:13:17,949
every test two let's say a pre

297
00:13:15,700 --> 00:13:20,260
production environment for you<font color="#E5E5E5"> and then</font>

298
00:13:17,950 --> 00:13:21,910
it will run the tests again and then if

299
00:13:20,260 --> 00:13:24,370
all<font color="#E5E5E5"> that goes well it'll finally kick</font>

300
00:13:21,910 --> 00:13:26,800
the code to your production server so

301
00:13:24,370 --> 00:13:29,970
it's extremely efficient it's it's

302
00:13:26,800 --> 00:13:29,969
really what's taking over cloud

303
00:13:33,180 --> 00:13:37,000
is the pipeline part of<font color="#CCCCCC"> Jenkins so</font>

304
00:13:35,440 --> 00:13:38,740
there's a lot of different<font color="#CCCCCC"> ways to build</font>

305
00:13:37,000 --> 00:13:40,990
pipelines and<font color="#CCCCCC"> jenkins by default you</font>

306
00:13:38,740 --> 00:13:42,820
don't really need a plugin but so if you

307
00:13:40,990 --> 00:13:45,070
<font color="#E5E5E5">haven't seen jenkins before this is</font>

308
00:13:42,820 --> 00:13:48,220
again<font color="#CCCCCC"> the</font><font color="#E5E5E5"> typical view you'll see your</font>

309
00:13:45,070 --> 00:13:50,980
types of jobs at the top the names of

310
00:13:48,220 --> 00:13:54,160
the jobs on the<font color="#E5E5E5"> left you'll see the the</font>

311
00:13:50,980 --> 00:13:57,089
status of the last job<font color="#E5E5E5"> run so blue or</font>

312
00:13:54,160 --> 00:13:59,709
green means passing red is failing and

313
00:13:57,089 --> 00:14:03,670
<font color="#CCCCCC">Jenkins also provides a history of the</font>

314
00:13:59,709 --> 00:14:05,439
jobs so again we want<font color="#CCCCCC"> to take this one</font>

315
00:14:03,670 --> 00:14:07,420
step further to completely remove the

316
00:14:05,440 --> 00:14:09,279
human element free up our security

317
00:14:07,420 --> 00:14:11,110
engineers to do the<font color="#CCCCCC"> the testing that</font>

318
00:14:09,279 --> 00:14:12,189
really matters I don't know about<font color="#E5E5E5"> you</font>

319
00:14:11,110 --> 00:14:14,440
guys<font color="#E5E5E5"> but I really don't like doing</font>

320
00:14:12,190 --> 00:14:16,660
menial work don't like testing the same

321
00:14:14,440 --> 00:14:20,170
thing over<font color="#E5E5E5"> and over again it gets old</font>

322
00:14:16,660 --> 00:14:23,490
it's<font color="#E5E5E5"> not fun so by doing this again on</font>

323
00:14:20,170 --> 00:14:25,689
an individual product basis you

324
00:14:23,490 --> 00:14:27,279
<font color="#E5E5E5">front-load a little of your work but</font><font color="#CCCCCC"> I</font>

325
00:14:25,690 --> 00:14:32,709
think you get<font color="#E5E5E5"> a large value add out of</font>

326
00:14:27,279 --> 00:14:35,649
it but so how we actually port this into

327
00:14:32,709 --> 00:14:38,319
Jenkins is the<font color="#E5E5E5"> original file that we saw</font>

328
00:14:35,649 --> 00:14:39,820
was one single<font color="#E5E5E5"> Python file that we were</font>

329
00:14:38,320 --> 00:14:42,399
running all of our tests out of his

330
00:14:39,820 --> 00:14:45,610
methods all you have to do is split them

331
00:14:42,399 --> 00:14:47,110
up<font color="#E5E5E5"> I like to split them up on on by test</font>

332
00:14:45,610 --> 00:14:48,700
because again this gives you the

333
00:14:47,110 --> 00:14:52,420
opportunity to<font color="#CCCCCC"> run things in parallel</font>

334
00:14:48,700 --> 00:14:55,810
and<font color="#E5E5E5"> Jenkins to help mitigate the fact</font>

335
00:14:52,420 --> 00:14:58,540
that selenium can take up to a minute to

336
00:14:55,810 --> 00:15:00,399
run a test so all<font color="#E5E5E5"> you have to add so</font>

337
00:14:58,540 --> 00:15:03,880
Jenkins knows whether at asked is the

338
00:15:00,399 --> 00:15:07,630
test is passing or failing is this self

339
00:15:03,880 --> 00:15:08,740
assert true and sell faster yeah so all

340
00:15:07,630 --> 00:15:11,020
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> to do is put in the search</font>

341
00:15:08,740 --> 00:15:14,220
statements and then Jenkins knows

342
00:15:11,020 --> 00:15:17,260
whether to pass or fail a test and again

343
00:15:14,220 --> 00:15:19,540
to add granularity and make<font color="#E5E5E5"> things run</font>

344
00:15:17,260 --> 00:15:22,839
in<font color="#E5E5E5"> parallel I like to make</font><font color="#CCCCCC"> a method for</font>

345
00:15:19,540 --> 00:15:27,099
each single test so in this example we

346
00:15:22,839 --> 00:15:30,820
would have one for SQL injection and one

347
00:15:27,100 --> 00:15:32,529
for cross-site scripting and so the

348
00:15:30,820 --> 00:15:34,990
awesome thing about this is<font color="#E5E5E5"> you get kind</font>

349
00:15:32,529 --> 00:15:38,079
of this this code inception almost

350
00:15:34,990 --> 00:15:40,390
because we're<font color="#E5E5E5"> using Jenkins to test to</font>

351
00:15:38,079 --> 00:15:41,489
see<font color="#CCCCCC"> if their code is ready to test which</font>

352
00:15:40,390 --> 00:15:44,100
can then

353
00:15:41,490 --> 00:15:46,110
test to see if we have new tests for

354
00:15:44,100 --> 00:15:48,620
that software and then we can<font color="#CCCCCC"> use those</font>

355
00:15:46,110 --> 00:15:51,089
tests to actually test their software

356
00:15:48,620 --> 00:15:52,770
but to show you what the final product

357
00:15:51,089 --> 00:15:55,050
looks<font color="#E5E5E5"> like i</font><font color="#CCCCCC"> have a Jenkins</font><font color="#E5E5E5"> server over</font>

358
00:15:52,770 --> 00:16:04,860
here with everything running that's kind

359
00:15:55,050 --> 00:16:06,899
of hard<font color="#CCCCCC"> to see cool so</font><font color="#E5E5E5"> on this kind of</font>

360
00:16:04,860 --> 00:16:08,520
the dashboard that<font color="#E5E5E5"> I built I have an</font>

361
00:16:06,899 --> 00:16:11,459
empty chest just<font color="#E5E5E5"> so something's actually</font>

362
00:16:08,520 --> 00:16:14,010
passing again an individual script for

363
00:16:11,459 --> 00:16:19,410
SQL injection an individual script for

364
00:16:14,010 --> 00:16:21,180
cross-site scripting and then the

365
00:16:19,410 --> 00:16:23,130
history of the jobs and then<font color="#E5E5E5"> Jenkins</font>

366
00:16:21,180 --> 00:16:26,219
comes with a lot<font color="#CCCCCC"> of great plugins to</font>

367
00:16:23,130 --> 00:16:28,050
build off of so you could<font color="#E5E5E5"> have an email</font>

368
00:16:26,220 --> 00:16:29,640
that goes out every time<font color="#E5E5E5"> a test is</font>

369
00:16:28,050 --> 00:16:31,380
finished and if it<font color="#CCCCCC"> fails one of your</font>

370
00:16:29,640 --> 00:16:35,459
engineers could get alerted and actually

371
00:16:31,380 --> 00:16:37,830
go look at<font color="#CCCCCC"> it there's also a great deal</font>

372
00:16:35,459 --> 00:16:40,170
of statistics that come with Jenkins by

373
00:16:37,830 --> 00:16:41,550
default my graph is not very<font color="#E5E5E5"> pretty</font>

374
00:16:40,170 --> 00:16:44,610
because I didn't give it<font color="#E5E5E5"> very much data</font>

375
00:16:41,550 --> 00:16:47,430
but this view might be a little bit<font color="#E5E5E5"> more</font>

376
00:16:44,610 --> 00:16:49,170
interesting<font color="#E5E5E5"> to you it's those the</font>

377
00:16:47,430 --> 00:16:51,239
successes the failures and gives you

378
00:16:49,170 --> 00:16:52,890
kind of an idea of how stable your

379
00:16:51,240 --> 00:16:55,589
product might or might not be from both

380
00:16:52,890 --> 00:16:59,390
a security perspective but also<font color="#CCCCCC"> just a</font>

381
00:16:55,589 --> 00:16:59,390
general functional perspective

382
00:17:04,349 --> 00:17:09,990
but again like test inception right

383
00:17:07,260 --> 00:17:11,640
pretty cool again frees up your

384
00:17:09,990 --> 00:17:13,770
engineers to do what is the most

385
00:17:11,640 --> 00:17:15,270
important and also gives<font color="#E5E5E5"> you a huge</font>

386
00:17:13,770 --> 00:17:19,168
value<font color="#E5E5E5"> add that I don't think folks are</font>

387
00:17:15,270 --> 00:17:21,059
getting out of other products but if

388
00:17:19,169 --> 00:17:22,650
you're if anyone's out there and<font color="#E5E5E5"> they're</font>

389
00:17:21,059 --> 00:17:24,059
thinking man Greg this is a whole lot of

390
00:17:22,650 --> 00:17:25,829
work<font color="#E5E5E5"> and I don't really</font><font color="#CCCCCC"> feel like</font><font color="#E5E5E5"> doing</font>

391
00:17:24,059 --> 00:17:29,250
it I feel<font color="#CCCCCC"> you because I don't really</font>

392
00:17:25,829 --> 00:17:30,990
<font color="#E5E5E5">like to do work either but at infinitive</font>

393
00:17:29,250 --> 00:17:33,230
which is the startup that I work at this

394
00:17:30,990 --> 00:17:35,520
is all we do day in and day out is build

395
00:17:33,230 --> 00:17:39,240
security automation and pipelines for

396
00:17:35,520 --> 00:17:40,679
our clients but as promised here's the

397
00:17:39,240 --> 00:17:42,840
the<font color="#E5E5E5"> github link with all the starter</font>

398
00:17:40,679 --> 00:17:45,240
code you should immediately be able to

399
00:17:42,840 --> 00:17:50,010
go pull it down<font color="#CCCCCC"> and run the</font><font color="#E5E5E5"> last com</font>

400
00:17:45,240 --> 00:17:52,740
file the the<font color="#E5E5E5"> Jenkins scripts require you</font>

401
00:17:50,010 --> 00:17:53,789
to just change the absolute path but if

402
00:17:52,740 --> 00:17:55,440
you have any problems which you

403
00:17:53,789 --> 00:17:57,360
shouldn't but I don't know if things

404
00:17:55,440 --> 00:17:59,520
always go wrong in code please feel<font color="#CCCCCC"> free</font>

405
00:17:57,360 --> 00:18:00,990
to reach<font color="#E5E5E5"> out on</font><font color="#CCCCCC"> Twitter</font><font color="#E5E5E5"> or email me yep</font>

406
00:17:59,520 --> 00:18:02,610
if for some reason<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't want to use</font>

407
00:18:00,990 --> 00:18:04,409
Jenkins like if you already if you

408
00:18:02,610 --> 00:18:05,850
always<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> have the granularity to</font>

409
00:18:04,409 --> 00:18:08,130
kick off tests you<font color="#CCCCCC"> can also use</font>

410
00:18:05,850 --> 00:18:10,408
<font color="#E5E5E5">something called selenium grid which is</font>

411
00:18:08,130 --> 00:18:12,179
used by functional folks to run<font color="#E5E5E5"> things</font>

412
00:18:10,409 --> 00:18:15,299
in a variety of<font color="#CCCCCC"> different browsers all</font>

413
00:18:12,179 --> 00:18:16,440
at once in parallel so<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> just another</font>

414
00:18:15,299 --> 00:18:19,320
option<font color="#CCCCCC"> that I didn't really</font><font color="#E5E5E5"> talk about</font>

415
00:18:16,440 --> 00:18:20,549
if you want to make sure you're ever

416
00:18:19,320 --> 00:18:24,270
your<font color="#CCCCCC"> test running</font><font color="#E5E5E5"> in every single</font>

417
00:18:20,549 --> 00:18:26,549
browser honestly we usually end up

418
00:18:24,270 --> 00:18:27,929
rolling our own again like most of it

419
00:18:26,549 --> 00:18:30,030
can be<font color="#E5E5E5"> done with with like Python</font>

420
00:18:27,929 --> 00:18:32,010
requests if you want to like really get

421
00:18:30,030 --> 00:18:33,809
a big increase in efficiency but<font color="#E5E5E5"> then</font>

422
00:18:32,010 --> 00:18:36,179
you're going to have<font color="#E5E5E5"> to write a lot of</font>

423
00:18:33,809 --> 00:18:38,070
your own rules around both like how you

424
00:18:36,179 --> 00:18:41,549
want<font color="#E5E5E5"> to interact with the the web page</font>

425
00:18:38,070 --> 00:18:43,889
or<font color="#E5E5E5"> the API as well as like validation</font>

426
00:18:41,549 --> 00:18:45,389
and parsing and selenium does a great

427
00:18:43,890 --> 00:18:48,840
job of giving you<font color="#E5E5E5"> like a phenomenal</font>

428
00:18:45,390 --> 00:18:51,240
amount of methods to to work with so the

429
00:18:48,840 --> 00:18:53,010
<font color="#CCCCCC">reason that that at least for web</font>

430
00:18:51,240 --> 00:18:56,820
applications that we that we like to

431
00:18:53,010 --> 00:18:58,379
stick with selenium is again like very

432
00:18:56,820 --> 00:19:03,240
low barrier to entry to get things up

433
00:18:58,380 --> 00:19:05,309
and running but again for like<font color="#E5E5E5"> api's and</font>

434
00:19:03,240 --> 00:19:06,870
stuff I don't know Matt talked about

435
00:19:05,309 --> 00:19:11,330
central bus earlier which<font color="#CCCCCC"> is which is</font>

436
00:19:06,870 --> 00:19:11,330
pretty phenomenal tool and open source

437
00:19:12,669 --> 00:19:17,140
cool thanks guys take<font color="#CCCCCC"> care</font>

