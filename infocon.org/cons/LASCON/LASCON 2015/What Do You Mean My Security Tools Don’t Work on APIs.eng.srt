1
00:00:17,180 --> 00:00:21,950
good morning<font color="#CCCCCC"> everyone thank you for</font>

2
00:00:19,160 --> 00:00:23,990
coming my name is jeff williams and i'm

3
00:00:21,950 --> 00:00:25,730
a CTO and founder of a company<font color="#E5E5E5"> called</font>

4
00:00:23,990 --> 00:00:28,250
contrast security and i encourage you to

5
00:00:25,730 --> 00:00:31,939
stop by and<font color="#CCCCCC"> check out</font><font color="#E5E5E5"> our stuff today</font>

6
00:00:28,250 --> 00:00:33,830
<font color="#CCCCCC">i'm</font><font color="#E5E5E5"> going to be talking about Oh some of</font>

7
00:00:31,939 --> 00:00:35,540
you may may have run into me before I

8
00:00:33,830 --> 00:00:37,100
was very<font color="#E5E5E5"> very involved with oz for a</font>

9
00:00:35,540 --> 00:00:38,839
long time like from the beginning so

10
00:00:37,100 --> 00:00:41,330
some of you may have seen some of my

11
00:00:38,840 --> 00:00:43,340
stuff I wrote the aw stop 10 and the web

12
00:00:41,330 --> 00:00:46,699
goat and sappy and a bunch of the<font color="#CCCCCC"> other</font>

13
00:00:43,340 --> 00:00:53,000
<font color="#E5E5E5">projects at a tow us today I'm going to</font>

14
00:00:46,699 --> 00:00:56,239
talk about why I suspect that Software

15
00:00:53,000 --> 00:00:58,399
Assurance tools don't work on api's and

16
00:00:56,239 --> 00:01:02,290
by api's I'm having a broad definition

17
00:00:58,399 --> 00:01:06,560
here of web services rest services

18
00:01:02,290 --> 00:01:08,929
microservices<font color="#CCCCCC"> api is the</font><font color="#E5E5E5"> api economy</font>

19
00:01:06,560 --> 00:01:11,360
WebSocket like there's a lot<font color="#CCCCCC"> of stuff in</font>

20
00:01:08,930 --> 00:01:13,490
<font color="#E5E5E5">this bucket but just in general</font><font color="#CCCCCC"> i think</font>

21
00:01:11,360 --> 00:01:16,039
that there's some real significant

22
00:01:13,490 --> 00:01:18,500
differences between the traditional web

23
00:01:16,039 --> 00:01:20,440
application and web services they can

24
00:01:18,500 --> 00:01:23,090
make it very<font color="#E5E5E5"> difficult for tool so look</font>

25
00:01:20,440 --> 00:01:24,649
that's sort of my hypothesis going in

26
00:01:23,090 --> 00:01:27,080
and I've done some<font color="#CCCCCC"> research so I've got</font>

27
00:01:24,650 --> 00:01:30,020
some data at<font color="#CCCCCC"> the end that will will</font>

28
00:01:27,080 --> 00:01:32,030
actually talk<font color="#E5E5E5"> about so but I got</font><font color="#CCCCCC"> to take</font>

29
00:01:30,020 --> 00:01:34,490
<font color="#E5E5E5">a long</font><font color="#CCCCCC"> time to get there because it's</font>

30
00:01:32,030 --> 00:01:36,549
not<font color="#E5E5E5"> that</font><font color="#CCCCCC"> much data so I can't do it the</font>

31
00:01:34,490 --> 00:01:40,100
first five<font color="#CCCCCC"> minutes or would</font><font color="#E5E5E5"> be done um</font>

32
00:01:36,549 --> 00:01:42,740
so when I say do they work on api's I've

33
00:01:40,100 --> 00:01:44,119
really got a pretty specific definition

34
00:01:42,740 --> 00:01:46,369
of<font color="#E5E5E5"> work that I'm trying to get to so</font>

35
00:01:44,119 --> 00:01:48,950
first thing<font color="#CCCCCC"> is it's got</font><font color="#E5E5E5"> to work at scale</font>

36
00:01:46,369 --> 00:01:50,330
and in fact I encourage you when you

37
00:01:48,950 --> 00:01:52,729
think about application security to

38
00:01:50,330 --> 00:01:55,460
throw out anything<font color="#E5E5E5"> that doesn't work at</font>

39
00:01:52,729 --> 00:01:57,140
scale because I see all these

40
00:01:55,460 --> 00:01:59,089
organizations that have apps like

41
00:01:57,140 --> 00:02:00,740
programs that don't work at scale

42
00:01:59,090 --> 00:02:02,570
they're only doing a tiny percentage of

43
00:02:00,740 --> 00:02:07,669
<font color="#CCCCCC">their</font><font color="#E5E5E5"> company's application portfolio</font>

44
00:02:02,570 --> 00:02:11,660
which is a disaster and to work at scale

45
00:02:07,670 --> 00:02:14,000
means that you probably can't have epic

46
00:02:11,660 --> 00:02:17,120
experts involved with the critical path

47
00:02:14,000 --> 00:02:18,920
of that project because most

48
00:02:17,120 --> 00:02:22,370
organizations don't<font color="#E5E5E5"> have enough of you</font>

49
00:02:18,920 --> 00:02:23,690
guys in order<font color="#E5E5E5"> to do that work</font><font color="#CCCCCC"> ok so if</font>

50
00:02:22,370 --> 00:02:25,010
you want to<font color="#E5E5E5"> do a you know if you've got</font>

51
00:02:23,690 --> 00:02:27,169
a thousand apps in your portfolio or

52
00:02:25,010 --> 00:02:29,239
even 100 apps in your portfolio you

53
00:02:27,169 --> 00:02:30,650
can't have apps like experts involved

54
00:02:29,239 --> 00:02:32,959
with every step of<font color="#CCCCCC"> that</font>

55
00:02:30,650 --> 00:02:34,730
because it won't scale and that means

56
00:02:32,959 --> 00:02:36,709
<font color="#E5E5E5">that your tools have to be super</font>

57
00:02:34,730 --> 00:02:38,238
accurate they're not accurate you have

58
00:02:36,709 --> 00:02:41,060
to have experts to go in and weed<font color="#CCCCCC"> out</font>

59
00:02:38,239 --> 00:02:43,340
the false<font color="#CCCCCC"> positives</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> you'll</font>

60
00:02:41,060 --> 00:02:47,510
<font color="#E5E5E5">instantly have experts involved so now</font>

61
00:02:43,340 --> 00:02:50,930
you don't scale in my mind these tools

62
00:02:47,510 --> 00:02:53,500
<font color="#E5E5E5">have to run continuously api's in</font>

63
00:02:50,930 --> 00:02:56,780
particular are likely to being built by

64
00:02:53,500 --> 00:02:59,299
agile and DevOps teams that are

65
00:02:56,780 --> 00:03:00,590
iterating very quickly they need instant

66
00:02:59,299 --> 00:03:03,230
feedback on the code that<font color="#CCCCCC"> they're</font>

67
00:03:00,590 --> 00:03:05,750
writing so we<font color="#CCCCCC"> gotta</font><font color="#E5E5E5"> I believe we need to</font>

68
00:03:03,230 --> 00:03:08,328
reimagine application security tools as

69
00:03:05,750 --> 00:03:10,879
what i call sensors much more like a new

70
00:03:08,329 --> 00:03:12,980
relic for you know performance

71
00:03:10,879 --> 00:03:15,560
monitoring we need our security tools to

72
00:03:12,980 --> 00:03:18,560
work that way continuously running not

73
00:03:15,560 --> 00:03:20,299
periodic scans but actually continuously

74
00:03:18,560 --> 00:03:21,409
monitoring things and I've got it

75
00:03:20,299 --> 00:03:22,760
there's a couple talks that I've done

76
00:03:21,409 --> 00:03:26,840
out there if you're more interested<font color="#E5E5E5"> in</font>

77
00:03:22,760 --> 00:03:28,310
<font color="#CCCCCC">that and most importantly I think we</font>

78
00:03:26,840 --> 00:03:30,980
need<font color="#E5E5E5"> to do a much better job of matching</font>

79
00:03:28,310 --> 00:03:33,680
up the<font color="#E5E5E5"> tools that we</font><font color="#CCCCCC"> have to the things</font>

80
00:03:30,980 --> 00:03:37,340
that they're good<font color="#CCCCCC"> at because you can't</font>

81
00:03:33,680 --> 00:03:39,470
just run one tool on your your app and

82
00:03:37,340 --> 00:03:42,410
expected to find all different classes

83
00:03:39,470 --> 00:03:44,419
of things so I think<font color="#E5E5E5"> we need to be</font><font color="#CCCCCC"> much</font>

84
00:03:42,410 --> 00:03:46,010
more specific about matching up hey this

85
00:03:44,419 --> 00:03:47,720
tool is really good at data flow

86
00:03:46,010 --> 00:03:50,959
<font color="#E5E5E5">analysis and this tool is really good at</font>

87
00:03:47,720 --> 00:03:52,909
SSL and match up the<font color="#E5E5E5"> tools to</font><font color="#CCCCCC"> the things</font>

88
00:03:50,959 --> 00:03:55,099
that we're trying to prove about<font color="#E5E5E5"> our</font>

89
00:03:52,909 --> 00:03:57,078
applications when we do a pen test or a

90
00:03:55,099 --> 00:04:00,738
code review or some kind of analysis

91
00:03:57,079 --> 00:04:02,329
right now I see a<font color="#CCCCCC"> lot of folks you're</font>

92
00:04:00,739 --> 00:04:03,620
running the tool then trusting that the

93
00:04:02,329 --> 00:04:05,750
tool is going to find everything<font color="#E5E5E5"> and</font>

94
00:04:03,620 --> 00:04:09,769
what I've discovered is that the tools

95
00:04:05,750 --> 00:04:12,019
are really not they don't find what you

96
00:04:09,769 --> 00:04:16,668
expect and this is after working in this

97
00:04:12,019 --> 00:04:18,918
field for 15 years the tools still I

98
00:04:16,668 --> 00:04:22,070
didn't know what the tools actually do

99
00:04:18,918 --> 00:04:23,930
and so the only way to figure out what

100
00:04:22,070 --> 00:04:25,099
tools do is to use some<font color="#CCCCCC"> kind of</font>

101
00:04:23,930 --> 00:04:26,780
benchmark and at the end I'm<font color="#E5E5E5"> going to</font>

102
00:04:25,099 --> 00:04:28,580
talk about<font color="#E5E5E5"> the loss benchmark project</font>

103
00:04:26,780 --> 00:04:30,229
which is actually measuring what these

104
00:04:28,580 --> 00:04:32,300
tools are good at and what their week at

105
00:04:30,229 --> 00:04:34,250
and then you can do this process much

106
00:04:32,300 --> 00:04:37,729
more intelligently but<font color="#E5E5E5"> until this</font>

107
00:04:34,250 --> 00:04:38,599
project there's no way to know<font color="#CCCCCC"> alright</font>

108
00:04:37,729 --> 00:04:41,570
so<font color="#E5E5E5"> let's talk a little bit about</font>

109
00:04:38,599 --> 00:04:44,248
services API economy is really important

110
00:04:41,570 --> 00:04:46,438
in app sec you

111
00:04:44,249 --> 00:04:49,379
I say Alec<font color="#E5E5E5"> Stamos gave a great talk he's</font>

112
00:04:46,439 --> 00:04:51,509
a SI cela<font color="#CCCCCC"> Facebook and formerly</font><font color="#E5E5E5"> so Yahoo</font>

113
00:04:49,379 --> 00:04:53,429
he gave a great talk and he said ubers

114
00:04:51,509 --> 00:04:56,639
just some code written on top of three

115
00:04:53,429 --> 00:04:58,888
api's it's google<font color="#CCCCCC"> maps twilio for</font>

116
00:04:56,639 --> 00:05:02,459
notifications and paypal for payments

117
00:04:58,889 --> 00:05:03,929
and<font color="#E5E5E5"> they're a billion-dollar company so</font>

118
00:05:02,459 --> 00:05:06,179
this<font color="#E5E5E5"> is really important and if you look</font>

119
00:05:03,929 --> 00:05:09,179
at uber their code is actually

120
00:05:06,179 --> 00:05:11,039
implemented with an API so you can go

121
00:05:09,179 --> 00:05:12,388
invoke<font color="#CCCCCC"> the uber API and they've got</font>

122
00:05:11,039 --> 00:05:14,308
clients written for that like a web

123
00:05:12,389 --> 00:05:17,279
client and they've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> mobile clients</font>

124
00:05:14,309 --> 00:05:19,889
that probably have used and I sort of

125
00:05:17,279 --> 00:05:22,319
fear<font color="#CCCCCC"> the day when somebody a paypal</font>

126
00:05:19,889 --> 00:05:24,839
writes into their paper into their API

127
00:05:22,319 --> 00:05:27,659
some call to over and then we<font color="#E5E5E5"> get</font>

128
00:05:24,839 --> 00:05:29,489
<font color="#E5E5E5">feedback and pretty soon Skynet but that</font>

129
00:05:27,659 --> 00:05:34,169
is not the problem that i'm<font color="#E5E5E5"> here to talk</font>

130
00:05:29,489 --> 00:05:36,149
<font color="#E5E5E5">to you about today today</font><font color="#CCCCCC"> i want to</font><font color="#E5E5E5"> point</font>

131
00:05:34,169 --> 00:05:38,188
out like all the<font color="#CCCCCC"> same kinds of</font>

132
00:05:36,149 --> 00:05:40,860
vulnerabilities that you have in web

133
00:05:38,189 --> 00:05:42,569
applications almost all of them exist in

134
00:05:40,860 --> 00:05:45,659
web services so you can have sequel

135
00:05:42,569 --> 00:05:47,129
injection in fact 10 years ago maybe a

136
00:05:45,659 --> 00:05:49,709
little more<font color="#CCCCCC"> than that i wrote a lesson</font>

137
00:05:47,129 --> 00:05:51,869
into web goat that has a sequel

138
00:05:49,709 --> 00:05:53,099
injection behind a soap web service that

139
00:05:51,869 --> 00:05:56,129
some of you may have played around with

140
00:05:53,099 --> 00:05:57,889
it's<font color="#E5E5E5"> very possible to have those kinds</font>

141
00:05:56,129 --> 00:06:01,139
of vulnerabilities in a web service but

142
00:05:57,889 --> 00:06:05,009
you know<font color="#E5E5E5"> how developers don't always</font>

143
00:06:01,139 --> 00:06:06,239
validate hidden<font color="#E5E5E5"> fields very well because</font>

144
00:06:05,009 --> 00:06:07,529
they're hidden right like they're not

145
00:06:06,239 --> 00:06:08,938
you know it's not doesn't seem like

146
00:06:07,529 --> 00:06:11,069
something<font color="#CCCCCC"> that an attacker could modify</font>

147
00:06:08,939 --> 00:06:12,899
well the same kind<font color="#E5E5E5"> of thing</font><font color="#CCCCCC"> happens with</font>

148
00:06:11,069 --> 00:06:15,329
<font color="#CCCCCC">API so I say an AP eyes are the new</font>

149
00:06:12,899 --> 00:06:17,789
hidden field here because it doesn't

150
00:06:15,329 --> 00:06:20,249
seem like an attacker could get inside

151
00:06:17,789 --> 00:06:23,009
your client<font color="#E5E5E5"> that you just wrote and</font>

152
00:06:20,249 --> 00:06:27,389
modify the fields that are being sent to

153
00:06:23,009 --> 00:06:29,549
the the service so developers might not

154
00:06:27,389 --> 00:06:31,139
think about being attacked through the

155
00:06:29,549 --> 00:06:33,719
API which means they leave out things

156
00:06:31,139 --> 00:06:37,349
like authentication and access control

157
00:06:33,719 --> 00:06:38,489
and input validation and all the kinds

158
00:06:37,349 --> 00:06:40,649
of things that we've gotten kind<font color="#E5E5E5"> of used</font>

159
00:06:38,489 --> 00:06:42,959
<font color="#E5E5E5">to in the web app world we got to go</font>

160
00:06:40,649 --> 00:06:46,229
<font color="#E5E5E5">back and</font><font color="#CCCCCC"> make sure we do them in the web</font>

161
00:06:42,959 --> 00:06:47,759
service role from a third model

162
00:06:46,229 --> 00:06:49,409
perspective I think<font color="#CCCCCC"> it is a little</font>

163
00:06:47,759 --> 00:06:50,879
different I'd love<font color="#CCCCCC"> to do this a</font>

164
00:06:49,409 --> 00:06:52,229
different talk built you<font color="#E5E5E5"> know sort of</font>

165
00:06:50,879 --> 00:06:54,239
build the threat model for this we don't

166
00:06:52,229 --> 00:06:58,248
<font color="#CCCCCC">have</font><font color="#E5E5E5"> time to do that today but I will</font>

167
00:06:54,239 --> 00:06:58,248
say it's a little bit different the

168
00:06:58,430 --> 00:07:04,650
with<font color="#CCCCCC"> AP is frequently the business data</font>

169
00:07:02,400 --> 00:07:07,409
you know the important assets are very

170
00:07:04,650 --> 00:07:08,789
close to<font color="#E5E5E5"> the external perimeter they're</font>

171
00:07:07,410 --> 00:07:11,039
not buried<font color="#E5E5E5"> in some three-tier</font>

172
00:07:08,789 --> 00:07:12,509
architecture deep you know<font color="#CCCCCC"> in a data</font>

173
00:07:11,039 --> 00:07:13,979
center they're taking that data and

174
00:07:12,509 --> 00:07:16,530
they're moving<font color="#CCCCCC"> it right out to the edge</font>

175
00:07:13,979 --> 00:07:18,780
the enterprise and making it accessible

176
00:07:16,530 --> 00:07:20,280
so when you do your pen test and<font color="#E5E5E5"> your</font>

177
00:07:18,780 --> 00:07:22,289
code readers<font color="#E5E5E5"> really think</font><font color="#CCCCCC"> about the</font>

178
00:07:20,280 --> 00:07:24,719
threat model and how this can affect the

179
00:07:22,289 --> 00:07:30,240
<font color="#E5E5E5">business but</font><font color="#CCCCCC"> like I</font><font color="#E5E5E5"> said we don't time</font>

180
00:07:24,720 --> 00:07:32,280
to do all that today we need tools to

181
00:07:30,240 --> 00:07:34,259
solve the scale problem right there's no

182
00:07:32,280 --> 00:07:38,580
way that we can do application security

183
00:07:34,259 --> 00:07:44,820
without automation it's critical but a

184
00:07:38,580 --> 00:07:48,570
<font color="#CCCCCC">couple things so so the first is that</font>

185
00:07:44,820 --> 00:07:51,449
<font color="#E5E5E5">the api's sort of exacerbate the scale</font>

186
00:07:48,570 --> 00:07:53,699
problem because now every application

187
00:07:51,449 --> 00:07:55,919
instead of just<font color="#E5E5E5"> having you know a</font>

188
00:07:53,699 --> 00:07:57,870
browser interface to one web app now

189
00:07:55,919 --> 00:08:00,359
you've got multiple interfaces right

190
00:07:57,870 --> 00:08:02,699
you've got mobile clients you might have

191
00:08:00,360 --> 00:08:05,070
<font color="#CCCCCC">a</font><font color="#E5E5E5"> desktop app you might have you</font><font color="#CCCCCC"> know a</font>

192
00:08:02,699 --> 00:08:07,680
browser JavaScript app and you might

193
00:08:05,070 --> 00:08:09,990
have external third parties all calling

194
00:08:07,680 --> 00:08:11,760
your API so now you've got a bunch of

195
00:08:09,990 --> 00:08:13,380
code<font color="#E5E5E5"> that you've got to manage so now</font>

196
00:08:11,760 --> 00:08:17,300
instead of your sort<font color="#E5E5E5"> of one of these</font>

197
00:08:13,380 --> 00:08:20,190
boxes<font color="#E5E5E5"> now you've got multiple ones and</font>

198
00:08:17,300 --> 00:08:21,870
this is sort<font color="#E5E5E5"> of a side note but</font>

199
00:08:20,190 --> 00:08:25,020
everybody here heard of<font color="#CCCCCC"> D perimeter</font>

200
00:08:21,870 --> 00:08:28,710
ization everybody here believe the

201
00:08:25,020 --> 00:08:30,930
perimeters dead and stop<font color="#CCCCCC"> calling them</font>

202
00:08:28,710 --> 00:08:32,579
internal and external applications

203
00:08:30,930 --> 00:08:35,039
because if there's no perimeter there's

204
00:08:32,580 --> 00:08:36,450
no internal and there's no external we

205
00:08:35,039 --> 00:08:37,949
can't do<font color="#CCCCCC"> that anymore right and if your</font>

206
00:08:36,450 --> 00:08:41,039
whole apps like program is set up around

207
00:08:37,950 --> 00:08:43,440
<font color="#E5E5E5">the concept of only testing the external</font>

208
00:08:41,039 --> 00:08:45,029
facing applications you've got a problem

209
00:08:43,440 --> 00:08:47,070
<font color="#E5E5E5">because there ain't no perimeter which</font>

210
00:08:45,029 --> 00:08:51,689
means there ain't no internal and

211
00:08:47,070 --> 00:08:53,550
external anymore so this<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> I've</font>

212
00:08:51,690 --> 00:08:58,350
seen<font color="#CCCCCC"> a lot of organizations I see a</font>

213
00:08:53,550 --> 00:09:00,329
beautiful sdlc anybody got one they're

214
00:08:58,350 --> 00:09:04,320
pretty they've got all kinds of<font color="#E5E5E5"> great</font>

215
00:09:00,329 --> 00:09:08,479
activities you know like threat modeling

216
00:09:04,320 --> 00:09:11,010
and architecture review and maybe some

217
00:09:08,480 --> 00:09:13,100
security requirements and a little later

218
00:09:11,010 --> 00:09:15,960
you might have

219
00:09:13,100 --> 00:09:17,850
training for developers and<font color="#CCCCCC"> some code</font>

220
00:09:15,960 --> 00:09:19,740
review and maybe later<font color="#E5E5E5"> some pen testing</font>

221
00:09:17,850 --> 00:09:21,840
or scanning or something and maybe even

222
00:09:19,740 --> 00:09:25,320
a check right before the application

223
00:09:21,840 --> 00:09:27,300
goes into production problem is if any

224
00:09:25,320 --> 00:09:30,960
<font color="#E5E5E5">of those activities require your</font>

225
00:09:27,300 --> 00:09:32,699
application security experts you've got

226
00:09:30,960 --> 00:09:34,380
a bottleneck in your process and it

227
00:09:32,700 --> 00:09:37,050
works this process is going<font color="#E5E5E5"> to work real</font>

228
00:09:34,380 --> 00:09:39,990
well for one or two projects but if you

229
00:09:37,050 --> 00:09:41,430
<font color="#E5E5E5">try to do this at scale and run multiple</font>

230
00:09:39,990 --> 00:09:43,290
projects through that process at the

231
00:09:41,430 --> 00:09:45,300
same time your absolute guys are going

232
00:09:43,290 --> 00:09:48,089
to get overloaded immediately so what do

233
00:09:45,300 --> 00:09:49,890
we do well<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first thing is we start</font>

234
00:09:48,090 --> 00:09:51,630
limiting down the number of applications

235
00:09:49,890 --> 00:09:52,890
that<font color="#E5E5E5"> these guys have to look at right so</font>

236
00:09:51,630 --> 00:09:57,240
we say we're only<font color="#E5E5E5"> going to look at the</font>

237
00:09:52,890 --> 00:09:58,980
critical apps anybody<font color="#E5E5E5"> doing this get</font>

238
00:09:57,240 --> 00:10:02,100
some nodding head so that happens right

239
00:09:58,980 --> 00:10:03,360
away this<font color="#CCCCCC"> is really a big problem then</font>

240
00:10:02,100 --> 00:10:05,310
what happens is even though<font color="#E5E5E5"> just the</font>

241
00:10:03,360 --> 00:10:06,510
criticals are too much so we<font color="#E5E5E5"> start</font>

242
00:10:05,310 --> 00:10:07,949
saying<font color="#CCCCCC"> well you know we're going</font><font color="#E5E5E5"> to do</font>

243
00:10:06,510 --> 00:10:10,740
is we're just going<font color="#E5E5E5"> to run the tools and</font>

244
00:10:07,950 --> 00:10:12,750
the the apps tech experts are going to

245
00:10:10,740 --> 00:10:14,750
<font color="#E5E5E5">filter out the false positives and we'll</font>

246
00:10:12,750 --> 00:10:16,950
<font color="#E5E5E5">just deal with that low hanging fruit</font>

247
00:10:14,750 --> 00:10:19,050
which means essentially you're missing

248
00:10:16,950 --> 00:10:21,210
anything that tools can't find so this

249
00:10:19,050 --> 00:10:23,609
is really a week<font color="#E5E5E5"> process in my mind we</font>

250
00:10:21,210 --> 00:10:26,700
end up with low assurance pretty low

251
00:10:23,610 --> 00:10:28,560
coverage over a portfolio and actually

252
00:10:26,700 --> 00:10:29,850
we end up pissing everybody off because

253
00:10:28,560 --> 00:10:31,859
now we're<font color="#E5E5E5"> this bottleneck that Sloan</font>

254
00:10:29,850 --> 00:10:35,730
down the<font color="#E5E5E5"> process for everyone right so I</font>

255
00:10:31,860 --> 00:10:38,700
want<font color="#CCCCCC"> to try and get</font><font color="#E5E5E5"> out of this mode and</font>

256
00:10:35,730 --> 00:10:42,030
I think the path forward there is is<font color="#CCCCCC"> to</font>

257
00:10:38,700 --> 00:10:43,980
use these<font color="#E5E5E5"> tools differently to use them</font>

258
00:10:42,030 --> 00:10:45,959
as sensors that run continuously

259
00:10:43,980 --> 00:10:48,300
throughout the process use them for what

260
00:10:45,960 --> 00:10:51,510
they're good for so let's talk<font color="#E5E5E5"> a little</font>

261
00:10:48,300 --> 00:10:54,030
bit more<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> I want to talk</font><font color="#CCCCCC"> about</font>

262
00:10:51,510 --> 00:10:56,880
some of<font color="#E5E5E5"> the things that are different</font>

263
00:10:54,030 --> 00:11:02,670
about api's and I'm going to kind of go

264
00:10:56,880 --> 00:11:04,770
through this stack of<font color="#E5E5E5"> things the biggest</font>

265
00:11:02,670 --> 00:11:08,010
change<font color="#E5E5E5"> with API is is that they're built</font>

266
00:11:04,770 --> 00:11:10,410
on top of frameworks and<font color="#E5E5E5"> they're really</font>

267
00:11:08,010 --> 00:11:12,630
complicated frameworks like web apps are

268
00:11:10,410 --> 00:11:13,860
pretty simple<font color="#E5E5E5"> and there's still a lot of</font>

269
00:11:12,630 --> 00:11:16,230
applications<font color="#E5E5E5"> that you know they're just</font>

270
00:11:13,860 --> 00:11:19,470
servlets or just simple<font color="#CCCCCC"> API</font><font color="#E5E5E5"> to take a</font>

271
00:11:16,230 --> 00:11:20,970
request in a response<font color="#E5E5E5"> API is built on</font>

272
00:11:19,470 --> 00:11:24,300
top of frameworks that do a lot of

273
00:11:20,970 --> 00:11:25,000
different<font color="#CCCCCC"> things and</font><font color="#E5E5E5"> I'm going to go</font>

274
00:11:24,300 --> 00:11:28,449
through some<font color="#CCCCCC"> of the</font>

275
00:11:25,000 --> 00:11:30,250
<font color="#E5E5E5">differences here it seems like these</font>

276
00:11:28,450 --> 00:11:32,380
api's are simpler like if you look at

277
00:11:30,250 --> 00:11:34,720
<font color="#E5E5E5">the code they could be you know five</font>

278
00:11:32,380 --> 00:11:37,630
lines of code to launch a web service in

279
00:11:34,720 --> 00:11:39,220
some framework<font color="#CCCCCC"> like you know jax-rs or</font>

280
00:11:37,630 --> 00:11:40,990
something it's<font color="#E5E5E5"> really actually kind of</font>

281
00:11:39,220 --> 00:11:43,990
elegant but when you look underneath

282
00:11:40,990 --> 00:11:46,030
it's a ton of stuff and it's all that

283
00:11:43,990 --> 00:11:48,370
stuff that<font color="#CCCCCC"> makes it hard to automate the</font>

284
00:11:46,030 --> 00:11:50,290
security so let's let's dig it i'm going

285
00:11:48,370 --> 00:11:55,060
<font color="#E5E5E5">to talk about the different levels of</font>

286
00:11:50,290 --> 00:11:58,689
this and then the goal is to identify

287
00:11:55,060 --> 00:11:59,800
which where's<font color="#E5E5E5"> the best sensor for any</font>

288
00:11:58,690 --> 00:12:02,710
one<font color="#CCCCCC"> of the things that we want</font><font color="#E5E5E5"> to</font>

289
00:11:59,800 --> 00:12:04,660
establish about our application so if<font color="#E5E5E5"> we</font>

290
00:12:02,710 --> 00:12:06,130
want<font color="#E5E5E5"> to you know if we want to test ssl</font>

291
00:12:04,660 --> 00:12:07,839
<font color="#E5E5E5">where what sense are we going to put in</font>

292
00:12:06,130 --> 00:12:09,310
<font color="#E5E5E5">place</font><font color="#CCCCCC"> to verify that we're doing SSL</font>

293
00:12:07,840 --> 00:12:10,630
right and if we<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> know that we</font>

294
00:12:09,310 --> 00:12:12,760
don't<font color="#CCCCCC"> have sequel injection where's the</font>

295
00:12:10,630 --> 00:12:16,210
best place to put a sensor to detect

296
00:12:12,760 --> 00:12:19,180
that so you got some options<font color="#E5E5E5"> on the</font>

297
00:12:16,210 --> 00:12:22,180
client side of things you<font color="#E5E5E5"> can do</font>

298
00:12:19,180 --> 00:12:24,459
traditional pen testing you can<font color="#CCCCCC"> do</font>

299
00:12:22,180 --> 00:12:26,349
dynamic scanning or you can use

300
00:12:24,460 --> 00:12:28,930
something like<font color="#CCCCCC"> java sniff anybody use</font>

301
00:12:26,350 --> 00:12:30,640
javis knew before cool it's an

302
00:12:28,930 --> 00:12:32,949
interesting little tool right<font color="#E5E5E5"> basically</font>

303
00:12:30,640 --> 00:12:35,290
what it does is it infiltrates the

304
00:12:32,950 --> 00:12:37,630
client and allows you to hook method

305
00:12:35,290 --> 00:12:39,610
calls while the client is running so

306
00:12:37,630 --> 00:12:41,650
instead of<font color="#E5E5E5"> having to be the next thing</font>

307
00:12:39,610 --> 00:12:42,790
here as a proxy instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> having to be</font>

308
00:12:41,650 --> 00:12:45,300
a proxy and trying to intercept the

309
00:12:42,790 --> 00:12:48,939
traffic which is often impossible with

310
00:12:45,300 --> 00:12:51,250
rich clients and web services with<font color="#E5E5E5"> java</font>

311
00:12:48,940 --> 00:12:54,339
snoop you can hook it directly<font color="#E5E5E5"> into the</font>

312
00:12:51,250 --> 00:12:56,890
the client itself and change values and

313
00:12:54,339 --> 00:13:01,630
then sort<font color="#E5E5E5"> of do your pen test that way</font>

314
00:12:56,890 --> 00:13:03,850
<font color="#E5E5E5">and then on the api side of things you</font>

315
00:13:01,630 --> 00:13:05,470
could use code of you<font color="#E5E5E5"> i'm a big fan of</font>

316
00:13:03,850 --> 00:13:07,390
that although it doesn't scale<font color="#E5E5E5"> really</font>

317
00:13:05,470 --> 00:13:09,240
well<font color="#CCCCCC"> i've</font><font color="#E5E5E5"> done a ton of code review a</font>

318
00:13:07,390 --> 00:13:13,060
static analysis or you can use

319
00:13:09,240 --> 00:13:14,650
instrumentation I asked and I want<font color="#E5E5E5"> to</font>

320
00:13:13,060 --> 00:13:17,069
<font color="#E5E5E5">spend just a couple of minutes</font><font color="#CCCCCC"> on I</font>

321
00:13:14,650 --> 00:13:19,600
asked one because I've spent the last

322
00:13:17,070 --> 00:13:21,280
five or six years<font color="#CCCCCC"> of my life building</font>

323
00:13:19,600 --> 00:13:22,930
out this technology but also because

324
00:13:21,280 --> 00:13:26,530
it's kind<font color="#E5E5E5"> of new and I thought it'd be</font>

325
00:13:22,930 --> 00:13:31,120
useful to<font color="#CCCCCC"> mention how it works in</font>

326
00:13:26,530 --> 00:13:34,810
principle so this is<font color="#CCCCCC"> how instrumentation</font>

327
00:13:31,120 --> 00:13:36,730
happens so you know normally when you

328
00:13:34,810 --> 00:13:38,290
load an application into a runtime

329
00:13:36,730 --> 00:13:41,019
environment you start<font color="#E5E5E5"> with some code</font>

330
00:13:38,290 --> 00:13:45,519
<font color="#E5E5E5">disk and loads into memory and starts</font>

331
00:13:41,019 --> 00:13:47,380
executing well with instrumentation you

332
00:13:45,519 --> 00:13:49,589
add an agent to your runtime environment

333
00:13:47,380 --> 00:13:53,399
that hooks that loading process and

334
00:13:49,589 --> 00:13:56,980
modifies that code as<font color="#E5E5E5"> it loads adding in</font>

335
00:13:53,399 --> 00:13:58,660
sensors like little callbacks that<font color="#E5E5E5"> allow</font>

336
00:13:56,980 --> 00:14:02,019
you to gather<font color="#CCCCCC"> data directly from the</font>

337
00:13:58,660 --> 00:14:04,240
running application so this is<font color="#CCCCCC"> really a</font>

338
00:14:02,019 --> 00:14:06,399
powerful technique it allows you to see

339
00:14:04,240 --> 00:14:09,519
what's<font color="#E5E5E5"> going on inside the application</font>

340
00:14:06,399 --> 00:14:12,519
as it runs so you can use this to do

341
00:14:09,519 --> 00:14:15,370
really<font color="#E5E5E5"> accurate data flow analysis you</font>

342
00:14:12,519 --> 00:14:17,139
can interrogate the application to get

343
00:14:15,370 --> 00:14:20,769
you know<font color="#CCCCCC"> how things</font><font color="#E5E5E5"> are configured and</font>

344
00:14:17,139 --> 00:14:23,860
so on<font color="#E5E5E5"> so then as that code runs you get</font>

345
00:14:20,769 --> 00:14:24,850
feedback and you can analyze the events

346
00:14:23,860 --> 00:14:26,699
that<font color="#CCCCCC"> happened during the running</font>

347
00:14:24,850 --> 00:14:29,500
application and identify vulnerabilities

348
00:14:26,699 --> 00:14:31,439
ways of improving security and sell it

349
00:14:29,500 --> 00:14:35,529
<font color="#E5E5E5">so that's the concept behind</font>

350
00:14:31,440 --> 00:14:37,269
instrumentation<font color="#CCCCCC"> and ultimately you get</font>

351
00:14:35,529 --> 00:14:40,959
this you know your code is<font color="#E5E5E5"> enhanced with</font>

352
00:14:37,269 --> 00:14:43,209
security now this<font color="#CCCCCC"> is the kind of</font>

353
00:14:40,959 --> 00:14:46,750
information that instrumentation<font color="#E5E5E5"> can</font>

354
00:14:43,209 --> 00:14:48,609
give you access to so instrumentation

355
00:14:46,750 --> 00:14:50,550
<font color="#CCCCCC">can see the code because it's running</font>

356
00:14:48,610 --> 00:14:52,660
there can do binary static analysis

357
00:14:50,550 --> 00:14:54,760
instrumentation can see all the HTTP

358
00:14:52,660 --> 00:14:55,870
traffic in and out so it can do things

359
00:14:54,760 --> 00:14:58,959
that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> a little bit like a</font><font color="#CCCCCC"> dashed</font>

360
00:14:55,870 --> 00:15:01,870
scanner by monitoring that stuff it can

361
00:14:58,959 --> 00:15:04,510
<font color="#E5E5E5">also see the actual back end connections</font>

362
00:15:01,870 --> 00:15:06,339
so if you're looking<font color="#CCCCCC"> for sequel</font>

363
00:15:04,510 --> 00:15:08,560
injection it's really helpful to be able

364
00:15:06,339 --> 00:15:10,690
to see the actual<font color="#E5E5E5"> sequel query as it</font>

365
00:15:08,560 --> 00:15:13,649
went to the database right that's the

366
00:15:10,690 --> 00:15:16,449
kind of insight that you can get with

367
00:15:13,649 --> 00:15:18,069
with instrumentation you see<font color="#E5E5E5"> all the</font>

368
00:15:16,449 --> 00:15:20,170
libraries and frameworks and how they're

369
00:15:18,069 --> 00:15:22,029
used you can see the configuration data

370
00:15:20,170 --> 00:15:24,300
and this<font color="#E5E5E5"> is really important is this one</font>

371
00:15:22,029 --> 00:15:26,529
time data flow is absolutely critical

372
00:15:24,300 --> 00:15:29,050
imagine if any of your pen testers

373
00:15:26,529 --> 00:15:31,360
imagine how awesome<font color="#E5E5E5"> it would be to see</font>

374
00:15:29,050 --> 00:15:33,459
exactly<font color="#E5E5E5"> the path that whatever data you</font>

375
00:15:31,360 --> 00:15:35,470
send into an application takes through

376
00:15:33,459 --> 00:15:37,420
the code you know where it hits what

377
00:15:35,470 --> 00:15:39,899
interfaces it goes to and how it<font color="#E5E5E5"> works</font>

378
00:15:37,420 --> 00:15:43,569
that's what instrumentation can provide

379
00:15:39,899 --> 00:15:45,759
so some advantages to<font color="#E5E5E5"> this you don't</font>

380
00:15:43,569 --> 00:15:48,279
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to intercept the traffic on the</font>

381
00:15:45,759 --> 00:15:50,010
wire and this is incredibly important

382
00:15:48,279 --> 00:15:50,910
for AP is because as we're going to see

383
00:15:50,010 --> 00:15:52,860
second that's<font color="#E5E5E5"> one of the biggest</font>

384
00:15:50,910 --> 00:15:55,770
challenges is just getting access to the

385
00:15:52,860 --> 00:15:57,720
data<font color="#E5E5E5"> instrumentation sees the data after</font>

386
00:15:55,770 --> 00:16:00,030
it's already come off the wire as<font color="#E5E5E5"> it's</font>

387
00:15:57,720 --> 00:16:04,680
flowing through the code so<font color="#E5E5E5"> you can see</font>

388
00:16:00,030 --> 00:16:06,689
it and analyze it there so let's talk

389
00:16:04,680 --> 00:16:09,630
<font color="#CCCCCC">about some of the complexity factors</font>

390
00:16:06,690 --> 00:16:12,090
that make API is difficult to<font color="#E5E5E5"> analyze</font>

391
00:16:09,630 --> 00:16:14,040
automatically and again you know you can

392
00:16:12,090 --> 00:16:15,840
do<font color="#E5E5E5"> these</font><font color="#CCCCCC"> things by hand but</font><font color="#E5E5E5"> I'm looking</font>

393
00:16:14,040 --> 00:16:19,380
for automated approaches here<font color="#E5E5E5"> that'll</font>

394
00:16:15,840 --> 00:16:21,900
scale so the first thing is<font color="#E5E5E5"> frameworks</font>

395
00:16:19,380 --> 00:16:25,350
this is an example<font color="#CCCCCC"> of a spring rest</font>

396
00:16:21,900 --> 00:16:29,160
interface and all you also one really

397
00:16:25,350 --> 00:16:32,310
had to do here was<font color="#E5E5E5"> right a little</font>

398
00:16:29,160 --> 00:16:33,630
controller with the maps requests to

399
00:16:32,310 --> 00:16:35,310
this and say hey this<font color="#CCCCCC"> is a rest</font>

400
00:16:33,630 --> 00:16:38,610
controller so we've got these two

401
00:16:35,310 --> 00:16:42,449
annotations and this which means hey

402
00:16:38,610 --> 00:16:45,360
take the value from the URL the name

403
00:16:42,450 --> 00:16:49,050
value and he's got a default value of

404
00:16:45,360 --> 00:16:51,660
world and use that to generate a new

405
00:16:49,050 --> 00:16:54,300
greeting and then return it which that

406
00:16:51,660 --> 00:16:56,520
that's a really powerful little

407
00:16:54,300 --> 00:16:57,990
controller but it ends up working so<font color="#E5E5E5"> now</font>

408
00:16:56,520 --> 00:17:00,650
you<font color="#E5E5E5"> send this URL in with the name</font>

409
00:16:57,990 --> 00:17:04,199
equals user comes back with a JSON

410
00:17:00,650 --> 00:17:07,650
payload that<font color="#E5E5E5"> says hello user right</font>

411
00:17:04,199 --> 00:17:09,810
really powerful but in order to to

412
00:17:07,650 --> 00:17:11,790
understand if that's got vulnerabilities

413
00:17:09,810 --> 00:17:15,690
in it I need to understand what all

414
00:17:11,790 --> 00:17:19,020
those annotations mean and unfortunately

415
00:17:15,690 --> 00:17:20,850
there's a ton of frameworks out there so

416
00:17:19,020 --> 00:17:22,530
I want just you know I<font color="#E5E5E5"> spent maybe 10</font>

417
00:17:20,849 --> 00:17:25,708
<font color="#CCCCCC">minutes and came up with a list</font><font color="#E5E5E5"> of these</font>

418
00:17:22,530 --> 00:17:28,940
are just Java frameworks for building

419
00:17:25,709 --> 00:17:32,370
web services and other kinds<font color="#E5E5E5"> of services</font>

420
00:17:28,940 --> 00:17:34,410
so this<font color="#CCCCCC"> is really hard</font><font color="#E5E5E5"> for tools to keep</font>

421
00:17:32,370 --> 00:17:35,520
up with right they got to understand all

422
00:17:34,410 --> 00:17:42,930
that stuff if they want<font color="#E5E5E5"> to find</font>

423
00:17:35,520 --> 00:17:46,200
vulnerabilities so another complexity

424
00:17:42,930 --> 00:17:48,180
here is the protocol level so I'm just

425
00:17:46,200 --> 00:17:50,310
going to<font color="#E5E5E5"> work up the stack here a little</font>

426
00:17:48,180 --> 00:17:52,530
bit so the first thing<font color="#E5E5E5"> is that protocol</font>

427
00:17:50,310 --> 00:17:54,720
layer could be anything for a service

428
00:17:52,530 --> 00:17:58,350
right so if the developer creates a

429
00:17:54,720 --> 00:18:00,030
WebSocket to the browser he can send

430
00:17:58,350 --> 00:18:02,879
whatever he wants over that connection

431
00:18:00,030 --> 00:18:03,170
right he could send any kind of data you

432
00:18:02,880 --> 00:18:05,150
could

433
00:18:03,170 --> 00:18:08,600
rapid and other protocols like so poor

434
00:18:05,150 --> 00:18:10,850
XMPP or whatever to send data<font color="#E5E5E5"> over that</font>

435
00:18:08,600 --> 00:18:15,699
connection and it could<font color="#CCCCCC"> be a custom</font>

436
00:18:10,850 --> 00:18:20,060
protocol my son wrote a a game he's a

437
00:18:15,700 --> 00:18:22,100
high school<font color="#CCCCCC"> student he wrote a game on J</font>

438
00:18:20,060 --> 00:18:24,560
monkey it's a 3d graphics engine but he

439
00:18:22,100 --> 00:18:26,389
<font color="#E5E5E5">wanted it to be multiplayer so he</font>

440
00:18:24,560 --> 00:18:29,000
crafted up his own little protocol

441
00:18:26,390 --> 00:18:31,520
sending UDP messages back around my<font color="#CCCCCC"> home</font>

442
00:18:29,000 --> 00:18:34,940
network<font color="#E5E5E5"> and you know he didn't know how</font>

443
00:18:31,520 --> 00:18:36,980
to use XML or JSON or anything so he

444
00:18:34,940 --> 00:18:39,740
just sent like you know comma separated

445
00:18:36,980 --> 00:18:41,840
values over a UDP packet and then when

446
00:18:39,740 --> 00:18:43,070
the<font color="#E5E5E5"> data got there he parsed it right so</font>

447
00:18:41,840 --> 00:18:45,439
he's just<font color="#E5E5E5"> writing his own little</font>

448
00:18:43,070 --> 00:18:47,830
protocol to handle this this<font color="#E5E5E5"> level of</font>

449
00:18:45,440 --> 00:18:50,750
stuff and developers will do that

450
00:18:47,830 --> 00:18:53,120
because the the power that they have now

451
00:18:50,750 --> 00:18:55,670
you know with HTTP it's pretty

452
00:18:53,120 --> 00:18:58,909
constrained you got name value pairs to

453
00:18:55,670 --> 00:19:00,320
send<font color="#E5E5E5"> data back and forth in now we've</font>

454
00:18:58,910 --> 00:19:02,090
got you know all these complex

455
00:19:00,320 --> 00:19:06,590
structures to send data<font color="#CCCCCC"> back and forth</font>

456
00:19:02,090 --> 00:19:09,620
in so intercepting these protocols is

457
00:19:06,590 --> 00:19:15,230
sort of arbitrarily hard right if people

458
00:19:09,620 --> 00:19:17,449
stick to standards I like rest over HTTP

459
00:19:15,230 --> 00:19:19,310
or something then<font color="#E5E5E5"> you can intercept that</font>

460
00:19:17,450 --> 00:19:22,100
traffic with a standard tool and do

461
00:19:19,310 --> 00:19:24,169
stuff with it but if they're<font color="#CCCCCC"> doing crazy</font>

462
00:19:22,100 --> 00:19:25,879
stuff then it's going<font color="#E5E5E5"> to be you know</font>

463
00:19:24,170 --> 00:19:29,690
arbitrarily difficult to intercept that

464
00:19:25,880 --> 00:19:34,520
traffic if there's SSL involved it gets

465
00:19:29,690 --> 00:19:36,560
even harder it's you<font color="#E5E5E5"> know I've seen a</font>

466
00:19:34,520 --> 00:19:40,610
lot of work done in this on testing

467
00:19:36,560 --> 00:19:45,100
mobile clients so not always easy to set

468
00:19:40,610 --> 00:19:46,639
up a proxy in a mobile client connection

469
00:19:45,100 --> 00:19:47,899
particularly if that's the cells

470
00:19:46,640 --> 00:19:50,030
involved so you know you can try<font color="#E5E5E5"> a</font>

471
00:19:47,900 --> 00:19:53,510
reverse proxy you might<font color="#E5E5E5"> have to modify</font>

472
00:19:50,030 --> 00:19:55,610
the trust or if that doesn't work you

473
00:19:53,510 --> 00:19:58,700
might have to actually reverse the code

474
00:19:55,610 --> 00:20:00,590
and recompile it there's a you know to

475
00:19:58,700 --> 00:20:02,870
use a forward proxy you can also use

476
00:20:00,590 --> 00:20:04,370
<font color="#E5E5E5">this tool called iOS kill switch which</font>

477
00:20:02,870 --> 00:20:09,500
is pretty cool it's sort of disabled

478
00:20:04,370 --> 00:20:10,520
certificate validation in iOS a bunch of

479
00:20:09,500 --> 00:20:13,460
<font color="#E5E5E5">different things that you might have to</font>

480
00:20:10,520 --> 00:20:15,170
do you might<font color="#E5E5E5"> spend your whole week when</font>

481
00:20:13,460 --> 00:20:16,620
you're supposed<font color="#E5E5E5"> to be testing just</font>

482
00:20:15,170 --> 00:20:18,000
getting proxy

483
00:20:16,620 --> 00:20:20,489
working so that<font color="#CCCCCC"> you can actually do the</font>

484
00:20:18,000 --> 00:20:22,260
test so i<font color="#CCCCCC"> think this problems going</font><font color="#E5E5E5"> to</font>

485
00:20:20,490 --> 00:20:25,260
<font color="#E5E5E5">get worse I think we've been in a golden</font>

486
00:20:22,260 --> 00:20:27,000
age of pen testing<font color="#CCCCCC"> the last 10 or 15</font>

487
00:20:25,260 --> 00:20:28,559
years because it's been really easy to

488
00:20:27,000 --> 00:20:33,390
intercept traffic and modify it but it's

489
00:20:28,559 --> 00:20:35,160
about<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get way way harder so then the</font>

490
00:20:33,390 --> 00:20:38,460
next level up is imagine<font color="#CCCCCC"> you've got the</font>

491
00:20:35,160 --> 00:20:40,020
protocol level handled now the data

492
00:20:38,460 --> 00:20:42,510
level what do we<font color="#E5E5E5"> how do we parse</font>

493
00:20:40,020 --> 00:20:44,610
whatever we get well parsers are really

494
00:20:42,510 --> 00:20:47,010
powerful and you know the more

495
00:20:44,610 --> 00:20:49,080
complicated they are the more features

496
00:20:47,010 --> 00:20:50,610
they have the more it's possible<font color="#CCCCCC"> to</font>

497
00:20:49,080 --> 00:20:51,990
<font color="#E5E5E5">abuse them I'm going to</font><font color="#CCCCCC"> talk about a</font>

498
00:20:50,610 --> 00:20:53,639
couple<font color="#E5E5E5"> of different parsers here and</font>

499
00:20:51,990 --> 00:20:55,590
things that you can do<font color="#CCCCCC"> to give</font><font color="#E5E5E5"> you sort</font>

500
00:20:53,640 --> 00:20:57,090
of<font color="#E5E5E5"> a sense but remember this is data</font>

501
00:20:55,590 --> 00:20:58,980
that's coming from<font color="#E5E5E5"> an untrusted source</font>

502
00:20:57,090 --> 00:21:01,350
you're bringing it into your<font color="#E5E5E5"> application</font>

503
00:20:58,980 --> 00:21:05,330
and you're just handing it off to some

504
00:21:01,350 --> 00:21:08,669
parser to do<font color="#E5E5E5"> whatever it's going to do</font>

505
00:21:05,330 --> 00:21:10,379
so let's look at<font color="#CCCCCC"> URLs and there's this</font>

506
00:21:08,670 --> 00:21:13,470
great paper called resting on your

507
00:21:10,380 --> 00:21:16,440
laurels from<font color="#E5E5E5"> Dennis Cruz is another long</font>

508
00:21:13,470 --> 00:21:17,790
time<font color="#CCCCCC"> owasp guy but I</font><font color="#E5E5E5"> encourage you to</font>

509
00:21:16,440 --> 00:21:20,010
read that some of these are<font color="#E5E5E5"> described</font>

510
00:21:17,790 --> 00:21:22,428
more fully in there but even<font color="#E5E5E5"> just URLs</font>

511
00:21:20,010 --> 00:21:25,379
that you'd use to invoke<font color="#CCCCCC"> a rest service</font>

512
00:21:22,429 --> 00:21:28,350
can be really powerful there's a<font color="#E5E5E5"> lot</font>

513
00:21:25,380 --> 00:21:30,500
that can go on inside a<font color="#CCCCCC"> URL so you know</font>

514
00:21:28,350 --> 00:21:34,290
sometimes you can pass in<font color="#E5E5E5"> credentials</font>

515
00:21:30,500 --> 00:21:37,530
inside the URL sometimes you anybody

516
00:21:34,290 --> 00:21:40,260
know a PTP parameter pollution basically

517
00:21:37,530 --> 00:21:42,090
are overloading parameters in<font color="#CCCCCC"> the URL so</font>

518
00:21:40,260 --> 00:21:44,850
you give like three different values<font color="#CCCCCC"> for</font>

519
00:21:42,090 --> 00:21:47,550
the foo parameter and then what happens

520
00:21:44,850 --> 00:21:48,870
to them inside the service is not well

521
00:21:47,550 --> 00:21:49,980
defined it's<font color="#E5E5E5"> different on different</font>

522
00:21:48,870 --> 00:21:52,500
platforms sometimes they get

523
00:21:49,980 --> 00:21:54,450
concatenated together and they might

524
00:21:52,500 --> 00:21:57,090
even concatenate together to form an

525
00:21:54,450 --> 00:21:58,740
attack so if there's you<font color="#E5E5E5"> know some</font>

526
00:21:57,090 --> 00:22:02,580
security filter<font color="#E5E5E5"> that's trying to look at</font>

527
00:21:58,740 --> 00:22:04,050
the data it might see three individual

528
00:22:02,580 --> 00:22:06,750
pieces none of which looks like<font color="#E5E5E5"> an</font>

529
00:22:04,050 --> 00:22:08,250
attack but<font color="#CCCCCC"> htp parameter pollution pulls</font>

530
00:22:06,750 --> 00:22:11,300
them together and turns it<font color="#E5E5E5"> into an</font>

531
00:22:08,250 --> 00:22:14,130
attack when it gets into<font color="#CCCCCC"> the parson I</font>

532
00:22:11,300 --> 00:22:17,159
didn't know<font color="#E5E5E5"> about this one this faking</font>

533
00:22:14,130 --> 00:22:19,110
the method this is kind of<font color="#CCCCCC"> cool some</font>

534
00:22:17,160 --> 00:22:22,260
systems out there allow you<font color="#E5E5E5"> to add a</font>

535
00:22:19,110 --> 00:22:24,750
underscore method parameter to your<font color="#CCCCCC"> url</font>

536
00:22:22,260 --> 00:22:28,320
you know so<font color="#CCCCCC"> just a simple ? underscore</font>

537
00:22:24,750 --> 00:22:31,559
method equals post and you can turn

538
00:22:28,320 --> 00:22:33,570
a get into<font color="#CCCCCC"> a post in terms of how the</font>

539
00:22:31,559 --> 00:22:34,678
processing happens on the server so I

540
00:22:33,570 --> 00:22:37,129
<font color="#E5E5E5">thought it was really an interesting</font>

541
00:22:34,679 --> 00:22:39,419
attack that will bypass certain kinds of

542
00:22:37,130 --> 00:22:43,830
security defenses that you might have<font color="#E5E5E5"> in</font>

543
00:22:39,419 --> 00:22:46,440
place and every one<font color="#CCCCCC"> of these back-end</font>

544
00:22:43,830 --> 00:22:49,949
systems that has a REST API it has its

545
00:22:46,440 --> 00:22:53,399
own URL format so some of them are

546
00:22:49,950 --> 00:22:55,769
<font color="#E5E5E5">really powerful like no sequel has a</font>

547
00:22:53,399 --> 00:22:57,779
great way to just explore the schema of

548
00:22:55,769 --> 00:23:00,029
a database just by sending in URLs and

549
00:22:57,779 --> 00:23:03,659
browsing around so there's a<font color="#E5E5E5"> huge</font>

550
00:23:00,029 --> 00:23:07,289
variety of<font color="#E5E5E5"> URLs that services can take</font>

551
00:23:03,659 --> 00:23:09,330
and this all makes it difficult to test

552
00:23:07,289 --> 00:23:11,759
automatically right again I'm not<font color="#E5E5E5"> saying</font>

553
00:23:09,330 --> 00:23:13,980
you can't go test this manually you guys

554
00:23:11,759 --> 00:23:15,690
are experts but we need to have tools

555
00:23:13,980 --> 00:23:16,799
<font color="#CCCCCC">that can do this and so I'm suspicious</font>

556
00:23:15,690 --> 00:23:20,070
that they're not<font color="#E5E5E5"> going to be able to</font>

557
00:23:16,799 --> 00:23:23,850
handle<font color="#CCCCCC"> this you know this thousand</font>

558
00:23:20,070 --> 00:23:28,769
points of light kind of variations in

559
00:23:23,850 --> 00:23:31,168
these URLs this is a GWT request<font color="#E5E5E5"> that's</font>

560
00:23:28,769 --> 00:23:33,629
the google web toolkit just another

561
00:23:31,169 --> 00:23:36,570
example of a complex data format that is

562
00:23:33,629 --> 00:23:38,850
now difficult to test with compared to

563
00:23:36,570 --> 00:23:43,500
<font color="#E5E5E5">something like HTTP you're used to using</font>

564
00:23:38,850 --> 00:23:45,678
you know zap or burp or something<font color="#E5E5E5"> you</font>

565
00:23:43,500 --> 00:23:50,159
can't do<font color="#E5E5E5"> it</font><font color="#CCCCCC"> with this turns out</font><font color="#E5E5E5"> that</font>

566
00:23:45,679 --> 00:23:52,769
this is not just<font color="#CCCCCC"> a straightforward data</font>

567
00:23:50,159 --> 00:23:54,750
structure these these fields refer to

568
00:23:52,769 --> 00:23:56,340
each<font color="#E5E5E5"> other so if you change something up</font>

569
00:23:54,750 --> 00:24:00,960
here you have to change some other stuff

570
00:23:56,340 --> 00:24:03,779
down here<font color="#CCCCCC"> too</font><font color="#E5E5E5"> to maintain</font><font color="#CCCCCC"> it as a valid</font>

571
00:24:00,960 --> 00:24:05,639
data format so<font color="#E5E5E5"> really difficult to test</font>

572
00:24:03,779 --> 00:24:09,090
this there<font color="#CCCCCC"> are some plugins now that you</font>

573
00:24:05,639 --> 00:24:10,678
can get for GWT but the<font color="#E5E5E5"> problem is we</font>

574
00:24:09,090 --> 00:24:12,539
don't have those plugins for every one

575
00:24:10,679 --> 00:24:14,940
of these protocols right people are

576
00:24:12,539 --> 00:24:17,490
dreaming up all kinds of<font color="#E5E5E5"> of data formats</font>

577
00:24:14,940 --> 00:24:19,019
and we don't<font color="#E5E5E5"> have the tools to go</font>

578
00:24:17,490 --> 00:24:23,669
automate them at<font color="#E5E5E5"> least in terms of</font>

579
00:24:19,019 --> 00:24:26,549
intercepting them on the wire XML has a

580
00:24:23,669 --> 00:24:30,330
bunch of interesting properties that not

581
00:24:26,549 --> 00:24:33,029
all developers know about so you've

582
00:24:30,330 --> 00:24:35,340
probably seen some<font color="#E5E5E5"> of these attacks the</font>

583
00:24:33,029 --> 00:24:37,080
billion laughs attack where you create

584
00:24:35,340 --> 00:24:39,720
one entity that makes<font color="#E5E5E5"> it to that makes</font>

585
00:24:37,080 --> 00:24:41,820
<font color="#E5E5E5">it four and</font><font color="#CCCCCC"> eight and so on to blow up</font>

586
00:24:39,720 --> 00:24:43,320
the<font color="#E5E5E5"> parser xxe</font>

587
00:24:41,820 --> 00:24:45,300
is really<font color="#E5E5E5"> important I'm going to</font>

588
00:24:43,320 --> 00:24:47,310
campaign for this to get into the next

589
00:24:45,300 --> 00:24:48,960
version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> top 10 because it's pretty</font>

590
00:24:47,310 --> 00:24:52,110
widespread and becoming more prevalent

591
00:24:48,960 --> 00:24:53,850
but if you search for<font color="#CCCCCC"> xxe</font>

592
00:24:52,110 --> 00:24:56,429
vulnerabilities in web service

593
00:24:53,850 --> 00:24:58,530
frameworks you see almost every<font color="#E5E5E5"> single</font>

594
00:24:56,430 --> 00:25:00,740
one of them<font color="#CCCCCC"> has a security finding that</font>

595
00:24:58,530 --> 00:25:03,120
says hey we got xxz because they

596
00:25:00,740 --> 00:25:07,220
everyone builds it this way<font color="#E5E5E5"> the first</font>

597
00:25:03,120 --> 00:25:11,250
time server-side request forgery

598
00:25:07,220 --> 00:25:14,820
interesting attack this is where you

599
00:25:11,250 --> 00:25:18,180
send in a sm l document with a doctype

600
00:25:14,820 --> 00:25:21,750
in it and in<font color="#E5E5E5"> that doctype you define an</font>

601
00:25:18,180 --> 00:25:23,910
external entity with the URL and so then

602
00:25:21,750 --> 00:25:26,850
when the parser parses that<font color="#CCCCCC"> xml document</font>

603
00:25:23,910 --> 00:25:29,400
it actually reaches out it sends an HTTP

604
00:25:26,850 --> 00:25:32,879
request out on the back end this is you

605
00:25:29,400 --> 00:25:36,960
know on your internal network it sends<font color="#CCCCCC"> a</font>

606
00:25:32,880 --> 00:25:38,490
URL out to some<font color="#CCCCCC"> others to some</font><font color="#E5E5E5"> other</font>

607
00:25:36,960 --> 00:25:40,950
application<font color="#CCCCCC"> that you have internally so</font>

608
00:25:38,490 --> 00:25:43,860
people can use your<font color="#CCCCCC"> XML parser to scan</font>

609
00:25:40,950 --> 00:25:46,470
your network and figure out what what

610
00:25:43,860 --> 00:25:49,139
host<font color="#E5E5E5"> are running where and access URLs</font>

611
00:25:46,470 --> 00:25:51,180
and even invoke other<font color="#CCCCCC"> API is if you've</font>

612
00:25:49,140 --> 00:25:53,220
got other REST API is that you can

613
00:25:51,180 --> 00:25:56,120
invoke<font color="#CCCCCC"> with the URL you can</font><font color="#E5E5E5"> do it with</font>

614
00:25:53,220 --> 00:25:58,290
<font color="#E5E5E5">SS RF so this is also a big deal and</font>

615
00:25:56,120 --> 00:26:00,530
this last one<font color="#CCCCCC"> is pretty me this is</font>

616
00:25:58,290 --> 00:26:03,899
another one<font color="#CCCCCC"> that Dennis crews found is</font>

617
00:26:00,530 --> 00:26:08,520
an XML decoder this is the<font color="#E5E5E5"> standard XML</font>

618
00:26:03,900 --> 00:26:10,980
decoder class in Java and it actually if

619
00:26:08,520 --> 00:26:15,480
you send in a carefully crafted chunk of

620
00:26:10,980 --> 00:26:19,890
XML that says class name runtime method

621
00:26:15,480 --> 00:26:23,010
name exact and then a bunch of

622
00:26:19,890 --> 00:26:27,240
parameters all in XML this XML parser

623
00:26:23,010 --> 00:26:29,910
will parse that XML pull out the method

624
00:26:27,240 --> 00:26:32,340
and then use reflection to invoke it so

625
00:26:29,910 --> 00:26:35,130
it's like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> great way to get some code</font>

626
00:26:32,340 --> 00:26:36,689
running on the server just<font color="#E5E5E5"> by hitting an</font>

627
00:26:35,130 --> 00:26:42,660
X amount you're sending an XML document

628
00:26:36,690 --> 00:26:44,640
to a web service so parsers are powerful

629
00:26:42,660 --> 00:26:46,110
and developers use them without really

630
00:26:44,640 --> 00:26:48,890
thinking<font color="#E5E5E5"> about all the ways that they</font>

631
00:26:46,110 --> 00:26:48,889
might be abused

632
00:26:51,250 --> 00:26:56,350
oh yeah<font color="#E5E5E5"> and then the last problem this</font>

633
00:26:53,350 --> 00:26:58,990
<font color="#CCCCCC">is interesting is you actually</font><font color="#E5E5E5"> don't</font>

634
00:26:56,350 --> 00:27:00,520
know what parser is actually going<font color="#E5E5E5"> to be</font>

635
00:26:58,990 --> 00:27:02,770
used like the implementation<font color="#E5E5E5"> of that</font>

636
00:27:00,520 --> 00:27:06,040
parser so developers can write their

637
00:27:02,770 --> 00:27:08,200
code to a certain API like<font color="#CCCCCC"> Jack's p for</font>

638
00:27:06,040 --> 00:27:11,170
instance is the Java API for XML

639
00:27:08,200 --> 00:27:13,000
processing the developers just write

640
00:27:11,170 --> 00:27:14,590
their code to<font color="#CCCCCC"> jack's p and then they can</font>

641
00:27:13,000 --> 00:27:16,960
deploy it wherever they want and it just

642
00:27:14,590 --> 00:27:19,360
works but it turns out they don't know

643
00:27:16,960 --> 00:27:23,320
what XML parser is actually going to<font color="#E5E5E5"> be</font>

644
00:27:19,360 --> 00:27:26,409
used under the hood<font color="#CCCCCC"> so there's a there's</font>

645
00:27:23,320 --> 00:27:29,050
actually a sort of a hierarchy a search

646
00:27:26,410 --> 00:27:31,060
strategy for finding what parser to use

647
00:27:29,050 --> 00:27:33,639
it says first you look at a system

648
00:27:31,060 --> 00:27:35,860
property to see which if that's defined

649
00:27:33,640 --> 00:27:38,260
then it checked this properties file if

650
00:27:35,860 --> 00:27:43,689
that's<font color="#E5E5E5"> there in Java home somewhere then</font>

651
00:27:38,260 --> 00:27:45,400
it uses this meta f thing and then this

652
00:27:43,690 --> 00:27:47,230
last thing is it's<font color="#E5E5E5"> got some fall back</font>

653
00:27:45,400 --> 00:27:48,760
default platform implementation which

654
00:27:47,230 --> 00:27:50,590
<font color="#E5E5E5">I'm guessing nine times out of</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> is</font>

655
00:27:48,760 --> 00:27:52,600
where this thing ends up because

656
00:27:50,590 --> 00:27:53,709
nobody's probably specified it so this

657
00:27:52,600 --> 00:27:56,409
<font color="#CCCCCC">is a real problem if you're</font><font color="#E5E5E5"> trying to do</font>

658
00:27:53,710 --> 00:27:59,710
code analysis and you don't know what

659
00:27:56,410 --> 00:28:00,970
code is running until runtime now your

660
00:27:59,710 --> 00:28:05,650
static analysis tool isn't going to be

661
00:28:00,970 --> 00:28:08,320
<font color="#CCCCCC">able to analyze this okay so that's</font>

662
00:28:05,650 --> 00:28:11,170
that's a partial level next<font color="#E5E5E5"> level auto</font>

663
00:28:08,320 --> 00:28:14,560
binding a lot of the frameworks do this

664
00:28:11,170 --> 00:28:17,320
now is you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to call request</font>

665
00:28:14,560 --> 00:28:18,820
get parameter anymore a request get

666
00:28:17,320 --> 00:28:21,370
header or get cookie or anything all

667
00:28:18,820 --> 00:28:24,129
that stuff<font color="#E5E5E5"> is abstracted down into the</font>

668
00:28:21,370 --> 00:28:26,350
framework somewhere so this makes it

669
00:28:24,130 --> 00:28:28,630
<font color="#E5E5E5">really difficult for tools right they</font>

670
00:28:26,350 --> 00:28:31,060
can't do the<font color="#E5E5E5"> dataflow analysis if they</font>

671
00:28:28,630 --> 00:28:32,740
can't see the sources and the sinks well

672
00:28:31,060 --> 00:28:36,240
now the sources and sinks are buried<font color="#E5E5E5"> in</font>

673
00:28:32,740 --> 00:28:39,820
the frameworks so here's an example<font color="#CCCCCC"> of</font>

674
00:28:36,240 --> 00:28:43,690
some data coming in from a user request

675
00:28:39,820 --> 00:28:46,689
comes in the framework grabs the request

676
00:28:43,690 --> 00:28:49,150
parses the<font color="#E5E5E5"> XML automatically takes the</font>

677
00:28:46,690 --> 00:28:51,820
data<font color="#E5E5E5"> out of the XML and maps it into a</font>

678
00:28:49,150 --> 00:28:54,130
beam so here you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that the date</font>

679
00:28:51,820 --> 00:28:57,990
property and the SSN property are being

680
00:28:54,130 --> 00:29:01,840
set in this beam this<font color="#E5E5E5"> is interesting</font>

681
00:28:57,990 --> 00:29:03,070
this is a private member of<font color="#E5E5E5"> this you</font>

682
00:29:01,840 --> 00:29:05,709
know<font color="#CCCCCC"> that we've got this</font>

683
00:29:03,070 --> 00:29:07,889
customer class here and it's got a

684
00:29:05,710 --> 00:29:11,830
<font color="#E5E5E5">private member called account balance</font>

685
00:29:07,889 --> 00:29:13,178
that the developer probably didn't<font color="#CCCCCC"> think</font>

686
00:29:11,830 --> 00:29:17,460
was<font color="#E5E5E5"> going to get map because there's no</font>

687
00:29:13,179 --> 00:29:19,990
field over here called account balance

688
00:29:17,460 --> 00:29:23,440
but what we<font color="#CCCCCC"> found is in a lot of autumn</font>

689
00:29:19,990 --> 00:29:25,659
auto binding systems you can<font color="#CCCCCC"> just you</font>

690
00:29:23,440 --> 00:29:27,549
know you can fake that field in here as

691
00:29:25,659 --> 00:29:29,019
an attacker and the web data binder

692
00:29:27,549 --> 00:29:30,309
doesn't care it does<font color="#E5E5E5"> reflection on that</font>

693
00:29:29,019 --> 00:29:31,630
field and says oh<font color="#E5E5E5"> there's an account</font>

694
00:29:30,309 --> 00:29:33,549
balance field i'm just going to override

695
00:29:31,630 --> 00:29:35,080
<font color="#CCCCCC">it with the value and so then all</font><font color="#E5E5E5"> of a</font>

696
00:29:33,549 --> 00:29:36,668
sudden<font color="#CCCCCC"> the attacker is now setting this</font>

697
00:29:35,080 --> 00:29:40,899
private field which he<font color="#E5E5E5"> wasn't supposed</font>

698
00:29:36,669 --> 00:29:42,639
<font color="#E5E5E5">to have</font><font color="#CCCCCC"> access to so auto binding is a</font>

699
00:29:40,899 --> 00:29:46,299
big deal because it makes it harder for

700
00:29:42,639 --> 00:29:47,979
<font color="#CCCCCC">our</font><font color="#E5E5E5"> for automated security analysis</font>

701
00:29:46,299 --> 00:29:50,620
tools to understand what the code is

702
00:29:47,980 --> 00:29:52,179
<font color="#E5E5E5">doing you know it used to be pretty easy</font>

703
00:29:50,620 --> 00:29:54,189
<font color="#CCCCCC">you could</font><font color="#E5E5E5"> just look for the call to</font>

704
00:29:52,179 --> 00:29:56,620
where we got the untrusted data out of

705
00:29:54,190 --> 00:29:58,330
the HTTP<font color="#E5E5E5"> request directly but now it's</font>

706
00:29:56,620 --> 00:29:59,649
going<font color="#E5E5E5"> through layers and layers of stuff</font>

707
00:29:58,330 --> 00:30:01,299
which means we have to understand all

708
00:29:59,649 --> 00:30:02,918
these frameworks if we want to

709
00:30:01,299 --> 00:30:09,220
understand how to find these

710
00:30:02,919 --> 00:30:11,139
vulnerabilities so real quick what do

711
00:30:09,220 --> 00:30:13,450
<font color="#E5E5E5">you think happens if you take a bunch of</font>

712
00:30:11,139 --> 00:30:18,070
source code and feed it into a static

713
00:30:13,450 --> 00:30:19,629
analysis tool that you know so<font color="#CCCCCC"> that so</font>

714
00:30:18,070 --> 00:30:22,570
<font color="#E5E5E5">there's web service code with you know</font>

715
00:30:19,629 --> 00:30:24,428
complicated parsers and complicated data

716
00:30:22,570 --> 00:30:30,639
binding and so on what do you think the

717
00:30:24,429 --> 00:30:33,610
static analysis tool does it runs for

718
00:30:30,639 --> 00:30:35,740
five hours that's right and then it

719
00:30:33,610 --> 00:30:37,120
generates a report right it's going<font color="#E5E5E5"> to</font>

720
00:30:35,740 --> 00:30:39,009
spit out something it's going to say hey

721
00:30:37,120 --> 00:30:42,309
you<font color="#E5E5E5"> use system out print line here and</font>

722
00:30:39,009 --> 00:30:46,690
there<font color="#CCCCCC"> but is it going to tell you that</font>

723
00:30:42,309 --> 00:30:48,610
it missed stuff this is the danger right

724
00:30:46,690 --> 00:30:50,769
people have a false sense of security in

725
00:30:48,610 --> 00:30:52,809
these tools because they don't know<font color="#E5E5E5"> what</font>

726
00:30:50,769 --> 00:30:54,100
they're missing so I really<font color="#E5E5E5"> want you to</font>

727
00:30:52,809 --> 00:30:56,259
<font color="#E5E5E5">think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this because people you know</font>

728
00:30:54,100 --> 00:30:58,090
there's<font color="#E5E5E5"> there's companies that are just</font>

729
00:30:56,259 --> 00:30:59,200
you know they're taking all their code

730
00:30:58,090 --> 00:31:01,120
they're running it<font color="#E5E5E5"> through their process</font>

731
00:30:59,200 --> 00:31:02,649
and they're running through static

732
00:31:01,120 --> 00:31:04,449
analysis but they don't realize<font color="#CCCCCC"> that</font>

733
00:31:02,649 --> 00:31:09,489
it's got<font color="#E5E5E5"> these major gas particularly</font>

734
00:31:04,450 --> 00:31:13,090
where api's are involved<font color="#CCCCCC"> okay so I</font><font color="#E5E5E5"> want</font>

735
00:31:09,490 --> 00:31:14,020
<font color="#CCCCCC">to go through six differences with you</font>

736
00:31:13,090 --> 00:31:16,870
know from from

737
00:31:14,020 --> 00:31:19,590
traditional web applications to web

738
00:31:16,870 --> 00:31:21,580
services so the first thing is

739
00:31:19,590 --> 00:31:23,139
communications and we'll go sort of

740
00:31:21,580 --> 00:31:25,090
right on down<font color="#E5E5E5"> I'll give some examples of</font>

741
00:31:23,140 --> 00:31:27,640
this so we talked a little bit about

742
00:31:25,090 --> 00:31:33,159
custom communications<font color="#E5E5E5"> I think this makes</font>

743
00:31:27,640 --> 00:31:36,010
it easier for static and I<font color="#CCCCCC"> asked tools</font>

744
00:31:33,160 --> 00:31:38,140
to analyze services because they have

745
00:31:36,010 --> 00:31:39,910
access to the code they don't have to

746
00:31:38,140 --> 00:31:42,520
break into these custom protocols and

747
00:31:39,910 --> 00:31:44,440
reverse-engineer them so this<font color="#E5E5E5"> is you</font>

748
00:31:42,520 --> 00:31:46,270
know there<font color="#E5E5E5"> are some advantages here try</font>

749
00:31:44,440 --> 00:31:49,750
to stick the standards when you're

750
00:31:46,270 --> 00:31:51,580
<font color="#E5E5E5">looking at at building web services</font>

751
00:31:49,750 --> 00:31:57,900
because<font color="#CCCCCC"> that'll make</font><font color="#E5E5E5"> it much easier to</font>

752
00:31:51,580 --> 00:32:01,330
<font color="#CCCCCC">intercept and test second difference is</font>

753
00:31:57,900 --> 00:32:03,940
specifications we never had a spec for a

754
00:32:01,330 --> 00:32:05,139
web application right you just<font color="#E5E5E5"> build a</font>

755
00:32:03,940 --> 00:32:08,730
web application with a bunch of you I

756
00:32:05,140 --> 00:32:11,620
and developers are adding fields and and

757
00:32:08,730 --> 00:32:14,340
form fields and processing and<font color="#E5E5E5"> so on and</font>

758
00:32:11,620 --> 00:32:17,229
there's never really a spec level but

759
00:32:14,340 --> 00:32:19,419
API is often have a spec right and it

760
00:32:17,230 --> 00:32:23,110
started way back with like<font color="#CCCCCC"> rmi and korba</font>

761
00:32:19,420 --> 00:32:26,020
and stuff like that<font color="#CCCCCC"> but</font><font color="#E5E5E5"> now you know for</font>

762
00:32:23,110 --> 00:32:28,719
web services you'll see<font color="#E5E5E5"> wiz Dalls for</font>

763
00:32:26,020 --> 00:32:31,120
and you might see xml might have a DTD

764
00:32:28,720 --> 00:32:34,090
associated with it anybody<font color="#E5E5E5"> using swagger</font>

765
00:32:31,120 --> 00:32:35,409
a couple<font color="#CCCCCC"> people this is really</font><font color="#E5E5E5"> close</font>

766
00:32:34,090 --> 00:32:39,820
stuff i'ma show you example in the next

767
00:32:35,410 --> 00:32:42,340
page but<font color="#E5E5E5"> the idea of having a spec for</font>

768
00:32:39,820 --> 00:32:43,780
an API should make it easier for tools

769
00:32:42,340 --> 00:32:47,260
right this is actually<font color="#E5E5E5"> something that's</font>

770
00:32:43,780 --> 00:32:48,760
good I'm not all bad<font color="#CCCCCC"> news this is</font>

771
00:32:47,260 --> 00:32:50,590
<font color="#E5E5E5">something that's good</font><font color="#CCCCCC"> for tools because</font>

772
00:32:48,760 --> 00:32:53,410
now we could in theory we could<font color="#E5E5E5"> give our</font>

773
00:32:50,590 --> 00:32:56,530
tool the spec for the API and now it can

774
00:32:53,410 --> 00:32:58,120
automatically test it right so there's

775
00:32:56,530 --> 00:33:00,430
two ways<font color="#CCCCCC"> that people use these specs</font>

776
00:32:58,120 --> 00:33:03,399
that I've seen one is you write the spec

777
00:33:00,430 --> 00:33:06,430
first and you generate the API from the

778
00:33:03,400 --> 00:33:08,350
spec which that sounds good right the

779
00:33:06,430 --> 00:33:10,210
other way is you<font color="#CCCCCC"> actually build</font><font color="#E5E5E5"> the API</font>

780
00:33:08,350 --> 00:33:12,790
first and then you're like<font color="#E5E5E5"> oh crap we</font>

781
00:33:10,210 --> 00:33:15,070
need some documentation so your reverse

782
00:33:12,790 --> 00:33:17,649
engineer the spec from the API and then

783
00:33:15,070 --> 00:33:19,300
you publish that right good news<font color="#CCCCCC"> is it</font>

784
00:33:17,650 --> 00:33:22,690
doesn't really matter because from a

785
00:33:19,300 --> 00:33:25,930
security perspective you can use that

786
00:33:22,690 --> 00:33:28,160
interface to test the API and verify

787
00:33:25,930 --> 00:33:30,380
that it's<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> the right stuff and</font>

788
00:33:28,160 --> 00:33:32,890
actually if you<font color="#E5E5E5"> spend time verifying</font>

789
00:33:30,380 --> 00:33:35,030
even if you just verified the spec as

790
00:33:32,890 --> 00:33:38,570
long<font color="#CCCCCC"> as you have confidence that the</font>

791
00:33:35,030 --> 00:33:41,899
spec is actually has good traceability

792
00:33:38,570 --> 00:33:43,669
to the actual implementation then you

793
00:33:41,900 --> 00:33:46,040
can get some assurance simply by

794
00:33:43,670 --> 00:33:48,080
analyzing<font color="#CCCCCC"> the spec so we need better</font>

795
00:33:46,040 --> 00:33:50,389
tools there and if you're if you're

796
00:33:48,080 --> 00:33:53,090
looking to make a name for yourself I

797
00:33:50,390 --> 00:33:56,450
think building some tools to<font color="#CCCCCC"> analyze the</font>

798
00:33:53,090 --> 00:33:58,340
security of say a swagger spec and I've

799
00:33:56,450 --> 00:34:00,170
got an example<font color="#CCCCCC"> of one of those here this</font>

800
00:33:58,340 --> 00:34:02,030
is a little<font color="#E5E5E5"> chunk of swagger but you</font>

801
00:34:00,170 --> 00:34:04,760
know build us build a tool that analyzes

802
00:34:02,030 --> 00:34:06,680
this and gives people security guidance

803
00:34:04,760 --> 00:34:09,530
on how to beef up the security of their

804
00:34:06,680 --> 00:34:11,389
spec<font color="#E5E5E5"> that would be really cool and we</font>

805
00:34:09,530 --> 00:34:14,030
need those tools for all different<font color="#E5E5E5"> kinds</font>

806
00:34:11,389 --> 00:34:15,259
of of these specs so swagger is kind of

807
00:34:14,030 --> 00:34:17,030
neat because<font color="#E5E5E5"> it actually does have some</font>

808
00:34:15,260 --> 00:34:20,810
<font color="#E5E5E5">security stuff in it right you can</font>

809
00:34:17,030 --> 00:34:22,550
<font color="#E5E5E5">specify you know the HTTP method you can</font>

810
00:34:20,810 --> 00:34:25,940
specify authentication and authorization

811
00:34:22,550 --> 00:34:28,850
stuff and even things about the

812
00:34:25,940 --> 00:34:31,610
different parameters to the<font color="#E5E5E5"> API now what</font>

813
00:34:28,850 --> 00:34:34,219
I<font color="#CCCCCC"> have seen and this is</font><font color="#E5E5E5"> over a long</font>

814
00:34:31,610 --> 00:34:35,870
history of looking at web services I see

815
00:34:34,219 --> 00:34:38,899
that most of these specs are garbage

816
00:34:35,870 --> 00:34:41,389
I've<font color="#E5E5E5"> seen a lot of excess DS the XML</font>

817
00:34:38,900 --> 00:34:44,900
schemas where every field is defined as

818
00:34:41,389 --> 00:34:47,270
excess<font color="#CCCCCC"> D string does</font><font color="#E5E5E5"> really stop any</font>

819
00:34:44,900 --> 00:34:49,429
attacks if you can allow any string into

820
00:34:47,270 --> 00:34:52,340
that API so I want<font color="#E5E5E5"> you to be careful</font>

821
00:34:49,429 --> 00:34:54,710
about the this trusting these schemas

822
00:34:52,340 --> 00:34:57,290
and you can't just say oh well it went

823
00:34:54,710 --> 00:34:59,690
through you<font color="#CCCCCC"> know x SD validation so we</font>

824
00:34:57,290 --> 00:35:04,600
can trust it because really they really

825
00:34:59,690 --> 00:35:08,750
<font color="#CCCCCC">are almost all that way next thing is</font>

826
00:35:04,600 --> 00:35:10,790
control flow so control flow analysis is

827
00:35:08,750 --> 00:35:14,390
pretty important see what code executes

828
00:35:10,790 --> 00:35:16,160
sin what order and the problem with API

829
00:35:14,390 --> 00:35:20,720
is is that<font color="#E5E5E5"> it's really difficult to tell</font>

830
00:35:16,160 --> 00:35:22,879
what code is<font color="#CCCCCC"> actually running there's</font>

831
00:35:20,720 --> 00:35:24,890
lots<font color="#E5E5E5"> of libraries involved a lot of this</font>

832
00:35:22,880 --> 00:35:28,310
<font color="#E5E5E5">is assembled at runtime so you can't</font>

833
00:35:24,890 --> 00:35:33,440
really count on what's there at compile

834
00:35:28,310 --> 00:35:35,060
time and you'll see a lot<font color="#E5E5E5"> of inversion</font>

835
00:35:33,440 --> 00:35:37,010
of control and reflection and

836
00:35:35,060 --> 00:35:38,960
dynamically loaded code which causes

837
00:35:37,010 --> 00:35:41,540
real problems for some kinds of tools

838
00:35:38,960 --> 00:35:42,260
now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> one weird ask tools don't</font>

839
00:35:41,540 --> 00:35:44,540
care

840
00:35:42,260 --> 00:35:46,220
they're just scanning the external part

841
00:35:44,540 --> 00:35:47,779
of the API and whatever is running in

842
00:35:46,220 --> 00:35:49,459
production they're going to<font color="#E5E5E5"> that's what</font>

843
00:35:47,780 --> 00:35:51,290
they're going to test same thing<font color="#E5E5E5"> with I</font>

844
00:35:49,460 --> 00:35:53,900
asus is going to see just what code is

845
00:35:51,290 --> 00:35:58,250
running in production and analyze that

846
00:35:53,900 --> 00:36:00,530
data flow we've talked about this<font color="#CCCCCC"> a</font>

847
00:35:58,250 --> 00:36:02,510
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> I mentioned that the sources</font>

848
00:36:00,530 --> 00:36:04,780
and sinks and propagators are now sort

849
00:36:02,510 --> 00:36:08,420
<font color="#E5E5E5">of deep in these libraries this is just</font>

850
00:36:04,780 --> 00:36:10,610
complexity for different kinds<font color="#CCCCCC"> of tools</font>

851
00:36:08,420 --> 00:36:13,310
<font color="#E5E5E5">i think i asked has a good shot on this</font>

852
00:36:10,610 --> 00:36:15,590
<font color="#E5E5E5">one I think of the different tools data</font>

853
00:36:13,310 --> 00:36:18,049
<font color="#E5E5E5">flow analysis in I asked is really</font>

854
00:36:15,590 --> 00:36:19,880
accurate because it's actually watching

855
00:36:18,050 --> 00:36:22,100
the actual data flow through the

856
00:36:19,880 --> 00:36:23,570
application so it's<font color="#E5E5E5"> not like you know</font>

857
00:36:22,100 --> 00:36:24,940
like<font color="#E5E5E5"> a static tool has to build a model</font>

858
00:36:23,570 --> 00:36:27,590
of<font color="#E5E5E5"> the application and then</font>

859
00:36:24,940 --> 00:36:29,630
mathematically try to prove what data is

860
00:36:27,590 --> 00:36:33,220
flowing where this is<font color="#E5E5E5"> just actually</font>

861
00:36:29,630 --> 00:36:36,020
watching the actual data flow

862
00:36:33,220 --> 00:36:39,560
authentication and authorization is

863
00:36:36,020 --> 00:36:40,700
almost always custom in applications I

864
00:36:39,560 --> 00:36:42,529
wish there were more standards around

865
00:36:40,700 --> 00:36:46,490
this but<font color="#E5E5E5"> this makes it really hard to</font>

866
00:36:42,530 --> 00:36:48,560
test them so no matter what no matter

867
00:36:46,490 --> 00:36:49,970
what technology are using you're going

868
00:36:48,560 --> 00:36:52,700
to probably have to build some custom

869
00:36:49,970 --> 00:36:59,509
rules to check your authentication and

870
00:36:52,700 --> 00:37:02,660
authorization rules and then the<font color="#E5E5E5"> last</font>

871
00:36:59,510 --> 00:37:04,910
one<font color="#E5E5E5"> is called futures and promises</font>

872
00:37:02,660 --> 00:37:07,940
anybody familiar with futures and

873
00:37:04,910 --> 00:37:11,270
promises couple developers in here<font color="#E5E5E5"> okay</font>

874
00:37:07,940 --> 00:37:13,550
so this is a relatively<font color="#CCCCCC"> new programming</font>

875
00:37:11,270 --> 00:37:16,100
construct<font color="#E5E5E5"> it's new to java and other</font>

876
00:37:13,550 --> 00:37:19,100
<font color="#E5E5E5">languages but the idea is you can create</font>

877
00:37:16,100 --> 00:37:20,810
a task to execute and then get the

878
00:37:19,100 --> 00:37:23,120
results from<font color="#CCCCCC"> that some</font><font color="#E5E5E5"> point in the</font>

879
00:37:20,810 --> 00:37:25,220
future you might think of it as a

880
00:37:23,120 --> 00:37:27,799
promise to execute something<font color="#E5E5E5"> but it's a</font>

881
00:37:25,220 --> 00:37:29,419
concurrency scheme so in this diagram

882
00:37:27,800 --> 00:37:31,310
you can see the<font color="#E5E5E5"> old way we would had to</font>

883
00:37:29,420 --> 00:37:33,410
build one of these services is we would

884
00:37:31,310 --> 00:37:35,060
<font color="#E5E5E5">say hey you guys probably can't read</font>

885
00:37:33,410 --> 00:37:38,089
that just go get the customer details

886
00:37:35,060 --> 00:37:40,610
and<font color="#E5E5E5"> that takes you know 150 milliseconds</font>

887
00:37:38,090 --> 00:37:42,710
then<font color="#E5E5E5"> get a list of recommended</font>

888
00:37:40,610 --> 00:37:44,180
destinations that's 200 milliseconds

889
00:37:42,710 --> 00:37:46,790
then iterate through each<font color="#E5E5E5"> of those</font>

890
00:37:44,180 --> 00:37:48,049
destinations and get a quote and then

891
00:37:46,790 --> 00:37:49,430
iterate through each one<font color="#CCCCCC"> of those</font><font color="#E5E5E5"> and</font>

892
00:37:48,050 --> 00:37:50,960
get the weather for each one of<font color="#E5E5E5"> those</font>

893
00:37:49,430 --> 00:37:53,750
when<font color="#CCCCCC"> we add it all up it's like five</font>

894
00:37:50,960 --> 00:37:56,120
seconds worth of work but with futures

895
00:37:53,750 --> 00:37:58,010
you can actually thread that so

896
00:37:56,120 --> 00:38:00,620
you do this one step where you get a

897
00:37:58,010 --> 00:38:02,960
list of the destinations that still

898
00:38:00,620 --> 00:38:05,480
takes 250 milliseconds but<font color="#E5E5E5"> then you can</font>

899
00:38:02,960 --> 00:38:08,150
spin up all these these futures to go

900
00:38:05,480 --> 00:38:09,920
run these in parallel<font color="#E5E5E5"> and so you end up</font>

901
00:38:08,150 --> 00:38:12,860
the whole<font color="#CCCCCC"> thing just takes as long as</font>

902
00:38:09,920 --> 00:38:15,740
the longest one so you cut your time

903
00:38:12,860 --> 00:38:17,690
down to 730 milliseconds overall and the

904
00:38:15,740 --> 00:38:19,459
only<font color="#E5E5E5"> reason I mentioned this is because</font>

905
00:38:17,690 --> 00:38:22,340
it really makes things difficult for

906
00:38:19,460 --> 00:38:24,560
automated tools if you've<font color="#E5E5E5"> got all this</font>

907
00:38:22,340 --> 00:38:26,570
concurrent code running all the time so

908
00:38:24,560 --> 00:38:28,370
your static analysis<font color="#E5E5E5"> tool now doesn't</font>

909
00:38:26,570 --> 00:38:30,020
have<font color="#E5E5E5"> to just build this one linear model</font>

910
00:38:28,370 --> 00:38:32,000
now it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> build a model with all</font>

911
00:38:30,020 --> 00:38:33,590
these concurrent things executing at the

912
00:38:32,000 --> 00:38:37,460
same time<font color="#CCCCCC"> makes it much much more</font>

913
00:38:33,590 --> 00:38:39,050
difficult to<font color="#CCCCCC"> analyze and a bunch of the</font>

914
00:38:37,460 --> 00:38:41,570
new frameworks do this automatically

915
00:38:39,050 --> 00:38:43,250
like Nettie and play and grizzly you

916
00:38:41,570 --> 00:38:46,190
know some of the most high performance

917
00:38:43,250 --> 00:38:51,440
<font color="#E5E5E5">API environments are really doubling</font>

918
00:38:46,190 --> 00:38:53,870
down on this strategy<font color="#CCCCCC"> okay so that's six</font>

919
00:38:51,440 --> 00:38:57,080
difference is what I want to<font color="#E5E5E5"> get</font><font color="#CCCCCC"> to is</font>

920
00:38:53,870 --> 00:39:00,259
<font color="#CCCCCC">okay so great it's complicated</font><font color="#E5E5E5"> what do i</font>

921
00:38:57,080 --> 00:39:01,700
do to<font color="#E5E5E5"> take my expected security model</font>

922
00:39:00,260 --> 00:39:04,730
<font color="#E5E5E5">this is like you might call the security</font>

923
00:39:01,700 --> 00:39:05,870
requirements or policy or if you're if

924
00:39:04,730 --> 00:39:09,770
you're<font color="#E5E5E5"> really good you call it test</font>

925
00:39:05,870 --> 00:39:11,779
cases and how do we match up different

926
00:39:09,770 --> 00:39:13,430
tools to the<font color="#E5E5E5"> different things in my</font>

927
00:39:11,780 --> 00:39:15,350
expected security model right how do we

928
00:39:13,430 --> 00:39:17,870
choose which thing we're<font color="#E5E5E5"> going to use to</font>

929
00:39:15,350 --> 00:39:19,850
verify each one of these things and and

930
00:39:17,870 --> 00:39:22,310
again this is how you should<font color="#CCCCCC"> think about</font>

931
00:39:19,850 --> 00:39:26,779
security is don't think about did I run

932
00:39:22,310 --> 00:39:29,029
to Lex on the on that<font color="#CCCCCC"> application think</font>

933
00:39:26,780 --> 00:39:31,430
about how much coverage do<font color="#E5E5E5"> I have over</font>

934
00:39:29,030 --> 00:39:33,470
my expected security model the security

935
00:39:31,430 --> 00:39:35,779
of the defense's that I expect this

936
00:39:33,470 --> 00:39:39,890
application to have because this is what

937
00:39:35,780 --> 00:39:41,690
you're being measured against so there's

938
00:39:39,890 --> 00:39:43,069
<font color="#E5E5E5">not a great way to choose this because</font>

939
00:39:41,690 --> 00:39:45,770
nobody knows what any of these tools

940
00:39:43,070 --> 00:39:47,090
actually do right there's some rules

941
00:39:45,770 --> 00:39:48,950
that in there that<font color="#CCCCCC"> says well I cover</font>

942
00:39:47,090 --> 00:39:50,720
sequel injection well what does that

943
00:39:48,950 --> 00:39:53,020
really mean do they cover all the

944
00:39:50,720 --> 00:39:55,490
different variants<font color="#E5E5E5"> of sequel injection</font>

945
00:39:53,020 --> 00:39:59,150
do they handle all the different types

946
00:39:55,490 --> 00:40:01,490
of data flow that could lead to<font color="#CCCCCC"> a sequel</font>

947
00:39:59,150 --> 00:40:02,270
injection they don't advertise it

948
00:40:01,490 --> 00:40:04,490
certainly not<font color="#E5E5E5"> in their marketing</font>

949
00:40:02,270 --> 00:40:07,259
<font color="#E5E5E5">material they just say we do the</font><font color="#CCCCCC"> OS top</font>

950
00:40:04,490 --> 00:40:11,430
<font color="#E5E5E5">10 so</font>

951
00:40:07,260 --> 00:40:15,120
<font color="#CCCCCC">oh us comes to the rescue earlier like</font>

952
00:40:11,430 --> 00:40:16,799
very early this<font color="#CCCCCC"> year some guy started a</font>

953
00:40:15,120 --> 00:40:21,839
new project called OS benchmark project

954
00:40:16,800 --> 00:40:24,510
and they're building an extensive test

955
00:40:21,840 --> 00:40:26,250
suite to test application security tools

956
00:40:24,510 --> 00:40:28,800
to see what they actually do and what

957
00:40:26,250 --> 00:40:31,380
they don't do and what's you know I've

958
00:40:28,800 --> 00:40:32,880
watched this project evolved it occurs

959
00:40:31,380 --> 00:40:35,130
to me<font color="#E5E5E5"> that this is the only way you're</font>

960
00:40:32,880 --> 00:40:37,560
ever<font color="#E5E5E5"> going to know what these tools</font>

961
00:40:35,130 --> 00:40:41,190
actually do well you got to test them

962
00:40:37,560 --> 00:40:42,960
and so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually really good</font>

963
00:40:41,190 --> 00:40:44,790
science it's all on github so you can

964
00:40:42,960 --> 00:40:46,740
pull it down and look at<font color="#E5E5E5"> all the test</font>

965
00:40:44,790 --> 00:40:51,870
cases it's totally reproducible anybody

966
00:40:46,740 --> 00:40:55,319
can run it and let<font color="#CCCCCC"> me show you a little</font>

967
00:40:51,870 --> 00:41:00,390
<font color="#CCCCCC">bit how this works so they built over</font>

968
00:40:55,320 --> 00:41:03,450
21,000 test cases and for<font color="#E5E5E5"> each of these</font>

969
00:41:00,390 --> 00:41:05,040
categories and in each one they've got a

970
00:41:03,450 --> 00:41:07,620
bunch of true positives and a bunch of

971
00:41:05,040 --> 00:41:09,360
false positives because they're really

972
00:41:07,620 --> 00:41:11,790
trying to test exactly what the tools

973
00:41:09,360 --> 00:41:13,890
are good at<font color="#E5E5E5"> and it's across these 11</font>

974
00:41:11,790 --> 00:41:16,529
categories when I look at these test

975
00:41:13,890 --> 00:41:18,629
cases it's<font color="#E5E5E5"> the easy stuff there's</font>

976
00:41:16,530 --> 00:41:20,580
<font color="#CCCCCC">nothing really complicated here this is</font>

977
00:41:18,630 --> 00:41:23,640
what they've built so far as primarily

978
00:41:20,580 --> 00:41:26,279
you know standard servlets with you know

979
00:41:23,640 --> 00:41:28,470
standard kinds of sequel injection flaws

980
00:41:26,280 --> 00:41:31,140
and XSS flaws and all these<font color="#E5E5E5"> different</font>

981
00:41:28,470 --> 00:41:32,970
kinds<font color="#E5E5E5"> of flaws nothing surprising or</font>

982
00:41:31,140 --> 00:41:34,259
complicated here you know<font color="#E5E5E5"> not a lot of</font>

983
00:41:32,970 --> 00:41:36,720
<font color="#E5E5E5">frameworks and stuff we'll talk about</font>

984
00:41:34,260 --> 00:41:41,070
that in just a second but<font color="#CCCCCC"> this is the</font>

985
00:41:36,720 --> 00:41:42,810
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> stuff that tools should ace so</font>

986
00:41:41,070 --> 00:41:45,330
here's what<font color="#E5E5E5"> you can do if</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to</font>

987
00:41:42,810 --> 00:41:48,750
try<font color="#CCCCCC"> it you can clone the github</font>

988
00:41:45,330 --> 00:41:51,270
repository if you've<font color="#CCCCCC"> got access to one</font>

989
00:41:48,750 --> 00:41:53,160
of these static<font color="#E5E5E5"> analysis tools you can</font>

990
00:41:51,270 --> 00:41:55,560
just point it at the directory and run

991
00:41:53,160 --> 00:41:57,779
the static analysis tool if you've<font color="#E5E5E5"> got a</font>

992
00:41:55,560 --> 00:41:59,940
dash tool you can actually<font color="#E5E5E5"> run the test</font>

993
00:41:57,780 --> 00:42:02,640
suite as an application<font color="#CCCCCC"> and point your</font>

994
00:41:59,940 --> 00:42:04,500
scanner at it and let<font color="#E5E5E5"> it scan it and if</font>

995
00:42:02,640 --> 00:42:06,180
you've got a nice tool you can use that

996
00:42:04,500 --> 00:42:09,060
along with the the running application

997
00:42:06,180 --> 00:42:11,910
as well<font color="#E5E5E5"> and then you take</font><font color="#CCCCCC"> the report</font>

998
00:42:09,060 --> 00:42:13,590
<font color="#E5E5E5">that comes out of your tool and you feed</font>

999
00:42:11,910 --> 00:42:15,990
it into this other thing<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> built</font>

1000
00:42:13,590 --> 00:42:17,760
called the score card generator which

1001
00:42:15,990 --> 00:42:20,879
takes the expected results for all the

1002
00:42:17,760 --> 00:42:22,559
test cases and comparsa

1003
00:42:20,880 --> 00:42:24,809
these reports<font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> feed in a</font>

1004
00:42:22,559 --> 00:42:26,849
fortify report or a<font color="#E5E5E5"> verra code report or</font>

1005
00:42:24,809 --> 00:42:28,410
whatever you feed it in it parses it it

1006
00:42:26,849 --> 00:42:30,690
does the math<font color="#CCCCCC"> and it creates these these</font>

1007
00:42:28,410 --> 00:42:32,160
cool scorecards that tell you exactly

1008
00:42:30,690 --> 00:42:36,059
what the tools are good at<font color="#E5E5E5"> and what</font>

1009
00:42:32,160 --> 00:42:37,440
they're not good at so here's a part of

1010
00:42:36,059 --> 00:42:39,140
the output there's also like a big table

1011
00:42:37,440 --> 00:42:41,700
full of data<font color="#E5E5E5"> that shows you all the</font>

1012
00:42:39,140 --> 00:42:44,339
<font color="#CCCCCC">numerix but they also produce this chart</font>

1013
00:42:41,700 --> 00:42:45,629
which I like and they report in this

1014
00:42:44,339 --> 00:42:47,910
format they say<font color="#CCCCCC"> hey here's</font><font color="#E5E5E5"> the false</font>

1015
00:42:45,630 --> 00:42:51,059
positive rate for the tool and here's

1016
00:42:47,910 --> 00:42:54,299
the true positive rate for the tool so a

1017
00:42:51,059 --> 00:42:56,279
tool down in<font color="#E5E5E5"> this corner is</font><font color="#CCCCCC"> not</font>

1018
00:42:54,299 --> 00:42:57,630
reporting anything right it's<font color="#E5E5E5"> not</font>

1019
00:42:56,279 --> 00:42:59,519
finding<font color="#E5E5E5"> the true positives it's not</font>

1020
00:42:57,630 --> 00:43:01,380
finding the false positive so that's the

1021
00:42:59,519 --> 00:43:02,910
tool that's obviously terrible what's

1022
00:43:01,380 --> 00:43:05,130
more interesting is up in<font color="#E5E5E5"> this corner</font>

1023
00:43:02,910 --> 00:43:08,098
this is a tool that reports all the true

1024
00:43:05,130 --> 00:43:10,680
positives great right but it's also

1025
00:43:08,099 --> 00:43:12,569
reporting all the false positives<font color="#E5E5E5"> so if</font>

1026
00:43:10,680 --> 00:43:14,308
you think<font color="#CCCCCC"> about it you can write a tool</font>

1027
00:43:12,569 --> 00:43:15,630
like that in a<font color="#CCCCCC"> couple hours right all</font>

1028
00:43:14,309 --> 00:43:18,029
you have to do is report every

1029
00:43:15,630 --> 00:43:20,700
vulnerability on every<font color="#E5E5E5"> line of code so</font>

1030
00:43:18,029 --> 00:43:23,279
there's no value there<font color="#CCCCCC"> to tools that do</font>

1031
00:43:20,700 --> 00:43:25,288
this it's<font color="#CCCCCC"> just noise and so they call</font>

1032
00:43:23,279 --> 00:43:27,690
this line the project<font color="#CCCCCC"> calls this line</font>

1033
00:43:25,289 --> 00:43:28,799
the random guess line and if you've got

1034
00:43:27,690 --> 00:43:30,660
to tow this you know in here it's

1035
00:43:28,799 --> 00:43:32,038
basically just flipping a coin and hey

1036
00:43:30,660 --> 00:43:35,308
should I report this vulnerability for

1037
00:43:32,039 --> 00:43:36,599
this test case or not you wouldn't

1038
00:43:35,309 --> 00:43:37,680
expect anything down in<font color="#E5E5E5"> this corner</font>

1039
00:43:36,599 --> 00:43:38,789
because that would<font color="#CCCCCC"> be sort</font><font color="#E5E5E5"> of worse than</font>

1040
00:43:37,680 --> 00:43:43,169
guessing and you should<font color="#E5E5E5"> just do the</font>

1041
00:43:38,789 --> 00:43:44,490
opposite of what that tool says um so I

1042
00:43:43,170 --> 00:43:46,589
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> point here this is</font>

1043
00:43:44,490 --> 00:43:50,129
really important is that every false

1044
00:43:46,589 --> 00:43:52,710
alarm costs you one true vulnerability

1045
00:43:50,130 --> 00:43:54,420
it costs you the<font color="#E5E5E5"> ability to protect your</font>

1046
00:43:52,710 --> 00:43:57,119
organization against one true

1047
00:43:54,420 --> 00:43:58,859
vulnerability because all of your

1048
00:43:57,119 --> 00:44:00,990
organization's our resource constrained

1049
00:43:58,859 --> 00:44:04,170
you don't have enough<font color="#CCCCCC"> people to go do</font>

1050
00:44:00,990 --> 00:44:06,328
all this work so if you spend<font color="#E5E5E5"> the time</font>

1051
00:44:04,170 --> 00:44:07,529
to check out you know when you<font color="#E5E5E5"> get the</font>

1052
00:44:06,329 --> 00:44:09,420
vulnerability don't know if it's a false

1053
00:44:07,529 --> 00:44:11,700
<font color="#E5E5E5">alarm or not right so when you get it</font>

1054
00:44:09,420 --> 00:44:13,680
you got to spend most of the time going

1055
00:44:11,700 --> 00:44:15,509
and investigating<font color="#CCCCCC"> it is it real how do i</font>

1056
00:44:13,680 --> 00:44:16,919
fix it let's check it<font color="#E5E5E5"> out and then</font><font color="#CCCCCC"> when</font>

1057
00:44:15,509 --> 00:44:19,259
you finally get there and you realize oh

1058
00:44:16,920 --> 00:44:21,089
it's<font color="#E5E5E5"> not a vulnerability then use wasted</font>

1059
00:44:19,259 --> 00:44:22,799
all that time so that that's<font color="#E5E5E5"> an</font>

1060
00:44:21,089 --> 00:44:24,058
opportunity cost it prevents you from

1061
00:44:22,799 --> 00:44:25,380
being able<font color="#E5E5E5"> to check out a real</font>

1062
00:44:24,059 --> 00:44:28,380
vulnerability and actually<font color="#E5E5E5"> make</font>

1063
00:44:25,380 --> 00:44:31,259
something<font color="#E5E5E5"> more secure so false alarms</font>

1064
00:44:28,380 --> 00:44:33,730
are really really important obviously

1065
00:44:31,259 --> 00:44:38,450
<font color="#E5E5E5">you want tools that are up in this upper</font>

1066
00:44:33,730 --> 00:44:40,790
<font color="#E5E5E5">left-hand corner so the results are</font>

1067
00:44:38,450 --> 00:44:43,730
fascinating<font color="#E5E5E5"> I strongly encourage you to</font>

1068
00:44:40,790 --> 00:44:46,579
look at the project OS won't publish the

1069
00:44:43,730 --> 00:44:48,650
results<font color="#E5E5E5"> unless commercial vendors say</font>

1070
00:44:46,579 --> 00:44:51,020
it's<font color="#E5E5E5"> okay to publish the results so</font>

1071
00:44:48,650 --> 00:44:53,839
you're going to<font color="#CCCCCC"> have to there's a few</font>

1072
00:44:51,020 --> 00:44:57,109
vendors like my company<font color="#E5E5E5"> that have</font>

1073
00:44:53,839 --> 00:44:58,849
published their results fortify also

1074
00:44:57,109 --> 00:45:04,009
published sort of published their

1075
00:44:58,849 --> 00:45:06,319
results but<font color="#E5E5E5"> you should run this with</font>

1076
00:45:04,010 --> 00:45:07,880
your tool and check out how it does

1077
00:45:06,319 --> 00:45:09,259
there's no other way<font color="#E5E5E5"> for you to get the</font>

1078
00:45:07,880 --> 00:45:10,490
results<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> this unfortunately it</font>

1079
00:45:09,260 --> 00:45:11,630
<font color="#E5E5E5">would be great if somebody just said you</font>

1080
00:45:10,490 --> 00:45:14,270
<font color="#CCCCCC">know we're going</font><font color="#E5E5E5"> to pull it all together</font>

1081
00:45:11,630 --> 00:45:17,059
and make a master list out<font color="#E5E5E5"> of it but the</font>

1082
00:45:14,270 --> 00:45:18,890
cool thing is some tools are really

1083
00:45:17,059 --> 00:45:21,520
amazing at certain things<font color="#E5E5E5"> you know they</font>

1084
00:45:18,890 --> 00:45:23,900
get perfect score on things like

1085
00:45:21,520 --> 00:45:27,400
insecure cookies or weak encryption

1086
00:45:23,900 --> 00:45:30,109
algorithm other tools have amazing

1087
00:45:27,400 --> 00:45:31,970
inexplicable weaknesses so there's one

1088
00:45:30,109 --> 00:45:34,520
major static analysis tool that doesn't

1089
00:45:31,970 --> 00:45:39,529
report xpath injection or LDAP injection

1090
00:45:34,520 --> 00:45:42,680
they just don't do it and I there's no

1091
00:45:39,530 --> 00:45:45,020
explanation<font color="#CCCCCC"> for it and this is</font>

1092
00:45:42,680 --> 00:45:47,569
interesting in almost every category the

1093
00:45:45,020 --> 00:45:51,109
the bests a stool dash tool and I<font color="#E5E5E5"> asked</font>

1094
00:45:47,569 --> 00:45:52,940
tool is different<font color="#E5E5E5"> okay so if there's not</font>

1095
00:45:51,109 --> 00:45:54,500
one tool that's just better across<font color="#E5E5E5"> the</font>

1096
00:45:52,940 --> 00:45:56,540
board on these<font color="#E5E5E5"> things in these</font>

1097
00:45:54,500 --> 00:46:00,349
categories you got to look to see<font color="#CCCCCC"> what</font>

1098
00:45:56,540 --> 00:46:03,369
these tools are good at the project<font color="#CCCCCC"> is</font>

1099
00:46:00,349 --> 00:46:05,960
working<font color="#E5E5E5"> it's already number of companies</font>

1100
00:46:03,369 --> 00:46:07,640
have come<font color="#CCCCCC"> out in support of the project</font>

1101
00:46:05,960 --> 00:46:09,619
<font color="#E5E5E5">and a bunch of tools have already</font>

1102
00:46:07,640 --> 00:46:12,440
improved their tools because of the

1103
00:46:09,619 --> 00:46:15,020
benchmark so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how o us improves</font>

1104
00:46:12,440 --> 00:46:16,700
the world we build this benchmark to

1105
00:46:15,020 --> 00:46:21,890
measure stuff so<font color="#CCCCCC"> that then people build</font>

1106
00:46:16,700 --> 00:46:26,868
tools that actually work so what we're

1107
00:46:21,890 --> 00:46:29,990
doing<font color="#E5E5E5"> contrast is donating</font><font color="#CCCCCC"> 1100 some new</font>

1108
00:46:26,869 --> 00:46:31,670
test cases to test<font color="#E5E5E5"> ap is so we built a</font>

1109
00:46:29,990 --> 00:46:33,919
test suite<font color="#E5E5E5"> that's got you know smaller</font>

1110
00:46:31,670 --> 00:46:36,160
numbers of test cases but we'll build

1111
00:46:33,920 --> 00:46:39,020
this out as we go forward but these are

1112
00:46:36,160 --> 00:46:40,549
api test cases rest api is and web

1113
00:46:39,020 --> 00:46:44,690
service API<font color="#E5E5E5"> is in and things like that</font>

1114
00:46:40,549 --> 00:46:47,910
so<font color="#E5E5E5"> it's you know 132,000 lines of code</font>

1115
00:46:44,690 --> 00:46:49,619
and the results are fascinating so I ran

1116
00:46:47,910 --> 00:46:51,180
I'm<font color="#E5E5E5"> not going to tell you the toast but</font>

1117
00:46:49,619 --> 00:46:54,240
I run<font color="#CCCCCC"> two of the major static</font><font color="#E5E5E5"> analysis</font>

1118
00:46:51,180 --> 00:46:55,740
tools against our test cases and here's

1119
00:46:54,240 --> 00:46:58,618
what<font color="#E5E5E5"> the test cases look like by the way</font>

1120
00:46:55,740 --> 00:47:00,598
this<font color="#CCCCCC"> is a simple example that does what</font>

1121
00:46:58,619 --> 00:47:02,700
is<font color="#E5E5E5"> it's a command injection okay so you</font>

1122
00:47:00,599 --> 00:47:05,190
<font color="#E5E5E5">can see here for a tool to find this</font>

1123
00:47:02,700 --> 00:47:07,078
they'd have<font color="#CCCCCC"> to know that</font><font color="#E5E5E5"> hey look here's</font>

1124
00:47:05,190 --> 00:47:10,140
this is a rest controller that we've got

1125
00:47:07,079 --> 00:47:12,150
a request mapping for this URL that this

1126
00:47:10,140 --> 00:47:15,058
is the request body is being parsed into

1127
00:47:12,150 --> 00:47:17,280
a person and then it has to<font color="#CCCCCC"> do the</font>

1128
00:47:15,059 --> 00:47:19,619
propagation here to pull the get name

1129
00:47:17,280 --> 00:47:21,089
into this pram and then trace that down

1130
00:47:19,619 --> 00:47:23,910
and see that hey this is being combined

1131
00:47:21,089 --> 00:47:25,650
into the runtime exec<font color="#E5E5E5"> okay so that's how</font>

1132
00:47:23,910 --> 00:47:26,970
you do<font color="#CCCCCC"> it manually but if you're a tool</font>

1133
00:47:25,650 --> 00:47:30,809
that's pretty tricky because<font color="#E5E5E5"> you've got</font>

1134
00:47:26,970 --> 00:47:34,770
to know all these annotations so the

1135
00:47:30,809 --> 00:47:37,230
<font color="#E5E5E5">first tool didn't do great you can see</font>

1136
00:47:34,770 --> 00:47:40,770
they did ok<font color="#E5E5E5"> against weak random numbers</font>

1137
00:47:37,230 --> 00:47:42,210
and weak encryption algorithms those

1138
00:47:40,770 --> 00:47:44,309
problems are you know like one line of

1139
00:47:42,210 --> 00:47:45,900
code kinds of problems so it's<font color="#E5E5E5"> not</font>

1140
00:47:44,309 --> 00:47:48,089
surprising that static analysis tools

1141
00:47:45,900 --> 00:47:49,950
did fairly well against that but he

1142
00:47:48,089 --> 00:47:52,140
looked down here you know all the rest

1143
00:47:49,950 --> 00:47:54,180
of<font color="#CCCCCC"> them there at zero or very close to</font>

1144
00:47:52,140 --> 00:47:56,848
<font color="#E5E5E5">zero so they didn't find a lot</font><font color="#CCCCCC"> of these</font>

1145
00:47:54,180 --> 00:47:59,190
vulnerabilities with you what's a is

1146
00:47:56,849 --> 00:48:01,289
command injection so they did<font color="#CCCCCC"> better at</font>

1147
00:47:59,190 --> 00:48:02,789
command injection in terms of finding

1148
00:48:01,289 --> 00:48:05,549
true positives but they also flagged

1149
00:48:02,789 --> 00:48:07,799
just as many false positives<font color="#CCCCCC"> okay so</font>

1150
00:48:05,549 --> 00:48:09,569
there on that random guess line so

1151
00:48:07,799 --> 00:48:13,288
that's<font color="#CCCCCC"> interesting they reported a total</font>

1152
00:48:09,569 --> 00:48:14,520
of three thousand vulnerabilities now

1153
00:48:13,289 --> 00:48:15,750
the next<font color="#E5E5E5"> tool and this is where it gets</font>

1154
00:48:14,520 --> 00:48:18,240
fascinating<font color="#E5E5E5"> right so I would have</font>

1155
00:48:15,750 --> 00:48:19,980
<font color="#E5E5E5">expected this because I didn't my thesis</font>

1156
00:48:18,240 --> 00:48:22,919
going into this research was that<font color="#E5E5E5"> these</font>

1157
00:48:19,980 --> 00:48:24,900
tools wouldn't do very well here but the

1158
00:48:22,920 --> 00:48:27,299
next one is fascinating so this is

1159
00:48:24,900 --> 00:48:28,799
<font color="#E5E5E5">another very popular static analysis</font>

1160
00:48:27,299 --> 00:48:31,410
tool and you can see the<font color="#E5E5E5"> results are</font>

1161
00:48:28,799 --> 00:48:33,750
almost exactly the<font color="#E5E5E5"> opposite so the first</font>

1162
00:48:31,410 --> 00:48:34,859
thing you'll notice is that they<font color="#CCCCCC"> are way</font>

1163
00:48:33,750 --> 00:48:36,930
up in<font color="#E5E5E5"> this corner they're not down here</font>

1164
00:48:34,859 --> 00:48:38,549
they're way up in this corner so they're

1165
00:48:36,930 --> 00:48:41,190
reporting everything whereas the other

1166
00:48:38,549 --> 00:48:45,270
tools reporting nothing interesting

1167
00:48:41,190 --> 00:48:47,250
strategy so they've got<font color="#E5E5E5"> you know this is</font>

1168
00:48:45,270 --> 00:48:49,170
command injection and ldap injection and

1169
00:48:47,250 --> 00:48:50,730
sequel injection all that stuff is up

1170
00:48:49,170 --> 00:48:54,270
here you<font color="#CCCCCC"> can see they did well on</font>

1171
00:48:50,730 --> 00:48:56,910
insecure cookies and and we<font color="#CCCCCC"> cash</font>

1172
00:48:54,270 --> 00:48:58,770
algorithm but<font color="#E5E5E5"> they didn't do well on</font>

1173
00:48:56,910 --> 00:49:01,009
weak encryption algorithm which is<font color="#E5E5E5"> just</font>

1174
00:48:58,770 --> 00:49:02,480
kind of weird um

1175
00:49:01,010 --> 00:49:06,670
and then down<font color="#E5E5E5"> here they didn't report</font>

1176
00:49:02,480 --> 00:49:08,990
week random numbers at all just strange

1177
00:49:06,670 --> 00:49:11,470
the worst thing about this though is

1178
00:49:08,990 --> 00:49:13,759
this<font color="#E5E5E5"> number right here anybody see this</font>

1179
00:49:11,470 --> 00:49:17,589
so remember<font color="#E5E5E5"> this is a hundred and thirty</font>

1180
00:49:13,760 --> 00:49:20,630
thousand lines of code they reported

1181
00:49:17,590 --> 00:49:23,630
560,000 vulnerabilities and the reason

1182
00:49:20,630 --> 00:49:25,520
is static<font color="#E5E5E5"> analysis tools look at all the</font>

1183
00:49:23,630 --> 00:49:27,950
paths to get to a particular

1184
00:49:25,520 --> 00:49:30,290
vulnerability and for some reason it

1185
00:49:27,950 --> 00:49:31,669
<font color="#CCCCCC">just threw up on this it must have</font>

1186
00:49:30,290 --> 00:49:35,680
thought there was like a zillion<font color="#E5E5E5"> paths</font>

1187
00:49:31,670 --> 00:49:37,820
to get to these vulnerabilities so

1188
00:49:35,680 --> 00:49:40,940
fascinating results and this is why I

1189
00:49:37,820 --> 00:49:42,650
say if you<font color="#E5E5E5"> want to use tools you've</font><font color="#CCCCCC"> got</font>

1190
00:49:40,940 --> 00:49:45,380
to know what they're good at and what

1191
00:49:42,650 --> 00:49:47,270
they're not good at because<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not</font>

1192
00:49:45,380 --> 00:49:50,200
intuitive and stuff<font color="#CCCCCC"> that I thought would</font>

1193
00:49:47,270 --> 00:49:55,130
have been a no-brainer tools don't do it

1194
00:49:50,200 --> 00:49:56,930
so we need help owasp needs help this

1195
00:49:55,130 --> 00:49:58,910
isn't this is important research this is

1196
00:49:56,930 --> 00:50:00,109
<font color="#E5E5E5">probably in my mind one of the most</font>

1197
00:49:58,910 --> 00:50:02,600
important things that else could

1198
00:50:00,110 --> 00:50:04,130
possibly do in terms of improving

1199
00:50:02,600 --> 00:50:08,000
software security for everybody because

1200
00:50:04,130 --> 00:50:09,710
it's driving a force multiplier right if

1201
00:50:08,000 --> 00:50:11,810
we<font color="#E5E5E5"> can affect the tools and make the</font>

1202
00:50:09,710 --> 00:50:13,730
tools better we affect zillions of

1203
00:50:11,810 --> 00:50:18,590
people in a way<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> know the OS top</font>

1204
00:50:13,730 --> 00:50:20,810
<font color="#E5E5E5">10 never can so we need better test</font>

1205
00:50:18,590 --> 00:50:22,550
cases more test cases to test all

1206
00:50:20,810 --> 00:50:24,350
different aspects it's just they're not

1207
00:50:22,550 --> 00:50:26,360
<font color="#E5E5E5">hard to write if you're interested in</font>

1208
00:50:24,350 --> 00:50:28,069
some obscure vulnerability<font color="#CCCCCC"> write some</font>

1209
00:50:26,360 --> 00:50:30,620
test cases and contribute them to the

1210
00:50:28,070 --> 00:50:31,520
benchmark project because then they'll

1211
00:50:30,620 --> 00:50:34,549
get picked up and you'll make a

1212
00:50:31,520 --> 00:50:36,860
difference the other thing is<font color="#CCCCCC"> I think we</font>

1213
00:50:34,550 --> 00:50:40,040
need<font color="#E5E5E5"> better guidance on api's to tell</font>

1214
00:50:36,860 --> 00:50:43,640
people how to build safe<font color="#E5E5E5"> api's how to</font>

1215
00:50:40,040 --> 00:50:45,590
test api's and how to use api's securely

1216
00:50:43,640 --> 00:50:48,560
and there's an awful lot<font color="#CCCCCC"> of work left to</font>

1217
00:50:45,590 --> 00:50:51,170
be done around this I i firmly believe

1218
00:50:48,560 --> 00:50:53,210
that the<font color="#CCCCCC"> API economy is the</font><font color="#E5E5E5"> future here</font>

1219
00:50:51,170 --> 00:50:54,470
so this is<font color="#E5E5E5"> really important work in a</font>

1220
00:50:53,210 --> 00:50:57,200
way that<font color="#CCCCCC"> you can make a difference and</font>

1221
00:50:54,470 --> 00:51:00,459
don't think it's too late because<font color="#E5E5E5"> you</font>

1222
00:50:57,200 --> 00:51:02,899
know I<font color="#E5E5E5"> wrote the AUSA top</font><font color="#CCCCCC"> 10 in 2002 and</font>

1223
00:51:00,460 --> 00:51:07,310
at the time I wrote<font color="#E5E5E5"> it I thought</font><font color="#CCCCCC"> it was</font>

1224
00:51:02,900 --> 00:51:10,820
too late<font color="#CCCCCC"> and it hasn't changed and how</font>

1225
00:51:07,310 --> 00:51:12,680
many 14 years<font color="#E5E5E5"> whatever that is so you</font>

1226
00:51:10,820 --> 00:51:14,190
know you can<font color="#E5E5E5"> make a big difference here</font>

1227
00:51:12,680 --> 00:51:17,669
is we<font color="#E5E5E5"> a long future I had</font>

1228
00:51:14,190 --> 00:51:19,920
um the<font color="#CCCCCC"> the test suite is randomly</font>

1229
00:51:17,670 --> 00:51:21,960
generated from a bunch of component so

1230
00:51:19,920 --> 00:51:23,610
like every six months or so<font color="#E5E5E5"> they're</font>

1231
00:51:21,960 --> 00:51:25,590
going<font color="#E5E5E5"> to just re randomized and put out</font>

1232
00:51:23,610 --> 00:51:29,340
a new version of the the suite with more

1233
00:51:25,590 --> 00:51:32,130
test cases and more stuff in it so that

1234
00:51:29,340 --> 00:51:34,620
should<font color="#CCCCCC"> help the other thing is</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

1235
00:51:32,130 --> 00:51:36,390
I think<font color="#CCCCCC"> there are things that</font><font color="#E5E5E5"> you could</font>

1236
00:51:34,620 --> 00:51:41,370
do<font color="#CCCCCC"> to the test suite to randomize it</font>

1237
00:51:36,390 --> 00:51:42,839
yourself a little<font color="#E5E5E5"> bit so that</font><font color="#CCCCCC"> top</font><font color="#E5E5E5"> riders</font>

1238
00:51:41,370 --> 00:51:44,069
can't just say oh I know what<font color="#CCCCCC"> the</font>

1239
00:51:42,840 --> 00:51:45,930
expected<font color="#E5E5E5"> results are like you could sort</font>

1240
00:51:44,070 --> 00:51:49,290
of shuffle the expected results and

1241
00:51:45,930 --> 00:51:50,730
shuffle the test cases so that you know

1242
00:51:49,290 --> 00:51:52,800
it's like giving every person a

1243
00:51:50,730 --> 00:51:54,300
different<font color="#E5E5E5"> version of the</font><font color="#CCCCCC"> test when you</font>

1244
00:51:52,800 --> 00:52:00,290
take a test in class to prevent cheating

1245
00:51:54,300 --> 00:52:00,290
good question<font color="#E5E5E5"> thanks</font>

