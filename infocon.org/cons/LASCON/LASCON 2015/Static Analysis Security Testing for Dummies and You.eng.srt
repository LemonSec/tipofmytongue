1
00:00:20,250 --> 00:00:24,850
thank you very<font color="#CCCCCC"> much</font>

2
00:00:22,619 --> 00:00:28,779
<font color="#E5E5E5">fortunately we're doing this during</font>

3
00:00:24,850 --> 00:00:32,470
<font color="#E5E5E5">lunch</font><font color="#CCCCCC"> so people will probably</font><font color="#E5E5E5"> come in</font>

4
00:00:28,779 --> 00:00:35,050
<font color="#CCCCCC">with food</font><font color="#E5E5E5"> that's awesome enjoy</font><font color="#CCCCCC"> it anyway</font>

5
00:00:32,470 --> 00:00:38,559
so static<font color="#E5E5E5"> analysis security testing for</font>

6
00:00:35,050 --> 00:00:41,830
dummies<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> the first thing is I</font>

7
00:00:38,559 --> 00:00:42,760
have way<font color="#E5E5E5"> too much content here</font><font color="#CCCCCC"> I started</font>

8
00:00:41,830 --> 00:00:44,620
to realize that<font color="#E5E5E5"> I was putting</font><font color="#CCCCCC"> it</font>

9
00:00:42,760 --> 00:00:47,170
<font color="#E5E5E5">together so I turned it down</font><font color="#CCCCCC"> to 50</font>

10
00:00:44,620 --> 00:00:48,550
slides<font color="#E5E5E5"> but in like 40 minutes that's</font>

11
00:00:47,170 --> 00:00:50,769
going to be kind of<font color="#E5E5E5"> tough and slides</font>

12
00:00:48,550 --> 00:00:52,419
have like<font color="#E5E5E5"> multiple things</font><font color="#CCCCCC"> going on so I</font>

13
00:00:50,769 --> 00:00:54,460
might fly through some points if you'd

14
00:00:52,420 --> 00:00:57,040
like me to slow<font color="#CCCCCC"> down and elaborate</font><font color="#E5E5E5"> on</font>

15
00:00:54,460 --> 00:00:59,400
anything<font color="#CCCCCC"> just let</font><font color="#E5E5E5"> me know</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> obviously</font>

16
00:00:57,040 --> 00:01:02,199
feel<font color="#CCCCCC"> free to ask questions at the end so</font>

17
00:00:59,400 --> 00:01:02,830
<font color="#CCCCCC">about me</font><font color="#E5E5E5"> you just heard I'm principal</font>

18
00:01:02,199 --> 00:01:05,620
<font color="#E5E5E5">consultant</font>

19
00:01:02,830 --> 00:01:07,840
I lead<font color="#CCCCCC"> a spec</font><font color="#E5E5E5"> securities automation and</font>

20
00:01:05,620 --> 00:01:10,330
integration services group which is

21
00:01:07,840 --> 00:01:13,330
primarily focused<font color="#E5E5E5"> on how to use tools</font>

22
00:01:10,330 --> 00:01:15,640
<font color="#E5E5E5">effectively and efficiently for</font><font color="#CCCCCC"> scaling</font>

23
00:01:13,330 --> 00:01:17,679
application security<font color="#E5E5E5"> we'll talk about</font>

24
00:01:15,640 --> 00:01:19,330
why there's a need<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I've been</font>

25
00:01:17,680 --> 00:01:21,370
<font color="#E5E5E5">working at aspect for seven years</font>

26
00:01:19,330 --> 00:01:23,110
actually<font color="#CCCCCC"> and this is the second time I</font>

27
00:01:21,370 --> 00:01:27,820
<font color="#E5E5E5">present it at</font><font color="#CCCCCC"> les Con it's my</font><font color="#E5E5E5"> twitter</font>

28
00:01:23,110 --> 00:01:29,380
handle<font color="#CCCCCC"> and my key interest here</font><font color="#E5E5E5"> but I</font>

29
00:01:27,820 --> 00:01:31,509
wanted<font color="#E5E5E5"> to get an understanding of the</font>

30
00:01:29,380 --> 00:01:32,979
<font color="#E5E5E5">people</font><font color="#CCCCCC"> in the room and your experiences</font>

31
00:01:31,510 --> 00:01:35,770
with static analysis<font color="#E5E5E5"> before we go into</font>

32
00:01:32,980 --> 00:01:38,740
it<font color="#CCCCCC"> so how many of</font><font color="#E5E5E5"> you use static</font>

33
00:01:35,770 --> 00:01:40,990
analysis<font color="#E5E5E5"> within your organization most</font>

34
00:01:38,740 --> 00:01:44,440
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> that's good and how many of you use</font>

35
00:01:40,990 --> 00:01:47,949
commercial tools so most<font color="#CCCCCC"> into</font><font color="#E5E5E5"> open</font>

36
00:01:44,440 --> 00:01:49,720
<font color="#E5E5E5">source tools not not too many okay</font>

37
00:01:47,950 --> 00:01:51,880
<font color="#E5E5E5">there's value</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the open source tools</font>

38
00:01:49,720 --> 00:01:53,980
<font color="#CCCCCC">too so I want</font><font color="#E5E5E5"> to talk about that today</font>

39
00:01:51,880 --> 00:01:56,830
<font color="#CCCCCC">how</font><font color="#E5E5E5"> about how do you</font><font color="#CCCCCC"> use this is it all</font>

40
00:01:53,980 --> 00:01:58,000
manual scanning manual triage full

41
00:01:56,830 --> 00:02:00,880
manual process you have security

42
00:01:58,000 --> 00:02:02,770
<font color="#CCCCCC">analysts you</font><font color="#E5E5E5"> just do everything you know</font>

43
00:02:00,880 --> 00:02:04,240
<font color="#E5E5E5">how many are integrated like automated</font>

44
00:02:02,770 --> 00:02:06,250
<font color="#CCCCCC">processes integrated into their</font>

45
00:02:04,240 --> 00:02:08,068
development or CI or something<font color="#CCCCCC"> right</font>

46
00:02:06,250 --> 00:02:11,290
<font color="#E5E5E5">good that's where I think this should be</font>

47
00:02:08,068 --> 00:02:13,299
<font color="#E5E5E5">talked about</font><font color="#CCCCCC"> that's the more so why do</font>

48
00:02:11,290 --> 00:02:15,459
<font color="#CCCCCC">we</font><font color="#E5E5E5"> need tools you're all probably</font><font color="#CCCCCC"> pretty</font>

49
00:02:13,300 --> 00:02:17,830
<font color="#E5E5E5">familiar with this a lot of conversation</font>

50
00:02:15,459 --> 00:02:20,260
about this<font color="#E5E5E5"> so far at this conference</font>

51
00:02:17,830 --> 00:02:23,800
<font color="#E5E5E5">manual security activities have been</font>

52
00:02:20,260 --> 00:02:25,929
bottlenecks<font color="#CCCCCC"> for development</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> get</font>

53
00:02:23,800 --> 00:02:27,819
<font color="#CCCCCC">applications into production</font><font color="#E5E5E5"> and that's</font>

54
00:02:25,930 --> 00:02:29,260
a<font color="#E5E5E5"> problem right</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> the business is</font>

55
00:02:27,819 --> 00:02:30,670
always going<font color="#CCCCCC"> to be pushing</font><font color="#E5E5E5"> for features</font>

56
00:02:29,260 --> 00:02:32,470
and bug fixes<font color="#E5E5E5"> and</font>

57
00:02:30,670 --> 00:02:34,720
<font color="#E5E5E5">he wants to say wait don't</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> release</font>

58
00:02:32,470 --> 00:02:35,890
<font color="#CCCCCC">that yet we</font><font color="#E5E5E5"> haven't checked it or we</font>

59
00:02:34,720 --> 00:02:38,170
have checked it and<font color="#CCCCCC"> you have to fix</font>

60
00:02:35,890 --> 00:02:41,079
these<font color="#CCCCCC"> things before you can elevate to</font>

61
00:02:38,170 --> 00:02:44,019
production<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> business always wins</font>

62
00:02:41,080 --> 00:02:45,580
<font color="#E5E5E5">right</font><font color="#CCCCCC"> in most</font><font color="#E5E5E5"> cases so you get this</font><font color="#CCCCCC"> kind</font>

63
00:02:44,020 --> 00:02:48,130
of<font color="#E5E5E5"> broken bottle effect where the</font>

64
00:02:45,580 --> 00:02:49,510
<font color="#E5E5E5">business is circumventing security to</font>

65
00:02:48,130 --> 00:02:51,400
release their code into production<font color="#E5E5E5"> they</font>

66
00:02:49,510 --> 00:02:52,780
make these<font color="#E5E5E5"> risk-based decisions where</font>

67
00:02:51,400 --> 00:02:54,280
they<font color="#E5E5E5"> don't really understand the risk</font>

68
00:02:52,780 --> 00:02:55,720
<font color="#CCCCCC">that they're taking on but there's no</font>

69
00:02:54,280 --> 00:02:57,400
<font color="#E5E5E5">time to fix anything anyway</font>

70
00:02:55,720 --> 00:02:59,530
maybe we'll fix it<font color="#E5E5E5"> the next version</font>

71
00:02:57,400 --> 00:03:01,660
<font color="#E5E5E5">that's the hope so security has</font><font color="#CCCCCC"> to</font>

72
00:02:59,530 --> 00:03:03,400
figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> how to fix this issue how to</font>

73
00:03:01,660 --> 00:03:04,989
either widen that bottleneck<font color="#CCCCCC"> or some</font>

74
00:03:03,400 --> 00:03:07,269
other scenario where<font color="#E5E5E5"> we can have</font>

75
00:03:04,989 --> 00:03:11,380
security and<font color="#E5E5E5"> development especially as</font>

76
00:03:07,269 --> 00:03:13,239
development gets faster and<font color="#E5E5E5"> faster so</font><font color="#CCCCCC"> in</font>

77
00:03:11,380 --> 00:03:14,890
your application security<font color="#E5E5E5"> tool belts</font>

78
00:03:13,239 --> 00:03:16,510
<font color="#E5E5E5">there are lots of different options you</font>

79
00:03:14,890 --> 00:03:18,940
<font color="#E5E5E5">probably have at least some of these in</font>

80
00:03:16,510 --> 00:03:20,739
<font color="#E5E5E5">your organization</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to really go</font>

81
00:03:18,940 --> 00:03:22,480
<font color="#CCCCCC">into any</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> other ones just going to</font>

82
00:03:20,739 --> 00:03:24,130
talk about static analysis but there are

83
00:03:22,480 --> 00:03:25,869
lots of different<font color="#E5E5E5"> options whether</font>

84
00:03:24,130 --> 00:03:27,400
they're tools<font color="#CCCCCC"> or some</font><font color="#E5E5E5"> of the manual</font>

85
00:03:25,870 --> 00:03:28,299
approaches at the bottom and I'm sure

86
00:03:27,400 --> 00:03:31,900
there<font color="#E5E5E5"> are other things</font><font color="#CCCCCC"> that aren't</font>

87
00:03:28,299 --> 00:03:35,049
listed here so we're<font color="#E5E5E5"> really just going</font>

88
00:03:31,900 --> 00:03:37,420
<font color="#CCCCCC">to talk about static</font><font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> and what</font>

89
00:03:35,049 --> 00:03:39,370
that is so it's<font color="#E5E5E5"> often called white box</font>

90
00:03:37,420 --> 00:03:40,480
<font color="#CCCCCC">testing or clear box testing</font><font color="#E5E5E5"> it</font>

91
00:03:39,370 --> 00:03:42,310
<font color="#E5E5E5">essentially means</font><font color="#CCCCCC"> that you have access</font>

92
00:03:40,480 --> 00:03:43,988
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the internals of the application to</font>

93
00:03:42,310 --> 00:03:46,480
test<font color="#E5E5E5"> as opposed to</font><font color="#CCCCCC"> blackbox testing</font>

94
00:03:43,989 --> 00:03:47,769
<font color="#CCCCCC">which dynamic analysis does right where</font>

95
00:03:46,480 --> 00:03:49,660
you're kind<font color="#CCCCCC"> of poking from</font><font color="#E5E5E5"> the outside</font>

96
00:03:47,769 --> 00:03:52,630
without knowledge of what's<font color="#E5E5E5"> going on</font>

97
00:03:49,660 --> 00:03:54,459
<font color="#CCCCCC">inside</font><font color="#E5E5E5"> there are</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple different ways</font>

98
00:03:52,630 --> 00:03:56,829
<font color="#CCCCCC">that it's performed we're gonna</font><font color="#E5E5E5"> I'm</font>

99
00:03:54,459 --> 00:03:58,450
going to elaborate on<font color="#E5E5E5"> each of these as</font>

100
00:03:56,829 --> 00:04:01,120
we<font color="#CCCCCC"> go through but</font><font color="#E5E5E5"> there's there's the</font>

101
00:03:58,450 --> 00:04:02,738
typical<font color="#E5E5E5"> standard grep or advanced</font>

102
00:04:01,120 --> 00:04:04,840
searching through your application

103
00:04:02,739 --> 00:04:06,579
that's the easiest to do there's data

104
00:04:04,840 --> 00:04:08,230
flow and control<font color="#E5E5E5"> flow analysis I'll</font>

105
00:04:06,579 --> 00:04:10,090
describe<font color="#CCCCCC"> what</font><font color="#E5E5E5"> those are</font>

106
00:04:08,230 --> 00:04:11,858
<font color="#CCCCCC">oh and one of the one of</font><font color="#E5E5E5"> the key</font>

107
00:04:10,090 --> 00:04:14,319
benefits<font color="#E5E5E5"> and drawbacks to static</font>

108
00:04:11,859 --> 00:04:15,850
analysis is that<font color="#E5E5E5"> it checks all possible</font>

109
00:04:14,319 --> 00:04:18,430
code execution<font color="#E5E5E5"> paths within your</font>

110
00:04:15,850 --> 00:04:19,719
application by default<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> it</font>

111
00:04:18,430 --> 00:04:21,190
<font color="#CCCCCC">figured</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> Less but typically it's</font>

112
00:04:19,720 --> 00:04:22,960
<font color="#CCCCCC">going to check everything that's great</font>

113
00:04:21,190 --> 00:04:24,910
<font color="#E5E5E5">and it's really bad and we'll talk about</font>

114
00:04:22,960 --> 00:04:27,010
<font color="#E5E5E5">that you're just some of the examples</font><font color="#CCCCCC"> of</font>

115
00:04:24,910 --> 00:04:30,580
some commercial and open<font color="#E5E5E5"> source tools</font>

116
00:04:27,010 --> 00:04:35,440
you can use find<font color="#E5E5E5"> security bugs</font><font color="#CCCCCC"> is open</font>

117
00:04:30,580 --> 00:04:36,370
<font color="#E5E5E5">source PMD and I don't</font><font color="#CCCCCC"> know if so</font><font color="#E5E5E5"> our</font>

118
00:04:35,440 --> 00:04:38,979
<font color="#CCCCCC">cupid's</font>

119
00:04:36,370 --> 00:04:41,949
<font color="#CCCCCC">in our view</font><font color="#E5E5E5"> maybe yeah it's a great tool</font>

120
00:04:38,979 --> 00:04:43,930
so why does security<font color="#E5E5E5"> tools or static</font>

121
00:04:41,949 --> 00:04:47,650
application security testing tools have

122
00:04:43,930 --> 00:04:50,199
such a bad reputation<font color="#CCCCCC"> a lot of the onus</font>

123
00:04:47,650 --> 00:04:52,090
<font color="#E5E5E5">I think falls on the vendors</font><font color="#CCCCCC"> the vendors</font>

124
00:04:50,199 --> 00:04:54,639
<font color="#CCCCCC">are product companies they're not</font>

125
00:04:52,090 --> 00:04:56,229
generally service companies so they want

126
00:04:54,639 --> 00:04:58,810
you to buy as many licenses for their

127
00:04:56,229 --> 00:05:00,370
tools<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you can possibly afford they</font>

128
00:04:58,810 --> 00:05:02,860
don't want you to<font color="#E5E5E5"> have budget left over</font>

129
00:05:00,370 --> 00:05:04,419
for helping you<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> those tools</font><font color="#CCCCCC"> set</font>

130
00:05:02,860 --> 00:05:05,740
<font color="#CCCCCC">up and used properly</font><font color="#E5E5E5"> within your</font>

131
00:05:04,419 --> 00:05:07,930
organization<font color="#E5E5E5"> right that's the</font>

132
00:05:05,740 --> 00:05:10,720
<font color="#CCCCCC">salespersons prerogative is how many</font>

133
00:05:07,930 --> 00:05:12,460
licenses<font color="#CCCCCC"> can I</font><font color="#E5E5E5"> show you and that's what</font>

134
00:05:10,720 --> 00:05:14,169
usually happens is they'll sell you<font color="#CCCCCC"> a</font>

135
00:05:12,460 --> 00:05:15,880
ton of licenses<font color="#E5E5E5"> and you'll get the tool</font>

136
00:05:14,169 --> 00:05:16,990
<font color="#E5E5E5">it would be sold as a silver bullet</font>

137
00:05:15,880 --> 00:05:18,760
<font color="#CCCCCC">right</font><font color="#E5E5E5"> this is going to solve all of your</font>

138
00:05:16,990 --> 00:05:21,610
<font color="#CCCCCC">security problems</font><font color="#E5E5E5"> it's gonna be easy to</font>

139
00:05:18,760 --> 00:05:23,889
<font color="#E5E5E5">set up easy to run</font><font color="#CCCCCC"> it's gonna</font><font color="#E5E5E5"> solve all</font>

140
00:05:21,610 --> 00:05:26,350
your<font color="#E5E5E5"> security issues but but that's not</font>

141
00:05:23,889 --> 00:05:27,910
really what happens right<font color="#E5E5E5"> using these</font>

142
00:05:26,350 --> 00:05:30,340
tools out<font color="#E5E5E5"> of the box is not really how</font>

143
00:05:27,910 --> 00:05:31,990
they're<font color="#E5E5E5"> designed and vendors know that</font>

144
00:05:30,340 --> 00:05:33,969
the salespeople may or may not<font color="#E5E5E5"> know that</font>

145
00:05:31,990 --> 00:05:35,229
<font color="#E5E5E5">but the vendors actually know it</font><font color="#CCCCCC"> and so</font>

146
00:05:33,970 --> 00:05:36,910
it's they shouldn't be selling it to you

147
00:05:35,229 --> 00:05:38,320
that way<font color="#E5E5E5"> right they should be selling</font>

148
00:05:36,910 --> 00:05:40,030
<font color="#E5E5E5">selling you a tool with some</font>

149
00:05:38,320 --> 00:05:41,950
<font color="#CCCCCC">professional services to get you off the</font>

150
00:05:40,030 --> 00:05:43,869
<font color="#CCCCCC">ground and</font><font color="#E5E5E5"> help you get up and running</font>

151
00:05:41,950 --> 00:05:45,280
<font color="#CCCCCC">or bundle those</font><font color="#E5E5E5"> into the you know the</font>

152
00:05:43,870 --> 00:05:47,349
cost<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tool</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that they can they</font>

153
00:05:45,280 --> 00:05:49,270
can provide<font color="#E5E5E5"> that to you but they</font>

154
00:05:47,349 --> 00:05:50,590
<font color="#E5E5E5">shouldn't be expecting organizations to</font>

155
00:05:49,270 --> 00:05:55,690
know how to use these tools effectively

156
00:05:50,590 --> 00:05:58,810
<font color="#CCCCCC">and efficiently on their own and most</font>

157
00:05:55,690 --> 00:06:01,210
security tools most static application

158
00:05:58,810 --> 00:06:03,520
tools aren't<font color="#E5E5E5"> really where they need to</font>

159
00:06:01,210 --> 00:06:05,229
<font color="#E5E5E5">be they're not</font><font color="#CCCCCC"> really where the security</font>

160
00:06:03,520 --> 00:06:06,940
<font color="#CCCCCC">industry expects them to be work</font><font color="#E5E5E5"> at</font>

161
00:06:05,229 --> 00:06:08,830
least not at all how they're sold<font color="#CCCCCC"> at</font>

162
00:06:06,940 --> 00:06:10,630
<font color="#CCCCCC">silver bullets</font><font color="#E5E5E5"> right but they're</font>

163
00:06:08,830 --> 00:06:11,320
continuing to evolve<font color="#E5E5E5"> they're getting</font>

164
00:06:10,630 --> 00:06:14,260
better<font color="#E5E5E5"> over time</font>

165
00:06:11,320 --> 00:06:16,180
<font color="#CCCCCC">and we'll talk about the OS benchmark</font>

166
00:06:14,260 --> 00:06:16,990
project maybe later you may have heard

167
00:06:16,180 --> 00:06:18,699
<font color="#CCCCCC">about it already</font>

168
00:06:16,990 --> 00:06:21,760
but I'm hopeful<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> will</font>

169
00:06:18,699 --> 00:06:22,870
eventually push some of<font color="#E5E5E5"> the vendors and</font>

170
00:06:21,760 --> 00:06:25,030
commercial tools to do a little bit

171
00:06:22,870 --> 00:06:28,570
better job<font color="#CCCCCC"> C or some other initiatives</font>

172
00:06:25,030 --> 00:06:31,330
<font color="#CCCCCC">may do it so today</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to answer a</font>

173
00:06:28,570 --> 00:06:32,229
couple different<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> generally why</font>

174
00:06:31,330 --> 00:06:34,599
does static analysis

175
00:06:32,229 --> 00:06:36,760
<font color="#E5E5E5">why does that static analysis</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> so</font>

176
00:06:34,599 --> 00:06:38,349
long and why are there so many false

177
00:06:36,760 --> 00:06:41,139
positives<font color="#CCCCCC"> I think those are the key</font>

178
00:06:38,349 --> 00:06:42,909
issues<font color="#CCCCCC"> here that caused people to to be</font>

179
00:06:41,139 --> 00:06:45,280
frustrated by those tools we're going to

180
00:06:42,910 --> 00:06:48,070
talk about<font color="#E5E5E5"> in detail how they work so</font>

181
00:06:45,280 --> 00:06:49,809
that you can understand this I have an

182
00:06:48,070 --> 00:06:51,639
example<font color="#E5E5E5"> using PMD which is</font>

183
00:06:49,810 --> 00:06:54,520
<font color="#E5E5E5">engine is an</font><font color="#CCCCCC"> open-source static analysis</font>

184
00:06:51,639 --> 00:06:56,560
<font color="#E5E5E5">tool generally not for security</font><font color="#CCCCCC"> but</font>

185
00:06:54,520 --> 00:06:58,510
we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> repurpose</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> so</font>

186
00:06:56,560 --> 00:07:01,180
you can see how that<font color="#E5E5E5"> works</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> I'll</font>

187
00:06:58,510 --> 00:07:03,070
talk<font color="#E5E5E5"> to you about some how we've seen</font>

188
00:07:01,180 --> 00:07:04,660
<font color="#E5E5E5">many organizations integrate static</font>

189
00:07:03,070 --> 00:07:08,740
analysis into their environments<font color="#E5E5E5"> and how</font>

190
00:07:04,660 --> 00:07:12,070
I would<font color="#E5E5E5"> recommend you do it so for some</font>

191
00:07:08,740 --> 00:07:14,080
<font color="#CCCCCC">background kind</font><font color="#E5E5E5"> of assumptions going</font><font color="#CCCCCC"> in</font>

192
00:07:12,070 --> 00:07:15,700
here<font color="#E5E5E5"> when we're talking about static</font>

193
00:07:14,080 --> 00:07:17,620
analysis at<font color="#CCCCCC"> least in this case we're</font>

194
00:07:15,700 --> 00:07:19,630
primarily<font color="#E5E5E5"> talking about static analysis</font>

195
00:07:17,620 --> 00:07:23,280
of statically typed languages like Java

196
00:07:19,630 --> 00:07:26,500
and.net<font color="#CCCCCC"> we're really not talking about</font>

197
00:07:23,280 --> 00:07:29,799
<font color="#CCCCCC">dynamically type languages like Ruby and</font>

198
00:07:26,500 --> 00:07:32,370
Python<font color="#E5E5E5"> because static analysis for those</font>

199
00:07:29,800 --> 00:07:34,600
<font color="#E5E5E5">languages is much much more difficult</font>

200
00:07:32,370 --> 00:07:37,300
<font color="#CCCCCC">that's a whole nother conversation</font><font color="#E5E5E5"> about</font>

201
00:07:34,600 --> 00:07:38,860
why that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> but so you</font><font color="#E5E5E5"> can just think of</font>

202
00:07:37,300 --> 00:07:40,990
it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that context</font><font color="#E5E5E5"> there's not a whole</font>

203
00:07:38,860 --> 00:07:42,490
lot<font color="#CCCCCC"> of tools available to statically</font>

204
00:07:40,990 --> 00:07:44,650
analyze those languages and the ones

205
00:07:42,490 --> 00:07:46,750
<font color="#CCCCCC">that are there</font><font color="#E5E5E5"> in many cases are just</font>

206
00:07:44,650 --> 00:07:49,109
<font color="#E5E5E5">doing shorter than</font><font color="#CCCCCC"> advanced grep which</font>

207
00:07:46,750 --> 00:07:52,060
you could probably write on<font color="#E5E5E5"> your own</font>

208
00:07:49,110 --> 00:07:53,919
<font color="#E5E5E5">there are some good ones but not many my</font>

209
00:07:52,060 --> 00:07:55,510
<font color="#CCCCCC">bias is totally towards</font><font color="#E5E5E5"> Java that's</font>

210
00:07:53,919 --> 00:07:58,060
really where<font color="#E5E5E5"> my background is so I may</font>

211
00:07:55,510 --> 00:07:59,620
use yum Java terminology for some things

212
00:07:58,060 --> 00:08:01,030
but<font color="#CCCCCC"> the process is really</font><font color="#E5E5E5"> the same</font>

213
00:07:59,620 --> 00:08:02,320
regardless of<font color="#E5E5E5"> the language that you're</font>

214
00:08:01,030 --> 00:08:05,799
talking<font color="#E5E5E5"> about as long as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> statically</font>

215
00:08:02,320 --> 00:08:06,909
typed language and I'll be generalizing

216
00:08:05,800 --> 00:08:09,190
house that's works I'm<font color="#CCCCCC"> not going to talk</font>

217
00:08:06,910 --> 00:08:11,110
<font color="#E5E5E5">about specific vendors or specific tools</font>

218
00:08:09,190 --> 00:08:12,910
and how they work<font color="#E5E5E5"> mostly</font><font color="#CCCCCC"> because I have</font>

219
00:08:11,110 --> 00:08:16,450
no<font color="#CCCCCC"> idea right it's all proprietary</font>

220
00:08:12,910 --> 00:08:17,590
<font color="#CCCCCC">information so I'm going to generalize</font>

221
00:08:16,450 --> 00:08:20,200
<font color="#E5E5E5">the set of</font><font color="#CCCCCC"> high-level and say this is</font>

222
00:08:17,590 --> 00:08:21,669
generally how stats works so this<font color="#E5E5E5"> is</font>

223
00:08:20,200 --> 00:08:23,740
what the<font color="#E5E5E5"> normal process looks like</font>

224
00:08:21,669 --> 00:08:25,840
right you have source code or<font color="#CCCCCC"> bytecode</font>

225
00:08:23,740 --> 00:08:29,530
that gets fed<font color="#CCCCCC"> into some sort of model</font>

226
00:08:25,840 --> 00:08:32,110
extraction process the output<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that is</font>

227
00:08:29,530 --> 00:08:34,390
one or more intermediate<font color="#E5E5E5"> representations</font>

228
00:08:32,110 --> 00:08:36,940
of of that source<font color="#CCCCCC"> code</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> that bytecode</font>

229
00:08:34,390 --> 00:08:39,729
<font color="#E5E5E5">right those intermediate representations</font>

230
00:08:36,940 --> 00:08:41,110
have many forms<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is very similar if</font>

231
00:08:39,729 --> 00:08:42,849
you're familiar with<font color="#E5E5E5"> how compilers work</font>

232
00:08:41,110 --> 00:08:45,490
<font color="#CCCCCC">this is the same process so</font><font color="#E5E5E5"> far that a</font>

233
00:08:42,849 --> 00:08:47,680
<font color="#E5E5E5">compiler from</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> uses</font><font color="#CCCCCC"> passing some</font>

234
00:08:45,490 --> 00:08:49,029
source code<font color="#CCCCCC"> get out these integer excuse</font>

235
00:08:47,680 --> 00:08:50,800
<font color="#E5E5E5">me intermediate representations like</font>

236
00:08:49,029 --> 00:08:52,689
simple tables call graphs control flow

237
00:08:50,800 --> 00:08:54,849
graphs abstract syntax trees and

238
00:08:52,690 --> 00:08:56,500
proprietary models so all the commercial

239
00:08:54,850 --> 00:08:58,630
tools are going<font color="#CCCCCC"> to use at least some</font>

240
00:08:56,500 --> 00:09:01,300
combination of these<font color="#E5E5E5"> generally the</font>

241
00:08:58,630 --> 00:09:03,370
proprietary models<font color="#E5E5E5"> which may or may</font><font color="#CCCCCC"> not</font>

242
00:09:01,300 --> 00:09:07,060
include<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> the other</font>

243
00:09:03,370 --> 00:09:10,210
<font color="#E5E5E5">models right and then you perform the</font>

244
00:09:07,060 --> 00:09:12,099
analysis on those<font color="#E5E5E5"> so the analysis</font><font color="#CCCCCC"> that</font>

245
00:09:10,210 --> 00:09:13,750
<font color="#E5E5E5">you do or</font><font color="#CCCCCC"> that most of the</font><font color="#E5E5E5"> tools are</font>

246
00:09:12,100 --> 00:09:15,490
doing is not actually<font color="#E5E5E5"> on source code or</font>

247
00:09:13,750 --> 00:09:19,779
<font color="#CCCCCC">bytecode</font><font color="#E5E5E5"> it's on these models that have</font>

248
00:09:15,490 --> 00:09:21,480
been<font color="#CCCCCC"> generated</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> the tools which means</font>

249
00:09:19,779 --> 00:09:24,130
that when<font color="#E5E5E5"> you want to create a new</font>

250
00:09:21,480 --> 00:09:26,050
support for<font color="#CCCCCC"> a new language what you need</font>

251
00:09:24,130 --> 00:09:28,120
to do is create<font color="#E5E5E5"> a new parser or</font>

252
00:09:26,050 --> 00:09:30,339
tokenizer for that language<font color="#CCCCCC"> right how do</font>

253
00:09:28,120 --> 00:09:33,640
I understand<font color="#E5E5E5"> what this language is and</font>

254
00:09:30,339 --> 00:09:35,650
convert it to<font color="#E5E5E5"> these models</font><font color="#CCCCCC"> and create</font>

255
00:09:33,640 --> 00:09:37,510
rules for that<font color="#E5E5E5"> line which say what's</font>

256
00:09:35,650 --> 00:09:39,279
acceptable<font color="#E5E5E5"> and not acceptable to</font>

257
00:09:37,510 --> 00:09:41,620
generate to know when to<font color="#E5E5E5"> generate</font>

258
00:09:39,279 --> 00:09:47,710
violations or issues or<font color="#E5E5E5"> findings for</font>

259
00:09:41,620 --> 00:09:50,380
<font color="#E5E5E5">that particular particular language so</font>

260
00:09:47,710 --> 00:09:52,450
from a<font color="#E5E5E5"> high level</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is generally what</font>

261
00:09:50,380 --> 00:09:54,730
the workflow<font color="#E5E5E5"> looks like right</font><font color="#CCCCCC"> you have a</font>

262
00:09:52,450 --> 00:09:56,770
compilation<font color="#E5E5E5"> normally</font><font color="#CCCCCC"> because most most</font>

263
00:09:54,730 --> 00:09:59,589
static analysis tools are starting<font color="#E5E5E5"> with</font>

264
00:09:56,770 --> 00:10:02,050
source code<font color="#CCCCCC"> you can pass</font><font color="#E5E5E5"> compiled code</font>

265
00:09:59,589 --> 00:10:03,400
into many of them but<font color="#E5E5E5"> the process will</font>

266
00:10:02,050 --> 00:10:05,290
generally be<font color="#CCCCCC"> the same</font>

267
00:10:03,400 --> 00:10:07,750
you start with compilation that handles

268
00:10:05,290 --> 00:10:08,170
<font color="#CCCCCC">your semantic and syntactic checking</font>

269
00:10:07,750 --> 00:10:10,209
right

270
00:10:08,170 --> 00:10:11,349
that's just your<font color="#E5E5E5"> normal compilation</font>

271
00:10:10,209 --> 00:10:12,729
making<font color="#E5E5E5"> sure that you didn't mess</font>

272
00:10:11,350 --> 00:10:14,950
anything<font color="#E5E5E5"> up</font><font color="#CCCCCC"> that you're not representing</font>

273
00:10:12,730 --> 00:10:16,420
variables that were<font color="#E5E5E5"> never defined making</font>

274
00:10:14,950 --> 00:10:18,100
sure<font color="#E5E5E5"> that the classes</font><font color="#CCCCCC"> you expect to be</font>

275
00:10:16,420 --> 00:10:19,959
there actually<font color="#CCCCCC"> exist that all of</font><font color="#E5E5E5"> your</font>

276
00:10:18,100 --> 00:10:22,480
dependencies are actually there right so

277
00:10:19,959 --> 00:10:24,400
<font color="#E5E5E5">the static analysis tools are leveraging</font>

278
00:10:22,480 --> 00:10:27,250
existing technology right they call like

279
00:10:24,400 --> 00:10:28,449
Java C to compile your<font color="#CCCCCC"> code so they</font>

280
00:10:27,250 --> 00:10:29,950
<font color="#E5E5E5">don't have to figure</font><font color="#CCCCCC"> out if you're</font>

281
00:10:28,450 --> 00:10:31,450
actually<font color="#CCCCCC"> missing dependencies or not</font><font color="#E5E5E5"> if</font>

282
00:10:29,950 --> 00:10:33,520
you pass this initial compilation step

283
00:10:31,450 --> 00:10:35,529
<font color="#E5E5E5">then generally a static analysis tools</font>

284
00:10:33,520 --> 00:10:38,260
assume that you're good<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they can</font>

285
00:10:35,529 --> 00:10:40,540
<font color="#CCCCCC">build</font><font color="#E5E5E5"> those those other models then the</font>

286
00:10:38,260 --> 00:10:43,930
scanner model extraction occurs<font color="#CCCCCC"> so the</font>

287
00:10:40,540 --> 00:10:46,360
<font color="#E5E5E5">the tools will</font><font color="#CCCCCC"> traverse you know the</font>

288
00:10:43,930 --> 00:10:48,699
<font color="#E5E5E5">output of your bike it will traverse</font>

289
00:10:46,360 --> 00:10:51,310
your<font color="#CCCCCC"> bytecode and create those different</font>

290
00:10:48,700 --> 00:10:52,839
<font color="#E5E5E5">models that we talked about and then</font>

291
00:10:51,310 --> 00:10:55,540
they perform<font color="#CCCCCC"> their their scan which is</font>

292
00:10:52,839 --> 00:10:57,160
analysis the analysis is usually<font color="#CCCCCC"> in</font>

293
00:10:55,540 --> 00:10:58,420
several phases<font color="#E5E5E5"> and there are various</font>

294
00:10:57,160 --> 00:11:00,250
<font color="#E5E5E5">types of it so there are</font><font color="#CCCCCC"> three of them</font>

295
00:10:58,420 --> 00:11:02,199
<font color="#E5E5E5">here there's pattern matching which is</font>

296
00:11:00,250 --> 00:11:04,150
these advanced<font color="#E5E5E5"> grep like am</font><font color="#CCCCCC"> i look I'm</font>

297
00:11:02,200 --> 00:11:06,430
looking<font color="#CCCCCC"> for the word password</font><font color="#E5E5E5"> in a dot</font>

298
00:11:04,150 --> 00:11:08,770
properties file<font color="#E5E5E5"> very easy to do you</font>

299
00:11:06,430 --> 00:11:10,810
don't really need a tool<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> or a</font>

300
00:11:08,770 --> 00:11:12,490
commercial<font color="#E5E5E5"> tool to do it then there's</font>

301
00:11:10,810 --> 00:11:14,290
control flow analysis which is<font color="#E5E5E5"> much more</font>

302
00:11:12,490 --> 00:11:17,470
<font color="#E5E5E5">complex</font><font color="#CCCCCC"> I have a whole nother slide</font>

303
00:11:14,290 --> 00:11:19,959
about that but a good<font color="#CCCCCC"> example</font><font color="#E5E5E5"> is</font>

304
00:11:17,470 --> 00:11:21,910
not closing<font color="#E5E5E5"> your database connection in</font>

305
00:11:19,960 --> 00:11:23,170
your finally block<font color="#E5E5E5"> that's something</font><font color="#CCCCCC"> that</font>

306
00:11:21,910 --> 00:11:24,670
you should generally do to make<font color="#CCCCCC"> sure</font>

307
00:11:23,170 --> 00:11:27,040
<font color="#E5E5E5">that your database connection is always</font>

308
00:11:24,670 --> 00:11:30,729
<font color="#E5E5E5">closed</font><font color="#CCCCCC"> and then there's</font><font color="#E5E5E5"> data flow</font>

309
00:11:27,040 --> 00:11:33,010
analysis which<font color="#CCCCCC"> is looking for you know</font>

310
00:11:30,730 --> 00:11:34,960
bad data that comes in that's then

311
00:11:33,010 --> 00:11:36,990
output to a dangerous place<font color="#CCCCCC"> again we'll</font>

312
00:11:34,960 --> 00:11:39,340
talk<font color="#E5E5E5"> more</font><font color="#CCCCCC"> detail in a minute about that</font>

313
00:11:36,990 --> 00:11:40,810
<font color="#E5E5E5">there are other types of analyzers these</font>

314
00:11:39,340 --> 00:11:42,100
are just a couple<font color="#CCCCCC"> other ones</font><font color="#E5E5E5"> that I you</font>

315
00:11:40,810 --> 00:11:43,300
know<font color="#CCCCCC"> just searching around</font><font color="#E5E5E5"> happened to</font>

316
00:11:42,100 --> 00:11:45,970
come<font color="#CCCCCC"> across right</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> semantic</font>

317
00:11:43,300 --> 00:11:47,859
structural<font color="#CCCCCC"> configuration</font><font color="#E5E5E5"> what the</font>

318
00:11:45,970 --> 00:11:50,170
analyzers actually are isn't<font color="#E5E5E5"> as</font>

319
00:11:47,860 --> 00:11:51,400
important as that<font color="#E5E5E5"> is just the fact</font><font color="#CCCCCC"> that</font>

320
00:11:50,170 --> 00:11:53,500
they exist<font color="#CCCCCC"> and</font><font color="#E5E5E5"> knowing</font><font color="#CCCCCC"> that there are</font>

321
00:11:51,400 --> 00:11:55,540
<font color="#E5E5E5">multiples each one takes time to</font>

322
00:11:53,500 --> 00:11:56,890
traverse all<font color="#E5E5E5"> those models right that's</font>

323
00:11:55,540 --> 00:11:59,800
one of the reasons the static analysis

324
00:11:56,890 --> 00:12:03,670
<font color="#E5E5E5">takes so long so if we look at</font><font color="#CCCCCC"> a java</font>

325
00:11:59,800 --> 00:12:05,890
workflow here<font color="#CCCCCC"> typically you'll start</font>

326
00:12:03,670 --> 00:12:08,920
your<font color="#CCCCCC"> compiled your java files</font><font color="#E5E5E5"> right and</font>

327
00:12:05,890 --> 00:12:10,630
at this point you'll find out if there

328
00:12:08,920 --> 00:12:13,360
are any dependency issues<font color="#E5E5E5"> are there any</font>

329
00:12:10,630 --> 00:12:15,010
classes<font color="#E5E5E5"> that I'm missing</font><font color="#CCCCCC"> that I'm</font>

330
00:12:13,360 --> 00:12:16,300
expecting right whether they're<font color="#E5E5E5"> from</font>

331
00:12:15,010 --> 00:12:18,250
libraries or they're supposed to be

332
00:12:16,300 --> 00:12:20,380
<font color="#E5E5E5">internal inside the application what am</font>

333
00:12:18,250 --> 00:12:23,140
I missing here<font color="#E5E5E5"> then you'll compile your</font>

334
00:12:20,380 --> 00:12:26,170
<font color="#CCCCCC">jsps</font><font color="#E5E5E5"> and very often here you'll run into</font>

335
00:12:23,140 --> 00:12:28,750
<font color="#E5E5E5">issues because</font><font color="#CCCCCC"> jsps are typically</font>

336
00:12:26,170 --> 00:12:30,819
compiled at runtime<font color="#CCCCCC"> and so there's a lot</font>

337
00:12:28,750 --> 00:12:32,770
<font color="#CCCCCC">more</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> available to</font><font color="#E5E5E5"> the</font>

338
00:12:30,820 --> 00:12:33,430
<font color="#E5E5E5">container at runtime than there is at</font>

339
00:12:32,770 --> 00:12:35,140
compile time

340
00:12:33,430 --> 00:12:37,510
so you may reference variables here<font color="#CCCCCC"> in</font>

341
00:12:35,140 --> 00:12:39,699
other<font color="#E5E5E5"> files that aren't</font><font color="#CCCCCC"> defined</font><font color="#E5E5E5"> at</font>

342
00:12:37,510 --> 00:12:41,530
compile time<font color="#CCCCCC"> can</font><font color="#E5E5E5"> get a little bit tricky</font>

343
00:12:39,700 --> 00:12:46,540
<font color="#E5E5E5">but you'll run into more issues here</font>

344
00:12:41,530 --> 00:12:48,939
potentially and then framework analysis

345
00:12:46,540 --> 00:12:50,949
and this<font color="#E5E5E5"> is you know if you talk to any</font>

346
00:12:48,940 --> 00:12:52,300
<font color="#E5E5E5">other type</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> tool vendor they'll tell</font>

347
00:12:50,950 --> 00:12:53,590
you this is the<font color="#CCCCCC"> weakness of static</font>

348
00:12:52,300 --> 00:12:55,150
analysis because they don't understand

349
00:12:53,590 --> 00:12:57,580
frameworks<font color="#E5E5E5"> right and that's partially</font>

350
00:12:55,150 --> 00:13:00,310
true<font color="#E5E5E5"> right the frameworks like spring</font>

351
00:12:57,580 --> 00:13:02,920
and struts<font color="#CCCCCC"> right how</font><font color="#E5E5E5"> does a static</font>

352
00:13:00,310 --> 00:13:04,209
analysis<font color="#E5E5E5"> tool understand what's</font>

353
00:13:02,920 --> 00:13:06,219
happening in one of those<font color="#E5E5E5"> frameworks</font>

354
00:13:04,210 --> 00:13:08,050
<font color="#CCCCCC">they're all annotation driven and</font>

355
00:13:06,220 --> 00:13:10,180
configuration file driven<font color="#CCCCCC"> there's no</font>

356
00:13:08,050 --> 00:13:12,550
actual<font color="#E5E5E5"> source code for the static</font>

357
00:13:10,180 --> 00:13:14,829
<font color="#E5E5E5">analysis tools to look at to be</font><font color="#CCCCCC"> able to</font>

358
00:13:12,550 --> 00:13:16,599
<font color="#E5E5E5">trace your code through then you get to</font>

359
00:13:14,830 --> 00:13:18,430
<font color="#CCCCCC">and will</font><font color="#E5E5E5"> you know elaborate that on the</font>

360
00:13:16,600 --> 00:13:20,530
next<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> so and then there's the</font>

361
00:13:18,430 --> 00:13:22,390
<font color="#CCCCCC">actual scan which will generally include</font>

362
00:13:20,530 --> 00:13:24,579
pattern<font color="#E5E5E5"> matching plus some other types</font>

363
00:13:22,390 --> 00:13:27,860
<font color="#E5E5E5">of analysis which results in you you</font>

364
00:13:24,580 --> 00:13:30,380
getting some<font color="#CCCCCC"> results out of the tool so</font>

365
00:13:27,860 --> 00:13:33,500
framework analysis<font color="#CCCCCC"> I</font><font color="#E5E5E5"> took this from an</font>

366
00:13:30,380 --> 00:13:34,730
IBM slide<font color="#CCCCCC"> so I didn't recolor it</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> just</font>

367
00:13:33,500 --> 00:13:36,080
<font color="#E5E5E5">put it up</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> because they they</font>

368
00:13:34,730 --> 00:13:39,680
<font color="#E5E5E5">explain it this is how apps</font><font color="#CCCCCC"> can't source</font>

369
00:13:36,080 --> 00:13:41,840
works for frameworks<font color="#E5E5E5"> they have an engine</font>

370
00:13:39,680 --> 00:13:44,270
that<font color="#CCCCCC"> they call the frame framework</font>

371
00:13:41,840 --> 00:13:46,490
handler they call the waffle engine<font color="#E5E5E5"> and</font>

372
00:13:44,270 --> 00:13:48,560
it can it knows how<font color="#CCCCCC"> to understand</font>

373
00:13:46,490 --> 00:13:51,470
certain frameworks<font color="#CCCCCC"> so it can parse the</font>

374
00:13:48,560 --> 00:13:52,640
configuration files<font color="#CCCCCC"> in this framework</font>

375
00:13:51,470 --> 00:13:54,590
handler so if there's a framework

376
00:13:52,640 --> 00:13:56,060
handler for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> this is old so</font>

377
00:13:54,590 --> 00:14:00,200
<font color="#E5E5E5">there there may be support for other</font>

378
00:13:56,060 --> 00:14:02,209
frameworks<font color="#CCCCCC"> right it can take in the</font>

379
00:14:00,200 --> 00:14:03,770
understand what the framework is taking

380
00:14:02,210 --> 00:14:06,680
the configuration file and generate a

381
00:14:03,770 --> 00:14:08,660
waffle file<font color="#E5E5E5"> right which is the web</font>

382
00:14:06,680 --> 00:14:10,579
application flow language that waffle

383
00:14:08,660 --> 00:14:14,180
file is then passed<font color="#CCCCCC"> into another</font>

384
00:14:10,580 --> 00:14:15,800
<font color="#E5E5E5">translator which produces the</font>

385
00:14:14,180 --> 00:14:17,089
intermediate representations which are

386
00:14:15,800 --> 00:14:18,530
combined with the intermediate

387
00:14:17,090 --> 00:14:21,980
representations produced by your<font color="#CCCCCC"> java</font>

388
00:14:18,530 --> 00:14:25,010
<font color="#CCCCCC">code</font><font color="#E5E5E5"> to get sort of a full view</font><font color="#CCCCCC"> of your</font>

389
00:14:21,980 --> 00:14:27,440
application<font color="#E5E5E5"> and they call so they call</font>

390
00:14:25,010 --> 00:14:29,060
any methods that aren't<font color="#E5E5E5"> defined in</font><font color="#CCCCCC"> your</font>

391
00:14:27,440 --> 00:14:30,530
application but are<font color="#E5E5E5"> defining the</font>

392
00:14:29,060 --> 00:14:33,020
frameworks<font color="#E5E5E5"> call them synthetic methods</font>

393
00:14:30,530 --> 00:14:35,150
<font color="#E5E5E5">and so if you actually look at</font><font color="#CCCCCC"> dataflow</font>

394
00:14:33,020 --> 00:14:36,740
<font color="#E5E5E5">analysis through your application and</font>

395
00:14:35,150 --> 00:14:38,420
<font color="#E5E5E5">apps can source</font><font color="#CCCCCC"> you'll see something</font>

396
00:14:36,740 --> 00:14:40,490
<font color="#E5E5E5">some synthetic</font><font color="#CCCCCC"> methods if you use</font>

397
00:14:38,420 --> 00:14:43,339
frameworks<font color="#E5E5E5"> and that means that those</font>

398
00:14:40,490 --> 00:14:44,840
methods<font color="#CCCCCC"> are</font><font color="#E5E5E5"> being kind of inferred by</font>

399
00:14:43,340 --> 00:14:48,290
<font color="#E5E5E5">app scan source based on its knowledge</font>

400
00:14:44,840 --> 00:14:50,090
<font color="#E5E5E5">of that framework so if your tool</font>

401
00:14:48,290 --> 00:14:51,469
supports certain frameworks this is

402
00:14:50,090 --> 00:14:52,850
generally<font color="#E5E5E5"> how it'll do it right it'll</font>

403
00:14:51,470 --> 00:14:54,710
take the<font color="#E5E5E5"> knowledge of that framework</font><font color="#CCCCCC"> and</font>

404
00:14:52,850 --> 00:14:56,480
convert it to<font color="#E5E5E5"> some format some</font>

405
00:14:54,710 --> 00:14:58,400
intermediate format<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it can</font>

406
00:14:56,480 --> 00:15:00,430
understand and<font color="#E5E5E5"> use along</font><font color="#CCCCCC"> with the rest</font>

407
00:14:58,400 --> 00:15:06,230
<font color="#E5E5E5">of the intermediate formats generated</font>

408
00:15:00,430 --> 00:15:08,120
from the rest of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> application what</font>

409
00:15:06,230 --> 00:15:11,870
<font color="#E5E5E5">about</font>

410
00:15:08,120 --> 00:15:13,190
<font color="#CCCCCC">No well usually</font><font color="#E5E5E5"> not but out so I'll talk</font>

411
00:15:11,870 --> 00:15:15,710
<font color="#E5E5E5">a little</font><font color="#CCCCCC"> bit of</font><font color="#E5E5E5"> more about that but</font>

412
00:15:13,190 --> 00:15:18,560
<font color="#CCCCCC">usually no external dependencies</font><font color="#E5E5E5"> like</font>

413
00:15:15,710 --> 00:15:20,779
libraries are usually not analyzed<font color="#E5E5E5"> but</font>

414
00:15:18,560 --> 00:15:23,209
<font color="#E5E5E5">they are handled so that's different</font><font color="#CCCCCC"> so</font>

415
00:15:20,779 --> 00:15:26,420
I'll talk about<font color="#CCCCCC"> that at some</font><font color="#E5E5E5"> point</font>

416
00:15:23,210 --> 00:15:29,360
<font color="#E5E5E5">there's a slide for it</font><font color="#CCCCCC"> so some of the</font>

417
00:15:26,420 --> 00:15:31,130
types<font color="#E5E5E5"> of analysis this there's general</font>

418
00:15:29,360 --> 00:15:32,270
pattern matching which<font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> you</font>

419
00:15:31,130 --> 00:15:34,040
know you should<font color="#CCCCCC"> be familiar with</font><font color="#E5E5E5"> it's</font>

420
00:15:32,270 --> 00:15:36,050
just<font color="#E5E5E5"> searching</font><font color="#CCCCCC"> for certain strings and</font>

421
00:15:34,040 --> 00:15:37,969
this comes out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> apps</font><font color="#CCCCCC"> can source and</font>

422
00:15:36,050 --> 00:15:39,770
the reason for<font color="#CCCCCC"> that is because</font><font color="#E5E5E5"> apps</font>

423
00:15:37,970 --> 00:15:40,850
<font color="#E5E5E5">again source has a UI that shows this</font><font color="#CCCCCC"> I</font>

424
00:15:39,770 --> 00:15:43,730
didn't want to go hunting<font color="#CCCCCC"> through</font>

425
00:15:40,850 --> 00:15:45,680
configuration<font color="#E5E5E5"> files and databases for</font>

426
00:15:43,730 --> 00:15:46,850
<font color="#CCCCCC">other tools</font><font color="#E5E5E5"> to find the</font><font color="#CCCCCC"> pattern matching</font>

427
00:15:45,680 --> 00:15:48,949
rules because I didn't want to<font color="#E5E5E5"> break any</font>

428
00:15:46,850 --> 00:15:51,620
rules but they put<font color="#E5E5E5"> it in the UI so I</font>

429
00:15:48,950 --> 00:15:53,270
feel<font color="#CCCCCC"> like you know it's</font><font color="#E5E5E5"> fair game to</font>

430
00:15:51,620 --> 00:15:55,279
show it<font color="#E5E5E5"> so these are the regular</font>

431
00:15:53,270 --> 00:15:56,449
expressions that<font color="#E5E5E5"> apps can source uses to</font>

432
00:15:55,279 --> 00:15:59,300
search your job<font color="#E5E5E5"> I know you</font><font color="#CCCCCC"> probably</font>

433
00:15:56,450 --> 00:16:01,790
<font color="#CCCCCC">can't see it</font><font color="#E5E5E5"> at all</font><font color="#CCCCCC"> so here's one of</font>

434
00:15:59,300 --> 00:16:04,040
<font color="#E5E5E5">them right</font><font color="#CCCCCC"> all it's doing is</font><font color="#E5E5E5"> searching</font>

435
00:16:01,790 --> 00:16:05,900
<font color="#CCCCCC">for the word password in properties</font>

436
00:16:04,040 --> 00:16:07,550
files<font color="#CCCCCC"> and if it finds it it's gonna it's</font>

437
00:16:05,900 --> 00:16:10,760
going to show you<font color="#E5E5E5"> the</font><font color="#CCCCCC"> finder</font><font color="#E5E5E5"> so this is</font>

438
00:16:07,550 --> 00:16:12,620
not<font color="#E5E5E5"> very reliable right you're going to</font>

439
00:16:10,760 --> 00:16:14,750
it's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find it if you call your</font>

440
00:16:12,620 --> 00:16:16,910
variable password<font color="#E5E5E5"> or if your password is</font>

441
00:16:14,750 --> 00:16:18,920
<font color="#CCCCCC">password or if there's a comment that</font>

442
00:16:16,910 --> 00:16:20,449
says this<font color="#CCCCCC"> is a password but if you call</font>

443
00:16:18,920 --> 00:16:23,420
<font color="#E5E5E5">it something</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> it's not going to find</font>

444
00:16:20,450 --> 00:16:24,680
it so it's not super reliable<font color="#E5E5E5"> but it is</font>

445
00:16:23,420 --> 00:16:27,770
<font color="#E5E5E5">something it's a step in the right</font>

446
00:16:24,680 --> 00:16:29,930
<font color="#E5E5E5">direction so</font><font color="#CCCCCC"> one of the</font><font color="#E5E5E5"> other things I</font>

447
00:16:27,770 --> 00:16:32,150
wanted to<font color="#E5E5E5"> point</font><font color="#CCCCCC"> out is that</font><font color="#E5E5E5"> most tools</font>

448
00:16:29,930 --> 00:16:33,680
allow you to<font color="#CCCCCC"> create custom rules</font><font color="#E5E5E5"> whether</font>

449
00:16:32,150 --> 00:16:35,360
they're more complex<font color="#E5E5E5"> like data flow</font>

450
00:16:33,680 --> 00:16:37,760
analysis control flow analysis rules<font color="#E5E5E5"> or</font>

451
00:16:35,360 --> 00:16:39,320
they're<font color="#CCCCCC"> just pattern</font><font color="#E5E5E5"> matching rules this</font>

452
00:16:37,760 --> 00:16:41,209
<font color="#CCCCCC">is</font><font color="#E5E5E5"> again the user interface and apps can</font>

453
00:16:39,320 --> 00:16:43,670
source<font color="#E5E5E5"> to</font><font color="#CCCCCC"> create like a regular</font>

454
00:16:41,209 --> 00:16:45,500
<font color="#E5E5E5">expression</font><font color="#CCCCCC"> search English so if there</font>

455
00:16:43,670 --> 00:16:47,569
are certain regular expressions that you

456
00:16:45,500 --> 00:16:50,089
expect<font color="#E5E5E5"> should not be part</font><font color="#CCCCCC"> of your</font>

457
00:16:47,570 --> 00:16:51,920
application<font color="#CCCCCC"> you know you can add them</font>

458
00:16:50,089 --> 00:16:53,270
here<font color="#E5E5E5"> customization is really important</font>

459
00:16:51,920 --> 00:16:56,390
in these tools they're really not

460
00:16:53,270 --> 00:16:58,670
<font color="#CCCCCC">designed to be</font><font color="#E5E5E5"> used out-of-the-box so</font>

461
00:16:56,390 --> 00:17:00,350
control flow analysis so this is an

462
00:16:58,670 --> 00:17:02,779
example of you<font color="#E5E5E5"> know a small piece of</font>

463
00:17:00,350 --> 00:17:04,579
<font color="#E5E5E5">code here we can see we're creating an</font>

464
00:17:02,779 --> 00:17:06,439
XML reader and we're going<font color="#E5E5E5"> to parse some</font>

465
00:17:04,579 --> 00:17:09,319
input and we have a comment<font color="#E5E5E5"> from the</font>

466
00:17:06,439 --> 00:17:14,740
developer saying this is to prevent<font color="#E5E5E5"> xxe</font>

467
00:17:09,319 --> 00:17:14,740
attacks<font color="#E5E5E5"> so what's what's</font><font color="#CCCCCC"> wrong here</font>

468
00:17:17,720 --> 00:17:26,010
exactly<font color="#E5E5E5"> you're parsing and then you're</font>

469
00:17:23,970 --> 00:17:27,900
<font color="#E5E5E5">setting the feature</font><font color="#CCCCCC"> all right</font><font color="#E5E5E5"> this is</font>

470
00:17:26,010 --> 00:17:29,730
backwards<font color="#CCCCCC"> this will not this</font><font color="#E5E5E5"> will not</font>

471
00:17:27,900 --> 00:17:31,200
protect you<font color="#E5E5E5"> from</font><font color="#CCCCCC"> xxe attacks</font><font color="#E5E5E5"> this is the</font>

472
00:17:29,730 --> 00:17:33,030
exact exactly the type of<font color="#E5E5E5"> thing that</font>

473
00:17:31,200 --> 00:17:34,950
control flow analysis will find it's

474
00:17:33,030 --> 00:17:36,629
sort of like an order of operations<font color="#E5E5E5"> this</font>

475
00:17:34,950 --> 00:17:38,310
needs to<font color="#E5E5E5"> happen first and then this</font>

476
00:17:36,630 --> 00:17:39,930
needs<font color="#E5E5E5"> to happen</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> this always needs</font>

477
00:17:38,310 --> 00:17:41,610
to happen immediately<font color="#CCCCCC"> after it or at</font>

478
00:17:39,930 --> 00:17:44,580
some<font color="#E5E5E5"> point after it whatever there's</font>

479
00:17:41,610 --> 00:17:47,909
different rules<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and</font>

480
00:17:44,580 --> 00:17:48,840
that's where<font color="#E5E5E5"> the database finally</font><font color="#CCCCCC"> that</font>

481
00:17:47,910 --> 00:17:50,160
you should always<font color="#E5E5E5"> close</font><font color="#CCCCCC"> your database</font>

482
00:17:48,840 --> 00:17:52,800
connection<font color="#CCCCCC"> fund that's</font><font color="#E5E5E5"> the classic</font>

483
00:17:50,160 --> 00:17:56,850
example<font color="#CCCCCC"> the right order of operation</font>

484
00:17:52,800 --> 00:17:59,730
searching data flow analysis<font color="#CCCCCC"> is a little</font>

485
00:17:56,850 --> 00:18:01,230
<font color="#E5E5E5">more complex</font><font color="#CCCCCC"> right so typically in data</font>

486
00:17:59,730 --> 00:18:04,140
flow<font color="#E5E5E5"> analysis there</font><font color="#CCCCCC"> are there are</font><font color="#E5E5E5"> some</font>

487
00:18:01,230 --> 00:18:06,360
terms<font color="#E5E5E5"> there's a source</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> where the</font>

488
00:18:04,140 --> 00:18:08,010
data<font color="#E5E5E5"> comes from so in this case we have</font>

489
00:18:06,360 --> 00:18:09,899
<font color="#E5E5E5">requests that get parameter which</font><font color="#CCCCCC"> is</font>

490
00:18:08,010 --> 00:18:13,020
obviously not<font color="#CCCCCC"> a trusted source right</font>

491
00:18:09,900 --> 00:18:17,790
this is coming from<font color="#E5E5E5"> the user and then</font>

492
00:18:13,020 --> 00:18:22,740
you have teint teint<font color="#CCCCCC"> is data coming from</font>

493
00:18:17,790 --> 00:18:25,320
<font color="#CCCCCC">an untrusted source</font><font color="#E5E5E5"> and it always made</font>

494
00:18:22,740 --> 00:18:27,300
there's a particular card<font color="#E5E5E5"> in cards</font>

495
00:18:25,320 --> 00:18:28,740
against humanity' at any time I hear

496
00:18:27,300 --> 00:18:29,879
<font color="#CCCCCC">that</font><font color="#E5E5E5"> word I always think of</font><font color="#CCCCCC"> it's</font>

497
00:18:28,740 --> 00:18:31,110
<font color="#E5E5E5">inappropriate so I'm like I put it up</font>

498
00:18:29,880 --> 00:18:35,910
<font color="#CCCCCC">here but think about</font><font color="#E5E5E5"> in your heads in</font>

499
00:18:31,110 --> 00:18:37,889
your<font color="#CCCCCC"> lab yeah so anyway so so taint</font><font color="#E5E5E5"> and</font>

500
00:18:35,910 --> 00:18:39,750
<font color="#E5E5E5">so tainted just</font><font color="#CCCCCC"> consider</font><font color="#E5E5E5"> basically dirty</font>

501
00:18:37,890 --> 00:18:41,640
data<font color="#E5E5E5"> right it's something that you</font>

502
00:18:39,750 --> 00:18:44,310
shouldn't<font color="#E5E5E5"> trust and it gets passed</font>

503
00:18:41,640 --> 00:18:46,230
<font color="#CCCCCC">around through</font><font color="#E5E5E5"> all of these method calls</font>

504
00:18:44,310 --> 00:18:48,870
<font color="#E5E5E5">and so anything that taint touches</font>

505
00:18:46,230 --> 00:18:50,580
becomes<font color="#CCCCCC"> tainted data so you can</font><font color="#E5E5E5"> see here</font>

506
00:18:48,870 --> 00:18:52,979
that<font color="#CCCCCC"> we take the taint and we pass it</font>

507
00:18:50,580 --> 00:18:55,889
into<font color="#E5E5E5"> this new string</font><font color="#CCCCCC"> D B is now tainted</font>

508
00:18:52,980 --> 00:18:57,540
it's tainted data right<font color="#E5E5E5"> so that needs to</font>

509
00:18:55,890 --> 00:18:59,510
be tracked throughout<font color="#E5E5E5"> our application as</font>

510
00:18:57,540 --> 00:19:02,070
<font color="#CCCCCC">it moves between different variables</font>

511
00:18:59,510 --> 00:19:04,590
<font color="#CCCCCC">then you have the sync the</font><font color="#E5E5E5"> sync is where</font>

512
00:19:02,070 --> 00:19:08,730
the data is actually used<font color="#CCCCCC"> that's where</font>

513
00:19:04,590 --> 00:19:10,260
you say untrusted data should never be

514
00:19:08,730 --> 00:19:12,120
used in this<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> position</font><font color="#E5E5E5"> where</font>

515
00:19:10,260 --> 00:19:14,340
this type of untrusted data<font color="#E5E5E5"> should never</font>

516
00:19:12,120 --> 00:19:17,939
be used in this<font color="#E5E5E5"> particular position</font><font color="#CCCCCC"> so</font>

517
00:19:14,340 --> 00:19:19,199
here we're taking data<font color="#E5E5E5"> from the user and</font>

518
00:19:17,940 --> 00:19:20,940
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> basically just</font><font color="#E5E5E5"> sending it</font><font color="#CCCCCC"> right</font>

519
00:19:19,200 --> 00:19:23,340
back<font color="#E5E5E5"> out</font><font color="#CCCCCC"> to the user</font><font color="#E5E5E5"> that's reflected</font>

520
00:19:20,940 --> 00:19:25,890
cross-site scripting right I'm jumping

521
00:19:23,340 --> 00:19:27,659
ahead a little<font color="#E5E5E5"> bit but so and then all</font>

522
00:19:25,890 --> 00:19:28,840
the intermediary nodes or all of<font color="#E5E5E5"> the</font>

523
00:19:27,660 --> 00:19:35,350
<font color="#E5E5E5">nodes are considered data flow</font>

524
00:19:28,840 --> 00:19:37,389
<font color="#CCCCCC">nodes or</font><font color="#E5E5E5"> trace notes so is this a</font>

525
00:19:35,350 --> 00:19:37,809
vulnerability<font color="#CCCCCC"> you kind</font><font color="#E5E5E5"> of room</font><font color="#CCCCCC"> that but</font>

526
00:19:37,390 --> 00:19:40,960
yeah

527
00:19:37,809 --> 00:19:43,928
so so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> have understood data you</font>

528
00:19:40,960 --> 00:19:45,250
have<font color="#E5E5E5"> the taint</font><font color="#CCCCCC"> and you have the sink so</font>

529
00:19:43,929 --> 00:19:48,130
there's there are<font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> different</font>

530
00:19:45,250 --> 00:19:51,340
<font color="#CCCCCC">types of dataflow</font><font color="#E5E5E5"> analysis one of them</font>

531
00:19:48,130 --> 00:19:55,029
is called taint analysis<font color="#CCCCCC"> so here we're</font>

532
00:19:51,340 --> 00:19:57,399
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> look at each line and how it</font>

533
00:19:55,029 --> 00:19:58,720
interacts with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> taint</font><font color="#E5E5E5"> you see how it</font>

534
00:19:57,400 --> 00:20:03,309
interact with<font color="#E5E5E5"> the team so here we see</font>

535
00:19:58,720 --> 00:20:05,679
<font color="#CCCCCC">that string a is now tainted</font><font color="#E5E5E5"> right then</font>

536
00:20:03,309 --> 00:20:08,020
<font color="#E5E5E5">B is now tainted</font><font color="#CCCCCC"> because it takes in</font>

537
00:20:05,679 --> 00:20:10,539
data<font color="#E5E5E5"> from a it's basically</font><font color="#CCCCCC"> a you know a</font>

538
00:20:08,020 --> 00:20:12,970
<font color="#CCCCCC">boolean</font><font color="#E5E5E5"> value on each line of on each</font>

539
00:20:10,539 --> 00:20:14,890
<font color="#E5E5E5">node of</font><font color="#CCCCCC"> the trace</font><font color="#E5E5E5"> to say it's still it's</font>

540
00:20:12,970 --> 00:20:16,990
still<font color="#CCCCCC"> dirty</font><font color="#E5E5E5"> or it's not dirty right and</font>

541
00:20:14,890 --> 00:20:20,350
you go through<font color="#E5E5E5"> all the way until you get</font>

542
00:20:16,990 --> 00:20:23,020
<font color="#E5E5E5">to e and</font><font color="#CCCCCC"> E gets put into this print line</font>

543
00:20:20,350 --> 00:20:27,070
which we know is a sink and so this is a

544
00:20:23,020 --> 00:20:30,070
vulnerability<font color="#E5E5E5"> tank analysis call me out</font>

545
00:20:27,070 --> 00:20:32,230
<font color="#E5E5E5">if anything doesn't make sense</font><font color="#CCCCCC"> then</font>

546
00:20:30,070 --> 00:20:34,240
<font color="#E5E5E5">there's string analysis some tools have</font>

547
00:20:32,230 --> 00:20:36,970
<font color="#E5E5E5">this some don't it's much more</font>

548
00:20:34,240 --> 00:20:38,830
complicated<font color="#E5E5E5"> it's much more resource</font>

549
00:20:36,970 --> 00:20:40,480
intensive<font color="#CCCCCC"> it takes a lot longer</font><font color="#E5E5E5"> to do it</font>

550
00:20:38,830 --> 00:20:43,090
so the tools that<font color="#E5E5E5"> do have</font><font color="#CCCCCC"> it usually</font>

551
00:20:40,480 --> 00:20:45,120
have it disabled by default<font color="#CCCCCC"> but</font>

552
00:20:43,090 --> 00:20:48,070
<font color="#E5E5E5">basically it's</font><font color="#CCCCCC"> it's able</font><font color="#E5E5E5"> to trace</font>

553
00:20:45,120 --> 00:20:50,199
exactly what<font color="#E5E5E5"> part of the string is</font>

554
00:20:48,070 --> 00:20:51,789
tainted<font color="#CCCCCC"> so I know it's the format</font>

555
00:20:50,200 --> 00:20:54,130
formatting<font color="#CCCCCC"> it's a little weird here but</font>

556
00:20:51,789 --> 00:20:57,399
we know that<font color="#CCCCCC"> basically these substring</font>

557
00:20:54,130 --> 00:20:59,380
<font color="#CCCCCC">right part of</font><font color="#E5E5E5"> B this specific part of B</font>

558
00:20:57,399 --> 00:21:00,699
is now tainted and then as you go

559
00:20:59,380 --> 00:21:02,289
through<font color="#E5E5E5"> these other calls it should be</font>

560
00:21:00,700 --> 00:21:04,120
able<font color="#E5E5E5"> to tell what</font><font color="#CCCCCC"> part of</font><font color="#E5E5E5"> the string is</font>

561
00:21:02,289 --> 00:21:05,830
<font color="#CCCCCC">tainted and if that part of the string</font>

562
00:21:04,120 --> 00:21:11,020
is tainted<font color="#CCCCCC"> then you would end up with a</font>

563
00:21:05,830 --> 00:21:14,340
vulnerability<font color="#E5E5E5"> most tools are not very</font>

564
00:21:11,020 --> 00:21:14,340
<font color="#CCCCCC">good</font><font color="#E5E5E5"> at that though it's pretty advanced</font>

565
00:21:17,679 --> 00:21:23,749
it I mean<font color="#E5E5E5"> well I mean</font><font color="#CCCCCC"> it could</font><font color="#E5E5E5"> still be</font>

566
00:21:22,309 --> 00:21:25,428
reflected cross-site scripting if you

567
00:21:23,749 --> 00:21:27,799
take<font color="#E5E5E5"> something</font><font color="#CCCCCC"> from a user which is</font><font color="#E5E5E5"> then</font>

568
00:21:25,429 --> 00:21:30,799
either concatenated<font color="#E5E5E5"> or modified in some</font>

569
00:21:27,799 --> 00:21:33,470
way but<font color="#E5E5E5"> the original</font><font color="#CCCCCC"> data you know if I</font>

570
00:21:30,799 --> 00:21:36,950
<font color="#CCCCCC">if I put it pass in ten characters and</font>

571
00:21:33,470 --> 00:21:39,440
then a script tag with you know to do

572
00:21:36,950 --> 00:21:41,899
something<font color="#E5E5E5"> malicious and then another</font><font color="#CCCCCC"> ten</font>

573
00:21:39,440 --> 00:21:43,580
characters may<font color="#CCCCCC"> be the first</font><font color="#E5E5E5"> and last</font><font color="#CCCCCC"> ten</font>

574
00:21:41,899 --> 00:21:45,439
characters will<font color="#CCCCCC"> be modified by this but</font>

575
00:21:43,580 --> 00:21:53,689
my<font color="#CCCCCC"> original like my attack</font><font color="#E5E5E5"> still going</font>

576
00:21:45,440 --> 00:21:55,609
<font color="#E5E5E5">to come out yes so yeah so right well so</font>

577
00:21:53,690 --> 00:21:56,419
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not a perfect example in</font>

578
00:21:55,609 --> 00:21:57,559
that<font color="#CCCCCC"> case because</font><font color="#E5E5E5"> you're right because</font>

579
00:21:56,419 --> 00:21:59,659
<font color="#CCCCCC">we don't know actually where this</font>

580
00:21:57,559 --> 00:22:01,428
response is going<font color="#E5E5E5"> we it's going in this</font>

581
00:21:59,659 --> 00:22:03,139
case it is<font color="#E5E5E5"> I know that it's an HTTP</font>

582
00:22:01,429 --> 00:22:05,210
response because I wrote<font color="#E5E5E5"> it</font><font color="#CCCCCC"> right and</font>

583
00:22:03,139 --> 00:22:06,619
you can't see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> still you</font>

584
00:22:05,210 --> 00:22:08,119
don't<font color="#E5E5E5"> know where it's gonna</font><font color="#CCCCCC"> be in the</font>

585
00:22:06,619 --> 00:22:11,869
page or anything like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> right so it's</font>

586
00:22:08,119 --> 00:22:14,509
<font color="#CCCCCC">not</font><font color="#E5E5E5"> context aware in this case they will</font>

587
00:22:11,869 --> 00:22:16,249
in some cases<font color="#E5E5E5"> because so this is a very</font>

588
00:22:14,509 --> 00:22:18,470
simple example<font color="#E5E5E5"> but write your</font>

589
00:22:16,249 --> 00:22:20,570
applications your source is<font color="#E5E5E5"> probably</font>

590
00:22:18,470 --> 00:22:22,940
going<font color="#E5E5E5"> to start in like your JSP and your</font>

591
00:22:20,570 --> 00:22:26,149
<font color="#CCCCCC">sink might end up</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> your JSP</font><font color="#E5E5E5"> right and</font>

592
00:22:22,940 --> 00:22:28,820
so all of<font color="#CCCCCC"> the code along a log</font><font color="#E5E5E5"> that gets</font>

593
00:22:26,149 --> 00:22:33,350
called along the<font color="#CCCCCC"> way will be</font><font color="#E5E5E5"> traced if</font>

594
00:22:28,820 --> 00:22:34,639
you can do it yeah and<font color="#CCCCCC"> then there's lost</font>

595
00:22:33,350 --> 00:22:37,899
<font color="#E5E5E5">sinks and this is kind of what you were</font>

596
00:22:34,639 --> 00:22:39,889
<font color="#E5E5E5">talking about about dependencies so</font>

597
00:22:37,899 --> 00:22:42,258
<font color="#E5E5E5">intermediate representations are not</font>

598
00:22:39,889 --> 00:22:43,998
created<font color="#E5E5E5"> for external dependencies</font>

599
00:22:42,259 --> 00:22:46,580
<font color="#CCCCCC">they're only created for your code</font>

600
00:22:43,999 --> 00:22:47,359
that's compiled<font color="#CCCCCC"> because it would take</font>

601
00:22:46,580 --> 00:22:49,039
forever

602
00:22:47,359 --> 00:22:51,350
<font color="#E5E5E5">not really forever</font><font color="#CCCCCC"> it would just</font><font color="#E5E5E5"> take a</font>

603
00:22:49,039 --> 00:22:52,700
long time to produce the intermediate

604
00:22:51,350 --> 00:22:54,529
representations for all of your

605
00:22:52,700 --> 00:22:56,330
dependencies<font color="#CCCCCC"> right most enterprise</font>

606
00:22:54,529 --> 00:22:59,659
applications probably<font color="#E5E5E5"> have several</font>

607
00:22:56,330 --> 00:23:01,039
hundred libraries and<font color="#CCCCCC"> so to</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> through</font>

608
00:22:59,659 --> 00:23:03,409
all those<font color="#CCCCCC"> and</font><font color="#E5E5E5"> produce the intermediate</font>

609
00:23:01,039 --> 00:23:04,429
representations of<font color="#E5E5E5"> that connect to your</font>

610
00:23:03,409 --> 00:23:05,629
source codes intermediate

611
00:23:04,429 --> 00:23:07,369
representations would take a very very

612
00:23:05,629 --> 00:23:09,529
<font color="#CCCCCC">long time and then to go through it all</font>

613
00:23:07,369 --> 00:23:13,480
with just it would take a very very<font color="#E5E5E5"> long</font>

614
00:23:09,529 --> 00:23:16,489
<font color="#CCCCCC">time so it's mostly from from</font>

615
00:23:13,480 --> 00:23:17,989
<font color="#E5E5E5">performance reasons though I was told</font>

616
00:23:16,489 --> 00:23:20,179
once that<font color="#E5E5E5"> there may be actually like</font>

617
00:23:17,989 --> 00:23:21,730
issues with analyzing<font color="#E5E5E5"> third-party</font>

618
00:23:20,179 --> 00:23:23,809
dependencies<font color="#E5E5E5"> from a legal standpoint</font>

619
00:23:21,730 --> 00:23:26,140
<font color="#CCCCCC">without their permission so I don't I</font>

620
00:23:23,809 --> 00:23:28,510
don't<font color="#E5E5E5"> know how much that that plays</font><font color="#CCCCCC"> it</font>

621
00:23:26,140 --> 00:23:31,540
but it's not done<font color="#CCCCCC"> so anyway so if you</font>

622
00:23:28,510 --> 00:23:33,250
get to an external dependency<font color="#CCCCCC"> and that</font>

623
00:23:31,540 --> 00:23:35,980
and you don't<font color="#CCCCCC"> have a rule that tells the</font>

624
00:23:33,250 --> 00:23:37,360
tool<font color="#CCCCCC"> what happens in that</font><font color="#E5E5E5"> external</font>

625
00:23:35,980 --> 00:23:39,310
dependency<font color="#E5E5E5"> that's how you end up</font><font color="#CCCCCC"> with a</font>

626
00:23:37,360 --> 00:23:41,439
<font color="#CCCCCC">lost thing right so data flow goes to</font>

627
00:23:39,310 --> 00:23:43,179
that method<font color="#CCCCCC"> and the tools like I</font><font color="#E5E5E5"> I don't</font>

628
00:23:41,440 --> 00:23:44,830
<font color="#CCCCCC">know what</font><font color="#E5E5E5"> this method does I see you</font>

629
00:23:43,180 --> 00:23:46,960
<font color="#CCCCCC">pass something</font><font color="#E5E5E5"> in I see you have a</font>

630
00:23:44,830 --> 00:23:49,179
return value but I don't know if that

631
00:23:46,960 --> 00:23:51,100
return value<font color="#CCCCCC"> is messed up because what</font>

632
00:23:49,180 --> 00:23:54,010
you passed in was messed<font color="#E5E5E5"> up right</font><font color="#CCCCCC"> I</font>

633
00:23:51,100 --> 00:23:56,800
messed up I mean tainted right so most

634
00:23:54,010 --> 00:24:00,910
<font color="#E5E5E5">tools have a way to create rules to</font>

635
00:23:56,800 --> 00:24:02,889
<font color="#E5E5E5">determine to tell the tool what should</font>

636
00:24:00,910 --> 00:24:04,750
happen<font color="#E5E5E5"> if data flows through one of</font>

637
00:24:02,890 --> 00:24:07,030
these<font color="#E5E5E5"> external methods right the tool</font>

638
00:24:04,750 --> 00:24:09,880
<font color="#CCCCCC">vendors have huge libraries of these for</font>

639
00:24:07,030 --> 00:24:11,860
like many many<font color="#CCCCCC"> open-source tools these</font>

640
00:24:09,880 --> 00:24:13,180
rules are already<font color="#E5E5E5"> defined which is</font><font color="#CCCCCC"> why</font>

641
00:24:11,860 --> 00:24:14,889
you don't<font color="#CCCCCC"> end up with lost things all</font>

642
00:24:13,180 --> 00:24:16,510
over<font color="#CCCCCC"> the place but</font><font color="#E5E5E5"> you probably end</font><font color="#CCCCCC"> up</font>

643
00:24:14,890 --> 00:24:18,970
<font color="#E5E5E5">with a lot of them because</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> time you</font>

644
00:24:16,510 --> 00:24:20,350
reference<font color="#E5E5E5"> a library for one of your</font>

645
00:24:18,970 --> 00:24:22,990
other<font color="#CCCCCC"> applications or one of</font><font color="#E5E5E5"> your other</font>

646
00:24:20,350 --> 00:24:24,760
services<font color="#CCCCCC"> within your organization right</font>

647
00:24:22,990 --> 00:24:27,640
<font color="#E5E5E5">if you use a jar file you import that</font>

648
00:24:24,760 --> 00:24:27,910
jar<font color="#E5E5E5"> the tool doesn't know anything about</font>

649
00:24:27,640 --> 00:24:30,040
it

650
00:24:27,910 --> 00:24:32,170
<font color="#E5E5E5">so you end up with these lost things and</font>

651
00:24:30,040 --> 00:24:34,629
you have to<font color="#CCCCCC"> write rules</font><font color="#E5E5E5"> to tell the tool</font>

652
00:24:32,170 --> 00:24:37,210
that if I pass something<font color="#E5E5E5"> malicious in</font>

653
00:24:34,630 --> 00:24:38,710
here<font color="#E5E5E5"> by</font><font color="#CCCCCC"> past tainted</font><font color="#E5E5E5"> data in then I get</font>

654
00:24:37,210 --> 00:24:41,920
<font color="#CCCCCC">tainted data out where I passed into</font>

655
00:24:38,710 --> 00:24:44,170
data in and I get this<font color="#E5E5E5"> something clean</font>

656
00:24:41,920 --> 00:24:46,090
out and then if you write<font color="#E5E5E5"> those rules</font>

657
00:24:44,170 --> 00:24:47,380
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tool will know and I'll be able</font>

658
00:24:46,090 --> 00:24:49,600
<font color="#E5E5E5">to follow and will say all right well</font>

659
00:24:47,380 --> 00:24:54,460
then on<font color="#E5E5E5"> this next line</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> sink is or</font>

660
00:24:49,600 --> 00:24:56,260
is not a vulnerability because because

661
00:24:54,460 --> 00:24:59,220
it knows it can<font color="#E5E5E5"> follow the data flow all</font>

662
00:24:56,260 --> 00:25:01,810
the<font color="#E5E5E5"> way through does that make sense so</font>

663
00:24:59,220 --> 00:25:03,760
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the value that that like</font>

664
00:25:01,810 --> 00:25:05,860
professional services or if you are if

665
00:25:03,760 --> 00:25:07,930
you if your team can learn more<font color="#E5E5E5"> about</font>

666
00:25:05,860 --> 00:25:10,209
<font color="#E5E5E5">how these tools work you can write these</font>

667
00:25:07,930 --> 00:25:11,740
rules<font color="#E5E5E5"> but this is a perfect example why</font>

668
00:25:10,210 --> 00:25:15,040
these tools should<font color="#E5E5E5"> not be used</font>

669
00:25:11,740 --> 00:25:16,420
<font color="#CCCCCC">out-of-the-box some of the commercial</font>

670
00:25:15,040 --> 00:25:18,190
tools are really<font color="#CCCCCC"> good about telling you</font>

671
00:25:16,420 --> 00:25:19,750
about<font color="#CCCCCC"> law</font><font color="#E5E5E5"> sinks and a lot of them just</font>

672
00:25:18,190 --> 00:25:22,690
<font color="#E5E5E5">swallow them</font><font color="#CCCCCC"> and pretend they're not</font>

673
00:25:19,750 --> 00:25:23,980
<font color="#E5E5E5">there so really depends on the tool</font>

674
00:25:22,690 --> 00:25:25,330
you're<font color="#E5E5E5"> using about whether or not you'd</font>

675
00:25:23,980 --> 00:25:27,910
even<font color="#E5E5E5"> see this somewhere in the user</font>

676
00:25:25,330 --> 00:25:29,560
interface<font color="#CCCCCC"> that there are lost things you</font>

677
00:25:27,910 --> 00:25:31,300
might<font color="#E5E5E5"> just have</font><font color="#CCCCCC"> to know these are the</font>

678
00:25:29,560 --> 00:25:33,159
libraries we're using that<font color="#E5E5E5"> word that we</font>

679
00:25:31,300 --> 00:25:35,530
wrote<font color="#E5E5E5"> and we're importing</font><font color="#CCCCCC"> we need to</font>

680
00:25:33,160 --> 00:25:36,970
write rules for them that's where like

681
00:25:35,530 --> 00:25:38,450
that<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of that expert level for</font>

682
00:25:36,970 --> 00:25:39,920
static analysis can come in and tell you

683
00:25:38,450 --> 00:25:41,720
these are the<font color="#E5E5E5"> rules you</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to write</font>

684
00:25:39,920 --> 00:25:42,440
and<font color="#E5E5E5"> this is what they should be and</font>

685
00:25:41,720 --> 00:25:43,670
they'll need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work with your</font>

686
00:25:42,440 --> 00:25:45,110
<font color="#E5E5E5">development teams because they'll need</font>

687
00:25:43,670 --> 00:25:47,060
to<font color="#CCCCCC"> know this information right</font><font color="#E5E5E5"> I don't</font>

688
00:25:45,110 --> 00:25:48,830
<font color="#E5E5E5">know about your external method calls if</font>

689
00:25:47,060 --> 00:25:50,149
<font color="#E5E5E5">they're I don't</font><font color="#CCCCCC"> know what they do</font><font color="#E5E5E5"> so</font>

690
00:25:48,830 --> 00:25:52,429
unless<font color="#CCCCCC"> you give me the source code or</font>

691
00:25:50,150 --> 00:25:57,620
someone to talk to<font color="#E5E5E5"> about it I can't I</font>

692
00:25:52,430 --> 00:25:59,690
can't<font color="#E5E5E5"> read rules so again one of the</font>

693
00:25:57,620 --> 00:26:01,280
positives about static analysis<font color="#E5E5E5"> and one</font>

694
00:25:59,690 --> 00:26:03,740
of the negatives<font color="#E5E5E5"> everything is checked</font>

695
00:26:01,280 --> 00:26:06,410
<font color="#CCCCCC">all right every potential data flow in</font>

696
00:26:03,740 --> 00:26:07,970
your application is checked<font color="#E5E5E5"> almost there</font>

697
00:26:06,410 --> 00:26:10,760
<font color="#E5E5E5">there are some changes for performance</font>

698
00:26:07,970 --> 00:26:12,080
<font color="#CCCCCC">reasons right</font><font color="#E5E5E5"> because every every</font>

699
00:26:10,760 --> 00:26:14,000
conditional statement in your

700
00:26:12,080 --> 00:26:16,460
application generates<font color="#E5E5E5"> totally different</font>

701
00:26:14,000 --> 00:26:18,320
trees that your data and control<font color="#E5E5E5"> flow</font>

702
00:26:16,460 --> 00:26:20,120
can go through and so the bigger your

703
00:26:18,320 --> 00:26:22,929
application<font color="#E5E5E5"> the more conditional</font>

704
00:26:20,120 --> 00:26:22,929
statements you<font color="#CCCCCC"> have in your</font><font color="#E5E5E5"> application</font>

705
00:27:19,430 --> 00:27:22,430
check

706
00:27:31,670 --> 00:27:43,310
<font color="#E5E5E5">this design so so the benefit of this is</font>

707
00:27:41,780 --> 00:27:45,080
<font color="#E5E5E5">that you're gonna check all of your edge</font>

708
00:27:43,310 --> 00:27:48,679
cases<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the things that you think this</font>

709
00:27:45,080 --> 00:27:50,120
could never happen<font color="#E5E5E5"> in</font><font color="#CCCCCC"> my application I'm</font>

710
00:27:48,680 --> 00:27:51,830
not saying that<font color="#E5E5E5"> analysis is good at</font>

711
00:27:50,120 --> 00:27:54,050
finding like malicious<font color="#E5E5E5"> code but it's</font>

712
00:27:51,830 --> 00:27:55,460
more likely<font color="#E5E5E5"> to find it then your other</font>

713
00:27:54,050 --> 00:27:57,139
methods because it's going<font color="#E5E5E5"> to check</font>

714
00:27:55,460 --> 00:27:59,510
things<font color="#E5E5E5"> that you're</font><font color="#CCCCCC"> not typically</font>

715
00:27:57,140 --> 00:28:02,360
executing during QA<font color="#E5E5E5"> your other security</font>

716
00:27:59,510 --> 00:28:03,830
tests<font color="#E5E5E5"> so there is</font><font color="#CCCCCC"> value here</font><font color="#E5E5E5"> but that's</font>

717
00:28:02,360 --> 00:28:18,649
<font color="#E5E5E5">also</font><font color="#CCCCCC"> part of the reason</font><font color="#E5E5E5"> you'll get back</font>

718
00:28:03,830 --> 00:28:22,129
<font color="#E5E5E5">positives</font><font color="#CCCCCC"> sorry so now back to</font><font color="#E5E5E5"> those</font>

719
00:28:18,650 --> 00:28:26,120
<font color="#CCCCCC">questions that I asked earlier why does</font>

720
00:28:22,130 --> 00:28:27,680
static analysis<font color="#E5E5E5"> take so long</font><font color="#CCCCCC"> it's a long</font>

721
00:28:26,120 --> 00:28:29,899
<font color="#E5E5E5">process right the whole application</font><font color="#CCCCCC"> is</font>

722
00:28:27,680 --> 00:28:31,820
compiled first so it's<font color="#E5E5E5"> always going to</font>

723
00:28:29,900 --> 00:28:33,830
take<font color="#E5E5E5"> minimally as long as it takes</font><font color="#CCCCCC"> for</font>

724
00:28:31,820 --> 00:28:35,350
<font color="#E5E5E5">you to compile your application which</font>

725
00:28:33,830 --> 00:28:37,909
for larger applications<font color="#CCCCCC"> can be a while</font>

726
00:28:35,350 --> 00:28:39,980
then the whole<font color="#E5E5E5"> code base has to</font><font color="#CCCCCC"> be</font>

727
00:28:37,910 --> 00:28:43,160
<font color="#E5E5E5">translated into one or more intermediate</font>

728
00:28:39,980 --> 00:28:44,540
formats which is a long process<font color="#CCCCCC"> and then</font>

729
00:28:43,160 --> 00:28:45,920
it's a multi-step<font color="#CCCCCC"> process to analyze</font>

730
00:28:44,540 --> 00:28:47,780
that you do all of<font color="#CCCCCC"> your regular</font>

731
00:28:45,920 --> 00:28:50,390
expression checking control flow

732
00:28:47,780 --> 00:28:52,220
analysis data flow analysis and<font color="#CCCCCC"> you're</font>

733
00:28:50,390 --> 00:28:54,140
checking<font color="#E5E5E5"> every path with</font><font color="#CCCCCC"> all these types</font>

734
00:28:52,220 --> 00:28:56,480
of analysis then<font color="#CCCCCC"> you have to produce</font>

735
00:28:54,140 --> 00:28:58,100
your findings report which you<font color="#CCCCCC"> know when</font>

736
00:28:56,480 --> 00:29:02,480
you find<font color="#CCCCCC"> 50,000 findings can</font><font color="#E5E5E5"> take a</font>

737
00:28:58,100 --> 00:29:03,800
while<font color="#CCCCCC"> to produce ever</font><font color="#E5E5E5"> report so so it</font>

738
00:29:02,480 --> 00:29:05,420
takes a<font color="#E5E5E5"> while but there are there are</font>

739
00:29:03,800 --> 00:29:06,590
<font color="#E5E5E5">some some positives for it but I'm</font>

740
00:29:05,420 --> 00:29:07,910
<font color="#E5E5E5">hoping that</font><font color="#CCCCCC"> if you understand why it</font>

741
00:29:06,590 --> 00:29:11,090
takes so long<font color="#E5E5E5"> maybe you'll be a little</font>

742
00:29:07,910 --> 00:29:12,110
bit more patient<font color="#E5E5E5"> with the time and then</font>

743
00:29:11,090 --> 00:29:14,179
why does it<font color="#E5E5E5"> produce so many false</font>

744
00:29:12,110 --> 00:29:16,010
positives<font color="#CCCCCC"> again</font><font color="#E5E5E5"> every potential flow is</font>

745
00:29:14,180 --> 00:29:17,510
checked<font color="#E5E5E5"> which can be you know you're</font>

746
00:29:16,010 --> 00:29:19,250
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> probably hundreds of</font>

747
00:29:17,510 --> 00:29:20,570
thousands<font color="#E5E5E5"> or millions of potential data</font>

748
00:29:19,250 --> 00:29:22,250
flows within your application that<font color="#E5E5E5"> are</font>

749
00:29:20,570 --> 00:29:24,919
<font color="#E5E5E5">all checked within it takes a couple</font>

750
00:29:22,250 --> 00:29:28,510
hours<font color="#E5E5E5"> because they don't know which</font>

751
00:29:24,920 --> 00:29:28,510
which logic will<font color="#CCCCCC"> be executed at</font><font color="#E5E5E5"> runtime</font>

752
00:29:29,560 --> 00:29:34,520
they don't know which sources your

753
00:29:31,820 --> 00:29:36,260
business trusts<font color="#E5E5E5"> right so should I eat</font>

754
00:29:34,520 --> 00:29:38,600
should I trust data that comes<font color="#CCCCCC"> from your</font>

755
00:29:36,260 --> 00:29:41,030
<font color="#E5E5E5">database your database may be populated</font>

756
00:29:38,600 --> 00:29:42,679
<font color="#CCCCCC">by you</font><font color="#E5E5E5"> right and</font><font color="#CCCCCC"> you may be you or maybe</font>

757
00:29:41,030 --> 00:29:43,250
I<font color="#CCCCCC"> don't trust you to populate your</font>

758
00:29:42,680 --> 00:29:44,750
database

759
00:29:43,250 --> 00:29:45,350
it could be populated by<font color="#E5E5E5"> another</font>

760
00:29:44,750 --> 00:29:47,419
<font color="#E5E5E5">application</font>

761
00:29:45,350 --> 00:29:48,830
<font color="#E5E5E5">service which may or may</font><font color="#CCCCCC"> not have the</font>

762
00:29:47,419 --> 00:29:51,289
necessary<font color="#E5E5E5"> controls to make sure that</font>

763
00:29:48,830 --> 00:29:53,299
<font color="#E5E5E5">data that goes in is not malicious</font><font color="#CCCCCC"> come</font>

764
00:29:51,289 --> 00:29:54,620
from figuration files<font color="#E5E5E5"> that come from</font>

765
00:29:53,299 --> 00:29:56,330
users<font color="#CCCCCC"> I don't know</font>

766
00:29:54,620 --> 00:29:58,340
so most static analysis tools will by

767
00:29:56,330 --> 00:30:02,168
<font color="#CCCCCC">default not trust any</font><font color="#E5E5E5"> sources like</font>

768
00:29:58,340 --> 00:30:02,168
<font color="#E5E5E5">databases and configuration</font><font color="#CCCCCC"> files yeah</font>

769
00:30:03,220 --> 00:30:06,520
you most

770
00:30:06,640 --> 00:30:11,360
so the triage that's that's the triage

771
00:30:09,260 --> 00:30:14,150
process<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the scans run</font><font color="#E5E5E5"> you can</font>

772
00:30:11,360 --> 00:30:16,219
definitely<font color="#CCCCCC"> do that for some tools you</font>

773
00:30:14,150 --> 00:30:18,200
<font color="#E5E5E5">can also specify what sources should and</font>

774
00:30:16,220 --> 00:30:19,940
should not<font color="#CCCCCC"> be</font><font color="#E5E5E5"> trusted but the triage</font>

775
00:30:18,200 --> 00:30:22,250
<font color="#CCCCCC">process is</font><font color="#E5E5E5"> really important</font><font color="#CCCCCC"> I think</font>

776
00:30:19,940 --> 00:30:25,340
we'll talk about<font color="#E5E5E5"> that a little bit</font><font color="#CCCCCC"> also</font>

777
00:30:22,250 --> 00:30:27,500
but yes<font color="#E5E5E5"> you should definitely be</font><font color="#CCCCCC"> doing</font>

778
00:30:25,340 --> 00:30:28,850
either manual<font color="#CCCCCC"> or automated triage and</font>

779
00:30:27,500 --> 00:30:30,020
<font color="#E5E5E5">that could definitely be part of it if</font>

780
00:30:28,850 --> 00:30:33,049
there are certain<font color="#E5E5E5"> sources you want to</font>

781
00:30:30,020 --> 00:30:35,150
trust<font color="#CCCCCC"> and others</font><font color="#E5E5E5"> that you don't and</font>

782
00:30:33,049 --> 00:30:36,770
that's well<font color="#CCCCCC"> yeah okay</font><font color="#E5E5E5"> so that's exactly</font>

783
00:30:35,150 --> 00:30:38,360
the last point<font color="#CCCCCC"> as most sass tools are</font>

784
00:30:36,770 --> 00:30:39,980
architected<font color="#CCCCCC"> to have some sort of</font>

785
00:30:38,360 --> 00:30:43,729
<font color="#CCCCCC">post-processing</font><font color="#E5E5E5"> which is the triage</font>

786
00:30:39,980 --> 00:30:45,080
<font color="#CCCCCC">process after</font><font color="#E5E5E5"> the scan</font><font color="#CCCCCC"> is run</font><font color="#E5E5E5"> these are</font>

787
00:30:43,730 --> 00:30:47,030
the results are<font color="#E5E5E5"> not designed to</font><font color="#CCCCCC"> be</font>

788
00:30:45,080 --> 00:30:49,220
delivered to<font color="#E5E5E5"> developers I think a lot</font><font color="#CCCCCC"> of</font>

789
00:30:47,030 --> 00:30:50,780
static analysis vendors for a<font color="#E5E5E5"> couple</font>

790
00:30:49,220 --> 00:30:52,220
<font color="#E5E5E5">years</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> like oh we can give these</font>

791
00:30:50,780 --> 00:30:55,190
tools to developers they wrote<font color="#CCCCCC"> ID</font>

792
00:30:52,220 --> 00:30:58,059
<font color="#CCCCCC">plug-ins for</font><font color="#E5E5E5"> their developers</font><font color="#CCCCCC"> that's a</font>

793
00:30:55,190 --> 00:30:59,809
failed experiment in my experience

794
00:30:58,059 --> 00:31:01,428
<font color="#E5E5E5">developers should generally</font><font color="#CCCCCC"> not be</font>

795
00:30:59,809 --> 00:31:02,480
<font color="#CCCCCC">running these in their IDs</font><font color="#E5E5E5"> because</font>

796
00:31:01,429 --> 00:31:03,650
<font color="#E5E5E5">they're gonna get too many false</font>

797
00:31:02,480 --> 00:31:05,059
positives<font color="#CCCCCC"> so</font><font color="#E5E5E5"> they're not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know</font>

798
00:31:03,650 --> 00:31:06,710
how<font color="#E5E5E5"> to handle and they're going to be</font>

799
00:31:05,059 --> 00:31:08,120
spending<font color="#CCCCCC"> too much time trying</font><font color="#E5E5E5"> to figure</font>

800
00:31:06,710 --> 00:31:10,789
<font color="#CCCCCC">out which ones they shouldn't should</font><font color="#E5E5E5"> not</font>

801
00:31:08,120 --> 00:31:13,039
resolve instead of you<font color="#E5E5E5"> know writing</font>

802
00:31:10,789 --> 00:31:14,240
secure code<font color="#E5E5E5"> I mean there are better</font>

803
00:31:13,039 --> 00:31:17,030
there<font color="#CCCCCC"> are better ways to</font><font color="#E5E5E5"> spend their</font>

804
00:31:14,240 --> 00:31:18,799
time so I would not<font color="#CCCCCC"> recommend the</font>

805
00:31:17,030 --> 00:31:20,270
commercial tools at least<font color="#E5E5E5"> is really what</font>

806
00:31:18,799 --> 00:31:22,429
I'm talking<font color="#CCCCCC"> about if you if you use the</font>

807
00:31:20,270 --> 00:31:24,350
<font color="#E5E5E5">open</font><font color="#CCCCCC"> source tools they're usually not</font><font color="#E5E5E5"> as</font>

808
00:31:22,429 --> 00:31:26,409
as<font color="#CCCCCC"> error-prone or you can tweak</font><font color="#E5E5E5"> them a</font>

809
00:31:24,350 --> 00:31:28,309
little bit<font color="#E5E5E5"> more and they're faster</font>

810
00:31:26,409 --> 00:31:29,809
because they're<font color="#E5E5E5"> not looking</font><font color="#CCCCCC"> for as</font><font color="#E5E5E5"> much</font>

811
00:31:28,309 --> 00:31:33,678
usually<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have the data flow and</font>

812
00:31:29,809 --> 00:31:34,549
control<font color="#E5E5E5"> flow analysis so yes but you</font>

813
00:31:33,679 --> 00:31:36,190
should definitely<font color="#CCCCCC"> be doing</font><font color="#E5E5E5"> some</font>

814
00:31:34,549 --> 00:31:38,418
post-processing

815
00:31:36,190 --> 00:31:41,480
so there's interprocedural and

816
00:31:38,419 --> 00:31:42,500
interprocedural analysis<font color="#E5E5E5"> so they're big</font>

817
00:31:41,480 --> 00:31:43,940
words but it's<font color="#E5E5E5"> pretty simple</font>

818
00:31:42,500 --> 00:31:45,289
interprocedural just means<font color="#E5E5E5"> that you're</font>

819
00:31:43,940 --> 00:31:47,210
looking<font color="#CCCCCC"> at the entire application</font><font color="#E5E5E5"> the</font>

820
00:31:45,289 --> 00:31:48,350
whole system<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so that's what your</font>

821
00:31:47,210 --> 00:31:50,270
commercial tools are<font color="#E5E5E5"> going to do you're</font>

822
00:31:48,350 --> 00:31:51,799
gonna pass in<font color="#CCCCCC"> your entire code base</font><font color="#E5E5E5"> the</font>

823
00:31:50,270 --> 00:31:53,330
entire<font color="#E5E5E5"> thing is going</font><font color="#CCCCCC"> to get scanned</font><font color="#E5E5E5"> and</font>

824
00:31:51,799 --> 00:31:55,580
it's going<font color="#E5E5E5"> to be able to trace your data</font>

825
00:31:53,330 --> 00:31:58,250
flow from one entry<font color="#E5E5E5"> point through</font>

826
00:31:55,580 --> 00:31:59,129
multiple classes and frameworks<font color="#CCCCCC"> to its</font>

827
00:31:58,250 --> 00:32:01,650
exit point

828
00:31:59,130 --> 00:32:03,690
whereas interprocedural analysis is

829
00:32:01,650 --> 00:32:07,050
usually<font color="#CCCCCC"> just checking</font><font color="#E5E5E5"> a file or a</font>

830
00:32:03,690 --> 00:32:08,610
function or something<font color="#E5E5E5"> much</font><font color="#CCCCCC"> smaller</font><font color="#E5E5E5"> so</font>

831
00:32:07,050 --> 00:32:11,720
most of the<font color="#CCCCCC"> commercial tools probably</font>

832
00:32:08,610 --> 00:32:14,100
all of<font color="#CCCCCC"> them</font><font color="#E5E5E5"> are interprocedural tools</font>

833
00:32:11,720 --> 00:32:15,540
<font color="#CCCCCC">and most of the open-source tools though</font>

834
00:32:14,100 --> 00:32:17,159
not all of<font color="#CCCCCC"> them are interprocedural</font>

835
00:32:15,540 --> 00:32:37,490
meaning you're looking at one file at a

836
00:32:17,160 --> 00:32:40,140
time<font color="#E5E5E5"> or one function at a time right</font><font color="#CCCCCC"> so</font>

837
00:32:37,490 --> 00:32:42,060
<font color="#CCCCCC">it's it's an</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> question so</font><font color="#E5E5E5"> the</font>

838
00:32:40,140 --> 00:32:44,010
question<font color="#CCCCCC"> is if you have I mean</font><font color="#E5E5E5"> even</font>

839
00:32:42,060 --> 00:32:46,080
<font color="#E5E5E5">before</font><font color="#CCCCCC"> micro-services right you can have</font>

840
00:32:44,010 --> 00:32:47,910
<font color="#CCCCCC">applications that</font><font color="#E5E5E5"> have right SOA but</font>

841
00:32:46,080 --> 00:32:50,250
they're like multiple components for an

842
00:32:47,910 --> 00:32:51,780
application<font color="#E5E5E5"> figuring out how</font><font color="#CCCCCC"> to scan</font>

843
00:32:50,250 --> 00:32:54,690
that application what your strategy is

844
00:32:51,780 --> 00:32:56,820
<font color="#E5E5E5">it's a thought process</font><font color="#CCCCCC"> right do i scan</font>

845
00:32:54,690 --> 00:32:57,900
this whole thing at once<font color="#CCCCCC"> right then I</font>

846
00:32:56,820 --> 00:32:59,280
get all<font color="#E5E5E5"> these findings</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I have to</font>

847
00:32:57,900 --> 00:33:01,800
split them<font color="#E5E5E5"> up and give</font><font color="#CCCCCC"> them to the right</font>

848
00:32:59,280 --> 00:33:05,280
groups to resolve issues or can<font color="#E5E5E5"> I scan</font>

849
00:33:01,800 --> 00:33:06,810
each one individually<font color="#E5E5E5"> and and correlate</font>

850
00:33:05,280 --> 00:33:09,030
somehow<font color="#E5E5E5"> but the problem is like you said</font>

851
00:33:06,810 --> 00:33:10,020
then each one becomes<font color="#E5E5E5"> a dependency</font><font color="#CCCCCC"> of</font>

852
00:33:09,030 --> 00:33:11,129
<font color="#CCCCCC">the other and</font><font color="#E5E5E5"> remember we're not</font>

853
00:33:10,020 --> 00:33:13,139
<font color="#E5E5E5">building those intermediate</font>

854
00:33:11,130 --> 00:33:14,790
representations for dependencies which

855
00:33:13,140 --> 00:33:16,710
means that you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to write custom</font>

856
00:33:14,790 --> 00:33:20,760
<font color="#E5E5E5">rules to say that the</font><font color="#CCCCCC"> output from this</font>

857
00:33:16,710 --> 00:33:23,090
service is clean or is not clean<font color="#E5E5E5"> etc you</font>

858
00:33:20,760 --> 00:33:26,430
<font color="#E5E5E5">need to do that for all</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> services so</font>

859
00:33:23,090 --> 00:33:28,679
<font color="#E5E5E5">it's a</font><font color="#CCCCCC"> toss up it's a conversation but</font>

860
00:33:26,430 --> 00:33:30,570
no matter what<font color="#E5E5E5"> you do I'm not trying to</font>

861
00:33:28,680 --> 00:33:32,940
sell static analysis to anyone here

862
00:33:30,570 --> 00:33:34,830
<font color="#CCCCCC">they're there there are clear benefits</font>

863
00:33:32,940 --> 00:33:37,890
for it for me and there are<font color="#E5E5E5"> clear</font>

864
00:33:34,830 --> 00:33:39,419
drawbacks and I'm<font color="#CCCCCC"> gonna drill this in</font>

865
00:33:37,890 --> 00:33:41,280
later but<font color="#E5E5E5"> this is only a part of your</font>

866
00:33:39,420 --> 00:33:42,750
application security<font color="#E5E5E5"> program this is</font>

867
00:33:41,280 --> 00:33:44,100
only one<font color="#E5E5E5"> of the tools in your tool belt</font>

868
00:33:42,750 --> 00:33:48,630
that<font color="#E5E5E5"> you should be using</font><font color="#CCCCCC"> you're not</font>

869
00:33:44,100 --> 00:33:50,760
going<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> full coverage with it so</font>

870
00:33:48,630 --> 00:33:54,240
now<font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to talk about PMD</font><font color="#E5E5E5"> has</font>

871
00:33:50,760 --> 00:33:58,080
anyone used PMD yeah a little bit<font color="#E5E5E5"> okay</font>

872
00:33:54,240 --> 00:34:00,540
so<font color="#E5E5E5"> what is PMD this comes from their</font>

873
00:33:58,080 --> 00:34:02,550
website<font color="#CCCCCC"> you can see basically by the</font>

874
00:34:00,540 --> 00:34:04,440
description<font color="#E5E5E5"> it's used it's used</font><font color="#CCCCCC"> for</font>

875
00:34:02,550 --> 00:34:07,680
unused variables<font color="#E5E5E5"> empty</font><font color="#CCCCCC"> cache block</font>

876
00:34:04,440 --> 00:34:10,610
unnecessary object creation<font color="#CCCCCC"> it's not a</font>

877
00:34:07,680 --> 00:34:10,610
security<font color="#E5E5E5"> testing tool</font>

878
00:34:11,120 --> 00:34:15,770
so<font color="#CCCCCC"> it's it is an open-source</font><font color="#E5E5E5"> tool</font><font color="#CCCCCC"> I was</font>

879
00:34:14,690 --> 00:34:17,090
<font color="#E5E5E5">reading a source code for it the other</font>

880
00:34:15,770 --> 00:34:18,380
day actually<font color="#E5E5E5"> it's pretty</font><font color="#CCCCCC"> interesting if</font>

881
00:34:17,090 --> 00:34:21,620
you want to learn<font color="#E5E5E5"> how static analysis</font>

882
00:34:18,380 --> 00:34:27,080
works<font color="#E5E5E5"> which I didn't realize how I</font>

883
00:34:21,620 --> 00:34:28,489
didn't know before this<font color="#E5E5E5"> so anyway so but</font>

884
00:34:27,080 --> 00:34:30,469
the<font color="#CCCCCC"> reason I chose it even though it's</font>

885
00:34:28,489 --> 00:34:31,759
not a security<font color="#E5E5E5"> tool is that's exactly</font>

886
00:34:30,469 --> 00:34:33,709
<font color="#CCCCCC">the point</font>

887
00:34:31,760 --> 00:34:37,010
not every<font color="#E5E5E5"> tool in your security tool</font>

888
00:34:33,710 --> 00:34:41,120
belt<font color="#E5E5E5"> has to be used</font><font color="#CCCCCC"> has to</font><font color="#E5E5E5"> be a security</font>

889
00:34:37,010 --> 00:34:42,440
focused tool<font color="#CCCCCC"> there's a place for these</font>

890
00:34:41,120 --> 00:34:44,810
tools elsewhere right like you may be

891
00:34:42,440 --> 00:34:47,420
using PMD in your CI environment<font color="#E5E5E5"> anyway</font>

892
00:34:44,810 --> 00:34:50,449
<font color="#CCCCCC">your developers may be running PMD tests</font>

893
00:34:47,420 --> 00:34:52,340
<font color="#E5E5E5">already in their IDE</font><font color="#CCCCCC"> so why not</font><font color="#E5E5E5"> just</font>

894
00:34:50,449 --> 00:34:53,960
<font color="#E5E5E5">write a couple security tests for</font><font color="#CCCCCC"> it and</font>

895
00:34:52,340 --> 00:34:56,090
then you're getting<font color="#CCCCCC"> that security</font>

896
00:34:53,960 --> 00:34:57,530
<font color="#E5E5E5">coverage for free right</font><font color="#CCCCCC"> there already</font>

897
00:34:56,090 --> 00:34:59,030
being run there's no overhead and

898
00:34:57,530 --> 00:35:00,680
there's the only cost<font color="#E5E5E5"> is writing the</font>

899
00:34:59,030 --> 00:35:05,180
rules so we're gonna walk<font color="#CCCCCC"> through</font>

900
00:35:00,680 --> 00:35:06,350
writing<font color="#E5E5E5"> writing a rule so I want to</font><font color="#CCCCCC"> just</font>

901
00:35:05,180 --> 00:35:09,169
give a quick<font color="#CCCCCC"> shout</font><font color="#E5E5E5"> out this is one</font><font color="#CCCCCC"> of</font>

902
00:35:06,350 --> 00:35:13,190
our competitors like<font color="#E5E5E5"> Gotham</font><font color="#CCCCCC"> Sciences</font>

903
00:35:09,170 --> 00:35:14,540
this<font color="#E5E5E5"> is the only open source group of</font>

904
00:35:13,190 --> 00:35:18,170
PMD rules that I could find<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font>

905
00:35:14,540 --> 00:35:20,630
<font color="#CCCCCC">Internet at all</font><font color="#E5E5E5"> for security so I</font>

906
00:35:18,170 --> 00:35:22,460
<font color="#E5E5E5">haven't used them but I did go through</font>

907
00:35:20,630 --> 00:35:24,980
<font color="#E5E5E5">their code and they have it looks pretty</font>

908
00:35:22,460 --> 00:35:26,000
good<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I just wanted</font><font color="#E5E5E5"> to give them a</font>

909
00:35:24,980 --> 00:35:29,000
<font color="#E5E5E5">shout out</font><font color="#CCCCCC"> because I think they're doing</font>

910
00:35:26,000 --> 00:35:34,100
<font color="#CCCCCC">things right even though you could still</font>

911
00:35:29,000 --> 00:35:35,570
you know come to<font color="#E5E5E5"> a spec not that so so</font>

912
00:35:34,100 --> 00:35:37,190
we're<font color="#E5E5E5"> gonna write a PMD rule I was</font>

913
00:35:35,570 --> 00:35:38,840
actually<font color="#E5E5E5"> gonna write it with you like on</font>

914
00:35:37,190 --> 00:35:40,580
my screen through<font color="#E5E5E5"> eclipse</font>

915
00:35:38,840 --> 00:35:42,320
but I thought it would be too<font color="#E5E5E5"> slow and</font>

916
00:35:40,580 --> 00:35:43,520
<font color="#CCCCCC">you probably</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> really bored so</font><font color="#E5E5E5"> instead</font>

917
00:35:42,320 --> 00:35:45,370
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that I'm just</font><font color="#CCCCCC"> gonna kind of walk</font>

918
00:35:43,520 --> 00:35:47,660
<font color="#E5E5E5">through the creation of it</font>

919
00:35:45,370 --> 00:35:51,049
so some assumptions here<font color="#E5E5E5"> let's say we</font>

920
00:35:47,660 --> 00:35:53,240
<font color="#CCCCCC">where we work for an organization all</font><font color="#E5E5E5"> of</font>

921
00:35:51,050 --> 00:35:55,190
our applications<font color="#CCCCCC"> you spring right this</font>

922
00:35:53,240 --> 00:35:59,540
is a simplified<font color="#E5E5E5"> example and we have a</font>

923
00:35:55,190 --> 00:36:01,850
<font color="#E5E5E5">policy that says that and so in spring</font>

924
00:35:59,540 --> 00:36:07,160
when you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to map</font><font color="#E5E5E5"> a particular</font>

925
00:36:01,850 --> 00:36:09,799
function to a particular<font color="#E5E5E5"> endpoint web</font>

926
00:36:07,160 --> 00:36:11,390
endpoint like slash<font color="#E5E5E5"> whatever right you</font>

927
00:36:09,800 --> 00:36:14,750
use this request request mapping

928
00:36:11,390 --> 00:36:16,910
annotation functions<font color="#E5E5E5"> lacking the method</font>

929
00:36:14,750 --> 00:36:18,860
variable as part of this annotation<font color="#E5E5E5"> are</font>

930
00:36:16,910 --> 00:36:21,710
available to all<font color="#CCCCCC"> HDB</font><font color="#E5E5E5"> unit that's right</font>

931
00:36:18,860 --> 00:36:23,000
<font color="#E5E5E5">so post and get delete put and we want</font>

932
00:36:21,710 --> 00:36:23,780
to limit<font color="#CCCCCC"> that so we want to say that</font>

933
00:36:23,000 --> 00:36:25,700
only

934
00:36:23,780 --> 00:36:28,130
our organization we have a policy<font color="#CCCCCC"> that</font>

935
00:36:25,700 --> 00:36:30,350
<font color="#CCCCCC">you have to use get end or</font><font color="#E5E5E5"> post you</font><font color="#CCCCCC"> have</font>

936
00:36:28,130 --> 00:36:32,000
to use one of those<font color="#CCCCCC"> two nothing else</font><font color="#E5E5E5"> and</font>

937
00:36:30,350 --> 00:36:32,839
you<font color="#E5E5E5"> have to specify at least one of them</font>

938
00:36:32,000 --> 00:36:34,490
<font color="#E5E5E5">right</font>

939
00:36:32,840 --> 00:36:36,080
I don't know how applicable<font color="#CCCCCC"> that rule is</font>

940
00:36:34,490 --> 00:36:39,200
to<font color="#E5E5E5"> anyone if you use other methods but</font>

941
00:36:36,080 --> 00:36:41,480
it's you<font color="#E5E5E5"> know it's an example so step</font>

942
00:36:39,200 --> 00:36:42,649
<font color="#E5E5E5">one we</font><font color="#CCCCCC"> have to write</font><font color="#E5E5E5"> our test case and</font>

943
00:36:41,480 --> 00:36:44,210
this<font color="#E5E5E5"> is not just because</font><font color="#CCCCCC"> I like</font>

944
00:36:42,650 --> 00:36:45,470
test-driven development but also<font color="#E5E5E5"> this is</font>

945
00:36:44,210 --> 00:36:47,240
just<font color="#CCCCCC"> how</font><font color="#E5E5E5"> PMD works you have to write a</font>

946
00:36:45,470 --> 00:36:49,939
test case in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to generate what you</font>

947
00:36:47,240 --> 00:36:51,950
need to write the<font color="#CCCCCC"> actual stuff so I came</font>

948
00:36:49,940 --> 00:36:53,720
up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> five test cases for</font><font color="#CCCCCC"> this there's</font>

949
00:36:51,950 --> 00:36:55,609
two<font color="#CCCCCC"> more in the next</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> generally</font>

950
00:36:53,720 --> 00:36:57,379
<font color="#E5E5E5">you have a correct method right this is</font>

951
00:36:55,610 --> 00:36:59,840
what we want<font color="#E5E5E5"> our developers to do and</font>

952
00:36:57,380 --> 00:37:01,670
you could see method request method post

953
00:36:59,840 --> 00:37:04,010
is in<font color="#E5E5E5"> there this is incorrect because</font>

954
00:37:01,670 --> 00:37:06,500
<font color="#E5E5E5">we're specifying delete this</font><font color="#CCCCCC"> has nothing</font>

955
00:37:04,010 --> 00:37:08,030
we<font color="#E5E5E5"> don't want that</font><font color="#CCCCCC"> now it's like well</font>

956
00:37:06,500 --> 00:37:10,370
what<font color="#E5E5E5"> if they specify</font><font color="#CCCCCC"> multiple methods</font>

957
00:37:08,030 --> 00:37:11,900
this<font color="#E5E5E5"> is this is also correct with</font>

958
00:37:10,370 --> 00:37:13,490
multiple and this is incorrect<font color="#E5E5E5"> with</font>

959
00:37:11,900 --> 00:37:16,340
multiple<font color="#E5E5E5"> right because we have to leak</font>

960
00:37:13,490 --> 00:37:19,549
here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> all right first I</font><font color="#E5E5E5"> wrote those</font>

961
00:37:16,340 --> 00:37:21,980
<font color="#E5E5E5">and then you have</font><font color="#CCCCCC"> to general general</font>

962
00:37:19,550 --> 00:37:24,530
<font color="#E5E5E5">generate and analyze the abstract syntax</font>

963
00:37:21,980 --> 00:37:25,910
tree that PMD can produce and there's a

964
00:37:24,530 --> 00:37:27,620
utility<font color="#CCCCCC"> that</font><font color="#E5E5E5"> comes with PMD called</font>

965
00:37:25,910 --> 00:37:28,970
designer<font color="#E5E5E5"> that will that</font><font color="#CCCCCC"> will show you</font>

966
00:37:27,620 --> 00:37:30,589
how<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> what this next</font>

967
00:37:28,970 --> 00:37:32,569
<font color="#E5E5E5">slide is basically after reverse</font>

968
00:37:30,590 --> 00:37:34,010
engineer what you wrote<font color="#E5E5E5"> so this is what</font>

969
00:37:32,570 --> 00:37:36,800
an abstract<font color="#E5E5E5"> syntax tree looks like</font>

970
00:37:34,010 --> 00:37:38,360
<font color="#E5E5E5">coming out of PMD</font><font color="#CCCCCC"> general format is the</font>

971
00:37:36,800 --> 00:37:40,190
<font color="#CCCCCC">same for abstract syntax trees but the</font>

972
00:37:38,360 --> 00:37:42,050
variable like the names may be different

973
00:37:40,190 --> 00:37:45,110
right PMD<font color="#CCCCCC"> causes a class or interface</font>

974
00:37:42,050 --> 00:37:46,850
body it could be called<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> foo</font>

975
00:37:45,110 --> 00:37:48,620
<font color="#E5E5E5">somewhere else right that's not</font>

976
00:37:46,850 --> 00:37:51,890
<font color="#CCCCCC">standardized</font><font color="#E5E5E5"> the name I'm definitely</font>

977
00:37:48,620 --> 00:37:54,140
going<font color="#CCCCCC"> over my time just so if I don't</font>

978
00:37:51,890 --> 00:37:55,129
<font color="#E5E5E5">get through it let me know so that's</font>

979
00:37:54,140 --> 00:37:57,290
<font color="#E5E5E5">what that's what we're looking for</font><font color="#CCCCCC"> so</font>

980
00:37:55,130 --> 00:37:59,300
<font color="#E5E5E5">here we're looking</font><font color="#CCCCCC"> for this request</font>

981
00:37:57,290 --> 00:38:01,880
mapping variable as a name because<font color="#CCCCCC"> you</font>

982
00:37:59,300 --> 00:38:04,190
see it specified as a name<font color="#E5E5E5"> and I can see</font>

983
00:38:01,880 --> 00:38:05,870
it's a child of normal annotation so I

984
00:38:04,190 --> 00:38:06,890
passed my code<font color="#E5E5E5"> into this designer and</font>

985
00:38:05,870 --> 00:38:09,650
this<font color="#E5E5E5"> is what it spit out in case</font><font color="#CCCCCC"> that</font>

986
00:38:06,890 --> 00:38:12,710
was<font color="#E5E5E5"> not clear</font><font color="#CCCCCC"> so it's a normal</font>

987
00:38:09,650 --> 00:38:15,230
annotation<font color="#CCCCCC"> then under normal annotation</font>

988
00:38:12,710 --> 00:38:19,100
<font color="#E5E5E5">I see method right method is what I'm</font>

989
00:38:15,230 --> 00:38:22,070
<font color="#E5E5E5">looking for so</font><font color="#CCCCCC"> it's a which is a type of</font>

990
00:38:19,100 --> 00:38:25,190
<font color="#E5E5E5">member value pair and this is the value</font>

991
00:38:22,070 --> 00:38:28,780
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> the method to</font><font color="#CCCCCC"> be right</font>

992
00:38:25,190 --> 00:38:30,650
which is a type<font color="#CCCCCC"> of primary prefix I</font>

993
00:38:28,780 --> 00:38:31,730
don't know if I was<font color="#E5E5E5"> too fast or too</font>

994
00:38:30,650 --> 00:38:33,260
complicated<font color="#E5E5E5"> but now we're going to write</font>

995
00:38:31,730 --> 00:38:34,640
<font color="#E5E5E5">the rule so hopefully it'll</font><font color="#CCCCCC"> make more</font>

996
00:38:33,260 --> 00:38:36,980
<font color="#E5E5E5">sense</font><font color="#CCCCCC"> so the first thing we have to</font><font color="#E5E5E5"> do</font>

997
00:38:34,640 --> 00:38:37,490
is extend this abstract<font color="#CCCCCC"> java rule which</font>

998
00:38:36,980 --> 00:38:41,480
<font color="#CCCCCC">is a p.m.</font>

999
00:38:37,490 --> 00:38:44,209
<font color="#E5E5E5">the type we</font><font color="#CCCCCC"> used this visit method you</font>

1000
00:38:41,480 --> 00:38:46,460
can pass in any<font color="#E5E5E5"> type of object</font><font color="#CCCCCC"> any type</font>

1001
00:38:44,210 --> 00:38:49,160
of PMD abstract syntax tree object<font color="#CCCCCC"> in</font>

1002
00:38:46,460 --> 00:38:51,320
here<font color="#E5E5E5"> so this is saying basically</font><font color="#CCCCCC"> anytime</font>

1003
00:38:49,160 --> 00:38:53,540
<font color="#E5E5E5">PMD creates an abstract syntax tree and</font>

1004
00:38:51,320 --> 00:38:56,570
<font color="#E5E5E5">then I run analyze on it and I see a</font>

1005
00:38:53,540 --> 00:38:59,480
<font color="#CCCCCC">normal annotation call this method right</font>

1006
00:38:56,570 --> 00:39:00,950
so you could you could do this for<font color="#E5E5E5"> again</font>

1007
00:38:59,480 --> 00:39:02,270
class or interface body and then for

1008
00:39:00,950 --> 00:39:03,830
<font color="#CCCCCC">every class you would go</font><font color="#E5E5E5"> through this</font>

1009
00:39:02,270 --> 00:39:06,160
analysis we're only going<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it for</font>

1010
00:39:03,830 --> 00:39:08,060
annotations this type<font color="#CCCCCC"> of annotation</font>

1011
00:39:06,160 --> 00:39:09,379
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> gonna look at the node that's</font>

1012
00:39:08,060 --> 00:39:12,140
passed in we're gonna<font color="#E5E5E5"> get the first</font>

1013
00:39:09,380 --> 00:39:13,910
child<font color="#E5E5E5"> that's a name type because we have</font>

1014
00:39:12,140 --> 00:39:15,890
the name type here first child with

1015
00:39:13,910 --> 00:39:18,440
normal annotation we get the get image

1016
00:39:15,890 --> 00:39:20,540
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is basically get attribute request</font>

1017
00:39:18,440 --> 00:39:23,900
mapping<font color="#E5E5E5"> so if the name of the first</font>

1018
00:39:20,540 --> 00:39:25,430
<font color="#E5E5E5">child of the normal annotation is</font>

1019
00:39:23,900 --> 00:39:28,130
request mapping then we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> run</font>

1020
00:39:25,430 --> 00:39:29,810
this code we're gonna find any child

1021
00:39:28,130 --> 00:39:31,550
nodes that<font color="#CCCCCC"> are a member</font><font color="#E5E5E5"> value pair</font>

1022
00:39:29,810 --> 00:39:33,259
because we see that here I'm speeding<font color="#E5E5E5"> up</font>

1023
00:39:31,550 --> 00:39:35,420
now so we could<font color="#E5E5E5"> talk later if you have</font>

1024
00:39:33,260 --> 00:39:38,090
<font color="#E5E5E5">questions and then we're gonna get the</font>

1025
00:39:35,420 --> 00:39:39,560
attribute<font color="#E5E5E5"> basically if it's if it's a</font>

1026
00:39:38,090 --> 00:39:42,230
method<font color="#E5E5E5"> right because we</font><font color="#CCCCCC"> don't care if</font>

1027
00:39:39,560 --> 00:39:44,060
<font color="#CCCCCC">you pass some other parameter type</font><font color="#E5E5E5"> into</font>

1028
00:39:42,230 --> 00:39:47,390
this until<font color="#E5E5E5"> your request mapping we only</font>

1029
00:39:44,060 --> 00:39:49,160
want<font color="#E5E5E5"> to look at the methods and then if</font>

1030
00:39:47,390 --> 00:39:54,069
the primary prefix we're using XPath

1031
00:39:49,160 --> 00:39:56,750
<font color="#E5E5E5">here to search if the primary prefix is</font>

1032
00:39:54,070 --> 00:39:59,720
there if<font color="#E5E5E5"> it's request method that post</font>

1033
00:39:56,750 --> 00:40:00,920
or get<font color="#E5E5E5"> sorry if it's not that then we're</font>

1034
00:39:59,720 --> 00:40:02,629
going to add a violation<font color="#E5E5E5"> so this is</font>

1035
00:40:00,920 --> 00:40:04,760
<font color="#E5E5E5">saying if it's anything besides post or</font>

1036
00:40:02,630 --> 00:40:07,550
Det<font color="#CCCCCC"> we're gonna add a violation</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> PMD</font>

1037
00:40:04,760 --> 00:40:09,020
is gonna throw<font color="#CCCCCC"> an error</font><font color="#E5E5E5"> right this is</font>

1038
00:40:07,550 --> 00:40:11,330
what the final<font color="#E5E5E5"> rule looks like now I'm</font>

1039
00:40:09,020 --> 00:40:15,080
going real fast<font color="#E5E5E5"> but it's pretty sure</font>

1040
00:40:11,330 --> 00:40:16,910
<font color="#E5E5E5">this took me about maybe 25</font><font color="#CCCCCC"> 30 minutes</font>

1041
00:40:15,080 --> 00:40:19,549
<font color="#E5E5E5">to write which is not too bad but this</font>

1042
00:40:16,910 --> 00:40:23,690
<font color="#E5E5E5">is a simple rule some I'm out of time</font><font color="#CCCCCC"> so</font>

1043
00:40:19,550 --> 00:40:25,940
feel<font color="#CCCCCC"> free to go if you</font><font color="#E5E5E5"> want to but so</font>

1044
00:40:23,690 --> 00:40:27,800
<font color="#CCCCCC">that's what it</font><font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> the report</font>

1045
00:40:25,940 --> 00:40:30,050
finds<font color="#E5E5E5"> the issues that's the important</font>

1046
00:40:27,800 --> 00:40:32,800
part<font color="#E5E5E5"> you can use XPath if you want this</font>

1047
00:40:30,050 --> 00:40:35,359
is<font color="#E5E5E5"> what it looks like as an example</font>

1048
00:40:32,800 --> 00:40:37,100
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> of writing it in Java</font><font color="#CCCCCC"> where to</font>

1049
00:40:35,359 --> 00:40:38,390
<font color="#CCCCCC">SAS fit in I have some SAS tips here</font>

1050
00:40:37,100 --> 00:40:39,560
<font color="#CCCCCC">that I'm happy to talk</font><font color="#E5E5E5"> about but I</font><font color="#CCCCCC"> don't</font>

1051
00:40:38,390 --> 00:40:44,299
know if the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> speakers gonna</font><font color="#E5E5E5"> want to</font>

1052
00:40:39,560 --> 00:40:45,920
kick me out<font color="#E5E5E5"> so but key takeaways</font><font color="#CCCCCC"> or cest</font>

1053
00:40:44,300 --> 00:40:47,990
<font color="#E5E5E5">should be only a part of your apps</font><font color="#CCCCCC"> tech</font>

1054
00:40:45,920 --> 00:40:49,640
program you need vulnerability

1055
00:40:47,990 --> 00:40:50,450
management remediation don't try to<font color="#E5E5E5"> sail</font>

1056
00:40:49,640 --> 00:40:51,359
<font color="#E5E5E5">stat scale</font>

1057
00:40:50,450 --> 00:40:52,710
static analysis

1058
00:40:51,360 --> 00:40:54,120
if you don't have a way<font color="#E5E5E5"> to handle the</font>

1059
00:40:52,710 --> 00:40:55,620
issues that<font color="#E5E5E5"> come out of it</font><font color="#CCCCCC"> and you don't</font>

1060
00:40:54,120 --> 00:40:57,359
<font color="#CCCCCC">have a way for</font><font color="#E5E5E5"> developers to fix it I</font>

1061
00:40:55,620 --> 00:41:00,180
mean developer education like training

1062
00:40:57,360 --> 00:41:01,320
<font color="#E5E5E5">and support</font><font color="#CCCCCC"> for them when they come to</font>

1063
00:41:00,180 --> 00:41:02,970
you and say I don't<font color="#E5E5E5"> know how to resolve</font>

1064
00:41:01,320 --> 00:41:04,470
<font color="#CCCCCC">this issue</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> have to say to them</font>

1065
00:41:02,970 --> 00:41:07,169
<font color="#E5E5E5">well you're gonna have to redesign your</font>

1066
00:41:04,470 --> 00:41:09,450
<font color="#CCCCCC">entire architecture to handle that</font><font color="#E5E5E5"> right</font>

1067
00:41:07,170 --> 00:41:10,770
<font color="#CCCCCC">sass belongs in CI I don't think</font>

1068
00:41:09,450 --> 00:41:12,149
developers<font color="#E5E5E5"> should be</font><font color="#CCCCCC"> using it not the</font>

1069
00:41:10,770 --> 00:41:14,790
commercial<font color="#E5E5E5"> tools they could be running</font>

1070
00:41:12,150 --> 00:41:16,230
PMD<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sonar</font><font color="#E5E5E5"> cube and other things like</font>

1071
00:41:14,790 --> 00:41:17,790
<font color="#CCCCCC">that but they shouldn't be running the</font>

1072
00:41:16,230 --> 00:41:18,930
commercial tools in<font color="#E5E5E5"> in their development</font>

1073
00:41:17,790 --> 00:41:20,100
environments<font color="#CCCCCC"> they're going</font><font color="#E5E5E5"> to get way</font>

1074
00:41:18,930 --> 00:41:22,259
too<font color="#E5E5E5"> much noise</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to slow them</font>

1075
00:41:20,100 --> 00:41:24,120
down<font color="#CCCCCC"> developers should never ever</font><font color="#E5E5E5"> ever</font>

1076
00:41:22,260 --> 00:41:28,860
see false positives<font color="#CCCCCC"> so you either</font><font color="#E5E5E5"> need</font>

1077
00:41:24,120 --> 00:41:30,630
like very strict filtering<font color="#E5E5E5"> after the</font>

1078
00:41:28,860 --> 00:41:31,860
<font color="#CCCCCC">scan or</font><font color="#E5E5E5"> you need magnet people to</font>

1079
00:41:30,630 --> 00:41:33,210
manually<font color="#E5E5E5"> look at the results and make</font>

1080
00:41:31,860 --> 00:41:36,110
<font color="#E5E5E5">sure that they don't get false</font><font color="#CCCCCC"> positives</font>

1081
00:41:33,210 --> 00:41:40,140
<font color="#E5E5E5">or you're wasting your developers time</font>

1082
00:41:36,110 --> 00:41:41,310
<font color="#E5E5E5">and then lastly alternatives that</font><font color="#CCCCCC"> you</font>

1083
00:41:40,140 --> 00:41:44,609
don't have to use the<font color="#E5E5E5"> vendor</font><font color="#CCCCCC"> supply</font>

1084
00:41:41,310 --> 00:41:46,830
consoles<font color="#CCCCCC"> each each static</font><font color="#E5E5E5"> analysis tool</font>

1085
00:41:44,610 --> 00:41:48,510
has a<font color="#CCCCCC"> complimentary console where all</font>

1086
00:41:46,830 --> 00:41:51,840
the results<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be but there are</font>

1087
00:41:48,510 --> 00:41:54,000
alternatives<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> you can write you</font>

1088
00:41:51,840 --> 00:41:55,860
know things<font color="#E5E5E5"> to take that output</font><font color="#CCCCCC"> and put</font>

1089
00:41:54,000 --> 00:41:57,930
<font color="#E5E5E5">it into sonar cube or thread fix or arch</font>

1090
00:41:55,860 --> 00:41:59,310
or whatever your GRC tools are<font color="#E5E5E5"> something</font>

1091
00:41:57,930 --> 00:42:01,620
else<font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> is the best way for you to</font>

1092
00:41:59,310 --> 00:42:04,140
look at it you<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to set up</font><font color="#CCCCCC"> 55</font>

1093
00:42:01,620 --> 00:42:06,060
<font color="#CCCCCC">dashboards across your organization and</font>

1094
00:42:04,140 --> 00:42:08,460
then always continue to<font color="#E5E5E5"> improve your</font>

1095
00:42:06,060 --> 00:42:10,380
static analysis so this is the way it's

1096
00:42:08,460 --> 00:42:12,390
<font color="#CCCCCC">supposed to</font><font color="#E5E5E5"> work you scan all of</font><font color="#CCCCCC"> your</font>

1097
00:42:10,380 --> 00:42:13,920
applications<font color="#CCCCCC"> but your</font><font color="#E5E5E5"> most critical</font>

1098
00:42:12,390 --> 00:42:15,420
applications you're also doing<font color="#CCCCCC"> other</font>

1099
00:42:13,920 --> 00:42:18,660
security activities on<font color="#CCCCCC"> them like</font><font color="#E5E5E5"> full</font>

1100
00:42:15,420 --> 00:42:20,370
scans<font color="#E5E5E5"> manual reviews threat models</font>

1101
00:42:18,660 --> 00:42:22,290
whatever<font color="#E5E5E5"> all that information should get</font>

1102
00:42:20,370 --> 00:42:23,910
passed back<font color="#E5E5E5"> into the scan somehow like</font>

1103
00:42:22,290 --> 00:42:26,100
by creating those extra rules<font color="#E5E5E5"> and</font>

1104
00:42:23,910 --> 00:42:27,810
filters to<font color="#CCCCCC"> get better coverage reduced</font>

1105
00:42:26,100 --> 00:42:30,360
false positives<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will overall</font>

1106
00:42:27,810 --> 00:42:31,770
enhance your scans<font color="#E5E5E5"> provide remediation</font>

1107
00:42:30,360 --> 00:42:33,570
guidance that's going to cover<font color="#E5E5E5"> increase</font>

1108
00:42:31,770 --> 00:42:36,030
<font color="#E5E5E5">your coverage to</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> overall you want to</font>

1109
00:42:33,570 --> 00:42:38,390
reduce<font color="#CCCCCC"> your risk</font><font color="#E5E5E5"> that's my last slide so</font>

1110
00:42:36,030 --> 00:42:38,390
<font color="#CCCCCC">okay</font>

1111
00:42:40,390 --> 00:42:42,450
<font color="#CCCCCC">you</font>

