1
00:00:17,170 --> 00:00:21,970
again this is drawing a map outlining

2
00:00:20,200 --> 00:00:25,090
the<font color="#E5E5E5"> Android API permission mechanism</font><font color="#CCCCCC"> I'm</font>

3
00:00:21,970 --> 00:00:26,470
<font color="#CCCCCC">Andrew writer from</font><font color="#E5E5E5"> very good as you all</font>

4
00:00:25,090 --> 00:00:28,390
well know the Android Open Source

5
00:00:26,470 --> 00:00:31,570
Project provides software stack for

6
00:00:28,390 --> 00:00:33,850
mobile devices within this stack they

7
00:00:31,570 --> 00:00:37,180
implement a<font color="#E5E5E5"> application based permission</font>

8
00:00:33,850 --> 00:00:40,690
a mechanism however as many of you may

9
00:00:37,180 --> 00:00:42,879
or may not<font color="#CCCCCC"> know when you get</font><font color="#E5E5E5"> the SDK to</font>

10
00:00:40,690 --> 00:00:45,220
develop some apps there's no permission

11
00:00:42,879 --> 00:00:47,320
map included and by permission map I

12
00:00:45,220 --> 00:00:49,420
mean something<font color="#E5E5E5"> that will relate API</font>

13
00:00:47,320 --> 00:00:51,610
calls to actually permissions that are

14
00:00:49,420 --> 00:00:55,930
required<font color="#E5E5E5"> in order to successfully call</font>

15
00:00:51,610 --> 00:00:58,150
those calls and not<font color="#E5E5E5"> having this map sort</font>

16
00:00:55,930 --> 00:01:01,299
of had as a number of effects and that I

17
00:00:58,150 --> 00:01:02,860
see and it increases sort of this this

18
00:01:01,299 --> 00:01:05,760
notion of what is<font color="#E5E5E5"> called a permissions</font>

19
00:01:02,860 --> 00:01:08,049
gap or the likelihood of permissions gap

20
00:01:05,760 --> 00:01:09,340
also it increases the<font color="#E5E5E5"> possibility of</font>

21
00:01:08,049 --> 00:01:13,060
failing the principle<font color="#CCCCCC"> of least privilege</font>

22
00:01:09,340 --> 00:01:16,869
and also encourages the possibility of

23
00:01:13,060 --> 00:01:18,549
ill conforming code it is also sort of

24
00:01:16,869 --> 00:01:20,770
my opinion that not having a map

25
00:01:18,549 --> 00:01:24,759
increases<font color="#E5E5E5"> this overall lack of clarity</font>

26
00:01:20,770 --> 00:01:27,070
with such a large<font color="#E5E5E5"> project that Android</font>

27
00:01:24,759 --> 00:01:29,469
is it should be pretty plain and obvious

28
00:01:27,070 --> 00:01:33,189
as<font color="#CCCCCC"> to what permissions are required for</font>

29
00:01:29,469 --> 00:01:36,070
which API calls and perhaps you know

30
00:01:33,189 --> 00:01:38,770
which API calls require a number of

31
00:01:36,070 --> 00:01:40,178
permissions that kind of thing so it's

32
00:01:38,770 --> 00:01:41,649
in my opinion<font color="#E5E5E5"> that having a map would</font>

33
00:01:40,179 --> 00:01:44,549
help avoid this permission gap problem

34
00:01:41,649 --> 00:01:46,390
<font color="#CCCCCC">which I'll discuss it would also help to</font>

35
00:01:44,549 --> 00:01:49,469
follow the principle<font color="#E5E5E5"> of least privilege</font>

36
00:01:46,390 --> 00:01:53,380
that we<font color="#E5E5E5"> all own security know well about</font>

37
00:01:49,469 --> 00:01:55,869
thirdly it will<font color="#E5E5E5"> increase the the dev and</font>

38
00:01:53,380 --> 00:01:57,969
app security or<font color="#CCCCCC"> an appt analyst work</font>

39
00:01:55,869 --> 00:02:00,069
time this is because<font color="#CCCCCC"> they will</font><font color="#E5E5E5"> have a</font>

40
00:01:57,969 --> 00:02:03,609
ready file that will say these are<font color="#E5E5E5"> the</font>

41
00:02:00,069 --> 00:02:06,069
permissions that an API call can have

42
00:02:03,609 --> 00:02:09,399
and then they can when they do their

43
00:02:06,069 --> 00:02:13,390
<font color="#E5E5E5">analysis for methods being used in app</font>

44
00:02:09,399 --> 00:02:15,340
they can say<font color="#E5E5E5"> okay great they've used all</font>

45
00:02:13,390 --> 00:02:19,000
the correct permissions and asked<font color="#E5E5E5"> for no</font>

46
00:02:15,340 --> 00:02:22,110
more they are Benson prior mapping

47
00:02:19,000 --> 00:02:24,940
attempts multiple research groups

48
00:02:22,110 --> 00:02:28,180
university-based have tried with varying

49
00:02:24,940 --> 00:02:29,680
degrees<font color="#CCCCCC"> of</font><font color="#E5E5E5"> success and really as you'll</font>

50
00:02:28,180 --> 00:02:32,739
see there's no<font color="#E5E5E5"> sort of one</font>

51
00:02:29,680 --> 00:02:34,480
best solution for<font color="#E5E5E5"> this problem and it</font>

52
00:02:32,739 --> 00:02:37,599
was the goal of the research of myself

53
00:02:34,480 --> 00:02:40,959
and<font color="#CCCCCC"> Zack lanyard formerly</font><font color="#E5E5E5"> a verra code</font>

54
00:02:37,599 --> 00:02:44,230
to provide<font color="#E5E5E5"> a more comprehensive and a</font>

55
00:02:40,959 --> 00:02:46,359
reproducible methodology so I asking you

56
00:02:44,230 --> 00:02:49,959
to sort of listen<font color="#E5E5E5"> to an overview of</font>

57
00:02:46,359 --> 00:02:51,430
permissions and sort<font color="#E5E5E5"> of my arguments for</font>

58
00:02:49,959 --> 00:02:54,849
why and that<font color="#E5E5E5"> would be a good</font><font color="#CCCCCC"> thing to</font>

59
00:02:51,430 --> 00:02:57,370
have and serve it a survey of<font color="#CCCCCC"> four</font>

60
00:02:54,849 --> 00:02:59,469
published automated map generation

61
00:02:57,370 --> 00:03:01,870
methods you should sort of think about

62
00:02:59,469 --> 00:03:05,530
<font color="#E5E5E5">who might want to maintain such a map it</font>

63
00:03:01,870 --> 00:03:08,200
is in<font color="#E5E5E5"> my argument that Google should but</font>

64
00:03:05,530 --> 00:03:10,030
why aren't<font color="#E5E5E5"> they doing that now and if</font>

65
00:03:08,200 --> 00:03:16,540
not Google who so I asked to just sort

66
00:03:10,030 --> 00:03:18,909
of think about<font color="#E5E5E5"> that so the API</font>

67
00:03:16,540 --> 00:03:20,349
permissions are what are considered at

68
00:03:18,909 --> 00:03:22,719
<font color="#E5E5E5">the application level and this is sort</font>

69
00:03:20,349 --> 00:03:27,369
<font color="#E5E5E5">of versus the UNIX traditional user</font>

70
00:03:22,719 --> 00:03:30,069
<font color="#CCCCCC">based model now granted in this there is</font>

71
00:03:27,370 --> 00:03:31,840
some usages of groups and group IDs at

72
00:03:30,069 --> 00:03:33,599
the lower levels could really this is

73
00:03:31,840 --> 00:03:38,290
just buried underneath the application

74
00:03:33,599 --> 00:03:42,099
scheming<font color="#E5E5E5"> furthermore this is a</font>

75
00:03:38,290 --> 00:03:44,138
<font color="#E5E5E5">fine-grain scoping permissions that is</font>

76
00:03:42,099 --> 00:03:48,040
you<font color="#CCCCCC"> have say you know read write</font>

77
00:03:44,139 --> 00:03:49,780
contacts<font color="#E5E5E5"> read/write bookmarks that kind</font>

78
00:03:48,040 --> 00:03:54,298
of thing rather<font color="#E5E5E5"> than</font><font color="#CCCCCC"> saying you know</font>

79
00:03:49,780 --> 00:03:57,220
just<font color="#E5E5E5"> a general / personal information</font>

80
00:03:54,299 --> 00:03:59,889
permission but<font color="#E5E5E5"> it actually breaks down</font>

81
00:03:57,220 --> 00:04:01,870
further and in this case when we were

82
00:03:59,889 --> 00:04:03,250
talking about API calls were actually

83
00:04:01,870 --> 00:04:05,290
talking<font color="#E5E5E5"> about like public methods in</font>

84
00:04:03,250 --> 00:04:07,359
<font color="#E5E5E5">android jar and that's a generalization</font>

85
00:04:05,290 --> 00:04:09,489
but that's fairly pretty much what we're

86
00:04:07,359 --> 00:04:11,769
talking about here and in terms<font color="#E5E5E5"> of</font>

87
00:04:09,489 --> 00:04:13,810
permissions they are just types they're

88
00:04:11,769 --> 00:04:15,430
just<font color="#E5E5E5"> strings if you look at the android</font>

89
00:04:13,810 --> 00:04:18,099
manifest permission class they're

90
00:04:15,430 --> 00:04:20,349
actually just static strings there are

91
00:04:18,099 --> 00:04:23,320
some divined elsewhere but that's how

92
00:04:20,349 --> 00:04:24,880
they defined and in this<font color="#E5E5E5"> talk we're not</font>

93
00:04:23,320 --> 00:04:27,460
in this research and<font color="#E5E5E5"> talk we're not</font>

94
00:04:24,880 --> 00:04:29,020
dealing with<font color="#E5E5E5"> intense and we're not</font>

95
00:04:27,460 --> 00:04:31,750
dealing with third-party permissions as

96
00:04:29,020 --> 00:04:33,529
you can see here if you just hook up

97
00:04:31,750 --> 00:04:37,639
your phone or whatever<font color="#CCCCCC"> Android device</font>

98
00:04:33,529 --> 00:04:39,919
that you have and you use adb you can

99
00:04:37,639 --> 00:04:41,089
query the package manager in order to

100
00:04:39,919 --> 00:04:42,679
<font color="#E5E5E5">list the permissions that are written</font>

101
00:04:41,089 --> 00:04:45,429
registered within the package manager

102
00:04:42,679 --> 00:04:47,748
and for these we're not dealing with

103
00:04:45,429 --> 00:04:53,419
we're<font color="#E5E5E5"> just dealing with the</font><font color="#CCCCCC"> core android</font>

104
00:04:47,749 --> 00:04:56,779
api so in terms of the permissions

105
00:04:53,419 --> 00:04:59,329
<font color="#E5E5E5">lifecycle you have the developer time</font>

106
00:04:56,779 --> 00:05:03,229
this is when you know developers writing

107
00:04:59,329 --> 00:05:06,949
an app and they need<font color="#E5E5E5"> to use some method</font>

108
00:05:03,229 --> 00:05:09,829
from the<font color="#E5E5E5"> API and they say something</font>

109
00:05:06,949 --> 00:05:11,989
related to Bluetooth administration in

110
00:05:09,829 --> 00:05:14,059
order<font color="#E5E5E5"> to successfully use that API call</font>

111
00:05:11,989 --> 00:05:15,229
they must actually add this<font color="#E5E5E5"> Bluetooth</font>

112
00:05:14,059 --> 00:05:18,679
<font color="#CCCCCC">add been permission to their</font>

113
00:05:15,229 --> 00:05:20,539
androidmanifest.xml and the developer

114
00:05:18,679 --> 00:05:23,748
will compile their app and include this

115
00:05:20,539 --> 00:05:28,219
androidmanifest.xml<font color="#E5E5E5"> as as deemed</font>

116
00:05:23,749 --> 00:05:29,809
necessary and the user will then attempt

117
00:05:28,219 --> 00:05:32,239
to install the application of course

118
00:05:29,809 --> 00:05:34,159
this<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> instagram just to show you</font>

119
00:05:32,239 --> 00:05:36,948
the<font color="#CCCCCC"> the number of permissions that</font>

120
00:05:34,159 --> 00:05:40,149
they're requesting but the idea here is

121
00:05:36,949 --> 00:05:44,809
to say that<font color="#CCCCCC"> it's install time granting</font>

122
00:05:40,149 --> 00:05:48,229
you accept all or<font color="#CCCCCC"> you not install that's</font>

123
00:05:44,809 --> 00:05:50,419
really<font color="#CCCCCC"> a key point and when you accept</font>

124
00:05:48,229 --> 00:05:53,419
when you accept these permissions and

125
00:05:50,419 --> 00:05:56,688
allow the package manager to proceed<font color="#CCCCCC"> to</font>

126
00:05:53,419 --> 00:05:58,909
install the application of choice<font color="#CCCCCC"> it'll</font>

127
00:05:56,689 --> 00:06:00,619
register<font color="#E5E5E5"> the apps terms in the system as</font>

128
00:05:58,909 --> 00:06:04,699
<font color="#E5E5E5">well</font><font color="#CCCCCC"> as dealing with the group IDs for</font>

129
00:06:00,619 --> 00:06:07,309
<font color="#E5E5E5">lower level checker and then furthermore</font>

130
00:06:04,699 --> 00:06:09,469
in the permissions life there's the

131
00:06:07,309 --> 00:06:12,679
runtime verification<font color="#E5E5E5"> validation of</font>

132
00:06:09,469 --> 00:06:14,779
permissions there's<font color="#CCCCCC"> one</font><font color="#E5E5E5"> thing to request</font>

133
00:06:12,679 --> 00:06:17,179
permissions at install time but

134
00:06:14,779 --> 00:06:20,659
permissions are actually verified at

135
00:06:17,179 --> 00:06:23,089
runtime and they're verified using a

136
00:06:20,659 --> 00:06:26,359
handful of methods that<font color="#CCCCCC"> are part of the</font>

137
00:06:23,089 --> 00:06:28,549
API the context object provides a few

138
00:06:26,359 --> 00:06:31,008
check calling permission check

139
00:06:28,549 --> 00:06:32,899
permission there's others<font color="#CCCCCC"> in force</font>

140
00:06:31,009 --> 00:06:36,259
calling permission the number of others

141
00:06:32,899 --> 00:06:38,239
was about<font color="#CCCCCC"> eight also the package manager</font>

142
00:06:36,259 --> 00:06:41,409
as you might suspect being the thing

143
00:06:38,239 --> 00:06:43,539
that deals with packages being installed

144
00:06:41,409 --> 00:06:47,030
also provides such a message

145
00:06:43,539 --> 00:06:48,530
method this is a check permission pass

146
00:06:47,030 --> 00:06:52,669
it a permission you pass it a package

147
00:06:48,530 --> 00:06:55,280
name<font color="#CCCCCC"> will verify in all the locations</font>

148
00:06:52,669 --> 00:06:59,210
throughout the API in which you<font color="#E5E5E5"> actually</font>

149
00:06:55,280 --> 00:07:00,679
do verification of permissions at

150
00:06:59,210 --> 00:07:04,068
runtime or what we call permission

151
00:07:00,680 --> 00:07:08,569
enforcement points in this case here and

152
00:07:04,069 --> 00:07:13,009
tip and<font color="#E5E5E5"> this is typical they'll attempt</font>

153
00:07:08,569 --> 00:07:17,539
to verify that a permission is is had by

154
00:07:13,009 --> 00:07:18,650
the calling process and if it does<font color="#CCCCCC"> not</font>

155
00:07:17,539 --> 00:07:20,270
have that<font color="#E5E5E5"> permission</font><font color="#CCCCCC"> we'll throw a</font>

156
00:07:18,650 --> 00:07:21,650
security exception that's the typical

157
00:07:20,270 --> 00:07:26,120
later you know but we'll see that that's

158
00:07:21,650 --> 00:07:29,000
<font color="#E5E5E5">not always how it is and these</font>

159
00:07:26,120 --> 00:07:32,240
permission enforcement points can be

160
00:07:29,000 --> 00:07:34,039
found throughout the the the API but

161
00:07:32,240 --> 00:07:36,349
really what we see is that<font color="#E5E5E5"> they're</font>

162
00:07:34,039 --> 00:07:38,270
actually<font color="#E5E5E5"> on the other side of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binder</font>

163
00:07:36,349 --> 00:07:40,190
that is there on the service side of the

164
00:07:38,270 --> 00:07:43,669
binder the binder is like a lightweight

165
00:07:40,190 --> 00:07:45,560
RPC mechanism it's a local RPC mechanism

166
00:07:43,669 --> 00:07:49,068
since it's all you know within your

167
00:07:45,560 --> 00:07:52,430
device rather than going outbound to the

168
00:07:49,069 --> 00:07:54,800
internet or some other network and you

169
00:07:52,430 --> 00:07:56,900
can see here you<font color="#CCCCCC"> have your application</font>

170
00:07:54,800 --> 00:07:59,240
over there on the<font color="#E5E5E5"> left and it's using</font>

171
00:07:56,900 --> 00:08:01,520
the<font color="#E5E5E5"> Android API and within the Android</font>

172
00:07:59,240 --> 00:08:05,750
API there's some proxies there for

173
00:08:01,520 --> 00:08:07,789
certain methods such as Bluetooth things

174
00:08:05,750 --> 00:08:12,500
of that nature and what happens is that

175
00:08:07,789 --> 00:08:15,710
you will call say a<font color="#CCCCCC"> Bluetooth</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> named</font>

176
00:08:12,500 --> 00:08:18,800
function and it'll dispatch a call into

177
00:08:15,710 --> 00:08:22,460
the binder and asynchronously get picked

178
00:08:18,800 --> 00:08:24,020
up by the Bluetooth service and actually

179
00:08:22,460 --> 00:08:25,669
execute that call and during that

180
00:08:24,020 --> 00:08:27,859
execution of the call that will actually

181
00:08:25,669 --> 00:08:30,169
do contain a permission enforcement

182
00:08:27,860 --> 00:08:33,459
point and so it's there where it's

183
00:08:30,169 --> 00:08:36,860
checking<font color="#E5E5E5"> the calling permission and</font>

184
00:08:33,458 --> 00:08:40,189
verifying that this app over there was

185
00:08:36,860 --> 00:08:42,709
given<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Bluetooth permission something</font>

186
00:08:40,190 --> 00:08:45,140
in that<font color="#CCCCCC"> nature so we can actually see</font>

187
00:08:42,708 --> 00:08:47,959
this in code we have here we have the

188
00:08:45,140 --> 00:08:50,750
local side of Bluetooth adapter get name

189
00:08:47,959 --> 00:08:53,270
and you<font color="#E5E5E5"> can see that actually there's</font>

190
00:08:50,750 --> 00:08:56,000
this inside of<font color="#E5E5E5"> it there's this return em</font>

191
00:08:53,270 --> 00:08:56,870
service get name and this is the call

192
00:08:56,000 --> 00:08:59,690
the dispatcher

193
00:08:56,870 --> 00:09:03,620
the<font color="#E5E5E5"> binding and then we have the service</font>

194
00:08:59,690 --> 00:09:06,680
side of the<font color="#CCCCCC"> Bluetooth namely</font><font color="#E5E5E5"> Bluetooth</font>

195
00:09:03,620 --> 00:09:10,040
service and eating it actually does the

196
00:09:06,680 --> 00:09:12,109
the context classes<font color="#E5E5E5"> in force calling</font>

197
00:09:10,040 --> 00:09:13,189
yourself permission and it attempts to

198
00:09:12,110 --> 00:09:17,870
check it against the<font color="#E5E5E5"> Bluetooth</font>

199
00:09:13,190 --> 00:09:20,660
permission and upon success this will

200
00:09:17,870 --> 00:09:22,460
return the get property name upon

201
00:09:20,660 --> 00:09:27,350
failure it'll actually be throwing a

202
00:09:22,460 --> 00:09:30,050
security exception internal besides from

203
00:09:27,350 --> 00:09:32,029
<font color="#E5E5E5">the</font><font color="#CCCCCC"> PE PS there's actually lower level</font>

204
00:09:30,050 --> 00:09:37,459
enforcement<font color="#E5E5E5"> that occurs and this is at a</font>

205
00:09:32,029 --> 00:09:40,550
group<font color="#E5E5E5"> a unix group level when you say</font><font color="#CCCCCC"> ok</font>

206
00:09:37,460 --> 00:09:42,470
to accepting the<font color="#CCCCCC"> internet permission for</font>

207
00:09:40,550 --> 00:09:47,290
example with<font color="#CCCCCC"> java net socket in the need</font>

208
00:09:42,470 --> 00:09:52,790
for inet address you're actually also

209
00:09:47,290 --> 00:09:57,260
putting that application into the inet

210
00:09:52,790 --> 00:09:59,360
group and so what happens is with the

211
00:09:57,260 --> 00:10:02,480
socket support it's actually rapid

212
00:09:59,360 --> 00:10:04,790
wrapped around the native code and that

213
00:10:02,480 --> 00:10:06,589
native code is doing<font color="#E5E5E5"> some file system</font>

214
00:10:04,790 --> 00:10:10,120
operations and other lower level

215
00:10:06,589 --> 00:10:13,670
operating<font color="#CCCCCC"> system calls and here the</font>

216
00:10:10,120 --> 00:10:17,480
these actions on the file system and

217
00:10:13,670 --> 00:10:20,420
other operating system calls will

218
00:10:17,480 --> 00:10:22,630
actually need certain group permissions

219
00:10:20,420 --> 00:10:27,229
in order to be called<font color="#E5E5E5"> successfully and</font>

220
00:10:22,630 --> 00:10:29,720
so this<font color="#CCCCCC"> is why</font><font color="#E5E5E5"> you know your activity or</font>

221
00:10:27,230 --> 00:10:32,029
app when it's running will actually have

222
00:10:29,720 --> 00:10:34,730
the effective and effective group idea

223
00:10:32,029 --> 00:10:37,520
of you know I met when it's trying to

224
00:10:34,730 --> 00:10:41,839
access sockets and stuff that<font color="#E5E5E5"> picture</font>

225
00:10:37,520 --> 00:10:44,360
you can see<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> the ugliness of the</font>

226
00:10:41,839 --> 00:10:46,730
native code if you<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> the lib core</font>

227
00:10:44,360 --> 00:10:49,339
code that's the severe and you can see

228
00:10:46,730 --> 00:10:51,110
all<font color="#CCCCCC"> the mappings of</font><font color="#E5E5E5"> Android permissions</font>

229
00:10:49,339 --> 00:10:53,029
to group values if you look at<font color="#E5E5E5"> the</font>

230
00:10:51,110 --> 00:10:58,970
source tree<font color="#CCCCCC"> and look at frameworks base</font>

231
00:10:53,029 --> 00:11:01,970
data etc platform that<font color="#E5E5E5"> XML and so let's</font>

232
00:10:58,970 --> 00:11:03,440
do sort of a basic example of a case of

233
00:11:01,970 --> 00:11:05,900
where you need

234
00:11:03,440 --> 00:11:08,900
permission and the<font color="#E5E5E5"> failure</font><font color="#CCCCCC"> versus</font>

235
00:11:05,900 --> 00:11:10,840
success so here have on create method

236
00:11:08,900 --> 00:11:12,860
which is part of an activity and

237
00:11:10,840 --> 00:11:17,060
basically I get a handle to the

238
00:11:12,860 --> 00:11:19,190
bluetooth adapter book and I am just

239
00:11:17,060 --> 00:11:20,900
attempting to call get name this<font color="#E5E5E5"> gettin</font>

240
00:11:19,190 --> 00:11:24,860
<font color="#E5E5E5">a method requires the</font><font color="#CCCCCC"> Bluetooth</font>

241
00:11:20,900 --> 00:11:28,550
permission say if I did not provide it I

242
00:11:24,860 --> 00:11:32,720
would get<font color="#E5E5E5"> this mess of errors you'll see</font>

243
00:11:28,550 --> 00:11:35,750
I know this is kind of hard to see but

244
00:11:32,720 --> 00:11:37,520
you'll see here the java.lang<font color="#CCCCCC"> sphere to</font>

245
00:11:35,750 --> 00:11:40,790
<font color="#CCCCCC">accept need bluetooth permission neither</font>

246
00:11:37,520 --> 00:11:42,740
user blah nor current process<font color="#E5E5E5"> as Android</font>

247
00:11:40,790 --> 00:11:44,839
permission bluetooth this is the

248
00:11:42,740 --> 00:11:46,970
security exception that's thrown on the

249
00:11:44,840 --> 00:11:49,550
bind your service side and then<font color="#E5E5E5"> then</font>

250
00:11:46,970 --> 00:11:51,200
<font color="#CCCCCC">we'll actually come back and you'll get</font>

251
00:11:49,550 --> 00:11:54,130
another exception juggling runtime

252
00:11:51,200 --> 00:11:56,510
exception unable to start activity<font color="#CCCCCC"> hola</font>

253
00:11:54,130 --> 00:12:01,100
java.lang security exception so you get

254
00:11:56,510 --> 00:12:03,730
kind of a double fault post now if<font color="#E5E5E5"> we</font>

255
00:12:01,100 --> 00:12:07,130
did have the permission in the

256
00:12:03,730 --> 00:12:10,460
androidmanifest.xml then we would just

257
00:12:07,130 --> 00:12:14,900
have things succeed you recall the code

258
00:12:10,460 --> 00:12:19,360
here I just log out to LA cap the name

259
00:12:14,900 --> 00:12:19,360
that gets turned great

260
00:12:24,329 --> 00:12:29,329
excuse me

261
00:12:26,750 --> 00:12:33,260
so there<font color="#CCCCCC"> are a number of reasons that I</font>

262
00:12:29,330 --> 00:12:35,030
believe that<font color="#E5E5E5"> we need to</font><font color="#CCCCCC"> have a map first</font>

263
00:12:33,260 --> 00:12:36,680
this permission gap problem which I'll

264
00:12:35,030 --> 00:12:38,870
get into just in a<font color="#E5E5E5"> few moments after</font>

265
00:12:36,680 --> 00:12:41,449
this slide the next is the principle of

266
00:12:38,870 --> 00:12:43,420
least privilege and third is something

267
00:12:41,450 --> 00:12:45,980
that I think is extremely important and

268
00:12:43,420 --> 00:12:50,000
would take care<font color="#CCCCCC"> of a lot of</font><font color="#E5E5E5"> the first</font>

269
00:12:45,980 --> 00:12:51,860
two issues which is if you had a map you

270
00:12:50,000 --> 00:12:54,910
can<font color="#CCCCCC"> easily integrate it into an IDE such</font>

271
00:12:51,860 --> 00:12:58,310
as such<font color="#CCCCCC"> as Eclipse so that if you did</font>

272
00:12:54,910 --> 00:13:00,620
you know bluetooth adapter get name and

273
00:12:58,310 --> 00:13:02,270
you wrote<font color="#CCCCCC"> that in your code then the</font>

274
00:13:00,620 --> 00:13:03,580
<font color="#CCCCCC">idea we neither prompt you to add the</font>

275
00:13:02,270 --> 00:13:06,079
permission<font color="#CCCCCC"> to</font><font color="#E5E5E5"> your androidmanifest.xml</font>

276
00:13:03,580 --> 00:13:08,330
or just would automatically add it if

277
00:13:06,080 --> 00:13:10,190
you remove that method and other methods

278
00:13:08,330 --> 00:13:11,690
that required that permission<font color="#E5E5E5"> it would</font>

279
00:13:10,190 --> 00:13:14,270
remove it will prompt you to remove it

280
00:13:11,690 --> 00:13:15,950
from the androidmanifest.xml things that

281
00:13:14,270 --> 00:13:17,240
would aid the developer so that they

282
00:13:15,950 --> 00:13:20,300
weren't getting things incorrect from

283
00:13:17,240 --> 00:13:22,690
the beginning also it would be<font color="#E5E5E5"> quite</font>

284
00:13:20,300 --> 00:13:27,050
useful in security tools such as those

285
00:13:22,690 --> 00:13:30,050
wanting to verify that an app has the

286
00:13:27,050 --> 00:13:35,000
permissions requested that only required

287
00:13:30,050 --> 00:13:36,770
of it if you<font color="#E5E5E5"> look at the black hat 2012</font>

288
00:13:35,000 --> 00:13:39,080
talk that<font color="#CCCCCC"> Zach later and I did we</font>

289
00:13:36,770 --> 00:13:41,300
presented some examples of incorrect

290
00:13:39,080 --> 00:13:44,270
documentation and misleading

291
00:13:41,300 --> 00:13:46,310
documentation which also is a good

292
00:13:44,270 --> 00:13:48,829
reason<font color="#CCCCCC"> for</font><font color="#E5E5E5"> why we want</font><font color="#CCCCCC"> to have a map the</font>

293
00:13:46,310 --> 00:13:50,719
docs aren't correct at<font color="#CCCCCC"> least something</font>

294
00:13:48,830 --> 00:13:54,050
other than that should be a basis for

295
00:13:50,720 --> 00:13:55,700
reality documentation<font color="#E5E5E5"> is well known to</font>

296
00:13:54,050 --> 00:13:58,250
all of<font color="#E5E5E5"> us to not always be correct and</font>

297
00:13:55,700 --> 00:14:00,440
so you know why should we be relying on

298
00:13:58,250 --> 00:14:02,210
it for something that's so important to

299
00:14:00,440 --> 00:14:05,390
assist them<font color="#E5E5E5"> I mean as we all know</font>

300
00:14:02,210 --> 00:14:07,160
security is important so we're telling

301
00:14:05,390 --> 00:14:09,860
people<font color="#CCCCCC"> lies about what permissions are</font>

302
00:14:07,160 --> 00:14:14,209
required for what then we're not<font color="#E5E5E5"> really</font>

303
00:14:09,860 --> 00:14:17,210
helping the situation these<font color="#E5E5E5"> other two</font>

304
00:14:14,210 --> 00:14:21,050
<font color="#E5E5E5">were quite obvious so the permission gap</font>

305
00:14:17,210 --> 00:14:22,820
problem any situation arising when the

306
00:14:21,050 --> 00:14:24,439
permissions requested by an application

307
00:14:22,820 --> 00:14:26,030
and being installed do not match the

308
00:14:24,440 --> 00:14:28,040
permissions required by the application

309
00:14:26,030 --> 00:14:30,530
being installed and I sort of like to

310
00:14:28,040 --> 00:14:32,959
think about<font color="#E5E5E5"> this set theoretically let a</font>

311
00:14:30,530 --> 00:14:36,680
be<font color="#E5E5E5"> an Android app the P of a be a set of</font>

312
00:14:32,960 --> 00:14:37,630
permissions required sorry p of a be the

313
00:14:36,680 --> 00:14:41,099
set of permissions

314
00:14:37,630 --> 00:14:45,070
in androidmanifest.xml of the<font color="#E5E5E5"> app a</font>

315
00:14:41,100 --> 00:14:47,440
<font color="#E5E5E5">piste rab7 permissions required but at</font>

316
00:14:45,070 --> 00:14:50,140
the age of unsuccessful and as notation

317
00:14:47,440 --> 00:14:53,170
let p 1 p 2 blah blah blah just beat

318
00:14:50,140 --> 00:14:55,300
permissions within the system so

319
00:14:53,170 --> 00:14:58,089
essentially there's for granting cases

320
00:14:55,300 --> 00:15:02,109
associated with this gap problem first

321
00:14:58,090 --> 00:15:04,210
is<font color="#CCCCCC"> the ideal case in which all of the</font>

322
00:15:02,110 --> 00:15:06,010
permissions requested are the exact same

323
00:15:04,210 --> 00:15:09,070
<font color="#E5E5E5">as those required by the app to run</font>

324
00:15:06,010 --> 00:15:12,640
successfully you<font color="#CCCCCC"> can just</font><font color="#E5E5E5"> verify this by</font>

325
00:15:09,070 --> 00:15:14,440
doing a commutative<font color="#E5E5E5"> set theoretic</font>

326
00:15:12,640 --> 00:15:18,430
<font color="#CCCCCC">compliment</font><font color="#E5E5E5"> and verify that they both are</font>

327
00:15:14,440 --> 00:15:20,290
the null set the next case second case

328
00:15:18,430 --> 00:15:25,060
is the over granting case which is the

329
00:15:20,290 --> 00:15:27,550
most worrisome and this is when<font color="#E5E5E5"> p vay</font>

330
00:15:25,060 --> 00:15:29,349
the the app requesting permissions

331
00:15:27,550 --> 00:15:32,170
actually results in having more

332
00:15:29,350 --> 00:15:34,600
permissions requested than are<font color="#CCCCCC"> actually</font>

333
00:15:32,170 --> 00:15:36,699
required and this is a security<font color="#E5E5E5"> issue</font>

334
00:15:34,600 --> 00:15:38,670
which we'll talk about further thirdly

335
00:15:36,700 --> 00:15:41,350
is under granting which is the opposite

336
00:15:38,670 --> 00:15:43,120
your app doesn't request the permission

337
00:15:41,350 --> 00:15:46,690
is required to one successfully the

338
00:15:43,120 --> 00:15:48,250
methods used in and the fourth you can

339
00:15:46,690 --> 00:15:53,290
have both issues at the<font color="#E5E5E5"> same time and</font>

340
00:15:48,250 --> 00:15:56,260
that's just<font color="#E5E5E5"> overall mess so the under</font>

341
00:15:53,290 --> 00:16:00,510
granting case which is I would argue

342
00:15:56,260 --> 00:16:03,730
less issues theory maybe not<font color="#E5E5E5"> but</font>

343
00:16:00,510 --> 00:16:09,310
somewhat is basically she hears

344
00:16:03,730 --> 00:16:11,110
usability if I<font color="#CCCCCC"> can call bluetooth get</font>

345
00:16:09,310 --> 00:16:14,469
names and haven't returned successfully

346
00:16:11,110 --> 00:16:16,330
then there's a deficiency in my code you

347
00:16:14,470 --> 00:16:19,930
know<font color="#CCCCCC"> I'm expecting</font><font color="#E5E5E5"> to have that get name</font>

348
00:16:16,330 --> 00:16:21,520
to build up and use it<font color="#E5E5E5"> for something but</font>

349
00:16:19,930 --> 00:16:23,589
if I can't actually get<font color="#CCCCCC"> the name then</font>

350
00:16:21,520 --> 00:16:25,840
well there's a problem<font color="#E5E5E5"> there usability</font>

351
00:16:23,590 --> 00:16:27,850
and this often leads to what I call a

352
00:16:25,840 --> 00:16:30,130
chaotic permission<font color="#E5E5E5"> addict and it's</font>

353
00:16:27,850 --> 00:16:31,600
<font color="#E5E5E5">basically where developers sitting there</font>

354
00:16:30,130 --> 00:16:33,820
and they're like I need<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> this code</font>

355
00:16:31,600 --> 00:16:35,560
working let me get this code working in

356
00:16:33,820 --> 00:16:37,330
lomita<font color="#CCCCCC"> Zab every got every permission</font>

357
00:16:35,560 --> 00:16:39,699
under the Sun you<font color="#CCCCCC"> know bluetooth</font>

358
00:16:37,330 --> 00:16:41,980
<font color="#CCCCCC">bluetooth admin you know everything</font>

359
00:16:39,700 --> 00:16:43,240
access fine location yeah whatever just

360
00:16:41,980 --> 00:16:45,550
to make sure that the code works and

361
00:16:43,240 --> 00:16:47,020
it's usable and this sort<font color="#E5E5E5"> of leads this</font>

362
00:16:45,550 --> 00:16:49,630
over granting gap

363
00:16:47,020 --> 00:16:51,430
can and over granting as<font color="#E5E5E5"> I had described</font>

364
00:16:49,630 --> 00:16:53,250
it set theoretically is a clear failure

365
00:16:51,430 --> 00:16:55,000
of the principle of least privilege

366
00:16:53,250 --> 00:16:58,180
obviously you're asking<font color="#CCCCCC"> for more</font>

367
00:16:55,000 --> 00:17:02,800
permissions then you<font color="#E5E5E5"> even meet and so</font>

368
00:16:58,180 --> 00:17:04,270
that's<font color="#E5E5E5"> quite obvious and the basic sort</font>

369
00:17:02,800 --> 00:17:05,680
of security implications that you might

370
00:17:04,270 --> 00:17:10,270
want to think<font color="#E5E5E5"> about it say you're using</font>

371
00:17:05,680 --> 00:17:14,040
<font color="#E5E5E5">third-party libraries such as an ad such</font>

372
00:17:10,270 --> 00:17:18,160
as an ad library and your game app

373
00:17:14,040 --> 00:17:21,750
requests require sorry requests internet

374
00:17:18,160 --> 00:17:24,160
camera and read contacts<font color="#CCCCCC"> if</font><font color="#E5E5E5"> some</font>

375
00:17:21,750 --> 00:17:29,020
advertising library that you're using

376
00:17:24,160 --> 00:17:32,650
and in reality this get and load advert

377
00:17:29,020 --> 00:17:34,900
method will actually download some image

378
00:17:32,650 --> 00:17:39,280
that you can load and put<font color="#E5E5E5"> into your app</font>

379
00:17:34,900 --> 00:17:41,440
screen right but it notices that you

380
00:17:39,280 --> 00:17:43,600
have the camera and read contacts

381
00:17:41,440 --> 00:17:46,180
permission so it's<font color="#CCCCCC"> actually going to</font>

382
00:17:43,600 --> 00:17:48,219
<font color="#CCCCCC">also while you're doing the get and load</font>

383
00:17:46,180 --> 00:17:51,630
advert it's also going to do harvest

384
00:17:48,220 --> 00:17:55,720
contacts for spam and take pic and send

385
00:17:51,630 --> 00:17:57,520
now the<font color="#E5E5E5"> thing is is that your game in</font>

386
00:17:55,720 --> 00:17:59,500
<font color="#E5E5E5">this case in this scenario that I'm</font>

387
00:17:57,520 --> 00:18:02,440
presenting your game did<font color="#CCCCCC"> not actually</font>

388
00:17:59,500 --> 00:18:03,970
need camera or read contacts you will

389
00:18:02,440 --> 00:18:07,060
just you just happen to have them there

390
00:18:03,970 --> 00:18:09,730
perhaps<font color="#E5E5E5"> by copying another project or</font>

391
00:18:07,060 --> 00:18:13,510
other and what this does is<font color="#E5E5E5"> actually</font>

392
00:18:09,730 --> 00:18:16,780
<font color="#E5E5E5">allows them to do some evil right</font><font color="#CCCCCC"> and</font>

393
00:18:13,510 --> 00:18:19,030
that's kind of hidden underneath what

394
00:18:16,780 --> 00:18:25,389
their what their goal is which<font color="#CCCCCC"> is</font>

395
00:18:19,030 --> 00:18:27,160
getting<font color="#CCCCCC"> low</font><font color="#E5E5E5"> dead so obviously you would</font>

396
00:18:25,390 --> 00:18:30,670
want<font color="#E5E5E5"> to remove the camera Henry contacts</font>

397
00:18:27,160 --> 00:18:33,550
issue if we go back<font color="#CCCCCC"> to this sub some of</font>

398
00:18:30,670 --> 00:18:35,230
the other security implications I want

399
00:18:33,550 --> 00:18:37,510
to point you to this<font color="#E5E5E5"> last one that's</font>

400
00:18:35,230 --> 00:18:39,820
using other processes privileges some

401
00:18:37,510 --> 00:18:42,070
<font color="#E5E5E5">interesting work from</font><font color="#CCCCCC"> adrian porter felt</font>

402
00:18:39,820 --> 00:18:47,310
the papers listed in the references page

403
00:18:42,070 --> 00:18:51,070
but i highly recommend it furthermore

404
00:18:47,310 --> 00:18:54,460
for other permission gaps permission gap

405
00:18:51,070 --> 00:18:57,550
can occur in the case of copying or

406
00:18:54,460 --> 00:18:59,050
pasting old<font color="#E5E5E5"> third-party old or</font>

407
00:18:57,550 --> 00:18:59,610
third-party project basically you know

408
00:18:59,050 --> 00:19:02,220
I'm right

409
00:18:59,610 --> 00:19:05,580
I always<font color="#E5E5E5"> just copy usually I just copy</font>

410
00:19:02,220 --> 00:19:07,080
and paste something from before because

411
00:19:05,580 --> 00:19:10,290
I usually don't like to<font color="#E5E5E5"> use Eclipse I</font>

412
00:19:07,080 --> 00:19:12,449
just<font color="#E5E5E5"> like to you know use an</font><font color="#CCCCCC"> ant in the</font>

413
00:19:10,290 --> 00:19:15,389
command line stuff like that so it's

414
00:19:12,450 --> 00:19:17,730
easier for<font color="#E5E5E5"> me just copy and paste and I</font>

415
00:19:15,390 --> 00:19:19,950
just<font color="#E5E5E5"> wanted to remind you of principle</font>

416
00:19:17,730 --> 00:19:22,710
<font color="#E5E5E5">of least privilege you all know it very</font>

417
00:19:19,950 --> 00:19:24,150
well but you know the<font color="#CCCCCC"> idea is that you</font>

418
00:19:22,710 --> 00:19:25,860
must be able<font color="#E5E5E5"> to the app should only be</font>

419
00:19:24,150 --> 00:19:26,970
able to<font color="#CCCCCC"> access the information and</font>

420
00:19:25,860 --> 00:19:28,559
resources that<font color="#E5E5E5"> are necessary for</font>

421
00:19:26,970 --> 00:19:31,980
basically<font color="#CCCCCC"> allow</font><font color="#E5E5E5"> it to run in a</font>

422
00:19:28,559 --> 00:19:36,600
legitimate<font color="#E5E5E5"> matter the map as I argue can</font>

423
00:19:31,980 --> 00:19:41,010
achieve in this but this now makes me

424
00:19:36,600 --> 00:19:43,139
wonder why there is no map well Google

425
00:19:41,010 --> 00:19:47,370
after having<font color="#E5E5E5"> talked to their security</font>

426
00:19:43,140 --> 00:19:49,500
team or the Android security team deems

427
00:19:47,370 --> 00:19:51,360
this a low priority I'm sure they<font color="#CCCCCC"> have a</font>

428
00:19:49,500 --> 00:19:53,190
plenty of number of the other issues on

429
00:19:51,360 --> 00:19:55,918
their plate but they say<font color="#E5E5E5"> that this is</font>

430
00:19:53,190 --> 00:19:58,500
you know<font color="#CCCCCC"> not one with high priority I</font>

431
00:19:55,919 --> 00:20:00,809
tend to argue a little bit against that

432
00:19:58,500 --> 00:20:05,429
but we have no real say there because

433
00:20:00,809 --> 00:20:08,220
we're<font color="#CCCCCC"> not part of google number once</font>

434
00:20:05,429 --> 00:20:09,929
there had been no map to start with it's

435
00:20:08,220 --> 00:20:13,049
<font color="#CCCCCC">actually kind of difficult to</font><font color="#E5E5E5"> create one</font>

436
00:20:09,929 --> 00:20:14,760
as we're going to see and if you had one

437
00:20:13,049 --> 00:20:16,559
to start with it's actually a little bit

438
00:20:14,760 --> 00:20:19,440
easier<font color="#CCCCCC"> to build one out you know you can</font>

439
00:20:16,559 --> 00:20:21,870
just do dips between versions and it

440
00:20:19,440 --> 00:20:23,669
would take some hand analysis but you

441
00:20:21,870 --> 00:20:25,469
know doing the disks between them at

442
00:20:23,669 --> 00:20:29,160
least you have a baseline to<font color="#E5E5E5"> start and</font>

443
00:20:25,470 --> 00:20:30,809
give you and give the next<font color="#E5E5E5"> map that you</font>

444
00:20:29,160 --> 00:20:33,960
generate for the next revision some

445
00:20:30,809 --> 00:20:35,340
basis<font color="#CCCCCC"> believe as I stated before</font>

446
00:20:33,960 --> 00:20:36,780
multiple research or groups have

447
00:20:35,340 --> 00:20:38,909
attempted this but it's a tough problem

448
00:20:36,780 --> 00:20:43,370
so why is<font color="#E5E5E5"> it a tough problem well the</font>

449
00:20:38,910 --> 00:20:46,650
sheer size of the API this is huge and

450
00:20:43,370 --> 00:20:49,770
not all<font color="#E5E5E5"> permissions are checked in the</font>

451
00:20:46,650 --> 00:20:51,570
same manner yes there were the API

452
00:20:49,770 --> 00:20:52,799
methods that I presented earlier but

453
00:20:51,570 --> 00:20:55,500
there are other ways that permissions

454
00:20:52,799 --> 00:20:57,030
could be checked<font color="#CCCCCC"> and so we have to worry</font>

455
00:20:55,500 --> 00:21:00,090
about those when trying<font color="#E5E5E5"> to generate this</font>

456
00:20:57,030 --> 00:21:02,040
map also<font color="#CCCCCC"> check failures are not all</font>

457
00:21:00,090 --> 00:21:03,340
handed in the same way if I were<font color="#CCCCCC"> to do a</font>

458
00:21:02,040 --> 00:21:05,170
dynamic method for

459
00:21:03,340 --> 00:21:07,330
generating<font color="#E5E5E5"> this map I would have to do</font>

460
00:21:05,170 --> 00:21:08,890
some log analysis and with inconsistent

461
00:21:07,330 --> 00:21:11,080
logs well that's going<font color="#E5E5E5"> to be a problem</font>

462
00:21:08,890 --> 00:21:13,210
<font color="#CCCCCC">for basing assumption of in a tool to</font>

463
00:21:11,080 --> 00:21:16,210
actually harvest the permissions out of

464
00:21:13,210 --> 00:21:19,360
<font color="#CCCCCC">those logs and then obviously it's</font>

465
00:21:16,210 --> 00:21:21,670
moving target you know pushing out new

466
00:21:19,360 --> 00:21:23,500
API revisions you know you're<font color="#E5E5E5"> going to</font>

467
00:21:21,670 --> 00:21:25,150
have to regenerate a map there's<font color="#E5E5E5"> going</font>

468
00:21:23,500 --> 00:21:26,920
to have to be a<font color="#CCCCCC"> team or somebody that's</font>

469
00:21:25,150 --> 00:21:29,890
<font color="#E5E5E5">always going to be focused on generating</font>

470
00:21:26,920 --> 00:21:32,830
<font color="#E5E5E5">this and that and the last one here is</font>

471
00:21:29,890 --> 00:21:35,080
the most important one for everybody i

472
00:21:32,830 --> 00:21:38,679
think is<font color="#E5E5E5"> that there's no kind of ground</font>

473
00:21:35,080 --> 00:21:41,710
truth to really test your map to be

474
00:21:38,680 --> 00:21:43,600
correct if there was something that you

475
00:21:41,710 --> 00:21:45,550
<font color="#E5E5E5">could say is my map correct compared to</font>

476
00:21:43,600 --> 00:21:47,800
this thing well you'd already have done

477
00:21:45,550 --> 00:21:51,280
<font color="#E5E5E5">that the only way to actually verify</font>

478
00:21:47,800 --> 00:21:53,919
things is to how know<font color="#E5E5E5"> you have good test</font>

479
00:21:51,280 --> 00:21:57,040
cases with valid arguments that should

480
00:21:53,920 --> 00:22:00,250
run and then<font color="#CCCCCC"> actually run them and</font>

481
00:21:57,040 --> 00:22:03,370
verify things<font color="#CCCCCC"> to work so in terms of</font>

482
00:22:00,250 --> 00:22:07,480
numbers like<font color="#E5E5E5"> this the numbers of</font>

483
00:22:03,370 --> 00:22:11,800
permissions over<font color="#CCCCCC"> API calls / sorry / AP</font>

484
00:22:07,480 --> 00:22:13,720
I revisions is<font color="#CCCCCC"> ever increasing strongly</font>

485
00:22:11,800 --> 00:22:15,790
<font color="#E5E5E5">linner linear and if we sort of project</font>

486
00:22:13,720 --> 00:22:17,830
out to<font color="#CCCCCC"> wrap 30 is gonna be over 150</font>

487
00:22:15,790 --> 00:22:19,720
permissions that's quite a lot<font color="#CCCCCC"> in quite</font>

488
00:22:17,830 --> 00:22:24,850
a lot<font color="#E5E5E5"> of fine greatness and subsystems</font>

489
00:22:19,720 --> 00:22:27,730
to be thinking<font color="#E5E5E5"> about also there's this</font>

490
00:22:24,850 --> 00:22:33,550
ever-increasing class count there's you

491
00:22:27,730 --> 00:22:35,440
know was a Reb<font color="#CCCCCC"> 10 added NFC and things</font>

492
00:22:33,550 --> 00:22:37,810
of that nature so is<font color="#E5E5E5"> hardware more hard</font>

493
00:22:35,440 --> 00:22:40,030
work comes out there's going<font color="#CCCCCC"> to be the</font>

494
00:22:37,810 --> 00:22:43,540
need for more classes to support that

495
00:22:40,030 --> 00:22:45,580
hardware and therefore more code to

496
00:22:43,540 --> 00:22:47,950
analyze and to really sort of emphasize

497
00:22:45,580 --> 00:22:50,350
this is the number<font color="#CCCCCC"> of methods</font><font color="#E5E5E5"> that we</font>

498
00:22:47,950 --> 00:22:52,750
have here if we the blue is<font color="#CCCCCC"> actually</font>

499
00:22:50,350 --> 00:22:56,260
methods<font color="#CCCCCC"> plus constructors and the red</font><font color="#E5E5E5"> is</font>

500
00:22:52,750 --> 00:22:57,730
just methods alone but you know if<font color="#E5E5E5"> you</font>

501
00:22:56,260 --> 00:23:00,220
look<font color="#E5E5E5"> at this and you project out to</font><font color="#CCCCCC"> rev</font>

502
00:22:57,730 --> 00:23:00,429
30 you've got about<font color="#E5E5E5"> 36,000 methods that</font>

503
00:23:00,220 --> 00:23:02,379
you're

504
00:23:00,429 --> 00:23:03,759
have to analyze and then think about

505
00:23:02,379 --> 00:23:09,129
<font color="#E5E5E5">different arguments if you're doing a</font>

506
00:23:03,759 --> 00:23:12,549
dynamically relating to this check

507
00:23:09,129 --> 00:23:15,119
analysis issue say you're doing<font color="#E5E5E5"> static</font>

508
00:23:12,549 --> 00:23:18,490
analysis<font color="#CCCCCC"> to attempt</font><font color="#E5E5E5"> to generate this map</font>

509
00:23:15,119 --> 00:23:21,428
well you have<font color="#E5E5E5"> first of all you have to</font>

510
00:23:18,490 --> 00:23:23,590
get a grip<font color="#E5E5E5"> on all the API methods such</font>

511
00:23:21,429 --> 00:23:26,470
as those in the chit in the context

512
00:23:23,590 --> 00:23:29,499
class and that provided<font color="#CCCCCC"> by the package</font>

513
00:23:26,470 --> 00:23:30,639
manager and get a grip<font color="#E5E5E5"> on those so</font>

514
00:23:29,499 --> 00:23:32,889
there's a few there that you need to

515
00:23:30,639 --> 00:23:35,469
worry about but then you also<font color="#CCCCCC"> have to</font>

516
00:23:32,889 --> 00:23:37,479
worry about these edge cases basically

517
00:23:35,470 --> 00:23:40,749
as<font color="#E5E5E5"> I told you before permissions are</font>

518
00:23:37,480 --> 00:23:42,159
just strings in Java and so what can

519
00:23:40,749 --> 00:23:43,889
happen is this case here where they

520
00:23:42,159 --> 00:23:47,190
would do this service in info object

521
00:23:43,889 --> 00:23:49,928
requested from the package manager and

522
00:23:47,190 --> 00:23:53,919
they just<font color="#CCCCCC"> do a dot equals to compare</font>

523
00:23:49,929 --> 00:23:56,559
this behind er buying wallpaper string

524
00:23:53,919 --> 00:23:59,860
to the string that gets returned from SI

525
00:23:56,559 --> 00:24:05,200
permission so that's not like your

526
00:23:59,860 --> 00:24:08,049
standard<font color="#CCCCCC"> PDT pointer it's</font><font color="#E5E5E5"> non standard</font>

527
00:24:05,200 --> 00:24:10,059
<font color="#E5E5E5">non-conforming the API and then lastly</font>

528
00:24:08,049 --> 00:24:12,820
in terms of check analysis if you have

529
00:24:10,059 --> 00:24:15,700
group ID enforcement there is no check

530
00:24:12,820 --> 00:24:17,678
permission call it's done by<font color="#E5E5E5"> the US and</font>

531
00:24:15,700 --> 00:24:22,240
then gets returned up in the in an area

532
00:24:17,679 --> 00:24:23,529
upon upon verification time and so you

533
00:24:22,240 --> 00:24:29,710
know how are you supposed to look for

534
00:24:23,529 --> 00:24:31,809
that also<font color="#E5E5E5"> other complications since</font>

535
00:24:29,710 --> 00:24:36,580
these are<font color="#CCCCCC"> just strings that we're</font>

536
00:24:31,809 --> 00:24:39,759
dealing<font color="#E5E5E5"> with one in the API code could</font>

537
00:24:36,580 --> 00:24:41,830
conceivably define a local string that's

538
00:24:39,759 --> 00:24:46,210
just<font color="#E5E5E5"> Android permission android manifest</font>

539
00:24:41,830 --> 00:24:48,220
permission bluetooth and<font color="#E5E5E5"> pass that as an</font>

540
00:24:46,210 --> 00:24:51,340
argument to the check permission

541
00:24:48,220 --> 00:24:53,289
function so your code your analysis code

542
00:24:51,340 --> 00:24:55,299
actually has to be aware of local

543
00:24:53,289 --> 00:24:58,389
variables and keeping track of those not

544
00:24:55,299 --> 00:25:02,590
just actual method calls in analyzing

545
00:24:58,389 --> 00:25:04,869
the arguments to that another real big

546
00:25:02,590 --> 00:25:09,490
concern with these check issues is the

547
00:25:04,869 --> 00:25:12,409
fact that some API methods logically<font color="#E5E5E5"> are</font>

548
00:25:09,490 --> 00:25:14,030
have multiple permissions that can

549
00:25:12,410 --> 00:25:17,150
associated with them and they'll be

550
00:25:14,030 --> 00:25:20,660
associated in an doorways meaning you

551
00:25:17,150 --> 00:25:24,260
know if you have the bind wallpaper or

552
00:25:20,660 --> 00:25:28,460
the read contacts permission you can do

553
00:25:24,260 --> 00:25:30,500
something<font color="#E5E5E5"> or you might be both and in</font>

554
00:25:28,460 --> 00:25:35,420
this case it's hard with dynamic

555
00:25:30,500 --> 00:25:37,130
analysis because you might only test the

556
00:25:35,420 --> 00:25:39,140
code to a point where it will return

557
00:25:37,130 --> 00:25:40,940
failure on one of<font color="#E5E5E5"> this on one of the</font>

558
00:25:39,140 --> 00:25:42,380
verification points and so you'll

559
00:25:40,940 --> 00:25:44,780
believe<font color="#E5E5E5"> that the only permission</font>

560
00:25:42,380 --> 00:25:45,830
required for this API call is the one

561
00:25:44,780 --> 00:25:47,990
that you first triggered the security

562
00:25:45,830 --> 00:25:50,149
exceptional whereas maybe there's

563
00:25:47,990 --> 00:25:52,730
another layer or another layer to there

564
00:25:50,150 --> 00:25:54,200
that you need to get past in order to

565
00:25:52,730 --> 00:25:59,690
recognize all of the permissions

566
00:25:54,200 --> 00:26:02,890
required furthermore dynamic analysis is

567
00:25:59,690 --> 00:26:06,760
the log message consists in consistency

568
00:26:02,890 --> 00:26:08,900
the top we<font color="#CCCCCC"> have a fairly standard output</font>

569
00:26:06,760 --> 00:26:10,970
where they have thrown a security

570
00:26:08,900 --> 00:26:12,920
exception<font color="#E5E5E5"> and we saw this before with</font>

571
00:26:10,970 --> 00:26:15,560
the<font color="#CCCCCC"> Bluetooth example but now below</font>

572
00:26:12,920 --> 00:26:17,060
where we have an app that doesn't

573
00:26:15,560 --> 00:26:19,070
request the permanent of the<font color="#CCCCCC"> Internet</font>

574
00:26:17,060 --> 00:26:21,649
permission and we<font color="#E5E5E5"> actually get a socket</font>

575
00:26:19,070 --> 00:26:24,050
exception and<font color="#E5E5E5"> you can actually see the e</font>

576
00:26:21,650 --> 00:26:29,120
access permission denied there which is

577
00:26:24,050 --> 00:26:31,850
<font color="#E5E5E5">coming up from the OS call and these are</font>

578
00:26:29,120 --> 00:26:35,120
totally<font color="#E5E5E5"> different from each other</font><font color="#CCCCCC"> there</font>

579
00:26:31,850 --> 00:26:39,490
they're totally<font color="#CCCCCC"> December and from a log</font>

580
00:26:35,120 --> 00:26:42,260
harvesting to generate a method to

581
00:26:39,490 --> 00:26:44,450
permission you know you're going<font color="#E5E5E5"> to have</font>

582
00:26:42,260 --> 00:26:46,160
you don't have enough basis of

583
00:26:44,450 --> 00:26:50,810
assumption to build a tool in<font color="#E5E5E5"> order to</font>

584
00:26:46,160 --> 00:26:52,400
<font color="#E5E5E5">help you out with this also a very key</font>

585
00:26:50,810 --> 00:26:53,960
important difference is that at least in

586
00:26:52,400 --> 00:26:56,060
the Bluetooth case they're telling you

587
00:26:53,960 --> 00:26:57,140
the permission if you need but here

588
00:26:56,060 --> 00:26:58,220
they're not even telling you in the

589
00:26:57,140 --> 00:26:59,420
bottom case they're not telling you at

590
00:26:58,220 --> 00:27:00,610
all<font color="#E5E5E5"> that you need the internet</font>

591
00:26:59,420 --> 00:27:05,720
permission that's really what<font color="#CCCCCC"> you need</font>

592
00:27:00,610 --> 00:27:08,120
and again in terms<font color="#E5E5E5"> of difficulty with</font>

593
00:27:05,720 --> 00:27:10,700
results analysis there's no ground truth

594
00:27:08,120 --> 00:27:12,649
so really<font color="#E5E5E5"> what you have to do is say</font>

595
00:27:10,700 --> 00:27:14,960
other<font color="#E5E5E5"> people that are generating maps</font>

596
00:27:12,650 --> 00:27:18,320
other researchers<font color="#E5E5E5"> out there that are</font>

597
00:27:14,960 --> 00:27:20,800
generating maps let's compare them let's

598
00:27:18,320 --> 00:27:23,629
see how you know what<font color="#CCCCCC"> our beliefs are</font>

599
00:27:20,800 --> 00:27:25,549
together and if their differences<font color="#E5E5E5"> maybe</font>

600
00:27:23,630 --> 00:27:29,119
hash those out

601
00:27:25,549 --> 00:27:31,668
or not but the problem<font color="#CCCCCC"> with his is that</font>

602
00:27:29,119 --> 00:27:34,789
they're not<font color="#E5E5E5"> all correct each method for</font>

603
00:27:31,669 --> 00:27:39,200
generating their<font color="#CCCCCC"> maps</font><font color="#E5E5E5"> has shortcomings</font>

604
00:27:34,789 --> 00:27:41,059
in<font color="#E5E5E5"> fall backs in and if you can't rely</font>

605
00:27:39,200 --> 00:27:42,440
on the correctness of them and you have

606
00:27:41,059 --> 00:27:44,658
something incorrect in your map and

607
00:27:42,440 --> 00:27:47,779
you're validating them together well

608
00:27:44,659 --> 00:27:52,330
they've just double validated<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that</font>

609
00:27:47,779 --> 00:27:54,350
permission having so it's a<font color="#E5E5E5"> problem</font>

610
00:27:52,330 --> 00:27:58,189
we'll talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this dynamic side</font>

611
00:27:54,350 --> 00:28:00,918
product later so these<font color="#CCCCCC"> numbers of</font>

612
00:27:58,190 --> 00:28:02,989
reasons that I went<font color="#E5E5E5"> through the check</font>

613
00:28:00,919 --> 00:28:06,830
analysis the log analysis issues the

614
00:28:02,989 --> 00:28:09,019
numbers problem is basically why there

615
00:28:06,830 --> 00:28:12,799
have<font color="#E5E5E5"> been multiple solution attempts to</font>

616
00:28:09,019 --> 00:28:14,029
this people have said well if I went

617
00:28:12,799 --> 00:28:15,230
<font color="#E5E5E5">about it this</font><font color="#CCCCCC"> way I'd have this problem</font>

618
00:28:14,029 --> 00:28:16,369
I went about it this<font color="#CCCCCC"> way I'd have this</font>

619
00:28:15,230 --> 00:28:18,590
problem you know so they each tribe

620
00:28:16,369 --> 00:28:26,928
<font color="#E5E5E5">they're not so let's go</font><font color="#CCCCCC"> through some of</font>

621
00:28:18,590 --> 00:28:28,399
<font color="#E5E5E5">these I list these in chronological</font>

622
00:28:26,929 --> 00:28:30,109
order according to<font color="#E5E5E5"> published date</font>

623
00:28:28,399 --> 00:28:32,928
because I'm<font color="#E5E5E5"> not trying to give</font>

624
00:28:30,109 --> 00:28:37,970
preference dating I think they're all

625
00:28:32,929 --> 00:28:42,679
legitimate ideas and worth thinking

626
00:28:37,970 --> 00:28:44,570
about and possibly enhancing or merging

627
00:28:42,679 --> 00:28:48,919
with some of the others and come up<font color="#E5E5E5"> with</font>

628
00:28:44,570 --> 00:28:50,658
a more comprehensive solution first<font color="#E5E5E5"> work</font>

629
00:28:48,919 --> 00:28:53,330
<font color="#E5E5E5">with a</font><font color="#CCCCCC"> berkeley method Oz has</font><font color="#E5E5E5"> worked</font>

630
00:28:50,659 --> 00:28:55,609
under David Wagner and<font color="#E5E5E5"> Dawn song many of</font>

631
00:28:53,330 --> 00:28:57,529
you may remember dawn song from a lot of

632
00:28:55,609 --> 00:28:59,989
<font color="#CCCCCC">work but one of the things she did</font><font color="#E5E5E5"> in</font>

633
00:28:57,529 --> 00:29:04,609
the early 2000s was looking at SSH

634
00:28:59,989 --> 00:29:06,440
connections and basically came up with

635
00:29:04,609 --> 00:29:08,480
the idea that you know if you look<font color="#E5E5E5"> at an</font>

636
00:29:06,440 --> 00:29:10,730
ssh connection for long enough you can

637
00:29:08,480 --> 00:29:13,129
<font color="#CCCCCC">begin to</font><font color="#E5E5E5"> recognize patterns and</font><font color="#CCCCCC"> then</font>

638
00:29:10,730 --> 00:29:15,409
begin to<font color="#E5E5E5"> sort of determine what's going</font>

639
00:29:13,129 --> 00:29:17,748
on in that session and so<font color="#E5E5E5"> she was one of</font>

640
00:29:15,409 --> 00:29:19,970
<font color="#E5E5E5">the ones that pushed for doing random</font>

641
00:29:17,749 --> 00:29:21,409
padding the packets<font color="#E5E5E5"> SSH packets and that</font>

642
00:29:19,970 --> 00:29:25,369
kind of thing to<font color="#E5E5E5"> throw off each</font>

643
00:29:21,409 --> 00:29:29,929
eavesdroppers this was presented at ACM

644
00:29:25,369 --> 00:29:32,539
computer<font color="#CCCCCC"> communication security 2011 so</font>

645
00:29:29,929 --> 00:29:36,919
their approach basically they will

646
00:29:32,539 --> 00:29:40,249
generate<font color="#E5E5E5"> an app or multiple SOC that</font>

647
00:29:36,919 --> 00:29:43,309
calls like every API method within the

648
00:29:40,249 --> 00:29:46,669
within<font color="#E5E5E5"> the Android jaw and it'll do it</font>

649
00:29:43,309 --> 00:29:48,950
with varying arguments and when it

650
00:29:46,669 --> 00:29:51,609
creates the APK file it will put no

651
00:29:48,950 --> 00:29:54,440
permissions in the androidmanifest.xml

652
00:29:51,609 --> 00:29:56,658
the idea here<font color="#E5E5E5"> is that when you call any</font>

653
00:29:54,440 --> 00:29:58,669
method that requires a permission well

654
00:29:56,659 --> 00:30:00,409
you have no permissions requested and so

655
00:29:58,669 --> 00:30:02,480
it should throw security exception and

656
00:30:00,409 --> 00:30:06,950
from there they can<font color="#E5E5E5"> harvest those from</font>

657
00:30:02,480 --> 00:30:10,210
log count but the problem<font color="#CCCCCC"> is as we saw</font>

658
00:30:06,950 --> 00:30:13,100
is the log into consistencies so

659
00:30:10,210 --> 00:30:15,499
basically<font color="#E5E5E5"> what they do</font><font color="#CCCCCC"> is they don't</font>

660
00:30:13,100 --> 00:30:18,850
specify in their paper exactly how they

661
00:30:15,499 --> 00:30:22,100
do it but the<font color="#CCCCCC"> way i would do it is just</font>

662
00:30:18,850 --> 00:30:24,859
<font color="#E5E5E5">wrap each API call to catch</font>

663
00:30:22,100 --> 00:30:28,009
securityexception and have a nice round

664
00:30:24,859 --> 00:30:31,549
fit the basic flow of how their stuff

665
00:30:28,009 --> 00:30:34,009
works they did this test generation they

666
00:30:31,549 --> 00:30:37,759
run the<font color="#CCCCCC"> apk and then they do log</font>

667
00:30:34,009 --> 00:30:39,080
analysis in the APK generation the sides

668
00:30:37,759 --> 00:30:42,889
from no provisions in the

669
00:30:39,080 --> 00:30:46,730
androidmanifest.xml there's a<font color="#E5E5E5"> number of</font>

670
00:30:42,889 --> 00:30:48,918
steps that require real work<font color="#E5E5E5"> and the</font>

671
00:30:46,730 --> 00:30:51,590
first is they analyze the android jar to

672
00:30:48,919 --> 00:30:55,249
see what what they actually should be

673
00:30:51,590 --> 00:30:57,918
calling which methods and things of that

674
00:30:55,249 --> 00:31:00,440
nature as well<font color="#E5E5E5"> as they look up types</font>

675
00:30:57,919 --> 00:31:02,869
data types the reason<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> that</font>

676
00:31:00,440 --> 00:31:04,700
in order to call android methods you

677
00:31:02,869 --> 00:31:06,470
actually<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> have have arguments to</font>

678
00:31:04,700 --> 00:31:09,349
those methods and they're not all going

679
00:31:06,470 --> 00:31:11,480
<font color="#E5E5E5">to be string or int or basic data types</font>

680
00:31:09,349 --> 00:31:13,609
they're going to be more complex object

681
00:31:11,480 --> 00:31:17,330
types that are part of the<font color="#CCCCCC"> Android API</font>

682
00:31:13,609 --> 00:31:20,629
<font color="#E5E5E5">and so they have to create a variable</font>

683
00:31:17,330 --> 00:31:24,489
pool and that's you<font color="#CCCCCC"> know so i can say i</font>

684
00:31:20,629 --> 00:31:27,590
need<font color="#E5E5E5"> to create test case blah and i need</font>

685
00:31:24,489 --> 00:31:30,889
android type bluetooth adapter keep

686
00:31:27,590 --> 00:31:34,039
using that and well hey they<font color="#CCCCCC"> have one</font>

687
00:31:30,889 --> 00:31:36,738
ready in that pool to be used so that's

688
00:31:34,039 --> 00:31:39,649
great that's helpful they must<font color="#E5E5E5"> also</font>

689
00:31:36,739 --> 00:31:41,779
generate object instantiation code and

690
00:31:39,649 --> 00:31:44,929
this can either come from constructor as

691
00:31:41,779 --> 00:31:47,050
you know or static methods where maybe

692
00:31:44,930 --> 00:31:51,260
need to<font color="#E5E5E5"> get a handle to a service our</font>

693
00:31:47,050 --> 00:31:52,730
service management class and then lastly

694
00:31:51,260 --> 00:31:56,660
they need to generate the method calling

695
00:31:52,730 --> 00:31:59,240
code and in<font color="#E5E5E5"> this they need to have it is</font>

696
00:31:56,660 --> 00:32:04,370
ideal to have varying arguments and the

697
00:31:59,240 --> 00:32:07,250
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> for that is</font><font color="#E5E5E5"> to hopefully test the</font>

698
00:32:04,370 --> 00:32:11,260
code well enough so that<font color="#E5E5E5"> you can trigger</font>

699
00:32:07,250 --> 00:32:18,410
any security exceptions that would occur

700
00:32:11,260 --> 00:32:22,879
yeah but this method<font color="#CCCCCC"> ah</font><font color="#E5E5E5"> has some clear</font>

701
00:32:18,410 --> 00:32:25,400
drawbacks the first foremost is are they

702
00:32:22,880 --> 00:32:27,560
running this it is apks with no

703
00:32:25,400 --> 00:32:29,720
permissions on<font color="#E5E5E5"> an emulator or are they</font>

704
00:32:27,560 --> 00:32:31,580
<font color="#CCCCCC">doing it on</font><font color="#E5E5E5"> hardware if they're doing</font><font color="#CCCCCC"> it</font>

705
00:32:29,720 --> 00:32:33,530
<font color="#E5E5E5">on an emulator they're clearly not going</font>

706
00:32:31,580 --> 00:32:34,879
to handle the<font color="#E5E5E5"> Bluetooth stuff they're</font>

707
00:32:33,530 --> 00:32:37,340
clearly not going to handle the NFC

708
00:32:34,880 --> 00:32:38,990
cases so there's issues there they're

709
00:32:37,340 --> 00:32:41,689
going<font color="#E5E5E5"> to miss permissions based upon</font>

710
00:32:38,990 --> 00:32:43,370
that<font color="#E5E5E5"> so they have to run on hardware but</font>

711
00:32:41,690 --> 00:32:47,900
I'm<font color="#E5E5E5"> running on Hardware has its own</font>

712
00:32:43,370 --> 00:32:50,689
issues as we all know next issue is this

713
00:32:47,900 --> 00:32:55,580
called poem called code calling and

714
00:32:50,690 --> 00:32:58,700
system state basically if you're calling

715
00:32:55,580 --> 00:33:01,010
methods within the<font color="#E5E5E5"> API and the first</font>

716
00:32:58,700 --> 00:33:03,410
<font color="#E5E5E5">argument to some method to some method</font>

717
00:33:01,010 --> 00:33:06,860
is an integer but really it's expecting

718
00:33:03,410 --> 00:33:10,430
some enumerated type from<font color="#CCCCCC"> values 0 to 10</font>

719
00:33:06,860 --> 00:33:11,659
but<font color="#E5E5E5"> you keep giving it a 1024 well</font>

720
00:33:10,430 --> 00:33:13,550
clearly that's not going to help in

721
00:33:11,660 --> 00:33:15,740
<font color="#E5E5E5">terms of actually trying to successfully</font>

722
00:33:13,550 --> 00:33:17,090
run the method and actually successfully

723
00:33:15,740 --> 00:33:20,630
trying to get to<font color="#E5E5E5"> the security exception</font>

724
00:33:17,090 --> 00:33:23,629
state also call ordering can be

725
00:33:20,630 --> 00:33:25,610
important if you make one call ahead of

726
00:33:23,630 --> 00:33:27,770
another perhaps that changes the system

727
00:33:25,610 --> 00:33:29,330
state so that you have some issues in

728
00:33:27,770 --> 00:33:31,580
terms of triggering<font color="#E5E5E5"> the security</font>

729
00:33:29,330 --> 00:33:33,830
exception<font color="#E5E5E5"> I already mentioned the</font>

730
00:33:31,580 --> 00:33:38,600
failure to failure to discover the

731
00:33:33,830 --> 00:33:41,899
logical and or cases but a major problem

732
00:33:38,600 --> 00:33:43,580
here<font color="#CCCCCC"> is that they need to test all of</font>

733
00:33:41,900 --> 00:33:45,500
these methods in order to verify that

734
00:33:43,580 --> 00:33:47,570
they've got<font color="#E5E5E5"> all the security exceptions</font>

735
00:33:45,500 --> 00:33:50,600
throne and can harvest all that data and

736
00:33:47,570 --> 00:33:52,870
there's at this point over 29,000 and

737
00:33:50,600 --> 00:33:55,340
then you very those method arguments

738
00:33:52,870 --> 00:33:56,570
that's all that's a lot of<font color="#E5E5E5"> test cases</font>

739
00:33:55,340 --> 00:34:00,439
generating<font color="#E5E5E5"> of course of doing this</font>

740
00:33:56,570 --> 00:34:03,649
automatically however those<font color="#E5E5E5"> cases where</font>

741
00:34:00,440 --> 00:34:08,389
they do it manually so in terms<font color="#E5E5E5"> of</font>

742
00:34:03,650 --> 00:34:10,250
availability they released no code but

743
00:34:08,389 --> 00:34:12,159
they did put up<font color="#E5E5E5"> a website</font><font color="#CCCCCC"> android</font>

744
00:34:10,250 --> 00:34:15,010
permission store which was housing

745
00:34:12,159 --> 00:34:19,009
permission maps that they generated and

746
00:34:15,010 --> 00:34:21,050
they housed them and said they weren't

747
00:34:19,010 --> 00:34:24,350
necessarily correct and we're always

748
00:34:21,050 --> 00:34:25,370
offering for people to submit fixes to

749
00:34:24,350 --> 00:34:27,080
them so that doesn't really make you

750
00:34:25,370 --> 00:34:28,190
feel<font color="#CCCCCC"> very good even though the people</font>

751
00:34:27,080 --> 00:34:32,960
working on the problem we're very

752
00:34:28,190 --> 00:34:35,870
reliable but as you can see here the

753
00:34:32,960 --> 00:34:39,290
websites bent down it said it was going

754
00:34:35,870 --> 00:34:42,589
to<font color="#E5E5E5"> be back July fifth yeah I checked out</font>

755
00:34:39,290 --> 00:34:44,690
yesterday I think and it's not up<font color="#E5E5E5"> I also</font>

756
00:34:42,590 --> 00:34:47,500
saw something on the<font color="#E5E5E5"> Berkeley website</font>

757
00:34:44,690 --> 00:34:52,690
about some<font color="#E5E5E5"> help some work that was</font>

758
00:34:47,500 --> 00:34:54,920
redacted and<font color="#E5E5E5"> I couldn't find a clear</font>

759
00:34:52,690 --> 00:34:58,340
website describing what was going on

760
00:34:54,920 --> 00:34:59,930
there but from what I<font color="#E5E5E5"> feel is that maybe</font>

761
00:34:58,340 --> 00:35:02,960
someone in their own group was like this

762
00:34:59,930 --> 00:35:08,049
isn't really<font color="#CCCCCC"> up to snuff so let's sort</font>

763
00:35:02,960 --> 00:35:11,720
of unpublish this gives you real faith

764
00:35:08,050 --> 00:35:14,000
so this is<font color="#E5E5E5"> sort of an aside to this it's</font>

765
00:35:11,720 --> 00:35:16,279
worth noting that they first tried doing

766
00:35:14,000 --> 00:35:20,260
the APK generation using Randy branded

767
00:35:16,280 --> 00:35:23,420
basically is a<font color="#E5E5E5"> random java test</font>

768
00:35:20,260 --> 00:35:25,870
generator will you pass it a jar it will

769
00:35:23,420 --> 00:35:28,550
try to do its best at generating

770
00:35:25,870 --> 00:35:31,609
multiple calls the methods within that

771
00:35:28,550 --> 00:35:34,750
jar and throw it all sorts of<font color="#CCCCCC"> different</font>

772
00:35:31,610 --> 00:35:37,070
arguments and generate a whole bunch<font color="#CCCCCC"> I</font>

773
00:35:34,750 --> 00:35:39,440
decided<font color="#E5E5E5"> to try to do this just to see</font>

774
00:35:37,070 --> 00:35:41,570
how it worked and I have to agree lit

775
00:35:39,440 --> 00:35:43,220
agree with them it was very unwieldy but

776
00:35:41,570 --> 00:35:47,540
the biggest problem<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that you had to</font>

777
00:35:43,220 --> 00:35:50,180
then modify the the set up so that you

778
00:35:47,540 --> 00:35:52,250
were generating just one APK you're

779
00:35:50,180 --> 00:35:56,109
quickly going to hit the the method

780
00:35:52,250 --> 00:35:59,209
reference limit and just 64 / 64<font color="#E5E5E5"> K</font>

781
00:35:56,109 --> 00:36:00,709
it's also j unit heavy and it<font color="#E5E5E5"> was hard</font>

782
00:35:59,209 --> 00:36:03,259
to integrate<font color="#E5E5E5"> android types and hardy</font>

783
00:36:00,709 --> 00:36:05,359
controls written in<font color="#CCCCCC"> java so they wrote</font>

784
00:36:03,259 --> 00:36:10,249
their own tool and as you'll see<font color="#E5E5E5"> i</font>

785
00:36:05,359 --> 00:36:12,199
recommend to<font color="#E5E5E5"> we were not departing from</font>

786
00:36:10,249 --> 00:36:14,779
dynamic<font color="#E5E5E5"> analysis you have the University</font>

787
00:36:12,199 --> 00:36:17,420
of<font color="#E5E5E5"> Luxembourg and lil methods done our</font>

788
00:36:14,779 --> 00:36:18,739
work under later on and on Peru this was

789
00:36:17,420 --> 00:36:20,749
published<font color="#E5E5E5"> an archive but I'm not</font><font color="#CCCCCC"> really</font>

790
00:36:18,739 --> 00:36:23,569
sure if it was discussed anywhere

791
00:36:20,749 --> 00:36:25,549
publicly they use a forward static

792
00:36:23,569 --> 00:36:28,759
analysis approach basically what they do

793
00:36:25,549 --> 00:36:33,079
is they say we're going to build a call

794
00:36:28,759 --> 00:36:36,380
graph of the<font color="#CCCCCC"> android</font><font color="#E5E5E5"> jar and we're going</font>

795
00:36:33,079 --> 00:36:40,819
<font color="#E5E5E5">to attempt to go from all the method</font>

796
00:36:36,380 --> 00:36:43,609
calls and try to find<font color="#E5E5E5"> the permission</font>

797
00:36:40,819 --> 00:36:47,150
enforcement points and if they can<font color="#E5E5E5"> find</font>

798
00:36:43,609 --> 00:36:49,670
from a method call if they find a

799
00:36:47,150 --> 00:36:51,650
permission enforcement point well they

800
00:36:49,670 --> 00:37:00,679
know that that met that API method

801
00:36:51,650 --> 00:37:02,269
requires that permission and so sort of

802
00:37:00,679 --> 00:37:05,179
a flow graph of what they do so for<font color="#E5E5E5"> each</font>

803
00:37:02,269 --> 00:37:07,189
class I for each method k go through

804
00:37:05,179 --> 00:37:09,170
this whole step of iterating through the

805
00:37:07,189 --> 00:37:11,598
tree generated by the entry point that

806
00:37:09,170 --> 00:37:13,699
is method k and they're using<font color="#E5E5E5"> this</font>

807
00:37:11,599 --> 00:37:16,099
library called suit which is an

808
00:37:13,699 --> 00:37:18,709
optimization framework it can be used<font color="#E5E5E5"> on</font>

809
00:37:16,099 --> 00:37:22,789
java source jars or intermediate

810
00:37:18,709 --> 00:37:25,459
representations the main issues to note

811
00:37:22,789 --> 00:37:28,369
is that they must iterate through all

812
00:37:25,459 --> 00:37:31,910
the<font color="#E5E5E5"> API calls like the dynamic date the</font>

813
00:37:28,369 --> 00:37:35,900
call graph is extremely heavy and they

814
00:37:31,910 --> 00:37:38,839
<font color="#CCCCCC">do not get to the lower level group</font>

815
00:37:35,900 --> 00:37:41,630
checks and it's not<font color="#E5E5E5"> clear as to how they</font>

816
00:37:38,839 --> 00:37:43,160
mark BTW peas in there tree there is no

817
00:37:41,630 --> 00:37:48,819
code available and they don't release

818
00:37:43,160 --> 00:37:52,699
any maps for analysis the work done<font color="#CCCCCC"> by</font>

819
00:37:48,819 --> 00:37:54,799
<font color="#E5E5E5">Zach linear in myself was the three of</font>

820
00:37:52,699 --> 00:37:57,160
2002 and basically it's a hybrid static

821
00:37:54,799 --> 00:38:02,359
and dynamic approach we use source

822
00:37:57,160 --> 00:38:06,040
analysis to get a baseline map and then

823
00:38:02,359 --> 00:38:08,290
we generate all these apks with no

824
00:38:06,040 --> 00:38:10,810
no permissions in manifest not<font color="#CCCCCC"> XML</font><font color="#E5E5E5"> and</font>

825
00:38:08,290 --> 00:38:14,230
try to run that and harvest the logs in

826
00:38:10,810 --> 00:38:16,930
order to determine what we had missed

827
00:38:14,230 --> 00:38:18,790
from our static<font color="#CCCCCC"> analysis approach and</font>

828
00:38:16,930 --> 00:38:25,870
our backward static analysis approach we

829
00:38:18,790 --> 00:38:29,860
use we basically take a look at each PP

830
00:38:25,870 --> 00:38:31,330
point and then using the<font color="#E5E5E5"> tool cscope</font>

831
00:38:29,860 --> 00:38:34,570
which we've modified<font color="#E5E5E5"> to better handle</font>

832
00:38:31,330 --> 00:38:39,190
<font color="#CCCCCC">Java and the the interface description</font>

833
00:38:34,570 --> 00:38:41,410
language from<font color="#E5E5E5"> Android we say find this</font>

834
00:38:39,190 --> 00:38:43,600
symbol which basically means find all

835
00:38:41,410 --> 00:38:46,000
the points in the tree where there's a

836
00:38:43,600 --> 00:38:47,230
<font color="#CCCCCC">professional enforcement point then we</font>

837
00:38:46,000 --> 00:38:49,210
go through each one<font color="#CCCCCC"> of those permission</font>

838
00:38:47,230 --> 00:38:53,680
enforcement points and we attempted to

839
00:38:49,210 --> 00:38:55,390
find all the methods calling that check

840
00:38:53,680 --> 00:38:57,460
all those methods are any of them API

841
00:38:55,390 --> 00:38:59,920
methods if they<font color="#E5E5E5"> are great Adam to the</font>

842
00:38:57,460 --> 00:39:02,260
map they're not continue find out what

843
00:38:59,920 --> 00:39:05,170
methods are being are calling that

844
00:39:02,260 --> 00:39:08,290
<font color="#CCCCCC">method then is it an API call are any of</font>

845
00:39:05,170 --> 00:39:10,990
those<font color="#E5E5E5"> API methods continue the process</font>

846
00:39:08,290 --> 00:39:13,060
out to the graphs edge based from the

847
00:39:10,990 --> 00:39:14,649
PDP star and the thing is is it to the

848
00:39:13,060 --> 00:39:17,880
lightweight call graph this is because

849
00:39:14,650 --> 00:39:21,430
<font color="#E5E5E5">all we're doing is querying an indexed</font>

850
00:39:17,880 --> 00:39:24,010
source index basically and there's<font color="#E5E5E5"> no</font>

851
00:39:21,430 --> 00:39:27,700
just graph with nodes and edges that is

852
00:39:24,010 --> 00:39:29,230
loaded into a file so this<font color="#E5E5E5"> is just a</font>

853
00:39:27,700 --> 00:39:30,790
description of<font color="#CCCCCC"> the thing of the the</font>

854
00:39:29,230 --> 00:39:34,210
process<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> backward static</font>

855
00:39:30,790 --> 00:39:38,020
reaching process and then we go on and

856
00:39:34,210 --> 00:39:40,150
use a dynamic analysis approach and as I

857
00:39:38,020 --> 00:39:42,250
mentioned<font color="#CCCCCC"> before it's a failure in</font><font color="#E5E5E5"> this</font>

858
00:39:40,150 --> 00:39:43,330
case we'll catch things such as internet

859
00:39:42,250 --> 00:39:45,040
because we<font color="#CCCCCC"> actually try</font><font color="#E5E5E5"> to create a</font>

860
00:39:43,330 --> 00:39:47,710
socket we actually<font color="#CCCCCC"> try to go out and</font>

861
00:39:45,040 --> 00:39:49,450
connect to something we is is sort of

862
00:39:47,710 --> 00:39:51,130
similar<font color="#E5E5E5"> to Berkeley's method it's there</font>

863
00:39:49,450 --> 00:39:53,560
there they were the inspiration for this

864
00:39:51,130 --> 00:39:55,780
part we<font color="#E5E5E5"> have a variable pool for</font>

865
00:39:53,560 --> 00:39:59,560
arguments we generate calls by<font color="#E5E5E5"> Android</font>

866
00:39:55,780 --> 00:40:02,500
the the jar analysis and we put no

867
00:39:59,560 --> 00:40:05,200
permissions in androidmanifest.xml and

868
00:40:02,500 --> 00:40:06,840
also<font color="#CCCCCC"> we generate multiple apks in order</font>

869
00:40:05,200 --> 00:40:09,240
to avoid the

870
00:40:06,840 --> 00:40:11,730
method references so then we take the

871
00:40:09,240 --> 00:40:13,680
static and dynamic our maps that were

872
00:40:11,730 --> 00:40:18,480
generated and we merge them in any

873
00:40:13,680 --> 00:40:19,589
conflicts we have to hand in laws so

874
00:40:18,480 --> 00:40:22,170
some basic issues to know what this is

875
00:40:19,590 --> 00:40:23,850
that you need the source them and as

876
00:40:22,170 --> 00:40:28,560
anybody who download the Android source

877
00:40:23,850 --> 00:40:31,830
code takes time takes a while it's also

878
00:40:28,560 --> 00:40:37,080
a<font color="#E5E5E5"> two-step process which might</font><font color="#CCCCCC"> be a</font>

879
00:40:31,830 --> 00:40:39,660
little off-putting and conflicts in map

880
00:40:37,080 --> 00:40:41,370
merging is a problem because that then

881
00:40:39,660 --> 00:40:42,600
requires manual investigation and the

882
00:40:41,370 --> 00:40:45,630
whole goal with this is to make this

883
00:40:42,600 --> 00:40:48,750
automatic we also don't provide any code

884
00:40:45,630 --> 00:40:54,300
we don't have any<font color="#CCCCCC"> maps I'm not sure I</font>

885
00:40:48,750 --> 00:40:56,160
should<font color="#CCCCCC"> be laughing that but anyway but</font>

886
00:40:54,300 --> 00:40:59,070
there are<font color="#CCCCCC"> some positives to this the</font>

887
00:40:56,160 --> 00:41:01,220
fact that it really by having this sort

888
00:40:59,070 --> 00:41:04,410
of two-sided approach you're going to

889
00:41:01,220 --> 00:41:06,629
reduce<font color="#E5E5E5"> your reliance on manual methods</font>

890
00:41:04,410 --> 00:41:09,299
over the long term and<font color="#CCCCCC"> as a side benefit</font>

891
00:41:06,630 --> 00:41:11,640
of generating these dynamic cases you're

892
00:41:09,300 --> 00:41:13,770
actually generating test cases at<font color="#E5E5E5"> the</font>

893
00:41:11,640 --> 00:41:15,330
same time all I need to do is add

894
00:41:13,770 --> 00:41:19,740
permissions and validate that things ran

895
00:41:15,330 --> 00:41:22,410
<font color="#CCCCCC">okay so I'm going to mention this and</font>

896
00:41:19,740 --> 00:41:25,439
skip over at due to time the University

897
00:41:22,410 --> 00:41:26,879
<font color="#CCCCCC">of Toronto has done a backward reaching</font>

898
00:41:25,440 --> 00:41:29,540
static analysis approach where they you

899
00:41:26,880 --> 00:41:31,950
sit to analyze the androids are binary

900
00:41:29,540 --> 00:41:34,800
basically what they do is similar to us

901
00:41:31,950 --> 00:41:37,080
they go<font color="#CCCCCC"> from the PEP points back to the</font>

902
00:41:34,800 --> 00:41:41,040
entry points so they you know find all

903
00:41:37,080 --> 00:41:44,790
calling all calling methods of a check

904
00:41:41,040 --> 00:41:47,700
permission case and compare any of those

905
00:41:44,790 --> 00:41:51,080
<font color="#E5E5E5">callings to</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> methods they are at to</font>

906
00:41:47,700 --> 00:41:51,080
the max hiring<font color="#CCCCCC"> Center iterate through</font>

907
00:41:52,530 --> 00:42:00,100
they actually<font color="#CCCCCC"> do publish their code and</font>

908
00:41:55,540 --> 00:42:01,450
<font color="#E5E5E5">some map p</font><font color="#CCCCCC"> scout is pretty good</font><font color="#E5E5E5"> I've</font>

909
00:42:00,100 --> 00:42:04,990
gone through<font color="#E5E5E5"> it that's a little</font><font color="#CCCCCC"> bit</font>

910
00:42:01,450 --> 00:42:06,279
complicated but as many of these are<font color="#CCCCCC"> we</font>

911
00:42:04,990 --> 00:42:09,540
were dealing with<font color="#E5E5E5"> a large source base</font>

912
00:42:06,280 --> 00:42:13,060
you're dealing with a large jar file

913
00:42:09,540 --> 00:42:17,770
dealing<font color="#E5E5E5"> with a lot of code they provide</font>

914
00:42:13,060 --> 00:42:23,279
maps for those as of last week and I'm

915
00:42:17,770 --> 00:42:23,280
at a time so let me<font color="#E5E5E5"> just close this</font>

916
00:42:24,600 --> 00:42:28,620
dynamic approach this problem there's a

917
00:42:26,680 --> 00:42:31,149
lot of halt there's a<font color="#E5E5E5"> lot of issues</font>

918
00:42:28,620 --> 00:42:33,339
there's<font color="#CCCCCC"> long-term manual work required</font>

919
00:42:31,150 --> 00:42:38,680
an increased failure to find permission

920
00:42:33,340 --> 00:42:40,180
mappings also the static methods is a

921
00:42:38,680 --> 00:42:41,879
little bit more reliable but there is

922
00:42:40,180 --> 00:42:45,129
some manual work in terms of patching

923
00:42:41,880 --> 00:42:48,400
the call graph of the binder need to

924
00:42:45,130 --> 00:42:54,400
handle group permission cases such as

925
00:42:48,400 --> 00:42:56,410
<font color="#CCCCCC">internet and yeah so but the the last</font>

926
00:42:54,400 --> 00:42:58,330
benefit of the dynamic is that you<font color="#E5E5E5"> get</font>

927
00:42:56,410 --> 00:42:59,890
these validation test phases for free so

928
00:42:58,330 --> 00:43:01,390
as you<font color="#E5E5E5"> can see it's a mixed bag right</font>

929
00:42:59,890 --> 00:43:03,100
there are some positives there are some

930
00:43:01,390 --> 00:43:07,509
negatives each part a<font color="#E5E5E5"> little bit of</font>

931
00:43:03,100 --> 00:43:10,120
manual each has<font color="#E5E5E5"> its good automagically</font>

932
00:43:07,510 --> 00:43:16,770
map generation part but there is<font color="#E5E5E5"> always</font>

933
00:43:10,120 --> 00:43:18,940
some work let<font color="#E5E5E5"> me just finish with this</font>

934
00:43:16,770 --> 00:43:21,340
so these two things are the most

935
00:43:18,940 --> 00:43:23,860
important part my<font color="#E5E5E5"> opinion so what is the</font>

936
00:43:21,340 --> 00:43:25,750
solution either<font color="#CCCCCC"> Google</font><font color="#E5E5E5"> or stable</font>

937
00:43:23,860 --> 00:43:28,810
third-party organizations going to kind

938
00:43:25,750 --> 00:43:30,190
of maintain this map they're<font color="#E5E5E5"> going to</font>

939
00:43:28,810 --> 00:43:34,360
have to invest in creating the old maps

940
00:43:30,190 --> 00:43:37,150
that are ballot and mandate that SDK

941
00:43:34,360 --> 00:43:39,820
each SDK released has a map I believe it

942
00:43:37,150 --> 00:43:41,800
should<font color="#E5E5E5"> just be the platforms Android Rev</font>

943
00:43:39,820 --> 00:43:43,120
<font color="#E5E5E5">in that directory and should look</font>

944
00:43:41,800 --> 00:43:44,740
something like this you know you have

945
00:43:43,120 --> 00:43:46,930
the<font color="#E5E5E5"> permission call on the left and then</font>

946
00:43:44,740 --> 00:43:48,790
there are the API call them left and

947
00:43:46,930 --> 00:43:51,040
then the permission on the right flat

948
00:43:48,790 --> 00:43:52,750
file easily<font color="#E5E5E5"> the graph you can find you</font>

949
00:43:51,040 --> 00:43:55,000
can dip it between different versions

950
00:43:52,750 --> 00:44:01,480
<font color="#CCCCCC">that kind of thing but it's still open</font>

951
00:43:55,000 --> 00:44:03,220
from all maps are generated validate

952
00:44:01,480 --> 00:44:05,440
made public and

953
00:44:03,220 --> 00:44:06,669
funds are there until<font color="#CCCCCC"> that happens we're</font>

954
00:44:05,440 --> 00:44:10,630
not going<font color="#CCCCCC"> to have a real solution</font><font color="#E5E5E5"> to</font>

955
00:44:06,670 --> 00:44:12,970
this problem references are available if

956
00:44:10,630 --> 00:44:17,099
you look at the<font color="#E5E5E5"> slides online and thank</font>

957
00:44:12,970 --> 00:44:17,098
you I apologize<font color="#CCCCCC"> for</font>

