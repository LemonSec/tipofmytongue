1
00:00:17,630 --> 00:00:22,140
<font color="#E5E5E5">alright so it started so as</font><font color="#CCCCCC"> you said my</font>

2
00:00:20,789 --> 00:00:24,390
name is<font color="#CCCCCC"> sharing I'm the cloud security</font>

3
00:00:22,140 --> 00:00:25,770
product manager at Rackspace so my job

4
00:00:24,390 --> 00:00:27,509
is basically to build products that

5
00:00:25,770 --> 00:00:29,820
customers use to meet the security needs

6
00:00:27,509 --> 00:00:33,300
<font color="#CCCCCC">for their as part of their common</font>

7
00:00:29,820 --> 00:00:36,059
configurations oh and i'm at tesaro<font color="#E5E5E5"> i</font>

8
00:00:33,300 --> 00:00:37,919
was a former OS board member from 2009<font color="#CCCCCC"> i</font>

9
00:00:36,059 --> 00:00:39,329
think<font color="#CCCCCC"> twenty twelve or something i don't</font>

10
00:00:37,920 --> 00:00:41,460
<font color="#E5E5E5">really</font><font color="#CCCCCC"> remember i started that a lost</font>

11
00:00:39,329 --> 00:00:43,649
live CD<font color="#CCCCCC"> project which morphed into WT</font>

12
00:00:41,460 --> 00:00:45,540
it's a collection of testing tools for

13
00:00:43,649 --> 00:00:48,239
web applications I've been<font color="#CCCCCC"> a</font><font color="#E5E5E5"> rocker</font>

14
00:00:45,540 --> 00:00:49,409
since october of 11<font color="#E5E5E5"> i work in the</font>

15
00:00:48,239 --> 00:00:51,649
product security group and we're

16
00:00:49,409 --> 00:00:55,109
embedded in product and as we're doing

17
00:00:51,649 --> 00:00:56,460
sdlc things we're there to you know do

18
00:00:55,109 --> 00:00:58,050
checkpoints along the way and try to

19
00:00:56,460 --> 00:00:59,429
break the code that<font color="#CCCCCC"> our developers or</font>

20
00:00:58,050 --> 00:01:01,769
have written and then get them fixed

21
00:00:59,429 --> 00:01:03,989
before it gets launched when everything

22
00:01:01,769 --> 00:01:05,160
works perfectly part of this of course

23
00:01:03,989 --> 00:01:06,330
is the reason that you know when you're

24
00:01:05,160 --> 00:01:07,350
asking customers you ever know who's

25
00:01:06,330 --> 00:01:09,000
going to respond to your particular

26
00:01:07,350 --> 00:01:10,140
query so<font color="#CCCCCC"> I'm guessing a lot of customers</font>

27
00:01:09,000 --> 00:01:12,030
don't know what the rest of<font color="#E5E5E5"> these</font>

28
00:01:10,140 --> 00:01:14,429
<font color="#E5E5E5">elements are so data protection is</font>

29
00:01:12,030 --> 00:01:15,450
something they can relate to but<font color="#E5E5E5"> you</font>

30
00:01:14,429 --> 00:01:16,890
<font color="#E5E5E5">know there are obviously a lot of</font>

31
00:01:15,450 --> 00:01:17,520
customers to care about your piece one

32
00:01:16,890 --> 00:01:18,899
thing I've always found interesting

33
00:01:17,520 --> 00:01:20,339
about this study is<font color="#E5E5E5"> that if you look at</font>

34
00:01:18,899 --> 00:01:23,580
<font color="#E5E5E5">the way that customers get compromised</font>

35
00:01:20,340 --> 00:01:26,489
it's<font color="#E5E5E5"> almost always this one which is the</font>

36
00:01:23,580 --> 00:01:27,929
one they care about the least but so

37
00:01:26,489 --> 00:01:29,160
from a data protection standpoint when I

38
00:01:27,929 --> 00:01:30,959
go and I talked<font color="#CCCCCC"> to enterprise customers</font>

39
00:01:29,160 --> 00:01:32,220
small customers big customers on cloud

40
00:01:30,959 --> 00:01:33,479
or various other things they're always

41
00:01:32,220 --> 00:01:35,069
interested in<font color="#E5E5E5"> how they can protect their</font>

42
00:01:33,479 --> 00:01:36,750
data and so one of things that Matt I

43
00:01:35,069 --> 00:01:38,550
noticed as our former careers of

44
00:01:36,750 --> 00:01:39,750
security consultants was<font color="#CCCCCC"> anytime you go</font>

45
00:01:38,550 --> 00:01:41,580
and look at custom-developed apps

46
00:01:39,750 --> 00:01:42,780
generally the encryption and key

47
00:01:41,580 --> 00:01:46,170
management piece of that app is pretty

48
00:01:42,780 --> 00:01:47,429
atrocious and we would go<font color="#CCCCCC"> and we look at</font>

49
00:01:46,170 --> 00:01:48,509
these<font color="#CCCCCC"> things</font><font color="#E5E5E5"> and in a lot of cases I can</font>

50
00:01:47,429 --> 00:01:49,590
look at something<font color="#E5E5E5"> say hey you know like</font>

51
00:01:48,509 --> 00:01:50,580
that's not really great probably

52
00:01:49,590 --> 00:01:52,289
shouldn't<font color="#E5E5E5"> do that you should</font><font color="#CCCCCC"> do it this</font>

53
00:01:50,580 --> 00:01:53,310
way and things are fine<font color="#CCCCCC"> right sequel</font>

54
00:01:52,289 --> 00:01:54,599
injection across ice cream and they're

55
00:01:53,310 --> 00:01:56,879
all kind of<font color="#E5E5E5"> well-known ways to solve</font>

56
00:01:54,599 --> 00:01:58,200
these things what<font color="#E5E5E5"> we noticed was it</font>

57
00:01:56,879 --> 00:02:00,000
there really isn't a good<font color="#E5E5E5"> way to solve</font>

58
00:01:58,200 --> 00:02:02,039
key management for a lot of Filner's

59
00:02:00,000 --> 00:02:03,300
right like you can go and spend hundreds

60
00:02:02,039 --> 00:02:05,099
of thousands<font color="#E5E5E5"> of</font><font color="#CCCCCC"> dollars on</font><font color="#E5E5E5"> an HSM</font>

61
00:02:03,300 --> 00:02:06,209
infrastructure but then you gotta write

62
00:02:05,099 --> 00:02:07,830
a bunch of<font color="#E5E5E5"> code to do it it's not easy</font>

63
00:02:06,209 --> 00:02:09,300
it's playing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> but it's expensive and</font>

64
00:02:07,830 --> 00:02:10,649
so we<font color="#E5E5E5"> said all this kind of empty space</font>

65
00:02:09,300 --> 00:02:12,480
in the market<font color="#E5E5E5"> of hey there really needs</font>

66
00:02:10,649 --> 00:02:14,310
to be an<font color="#CCCCCC"> open-source easy way</font><font color="#E5E5E5"> to do this</font>

67
00:02:12,480 --> 00:02:17,310
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that's really kind of how this all</font>

68
00:02:14,310 --> 00:02:18,180
got started and so Rackspace is a big

69
00:02:17,310 --> 00:02:20,430
proponent how many people know what

70
00:02:18,180 --> 00:02:22,019
OpenStack is pretty much<font color="#E5E5E5"> everybody in</font>

71
00:02:20,430 --> 00:02:23,700
the group<font color="#E5E5E5"> okay so Rackspace a founding</font>

72
00:02:22,019 --> 00:02:24,989
member of OpenStack so we decided<font color="#E5E5E5"> to</font>

73
00:02:23,700 --> 00:02:27,760
develop this service as part of the

74
00:02:24,989 --> 00:02:30,519
OpenStack infrastructure

75
00:02:27,760 --> 00:02:32,409
and as you can see like there's you know

76
00:02:30,519 --> 00:02:34,780
there's a<font color="#E5E5E5"> couple dozen projects in</font>

77
00:02:32,409 --> 00:02:36,429
<font color="#E5E5E5">OpenStack these days pretty much all of</font>

78
00:02:34,780 --> 00:02:39,459
them have some<font color="#E5E5E5"> kind of need for</font>

79
00:02:36,430 --> 00:02:40,780
encryption or<font color="#CCCCCC"> key management and so what</font>

80
00:02:39,459 --> 00:02:43,420
we noticed was that when you're<font color="#CCCCCC"> looking</font>

81
00:02:40,780 --> 00:02:44,560
at OpenStack everybody had this idea of

82
00:02:43,420 --> 00:02:45,790
oh we're gonna do<font color="#E5E5E5"> all this encryption</font>

83
00:02:44,560 --> 00:02:47,470
stuff and they have blueprints and they

84
00:02:45,790 --> 00:02:48,459
were really<font color="#E5E5E5"> nice diagrams in the bottom</font>

85
00:02:47,470 --> 00:02:51,040
<font color="#E5E5E5">right-hand corner there was this little</font>

86
00:02:48,459 --> 00:02:53,980
box that said key manager and nobody had

87
00:02:51,040 --> 00:02:56,290
anything right yeah it was just<font color="#E5E5E5"> like so</font>

88
00:02:53,980 --> 00:02:58,298
I think you looked at at code once or

89
00:02:56,290 --> 00:02:59,439
whatever they<font color="#CCCCCC"> did yeah I got excited</font>

90
00:02:58,299 --> 00:03:01,510
<font color="#CCCCCC">because there was actually a reference</font>

91
00:02:59,439 --> 00:03:04,239
and a blueprint to a github account or

92
00:03:01,510 --> 00:03:06,040
github repository I'm like sweets and

93
00:03:04,239 --> 00:03:07,269
code I can go look<font color="#E5E5E5"> at it so I pulled it</font>

94
00:03:06,040 --> 00:03:09,190
there's a bunch of methods I look inside

95
00:03:07,269 --> 00:03:10,930
the methods all they do is throw the not

96
00:03:09,190 --> 00:03:14,650
implemented yet exception in<font color="#E5E5E5"> Python</font>

97
00:03:10,930 --> 00:03:15,819
there was nothing so I like time after

98
00:03:14,650 --> 00:03:17,019
<font color="#E5E5E5">time and kept seeing these in these</font>

99
00:03:15,819 --> 00:03:18,909
blueprints<font color="#E5E5E5"> if like we want to do</font>

100
00:03:17,019 --> 00:03:20,530
encryption in block storage we're going

101
00:03:18,909 --> 00:03:22,030
to do encryption in object storage you

102
00:03:20,530 --> 00:03:24,700
want to do encryption in plants with the

103
00:03:22,030 --> 00:03:26,500
image storage and there is this little

104
00:03:24,700 --> 00:03:28,690
thing of key manager and no code and

105
00:03:26,500 --> 00:03:30,430
just fundamentally from a security point

106
00:03:28,690 --> 00:03:31,780
of view key managers are scary things

107
00:03:30,430 --> 00:03:33,519
that have lots of security implications

108
00:03:31,780 --> 00:03:35,440
and I don't want end of them in

109
00:03:33,519 --> 00:03:37,389
<font color="#E5E5E5">OpenStack right because you need that</font>

110
00:03:35,440 --> 00:03:39,099
<font color="#E5E5E5">many different implementations and that</font>

111
00:03:37,389 --> 00:03:40,840
many people also have to get it<font color="#E5E5E5"> right if</font>

112
00:03:39,099 --> 00:03:42,340
for review it that many times it's just

113
00:03:40,840 --> 00:03:44,530
fundamentally in architecture late was

114
00:03:42,340 --> 00:03:48,280
it was bad mojo and<font color="#E5E5E5"> so that's kind of</font>

115
00:03:44,530 --> 00:03:51,030
what we came up<font color="#E5E5E5"> with this idea Oh custom</font>

116
00:03:48,280 --> 00:03:54,129
<font color="#CCCCCC">def yeah the other thing behind this is</font>

117
00:03:51,030 --> 00:03:55,690
as a security<font color="#E5E5E5"> professional professional</font>

118
00:03:54,129 --> 00:03:58,510
and somebody who does talk a lot of

119
00:03:55,690 --> 00:04:01,180
developers as a story to have with them

120
00:03:58,510 --> 00:04:03,310
to say you should not put your keys<font color="#E5E5E5"> in</font>

121
00:04:01,180 --> 00:04:05,410
the<font color="#E5E5E5"> car your secrets your encryption</font>

122
00:04:03,310 --> 00:04:07,389
keys in the config files and they say

123
00:04:05,410 --> 00:04:09,099
great like what do<font color="#E5E5E5"> I do and I go well I</font>

124
00:04:07,389 --> 00:04:10,510
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> know what you should do it so</font>

125
00:04:09,099 --> 00:04:12,790
don't do it right that's like<font color="#E5E5E5"> as a</font>

126
00:04:10,510 --> 00:04:14,500
security<font color="#E5E5E5"> person that's total fail as s</font>

127
00:04:12,790 --> 00:04:16,630
you can't tell someone<font color="#CCCCCC"> not to do</font>

128
00:04:14,500 --> 00:04:18,519
something and not give them another

129
00:04:16,630 --> 00:04:21,990
option that's it's hardly going to work

130
00:04:18,519 --> 00:04:25,150
so one of the things we<font color="#E5E5E5"> did with this is</font>

131
00:04:21,990 --> 00:04:26,979
created<font color="#E5E5E5"> a linux-based linux fuse file</font>

132
00:04:25,150 --> 00:04:28,750
system linux views<font color="#CCCCCC"> filesystem do we get</font>

133
00:04:26,979 --> 00:04:30,969
<font color="#E5E5E5">that it's a way to make a fake file</font>

134
00:04:28,750 --> 00:04:32,590
system it looks smells and acts<font color="#E5E5E5"> like a</font>

135
00:04:30,970 --> 00:04:34,570
file system but it's not<font color="#CCCCCC"> really a file</font>

136
00:04:32,590 --> 00:04:36,190
system i created<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit of code</font>

137
00:04:34,570 --> 00:04:40,360
that<font color="#CCCCCC"> does a memory-based file system</font>

138
00:04:36,190 --> 00:04:41,080
would talk out to<font color="#CCCCCC"> barbican the</font><font color="#E5E5E5"> api for</font>

139
00:04:40,360 --> 00:04:42,789
this

140
00:04:41,080 --> 00:04:45,219
pull in the key and then make it appear

141
00:04:42,789 --> 00:04:46,870
like it was a file so as an application

142
00:04:45,220 --> 00:04:48,759
developer you could open<font color="#E5E5E5"> that file and</font>

143
00:04:46,870 --> 00:04:51,300
read out the key but it never was

144
00:04:48,759 --> 00:04:54,250
written<font color="#E5E5E5"> to disk and then additionally</font>

145
00:04:51,300 --> 00:04:56,349
you could also put policy around those

146
00:04:54,250 --> 00:04:57,550
interactions right if I know<font color="#E5E5E5"> the key is</font>

147
00:04:56,349 --> 00:04:59,620
only going<font color="#E5E5E5"> to be written a few minutes</font>

148
00:04:57,550 --> 00:05:01,210
<font color="#E5E5E5">after boot and only going to be read one</font>

149
00:04:59,620 --> 00:05:03,759
time because the app starts up reads a

150
00:05:01,210 --> 00:05:05,289
key and it's done I can say that key can

151
00:05:03,759 --> 00:05:07,449
only be written within 10 minutes of

152
00:05:05,289 --> 00:05:10,120
boot and by<font color="#E5E5E5"> the way it can only be read</font>

153
00:05:07,449 --> 00:05:11,680
once and if I read it a second time I'm

154
00:05:10,120 --> 00:05:12,939
not<font color="#E5E5E5"> going to give the key out in fact</font>

155
00:05:11,680 --> 00:05:14,530
I'm going<font color="#E5E5E5"> to kill myself and in the</font>

156
00:05:12,939 --> 00:05:15,729
process of killing myself send a message

157
00:05:14,530 --> 00:05:19,419
out to the API<font color="#CCCCCC"> that says whoa</font>

158
00:05:15,729 --> 00:05:20,560
something's wrong with me right beyond

159
00:05:19,419 --> 00:05:22,719
that<font color="#E5E5E5"> though that's kind of for the</font>

160
00:05:20,560 --> 00:05:24,370
legacy apps because like if you work in

161
00:05:22,719 --> 00:05:25,780
app sec there is a ridiculous number of

162
00:05:24,370 --> 00:05:27,639
legacy apps so we wanted<font color="#E5E5E5"> to kind of</font>

163
00:05:25,780 --> 00:05:29,770
catch that use case now if you're doing

164
00:05:27,639 --> 00:05:31,509
greenfield development you'd be smarter

165
00:05:29,770 --> 00:05:33,609
to just talk directly to the API there's

166
00:05:31,509 --> 00:05:36,129
no reason to do a fuse<font color="#CCCCCC"> filesystem thing</font>

167
00:05:33,610 --> 00:05:37,569
but one of the contentions we had with

168
00:05:36,129 --> 00:05:39,370
this is like<font color="#E5E5E5"> not everybody gets to do</font>

169
00:05:37,569 --> 00:05:40,750
greenfield and there's a ridiculous

170
00:05:39,370 --> 00:05:43,599
number<font color="#E5E5E5"> of existing apps that will have</font>

171
00:05:40,750 --> 00:05:45,729
<font color="#E5E5E5">this problem the other thing we're</font>

172
00:05:43,599 --> 00:05:47,680
<font color="#CCCCCC">looking at doing is not only holding</font>

173
00:05:45,729 --> 00:05:49,779
encryption keys<font color="#E5E5E5"> or keys at rest but</font>

174
00:05:47,680 --> 00:05:53,050
<font color="#E5E5E5">doing SSL and</font><font color="#CCCCCC"> TLS keys and also</font>

175
00:05:49,779 --> 00:05:55,240
provisioning and then holding SSH keys

176
00:05:53,050 --> 00:05:58,690
as well and then ideally what you'd like

177
00:05:55,240 --> 00:06:00,819
to<font color="#CCCCCC"> see</font><font color="#E5E5E5"> as this grows is integrations</font>

178
00:05:58,690 --> 00:06:02,710
with Django with rails with spring so

179
00:06:00,819 --> 00:06:04,629
that it's a configurable turn on thing

180
00:06:02,710 --> 00:06:06,969
like pull my keys from<font color="#CCCCCC"> barbican done</font>

181
00:06:04,629 --> 00:06:12,400
right easy configurated item what it's

182
00:06:06,969 --> 00:06:13,479
built into frameworks hopefully so in

183
00:06:12,400 --> 00:06:15,909
addition<font color="#E5E5E5"> to being able to store all this</font>

184
00:06:13,479 --> 00:06:18,159
stuff<font color="#CCCCCC"> Barbicane can also generate most</font>

185
00:06:15,909 --> 00:06:19,810
of these keys the the current code as<font color="#CCCCCC"> it</font>

186
00:06:18,159 --> 00:06:21,969
exists right now generates a<font color="#CCCCCC"> AES</font>

187
00:06:19,810 --> 00:06:23,800
encryption keys<font color="#E5E5E5"> barbican supports the</font>

188
00:06:21,969 --> 00:06:25,839
use of hardware security modules on the

189
00:06:23,800 --> 00:06:27,219
<font color="#CCCCCC">backend</font><font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able to kind of do</font><font color="#E5E5E5"> that in</font>

190
00:06:25,839 --> 00:06:29,589
a secure manner that<font color="#CCCCCC"> you don't run out</font>

191
00:06:27,219 --> 00:06:31,270
<font color="#CCCCCC">of entropy and all those types of fun</font>

192
00:06:29,589 --> 00:06:33,370
<font color="#E5E5E5">things that that you have to deal with</font>

193
00:06:31,270 --> 00:06:35,198
as we go down the road a little bit in

194
00:06:33,370 --> 00:06:36,639
the future barbican will get support for

195
00:06:35,199 --> 00:06:38,830
generating different types of keys as we

196
00:06:36,639 --> 00:06:41,229
go forward so obviously TLS is pretty

197
00:06:38,830 --> 00:06:42,430
pretty soon up on our list and<font color="#E5E5E5"> then ssh</font>

198
00:06:41,229 --> 00:06:44,199
keys until these types of<font color="#CCCCCC"> things pretty</font>

199
00:06:42,430 --> 00:06:46,089
easy to do right so in addition to kind

200
00:06:44,199 --> 00:06:47,589
<font color="#E5E5E5">of using</font><font color="#CCCCCC"> barbican as the keystore you</font>

201
00:06:46,089 --> 00:06:49,180
can also use<font color="#CCCCCC"> it as be placed to generate</font>

202
00:06:47,589 --> 00:06:50,529
keys in a way that's kind of secure that

203
00:06:49,180 --> 00:06:53,169
your guarantee that they're kind<font color="#E5E5E5"> of done</font>

204
00:06:50,529 --> 00:06:54,280
well we're also looking at doing some

205
00:06:53,169 --> 00:06:55,359
things around<font color="#E5E5E5"> SSH key</font>

206
00:06:54,280 --> 00:06:56,830
management so you can do things<font color="#CCCCCC"> like</font>

207
00:06:55,360 --> 00:06:58,360
enforce that there are passwords that

208
00:06:56,830 --> 00:06:59,440
they can be rotated and some of these

209
00:06:58,360 --> 00:07:02,080
other types things that are typically

210
00:06:59,440 --> 00:07:05,169
<font color="#E5E5E5">kind of difficult to do with ssh keys in</font>

211
00:07:02,080 --> 00:07:06,729
an infrastructure so<font color="#E5E5E5"> barbican supports</font>

212
00:07:05,169 --> 00:07:09,099
three different interaction models that

213
00:07:06,730 --> 00:07:11,200
we talked about<font color="#E5E5E5"> and these are kind of</font>

214
00:07:09,100 --> 00:07:12,850
putting my product hat on a<font color="#E5E5E5"> little bit</font>

215
00:07:11,200 --> 00:07:14,500
these<font color="#E5E5E5"> are kind of use cases that our</font>

216
00:07:12,850 --> 00:07:15,700
customers<font color="#CCCCCC"> care about right so there are</font>

217
00:07:14,500 --> 00:07:17,230
a good at majority of customers<font color="#E5E5E5"> who want</font>

218
00:07:15,700 --> 00:07:18,880
to encrypt things because they read cio

219
00:07:17,230 --> 00:07:21,040
magazine and it said encryption is good

220
00:07:18,880 --> 00:07:22,300
right and so they want<font color="#E5E5E5"> to go in and</font><font color="#CCCCCC"> they</font>

221
00:07:21,040 --> 00:07:24,450
want<font color="#E5E5E5"> to take their check box and say</font>

222
00:07:22,300 --> 00:07:26,710
yeah everything is encrypted cool right

223
00:07:24,450 --> 00:07:28,360
they don't necessarily<font color="#E5E5E5"> understand the</font>

224
00:07:26,710 --> 00:07:30,400
depth of infrastructure that has to

225
00:07:28,360 --> 00:07:32,140
happen to do key management and so they

226
00:07:30,400 --> 00:07:34,539
want you<font color="#E5E5E5"> know a provider like Rackspace</font>

227
00:07:32,140 --> 00:07:36,490
or whoever it is to do it for them right

228
00:07:34,540 --> 00:07:38,560
<font color="#E5E5E5">now we as security professionals</font><font color="#CCCCCC"> know</font>

229
00:07:36,490 --> 00:07:39,970
that's not a particularly secure model

230
00:07:38,560 --> 00:07:41,890
right at the end of<font color="#E5E5E5"> the day Rackspace</font>

231
00:07:39,970 --> 00:07:44,620
owns the key and it owns the encrypted

232
00:07:41,890 --> 00:07:46,990
data right so you know those two things

233
00:07:44,620 --> 00:07:48,220
<font color="#E5E5E5">are in the same place if the NSA shows</font>

234
00:07:46,990 --> 00:07:49,720
up or whoever shows up with a court

235
00:07:48,220 --> 00:07:52,270
order or<font color="#E5E5E5"> a US company we have to give</font>

236
00:07:49,720 --> 00:07:53,830
them<font color="#E5E5E5"> the data they ask for right and so</font>

237
00:07:52,270 --> 00:07:55,570
you know<font color="#E5E5E5"> like it's not really protecting</font>

238
00:07:53,830 --> 00:07:57,310
you against much other than you know

239
00:07:55,570 --> 00:07:58,419
<font color="#CCCCCC">like a hard drive walking away from a</font>

240
00:07:57,310 --> 00:08:00,370
data center or something<font color="#E5E5E5"> like that so</font>

241
00:07:58,419 --> 00:08:01,750
there's value there's not<font color="#E5E5E5"> a whole lot</font><font color="#CCCCCC"> of</font>

242
00:08:00,370 --> 00:08:03,130
value but it does solve most of the

243
00:08:01,750 --> 00:08:05,290
compliance related requirements if

244
00:08:03,130 --> 00:08:06,790
that's really<font color="#E5E5E5"> all your uniform so that's</font>

245
00:08:05,290 --> 00:08:07,960
kind of<font color="#E5E5E5"> the transparent encryption model</font>

246
00:08:06,790 --> 00:08:09,340
you<font color="#E5E5E5"> can just turn on encryption you</font>

247
00:08:07,960 --> 00:08:10,870
don't worry about<font color="#CCCCCC"> how it works</font><font color="#E5E5E5"> you don't</font>

248
00:08:09,340 --> 00:08:12,250
worry about<font color="#CCCCCC"> where the key is your</font>

249
00:08:10,870 --> 00:08:15,070
provider takes care of that<font color="#E5E5E5"> for you</font>

250
00:08:12,250 --> 00:08:16,510
right so that it kind<font color="#CCCCCC"> of in the middle</font>

251
00:08:15,070 --> 00:08:17,680
is a federated<font color="#CCCCCC"> Keys model which we'll</font>

252
00:08:16,510 --> 00:08:20,200
talk<font color="#CCCCCC"> a little bit about here in a second</font>

253
00:08:17,680 --> 00:08:21,910
which<font color="#E5E5E5"> is a way</font><font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of maintain</font>

254
00:08:20,200 --> 00:08:23,680
custody of<font color="#E5E5E5"> your keys but delegate</font>

255
00:08:21,910 --> 00:08:25,720
<font color="#E5E5E5">responsibility or delegate access to</font>

256
00:08:23,680 --> 00:08:26,560
them for a particular action right and

257
00:08:25,720 --> 00:08:28,060
then finally<font color="#CCCCCC"> of course there's</font>

258
00:08:26,560 --> 00:08:29,260
on-premise where you just own your keys

259
00:08:28,060 --> 00:08:31,120
yourself and you do whatever<font color="#E5E5E5"> you want</font>

260
00:08:29,260 --> 00:08:32,740
you never<font color="#E5E5E5"> give them to your provider and</font>

261
00:08:31,120 --> 00:08:34,750
so you kind<font color="#CCCCCC"> of go</font><font color="#E5E5E5"> from easy to use but</font>

262
00:08:32,740 --> 00:08:36,370
not<font color="#E5E5E5"> very secure to harder to use and</font>

263
00:08:34,750 --> 00:08:39,070
<font color="#CCCCCC">very secure right so if you look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

264
00:08:36,370 --> 00:08:40,539
transparent encryption model you know we

265
00:08:39,070 --> 00:08:42,280
kind of have this idea you know customer

266
00:08:40,539 --> 00:08:44,439
has public face and private facing and

267
00:08:42,280 --> 00:08:46,510
Rackspace has our public cloud<font color="#E5E5E5"> in our</font>

268
00:08:44,440 --> 00:08:48,220
kind of private piece right<font color="#CCCCCC"> in so</font><font color="#E5E5E5"> this</font>

269
00:08:46,510 --> 00:08:50,470
case Rackspace is generating and storing

270
00:08:48,220 --> 00:08:51,580
the key for you and we<font color="#E5E5E5"> actually put a</font>

271
00:08:50,470 --> 00:08:53,140
little library on that's going<font color="#CCCCCC"> to work</font>

272
00:08:51,580 --> 00:08:54,790
<font color="#E5E5E5">with pull the library in the consuming</font>

273
00:08:53,140 --> 00:08:57,010
service so<font color="#E5E5E5"> you can for example like</font>

274
00:08:54,790 --> 00:08:58,599
Swift or cloud files which<font color="#CCCCCC"> is kind of</font>

275
00:08:57,010 --> 00:08:59,740
<font color="#E5E5E5">the same as s3 if you're if you're</font>

276
00:08:58,600 --> 00:09:01,810
familiar with the<font color="#E5E5E5"> Amazon side of things</font>

277
00:08:59,740 --> 00:09:03,250
right and so you upload a file to Swift

278
00:09:01,810 --> 00:09:05,170
it gets encrypted on the way and it gets

279
00:09:03,250 --> 00:09:07,010
decrypted on the way out right so when

280
00:09:05,170 --> 00:09:08,060
it's written in Swift it's encrypted

281
00:09:07,010 --> 00:09:10,040
right but you don't<font color="#CCCCCC"> care how that</font>

282
00:09:08,060 --> 00:09:11,479
<font color="#E5E5E5">happens you're just sending a file of</font>

283
00:09:10,040 --> 00:09:13,490
rackspace<font color="#CCCCCC"> rackspace takes care of it</font>

284
00:09:11,480 --> 00:09:15,350
right and so the key is not<font color="#E5E5E5"> stored in</font>

285
00:09:13,490 --> 00:09:16,460
<font color="#E5E5E5">Swift right it's stored in the</font><font color="#CCCCCC"> Barbican</font>

286
00:09:15,350 --> 00:09:17,900
key management system so they are

287
00:09:16,460 --> 00:09:21,110
separate<font color="#E5E5E5"> but they're separate inside the</font>

288
00:09:17,900 --> 00:09:23,360
same company that makes sense so that's

289
00:09:21,110 --> 00:09:24,890
kind<font color="#E5E5E5"> of easy one so</font><font color="#CCCCCC"> federick a federated</font>

290
00:09:23,360 --> 00:09:26,810
<font color="#E5E5E5">keys gets a little more complicated so</font>

291
00:09:24,890 --> 00:09:28,460
this is the scenario in which you want

292
00:09:26,810 --> 00:09:30,020
racks ways to perform the requested

293
00:09:28,460 --> 00:09:32,870
action for you right you want us to do

294
00:09:30,020 --> 00:09:34,640
the encryption right but you don't<font color="#E5E5E5"> want</font>

295
00:09:32,870 --> 00:09:36,410
<font color="#E5E5E5">us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have custody of your key all the</font>

296
00:09:34,640 --> 00:09:38,540
time right<font color="#E5E5E5"> and so this is kind of an</font>

297
00:09:36,410 --> 00:09:40,310
in-between model<font color="#E5E5E5"> so there's a couple of</font>

298
00:09:38,540 --> 00:09:43,310
ways<font color="#CCCCCC"> that we do this the first way is</font>

299
00:09:40,310 --> 00:09:45,680
that<font color="#CCCCCC"> barbican kind of can't now but will</font>

300
00:09:43,310 --> 00:09:47,750
soon hopefully support the ability to to

301
00:09:45,680 --> 00:09:49,489
federate and so what you can do is you

302
00:09:47,750 --> 00:09:51,260
can install<font color="#CCCCCC"> barbican on your premise as</font>

303
00:09:49,490 --> 00:09:53,480
a customer you<font color="#E5E5E5"> can back it up against</font>

304
00:09:51,260 --> 00:09:55,400
your h SMS right so Rackspace doesn't

305
00:09:53,480 --> 00:09:57,080
have access to any of those right and

306
00:09:55,400 --> 00:09:59,930
your keys are stored<font color="#E5E5E5"> in this and then</font>

307
00:09:57,080 --> 00:10:02,900
<font color="#CCCCCC">you tell barbican hey my tenant this is</font>

308
00:09:59,930 --> 00:10:04,939
me I'm customer XYZ right I don't want

309
00:10:02,900 --> 00:10:07,040
<font color="#E5E5E5">any keys stored in</font><font color="#CCCCCC"> barbican anytime you</font>

310
00:10:04,940 --> 00:10:08,690
need a key come to me and<font color="#E5E5E5"> get it right</font>

311
00:10:07,040 --> 00:10:11,719
and so what this means is that when

312
00:10:08,690 --> 00:10:13,400
Swift right says I you<font color="#E5E5E5"> know cuz you know</font>

313
00:10:11,720 --> 00:10:15,080
company XYZ is trying to encrypt

314
00:10:13,400 --> 00:10:16,310
something right I need a key for<font color="#E5E5E5"> that</font>

315
00:10:15,080 --> 00:10:17,870
and so it's going<font color="#E5E5E5"> to call</font><font color="#CCCCCC"> barbican</font>

316
00:10:16,310 --> 00:10:19,310
<font color="#CCCCCC">Barbara Ganz going to say</font><font color="#E5E5E5"> okay well for</font>

317
00:10:17,870 --> 00:10:20,570
that<font color="#E5E5E5"> particular company I don't store</font>

318
00:10:19,310 --> 00:10:22,550
keys<font color="#CCCCCC"> they're federated they're going to</font>

319
00:10:20,570 --> 00:10:24,620
reach out<font color="#E5E5E5"> to your Prem and then pull</font>

320
00:10:22,550 --> 00:10:26,839
that key across right and what we do<font color="#E5E5E5"> is</font>

321
00:10:24,620 --> 00:10:28,070
we do key wrapping so the consuming

322
00:10:26,840 --> 00:10:30,410
service generates a<font color="#E5E5E5"> public/private key</font>

323
00:10:28,070 --> 00:10:32,060
pair it<font color="#E5E5E5"> sends the public key along with</font>

324
00:10:30,410 --> 00:10:33,829
the request we send the public key over

325
00:10:32,060 --> 00:10:35,270
to your a your instance<font color="#E5E5E5"> of</font><font color="#CCCCCC"> barbican</font>

326
00:10:33,830 --> 00:10:37,400
which pulls the key from your HSM

327
00:10:35,270 --> 00:10:38,930
encrypts it with<font color="#CCCCCC"> the public key sends it</font>

328
00:10:37,400 --> 00:10:40,430
back through so even though it's passing

329
00:10:38,930 --> 00:10:42,489
through the rackspace version of

330
00:10:40,430 --> 00:10:45,500
<font color="#CCCCCC">barbican I don't have</font><font color="#E5E5E5"> access to</font><font color="#CCCCCC"> that key</font>

331
00:10:42,490 --> 00:10:47,990
right only Swift does and so Swift

332
00:10:45,500 --> 00:10:49,250
unwraps your key uses it for the thing

333
00:10:47,990 --> 00:10:52,130
that you've asked it for and then throws

334
00:10:49,250 --> 00:10:54,200
it<font color="#CCCCCC"> away right</font><font color="#E5E5E5"> so you are still granting</font>

335
00:10:52,130 --> 00:10:56,600
the service provider access to your key

336
00:10:54,200 --> 00:10:58,190
but it's only for the<font color="#CCCCCC"> time needed to do</font>

337
00:10:56,600 --> 00:10:59,270
that particular request right so it's

338
00:10:58,190 --> 00:11:01,340
not like it's sitting<font color="#E5E5E5"> on a hard drive</font>

339
00:10:59,270 --> 00:11:02,360
somewhere<font color="#E5E5E5"> and right right we</font><font color="#CCCCCC"> just keep</font>

340
00:11:01,340 --> 00:11:03,380
it for our long when you do the

341
00:11:02,360 --> 00:11:05,270
encryption and then we throw<font color="#E5E5E5"> it away</font>

342
00:11:03,380 --> 00:11:07,280
right<font color="#E5E5E5"> in addition we support another</font>

343
00:11:05,270 --> 00:11:09,460
mode of Federation where the client

344
00:11:07,280 --> 00:11:11,900
library that we<font color="#CCCCCC"> actually haven't</font><font color="#E5E5E5"> Swift</font>

345
00:11:09,460 --> 00:11:13,820
talks to<font color="#CCCCCC"> barbican it gets configuration</font>

346
00:11:11,900 --> 00:11:15,319
and then says oh well when I need keys

347
00:11:13,820 --> 00:11:16,670
rather than going through<font color="#CCCCCC"> barbican it</font>

348
00:11:15,320 --> 00:11:18,290
will<font color="#E5E5E5"> just reach out directly to the</font>

349
00:11:16,670 --> 00:11:19,759
customers environment and pull the

350
00:11:18,290 --> 00:11:20,899
from there they<font color="#E5E5E5"> don't have to do the</font>

351
00:11:19,759 --> 00:11:22,339
kind of<font color="#E5E5E5"> key wrapping stuff you don't</font>

352
00:11:20,899 --> 00:11:24,410
want<font color="#E5E5E5"> to but a lot of times customers</font>

353
00:11:22,339 --> 00:11:25,850
don't necessarily want<font color="#E5E5E5"> to expose this</font>

354
00:11:24,410 --> 00:11:27,889
particular option or a little bit harder

355
00:11:25,850 --> 00:11:29,540
to expose that and so they'd like to

356
00:11:27,889 --> 00:11:31,279
just expose one connection to the

357
00:11:29,540 --> 00:11:33,139
<font color="#CCCCCC">backspace key</font><font color="#E5E5E5"> manager and lock that down</font>

358
00:11:31,279 --> 00:11:34,519
as much as possible right<font color="#E5E5E5"> so kind of two</font>

359
00:11:33,139 --> 00:11:38,300
<font color="#CCCCCC">different options</font><font color="#E5E5E5"> to do federated keys</font>

360
00:11:34,519 --> 00:11:40,370
so this is<font color="#CCCCCC"> a nice kind</font><font color="#E5E5E5"> of you know in</font>

361
00:11:38,300 --> 00:11:42,319
between<font color="#CCCCCC"> mode between managing and all</font>

362
00:11:40,370 --> 00:11:43,880
yourself<font color="#E5E5E5"> which is complicated right and</font>

363
00:11:42,319 --> 00:11:45,110
letting<font color="#E5E5E5"> Rackspace manager which is not</font>

364
00:11:43,880 --> 00:11:46,459
particularly secure so in this

365
00:11:45,110 --> 00:11:48,290
particular case you're kind<font color="#E5E5E5"> of letting</font>

366
00:11:46,459 --> 00:11:51,469
us do all the work<font color="#CCCCCC"> for you but you're</font>

367
00:11:48,290 --> 00:11:52,939
still managing the keys makes sense also

368
00:11:51,470 --> 00:11:54,440
means that if you<font color="#E5E5E5"> want to get rid</font><font color="#CCCCCC"> of</font>

369
00:11:52,940 --> 00:11:56,569
data on<font color="#E5E5E5"> a rackspace cloud or render it</font>

370
00:11:54,440 --> 00:11:58,430
on use like useless just delete the key

371
00:11:56,569 --> 00:12:00,349
right and then if anybody ever tried to

372
00:11:58,430 --> 00:12:02,479
use it<font color="#E5E5E5"> I can't get it he's going right</font>

373
00:12:00,350 --> 00:12:04,160
that data<font color="#E5E5E5"> is dead so you now don't have</font>

374
00:12:02,480 --> 00:12:05,630
to worry about things<font color="#CCCCCC"> like well how does</font>

375
00:12:04,160 --> 00:12:06,949
Rackspace do secure deletion of

376
00:12:05,630 --> 00:12:09,500
something<font color="#CCCCCC"> that I believe right when I</font>

377
00:12:06,949 --> 00:12:11,269
when I delete a server right where does

378
00:12:09,500 --> 00:12:12,649
my day to<font color="#E5E5E5"> go right so Rackspace we have</font>

379
00:12:11,269 --> 00:12:14,329
a bunch of documentation on how we go

380
00:12:12,649 --> 00:12:15,889
along behind and we zero out the disk

381
00:12:14,329 --> 00:12:18,290
space and<font color="#CCCCCC"> also the kind of stuff but now</font>

382
00:12:15,889 --> 00:12:19,910
you don't<font color="#E5E5E5"> care you deleted the key you</font>

383
00:12:18,290 --> 00:12:21,860
don't have to<font color="#E5E5E5"> rely on rackspace doing</font>

384
00:12:19,910 --> 00:12:25,430
our job or AWS doing our job or<font color="#CCCCCC"> whatever</font>

385
00:12:21,860 --> 00:12:26,389
it is<font color="#E5E5E5"> that data is gone makes sense</font><font color="#CCCCCC"> all</font>

386
00:12:25,430 --> 00:12:28,250
<font color="#CCCCCC">right then of course the last</font><font color="#E5E5E5"> one the</font>

387
00:12:26,389 --> 00:12:30,350
<font color="#E5E5E5">simple one on premise were you just do</font>

388
00:12:28,250 --> 00:12:32,029
all the encryption locally your key

389
00:12:30,350 --> 00:12:33,350
stores are all local they're all on your

390
00:12:32,029 --> 00:12:34,939
hard drive they never go to rackspace

391
00:12:33,350 --> 00:12:37,069
right this is obviously<font color="#CCCCCC"> the more</font>

392
00:12:34,940 --> 00:12:38,779
complicated model right but it does mean

393
00:12:37,069 --> 00:12:40,189
that it's the most secure in that you

394
00:12:38,779 --> 00:12:42,199
maintain custody of<font color="#E5E5E5"> those keys</font><font color="#CCCCCC"> and those</font>

395
00:12:40,190 --> 00:12:46,850
keys never leave your prep make sense

396
00:12:42,199 --> 00:12:48,769
<font color="#E5E5E5">all right so I was originally going to</font>

397
00:12:46,850 --> 00:12:50,690
show our entire biggrin thing but it

398
00:12:48,769 --> 00:12:59,470
uses<font color="#CCCCCC"> chef so it takes a really long time</font>

399
00:12:50,690 --> 00:12:59,470
<font color="#E5E5E5">to put up so</font>

400
00:13:06,199 --> 00:13:12,599
<font color="#E5E5E5">well this is running this perk shelf</font>

401
00:13:08,309 --> 00:13:14,040
takes forever to run so<font color="#E5E5E5"> barbican we've</font>

402
00:13:12,600 --> 00:13:17,850
you know racks based we're big fans of

403
00:13:14,040 --> 00:13:19,709
CI CD and so are all of our<font color="#E5E5E5"> products</font>

404
00:13:17,850 --> 00:13:20,819
kind of our as fully automated as we

405
00:13:19,709 --> 00:13:22,498
could make them and so<font color="#E5E5E5"> Barbara can</font>

406
00:13:20,819 --> 00:13:23,790
actually use<font color="#CCCCCC"> this chef to provision</font>

407
00:13:22,499 --> 00:13:24,929
everything we have a vagrant scripts

408
00:13:23,790 --> 00:13:26,399
setup so if you want to<font color="#E5E5E5"> download this</font>

409
00:13:24,929 --> 00:13:28,439
play the<font color="#CCCCCC"> Barbican is all open source</font>

410
00:13:26,399 --> 00:13:29,999
it's out on github right now you can go

411
00:13:28,439 --> 00:13:33,118
play with<font color="#E5E5E5"> it as much</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you want we've</font>

412
00:13:29,999 --> 00:13:35,220
actually cut our final release for

413
00:13:33,119 --> 00:13:37,350
<font color="#E5E5E5">OpenStack</font><font color="#CCCCCC"> havana which is the OpenStack</font>

414
00:13:35,220 --> 00:13:40,860
release cycle that ever everything<font color="#E5E5E5"> cut</font>

415
00:13:37,350 --> 00:13:42,209
<font color="#E5E5E5">from</font><font color="#CCCCCC"> in last week right so it is our</font>

416
00:13:40,860 --> 00:13:43,259
first version 1 point 0 is kind of

417
00:13:42,209 --> 00:13:45,420
stable and out there that you can play

418
00:13:43,259 --> 00:13:46,529
with and so vagrant allows you basically

419
00:13:45,420 --> 00:13:48,300
to spin<font color="#CCCCCC"> up the</font><font color="#E5E5E5"> entire environment</font>

420
00:13:46,529 --> 00:13:49,170
locally so basically<font color="#E5E5E5"> what big rain is</font>

421
00:13:48,300 --> 00:13:53,878
done how many people are familiar with

422
00:13:49,170 --> 00:13:57,439
bigger not that<font color="#E5E5E5"> many</font><font color="#CCCCCC"> okay so vagrant</font>

423
00:13:53,879 --> 00:13:59,639
basically is a way to wrangle a set of

424
00:13:57,439 --> 00:14:00,929
infrastructure on your local box to be

425
00:13:59,639 --> 00:14:02,610
<font color="#CCCCCC">able to do kind</font><font color="#E5E5E5"> of development or</font>

426
00:14:00,929 --> 00:14:04,559
something like that<font color="#E5E5E5"> right and so what</font>

427
00:14:02,610 --> 00:14:05,579
you<font color="#E5E5E5"> can do in this case is by saying</font>

428
00:14:04,559 --> 00:14:07,860
biggrin up you can see how it's got

429
00:14:05,579 --> 00:14:09,449
these<font color="#E5E5E5"> for there are these five kind of</font>

430
00:14:07,860 --> 00:14:11,220
names there right those are individual

431
00:14:09,449 --> 00:14:13,589
virtual machines that have been created

432
00:14:11,220 --> 00:14:15,509
on my laptop right here right and then

433
00:14:13,589 --> 00:14:17,309
chef logs in and pulls our actual

434
00:14:15,509 --> 00:14:18,899
production chef<font color="#E5E5E5"> drips down and installs</font>

435
00:14:17,309 --> 00:14:20,459
<font color="#CCCCCC">barbican exactly like we would install</font>

436
00:14:18,899 --> 00:14:21,959
it in production<font color="#CCCCCC"> right so all</font><font color="#E5E5E5"> the</font>

437
00:14:20,459 --> 00:14:23,969
configuration is the same so<font color="#CCCCCC"> you can see</font>

438
00:14:21,959 --> 00:14:25,829
it's gone to cue notes because we run an

439
00:14:23,970 --> 00:14:28,079
H a rabbit<font color="#CCCCCC"> queue and then we've got</font><font color="#E5E5E5"> an</font>

440
00:14:25,829 --> 00:14:29,429
API node in a worker node and in this

441
00:14:28,079 --> 00:14:31,679
case it should a single<font color="#CCCCCC"> postgres node</font>

442
00:14:29,429 --> 00:14:34,800
because<font color="#CCCCCC"> postgres replication makes me</font>

443
00:14:31,679 --> 00:14:38,279
want to cry we're fixing that but oh my

444
00:14:34,800 --> 00:14:39,929
god is<font color="#E5E5E5"> it painful so anyway so this by</font>

445
00:14:38,279 --> 00:14:41,459
<font color="#CCCCCC">just issuing one command biggrin up you</font>

446
00:14:39,929 --> 00:14:42,990
get all<font color="#CCCCCC"> of our code in exactly the same</font>

447
00:14:41,459 --> 00:14:44,279
environment with separate servers and

448
00:14:42,990 --> 00:14:45,600
configure the same way exactly<font color="#CCCCCC"> like we</font>

449
00:14:44,279 --> 00:14:47,220
would deploy it in production right so

450
00:14:45,600 --> 00:14:48,360
then you can bang<font color="#E5E5E5"> on it and do whatever</font>

451
00:14:47,220 --> 00:14:50,490
you want so<font color="#E5E5E5"> it's kind of a nice way to</font>

452
00:14:48,360 --> 00:14:51,990
be able<font color="#E5E5E5"> to uh to kick the tires without</font>

453
00:14:50,490 --> 00:14:55,410
having to<font color="#E5E5E5"> spend a lot</font><font color="#CCCCCC"> of time and energy</font>

454
00:14:51,990 --> 00:14:57,660
getting it all set up right so when

455
00:14:55,410 --> 00:14:59,959
you're done with vagrant you'll end up

456
00:14:57,660 --> 00:15:03,779
with<font color="#E5E5E5"> this so this is how we deploy</font>

457
00:14:59,959 --> 00:15:05,729
<font color="#CCCCCC">barbican so we have a load balancer in</font>

458
00:15:03,779 --> 00:15:07,079
fact we have so in reality at Rackspace

459
00:15:05,730 --> 00:15:08,639
you've got you know<font color="#E5E5E5"> an H a pair of</font>

460
00:15:07,079 --> 00:15:10,170
firewalls up front and then you've<font color="#E5E5E5"> got</font>

461
00:15:08,639 --> 00:15:12,749
an H a pair of load balancers behind

462
00:15:10,170 --> 00:15:14,790
that which load<font color="#E5E5E5"> balance across the set</font>

463
00:15:12,749 --> 00:15:15,030
of API notes there a set of worker notes

464
00:15:14,790 --> 00:15:17,189
for

465
00:15:15,030 --> 00:15:19,470
dealing<font color="#CCCCCC"> with background processes we use</font>

466
00:15:17,190 --> 00:15:20,880
an H a rabbit q2 kind of handle these

467
00:15:19,470 --> 00:15:23,700
background processes and then right now

468
00:15:20,880 --> 00:15:25,080
we're using<font color="#CCCCCC"> postgres as our database the</font>

469
00:15:23,700 --> 00:15:26,520
reason we did that you know<font color="#E5E5E5"> like it's</font>

470
00:15:25,080 --> 00:15:27,960
much easier for<font color="#CCCCCC"> us if we use some of the</font>

471
00:15:26,520 --> 00:15:29,610
no sequel things so let's<font color="#E5E5E5"> have things</font>

472
00:15:27,960 --> 00:15:32,130
much easier to do replication especially

473
00:15:29,610 --> 00:15:33,390
across data centers but when we kind of

474
00:15:32,130 --> 00:15:34,830
came down to this we wanted<font color="#E5E5E5"> something</font>

475
00:15:33,390 --> 00:15:37,610
with a really tried and true security

476
00:15:34,830 --> 00:15:41,010
<font color="#E5E5E5">model and a lot of the new data stores</font>

477
00:15:37,610 --> 00:15:42,240
don't have that so much so<font color="#E5E5E5"> I don't know</font>

478
00:15:41,010 --> 00:15:44,310
if<font color="#E5E5E5"> anybody went to the reddest talk</font>

479
00:15:42,240 --> 00:15:45,900
earlier today we're<font color="#CCCCCC"> Redis just literally</font>

480
00:15:44,310 --> 00:15:47,189
says in their<font color="#E5E5E5"> documentation yeah we</font>

481
00:15:45,900 --> 00:15:50,220
don't do security there's<font color="#E5E5E5"> not going to</font>

482
00:15:47,190 --> 00:15:52,230
<font color="#E5E5E5">do that so that's up to you guys and so</font>

483
00:15:50,220 --> 00:15:53,190
anyway<font color="#E5E5E5"> postgres gives us that i will say</font>

484
00:15:52,230 --> 00:15:55,260
that it's a pain in the butt we are

485
00:15:53,190 --> 00:15:56,910
thinking about<font color="#E5E5E5"> moving to an ldap based</font>

486
00:15:55,260 --> 00:15:59,400
store which would make replication a

487
00:15:56,910 --> 00:16:00,510
whole lot easier kind of curious what

488
00:15:59,400 --> 00:16:01,770
people think about that to be honest

489
00:16:00,510 --> 00:16:03,090
it's easier for rackspace right cuz<font color="#CCCCCC"> i</font>

490
00:16:01,770 --> 00:16:04,319
hid all these Keys across all these

491
00:16:03,090 --> 00:16:05,820
different data centers all across the

492
00:16:04,320 --> 00:16:07,230
world<font color="#E5E5E5"> and you know all</font><font color="#CCCCCC"> that kind of fun</font>

493
00:16:05,820 --> 00:16:08,970
stuff so<font color="#E5E5E5"> I have unique problems in</font>

494
00:16:07,230 --> 00:16:10,470
deploying a rack but<font color="#E5E5E5"> I'm not sure how</font>

495
00:16:08,970 --> 00:16:12,240
many<font color="#E5E5E5"> people you</font><font color="#CCCCCC"> know who are deploying</font>

496
00:16:10,470 --> 00:16:14,190
this locally would care but anyway

497
00:16:12,240 --> 00:16:15,720
that's<font color="#CCCCCC"> what we do now you can see the</font>

498
00:16:14,190 --> 00:16:18,750
<font color="#E5E5E5">hsm hanging off to the side we use</font>

499
00:16:15,720 --> 00:16:21,320
safenet<font color="#CCCCCC"> lunas but we use p kc s to talk</font>

500
00:16:18,750 --> 00:16:24,120
to them so really any<font color="#E5E5E5"> HSM should work</font>

501
00:16:21,320 --> 00:16:25,140
although i will say that<font color="#E5E5E5"> p kc s support</font>

502
00:16:24,120 --> 00:16:27,570
is one of<font color="#E5E5E5"> those things that everybody</font>

503
00:16:25,140 --> 00:16:29,360
says they have and then you try to<font color="#CCCCCC"> use</font>

504
00:16:27,570 --> 00:16:32,400
it and<font color="#CCCCCC"> it doesn't so much with the work</font>

505
00:16:29,360 --> 00:16:34,290
so you know you<font color="#CCCCCC"> have to kind</font><font color="#E5E5E5"> of tweak it</font>

506
00:16:32,400 --> 00:16:35,880
a little bit and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> as I said we use</font>

507
00:16:34,290 --> 00:16:37,860
chef for all of our provisioning and

508
00:16:35,880 --> 00:16:38,939
then we also use ansible for a lot of

509
00:16:37,860 --> 00:16:43,680
our orchestrations everybody know<font color="#E5E5E5"> what</font>

510
00:16:38,940 --> 00:16:44,970
ansible is anybody a couple so chef is

511
00:16:43,680 --> 00:16:46,949
really great<font color="#E5E5E5"> at configuration management</font>

512
00:16:44,970 --> 00:16:48,510
right it helps you get your servers up

513
00:16:46,950 --> 00:16:49,800
keep small configured correctly where

514
00:16:48,510 --> 00:16:51,450
chef<font color="#E5E5E5"> really starts to fall down as</font>

515
00:16:49,800 --> 00:16:52,890
orchestration right so if you<font color="#E5E5E5"> really</font>

516
00:16:51,450 --> 00:16:55,110
want to<font color="#E5E5E5"> say well like say I want to do a</font>

517
00:16:52,890 --> 00:16:56,280
I want to do a deployment<font color="#E5E5E5"> Ryan I have</font>

518
00:16:55,110 --> 00:16:58,530
new version the software i want to roll

519
00:16:56,280 --> 00:17:00,630
<font color="#CCCCCC">it out and so I want to</font><font color="#E5E5E5"> upgrade one node</font>

520
00:16:58,530 --> 00:17:02,400
and I want<font color="#E5E5E5"> to wait a while I want to</font>

521
00:17:00,630 --> 00:17:03,750
look<font color="#CCCCCC"> at my air logs I want to tail my</font>

522
00:17:02,400 --> 00:17:04,950
logs on with my front<font color="#E5E5E5"> end and see if</font>

523
00:17:03,750 --> 00:17:06,630
there any changes so there any are there

524
00:17:04,950 --> 00:17:08,040
<font color="#E5E5E5">more 500s or things broken or various</font>

525
00:17:06,630 --> 00:17:09,720
other things if that works i want to do

526
00:17:08,040 --> 00:17:10,889
another node and if that all works then

527
00:17:09,720 --> 00:17:12,360
<font color="#E5E5E5">i'll do the rest of them kind of one at</font>

528
00:17:10,890 --> 00:17:14,190
a time by creating a brand new node

529
00:17:12,359 --> 00:17:15,990
right putting<font color="#E5E5E5"> it a load balancer and</font>

530
00:17:14,190 --> 00:17:18,120
then taking<font color="#E5E5E5"> the old one out right doing</font>

531
00:17:15,990 --> 00:17:20,069
<font color="#E5E5E5">that with</font><font color="#CCCCCC"> Chef is incredibly painful if</font>

532
00:17:18,119 --> 00:17:21,989
not kind of impossible so we use ansible

533
00:17:20,069 --> 00:17:23,609
to kind of do those orchestrations right

534
00:17:21,990 --> 00:17:23,870
so you can<font color="#E5E5E5"> run a</font><font color="#CCCCCC"> single command and</font>

535
00:17:23,609 --> 00:17:25,010
it'll

536
00:17:23,869 --> 00:17:26,809
go ahead and<font color="#CCCCCC"> upgrade all of the things</font>

537
00:17:25,010 --> 00:17:28,129
in the infrastructure<font color="#E5E5E5"> or it'll add a new</font>

538
00:17:26,809 --> 00:17:30,770
layer to<font color="#E5E5E5"> the load balancer or removing</font>

539
00:17:28,130 --> 00:17:38,120
it<font color="#E5E5E5"> what bounce at all fun stuff all</font>

540
00:17:30,770 --> 00:17:40,340
<font color="#E5E5E5">right yes</font><font color="#CCCCCC"> so key storage um one of the</font>

541
00:17:38,120 --> 00:17:42,409
things when was really was his reins

542
00:17:40,340 --> 00:17:43,550
<font color="#E5E5E5">teams problem I just get</font><font color="#CCCCCC"> to break it</font>

543
00:17:42,410 --> 00:17:46,160
<font color="#E5E5E5">when he's done but one of</font><font color="#CCCCCC"> the things</font>

544
00:17:43,550 --> 00:17:47,540
<font color="#CCCCCC">that that we ran into and when we</font>

545
00:17:46,160 --> 00:17:48,800
started<font color="#CCCCCC"> looking at h SMS on how they</font>

546
00:17:47,540 --> 00:17:50,990
store things as they really don't store

547
00:17:48,800 --> 00:17:54,260
a whole heck of a lot of keys well

548
00:17:50,990 --> 00:17:56,330
relatively speaking so even though newer

549
00:17:54,260 --> 00:18:04,250
ones are of a million ish keys i think

550
00:17:56,330 --> 00:18:07,610
is that<font color="#E5E5E5"> right yeah which at the scale of</font>

551
00:18:04,250 --> 00:18:08,510
rack that's cute we need way more keys

552
00:18:07,610 --> 00:18:10,459
than that the other issue is

553
00:18:08,510 --> 00:18:11,750
particularly for things like and you'll

554
00:18:10,460 --> 00:18:14,030
talk about this in a bit when<font color="#E5E5E5"> we talk</font>

555
00:18:11,750 --> 00:18:17,300
about the<font color="#E5E5E5"> Swift storage proxy we're</font>

556
00:18:14,030 --> 00:18:19,790
doing a keeper file saved in the object

557
00:18:17,300 --> 00:18:21,770
<font color="#E5E5E5">store so if you have multiple tenants</font>

558
00:18:19,790 --> 00:18:23,020
with multiple files and that the rate at

559
00:18:21,770 --> 00:18:25,550
which files are written to Swift is

560
00:18:23,020 --> 00:18:28,400
ridiculous millions of keys I mean

561
00:18:25,550 --> 00:18:31,750
millions of files is a is a blip in the

562
00:18:28,400 --> 00:18:34,850
<font color="#E5E5E5">Swift radar and maybe not even a blip</font>

563
00:18:31,750 --> 00:18:36,620
the the model for HSN<font color="#E5E5E5"> just didn't work</font>

564
00:18:34,850 --> 00:18:38,719
we couldn't store every single key in an

565
00:18:36,620 --> 00:18:41,059
HSN so what we did instead is we have a

566
00:18:38,720 --> 00:18:44,600
<font color="#E5E5E5">key encrypting key that's stored in the</font>

567
00:18:41,059 --> 00:18:46,670
<font color="#CCCCCC">HSM and we use</font><font color="#E5E5E5"> that key</font><font color="#CCCCCC"> to encrypt what</font>

568
00:18:44,600 --> 00:18:50,809
is the data encryption key that gets

569
00:18:46,670 --> 00:18:52,340
stored in the data store for why don't

570
00:18:50,809 --> 00:18:58,070
wanna say i want to<font color="#E5E5E5"> say keystone and</font>

571
00:18:52,340 --> 00:19:01,159
that's<font color="#E5E5E5"> not right</font><font color="#CCCCCC"> barbecue cha</font><font color="#E5E5E5"> i didn't i</font>

572
00:18:58,070 --> 00:19:02,480
didn't name it that's the problem but

573
00:19:01,160 --> 00:19:04,040
<font color="#E5E5E5">the nice thing here is this gives us the</font>

574
00:19:02,480 --> 00:19:05,900
ability to scale because that one we did

575
00:19:04,040 --> 00:19:07,010
<font color="#E5E5E5">run into that issue of like oh god when</font>

576
00:19:05,900 --> 00:19:08,900
we thought<font color="#CCCCCC"> about the encryption and</font>

577
00:19:07,010 --> 00:19:10,309
we'll talk about this in<font color="#E5E5E5"> a bit we ran in</font>

578
00:19:08,900 --> 00:19:13,130
<font color="#E5E5E5">some issues about</font><font color="#CCCCCC"> we really do need to</font>

579
00:19:10,309 --> 00:19:15,678
<font color="#E5E5E5">store a lot of keys it is no longer a</font>

580
00:19:13,130 --> 00:19:17,750
problem they are but seems to be a

581
00:19:15,679 --> 00:19:19,610
somewhat arbitrary key storage limit in

582
00:19:17,750 --> 00:19:22,250
HSN's with no longer a problem<font color="#E5E5E5"> because</font>

583
00:19:19,610 --> 00:19:25,699
we're only storing one key encrypting

584
00:19:22,250 --> 00:19:27,470
key for each tenant so each customer

585
00:19:25,700 --> 00:19:29,510
gets a magic key that encrypts the data

586
00:19:27,470 --> 00:19:31,190
that goes and is stored<font color="#E5E5E5"> and then we</font>

587
00:19:29,510 --> 00:19:34,070
don't<font color="#E5E5E5"> have those capacity problems</font>

588
00:19:31,190 --> 00:19:35,120
anymore does that make sense that's kind

589
00:19:34,070 --> 00:19:37,299
of a key thing that we've gotten

590
00:19:35,120 --> 00:19:40,600
questions on in previous<font color="#E5E5E5"> talk</font>

591
00:19:37,299 --> 00:19:43,239
yeah make<font color="#CCCCCC"> sure it sounds clear the key</font>

592
00:19:40,600 --> 00:19:45,939
encryption key is stuck into the<font color="#CCCCCC"> HSM and</font>

593
00:19:43,239 --> 00:19:47,379
then it<font color="#E5E5E5"> goes over to get pulled out so</font>

594
00:19:45,940 --> 00:19:49,779
the key encryption key never leaves the

595
00:19:47,379 --> 00:19:51,158
HSM so the HSM generates it it never

596
00:19:49,779 --> 00:19:52,269
leaves it so with the data encryption

597
00:19:51,159 --> 00:19:53,289
key when we get it<font color="#CCCCCC"> from the customer</font>

598
00:19:52,269 --> 00:19:55,570
whatever the customer wants us to

599
00:19:53,289 --> 00:19:57,249
protect we send<font color="#CCCCCC"> that to the HSM which</font>

600
00:19:55,570 --> 00:19:58,330
does the encryption and then if we pull

601
00:19:57,249 --> 00:19:59,559
it out of<font color="#CCCCCC"> the database we send the</font>

602
00:19:58,330 --> 00:20:01,570
encrypted version to it to do the

603
00:19:59,559 --> 00:20:03,999
decryption so we do a key encryption key

604
00:20:01,570 --> 00:20:05,439
per tenant but under a tenant you can

605
00:20:03,999 --> 00:20:07,299
have as many keys as you want right so

606
00:20:05,440 --> 00:20:09,159
like a single<font color="#E5E5E5"> tenant could have millions</font>

607
00:20:07,299 --> 00:20:10,570
or billions of keys they're all

608
00:20:09,159 --> 00:20:12,519
protected with that key encryption key

609
00:20:10,570 --> 00:20:13,509
which you can then rotate or release we

610
00:20:12,519 --> 00:20:14,679
want to be able to rotate it at some

611
00:20:13,509 --> 00:20:16,299
point<font color="#CCCCCC"> it's kind of painful so we're</font>

612
00:20:14,679 --> 00:20:19,989
going<font color="#E5E5E5"> to write that code but intended is</font>

613
00:20:16,299 --> 00:20:22,619
in<font color="#E5E5E5"> OpenStack school kind of that's how</font>

614
00:20:19,989 --> 00:20:22,619
it is it Rackspace

615
00:20:47,799 --> 00:20:53,150
<font color="#E5E5E5">describe those secrets enable</font>

616
00:20:50,659 --> 00:20:55,159
connections from our users right so

617
00:20:53,150 --> 00:20:56,779
right<font color="#CCCCCC"> now Barbicane uses Keystone as the</font>

618
00:20:55,159 --> 00:20:57,919
identity provider right so you would

619
00:20:56,779 --> 00:20:59,659
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> kind of authentication</font>

620
00:20:57,919 --> 00:21:02,539
credential to talk to Keystone which is

621
00:20:59,659 --> 00:21:04,490
usually a username and API key so<font color="#E5E5E5"> you</font>

622
00:21:02,539 --> 00:21:05,809
know we've thought about kind<font color="#E5E5E5"> of ways</font>

623
00:21:04,490 --> 00:21:07,399
that<font color="#CCCCCC"> we can layer on some things on top</font>

624
00:21:05,809 --> 00:21:08,510
of<font color="#E5E5E5"> that so we've actually looked we're</font>

625
00:21:07,399 --> 00:21:10,520
looking<font color="#E5E5E5"> at something right now for doing</font>

626
00:21:08,510 --> 00:21:12,919
transparent disk encryption where when

627
00:21:10,520 --> 00:21:15,020
the box comes up before<font color="#E5E5E5"> it actually even</font>

628
00:21:12,919 --> 00:21:16,820
booze it reaches<font color="#E5E5E5"> out to</font><font color="#CCCCCC"> barbican and</font>

629
00:21:15,020 --> 00:21:18,110
kind<font color="#E5E5E5"> of pass this of information about</font>

630
00:21:16,820 --> 00:21:20,240
<font color="#E5E5E5">the virtual machine that's being popped</font>

631
00:21:18,110 --> 00:21:22,760
and<font color="#CCCCCC"> barbican actually uses its</font>

632
00:21:20,240 --> 00:21:25,340
privileged credentials to the rest of

633
00:21:22,760 --> 00:21:27,049
OpenStack to decide whether<font color="#E5E5E5"> or not that</font>

634
00:21:25,340 --> 00:21:28,760
was a correct thing right so we look at

635
00:21:27,049 --> 00:21:30,950
<font color="#CCCCCC">underlying we call the cert the admin</font>

636
00:21:28,760 --> 00:21:32,600
api's on novo which is cloud servers we

637
00:21:30,950 --> 00:21:34,669
can call admin api's on<font color="#CCCCCC"> swift and</font>

638
00:21:32,600 --> 00:21:36,500
<font color="#CCCCCC">Keystone which are kind</font><font color="#E5E5E5"> of file stores</font>

639
00:21:34,669 --> 00:21:38,539
and off right<font color="#E5E5E5"> and so that allows us</font><font color="#CCCCCC"> to</font>

640
00:21:36,500 --> 00:21:41,360
do<font color="#E5E5E5"> things like say was this machine</font>

641
00:21:38,539 --> 00:21:44,029
requested to be booted by this tenant

642
00:21:41,360 --> 00:21:46,340
was that tenant authenticated correctly

643
00:21:44,029 --> 00:21:47,929
by a person that we trust right and

644
00:21:46,340 --> 00:21:49,399
verify some of those steps before we

645
00:21:47,929 --> 00:21:51,700
pass a credential before we allow to be

646
00:21:49,399 --> 00:21:51,699
booted

647
00:21:59,890 --> 00:22:04,060
right so OpenStack does support<font color="#E5E5E5"> Keystone</font>

648
00:22:02,840 --> 00:22:06,139
to support role based access control

649
00:22:04,060 --> 00:22:08,419
right now it's<font color="#CCCCCC"> pretty limited right now</font>

650
00:22:06,140 --> 00:22:10,190
we<font color="#E5E5E5"> only support admin creator and read</font>

651
00:22:08,420 --> 00:22:11,690
only obviously we're going<font color="#E5E5E5"> to make that</font>

652
00:22:10,190 --> 00:22:13,190
you know<font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to add to that as</font>

653
00:22:11,690 --> 00:22:14,960
we kind<font color="#CCCCCC"> of go forward and so you would</font>

654
00:22:13,190 --> 00:22:16,760
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to have a role for only this</font>

655
00:22:14,960 --> 00:22:18,710
particular set of credentials could you

656
00:22:16,760 --> 00:22:21,050
know pull down keys and then when we

657
00:22:18,710 --> 00:22:22,670
<font color="#E5E5E5">talk about the agent especially like the</font>

658
00:22:21,050 --> 00:22:24,139
idea was in the agent comes up you

659
00:22:22,670 --> 00:22:25,490
provide<font color="#CCCCCC"> you're using</font><font color="#E5E5E5"> every API key when</font>

660
00:22:24,140 --> 00:22:26,690
you first install it and then it

661
00:22:25,490 --> 00:22:28,850
generates its own separate

662
00:22:26,690 --> 00:22:30,410
authentication spur eat so each agent is

663
00:22:28,850 --> 00:22:31,730
authenticated separately so that way if

664
00:22:30,410 --> 00:22:33,080
you manage to break one it doesn't<font color="#E5E5E5"> break</font>

665
00:22:31,730 --> 00:22:34,790
all the others that type of thing so

666
00:22:33,080 --> 00:22:35,840
certainly there's always one of those

667
00:22:34,790 --> 00:22:37,850
shell games right<font color="#CCCCCC"> where it's like okay</font>

668
00:22:35,840 --> 00:22:39,379
<font color="#E5E5E5">well I protect this key but I protect it</font>

669
00:22:37,850 --> 00:22:41,149
by another key<font color="#E5E5E5"> then what do</font><font color="#CCCCCC"> I do the</font>

670
00:22:39,380 --> 00:22:42,320
other key and so at a certain point

671
00:22:41,150 --> 00:22:44,270
obviously there's going to be some level

672
00:22:42,320 --> 00:22:46,010
of credential there and so in that case

673
00:22:44,270 --> 00:22:48,020
<font color="#CCCCCC">the agent helps a lot because it has</font>

674
00:22:46,010 --> 00:22:49,850
this idea of policy where you can say

675
00:22:48,020 --> 00:22:51,379
<font color="#E5E5E5">okay well yes I'm granting this machine</font>

676
00:22:49,850 --> 00:22:52,730
access to it but only<font color="#E5E5E5"> under these</font>

677
00:22:51,380 --> 00:22:55,070
conditions and if those conditions

678
00:22:52,730 --> 00:22:56,090
aren't met than I block access right and

679
00:22:55,070 --> 00:22:57,530
so that can give you a<font color="#E5E5E5"> little bit more</font>

680
00:22:56,090 --> 00:22:58,820
flexibility on how you do that but

681
00:22:57,530 --> 00:23:01,190
<font color="#CCCCCC">you're right at some point there are</font><font color="#E5E5E5"> is</font>

682
00:22:58,820 --> 00:23:05,960
a credential city now has access to<font color="#CCCCCC"> all</font>

683
00:23:01,190 --> 00:23:09,260
right any<font color="#CCCCCC"> other questions yes this just</font>

684
00:23:05,960 --> 00:23:10,340
just moves them yeah anyway so one of

685
00:23:09,260 --> 00:23:12,020
<font color="#E5E5E5">the other</font><font color="#CCCCCC"> things we've we've talked</font>

686
00:23:10,340 --> 00:23:13,129
<font color="#E5E5E5">about is having a mode for</font><font color="#CCCCCC"> barbican</font>

687
00:23:12,020 --> 00:23:15,350
where the data encryption keys are

688
00:23:13,130 --> 00:23:16,760
stored<font color="#E5E5E5"> in the hsm so we don't do this</font>

689
00:23:15,350 --> 00:23:18,439
<font color="#CCCCCC">kind of key encryption key model like</font>

690
00:23:16,760 --> 00:23:19,879
Rackspace needs this because we easily

691
00:23:18,440 --> 00:23:21,830
will go through billions and billions of

692
00:23:19,880 --> 00:23:23,570
keys somebody who's installing this in

693
00:23:21,830 --> 00:23:24,830
using it locally may not need<font color="#CCCCCC"> that and</font>

694
00:23:23,570 --> 00:23:27,110
they want the extra security of the data

695
00:23:24,830 --> 00:23:28,639
encryption keys living inside<font color="#CCCCCC"> of the HSN</font>

696
00:23:27,110 --> 00:23:29,750
and so well how about<font color="#E5E5E5"> we haven't done it</font>

697
00:23:28,640 --> 00:23:32,260
yet but it's kind of on our<font color="#E5E5E5"> list of</font>

698
00:23:29,750 --> 00:23:32,260
<font color="#E5E5E5">things to do</font>

699
00:23:37,029 --> 00:23:43,429
so the key encryption keys stay in the

700
00:23:39,499 --> 00:23:45,440
HSN forever data encryption keys like

701
00:23:43,429 --> 00:23:47,179
when we<font color="#E5E5E5"> get a new a key right we run it</font>

702
00:23:45,440 --> 00:23:48,619
through the<font color="#E5E5E5"> HSM it encrypts it using the</font>

703
00:23:47,179 --> 00:23:50,509
<font color="#E5E5E5">king curtain key for the tenant and then</font>

704
00:23:48,619 --> 00:23:53,629
we store the encrypted<font color="#CCCCCC"> the ciphertext in</font>

705
00:23:50,509 --> 00:23:55,099
the data set in the difference so you

706
00:23:53,629 --> 00:23:56,718
can either<font color="#E5E5E5"> pass us your</font><font color="#CCCCCC"> own key if you</font>

707
00:23:55,099 --> 00:23:58,070
generated it or you can ask us to

708
00:23:56,719 --> 00:24:00,139
generate it which<font color="#E5E5E5"> means the HSN is</font>

709
00:23:58,070 --> 00:24:01,189
generating a keyboard yeah<font color="#CCCCCC"> because</font><font color="#E5E5E5"> like</font>

710
00:24:00,139 --> 00:24:03,109
one<font color="#CCCCCC"> of the nice things about having the</font>

711
00:24:01,190 --> 00:24:05,959
h SMS is that now<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have to worry</font>

712
00:24:03,109 --> 00:24:07,339
about things<font color="#E5E5E5"> like randomness on a</font>

713
00:24:05,959 --> 00:24:08,690
virtual machine and some<font color="#E5E5E5"> that kind of</font>

714
00:24:07,339 --> 00:24:11,239
stuff so<font color="#CCCCCC"> in fact one of the</font><font color="#E5E5E5"> things we've</font>

715
00:24:08,690 --> 00:24:12,769
talked about is having a resource on

716
00:24:11,239 --> 00:24:14,059
<font color="#CCCCCC">barbican completely unauthentic ated</font>

717
00:24:12,769 --> 00:24:15,199
just a resource any on<font color="#CCCCCC"> barbican where</font>

718
00:24:14,059 --> 00:24:17,059
you can just<font color="#E5E5E5"> get a block of randomness</font>

719
00:24:15,199 --> 00:24:19,489
right so if you're on a virtual machine

720
00:24:17,059 --> 00:24:20,899
do you want to see your local with some

721
00:24:19,489 --> 00:24:22,219
random data or whatever you<font color="#E5E5E5"> can just ask</font>

722
00:24:20,899 --> 00:24:24,708
<font color="#CCCCCC">barbican for a big ol block of</font>

723
00:24:22,219 --> 00:24:26,449
randomness<font color="#CCCCCC"> it'll give it</font><font color="#E5E5E5"> to you so we'll</font>

724
00:24:24,709 --> 00:24:27,889
see<font color="#E5E5E5"> soon the API right now is very</font>

725
00:24:26,449 --> 00:24:30,190
simple there are only two resources

726
00:24:27,889 --> 00:24:34,008
there are secrets and there are orders

727
00:24:30,190 --> 00:24:35,959
so secrets is a simple crud wave of

728
00:24:34,009 --> 00:24:37,399
actually just accessing great you<font color="#CCCCCC"> know</font>

729
00:24:35,959 --> 00:24:38,779
read update delete for your particular

730
00:24:37,399 --> 00:24:41,809
secrets although we actually don't allow

731
00:24:38,779 --> 00:24:42,799
you to<font color="#E5E5E5"> update them put but anyway so you</font>

732
00:24:41,809 --> 00:24:45,319
can<font color="#E5E5E5"> kind of see</font><font color="#CCCCCC"> what we're talking about</font>

733
00:24:42,799 --> 00:24:47,179
here right so you give<font color="#E5E5E5"> it a name we put</font>

734
00:24:45,319 --> 00:24:49,668
expiration dates on all keys including

735
00:24:47,179 --> 00:24:51,679
symmetric keys so you<font color="#E5E5E5"> know much like TLS</font>

736
00:24:49,669 --> 00:24:53,719
like when you get us an ssl certificate

737
00:24:51,679 --> 00:24:55,669
it expires<font color="#E5E5E5"> you can now put expiry on</font>

738
00:24:53,719 --> 00:24:57,949
your<font color="#E5E5E5"> aes encryption keys which is very</font>

739
00:24:55,669 --> 00:24:59,179
nice from a compliance standpoint if you

740
00:24:57,949 --> 00:25:01,489
have this idea that icky needs to be

741
00:24:59,179 --> 00:25:03,379
rotated you can just<font color="#E5E5E5"> put a expiration</font>

742
00:25:01,489 --> 00:25:05,539
date on it and<font color="#CCCCCC"> barbican will cease to</font>

743
00:25:03,379 --> 00:25:07,158
provide it once that expiration date has

744
00:25:05,539 --> 00:25:08,419
expired right so obviously you want to

745
00:25:07,159 --> 00:25:10,609
rotate before that because<font color="#CCCCCC"> otherwise</font>

746
00:25:08,419 --> 00:25:12,109
your stuff will break but this way you

747
00:25:10,609 --> 00:25:13,759
can prove to an auditor like you know I

748
00:25:12,109 --> 00:25:15,589
expired this key it was no longer and

749
00:25:13,759 --> 00:25:18,079
obviously auditing and logging to put it

750
00:25:15,589 --> 00:25:20,029
back that up so we<font color="#E5E5E5"> got algorithm bit</font>

751
00:25:18,079 --> 00:25:21,649
length mode all that kind of fun<font color="#E5E5E5"> stuff</font>

752
00:25:20,029 --> 00:25:23,059
in this case<font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> provide</font>

753
00:25:21,649 --> 00:25:24,859
the payload directly so this is a case

754
00:25:23,059 --> 00:25:26,178
where users giving us the actual value

755
00:25:24,859 --> 00:25:29,059
the key that they want us<font color="#CCCCCC"> to store</font>

756
00:25:26,179 --> 00:25:30,649
rather than ask you has to and then we

757
00:25:29,059 --> 00:25:32,239
use content types to tell us the type of

758
00:25:30,649 --> 00:25:33,498
thing that you're storing so we'll store

759
00:25:32,239 --> 00:25:35,149
bits we don't care right<font color="#E5E5E5"> you want to</font>

760
00:25:33,499 --> 00:25:37,249
give<font color="#E5E5E5"> us a block of bits have fun right</font>

761
00:25:35,149 --> 00:25:39,649
but if you<font color="#CCCCCC"> give us a content type that</font>

762
00:25:37,249 --> 00:25:41,509
we understand right like<font color="#E5E5E5"> a pem file or</font>

763
00:25:39,649 --> 00:25:42,829
anything else right then we can do kind

764
00:25:41,509 --> 00:25:43,879
of<font color="#E5E5E5"> special stuff with that right it</font>

765
00:25:42,829 --> 00:25:46,459
allows<font color="#CCCCCC"> us to kind of wraps</font>

766
00:25:43,879 --> 00:25:50,238
functionality driving right then you can

767
00:25:46,459 --> 00:25:52,039
see here to get for the key itself so

768
00:25:50,239 --> 00:25:54,379
the orders resources how you create keys

769
00:25:52,039 --> 00:25:55,459
the orders resources asynchronous and

770
00:25:54,379 --> 00:25:56,629
this is something<font color="#CCCCCC"> we've had some</font>

771
00:25:55,459 --> 00:25:59,509
arguments with people about and the

772
00:25:56,629 --> 00:26:01,009
reason we did that is that while an Aes

773
00:25:59,509 --> 00:26:02,899
key can basically be a synchronous

774
00:26:01,009 --> 00:26:05,569
create ranks is relatively fast to

775
00:26:02,899 --> 00:26:07,609
create those things like ssl certs can't

776
00:26:05,569 --> 00:26:09,440
be right so<font color="#CCCCCC"> barbican supports</font>

777
00:26:07,609 --> 00:26:11,178
provisioning ssl certs from public CX

778
00:26:09,440 --> 00:26:13,519
right so you can<font color="#E5E5E5"> ask us provision ssl</font>

779
00:26:11,179 --> 00:26:15,109
cert from verisign you want right<font color="#CCCCCC"> now we</font>

780
00:26:13,519 --> 00:26:16,339
can send the data to verisign but

781
00:26:15,109 --> 00:26:17,869
especially if you're asking<font color="#CCCCCC"> for an EV</font>

782
00:26:16,339 --> 00:26:19,009
<font color="#CCCCCC">Cerveris</font><font color="#E5E5E5"> is going to talk to you they're</font>

783
00:26:17,869 --> 00:26:20,329
gonna want to look data you're going to

784
00:26:19,009 --> 00:26:21,619
have to sign over your firstborn and

785
00:26:20,329 --> 00:26:23,209
then they'll give you<font color="#CCCCCC"> the key so it</font>

786
00:26:21,619 --> 00:26:25,158
might<font color="#CCCCCC"> be days or weeks until you get</font>

787
00:26:23,209 --> 00:26:26,269
your key of it so the<font color="#E5E5E5"> idea with an order</font>

788
00:26:25,159 --> 00:26:28,039
is that you actually put in a request

789
00:26:26,269 --> 00:26:29,359
for in order right you order a

790
00:26:28,039 --> 00:26:31,219
particular thing and then when you<font color="#E5E5E5"> get</font>

791
00:26:29,359 --> 00:26:32,418
it back you'll see what happens you get

792
00:26:31,219 --> 00:26:34,099
the order back and then it'll have a

793
00:26:32,419 --> 00:26:40,669
link<font color="#CCCCCC"> to the secret that we</font><font color="#E5E5E5"> generated</font>

794
00:26:34,099 --> 00:26:46,309
point that make sense<font color="#E5E5E5"> all right so you</font>

795
00:26:40,669 --> 00:26:48,499
want<font color="#CCCCCC"> to view your</font><font color="#E5E5E5"> status yeah you can</font>

796
00:26:46,309 --> 00:26:51,499
hold the whole the order status here you

797
00:26:48,499 --> 00:26:55,479
want<font color="#CCCCCC"> to be you want to be a mic stand</font>

798
00:26:51,499 --> 00:26:55,479
yes<font color="#E5E5E5"> all right so</font>

799
00:26:56,890 --> 00:27:03,020
so the demo derby decided to do today<font color="#CCCCCC"> is</font>

800
00:27:00,980 --> 00:27:05,720
a proof of concept we put together as a

801
00:27:03,020 --> 00:27:08,240
proxy server that sits in front of<font color="#E5E5E5"> La</font>

802
00:27:05,720 --> 00:27:10,280
<font color="#E5E5E5">Paz right so pop files is an object</font>

803
00:27:08,240 --> 00:27:12,800
store and basically implements

804
00:27:10,280 --> 00:27:15,139
transparent encryption using<font color="#CCCCCC"> barbican</font>

805
00:27:12,800 --> 00:27:18,590
following make all that happen<font color="#E5E5E5"> for user</font>

806
00:27:15,140 --> 00:27:20,120
right so we wrote this uh this proxy

807
00:27:18,590 --> 00:27:27,860
server here you can<font color="#E5E5E5"> kind of see this</font>

808
00:27:20,120 --> 00:27:30,919
it's starting up and we've got this

809
00:27:27,860 --> 00:27:32,300
lovely file here that we are going<font color="#CCCCCC"> to to</font>

810
00:27:30,920 --> 00:27:33,500
<font color="#E5E5E5">actually play with right so if</font><font color="#CCCCCC"> I go into</font>

811
00:27:32,300 --> 00:27:36,050
<font color="#E5E5E5">my cloud files account right now</font>

812
00:27:33,500 --> 00:27:39,560
<font color="#CCCCCC">rackspace I've got this this test</font>

813
00:27:36,050 --> 00:27:41,570
container here that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> created right and</font>

814
00:27:39,560 --> 00:27:42,800
right now there's nothing<font color="#E5E5E5"> all right so</font>

815
00:27:41,570 --> 00:27:47,210
<font color="#CCCCCC">it's just two empty container in the</font>

816
00:27:42,800 --> 00:27:51,080
<font color="#E5E5E5">city on La Paz right so here's our way</font>

817
00:27:47,210 --> 00:27:53,060
out look no one likes you so here's the

818
00:27:51,080 --> 00:27:54,199
curl command so this is the exact<font color="#CCCCCC"> info</font>

819
00:27:53,060 --> 00:27:56,330
command that<font color="#E5E5E5"> you would send the top</font>

820
00:27:54,200 --> 00:27:58,490
bottles it's no different right so if

821
00:27:56,330 --> 00:28:01,010
you're using fiber back you're using any

822
00:27:58,490 --> 00:28:02,300
other client or Swift right that just

823
00:28:01,010 --> 00:28:04,070
normally talk<font color="#CCCCCC"> to Swift</font><font color="#E5E5E5"> this works</font>

824
00:28:02,300 --> 00:28:05,720
perfectly fine right but<font color="#CCCCCC"> a</font><font color="#E5E5E5"> client</font>

825
00:28:04,070 --> 00:28:08,000
doesn't know the decryption is happening

826
00:28:05,720 --> 00:28:12,530
it's entirely transparent right so we're

827
00:28:08,000 --> 00:28:14,270
going to grab this croak man here<font color="#CCCCCC"> and so</font>

828
00:28:12,530 --> 00:28:17,000
<font color="#CCCCCC">you can see basically it says it's doing</font>

829
00:28:14,270 --> 00:28:18,370
a chunk transporting coding it passes in

830
00:28:17,000 --> 00:28:20,570
the<font color="#E5E5E5"> octo pin which I put into my</font>

831
00:28:18,370 --> 00:28:24,169
environment so that you guys can't see

832
00:28:20,570 --> 00:28:26,060
it sign on trustee has the test file

833
00:28:24,170 --> 00:28:28,400
source and then it's the<font color="#CCCCCC"> cloud files</font>

834
00:28:26,060 --> 00:28:31,520
endpoint container and the file rocky

835
00:28:28,400 --> 00:28:33,200
training center right so what you'll see

836
00:28:31,520 --> 00:28:34,550
is basically<font color="#E5E5E5"> I'm connecting right curl</font>

837
00:28:33,200 --> 00:28:35,330
is connecting to local house right

838
00:28:34,550 --> 00:28:37,940
possess one

839
00:28:35,330 --> 00:28:39,800
<font color="#E5E5E5">23 right right it's doing all this work</font>

840
00:28:37,940 --> 00:28:41,390
and setting it<font color="#CCCCCC"> off so part of the pain</font>

841
00:28:39,800 --> 00:28:43,070
of creative<font color="#E5E5E5"> his proxy was like being</font>

842
00:28:41,390 --> 00:28:45,110
when we do chompers you don't want to

843
00:28:43,070 --> 00:28:46,700
send the file over the proxy you'll work

844
00:28:45,110 --> 00:28:48,649
and have a proxy senator<font color="#CCCCCC"> Swift this</font>

845
00:28:46,700 --> 00:28:50,180
which can have 10 terabyte files put

846
00:28:48,650 --> 00:28:51,890
into it right<font color="#CCCCCC"> into this actually</font>

847
00:28:50,180 --> 00:28:53,930
<font color="#E5E5E5">screamed like it</font><font color="#CCCCCC"> strings the file blue</font>

848
00:28:51,890 --> 00:28:56,030
proxy both<font color="#E5E5E5"> are back on first time as it</font>

849
00:28:53,930 --> 00:28:58,670
goes so you can see it you<font color="#E5E5E5"> know if we go</font>

850
00:28:56,030 --> 00:29:00,110
and we look at the proxy kind of see the

851
00:28:58,670 --> 00:29:02,210
actual target but it's talking<font color="#E5E5E5"> to in</font>

852
00:29:00,110 --> 00:29:03,830
this case<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> cloud files see the</font>

853
00:29:02,210 --> 00:29:06,080
length of the data it has to decide

854
00:29:03,830 --> 00:29:07,909
whether that data needs to be padded and

855
00:29:06,080 --> 00:29:09,980
it does the padding needs to and you can

856
00:29:07,910 --> 00:29:12,710
see here's the<font color="#E5E5E5"> actual encrypted value</font>

857
00:29:09,980 --> 00:29:18,470
that it writes out so now if i<font color="#CCCCCC"> go to</font><font color="#E5E5E5"> cut</font>

858
00:29:12,710 --> 00:29:20,120
files we have if cloud files we load we

859
00:29:18,470 --> 00:29:21,860
have a pie of its nominal fee now you'll

860
00:29:20,120 --> 00:29:23,479
<font color="#CCCCCC">notice that the container and the file</font>

861
00:29:21,860 --> 00:29:25,459
name or unencrypted we'll<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font>

862
00:29:23,480 --> 00:29:35,030
that the second why that is but if<font color="#E5E5E5"> i</font>

863
00:29:25,460 --> 00:29:36,740
download<font color="#E5E5E5"> this then go and grab it right</font>

864
00:29:35,030 --> 00:29:38,180
then what<font color="#E5E5E5"> we get is</font><font color="#CCCCCC"> garbage right</font><font color="#E5E5E5"> so</font>

865
00:29:36,740 --> 00:29:40,550
this is me going directly to cloud files

866
00:29:38,180 --> 00:29:41,750
and i'm downloading the piping hot so

867
00:29:40,550 --> 00:29:43,070
this is<font color="#E5E5E5"> a file that's sitting in OGG</font>

868
00:29:41,750 --> 00:29:45,140
files and Rackspace's servers is

869
00:29:43,070 --> 00:29:49,850
completely encrypted right and so then

870
00:29:45,140 --> 00:29:53,930
obviously<font color="#E5E5E5"> I want my file back so I grab</font>

871
00:29:49,850 --> 00:29:55,280
<font color="#E5E5E5">another curl command right so in this</font>

872
00:29:53,930 --> 00:29:56,750
case it's grabbing that files we talked

873
00:29:55,280 --> 00:29:58,310
about<font color="#CCCCCC"> is doing you get this time again</font>

874
00:29:56,750 --> 00:29:59,570
you're passing your off token transport

875
00:29:58,310 --> 00:30:02,149
chunked and it gives you the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

876
00:29:59,570 --> 00:30:04,010
file and all that right does its thing

877
00:30:02,150 --> 00:30:06,470
if you look here now you're seeing that

878
00:30:04,010 --> 00:30:07,910
it got a get request right so it's<font color="#E5E5E5"> going</font>

879
00:30:06,470 --> 00:30:08,900
through and talking to cloud files you

880
00:30:07,910 --> 00:30:10,910
see the<font color="#CCCCCC"> lengths are actually different</font>

881
00:30:08,900 --> 00:30:13,700
to the link will be uploaded is 14 well

882
00:30:10,910 --> 00:30:16,040
like we pull it down<font color="#CCCCCC"> to 16 because stuff</font>

883
00:30:13,700 --> 00:30:17,470
holy encryption work we're doing H max

884
00:30:16,040 --> 00:30:20,559
which are totally broken right now

885
00:30:17,470 --> 00:30:24,490
why<font color="#CCCCCC"> was to take</font><font color="#E5E5E5"> that match and then of</font>

886
00:30:20,559 --> 00:30:27,668
course right<font color="#CCCCCC"> now and then of course it</font>

887
00:30:24,490 --> 00:30:31,240
dumps out the<font color="#CCCCCC"> original value of the file</font>

888
00:30:27,669 --> 00:30:34,510
right so nothing to magic it was a giant

889
00:30:31,240 --> 00:30:36,309
<font color="#E5E5E5">pain in the butt to get working but that</font>

890
00:30:34,510 --> 00:30:37,870
type of thing kind of it was a<font color="#CCCCCC"> POC</font><font color="#E5E5E5"> to</font>

891
00:30:36,309 --> 00:30:39,010
kind of show how<font color="#E5E5E5"> you can use</font><font color="#CCCCCC"> barbican to</font>

892
00:30:37,870 --> 00:30:40,510
do the key management so in the

893
00:30:39,010 --> 00:30:42,580
background right when<font color="#CCCCCC"> I upload</font><font color="#E5E5E5"> that</font>

894
00:30:40,510 --> 00:30:44,980
thing I'm taking<font color="#CCCCCC"> that off ticking I know</font>

895
00:30:42,580 --> 00:30:46,418
what tenant this belongs<font color="#E5E5E5"> to so</font><font color="#CCCCCC"> that code</font>

896
00:30:44,980 --> 00:30:48,760
reaches out to<font color="#CCCCCC"> barbican and it says hey</font>

897
00:30:46,419 --> 00:30:50,559
do you have a key for this<font color="#E5E5E5"> if not then</font>

898
00:30:48,760 --> 00:30:52,390
generate one and it pulls that key down

899
00:30:50,559 --> 00:30:53,830
it uses after the encryption we actually

900
00:30:52,390 --> 00:30:55,900
store the link to the key and the

901
00:30:53,830 --> 00:30:57,220
metadata of the file and<font color="#E5E5E5"> Swift right so</font>

902
00:30:55,900 --> 00:30:58,570
when<font color="#E5E5E5"> you pull that back out</font><font color="#CCCCCC"> barbican</font>

903
00:30:57,220 --> 00:30:59,679
<font color="#E5E5E5">looks in the</font><font color="#CCCCCC"> swift violence is ok this</font>

904
00:30:58,570 --> 00:31:01,210
is the key and it goes back<font color="#CCCCCC"> at the</font>

905
00:30:59,679 --> 00:31:02,350
<font color="#CCCCCC">barbican and it pulls it down</font><font color="#E5E5E5"> he curses</font>

906
00:31:01,210 --> 00:31:04,330
all that's kind of happening the

907
00:31:02,350 --> 00:31:06,219
background and you as a user don't care

908
00:31:04,330 --> 00:31:07,299
right so the user interface for this<font color="#CCCCCC"> at</font>

909
00:31:06,220 --> 00:31:10,000
<font color="#CCCCCC">Rackspace would be I would like to</font>

910
00:31:07,299 --> 00:31:15,129
encrypt take my jacket off write an

911
00:31:10,000 --> 00:31:17,380
essay so yep middlebury question but is

912
00:31:15,130 --> 00:31:19,530
there any thought<font color="#E5E5E5"> of like project izing</font>

913
00:31:17,380 --> 00:31:25,210
something like

914
00:31:19,530 --> 00:31:27,879
<font color="#E5E5E5">see our iPad and basically have Swiss or</font>

915
00:31:25,210 --> 00:31:29,860
something that's posting content it

916
00:31:27,880 --> 00:31:34,419
seemed like to be possible to have<font color="#CCCCCC"> it</font>

917
00:31:29,860 --> 00:31:37,299
<font color="#CCCCCC">work</font><font color="#E5E5E5"> for a customer</font><font color="#CCCCCC"> that has that crm</font>

918
00:31:34,419 --> 00:31:40,690
solution people set up on for coffee and

919
00:31:37,299 --> 00:31:43,990
<font color="#E5E5E5">then I do get cookin for you and then</font>

920
00:31:40,690 --> 00:31:46,630
never scored would never be unencrypted

921
00:31:43,990 --> 00:31:48,610
<font color="#E5E5E5">off track and you</font><font color="#CCCCCC"> could fall through</font><font color="#E5E5E5"> it</font>

922
00:31:46,630 --> 00:31:51,730
<font color="#E5E5E5">it happens where you like this is my</font>

923
00:31:48,610 --> 00:31:53,260
processor yeah yeah you definitely could

924
00:31:51,730 --> 00:31:55,030
do stuff<font color="#E5E5E5"> like that right sue you know</font>

925
00:31:53,260 --> 00:31:56,080
i'm<font color="#E5E5E5"> not sure</font><font color="#CCCCCC"> barbican will write that I</font>

926
00:31:55,030 --> 00:31:56,918
mean we wrote the Swift<font color="#CCCCCC"> thing because</font>

927
00:31:56,080 --> 00:31:58,210
we're trying to kind of prove the

928
00:31:56,919 --> 00:31:59,380
concept to get people to use it<font color="#E5E5E5"> and</font>

929
00:31:58,210 --> 00:32:00,760
there are some companies that are doing

930
00:31:59,380 --> 00:32:01,740
that for<font color="#E5E5E5"> like sales force and some of</font>

931
00:32:00,760 --> 00:32:04,390
those types of things<font color="#E5E5E5"> right and</font>

932
00:32:01,740 --> 00:32:06,070
definitely kind of nice models and like

933
00:32:04,390 --> 00:32:08,320
what we'd like is that<font color="#CCCCCC"> barbican kind of</font>

934
00:32:06,070 --> 00:32:10,780
becomes the<font color="#E5E5E5"> backend for those things and</font>

935
00:32:08,320 --> 00:32:12,309
defines kind of a nice open source kind

936
00:32:10,780 --> 00:32:13,840
of<font color="#CCCCCC"> API that everybody can use there's an</font>

937
00:32:12,309 --> 00:32:15,520
open source reference imitation that's

938
00:32:13,840 --> 00:32:17,260
free that anybody can run<font color="#E5E5E5"> now if you</font>

939
00:32:15,520 --> 00:32:18,820
want to<font color="#E5E5E5"> go and pay for it right like the</font>

940
00:32:17,260 --> 00:32:20,080
paid versions will have lots more so

941
00:32:18,820 --> 00:32:21,610
we've been<font color="#E5E5E5"> working with Kazan for</font>

942
00:32:20,080 --> 00:32:23,439
example<font color="#E5E5E5"> to kind of plug their stuff into</font>

943
00:32:21,610 --> 00:32:24,908
this right until like they offer a lot

944
00:32:23,440 --> 00:32:26,020
<font color="#E5E5E5">of stuff that</font><font color="#CCCCCC"> barbican</font><font color="#E5E5E5"> we're never going</font>

945
00:32:24,909 --> 00:32:27,760
<font color="#CCCCCC">to do right like</font><font color="#E5E5E5"> I'm not going to write</font>

946
00:32:26,020 --> 00:32:29,650
encrypt FS like that's their bag they do

947
00:32:27,760 --> 00:32:30,700
that right and say oh but we'd like this

948
00:32:29,650 --> 00:32:32,950
to be<font color="#E5E5E5"> kind of the reference</font>

949
00:32:30,700 --> 00:32:34,600
implementation for how the API works for

950
00:32:32,950 --> 00:32:36,549
multi-tenant stuff right so we'll<font color="#E5E5E5"> talk</font>

951
00:32:34,600 --> 00:32:38,080
about keymap a little bit later but you

952
00:32:36,549 --> 00:32:40,720
<font color="#CCCCCC">know that's kind of what we're aiming at</font>

953
00:32:38,080 --> 00:32:43,539
for<font color="#E5E5E5"> this particular thing so it's kind</font>

954
00:32:40,720 --> 00:32:45,460
of insanely hard to read but portcullis

955
00:32:43,539 --> 00:32:48,250
is the name of the<font color="#CCCCCC"> Swift proxy that we</font>

956
00:32:45,460 --> 00:32:49,630
it's our code name for it so as we said

957
00:32:48,250 --> 00:32:51,280
before we do a keeper file and the

958
00:32:49,630 --> 00:32:52,419
reason we do that is Swift has semantics

959
00:32:51,280 --> 00:32:54,970
that<font color="#E5E5E5"> allow you to copy a file from</font>

960
00:32:52,419 --> 00:32:57,549
container to container and so originally

961
00:32:54,970 --> 00:32:59,049
we tried to do a keeper container which

962
00:32:57,549 --> 00:33:00,309
would be mean much fewer<font color="#CCCCCC"> keys the</font>

963
00:32:59,049 --> 00:33:01,629
problem is<font color="#CCCCCC"> that when you copy with in</font>

964
00:33:00,309 --> 00:33:02,950
containers we would literally have to

965
00:33:01,630 --> 00:33:05,110
pull<font color="#E5E5E5"> the entire file a lot of Swift and</font>

966
00:33:02,950 --> 00:33:06,549
decrypt it and push it all back in so

967
00:33:05,110 --> 00:33:07,928
now we actually<font color="#CCCCCC"> do a keeper file and so</font>

968
00:33:06,549 --> 00:33:11,080
you can imagine the fact that cloud

969
00:33:07,929 --> 00:33:12,400
files has billions of objects right then

970
00:33:11,080 --> 00:33:14,020
now you start to have a lot of keys and

971
00:33:12,400 --> 00:33:16,570
<font color="#CCCCCC">you can see</font><font color="#E5E5E5"> kind of why we like that key</font>

972
00:33:14,020 --> 00:33:18,668
encryption key to your<font color="#CCCCCC"> small we did</font>

973
00:33:16,570 --> 00:33:21,280
encrypt the file and container names and

974
00:33:18,669 --> 00:33:24,280
that's mostly to keep the the<font color="#CCCCCC"> rest of</font>

975
00:33:21,280 --> 00:33:26,200
the tools that you Swift working right

976
00:33:24,280 --> 00:33:27,460
they would get really grumpy if you have

977
00:33:26,200 --> 00:33:29,620
just totally random stuff and it'd be

978
00:33:27,460 --> 00:33:31,740
<font color="#CCCCCC">very hard to use and so kind of we kept</font>

979
00:33:29,620 --> 00:33:34,750
<font color="#CCCCCC">that and then one thing</font><font color="#E5E5E5"> that we did add</font>

980
00:33:31,740 --> 00:33:37,480
we're<font color="#E5E5E5"> adding is a verify resource so</font>

981
00:33:34,750 --> 00:33:42,220
right now we're using a s 256 CBC<font color="#E5E5E5"> with</font>

982
00:33:37,480 --> 00:33:44,380
<font color="#CCCCCC">sha-1 hvac yes and so obviously</font><font color="#E5E5E5"> we can't</font>

983
00:33:42,220 --> 00:33:45,850
calculate the final H Mac value until

984
00:33:44,380 --> 00:33:47,770
the entire file has been served out

985
00:33:45,850 --> 00:33:49,750
right but we're streaming the file to

986
00:33:47,770 --> 00:33:51,340
the user so there's<font color="#E5E5E5"> no way that I'm not</font>

987
00:33:49,750 --> 00:33:52,480
pulling the whole file checking it and

988
00:33:51,340 --> 00:33:53,649
then sending it to<font color="#E5E5E5"> the user right I'm</font>

989
00:33:52,480 --> 00:33:55,300
sending the file to them as they're

990
00:33:53,650 --> 00:33:56,980
asking for<font color="#CCCCCC"> it right so that means I</font>

991
00:33:55,300 --> 00:33:59,050
<font color="#E5E5E5">don't actually know</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> H</font><font color="#CCCCCC"> Mac has</font>

992
00:33:56,980 --> 00:34:01,360
failed until the file is already all all

993
00:33:59,050 --> 00:34:02,830
the way sent to the user right so to

994
00:34:01,360 --> 00:34:05,679
solve that problem we do is we expose a

995
00:34:02,830 --> 00:34:07,389
verify resource and as a user you pull

996
00:34:05,680 --> 00:34:08,770
your file down and then you call to the

997
00:34:07,390 --> 00:34:10,360
verify resource and you say here's the

998
00:34:08,770 --> 00:34:12,370
file<font color="#CCCCCC"> that I pulled down and then we'll</font>

999
00:34:10,360 --> 00:34:13,810
return you the value of the hmm right so

1000
00:34:12,370 --> 00:34:14,920
that way you can check if you want to

1001
00:34:13,810 --> 00:34:16,360
you can check to make sure that your

1002
00:34:14,920 --> 00:34:18,340
file hasn't been screwed with or

1003
00:34:16,360 --> 00:34:21,010
anything like that during the process we

1004
00:34:18,340 --> 00:34:23,830
will switch<font color="#CCCCCC"> to using GCM just as soon as</font>

1005
00:34:21,010 --> 00:34:25,210
you know python works for GCM which

1006
00:34:23,830 --> 00:34:29,049
we're also working on<font color="#E5E5E5"> that's a different</font>

1007
00:34:25,210 --> 00:34:31,550
<font color="#CCCCCC">recipe really</font><font color="#E5E5E5"> thought about writing both</font>

1008
00:34:29,050 --> 00:34:35,220
is a possible

1009
00:34:31,550 --> 00:34:37,210
crying access to arbitrary off

1010
00:34:35,219 --> 00:34:41,489
in fact resource

1011
00:34:37,210 --> 00:34:43,679
five hollers grenade so Swift does that

1012
00:34:41,489 --> 00:34:46,330
so Swift has the ability to<font color="#E5E5E5"> do offsets</font>

1013
00:34:43,679 --> 00:34:49,450
yeah well that gets<font color="#E5E5E5"> to be a little</font>

1014
00:34:46,330 --> 00:34:51,668
interesting right so right<font color="#CCCCCC"> now we have</font>

1015
00:34:49,449 --> 00:34:53,379
it done but<font color="#CCCCCC"> you certainly could do it so</font>

1016
00:34:51,668 --> 00:34:56,138
there's ways to<font color="#CCCCCC"> do it by using was it</font>

1017
00:34:53,379 --> 00:34:57,670
ASX TS and so it's the<font color="#E5E5E5"> same one that</font>

1018
00:34:56,139 --> 00:34:59,500
<font color="#E5E5E5">people use for disk encryption right</font>

1019
00:34:57,670 --> 00:35:00,730
same idea trigger fuses so in that case

1020
00:34:59,500 --> 00:35:02,290
the<font color="#E5E5E5"> blocks no longer depend on each</font>

1021
00:35:00,730 --> 00:35:04,330
other so you could just<font color="#E5E5E5"> skip to the into</font>

1022
00:35:02,290 --> 00:35:06,310
the middle<font color="#E5E5E5"> of their so definitely</font>

1023
00:35:04,330 --> 00:35:08,380
possible XDS has its own kind of

1024
00:35:06,310 --> 00:35:09,580
challenges not quite as good as as kind

1025
00:35:08,380 --> 00:35:11,320
<font color="#E5E5E5">of doing the standard encryption model</font>

1026
00:35:09,580 --> 00:35:14,460
but that would work<font color="#E5E5E5"> right so it wouldn't</font>

1027
00:35:11,320 --> 00:35:20,250
get<font color="#CCCCCC"> our only you would like more</font>

1028
00:35:14,460 --> 00:35:20,250
importantly mysticism which database

1029
00:35:23,070 --> 00:35:27,670
so it looks<font color="#CCCCCC"> like a yes understood this</font>

1030
00:35:25,450 --> 00:35:29,020
is my responsibility to believe reach

1031
00:35:27,670 --> 00:35:33,520
the occasional

1032
00:35:29,020 --> 00:35:35,980
but that solutions like work possible

1033
00:35:33,520 --> 00:35:39,000
employment like<font color="#E5E5E5"> appliances in an Indian</font>

1034
00:35:35,980 --> 00:35:44,360
this of what<font color="#E5E5E5"> lake bottom exception but</font>

1035
00:35:39,000 --> 00:35:48,230
the same rate is it he would

1036
00:35:44,360 --> 00:35:54,450
good that's a good thing he was like

1037
00:35:48,230 --> 00:35:55,650
existing social so right now know that

1038
00:35:54,450 --> 00:35:56,939
being said it's something that we're

1039
00:35:55,650 --> 00:35:59,010
talking<font color="#E5E5E5"> about with them so a lot of them</font>

1040
00:35:56,940 --> 00:36:01,470
will support key men and<font color="#E5E5E5"> we talked</font><font color="#CCCCCC"> about</font>

1041
00:35:59,010 --> 00:36:02,670
opening a key map<font color="#E5E5E5"> endpoint on</font><font color="#CCCCCC"> barbican</font>

1042
00:36:01,470 --> 00:36:05,370
so that you would speak<font color="#E5E5E5"> commit to it</font>

1043
00:36:02,670 --> 00:36:06,810
instead of rest and so that would allow

1044
00:36:05,370 --> 00:36:08,549
you to back up against an<font color="#E5E5E5"> Oracle</font>

1045
00:36:06,810 --> 00:36:09,900
database or something like that you can

1046
00:36:08,550 --> 00:36:11,340
also always just point your Oracle

1047
00:36:09,900 --> 00:36:13,440
database directly at your HSM and that

1048
00:36:11,340 --> 00:36:14,670
work fine too you don't have to go

1049
00:36:13,440 --> 00:36:15,990
through<font color="#CCCCCC"> barbican in that case unless you</font>

1050
00:36:14,670 --> 00:36:19,520
want to<font color="#CCCCCC"> you say definitely something</font><font color="#E5E5E5"> we</font>

1051
00:36:15,990 --> 00:36:19,520
<font color="#CCCCCC">pack</font><font color="#E5E5E5"> conversations you have so</font><font color="#CCCCCC"> you're</font>

1052
00:36:21,290 --> 00:36:25,290
well so like we don't<font color="#E5E5E5"> have anything to</font>

1053
00:36:23,160 --> 00:36:27,450
<font color="#E5E5E5">do the HSN you buy it we just happen to</font>

1054
00:36:25,290 --> 00:36:28,650
use it for<font color="#CCCCCC"> our stuff you can</font><font color="#E5E5E5"> include as</font>

1055
00:36:27,450 --> 00:36:29,790
part of the solution so yeah you wanted

1056
00:36:28,650 --> 00:36:30,960
<font color="#E5E5E5">to have oracle talk to direct do that</font>

1057
00:36:29,790 --> 00:36:32,640
you can do it<font color="#CCCCCC"> put down anything to do</font>

1058
00:36:30,960 --> 00:36:34,770
with us we've also talked about like<font color="#E5E5E5"> I</font>

1059
00:36:32,640 --> 00:36:36,180
said exposing it came at that point<font color="#E5E5E5"> that</font>

1060
00:36:34,770 --> 00:36:37,920
<font color="#E5E5E5">would allow Oracle to talk directly to</font>

1061
00:36:36,180 --> 00:36:42,149
<font color="#CCCCCC">barbican and the</font><font color="#E5E5E5"> Barbican</font><font color="#CCCCCC"> Watanabe HSN</font>

1062
00:36:37,920 --> 00:36:44,400
so that would work as well<font color="#CCCCCC"> alright so</font>

1063
00:36:42,150 --> 00:36:46,800
future work so the<font color="#E5E5E5"> next the release of</font>

1064
00:36:44,400 --> 00:36:50,100
OpenStack is<font color="#CCCCCC"> a ice house since the</font>

1065
00:36:46,800 --> 00:36:53,520
reason we have a nice house see we all

1066
00:36:50,100 --> 00:36:54,870
get it now so kind of coming up came up

1067
00:36:53,520 --> 00:36:56,250
is a big one that we're talking about<font color="#E5E5E5"> so</font>

1068
00:36:54,870 --> 00:36:59,130
first we'll start supporting came upon

1069
00:36:56,250 --> 00:37:01,580
the back end so<font color="#E5E5E5"> barbican will speak came</font>

1070
00:36:59,130 --> 00:37:04,530
up to the<font color="#E5E5E5"> hsm rather than using</font><font color="#CCCCCC"> pcs</font>

1071
00:37:01,580 --> 00:37:06,150
safenet has gone and implemented a timid

1072
00:37:04,530 --> 00:37:08,190
librarian<font color="#CCCCCC"> python which is very</font><font color="#E5E5E5"> nice it</font>

1073
00:37:06,150 --> 00:37:09,600
did not<font color="#CCCCCC"> exist they haven't open source</font>

1074
00:37:08,190 --> 00:37:12,740
to get so we'll see<font color="#E5E5E5"> if they do that if</font>

1075
00:37:09,600 --> 00:37:15,900
they do then we'll use it will also do

1076
00:37:12,740 --> 00:37:17,790
support for SSL and TLS so this includes

1077
00:37:15,900 --> 00:37:19,620
provisioning ssl certificates both from

1078
00:37:17,790 --> 00:37:22,020
a local CA that's part of<font color="#CCCCCC"> barbican and</font>

1079
00:37:19,620 --> 00:37:23,580
also from<font color="#CCCCCC"> publix ea's we're going to</font>

1080
00:37:22,020 --> 00:37:25,200
<font color="#E5E5E5">implement semantics first because that's</font>

1081
00:37:23,580 --> 00:37:28,049
what Rackspace uses so that will get you

1082
00:37:25,200 --> 00:37:28,859
verisign thoughts geotrust and rapid and

1083
00:37:28,050 --> 00:37:30,030
then if you want to add your<font color="#E5E5E5"> own</font>

1084
00:37:28,860 --> 00:37:33,090
obviously there's a plugin for our

1085
00:37:30,030 --> 00:37:34,500
should be able to do that so that<font color="#E5E5E5"> also</font>

1086
00:37:33,090 --> 00:37:36,330
includes lifecycle management including

1087
00:37:34,500 --> 00:37:38,280
notifications when search are going to

1088
00:37:36,330 --> 00:37:39,210
expire all that kind of fun stuff and

1089
00:37:38,280 --> 00:37:40,620
then at Rackspace we're going to

1090
00:37:39,210 --> 00:37:42,360
<font color="#E5E5E5">implement the ability to automatically</font>

1091
00:37:40,620 --> 00:37:42,940
deploy some of them so for<font color="#CCCCCC"> example if</font>

1092
00:37:42,360 --> 00:37:44,800
you want to

1093
00:37:42,940 --> 00:37:46,150
your your ssl cert to cloud load

1094
00:37:44,800 --> 00:37:49,660
balancers you'll just be able<font color="#E5E5E5"> to do that</font>

1095
00:37:46,150 --> 00:37:51,099
in the system will reach out the

1096
00:37:49,660 --> 00:37:52,930
Federation stuff we talked about right

1097
00:37:51,099 --> 00:37:54,040
so the beginnings of the design of that

1098
00:37:52,930 --> 00:37:56,640
is there but we haven't started<font color="#E5E5E5"> coding</font>

1099
00:37:54,040 --> 00:37:58,839
it so that'll be<font color="#CCCCCC"> ver</font><font color="#E5E5E5"> eyes and then</font>

1100
00:37:56,640 --> 00:37:59,859
integrations things like this with proxy

1101
00:37:58,839 --> 00:38:01,029
and stuff we're kind of some<font color="#E5E5E5"> things that</font>

1102
00:37:59,859 --> 00:38:02,619
we're doing to help other people and

1103
00:38:01,030 --> 00:38:04,630
<font color="#E5E5E5">openstack understand how to use key</font>

1104
00:38:02,619 --> 00:38:06,160
management a<font color="#E5E5E5"> lot of them</font><font color="#CCCCCC"> are just</font>

1105
00:38:04,630 --> 00:38:07,960
<font color="#E5E5E5">developing systems that have a key in</font>

1106
00:38:06,160 --> 00:38:08,828
there figuration file and so trying<font color="#E5E5E5"> to</font>

1107
00:38:07,960 --> 00:38:09,849
get to<font color="#E5E5E5"> the point where they kind of</font>

1108
00:38:08,829 --> 00:38:18,700
think<font color="#E5E5E5"> about how to do this correctly</font>

1109
00:38:09,849 --> 00:38:20,380
something that a lot of time so if

1110
00:38:18,700 --> 00:38:22,569
you're if you're interested now you

1111
00:38:20,380 --> 00:38:24,490
wanna start playing around there<font color="#E5E5E5"> are</font>

1112
00:38:22,569 --> 00:38:27,460
existing libraries on get out of<font color="#CCCCCC"> this we</font>

1113
00:38:24,490 --> 00:38:30,069
have a BBQ client just important<font color="#E5E5E5"> and</font>

1114
00:38:27,460 --> 00:38:33,790
<font color="#CCCCCC">fine python library there's a simple</font>

1115
00:38:30,069 --> 00:38:36,790
example ur doing some secret store and

1116
00:38:33,790 --> 00:38:38,079
secrets create right calls and then

1117
00:38:36,790 --> 00:38:40,359
there is<font color="#E5E5E5"> also the source code and</font>

1118
00:38:38,079 --> 00:38:42,730
documentation is up on github under the

1119
00:38:40,359 --> 00:38:44,170
cloud keep<font color="#E5E5E5"> organization blueprints are</font>

1120
00:38:42,730 --> 00:38:45,849
on launch pad because that's where

1121
00:38:44,170 --> 00:38:46,839
OpenStack test them so if you want to

1122
00:38:45,849 --> 00:38:49,450
<font color="#E5E5E5">see the blueprints for a future</font>

1123
00:38:46,839 --> 00:38:50,920
development live and then there<font color="#E5E5E5"> is an</font>

1124
00:38:49,450 --> 00:38:52,569
integration environment right now that's

1125
00:38:50,920 --> 00:38:54,880
running on<font color="#E5E5E5"> a public</font><font color="#CCCCCC"> cloud server it is</font>

1126
00:38:52,569 --> 00:38:56,319
not secure at all it's just if you are

1127
00:38:54,880 --> 00:38:58,210
writing a client or writing against

1128
00:38:56,319 --> 00:39:00,069
<font color="#CCCCCC">barbican you want to make sure it works</font>

1129
00:38:58,210 --> 00:39:02,020
here's something that's an<font color="#E5E5E5"> endpoint that</font>

1130
00:39:00,069 --> 00:39:09,369
works but is you know strictly for Devon

1131
00:39:02,020 --> 00:39:11,530
testing it's not for real<font color="#CCCCCC"> sue the team</font>

1132
00:39:09,369 --> 00:39:12,910
hands out on freenode in OpenStack

1133
00:39:11,530 --> 00:39:14,380
hockey so if you ever want to hop on

1134
00:39:12,910 --> 00:39:16,210
there we're always on IRC that's usually

1135
00:39:14,380 --> 00:39:17,829
where we do most of our work obviously

1136
00:39:16,210 --> 00:39:20,800
github.com / cod keep is where all the

1137
00:39:17,829 --> 00:39:22,569
code is and we have a mailing list that

1138
00:39:20,800 --> 00:39:24,280
no one uses but<font color="#E5E5E5"> you were welcome to hop</font>

1139
00:39:22,569 --> 00:39:26,619
on there who would like to you

1140
00:39:24,280 --> 00:39:29,140
overstuffed on IRC so it's look mailing

1141
00:39:26,619 --> 00:39:31,060
list is there for those who want it so

1142
00:39:29,140 --> 00:39:34,250
you can hop on that and get<font color="#E5E5E5"> ahold of sue</font>

1143
00:39:31,060 --> 00:39:37,100
their reform of snow

1144
00:39:34,250 --> 00:39:38,720
this work and will we actually going out

1145
00:39:37,100 --> 00:39:40,580
<font color="#E5E5E5">to the OpenStack summit next week to</font>

1146
00:39:38,720 --> 00:39:44,120
kind of talk about<font color="#CCCCCC"> it playing out in</font><font color="#E5E5E5"> the</font>

1147
00:39:40,580 --> 00:39:45,710
next<font color="#E5E5E5"> six months ago</font><font color="#CCCCCC"> with my closely what</font>

1148
00:39:44,120 --> 00:39:53,390
we have now I mean any questions or

1149
00:39:45,710 --> 00:39:55,520
anything else that we can<font color="#E5E5E5"> answer so I</font>

1150
00:39:53,390 --> 00:39:56,990
think<font color="#CCCCCC"> barbican wants to be the</font><font color="#E5E5E5"> back end</font>

1151
00:39:55,520 --> 00:39:59,330
<font color="#E5E5E5">for a lot of those features rather than</font>

1152
00:39:56,990 --> 00:40:00,950
implement them ourselves so like what we

1153
00:39:59,330 --> 00:40:02,270
don't want to turn into is<font color="#CCCCCC"> barbican</font>

1154
00:40:00,950 --> 00:40:03,950
droids<font color="#E5E5E5"> all the encryption code and all</font>

1155
00:40:02,270 --> 00:40:05,060
of OpenStack because we just can't keep

1156
00:40:03,950 --> 00:40:06,740
up<font color="#CCCCCC"> with that kind</font><font color="#E5E5E5"> of stuff and we</font><font color="#CCCCCC"> don't</font>

1157
00:40:05,060 --> 00:40:08,290
<font color="#E5E5E5">notice up projects enough but we have</font>

1158
00:40:06,740 --> 00:40:11,330
had<font color="#CCCCCC"> a longer a lot of conversations with</font>

1159
00:40:08,290 --> 00:40:13,820
API signing stuff with message signing

1160
00:40:11,330 --> 00:40:16,580
things across message queues with pki

1161
00:40:13,820 --> 00:40:17,990
authentication<font color="#E5E5E5"> with Keystone all these</font>

1162
00:40:16,580 --> 00:40:18,980
different things all these places in

1163
00:40:17,990 --> 00:40:20,689
OpenStack that want to do encryption

1164
00:40:18,980 --> 00:40:22,160
we've talked a lot of them make<font color="#CCCCCC"> sure</font>

1165
00:40:20,690 --> 00:40:24,050
that we're kind of providing what they

1166
00:40:22,160 --> 00:40:25,520
need to<font color="#CCCCCC"> store and maintain all these</font>

1167
00:40:24,050 --> 00:40:27,890
keys right so the nice thing is that all

1168
00:40:25,520 --> 00:40:30,110
<font color="#E5E5E5">of</font><font color="#CCCCCC"> your keys in OpenStack</font><font color="#E5E5E5"> will be in one</font>

1169
00:40:27,890 --> 00:40:31,940
spot one service that's kind of you can

1170
00:40:30,110 --> 00:40:33,410
deploy<font color="#E5E5E5"> in a much more secure fashion you</font>

1171
00:40:31,940 --> 00:40:34,910
can audit it you can get it you know

1172
00:40:33,410 --> 00:40:36,649
part of your compliance routine you need

1173
00:40:34,910 --> 00:40:38,450
to has all the auditing logging you can

1174
00:40:36,650 --> 00:40:40,010
create all of your our bathrooms and all

1175
00:40:38,450 --> 00:40:43,240
kinds up in one spot and then it's<font color="#E5E5E5"> just</font>

1176
00:40:40,010 --> 00:40:43,240
used by all the other services

1177
00:40:45,800 --> 00:40:49,850
so I<font color="#E5E5E5"> don't think they've done much yet</font>

1178
00:40:47,510 --> 00:40:52,340
for the API signing stuff so we're

1179
00:40:49,850 --> 00:40:54,350
<font color="#CCCCCC">having a design session in in Hong Kong</font>

1180
00:40:52,340 --> 00:40:56,480
specifically<font color="#E5E5E5"> to talk about the interface</font>

1181
00:40:54,350 --> 00:40:58,670
between Keystone which is identity and

1182
00:40:56,480 --> 00:41:00,170
bbqing so kind of like Keystone has a

1183
00:40:58,670 --> 00:41:01,940
lot of encryption kind of<font color="#CCCCCC"> pieces to</font><font color="#E5E5E5"> it</font>

1184
00:41:00,170 --> 00:41:03,650
you<font color="#E5E5E5"> can do kind of you can authenticate</font>

1185
00:41:01,940 --> 00:41:04,820
with keys you can<font color="#E5E5E5"> do signs tokens</font>

1186
00:41:03,650 --> 00:41:05,870
various other things<font color="#E5E5E5"> and so we're going</font>

1187
00:41:04,820 --> 00:41:07,790
to have<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of conversations about</font>

1188
00:41:05,870 --> 00:41:09,589
what's identity in authentication

1189
00:41:07,790 --> 00:41:11,360
authorization and what's keys and how

1190
00:41:09,590 --> 00:41:12,410
should<font color="#E5E5E5"> those interact with each other so</font>

1191
00:41:11,360 --> 00:41:13,850
hopefully<font color="#CCCCCC"> as we kind of nail that down</font>

1192
00:41:12,410 --> 00:41:15,620
you<font color="#E5E5E5"> kind of see a little bit more</font><font color="#CCCCCC"> work</font>

1193
00:41:13,850 --> 00:41:17,270
he soon will use us for some things and

1194
00:41:15,620 --> 00:41:18,740
it will use itself for some things you

1195
00:41:17,270 --> 00:41:20,780
know the end of the day<font color="#CCCCCC"> barbican is tied</font>

1196
00:41:18,740 --> 00:41:22,100
to<font color="#CCCCCC"> pisa</font><font color="#E5E5E5"> we use it for authentication so</font>

1197
00:41:20,780 --> 00:41:23,780
they both have<font color="#CCCCCC"> to be basically</font><font color="#E5E5E5"> the same</font>

1198
00:41:22,100 --> 00:41:25,400
<font color="#E5E5E5">level of security for you to kind of</font>

1199
00:41:23,780 --> 00:41:26,930
have<font color="#E5E5E5"> it barbican is super secure</font>

1200
00:41:25,400 --> 00:41:28,850
<font color="#CCCCCC">Keystone's knock it doesn't help you not</font>

1201
00:41:26,930 --> 00:41:33,799
right so they want<font color="#E5E5E5"> to store something in</font>

1202
00:41:28,850 --> 00:41:37,190
keystone then right any<font color="#CCCCCC"> other questions</font>

1203
00:41:33,800 --> 00:41:40,150
comments concerns all right really

1204
00:41:37,190 --> 00:41:40,150
that's all we got thank you very much

