1
00:00:17,440 --> 00:00:22,180
before I get<font color="#CCCCCC"> started of course Oh haces</font>

2
00:00:20,110 --> 00:00:24,250
not<font color="#E5E5E5"> endorse any commercial company we</font>

3
00:00:22,180 --> 00:00:25,779
are<font color="#CCCCCC"> a non-profit vendor-neutral charity</font>

4
00:00:24,250 --> 00:00:27,880
but<font color="#CCCCCC"> I got to</font><font color="#E5E5E5"> say thank you to</font><font color="#CCCCCC"> my</font>

5
00:00:25,779 --> 00:00:29,710
employer white hat they have basically

6
00:00:27,880 --> 00:00:32,110
paid my<font color="#CCCCCC"> way to</font><font color="#E5E5E5"> travel the world</font><font color="#CCCCCC"> for the</font>

7
00:00:29,710 --> 00:00:34,210
<font color="#E5E5E5">last two</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> I've</font><font color="#CCCCCC"> had 42 countries hit</font>

8
00:00:32,110 --> 00:00:36,970
pretty much every<font color="#CCCCCC"> Olas chapter and</font><font color="#E5E5E5"> had</font>

9
00:00:34,210 --> 00:00:39,879
chance as a my employer fund a lot of my

10
00:00:36,970 --> 00:00:41,769
volunteer<font color="#CCCCCC"> work</font><font color="#E5E5E5"> throughout the world for</font>

11
00:00:39,879 --> 00:00:43,690
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Olas foundation I'm very grateful</font><font color="#E5E5E5"> to</font>

12
00:00:41,769 --> 00:00:45,970
my employer for that so before<font color="#CCCCCC"> we get</font>

13
00:00:43,690 --> 00:00:48,280
<font color="#CCCCCC">started I want to</font><font color="#E5E5E5"> provide a warning the</font>

14
00:00:45,970 --> 00:00:50,710
warning label for this talk look<font color="#E5E5E5"> this is</font>

15
00:00:48,280 --> 00:00:54,370
just<font color="#E5E5E5"> an awareness document there are</font>

16
00:00:50,710 --> 00:00:57,460
more than<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> issues in application</font>

17
00:00:54,370 --> 00:00:59,919
security<font color="#CCCCCC"> and please do not you try this</font>

18
00:00:57,460 --> 00:01:02,649
at home<font color="#E5E5E5"> do not base your entire</font>

19
00:00:59,920 --> 00:01:05,050
<font color="#E5E5E5">application security program off a top</font>

20
00:01:02,649 --> 00:01:07,720
<font color="#E5E5E5">10 list</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a start</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font>

21
00:01:05,050 --> 00:01:09,220
initial awareness<font color="#E5E5E5"> and what we'll dive</font>

22
00:01:07,720 --> 00:01:11,979
<font color="#E5E5E5">we'll dive deep a little bit in this</font>

23
00:01:09,220 --> 00:01:13,690
presentation but please be careful<font color="#E5E5E5"> using</font>

24
00:01:11,979 --> 00:01:15,670
<font color="#E5E5E5">this</font><font color="#CCCCCC"> document it's meant for initial</font>

25
00:01:13,690 --> 00:01:18,820
awareness<font color="#E5E5E5"> not on a</font><font color="#CCCCCC"> comprehensive program</font>

26
00:01:15,670 --> 00:01:21,550
there let's get<font color="#E5E5E5"> to it</font><font color="#CCCCCC"> so proactive</font>

27
00:01:18,820 --> 00:01:24,038
controls<font color="#E5E5E5"> how do we get started</font>

28
00:01:21,550 --> 00:01:26,110
<font color="#E5E5E5">building an application security program</font>

29
00:01:24,039 --> 00:01:28,090
within<font color="#E5E5E5"> our organization look the reality</font>

30
00:01:26,110 --> 00:01:31,060
<font color="#E5E5E5">is when</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> look at application security</font>

31
00:01:28,090 --> 00:01:32,380
<font color="#E5E5E5">we</font><font color="#CCCCCC"> are babies at this</font><font color="#E5E5E5"> we are new at this</font>

32
00:01:31,060 --> 00:01:34,420
compared to other<font color="#CCCCCC"> elements of</font>

33
00:01:32,380 --> 00:01:36,339
<font color="#E5E5E5">Information Security and we still have a</font>

34
00:01:34,420 --> 00:01:37,899
lot<font color="#E5E5E5"> to learn</font><font color="#CCCCCC"> we have a lot of maturity</font>

35
00:01:36,340 --> 00:01:41,740
to<font color="#CCCCCC"> build in our industry around</font>

36
00:01:37,899 --> 00:01:43,479
application security<font color="#E5E5E5"> and so we still</font>

37
00:01:41,740 --> 00:01:45,880
<font color="#E5E5E5">have a ways to go</font><font color="#CCCCCC"> so this is where I</font>

38
00:01:43,479 --> 00:01:47,950
feel we're at<font color="#E5E5E5"> today a great place</font><font color="#CCCCCC"> to get</font>

39
00:01:45,880 --> 00:01:50,679
<font color="#CCCCCC">started building your</font><font color="#E5E5E5"> own program so</font>

40
00:01:47,950 --> 00:01:53,349
number one security<font color="#E5E5E5"> requirements is this</font>

41
00:01:50,679 --> 00:01:55,330
an exciting<font color="#CCCCCC"> topic no it's not in fact</font>

42
00:01:53,349 --> 00:01:57,340
most of the<font color="#E5E5E5"> things that are gonna</font><font color="#CCCCCC"> really</font>

43
00:01:55,330 --> 00:01:59,289
make<font color="#E5E5E5"> a big difference in your company</font>

44
00:01:57,340 --> 00:02:03,099
around<font color="#E5E5E5"> the building of secure software</font>

45
00:01:59,289 --> 00:02:05,200
<font color="#E5E5E5">it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not exciting it's not like like</font>

46
00:02:03,099 --> 00:02:07,330
<font color="#CCCCCC">hacking some</font><font color="#E5E5E5"> global application and</font>

47
00:02:05,200 --> 00:02:08,649
getting in CNN<font color="#E5E5E5"> because you bring in the</font>

48
00:02:07,330 --> 00:02:13,690
news because<font color="#E5E5E5"> you're such a great hacker</font>

49
00:02:08,649 --> 00:02:15,550
<font color="#E5E5E5">this is fetch wood and what is it what's</font>

50
00:02:13,690 --> 00:02:18,459
the<font color="#E5E5E5"> saying again fetch wood carry water</font>

51
00:02:15,550 --> 00:02:19,959
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is just hard work and it's to some</font>

52
00:02:18,459 --> 00:02:23,349
degree it may be boring to some<font color="#E5E5E5"> of you</font>

53
00:02:19,959 --> 00:02:25,990
but that<font color="#E5E5E5"> level of</font><font color="#CCCCCC"> minutia that</font><font color="#E5E5E5"> level of</font>

54
00:02:23,349 --> 00:02:28,179
just<font color="#E5E5E5"> daily grind is what we need to</font>

55
00:02:25,990 --> 00:02:30,220
build secure software<font color="#E5E5E5"> so what do I mean</font>

56
00:02:28,180 --> 00:02:30,819
<font color="#E5E5E5">by secure requirements there's two</font><font color="#CCCCCC"> basic</font>

57
00:02:30,220 --> 00:02:32,230
kinds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> sir</font>

58
00:02:30,819 --> 00:02:33,969
your requirements functional<font color="#E5E5E5"> and</font>

59
00:02:32,230 --> 00:02:36,429
non-functional<font color="#CCCCCC"> when I talk</font><font color="#E5E5E5"> about a</font>

60
00:02:33,969 --> 00:02:41,230
functional<font color="#CCCCCC"> requirement</font><font color="#E5E5E5"> this is something</font>

61
00:02:36,430 --> 00:02:42,969
<font color="#E5E5E5">that a</font><font color="#CCCCCC"> a little bit</font><font color="#E5E5E5"> better when</font><font color="#CCCCCC"> I talk</font>

62
00:02:41,230 --> 00:02:45,219
<font color="#CCCCCC">about</font><font color="#E5E5E5"> a functional</font><font color="#CCCCCC"> requirement</font><font color="#E5E5E5"> this is</font>

63
00:02:42,969 --> 00:02:48,430
something<font color="#CCCCCC"> that really</font><font color="#E5E5E5"> needs that</font><font color="#CCCCCC"> that</font>

64
00:02:45,219 --> 00:02:50,230
can be<font color="#E5E5E5"> testable by</font><font color="#CCCCCC"> a QA professional</font>

65
00:02:48,430 --> 00:02:52,959
<font color="#E5E5E5">it's a visible feature in your</font>

66
00:02:50,230 --> 00:02:55,090
<font color="#E5E5E5">application it's a standard workflow any</font>

67
00:02:52,959 --> 00:02:57,129
standard user will run across<font color="#CCCCCC"> the</font>

68
00:02:55,090 --> 00:02:58,989
security feature<font color="#E5E5E5"> this is something like</font>

69
00:02:57,129 --> 00:03:00,939
<font color="#E5E5E5">the forgot password workflow when the</font>

70
00:02:58,989 --> 00:03:03,280
user has forgotten<font color="#CCCCCC"> that password they</font>

71
00:03:00,939 --> 00:03:05,290
trigger forgot password<font color="#E5E5E5"> they enter in</font>

72
00:03:03,280 --> 00:03:07,299
some<font color="#CCCCCC"> information they're given</font><font color="#E5E5E5"> a link or</font>

73
00:03:05,290 --> 00:03:11,048
go through some workflow<font color="#E5E5E5"> we can test</font>

74
00:03:07,299 --> 00:03:12,549
<font color="#E5E5E5">that by QA staff pretty deeply also like</font>

75
00:03:11,049 --> 00:03:14,680
real authentic ation during a change

76
00:03:12,549 --> 00:03:17,709
password feature<font color="#E5E5E5"> security features</font><font color="#CCCCCC"> that</font>

77
00:03:14,680 --> 00:03:19,810
are functional<font color="#E5E5E5"> that we can test now</font>

78
00:03:17,709 --> 00:03:21,310
there's a whole batch of non-functional

79
00:03:19,810 --> 00:03:23,620
security requirements that<font color="#E5E5E5"> we really</font>

80
00:03:21,310 --> 00:03:26,650
can't test<font color="#CCCCCC"> for</font><font color="#E5E5E5"> easily with</font><font color="#CCCCCC"> our standard</font>

81
00:03:23,620 --> 00:03:28,389
QA staff<font color="#E5E5E5"> these are invisible quality</font>

82
00:03:26,650 --> 00:03:30,900
features<font color="#CCCCCC"> behind the scenes of</font><font color="#E5E5E5"> an</font>

83
00:03:28,389 --> 00:03:32,739
application<font color="#E5E5E5"> this is stuff like query</font>

84
00:03:30,900 --> 00:03:34,540
parameterization this is building<font color="#CCCCCC"> your</font>

85
00:03:32,739 --> 00:03:36,040
<font color="#E5E5E5">database query resistant to sequel</font>

86
00:03:34,540 --> 00:03:38,319
injection<font color="#CCCCCC"> we'll talk about that</font><font color="#E5E5E5"> more</font>

87
00:03:36,040 --> 00:03:40,750
<font color="#CCCCCC">later or the how you're doing crypto</font>

88
00:03:38,319 --> 00:03:43,030
around password storage users aren't

89
00:03:40,750 --> 00:03:45,069
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to see this stuff normal QA staff</font>

90
00:03:43,030 --> 00:03:47,259
is not going to run into<font color="#E5E5E5"> this and my</font>

91
00:03:45,069 --> 00:03:48,608
conjecture here is<font color="#E5E5E5"> I can come up with</font><font color="#CCCCCC"> a</font>

92
00:03:47,259 --> 00:03:50,559
list of about<font color="#CCCCCC"> ten functional</font>

93
00:03:48,609 --> 00:03:52,449
requirements that<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> attach to</font><font color="#CCCCCC"> every</font>

94
00:03:50,560 --> 00:03:54,189
<font color="#CCCCCC">project I can</font><font color="#E5E5E5"> come up with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> list of</font>

95
00:03:52,449 --> 00:03:55,989
about<font color="#CCCCCC"> ten non-functional requirements</font>

96
00:03:54,189 --> 00:03:57,879
<font color="#E5E5E5">but I can attach to every</font><font color="#CCCCCC"> project I'm</font>

97
00:03:55,989 --> 00:03:59,859
not blowing the ocean here talking<font color="#E5E5E5"> about</font>

98
00:03:57,879 --> 00:04:01,780
<font color="#CCCCCC">twenty basic requirements and I can</font>

99
00:03:59,859 --> 00:04:03,879
solve 90% of all application security

100
00:04:01,780 --> 00:04:05,620
problems just<font color="#E5E5E5"> by doing that</font>

101
00:04:03,879 --> 00:04:07,840
look your developers or smart people

102
00:04:05,620 --> 00:04:09,939
it's<font color="#E5E5E5"> really difficult to build even</font>

103
00:04:07,840 --> 00:04:12,400
<font color="#E5E5E5">basic software it</font><font color="#CCCCCC"> is it's a difficult</font>

104
00:04:09,939 --> 00:04:13,959
<font color="#E5E5E5">art takes a lot</font><font color="#CCCCCC"> of work and</font><font color="#E5E5E5"> effort a lot</font>

105
00:04:12,400 --> 00:04:16,209
<font color="#E5E5E5">of pressures on developers coming from</font>

106
00:04:13,959 --> 00:04:18,940
all angles<font color="#CCCCCC"> if you let</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> know early</font><font color="#E5E5E5"> on</font>

107
00:04:16,209 --> 00:04:20,560
what you<font color="#E5E5E5"> expect in the software your</font>

108
00:04:18,940 --> 00:04:23,710
chances of getting it go up dramatically

109
00:04:20,560 --> 00:04:25,900
<font color="#CCCCCC">so basic stuff</font><font color="#E5E5E5"> next security</font>

110
00:04:23,710 --> 00:04:28,090
architecture in design<font color="#E5E5E5"> this is a</font>

111
00:04:25,900 --> 00:04:30,280
<font color="#CCCCCC">strategic effort</font><font color="#E5E5E5"> where you have the</font>

112
00:04:28,090 --> 00:04:33,400
business<font color="#E5E5E5"> technical and security</font>

113
00:04:30,280 --> 00:04:35,258
stakeholders<font color="#E5E5E5"> all agreeing on what</font><font color="#CCCCCC"> these</font>

114
00:04:33,400 --> 00:04:36,669
functional and non-functional security

115
00:04:35,259 --> 00:04:38,919
properties of software<font color="#E5E5E5"> going to look</font>

116
00:04:36,669 --> 00:04:41,289
like before<font color="#E5E5E5"> it's built again is this</font>

117
00:04:38,919 --> 00:04:43,240
exciting<font color="#CCCCCC"> now but again if the</font><font color="#E5E5E5"> earlier</font>

118
00:04:41,289 --> 00:04:44,889
you address these issues

119
00:04:43,240 --> 00:04:46,840
the cheaper it's gonna be for<font color="#E5E5E5"> your</font>

120
00:04:44,889 --> 00:04:49,800
organization<font color="#CCCCCC"> to achieve secure software</font>

121
00:04:46,840 --> 00:04:52,508
<font color="#E5E5E5">even</font><font color="#CCCCCC"> on some of your</font><font color="#E5E5E5"> lowest security</font>

122
00:04:49,800 --> 00:04:54,789
<font color="#E5E5E5">priority apps</font><font color="#CCCCCC"> you're getting forced</font><font color="#E5E5E5"> by</font>

123
00:04:52,509 --> 00:04:56,500
compliance<font color="#E5E5E5"> by your business partners by</font>

124
00:04:54,789 --> 00:04:58,509
<font color="#E5E5E5">our customers to build secure</font><font color="#CCCCCC"> software</font>

125
00:04:56,500 --> 00:05:00,630
and that pressure is<font color="#CCCCCC"> only going</font><font color="#E5E5E5"> to</font>

126
00:04:58,509 --> 00:05:02,860
<font color="#CCCCCC">increase in the next couple of</font><font color="#E5E5E5"> years</font><font color="#CCCCCC"> so</font>

127
00:05:00,630 --> 00:05:04,930
<font color="#CCCCCC">when you get the key stakeholders</font>

128
00:05:02,860 --> 00:05:06,280
<font color="#CCCCCC">together and agree on</font><font color="#E5E5E5"> what this is again</font>

129
00:05:04,930 --> 00:05:08,349
we're not<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to boil</font><font color="#E5E5E5"> the ocean here</font>

130
00:05:06,280 --> 00:05:11,679
I'm not<font color="#CCCCCC"> a big believer</font><font color="#E5E5E5"> in some of the</font>

131
00:05:08,349 --> 00:05:13,840
more it more detailed and evolved

132
00:05:11,680 --> 00:05:16,120
security architecture design processes

133
00:05:13,840 --> 00:05:18,099
<font color="#E5E5E5">the deeper you get into</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> the returns</font>

134
00:05:16,120 --> 00:05:19,750
diminish<font color="#CCCCCC"> quickly so I want to</font><font color="#E5E5E5"> spend</font><font color="#CCCCCC"> just</font>

135
00:05:18,099 --> 00:05:22,270
a<font color="#CCCCCC"> few days let's get</font><font color="#E5E5E5"> this on the</font><font color="#CCCCCC"> table</font>

136
00:05:19,750 --> 00:05:25,000
it's got the basics<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the table so we</font>

137
00:05:22,270 --> 00:05:27,698
can<font color="#E5E5E5"> again design software in a secure</font>

138
00:05:25,000 --> 00:05:29,259
fashion<font color="#CCCCCC"> early on in the</font><font color="#E5E5E5"> life cycle</font><font color="#CCCCCC"> when</font>

139
00:05:27,699 --> 00:05:31,060
you try to fix these bugs deep in

140
00:05:29,259 --> 00:05:33,520
production especially<font color="#CCCCCC"> the more</font><font color="#E5E5E5"> complex</font>

141
00:05:31,060 --> 00:05:35,770
<font color="#E5E5E5">ones multi-step workflows the cost to</font>

142
00:05:33,520 --> 00:05:37,419
fix is off the chart when you're

143
00:05:35,770 --> 00:05:40,448
<font color="#CCCCCC">designing it this when you talk about</font>

144
00:05:37,419 --> 00:05:42,520
<font color="#E5E5E5">security design early on the cost goes</font>

145
00:05:40,449 --> 00:05:44,229
<font color="#CCCCCC">down to very very little very not very</font>

146
00:05:42,520 --> 00:05:45,609
little to nothing<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> think of this</font><font color="#E5E5E5"> as</font>

147
00:05:44,229 --> 00:05:48,639
<font color="#E5E5E5">like a two to three day</font><font color="#CCCCCC"> process when</font>

148
00:05:45,610 --> 00:05:50,470
we're beginning<font color="#CCCCCC"> to design software</font><font color="#E5E5E5"> an</font>

149
00:05:48,639 --> 00:05:53,470
<font color="#E5E5E5">example of what I mean</font><font color="#CCCCCC"> by this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> state</font>

150
00:05:50,470 --> 00:05:55,300
so when you're<font color="#E5E5E5"> passing data around an</font>

151
00:05:53,470 --> 00:05:57,070
application you can pass state through a

152
00:05:55,300 --> 00:05:58,780
<font color="#E5E5E5">request as a hidden parameter you can</font>

153
00:05:57,070 --> 00:06:00,669
<font color="#E5E5E5">pass state through a web session of</font>

154
00:05:58,780 --> 00:06:03,250
<font color="#E5E5E5">standard session you can pass state</font>

155
00:06:00,669 --> 00:06:05,289
through a<font color="#E5E5E5"> database and developers get</font>

156
00:06:03,250 --> 00:06:08,199
this wrong<font color="#E5E5E5"> all the time</font><font color="#CCCCCC"> and I think it's</font>

157
00:06:05,289 --> 00:06:10,240
something<font color="#CCCCCC"> that we can we can think about</font>

158
00:06:08,199 --> 00:06:11,680
way in advance<font color="#CCCCCC"> before we actually</font><font color="#E5E5E5"> build</font>

159
00:06:10,240 --> 00:06:13,389
<font color="#CCCCCC">that software so</font><font color="#E5E5E5"> just some things that</font>

160
00:06:11,680 --> 00:06:15,240
<font color="#E5E5E5">we have to think</font><font color="#CCCCCC"> about I'm not going</font><font color="#E5E5E5"> to</font>

161
00:06:13,389 --> 00:06:19,479
too much<font color="#E5E5E5"> detail about these topics next</font>

162
00:06:15,240 --> 00:06:20,880
<font color="#E5E5E5">key key requirement in my opinion to</font>

163
00:06:19,479 --> 00:06:23,590
what it takes to build<font color="#E5E5E5"> secure software</font>

164
00:06:20,880 --> 00:06:25,539
leverage the security features<font color="#CCCCCC"> that we</font>

165
00:06:23,590 --> 00:06:27,820
already have in frameworks and languages

166
00:06:25,539 --> 00:06:29,289
<font color="#E5E5E5">and this is only getting better let me</font>

167
00:06:27,820 --> 00:06:31,270
give you one quick<font color="#CCCCCC"> example of a</font>

168
00:06:29,289 --> 00:06:32,830
framework that addresses a problem<font color="#CCCCCC"> so</font>

169
00:06:31,270 --> 00:06:34,659
one of<font color="#E5E5E5"> the big problems like our upon is</font>

170
00:06:32,830 --> 00:06:37,599
access control design in a web

171
00:06:34,659 --> 00:06:39,430
application<font color="#CCCCCC"> how do most</font><font color="#E5E5E5"> developers build</font>

172
00:06:37,599 --> 00:06:46,000
access<font color="#E5E5E5"> control into a web application</font>

173
00:06:39,430 --> 00:06:49,990
today<font color="#E5E5E5"> what do you think I'm sorry</font><font color="#CCCCCC"> access</font>

174
00:06:46,000 --> 00:06:52,389
control<font color="#CCCCCC"> rope</font><font color="#E5E5E5"> they tend to do</font><font color="#CCCCCC"> hard-coded</font>

175
00:06:49,990 --> 00:06:53,770
<font color="#E5E5E5">roles in code if the</font><font color="#CCCCCC"> user is of this</font><font color="#E5E5E5"> or</font>

176
00:06:52,389 --> 00:06:55,440
if the<font color="#CCCCCC"> user is of that then</font><font color="#E5E5E5"> we'll let</font>

177
00:06:53,770 --> 00:06:57,270
them<font color="#E5E5E5"> have access this is a rat</font>

178
00:06:55,440 --> 00:06:59,310
anti-pattern<font color="#CCCCCC"> I'll talk about this right</font>

179
00:06:57,270 --> 00:07:02,940
<font color="#CCCCCC">now actually</font><font color="#E5E5E5"> so we have Apache Shiro</font>

180
00:06:59,310 --> 00:07:05,430
<font color="#CCCCCC">patchy</font><font color="#E5E5E5"> Shiro is</font><font color="#CCCCCC"> a very</font><font color="#E5E5E5"> high quality</font><font color="#CCCCCC"> Java</font>

181
00:07:02,940 --> 00:07:07,770
project that was written<font color="#E5E5E5"> by not security</font>

182
00:07:05,430 --> 00:07:10,020
folks<font color="#E5E5E5"> but really</font><font color="#CCCCCC"> high-end professional</font>

183
00:07:07,770 --> 00:07:11,549
developers who also had solid<font color="#E5E5E5"> security</font>

184
00:07:10,020 --> 00:07:13,109
knowledge<font color="#E5E5E5"> and they were addressing a</font>

185
00:07:11,550 --> 00:07:15,990
<font color="#E5E5E5">problem with the Federation of your</font>

186
00:07:13,110 --> 00:07:17,820
session when you have a very highly hit

187
00:07:15,990 --> 00:07:20,010
web application with a lot<font color="#E5E5E5"> of users</font>

188
00:07:17,820 --> 00:07:22,500
throughout the world<font color="#CCCCCC"> the standard web</font>

189
00:07:20,010 --> 00:07:25,289
session becomes useless it's it's not

190
00:07:22,500 --> 00:07:27,840
it's not workable<font color="#E5E5E5"> for a large highly hit</font>

191
00:07:25,290 --> 00:07:29,850
<font color="#E5E5E5">you know global application so you need</font>

192
00:07:27,840 --> 00:07:31,710
to distribute cluster federate that

193
00:07:29,850 --> 00:07:33,660
session<font color="#CCCCCC"> throughout a global</font>

194
00:07:31,710 --> 00:07:35,549
infrastructure<font color="#E5E5E5"> this is why Apache was</font>

195
00:07:33,660 --> 00:07:37,770
<font color="#CCCCCC">Shiro was built because that was lacking</font>

196
00:07:35,550 --> 00:07:38,970
in all the core Java frameworks they

197
00:07:37,770 --> 00:07:40,859
still are to this<font color="#CCCCCC"> day</font>

198
00:07:38,970 --> 00:07:42,420
and so Apache gives us a good

199
00:07:40,860 --> 00:07:44,670
authentication layer<font color="#E5E5E5"> the session</font>

200
00:07:42,420 --> 00:07:47,250
<font color="#CCCCCC">management and a really good access</font>

201
00:07:44,670 --> 00:07:48,720
control layer that no other framework

202
00:07:47,250 --> 00:07:50,340
<font color="#E5E5E5">gives us this is something</font><font color="#CCCCCC"> that we can</font>

203
00:07:48,720 --> 00:07:52,260
leverage in almost every<font color="#E5E5E5"> java</font>

204
00:07:50,340 --> 00:07:54,810
application suppose you're building a

205
00:07:52,260 --> 00:07:57,659
Star Wars<font color="#E5E5E5"> game and you know and we want</font>

206
00:07:54,810 --> 00:07:58,640
<font color="#E5E5E5">to check if the user is allowed to wield</font>

207
00:07:57,660 --> 00:08:00,510
a lightsaber

208
00:07:58,640 --> 00:08:02,760
traditionally developers will code it

209
00:08:00,510 --> 00:08:05,460
<font color="#E5E5E5">like this well if the user is a Jedi</font>

210
00:08:02,760 --> 00:08:07,890
<font color="#CCCCCC">they're ob1 if to use or if the user is</font>

211
00:08:05,460 --> 00:08:10,440
a Padawan<font color="#CCCCCC"> look Luke or if the user is a</font>

212
00:08:07,890 --> 00:08:12,750
Sith Lord<font color="#CCCCCC"> course Darth Vader or or if</font>

213
00:08:10,440 --> 00:08:14,130
the<font color="#CCCCCC"> user is a Jedi killing cyborg that</font>

214
00:08:12,750 --> 00:08:16,530
<font color="#E5E5E5">was trained by us if this</font><font color="#CCCCCC"> is of course</font>

215
00:08:14,130 --> 00:08:18,930
<font color="#CCCCCC">General Grievous and every time we have</font>

216
00:08:16,530 --> 00:08:20,940
a new character<font color="#E5E5E5"> or type</font><font color="#CCCCCC"> of character</font>

217
00:08:18,930 --> 00:08:23,100
that<font color="#CCCCCC"> we use in the</font><font color="#E5E5E5"> video game we have to</font>

218
00:08:20,940 --> 00:08:25,290
<font color="#CCCCCC">go and push code we have</font><font color="#E5E5E5"> to change new</font>

219
00:08:23,100 --> 00:08:27,540
code very often<font color="#E5E5E5"> in thousands of places</font>

220
00:08:25,290 --> 00:08:29,190
<font color="#CCCCCC">throughout</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> application this is an</font>

221
00:08:27,540 --> 00:08:31,320
<font color="#E5E5E5">anti-pattern</font><font color="#CCCCCC"> we do not want assigned</font>

222
00:08:29,190 --> 00:08:33,530
code like this there's almost no need

223
00:08:31,320 --> 00:08:35,789
ever to code like this this is a

224
00:08:33,530 --> 00:08:39,659
traditional hard-coded role based access

225
00:08:35,789 --> 00:08:43,110
control<font color="#CCCCCC"> Shiro</font><font color="#E5E5E5"> is the only of Java</font>

226
00:08:39,659 --> 00:08:45,329
framework that does proper capabilities

227
00:08:43,110 --> 00:08:47,339
<font color="#E5E5E5">based access control built in from the</font>

228
00:08:45,330 --> 00:08:49,350
<font color="#CCCCCC">ground</font><font color="#E5E5E5"> up you can still do role based</font>

229
00:08:47,339 --> 00:08:51,210
access control if you want to<font color="#E5E5E5"> I still</font>

230
00:08:49,350 --> 00:08:53,400
think<font color="#E5E5E5"> is an anti-pattern</font><font color="#CCCCCC"> here I don't</font>

231
00:08:51,210 --> 00:08:55,290
<font color="#CCCCCC">care about the role I'm just checking</font>

232
00:08:53,400 --> 00:08:57,300
<font color="#E5E5E5">about the feature if the user is</font>

233
00:08:55,290 --> 00:08:57,959
permitted to<font color="#E5E5E5"> wheel the lightsabers and</font>

234
00:08:57,300 --> 00:09:00,240
let them do it

235
00:08:57,960 --> 00:09:03,089
end of<font color="#E5E5E5"> story once</font><font color="#CCCCCC"> I code like this I'm</font>

236
00:09:00,240 --> 00:09:04,920
<font color="#E5E5E5">coding to</font><font color="#CCCCCC"> the feature</font><font color="#E5E5E5"> not the user I'll</font>

237
00:09:03,089 --> 00:09:06,690
never have<font color="#CCCCCC"> to change this code ever</font>

238
00:09:04,920 --> 00:09:08,189
again and<font color="#E5E5E5"> I don't want developers</font><font color="#CCCCCC"> to</font>

239
00:09:06,690 --> 00:09:10,710
<font color="#E5E5E5">build this from scratch</font>

240
00:09:08,190 --> 00:09:12,930
<font color="#CCCCCC">it's actually a</font><font color="#E5E5E5"> very complicated feature</font>

241
00:09:10,710 --> 00:09:17,010
to build<font color="#CCCCCC"> I want them to</font><font color="#E5E5E5"> be leverage of</font>

242
00:09:12,930 --> 00:09:19,140
<font color="#CCCCCC">well vetted high-quality actively</font>

243
00:09:17,010 --> 00:09:20,819
<font color="#CCCCCC">maintain security library or framework</font>

244
00:09:19,140 --> 00:09:23,069
feature that does<font color="#CCCCCC"> this for them</font>

245
00:09:20,820 --> 00:09:26,130
here's an<font color="#E5E5E5"> example of</font><font color="#CCCCCC"> de that contextual</font>

246
00:09:23,070 --> 00:09:27,780
<font color="#E5E5E5">access control something that role based</font>

247
00:09:26,130 --> 00:09:29,189
access control doesn't<font color="#E5E5E5"> even</font><font color="#CCCCCC"> address in</font>

248
00:09:27,780 --> 00:09:32,490
<font color="#E5E5E5">any way role based access control</font>

249
00:09:29,190 --> 00:09:35,430
<font color="#E5E5E5">addresses hierarchy and static roles for</font>

250
00:09:32,490 --> 00:09:39,360
users where we have<font color="#CCCCCC"> where</font><font color="#E5E5E5"> here we have a</font>

251
00:09:35,430 --> 00:09:40,949
dial or<font color="#CCCCCC"> data-driven</font><font color="#E5E5E5"> request</font><font color="#CCCCCC"> where it's</font>

252
00:09:39,360 --> 00:09:42,930
<font color="#E5E5E5">not just the role we're asking is the</font>

253
00:09:40,950 --> 00:09:45,330
user allowed to drive a certain<font color="#E5E5E5"> vehicle</font>

254
00:09:42,930 --> 00:09:47,069
<font color="#CCCCCC">I get to drive my Winnebago</font>

255
00:09:45,330 --> 00:09:48,810
<font color="#E5E5E5">Nishi</font><font color="#CCCCCC"> you are not driving</font><font color="#E5E5E5"> my Winnebago</font>

256
00:09:47,070 --> 00:09:50,700
I'm sorry<font color="#E5E5E5"> but I shouldn't be driving</font>

257
00:09:48,810 --> 00:09:52,020
<font color="#E5E5E5">your Winnebago either but maybe you get</font>

258
00:09:50,700 --> 00:09:53,070
to it maybe<font color="#E5E5E5"> if you're married you</font><font color="#CCCCCC"> could</font>

259
00:09:52,020 --> 00:09:54,390
definitely<font color="#CCCCCC"> drive your Winnipeg your</font>

260
00:09:53,070 --> 00:09:56,730
husband's Winnebago<font color="#E5E5E5"> because it's yours</font>

261
00:09:54,390 --> 00:09:58,080
<font color="#E5E5E5">anyways right so so here we see</font><font color="#CCCCCC"> users</font>

262
00:09:56,730 --> 00:10:00,060
<font color="#E5E5E5">making a request to drive this vehicle</font>

263
00:09:58,080 --> 00:10:02,640
<font color="#E5E5E5">in a game</font><font color="#CCCCCC"> or some kind of</font><font color="#E5E5E5"> feature so we</font>

264
00:10:00,060 --> 00:10:03,810
<font color="#CCCCCC">say let's get the</font><font color="#E5E5E5"> integer of the</font>

265
00:10:02,640 --> 00:10:06,000
Winnebago that we're currently operating

266
00:10:03,810 --> 00:10:07,949
<font color="#E5E5E5">on forced that to an integer and</font><font color="#CCCCCC"> then</font>

267
00:10:06,000 --> 00:10:10,350
say is the user permitted to drive

268
00:10:07,950 --> 00:10:12,690
Winnebago of that number<font color="#E5E5E5"> we push this</font>

269
00:10:10,350 --> 00:10:14,610
code<font color="#E5E5E5"> it's data contextual no other</font>

270
00:10:12,690 --> 00:10:16,500
framework provides a<font color="#E5E5E5"> default feature</font>

271
00:10:14,610 --> 00:10:18,720
like this<font color="#E5E5E5"> we'll never have to change</font>

272
00:10:16,500 --> 00:10:20,880
this code again<font color="#E5E5E5"> even if we completely</font>

273
00:10:18,720 --> 00:10:22,860
change our access control mechanism

274
00:10:20,880 --> 00:10:24,420
<font color="#E5E5E5">underneath the hood</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> this will</font>

275
00:10:22,860 --> 00:10:25,890
stand<font color="#E5E5E5"> the</font><font color="#CCCCCC"> test of time in terms of not</font>

276
00:10:24,420 --> 00:10:27,959
having<font color="#CCCCCC"> to modify code which we want</font><font color="#E5E5E5"> to</font>

277
00:10:25,890 --> 00:10:31,010
avoid in secure software<font color="#CCCCCC"> we wanted</font>

278
00:10:27,960 --> 00:10:33,870
modify code as little as possible<font color="#E5E5E5"> also</font>

279
00:10:31,010 --> 00:10:35,610
<font color="#E5E5E5">cross-site request forgery</font><font color="#CCCCCC"> this is not</font>

280
00:10:33,870 --> 00:10:37,740
something that<font color="#E5E5E5"> we should deal with</font><font color="#CCCCCC"> as a</font>

281
00:10:35,610 --> 00:10:39,450
programmer<font color="#E5E5E5"> this is something</font><font color="#CCCCCC"> that should</font>

282
00:10:37,740 --> 00:10:41,910
be<font color="#E5E5E5"> built</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the framework this is a</font>

283
00:10:39,450 --> 00:10:43,380
quick example<font color="#E5E5E5"> of a home routers getting</font>

284
00:10:41,910 --> 00:10:45,630
owned by cross-site request forgery

285
00:10:43,380 --> 00:10:47,340
<font color="#CCCCCC">there's a lot of material</font><font color="#E5E5E5"> on this risk</font>

286
00:10:45,630 --> 00:10:48,960
I'm<font color="#CCCCCC"> not gonna</font><font color="#E5E5E5"> get into it</font><font color="#CCCCCC"> now I</font><font color="#E5E5E5"> just</font>

287
00:10:47,340 --> 00:10:51,240
want to put it<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there that cross-site</font>

288
00:10:48,960 --> 00:10:52,980
request forgery<font color="#CCCCCC"> again</font><font color="#E5E5E5"> developers</font>

289
00:10:51,240 --> 00:10:54,660
shouldn't be dealing<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> this is</font>

290
00:10:52,980 --> 00:10:57,150
<font color="#E5E5E5">something our framework</font><font color="#CCCCCC"> should provide</font>

291
00:10:54,660 --> 00:10:59,939
and<font color="#E5E5E5"> then the</font><font color="#CCCCCC"> Java ecosystem we're late</font>

292
00:10:57,150 --> 00:11:01,740
on<font color="#E5E5E5"> this spring one of the most popular</font>

293
00:10:59,940 --> 00:11:05,760
Java frameworks<font color="#E5E5E5"> only started offering</font>

294
00:11:01,740 --> 00:11:07,440
cross-site request forgery defense<font color="#CCCCCC"> only</font>

295
00:11:05,760 --> 00:11:09,480
a couple<font color="#CCCCCC"> weeks ago</font><font color="#E5E5E5"> actually</font>

296
00:11:07,440 --> 00:11:13,520
<font color="#CCCCCC">Zain does does</font><font color="#E5E5E5"> Ruby on Rails give us</font>

297
00:11:09,480 --> 00:11:16,770
<font color="#CCCCCC">built-in</font><font color="#E5E5E5"> CSRF defense yeah I think Ruby</font>

298
00:11:13,520 --> 00:11:18,540
<font color="#E5E5E5">threw in Ruby 3</font><font color="#CCCCCC"> & 4</font><font color="#E5E5E5"> gave it to</font><font color="#CCCCCC"> us it's</font>

299
00:11:16,770 --> 00:11:20,560
built in dev don't<font color="#E5E5E5"> have to work at it</font>

300
00:11:18,540 --> 00:11:22,360
PHP frameworks have had this<font color="#CCCCCC"> built in</font>

301
00:11:20,560 --> 00:11:24,430
for some time now<font color="#CCCCCC"> so again it's an</font>

302
00:11:22,360 --> 00:11:26,610
example<font color="#E5E5E5"> of leveraging a</font><font color="#CCCCCC"> secure framework</font>

303
00:11:24,430 --> 00:11:29,349
<font color="#E5E5E5">using the right piece to get something</font>

304
00:11:26,610 --> 00:11:31,960
secure<font color="#E5E5E5"> or more secure let's talk about</font>

305
00:11:29,350 --> 00:11:33,910
<font color="#E5E5E5">authentication and identity this is a I</font>

306
00:11:31,960 --> 00:11:36,160
could<font color="#E5E5E5"> spend hours</font><font color="#CCCCCC"> just talking</font><font color="#E5E5E5"> about</font>

307
00:11:33,910 --> 00:11:37,569
this<font color="#E5E5E5"> and I have sorry I'm Anna and I'm</font>

308
00:11:36,160 --> 00:11:40,300
<font color="#E5E5E5">gonna mention a few quick</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that I</font>

309
00:11:37,570 --> 00:11:42,220
think<font color="#E5E5E5"> are important</font><font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of things</font>

310
00:11:40,300 --> 00:11:43,510
that<font color="#E5E5E5"> developers need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> themselves</font>

311
00:11:42,220 --> 00:11:45,910
that frameworks aren't going to handle

312
00:11:43,510 --> 00:11:48,819
for them<font color="#E5E5E5"> for the most part so password</font>

313
00:11:45,910 --> 00:11:51,839
<font color="#CCCCCC">defense I want to talk about first whoa</font>

314
00:11:48,820 --> 00:11:55,540
I want to talk about first how<font color="#CCCCCC"> to do</font>

315
00:11:51,839 --> 00:11:57,490
<font color="#CCCCCC">password storage so let's get some of</font>

316
00:11:55,540 --> 00:11:59,170
<font color="#E5E5E5">this we'll talk about using a salt we'll</font>

317
00:11:57,490 --> 00:12:02,529
talk<font color="#E5E5E5"> about s</font><font color="#CCCCCC"> crypt and B crypt and</font>

318
00:11:59,170 --> 00:12:04,510
pbkdf2<font color="#CCCCCC"> the problems with those and my</font>

319
00:12:02,529 --> 00:12:05,710
preference is using an H Mac for

320
00:12:04,510 --> 00:12:09,580
<font color="#CCCCCC">passwords store</font><font color="#E5E5E5"> just getting a little</font>

321
00:12:05,710 --> 00:12:11,260
crypto here so number one don't<font color="#CCCCCC"> again</font>

322
00:12:09,580 --> 00:12:13,800
<font color="#E5E5E5">what we're doing what I'm talking about</font>

323
00:12:11,260 --> 00:12:16,540
here<font color="#CCCCCC"> is a developer is building a</font>

324
00:12:13,800 --> 00:12:18,520
<font color="#E5E5E5">database the user has given</font><font color="#CCCCCC"> us a</font>

325
00:12:16,540 --> 00:12:20,860
password at registration<font color="#E5E5E5"> time how do I</font>

326
00:12:18,520 --> 00:12:24,550
store that<font color="#CCCCCC"> password</font><font color="#E5E5E5"> how about</font><font color="#CCCCCC"> plaintext</font>

327
00:12:20,860 --> 00:12:26,680
<font color="#E5E5E5">map plaintext password survey says you</font>

328
00:12:24,550 --> 00:12:28,569
look<font color="#E5E5E5"> you'll love it as a hacker as a</font>

329
00:12:26,680 --> 00:12:30,550
someone<font color="#CCCCCC"> who wants security in code it's</font>

330
00:12:28,570 --> 00:12:33,820
the worst thing<font color="#CCCCCC"> you can possibly do</font><font color="#E5E5E5"> we</font>

331
00:12:30,550 --> 00:12:35,920
especially last year<font color="#E5E5E5"> we saw a whole huge</font>

332
00:12:33,820 --> 00:12:37,870
number of<font color="#E5E5E5"> high visibility password hacks</font>

333
00:12:35,920 --> 00:12:39,670
<font color="#E5E5E5">sequel injections steal the</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> or</font>

334
00:12:37,870 --> 00:12:41,860
other database<font color="#E5E5E5"> the whole applications</font>

335
00:12:39,670 --> 00:12:44,860
compromised at that point<font color="#E5E5E5"> so first thing</font>

336
00:12:41,860 --> 00:12:47,770
don't limit<font color="#E5E5E5"> the type</font><font color="#CCCCCC"> of characters or</font>

337
00:12:44,860 --> 00:12:50,200
length of a user password<font color="#E5E5E5"> let users use</font>

338
00:12:47,770 --> 00:12:52,270
password managers and give you giant

339
00:12:50,200 --> 00:12:54,610
passwords and you should be able<font color="#E5E5E5"> to</font>

340
00:12:52,270 --> 00:12:56,470
<font color="#E5E5E5">handle it and</font><font color="#CCCCCC"> when you use proper crypto</font>

341
00:12:54,610 --> 00:12:59,820
<font color="#E5E5E5">the size of what you</font><font color="#CCCCCC"> store in your</font>

342
00:12:56,470 --> 00:13:02,230
<font color="#E5E5E5">database will</font><font color="#CCCCCC"> be the same will be</font><font color="#E5E5E5"> a</font>

343
00:12:59,820 --> 00:13:03,339
consistent<font color="#CCCCCC"> number of bytes regardless of</font>

344
00:13:02,230 --> 00:13:05,620
how long the password is we're using

345
00:13:03,339 --> 00:13:08,380
<font color="#E5E5E5">hashing</font><font color="#CCCCCC"> Lite techniques to store a</font>

346
00:13:05,620 --> 00:13:11,020
password now there's a caveat here and

347
00:13:08,380 --> 00:13:12,910
<font color="#CCCCCC">what</font><font color="#E5E5E5"> anyone see Django get hit with a</font>

348
00:13:11,020 --> 00:13:15,579
<font color="#CCCCCC">denial-of-service major vulnerability</font>

349
00:13:12,910 --> 00:13:18,490
recently<font color="#E5E5E5"> and you won't see that</font><font color="#CCCCCC"> the</font>

350
00:13:15,580 --> 00:13:20,830
Django framework and<font color="#E5E5E5"> Python uses the</font>

351
00:13:18,490 --> 00:13:22,420
algorithm pbkdf2 to store the password

352
00:13:20,830 --> 00:13:24,730
<font color="#E5E5E5">which i think is actually a reasonable</font>

353
00:13:22,420 --> 00:13:25,959
choice<font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of looping factor</font>

354
00:13:24,730 --> 00:13:28,720
<font color="#E5E5E5">that slows it down</font>

355
00:13:25,959 --> 00:13:31,030
<font color="#CCCCCC">the reason they slow it down</font><font color="#E5E5E5"> is to</font>

356
00:13:28,720 --> 00:13:33,070
defend against things like GPU cracking

357
00:13:31,030 --> 00:13:33,370
systems trying<font color="#E5E5E5"> to bit essentially brute</font>

358
00:13:33,070 --> 00:13:34,750
force

359
00:13:33,370 --> 00:13:37,360
<font color="#E5E5E5">your crypto</font><font color="#CCCCCC"> and how your passwords</font>

360
00:13:34,750 --> 00:13:40,839
stored if if your<font color="#E5E5E5"> database is stolen</font>

361
00:13:37,360 --> 00:13:43,330
that's why we do this<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so the agenda</font>

362
00:13:40,839 --> 00:13:45,580
<font color="#E5E5E5">in the past would allow us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have an</font>

363
00:13:43,330 --> 00:13:48,010
infinitely long password and again

364
00:13:45,580 --> 00:13:49,690
pbkdf2 is going to crunch this and

365
00:13:48,010 --> 00:13:52,710
iterate over<font color="#E5E5E5"> this before</font><font color="#CCCCCC"> it creates a</font>

366
00:13:49,690 --> 00:13:55,300
key to store and so in<font color="#CCCCCC"> django we saw</font>

367
00:13:52,710 --> 00:13:57,279
attackers can<font color="#E5E5E5"> provide a multi megabyte</font>

368
00:13:55,300 --> 00:13:58,959
size password and basically

369
00:13:57,279 --> 00:14:00,970
<font color="#E5E5E5">denial-of-service the whole system have</font>

370
00:13:58,960 --> 00:14:03,820
<font color="#E5E5E5">pretty much any django application even</font>

371
00:14:00,970 --> 00:14:05,710
on<font color="#E5E5E5"> heavy-duty hardware was heavily</font>

372
00:14:03,820 --> 00:14:09,339
vulnerable to<font color="#E5E5E5"> this vulnerability</font><font color="#CCCCCC"> so I</font>

373
00:14:05,710 --> 00:14:10,930
say like minimum I'm sorry the Mac the

374
00:14:09,339 --> 00:14:12,520
the minimum password<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be is</font><font color="#E5E5E5"> about</font>

375
00:14:10,930 --> 00:14:14,560
<font color="#E5E5E5">nine characters today in my opinion</font><font color="#CCCCCC"> in</font>

376
00:14:12,520 --> 00:14:17,620
the maximum<font color="#E5E5E5"> around</font><font color="#CCCCCC"> 100 characters maybe</font>

377
00:14:14,560 --> 00:14:19,180
<font color="#E5E5E5">160 at most beyond 160 there's no major</font>

378
00:14:17,620 --> 00:14:21,850
cryptographic benefit it can't be

379
00:14:19,180 --> 00:14:25,239
unlimited<font color="#CCCCCC"> in size other</font><font color="#E5E5E5"> than that let</font>

380
00:14:21,850 --> 00:14:27,250
users use any characters and as<font color="#E5E5E5"> a quick</font>

381
00:14:25,240 --> 00:14:29,589
quick side note<font color="#CCCCCC"> what do you think a</font>

382
00:14:27,250 --> 00:14:31,089
password policy I<font color="#E5E5E5"> think password policy</font>

383
00:14:29,589 --> 00:14:32,800
is almost useless<font color="#E5E5E5"> to be honest with you</font>

384
00:14:31,089 --> 00:14:36,790
<font color="#E5E5E5">what's more effective than password</font>

385
00:14:32,800 --> 00:14:39,490
policy is detecting if a user is<font color="#E5E5E5"> using a</font>

386
00:14:36,790 --> 00:14:41,680
commonly used password we<font color="#E5E5E5"> can go to the</font>

387
00:14:39,490 --> 00:14:43,990
rock<font color="#E5E5E5"> you dumps the LinkedIn dumps the</font>

388
00:14:41,680 --> 00:14:46,209
<font color="#E5E5E5">stony</font><font color="#CCCCCC"> stony</font><font color="#E5E5E5"> PlayStation dumps and see</font>

389
00:14:43,990 --> 00:14:48,730
what the world is<font color="#CCCCCC"> using for passwords</font>

390
00:14:46,209 --> 00:14:50,949
normalize that list<font color="#CCCCCC"> get like a top 1</font>

391
00:14:48,730 --> 00:14:53,620
million password use list<font color="#E5E5E5"> and if a user</font>

392
00:14:50,950 --> 00:14:56,560
<font color="#E5E5E5">ever gives you that</font><font color="#CCCCCC"> password you tell</font>

393
00:14:53,620 --> 00:15:00,040
them seriously<font color="#CCCCCC"> you've you've provided</font>

394
00:14:56,560 --> 00:15:02,020
<font color="#CCCCCC">for us a password that fits our policy</font>

395
00:15:00,040 --> 00:15:03,699
but it's also a<font color="#E5E5E5"> very commonly used</font>

396
00:15:02,020 --> 00:15:05,380
password we're not going<font color="#E5E5E5"> to allow it</font>

397
00:15:03,700 --> 00:15:07,270
<font color="#E5E5E5">please do something else so I think</font>

398
00:15:05,380 --> 00:15:09,550
that's<font color="#E5E5E5"> actually more important</font><font color="#CCCCCC"> than your</font>

399
00:15:07,270 --> 00:15:11,319
traditional password policies<font color="#CCCCCC"> ok so next</font>

400
00:15:09,550 --> 00:15:14,770
<font color="#E5E5E5">we want</font><font color="#CCCCCC"> to use a cryptographically</font>

401
00:15:11,320 --> 00:15:16,390
strong credential specific salt<font color="#CCCCCC"> if we're</font>

402
00:15:14,770 --> 00:15:18,459
<font color="#E5E5E5">using a hashing algorithm which</font><font color="#CCCCCC"> i don't</font>

403
00:15:16,390 --> 00:15:20,709
<font color="#E5E5E5">recommend but</font><font color="#CCCCCC"> bear with me</font><font color="#E5E5E5"> so using a</font>

404
00:15:18,459 --> 00:15:23,170
<font color="#E5E5E5">hashing algorithm if you and</font><font color="#CCCCCC"> I have the</font>

405
00:15:20,709 --> 00:15:24,880
same<font color="#CCCCCC"> password like</font><font color="#E5E5E5"> mine's fluffy bunny</font><font color="#CCCCCC"> 1</font>

406
00:15:23,170 --> 00:15:25,990
for<font color="#E5E5E5"> most of my services like yours right</font>

407
00:15:24,880 --> 00:15:27,910
<font color="#E5E5E5">you used</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> puffy bunny</font><font color="#CCCCCC"> 1 all the time</font>

408
00:15:25,990 --> 00:15:31,330
<font color="#E5E5E5">right just</font><font color="#CCCCCC"> just work</font><font color="#E5E5E5"> with work with me</font>

409
00:15:27,910 --> 00:15:33,760
here<font color="#CCCCCC"> so when we use a hashing</font><font color="#E5E5E5"> algorithm</font>

410
00:15:31,330 --> 00:15:36,940
on<font color="#E5E5E5"> fluffy bunny 1 our hash will be the</font>

411
00:15:33,760 --> 00:15:38,410
same and I can use that<font color="#E5E5E5"> to attack the</font>

412
00:15:36,940 --> 00:15:40,959
<font color="#CCCCCC">system in</font><font color="#E5E5E5"> certain ways if your database</font>

413
00:15:38,410 --> 00:15:43,390
<font color="#E5E5E5">was dumped but if at the time</font><font color="#CCCCCC"> we</font>

414
00:15:40,959 --> 00:15:45,489
register a new account<font color="#CCCCCC"> I'll build a</font>

415
00:15:43,390 --> 00:15:47,189
random<font color="#CCCCCC"> value for you a different random</font>

416
00:15:45,490 --> 00:15:49,620
<font color="#E5E5E5">value for me and I'll stick it</font>

417
00:15:47,190 --> 00:15:52,980
for the<font color="#CCCCCC"> password before we protect it</font>

418
00:15:49,620 --> 00:15:54,660
<font color="#E5E5E5">now we've duplicated</font><font color="#CCCCCC"> how our passwords</font>

419
00:15:52,980 --> 00:15:55,260
are being stored that's the main<font color="#E5E5E5"> purpose</font>

420
00:15:54,660 --> 00:15:57,209
of<font color="#E5E5E5"> assault</font>

421
00:15:55,260 --> 00:15:59,490
it also defeats rainbow tables to some

422
00:15:57,210 --> 00:16:01,680
degree<font color="#E5E5E5"> it's not the real reason</font><font color="#CCCCCC"> for</font>

423
00:15:59,490 --> 00:16:03,210
assault<font color="#CCCCCC"> you</font><font color="#E5E5E5"> saw to deduplicate your</font>

424
00:16:01,680 --> 00:16:05,400
<font color="#E5E5E5">cipher texts of what's being stored for</font>

425
00:16:03,210 --> 00:16:08,280
that password<font color="#CCCCCC"> step number</font><font color="#E5E5E5"> two so number</font>

426
00:16:05,400 --> 00:16:10,319
<font color="#E5E5E5">three use an H max this is my preference</font>

427
00:16:08,280 --> 00:16:12,839
<font color="#E5E5E5">at</font><font color="#CCCCCC"> HM</font><font color="#E5E5E5"> AK although it's a hash</font>

428
00:16:10,320 --> 00:16:15,180
it's an authenticated hash<font color="#E5E5E5"> whenever you</font>

429
00:16:12,840 --> 00:16:17,240
look at crypto basic crypto is usually a

430
00:16:15,180 --> 00:16:19,439
bad<font color="#CCCCCC"> idea you always want to</font><font color="#E5E5E5"> use the</font>

431
00:16:17,240 --> 00:16:21,480
authenticated<font color="#E5E5E5"> version of that crypto</font>

432
00:16:19,440 --> 00:16:23,430
it's always<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> be stronger so we have</font>

433
00:16:21,480 --> 00:16:25,410
<font color="#CCCCCC">H Mac it's basically two rounds</font><font color="#E5E5E5"> of it of</font>

434
00:16:23,430 --> 00:16:28,229
a hash and you stick a key in with each

435
00:16:25,410 --> 00:16:29,910
round that private key must<font color="#CCCCCC"> be long must</font>

436
00:16:28,230 --> 00:16:33,090
be cryptographically sound must<font color="#E5E5E5"> be</font>

437
00:16:29,910 --> 00:16:35,640
stored<font color="#E5E5E5"> in a sound way but the problem is</font>

438
00:16:33,090 --> 00:16:38,070
key management<font color="#E5E5E5"> is ridiculously difficult</font>

439
00:16:35,640 --> 00:16:40,590
<font color="#E5E5E5">in most applications</font><font color="#CCCCCC"> so you want to use</font>

440
00:16:38,070 --> 00:16:43,740
something like an HSM<font color="#E5E5E5"> and even more</font>

441
00:16:40,590 --> 00:16:46,830
important<font color="#CCCCCC"> that an HSM is the</font><font color="#E5E5E5"> isolation</font>

442
00:16:43,740 --> 00:16:48,360
of this cryptographic utility<font color="#E5E5E5"> so in my</font>

443
00:16:46,830 --> 00:16:51,360
application<font color="#CCCCCC"> I don't believe you should</font>

444
00:16:48,360 --> 00:16:53,580
<font color="#CCCCCC">be hard coding how the H</font><font color="#E5E5E5"> Mac works or</font>

445
00:16:51,360 --> 00:16:56,190
have that<font color="#E5E5E5"> your application retrieve a</font>

446
00:16:53,580 --> 00:16:57,660
key<font color="#E5E5E5"> from an HSM even better is having a</font>

447
00:16:56,190 --> 00:17:00,180
separate web service<font color="#E5E5E5"> and all it does is</font>

448
00:16:57,660 --> 00:17:03,089
<font color="#CCCCCC">it takes a string</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> salting password</font>

449
00:17:00,180 --> 00:17:05,490
grabs the key from<font color="#E5E5E5"> an HSM runs the H Mac</font>

450
00:17:03,090 --> 00:17:08,010
and spits out the<font color="#E5E5E5"> hash</font><font color="#CCCCCC"> and isolate that</font>

451
00:17:05,490 --> 00:17:09,839
to a separate web service<font color="#E5E5E5"> now even if</font>

452
00:17:08,010 --> 00:17:11,609
your<font color="#CCCCCC"> application is hacked</font><font color="#E5E5E5"> there's no</font>

453
00:17:09,839 --> 00:17:14,399
way to access the key which is what's

454
00:17:11,609 --> 00:17:16,708
needed<font color="#CCCCCC"> to reverse</font><font color="#E5E5E5"> your password storage</font>

455
00:17:14,400 --> 00:17:18,959
mechanism now that's well and<font color="#E5E5E5"> good it's</font>

456
00:17:16,709 --> 00:17:22,140
<font color="#CCCCCC">also scales</font><font color="#E5E5E5"> because it's H</font><font color="#CCCCCC"> Mac's are</font>

457
00:17:18,959 --> 00:17:24,360
super fast but<font color="#E5E5E5"> very many companies don't</font>

458
00:17:22,140 --> 00:17:25,740
have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> manage that key and</font>

459
00:17:24,359 --> 00:17:27,149
very compliment many companies don't

460
00:17:25,740 --> 00:17:28,860
<font color="#CCCCCC">want to take the hit of building a</font>

461
00:17:27,150 --> 00:17:30,900
separate<font color="#E5E5E5"> service just for password</font>

462
00:17:28,860 --> 00:17:33,929
storage<font color="#E5E5E5"> so if you want more of a quick</font>

463
00:17:30,900 --> 00:17:36,570
advice for with less scalability needs

464
00:17:33,930 --> 00:17:38,790
but I recommend<font color="#CCCCCC"> you use pbkdf2 or</font><font color="#E5E5E5"> s</font>

465
00:17:36,570 --> 00:17:41,399
crypt or<font color="#CCCCCC"> B</font><font color="#E5E5E5"> crypt these are essentially</font>

466
00:17:38,790 --> 00:17:44,520
adaptive hashes<font color="#CCCCCC"> that you they are you</font>

467
00:17:41,400 --> 00:17:46,140
give it a<font color="#E5E5E5"> string it spits back a hash or</font>

468
00:17:44,520 --> 00:17:48,690
<font color="#CCCCCC">a key that you can put in the</font><font color="#E5E5E5"> database</font>

469
00:17:46,140 --> 00:17:50,850
<font color="#E5E5E5">then when the user logs in you have</font>

470
00:17:48,690 --> 00:17:52,440
their<font color="#E5E5E5"> username look up their salt grab</font>

471
00:17:50,850 --> 00:17:54,719
their password<font color="#E5E5E5"> run this protection</font>

472
00:17:52,440 --> 00:17:57,480
algorithm and see if what that returns

473
00:17:54,720 --> 00:17:59,429
is the<font color="#E5E5E5"> same as what you've stored in</font>

474
00:17:57,480 --> 00:18:00,470
your database<font color="#E5E5E5"> the problem with these</font>

475
00:17:59,429 --> 00:18:02,870
algorithms though

476
00:18:00,470 --> 00:18:04,840
if you<font color="#E5E5E5"> there's a work factor which slows</font>

477
00:18:02,870 --> 00:18:06,770
it down<font color="#E5E5E5"> we slow it</font><font color="#CCCCCC"> down to defeat</font>

478
00:18:04,840 --> 00:18:09,110
<font color="#CCCCCC">supercomputers trying to crack this</font>

479
00:18:06,770 --> 00:18:11,510
system you<font color="#E5E5E5"> can build a GPU cracking rig</font>

480
00:18:09,110 --> 00:18:13,610
<font color="#E5E5E5">that does about 50 billion hashes per</font>

481
00:18:11,510 --> 00:18:15,320
<font color="#E5E5E5">second and trying to crack a system like</font>

482
00:18:13,610 --> 00:18:16,879
this<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can build that for a couple</font>

483
00:18:15,320 --> 00:18:18,590
<font color="#E5E5E5">grand and that's only gonna get worse</font>

484
00:18:16,880 --> 00:18:21,140
over time<font color="#CCCCCC"> so you really</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to have</font>

485
00:18:18,590 --> 00:18:23,178
<font color="#CCCCCC">this work</font><font color="#E5E5E5"> factor be really high making</font>

486
00:18:21,140 --> 00:18:25,159
the algorithm really<font color="#E5E5E5"> slow</font><font color="#CCCCCC"> for them to be</font>

487
00:18:23,179 --> 00:18:27,590
effective<font color="#CCCCCC"> how many</font><font color="#E5E5E5"> time I think</font><font color="#CCCCCC"> who</font>

488
00:18:25,159 --> 00:18:29,929
here's a developer by the way how many

489
00:18:27,590 --> 00:18:31,668
<font color="#E5E5E5">times have you been told that feature</font>

490
00:18:29,929 --> 00:18:34,159
<font color="#E5E5E5">you just built man that's way too fast</font>

491
00:18:31,669 --> 00:18:36,679
<font color="#CCCCCC">it's performing way too fast can you</font>

492
00:18:34,159 --> 00:18:38,630
<font color="#E5E5E5">really slow that down for us dude slow</font>

493
00:18:36,679 --> 00:18:40,549
that down<font color="#E5E5E5"> we don't get asked</font><font color="#CCCCCC"> to do this</font>

494
00:18:38,630 --> 00:18:43,010
except when it comes<font color="#E5E5E5"> to password storage</font>

495
00:18:40,549 --> 00:18:44,600
<font color="#E5E5E5">and I think it's really bad</font><font color="#CCCCCC"> advice in a</font>

496
00:18:43,010 --> 00:18:46,370
<font color="#E5E5E5">situation where you need to scale</font>

497
00:18:44,600 --> 00:18:48,289
<font color="#E5E5E5">because what</font><font color="#CCCCCC"> people do is they'll use</font>

498
00:18:46,370 --> 00:18:50,719
<font color="#E5E5E5">bcrypt</font><font color="#CCCCCC"> which is a common piece of advice</font>

499
00:18:48,289 --> 00:18:52,520
then they try<font color="#E5E5E5"> to scale so they keep</font>

500
00:18:50,720 --> 00:18:55,549
reducing<font color="#CCCCCC"> the work factor to make</font><font color="#E5E5E5"> it run</font>

501
00:18:52,520 --> 00:18:58,039
<font color="#CCCCCC">faster which defeats</font><font color="#E5E5E5"> the point of it so</font>

502
00:18:55,549 --> 00:19:00,230
if you're<font color="#CCCCCC"> getting started</font><font color="#E5E5E5"> use these if</font>

503
00:18:58,039 --> 00:19:02,990
you really want a heavy-duty<font color="#E5E5E5"> really</font>

504
00:19:00,230 --> 00:19:04,460
secure scalable system you're better off

505
00:19:02,990 --> 00:19:06,380
using an<font color="#CCCCCC"> HTML all right so that's</font>

506
00:19:04,460 --> 00:19:08,600
password<font color="#E5E5E5"> storage it's a little piece of</font>

507
00:19:06,380 --> 00:19:09,950
<font color="#E5E5E5">authentication where did my image go</font>

508
00:19:08,600 --> 00:19:11,059
<font color="#E5E5E5">World of Warcraft</font><font color="#CCCCCC"> will just</font><font color="#E5E5E5"> get this we</font>

509
00:19:09,950 --> 00:19:13,100
know about multi-factor

510
00:19:11,059 --> 00:19:14,360
what does multi-factor defeat it defeats

511
00:19:13,100 --> 00:19:16,490
a brute force<font color="#E5E5E5"> attack that's the whole</font>

512
00:19:14,360 --> 00:19:19,939
point of multi-factor<font color="#E5E5E5"> and also when</font>

513
00:19:16,490 --> 00:19:21,620
you're<font color="#E5E5E5"> using multi-factor</font><font color="#CCCCCC"> you're when</font>

514
00:19:19,940 --> 00:19:23,450
you're using multi-factor your need for

515
00:19:21,620 --> 00:19:24,949
<font color="#E5E5E5">deeper password storage is also less</font>

516
00:19:23,450 --> 00:19:27,880
important<font color="#E5E5E5"> because it's a changing</font>

517
00:19:24,950 --> 00:19:31,130
multi-factor makes it a changing

518
00:19:27,880 --> 00:19:34,730
changing password over<font color="#CCCCCC"> time I think SMS</font>

519
00:19:31,130 --> 00:19:37,159
is horrible for multi-factor though and

520
00:19:34,730 --> 00:19:39,080
most most systems are using it<font color="#E5E5E5"> we have</font>

521
00:19:37,159 --> 00:19:42,679
all different<font color="#E5E5E5"> kinds of ways</font><font color="#CCCCCC"> to attack</font>

522
00:19:39,080 --> 00:19:44,629
SMS<font color="#E5E5E5"> like the SMS swoop fraud we have of</font>

523
00:19:42,679 --> 00:19:47,150
<font color="#E5E5E5">different</font><font color="#CCCCCC"> zip most patching at the</font>

524
00:19:44,630 --> 00:19:49,700
kernel<font color="#CCCCCC"> level</font><font color="#E5E5E5"> to steal SMS we have</font>

525
00:19:47,150 --> 00:19:52,640
different SMS swallowing attacks against

526
00:19:49,700 --> 00:19:54,559
<font color="#E5E5E5">Android so SMS may reduce the</font><font color="#CCCCCC"> risk of</font>

527
00:19:52,640 --> 00:19:57,230
authentication problems<font color="#E5E5E5"> but it doesn't</font>

528
00:19:54,559 --> 00:19:59,330
really make them now the way to do

529
00:19:57,230 --> 00:20:01,880
multi-factor is what is what we saw

530
00:19:59,330 --> 00:20:03,860
<font color="#CCCCCC">Twitter do recently</font><font color="#E5E5E5"> they're not storing</font>

531
00:20:01,880 --> 00:20:06,500
the key on their servers<font color="#E5E5E5"> their</font>

532
00:20:03,860 --> 00:20:08,689
requirement was even if<font color="#E5E5E5"> our servers get</font>

533
00:20:06,500 --> 00:20:10,549
hacked<font color="#CCCCCC"> I don't want the</font><font color="#E5E5E5"> multi-factor</font>

534
00:20:08,690 --> 00:20:13,100
<font color="#E5E5E5">mechanism that a lot</font><font color="#CCCCCC"> of the celebrities</font>

535
00:20:10,549 --> 00:20:14,929
who build who make our service valuable

536
00:20:13,100 --> 00:20:16,280
<font color="#CCCCCC">I don't want them to</font><font color="#E5E5E5"> get hacked</font><font color="#CCCCCC"> I want I</font>

537
00:20:14,929 --> 00:20:18,559
want<font color="#E5E5E5"> to be able to recover from</font><font color="#CCCCCC"> that</font>

538
00:20:16,280 --> 00:20:21,139
event<font color="#CCCCCC"> so the private key is created on</font>

539
00:20:18,559 --> 00:20:23,600
<font color="#E5E5E5">the</font><font color="#CCCCCC"> device it's basic asymmetric crypto</font>

540
00:20:21,140 --> 00:20:25,490
and<font color="#E5E5E5"> it's never stored in the actual</font>

541
00:20:23,600 --> 00:20:27,649
servers of<font color="#CCCCCC"> Twitter so you can read more</font>

542
00:20:25,490 --> 00:20:29,150
<font color="#CCCCCC">about that over at a Ars Technica did a</font>

543
00:20:27,650 --> 00:20:31,309
really<font color="#E5E5E5"> good article that talks about the</font>

544
00:20:29,150 --> 00:20:33,650
deep technical aspects of Twitter's new

545
00:20:31,309 --> 00:20:35,928
<font color="#E5E5E5">rollout</font><font color="#CCCCCC"> it's push notification it's the</font>

546
00:20:33,650 --> 00:20:37,910
key is only on the device<font color="#E5E5E5"> that's how we</font>

547
00:20:35,929 --> 00:20:40,400
do multi-factor in my opinion in a

548
00:20:37,910 --> 00:20:42,230
consumer website at great scale<font color="#E5E5E5"> next</font>

549
00:20:40,400 --> 00:20:44,480
forgot password it's basically<font color="#CCCCCC"> I mean</font>

550
00:20:42,230 --> 00:20:46,190
we're<font color="#E5E5E5"> talking about authentication best</font>

551
00:20:44,480 --> 00:20:49,299
practices that we need developers to

552
00:20:46,190 --> 00:20:51,860
embrace so forgot password is a another

553
00:20:49,299 --> 00:20:55,179
multi-factor workflow a lot of people

554
00:20:51,860 --> 00:20:58,250
use<font color="#CCCCCC"> email</font><font color="#E5E5E5"> to send</font><font color="#CCCCCC"> a password reset link</font>

555
00:20:55,179 --> 00:21:02,330
how good is email<font color="#E5E5E5"> from a security point</font>

556
00:20:58,250 --> 00:21:04,760
of view folks it's<font color="#E5E5E5"> not at all so I like</font>

557
00:21:02,330 --> 00:21:06,470
to<font color="#E5E5E5"> forgot work forgot password workflows</font>

558
00:21:04,760 --> 00:21:08,330
<font color="#CCCCCC">that we see in the banking industry now</font>

559
00:21:06,470 --> 00:21:11,210
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> asking for identity information</font>

560
00:21:08,330 --> 00:21:12,439
<font color="#CCCCCC">up front account number email date of</font>

561
00:21:11,210 --> 00:21:15,820
birth like two or three<font color="#E5E5E5"> questions</font>

562
00:21:12,440 --> 00:21:18,289
<font color="#CCCCCC">they'll</font><font color="#E5E5E5"> then require you to do a secure</font>

563
00:21:15,820 --> 00:21:19,970
<font color="#CCCCCC">good security question</font><font color="#E5E5E5"> there's no such</font>

564
00:21:18,289 --> 00:21:22,039
thing as<font color="#E5E5E5"> a great security question we</font>

565
00:21:19,970 --> 00:21:24,110
have some good ones<font color="#CCCCCC"> we have a chichi and</font>

566
00:21:22,039 --> 00:21:25,610
<font color="#CCCCCC">Olas that talks about how</font><font color="#E5E5E5"> to figure out</font>

567
00:21:24,110 --> 00:21:27,770
how<font color="#E5E5E5"> to build good security questions</font>

568
00:21:25,610 --> 00:21:29,809
<font color="#E5E5E5">once that's answered we want to send</font>

569
00:21:27,770 --> 00:21:32,408
them<font color="#CCCCCC"> a</font><font color="#E5E5E5"> token</font><font color="#CCCCCC"> out of banned SMS is the</font>

570
00:21:29,809 --> 00:21:35,090
worst<font color="#E5E5E5"> a dedicated token is best look</font>

571
00:21:32,409 --> 00:21:36,830
PayPal actually provides you with a like

572
00:21:35,090 --> 00:21:38,149
a credit<font color="#CCCCCC"> card</font><font color="#E5E5E5"> that's actually a</font>

573
00:21:36,830 --> 00:21:40,370
multi-factor token with a little

574
00:21:38,150 --> 00:21:42,650
<font color="#E5E5E5">computer</font><font color="#CCCCCC"> in it</font><font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> do multi fact</font>

575
00:21:40,370 --> 00:21:44,629
dedicated multi-factor tokens<font color="#E5E5E5"> for</font>

576
00:21:42,650 --> 00:21:46,640
pennies on<font color="#CCCCCC"> the user it's it's come down</font>

577
00:21:44,630 --> 00:21:49,100
<font color="#E5E5E5">in that level and price so we have ways</font>

578
00:21:46,640 --> 00:21:51,730
to<font color="#E5E5E5"> pull it off and then we let the user</font>

579
00:21:49,100 --> 00:21:55,370
reset their password so even if email is

580
00:21:51,730 --> 00:21:57,140
compromised multi-factor will not become

581
00:21:55,370 --> 00:21:59,959
<font color="#E5E5E5">fully compromised with a mechanism of</font>

582
00:21:57,140 --> 00:22:03,590
this<font color="#CCCCCC"> nature all of my</font><font color="#E5E5E5"> pictures</font>

583
00:21:59,960 --> 00:22:05,360
disappeared for some reason they took

584
00:22:03,590 --> 00:22:06,889
the hit to upgrade to Mavericks here so

585
00:22:05,360 --> 00:22:08,959
maybe<font color="#E5E5E5"> not the best choice</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> just</font>

586
00:22:06,890 --> 00:22:11,419
move on let's talk<font color="#E5E5E5"> about let's go into</font>

587
00:22:08,960 --> 00:22:13,190
access access control<font color="#E5E5E5"> and a little bit</font>

588
00:22:11,419 --> 00:22:16,400
more depth here this is again<font color="#E5E5E5"> one of the</font>

589
00:22:13,190 --> 00:22:18,679
found<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> foundation defenses we need for</font>

590
00:22:16,400 --> 00:22:22,130
a good<font color="#CCCCCC"> application the secure</font>

591
00:22:18,679 --> 00:22:24,140
application so first we<font color="#E5E5E5"> have access</font>

592
00:22:22,130 --> 00:22:25,480
control anti-patterns the<font color="#CCCCCC"> hard-coded</font>

593
00:22:24,140 --> 00:22:27,910
<font color="#E5E5E5">role checks in code</font>

594
00:22:25,480 --> 00:22:30,880
lack of<font color="#CCCCCC"> a centralized access control</font>

595
00:22:27,910 --> 00:22:33,490
mechanism untrusted data driving

596
00:22:30,880 --> 00:22:35,980
identity<font color="#E5E5E5"> parts of the access control</font>

597
00:22:33,490 --> 00:22:38,049
decision or a lack of addressing

598
00:22:35,980 --> 00:22:40,059
horizontal data contextual access

599
00:22:38,049 --> 00:22:42,010
control if it's done<font color="#E5E5E5"> at all access</font>

600
00:22:40,059 --> 00:22:44,129
<font color="#CCCCCC">control logic</font><font color="#E5E5E5"> that needs to be manually</font>

601
00:22:42,010 --> 00:22:46,570
added to every<font color="#E5E5E5"> single piece of code</font>

602
00:22:44,130 --> 00:22:48,250
<font color="#E5E5E5">access control that sticky per session</font>

603
00:22:46,570 --> 00:22:50,049
where even if<font color="#E5E5E5"> I</font><font color="#CCCCCC"> change a user's role</font>

604
00:22:48,250 --> 00:22:52,390
<font color="#E5E5E5">it's not going to take</font><font color="#CCCCCC"> effect until they</font>

605
00:22:50,049 --> 00:22:54,370
log off and log in or access control

606
00:22:52,390 --> 00:22:56,950
that<font color="#CCCCCC"> requires me to</font><font color="#E5E5E5"> configure every user</font>

607
00:22:54,370 --> 00:22:59,500
<font color="#E5E5E5">on a user by user basis these are anti</font>

608
00:22:56,950 --> 00:23:01,750
patterns that lead<font color="#E5E5E5"> to poor</font><font color="#CCCCCC"> access</font>

609
00:22:59,500 --> 00:23:03,880
control design<font color="#E5E5E5"> and here's the same list</font>

610
00:23:01,750 --> 00:23:07,540
in a more positive fashion<font color="#CCCCCC"> we want to</font>

611
00:23:03,880 --> 00:23:10,000
<font color="#E5E5E5">build a centralized mechanism that does</font>

612
00:23:07,540 --> 00:23:13,240
this like we saw<font color="#E5E5E5"> an Apache</font><font color="#CCCCCC"> Shiro</font><font color="#E5E5E5"> we want</font>

613
00:23:10,000 --> 00:23:14,830
to code to the activity not the user or

614
00:23:13,240 --> 00:23:17,260
<font color="#E5E5E5">the role we don't care who the user is</font>

615
00:23:14,830 --> 00:23:19,510
<font color="#E5E5E5">we care if they're allowed to access a</font>

616
00:23:17,260 --> 00:23:21,580
<font color="#E5E5E5">certain feature a piece of data</font><font color="#CCCCCC"> I like</font>

617
00:23:19,510 --> 00:23:24,160
to also<font color="#E5E5E5"> build access control as a filter</font>

618
00:23:21,580 --> 00:23:29,049
<font color="#E5E5E5">where every request must go through this</font>

619
00:23:24,160 --> 00:23:30,520
<font color="#E5E5E5">filter and by default</font><font color="#CCCCCC"> we should deny we</font>

620
00:23:29,049 --> 00:23:32,320
should<font color="#E5E5E5"> deny by default until we've</font>

621
00:23:30,520 --> 00:23:35,260
configured that feature with a certain

622
00:23:32,320 --> 00:23:37,659
<font color="#E5E5E5">policy we also want to change these</font>

623
00:23:35,260 --> 00:23:39,879
entitlements<font color="#E5E5E5"> the user actual permissions</font>

624
00:23:37,660 --> 00:23:42,640
<font color="#E5E5E5">a user has in real time if I change a</font>

625
00:23:39,880 --> 00:23:44,980
user's role that next request<font color="#E5E5E5"> these that</font>

626
00:23:42,640 --> 00:23:46,179
new permission set should<font color="#E5E5E5"> take effect we</font>

627
00:23:44,980 --> 00:23:49,059
want to also<font color="#E5E5E5"> design this in a</font>

628
00:23:46,179 --> 00:23:51,429
<font color="#E5E5E5">standardized standardized way we also</font>

629
00:23:49,059 --> 00:23:53,410
<font color="#CCCCCC">add for data</font><font color="#E5E5E5"> contextual access control</font>

630
00:23:51,429 --> 00:23:55,090
like we saw in the<font color="#E5E5E5"> Winnebago example we</font>

631
00:23:53,410 --> 00:23:57,340
also want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> build grouping for users</font>

632
00:23:55,090 --> 00:23:58,809
and<font color="#CCCCCC"> administrators and features users</font>

633
00:23:57,340 --> 00:24:00,490
and features to make<font color="#E5E5E5"> it easy to</font>

634
00:23:58,809 --> 00:24:02,290
configure<font color="#E5E5E5"> a large classes</font><font color="#CCCCCC"> of users at</font>

635
00:24:00,490 --> 00:24:05,590
<font color="#CCCCCC">once I also think</font><font color="#E5E5E5"> of content security</font>

636
00:24:02,290 --> 00:24:09,220
policy<font color="#E5E5E5"> as an access control kind of</font>

637
00:24:05,590 --> 00:24:10,809
standard so content security policy says

638
00:24:09,220 --> 00:24:13,030
I'm gonna<font color="#E5E5E5"> take all this is a cross-site</font>

639
00:24:10,809 --> 00:24:15,129
scripting defensive mechanism<font color="#E5E5E5"> it's built</font>

640
00:24:13,030 --> 00:24:18,490
into<font color="#CCCCCC"> the browser it's gonna take a</font><font color="#E5E5E5"> few</font>

641
00:24:15,130 --> 00:24:20,530
years<font color="#CCCCCC"> before a large</font><font color="#E5E5E5"> number of users</font>

642
00:24:18,490 --> 00:24:22,150
have browsers<font color="#CCCCCC"> that support content</font>

643
00:24:20,530 --> 00:24:24,730
security policy in<font color="#E5E5E5"> the standard way</font>

644
00:24:22,150 --> 00:24:27,429
<font color="#E5E5E5">we've only seen it since chrome 25 or</font>

645
00:24:24,730 --> 00:24:29,890
later<font color="#E5E5E5"> Firefox 23 or later and ie 10 or</font>

646
00:24:27,429 --> 00:24:32,380
later<font color="#E5E5E5"> and they all have different kinds</font>

647
00:24:29,890 --> 00:24:34,540
of way they implement CSP content

648
00:24:32,380 --> 00:24:37,179
security policy 1.1 is just<font color="#E5E5E5"> coming out</font>

649
00:24:34,540 --> 00:24:38,020
<font color="#E5E5E5">now it's just becoming resolved and what</font>

650
00:24:37,179 --> 00:24:38,710
we have to do is<font color="#CCCCCC"> take all your</font>

651
00:24:38,020 --> 00:24:40,660
<font color="#CCCCCC">JavaScript</font>

652
00:24:38,710 --> 00:24:43,030
put it in a separate<font color="#E5E5E5"> javascript file</font>

653
00:24:40,660 --> 00:24:44,710
then<font color="#CCCCCC"> you set a policy in a response</font>

654
00:24:43,030 --> 00:24:47,530
header then if any other JavaScript

655
00:24:44,710 --> 00:24:50,050
<font color="#CCCCCC">enters your application it's rejected by</font>

656
00:24:47,530 --> 00:24:52,660
default<font color="#E5E5E5"> this will stop large classes of</font>

657
00:24:50,050 --> 00:24:55,000
reflective and stored XSS<font color="#E5E5E5"> we need to</font>

658
00:24:52,660 --> 00:24:57,730
wait for<font color="#CCCCCC"> the standard to solidify it for</font>

659
00:24:55,000 --> 00:24:59,770
one one and four<font color="#CCCCCC"> browsers for more users</font>

660
00:24:57,730 --> 00:25:01,830
to<font color="#CCCCCC"> use browsers that support to standard</font>

661
00:24:59,770 --> 00:25:04,270
<font color="#E5E5E5">I see this as a kind of access control</font>

662
00:25:01,830 --> 00:25:05,350
<font color="#CCCCCC">let's talk about query parameterization</font>

663
00:25:04,270 --> 00:25:07,480
next hopefully<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> something you're</font>

664
00:25:05,350 --> 00:25:09,370
all very familiar<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the number one</font>

665
00:25:07,480 --> 00:25:12,040
way<font color="#E5E5E5"> web apps get attacked in my opinion</font>

666
00:25:09,370 --> 00:25:13,989
<font color="#E5E5E5">a sequel injection</font><font color="#CCCCCC"> it's and it's</font><font color="#E5E5E5"> brutal</font>

667
00:25:12,040 --> 00:25:16,600
<font color="#E5E5E5">it's not a hit on an individual user</font>

668
00:25:13,990 --> 00:25:18,910
<font color="#CCCCCC">it's a hit</font><font color="#E5E5E5"> on the whole application</font><font color="#CCCCCC"> and</font>

669
00:25:16,600 --> 00:25:20,770
the kind<font color="#E5E5E5"> of damage we can do is that is</font>

670
00:25:18,910 --> 00:25:22,570
off<font color="#E5E5E5"> the chart we can steal any data we</font>

671
00:25:20,770 --> 00:25:24,250
can modify<font color="#CCCCCC"> any data we can also do</font>

672
00:25:22,570 --> 00:25:27,100
command injection against the<font color="#CCCCCC"> backend</font>

673
00:25:24,250 --> 00:25:29,830
database<font color="#CCCCCC"> umm I traditionally have not</font>

674
00:25:27,100 --> 00:25:32,320
<font color="#CCCCCC">been a fan of using</font><font color="#E5E5E5"> input validation or</font>

675
00:25:29,830 --> 00:25:35,199
firewalls to<font color="#E5E5E5"> stop sequel injection the</font>

676
00:25:32,320 --> 00:25:38,260
research I've seen from<font color="#E5E5E5"> Nick gall breath</font>

677
00:25:35,200 --> 00:25:40,150
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Zane</font><font color="#E5E5E5"> Lackey from Etsy is really</font>

678
00:25:38,260 --> 00:25:43,210
changing<font color="#CCCCCC"> my mind on</font><font color="#E5E5E5"> this there are ways</font>

679
00:25:40,150 --> 00:25:45,760
to do input validation<font color="#CCCCCC"> to heavily reduce</font>

680
00:25:43,210 --> 00:25:47,260
the risk of sequel injection<font color="#E5E5E5"> but if you</font>

681
00:25:45,760 --> 00:25:49,840
want to fix the<font color="#CCCCCC"> problem</font><font color="#E5E5E5"> we have to</font>

682
00:25:47,260 --> 00:25:51,910
parameterize<font color="#CCCCCC"> our queries</font><font color="#E5E5E5"> an attack as</font>

683
00:25:49,840 --> 00:25:54,070
simple as<font color="#E5E5E5"> this can take down a</font><font color="#CCCCCC"> website</font>

684
00:25:51,910 --> 00:25:56,080
<font color="#E5E5E5">we have an update statement</font><font color="#CCCCCC"> we're trying</font>

685
00:25:54,070 --> 00:25:58,179
to<font color="#CCCCCC"> update a list of users with that</font>

686
00:25:56,080 --> 00:26:00,970
simple<font color="#E5E5E5"> single quote semicolon we can end</font>

687
00:25:58,180 --> 00:26:01,570
the query early and bang<font color="#E5E5E5"> we</font><font color="#CCCCCC"> is in scoops</font>

688
00:26:00,970 --> 00:26:04,840
what

689
00:26:01,570 --> 00:26:08,520
sorry Mavericks<font color="#CCCCCC"> hey</font><font color="#E5E5E5"> Mavericks go Apple</font>

690
00:26:04,840 --> 00:26:11,379
<font color="#E5E5E5">love you Apple</font><font color="#CCCCCC"> come on there we</font><font color="#E5E5E5"> go</font>

691
00:26:08,520 --> 00:26:13,750
update<font color="#E5E5E5"> users set email is quote quote</font>

692
00:26:11,380 --> 00:26:15,730
semicolon<font color="#E5E5E5"> that's what the attack does</font>

693
00:26:13,750 --> 00:26:17,650
and instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> updating the email</font>

694
00:26:15,730 --> 00:26:19,090
address<font color="#E5E5E5"> from one user it now empties</font>

695
00:26:17,650 --> 00:26:20,890
email address for<font color="#E5E5E5"> the whole database</font>

696
00:26:19,090 --> 00:26:22,899
<font color="#E5E5E5">because of two characters we have got to</font>

697
00:26:20,890 --> 00:26:24,760
take<font color="#E5E5E5"> this seriously</font><font color="#CCCCCC"> the way you</font><font color="#E5E5E5"> stop</font>

698
00:26:22,900 --> 00:26:26,470
sequel injection is with query

699
00:26:24,760 --> 00:26:29,140
parameterization and there are a<font color="#E5E5E5"> lot of</font>

700
00:26:26,470 --> 00:26:31,410
ways to do<font color="#CCCCCC"> it every language that drives</font>

701
00:26:29,140 --> 00:26:33,550
the web<font color="#CCCCCC"> offers this query</font>

702
00:26:31,410 --> 00:26:36,340
parameterization interface we have<font color="#E5E5E5"> it in</font>

703
00:26:33,550 --> 00:26:39,010
PHP<font color="#CCCCCC"> we have placeholders and</font><font color="#E5E5E5"> we have</font>

704
00:26:36,340 --> 00:26:41,320
buying statements<font color="#E5E5E5"> to bind our untrusted</font>

705
00:26:39,010 --> 00:26:43,210
data into those<font color="#CCCCCC"> placeholders we have it</font>

706
00:26:41,320 --> 00:26:45,550
in dotnet same thing<font color="#E5E5E5"> we have our</font>

707
00:26:43,210 --> 00:26:47,560
placeholders<font color="#CCCCCC"> app name and password</font><font color="#E5E5E5"> and</font>

708
00:26:45,550 --> 00:26:51,520
we have our binding statement<font color="#CCCCCC"> in the</font>

709
00:26:47,560 --> 00:26:52,658
name and password text<font color="#E5E5E5"> boxes and so Bang</font>

710
00:26:51,520 --> 00:26:54,039
query<font color="#CCCCCC"> pram</font>

711
00:26:52,659 --> 00:26:55,479
sequel injection<font color="#E5E5E5"> goes away we have the</font>

712
00:26:54,039 --> 00:26:58,119
same thing<font color="#CCCCCC"> in Java both the</font>

713
00:26:55,479 --> 00:27:00,399
<font color="#E5E5E5">preparedstatement class and even</font><font color="#CCCCCC"> in hql</font>

714
00:26:58,119 --> 00:27:02,289
<font color="#E5E5E5">we have binding statements who knows</font>

715
00:27:00,399 --> 00:27:04,869
<font color="#E5E5E5">about this already who is very familiar</font>

716
00:27:02,289 --> 00:27:06,729
<font color="#CCCCCC">query parameterization</font><font color="#E5E5E5"> why is this a</font>

717
00:27:04,869 --> 00:27:08,889
separate topic<font color="#CCCCCC"> why am</font><font color="#E5E5E5"> I not putting this</font>

718
00:27:06,729 --> 00:27:10,899
under encoding or why am<font color="#E5E5E5"> I not putting</font>

719
00:27:08,889 --> 00:27:13,599
this under validation<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's</font>

720
00:27:10,899 --> 00:27:14,439
neither<font color="#E5E5E5"> of those anybody know what query</font>

721
00:27:13,599 --> 00:27:16,059
parametrization

722
00:27:14,440 --> 00:27:20,859
actually does to protect<font color="#E5E5E5"> your web</font>

723
00:27:16,059 --> 00:27:22,779
application<font color="#E5E5E5"> what happened what happens</font>

724
00:27:20,859 --> 00:27:25,059
<font color="#E5E5E5">how is that done though at the database</font>

725
00:27:22,779 --> 00:27:26,799
level<font color="#E5E5E5"> what</font><font color="#CCCCCC"> happens is that when you</font>

726
00:27:25,059 --> 00:27:28,570
build<font color="#CCCCCC"> the first statement with the</font>

727
00:27:26,799 --> 00:27:31,389
question marks that's your placeholders

728
00:27:28,570 --> 00:27:33,369
<font color="#E5E5E5">that gets sent to the database before</font>

729
00:27:31,389 --> 00:27:36,129
<font color="#CCCCCC">the untrusted data is sent to the</font>

730
00:27:33,369 --> 00:27:38,320
database<font color="#E5E5E5"> the database sees that query</font>

731
00:27:36,129 --> 00:27:40,178
with the question marks and builds a

732
00:27:38,320 --> 00:27:42,309
query plan it<font color="#CCCCCC"> could</font><font color="#E5E5E5"> free</font><font color="#CCCCCC"> compiles the</font>

733
00:27:40,179 --> 00:27:44,320
query and builds a query plan in the

734
00:27:42,309 --> 00:27:46,090
database in terms of how the database<font color="#E5E5E5"> is</font>

735
00:27:44,320 --> 00:27:47,950
<font color="#E5E5E5">going to retrieve this data build all</font>

736
00:27:46,090 --> 00:27:50,799
the boolean<font color="#E5E5E5"> logic tree to do this and</font>

737
00:27:47,950 --> 00:27:53,080
now that that<font color="#E5E5E5"> now that that query plan</font>

738
00:27:50,799 --> 00:27:54,700
is built<font color="#E5E5E5"> for that query then the</font>

739
00:27:53,080 --> 00:27:56,978
untrusted<font color="#CCCCCC"> data is sent in where the</font>

740
00:27:54,700 --> 00:27:59,619
placeholders are the query plan is built

741
00:27:56,979 --> 00:28:01,749
<font color="#CCCCCC">already</font><font color="#E5E5E5"> the structure to retrieve that</font>

742
00:27:59,619 --> 00:28:04,059
data is already compiled so there's no

743
00:28:01,749 --> 00:28:07,749
way an injection attack can manipulate

744
00:28:04,059 --> 00:28:09,940
that that data traversal tree and query

745
00:28:07,749 --> 00:28:11,739
an intrical injection goes<font color="#E5E5E5"> away we've</font>

746
00:28:09,940 --> 00:28:13,509
had this<font color="#E5E5E5"> 20 years we've had this defense</font>

747
00:28:11,739 --> 00:28:15,909
<font color="#E5E5E5">for almost 20 years</font><font color="#CCCCCC"> early</font><font color="#E5E5E5"> versions of</font>

748
00:28:13,509 --> 00:28:17,830
Perl had this kind of defensive feature

749
00:28:15,909 --> 00:28:20,859
<font color="#E5E5E5">so it's the only thing we can</font><font color="#CCCCCC"> really</font>

750
00:28:17,830 --> 00:28:23,859
<font color="#E5E5E5">rely</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> to completely stop sequel</font>

751
00:28:20,859 --> 00:28:26,080
injection<font color="#CCCCCC"> encode</font><font color="#E5E5E5"> in my opinion we</font><font color="#CCCCCC"> have</font>

752
00:28:23,859 --> 00:28:28,749
it in Ruby Ruby on Rails has<font color="#CCCCCC"> a query</font>

753
00:28:26,080 --> 00:28:31,359
parameter ization<font color="#CCCCCC"> Lake API the active</font>

754
00:28:28,749 --> 00:28:33,099
record<font color="#E5E5E5"> API but the problem is even when</font>

755
00:28:31,359 --> 00:28:36,820
developers<font color="#E5E5E5"> do the right thing especially</font>

756
00:28:33,099 --> 00:28:39,039
<font color="#CCCCCC">in early 2013</font><font color="#E5E5E5"> and 2012 we've seen major</font>

757
00:28:36,820 --> 00:28:39,939
flaws in the<font color="#E5E5E5"> framework they're getting</font>

758
00:28:39,039 --> 00:28:42,639
their act<font color="#E5E5E5"> together</font>

759
00:28:39,940 --> 00:28:45,190
I think Ruby on Rails 4 does a lot<font color="#E5E5E5"> to</font>

760
00:28:42,639 --> 00:28:48,519
<font color="#E5E5E5">improve security</font><font color="#CCCCCC"> but they're really</font>

761
00:28:45,190 --> 00:28:50,229
pushing<font color="#E5E5E5"> hard</font><font color="#CCCCCC"> on elegance for developers</font>

762
00:28:48,519 --> 00:28:52,749
and performance and<font color="#E5E5E5"> security is still</font>

763
00:28:50,229 --> 00:28:55,690
<font color="#E5E5E5">not it's not their number-one concern so</font>

764
00:28:52,749 --> 00:28:58,409
we'll see what<font color="#CCCCCC"> happens</font><font color="#E5E5E5"> even the the</font>

765
00:28:55,690 --> 00:29:00,970
cesspool that is ColdFusion supports

766
00:28:58,409 --> 00:29:02,919
query parameterization forgive me<font color="#E5E5E5"> that</font>

767
00:29:00,970 --> 00:29:04,450
for that<font color="#CCCCCC"> editorial I once was hired to</font>

768
00:29:02,919 --> 00:29:06,580
<font color="#E5E5E5">build it I did they didn't tell me</font><font color="#CCCCCC"> what</font>

769
00:29:04,450 --> 00:29:08,919
<font color="#E5E5E5">language to</font><font color="#CCCCCC"> work on pay me like</font>

770
00:29:06,580 --> 00:29:10,210
huge rate to go do cold fusion<font color="#E5E5E5"> they</font>

771
00:29:08,919 --> 00:29:11,559
didn't tell me I get in and I start

772
00:29:10,210 --> 00:29:13,659
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> at the app okay I'll take this</font>

773
00:29:11,559 --> 00:29:15,428
job and<font color="#CCCCCC"> I see it's just a mess</font><font color="#E5E5E5"> really</font>

774
00:29:13,659 --> 00:29:16,720
critical app and I'm looking at this for

775
00:29:15,429 --> 00:29:17,110
about<font color="#E5E5E5"> an hour and I'm like</font><font color="#CCCCCC"> art I'm out</font>

776
00:29:16,720 --> 00:29:19,539
of<font color="#CCCCCC"> here</font>

777
00:29:17,110 --> 00:29:20,709
so I like look<font color="#E5E5E5"> around grab my bags I'm</font>

778
00:29:19,539 --> 00:29:22,149
like I'm<font color="#CCCCCC"> outta here and</font><font color="#E5E5E5"> I'm sneaking out</font>

779
00:29:20,710 --> 00:29:23,529
the<font color="#E5E5E5"> door</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> like I go</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the door</font>

780
00:29:22,149 --> 00:29:25,719
there's like all the managers are there

781
00:29:23,529 --> 00:29:26,860
what are you doing<font color="#E5E5E5"> Jim</font><font color="#CCCCCC"> cuz I'm like</font><font color="#E5E5E5"> I'm</font>

782
00:29:25,720 --> 00:29:28,630
out<font color="#E5E5E5"> of here I'm</font><font color="#CCCCCC"> not calm not gonna work</font>

783
00:29:26,860 --> 00:29:30,519
on<font color="#E5E5E5"> this app I'm just not gonna work out</font>

784
00:29:28,630 --> 00:29:31,690
<font color="#E5E5E5">for me</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they're</font><font color="#CCCCCC"> like all despondent</font>

785
00:29:30,519 --> 00:29:35,200
like you're the<font color="#CCCCCC"> eighteenth person who's</font>

786
00:29:31,690 --> 00:29:41,380
walked away<font color="#CCCCCC"> can we do anything</font><font color="#E5E5E5"> to make</font>

787
00:29:35,200 --> 00:29:43,570
<font color="#CCCCCC">you stay I'm like no all right cold</font>

788
00:29:41,380 --> 00:29:46,269
fusion<font color="#CCCCCC"> all right so yeah</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> old school</font>

789
00:29:43,570 --> 00:29:47,769
<font color="#CCCCCC">Perl has this</font><font color="#E5E5E5"> so this develop if</font><font color="#CCCCCC"> you're</font>

790
00:29:46,269 --> 00:29:49,360
developers don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> about this</font><font color="#E5E5E5"> already</font>

791
00:29:47,769 --> 00:29:50,710
we have a big problem<font color="#CCCCCC"> if you're</font>

792
00:29:49,360 --> 00:29:52,330
approaching application<font color="#CCCCCC"> security for the</font>

793
00:29:50,710 --> 00:29:54,639
first time<font color="#E5E5E5"> in your organization which a</font>

794
00:29:52,330 --> 00:29:56,168
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> folks are from a defensive point</font>

795
00:29:54,639 --> 00:29:58,600
of view I recommend you go through and

796
00:29:56,169 --> 00:30:00,909
fix<font color="#E5E5E5"> all of your queries in every</font>

797
00:29:58,600 --> 00:30:02,678
application<font color="#CCCCCC"> and just fix</font><font color="#E5E5E5"> equal injection</font>

798
00:30:00,909 --> 00:30:04,539
in one pass<font color="#CCCCCC"> this</font><font color="#E5E5E5"> will test your</font>

799
00:30:02,679 --> 00:30:06,460
organization's ability to actually do

800
00:30:04,539 --> 00:30:08,889
remediation<font color="#CCCCCC"> if you can't eliminate</font>

801
00:30:06,460 --> 00:30:10,480
sequel injection<font color="#E5E5E5"> and all your code you</font>

802
00:30:08,889 --> 00:30:12,129
have<font color="#E5E5E5"> bigger organizational and</font>

803
00:30:10,480 --> 00:30:14,799
structural problems<font color="#E5E5E5"> I've seen that</font>

804
00:30:12,130 --> 00:30:15,970
happen<font color="#CCCCCC"> and those organizations are</font><font color="#E5E5E5"> in a</font>

805
00:30:14,799 --> 00:30:17,889
lot of trouble<font color="#CCCCCC"> when it comes to this</font>

806
00:30:15,970 --> 00:30:19,980
<font color="#E5E5E5">topic so it's a great way to start again</font>

807
00:30:17,889 --> 00:30:22,479
<font color="#E5E5E5">just fix all your</font><font color="#CCCCCC"> fix all your queries</font>

808
00:30:19,980 --> 00:30:24,490
<font color="#E5E5E5">and it's</font><font color="#CCCCCC"> available this defense</font><font color="#E5E5E5"> is</font>

809
00:30:22,480 --> 00:30:26,380
available<font color="#CCCCCC"> in</font><font color="#E5E5E5"> any language</font><font color="#CCCCCC"> it again tests</font>

810
00:30:24,490 --> 00:30:28,690
your organization's ability to deal<font color="#E5E5E5"> with</font>

811
00:30:26,380 --> 00:30:30,880
this very<font color="#E5E5E5"> very dangerous or threat so</font>

812
00:30:28,690 --> 00:30:33,700
far so good<font color="#E5E5E5"> everyone what's next let's</font>

813
00:30:30,880 --> 00:30:35,620
talk about encoding next encoding is it

814
00:30:33,700 --> 00:30:38,919
is the the main defense needed to stop

815
00:30:35,620 --> 00:30:41,018
injection and<font color="#CCCCCC"> just stop non-sequel</font>

816
00:30:38,919 --> 00:30:42,250
<font color="#CCCCCC">injection type of injection</font><font color="#E5E5E5"> sequel</font>

817
00:30:41,019 --> 00:30:44,470
injections fix<font color="#E5E5E5"> to the query parameter</font>

818
00:30:42,250 --> 00:30:45,850
ization<font color="#E5E5E5"> things like LDAP injection and</font>

819
00:30:44,470 --> 00:30:47,710
cross-site scripting which is just

820
00:30:45,850 --> 00:30:49,510
<font color="#CCCCCC">JavaScript injection</font><font color="#E5E5E5"> these are fixed by</font>

821
00:30:47,710 --> 00:30:52,029
encoding<font color="#E5E5E5"> we look at our standard</font>

822
00:30:49,510 --> 00:30:54,490
cross-site scripting attack where we are

823
00:30:52,029 --> 00:30:56,529
<font color="#E5E5E5">grabbing the user so this</font><font color="#CCCCCC"> attack happens</font>

824
00:30:54,490 --> 00:30:58,570
when<font color="#E5E5E5"> I is the attacker embed this</font>

825
00:30:56,529 --> 00:31:01,809
<font color="#CCCCCC">javascript into the application</font><font color="#E5E5E5"> we may</font>

826
00:30:58,570 --> 00:31:04,149
<font color="#CCCCCC">have a feature like a chat board I get</font>

827
00:31:01,809 --> 00:31:05,950
this code in you looked at it<font color="#CCCCCC"> while</font>

828
00:31:04,149 --> 00:31:08,709
you're authenticated<font color="#CCCCCC"> I grab your cookie</font>

829
00:31:05,950 --> 00:31:11,169
<font color="#E5E5E5">attach it to a URL I control load an</font>

830
00:31:08,710 --> 00:31:13,480
image<font color="#CCCCCC"> and JavaScript the user won't even</font>

831
00:31:11,169 --> 00:31:15,490
see this happen<font color="#E5E5E5"> and now that I forced</font>

832
00:31:13,480 --> 00:31:17,639
that victim to send a<font color="#E5E5E5"> request to my</font>

833
00:31:15,490 --> 00:31:19,259
server with a copy of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cookie</font>

834
00:31:17,639 --> 00:31:21,059
and I can<font color="#E5E5E5"> compromise that account pretty</font>

835
00:31:19,259 --> 00:31:23,450
<font color="#CCCCCC">easily at that point or I can deface the</font>

836
00:31:21,059 --> 00:31:26,219
<font color="#CCCCCC">whole website</font><font color="#E5E5E5"> in a very trivial fashion</font>

837
00:31:23,450 --> 00:31:29,159
<font color="#E5E5E5">document.body</font><font color="#CCCCCC"> inner HTML I own the whole</font>

838
00:31:26,219 --> 00:31:31,499
page<font color="#CCCCCC"> I suspect this is how php.net went</font>

839
00:31:29,159 --> 00:31:34,009
down<font color="#E5E5E5"> we see a lot of</font><font color="#CCCCCC"> JavaScript all over</font>

840
00:31:31,499 --> 00:31:36,179
php.net<font color="#E5E5E5"> that's compromised</font><font color="#CCCCCC"> Oh</font>

841
00:31:34,009 --> 00:31:40,259
<font color="#CCCCCC">potentially the whole PHP language we'll</font>

842
00:31:36,179 --> 00:31:42,389
see how<font color="#E5E5E5"> that how that falls out XSS</font>

843
00:31:40,259 --> 00:31:44,729
cross-site scripting which is a bad name

844
00:31:42,389 --> 00:31:47,218
it's just<font color="#CCCCCC"> JavaScript injection XSS</font>

845
00:31:44,729 --> 00:31:50,879
happens all the time<font color="#CCCCCC"> we and when we</font>

846
00:31:47,219 --> 00:31:52,679
audit applications that<font color="#E5E5E5"> white hat we see</font>

847
00:31:50,879 --> 00:31:55,049
cross-site scripting<font color="#E5E5E5"> in pretty</font><font color="#CCCCCC"> much</font>

848
00:31:52,679 --> 00:31:57,119
every single<font color="#E5E5E5"> application we look at so</font>

849
00:31:55,049 --> 00:31:59,009
<font color="#E5E5E5">almost it's rare where a map is fully</font>

850
00:31:57,119 --> 00:32:01,559
resistant to this<font color="#E5E5E5"> to this risk and</font>

851
00:31:59,009 --> 00:32:03,690
people<font color="#CCCCCC"> in</font><font color="#E5E5E5"> human nature when this</font>

852
00:32:01,559 --> 00:32:05,369
vulnerability<font color="#E5E5E5"> comes up or these these</font>

853
00:32:03,690 --> 00:32:07,019
reports come<font color="#E5E5E5"> up over and over again that</font>

854
00:32:05,369 --> 00:32:08,849
<font color="#E5E5E5">you have cross-site scripting folks</font>

855
00:32:07,019 --> 00:32:10,499
become desensitized to it<font color="#E5E5E5"> and stop</font>

856
00:32:08,849 --> 00:32:12,869
caring<font color="#E5E5E5"> about it and that's a really</font>

857
00:32:10,499 --> 00:32:15,029
<font color="#E5E5E5">dangerous path that go down as sequel</font>

858
00:32:12,869 --> 00:32:17,519
injection is on is on<font color="#CCCCCC"> the wane as more</font>

859
00:32:15,029 --> 00:32:20,099
companies get it and fix it<font color="#E5E5E5"> attackers</font>

860
00:32:17,519 --> 00:32:22,169
just shift across<font color="#CCCCCC"> write</font><font color="#E5E5E5"> scripting</font><font color="#CCCCCC"> attack</font>

861
00:32:20,099 --> 00:32:24,178
<font color="#E5E5E5">your application and the things we can</font>

862
00:32:22,169 --> 00:32:26,099
do with<font color="#E5E5E5"> it are off the chart we can use</font>

863
00:32:24,179 --> 00:32:28,440
<font color="#CCCCCC">javascript attacks to own the whole</font>

864
00:32:26,099 --> 00:32:29,908
world<font color="#CCCCCC"> through advertising networks like</font>

865
00:32:28,440 --> 00:32:31,739
<font color="#E5E5E5">matt johansson just spoke</font><font color="#CCCCCC"> about in his</font>

866
00:32:29,909 --> 00:32:33,869
<font color="#E5E5E5">last section</font><font color="#CCCCCC"> we can steal individual</font>

867
00:32:31,739 --> 00:32:35,969
sessions we can deface a website we can

868
00:32:33,869 --> 00:32:38,728
port scan with it we can undermine

869
00:32:35,969 --> 00:32:40,979
cross-site request forgery defenses we

870
00:32:38,729 --> 00:32:43,709
can redirect the<font color="#E5E5E5"> user load scripts from</font>

871
00:32:40,979 --> 00:32:45,359
<font color="#CCCCCC">third</font><font color="#E5E5E5"> party sites</font><font color="#CCCCCC"> a data theft</font><font color="#E5E5E5"> keystroke</font>

872
00:32:43,709 --> 00:32:47,940
logging<font color="#E5E5E5"> dogs and</font><font color="#CCCCCC"> cat sleeping together</font>

873
00:32:45,359 --> 00:32:51,329
it is a huge problem<font color="#CCCCCC"> that we have that</font>

874
00:32:47,940 --> 00:32:54,959
we do have to address<font color="#E5E5E5"> and this is really</font>

875
00:32:51,329 --> 00:32:56,940
hard to<font color="#E5E5E5"> address so here's my grid of how</font>

876
00:32:54,959 --> 00:32:58,709
you<font color="#E5E5E5"> stop cross-site scripting it's a</font>

877
00:32:56,940 --> 00:33:01,409
combination of encoding tactical

878
00:32:58,709 --> 00:33:04,259
validation avoiding certain<font color="#E5E5E5"> api's that</font>

879
00:33:01,409 --> 00:33:07,379
are changing<font color="#E5E5E5"> is using</font><font color="#CCCCCC"> frameworks like</font>

880
00:33:04,259 --> 00:33:09,089
<font color="#E5E5E5">jQuery in the proper fashion it is it is</font>

881
00:33:07,379 --> 00:33:11,129
a difficult<font color="#CCCCCC"> challenge to</font><font color="#E5E5E5"> get this right</font>

882
00:33:09,089 --> 00:33:13,289
but let's talk<font color="#CCCCCC"> about the main</font><font color="#E5E5E5"> defense</font>

883
00:33:11,129 --> 00:33:15,359
<font color="#CCCCCC">encoding</font><font color="#E5E5E5"> when your browser sees this</font>

884
00:33:13,289 --> 00:33:17,190
character it thinks<font color="#E5E5E5"> it's code it thinks</font>

885
00:33:15,359 --> 00:33:19,049
you're starting a new<font color="#E5E5E5"> tag but when your</font>

886
00:33:17,190 --> 00:33:21,479
<font color="#E5E5E5">browser sees this character these series</font>

887
00:33:19,049 --> 00:33:23,759
of<font color="#E5E5E5"> characters the HTML entity it's</font><font color="#CCCCCC"> gonna</font>

888
00:33:21,479 --> 00:33:26,219
render<font color="#E5E5E5"> a less than sign on the page</font>

889
00:33:23,759 --> 00:33:28,649
<font color="#E5E5E5">without actually treating it like code</font>

890
00:33:26,219 --> 00:33:29,850
it's just<font color="#E5E5E5"> display data so when we want</font>

891
00:33:28,649 --> 00:33:32,370
to build

892
00:33:29,850 --> 00:33:33,840
<font color="#CCCCCC">a java</font><font color="#E5E5E5"> guy I'll use a Java example we</font>

893
00:33:32,370 --> 00:33:36,959
have a project<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> an output</font>

894
00:33:33,840 --> 00:33:39,000
encoding library in Java Java<font color="#E5E5E5"> doesn't</font>

895
00:33:36,960 --> 00:33:41,789
have this librarian we made a request to

896
00:33:39,000 --> 00:33:43,340
<font color="#CCCCCC">son or at the time son now</font><font color="#E5E5E5"> Oracle</font><font color="#CCCCCC"> - to</font>

897
00:33:41,789 --> 00:33:46,890
build this library<font color="#E5E5E5"> in and</font><font color="#CCCCCC"> they're like</font>

898
00:33:43,340 --> 00:33:48,928
core<font color="#E5E5E5"> Java is for Java is for many</font>

899
00:33:46,890 --> 00:33:51,720
different<font color="#CCCCCC"> kinds of Java applications not</font>

900
00:33:48,929 --> 00:33:53,880
<font color="#CCCCCC">just web</font><font color="#E5E5E5"> we may build this in</font><font color="#CCCCCC"> a jte</font>

901
00:33:51,720 --> 00:33:56,340
<font color="#E5E5E5">someday but we'll never put in the core</font>

902
00:33:53,880 --> 00:33:59,309
<font color="#E5E5E5">Java so we'll never see an encoder</font><font color="#CCCCCC"> like</font>

903
00:33:56,340 --> 00:34:01,080
this in the core<font color="#CCCCCC"> Java language</font><font color="#E5E5E5"> we need</font>

904
00:33:59,309 --> 00:34:03,389
<font color="#E5E5E5">this we need a</font><font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> library</font><font color="#CCCCCC"> to do</font>

905
00:34:01,080 --> 00:34:05,070
this<font color="#E5E5E5"> my favorite is the OS job at</font>

906
00:34:03,390 --> 00:34:06,780
encoder project it was<font color="#CCCCCC"> written by Jeff I</font>

907
00:34:05,070 --> 00:34:09,149
can now see from<font color="#CCCCCC"> successfactors at</font><font color="#E5E5E5"> the</font>

908
00:34:06,780 --> 00:34:10,889
time and it's<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the most and he</font>

909
00:34:09,149 --> 00:34:13,049
actually<font color="#E5E5E5"> went and downloaded the source</font>

910
00:34:10,889 --> 00:34:15,389
<font color="#E5E5E5">code to WebKit and all the different</font>

911
00:34:13,050 --> 00:34:18,330
browser rendering engines and studied

912
00:34:15,389 --> 00:34:20,669
how they work and built his encoder<font color="#E5E5E5"> not</font>

913
00:34:18,330 --> 00:34:22,469
as a security<font color="#E5E5E5"> guy with a good theory</font><font color="#CCCCCC"> but</font>

914
00:34:20,668 --> 00:34:24,270
<font color="#CCCCCC">as a</font><font color="#E5E5E5"> developer who really understands</font>

915
00:34:22,469 --> 00:34:27,029
<font color="#CCCCCC">how</font><font color="#E5E5E5"> HTML</font><font color="#CCCCCC"> is generated in the</font><font color="#E5E5E5"> browser</font>

916
00:34:24,270 --> 00:34:29,129
<font color="#E5E5E5">that's what triggered how he built this</font>

917
00:34:27,030 --> 00:34:31,139
defense and it's super fast<font color="#E5E5E5"> and</font>

918
00:34:29,129 --> 00:34:33,960
<font color="#CCCCCC">rock-solid from a</font><font color="#E5E5E5"> security point of view</font>

919
00:34:31,139 --> 00:34:36,060
<font color="#E5E5E5">so you do this encoding of course in the</font>

920
00:34:33,960 --> 00:34:38,159
user<font color="#E5E5E5"> interface while we're building a</font>

921
00:34:36,060 --> 00:34:40,340
dynamic web application<font color="#E5E5E5"> we put it in the</font>

922
00:34:38,159 --> 00:34:42,990
middle<font color="#CCCCCC"> of a text field we want to use</font>

923
00:34:40,340 --> 00:34:46,560
attribute encoding<font color="#E5E5E5"> we put it in a text</font>

924
00:34:42,989 --> 00:34:49,229
area<font color="#CCCCCC"> we want to do HTML</font><font color="#E5E5E5"> encoding we put</font>

925
00:34:46,560 --> 00:34:51,840
it in a<font color="#E5E5E5"> JavaScript event handler we want</font>

926
00:34:49,230 --> 00:34:53,280
to do<font color="#CCCCCC"> javascript attribute encoding</font><font color="#E5E5E5"> when</font>

927
00:34:51,840 --> 00:34:55,169
we want when<font color="#E5E5E5"> we put it in script lock</font>

928
00:34:53,280 --> 00:34:57,390
like a variable assignment<font color="#CCCCCC"> we do</font>

929
00:34:55,168 --> 00:35:00,118
<font color="#E5E5E5">JavaScript block encoding it's a very</font>

930
00:34:57,390 --> 00:35:02,520
complete API<font color="#E5E5E5"> that</font><font color="#CCCCCC"> gives you encoding for</font>

931
00:35:00,119 --> 00:35:04,109
even the most granular context you can

932
00:35:02,520 --> 00:35:05,580
<font color="#E5E5E5">get away with just using two</font><font color="#CCCCCC"> or three of</font>

933
00:35:04,109 --> 00:35:07,680
<font color="#E5E5E5">these if you want but if you really want</font>

934
00:35:05,580 --> 00:35:09,779
to build<font color="#E5E5E5"> like a your</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> auto escaping</font>

935
00:35:07,680 --> 00:35:12,390
template or if you have a really high

936
00:35:09,780 --> 00:35:14,310
security app that's complex<font color="#E5E5E5"> that has a</font>

937
00:35:12,390 --> 00:35:16,080
that you really need<font color="#E5E5E5"> to build complete</font>

938
00:35:14,310 --> 00:35:17,970
<font color="#CCCCCC">assurance for you're</font><font color="#E5E5E5"> going to need all</font>

939
00:35:16,080 --> 00:35:19,470
<font color="#CCCCCC">of these different</font><font color="#E5E5E5"> api's for different</font>

940
00:35:17,970 --> 00:35:23,009
<font color="#CCCCCC">xml and</font><font color="#E5E5E5"> coatings we're building dynamic</font>

941
00:35:19,470 --> 00:35:25,680
<font color="#CCCCCC">xml for CSS strange and urls</font><font color="#E5E5E5"> for</font>

942
00:35:23,010 --> 00:35:27,900
different contexts<font color="#CCCCCC"> in</font><font color="#E5E5E5"> javascript this is</font>

943
00:35:25,680 --> 00:35:30,868
a complete<font color="#CCCCCC"> api for the output</font><font color="#E5E5E5"> and coding</font>

944
00:35:27,900 --> 00:35:33,600
need there and<font color="#CCCCCC"> again</font><font color="#E5E5E5"> it was written by a</font>

945
00:35:30,869 --> 00:35:35,730
really serious developer professional

946
00:35:33,600 --> 00:35:37,650
<font color="#E5E5E5">some of the critiques I have of some of</font>

947
00:35:35,730 --> 00:35:39,869
the OS projects around secure<font color="#CCCCCC"> coding</font>

948
00:35:37,650 --> 00:35:42,120
<font color="#E5E5E5">they were built by security guys with</font>

949
00:35:39,869 --> 00:35:44,550
good intentions<font color="#CCCCCC"> but</font><font color="#E5E5E5"> Kaiser</font>

950
00:35:42,120 --> 00:35:46,799
professional developers and so

951
00:35:44,550 --> 00:35:49,320
especially<font color="#CCCCCC"> the isapi project which we</font>

952
00:35:46,800 --> 00:35:51,870
spent a lot of time promoting<font color="#E5E5E5"> this was</font>

953
00:35:49,320 --> 00:35:54,120
written<font color="#E5E5E5"> by really good security guys</font>

954
00:35:51,870 --> 00:35:57,150
were<font color="#E5E5E5"> really not professional developers</font>

955
00:35:54,120 --> 00:36:00,000
and the design pattern problems<font color="#E5E5E5"> and anti</font>

956
00:35:57,150 --> 00:36:01,500
patterns in<font color="#E5E5E5"> isapi is so prolific I don't</font>

957
00:36:00,000 --> 00:36:03,240
recommend it<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> and I want to</font>

958
00:36:01,500 --> 00:36:04,830
<font color="#E5E5E5">recommend it I'm</font><font color="#CCCCCC"> a board</font><font color="#E5E5E5"> member</font><font color="#CCCCCC"> I need</font>

959
00:36:03,240 --> 00:36:06,209
to care<font color="#CCCCCC"> about these things</font><font color="#E5E5E5"> but I</font><font color="#CCCCCC"> gotta</font>

960
00:36:04,830 --> 00:36:08,880
<font color="#CCCCCC">be honest it's something I would</font><font color="#E5E5E5"> never</font>

961
00:36:06,210 --> 00:36:11,400
wish upon<font color="#E5E5E5"> I would never wish that upon</font>

962
00:36:08,880 --> 00:36:13,230
<font color="#E5E5E5">anyone to go</font><font color="#CCCCCC"> through the hell that is</font>

963
00:36:11,400 --> 00:36:15,630
configuring using and<font color="#E5E5E5"> depending on his</font>

964
00:36:13,230 --> 00:36:17,850
<font color="#E5E5E5">happy so other encoding libraries I do</font>

965
00:36:15,630 --> 00:36:20,550
think do fit<font color="#E5E5E5"> that that production</font>

966
00:36:17,850 --> 00:36:22,529
<font color="#E5E5E5">quality characteristic Ruby on Rails</font><font color="#CCCCCC"> has</font>

967
00:36:20,550 --> 00:36:24,570
their own<font color="#E5E5E5"> util library with a contextual</font>

968
00:36:22,530 --> 00:36:27,330
output encoder<font color="#CCCCCC"> and Ruby on Rails for the</font>

969
00:36:24,570 --> 00:36:29,430
<font color="#CCCCCC">Reform old</font><font color="#E5E5E5"> school reform project has</font>

970
00:36:27,330 --> 00:36:33,660
<font color="#CCCCCC">encode hit are</font><font color="#E5E5E5"> the only encoders I see</font>

971
00:36:29,430 --> 00:36:35,580
in<font color="#E5E5E5"> Perl and classic ASP and Python I</font>

972
00:36:33,660 --> 00:36:37,170
don't see an encoder in Python I think a

973
00:36:35,580 --> 00:36:39,210
lot<font color="#CCCCCC"> of people write their own but this</font>

974
00:36:37,170 --> 00:36:41,400
<font color="#E5E5E5">is an old school project that will give</font>

975
00:36:39,210 --> 00:36:43,620
you a good<font color="#E5E5E5"> production quality baseline</font>

976
00:36:41,400 --> 00:36:45,270
for encoding<font color="#E5E5E5"> in some languages</font><font color="#CCCCCC"> that</font>

977
00:36:43,620 --> 00:36:46,740
don't have other encoders<font color="#CCCCCC"> to this day</font>

978
00:36:45,270 --> 00:36:49,590
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> like an eight year old project</font>

979
00:36:46,740 --> 00:36:52,080
we do have a sappy<font color="#CCCCCC"> a lot of people use</font>

980
00:36:49,590 --> 00:36:54,060
it already<font color="#CCCCCC"> so I've seen them rip the</font><font color="#E5E5E5"> in</font>

981
00:36:52,080 --> 00:36:56,250
<font color="#E5E5E5">code and</font><font color="#CCCCCC"> most people use a sappy for the</font>

982
00:36:54,060 --> 00:36:57,810
encoder alone it can<font color="#E5E5E5"> be ripped out if</font>

983
00:36:56,250 --> 00:36:59,880
you need<font color="#CCCCCC"> it</font><font color="#E5E5E5"> but proceed</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> caution</font>

984
00:36:57,810 --> 00:37:02,820
<font color="#E5E5E5">unless you're really willing to invest a</font>

985
00:36:59,880 --> 00:37:04,290
lot of<font color="#CCCCCC"> time in in forking the</font><font color="#E5E5E5"> library</font>

986
00:37:02,820 --> 00:37:07,320
it's not going to<font color="#E5E5E5"> stand the</font><font color="#CCCCCC"> test of</font><font color="#E5E5E5"> time</font>

987
00:37:04,290 --> 00:37:09,720
then there's the dotnet anti XSS library

988
00:37:07,320 --> 00:37:11,490
<font color="#E5E5E5">it's probably the best encoding library</font>

989
00:37:09,720 --> 00:37:13,319
that's native<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a language and</font><font color="#E5E5E5"> it's</font>

990
00:37:11,490 --> 00:37:15,209
contextual enough to be<font color="#E5E5E5"> effective in the</font>

991
00:37:13,320 --> 00:37:17,040
real world<font color="#CCCCCC"> so that's that's output</font>

992
00:37:15,210 --> 00:37:18,720
encoding and again I hate<font color="#E5E5E5"> this but we</font>

993
00:37:17,040 --> 00:37:21,390
need<font color="#E5E5E5"> to go to a lot of third-party</font>

994
00:37:18,720 --> 00:37:24,750
<font color="#E5E5E5">libraries in most languages the Ruby on</font>

995
00:37:21,390 --> 00:37:26,160
<font color="#CCCCCC">Rails for</font><font color="#E5E5E5"> and dotnet are the few</font>

996
00:37:24,750 --> 00:37:27,660
<font color="#E5E5E5">examples where it's really built into</font>

997
00:37:26,160 --> 00:37:29,370
the<font color="#CCCCCC"> language</font><font color="#E5E5E5"> so let's talk about</font>

998
00:37:27,660 --> 00:37:31,290
<font color="#E5E5E5">validation and I'm going to talk</font><font color="#CCCCCC"> about</font>

999
00:37:29,370 --> 00:37:33,299
we what we all know about regular

1000
00:37:31,290 --> 00:37:34,560
expressions<font color="#CCCCCC"> and input validation I'm</font>

1001
00:37:33,300 --> 00:37:36,990
going to talk<font color="#E5E5E5"> about a couple of the edge</font>

1002
00:37:34,560 --> 00:37:39,240
cases<font color="#E5E5E5"> the more complex validation</font>

1003
00:37:36,990 --> 00:37:41,970
techniques<font color="#E5E5E5"> that we need to master to</font>

1004
00:37:39,240 --> 00:37:44,160
<font color="#CCCCCC">build a secure web application</font><font color="#E5E5E5"> one is</font>

1005
00:37:41,970 --> 00:37:46,890
HTML<font color="#CCCCCC"> input</font><font color="#E5E5E5"> this is a cross-site</font>

1006
00:37:44,160 --> 00:37:48,990
scripting vector<font color="#E5E5E5"> there's two widgets</font>

1007
00:37:46,890 --> 00:37:51,720
that<font color="#E5E5E5"> developers use that's a WYSIWYG</font>

1008
00:37:48,990 --> 00:37:55,149
editor in a<font color="#E5E5E5"> web</font><font color="#CCCCCC"> page that's tiny MCE</font>

1009
00:37:51,720 --> 00:37:56,799
<font color="#E5E5E5">written by</font><font color="#CCCCCC"> spock and i don't thing</font>

1010
00:37:55,150 --> 00:37:58,120
actually the Spock from Star Trek<font color="#E5E5E5"> I</font>

1011
00:37:56,800 --> 00:37:59,230
think it's<font color="#E5E5E5"> just a guy using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> name</font>

1012
00:37:58,120 --> 00:38:02,230
Spock but<font color="#CCCCCC"> it is</font>

1013
00:37:59,230 --> 00:38:04,090
there's also<font color="#E5E5E5"> ckeditor these are WYSIWYG</font>

1014
00:38:02,230 --> 00:38:06,760
editors that<font color="#E5E5E5"> convert a text area</font><font color="#CCCCCC"> to a</font>

1015
00:38:04,090 --> 00:38:09,100
full<font color="#E5E5E5"> text editor how do these text</font>

1016
00:38:06,760 --> 00:38:11,380
editors submit<font color="#E5E5E5"> that rich text bullet</font>

1017
00:38:09,100 --> 00:38:12,220
lists highlighted text different fonts

1018
00:38:11,380 --> 00:38:14,470
embedded images

1019
00:38:12,220 --> 00:38:16,870
well they submit it<font color="#E5E5E5"> as a chunk of</font><font color="#CCCCCC"> HTML</font>

1020
00:38:14,470 --> 00:38:19,480
and<font color="#CCCCCC"> what if you do output encoding on</font>

1021
00:38:16,870 --> 00:38:22,120
that chunk of<font color="#E5E5E5"> HTML</font><font color="#CCCCCC"> what do you get</font><font color="#E5E5E5"> you</font>

1022
00:38:19,480 --> 00:38:24,130
get code on page<font color="#E5E5E5"> it's not gonna launch</font>

1023
00:38:22,120 --> 00:38:25,600
an attack<font color="#E5E5E5"> it'll be safe</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you're</font>

1024
00:38:24,130 --> 00:38:28,960
<font color="#CCCCCC">breaking the feature we need to actually</font>

1025
00:38:25,600 --> 00:38:31,029
<font color="#CCCCCC">render that HTML safely</font><font color="#E5E5E5"> so Josh can you</font>

1026
00:38:28,960 --> 00:38:33,820
<font color="#CCCCCC">build me a</font><font color="#E5E5E5"> regular</font><font color="#CCCCCC"> expression please by</font>

1027
00:38:31,030 --> 00:38:35,800
<font color="#E5E5E5">tomorrow that sanitizes any</font><font color="#CCCCCC"> third party</font>

1028
00:38:33,820 --> 00:38:37,540
HTML without breaking it and cleans out

1029
00:38:35,800 --> 00:38:38,980
any<font color="#E5E5E5"> JavaScript so I can safely render it</font>

1030
00:38:37,540 --> 00:38:43,300
<font color="#E5E5E5">for other</font><font color="#CCCCCC"> users can I have</font><font color="#E5E5E5"> that tomorrow</font>

1031
00:38:38,980 --> 00:38:45,130
<font color="#E5E5E5">please</font><font color="#CCCCCC"> a the whole that's</font><font color="#E5E5E5"> the problem</font>

1032
00:38:43,300 --> 00:38:47,440
many<font color="#E5E5E5"> have tried to do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and very</font>

1033
00:38:45,130 --> 00:38:49,390
<font color="#E5E5E5">large complex regular expressions lead</font>

1034
00:38:47,440 --> 00:38:51,280
to<font color="#E5E5E5"> denial of service vectors it's also a</font>

1035
00:38:49,390 --> 00:38:52,540
<font color="#E5E5E5">kind of feature that</font><font color="#CCCCCC"> we just can't build</font>

1036
00:38:51,280 --> 00:38:56,140
in a reasonable amount<font color="#CCCCCC"> of time</font>

1037
00:38:52,540 --> 00:38:57,820
enter the<font color="#CCCCCC"> OAuth HTML sanitizer project</font>

1038
00:38:56,140 --> 00:38:59,220
<font color="#E5E5E5">again I'm very</font><font color="#CCCCCC"> Java centric so I'm gonna</font>

1039
00:38:57,820 --> 00:39:01,810
give<font color="#E5E5E5"> you a job example to start with</font>

1040
00:38:59,220 --> 00:39:03,850
<font color="#E5E5E5">again this was</font><font color="#CCCCCC"> not written there's</font>

1041
00:39:01,810 --> 00:39:04,930
another project<font color="#CCCCCC"> at a loss anti Samy</font>

1042
00:39:03,850 --> 00:39:07,180
which is actually a really<font color="#E5E5E5"> good project</font>

1043
00:39:04,930 --> 00:39:09,250
<font color="#E5E5E5">it's pretty safe but it has performance</font>

1044
00:39:07,180 --> 00:39:10,870
<font color="#E5E5E5">problems and configuration problems it's</font>

1045
00:39:09,250 --> 00:39:12,160
<font color="#E5E5E5">not being well maintained and</font><font color="#CCCCCC"> it was not</font>

1046
00:39:10,870 --> 00:39:14,620
written<font color="#E5E5E5"> by a pro developer it was</font>

1047
00:39:12,160 --> 00:39:16,540
written by a security<font color="#E5E5E5"> guy whose security</font>

1048
00:39:14,620 --> 00:39:18,279
<font color="#CCCCCC">guy first in the developer second we</font>

1049
00:39:16,540 --> 00:39:19,690
need<font color="#E5E5E5"> to encourage developers who are</font><font color="#CCCCCC"> Pro</font>

1050
00:39:18,280 --> 00:39:22,000
developers and give them security

1051
00:39:19,690 --> 00:39:23,650
<font color="#E5E5E5">assistance to</font><font color="#CCCCCC"> really build libraries</font>

1052
00:39:22,000 --> 00:39:26,490
that will<font color="#E5E5E5"> stand the test</font><font color="#CCCCCC"> of time this is</font>

1053
00:39:23,650 --> 00:39:29,860
<font color="#E5E5E5">written by Mike Samuel who's the lead</font>

1054
00:39:26,490 --> 00:39:31,720
<font color="#CCCCCC">security engineer for Google's app</font><font color="#E5E5E5"> sect</font>

1055
00:39:29,860 --> 00:39:34,090
team and he donated<font color="#E5E5E5"> this</font><font color="#CCCCCC"> to oh-ah</font><font color="#E5E5E5"> spaz a</font>

1056
00:39:31,720 --> 00:39:36,459
counterpoint<font color="#CCCCCC"> to anti</font><font color="#E5E5E5"> Sammy</font><font color="#CCCCCC"> it's trivial</font>

1057
00:39:34,090 --> 00:39:38,950
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> its programmatic no XML config</font>

1058
00:39:36,460 --> 00:39:41,020
<font color="#E5E5E5">it's super fast it's been we've gone</font>

1059
00:39:38,950 --> 00:39:43,779
through<font color="#E5E5E5"> a lot of going through a lot of</font>

1060
00:39:41,020 --> 00:39:46,420
adversarial testing and we found<font color="#E5E5E5"> bugs in</font>

1061
00:39:43,780 --> 00:39:48,640
it we<font color="#E5E5E5"> fixed him within hours</font><font color="#CCCCCC"> so that's</font>

1062
00:39:46,420 --> 00:39:50,620
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Kiwi sees bugs and anti</font><font color="#E5E5E5"> Sammy that</font>

1063
00:39:48,640 --> 00:39:53,500
have been unfixed for months in some

1064
00:39:50,620 --> 00:39:55,720
cases<font color="#E5E5E5"> years so we need we need I'm less</font>

1065
00:39:53,500 --> 00:39:57,880
concerned<font color="#CCCCCC"> about</font><font color="#E5E5E5"> a large team supporting</font>

1066
00:39:55,720 --> 00:39:59,680
it<font color="#E5E5E5"> than I am about one expert who cares</font>

1067
00:39:57,880 --> 00:40:02,470
supporting it<font color="#E5E5E5"> I'm much more concerned</font>

1068
00:39:59,680 --> 00:40:04,270
<font color="#CCCCCC">about small single-use libraries than</font>

1069
00:40:02,470 --> 00:40:06,399
libraries<font color="#E5E5E5"> that try to boil the ocean in</font>

1070
00:40:04,270 --> 00:40:07,540
terms of security<font color="#E5E5E5"> so I wanted we give</font>

1071
00:40:06,400 --> 00:40:08,570
the user<font color="#E5E5E5"> to give the developer this</font>

1072
00:40:07,540 --> 00:40:10,400
<font color="#E5E5E5">library they draw</font>

1073
00:40:08,570 --> 00:40:12,530
<font color="#CCCCCC">puttin</font><font color="#E5E5E5"> no dependencies they can build a</font>

1074
00:40:10,400 --> 00:40:16,340
basic<font color="#E5E5E5"> policy here here they're saying</font>

1075
00:40:12,530 --> 00:40:19,850
<font color="#CCCCCC">give me a new policy</font><font color="#E5E5E5"> allow a lynx HTTP</font>

1076
00:40:16,340 --> 00:40:22,400
only allow<font color="#CCCCCC"> HRF and a</font><font color="#E5E5E5"> elements no</font>

1077
00:40:19,850 --> 00:40:24,920
relative<font color="#CCCCCC"> lengths build</font><font color="#E5E5E5"> I can send in any</font>

1078
00:40:22,400 --> 00:40:27,410
untrusted HTML and what comes out<font color="#E5E5E5"> will</font>

1079
00:40:24,920 --> 00:40:29,300
abide by<font color="#CCCCCC"> that</font><font color="#E5E5E5"> policy</font><font color="#CCCCCC"> and be safe to</font>

1080
00:40:27,410 --> 00:40:31,670
<font color="#E5E5E5">render to</font><font color="#CCCCCC"> other users this</font><font color="#E5E5E5"> is a</font>

1081
00:40:29,300 --> 00:40:34,760
specialized validation technique other

1082
00:40:31,670 --> 00:40:37,250
HTML sanitizers we have the<font color="#E5E5E5"> kaha project</font>

1083
00:40:34,760 --> 00:40:38,600
the<font color="#CCCCCC"> Jas HTML sanitizer as a pure</font>

1084
00:40:37,250 --> 00:40:40,910
JavaScript sanitizer

1085
00:40:38,600 --> 00:40:44,089
<font color="#E5E5E5">we have Python the bleach project and</font>

1086
00:40:40,910 --> 00:40:46,339
PHP<font color="#E5E5E5"> we used to recommend HTML purifier</font>

1087
00:40:44,090 --> 00:40:50,030
it's not really being maintained<font color="#E5E5E5"> so the</font>

1088
00:40:46,340 --> 00:40:52,490
HTML<font color="#CCCCCC"> laud project is a much more</font>

1089
00:40:50,030 --> 00:40:55,520
in-depth<font color="#CCCCCC"> and well maintained</font><font color="#E5E5E5"> and much</font>

1090
00:40:52,490 --> 00:40:58,850
more secure<font color="#E5E5E5"> and performance friendly PHP</font>

1091
00:40:55,520 --> 00:41:01,550
HTML sanitization library in dotnet we

1092
00:40:58,850 --> 00:41:04,279
used to recommend<font color="#CCCCCC"> the anti XSS get safe</font>

1093
00:41:01,550 --> 00:41:07,010
HTML<font color="#E5E5E5"> API which is way too aggressive</font>

1094
00:41:04,280 --> 00:41:08,930
<font color="#CCCCCC">it's secure but</font><font color="#E5E5E5"> it's gonna it's gonna</font>

1095
00:41:07,010 --> 00:41:12,200
break functionality when using<font color="#E5E5E5"> these</font>

1096
00:41:08,930 --> 00:41:15,080
<font color="#E5E5E5">wiki WYSIWYG editors I prefer the HTML</font>

1097
00:41:12,200 --> 00:41:17,240
agility<font color="#CCCCCC"> pack a third-party add-on</font><font color="#E5E5E5"> that's</font>

1098
00:41:15,080 --> 00:41:19,370
configurable and<font color="#E5E5E5"> is much much</font><font color="#CCCCCC"> more</font>

1099
00:41:17,240 --> 00:41:21,740
feature-rich<font color="#E5E5E5"> when you need these when</font>

1100
00:41:19,370 --> 00:41:23,900
you need this kind of<font color="#E5E5E5"> sanitization Ruby</font>

1101
00:41:21,740 --> 00:41:26,089
on Rails has<font color="#E5E5E5"> the HTML class</font><font color="#CCCCCC"> built-in</font>

1102
00:41:23,900 --> 00:41:28,100
<font color="#E5E5E5">that provides this kind</font><font color="#CCCCCC"> of API</font><font color="#E5E5E5"> and Ruby</font>

1103
00:41:26,090 --> 00:41:30,800
on Rails for another specialized

1104
00:41:28,100 --> 00:41:32,450
validation technique we need is file

1105
00:41:30,800 --> 00:41:34,190
upload<font color="#E5E5E5"> security when you're letting</font>

1106
00:41:32,450 --> 00:41:36,230
<font color="#CCCCCC">users upload files to your server</font>

1107
00:41:34,190 --> 00:41:39,290
<font color="#CCCCCC">there's so many</font><font color="#E5E5E5"> little things we need</font><font color="#CCCCCC"> to</font>

1108
00:41:36,230 --> 00:41:41,390
take<font color="#E5E5E5"> care of the key thing I'll quickly</font>

1109
00:41:39,290 --> 00:41:43,759
<font color="#E5E5E5">do two things we need</font><font color="#CCCCCC"> to when the user</font>

1110
00:41:41,390 --> 00:41:46,370
gives<font color="#E5E5E5"> us a file name for an upload</font>

1111
00:41:43,760 --> 00:41:47,750
multi-part<font color="#E5E5E5"> form we never use</font><font color="#CCCCCC"> that file</font>

1112
00:41:46,370 --> 00:41:49,819
name<font color="#E5E5E5"> to save the file</font>

1113
00:41:47,750 --> 00:41:51,620
<font color="#CCCCCC">we've write our own file name or use the</font>

1114
00:41:49,820 --> 00:41:54,230
primary<font color="#E5E5E5"> key of the database entry and</font>

1115
00:41:51,620 --> 00:41:56,029
save it<font color="#CCCCCC"> with the trusted name never want</font>

1116
00:41:54,230 --> 00:41:57,770
<font color="#E5E5E5">to use the name</font><font color="#CCCCCC"> that the that the user</font>

1117
00:41:56,030 --> 00:41:59,660
gives us<font color="#E5E5E5"> we also want to do something</font>

1118
00:41:57,770 --> 00:42:02,240
<font color="#CCCCCC">called</font><font color="#E5E5E5"> image rewriting never trust an</font>

1119
00:41:59,660 --> 00:42:07,129
image a user uploads<font color="#CCCCCC"> to you use an image</font>

1120
00:42:02,240 --> 00:42:10,520
library like<font color="#E5E5E5"> CK editor or I'm sorry does</font>

1121
00:42:07,130 --> 00:42:12,980
gd+<font color="#E5E5E5"> or the image magic library</font><font color="#CCCCCC"> load the</font>

1122
00:42:10,520 --> 00:42:14,870
image<font color="#E5E5E5"> change it by one pixel rewrite it</font>

1123
00:42:12,980 --> 00:42:16,730
if any of<font color="#E5E5E5"> that fails it's not a valid</font>

1124
00:42:14,870 --> 00:42:19,130
<font color="#CCCCCC">image</font><font color="#E5E5E5"> so these are these are techniques</font>

1125
00:42:16,730 --> 00:42:20,600
<font color="#E5E5E5">we can use to</font><font color="#CCCCCC"> do file</font><font color="#E5E5E5"> upload security</font>

1126
00:42:19,130 --> 00:42:21,980
well let's talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> protection</font>

1127
00:42:20,600 --> 00:42:25,940
and<font color="#E5E5E5"> privacy next</font>

1128
00:42:21,980 --> 00:42:28,070
the the<font color="#E5E5E5"> whole</font><font color="#CCCCCC"> si8 infrastructure is a</font>

1129
00:42:25,940 --> 00:42:31,250
<font color="#CCCCCC">freakin joke there are</font><font color="#E5E5E5"> about 500</font>

1130
00:42:28,070 --> 00:42:33,140
different<font color="#CCCCCC"> cas in the world today</font><font color="#E5E5E5"> many of</font>

1131
00:42:31,250 --> 00:42:35,900
them have sold their private CA

1132
00:42:33,140 --> 00:42:37,879
certificate to public companies<font color="#CCCCCC"> to to</font>

1133
00:42:35,900 --> 00:42:39,770
corporations<font color="#E5E5E5"> to</font><font color="#CCCCCC"> allow them to do</font>

1134
00:42:37,880 --> 00:42:42,950
<font color="#E5E5E5">man-in-the-middle in real time without</font>

1135
00:42:39,770 --> 00:42:44,240
<font color="#E5E5E5">any browser warning and we saw</font><font color="#CCCCCC"> i'm not</font>

1136
00:42:42,950 --> 00:42:47,060
<font color="#CCCCCC">gonna mention</font><font color="#E5E5E5"> any names that would not</font>

1137
00:42:44,240 --> 00:42:49,129
be appropriate<font color="#E5E5E5"> Trustwave</font><font color="#CCCCCC"> um but they but</font>

1138
00:42:47,060 --> 00:42:50,330
they came clean<font color="#CCCCCC"> i want to blame them</font>

1139
00:42:49,130 --> 00:42:51,650
<font color="#E5E5E5">because</font><font color="#CCCCCC"> they came clean about it they</font>

1140
00:42:50,330 --> 00:42:53,690
admit<font color="#E5E5E5"> it they made a mistake</font><font color="#CCCCCC"> they</font>

1141
00:42:51,650 --> 00:42:55,369
<font color="#CCCCCC">revoked</font><font color="#E5E5E5"> the cert they promised they</font>

1142
00:42:53,690 --> 00:42:56,630
would never do it again<font color="#CCCCCC"> and more</font>

1143
00:42:55,369 --> 00:42:59,240
important they said something<font color="#CCCCCC"> which i</font>

1144
00:42:56,630 --> 00:43:02,270
<font color="#E5E5E5">really agree with they said many other</font>

1145
00:42:59,240 --> 00:43:05,419
of our peers in the CA world have<font color="#E5E5E5"> done</font>

1146
00:43:02,270 --> 00:43:07,670
this as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> talk about TLS 1</font>

1147
00:43:05,420 --> 00:43:10,220
and TLS 2 and<font color="#E5E5E5"> beast and crime and all</font>

1148
00:43:07,670 --> 00:43:12,770
these attacks<font color="#CCCCCC"> but the CA system is</font>

1149
00:43:10,220 --> 00:43:14,450
heavily<font color="#E5E5E5"> broken in my opinion and we need</font>

1150
00:43:12,770 --> 00:43:15,980
something better<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> really don't</font><font color="#CCCCCC"> know</font>

1151
00:43:14,450 --> 00:43:18,740
<font color="#E5E5E5">what</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> so here's some things that</font>

1152
00:43:15,980 --> 00:43:20,720
we can do to<font color="#E5E5E5"> get around the problems of</font>

1153
00:43:18,740 --> 00:43:22,520
the<font color="#E5E5E5"> CA system the number one thing is</font>

1154
00:43:20,720 --> 00:43:24,770
certificate pinning<font color="#E5E5E5"> when you're</font><font color="#CCCCCC"> building</font>

1155
00:43:22,520 --> 00:43:27,320
a mobile<font color="#E5E5E5"> app you</font><font color="#CCCCCC"> can take the public</font>

1156
00:43:24,770 --> 00:43:30,380
certificate<font color="#E5E5E5"> that's been signed by a CA</font>

1157
00:43:27,320 --> 00:43:31,790
and<font color="#CCCCCC"> hard-coded in your app</font><font color="#E5E5E5"> that way if</font>

1158
00:43:30,380 --> 00:43:33,680
someone's man the<font color="#CCCCCC"> middling you and</font>

1159
00:43:31,790 --> 00:43:36,230
giving you<font color="#E5E5E5"> a fake</font><font color="#CCCCCC"> fraudulent but</font>

1160
00:43:33,680 --> 00:43:37,669
<font color="#E5E5E5">properly signed certificate you'll</font>

1161
00:43:36,230 --> 00:43:39,740
detect that because it<font color="#E5E5E5"> doesn't match</font>

1162
00:43:37,670 --> 00:43:41,630
what's<font color="#E5E5E5"> truly on your</font><font color="#CCCCCC"> server this doesn't</font>

1163
00:43:39,740 --> 00:43:44,810
work in browsers yet<font color="#CCCCCC"> Chrome and</font><font color="#E5E5E5"> Firefox</font>

1164
00:43:41,630 --> 00:43:47,600
will<font color="#E5E5E5"> support it but mobile apps Android</font>

1165
00:43:44,810 --> 00:43:50,660
the Android Chrome browser supports this

1166
00:43:47,600 --> 00:43:52,960
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> the dotnet infrastructure API</font>

1167
00:43:50,660 --> 00:43:56,720
support this this<font color="#E5E5E5"> is a way to detect if</font>

1168
00:43:52,960 --> 00:43:58,640
someone has has a fraudulent private CA

1169
00:43:56,720 --> 00:44:00,319
certificate and is<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to man the</font>

1170
00:43:58,640 --> 00:44:03,529
middle you with it by<font color="#E5E5E5"> giving you a</font>

1171
00:44:00,320 --> 00:44:05,900
fraudulent<font color="#E5E5E5"> but properly signed by a CA</font>

1172
00:44:03,530 --> 00:44:09,080
certificate<font color="#E5E5E5"> there's also something that</font>

1173
00:44:05,900 --> 00:44:11,869
<font color="#E5E5E5">Nick Galbreath talked about yesterday in</font>

1174
00:44:09,080 --> 00:44:14,980
his<font color="#CCCCCC"> keynote he talked about certificate</font>

1175
00:44:11,869 --> 00:44:17,090
creation certificate creation

1176
00:44:14,980 --> 00:44:19,220
transparency where<font color="#E5E5E5"> Google is driving</font>

1177
00:44:17,090 --> 00:44:21,320
this where they want to publicize every

1178
00:44:19,220 --> 00:44:23,509
single certificate created by every

1179
00:44:21,320 --> 00:44:25,130
single<font color="#E5E5E5"> CA just put that into public text</font>

1180
00:44:23,510 --> 00:44:26,960
file<font color="#CCCCCC"> so we had the</font><font color="#E5E5E5"> transparency of</font>

1181
00:44:25,130 --> 00:44:29,000
seeing what certificates are being

1182
00:44:26,960 --> 00:44:30,710
created<font color="#CCCCCC"> so if some CA is creating their</font>

1183
00:44:29,000 --> 00:44:32,770
own fraudulent certificate for<font color="#E5E5E5"> Facebook</font>

1184
00:44:30,710 --> 00:44:34,860
we will<font color="#CCCCCC"> see</font><font color="#E5E5E5"> that this will also help</font>

1185
00:44:32,770 --> 00:44:37,080
<font color="#E5E5E5">some of the problems we see</font>

1186
00:44:34,860 --> 00:44:39,210
see a system<font color="#E5E5E5"> so that's cryptic</font><font color="#CCCCCC"> desperate</font>

1187
00:44:37,080 --> 00:44:41,100
rate that's<font color="#E5E5E5"> transport security</font><font color="#CCCCCC"> again the</font>

1188
00:44:39,210 --> 00:44:43,500
<font color="#E5E5E5">best we have is certificate pinning we</font>

1189
00:44:41,100 --> 00:44:46,470
have strict Transport Security<font color="#E5E5E5"> we have</font>

1190
00:44:43,500 --> 00:44:48,630
certificate transparency certificate

1191
00:44:46,470 --> 00:44:51,990
creation transparency<font color="#E5E5E5"> these will do a</font>

1192
00:44:48,630 --> 00:44:54,360
lot<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make the</font><font color="#E5E5E5"> current SSL HTTPS system</font>

1193
00:44:51,990 --> 00:44:57,060
more sound<font color="#E5E5E5"> from an authenticity point of</font>

1194
00:44:54,360 --> 00:44:59,760
view what about cryptographic storage we

1195
00:44:57,060 --> 00:45:01,950
need to<font color="#CCCCCC"> you tend to recommend</font><font color="#E5E5E5"> a EES in</font>

1196
00:44:59,760 --> 00:45:03,300
Java the default is ECB mode which is

1197
00:45:01,950 --> 00:45:06,270
<font color="#E5E5E5">basically playing text we're</font>

1198
00:45:03,300 --> 00:45:09,330
recommending now GCM mode<font color="#E5E5E5"> which is not</font>

1199
00:45:06,270 --> 00:45:11,400
not available in most languages or

1200
00:45:09,330 --> 00:45:13,770
browsers<font color="#E5E5E5"> so we're really stuck with a</font><font color="#CCCCCC"> ES</font>

1201
00:45:11,400 --> 00:45:15,210
CBC mode we need<font color="#CCCCCC"> a unique IV per</font><font color="#E5E5E5"> message</font>

1202
00:45:13,770 --> 00:45:17,220
and the proper padding and proper key

1203
00:45:15,210 --> 00:45:18,690
<font color="#E5E5E5">storage and confidentiality</font><font color="#CCCCCC"> we need to</font>

1204
00:45:17,220 --> 00:45:20,580
do that that gives<font color="#CCCCCC"> us</font><font color="#E5E5E5"> confidentiality</font>

1205
00:45:18,690 --> 00:45:21,810
<font color="#E5E5E5">then we H</font><font color="#CCCCCC"> Mak your ciphertext to</font><font color="#E5E5E5"> get</font>

1206
00:45:20,580 --> 00:45:23,520
integrity you want to drive<font color="#E5E5E5"> that</font>

1207
00:45:21,810 --> 00:45:24,840
integrity<font color="#E5E5E5"> and confidentiality keys from</font>

1208
00:45:23,520 --> 00:45:25,980
the same master<font color="#E5E5E5"> key</font><font color="#CCCCCC"> and don't</font><font color="#E5E5E5"> forget to</font>

1209
00:45:24,840 --> 00:45:29,100
narrate a master key from<font color="#E5E5E5"> a good random</font>

1210
00:45:25,980 --> 00:45:30,510
<font color="#CCCCCC">source good luck with that yeah so most</font>

1211
00:45:29,100 --> 00:45:32,240
developers are<font color="#E5E5E5"> not gonna get this right</font>

1212
00:45:30,510 --> 00:45:33,450
<font color="#E5E5E5">and frankly</font><font color="#CCCCCC"> some of the</font><font color="#E5E5E5"> best</font>

1213
00:45:32,240 --> 00:45:35,250
cryptography

1214
00:45:33,450 --> 00:45:37,319
developers in the world<font color="#E5E5E5"> are not getting</font>

1215
00:45:35,250 --> 00:45:39,510
<font color="#E5E5E5">this right so again this is</font><font color="#CCCCCC"> kind of</font>

1216
00:45:37,320 --> 00:45:42,300
framework issue<font color="#E5E5E5"> bring in Google keys our</font>

1217
00:45:39,510 --> 00:45:46,620
<font color="#E5E5E5">Google key</font><font color="#CCCCCC"> SAR is one of the best</font><font color="#E5E5E5"> Java</font>

1218
00:45:42,300 --> 00:45:49,440
<font color="#CCCCCC">sets Java Python and C</font><font color="#E5E5E5"> and C++ based</font><font color="#CCCCCC"> one</font>

1219
00:45:46,620 --> 00:45:51,450
<font color="#CCCCCC">of the best applied crypto libraries for</font>

1220
00:45:49,440 --> 00:45:53,190
<font color="#E5E5E5">cryptographic</font><font color="#CCCCCC"> storage I've seen</font><font color="#E5E5E5"> the</font>

1221
00:45:51,450 --> 00:45:55,080
developer will once you've configured it

1222
00:45:53,190 --> 00:45:58,470
developer will need to do two things

1223
00:45:55,080 --> 00:46:01,110
<font color="#E5E5E5">krypter encrypt secret message and then</font>

1224
00:45:58,470 --> 00:46:04,379
<font color="#E5E5E5">krypter decrypt ciphertext that's the</font>

1225
00:46:01,110 --> 00:46:06,960
only<font color="#CCCCCC"> API</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I want developers</font><font color="#E5E5E5"> to have</font>

1226
00:46:04,380 --> 00:46:08,790
<font color="#E5E5E5">to hit to</font><font color="#CCCCCC"> do good cryptographic storage</font>

1227
00:46:06,960 --> 00:46:11,460
and we can figure it to point<font color="#E5E5E5"> to an HSM</font>

1228
00:46:08,790 --> 00:46:13,320
or some key<font color="#E5E5E5"> management even better take</font>

1229
00:46:11,460 --> 00:46:15,270
this whole system<font color="#E5E5E5"> and isolate</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in a</font>

1230
00:46:13,320 --> 00:46:17,220
separate<font color="#E5E5E5"> web service even if your web</font>

1231
00:46:15,270 --> 00:46:20,970
app is compromised your cryptographic

1232
00:46:17,220 --> 00:46:23,100
<font color="#CCCCCC">applied crypto is not compromised</font><font color="#E5E5E5"> this</font>

1233
00:46:20,970 --> 00:46:25,500
is the way to roll it's a open source

1234
00:46:23,100 --> 00:46:27,450
library<font color="#E5E5E5"> been around for several years</font>

1235
00:46:25,500 --> 00:46:30,450
it's well maintained<font color="#CCCCCC"> it gets all the</font>

1236
00:46:27,450 --> 00:46:32,759
crazy<font color="#E5E5E5"> things</font><font color="#CCCCCC"> like the proper padding</font>

1237
00:46:30,450 --> 00:46:34,410
which mode to use<font color="#E5E5E5"> an</font><font color="#CCCCCC"> IV management</font><font color="#E5E5E5"> in</font>

1238
00:46:32,760 --> 00:46:36,150
this<font color="#E5E5E5"> was a sh invective management it</font>

1239
00:46:34,410 --> 00:46:37,890
gets all<font color="#E5E5E5"> that stuff right so I highly</font>

1240
00:46:36,150 --> 00:46:39,810
<font color="#CCCCCC">recommend</font><font color="#E5E5E5"> this kind of thinking for any</font>

1241
00:46:37,890 --> 00:46:41,370
language I<font color="#E5E5E5"> don't I don't know how to</font>

1242
00:46:39,810 --> 00:46:44,630
recommend this for other<font color="#E5E5E5"> languages well</font>

1243
00:46:41,370 --> 00:46:48,029
this will give us Java Python<font color="#E5E5E5"> and C++</font>

1244
00:46:44,630 --> 00:46:48,380
<font color="#E5E5E5">industrial class crypto next we have how</font>

1245
00:46:48,030 --> 00:46:50,890
much

1246
00:46:48,380 --> 00:46:53,690
<font color="#E5E5E5">I have by the way</font><font color="#CCCCCC"> how we doing</font><font color="#E5E5E5"> on time</font>

1247
00:46:50,890 --> 00:46:55,788
<font color="#E5E5E5">I'm out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> I see your sign for a</font>

1248
00:46:53,690 --> 00:46:59,289
second<font color="#CCCCCC"> we are we really out of</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> okay</font>

1249
00:46:55,789 --> 00:47:02,509
<font color="#CCCCCC">we are so a player and chosen detection</font>

1250
00:46:59,289 --> 00:47:04,970
<font color="#CCCCCC">again abyss this is the</font><font color="#E5E5E5"> last few slides</font>

1251
00:47:02,509 --> 00:47:07,430
<font color="#E5E5E5">I'll do blatant sequel injection attacks</font>

1252
00:47:04,970 --> 00:47:09,259
we can<font color="#E5E5E5"> detect that at the request and I</font>

1253
00:47:07,430 --> 00:47:10,240
did not believe<font color="#CCCCCC"> that even just</font><font color="#E5E5E5"> a few</font>

1254
00:47:09,259 --> 00:47:13,460
<font color="#E5E5E5">months</font><font color="#CCCCCC"> ago</font>

1255
00:47:10,240 --> 00:47:16,578
<font color="#CCCCCC">Zane and Nick have really led the</font>

1256
00:47:13,460 --> 00:47:18,980
<font color="#CCCCCC">research in building</font><font color="#E5E5E5"> really awesome</font>

1257
00:47:16,579 --> 00:47:22,700
techniques to detect sequel injection

1258
00:47:18,980 --> 00:47:25,819
<font color="#CCCCCC">you know what the name of</font><font color="#E5E5E5"> Nick's library</font>

1259
00:47:22,700 --> 00:47:28,759
is that<font color="#CCCCCC"> does this pardon me</font><font color="#E5E5E5"> we have live</font>

1260
00:47:25,819 --> 00:47:30,140
inject which is a input<font color="#E5E5E5"> validation layer</font>

1261
00:47:28,759 --> 00:47:32,329
to detect<font color="#CCCCCC"> possible sequel injection</font>

1262
00:47:30,140 --> 00:47:34,368
attacks<font color="#E5E5E5"> there's also a technique where</font>

1263
00:47:32,329 --> 00:47:37,190
you have your table names in your

1264
00:47:34,369 --> 00:47:39,410
<font color="#E5E5E5">database have them be really unique</font>

1265
00:47:37,190 --> 00:47:41,029
names not things like<font color="#E5E5E5"> user that we're</font>

1266
00:47:39,410 --> 00:47:44,480
going<font color="#CCCCCC"> to see that word a lot in normal</font>

1267
00:47:41,029 --> 00:47:46,700
<font color="#CCCCCC">input</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> TLT be underscore user</font>

1268
00:47:44,480 --> 00:47:48,680
will never see that in<font color="#E5E5E5"> normal</font><font color="#CCCCCC"> input when</font>

1269
00:47:46,700 --> 00:47:50,868
we do see a<font color="#E5E5E5"> table name in</font><font color="#CCCCCC"> a request we</font>

1270
00:47:48,680 --> 00:47:52,519
can<font color="#CCCCCC"> usually safely just reject it</font><font color="#E5E5E5"> to</font>

1271
00:47:50,869 --> 00:47:55,539
stop potential sequel injection attacks

1272
00:47:52,519 --> 00:47:57,919
<font color="#CCCCCC">these do not</font><font color="#E5E5E5"> solve all sequel injection</font>

1273
00:47:55,539 --> 00:48:00,019
<font color="#E5E5E5">potential problems but it lets you know</font>

1274
00:47:57,920 --> 00:48:03,170
really early<font color="#CCCCCC"> on when you're being</font>

1275
00:48:00,019 --> 00:48:05,689
<font color="#E5E5E5">attacked last note things like a radio</font>

1276
00:48:03,170 --> 00:48:07,579
button<font color="#E5E5E5"> suppose</font><font color="#CCCCCC"> our checkbox</font><font color="#E5E5E5"> if you have</font>

1277
00:48:05,690 --> 00:48:09,769
a<font color="#CCCCCC"> checkbox</font><font color="#E5E5E5"> you should get back to values</font>

1278
00:48:07,579 --> 00:48:11,720
<font color="#CCCCCC">if it's checked</font><font color="#E5E5E5"> you get the value of the</font>

1279
00:48:09,769 --> 00:48:14,269
checkbox<font color="#E5E5E5"> if it's unchecked to get an</font>

1280
00:48:11,720 --> 00:48:16,759
<font color="#E5E5E5">empty string if anything else shows up</font>

1281
00:48:14,269 --> 00:48:19,008
<font color="#CCCCCC">in the request for that checkbox you are</font>

1282
00:48:16,759 --> 00:48:21,019
<font color="#E5E5E5">being</font><font color="#CCCCCC"> attacked</font><font color="#E5E5E5"> someone</font><font color="#CCCCCC"> has an</font>

1283
00:48:19,009 --> 00:48:22,730
intercepting proxy and<font color="#E5E5E5"> this is messing</font>

1284
00:48:21,019 --> 00:48:24,919
with your application in a way that a

1285
00:48:22,730 --> 00:48:26,839
<font color="#CCCCCC">user with a normal browser can never do</font>

1286
00:48:24,920 --> 00:48:28,400
and<font color="#E5E5E5"> the loss we have the app sensor</font>

1287
00:48:26,839 --> 00:48:31,759
project that<font color="#E5E5E5"> helped with this in Java</font>

1288
00:48:28,400 --> 00:48:34,460
<font color="#E5E5E5">there are so many ways to add intrusion</font>

1289
00:48:31,759 --> 00:48:36,259
detection in your app<font color="#E5E5E5"> easily so you can</font>

1290
00:48:34,460 --> 00:48:39,259
detect<font color="#E5E5E5"> when you're under</font><font color="#CCCCCC"> attack very</font>

1291
00:48:36,259 --> 00:48:44,869
early almost nobody does<font color="#E5E5E5"> this do you do</font>

1292
00:48:39,259 --> 00:48:46,700
the same do you<font color="#E5E5E5"> do this do you do I mean</font>

1293
00:48:44,869 --> 00:48:49,579
just in<font color="#CCCCCC"> general do you</font><font color="#E5E5E5"> do input</font><font color="#CCCCCC"> in true</font>

1294
00:48:46,700 --> 00:48:51,859
detection in your apps very<font color="#E5E5E5"> few people</font>

1295
00:48:49,579 --> 00:48:53,750
do<font color="#E5E5E5"> this and if you did you would</font><font color="#CCCCCC"> have so</font>

1296
00:48:51,859 --> 00:48:55,369
<font color="#CCCCCC">much knowledge</font><font color="#E5E5E5"> early on whether you're</font>

1297
00:48:53,750 --> 00:48:56,450
whether you're being<font color="#CCCCCC"> attacked</font><font color="#E5E5E5"> when do</font>

1298
00:48:55,369 --> 00:48:58,039
most<font color="#E5E5E5"> people know when they've</font><font color="#CCCCCC"> been</font>

1299
00:48:56,450 --> 00:49:01,069
attacked when they see it<font color="#E5E5E5"> in the</font>

1300
00:48:58,039 --> 00:49:01,940
newspaper<font color="#E5E5E5"> right or see it on</font><font color="#CCCCCC"> pastebin</font><font color="#E5E5E5"> so</font>

1301
00:49:01,069 --> 00:49:04,788
this is my

1302
00:49:01,940 --> 00:49:06,530
this is my awareness<font color="#CCCCCC"> one-hour</font>

1303
00:49:04,789 --> 00:49:08,329
presentation how to<font color="#E5E5E5"> approach the cure</font>

1304
00:49:06,530 --> 00:49:10,520
code<font color="#CCCCCC"> I'm very grateful</font><font color="#E5E5E5"> you spent the</font>

1305
00:49:08,329 --> 00:49:12,619
time<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> here any questions I'm at</font>

1306
00:49:10,520 --> 00:49:15,049
Monaco on<font color="#E5E5E5"> at mana code on</font><font color="#CCCCCC"> twitter jimmy</font>

1307
00:49:12,619 --> 00:49:16,640
<font color="#CCCCCC">joste org is my</font><font color="#E5E5E5"> nonprofit address</font><font color="#CCCCCC"> Jim</font>

1308
00:49:15,049 --> 00:49:18,200
dot Monaco at white hat<font color="#E5E5E5"> SEC is my</font>

1309
00:49:16,640 --> 00:49:20,240
commercial address<font color="#E5E5E5"> and I'll put this</font>

1310
00:49:18,200 --> 00:49:21,020
presentation<font color="#CCCCCC"> up on SlideShare before the</font>

1311
00:49:20,240 --> 00:49:23,598
week is out

1312
00:49:21,020 --> 00:49:26,170
rock on<font color="#E5E5E5"> go write secure code</font><font color="#CCCCCC"> thank you</font>

1313
00:49:23,599 --> 00:49:26,170
<font color="#CCCCCC">very much everybody</font>

