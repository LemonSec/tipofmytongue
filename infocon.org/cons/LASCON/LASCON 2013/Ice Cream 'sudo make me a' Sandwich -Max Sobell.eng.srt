1
00:00:17,980 --> 00:00:23,509
thanks for coming<font color="#E5E5E5"> during</font><font color="#CCCCCC"> lunch time this</font>

2
00:00:21,320 --> 00:00:27,140
talks about<font color="#E5E5E5"> Android rooting it says</font>

3
00:00:23,509 --> 00:00:32,269
android 4.0 it's<font color="#E5E5E5"> really about android</font>

4
00:00:27,140 --> 00:00:36,320
4.x and if you compare<font color="#CCCCCC"> that to 2x ice</font>

5
00:00:32,270 --> 00:00:38,120
cream sudo make me a sandwich like you

6
00:00:36,320 --> 00:00:40,640
said I'm an independent<font color="#CCCCCC"> consultant I</font>

7
00:00:38,120 --> 00:00:42,199
used to work at intrepid us group<font color="#E5E5E5"> I was</font>

8
00:00:40,640 --> 00:00:45,769
a senior consultant their research

9
00:00:42,199 --> 00:00:47,949
co-director based out of New<font color="#CCCCCC"> York City</font>

10
00:00:45,769 --> 00:00:52,369
<font color="#E5E5E5">I've done some past research and NFC</font>

11
00:00:47,949 --> 00:00:54,589
mobile wallets NFC payments like if you

12
00:00:52,369 --> 00:00:58,489
tap your card and in a taxi<font color="#CCCCCC"> cab or</font>

13
00:00:54,589 --> 00:00:59,809
something some<font color="#E5E5E5"> Bluetooth stuff but today</font>

14
00:00:58,489 --> 00:01:03,439
we're talking about Android Open Source

15
00:00:59,809 --> 00:01:05,840
Project and OEMs what the OEMs add on

16
00:01:03,439 --> 00:01:08,509
top of<font color="#E5E5E5"> the android open source project</font>

17
00:01:05,840 --> 00:01:11,689
that we think of as one bundle of just

18
00:01:08,509 --> 00:01:13,869
<font color="#CCCCCC">Android and then the consequences of</font>

19
00:01:11,689 --> 00:01:16,699
what they've added what they've done

20
00:01:13,869 --> 00:01:19,340
kind of comparing that to stock<font color="#E5E5E5"> Android</font>

21
00:01:16,700 --> 00:01:21,979
will cover some OEM specific

22
00:01:19,340 --> 00:01:24,530
vulnerabilities and chips at some<font color="#CCCCCC"> some</font>

23
00:01:21,979 --> 00:01:26,869
clever back doors that OEMs have put

24
00:01:24,530 --> 00:01:28,670
into devices<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then we'll look at</font>

25
00:01:26,869 --> 00:01:31,340
pre-loaded applications and<font color="#E5E5E5"> I'll show</font>

26
00:01:28,670 --> 00:01:32,719
you guys a tool that I wrote<font color="#E5E5E5"> for kind of</font>

27
00:01:31,340 --> 00:01:36,679
<font color="#E5E5E5">getting a quick overview of what's on a</font>

28
00:01:32,719 --> 00:01:38,600
device just<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> clear these aren't 0</font>

29
00:01:36,679 --> 00:01:42,560
days can you<font color="#E5E5E5"> guys see the slides</font><font color="#CCCCCC"> ok they</font>

30
00:01:38,600 --> 00:01:45,939
look really dim to me I don't think

31
00:01:42,560 --> 00:01:49,340
increasing my brightness setting helps

32
00:01:45,939 --> 00:01:51,020
okay since it's such a small group if

33
00:01:49,340 --> 00:01:55,189
like something's unclear just<font color="#E5E5E5"> stop me</font>

34
00:01:51,020 --> 00:01:56,658
and ask a question yeah so just<font color="#E5E5E5"> to</font>

35
00:01:55,189 --> 00:01:58,100
record these aren't these aren't

36
00:01:56,659 --> 00:02:00,109
vulnerabilities that I'm releasing now

37
00:01:58,100 --> 00:02:01,669
<font color="#CCCCCC">and a lot of</font><font color="#E5E5E5"> them aren't even bugs that</font>

38
00:02:00,109 --> 00:02:05,630
I found they're just really great

39
00:02:01,670 --> 00:02:07,969
examples of what not to do and the

40
00:02:05,630 --> 00:02:10,818
devices<font color="#CCCCCC"> that I'm going to be using for a</font>

41
00:02:07,969 --> 00:02:13,370
demo I got these three devices from

42
00:02:10,818 --> 00:02:16,339
<font color="#E5E5E5">China Mobile at a friend in China and</font>

43
00:02:13,370 --> 00:02:19,040
you brought them back and I bought<font color="#E5E5E5"> a</font>

44
00:02:16,340 --> 00:02:20,660
prepaid sim so they're<font color="#CCCCCC"> on a network here</font>

45
00:02:19,040 --> 00:02:22,940
but they're<font color="#CCCCCC"> really cool and they've got</font>

46
00:02:20,660 --> 00:02:26,690
<font color="#E5E5E5">that they've got good examples of</font>

47
00:02:22,940 --> 00:02:27,950
talking<font color="#CCCCCC"> about so AOSP I'm going to use</font>

48
00:02:26,690 --> 00:02:29,960
it throughout<font color="#CCCCCC"> the presentation is the</font>

49
00:02:27,950 --> 00:02:33,890
android open source project and what we

50
00:02:29,960 --> 00:02:36,530
think of as<font color="#CCCCCC"> Android it's comprised of</font>

51
00:02:33,890 --> 00:02:38,839
<font color="#CCCCCC">the Android colonel hardware abstraction</font>

52
00:02:36,530 --> 00:02:40,010
layer which<font color="#CCCCCC"> is a like a system service</font>

53
00:02:38,840 --> 00:02:43,640
on a hardware abstraction layer

54
00:02:40,010 --> 00:02:46,579
definition and then all the system

55
00:02:43,640 --> 00:02:48,679
services so it's up<font color="#CCCCCC"> to the OEM that's</font>

56
00:02:46,580 --> 00:02:52,880
like the original equipment manufacturer

57
00:02:48,680 --> 00:02:55,160
<font color="#E5E5E5">Samsung HTC Huawei whoever to implement</font>

58
00:02:52,880 --> 00:02:57,019
that<font color="#CCCCCC"> Hal code and the drivers for</font>

59
00:02:55,160 --> 00:03:01,130
whatever Hardware they want to put<font color="#E5E5E5"> on</font>

60
00:02:57,020 --> 00:03:03,950
the device so AOSP can be like checked

61
00:03:01,130 --> 00:03:08,799
out and just built for several devices

62
00:03:03,950 --> 00:03:11,239
Nexus 4 7 10 all<font color="#E5E5E5"> the pure Nexus devices</font>

63
00:03:08,800 --> 00:03:13,040
other devices add on top of that on top

64
00:03:11,240 --> 00:03:14,450
and below so that's the portion that

65
00:03:13,040 --> 00:03:17,090
we're going<font color="#E5E5E5"> to cover not the android</font>

66
00:03:14,450 --> 00:03:18,739
open source project itself on the right

67
00:03:17,090 --> 00:03:21,020
here<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just see some examples is</font>

68
00:03:18,740 --> 00:03:23,030
just from<font color="#CCCCCC"> Google's</font><font color="#E5E5E5"> website like Wi-Fi</font>

69
00:03:21,020 --> 00:03:25,700
the company is<font color="#E5E5E5"> broadcom and that's a</font>

70
00:03:23,030 --> 00:03:29,989
proprietary driver proprietary interface

71
00:03:25,700 --> 00:03:32,540
to<font color="#E5E5E5"> Google's how that they written so</font>

72
00:03:29,989 --> 00:03:35,030
Google's not responsible for that the

73
00:03:32,540 --> 00:03:40,310
OEM or the manufacturer of the chipset

74
00:03:35,030 --> 00:03:42,890
is some background on device components

75
00:03:40,310 --> 00:03:44,270
just so<font color="#E5E5E5"> that we can cover you know how</font>

76
00:03:42,890 --> 00:03:46,369
the devices are actually rooted<font color="#CCCCCC"> the</font>

77
00:03:44,270 --> 00:03:47,930
first part of the<font color="#CCCCCC"> bootloader that's the</font>

78
00:03:46,370 --> 00:03:50,300
first thing<font color="#E5E5E5"> that's the code</font><font color="#CCCCCC"> that gets</font>

79
00:03:47,930 --> 00:03:53,300
loaded when you turn on<font color="#E5E5E5"> your device and</font>

80
00:03:50,300 --> 00:03:54,769
its main job is to well first boot your

81
00:03:53,300 --> 00:03:57,800
device but security wise to ensure that

82
00:03:54,769 --> 00:03:59,350
<font color="#CCCCCC">only secure sorry signed code can be</font>

83
00:03:57,800 --> 00:04:05,300
booted so that's either signed by the

84
00:03:59,350 --> 00:04:06,890
carrier in some cases or the OEM there's

85
00:04:05,300 --> 00:04:08,570
two ways to unlock the bootloader to

86
00:04:06,890 --> 00:04:09,799
stop it from booting that<font color="#CCCCCC"> signed code</font>

87
00:04:08,570 --> 00:04:11,690
which<font color="#CCCCCC"> is what you want if you're</font>

88
00:04:09,800 --> 00:04:13,970
installing custom rom<font color="#E5E5E5"> or doing anything</font>

89
00:04:11,690 --> 00:04:15,760
to modify the device there's developer

90
00:04:13,970 --> 00:04:17,810
unlocking and exploit unlocking

91
00:04:15,760 --> 00:04:20,870
developer unlocking is a term and

92
00:04:17,810 --> 00:04:23,180
exploit unlocking is not but<font color="#CCCCCC"> I'll define</font>

93
00:04:20,870 --> 00:04:25,280
them as we<font color="#CCCCCC"> go and that's where we've</font>

94
00:04:23,180 --> 00:04:29,240
been seeing a lot of<font color="#CCCCCC"> portato roots come</font>

95
00:04:25,280 --> 00:04:30,890
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Android Open Source Project</font>

96
00:04:29,240 --> 00:04:33,169
bootloader is<font color="#E5E5E5"> fast food so you may</font><font color="#CCCCCC"> have</font>

97
00:04:30,890 --> 00:04:34,500
seen fast food it's got a ton of

98
00:04:33,169 --> 00:04:37,169
capabilities and<font color="#E5E5E5"> you usually</font>

99
00:04:34,500 --> 00:04:38,970
what carriers will do is modify faster

100
00:04:37,170 --> 00:04:42,780
you can strip out some of the capability

101
00:04:38,970 --> 00:04:45,570
to flash directly to the file system the

102
00:04:42,780 --> 00:04:48,599
recovery partition you may<font color="#CCCCCC"> have</font><font color="#E5E5E5"> heard of</font>

103
00:04:45,570 --> 00:04:51,960
clockworkmod recovery team win recovery

104
00:04:48,600 --> 00:04:54,450
project that will allow you to<font color="#E5E5E5"> write to</font>

105
00:04:51,960 --> 00:04:56,130
the file system as root pre-boot so you

106
00:04:54,450 --> 00:04:57,810
can boot into<font color="#E5E5E5"> the bootloader in a normal</font>

107
00:04:56,130 --> 00:05:00,350
boot process or you can boot into

108
00:04:57,810 --> 00:05:03,780
recovery and access the system image

109
00:05:00,350 --> 00:05:05,460
preview look at some<font color="#CCCCCC"> of the file systems</font>

110
00:05:03,780 --> 00:05:07,650
and permissions which is another kind of

111
00:05:05,460 --> 00:05:10,830
surprising place that a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the root</font>

112
00:05:07,650 --> 00:05:12,929
attacks come from / system should be

113
00:05:10,830 --> 00:05:17,789
mounted as read-only that contains some

114
00:05:12,930 --> 00:05:19,020
binaries data local prop was pre 44.2

115
00:05:17,790 --> 00:05:20,310
<font color="#E5E5E5">I've been looking through the source</font>

116
00:05:19,020 --> 00:05:22,950
tree and trying to<font color="#CCCCCC"> figure out when</font>

117
00:05:20,310 --> 00:05:26,940
exactly they started ignoring that I

118
00:05:22,950 --> 00:05:29,969
think<font color="#E5E5E5"> it's 4.2 default dot</font><font color="#CCCCCC"> prophet is</font>

119
00:05:26,940 --> 00:05:33,260
the replacement so even on post 4.2 if

120
00:05:29,970 --> 00:05:36,390
you put in a data local prop directive

121
00:05:33,260 --> 00:05:40,169
<font color="#E5E5E5">adbd the Android bugging bridge demon</font>

122
00:05:36,390 --> 00:05:44,820
running on your phone will ignore it and

123
00:05:40,169 --> 00:05:47,130
then we'll look at<font color="#E5E5E5"> symlink attacks like</font>

124
00:05:44,820 --> 00:05:48,960
we said bootloader allows booting

125
00:05:47,130 --> 00:05:50,280
unsigned code once it's unlocked there's

126
00:05:48,960 --> 00:05:52,979
a bunch of<font color="#CCCCCC"> different ways you can tell</font>

127
00:05:50,280 --> 00:05:55,799
if it's been unlocked and a bunch of

128
00:05:52,979 --> 00:05:57,270
different<font color="#E5E5E5"> ways to unlock it so HTC you</font>

129
00:05:55,800 --> 00:05:59,669
probably remember<font color="#E5E5E5"> s on and s off from</font>

130
00:05:57,270 --> 00:06:01,620
like the<font color="#E5E5E5"> early days of the HTC evo</font><font color="#CCCCCC"> and</font>

131
00:05:59,669 --> 00:06:04,799
all the cool like<font color="#CCCCCC"> 4-inch screen</font>

132
00:06:01,620 --> 00:06:07,050
<font color="#E5E5E5">smartphones there's unrevoked</font><font color="#CCCCCC"> i think</font>

133
00:06:04,800 --> 00:06:08,190
which was a permanent s on us off you

134
00:06:07,050 --> 00:06:10,020
don't need<font color="#E5E5E5"> to do that anymore you just</font>

135
00:06:08,190 --> 00:06:14,190
need to unlock the bootloader if she has

136
00:06:10,020 --> 00:06:18,750
broken it down so s on an S off s on

137
00:06:14,190 --> 00:06:20,100
protects hboot and the radio which you

138
00:06:18,750 --> 00:06:24,510
don't<font color="#E5E5E5"> care about if you're writing a</font>

139
00:06:20,100 --> 00:06:30,570
custom rom to flush system<font color="#E5E5E5"> and a custom</font>

140
00:06:24,510 --> 00:06:33,120
custom kernel next excuse me next this

141
00:06:30,570 --> 00:06:35,070
<font color="#CCCCCC">is just google with a lock unlock symbol</font>

142
00:06:33,120 --> 00:06:37,169
<font color="#CCCCCC">you've probably</font><font color="#E5E5E5"> seen that on your Nexus</font>

143
00:06:35,070 --> 00:06:39,870
devices and then Qualcomm secure boot

144
00:06:37,169 --> 00:06:40,950
<font color="#CCCCCC">enable/disable</font><font color="#E5E5E5"> so two very different</font>

145
00:06:39,870 --> 00:06:44,220
scenarios for unlocking the bootloader

146
00:06:40,950 --> 00:06:46,590
the first one is developer unlocking

147
00:06:44,220 --> 00:06:47,440
<font color="#E5E5E5">where white / data which is all of your</font>

148
00:06:46,590 --> 00:06:49,570
personal

149
00:06:47,440 --> 00:06:51,610
private data and then exploit what it

150
00:06:49,570 --> 00:06:57,040
doesn't wipe data and it would allow

151
00:06:51,610 --> 00:06:58,870
someone to gain root that way so when a

152
00:06:57,040 --> 00:07:00,700
bootloader is locked this is what it

153
00:06:58,870 --> 00:07:04,050
looks like on the<font color="#E5E5E5"> left is an HTC you can</font>

154
00:07:00,700 --> 00:07:07,060
see it<font color="#E5E5E5"> has both the locked and the S on</font>

155
00:07:04,050 --> 00:07:09,940
flags and then on the right you see a

156
00:07:07,060 --> 00:07:12,040
bad picture<font color="#E5E5E5"> Samsung official official</font>

157
00:07:09,940 --> 00:07:14,170
and Qualcomm secure boot<font color="#CCCCCC"> enabled so</font>

158
00:07:12,040 --> 00:07:21,310
that's<font color="#E5E5E5"> how you know those boot loaders</font>

159
00:07:14,170 --> 00:07:24,700
are locked so we were to unlock

160
00:07:21,310 --> 00:07:27,220
bootloader via an exploit um<font color="#CCCCCC"> it's</font>

161
00:07:24,700 --> 00:07:29,349
<font color="#CCCCCC">probably not going to wipe the / data</font>

162
00:07:27,220 --> 00:07:31,480
partition and leave your leave your

163
00:07:29,350 --> 00:07:33,010
personal data on the device so unrevoked

164
00:07:31,480 --> 00:07:36,340
as an example of that we<font color="#CCCCCC"> mentioned</font>

165
00:07:33,010 --> 00:07:38,530
before that was HTC only moto choppers

166
00:07:36,340 --> 00:07:40,239
<font color="#E5E5E5">at dan rosenberg exploit and it was</font>

167
00:07:38,530 --> 00:07:42,719
named moto chopper<font color="#CCCCCC"> i think can found it</font>

168
00:07:40,240 --> 00:07:46,060
on a motorola device but it works across

169
00:07:42,720 --> 00:07:48,640
lots of different devices and it's a

170
00:07:46,060 --> 00:07:51,760
chipset specific<font color="#CCCCCC"> bone that will cover</font>

171
00:07:48,640 --> 00:07:54,190
later on Odin is a leak tool from

172
00:07:51,760 --> 00:07:58,690
Samsung that allows you to flash a

173
00:07:54,190 --> 00:08:01,570
system image and then I'm heimdal<font color="#CCCCCC"> team</font>

174
00:07:58,690 --> 00:08:04,510
<font color="#CCCCCC">doll is the open source implementation</font>

175
00:08:01,570 --> 00:08:07,150
uses the same protocol but it can be

176
00:08:04,510 --> 00:08:10,480
updated<font color="#E5E5E5"> like an open source project so</font>

177
00:08:07,150 --> 00:08:12,630
all these data the data partition is not

178
00:08:10,480 --> 00:08:15,010
clearance these are the exploit unlock

179
00:08:12,630 --> 00:08:17,260
examples if you wanted to<font color="#CCCCCC"> developer on</font>

180
00:08:15,010 --> 00:08:20,740
<font color="#CCCCCC">lock troopers loader which is supported</font>

181
00:08:17,260 --> 00:08:24,550
by a bunch of OEMs HTC dev I think was

182
00:08:20,740 --> 00:08:28,450
the first one it just<font color="#CCCCCC"> uses fast food you</font>

183
00:08:24,550 --> 00:08:29,830
feed a device identifier token today she

184
00:08:28,450 --> 00:08:32,890
see website and they come back<font color="#CCCCCC"> with a</font>

185
00:08:29,830 --> 00:08:36,699
device token you feed that<font color="#E5E5E5"> to fastboot</font>

186
00:08:32,890 --> 00:08:38,770
an unlock your bootloader and it wipes /

187
00:08:36,700 --> 00:08:42,729
data so<font color="#E5E5E5"> you an attacker couldn't do that</font>

188
00:08:38,770 --> 00:08:45,520
to get<font color="#E5E5E5"> access to your data HTC</font><font color="#CCCCCC"> sanction</font>

189
00:08:42,729 --> 00:08:49,120
some of the<font color="#E5E5E5"> carrier's I think a vast HTC</font>

190
00:08:45,520 --> 00:08:51,819
to to take their devices off so if you

191
00:08:49,120 --> 00:08:55,060
have a device that you bought directly

192
00:08:51,820 --> 00:08:56,800
from HTC you're going to be<font color="#E5E5E5"> able to</font>

193
00:08:55,060 --> 00:08:58,329
unlock it this way if you went through

194
00:08:56,800 --> 00:09:01,719
the carrier subsidy program maybe you

195
00:08:58,330 --> 00:09:04,220
can't now<font color="#E5E5E5"> Motorola does the same thing</font>

196
00:09:01,720 --> 00:09:06,679
once you've unlocked them either by

197
00:09:04,220 --> 00:09:08,119
exploit or developer unlock you'll see

198
00:09:06,679 --> 00:09:10,069
this so on the left you can see it still

199
00:09:08,119 --> 00:09:13,429
says s on right<font color="#E5E5E5"> it's protecting hboot in</font>

200
00:09:10,069 --> 00:09:15,858
the radio but now you can flash unsigned

201
00:09:13,429 --> 00:09:18,019
code to the<font color="#E5E5E5"> system partition or the boot</font>

202
00:09:15,859 --> 00:09:19,369
partition or recovery partition this<font color="#E5E5E5"> is</font>

203
00:09:18,019 --> 00:09:22,910
unlocked on the top and on<font color="#CCCCCC"> the right</font>

204
00:09:19,369 --> 00:09:24,529
there custom custom and secure boot

205
00:09:22,910 --> 00:09:29,238
stone table which does a similar thing

206
00:09:24,529 --> 00:09:33,439
<font color="#E5E5E5">to</font><font color="#CCCCCC"> a soph an oem bootloader unlock is</font>

207
00:09:29,239 --> 00:09:37,009
super simple this was on my Nexus Nexus

208
00:09:33,439 --> 00:09:38,480
7 nice you<font color="#E5E5E5"> don't it's the same command</font>

209
00:09:37,009 --> 00:09:40,309
as HTC but you don't need to feed at

210
00:09:38,480 --> 00:09:42,259
that<font color="#E5E5E5"> identifier token you just unlock</font>

211
00:09:40,309 --> 00:09:43,488
you get the screen on the right unlock

212
00:09:42,259 --> 00:09:46,220
bootloader may void warranty you're

213
00:09:43,489 --> 00:09:48,410
<font color="#E5E5E5">going to wipe all your data yes and then</font>

214
00:09:46,220 --> 00:09:49,939
on the left you can see lockstate unlock

215
00:09:48,410 --> 00:09:52,160
it's really simple to do with the

216
00:09:49,939 --> 00:09:55,579
developer way more complex to do at the

217
00:09:52,160 --> 00:09:58,429
exploit way once you unlock your

218
00:09:55,579 --> 00:10:00,019
<font color="#CCCCCC">bootloader it means that unsigned code</font>

219
00:09:58,429 --> 00:10:02,358
can be<font color="#CCCCCC"> flashed on your device you</font>

220
00:10:00,019 --> 00:10:04,459
probably want to relock it after this is

221
00:10:02,359 --> 00:10:06,290
something i don't think i've ever seen

222
00:10:04,459 --> 00:10:10,008
on instructions for a routing attack

223
00:10:06,290 --> 00:10:12,259
this<font color="#E5E5E5"> actually relock your bootloader if</font>

224
00:10:10,009 --> 00:10:15,169
you're using fast food it's really

225
00:10:12,259 --> 00:10:16,730
simple right fastboot OEM walk obviously

226
00:10:15,169 --> 00:10:18,410
it doesn't wipe your data to go from<font color="#CCCCCC"> a</font>

227
00:10:16,730 --> 00:10:22,910
less secure state to a more secure<font color="#E5E5E5"> site</font>

228
00:10:18,410 --> 00:10:23,929
on<font color="#E5E5E5"> the right now it's locked once you</font>

229
00:10:22,910 --> 00:10:27,488
want like the bootloader though you

230
00:10:23,929 --> 00:10:30,079
still have root all it<font color="#E5E5E5"> does is actually</font>

231
00:10:27,489 --> 00:10:32,480
it's<font color="#E5E5E5"> the first step right it lets you</font>

232
00:10:30,079 --> 00:10:34,449
flash the unsigned code so the<font color="#E5E5E5"> next step</font>

233
00:10:32,480 --> 00:10:37,100
is<font color="#E5E5E5"> usually a flash a custom rom or</font>

234
00:10:34,449 --> 00:10:39,889
custom kernel if you really want<font color="#CCCCCC"> to or</font>

235
00:10:37,100 --> 00:10:48,259
recovery image so the recovery image is

236
00:10:39,889 --> 00:10:50,629
super useful like<font color="#E5E5E5"> I said he was not know</font>

237
00:10:48,259 --> 00:10:52,069
it's it's not going to then like kick

238
00:10:50,629 --> 00:10:54,439
off whatever has been<font color="#E5E5E5"> on there it</font>

239
00:10:52,069 --> 00:10:57,349
unlocking it lets you write unsigned

240
00:10:54,439 --> 00:11:00,248
code locking it doesn't check if the

241
00:10:57,350 --> 00:11:00,249
code that's risen there's

242
00:11:03,750 --> 00:11:12,640
so the recovery image sea breeze will

243
00:11:08,620 --> 00:11:15,960
let you access the lets you access the

244
00:11:12,640 --> 00:11:20,260
file system as a low-level user<font color="#E5E5E5"> preview</font>

245
00:11:15,960 --> 00:11:23,380
so you can write<font color="#E5E5E5"> a</font><font color="#CCCCCC"> root binary to device</font>

246
00:11:20,260 --> 00:11:26,319
or you can back up the device device

247
00:11:23,380 --> 00:11:27,900
imaging so it's really really<font color="#CCCCCC"> useful and</font>

248
00:11:26,320 --> 00:11:32,050
that's that's a way that we see a lot of

249
00:11:27,900 --> 00:11:35,980
really attacks take place<font color="#CCCCCC"> ok finally we</font>

250
00:11:32,050 --> 00:11:39,099
have root but what does root actually

251
00:11:35,980 --> 00:11:41,560
mean on an Android device instance<font color="#E5E5E5"> Linux</font>

252
00:11:39,100 --> 00:11:45,700
face all it is is<font color="#CCCCCC"> a binary with a</font><font color="#E5E5E5"> set</font>

253
00:11:41,560 --> 00:11:48,430
uid fit somewhere on the file system so

254
00:11:45,700 --> 00:11:51,100
obviously you need you need<font color="#E5E5E5"> root to put</font>

255
00:11:48,430 --> 00:11:54,310
that binary on the device but once it's

256
00:11:51,100 --> 00:11:57,910
on there anyone who can execute that

257
00:11:54,310 --> 00:11:59,890
binary gets a root shell the other

258
00:11:57,910 --> 00:12:01,870
<font color="#CCCCCC">option is debugging route this is</font>

259
00:11:59,890 --> 00:12:04,449
supported by the<font color="#E5E5E5"> Android debugging</font>

260
00:12:01,870 --> 00:12:08,260
bridge demon and if it<font color="#E5E5E5"> sees one of these</font>

261
00:12:04,450 --> 00:12:13,420
directives the demon will give em season

262
00:12:08,260 --> 00:12:16,300
<font color="#E5E5E5">will get the next to a root shell that's</font>

263
00:12:13,420 --> 00:12:19,900
not something that that applications can

264
00:12:16,300 --> 00:12:26,890
use that's giving only<font color="#E5E5E5"> for Android debug</font>

265
00:12:19,900 --> 00:12:32,260
bridge<font color="#CCCCCC"> ok so because it's just a binary</font>

266
00:12:26,890 --> 00:12:35,050
it's a standard Linux binary it's pretty

267
00:12:32,260 --> 00:12:37,630
hard to detect so we've seen a lot of

268
00:12:35,050 --> 00:12:40,209
applications look for evidence by

269
00:12:37,630 --> 00:12:41,380
<font color="#E5E5E5">looking at super user that APK seeing if</font>

270
00:12:40,210 --> 00:12:44,530
that's installed or some of the other

271
00:12:41,380 --> 00:12:46,060
super user managers systems map it is

272
00:12:44,530 --> 00:12:47,980
read right if there's<font color="#E5E5E5"> junk and data</font>

273
00:12:46,060 --> 00:12:50,109
local temp where a lot of kind of one

274
00:12:47,980 --> 00:12:54,730
click<font color="#CCCCCC"> routes will leave remnants and</font>

275
00:12:50,110 --> 00:12:56,860
then in system there's been<font color="#E5E5E5"> an</font><font color="#CCCCCC"> ex pin if</font>

276
00:12:54,730 --> 00:12:58,480
there's<font color="#CCCCCC"> su binary there</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

277
00:12:56,860 --> 00:13:02,740
applications will then detect<font color="#E5E5E5"> root and</font>

278
00:12:58,480 --> 00:13:04,960
so you can't do X Y or Z you could set

279
00:13:02,740 --> 00:13:08,890
it as the<font color="#CCCCCC"> same name as an existing</font><font color="#E5E5E5"> set</font>

280
00:13:04,960 --> 00:13:09,970
uid binary on the on the valve system I

281
00:13:08,890 --> 00:13:11,850
don't know<font color="#E5E5E5"> what problems that would</font>

282
00:13:09,970 --> 00:13:13,960
cause I always<font color="#E5E5E5"> just name it block and</font>

283
00:13:11,850 --> 00:13:19,360
nothing has ever detected

284
00:13:13,960 --> 00:13:21,520
<font color="#E5E5E5">roof so I just keep it where it is set</font>

285
00:13:19,360 --> 00:13:24,480
it to blah and<font color="#E5E5E5"> then you can see their</font>

286
00:13:21,520 --> 00:13:27,550
blog is my new route when you ask you

287
00:13:24,480 --> 00:13:32,760
<font color="#E5E5E5">all right so we're going to that section</font>

288
00:13:27,550 --> 00:13:36,040
cool<font color="#CCCCCC"> okay so we'll cover will cover the</font>

289
00:13:32,760 --> 00:13:37,240
kind of overview of the<font color="#E5E5E5"> four-point-oh</font>

290
00:13:36,040 --> 00:13:39,819
<font color="#E5E5E5">routes that we've seen a divided them</font>

291
00:13:37,240 --> 00:13:41,650
into three categories the drive-by

292
00:13:39,820 --> 00:13:43,830
routes which are<font color="#E5E5E5"> really bad the user</font>

293
00:13:41,650 --> 00:13:47,110
initiated routes which are<font color="#E5E5E5"> kind of bad</font>

294
00:13:43,830 --> 00:13:49,810
bad for carriers not so bad for users if

295
00:13:47,110 --> 00:13:51,160
you're careful and then the data wiping

296
00:13:49,810 --> 00:13:54,939
routes which are really necessary for

297
00:13:51,160 --> 00:13:57,370
developers to access their devices so

298
00:13:54,940 --> 00:13:59,800
drive by routes something that if you

299
00:13:57,370 --> 00:14:01,860
left your phone<font color="#CCCCCC"> at a bar if someone had</font>

300
00:13:59,800 --> 00:14:05,500
five minutes with it or if you know

301
00:14:01,860 --> 00:14:06,730
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you wouldn't know the</font>

302
00:14:05,500 --> 00:14:11,920
device<font color="#E5E5E5"> had been routed maybe there's</font>

303
00:14:06,730 --> 00:14:13,980
malware if you leave pre for dot<font color="#E5E5E5"> too if</font>

304
00:14:11,920 --> 00:14:16,329
you leave atb enabled on your device

305
00:14:13,980 --> 00:14:19,360
anyone can connect to it and that opens

306
00:14:16,330 --> 00:14:21,250
up a lot more pathways for the drive-by

307
00:14:19,360 --> 00:14:24,100
routes so we're<font color="#E5E5E5"> going to assume</font><font color="#CCCCCC"> that you</font>

308
00:14:21,250 --> 00:14:25,390
haven't done<font color="#E5E5E5"> that post 4.2 there's the</font>

309
00:14:24,100 --> 00:14:27,430
signature checking so you have to

310
00:14:25,390 --> 00:14:29,800
authorize<font color="#E5E5E5"> per computer so you have</font><font color="#CCCCCC"> the</font>

311
00:14:27,430 --> 00:14:31,510
secure lock screen and someone takes

312
00:14:29,800 --> 00:14:34,329
your phone and plugs into their computer

313
00:14:31,510 --> 00:14:35,560
there's<font color="#E5E5E5"> going to be a pop-up behind the</font>

314
00:14:34,330 --> 00:14:38,110
lock screen that says do you want to

315
00:14:35,560 --> 00:14:39,550
authorize this computer if you don't

316
00:14:38,110 --> 00:14:41,710
interact with it the computer doesn't

317
00:14:39,550 --> 00:14:44,920
get debugging bridge access to your

318
00:14:41,710 --> 00:14:49,290
advice so we're assuming that that's<font color="#CCCCCC"> in</font>

319
00:14:44,920 --> 00:14:51,250
<font color="#E5E5E5">the case or a DB has been disabled</font>

320
00:14:49,290 --> 00:14:52,780
user-initiated routes you're going to

321
00:14:51,250 --> 00:14:54,580
have at least<font color="#E5E5E5"> some idea that your device</font>

322
00:14:52,780 --> 00:14:57,819
is rooted it may<font color="#E5E5E5"> require multiple</font>

323
00:14:54,580 --> 00:15:00,400
reboots some can be really simple some

324
00:14:57,820 --> 00:15:03,040
could<font color="#E5E5E5"> be complex it has</font><font color="#CCCCCC"> the possibility</font>

325
00:15:00,400 --> 00:15:05,939
of breaking your device and something

326
00:15:03,040 --> 00:15:08,290
<font color="#CCCCCC">that would</font><font color="#E5E5E5"> be too difficult for malware</font>

327
00:15:05,940 --> 00:15:10,270
to do so you're going to know<font color="#CCCCCC"> that your</font>

328
00:15:08,290 --> 00:15:13,000
device is rooted here and then data

329
00:15:10,270 --> 00:15:17,439
wiping<font color="#E5E5E5"> routes which is bootloader</font>

330
00:15:13,000 --> 00:15:18,850
unlocks right or reflashing some of the

331
00:15:17,440 --> 00:15:22,390
<font color="#CCCCCC">odin attacks would actually reflash the</font>

332
00:15:18,850 --> 00:15:23,920
whole device these are the ones that

333
00:15:22,390 --> 00:15:26,760
we're not particularly concerned with

334
00:15:23,920 --> 00:15:31,750
they're not a valid attack

335
00:15:26,760 --> 00:15:34,630
alright so<font color="#E5E5E5"> Android 4.0 why that talk is</font>

336
00:15:31,750 --> 00:15:38,140
called four-point-oh other than ice

337
00:15:34,630 --> 00:15:40,029
cream<font color="#E5E5E5"> sandwiches great name introduced</font>

338
00:15:38,140 --> 00:15:42,790
on device encryption if fully

339
00:15:40,029 --> 00:15:44,890
implemented SLR there's a SLR pre

340
00:15:42,790 --> 00:15:49,180
four-point-oh put this fully implemented

341
00:15:44,890 --> 00:15:52,779
it there's<font color="#E5E5E5"> DEP and makes it much harder</font>

342
00:15:49,180 --> 00:15:54,910
to write local exploits so we saw the

343
00:15:52,779 --> 00:15:58,060
local exploit count just<font color="#E5E5E5"> kind of tail</font>

344
00:15:54,910 --> 00:16:00,040
off so pre four-point-oh there were a

345
00:15:58,060 --> 00:16:02,739
time right<font color="#E5E5E5"> like it seems like every two</font>

346
00:16:00,040 --> 00:16:04,449
weeks someone had a new local<font color="#E5E5E5"> privilege</font>

347
00:16:02,740 --> 00:16:07,029
escalation exploit plug your<font color="#E5E5E5"> phone maybe</font>

348
00:16:04,450 --> 00:16:08,320
be run some script and some<font color="#E5E5E5"> random dude</font>

349
00:16:07,029 --> 00:16:12,700
on the internet and then you get<font color="#E5E5E5"> a root</font>

350
00:16:08,320 --> 00:16:16,180
shell but pose post four point oh we've

351
00:16:12,700 --> 00:16:18,400
seen like one ish right we saw the<font color="#CCCCCC"> ADB</font>

352
00:16:16,180 --> 00:16:19,959
recovery arbitrary file rightful owner

353
00:16:18,400 --> 00:16:22,420
ability that could be leveraged<font color="#CCCCCC"> to give</font>

354
00:16:19,960 --> 00:16:24,460
you rude and then we saw master key

355
00:16:22,420 --> 00:16:25,719
vulnerabilities one and two but I'm<font color="#E5E5E5"> not</font>

356
00:16:24,460 --> 00:16:27,970
<font color="#CCCCCC">really counting those because those</font>

357
00:16:25,720 --> 00:16:31,270
really affected<font color="#CCCCCC"> the whole source tree</font>

358
00:16:27,970 --> 00:16:34,210
like pre two point oh right it was a

359
00:16:31,270 --> 00:16:37,810
vulnerability that went way way before

360
00:16:34,210 --> 00:16:39,460
four point so really<font color="#E5E5E5"> one universal AOSP</font>

361
00:16:37,810 --> 00:16:43,780
is responsible for this piece of code

362
00:16:39,460 --> 00:16:46,210
rude that<font color="#E5E5E5"> we've seen so how our device</font>

363
00:16:43,780 --> 00:16:48,550
is getting routed how are their local

364
00:16:46,210 --> 00:16:51,670
privilege escalation exploits well I

365
00:16:48,550 --> 00:16:53,319
mean the short answer is it's all in om

366
00:16:51,670 --> 00:16:55,360
components right all in these

367
00:16:53,320 --> 00:16:59,020
<font color="#E5E5E5">third-party drivers and then the you</font>

368
00:16:55,360 --> 00:17:01,200
<font color="#E5E5E5">know carrier components so we're going</font>

369
00:16:59,020 --> 00:17:03,490
<font color="#E5E5E5">to go</font><font color="#CCCCCC"> over some of the the cooler ones</font>

370
00:17:01,200 --> 00:17:05,829
some of the hardware specific privilege

371
00:17:03,490 --> 00:17:09,250
escalation so there was X<font color="#CCCCCC"> iNOS prostatic</font>

372
00:17:05,829 --> 00:17:12,909
<font color="#CCCCCC">cenotes abuse on XDA moto chopper which</font>

373
00:17:09,250 --> 00:17:16,480
is<font color="#CCCCCC"> Qualcomm chipset specific some really</font>

374
00:17:12,910 --> 00:17:19,030
clever OEM specific back doors so ZTE

375
00:17:16,480 --> 00:17:21,160
had this<font color="#E5E5E5"> a hard-coded password on a</font>

376
00:17:19,030 --> 00:17:25,510
binary in their device that would just

377
00:17:21,160 --> 00:17:27,069
give you root LG has a much less public

378
00:17:25,510 --> 00:17:29,050
one these are<font color="#CCCCCC"> our</font><font color="#E5E5E5"> backdoors were like</font>

379
00:17:27,069 --> 00:17:31,090
that the OEM now has access to<font color="#E5E5E5"> your</font>

380
00:17:29,050 --> 00:17:33,550
device it's just like for their<font color="#CCCCCC"> text</font><font color="#E5E5E5"> or</font>

381
00:17:31,090 --> 00:17:36,159
whoever or a consumer to<font color="#E5E5E5"> just root the</font>

382
00:17:33,550 --> 00:17:38,740
device without launching an exploit and

383
00:17:36,160 --> 00:17:41,140
then some OEM file system permission

384
00:17:38,740 --> 00:17:43,690
issues so<font color="#E5E5E5"> I have a device that I've</font>

385
00:17:41,140 --> 00:17:48,910
since bricked kind of walk through

386
00:17:43,690 --> 00:17:52,510
reading that one the OEM responsible so

387
00:17:48,910 --> 00:17:53,860
this is<font color="#CCCCCC"> a google diagram and you can see</font>

388
00:17:52,510 --> 00:17:55,179
<font color="#E5E5E5">the middle layer there is the hardware</font>

389
00:17:53,860 --> 00:17:57,969
abstraction layer so there's camera

390
00:17:55,179 --> 00:18:00,790
audio graphics and other house hardware

391
00:17:57,970 --> 00:18:02,470
abstraction layers so that's<font color="#E5E5E5"> how your</font>

392
00:18:00,790 --> 00:18:05,620
piece<font color="#CCCCCC"> of hardware is going to interface</font>

393
00:18:02,470 --> 00:18:07,570
with the<font color="#E5E5E5"> android</font><font color="#CCCCCC"> operating system so</font>

394
00:18:05,620 --> 00:18:09,610
that it's it's transparent to the user

395
00:18:07,570 --> 00:18:11,350
right you may<font color="#E5E5E5"> want to use a</font><font color="#CCCCCC"> different</font>

396
00:18:09,610 --> 00:18:13,510
camera well you're going to have to

397
00:18:11,350 --> 00:18:16,149
supply the driver for that camera and

398
00:18:13,510 --> 00:18:17,800
it's going<font color="#E5E5E5"> to have to fit androids hal</font>

399
00:18:16,150 --> 00:18:19,330
definition and interact with their

400
00:18:17,800 --> 00:18:25,240
system service so there's an API for

401
00:18:19,330 --> 00:18:28,090
that so we saw the list of drivers

402
00:18:25,240 --> 00:18:31,330
available for the<font color="#E5E5E5"> Nexus devices but on a</font>

403
00:18:28,090 --> 00:18:33,280
device like you know this device maybe

404
00:18:31,330 --> 00:18:35,230
there's<font color="#CCCCCC"> like 25 different houses they're</font>

405
00:18:33,280 --> 00:18:41,800
interacting with because they want their

406
00:18:35,230 --> 00:18:44,530
own<font color="#CCCCCC"> hardware to interact with</font><font color="#E5E5E5"> Android so</font>

407
00:18:41,800 --> 00:18:47,530
the first of these tax is<font color="#CCCCCC"> Exodus so real</font>

408
00:18:44,530 --> 00:18:51,160
briefly eggsy knows is a arm-based

409
00:18:47,530 --> 00:18:54,360
system-on-a-chip manufactured by<font color="#E5E5E5"> samsung</font>

410
00:18:51,160 --> 00:18:57,130
shows in almost all the<font color="#CCCCCC"> samsung devices</font>

411
00:18:54,360 --> 00:18:59,590
this is a really wide spread attack is

412
00:18:57,130 --> 00:19:03,970
on particular type of processor and the

413
00:18:59,590 --> 00:19:07,689
issue was while they were creating their

414
00:19:03,970 --> 00:19:12,010
driver samsung kind of used a shortcut

415
00:19:07,690 --> 00:19:17,440
and mapped / staff /<font color="#CCCCCC"> egg xenos mem to</font>

416
00:19:12,010 --> 00:19:19,240
all of physical memory oh so it was

417
00:19:17,440 --> 00:19:21,700
really easy<font color="#E5E5E5"> to like go through flip</font>

418
00:19:19,240 --> 00:19:24,730
whatever bit you needed to flip so

419
00:19:21,700 --> 00:19:27,400
someone wrote xedos abuse the sky<font color="#CCCCCC"> aleph</font>

420
00:19:24,730 --> 00:19:28,510
sane right and it was like a patch so<font color="#E5E5E5"> i</font>

421
00:19:27,400 --> 00:19:30,550
should actually<font color="#CCCCCC"> i should have switched</font>

422
00:19:28,510 --> 00:19:34,720
the order piece but the bottom one is

423
00:19:30,550 --> 00:19:38,320
what it looks like if you just list that

424
00:19:34,720 --> 00:19:40,030
memory and the<font color="#CCCCCC"> top one is is the patch</font>

425
00:19:38,320 --> 00:19:42,119
right and that's how it really<font color="#E5E5E5"> should be</font>

426
00:19:40,030 --> 00:19:44,969
only<font color="#E5E5E5"> system can read</font>

427
00:19:42,119 --> 00:19:46,889
memory and the real patch is like a

428
00:19:44,969 --> 00:19:48,719
kernel level patch right where you're

429
00:19:46,889 --> 00:19:51,869
not napping all the physical memory to a

430
00:19:48,719 --> 00:19:53,609
public device driver so Samsung has

431
00:19:51,869 --> 00:19:57,319
since issued that patch an issue is

432
00:19:53,609 --> 00:19:59,668
fixed it was just a perfect example of

433
00:19:57,319 --> 00:20:03,449
OEM hardware that allowed you to reach

434
00:19:59,669 --> 00:20:04,949
your device moto chopper is a Dan

435
00:20:03,449 --> 00:20:06,779
Rosenberg group he's done some<font color="#E5E5E5"> really</font>

436
00:20:04,949 --> 00:20:09,569
cool stuff his<font color="#CCCCCC"> name's I'm sure come up</font>

437
00:20:06,779 --> 00:20:11,819
if you've looked at android stuff it was

438
00:20:09,569 --> 00:20:15,059
a really really complex exploit they

439
00:20:11,819 --> 00:20:16,949
made really<font color="#E5E5E5"> simple and it's an arm</font>

440
00:20:15,059 --> 00:20:20,519
trustzone exploit<font color="#E5E5E5"> and unlock the</font>

441
00:20:16,949 --> 00:20:23,429
bootloader and then flashes flashes on

442
00:20:20,519 --> 00:20:26,159
site code so it worked across a ton of

443
00:20:23,429 --> 00:20:29,309
devices like I tried<font color="#E5E5E5"> it on a couple of</font>

444
00:20:26,159 --> 00:20:32,969
these Samsung Motorola Huawei it's just

445
00:20:29,309 --> 00:20:34,649
called moto chopper yeah that's the

446
00:20:32,969 --> 00:20:36,299
particular chipsets that it affects and

447
00:20:34,649 --> 00:20:39,329
I'll put these slides online they

448
00:20:36,299 --> 00:20:41,789
already are online on my github now the

449
00:20:39,329 --> 00:20:44,549
hell do you back door one was so cool it

450
00:20:41,789 --> 00:20:48,859
was such a perfect example and it didn't

451
00:20:44,549 --> 00:20:51,239
really<font color="#E5E5E5"> get a lot of publicity so I</font>

452
00:20:48,859 --> 00:20:54,509
follow<font color="#E5E5E5"> the directions rooted my LG</font>

453
00:20:51,239 --> 00:20:56,759
device and<font color="#E5E5E5"> then pulled this this um the</font>

454
00:20:54,509 --> 00:20:57,869
a TBD that<font color="#E5E5E5"> I keep talking about I pulled</font>

455
00:20:56,759 --> 00:21:01,679
that off the device<font color="#E5E5E5"> and threw it into</font>

456
00:20:57,869 --> 00:21:06,238
Ida yeah so credit for this goes to his

457
00:21:01,679 --> 00:21:07,679
name that I'm not going to say so yeah

458
00:21:06,239 --> 00:21:09,899
<font color="#E5E5E5">just to clarify LG doesn't have access</font>

459
00:21:07,679 --> 00:21:12,449
to your device it just lets use the

460
00:21:09,899 --> 00:21:14,458
local user get a debugging root prompt

461
00:21:12,449 --> 00:21:16,709
it doesn't put an su binary on<font color="#E5E5E5"> you're</font>

462
00:21:14,459 --> 00:21:18,719
getting debugging<font color="#CCCCCC"> root if you wanted to</font>

463
00:21:16,709 --> 00:21:23,249
then you could put the su binary on and

464
00:21:18,719 --> 00:21:25,109
apps could<font color="#E5E5E5"> access it so I'm not an</font>

465
00:21:23,249 --> 00:21:27,179
assembly code expert but I through the

466
00:21:25,109 --> 00:21:30,809
identity simple to see what's<font color="#E5E5E5"> going on</font>

467
00:21:27,179 --> 00:21:33,989
right it looks for that file it tries to

468
00:21:30,809 --> 00:21:36,629
<font color="#E5E5E5">read it follow allah check LG official</font>

469
00:21:33,989 --> 00:21:41,879
enable root at the bottom right like

470
00:21:36,629 --> 00:21:43,570
<font color="#E5E5E5">super simple so all i did was well</font>

471
00:21:41,879 --> 00:21:46,399
here's an example

472
00:21:43,570 --> 00:21:47,860
<font color="#CCCCCC">list that by oh it's not there touch it</font>

473
00:21:46,400 --> 00:21:50,270
doesn't have to have anything in it

474
00:21:47,860 --> 00:21:56,709
restart USB debugging check on check on

475
00:21:50,270 --> 00:21:56,710
the device adb shell ID in your<font color="#E5E5E5"> room so</font>

476
00:21:56,890 --> 00:22:03,020
no no so this is LG specific so there's

477
00:22:00,559 --> 00:22:07,070
the<font color="#CCCCCC"> a DVD binary that sits</font><font color="#E5E5E5"> on the device</font>

478
00:22:03,020 --> 00:22:10,190
it's part of a OSP LG modified it and

479
00:22:07,070 --> 00:22:15,710
added this in and then<font color="#E5E5E5"> shipped it so</font>

480
00:22:10,190 --> 00:22:18,679
this<font color="#CCCCCC"> is a specific LG device actually I</font>

481
00:22:15,710 --> 00:22:20,360
think<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> an optimist g maybe and i</font>

482
00:22:18,679 --> 00:22:23,960
think<font color="#CCCCCC"> it affected some earlier builds</font>

483
00:22:20,360 --> 00:22:25,490
also but like really simple right you

484
00:22:23,960 --> 00:22:27,530
don't have<font color="#E5E5E5"> to launch some weird reading</font>

485
00:22:25,490 --> 00:22:28,700
exploit against your device<font color="#E5E5E5"> you get root</font>

486
00:22:27,530 --> 00:22:32,629
so you have<font color="#E5E5E5"> control over your device</font>

487
00:22:28,700 --> 00:22:34,790
really<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of a nice exploit that one's</font>

488
00:22:32,630 --> 00:22:37,760
not so bad there's a new<font color="#E5E5E5"> room</font><font color="#CCCCCC"> i guess</font>

489
00:22:34,790 --> 00:22:41,000
this was a couple<font color="#CCCCCC"> months ago I JK is</font>

490
00:22:37,760 --> 00:22:43,370
called LG pone so I'll harp on this

491
00:22:41,000 --> 00:22:45,440
later but LG makes a backup app so this

492
00:22:43,370 --> 00:22:46,959
is one of those carrier apps that

493
00:22:45,440 --> 00:22:49,370
doesn't need to be on the device because

494
00:22:46,960 --> 00:22:52,850
<font color="#E5E5E5">Android does backup right there's the</font>

495
00:22:49,370 --> 00:22:54,620
Android backup app so there's a race

496
00:22:52,850 --> 00:22:56,990
condition in this app usable locally

497
00:22:54,620 --> 00:22:58,790
exploit it when you could<font color="#CCCCCC"> potentially</font>

498
00:22:56,990 --> 00:23:00,590
leverage this vulnerability to the point

499
00:22:58,790 --> 00:23:01,760
where it to dry by root where if you

500
00:23:00,590 --> 00:23:03,740
have access to someone's phone for a

501
00:23:01,760 --> 00:23:05,030
minute<font color="#CCCCCC"> plug it in you root it you</font>

502
00:23:03,740 --> 00:23:07,070
install whatever you want on it so<font color="#E5E5E5"> this</font>

503
00:23:05,030 --> 00:23:10,700
was a really bad<font color="#E5E5E5"> one first one not so</font>

504
00:23:07,070 --> 00:23:13,280
bad this one was<font color="#E5E5E5"> pretty bad this ZTE</font>

505
00:23:10,700 --> 00:23:19,400
device was just a cool device because it

506
00:23:13,280 --> 00:23:22,639
basically roots itself so there's the

507
00:23:19,400 --> 00:23:27,260
bootloader there's recovery and then I

508
00:23:22,640 --> 00:23:30,169
don't know ZTE added<font color="#E5E5E5"> FTM mode is factory</font>

509
00:23:27,260 --> 00:23:33,460
test mode so power and volume down you

510
00:23:30,169 --> 00:23:35,990
booted FTM so this is<font color="#CCCCCC"> how it should work</font>

511
00:23:33,460 --> 00:23:38,179
go to data local you can't list it out

512
00:23:35,990 --> 00:23:40,910
right<font color="#CCCCCC"> you don't execute permission on</font>

513
00:23:38,179 --> 00:23:43,549
the directory how it works in FTM mode

514
00:23:40,910 --> 00:23:45,350
is you can list it out so data local

515
00:23:43,549 --> 00:23:46,970
temp is the<font color="#E5E5E5"> area of the file system</font>

516
00:23:45,350 --> 00:23:51,280
where you can write to anything everyone

517
00:23:46,970 --> 00:23:51,280
has rewrite execute I think privileges

518
00:23:51,669 --> 00:23:57,200
because of that

519
00:23:54,080 --> 00:23:58,850
so if you can list app data local and

520
00:23:57,200 --> 00:24:03,649
you have execute there you can do

521
00:23:58,850 --> 00:24:05,928
similar game right so data local temp

522
00:24:03,649 --> 00:24:10,399
gets its permission set at boot time if

523
00:24:05,929 --> 00:24:11,990
you<font color="#CCCCCC"> can symlink that to say / data data</font>

524
00:24:10,399 --> 00:24:18,139
is going<font color="#E5E5E5"> to get the permissions intended</font>

525
00:24:11,990 --> 00:24:20,929
for data local town so<font color="#CCCCCC"> you simply get</font>

526
00:24:18,140 --> 00:24:25,070
reboot data is getting permission for

527
00:24:20,929 --> 00:24:29,090
data local temp now you can write into /

528
00:24:25,070 --> 00:24:31,279
data so the two issues<font color="#E5E5E5"> are</font><font color="#CCCCCC"> one f TM mode</font>

529
00:24:29,090 --> 00:24:32,539
like why is that there and the second

530
00:24:31,279 --> 00:24:35,179
one<font color="#CCCCCC"> is that the anit script is not</font>

531
00:24:32,539 --> 00:24:36,649
checking if data local temp is

532
00:24:35,179 --> 00:24:40,250
assembling before it's setting

533
00:24:36,649 --> 00:24:41,899
permissions so we went over some of the

534
00:24:40,250 --> 00:24:46,250
directives that give you debugging<font color="#E5E5E5"> route</font>

535
00:24:41,899 --> 00:24:49,219
use echo<font color="#CCCCCC"> ro colonel QE mu equals 1 into</font>

536
00:24:46,250 --> 00:24:54,649
data local prop right just for<font color="#E5E5E5"> a pre 4.2</font>

537
00:24:49,220 --> 00:25:00,549
device reboot it adb shell and then you

538
00:24:54,649 --> 00:25:07,370
can see<font color="#E5E5E5"> we prompt at the bottom alright</font>

539
00:25:00,549 --> 00:25:10,070
so moving beyond the OEM additions to to

540
00:25:07,370 --> 00:25:12,289
the operating system layer and moving on

541
00:25:10,070 --> 00:25:14,570
to up one level to the default

542
00:25:12,289 --> 00:25:17,360
applications that are on your device so

543
00:25:14,570 --> 00:25:21,049
what<font color="#E5E5E5"> is actually on maybe not your Nexus</font>

544
00:25:17,360 --> 00:25:23,418
device for your carrier device since<font color="#E5E5E5"> I</font>

545
00:25:21,049 --> 00:25:26,870
recently discovered<font color="#E5E5E5"> the vizio</font><font color="#CCCCCC"> circle I</font>

546
00:25:23,419 --> 00:25:28,279
made this<font color="#E5E5E5"> little thing so you have the</font>

547
00:25:26,870 --> 00:25:29,989
<font color="#E5E5E5">android open source project at the</font>

548
00:25:28,279 --> 00:25:32,419
bottom and that's green because it's

549
00:25:29,990 --> 00:25:34,279
been<font color="#E5E5E5"> audited obviously on every single</font>

550
00:25:32,419 --> 00:25:37,309
device and we're<font color="#E5E5E5"> not seeing that many</font>

551
00:25:34,279 --> 00:25:39,590
more bugs of it maybe there will<font color="#E5E5E5"> be more</font>

552
00:25:37,309 --> 00:25:43,510
bugs later oh then you have the<font color="#CCCCCC"> Google</font>

553
00:25:39,590 --> 00:25:46,039
<font color="#CCCCCC">Apps right gmail Maps YouTube SMS etc</font>

554
00:25:43,510 --> 00:25:48,340
those have<font color="#E5E5E5"> been pretty well audited they</font>

555
00:25:46,039 --> 00:25:51,789
are made by google who should understand

556
00:25:48,340 --> 00:25:54,649
android security etc they get audited

557
00:25:51,789 --> 00:25:57,620
then the next level up should<font color="#E5E5E5"> be yellow</font>

558
00:25:54,649 --> 00:26:00,260
or like orange watch out you have the

559
00:25:57,620 --> 00:26:04,549
OEMs<font color="#E5E5E5"> right the backup apps the LG backup</font>

560
00:26:00,260 --> 00:26:06,080
app etc they might put games the really

561
00:26:04,549 --> 00:26:07,490
crucial thing about these apps is

562
00:26:06,080 --> 00:26:10,010
they're stored on / systems

563
00:26:07,490 --> 00:26:11,240
which is a read-only file system so you

564
00:26:10,010 --> 00:26:14,629
can't remove them without rooting your

565
00:26:11,240 --> 00:26:17,510
device system / app all of your

566
00:26:14,630 --> 00:26:20,059
applications go in / data / app data is

567
00:26:17,510 --> 00:26:22,220
read write and and you can uninstall

568
00:26:20,059 --> 00:26:23,899
those apps you have<font color="#E5E5E5"> the OEM apps and</font>

569
00:26:22,220 --> 00:26:25,550
then on top of that you have the carrier

570
00:26:23,900 --> 00:26:27,770
apps right<font color="#CCCCCC"> so you may have a samsung</font>

571
00:26:25,550 --> 00:26:30,620
device samsung puts their apps on it

572
00:26:27,770 --> 00:26:32,090
shipped AT&T AT&T puts their apps on get

573
00:26:30,620 --> 00:26:33,520
<font color="#CCCCCC">shipped to t mobile tmobile puts their</font>

574
00:26:32,090 --> 00:26:36,620
<font color="#CCCCCC">apps on it so</font><font color="#E5E5E5"> now you've got this like</font>

575
00:26:33,520 --> 00:26:38,929
collaboration of apps on your device and

576
00:26:36,620 --> 00:26:40,459
<font color="#E5E5E5">then you have your apps on top of it so</font>

577
00:26:38,929 --> 00:26:44,000
maybe you<font color="#CCCCCC"> routed it you use some</font>

578
00:26:40,460 --> 00:26:45,730
third-party tool to root your device<font color="#CCCCCC"> and</font>

579
00:26:44,000 --> 00:26:47,809
now that's just<font color="#E5E5E5"> sitting on your device</font>

580
00:26:45,730 --> 00:26:50,090
you know you don't really<font color="#E5E5E5"> know what it</font>

581
00:26:47,809 --> 00:26:52,190
does other than root your glass so<font color="#CCCCCC"> it</font>

582
00:26:50,090 --> 00:26:56,928
turns<font color="#E5E5E5"> your sleek little android man into</font>

583
00:26:52,190 --> 00:27:00,740
<font color="#CCCCCC">java diet he's got all these apps so</font><font color="#E5E5E5"> i</font>

584
00:26:56,929 --> 00:27:03,230
made<font color="#CCCCCC"> it like a quick little tool maybe</font>

585
00:27:00,740 --> 00:27:05,750
<font color="#E5E5E5">i'll start the demo of it now because it</font>

586
00:27:03,230 --> 00:27:08,690
can take a little while made a little

587
00:27:05,750 --> 00:27:10,850
tool to just real simply plug in<font color="#CCCCCC"> your</font>

588
00:27:08,690 --> 00:27:15,380
device pull some apps off decompile and

589
00:27:10,850 --> 00:27:17,209
look at the end points to see what

590
00:27:15,380 --> 00:27:19,190
they're really doing right what's at the

591
00:27:17,210 --> 00:27:21,830
<font color="#CCCCCC">Android manifest file which gives you a</font>

592
00:27:19,190 --> 00:27:32,090
ton of data about<font color="#E5E5E5"> an app's intentions</font>

593
00:27:21,830 --> 00:27:34,730
and<font color="#E5E5E5"> its its privileges so oh</font><font color="#CCCCCC"> okay so so</font>

594
00:27:32,090 --> 00:27:41,320
I've got my china mobile device here so

595
00:27:34,730 --> 00:27:41,320
that<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> offend any US carriers so</font>

596
00:27:44,509 --> 00:27:49,099
so you run the tool gives you this nice

597
00:27:46,789 --> 00:27:53,089
help dialogue the options that I want<font color="#E5E5E5"> to</font>

598
00:27:49,099 --> 00:27:55,849
run I just want to filter for ZTE named

599
00:27:53,089 --> 00:28:01,009
app so that will be in either the path

600
00:27:55,849 --> 00:28:02,359
name or the class name decompile and<font color="#CCCCCC"> I</font>

601
00:28:01,009 --> 00:28:03,619
want to<font color="#E5E5E5"> grab them off the device so all</font>

602
00:28:02,359 --> 00:28:06,708
I've done is like plugged in the device

603
00:28:03,619 --> 00:28:09,589
I just run this so it's<font color="#E5E5E5"> going to go</font>

604
00:28:06,709 --> 00:28:10,669
ahead<font color="#E5E5E5"> make a folder called ZTE you 817</font>

605
00:28:09,589 --> 00:28:12,829
it's going to<font color="#E5E5E5"> get them and just going to</font>

606
00:28:10,669 --> 00:28:14,629
start<font color="#CCCCCC"> decompile you so while that</font>

607
00:28:12,829 --> 00:28:20,359
happens in the background because it can

608
00:28:14,629 --> 00:28:27,589
take a little bit oh cool<font color="#CCCCCC"> okay so we'll</font>

609
00:28:20,359 --> 00:28:30,939
go over all the IPC end it's just

610
00:28:27,589 --> 00:28:30,940
switching back and forth men

611
00:28:33,590 --> 00:28:40,409
<font color="#E5E5E5">okay so all these intent filters and IPC</font>

612
00:28:38,970 --> 00:28:42,420
endpoints are declared in the<font color="#CCCCCC"> Android</font>

613
00:28:40,410 --> 00:28:45,630
manifest file it's really<font color="#E5E5E5"> handy file for</font>

614
00:28:42,420 --> 00:28:47,610
getting the gist of an application<font color="#E5E5E5"> so</font>

615
00:28:45,630 --> 00:28:55,230
what what the tool does is just look

616
00:28:47,610 --> 00:28:57,179
through them automatically so we'll go

617
00:28:55,230 --> 00:28:58,920
<font color="#CCCCCC">through the for the first one and the</font>

618
00:28:57,180 --> 00:29:00,330
one<font color="#E5E5E5"> that we find the most bugs with it's</font>

619
00:28:58,920 --> 00:29:03,030
really interesting was a content

620
00:29:00,330 --> 00:29:07,470
provider so content provider is androids

621
00:29:03,030 --> 00:29:09,120
interface to a database<font color="#E5E5E5"> or a file you</font>

622
00:29:07,470 --> 00:29:11,580
access it with content colon slash slash

623
00:29:09,120 --> 00:29:13,469
<font color="#E5E5E5">an of the authority so when you see it</font>

624
00:29:11,580 --> 00:29:15,720
declared in the manifest here provider

625
00:29:13,470 --> 00:29:18,030
blah blah<font color="#CCCCCC"> calm hallway hide this</font>

626
00:29:15,720 --> 00:29:20,490
provider d bank that's the authority so

627
00:29:18,030 --> 00:29:23,129
content colon slash slash<font color="#E5E5E5"> authority is</font>

628
00:29:20,490 --> 00:29:24,570
going to allow<font color="#E5E5E5"> you to query the content</font>

629
00:29:23,130 --> 00:29:28,440
provider and see what it supports be the

630
00:29:24,570 --> 00:29:30,000
database or a file activities<font color="#CCCCCC"> or what</font>

631
00:29:28,440 --> 00:29:31,350
you see on your device it's an

632
00:29:30,000 --> 00:29:34,740
interactive screen it makes up the

633
00:29:31,350 --> 00:29:36,419
application UI and it can contain intent

634
00:29:34,740 --> 00:29:38,310
filter so it<font color="#E5E5E5"> can be launched using an</font>

635
00:29:36,420 --> 00:29:41,040
intent from<font color="#E5E5E5"> a DB or from another</font>

636
00:29:38,310 --> 00:29:43,860
application so that allows you like if

637
00:29:41,040 --> 00:29:45,990
<font color="#E5E5E5">you have an app and it says like look at</font>

638
00:29:43,860 --> 00:29:47,909
your contacts and you hit the button it

639
00:29:45,990 --> 00:29:50,040
will pop up the activity for your

640
00:29:47,910 --> 00:29:51,900
contacts it may not<font color="#E5E5E5"> have access to all</font>

641
00:29:50,040 --> 00:29:56,909
<font color="#CCCCCC">of your contacts just whichever one you</font>

642
00:29:51,900 --> 00:29:58,590
select right services are separate p ID

643
00:29:56,910 --> 00:30:00,450
from the application they're designed<font color="#E5E5E5"> to</font>

644
00:29:58,590 --> 00:30:03,389
run even<font color="#CCCCCC"> if the application is back</font>

645
00:30:00,450 --> 00:30:06,620
rounded so maybe<font color="#E5E5E5"> your music player runs</font>

646
00:30:03,390 --> 00:30:06,620
the music in a separate service

647
00:30:07,280 --> 00:30:16,320
broadcast receivers are intended<font color="#CCCCCC"> to yeah</font>

648
00:30:14,910 --> 00:30:19,410
they'll receive an intent that's

649
00:30:16,320 --> 00:30:21,050
<font color="#CCCCCC">broadcast to</font><font color="#E5E5E5"> to every broadcast receiver</font>

650
00:30:19,410 --> 00:30:23,250
on<font color="#E5E5E5"> the device so the broadcast receiver</font>

651
00:30:21,050 --> 00:30:25,110
registers with the operating system the

652
00:30:23,250 --> 00:30:27,150
operating system that knows to pass that

653
00:30:25,110 --> 00:30:30,570
broadcast on to the appropriate

654
00:30:27,150 --> 00:30:32,960
broadcast receiver so the protections

655
00:30:30,570 --> 00:30:36,770
for these endpoints

656
00:30:32,960 --> 00:30:38,860
are pretty general you can set a

657
00:30:36,770 --> 00:30:41,750
permission on your<font color="#E5E5E5"> android manifest file</font>

658
00:30:38,860 --> 00:30:43,459
at<font color="#CCCCCC"> the top level which will propagate</font>

659
00:30:41,750 --> 00:30:45,080
down to every endpoint so you need this

660
00:30:43,460 --> 00:30:47,000
permission to interact with<font color="#E5E5E5"> this</font>

661
00:30:45,080 --> 00:30:48,080
application in general so we don't see

662
00:30:47,000 --> 00:30:49,880
<font color="#E5E5E5">that a lot because typically</font>

663
00:30:48,080 --> 00:30:53,960
applications want to expose one or two

664
00:30:49,880 --> 00:31:00,590
endpoints you can set a permission on

665
00:30:53,960 --> 00:31:02,539
the<font color="#E5E5E5"> particular endpoint or you can</font>

666
00:31:00,590 --> 00:31:07,428
choose to<font color="#CCCCCC"> not export that</font><font color="#E5E5E5"> endpoint so</font>

667
00:31:02,539 --> 00:31:09,529
pre 4.2 all the components were exported

668
00:31:07,429 --> 00:31:11,260
by default if there was an intent filter

669
00:31:09,529 --> 00:31:13,220
because having an intent filter their

670
00:31:11,260 --> 00:31:15,830
indicated that<font color="#CCCCCC"> you want other</font>

671
00:31:13,220 --> 00:31:19,700
<font color="#E5E5E5">applications to send intense to your</font>

672
00:31:15,830 --> 00:31:21,529
application host 4.2 components are not

673
00:31:19,700 --> 00:31:23,360
exported unless they have an intent

674
00:31:21,529 --> 00:31:25,399
filter so you can just<font color="#E5E5E5"> always explicitly</font>

675
00:31:23,360 --> 00:31:27,860
set this like it's much simpler to just

676
00:31:25,399 --> 00:31:31,899
say<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> export equals false if you</font>

677
00:31:27,860 --> 00:31:33,979
don't want to export this endpoint

678
00:31:31,899 --> 00:31:35,418
content providers specifically you can

679
00:31:33,980 --> 00:31:36,950
have permissions they can have a read

680
00:31:35,419 --> 00:31:39,169
permission on the database or write

681
00:31:36,950 --> 00:31:41,330
permission and you can set exported

682
00:31:39,169 --> 00:31:44,029
equals false<font color="#E5E5E5"> activities the same thing</font>

683
00:31:41,330 --> 00:31:46,039
permissions export equals false services

684
00:31:44,029 --> 00:31:47,539
<font color="#E5E5E5">are the same receivers are a little bit</font>

685
00:31:46,039 --> 00:31:49,940
different because any app can register

686
00:31:47,539 --> 00:31:53,090
but then whoever sends the broadcast

687
00:31:49,940 --> 00:31:54,860
specifies the permission needed to

688
00:31:53,090 --> 00:31:58,399
receive that broadcast so then it's on

689
00:31:54,860 --> 00:31:59,779
the center of the receiver<font color="#E5E5E5"> and again you</font>

690
00:31:58,399 --> 00:32:03,289
can set those texts board equals false

691
00:31:59,779 --> 00:32:08,059
if you<font color="#E5E5E5"> just want to broadcast within</font>

692
00:32:03,289 --> 00:32:12,710
your process so one of<font color="#E5E5E5"> the major</font>

693
00:32:08,059 --> 00:32:14,178
problems that we see with the with<font color="#CCCCCC"> the</font>

694
00:32:12,710 --> 00:32:15,830
pre-loaded applications is permission

695
00:32:14,179 --> 00:32:17,620
leakage so these applications are on

696
00:32:15,830 --> 00:32:20,418
your device you<font color="#E5E5E5"> can't uninstall them</font>

697
00:32:17,620 --> 00:32:22,969
they've requested permissions at install

698
00:32:20,419 --> 00:32:26,919
time which you didn't control they may

699
00:32:22,970 --> 00:32:29,090
leak those permissions so for example

700
00:32:26,919 --> 00:32:30,380
<font color="#E5E5E5">everybody has a weather app on their</font>

701
00:32:29,090 --> 00:32:33,139
phone and you don't know where it came

702
00:32:30,380 --> 00:32:35,120
from maybe it requests GPS and Wi-Fi

703
00:32:33,140 --> 00:32:37,730
permissions obviously is granted those

704
00:32:35,120 --> 00:32:39,399
because it's on your<font color="#E5E5E5"> device say it has a</font>

705
00:32:37,730 --> 00:32:43,509
content provider<font color="#E5E5E5"> an activity</font>

706
00:32:39,399 --> 00:32:46,869
when you launch the activity the weather

707
00:32:43,509 --> 00:32:48,639
app comes up it reaches out<font color="#E5E5E5"> to gps says</font>

708
00:32:46,869 --> 00:32:50,799
<font color="#CCCCCC">okay now i'm</font><font color="#E5E5E5"> in austin texas when you</font>

709
00:32:48,639 --> 00:32:52,029
update the weather for austin texas well

710
00:32:50,799 --> 00:32:54,158
that's great and it's harmless in of

711
00:32:52,029 --> 00:32:55,659
itself but<font color="#E5E5E5"> say you also have a content</font>

712
00:32:54,159 --> 00:32:59,049
provider and that content provider is

713
00:32:55,659 --> 00:33:00,820
meant to provide city-based whether to

714
00:32:59,049 --> 00:33:04,210
all other applications right so that's

715
00:33:00,820 --> 00:33:07,570
unprotected so if you can if you can

716
00:33:04,210 --> 00:33:09,609
launch the activity update<font color="#CCCCCC"> GPS and then</font>

717
00:33:07,570 --> 00:33:13,029
access the content provider and say

718
00:33:09,609 --> 00:33:16,029
<font color="#E5E5E5">Austin Texas so if there's a if there's</font>

719
00:33:13,029 --> 00:33:18,190
a malicious party of my device they now

720
00:33:16,029 --> 00:33:20,859
<font color="#E5E5E5">have access to gps with would check</font>

721
00:33:18,190 --> 00:33:25,440
without me explicitly granting that

722
00:33:20,859 --> 00:33:27,639
right this is a really simple example

723
00:33:25,440 --> 00:33:32,409
people<font color="#E5E5E5"> breaking papers on like much more</font>

724
00:33:27,639 --> 00:33:36,070
<font color="#E5E5E5">complex examples so real world</font>

725
00:33:32,409 --> 00:33:41,979
permission leakage issue in about a year

726
00:33:36,070 --> 00:33:46,509
ago right the android SMS receiver

727
00:33:41,979 --> 00:33:49,359
service exported receiver with no

728
00:33:46,509 --> 00:33:52,809
permission restrictions so any app on

729
00:33:49,359 --> 00:33:53,949
the device could could say<font color="#CCCCCC"> that</font><font color="#E5E5E5"> a</font>

730
00:33:52,809 --> 00:33:55,839
broadcaster would look like you're

731
00:33:53,950 --> 00:33:58,029
receiving SMS so it's perfect for like

732
00:33:55,839 --> 00:34:02,379
smishing fishing home in five minutes

733
00:33:58,029 --> 00:34:03,909
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> i'll move</font><font color="#E5E5E5"> on to the tool i don't</font>

734
00:34:02,379 --> 00:34:05,709
think<font color="#CCCCCC"> any responsibility for the name i</font>

735
00:34:03,909 --> 00:34:08,829
did i did this work at intrepid asst

736
00:34:05,710 --> 00:34:11,980
group and it was a crowdsource name and

737
00:34:08,829 --> 00:34:14,919
someone picked manifest analyzer animal

738
00:34:11,980 --> 00:34:19,379
fest and it's stuck I can't get rid of

739
00:34:14,918 --> 00:34:21,969
it so the point of the tool is to just

740
00:34:19,379 --> 00:34:23,949
grab whatever from the device<font color="#E5E5E5"> decompile</font>

741
00:34:21,969 --> 00:34:25,959
it and then parse through all the

742
00:34:23,949 --> 00:34:30,969
manifests as a whole right you're going

743
00:34:25,960 --> 00:34:33,659
to look at all the permissions that are

744
00:34:30,969 --> 00:34:35,799
are declared by the custom applications

745
00:34:33,659 --> 00:34:37,690
the objects are going to inherit from

746
00:34:35,799 --> 00:34:39,099
each other right so each child is going

747
00:34:37,690 --> 00:34:41,079
to hear from<font color="#E5E5E5"> the parents and inherit</font>

748
00:34:39,099 --> 00:34:43,569
from parent so you<font color="#E5E5E5"> get a pretty complete</font>

749
00:34:41,079 --> 00:34:46,320
view of what's accessible and what's not

750
00:34:43,569 --> 00:34:50,330
<font color="#E5E5E5">and then it fits out</font>

751
00:34:46,320 --> 00:34:54,600
an easy<font color="#E5E5E5"> way to to query that particular</font>

752
00:34:50,330 --> 00:34:59,160
<font color="#CCCCCC">endpoint for the content providers roser</font>

753
00:34:54,600 --> 00:35:00,390
is still a great way to do it<font color="#CCCCCC"> okay so I</font>

754
00:34:59,160 --> 00:35:02,220
<font color="#CCCCCC">have five</font><font color="#E5E5E5"> minutes I'm going to kind of</font>

755
00:35:00,390 --> 00:35:04,680
zoom through this home and we can<font color="#E5E5E5"> do Q&A</font>

756
00:35:02,220 --> 00:35:06,899
after so on<font color="#E5E5E5"> this device there's a notes</font>

757
00:35:04,680 --> 00:35:08,580
provider so you can like type in your

758
00:35:06,900 --> 00:35:11,340
secret notes to yourself and save them

759
00:35:08,580 --> 00:35:14,100
it also exports this content provider

760
00:35:11,340 --> 00:35:17,240
with no permissions so if you query the

761
00:35:14,100 --> 00:35:28,920
content provider you get all the notes

762
00:35:17,240 --> 00:35:32,069
as you<font color="#E5E5E5"> see ya my secret oh</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> all</font>

763
00:35:28,920 --> 00:35:34,320
<font color="#E5E5E5">right so it went off and grabbed grabbed</font>

764
00:35:32,070 --> 00:35:37,200
all the apks called ZTE from the device

765
00:35:34,320 --> 00:35:38,790
<font color="#E5E5E5">and didn't find a ton of interesting</font>

766
00:35:37,200 --> 00:35:41,339
stuff right we have one unaffected

767
00:35:38,790 --> 00:35:43,529
content provider here no hidden<font color="#E5E5E5"> codes</font>

768
00:35:41,340 --> 00:35:46,350
<font color="#E5E5E5">menus debuggable apps and a couple</font>

769
00:35:43,530 --> 00:35:49,020
applications that share you ID so that

770
00:35:46,350 --> 00:35:53,520
means<font color="#E5E5E5"> that any bug in an endpoint on one</font>

771
00:35:49,020 --> 00:36:00,509
of these<font color="#E5E5E5"> effects the other one so</font><font color="#CCCCCC"> for</font>

772
00:35:53,520 --> 00:36:02,160
wheel on looks just like pull email this

773
00:36:00,510 --> 00:36:04,770
is any application called email we get a

774
00:36:02,160 --> 00:36:07,379
couple<font color="#CCCCCC"> more interesting things</font><font color="#E5E5E5"> right a</font>

775
00:36:04,770 --> 00:36:09,860
permission called read attachment that's

776
00:36:07,380 --> 00:36:11,850
<font color="#E5E5E5">just more dangerous and then a</font>

777
00:36:09,860 --> 00:36:14,070
permission called access provider that

778
00:36:11,850 --> 00:36:20,040
actually requires a signature we can

779
00:36:14,070 --> 00:36:21,660
<font color="#CCCCCC">pull what else we want to pull SMS this</font>

780
00:36:20,040 --> 00:36:23,040
is not going the SMS messages by<font color="#CCCCCC"> the way</font>

781
00:36:21,660 --> 00:36:28,710
this is<font color="#E5E5E5"> pulling applications which</font>

782
00:36:23,040 --> 00:36:31,110
interact with with SMS<font color="#CCCCCC"> okay now that we</font>

783
00:36:28,710 --> 00:36:32,790
have some context<font color="#E5E5E5"> for this content</font>

784
00:36:31,110 --> 00:36:35,520
providers look like that you can see the

785
00:36:32,790 --> 00:36:37,140
exported content providers services kind

786
00:36:35,520 --> 00:36:38,759
of the same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> it'll spit out the</font>

787
00:36:37,140 --> 00:36:42,140
shell command that you<font color="#E5E5E5"> just copy and</font>

788
00:36:38,760 --> 00:36:46,980
paste into<font color="#E5E5E5"> a shell to launch the service</font>

789
00:36:42,140 --> 00:36:50,279
activities same thing if you<font color="#E5E5E5"> want to</font>

790
00:36:46,980 --> 00:36:53,190
actually go deeper into this you can

791
00:36:50,280 --> 00:36:54,720
reverse the app see where it's actually

792
00:36:53,190 --> 00:36:56,910
handling the intent message

793
00:36:54,720 --> 00:36:58,859
you send it so here it's in get<font color="#E5E5E5"> intent</font>

794
00:36:56,910 --> 00:37:03,540
and it's looking for a string extra

795
00:36:58,859 --> 00:37:05,160
called path so if I excuse me<font color="#E5E5E5"> if I if I</font>

796
00:37:03,540 --> 00:37:08,940
send in the tent that I was extra

797
00:37:05,160 --> 00:37:12,080
training<font color="#E5E5E5"> PAP and mount SD card camera I</font>

798
00:37:08,940 --> 00:37:14,970
can I can launch the activity directly

799
00:37:12,080 --> 00:37:16,560
so that might<font color="#CCCCCC"> be interesting for</font><font color="#E5E5E5"> buzzing</font>

800
00:37:14,970 --> 00:37:18,720
etc you can just launch the activity

801
00:37:16,560 --> 00:37:21,420
with an<font color="#E5E5E5"> argument or an extra string that</font>

802
00:37:18,720 --> 00:37:24,480
it will parse through<font color="#CCCCCC"> receiver is this</font>

803
00:37:21,420 --> 00:37:28,190
not my bug but it's such a fun bug this

804
00:37:24,480 --> 00:37:34,230
was on through quartz lab to talk

805
00:37:28,190 --> 00:37:36,660
picking on one particular OEM some of

806
00:37:34,230 --> 00:37:42,590
their code would just pass a parameter

807
00:37:36,660 --> 00:37:44,940
to the shell so if you send a broadcast

808
00:37:42,590 --> 00:37:47,280
with a particular action the intent

809
00:37:44,940 --> 00:37:49,800
filter gets triggered and it handles

810
00:37:47,280 --> 00:37:51,690
this code so they<font color="#CCCCCC"> were able</font><font color="#E5E5E5"> to just send</font>

811
00:37:49,800 --> 00:37:53,970
the output from<font color="#E5E5E5"> the legitimate commanded</font>

812
00:37:51,690 --> 00:37:57,690
a bowl and then they just<font color="#E5E5E5"> an example</font>

813
00:37:53,970 --> 00:38:00,750
system bit ID into a file and SD card

814
00:37:57,690 --> 00:38:02,990
and that you<font color="#CCCCCC"> can read that you can see</font>

815
00:38:00,750 --> 00:38:06,210
they're cute cat SD card she'll escape

816
00:38:02,990 --> 00:38:08,580
you get the results<font color="#CCCCCC"> of the ID command so</font>

817
00:38:06,210 --> 00:38:12,210
those command injection from from a

818
00:38:08,580 --> 00:38:18,299
broadcast<font color="#CCCCCC"> ok is that two</font><font color="#E5E5E5"> minutes for the</font>

819
00:38:12,210 --> 00:38:21,690
talk<font color="#E5E5E5"> ok so i would harp on this later</font>

820
00:38:18,300 --> 00:38:24,330
just basically as<font color="#E5E5E5"> nomar a carrier don't</font>

821
00:38:21,690 --> 00:38:28,109
reinvent the wheel google has a secure

822
00:38:24,330 --> 00:38:31,140
App Store provides a Wi-Fi hotspot

823
00:38:28,109 --> 00:38:33,270
connection managers etc there's no need

824
00:38:31,140 --> 00:38:36,598
to to create a<font color="#E5E5E5"> third-party application</font>

825
00:38:33,270 --> 00:38:39,060
to do that so for some examples we found

826
00:38:36,599 --> 00:38:42,080
in<font color="#E5E5E5"> App Store's basically allows you to</font>

827
00:38:39,060 --> 00:38:44,670
man in the middle app purchases

828
00:38:42,080 --> 00:38:47,670
decompile the app on<font color="#E5E5E5"> the fly inject or</font>

829
00:38:44,670 --> 00:38:49,349
reverse shell into it recompile it send

830
00:38:47,670 --> 00:38:51,839
it down to the user and the<font color="#CCCCCC"> user had no</font>

831
00:38:49,349 --> 00:38:54,060
idea that it was now signed with your

832
00:38:51,839 --> 00:38:55,500
key because for a third party<font color="#CCCCCC"> app for to</font>

833
00:38:54,060 --> 00:38:57,450
work there has to be<font color="#E5E5E5"> unknown sources</font>

834
00:38:55,500 --> 00:39:00,599
checked which means<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> no signature</font>

835
00:38:57,450 --> 00:39:03,060
checking on the app so be safe can use

836
00:39:00,599 --> 00:39:05,099
<font color="#E5E5E5">Google Play shared you ideas are</font>

837
00:39:03,060 --> 00:39:05,930
particularly bad if you find a bug in

838
00:39:05,099 --> 00:39:08,630
one of the

839
00:39:05,930 --> 00:39:11,058
you see<font color="#CCCCCC"> end points because it can affect</font>

840
00:39:08,630 --> 00:39:13,130
all the other applications<font color="#CCCCCC"> that also</font>

841
00:39:11,059 --> 00:39:20,690
share that you ID so they share<font color="#E5E5E5"> system</font>

842
00:39:13,130 --> 00:39:24,650
uid even worse so point is AOSP can be

843
00:39:20,690 --> 00:39:27,410
super super secure right implement all

844
00:39:24,650 --> 00:39:31,400
the security in the<font color="#CCCCCC"> world but until OMS</font>

845
00:39:27,410 --> 00:39:32,569
and carriers creases security their

846
00:39:31,400 --> 00:39:35,960
applications and audit their

847
00:39:32,569 --> 00:39:38,150
applications device<font color="#CCCCCC"> will keep getting</font>

848
00:39:35,960 --> 00:39:42,380
routed what can ov m'sieu don't want<font color="#CCCCCC"> to</font>

849
00:39:38,150 --> 00:39:45,200
<font color="#CCCCCC">buy OSP doesn't happen Pat vulnerability</font>

850
00:39:42,380 --> 00:39:48,230
is the point quickly don't bundle a ton

851
00:39:45,200 --> 00:39:49,848
of applications put them in data app

852
00:39:48,230 --> 00:39:51,619
instead of system<font color="#E5E5E5"> app so the users can</font>

853
00:39:49,849 --> 00:39:55,880
remove them<font color="#E5E5E5"> if they don't want</font><font color="#CCCCCC"> roller</font>

854
00:39:51,619 --> 00:39:58,490
<font color="#CCCCCC">coaster</font><font color="#E5E5E5"> tycoon and use a locked</font>

855
00:39:55,880 --> 00:40:00,800
bootloader<font color="#CCCCCC"> MNOs can bet the pre-loaded</font>

856
00:39:58,490 --> 00:40:03,589
applications they can help the OEMs

857
00:40:00,800 --> 00:40:07,190
quickly push a patch right if Samsung

858
00:40:03,589 --> 00:40:08,869
comes uh-huh hey I know him that the

859
00:40:07,190 --> 00:40:11,210
wheel and what can you do<font color="#E5E5E5"> you can sauce</font>

860
00:40:08,869 --> 00:40:13,099
I engine<font color="#CCCCCC"> mod if you want to write you</font>

861
00:40:11,210 --> 00:40:14,960
keep your device up-to-date if your

862
00:40:13,099 --> 00:40:19,880
carrier allows you to an oem allows you

863
00:40:14,960 --> 00:40:25,309
to go print your device<font color="#E5E5E5"> you have to hide</font>

864
00:40:19,880 --> 00:40:27,470
<font color="#CCCCCC">it so the coolest thing here I think</font><font color="#E5E5E5"> is</font>

865
00:40:25,309 --> 00:40:29,630
is granular patching so I've<font color="#E5E5E5"> heard some</font>

866
00:40:27,470 --> 00:40:32,240
talk about this and there's an app by by

867
00:40:29,630 --> 00:40:36,799
a<font color="#E5E5E5"> column owner and John over hi called</font>

868
00:40:32,240 --> 00:40:40,700
<font color="#E5E5E5">rekey that will if your device is rooted</font>

869
00:40:36,799 --> 00:40:41,960
it will patch other routing exploits so

870
00:40:40,700 --> 00:40:46,160
that's a really<font color="#E5E5E5"> cool project Google's</font>

871
00:40:41,960 --> 00:40:48,260
maybe going to<font color="#E5E5E5"> do something right guys</font>

872
00:40:46,160 --> 00:40:52,670
all I have time for on that getup are

873
00:40:48,260 --> 00:40:54,319
the slides and animal fest again I did

874
00:40:52,670 --> 00:40:56,809
this work at intrepid acai recently left

875
00:40:54,319 --> 00:41:00,140
there so<font color="#E5E5E5"> I need to thank them for the</font>

876
00:40:56,809 --> 00:41:02,780
work but yeah feel free<font color="#CCCCCC"> to tweet at me</font>

877
00:41:00,140 --> 00:41:04,430
or email me I know I had to kind of zoom

878
00:41:02,780 --> 00:41:09,079
through that last there so sorry<font color="#E5E5E5"> about</font>

879
00:41:04,430 --> 00:41:11,500
that all right at the end<font color="#E5E5E5"> we have</font>

880
00:41:09,079 --> 00:41:11,500
questions

881
00:41:12,200 --> 00:41:19,038
okay we're out of time well I'll be out

882
00:41:14,880 --> 00:41:19,039
in the<font color="#E5E5E5"> home cool thanks</font>

