1
00:00:00,000 --> 00:00:58,559
professor John president

2
00:00:59,309 --> 00:01:17,100
ok going to get started

3
00:01:18,840 --> 00:01:27,780
current state of memory forensics one
source discovery primarily deal and

4
00:01:27,780 --> 00:01:32,549
digital forensics relates to civil and
criminal litigation also do with its a

5
00:01:32,549 --> 00:01:40,860
response the company so also knighted
instructor you develop your ethics class

6
00:01:40,860 --> 00:01:46,259
they're also teach information security
course occasionally as far as formal

7
00:01:46,259 --> 00:01:51,600
education is concerned on how i'm doing
my Master's did digital forensics s4

8
00:01:51,600 --> 00:01:58,798
already went through the uml CIS infosec
track here locally very certs forensics

9
00:01:58,799 --> 00:02:04,890
that somebody had speed through this
first portion since we're a little short

10
00:02:04,890 --> 00:02:07,680
on time when i travel time

11
00:02:07,680 --> 00:02:13,260
come here today we're going to just stop
quickly looking at the basics of

12
00:02:13,260 --> 00:02:16,649
memories explicit really just talking
about why why this is important to

13
00:02:16,650 --> 00:02:21,600
library interested i'm going to get into
memory acquisition the reanalysis will

14
00:02:21,600 --> 00:02:25,590
round out today with discussion on a
couple of Windows 10 architectural

15
00:02:25,590 --> 00:02:33,390
changes and fundamental changes that
have an impact so remember forensics is

16
00:02:33,390 --> 00:02:37,350
important and perhaps maybe this is for
obvious reasons but this gives us

17
00:02:37,350 --> 00:02:42,510
insight into recent system active so
these things like running processes

18
00:02:42,510 --> 00:02:48,420
network connection files things that are
happening on the system at the time the

19
00:02:48,420 --> 00:02:52,799
memories capture you know oftentimes
this is data unavailable anywhere else

20
00:02:52,800 --> 00:02:56,580
so this could be data like encryption
keys there's been research shout out

21
00:02:56,580 --> 00:03:01,860
there to show extracting truecrypt
encryption keys from memory up as well

22
00:03:01,860 --> 00:03:06,660
as anything else then they reside in
memory may not be cash or flushed to

23
00:03:06,660 --> 00:03:15,870
disk so low that one of the big things
here and now we're decrypting now there

24
00:03:15,870 --> 00:03:21,000
is one thing as a critically important
in our memory forensic investigation

25
00:03:21,000 --> 00:03:26,370
because oftentimes find that malware
when it's is sitting on disk it is

26
00:03:26,370 --> 00:03:31,709
packed or encrypted off scared some way
that doesn't allow our reverse engineers

27
00:03:31,709 --> 00:03:38,130
to come in and horses all apart without
first going through some auxiliary phase

28
00:03:38,130 --> 00:03:43,200
of decrypting the hour or unpacking sort
of able to pull this directly from

29
00:03:43,200 --> 00:03:46,470
memory that makes that process a lot
easier

30
00:03:46,470 --> 00:03:51,329
we're also seeing that memories not
matter is not always saved the disk so

31
00:03:51,329 --> 00:03:55,829
there are instances of memory only
malware there's not going to be an

32
00:03:55,829 --> 00:04:02,310
executable on desk associate remember
forensics is always important to know

33
00:04:02,310 --> 00:04:07,799
the scenarios I just from a bit
interested in here memory physics allows

34
00:04:07,799 --> 00:04:12,870
us to better understand event through
correlation so you know itself may not

35
00:04:12,870 --> 00:04:14,920
tell the full story but if we combine
that

36
00:04:14,920 --> 00:04:19,418
this forensics we combine it with
network forensics and hopefully tell a

37
00:04:19,418 --> 00:04:26,889
better picture of what happened during a
particular set of the most common

38
00:04:26,889 --> 00:04:30,940
approach here is going to be the dumb
physical memory from a target system and

39
00:04:30,940 --> 00:04:35,169
then to analyze that using some type of
memory analysis tools so there's a few

40
00:04:35,169 --> 00:04:36,250
out there

41
00:04:36,250 --> 00:04:41,230
the good news in this space a lot of e
top ones are free and open source so

42
00:04:41,230 --> 00:04:44,830
this is not something where you have to
invest thousands of dollars is something

43
00:04:44,830 --> 00:04:48,070
that you can go out and download from
get help today and start messing around

44
00:04:48,070 --> 00:04:54,430
my house as possible so if you really
want to try to analyze the system using

45
00:04:54,430 --> 00:04:58,840
memory forensic tools as it's running
live you could do that it's generally

46
00:04:58,840 --> 00:05:04,119
not because if unless you know exactly
what you're looking for you're going to

47
00:05:04,120 --> 00:05:08,830
be poking and prodding and write scans
and doing various things to your memory

48
00:05:08,830 --> 00:05:13,810
gap so we're running a live system you
have all these things change into the

49
00:05:13,810 --> 00:05:18,760
background and those things if you
capture the memory dump as it as it is

50
00:05:18,760 --> 00:05:21,729
when you're there you don't have to
worry about things within your memory

51
00:05:21,729 --> 00:05:29,469
dump change so typically processes to
capture in is anyone actually is and go

52
00:05:29,470 --> 00:05:34,720
through the process of analyzing the
report based on it

53
00:05:35,289 --> 00:05:43,570
ok so we'll start off with the memory
opposition for those of you who hits

54
00:05:43,570 --> 00:05:47,710
conference last year and cannot talk my
entire talk was about your opposition so

55
00:05:47,710 --> 00:05:51,310
we're really just going to spend a
couple minutes on it today to talk about

56
00:05:51,310 --> 00:05:52,539
how it works

57
00:05:52,539 --> 00:05:56,860
you're interested in the opposition they
specifically didn't go out to youtube

58
00:05:56,860 --> 00:06:01,090
things to check out my lock washer
there's plenty of resources out there

59
00:06:01,090 --> 00:06:07,270
not gonna spend as much time of day but
I do uncovered local so in general

60
00:06:07,270 --> 00:06:12,820
proposition is simply copying volatile
memory to store so I this could be a

61
00:06:12,820 --> 00:06:15,729
desktop could be a lot pop I could be a
phone

62
00:06:15,729 --> 00:06:20,440
anything that has a volatile memory this
would be copied off to somewhere else

63
00:06:20,440 --> 00:06:27,159
for storage but we can later analyzed it
uses a full there are various options in

64
00:06:27,159 --> 00:06:31,690
this space like to kind of categorized
into three broad categories as hardware

65
00:06:31,690 --> 00:06:37,000
software and this other hybrid category
that has some alternatives so the

66
00:06:37,000 --> 00:06:42,490
hardware category using something like a
pci or firewire to jump never easy to

67
00:06:42,490 --> 00:06:46,300
recommend reacts talked about this quite
a bit more last year i'm not gonna

68
00:06:46,300 --> 00:06:47,169
really get into it

69
00:06:47,169 --> 00:06:52,510
that is an option software my experience
is the most common approach for

70
00:06:52,510 --> 00:06:53,620
acquiring memory

71
00:06:53,620 --> 00:06:57,909
this is running some type of tool on the
system that you're trying to dump memory

72
00:06:57,909 --> 00:07:04,780
from and running it on the license wuv
that we have this other thing that

73
00:07:04,780 --> 00:07:09,849
consists of these alternative approaches
that you may want to use if these other

74
00:07:09,849 --> 00:07:15,669
two are available for depending on the
situation in conjunction so you have

75
00:07:15,669 --> 00:07:20,650
things like VMware virtual machine
suspension snapshotting basically going

76
00:07:20,650 --> 00:07:26,560
through the hypervisor of a virtual
environment to dump capture the memories

77
00:07:26,560 --> 00:07:31,840
associated with virtual machine VM
whereas this option virtualbox

78
00:07:31,840 --> 00:07:39,609
hypervisor hyper-v they all have this
often crops are very interested in this

79
00:07:39,610 --> 00:07:45,190
space with depending on the settings
under system i attain a crashed promise

80
00:07:45,190 --> 00:07:50,620
system just from the actual yes good
significant insight into the memory of

81
00:07:50,620 --> 00:07:55,180
that system specifically said not gonna
be a full memory dump this is it depends

82
00:07:55,180 --> 00:08:00,190
on how its configured this could be
useful information call following that

83
00:08:00,190 --> 00:08:04,150
same category so this is a lot of if you
only have the disk if you don't actually

84
00:08:04,150 --> 00:08:09,969
have a live system to work with and
you're just looking at the image or just

85
00:08:09,969 --> 00:08:14,200
copy of yes you may be able to pull off
the crash of hibernation bottom line is

86
00:08:14,200 --> 00:08:22,060
that as it were it would probably hold
back you won't hurt the old to talk has

87
00:08:22,060 --> 00:08:27,550
been some research on there it's there's
some combative research on practicality

88
00:08:27,550 --> 00:08:30,969
that it but essentially is cooling down

89
00:08:31,700 --> 00:08:35,840
ram modules from an actual system
transplanting them over to differences

90
00:08:35,840 --> 00:08:44,180
with reading of from it's possible
there's been some 13 years of

91
00:08:44,179 --> 00:08:49,550
researching ddr3 I that's kind of where
it stopped so is the scrambling

92
00:08:49,550 --> 00:08:55,430
mechanism ddr3 ram Colby wasn't
practical now actually earlier the

93
00:08:55,430 --> 00:09:00,380
shares other research came out so well
actually that is possible if you get a

94
00:09:00,380 --> 00:09:05,450
small number bite you can decrypt itself
any rate that's an option not really

95
00:09:05,450 --> 00:09:10,040
going to cover that either eating more
than just it they were really focuses

96
00:09:10,040 --> 00:09:17,120
software portion is the most common so
this is going to be firing every already

97
00:09:17,120 --> 00:09:22,730
software on this party system typically
the process works by connecting a class

98
00:09:22,730 --> 00:09:26,210
drive an external hard drive or
something like that to the system

99
00:09:26,210 --> 00:09:32,270
running the opposition tool from that
from the USB device and the safety of

100
00:09:32,270 --> 00:09:38,780
the memory out to share or two that save
us p plus there are many options

101
00:09:38,780 --> 00:09:42,050
available in his face as far as tools
are concerned a list here a couple spots

102
00:09:42,050 --> 00:09:46,729
i will look at that there's a lot of
options but not all of them are equal in

103
00:09:46,730 --> 00:09:52,760
that they don't all upgrade the scene
man and this becomes important

104
00:09:52,760 --> 00:09:58,220
particularly when you start to consider
the possibilities introduced by current

105
00:09:58,220 --> 00:10:06,560
level our so talk more about that last
year but the point here is that with

106
00:10:06,560 --> 00:10:10,250
memory opposition software there's
really two different approaches that

107
00:10:10,250 --> 00:10:15,980
most schools 281 is to map a colonel
objects typically its physical memory

108
00:10:15,980 --> 00:10:21,050
object the second will be used to have a
carnal option to actually map the memory

109
00:10:21,050 --> 00:10:27,319
dump that also the tools and the Z what
they will have a comment here they're

110
00:10:27,320 --> 00:10:30,950
interacting with Colonel they are doing
with our objects are dealing with

111
00:10:30,950 --> 00:10:34,520
functions which means that our
opposition when you run them

112
00:10:35,050 --> 00:10:38,260
seems a little bit kernel driver they
have some current component to them

113
00:10:38,260 --> 00:10:42,010
that's because they're interacting with
things like this there is an exception

114
00:10:42,010 --> 00:10:50,170
to these to these two options here so 10
actually directly manipulates page table

115
00:10:50,170 --> 00:10:58,000
entries specifically to interacting with
Colonel API internal functions so that

116
00:10:58,000 --> 00:11:02,649
the options you have a rootkit that is
hooked some of those functions have

117
00:11:02,649 --> 00:11:08,470
locks that so in other words if you got
a rootkit that is checking for memory

118
00:11:08,470 --> 00:11:12,190
acquisition tools or anything that is
requesting the pages associated with

119
00:11:12,190 --> 00:11:15,940
that matter you could say well actually
no I don't want you to read this in

120
00:11:15,940 --> 00:11:22,300
going to return this jump to step on
your return 0 or one of the cases so if

121
00:11:22,300 --> 00:11:25,719
you go around those kernel functions you
can avoid some of those possibilities

122
00:11:25,720 --> 00:11:34,540
with Colonel it's so if you actually
look at the address space this virus

123
00:11:34,540 --> 00:11:38,769
space of a window system this might be
something you would see your graph it

124
00:11:38,769 --> 00:11:42,970
out other thing to point out here is
that you get these sections little

125
00:11:42,970 --> 00:11:47,020
around this is what's going to be mapped
and this is where your opposition was

126
00:11:47,020 --> 00:11:51,250
typically look at so we're doing with
these Carl functions is kind of objects

127
00:11:51,250 --> 00:11:58,660
there are sections these red section
here are going to contain Liberty that

128
00:11:58,660 --> 00:12:04,089
is reserved for various reasons maybe
device memory maybe maps directly to

129
00:12:04,089 --> 00:12:10,959
registers on the device and what we
found is that reading from these often

130
00:12:10,959 --> 00:12:16,479
causes system instability so from a pure
stability standpoint of the system

131
00:12:16,480 --> 00:12:20,260
you're trying to acquire memory from
it's good for our tools to avoid this

132
00:12:20,260 --> 00:12:25,899
because what we don't want is too runny
and opposition tool and it crashes your

133
00:12:25,899 --> 00:12:31,329
system so we'll look at examples of that
here just a little bit but the ideas

134
00:12:31,329 --> 00:12:35,290
that are tools to behave themselves to
some degree because we're running into

135
00:12:35,290 --> 00:12:39,130
carnal gear on a user system may not be
as big a deal

136
00:12:39,130 --> 00:12:42,560
crash it other than the fact that we're
losing you

137
00:12:42,560 --> 00:12:46,579
everything get your production system
you're trying to dump members from that

138
00:12:46,580 --> 00:12:53,270
direction system and blue screens that
could be a much bigger deal with your

139
00:12:53,270 --> 00:12:53,689
son

140
00:12:53,690 --> 00:13:00,410
I just various forensic opposition tools
memory acquisition tools is not

141
00:13:00,410 --> 00:13:03,980
exhaustive list there are you here on
the left for free and open source free

142
00:13:03,980 --> 00:13:11,870
commercial tools that they're going on
here sorry this is just something should

143
00:13:11,870 --> 00:13:16,670
go ahead and download take a look at it
reaches most of them work very similarly

144
00:13:16,670 --> 00:13:22,430
the Furies will have a start button or
perhaps your memory buddy the command

145
00:13:22,430 --> 00:13:28,250
lines will have a typical one-liner
something easy to use with the idea that

146
00:13:28,250 --> 00:13:33,320
we don't want this person that's funny
this required a deep level of expertise

147
00:13:33,320 --> 00:13:37,850
or runs we want our first responders we
want someone that is happens to be city

148
00:13:37,850 --> 00:13:42,650
you know it's-- sitting a few desk down
from us to be able to go over run this

149
00:13:42,650 --> 00:13:47,630
software and preserved memory as soon as
possible need the key here is to obtain

150
00:13:47,630 --> 00:13:52,160
reliable of memory dump as we can as
quickly as possible

151
00:13:52,160 --> 00:13:59,719
that's really what's going to pay this
in the analysis so let's talk about a

152
00:13:59,720 --> 00:14:05,330
little bit about the analysis depending
on your case you're going to have

153
00:14:05,330 --> 00:14:10,640
different goals just from a 10,000 foot
level your goals of memory analysis

154
00:14:10,640 --> 00:14:15,439
going to be extract this data from this
from this memory . in order to answer

155
00:14:15,440 --> 00:14:21,680
the questions that I'm trying to answer
to ensure you know what websites was

156
00:14:21,680 --> 00:14:27,140
this person view it they were looking at
they're using grouting maybe Christian

157
00:14:27,140 --> 00:14:27,800
keys

158
00:14:27,800 --> 00:14:33,709
whatever you're after that's what you're
trying to extract from the memory system

159
00:14:33,709 --> 00:14:37,760
now there are often interested in
whether or not this system is

160
00:14:37,760 --> 00:14:42,170
compromised to begin with so we may be
seeing alerts from the system may be

161
00:14:42,170 --> 00:14:45,979
seen that there are some specific
suspicious activity going on

162
00:14:45,980 --> 00:14:48,480
don't know whether or not the system ax

163
00:14:48,480 --> 00:14:53,579
compromise or these are all positive for
you know this is just some misconfigured

164
00:14:53,579 --> 00:14:56,160
setting that we need to correct

165
00:14:56,160 --> 00:15:00,660
so what i did i was compromised to begin
with if so what are the indicators that

166
00:15:00,660 --> 00:15:05,219
compromise that we can then run across
our enterprise our network to identify

167
00:15:05,220 --> 00:15:13,589
other systems and may be compromised the
same out so some techniques available to

168
00:15:13,589 --> 00:15:17,790
look at three days there are very kind
of different techniques is not

169
00:15:17,790 --> 00:15:22,290
exhaustive list that so the common ones
are things like you were active

170
00:15:22,290 --> 00:15:26,849
terminated processes looking at the
objects associated with those processes

171
00:15:26,850 --> 00:15:32,639
so what do else they loaded with handles
do they have open how how these

172
00:15:32,639 --> 00:15:38,579
processes behaving on the system looking
at network connections is another one

173
00:15:38,579 --> 00:15:43,319
that oftentimes the first or the second
thing that people do in analyzing memory

174
00:15:43,320 --> 00:15:46,860
identifying and tracking file stored in
memory

175
00:15:47,459 --> 00:15:52,109
this is important in that regardless of
the type of case you're looking at

176
00:15:52,110 --> 00:15:55,920
whether it's malware whether it's
acceptable use policy or you're just

177
00:15:55,920 --> 00:16:01,260
trying to figure out what's going on the
system it's very common that you will

178
00:16:01,260 --> 00:16:06,839
want to try to extract files and maybe
cache memory of the system so we'll look

179
00:16:06,839 --> 00:16:10,769
at doing that finally identified events
and injected code

180
00:16:10,769 --> 00:16:14,970
this is another particularly in our
investigation another key technique

181
00:16:14,970 --> 00:16:23,670
that's so we're taking the 3ds hear
anybody processes is one of the first

182
00:16:23,670 --> 00:16:29,880
about the first thing that Mallory
specifically often do so here we are

183
00:16:29,880 --> 00:16:36,329
trying to identify the odd man with the
compliments out based on known normal

184
00:16:36,329 --> 00:16:43,439
conditions this no normal is a recurring
angel line digital forensics is

185
00:16:43,440 --> 00:16:49,949
responsive and security industry in
general this is where baseline really

186
00:16:49,949 --> 00:16:56,859
becomes incredibly useful so if you have
a new organization baselining member

187
00:16:56,860 --> 00:17:01,990
that's that's awesome that is so useful
for consultants for your examiner's

188
00:17:01,990 --> 00:17:06,579
coming in and trying to figure out
what's going on the system if you've got

189
00:17:06,579 --> 00:17:10,569
a baseline of gold image how you know
the system is supposed to look for my

190
00:17:10,569 --> 00:17:15,369
memory standpoint this makes this
process much much easier but assuming

191
00:17:15,369 --> 00:17:22,479
you don't because that's pretty uncommon
is my experience illicit or is it our

192
00:17:22,480 --> 00:17:34,990
day-to-day know their illicit or she is
a senior instructor closets and she

193
00:17:34,990 --> 00:17:39,250
rarely talk couple years ago about
baseline and one of the things that you

194
00:17:39,250 --> 00:17:42,850
mentioned was that even if you don't
have an actual technical baseline that

195
00:17:42,850 --> 00:17:45,399
you create for this purpose

196
00:17:45,400 --> 00:17:49,900
you can still leverage stains like the
crash that we talked about hibernation

197
00:17:49,900 --> 00:17:54,220
piles things that may exist on the disk
utilizing volume shadow copies in

198
00:17:54,220 --> 00:17:58,660
conjunction with those in order to try
to figure out what this is looked like

199
00:17:58,660 --> 00:18:03,340
prior to compromise and that's what
we're after here to try to figure out

200
00:18:03,340 --> 00:18:09,010
what is sticking out in this this
process list but so you don't have a

201
00:18:09,010 --> 00:18:15,190
baseline so things are interested in
here are was the parent process was this

202
00:18:15,190 --> 00:18:18,910
process started about the correct
parents so there are some for windows

203
00:18:18,910 --> 00:18:23,470
processes so you have else as SMS
various process easier

204
00:18:23,470 --> 00:18:27,310
you always want to find crossing the
window system and they're going to have

205
00:18:27,310 --> 00:18:31,360
the same parents are going to have a lot
of traits that will be the same across

206
00:18:31,360 --> 00:18:38,770
all versions of windows for all all
systems on that version one we're

207
00:18:38,770 --> 00:18:42,190
looking at things like is this process
running from the wrong directory if you

208
00:18:42,190 --> 00:18:46,000
have elsass running from the app data
directory you probably got a problem it

209
00:18:46,000 --> 00:18:51,670
should not be running looking for music
Admiral command-line suspiciously the

210
00:18:51,670 --> 00:18:58,060
spell names service host is a major
culprit here you can see here it should

211
00:18:58,060 --> 00:19:03,879
typically be svchost here's sceeto so if
you're just skating down looking at all

212
00:19:03,880 --> 00:19:07,840
the processes this we not stay now and
that's that's that's the point

213
00:19:07,840 --> 00:19:13,059
is it hiding in plain sight at sometimes
we can actually use after normal start

214
00:19:13,059 --> 00:19:18,549
times as an indicator so is this process
started way off the time that should

215
00:19:18,549 --> 00:19:23,289
stop should start at boot time but it's
actually started a couple of minutes or

216
00:19:23,289 --> 00:19:30,370
hours later here we gotta process
listing a PS list plug-in around this is

217
00:19:30,370 --> 00:19:36,760
the school's recall one of the major
memory analysis tools and it's just a

218
00:19:36,760 --> 00:19:41,830
list processes money on the system that
is infected you can see there's a couple

219
00:19:41,830 --> 00:19:46,720
processes that accident here but scaling
down here understand it's probably hard

220
00:19:46,720 --> 00:19:55,840
to read quickly course by is there
anything it seems out pretty just yell

221
00:19:55,840 --> 00:20:03,668
it out but if you're not used to looking
at this is something that you know that

222
00:20:03,669 --> 00:20:08,409
you don't do commonly it's not easy to
pick out what is what is going on your

223
00:20:08,409 --> 00:20:11,799
particular just by the names so we don't
know where these are running from going

224
00:20:11,799 --> 00:20:15,010
to have a lot of the other information
associated with these processes that

225
00:20:15,010 --> 00:20:19,570
will be helpful in determining whether
or not they're actually suspicious but

226
00:20:19,570 --> 00:20:25,928
we do have we have three lsat process
you know how many else's process you

227
00:20:25,929 --> 00:20:31,899
should be running on the typical system
we should generally have what

228
00:20:32,440 --> 00:20:40,029
so the fact that there are three year is
a red flag just the numbers alone you

229
00:20:40,029 --> 00:20:44,380
know that there's something about active
directory so we're giving these little

230
00:20:44,380 --> 00:20:47,080
bit saying let's take a look at their
parent process

231
00:20:47,080 --> 00:20:52,689
let's see who started else now this one
the top we can see the wind logon

232
00:20:52,690 --> 00:20:57,850
started elsass and in some cases that
may be normal some cases it may not be

233
00:20:57,850 --> 00:21:04,330
depending on the operating so this is
beyond behind it expects RL sets have a

234
00:21:04,330 --> 00:21:09,279
prior to that we respect one lot of so
another version of operating system this

235
00:21:09,279 --> 00:21:17,140
may be no but look the parent classes
here we see it is 68 which is services

236
00:21:17,140 --> 00:21:19,990
services should not be starting else ass

237
00:21:19,990 --> 00:21:25,390
so if we see we see you just looking at
the issues within our process the bottom

238
00:21:25,390 --> 00:21:30,040
two elsass process these are really
starting to stick out is being difficult

239
00:21:30,040 --> 00:21:34,928
problems here digging further look at
the start time of these you can see the

240
00:21:34,929 --> 00:21:42,130
first first one parent logon starts at
ten 29 which is around the same time a

241
00:21:42,130 --> 00:21:46,630
lot of the other policies that started a
good time to start so final appearances

242
00:21:46,630 --> 00:21:51,309
this will start with the computer sorry
but look at the ability to actually

243
00:21:51,309 --> 00:21:53,410
start several months later

244
00:21:53,410 --> 00:21:57,130
so now these are looking seriously
suspicious and these are ones that we

245
00:21:57,130 --> 00:22:01,870
want to digging further to see what the
elves and one of the process objects

246
00:22:01,870 --> 00:22:07,600
these may be interacting with and even w
these directly out from memory i analyze

247
00:22:07,600 --> 00:22:15,610
this burg so now we're card box is a
good one in that if you're looking at

248
00:22:15,610 --> 00:22:18,370
that process listening there's nothing
that stood out

249
00:22:18,370 --> 00:22:22,809
there's nothing suspicious there have
itself or you just want to start with

250
00:22:22,809 --> 00:22:28,330
our quarterbacks because that's the
process is going to do this for you

251
00:22:28,330 --> 00:22:31,928
this can be very beneficial so here
you're looking for simply suspicious

252
00:22:31,929 --> 00:22:34,750
connections you're looking for whether
or not this system should be

253
00:22:34,750 --> 00:22:40,030
communicating with that system this
process communicate over that poor soul

254
00:22:40,030 --> 00:22:46,750
so we look at this is the output of a
wise in plugin this is for recalling

255
00:22:46,750 --> 00:22:48,820
well same tool here

256
00:22:48,820 --> 00:22:57,669
different-different our infection with
the acid will recognize the previous now

257
00:22:57,670 --> 00:23:04,690
are based on 83 else has policies those
actually stuff said that's when you can

258
00:23:04,690 --> 00:23:09,100
go out there and download eyes it's
awesome to take a look at it

259
00:23:09,100 --> 00:23:14,889
three-on-one it's the armory from the
website is what is posted i know it's

260
00:23:14,890 --> 00:23:21,130
through samples out there this one
different malware / looking for here our

261
00:23:21,130 --> 00:23:26,260
network connections and simple if you
look at this remote address column here

262
00:23:26,260 --> 00:23:29,410
aside from these 100

263
00:23:30,340 --> 00:23:33,610
tuition instances there which are almost
certainly a false positive

264
00:23:34,390 --> 00:23:43,150
Regulus get your those two others
particularly those really stand out

265
00:23:43,150 --> 00:23:56,380
these other remote up there are two that
are not like the others and this portion

266
00:23:56,380 --> 00:24:05,080
is just important it's connecting on
this 586 Florida 2141 these IPS tonight

267
00:24:05,080 --> 00:24:09,370
in that eighth they just don't look like
the others we don't know what are we

268
00:24:09,370 --> 00:24:14,949
know that they there's something
different so you can look at the pits

269
00:24:14,950 --> 00:24:20,350
want to see what process is its
associated with you

270
00:24:20,350 --> 00:24:26,289
we also see it can coordinate so maybe
this is a brother take a look at it get

271
00:24:26,289 --> 00:24:30,700
this is services though shouldn't so now
we're asking yourself should service

272
00:24:30,700 --> 00:24:37,179
house be communicated over 48 probably
not maybe depends on what exactly that

273
00:24:37,179 --> 00:24:42,370
is bcos doing but that's something that
we're interested so we gotta step

274
00:24:42,370 --> 00:24:47,979
forward if you say well what is this IP
address list is also on call so now we

275
00:24:47,980 --> 00:24:53,110
have a service host communicator report
80 with haha now is that normal

276
00:24:53,679 --> 00:24:58,480
probably not so you want to go ahead
with this is bcos we go back to our

277
00:24:58,480 --> 00:25:03,220
processes the process listening to go
back to the handles and pls associated

278
00:25:03,220 --> 00:25:07,450
with SE knows figure out what in the
world is doing and why is communicating

279
00:25:07,450 --> 00:25:18,669
pong . shocking files from memory is
another key portion here in that

280
00:25:18,669 --> 00:25:23,950
regardless of the type of investigation
you're doing this can be critically

281
00:25:23,950 --> 00:25:28,210
important because very often we are
interested in files that are simply cast

282
00:25:28,210 --> 00:25:29,110
member

283
00:25:29,110 --> 00:25:34,389
so think of things like a dead log word
documents even open pictures that the

284
00:25:34,390 --> 00:25:35,470
user is looking

285
00:25:35,470 --> 00:25:41,350
I was looking at so we're going to do
this we're essentially scanning the

286
00:25:41,350 --> 00:25:48,039
memory for file objects and noting
hundred or offset memory down or dumping

287
00:25:48,039 --> 00:25:53,140
them based on regular expression so
maybe we want to do all files that in DB

288
00:25:53,140 --> 00:25:59,470
TX it available for all files in the txt
something like that so there are various

289
00:25:59,470 --> 00:26:03,760
use cases here and that's one of the
reasons up i want to go over because he

290
00:26:03,760 --> 00:26:06,908
could you do a lot of our investigations

291
00:26:06,909 --> 00:26:12,700
this could be important so the way this
process will work to go would be the

292
00:26:12,700 --> 00:26:19,030
first girl to identify the same richest
in txt file 03 we identified x bottles

293
00:26:19,030 --> 00:26:21,520
in the memory

294
00:26:21,520 --> 00:26:26,500
we're actually we switch now were and
recall now switching over to volatility

295
00:26:26,500 --> 00:26:31,330
this is coming the other big I'm gonna
rain Alice's holes anyone use volatility

296
00:26:31,330 --> 00:26:37,240
was your done so this is one of the ones
that most people that the deal with

297
00:26:37,240 --> 00:26:41,650
memory analysis to use this one will
recall there are other options opponent

298
00:26:41,650 --> 00:26:46,600
anyway we're running a file scan plug in
here we're looking at everything that

299
00:26:46,600 --> 00:26:51,789
isn't that txt and we could so you want
to dump everything txt but in this case

300
00:26:51,789 --> 00:26:57,370
I just wanted out this first access scam
that's the only 1i really interested so

301
00:26:57,370 --> 00:27:02,739
I would know this girl offset here and
then use the files plugin for volatility

302
00:27:02,740 --> 00:27:08,320
is about this will offset that notice
here and would dump it out to where the

303
00:27:08,320 --> 00:27:13,418
best you could they have this make sure
that it looks like it looks like it is

304
00:27:13,419 --> 00:27:19,960
these first 5 lines of it are so that's
really all there is to extracting files

305
00:27:20,650 --> 00:27:24,850
what is important to keep in mind that
there is no guarantee that this entire

306
00:27:24,850 --> 00:27:30,549
file is going to be cached memory so we
may have half of it or you may have a

307
00:27:30,549 --> 00:27:35,320
good portion of it but some of these
pages associated with this pile were

308
00:27:35,320 --> 00:27:39,220
paged out to the disc while we were
required memory

309
00:27:39,220 --> 00:27:43,120
we're going to be missing those pages
depending on how your watches handles

310
00:27:43,120 --> 00:27:44,739
that

311
00:27:44,740 --> 00:27:48,250
you know those may be 0 added or
something like that but the key here is

312
00:27:48,250 --> 00:27:53,620
that you may not be able to obtain
higher file from a memory dump you may

313
00:27:53,620 --> 00:27:59,080
just be able to get eighty percent
50-percent players so really enhance

314
00:27:59,080 --> 00:28:08,110
this is incredibly useful technique
women's to dallas so really just kind of

315
00:28:08,110 --> 00:28:11,020
didn't tip of the iceberg memory
analysis

316
00:28:11,020 --> 00:28:14,020
yes

317
00:28:15,850 --> 00:28:24,969
oh so yeah so if the question was is
there a way to if you've got in store

318
00:28:24,970 --> 00:28:29,590
portions of the file that i paged out is
there a way to basically go back and

319
00:28:29,590 --> 00:28:35,620
figure out what they were paying job and
find those on disk and unless you did

320
00:28:35,620 --> 00:28:40,899
that you're in the opposition portion
will be incredibly difficult so really

321
00:28:40,900 --> 00:28:44,800
what you would need to do is as you are
required memory your tool we need to see

322
00:28:44,800 --> 00:28:49,270
that ok this file is actually page up
the disc let me pull this in this in

323
00:28:49,270 --> 00:28:54,460
this now I'm not wearing any tools at
this point that actually very them up at

324
00:28:54,460 --> 00:28:59,590
one point there was one that claimed to
do while not that I don't think that's

325
00:28:59,590 --> 00:29:01,059
still around

326
00:29:01,059 --> 00:29:05,020
so the short answer is it will be really
difficult to do that

327
00:29:05,020 --> 00:29:09,580
your best bet is to capture the entire
page file top opposition try to bury

328
00:29:09,580 --> 00:29:20,678
mably so memory analysis is incredibly
expensive topic it continuously changes

329
00:29:20,679 --> 00:29:25,240
with each operating system there are
some significant changes occur so as

330
00:29:25,240 --> 00:29:29,860
long windows 8 the encryption of a data
structure known as the kernel debugging

331
00:29:29,860 --> 00:29:35,050
data block and unfortunately this cdbg
was something that a lot of our analysis

332
00:29:35,050 --> 00:29:40,389
tools relied on to find other key
components in our memory . so this seems

333
00:29:40,390 --> 00:29:45,550
encrypted that broke some of our
analysis we could we get along we do a

334
00:29:45,550 --> 00:29:50,379
simple processes the road block
structures you to list out these

335
00:29:50,380 --> 00:29:53,710
processes and many other forces of the

336
00:29:53,710 --> 00:29:58,240
no longer work because this key
structural relying on is now encrypted

337
00:29:58,240 --> 00:30:02,980
so they're going to be changes like
occur that we have to take into account

338
00:30:02,980 --> 00:30:08,380
there are two developers have to take
into account during analysis a lot of

339
00:30:08,380 --> 00:30:10,809
this is going to involve
reverse-engineering these structures

340
00:30:10,809 --> 00:30:15,340
this is not easy work of you know this
is looking at in memory data structure

341
00:30:15,340 --> 00:30:18,428
using the kernel debugger trying to
figure out how these things are working

342
00:30:18,429 --> 00:30:24,159
so we can piece this back together from
a memory definitely one of the things

343
00:30:24,159 --> 00:30:28,299
that you'll find when you get in if you
start to get into memory Olympics is

344
00:30:28,299 --> 00:30:32,470
that knowledge of operating system
internals is really really helpful here

345
00:30:32,470 --> 00:30:38,230
so understanding executive objects and
understanding just how process is i love

346
00:30:38,230 --> 00:30:42,399
how it works and how it looks in memory
can really beneficial and just

347
00:30:42,399 --> 00:30:46,120
understanding that your tools understand
what they're telling you they're not

348
00:30:46,120 --> 00:30:52,719
going back to the changes here we see
that there are some significant changes

349
00:30:52,720 --> 00:30:57,520
in windows and obviously from a user
standpoint there are some from a

350
00:30:57,520 --> 00:31:01,870
architectural standpoint just
fundamentally there's some changes here

351
00:31:01,870 --> 00:31:11,110
that that impact memory forensic sand
plenty of other fields as well today I

352
00:31:11,110 --> 00:31:15,939
want to get into the recompression and
i'll talk about virtual secure of there

353
00:31:15,940 --> 00:31:21,190
are tons of other things that talk about
it talk about your losses and windows

354
00:31:21,190 --> 00:31:26,350
how super lynx is an interesting one
that's starting to become more popular i

355
00:31:26,350 --> 00:31:29,889
think there was a blackout presentation
this year i'm not mistaken is actually

356
00:31:29,890 --> 00:31:34,600
derby car later on there's there's a
presentation of yourself well I always

357
00:31:34,600 --> 00:31:39,219
based on the game sounds like it's
yourself I'll let you also see changes

358
00:31:39,220 --> 00:31:43,929
and process needs and hierarchy in the
reason that kind of stuff is important

359
00:31:43,929 --> 00:31:47,470
is if you're trying to figure out trying
to find things that are hiding in plain

360
00:31:47,470 --> 00:31:51,429
sight of the fact that the task manager
has a different process name of windows

361
00:31:51,429 --> 00:31:57,940
7 windows 8 in this hand that becomes
important in hair process of various and

362
00:31:57,940 --> 00:32:04,389
becomes important because it's going to
vary based on the Opera but you need to

363
00:32:04,389 --> 00:32:05,409
focus on today

364
00:32:05,410 --> 00:32:20,080
top right so when the secondary
compression this tips to improve system

365
00:32:20,080 --> 00:32:26,020
performance by simply reducing the
number of rights to the page so what's

366
00:32:26,020 --> 00:32:30,100
this is trying to do is to limit how
many times were having to fault and go

367
00:32:30,100 --> 00:32:35,169
out to the disc the hard drive or even
SSD whatever the cases is trying to

368
00:32:35,170 --> 00:32:40,000
avoid all those instances when that
happens and instead it's saying hey this

369
00:32:40,000 --> 00:32:44,740
memory is not being used this page is
not being used we compress that move

370
00:32:44,740 --> 00:32:48,550
this moving over to a different store in
memory instead of running after the page

371
00:32:48,550 --> 00:32:55,090
is all the electrical performance now
there are couple things to note here now

372
00:32:55,090 --> 00:32:57,699
this is only used when it's needed

373
00:32:57,700 --> 00:33:02,110
so if you've got a ton of ramen your
system you may not see this unit but if

374
00:33:02,110 --> 00:33:07,270
you are interested tablet using a
smaller laptop ram then you can start to

375
00:33:07,270 --> 00:33:11,800
see every compression proving your
system performance of which were

376
00:33:11,800 --> 00:33:14,830
generalities it's going to be a little
bit snap you're not having those reads

377
00:33:14,830 --> 00:33:21,970
from its we also see that Metro apps are
tightly integrated with the memory

378
00:33:21,970 --> 00:33:26,650
compression models so whatever these
things are suspended which aren't you

379
00:33:26,650 --> 00:33:28,210
guys have seen whenever you go

380
00:33:28,210 --> 00:33:32,620
well whenever metro app is not in the
foreground interest the suspended state

381
00:33:32,620 --> 00:33:36,340
and then when it's in the suspended
state is actually compressed it goes to

382
00:33:36,340 --> 00:33:42,100
its own memory pull until it fills
resume so if you look at past manager

383
00:33:42,100 --> 00:33:47,740
you might see something like this or any
Windows 10 no respect few of these to be

384
00:33:47,740 --> 00:33:51,910
listed there in this case you can see me
going to search for pot assistant is in

385
00:33:51,910 --> 00:33:56,440
the suspended state what that's telling
us that this memories rest until we

386
00:33:56,440 --> 00:34:05,200
bring this circle I back to the
foreground right initially zoo so we

387
00:34:05,200 --> 00:34:09,610
also see that depending on what version
of windows 10 years running you actually

388
00:34:09,610 --> 00:34:11,570
see memory compressions mission

389
00:34:11,570 --> 00:34:17,120
the task manager now this varies of
scene initially believed movement in

390
00:34:17,120 --> 00:34:21,440
first rolled out it was just the system
possible process listed here which was

391
00:34:21,440 --> 00:34:27,679
causing problems because as you can see
this process is consuming 250 megs of

392
00:34:27,679 --> 00:34:32,719
ram so you will see forum posts and
things online about my eyes my system

393
00:34:32,719 --> 00:34:38,509
process using 200 megabytes of grandmas
hold the reason we chose was intelligent

394
00:34:38,510 --> 00:34:42,410
necessarily it was just the system
process was it but the reason is because

395
00:34:42,409 --> 00:34:48,350
all these non Metro apps when they're in
their memory pages are compressed air

396
00:34:48,350 --> 00:34:54,469
moving over to the school system system
process so you would see that reflected

397
00:34:54,469 --> 00:34:55,520
here

398
00:34:55,520 --> 00:34:59,900
so what is depending on what version of
windows your writing may or may not see

399
00:34:59,900 --> 00:35:04,550
compressed memory mentioned in the past
in here if you don't still there it's

400
00:35:04,550 --> 00:35:11,570
just may not be listed so the reason
this is important for forensics

401
00:35:11,570 --> 00:35:13,460
specifically more memory

402
00:35:13,460 --> 00:35:19,070
forensics is that in terms of just the
amount of content available in our we

403
00:35:19,070 --> 00:35:23,930
acquired memory dump when memory
compression is in use the value of that

404
00:35:23,930 --> 00:35:29,299
memory dump will increase because
inherently we have fewer pages page out

405
00:35:29,300 --> 00:35:34,010
the disc in fact we've seen that on
average windows will page out fifty

406
00:35:34,010 --> 00:35:40,220
percent less for half as much to disk
whenever every president used so what

407
00:35:40,220 --> 00:35:43,939
that means is now these pages of your
talking about that could have been paged

408
00:35:43,940 --> 00:35:49,700
out to page file charges extract those
files now those are still stored memory

409
00:35:49,700 --> 00:35:54,950
they just maybe in a compressed State so
the value of our physical memory dump in

410
00:35:54,950 --> 00:35:59,419
terms of just pure content that's going
to be in there increases with memory

411
00:35:59,420 --> 00:36:04,340
compression on the flipside pagefile
decreases because going to have less

412
00:36:04,340 --> 00:36:07,910
data page is the page file will be
impressed

413
00:36:08,510 --> 00:36:14,120
so the problem here is that our memory
analysis tools to my knowledge and not

414
00:36:14,120 --> 00:36:18,950
caught up with this so we don't memory
will have is compressed memory in here

415
00:36:18,950 --> 00:36:23,419
but our analysis tools are to the point
that they can identify this compares

416
00:36:23,420 --> 00:36:28,369
remember and decompress it from memory
so we'll still essentially be missing

417
00:36:28,369 --> 00:36:32,720
those in terms of analysis that will be
there in opposition

418
00:36:32,720 --> 00:36:37,009
so until everyone else was ketchup and
are able to deal with this compressed

419
00:36:37,010 --> 00:36:38,960
memory in the dump

420
00:36:38,960 --> 00:36:43,640
we're out of that losses as to how to
leverage this added bad but it is there

421
00:36:43,640 --> 00:36:52,910
it's just that we can't really reap the
benefits just yet so Windows 10 virtual

422
00:36:52,910 --> 00:36:56,540
secured yes they don't have this
technology is anyone familiar with it

423
00:36:56,540 --> 00:37:06,740
the double at night so this this
provides the underlying architecture for

424
00:37:06,740 --> 00:37:10,459
things like prudential garden for device
card so you probably are intrigued our

425
00:37:10,460 --> 00:37:16,549
device garden other things this makes
possible but essentially what the SFO is

426
00:37:16,549 --> 00:37:22,339
it utilizes a hypervisor and essentially
split state into a normal world and they

427
00:37:22,339 --> 00:37:28,308
secure and assigns virtual trust levels
or vtl to each of those worlds where PTL

428
00:37:28,309 --> 00:37:33,799
zeroes in on the world BTL one is secure
borough in detail one is more trusted in

429
00:37:33,799 --> 00:37:40,460
detail 0 so it's similar to our remodel
but it's it's not in the same you still

430
00:37:40,460 --> 00:37:46,970
ring ring 30 I each each of the local
not go out here in graphic form it

431
00:37:46,970 --> 00:37:53,240
should have explained what's interesting
here is that secure world is isolated

432
00:37:53,240 --> 00:37:57,049
from normal world using second-level
address translation or second level page

433
00:37:57,049 --> 00:37:58,430
tables splat

434
00:37:58,430 --> 00:38:05,299
so basically a hypervisor is controlling
access for normal girl to secure through

435
00:38:05,299 --> 00:38:09,650
slats so it's basically they ensure that
we don't have unrestricted access to

436
00:38:09,650 --> 00:38:15,650
whatever is running and secure so in
order to really understand this it is

437
00:38:15,650 --> 00:38:18,950
helpful to just quickly go through the
traditional architecture of what we're

438
00:38:18,950 --> 00:38:23,210
used to seeing what we've been dealing
with what most systems are still money

439
00:38:23,210 --> 00:38:27,710
so you've got typically usability
carnival are sitting on top of the

440
00:38:27,710 --> 00:38:32,359
hardware most applications are going to
run to use about privilege call reach

441
00:38:32,359 --> 00:38:33,038
down turn

442
00:38:33,039 --> 00:38:39,369
lower it will do whatever you need to do
is turn the output user so it seems like

443
00:38:39,369 --> 00:38:41,769
a good mom all rights it works

444
00:38:41,769 --> 00:38:45,698
Colonel handles the more privileged
operations we still have a less

445
00:38:45,699 --> 00:38:52,749
privileged user mode so what's wrong
with this could potentially go haywire

446
00:38:54,910 --> 00:38:58,149
the issue is we can't trust the colonel

447
00:38:58,150 --> 00:39:02,799
so we know that it's more than just a
possibility that we have malicious code

448
00:39:02,799 --> 00:39:08,739
right in the kernel of our system so
windows tries to solve this problem with

449
00:39:08,739 --> 00:39:15,369
windows tab so what it does is it takes
the crew Lord splits it from the harder

450
00:39:15,369 --> 00:39:23,289
it pushes the hypervisor in between then
put a security guard insecure cardboard

451
00:39:23,289 --> 00:39:28,869
aside and essentially isolates the two
there was a little wall basically this

452
00:39:28,869 --> 00:39:34,599
wall is implemented the second patients
so what this does is say everything

453
00:39:34,599 --> 00:39:38,409
running over here user mode in front of
ode you can't you don't have

454
00:39:38,409 --> 00:39:45,459
unrestricted access to anything or any
insecurities roads so essentially

455
00:39:45,459 --> 00:39:50,529
communication between these two highly
proxy and sanctioned by microsoft

456
00:39:50,529 --> 00:39:57,729
microsoft sanction ways so when you're
writing things like winter garden device

457
00:39:57,729 --> 00:40:03,968
card those one over here and secure user
those processes are of trust these

458
00:40:03,969 --> 00:40:08,619
trusts are limited in what they can do
either isolated from one another very

459
00:40:08,619 --> 00:40:14,229
purpose built so traditional are
available trust to specifically is

460
00:40:14,229 --> 00:40:18,698
designed to prevent pass the hash for
those types of attacks where you are

461
00:40:18,699 --> 00:40:24,159
leveraging the fact that traditionally
your elsass process incredible trying to

462
00:40:24,159 --> 00:40:27,069
protect your until national Kerberos
ticket

463
00:40:27,069 --> 00:40:31,900
it takes those secrets out of your lsat
process moves them over to a new process

464
00:40:31,900 --> 00:40:35,529
and secure load called policy iso and
says it

465
00:40:35,529 --> 00:40:40,599
ok now you can't communicate you can
access the memory space of this LSA iso

466
00:40:40,599 --> 00:40:43,279
process from normal

467
00:40:43,279 --> 00:40:48,679
so there are various protections in
place to prevent unauthorized from

468
00:40:48,679 --> 00:40:54,439
partying and secure mode this kind of
begs the obvious question of ok so got

469
00:40:54,439 --> 00:40:58,788
all these restrictions set up got all
this model set up so can you have

470
00:40:58,789 --> 00:41:06,169
malware and insecure and a short answer
here is that it would be incredibly

471
00:41:06,169 --> 00:41:11,808
difficult if you have all of your home
security features in place so if you've

472
00:41:11,809 --> 00:41:16,159
got secure secure boot enabled if you
have an island of you which essentially

473
00:41:16,159 --> 00:41:21,559
tries to block you may have a TPM if
you've got all of his dsm configured

474
00:41:21,559 --> 00:41:26,150
properly programs working like it should
then know it's going to be extremely

475
00:41:26,150 --> 00:41:30,859
difficult do this without some type of
hypervisor from where exploit to get

476
00:41:30,859 --> 00:41:37,279
around so even if you were to get into
that enabling are able to run something

477
00:41:37,279 --> 00:41:42,259
insecure boat these trusts 'let's
apparently cannot do files and registry

478
00:41:42,259 --> 00:41:48,319
items are extremely limited what they
could do so if you've got malicious code

479
00:41:48,319 --> 00:41:53,929
it's hard to be that delicious if you
can do following registry up i would ask

480
00:41:53,929 --> 00:41:58,999
you a great talk last year block at he
really got into the details and the

481
00:41:58,999 --> 00:42:05,629
internals of trust let's secure mode so
this is interesting point is you take a

482
00:42:05,630 --> 00:42:12,049
look at it that is on youtube I believe
as well start but wrap up and how this

483
00:42:12,049 --> 00:42:16,699
affects memory forensics from the
analysis I'd this doesn't do a whole lot

484
00:42:16,699 --> 00:42:22,849
other than it creates news new processes
so we have potential garden perhaps you

485
00:42:22,849 --> 00:42:26,749
secure Colonel available you'll see the
creation of these two new processes

486
00:42:26,749 --> 00:42:32,419
let's say I so and secure system so
changes what normal looks like my system

487
00:42:32,989 --> 00:42:37,219
what's interesting is why we can see
these processes are running we can

488
00:42:37,219 --> 00:42:39,739
actually interact with their address

489
00:42:39,739 --> 00:42:45,349
whereas all of these others service
elsass everything else ready to normal

490
00:42:45,349 --> 00:42:48,000
boat you can interact with as long as
you have

491
00:42:48,000 --> 00:42:53,670
code so for example of trying to take a
look at elsass here this is using

492
00:42:53,670 --> 00:42:59,100
process hiker you can see there's no
problem w memory help from Rimmel sauce

493
00:42:59,100 --> 00:43:03,750
but if we're trying to do the same thing
with Allison I so you get an error

494
00:43:03,750 --> 00:43:08,340
unable to bring them right and access
memory location so what this is doing is

495
00:43:08,340 --> 00:43:13,020
saying hey your process running with a
virtual trust level 0 if you're trying

496
00:43:13,020 --> 00:43:19,710
to access project million page virtual
trust level 1 so it blocks the access

497
00:43:19,710 --> 00:43:24,180
this becomes a serious problem we're
trying to acquire memory because what

498
00:43:24,180 --> 00:43:28,740
happens is that our current memory
opposition tools running normal so they

499
00:43:28,740 --> 00:43:33,359
know that these pages existing in the
secure world we still have a memory

500
00:43:33,360 --> 00:43:35,700
management in normal mode

501
00:43:35,700 --> 00:43:40,980
the problem is we can't dump most of the
memory associated the way that this

502
00:43:40,980 --> 00:43:47,430
presents itself is in the form of a blue
screen so cycle every single tool for a

503
00:43:47,430 --> 00:43:52,799
position that tested software memory a
position except for one I found this

504
00:43:52,800 --> 00:43:53,340
police

505
00:43:53,340 --> 00:43:59,070
so what have you close the driver and
system properly blue screen and the idea

506
00:43:59,070 --> 00:44:02,070
here is that we're trying to access page
we don't have access

507
00:44:03,060 --> 00:44:10,290
so what we can do here if you encounter
system DSN we're trying to figure out

508
00:44:10,290 --> 00:44:12,630
what is the way around this

509
00:44:12,630 --> 00:44:16,230
the short answer is well below the
hypervisor were used you know used

510
00:44:16,230 --> 00:44:21,420
something else to double the memory but
if you're on a fiscal system Destiny's

511
00:44:21,420 --> 00:44:26,070
on a virtual system you can still use
things like snapshot and things we

512
00:44:26,070 --> 00:44:31,440
talked about earlier to dump in memory
but you you can't be on a live system at

513
00:44:31,440 --> 00:44:37,020
this point currently and expect to build
adopts memory pages from secure load

514
00:44:37,020 --> 00:44:47,070
also just going to recap here with with
with changes in windows 10 memory

515
00:44:47,070 --> 00:44:47,820
compression

516
00:44:47,820 --> 00:44:52,800
we just complicates the analysis portion
doesn't affect the opposition fact it

517
00:44:52,800 --> 00:45:00,360
increases the value of our board members
ESO is where we counter real problems

518
00:45:00,360 --> 00:45:05,580
with our memory acquisition so again
most of our software tools at this point

519
00:45:05,580 --> 00:45:12,120
will crash the system when you try to
run it will change via some dust change

520
00:45:12,120 --> 00:45:18,029
what normal looks like on the system so
we do have that change analysis that's

521
00:45:18,030 --> 00:45:25,320
really about it Alison so basically keep
up with technology know you're told

522
00:45:25,320 --> 00:45:31,230
miller limits keep up with twitter at
normal speed years so there's a lot of

523
00:45:31,230 --> 00:45:34,470
online resources here and there are
memory dumps available if you want to go

524
00:45:34,470 --> 00:45:38,640
out and actually download those from
websites so for you to do so if you're

525
00:45:38,640 --> 00:45:43,140
interested in this stuff different
information that i know we're just that

526
00:45:43,140 --> 00:45:48,930
time so it only hope you guys have any
more questions cooperate you all stay

527
00:45:48,930 --> 00:45:54,450
here but ask me questions now there's
not a lot better handle on there are now

528
00:45:54,450 --> 00:45:59,430
on twitter technically but we don't
tweet a lot so you're interested there

529
00:45:59,430 --> 00:46:00,779
it is

530
00:46:00,780 --> 00:46:13,650
yes

531
00:46:14,730 --> 00:46:18,330
yeah

